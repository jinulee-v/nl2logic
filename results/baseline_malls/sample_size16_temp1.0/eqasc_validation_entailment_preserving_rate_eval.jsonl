{"id": "eqasc_validation_0", "prediction": "all x.(Climate(x) -> (Terms(x,Temperature) & Terms(x,Moisture)))", "score": 0}
{"id": "eqasc_validation_0", "prediction": "all x.(Climate(x) -> (Termine(x,Temperature) & Mention(x,Moisture)))", "score": 0}
{"id": "eqasc_validation_0", "prediction": "all x.(Climate(x) -> (TermsOfTemperature(x) & TermsOfMoisture(x)))", "score": 0}
{"id": "eqasc_validation_0", "prediction": "all x.(Climate(x) -> (Termine(x,Temperature) & Demifacture(x,Moisture)))", "score": 0}
{"id": "eqasc_validation_0", "prediction": "all x.(Climate(x) -> (DepictedInTemperature(x) & DepictedInMoisture(x)))", "score": 0}
{"id": "eqasc_validation_0", "prediction": "all x.(Climate(x) -> (ThermalTemperature(x) & Moisture(x)))", "score": 0}
{"id": "eqasc_validation_0", "prediction": "all x.(Climate(x) -> (Temperature(x) & Moisture(x)))", "score": 0}
{"id": "eqasc_validation_0", "prediction": "all x.(Climate(x) -> (TermMedium(x) & Thermal(x) & Moisture(x)))", "score": 0}
{"id": "eqasc_validation_0", "prediction": "all x.(Climate(x) -> (DisputedOfTemperature(x) & DescribedOfMoisture(x)))", "score": 0}
{"id": "eqasc_validation_0", "prediction": "all x.((Climate(x) & (Temperature(x) | Moisture(x))) -> GeneratedInTerms(x))", "score": 0}
{"id": "eqasc_validation_0", "prediction": "all x.(Climate(x) -> (DescribedAsTemperature(x) & DescribedAsMoisture(x)))", "score": 0}
{"id": "eqasc_validation_0", "prediction": "all x.(Climate(x) -> (TermsOfTemperature(x) & MeasurementsOfMoisture(x)))", "score": 0}
{"id": "eqasc_validation_0", "prediction": "all x.(Climate(x) -> (DescribedInTermsOfTemperature(x) & DescribedInTermsOfMoisture(x)))", "score": 0}
{"id": "eqasc_validation_1", "prediction": "all x y.((FireBehavior(x) & LocalWeatherCondition(y)) -> DrivenBy(x,y))", "score": 0}
{"id": "eqasc_validation_1", "prediction": "all x.(FireBehavior(x) -> (DrivenByLocalWeatherConditions(x) & (Winds(x) | Temperature(x) | Moisture(x))))", "score": 0}
{"id": "eqasc_validation_1", "prediction": "all x.(FireBehavior(x) -> (DrivenByLocalWeatherConditions(x) & WindsTemperatureMoisture(x)))", "score": 0}
{"id": "eqasc_validation_1", "prediction": "all x.(FireBehavior(x) -> (DrivenByLocalWeather(x) & WindConditions(x) & TemperatureConditions(x) & MoistureConditions(x)))", "score": 0}
{"id": "eqasc_validation_1", "prediction": "all x.(FireBehavior(x) -> (DrivenByWinds(x) & DrivenByTemperature(x) & DrivenByMoisture(x)))", "score": 0}
{"id": "eqasc_validation_1", "prediction": "all x y.((FireBehavior(x) & LocalWeatherConditions(y)) -> (DrivenBy(x,y) & Winds(y) & Temperature(y) & Moisture(y)))", "score": 0}
{"id": "eqasc_validation_1", "prediction": "all x.(FireBehavior(x) -> (DrivenByLocalWeather(x) & WeatherConditions(x,winds,temperature,moisture)))", "score": 0}
{"id": "eqasc_validation_1", "prediction": "all x y z.((FireBehavior(x) & (Wind(y) | Temperature(y) | Moisture(z))) -> PoweredBy(x,y,z))", "score": 0}
{"id": "eqasc_validation_1", "prediction": "all x.(FireBehavior(x) -> (DrivenByLocalWeatherConditions(x) & DrivenByWindsWindsTemperatureMoisture(x)))", "score": 0}
{"id": "eqasc_validation_1", "prediction": "all x y z.((FireBehavior(x) & LocalWeatherCondition(y) & WindsWeather(z) & TemperatureAndMoisture(z)) -> DrivenBy(x,y,z))", "score": 0}
{"id": "eqasc_validation_1", "prediction": "all x.(FireBehavior(x) -> DrivenByLocalWeatherConditions(x))", "score": 0}
{"id": "eqasc_validation_1", "prediction": "all x y.((FireBehavior(x) & LocalWeather(y)) -> (DrivenBy(x,y) & WindCondition(y) & TemperatureCondition(y) & MoistureCondition(y)))", "score": 0}
{"id": "eqasc_validation_1", "prediction": "all x.(FireBody(x) -> (DrivenBy(x,winds) & DrivenBy(x,temperature) & DrivenBy(x,moisture)))", "score": 0}
{"id": "eqasc_validation_1", "prediction": "all x.(FireBehavior(x) -> (DrivenByLocalWeatherConditions&Winds(x) & Temperature(x) & Moisture(x)))", "score": 0}
{"id": "eqasc_validation_2", "prediction": "all x.(Climate(x) -> (LocalWeatherConditions(x) & LocalWeatherConditions(x)))", "score": 0}
{"id": "eqasc_validation_2", "prediction": "(all x.(Climate(x) -> LocalWeatherConditions(x)))", "score": 0}
{"id": "eqasc_validation_2", "prediction": "all x.(Climate(x) -> (DescribedInTermsOfLocalWeatherConditions(x) & LocalWeatherConditions(x)))", "score": 0}
{"id": "eqasc_validation_2", "prediction": "all x.(Climate(x) -> (localWeatherConditions(x) & LocalWeatherConditions(x)))", "score": 0}
{"id": "eqasc_validation_2", "prediction": "all x y.((Climate(x) & LocalWeatherConditions(y)) -> GenerallyDescribedAs(x,y))", "score": 0}
{"id": "eqasc_validation_2", "prediction": "all x y.((Climate(x) & LocalWeatherConditions(y)) -> (DescribedInTermsOf(x,y) & LocalWeatherConditions(x,y)))", "score": 0}
{"id": "eqasc_validation_2", "prediction": "all x.(Climate(x) -> LocalWeatherConditions(x))", "score": 0}
{"id": "eqasc_validation_2", "prediction": "all x y.((Climate(x) & LocalWeatherConditions(y)) -> GenerallyDescribedInTerms(x,y))", "score": 0}
{"id": "eqasc_validation_2", "prediction": "all x y.((Climate(x) & LocalWeatherCondition(y)) -> DefinitionMajor(x,y))", "score": 0}
{"id": "eqasc_validation_2", "prediction": "all x y.((Climate(x) & LocalWeatherConditions(y)) -> (DescribedInTerms(x,y) & LocalWeatherConditions(x)))", "score": 0}
{"id": "eqasc_validation_2", "prediction": "all x.(Climate(x) -> (TermsOfLocalWeatherConditions(x) & LocalWeatherConditions(x)))", "score": 0}
{"id": "eqasc_validation_2", "prediction": "all x y.((Climate(x) & LocalWeatherConditions(y,x)) -> LocalWeatherConditions(x,y))", "score": 0}
{"id": "eqasc_validation_2", "prediction": "all x.(Climate(x) -> (TermsOfLocalWeatherConditions(x) & GeneralLocalWeatherConditions(x)))", "score": 0}
{"id": "eqasc_validation_2", "prediction": "all x y z.((Climate(x) & LocalWeatherConditions(y) & WeatherConditions(z)) -> DescribedInTerms(x,y))", "score": 0}
{"id": "eqasc_validation_3", "prediction": "Instructions Climate-Climate(Climate) varies according to Altitude(Climate))", "score": -1}
{"id": "eqasc_validation_3", "prediction": "Instructions ClimateClimate(c) varies according to altitude(c))", "score": -1}
{"id": "eqasc_validation_3", "prediction": "Instructions ClimateClimateVariesAlongAltitude(Climate(Climate)", "score": -1}
{"id": "eqasc_validation_3", "prediction": "Instructions Climate Climate varies according to altitude.", "score": -1}
{"id": "eqasc_validation_3", "prediction": "Instructions ClimateClimatevariesAlongWithAltitude(c)", "score": -1}
{"id": "eqasc_validation_3", "prediction": "All x.(Instruction(x) -> ClimateClimate(x))", "score": -1}
{"id": "eqasc_validation_3", "prediction": "Instructions Climate(Climate) VariablyAccordingToAltitude(Climate)", "score": -1}
{"id": "eqasc_validation_3", "prediction": "Instructions ClimateClimateWideChange(x,altitude)", "score": -1}
{"id": "eqasc_validation_3", "prediction": "Instructions Climate Climate VaryEncompassingAlptitude(Climate)", "score": -1}
{"id": "eqasc_validation_3", "prediction": "Instructions ClimateClimate(x) & Altitude(x) & varies.", "score": -1}
{"id": "eqasc_validation_3", "prediction": "Instructions ClimateClimate(c) varies en fonctionofAltitude(c))", "score": -1}
{"id": "eqasc_validation_3", "prediction": "Instructions Climate Climate (Altitude) Variations(Climate))", "score": -1}
{"id": "eqasc_validation_3", "prediction": "Instructions ClimateClimate(c) -> VaryUnderAltitude(c))", "score": -1}
{"id": "eqasc_validation_3", "prediction": "Instructions & Climate(c) varies according to altitude(c))", "score": -1}
{"id": "eqasc_validation_3", "prediction": "InstructionsClimateClimateDifferentDependingOnAltitude(Climate)", "score": 0}
{"id": "eqasc_validation_4", "prediction": "all x y.((Temperature(x) & Moisture(y)) -> VariableParAlltitude(x,y))", "score": 0}
{"id": "eqasc_validation_4", "prediction": "all x.((Temperature(x) | Moisture(x)) -> VarietiesByAlltitude(x))", "score": 0}
{"id": "eqasc_validation_4", "prediction": "all x.(TemperatureAndMoistureTotal(x) & Alltitude(x))", "score": 0}
{"id": "eqasc_validation_4", "prediction": "all x.(TemperatureAndMoisture(x) -> VariatesByAlltitude(x))", "score": 0}
{"id": "eqasc_validation_4", "prediction": "all x y.((Temperature(x) & Moisture(y)) -> VariatesWithAlltitude(x,y))", "score": 0}
{"id": "eqasc_validation_4", "prediction": "all x y z.((Temperature(x) & Moisture(y) & Alltitude(z)) -> VariatesBy(x,y,z))", "score": 0}
{"id": "eqasc_validation_4", "prediction": "all x.((Temperature(x) & Moisture(x)) -> VariatesByAlltitude(x))", "score": 0}
{"id": "eqasc_validation_4", "prediction": "all x.((Temperature(x) & Moisture(x)) -> VaryAtAlltitude(x))", "score": 0}
{"id": "eqasc_validation_4", "prediction": "all x.((Temperature(x) & Moisture(x)) -> VariableByAlltitude(x))", "score": 0}
{"id": "eqasc_validation_4", "prediction": "all x.((Temperature(x) | Moisture(x)) -> VariatesBetweenAlltitudeAndAlltitude(x))", "score": 0}
{"id": "eqasc_validation_4", "prediction": "all.(TemperatureandMoistureVariatesByAlltitude(x) & VariatesByAlltitude(x))", "score": -1}
{"id": "eqasc_validation_4", "prediction": "all x y.((Altitude(x) & Altitude(y)) -> (Temperature(x) & Moisture(x) & VariatesBy(x,y)))", "score": 0}
{"id": "eqasc_validation_4", "prediction": "all x y.((Temperature(x) & Moisture(y)) -> (AndModifiesAltitude(x) & VariesByAlltitude(x)))", "score": 0}
{"id": "eqasc_validation_5", "prediction": "all x.(ClimateChange(x) -> GlobalProblem(x))", "score": 0}
{"id": "eqasc_validation_5", "prediction": "all x.((ClimateChange(x) & GlobalProblem(x)) -> Global(x))", "score": 0}
{"id": "eqasc_validation_6", "prediction": "all x.(TheChangingTemperatureAndMoisture(x) -> GlobalWidely(x))", "score": 0}
{"id": "eqasc_validation_6", "prediction": "all x.((Temperature(x) & Moisture(x)) -> GloballyChanges(x))", "score": 0}
{"id": "eqasc_validation_6", "prediction": "all x.((Temperature(x) & Moisture(x)) -> GloballyChanging(x))", "score": 0}
{"id": "eqasc_validation_6", "prediction": "all x y z.((Temperature(x) & Moisture(y) & Temperature(z)) -> GloballyChanges(x,y,z))", "score": 0}
{"id": "eqasc_validation_6", "prediction": "all x y.((Temperature(x) & Moisture(y)) -> (ChangingGlobally(x,y) & Globally(x)))", "score": 0}
{"id": "eqasc_validation_6", "prediction": "all x.((TemperatureAndMoisture(x) & GloballyChanging(x)) -> (GloballyChanging(x) & GloballyChanging(x)))", "score": 0}
{"id": "eqasc_validation_6", "prediction": "all x.((Temperature(x) | Moisture(x)) -> WorldwideChange(x))", "score": 0}
{"id": "eqasc_validation_6", "prediction": "all x.((Temperature(x) | Moisture(x)) -> GloballyChange(x))", "score": 0}
{"id": "eqasc_validation_6", "prediction": "all x.(FocusedGloballyWithModernTemperatureAndMoisture(x) -> WindsUpGlobally(x))", "score": 0}
{"id": "eqasc_validation_6", "prediction": "all x y z.((Temperature(x) and Moisture(y) & Global(z)) -> (ChangesGlobally(x,y,z) & ChangingGlobally(x)))", "score": 0}
{"id": "eqasc_validation_6", "prediction": "all x.(ChangingGlobalTemperatureAndMoisture(x) -> GlobalMoistureAndTemperatureMoisture(x))", "score": 0}
{"id": "eqasc_validation_6", "prediction": "all x y.((Temperature(x) & Moisture(y)) -> isChangingGlobally(x,y))", "score": 0}
{"id": "eqasc_validation_6", "prediction": "all x.((Temperature(x) & Moisture(x)) -> ChangesGlobally(x))", "score": 0}
{"id": "eqasc_validation_6", "prediction": "all x y.((Temperature(x) & Moisture(y)) -> (GloballyChanges(x,y) & GloballyChanges(x,z)))", "score": 0}
{"id": "eqasc_validation_6", "prediction": "all x y z.((Temperature(x) & Moisture(y) & Temperature(z)) -> GloballyChanging(x,y,z))", "score": 0}
{"id": "eqasc_validation_7", "prediction": "IntroductionToClimateIntroductionToClimateIntroductionClimateIntroductionToClimateIntroductionClimateIntroduction(Climate) isUnusuallyWeather(Climate)", "score": -1}
{"id": "eqasc_validation_7", "prediction": "all x.(IntroductionToClimate(x) -> Climate(x))", "score": 0}
{"id": "eqasc_validation_7", "prediction": "all x.(IntroductionToClimate(x) -> AverageWeatherCondition(x))", "score": 0}
{"id": "eqasc_validation_7", "prediction": "IntroductionToClimateIntroduction(climate)", "score": 0}
{"id": "eqasc_validation_7", "prediction": "IntroductionToClimate(climate): (AverageWeather(climate) & AverageWindsConditions(climate)))", "score": -1}
{"id": "eqasc_validation_7", "prediction": "IntroductionToClimateIntroduction(climate) Basically:AverageWeatherCondition(climate)", "score": -1}
{"id": "eqasc_validation_7", "prediction": "IntroductionToClimateIntroduction(Climate)", "score": 0}
{"id": "eqasc_validation_7", "prediction": "IntroductionToClimateIntroductionToClimateIntroductionToClimate(climate)", "score": 0}
{"id": "eqasc_validation_7", "prediction": "IntroductionToClimateIntroduction(climate) -> AimableWeatherConditions(it))", "score": -1}
{"id": "eqasc_validation_7", "prediction": "IntroductionToClimateIntroductionClimateIntroduction(climate)", "score": 0}
{"id": "eqasc_validation_7", "prediction": "IntroductionToClimate IntroductionToClimateClimate(c) -> AverageWeatherConditions(c))", "score": -1}
{"id": "eqasc_validation_7", "prediction": "(IntroductionToClimateIntroduction(climate))", "score": 0}
{"id": "eqasc_validation_7", "prediction": "IntroductionToClimateIntroductionToClimate(c) -> AverageWeatherCondition(c))", "score": -1}
{"id": "eqasc_validation_7", "prediction": "(Introduction(climate) & Air(climate))", "score": 0}
{"id": "eqasc_validation_7", "prediction": "all x.(IntroductionToClimateIntroductionFromWeather(x) -> AverageWeatherConditions(x))", "score": 0}
{"id": "eqasc_validation_8", "prediction": "all x.(AverageWeatherConditions(x) -> (DescribedInTermsOfTemperatureAndMoisture(x) & DescribedInTermsOfMoisture(x)))", "score": 0}
{"id": "eqasc_validation_8", "prediction": "all x.((WeatherCondition(x) & Temperature(x) & Moisture(x)) -> DescribedInTerms(x))", "score": 0}
{"id": "eqasc_validation_8", "prediction": "all x.((WeatherConditions(x) & Heat(x) & Moisture(x)) -> AverageWeatherConditions(x))", "score": 0}
{"id": "eqasc_validation_8", "prediction": "all x.(AverageWeatherCondition(x) -> (DescribedInTermsOfTemperature(x) & DescribedInTermsOfMoisture(x)))", "score": 0}
{"id": "eqasc_validation_8", "prediction": "all x y.((AverageWeatherConditions(x) & Temperature(y) & Moisture(y)) -> DescribedInThumbsOrMoisture(x,y))", "score": 0}
{"id": "eqasc_validation_8", "prediction": "all x.(AverageWeatherCondition(x) -> (TermsOfTemperature(x) & Demoth(x) & TermsOfMoisture(x)))", "score": 0}
{"id": "eqasc_validation_8", "prediction": "all x y z.((AverageWeatherCondition(x) & Temperature(y) & Moisture(z)) -> (DescribedInTerms(x,y,z) & Terms(y,z)))", "score": 0}
{"id": "eqasc_validation_8", "prediction": "all x.(AverageWeatherConditions(x) -> (TermsInTermsOfTemperature(x) & TermsInTermsOfMoisture(x)))", "score": 0}
{"id": "eqasc_validation_8", "prediction": "all x.((WeatherCondition(x) & Temperature(x) & Moisture(x)) -> Average(x))", "score": 0}
{"id": "eqasc_validation_8", "prediction": "all x.((WeatherConditions(x) & Average(x)) -> (DescribedInTermsOfTemperature(x) | DescribedInTermsOfMoisture(x)))", "score": 0}
{"id": "eqasc_validation_8", "prediction": "all x.(WeatherCondition(x) -> (DepictedInTermsOfTemperature(x) & DepictedInTermsOfMoisture(x)))", "score": 0}
{"id": "eqasc_validation_8", "prediction": "all x.((Weather(x) & DescribedInTermsOfTemperature(x) & DescribedInTermsOfMoisture(x)) -> AverageWeatherConditions(x))", "score": 0}
{"id": "eqasc_validation_8", "prediction": "all x.((WeatherConditions(x) & UsedInTerms(x,Temperature) & UsedInTerms(x,Moisture)) -> Generalized(x))", "score": 0}
{"id": "eqasc_validation_8", "prediction": "all x y.((WeatherCondition(x) & Temperature(y) & Moisture(y)) -> isDescribedInTermsOfTemperatureAndMoisture(x,y))", "score": 0}
{"id": "eqasc_validation_8", "prediction": "all x y z.((AverageWeatherCondition(x) & Temperature(y) & Moisture(z)) -> (Definition(x,y,z) & Definition(x,y,z)))", "score": 0}
{"id": "eqasc_validation_9", "prediction": "all x.(Cloud(x) -> (MadeOfMoisture(x) & MoistureEvaporating(x)))", "score": 0}
{"id": "eqasc_validation_9", "prediction": "all x y.((Cloud(x) & Water(y)) -> (MadeOfMoisture(x,y) & MoistureFromWaterEvaporation(x,y)))", "score": 0}
{"id": "eqasc_validation_9", "prediction": "all x.(Cloud(x) -> (MadeOfYoungMoisture(x) & WaterEvaporatingMoisture(x)))", "score": 0}
{"id": "eqasc_validation_9", "prediction": "all x.(Cloud(x) -> (MadeOfMoisture(x) & WaterEvaporating(x)))", "score": 0}
{"id": "eqasc_validation_9", "prediction": "All x.(Cloud(x) -> (MadeOfMoisture(x) & MoistureFromWaterEvaporating(x)))", "score": -1}
{"id": "eqasc_validation_9", "prediction": "all x y.((Cloud(x) & Moisture(y)) -> (MadeOfMoisture(x,y) & WaterEvaporating(x)))", "score": 0}
{"id": "eqasc_validation_9", "prediction": "all x y.((Cloud(x) & Moisture(y)) -> (MadeOf(x,y) & WaterEvaporating(y)))", "score": 0}
{"id": "eqasc_validation_9", "prediction": "all x.(Cloud(x) / (MadeOfMoisture(x) & WaterEvaporating(x)))", "score": -1}
{"id": "eqasc_validation_9", "prediction": "all x.(Cloud(x) -> (MadeOfMoisture(x) & MoistureFromWater(x)))", "score": 0}
{"id": "eqasc_validation_10", "prediction": "all x.(Climate(x) -> (TermsOfTemperature(x) & Water(x)))", "score": 0}
{"id": "eqasc_validation_10", "prediction": "all x y.((Climate(x) & Temperature(y) & Water(y)) -> DescribedInAir(x,y))", "score": 0}
{"id": "eqasc_validation_10", "prediction": "all x y.((Climate(x) & Temperature(y) & Water(y,x)) -> DescribedInTerms(x,y))", "score": 0}
{"id": "eqasc_validation_10", "prediction": "all x.(Climate(x) -> (RelationsToTemperature(x) & RelationToWater(x) & InAir(x)))", "score": 0}
{"id": "eqasc_validation_10", "prediction": "all x.(Climate(x) -> (TermsOfPrecipitation(x) & DescriptionsOfWater(x)))", "score": 0}
{"id": "eqasc_validation_10", "prediction": "all x.(Climate(x) -> (Terms(x,Temperature) & Water(x)))", "score": 0}
{"id": "eqasc_validation_10", "prediction": "all x y.((Climate(x) & Temperature(y) & Water(y)) -> DescriptionInAir(x,y))", "score": 0}
{"id": "eqasc_validation_10", "prediction": "all x.(Climate(x) -> (TemperatureInAir(x) & WaterInAir(x)))", "score": 0}
{"id": "eqasc_validation_10", "prediction": "all x.(Climate(x) -> (Terms(x,temperature) & Terms(x,water)))", "score": 0}
{"id": "eqasc_validation_10", "prediction": "all x.(Climate(x) -> (TermsOf(x,Temperature) & WordsOf(x,Water)))", "score": 0}
{"id": "eqasc_validation_10", "prediction": "all x.(Climate(x) -> (DescribedInTerms(x,Temperature) & DescribedInTerms(x,Water)))", "score": 0}
{"id": "eqasc_validation_10", "prediction": "all x.(Climate(x) -> (TermsPeriod(x) & Describing(x,Temperate,Water) & Air(x)))", "score": 0}
{"id": "eqasc_validation_10", "prediction": "all x.(Climate(x) -> (DescribedInTerms(x,Temperature,Water,Air)))", "score": 0}
{"id": "eqasc_validation_10", "prediction": "all x y.((Climate(x) & Temperature(y) & Water(y)) -> InAir(x,y))", "score": 0}
{"id": "eqasc_validation_10", "prediction": "all x.(Climate(x) -> (TermsOfTemperature(x) & MeasuresOfWater(x)) & DepictsClimateInAir(x))", "score": 0}
{"id": "eqasc_validation_11", "prediction": "all x.(Climate(x) -> WeatherOverLongPeriodOfTime(x))", "score": 0}
{"id": "eqasc_validation_11", "prediction": "all x.(Climate(x) -> WeatherOverLongPeriod(x))", "score": 0}
{"id": "eqasc_validation_11", "prediction": "all x.(Climate(x) -> referstoWeather(x))", "score": 0}
{"id": "eqasc_validation_11", "prediction": "all x.(Climate(x) -> WeatherPeriod(x))", "score": 0}
{"id": "eqasc_validation_11", "prediction": "all x y.((Climate(x) & Weather(y) & LongPeriodOfTime(x,y)) -> RefersToOvertime(x,y))", "score": 0}
{"id": "eqasc_validation_11", "prediction": "all x y.((Climate(x) & Weather(y)) -> LongPeriodOfTime(x,y))", "score": 0}
{"id": "eqasc_validation_11", "prediction": "all x.(Climate(x) -> WeatherRefersToOverLongPeriod(x))", "score": 0}
{"id": "eqasc_validation_11", "prediction": "all x.(Climate(x) -> LangPeriodOfTime(x))", "score": 0}
{"id": "eqasc_validation_11", "prediction": "all x.(Climate(x) -> Weather(x))", "score": 0}
{"id": "eqasc_validation_11", "prediction": "all x.(Climate(x) -> (Weather(x) & LongPeriodOfTime(x)))", "score": 0}
{"id": "eqasc_validation_11", "prediction": "all x y.((Climate(x) & Weather(y) & LongPeriodOfTime(x)) -> Contains(x,y))", "score": 0}
{"id": "eqasc_validation_12", "prediction": "all x.(Weather(x) -> (Term(x) & Term(x) & (Temperature(x) | Moisture(x)))))", "score": -1}
{"id": "eqasc_validation_12", "prediction": "all x.(Weather(x) -> (TerminatedInTermin(x,Temperature) & DescribedInTerminus(x,Moisture)))", "score": 0}
{"id": "eqasc_validation_12", "prediction": "all x.(Weather(x) -> (TerminatedInTermsOfTemperature(x) & DescribedInTerminsOfMoisture(x)))", "score": 0}
{"id": "eqasc_validation_12", "prediction": "all x.(Weather(x) -> (Termine(x) & Temperature(x) & Moisture(x)))", "score": 0}
{"id": "eqasc_validation_12", "prediction": "all x.(Weather(x) -> (TermsWeather(x) & Temperature(x) & Moisture(x)))", "score": 0}
{"id": "eqasc_validation_12", "prediction": "all x y.((Weather(x) & Temperature(y) & Moisture(y)) -> WeatherDiagnosis(x,y))", "score": 0}
{"id": "eqasc_validation_12", "prediction": "all x y.((Weather(x) & Temperature(y) & Moisture(y)) -> DefinedInTerms(x,y))", "score": 0}
{"id": "eqasc_validation_12", "prediction": "all x.(Weather(x) -> (Terms(x) & Temperature(x) & Moisture(x)))", "score": 0}
{"id": "eqasc_validation_12", "prediction": "all x.(Weather(x) -> (Terminated(x,Temperature) & Described(x,Moisture)))", "score": 0}
{"id": "eqasc_validation_12", "prediction": "all x.(Weather(x) -> (Temperature(x) & Moisture(x) & GenerallyDescribedInTerms(x)))", "score": 0}
{"id": "eqasc_validation_12", "prediction": "all x.(Weather(x) -> (TermedInTemperature(x) & TermedInMoisture(x)))", "score": 0}
{"id": "eqasc_validation_12", "prediction": "all x.(Weather(x) -> (TermensOfTemperature(x) & TermsOfMoisture(x)))", "score": 0}
{"id": "eqasc_validation_12", "prediction": "all x.(Weather(x) -> (Terms(x,Temperature) & Terms(x,Moisture)))", "score": 0}
{"id": "eqasc_validation_12", "prediction": "all x y z.((Weather(x) & Temperature(y) & Moisture(z)) -> (TermsOf(x,y) & DescribedInTermsOf(x,z)))", "score": 0}
{"id": "eqasc_validation_12", "prediction": "all x.(Weather(x) -> (TerminalTermino(x) & TermsOfTemperature(x) & TermsOfMoisture(x)))", "score": 0}
{"id": "eqasc_validation_12", "prediction": "all x.(Weather(x) -> (TermsOfTemperature(x) & TermsOfMoisture(x)))", "score": 0}
{"id": "eqasc_validation_13", "prediction": "all x.(Humidity(x) -> Moisture(x))", "score": 0}
{"id": "eqasc_validation_13", "prediction": "all x.(Humidity(x) -> MoistureInAir(x))", "score": 0}
{"id": "eqasc_validation_13", "prediction": "All x.(Humidity(x) -> MoistureInAir(x))", "score": -1}
{"id": "eqasc_validation_13", "prediction": "all x y.((Humidity(x) & Air(y)) -> Moisture(x,y))", "score": 0}
{"id": "eqasc_validation_13", "prediction": "(Moisture(Humidity) & InAir(Humidity))", "score": 0}
{"id": "eqasc_validation_14", "prediction": "all x.(Climate(x) -> (DescribedInTermsOfTemperature(x) & DefinedInTermsOfHumidity(x)))", "score": 0}
{"id": "eqasc_validation_14", "prediction": "all x.(Climate(x) -> (Value(x,Temperature) & Term(x,Humidity)))", "score": 0}
{"id": "eqasc_validation_14", "prediction": "all x.(Climate(x) -> (ModelledInTemperature(x) & ModeledByHumidity(x)))", "score": 0}
{"id": "eqasc_validation_14", "prediction": "all x.(Climate(x) -> (TermsInTerms(x,Temperature) & TermsInTerms(x,Hmmosphere)))", "score": 0}
{"id": "eqasc_validation_14", "prediction": "all x.(Climate(x) -> (Terms(x,Temperature) & Terms(x,Humidity)))", "score": 0}
{"id": "eqasc_validation_14", "prediction": "all x.(Climate(x) -> (TerminatedByTemperature(x) & DescribedByHumidity(x)))", "score": 0}
{"id": "eqasc_validation_14", "prediction": "all x.(Climate(x) -> exists y.(Temperature(y) & Humidity(z) & Temperature(x,y) & Humidity(z) & DescribedIn(x,z)))", "score": 0}
{"id": "eqasc_validation_14", "prediction": "all x.(Climate(x) -> (Term(x) & Temperature(x) & Humidity(x)))", "score": 0}
{"id": "eqasc_validation_14", "prediction": "all x.(Climate(x) -> (Termine(x) & Temperature(x) & Humidity(x)))", "score": 0}
{"id": "eqasc_validation_14", "prediction": "all x.(Climate(x) -> (ThermalTemperature(x) & Humidity(x)))", "score": 0}
{"id": "eqasc_validation_14", "prediction": "all x.(Climate(x) -> (DescribedInTermsOfTemperature(x) & DescribedInTermsOfHumidity(x)))", "score": 0}
{"id": "eqasc_validation_14", "prediction": "all x.(Climate(x) -> (DepictsTemperature(x) & DepictsHumidity(x)))", "score": 0}
{"id": "eqasc_validation_14", "prediction": "all x.(Climate(x) -> (TermsOfTemperature(x) & TermsOfHumidity(x)))", "score": 0}
{"id": "eqasc_validation_14", "prediction": "all x.(Climate(x) -> (Terms(x,Temperature) & Keywords(x,Humidity)))", "score": 0}
{"id": "eqasc_validation_14", "prediction": "all x.(Climate(x) -> (Terms(x) & Temperature(x) & Humidity(x)))", "score": 0}
{"id": "eqasc_validation_15", "prediction": "all x.(Humidity(x) -> Measure(x))", "score": 0}
{"id": "eqasc_validation_15", "prediction": "all x.(Humidity(x) -> MeasuresMoistureContentOfAir(x))", "score": 0}
{"id": "eqasc_validation_15", "prediction": "all x.(Humidity(x) -> Measures(x,MoistureContent,Air))", "score": 0}
{"id": "eqasc_validation_15", "prediction": "all x.(Humidity(x) -> MoistureContentOfAir(x))", "score": 0}
{"id": "eqasc_validation_15", "prediction": "all x.(Humidity(x) -> MgRateOfMoisture(x))", "score": 0}
{"id": "eqasc_validation_15", "prediction": "all x.(Humidity(x) -> exists y.Hair(y) & MoistureContent(x,y))", "score": 0}
{"id": "eqasc_validation_15", "prediction": "all x.(Humidity(x) -> (MeasuresMoistureContentOfAir(x) & ContainsMoisture(x)))", "score": 0}
{"id": "eqasc_validation_15", "prediction": "all x.(Humidity(x) -> MeasuresMoistureContent(x))", "score": 0}
{"id": "eqasc_validation_15", "prediction": "all x.(Humidity(x) -> MeasureofMoistureContentOfAir(x))", "score": 0}
{"id": "eqasc_validation_15", "prediction": "all x y.((Humority(x) & Air(y)) -> MeasuresMoistureContent(x,y))", "score": 0}
{"id": "eqasc_validation_16", "prediction": "all x.(Vehicle(x) -> UsedForTransportation(x))", "score": 10}
{"id": "eqasc_validation_16", "prediction": "all x y.((Vehicle(x) & Transporting(y)) -> UsedFor(x,y))", "score": 0}
{"id": "eqasc_validation_16", "prediction": "all x y.((Vehicle(x) & Transportation(y)) -> UsedFor(x,y))", "score": 0}
{"id": "eqasc_validation_16", "prediction": "all x y.((Vehicle(x) & UsedForTransportation(x)) -> UsedForTransportation(x,y))", "score": 0}
{"id": "eqasc_validation_16", "prediction": "all x.((Vehicle(x) & UsedForTransportation(x)) -> UsedForTransportation(x))", "score": 0}
{"id": "eqasc_validation_16", "prediction": "all x y.((Vehicle(x) & Transportation(y)) -> UsedFor(x,z))", "score": 0}
{"id": "eqasc_validation_16", "prediction": "all x y z.((Vehicle(x) & Transportation(y) & Transport(z)) -> UsedFor(x,y))", "score": 0}
{"id": "eqasc_validation_16", "prediction": "all x y z.((Vehicle(x) & Transportation(y) & Transportation(z)) -> UsedForTransportation(x,y,z))", "score": 0}
{"id": "eqasc_validation_16", "prediction": "all x y z.((Vehicle(x) & Vehicle(y) & Transportation(z)) -> UsedForVehicle(x,y,z))", "score": 0}
{"id": "eqasc_validation_16", "prediction": "all x y z.((Vehicle(x) & Transportation(y) & Transportation(z)) -> UsedFor(x,y,z))", "score": 0}
{"id": "eqasc_validation_16", "prediction": "all x y.((Vehicle(x) & UsedForTransportation(x)) -> UsedForTransportation(y))", "score": 0}
{"id": "eqasc_validation_17", "prediction": "all x y.((Transportation(x) & Place(y)) -> MovesPeopleAndGoods(x,y))", "score": 0}
{"id": "eqasc_validation_17", "prediction": "all x.(Transportation(x) -> Transfers(x,y))", "score": 0}
{"id": "eqasc_validation_17", "prediction": "all x.(Transportation(x) -> Moves(x,people,goods))", "score": 0}
{"id": "eqasc_validation_17", "prediction": "all x y z.((Traffication(x) & Person(y) & Good(z) & Place(w)) -> MovesTo(x,y,z,w))", "score": 0}
{"id": "eqasc_validation_17", "prediction": "all x y.((Transportation(x) & People(y) & Goods(y)) -> MovesFromPlaceToPlace(x,y))", "score": 0}
{"id": "eqasc_validation_17", "prediction": "all x y z.((Transportation(x) & Person(y) & Good(z)) -> MovesTo(x,y,z))", "score": 0}
{"id": "eqasc_validation_17", "prediction": "all x y.((Transportation(x) & Person(y) & Good(y)) -> MovesFromPlaceToPlace(x,y))", "score": 0}
{"id": "eqasc_validation_17", "prediction": "all x y z.((Transportation(x) & Person(y) & Good(z)) -> MovesFromOnePlaceToAnother(x,y,z))", "score": 0}
{"id": "eqasc_validation_17", "prediction": "all x y z.((Transportation(x) & Place(y) & Person(z) & Good(z)) -> MovesFromTo(x,y,z))", "score": 0}
{"id": "eqasc_validation_17", "prediction": "all x y.((Transportation(x) & Person(y)) -> MovesBetweenPlaces(x,y))", "score": 0}
{"id": "eqasc_validation_17", "prediction": "all x y z.((Transportation(x) & Person(y) & Good(z) & Place(y)) -> MovesFromTo(x,y,z))", "score": 0}
{"id": "eqasc_validation_17", "prediction": "all x y z.((Transportation(x) & People(y) & Goods(z)) -> MovesFromLocationToLocation(x,y,z))", "score": 0}
{"id": "eqasc_validation_17", "prediction": "all x.(ToAtMovement(x) -> (Transportation(x) & MovesPeopleAndGoods(x)))", "score": 0}
{"id": "eqasc_validation_17", "prediction": "all x y.((Transportation(x) & Place(y)) -> Moves(x,y))", "score": 0}
{"id": "eqasc_validation_18", "prediction": "all x.(Vehicle(x) -> (Movement(x) & MovesPeople(x) & MovesGoods(x)))", "score": 0}
{"id": "eqasc_validation_18", "prediction": "all x.(Vehicle(x) -> (UsedForMovingPeople(x) & UsedForMovingGoods(x)))", "score": 0}
{"id": "eqasc_validation_18", "prediction": "all x.(Vehicle(x) -> (MovesPeople(x) & MovesGoods(x)))", "score": 0}
{"id": "eqasc_validation_18", "prediction": "all x.(Vehicle(x) -> (MovesBetweenPeopleAndGoods(x)))", "score": 0}
{"id": "eqasc_validation_18", "prediction": "all x.(Vehicle(x) -> MovesPeopleAndGoods(x))", "score": 0}
{"id": "eqasc_validation_18", "prediction": "all x y.((Vehicle(x) & Person(y)) -> UsedToMove(x,y))", "score": 0}
{"id": "eqasc_validation_18", "prediction": "all x.(Vehicle(x) -> (Movement(k,k) & PeopleMovement(k) & GoodsMovement(k,m)))", "score": 0}
{"id": "eqasc_validation_18", "prediction": "all x.(Vehicle(x) -> (Verified(x) & MovesPeopleAndGoods(x)))", "score": 0}
{"id": "eqasc_validation_18", "prediction": "all x y z.((Vehicle(x) & Person(y) & Good(z)) -> Moves(x,y,z))", "score": 0}
{"id": "eqasc_validation_18", "prediction": "all x y.((Vehicle(x) & Person(y)) -> Moves(x,y))", "score": 0}
{"id": "eqasc_validation_18", "prediction": "all x.(Vehicle(x) -> (MovesPeople(x) & MowsGoods(x)))", "score": 0}
{"id": "eqasc_validation_18", "prediction": "all x y.((Vehicle(x) & Person(y) & Good(y)) -> Moves(x,y))", "score": 0}
{"id": "eqasc_validation_19", "prediction": "all x y.((PassengerVehicle(x) & Car(y)) -> PrimaryModeOfTransportation(x,y))", "score": 0}
{"id": "eqasc_validation_19", "prediction": "all x.(PassengerVehicle(x) -> PrimaryTransportation(x))", "score": 0}
{"id": "eqasc_validation_19", "prediction": "all x.(PassengerVehicle(x) -> PrimaryModeOfTransportation(x))", "score": 0}
{"id": "eqasc_validation_20", "prediction": "all x y.((PassengerCar(x) & Transporter(y)) -> UsedForTransportation(x,y))", "score": 0}
{"id": "eqasc_validation_20", "prediction": "all x y.((PassengerCar(x) & Transportation(y)) -> UsedFor(x,y)) (PassengerCar(x) & Transportation(y)))", "score": -1}
{"id": "eqasc_validation_20", "prediction": "all x.(PassengerCar(x) -> UsedForTransportation(x))", "score": 0}
{"id": "eqasc_validation_20", "prediction": "all x y.((PassengerCar(x) & Car(y)) -> UsedForTransportation(x,y))", "score": 0}
{"id": "eqasc_validation_20", "prediction": "all x y.((PassengerCar(x) & Transporting(y)) -> UsedFor(x,y))", "score": 0}
{"id": "eqasc_validation_20", "prediction": "all x y.((PassengerCar(x) & Car(y)) -> (UsedForTransportation(y,x) | UsedForTransportation(y)))", "score": 0}
{"id": "eqasc_validation_20", "prediction": "all x y.((PassengerCar(x) & Transportation(y)) -> UsesFor(x,y))", "score": 0}
{"id": "eqasc_validation_20", "prediction": "all x y z.((PassengerCar(x) & Driver(y) & Vehicle(z)) -> UsedForTransportation(x,z))", "score": 0}
{"id": "eqasc_validation_21", "prediction": "all x.((Trailer(x) | Boat(x)) -> PrivateVehicle(x))", "score": 0}
{"id": "eqasc_validation_21", "prediction": "all x.(CapableOfPrivateVehicle(x) -> (Trailer(x) | Boat(x)))", "score": 0}
{"id": "eqasc_validation_21", "prediction": "all x.((Tower(x) | Boat(x)) -> PrivateVehicle(x))", "score": 0}
{"id": "eqasc_validation_21", "prediction": "all x y.((Trailer(x) & Boat(y)) -> PrivateVehicle(x))", "score": 0}
{"id": "eqasc_validation_21", "prediction": "all x.((Landlord(x) | Boat(x)) -> PrivateVehicle(x))", "score": 0}
{"id": "eqasc_validation_21", "prediction": "all x.((HasTrailer(x) | HasBoat(x)) -> PrivateVehicle(x))", "score": 0}
{"id": "eqasc_validation_21", "prediction": "all x.(( Trailer(x) | Boat(x)) -> PrivateVehicle(x))", "score": 0}
{"id": "eqasc_validation_22", "prediction": "all x y.((Trailer(x) & Boat(y)) -> UsedForTransportation(x,y))", "score": 0}
{"id": "eqasc_validation_22", "prediction": "all x.((Trailer(x) | Boat(x)) -> UsedForTransportation(x))", "score": 0}
{"id": "eqasc_validation_22", "prediction": "all x.((Tow trailer(x) | Boat(x)) -> UsedForTransportation(x))", "score": -1}
{"id": "eqasc_validation_22", "prediction": "all x.((Towable(x) | Boat(x)) -> UsedForTransportation(x))", "score": 0}
{"id": "eqasc_validation_22", "prediction": "all x.((Tilt(x) | Boat(x)) -> UsedForTransportation(x))", "score": 0}
{"id": "eqasc_validation_22", "prediction": "all x y.((Trailer(x) & Boat(y)) -> UsedForTransportation(x))", "score": 0}
{"id": "eqasc_validation_22", "prediction": "all x.((Tower(x) | Boat(x)) -> UsedForTransportation(x))", "score": 0}
{"id": "eqasc_validation_22", "prediction": "all x.((Towable(x) & Boat(x)) -> UsedForTransportation(x))", "score": 0}
{"id": "eqasc_validation_22", "prediction": "all x y.((Truck(x) & Boat(y)) -> UsedForTransportation(x))", "score": 0}
{"id": "eqasc_validation_22", "prediction": "all x.(Trailer(x) & Boat(x)) -> UsedForTransportation(x))", "score": -1}
{"id": "eqasc_validation_22", "prediction": "all x y.((Truck(x) & Boat(y)) -> (UsedForTransportation(x) | UsedForTransportation(y)))", "score": 0}
{"id": "eqasc_validation_22", "prediction": "all x.(Toilet(x) | Boat(x))", "score": 0}
{"id": "eqasc_validation_22", "prediction": "all x.(Trake(x) -> (HasTrailer(x) | HasBoat(x)))", "score": 0}
{"id": "eqasc_validation_22", "prediction": "all x.((Traveler(x) | Boat(x)) -> UsedForTransportation(x))", "score": 0}
{"id": "eqasc_validation_23", "prediction": "all x.(Vehicle(x) & Vehicle(x)) -> (Car(x) | Bus(x)))", "score": -1}
{"id": "eqasc_validation_23", "prediction": "all x.(Vehicle(x) & Vehicle(x))", "score": 0}
{"id": "eqasc_validation_23", "prediction": "all x.(Vehicle(x) & Vehicle(x) & Vehicle(x))", "score": 0}
{"id": "eqasc_validation_23", "prediction": "all x.(Vehicle(x) -> (Car(x) | Bus(x)))", "score": 0}
{"id": "eqasc_validation_23", "prediction": "((Car(x) | Bus(x)))", "score": 0}
{"id": "eqasc_validation_23", "prediction": "exists x.(Car(x) & Bus(x) & Vehicle(x))", "score": 0}
{"id": "eqasc_validation_23", "prediction": "all x.((Car(x) | Bus(x)) -> Vehicle(x))", "score": 2}
{"id": "eqasc_validation_23", "prediction": "all x.((Car(x) | Buss(x)) -> Vehicle(x))", "score": 0}
{"id": "eqasc_validation_23", "prediction": "all x.(Vehicle(x) -> (HasCar(x) | HasBuss(x)))", "score": 0}
{"id": "eqasc_validation_23", "prediction": "(Example(Cars) & Examples(Busses))", "score": 0}
{"id": "eqasc_validation_24", "prediction": "all x y z.((Car(x) | Bus(y)) & Transporting(z)) -> UsedFor(x,y,z))", "score": -1}
{"id": "eqasc_validation_24", "prediction": "all x.((Car(x) | BusSedan(x)) -> UsedForTransportation(x))", "score": 0}
{"id": "eqasc_validation_24", "prediction": "all x y z.((Car(x) & Bus(y) & Transportation(z)) -> (UsedForTransportation(x,y) & UsedForTransportation(y,z)))", "score": 0}
{"id": "eqasc_validation_24", "prediction": "all x y z.((Car(x) & Bus(y) & Transportation(z)) -> (UsedForTransportation(x,y) & UsedForTransportation(y)))", "score": 0}
{"id": "eqasc_validation_24", "prediction": "all x y z.((Car(x) & Bus(y) & Car(z)) -> (UsedForTransportation(x,y,z) & UsedForTransportation(x,z)))", "score": 0}
{"id": "eqasc_validation_24", "prediction": "all x y.((Car(x) & Bus(y)) -> UsedForTransportation(x,y))", "score": 0}
{"id": "eqasc_validation_24", "prediction": "all x y z.((Car(x) & Bus(y) & (Car(z) | Bus(z))) -> UsedForTransportation(x))", "score": 1}
{"id": "eqasc_validation_24", "prediction": "(UsedForTransportation(cars) & InTransportation(busses))", "score": 0}
{"id": "eqasc_validation_24", "prediction": "all x y z.((Car(x) & Bus(y) & Transportation(z)) -> (UsedForTransportation(x,z) | UsedForTransportation(y,z)))", "score": 0}
{"id": "eqasc_validation_24", "prediction": "all x.((Car(x) | Bus(x)) -> UsedForTransportation(x))", "score": 1}
{"id": "eqasc_validation_24", "prediction": "all x y z.((Car(x) | Bus(y) & Bus(z)) -> (UsedForTransportation(x) | UsedForTransportation(y,z)))", "score": 0}
{"id": "eqasc_validation_24", "prediction": "all x y z.((Car(x) | Bus(y)) -> (UsedForTransportation(x) & Car(x) & Bus(y)))", "score": 0}
{"id": "eqasc_validation_25", "prediction": "all x y.((Boat(x) & Transportation(y)) -> UsedFor(x,y))", "score": 0}
{"id": "eqasc_validation_25", "prediction": "all x.(Boat(x) -> UsedForTransportation(x))", "score": 0}
{"id": "eqasc_validation_25", "prediction": "all x.(Bull(x) -> UsedForTransportation(x))", "score": 0}
{"id": "eqasc_validation_25", "prediction": "all x y.((Boat(x) & Transport(y)) -> UsedFor(x,y))", "score": 0}
{"id": "eqasc_validation_26", "prediction": "all x.((City(x) & Bigger(x)) -> RequiresEfficientAndAdequatePublicTransport(x))", "score": 0}
{"id": "eqasc_validation_26", "prediction": "all x.((City(x) & Bigger(x)) -> RequiresEfficientPublicTransport(x))", "score": 0}
{"id": "eqasc_validation_26", "prediction": "all x.((City(x) & Bigger(x)) -> (EfficientPublicTransport(x) & AdequatePublicTransport(x)))", "score": 0}
{"id": "eqasc_validation_26", "prediction": "all x.(BiggerCity(x) -> RequiresEfficientAdequatePublicTransport(x))", "score": 0}
{"id": "eqasc_validation_26", "prediction": "-all x.((City(x) & Bigger(x)) -> RequiresEfficientOrAdequatePublicTransport(x))", "score": 0}
{"id": "eqasc_validation_26", "prediction": "all x.(MoreLargerCity(x) -> RequiresEfficientPublicTransport(x))", "score": 0}
{"id": "eqasc_validation_26", "prediction": "all x.((City(x) & Bigger(x)) -> (Efficient(x) & AdequatePublicTransport(x)))", "score": 0}
{"id": "eqasc_validation_26", "prediction": "all x.(RainierCity(x) -> RequiresEfficientAndAccuratePublicTransportation(x))", "score": 0}
{"id": "eqasc_validation_26", "prediction": "all x.((BiggerCity(x) & EfficientPublicTransport(x) & AdequatePublicTransport(x)) -> Requires(x,y))", "score": 0}
{"id": "eqasc_validation_26", "prediction": "all x.(LargerCity(x) -> (RequiresEfficientPublicTransport(x) & AdequatePublicTransport(x)))", "score": 0}
{"id": "eqasc_validation_26", "prediction": "all x.((City(x) & Larger(x)) -> RequiresEfficientPublicTransport(x))", "score": 0}
{"id": "eqasc_validation_26", "prediction": "all x.(BiggerCity(x) -> (RequiresEfficientPublicTransportations(x) & AdequatePublicTransportations(x)))", "score": 0}
{"id": "eqasc_validation_26", "prediction": "all x.(LargerCity(x) -> RequiresEfficientPublicTransportation(x))", "score": 0}
{"id": "eqasc_validation_26", "prediction": "all x.((City(x) & Bigger(x)) -> RequiresEffectivePublicTransport(x))", "score": 0}
{"id": "eqasc_validation_26", "prediction": "all x y.((LargerCity(x) & PublicTransportation(y)) -> RequiresEfficientAndAdequate(x,y))", "score": 0}
{"id": "eqasc_validation_27", "prediction": "all x.(LargerCity(x) -> RequiresVehicles(x))", "score": 0}
{"id": "eqasc_validation_27", "prediction": "all x.(MoreLargerCity(x) -> RequiresVehicles(x))", "score": 0}
{"id": "eqasc_validation_27", "prediction": "all x y.((LargerCity(x) & BiggerCouncil(y)) -> RequiresVehicles(x,y))", "score": 0}
{"id": "eqasc_validation_27", "prediction": "all x y.((LargerCity(x) & BiggerCity(y)) -> RequiresVehicles(x,y))", "score": 0}
{"id": "eqasc_validation_27", "prediction": "all x.((City(x) & Larger(x)) -> RequiresVehicles(x))", "score": 0}
{"id": "eqasc_validation_27", "prediction": "in-city-specifics-requiresVehicles(x) -OtherCitiesMoreLargerCities(x))", "score": -1}
{"id": "eqasc_validation_27", "prediction": "all x.(MoreSmallerCitiesRequiresVehicles(x) -> BiggerCitiesRequireVirtuals(x))", "score": 0}
{"id": "eqasc_validation_27", "prediction": "all x.((MoreSmallCity(x) & MoreBigcity(x)) -> RequiresVehicles(x))", "score": 0}
{"id": "eqasc_validation_27", "prediction": "all x.(LargerCity(x) -> RequiresVehicle(x))", "score": 0}
{"id": "eqasc_validation_27", "prediction": "all x.((City(x) & Bigger(x)) -> RequiresVehicles(x))", "score": 0}
{"id": "eqasc_validation_27", "prediction": "(MoreToOperation(x) -> MoreBiggerCity(x)) & RequiresVehicles(x))", "score": -1}
{"id": "eqasc_validation_27", "prediction": "all x.((City(x) & BiggerCity(x)) -> RequiresVehicles(x))", "score": 0}
{"id": "eqasc_validation_27", "prediction": "all x.((BakerCity(x) & MoreCity(x)) -> RequiresVehicles(x))", "score": 0}
{"id": "eqasc_validation_27", "prediction": "all x y z!((City(x) & BiggerCity(y) & Car(z) & Requires(x,y)) -> Requires(x,z))", "score": 0}
{"id": "eqasc_validation_28", "prediction": "all x.(TrafficVehicle(x) -> AirPlane(x))", "score": 0}
{"id": "eqasc_validation_28", "prediction": "All x.(TrafficVehicle(x) -> AirPlane(x))", "score": -1}
{"id": "eqasc_validation_28", "prediction": "all x y.((TrafficVehicle(x) & AirPlane(y)) -> AirPlane(x,y))", "score": 0}
{"id": "eqasc_validation_29", "prediction": "all x.(Plane(x) -> UsedForTransportation(x))", "score": 0}
{"id": "eqasc_validation_29", "prediction": "all x.((Plane(x) & UsedForTransportation(x)) -> UsedForTransportation(x))", "score": 0}
{"id": "eqasc_validation_29", "prediction": "all x.(Airplane(x) -> UsedForTransportation(x))", "score": 0}
{"id": "eqasc_validation_29", "prediction": "all x.((Plane(x) & UsedForTransportation(x)) -> Transport(x))", "score": 0}
{"id": "eqasc_validation_29", "prediction": "all x y.((Plane(x) & Transportation(y)) -> UsedFor(x,y))", "score": 0}
{"id": "eqasc_validation_29", "prediction": "all x.(Peak(x) -> UsedForTransportation(x))", "score": 0}
{"id": "eqasc_validation_29", "prediction": "all x y.((Plane(x) & Cargo(y)) -> UsedForTransportation(x,y))", "score": 0}
{"id": "eqasc_validation_29", "prediction": "all x y.((Plane(x) & Transportation(y) & UsedFor(x,y)) -> Plane(x))", "score": 0}
{"id": "eqasc_validation_29", "prediction": "exists x.(Plane(x) & UsedForTransportation(x))", "score": 0}
{"id": "eqasc_validation_29", "prediction": "all x.(Plane(x) -> TransportationAsUsedFor(x,TransportationAvailability))", "score": 0}
{"id": "eqasc_validation_30", "prediction": "all x y.((Car(x) & Truck(y)) -> (Vehicle(x) & Vehicle(y)))", "score": 0}
{"id": "eqasc_validation_30", "prediction": "all x y.((Car(x) & Truck(y)) -> (Valid(x) & Vehicle(y)))", "score": 0}
{"id": "eqasc_validation_30", "prediction": "all x y z.((Car(x) & Truck(y) & Car(z)) -> (Vehicle(x) & Vehicle(y)))", "score": 0}
{"id": "eqasc_validation_30", "prediction": "(all x y.((Car(x) & Truck(y)) -> Vehicle(x)) & ((Car(x) & Vehicle(y)) -> Vehicle(y)))", "score": 0}
{"id": "eqasc_validation_30", "prediction": "(all x.(Car(x) -> Vehicle(x)) & all y.(Truck(y) -> Vehicle(y)))", "score": 7}
{"id": "eqasc_validation_30", "prediction": "(all x y.(Car(x) -> Vehicle(x)) & (Truck(y) -> Vehicle(y)))", "score": 7}
{"id": "eqasc_validation_30", "prediction": "(all x.(Camera(x) -> Vehicle(x)) & all y.(Truck(y) -> Vehicle(y))))", "score": -1}
{"id": "eqasc_validation_30", "prediction": "all x.((Car(x) | Truck(x)) -> (Vehicle(x) | Vehicle(x)))", "score": 7}
{"id": "eqasc_validation_30", "prediction": "all x.((Car(x) | Truck(x)) -> Vehicle(x))", "score": 7}
{"id": "eqasc_validation_30", "prediction": "all x.(Car(x) -> Vehicle(x)) & exists y.(Truck(y) & Vehicle(en))))", "score": -1}
{"id": "eqasc_validation_30", "prediction": "all x.(Car(x) -> Vehicle(x)) & (Truck(x) -> Vehicle(x)))", "score": -1}
{"id": "eqasc_validation_31", "prediction": "all x.(Truck(x) -> UsedForTransportation(x))", "score": 4}
{"id": "eqasc_validation_31", "prediction": "all x y z.((Truck(x) & Transportation(y) & Transportation(z)) -> UsedForTruck(x,y,z))", "score": 0}
{"id": "eqasc_validation_31", "prediction": "all x.(TallTruck(x) -> UsedForTransportation(x))", "score": 0}
{"id": "eqasc_validation_31", "prediction": "all x.(Truck(x) -> UsedForTravel(x))", "score": 0}
{"id": "eqasc_validation_31", "prediction": "all x.(Than(x) -> UsedForTransportation(x))", "score": 0}
{"id": "eqasc_validation_31", "prediction": "all x y z.((Truck(x) & Truck(y) & Truck(z)) -> UsesForTransportation(x,y,z))", "score": 0}
{"id": "eqasc_validation_31", "prediction": "all x.(Trends(x) -> UsedForTransportation(x))", "score": 0}
{"id": "eqasc_validation_31", "prediction": "all x y.((Truck(x) & Truck(y)) -> UsedForTransportation(x,y))", "score": 0}
{"id": "eqasc_validation_32", "prediction": "all x.(Car(x) -> UsedForTransportation(x))", "score": 4}
{"id": "eqasc_validation_32", "prediction": "exists x.(Car(x) & UsedForTransportation(x))", "score": 0}
{"id": "eqasc_validation_32", "prediction": "all x y.((Car(x) & Vehicle(y)) -> UsedForTransportation(x,y))", "score": 0}
{"id": "eqasc_validation_33", "prediction": "all x.(Motorcycle(x) -> (SingleOccupantVehicle(x) & ForMostPartLargeGroup(x)))", "score": 0}
{"id": "eqasc_validation_33", "prediction": "all x.(Motorcycle(x) -> SingleOccupantVehicle(x))", "score": 0}
{"id": "eqasc_validation_33", "prediction": "all x.(Motorcycle(x) -> (SingleOccupantVehicle(x) & -SingleOccupantVehicle(x)))", "score": 0}
{"id": "eqasc_validation_33", "prediction": "all x.(Motorcycle(x) -> (SingleOccupantVehicle(x) & ForMostPart(x)))", "score": 0}
{"id": "eqasc_validation_33", "prediction": "all x.(Motorcycle(x) -> SingleOccupant(x))", "score": 0}
{"id": "eqasc_validation_33", "prediction": "all x.(Motorcycle(x) -> (SingleOccupantVehicle(x) & SingleOccupantVehicle(x)))", "score": 0}
{"id": "eqasc_validation_33", "prediction": "((Motorcycle(m) & SingleOccupant(m)) -> ((Motorcycle(m) & SingleOccupant(m))))", "score": 0}
{"id": "eqasc_validation_33", "prediction": "(SingleOccupantVehicle(motocycle) & NoOccupancy(motocycle)", "score": -1}
{"id": "eqasc_validation_33", "prediction": "(SingleOccupant(motocycle) -> ForMostOccupants(motorcycle))", "score": 0}
{"id": "eqasc_validation_33", "prediction": "all x.(Motorcycle(x) -> (SingleOccupant(x) & AllOccupants(x)))", "score": 0}
{"id": "eqasc_validation_34", "prediction": "all x.(Motorcycle(x) -> UsedForTransportation(x))", "score": 0}
{"id": "eqasc_validation_34", "prediction": "all x y.((Motorcycle(x) & Transportation(y)) -> UsedFor(x,y))", "score": 0}
{"id": "eqasc_validation_34", "prediction": "all x y.((Motorcycle(x) & Transport(y)) -> UsedFor(x,y))", "score": 0}
{"id": "eqasc_validation_34", "prediction": "all x y.((Motorcycle(x) & Cargo(y)) -> UsedForTransportation(x,y))", "score": 0}
{"id": "eqasc_validation_34", "prediction": "all x y z.((Motorcycle(x) & Transport(y) & Transportation(z)) -> UsedFor(x,y,z))", "score": 0}
{"id": "eqasc_validation_34", "prediction": "all x y z.((Motorcycle(x) & Bus(y) & Road(z)) -> UsedForTransportation(x,y,z))", "score": 0}
{"id": "eqasc_validation_34", "prediction": "all x.(Motorcycle(x) -> Transportation(x))", "score": 0}
{"id": "eqasc_validation_34", "prediction": "all x.(Motorcycle(x) -> UsesForTransportation(x))", "score": 0}
{"id": "eqasc_validation_35", "prediction": "all x.((InMovingCar(x) & PledgesSafety(x)) -> (PutsOver(x) & StopsQuickly(x) & StaysInVehicle(x)))", "score": 0}
{"id": "eqasc_validation_35", "prediction": "all x.(MovingCar(x) -> (RepeatAndStopAsQuicklyAsSafetyPermits(x) & StayInVehicle(x)))", "score": 0}
{"id": "eqasc_validation_35", "prediction": "all x y.((MovingCar(x) & Car(y) & PullOver(x,y) & StopAsQuickly(x)) -> StayInVehicle(x))", "score": 0}
{"id": "eqasc_validation_35", "prediction": "all x.((MovingCar(x) & PullOver(x) & StopAsQuicklyAsSafetyPermits(x) & StayInVehicle(x)) -> -Trigger(x))", "score": 0}
{"id": "eqasc_validation_35", "prediction": "all x.((MovingCar(x) & PullOver(x) & Stop(x) & SafetyPermits(x)) -> StaysInVehicle(x))", "score": 0}
{"id": "eqasc_validation_35", "prediction": "all x.((MovingCar(x) & PullOver(x) & StopFast(x)) -> StayInVehicle(x))", "score": 0}
{"id": "eqasc_validation_35", "prediction": "all x.((MovingCar(x) & PullOver(x) & StopAsQuicklyAsSafetyPermits(x) & StayInVehicle(x)) -> In(x,y))", "score": 0}
{"id": "eqasc_validation_35", "prediction": "all x.((MovingCar(x) & PullOver(x) & Stop(x) & SafetyPermits(x) & StaysInVehicle(x)) -> SafetyPermitFast(x))", "score": 0}
{"id": "eqasc_validation_35", "prediction": "all x.((MovingCar(x) & PullOver(x) & StopFast(x) & StayInVehicle(x)) -> SafetyPermits(x))", "score": 0}
{"id": "eqasc_validation_35", "prediction": "all x y z.((MovingCar(x) & PullOver(y) & Stop(z)) -> SafetyPermits(x,y,z))", "score": 0}
{"id": "eqasc_validation_35", "prediction": "all x y.((MovingCar(x) & PullOver(y) & StopsAsSafetyPermits(y) & StaysInVehicle(y)) -> (Vehicle(z) | Vehicle(z))))", "score": -1}
{"id": "eqasc_validation_35", "prediction": "all x.((MovingCar(x) & PullOver(x) & StopAsQuicklyAsSafetyPermits(x) & StayInVehicle(x)) -> -MovingCar(x))", "score": 0}
{"id": "eqasc_validation_35", "prediction": "all x y z.((MovingCar(x) & Toy(y) & Car(z)) -> (Vehicle(x,z) & PullsOver(x) & StopsQuickly(x,y) & StaysIn(x,z)))", "score": 0}
{"id": "eqasc_validation_35", "prediction": "all x.(MovingCar(x) -> (PumpOver(x) & StopAsQuicklyAsSafetyPermits(x) & StayInVehicle(x)))", "score": 0}
{"id": "eqasc_validation_35", "prediction": "all x y z.((WavingCar(x) & PullOver(o) & StopAsSpeedPermits(o) & InMovingCar(y) & StayInVehicle(z)) -> (Stand InVehicle(o) & InVehicle(o,x)))", "score": -1}
{"id": "eqasc_validation_35", "prediction": "all x y z.((InMovingCar(x) & PullOver(y) & StopAsQuickly(z) & SafetyPermits(w)) -> -Vehicle(z))", "score": 0}
{"id": "eqasc_validation_36", "prediction": "all x.(MovingCar(x) -> UsedForTransportation(x))", "score": 0}
{"id": "eqasc_validation_36", "prediction": "(all x.((Car(x) & Moving(x)) -> UsedForTransportation(x)))", "score": 0}
{"id": "eqasc_validation_36", "prediction": "all x y z.((Car(x) & Car(y) & Transportation(z)) -> UsedFor(x,y,z))", "score": 0}
{"id": "eqasc_validation_36", "prediction": "all x.((MovingCar(x) & Transportation(x)) -> UsedFor(x,Transportation))", "score": 0}
{"id": "eqasc_validation_36", "prediction": "all x y.((MovementCar(x) & Transportation(y)) -> UtilizedForTransportation(x,y))", "score": 0}
{"id": "eqasc_validation_36", "prediction": "all x y.((MovingCar(x) & Transportation(y)) -> UsedFor(x,y))", "score": 0}
{"id": "eqasc_validation_36", "prediction": "all x y.((Groundcar(x) & MovingCar(y)) -> UsedForTransportation(x,y))", "score": 0}
{"id": "eqasc_validation_36", "prediction": "all x y.((Car(x) & Moving(y)) -> UsedForTransportation(x,y))", "score": 0}
{"id": "eqasc_validation_36", "prediction": "all x y z.((Car(x) & Moving(y) & Vehicle(z)) -> UsedForTransportation(x,y,z))", "score": 0}
{"id": "eqasc_validation_36", "prediction": "all x y z.((Car(x) & Moving(y) & Car(z)) -> Transported(y,z))", "score": 0}
{"id": "eqasc_validation_36", "prediction": "all x y.((Car(x) & Car(y)) -> TransportingCast(x,y))", "score": 0}
{"id": "eqasc_validation_37", "prediction": "all x.((Transportation(x) & CausesAirPollution(x)) -> LocatedInAndAroundVancouver(x))", "score": 0}
{"id": "eqasc_validation_37", "prediction": "all x y.((Transportation(x) & AirPollution(y) & Vancouver(z)) -> Causes(x,y,z))", "score": 0}
{"id": "eqasc_validation_37", "prediction": "all x y.((Transportation(x) & Vancouver(y)) -> CausesAirPollution(x,y))", "score": 0}
{"id": "eqasc_validation_37", "prediction": "all x.(Transportation(x) -> CausesAirPollution(x))", "score": 0}
{"id": "eqasc_validation_37", "prediction": "all x.((Transportation(x) & AirPollution(y) & InVancouver(x)) -> Causes(x,y))", "score": 0}
{"id": "eqasc_validation_37", "prediction": "all x y.((Transportation(x) & Vancouver(y)) -> CausesAirPollutionInAndAround(x,y))", "score": 0}
{"id": "eqasc_validation_37", "prediction": "all x y.((Transportation(x) & Vancouver(y)) -> (CausesAirPollution(x,y) & CausesAirPollution(x,y)))", "score": 0}
{"id": "eqasc_validation_37", "prediction": "all x.(Traffication(x) -> CausesAirPollution(x))", "score": 0}
{"id": "eqasc_validation_37", "prediction": "all x.((Transportation(x) & AirPollution(x)) -> Cause(x,v,v))", "score": 0}
{"id": "eqasc_validation_37", "prediction": "all x y.((Transportation(x) & Vancouver(y)) -> CausesMostOfAirPollution(x,y))", "score": 0}
{"id": "eqasc_validation_37", "prediction": "all x y z.((Transportation(x) & AirPollution(y) & DowntownVancouver(z)) -> CausesInAndAround(x,y,z))", "score": 0}
{"id": "eqasc_validation_37", "prediction": "all x y z.((Transportation(x) & AirPollution(y) & Vancouver(z)) -> CausesMostInAndAround(x,y,z))", "score": 0}
{"id": "eqasc_validation_37", "prediction": "all x.(Transportation(x) -> CausesAugmentPollutionInAndAroundVancouver(x))", "score": 0}
{"id": "eqasc_validation_37", "prediction": "all x.(Taxi(x) -> CausesAugmentPollution(x))", "score": 0}
{"id": "eqasc_validation_38", "prediction": "all x.(Vehicle(x) -> CausesAirPollution(x))", "score": 0}
{"id": "eqasc_validation_38", "prediction": "all x.((Vehicle(x) & CausesAirPollution(x)) -> CausesAirPollution(x))", "score": 0}
{"id": "eqasc_validation_38", "prediction": "all x y z w.((Vehicle(x) & AirPollution(y) & Vehicle(z) & Cures(x,y)) -> Causes(x,z))", "score": 0}
{"id": "eqasc_validation_38", "prediction": "all x y.((Vehicle(x) & CausesAirPollution(x)) -> CausesAirPollution(x,y))", "score": 0}
{"id": "eqasc_validation_38", "prediction": "all x.((Vehicle(x) & AirPollution(y)) -> CausesCausesAirPollution(x,y))", "score": 0}
{"id": "eqasc_validation_38", "prediction": "all x y.((Vehicle(x) & AirPollution(y)) -> Causes(x,y))", "score": 0}
{"id": "eqasc_validation_38", "prediction": "all x.((Vehicle(x) & CausesAirPollution(x)) -> AirPollutionCauses(x))", "score": 0}
{"id": "eqasc_validation_39", "prediction": "all x y z.((CollarCell(x) & TweenHair(y) & Particle(z)) -> Traps(x,y,z))", "score": 0}
{"id": "eqasc_validation_39", "prediction": "all x.(CollarCell(x) -> TinyHairs(x))", "score": 0}
{"id": "eqasc_validation_39", "prediction": "all x.(CollarCell(x) -> HasTinyHairs(x))", "score": 0}
{"id": "eqasc_validation_39", "prediction": "all x.(Cell(x) -> (HasTinyHairs(x) & TrapsParticles(x)))", "score": 0}
{"id": "eqasc_validation_39", "prediction": "all x.(CollarCell(x) -> (TinyHairs(x) & TrapsChinese(x)))", "score": 0}
{"id": "eqasc_validation_39", "prediction": "all x.(CollarCell(x) -> (TinyHairs(x) & Trap(x)))", "score": 0}
{"id": "eqasc_validation_39", "prediction": "all x.(CollaredCell(x) -> TheseHairsTrapTwoParticles(x))", "score": 0}
{"id": "eqasc_validation_39", "prediction": "all x.(CollarCell(x) -> (HasTinyHairs(x) & TrapsParticles(x)))", "score": 0}
{"id": "eqasc_validation_39", "prediction": "all x.(CollarCell(x) -> (TinyHairs(x) & TrapsParticles(x)))", "score": 0}
{"id": "eqasc_validation_39", "prediction": "all x.(ColarCell(x) -> (TinyHairs(x) & TrapsParticles(x)))", "score": 0}
{"id": "eqasc_validation_39", "prediction": "all x.(CollarCell(x) -> (TinyHairs(x) & Tickle(x) & TrapsParticles(x)))", "score": 0}
{"id": "eqasc_validation_39", "prediction": "all x y.((CollarCell(x) & TinyHairs(y)) -> TrapsParticles(x,y))", "score": 0}
{"id": "eqasc_validation_39", "prediction": "all x.(ColorCell(x) -> (TinyHairs(x) & TrapsParticles(x)))", "score": 0}
{"id": "eqasc_validation_40", "prediction": "all x.(WorkHorse(x) -> (CollarCells(x) | Choanocytes(x)))", "score": 0}
{"id": "eqasc_validation_40", "prediction": "all x.((CollarCells(x) | Choanocytes(x)) -> WorkHorse(x))", "score": 0}
{"id": "eqasc_validation_40", "prediction": "all x.(WorkHorse(x) -> (CollarCell(x) | Choanocyte(x)))", "score": 0}
{"id": "eqasc_validation_40", "prediction": "all x.(WorkHop(x) -> (CollarCells(x) | Choanocytes(x)))", "score": 0}
{"id": "eqasc_validation_40", "prediction": "all x.(WorkHole(x) -> (Collar(x) | Choanocyte(x)))", "score": 0}
{"id": "eqasc_validation_40", "prediction": "all x.((CollarCell(x) | Choanocyte(x)) -> WorkHouse(x))", "score": 0}
{"id": "eqasc_validation_40", "prediction": "all x y.((CollarCell(x) | Choanocyte(y)) -> WorkHorse(x))", "score": 0}
{"id": "eqasc_validation_40", "prediction": "all x y z.((CollarCell(x) | Choanocyte(x)) -> WorkHorse(y))", "score": 0}
{"id": "eqasc_validation_40", "prediction": "all x.((CollagenCell(x) | Choanocyte(x)) -> WorkHorse(x))", "score": 0}
{"id": "eqasc_validation_40", "prediction": "all x y.((CollarCell(x) | Choanocyte(x)) -> WorkHorse(y))", "score": 0}
{"id": "eqasc_validation_40", "prediction": "all x y.((CollarChoanocyte(x) & Horse(y)) -> WorkHorse(x))", "score": 0}
{"id": "eqasc_validation_41", "prediction": "all x.(Choanocyte(x) -> (TinyHairs(x) & TrapsParticles(x)))", "score": 0}
{"id": "eqasc_validation_41", "prediction": "all x.(Choanocyte(x) -> (HasTinyHairs(x) & TrapsParticles(x)))", "score": 0}
{"id": "eqasc_validation_41", "prediction": "all x.(Choanocyte(x) -> (TinyHairs(x) & TrapsMolecules(x)))", "score": 0}
{"id": "eqasc_validation_41", "prediction": "all x y z.((Choanocyte(x) & TinyHairs(y) & Particles(z) & Has(x,y)) -> Traps(x,z))", "score": 0}
{"id": "eqasc_validation_41", "prediction": "all x.(Choanocyte(x) -> (TinyHairs(x) & Trap(x)))", "score": 0}
{"id": "eqasc_validation_41", "prediction": "all x y z.((Choanocyte(x) & TinyHair(y) & Particle(z)) -> Traps(x,y,z))", "score": 0}
{"id": "eqasc_validation_41", "prediction": "all x.(Choanocyte(x) -> (TinyHairs(x) & TrapAllPosteriors(x)))", "score": 0}
{"id": "eqasc_validation_41", "prediction": "all x y z.((Choanocyte(x) & TinyHair(y) & Particle(z) & Traps(x,y,z)) -> Has(x,y))", "score": 0}
{"id": "eqasc_validation_41", "prediction": "all x.(Chocytic(x) -> (HasTinyHairs(x) & TrapsParticles(x)))", "score": 0}
{"id": "eqasc_validation_42", "prediction": "all x y.((Particle(x) & Thick(y)) -> VeryTiny(x,y))", "score": 0}
{"id": "eqasc_validation_42", "prediction": "all x.((Particle(x) & VeryTinyPieceOfMatter(x)) -> Particle(x))", "score": 0}
{"id": "eqasc_validation_42", "prediction": "all x.(Particle(x) -> VeryTinyMatter(x))", "score": 0}
{"id": "eqasc_validation_42", "prediction": "all x.(Particle(x) -> VeryTinyPieceOfMatter(x))", "score": 0}
{"id": "eqasc_validation_42", "prediction": "all x.(Particle(x) -> (TinyPieceOfMatter(x) & VeryTinyPieceOfMatter(x)))", "score": 0}
{"id": "eqasc_validation_42", "prediction": "all x.(Particle(x) -> (Particle(x) & VeryTinyPieceOfMatter(x)))", "score": 0}
{"id": "eqasc_validation_42", "prediction": "all x.(Particle(x) -> (TinyPieceOfMatter(x) & AimsToFollow(x)))", "score": 0}
{"id": "eqasc_validation_42", "prediction": "all x.(Particle(x) -> (TinyMatter(x) & VeryTiny(x)))", "score": 0}
{"id": "eqasc_validation_42", "prediction": "all x.(Physic(x) -> IsTinyMatter(x))", "score": 0}
{"id": "eqasc_validation_42", "prediction": "all x.((Particle(x) & TinyPieceOfMatter(x)) -> Has(x,(Particle(x) & Particle(x)))", "score": -1}
{"id": "eqasc_validation_42", "prediction": "all x y z.((Particle(x) & Tiny(y) & Matrix(z)) -> Particle(x))", "score": 0}
{"id": "eqasc_validation_42", "prediction": "all x.(Particle(x) -> (SmallPieceOfMatter(x) & VeryTinyPieceOfMatter(x)))", "score": 0}
{"id": "eqasc_validation_43", "prediction": "all x y.((CollarCell(x) & Teeth(y)) -> (ThreatsTinyHards(x,y) & TracesTinyPiecesOfMatter(x)))", "score": 0}
{"id": "eqasc_validation_43", "prediction": "all x y z.((CollarCell(x) & Hairs(y) & Matrix(z) & Tight(y) & TrapsSinceres(x,z)) -> ToughHairsThropsDirtyPieces(x))", "score": 0}
{"id": "eqasc_validation_43", "prediction": "all x y z.((Cell(x) & TightHairs(y) & TrapsInMinerals(z)) -> TinyHairsLikeMatter(x,y,z))", "score": 0}
{"id": "eqasc_validation_43", "prediction": "all x.(CollarCell(x) -> (HasTinyHairs(x) & TrapsTinyFirm(x)))", "score": 0}
{"id": "eqasc_validation_43", "prediction": "all x.(CollarCell(x) -> (TinyHairs(x) & TrapsTinyMatter(x)))", "score": 0}
{"id": "eqasc_validation_43", "prediction": "all x y z.((CollarCell(x) & TinyHairs(y) & TinyMatter(z) & Traps(x,y)) -> VeryTinyPiecesOfMatter(x,z))", "score": 0}
{"id": "eqasc_validation_43", "prediction": "all x y.((CollarCell(x) & TinyHairs(x) & TrapsTinyPiecesOfMatter(y)) -> TinyHairs(x))", "score": 0}
{"id": "eqasc_validation_43", "prediction": "all x.(CollarCell(x) -> (HasTogetherHumors(x) & TrapsTogetherTinyMoment(x)))", "score": 0}
{"id": "eqasc_validation_43", "prediction": "all x y.((CollarCell(x) & TinyHairs(y)) -> TrapsTotalPiecesOfMatter(x,y))", "score": 0}
{"id": "eqasc_validation_43", "prediction": "all x y.((CollarCell(x) & TinyHairs(y)) -> TrapsTinyPiecesOfMatter(x,y))", "score": 0}
{"id": "eqasc_validation_43", "prediction": "all x.(CollarCell(x) -> HasTinyHairs(x,y) & TrapsTinyPiecesOfMatter(y))", "score": 0}
{"id": "eqasc_validation_43", "prediction": "all x.(CollarCell(x) -> (TinyHairs(x) & TrapsTinyPiecesOfMatter(x)))", "score": 0}
{"id": "eqasc_validation_43", "prediction": "all x.(CollarCell(x) -> (TinyHairs(x) & TrapsTinyIceOfMatter(x)))", "score": 0}
{"id": "eqasc_validation_44", "prediction": "exists x.(Cell(x) & TenderHairLikeFfiber(x) & Flagella(x))", "score": 0}
{"id": "eqasc_validation_44", "prediction": "exists x.(Cell(x) & TinyHairLikeFerms(x) & Flagella(x))", "score": 0}
{"id": "eqasc_validation_44", "prediction": "exists x.(Cell(x) & TumbleDimensions(x) & Flagella(x))", "score": 0}
{"id": "eqasc_validation_44", "prediction": "exists x.(Cell(x) & TinyHairLikeFibers(x) & Flagella(x))", "score": 0}
{"id": "eqasc_validation_44", "prediction": "exists x.(Cell(x) & TwistyHairLikeFertilizations(x) & Flagella(x))", "score": 0}
{"id": "eqasc_validation_44", "prediction": "exists x.(Cell(x) & HasTinyHairLikeFibers(x) & Flagella(x))", "score": 0}
{"id": "eqasc_validation_44", "prediction": "exists x.(Cell(x) & TickyHairLikeFilms(x) & Flagella(x))", "score": 0}
{"id": "eqasc_validation_44", "prediction": "exists x.(Cell(x) & TinyHumanFast(x) & Flagella(x))", "score": 0}
{"id": "eqasc_validation_44", "prediction": "exists x.(Cell(x) & TinyHairLikeFilms(x) & Flagella(x))", "score": 0}
{"id": "eqasc_validation_44", "prediction": "exists x.(Cell(x) & TightHairLikeFibers(x) & Flagella(x))", "score": 0}
{"id": "eqasc_validation_44", "prediction": "exists x.(Cell(x) & TickyHairLikeFilms(x))", "score": 0}
{"id": "eqasc_validation_44", "prediction": "exists x.(Cell(x) & TweenHairLikeFibers(x) & Flagella(x))", "score": 0}
{"id": "eqasc_validation_44", "prediction": "exists x.(Cell(x) & TighthairLikeFoams(x) & Flagella(x))", "score": 0}
{"id": "eqasc_validation_45", "prediction": "all x.(CollarCell(x) -> HasFlagellaToTrapTheParticles(x))", "score": 0}
{"id": "eqasc_validation_45", "prediction": "all x.(CollarCell(x) -> HasFlagella(x))", "score": 0}
{"id": "eqasc_validation_45", "prediction": "all x.(CollarCell(x) -> (HasFloral(x) & TrapsParticles(x)))", "score": 0}
{"id": "eqasc_validation_45", "prediction": "all x.(CollarCell(x) -> exists y.(Flagella(y) & Traps(z,p))))", "score": -1}
{"id": "eqasc_validation_45", "prediction": "all x y.((CollarCell(x) & Flagella(y)) -> TrapsPrimaryParticles(x,y))", "score": 0}
{"id": "eqasc_validation_45", "prediction": "all x.(CollarCell(x) -> ThereAlwaysFlagellaToTrapParticles(x))", "score": 0}
{"id": "eqasc_validation_45", "prediction": "all x.(CollarCell(x) -> exists y.(Flagella(y) & TrapsParticles(x,y)))", "score": 0}
{"id": "eqasc_validation_45", "prediction": "all x.(CollarCell(x) -> (FlagellaStrapping(x) & ParticlesTrap(x)))", "score": 0}
{"id": "eqasc_validation_45", "prediction": "all x.(CollarCell(x) & HasFlagella(x) & TrapsParticles(x))", "score": 0}
{"id": "eqasc_validation_45", "prediction": "all x y.((CollarCell(x) & Particle(y)) -> HasFlagella(x,y))", "score": 0}
{"id": "eqasc_validation_45", "prediction": "all x y.((CollarCell(x) & Pyterol(y)) -> Flagella(x,y))", "score": 0}
{"id": "eqasc_validation_45", "prediction": "all x.(CollarCell(x) -> (HasFlagella(x) & TrapsParticles(x)))", "score": 0}
{"id": "eqasc_validation_46", "prediction": "all x.(Cell(x) -> LinesInteriorChambers(x))", "score": 0}
{"id": "eqasc_validation_46", "prediction": "all x y.((CollarCell(x) & InteriorChain(y)) -> Lines(x,y))", "score": 0}
{"id": "eqasc_validation_46", "prediction": "-LinesInteriorChambers(collarCells)", "score": 0}
{"id": "eqasc_validation_46", "prediction": "(LineInteriorChambers(CollarCells))", "score": 0}
{"id": "eqasc_validation_46", "prediction": "all x.(CollarCell(x) -> LineInsideChambers(x))", "score": 0}
{"id": "eqasc_validation_46", "prediction": "all x y.((CollarCell(x) & Interior(y)) -> Lines(x,y))", "score": 0}
{"id": "eqasc_validation_46", "prediction": "all x.(CollarCell(x) -> LinesInteriorChambers(x))", "score": 0}
{"id": "eqasc_validation_46", "prediction": "all x y.((CollarCell(x) & InteriorChamber(y)) -> Line(x,y))", "score": 0}
{"id": "eqasc_validation_46", "prediction": "all x y.((CollarCell(x) & InteriorCombination(y)) -> Lines(x,y))", "score": 0}
{"id": "eqasc_validation_46", "prediction": "all x.(CollarCell(x) -> LineInteriorChambers(x))", "score": 0}
{"id": "eqasc_validation_46", "prediction": "all x y z.((CollarCell(x) & InteriorChamber(y) & InteriorChamber(z)) -> Lines(x,y,z))", "score": 0}
{"id": "eqasc_validation_46", "prediction": "all x y.((CollarCell(x) & InteriorChamber(y)) -> Lines(x,y))", "score": 0}
{"id": "eqasc_validation_46", "prediction": "all x y.((Cell(x) & InteriorColumn(y)) -> Lines(x,y))", "score": 0}
{"id": "eqasc_validation_47", "prediction": "all x.(InteriorChamber(x) -> (TinyHairs(x) & TrapsParticles(x)))", "score": 0}
{"id": "eqasc_validation_47", "prediction": "all x,y,z w.(InteriorChamber(x) -> (TinyHairs(y) & TongueTaps(z,w)))", "score": -1}
{"id": "eqasc_validation_47", "prediction": "all x and y.((InteriorChamber(x) & TickyHairs(y)) -> trapsParticles(x))", "score": -1}
{"id": "eqasc_validation_47", "prediction": "all x.((InteriorChamber(x) & TinyHairs(x) & TrapsParticles(x)) -> InteriorChamber(x))", "score": 0}
{"id": "eqasc_validation_47", "prediction": "all x y.((InteriorChamber(x) & TinyHairs(y)) -> TrapsParticles(x,y))", "score": 0}
{"id": "eqasc_validation_47", "prediction": "all x.(InteriorCombate(x) -> HasTinyHairs(x))", "score": 0}
{"id": "eqasc_validation_47", "prediction": "all x y.((InteriorChamber(x) & InteriorChamber(y)) -> HasTinyHairs(x) & TrapsParticles(x,y))", "score": 0}
{"id": "eqasc_validation_47", "prediction": "all x y.((InteriorChamber(x) & TinyHairs(x)) -> TrapParticles(y))", "score": 0}
{"id": "eqasc_validation_47", "prediction": "all x y z.((InteriorChamber(x) & TinyHairs(y) & Particle(z)) -> TrapsIncidentally(x,y,z))", "score": 0}
{"id": "eqasc_validation_47", "prediction": "all x y z.((InteriorChamber(x) & TinyHairs(y) & Particle(z)) -> Traps(x,y,z))", "score": 0}
{"id": "eqasc_validation_47", "prediction": "all x y z.((Chamber(x) & Interior(y) & Hair (z)) -> (Tiny(z) & TrapsTheParticles(x,z)))", "score": 0}
{"id": "eqasc_validation_47", "prediction": "all x.(InteriorChamber(x) -> TightHairs(x))", "score": 0}
{"id": "eqasc_validation_47", "prediction": "all x.(InteriorChamber(x) -> HasTinyHairs(x))", "score": 0}
{"id": "eqasc_validation_48", "prediction": "all x.(CollarCell(x) -> WorkHorseOfSponge(x))", "score": 0}
{"id": "eqasc_validation_48", "prediction": "all x.(CollarCell(x) -> (WorkHorse(x) & Sponge(x)))", "score": 0}
{"id": "eqasc_validation_48", "prediction": "all x.(CollaredCell(x) -> WorkHorseOf(x,sponge))", "score": 0}
{"id": "eqasc_validation_48", "prediction": "all x.(CollarCell(x) -> WorkHorse(x,Sponge))", "score": 0}
{"id": "eqasc_validation_48", "prediction": "all x y.((CollarCell(x) & Sponge(y)) -> WorkHorse(x,y))", "score": 0}
{"id": "eqasc_validation_48", "prediction": "all x.(CollarCell(x) -> WorkHorse(x))", "score": 0}
{"id": "eqasc_validation_48", "prediction": "all x.(CollarCell(x) -> WorkPheon(x,Sponge))", "score": 0}
{"id": "eqasc_validation_48", "prediction": "all x y.((CollarCell(x) & Sponge(y)) -> WorkHorseAtMovement(x,y))", "score": 0}
{"id": "eqasc_validation_48", "prediction": "all x.(CollarCell(x) -> WorkHorse(x,sponge))", "score": 0}
{"id": "eqasc_validation_48", "prediction": "all x.(CollarCell(x) -> WorkPose(x))", "score": 0}
{"id": "eqasc_validation_48", "prediction": "all x.(CollaredCell(x) -> WorkHorseOfSponge(x))", "score": 0}
{"id": "eqasc_validation_49", "prediction": "all x y.((Sponge(x) & TinyHairs(y)) -> TrapsParticles(x,y))", "score": 0}
{"id": "eqasc_validation_49", "prediction": "all x.(Sponge(x) -> (TinyHairs(x) & TrapsPrimums(x)))", "score": 0}
{"id": "eqasc_validation_49", "prediction": "all x y z.((Sponge(x) & TinyHairs(y) & Particle(z)) -> Traps(x,y,z))", "score": 0}
{"id": "eqasc_validation_49", "prediction": "all x.(Sponge(x) -> (TinyHairs(x) & TrapsParticles(x)))", "score": 0}
{"id": "eqasc_validation_49", "prediction": "all x y.((Sponge(x) & StinksAndHairs(y)) -> TrapsParts(x,y))", "score": 0}
{"id": "eqasc_validation_49", "prediction": "all x y z.((Sponge(x) & TinyHairs(y) & Particle(z)) -> TrapInsults(x,y,z))", "score": 0}
{"id": "eqasc_validation_49", "prediction": "all x y.((Sponge(x) & TaperedHairs(y) & Stinks(x)) -> TrapsParticles(x))", "score": 0}
{"id": "eqasc_validation_49", "prediction": "all x y.((Sponge(x) & TinyHairSpoke(y)) -> TrapTo(x,y))", "score": 0}
{"id": "eqasc_validation_49", "prediction": "all x.(Sponge(x) -> (HasTinyHairs(x) & TrapsIngredients(x)))", "score": 0}
{"id": "eqasc_validation_49", "prediction": "all x.(Sponge(x) -> (HasTinyHairs(x) & TrapsParticles(x)))", "score": 0}
{"id": "eqasc_validation_49", "prediction": "all x.((Sponge(x) & TinyHairs(x) & TrapsPopularParticles(x)) -> HasHairs(x))", "score": 0}
{"id": "eqasc_validation_50", "prediction": "all x.(Sponge(x) -> TrapsParticles(x))", "score": 0}
{"id": "eqasc_validation_50", "prediction": "all x.(Sponge(x) -> (TrapsParticles(x) & Pigments(x)))", "score": 0}
{"id": "eqasc_validation_50", "prediction": "all x y.((Sponge(x) & Particle(y)) -> Traps(x,y))", "score": 0}
{"id": "eqasc_validation_50", "prediction": "all x.(Sponge(x) -> (PotatoriesParticles(x) & Sponge(x)))", "score": 0}
{"id": "eqasc_validation_50", "prediction": "all x y.((Sponge(x) & Particle(y)) -> TrapsTouching(x,y))", "score": 0}
{"id": "eqasc_validation_50", "prediction": "all x.(Sponge(x) -> (TrapParticles(x) & Sponge(x) & Particles(x)))", "score": 0}
{"id": "eqasc_validation_50", "prediction": "all x.(Sponge(x) -> TraceParticles(x))", "score": 0}
{"id": "eqasc_validation_50", "prediction": "all x.(Appliance(x) -> (TrapsParticulate(x) & Particles(x)))", "score": 0}
{"id": "eqasc_validation_50", "prediction": "all x.(Sponge(x) -> TrapsTomaters(x))", "score": 0}
{"id": "eqasc_validation_50", "prediction": "all x.(Sponge(x) -> (Traps(x,particles) | Traps(x,particles))))", "score": -1}
{"id": "eqasc_validation_50", "prediction": "all x.(Sponge(x) -> (TrapPlates(x) & ParticlesParticles(x)))", "score": 0}
{"id": "eqasc_validation_50", "prediction": "all x.(Sponge(x) -> CapturesParticles(x))", "score": 0}
{"id": "eqasc_validation_51", "prediction": "all x.(CollarCell(x) -> HasFlagellum(x))", "score": 0}
{"id": "eqasc_validation_51", "prediction": "all x.(Cell(x) -> HasFlagellum(x))", "score": 0}
{"id": "eqasc_validation_52", "prediction": "all x.(Flagellum(x) -> (TinyHairs(x) & TrapsParticles(x)))", "score": 0}
{"id": "eqasc_validation_52", "prediction": "all x.(Flagellum(x) -> (TinyHairs(x) & TrapsQuestions(x)))", "score": 0}
{"id": "eqasc_validation_52", "prediction": "all x.(Flagellum(x) -> (TinyHair(x) & TrapsParticles(x)))", "score": 0}
{"id": "eqasc_validation_52", "prediction": "all x y.((Flagellum(x) & TinyHairs(y)) -> Trap(x,y))", "score": 0}
{"id": "eqasc_validation_52", "prediction": "all x y.((Flagellum(x) & TinyHair(y)) -> TrapParticles(y))", "score": 0}
{"id": "eqasc_validation_52", "prediction": "all x.(Flagellum(x) -> (TinyHairs(x) & TrapParticles(x)))", "score": 0}
{"id": "eqasc_validation_52", "prediction": "all x y.((Flagellum(x) & TinyHair(y)) -> TrapsParticles(y,x))", "score": 0}
{"id": "eqasc_validation_52", "prediction": "all x.(Flagella(x) -> (TinyHair(x) & TrapsParticles(x)))", "score": 0}
{"id": "eqasc_validation_52", "prediction": "all x y z.((Flagellum(x) & Hair(y) & Particles(z)) -> Traps(y,z,y,z))", "score": 0}
{"id": "eqasc_validation_52", "prediction": "all x.(Flagellum(x) -> (TinyBugs(x) & TrapsParticles(x)))", "score": 0}
{"id": "eqasc_validation_53", "prediction": "all x y z.((WorkHorse(x) & Sponge(y) & Hair(z)) -> (HasTinyHairs(z) & TrapsParticles(x,y)))", "score": 0}
{"id": "eqasc_validation_53", "prediction": "all x y.((WorkHorse(x) & Sponge(y)) -> HasTinyHairs(x))", "score": 0}
{"id": "eqasc_validation_53", "prediction": "all x y.((Work Horse(x) & Sponge(y) & SmallHairs(x)) -> TrapsParticles(x,y))", "score": -1}
{"id": "eqasc_validation_53", "prediction": "all x.(WorkHorse(x) -> (WorkPhone(x) & TrunkyHairs(x) & TrapsParticles(x)))", "score": 0}
{"id": "eqasc_validation_53", "prediction": "all x y z.((WorkHorse(x) & Sponge (sponge) & Hair(y) & Particle(z)) -> SmallHairs(x,y,z))", "score": 0}
{"id": "eqasc_validation_53", "prediction": "all x y.((WorkHorse(x) & Sponge(y)) -> (TinyHairs(y) & TrapsParticles(y)))", "score": 0}
{"id": "eqasc_validation_53", "prediction": "all x y z.((WorkHorse(x) & Sponge(y) & TastyHairs(z) & TrapsParticles(y)) -> HasWorkHorsesSponge(x,y,z))", "score": 0}
{"id": "eqasc_validation_53", "prediction": "all x y z w.((WorkHorse(x) & Sponge(y) & Hair (z) & Hair(w)) -> TrapsParticles(u,h,w))", "score": 0}
{"id": "eqasc_validation_53", "prediction": "all x.(Sponge(x) -> (WorkHorses(x) & TinyHairs(x)))", "score": 0}
{"id": "eqasc_validation_53", "prediction": "all x y z.((WorkHorse(x) & Sponge(y) & Pigment(z) & TinyHairs(x,y)) -> TrapsOrClaimsParticles(x,z))", "score": 0}
{"id": "eqasc_validation_53", "prediction": "all x y z.((WorkHorse(x) & Sponge(y) & Pebble(z) & TrunkHairs(y,z)) -> Traces(y,z))", "score": 0}
{"id": "eqasc_validation_53", "prediction": "all x.(WorkHorse(x) -> (WorkSponge(x) & HasTinyHairs(x) & TrapsPrimary(x)))", "score": 0}
{"id": "eqasc_validation_53", "prediction": "all x y z.((Sheath(x) & WorkHorse(y) & Sponge(z)) -> (TinyHairs(x) & TrapsParticles(x,y,z)))", "score": 0}
{"id": "eqasc_validation_53", "prediction": "all x y z.((WorkHorse(x) & Sponge(y) & TinyHair(z)) -> TrapsMoreCombutions(z))", "score": 0}
{"id": "eqasc_validation_53", "prediction": "all x.(WorkHorse(x) -> (WorkPhoenixSponge(x) & TwentyEarlyHairs(x) & TrapsParticles(x)))", "score": 0}
{"id": "eqasc_validation_53", "prediction": "all x y.((WorkHorse(x) & Sponge(y)) -> (TinyHairs(x) & TrapsParticles(x,y)))", "score": 0}
{"id": "eqasc_validation_54", "prediction": "all x.(Cnidarian(x) -> Aquatic(x))", "score": 0}
{"id": "eqasc_validation_55", "prediction": "all x.(Cnidarian(x) -> (Jerkyfish(x) | Anemones(x)))", "score": 0}
{"id": "eqasc_validation_55", "prediction": "all x.(Cnidarian(x) -> (Jerkfish(x) | Anemone(x)))", "score": 0}
{"id": "eqasc_validation_55", "prediction": "all x.(Cnidarian(x) -> (Jerseyfish(x) | Anemones(x)))", "score": 0}
{"id": "eqasc_validation_55", "prediction": "all x.(Cnidarian(x) -> (Jellyfish(x) | Anemone(x)))", "score": 0}
{"id": "eqasc_validation_55", "prediction": "all x.(Cnidarian(x) -> (Includes(x,zooter) | Includes(x,anemones)))", "score": 0}
{"id": "eqasc_validation_55", "prediction": "all x.(Cnidarian(x) -> (Includes(x,Jellyfish) & Includes(x,Anemones)))", "score": 0}
{"id": "eqasc_validation_55", "prediction": "all x.(Cnidarian(x) -> (Jerryfish(x) | Anemones(x)))", "score": 0}
{"id": "eqasc_validation_56", "prediction": "all x.(Jellyfish(x) -> AquaticAnimal(x))", "score": 0}
{"id": "eqasc_validation_57", "prediction": "all x.(AquaticCreature(x) -> LivesInWater(x))", "score": 0}
{"id": "eqasc_validation_57", "prediction": "exists x.(AquaticCreature(x) & LivesInWater(x))", "score": 0}
{"id": "eqasc_validation_57", "prediction": "all x y.((AquaticCreature(x) & Water(y)) -> LivesIn(x,y))", "score": 0}
{"id": "eqasc_validation_57", "prediction": "all x y z.((AquaticCreature(x) & Water(y) & Aquatic(z)) -> LivesIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_57", "prediction": "all x.(AquaticCreature(x) -> (LivesInWater(x) & For example)))", "score": -1}
{"id": "eqasc_validation_57", "prediction": "all x.(AquaticCreature(x) -> (LivesInWater(x) & For Example(x)))", "score": -1}
{"id": "eqasc_validation_57", "prediction": "all x.(AquaticCreature(x) -> LiveInWater(x))", "score": 0}
{"id": "eqasc_validation_58", "prediction": "all x.(Cnidarian(x) -> LivesInWater(x))", "score": 0}
{"id": "eqasc_validation_58", "prediction": "all x.(Cnidarian(x) -> (LivesInWater(x) & InWater(x)))", "score": 0}
{"id": "eqasc_validation_58", "prediction": "all x y.((Cnidarian(x) & Water(y)) -> LivesIn(x,y))", "score": 0}
{"id": "eqasc_validation_59", "prediction": "all x.(CnidarianTentacle(x) -> CapturesPrey(x))", "score": 0}
{"id": "eqasc_validation_59", "prediction": "all x.(CnidarianTentacle(x) -> MeasuresPreyCast(x))", "score": 0}
{"id": "eqasc_validation_59", "prediction": "all x y.((CnidarianTentacle(x) & Prey(y)) -> Captures(x,y))", "score": 0}
{"id": "eqasc_validation_59", "prediction": "all x.(Cnidarian(x) -> CapturesPrey(x))", "score": 0}
{"id": "eqasc_validation_59", "prediction": "all x.(CnidarianTentacle(x) -> ServesToCapturePrey(x))", "score": 0}
{"id": "eqasc_validation_60", "prediction": "all x.(AquaticTentacle(x) -> CapturesPrey(x))", "score": 0}
{"id": "eqasc_validation_60", "prediction": "all x y.((AquaticTentacle(x) & Prey(y)) -> Captures(x,y))", "score": 0}
{"id": "eqasc_validation_60", "prediction": "all x.(AquaticTentacle(x) -> (ServicesToCapturePrey(x) & AllAquaticTentacles(x)))", "score": 0}
{"id": "eqasc_validation_60", "prediction": "all x.((AquaticTenacle(x) & AquaticTenacle(x)) -> CapturesPrey(x))", "score": 0}
{"id": "eqasc_validation_60", "prediction": "all x.(AquaticTentacle(x) -> ServesToCapturePrey(x))", "score": 0}
{"id": "eqasc_validation_60", "prediction": "all x.(AquaticTentacle(x) -> (CapturesPrey(x) & ServingAquaticTenacle(x)))", "score": 0}
{"id": "eqasc_validation_60", "prediction": "all x y z.((AquaticTentacle(x) & Prey(y) & Prey(z)) -> Captures(x,y,z))", "score": 0}
{"id": "eqasc_validation_60", "prediction": "all x.(Tentacle(x) -> CapturesPrey(x))", "score": 0}
{"id": "eqasc_validation_60", "prediction": "all x.(AquaticTenacle(x) -> CapturesPrey(x))", "score": 0}
{"id": "eqasc_validation_61", "prediction": "all x.(Cnidarian(x) -> LivesInWater(x))", "score": 0}
{"id": "eqasc_validation_61", "prediction": "all x y z.((Cnidarian(x) & Water(y) & Aqua(z)) -> LivesIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_61", "prediction": "all x y.((Cnidarian(x) & Water(y)) -> LivesIn(x,y))", "score": 0}
{"id": "eqasc_validation_61", "prediction": "all x.((Cnidarian(x) & LivesInWater(x)) -> Cnidarian(x))", "score": 0}
{"id": "eqasc_validation_61", "prediction": "all x.(Cnidian(x) -> LivesInWater(x))", "score": 0}
{"id": "eqasc_validation_62", "prediction": "all x.(Jellyfish(x) -> Aquatic(x))", "score": 0}
{"id": "eqasc_validation_63", "prediction": "all x.(Jellyfish(x) -> Aquatic(x))", "score": 0}
{"id": "eqasc_validation_63", "prediction": "all x y.((Jellyfish(x) & Aquatic(y)) -> Aquatic(x))", "score": 0}
{"id": "eqasc_validation_63", "prediction": "all x.(Jellyfish(x) -> (Aquatic(x) & Aquatic(x) & Aquatic(x)))", "score": 0}
{"id": "eqasc_validation_63", "prediction": "all x.(Jellyfish(x) -> AquaticAquatic(x))", "score": 0}
{"id": "eqasc_validation_63", "prediction": "all x.(Beetlefish(x) -> Aquatic(x))", "score": 0}
{"id": "eqasc_validation_64", "prediction": "all x.(Anemone(x) -> (Aquatic(x) | Aquatic(x)))", "score": 0}
{"id": "eqasc_validation_64", "prediction": "all x.(Anemone(x) -> Aquatic(x))", "score": 0}
{"id": "eqasc_validation_64", "prediction": "all x.(Enemon(x) -> Aquatic(x))", "score": 0}
{"id": "eqasc_validation_64", "prediction": "all x.(Anemone(x) -> AquaticAquatic(x))", "score": 0}
{"id": "eqasc_validation_64", "prediction": "all x.(Elemone(x) -> Aquatic(x))", "score": 0}
{"id": "eqasc_validation_64", "prediction": "all x.(Nectar(x) -> Aquatic(x))", "score": 0}
{"id": "eqasc_validation_65", "prediction": "all x.(Jellyfish(x) -> Aquatic(x))", "score": 0}
{"id": "eqasc_validation_65", "prediction": "all x.(Jerkyfish(x) -> Aquatic(x))", "score": 0}
{"id": "eqasc_validation_66", "prediction": "all x.((Jellyfish(x) | Anemone(x)) -> Aquatic(x))", "score": 0}
{"id": "eqasc_validation_66", "prediction": "all x.((Jellyfish(x) & Anemone(x)) -> Aquatic(x))", "score": 0}
{"id": "eqasc_validation_66", "prediction": "all x.(Jellyfish(x) | Anemone(x)) -> Aquatic(x))", "score": -1}
{"id": "eqasc_validation_66", "prediction": "all x y.((Jellyfish(x) & Anemone(y)) -> Aquatic(x))", "score": 0}
{"id": "eqasc_validation_66", "prediction": "all x y.((Jellyfish(x) | Anemone(x)) -> Aquatic(x))", "score": 0}
{"id": "eqasc_validation_66", "prediction": "all x y.((Jellyfish(x) | Anemone(y)) -> Aquatic(x))", "score": 0}
{"id": "eqasc_validation_67", "prediction": "all x.(Cnidarian(x) -> (Coelenterates(x)))", "score": 0}
{"id": "eqasc_validation_67", "prediction": "all x.(Cnidarian(x) -> Coelenterate(x))", "score": 0}
{"id": "eqasc_validation_67", "prediction": "all x.(Cnidarian(x) -> (Colelenterate(x) | Cnidarian(x)))", "score": 0}
{"id": "eqasc_validation_67", "prediction": "all x.(Cnidarian(x) -> (Coelenterate(x) & Cnidarian(x)))", "score": 0}
{"id": "eqasc_validation_67", "prediction": "all x.(Cnidarian(x) -> (Coelenterate(x) & Eaton(x) & Eaton(x)))", "score": 0}
{"id": "eqasc_validation_67", "prediction": "all x.(Cnidarian(x) -> (Coelenterate(x)))", "score": 0}
{"id": "eqasc_validation_67", "prediction": "all x.(Cnidarian(x) -> Coelenterats(x))", "score": 0}
{"id": "eqasc_validation_67", "prediction": "all x.(Cnidarian(x) -> (Coelenteraté(x) | Coelenteraté(x)))", "score": 0}
{"id": "eqasc_validation_67", "prediction": "all x.(Cnidarian(x) -> (Coelenterates(x) & Cnidarian(x)))", "score": 0}
{"id": "eqasc_validation_67", "prediction": "all x.(Cnidarian(x) -> Conelenterate(x))", "score": 0}
{"id": "eqasc_validation_67", "prediction": "all x.(Cnidarian(x) -> (Coelenterate(x) | Coelenterate(x)))", "score": 0}
{"id": "eqasc_validation_67", "prediction": "all x.(Cnidarian(x) -> Coelenterates(x))", "score": 0}
{"id": "eqasc_validation_68", "prediction": "all x.(Coelenterates(x) -> AquaticAquatic(x))", "score": 0}
{"id": "eqasc_validation_68", "prediction": "all x.((Coelenterate(x) & Aquatic(x)) -> Aquatic(x))", "score": 0}
{"id": "eqasc_validation_68", "prediction": "all x y.((Coelenterate(x) & Aquatic(y)) -> Aquatic(x))", "score": 0}
{"id": "eqasc_validation_68", "prediction": "all x.(Coelenterate(x) -> AquaticAquatic(x))", "score": 0}
{"id": "eqasc_validation_68", "prediction": "all x.(Coelenterate(x) -> Aquatic(x))", "score": 0}
{"id": "eqasc_validation_68", "prediction": "all x.(Coelenterates(x) -> Aquatic(x))", "score": 0}
{"id": "eqasc_validation_68", "prediction": "all x.(Coelenterate(x) -> AquaticAquaticAquatic(x))", "score": 0}
{"id": "eqasc_validation_69", "prediction": "all x.(Coelenterate(x) -> Aquatic(x))", "score": 0}
{"id": "eqasc_validation_69", "prediction": "All x.(Coelenterate(x) -> Aquatic(x))", "score": -1}
{"id": "eqasc_validation_69", "prediction": "all x.((Coelenterate(x) & Aquatic(x)) -> Adult(x))", "score": 0}
{"id": "eqasc_validation_70", "prediction": "all x.(AquaticAnimal(x) -> MovesThroughWater(x))", "score": 0}
{"id": "eqasc_validation_70", "prediction": "all x y.((AquaticAnimal(x) & Water(y) & MovesThrough(x,y)) -> AerodynamicsPrinciples(x,y))", "score": 0}
{"id": "eqasc_validation_70", "prediction": "all x y z.((AquaticAnimal(x) & AquaticTour(y) & Water(z) & MovesThrough(x,y,z)) -> AerodynamicsPrinciples(x))", "score": 0}
{"id": "eqasc_validation_70", "prediction": "all x.((AquaticAnimal(x) & MovementThroughWater(x)) -> AerodynamicPrinciples(x))", "score": 0}
{"id": "eqasc_validation_70", "prediction": "all x.((AquaticAnimal(x) & MovingThroughWater(x)) -> Aerodynamics(x))", "score": 0}
{"id": "eqasc_validation_70", "prediction": "all x.((AquaticAnimal(x) & MovesThroughWater(x)) -> AerodynamicsPrinciples(x))", "score": 0}
{"id": "eqasc_validation_70", "prediction": "all x.(AquaticAnimal(x) -> (MovingThroughWater(x) & Aerodynamics(x)))", "score": 0}
{"id": "eqasc_validation_70", "prediction": "all x.((AquaticAnimal(x) & MovingThroughWater(x)) -> AerodynamicsPrinciples(x))", "score": 0}
{"id": "eqasc_validation_70", "prediction": "all x.((AquaticAnimal(x) & MovesThroughWater(x)) -> AerodynamicPrinciples(x))", "score": 0}
{"id": "eqasc_validation_70", "prediction": "all x y.((AquaticAnimal(x) & Water(y)) -> (ProteinToAirdynamics(x,y)))", "score": 0}
{"id": "eqasc_validation_70", "prediction": "all x y z.((AquaticAnimal(x) & Water(y) & Airdynamics(z)) -> Migrating(x,y,z))", "score": 0}
{"id": "eqasc_validation_70", "prediction": "all x.(AquaticAnimal(x) -> (MovingThroughWater(x) & Aerobety(x)))", "score": 0}
{"id": "eqasc_validation_70", "prediction": "all x.((AquaticAnimal(x) & MovingThroughWater(x)) -> Aerodynamic(x))", "score": 0}
{"id": "eqasc_validation_71", "prediction": "all x.(Cnidarian(x) -> MovesThroughWater(x))", "score": 0}
{"id": "eqasc_validation_72", "prediction": "all x.(Scyphozoan(x) -> (NextCnidarian(x) & Jerkfish(x)))", "score": 0}
{"id": "eqasc_validation_72", "prediction": "all x.(Scyphozoan(x) -> (BeforeCnidarians(x) & Jellyfish(x)))", "score": 0}
{"id": "eqasc_validation_72", "prediction": "all x.(Scyphozoans(x) -> (NextGroup(x,Cnidarian) & TameJellyfish(x)))", "score": 0}
{"id": "eqasc_validation_72", "prediction": "all x.(Scyphozoan(x) -> (NextGroupOfCnidarians(x) & SameJoeyfish(x)))", "score": 0}
{"id": "eqasc_validation_72", "prediction": "all x.(Cnidarian(x) -> (Scyphozoans(x) & Jellyfish(x)))", "score": 0}
{"id": "eqasc_validation_72", "prediction": "(NextGenre(Scyphozoans) & Cnidarian(s) & Penelope(z))", "score": 0}
{"id": "eqasc_validation_72", "prediction": "all x.((Scyphozoan(x) & Cnidarian(x)) -> (FamiliarJellyfish(x) & NextGenreOf(x,Cnidarian(x)))", "score": -1}
{"id": "eqasc_validation_72", "prediction": "(NextGroupOfCnidarians(Schyphozoans) & Jellyfish(Symbols))", "score": 0}
{"id": "eqasc_validation_72", "prediction": "all x.(Scyphozoan(x) -> (NextCnidarian(x) & FamiliarJellyfish(x)))", "score": 0}
{"id": "eqasc_validation_72", "prediction": "all x y.((Cnidarian(x) & Scyphozoan(y)) -> (NextGroup(x,y) & AfamiliarJellyfish(x)))", "score": 0}
{"id": "eqasc_validation_72", "prediction": "all x.(Syncyphozoan(x) -> (Petitarian(x) & Cnidarian(x) & Familiar(x)))", "score": 0}
{"id": "eqasc_validation_72", "prediction": "all x.(Scyphozoan(x) -> (NextGroupOfCnidarians(x) & Jellyfish(x)))", "score": 0}
{"id": "eqasc_validation_72", "prediction": "all x.(Scyphozoa(x) -> (Cnidarians(x) & Jellyfish(x)))", "score": 0}
{"id": "eqasc_validation_72", "prediction": "all x.(Scyphozos (Cnidarian(x) & Cnidarian(x)) -> NewGenreAndFamousJellyfish(x))", "score": -1}
{"id": "eqasc_validation_72", "prediction": "(NextCnidarian(Scyphozoan) -> (LikeCnidarian(Scyphozoan) & FamiliarJellyfish(Scyphozoan)))", "score": 0}
{"id": "eqasc_validation_72", "prediction": "all x.(Cnidarian(x) -> Scyphozoan(x))", "score": 0}
{"id": "eqasc_validation_73", "prediction": "all x.(Scyphozoan(x) -> AquaticOrganism(x))", "score": 0}
{"id": "eqasc_validation_73", "prediction": "all x y z.((Scyphozoan(x) & AquaticOrganism(y) & Seafood(z)) -> AquaticOrganism(x))", "score": 0}
{"id": "eqasc_validation_73", "prediction": "AllergicTo(Scyphozoan(Sydney) -> AquaticOrganism(Scyphozoan))", "score": -1}
{"id": "eqasc_validation_74", "prediction": "all x.(Cnidarian(x) -> HydrostaticSkeleton(x))", "score": 0}
{"id": "eqasc_validation_74", "prediction": "all x.(Cnidarian(x) -> HasHydrostaticSkeleton(x))", "score": 0}
{"id": "eqasc_validation_74", "prediction": "all x.(Cnidarian(x) -HasHydrostaticSkeleton(x))", "score": -1}
{"id": "eqasc_validation_74", "prediction": "all x.(Candidarian(x) -> HydrostaticSkeleton(x))", "score": 0}
{"id": "eqasc_validation_75", "prediction": "exists x.(AquaticAnimal(x) & HasHydrostaticSkeleton(x))", "score": 0}
{"id": "eqasc_validation_75", "prediction": "exists x.(AquaticAnimal(x) & HydrostaticSkeleton(x))", "score": 0}
{"id": "eqasc_validation_75", "prediction": "exists x.(AquaticAnimal(x) & HydrastaticSkeleton(x))", "score": 0}
{"id": "eqasc_validation_76", "prediction": "all x y.((Weather(x) & Weater(y)) -> PredictsRequiresStudying(x,y))", "score": 0}
{"id": "eqasc_validation_76", "prediction": "all x y z.((Weather(x) & Weater(y) & Weather(z)) -> PredictsRequiresStudying(x,y,z))", "score": 0}
{"id": "eqasc_validation_76", "prediction": "all x y.((WeatherPrediction(x) & Weater(y)) -> RequiresStudying(x,y))", "score": 0}
{"id": "eqasc_validation_76", "prediction": "all x y.((Weather(x) & Weater(y)) -> (Predicts(x,y) & Studies(y,z)))", "score": 0}
{"id": "eqasc_validation_76", "prediction": "all x y.((Weather(x) & Weather(y)) -> PredictionRequiresStudyingWeater(x,y))", "score": 0}
{"id": "eqasc_validation_76", "prediction": "all x y.((Weather(x) & Weater(y)) -> (RequiresStudying(x,y) & PredictsWeather(x)))", "score": 0}
{"id": "eqasc_validation_76", "prediction": "all x y z.((WeatherMinimum(x) & Weater(y) & Weather(z) & CurrentlyStudying(x,y)) -> PredictsRequiresTracing(x,z))", "score": 0}
{"id": "eqasc_validation_76", "prediction": "all x y.((Weather(x,y) & Weater(y)) -> PredictsRequiresStudying(x,y))", "score": 0}
{"id": "eqasc_validation_76", "prediction": "all x y.((PredictingWeather(x) & Weater(y)) -> RequiresStudying(y,x))", "score": 0}
{"id": "eqasc_validation_76", "prediction": "all x.(PositiveWeather(x) -> RequiresStudyingWeater(x))", "score": 0}
{"id": "eqasc_validation_76", "prediction": "all x.(DeepingWeather(x) -> Weater(x))", "score": 0}
{"id": "eqasc_validation_76", "prediction": "all x y.((Weather(x) & Weater(y)) -> PredictedAndStudying(x))", "score": 0}
{"id": "eqasc_validation_76", "prediction": "all x.(WeatherPrediction(x) -> (StudiesWeater(x) & PredictsWeather(x)))", "score": 0}
{"id": "eqasc_validation_76", "prediction": "all x y.((Weather(x) & Weater(y)) -> PrestoriesRequiresStudying(y,x))", "score": 0}
{"id": "eqasc_validation_76", "prediction": "all x.(PredictionSnowwetter(x) -> (StudiesWeater(x) & PredictsWeather(x)))", "score": 0}
{"id": "eqasc_validation_77", "prediction": "exists x.(Mechatronologist(x) & PredictsWeather(x))", "score": 0}
{"id": "eqasc_validation_77", "prediction": "all x.(Meteorologist(x) -> PredictsWeather(x))", "score": 0}
{"id": "eqasc_validation_77", "prediction": "all x y.((Meteorologist(x) & Weather(y)) -> MakesPrediction(x,y))", "score": 0}
{"id": "eqasc_validation_77", "prediction": "all x y.((Meteorologist(x) & Weather(y)) -> Predicts(x,y))", "score": 0}
{"id": "eqasc_validation_77", "prediction": "all x.(Meteorologist(x) -> (PredictsWeather(x) & MeasuresWeather(x)))", "score": 0}
{"id": "eqasc_validation_77", "prediction": "all x y.((Meteorologist(x) & Weather(y) & TryTreatsPredicting(x,y)) -> Assesses(x,y))", "score": 0}
{"id": "eqasc_validation_77", "prediction": "all x y.((Meteorologist(x) & Weather(y)) -> (TryToPredict(x,y) | (TryToPredict(x,y) | Predict(x,y)))))", "score": -1}
{"id": "eqasc_validation_77", "prediction": "all x.(Meteorologist(x) -> CanPredictWeather(x))", "score": 0}
{"id": "eqasc_validation_77", "prediction": "all x y z.((Meteorologist(x) & Weather(y) & Weather(z) & PredictMeasure(x,y,z)) -> TrysTo(x,y,z))", "score": 0}
{"id": "eqasc_validation_77", "prediction": "all x y.((Meteorologist(x) & Weather(y)) -> (Predicts(x,y) | Predicts(x)))", "score": 0}
{"id": "eqasc_validation_78", "prediction": "all x.(Meteorologist(x) -> StudiesWeather(x))", "score": 0}
{"id": "eqasc_validation_78", "prediction": "all x.(Meteorologist(x) -> RequiresStudyingWeather(x))", "score": 0}
{"id": "eqasc_validation_78", "prediction": "all x.(Meteorologist(x) -> RecognizesWeather(x))", "score": 0}
{"id": "eqasc_validation_78", "prediction": "all x.(Mettoologist(x) -> RequiresStudyingWeather(x))", "score": 0}
{"id": "eqasc_validation_78", "prediction": "all x.(Meteorologist(x) -> StudiesWeatherRequirements(x))", "score": 0}
{"id": "eqasc_validation_78", "prediction": "all x.(Meteorologue(x) -> RequiresStudyingWeather(x))", "score": 0}
{"id": "eqasc_validation_78", "prediction": "all x.((Meteorologist(x) & Weather(y)) -> RequiresStudying(x,y))", "score": 0}
{"id": "eqasc_validation_79", "prediction": "all x.(Meteorologist(x) -> StudiesWeather(x))", "score": 0}
{"id": "eqasc_validation_79", "prediction": "all x y z.((Meteorologist(x) & Weather(y) & Weather(z)) -> Studies(x,y,z))", "score": 0}
{"id": "eqasc_validation_79", "prediction": "all x y.((Meteorologist(x) & Weather(y)) -> Studies(x,y))", "score": 0}
{"id": "eqasc_validation_80", "prediction": "all x y z.((Meteorologist(x) & Weather(y) & Weather(z)) -> Studies(x,y,z))", "score": 0}
{"id": "eqasc_validation_80", "prediction": "all x y.((Meteorologist(x) & Weather(y)) -> Studies(x,y))", "score": 0}
{"id": "eqasc_validation_80", "prediction": "all x.(Meteorologist(x) -> StudiesWeather(x))", "score": 0}
{"id": "eqasc_validation_80", "prediction": "all x y.((Meteorologist(x) & Weather(y)) -> StudiesWeather(x,y))", "score": 0}
{"id": "eqasc_validation_80", "prediction": "all x y z.((Meteorologist(x) & Weather(y) & Weather(z)) -> Studies(x,y))", "score": 0}
{"id": "eqasc_validation_80", "prediction": "all x.(Meteorologist(x) & StudiesWeather(x))", "score": 0}
{"id": "eqasc_validation_80", "prediction": "all x y z.((Meteorologist(x) & Weather(y) & Weather(z)) -> StudiesAndStudies(x,y,z))", "score": 0}
{"id": "eqasc_validation_81", "prediction": "all x.(Meteorologist(x) -> (StudiesWeather(x) | PredictionsWeather(x)))", "score": 0}
{"id": "eqasc_validation_81", "prediction": "all x.(Meteorologist(x) -> (StudiesWeather(x) | PredictsWeather(x)))", "score": 0}
{"id": "eqasc_validation_81", "prediction": "all x.((Meteorologist(x) & StudiesOrPredictsWeather(x)) -> Meteorologist(x))", "score": 0}
{"id": "eqasc_validation_81", "prediction": "all x.(Meteorologist(x) -> StudiesOrPredictsWeather(x))", "score": 0}
{"id": "eqasc_validation_81", "prediction": "all x.(Meteorologist(x) -> (StudiesWeather(x) | ForecastsWeather(x)))", "score": 0}
{"id": "eqasc_validation_81", "prediction": "all x.(Meteorologist(x) -> (StudiesOrPredictsWeather(x)))", "score": 0}
{"id": "eqasc_validation_82", "prediction": "all x.(Meteorology(x) -> RequiresStudyingWeather(x))", "score": 0}
{"id": "eqasc_validation_82", "prediction": "all x.(Meteorologist(x) -> (RequiresStudyingWeather(x) & Weather(x)))", "score": 0}
{"id": "eqasc_validation_82", "prediction": "all x y z.((Meteorology(x) & Weather(y) & Weather(z)) -> RequiresStudying(x,y,z))", "score": 0}
{"id": "eqasc_validation_82", "prediction": "all x.(MeteodologyRequiresStudyingWeather(x) -> MeteorologyRequiresStudyingWeather(x))", "score": 0}
{"id": "eqasc_validation_82", "prediction": "all x y z.((Meteorology(x) & Weather(z)) -> RequiresStudying(x,y,z))", "score": 0}
{"id": "eqasc_validation_82", "prediction": "all x.(MeteorotologyRequiresStudyingWeather(x) -> MeteorologyRequiresStudyingWeather(x))", "score": 0}
{"id": "eqasc_validation_82", "prediction": "all x.(MeteoorologyRequiresStudyingWeather(x) -> MeteorologyRequiresStudyingWeather(x))", "score": 0}
{"id": "eqasc_validation_82", "prediction": "all x y.((Meteorology(x) & Weather(y)) -> RequiresStudying(x,y))", "score": 0}
{"id": "eqasc_validation_82", "prediction": "all x.(MeteorologyRequiresStudyingWeather(x) -> StudiesWeather(x))", "score": 0}
{"id": "eqasc_validation_82", "prediction": "all x y z.((Meteoroology(x) & Weather(y),z)) -> Recrute(z))", "score": -1}
{"id": "eqasc_validation_82", "prediction": "all x.(Meteorology(x) -> (RequiresStudyWetter(x) & Weather(w) & RequiresStudyingWeather(x)))", "score": 0}
{"id": "eqasc_validation_82", "prediction": "meteorology(météorology) requirmentsstudiesweather(météorology) -> RequiresStudyingWeather(météorology,météorology))", "score": -1}
{"id": "eqasc_validation_82", "prediction": "all x y.((Meteorological(x) & Weather(y)) -> RequiresStuding(x))", "score": 0}
{"id": "eqasc_validation_83", "prediction": "all x.(Meteorologist(x) -> RequiresStudyingWeather(x))", "score": 0}
{"id": "eqasc_validation_83", "prediction": "all x y.((Meteorologist(x) & Weather(y)) -> RequiresStudyingWinter(x,y))", "score": 0}
{"id": "eqasc_validation_83", "prediction": "all x y.((Meteorologist(x) & Weather(y)) -> RequiresStudying(x,y))", "score": 0}
{"id": "eqasc_validation_83", "prediction": "all x.(Meteorologist(x) -> InvolvesStudyingWeather(x))", "score": 0}
{"id": "eqasc_validation_83", "prediction": "all x.(Meteorologist(x) -> (RequiresStudyingWeather(x) & Weather(x) & Weather(x)))", "score": 0}
{"id": "eqasc_validation_83", "prediction": "all x y z.((Meteorologist(x) & Weather(y) & Weather(z)) -> RequiresStudying(x,y,z))", "score": 0}
{"id": "eqasc_validation_83", "prediction": "all x.(Meteorologist(x) -> (RequiresStudyingWeather(x) & StudyingWeather(x)))", "score": 0}
{"id": "eqasc_validation_83", "prediction": "all x y.((Meteorologist(x) & Weather(y)) -> RequiresStudyingWeather(x,y))", "score": 0}
{"id": "eqasc_validation_84", "prediction": "all x.(Meteorologist(x) -> (StudiesWeatherConditions(x) & PreparesPrevisions(x) & ReachesLongRange(x)))", "score": 0}
{"id": "eqasc_validation_84", "prediction": "all x y.((Meteorologist(x) & WeatherCondition(y)) -> (Studies(x,y) & PreparesWetter(x,z)))", "score": 0}
{"id": "eqasc_validation_84", "prediction": "all x y z.((Meteorologist(x) & WeatherCondition(y) & Weather(z) & CurrentAndLongRange(x,y)) -> StudiesAndPrepares(x,z))", "score": 0}
{"id": "eqasc_validation_84", "prediction": "all x y.((Meteorologist(x) & WeatherCondition(y)) -> (Studies(x,y) & Prepares(x,y)))", "score": 0}
{"id": "eqasc_validation_84", "prediction": "all x.(Meteorologist(x) -> (StudiesWeatherConditions(x) & PreparesWeatherPredictions(x)))", "score": 0}
{"id": "eqasc_validation_84", "prediction": "all x.(Meteorologist(x) -> (StudiesWeatherConditions(x) & PreparesWeatherPredictions(x) & PresentAndLongRange(x)))", "score": 0}
{"id": "eqasc_validation_84", "prediction": "all x.((Meteorologist(x) & StudyWeatherConditions(x) & PrepareWeatherPredictions(x)) -> (ReleasesWeather(x) & UnderstandsWeatherConditions(x) & PreparesWeatherPredictions(x)))", "score": 0}
{"id": "eqasc_validation_84", "prediction": "all x y z.((Meteorologist(x) & WeatherCondition(y) & Weather(z)) -> (Study(x,y) & Prepare(x,z)))", "score": 0}
{"id": "eqasc_validation_84", "prediction": "all x.(Meteorologist(x) -> (StudiesWeatherConditions(x) & PreparesLengthRangeWeatherPredictions(x)))", "score": 0}
{"id": "eqasc_validation_84", "prediction": "all x y.((Meteorologist(x) & WeatherCondition(y)) -> (Studies(x,y) & PreparesWeatherPredictions(x,y)))", "score": 0}
{"id": "eqasc_validation_85", "prediction": "all x.(PredictingWeather(x) -> (PreparesWeatherPredictions(x) & PreparesWeatherPredictions(x)))", "score": 0}
{"id": "eqasc_validation_85", "prediction": "all x.(PredictingWeather(x) -> (PreparesCurrentAndLongRangeWeatherPredictions(x)))", "score": 0}
{"id": "eqasc_validation_85", "prediction": "all x.((PredictingWeather(x) & PreparingMuchLongRangeAndCompleteWeeklyPredictions(x)) -> PredictsWeather(x))", "score": 0}
{"id": "eqasc_validation_85", "prediction": "all x y.((PredictingWeather(x) & WeatherBeat(y)) -> Prepares(x,y))", "score": 0}
{"id": "eqasc_validation_85", "prediction": "all x y.((WeatherOrder(x) & CurrentAndLongRange(y)) -> Predicts(x,y))", "score": 0}
{"id": "eqasc_validation_85", "prediction": "all x.(PredictingWeather(x) -> PreparesWarmPredictions(x,currentOfRange(x))", "score": -1}
{"id": "eqasc_validation_85", "prediction": "all x.((PredictingWeather(x) & PreparesTerminaryPredictions(x)) -> PredictsWeather(x))", "score": 0}
{"id": "eqasc_validation_85", "prediction": "all x y.((PredictsWeather(x) & RecentAndLongRangeWeather(y)) -> RequiresPreparation(x,y))", "score": 0}
{"id": "eqasc_validation_85", "prediction": "all x y.((PredictsWeather(x) & WeatherTree(y)) -> (Prepares(x,y) & Prepares(x,y)))", "score": 0}
{"id": "eqasc_validation_85", "prediction": "all x.((PredictsWeather(x) & PreparesLongRangeWeatherPredictions(x)) -> PredictsWeather(x))", "score": 0}
{"id": "eqasc_validation_85", "prediction": "all x.(PredictingWeather(x) -> Prepares(x,current,longRange))", "score": 0}
{"id": "eqasc_validation_85", "prediction": "all x.(PredictingWeather(x) -> PrepareShortRangeAndCurrentWeatherPrediction(x))", "score": 0}
{"id": "eqasc_validation_85", "prediction": "all x.((PredictingWeather(x) & PreparingWeatherPredictions(x)) -> RequiresWarming(x,current,orLongRange))", "score": 0}
{"id": "eqasc_validation_85", "prediction": "all x y z.((PredictsWeather(x) & CurrentWeather(y) & LongRangeWeather(z)) -> PreparesWeatherPredictions(x,y,z))", "score": 0}
{"id": "eqasc_validation_85", "prediction": "all x.(PredictingWeather(x) -> (PreparesPredictableWeather(x) & PreparesLongRangeWeatherPredictions(x)))", "score": 0}
{"id": "eqasc_validation_85", "prediction": "all x.(PredictingWeather(x) -> (PreparesCourseTimeAndLongRangeWeatherPredictions(x)))", "score": 0}
{"id": "eqasc_validation_86", "prediction": "all x.(IntroductionToWeather(x) -> (StudyOfWeather(x) | StudyOfWeather(x)))", "score": 0}
{"id": "eqasc_validation_86", "prediction": "all x.(IntroductionToWeather(x) -> ScientistOfWeather(x))", "score": 0}
{"id": "eqasc_validation_86", "prediction": "all x.(IntroductionToWeather(x) -> (IntroductionToWeatherMeteorology(x) & StudiesWeather(x)))", "score": 0}
{"id": "eqasc_validation_86", "prediction": "all x y.((IntroductionToWeather(x) & Meteorology(y)) -> StudiesWeather(x))", "score": 0}
{"id": "eqasc_validation_86", "prediction": "all x.(IntroductionToWeather(x) -> StudiesWeather(x))", "score": 0}
{"id": "eqasc_validation_86", "prediction": "all x y.((IntroductionToWeather(x) & IntroductionToWeatherMeteorology(y)) -> StudiesWeather(y))", "score": 0}
{"id": "eqasc_validation_86", "prediction": "all x.((IntroductionToWeather(x) & WeatherMeteorology(x)) -> StudiesWeather(x))", "score": 0}
{"id": "eqasc_validation_86", "prediction": "IntroductionToWeather(IntroductionToWeatherMeteorology(IntroductionToWeather(IntroductionToWeather(introductiontoweather))", "score": -1}
{"id": "eqasc_validation_86", "prediction": "all x y.((IntroductionToWeather(x) & WeatherMeteorology(y)) -> StudyOfWeather(x,y))", "score": 0}
{"id": "eqasc_validation_86", "prediction": "all x y z.((InstructionToWeather(x) & Weather(y) & Weather(z)) -> (StudyOfWeather(x) & StudiesWeather(x,z)))", "score": 0}
{"id": "eqasc_validation_86", "prediction": "all x.((WallIntroduction(x) & WeatherMeteorology(x)) -> StudiesWeather(x))", "score": 0}
{"id": "eqasc_validation_86", "prediction": "ALL x y.((Introduction(x) & Weather(y)) -> (IntroductionTo(x,y) & WeatherMeteorology(x)))", "score": -1}
{"id": "eqasc_validation_86", "prediction": "all x.((IntroductionToWeather(x) & IntroductionToWeatherMeteorology(x)) -> StudiesWeather(x))", "score": 0}
{"id": "eqasc_validation_86", "prediction": "all x y.((IntroductionToWeather(x) & WeatherMeteorology(y)) -> StudiesWeather(x,y))", "score": 0}
{"id": "eqasc_validation_86", "prediction": "all x y.((Word(x) & Weather(y)) -> Interacts(x,y))", "score": 0}
{"id": "eqasc_validation_86", "prediction": "all x y z.((IntroductionToWeather(x) & IntroductionToWeatherMeteorology(y) & Weather(z)) -> StudyOfWeather(x))", "score": 0}
{"id": "eqasc_validation_87", "prediction": "all x y z.((Weather(x) & Meteorology(y) & Weather(z)) -> Predicts(x,z))", "score": 0}
{"id": "eqasc_validation_87", "prediction": "all x y.((Weather(x) & Meteorology(y)) -> Requires(x,y))", "score": 0}
{"id": "eqasc_validation_87", "prediction": "all x ((Meteorology(x) & Prediction(x,weather)) -> RequiresMeteorology(x))", "score": 0}
{"id": "eqasc_validation_87", "prediction": "all x y z.((Weather(x) & Meteorology(y) & Weather(z)) -> PredictsRequires(x,y))", "score": 0}
{"id": "eqasc_validation_87", "prediction": "all x y.((Tree(x) & Weather(y)) -> PredictsRequiresMeteorology(x,y))", "score": 0}
{"id": "eqasc_validation_87", "prediction": "all x y.((Waiting(x) & Meteorology(y)) -> Predicts(x,y))", "score": 0}
{"id": "eqasc_validation_87", "prediction": "all x.((Weather(x) & Meteorology(x)) -> Requires(x,Meteorology))", "score": 0}
{"id": "eqasc_validation_87", "prediction": "all x.(PredictingWeather(x) -> RequiresMeteorology(x))", "score": 0}
{"id": "eqasc_validation_87", "prediction": "all x y.((Weather(x) & Meteorology(y)) -> PredictsRequires(x,y))", "score": 0}
{"id": "eqasc_validation_87", "prediction": "all x.((WeatherPrediction(x) & WeatherRequiresMeteodology(x)) -> Predicts(x,Weather))", "score": 0}
{"id": "eqasc_validation_87", "prediction": "Using Meteorology (predictsWeather(x) & RequiresMeteorology(x))", "score": -1}
{"id": "eqasc_validation_87", "prediction": "all x y z.((Weather(x) & Meteodology(y) & Weather(z)) -> Requires(x,y))", "score": 0}
{"id": "eqasc_validation_87", "prediction": "Generally speaking, forecastingWeatherRequiresMeteorology(x) & RequiresMeteorology(x))", "score": -1}
{"id": "eqasc_validation_87", "prediction": "all x y.((Weather(x) & Weather(y)) -> RequiresMeteorologyRequires(x,y))", "score": 0}
{"id": "eqasc_validation_88", "prediction": "all x.(Meteorologist(x) -> (StudiesWeather(x) & StudiesWeather(x)))", "score": 0}
{"id": "eqasc_validation_88", "prediction": "all x.(Meteorologist(x) -> StudiesWeather(x))", "score": 0}
{"id": "eqasc_validation_88", "prediction": "all x.(Meteorologist(x) -> (StudyWeather(x) & StudyWeather(x)))", "score": 0}
{"id": "eqasc_validation_88", "prediction": "all x.(METeorologist(x) -> StudyWeather(x))", "score": 0}
{"id": "eqasc_validation_88", "prediction": "all x.(Meteorologist(x) -> StudyWeather(x))", "score": 0}
{"id": "eqasc_validation_88", "prediction": "all x y.((Meteorologist(x) & Weather(y)) -> Studies(x,y))", "score": 0}
{"id": "eqasc_validation_88", "prediction": "all x.(Meteorologist(x) -> (StudyWeather(x) | StudyWeather(x)))", "score": 0}
{"id": "eqasc_validation_88", "prediction": "all x.(Meteorologist(x) -> (StudiesWeather(x) | StudiesWeather(x)))", "score": 0}
{"id": "eqasc_validation_89", "prediction": "all x y z.((Weather(x) & Meteorologist(y) & Weather(z)) -> RequiresProvides(y,z))", "score": 0}
{"id": "eqasc_validation_89", "prediction": "all x y z.((Meteorologist(x) & Weather(y) & Weather(z)) -> (Requires(x,y) & Requires(x,z)))", "score": 0}
{"id": "eqasc_validation_89", "prediction": "all x.((PredictingWeather(x) & RequiresMeteorologists(x)) -> MeteorologistRequires(x))", "score": 0}
{"id": "eqasc_validation_89", "prediction": "all x.((PredictingWeather(x) & Meteorologists(x)) -> Requires(x,Meteoorologists))", "score": 0}
{"id": "eqasc_validation_89", "prediction": "all x y.((Weather(x) & Meteorologist(y)) -> Predicts(y,x))", "score": 0}
{"id": "eqasc_validation_89", "prediction": "all x.(PrognosingWeather(x) -> RequiresMeteorologists(x))", "score": 0}
{"id": "eqasc_validation_89", "prediction": "all x.(PredictingWeather(x) -> RequiresMeteorologists(x))", "score": 0}
{"id": "eqasc_validation_89", "prediction": "all x y.((Meteoologist(x) & Weather(y) & Predicts(x,y)) -> Requires(x,y))", "score": 0}
{"id": "eqasc_validation_89", "prediction": "all x y z.((Weather(x) & Meteorologist(y) & Meteorologist(z)) -> Predicts(y,x))", "score": 0}
{"id": "eqasc_validation_89", "prediction": "all x y.((Wetter(x) & Meteorologist(y)) -> Predicts(x,y))", "score": 0}
{"id": "eqasc_validation_89", "prediction": "all x y.((Weather(x) & Meteorologist(y)) -> Requires(y,x))", "score": 0}
{"id": "eqasc_validation_89", "prediction": "all x y.((Prove Weather(x) & Meteorologist(y)) -> (Requires(y,x) & PredictsWeather(y)))", "score": -1}
{"id": "eqasc_validation_89", "prediction": "all x y.((Wetter(x) & Meteorologist(y)) -> Requires(y,x))", "score": 0}
{"id": "eqasc_validation_89", "prediction": "all x y z.((Weather(x) & Meteorologist(y) & Weather(z)) -> Predicts(x,y,z))", "score": 0}
{"id": "eqasc_validation_90", "prediction": "all x.(KnowledgeOfStars(x) -> NavigatesStars(x))", "score": 0}
{"id": "eqasc_validation_90", "prediction": "all x y.((KnowledgeOfStars(x) & KnowledgeOfStars(x)) -> NavigateAtStars(y))", "score": 0}
{"id": "eqasc_validation_90", "prediction": "all x.(KnowledgeOfStars(x) -> Navigate(x))", "score": 0}
{"id": "eqasc_validation_90", "prediction": "all x y z.((Star(x) & Knowledge(y) & Stars(z)) -> NavigatesUsing(x,y,z))", "score": 0}
{"id": "eqasc_validation_90", "prediction": "all x y.((Knowledge(x) & Star(y)) -> Navigates(x,y))", "score": 0}
{"id": "eqasc_validation_90", "prediction": "all x y.((KnowledgeOfStars(x) & NavigatingStars(y)) -> CanBeUsedToNavigateStars(x,y))", "score": 0}
{"id": "eqasc_validation_90", "prediction": "all x y.((KnowledgeOfStars(x) & NavigatesStars(y)) -> CanBeUsedToNavigateStars(x,y))", "score": 0}
{"id": "eqasc_validation_90", "prediction": "all x y z.((Shore(x) & Star(y) & KnowledgeOf(x,y)) -> CanNavigate(x,y))", "score": 0}
{"id": "eqasc_validation_90", "prediction": "all x.((Knowledge(x) & KnowledgeOfStars(x)) -> Navigates(x))", "score": 0}
{"id": "eqasc_validation_90", "prediction": "all x.((KnowledgeOfStars(x) & NavigatesStars(x)) -> CanBeUsedForNavigation(x))", "score": 0}
{"id": "eqasc_validation_90", "prediction": "all x.(CourageAware(x) -> (With StarsKnowledge(x) & NavigateAware(x)))", "score": -1}
{"id": "eqasc_validation_90", "prediction": "all x y.((Knowledge(x) & Stars(y)) -> Navigates(x,y))", "score": 0}
{"id": "eqasc_validation_90", "prediction": "all x y.((KnowledgeOfStars(x) & UsesToNavigateStars(y)) -> NavigateStars(x,y))", "score": 0}
{"id": "eqasc_validation_90", "prediction": "all x.((KnowledgeOfStars(x) & NavigateWithStars(x)) -> CanNavigateWithStars(x))", "score": 0}
{"id": "eqasc_validation_90", "prediction": "all x.((KnowledgeOfStars(x) & NavigatesStars(x)) -> CanBeUsedFor(x,compass))", "score": 0}
{"id": "eqasc_validation_91", "prediction": "all x y z.((Astronomy(x) & Planet(y) & Star(z)) -> (Study(x,y,z) & Study(x,z)))", "score": 0}
{"id": "eqasc_validation_91", "prediction": "all x.(Astronomy(x) -> (StudiesPlanets(x) & StudiesStars(x) & StudiesUniverse(x)))", "score": 0}
{"id": "eqasc_validation_91", "prediction": "all x y z.((Astronomy(x) & Planet(y) & Star(z)) -> StudyOf(x,y,z))", "score": 0}
{"id": "eqasc_validation_91", "prediction": "all x y.((Astronomy(x) & Planet(y)) -> (Studies(x,y) & Studies(x,y) & Studies(x,z) & StudyOf(x,z)))", "score": 0}
{"id": "eqasc_validation_91", "prediction": "all x y z.((Rainforest(x) & Planet(y) & Star(z)) -> (Studies(x,y) & Studies(x,z)))", "score": 0}
{"id": "eqasc_validation_91", "prediction": "all x.(Astronomy(x) -> (DiscoversPlanets(x) & StudiesStars(x) & StudiesUniverse(x)))", "score": 0}
{"id": "eqasc_validation_91", "prediction": "all x.(Astronomy(x) -> (StudyOfPlanets(x) & StudiesStars(x) & StudiesUniverse(x)))", "score": 0}
{"id": "eqasc_validation_91", "prediction": "all x y z.((Astronomy(x) & Planets(y) & Stars(z)) -> Studies(x,y,z))", "score": 0}
{"id": "eqasc_validation_91", "prediction": "all x.(Astronomy(x) -> (StudyOfPlanets(x) | StudyOnStars(x) | StudyOfUniverse(x)))", "score": 0}
{"id": "eqasc_validation_92", "prediction": "all x y.((Astronomy(x) & Navigate(y)) -> (CanBeUsed(x,y) & Navigate(x,y)))", "score": 0}
{"id": "eqasc_validation_92", "prediction": "all x.(Astronomy(x) -> (Neighboring(x) & Navigates(x) & UsesAstronomy(x)))", "score": 0}
{"id": "eqasc_validation_92", "prediction": "all x y.((Astronomy(x) & Navigate(y)) -> (Navigate(x,y) | Navigate(x,y)))", "score": 0}
{"id": "eqasc_validation_92", "prediction": "all x y.((Astronomy(x) & Navigate(y)) -> (CanBeUsedToNavigate(x,y) & Navigate(x,y)))", "score": 0}
{"id": "eqasc_validation_92", "prediction": "all x.(Astronomy(x) -> Navigates(x))", "score": 0}
{"id": "eqasc_validation_92", "prediction": "all x y z.((Astronomy(x) & Navigating(y) & Navigates(z) & Using(x,y)) -> CanBeUsedTo(x,z))", "score": 0}
{"id": "eqasc_validation_92", "prediction": "all x.(Astronomy(x) -> EasilyNavigates(x))", "score": 0}
{"id": "eqasc_validation_92", "prediction": "all x y z.((Astronomy(x) & Navigates(y) & Astronomy(z)) -> (CanBeUsedToNavigate(x,y) & Navigate(z)))", "score": 0}
{"id": "eqasc_validation_92", "prediction": "all x y.((Astronomy(x) & Navigate(y)) -> CanBeUsedToNavigate(x))", "score": 0}
{"id": "eqasc_validation_92", "prediction": "all x y.((Astronomy(x) & Uses(x,y) & Navigates(x,y)) -> UserActive(x))", "score": 0}
{"id": "eqasc_validation_92", "prediction": "all x y.((Astronomy(x) & Navigates(y)) -> CanBeUsedToNavigate(x,y))", "score": 0}
{"id": "eqasc_validation_92", "prediction": "all x.(Astronomy(x) -> (CanBeUsedToNavigate(x) | WeAdvisor(x)))", "score": 0}
{"id": "eqasc_validation_92", "prediction": "all x.(Astronomy(x) -> (CanNavigate(x) & CanNavigate(x)))", "score": 0}
{"id": "eqasc_validation_92", "prediction": "all x y.((Astronomy(x) & Navigating(y)) -> CanBeUsedTo(x,y))", "score": 0}
{"id": "eqasc_validation_92", "prediction": "all x.(Astronomy(x) -> (Traveler(x) & Navigate(x)))", "score": 0}
{"id": "eqasc_validation_93", "prediction": "all x.(Map(x) & Navigation(x) -> TravelEssential(x))", "score": 0}
{"id": "eqasc_validation_93", "prediction": "all x.(MapsAndNavigation(x) -> (EssentialToTravel(x) & OnRoad(x) & OffRoad(x)))", "score": 0}
{"id": "eqasc_validation_93", "prediction": "all x.(MapsAndNavigation(x) -> (GoodMaps(x) & EssentialToTravel(x)))", "score": 0}
{"id": "eqasc_validation_93", "prediction": "all x.(GoodMap(x) -> (OffRoad(x) | OnRoad(x)))", "score": 0}
{"id": "eqasc_validation_93", "prediction": "all x.(GoodMap(x) -> (TravelsOnRoad(x) | TravelsOffRoad(x)))", "score": 0}
{"id": "eqasc_validation_93", "prediction": "all x.(Maps(x) & Navigation(x) & EssentialToTravel(x))", "score": 0}
{"id": "eqasc_validation_93", "prediction": "all x.((Maps(x) | Navigation(x)) -> (ImmerativeToTravel(x) & OnRoad(x) & OffRoad(x)))", "score": 0}
{"id": "eqasc_validation_93", "prediction": "all x.(Maps(x) & Navigation(x)) | (OnRoad(x) & OffRoad(x))))", "score": -1}
{"id": "eqasc_validation_93", "prediction": "all x.(GatherMapsAndNavigation(x) -> (EssentialToTravel(x) & OnAndOffRoad(x)))", "score": 0}
{"id": "eqasc_validation_93", "prediction": "all x.(Map(x) -> (GoodMap(x) & EssentialToTravel(x)))", "score": 0}
{"id": "eqasc_validation_93", "prediction": "all x y.((Map(x) & Navigation(y) & OnRoad(x) & OffRoad(x)) -> EssentialToTravel(x,y))", "score": 0}
{"id": "eqasc_validation_93", "prediction": "all x.(Map(x) -> (GoodMap(x) & OnRoad(x) & OffRoadMap(x)))", "score": 0}
{"id": "eqasc_validation_93", "prediction": "(GoodMaps(Maps) & EssentialToTravel(Maps))", "score": 0}
{"id": "eqasc_validation_93", "prediction": "all x.(Map(x) & Navigation(x)) -> (EssentialToTravel(x) & OnRoad(x) & OffRoad(x)))", "score": -1}
{"id": "eqasc_validation_93", "prediction": "((Maps(MapPage) & NavigationMap(MapPage)) -> EASY(MapPage))", "score": 0}
{"id": "eqasc_validation_93", "prediction": "all x.(Map(x) -> (GoodPlanet(x) & EssentialToTravel(x)))", "score": 0}
{"id": "eqasc_validation_94", "prediction": "all x y.((KnowledgeOfStars(x) & Road(y) & TravelsOnOrOffRoad(x,y)) -> ReplacesMaps(x,y))", "score": 0}
{"id": "eqasc_validation_94", "prediction": "all x.((KnowledgeOfStars(x) & (TravelsOnRoad(x) | TravelsOffRoad(x)) & ReplacesMaps(x)) -> OnRoadOrOffRoadTravel(x))", "score": 0}
{"id": "eqasc_validation_94", "prediction": "all x.((KnowledgeOfStars(x) & (TravelsOnRoad(x) | TravelsOffRoad(x))) -> ReplacesMaps(x))", "score": 0}
{"id": "eqasc_validation_94", "prediction": "all x y.((KnowledgeOfStars(x) & Map(y) & (WalkingOnRoad(x) | TravelingOffRoad(x))) -> Replaces(x,y))", "score": 0}
{"id": "eqasc_validation_94", "prediction": "all x y.((KnowledgeOfStars(x) & Travel(y)) -> ReplacesMaps(x,y))", "score": 0}
{"id": "eqasc_validation_94", "prediction": "all x y z w.((Star(x) & Map(y) & (OnRoad(z) | OffRoad(w))) -> Replaces(x,y,z))", "score": 0}
{"id": "eqasc_validation_94", "prediction": "all x.((KnowledgeOfStars(x) & TravelsOnOrOffRoad(x)) -> (ReplacesMaps(x) & onOrOffRoad(x)))", "score": 0}
{"id": "eqasc_validation_94", "prediction": "all x.((KnowledgeOfStars(x) & TravelOnOrOffRoad(x)) -> ReplacesMapsWith(x,y))", "score": 0}
{"id": "eqasc_validation_94", "prediction": "all x.((KnowledgeOfStars(x) & Map(y) & (TravelOnRoad(x) | TravelOffRoad(y))) -> Replace(x,y))", "score": 0}
{"id": "eqasc_validation_94", "prediction": "all x.((KnowledgeOfStars(x) & TravelOnRoadOrOffRoad(x)) -> ReplacesMaps(x))", "score": 0}
{"id": "eqasc_validation_94", "prediction": "all x y.((KnowledgeOfStars(x) & TravelingOnRoad(y) & TravelingOffRoadWithInRoad(x)) -> ReplacesMap(x,y))", "score": 0}
{"id": "eqasc_validation_94", "prediction": "all x y.((KnowledgeOfStars(x) & (TravelingOnRecord(y) | TravelingOffRoad(y))) -> ReplacesMaps(x,y))", "score": 0}
{"id": "eqasc_validation_94", "prediction": "all x.((KnowledgeOfStars(x) & (OnRoadTravel(x) | OffRoadTravel(x))) -> ReplacesMaps(x))", "score": 0}
{"id": "eqasc_validation_94", "prediction": "all x.((KnowledgeOfStars(x) & TravelsOnRoadOrOffRoad(x)) -> ReplacesMaps(x))", "score": 0}
{"id": "eqasc_validation_94", "prediction": "all x.((KnowledgeOfStars(x) & (TravelOnRoad(x) | TravelOffRoad(x))) -> ReplaceMaps(x))", "score": 0}
{"id": "eqasc_validation_94", "prediction": "all x.((KnowledgeOfStars(x) & (ReplacesMaps(x) | TravelsOffRoad(x))) -> CanReplaceMaps(x))", "score": 0}
{"id": "eqasc_validation_95", "prediction": "all x.(Star(x) -> Constellation(x))", "score": 0}
{"id": "eqasc_validation_95", "prediction": "all x.((Star(x) & IsInConstellation(x)) -> IsDistinctConstellation(x))", "score": 0}
{"id": "eqasc_validation_95", "prediction": "all x.((Star(x) & OnceInConstellation(x)) -> InConstellation(x))", "score": 0}
{"id": "eqasc_validation_95", "prediction": "all x.(Star(x) -> InConstellation(x))", "score": 0}
{"id": "eqasc_validation_95", "prediction": "all x.(Star(x) -> exists y.(Constellation(y) & In(x,y)))", "score": 0}
{"id": "eqasc_validation_95", "prediction": "all x.((Star(x) & EverBeen(x)) -> InConstellation(x))", "score": 0}
{"id": "eqasc_validation_95", "prediction": "(all x.(Star(x) -> InConstellation(x)))", "score": 0}
{"id": "eqasc_validation_95", "prediction": "all x.((Star(x) & AsBelongsToConstellation(x)) -> InConstellation(x))", "score": 0}
{"id": "eqasc_validation_95", "prediction": "all x.((Star(x) & WasNeemOf(x)) -> InConstellation(x))", "score": 0}
{"id": "eqasc_validation_95", "prediction": "(exists x.(Star(x) & InConstellation(x)))", "score": 0}
{"id": "eqasc_validation_96", "prediction": "all x.((KnowledgeOfConstellations(x) & NavigateSignatures(x)) -> HelpsOrganizeConstellations(x))", "score": 0}
{"id": "eqasc_validation_96", "prediction": "all x.(Constellation(x) -> Navigate(x))", "score": 0}
{"id": "eqasc_validation_96", "prediction": "all x.(TestimoniesWith(x,Combinations) -> NavigatesLiving(x))", "score": 0}
{"id": "eqasc_validation_96", "prediction": "all x y.((Constellation(x) & KnowledgeOf(y,x)) -> CanBeUsedToNavigate(y,x))", "score": 0}
{"id": "eqasc_validation_96", "prediction": "all x.(KnowledgeOfConstellations(x) -> NavigateStation(x))", "score": 0}
{"id": "eqasc_validation_96", "prediction": "all x.(ConstellationsKnowledge(x) -> NavigatesNavigation(x))", "score": 0}
{"id": "eqasc_validation_96", "prediction": "all x y z.((KnowledgeOfConstellations(x) & UseOfConstellationsToNavigate(x,y) & Satellite(z)) -> CanNavigate(x))", "score": 0}
{"id": "eqasc_validation_96", "prediction": "all x.((KnowledgeOfConstellations(x) & NavigatesWith(x)) -> CanBeUsedToNavigateTo(x,Navigate,Navigate))", "score": 0}
{"id": "eqasc_validation_96", "prediction": "all x.((KnowledgeOfConstellations(x) & Navigates(x)) -> CanBeUsedToNavigate(x))", "score": 0}
{"id": "eqasc_validation_96", "prediction": "all x.(ConstellationsKnowledge(x) -> Navigate(x))", "score": 0}
{"id": "eqasc_validation_96", "prediction": "all x y.((Constellation(x) & KnowledgeOf(y,x)) -> Navigates(k))", "score": 0}
{"id": "eqasc_validation_96", "prediction": "all x.((KnowledgeOfConstellations(x) & Navigate(x)) -> CanBeUsedToNavigate(x))", "score": 0}
{"id": "eqasc_validation_96", "prediction": "all x.(ConstellationKnowledge(x) -> Navigate(x))", "score": 0}
{"id": "eqasc_validation_96", "prediction": "all x y.((Knowledge(x) & Constellation(y) & Navigates(x,y)) -> CanBeUsedToNavigate(x,y))", "score": 0}
{"id": "eqasc_validation_96", "prediction": "all x.(KnowledgeOfConstellations(x) -> CanNavigate(x))", "score": 0}
{"id": "eqasc_validation_96", "prediction": "all x.((KnowledgeOfConstellations(x) & Navigate(x)) -> CanNavigate(x))", "score": 0}
{"id": "eqasc_validation_97", "prediction": "all x y z.((Explorer(x) & NorthStar(y) & NavigationalPurpose(z)) -> UsedForConstruction(x,y,z))", "score": 0}
{"id": "eqasc_validation_97", "prediction": "all x y z.((Explorer(x) & NorthStar(y) & NavigationalPurpose(z)) -> HasNavigation(x,y,z))", "score": 0}
{"id": "eqasc_validation_97", "prediction": "all x.(Explorer(x) -> UseTrackForNavigation(x))", "score": 0}
{"id": "eqasc_validation_97", "prediction": "all x.(Explorer(x) -> (UsesNorthStarForNavigation(x) & ForSeconds(x)))", "score": 0}
{"id": "eqasc_validation_97", "prediction": "all x y z.((Explorer(x) & NorthStar(y) & NavigationalPurpose(z)) -> UsedFor(x,y,z))", "score": 0}
{"id": "eqasc_validation_97", "prediction": "all x y!((Experiencer(x) & NorthStar(y,x)) -> UsedForNavigation(x,y))", "score": 0}
{"id": "eqasc_validation_97", "prediction": "all x y.((Experirer(x) & NorthStar(y)) -> UsedForNavigation(x,y))", "score": 0}
{"id": "eqasc_validation_97", "prediction": "all x.((Explorer(x) & NorthStar(x)) -> UsesForNavigation(x))", "score": 0}
{"id": "eqasc_validation_97", "prediction": "all x.(Explorer(x) & NorthStar(y) & Navigation(z) & UsedForCentury(x,y,z))", "score": 0}
{"id": "eqasc_validation_97", "prediction": "all x y.((Explorer(x) & NorthStar(y)) -> UsesForNavigation(x,y))", "score": 0}
{"id": "eqasc_validation_97", "prediction": "all x y z.((Explorer(x) & NorthStar(y) & NavigationalPurpose(z)) -> UsedForCentury(x,y,z))", "score": 0}
{"id": "eqasc_validation_97", "prediction": "all x.((Explorer(x) & NorthStar(x)) -> ForNavigation(x))", "score": 0}
{"id": "eqasc_validation_97", "prediction": "all x y z.((Explorer(x) & NorthStar(y) & Navigation(z)) -> UsedFor(x,y,z))", "score": 0}
{"id": "eqasc_validation_97", "prediction": "all x.((Explorer(x) & NorthStar(y)) -> NarrowingPurpose(x,y))", "score": 0}
{"id": "eqasc_validation_97", "prediction": "all x.((Explorer(x) & NorthStar(y)) -> UsedForNavigation(x,y))", "score": 0}
{"id": "eqasc_validation_98", "prediction": "all x.((AntNorthStar(x) & HasKnowledge(x)) -> UsesForDirections(x))", "score": 0}
{"id": "eqasc_validation_98", "prediction": "all x.((NorthStar(x) & Knowledge(x)) -> CanReferTo(x,directions))", "score": 0}
{"id": "eqasc_validation_98", "prediction": "all x.(NorthStar(x) -> (CanGo(x,north) & Knowledge(x,north)))", "score": 0}
{"id": "eqasc_validation_98", "prediction": "all x.((LimitsNorthStar(x) & KnowledgeOfNorthStar(x)) -> ToDriveDirections(x))", "score": 0}
{"id": "eqasc_validation_98", "prediction": "all x.((NorthStar(x) & KnowledgeOfNorthStar(x)) -> CanDirectionsUnder(x))", "score": 0}
{"id": "eqasc_validation_98", "prediction": "all x.(UsingNorthStar(x) -> HasKnowledge(x))", "score": 0}
{"id": "eqasc_validation_98", "prediction": "all x.((NorthStar(x) & Knowledge(x) & UsesNorthStar(x)) -> NeedsDirections(x))", "score": 0}
{"id": "eqasc_validation_98", "prediction": "all x.((NorthStar(x) & Knowledge(x)) -> UsedForDirections(x))", "score": 0}
{"id": "eqasc_validation_98", "prediction": "all x.((NorthStar(x) & KnowledgeAbove(x)) -> ConvertsNorthStar(x))", "score": 0}
{"id": "eqasc_validation_98", "prediction": "all x.((NorthStar(x) & Knowledge(x)) -> HasDirection(x))", "score": 0}
{"id": "eqasc_validation_98", "prediction": "all x.((NorthStar(x) & Knowledge(x)) -> UsesForDirections(x))", "score": 0}
{"id": "eqasc_validation_98", "prediction": "all x.((NorthStar(x) & KnowledgeOf(x)) -> CanUseNorthStarForDirections(x))", "score": 0}
{"id": "eqasc_validation_98", "prediction": "all x.((ForDirections(x) & KnowledgeOfNorthStar(x)) -> CanBeUsedForDirections(x))", "score": 0}
{"id": "eqasc_validation_98", "prediction": "all x.((NordStar(x) & knowsHowToDriveNorth(x)) -> UseForDirections(x,y))", "score": 0}
{"id": "eqasc_validation_98", "prediction": "all x y.((NorthStar(x) & Knowledge(y) & UsesNorthStar(x,y)) -> UsesNorthStar(x,y))", "score": 0}
{"id": "eqasc_validation_98", "prediction": "all x.((NorthStar(x) & Knowledge(x)) -> CanSwitchForDirections(x))", "score": 0}
{"id": "eqasc_validation_99", "prediction": "all x y.((Knowledge(x) & Stars(y)) -> OrientsExplorers(x,y))", "score": 0}
{"id": "eqasc_validation_99", "prediction": "all x.(KnowledgeOfStars(x) -> Orient Explorers(x))", "score": -1}
{"id": "eqasc_validation_99", "prediction": "all x y.((KnowledgeOfStars(x) & Explorer(y)) -> Orients(x,y))", "score": 0}
{"id": "eqasc_validation_99", "prediction": "all x.((KnowledgeOfStars(x) & OrientsExplorers(x)) -> CanBeUsedToOrient(x))", "score": 0}
{"id": "eqasc_validation_99", "prediction": "all x.(KnowledgeOfStars(x) -> OrientsExplorers(x))", "score": 0}
{"id": "eqasc_validation_99", "prediction": "all x y.((KnowledgeOfStars(x) & Explorer(y)) -> OrientedTo(y,x))", "score": 0}
{"id": "eqasc_validation_99", "prediction": "all x y.((KnowledgeOfSterns(x) & Explorer(y)) -> (OrientExperiencer(y) & UsesKnowledgeOfStars(x,y)))", "score": 0}
{"id": "eqasc_validation_99", "prediction": "all x.(KnowledgeOfStars(x) -> OrientEntrepreneurs(x))", "score": 0}
{"id": "eqasc_validation_99", "prediction": "all x y.((SternKnowledge(x) & Explorer(y)) -> Orients(x,y))", "score": 0}
{"id": "eqasc_validation_99", "prediction": "all x.(KnowledgeOfStars(x) -> OrientedExplorers(x))", "score": 0}
{"id": "eqasc_validation_99", "prediction": "all x y.((KnowledgeOfStars(x) & Explorer(y)) -> Orientes(x,y))", "score": 0}
{"id": "eqasc_validation_99", "prediction": "all x y.((KnowledgeOfStars(x) & Explorer(y)) -> OrientsTo(x,y))", "score": 0}
{"id": "eqasc_validation_99", "prediction": "all x y.((KnowledgeOfStars(x) & Explorer(y)) -> CanOrient(x,y))", "score": 0}
{"id": "eqasc_validation_100", "prediction": "all x.(StarStar(x) -> (SymbolOfHope(x) & SymbolOfGuidance(x) & InUncertainty(x)))", "score": 0}
{"id": "eqasc_validation_100", "prediction": "all x y.((StarStar(x) & InMidnightOfUncertainty(x)) -> (SymbolOfHopeAndGuidance(x) & InMidnightOfIncertitude(x)))", "score": 0}
{"id": "eqasc_validation_100", "prediction": "all x.(StarStar(x) -> (SymbolOfHope(x) & SymbolOfGuidance(x) & InConcern(x)))", "score": 0}
{"id": "eqasc_validation_100", "prediction": "all x.(StarStar(x) -> (SymbolOfHopeAndGuidance(x) & InMomentOfIncertitude(x)))", "score": 0}
{"id": "eqasc_validation_100", "prediction": "all x.(StarStar(x) -> (SymbolOfHopeAndGuidanceInIncertitude(x) & GenerallySpeaking(x)))", "score": 0}
{"id": "eqasc_validation_100", "prediction": "all x.(StarStar(x) -> (SymbolOfHope(x) & SymbolOfGuidance(x) & UncertainInunity(x)))", "score": 0}
{"id": "eqasc_validation_100", "prediction": "all x y.((StarStar(x) & Uncertainty(y)) -> (SymbolOfHope(x) & Guide(x) & InMovementOfIncertitude(x)))", "score": 0}
{"id": "eqasc_validation_100", "prediction": "all x y.((StarStar(x) & Uncertainty(y)) -> (SymbolOfHopeAndGuidance(x,y)))", "score": 0}
{"id": "eqasc_validation_100", "prediction": "all x.(StarStar(x) -> (SymbolOfHope(x) & SymbolOfGuidance(x) & DespiteUncertainty(x)))", "score": 0}
{"id": "eqasc_validation_100", "prediction": "all x.(StarStar(x) -> (SymbolOfHope(x) & SymbolOfGuidanceInUncertainty(x)))", "score": 0}
{"id": "eqasc_validation_100", "prediction": "all x.(StarStar(x) -> (SymbolOfHopeAndGuidanceInUncertainty(x)))", "score": 0}
{"id": "eqasc_validation_100", "prediction": "all x.(StarStar(x) -> (SymbolOfHopeAndGuidance(x) & DuringIncertitude(x)))", "score": 0}
{"id": "eqasc_validation_100", "prediction": "all x.(StarStar(x) -> (SymbolOfHopeAndGuidance(x) & InHeadOfIncertitude(x)))", "score": 0}
{"id": "eqasc_validation_100", "prediction": "all x y.((StarStar(x) & Uncertain(y)) -> (SymbolOfHopeAtUncertainty(x) & SymbolOfGuidance(x)))", "score": 0}
{"id": "eqasc_validation_100", "prediction": "all x.(StarStar(x) -> (SymbolOfHope(x) & SymbolOfGuidance(x) & InBodyOfUncertainty(x)))", "score": 0}
{"id": "eqasc_validation_101", "prediction": "all x.(Uncertainty(x) -> CanBeOverwhelmedByNavigation(x))", "score": 0}
{"id": "eqasc_validation_101", "prediction": "all x.(Uncertainty(x) -> OvercomeByNavigation(x))", "score": 0}
{"id": "eqasc_validation_101", "prediction": "all x.(UncertaintyOvercomes(x) -> UsesNavigation(x))", "score": 0}
{"id": "eqasc_validation_101", "prediction": "all x.(Uncertainty(x) -> Overcoming(x,navigation))", "score": 0}
{"id": "eqasc_validation_101", "prediction": "all x.(Uncertainty(x) -> CanBeOvercomeByNavigation(x))", "score": 0}
{"id": "eqasc_validation_101", "prediction": "all x.(UncertaintyByNavigation(x) -> Overwhelms(x))", "score": 0}
{"id": "eqasc_validation_101", "prediction": "all x.exists y.(Uncertainty(x) & Navigation(y) & CanBeOvercome(x))", "score": 0}
{"id": "eqasc_validation_101", "prediction": "Uncertainty CanBeOverwhelmedByNavigation(x)", "score": -1}
{"id": "eqasc_validation_101", "prediction": "all x.(Uncertainty(x) -> OverwroteByNavigation(x))", "score": 0}
{"id": "eqasc_validation_101", "prediction": "all x.(Uncertainty(x) -> OvercameByNavigation(x))", "score": 0}
{"id": "eqasc_validation_102", "prediction": "all x.(Navigation(x) -> SpaceTravelElement(x))", "score": 0}
{"id": "eqasc_validation_102", "prediction": "all x.(Navigation(x) -> KeyElementOfSpaceTravel(x))", "score": 0}
{"id": "eqasc_validation_102", "prediction": "all x y.((Navigation(x) & SpaceTravel(y)) -> KeyElement(x,y))", "score": 0}
{"id": "eqasc_validation_102", "prediction": "all x.(SpaceTravel(x) -> KeyElement(x,navigation))", "score": 0}
{"id": "eqasc_validation_102", "prediction": "all x.(Navigation(x) -> SpaceTravelKeyElement(x))", "score": 0}
{"id": "eqasc_validation_102", "prediction": "all x.(Navigation(x) -> SpaceTraveleelement(x))", "score": 0}
{"id": "eqasc_validation_102", "prediction": "all x.(Navigate(x) -> SpaceTravelKeyElement(x))", "score": 0}
{"id": "eqasc_validation_102", "prediction": "all x y z.((Navigation(x) & SpaceTravel(y) & SpaceTravel(z)) -> KeyElement(x,y,z))", "score": 0}
{"id": "eqasc_validation_102", "prediction": "all x y.((SpaceTravel(x) & Navigation(y)) -> KeyElement(y))", "score": 0}
{"id": "eqasc_validation_102", "prediction": "all x.(Navigation(x) & SpaceTravelElement(x))", "score": 0}
{"id": "eqasc_validation_102", "prediction": "all x.(SpaceTravel(x) -> KeyElementOfNavigation(x))", "score": 0}
{"id": "eqasc_validation_102", "prediction": "all x.(Navigation(x) -> SpaceTravel(x))", "score": 0}
{"id": "eqasc_validation_102", "prediction": "all x y z.((Navigation(x) & SpaceTravel(y) & SpaceTravel(z)) -> KeyElement(x,y))", "score": 0}
{"id": "eqasc_validation_103", "prediction": "all x y.((Star(x) & Knows(x,y)) -> CanTravel(x))", "score": 0}
{"id": "eqasc_validation_103", "prediction": "all x.((KnowledgeOfStars(x) & UsesToTravel(x)) -> UsedToTravel(x))", "score": 0}
{"id": "eqasc_validation_103", "prediction": "all x y.((Star(x) & Knowledge(y)) -> CanBeUsedToTravel(x))", "score": 0}
{"id": "eqasc_validation_103", "prediction": "all x y.((Knowledge(x,y) & Star(y)) -> Travels(x))", "score": 0}
{"id": "eqasc_validation_103", "prediction": "all x.(KnowledgeOfStars(x) -> CanBeTravelled(x))", "score": 0}
{"id": "eqasc_validation_103", "prediction": "all x.(KnowledgeOfStars(x) -> CanBeUsedToTravel(x))", "score": 0}
{"id": "eqasc_validation_103", "prediction": "all x.(KnowledgeOfStars(x) -> UsedToTravel(x))", "score": 0}
{"id": "eqasc_validation_103", "prediction": "all x y.((Star(x) & Knowledge(y)) -> CanBeUsedToTravel(x,y))", "score": 0}
{"id": "eqasc_validation_103", "prediction": "all x y.((Star(x) & Citizen(y)) -> UsefulForTravel(x))", "score": 0}
{"id": "eqasc_validation_103", "prediction": "all x.(KnowsStars(x) -> Travel(x))", "score": 0}
{"id": "eqasc_validation_103", "prediction": "all x y.((Star(x) & Knows(x,y)) -> CanBeUsedToTravel(x))", "score": 0}
{"id": "eqasc_validation_103", "prediction": "all x y.((Knowledge(x) & Star(y)) -> CanOfTravel(x,y))", "score": 0}
{"id": "eqasc_validation_103", "prediction": "all x.((KnowledgeOfStars(x) & Tourism(x)) -> UsedToTravel(x))", "score": 0}
{"id": "eqasc_validation_103", "prediction": "all x.(RunKnowledge(x) -> UsedToTravel(x))", "score": 0}
{"id": "eqasc_validation_103", "prediction": "exists x.(Stern(x) & KnowledgeOf(x,y))", "score": 0}
{"id": "eqasc_validation_104", "prediction": "all x.(Astronomer(x) -> StudiesStars(x))", "score": 0}
{"id": "eqasc_validation_104", "prediction": "all x y.((Astronomer(x) & Star(y)) -> Studies(x,y))", "score": 0}
{"id": "eqasc_validation_104", "prediction": "exists x.(Astronomer(x) & StudiesStars(x))", "score": 0}
{"id": "eqasc_validation_105", "prediction": "all x.(Astronomy(x) -> CanNAVIGATE(x))", "score": 0}
{"id": "eqasc_validation_105", "prediction": "all x.(Astronomy(x) -> Navigation(x))", "score": 0}
{"id": "eqasc_validation_105", "prediction": "all x y.((Astronomy(x) & Navigating(y)) -> CanBeUsedToNavigate(x,y))", "score": 0}
{"id": "eqasc_validation_105", "prediction": "all x.(Astronomy(x) -> -CanNavigate(x))", "score": 0}
{"id": "eqasc_validation_105", "prediction": "all x.(Astronomy(x) -> CanNavigate(x))", "score": 0}
{"id": "eqasc_validation_105", "prediction": "all x.(Astronomy(x) -> (CanBeUsedToNavigate(x)))", "score": 0}
{"id": "eqasc_validation_105", "prediction": "all x.(Astronomy(x) -> Navigate(x))", "score": 0}
{"id": "eqasc_validation_105", "prediction": "all x y.((Astronomy(x) & Navigating(y)) -> CanBeUsedTo(x,y))", "score": 0}
{"id": "eqasc_validation_105", "prediction": "all x.(Astronomy(x) -> NavigateTo(x,Astronomy))", "score": 0}
{"id": "eqasc_validation_105", "prediction": "all x.(Astronomy(x) -> NavigateProcess(x))", "score": 0}
{"id": "eqasc_validation_105", "prediction": "all x y z.((Astronomy(x) & Navigate(y) & Navigation(z)) -> (UsedFor(x,y,z) & Navigate(w)))", "score": 0}
{"id": "eqasc_validation_105", "prediction": "all x.(Astronomy(x) -> Navigates(x))", "score": 0}
{"id": "eqasc_validation_105", "prediction": "all x y.((Astronomy(x) & Navigates(y)) -> UtilisesAstronomy(x,y))", "score": 0}
{"id": "eqasc_validation_105", "prediction": "all x y.((Astronomy(x) & Navigation(y)) -> UsesToNavigate(x,y))", "score": 0}
{"id": "eqasc_validation_106", "prediction": "all x y z.((Vehicle(x) & Brake(y) & Friction(z) & Brakes(x,z)) -> Stops(x,y,z))", "score": 0}
{"id": "eqasc_validation_106", "prediction": "all x y.((Vehicle(x) & Brake(y) & UsedForStop(x,y)) -> Dispatches(x,y))", "score": 0}
{"id": "eqasc_validation_106", "prediction": "all x y z w.((Vehicle(x) & Brake(y) & Friction(z) & Brems(w)) -> StopsBy(x,y,z,w))", "score": 0}
{"id": "eqasc_validation_106", "prediction": "all x y z.((Vehicle(x) & Brake(y) & Friction(z)) -> Stops(x,y,z))", "score": 0}
{"id": "eqasc_validation_106", "prediction": "all x y.((Vehicle(x) & Brake(y)) -> (BenchGrip Stop(x,y) & BrakeRace(z) & UsedFor(x,y)))", "score": -1}
{"id": "eqasc_validation_106", "prediction": "all x y.((Vehicle(x) & Brake(y)) -> StopsBy(x,y))", "score": 0}
{"id": "eqasc_validation_106", "prediction": "all x y.((Vehicle(x) & Brems(y)) -> UsedForStoppingBy(x,y))", "score": 0}
{"id": "eqasc_validation_106", "prediction": "all x y z.((Vehicle(x) & Brake(y)) -> BreatheForStop(x,y,z))", "score": 0}
{"id": "eqasc_validation_106", "prediction": "((Vehicle(x) & Breathes(x)) -> Stops(x,y)))", "score": -1}
{"id": "eqasc_validation_106", "prediction": "all x.(Friction(x) -> StopsVehicle(x))", "score": 0}
{"id": "eqasc_validation_106", "prediction": "all x.((Friction(x) & Vehicle(x) & Brakes(x)) -> StopsBy(x,y))", "score": 0}
{"id": "eqasc_validation_106", "prediction": "all x y.((Vehicle(x) & Brake(y)) -> UsesFrictionForStopping(x,y))", "score": 0}
{"id": "eqasc_validation_106", "prediction": "all x y.((Vehicle(x) & Brake(y)) -> Friction(x))", "score": 0}
{"id": "eqasc_validation_106", "prediction": "all x y.((Vehicle(x) & Brake(y)) -> (UsedForStopping(x,y) & Interrupted(y,x)))", "score": 0}
{"id": "eqasc_validation_106", "prediction": "all x y.((Vehicle(x) & Vehicle(y) & Brakes(x)) -> RequiresNoFrictionForStopping(x,y))", "score": 0}
{"id": "eqasc_validation_106", "prediction": "all x y z.((Vehicle(x) & Breathe(y) & Brake(z)) -> Stops(y,z))", "score": 0}
{"id": "eqasc_validation_107", "prediction": "all x.((Vehicle(x) & OnIndicated(x)) -> BrakeInvolved(x))", "score": 0}
{"id": "eqasc_validation_107", "prediction": "all x.((Vehicle(x) & OnIncline(x)) -> BrakesInvolved(x))", "score": 0}
{"id": "eqasc_validation_107", "prediction": "all x y.((Vehicle(x) & Inincline(x)) -> BrakeInvolved(x))", "score": 0}
{"id": "eqasc_validation_107", "prediction": "all x.((Vehicle(x) & OnIndice(x)) -> BrakesInvolved(x))", "score": 0}
{"id": "eqasc_validation_107", "prediction": "all x y.((Vehicle(x) & Inincline(y)) -> BrakesInvolved(x,y))", "score": 0}
{"id": "eqasc_validation_107", "prediction": "all x y.((Vehicle(x) & Indine(y)) -> BrakesInvolved(x,y))", "score": 0}
{"id": "eqasc_validation_107", "prediction": "all x y.((Vehicle(x) & Slope(y)) -> Brake(x,y))", "score": 0}
{"id": "eqasc_validation_107", "prediction": "all x y.((Vehicle(x) & Indice(x)) -> BrakeInvolved(x))", "score": 0}
{"id": "eqasc_validation_107", "prediction": "all x y.((Vehicle(x) & Incline(y)) -> BrakesInvolvedFor(x,y))", "score": 0}
{"id": "eqasc_validation_107", "prediction": "all x y.((Vehicle(x) & Inincline(y)) -> BrakesInvolved(x))", "score": 0}
{"id": "eqasc_validation_107", "prediction": "all x.((Vehicle(x) & Inverse(x)) -> BrakesInvolved(x))", "score": 0}
{"id": "eqasc_validation_107", "prediction": "exists x.(Signal(x) & Brake(x) & OnIncline(x))", "score": 0}
{"id": "eqasc_validation_107", "prediction": "all x y.((Vehicle(x) & Tire(y)) -> OnIncline(x,y))", "score": 0}
{"id": "eqasc_validation_107", "prediction": "all x y.((Vehicle(x) & Inincline(x)) -> BrakesInvolved(x,y))", "score": 0}
{"id": "eqasc_validation_108", "prediction": "all x y z w.((Vehicle(x) & Indicence(y) & Friction(z) & Inincline(w)) -> UsedToStop(x,y,z))", "score": 0}
{"id": "eqasc_validation_108", "prediction": "all x y.((Vehicle(x) & Inline(y)) -> FrictureStopsOn(x,y))", "score": 0}
{"id": "eqasc_validation_108", "prediction": "all x y.((Vehicle(x) & Inincline(y)) -> UsesFrictionToStopOn(x,y))", "score": 0}
{"id": "eqasc_validation_108", "prediction": "all x y z.((Vehicle(x) & Incenture(y) & Friction(z) & StopsOn(x,y) & On(x,z)) -> Internats(x,y))", "score": 0}
{"id": "eqasc_validation_108", "prediction": "all x y.((Vehicle(x) & Incline(y)) -> StopsOn(x,y))", "score": 0}
{"id": "eqasc_validation_108", "prediction": "all x y z.((Vehicle(x) & Indice(y)) -> UsedForStopReleasingOn(x,y))", "score": 0}
{"id": "eqasc_validation_108", "prediction": "all x y.((Vehicle(x) & Inline(y) & UsingFriction(x) & StopsOn(x,y)) -> UsedToStop(x,y))", "score": 0}
{"id": "eqasc_validation_108", "prediction": "all x y z.((Vehicle(c) & Inversion(y) & Efficiency(z)) -> StopsOnIncline(c,y))", "score": 0}
{"id": "eqasc_validation_108", "prediction": "all x y.((Vehicle(x) & Incline(y)) -> AlloyedFriction(x))", "score": 0}
{"id": "eqasc_validation_108", "prediction": "all x y.((Vehicle(x) & Vehicle(y) & OnIncline(x,y)) -> RefrictionStopDown(x))", "score": 0}
{"id": "eqasc_validation_108", "prediction": "all x y.((Vehicle(x) & Incline(y)) -> UsesFrictionToStopOn(x,y))", "score": 0}
{"id": "eqasc_validation_108", "prediction": "all x y.((Vehicle(x) & Inincline(y)) -> UsedToStopOn(x,y))", "score": 0}
{"id": "eqasc_validation_108", "prediction": "all x y.((Vehicle(x) & Incline(y)) -> Stops(x,y))", "score": 0}
{"id": "eqasc_validation_108", "prediction": "all x y.((Vehicle(x) & Vehicle(y) & Inincline(x,y)) -> StabsOnFriction(x,y))", "score": 0}
{"id": "eqasc_validation_108", "prediction": "all x y.((Vehicle(x) & Vehicle(y) & incline(y)) -> UsesFrictionToStopOnIncline(x,y))", "score": 0}
{"id": "eqasc_validation_109", "prediction": "all x.((Fishtailing(x) | SevereBremsing(x)) -> (CausesJackknifing(x) & CausesRollover(x)))", "score": 0}
{"id": "eqasc_validation_109", "prediction": "all x.((Fishtailing(x) | SevereBreathingHighSpeed(x)) -> (CausesJackknifing(x) & CausesRollover(x)))", "score": 0}
{"id": "eqasc_validation_109", "prediction": "all x.((Fishtailing(x) | SevereBreaching(x)) -> (CausesJackknifing(x) & CausesRollover(x)))", "score": 0}
{"id": "eqasc_validation_109", "prediction": "all x.((Fishtailing(x) | SevereBrakingAtHighSpeed(x)) -> (CausesJackknifing(x) & CausesRollover(x)))", "score": 0}
{"id": "eqasc_validation_109", "prediction": "all x.((Fishtailing(x) | SevereBrakingAtHighSpeed(x)) -> CausesJackknifing(x) & CausesRollover(x))", "score": 0}
{"id": "eqasc_validation_109", "prediction": "all x.((Fishtailing(x) | SevereBraking(x) & HighSpeed(x)) -> (CausesJackknifing(x) & CausesRollover(x)))", "score": 0}
{"id": "eqasc_validation_109", "prediction": "all x.((Fishtailing(x) | SevereBreakfast(x)) -> (CausesJackknifing(x) & CausesRollover(x)))", "score": 0}
{"id": "eqasc_validation_109", "prediction": "all x.((Fishtailing(x) | SevereBreaching(x)) -> (Boarding(x) & CausesJackknifing(x) & CausesRollover(x)))", "score": 0}
{"id": "eqasc_validation_109", "prediction": "all x.((Fishtailing(x) | SevereBreedingAtHighSpeed(x)) -> (CausesJackknifing(x) & CausesRollover(x)))", "score": 0}
{"id": "eqasc_validation_109", "prediction": "all x.((Fishtailing(x) | SevereBrakingAtHighSpeed(x)) -> (CatchesJackknifing(x) | CausesRollover(x)))", "score": 0}
{"id": "eqasc_validation_109", "prediction": "all x y.((Fishtailing(x) & SevereBrakingAtHighSpeed(x)) -> (CausesJackknifing(y) & Rollover(y)))", "score": 0}
{"id": "eqasc_validation_109", "prediction": "all x.((Fishtailing(x) | SevereBrakingAtHighSpeed(x)) -> CausesJackknifingAndRollover(x))", "score": 0}
{"id": "eqasc_validation_109", "prediction": "all x.((Fishtailing(x) | SevereBrakingAtHighSpeed(x)) -> (HasJackknifing(x) & HasRollover(x)))", "score": 0}
{"id": "eqasc_validation_109", "prediction": "all x.((Fishtailing(x) | SevereBrokingHighSpeed(x)) -> (CausesJackknifing(x) & CausesRollover(x)))", "score": 0}
{"id": "eqasc_validation_109", "prediction": "all x y.((Fishtailing(x) | SevereBraking(y) & HighSpeed(z)) -> (CausesJackknifing(x,z) & CausesRollover(x)))", "score": 0}
{"id": "eqasc_validation_109", "prediction": "all x y.((Fistailing(x) | SevereBrakingAtHighSpeed(x) & HighSpeed(y)) -> (CausesJackknifing(x) & CausesRollover(x)))", "score": 0}
{"id": "eqasc_validation_110", "prediction": "all x.(Friction(x) -> (CanCauseJackknife(x) & CanCauseRollover(x)))", "score": 0}
{"id": "eqasc_validation_110", "prediction": "all x y z.((Friction(x) & Vehicle(y) & Vehicle(z)) -> (CausesJackknifing(x,y) & CausesRollover(x,z)))", "score": 0}
{"id": "eqasc_validation_110", "prediction": "all x y.((Friction(x) & Vehicle(y)) -> (CauseJackknifing(x,y) & CauseRollover(x,y)))", "score": 0}
{"id": "eqasc_validation_110", "prediction": "all x.(Friction(x) -> (CausesJackknifing(x) & CausesRollover(x)))", "score": 0}
{"id": "eqasc_validation_110", "prediction": "all x.(Refriction(x) -> (CausesJackknifing(x) & CausesRollover(x)))", "score": 0}
{"id": "eqasc_validation_110", "prediction": "all x y.((Friction(x) & Vehicle(y) & CausesJackknifing(x,y) & CausesRollover(x,y)) -> CanCalmIn(x,y))", "score": 0}
{"id": "eqasc_validation_110", "prediction": "all x y.((Friction(x) & Vehicle(y)) -> (CausesJackknifing(x) & CausesRollover(x,y)))", "score": 0}
{"id": "eqasc_validation_110", "prediction": "all x y.((Friction(x) & Vehicle(y)) -> (CausesJackknifing(x,y) & CausesRollover(x,y)))", "score": 0}
{"id": "eqasc_validation_110", "prediction": "all x y.((Friction(x) & Vehicle(y)) -> (CausesJackknifing(x) & CausesRollover(x)))", "score": 0}
{"id": "eqasc_validation_110", "prediction": "all x.(Friction(x) -> (CausesJackknifing(x) & CausesRollover(x) & InVehicle(x)))", "score": 0}
{"id": "eqasc_validation_110", "prediction": "all x y.() -> (Jackknifing(x) & Rollover(x)))", "score": -1}
{"id": "eqasc_validation_110", "prediction": "all x y.((Fruit(x) & Vehicle(y)) -> (CausesJackknifing(x) | CausesRollover(x)))", "score": 0}
{"id": "eqasc_validation_111", "prediction": "all x.(BrakeDust(x) -> ProducedByFrictionOfBraking(x))", "score": 0}
{"id": "eqasc_validation_111", "prediction": "all x.(BrakeDust(x) -> Produced(x))", "score": 0}
{"id": "eqasc_validation_111", "prediction": "all x y.((BrakeDust(x) & Braking(y)) -> ProducedDuringFrictionOf(x,y))", "score": 0}
{"id": "eqasc_validation_111", "prediction": "all x.(BrakeDust(x) -> ProductedDueToFriction(x))", "score": 0}
{"id": "eqasc_validation_111", "prediction": "all x y.((BrakeDust(x) & FrictionOfBraking(y)) -> Produced(x,y))", "score": 0}
{"id": "eqasc_validation_111", "prediction": "all x.(BrakeDust(x) -> ProducedDuringFrictionOfBreathing(x))", "score": 0}
{"id": "eqasc_validation_111", "prediction": "all x.(BrakeDust(x) -> ProducedDuringStrictBrakingRuhe(x))", "score": 0}
{"id": "eqasc_validation_111", "prediction": "all x y.((BrakeDust(x) & Braking(y)) -> Contains(x,y))", "score": 0}
{"id": "eqasc_validation_111", "prediction": "all x.(BrakeDust(x) -> ProducedDuringFrictionOfBraking(x))", "score": 0}
{"id": "eqasc_validation_111", "prediction": "all x.(BrakeDust(x) -> ProducedDuringFrictionAtBraking(x))", "score": 0}
{"id": "eqasc_validation_111", "prediction": "all x.(BrakeDust(x) -> ProducedByBruise(x))", "score": 0}
{"id": "eqasc_validation_111", "prediction": "all x.(BRAKEDust(x) -> ProducesDuringFlourishingOfBreathing(x))", "score": 0}
{"id": "eqasc_validation_111", "prediction": "all x y.((BrakeDust(x) & BrakingContinuity(y)) -> Produced(x,y))", "score": 0}
{"id": "eqasc_validation_111", "prediction": "all x.(BrakeDust(x) -> (ProducedDuringRippleOfBraking(x)))", "score": 0}
{"id": "eqasc_validation_111", "prediction": "all x.(BrakeDust(x) -> (ProducedByFrictionOfBraking(x) | -ProducedByFriction(x)))", "score": 0}
{"id": "eqasc_validation_111", "prediction": "all x.(BrakeDust(x) -> InFrictionOfBoiling(x))", "score": 0}
{"id": "eqasc_validation_112", "prediction": "all x y z.((Vehicle(x) & Stopping(y,x,z)) -> ProducesBrakeDust(z))", "score": 0}
{"id": "eqasc_validation_112", "prediction": "all x y.((Vehicle(x) & Stopping(x,y)) -> ProducesBrakeDust(x,y))", "score": 0}
{"id": "eqasc_validation_112", "prediction": "all x.(StoppinningVehicle(x) -> ProducesBrakeDust(x))", "score": 0}
{"id": "eqasc_validation_112", "prediction": "all x.(StoppingVehicle(x) -> ProducesBrakeDust(x))", "score": 0}
{"id": "eqasc_validation_112", "prediction": "all x.(Stopping(x) -> (ProducesBrakeDrupe(x)))", "score": 0}
{"id": "eqasc_validation_112", "prediction": "all x y.((Vehicle(x) & Vehicle(y)) -> StopsProducesBrakeDust(x,y))", "score": 0}
{"id": "eqasc_validation_112", "prediction": "all x.((Vehicle(x) & Stopping(x,y)) -> ProducesBrakeDust(y))", "score": 0}
{"id": "eqasc_validation_112", "prediction": "all x y z.((Vehicle(x) & Stopping(x,y) & BrakeDust(z)) -> Produces(x,z))", "score": 0}
{"id": "eqasc_validation_112", "prediction": "all x,y.((Vehicle(x) & Stops(y,z)) -> ProducesBrakeDust(x))", "score": -1}
{"id": "eqasc_validation_112", "prediction": "all x y.((Vehicle(x) & Stopping(x,y)) -> ProducesBrakeDust(x))", "score": 0}
{"id": "eqasc_validation_112", "prediction": "all x.(StopPulling(x) -> ProducesBrakeDust(x))", "score": 0}
{"id": "eqasc_validation_112", "prediction": "all x.((Vehicle(x) & Stops(x,y)) -> ProducesBrakeDust(x))", "score": 0}
{"id": "eqasc_validation_112", "prediction": "all x y.((Vehicle(x) & Stop(y)) -> ProducesBrakeDust(y))", "score": 0}
{"id": "eqasc_validation_113", "prediction": "all x.((Truck(x) & No.2Truck(x)) -> ApplyBrake(x))", "score": -1}
{"id": "eqasc_validation_113", "prediction": "all x.(Freezing(x) -> AppliesToRearWheelsOnNo2Truck(x))", "score": 0}
{"id": "eqasc_validation_113", "prediction": "all x.((Truck(x) & No.2(x)) -> BrakesApfixedToRearWheels(x))", "score": -1}
{"id": "eqasc_validation_113", "prediction": "all x.((Truck(x) & No2Truck(x)) -> BrakesAppliedToRearWheels(x))", "score": 0}
{"id": "eqasc_validation_113", "prediction": "all x.(BreaksApplicationToRoadWheels(x) -> No2Truck(x))", "score": 0}
{"id": "eqasc_validation_113", "prediction": "all x y.((Truck(x) & Truck(y)) -> BrakesAppliedToRearWheels(x,y))", "score": 0}
{"id": "eqasc_validation_113", "prediction": "all x.((Truck(x) & No.2Truck(x)) -> (AppliedBrakesToRoarWheels(x)))", "score": -1}
{"id": "eqasc_validation_113", "prediction": "all x.((Truck(x) & -Met)) -> BrakesAppliedToRearWheels(x))", "score": -1}
{"id": "eqasc_validation_113", "prediction": "all x.(BrakesApplication(x) -> ToRearWheelsOnNo.2Lirvan(x))", "score": -1}
{"id": "eqasc_validation_113", "prediction": "all x.((Truck(x) & Truck(x)) -> AppliesBrakesToRearWheels(x,2))", "score": 0}
{"id": "eqasc_validation_113", "prediction": "all x y.((Truck(x) & Truck(y)) -> BrakesApplication(x,y))", "score": 0}
{"id": "eqasc_validation_113", "prediction": "all x y.((Truck(x) & Truck(y)) -> AdheresBrakesToRearWheels(x,y))", "score": 0}
{"id": "eqasc_validation_113", "prediction": "all x y.((Truck(x) & Truck(y) & Brake(z)) -> AppliesToRoadWheelsOn(x,y))", "score": 0}
{"id": "eqasc_validation_113", "prediction": "all x y.((Truck(x) & Truck(y) & AffixedBrakes(x,y)) -> RearWheels(x,y))", "score": 0}
{"id": "eqasc_validation_113", "prediction": "all x y.((Truck(x) & Truck(y)) -> No2.2(x))", "score": -1}
{"id": "eqasc_validation_113", "prediction": "all x y z.((Truck(x) & Truck(y) & Truck(z)) -> BrakesApplication(x,y))", "score": 0}
{"id": "eqasc_validation_114", "prediction": "all x y.((Trode(x) & Truck(y)) -> FrictionStops(x,y))", "score": 0}
{"id": "eqasc_validation_114", "prediction": "all x y.((Landlord(x) & Truck(y)) -> UsedForStopping(x,y))", "score": 0}
{"id": "eqasc_validation_114", "prediction": "all x.(ForStoppingTrucks(x) -> FrictionUsedForStoppingTrucks(x))", "score": 0}
{"id": "eqasc_validation_114", "prediction": "all x.(Friction(x) -> StopsTrucks(x))", "score": 0}
{"id": "eqasc_validation_114", "prediction": "All x.(Friction(x) -> UsedForStoppingTrucks(x))", "score": -1}
{"id": "eqasc_validation_114", "prediction": "all x y.((Truck(x) & Truck(y)) -> UsingFriction(x,y))", "score": 0}
{"id": "eqasc_validation_114", "prediction": "all x.(Friction(x) -> UsedForStoppingTrucks(x))", "score": 0}
{"id": "eqasc_validation_114", "prediction": "all x.(Friction(x) -> UsedForKickingTrucks(x))", "score": 0}
{"id": "eqasc_validation_114", "prediction": "(all x.(Dump(x) -> Stops(x,Trucks)))", "score": 0}
{"id": "eqasc_validation_114", "prediction": "all x y z.((Friction(x) & Truck(y) & Truck(z)) -> Stops(x,y,z))", "score": 0}
{"id": "eqasc_validation_114", "prediction": "all x y z.((Friction(x) & Truck(y) & Truck(z)) -> UsedForStopping(x,y,z))", "score": 0}
{"id": "eqasc_validation_114", "prediction": "all x y.((Friction(x) & Truck(y)) -> Stops(x,y))", "score": 0}
{"id": "eqasc_validation_114", "prediction": "all x y.((Tractor(x) & Truck(y) & ReducesFriction(x,y)) -> UsedForStopping(x,y))", "score": 0}
{"id": "eqasc_validation_114", "prediction": "all x.(Friction(x) -> StemsTrucks(x))", "score": 0}
{"id": "eqasc_validation_115", "prediction": "all x.(Friction(x) -> OpposesMotion(x))", "score": 0}
{"id": "eqasc_validation_115", "prediction": "all x y.((Friction(x) & Motion(y)) -> Opposes(x,y))", "score": 0}
{"id": "eqasc_validation_115", "prediction": "all x.((Friction(x) & OpposesMotion(x)) -> Force(x))", "score": 0}
{"id": "eqasc_validation_115", "prediction": "all x.(Fire(x) -> OpposesMotion(x))", "score": 0}
{"id": "eqasc_validation_116", "prediction": "all x.(OpposesMotion(x) -> StopsVehicles(x))", "score": 0}
{"id": "eqasc_validation_116", "prediction": "all x.((Force(x) & OpposesMotion(x)) -> StopsVehiclesByBrakes(x))", "score": 0}
{"id": "eqasc_validation_116", "prediction": "all x y.((Force(x) & Force(y) & OpposesMotion(x)) -> UsedForStoppingVehiclesByBrakes(x,y))", "score": 0}
{"id": "eqasc_validation_116", "prediction": "all x y.((Fuel(x) & OpposesMotion(x) & Vehicle(y)) -> StopsByBrakes(x,y))", "score": 0}
{"id": "eqasc_validation_116", "prediction": "all x.(OpposesMotion(x) -> StopsVehiclesByBrakes(x))", "score": 0}
{"id": "eqasc_validation_116", "prediction": "all x y.((Chamber(x) & Force(y) & OpposesMotion(x,y)) -> UsedForStopByBrakes(x))", "score": 0}
{"id": "eqasc_validation_116", "prediction": "all x.((Force(x) & OpposesMotion(x)) -> UsedForStoppingVehiclesByBrakes(x))", "score": 0}
{"id": "eqasc_validation_116", "prediction": "all x.(OpposesMotionForce(x) -> StopsVehicles(x))", "score": 0}
{"id": "eqasc_validation_116", "prediction": "all x y.((Force(x) & Motion(y) & Opposes(x,y)) -> StopsVehiclesByBrakes(x))", "score": 0}
{"id": "eqasc_validation_116", "prediction": "all x y.((Force(x) & Motor(y) & Opposes(x,y)) -> StopsVehiclesByBrakes(x,y))", "score": 0}
{"id": "eqasc_validation_116", "prediction": "all x.(OpposesMotionForce(x) -> StopsVehiclesByBrakes(x))", "score": 0}
{"id": "eqasc_validation_116", "prediction": "all x y.((Force(x) & MotionOpposes(x)) -> UsedForStopByBrakes(x))", "score": 0}
{"id": "eqasc_validation_117", "prediction": "all x.(SmootherSurface(x) -> LessFriction(x))", "score": 0}
{"id": "eqasc_validation_117", "prediction": "all x.(SmootherSurface(x) -> -Friction(x))", "score": 0}
{"id": "eqasc_validation_117", "prediction": "all x.((SmootherSurface(x) & LessFriction(x)) -> SmootherSurface(x))", "score": 0}
{"id": "eqasc_validation_117", "prediction": "all x.((SmootherSurface(x) & LessFriction(x)) -> Smoother(x))", "score": 0}
{"id": "eqasc_validation_117", "prediction": "all x y.(SmootherSurface(x) -> LessFriction(y))", "score": 0}
{"id": "eqasc_validation_117", "prediction": "all x.((Smoother(x) & Surface(x)) -> LessFriction(x))", "score": 0}
{"id": "eqasc_validation_117", "prediction": "all x.(ShaferSurface(x) -> LessFriction(x))", "score": 0}
{"id": "eqasc_validation_117", "prediction": "all x.(Smoother(x) -> LessFriction(x))", "score": 0}
{"id": "eqasc_validation_118", "prediction": "all x y.((Brake(x) & Vehicle(y)) -> StopsOnSmoothSurface(x,y))", "score": 0}
{"id": "eqasc_validation_118", "prediction": "all x y z.((Brake(x) & Vehicle(y) & SmoothSurface(z)) -> LessEffectiveStopOn(x,y,z))", "score": 0}
{"id": "eqasc_validation_118", "prediction": "all x y z.((Brake(x) & Vehicle(y) & SmoothSurface(z)) -> LessEffectiveAtStanding(x,y,z))", "score": 0}
{"id": "eqasc_validation_118", "prediction": "all x y.((Brake(x) & Vehicle(y)) -> -EffectiveRunsOnSmoothSurfaces(x,y))", "score": 0}
{"id": "eqasc_validation_118", "prediction": "all x y.((Brake(x) & Vehicle(y) & SmoothSurface(y)) -> LessEffectiveOnSmoothSurface(x,y))", "score": 0}
{"id": "eqasc_validation_118", "prediction": "all x y z.((Brake(x) & Vehicle(y) & SmoothSurface(z) & -Stops(x,y,z)) -> LessEffective(x,y,z))", "score": 0}
{"id": "eqasc_validation_118", "prediction": "all x.(Brake(x) -> (OfficialStop(x,smoothSurface) & ReducedEffective(x,smoothSurface)))", "score": 0}
{"id": "eqasc_validation_118", "prediction": "all x y z.((Brake(x) & Vehicle(y) & SmoothSurface(z)) -> StableOnSmoothSurface(x,y,z))", "score": 0}
{"id": "eqasc_validation_118", "prediction": "all x.(RabidBrake(x) -> (LessEffectiveAtStoppingVehiclesOnSmoothSurfaces(x)))", "score": 0}
{"id": "eqasc_validation_118", "prediction": "all x.(Brake(x) -> LessEffectiveAtStopingVehiclesOnSmoothSurfaces(x))", "score": 0}
{"id": "eqasc_validation_118", "prediction": "all x y.((Brake(x) & Vehicle(y) & SmoothSurface(y)) -> LessEffective(x,y))", "score": 0}
{"id": "eqasc_validation_118", "prediction": "all x y.((Brake(x) & Vehicle(y)) -> (WorseEffectiveBrems(x,y) & StopsOnSmoothSurfaces(x,y)))", "score": 0}
{"id": "eqasc_validation_118", "prediction": "all x y.((Brake(x) & Vehicle(y)) -> (LossEffectiveWithStop(x,y) & SmoothSurface(y)))", "score": 0}
{"id": "eqasc_validation_118", "prediction": "all x y.((Brake(x) & Vehicle(y) & SmoothSurface(y)) -> LessEffectiveAtStops(x,y))", "score": 0}
{"id": "eqasc_validation_118", "prediction": "all x.(Break(x) -> (StopsVehiclesOnSmoothSurfaces(x) & LessEffectiveAtStopsVehiclesOnSmoothSurfaces(x)))", "score": 0}
{"id": "eqasc_validation_118", "prediction": "all x.(Brake(x) & SmallerEffectiveOnSmoothSurfaces(x)) -> StopsVehiclesOnSmoothSurfaces(x))", "score": -1}
{"id": "eqasc_validation_119", "prediction": "all x y.((Car(x) & CarBreathing(y)) -> StopsByFlocturing(x,y))", "score": 0}
{"id": "eqasc_validation_119", "prediction": "all x y.((Car(x) & Car(y) & UtilizesFrictionForStoppingByBrakes(x,y)) -> -StopsByBrakes(x,y))", "score": 0}
{"id": "eqasc_validation_119", "prediction": "all x y z.((Friction(x) & Car(y) & Bruxis(z)) -> (OperatedByBreaks(x,y) & Interrupts(x,z)))", "score": 0}
{"id": "eqasc_validation_119", "prediction": "all x y.((Car(x) & Car(y)) -> Stops(x,y))", "score": 0}
{"id": "eqasc_validation_119", "prediction": "all x y.((Auto(x) & Car(y) & Floats(x,y)) -> UsedForStoppingByBrakes(x,y))", "score": 0}
{"id": "eqasc_validation_119", "prediction": "all x y.((Car(x) & Car(y)) -> (ReusedForBreaking(x,y) & UsesForStoppingByBrakes(x,y)))", "score": 0}
{"id": "eqasc_validation_119", "prediction": "all x y.((Car(x) & Car(y)) -> StopsByBrakes(x,y))", "score": 0}
{"id": "eqasc_validation_119", "prediction": "all x y.((Car(x) & Car(y)) -> (ForStopping(x,y) & ByBreaks(x)))", "score": 0}
{"id": "eqasc_validation_119", "prediction": "all x y z.((Car(x) & Car(y) & Brake(z)) -> (FrictionStop(x,y,z) & Breathed(x,y)))", "score": 0}
{"id": "eqasc_validation_119", "prediction": "all x y.((Car(x) & Car(y)) -> (Stops(x,y) & UsedFor(x,y)))", "score": 0}
{"id": "eqasc_validation_119", "prediction": "all x y.((Car(x) & Car(y)) -> WorksForBreaking(x,y))", "score": 0}
{"id": "eqasc_validation_119", "prediction": "all x y.((Car(x) & Car(y) & Brems(z)) -> (UsesFrictionForStopping(x,y,z) & UsesBrems(x,y)))", "score": 0}
{"id": "eqasc_validation_119", "prediction": "all x.((Car(x) & Breathing(x)) -> UsingFrictionForStopping(x,y))", "score": 0}
{"id": "eqasc_validation_119", "prediction": "all x y z.((Car(x) & Car(y) & Brake(z)) -> (Stops(x,y) & UsesFriction(y,z)))", "score": 0}
{"id": "eqasc_validation_119", "prediction": "all x y.((Car(x) & Brake(y)) -> FlourishingStops(x,y))", "score": 0}
{"id": "eqasc_validation_120", "prediction": "all x.(Friction(x) -> ProducesHeat(x))", "score": 0}
{"id": "eqasc_validation_120", "prediction": "(ProducesHeat(friction) -> ProducesHeat(friction))", "score": 0}
{"id": "eqasc_validation_120", "prediction": "all x y.((Friction(x) & Heat(y)) -> Produces(x,y))", "score": 0}
{"id": "eqasc_validation_120", "prediction": "all x.(Refriction(x) -> ProducesHeat(x))", "score": 0}
{"id": "eqasc_validation_121", "prediction": "all x y.((Vehicle(x) & Brakes(y) & StopsWith(x,y)) -> GenerateHeat(x))", "score": 0}
{"id": "eqasc_validation_121", "prediction": "all x y.((Vehicle(x) & Vehicle(y)) -> (StopsWithBrakes(x,y) & GeneratesHeat(x,y)))", "score": 0}
{"id": "eqasc_validation_121", "prediction": "all x.(StopsWithBreaks(x) -> GeneratesHeat(x))", "score": 0}
{"id": "eqasc_validation_121", "prediction": "all x y.((Vehicle(x) & Vehicle(y) & BrakesStop(x,y)) -> HeatGeneratesSolvent(x,y))", "score": 0}
{"id": "eqasc_validation_121", "prediction": "all x y.((Vehicle(x) & Brembos (y) & Stopping(x,y)) -> GeneratesHeat(x))", "score": 0}
{"id": "eqasc_validation_121", "prediction": "all x y.((Vehicle(x) & Vehicle(y) & StopsWithBreats(x,y)) -> GeneratesHeat(x,y))", "score": 0}
{"id": "eqasc_validation_121", "prediction": "all x y.((Vehicle(x) & Vehicle(y) & BrakesStop(x,y)) -> GeneratesHeat(x))", "score": 0}
{"id": "eqasc_validation_121", "prediction": "all x y z.((Vehicle(x) & Brake(y) & Brake(z) & StopsWith(x,y,z) & Has(x,y,z)) -> HeatGenerates(x,y,z))", "score": 0}
{"id": "eqasc_validation_121", "prediction": "all x y z.((Vehicle(x) & Brakes(y) & Brake(z)) -> StopsGeneratesHeat(x,y,z))", "score": 0}
{"id": "eqasc_validation_121", "prediction": "all x y.((Vehicle(x) & Vehicle(y)) -> HaltsWithBrakes(x,y)) HeatGenerates(y))", "score": -1}
{"id": "eqasc_validation_121", "prediction": "all x.((Vehicle(x) & OperatesWithBrakes(x)) -> GeneratesHeat(x))", "score": 0}
{"id": "eqasc_validation_121", "prediction": "all x y.((Volvoline(x) & Vehicle(y) & StopsWithBrakes(x,y)) -> GeneratesHeat(x))", "score": 0}
{"id": "eqasc_validation_121", "prediction": "all x y z.((Vehicle(x) & Brakes(y) & StopsWith(x,y)) -> GeneratesHeat(x))", "score": 0}
{"id": "eqasc_validation_121", "prediction": "all x,y.((Vehicle(x) & StopsWithBrakes(x)) -> GeneratesHeat(y))", "score": -1}
{"id": "eqasc_validation_121", "prediction": "all x y.((Vehicle(x) & Vehicle(y) & HasBrakes(x)) -> GeneratesHeat(x,y))", "score": 0}
{"id": "eqasc_validation_121", "prediction": "all x.(Stop(x,Vehicle) -> (TracesBrakes(x) & GeneratesHeat(x)))", "score": 0}
{"id": "eqasc_validation_122", "prediction": "all x.((Truck(x) | Car(x)) -> Vehicle(x))", "score": 9}
{"id": "eqasc_validation_122", "prediction": "all x.(Vehicle(x) -> (Truck(x) | Car(x)))", "score": 0}
{"id": "eqasc_validation_122", "prediction": "all x.((Tank(x) | Car(x)) -> Vehicle(x))", "score": 1}
{"id": "eqasc_validation_122", "prediction": "all x.(Truck(x) | Car(x)) -> Vehicle(x))", "score": -1}
{"id": "eqasc_validation_123", "prediction": "all x.((Friction(x) & Trucks(x)) & Cars(x) & Brakes(x)) -> Stops(x))", "score": -1}
{"id": "eqasc_validation_123", "prediction": "all x y ((Truck(x) | Car(y)) & Brakes(y)) -> StopsUseFrictionForCrossing(x,y))", "score": -1}
{"id": "eqasc_validation_123", "prediction": "all x.((Friction(x) & StopsBy(x,landing,reduced,car,truck)) -> UsesRebrakes(x))", "score": 0}
{"id": "eqasc_validation_123", "prediction": "all x y.((Friction(x) & (Truck(y) | Car(y)) & UsesBrakes(x,y)) -> StopsBy(x,y))", "score": 0}
{"id": "eqasc_validation_123", "prediction": "all x.(Friction(x) -> (ReturnedByTrucks(x) & UsedForStoppingcars(x) & UsingBrakes(x)))", "score": 0}
{"id": "eqasc_validation_123", "prediction": "all x.(Friction(x) -> StopsAndAndUsesBreaks(x))", "score": 0}
{"id": "eqasc_validation_123", "prediction": "all x y z.((Friction(z) & Truck(w)) -> Stops(z,w)) & ((LKW(w) | Car(w)) -> UsesRebrakes(z,w)))", "score": -1}
{"id": "eqasc_validation_123", "prediction": "all x y.((Friction(x) & Truck(y) & Car(y) & UsesBrakes(x,y)) -> StopsUsedForStopringAcingBrems(x,y))", "score": 0}
{"id": "eqasc_validation_123", "prediction": "all x.((Friction(x) & Truck(x) & Car(x)) -> StopsOnBrakes(x))", "score": 0}
{"id": "eqasc_validation_123", "prediction": "all x y z.((Friction(x) & Truck(y) & Car(z) & Brake(z)) -> Stops(x,y,z))", "score": 0}
{"id": "eqasc_validation_123", "prediction": "all x y.((Friction(x) & Truck(y) & Car(y) & Brake(e)) -> StopsByUsingRebecca(x,e))", "score": 0}
{"id": "eqasc_validation_123", "prediction": "all x y.((LKW(x) & Truck(y) & Car(z)) -> StopsUsingBrakes(x,y,z))", "score": 0}
{"id": "eqasc_validation_123", "prediction": "all x y z.((Than(x) & Transport(y) & Car(z) & UsesBrakes(x,y,z)) -> Discontinues(x,y,z))", "score": 0}
{"id": "eqasc_validation_123", "prediction": "all x y.((Friction(x) & Truck(y) & Car(y)) -> UsedForStopping(x,y))", "score": 0}
{"id": "eqasc_validation_123", "prediction": "all x y z.((Friction(x) & Truck(y) & Car(z)) -> UsesForStopping(x,z))", "score": 0}
{"id": "eqasc_validation_123", "prediction": "all x y z w.((Truck(x) & Car(y) & Brake(z)) -> UsedForStopping(x,y,z))", "score": 0}
{"id": "eqasc_validation_124", "prediction": "all x y.((Flower(x) & SporophytePlant(y) & Dauberant(x,y)) -> FormsOn(x,y))", "score": 0}
{"id": "eqasc_validation_124", "prediction": "all x.(Flower(x) -> FormsOnHomophytePlant(x))", "score": 0}
{"id": "eqasc_validation_124", "prediction": "all x y.((Flower(x) & SporophytePlant(y)) -> FormsOn(x,y))", "score": 0}
{"id": "eqasc_validation_124", "prediction": "all x.(FloweringFlower(x) -> PredominantRosophytePlant(x))", "score": 0}
{"id": "eqasc_validation_124", "prediction": "all x.(Flower(x) -> FormOnDominantSporophytePlant(x))", "score": 0}
{"id": "eqasc_validation_124", "prediction": "all x y.((Flowering(x) & Sporophyte(y)) -> FormsOn(x,y))", "score": 0}
{"id": "eqasc_validation_124", "prediction": "all x y.((Flower(x) & SporophytePlant(y) & Distinct(x,y)) -> FormsOn(x,y))", "score": 0}
{"id": "eqasc_validation_124", "prediction": "all x.(Flower(x) -> FormsOnTropicalSpontrophytePlant(x))", "score": 0}
{"id": "eqasc_validation_124", "prediction": "all x.(Flower(x) -> (DistinctSporophytePlant(x) & FormsOn(x,sporophyte)))", "score": 0}
{"id": "eqasc_validation_124", "prediction": "all x y.((Flower(x) & Sporophyte(y)) -> FormsOn(x,y))", "score": 0}
{"id": "eqasc_validation_124", "prediction": "all x.(Flower(x) -> FormsOnDominantSporophytePlant(x))", "score": 0}
{"id": "eqasc_validation_124", "prediction": "all x y.((Flower(x) & SporophytePlant(y)) -> ToForm(x,y))", "score": 0}
{"id": "eqasc_validation_124", "prediction": "all x y.((Flowering(x) & SporophytePlant(y)) -> Forms(x,y))", "score": 0}
{"id": "eqasc_validation_125", "prediction": "all x.(Spotrophyte(x) -> PossessesStoma(x))", "score": 0}
{"id": "eqasc_validation_125", "prediction": "all x.(Sporophyte(x) -> PossessesStoma(x))", "score": 0}
{"id": "eqasc_validation_125", "prediction": "all x.(Spoorophyte(x) -> PossessesStoma(x))", "score": 0}
{"id": "eqasc_validation_125", "prediction": "all x.(Spokelyte(x) -> PossessesStoma(x))", "score": 0}
{"id": "eqasc_validation_125", "prediction": "all x.( Sporophyte(x) -> PossessesStoma(x))", "score": 0}
{"id": "eqasc_validation_126", "prediction": "all x y z.((Flower(x) & Plant(y) & Stoma(z) & Possesses(y,z)) -> FormsOn(x,y,z))", "score": 0}
{"id": "eqasc_validation_126", "prediction": "all x y.((Flower(x) & Plant(y) & PossessesStoma(y)) -> FormsOn(x,y))", "score": 0}
{"id": "eqasc_validation_126", "prediction": "all x y z.((Flourishe(x) & Plant(y) & Stoma(z)) -> FormsOn(x,y,z))", "score": 0}
{"id": "eqasc_validation_126", "prediction": "all x y.((Flower(x) & Plant(y) & HasStoma(x,y)) -> FormsOn(x,y))", "score": 0}
{"id": "eqasc_validation_126", "prediction": "all x y.((Flower(x) & Plant(y) & HasStoma(y,x)) -> FormsOn(x,y))", "score": 0}
{"id": "eqasc_validation_126", "prediction": "all x y z.((Flower(x) & Plant(y) & Stama(z)) -> FormsOnFrost(x))", "score": 0}
{"id": "eqasc_validation_126", "prediction": "all x y.((Flower(x) & Plant(y) & Stoma(x,y)) -> FormsOn(x,y))", "score": 0}
{"id": "eqasc_validation_126", "prediction": "all x y.((Flower(x) & Plant(y) & PossessesStoma(x,y)) -> FormsOn(x,y))", "score": 0}
{"id": "eqasc_validation_126", "prediction": "all x y.((Flower(x) & Plant(y) & HavesStoma(y)) -> FormsOn(x,y))", "score": 0}
{"id": "eqasc_validation_126", "prediction": "all x y z.((Flower(x) & Plant(y) & Satoma(z)) -> FormsOn(x,y,z))", "score": 0}
{"id": "eqasc_validation_126", "prediction": "all x y z.((Flower(x) & Plant(y) & Plant(z) & PossessesSomas(z)) -> FormsOn(x,y,z))", "score": 0}
{"id": "eqasc_validation_126", "prediction": "all x y.((Flower(x) & Plant(y) & HasStoma(y)) -> FormsOn(x,y))", "score": 0}
{"id": "eqasc_validation_126", "prediction": "all x y.((FloweredFlower(x) & Plant(y) & PossessesStoma(y,x)) -> FlowersFormOn(x,y))", "score": 0}
{"id": "eqasc_validation_126", "prediction": "all x y z.((Flower(x) & Plant(y) & Stoma(z) & Possesses(y,z)) -> FormFormOn(x,y))", "score": 0}
{"id": "eqasc_validation_126", "prediction": "all x y z.((Flower(x) & Plant(y) & Stoma(z) & Possesses(x,y,z)) -> FormsOn(x,y,z))", "score": 0}
{"id": "eqasc_validation_126", "prediction": "all x y z.((Flower(x) & Plant(y) & Stoma(z)) -> FormsOn(x,y,z))", "score": 0}
{"id": "eqasc_validation_127", "prediction": "all x.(Poshtrophyte(x) -> (AppearsEarlyInSpring(x) & SnowMelts(x)))", "score": 0}
{"id": "eqasc_validation_127", "prediction": "all x.(Sporophyte(x) -> (AppearsEarlyInSpring(x) & (MeltsSnow(x) | Snow(x)))))", "score": -1}
{"id": "eqasc_validation_127", "prediction": "all x.(Spoorophyte(x) -> (AppearsAheadInSpring(x) & SoonThriftMagnows(x)))", "score": 0}
{"id": "eqasc_validation_127", "prediction": "all x y.((Sporophyte(x) & Snow(y)) -> AppearsEarlyInSpring(x,y))", "score": 0}
{"id": "eqasc_validation_127", "prediction": "all x y.((Spokéte(x) & Spring(y) & SnowMelts(x)) -> AppearsEarly(x,y))", "score": 0}
{"id": "eqasc_validation_127", "prediction": "all x.(Sporophyte(x) -> (AppearsOfSnow(x,Spring) & InSnowMelts(x,Spring)))", "score": 0}
{"id": "eqasc_validation_127", "prediction": "all x.(Sporophyte(x) -> (AppearsEarlyInSpring(x) & AsSpringMeltsSnow(x)))", "score": 0}
{"id": "eqasc_validation_127", "prediction": "all x.(Sporophyte(x) -> AppearsEarlyInSpring(x))", "score": 0}
{"id": "eqasc_validation_127", "prediction": "all x.(Sporophyte(x) -> (AppearsEarlyInSpring(x) & SoonBetweenSnowMelts(x)))", "score": 0}
{"id": "eqasc_validation_127", "prediction": "all x.(Spokephore(x) -> (AppearsEarlyInSpring(x) & OnceSnowMelts(x)))", "score": 0}
{"id": "eqasc_validation_127", "prediction": "all x y.((Sporophyte(x) & Spring(y) & Wind(z)) -> AppearsEarly(x,y))", "score": 0}
{"id": "eqasc_validation_127", "prediction": "all x.(Spoth(x) -> (AppearsEarlyInSpring(x) & SobaldSnowMelts(x)))", "score": 0}
{"id": "eqasc_validation_127", "prediction": "all x y.((Spoke(x) & Spring(y)) -> AppearsEarly(x,y))", "score": 0}
{"id": "eqasc_validation_127", "prediction": "all x y z.((Spoke(x) & Spring(y) & Snow(z) & FoundedEarly(x,y)) -> Melts(x,z))", "score": 0}
{"id": "eqasc_validation_127", "prediction": "all x.(Hydrogen(x) -> (AppearsSpokeily(x,spring) & As SoonAsSnowMelts(x)))", "score": -1}
{"id": "eqasc_validation_128", "prediction": "all x y z.((Flower(x) & SnowMelt(y) & Snow(z) & Melts(z,y))) -> FormsAfter(x,y,z))", "score": -1}
{"id": "eqasc_validation_128", "prediction": "all x y z.((Flower(x) & Snow(y) & Snow(z) & MeltSnow(y)) -> Forms(x,z))", "score": 0}
{"id": "eqasc_validation_128", "prediction": "all x y.((Flower(x) & SnowMelts(y)) -> FlowersForm(x))", "score": 0}
{"id": "eqasc_validation_128", "prediction": "all x.(Flower(x) -> Melts(x,snow))", "score": 0}
{"id": "eqasc_validation_128", "prediction": "all x y z.(FloweringEarth(x) & Snow(y) & Snow(z) & Melts(y) & Flowers(x)) -> Forms(x,y,z))", "score": -1}
{"id": "eqasc_validation_128", "prediction": "all x y z.((Flower(x) & Snow(y) & Snow(z)) -> Melts(x,y))", "score": 0}
{"id": "eqasc_validation_128", "prediction": "all x y z.((Flower(x) & SnowMelt(y) & SnowMelt(z)) -> FormsAfter(x,y))", "score": 0}
{"id": "eqasc_validation_128", "prediction": "all x.((Flower(x) & MeltsSnow(x)) -> Forms(x))", "score": 0}
{"id": "eqasc_validation_128", "prediction": "all x y.((Flower(x) & SnowMelt(y)) -> Forms(x,y))", "score": 0}
{"id": "eqasc_validation_128", "prediction": "all x y.((Flower(x) & Snow(y) & Melts(x,y)) -> Forms(x))", "score": 0}
{"id": "eqasc_validation_128", "prediction": "all x y z.((Flower(x) & SnowFall(y) & SnowMelts(z) & SnowMelts(w)) -> Forms(x,z,w))", "score": 0}
{"id": "eqasc_validation_128", "prediction": "all x y z.((Flower(x) & Snow(z) & Melts(x,z)) -> FormsAfter(x,z))", "score": 0}
{"id": "eqasc_validation_128", "prediction": "all x.(Flower(x) -> (MeltsSnow(x) & FormsAfter(x)))", "score": 0}
{"id": "eqasc_validation_128", "prediction": "all x y.((Flower(x) & Snow(y)) -> FormsAfterMelts(x,y))", "score": 0}
{"id": "eqasc_validation_128", "prediction": "all x.((Flower(x) & SnowMelts(x)) -> Forms(x))", "score": 0}
{"id": "eqasc_validation_129", "prediction": "all x y z.((Flower(x) & Plant(y) & Stoma(z)) -> FormsOn(x,y & Styma(y,z))", "score": -1}
{"id": "eqasc_validation_129", "prediction": "all x y.((Flower(x) & Plant(y) & FormsAt(x,y) & Stoma(z)) -> Floral(x))", "score": 0}
{"id": "eqasc_validation_129", "prediction": "all x y.((Flower(x) & Plant(y) & Forms(x,y)) -> Stomatoma(x))", "score": 0}
{"id": "eqasc_validation_129", "prediction": "all x y.((Flower(x) & Plant(y)) -> FormsOnWithStoma(x,y))", "score": 0}
{"id": "eqasc_validation_129", "prediction": "all x.((FloweredButterfly(x) & Stoma(x)) -> FormsOnPlant(x))", "score": 0}
{"id": "eqasc_validation_129", "prediction": "all x y.((Flower(x) & Plant(y) & FormsWithStoma(x,y)) -> Blooms(x))", "score": 0}
{"id": "eqasc_validation_129", "prediction": "all x y z.((Flower(x) & Plant(y) & Stima(z) & FormsOn(x,y) & Sktoma(z)) -> FormsOn(x,y,z))", "score": 0}
{"id": "eqasc_validation_129", "prediction": "all x y,z w.((Flower(x) & Plant(y) & Schama(z) & FormsOn(x,y,z)) -> Contains(x,y))", "score": -1}
{"id": "eqasc_validation_129", "prediction": "all x y z.((Flower(x) & Plant(y) & Stoma(z)) -> FormerOnWith(x,y,z))", "score": 0}
{"id": "eqasc_validation_129", "prediction": "all x.((Flower(x) & UponPlant(x,Stoma)) -> FlowerFormsOn(x,Stoma))", "score": 0}
{"id": "eqasc_validation_129", "prediction": "all x y.((Flower(x) & Plant(y)) -> (FormsOn(x,y) & Contains(x,y)))", "score": 0}
{"id": "eqasc_validation_129", "prediction": "all x y z,a.((Flower(x) & Plant(y) & Toxin(z) & FormsOn(x,y,z)) -> Staruma(y))", "score": -1}
{"id": "eqasc_validation_129", "prediction": "all x y.((Flower(x) & Plant(y) & Starma(x,y)) -> FlowersFormOn(x,y))", "score": 0}
{"id": "eqasc_validation_129", "prediction": "all x y z w.((Flower(x) & Plant(y) & Stoma(z) & Forms(x,y) & Stoma(w)) -> FormsOn(x,y,z))", "score": 0}
{"id": "eqasc_validation_129", "prediction": "all x y z w.((Flower(x) & Plant(y) & Stomatosis(z) & In(w)) -> FormsOnWith(x,y,z))", "score": 0}
{"id": "eqasc_validation_129", "prediction": "all x y.((Flower(x) & Plant(y) & Stoma(z)) -> FormsOn(x,y,z))", "score": 0}
{"id": "eqasc_validation_130", "prediction": "All x.(AngiospermSprophyte(x) -> Distinct(x))", "score": -1}
{"id": "eqasc_validation_130", "prediction": "AllergicAngiospermSporophyte(Angiosperm)", "score": 0}
{"id": "eqasc_validation_130", "prediction": "Angiospermsporophyte (Angiosperm) – Dominant(Angiosperm))", "score": -1}
{"id": "eqasc_validation_130", "prediction": "AngiospermSporophyte(s)", "score": 0}
{"id": "eqasc_validation_130", "prediction": "all x.((Angiosperm(x) & Sporophyte(x)) -> Dominant(x))", "score": 0}
{"id": "eqasc_validation_130", "prediction": "All x.((Agiosperm(x) & Sporophyte(x)) -> Dominant(x))", "score": -1}
{"id": "eqasc_validation_130", "prediction": "Angiospermsporophyte (Angiosperm) -> Dominates(Angiosperm))", "score": -1}
{"id": "eqasc_validation_130", "prediction": "Angiosperm Sporophyte is Dominant.", "score": -1}
{"id": "eqasc_validation_130", "prediction": "Angiosperm Sporophyte (exists x.(Agiosperm(x) & Dominant(x)))", "score": -1}
{"id": "eqasc_validation_130", "prediction": "-Drohende(AngiospermSposrophyte)", "score": 0}
{"id": "eqasc_validation_130", "prediction": "all x.(Buoyable(x) -> AngiospermSprophyte(x))", "score": 0}
{"id": "eqasc_validation_130", "prediction": "Descent(AngiospermSporophyte)", "score": 0}
{"id": "eqasc_validation_130", "prediction": "(Dominant(AgiospermSporophyte)", "score": -1}
{"id": "eqasc_validation_130", "prediction": "Angiospermsporophyte(Angiosperm) -> Dominant(Angiosperm))", "score": -1}
{"id": "eqasc_validation_130", "prediction": "All x.((AgiospermSporophyte(x) & InHouse(x)) -> Dominant(x))", "score": -1}
{"id": "eqasc_validation_130", "prediction": "(Dominant(AgiospermSprophyte)", "score": -1}
{"id": "eqasc_validation_131", "prediction": "all x.(Flower(x) -> GrowsOnAngiosperm(x))", "score": 0}
{"id": "eqasc_validation_131", "prediction": "all x.(Flower(x) & FormsOn(x,y))", "score": 0}
{"id": "eqasc_validation_131", "prediction": "all x y.((Flower(x) & Angiosperm(y)) -> FormsOn(x,y))", "score": 0}
{"id": "eqasc_validation_131", "prediction": "all x.(Flower(x) -> FormsOnAngiosperms(x))", "score": 0}
{"id": "eqasc_validation_131", "prediction": "all x y.((Flower(x) & Angiosperm(y)) -> FormOn(x,y))", "score": 0}
{"id": "eqasc_validation_131", "prediction": "all x.(Flower(x) -> FormsOnAgiosperm(x))", "score": 0}
{"id": "eqasc_validation_131", "prediction": "all x.(Flower(x) -> FormsOnAngiosperm(x))", "score": 0}
{"id": "eqasc_validation_131", "prediction": "all x.(Flower(x) -> exists y.(Angiosperm(x) & FormsOn(x,y)))", "score": 0}
{"id": "eqasc_validation_131", "prediction": "all x.(Flower(x) -> FormOnAngiosperm(x))", "score": 0}
{"id": "eqasc_validation_131", "prediction": "all x.(Flower(x) -> ThereBeta(x,Angiosperms))", "score": 0}
{"id": "eqasc_validation_132", "prediction": "all x y z.((Flower(x) & Angiosperm(y) & Angiosperm(z)) -> FormsOn(x,y,z))", "score": 0}
{"id": "eqasc_validation_132", "prediction": "all x.(Flower(x) -> (FormOnAngiosperm(x) & OnAngiosperm(x)))", "score": 0}
{"id": "eqasc_validation_132", "prediction": "all x y.((Flower(x) & Angiosperm(y)) -> FormsOn(x,y))", "score": 0}
{"id": "eqasc_validation_132", "prediction": "all x.(Flower(x) -> FormelsOnAngiosperms(x))", "score": 0}
{"id": "eqasc_validation_132", "prediction": "all x y z w.((Flower(x) & Angiosperm(y) & Angiosperm(u) & Angiosperm(w)) -> FormsOn(x,y))", "score": 0}
{"id": "eqasc_validation_132", "prediction": "all x.(Flower(x) -> (FormsOnAngiosperms(x) & OnAgiosperms(x)))", "score": 0}
{"id": "eqasc_validation_132", "prediction": "all x y z w.((Flower(x) & Angiosperm(y) & Angiosperm(z) & Angiosperm(w)) -> FormsOn(x,y,z))", "score": 0}
{"id": "eqasc_validation_132", "prediction": "all x.(Flower(x) -> exists y.(Agiosperm(y) & FormsOn(x,y)))", "score": 0}
{"id": "eqasc_validation_132", "prediction": "all x.(Flower(x) -> (FormsOn(x,angiosperm) & On(x,angiosperm)))", "score": 0}
{"id": "eqasc_validation_133", "prediction": "(PolygenicTreat(skincolor)", "score": -1}
{"id": "eqasc_validation_133", "prediction": "all x.(SkinColor(x) -> PolygenicTrait(x))", "score": 0}
{"id": "eqasc_validation_133", "prediction": "(PolygenicTait(skin) & -PolygenicTait(skin))", "score": 0}
{"id": "eqasc_validation_133", "prediction": "(PolygenicTax(skincolor) & PolygenicTrait(skin))", "score": 0}
{"id": "eqasc_validation_133", "prediction": "SkinColor(s) & PolygenicTrait(s))", "score": -1}
{"id": "eqasc_validation_133", "prediction": "all x.(SkinColor(x) -> PolygenicTreatment(x))", "score": 0}
{"id": "eqasc_validation_133", "prediction": "all x.(SkinColor(x) -> PolygenicTail(x))", "score": 0}
{"id": "eqasc_validation_133", "prediction": "(PolygenicTreatment(skin,s) & -PolygenicTrait(skin,skin)))", "score": -1}
{"id": "eqasc_validation_133", "prediction": "exists x.(SkinColor(x) & PolygenicTrait(x))", "score": 0}
{"id": "eqasc_validation_133", "prediction": "is another polygenic trait.", "score": -1}
{"id": "eqasc_validation_133", "prediction": "(PolygenicTrait(skincolor)", "score": -1}
{"id": "eqasc_validation_133", "prediction": "(PolygenicTrait(skincolor) & -PolygenicTrait(skincolor))", "score": 0}
{"id": "eqasc_validation_133", "prediction": "IrregularTreatment(i) -> SkinColor(i))", "score": -1}
{"id": "eqasc_validation_134", "prediction": "all x.(Melanin(x) -> GivesTanColor(x))", "score": 0}
{"id": "eqasc_validation_134", "prediction": "all x.(Melanin(x) -> SkinPigment(x) & GivesTanColor(x))", "score": 0}
{"id": "eqasc_validation_134", "prediction": "all x.(Melanin(x) -> SkinPigment(x))", "score": 0}
{"id": "eqasc_validation_134", "prediction": "all x.(Melanin(x) -> (GivenToSkinTanColor(x)))", "score": 0}
{"id": "eqasc_validation_134", "prediction": "all x y.((SkinPigment(x) & Skin(y) & GivesBanColor(x,y)) -> Melanin(x))", "score": 0}
{"id": "eqasc_validation_134", "prediction": "all x.(Melanin(x) -> GivesSkinTanColor(x))", "score": 0}
{"id": "eqasc_validation_134", "prediction": "all x y.((SkinPigment(x) & Skin(y) & GivesTanColor(x,y)) -> Melanin(x))", "score": 0}
{"id": "eqasc_validation_134", "prediction": "all x.(Melanin(x) -> GivesTanColorToSkin(x))", "score": 0}
{"id": "eqasc_validation_134", "prediction": "all x y.((SkinPigment(x) & Melanin(x)) -> GivesTanColor(x,y))", "score": 0}
{"id": "eqasc_validation_135", "prediction": "all x.(MelaninAmount(x) -> PolygenicTrait(x))", "score": 0}
{"id": "eqasc_validation_135", "prediction": "all x.((MelaninAmount(x) & PolygenicTrait(x)) -> MelaninAmount(x))", "score": 0}
{"id": "eqasc_validation_135", "prediction": "all x.(MelaninAddition(x) -> PolygenicTrait(x))", "score": 0}
{"id": "eqasc_validation_135", "prediction": "(PylemgenicTrait(melanin) & PolygenicTrait(melanin))", "score": 0}
{"id": "eqasc_validation_135", "prediction": "all x.(MelaninAbovement(x) -> PolygenicTrait(x))", "score": 0}
{"id": "eqasc_validation_136", "prediction": "all x.(HumanSkin(x) & HumanHairColor(x)) -> PolygenicTreatment(x))", "score": -1}
{"id": "eqasc_validation_136", "prediction": "all x.((HumanSkin(x) & HumanHairColor(x)) -> PolygenicTreatment(x))", "score": 0}
{"id": "eqasc_validation_136", "prediction": "all x.((HumanSkin(x) | HairColor(x)) -> PolygenicTab(x))", "score": 0}
{"id": "eqasc_validation_136", "prediction": "all x.(HumanSkin(x) & HairColor(x)) -> PolygenicTrait(x))", "score": -1}
{"id": "eqasc_validation_136", "prediction": "all x.(Skin(x) | HairColor(x)) -> PolygenicTreatment(x))", "score": -1}
{"id": "eqasc_validation_136", "prediction": "all x.((HumanSkin(x) & HairColor(x)) -> PolygenicTreatment(x))", "score": 0}
{"id": "eqasc_validation_136", "prediction": "all x.((HumanSkin(x) & HairColor(x)) -> PolygenicTrait(x))", "score": 0}
{"id": "eqasc_validation_136", "prediction": "all x.(HumanSkin(x) & HairColor(x)) -> PolygenicTay(x))", "score": -1}
{"id": "eqasc_validation_136", "prediction": "all x.((HumanSkin(x) & HumanHairColor(x)) -> PolygenicTain(x))", "score": 0}
{"id": "eqasc_validation_136", "prediction": "all x.((HumanSkin(x) | HumanHairColor(x)) -> PolygenicTrait(x))", "score": 0}
{"id": "eqasc_validation_137", "prediction": "all x y.((HairColor(x) & HairColor(y) & Polygenic(y)) -> Polygenic(x,y))", "score": 0}
{"id": "eqasc_validation_137", "prediction": "All x.(HairColor(x) -> Polygenic(x))", "score": -1}
{"id": "eqasc_validation_137", "prediction": "all x.(HairColor(x) -> Polygenic(x))", "score": 0}
{"id": "eqasc_validation_137", "prediction": "all x.((HairColor(x) & Polygenic(x)) -> HairColor(x))", "score": 0}
{"id": "eqasc_validation_137", "prediction": "-PolygenicColor(HairColorAndPolygenic(HairColor)", "score": -1}
{"id": "eqasc_validation_137", "prediction": "all x.(HairColor(x) -> (Polygenic(x) & Polygenic(x)))", "score": 0}
{"id": "eqasc_validation_137", "prediction": "all x.((HairColor(x) & Polygenic(x)) -> HairColour(x))", "score": 0}
{"id": "eqasc_validation_137", "prediction": "all x.(ColorColorHair(x) -> Polygenic(x))", "score": 0}
{"id": "eqasc_validation_137", "prediction": "(Polygenic(haircolor) -> Polygenic(hair))", "score": 0}
{"id": "eqasc_validation_137", "prediction": "all x y.((HairColor(x) & HairColor(y) & Polygenic(z)) -> Polygenic(y))", "score": 0}
{"id": "eqasc_validation_138", "prediction": "exists x.(SkinColor(x) & DeterminedByMelaninPigment(x))", "score": 0}
{"id": "eqasc_validation_138", "prediction": "all x.(SkinColour(x) -> DeterminedByMelaninPigmentInSkinCells(x))", "score": 0}
{"id": "eqasc_validation_138", "prediction": "all x y.((Skin(x) & MelaninPigment(y)) -> DeterminedBy(x,y))", "score": 0}
{"id": "eqasc_validation_138", "prediction": "all x y.((SkinColor(x) & MelaninPigment(y) & SkinCell(x)) -> DeterminedBy(x,y))", "score": 0}
{"id": "eqasc_validation_138", "prediction": "all x y.((SkinCell(x) & MelaninPigment(y)) -> DeterminedBy(x,y))", "score": 0}
{"id": "eqasc_validation_138", "prediction": "all x y.((SkinColour(x) & MelaninPigment(y) & SkinCells(x,y)) -> DeterminedBy(x,y))", "score": 0}
{"id": "eqasc_validation_138", "prediction": "all x y.((SkinCell(x) & MelaninPigment(y)) -> DeterminesColor(x,y))", "score": 0}
{"id": "eqasc_validation_138", "prediction": "all x.(SkinColor(x) -> DeterminedByMylaninPigmentInSkinCells(x))", "score": 0}
{"id": "eqasc_validation_138", "prediction": "all x.(SkinColor(x) -> (DistributedByMelaninPigment(x) & InSkinCells(x)))", "score": 0}
{"id": "eqasc_validation_138", "prediction": "all x y.((SkinCorn(x) & MelaninPigment(y)) -> DeterminedBySkinCells(x,y))", "score": 0}
{"id": "eqasc_validation_138", "prediction": "all x y z.((SkinColor(x) & MelaninPigment(y) & Skin(z)) -> Determining(y,z))", "score": 0}
{"id": "eqasc_validation_138", "prediction": "all x.(SkinColor(x) -> DependsOnMelaninPigmentInSkinCells(x))", "score": 0}
{"id": "eqasc_validation_138", "prediction": "all x.((SkinColor(x) & MelaninPigment(x)) -> DeterminedBy(x,SkinCells))", "score": 0}
{"id": "eqasc_validation_138", "prediction": "all x.(SkinColor(x) -> MelaninPigment(x))", "score": 0}
{"id": "eqasc_validation_138", "prediction": "all x y.((SkinColor(x) & MelaninPigment(y)) -> DeterminedBy(x,y))", "score": 0}
{"id": "eqasc_validation_138", "prediction": "all x.(SkinColor(x) -> exists y.(MelaninPigment(y) & InSkinCells(x,y))))", "score": -1}
{"id": "eqasc_validation_139", "prediction": "all x y.((MelaninPigment(x) & PolygenicTrait(y)) -> DeterminedBy(x,y))", "score": 0}
{"id": "eqasc_validation_139", "prediction": "all x.(MelaninPigment(x) -> DeterminedByPolygenicTrait(x))", "score": 0}
{"id": "eqasc_validation_139", "prediction": "all x.(MelaninPigment(x) -> (DivisionByPolygenicTrait(x) & IdentifiedByPylogenicTrait(x)))", "score": 0}
{"id": "eqasc_validation_139", "prediction": "all x.(Melanin(x) -> (Daily(x,PolygenicTrait) & DeterminesPretty(x,Melanin)))", "score": 0}
{"id": "eqasc_validation_139", "prediction": "all x.(SelectiveTrait(x) -> DeterminesMelaninPigment(x))", "score": 0}
{"id": "eqasc_validation_139", "prediction": "all x.(MelaninPigment(x) -> ((PolygenicTrait(x) & DeterminedBy(x,y))))", "score": 0}
{"id": "eqasc_validation_139", "prediction": "all x.(MelaninPigment(x) -> (DeterminedByPolygenicTrait(x)))", "score": 0}
{"id": "eqasc_validation_139", "prediction": "all x.(MelaninPigment(x) -> PolygenicTrait(x))", "score": 0}
{"id": "eqasc_validation_139", "prediction": "all x.((Moolanin(x) & PolygenicTrait(x)) -> DeterminedBy(x,melanin))", "score": 0}
{"id": "eqasc_validation_139", "prediction": "all x.((MelaninPigment(x) & PolygenicTrait(x)) -> Determines(x,melanin,metal))", "score": 0}
{"id": "eqasc_validation_140", "prediction": "all x.(PolygenicHeritage(x) -> (ControlledByUnknownGenes(x)))", "score": 0}
{"id": "eqasc_validation_140", "prediction": "all x.(PolygenicInheritance(x) -> ControlledByUnknownGenes(x))", "score": 0}
{"id": "eqasc_validation_140", "prediction": "all x.(PolygenicInheritance(x) -> UnknownGenes(x))", "score": 0}
{"id": "eqasc_validation_140", "prediction": "all x.(PolygenicHeritance(x) -> (ControlledByUnknownGenes(x,y) & UnknownGenes(x,z)))", "score": 0}
{"id": "eqasc_validation_140", "prediction": "all x.(PolygenicInheritance(x) -> UnknownGatherPositive(x))", "score": 0}
{"id": "eqasc_validation_140", "prediction": "all x.(PolygenicInheritance(x) -> (ControlledByUnknownGenes(x) & PolygenicTraits(x)))", "score": 0}
{"id": "eqasc_validation_140", "prediction": "all x.(PolygenicPatriarchy(x) -> ControlledByUnknownGenes(x))", "score": 0}
{"id": "eqasc_validation_140", "prediction": "all x.(PolygenicInheritance(x) -> ControlledByUnknownNumberOfGenes(x))", "score": 0}
{"id": "eqasc_validation_140", "prediction": "all x y.((PolygenicHeritage(x) & Thermosexual(y)) -> ControledByUnknownGenes(x,y))", "score": 0}
{"id": "eqasc_validation_140", "prediction": "all x.(PolygenicInheritance(x) -> ControledByUnknownGenes(x))", "score": 0}
{"id": "eqasc_validation_140", "prediction": "all x.(PolygenicInheritance(x) -> exists y.(Gene(y) & Controls(x,y)))", "score": 0}
{"id": "eqasc_validation_140", "prediction": "all x.((PolygenicHeritance(x) & UnknownGenes(x)) -> Controls(x,polygenicTraits))", "score": 0}
{"id": "eqasc_validation_140", "prediction": "all x.(PolygenicInheritance(x) -> (PolygenicTreatment(x) & UnknownGenes(x)))", "score": 0}
{"id": "eqasc_validation_140", "prediction": "all x.((PolygenicHeritage(x) & UnknownGeneNumberOfTreatments(x)) -> ControlledBy(x,Pyromone,Gene))", "score": 0}
{"id": "eqasc_validation_140", "prediction": "all x.(PolygenicInheritance(x) -> (PolygenicTrait(x) & ControlledByUnknownGenes(x)))", "score": 0}
{"id": "eqasc_validation_141", "prediction": "all x.(SkinColor(x) -> ControlledByUnknownGenes(x))", "score": 0}
{"id": "eqasc_validation_141", "prediction": "all x.(SkinColor(x) -> ControledByUnknownGenes(x))", "score": 0}
{"id": "eqasc_validation_141", "prediction": "all x.(SkinColor(x) -> exists y.(Gene(y) & Controls(x,y)))", "score": 0}
{"id": "eqasc_validation_141", "prediction": "all x y.((SkinColor(x) & Gene(y)) -> ControlledBy(x,y))", "score": 0}
{"id": "eqasc_validation_141", "prediction": "all x y z.((Skin(x) & Gene(y) & Gene(z)) -> ControlsColor(x,z))", "score": 0}
{"id": "eqasc_validation_141", "prediction": "all x y z.((SkinColor(x) & Gene(y) & KnownNumerous(z)) -> Controls(x,y,z))", "score": 0}
{"id": "eqasc_validation_141", "prediction": "all x.(SkinColor(x) -> (UnknownGene(x) & ControledBy(x,y)))", "score": 0}
{"id": "eqasc_validation_141", "prediction": "all x.(SkinColor(x) -> UnknownGene(x))", "score": 0}
{"id": "eqasc_validation_141", "prediction": "all x.(SkinColor(x) -> UnknownGenes(x))", "score": 0}
{"id": "eqasc_validation_141", "prediction": "all x y.((SkinColor(x) & Gene(y)) -> Controls(x,y))", "score": 0}
{"id": "eqasc_validation_141", "prediction": "all x y.((Gest(x) & SkinColor(y)) -> ControlledBy(x,y))", "score": 0}
{"id": "eqasc_validation_141", "prediction": "all x.(SkinColor(x) -> UnknownNumberOfGenes(x))", "score": 0}
{"id": "eqasc_validation_142", "prediction": "all x.(DentalVariation(x) -> (Polygenic(x) & ControlledByGenes(x)))", "score": 0}
{"id": "eqasc_validation_142", "prediction": "all x.(DentalVariations(x) -> (Polygenic(x) & ControlledByGenes(x)))", "score": 0}
{"id": "eqasc_validation_142", "prediction": "all x y.((DentalVariations(x) & Gene(y)) -> Polygenic(x))", "score": 0}
{"id": "eqasc_validation_142", "prediction": "all x.(DentalVariations(x) -> (Polygenic(x) & ControledByGenes(x)))", "score": 0}
{"id": "eqasc_validation_142", "prediction": "all x.(DentalVariation(x) -> (Polygenic(x) & ControlledBySeveralGenes(x)))", "score": 0}
{"id": "eqasc_validation_142", "prediction": "all x y.((DentalVariation(x) & Gene(y)) -> Polygenic(x,y))", "score": 0}
{"id": "eqasc_validation_142", "prediction": "all x.(DentalVariation(x) -> (Polygenic(x) & exists y.(Gene(y) & Controls(x,y))))", "score": 0}
{"id": "eqasc_validation_142", "prediction": "all x.(DentalVariations(x) & Polygenic(x) & ControlledByGenes(x))", "score": 0}
{"id": "eqasc_validation_143", "prediction": "all x y.((SkinColor(x) & Gene(y)) -> ControlledByGathers(x,y))", "score": 0}
{"id": "eqasc_validation_143", "prediction": "all x y.((SkinColor(x) & Gene(y) & ControlledBy(x,y)) -> Trait(x,y))", "score": 0}
{"id": "eqasc_validation_143", "prediction": "all x.(SkinColor(x) -> GeneConsults(x,y))", "score": 0}
{"id": "eqasc_validation_143", "prediction": "all x.(HasGenes(x) -> SkinColorControlled(x))", "score": 0}
{"id": "eqasc_validation_143", "prediction": "all x.(SkinColor(x) -> (ControlledByGenes(x) & ThereOtherGenes(x)))", "score": 0}
{"id": "eqasc_validation_143", "prediction": "all x y.((SkinColor(x) & Gene(y)) -> ControlledBy(x,y))", "score": 0}
{"id": "eqasc_validation_143", "prediction": "(TraitControlledByGenes(skincolor)", "score": -1}
{"id": "eqasc_validation_143", "prediction": "all x.(SkinColortrait(x) -> ControlledByGenes(x))", "score": 0}
{"id": "eqasc_validation_143", "prediction": "all x.(SkinColor(x) -> (ControlledByGenes(x) & ContaminatedByGenes(x)))", "score": 0}
{"id": "eqasc_validation_143", "prediction": "all x.(SkinColor(x) -> (ControllableByGenes(x) & Genes(x)))", "score": 0}
{"id": "eqasc_validation_143", "prediction": "exists x.(SkinColor(x) & Gene(x) & ControledBy(x,y))", "score": 0}
{"id": "eqasc_validation_143", "prediction": "all x.(SkinColor(x) -> (InfluencedByGenes(x) | InfluencedByGenes(x)))", "score": 0}
{"id": "eqasc_validation_143", "prediction": "all x.(SkinColor(x) -> (ConsultedByGenes(x) & Controls(x,multipleGenes)))", "score": 0}
{"id": "eqasc_validation_143", "prediction": "all x.(SkinColor(x) -> exists y.(Gene(x) & Controls(x,y)))", "score": 0}
{"id": "eqasc_validation_144", "prediction": "all x.(TouretteSyndrom(x) -> (PolygenicDetection(x) & Theme(x)))", "score": 0}
{"id": "eqasc_validation_144", "prediction": "all x y.((Tourette(x) & Dysfunction(y) & Polygenic(x)) -> Disorder(x,y))", "score": 0}
{"id": "eqasc_validation_144", "prediction": "all x y z.((TouretteSyndrom(x) & MolecularDisorder(y) & Genetic(z)) -> Polygenic(y))", "score": 0}
{"id": "eqasc_validation_144", "prediction": "all x.(TouretteSyndrom(x) -> PolygenicDisorder(x))", "score": 0}
{"id": "eqasc_validation_144", "prediction": "all x.(TouretteSyndrom(x) -> (PolygenicDisorder(x) & MultipleDisorder(x)))", "score": 0}
{"id": "eqasc_validation_144", "prediction": "all x y.((Tourette(x) & PolygenicDisorder(y)) -> (Syndrome(x) & Dysfunction(x)))", "score": 0}
{"id": "eqasc_validation_144", "prediction": "all x.((TouretteSyndrom(x) & PolygenicDisorder(x)) -> Dysfunction(x))", "score": 0}
{"id": "eqasc_validation_144", "prediction": "all x.(TouretteSyndrom(x) -> (PolygenicDisorder(x) & Disorder(x,y)))", "score": 0}
{"id": "eqasc_validation_144", "prediction": "all x y.((TouretteSyndrom(x) & PolygenicDisorder(y)) -> Onthermic(x,y))", "score": 0}
{"id": "eqasc_validation_144", "prediction": "all x y.((TouretteSyndrom(x) & PolygenicDisorder(y)) -> Disorder(x,y))", "score": 0}
{"id": "eqasc_validation_144", "prediction": "all x.(Tourette(x) -> (PolygenicDisorder(x) & -Polygenic(x)))", "score": 0}
{"id": "eqasc_validation_144", "prediction": "all x.(TouretteSyndrom(x) -> (PolygenicDisorder(x) & GeneticDisorder(x)))", "score": 0}
{"id": "eqasc_validation_145", "prediction": "all x.(TouretteSyndrom(x) -> Trait(x))", "score": 0}
{"id": "eqasc_validation_145", "prediction": "all x y z.((TouretteSyndrom(x) & Trait(y) & Trait(z) & Tourette(y)) -> Trait(z,x))", "score": 0}
{"id": "eqasc_validation_145", "prediction": "all x.(TouretteSyndrom(x) -> (Trait(x) & Trait(x)))", "score": 0}
{"id": "eqasc_validation_145", "prediction": "all x.((TouretteSyndrom(x) & Trait(x)) -> Trait(x))", "score": 0}
{"id": "eqasc_validation_146", "prediction": "all x.(PolygenicTreatment(x) -> VariatesOverWideRange(x))", "score": 0}
{"id": "eqasc_validation_146", "prediction": "all x y.((PolygenicTraits(x) & Phenotype(x) & PolygenicTrait(y)) -> variesoverWideRange(x,y))", "score": 0}
{"id": "eqasc_validation_146", "prediction": "all x.((PhenotypicExpression(x) & PolygenicTreatments(x)) -> VariatesOverWideRange(x))", "score": 0}
{"id": "eqasc_validation_146", "prediction": "all x.((PhenotypicExpressionOfPolygenicTraits(x)) -> VaryingOverWideRange(x))", "score": 0}
{"id": "eqasc_validation_146", "prediction": "all x.(FenomenotypicExpression(x) -> DiversifiesOverWideRange(x))", "score": 0}
{"id": "eqasc_validation_146", "prediction": "all x.((PolygenicTrait(x) & PhenotypicExpression(x)) -> VariatesOverWideRange(x))", "score": 0}
{"id": "eqasc_validation_146", "prediction": "all x.(PhenomenotypicExpressionOfPolygenicTreatments(x) -> VariatesOverWideRange(x))", "score": 0}
{"id": "eqasc_validation_146", "prediction": "all x y.((PhenotypicExpression(x) & PolygenicTreatment(y)) -> VarysOverWideRange(x,y))", "score": 0}
{"id": "eqasc_validation_146", "prediction": "all x.((PhenotypicExpression(x) & PolygenicTreatment(x)) -> VarysOverWideRange(x))", "score": 0}
{"id": "eqasc_validation_146", "prediction": "all x y z.((PhenotypicExpression(x) & PolygenicTraits(y) & VariatesWideRange(x,z)) -> VariatesWideRange(z,y))", "score": 0}
{"id": "eqasc_validation_146", "prediction": "all x y.((PhenotypicExpression(x) & PolygenicTarget(y)) -> VariatesOverWideRange(x,y))", "score": 0}
{"id": "eqasc_validation_146", "prediction": "all x.(HasPolygenicTreatments(x) -> VarietyOfWideRange(x))", "score": 0}
{"id": "eqasc_validation_146", "prediction": "all x y.((Expression(x) & InTreatments(y)) -> VariableOverWideRange(x,y))", "score": 0}
{"id": "eqasc_validation_146", "prediction": "all x.(PhenotypicExpression(x) -> VaryOverWideRange(x))", "score": 0}
{"id": "eqasc_validation_147", "prediction": "all x.(SkinColor(x) -> PhenomenologicalExpression(x))", "score": 0}
{"id": "eqasc_validation_147", "prediction": "all x.(SkinColor(x) -> PhenotypicExpression(x))", "score": 0}
{"id": "eqasc_validation_147", "prediction": "all x.(SkinColor(x) -> PhenomeneticExpression(x))", "score": 0}
{"id": "eqasc_validation_147", "prediction": "all x.(SkinColor(x) -> PhenomenalExpression(x))", "score": 0}
{"id": "eqasc_validation_147", "prediction": "all x.(SkinColor(x) -> Phenotype(x))", "score": 0}
{"id": "eqasc_validation_147", "prediction": "all x.(SkinColour(x) -> PhenotypicExpression(x))", "score": 0}
{"id": "eqasc_validation_148", "prediction": "all x.(PolygenicTrait(x) -> ControledByTwoOrMoreGenes(x))", "score": 0}
{"id": "eqasc_validation_148", "prediction": "all x y.((PolygenicTraits(x) & Gene(y)) -> ControledBy(x,y))", "score": 0}
{"id": "eqasc_validation_148", "prediction": "all x.(PolygenicTraits(x) -> (ContainableByGene(x,2) | ControledByGene(x,3)))", "score": 0}
{"id": "eqasc_validation_148", "prediction": "all x.(PolygenicTrait(x) -> (CoversGene(x,2) | ControlsGene(x,9)))", "score": 0}
{"id": "eqasc_validation_148", "prediction": "all x.(PolygenicTraits(x) -> ControledByTwo(x))", "score": 0}
{"id": "eqasc_validation_148", "prediction": "all x.(PolygenicTrait(x) -> (ControledByGene(x,2) | ControledByGene(x,3)))", "score": 0}
{"id": "eqasc_validation_148", "prediction": "all x.(PolygenicTreatment(x) -> (ControledByTwoOrMoreGenes(x)))", "score": 0}
{"id": "eqasc_validation_148", "prediction": "all x.(PolygenicTrait(x) -> (ManagedByGenes(x,2) | MangedByGenes(x,3)))", "score": 0}
{"id": "eqasc_validation_148", "prediction": "all x.(PolygenicTreatment(x) -> (ControledByGenes(x,y) | ControledByGenes(x,z)))", "score": 0}
{"id": "eqasc_validation_148", "prediction": "all x.(PolygenicTrait(x) -> ControledByEitherGene(x,y))", "score": 0}
{"id": "eqasc_validation_148", "prediction": "all x.(PolygenicTax(x) -> (RegulatesTax(x,y) & (IsRegulatedByGene(y) | IsRegulatedByGene(x,y))))", "score": 0}
{"id": "eqasc_validation_148", "prediction": "all x.(PolygenicTraits(x) -> ControlledByGenes(x,2))", "score": 0}
{"id": "eqasc_validation_148", "prediction": "all x.(PolygenicTreatment(x) -> exists y.(Gene(y) & Controls(x,y)))", "score": 1}
{"id": "eqasc_validation_148", "prediction": "all x.(PolygenicTreatment(x) -> (ControlledByGene(x,2) | ControlledByGene(x,3)))", "score": 0}
{"id": "eqasc_validation_148", "prediction": "all x.(PolygenicTrait(x) -> ControlledByGenes(x,2))", "score": 0}
{"id": "eqasc_validation_148", "prediction": "all x.(PolygenicTraits(x) -> (ContainGathers(x,2) | ControlGathers(x,10)))", "score": 0}
{"id": "eqasc_validation_149", "prediction": "all x y.((SkinColor(x) & Gene(y)) -> Controls(x,y))", "score": 0}
{"id": "eqasc_validation_149", "prediction": "all x.(ControlledByGene(x) -> (SkinColor(x,six) | Genome(s) & Gene(s) & ControlledByGene(x,s2)))", "score": 0}
{"id": "eqasc_validation_149", "prediction": "all x y.((SkinColor(x) & Gene(y) & ManagedByGene(x,y)) -> ControlsGums(x,y))", "score": 0}
{"id": "eqasc_validation_149", "prediction": "all x.((SkinColor(x) & Genes(y) & ControlSkinColor(x,y)) -> ControlSkinColor(x,y))", "score": 0}
{"id": "eqasc_validation_149", "prediction": "all x y.((SkinColor(x) & Gene(y)) -> ControlledBy(x,y))", "score": 0}
{"id": "eqasc_validation_149", "prediction": "all x y.((SkinColor(x) & Gene(y)) -> Controls(y,x))", "score": 0}
{"id": "eqasc_validation_149", "prediction": "all x.((SkinColor(x) & Gene(x)) -> ControlledBy(x,(Gene(x,(Gene(x,2) | Gene(x,3))))", "score": -1}
{"id": "eqasc_validation_149", "prediction": "all x y z.((SkinCorn(x,y) & Gene(y) & Gene(z)) -> (ChangesSkinColor(y,z) & Controls(z,y)))", "score": 0}
{"id": "eqasc_validation_149", "prediction": "all x.(SkinColor(x) -> (ControlledBy(x,two) | ControlledBy(x,more)))", "score": 0}
{"id": "eqasc_validation_149", "prediction": "all x.((SkinColor(x) & Gene(y,2)) -> ControlledBy(x,y))", "score": 0}
{"id": "eqasc_validation_149", "prediction": "all x.(SkinColor(x) -> (exists y.(Gene(y) & Controls(x,y)) | exists z.(Gene(z) & Controls(z,x)))))", "score": -1}
{"id": "eqasc_validation_149", "prediction": "all x.((SkinColor(x) & ControlledByGenes(x)) -> ControlsGenes(x))", "score": 0}
{"id": "eqasc_validation_149", "prediction": "all x y.((SkinColor(x) & Gene(y)) -> (ControlledBy(x,y) & ControlledBy(x,z)))", "score": 0}
{"id": "eqasc_validation_149", "prediction": "all x.(ControlsSkinColor(x) -> (Gene(x,2) | Gene(x,3)))", "score": 0}
{"id": "eqasc_validation_149", "prediction": "all x y z w.((SkinColor(x) & Gene(y) & Gene(z) & Controls(w)) -> (exists w.(Gene(w) & Controls(z,w)) & Controls(w,s))))", "score": -1}
{"id": "eqasc_validation_150", "prediction": "all x.((ComplexCharacteristics(x) & Polygenic(x) & InfluencedByMultipleGenes(x)) -> InteractedBy(x))", "score": 0}
{"id": "eqasc_validation_150", "prediction": "all x.((ComplexCharacteristics(x) & Polygenic(x)) -> InfluencedByMultipleGenes(x))", "score": 0}
{"id": "eqasc_validation_150", "prediction": "all x.(ComplexCharacteristics(x) -> Polygenic(x))", "score": 0}
{"id": "eqasc_validation_150", "prediction": "all x.((ComplexCharacteristics(x) & Polygenic(x)) -> InfluencedByGenes(x))", "score": 0}
{"id": "eqasc_validation_150", "prediction": "all x.(CommplexCharacteristics(x) -> (Polygenic(x) | InfluencedByGenes(x)))", "score": 0}
{"id": "eqasc_validation_150", "prediction": "all x.(ComplexCharacteristics(x) -> (Polygenic(x) & InfluencedByMultipleGenes(x)))", "score": 0}
{"id": "eqasc_validation_150", "prediction": "all x y.((SimpleCharacteristics(x) & Gene(y)) -> Polygenic(x))", "score": 0}
{"id": "eqasc_validation_150", "prediction": "all x.((ComplexCharacteristics(x) & Polygenic(x) & InfluencedByMultipleGenes(x)) -> InFollowingGenes(x))", "score": 0}
{"id": "eqasc_validation_150", "prediction": "all x.(ComplexCharacteristics(x) -> (Polygenic(x) & InfluencedByGenes(x)))", "score": 0}
{"id": "eqasc_validation_150", "prediction": "all x.((ComplexCharacteristics(x) & Polygenic(x) & InfluencedByMultipleGenes(x)) -> Influential(x))", "score": 0}
{"id": "eqasc_validation_151", "prediction": "all x.(SkinColor(x) -> InfluencedByGenes(x))", "score": 0}
{"id": "eqasc_validation_151", "prediction": "all x.(SkinColor(x) -> InfluencedByMultipleGenes(x))", "score": 0}
{"id": "eqasc_validation_151", "prediction": "all x y.((SkinColor(x) & Gene(y)) -> InfluencedBy(x,y))", "score": 0}
{"id": "eqasc_validation_151", "prediction": "all x.exists y.(Gene(x) & SkinColor(y) & InfluencedBy(x,y))", "score": 0}
{"id": "eqasc_validation_152", "prediction": "all x y z.((PigmentCell(x) & Skin(y) & Color(z)) | Tint(z)) | Gives(x,y))", "score": -1}
{"id": "eqasc_validation_152", "prediction": "all x.(PigmentCell(x) -> (GivesColorOrTinteToSkin(x)))", "score": 0}
{"id": "eqasc_validation_152", "prediction": "exists x.(PigmentCell(x) & GivesColorOrTongueToSkin(x))", "score": 0}
{"id": "eqasc_validation_152", "prediction": "all x.(PigmentCell(x) -> (GivesColor(x) | GivesTongue(x)))", "score": 0}
{"id": "eqasc_validation_152", "prediction": "all x.(PigmentCell(x) -> (GivesColor(x) | GivesTinte(x)))", "score": 0}
{"id": "eqasc_validation_152", "prediction": "all x y.((PigmentCell(x) & Skin(y)) -> GivesColorOrTonn(x,y))", "score": 0}
{"id": "eqasc_validation_152", "prediction": "all x.(PingmentCell(x) -> (GivesColor(x) | GivesTinte(x)))", "score": 0}
{"id": "eqasc_validation_152", "prediction": "all x.(PigmentCell(x) -> (GivesColorToSkin(x) | GivesTinteToSkin(x)))", "score": 0}
{"id": "eqasc_validation_152", "prediction": "all x.(PiummentCell(x) -> (Own(x,color) | Give(x,tint)))", "score": 0}
{"id": "eqasc_validation_152", "prediction": "all x.(GivingColorOrToning(x) -> PigmentCell(x))", "score": 0}
{"id": "eqasc_validation_152", "prediction": "all x.(PigmentCell(x) -> (GivesColor(x) | GivesTint(x)))", "score": 0}
{"id": "eqasc_validation_152", "prediction": "all x.((PigmentCell(x) & GivesColor(x)) | GivesTinte(x))", "score": 0}
{"id": "eqasc_validation_152", "prediction": "all x.(PigmentCell(x) -> GivesColorOrTinselToSkin(x))", "score": 0}
{"id": "eqasc_validation_153", "prediction": "all x.(Pigment(x) -> PolygenicTrait(x))", "score": 0}
{"id": "eqasc_validation_153", "prediction": "exists x.(Pigment(x) & PolygenicTrait(x))", "score": 0}
{"id": "eqasc_validation_153", "prediction": "(PolygenicTrait(pigment) & PolygenicTrait(pigment))", "score": 0}
{"id": "eqasc_validation_153", "prediction": "(PolygenicTrait(pigment) | PolygenicTrait(pigment))", "score": 0}
{"id": "eqasc_validation_153", "prediction": "ist ein weiterer polygenicTrait(pigment)", "score": -1}
{"id": "eqasc_validation_153", "prediction": "(PolygenicTraits(pigment) -> PolygenicTrait(pigment))", "score": 0}
{"id": "eqasc_validation_154", "prediction": "all x y.((Color(x) & Skin(y)) -> DependsOnMelaninInContent(x,y))", "score": 0}
{"id": "eqasc_validation_154", "prediction": "all x y.((Color(x) & Skin(y)) -> DependsOn(x,y))", "score": 0}
{"id": "eqasc_validation_154", "prediction": "all x.(Colored(x) -> DependsOnMelanin(x))", "score": 0}
{"id": "eqasc_validation_154", "prediction": "all x y.((Color(x) & Skin(y)) -> DependsOnMelanin(x,y))", "score": 0}
{"id": "eqasc_validation_154", "prediction": "all x.(Color(x) -> DependsOnMelaninContentInSkin(x))", "score": 0}
{"id": "eqasc_validation_154", "prediction": "(DependsOnMelaninContentInSkin(Colored))", "score": 0}
{"id": "eqasc_validation_154", "prediction": "all x.(Color(x) -> DependsOn(x,melanin))", "score": 0}
{"id": "eqasc_validation_154", "prediction": "all x.(Color(x) -> DependsOn(x,MelaninInSkin))", "score": 0}
{"id": "eqasc_validation_154", "prediction": "all x.(Color(x) -> DependsOnMelaninInSkin(x))", "score": 0}
{"id": "eqasc_validation_154", "prediction": "all x y.((Color(x) & Skin(y)) -> DependsOnMelaninContent(x,y))", "score": 0}
{"id": "eqasc_validation_154", "prediction": "all x.(Color(x) & DependsOnMelanin(x))", "score": 0}
{"id": "eqasc_validation_154", "prediction": "all x.(Color(x) -> DependsOnSkinLend(x))", "score": 0}
{"id": "eqasc_validation_154", "prediction": "ALL X Y.((Color(x) & Skin(y)) -> DependsOnMelaninContent(x,y))", "score": -1}
{"id": "eqasc_validation_155", "prediction": "all x.(MelaninContent(x) -> PolygenicTrait(x))", "score": 0}
{"id": "eqasc_validation_155", "prediction": "all x.((MelaninContent(x) & PolygenicTrait(x)) -> PolygeneticTreatment(x))", "score": 0}
{"id": "eqasc_validation_155", "prediction": "all x.((MelaninContent(x) & PolygenicTrait(x)) -> PolygeneticTrait(x))", "score": 0}
{"id": "eqasc_validation_155", "prediction": "all x.((MelaninContent(x) & PolygenicTrait(x)) -> PolygenicTrait(x))", "score": 0}
{"id": "eqasc_validation_155", "prediction": "all x.((MelaninContent(x) & PolygenicTreat(x)) -> PolygenicTrait(x))", "score": 0}
{"id": "eqasc_validation_155", "prediction": "all x y.((MelaninContent(x) & PolygenicTrait(y)) -> PolygenicTrait(x))", "score": 0}
{"id": "eqasc_validation_155", "prediction": "all x y.((MelaninContent(x) & PolygenicTrait(y) & PolygenicTrait(y)) -> PolygenicTrait(x,y))", "score": 0}
{"id": "eqasc_validation_156", "prediction": "all x y.((PhenotypicExpression(x) & SkinColor(y)) -> VariatesOverWideRange(x,y))", "score": 0}
{"id": "eqasc_validation_156", "prediction": "all x.(PhilenotypicExpressionOfSkinColor(x) -> Variable OverWideRange(x))", "score": -1}
{"id": "eqasc_validation_156", "prediction": "all x.(PhenotypicExpression(x) -> SkinColorVariety(x))", "score": 0}
{"id": "eqasc_validation_156", "prediction": "all x y.((PhenotypicExpressionOfSkinColor(x) & WideRange(y)) -> Variable(x))", "score": 0}
{"id": "eqasc_validation_156", "prediction": "all x.(DiverseExpression(x) -> SkinColor(x))", "score": 0}
{"id": "eqasc_validation_156", "prediction": "all x y.((PhenotypicExpression(x) & SkinColor(y)) -> Variates(x,y))", "score": 0}
{"id": "eqasc_validation_156", "prediction": "all x y.((PhenotypicExpression(x) & SkinColor(y)) -> DifferentSkinColor(x,y))", "score": 0}
{"id": "eqasc_validation_156", "prediction": "all x y.((SkinColor(x) & PhenotypicExpression(x,y)) -> Variance(x,y))", "score": 0}
{"id": "eqasc_validation_156", "prediction": "all x.(PhenotypicExpression(x) -> SkinColor(x))", "score": 0}
{"id": "eqasc_validation_156", "prediction": "all x.((SkinColored(x) & PhenotypicExpression(x)) -> VariatesOverWideRange(x))", "score": 0}
{"id": "eqasc_validation_156", "prediction": "all x.(PhenomenologicalExpressionOfSkinColor(x) -> VariatesOverWideRange(x))", "score": 0}
{"id": "eqasc_validation_156", "prediction": "all x y.((SkinColor(x) & SkinType(y)) -> varies(x,y))", "score": 0}
{"id": "eqasc_validation_156", "prediction": "all x y z.((Appearance(x,y) & SkinColor(z) & Phenotypic(x)) -> Variable(x,z))", "score": 0}
{"id": "eqasc_validation_156", "prediction": "all x.((SkinColor(x) & PhenotypicExpression(x)) -> VariableSkinColorOverWideRange(x))", "score": 0}
{"id": "eqasc_validation_156", "prediction": "all x y.((PhenotypicExpression(x) & SkinColor(y) & WideRange(y)) -> VariatesOverWideRange(x,y))", "score": 0}
{"id": "eqasc_validation_156", "prediction": "all x.((CheertypicExpression(x) & SkinColor(y)) -> DispliesOverWideRange(x,y))", "score": 0}
{"id": "eqasc_validation_157", "prediction": "all x.(ReptileParent(x) -> ProvidesLittleCare(x))", "score": 0}
{"id": "eqasc_validation_157", "prediction": "all x y z.((ReptileParent(x) & Young(y) & Family(z) & ProvidesLittleCare(x,y)) -> ProvidesTo(x,z))", "score": 0}
{"id": "eqasc_validation_157", "prediction": "all x.(ReptileParent(x) -> ProvidesLittleCareToYoung(x))", "score": 0}
{"id": "eqasc_validation_157", "prediction": "all x y z.((ReptileParent(x) & Child(y) & Young(z)) -> ProvidesLittleCare(x,y))", "score": 0}
{"id": "eqasc_validation_157", "prediction": "all x y.((ReptileParent(x) & Young(y)) -> ProvidesLittleCreativity(x,y))", "score": 0}
{"id": "eqasc_validation_157", "prediction": "all x y.((ReptileParent(x) & Young(y)) -> ProvidesLittleCare(x,y))", "score": 0}
{"id": "eqasc_validation_157", "prediction": "all x.((ReptileParent(x) & Young(y)) -> ProvidesLittleCare(x,y))", "score": 0}
{"id": "eqasc_validation_157", "prediction": "all x.(ReptileParent(x) -> (Provides(x,y) & LittleCare(x)))", "score": 0}
{"id": "eqasc_validation_158", "prediction": "all x.((Mother(x) & Reptile(x)) -> ProvidesMuchMoreParentalCare(x))", "score": 0}
{"id": "eqasc_validation_158", "prediction": "all x y.((CrocodilianMother(x) & Reptile(y)) -> ProvidesMostPaperalCare(x,y))", "score": 0}
{"id": "eqasc_validation_158", "prediction": "all x y.((Pupil(x) & Reptile(y)) -> ProvidesMostParentalCare(x,y))", "score": 0}
{"id": "eqasc_validation_158", "prediction": "all x.(Mother(x) -> ProvidesMostParentalCareComparedToReptile(x))", "score": 0}
{"id": "eqasc_validation_158", "prediction": "all x.((CrocodylianMother(x) & Reptile(y)) -> ProvidesMostParentalCare(x,y))", "score": 0}
{"id": "eqasc_validation_158", "prediction": "all x y.((Reptile(x) & CrocodilianMother(y)) -> ProvidesMostParentalCare(y,x))", "score": 0}
{"id": "eqasc_validation_158", "prediction": "all x.(CrocodilianMother(x) -> ProvidesMostParentalCare(x))", "score": 0}
{"id": "eqasc_validation_158", "prediction": "all x y.((Mother(x) & Crocodilian(x) & Reptile(y)) -> ProvidesMostParentalCare(x,y))", "score": 0}
{"id": "eqasc_validation_158", "prediction": "all x.((Mother(x,crocodilian) & Reptile(x)) -> ProvidesMostParentalCare(x))", "score": 0}
{"id": "eqasc_validation_158", "prediction": "all x.((Mother(x) & Crocodilian(x)) -> ProvidesMoreParentalCare(x,Crocodilian,Reptile))", "score": 0}
{"id": "eqasc_validation_158", "prediction": "all x.((Mother(x) & Crocodilian(x)) -> ProvidesMostParentalCare(x))", "score": 0}
{"id": "eqasc_validation_158", "prediction": "all x.((Mother(x) & Crocodilian(x)) -> ProvidesMoreParentalCare(x,y))", "score": 0}
{"id": "eqasc_validation_158", "prediction": "all x y.((Mother(x) & Reptile(y)) -> ProvidesMostParentalCare(x,y))", "score": 0}
{"id": "eqasc_validation_158", "prediction": "all x.((Mother(x) & Reptile(x)) -> ProvidesMostParentalCare(x))", "score": 0}
{"id": "eqasc_validation_158", "prediction": "all x.(CRocodilianMother(x) -> ProvidesMostParentalCare(x))", "score": 0}
{"id": "eqasc_validation_159", "prediction": "all x.(Crocodyilian(x) -> AttentiveParent(x))", "score": 0}
{"id": "eqasc_validation_159", "prediction": "all x.((Mother(x) & Crocodilian(x)) -> MostAttentiveReptile(x))", "score": 0}
{"id": "eqasc_validation_159", "prediction": "all x.(Mother(x) -> (CrocodilianMother(x) & AttentivePastor(x)))", "score": 0}
{"id": "eqasc_validation_159", "prediction": "all x.((Mother(x) & Crocodilian(x)) -> AwareRptileParent(x))", "score": 0}
{"id": "eqasc_validation_159", "prediction": "all x.(CrocodilianMother(x) -> AppropriateReptileParent(x))", "score": 0}
{"id": "eqasc_validation_159", "prediction": "all x.((CrocodilianMother(x) & ReptileParent(x)) -> Attentive(x))", "score": 0}
{"id": "eqasc_validation_159", "prediction": "all x.((Mother(x) & Crocodillian(x)) -> AttentiveReptileParent(x))", "score": 0}
{"id": "eqasc_validation_159", "prediction": "all x.(Mother(x) -> (Crocodilian(x) & Attentive(x)))", "score": 0}
{"id": "eqasc_validation_159", "prediction": "all x.((Mother(x) & Crocodilian(x)) -> AttentiveReptileParent(x))", "score": 0}
{"id": "eqasc_validation_159", "prediction": "all x.((Mother(x) & Crocodilian(x)) -> CarefulReptileParent(x))", "score": 0}
{"id": "eqasc_validation_159", "prediction": "all x.((Mother(x) & Crocodilian(x)) -> AttentiveReptile(x))", "score": 0}
{"id": "eqasc_validation_159", "prediction": "all x.((Mother(x) & CrocodilianMother(x)) -> AwareReptileParent(x))", "score": 0}
{"id": "eqasc_validation_159", "prediction": "all x.((MotherToCrocodynilian(x) & ReptileParent(y)) -> Attentive(x,y))", "score": 0}
{"id": "eqasc_validation_160", "prediction": "all x.(Iguana(x) -> (GoodReptile(x) & ExperiencedCaregivers(x)))", "score": 0}
{"id": "eqasc_validation_160", "prediction": "all x.(Iguana(x) -> GoodReptile(x))", "score": 0}
{"id": "eqasc_validation_160", "prediction": "all x.(Iguana(x) -> (GoodReptiles(x) & ExperiencedCaregivers(x)))", "score": 0}
{"id": "eqasc_validation_160", "prediction": "all x y z.((Iguana(x) & Reptile(y) & Caretakers(z)) -> Good(x,y,z))", "score": 0}
{"id": "eqasc_validation_160", "prediction": "all x y.((Iguana(x) & ReptileCaregiver(y)) -> GoodFor(x,y))", "score": 0}
{"id": "eqasc_validation_160", "prediction": "all x.(Iguana(x) -> (GoodReptile(x) & GoodForExperiencedCaregivers(x)))", "score": 0}
{"id": "eqasc_validation_160", "prediction": "all x.(Iguana(x): (GoodReptile(x) & UsedByExperiencedReptileCaregivers(x)))", "score": -1}
{"id": "eqasc_validation_160", "prediction": "all x.(Iguana(x) -> (GoodReptile(x) & ExperiencedCaretakers(x)))", "score": 0}
{"id": "eqasc_validation_160", "prediction": "all x.(Iguana(x) -> (GoodReptile(x) & ForExpiredReptileCaregivers(x)))", "score": 0}
{"id": "eqasc_validation_160", "prediction": "all x.(Iguana(x) -> (GoodReptile(x) & ForExperiencedReptileCaregivers(x)))", "score": 0}
{"id": "eqasc_validation_160", "prediction": "all x.(Iguana(x) -> GoodReptileForEmployeeCaregivers(x))", "score": 0}
{"id": "eqasc_validation_161", "prediction": "all x y.((IguanaParent(x) & YoungIguana(y)) -> ProvidesLittleCareTo(x,y))", "score": 0}
{"id": "eqasc_validation_161", "prediction": "all x y.((IguanaParent(x) & Young(y)) -> ProvidesLittleCareTo(x,y))", "score": 0}
{"id": "eqasc_validation_161", "prediction": "all x y.((IguanaParent(x) & Young(y)) -> ProvidesLittleCare(x,y))", "score": 0}
{"id": "eqasc_validation_161", "prediction": "all x y z.((IguanaParent(x) & Young(y) & Iguana(z)) -> ProvidesLittleCareFor(x,y,z))", "score": 0}
{"id": "eqasc_validation_161", "prediction": "all x y.((IguanaParent(x) & Iguana(y)) -> ProvidesLittleCareToYoung(x,y))", "score": 0}
{"id": "eqasc_validation_161", "prediction": "all x y.((IguanaParent(x) & Young(y) & ProvidesLittleCare(x,y)) -> ProvidesLittleCare(x,y))", "score": 0}
{"id": "eqasc_validation_161", "prediction": "all x y z.((IguanaParent(x) & Young(y) & Iguana(z)) -> ProvidesLittleCare(x,y,z))", "score": 0}
{"id": "eqasc_validation_161", "prediction": "all x.(IguanaParent(x) -> ProvidesMinimalCare(x))", "score": 0}
{"id": "eqasc_validation_161", "prediction": "all x y.((IguanaParent(x) & Young(y)) -> ProvidesLessCareTo(x,y))", "score": 0}
{"id": "eqasc_validation_161", "prediction": "all x y z.((IguanaParent(x) & Young(y) & Iguana(z)) -> ProvidesLittleCareTo(x,z))", "score": 0}
{"id": "eqasc_validation_162", "prediction": "all x.((Egg(x) & Sabotages(x)) -> NoParentalCare(x))", "score": 0}
{"id": "eqasc_validation_162", "prediction": "all x.((Genealing(x) & AdoptsEggs(x) & -PrescribesParentalCare(x)) -> IsFilmingAt(x))", "score": 0}
{"id": "eqasc_validation_162", "prediction": "all x.((Sparrowing(x) & Mammal(x)) -> (Abandon-Eggs(x) & -ProvidesParentalCare(x)))", "score": -1}
{"id": "eqasc_validation_162", "prediction": "all x.(Spaterning(x) -> (AbandonesEggs(x) & -ProvidesParentalCare(x)))", "score": 0}
{"id": "eqasc_validation_162", "prediction": "all x y.((Swallow(x) & Egg(y)) -> (Abandons(x,y) | ProvidesNoParentalCare(x,y)))", "score": 0}
{"id": "eqasc_validation_162", "prediction": "all x.((Sparrowing(x) & AbandonEggs(x) & ProvideFaith(x)) -> NoParentalCare(x))", "score": 0}
{"id": "eqasc_validation_162", "prediction": "all x.((Sparrowing(x) & Seedless(x)) -> (AbandonsEggs(x) & -ProvidesParentalCare(x)))", "score": 0}
{"id": "eqasc_validation_162", "prediction": "all x.(Spreading(x) -> (AbandonEggs(x) & ProvideNoParentalCare(x)))", "score": 0}
{"id": "eqasc_validation_162", "prediction": "all x.(Sows(x) -> (Abandone(x,Eggs) & -ProvidesParentalCare(x)))", "score": 0}
{"id": "eqasc_validation_162", "prediction": "all x.(Sparrowing(x) -> (Abandon(x,eggs) & Provide(x,parentalCare)))", "score": 0}
{"id": "eqasc_validation_162", "prediction": "all x.((Spokening(x) & AbandonEggs(x) & -ProvideParentalCare(x)) -> InsertPaperparentship(x))", "score": 0}
{"id": "eqasc_validation_162", "prediction": "all x y.((Egg(x) & Egg(y)) -> (Abandon(x,y) & NoParentalCare(x,y)))", "score": 0}
{"id": "eqasc_validation_162", "prediction": "all x.(Enjoy(x) -> (AbandonsEggs(x) & NoParentalCare(x)))", "score": 0}
{"id": "eqasc_validation_162", "prediction": "all x.(Sparrowing(x) -> (AbandonsEggs(x) & -ProvidesParentalCare(x)))", "score": 0}
{"id": "eqasc_validation_162", "prediction": "all x y.((Certain(x) & Egg(y) & AfterSharing(x)) -> (Abandons(x,y) & ProvidesNoParentalCare(x,y)))", "score": 0}
{"id": "eqasc_validation_162", "prediction": "all x.((Sparrowing(x) & AbandoneEggs(x) & NoParentalCare(x)) -> NoParentalCare(x))", "score": 0}
{"id": "eqasc_validation_163", "prediction": "all x y.((ReptileParent(x) & Egg(y)) -> Abandones(x,y))", "score": 0}
{"id": "eqasc_validation_163", "prediction": "all x y.((ReptileParent(x) & Egg(y)) -> AdoptsOrBakes(x,y))", "score": 0}
{"id": "eqasc_validation_163", "prediction": "all x y z.((ReptileParent(x) & Egg(y) & Egg(z) & Reptile(x)) -> Abandons(x,y,z))", "score": 0}
{"id": "eqasc_validation_163", "prediction": "all x y.((ReptileParent(x) & ReptileParent(y)) -> (AbandonsEggs(x,y) & ReptileParent(x)))", "score": 0}
{"id": "eqasc_validation_163", "prediction": "all x.(ReptileParent(x) -> AdoptsEggs(x))", "score": 0}
{"id": "eqasc_validation_163", "prediction": "all x y z w.((ReptileParent(x) & Egg(y) & Egg(z) & Egg(w)) -> AbandonsEggs(x,y,z),w))", "score": -1}
{"id": "eqasc_validation_163", "prediction": "all x y.((ReptileParent(x) & Egg(y)) -> Abandons(x,y))", "score": 0}
{"id": "eqasc_validation_163", "prediction": "all x y.((ReptileParent(x) & Reptile(y) & AdoptsEggs(y,x)) -> AbandonsEggs(y,x))", "score": 0}
{"id": "eqasc_validation_163", "prediction": "all x y.((ReptileParent(x) & Egg(y)) -> (Abandons(x,y) & Returning(x,y)))", "score": 0}
{"id": "eqasc_validation_163", "prediction": "all x y.((ReptileParent(x) & Reptile(y)) -> AdoptsEggs(y,x))", "score": 0}
{"id": "eqasc_validation_163", "prediction": "all x y z.((ReptilePatient(x) & Eggs(y) & Eggs(z) & Abandon(x,y,z)) -> ReptileParent(x))", "score": 0}
{"id": "eqasc_validation_163", "prediction": "all x y z.((ReptileParent(x) & Egg(y) & Reptile(z)) -> (AbandonsEggs(x,y) & Egg(y)))", "score": 0}
{"id": "eqasc_validation_163", "prediction": "all x y z.((ReptilePastor(x) & Egg(y) & Reptile(z)) -> Abandons(x,y,z))", "score": 0}
{"id": "eqasc_validation_163", "prediction": "all x y.((Person(x) & Reptile(y) & -AbandonsEggs(x,y)) -> ReptilePatient(x))", "score": 0}
{"id": "eqasc_validation_164", "prediction": "all x.((Alligator(x) | Crocodile(x)) -> LargestLivingRptile(x))", "score": 0}
{"id": "eqasc_validation_164", "prediction": "all x.((Reptile(x) & (Alligator(x) | Crocodile(x))) -> Largest(x))", "score": 0}
{"id": "eqasc_validation_164", "prediction": "all x.((Alligator(x) | Crocodile(x)) -> LargestLivingReptile(x))", "score": 0}
{"id": "eqasc_validation_164", "prediction": "all x.((Reptile(x) & Reptile(x)) -> (Alligator(x) | Crocodile(x)))", "score": 0}
{"id": "eqasc_validation_164", "prediction": "all x.((Alient(x) | Crocodile(x)) -> LargestLivingReptile(x))", "score": 0}
{"id": "eqasc_validation_164", "prediction": "all x y z.((Alligator(x) & Crocodile(y) & Reptile(z)) -> (Largest(z) & LivesIn(x,y,z)))", "score": 0}
{"id": "eqasc_validation_164", "prediction": "all x y.((Reptile(x) & Alligator(x) & Crocodile(y)) -> TheLargest(x))", "score": 0}
{"id": "eqasc_validation_164", "prediction": "all x.((Alligator(x) | Crocodile(x))) -> LargestReptile(x))", "score": -1}
{"id": "eqasc_validation_164", "prediction": "all x y.((Alligator(x) | Crocodile(y)) -> LargestReptile(x,y))", "score": 0}
{"id": "eqasc_validation_164", "prediction": "all x.((Alligator(x) | Crocodile(x)) -> LargestLivedReptile(x))", "score": 0}
{"id": "eqasc_validation_164", "prediction": "all x.((Alligator(x) | Crocodile(x)) -> LargestReptile(x))", "score": 0}
{"id": "eqasc_validation_164", "prediction": "(LargestReptile(all x y z.((LeiddIn(x,y) & (Alligator(z) | Crocodile(z))) -> LargestReptile(x)))", "score": -1}
{"id": "eqasc_validation_164", "prediction": "all x y.((Aligator(x) | Crocodile(y)) -> LargestLivedReptile(x,y))", "score": 0}
{"id": "eqasc_validation_165", "prediction": "all x y z.((Alligator(x) | Crocodile(y) & Young(z)) & Young(z)) -> (ProvidesLittleCare(x,z) & ProvidesLittleCareTo(x,z)))", "score": -1}
{"id": "eqasc_validation_165", "prediction": "all x y.((Parent(x) & Alligator(x) & Crocodile(y)) -> ProvidesLittleCareToYoung(x,y))", "score": 0}
{"id": "eqasc_validation_165", "prediction": "all x y.((Alligator(x) & Crocodile(y)) -> ProvidesLittleCareToYoung(x,y))", "score": 0}
{"id": "eqasc_validation_165", "prediction": "all x y.((Alligator(x) | Crocodile(y)) & Child(y)) -> LittleCare(x,y))", "score": -1}
{"id": "eqasc_validation_165", "prediction": "all x y.((Mother(x) & Alligator(x)) | Mother(y) & Crocodile(y)) -> ProvidesLessCareToYoung(x,y))", "score": -1}
{"id": "eqasc_validation_165", "prediction": "all x.(Aligator(x) | CrocodileParent(x)) & LittleCare(x)) -> PrestationToYearly(x,y))", "score": -1}
{"id": "eqasc_validation_165", "prediction": "all x y.((Alligator(x) | Crocodile(x)) & Parent(y)) -> ProvidesLittleCareToYoung(y,x))", "score": -1}
{"id": "eqasc_validation_165", "prediction": "all x.((AlligatorParent(x) | CrocodileParent(x)) -> ProvidesLittleCareToYoung(x))", "score": 0}
{"id": "eqasc_validation_165", "prediction": "all x y.((Alligator(x) & CrocodileParent(y)) -> ProvidesLittleCareToYoung(x,y))", "score": 0}
{"id": "eqasc_validation_165", "prediction": "all x.(ProvidesLittleCare(x) -> (Alligator(x) | Crocodile(x)))", "score": 0}
{"id": "eqasc_validation_165", "prediction": "all x y.((Parent(x) & Alligator(y) & Crocodile(x)) -> ProvidesLittleCareToYoung(x,y))", "score": 0}
{"id": "eqasc_validation_165", "prediction": "all x y z.((Alligator(x) | Crocodile(y) & Child(z)) & ProvidesLittleCare(x,z)) -> ProvidesLittleCareTo(z,y))", "score": -1}
{"id": "eqasc_validation_165", "prediction": "all x.((Alligator(x) | CrocodileParent(x)) -> ProvideLittleCareToYoung(x))", "score": 0}
{"id": "eqasc_validation_165", "prediction": "all x y z.((Alligator(x) & CrocodileParent(y) & Young(z)) -> (PoorAligatorParent(y) & LittleCare(z) & Young(y)))", "score": 0}
{"id": "eqasc_validation_165", "prediction": "all x.((Parent(x) & (Alligator(x) | Crocodile(x))) -> ProvidesLittleCare(x))", "score": 0}
{"id": "eqasc_validation_165", "prediction": "all x y z.((Alligator(x) | Crocodile(y) & Alligator(z)) & Crocodile(z)) -> ProvidesLittleCareToYoung(x,y,z))", "score": -1}
{"id": "eqasc_validation_166", "prediction": "all x.(Lizard(x) -> Reptile(x))", "score": 0}
{"id": "eqasc_validation_166", "prediction": "all x.(lizard(x) -> Reptile(x))", "score": 0}
{"id": "eqasc_validation_166", "prediction": "all x.(Girl(x) -> Reptile(x))", "score": 0}
{"id": "eqasc_validation_167", "prediction": "all x.(LizardParent(x) -> ProvidesLittleCareToYoung(x))", "score": 0}
{"id": "eqasc_validation_167", "prediction": "all x y.((LizardParent(x) & Young(y)) -> ProvidesLittleKnowledge(x,y))", "score": 0}
{"id": "eqasc_validation_167", "prediction": "all x y z.((GiladiardParent(x) & Young(y) & Young(z)) -> ProvidesLittleCare(x,y))", "score": 0}
{"id": "eqasc_validation_167", "prediction": "all x y.((LizardParent(x) & Young(y)) -> ProvidesLittleCare(x,y))", "score": 0}
{"id": "eqasc_validation_167", "prediction": "all x.(lizardPastor(x) -> ProvidesLittleCareToYoung(x))", "score": 0}
{"id": "eqasc_validation_167", "prediction": "all x y.((LizardParent(x) & Young(y)) -> (ProvidesSlightCare(x,y) | ProvidesPoorCare(x,y)))", "score": 0}
{"id": "eqasc_validation_167", "prediction": "all x y.((LizardParent(x) & Young(y)) -> ProvidesLittleChildCare(x,y))", "score": 0}
{"id": "eqasc_validation_167", "prediction": "all x.(LizardParent(x) -> ProvidesWildCareToYoung(x))", "score": 0}
{"id": "eqasc_validation_167", "prediction": "all x y z.((LizardParent(x) & Young(y) & Young(z)) -> ProvidesLittleCare(x,y,z))", "score": 0}
{"id": "eqasc_validation_167", "prediction": "all x.(SilverParent(x) -> ProvidesLittleCare(x))", "score": 0}
{"id": "eqasc_validation_167", "prediction": "all x y.((RizzardParent(x) & Young(y)) -> ProvidesLittleCare(x,y))", "score": 0}
{"id": "eqasc_validation_167", "prediction": "all x y z.((LizardParent(x) & Young(y) & Lizard(z)) -> ProvidesLittleCare(x,y))", "score": 0}
{"id": "eqasc_validation_167", "prediction": "all x.(GrillParent(x) -> (ProvidesLittleCare(x) & Young(x)))", "score": 0}
{"id": "eqasc_validation_167", "prediction": "all x.(Pastor(x) -> (LizardParent(x) & LittleCare(x)))", "score": 0}
{"id": "eqasc_validation_167", "prediction": "all x y.((LizardParent(x) & Young(y)) -> ProvidesTo(x,y))", "score": 0}
{"id": "eqasc_validation_168", "prediction": "all x y.((CrocodilianMother(x) & Young(y)) -> ProvidesCareTo(x,y))", "score": 0}
{"id": "eqasc_validation_168", "prediction": "all x y z.((CrocodynilianMother(x) & Young(y) & CrocodilianMother(z) & ProvidesCareTo(x,y,z)) -> ProvidesCare(x,y),z))", "score": -1}
{"id": "eqasc_validation_168", "prediction": "all x y.((Mother(x) & Crocodilian(y) & Young(y)) -> ProvidesCareTo(x,y))", "score": 0}
{"id": "eqasc_validation_168", "prediction": "all x.((Mother(x) & Crocodillian(x)) -> ProvidesCareToYoung(x))", "score": 0}
{"id": "eqasc_validation_168", "prediction": "all x.(Mother(x) -> ProvidesCareToYoung(x))", "score": 0}
{"id": "eqasc_validation_168", "prediction": "all x y.((Mother(x) & Crocodilian(y) & Crocodilian(x)) -> ProvidesCareToYoung(x,y))", "score": 0}
{"id": "eqasc_validation_168", "prediction": "all x.((Mother(x) & Crocodilian(x)) -> ProvidesCareToYear(x,y))", "score": 0}
{"id": "eqasc_validation_168", "prediction": "all x y.((CrocodylianMother(x) & Young(y)) -> ProvidesCare(x,y))", "score": 0}
{"id": "eqasc_validation_168", "prediction": "all x y z.((Mother(x) & Crocodilian(y) & Young(z)) -> ProvidesCareTo(x,y,z))", "score": 0}
{"id": "eqasc_validation_168", "prediction": "all x y.((CrocodynilianMother(x) & Young(y)) -> ProvidesCareTo(x,y))", "score": 0}
{"id": "eqasc_validation_168", "prediction": "all x y.((Mammal(x) & Crocodilian(y)) -> ProvidesCareTo(x,y))", "score": 0}
{"id": "eqasc_validation_168", "prediction": "all x y.((Mother(x,y) & Crocodillian(y)) -> ProvidesCare(x,y))", "score": 0}
{"id": "eqasc_validation_168", "prediction": "all x y.((CrocoidalMother(x) & Young(y)) -> ProvidesCareTo(x,y))", "score": 0}
{"id": "eqasc_validation_168", "prediction": "all x y z.((Mother(x) & Crocodilian(y) & Young(z)) -> ProvidesCareTo(x,y))", "score": 0}
{"id": "eqasc_validation_168", "prediction": "all x y.((CrocodillianMother(x) & Young(y)) -> ProvidesCare(x,y,y))", "score": 0}
{"id": "eqasc_validation_168", "prediction": "all x.(CrocodilianMammal(x) -> ProvidesCareToYoung(x))", "score": 0}
{"id": "eqasc_validation_169", "prediction": "all x.(Geckos(x) -> Reptile(x))", "score": 0}
{"id": "eqasc_validation_169", "prediction": "all x.(Son(x) -> Reptile(x))", "score": 0}
{"id": "eqasc_validation_169", "prediction": "all x.(Gecco(x) -> Reptile(x))", "score": 0}
{"id": "eqasc_validation_170", "prediction": "all x y.((GeckoParent(x) & YoungGecko(y)) -> ProvidesLittleCareTo(x,y))", "score": 0}
{"id": "eqasc_validation_170", "prediction": "all x y.((GeckoParent(x) & YoungLetGoBack(y,x)) -> ProvidesLittleIfAnyCare(x,y))", "score": 0}
{"id": "eqasc_validation_170", "prediction": "all x.(GeckoParent(x) -> (ProvideLittleCare(x) & Young(x)))", "score": 0}
{"id": "eqasc_validation_170", "prediction": "all x.(GeckoParent(x) -> ProvidesLittleCare(x))", "score": 0}
{"id": "eqasc_validation_170", "prediction": "all x.(GeckoParent(x) -> ProvidesLittleIfNoCare(x))", "score": 0}
{"id": "eqasc_validation_170", "prediction": "all x y z.((GeckoParent(x) & Young(y) & Young(z)) -> ProvidesLittleCare(x,y,z))", "score": 0}
{"id": "eqasc_validation_170", "prediction": "all x y.((GeckoParent(x) & Young(y)) -> ProvidesLittleCare(x,y))", "score": 0}
{"id": "eqasc_validation_170", "prediction": "all x y.((GeckoParent(x) & Young(y)) -> ProvidesLittleSupport(x,y))", "score": 0}
{"id": "eqasc_validation_170", "prediction": "all x y.((GeckoParent(x) & Young(y) & ProvidesLittle(x,y)) -> ProvidesCool(x,y))", "score": 0}
{"id": "eqasc_validation_170", "prediction": "all x y.((GeckoParent(x) & Young(y)) -> \"ProvidesLittleIfNoCare(x,y)))", "score": -1}
{"id": "eqasc_validation_170", "prediction": "all x y z.((GeckoParent(x) & YoungAngel(y) & YoungAngel(z)) -> ProvidesLittleCare(x,y,z))", "score": 0}
{"id": "eqasc_validation_170", "prediction": "all x.(GeckoParent(x) -> ProvidesLittleIfAnyCare(x,y))", "score": 0}
{"id": "eqasc_validation_171", "prediction": "all x.(Reptile(x) -> ColdBlooded(x))", "score": 0}
{"id": "eqasc_validation_171", "prediction": "All x.(Reptile(x) -> ColdBlooded(x))", "score": -1}
{"id": "eqasc_validation_171", "prediction": "all x.(Rptile(x) -> ColdBlooded(x))", "score": 0}
{"id": "eqasc_validation_171", "prediction": "all x.(HasColdBlooded(x) -> Reptile(x))", "score": 0}
{"id": "eqasc_validation_172", "prediction": "all x.(KillBloodedParents(x) -> ProvidesLittleCare(x,Young))", "score": 0}
{"id": "eqasc_validation_172", "prediction": "all x.(ColdBlooded(x) -> ProvidesLittleCareToYoung(x))", "score": 0}
{"id": "eqasc_validation_172", "prediction": "all x.((SoldBloodedParent(x) & Young(x)) -> ProvidesLittleCare(x))", "score": 0}
{"id": "eqasc_validation_172", "prediction": "all x y.((ColdBloodedParent(x) & Young(y)) -> ProvidesLittleCare(x,y))", "score": 0}
{"id": "eqasc_validation_172", "prediction": "all x.(ColdBloodedParents(x) -> ProvidesLessCareToYoung(x))", "score": 0}
{"id": "eqasc_validation_172", "prediction": "all x.(ColdBloodedParent(x) -> ProvidesLittleCare(x))", "score": 0}
{"id": "eqasc_validation_172", "prediction": "all x.(ColdBloodedParent(x) -> ProvidesLittleCareToYoung(x))", "score": 0}
{"id": "eqasc_validation_172", "prediction": "all x.((ColdBloodedParent(x) & ProvidesLittleCare(x)) -> ColdBlooded(x))", "score": 0}
{"id": "eqasc_validation_172", "prediction": "all x.((ColdBloodedParent(x) & PreservesLittleCare(x)) -> ProvidesChildren(x))", "score": 0}
{"id": "eqasc_validation_173", "prediction": "all x y.((GroundTissue(x) & Plant(y)) -> MakesCupInterior(x,y))", "score": 0}
{"id": "eqasc_validation_173", "prediction": "all x y.((GroundTissue(x) & Plant(y)) -> MakesUpInterior(x,y))", "score": 0}
{"id": "eqasc_validation_173", "prediction": "all x.(GroundTissue(x) -> MakesUpInteriorOfPlant(x))", "score": 0}
{"id": "eqasc_validation_173", "prediction": "all x.((GroundTissue(x) & Plant(y)) -> MakesUpInterior(x,y))", "score": 0}
{"id": "eqasc_validation_173", "prediction": "all x y.((GroundTissue(x) & Plant(y)) -> MakesCarefulInterior(x,y))", "score": 0}
{"id": "eqasc_validation_173", "prediction": "all x.(ImaginePrimaryIntegrity(x) -> GroundTissue(x))", "score": 0}
{"id": "eqasc_validation_173", "prediction": "all x y z.((GroundTissue(x) & Plant(y) & Interior(z)) -> MakesUp(x,z))", "score": 0}
{"id": "eqasc_validation_173", "prediction": "all x.(GroundTissue(x) -> MakesUpInteriorOf(x,Plant))", "score": 0}
{"id": "eqasc_validation_173", "prediction": "all x.(GroundTissue(x) -> OftenMakingUpInteriorOfPlant(x))", "score": 0}
{"id": "eqasc_validation_174", "prediction": "all x.(Oak(x) -> AcquiredPlant(x))", "score": 0}
{"id": "eqasc_validation_174", "prediction": "all x.(Oak(x) -> VeryCommonlyAttackedPlant(x))", "score": 0}
{"id": "eqasc_validation_174", "prediction": "all x.(Oak(x) -> MostCommonlyAttackedPlant(x))", "score": 0}
{"id": "eqasc_validation_174", "prediction": "all x.(Oak(x) -> OftenAttachedPlant(x))", "score": 0}
{"id": "eqasc_validation_174", "prediction": "(asksOak(oh) -> CommonlyAttackedPlant(oh))", "score": 0}
{"id": "eqasc_validation_174", "prediction": "all x.(Oak(x) -> MostFrequentlyAttackedPlant(x))", "score": 0}
{"id": "eqasc_validation_174", "prediction": "all x.(Oak(x) -> AttackedPlant(x))", "score": 0}
{"id": "eqasc_validation_174", "prediction": "all x.(Oak(x) -> MostCommonlyAttachedPlant(x))", "score": 0}
{"id": "eqasc_validation_174", "prediction": "all x.(Oak(x) -> FrequentlyAttackedPlant(x))", "score": 0}
{"id": "eqasc_validation_174", "prediction": "all x.(Oak(x) -> MostCommunityAttackedPlant(x))", "score": 0}
{"id": "eqasc_validation_174", "prediction": "all x.(Oak(x) -> TheMostFrequentlyAttachedPlant(x))", "score": 0}
{"id": "eqasc_validation_174", "prediction": "all x.(Oak(x) -> MostCommonlyAssaultedPlant(x))", "score": 0}
{"id": "eqasc_validation_174", "prediction": "all x.(Oak(x) -> MostFailedAttachedPlant(x))", "score": 0}
{"id": "eqasc_validation_174", "prediction": "all x.(Oak(x) -> (UsuallyAttackedPlant(x) | FrequentlyAttackedPlant(x)))", "score": 0}
{"id": "eqasc_validation_175", "prediction": "all x.(OakOak(x) -> (GroundTissue(x) & Interior(x,y)-Prod.(y) & Interior(y))))", "score": -1}
{"id": "eqasc_validation_175", "prediction": "all x y.((GroundTissue(x) & Oak(y)) -> (MakesUpInterior(x,y) & MakesUpInterior(x,y)))", "score": 0}
{"id": "eqasc_validation_175", "prediction": "all x y.((GroundTissue(x) & Oak(y)) -> MakesUpInteriorOf(x,y))", "score": 0}
{"id": "eqasc_validation_175", "prediction": "all x y.((GroundTissue(x) & Oak(y)) -> MakesUpInteriorOfOak(x,y))", "score": 0}
{"id": "eqasc_validation_175", "prediction": "all x y.((GroundTissue(x) & Oak(y) & Interior(y,x)) -> MakesUpPlace(x,y))", "score": 0}
{"id": "eqasc_validation_175", "prediction": "all x y.((GroundTissue(x) & Oak(y)) -> MakesUpInterior(x,y))", "score": 0}
{"id": "eqasc_validation_175", "prediction": "all x.((CastlePurpose(x) & OakPurpose(x)) -> MakesMainInterior(x,y))", "score": 0}
{"id": "eqasc_validation_175", "prediction": "all x y.((GroundTissue(x,y) & Oak(y)) -> MakeUpInterior(x,y))", "score": 0}
{"id": "eqasc_validation_175", "prediction": "all x.(Oak(x) -> MakesUPAlmostAllIntroductsInside(x,y))", "score": 0}
{"id": "eqasc_validation_175", "prediction": "all x y.((GroundTissue(x) & Oak(y)) -> PartOfInterior(x,y))", "score": 0}
{"id": "eqasc_validation_175", "prediction": "all x y.((GroundTissue(x) & Oak(y)) -> MadeUpInterior(x,y))", "score": 0}
{"id": "eqasc_validation_175", "prediction": "all x.((GroundTissue(x) & Oak(x)) -> MakesUpInterior(x,Interior))", "score": 0}
{"id": "eqasc_validation_176", "prediction": "all x y.((VascularTissue(x) & RootsInvolved(x,y)) -> DrawsWaterIntoPlant(x,y))", "score": 0}
{"id": "eqasc_validation_176", "prediction": "all x y z.((VascularTissue(x) & Roots(y) & Plant(z)) -> DrawsWaterIntoPlantFromGround(x,z))", "score": 0}
{"id": "eqasc_validation_176", "prediction": "all x y.((VascularTissue(x) & Roots(y)) -> DrawsWaterFromGround(x,y))", "score": 0}
{"id": "eqasc_validation_176", "prediction": "all x y.((VascularTissue(x) & Roots(y)) -> DrawsWaterIntoPlantFromGround(x,y))", "score": 0}
{"id": "eqasc_validation_176", "prediction": "all x y.((VascularTissue(x) & Root(y) & Involves(x,y)) -> DrawsWaterIntoPlantFromGround(x))", "score": 0}
{"id": "eqasc_validation_176", "prediction": "all x.((VascularTissue(x) & Roots(x)) -> DrawWaterInPlantFromGround(x))", "score": 0}
{"id": "eqasc_validation_176", "prediction": "all x y.((VascularTissue(x) & Roots(y) & InvolvesDrawWater(x,y)) -> DrawsWaterIntoPlant(x,y))", "score": 0}
{"id": "eqasc_validation_176", "prediction": "all x y z.(((VascularTissue(x) & RootsInvolved(y) & Plant(z) & Ground(z)) -> CanDrawWaterInto(x,z))", "score": -1}
{"id": "eqasc_validation_176", "prediction": "all x y z.((AerialTissue(x) & Root(y) & Plant(z)) -> (CreatesWaterFromGround(x,z) & DrawsWater(y,z)))", "score": 0}
{"id": "eqasc_validation_176", "prediction": "all x y.((VascularTissue(x) & Roots(y) & Plant(z)) -> DrawsWaterIntoGround(x,z))", "score": 0}
{"id": "eqasc_validation_176", "prediction": "all x y.((VAScularTissue(x) & Roots(y) & Plant(z)) -> DrawsWaterInto(x,z))", "score": 0}
{"id": "eqasc_validation_176", "prediction": "all x y.((VascularTissue(x) & Roots(y)) -> (CanDrawWaterIntoPlantFromGround(x) & DrawWaterIntoPlant(y,x)))", "score": 0}
{"id": "eqasc_validation_176", "prediction": "all x.((VascularTissue(x) & Roots(x)) -> DrawsWaterIntoPlant(x))", "score": 0}
{"id": "eqasc_validation_176", "prediction": "all x y.((VascularTissue(x) & Roots(y) & Plant(z) & InvolvesDrawingWater(x,y,z)) -> Inplant(x))", "score": 0}
{"id": "eqasc_validation_176", "prediction": "all x.((VascularTissue(x) & RootsInvolved(x)) -> DrawsWaterIntoPlantFromGround(x))", "score": 0}
{"id": "eqasc_validation_177", "prediction": "all x y.((VascularTissue(x) & Roots(y)) -> MakesUpInteriorOfPlant(x,y))", "score": 0}
{"id": "eqasc_validation_177", "prediction": "all x.((VascularTissue(x) & Roots(x)) -> MakeUpInteriorOfPlant(x))", "score": 0}
{"id": "eqasc_validation_177", "prediction": "all x.((VascularTissue(x) & Roots(x)) -> InteriorOfPlant(x))", "score": 0}
{"id": "eqasc_validation_177", "prediction": "all x.((VascularTissue(x) & Roots(x)) -> MakeupInteriorOfPlant(x))", "score": 0}
{"id": "eqasc_validation_177", "prediction": "all x y z.((ValscularTissue(x) & Roots(y) & Plant(z)) -> MakesUpInterior(x,y,z))", "score": 0}
{"id": "eqasc_validation_177", "prediction": "all x y.((VascularTissue(x) & Roots(y)) -> MakesUpInterior(x,y))", "score": 0}
{"id": "eqasc_validation_177", "prediction": "all x y z.((VascularTissue(x) & Roots(y) & Plant(z)) -> MakesUpInterior(x,y,z))", "score": 0}
{"id": "eqasc_validation_177", "prediction": "all x y z.((VascularTissue(x) & Roots(y) & Plant(z)) -> (MakesUpInterior(x,y,z) & MakesUpInterior(x,z)))", "score": 0}
{"id": "eqasc_validation_177", "prediction": "all x y.((VascularTissue(x) & Roots(y)) -> MakesUpInsideOfPlant(x,y))", "score": 0}
{"id": "eqasc_validation_177", "prediction": "all x y.((Foundation(x) & Plant(y) & VascularTissueAndRoots(x)) -> InteriorTo(x,y))", "score": 0}
{"id": "eqasc_validation_177", "prediction": "all x.((VascularTissue(x) & Roots(x)) -> MakesUPInteriorOfPlant(x))", "score": 0}
{"id": "eqasc_validation_178", "prediction": "all x.(Fern(x) -> SeedlessPlant(x))", "score": 0}
{"id": "eqasc_validation_179", "prediction": "all x.((GroundTissue(x) & Interior(y)) -> MostInside(x,y))", "score": 0}
{"id": "eqasc_validation_179", "prediction": "all x y.((GroundTissue(x) & Fern(y)) -> MakesUpInterior(x,y))", "score": 0}
{"id": "eqasc_validation_179", "prediction": "all x y z.((Gentil(x) & Fern(y) & GroundTissue(z)) -> MakesUpInteriorOf(x,y,z))", "score": 0}
{"id": "eqasc_validation_179", "prediction": "all x y.((GroundTissue(x) & Fern(y)) -> MuchOfInterior(x,y))", "score": 0}
{"id": "eqasc_validation_179", "prediction": "all x.((GroundTissue(x) & InteriorOfFerns(x)) -> MakesUpTheMostOfAlmostEveryPlace(x))", "score": 0}
{"id": "eqasc_validation_179", "prediction": "all x y.((GroundTissue(x) & Fern(y)) -> MakesUpInteriorOfInterior(x,y))", "score": 0}
{"id": "eqasc_validation_179", "prediction": "all x.((GroundTissue(x) & InteriorOfFirns(x)) -> MakesUpMostOfInterior(x,ferns))", "score": 0}
{"id": "eqasc_validation_179", "prediction": "all x.((GroundTissue(x) & Furnish(x)) -> MakesUpInteriorMajority(x,ferns))", "score": 0}
{"id": "eqasc_validation_179", "prediction": "all x y.((GradTissue(x) & Fern(y)) -> MakesUpInterior(x,y))", "score": 0}
{"id": "eqasc_validation_179", "prediction": "all x.(GroundTissue(x) -> MAKESUPInteriorOfFerns(x))", "score": 0}
{"id": "eqasc_validation_179", "prediction": "all x.(GroundTissue(x) -> MakesUpInteriorOfFerns(x))", "score": 0}
{"id": "eqasc_validation_179", "prediction": "all x.(GroundTissue(x) -> (MostInside(x,ferns) & MadeUpInside(x,ferns)))", "score": 0}
{"id": "eqasc_validation_179", "prediction": "all x y z.((GroundTissue(x) & Fern(y) & Interior(z)) -> MakesUpInterior(x,y,z))", "score": 0}
{"id": "eqasc_validation_180", "prediction": "all x.(Plant(x) -> HoldsNutrientsInTissue(x))", "score": 0}
{"id": "eqasc_validation_180", "prediction": "all x y.((Plant(x) & Tissue(y)) -> HoldsNutrientsIn(x,y))", "score": 0}
{"id": "eqasc_validation_180", "prediction": "all x.(Plant(x) -> (HoldsNutrientsInTissue(x)))", "score": 0}
{"id": "eqasc_validation_180", "prediction": "all x.(Plant(x) -> HoldsNutrients(x))", "score": 0}
{"id": "eqasc_validation_180", "prediction": "all x y.((Plant(x) & Tissue(y)) -> HoldsNutrients(x,y))", "score": 0}
{"id": "eqasc_validation_180", "prediction": "all x y z.((Plant(x) & Nutrient(y) & Tissue(z)) -> Holds(x,y,z))", "score": 0}
{"id": "eqasc_validation_181", "prediction": "all x y.((Nutrient(x) & Tissue(y)) -> HeldIn(x,y))", "score": 0}
{"id": "eqasc_validation_181", "prediction": "all x y z.((Nutrient(x) & Tissue(y) & Tissue(z)) -> HeldIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_181", "prediction": "all x y z.((Nutrient(x) & Tissue(y) & Tissue(z)) -> HoldsIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_181", "prediction": "all x.(Nutrient(x) -> HeldInTissue(x))", "score": 0}
{"id": "eqasc_validation_181", "prediction": "all x.(Nutrients(x) -> HeldInTissue(x))", "score": 0}
{"id": "eqasc_validation_181", "prediction": "all x y.((Nutrients(x) & Tissue(y)) -> HoldenIn(x,y))", "score": 0}
{"id": "eqasc_validation_181", "prediction": "all x y z.((Nutrients(x) & TissueIn(y) & TissueIn(z)) -> HeldIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_181", "prediction": "all x y.((NutrientChannel(x) & Tissue(y)) -> HoldenIn(x,y))", "score": 0}
{"id": "eqasc_validation_181", "prediction": "all x y.((Nutrient(x) & Tissue(y)) -> heldIn(x,y))", "score": 0}
{"id": "eqasc_validation_181", "prediction": "all x.(Nutrients(x) -> HoldenInTissue(x))", "score": 0}
{"id": "eqasc_validation_181", "prediction": "all x y.((Nutrient(x) & Tissue(y)) -> HoldsIn(x,y))", "score": 0}
{"id": "eqasc_validation_181", "prediction": "all x.(Nutrients(x) -> HoldnInTissue(x))", "score": 0}
{"id": "eqasc_validation_182", "prediction": "all x y z.((Gas(x) & OpenContainer(y) & EvaporatesIn(x,y)) -> SpreadsAwareIntoAir(z))", "score": 0}
{"id": "eqasc_validation_182", "prediction": "all x y.((Gas(x) & OpenContainer(y) & Evaporates(x)) -> SpreadsOutIntoAir(x,y))", "score": 0}
{"id": "eqasc_validation_182", "prediction": "all x y z w.((GasInOpenContainer(x) & GasEvaporates(x,y) & Air(y) & GasInOpenContainer(z)) -> SpreadsOutInto(z,w))", "score": 0}
{"id": "eqasc_validation_182", "prediction": "all x y z.((Gas(x) & OpenContainer(y) & GasEvaporates(y,y) & Air(z)) -> SpreadsOutInto(x,z))", "score": 0}
{"id": "eqasc_validation_182", "prediction": "all x y z w.((Gas(x) & OpenContainer(y) & Valve(z) & GasInMainContainer(w)) -> Evaporates(x,y,z))", "score": 0}
{"id": "eqasc_validation_182", "prediction": "all x y.((GasInOpenContainer(x) & Evaporates(x)) -> SpreadsOutIntoAir(y))", "score": 0}
{"id": "eqasc_validation_182", "prediction": "all x y z.((Gas(x) & OpenContainer(y) & Empoies(x,y)) -> GasSpreadsIntoAir(z))", "score": 0}
{"id": "eqasc_validation_182", "prediction": "all x y z.((Gas(x) & OpenContainer(x) & OpenContainer(y) & Gas(z) & Evaporates(x,y)) -> SpreadsOutIntoAir(z))", "score": 0}
{"id": "eqasc_validation_182", "prediction": "all x y z.((Gas(x) & OpenContainer(y) & Gaz(z) & Evaporates(x,y)) -> SpreadsOutIntoAir(z,x))", "score": 0}
{"id": "eqasc_validation_182", "prediction": "all x y z.((GasInOpenContainer(x) & GasInOpenContainer(y) & OpenContainer(z) & Evaporates(x,y)) -> SpreadsOutIntoAir(x))", "score": 0}
{"id": "eqasc_validation_182", "prediction": "all x y z.((Gas(x) & OpenContainer(y) & EvaporatesIn(x,y) & Air(z)) -> SpreadsOutInto(x,z))", "score": 0}
{"id": "eqasc_validation_182", "prediction": "all x y z.((Gas(x) & OpenContainer(y) & Evaporates(x,y)) -> GasSpreadsOutIntoAir(x))", "score": 0}
{"id": "eqasc_validation_182", "prediction": "all x y z.((GasInOpenContainer(x) & GasEvaporates(y) & Air(z)) -> SpreadsOutInto(z,x))", "score": 0}
{"id": "eqasc_validation_182", "prediction": "all x y z.((Gas(x) & OpenContainer(y) & Evaporates(x,y)) -> SpreadsOutIntoAir(z,y))", "score": 1}
{"id": "eqasc_validation_182", "prediction": "all x.(EvaporatesInOpenContainer(x) -> GasSpreadsOutIntoAir(x))", "score": 0}
{"id": "eqasc_validation_182", "prediction": "all x y z.((Gas(x) & OpenContainer(y) & Evaporates(x,y)) -> SpreadsOutIntoAir(x))", "score": 0}
{"id": "eqasc_validation_183", "prediction": "all x.((Fume(x) & Evaporation(x)) -> PresentsDangerous(x))", "score": 0}
{"id": "eqasc_validation_183", "prediction": "all x.((Fume(x) & Evaporation(x)) -> PresentsDanger(x))", "score": 0}
{"id": "eqasc_validation_183", "prediction": "all x y.((Fume(x) & Evaporation(y)) -> PresentsDangerous(x,y))", "score": 0}
{"id": "eqasc_validation_183", "prediction": "all x y z.((Fume(x) & Evaporation(y) & Evaporation(z)) -> PresentsDanger(x,y,z))", "score": 0}
{"id": "eqasc_validation_183", "prediction": "all x.((Fume(x) & Evaporation(x)) -> PresentsHealthDay(x))", "score": 0}
{"id": "eqasc_validation_183", "prediction": "all x.((Fume(x) & Evaporation(x) & PresentsDanger(x)) -> Exposes(x))", "score": 0}
{"id": "eqasc_validation_183", "prediction": "all x.(Fume(x) -> PresentsDanger(x))", "score": 0}
{"id": "eqasc_validation_183", "prediction": "all x y.((Fume(x) & Evaporation(y)) -> PresentsDanger(x,y))", "score": 0}
{"id": "eqasc_validation_184", "prediction": "all x y.((Gas(x) & OpenContainer(y) & SpreadsOut(x,y)) -> Fumes(x))", "score": 0}
{"id": "eqasc_validation_184", "prediction": "all x.((GasInOpenContainer(x) & SpreadsOut(x)) -> FumesPublicDangerous(x))", "score": 0}
{"id": "eqasc_validation_184", "prediction": "all x y.((Gas(x) & OpenContainer(y)) -> SpreadsOut(x,y)) FumesPath(x))", "score": -1}
{"id": "eqasc_validation_184", "prediction": "all x y.((Gas(x) & OpenContainer(y) & SpreadsOut(x,y)) -> FumesPossibleDiagnosis(x))", "score": 0}
{"id": "eqasc_validation_184", "prediction": "all x y.((Gas(x) & OpenContainer(y) & SpreadsOut(x,y)) -> (Fumes(x) & PresentDanger(x,y)))", "score": 0}
{"id": "eqasc_validation_184", "prediction": "all x.((GasInOpenContainer(x) & SpreadsOut(x)) -> PresentsGuardianity(x))", "score": 0}
{"id": "eqasc_validation_184", "prediction": "all x y.((Gas(x) & OpenContainer(y) & SpreadsOut(x,y)) -> ContainsFumes(x))", "score": 0}
{"id": "eqasc_validation_184", "prediction": "all x y.((Gas(x) & OpenContainer(y) & SpreadsOut(x,y)) -> FumesSituationDanger(x))", "score": 0}
{"id": "eqasc_validation_184", "prediction": "all x y z.((Gas(x) & OpenContainer(y) & SustainsOut(x,y)) -> Fumes(z))", "score": 0}
{"id": "eqasc_validation_184", "prediction": "all x y.((Gas(x) & OpenContainer(y) & SpreadsOut(x,y)) -> FumesPresentDisaster(x))", "score": 0}
{"id": "eqasc_validation_184", "prediction": "all x.((GasInOpenContainer(x) & SpreadsOut(x)) -> ContainsFumes(x))", "score": 0}
{"id": "eqasc_validation_184", "prediction": "all x y.((Gas(x) & OpenContainer(y) & SpreadsOut(x,y)) -> HazardFromFumes(x,y))", "score": 0}
{"id": "eqasc_validation_184", "prediction": "all x y z.((Gas(x) & OpenContainer(y) & OpenContainer(z) & SpreadsOut(x,y)) -> (Fumes(x) & Danger(y)))", "score": 0}
{"id": "eqasc_validation_184", "prediction": "all x y.((Gas(x) & OpenContainer(y) & SpreadsOut(x,y)) -> FumesPossibleDanger(x))", "score": 0}
{"id": "eqasc_validation_184", "prediction": "all x y.((Gas(x) & OpenContainer(y) & SpreadsOut(x,y)) -> FumesPauseDangerous(x))", "score": 0}
{"id": "eqasc_validation_184", "prediction": "all x y z.((Gas(x) & OpenContainer(y) & CoversOut(x,y) & Fumes(z)) -> PresentsDanger(z))", "score": 0}
{"id": "eqasc_validation_185", "prediction": "all x y.((TradingAtWorkplace(x) & Gases(y) & Vapours(y)) -> contaminatesAir(x,y))", "score": 0}
{"id": "eqasc_validation_185", "prediction": "all x.((Gases(x) | Vapours(x)) -> CanContaminateWorkplaceAir(x))", "score": 0}
{"id": "eqasc_validation_185", "prediction": "all x.((Gas(x) | Vapour(x)) -> CanContaminateWorkplaceAir(x))", "score": 0}
{"id": "eqasc_validation_185", "prediction": "all x.(Trafic(x) -> (Gases(x) | Vapours(x)))", "score": 0}
{"id": "eqasc_validation_185", "prediction": "all x.(ContaminatesWorkplaceAir(x) -> (Gases(x) | Vapours(x)))", "score": 0}
{"id": "eqasc_validation_185", "prediction": "all x y.((Gas(x) & Vapour(y)) -> CanContaminateWorkplaceAir(x,y))", "score": 0}
{"id": "eqasc_validation_185", "prediction": "all x.((Gas(x) & Vapour(x)) -> CanContaminateWorkplaceAir(x))", "score": 0}
{"id": "eqasc_validation_185", "prediction": "all x.((Aerospace(x) & Gases(x)) -> CanContaminate(x,WorkplaceAir))", "score": 0}
{"id": "eqasc_validation_185", "prediction": "all x.((Gases(x) & Vapours(x)) -> CanContaminateWorkplaceAir(x))", "score": 0}
{"id": "eqasc_validation_186", "prediction": "all x y.((Causes(x) & HazardousGasFromOpenContainer(x,y) & Eliminates(x,y)) -> CanContaminateWorkplace(x,y))", "score": 0}
{"id": "eqasc_validation_186", "prediction": "all x.((DangerousGasEvaporatesFromOpenContainer(x) & CanContaminateWorkplace(x)) -> CanContaminateWorkplace(x))", "score": 0}
{"id": "eqasc_validation_186", "prediction": "all x.(EvaporatesDangerousGasFromOpenContainer(x) -> IntoWorkplaceContamination(x))", "score": 0}
{"id": "eqasc_validation_186", "prediction": "all x.((DangerousGas(x) & OpenContainer(x)) -> ContaminatesWorkplace(x))", "score": 0}
{"id": "eqasc_validation_186", "prediction": "all x.((DangerousGas(x) & ExpelsOpenContainer(x)) -> CanContaminateWorkplace(x))", "score": 0}
{"id": "eqasc_validation_186", "prediction": "all x.(DangerousGasEvaporates(x) -> CanContaminateWorkplace(x))", "score": 0}
{"id": "eqasc_validation_186", "prediction": "all x.((DangerousGas(x) & FromOpenContainer(x)) -> CanContaminateWorkplace(x))", "score": 0}
{"id": "eqasc_validation_186", "prediction": "all x.((DangerousGasEvaporatesFromOpenContainer(x)) -> CanContaminateWorkplace(x))", "score": 0}
{"id": "eqasc_validation_186", "prediction": "all x y.((DangerousGas(x) & OpenContainer(y) & Evaporates(x,y)) -> CanContaminateWorkplace(x))", "score": 0}
{"id": "eqasc_validation_186", "prediction": "all x y z.((DangerousGas(x) & OpenContainer(y) & Employee(z) & Evaporates(x,y)) -> CanContaminateWorkplace(x,z))", "score": 0}
{"id": "eqasc_validation_186", "prediction": "all x.((DangerousGasEvaporates(x) & OpenContainer(x)) -> CanContaminateWorkplace(x))", "score": 0}
{"id": "eqasc_validation_186", "prediction": "all x y.((DangerousGas(x) & OpenContainer(y) & Evaporates(x)) -> CanContaminateWorkplace(x))", "score": 0}
{"id": "eqasc_validation_186", "prediction": "all x.((EvaporatesDangerousGas(x) & OpenContainer(x)) -> CanContaminateWorkplace(x))", "score": 0}
{"id": "eqasc_validation_186", "prediction": "all x y.((DangerousGas(x) & OpenContainer(y)) -> EvaporatesCanContainWorkplace(x,y))", "score": 0}
{"id": "eqasc_validation_187", "prediction": "all x.(Gas(x) -> Oxygen(x))", "score": 0}
{"id": "eqasc_validation_187", "prediction": "all x.(Gas(x) -> (Oxygen(x)))", "score": 0}
{"id": "eqasc_validation_187", "prediction": "all x.(Gas(x) -> UsuallyOxygen(x))", "score": 0}
{"id": "eqasc_validation_187", "prediction": "all x.(Gas(x) -> (Oxygen(x) | -Oxygen(x)))", "score": 0}
{"id": "eqasc_validation_187", "prediction": "all x.(Gas(x) -> (Oxygen(x) & Usually(x)))", "score": 0}
{"id": "eqasc_validation_187", "prediction": "all x.(Gas(x) -> NormalOrganism(x))", "score": 0}
{"id": "eqasc_validation_187", "prediction": "all x.(Gas(x) -> (Oxygen(x) & AllowedTo(x)))", "score": 0}
{"id": "eqasc_validation_187", "prediction": "all x.(Gas(x) -> Ozone(x))", "score": 0}
{"id": "eqasc_validation_188", "prediction": "all x y z.((Oxygen(x) & OpenContainer(y) & Emplens(x,y)) -> (Violation(x,z) & OxygenSpreadsOutIntoAir(x)))", "score": 0}
{"id": "eqasc_validation_188", "prediction": "all x y z.((Organic(x) & OpenContainer(y) & Vapor(z) & Evaporates(x)) -> SpreadsOutIntoAir(x))", "score": 0}
{"id": "eqasc_validation_188", "prediction": "all x y z.((Oxygen(x) & OpenContainer(y) & OpenContainer(z) & Evaporates(x,y)) -> SpreadsOutIntoAir(x,y))", "score": 0}
{"id": "eqasc_validation_188", "prediction": "all x y z.((OxygenInOpenContainer(x) & OpenContainer(y) & OpenContainer(z)) -> Evaporates(x,y))", "score": 0}
{"id": "eqasc_validation_188", "prediction": "all x y z.((Oxygen(x) & OpenContainerEvaporates(x,y) & Oxygen(z)) -> SpreadsOutIntoAir(y,z))", "score": 0}
{"id": "eqasc_validation_188", "prediction": "all x.((OxygenInOpenContainer(x) & Evaporates(x)) -> OxygenSpreadsIntoAir(x))", "score": 0}
{"id": "eqasc_validation_188", "prediction": "all x y z w.((Oxygen(x) & OpenContainer(y) & Evaporates(x) & Oxygen(z) & Air(w)) -> SpreadsOutInto(x,y,z))", "score": 0}
{"id": "eqasc_validation_188", "prediction": "all x y z.((Oxygen(x) & OpenContainer(y) & Evaporates(x,y)) -> OxygenSpreadsOutIntoAir(x))", "score": 0}
{"id": "eqasc_validation_188", "prediction": "all x y z.((Oxygen(x) & OpenContainer(y) & OpenContainer(z) & Evaporates(x,y) & LiquidEncapsulation(x,z)) -> SpreadsOutIntoAir(x))", "score": 0}
{"id": "eqasc_validation_188", "prediction": "all x y z.((HasOxygen(x) & OpenContainer(y) & Evaporates(x,y)) -> SpreadsOutIntoAir(x,z))", "score": 0}
{"id": "eqasc_validation_188", "prediction": "all x y z.((EvaporatesOxygen(x) & OpenContainer(y) & OpenContainer(z) & Eliminates(x,y)) -> SalversOutIntoAir(x,z))", "score": 0}
{"id": "eqasc_validation_188", "prediction": "all x y z.((EvaporatesOxygen(x) & OpenContainer(y) & OpenContainer(z)) -> FlowsOutIntoAir(x,y,z))", "score": 0}
{"id": "eqasc_validation_188", "prediction": "all x y z.((EvaporatesOxygen(x) & OpenContainer(y) & OpenContainer(z)) -> (AirFlows(x) & Oxygen SpreadsOut(x,y)))", "score": -1}
{"id": "eqasc_validation_188", "prediction": "all x y z.((OxygenInContainer(x) & OpenContainer(y) & Evaporates(y) & AirContainer(z)) -> SpreadsOutInto(x,z))", "score": 0}
{"id": "eqasc_validation_188", "prediction": "all x y z.((OxygenInOpenContainer(x) & OpenContainer(y) & Cleans(x) & OziumInAir(z)) -> (Evaporates(x,y) & SpreadsOutIntoAir(x,z)))", "score": 0}
{"id": "eqasc_validation_188", "prediction": "all x.(EvaporatesOxygenInOpenContainer(x) -> (OxygenSpreadsOutIntoAir(x)))", "score": 0}
{"id": "eqasc_validation_189", "prediction": "all x.(Evaporation(x) -> (Liquids(x) & TurnsIntoGas(x)))", "score": 0}
{"id": "eqasc_validation_189", "prediction": "all x.(Evaporation(x) -> (Liquid(x) & TurnsIntoGas(x)))", "score": 0}
{"id": "eqasc_validation_189", "prediction": "all x y.((Liquid(x) & Gas(y) & TurnsInto(x,y)) -> Evaporation(x))", "score": 0}
{"id": "eqasc_validation_189", "prediction": "all x.(Evaporation(x) -> TurnsIntoGas(x))", "score": 0}
{"id": "eqasc_validation_189", "prediction": "all x.(Evaporation(x) -> (LiquidTurnsIntoGas(x)))", "score": 0}
{"id": "eqasc_validation_189", "prediction": "all x.(Evaporation(x) -> (LiquidStoriesIntoGas(x)))", "score": 0}
{"id": "eqasc_validation_189", "prediction": "all x y.((Liquid(x) & Gas(y) & TurnsTo(x,y)) -> Evaporation(x))", "score": 0}
{"id": "eqasc_validation_189", "prediction": "all x.(Evaporation(x) -> DistortsLiquid(x))", "score": 0}
{"id": "eqasc_validation_189", "prediction": "all x.(Evaporation(x) -> (ChangesLiquid(x) & TurnsIntoGas(x)))", "score": 0}
{"id": "eqasc_validation_189", "prediction": "all x y.((Liquid(x) & Gas(y)) -> Evaporation(x,y))", "score": 0}
{"id": "eqasc_validation_189", "prediction": "all x y.((Liquid(x) & Gas(y)) -> TurnsInto(x,y))", "score": 0}
{"id": "eqasc_validation_189", "prediction": "all x y.((Liquid(x) & Gas(y)) -> Evaporation(x))", "score": 0}
{"id": "eqasc_validation_190", "prediction": "all x.((Liquid(x) & OpenContainer(x) & TurnsIntoGas(x)) -> SpreadsIntoAir(x))", "score": 0}
{"id": "eqasc_validation_190", "prediction": "all x y z.((Liquid(x) & NaturalGas(y) & OpenContainer(z) & TransformsInto(x,y)) -> SpreadsOutInAir(x))", "score": 0}
{"id": "eqasc_validation_190", "prediction": "all x y z.((Liquid(x) & Gas(y) & OpenContainer(z) & TurnsInto(x,y)) -> SpreadsOutIntoAir(x))", "score": 0}
{"id": "eqasc_validation_190", "prediction": "all x y z.((Liquid(x) & Gas(y) & OpenContainer(z) & TurnsInto(x,y) & OpenContainer(y,z)) -> SpreadsOutIntoAir(x))", "score": 0}
{"id": "eqasc_validation_190", "prediction": "all x y z.((Liquid(x) & Gas(y) & OpenContainer(z)) -> TurnsInto(x,y,z))", "score": 0}
{"id": "eqasc_validation_190", "prediction": "all x y.((Liquid(x) & OpenContainer(y) & TurnsIntoGas(x,y)) -> SpreadsIntoAir(x,y))", "score": 0}
{"id": "eqasc_validation_190", "prediction": "all x.((Liquid(x) & TurnsIntoGas(x)) -> SpreadsIntoAir(x))", "score": 0}
{"id": "eqasc_validation_190", "prediction": "all x y.((Liquid(x) & OpenContainer(y) & TransformsIntoGas(x,y)) -> SpreadsOutIntoAir(x))", "score": 0}
{"id": "eqasc_validation_190", "prediction": "all x y z.((Liquid(x) & Gas(y) & OpenContainer(z) & TurnsInto(x,y,z)) -> SpreadsOutIntoAir(x))", "score": 0}
{"id": "eqasc_validation_190", "prediction": "all x y z.((Liquid(x) & Gaze(y) & OpenContainer(z) & TurnsInto(x,y) & OpenContainer(x,z)) -> SpreadsOutIntoAir(x))", "score": 0}
{"id": "eqasc_validation_190", "prediction": "all x.((Liquid(x) & OpenContainer(x)) -> SpreadsIntoAir(x))", "score": 0}
{"id": "eqasc_validation_190", "prediction": "all x.((Liquid(x) & TurnsIntoGas(x) & OpenContainer(x)) -> SpreadsIntoAir(x))", "score": 0}
{"id": "eqasc_validation_190", "prediction": "all x y z.((Liquid(x) & Gas(y) & OpenContainer(z) & TurnsInto(x,y)) -> SpreadsOutIntoAir(x,z))", "score": 0}
{"id": "eqasc_validation_190", "prediction": "all x y.((Liquid(x) & Gas(y) & OpenContainer(x,y)) -> SpreadsIntoAir(x))", "score": 0}
{"id": "eqasc_validation_190", "prediction": "all x y.((Liquid(x) & OpenContainer(y) & TurnsIntoGas(x,y)) -> SpreadsOutIntoAir(x))", "score": 0}
{"id": "eqasc_validation_190", "prediction": "all x y.((Liquid(x) & OpenContainer(y) & TurnsInto(x,y)) -> SpreadsOutIntoAir(x))", "score": 0}
{"id": "eqasc_validation_191", "prediction": "all x.(Hydrogen(x) -> ExplosiveGas(x))", "score": 0}
{"id": "eqasc_validation_191", "prediction": "all x.((Hydrogen(x) & ExplosiveGas(x)) -> ExplosiveGas(x))", "score": 0}
{"id": "eqasc_validation_191", "prediction": "(Element( hydrogen) & ExplosiveGas(hydrogen))", "score": 0}
{"id": "eqasc_validation_191", "prediction": "(Element(hydrogen) & ExplosiveGas(Hydrogen))", "score": 0}
{"id": "eqasc_validation_191", "prediction": "all x y.((Hydrogen(x) & ExplosiveGas(y)) -> ExplosiveGas(x))", "score": 0}
{"id": "eqasc_validation_191", "prediction": "all x.((Hydrogen(x) & ExplosiveGas(x)) -> Nuclear(x))", "score": 0}
{"id": "eqasc_validation_191", "prediction": "(ExcitingGas(hydrogen))", "score": 0}
{"id": "eqasc_validation_191", "prediction": "(ExcimerousGas(hydrogen))", "score": 0}
{"id": "eqasc_validation_192", "prediction": "all x.((HydrogenEvaporates(x) & OpenContainer(x)) -> SpreadsOutIntoAir(x))", "score": 0}
{"id": "eqasc_validation_192", "prediction": "all x y.((Hydrogen(x) & OpenContainer(y) & EvaporatesFrom(x,y)) -> SpreadsOutIntoAir(x))", "score": 0}
{"id": "eqasc_validation_192", "prediction": "all x y.(ReallyHydrogen(x) & EvaporatesFromOpenContainer(x,y) -> SpreadsOutIntoAir(x))", "score": 0}
{"id": "eqasc_validation_192", "prediction": "all x y z.((Hydrogen(x) & OpenContainer(y) & OpenContainer(z) & EvaporatesFrom(x,y)) -> SpreadsOutIntoAir(x))", "score": 0}
{"id": "eqasc_validation_192", "prediction": "all x y z.((Hydrogène(x) & OpenContainer(y) & Evaporates(x,y)) -> SpreadsOutIntoAir(x,z))", "score": 0}
{"id": "eqasc_validation_192", "prediction": "all x y.((HydrogenEvaporates(x) & OpenContainer(y)) -> SpreadsOutIntoAir(x))", "score": 0}
{"id": "eqasc_validation_192", "prediction": "all x y z.((HydrogenEvaporates(x) & OpenContainer(y) & OpenContainer(z) & Evaporates(x,y) & Air(z)) -> SpreadsOutBy(x,y))", "score": 0}
{"id": "eqasc_validation_192", "prediction": "all x.((HydrogenEvaporatesOfOpenContainer(x)) -> SpreadsOutIntoAir(x))", "score": 0}
{"id": "eqasc_validation_192", "prediction": "all x y.((HydrogenEvaporates(x) & OpenContainer(y) & SpreadsOutIntoAir(x,y)) -> X.(HydrogenEvaporatesFrom(x,y)))", "score": -1}
{"id": "eqasc_validation_192", "prediction": "all x y.((Hydrogen(x) & OpenContainer(y) & EvaporationsFrom(x,y)) -> SpreadsOutIntoAir(x))", "score": 0}
{"id": "eqasc_validation_192", "prediction": "all x y.((HydrogenEvaporatesFromOpenContainer(x) & OpenContainer(y) & SpreadsOutToAir(x)) -> EvaporatesIntoAir(x,y))", "score": 0}
{"id": "eqasc_validation_192", "prediction": "all x y.((HydrogenEvaporates(x) & OpenContainer(y) & CoveredWith(x,y)) -> SpreadsIntoAir(x))", "score": 0}
{"id": "eqasc_validation_193", "prediction": "all x.(WaterVapor(x) -> GasInAir(x))", "score": 0}
{"id": "eqasc_validation_193", "prediction": "all x y.((WaterVapor(x) & Air(y)) -> Gas(x))", "score": 0}
{"id": "eqasc_validation_193", "prediction": "all x.(WaterValue(x) -> GasInAir(x))", "score": 0}
{"id": "eqasc_validation_193", "prediction": "all x.(WaterVapor(x) -> Gas(x))", "score": 1}
{"id": "eqasc_validation_194", "prediction": "all x y z.((WaterVapor(x) & OpenContainer(y) & OpenContainer(z) & Evaporates(x,y) & Air(y)) -> SpreadsOutInto(x,z))", "score": 0}
{"id": "eqasc_validation_194", "prediction": "all x y z w.((WaterVaporInOpenContainer(x) & OpenContainer(y) & Air(z) & Evaporates(x)) -> SpreadsOutInto(x,w))", "score": 0}
{"id": "eqasc_validation_194", "prediction": "all x.(EvaporatesWaterVapor(x) -> SpreadsOutIntoAir(x))", "score": 0}
{"id": "eqasc_validation_194", "prediction": "all x y.((WaterVapor(x) & OpenContainer(y) & Evaporates(x,y)) -> SpreadsOutIntoAir(x,y))", "score": 1}
{"id": "eqasc_validation_194", "prediction": "all x y z.((EvaporateDrain(x) & WaterVapor(y) & OpenContainer(z) & InOpenContainer(x,z)) -> WaterVaporExplosedInAir(x))", "score": 0}
{"id": "eqasc_validation_194", "prediction": "all x.((WaterVapor(x) & OpenContainer(x)) -> (Evaporates(x) & SpreadsOutIntoAir(x)))", "score": 0}
{"id": "eqasc_validation_194", "prediction": "all x y z w.((WaterVapor(x) & OpenContainer(y) & WaterVapor(z) & Evaporates(x,y)) -> SpreadsOutIntoAir(z),w.(WaterVapor(x,w) & AirVapor(x,z)))", "score": -1}
{"id": "eqasc_validation_194", "prediction": "all x y z w.((WaterVapor(x) & OpenContainer(y) & WaterVapor(z) & FreeToAir(w)) -> Evaporates(x,y))", "score": 0}
{"id": "eqasc_validation_194", "prediction": "all x y z.((WaterVapor(x) & OpenContainer(y) & WaterVapor(z)) -> (Evaporates(x,y) & SpreadsOutIntoAir(x,z)))", "score": 0}
{"id": "eqasc_validation_194", "prediction": "all x y z.((EvaporatesWaterVapor(x) & Container(y) & Open(z)) -> (WaterVapor(x,y) & InAir(x,z)))", "score": 0}
{"id": "eqasc_validation_194", "prediction": "all x y z.(((WaterVapor(x) & OpenContainer(y) & OpenContainer(z) & Evaporates(x,y) & Evaporated(x,z)) -> SpreadsOutIntoTheAir(x,y))", "score": -1}
{"id": "eqasc_validation_194", "prediction": "all x y z.((WaterVapor(x) & OpenContainer(y) & WaterVapor(z)) -> (Evaporate(x,y) & SpreadOut(x,z)))", "score": 0}
{"id": "eqasc_validation_194", "prediction": "all x y z.((WaterVaporInOpenContainer(x) & OpenContainer(y) & OpenContainer(z) & Evaporates(x,y)) -> SpreadsOutIntoAir(x,z))", "score": 0}
{"id": "eqasc_validation_194", "prediction": "all x y z.((WaterVapor(x) & OpenContainer(y) & WaterValue(z) & Evaporates(x,y)) -> SpreadsOutIntoAir(z,y))", "score": 0}
{"id": "eqasc_validation_194", "prediction": "all x y z w.((WaterVaporInOpenContainer(x) & OpenContainer(y) & Vapor(z) & Air(w)) -> (Evaporates(x,z) & SpreadsOutInto(x,w)))", "score": 0}
{"id": "eqasc_validation_195", "prediction": "all x.(KidsLunchBox(x) -> MarvellousContainer(x))", "score": 0}
{"id": "eqasc_validation_195", "prediction": "all x y.((Kids(x) & LunchBox(y)) -> AwesomeContainer(x,y))", "score": 0}
{"id": "eqasc_validation_195", "prediction": "all x y.((KidsLunchBox(x) & Container(y)) -> Marvellous(x,y))", "score": 0}
{"id": "eqasc_validation_195", "prediction": "all x.(Kids(x) -> LunchBox(x))", "score": 0}
{"id": "eqasc_validation_195", "prediction": "all x.((KidsLunchBox(x) & QueenOfContainers(x)) -> Wonderful(x))", "score": 0}
{"id": "eqasc_validation_195", "prediction": "all x.(KeepsMyKidsLunchBox(x) -> MarvellousContainer(x))", "score": 0}
{"id": "eqasc_validation_195", "prediction": "all x.(KidsLunchBox(x) -> MarvelousContainer(x))", "score": 0}
{"id": "eqasc_validation_195", "prediction": "all x.(KidsIslandBox(x) -> MarvellousContainer(x))", "score": 0}
{"id": "eqasc_validation_195", "prediction": "all x.((KidsLunchBox(x) & WonderlousContainer(x)) -> Boxes(x))", "score": 0}
{"id": "eqasc_validation_195", "prediction": "all x.(KidsLaunchBox(x) -> MarvellousContainer(x))", "score": 0}
{"id": "eqasc_validation_196", "prediction": "all x.((Board(x) & PlacesGas(x)) -> EvaporatesAndSpreadsOutIntoAir(x))", "score": 0}
{"id": "eqasc_validation_196", "prediction": "all x y.((OpenBox(x) & PlacesGasIn(x,y)) -> (Evaporates(y) & SpreadsIntoAir(x)))", "score": 0}
{"id": "eqasc_validation_196", "prediction": "all x y z.((Gas(x) & OpenBox(y) & Evaporate(z)) -> SpreadOutIntoAir(x,y))", "score": 0}
{"id": "eqasc_validation_196", "prediction": "all x.((OpenBox(x) & PlacesGasIn(x)) -> EvaporationsAndSpreadsOutIntoAir(x))", "score": 0}
{"id": "eqasc_validation_196", "prediction": "all x y.((Gas(x) & OpenBox(y) & In(x,y)) -> (Evaporates(x) & SpreadsOutIntoAir(x)))", "score": 0}
{"id": "eqasc_validation_196", "prediction": "all x y.((GasInOpenBox(x) & GasEvaporation(y)) -> SpreadsOutIntoAir(y))", "score": 0}
{"id": "eqasc_validation_196", "prediction": "all x.((PlaceGasInOpenBox(x) & InOpenBox(x)) -> (Evaporates(x) & SpreadsIntoAir(x)))", "score": 0}
{"id": "eqasc_validation_196", "prediction": "all x.(Gas(x) -> (PinchesInOpenBox(x) & Evaporates(x) & SpreadsOutIntoAir(x)))", "score": 0}
{"id": "eqasc_validation_196", "prediction": "all x.((Rest(x) & OpenBox(x)) -> (Evaporates(x) & SpreadsOutIntoAir(x)))", "score": 0}
{"id": "eqasc_validation_196", "prediction": "all x y.((OpenBox(x) & Gas(y)) -> EvaporatesAndSpreadsIntoAir(x,y))", "score": 0}
{"id": "eqasc_validation_196", "prediction": "all x.((InOpenBox(x) & PlacesGasIn(x)) -> (Evaporates(x) & SpreadsOutIntoAir(x)))", "score": 0}
{"id": "eqasc_validation_196", "prediction": "all x.((GasInOpenBox(x) & PlacesInBox(x)) -> EvaporatesAndSpreadsIntoAir(x))", "score": 0}
{"id": "eqasc_validation_196", "prediction": "all x.((PlacesGasInOpenBox(x)) -> (Evaporates(x) & SpreadsOutIntoAir(x)))", "score": 0}
{"id": "eqasc_validation_196", "prediction": "all x.((GasInOpenBox(x) & PlacesInOpenBox(x)) -> (Evaporates(x) & SpreadsOutIntoAir(x)))", "score": 0}
{"id": "eqasc_validation_196", "prediction": "all x y z.((Gas(x) & OpenBox(y) & EvaporatesIn(y,z)) -> SpreadsOutIntoAir(z))", "score": 0}
{"id": "eqasc_validation_196", "prediction": "all x y.((Gas(x) & OpenBox(y)) -> (Evaporates(x) & SpreadsOutIntoAir(x)))", "score": 0}
{"id": "eqasc_validation_197", "prediction": "all x y.((Gase(x) & GenericGeneratorExhaust(y)) -> SpreadsThroughoutEnclosedSpaces(x,y))", "score": 0}
{"id": "eqasc_validation_197", "prediction": "all x y.((DeadlyCarbonMonoxideGas(x) & GeneratorExhaust(x) & EnclosedSpace(y)) -> SpreadsThroughout(x,y))", "score": 0}
{"id": "eqasc_validation_197", "prediction": "all x y z.((DeadlyCarbonMonoxideGas(x) & GeneratorExhaust(y) & EnclosedSpace(z)) -> CanSpread(x,y,z))", "score": 0}
{"id": "eqasc_validation_197", "prediction": "all x.((GeneratorExhaust(x) & DeadlyCarbonMonoxideGas(x)) -> SpreadsThroughoutEnclosedSpaces(x))", "score": 0}
{"id": "eqasc_validation_197", "prediction": "all x.((GeneratorsExhaust(x) & DeadlyCarbonMonoxideGas(x)) -> SpreadsThroughoutEnclosedSpaces(x))", "score": 0}
{"id": "eqasc_validation_197", "prediction": "all x y.((DeadlyCarbonMonoxideGas(x) & GeneratorExhaust(y)) -> SpreadsThroughoutEnclosedSpaces(x))", "score": 0}
{"id": "eqasc_validation_197", "prediction": "all x.((Gas(x) & GeneralGenerator(x)) -> DeadlyCarbonMonoxideGasFromExhaustServes(x))", "score": 0}
{"id": "eqasc_validation_197", "prediction": "all x y.((Grinner(x) & GeneratorExhaust(x,y)) -> DeadlyCarbonMonoxideGasCanSpread(x,y))", "score": 0}
{"id": "eqasc_validation_197", "prediction": "all x y.((DailyCarbonMonoxideGas(x) & GeneratorSummary(y)) -> CanSpreadThroughoutEnclosedSpaces(x,y))", "score": 0}
{"id": "eqasc_validation_197", "prediction": "All x y z.((EccentricSpace(z) & GenericErosion(x) & CarbonMonoxideGas(x) & GeneratorEndangeredSpace(x)) -> DeadlyCanSpread(x,y,z))", "score": -1}
{"id": "eqasc_validation_197", "prediction": "all x y z.((DeedlyCarbonMonoxideGas(x) & GeneratorsExhaust(y) & EnclosedSpace(z)) -> CanSpreadThroughout(x,y,z))", "score": 0}
{"id": "eqasc_validation_197", "prediction": "all x y.((DeadlyCarbonMonoxideGas(x) & GeneratorsExhaust(y)) -> CanSpreadThroughoutEnclosedSpaces(x))", "score": 0}
{"id": "eqasc_validation_197", "prediction": "all x y z.((DeadlyCarbonMonoxideGas(x) & GeneratorsExhaust(y) & EnclosedSpaces(z) & FromExhaust(y,x)) -> CanSpread(x,z))", "score": 0}
{"id": "eqasc_validation_197", "prediction": "all x.((Generator(x) & GeneratorExhaust(x)) -> DeadlyCarbonMonoxideGasMissionSpread(x))", "score": 0}
{"id": "eqasc_validation_197", "prediction": "all x.(DeadlyCarbonMonoxideGas(x) -> (FromGeneratorExhaust(x) & SpreadsThroughoutEnclosedSpaces(x)))", "score": 0}
{"id": "eqasc_validation_197", "prediction": "all x.(DeadlyCarbonMonoxideGasFromGeneratorExhaustSpread(x))", "score": 0}
{"id": "eqasc_validation_198", "prediction": "all x y.((GeneratorEvaporate(x) & CarbonMonoxideGas(y)) -> Vapourized(x,y))", "score": 0}
{"id": "eqasc_validation_198", "prediction": "all x y z.((EvaporatedCarbonMonoxideGas(x) & Generator(y) & Exhaust(z)) -> CarbonMonoxideGas(x,y,z))", "score": 0}
{"id": "eqasc_validation_198", "prediction": "all x y.((GeneralGenerator(x) & GeneratorEscape(y,x)) -> CarbonMonoxideGasEvaporated(x))", "score": 0}
{"id": "eqasc_validation_198", "prediction": "all x y.((Gas(x) & Generator(y) & Generator(y)) -> Evaporated(x,y))", "score": 0}
{"id": "eqasc_validation_198", "prediction": "all x y z w.((CarbonMonoxideGas(x) & GeneratorsExhaust(y) & Generator(z) & Generator(w)) -> EvaporatedCarnitineGas(x,y,z))", "score": 0}
{"id": "eqasc_validation_198", "prediction": "all x,y,z.((Gas(x) & Generator(y) & GasEvaporatedFromExhaust(x,y)) -> CarbonMonoxideEvaporation(x,y))", "score": -1}
{"id": "eqasc_validation_198", "prediction": "all x y.((Generator(x) & PowerGenerator(y)) -> (Evaporated(x,y) & CarbonMonoxideGas(x,y)))", "score": 0}
{"id": "eqasc_validation_198", "prediction": "all x.((CarbonMonoxideGas(x) & FromGeneratorEmission(x)) -> Evaporated(x))", "score": 0}
{"id": "eqasc_validation_198", "prediction": "all x y.((GeneratorExhaust(x) & Evaporated(y)) -> CarbonMonoxideGasFromExhaust(x,y))", "score": 0}
{"id": "eqasc_validation_198", "prediction": "all x y.((GasEvaporation(x) & GeneratorExhaust(y)) -> CarbonMonoxideGasEvaporated(x,y))", "score": 0}
{"id": "eqasc_validation_198", "prediction": "all x.((CarbonMonoxideGas(x) & GeneratorEmission(x)) -> Evaporated(x))", "score": 0}
{"id": "eqasc_validation_198", "prediction": "all x y.((GeneratorExhaust(x) & CarbonMonoxideGas(x)) -> HasEvaporated(x,y))", "score": 0}
{"id": "eqasc_validation_198", "prediction": "all x y.((CarbonMonoxideGas(x) & GeneratorExhaust(y)) -> Evaporated(x,y))", "score": 0}
{"id": "eqasc_validation_198", "prediction": "all x.((CarbonMonoxideGas(x) & GeneratorExhaust(x)) -> Evaporated(x))", "score": 0}
{"id": "eqasc_validation_198", "prediction": "all x y z.((Generator(x) & CarbonMonoxideGas(x) & Generator(y) & Exhaust(z)) -> Evaporated(x,y,z))", "score": 0}
{"id": "eqasc_validation_198", "prediction": "all x y.((GeneratorGeneratorExhaust(x) & CarbonMonoxideGas(y)) -> Evaporated(x))", "score": 0}
{"id": "eqasc_validation_199", "prediction": "all x y.((Bone(x) & ActivatedBody(y)) -> (LessFlexible(x,y) & Stronger(x,y)))", "score": 0}
{"id": "eqasc_validation_199", "prediction": "all x.(Bone(x) -> (LessFlexible(x) & Stronger(x)))", "score": 0}
{"id": "eqasc_validation_199", "prediction": "-(LessFlexible(bone,cartille) & Stronger(bone,cartille))", "score": 0}
{"id": "eqasc_validation_199", "prediction": "all x.(Bone(x) -> (LessFlexibleThanCartilization(x) & StrongerThanCartillage(x)))", "score": 0}
{"id": "eqasc_validation_199", "prediction": "(LessFlexible(bone) & Stronger(bone))", "score": 0}
{"id": "eqasc_validation_199", "prediction": "all x y.((Bone(x) & Carboil(y)) -> (LessFlexible(x,y) & Stronger(x,y)))", "score": 0}
{"id": "eqasc_validation_199", "prediction": "all x.((Bone(x) & LessFlexible(x)) -> Stronger(x))", "score": 0}
{"id": "eqasc_validation_199", "prediction": "(-FlexibleBone(Bone) & StrongerBone(Bone))", "score": 0}
{"id": "eqasc_validation_199", "prediction": "much a bit different from cartilage (y.E.Bone(a) & LessFlexible(a) & Stronger(b))", "score": -1}
{"id": "eqasc_validation_199", "prediction": "all x y.((Bone(x) & Cartilage(y)) -> (LessFlexible(x,y) & Stronger(x,y)))", "score": 0}
{"id": "eqasc_validation_199", "prediction": "(LessFlexible(Bone,Cartillage) & Stronger(Bone,Cartillage))", "score": 0}
{"id": "eqasc_validation_199", "prediction": "all x y.((Bone(x) & Carrotlage(y) & -Flexible(x,y)) -> Stronger(x,y))", "score": 0}
{"id": "eqasc_validation_199", "prediction": "(-Flexible(bone) & Fewer(bone,cartilage) & Stronger(bone,chartilage))", "score": 0}
{"id": "eqasc_validation_199", "prediction": "all x y.((Bone(x) & Carboilage(y)) -> (LossFlexible(x,y) & Stronger(x,y)))", "score": 0}
{"id": "eqasc_validation_200", "prediction": "all x.(Shark(x) -> HasCartillageSkeleton(x))", "score": 0}
{"id": "eqasc_validation_200", "prediction": "all x.(Shark(x) -> HasCartolageSkeleton(x))", "score": 0}
{"id": "eqasc_validation_200", "prediction": "all x.(Shark(x) -> HasCartilumSkeleton(x))", "score": 0}
{"id": "eqasc_validation_200", "prediction": "all x.(Shark(x) -> HasCartilaginousSkeleton(x))", "score": 0}
{"id": "eqasc_validation_200", "prediction": "all x.(Shark(x) -> HasChirdole(x))", "score": 0}
{"id": "eqasc_validation_200", "prediction": "all x.(Shark(x) -> HasCartilizationSkeleton(x))", "score": 0}
{"id": "eqasc_validation_200", "prediction": "all x y.((Shark(x) & CarilageSkeleton(y)) -> Has(x,y))", "score": 0}
{"id": "eqasc_validation_200", "prediction": "all x.(Shark(x) -> HasCartilageSkeleton(x))", "score": 0}
{"id": "eqasc_validation_201", "prediction": "all x y.((Skeleton(x) & Shark(y) & -Flexible(x,y) & Stronger(x,y)) -> Regular(x))", "score": 0}
{"id": "eqasc_validation_201", "prediction": "all x y.((Skinnel(x) & Shark(y)) -> (LittleFlexible(x) & Stronger(x)))", "score": 0}
{"id": "eqasc_validation_201", "prediction": "all x y.((RegularSkeleton(x) & SharkSkeleton(y)) -> (LessFlexible(x) & Stronger(y)))", "score": 0}
{"id": "eqasc_validation_201", "prediction": "all x.(RegularSkeleton(x) -> (LessFlexible(x,shark) & Stronger(x,shark)))", "score": 0}
{"id": "eqasc_validation_201", "prediction": "all x.(RegularSkeleton(x) -> (LessFlexible(x) & Stronger(x)))", "score": 0}
{"id": "eqasc_validation_201", "prediction": "all x y.((Snake(x) & Shark(y)) -> (LessFlexible(x,y) & Stronger(x,y)))", "score": 0}
{"id": "eqasc_validation_201", "prediction": "all x.(Skewed(x) -> (LessFlexible(x) & Stronger(x)))", "score": 0}
{"id": "eqasc_validation_201", "prediction": "all x y.((Scales(x) & Shark(y)) -> (LessFlexible(x,y) & Stronger(x,y)))", "score": 0}
{"id": "eqasc_validation_201", "prediction": "all x y.((RegularSkeleton(x) & SharkSkeleton(y)) -> (LessFlexible(x,y) & Stronger(x,y)))", "score": 0}
{"id": "eqasc_validation_201", "prediction": "all x.(RegularSkeleton(x) -> (LessFlexible(x,Shark) & Stronger(x,QuickRange)))", "score": 0}
{"id": "eqasc_validation_201", "prediction": "all x y.((Skeleton(x) & Shark(y)) -> (LessFlexible(x) & Stronger(x)))", "score": 0}
{"id": "eqasc_validation_201", "prediction": "all x.(Skeleton(x) -> (LessFlexibleThanShark(x) & StrongerThanShark(x)))", "score": 0}
{"id": "eqasc_validation_201", "prediction": "all x y.((RegularSkeleton(x) & SharkSkeleton(y)) -> (LessFlexible(x,y) & Stronger(y)))", "score": 0}
{"id": "eqasc_validation_201", "prediction": "all x.(RegularSkeleton(x) -> (LowerFlexibleThanHacket(x) & StrongerThanShark(x)))", "score": 0}
{"id": "eqasc_validation_201", "prediction": "all x.(Skeleton(x) -> (LittleFlexible(x) & Stronger(x)))", "score": 0}
{"id": "eqasc_validation_202", "prediction": "all x.((Ears(x) | Bones(x)) -> MadeOfCartilization(x))", "score": 0}
{"id": "eqasc_validation_202", "prediction": "all x y.((People(x) & Orgue(y)) -> MadeOf(x,y))", "score": 0}
{"id": "eqasc_validation_202", "prediction": "all x.(Popular(x) -> (MadeOfCarboilage(x) & MadeOfBones(x)))", "score": 0}
{"id": "eqasc_validation_202", "prediction": "all x.(PopularEarsAndBones(x) -> MadeOfCarbilage(x))", "score": 0}
{"id": "eqasc_validation_202", "prediction": "all x.((Ear(x) & Bone(x)) -> MadeOfCartilization(x))", "score": 0}
{"id": "eqasc_validation_202", "prediction": "all x.(Human(x) -> (MakesEarsAndBonesOfCarbon(x)))", "score": 0}
{"id": "eqasc_validation_202", "prediction": "all x.((Earbuds(x) & Bones(x)) -> MadeOfCartilization(x))", "score": 0}
{"id": "eqasc_validation_202", "prediction": "all x.(Person(x) -> (MakesEars(x) | MakesBones(x)))", "score": 0}
{"id": "eqasc_validation_202", "prediction": "all x.((Ears(x) | Bones(x)) -> MadeOfCarboil(x))", "score": 0}
{"id": "eqasc_validation_202", "prediction": "all x.((Population(x) & (HasEars(x) | HasBodies(x))) -> MadeOfCarrotlage(x))", "score": 0}
{"id": "eqasc_validation_202", "prediction": "all x.(Populous(x) x.(Ears(x) & Bones(x)) -> MadeOfCarboil(x))", "score": -1}
{"id": "eqasc_validation_202", "prediction": "All x.((Ears(x) & Bones(x)) -> MadeOfCarbon(x))", "score": -1}
{"id": "eqasc_validation_202", "prediction": "all x.((Honey(x) & Ears(x) & Bones(x)) -> MadeOfCarboil(x,carboil))", "score": 0}
{"id": "eqasc_validation_202", "prediction": "all x.(Person(x) -> (MakesEars(x) & MakesBones(x) & MadeOfCartilization(x)))", "score": 0}
{"id": "eqasc_validation_202", "prediction": "all x y.((Popular(x) & Ears(y) & Bones(x)) -> (MadeOfCartilization(x,y)))", "score": 0}
{"id": "eqasc_validation_203", "prediction": "all x.((Earbud(x) & MadeOfCartilagin(x)) -> MadeOfCartilagin(x))", "score": 0}
{"id": "eqasc_validation_203", "prediction": "all x.((Ears(x) & MadeOfCartilagin)) -> MadeOfCartilagin(x))", "score": -1}
{"id": "eqasc_validation_203", "prediction": "all x y.((Ear(x) & Carbilage(y)) -> MadeOfArticle(x,y))", "score": 0}
{"id": "eqasc_validation_203", "prediction": "all x.(Earrings(x) -> MadeOfCartiliage(x))", "score": 0}
{"id": "eqasc_validation_203", "prediction": "all x y.((Ear(x) & Ear(y) & MadeOfCartilagin(x)) -> MadeOfCartilagin(y))", "score": 0}
{"id": "eqasc_validation_203", "prediction": "all x.((Ears(x) & MadeOfCardilage(x)) -> EarsMadeOfCardilage(x))", "score": 0}
{"id": "eqasc_validation_203", "prediction": "all x y z.((Ear(x) & Oar(y) & Karbilage(z)) -> MadeOfCartilize(x,y,z))", "score": 0}
{"id": "eqasc_validation_203", "prediction": "all x.(EarsMadeOfCartilization(x) -> MadeOfCartilization(x))", "score": 0}
{"id": "eqasc_validation_203", "prediction": "all x.((Ears(x) & MadeOfCartilization(x)) -> MadeOfCartillage(x))", "score": 0}
{"id": "eqasc_validation_203", "prediction": "all x.((Earbuds(x) & MadeOfCarbon(x)) -> MadeOfCarbon(x))", "score": 0}
{"id": "eqasc_validation_203", "prediction": "all x y.((Ear(x) & Knife(y)) -> MadeOfCartilization(x,y))", "score": 0}
{"id": "eqasc_validation_203", "prediction": "all x y.((Ear(x) & Oar(y) & MadeOfCarbilage(x,y)) -> MadeOfCarboil(x,y))", "score": 0}
{"id": "eqasc_validation_203", "prediction": "all x y.((Ears(x) & Ears(y)) are MadeOfCartilagin(x,y)) -> MadeOfCartilagin(y))", "score": -1}
{"id": "eqasc_validation_203", "prediction": "all x.(Ears(x) & MadeOfCartillage(x))", "score": 0}
{"id": "eqasc_validation_203", "prediction": "all x.(Ears(x) -> (MadeOfCartilagin(x) & MadeOfCartilagin(x)))", "score": 0}
{"id": "eqasc_validation_203", "prediction": "all x.((Ear(x) & MadeOfCarbon(x)) -> MadeOfCargolage(x))", "score": 0}
{"id": "eqasc_validation_204", "prediction": "(all x.(Fish(x) -> BonySkeleton(x)) & all y.(Shark(y) -> (HasSkeleton(y) & MadeOfCartilagin(y))))", "score": 0}
{"id": "eqasc_validation_204", "prediction": "all x y z.((Fish(x) & Shark(y) & BonySkeleton(y) & Skeleton(z) & MadeOfCartilagin(z)) -> Has(y,z))", "score": 0}
{"id": "eqasc_validation_204", "prediction": "(all x y.((Fish(x) & BonySkeletons(x)) -> Has(x,y)) & all z w.((Shark(z) & Carbilage(w) & Skeleton(z)) -> Has(x,z,w))))", "score": -1}
{"id": "eqasc_validation_204", "prediction": "(all x y.(Fish(x) -> BonySkeleton(x)) & (Shark(y) -> SkeletonMadeOfCartillage(y)))", "score": 0}
{"id": "eqasc_validation_204", "prediction": "all x y z.((Fish(x) & Shark(y) & BonySkeleton(x) & Carbohydrate(y)) -> Has(x,y))", "score": 0}
{"id": "eqasc_validation_204", "prediction": "(all x.(Fish(x) -> BonySkeleton(x)) & all y.(Shark(y) -> MakesSkeletonFromCarbidilage(y)))", "score": 0}
{"id": "eqasc_validation_204", "prediction": "all x y.((Fish(x) & Shark(y)) -> (BoneySkeleton(x) | (MadeOfCartilagin(y) | -MadeOfCartilagin(y)))))", "score": -1}
{"id": "eqasc_validation_204", "prediction": "(all x y.((Fish(x) & BonySkeleton(x)) -> Has(x,y)) & ((Shark(y) & Skeleton(x)) -> HasCartilisation(y)))", "score": 0}
{"id": "eqasc_validation_204", "prediction": "all x y.((Fish(x) & Shark(y)) -> (BonySkeleton(x) | (CartilaginousSkeleton(y) | -Cartilage(y)))))", "score": -1}
{"id": "eqasc_validation_204", "prediction": "(all x y z.(Fish(x) -> BonySkeleton(x)) & (Shark(y) -> HasSkeleton(y)))", "score": 0}
{"id": "eqasc_validation_204", "prediction": "all x y.((Fish(x) & Shark(y)) -> (HasBonySkeletons(x) & HasSkeleton(y) & MadeOfCartillage(y)))", "score": 0}
{"id": "eqasc_validation_204", "prediction": "all x y.((Fish(x) & Shark(y)) -> (BonySkeleton(x) & MadeOfCartilization(y)))", "score": 0}
{"id": "eqasc_validation_204", "prediction": "(all x.(Fish(x) -> BonySkeleton(x)) & all y.(Shark(y) -> HasSkeleton(y,Cartoon))))", "score": -1}
{"id": "eqasc_validation_204", "prediction": "(all x.(Fish(x) -> HasBonySkeleton(x)) & all y.(Shark(y) -> HasKnuckles(y))))", "score": -1}
{"id": "eqasc_validation_204", "prediction": "(exists x.(Fish(x) & BonySkeleton(x)) & exists y.(Shark(y) & BonySkeleton(y))))", "score": -1}
{"id": "eqasc_validation_204", "prediction": "all x y.((Fish(x) & Shark(y)) -> (HasBonySkeleton(x) | HasSkeleton(y) & MadeOfCartillage(y)))", "score": 0}
{"id": "eqasc_validation_205", "prediction": "all x.((Fish(x) & Shark(x)) -> (LessFlexibleSkeletons(x) & StrongerSkeletons(x)))", "score": 0}
{"id": "eqasc_validation_205", "prediction": "all x y z w.((Fish(x) & Shark(y) & Skelet(z) & Flexible(x,z) & Stronger(z)) -> LessFlexibleButStronger(x,w))", "score": 0}
{"id": "eqasc_validation_205", "prediction": "all x y.((Fish(x) & Shark(y)) -> (LessFlexibleSkeleton(x,y) & StrongerSkeleton(x,y)))", "score": 0}
{"id": "eqasc_validation_205", "prediction": "all x y.((Fish(x) & Shark(y)) -> HasLessFlexibleSkeletons(x,y & StrongerSkeletons(x))", "score": -1}
{"id": "eqasc_validation_205", "prediction": "all x y.((Fish(x) & Shark(y)) -> (LessFlexibleSkeletons(x) & StrongerSkeletons(x)))", "score": 0}
{"id": "eqasc_validation_205", "prediction": "all x y.((Fish(x) & Shark(y)) -> (LessFlexible(x) & StrongerSkeleton(x) & ComparedTo(x,y)))", "score": 0}
{"id": "eqasc_validation_205", "prediction": "all x y.((Fish(x) & Shark(y)) -> (LessFlexibleSkeletons(x,y) & StrongerSkeletons(x)))", "score": 0}
{"id": "eqasc_validation_205", "prediction": "all x.((Fish(x) & Shark(x)) -> LessFlexibleSkiletons(x) & StrongerSkeletons(x))", "score": 0}
{"id": "eqasc_validation_205", "prediction": "all x y.((Fish(x) & Shark(y)) -> LessFlexibleButStrongerSkeletons(x,y))", "score": 0}
{"id": "eqasc_validation_205", "prediction": "all x.((Fish(x) & Shark(x)) -> LessFlexibleButStrongerSkeletons(x))", "score": 0}
{"id": "eqasc_validation_206", "prediction": "all x.(ArticularCartilla(x) -> (Cartillage(x) & CoversStoneAndJoin(x)))", "score": 0}
{"id": "eqasc_validation_206", "prediction": "all x.(ArticularCartilagin(x) -> (Cartilagin(x) & CoversBoneAndJoinAreas(x)))", "score": 0}
{"id": "eqasc_validation_206", "prediction": "all x.(ArticularCartillage(x) -> (CoversBone(x) & CoversSolidAreas(x)))", "score": 0}
{"id": "eqasc_validation_206", "prediction": "all x.(ArticularCartilagin(x) -> (Cartilagin(x) & CoversBone(x) & CoversJoinAreas(x)))", "score": 0}
{"id": "eqasc_validation_206", "prediction": "all x.(ArticularCartilage(x) -> CoversBoneAndJoin(x))", "score": 0}
{"id": "eqasc_validation_206", "prediction": "all x.(ArticularCartillage(x) -> (CoversBone(x) & CoversJoinAreas(x)))", "score": 0}
{"id": "eqasc_validation_206", "prediction": "all x.(ArticularCartillo(x) -> (Cardilage(x) & CoversBone(x) & CoversJoinAreas(x)))", "score": 0}
{"id": "eqasc_validation_206", "prediction": "all x.(ArticularCartilagin (x) -> Covers(x,Bone,Join))", "score": 0}
{"id": "eqasc_validation_206", "prediction": "all x y.((ArticularCartille(x) & Bone(y)) -> Covers(x,y))", "score": 0}
{"id": "eqasc_validation_206", "prediction": "all x.(ArticularCartilagination(x) -> CoversBoneAndJoin(x))", "score": 0}
{"id": "eqasc_validation_206", "prediction": "all x.(ArticularCartilage(x) -> (CoversBone(x) & CoversJoin(x)))", "score": 0}
{"id": "eqasc_validation_206", "prediction": "all x.(ArticularCartilagia(x) -> (Cartilage(x) & CoversBoneAndJoinAreas(x)))", "score": 0}
{"id": "eqasc_validation_206", "prediction": "all x.(ArticularCartilagin -> (Cartilagin(x) & Covers(x,Bone,Join,Soil,Soil)))", "score": 0}
{"id": "eqasc_validation_206", "prediction": "all x.(ArticularCartilagia(x) -> (PolarnsBoneAndJoin(x) & PartOf(x,y)))", "score": 0}
{"id": "eqasc_validation_207", "prediction": "all x y.((Bone(x) & Material(y) & Covers(x,y)) -> (LessFlexible(x) & Stronger(x,y) & MoreFlexible(x,z)))", "score": 0}
{"id": "eqasc_validation_207", "prediction": "all x y.((Bone(x) & Material(y)) -> (LessFlexible(x) & Stronger(x,y) & Covers(x)))", "score": 0}
{"id": "eqasc_validation_207", "prediction": "all x y.((Bone(x) & Material(y) & Covers(x,y)) -> (LessFlexible(x) & Stronger(x,y)))", "score": 0}
{"id": "eqasc_validation_207", "prediction": "all x.(Material(x) -> (LessFlexible(x) & Stronger(x)))", "score": 0}
{"id": "eqasc_validation_207", "prediction": "all x y.((Bone(x) & Material(y)) -> (LessFlexible(x,y) & Stronger(x,y)))", "score": 0}
{"id": "eqasc_validation_207", "prediction": "all x.(Bone(x) -> (LessFlexible(x) & Stronger(x,y) & Material(y) & Covers(x),c) & MuscleCovers(x,ceilings)))", "score": -1}
{"id": "eqasc_validation_207", "prediction": "all x y z.((Bone(x) & Material(y) & Material(z)) -> (LessFlexible(x),y) & Stronger(x,z) & Covers(z,y)))", "score": -1}
{"id": "eqasc_validation_207", "prediction": "all x y z.((Bone(x) & Material(y) & Covers(z)) -> (LessFlexible(x) & Stronger(x,y) & MoreFixed(x,z) & Material(z)))", "score": 0}
{"id": "eqasc_validation_207", "prediction": "all x y z.((Bone(x) & Material(y) & Material(z) & LowerFlexible(x,y) & Stronger(x,z)) -> (LessFlexible(x,z) & Covers(z,y)))", "score": 0}
{"id": "eqasc_validation_207", "prediction": "all x y.((Bone(x) & Material(y) & Covers(x,y)) -> (LowerFlexible(x) & Stronger(x,y)))", "score": 0}
{"id": "eqasc_validation_207", "prediction": "est moinsflexible(bone) & Stronger(bone,material)", "score": -1}
{"id": "eqasc_validation_207", "prediction": "all x y.((Bone(x) & Material(y)) -> (LessFlexible(x) & Stronger(x)))", "score": 0}
{"id": "eqasc_validation_207", "prediction": "all x y.((Bone(x) & Material(y) & Covers(x,y)) -> (LessFlexible(x,y) & Stronger(x,y)))", "score": 0}
{"id": "eqasc_validation_207", "prediction": "all x.((Bone(x) & LessFlexible(x) & Stronger(x) ThanMaterial(x)) -> (LessFlexible(x) & Stronger(x)))", "score": -1}
{"id": "eqasc_validation_208", "prediction": "all x.(Tissue(x) -> (Bone(x,y) & Carilage(y) & BoneMarrow(x,z) & Corneas(z)))", "score": 0}
{"id": "eqasc_validation_208", "prediction": "all x.(Tissue(x) -> (BoneAndCartillage(x) & BoneMarrow(x) & Corneas(x)))", "score": 0}
{"id": "eqasc_validation_208", "prediction": "all x y z w.((Tissue(x) & (Bone(y) | Cartilage(y)) & (BoneMarrow(z) | Cornea(w))) -> (Includes(x,y) & Includes(x,z)))", "score": 0}
{"id": "eqasc_validation_208", "prediction": "all x y.((Tissue(x) & Bone(y) & Cartilage(y)) -> (BoneMarrow(z) | Corneas(z)))", "score": 0}
{"id": "eqasc_validation_208", "prediction": "all x.(Tissue(x) -> (IncludesBone(x) & IncludesCartillage(x) & IncludesBoneMarrow(x) & IncludesCorneas(x)))", "score": 0}
{"id": "eqasc_validation_208", "prediction": "all x y.((Tissue(x) & Bone(y) & Charismatic(y) & BoneMarrow(z) & Cornea(z)) -> CanBeTissue(x,y,z))", "score": 0}
{"id": "eqasc_validation_208", "prediction": "all x.(Tissue(x) -> (IncludesBone(x) & IncludesCartilage(x) & IncludesBoneMarrow(x) & IncludesCornex(x)))", "score": 0}
{"id": "eqasc_validation_208", "prediction": "all x.(Tissue(x) -> (Bone(x) & -Bird(x) & BoneMarrow(x) & Corneas(x)))", "score": 0}
{"id": "eqasc_validation_208", "prediction": "all x.(Tissue(x) -> (Bone(x) & Cartilage(x) & BoneMarrow(x) & Corneas(x)))", "score": 0}
{"id": "eqasc_validation_208", "prediction": "all x.(Tissue(x) -> (Bone(x) & Carylage(x) & BoneMarrow(x) & Corneas(x)))", "score": 0}
{"id": "eqasc_validation_208", "prediction": "all x.(Tissue(x) -> ((IncludesBone(x) | IncludesCartilization(x)) & (IncludesBoneMarrow(x) | IncludesCornacles(x))))", "score": 0}
{"id": "eqasc_validation_208", "prediction": "all x.(Tissue(x) -> (IncludesBone(x) & IncludesCartilum(x) & IncludesBoneMarrow(x) & IncludesCorneas(x)))", "score": 0}
{"id": "eqasc_validation_208", "prediction": "(OfTissues(Tissues(Tissues) -> (Beta(Tissue) & (Bone(t) | Carbohydrate(t) | BoneMarrow(t) | Cornea(t))))", "score": -1}
{"id": "eqasc_validation_208", "prediction": "(Bone(t) | Carilage(t)) & BoneMarrow(t) & Cornea(t))", "score": -1}
{"id": "eqasc_validation_208", "prediction": "(all x.(Tissue(x) -> (IncludesBone(x) | IncludesCartilization(x) | IncludesBoneMarrow(x) | IncludesCorneas(x))))", "score": 0}
{"id": "eqasc_validation_208", "prediction": "all x y z.((Tissue(x) & Bone(y) & Cartilage(z)) | (BoneMarrow(z) | Cornea(z)))) -> (Includes(x,y,z)))", "score": -1}
{"id": "eqasc_validation_209", "prediction": "exists x.(BodylyTissue(x) & (Flexible(x) | Strong(x)))", "score": 0}
{"id": "eqasc_validation_209", "prediction": "exists x.(BodylyTissue(x) & (Fixed(x) | Strong(x)))", "score": 0}
{"id": "eqasc_validation_209", "prediction": "exists x.(BodylyTissue(x) & Flexible(x)) & exists y.(BodylyTissue(y) & Strong(y)))", "score": -1}
{"id": "eqasc_validation_209", "prediction": "exists x.(BodylyTissue(x) & Flexible(x) & Strong(x))", "score": 0}
{"id": "eqasc_validation_209", "prediction": "exists x.(BodylyTissues(x) & Flexible(x) & -Strong(x))", "score": 0}
{"id": "eqasc_validation_209", "prediction": "exists x.(BodylyTissue(x) & FlexibleTouch(x) & StrongTouch(x))", "score": 0}
{"id": "eqasc_validation_209", "prediction": "exists x y.(BodylyTissue(x) & Flexible(x) & BodyTissue(y) & Strong(y))", "score": 0}
{"id": "eqasc_validation_209", "prediction": "exists x y.(BodylyTissue(x) & Tissue(y) & Flexible(x) & Strong(y))", "score": 0}
{"id": "eqasc_validation_209", "prediction": "exists x y.(BodylyTissue(x) & (Flexible(x) | Strong(x)))", "score": 0}
{"id": "eqasc_validation_209", "prediction": "exists x.(BodylyTissue(x) & Flexible(x) | Strong(x))", "score": 0}
{"id": "eqasc_validation_209", "prediction": "exists x y.(BodylyTissue(x) & -(Flexible(x) & -Flexible(y)) | Strong(x)))", "score": -1}
{"id": "eqasc_validation_209", "prediction": "exists x.(BodylyTissue(x) & Flexible(x) | (BodylyTissue(x) & Strong(x))))", "score": -1}
{"id": "eqasc_validation_210", "prediction": "all x y.((Cartilage(x) & Bone(y)) -> MoreFlexibleAndLessWeight(x,y))", "score": 0}
{"id": "eqasc_validation_210", "prediction": "all x y.((Cartilage(x) & Bone(y)) -> (MoreFlexible(x,y) & LighterInWeight(x,y)))", "score": 0}
{"id": "eqasc_validation_210", "prediction": "all x y.((Cartilage(x) & Bone(y)) -> (MoreFlexible(x,y) & Lighter(x,y)))", "score": 0}
{"id": "eqasc_validation_210", "prediction": "all x y z.((Cartilage(x) & Bone(y) & Flexible(z)) -> LighterInWeight(x,y,z))", "score": 0}
{"id": "eqasc_validation_210", "prediction": "all x.(Cartilage(x) -> (MoreFlexible(x) & LighterWasth(x)))", "score": 0}
{"id": "eqasc_validation_210", "prediction": "all x.(Cartilage(x) -> (moreFlexible(x) & LighterInWeight(x) & Bone(x)))", "score": 0}
{"id": "eqasc_validation_210", "prediction": "all x.(Cartilage(x) -> (Rapider(x) & Lighter(x) & Withbone(x)))", "score": 0}
{"id": "eqasc_validation_210", "prediction": "all x y.((Cartilage(x) & Bone(y)) -> (Flexible(x) & LighterInWeight(x,y)))", "score": 0}
{"id": "eqasc_validation_210", "prediction": "all x.(Cartilage(x) -> (MoreFixible(x) & LighterInWeight(x)))", "score": 0}
{"id": "eqasc_validation_210", "prediction": "all x y.((Cartilage(x) & Bone(y)) -> (MoreFlexible(x,y) & LighterHandle(x,y)))", "score": 0}
{"id": "eqasc_validation_210", "prediction": "all x.(Cartilage(x) -> (Flexible(x) & LighterWath(x)))", "score": 0}
{"id": "eqasc_validation_210", "prediction": "all x y.((Cartilage(x) & Bone(y)) -> (MoreFlexible(x) & LighterInWeight(x,y)))", "score": 0}
{"id": "eqasc_validation_210", "prediction": "all x.(Castilage(x) -> (MoreFlexible(x) & LighterWheat(x)))", "score": 0}
{"id": "eqasc_validation_211", "prediction": "all x y.((Bone(x) & Carbolage(y)) -> (Stronger(x) & MoreRigid(x,y)))", "score": 0}
{"id": "eqasc_validation_211", "prediction": "all x y.((Bone(x) & Carbolage(y)) -> (Stronger(x) & MoreRigid(x)))", "score": 0}
{"id": "eqasc_validation_211", "prediction": "all x y.((Bone(x) & Carbolage(y)) -> (Stronger(x,y) & MoreRigid(x,y)))", "score": 0}
{"id": "eqasc_validation_211", "prediction": "all x y.((Bone(x) & Carbilage(y)) -> (Stronger(x,y) & MoreRigid(x,y)))", "score": 0}
{"id": "eqasc_validation_211", "prediction": "all x y.((Bone(x) & Carboillage(y)) -> (Flexible(x) & MoreRigid(x)))", "score": 0}
{"id": "eqasc_validation_211", "prediction": "all x y z.((Bone(x) & Carbilage(y) & Bone(z)) -> (Strengthener(x,z) & MoreRigid(x,z)))", "score": 0}
{"id": "eqasc_validation_211", "prediction": "all x y.((Bone(x) & Carbolage(y)) -> (Stronger(x,y) & MoreRigid(y)))", "score": 0}
{"id": "eqasc_validation_211", "prediction": "all x.((Bone(x) & MoreStrongerChief(x) & MoreRigidChief(x)) -> MoreRigidThanCartillage(x))", "score": 0}
{"id": "eqasc_validation_211", "prediction": "all x y.((Bone(x) & Cartilage(y)) -> (Stronger(x) & MoreRigid(x,y)))", "score": 0}
{"id": "eqasc_validation_211", "prediction": "all x.(Bone(x) -> (Stronger(x) & MoreRigid(x)))", "score": 0}
{"id": "eqasc_validation_211", "prediction": "all x y.((Bone(x) & Carilage(y)) -> (Stronger(x,y) & MoreRigid(x,y)))", "score": 0}
{"id": "eqasc_validation_211", "prediction": "all x.((Bone(x) & Stronger(x) & MoreRigid(x)) -> UnlikeCartilagin(x))", "score": 0}
{"id": "eqasc_validation_211", "prediction": "all x y.((Bone(x) & Bone(y)) -> (Stronger(x,y) & MoreRigid(x,y)))", "score": 0}
{"id": "eqasc_validation_211", "prediction": "all x y z.((Bone(x) & Cartilage(y) & Bone(z)) -> (Stronger(x,y) & MoreRigid(x,z)))", "score": 0}
{"id": "eqasc_validation_212", "prediction": "all x y.((BoneSkeleton(x) & SharkSkeleton(y)) -> (LessFlexible(x,y) & Stronger(y)))", "score": 0}
{"id": "eqasc_validation_212", "prediction": "all x.((BoneSkeleton(x) & SharkSkeleton(x)) -> (LittleFlexible(x) & Stronger(x)))", "score": 0}
{"id": "eqasc_validation_212", "prediction": "all x y.((BoneSkeleton(x) & SharkSkeleton(y)) -> (LessFlexibleThan(x,y) & StrongerThan(x,y)))", "score": 0}
{"id": "eqasc_validation_212", "prediction": "all x.((Hexagon(x) & Shark(x)) -> (LessFlexible(x) & Stronger(x)) & LessFlexible(x) & Stronger(x) & Stronger(x)))", "score": -1}
{"id": "eqasc_validation_212", "prediction": "all x y.((BoneSkeleton(x) & SharkSkeleton(y)) -> (LessFlexible(x,y) & Stronger(x,y)))", "score": 0}
{"id": "eqasc_validation_212", "prediction": "all x y.((BoneSkeleton(x) & Shark(y)) -> (LessFlexible(x,y) & Stronger(x,y)))", "score": 0}
{"id": "eqasc_validation_212", "prediction": "all x.((BoneSkeleton(x) & SharkSkeleton(x)) -> (LessFlexible(x) & Stronger(x)))", "score": 0}
{"id": "eqasc_validation_212", "prediction": "all x y z.((BoneSkeleton(x) & Shark(y) & Shark(z)) -> (LessFlexibleSkeleton(x,y) & StrongerSkeleton(x,z)))", "score": 0}
{"id": "eqasc_validation_212", "prediction": "all x y z.((BoneSkeleton(x) & SharkSkeleton(y) & Shark(z)) -> (LessFlexibleThan(x,y) & Stronger(x,z)))", "score": 0}
{"id": "eqasc_validation_212", "prediction": "all x y.((BoneSkeleton(x) & Shark(y)) -> (LittleFlexible(x,y) & Stronger(x,y)))", "score": 0}
{"id": "eqasc_validation_212", "prediction": "all x y z.((BoneSkeleton(x) & SharkSkeleton(y) & Shark(z)) -> (LessFlexible(x,y,z) & Stronger(y)))", "score": 0}
{"id": "eqasc_validation_212", "prediction": "all x y.((BoneSkeleton(x) & SharkSkeleton(y)) -> (LessFlexibleThan(x,y) & StrongerThan(x,z)))", "score": 0}
{"id": "eqasc_validation_212", "prediction": "all x y z.((BoneSkeleton(x) & Shark(y) & Shark(z)) -> (LessFlexible(x,y) & Stronger(x,z)))", "score": 0}
{"id": "eqasc_validation_212", "prediction": "all x y.((BoneSkeleton(x) & Shark(y)) -> (LessFlexibleSkeleton(x,y) & StrongerSkeleton(x,y)))", "score": 0}
{"id": "eqasc_validation_213", "prediction": "all x.(Cartilage(x) -> (Strong(x) & Flexible(x) & Lightweight(x)))", "score": 0}
{"id": "eqasc_validation_214", "prediction": "all x.(Bone(x) -> (LessLightweightThanCartilagin(x) & StrongerThanCartilagin(x)))", "score": 0}
{"id": "eqasc_validation_214", "prediction": "all x y.((Bone(x) & Cartilage(y)) -> (LessLightweight(x) & Stronger(x)))", "score": 0}
{"id": "eqasc_validation_214", "prediction": "all x.(Bone(x) -> (LessLightweight(x) & Stronger(x)))", "score": 0}
{"id": "eqasc_validation_214", "prediction": "(LessLightweight(bone,cartilage) & Stronger(bone,cartilage))", "score": 0}
{"id": "eqasc_validation_214", "prediction": "All x.((Bone(x) & LessLightweightThanCartilagin(x)) -> Stronger(x))", "score": -1}
{"id": "eqasc_validation_214", "prediction": "(Lightweight(bone) & Stronger(bone))", "score": 0}
{"id": "eqasc_validation_214", "prediction": "(LeastLightweight(bone) & Stronger(bone))", "score": 0}
{"id": "eqasc_validation_214", "prediction": "(all x.(Bone(x) -> -Lightweight(x)) & (Cartilage(x) -> Stronger(x)))", "score": 0}
{"id": "eqasc_validation_214", "prediction": "all x.(Bone(x) -> (Lightweight(x) & Stronger(x)))", "score": 0}
{"id": "eqasc_validation_214", "prediction": "all x.(Bone(x) -> (LessLightweightThanCartilage(x) & StrongerThanCartilage(x)))", "score": 0}
{"id": "eqasc_validation_214", "prediction": "all x y.((Bone(x) & Carboil(y) & Bone(x)) -> (LessLightweight(x,y) & Stronger(x,y)))", "score": 0}
{"id": "eqasc_validation_215", "prediction": "all x.(Cartilage(x) -> (SemiTranslucentTissue(x) & Firm(x) & MoreFlexibleThanBone(x)))", "score": 0}
{"id": "eqasc_validation_215", "prediction": "all x.(Cartilagin(x) -> (SemiTranslucentTissue(x) & Firm(x) & MoreFlexibleThanBone(x)))", "score": 0}
{"id": "eqasc_validation_215", "prediction": "all x.(Cartilage(x) -> (SemitranslucentTissue(x) & Firm(x) & MoreFlexibleThanbone(x)))", "score": 0}
{"id": "eqasc_validation_215", "prediction": "all x.(Cartilage(x) -> (SemiTranslucentTissue(x) & Firm(x) & FlexibleRole(x)))", "score": 0}
{"id": "eqasc_validation_215", "prediction": "all x.(Cartilage(x) -> (SemiTranslucentTissue(x) & Firm(x) & FlexibleThanBone(x)))", "score": 0}
{"id": "eqasc_validation_215", "prediction": "all x.(Cartilage(x) -> (Semitranslucent(x) & Firm(x) & Flexible(x)))", "score": 0}
{"id": "eqasc_validation_215", "prediction": "all x y.((Cartilage(x) & Bone(y)) -> (SemitranslucentTissue(x) & Firm(x) & MoreFlexible(x)))", "score": 0}
{"id": "eqasc_validation_215", "prediction": "all x.(Cartilage(x) -> (SemitranslucentTissue(x) & Firm(x) & MoreFlexibleThanBone(x)))", "score": 0}
{"id": "eqasc_validation_215", "prediction": "all x.((Cartilage(x) & SemiTranslucentTissue(x) & Firm(x) & MoreFlexibleThanBone(x)) -> (GrullyAnimal(x) & SemiFlexibleTissue(x)))", "score": 0}
{"id": "eqasc_validation_215", "prediction": "all x y.((Cartilage(x) & (SemiTranslucentTissue(y) | Firm(y)) & FlexibleEraserThanBone(y)) -> GrosslyBarthificial(x))", "score": 0}
{"id": "eqasc_validation_215", "prediction": "all x.((Cartilage(x) & SemiTranslucentTissue(x) & Firm(x) & MoreFlexibleThanBone(x)) -> Gimmethly(x))", "score": 0}
{"id": "eqasc_validation_215", "prediction": "all x.(Cartilage(x) -> (StaysTranslucentTissue(x) & Firm(x) & Flexible(x)))", "score": 0}
{"id": "eqasc_validation_215", "prediction": "(Exclusively,Cactus(crust) & SemiTranslucentTissue(circum) & Firm(circum) & Flexible(circum))", "score": -1}
{"id": "eqasc_validation_215", "prediction": "all x.(Cartilage(x) -> (SemitranslucentTissue(x) & Firm(x) & FlexibleRest(x) & MoreBoneFormal(x)))", "score": 0}
{"id": "eqasc_validation_215", "prediction": "all x.(Cartilage(x) -> (SemiTranslucentTissue(x) & Firm(x) & Flexible(x)))", "score": 0}
{"id": "eqasc_validation_216", "prediction": "all x y.((Bone(x) & SemiTranslucentTissue(y)) -> LessFlexibleThan(x,y))", "score": 0}
{"id": "eqasc_validation_216", "prediction": "all x y.((Bone(x) & SemiTranslucentTissue(y)) -> LessFlexible(x,y))", "score": 0}
{"id": "eqasc_validation_216", "prediction": "all x y.((Bone(x) & SemitranslucentTissue(y)) -> LessFlexibleThan(x,y))", "score": 0}
{"id": "eqasc_validation_216", "prediction": "all x y.((Bone(x) & SemiTranslucentTissue(y) & LessFlexible(x,y)) -> LessFlexible(x,y))", "score": 0}
{"id": "eqasc_validation_216", "prediction": "all x y.((Bone(x) & SemiTranslucent(y)) -> LessFlexibleTissue(x,y))", "score": 0}
{"id": "eqasc_validation_216", "prediction": "all x y z.((Bone(x) & SemiTranslucentTissue(y) & Tissue(z)) -> LessFlexibleThan(x,y,z))", "score": 0}
{"id": "eqasc_validation_216", "prediction": "all x.((Bone(x) & SemiTranslucentTissue(x)) -> LessFlexible(x))", "score": 0}
{"id": "eqasc_validation_217", "prediction": "all x y.((PastWeather(x) & Driving(y)) -> DecreasesVisibility(x,y))", "score": 0}
{"id": "eqasc_validation_217", "prediction": "all x.((BadWeather(x) & PoorWeather(x)) -> DecreasesVisibilityAtDriving(x))", "score": 0}
{"id": "eqasc_validation_217", "prediction": "all x.((GasWeather(x) & BadWeather(x)) -> ReducesVisibility(x))", "score": 0}
{"id": "eqasc_validation_217", "prediction": "all x.(BadWeather(x) -> DecreasesVisibility(x))", "score": 0}
{"id": "eqasc_validation_217", "prediction": "all x.((BadWeather(x) & PoorVisibility(x)) -> DecreaseVisibilityDecrease(x))", "score": 0}
{"id": "eqasc_validation_217", "prediction": "all x y.((BadWeather(x) & BadWeather(y)) -> (DecreasedVisibility(z) & Driving(z)))", "score": 0}
{"id": "eqasc_validation_217", "prediction": "all x y.((BadWeather(x) & BadWeather(y)) -> DecreasesVisibility(x,y))", "score": 0}
{"id": "eqasc_validation_217", "prediction": "all x y.((MadWeather(x) & BadWeather(y)) -> (DecreasesVisibility(x,y) & Driving(y)))", "score": 0}
{"id": "eqasc_validation_217", "prediction": "all x.(BadWeather(x) -> DecreasesVisibilityWhenDriving(x))", "score": 0}
{"id": "eqasc_validation_217", "prediction": "all x y.((BadWeather(x) & BadWeather(y)) -> ReducesVisibility(x,y))", "score": 0}
{"id": "eqasc_validation_217", "prediction": "all x.((BadWeather(x) & DecreasesVisibility(x)) -> DrivingMotor(x))", "score": 0}
{"id": "eqasc_validation_217", "prediction": "all x.(MoreBadWeatherDecreasesVisibility(x) & Driving(x))", "score": 0}
{"id": "eqasc_validation_217", "prediction": "all x.((BadWeather(x) & -GoodWeather(x)) -> DecreasesVisibility(x))", "score": 0}
{"id": "eqasc_validation_217", "prediction": "all x y.((Weather(x) & Bad(i)) -> DecreasesVisibility(y,r,x))", "score": 0}
{"id": "eqasc_validation_217", "prediction": "all x.((BadWeather(x) & DecreasesVisibility(x)) -> Drives(x))", "score": 0}
{"id": "eqasc_validation_217", "prediction": "all x y.((PastWeather(x) & BadWeather(y)) -> DecreasesVisibility(x,y))", "score": 0}
{"id": "eqasc_validation_218", "prediction": "All x.(MoreVisibility(x) -> SafeOperation(x))", "score": -1}
{"id": "eqasc_validation_218", "prediction": "all x.(MoreVisibility(x) -> SafeOperation(x))", "score": 0}
{"id": "eqasc_validation_218", "prediction": "all x.(MoreVisibility(x) -> SafeOperation(x).)", "score": -1}
{"id": "eqasc_validation_218", "prediction": "(All x.(MoreVisibility(x) -> SafeOperation(x))", "score": -1}
{"id": "eqasc_validation_218", "prediction": "morevisibility = SafeOperation(x))", "score": -1}
{"id": "eqasc_validation_218", "prediction": "all x.(MoreVisibilityWeighsSafeOperation(x) -> MoreVisibility(x))", "score": 0}
{"id": "eqasc_validation_218", "prediction": "all x.((Visibility(x) & SafeOperation(x)) -> MoreVisibility(x))", "score": 0}
{"id": "eqasc_validation_218", "prediction": "all x.(PreferredVisibility(x) -> SafeOperation(x))", "score": 0}
{"id": "eqasc_validation_218", "prediction": "MehrVisibility(MoreVisibility(MoreOptions(MoreVisibility(MoreOptions))", "score": -1}
{"id": "eqasc_validation_219", "prediction": "all x.((GoodWeather(x) & BadWeather(x)) -> DecreasesSafeOperation(x))", "score": 0}
{"id": "eqasc_validation_219", "prediction": "all x.((BadWeather(x) & DecreasesSafeOperation(x) & Driving(x)) -> NegativeWeatherDecreasesSafeOperation(x))", "score": 0}
{"id": "eqasc_validation_219", "prediction": "all x y.((BadWeather(x) & BadDriver(y)) -> DecreasesSafeOperationWhileDriving(x))", "score": 0}
{"id": "eqasc_validation_219", "prediction": "all x.(BadWeather(x) -> DecreasesSafeOperation(x))", "score": 0}
{"id": "eqasc_validation_219", "prediction": "all x:((BadWeather(x) & DecreasesSafeOperation(x)) -> DriveSafe(x))", "score": -1}
{"id": "eqasc_validation_219", "prediction": "all x.(BadWeather(x) -> DecreasesSafeOperationWhenDriving(x))", "score": 0}
{"id": "eqasc_validation_219", "prediction": "all x y.((BadWeather(x) & SafeManufacturing(y)) -> Decreases(x,y))", "score": 0}
{"id": "eqasc_validation_219", "prediction": "all x.((BadWeather(x) & DecreasesSafeOperation(x)) -> DrivingRelated(x))", "score": 0}
{"id": "eqasc_validation_219", "prediction": "all x.((BadWeather(x) & SafeOperation(x) for Driving(x) & -SafeWeather(x)) -> Decreases(x,SafeOperationAndDriving(x))", "score": -1}
{"id": "eqasc_validation_219", "prediction": "all x.((BadWeather(x) & SafeOperation(x) & Driving(x)) -> Decreases(x))", "score": 0}
{"id": "eqasc_validation_219", "prediction": "all x.((Waiting(x) & BadWeather(x)) -> DecreasesSafeOperation(x))", "score": 0}
{"id": "eqasc_validation_219", "prediction": "(Alley,BadWeatherDecreasesSafeOperation(bad,Downgrades) and Driving(bad,Downgrade,Downgrade))", "score": -1}
{"id": "eqasc_validation_219", "prediction": "all x.((BadWeather(x) & SafeOperation(x)) -> Decreases(x))", "score": 0}
{"id": "eqasc_validation_219", "prediction": "all x.((Weather(x) & Bad(x) & SafeOperation(x) & Driving(x)) -> ReducesSafeOperation(x))", "score": 0}
{"id": "eqasc_validation_219", "prediction": "all x y z.((BadWeather(x) & Operation(y) & Driving(z)) -> (DecreasesSafeOperation(x,y) & Driving(y)))", "score": 0}
{"id": "eqasc_validation_220", "prediction": "all x.(GoodVisibility(x) -> SafeDriving(x))", "score": 0}
{"id": "eqasc_validation_220", "prediction": "all x.((GoodVisibility(x) & SafeDriving(x)) -> Essential(x))", "score": 0}
{"id": "eqasc_validation_220", "prediction": "all x.(GoodVisibility(x) -> EssentialForSafeDriving(x))", "score": 0}
{"id": "eqasc_validation_220", "prediction": "all x.(SafeDriving(x) -> GoodVisibility(x))", "score": 0}
{"id": "eqasc_validation_220", "prediction": "All x.(GoodVisibility(x) -> SafeDriving(x))", "score": -1}
{"id": "eqasc_validation_220", "prediction": "all x.((GoodVisibility(x) & SafeDriving(x)) -> ElementaryForDriving(x))", "score": 0}
{"id": "eqasc_validation_221", "prediction": "all x.(BadWeather(x) -> UnsafeDrivingConditions(x))", "score": 0}
{"id": "eqasc_validation_221", "prediction": "all x.((BadWeather(x) & UnsafeDrivingConditions(x,2)) -> Causes(x,4))", "score": 0}
{"id": "eqasc_validation_221", "prediction": "all x.(BadWeather(x) -> UnsafeDriving(x))", "score": 0}
{"id": "eqasc_validation_221", "prediction": "all x.((Weather(x) & Bad(x)) -> Unsafe(x))", "score": 0}
{"id": "eqasc_validation_221", "prediction": "all x.((BadWeather(x) & UnsafeDrivingConditions(x)) -> Causes(x,Screens,Causes))", "score": 0}
{"id": "eqasc_validation_221", "prediction": "all x.(BadWeather(x) -> CausesUnsafeDrivingConditions(x))", "score": 0}
{"id": "eqasc_validation_221", "prediction": "all x.((BadWeather(x) -> UnsafeDriving(x))", "score": -1}
{"id": "eqasc_validation_222", "prediction": "all x.((Thunderstorm(x) & Hailing(x)) -> DangerousWeatherPhenomenon(x))", "score": 0}
{"id": "eqasc_validation_222", "prediction": "all x.((Thunderstorm(x) & Storm(y)) -> (Hail(x) & DangerousWeatherPhenomenon(x,y)))", "score": 0}
{"id": "eqasc_validation_222", "prediction": "all x.((Thunderstorm(x) & Hail(x)) -> DangerousWeatherPhenomenon(x))", "score": 0}
{"id": "eqasc_validation_222", "prediction": "all x.(DangerousWeatherPhenomenon(x) & ProducedByThunderstorms(x)) -> Hail(x))", "score": -1}
{"id": "eqasc_validation_222", "prediction": "all x.((Thunderstorm(x) & HarshWeatherPhenomenon(x)) -> Hail(x))", "score": 0}
{"id": "eqasc_validation_222", "prediction": "all x.(DangerousWeatherPhenomenon(x) & StormstormProduce(x) -Hail(x))", "score": -1}
{"id": "eqasc_validation_222", "prediction": "(DangerousWeatherPhenomenon(Thunderstorm) & Produces(Thunderstorm) & Hail(Hail))", "score": 0}
{"id": "eqasc_validation_222", "prediction": "all x.((WeatherPhenomenon(x) & Stormy(x)) -> Hail(x))", "score": 0}
{"id": "eqasc_validation_222", "prediction": "all x.((Tornado(x) & Thornstorm(x)) -> Hail(x))", "score": 0}
{"id": "eqasc_validation_222", "prediction": "all x.(Tornado(x) -> (DangerousWeatherPhenomenon(x) & Produces(x,y)))", "score": 0}
{"id": "eqasc_validation_222", "prediction": "all x y.((Thunderstorm(x) & Hail(y)) -> DangerousWeatherPhenomenon(x))", "score": 0}
{"id": "eqasc_validation_222", "prediction": "all x.((Thunderstorm(x) & HazardousWeatherPhenomenon(x)) -> Hail(x))", "score": 0}
{"id": "eqasc_validation_222", "prediction": "all x.((WarmthPhenomenon(x) & RainstormsProduce(x)) -> Hail(x))", "score": 0}
{"id": "eqasc_validation_222", "prediction": "all x.((Thunderstorm(x) & Hurt(x)) -> DangerousWeatherPhenomenon(x))", "score": 0}
{"id": "eqasc_validation_223", "prediction": "all x.(Hail(x) -> DecreasesVisibility(x))", "score": 0}
{"id": "eqasc_validation_223", "prediction": "all x.(Hail(x) -> (DecreasesVisibility(x) & Driving(x)))", "score": 0}
{"id": "eqasc_validation_223", "prediction": "all x.(HailDecreasesVisibility(x) -> DrivesWith(x,Hire,Drive))", "score": 0}
{"id": "eqasc_validation_223", "prediction": "all x.(HailDensity(x) -> DecreasesVisibilityInDriving(x))", "score": 0}
{"id": "eqasc_validation_223", "prediction": "all x.(Hail(x) -> IncreasesVisibility(x))", "score": 0}
{"id": "eqasc_validation_223", "prediction": "all x.(Hail(x) -> IncreasesVisibilityAndDrive(x))", "score": 0}
{"id": "eqasc_validation_223", "prediction": "all x.(Hail(x) -> DecreasesVisibilityWhileDriven(x))", "score": 0}
{"id": "eqasc_validation_223", "prediction": "all x.(Hail(x) -> (HailDecreasesVisibility(x) & Driving(x)))", "score": 0}
{"id": "eqasc_validation_223", "prediction": "all x y.((Hail(x) & Driving(y)) -> DecreasesVisibility(x,y))", "score": 0}
{"id": "eqasc_validation_223", "prediction": "all x y z.((Hail(x) & Driving(y) & Driving(z)) -> IncreasesVisibility(x,y,z))", "score": 0}
{"id": "eqasc_validation_223", "prediction": "all x.(HailDecreasesVisibility(x) & Driving(x))", "score": 0}
{"id": "eqasc_validation_223", "prediction": "all x y.((Hail(x) & Driving(y,X)) -> ReducesVisibility(x))", "score": 0}
{"id": "eqasc_validation_224", "prediction": "all x y.((Fog(x) & SmallBoatHarbor(y)) -> TakedVisibilityToNearZero(x,y))", "score": 0}
{"id": "eqasc_validation_224", "prediction": "with the fog, visibility was near zero (DrivingToSmallBoatHarbour(y) & DrivingToSmallBoatHarbor(x)))", "score": -1}
{"id": "eqasc_validation_224", "prediction": "all x.((Fog(x) & BigBoatHarborttournamentSite(x) & DrivingTo(x,s,z)) -> VisibilityTargetNoReferenceZero(x))", "score": 0}
{"id": "eqasc_validation_224", "prediction": "all x y.((Fog(x) & SmallBoatHarbor(y)) -> NearNullVisibility(x,y))", "score": 0}
{"id": "eqasc_validation_224", "prediction": "all x.((SmallBoatHarborTournamentSite(x) & FogTakesVisibilityToNearZero(x)) -> DrivingTo(x,a))", "score": 0}
{"id": "eqasc_validation_224", "prediction": "all x.(DrivingToSmallBoatHarbor(x) -> FogHdPaint(x))", "score": 0}
{"id": "eqasc_validation_224", "prediction": "all x y.((DriveToSmallBoatHarborTournament(x) & Fog(y)) -> NeighNullVisibility(y))", "score": 0}
{"id": "eqasc_validation_224", "prediction": "all x.((DrivingToSmallBoatHarborTournamentSite(x) & FogTakesVisibilityToNearZero(x)) -> TakenToNearZero(x))", "score": 0}
{"id": "eqasc_validation_224", "prediction": "all x,w.((Fog(x) & SmallBoatHarborTournamentSite(x)) -> VisibilityShippedToNearZero(x))", "score": -1}
{"id": "eqasc_validation_224", "prediction": "all x y.((Fog(x) & SmallBoatHarborTournamentSite(y)) -> TakesVisibilityToNearZero(x,y))", "score": 0}
{"id": "eqasc_validation_224", "prediction": "all x y.((Fog(x) & SmallBoatHarborTournamentSite(y)) -> DrivesToNearZero(x,y))", "score": 0}
{"id": "eqasc_validation_224", "prediction": "all x y z.((Fog(x) & SmallBoatHarborTournamentSite(y,z,x)) -> NearNullVisibility(z))", "score": 0}
{"id": "eqasc_validation_224", "prediction": "all x y.((Fog(x) & SmallBuiltHarborTournamentSite(y)) -> TakenToNearZeroVisibility(x,y))", "score": 0}
{"id": "eqasc_validation_224", "prediction": "all x.((Fog(x) & DrivingToSmallBoatHarborTournamentSite(x)) -> TakenVisibilityToNearNull(x))", "score": 0}
{"id": "eqasc_validation_224", "prediction": "all x y.((Fog(x) & SmallBoatHarborTournamentSite(y) & DrivingTo(x,y)) -> VirtuallyNearNearNullVisibility(x))", "score": 0}
{"id": "eqasc_validation_224", "prediction": "all x y.((Fog(x) & SmallboatHarborTournamentSite(y)) -> TakenToNearZeroVisibility(x,y))", "score": 0}
{"id": "eqasc_validation_225", "prediction": "all x.(BadWeather(x) -> NearZeroVisibility(x))", "score": 0}
{"id": "eqasc_validation_225", "prediction": "all x y z.((MadWeather(x) & Visibility(y) & NeighNull(z)) -> TakesTo(x,y))", "score": 0}
{"id": "eqasc_validation_225", "prediction": "all x.((Weather(x) & Bad(x)) -> NearNullVisibility(x))", "score": 0}
{"id": "eqasc_validation_225", "prediction": "all x.((Weather(x) & Bad(x)) -> NearZeroVisibility(x))", "score": 0}
{"id": "eqasc_validation_225", "prediction": "all x.(BadWeather(x) -> (TakesVisibilityAtNearZero(x)))", "score": 0}
{"id": "eqasc_validation_225", "prediction": "all x y.((BadWeather(x) & Visibility(y)) -> NearNull(x))", "score": 0}
{"id": "eqasc_validation_225", "prediction": "all x.((BadWeather(x) & NearZeroVisibility(x)) -> TakesTo(x,y))", "score": 0}
{"id": "eqasc_validation_225", "prediction": "all x.(BadWeather(x) -> TakesVisibilityToNearZero(x))", "score": 0}
{"id": "eqasc_validation_225", "prediction": "all x y z.((BadWeather(x) & Visibility(y) & NeighborZero(z)) -> Precipitations(x,y,z))", "score": 0}
{"id": "eqasc_validation_225", "prediction": "all x.(BadWeather(x) -> VisibilityNearZero(x))", "score": 0}
{"id": "eqasc_validation_225", "prediction": "all x.((BadWeather(x) & VisibilityAboveZero(x)) -> TakesTo(x,y))", "score": 0}
{"id": "eqasc_validation_225", "prediction": "all x.((BadWeather(x) & VisibleNearZero(x)) -> TakesTo(x,y))", "score": 0}
{"id": "eqasc_validation_225", "prediction": "all x.((BadWeather(x) & NearZero(x)) -> TakeVisibilityToNovel(x))", "score": 0}
{"id": "eqasc_validation_226", "prediction": "all x.((SecondaryAccident(x) & ReducedVisibility(x)) -> MajorProblem(x))", "score": 0}
{"id": "eqasc_validation_226", "prediction": "all x.((SecondaryAccident(x) & DrivingConditions(x,reducedVisibility)) -> MajorProblem(x))", "score": 0}
{"id": "eqasc_validation_226", "prediction": "all x.((SecondaryAccident(x) & DrivingConditionsWithReducedVisibility(x)) -> MajorProblem(x))", "score": 0}
{"id": "eqasc_validation_226", "prediction": "all x.((SecondaryAccident(x) & ReducingVisibility(x)) -> MajorProblem(x))", "score": 0}
{"id": "eqasc_validation_226", "prediction": "all x y.((SecondaryAccident(x) & DrivingConditions(y) & ReducedVisibility(x)) -> MajorProblem(x,y))", "score": 0}
{"id": "eqasc_validation_226", "prediction": "all x.((SecondaryAccidents(x) & ReducedVisibility(x)) -> MajorProblem(x))", "score": 0}
{"id": "eqasc_validation_226", "prediction": "all x y.((SecondaryAccident(x) & DrivingConditionsReducedVisibility(x)) -> MajorProblem(x))", "score": 0}
{"id": "eqasc_validation_226", "prediction": "all x y.((SecondaryAccident(x) & DrivingConditions(y) & ReducedVisibility(x)) -> MajorProblem(x))", "score": 0}
{"id": "eqasc_validation_226", "prediction": "all x.((SecondaryAccident(x) & RedueledVisibility(x)) -> MajorProblem(x))", "score": 0}
{"id": "eqasc_validation_226", "prediction": "all x y.((SecondaryAccident(x) & DrivingCondition(y) & ReducedVisibility(y)) -> MajorProblem(x,y))", "score": 0}
{"id": "eqasc_validation_226", "prediction": "all x.((SecondaryAccident(x) & Subdivision(x)) -> MajorProblem(x))", "score": 0}
{"id": "eqasc_validation_227", "prediction": "all x y.((BadWeather(x) & CarAccident(y)) -> IncreasesRisk(x,y))", "score": 0}
{"id": "eqasc_validation_227", "prediction": "all x.(BadWeather(x) -> IncreasesCarAccidentRisk(x))", "score": 0}
{"id": "eqasc_validation_227", "prediction": "all x y z.((BadWeather(x) & CarAccount(y) & Temperature(z) & Spectra(z)) -> IncreasesRisk(x,y))", "score": 0}
{"id": "eqasc_validation_227", "prediction": "all x.((BadWeather(x) & CarAccidentRisk(y)) -> Increased(x,y))", "score": 0}
{"id": "eqasc_validation_227", "prediction": "all x.(BadWeather(x) -> IncreaseIncreaseInRiskOfCarAccident(x))", "score": 0}
{"id": "eqasc_validation_227", "prediction": "ALL x.((BadWeather(x) & CarAccident(y)) -> IncreasedRisk(x,y))", "score": -1}
{"id": "eqasc_validation_227", "prediction": "all x.((MadWeather(x) & CarAccidents(x)) -> IncreasedRisk(x,y))", "score": 0}
{"id": "eqasc_validation_227", "prediction": "all x.(BadWeather(x) -> IncreasesRiskOfCarAccidents(x))", "score": 0}
{"id": "eqasc_validation_227", "prediction": "all x.((BadWeather(x) & CausesCarAccidents(x)) -> IncreasesRisk(x))", "score": 0}
{"id": "eqasc_validation_228", "prediction": "all x.((Collision(x) & PoorVisibility(x)) -> MoreLikely(x))", "score": 0}
{"id": "eqasc_validation_228", "prediction": "all x.((Collisions(x) & PoorVisibility(x)) -> MoreLikely(x))", "score": 0}
{"id": "eqasc_validation_228", "prediction": "all x y.((Collisions(x) & PoorVisibility(y)) -> MoreLikely(x,y))", "score": 0}
{"id": "eqasc_validation_228", "prediction": "all x y.((Clision(x) & VisibilityPoor(y)) -> MoreLikely(x,y))", "score": 0}
{"id": "eqasc_validation_228", "prediction": "exists x.(Collisions(x) & PoorVisibility(x))", "score": 0}
{"id": "eqasc_validation_229", "prediction": "all x.((BadWeather(x) & MoreLikely(x)) -> CollisionsWhileDriving(x))", "score": 0}
{"id": "eqasc_validation_229", "prediction": "all x.(BadWeather(x) -> MoreLikelyCollisionsWhileDriving(x))", "score": 0}
{"id": "eqasc_validation_229", "prediction": "all x.((BadWeather(x) & Driving(y)) -> MoreLikelyCollisions(y,x))", "score": 0}
{"id": "eqasc_validation_229", "prediction": "all x.(BadWeather(x) -> MoreLikelyCompanions(x))", "score": 0}
{"id": "eqasc_validation_229", "prediction": "all x.((BadWeather(x) & Driving(x)) -> MoreLikelyCollisions(x))", "score": 0}
{"id": "eqasc_validation_229", "prediction": "all x.((BadWeather(x) & Driving(y)) -> MoreLikelyCollisions(x,y))", "score": 0}
{"id": "eqasc_validation_229", "prediction": "all x.((BadWeather(x) & LeastLikelyCollisions(x)) -> MostLikely(x))", "score": 0}
{"id": "eqasc_validation_229", "prediction": "all x.(BadWeather(x) -> MostLikely(x,Collisions,Driving))", "score": 0}
{"id": "eqasc_validation_229", "prediction": "all x y.((BadWeather(x) & Driving(y)) -> MoreLikelyCollapses(x,y))", "score": 0}
{"id": "eqasc_validation_229", "prediction": "all x.(BadWeather(x) -> AffectsCollisions(x))", "score": 0}
{"id": "eqasc_validation_229", "prediction": "all x.((BadWeather(x) & Driving(y)) -> MostLikelyCollisions(x,y))", "score": 0}
{"id": "eqasc_validation_229", "prediction": "all x.(BadWeather(x) -> MakesCollisionsMoreLikelyMakingDriving(x))", "score": 0}
{"id": "eqasc_validation_229", "prediction": "all x y.((BadWeather(x) & Driving(y)) -> (MoreLikely(x,y) by(x,y)))", "score": -1}
{"id": "eqasc_validation_229", "prediction": "all x.(BadWeather(x) -> MakesCollisionsFriendlierWhileDriving(x))", "score": 0}
{"id": "eqasc_validation_229", "prediction": "all x.(BadWeather(x) -> MoreLikelyAndCoupled(x))", "score": 0}
{"id": "eqasc_validation_229", "prediction": "all x y.(((BadWeather(x) & Driving(y)) -> MakesCollisionsMoreLikely(x,y))", "score": -1}
{"id": "eqasc_validation_230", "prediction": "exists x.(Visibility(x) & MajorCauseOfManyAccidents(x))", "score": 0}
{"id": "eqasc_validation_230", "prediction": "all x.(LackOfVisibility(x) -> MajorCauseOfManyAccidents(x))", "score": 0}
{"id": "eqasc_validation_230", "prediction": "all x.((VisibilityLack(x) & DefectsManyAccidents(x)) -> MajorCauseOf(x,y))", "score": 0}
{"id": "eqasc_validation_230", "prediction": "exists x.(LackOfVisibility(x) & MajorCauseOfManyAccidents(x))", "score": 0}
{"id": "eqasc_validation_230", "prediction": "all x.(LackOfVisibilityNotMajorCauseOfMoreAccidents(x) -> MajorCauseOfAccidents(x))", "score": 0}
{"id": "eqasc_validation_230", "prediction": "exists x.(NeedOfVisibility(x) & MajorCauseOfManyAccidents(x))", "score": 0}
{"id": "eqasc_validation_230", "prediction": "all x y.((Visibility(x) & Accident(y)) -> MajorCause(x,y))", "score": 0}
{"id": "eqasc_validation_230", "prediction": "all x.(((LackOfVisibility(x) & ManyAccidents(x)) -> MajorCause(x))", "score": -1}
{"id": "eqasc_validation_230", "prediction": "(MajorCauseOfManyAccidents(lackOfVisibility))", "score": 0}
{"id": "eqasc_validation_230", "prediction": "all x.((LackOfVisibility(x) & ManyAccidents(x)) -> MajorCause(x))", "score": 0}
{"id": "eqasc_validation_230", "prediction": "(exists x.(Exclusive(x) & -VolatileVisibility(x)) & CauseOfManyAccidents(x))", "score": 0}
{"id": "eqasc_validation_230", "prediction": "all x.(LackOfVisibility(x) -> CauseOfManyAccidents(x))", "score": 0}
{"id": "eqasc_validation_230", "prediction": "(MoreActions(Visibility(n) & LossOfVisibility(n)))", "score": -1}
{"id": "eqasc_validation_230", "prediction": "all x.((LackOfVisibility(x) & ManyAccidents(x)) -> Cause(x))", "score": 0}
{"id": "eqasc_validation_230", "prediction": "all x.((LackOfVisibility(x) & MajorCauseOfManyAccidents(x)) -> MajorCauseOfManyAccidents(x))", "score": 0}
{"id": "eqasc_validation_230", "prediction": "(MajorCauseOfManyAccidents(lackOfVisibility(l) & CanCauseAttention(l))", "score": -1}
{"id": "eqasc_validation_231", "prediction": "all x y z.((DeadWeather(x) & -BetterWeather(y) & CarCausesAccident(z)) -> Bad(x,y))", "score": 0}
{"id": "eqasc_validation_231", "prediction": "all x y.((BadWeather(x) & CarAccident(y)) -> Causes(x,y))", "score": 0}
{"id": "eqasc_validation_231", "prediction": "all x (badWeather(x) -> CausesCarAccidents(x))", "score": 0}
{"id": "eqasc_validation_231", "prediction": "all x.(BadWeather(x) -> CausesCarAccident(x))", "score": 0}
{"id": "eqasc_validation_231", "prediction": "all x y z.((BadWeather(x) & CarAccident(y)) -> Causes(x,y))", "score": 0}
{"id": "eqasc_validation_231", "prediction": "all x y.((HotWeather(x) & CarAccident(y)) -> Causes(x,y))", "score": 0}
{"id": "eqasc_validation_231", "prediction": "all x.(BadWeather(x) -> CausesCarAccidents(x))", "score": 0}
{"id": "eqasc_validation_231", "prediction": "all x.((BadWeather(x) & BadWeatherConstruction(x)) -> CausesCarAccidents(x))", "score": 0}
{"id": "eqasc_validation_231", "prediction": "all x.((BadWeather(x) & CarAccident(x)) -> Causes(x,car))", "score": 0}
{"id": "eqasc_validation_232", "prediction": "all x.((BadWeather(x) & ImpairsSafeDriving(x)) -> ImpairsSafeDriving(x))", "score": 0}
{"id": "eqasc_validation_232", "prediction": "all x.( BadWeatherImpairsSafeDriving(x) -> ImpairsFakeWeather(x))", "score": 0}
{"id": "eqasc_validation_232", "prediction": "all x.(BadWeatherImpairsSafeDriving(x) -> BadWeatherImpairsSafeDriving(x))", "score": 0}
{"id": "eqasc_validation_232", "prediction": "all x.(BadWeatherImpairsSafeDriving(x) -> ImpairsSafeDriving(x))", "score": 0}
{"id": "eqasc_validation_232", "prediction": "all x y.((BadWeather(x) & BadWeather(y)) -> ImpairsSafeDriving(x,y))", "score": 0}
{"id": "eqasc_validation_232", "prediction": "badWeatherImpairsSafeDriving(badWeather(badWeather))", "score": 0}
{"id": "eqasc_validation_232", "prediction": "all x.((BadWeather(x) & ImpairsSafeDriving(x,Driving)) -> ImpairsSafeDriving(x))", "score": 0}
{"id": "eqasc_validation_232", "prediction": "all x.(BadWeatherImposesSafeDriving(x) -> ImpairsSafeDriving(x))", "score": 0}
{"id": "eqasc_validation_232", "prediction": "all x.(BadWeatherImprovesSafeDriving(x) -> ImproperWeatherImpairs(x))", "score": 0}
{"id": "eqasc_validation_232", "prediction": "all x y.((BadWeather(x) & BadWeather(y)) -> DoesImpairSafeDriving(x,y))", "score": 0}
{"id": "eqasc_validation_232", "prediction": "badWeatherImpairsSafeDriving(empiricalWeather(empiricalWeather(e) & ImperfectsSafeDriveing(e))", "score": -1}
{"id": "eqasc_validation_232", "prediction": "badWeatherImprovesSafeDriving(x) & BadWeatherImpairsSafeDriving(x))", "score": -1}
{"id": "eqasc_validation_233", "prediction": "all x.(RNA(x) -> (SmallMolecule(x) & SuitableForSqueezingPoresInNuclearMembrane(x)))", "score": 0}
{"id": "eqasc_validation_233", "prediction": "all x.(RNA(x) -> (SmallMolecule(x) & CanSqueezePropertiesInNuclearMembrane(x)))", "score": 0}
{"id": "eqasc_validation_233", "prediction": "all x.(RNA(x) -> (SmallMolecule(x) & CanSqueezeThroughPossies(x)))", "score": 0}
{"id": "eqasc_validation_233", "prediction": "all x.(RNA(x) -> (SmallMolecule(x) & CanSqueezeThroughPoors(x)))", "score": 0}
{"id": "eqasc_validation_233", "prediction": "all x.(Rain(x) -> (SmallMolecule(x) & SqueezesThroughPoors(x) & InNuclearMembrane(x)))", "score": 0}
{"id": "eqasc_validation_233", "prediction": "all x.(RNA(x) -> (SmallMolecule(x) & SqueezesThroughPpores(x) & InNuclearMembrane(x)))", "score": 0}
{"id": "eqasc_validation_233", "prediction": "all x.(RNA(x) -> (SmallMolecule(x) & WithPopularPenetrationsInNuclearMembrane(x)))", "score": 0}
{"id": "eqasc_validation_233", "prediction": "all x.(Radical(x) -> (SmallMolecule(x) & CanSqueezeThroughPpores(x) & InNuclearMembrane(x)))", "score": 0}
{"id": "eqasc_validation_233", "prediction": "all x.(RNA(x) -> (SmallMolecule(x) & CanSqueezeThroughPpores(x)))", "score": 0}
{"id": "eqasc_validation_233", "prediction": "all x.(RNA(x) -> (SmallMolecule(x) & SqueezesThroughPossies(x) & WithinNuclearMembrane(x)))", "score": 0}
{"id": "eqasc_validation_233", "prediction": "all x.(RNA(x) -> (SmallMolecule(x) & CanSqueezePrims(x) & InNuclearMembrane(x)))", "score": 0}
{"id": "eqasc_validation_233", "prediction": "all x.(RNA(x) -> (SmallMolecule(x) & CanSqueezeThoughPossibles(x) & NuclearMembrane(x)))", "score": 0}
{"id": "eqasc_validation_233", "prediction": "all x.(RNA(x) -> (SmallMolecule(x) & ContainsPoetry(x) & BreathesInNuclearMembrane(x)))", "score": 0}
{"id": "eqasc_validation_233", "prediction": "all x.(RNA(x) -> (SmallMolecule(x) & CanPressThroughPoses(x) & inNuclearMembrane(x)))", "score": 0}
{"id": "eqasc_validation_233", "prediction": "all x.(RNA(x) -> (SmallMolecule(x) & SqueezesThroughPorous(x)))", "score": 0}
{"id": "eqasc_validation_234", "prediction": "all x.((DNA(x) | RNA(x)) -> Polymer(x))", "score": 0}
{"id": "eqasc_validation_234", "prediction": "(SharesProteinOrSmallMolecular(Nova,Serious(na) & Polymer(na)) & ExamplesOf(na,z) & RelatedTo(na,w))", "score": -1}
{"id": "eqasc_validation_234", "prediction": "all x y.((Protein(x) & Molecular(y)) -> (DNA(x) | RNA(x)) & Polymers(y)))", "score": -1}
{"id": "eqasc_validation_234", "prediction": "(LikeProteins(DNA) & LikeRNA(RNA))", "score": 0}
{"id": "eqasc_validation_234", "prediction": "(all x.((DNA(x) | RNA(x))) -> PolymersOfSmallSmallChemicalRelatedMolecules(x))", "score": 0}
{"id": "eqasc_validation_234", "prediction": "all x y.((Protein(x) & DNA(y) & RNA(y)) -> (Polymer(x,y) | Polymer(x,y) & SmallChemicallyRelatedMolecule(x)))", "score": 0}
{"id": "eqasc_validation_234", "prediction": "(all x.(Molecule(x) -> Polymer(x)))", "score": 0}
{"id": "eqasc_validation_234", "prediction": "all x y.((Protein(x) & (DNA(x) | RNA(x))) -> Polymer(x,y))", "score": 0}
{"id": "eqasc_validation_234", "prediction": "all x y.((Protein(x) & Molecular(y)) -> (Polymers(x) & SmallChemicallyRelated(y)))", "score": 0}
{"id": "eqasc_validation_234", "prediction": "(all x y.((Protein(x) & MeasuringMolecule(y)) -> (DNA(x) | RNA(x))))", "score": 0}
{"id": "eqasc_validation_234", "prediction": "(VariousSmallChemicallyRelatedMolecular(DNA) & VariousSmallChemicallyRelatedMoleculars(RNA,DNA,Polymer))", "score": 0}
{"id": "eqasc_validation_234", "prediction": "all x.((DNA(x) | RNA(x)) -> (Polymer(x) | SmallChemicallyRelated(x)))", "score": 0}
{"id": "eqasc_validation_234", "prediction": "all x y.((Protein(x) & DNA(y) & RNA(y)) -> (PolymerOfSmallChemicallyRelatedMolecules(x,y)))", "score": 0}
{"id": "eqasc_validation_234", "prediction": "all x y.((Protein(x) & DNA(y) & RNA(y)) -> (Polymer(x,y) & SmallChemicalRelatedMolecule(z)))", "score": 0}
{"id": "eqasc_validation_235", "prediction": "all x.((Polymer(x) & SmallProteinMolecules(x) & SqueezesPoresInNuclearMembrane(x)) -> CanSqueezeThroughPores(x))", "score": 0}
{"id": "eqasc_validation_235", "prediction": "all x y.((Polymer(x) & SmallChemicallyRelatedMolecule(y) & Contains(x,y)) -> SplendsThroughPoresInNuclearMembrane(x,y))", "score": 0}
{"id": "eqasc_validation_235", "prediction": "all x y.((Polymer(x) & SmallChemicallyRelatedMolecule(x) & NuclearMembrane(y)) -> (SqueezesThroughPosesInNuclearMembrane(x,y) | SqueezesThroughPossilsInNuclearMembrane(x,y)))", "score": 0}
{"id": "eqasc_validation_235", "prediction": "all x y.((Polymer(x) & SmallChemisticallyRelatedMolecule(y) & SqueezesThroughPoses(x,y)) -> (SqueezeSqueezesFromPoses(x,y) | -SqueezeSqueezeSqueezeSqueezeSqueezeSqueezeSqueezeSqueezePoem(x,y)))", "score": 0}
{"id": "eqasc_validation_235", "prediction": "all x y z.((Polymer(x) & SmallChemicallyRelatedMolecules(y) & Molecule(z) & SmallChemicallyRelatedMolecule(y)) -> SqueathesThroughPoemsInNuclearMembrane(x,z))", "score": 0}
{"id": "eqasc_validation_235", "prediction": "all x.(SqueezeThroughPorousPorousInNuclearMembrane(x) -> (Simple(x) & SmallChemicallyRelatedMedium(x) & NumerousCarbonChemicalSeparationAbstracts(x)))", "score": 0}
{"id": "eqasc_validation_235", "prediction": "all x y z.((Polymer(x) & SmallChemisticallyRelatedMolecule(y) & NuclearMembrane(z) & SmallChemicallyRelatedMolecule(z)) -> SolventsChambersInMembrane(x,p))", "score": 0}
{"id": "eqasc_validation_235", "prediction": "all x y z.((Polymer(x) & SmallChemisticallyRelatedMolecule(y) & SmallMolecule(z)) -> (SmokersThroughPoseway(x,z) & InNuclearMembrane(x,m) & InNuclearMembrane(s)))", "score": 0}
{"id": "eqasc_validation_235", "prediction": "all x.((Polymer(x) & SmallChemicallyRelatedMolecular(x)) -> SqueezesThrough(x,porous))", "score": 0}
{"id": "eqasc_validation_235", "prediction": "all x y.((Pyramid(x) & SmallChemicallyRelatedMolecules(y) & SqueezesThroughPoems(x)) -> SqueezesThroughNoclearMembrane(x,y))", "score": 0}
{"id": "eqasc_validation_235", "prediction": "all x.(SqueezesThroughPores(x,nuclearMembrane) -> PolymersOfVariousSmallChemicalRelatedMolecules(x))", "score": 0}
{"id": "eqasc_validation_235", "prediction": "all x y.((Polymer(x) & SmallChemicallyRelatedMolecule(x) & ChemicallyRelatedMolecule(y)) -> (SqueezesThroughPpores(x,y) & InNuclearMembrane(x)))", "score": 0}
{"id": "eqasc_validation_235", "prediction": "all x.(SqueezeThroughPose(x) -> SmallChemistricallyRelevant(x))", "score": 0}
{"id": "eqasc_validation_235", "prediction": "all x y.((Polymer(x) & SmallChemicallyRelatedMolecule(y) & SmallChemicallyRelatedMolecule(x)) -> StrikesThroughPropores(x,y))", "score": 0}
{"id": "eqasc_validation_235", "prediction": "all x.((Polymer(x) & SmallChemicallyRelatedMolecules(x)) -> TheStrikeThroughPoresInNuclearMembrane(x))", "score": 0}
{"id": "eqasc_validation_235", "prediction": "all x.((Polymer(x) & SmallChemicallyRelatedMolecules(x) & SolventsPoseThroughNuclearMembrane(x)) -> CanSqueezeInPose(x))", "score": 0}
{"id": "eqasc_validation_236", "prediction": "all x.((Cell(x) & NuclearMembrane(x)) -> Eukaryotic(x))", "score": 0}
{"id": "eqasc_validation_236", "prediction": "all x.((CellWithNuclearMembrane(x) & HasNuclearMembrane(x)) -> Eukaryotic(x))", "score": 0}
{"id": "eqasc_validation_236", "prediction": "all x.((Cell(x) & NuclearMembrane(x)) -> Ectoid(x))", "score": 0}
{"id": "eqasc_validation_237", "prediction": "all x y.((RNA(x) & EukaryoticCell(y)) -> (SmallMolecule(x) & CanSqueezeThoughPoses(x,y)))", "score": 0}
{"id": "eqasc_validation_237", "prediction": "all x y.((RNALikes(x) & SmallMolecule(x) & SqueezesPores(x,y)) -> InEukaryoticCells(y))", "score": 0}
{"id": "eqasc_validation_237", "prediction": "all x.((Rain(x) & SmallMolecule(x) & StrainsThroughPropaques(x)) -> EukaryoticCell(x))", "score": 0}
{"id": "eqasc_validation_237", "prediction": "all x y z.((RNA(x) & SmallMolecule(y) & EukaryoticCell(z)) -> SmallMolecule(x))", "score": 0}
{"id": "eqasc_validation_237", "prediction": "all x.(RNA(x) -> (SmallMolecule(x) & SqueezesInEukaryoticCells(x)))", "score": 0}
{"id": "eqasc_validation_237", "prediction": "all x y z.((RNA(x) & SmallMolecule(y) & Cell(z) & CracksThroughPieces(y,z)) -> InEukaryoticCell(x))", "score": 0}
{"id": "eqasc_validation_237", "prediction": "all x y.((Radna(x) & SmallMolecule(x) & SqueezesPores(x,y)) -> InEukaryoticCell(x))", "score": 0}
{"id": "eqasc_validation_237", "prediction": "all x.(Rain(x) -> (SmallMolecule(x) & SqueezesThroughPpores(x,eukaryoticCells) & InEukaryoticCells(x)))", "score": 0}
{"id": "eqasc_validation_237", "prediction": "all x.(RNA.(SmallMolecule(x) & CanSqueezeThroughPpores(x) & InEukaryoticCells(x)) -> CanSqueezeThroughPropheres(x))", "score": -1}
{"id": "eqasc_validation_237", "prediction": "all x y z.((RNAMolecule(x) & SmallMolecule(x) & EukaryoticCell(y) & Pores(z)) -> CanSqueezeThroughPoems(x,y,z))", "score": 0}
{"id": "eqasc_validation_237", "prediction": "all x.(RNA(x) -> (SmallMolecule(x) & CanSqueezePoxesInEukaryoticCells(x)))", "score": 0}
{"id": "eqasc_validation_237", "prediction": "all x.(RNA(x) -> (SmallMolecule(x) & ContainsEnoughBerry(x) & GranulatesPpores(x) & StemsInEukaryoticCells(x)))", "score": 0}
{"id": "eqasc_validation_237", "prediction": "all x.(Radn(x) -> (SmallMolecule(x) & CanSqueezePierces(x) & InEukaryoticCells(x)))", "score": 0}
{"id": "eqasc_validation_237", "prediction": "all x.(RadNahor(x) -> (SmallMolecule(x) & SqueezesIntoPpores(x) & ExoskeletonCells(x) & EukaryoticCells(x)))", "score": 0}
{"id": "eqasc_validation_237", "prediction": "all x y.((RNA(x) & SmallMolecule(x) & EukaryoticCell(y)) -> SqueezeThoughPenetravesInEukaryoticCell(x,y))", "score": 0}
{"id": "eqasc_validation_237", "prediction": "all x.(RNA(x) -> (SmallMolecule(x) & SqueezesThroughPpores(x) & EukaryoticCells(x)))", "score": 0}
{"id": "eqasc_validation_238", "prediction": "(RibonucleicAcid(RNA) & LikeDNA(RNA) & NucleicAcid(RNA))", "score": 0}
{"id": "eqasc_validation_238", "prediction": "all x.(RNA(x) -> (RinucleicAcid(x) | DNA(x)))", "score": 0}
{"id": "eqasc_validation_238", "prediction": "all x.(RNA(x) -> (RribonucleicAcid(x) & LikeDNA(x) & NucleicAcid(x)))", "score": 0}
{"id": "eqasc_validation_238", "prediction": "all x.(RNA(x) -> (RribonucleicAcid(x) | DNA(x)))", "score": 0}
{"id": "eqasc_validation_238", "prediction": "all x y.((RNA(x) & DNA(y)) -> (RribonucleicAcid(x) & NucleicAcid(x)))", "score": 0}
{"id": "eqasc_validation_238", "prediction": "all x.(RNA(x) -> (RibonucleicAcid(x) & NucleicAcid(x)))", "score": 0}
{"id": "eqasc_validation_238", "prediction": "all x.((RNA(x) & RibinucleicAcid(x)) -> NucleicAcid(x))", "score": 0}
{"id": "eqasc_validation_238", "prediction": "(RibonucleicAcid(RNA) & NucleicAcid(RNA))", "score": 0}
{"id": "eqasc_validation_238", "prediction": "all x.(RibonucleicAcid(x) -> (DNA(x) & NucleicAcid(x)))", "score": 0}
{"id": "eqasc_validation_238", "prediction": "all x.(RNA(x) -> (RbonucleicAcid(x) | DNA(x)))", "score": 0}
{"id": "eqasc_validation_238", "prediction": "all x.(RibonucleicAcid(x) -> SimilarToDNA(x))", "score": 0}
{"id": "eqasc_validation_238", "prediction": "(all x.(RNA(x) -> RibinucleicAcid(x)) & (DNA(x) -> NucleicAcid(x)))", "score": 0}
{"id": "eqasc_validation_238", "prediction": "all x.(RNA(x) -> (RribonucleicAdvance(x) | DNA(x)))", "score": 0}
{"id": "eqasc_validation_238", "prediction": "(all x.(RNA(x) -> RibonucleicAcid(x)) & all y.(DNA(y) -> NucleicAcid(y)))", "score": 0}
{"id": "eqasc_validation_238", "prediction": "all x.(RibonucleicAcid(x) -> (RibonucleicAcid(x) & NucleicAcid(x)))", "score": 0}
{"id": "eqasc_validation_238", "prediction": "all x.(RibonucleicAcid(x) -> (RNA,DNA) & NuclearAcid(x)))", "score": -1}
{"id": "eqasc_validation_239", "prediction": "all x.(RibonucleicAcid(x) -> (SmallMolecule(x) & StrainsByPoles(x) & NuclearMembrane(x)))", "score": 0}
{"id": "eqasc_validation_239", "prediction": "all x.(PorousPeromone(x) -> (SmallMolecule(x) & CanSqueezeThroughNaturalMembrane(x)))", "score": 0}
{"id": "eqasc_validation_239", "prediction": "all x.(RibonucleicAcid(x) -> (SmallMolecule(x) & SqueezesThroughPores(x,NuclearMembrane)))", "score": 0}
{"id": "eqasc_validation_239", "prediction": "all x y.((RibonucleicAcid(x) & SmallMolecule(x) & NuclearMembrane(y) & CanSqueezeThrough(x,y)) -> CanSqueeze(x,y))", "score": 0}
{"id": "eqasc_validation_239", "prediction": "all x.(RibonucleicAcid(x) -> (SmallMolecule(x) & ExtractsThroughPoors(x) & InNuclearMembrane(x)))", "score": 0}
{"id": "eqasc_validation_239", "prediction": "all x.(RibonucleicAcid(x) -> (SmallMolecule(x) & StrainsThroughPpores(x) & NuclearMembrane(x)))", "score": 0}
{"id": "eqasc_validation_239", "prediction": "all x.(RibonucleicAcid(x) -> (SmallMolecule(x) & SqueezesThroughPierces(x)))", "score": 0}
{"id": "eqasc_validation_239", "prediction": "all x.(RibonucleicAcid(x) -> (SmallMolecule(x) & CanSqueezeThroughPporesInNuclearMembrane(x)))", "score": 0}
{"id": "eqasc_validation_239", "prediction": "all x.(RibonucleicAcid(x) -> (SmallMolecule(x) & SqueezeThroughPorousInNuclearMembrane(x)))", "score": 0}
{"id": "eqasc_validation_239", "prediction": "all x.(RibonucleicAcid(x) -> (SmallMolecule(x) & SqueezesThroughPoors(x) & InNuclearMembrane(x)))", "score": 0}
{"id": "eqasc_validation_239", "prediction": "all x.(RibonucleicAcid(x) -> (SmallMolecule(x) & SqueezesProperties(x) & InNuclearMembrane(x)))", "score": 0}
{"id": "eqasc_validation_239", "prediction": "all x.(RibonucleicAcid(x) -> (SmallMolecule(x) & CanSqueezeMembranePoems(x)))", "score": 0}
{"id": "eqasc_validation_239", "prediction": "all x.(RibonucleicAcid(x) -> (SmallMolecular(x) & CanSqueezeThroughPorousMembrane(x)))", "score": 0}
{"id": "eqasc_validation_239", "prediction": "all x.(RibonucleicAcid(x) -> (SmallMolecule(x) & SqueezesThroughPoses(x,NuclearMembrane)))", "score": 0}
{"id": "eqasc_validation_239", "prediction": "all x.(RibonucleicAcid(x) -> (SolidMolecule(x) & CanSqueezePoses(x,y,z) & NuclearMembrane(x)))", "score": 0}
{"id": "eqasc_validation_239", "prediction": "all x.(RinucleicAcid(x) -> (SmallMolecule(x) & CanSqueezeThroughPropores(x) & InNuclearMembrane(x)))", "score": 0}
{"id": "eqasc_validation_240", "prediction": "all x.(NuclearMembrane(x) -> KeepsDNAInsideNucleus(x))", "score": 0}
{"id": "eqasc_validation_240", "prediction": "all x.(NatalMembrane(x) -> KeepsDNAInsideNucleus(x))", "score": 0}
{"id": "eqasc_validation_240", "prediction": "all x.(NuclearMembrane(x) -> KeepsDNAInNucleus(x))", "score": 0}
{"id": "eqasc_validation_240", "prediction": "all x y.((NuclearMembrane(x) & Nucleus(y)) -> KeepsDNAInside(x,y))", "score": 0}
{"id": "eqasc_validation_240", "prediction": "all x y z.((NuclearMembrane(x) & DNA(y) & Nucleus(z)) -> KeepsInside(x,y,z))", "score": 0}
{"id": "eqasc_validation_240", "prediction": "all x y z.((NucleusMembrane(x) & DNAInNucleus(y) & NuclearMembrane(z)) -> KeepsInside(x,z))", "score": 0}
{"id": "eqasc_validation_240", "prediction": "(Membrane(nucleus) & Keeps(nucleus,DNA))", "score": 0}
{"id": "eqasc_validation_240", "prediction": "all x.(NuclearMembrane(x) -> (KeepsDNAInsideNucleus(x) & InsideNucleus(x)))", "score": 0}
{"id": "eqasc_validation_241", "prediction": "all x y.((RNA(x) & SmallMolecule(x) & RNA(y)) -> (SqueezesThroughPropores(x,y) & HoldsDNA(y)))", "score": 0}
{"id": "eqasc_validation_241", "prediction": "all x.(RNA(x) -> (SmallMolecule(x) & CanSqueezeThroughPpores(x) & holdsDNA(x)))", "score": 0}
{"id": "eqasc_validation_241", "prediction": "all x.(RNA(x) -> (SmallMolecule(x) & SqueezesThroughPoors(x) & NucleusHoldsDNA(x)))", "score": 0}
{"id": "eqasc_validation_241", "prediction": "all x.(RNA(x) -> (SmallMolecule(x) & SqueezePoses(x) & NucleusHoldsDNA(x)))", "score": 0}
{"id": "eqasc_validation_241", "prediction": "all x.(RNA(x) -> (SmallMolecule(x) & SqueezesThroughParticles(x) & HoldsDNA(x)))", "score": 0}
{"id": "eqasc_validation_241", "prediction": "all x y.((RNAMolecule(x) & Nucleus(y)) -> (SqueezesThroughPpores(x,y) & HoldsDNA(x)))", "score": 0}
{"id": "eqasc_validation_241", "prediction": "all x y.((Radius(x) & SmallMolecule(x) & CanSqueezeThroughPpores(x,y) & TheNucleusKeepingDNA(x)) -> SmallMolecule(x))", "score": 0}
{"id": "eqasc_validation_241", "prediction": "all x.(RNA(x) -> (SmallMolecule(x) & CanSqueezeThroughPeptides(x) & HoldsDNA(x)))", "score": 0}
{"id": "eqasc_validation_241", "prediction": "all x y.((RNA(x) & SmallMolecule(x) & Pouch(y)) -> CanSqueezeThroughProporeSeamsOfNucleus(x,y))", "score": 0}
{"id": "eqasc_validation_241", "prediction": "all x.(RNA(x) -> (SmallMolecule(x) & StrainsThroughPoorsInNucleus(x) & HoldsDNA(x)))", "score": 0}
{"id": "eqasc_validation_241", "prediction": "all x.(RNA(x) -> (SmallMolecule(x) & CracksThroughPossures(x) & NocleusHoldsDNA(x)))", "score": 0}
{"id": "eqasc_validation_241", "prediction": "all x.(RNA(x) -> (SmallMolecule(x) & CanSqueezeThroughPpores(x,y) & ContainsDigging(y)))", "score": 0}
{"id": "eqasc_validation_241", "prediction": "all x.(Rain(x) -> (SmallMolecule(x) & CanSqueezePoses(x) & HostsDNA(x)))", "score": 0}
{"id": "eqasc_validation_241", "prediction": "all x y.((RNA(x) & SmallMolecule(x) & Nucleus(y) & SqueezesThroughPoors(x)) -> HoldsDNA(x,y))", "score": 0}
{"id": "eqasc_validation_241", "prediction": "all x.(RNA(x) -> (SmallMolecule(x) & PressesThroughPoorrhea(x) & ContainsNucleus(x) & HoldsDNA(x)))", "score": 0}
{"id": "eqasc_validation_242", "prediction": "all x.(NatalMembrane(x) -> (Thickened(x) & Rounded(x) & EtwasIrregular(x)))", "score": 0}
{"id": "eqasc_validation_242", "prediction": "all x.(NuclearMembrane(x) -> (Thickened(x) & Rounded(x) & -Irregular(x)))", "score": 0}
{"id": "eqasc_validation_242", "prediction": "all x.(NuclearMembrane(x) -> (Thickened(x) & Rounded(x) & Irregular(x)))", "score": 0}
{"id": "eqasc_validation_242", "prediction": "all x.(NuclearMembrane(x) -> (Thickened(x) & Rounded(x) & VeryIrregular(x)))", "score": 0}
{"id": "eqasc_validation_242", "prediction": "all x.(NuclearMembrane(x) -> (Thickened(x) & WellRounded(x) & UnusuallyRound(x)))", "score": 0}
{"id": "eqasc_validation_242", "prediction": "all x.(NuclearMembrane(x) -> (Thickened(x) & Ripened(x) & RemarkablyIrregular(x)))", "score": 0}
{"id": "eqasc_validation_242", "prediction": "all x.(NuclearMembrane(x) -> (Thickened(x) & Rounded(x) & UnusuallyIrregular(x)))", "score": 0}
{"id": "eqasc_validation_242", "prediction": "all x.(NuclearMembrane(x) -> (Thicken(x) & Rounded(x) & SlightlyIrregular(x)))", "score": 0}
{"id": "eqasc_validation_242", "prediction": "all x.(NuclearMembrane(x) -> (Thickened(x) & Rounded(x) & Unregulatory(x)))", "score": 0}
{"id": "eqasc_validation_242", "prediction": "all x.(NuclearMembrane(x) -> (Thickened(x) & Rounded(x) & -Regular(x)))", "score": 0}
{"id": "eqasc_validation_242", "prediction": "all x.(NuclearMembrane(x) -> (Thickened(x) & Rounded(x) & MildlyIrregular(x)))", "score": 0}
{"id": "eqasc_validation_242", "prediction": "all x.(NuclearMembrane(x) -> (Thickened(x) & Round(x) & UnusuallyIrregular(x)))", "score": 0}
{"id": "eqasc_validation_242", "prediction": "all x.(NuclearMembrane(x) -> (Thickened(x) & Rounded(x) & InitiallyIrregular(x)))", "score": 0}
{"id": "eqasc_validation_242", "prediction": "all x.(NuclearMembrane(x) -> (Thickened(x) & Rugged(x) & EtwasIrregular(x)))", "score": 0}
{"id": "eqasc_validation_242", "prediction": "all x.(NuclearMembrane(x) -> (Thickened(x) & Round(x) & LightlyIrregular(x)))", "score": 0}
{"id": "eqasc_validation_243", "prediction": "all x.(RNA(x) -> (SmallMolecule(x) & SqueezesThroughThickenedRoundedAndSlightlyUniformPepties(x)))", "score": 0}
{"id": "eqasc_validation_243", "prediction": "all x y.((RNA(x) & SmallMolecule(x)) -> (SqueezesThroughThickenedRoundedAndUnderlyingPoors(x) & ThroughThickenedPoors(y) & ThroughRoundedPoors(y)))", "score": 0}
{"id": "eqasc_validation_243", "prediction": "all x.(RNA(x) -> (SmallMolecule(x) & CanSqueezeThroughThickenedRoundedAndRangelyIrregularPorouses(x)))", "score": 0}
{"id": "eqasc_validation_243", "prediction": "all x.(RNA(x) -> (SmallMolecule(x) & SqueezesThroughThickenedRoundAndRefractoryPorous(x)))", "score": 0}
{"id": "eqasc_validation_243", "prediction": "all x.(RNA(x) -> (SmallMolecule(x) & SqueezeThroughThickenedRoundedAndIrregularPpores(x) & PoresThroughThickenedAndIrregularPpores(x)))", "score": 0}
{"id": "eqasc_validation_243", "prediction": "all x.(RNA(x) -> (SmallMolecule(x) & SqueezesThroughThickenedRoundedAndIrregularPpores(x)))", "score": 0}
{"id": "eqasc_validation_243", "prediction": "all x.(RNA_SmallMolecule(x) -> (SqueezesThroughThickenRoundedUrroundedVeryIrregularPores(x) & InRoundNophers(x)))", "score": 0}
{"id": "eqasc_validation_243", "prediction": "all x.(RNA(x) -> (SmallMolecule(x) & CanSqueezeThroughThickenedRoundedAndUnderlyingPoorProps(x)))", "score": 0}
{"id": "eqasc_validation_243", "prediction": "all x.(RNA(x) -> (SmallMolecule(x) & CanSqueezeThroughThickenedRoundedIrregularPpores(x)))", "score": 0}
{"id": "eqasc_validation_243", "prediction": "all x.(RNA(x) -> (SmallMolecule(x) & CanSqueezeThroughThickenedRoundedAndUnderlyingPoors(x)))", "score": 0}
{"id": "eqasc_validation_243", "prediction": "all x.(RNA(x) -> (SmallMolecule(x) & CanSqueezeThroughThickenedRoundedAndIrregularPorouses(x)))", "score": 0}
{"id": "eqasc_validation_243", "prediction": "all x.(RNA(x) -> (SmallMolecule(x) & SqueezesThroughThickenedRoundedAndSlightlyIrregularPeptions(x)).", "score": -1}
{"id": "eqasc_validation_243", "prediction": "all x.(RNA(x) -> (SmallMolecule(x) & SqueezesThroughThickenedRoundedAndIrregularParticles(x)))", "score": 0}
{"id": "eqasc_validation_243", "prediction": "all x.(Rain(x) -> (SmallMolecule(x) & SqueezesThroughThickenedRoundedAndIrregularPoths(x)))", "score": 0}
{"id": "eqasc_validation_243", "prediction": "all x.(RNA(x) & SmallMolecule(x) & CanSqueezeThroughThickenedRoundedAndUnderlyingPoisons(x))", "score": 0}
{"id": "eqasc_validation_243", "prediction": "all x.(RNA(x) -> (SmallMolecule(x) & SqueezeThroughThickenedRoundedAndIrregularPpores(x)))", "score": 0}
{"id": "eqasc_validation_244", "prediction": "all x y.((RNA(x) & EukaryoticCell(y)) -> (SmallMolecule(x) & SpunsThroughPose(x,y) & SqueezesThroughPose(x,y)))", "score": 0}
{"id": "eqasc_validation_244", "prediction": "all x.(RNA(x) -> (SmallMolecule(x) & SqueezesThroughPoors(x) & EukaryoticCell(x)))", "score": 0}
{"id": "eqasc_validation_244", "prediction": "all x y z.((RNA(x) & SmallMolecule(y) & EukaryoticCell(z)) -> CanSqueezeThroughPpores(x,y,z))", "score": 0}
{"id": "eqasc_validation_244", "prediction": "all x y.((RNA(x) & EukaryoticCell(y)) -> (SmallMolecule(x) & CanSqueezeThroughPosies(x,y) & Cell(y)))", "score": 0}
{"id": "eqasc_validation_244", "prediction": "all x.(RaD(x) -> (SmallMolecule(x) & CanSqueezeThroughPpores(x) & EukaryoticCell(x)))", "score": 0}
{"id": "eqasc_validation_244", "prediction": "all x y z.((RNA(x) & Micromolecule(y) & EukaryoticCell(z)) -> SqueezesThroughPpores(x,y,z))", "score": 0}
{"id": "eqasc_validation_244", "prediction": "all x.(RadNah(x) -> (SmallMolecule(x) & CanSqueezeThroughPpores(x) & EukaryoticCell(x)))", "score": 0}
{"id": "eqasc_validation_244", "prediction": "all x.(RNA(x) -> (SmallMolecule(x) & CanSqueezeThroughPores(x) & InEukaryoticCell(x)))", "score": 0}
{"id": "eqasc_validation_244", "prediction": "all x y.((RNA(x) & Cell(y)) -> (SmoothMolecule(x) & StretchsExtraMolecules(x,y) & CouldSqueezeThroughPoors(x,y)))", "score": 0}
{"id": "eqasc_validation_244", "prediction": "all x.(RNA(x) -> (SmallMolecule(x) & SolventsPotions(x) & exists y.(EukaryoticCell(y) & MaySqueezeThrough(x,y)))))", "score": -1}
{"id": "eqasc_validation_244", "prediction": "all x.(RNA(x) -> (SmallMolecule(x) & SizeBetweenPores(x) & ExcimerOnCell(x) & SqueezeThroughPores(x)))", "score": 0}
{"id": "eqasc_validation_244", "prediction": "all x.(RNA(x) -> (SmallMolecule(x) & CanSqueezeThroughPpores(x) & CanEukaryoticCell(x)))", "score": 0}
{"id": "eqasc_validation_244", "prediction": "all x.(RNA(x) -> (SmallMolecule(x) & SwipsThroughPporesOfEukaryoticCell(x)))", "score": 0}
{"id": "eqasc_validation_244", "prediction": "all x.(RNA(x) -> (SmallMolecule(x) & CanSqueezeThroughPpores(x) & EukaryoticCell(x)))", "score": 0}
{"id": "eqasc_validation_244", "prediction": "all x y.((RNA(x) & EukaryoticCell(y)) -> (SmallMolecule(x) & SqueezesThroughPpores(x)))", "score": 0}
{"id": "eqasc_validation_245", "prediction": "all x y z.((PoisonousDart(x) & SeaAnemone(y) & SeaAnemone(z)) -> UsedForDefense(x,y,z))", "score": 0}
{"id": "eqasc_validation_245", "prediction": "all x.(PoisonousDart(x) -> (UsedForDefenseBySeaAnemones(x) & UsedForDefenseBySeaAnemones(x)))", "score": 0}
{"id": "eqasc_validation_245", "prediction": "all x y z.((PoisonousDart(x) & SeaAnemone(y) & SeaAnemone(z)) -> UsedForDefenseBy(x,y,z))", "score": 0}
{"id": "eqasc_validation_245", "prediction": "all x.(PoisonousDart(x) -> UsedForDefenseBySeaAnemones(x))", "score": 0}
{"id": "eqasc_validation_245", "prediction": "all x y z.((PoisonousDart(x) & SeaAnemone(y) & SeaAnemone(z)) -> UsesForDefenseBy(x,y,z))", "score": 0}
{"id": "eqasc_validation_245", "prediction": "all x y.((PoisonousDart(x) & SeaAnemone(y)) -> UsedForDefenseBy(x,y))", "score": 0}
{"id": "eqasc_validation_245", "prediction": "all x y z.((PoisonousDart(x) & SeaAnemone(y) & SeaAnemone(z) & UsedForDefence(x,y)) -> (Opportunty(x) & UsesForDefense(x,z)))", "score": 0}
{"id": "eqasc_validation_245", "prediction": "all x y.((PoisonousDart(x) & SeaAnemone(y)) -> UsedForDefense(x,y))", "score": 0}
{"id": "eqasc_validation_245", "prediction": "all x y z.((PoisonousDart(x) & SeaAnemone(y) & SeaAngemone(z)) -> UsedForDefense(x,y,z))", "score": 0}
{"id": "eqasc_validation_245", "prediction": "all x.((PoisonousDart(x) & UsedForDefenseBySeaAnemones(x)) -> -UsedForDefenseByOrigones(x))", "score": 0}
{"id": "eqasc_validation_245", "prediction": "all x y z.((PoisonousDart(x) & SeaAnemone(z) & UsedForDefenseBetween(x,y,z)) -> UsesForDefense(x,y))", "score": 0}
{"id": "eqasc_validation_246", "prediction": "all x y.((Coral(x) & Coral(y)) -> HasEvolvedDefenses(x,y))", "score": 0}
{"id": "eqasc_validation_246", "prediction": "all x.(Coral(x) -> VarietyOfDefenses(x))", "score": 0}
{"id": "eqasc_validation_246", "prediction": "all x.(Coral(x) -> HasEvolvedDefensives(x))", "score": 0}
{"id": "eqasc_validation_246", "prediction": "all x y.((Coral(x) & Coral(y)) -> HasEvolutionOfDefenses(x,y))", "score": 0}
{"id": "eqasc_validation_246", "prediction": "all x.(Coral(x) -> EvolvedDefenses(x))", "score": 0}
{"id": "eqasc_validation_246", "prediction": "all x.(Corals(x) -> ViaDefenses(x))", "score": 0}
{"id": "eqasc_validation_246", "prediction": "all x.(Coral(x) -> DevelopedDefenses(x))", "score": 0}
{"id": "eqasc_validation_246", "prediction": "all x.(Coral(x) -> VariousDefenses(x))", "score": 0}
{"id": "eqasc_validation_246", "prediction": "all x y z.((Coral(x) & Defense(y) & Defense(z)) -> EvolutionaryToProtect(x,y,z))", "score": 0}
{"id": "eqasc_validation_246", "prediction": "all x.(Coral(x) -> DevelopedDefensesToProtect(x,y,z))", "score": 0}
{"id": "eqasc_validation_246", "prediction": "all x.(Coral(x) -> HaveExperimentedDefenses(x))", "score": 0}
{"id": "eqasc_validation_246", "prediction": "all x y.((Coral(x) & Protection(y)) -> HasEvolvedDefenses(x,y))", "score": 0}
{"id": "eqasc_validation_246", "prediction": "all x.(Coral(x) -> (EvolvedDefenses(x) & ProtectsCoral(x)))", "score": 0}
{"id": "eqasc_validation_246", "prediction": "all x y.((Coral(x) & ProtectiveDefence(x,y)) -> Developed(x,y))", "score": 0}
{"id": "eqasc_validation_247", "prediction": "all x.((Dart(x) & Poisonus(x)) -> UsedBySeaAnemones(x))", "score": 0}
{"id": "eqasc_validation_247", "prediction": "all x y.((PoisonusDart(x) & SeaAnemone(y)) -> UsedForProtection(x,y))", "score": 0}
{"id": "eqasc_validation_247", "prediction": "all x y.((Dart(x) & SeaAnemone(y) & Using(x,y)) -> Protects(y))", "score": 0}
{"id": "eqasc_validation_247", "prediction": "all x y z.((PoisonusDart(x) & SeaAnemone(y,z)) -> (UsedBy(x,y) | UsedBy(x,z))))", "score": -1}
{"id": "eqasc_validation_247", "prediction": "all x.(Dart(x) -> UsedBySeaAnemonesForProtection(x))", "score": 0}
{"id": "eqasc_validation_247", "prediction": "all x.(PoisonusDart(x) -> UsedBySeaAnemonesForProtection(x))", "score": 0}
{"id": "eqasc_validation_247", "prediction": "all x y z.((PoisonusDart(x) & SeaAnemone(y) & SeaAnemone(z)) -> UsedForProtection(x,y,z))", "score": 0}
{"id": "eqasc_validation_247", "prediction": "all x y.((Dart(x) & SeaAnemone(y)) -> UsedForProtection(x,y))", "score": 0}
{"id": "eqasc_validation_247", "prediction": "all x.((Dart(x) & Poisonus(x)) -> UsedBySeaAnemonesForProtection(x))", "score": 0}
{"id": "eqasc_validation_247", "prediction": "all x.(Dart(x) -> UsedBetweenSeaAnemones(x))", "score": 0}
{"id": "eqasc_validation_247", "prediction": "all x y.((PoisonusDart(x) & SeaAnemone(y)) -> UsedBy(x,y))", "score": 0}
{"id": "eqasc_validation_247", "prediction": "all x.(PoisonusDart(x) -> UsedBySeaAnemone(x))", "score": 0}
{"id": "eqasc_validation_248", "prediction": "all x y.((PoisonDartFrog(x) & Native(y)) -> ToxinSource(x,y))", "score": 0}
{"id": "eqasc_validation_248", "prediction": "all x y z.((PoisonDartFrog(x) & Native(y) & Toxin(z) & UsesOnPoisonDarts(x,z)) -> SourceOfIntake(x,y,z))", "score": 0}
{"id": "eqasc_validation_248", "prediction": "all x y.((PoisonDartFrog(x) & Native(y)) -> SourceOfToxin(x,y))", "score": 0}
{"id": "eqasc_validation_248", "prediction": "all x y.((PoisonDartFrog(x) & Native(y) & UsesToxin(x,y)) -> SourceOfToxins(x,y))", "score": 0}
{"id": "eqasc_validation_248", "prediction": "all x y z.(PoisonDartFrog(x) -> (SourceOfToxin(y) & Native(z) & UsesOnPoisonDarts(x,z)))", "score": 0}
{"id": "eqasc_validation_248", "prediction": "all x y.((PoisonDartFlour(x) & Native(y)) -> SourceOfToxin(x,y))", "score": 0}
{"id": "eqasc_validation_248", "prediction": "all x y.((PopularDertFrog(x) & Native(y)) -> ProvidesToxin(x,y))", "score": 0}
{"id": "eqasc_validation_248", "prediction": "all x y.((LittleNative(x) & PoisonDartFrog(x)) -> HasToxinNativeHasOnDart(y))", "score": 0}
{"id": "eqasc_validation_248", "prediction": "all x y.((PoisonDartFrog(x) & NativeFire(y)) -> ToxinSource(x,y))", "score": 0}
{"id": "eqasc_validation_248", "prediction": "all x.(PoisonDartFrog(x) -> SourceOfToxin(x))", "score": 0}
{"id": "eqasc_validation_248", "prediction": "all x.((Frog(x) & PoisonDartFrog(x)) -> SourceOfToxin(x))", "score": 0}
{"id": "eqasc_validation_248", "prediction": "all x.((PoisonDartFrog(x) & NativeToxin(y)) -> SourceOfToxin(x,y))", "score": 0}
{"id": "eqasc_validation_249", "prediction": "all x y.((Toxin(x) & SeaAnemone(y)) -> UsedForDefense(x,y))", "score": 0}
{"id": "eqasc_validation_249", "prediction": "all x y.((Toxin(x) & SeaAnemone(y) & UsedForDefense(x,y)) -> SeaAnemone(y))", "score": 0}
{"id": "eqasc_validation_249", "prediction": "all x y z.((Toxin(x) & SeaAnemone(y) & SeaAnemone(z)) -> UsedForDefenseBy(x,y,z))", "score": 0}
{"id": "eqasc_validation_249", "prediction": "all x y z.((Toxin(x) & SeaAnemone(y) & SeaAnemone(z)) -> UsedForDefenseFarby(x,y,z))", "score": 0}
{"id": "eqasc_validation_249", "prediction": "all x y z.((Toxin(x) & SeaAnemone(y) & Toxin(z)) -> UsedForDefenseByForDefense(x,y,z))", "score": 0}
{"id": "eqasc_validation_249", "prediction": "all x y.((Toxin(x) & SeaAnemone(y)) -> UsedForDefenseBy(x,y))", "score": 0}
{"id": "eqasc_validation_249", "prediction": "all x y z.((Toxin(x) & SeaAnemone(y) & SeaAnemone(z)) -> UsedForDefense(x,y,z))", "score": 0}
{"id": "eqasc_validation_249", "prediction": "all x y z.((Toxin(x) & SeaAnemone(y) & SeaEgg(z)) -> UsedForDefense(x,y))", "score": 0}
{"id": "eqasc_validation_249", "prediction": "all x.(Toxin(x) -> UsedForDefenseBySeaAnemones(x))", "score": 0}
{"id": "eqasc_validation_250", "prediction": "all x.(ReefInhabitant(x) -> Anemone(x))", "score": 0}
{"id": "eqasc_validation_250", "prediction": "exists x.(ReefInhabitant(x) & Anemone(x))", "score": 0}
{"id": "eqasc_validation_250", "prediction": "all x y.((ReefInhabitant(x) & Anemone(y)) -> (Inhabits(x,y) & Inhabits(x,y)))", "score": 0}
{"id": "eqasc_validation_250", "prediction": "all x.(Neighbor(x) -> Anemone(x))", "score": 0}
{"id": "eqasc_validation_250", "prediction": "(ReefInhabitant(r) & Anemone(r))", "score": 0}
{"id": "eqasc_validation_250", "prediction": "(One ReefInhabitant(reef) -> Anemone(reef))", "score": -1}
{"id": "eqasc_validation_250", "prediction": "all x.(RiffInhabitant(x) -> Anemone(x))", "score": 0}
{"id": "eqasc_validation_250", "prediction": "(IllustratedByReefInhabitant(IllustratedByReefInhabitant(IllustratedByAnemone(IllustratedByReefInhabitant(i))", "score": -1}
{"id": "eqasc_validation_251", "prediction": "all x y z.((SeaCreature(x) & Reef(y) & Reef(z)) -> LivesIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_251", "prediction": "all x.(Sea(x) -> LivesInReef(x))", "score": 0}
{"id": "eqasc_validation_251", "prediction": "all x y.((SeaCream(x) & Reef(y)) -> LivesIn(x,y))", "score": 0}
{"id": "eqasc_validation_251", "prediction": "all x y z.((SeaCreature(x) & Reef(y) & Reef(z)) -> LivesIn(x,y))", "score": 0}
{"id": "eqasc_validation_251", "prediction": "all x.(SeaCreature(x) -> LivesInReef(x))", "score": 0}
{"id": "eqasc_validation_251", "prediction": "all x.(SeaCreature(x) -> LivesInReefs(x))", "score": 0}
{"id": "eqasc_validation_251", "prediction": "all x y.((SeaCreature(x) & Reef(y)) -> LivesIn(x,y))", "score": 0}
{"id": "eqasc_validation_251", "prediction": "all x.(SeaCreature(x) -> LivesInRainforests(x))", "score": 0}
{"id": "eqasc_validation_252", "prediction": "all x.((VenomousCreature(x) & UsePoisonAsWaffen(x)) -> VenomousCreature(x))", "score": 0}
{"id": "eqasc_validation_252", "prediction": "all x.(VenomousCreature(x) -> (UsesPoisonAsWaffe(x) & InVenomousCreature(x)))", "score": 0}
{"id": "eqasc_validation_252", "prediction": "all x.(VenomousCreature(x) -> UsesPoisonAsWaffen(x))", "score": 0}
{"id": "eqasc_validation_252", "prediction": "all x.(VenomousCreature(x) -> (UsesPoisonAsWaffen(x)))", "score": 0}
{"id": "eqasc_validation_252", "prediction": "all x.((VenomousCreature(x) & Poison(y)) -> CanUseAsWaffen(x,y))", "score": 0}
{"id": "eqasc_validation_252", "prediction": "all x.((King(x) & Venomous(x)) -> UsePoisonOrWarrior(x))", "score": 0}
{"id": "eqasc_validation_252", "prediction": "all x.(VenomousCreature(x) -> CanUsePoisonAsWaffen(x))", "score": 0}
{"id": "eqasc_validation_252", "prediction": "all x y.((VenomousCreature(x) & Poison(y)) -> UsesAsWaffen(x,y))", "score": 0}
{"id": "eqasc_validation_252", "prediction": "all x.(VenomousCreature(x) -> UsesPoisonAsWaffe(x))", "score": 0}
{"id": "eqasc_validation_252", "prediction": "all x.(VenomousCreature(x) -> (UsesPoisonAsWaffen(x) & UsesPoisonAsWaffen(x)))", "score": 0}
{"id": "eqasc_validation_252", "prediction": "all x.(VenomousCreature(x) -> Use PoisonAsWaffe(x))", "score": -1}
{"id": "eqasc_validation_252", "prediction": "all x.(VenomousCreature(x) -> UsePoisonAsWaffen(x))", "score": 0}
{"id": "eqasc_validation_252", "prediction": "all x.(VolcanicCreature(x) -> (UsesPoisonAsWaffe(x) | UsesPoisonAsWaffe(x)))", "score": 0}
{"id": "eqasc_validation_253", "prediction": "all x.(SeaAnemone(x) -> Venomous(x))", "score": 0}
{"id": "eqasc_validation_253", "prediction": "all x y.((SeaAnemone(x) & SeaAnemone(y)) -> Vignenomous(x))", "score": 0}
{"id": "eqasc_validation_253", "prediction": "all x.(SeaAnemone(x) -> (Venomous(x) & Venomous(x)))", "score": 0}
{"id": "eqasc_validation_253", "prediction": "all x y.((SeaAnemone(x) & SeaAnemone(y)) -> (Venomous(x) & Venomous(y)))", "score": 0}
{"id": "eqasc_validation_253", "prediction": "all x.(SeaAnemone(x) -> Vetonomous(x))", "score": 0}
{"id": "eqasc_validation_253", "prediction": "all x.(SeaAnemone(x) -> (Venomous(x) & SeaAnemone(x)))", "score": 0}
{"id": "eqasc_validation_254", "prediction": "all x.(SeaEnemone(x) -> CloseRelativeOfCorals(x))", "score": 0}
{"id": "eqasc_validation_254", "prediction": "all x.(SeaAnemone(x) -> (CloseRelativeToCorals(x)))", "score": 0}
{"id": "eqasc_validation_254", "prediction": "all x.(SeaAnemone(x) -> (BelongsToCorallen(x) & ContainsCorallen(x)))", "score": 0}
{"id": "eqasc_validation_254", "prediction": "all x y z.((SeaAnemone(x) & Coral(y) & Coral(z)) -> CloseRelative(x,y,z))", "score": 0}
{"id": "eqasc_validation_254", "prediction": "all x.(SeaAnemone(x) -> CloseRelativeOfCoral(x))", "score": 0}
{"id": "eqasc_validation_254", "prediction": "all x y.((SeaAnemone(x) & Coral(y)) -> CloseRelative(x,y))", "score": 0}
{"id": "eqasc_validation_254", "prediction": "all x.(SeaAnemone(x) -> Coral(x))", "score": 0}
{"id": "eqasc_validation_254", "prediction": "all x y z.((SeaAngemone(x) & Coral(y) & Coral(z)) -> CloseRelative(x,y,z))", "score": 0}
{"id": "eqasc_validation_254", "prediction": "all x.(SeaAnemone(x) -> CloseRelativeOfCorals(x))", "score": 0}
{"id": "eqasc_validation_254", "prediction": "all x.(SeaAnemone(x) -> CloseRelative(x,Corals))", "score": 0}
{"id": "eqasc_validation_254", "prediction": "all x.(SeaAnemone(x) -> (CoralRelative(x,Coral)))", "score": 0}
{"id": "eqasc_validation_254", "prediction": "all x.(SeaAnemone(x) -> (CoralRelative(x) & Close(x)))", "score": 0}
{"id": "eqasc_validation_254", "prediction": "all x y z.((Anemone(x) & Coral(y) & Coral(z)) -> CloseRelative(x,y,z))", "score": 0}
{"id": "eqasc_validation_255", "prediction": "all x.(PoisonousDart(x) -> UsedForDefenseByCloseRelativesOfCoral(x))", "score": 0}
{"id": "eqasc_validation_255", "prediction": "all x y z.((PoisonousDart(x) & CloseRelativeSofCoral(y) & Coral(z) & UsesForDefense(x,y,z)) -> CloseRelativeSofCoral(x))", "score": 0}
{"id": "eqasc_validation_255", "prediction": "all x.(PoisonousDart(x) -> (UsedForDefense(x) & CloseRelativesOfCoral(x)))", "score": 0}
{"id": "eqasc_validation_255", "prediction": "all x.(PoisonousDart(x) -> CloseRelativesOfCoral(x))", "score": 0}
{"id": "eqasc_validation_255", "prediction": "all x.(PoisonousDart(x) -> UsedForDefense(x))", "score": 0}
{"id": "eqasc_validation_255", "prediction": "all x.(PoisonousDart(x) -> UsedForDefenseByCoralFamily(x))", "score": 0}
{"id": "eqasc_validation_255", "prediction": "all x y z.((PoisonousDart(x) & CoralBrune(y) & NearLirder(z)) -> UsedForDefense(x,y,z))", "score": 0}
{"id": "eqasc_validation_255", "prediction": "all x y z.((PoisonousDart(x) & CoralColumn(y) & CloseRelative(z)) -> UsedForDefenseBy(x,y,z))", "score": 0}
{"id": "eqasc_validation_255", "prediction": "all x y.((PoisonousDart(x) & CloseRelative(y) & CoralCoral(z)) -> Defense(x,y,z))", "score": 0}
{"id": "eqasc_validation_255", "prediction": "all x y.((PoisonousDart(x) & Coral(y)) -> UsedForDefenseByCloseRelatives(x,y))", "score": 0}
{"id": "eqasc_validation_255", "prediction": "all x y.((PoisonousDart(x) & CloseRelative(y) & Coral(y)) -> UsedForDefenseBy(x,y))", "score": 0}
{"id": "eqasc_validation_255", "prediction": "all x y.((PoisonousDart(x) & Coral(y)) -> UsedForDefense(x,y))", "score": 0}
{"id": "eqasc_validation_255", "prediction": "all x.(PoisonousDart(x) -> UsedForDefenseByCoralCoralRelatives(x))", "score": 0}
{"id": "eqasc_validation_255", "prediction": "all x.(PoisonousDart(x) -> (UsedForDefenseProtection(x) & CloseRelativesOfCoral(x)))", "score": 0}
{"id": "eqasc_validation_255", "prediction": "all x y z.((PoisonousDart(x) & CoralRelative(y) & CloseRelative(z,y)) -> (UsedForDefense(x,y) & CloseRelative(z,y)))", "score": 0}
{"id": "eqasc_validation_256", "prediction": "all x y z.((CelebredRelativeOfCoral(x) & Coral(y) & UsePoisonousDarts(z)) -> UsesForDefense(x,y,z))", "score": 0}
{"id": "eqasc_validation_256", "prediction": "all x y.((CoralCoral(x) & CloseRelative(y)) -> UsePoisonousDartsForDefense(y))", "score": 0}
{"id": "eqasc_validation_256", "prediction": "all x y.((CloseRelative(x) & Coral(y)) -> UsesPoisonousDartsForDefense(x,y))", "score": 0}
{"id": "eqasc_validation_256", "prediction": "all x y.((CloseLiar(x) & Coral(y)) -> UsesPoisonousDartsForDefense(x,y))", "score": 0}
{"id": "eqasc_validation_256", "prediction": "all x y.((CloseRelativeOfCoral(x) & CloseRelativeOfCoral(y)) -> UsesPoisonousDartsForDefense(x,y))", "score": 0}
{"id": "eqasc_validation_256", "prediction": "all x.(CloseRelativesOfCoral(x) -> UsesPoisonousDarts(x))", "score": 0}
{"id": "eqasc_validation_256", "prediction": "all x y z.((CloseRelative(x) & Coral(y) & Dart(z)) -> UsesPoisonousForDefense(x,z))", "score": 0}
{"id": "eqasc_validation_256", "prediction": "all x y.((LittleRelativesOfCoral(x,y)) -> UsesPoisonousDartsForDefense(x,y))", "score": 0}
{"id": "eqasc_validation_256", "prediction": "all x.(Coral(x) -> (UsesPoisonousDart(x) & UsesForDefense(x)))", "score": 0}
{"id": "eqasc_validation_256", "prediction": "all x y z.((FrontAlternate(x) & Coral(y) & CloseRelative(z) & UsesPoisonousDarts(x,y,z)) -> UsesForDefense(x,y,z))", "score": 0}
{"id": "eqasc_validation_256", "prediction": "all x.(ColumbusRelatives(x) & UsePoisonousDarts(x))", "score": 0}
{"id": "eqasc_validation_256", "prediction": "all x y z.((CloseRelative(x) & Coral(y) & Coral(z)) -> (UsesPoisonousDart(x,y,z) & UsesForDamage(x)))", "score": 0}
{"id": "eqasc_validation_256", "prediction": "all x y z.((CloseRelative(x,y) & Coral(z)) -> UsesPoisonousDartsForDefense(x,y,z))", "score": 0}
{"id": "eqasc_validation_256", "prediction": "all x y z.((Columbus(x) & CloseLird(y) & Coral(z) & UsePoisonousDartsForDefense(x,z)) -> UsePoisonousDartsForDefense(x,z))", "score": 0}
{"id": "eqasc_validation_256", "prediction": "all x.((CloseRelativeToCoral(x)) -> UsesPoisonousDartsForDefense(x))", "score": 0}
{"id": "eqasc_validation_256", "prediction": "all x y.((ClearRelative(x) & Coral(y)) -> UsesPoisonousDartsForDefense(x,y))", "score": 0}
{"id": "eqasc_validation_257", "prediction": "all x.(Portal(x) -> BestDefense(x))", "score": 0}
{"id": "eqasc_validation_257", "prediction": "all x.(ProtectionAtGateway(x) -> BestDefense(x))", "score": 0}
{"id": "eqasc_validation_257", "prediction": "all x.(BestDefense(x) -> ProtectionAtKeyway(x))", "score": 0}
{"id": "eqasc_validation_257", "prediction": "all x.(AtGateway(x) -> BestDefense(x))", "score": 0}
{"id": "eqasc_validation_257", "prediction": "all x.(ProtectAtGateway(x) -> BestDefense(x))", "score": 0}
{"id": "eqasc_validation_257", "prediction": "all x.((ProtectsAtGateway(x) & BestDefense(x)) -> BestDefense(x))", "score": 0}
{"id": "eqasc_validation_257", "prediction": "all x y.((Garage(x) & Gateway(y)) -> BestDefense(x))", "score": 0}
{"id": "eqasc_validation_257", "prediction": "all x.((ProtectionAtGateway(x)) -> BestDefense(x))", "score": 0}
{"id": "eqasc_validation_257", "prediction": "all x.((ProtectsAtGateway(x) & BestDefense(x)) -> ProtectionAtGateway(x))", "score": 0}
{"id": "eqasc_validation_257", "prediction": "all x.((Gateway(x) & ProtectionAt(x,i)) -> BestDefense(x))", "score": 0}
{"id": "eqasc_validation_257", "prediction": "all x.((ProtectAtGateway(x) & BestDefense(x)) -> BestDefense(x))", "score": 0}
{"id": "eqasc_validation_257", "prediction": "all x.(ProtectAtTarget(x) -> BestDefense(x))", "score": 0}
{"id": "eqasc_validation_257", "prediction": "all x y.((Pathway(x) & Gateway(y)) -> BestDefense(x,y))", "score": 0}
{"id": "eqasc_validation_257", "prediction": "all x.((Protect(x) & Gateway(x)) -> BestDefense(x))", "score": 0}
{"id": "eqasc_validation_257", "prediction": "all x.((Gateway(x) & ProtectionAt(x)) -> BestDefense(x))", "score": 0}
{"id": "eqasc_validation_258", "prediction": "all x y.((Dart(x) & Poisonous(x) & SeaAnemone(y)) -> UsedBetween(x,y))", "score": 0}
{"id": "eqasc_validation_258", "prediction": "all x.(PoisonousDart(x) -> UsedAsProtectionBySeaAnemones(x))", "score": 0}
{"id": "eqasc_validation_258", "prediction": "all x.(PoisonousDart(x) -> UsedAsProtection(x))", "score": 0}
{"id": "eqasc_validation_258", "prediction": "all x y.((Dodge(x) & Poisonous(x)) -> UsedAsProtectionBy(y,x))", "score": 0}
{"id": "eqasc_validation_258", "prediction": "all x.((Dart(x) & Poisonous(x)) -> UsedAsProtection(x,SeaAnemones))", "score": 0}
{"id": "eqasc_validation_258", "prediction": "all x.((Dart(x) & Poisonous(x)) -> UsedForProtectionBySeaAnemones(x))", "score": 0}
{"id": "eqasc_validation_258", "prediction": "all x.(PoisonousDart(x) -> UsedForProtectionBySeaAnemones(x))", "score": 0}
{"id": "eqasc_validation_258", "prediction": "all x y.((PoisonousDart(x) & SeaAnemone(y)) -> UsedAsProtection(x,y))", "score": 0}
{"id": "eqasc_validation_258", "prediction": "all x.((Dart(x) & Poisonous(x)) -> UsedBySeaAnemones(x))", "score": 0}
{"id": "eqasc_validation_258", "prediction": "all x.(PoisonousDart(x) -> ProtectionBySeaAnemones(x))", "score": 0}
{"id": "eqasc_validation_258", "prediction": "all x y z.((Dart(x) & Poisonous(x) & SeaAnemone(y) & SeaAnemone(z)) -> Protects(x,y))", "score": 0}
{"id": "eqasc_validation_259", "prediction": "all x.(Anthozoan(x) -> (FamiliarAnemone(x) & FamilyCoral(x)))", "score": 0}
{"id": "eqasc_validation_259", "prediction": "all x.(Anthozoan(x) -> (Anemone(x) | Coral(x)))", "score": 0}
{"id": "eqasc_validation_259", "prediction": "all x.(Anthozoan(x) -> (FamiliarAnemone(x) & FamiliarCoral(x)))", "score": 0}
{"id": "eqasc_validation_259", "prediction": "all x.(Anthozoan(x) -> (Familiar(x) & (Anemone(x) | Coral(x))))", "score": 0}
{"id": "eqasc_validation_259", "prediction": "all x y.((Anthozoan(x) & Anemone(y) & Coral(y)) -> Familiar(x,y))", "score": 0}
{"id": "eqasc_validation_259", "prediction": "all x.(Anthozoan(x) -> (Amphibian(x) | Coral(x)))", "score": 0}
{"id": "eqasc_validation_259", "prediction": "all x.(Anthozoan(x) -> (FirmingAnemone(x) | FamiliarCorals(x)))", "score": 0}
{"id": "eqasc_validation_259", "prediction": "all x.(Anthozoan(x) -> (FamousAnemone(x) | FamousCorals(x)))", "score": 0}
{"id": "eqasc_validation_259", "prediction": "all x.(Anthozoan(x) -> (ProneDoor(y) & (Animal(y) | Coral(y))))", "score": 0}
{"id": "eqasc_validation_259", "prediction": "all x.(Anthozoan(x) -> (OtherKnownAnemone(x) & Other(x)))", "score": 0}
{"id": "eqasc_validation_259", "prediction": "all x.(Anthozoan(x) -> (FamousAnemone(x) & FamousCoral(x)))", "score": 0}
{"id": "eqasc_validation_260", "prediction": "all x y.((Handy(x) & Anthozoan(y)) -> UsedForDefense(x,y))", "score": 0}
{"id": "eqasc_validation_260", "prediction": "all x y.((Dart(x) & Anthozoan(y)) -> (Poisonous(x) | Defence(x,y)))", "score": 0}
{"id": "eqasc_validation_260", "prediction": "all x.((Dart(x) & Poisonous(x)) -> UsedForDefense(x))", "score": 0}
{"id": "eqasc_validation_260", "prediction": "all x y.((PoisonousDart(x) & Anthozoan(y)) -> UsedForDefense(x,y))", "score": 0}
{"id": "eqasc_validation_260", "prediction": "all x.(PoisonousDart(x) -> UsedForDefense(x))", "score": 0}
{"id": "eqasc_validation_260", "prediction": "all x y z.((Dart(x) & Poisonous(x) & Anthozoan(y) & Anthozoan(z)) -> UsedForDefense(x,y,z))", "score": 0}
{"id": "eqasc_validation_260", "prediction": "all x.(PoisonousDart(x) -> UsedForDefenseByAnthozoans(x))", "score": 0}
{"id": "eqasc_validation_260", "prediction": "all x y.(Anthozoan(x) & PoisonousDart(x) & UsedForDefense(y))", "score": 0}
{"id": "eqasc_validation_260", "prediction": "all x.((Dart(x) & Poisonous(x)) -> UsedForDefenseByAnthozoans(x))", "score": 0}
{"id": "eqasc_validation_260", "prediction": "all x y.((PoisonousDart(x) & Athozoan(y)) -> UsedForDefense(x,y))", "score": 0}
{"id": "eqasc_validation_260", "prediction": "all x y.((PoisonousDarts(x) & Anthozoan(y)) -> UsedForDefense(x,y))", "score": 0}
{"id": "eqasc_validation_260", "prediction": "all x y.((Dart(x) & Anthozoan(y)) -> UsedForDefense(x,y))", "score": 0}
{"id": "eqasc_validation_261", "prediction": "all x.(SeaAnemone(x) -> (RelatedToJellyfish(x) & RelatedToCoral(x)))", "score": 0}
{"id": "eqasc_validation_261", "prediction": "all x.(SeaAnemone(x) -> (RelatedToJerseyfish(x) & RelatedToCoral(x)))", "score": 0}
{"id": "eqasc_validation_261", "prediction": "all x.(SeaAngemone(x) -> (RelatedTo(x,Jellyfish) & RelatedTo(x,Coral)))", "score": 0}
{"id": "eqasc_validation_261", "prediction": "all x.(SeaAnemone(x) -> (RelatedToJerk(x) & RelatedToCoral(x)))", "score": 0}
{"id": "eqasc_validation_261", "prediction": "all x.(SeaAnemone(x) -> (RelatedToJellyfish(x) | RelatedToCoral(x)))", "score": 0}
{"id": "eqasc_validation_261", "prediction": "all x y z.((SeaAnemone(x) & Jellyfish(y) & Coral(z)) -> RelationshipWith(x,y,z))", "score": 0}
{"id": "eqasc_validation_261", "prediction": "all x.(SeaAnnemone(x) -> (LaysJellyfish(x) | LivesInCoral(x)))", "score": 0}
{"id": "eqasc_validation_261", "prediction": "all x.(SeaAnemone(x) -> (JerkFish(x) | Coral(x)))", "score": 0}
{"id": "eqasc_validation_261", "prediction": "all x y.((SeaAnemone(x) & Jellyfish(y) & Coral(y)) -> RelationshipEarly(x,y))", "score": 0}
{"id": "eqasc_validation_261", "prediction": "all x.(SeaEyes(x) -> (RelatedTo(x,Jellyfish) | RelatedTo(x,Coral)))", "score": 0}
{"id": "eqasc_validation_261", "prediction": "all x.(SeaAnemone(x) -> (Related(x,Jellyfish) | Related(x,Coral)))", "score": 0}
{"id": "eqasc_validation_261", "prediction": "all x.(SeaAnemone(x) -> (RelatedToJ jellyfish(x) & RelatedToCoral(x)))", "score": -1}
{"id": "eqasc_validation_261", "prediction": "all x.(SeaAnemone(x) -> (RelatedTo(x,Jellyfish) & RelatedTo(x,Coral)))", "score": 0}
{"id": "eqasc_validation_262", "prediction": "all x.(PoisonousDart(x) -> (UsedForDefense(x) & OrganismRelativeToJellyfishAndCoral(x)))", "score": 0}
{"id": "eqasc_validation_262", "prediction": "all x y z w.((ParasiteDart(x) & Organism(y) & (Jellyfish(z) | Coral(z))) -> (UsedForDefense(x,y) & RelatedTo(y,z) | AssociateTo(y,w))))", "score": -1}
{"id": "eqasc_validation_262", "prediction": "all x y z.((PoisonousDart(x) & Organism(y) & (Jellyfish(z) | Coral(z))) -> Defense(x))", "score": 0}
{"id": "eqasc_validation_262", "prediction": "all x.(PoisonousDart(x) -> UsedForDefenseByOrganism(x,Dreams(x))", "score": -1}
{"id": "eqasc_validation_262", "prediction": "all x y.((PoisonousDart(x) & Organism(y) & Jellyfish(y)) -> UsedForDefense(x,y))", "score": 0}
{"id": "eqasc_validation_262", "prediction": "all x y z.((PoisonousDart(x) & Organism(y) & Jellyfish(z) & Coral(z)) -> UsedForDefenseBy(x,y))", "score": 0}
{"id": "eqasc_validation_262", "prediction": "all x.(PoisonousDart(x) -> (UsedForDefend(x) & RelationshipDent(x,jellyfish) & RelationshipDent(x,Coral)))", "score": 0}
{"id": "eqasc_validation_262", "prediction": "all x y.((PoisonousDart(x) & Organism(y)) -> (UsedForDefensive(x,y) | RelatedToJerkyfish(y) | RelatedToCoral(y)))", "score": 0}
{"id": "eqasc_validation_262", "prediction": "all x y z.((PoisonousDart(x) & Organism(y) & Jellyfish(z)) -> UsedForDefense(x,y,z))", "score": 0}
{"id": "eqasc_validation_262", "prediction": "all x y z,w.((PoisonousDart(x) & Organism(y) & (Jellyfish(z) | Coral(w))) -> UsedForDefenseBy(x,y,z))", "score": -1}
{"id": "eqasc_validation_262", "prediction": "all x y z.((PoisonousDart(x) & Organism(y) & Jellyfish(z) & Coral(z)) -> UsedForDefense(x,y,z))", "score": 0}
{"id": "eqasc_validation_262", "prediction": "all x y.((PoisonousDart(x) & Organism(y) & JellyfishAndCoral(y)) -> UsedForDefense(x,y))", "score": 0}
{"id": "eqasc_validation_262", "prediction": "all x y.((PoisonousDart(x) & Organism(y) & RelatedTo(y,Jellyfish) & RelatedTo(y,Coral)) -> UsedForDefense(x,y))", "score": 0}
{"id": "eqasc_validation_262", "prediction": "all x y.((PoisonousDart(x) & Organism(y)) -> UsedForDefenseBy(x,y)) (Jellyfish(y) | Coral(y)))", "score": -1}
{"id": "eqasc_validation_262", "prediction": "all x y z.((PoisonousDart(x) & Organism(y) & (Jellyfish(z) | Coral(z))) -> UsedForDefense(x,y,z))", "score": 0}
{"id": "eqasc_validation_262", "prediction": "all x y z.((PoisonousDart(x) & Organism(y) & Jellyfish(z) & Coral(z)) -> UsedForDefenseBy(x,y,z))", "score": 0}
{"id": "eqasc_validation_263", "prediction": "all x.(Lymph(x) -> LeaksOutCapillariesIntoSpacesBetweenCells(x))", "score": 0}
{"id": "eqasc_validation_263", "prediction": "all x.(Lymph(x) -> (LeaksFromCapillaries(x) & SpacesBetweenCells(x)))", "score": 0}
{"id": "eqasc_validation_263", "prediction": "all x.(Lymph(x) -> LeaksIntoCell(x))", "score": 0}
{"id": "eqasc_validation_263", "prediction": "all x.(Lymph(x) -> (Liquid(x) & LeaksOutOfCapillariesIntoSpacesBetweenCells(x)))", "score": 0}
{"id": "eqasc_validation_263", "prediction": "all x.(Lymph(x) -> (LocksOutCapillaries(x) & LeaksIntoSpacesBetweenCells(x)))", "score": 0}
{"id": "eqasc_validation_263", "prediction": "all x.(Lymph(x) -> LeaksOutOfCapillariesIntoSpacesBetweenCells(x))", "score": 0}
{"id": "eqasc_validation_263", "prediction": "all x y.((Lymph(x) & Cell(y)) -> LeaksOutOfCapillariesIntoSpaces(x,y))", "score": 0}
{"id": "eqasc_validation_263", "prediction": "all x.(Lymph(x) -> LeaksFromCapillariesIntoSpacesBetweenCells(x))", "score": 0}
{"id": "eqasc_validation_263", "prediction": "all x.(Lymph(x) -> (LeaksOutPapillaries(x) & SpacesBetweenCells(x)))", "score": 0}
{"id": "eqasc_validation_263", "prediction": "all x.(Lymph(x) -> Leaks(x))", "score": 0}
{"id": "eqasc_validation_263", "prediction": "all x y z.((Lymph(x) & Capillary(y) & Space(z)) -> LeaksOutToSeeps(x,y,z))", "score": 0}
{"id": "eqasc_validation_263", "prediction": "all x.(Lymph(x) -> (FluidLeaksOutOfCapillaries(x) & EntersSpacesBetweenCells(x)))", "score": 0}
{"id": "eqasc_validation_263", "prediction": "all x.(Lymph(x) -> (LeavesOutInCapillaries(x) & LeaksIntoSpacesBetweenCells(x)))", "score": 0}
{"id": "eqasc_validation_264", "prediction": "all x y.((SmallLymphCapillary(x) & Lymph(y)) -> Collects(x,y))", "score": 0}
{"id": "eqasc_validation_264", "prediction": "all x.(SmallLymphCapillary(x) -> CollectsLymph(x))", "score": 0}
{"id": "eqasc_validation_264", "prediction": "all x.(LymphCapillary(x) -> CollectsLymph(x))", "score": 0}
{"id": "eqasc_validation_264", "prediction": "all x.(LymphCapillary(x) -> CollectLymph(x))", "score": 0}
{"id": "eqasc_validation_264", "prediction": "all x.(SmallLymphCapillary(x) -> CollectLymph(x))", "score": 0}
{"id": "eqasc_validation_264", "prediction": "all x y.((LymphCapillary(x) & Small(x)) -> CollectsLymph(x,y))", "score": 0}
{"id": "eqasc_validation_265", "prediction": "all x y z.((SmallCapillary(x) & Fluid(y) & Fluid(z)) -> CollectsCollectsCapillary(x,y,z))", "score": 0}
{"id": "eqasc_validation_265", "prediction": "all x y z.((SmallCatpillary(x) & Fluid(y) & Fluid(z)) -> Collects(x,y,z))", "score": 0}
{"id": "eqasc_validation_265", "prediction": "all x y z.((SmallCapillary(x) & Fluid(y) & Fluid(z)) -> Collects(x,y,z))", "score": 0}
{"id": "eqasc_validation_265", "prediction": "all x y.((Capillary(x) & Small(y)) -> CollectsFluid(x,y))", "score": 0}
{"id": "eqasc_validation_265", "prediction": "all x.(SmallCapillary(x) -> CollectsFluid(x))", "score": 0}
{"id": "eqasc_validation_265", "prediction": "all x.(SmallCatapillary(x) -> CollectFlowFluid(x))", "score": 0}
{"id": "eqasc_validation_265", "prediction": "exists x,y,z.(SpecificCapillary(x) & SmallCathetery(y) & CollectsFluid(z) & CollectsFluid(y,x))", "score": -1}
{"id": "eqasc_validation_265", "prediction": "all x.(SmallCapillary(x) -> CollectsLiquid(x))", "score": 0}
{"id": "eqasc_validation_265", "prediction": "all x y.((SmallCapillary(x) & SmallBody(y)) -> CollectFluid(x,y))", "score": 0}
{"id": "eqasc_validation_265", "prediction": "all x y z.(SmallCathetery(x) -> CollectsFluid(x,y))", "score": 0}
{"id": "eqasc_validation_265", "prediction": "all x.(SmallCapillariesCollectFluid(x) -> SmallCapillariesCollectFluid(x))", "score": 0}
{"id": "eqasc_validation_265", "prediction": "all x.(SmallCapillariesCollectFluid(x) -> CollectCapillaries(x))", "score": 0}
{"id": "eqasc_validation_265", "prediction": "all x y.((SmallCatpillary(x) & Small(y) & CollectsFluid(x,y)) -> CollectsFloss(x,y))", "score": 0}
{"id": "eqasc_validation_266", "prediction": "all x.(LymphVessel(x) -> (TravelingLymph(x) & Colorless(x) & Watery(x) & ContainsLymphocytes(x)))", "score": 0}
{"id": "eqasc_validation_266", "prediction": "all x y z.((LymphVessel(x) & Lymph(y) & Llymphocyte(z)) -> Carries(x,y,z))", "score": 0}
{"id": "eqasc_validation_266", "prediction": "all x y.((LymphVessel(x) & Lymph(y)) -> CarriesLymph(x,y))", "score": 0}
{"id": "eqasc_validation_266", "prediction": "all x.(LymphVessel(x) -> CarriesLymph(x))", "score": 0}
{"id": "eqasc_validation_266", "prediction": "all x.((LymphVessel(x) & Lymph(x)) -> CarryLymph(x))", "score": 0}
{"id": "eqasc_validation_266", "prediction": "all x y z.(LymphVessel(x) -> (CarriesLymph(x) & Liquid(y) & Colorless(y) & Watery(y) & ContainsLymphocytes(x)))", "score": 0}
{"id": "eqasc_validation_266", "prediction": "all x y.((LymphVessel(x) & Lymph(y)) -> (CarriesLymph(x,y) & ColorlessWashedFluid(y) & ContainsLymphocytes(y)))", "score": 0}
{"id": "eqasc_validation_266", "prediction": "all x.(LymphVessel(x) -> (CarriesLymph(x) & ColorlessWateryFluid(x) & ContainsLymphocytes(x)))", "score": 0}
{"id": "eqasc_validation_266", "prediction": "all x.(LymphVessel(x) -> (CarriesLymph(x) & ColorlessFluid(x) & WateryFluid(x) & ContainsLymphocytes(x)))", "score": 0}
{"id": "eqasc_validation_266", "prediction": "all x y.((LymphVessel(x) & Loyal(y)) -> CarriesLymph(x,y))", "score": 0}
{"id": "eqasc_validation_266", "prediction": "all x y.((LymphVessel(x) & Lymph(y) & ColorlessWateryFluid(y) & ContainsLymphocytes(x,y)) -> Carries(x,y))", "score": 0}
{"id": "eqasc_validation_266", "prediction": "all x y.((LymphVessel(x) & Lymph(y)) -> CarriesLymphFluid(x,y))", "score": 0}
{"id": "eqasc_validation_267", "prediction": "all x.((Fluid(x) & LeaksOutOfCapillariesIntoSpacesBetweenCells(x)) -> ContainsLymphocytes(x))", "score": 0}
{"id": "eqasc_validation_267", "prediction": "all x.((Fluid(x) & LeaksOutFromCathetersIntoSpacesBetweenCells(x)) -> Lymphocytes(x))", "score": 0}
{"id": "eqasc_validation_267", "prediction": "all x.((Fluid(x) & LeaksOutOfCapsules(x) & LeaksIntoSpacesBetweenCells(x)) -> ContainsLymphocytes(x))", "score": 0}
{"id": "eqasc_validation_267", "prediction": "all x y.((Fluid(x) & LeaksOutOfCapillariesIntoSpacesBetweenCells(x)) -> ContainsLymphocytes(x))", "score": 0}
{"id": "eqasc_validation_267", "prediction": "all x.(LossOfFluid(x) -> (LeaksOutOfCapillaries(x) & SpacesBetweenCells(x) & ContainsLymphocytes(x)))", "score": 0}
{"id": "eqasc_validation_267", "prediction": "all x y z w.((Fluid(x) & Capillaries(z) & LeaksOut(x,y) & SpacesBetweenCells(w) & Lymphocytes(w)) -> Contains(x,z,w))", "score": 0}
{"id": "eqasc_validation_267", "prediction": "all x y z.((Fluid(x) & LeaksOutVibrations(x,y) & CavapillariesAndSpaces(y)) -> Lymphocytes(z))", "score": 0}
{"id": "eqasc_validation_267", "prediction": "all x y.((Fluid(x) & LeaksOutOfCathedralsIntoSpacesBetweenCells(x) & ContainsLymphocytes(x)) -> LeaksIntoSpacesWithinCells(x))", "score": 0}
{"id": "eqasc_validation_267", "prediction": "all x y z w.((Fluid(x) & Gallbladder(y) & LeaksOutOf(x,y) & SpacesBetweenCells(z) & LeaksInto(x,y,z)) -> Lymphocytes(w))", "score": 0}
{"id": "eqasc_validation_267", "prediction": "all x.(LeaksOutOfCalciforyIntoSpacesBetweenCells(x) -> ContainsLymphocytes(x))", "score": 0}
{"id": "eqasc_validation_267", "prediction": "all x.((Fluid(x) & LeaksOutOfCapillaries(x) & SpacesBetweenCells(x)) -> ContainsLymphocytes(x))", "score": 0}
{"id": "eqasc_validation_267", "prediction": "all x.((Fluid(x) & LeaksOutCapillariesIntoSpacesBetweenCells(x)) -> ContainsLymphocytes(x))", "score": 0}
{"id": "eqasc_validation_267", "prediction": "all x y.((Fluid(x) & LeaksOut(x) & CapillariesIntoSpacesBetweenCells(x)) -> ContainsLymphocytes(x))", "score": 0}
{"id": "eqasc_validation_267", "prediction": "all x.(LeaksFluidOutOfCapillaries(x) -> ContainsLymphocytes(x))", "score": 0}
{"id": "eqasc_validation_267", "prediction": "all x y z.((Capillaries(x) & Fluid(y) & Capillary(z) & LeaksOut(y,z)) -> ContainsLymphocytes(x))", "score": 0}
{"id": "eqasc_validation_267", "prediction": "all x.((Fluid(x) & LeaksOutOfCapillaries(x) & IntoSpacesBetweenCells(x)) -> ContainsLymphocytes(x))", "score": 0}
{"id": "eqasc_validation_268", "prediction": "all x.(CapillaryWall(x) -> Permeable(x))", "score": 0}
{"id": "eqasc_validation_268", "prediction": "all x.(CapillaryWall(x) -> Meshable(x))", "score": 0}
{"id": "eqasc_validation_268", "prediction": "all x.(CartilanianWall(x) -> Permeable(x))", "score": 0}
{"id": "eqasc_validation_268", "prediction": "all x y.((CapillaryWall(x) & Floor(y)) -> Permeable(x,y))", "score": 0}
{"id": "eqasc_validation_269", "prediction": "all x.(Lymph(x) -> (LeaksPormeableWallsIntoSpacesBetweenCells(x) & FromPermeableWallsIntoSpaces(x)))", "score": 0}
{"id": "eqasc_validation_269", "prediction": "all x y.((Lymph(x) & PermeableWalls(y)) -> LeaksFromIntoSpacesBetweenCells(x,y))", "score": 0}
{"id": "eqasc_validation_269", "prediction": "all x.(Lymph(x) -> LeaksStructuresFromPermableWallsIntoSpacesBetweenCells(x))", "score": 0}
{"id": "eqasc_validation_269", "prediction": "all x.(Lymph(x) -> LeaksFromPermeableWallsToSpacesBetweenCells(x))", "score": 0}
{"id": "eqasc_validation_269", "prediction": "all x.(Lymph(x) -> LeaksFromPermeableWallsAllowed(x))", "score": 0}
{"id": "eqasc_validation_269", "prediction": "all x.(Lymph(x) -> (LeasesFromPermeableWallsIntoSpacesBetweenCells(x) & LeaksFromPermeableWallsToSpacesBetweenCells(x)))", "score": 0}
{"id": "eqasc_validation_269", "prediction": "all x.(Lymph(x) -> LeaksFromPermeableWallsIntoSpacesBetweenCells(x))", "score": 0}
{"id": "eqasc_validation_269", "prediction": "all x y z.(Lymph(x) -> (LeaksFromPermeableWallsIntoSpacesBetweenCells(x) & PermeableWallsIntoSpacesWithinCells(x)))", "score": 0}
{"id": "eqasc_validation_269", "prediction": "all x.(Lymph(x) -> LeaksInDependentWalls(x,y))", "score": 0}
{"id": "eqasc_validation_269", "prediction": "all x y z.((Lymph(x) & PermeableWall(y) & SpacesBetweenCells(z)) -> LeaksFromInto(x,y,z))", "score": 0}
{"id": "eqasc_validation_269", "prediction": "all x y.((Lymph(x) & PermeableWalls(y) & SpacesBetweenCells(x)) -> LeaksInto(x,y))", "score": 0}
{"id": "eqasc_validation_269", "prediction": "all x y z.((Lymph(x) & PermeableWalls(y) & Space(z)) -> Leaks(x,y,z))", "score": 0}
{"id": "eqasc_validation_269", "prediction": "all x y z.((Lymph(x) & PermeableWalls(y) & SpacesBetweenCells(z)) -> LeaksFromInto(x,y,z))", "score": 0}
{"id": "eqasc_validation_270", "prediction": "all x y z.((System(x) & LymphCapillaries(y) & LymphVins(z)) -> (ConsistsOf(x,y) & ConsistsOf(x,z)))", "score": 0}
{"id": "eqasc_validation_270", "prediction": "all x.(System(x) -> (LymphCapillaries(x) & LymphVines(x) & LymphNodes(x)))", "score": 0}
{"id": "eqasc_validation_270", "prediction": "all x.(System(x) -> (LymphCapillaries(x) & LymphVins(x) & LymphNodes(x)))", "score": 0}
{"id": "eqasc_validation_270", "prediction": "all x.(System(x) -> (exists y.(LymphCapillaries(y) | LymphVines(y) | LymphNodes(y))))", "score": 0}
{"id": "eqasc_validation_270", "prediction": "all x.(System(x) -> (IsLymphCapillary(x) | IsLymphVein(x) | IsLymphNode(x)))", "score": 0}
{"id": "eqasc_validation_270", "prediction": "all x.(System(x) -> (ConsistsOfLymphCapillaries(x) & ConsistsOfLymphVens(x) & ConsistsOfLymphNodes(x)))", "score": 0}
{"id": "eqasc_validation_270", "prediction": "all x.(System(x) -> (LymphCapillaries(x) & LymphVineInPrimaryNodes(x)))", "score": 0}
{"id": "eqasc_validation_270", "prediction": "all x.(System(x) -> (YellowCapillaries(x) & LymphVins(x) & LymphNodes(x)))", "score": 0}
{"id": "eqasc_validation_270", "prediction": "all x.(System(x) -> (LymphCapillaries(x) & LymphVineTrees(x) & LymphNodes(x)))", "score": 0}
{"id": "eqasc_validation_270", "prediction": "all x y.((System(x) & LymphCapillaries(y) & LymphVins(y)) -> LymphNodes(x))", "score": 0}
{"id": "eqasc_validation_270", "prediction": "all x.(System(x) -> (ConsistsOfLymphCardioles(x) & ConsistsOfLymphVines(x) & ConsistsOfLymphNodes(x)))", "score": 0}
{"id": "eqasc_validation_270", "prediction": "all x.(System(x) -> (ConsistsOfLymphCapillaries(x) & ConsistsOfLymphVines(x) & ConsistsOfLymphNodes(x)))", "score": 0}
{"id": "eqasc_validation_271", "prediction": "all x.(LymphIsInNodes(x) -> LymphAndNodes(x))", "score": 0}
{"id": "eqasc_validation_271", "prediction": "all x y z.((Lymph(x) & Node(y) & Node(z)) -> IsIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_271", "prediction": "all x y z.((Lymph(x) & Node(y) & Node(z)) -> LymphIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_271", "prediction": "all x y z.((Lymph(x) & Node(y) & Node(z)) -> LymphInNode(x,y,z))", "score": 0}
{"id": "eqasc_validation_271", "prediction": "all x.(Lymph(x) -> \"InNodes(x)\")", "score": -1}
{"id": "eqasc_validation_271", "prediction": "all x y.((Lymph(x) & Node(y)) -> InNode(x,y))", "score": 0}
{"id": "eqasc_validation_271", "prediction": "all x.(Lymph(x) -> NodeInNode(x))", "score": 0}
{"id": "eqasc_validation_271", "prediction": "all x y z.((Lymph(x) & Node(y) & Node(z) & In(x,y) & Node(z)) -> LymphIn(x,y))", "score": 0}
{"id": "eqasc_validation_271", "prediction": "all x.(LegallyInNode(x) -> LymphInNode(x))", "score": 0}
{"id": "eqasc_validation_271", "prediction": "all x.(Lymph(x) -> InNodes(x))", "score": 0}
{"id": "eqasc_validation_271", "prediction": "all x.(Lymph(x) -> NotInNode(x))", "score": 0}
{"id": "eqasc_validation_271", "prediction": "all x y.((Lymph(x) & Node(y)) -> (InNode(x,y) | InNode(x,y)))", "score": 0}
{"id": "eqasc_validation_271", "prediction": "all x y z.(Lymph(x) & Node(y) & Node(z)) -> LymphIn(x,y,z))", "score": -1}
{"id": "eqasc_validation_271", "prediction": "all x.(Lymph(x) -> Node2(x))", "score": 0}
{"id": "eqasc_validation_272", "prediction": "all x.(LymphFluid(x) -> RichInProtein(x))", "score": 0}
{"id": "eqasc_validation_272", "prediction": "all x.(LymphFlour(x) -> RichInProtein(x))", "score": 0}
{"id": "eqasc_validation_272", "prediction": "all x.(LymphFluid(x) -> RichinProtein(x))", "score": 0}
{"id": "eqasc_validation_272", "prediction": "(RichInProtein(LymphFloid))", "score": 0}
{"id": "eqasc_validation_272", "prediction": "all x.(LymphFlould(x) -> RichInProtein(x))", "score": 0}
{"id": "eqasc_validation_273", "prediction": "all x y.((ProteinRichFluid(x) & Space(y)) -> LeaksInto(x,y))", "score": 0}
{"id": "eqasc_validation_273", "prediction": "all x.(ProteinRichFluid(x) -> LeaksIntoSpacesBetweenCells(x))", "score": 0}
{"id": "eqasc_validation_273", "prediction": "all x y z.((ProteinRichFluid(x) & SpacesBetweenCells(y) & Cell(z)) -> LeaksInto(x,y,z))", "score": 0}
{"id": "eqasc_validation_273", "prediction": "all x y.((ProteinRichFluid(x) & SpacesBetweenCells(x)) -> LeaksInto(x,y))", "score": 0}
{"id": "eqasc_validation_273", "prediction": "all x.((ProteinRichLiquid(x) & LeaksIntoSpacesBetweenCells(x)) -> LeaksIntoSpacesBetweenCells(x))", "score": 0}
{"id": "eqasc_validation_273", "prediction": "all x y.((ProteinRichFluid(x) & Cell(y) & LeaksIntoSpaces(x,y,z)) -> ProteinRichFluid(x))", "score": 0}
{"id": "eqasc_validation_273", "prediction": "all x.((ProteinRichFluid(x) & LeaksIntoSpaces(x)) -> exists y.(Cell(y) & Cell(z))))", "score": -1}
{"id": "eqasc_validation_273", "prediction": "all x.((Fluid(x) & ProteinRich(x)) -> LeaksIntoSpacesBetweenCells(x))", "score": 0}
{"id": "eqasc_validation_273", "prediction": "all x.((ProteinRichFluid(x) & LeapsIntoSpacesBetweenCells(x)) -> exists y.(ProteinRichFluid(y) & exists z.(Cell(z) & LeapsInto(x,z)))))", "score": -1}
{"id": "eqasc_validation_273", "prediction": "all x y.((ProteinRichFluid(x) & SpacesBetweenCellsLoses(x)) -> LeaksInto(x,y))", "score": 0}
{"id": "eqasc_validation_273", "prediction": "all x y.((ProteinRichFluid(x) & SpaceBreatherCell(y)) -> LeaksInto(x,y))", "score": 0}
{"id": "eqasc_validation_273", "prediction": "all x y z.((ProteinRichFluid(x) & Space(y) & Cell(z) & LeaksIntoPlacesBetween(x,y,z)) -> LeaksInto(x,y,z))", "score": 0}
{"id": "eqasc_validation_273", "prediction": "all x y.((ProteinRichFluid(x) & SpacesBetweenCells(y)) -> LeaksIntoLeaksIntoIn.(x,y)))", "score": -1}
{"id": "eqasc_validation_273", "prediction": "all x y.((ProteinRichFluid(x) & Liquid(y) & SpaceBetweenCells(y)) -> LeaksInto(x,y))", "score": 0}
{"id": "eqasc_validation_274", "prediction": "all x.(Human(x) -> Cells(x, trillions))", "score": 0}
{"id": "eqasc_validation_274", "prediction": "all x.(Human(x) -> ThereOfTwelve(x))", "score": 0}
{"id": "eqasc_validation_274", "prediction": "all x.(Human(x) -> (MadeUpOfTwelveCountries(x)))", "score": 0}
{"id": "eqasc_validation_274", "prediction": "all x.(Human(x) -> (HasTwelveChilds(x)))", "score": 0}
{"id": "eqasc_validation_274", "prediction": "all x.(Human(x) -> exists y.(ThreeTwelveCells(y) & MadeUpOf(x,y)))", "score": 0}
{"id": "eqasc_validation_274", "prediction": "all x.(Human(x) -> InhabitsTrillionsOfCells(x))", "score": 0}
{"id": "eqasc_validation_274", "prediction": "all x y.((Human(x) & Cell(y)) -> MadeUpOfTwelve(x,y))", "score": 0}
{"id": "eqasc_validation_274", "prediction": "all x.(Human(x) -> (MadeOfThirtyMillionsOfCells(x)))", "score": 0}
{"id": "eqasc_validation_274", "prediction": "all x.(Human(x) -> MadeUpOfTwelveStones(x))", "score": 0}
{"id": "eqasc_validation_274", "prediction": "all x.(Human(x) -> exists y.(TwoTen(y) & Cells(y) & Millions(y))))", "score": -1}
{"id": "eqasc_validation_274", "prediction": "all x.(Human(x) -> trillionsOfCells(x))", "score": 0}
{"id": "eqasc_validation_274", "prediction": "all x.(Human(x) -> MadeUpOfTwelveTenMiles(x))", "score": 0}
{"id": "eqasc_validation_274", "prediction": "all x.(Human(x) -> MakesOfTwelveSquaresOfCells(x))", "score": 0}
{"id": "eqasc_validation_274", "prediction": "all x.(Human(x) -> MakesUpOfTwelveTalesOfCells(x))", "score": 0}
{"id": "eqasc_validation_274", "prediction": "all x.(Human(x) -> HasTwoThundersOfCells(x))", "score": 0}
{"id": "eqasc_validation_274", "prediction": "all x.(Human(x) -> MillionsOfCells(x))", "score": 0}
{"id": "eqasc_validation_275", "prediction": "all x.(HasLymphContainingLymph(x) -> ContainsLymph(x))", "score": 0}
{"id": "eqasc_validation_275", "prediction": "all x.(Human(x) -> ContainsLymph(x))", "score": 0}
{"id": "eqasc_validation_275", "prediction": "all x.(Human(x) & ContainsLymph(x))", "score": 0}
{"id": "eqasc_validation_275", "prediction": "all x.(Human(x) -> LymphContainment(x))", "score": 0}
{"id": "eqasc_validation_275", "prediction": "all x y.((Human(x) & Human(y)) -> ContainsLymph(x,y))", "score": 0}
{"id": "eqasc_validation_275", "prediction": "all x.(Human(x) -> InhabitsLymph(x))", "score": 0}
{"id": "eqasc_validation_275", "prediction": "all x y.((Human(x) & Human(y)) -> LymphContainment(x,y))", "score": 0}
{"id": "eqasc_validation_275", "prediction": "all x y.(Human(x) -> ContainsLymph(x,y))", "score": 0}
{"id": "eqasc_validation_275", "prediction": "all x y.(Habitat(x) -> ContainsLymph(x,y))", "score": 0}
{"id": "eqasc_validation_275", "prediction": "all x.(ThirdHuman(x) -> HasLymphContent(x))", "score": 0}
{"id": "eqasc_validation_276", "prediction": "all x.(Capillary(x) -> MicroscopicVessel(x))", "score": 0}
{"id": "eqasc_validation_276", "prediction": "all x.(Capillary(x) -> MicroscopicalVessel(x))", "score": 0}
{"id": "eqasc_validation_276", "prediction": "all x.(Capillary(x) -> MicroscopeVessel(x))", "score": 0}
{"id": "eqasc_validation_276", "prediction": "all x.(Capsule(x) -> MicroscopicVessel(x))", "score": 0}
{"id": "eqasc_validation_277", "prediction": "all x y.((Lymph(x) & MicroscopicVessel(y) & LeaksOut(x,y)) -> InSpacesBetweenCells(x))", "score": 0}
{"id": "eqasc_validation_277", "prediction": "all x.(Lymph(x) -> (FlowsElementsOfMicroscopeVessels(x) & LeaksOutIntoSpreadsBetweenCells(x)))", "score": 0}
{"id": "eqasc_validation_277", "prediction": "all x.(Lymph(x) -> (Flower(x) & LeaksOutOfVesselsIntoSpacesBetweenCells(x)))", "score": 0}
{"id": "eqasc_validation_277", "prediction": "all x.(Lymph(x) -> LeaksOutOfMicroscopicVesselsIntoSpacesBetweenCells(x))", "score": 0}
{"id": "eqasc_validation_277", "prediction": "all x.(Lymph(x) -> (FluidLeaksOutOfMicroscopicVessels(x) & InsideSpacesBetweenCells(x)))", "score": 0}
{"id": "eqasc_validation_277", "prediction": "all x.(Lymph(x) -> (Liquid(x) & LeaksOutOfMicroscopicFlowersIntoSpacesBetweenCells(x)))", "score": 0}
{"id": "eqasc_validation_277", "prediction": "all x.(Lymph(x) -> (LeaksOutOfMicroscopicVessels(x) & InSpacesBetweenCells(x)))", "score": 0}
{"id": "eqasc_validation_277", "prediction": "all x.(Lymph(x) -> (Fluid(x) & LeaksOutMicroscopicVessels(x) & EntersSpacesBetweenCells(x)))", "score": 0}
{"id": "eqasc_validation_277", "prediction": "all x.(Lymph(x) -> (ScalingFluid(x) & LeaksOutOfMinroscopicVessels(x) & BetweenCellsSpace(x)))", "score": 0}
{"id": "eqasc_validation_277", "prediction": "all x.(Lymph(x) -> (LikelyFluid(x) & LeaksOutOfMicroscopicVessels(x) & LeaksIntoSpacesBetweenCells(x)))", "score": 0}
{"id": "eqasc_validation_277", "prediction": "all x.(Lymph(x) -> (Leaves(x,mikroscopicVessels) & LiesIntoSpacesBetweenCells(x)))", "score": 0}
{"id": "eqasc_validation_277", "prediction": "all x.(Lymph(x) -> (LleaksOutOfMicroscopeVesselsIntoSpacesBetweenCells(x)))", "score": 0}
{"id": "eqasc_validation_277", "prediction": "all x.(Lymph(x) -> LeaksOutOfMicroscopicalVesselsIntoSpacesBetweenCells(x))", "score": 0}
{"id": "eqasc_validation_277", "prediction": "all x.(Lymph(x) -> (LeaksOutOfMicroscopicVacuumsIntoSpacesBetweenCells(x)))", "score": 0}
{"id": "eqasc_validation_277", "prediction": "all x.(Lymph(x) -> LeaksOutMicroscopicVesselsToSpacesBetweenCells(x))", "score": 0}
{"id": "eqasc_validation_277", "prediction": "all x.(Lymph(x) -> (Liquid(x) & LeaksOutOfMicroscopicVessels(x) & IntoSpacesBetweenCells(x)))", "score": 0}
{"id": "eqasc_validation_278", "prediction": "all x.(Bacteria(x) -> (InvadesLymphNodes(x) & Swells(x) & CreatesBubboes(x)))", "score": 0}
{"id": "eqasc_validation_278", "prediction": "all x y.((Bacteria(x) & LymphNode(y)) -> InvadesAndSwells(y,x))", "score": 0}
{"id": "eqasc_validation_278", "prediction": "all x y.((Bacteria(x) & LymphNode(y)) -> InvadesAndSwells(x,y))", "score": 0}
{"id": "eqasc_validation_278", "prediction": "all x y.((Bacteria(x) & LymphNode(y)) -> Invading(x,y))", "score": 0}
{"id": "eqasc_validation_278", "prediction": "all x y.((Bacteria(x) & LymphNode(y)) -> (Invades(x,y) & Swells(x,y)))", "score": 0}
{"id": "eqasc_validation_278", "prediction": "all x.(Bacteria(x) -> (InvadesLymphNode(x) & Swells(x) & CreatesBubioes(x)))", "score": 0}
{"id": "eqasc_validation_278", "prediction": "all x y.((Bacteria(x) & LymphNode(y)) -> InvadesSoil(x,y))", "score": 0}
{"id": "eqasc_validation_278", "prediction": "all x y.((Bacteria(x) & LymphNode(y) & Invades(x,y)) -> (Invades(x,y) & Swells(x) & CreatesBodies(x)))", "score": 0}
{"id": "eqasc_validation_278", "prediction": "all x.(Bacteria(x) -> (InvadesLymphNodes(x) & SwellsBaboes(x)))", "score": 0}
{"id": "eqasc_validation_278", "prediction": "all x y z.(( Bacteria(x) & LymphNode(y) & Bubo(z)) -> InvadesAndSwells(x,y,z))", "score": 0}
{"id": "eqasc_validation_278", "prediction": "all x.(Bacteria(x) -> (InvadesLymphNode(x) & InvadesLymphNode(x) & Swells(x)))", "score": 0}
{"id": "eqasc_validation_278", "prediction": "all x.(Bacteria(x) -> (InvadesLymphNodes(x) & SwellsAndCreatesBubbes(x)))", "score": 0}
{"id": "eqasc_validation_278", "prediction": "all x.(Bacteria(x) -> (InvadesLymphNode(x) & Snootens(x) & BuildsBoases(x)))", "score": 0}
{"id": "eqasc_validation_278", "prediction": "all x y.((Bacteria(x) & LymphNode(y)) -> (Invades(x,y) & Swells(y) & CreatesBubboes(y)))", "score": 0}
{"id": "eqasc_validation_278", "prediction": "all x.(BacteriaInvadesLymphNodes(x) & Envades(x) & SwellsBobos(x))", "score": 0}
{"id": "eqasc_validation_279", "prediction": "all x y.((SwellingNode(x) & Capillary(y)) -> LeaksFluid(x,y))", "score": 0}
{"id": "eqasc_validation_279", "prediction": "all x y z.((SwellingNode(x) & Capillary(y) & Space(z)) -> LeaksFluidOutInto(x,y,z))", "score": 0}
{"id": "eqasc_validation_279", "prediction": "all x.(SwellingNode(x) -> LeaksFluidIntoSpacesBetweenCells(x))", "score": 0}
{"id": "eqasc_validation_279", "prediction": "all x y z.((SwellingNode(x) & Capillary(y) & Space(z)) -> LeaksFloidOutInto(x,y,z))", "score": 0}
{"id": "eqasc_validation_279", "prediction": "all x y.((SwellingNode(x) & Capillary(y)) -> LeaksFloidOut(x,y))", "score": 0}
{"id": "eqasc_validation_279", "prediction": "all x.(SwellingNode(x) -> LeaksFluidOutOfCapillariesIntoSpacesBetweenCells(x))", "score": 0}
{"id": "eqasc_validation_279", "prediction": "all x y.((SwellingNode(x) & Capillary(y)) -> LeaksFluidOutIntoSpacesBetweenCells(x,y))", "score": 0}
{"id": "eqasc_validation_279", "prediction": "all x.(SwellingNode(x) -> LeaksFluidOutOfCathetersIntoSpacesBetweenCells(x))", "score": 0}
{"id": "eqasc_validation_279", "prediction": "all x y z.((SwellingNode(x) & Capillary(y) & Cavapillary(z) & SpaceBetweenCells(z)) -> LeaksFluidOut(x,y,z))", "score": 0}
{"id": "eqasc_validation_279", "prediction": "all x y z.(ResiningNode(x) & Capillary(y) & Capillary(z) & SpacesBetweenCells(x)) -> LeaksFluidOut(x,y,z))", "score": -1}
{"id": "eqasc_validation_279", "prediction": "all x y z.((SwellingNode(x) & Capillaries(y) & SpacesBetweenCells(z)) -> LeaksFluidOutOf(x,y))", "score": 0}
{"id": "eqasc_validation_279", "prediction": "all x y z.((SwellingNode(x) & Capillary(y) & SpaceBetweenCells(z)) -> LeaksFloidOutIntoSpacesBetweenCells(x,y,z))", "score": 0}
{"id": "eqasc_validation_279", "prediction": "all x y.((SwellingNode(x) & CapillaryEnergy(y)) -> LeaksFluidOutIntoSpacesBetweenCells(x,y))", "score": 0}
{"id": "eqasc_validation_279", "prediction": "all x y z.((SwellingNode(x) & Capillary(y) & Capillary(z)) -> LeaksFluid(x,y,z))", "score": 0}
{"id": "eqasc_validation_279", "prediction": "all x y.((SwellingNode(x) & VaginalCapillary(y)) -> LightsIntoSpacesBetweenCells(x,y))", "score": 0}
{"id": "eqasc_validation_279", "prediction": "all x y z.((SwellingNode(x) & Capillaries(y) & SpacesBetweenCells(z)) -> LeaksFloidOut(x,y,z))", "score": 0}
{"id": "eqasc_validation_280", "prediction": "all x.(LymphNodeOrGlands(x) -> FiltersLymphFluid(x))", "score": 0}
{"id": "eqasc_validation_280", "prediction": "all x.((LymphNode(x) | Gliat(x)) -> FiltersLymphFluid(x))", "score": 0}
{"id": "eqasc_validation_280", "prediction": "all x y z.((LymphNode(x) | Gung(x)) -> FiltersLymphFlour(x,y,z))", "score": 0}
{"id": "eqasc_validation_280", "prediction": "all x.(LymphNode(x) -> FiltersLymphFluid(x))", "score": 0}
{"id": "eqasc_validation_280", "prediction": "all x.((LymphNode(x) | Gum(x)) -> FiltersLymphFluid(x))", "score": 0}
{"id": "eqasc_validation_280", "prediction": "all x.(LymphNodes(x) -> FiltersLymphFloid(x))", "score": 0}
{"id": "eqasc_validation_280", "prediction": "all x.((LymphNode(x) | Gilg(x)) -> FiltersLymphFluid(x))", "score": 0}
{"id": "eqasc_validation_280", "prediction": "all x.((LymphNode(x) | Glands(x)) -> FiltersLymphFluid(x))", "score": 0}
{"id": "eqasc_validation_280", "prediction": "all x y.((LymphNode(x) | Glands(x)) -> FiltersLymphFloid(x))", "score": 0}
{"id": "eqasc_validation_280", "prediction": "all x.((LymphNode(x) | Gallbladder(x)) -> FiltersLymphFluid(x))", "score": 0}
{"id": "eqasc_validation_280", "prediction": "all x.(FilterLymphFlow(x) & (LymphNode(x) | Gland(x)))", "score": 0}
{"id": "eqasc_validation_280", "prediction": "all x y.((LymphNumber(x) | Glands(x)) -> FiltersLymphFluid(y))", "score": 0}
{"id": "eqasc_validation_280", "prediction": "all x y z.((LymphNode(x) | Gum(y) & LymphFluid(z)) -> Filters(x,y,z))", "score": 0}
{"id": "eqasc_validation_280", "prediction": "all x.((LymphNode(x) | Glands(x)) -> FiltersLymphFloid(x))", "score": 0}
{"id": "eqasc_validation_280", "prediction": "all x.(LymphNode(x) -> (Glands(x) & FiltersLymphFluid(x)))", "score": 0}
{"id": "eqasc_validation_280", "prediction": "all x.(LymphNode(x) | Threshold(x)) -> FiltersLymphFloid(x))", "score": -1}
{"id": "eqasc_validation_281", "prediction": "all x y z.((Lymph(x) & Node(y) & Node(z)) -> FilteredBy(x,y,z))", "score": 0}
{"id": "eqasc_validation_281", "prediction": "all x.(Lymph(x) -> FilteredByNodes(x))", "score": 0}
{"id": "eqasc_validation_281", "prediction": "all x y.((Lymph(x) & Node(y)) -> FilteredBy(y,x))", "score": 0}
{"id": "eqasc_validation_281", "prediction": "all x y.((Lymph(x) & Node(y)) -> FilteredBy(x,y))", "score": 0}
{"id": "eqasc_validation_282", "prediction": "all x.(Capillary(x) -> (Tiny(x) & ThinWalledBloodedVessel(x)))", "score": 0}
{"id": "eqasc_validation_282", "prediction": "all x.(Capillary(x) -> (TinyThinWalledBloodedVessel(x) & Capillaries(x)))", "score": 0}
{"id": "eqasc_validation_282", "prediction": "all x.(Capillary(x) -> (TinyThinWalledBloodedVessel(x) & IsBlooded(x)))", "score": 0}
{"id": "eqasc_validation_282", "prediction": "all x.(Capillaries(x) -> (TinyThickWalledBloodVessels(x) & OftenThirdRow(x)))", "score": 0}
{"id": "eqasc_validation_282", "prediction": "all x.(Capillary(x) -> (Tiny(x) & ThickWalled(x) & BloodVessel(x)))", "score": 0}
{"id": "eqasc_validation_282", "prediction": "all x.(Capillary(x) -> (TinyThreeWalledBloodVessel(x) & Thick(x)))", "score": 0}
{"id": "eqasc_validation_282", "prediction": "all x.(Capillaries(x) -> (Tiny(x) & ThinWalled(x,bloodValves)))", "score": 0}
{"id": "eqasc_validation_282", "prediction": "all x.(Capillary(x) -> (TinyThickWalledBloodedBloodVessel(x) & Tapestry(x)))", "score": 0}
{"id": "eqasc_validation_282", "prediction": "all x.(Capillary(x) -> (TinyThinWalledBloodedVessel(x) & Tilt(x)))", "score": 0}
{"id": "eqasc_validation_282", "prediction": "all x.(Capillary(x) -> (TinyTiny(x) & ThinWalledBloodedVessel(x)))", "score": 0}
{"id": "eqasc_validation_282", "prediction": "all x.(Capillary(x) -> (Tiny(x) & ThinWalled(x) & BloodVessel(x)))", "score": 0}
{"id": "eqasc_validation_282", "prediction": "all x.(Capillary(x) -> (TinyThinWalledBloodedVessel(x) & Walled(x)))", "score": 0}
{"id": "eqasc_validation_282", "prediction": "all x y.((SimpleBodyVessel(x) & Capillary(y)) -> (TinyFlexible(y) & ThinWalled(z) & BloodVessel(y) & Vase(x,y)))", "score": 0}
{"id": "eqasc_validation_282", "prediction": "all x.(Capillary(x) -> (TinyThinWalledBloodedVessel(x) & Ignite(x)))", "score": 0}
{"id": "eqasc_validation_282", "prediction": "all x.(Capillary(x) -> (Tiny(x) & ThinWalledBloodVessel(x)))", "score": 0}
{"id": "eqasc_validation_283", "prediction": "all x y.((LymphFluid(x) & BloodVessel(y)) -> LeaksOutIntoSpacesBetweenCells(y,x))", "score": 0}
{"id": "eqasc_validation_283", "prediction": "all x y.((LymphFluid(x) & BloodVessel(y)) -> LeaksOutIntoSpacesBetweenCells(x,y))", "score": 0}
{"id": "eqasc_validation_283", "prediction": "all x y.((LymphFlourishLeaksOutOfBloodVessels(x) & IntoZonesBetweenCells(x)) -> LeaksIntoSpacesBetweenCells(x,y))", "score": 0}
{"id": "eqasc_validation_283", "prediction": "all x y z.((LymphFluid(x) & BloodVessel(y) & Space(z)) -> LeaksInto(x,y,z))", "score": 0}
{"id": "eqasc_validation_283", "prediction": "all x y z.((LymphFluid(x) & BloodVessel(y) & SpaceBetweenCells(z)) -> LeaksOutOfIntoInto(x,y,z))", "score": 0}
{"id": "eqasc_validation_283", "prediction": "all x.((LymphFluid(x) & BloodVesselLeaks(x,y)) -> EntersSpacesBetweenCells(x,y))", "score": 0}
{"id": "eqasc_validation_283", "prediction": "all x y z.((LymphFluid(x) & BloodVessel(y) & SpaceBetweenCells(z)) -> LeaksOutInto(x,y,z))", "score": 0}
{"id": "eqasc_validation_283", "prediction": "all x y z.((LymphFluid(x) & BloodVessel(y) & Space(z) & BetweenCells(x)) -> LeaksOutInto(x,y,z))", "score": 0}
{"id": "eqasc_validation_283", "prediction": "all x.(LymphFluidLeass(x) – OutOfBloodVesselsIntoSpaces(x))", "score": -1}
{"id": "eqasc_validation_283", "prediction": "all x y z.((LymphFluid(x) & BloodVessel(y) & Space(z)) -> LeaksOutIntoInto(x,y,z))", "score": 0}
{"id": "eqasc_validation_283", "prediction": "all x y z.((LymphFluid(x) & BloodVessel(y) & Space(z)) -> LeaksOutToLowerSpaces(x,y,z))", "score": 0}
{"id": "eqasc_validation_283", "prediction": "all x y.((LymphFluid(x) & BloodVessel(y)) -> LeaksOutToSpacesBetweenCells(x,y))", "score": 0}
{"id": "eqasc_validation_283", "prediction": "all x.(LymphFluidLeaksOutOfBlueVesselsIntoSpacesBetweenCells(x) -> BetweenCells(x))", "score": 0}
{"id": "eqasc_validation_283", "prediction": "all x y z.((LymphFloid(x) & BloodVessel(y) & Space(z)) -> LeaksOutIntoRangesIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_283", "prediction": "all x y z.((LymphFluid(x) & BloodVessel(y) & SpaceBetweenCells(z)) -> LeaksOutToSpaceBetweenCells(x,y,z))", "score": 0}
{"id": "eqasc_validation_284", "prediction": "all x y.((Lymph(x) & WhiteBloodCell(y)) -> FlowsThroughLymphaticVessels(x))", "score": 0}
{"id": "eqasc_validation_284", "prediction": "all x y.((Lymph(x) & WhiteBloodCells(y) & LymphaticVessel(x)) -> FlowsThrough(x,y))", "score": 0}
{"id": "eqasc_validation_284", "prediction": "all x.(Lymph(x) -> (RepleteInWhiteBloodCells(x) & FlowsThroughLymphaticVessels(x)))", "score": 0}
{"id": "eqasc_validation_284", "prediction": "all x.(Lymph(x) -> (FluidChampagne(x) & RichInWhiteBloodCells(x)))", "score": 0}
{"id": "eqasc_validation_284", "prediction": "all x.(Lymph(x) -> (RichInWhiteBloodCells(x) & FlowsThroughLymphaticVessels(x)))", "score": 0}
{"id": "eqasc_validation_284", "prediction": "all x y z.((Lymph(x) & WhiteBloodCell(y) & LymphaticVessel(z)) -> (Rich(x,y) & FlowsThrough(x,z)))", "score": 0}
{"id": "eqasc_validation_284", "prediction": "all x.(Line(x) -> (RichInWhiteBloodCells(x) & FlowsThroughLymphaticVessels(x)))", "score": 0}
{"id": "eqasc_validation_284", "prediction": "all x y.((Fluid(x) & Lymph(y)) -> (ReliableInWhiteBlueBloodCells(x) & FlowsThroughLymphaticVessels(x)))", "score": 0}
{"id": "eqasc_validation_284", "prediction": "all x y z w.((Lymph(x) & WhiteBloodCell(y) & LymphaticVessel(z) & RichIn(x,y)) -> FlowsThrough(x,z))", "score": 0}
{"id": "eqasc_validation_284", "prediction": "all x y.((Lymph(x) & WhiteBlueBloodCell(y)) -> (RichIn(x,y) & FlowsThroughLymphaticVessels(x)))", "score": 0}
{"id": "eqasc_validation_284", "prediction": "all x y.((Lymph(x) & WhiteBloodCell(y)) -> (RichIn(x,y) & FlowsThrough(x,y)))", "score": 0}
{"id": "eqasc_validation_284", "prediction": "all x y.((Lymph(x) & WhiteBloodCell(y)) -> (RichInLymph(x,y) & FlowsThroughLymphaticVessels(x)))", "score": 0}
{"id": "eqasc_validation_284", "prediction": "all x y.((Lymph(x) & Lympha(y)) -> (RichInWhiteBlood(x) & FlowsThroughLymphaticVessels(x)))", "score": 0}
{"id": "eqasc_validation_285", "prediction": "all x y z.((Floid(x) & Capillaries(y) & SpacesBetweenCells(z) & LeaksOutOf(x,y)) -> RichInWhiteBloodCells(x))", "score": 0}
{"id": "eqasc_validation_285", "prediction": "all x y.((Fluid(x) & LeaksOutOfCatheteriesIntoSpacesBetweenCells(x)) -> RichInWhiteBloodCells(x,y))", "score": 0}
{"id": "eqasc_validation_285", "prediction": "all x.((Fluid(x) & LeaksOutOfCapillariesIntoSpacesBetweenCells(x)) -> RichInWhiteBloodCells(x))", "score": 0}
{"id": "eqasc_validation_285", "prediction": "all x y z.((Fluid(x) & LeaksOutCapillaries(x) & SpacesBetweenCells(y,z) & LeaksThroughCartlets(x,y) & LeaksIntoInnerCells(z,x)) -> RichInWhiteBloodCells(x))", "score": 0}
{"id": "eqasc_validation_285", "prediction": "all x y z.((Fluid(x) & LeaksOutOfCapillaries(x,y) & SpacesBetweenCells(y) & LeaksBetweenCells(x,z)) -> RichInWhiteBloodCells(x))", "score": 0}
{"id": "eqasc_validation_285", "prediction": "all x y z.((Fluid(x) & LeaksOutOfCathedrals(x) & SpacesBetweenCells(y) & BetweenCells(z) & LeaksOutOfFluid(x,y,z)) -> RichInWhiteBloodCells(x))", "score": 0}
{"id": "eqasc_validation_285", "prediction": "all x.((Fluid(x) & LeaksOutOfCapillaries(x) & SpacesBetweenCells(x)) -> RichInWhiteBloodCells(x))", "score": 0}
{"id": "eqasc_validation_285", "prediction": "all x.((Fluid(x) & LeaksOutOfCapillaries(x) & CracksIntoSpacesBetweenCells(x)) -> RichInWhiteBloodCells(x))", "score": 0}
{"id": "eqasc_validation_285", "prediction": "all x y.((Fluid(x) & LeaksOutOfCapillariesIntoSpacesBetweenCell(x)) -> RichInWhiteBloodCells(x))", "score": 0}
{"id": "eqasc_validation_285", "prediction": "all x y.((Fluid(x) & LeaksOutOfCapillaries(x) & SpacesBetweenCells(y) & LeaksInto(x,y)) -> RichInWhiteBloodCells(x))", "score": 0}
{"id": "eqasc_validation_285", "prediction": "all x.((Fluid(x) & LeaksOutOfCardioriesIntoSpacesBetweenCells(x)) -> RichInWhiteBloodCells(x))", "score": 0}
{"id": "eqasc_validation_285", "prediction": "all x y z.((Fluid(x) & LeaksOutOfCapillariesIntoSpacesBetweenCells(x) & Capillaries(y) & SpacesBetweenCells(z) & LeaksIntoOfFlowers(x,y,z)) -> RichInWhiteBloodCells(x))", "score": 0}
{"id": "eqasc_validation_285", "prediction": "all x.((Fluid(x) & LeaksOutCapillariesIntoSpacesBetweenCells(x)) -> RichInWhiteBloodCells(x))", "score": 0}
{"id": "eqasc_validation_285", "prediction": "all x y.((Fluid(x) & LeaksOutOfCapillaries(x,y) & SpacesBetweenCells(y)) -> RichInWhiteBloodCells(x))", "score": 0}
{"id": "eqasc_validation_286", "prediction": "all x.((Fluid(x) & RichInProteins(x)) -> LeaksOutOfCapillariesIntoSpacesBetweenCells(x))", "score": 0}
{"id": "eqasc_validation_286", "prediction": "all x y z.((Flour(x) & Fluid(y) & RichInProtein(x) & Capillary(z) & LeaksOut(x,y,z)) -> SpacePropertiesBetweenCells(x))", "score": 0}
{"id": "eqasc_validation_286", "prediction": "all x.((Fluid(x) & RichInProtein(x)) -> LeaksOutOfCapillariesIntoSpacesBetweenCells(x))", "score": 0}
{"id": "eqasc_validation_286", "prediction": "all x y z.((Fluid(x) & RichInProtein(x) & Capillary(y) & Cavapillary(z)) -> LeaksOutIntoSpacesBetweenCells(x))", "score": 0}
{"id": "eqasc_validation_286", "prediction": "all x y z.((Fluid(x) & RichInProtein(x) & Capillaries(y) & SpacesBetweenCells(z)) -> LeaksOutInto(x,y,z))", "score": 0}
{"id": "eqasc_validation_286", "prediction": "all x y z w.((Fluid(x) & RichInProtein(x) & Capillary(y) & Capillaries(z) & SpacesBetweenCells(w)) -> LeaksOutInto(x,y,z,w))", "score": 0}
{"id": "eqasc_validation_286", "prediction": "all x.((Fluid(x) & RichInProteinLoadsOutOfCapillaries(x) & InSpacesBetweenCells(x)) -> LeaksIntoSpacesBetweenCells(x))", "score": 0}
{"id": "eqasc_validation_286", "prediction": "all x y.((Fluid(x) & RichInProtein(x) & LeaksOutOfCapillaries(x,y)) -> InSpacesBetweenCells(y))", "score": 0}
{"id": "eqasc_validation_286", "prediction": "all x y z.((Fluid(x) & RichInProtein(x) & Capillary(y) & SpaceBetweenCells(z)) -> LeaksOutAtRangeInto(x,y,z))", "score": 0}
{"id": "eqasc_validation_286", "prediction": "all x.((Fluid(x) & RichInProtein(x)) -> LeaksOutOfCarpillariesIntoSpacesBetweenCells(x))", "score": 0}
{"id": "eqasc_validation_286", "prediction": "all x y z.((Fluid(x) & RichInProtein(x) & Capillary(y) & SpaceBetweenCells(z)) -> LeaksOutInto(x,y,z))", "score": 0}
{"id": "eqasc_validation_286", "prediction": "all x y.((Fluid(x) & RichInProtein(x)) -> LeaksOutOfCapillaries(x,y))", "score": 0}
{"id": "eqasc_validation_286", "prediction": "all x y z.((Fluid(x) & RichInProteinAntemid(x,y) & Capillary(z)) -> LeaksOutToSpacesBetweenCells(x,z))", "score": 0}
{"id": "eqasc_validation_287", "prediction": "all x y.((Capillary(x) & Artery(y)) -> ConnectstoVines(x,y))", "score": 0}
{"id": "eqasc_validation_287", "prediction": "all x y.((Capillary(x) & Arterial(y)) -> JoinsToVines(x,y))", "score": 0}
{"id": "eqasc_validation_287", "prediction": "all x y.((Capillary(x) & Artery(y)) -> Connects(x,y))", "score": 0}
{"id": "eqasc_validation_287", "prediction": "all x.(Capillary(x) -> ConnectsAntherosclerosis(x))", "score": 0}
{"id": "eqasc_validation_287", "prediction": "all x y.((Cardiox(x) & Artery(y)) -> ConnectsToVines(x,y))", "score": 0}
{"id": "eqasc_validation_287", "prediction": "all x y.((Capillary(x) & Artery(y)) -> ConnectsWithVins(x,y))", "score": 0}
{"id": "eqasc_validation_287", "prediction": "all x y.((Capillary(x) & Artery(y)) -> ConnectsToVins(x,y))", "score": 0}
{"id": "eqasc_validation_287", "prediction": "all x y z.((Capillary(x) & Arterie(y) & Vene(z)) -> ConnectsTo(x,y,z))", "score": 0}
{"id": "eqasc_validation_287", "prediction": "all x y z.((Capillary(x) & Artery(y) & Vein(z)) -> ConnectsTo(x,y,z))", "score": 0}
{"id": "eqasc_validation_287", "prediction": "all x y z.((Capillary(x) & Artery(y) & Vein(z)) -> Connects(x,y,z))", "score": 0}
{"id": "eqasc_validation_287", "prediction": "all x y z.((Capillary(x) & Arterie(y) & Venes(z)) -> Connects(x,y,z))", "score": 0}
{"id": "eqasc_validation_287", "prediction": "all x y z.((Capillary(x) & Arterie(y) & Ven(z)) -> ConnectsTo(x,y,z))", "score": 0}
{"id": "eqasc_validation_287", "prediction": "all x y.((Capillary(x) & Artery(y)) -> ConnectsToVines(x,y))", "score": 0}
{"id": "eqasc_validation_287", "prediction": "all x y z.((Kapillary(x) & Arterie(y) & Vein(z)) -> Connects(x,y,z))", "score": 0}
{"id": "eqasc_validation_288", "prediction": "all x y z.((Lymph(x) & ArteryConnection(y) & Vein(z)) -> LeaksOutOfConnection(x,y,z))", "score": 0}
{"id": "eqasc_validation_288", "prediction": "all x y.((Lymph(x) & ArteryConnection(y)) -> LeaksOut(x,y))", "score": 0}
{"id": "eqasc_validation_288", "prediction": "all x.(Lymph(x) -> LeaksOutOfConnectIONOfArteries(x))", "score": 0}
{"id": "eqasc_validation_288", "prediction": "all x.(Lymph(x) -> LeaksOutOfConnectionOrVins(x))", "score": 0}
{"id": "eqasc_validation_288", "prediction": "all x y z.(Lymph(x) & Arterie(y) & Vein(z) & LeaksOut(x,y,z)) -> LeaksOutOfConnection(x,y,x,z))", "score": -1}
{"id": "eqasc_validation_288", "prediction": "all x.(Lymph(x) -> (LowFluid(x) & LeaksOutOfConnections(x,arteries,veins)))", "score": 0}
{"id": "eqasc_validation_288", "prediction": "all x y z.((Lymph(x) & Arteries(y) & Vein(z)) -> LeaksOutOfConnection(x,y,z))", "score": 0}
{"id": "eqasc_validation_288", "prediction": "all x y.((Lymph(x) & Artery(y)) -> LeaksOut(x,y))", "score": 0}
{"id": "eqasc_validation_288", "prediction": "all x.(Lymph(x) -> LeaksOutOfConnectionOfarteriesToVines(x))", "score": 0}
{"id": "eqasc_validation_288", "prediction": "all x.(Lymph(x) -> LeaksOutInHeads(x))", "score": 0}
{"id": "eqasc_validation_288", "prediction": "all x.(Lymph(x) -> LeaksOutOfConnectionOfArteriesToVines(x))", "score": 0}
{"id": "eqasc_validation_288", "prediction": "all x.(Lymph(x) -> LeaksOutOfArbathingToVinsConnection(x))", "score": 0}
{"id": "eqasc_validation_288", "prediction": "all x.(Lymph(x) -> LeaksOutOfConnectingArteriesToVines(x))", "score": 0}
{"id": "eqasc_validation_288", "prediction": "all x.(Lymph(x) -> (LaisesOutOfConnectionOfArteriesToVins(x)))", "score": 0}
{"id": "eqasc_validation_288", "prediction": "all x y.((Lymph(x) & ArteryConnection(y)) -> LeaksOutOfConnection(x,y))", "score": 0}
{"id": "eqasc_validation_288", "prediction": "all x y.((Lymph(x) & ArteryConnection(y)) -> LeaksOutOfViningConnection(x,y))", "score": 0}
{"id": "eqasc_validation_289", "prediction": "all x.((Antigen(x) & CausesAllergy(x)) -> Allergic(x))", "score": 0}
{"id": "eqasc_validation_289", "prediction": "all x.((Antigen(x) & CausesAllergy(x)) -> Allergen(x))", "score": 0}
{"id": "eqasc_validation_289", "prediction": "all x.((Antigen(x) & CausesAllergy(x)) -> allergen(x))", "score": 0}
{"id": "eqasc_validation_289", "prediction": "all x.((Antigen(x) & CausesAllergics(x)) -> Allergic(x))", "score": 0}
{"id": "eqasc_validation_289", "prediction": "all x.((Antigen(x) & CausesAllergie(x)) -> Allergen(x))", "score": 0}
{"id": "eqasc_validation_289", "prediction": "all x.((Antigen(x) & CausesAllergic(x)) -> Allergic(x))", "score": 0}
{"id": "eqasc_validation_290", "prediction": "all x.(Antigen(x) -> (Protein(x) & ForeignToBody(x)))", "score": 0}
{"id": "eqasc_validation_290", "prediction": "all x.(Antigen(x) -> (ProteinForeignToBody(x)))", "score": 0}
{"id": "eqasc_validation_290", "prediction": "all x y.((Antigen(x) & Body(y)) -> (Protein(x,y) & ForeignTo(x,y)))", "score": 0}
{"id": "eqasc_validation_290", "prediction": "all x.(Antigen(x) -> (ProteinFrequent(x) & ForeignToBody(x)))", "score": 0}
{"id": "eqasc_validation_290", "prediction": "all x.(Antigen(x) -> (Protein(y) & ForeignToBody(y)))", "score": 0}
{"id": "eqasc_validation_290", "prediction": "all x.(Antigen(x) -> ForeignToBody(x))", "score": 0}
{"id": "eqasc_validation_290", "prediction": "all x.(Antigen(x) -> (ProteinForeign(x) & Body(x)))", "score": 0}
{"id": "eqasc_validation_290", "prediction": "all x.(Antigen(x) -> (ProteinFirmToBody(x) & -ProteinFirmToBody(x)))", "score": 0}
{"id": "eqasc_validation_290", "prediction": "all x.(Antigen(x) -> (ProteinForexterne(x,Body) & -SolvedBy(x,Body)))", "score": 0}
{"id": "eqasc_validation_290", "prediction": "all x.(Antigen(x) -> (ProteinFrequentToBody(x) & ForeignToBody(x)))", "score": 0}
{"id": "eqasc_validation_290", "prediction": "all x.(Antigen(x) -> (ProteinSignificant(x) & ForeignToBody(x)))", "score": 0}
{"id": "eqasc_validation_290", "prediction": "all x y z.((Antigen(x) & Protein(y) & Body(z)) -> ForeignTo(x,y,z))", "score": 0}
{"id": "eqasc_validation_291", "prediction": "all x.((FrenchProtein(x) & CausesAllergy(x)) -> Allergic(x))", "score": 0}
{"id": "eqasc_validation_291", "prediction": "all x.((ForeignProtein(x) & CausesAllergy(x)) -> Allergic(x))", "score": 0}
{"id": "eqasc_validation_291", "prediction": "all x.((FreshProtein(x) & CausesAllergy(x)) -> Allergen(x))", "score": 0}
{"id": "eqasc_validation_291", "prediction": "all x.((FrenchProtein(x) & CausesAllergy(x)) -> Allergen(x))", "score": 0}
{"id": "eqasc_validation_291", "prediction": "all x.((FreshProtein(x) & CausesAllergy(x)) -> Allergic(x))", "score": 0}
{"id": "eqasc_validation_291", "prediction": "all x.((FrenchProtein(x) & AllergenicReaction(x)) -> Allergen(x))", "score": 0}
{"id": "eqasc_validation_291", "prediction": "all x.((FrenchProtein(x) & CausesAllergyReaction(x)) -> Allergen(x))", "score": 0}
{"id": "eqasc_validation_291", "prediction": "all x.((ExpandProtein(x) & CausesAllergy(x)) -> Allergen(x))", "score": 0}
{"id": "eqasc_validation_291", "prediction": "all x.((ForeignProtein(x) & CausesAllergenicReaction(x)) -> Allergic(x))", "score": 0}
{"id": "eqasc_validation_291", "prediction": "all x.((ExplicitProtein(x) & CausesAllergy(x)) -> Allergen(x))", "score": 0}
{"id": "eqasc_validation_292", "prediction": "all x y.((AsthmaAttack(x) & Allergie(y)) -> CausedBy(x,y))", "score": 0}
{"id": "eqasc_validation_292", "prediction": "all x.(Asthma(x) -> CausedByAllergies(x))", "score": 0}
{"id": "eqasc_validation_292", "prediction": "all x y.((Asthma(x) & Allergy(y)) -> CausedBy(x,y))", "score": 0}
{"id": "eqasc_validation_292", "prediction": "all x.(AsthmaAngle(x) -> (CausedByAllergies(x)))", "score": 0}
{"id": "eqasc_validation_292", "prediction": "all x y.((Asthma(x) & Allergie(y)) -> CausedBy(x,y))", "score": 0}
{"id": "eqasc_validation_292", "prediction": "all x.(AsthmaAttack(x) -> CausedByAllergies(x))", "score": 0}
{"id": "eqasc_validation_292", "prediction": "all x.(Asthma(x,allergy) -> CausedBy(x,allergy))", "score": 0}
{"id": "eqasc_validation_292", "prediction": "all x.(AsthmaAttack(x) -> (CausedByAllergies(x)))", "score": 0}
{"id": "eqasc_validation_292", "prediction": "All x y.((Asthmaattack(x) & Allergy(y)) -> CausedBy(x,y))", "score": -1}
{"id": "eqasc_validation_292", "prediction": "all x.((AsthmaAttack(x) & Allergic(x)) -> CausedBy(x\"Attack(x\"))", "score": -1}
{"id": "eqasc_validation_293", "prediction": "all x y z.((Allergen(x) & AsthmaAttack(y) & AsthmaAttack(z)) -> Triggers(x,y,z))", "score": 0}
{"id": "eqasc_validation_293", "prediction": "all x y.((Allergen(x) & AsthmaAttack(y)) -> Triggers(x,y))", "score": 0}
{"id": "eqasc_validation_293", "prediction": "all x y.((Allergen(x) & AsthmaAttacks(y)) -> TriggerAttacks(x,y))", "score": 0}
{"id": "eqasc_validation_293", "prediction": "all x.(Allergen(x) -> TriggersAsthmaAttacks(x))", "score": 0}
{"id": "eqasc_validation_293", "prediction": "all x.(Allergen(x) -> TriggersAirAttacks(x))", "score": 0}
{"id": "eqasc_validation_293", "prediction": "all x.(Allergen(x) -> CanTriggerAsthmaAttacks(x))", "score": 0}
{"id": "eqasc_validation_293", "prediction": "all x y.((Allergen(x) & AsthmaAttack(y)) -> CanTrigger(x,y))", "score": 0}
{"id": "eqasc_validation_293", "prediction": "all x y.((Allergen(x) & AsthmaAttack(y)) -> TriggersAttacks(x,y))", "score": 0}
{"id": "eqasc_validation_293", "prediction": "all x y.((Allergen(x) & AsthmaAttacks(y)) -> Triggers(x,y))", "score": 0}
{"id": "eqasc_validation_293", "prediction": "all x y.((Allergen(x) & Asthma(y)) -> TriggersAttacks(x,y))", "score": 0}
{"id": "eqasc_validation_293", "prediction": "all x y.((Asthma(x) & Allergen(y)) -> Trigger(y,AsthmaAttacks))", "score": 0}
{"id": "eqasc_validation_294", "prediction": "all x.(Antibody(x) -> (ProducedToFightAntigens(x)))", "score": 0}
{"id": "eqasc_validation_294", "prediction": "all x.(Antibody(x) -> ProducedToFightAntigens(x))", "score": 0}
{"id": "eqasc_validation_294", "prediction": "all x y.((Antibody(x) & Antigen(y)) -> ProducedToFight(x,y))", "score": 0}
{"id": "eqasc_validation_294", "prediction": "all x y z.((Antibody(x) & Antigen(y) & Antigen(z)) -> ProducedToFight(x,y,z))", "score": 0}
{"id": "eqasc_validation_294", "prediction": "all x.(Antibody(x) -> producedToFightAntigens(x))", "score": 0}
{"id": "eqasc_validation_294", "prediction": "all x.(Antibody(x) -> IsProducedToFightAntigens(x))", "score": 0}
{"id": "eqasc_validation_294", "prediction": "all x.(Antibody(x) -> ProducesToFightAntigens(x))", "score": 0}
{"id": "eqasc_validation_294", "prediction": "all x.(Antibodies(x) -> ProducedToFightAntigens(x))", "score": 0}
{"id": "eqasc_validation_295", "prediction": "all x y.((Antibody(x) & AllergicGen(y)) -> ProducedToFight(x,y))", "score": 0}
{"id": "eqasc_validation_295", "prediction": "all x.(Antibody(x) -> (FightsAllergens(x) & Antibodies(x)))", "score": 0}
{"id": "eqasc_validation_295", "prediction": "all x y.((Antibody(x) & Allergen(y)) -> ProducedToFight(x,y))", "score": 0}
{"id": "eqasc_validation_295", "prediction": "all x.(Antibody(x) -> ProducedToFightAllergens(x))", "score": 0}
{"id": "eqasc_validation_295", "prediction": "all x y z.((Antibody(x) & Allergen(y) & Allergen(z)) -> (ProducedToFight(x,y,z) & Allergen(y,z)))", "score": 0}
{"id": "eqasc_validation_295", "prediction": "all x.(Antibodies(x) -> (AllergenDefense(x) & ProducedToFight(x,allergen)))", "score": 0}
{"id": "eqasc_validation_295", "prediction": "all x.(Antibody(x) -> (ProducedToFightAllergens(x) | ProducedToFightAliens(x)))", "score": 0}
{"id": "eqasc_validation_295", "prediction": "all x y z.((Antibody(x) & allergen(y) & Allergen(z)) -> (ProducedToFight(x,y) & Allergen(z)))", "score": 0}
{"id": "eqasc_validation_295", "prediction": "all x y.((Antibodies(x) & Allergen(y)) -> (ProducedToFight(x,y) | ProducedToFight(x,y)))", "score": 0}
{"id": "eqasc_validation_295", "prediction": "all x.(Antibodies(x) -> (ProducedToFightAllergens(x) & InHerbicides(x)))", "score": 0}
{"id": "eqasc_validation_295", "prediction": "all x.(Antibody(x) -> (ProducedToFight(x,Allergens) & Allergen(x)))", "score": 0}
{"id": "eqasc_validation_295", "prediction": "all x y z.((Antibody(x) & Allergen(y) & Allergen(z)) -> (ProducedToFight(x,y) | ProducedToFight(x,z)))", "score": 0}
{"id": "eqasc_validation_295", "prediction": "all x y z.((Antibody(x) & Allergic(y) & Allergen(z)) -> ProducedToFight(x,y,z))", "score": 0}
{"id": "eqasc_validation_295", "prediction": "all x y z.((Antibody(x) & AllergicGen(y) & Allergen(z)) -> (ProducedToFight(x,y,z) & Produced(x,y)))", "score": 0}
{"id": "eqasc_validation_295", "prediction": "all x y.((Antibody(x) & Allergen(y)) -> DevelopedToFight(x,y))", "score": 0}
{"id": "eqasc_validation_296", "prediction": "all x.((Allergen(x) & Pollen(x) & Dust(x)) -> Common(x))", "score": 0}
{"id": "eqasc_validation_296", "prediction": "all x.((Allergen(x) & Common(x)) -> (Pollen(x) & Dust(x)))", "score": 0}
{"id": "eqasc_validation_296", "prediction": "all x.((CommonAllergen(x) & Pollen(x) & Dust(x)) -> Allergic(x))", "score": 0}
{"id": "eqasc_validation_296", "prediction": "all x.(CommonAllergen(x) -> (Pollen(x) | Dust(x)))", "score": 0}
{"id": "eqasc_validation_296", "prediction": "(all x.(CommonAllergen(x) -> Pollen(x)) & all y.(CommonAllergen(y) -> Dust(y)))", "score": 0}
{"id": "eqasc_validation_296", "prediction": "exists x.(Individual(x) & CommonAllergen(x)) -> (Pollen(x) & Dust(x)))", "score": -1}
{"id": "eqasc_validation_296", "prediction": "all x.((Allergen(x) & Pollens(x)) -> Dusts(x))", "score": 0}
{"id": "eqasc_validation_296", "prediction": "all x.((Allergen(x) & Pollen(x) & Dust(x)) -> Allergen(x))", "score": 0}
{"id": "eqasc_validation_296", "prediction": "exists x.(HasAllergen(x) & Pollen(x) & HasDust(x))", "score": 0}
{"id": "eqasc_validation_296", "prediction": "all x.(CommonAllergen(x) -> (Pollens(x) | Dusts(x)))", "score": 0}
{"id": "eqasc_validation_296", "prediction": "(all x.(Alert(x) -> (Pollen(x) | Dust(x))))", "score": 0}
{"id": "eqasc_validation_296", "prediction": "all x.((Colloid(x) & Dust(x)) -> Allergen(x))", "score": 0}
{"id": "eqasc_validation_296", "prediction": "all x.((Allergen(x) & Pollen(x)) | Dust(x)) -> CommonAllergen(x))", "score": -1}
{"id": "eqasc_validation_297", "prediction": "all x.(Pollen(x) -> (Antigen(x) & CausesAllergy(x)))", "score": 0}
{"id": "eqasc_validation_297", "prediction": "all x.(Pollen(x) -> (Antigen(x) & CanCauseAllergy(x)))", "score": 0}
{"id": "eqasc_validation_297", "prediction": "all x y z.((Pollen(x) & Antigen(y) & Allergy(z)) -> Causes(x,y,z))", "score": 0}
{"id": "eqasc_validation_297", "prediction": "all x.(Pollen(x) -> (Antigen(x) & CanCauseAllergie(x)))", "score": 0}
{"id": "eqasc_validation_297", "prediction": "all x y z.((Pollen(x) & Allergy(y) & Allergy(z)) -> (Antigen(x,y) & CanCauseAllergic(x,z)))", "score": 0}
{"id": "eqasc_validation_297", "prediction": "all x y.((Pollen(x) & Antigen(y)) -> CanCauseAllergy(x,y))", "score": 0}
{"id": "eqasc_validation_297", "prediction": "all x y.((Pollen(x) & Allergy(y)) -> (Antigen(x) & CausesAllergy(x,y)))", "score": 0}
{"id": "eqasc_validation_297", "prediction": "all x y.((Pollen(x) & Allergy(y)) -> Antigen(x))", "score": 0}
{"id": "eqasc_validation_297", "prediction": "all x.(Pollen(x) -> Antigen(x))", "score": 0}
{"id": "eqasc_validation_297", "prediction": "all x y.((Pollen(x) & Allergy(y)) -> Antigen(x,y))", "score": 0}
{"id": "eqasc_validation_298", "prediction": "all x.(Allergen(x) -> CanCauseAnaphylaxis(x))", "score": 0}
{"id": "eqasc_validation_298", "prediction": "exists x.(Allergen(x) & CanCauseAnaphylaxis(x))", "score": 0}
{"id": "eqasc_validation_298", "prediction": "all x.(Allergen(x) -> CausesAnaphylaxis(x))", "score": 0}
{"id": "eqasc_validation_298", "prediction": "exists x.(Allergen(x) & CausesAnaphylaxis(x))", "score": 0}
{"id": "eqasc_validation_298", "prediction": "exists x.(Allergen(x) & CausesAnemyxis(x))", "score": 0}
{"id": "eqasc_validation_299", "prediction": "all x y.((Antigen(x) & CausesCausesAnaphyxia(x)) -> ManyAntigensCausesCausesAnaphyxia(x))", "score": 0}
{"id": "eqasc_validation_299", "prediction": "all x y.((Antigen(x) & CauseAnaphyxia(y)) -> MultipleAntigensCauseAnaphyaxis(x,y))", "score": 0}
{"id": "eqasc_validation_299", "prediction": "all x.(Antigen(x) -> CausesCauseAnaphyaxis(x))", "score": 0}
{"id": "eqasc_validation_299", "prediction": "all x y.((Antigen(x) & CauseCauseAnaphyaxis(y)) -> (CausesCauseAnaphyaxis(x,y) & ManyAntigensCauseAnaphyaxis(x)))", "score": 0}
{"id": "eqasc_validation_299", "prediction": "all x y z.((Antigen(x) & CausesCauseAnaphyaxis(x) & Antigen(y)) -> CausesCauseAnaphyaxis(y,x))", "score": 0}
{"id": "eqasc_validation_299", "prediction": "all x y.((Antigen(x) & CauseTheAnaphyaxis(y)) -> CausesCauseAnaphyaxis(y))", "score": 0}
{"id": "eqasc_validation_299", "prediction": "all x y.((Antigen(x) & Antigen(y)) -> CausesCausesAnaphyaxis(x,y))", "score": 0}
{"id": "eqasc_validation_299", "prediction": "all x.(Antigen(x) -> CausesCausesAnaphyaxis(x))", "score": 0}
{"id": "eqasc_validation_299", "prediction": "all x y.((Antigen(x) & CausesCauseAnaphyaxis(x,y)) -> CausesCauseAnaphyaxis(x,y))", "score": 0}
{"id": "eqasc_validation_299", "prediction": "many antigens cause causecauseAnaphyaxis(x) | Cause(x,antalyzes))", "score": -1}
{"id": "eqasc_validation_299", "prediction": "all x y.((Antigen(x) & Antigen(y)) -> CausesCause-Anaphyaxis(x,y))", "score": -1}
{"id": "eqasc_validation_299", "prediction": "all x.(CatalyzesCauseCauseAnaphyaxis(x) -> (Antigens(x) & CauseCauseAnaphyaxis(x)))", "score": 0}
{"id": "eqasc_validation_300", "prediction": "all x.((Protein(x) & ForeignToBody(x) & CausesAllergies(x)) -> Allergen(x))", "score": 0}
{"id": "eqasc_validation_300", "prediction": "all x.((Protein(x) & ForeignToBody(x) & CausesAllergies(x)) -> Allergic(x))", "score": 0}
{"id": "eqasc_validation_300", "prediction": "all x.((Protein(x) & ForeignToBody(x) & CausesAllergy(x)) -> Allergic(x))", "score": 0}
{"id": "eqasc_validation_300", "prediction": "all x.((Protein(x) & ForeignToBody(x) & CausesAllergies(x)) -> allergen(x))", "score": 0}
{"id": "eqasc_validation_301", "prediction": "all x y z.((Pasteurization(x) & Bacteria(y) & Milk(z)) -> ReducesAlbumInMilk(x,y,z))", "score": 0}
{"id": "eqasc_validation_301", "prediction": "all x.((Pasteurization(x) & ReducesBacteriaInMilk(x)) -> ReducesBacteriaInMilk(x))", "score": 0}
{"id": "eqasc_validation_301", "prediction": "all x y.((Pasteurization(x) & Milk(y)) -> ReducesMilkBacteriaAmount(x,y))", "score": 0}
{"id": "eqasc_validation_301", "prediction": "all x.(Pasteurization(x) -> ReducesBacteriaInMilk(x))", "score": 0}
{"id": "eqasc_validation_301", "prediction": "all x.(Pasteurization(x) -> ReducesSmallBacteria(x))", "score": 0}
{"id": "eqasc_validation_301", "prediction": "all x.(PasteurizationReducesBacteriaAmountInMilk(x) -> HasBacteriaInMilk(x))", "score": 0}
{"id": "eqasc_validation_301", "prediction": "all x y.((Pasteurization(x) & Milk(y)) -> ReducesBacteriaAmount(x,y))", "score": 0}
{"id": "eqasc_validation_301", "prediction": "all x y.((Pasteurization(x) & Milk(y)) -> ReducesBacteriaAddition(x,y))", "score": 0}
{"id": "eqasc_validation_301", "prediction": "all x y.((Preparation(x) & Milk(y)) -> ReducesBacteriaAmountIn(x,y))", "score": 0}
{"id": "eqasc_validation_301", "prediction": "all x y z.((Pasteurization(x) & Bacteria(y) & Milk(z)) -> (ReducesAmountInMilk(x,y) & InMilk(x,z)))", "score": 0}
{"id": "eqasc_validation_301", "prediction": "all x y.((Pasteurization(x) & Milk(y)) -> ReducesTheBacteriaAmount(x,y))", "score": 0}
{"id": "eqasc_validation_301", "prediction": "all x y.((Pasteurization(x) & Milk(y) & ReducesBacteriaAmount(x,y)) -> IsAbundantIn(x,y))", "score": 0}
{"id": "eqasc_validation_302", "prediction": "all x.(MilkProduct(x) -> (MadeIntoIceCream(x) | MadeIntoCherryCake(x) | MadeIntoPuddings(x)))", "score": 0}
{"id": "eqasc_validation_302", "prediction": "all x.(MilkProduct(x) -> (MadeInIceCream(x) | MadeInCheeseCake(x) | MadeIntoPump(x)))", "score": 0}
{"id": "eqasc_validation_302", "prediction": "all x.(MilkProduct(x) -> (MadeIntoIceCream(x) | MadeIntoCareer(x) | MadeIntoPuddings(x)))", "score": 0}
{"id": "eqasc_validation_302", "prediction": "all x.(MilkProduct(x) -> (MadeIntoIceCream(x) | MadeIntoDairyCake(x) | MadeIntoPuffer(x)))", "score": 0}
{"id": "eqasc_validation_302", "prediction": "all x.(MilkProducts(x) -> (InIceCream(x) | InCheeseCake(x) | InPuddings(x)))", "score": 0}
{"id": "eqasc_validation_302", "prediction": "all x.(MilkProduct(x) -> (MadeIntoIceCream(x) | MadeIntoCheeseCake(x) | MadeIntoPuddings(x)))", "score": 0}
{"id": "eqasc_validation_302", "prediction": "all x.(Milk(x) -> (MadeIntoIceCream(x) | MadeIntoCheeseCake(x) | MadeIntoPuddings(x)))", "score": 0}
{"id": "eqasc_validation_302", "prediction": "all x.(MilkProduct(x) -> (MadeIntoIceCream(x) | MadeIntoCheeseCake(x) | MadeIntoPuddough(x)))", "score": 0}
{"id": "eqasc_validation_302", "prediction": "all x.(Milk(x) -> (MadeIntoIceCream(x) | MadeIntoCheeseCake(x) | MadeIntoPloughs(x)))", "score": 0}
{"id": "eqasc_validation_302", "prediction": "all x.(MilkProduct(x) -> (MakesIceCream(x) | MakesCheeseCake(x) | MakesPuddings(x)))", "score": 0}
{"id": "eqasc_validation_302", "prediction": "all x.(MilkProduct(x) -> (MadeIntoIceCream(x) | MadeIntoShakeCake(x) | MadeIntoPuddings(x)))", "score": 0}
{"id": "eqasc_validation_302", "prediction": "all x.(MilkProduct(x) -> (MadeIntoIceCream(x) | MadeIntoEggCake(x) | MadeIntoPloughs(x)))", "score": 0}
{"id": "eqasc_validation_302", "prediction": "all x.(MilkProduct(x) -> (MadeInto(x,IceCream) | MadeInto(x,CheeseCake) | MadeInto(x,Pudding)))", "score": 0}
{"id": "eqasc_validation_303", "prediction": "all x y.((Pasteurization(x) & Bacteria(y) & Pudding(z)) -> ReducesAddress(x,y,z))", "score": 0}
{"id": "eqasc_validation_303", "prediction": "all x y z.((Pasteurization(x) & Bacteria(y) & Pudding(z)) -> ReducesAlbumInOne(x,y))", "score": 0}
{"id": "eqasc_validation_303", "prediction": "all x y.((Pasteurization(x) & Pudding(y) & MadeFrom(y)) -> ReducesBacteriaAmount(x,y))", "score": 0}
{"id": "eqasc_validation_303", "prediction": "all x y.((Pasteurization(x) & Pudding(y)) -> ReducesbacterialAmount(x,y))", "score": 0}
{"id": "eqasc_validation_303", "prediction": "all x y.((Pastaurization(x) & Pudding(y)) -> ReducesBacteriaAmount(x,y))", "score": 0}
{"id": "eqasc_validation_303", "prediction": "all x y z.((Pasteurization(x) & Bacteria(y) & Pudding(z) & MadeFrom(x,y,z)) -> Reduces(x,y,z))", "score": 0}
{"id": "eqasc_validation_303", "prediction": "all x.((Pastorization(x) & BacteriaAmountCreatedIn(x,Pudding)) -> ReducesAmount(x,Creatures))", "score": 0}
{"id": "eqasc_validation_303", "prediction": "all x y.((Pasteurization(x) & Bakterium(y) & Pudding(y)) -> ReducesAmountToMadeFrom(x,y))", "score": 0}
{"id": "eqasc_validation_303", "prediction": "all x.(Pasteurization(x) -> ReducesBacteriaAmountInPupcake(x))", "score": 0}
{"id": "eqasc_validation_303", "prediction": "all x y z.((Pasteurization(x) & Bacteria(y) & Pudding(z)) -> ReducesAmount(x,y))", "score": 0}
{"id": "eqasc_validation_303", "prediction": "all x y z.((Pasteurization(x) & Bacteria(y) & Pudding(z)) -> ReducedAmount(x,y,z))", "score": 0}
{"id": "eqasc_validation_303", "prediction": "all x.(Pastaurization(x) -> ReducesBacteriaInPudding(x))", "score": 0}
{"id": "eqasc_validation_303", "prediction": "all x y z.((Pasturization(x) & Bacteria(y) & Pudding(z)) -> ReducesInResidentialSyringe(x,y))", "score": 0}
{"id": "eqasc_validation_303", "prediction": "all x.(Pasteurization(x) -> ReducesBacteriaAmount(x))", "score": 0}
{"id": "eqasc_validation_303", "prediction": "all x y.((Pasteurization(x) & Bacteria(y)) -> ReducesAbovePuddingMade(x,y))", "score": 0}
{"id": "eqasc_validation_304", "prediction": "(DiscovertByLouisPasteur(Pasteurization) – FrenchScientist(Pasteur))", "score": -1}
{"id": "eqasc_validation_304", "prediction": "all x y z.((Pasteurization(x) & Science(y) & LouisPasteur(z)) -> DiscoveredBy(x,y,z))", "score": 0}
{"id": "eqasc_validation_304", "prediction": "all x y z.((Pasteurization(x) & Scientist(y) & French(z)) -> DiscoveredBy(x,y,z))", "score": 0}
{"id": "eqasc_validation_304", "prediction": "all x y.((Pasteurization(x) & -FrenchScientist(y)) -> DiscoveredBy(x,y))", "score": 0}
{"id": "eqasc_validation_304", "prediction": "all x.(Pasteurization(x) -> DESCRIPTEDBYFrenchScientistLouisPasteur(x))", "score": 0}
{"id": "eqasc_validation_304", "prediction": "(DescendantsPasteurization(pasteurized) -> LouisPasteur(scientist,p.i.))", "score": -1}
{"id": "eqasc_validation_304", "prediction": "-(Cake(Pastorization) & FoundBy(Pastorus,FrenchChemicalist)))", "score": -1}
{"id": "eqasc_validation_304", "prediction": "All x.((Pasteurization(x) & LouisPastre(x)) -> DiscoveredBy(x,y))", "score": -1}
{"id": "eqasc_validation_304", "prediction": "all x y.((Scientist(x) & Pasteur(y) & Unknown(x,y)) -> DiscoveredByMogullio(x))", "score": 0}
{"id": "eqasc_validation_304", "prediction": "(discoveredBy(Pastaurization) & LouisPastarz))", "score": -1}
{"id": "eqasc_validation_304", "prediction": "A FrenchScientist, Louis Pasteur, a découvert cette technologie.", "score": -1}
{"id": "eqasc_validation_304", "prediction": "Louis Pasteur, FrenchScientist, DissertsPasteurization(a) & KnowlesPaseur(d))", "score": -1}
{"id": "eqasc_validation_304", "prediction": "(PatherizationDiscovery(Paris,Louis) & Louis(Patheur))", "score": 0}
{"id": "eqasc_validation_304", "prediction": "(Notes(Pastaurization) -> DiscoveredByFrenchScientistLouisPastaur))", "score": -1}
{"id": "eqasc_validation_304", "prediction": "-FrenchScientist(paveurization)", "score": 0}
{"id": "eqasc_validation_304", "prediction": "L'orignalement Pasteurized (Pasteurization) a été découvert par Louis Pasteur (FrenchScientist) & DiscoveredBy(Louis(Louis) & DiscoveredBy(Louis(X))", "score": -1}
{"id": "eqasc_validation_305", "prediction": "all x y z.((FrenchScientist(x) & Virus(y) & Milk(z)) -> ReducesBacteriaInMilk(x,y,z))", "score": 0}
{"id": "eqasc_validation_305", "prediction": "all x y.((FrenchScientist(x) & FrenchMilk(y)) -> DiscoveredReducesBacteriaAmountInMilk(x,y))", "score": 0}
{"id": "eqasc_validation_305", "prediction": "all x y z w.((FrenchScientist(x) & Bacteria(y) & Milk(z) & ReducesAmountInMilk(x,y,z)) -> Developed(x))", "score": 0}
{"id": "eqasc_validation_305", "prediction": "all x y.((FrenchScientist(x) & FrenchMilk(y)) -> ReducesBacteriaInMilk(y))", "score": 0}
{"id": "eqasc_validation_305", "prediction": "all x y.((FrenchScientist(x) & Scientist(y)) -> ReducesMilkBacteriaAmount(x,y))", "score": 0}
{"id": "eqasc_validation_305", "prediction": "all x y z.((FrenchScientist(x) & BacteriaInMilk(y) & BacteriaInMilk(z)) -> DiscoveredDevelopment(x,y,z))", "score": 0}
{"id": "eqasc_validation_305", "prediction": "all x y.((FrenchScientist(x) & FrenchMilk(y)) -> RéducesBacteriaAmount(x,y))", "score": 0}
{"id": "eqasc_validation_305", "prediction": "all x y.((FrenchScientist(x) & FrenchBetweenDices(y)) -> ReducedBacteriaInMilk(x,y))", "score": 0}
{"id": "eqasc_validation_305", "prediction": "all x y.((FrenchScientist(x) & FrenchMilk(y) & ReducesBacteriaAmountAndMilk(x,y)) -> DiscoveredReducesBacteriaAmountInMilk(x,y))", "score": 0}
{"id": "eqasc_validation_305", "prediction": "all x y z.((FrenchScientist(x) & Bacteria(y) & Milk(z)) -> (ReducesBeta(x,y,z) & InMilk(x)))", "score": 0}
{"id": "eqasc_validation_305", "prediction": "all x y.((FrenchScientist(x) & Mammal(y)) -> ReducedSmallBacteriaInMilk(x,y))", "score": 0}
{"id": "eqasc_validation_305", "prediction": "all x y.((FrenchScientist(x) & Milk(y)) -> (ReduceBacteriaInMilk(x) & InMilk(x,y)))", "score": 0}
{"id": "eqasc_validation_305", "prediction": "all x y z.((FrenchScientist(x) & Bacteria(y) & Milk(z) & ReducesAmount(x,y,z)) -> FoundHowToReduce(x,y,z))", "score": 0}
{"id": "eqasc_validation_305", "prediction": "all x y z.((FrenchScientist(x) & Bacteria(y) & Milk(z)) -> (ReducedAccessToMilk(x,y,z) & ReducedAccessToMilk(x,y)))", "score": 0}
{"id": "eqasc_validation_305", "prediction": "all x y z.((FrenchScientist(x) & Meat(y) & Bacteria(z)) -> (ReducedAmountOfInMilk(x,z) | GeneratesAmount(x,z)))", "score": 0}
{"id": "eqasc_validation_305", "prediction": "all x y.((FrenchScientist(x) & FrenchMilk(y)) -> (ReducesBacteriaAmount(x,y) & InMilk(y,Milk)))", "score": 0}
{"id": "eqasc_validation_306", "prediction": "all x.(Bacteria(x) -> UnicellularOrganism(x))", "score": 0}
{"id": "eqasc_validation_306", "prediction": "all x.(Bacteria(x) -UnicellularOrganism(x))", "score": -1}
{"id": "eqasc_validation_306", "prediction": "(UnicellularOrganism(bacteria)", "score": -1}
{"id": "eqasc_validation_307", "prediction": "all x.(Pasteurization(x) -> ReducesUnicellularOrganismsInMilk(x))", "score": 0}
{"id": "eqasc_validation_307", "prediction": "all x y.((Pasteurization(x) & Milk(y)) -> ReducesUnicellularOrganisms(x,y))", "score": 0}
{"id": "eqasc_validation_307", "prediction": "all x.(Pastorization(x) -> ReducesUnicellularOrganismsInMilk(x))", "score": 0}
{"id": "eqasc_validation_307", "prediction": "all x y.((Pastaurization(x) & Milk(y)) -> ReducesUnicellularOrganisms(x,y))", "score": 0}
{"id": "eqasc_validation_307", "prediction": "all x y z.((Pasteurization(x) & Milk(y) & Organism(z) & In(z)) -> ReducesAlbum(x,y,z))", "score": 0}
{"id": "eqasc_validation_307", "prediction": "all x.(Preparation(x) -> ReducesUnicellularOrganisms(x))", "score": 0}
{"id": "eqasc_validation_307", "prediction": "all x.(Pasteurization(x) -> ReducesUnicellularOrganisms(x))", "score": 0}
{"id": "eqasc_validation_307", "prediction": "all x y z.((Pastorization(x) & UnicellularOrganism(y) & Milk(z)) -> ReducesAmountInMilk(x,y,z))", "score": 0}
{"id": "eqasc_validation_307", "prediction": "all x y.((Pastorization(x) & Milk(y)) -> ReducesUnicellularOrganisms(x,y))", "score": 0}
{"id": "eqasc_validation_307", "prediction": "all x y z.((Pasteurization(x) & Milk(y) & UnicellularOrganism(z)) -> ReducesInMilk(x,z))", "score": 0}
{"id": "eqasc_validation_307", "prediction": "all x.(Pasteurization(x) -> ReducesUnicellularOrganisms(x,milk))", "score": 0}
{"id": "eqasc_validation_308", "prediction": "all x.(Pasteurization(x) -> (DestroysBacteriaInMilk(x) & CausesTuberculosis(x)))", "score": 0}
{"id": "eqasc_validation_308", "prediction": "all x y.((Pasteurization(x) & Bacteria(y) & CausesTuberculosis(y)) -> DisruptsInMilk(x,y))", "score": 0}
{"id": "eqasc_validation_308", "prediction": "all x.(Pasteurization(x) -> (DisposesBacteria(x) & CausesTuberculosis(x)))", "score": 0}
{"id": "eqasc_validation_308", "prediction": "all x y.((Pasteurization(x) & Bacteria(y) & Milk(z) & CausesTuberculosis(y,z)) -> Disrupts(x,y))", "score": 0}
{"id": "eqasc_validation_308", "prediction": "all x y.((Pasteurization(x) & Bacteria(y) & Milk(z)) -> (Demolishes(x,z) & CausesTuberculosis(y,z)))", "score": 0}
{"id": "eqasc_validation_308", "prediction": "all x y.((Pasteurization(x) & Bacteria(y) & Milk(z) & CausesTuberculosis(x,z)) -> Disrupts(x,y,z))", "score": 0}
{"id": "eqasc_validation_308", "prediction": "all x.(Pasteurization(x) -> (DestroysBacteria(x) & CausesTuberculosis(x)))", "score": 0}
{"id": "eqasc_validation_308", "prediction": "all x.(Pastaurization(x) -> DestroysBacteriaInMilkThatCauseTuberculosis(x))", "score": 0}
{"id": "eqasc_validation_308", "prediction": "all x y.((Pasteurization(x) & Bacteria(y) & Milk(tuberculosis)) -> Disposes(x,y))", "score": 0}
{"id": "eqasc_validation_308", "prediction": "all x.(Pasteurization(x) -> DestructionOfBacteriaUnderMilk(x))", "score": 0}
{"id": "eqasc_validation_308", "prediction": "all x y.((Pasteurization(x) & BacteriaInMilk(y) & CausesTuberculosis(y)) -> Discards(x,y))", "score": 0}
{"id": "eqasc_validation_309", "prediction": "all x y.((Pasteurization(x) & Milk(y)) -> ReducesTuberculosisCause(x,y))", "score": 0}
{"id": "eqasc_validation_309", "prediction": "all x y.((Pastorization(x) & Milk(y)) -> ReducesTuberculosisCause(x,y))", "score": 0}
{"id": "eqasc_validation_309", "prediction": "all x.(Pasteurization(x) -> ReducesCauseOfTuberculosisInMilk(x))", "score": 0}
{"id": "eqasc_validation_309", "prediction": "all x y z.((Pasteurization(x) & Tuberculosis(y) & Milk(z) & ReducesCauseIn(x,y,z)) -> ReducsCauseIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_309", "prediction": "all x y z w.((Pasteurization(x) & Tuberculosis(y) & Milk(z) & Milk(w)) -> ReducesCause(x,y,z,w))", "score": 0}
{"id": "eqasc_validation_309", "prediction": "all x.(Pasturization(x) -> ReducesCauseOfTuberculosisInMilk(x))", "score": 0}
{"id": "eqasc_validation_309", "prediction": "all x.(Pasteurization(x) -> ReducesTuberculosisCause(x,milk))", "score": 0}
{"id": "eqasc_validation_309", "prediction": "all x y z.((Pasteurization(x) & TuberculosisCause(y) & Milk(z)) -> ReducesCause(x,y,z))", "score": 0}
{"id": "eqasc_validation_309", "prediction": "all x y z.((Pasteurization(x) & Tuberculosis(y) & Milk(z)) -> ReducesCause(x,y,z))", "score": 0}
{"id": "eqasc_validation_309", "prediction": "all x y.((Pasteurization(x) & Milk(y)) -> ReducesTuberculosisCause(y))", "score": 0}
{"id": "eqasc_validation_309", "prediction": "all x y.((Pasteurization(x) & Milk(y)) -> (ReducesCauseOfTuberculosis(x) & InMilk(x,y)))", "score": 0}
{"id": "eqasc_validation_310", "prediction": "all x y.((Pasteurization(x) & Germs(y)) -> (DevelopedByLouisPastre(x) & KillsByHeating(x,y)))", "score": 0}
{"id": "eqasc_validation_310", "prediction": "all x y.((Pasteurization(x) & Germ(y)) -> (DevelopedByLouisPasteur(x) & KillsByHeating(x,y)))", "score": 0}
{"id": "eqasc_validation_310", "prediction": "all x y z.((Pasteurization(x) & Germ(y) & Heater(z)) -> (DevelopedBy(x,LouiePasteur1) & KillsBy(x,y,z)))", "score": 0}
{"id": "eqasc_validation_310", "prediction": "all x y z.((Pasteurization(x) & Germ(y) & Fever(z)) -> (DevelopedBy(x,y) & LouisPasteur(x)))", "score": 0}
{"id": "eqasc_validation_310", "prediction": "(DevelopedByLouisPasteur(Materialogisation) & KillingGermsByHeating(Materialogization))", "score": 0}
{"id": "eqasc_validation_310", "prediction": "all x y.((Pasteurization(x) & Germ(y)) -> (KillsByHeating(x,y) & LouisPasteur(x)))", "score": 0}
{"id": "eqasc_validation_310", "prediction": "all x y.((Priscillization(x) & GermMutification(y)) -> (DevelopedBy(x,LouisPasteur) & Heats(y)))", "score": 0}
{"id": "eqasc_validation_310", "prediction": "all x y z.((Pasteurization(x) & Germ(y) & Heater(z)) -> (KillsBy(x,y,z)))", "score": 0}
{"id": "eqasc_validation_310", "prediction": "all x y.((Pasteurization(x) & GermKilling(x,y)) -> LouisPaseur(y))", "score": 0}
{"id": "eqasc_validation_310", "prediction": "all x y.((Pastaurization(x) & Germ(y)) -> (DevelopedBy(x,LouisPasteur) & KillsByHeating(x,y)))", "score": 0}
{"id": "eqasc_validation_310", "prediction": "all x y.((Pasteurization(x) & Germs(y) & DevelopedBy(x,Y,LeonardPastre)) -> KillsByHeating(x,y))", "score": 0}
{"id": "eqasc_validation_310", "prediction": "all x y.((Pasteurization(x) | KillingGerms(x)) & LouisPaseur(y)) -> FromProperty(x,y))", "score": -1}
{"id": "eqasc_validation_310", "prediction": "all x y.((Pasteurization(x) & Germ(y) & HeatsBy(x,y)) -> DéveloppedBy(x,y))", "score": 0}
{"id": "eqasc_validation_310", "prediction": "all x y.((Pasteurization(x) & Germ(y)) -> (DevelopedBy(x,luolPasteur) & KillsByHeating(x,y)))", "score": 0}
{"id": "eqasc_validation_310", "prediction": "all x y.((Pasteurization(x) & Germ(y)) -> KillsWithHeating(x,y))", "score": 0}
{"id": "eqasc_validation_310", "prediction": "all x y z.((Pasteurization(x) & Germ(y) & Heater(z)) -> (Kills(x,y) & ProducedBy(x,z)))", "score": 0}
{"id": "eqasc_validation_311", "prediction": "all x y.((Milk(x) & Heats(x,y)) -> ReducesAlbumOfBacteria(x))", "score": 0}
{"id": "eqasc_validation_311", "prediction": "all x y z.((Milk(x) & Milk(y) & Bacteria(z) & Heating(y,z)) -> ReducesAmount(y,z))", "score": 0}
{"id": "eqasc_validation_311", "prediction": "all x.((Milk(x) & Heating(x)) -> ReducesBacteriaAmount(x))", "score": 0}
{"id": "eqasc_validation_311", "prediction": "all x y.((Milk(x) & Melt(y)) -> ReducesAmountOfBacteriaAtLarge(x,y))", "score": 0}
{"id": "eqasc_validation_311", "prediction": "all x.(WarmingMilk(x) -> ReducesAmountOfBacteria(x))", "score": 0}
{"id": "eqasc_validation_311", "prediction": "all x y.((Milk(x) & Heating(y) & ReducesAmountOfBacteria(z)) -> AllergyReduces(x,y,z))", "score": 0}
{"id": "eqasc_validation_311", "prediction": "all x y.((Milk(x) & Milk(y)) -> -Heats(x,y))", "score": 0}
{"id": "eqasc_validation_311", "prediction": "all x.(HeatingMilk(x) -> ReducesAmountOfBacteria(x))", "score": 0}
{"id": "eqasc_validation_311", "prediction": "all x y.((Milk(x) & Heating(y)) -> ReducesAmountOfBacteria(x))", "score": 0}
{"id": "eqasc_validation_311", "prediction": "all x y.((Milk(x) & Warming(x)) -> ReducesAboveBacteriaBacteria(y))", "score": 0}
{"id": "eqasc_validation_311", "prediction": "all x y.((Milk(x) & Temperature(y,z)) -> ReducesAverageOfBacteria(z,x))", "score": 0}
{"id": "eqasc_validation_311", "prediction": "all x y.((WarmingMilk(x) & Bacteria(y)) -> ReducesAmount(x,y))", "score": 0}
{"id": "eqasc_validation_311", "prediction": "all x y z.((Milk(x) & Milk(y) & Bacteria(z) & InHot Milk(x)\" -> ReducesAmountOfBacteria(y,z))", "score": -1}
{"id": "eqasc_validation_311", "prediction": "all x y.(WarmingMilk(x) -> ReducesAmountOfBacteria(y))", "score": 0}
{"id": "eqasc_validation_311", "prediction": "all x.(HeatingMilk(x) -> ReducesBacteriaAmount(x))", "score": 0}
{"id": "eqasc_validation_311", "prediction": "all x.(WarmingMilk(x) -> ReducesBacteriaAmount(x))", "score": 0}
{"id": "eqasc_validation_312", "prediction": "all x.(Cow(x) -> ProducesMilk(x))", "score": 0}
{"id": "eqasc_validation_312", "prediction": "all x.(Choice(x) -> ProducesMilk(x))", "score": 0}
{"id": "eqasc_validation_312", "prediction": "all x.(Chocolate(x) -> ProducesMilk(x))", "score": 0}
{"id": "eqasc_validation_312", "prediction": "all x.(Cow(x) -> ProduceMilk(x))", "score": 0}
{"id": "eqasc_validation_312", "prediction": "all x y.((Cow(x) & Milk(y)) -> Produces(x,y))", "score": 0}
{"id": "eqasc_validation_313", "prediction": "all x y.((Cow(x) & Cow(y)) -> PasteurizationReducesAmountOfBacteria(x,y))", "score": 0}
{"id": "eqasc_validation_313", "prediction": "all x.(Pasteurization(x) -> ReducesBacteriaRate(x))", "score": 0}
{"id": "eqasc_validation_313", "prediction": "all x.(Pasteurization(x) -> ReducesBacteriaInWheat(x,CowsProduce))", "score": 0}
{"id": "eqasc_validation_313", "prediction": "all x y.((Cow(x) & Pasteurization(x)) -> ReducesBacteriaIn(x,y))", "score": 0}
{"id": "eqasc_validation_313", "prediction": "all x.(Pasteurization(x) -> ReducedBacteria(x))", "score": 0}
{"id": "eqasc_validation_313", "prediction": "all x y z.((Pasteurization(x) & Bacteria(y) & Cow(z)) -> Reduces(x,y,z))", "score": 0}
{"id": "eqasc_validation_313", "prediction": "all x y.((Pasteurization(x) & Cow(y)) -> ReducesBacteriaAbundance(x,y))", "score": 0}
{"id": "eqasc_validation_313", "prediction": "all x y.((Cow(x) & Pasteurization(y)) -> ReducesBacteria(x,y))", "score": 0}
{"id": "eqasc_validation_313", "prediction": "all x y z.((Noise(x) & Cow(y) & Bacteriella(z)) -> ReducesAmountInMaterial(x,y,z))", "score": 0}
{"id": "eqasc_validation_313", "prediction": "all x y z.((Cow(x) & Pasteurization(x) & Bacteria(y) & Produces(z,y)) -> ReducesAntibioticAddition(x,y))", "score": 0}
{"id": "eqasc_validation_313", "prediction": "all x y z.((Concentration(x) & Pasteurization(y) & Breed(z)) -> ReducesBacteriaIn(y,z))", "score": 0}
{"id": "eqasc_validation_313", "prediction": "all x y z.((Pasteurization(x) & Bacteria(y) & Cow(z)) -> LowersInWhatsMenu(x,y,z))", "score": 0}
{"id": "eqasc_validation_313", "prediction": "all x y.((Performance(x) & Cow(y)) -> ReducesBacteriaAmount(x,y))", "score": 0}
{"id": "eqasc_validation_313", "prediction": "all x y.((Cow(x) & Pasteurization(y)) -> ReducesBacteriaAbundance(y,x))", "score": 0}
{"id": "eqasc_validation_313", "prediction": "all x y z.((Cow(x) & Pasteurization(y) & Bacteria(z)) -> ReducesAmount(x,z))", "score": 0}
{"id": "eqasc_validation_313", "prediction": "all x y.((Cow(x) & Pasteurization(x,y)) -> ReducesBacteria(x,y))", "score": 0}
{"id": "eqasc_validation_314", "prediction": "all x y z.((Pasteurization(x) & MildHeatingProcess(y) & PathogenicMicroorganism(z)) -> KillsInMilk(y,z))", "score": 0}
{"id": "eqasc_validation_314", "prediction": "all x y z.((Pasturization(x) & MildHeatingProcess(x) & PathogenicMicroorganism(y) & Milk(z)) -> KillsIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_314", "prediction": "all x y.((Pasteurization(x) & Milk(y)) -> KillsMicroorganisms(x,y))", "score": 0}
{"id": "eqasc_validation_314", "prediction": "all x y z.((Pasteurization(x) & (MildHeatingProcess(y) & PathogenicMicroorganism(z)) & KilledInMilk(y,z)) -> Kills(x,y,z))", "score": 0}
{"id": "eqasc_validation_314", "prediction": "all x.(Pasteurization(x) -> (MildHeating(x) & KillsMicroorganisms(x) & InMilk(x)))", "score": 0}
{"id": "eqasc_validation_314", "prediction": "all x y.((Pasteurization(x) & Milk(y)) -> (MildHeatingProcess(x) & KillsPathogenic(x,y)))", "score": 0}
{"id": "eqasc_validation_314", "prediction": "all x.(Pasteurization(x) -> (LullHeatingProcess(x) & KillsMicroorganisms(x,y) & InMilk(y)))", "score": 0}
{"id": "eqasc_validation_314", "prediction": "all x y z.((Pasteurization(x) & Milk(y) & Milk(z)) -> KillsPathogenicMicrolacters(x,y,z))", "score": 0}
{"id": "eqasc_validation_314", "prediction": "all x y.((Pasteurization(x) & Milk(y)) -> (MildHeatingProcess(x) & KillsPathogenicMicroorganisms(x,y)))", "score": 0}
{"id": "eqasc_validation_314", "prediction": "all x.((Pastorization(x) & MildHeatingProcess(x) & KillsPathogenicMicroorganismsInMilk(x)) -> Pasteurization(x))", "score": 0}
{"id": "eqasc_validation_314", "prediction": "all x.(Pasteurisation(x) -> (MildHeating(x) & KillsPathogenicMicroorganisms(x) & Milk(x)))", "score": 0}
{"id": "eqasc_validation_314", "prediction": "all x y.((Pasteurization(x) & MildHeatingProcess(x) & PathogenicMicroorganisms(y) & InMilk(x,y)) -> Kills(x,y))", "score": 0}
{"id": "eqasc_validation_314", "prediction": "all x.(Pastarization(x) -> (MildHeatingProcess(x) & KillsChaoticMicroorganismsInMilk(x)))", "score": 0}
{"id": "eqasc_validation_314", "prediction": "all x.(Pasteurization(x) -> (LightHoppingProcess(x) & KillsPathogenicMicrophages(x)))", "score": 0}
{"id": "eqasc_validation_314", "prediction": "all x.(Pasturization(x) -> (MildHeatingProcess(x) & KillsPathogenicMicroorganisms(x) & InMilk(x)))", "score": 0}
{"id": "eqasc_validation_314", "prediction": "all x.(Parasternization(x) -> (MildHeatingProcess(x) & KillsPathogenicMicroorganisms(x) & InMilk(x)))", "score": 0}
{"id": "eqasc_validation_315", "prediction": "all x.((HeatingProcess(x) & Mild(x)) -> ReducesBacteria(x,milk))", "score": 0}
{"id": "eqasc_validation_315", "prediction": "all x y.((Temperature(x) & Milk(y)) -> ReducesBacteriaIn(x,y))", "score": 0}
{"id": "eqasc_validation_315", "prediction": "all x y.((MildHeatingProcess(x) & Milk(y)) -> ReducesBacteria(x,y))", "score": 0}
{"id": "eqasc_validation_315", "prediction": "all x.(SmoothHeatingProcess(x) -> ReducesBacteriaInMilk(x))", "score": 0}
{"id": "eqasc_validation_315", "prediction": "all x y.((MildHeatingProcess(x) & Bacteria(y)) -> ReducesInMilk(x,y))", "score": 0}
{"id": "eqasc_validation_315", "prediction": "all x.(MildHeatingProcess(x) -> ReducesBacteria(x))", "score": 0}
{"id": "eqasc_validation_315", "prediction": "all x.(MildHeatingProcess(x) -> ReducesBacteriaInMilk(x))", "score": 0}
{"id": "eqasc_validation_315", "prediction": "all x y.((HeatingProcess(x) & Mild(x)) -> ReducesBacteriaInMilk(x,y))", "score": 0}
{"id": "eqasc_validation_315", "prediction": "all x.((HeatingProcess(x) & Mild(x)) -> ReducesBacteriaInMilk(x))", "score": 0}
{"id": "eqasc_validation_315", "prediction": "all x y.((MildHeatingProcess(x) & BacteriaInMilk(y)) -> Reduces(x,y))", "score": 0}
{"id": "eqasc_validation_315", "prediction": "all x.(MildHeating(x) -> ReducesBacteriaInMilk(x))", "score": 0}
{"id": "eqasc_validation_316", "prediction": "all x.((Bacteria(x) & BlueGreenBacteria(x)) -> ProkaryoticCell(x))", "score": 0}
{"id": "eqasc_validation_316", "prediction": "all x.((Bacteria(x) | BlueGreenBacteria(x)) -> ProkaryoticCell(x))", "score": 0}
{"id": "eqasc_validation_316", "prediction": "all x.((Bacteria(x) | BlueGreenBacteria(x)) -> ProkaryoticCells(x))", "score": 0}
{"id": "eqasc_validation_316", "prediction": "(all x.(Bacteria(x) -> ProkaryoticCell(x)) & (BlueGreenBacteria(x) -> ProkaryoticCell(x)))", "score": 0}
{"id": "eqasc_validation_317", "prediction": "all x y.((Pasteurization(x) & Milk(y)) -> ReducesProkaryoticCellsInMilk(x,y))", "score": 0}
{"id": "eqasc_validation_317", "prediction": "all x.(Pasteurization(x) -> (ReducesProkaryoticCellsInMilk(x) & MilkMilkMilk(x)))", "score": 0}
{"id": "eqasc_validation_317", "prediction": "all x y.((Pasteurization(x) & Milk(y) & ReducesProkaryoticCells(x,y)) -> ProkaryoticCellsInMilk(x,y))", "score": 0}
{"id": "eqasc_validation_317", "prediction": "all x.(Pasteurization(x) -> ReducesProkaryoticCellsInMilk(x))", "score": 0}
{"id": "eqasc_validation_317", "prediction": "all x.((Pasteurization(x) & ReducesProkaryoticCells(x)) -> ReducesInMilk(x))", "score": 0}
{"id": "eqasc_validation_317", "prediction": "all x y z.((Pasteurization(x) & Milk(y) & Milk(z)) -> (ReducesProkaryoticCells(x,z) & InMilk(x,y)))", "score": 0}
{"id": "eqasc_validation_317", "prediction": "all x.(ProkaryoticCell(x) -> Pasteurization(x))", "score": 0}
{"id": "eqasc_validation_317", "prediction": "all x y.((Pasteurization(x) & Milk(y)) -> ReducesStructuralProkaryoticCellsInMilk(x,y))", "score": 0}
{"id": "eqasc_validation_317", "prediction": "all x y z.((Pasteurization(x) & ProkaryoticCellProtein(y) & Milk(z)) -> ReducesAmount(x,y,z))", "score": 0}
{"id": "eqasc_validation_317", "prediction": "all x y z.(ProkaryoticCells(x) & Milk(y) & Milk(z)) -> ReducesProkaryoticAmountInMilk(x,z,y))", "score": -1}
{"id": "eqasc_validation_317", "prediction": "all x y.((Pasteurization(x) & Milk(y) & ReducesAmountOfProkaryoticCellsIn(x,y)) -> AmountOfProkaryoticCellsIn(x,y))", "score": 0}
{"id": "eqasc_validation_318", "prediction": "all x.((Heat(x) & Pasteurization(x)) -> ReducesVitaminContent(x))", "score": 0}
{"id": "eqasc_validation_318", "prediction": "all x.(Heat(x) -> ReducesVitaminContent(x))", "score": 0}
{"id": "eqasc_validation_318", "prediction": "all x y.((Heat(x) & Pasteurization(y)) -> ReducesVitaminContent(x))", "score": 0}
{"id": "eqasc_validation_318", "prediction": "all x y z.((Heat(x) & Pasteurization(y) & VitaminContent(z)) -> Reduces(x,y,z))", "score": 0}
{"id": "eqasc_validation_319", "prediction": "all x y z.((Milk(x) & Bacteria(y) & VitaminContent(z)) -> HeatingReducesInMilkToReduce(x,y,z))", "score": 0}
{"id": "eqasc_validation_319", "prediction": "all x.((Heating(x) & ReducesBacteriaAmount(x)) -> ReducesVitaminContent(x))", "score": 0}
{"id": "eqasc_validation_319", "prediction": "all x.(Risk(x) -> ReducesVitaminContent(x))", "score": 0}
{"id": "eqasc_validation_319", "prediction": "all x.((HeatingMilk(x) & ReducesAmountOfBacteria(x)) -> ReducesVitaminContent(x))", "score": 0}
{"id": "eqasc_validation_319", "prediction": "all x.((HeatingMilk(x) & ReducesBacteriaAmount(x)) -> ReducesVitaminContent(x))", "score": 0}
{"id": "eqasc_validation_319", "prediction": "all x.((HeatingMilkInOrganicReduction(x) & BacteriaAmount(x)) -> ReducesVitaminContent(x))", "score": 0}
{"id": "eqasc_validation_319", "prediction": "all x y.((Bacterial(x) & Milk(y) & Heating(x,y) & ReducesSum(x,y)) -> ReducesVitaminContent(x))", "score": 0}
{"id": "eqasc_validation_319", "prediction": "all x y.((Milk(x) & Bacteria(y)) -> HeatsToReduce(x,y))", "score": 0}
{"id": "eqasc_validation_319", "prediction": "all x y.((Milk(x) & Bacteria(x,y)) -> ReducesVitaminContent(x,y))", "score": 0}
{"id": "eqasc_validation_319", "prediction": "all x y.((WarmingMilk(x) & ReducesAmount(x,Y) & Bacteria(y)) -> ReducesVitaminContent(x))", "score": 0}
{"id": "eqasc_validation_319", "prediction": "all x y.((WarmingMilk(x) & Bacteria(y)) -> ReducesVitaminContent(x,y))", "score": 0}
{"id": "eqasc_validation_319", "prediction": "all x.((HeatsMilk(x) & ReducesAmountOfBacteria(x)) -> ReducesVitaminContent(x))", "score": 0}
{"id": "eqasc_validation_319", "prediction": "all x.((HeatingMilk(x) & ReducedAmountOfBacteria(x)) -> ReducesVitaminContent(x))", "score": 0}
{"id": "eqasc_validation_319", "prediction": "-(TemperatingMilk(x) & ReducesBacteriaAmount(x)) -> ReducesVitaminContent(x))", "score": -1}
{"id": "eqasc_validation_320", "prediction": "all x.((Growth(x,Infancy) & Growth(x,Puperhood)) -> Faster(x))", "score": 0}
{"id": "eqasc_validation_320", "prediction": "all x.((Growth(x) & Infancy(x)) -> Faster(x))", "score": 0}
{"id": "eqasc_validation_320", "prediction": "all x y.((Growth(x) & Infancy(x) & Puberty(y)) -> Faster(x,y))", "score": 0}
{"id": "eqasc_validation_320", "prediction": "all x y.((Infancy(x) & Puberty(y)) -> FasterGrowthIn(x,y))", "score": 0}
{"id": "eqasc_validation_320", "prediction": "all x y.((Infancy(x) & Puberty(y)) -> FasterGrowth(x,y))", "score": 4}
{"id": "eqasc_validation_320", "prediction": "all x.((Growth(x) & Infancy(x)) -> Faster(x,Puberty,Pumbery))", "score": 0}
{"id": "eqasc_validation_320", "prediction": "(fasterInfancyGrowth(infancy) & FasterPupiotryGrowth(infancy))", "score": 0}
{"id": "eqasc_validation_320", "prediction": "all x y.((Growth(x) & Infancy(y) & Puberty(y)) -> Faster(x,y))", "score": 0}
{"id": "eqasc_validation_320", "prediction": "all x y.((Growth(x) & Infancy(y) & Puberty(x,y)) -> Faster(x,y))", "score": 0}
{"id": "eqasc_validation_320", "prediction": "all x.((Growth(x) & InFancy(x)) -> Faster(x,Pupiteria))", "score": 0}
{"id": "eqasc_validation_320", "prediction": "all x.((Growth(x) & Infancy(x) & Puberty(x)) -> Faster(x))", "score": 3}
{"id": "eqasc_validation_320", "prediction": "all x y.((Growth(x) & Infancy(y) & Puberty(z)) -> Faster(x,y,z))", "score": 0}
{"id": "eqasc_validation_321", "prediction": "all x.(PhysiologicalStress(x) -> ChangeInGrowthSize(x))", "score": 0}
{"id": "eqasc_validation_321", "prediction": "all x.(PhysiologicalStress(x) -> (RelatedToChangesInGrowthSize(x) & For example[x]))", "score": -1}
{"id": "eqasc_validation_321", "prediction": "all x.(PhysiologicalStress(x) -> (ConstraintsToChangeInGrowthSize(x)))", "score": 0}
{"id": "eqasc_validation_321", "prediction": "all x.(PhysiologicalStress(x) -> (RelationshipSize(x,y) | GrowthSize(y)))", "score": 0}
{"id": "eqasc_validation_321", "prediction": "all x.(PhysiologicalStress(x) -> (RelatesToGrowthSize(x) | ChangesInGrowthSize(x)))", "score": 0}
{"id": "eqasc_validation_321", "prediction": "all x.(PhysiologicalStress(x) -> (RelatesToChangeInGrowthSize(x) & For example(x)))", "score": -1}
{"id": "eqasc_validation_321", "prediction": "all x.(PhysiologicalStress(x) -> (RelatedToChangeSize(x) | ChangeSize(x)))", "score": 0}
{"id": "eqasc_validation_321", "prediction": "all x.(PhysiologicalStress(x) -> (RelatesToGrowthSize(x) & UsefulForGrowthSize(x)))", "score": 0}
{"id": "eqasc_validation_321", "prediction": "all x y z.((PhysiologicalStress(x) & GrowthSizing(y) & GrowthSize(z)) -> RelatesTo(x,y,z))", "score": 0}
{"id": "eqasc_validation_321", "prediction": "all x y.((PhysiologicalStress(x) & GrowthSize(y)) -> (RelatesTo(x,y) & GrowthSize(y)))", "score": 0}
{"id": "eqasc_validation_321", "prediction": "all x.(PhysiologicalStress(x) -> (RelatedToChangesInGrowthSize(x) | -RelatedToChangeSize(x)))", "score": 0}
{"id": "eqasc_validation_321", "prediction": "all x.(PhysiologicalStrain(x) -> (RelatableTo(x,GrowthSize) | RelationshipTo(x,GrowthSize)))", "score": 0}
{"id": "eqasc_validation_321", "prediction": "all x.(PhysiologicalStress(x) -> (RelatesToChangesInGrowthSize(x) & For example(x)))", "score": -1}
{"id": "eqasc_validation_321", "prediction": "all x.(PsychologicalStress(x) -> (RelationsToX(x,growthSize) | -RelationsTo(x,growthSize)))", "score": 0}
{"id": "eqasc_validation_321", "prediction": "all x.(PhysiologicalStreat(x) -> exists y.(GrowthSize(y) & Changes(x,y)))", "score": 0}
{"id": "eqasc_validation_321", "prediction": "all x y.((PhysiologicalStress(x) & (GrowthSizeChange(y) | GrowthSizeChange(z))) -> Relationship(x,y,z))", "score": 0}
{"id": "eqasc_validation_322", "prediction": "all x.(Infancy(x) & Puberty(y) & ChangesDeviceSizeFaster(x, infancy,y))", "score": 0}
{"id": "eqasc_validation_322", "prediction": "all x y.((ChangeInSize(x) & InFancy(x) & Puberty(y)) -> Faster(x,y))", "score": 0}
{"id": "eqasc_validation_322", "prediction": "all x y z.((SizeChange(x) & Infancy(y) & Puberty(z)) -> FasterChangesDuring(x,y,z))", "score": 0}
{"id": "eqasc_validation_322", "prediction": "all x y.((Infancy(x) & Puberty(y)) -> FasterSizeChange(x,y))", "score": 0}
{"id": "eqasc_validation_322", "prediction": "all x y.((ChangeInSize(x) & Infancy(y) & Puberty(z)) -> FasterAncientChangeInSize(x,y,z))", "score": 0}
{"id": "eqasc_validation_322", "prediction": "all x.((Infancy(x) & Puberty(x)) -> FasterSizeChange(x))", "score": 0}
{"id": "eqasc_validation_322", "prediction": "all x y.((SizeChange(x) & Infancy(y) & Puberty(z)) -> FastestChanging(x,y))", "score": 0}
{"id": "eqasc_validation_322", "prediction": "all x.((SizeChange(x) & Infancy(x) & Puberty(x)) -> FasterChange(x,Infancy,Puberty,Puberty))", "score": 0}
{"id": "eqasc_validation_322", "prediction": "all x y.((SizeChange(x) & Infancy(y) & Puberty(y)) -> FasterChangeInSize(x,y))", "score": 0}
{"id": "eqasc_validation_322", "prediction": "all x y.((Infancy(x) & Puberty(y)) -> FasterSizingChange(x,y))", "score": 0}
{"id": "eqasc_validation_322", "prediction": "all x y.((SizeChange(x) & Infancy(y) & Puberty(y)) -> FasterChange(x,y))", "score": 0}
{"id": "eqasc_validation_322", "prediction": "all x y.((ChangeInSize(x) & Infancy(y)) -> Quicker(x,y))", "score": 0}
{"id": "eqasc_validation_322", "prediction": "(ChangesInSize(i) & -ChangesInSize(i) & InInfancy(i) & Puberty(p))", "score": 0}
{"id": "eqasc_validation_322", "prediction": "all x.((SizeChange(x) & InFancy(x) & Puberty(x)) -> FasterChangingSizeChange(x))", "score": 0}
{"id": "eqasc_validation_322", "prediction": "all x.(SizeChange(x) & FasterInInfancy(x) & FasterInPuberty(x))", "score": 0}
{"id": "eqasc_validation_322", "prediction": "all x y.((SizeChange(x) & Infancy(y) & Puberty(z)) -> FasterChangeinSize(x,y,z))", "score": 0}
{"id": "eqasc_validation_323", "prediction": "all x y.((Human(x) & FetalDevelopment(y) & EarlyInfancy(x)) -> ExperiencesFastGrowthRate(x,y))", "score": 0}
{"id": "eqasc_validation_323", "prediction": "all x.(Human(x) -> (Fetal(x) & EarlyInfancy(x)))", "score": 0}
{"id": "eqasc_validation_323", "prediction": "all x.(Human(x) & (FetalDevelopment(x) | EarlyInfancy(x))) -> FastestGrowthRate(x))", "score": -1}
{"id": "eqasc_validation_323", "prediction": "all x.(Human(x) -> (FetalDevelopment(x) & EarlyInfancy(x)))", "score": 0}
{"id": "eqasc_validation_323", "prediction": "all x y.((Human(x) & FetalDevelopment(y) & EarlyInfancy(z)) -> FastestGrowthRate(x,y,z))", "score": 0}
{"id": "eqasc_validation_323", "prediction": "all x.(Human(x) -> ((FetalDevelopment(x) & EarlyInfancy(x)) & FastestGrowthResponse(x)))", "score": 0}
{"id": "eqasc_validation_323", "prediction": "all x y.((Human(x) &FetalDevelopment(y) & EarlyInfancy(z)) -> ExperiencesFastGrowthRate(x,y))", "score": 0}
{"id": "eqasc_validation_323", "prediction": "all x.(Human(x) -> (QuickestGrowthRate(x,FetalDevelopment) & FastestGrowthRate(x,EarlyInfancy)))", "score": 0}
{"id": "eqasc_validation_323", "prediction": "all x y.((Human(x) & FetalDevelopment(y) & EarlyInfancy(x)) -> FastGrowthRate(x))", "score": 0}
{"id": "eqasc_validation_324", "prediction": "all x y.((FetalDevelopment(x) & Puberty(y)) -> FasterGrowth(x,y))", "score": 0}
{"id": "eqasc_validation_324", "prediction": "all x y.((FetalDevelopment(x) & Puberty(y)) -> FasterGrowth(x,y,z))", "score": 0}
{"id": "eqasc_validation_324", "prediction": "all x.(FetalDevelopment(x) -> FasterGrowth(x,Puberty))", "score": 0}
{"id": "eqasc_validation_324", "prediction": "all x.((FetalDevelopment(x) & Puberty(x)) -> FasterGrowth(x))", "score": 0}
{"id": "eqasc_validation_324", "prediction": "all x y.((FetalDevelopment(x) & Puberty(y)) -> GrowthFaster(x,y))", "score": 0}
{"id": "eqasc_validation_324", "prediction": "all x.((Growth(x) & FetalDevelopment(x)) -> Faster(x,puberty))", "score": 0}
{"id": "eqasc_validation_324", "prediction": "all x y.((FetalDevelopment(x) & Puberty(y)) -> FasterGrowth(x,x))", "score": 0}
{"id": "eqasc_validation_324", "prediction": "all x.((FetalDevelopment(x) & Puberty(x)) -> FasterGrowth(x,FetalDevelopment))", "score": 0}
{"id": "eqasc_validation_325", "prediction": "all x.(Adolescence(x) -> (SymbolElement(x) & Puberty(x)))", "score": 2}
{"id": "eqasc_validation_325", "prediction": "all x.((Adolescence(x) & ForMany(x)) -> Puberty(x))", "score": 0}
{"id": "eqasc_validation_325", "prediction": "all x.((Adolescence(x) & Puberty(x)) -> Synonym(x))", "score": 0}
{"id": "eqasc_validation_325", "prediction": "all x.(Adolescence(x) -> (Symbolic(x) & Puberty(x)))", "score": 2}
{"id": "eqasc_validation_325", "prediction": "all x y.((Adolescence(x) & Puberty(y)) -> Synonym(x,y))", "score": 0}
{"id": "eqasc_validation_325", "prediction": "all x.(Adolescence(x) -> Synonym(x,puberty))", "score": 0}
{"id": "eqasc_validation_325", "prediction": "exists x.(Adolescence(x) & Puberty(x))", "score": 0}
{"id": "eqasc_validation_325", "prediction": "all x.(Adolescence(x) -> Puberty(x))", "score": 2}
{"id": "eqasc_validation_325", "prediction": "all x y.((Adolescence(x) & Puberty(y)) -> Simplicity(x,y))", "score": 0}
{"id": "eqasc_validation_325", "prediction": "for many, adolescence (adolescence) -> Puberty(a))", "score": -1}
{"id": "eqasc_validation_325", "prediction": "all x.(Adolescence(x) -> StylizedPupitation(x))", "score": 0}
{"id": "eqasc_validation_325", "prediction": "all x.(Adolescence(x) -> SimultaneousWithPuberty(x))", "score": 0}
{"id": "eqasc_validation_325", "prediction": "many considersadolescence synonymousWithPuberty(-MostPopularSymbolicSymbolics(-Adolescence)(MostPopularSymbolicSymbolicSymbolicSymbolicSymbolicSymbolicSymbolicSymbolicSymbolicSymbolicSymbolicSymbolicSymbolics(-AdolescentSymbolicSymbolicSymbolicSymbolic", "score": -1}
{"id": "eqasc_validation_326", "prediction": "all x y.((Infancy(x) & Adolescence(y)) -> FasterGrowthMore(x,Infancy))", "score": 0}
{"id": "eqasc_validation_326", "prediction": "all x y.((Infancy(x) & Adolescence(y)) -> FasterGrowth(x,y))", "score": 3}
{"id": "eqasc_validation_326", "prediction": "all x y.((Growth(x) & Infancy(y) & Adolescence(y)) -> FasterGrowthWorthThan(x,y))", "score": 0}
{"id": "eqasc_validation_326", "prediction": "all x.((Growth(x) & Infancy(x)) -> FasterAdolescence(x))", "score": 0}
{"id": "eqasc_validation_326", "prediction": "all x y.((Infancy(x) & Adolescence(y)) -> FasterGrowthThan(x,y))", "score": 0}
{"id": "eqasc_validation_326", "prediction": "all x.((Infancy(x) & Adolescence(x)) -> FasterGrowth(x))", "score": 0}
{"id": "eqasc_validation_326", "prediction": "all x y z.((Infancy(x) & Adolescence(y) & Growth(z,in)) -> Faster(x,in))", "score": 0}
{"id": "eqasc_validation_326", "prediction": "all x y.((Infancy(x) & Adolescence(y)) -> GrowthFaster(x,y))", "score": 0}
{"id": "eqasc_validation_326", "prediction": "all x y.((Infancy(x) & Adolescence(y)) -> FasterGrowthThanAdolescence(x,y))", "score": 0}
{"id": "eqasc_validation_326", "prediction": "all x y.((Infancy(x) & Adolescence(y)) -> FasterGrowthCast(x,y))", "score": 0}
{"id": "eqasc_validation_326", "prediction": "all x y.((Infancy(x) & Adolescence(y)) -> FasterGrowthAt(x,y))", "score": 0}
{"id": "eqasc_validation_326", "prediction": "all x y.((Infancy(x) & Adolescence(y)) -> FasterGrowth(x,infancy))", "score": 0}
{"id": "eqasc_validation_326", "prediction": "all x.((Growth(x) & Infancy(x) & Adolescence(x)) -> Faster(x))", "score": 3}
{"id": "eqasc_validation_327", "prediction": "all x y.((Birth(x) & Infancy(y)) -> (YouCanTrustWealth(x,y)))", "score": 0}
{"id": "eqasc_validation_327", "prediction": "all x.((Baby(x) & Infancy(x)) -> LearnsToTrustWorld(x))", "score": 0}
{"id": "eqasc_validation_327", "prediction": "all x.((Baby(x) & Infancy(x)) -> LearnsWhetherToTrustWorld(x))", "score": 0}
{"id": "eqasc_validation_327", "prediction": "all x.(Infancy(x) -> LearnsToTrustWorld(x))", "score": 0}
{"id": "eqasc_validation_327", "prediction": "all x.(Baby(x) -> (Infancy(x) & Learns(x,y)))", "score": 0}
{"id": "eqasc_validation_327", "prediction": "all x.(Infancy(x) -> (BabyInfancy(x) & DecidesToTruthWorld(x)))", "score": 0}
{"id": "eqasc_validation_327", "prediction": "all x.(Infancy(x) -> -BuysWorldDuring(x))", "score": 0}
{"id": "eqasc_validation_327", "prediction": "all x.((Baby(x) & Infancy(x)) -> LearnsToFollow(x,world,folks))", "score": 0}
{"id": "eqasc_validation_327", "prediction": "all x y.((Bird(x) & Infancy(y)) -> LearnsToTrust(x,y))", "score": 0}
{"id": "eqasc_validation_327", "prediction": "all x y.((Baby(x) & Infancy(y)) -> LearnsToTrust(x,y))", "score": 0}
{"id": "eqasc_validation_327", "prediction": "all x.((Bird(x) & Infancy(x)) -> LearnsTrust(x))", "score": 0}
{"id": "eqasc_validation_327", "prediction": "all x.((Baby(x) & Infancy(x)) -> (LearnsToTrust(x,Infancy) & LearnsToTrust(x,Infancy)))", "score": 0}
{"id": "eqasc_validation_328", "prediction": "all x y.((Bird(x) & Puberty(y)) -> GrowsFasterPumberThan(x,y))", "score": 0}
{"id": "eqasc_validation_328", "prediction": "all x.((Baby(x) & Puberty(y)) -> GrowFasterThan(x,y))", "score": 0}
{"id": "eqasc_validation_328", "prediction": "all x y.((Baby(x) & Puberty(y)) -> GrowsFaster(x,y))", "score": 0}
{"id": "eqasc_validation_328", "prediction": "all x y.((Baby(x) & Puberty(y)) -> GrowsFasterThanLater(x,y))", "score": 0}
{"id": "eqasc_validation_328", "prediction": "all x.((Baby(x) & Puberty(y)) -> GrowPositionerFaster(x,y))", "score": 0}
{"id": "eqasc_validation_328", "prediction": "all x y z.((Baby(x) & Puberty(y) & Puberty(z)) -> GrowsFaster(x,y,z))", "score": 0}
{"id": "eqasc_validation_328", "prediction": "all x y.((Baby(x) & Puberty(y)) -> GrowsFasterThanPuberty(x,y))", "score": 0}
{"id": "eqasc_validation_328", "prediction": "all x y.((Baby(x) & Puberty(y)) -> GrowingFasterRightStop-MorePeriods(x,y))", "score": -1}
{"id": "eqasc_validation_328", "prediction": "all x y z.((Baby(x) & Puberty(y) & Puberty(z)) -> GrowsFasterThanDate(x,y,z))", "score": 0}
{"id": "eqasc_validation_328", "prediction": "all x y.((Baby(x) & Puberty(y) & Growth(x,y)) -> GrowsFaster(x,y))", "score": 0}
{"id": "eqasc_validation_328", "prediction": "all x y.((Baby(x) & Puberty(y)) -> (GrowFaster(x,y) & GrowFaster(x,y)))", "score": 0}
{"id": "eqasc_validation_328", "prediction": "all x.(Baby(x) -> (GrowFaster(x) & GarmentFaster(x) & Puberty(x)))", "score": 0}
{"id": "eqasc_validation_328", "prediction": "all x.((Baby(x) & Puberty(y)) -> GrowFasterThanShelves(x,y))", "score": 0}
{"id": "eqasc_validation_328", "prediction": "all x y z.((Baby(x) & Puberty(y) & Puberty(z)) -> (GrowFaster(x,y,z) & GrowFaster(x,y)))", "score": 0}
{"id": "eqasc_validation_328", "prediction": "all x y.((Baby(x) & Puberty(y)) -> GrowsFasterThanThan(x,y))", "score": 0}
{"id": "eqasc_validation_329", "prediction": "all x.((Infancy(x) & Weaning(y)) -> EndsWith(x,y))", "score": 0}
{"id": "eqasc_validation_329", "prediction": "all x.((Infancy(x) & Weaning(x)) -> (EndsAroundYear3)))", "score": -1}
{"id": "eqasc_validation_329", "prediction": "all x.(InfancyEndedsWithWeaning(x) -> Year3(x))", "score": 0}
{"id": "eqasc_validation_329", "prediction": "all x.(Infancy(x) -> Weaning(x))", "score": 0}
{"id": "eqasc_validation_329", "prediction": "all x.(Infancy(x) -> (EndedsWithWeaning(x) & Weaning(x)))", "score": 0}
{"id": "eqasc_validation_329", "prediction": "all x.(InfancyEndsWithWeaning(x) -> WeaningAroundYear3.", "score": -1}
{"id": "eqasc_validation_329", "prediction": "all x y.((Infancy(x) & Weaning(y) & Year(z)) -> EndsWith(x,y,z))", "score": 0}
{"id": "eqasc_validation_329", "prediction": "all x y.((Infancy(x) & Weaning(y) & Year3)) -> EndsWithWaning(x,y))", "score": -1}
{"id": "eqasc_validation_329", "prediction": "all x y.((Infancy(x) & Weaning(y)) -> Year3EndsWith(x,y))", "score": 0}
{"id": "eqasc_validation_329", "prediction": "all x.((Infancy(x) & Weaning(x) & UsuallyAroundYear3)) -> EndsWith(x,y))", "score": -1}
{"id": "eqasc_validation_329", "prediction": "all x.(InfancyEndsWithWeaning(x) -> (InfancyEndsWithWeaning(x) & Year3)))", "score": -1}
{"id": "eqasc_validation_329", "prediction": "all x.((Infancy(x) & Weaning(x)) -> EnoughFaithToDay(x))", "score": 0}
{"id": "eqasc_validation_329", "prediction": "all x.(FloweringEndsWithWeaning(x) -> (InfancyEndsWithWeaning(x) & Year3)))", "score": -1}
{"id": "eqasc_validation_329", "prediction": "all x.(InfancyEndsWithWeaning(x) -> (Year3) & UsuallyAroundYear3)))", "score": -1}
{"id": "eqasc_validation_330", "prediction": "all x y z.((Age(x) & Age(y) & Puberty(z)) -> FasterGrowthFrom0To3(x,y,z))", "score": 0}
{"id": "eqasc_validation_330", "prediction": "all x.((GrowthFasterFrom0To3(x)) -> FasterDuringPupilhood(x))", "score": 0}
{"id": "eqasc_validation_330", "prediction": "all x.((GrowthFasterFrom(x,0,3) & Puberty(x)) -> PubertyFaster(x))", "score": 0}
{"id": "eqasc_validation_330", "prediction": "all x y.((GrowthPeriod(x) & Age(y) & Age(y,x)) -> Faster(x,y))", "score": 0}
{"id": "eqasc_validation_330", "prediction": "all x y.((Growth(x) & Age(y)) -> FasterFrom0To3ThanPuberty(x,y))", "score": 0}
{"id": "eqasc_validation_330", "prediction": "all x y z.((Age(x) & Age(y) & / (Age(z) | Age(z))) & Growth(y) & (Age(x,y) -> AgeDisease(y))) & GrowthStrongerFrom0To3ThanPuberty(y) & PubertyDisease(z))", "score": -1}
{"id": "eqasc_validation_330", "prediction": "all x y.((Growth(x) & Age(y) & Age(y)) -> (FasterFrom0To3(x) & FasterDuringPuberty(x,y)))", "score": 0}
{"id": "eqasc_validation_330", "prediction": "all x y.((Growth(x) & Age(y) & From(x,y)) -> (FasterFrom(x,y) & Age(x,y)))", "score": 0}
{"id": "eqasc_validation_330", "prediction": "all x y.((Age(x) & Age(y) & Age(z) & 0To3(x,z)) -> FasterGrowthStandard(x,z))", "score": 0}
{"id": "eqasc_validation_330", "prediction": "all x y.((Growth(x) & Age(y) & Between(y,z) & Age(z,x)) -> FasterFromTo(x,y))", "score": 0}
{"id": "eqasc_validation_330", "prediction": "all x y z.((Growth(x) & Age(y) & Puberty(z) & From0To3(x,y) & From(x,z)) -> FasterConcordance(x))", "score": 0}
{"id": "eqasc_validation_330", "prediction": "(GrowthFasterFromages0To3(Growth(Growth) & BetterAtPupberty(Growth))", "score": -1}
{"id": "eqasc_validation_330", "prediction": "all x y.((Growth(x) & Age(y,0) & Age(z)) -> FasterFromTo(x,y,0))", "score": 0}
{"id": "eqasc_validation_330", "prediction": "all x y z.((Growth(x) & Age(y) & Puberty(z) & Age(y)) -> FasterFrom0To3(x,y,z))", "score": 0}
{"id": "eqasc_validation_330", "prediction": "all x y z.((Growth(x) & Age(y) & Age(z)) -> (FasterFrom(x,y,z) & Age(z)))", "score": 0}
{"id": "eqasc_validation_330", "prediction": "all x y.((Growth(x) & Age(y) & Age(x,y)) -> FasterAfter(x,y))", "score": 0}
{"id": "eqasc_validation_331", "prediction": "all x.(Patient(x) -> (DeathsInNeonatalPeriod(x) | DeathsInEarlyInfancy(x)))", "score": 0}
{"id": "eqasc_validation_331", "prediction": "all x.(Patient(x) -> (DeathInNeonatal(x) | DeathInEarlyInfancy(x)))", "score": 0}
{"id": "eqasc_validation_331", "prediction": "all x!(Patient(x) & (NeonatalPeriod(x) | EarlyInfancy(x))) -> FrequentlyDies(x))", "score": -1}
{"id": "eqasc_validation_331", "prediction": "all x.(Patient(x) -> (NeonatalPeriod(x) | EarlyInfancy(x)))", "score": 0}
{"id": "eqasc_validation_331", "prediction": "all x.(Patient(x) -> (DeathsInNeonatalPeriod(x) | DeathsInHeadInfancy(x)))", "score": 0}
{"id": "eqasc_validation_331", "prediction": "all x.(Patient(x) -> (DiesIn(x,NeonatalPath) | DiesIn(x,EarlyInfancy)))", "score": 0}
{"id": "eqasc_validation_331", "prediction": "all x.(Patient(x) -> (DiesInNeonatalPeriod(x) | DiesInEarlyInfancy(x)))", "score": 0}
{"id": "eqasc_validation_331", "prediction": "all x.(Patient(x) -> (DeadInNeonatalPeriod(x) | DieInEarlyInfancy(x)))", "score": 0}
{"id": "eqasc_validation_331", "prediction": "all x.(Patient(x) -> (NewbornOrEarlyInfancy(x) | FrustratingDeath(x)))", "score": 0}
{"id": "eqasc_validation_331", "prediction": "all x.(Patient(x) -> (NeonatalPeriod(x) | EarlyInfancyDeath(x)))", "score": 0}
{"id": "eqasc_validation_331", "prediction": "all x.(Patient(x) -> (FrequentDeathInNeonatalPeriod(x) | EarlyInfancy(x)))", "score": 0}
{"id": "eqasc_validation_331", "prediction": "all x.(Patient(x) -> (Lives(x,neonatal) | Lives(x,infancy)))", "score": 0}
{"id": "eqasc_validation_331", "prediction": "all x.(Patient(x) -> ((Dead(x,Neonatal) | EarlyInfancy(x))))", "score": 0}
{"id": "eqasc_validation_331", "prediction": "all x.((Patient(x) & (NeonatalPeriod(x) | EarlyInfancy(x))) -> DiesFrequently(x))", "score": 0}
{"id": "eqasc_validation_332", "prediction": "all x.((Growth(x) & NeonatalPeriod(x)) -> FasterThanPupimetry(x))", "score": 0}
{"id": "eqasc_validation_332", "prediction": "all x y z.((NeonatalPeriod(x) & Puberty(y) & Growth(z)) -> FasterGrowth(x,z))", "score": 0}
{"id": "eqasc_validation_332", "prediction": "all x y z.((NeonatalPeriod(x) & Puberty(y) & NeonatalPeriod(z)) -> FasterGrowthThanPupery(x,y))", "score": 0}
{"id": "eqasc_validation_332", "prediction": "all x y.((NeonatalPeriod(x) & Puberty(y)) -> FasterGrowth(x,y))", "score": 0}
{"id": "eqasc_validation_332", "prediction": "all x y.((NeonatalPeriod(x) & Puberty(y)) -> GrowthFaster(x))", "score": 0}
{"id": "eqasc_validation_332", "prediction": "(FasterGrowthDuringNeonatalPeriod(neonatal) & FasterGrowthDuringPupitery(neonatal))", "score": 0}
{"id": "eqasc_validation_332", "prediction": "all x y z.((NeonatalPeriod(x) & Puberty(y) & Growth(z)) -> Faster(x,z))", "score": 0}
{"id": "eqasc_validation_332", "prediction": "all x y.((NeonatalPeriod(x) & Puberty(y)) -> GrowthFaster(x,y))", "score": 0}
{"id": "eqasc_validation_332", "prediction": "all x y z.((Growth(x) & NeonatalPeriod(y) & Puberty(z)) -> Faster(x,y))", "score": 0}
{"id": "eqasc_validation_332", "prediction": "all x y.((Growth(x,y) & Age(y) & NeonatalPeriod(x) & Pupilhood(x)) -> Fastier(x,y))", "score": 0}
{"id": "eqasc_validation_332", "prediction": "all x y.((Growth(x) & Growth(x,neonatal) & Growth(y) & Puberty)) -> Faster(x,neonatal))", "score": -1}
{"id": "eqasc_validation_332", "prediction": "all x y.((NeonatalPeriod(x) & Puberty(y)) -> FasterGrowthThanPuberty(x,y))", "score": 0}
{"id": "eqasc_validation_332", "prediction": "all x y.((Growth(x) & NeonatalPeriod(x) & Puberty(y)) -> FasterForGrowth(x,y))", "score": 0}
{"id": "eqasc_validation_332", "prediction": "all x y.((Parent(x) & Puberty(y)) -> FasterGrowthBetweenNeonatalPeriodAndPuberty(x,y))", "score": 0}
{"id": "eqasc_validation_333", "prediction": "all x.(Break(x) -> DevelopsDuringPupilhood(x))", "score": 0}
{"id": "eqasc_validation_333", "prediction": "all x.((Breast(x) & Puberty(x)) -> DevelopsSelf(x))", "score": 0}
{"id": "eqasc_validation_333", "prediction": "all x y.((Breast(x) & Puberty(y)) -> DevelopsDuring(x,y))", "score": 0}
{"id": "eqasc_validation_333", "prediction": "all x.(Break(x) -> DevelopsDuringPuberty(x))", "score": 0}
{"id": "eqasc_validation_333", "prediction": "all x.(Break(x) -> DevelopsDuringPumberty(x))", "score": 0}
{"id": "eqasc_validation_333", "prediction": "all x.(Break(x) -> DevelopsDuringPumbry(x))", "score": 0}
{"id": "eqasc_validation_333", "prediction": "all x y.((Body(x) & Puberty(y)) -> DevelopsDuring(x,y))", "score": 0}
{"id": "eqasc_validation_333", "prediction": "all x.(Body(x) -> DevelopmentDuringPuperhood(x))", "score": 0}
{"id": "eqasc_validation_333", "prediction": "all x.(Breath(x) -> DevelopsDuringPuberty(x))", "score": 0}
{"id": "eqasc_validation_333", "prediction": "all x.(Breast(x) -> DevelopsDuringPumbery(x))", "score": 0}
{"id": "eqasc_validation_333", "prediction": "all x y.((Brust(x) & Puberty(y)) -> Develop(x,y))", "score": 0}
{"id": "eqasc_validation_333", "prediction": "all x y.((Breast(x) & Puberty(y)) -> DevelopsDuring.(x,y))", "score": -1}
{"id": "eqasc_validation_333", "prediction": "all x y z.((Breast(x) & Puberty(y) & Puberty(z)) -> DevelopsDuring(x,y,z))", "score": 0}
{"id": "eqasc_validation_334", "prediction": "all x.((GrowthInInfancy(x) & GrowthInBreaks(x)) -> FasterInInfancy (x))", "score": 0}
{"id": "eqasc_validation_334", "prediction": "all x.((Growth(x,Infancy) & -BreaksGrowth(x)) -> FasterInInfancy(x))", "score": 0}
{"id": "eqasc_validation_334", "prediction": "all x y z.((Infancy(x) & Breasts(y) & Growth(z)) -> FasterInInfancyThanInFacility(x,y,z))", "score": 0}
{"id": "eqasc_validation_334", "prediction": "all x y.((Infancy(x) & Breast(y)) -> FasterGrowth(x,y))", "score": 0}
{"id": "eqasc_validation_334", "prediction": "all x y z.((Infancy(x) & Breast(y) & Infancy(z),x)) -> FasterGrowth(x,y))", "score": -1}
{"id": "eqasc_validation_334", "prediction": "all x.((Growth(x) & InFancy(x) & InBreastGrowth(x)) -> Faster(x))", "score": 0}
{"id": "eqasc_validation_334", "prediction": "all x.((Growth(x) & InInfancy(x) & BreastGrowth(x)) -> Faster(x))", "score": 0}
{"id": "eqasc_validation_334", "prediction": "all x.((Growth(x) & InFancy(x) & BreastGrowth(x)) -> Faster(x))", "score": 0}
{"id": "eqasc_validation_334", "prediction": "all x.((Growth(x,infancy) & InFancy(x)) -> Fasterthan(x,breasts,grows))", "score": 0}
{"id": "eqasc_validation_334", "prediction": "all x y.((Infancy(x) & BreastsGrow(y)) -> FasterGrowth(x,y))", "score": 0}
{"id": "eqasc_validation_334", "prediction": "all x y.((Bird(x) & Infancy(y) & -Infancy(x,y)) -> FasterGrowth(x,y))", "score": 0}
{"id": "eqasc_validation_334", "prediction": "(FasterGrowthInInfancy thanFasterGrowthInBreasts(g) & -FasterGrowthInBreasts(g))", "score": -1}
{"id": "eqasc_validation_334", "prediction": "all x y.((Infancy(x) & Breasts(y)) -> FasterGrowth(x,y))", "score": 0}
{"id": "eqasc_validation_334", "prediction": "all x.((GrowthInInfancy(x) & BreastGrowthInInfancy(x)) -> FasterInInfancy(x))", "score": 0}
{"id": "eqasc_validation_334", "prediction": "all x y z.((Infancy(x) & Breast(y) & Infancy(z)) -> FasterGrowthInFaith(x,z))", "score": 0}
{"id": "eqasc_validation_334", "prediction": "all x.((Growth(x) & InInfancy(x) & InHearingBrusts(x)) -> Faster(x))", "score": 0}
{"id": "eqasc_validation_335", "prediction": "all x.(Adolescence(x) -> Puberty(x))", "score": 4}
{"id": "eqasc_validation_335", "prediction": "all x.(Adolescent(x) -> StartsWithPuberty(x))", "score": 0}
{"id": "eqasc_validation_335", "prediction": "all x.(Adolescence(x) -> StartsWithPumbery(x))", "score": 0}
{"id": "eqasc_validation_335", "prediction": "(Pregnant(adolescence) -> Puberty(a))", "score": 0}
{"id": "eqasc_validation_335", "prediction": "all x.(Adolescence(x) -> StartsWithPupitery(x))", "score": 0}
{"id": "eqasc_validation_335", "prediction": "all x.(Adolescence(x) -> Pembroke(x))", "score": 0}
{"id": "eqasc_validation_335", "prediction": "all x.(Adolescent(x) -> Puberty(x))", "score": 0}
{"id": "eqasc_validation_335", "prediction": "all x.((Adolescence(x) & Puberty(x)) -> Adolescence(x))", "score": 0}
{"id": "eqasc_validation_335", "prediction": "all x.((Adolescent(x) & Puberty(x)) -> StartsWith(x,puberty))", "score": 0}
{"id": "eqasc_validation_335", "prediction": "all x y.((Adolescence(x) & Puberty(y)) -> BeginsWith(x,y))", "score": 0}
{"id": "eqasc_validation_335", "prediction": "all x.(Adolescence(x) -> IsRequiredWithPuberty(x))", "score": 0}
{"id": "eqasc_validation_335", "prediction": "all x.(Adolescence(x) -> StartsWithPuberty(x))", "score": 0}
{"id": "eqasc_validation_335", "prediction": "all x.((Adolescence(x) & Puberty(y)) -> Embraces(x,y))", "score": 0}
{"id": "eqasc_validation_335", "prediction": "all x.(Adolescence(x) -> StartsWithPuperhood(x))", "score": 0}
{"id": "eqasc_validation_335", "prediction": "all x.(Adolescence(x) -> EmbracesPupilhood(x))", "score": 0}
{"id": "eqasc_validation_336", "prediction": "all x y.((Infancy(x) & Adolescence(y)) -> FasterGrowth(x,y))", "score": 1}
{"id": "eqasc_validation_336", "prediction": "all x.((Growth(x) & InInfancy(x) & Adolescence(x)) -> Faster(x))", "score": 0}
{"id": "eqasc_validation_336", "prediction": "all x y.((Growth(x) & InFancy(x) & Adolescence(y)) -> Faster(x,y))", "score": 0}
{"id": "eqasc_validation_336", "prediction": "all x y.((Infancy(x) & Adolescence(y)) -> FASTGrowth(x,y))", "score": 0}
{"id": "eqasc_validation_336", "prediction": "all x.((Growth(x) & InInfancy(x) & Adolescence(x)) -> FasterGrowth(x))", "score": 0}
{"id": "eqasc_validation_336", "prediction": "all x y.((Infancy(x) & Adolescence(y)) -> FasterGrowthWithoutAdolescence(x,y))", "score": 0}
{"id": "eqasc_validation_336", "prediction": "all x y.((Infancy(x) & Adolescence(y)) -> FasterGrowthInInfancy(x,y))", "score": 0}
{"id": "eqasc_validation_336", "prediction": "all x.((Growth(x) & InFancy(x)) -> Faster(x))", "score": 0}
{"id": "eqasc_validation_337", "prediction": "all x y.((Seismometer(x) & Earthquake(y)) -> (MeasuresStrength(x,y) | MeasuresMagnitude(x,y)))", "score": 0}
{"id": "eqasc_validation_337", "prediction": "all x y.((Seismometer(x) & Earthquake(y)) -> MeasuresStrengthOrMagnitude(x,y))", "score": 0}
{"id": "eqasc_validation_337", "prediction": "all x y.((Seismometer(x) & SensesStrength(y)) -> MeasuresMagnitudeOfEarthquake(x,y))", "score": 0}
{"id": "eqasc_validation_337", "prediction": "all x y.((Seismometer(x) & (Earthquake(y) | Erdquake(y))) -> MeasuresStrengthOrMajority(x,y))", "score": 0}
{"id": "eqasc_validation_337", "prediction": "all x y.((Seismometer(x) & Earthquake(y)) -> MeasuresSeverityOrMagnitude(x,y))", "score": 0}
{"id": "eqasc_validation_337", "prediction": "all x y.((Seismometer(x) & Earthquake(y)) -> (MeasuresStrengthOrMagnitude(x,y) | MeasuresMassiveness(x,y)))", "score": 0}
{"id": "eqasc_validation_337", "prediction": "all x y.((Seismometer(x) & Earthquake(y) & MeasuresStrengthOrMagnitude(x,y)) -> Seismometer(x))", "score": 0}
{"id": "eqasc_validation_337", "prediction": "all x y.((Seismometer(x) & Earthquake(y)) -> (MeasuresStrengthOrMagnitude(x,y) & MeasuresVariety(x,y)))", "score": 0}
{"id": "eqasc_validation_337", "prediction": "all x.(Seismometer(x) -> MeasuresStrengthOrMagnitudeOfEarthquake(x))", "score": 0}
{"id": "eqasc_validation_337", "prediction": "all x y.((Seismometer(x) & Earthquake(y)) -> MeasuresStrengthOrMagnitudeOrThreat(x,y))", "score": 0}
{"id": "eqasc_validation_337", "prediction": "all x y z.((Seismometer(x) & earthquake(y) & (Strength(z) | Magnitude(z))) -> Measures(x,y))", "score": 0}
{"id": "eqasc_validation_337", "prediction": "all x y z.((Seismometer(x) & Earthquake(y) & Seismometer(z)) -> (MeasuresStabilityOrMagnitude(x,y,z)))", "score": 0}
{"id": "eqasc_validation_337", "prediction": "all x y z.((Seismometer(x) & Earthquake(y) & MeasuresStrengthOrMagnitude(x,z)) -> (HelicopterFortunate(z) | EarthquakeMagnitudeFortunateFortunateFortunateFortunateFortunateFortunateFortunateFortunateFortunateFortunateFortunateFortunateFortunateFortun", "score": -1}
{"id": "eqasc_validation_338", "prediction": "all x.(Seismometer(x) -> ChecksSeismicActivity(x))", "score": 0}
{"id": "eqasc_validation_338", "prediction": "all x y.((Seismometer(x) & SeismicActivity(y)) -> Checks(x,y))", "score": 0}
{"id": "eqasc_validation_338", "prediction": "all x.(Seismometer(x) -> LocatedAtCall(x))", "score": 0}
{"id": "eqasc_validation_338", "prediction": "all x.(Seismometer(x) -> Checks(x,seismicActivity))", "score": 0}
{"id": "eqasc_validation_338", "prediction": "all x.(Seismometer(x) -> ChecksForSeismicActivity(x))", "score": 0}
{"id": "eqasc_validation_339", "prediction": "all x y z.((SeismicActivity(x) & Earthquake(y) & (Strength(z) | Magnitude(z))) -> Tells(x,y))", "score": 0}
{"id": "eqasc_validation_339", "prediction": "all x y.((SeismicActivity(x) & Earthquake(y)) -> (Fortification(x,y) | Magnitude(x,y)))", "score": 0}
{"id": "eqasc_validation_339", "prediction": "all x.(SeismicActivity(x) -> (SpeaksStrengthOrMagnitudeOfEarthquake(x)))", "score": 0}
{"id": "eqasc_validation_339", "prediction": "all x.(SeismicActivity(x) -> (TellsStrength(x) | TellsMagnitude(x)))", "score": 0}
{"id": "eqasc_validation_339", "prediction": "all x.(SeismicActivity(x) -> (StellsStrength(x) | TellsMagnitude(x))))", "score": -1}
{"id": "eqasc_validation_339", "prediction": "all x y.((SeismicActivity(x) & Earthquake(y)) -> (ProvidesStrength(x,y) | TellsMagnitude(x,y)))", "score": 0}
{"id": "eqasc_validation_339", "prediction": "all x.(SeismicActivity(x) -> (TrueEarthquake(x) | GravityEarthquake(x)))", "score": 0}
{"id": "eqasc_validation_339", "prediction": "all x.(SeismicActivity(x) -> (ShowsStrength(x) | TellsMagnitude(x)))", "score": 0}
{"id": "eqasc_validation_339", "prediction": "all x y z.((SeismicActivity(x) & Earthquake(y) & (Strength(z) | Magnitude(z))) -> TellsShows(x,y))", "score": 0}
{"id": "eqasc_validation_339", "prediction": "all x y.((SeismicActivity(x) & Earthquake(y)) -> (IntellsStrength(x,y) | TellsMagnitude(x,y)))", "score": 0}
{"id": "eqasc_validation_339", "prediction": "all x y.((SeismicActivity(x) & Earthquake(y)) -> (TellsStrength(x,y) | TellsMagnitude(x,y)))", "score": 0}
{"id": "eqasc_validation_339", "prediction": "all x y z.((SeismicActivity(x) & Earthquake(y) & (Strength(z) | Magnitude(z))) -> TellsTo(x,y))", "score": 0}
{"id": "eqasc_validation_339", "prediction": "all x y.((SeismicActivity(x) & Earthquake(y)) -> (PreseivesStrength(x,y) | Presence(x,y)))", "score": 0}
{"id": "eqasc_validation_339", "prediction": "all x.(SeismicActivity(x) -> (SignsStrength(x) | TellsMagnitude(x)))", "score": 0}
{"id": "eqasc_validation_339", "prediction": "all x.(SeismicActivity(x) -> (Severity(x) | Magnitude(x)))", "score": 0}
{"id": "eqasc_validation_340", "prediction": "CalibratingHomemadeSeismometer(x) -> InstructionsOnCalibration(x))", "score": -1}
{"id": "eqasc_validation_340", "prediction": "all x.(Calibration(x) -> (HomemadeSeismometer(x) & InstructionsOnCalculating(x,y)))", "score": 0}
{"id": "eqasc_validation_340", "prediction": "Instructions on Calibration(Seismometer)", "score": -1}
{"id": "eqasc_validation_340", "prediction": "all x y.((HiddenSeismometer(x) & Seismometer(y)) -> Calibration(x,y))", "score": 0}
{"id": "eqasc_validation_340", "prediction": "(HasCalculatedHomemadeSeismometer(x) & InstructionsOnCalculating(x))", "score": 0}
{"id": "eqasc_validation_340", "prediction": "all x.(BeachSeismometerCalibration(x) -> (InstructionsOnCalculating(x) & HomemadeSeismometer(x)))", "score": 0}
{"id": "eqasc_validation_340", "prediction": "(InstructionsOnCalculating(Seismometer,Homemade))", "score": 0}
{"id": "eqasc_validation_340", "prediction": "all x y.((HomemadeSeismometer(x) & HomemadeSeismometer(y)) -> Calibration(x,y))", "score": 0}
{"id": "eqasc_validation_340", "prediction": "all x.((HomemadeSeismometer(x) & Calibration(x)) -> InstructionsOnCalculating(x,y))", "score": 0}
{"id": "eqasc_validation_340", "prediction": "(Products(Seismometer) & Calibration(Seismometer))", "score": 0}
{"id": "eqasc_validation_340", "prediction": "all x.(SeismometerCalibration(x) -> InstructionsOnCalculating(x))", "score": 0}
{"id": "eqasc_validation_340", "prediction": "all x.((SeismometerCalibration(x) & Kit(x)) -> Calibrise(x))", "score": 0}
{"id": "eqasc_validation_340", "prediction": "all x.((HomemadeSeismometer(x) & CanCalculate(x)) -> CalibrationInformations(x))", "score": 0}
{"id": "eqasc_validation_340", "prediction": "(GeneralDescription ofSeismometer(Calibration) & DetailedInstructionsHowToCalculate(Seismometer(Calibration))", "score": -1}
{"id": "eqasc_validation_340", "prediction": "all x.((SeismometerCalibration(x) & CalibrationOfHomemade(x)) -> InstructionsOn(x,y))", "score": 0}
{"id": "eqasc_validation_340", "prediction": "all x.(HomemadeSeismometer(x) -> Calibration(x))", "score": 0}
{"id": "eqasc_validation_341", "prediction": "all x y.((Instrument(x) & Earthquake(y)) -> Calibrated(x,y))", "score": 0}
{"id": "eqasc_validation_341", "prediction": "all x.((Instrument(x) & Calibrated(x)) -> MeasuresGravityOfEarthquake(x))", "score": 0}
{"id": "eqasc_validation_341", "prediction": "all x y z.((Instrument(x) & Earthquake(y) & Calibre(z) & MeasureMagnitude(x,y)) -> CanMeterMagnitude(x,y))", "score": 0}
{"id": "eqasc_validation_341", "prediction": "all x.((Instrument(x) & MappingEarthquake(x)) -> Calibred(x))", "score": 0}
{"id": "eqasc_validation_341", "prediction": "all x.((Instrument(x) & Caliburized(x)) -> MeasuresMagnitudeOfEarthquake(x))", "score": 0}
{"id": "eqasc_validation_341", "prediction": "all x y.((Instrument(x) & Earthquake(y)) -> CalibratedBeforeMeasurement(x,y))", "score": 0}
{"id": "eqasc_validation_341", "prediction": "all x.((Instrument(x) & -Calibrated(x)) -> MeasuresMagnitude(x))", "score": 0}
{"id": "eqasc_validation_341", "prediction": "all x.((Instrument(x) & Calibred(x)) -> MeasuremagnitudeOfEarthquake(x))", "score": 0}
{"id": "eqasc_validation_341", "prediction": "all x.((Instrument(x) & Calculated(x)) -> MeasuresMagnitudeOfEarthquake(x))", "score": 0}
{"id": "eqasc_validation_341", "prediction": "all x y.((Instrument(x) & Earthquake(y)) -> Calibrorated(x,y))", "score": 0}
{"id": "eqasc_validation_341", "prediction": "all x y.((Instrument(x) & Earthquake(y) & Calculated(x)) -> EasilyMeasuresMagnitude(x,y))", "score": 0}
{"id": "eqasc_validation_341", "prediction": "all x y.((Instrument(x) & Earthquake(y) & Calmable(x)) -> MeasuresMagnitude(x,y))", "score": 0}
{"id": "eqasc_validation_341", "prediction": "all x y.((Instrument(x) & Earthquake(y)) -> MustBeCalculated(x))", "score": 0}
{"id": "eqasc_validation_341", "prediction": "all x y.((Instrument(x) & Earthquake(y)) -> Caloriated(x,y))", "score": 0}
{"id": "eqasc_validation_341", "prediction": "all x y.((Instrument(x) & Earthquake(y)) -> CAMPULated(x,y))", "score": 0}
{"id": "eqasc_validation_341", "prediction": "all x y.((Instrument(x) & Earthquake(y)) -> Calibred(x,y))", "score": 0}
{"id": "eqasc_validation_342", "prediction": "all x y.((Earthquake(x) & Scale(y)) -> MeasuredOn(x,y))", "score": 0}
{"id": "eqasc_validation_342", "prediction": "all x.(Earthquake(x) -> (MeasuredOnScale(x,1,10)))", "score": 0}
{"id": "eqasc_validation_342", "prediction": "all x y.((Earthquake(x) & ScaleOf(y,1)) -> MeasurableOn(x,y))", "score": 0}
{"id": "eqasc_validation_342", "prediction": "all x.(Earthquake(x) -> MeasuredOnScaleFrom1To10(x))", "score": 0}
{"id": "eqasc_validation_342", "prediction": "all x.(Earthquake(x) -> MeasuredOnScalefrom1To10(x))", "score": 0}
{"id": "eqasc_validation_342", "prediction": "all x y z.((Earthquake(x) & Scale(y) & Scale(z)) -> MeasuredOn(x,y,z))", "score": 0}
{"id": "eqasc_validation_342", "prediction": "all x.(Earthquake(x) -> MeasuringScalesAt(x,1))", "score": 0}
{"id": "eqasc_validation_342", "prediction": "all x y.((Earthquake(x) & Scale(y,x) & Scale(z)) -> MaturedOnScale(x,y,z))", "score": 0}
{"id": "eqasc_validation_342", "prediction": "all x.((Earthquake(x) & ScaleOf(x,1) & ScaleOf(x,10)) -> MeasuredOn(x,1,10))", "score": 0}
{"id": "eqasc_validation_342", "prediction": "all x.(Earthquake(x) -> (MeasuredOnScale(x,1) & MeasuredOnScale(x,10)))", "score": 0}
{"id": "eqasc_validation_342", "prediction": "all x y.((Earthquake(x) & Scale(y)) -> MeasuredOnScale(x,y))", "score": 0}
{"id": "eqasc_validation_342", "prediction": "all x y.((Earthquake(x) & ScaleOf(y,1) & ScaleOf(x,10)) -> MeasuredOn(x,y))", "score": 0}
{"id": "eqasc_validation_342", "prediction": "all x.(Earthquake(x) -> MeasuredOnScaleOf(x,number,s,1))", "score": 0}
{"id": "eqasc_validation_342", "prediction": "all x.(Earthquake(x) -> MeasuringScale(x,1) - MeasuringScale(x,10)))", "score": -1}
{"id": "eqasc_validation_342", "prediction": "all x y.((Earthquake(x) & Scale(y) & MeasuredOn(x,y)) -> MeasuredOn(x,y))", "score": 0}
{"id": "eqasc_validation_343", "prediction": "all x y.((Seismometer(x) & Seismometer(y)) -> GoEight(x,y))", "score": 0}
{"id": "eqasc_validation_343", "prediction": "all x.(Seismometer(x) -> (CanGiveSeismometerUpTo(x,10)))", "score": 0}
{"id": "eqasc_validation_343", "prediction": "all x.(Seismometer(x) -> GoesUpToSeven(x))", "score": 0}
{"id": "eqasc_validation_343", "prediction": "all x.(Seismometer(x) -> GoesUpTo10Seismometers(x))", "score": 0}
{"id": "eqasc_validation_343", "prediction": "all x.(Seismometer(x) -> (GoesUpTo10Aid(x) & ScalesUpTo100Engages(x)))", "score": 0}
{"id": "eqasc_validation_343", "prediction": "all x.(Seismometer(x) -> GoesUpTo10(x).)", "score": -1}
{"id": "eqasc_validation_343", "prediction": "all x.(Seismometer(x) -> GoesUpTo(x,10))", "score": 0}
{"id": "eqasc_validation_343", "prediction": "all x.(Seismometer(x) -> GoesUpTo10(x))", "score": 0}
{"id": "eqasc_validation_343", "prediction": "all x.(Seismometer(x) -> GoEarTo(x,10))", "score": 0}
{"id": "eqasc_validation_343", "prediction": "all x y.((Seismometer(x) & Seismometer(y)) -> GoEverTo(x,y))", "score": 0}
{"id": "eqasc_validation_343", "prediction": "all x y.((Seismometer(x) & Seismometer(y)) -> GoesUpTo(x,y))", "score": 0}
{"id": "eqasc_validation_344", "prediction": "all x.(Earthquake(x) -> CausedByFaultMovement(x))", "score": 0}
{"id": "eqasc_validation_344", "prediction": "all x y.((Earthquake(x) & FaultMovement(y)) -> CausedBy(x,y))", "score": 0}
{"id": "eqasc_validation_344", "prediction": "all x.(Earthquake(x) -> CensuredByFaultMovement(x))", "score": 0}
{"id": "eqasc_validation_345", "prediction": "all x.(Seismometer(x) -> MeasuresStrengthOrMagnitudeOfFaultMovement(x))", "score": 0}
{"id": "eqasc_validation_345", "prediction": "all x.(Seismometer(x) -> (MeasuresStrength(x) | MeasuresMagnitude(x)) & CausedByFaultMovement(x)))", "score": -1}
{"id": "eqasc_validation_345", "prediction": "all x.(Seismometer(x) -> MeasuresStrengthOrMagnitudeOfFaultMovementOfFaultMovement(x))", "score": 0}
{"id": "eqasc_validation_345", "prediction": "all x y z.((Seismometer(x) & (FaultMovement(y) | FaultMovement(z))) -> MeasuresStrengthOrMagnitudeOfPatternOrFaultMovementOf(x,y,z))", "score": 0}
{"id": "eqasc_validation_345", "prediction": "all x.(Seismometer(x) -> (MeasuresStrengthOrMagnitude(x) & CausesFaultMovement(x)))", "score": 0}
{"id": "eqasc_validation_345", "prediction": "all x y.((Seismometer(x) & CausedByFaultMovement(y)) -> MeasuresStrengthOrMagnitudeOf(x,y))", "score": 0}
{"id": "eqasc_validation_345", "prediction": "all x y.((Seismometer(x) & Person(y)) -> MeasuresStrengthOrMagnitude(x,y))", "score": 0}
{"id": "eqasc_validation_345", "prediction": "all x y z.((Seismometer(x) & (FaultMovement(y) | FaultMovement(z))) -> MeasuresStrengthOrMagnitudeOfOrGirthOfOrGirthOfOrGirthOf(x,y,z))", "score": 0}
{"id": "eqasc_validation_345", "prediction": "all x.(Seismometer(x) -> (MeasuresStrength(x) | MeasuresMagnitude(x)))", "score": 0}
{"id": "eqasc_validation_345", "prediction": "all x y z.((Seismometer(x) & MeasuresStrengthOrMagnitude(x,y) & CausedByFaultMovement(z)) -> MeasuresPurityOrStrengthOfFault(x,z))", "score": 0}
{"id": "eqasc_validation_345", "prediction": "all x y.((Seismometer(x) & StrainInFaultMovement(y)) -> MeasuresMagnitudeOrStrengthOfCause(x,y))", "score": 0}
{"id": "eqasc_validation_345", "prediction": "all x.(Seismometer(x) -> MeasureStabilityOrMagnitudeOfFault(x))", "score": 0}
{"id": "eqasc_validation_345", "prediction": "all x y.((Seismometer(x) & (FaultMovement(y) | PainMovement(y))) -> MeasuresStrengthOrMagnitude(x,y))", "score": 0}
{"id": "eqasc_validation_345", "prediction": "all x y.((Seismometer(x) & FaultMovement(y)) -> (MeasuresStrengthOrMagnitudeOf(x,y) & CausedBy(x,y)))", "score": 0}
{"id": "eqasc_validation_345", "prediction": "all x y z.((Seismometer(x) & FissureMovement(y) & StrengthOrMagnitude(z)) -> Measures(x,y,z))", "score": 0}
{"id": "eqasc_validation_346", "prediction": "all x.((RiverScale(x) &DevelopedIn1935(x) & StandardSeismometer(x) & MaximumAmplifierShaking(x)) -> MeasuresEarthquake(x))", "score": 0}
{"id": "eqasc_validation_346", "prediction": "all x y.((GrinderScale(x) & DevelopedIn(x,1935)) -> (MeasuresEarthquake(x) & MeasuresMaxAmplitudeForShaking(x)))", "score": 0}
{"id": "eqasc_validation_346", "prediction": "all x.(RiverScale(x) ->,DevelopedIn(x,1935) & MeasuresEarthquakeUsingSeismometer(x) & MeasuresMaxHabitatOfShaking(x))", "score": -1}
{"id": "eqasc_validation_346", "prediction": "all x y.((RiserScale(x) & CreatedIn(x,1935)) -> MeasuresEarthquake(x,y))", "score": 0}
{"id": "eqasc_validation_346", "prediction": "all x y.((RicherScale(x) & InDevelopedIn(x, 1935) & Seismometer(y) & MeasuresMaxAmplitude(x)) -> MeasuresEarthquake(x))", "score": 0}
{"id": "eqasc_validation_346", "prediction": "all x y.((RiverScale(x) & DevelopmentedIn 1935(x)) -> MeasuresEarthquakeUsingSeismometerToMeasureMaxAmperage(x,y))", "score": -1}
{"id": "eqasc_validation_346", "prediction": "all x.((RiverScale(x) & developed in 1935(x)) -> MeasuresEarthquakeUsingSeismometer(x))", "score": -1}
{"id": "eqasc_validation_346", "prediction": "(DevelopedIn 1935, RichterScale) & MeasuresEarthquake (Seismometer) & MeasuresmaxImpactOfShaking(RinkelScale)))", "score": -1}
{"id": "eqasc_validation_346", "prediction": "all x.(JürgenScale(x) -> (DevelopedIn1935(x) & MeasuresEarthquake(x) & UsesSeismometer(x) & MeasuresMaxAmplitudeOfShaking(x)))", "score": 0}
{"id": "eqasc_validation_346", "prediction": "all x.((RenérgicScale(x) & DevelopedIn1935)) -> (MeasuresEarthquakeUsingSeismometer(x) & MeasuresMaxAmplitudeOfShaking(x)))", "score": -1}
{"id": "eqasc_validation_346", "prediction": "all x y.((RichterScale(x) & InDevelopedIn(x,y) & 1935) -> MeasuresEarthquakeByUsingSeismometer(x,y))", "score": 0}
{"id": "eqasc_validation_346", "prediction": "all x y.((RiverScale(x) & DevelopedIn 1935(x) & StandardSeismometer(y) & MeasuresMaxAmplitudeOfShaking(x)) -> EarthquakeMeasure(x,y))", "score": -1}
{"id": "eqasc_validation_346", "prediction": "all x.(RiverScale(x) -> (DevelopedIn(x, 1935) & MeasuresEarthquake(x) & UsesSeismometer(x) & MeasuresMaxAmplitudeOfShaking(x)))", "score": 0}
{"id": "eqasc_validation_346", "prediction": "all x y.((RichterScale(x) & DevelopedIn(x, 1935) & Seismometer(y) & MeasuresMaxAmplitude(x,y)) -> MeasuresEarthquake(x))", "score": 0}
{"id": "eqasc_validation_346", "prediction": "DevelopingIn1935, RichterScale measuresEarthquake(r) & usessSeismometer(r) & MeasuresMaxAmplitude(r))", "score": -1}
{"id": "eqasc_validation_346", "prediction": "all x.(ErirdrimerScave(x) -> (DevelopedIn 1935(x) & MeasuresEarthquakeUsingSeismometer(x) & MeasuresMaxAmperageOfShaking(x)))", "score": -1}
{"id": "eqasc_validation_347", "prediction": "all x y.((Earthquake(x) & ShakingShaking(y)) -> MaximumAmplitude(x,y))", "score": 0}
{"id": "eqasc_validation_347", "prediction": "all x.(Erasmus(x) -> (MaxAmplitudeOfShaking(x) & MaximumAmphitudeOfShaking(x)))", "score": 0}
{"id": "eqasc_validation_347", "prediction": "all x y.((Earthquake(x) & MaximumAmplitude(y)) -> StrengthRefersTo(x,y))", "score": 0}
{"id": "eqasc_validation_347", "prediction": "all x.((Earthquake(x) & MaximumAmplitude(x)) -> StrengthRefers(x))", "score": 0}
{"id": "eqasc_validation_347", "prediction": "all x.(Earthquake(x) -> TheStrengthOf(x,maxamplitude,shaking))", "score": 0}
{"id": "eqasc_validation_347", "prediction": "all x y z.((Earthquake(x) & Strength(y) & Shaking(z) & MaximumAmerisource(z) & MaximumAmplifier(z)) -> MaximumAmplitude(y,x,z))", "score": 0}
{"id": "eqasc_validation_347", "prediction": "all x y.((Earthquake(x) & Strength(y)) -> MaximumAmplificationOfShaking(x,y))", "score": 0}
{"id": "eqasc_validation_347", "prediction": "all x.(EarthquakeStrength(x) -> MaximumAmplifyOfShaking(x))", "score": 0}
{"id": "eqasc_validation_347", "prediction": "all x y.((Earthquake(x) & Spectator(y)) -> MaximumAmplitude(x,y))", "score": 0}
{"id": "eqasc_validation_347", "prediction": "all x y.((Earthquake(x) & Shaking(y)) -> MaximumAmplitude(x,y))", "score": 0}
{"id": "eqasc_validation_347", "prediction": "all x.(EarthquakeStrength(x) -> MaximumAmplitude(x))", "score": 0}
{"id": "eqasc_validation_347", "prediction": "all x) -> (EarthquakeStrength(x,earthquake) & MaximumAmplitude(x,shaking)))", "score": -1}
{"id": "eqasc_validation_347", "prediction": "all x y.((Earthquake(x) & MaximumAamplitude(y)) -> Strongest(x,y))", "score": 0}
{"id": "eqasc_validation_347", "prediction": "all x y.((Earthquake(x) & MaximumAmplitude(y)) -> StrengthLike(x,y))", "score": 0}
{"id": "eqasc_validation_347", "prediction": "all x.((Earthquake(x) & MaximumAmplitude(x)) -> Strength(x))", "score": 0}
{"id": "eqasc_validation_348", "prediction": "all x.(RiverScale(x) -> (ProvidesMajority(x) | IncineratedStrength(x)))", "score": 0}
{"id": "eqasc_validation_348", "prediction": "all x.(RiverScale(x) -> (ContributesOnMoreMajority(x) | InherentStrength(x)))", "score": 0}
{"id": "eqasc_validation_348", "prediction": "all x.(RiverScale(x) -> ProvidesInformationOnMagnitudeOrInherentStrength(x))", "score": 0}
{"id": "eqasc_validation_348", "prediction": "all x.(RiverScale(x) -> (Price(x,y) & (Menge(y) | IncuredStrength(y)))))", "score": -1}
{"id": "eqasc_validation_348", "prediction": "(All x.(RichterScale(x) -> (ProvidesInformationOnMagnitude(x) | InherentStrength(x))))", "score": -1}
{"id": "eqasc_validation_348", "prediction": "all x y z.((RiverScale(x) & Earthquake(y) & Magnitude(z)) | InherentStrength(z))) -> ProvidesInformation(x,y))", "score": -1}
{"id": "eqasc_validation_348", "prediction": "all x.(RiverScale(x) -> (exists y.(Earthquake(y) & Matricity(x,y)) | InherentStrength(x,y))))", "score": -1}
{"id": "eqasc_validation_348", "prediction": "all x.(RiverScale(x) -> (ProvidesInformationOnMagnitude(x) | IntrinsicStrength(x)))", "score": 0}
{"id": "eqasc_validation_348", "prediction": "all x.(RiverScale(x) -> (DescribesMagnitude(x) | ProvidesInherentStrength(x)))", "score": 0}
{"id": "eqasc_validation_348", "prediction": "all x y.((RiverScale(x) & Earthquake(y)) -> ProvidesInformationOn(x,y))", "score": 0}
{"id": "eqasc_validation_348", "prediction": "all x.(RiverScale(x) -> (exists y.(Earthquake(y) & MeasuresInherentStrength(x,y)) & ProvidesInformation(x,y)))", "score": 0}
{"id": "eqasc_validation_348", "prediction": "all x.(JürgenScale(x) -> (PresentsMajority(x) | ProvidesInertiaStrength(x)))", "score": 0}
{"id": "eqasc_validation_348", "prediction": "all x.(Gerhard RichterScale(x) -> (ProvidesInformationOnMagnitude(x) | InherentStrength(x)))", "score": -1}
{"id": "eqasc_validation_348", "prediction": "all x.(JürgenScale(x) -> (ProvidesInformationOnMagnitude(x) | InherentStrength(x)))", "score": 0}
{"id": "eqasc_validation_348", "prediction": "all x.(RichmondScale(x) -> (InformationOnMagnitude(x) | InherentStrength(x)))", "score": 0}
{"id": "eqasc_validation_348", "prediction": "all x.(RiverScale(x) -> (ProvidesInformationOnMagnitudeOrInherentStrength(x,earthquake)))", "score": 0}
{"id": "eqasc_validation_349", "prediction": "all x y.((RiverScale(x) & Seismometer(y)) -> UsesReadingsFrom(x,y))", "score": 0}
{"id": "eqasc_validation_349", "prediction": "all x.(RiverScale(x) -> UsesFindingsFromSeismometers(x))", "score": 0}
{"id": "eqasc_validation_349", "prediction": "all x y.((RißgersScale(x) & Seismometer(y)) -> UsesReadingsFrom(x,y))", "score": 0}
{"id": "eqasc_validation_349", "prediction": "all x y z w.((Jürgen(x) & Seismometer(y) & Reading(z) & Reading(w)) -> Uses(x,y,z))", "score": 0}
{"id": "eqasc_validation_349", "prediction": "all x y z.((RiverScale(x) & Reading(y) & Seismometer(z) & (PossibleRating(y,z) | TapedReading(y,z)))) -> UsesFromSeismometer(x,y))", "score": -1}
{"id": "eqasc_validation_349", "prediction": "all x y.((JerryScale(x) & Seismometer(y) & UsesReadings(x,y)) -> LessonsFrom(x,y))", "score": 0}
{"id": "eqasc_validation_349", "prediction": "(all x,y,z) -> UsedInRange(x,y)) & the RichterScale(y) & UsesReadingsFromSeismometers(z,y))", "score": -1}
{"id": "eqasc_validation_349", "prediction": "all x.(Richard(x) -> UsesReadingsFromSeismometers(x))", "score": 0}
{"id": "eqasc_validation_349", "prediction": "all x y.((RiverScan(x) & Seismometer(y)) -> UsesReadingFrom(x,y))", "score": 0}
{"id": "eqasc_validation_349", "prediction": "(ReadingsfromSeismometers(RiverScale) & UsesRatings(RiversScale))", "score": 0}
{"id": "eqasc_validation_349", "prediction": "all x.(JürgenScale(x) -> UsesReadingsFromSeismometers(x))", "score": 0}
{"id": "eqasc_validation_349", "prediction": "all x y.((RiverScale(x) & Seismometer(y)) -> UsesReading(x,y))", "score": 0}
{"id": "eqasc_validation_349", "prediction": "all x.(RiverScale(x) -> UsesReadingsFromSeismometers(x))", "score": 0}
{"id": "eqasc_validation_349", "prediction": "all x y z.((RiverScale(x) & Seismometer(y) & Seismometer(z)) -> UsesReading(x,y,z))", "score": 0}
{"id": "eqasc_validation_349", "prediction": "all x.(RiverScale(x) -> (UsesReadingsFromSeismometers(x) & FromSeismometers(x)))", "score": 0}
{"id": "eqasc_validation_350", "prediction": "all x.(Seismometer(x) -> (MeasuresStrengthOrMagnitudeOfFaultMovement(x)))", "score": 0}
{"id": "eqasc_validation_350", "prediction": "all x y.((Seismometer(x) & FailMovement(y)) -> (MeasuredFortness(x,y) | MeasuredMagnitude(x,y)))", "score": 0}
{"id": "eqasc_validation_350", "prediction": "all x.(Seismometer(x) -> (MeasuresStrengthOrMagnitudeOfFaultMovement(x) & MeasuresStrengthOfFaultMovement(x)))", "score": 0}
{"id": "eqasc_validation_350", "prediction": "all x.(Seismometer(x) -> (MeterTheStrengthOrMagnitudeOfFaultMovement(x)))", "score": 0}
{"id": "eqasc_validation_350", "prediction": "all x.((Seismometer(x) & MeasuresFault(x)) -> (StrengthOfFault(x) | MagnitudeOfFault(x)))", "score": 0}
{"id": "eqasc_validation_350", "prediction": "all x y.((Seismometer(x) & MeasuresFaultMovement(x)) -> (HasStrength(y) | HasMagnitude(y)))", "score": 0}
{"id": "eqasc_validation_350", "prediction": "all x y.((Seismometer(x) & FaultMovement(y)) -> (MeasuresStrengthOrMagnitude(x,y)))", "score": 0}
{"id": "eqasc_validation_350", "prediction": "all x.(Seismometer(x) -> MeasuresStrengthOrMagnitudeOfFaultMovement(x))", "score": 0}
{"id": "eqasc_validation_350", "prediction": "all x y.((Seismometer(x) & FaultMovement(y)) -> MeasuresStrengthOrMagnitude(x,y))", "score": 0}
{"id": "eqasc_validation_350", "prediction": "all x.(Seismometer(x) -> (MeasuresStrength(x) | MeasuresMagnitude(x)))", "score": 0}
{"id": "eqasc_validation_350", "prediction": "all x.(Seismometer(x) -> MeasuresFaultStrengthOrMagnitude(x))", "score": 0}
{"id": "eqasc_validation_351", "prediction": "all x y z.((Seismometer(x) & RichterScene(y) & Sum(z) & MeasuresOf(x,y,z)) -> Measures(x,y,z))", "score": 0}
{"id": "eqasc_validation_351", "prediction": "all x y.((Seismometer(x) & RichterScale(y)) -> Measures(x,y))", "score": 0}
{"id": "eqasc_validation_351", "prediction": "all x y z.((Seismometer(x) & RichterScales(y) & Scale(z)) -> Measures(x,y,z))", "score": 0}
{"id": "eqasc_validation_351", "prediction": "all x y.((Seismometer(x) & RichterScale(y)) -> Measuring(x,y))", "score": 0}
{"id": "eqasc_validation_351", "prediction": "all x.(Seismometer(x) -> MeasuresRichterScale(x))", "score": 0}
{"id": "eqasc_validation_351", "prediction": "all x y.((Seismometer(x) & RichterScene(y)) -> MeasuresAndMeasures(x,y))", "score": 0}
{"id": "eqasc_validation_351", "prediction": "all x y z.((Seismometer(x) & RichterScale(y) & Scale(z)) -> MeasuresRichter(x,y,z))", "score": 0}
{"id": "eqasc_validation_351", "prediction": "all x y z.((Seismometer(x) & RichterScale(y) & Senses(z)) -> Measures(x,y,z))", "score": 0}
{"id": "eqasc_validation_351", "prediction": "all x y z.((Seismometer(x) & RichterScale(y) & Measure(z)) -> Measure(x,y,z))", "score": 0}
{"id": "eqasc_validation_351", "prediction": "all x y.((Seismometer(x) & RichterScene(y) & MeasuresRichterScene(x,y)) -> UsedToMeasureScale(x,y))", "score": 0}
{"id": "eqasc_validation_351", "prediction": "all x.(Seismometer(x) -> MeasuresRichterScales(x))", "score": 0}
{"id": "eqasc_validation_351", "prediction": "all x y.((Seismometer(x) & MeasurerScale(y)) -> RichterScales(z))", "score": 0}
{"id": "eqasc_validation_351", "prediction": "all x y.((Seismometer(x) & RichterScale(y)) -> MeasuresRichterScale(x,y))", "score": 0}
{"id": "eqasc_validation_351", "prediction": "all x y.((Seismometer(x) & RichterScene(y)) -> MeasuresRichterScene(x,y))", "score": 0}
{"id": "eqasc_validation_352", "prediction": "all x.(Intensity(x) -> (MeasuresStrengthOfShaking(x) & ExperiencedInEarthquake(x)))", "score": 0}
{"id": "eqasc_validation_352", "prediction": "all x y z.((Intensity(x) & Earthquake(y) & Strength(z)) -> SeizuresIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_352", "prediction": "all x.(Intensity(x) -> (ExperiencedInEarthquake(x) & StrengthOfShaking(x)))", "score": 0}
{"id": "eqasc_validation_352", "prediction": "all x.(Intensity(x) -> MeasuresReward(x))", "score": 0}
{"id": "eqasc_validation_352", "prediction": "all x.(Intensity(x) -> MeasuresStrengthOfShaking(x))", "score": 0}
{"id": "eqasc_validation_352", "prediction": "all x.(Intensity(x) -> (IncreasedShakingStrength(x) & ExperiencedInEarthquake(x)))", "score": 0}
{"id": "eqasc_validation_352", "prediction": "all x y z.((Intensity(x) & Earthquake(y) & Shaking(z)) -> MeasuresStrength(x,y,z))", "score": 0}
{"id": "eqasc_validation_352", "prediction": "all x y.((Intensity(x) & Earthquake(y)) -> MeasuresStrengthOfShaking(x,y))", "score": 0}
{"id": "eqasc_validation_352", "prediction": "all x.(Intensity(x) -> (MeasuresShakingStrength(x) & ExperiencedInEarthquake(x)))", "score": 0}
{"id": "eqasc_validation_352", "prediction": "all x.(Intensity(x) -> (AngleOfShaking(x) & ExperiencedInEarthquake(x)))", "score": 0}
{"id": "eqasc_validation_353", "prediction": "all x.(Seismometer(x) -> MeasuresIntensityOfShakingOfEarthquakes(x))", "score": 0}
{"id": "eqasc_validation_353", "prediction": "all x y z.((Seismometer(x) & Earthquake(y) & ShakingIntensity(z,y)) -> MeasuresIntensity(x,z))", "score": 0}
{"id": "eqasc_validation_353", "prediction": "all x y.((Seismometer(x) & Earthquake(y)) -> MeasuresIntensityOfShaking(x,y))", "score": 0}
{"id": "eqasc_validation_353", "prediction": "all x.(Seismometer(x) -> MeasuresIntensityOfShaking(x))", "score": 0}
{"id": "eqasc_validation_353", "prediction": "all x.(Seismometer(x) -> MeasuresIntensityOfEarthquakeShaking(x))", "score": 0}
{"id": "eqasc_validation_353", "prediction": "all x y.((Seismometer(x) & (Earthquake(y) | Earthquake(y))) -> MeasuresIntensityOfShaking(x,y))", "score": 0}
{"id": "eqasc_validation_354", "prediction": "all x.(SeismicWaves(x) -> ProducedByEarthquakes(x))", "score": 0}
{"id": "eqasc_validation_354", "prediction": "all x.(SeesmicWave(x) -> ProducedByEarthquakes(x))", "score": 0}
{"id": "eqasc_validation_354", "prediction": "all x y.((SeismicWaves(x) & Earthquake(y)) -> ProducedBy(x,y))", "score": 0}
{"id": "eqasc_validation_354", "prediction": "all x.(SeismicWaves(x) -> EraserTrack(x))", "score": 0}
{"id": "eqasc_validation_354", "prediction": "all x.(SeismicWaves(x) -> ProducedByEarthquake(x))", "score": 0}
{"id": "eqasc_validation_354", "prediction": "all x y.((Earthquake(x) & SeismicWaves(y)) -> ProducedBy(x,y))", "score": 0}
{"id": "eqasc_validation_354", "prediction": "all x.(SeismicWaves(x) -> ConductedByEarthquakes(x))", "score": 0}
{"id": "eqasc_validation_355", "prediction": "all x.(Seismometer(x) -> MeasuresSeismicWaves(x))", "score": 0}
{"id": "eqasc_validation_355", "prediction": "all x.((Seismometer(x) & SeismicWaves(x)) -> Measures(x,y))", "score": 0}
{"id": "eqasc_validation_355", "prediction": "all x y.((Seismometer(x) & Seismoscope(y)) -> MeasuresSeismicWaves(x,y))", "score": 0}
{"id": "eqasc_validation_355", "prediction": "all x y z.((Seismometer(x) & SeismicWaves(y) & Waves(z)) -> Measures(x,y,z))", "score": 0}
{"id": "eqasc_validation_355", "prediction": "all x y.((Seismometer(x) & SeismonicWaves(y)) -> MeasuresWavesSeismic(x,y))", "score": 0}
{"id": "eqasc_validation_355", "prediction": "all x.(seismometer(x) -> MeasuresSeismicWaves(x))", "score": 0}
{"id": "eqasc_validation_355", "prediction": "all x y.((Seismometer(x) & SeismicWaves(y)) -> MeasuresFrom(x,y))", "score": 0}
{"id": "eqasc_validation_355", "prediction": "all x y.((Seismometer(x) & SeismicWaves(y)) -> Measures(x,y))", "score": 0}
{"id": "eqasc_validation_355", "prediction": "all x y in the world of seismological.com(x) -> MeasuresSeismicWaves(x))", "score": -1}
{"id": "eqasc_validation_356", "prediction": "all x y.((Scientist(x) & Seismometer(y)) -> (DeterminesLocation(x) & DeterminesStrengthOfEarthquakes(x)))", "score": 0}
{"id": "eqasc_validation_356", "prediction": "all x.(Scientist(x) -> (UsesSeismometers(x) & DeterminesLocation(x) & DeterminesStrength(x)))", "score": 0}
{"id": "eqasc_validation_356", "prediction": "all x y z.((Scientist(x) & Seismometer(y) & Earthquake(z)) -> (Uses(x,y) & DeterminesLocationAndStrength(x,z)))", "score": 0}
{"id": "eqasc_validation_356", "prediction": "all x y z.((Scientist(x) & Seismometer(y) & Earthquake(z)) -> DeterminesLocationAndStrength(x,y,z))", "score": 0}
{"id": "eqasc_validation_356", "prediction": "all x y z w.((Scientist(x) & Seismometer(y) & Earthquake(z)) -> (Uses(x,y) & DeterminesLocation(x,z) & DeterminesStrength(x,w)))", "score": 0}
{"id": "eqasc_validation_356", "prediction": "all x.(Scientist(x) -> UsesSeismometersToDetermineLocationAndStrengthOfEarthquakes(x))", "score": 0}
{"id": "eqasc_validation_356", "prediction": "all x y.((Scientist(x) & Seismometer(y)) -> (DeterminesLocation(x,y) & DeterminesStrength(x,y)))", "score": 0}
{"id": "eqasc_validation_356", "prediction": "all x y.((Scientist(x) & Seismometer(y)) -> DeterminesLocationAndStrengthOfEarthquakes(x,y))", "score": 0}
{"id": "eqasc_validation_356", "prediction": "all x.(Scientist(x) -> (UsesSeismometers(x) & DeterminesLocationAndStrength(x)))", "score": 0}
{"id": "eqasc_validation_356", "prediction": "all x y.((Scientist(x) & Seismometer(y) & Earthquake(x)) -> DeterminesLocationAndStrength(y,x))", "score": 0}
{"id": "eqasc_validation_356", "prediction": "all x.(Scientist(x) -> (UsesSeismometer(x) & DeterminesLocation(x) & DeterminesStrength(x)))", "score": 0}
{"id": "eqasc_validation_356", "prediction": "all x y.((Scientist(x) & Earthquake(y)) -> UsesSeismometers(x,y))", "score": 0}
{"id": "eqasc_validation_356", "prediction": "all x y z.((Scientist(x) & Seismometer(y) & Earthquake(z)) -> LocatesAndStrength(x,y,z))", "score": 0}
{"id": "eqasc_validation_357", "prediction": "all x y.((Seismometer(x) & Strength(y)) -> Measures(x,y))", "score": 0}
{"id": "eqasc_validation_357", "prediction": "all x y.((Seismometer(x) & Seismometer(y)) -> MeasuresStrength(x,y))", "score": 0}
{"id": "eqasc_validation_357", "prediction": "all x y z.((Seismometer(x) & Strength(y) & Strength(z) & UsedToMeasure(x,y,z)) -> Measures(x,y,z))", "score": 0}
{"id": "eqasc_validation_357", "prediction": "all x.(Seismometer(x) -> MeasuresStrengthWithPontanel(x))", "score": 0}
{"id": "eqasc_validation_357", "prediction": "all x.(Seismometer(x) -> MeasuresStrength(x))", "score": 0}
{"id": "eqasc_validation_357", "prediction": "all x.(Seismometer(x) -> MeasuresStrength[x))", "score": -1}
{"id": "eqasc_validation_357", "prediction": "all x y z.((Seismometer(x) & Strength(y) & Strength(z)) -> Measure(x,y,z))", "score": 0}
{"id": "eqasc_validation_357", "prediction": "all x y z.((Seismometer(x) & Strength(y) & Strength(z)) -> Measures(x,y,z))", "score": 0}
{"id": "eqasc_validation_357", "prediction": "all x y.((Seismometer(x) & MeshStrength(y)) -> UsedToMassStrength(x,y))", "score": 0}
{"id": "eqasc_validation_358", "prediction": "all x.((Earthquake(x) & (Strength(x) | ShakingAmount(x))) -> Magnitude(x))", "score": 0}
{"id": "eqasc_validation_358", "prediction": "all x.(Earthquake(x) -> (Graduity(x,y) | ShakingAmount(x,z)))", "score": 0}
{"id": "eqasc_validation_358", "prediction": "all x.(Earthquake(x) -> (Strength(x) | AmountOfShaking(x)))", "score": 0}
{"id": "eqasc_validation_358", "prediction": "all x.(Earthquake(x) -> (HasStrength(x) | HasShakingAmount(x)))", "score": 0}
{"id": "eqasc_validation_358", "prediction": "all x.(Earthquake(x) -> ((Strength(x) | Tackle(x))))", "score": 0}
{"id": "eqasc_validation_358", "prediction": "all x.(Earthquake(x) -> (Strength(x) | ShakingAmount(x)))", "score": 0}
{"id": "eqasc_validation_358", "prediction": "all x.(Earthquake(x) -> (Likels(x,y) | ShakingAmount(x,zz)))", "score": 0}
{"id": "eqasc_validation_358", "prediction": "all x.((Earthquake(x) & (Power(x) | ShakingAmount(x))) -> Magnitude(x))", "score": 0}
{"id": "eqasc_validation_358", "prediction": "all x.(Earthquake(x) -> (Strength(x) | AggregateShaking(x)))", "score": 0}
{"id": "eqasc_validation_358", "prediction": "all x.(Earthquake(x) -> (Magnitude(x) | ShakingAmount(x)))", "score": 0}
{"id": "eqasc_validation_358", "prediction": "all x.(Earthquake(x) -> ((Strength(x) & Shaking(x)) | Heavier(x))))", "score": -1}
{"id": "eqasc_validation_358", "prediction": "all x y.((Earthquake(x) & Strength(y)) | Shaking(x)) -> Magnitude(x,y))", "score": -1}
{"id": "eqasc_validation_358", "prediction": "all x y.((Earthquake(x) & Earthquake(y)) -> (Strength(x,y) | Anxiety(x,y)))", "score": 0}
{"id": "eqasc_validation_358", "prediction": "all x y z.((Earthquake(x) & Strength(y) & Shaking(z)) -> Magnitude(x,y,z))", "score": 0}
{"id": "eqasc_validation_358", "prediction": "all x y.((Earthquake(x) & Gravity(x,y)) -> (Strength(y) | ActuationOfShaking(x)))", "score": 0}
{"id": "eqasc_validation_359", "prediction": "all x y.((Seismometer(x) & EarthquakeShaking(y)) -> MeasuresShakingAmount(x,y))", "score": 0}
{"id": "eqasc_validation_359", "prediction": "all x.(Eismometer(x) -> MeasuresTheAmountOfShaking(x))", "score": 0}
{"id": "eqasc_validation_359", "prediction": "all x y.((Seismometer(x) & Earthquake(y)) -> MeasuresShakingAmount(x,y))", "score": 0}
{"id": "eqasc_validation_359", "prediction": "all x y.((Seismometer(x) & Earthquake(y)) -> MeasuresShakingBetween(x,y))", "score": 0}
{"id": "eqasc_validation_359", "prediction": "all x.(Seismometer(x) -> MeasuresShakingAmountOfEarthquake(x))", "score": 0}
{"id": "eqasc_validation_359", "prediction": "all x.(Seismometer(x) -> MeasuresAmountOfShakingOfEarthquake(x))", "score": 0}
{"id": "eqasc_validation_359", "prediction": "all x y.((Seismometer(x) & Earthquake(y)) -> MeasuresAmountOfShaking(x,y))", "score": 0}
{"id": "eqasc_validation_359", "prediction": "all x y.((Seismometer(x) & Earthquake(y)) -> MeasureAmountOfShaking(x,y))", "score": 0}
{"id": "eqasc_validation_359", "prediction": "all x.(Seismometer(x) -> MeasuresAmountOfShakingLikeEarthquake(x))", "score": 0}
{"id": "eqasc_validation_359", "prediction": "all x y z.((Seismometer(x) & Earthquake(y) & Shaking(z) & Measures(x,z)) -> UsingSeismometer(x))", "score": 0}
{"id": "eqasc_validation_359", "prediction": "all x y z.((Seismometer(x) & earthquake(y) & Sum ofShaking(x,y)) -> Measures(x,z))", "score": -1}
{"id": "eqasc_validation_359", "prediction": "all x y.((Seismometer(x) & Earthquake(y)) -> MeasuresShaking(x,y))", "score": 0}
{"id": "eqasc_validation_360", "prediction": "all x.(Seismograph(x) -> (RecordsEarthquakeWaves(x) & -RecordsEarthquakeWaves(x)))", "score": 0}
{"id": "eqasc_validation_360", "prediction": "all x.(Seismograph(x) -> RecordsEarthquakeWaves(x))", "score": 0}
{"id": "eqasc_validation_360", "prediction": "all x y.((Seismograph(x) & EarthquakeWaves(y)) -> Records(x,y))", "score": 0}
{"id": "eqasc_validation_360", "prediction": "all x.(Seismograph(x) -> (RecordsEarthquakeWaves(x)))", "score": 0}
{"id": "eqasc_validation_360", "prediction": "all x.(Seismograph(x) -> RecordesEarthquakeWaves(x))", "score": 0}
{"id": "eqasc_validation_360", "prediction": "all x.((Device(x) & RecordsEarthquakeWaves(x)) -> Seismograph(x))", "score": 0}
{"id": "eqasc_validation_360", "prediction": "all x.(Seismograph(x) -> (RecordsEarthquakeWaves(x) & RecordsEarthquakeWaves(x)))", "score": 0}
{"id": "eqasc_validation_361", "prediction": "all x.(Seismograph(x) -> MeasuresStrength(x))", "score": 0}
{"id": "eqasc_validation_361", "prediction": "all x.(Seismograph(x) -> MeasureStability(x))", "score": 0}
{"id": "eqasc_validation_361", "prediction": "all x y.((Seismograph(x) & Strength(y)) -> MeasuresWith(x,y))", "score": 0}
{"id": "eqasc_validation_361", "prediction": "all x.(Seismograph(x) -> MeasureStrength(x))", "score": 0}
{"id": "eqasc_validation_361", "prediction": "all x y.((Seismograph(x) & Seismograph(y)) -> MeasuresStrength(x))", "score": 0}
{"id": "eqasc_validation_361", "prediction": "all x.(Seismograph(x) -> (MeasuresStrength(x) | MeasuresStrength(x)))", "score": 0}
{"id": "eqasc_validation_362", "prediction": "all x y.((Thermometer(x) & Temperature(y)) -> Measures(x,y))", "score": 4}
{"id": "eqasc_validation_362", "prediction": "all x y.((Thermometer(x) & TemperatureTemperature(y)) -> UsedToMeasure(x,y))", "score": 0}
{"id": "eqasc_validation_362", "prediction": "all x y z w.((Thermometer(x) & Temperature(y) & Temperature(z) & Measures(x,y,z)) -> Thermometer(x))", "score": 0}
{"id": "eqasc_validation_362", "prediction": "all x y.((Thermometer(x) & Temperature(y)) -> MeasuresTemperature(x,y))", "score": 0}
{"id": "eqasc_validation_362", "prediction": "all x y z.((Thermometer(x) & Temperature(y) & Temperature(z)) -> UsedToMeasure(x,y,z))", "score": 0}
{"id": "eqasc_validation_362", "prediction": "all x y.((Thermometer(x) & Temperature(y)) -> UsedToMeasure(x,y))", "score": 0}
{"id": "eqasc_validation_362", "prediction": "all x y z.((Thermometer(x) & Temperature(y) & Temperature(z) & Measures(x,y,z)) -> ThermalMethod(x))", "score": 0}
{"id": "eqasc_validation_362", "prediction": "all x y z.((Thermometer(x) & Temperature(y) & Temperature(z)) -> Measures(x,y,z))", "score": 4}
{"id": "eqasc_validation_362", "prediction": "all x y.((Thermometer(x) & TemperatureMeter(y)) -> MeasureTemperature(x,y))", "score": 0}
{"id": "eqasc_validation_362", "prediction": "all x.(Thermometer(x) -> MeasuresTemperature(x))", "score": 0}
{"id": "eqasc_validation_363", "prediction": "all x.(Temperature(x) -> MeasuresHeatAmount(x))", "score": 0}
{"id": "eqasc_validation_363", "prediction": "all x.(Temperature(x) -> MeasuresHeat(x))", "score": 0}
{"id": "eqasc_validation_363", "prediction": "-MeasuresAmountOfHeat(Temperature)", "score": 0}
{"id": "eqasc_validation_363", "prediction": "(MeasuresHeat(HeatTemperature) & MeasuresHeat(HeatTemperature))", "score": 0}
{"id": "eqasc_validation_363", "prediction": "all x y z.((Temperature(x) & Heat(y) & Heat(z)) -> Measurement(x,y,z))", "score": 0}
{"id": "eqasc_validation_363", "prediction": "all x y.((Temperature(x) & Heat(y)) -> Measurement(x,y))", "score": 0}
{"id": "eqasc_validation_363", "prediction": "theTemperature(Temperature) -> MeasuresHeatAmount(Temperature))", "score": -1}
{"id": "eqasc_validation_363", "prediction": "all x.(Temperature(x) -> MeasuresHexadecimal(x))", "score": 0}
{"id": "eqasc_validation_364", "prediction": "all x.(Thermometer(x) -> MeasuresHeatAmount(x))", "score": 0}
{"id": "eqasc_validation_364", "prediction": "all x.(Thermometer(x) -> MeasuresHeat(x))", "score": 0}
{"id": "eqasc_validation_364", "prediction": "all x y.((Thermometer(x) & Heat(y)) -> Measures(x,y))", "score": 0}
{"id": "eqasc_validation_364", "prediction": "all x y.((Thermometer(x) & Heat(y)) -> MeasuresUsing(x,y))", "score": 0}
{"id": "eqasc_validation_364", "prediction": "all x.(Thermometer(x) -> MeasuresHeatAddition(x))", "score": 0}
{"id": "eqasc_validation_364", "prediction": "all x y.((Thermometer(x) & Heat(y)) -> MeasuresAmount(x,y))", "score": 0}
{"id": "eqasc_validation_364", "prediction": "all x y.((Thermometer(x) & Heat(y)) -> UsedToMeasure(x,y))", "score": 0}
{"id": "eqasc_validation_364", "prediction": "all x y.((Thermometer(x) & Heat(y)) -> MeasureAmount(x,y))", "score": 0}
{"id": "eqasc_validation_365", "prediction": "all x.(Fever(x) -> MeasuredUsingThermometer(x))", "score": 0}
{"id": "eqasc_validation_365", "prediction": "all x.(Fever(x) -> MeasuredWithThermometer(x))", "score": 0}
{"id": "eqasc_validation_365", "prediction": "all x.(Fever(x) -> MeasuringWithThermometer(x))", "score": 0}
{"id": "eqasc_validation_365", "prediction": "all x y.((Fever(x) & Thermometer(y)) -> Measured(x,y))", "score": 0}
{"id": "eqasc_validation_365", "prediction": "all x.(Fever(x) -> MeasuresUsingThermometer(x))", "score": 0}
{"id": "eqasc_validation_365", "prediction": "all x y.((Fever(x) & Thermometer(y)) -> Measurable(x,y))", "score": 0}
{"id": "eqasc_validation_366", "prediction": "all x.(Fever(x) -> MeasuresWithThermmeter(x))", "score": 0}
{"id": "eqasc_validation_366", "prediction": "all x y.((Fever(x) & Thermometer(y)) -> MeasuresWith(x,y))", "score": 0}
{"id": "eqasc_validation_366", "prediction": "all x.(FeverMeasure(x) -> (MeasuresFeverWithThermometer(x) & MeasuresFeverWithThermometer(x)))", "score": 0}
{"id": "eqasc_validation_366", "prediction": "all x.((Fever(x) & Thermometer(x)) -> MeasuresWithHelometer(x))", "score": 0}
{"id": "eqasc_validation_366", "prediction": "all x.(Fever(x) -> MeasuredWithThermometer(x))", "score": 0}
{"id": "eqasc_validation_366", "prediction": "all x y.((Fever(x) & Thermometer(y)) -> Measures(x,y))", "score": 0}
{"id": "eqasc_validation_366", "prediction": "all x y z.((Fever(x) & Thermometer(y) & Thermometer(z)) -> MeasuresWithFever(x,y,z))", "score": 0}
{"id": "eqasc_validation_366", "prediction": "all x y.((Fever(x) & Thermometer(y)) -> Morphew(x,y))", "score": 0}
{"id": "eqasc_validation_366", "prediction": "all x.(Fever(x) -> CanBeMeasuredWithThermometer(x))", "score": 0}
{"id": "eqasc_validation_366", "prediction": "all x.(Fever(x) -> MeasuresWithThermometer(x))", "score": 0}
{"id": "eqasc_validation_366", "prediction": "all x.(FeverMagnification(x) -> (MeasuresFeverWithThermometer(x) & InThermometer(x)))", "score": 0}
{"id": "eqasc_validation_366", "prediction": "all x y.((Fever(x) & Thermometer(y)) -> CanMeasure(x,y))", "score": 0}
{"id": "eqasc_validation_366", "prediction": "all x y.((Fever(x) & Thermometer(y)) -> CanBeMeasuredWith(x,y))", "score": 0}
{"id": "eqasc_validation_367", "prediction": "all x.(Thermometer(x) -> MeasuresHeatAmount(x))", "score": 0}
{"id": "eqasc_validation_367", "prediction": "all x y.((Thermometer(x) & Heat(y)) -> MeasuresHeatAndHeat(x,y))", "score": 0}
{"id": "eqasc_validation_367", "prediction": "all x y z.((Thermometer(x) & Heat(y) & Heat(z)) -> MeasuresAmount(x,y,z))", "score": 0}
{"id": "eqasc_validation_367", "prediction": "all x y z.((Thermometer(x) & MeasuresHeat(y) & Heat(z)) -> MeasuresHeatAmount(x,y,z))", "score": 0}
{"id": "eqasc_validation_367", "prediction": "all x y.((Thermometer(x) & HeatAmount(y)) -> MeasuresToBeAmountOfHeat(x,y))", "score": 0}
{"id": "eqasc_validation_367", "prediction": "all x y z.((Thermometer(x) & Heat(y) & Heat(z)) -> MeasuresAmountOfMeasurement(x,y,z,y))", "score": 0}
{"id": "eqasc_validation_367", "prediction": "all x y.((Thermometer(x) & Heat(y)) -> MeasuresHeat(x,y))", "score": 0}
{"id": "eqasc_validation_367", "prediction": "all x y.((Thermometer(x) & Heat(y)) -> MeasuresHeatAmount(x,y))", "score": 0}
{"id": "eqasc_validation_367", "prediction": "all x y z.((Thermometer(x) & Heat(y) & Heat(z)) -> MeasuresAddition(x,y,z))", "score": 0}
{"id": "eqasc_validation_367", "prediction": "all x.(Thermometer(x) -> MeasuresHeat(x))", "score": 0}
{"id": "eqasc_validation_367", "prediction": "all x y z.((Thermometer(x) & Heat(y) & Heat(z)) -> MeasuresAdditionTo(x,y,z))", "score": 0}
{"id": "eqasc_validation_367", "prediction": "all x y?((Thermometer(x) & Heat(w)) -> MeasuresAmountOfHeat(x,w))", "score": -1}
{"id": "eqasc_validation_367", "prediction": "all x y.((MeasuresHeat(x) & Thermometer(y)) -> MeasuresHeat(x,y))", "score": 0}
{"id": "eqasc_validation_368", "prediction": "all x.(Heat(x) | Temperature(x))", "score": 0}
{"id": "eqasc_validation_368", "prediction": "all x y.((Heat(x) & Temperature(y)) -> Same(x,y))", "score": 0}
{"id": "eqasc_validation_368", "prediction": "(MajorHouse(m) & -MajorHouse(m) & ThemMoreThan(m))", "score": 0}
{"id": "eqasc_validation_368", "prediction": "exists x.(Heat(x) & Temperature(x))", "score": 0}
{"id": "eqasc_validation_368", "prediction": "(Heat(heat,heat) & Temperature(temperature,heat))", "score": 0}
{"id": "eqasc_validation_368", "prediction": "all x.(Heat(x) & Temperature(x)) -> Same(x))", "score": -1}
{"id": "eqasc_validation_368", "prediction": "all x.((Heat(x) & Temperature(x)) -> Same(x))", "score": 0}
{"id": "eqasc_validation_368", "prediction": "(SameHeat(x) & SameTemperature(x))", "score": 0}
{"id": "eqasc_validation_368", "prediction": "all x y.((Heat(x) & Temperature(y)) -> TheSame(x,y))", "score": 0}
{"id": "eqasc_validation_368", "prediction": "all x y z.((Heat(x) & Temperature(y) & Heat(z)) -> Same(z))", "score": 0}
{"id": "eqasc_validation_368", "prediction": "all x.(Heat(x) & Temperature(x))", "score": 4}
{"id": "eqasc_validation_368", "prediction": "(SameHeat(s) & SameTemperature(s))", "score": 0}
{"id": "eqasc_validation_368", "prediction": "(SameHeat(heat) & SameTemperature(heat))", "score": 0}
{"id": "eqasc_validation_368", "prediction": "all x.(Heat(x) -> Temperature(x))", "score": 4}
{"id": "eqasc_validation_369", "prediction": "all x y.((Thermometer(x) & HeatSeedMap & Use(x,y)) -> MeasuresHeat(x))", "score": 0}
{"id": "eqasc_validation_369", "prediction": "all x.(Thermometer(x) -> MeasuresHeat(x))", "score": 0}
{"id": "eqasc_validation_369", "prediction": "all x y z.((Thermometer(x) & Heat(y) & Heat(z)) -> Measures(x,y,z))", "score": 4}
{"id": "eqasc_validation_369", "prediction": "all x y.((Thermometer(x) & MeasuresHeat(y)) -> UsedForMeasuresHeat(x,y))", "score": 0}
{"id": "eqasc_validation_369", "prediction": "all x y.((Termometer(x) & Heat(y)) -> UsedToMeasure(x,y))", "score": 0}
{"id": "eqasc_validation_369", "prediction": "all x y.((Thermometer(x) & Heat(y)) -> Measures(x,y))", "score": 4}
{"id": "eqasc_validation_369", "prediction": "all x y.((Thermometer(x) & HotCleaningSigns(y)) -> MeasuresHeat(x,y))", "score": 0}
{"id": "eqasc_validation_369", "prediction": "all x y.((Thermometer(x) & TemperatureMeasure(y)) -> UsedToMeasureHeat(x,y))", "score": 0}
{"id": "eqasc_validation_370", "prediction": "all x.((Weather(x) & Warm(x)) -> RisesTemperature(x))", "score": 0}
{"id": "eqasc_validation_370", "prediction": "all x.(WarmWeather(x) -> RisesTemperature(x))", "score": 0}
{"id": "eqasc_validation_370", "prediction": "all x.(Winter(x) -> HeatsTemperature(x))", "score": 0}
{"id": "eqasc_validation_370", "prediction": "all x.((Weather(x) & Warm(x)) -> TemperatureRise(x))", "score": 0}
{"id": "eqasc_validation_370", "prediction": "all x.(WarmWeather(x) -> TemperatureRise(x))", "score": 0}
{"id": "eqasc_validation_370", "prediction": "all x.((Weather(x) & Warm(x)) -> TemperatureRises(x))", "score": 0}
{"id": "eqasc_validation_370", "prediction": "all x.(Winter(x) -> TemperatureRise(x))", "score": 0}
{"id": "eqasc_validation_370", "prediction": "all x.(MoreWarmWeather(x) -> TemperatureRise(x))", "score": 0}
{"id": "eqasc_validation_371", "prediction": "all x y.((Thermometer(x) & Weather(y)) -> MeasuredIfWarm(x,y))", "score": 0}
{"id": "eqasc_validation_371", "prediction": "all x.(Thermometer(x) -> (MeasuresWhetherWeatherCools(x)))", "score": 0}
{"id": "eqasc_validation_371", "prediction": "all x.(Thermometer(x) -> Temperature(x))", "score": 0}
{"id": "eqasc_validation_371", "prediction": "all x.(Thermometer(x) -> MeasuresWarmWeather(x))", "score": 0}
{"id": "eqasc_validation_371", "prediction": "all x y.((Thermometer(x) & Weather(y)) -> MeasuresWarm(x,y))", "score": 0}
{"id": "eqasc_validation_371", "prediction": "all x.(Thermometer(x) -> (MeasuresWarmWeather(x) & -WinterWeather(x)))", "score": 0}
{"id": "eqasc_validation_371", "prediction": "all x.((Thermometer(x) & WarmWeather(x)) -> Measures(x))", "score": 0}
{"id": "eqasc_validation_371", "prediction": "all x.(Thermometer(x) -> MeasuresWinterWeather(x))", "score": 0}
{"id": "eqasc_validation_372", "prediction": "all x y.((Fever(x) & TemperatureMeter(y)) -> CanBediagnosedWith(x,y))", "score": 0}
{"id": "eqasc_validation_372", "prediction": "all x y.((Warmth(x) & Fever(y)) -> DiagnosedWithThermometer(x,y))", "score": 0}
{"id": "eqasc_validation_372", "prediction": "all x.(Fever(x) -> (DiagnosedWithThermometer(x) & Thermometer(x)))", "score": 0}
{"id": "eqasc_validation_372", "prediction": "all x.((Fever(x) & Thermometer(x)) -> Diagnosed(x))", "score": 0}
{"id": "eqasc_validation_372", "prediction": "all x y.((Fever(x) & Thermometer(y)) -> CanBeDiagnosedWith(x,y))", "score": 0}
{"id": "eqasc_validation_372", "prediction": "all x y z.((Fever(x) & Thermometer(y) & Thermometer(z)) -> (DiagnosisFeverWith(x,y) | DiagnoseFeverWith(x,z))))", "score": -1}
{"id": "eqasc_validation_372", "prediction": "all x.(Fever(x) -> DiagnosedByThermometer(x))", "score": 0}
{"id": "eqasc_validation_372", "prediction": "all x.(FeverDiagnosis(x) -> CanBeDiagnosedWithThermometer(x))", "score": 0}
{"id": "eqasc_validation_372", "prediction": "all x y z.(Fever(x) -> (HasThermometer(y) & Diagnoses(x,y,z)))", "score": 0}
{"id": "eqasc_validation_372", "prediction": "all x y.((Fiber(x) & Thermometer(y)) -> CanDiagnosisWith(x,y))", "score": 0}
{"id": "eqasc_validation_372", "prediction": "all x.(Fever(x) -> CanBeDiagnosedWithThermometer(x))", "score": 0}
{"id": "eqasc_validation_372", "prediction": "all x y.((Fever(x) & Thermometer(y)) -> Can(x,y))", "score": 0}
{"id": "eqasc_validation_372", "prediction": "all x.(Fever(x) -> DetectableWithThermometer(x))", "score": 0}
{"id": "eqasc_validation_373", "prediction": "all x.(Temperature(x) -> MeasuresHeatAmount(x))", "score": 0}
{"id": "eqasc_validation_373", "prediction": "all x.(Temperature(x) -> MeasuresAmountOfHeat(x))", "score": 0}
{"id": "eqasc_validation_373", "prediction": "all x.(Temperature(x) -> MeasuresHeat(x))", "score": 0}
{"id": "eqasc_validation_373", "prediction": "all x.(Temperature(x) -> HeatMeasure(x))", "score": 0}
{"id": "eqasc_validation_373", "prediction": "all x y.((Temperature(x) & Heat(y)) -> Measures(x,y))", "score": 0}
{"id": "eqasc_validation_373", "prediction": "all x.(Temperature(x) -> MeasuredAmountOfHeat(x))", "score": 0}
{"id": "eqasc_validation_373", "prediction": "all x.(Temperature(x) -> MeasureSurfaceOfHeat(x))", "score": 0}
{"id": "eqasc_validation_374", "prediction": "all x.(Thermometer(x) -> MeasuresHeat(x))", "score": 0}
{"id": "eqasc_validation_374", "prediction": "all x.(Thermometer(x) -> (MassesHeat(x) | MeasuresHeat(x)))", "score": 0}
{"id": "eqasc_validation_374", "prediction": "all x.(Thermometer(x) -> (MassesHeat(x) & MeasuresHeat(x)))", "score": 0}
{"id": "eqasc_validation_374", "prediction": "all x y.(There’s z.(Thermometer(x) & Heat(y)) -> CanMeasure(x,y))", "score": -1}
{"id": "eqasc_validation_374", "prediction": "all x.(Thermometer(x) -> (MeasuresHeat(x) | MeasuresHeat(x)))", "score": 0}
{"id": "eqasc_validation_374", "prediction": "all x.(Thermometer(x) -> MeasureHeatWith(x,Heat,Heat))", "score": 0}
{"id": "eqasc_validation_374", "prediction": "all x.(Thermometer(x) -> (MeasuresHeat(x) & MeasuresHeat(x)))", "score": 0}
{"id": "eqasc_validation_375", "prediction": "all x y z.((Temperature(x) & Mercury(y) & Thermometer(z)) -> (Expansion(y) & RisesIn(y,z)))", "score": 0}
{"id": "eqasc_validation_375", "prediction": "all x.((TemperatureRises(x) & MercuryExpandsAndRises(x)) -> ThermometerTube(x))", "score": 0}
{"id": "eqasc_validation_375", "prediction": "all x.((TemperatureRaises(x) & (MagneticExpansion(x) | ThermometerTubeRise(x))) -> ExpandsAndRises(x))", "score": 0}
{"id": "eqasc_validation_375", "prediction": "all x.((TemperatureRise(x) & Expansion(x,MrMrTube),Rise(x,MrMore(x,Mr)) -> EnlargesAndRisesInRise(x,MrMore))", "score": -1}
{"id": "eqasc_validation_375", "prediction": "all x.((TemperatureRises(x) & MercuryExpands(x) & RisesInThermometerTube(x)) -> MercuryThreshold(x))", "score": 0}
{"id": "eqasc_validation_375", "prediction": "all x.((TemperatureRises(x) & Mercury(x)) -> (ExpandsInThermometerTube(x) & RisesInThermometerTube(x)))", "score": 0}
{"id": "eqasc_validation_375", "prediction": "all x y z.((Temperature(x) & Mercury(y) & ThermometerVue(z)) -> (Expands(y) & RisesIn(y,z)))", "score": 0}
{"id": "eqasc_validation_375", "prediction": "all x y z.((Temperature(x) & Mercury(y) & Thermometer(z)) -> (Expansion(y,z) & RisesIn(y,z)))", "score": 0}
{"id": "eqasc_validation_375", "prediction": "all x y.((TemperatureRises(x) & Mercury(y)) -> ExpandsAndRidesInThermometer(y))", "score": 0}
{"id": "eqasc_validation_375", "prediction": "all x.((Temperature(x) & Rises(x)) -> ExpandsAndRisesInThermometerTube(x))", "score": 0}
{"id": "eqasc_validation_375", "prediction": "all x.((TemperatureRise(x) & Mercury(x)) -> (Expands(x) & RisesInThermometerTube(x)))", "score": 0}
{"id": "eqasc_validation_375", "prediction": "all x.(TemperatureRises(x) -> (Expands&Rises(x,thermometer)))", "score": 0}
{"id": "eqasc_validation_375", "prediction": "all x.((TemperatureRise(x) & Expands(x) & RisesInThermometer(x)) -> Mercury(x))", "score": 0}
{"id": "eqasc_validation_375", "prediction": "all x y.((TemperatureRise(x) & Mercury(y)) -> (Expands(y,x) & RisesInThermometer(y,x)))", "score": 0}
{"id": "eqasc_validation_375", "prediction": "all x y z.((Temperature(x) & TemperatureRises(x) & Mercury(y) & ThermometerTube(z)) -> (Expands(y,z) & Rises(y)))", "score": 0}
{"id": "eqasc_validation_375", "prediction": "all x y.((Temperature(x) & TemperatureRise(x)) -> (MercuryExpandsAndRisesInThermometerTub(y)))", "score": 0}
{"id": "eqasc_validation_376", "prediction": "all x y z.((Mercury(x) & Tube(y) & Tube(z)) -> (ExpandingAndRisingItune(x,y,z) & MeasuresTemperature(x,y)))", "score": 0}
{"id": "eqasc_validation_376", "prediction": "all x y z.((Mercury(x) & Tube(y) & Tube(z)) -> (ExpandsAndRising(x,y) & MeasuresTemperature(x,y,z)))", "score": 0}
{"id": "eqasc_validation_376", "prediction": "all x.((Mercury(x) & ExpandingAndRisingInTube(x)) -> UsedToMeasureTemperature(x))", "score": 0}
{"id": "eqasc_validation_376", "prediction": "all x y z w.((Mercury(x) & Tube(y) & Tube(z) & Expanding(x,y) & Rising(x,y)) -> MeasuresTemperature(x))", "score": 0}
{"id": "eqasc_validation_376", "prediction": "all x y z.((Mercury(x) & Tube(y) & Tube(z) & ExpandingAndRisingIn(x,y) & MeasuresTemperature(x,z)) -> UsedToMeasureTemperature(x))", "score": 0}
{"id": "eqasc_validation_376", "prediction": "all x y.((Mercury(x) & Tube(y) & ExpandsAndReaches(x,y)) -> MeasuresTemperature(x,y))", "score": 0}
{"id": "eqasc_validation_376", "prediction": "all x y z.((Mercury(x) & Tube(y) & ExpandingAndRising(x,y)) -> MeasuresTemperature(x))", "score": 0}
{"id": "eqasc_validation_376", "prediction": "all x y.((Mercury(x) & Tube(y)) -> (ExpandsAndRising(x,y) & MeasuresTemperature(x,y)))", "score": 0}
{"id": "eqasc_validation_376", "prediction": "all x y z.((Mercury(x) & Tube(y) & Tube(z)) -> (ExpandsAndRising(x,y) & MeasuresTemperature(x)))", "score": 0}
{"id": "eqasc_validation_376", "prediction": "all x y z.((Mercury(x) & Tube(y) & Tube(z) & ExpandingAndRising(x,y,z)) -> MeasuresTemperature(x,y))", "score": 0}
{"id": "eqasc_validation_376", "prediction": "all x y z.((Mercury(x) & Tube(y) & Tube(z) & Expanding(x) & RisingIn(x,y) & ExtendingResolving(x,z)) -> MeasuresTemperature(x))", "score": 0}
{"id": "eqasc_validation_376", "prediction": "all x y.((Mercury(x) & Tube(y) & ExpandingAndRisingIn(x,y)) -> MeasuresTemperature(x))", "score": 0}
{"id": "eqasc_validation_376", "prediction": "all x y z.((Mercury(x) & Tube(y) & Tube(z)) -> (ExpandingAndRisingIn(x,y) & MeasureTemperature(y,z)))", "score": 0}
{"id": "eqasc_validation_376", "prediction": "all x.((Mercury(x) & Expanding(x) & Rising(x) & Tube(x)) -> UsedToMeasureTemperature(x))", "score": 0}
{"id": "eqasc_validation_376", "prediction": "all x y.((Mercury(x) & Tube(y) & ExpandsAndRising(x,y)) -> MeasuresTemperature(x))", "score": 0}
{"id": "eqasc_validation_376", "prediction": "all x.((Mercury(x) & Expanding(x) & RisingInTube(x)) -> MeasureTemperature(x))", "score": 0}
{"id": "eqasc_validation_377", "prediction": "all x.(ObviousReplacement(x) -> AlcoholThermometer(x))", "score": 0}
{"id": "eqasc_validation_377", "prediction": "(IndividualReplacementForMercuryThermometer(x) -> AlcoholThermometer(x))", "score": 0}
{"id": "eqasc_validation_377", "prediction": "all x.(ObviousReplacementAfterMercuryThermometer(x) -> AlcoholThermometer(x))", "score": 0}
{"id": "eqasc_validation_377", "prediction": "all x.((AlcoholThermometer(x) & AlternativeToStandard(x)) -> ObscuresReplacement(x))", "score": 0}
{"id": "eqasc_validation_377", "prediction": "all x.((AlcoholicThermometer(x) & StandardHazardometer(x)) -> ObscensiveReplacementFor(x, mercury))", "score": 0}
{"id": "eqasc_validation_377", "prediction": "all x.((ObsessedReplacementForMercuryThermometer(x) & DefaultHormoneThermometer(x)) -> AlcoholThermometer(x))", "score": 0}
{"id": "eqasc_validation_377", "prediction": "all x.((Methoxymeter(x) & Standard(x)) -> AlcoholThermometer(x))", "score": 0}
{"id": "eqasc_validation_377", "prediction": "all x y.((StandardMetalThermometer(x) & AlcoholThermometer(y)) -> ReplacementOf(x,y))", "score": 0}
{"id": "eqasc_validation_377", "prediction": "all x.((ObviousReplacement(x) & StandardM mercuryThermometer(x)) -> AlcoholThermometer(x))", "score": -1}
{"id": "eqasc_validation_377", "prediction": "all x.((ObscureReplacement(x) & StandardMercuryThermometer(x)) -> AlcoholThermometer(x))", "score": 0}
{"id": "eqasc_validation_377", "prediction": "all x.((StandardMercuryThermometer(x) & AlcoholThermometer(x)) -> OpportuneReplacement(x))", "score": 0}
{"id": "eqasc_validation_377", "prediction": "all x.(ObscuredReplacementOfMethacrylate(x) -> AlcoholThermometer(x))", "score": 0}
{"id": "eqasc_validation_377", "prediction": "all x.(ObscuredReplacementOfMercuryThermometer(x) -> AlcoholThermometer(x))", "score": 0}
{"id": "eqasc_validation_377", "prediction": "all x.(ObviousReplacement(x) & StandardMercuryThermometer(x) & AlcoholThermometer(x))", "score": 0}
{"id": "eqasc_validation_378", "prediction": "all x.((MercuryDevice(x) | AlcoholHealingDevice(x)) -> MeasuresTemperature(x))", "score": 0}
{"id": "eqasc_validation_378", "prediction": "all x.((MeasureTemperature(x) & (Mercury(x) | Alcohol(x))) -> MeasureTemperature(x))", "score": 0}
{"id": "eqasc_validation_378", "prediction": "all x.((Device(x) & (Mercury(x) | Alcohol(x))) -> MeasuresTemperature(x))", "score": 0}
{"id": "eqasc_validation_378", "prediction": "all x.((HaltorFinhaltingDevice(x) & MeasuresTemperature(x)) -> (HasValium(x) | HasAlcohol(x)))", "score": 0}
{"id": "eqasc_validation_378", "prediction": "all x.((Defense(x) & MeasuresTemperature(x)) -> (HasMercury(x) | HasAlcohol(x)))", "score": 0}
{"id": "eqasc_validation_378", "prediction": "all x.((MercuryDevice(x) | AlcoholContentingDevice(x)) -> MeasuresTemperature(x))", "score": 0}
{"id": "eqasc_validation_378", "prediction": "all x.((Device(x) & MeasuresTemperature(x)) -> (Mercury(x) | Alcohol(x)))", "score": 0}
{"id": "eqasc_validation_378", "prediction": "all x.((Device(x) & (Vecile(x) | Vehicle(x))) -> MeasuresTemperature(x))", "score": 0}
{"id": "eqasc_validation_378", "prediction": "all x.((Measuret(x) & (MeasuresTemperature(x) | MeasuresTemperature(x))) -> MercuryOrAlcoholContent(x))", "score": 0}
{"id": "eqasc_validation_378", "prediction": "all x.((Device(x) & MeasureTemperature(x)) -> (MercuryHeld(x) | AlcoholHeld(x)))", "score": 0}
{"id": "eqasc_validation_378", "prediction": "all x.((Mercury(x) | Alcohol(x)) -> MeasuresTemperature(x))", "score": 0}
{"id": "eqasc_validation_378", "prediction": "all x.((Meter(x) & ContainsMeasurement(x,MeasuresTemperature)) -> (MeasuresTemperature(x,MeasuresMeasurements(x,MeasuresTemperature) | MeasuresTemperature(x,MeasuresTemperature)))", "score": -1}
{"id": "eqasc_validation_378", "prediction": "all x.(Temperature(x) -> (MercuryDevice(x) | AlcoholContainingDevice(x)))", "score": 0}
{"id": "eqasc_validation_378", "prediction": "all x.((MercuryDevice(x) | AlcoholContainingDevice(x)) -> MeasuresTemperature(x))", "score": 0}
{"id": "eqasc_validation_378", "prediction": "all x.((Device(x) & MeasuresTemperature(x)) -> (Magnesium(x) | Alcohol(x)))", "score": 0}
{"id": "eqasc_validation_379", "prediction": "all x.(Vehicle(x) -> UsedForTravel(x))", "score": 17}
{"id": "eqasc_validation_379", "prediction": "all x y.((Vehicle(x) & Vehicle(y)) -> UsedForTravel(x,y))", "score": 6}
{"id": "eqasc_validation_379", "prediction": "all x y.((Vehicle(x) & UsesForTravel(x,x)) -> UsedForTravel(x,y))", "score": 0}
{"id": "eqasc_validation_379", "prediction": "all x y.((Vehicle(x) & Vehicle(y) & UsedForTravel(x,y)) -> UsedForTravel(x,y))", "score": 0}
{"id": "eqasc_validation_379", "prediction": "all x y.((Vehicle(x) & Vehicle(y)) -> UsedForTravel(y,x))", "score": 6}
{"id": "eqasc_validation_379", "prediction": "all x.(Vehicle(x) & UsedForTravel(x))", "score": 0}
{"id": "eqasc_validation_379", "prediction": "all x y.((Vehicle(x) & Travel(y) & UsedFor(x,y)) -> UsedFor(x,y))", "score": 0}
{"id": "eqasc_validation_379", "prediction": "all x y.((Vehicle(x) & Travel(y)) -> UsedFor(x,y))", "score": 0}
{"id": "eqasc_validation_380", "prediction": "all x.((Luggage(x) | Car(x)) -> UsedForTravel(x))", "score": 0}
{"id": "eqasc_validation_380", "prediction": "all x y z.((Landcruiser(x) & Car(y) & Truck(z)) -> (Travel(x,y) & Travel(y)))", "score": 0}
{"id": "eqasc_validation_380", "prediction": "all x.((Lamp(x) | Car(x)) -> UsedForTravel(x))", "score": 0}
{"id": "eqasc_validation_380", "prediction": "all x.((Truck(x) | Car(x)) -> UsedForTravel(x))", "score": 1}
{"id": "eqasc_validation_380", "prediction": "all x y z.((Car(x) & Truck(y) & Car(z)) -> (UsedForTravel(x) & UsedForTravel(y)))", "score": 1}
{"id": "eqasc_validation_380", "prediction": "all x y z.((Truck(x) & Car(y) & Tour(z)) -> (UsedForTravel(x,z) | UsedForTravel(x,y)))", "score": 0}
{"id": "eqasc_validation_380", "prediction": "all x y.((LKW(x) & Car(y)) -> Travel(y))", "score": 0}
{"id": "eqasc_validation_380", "prediction": "all x y.((Truck(x) | Car(y)) -> UsedForTravel(x,y))", "score": 0}
{"id": "eqasc_validation_380", "prediction": "all x.((LKW(x) | Car(x)) -> UsedForTravel(x))", "score": 0}
{"id": "eqasc_validation_380", "prediction": "all x.((Candy(x) | Truck(x))) -> UsedForTravel(x))", "score": -1}
{"id": "eqasc_validation_380", "prediction": "all x.((Lram(x) & Car(x)) -> UsedForTravel(x))", "score": 0}
{"id": "eqasc_validation_380", "prediction": "all x y z.((Company(x) & Car(y) & Truck(z)) -> UsedForTravel(z))", "score": 0}
{"id": "eqasc_validation_380", "prediction": "all x y z w.((LKW(x) & Car(y) & (Truck(z) | Car(w))) -> UsedForTravel(x,z,w))", "score": 0}
{"id": "eqasc_validation_380", "prediction": "all x y.((Lift(x) & Car(y)) -> (UsedForTravel(x,y) & UsedForTravel(x,z)))", "score": 0}
{"id": "eqasc_validation_380", "prediction": "all x y.((LKW(x) | Car(x)) -> UsedForTravel(x))", "score": 0}
{"id": "eqasc_validation_381", "prediction": "all x.(VehicleEmissions(x) -> MajorCauseOfAirPollution(x))", "score": 0}
{"id": "eqasc_validation_381", "prediction": "all x.(VehicleEmissions(x) -> MajorAirPollutionCause(x))", "score": 0}
{"id": "eqasc_validation_381", "prediction": "all x.((VehicleEmissions(x) & Assault(x)) -> MajorCauseOfAirPollution(x))", "score": 0}
{"id": "eqasc_validation_381", "prediction": "all x.(VehicleEmission(x) -> MajorCauseOfAirPollution(x))", "score": 0}
{"id": "eqasc_validation_381", "prediction": "all x.((VehicleExhaust(x) & AirPollution(x)) -> MajorCause(x))", "score": 0}
{"id": "eqasc_validation_381", "prediction": "all x.((VehicleEmission(x) & AirPollution(x)) -> MajorCause(x))", "score": 0}
{"id": "eqasc_validation_381", "prediction": "all x.(VEhicleEmissions(x) -> MajorCauseOfAirPollution(x))", "score": 0}
{"id": "eqasc_validation_381", "prediction": "all x.(VehicleEmissions(x) -> MajorSourceOfAirPollution(x))", "score": 0}
{"id": "eqasc_validation_381", "prediction": "all x y.((Vehicle(x) & AirPollution(y)) -> MajorCause(x,y))", "score": 0}
{"id": "eqasc_validation_382", "prediction": "all x.(Travels(x) -> AirPollution(x))", "score": 0}
{"id": "eqasc_validation_382", "prediction": "all x.(Travel(x) -> CauseOfAirPollution(x))", "score": 0}
{"id": "eqasc_validation_382", "prediction": "all x.(Traveling(x) -> CauseOfAirPollution(x))", "score": 0}
{"id": "eqasc_validation_382", "prediction": "all x.((Traveling(x) | AirPollution(x)))", "score": 0}
{"id": "eqasc_validation_382", "prediction": "all x.(Travels(x) -> CauseOfAirPollution(x))", "score": 0}
{"id": "eqasc_validation_382", "prediction": "all x y.((Travel(x) & AirPollution(y)) -> CauseOf(x,y))", "score": 0}
{"id": "eqasc_validation_383", "prediction": "all x.(Motorcycle(x) -> AdditionalVehicle(x))", "score": 0}
{"id": "eqasc_validation_383", "prediction": "all x.(Motorcycle(x) -> ExtraVehicle(x))", "score": 0}
{"id": "eqasc_validation_383", "prediction": "all x.((Motorcycle(x) & AdditionalVehicle(x)) -> ExtraVehicle(x))", "score": 0}
{"id": "eqasc_validation_384", "prediction": "all x.(Motorcycle(x) -> UsedForTravel(x))", "score": 0}
{"id": "eqasc_validation_384", "prediction": "all x y z.((Motorcycle(x) & Travel(y)) -> UsedFor(x,y))", "score": 0}
{"id": "eqasc_validation_384", "prediction": "all x.((Motorcycle(x) & Travel(x)) -> UsedFor(x,Motorcycle,Motorcycle,Motorcycle))", "score": 0}
{"id": "eqasc_validation_384", "prediction": "all x y z.((Motorcycle(x) & Motorcycle(y) & Travel(z)) -> UsedFor(y,z,t))", "score": 0}
{"id": "eqasc_validation_384", "prediction": "all x y.((Motorcycle(x) & Travel(y)) -> UsedFor(x,y))", "score": 0}
{"id": "eqasc_validation_384", "prediction": "all x y z.((Motorcycle(x) & (Motorcycle(y) | Motorcycle(z))) -> UsedForTravel(y,z))", "score": 0}
{"id": "eqasc_validation_384", "prediction": "all x.(Motorcycle(x) -> (UsedForTravel(x) & Travel(x)))", "score": 0}
{"id": "eqasc_validation_385", "prediction": "all x y.((Truck(x) | Car(y)) -> UsedForTravel(x))", "score": 0}
{"id": "eqasc_validation_385", "prediction": "(Travel(truck,travel) & Travel(car))", "score": 0}
{"id": "eqasc_validation_385", "prediction": "all x.((Truck(x) | Car(x)) -> UsedForTravel(x))", "score": 1}
{"id": "eqasc_validation_385", "prediction": "all x ((Truck(x) | Car(x))) -> UsedForTravel(x))", "score": -1}
{"id": "eqasc_validation_385", "prediction": "all x y z.((Truck(x) & Car(y) & Truck(z)) -> (UsedForTravel(x,y) | UsedForTravel(y,z)))", "score": 2}
{"id": "eqasc_validation_385", "prediction": "exists x.(Tank(x) & Car(x) & UsedForTravel(x)) & -UsedForTravel(x) & -UsedForTravel(x))", "score": -1}
{"id": "eqasc_validation_385", "prediction": "all x.(Trek(x) | Car(x)) -> TravelUsedFor(x,Travel))", "score": -1}
{"id": "eqasc_validation_385", "prediction": "all x y z w.((Truck(x) & Car(y) & Truck(z)) -> UsedForTravel(x,y,z))", "score": 0}
{"id": "eqasc_validation_385", "prediction": "all x y.((Truck(x) & Car(y)) -> (UsedForTravel(x,y) & InVisiting(x,y) | InVisiting(y,x)))", "score": 0}
{"id": "eqasc_validation_385", "prediction": "all x.((Truck(x) | Car(x)) -> UsedForTravel(x)) TravelMaterial(x))", "score": -1}
{"id": "eqasc_validation_385", "prediction": "all x y z.((Truck(x) & Car(y) & Truck(z)) -> (UsedForTravel(x,z) | UsedForTravel(y,z)))", "score": 2}
{"id": "eqasc_validation_385", "prediction": "all x.((Track(x) | Car(x)) -> UsedForTravel(x))", "score": 0}
{"id": "eqasc_validation_385", "prediction": "all x y.((Truck(x) & Car(y) & UsedForTravel(x)) -> (Truck(x) | Car(x)))", "score": 0}
{"id": "eqasc_validation_386", "prediction": "all x.(Truck(x) -> UsedForTravel(x))", "score": 4}
{"id": "eqasc_validation_386", "prediction": "all x.(Truck(x) -> (UsedForTravel(x) & TravelBuy(x)))", "score": 0}
{"id": "eqasc_validation_386", "prediction": "all x.(Truck(x) -> TravelDepth(x))", "score": 0}
{"id": "eqasc_validation_386", "prediction": "all x.(Lift(x) -> UsedForTravel(x))", "score": 0}
{"id": "eqasc_validation_386", "prediction": "all x.(LKW(x) -> UsedForTravel(x))", "score": 0}
{"id": "eqasc_validation_386", "prediction": "all x.(Lamp(x) -> UsedForTravel(x))", "score": 0}
{"id": "eqasc_validation_386", "prediction": "all x.(Truck(x) -> (UsedForTravel(x) & UsedForTravel(x)))", "score": 4}
{"id": "eqasc_validation_386", "prediction": "all x.(Landlord(x) -> Travel(x))", "score": 0}
{"id": "eqasc_validation_386", "prediction": "all x.(Truck(x) -> (UsedForTravel(x) & -UsedForTravel(x)))", "score": 0}
{"id": "eqasc_validation_386", "prediction": "all x y.((Truck(x) & Truck(y)) -> UsedForTravel(x,y))", "score": 8}
{"id": "eqasc_validation_387", "prediction": "all x.c.(Car(x) -> UsedForTravel(x))", "score": -1}
{"id": "eqasc_validation_387", "prediction": "all x.(Car(x) -> UsedForTravel(x))", "score": 2}
{"id": "eqasc_validation_387", "prediction": "exists x.(Car(x) & UsedForTravel(x))", "score": 0}
{"id": "eqasc_validation_388", "prediction": "all x.((Car(x) | Truck(x)) -> UsedForTravel(x))", "score": 4}
{"id": "eqasc_validation_388", "prediction": "all x.((Camera(x) | Truck(x)) -> UsedForTravel(x))", "score": 0}
{"id": "eqasc_validation_388", "prediction": "all x.(Car(x) & Truck(x)) -> UsedForTravel(x))", "score": -1}
{"id": "eqasc_validation_388", "prediction": "all x y z.((Car(x) & Truck(y) & Travel(z)) -> UsedFor(x,y,z))", "score": 0}
{"id": "eqasc_validation_389", "prediction": "all x y.((Airplane(x) & Ground(y)) -> (Leaves(x,y) & FlysThroughAir(x)))", "score": 0}
{"id": "eqasc_validation_389", "prediction": "all x.(Airplane(x) -> ((Vehicle(x) & LeaveGround(x) & FailAir(x))))", "score": 0}
{"id": "eqasc_validation_389", "prediction": "all x.(Airplane(x) -> (Vehicle(x) & LeavesGround(x) & FliesThroughAir(x)))", "score": 0}
{"id": "eqasc_validation_389", "prediction": "all x.(Airplane(x) -> (Vehicle(x) & LeavesGrade(x) & FliesThroughAir(x)))", "score": 0}
{"id": "eqasc_validation_389", "prediction": "all x.(Airplane(x) -> (Vehicle(x) & LeavesGround(x) & FlysThroughAir(x)))", "score": 0}
{"id": "eqasc_validation_389", "prediction": "all x y.((Airplane(x) & Ground(y)) -> (Leaves(x,y) & FlowsThroughAir(x)))", "score": 0}
{"id": "eqasc_validation_389", "prediction": "all x.(Airplane(x) -> (LowerGround(x) & FliesThroughAir(x)))", "score": 0}
{"id": "eqasc_validation_389", "prediction": "all x y z.((Airplane(x) & Ground(y) & Air(z)) -> (LimitsAt(x,y) & CapableOf(x,z)))", "score": 0}
{"id": "eqasc_validation_389", "prediction": "all x.(Airplane(x) -> (LeaveGround(x) & FlyThroughAir(x)))", "score": 0}
{"id": "eqasc_validation_389", "prediction": "all x.(Airplane(x) -> (LeavingGround(x) & FlyingThroughAir(x)))", "score": 0}
{"id": "eqasc_validation_389", "prediction": "all x.(Airplane(x) -> (LeavingGround(x) & FloatingThroughAir(x)))", "score": 0}
{"id": "eqasc_validation_389", "prediction": "all x.(Airplane(x) -> (Carrier(x) & LeavesGround(x) & FliesThroughAir(x)))", "score": 0}
{"id": "eqasc_validation_390", "prediction": "all x.(Airplane(x) -> HighAboveGround(x))", "score": 0}
{"id": "eqasc_validation_390", "prediction": "all x.(Airplane(x) -> TravelsHighAhead(x))", "score": 0}
{"id": "eqasc_validation_390", "prediction": "all x.(Aviation(x) -> TravelsHighAboveGround(x))", "score": 0}
{"id": "eqasc_validation_390", "prediction": "all x.(Airplane(x) -> TravelHighAboveGround(x))", "score": 0}
{"id": "eqasc_validation_390", "prediction": "all x.(Airplane(x) -> TravelsHighAboveGround(x))", "score": 0}
{"id": "eqasc_validation_390", "prediction": "all x.(Airplane(x) -> TravelsHighAheadGround(x))", "score": 0}
{"id": "eqasc_validation_390", "prediction": "all x.(Airplane(x) -> CanTravelHighAboveGround(x))", "score": 0}
{"id": "eqasc_validation_390", "prediction": "all x.(Airplane(x) -> TravelHeadStop(x))", "score": 0}
{"id": "eqasc_validation_390", "prediction": "all x y.((Airplane(x) & Ground(y)) -> HighAbove(x,y))", "score": 0}
{"id": "eqasc_validation_390", "prediction": "all x.(Airplane(x) -> (TravelsHighAboveGround(x) & UsesFor(x)))", "score": 0}
{"id": "eqasc_validation_391", "prediction": "all x.(Travel(x) -> RequiresNavigation(x))", "score": 0}
{"id": "eqasc_validation_391", "prediction": "all x.(Travel(x) -> (NavigationRequired(x) | Requires(x)))", "score": 0}
{"id": "eqasc_validation_391", "prediction": "all x y.((Travel(x) & Form(y)) -> RequiresNavigation(x,y))", "score": 0}
{"id": "eqasc_validation_391", "prediction": "all x.(Travel(x) -> exists y.(Navigation(y) & Requires(x,y))))", "score": -1}
{"id": "eqasc_validation_391", "prediction": "all x.(Travel(x) -> (RequiresNavigation(x) & SomeFormOrSomeFormOrBetter(x)))", "score": 0}
{"id": "eqasc_validation_391", "prediction": "all x.(Travel(x) -> (RequiresNavigation(x) & InSomeForm(x)))", "score": 0}
{"id": "eqasc_validation_391", "prediction": "all x.(Travel(x) -> (RequiresNavigation(x) & In(x,y)))", "score": 0}
{"id": "eqasc_validation_391", "prediction": "all x.(Travel(x) -> (RequiresNavigation(x) & (RequiresNavigation(x) | RequiresNavigation(x))))", "score": 0}
{"id": "eqasc_validation_391", "prediction": "all x.(Travel(x) -> (Navigation(x) | RequiresForm(x)))", "score": 0}
{"id": "eqasc_validation_392", "prediction": "all x.((Vehicle(x) & InUse(x)) -> RequiresNavigation(x))", "score": 0}
{"id": "eqasc_validation_392", "prediction": "all x.((VehicleInUse(x) & RequiresNavigation(x)) -> InUse(x))", "score": 0}
{"id": "eqasc_validation_392", "prediction": "all x.(UseWithInVehicle(x) -> RequiresNavigation(x))", "score": 0}
{"id": "eqasc_validation_393", "prediction": "all x y.((Heat(x) & Weather(y) & Stormy(x) & GreaterChanceOfRain(y)) -> MoreChanceOfRain(x,y))", "score": 0}
{"id": "eqasc_validation_393", "prediction": "all x.((Weather(x) & Stormy(x)) -> GreaterCauseOfRain(x))", "score": 0}
{"id": "eqasc_validation_393", "prediction": "all x.(StormyWeather(x) -> GreaterChanceOfRain(x))", "score": 0}
{"id": "eqasc_validation_393", "prediction": "all x.(Stormy(x) -> GreaterChanceOfRain(x))", "score": 0}
{"id": "eqasc_validation_393", "prediction": "all x.((Weather(x) & Stormy(x)) -> LessChanceOfRain(x))", "score": 0}
{"id": "eqasc_validation_393", "prediction": "all x y z.((StormyWeather(x) & Stormy(y) & Rain(z)) -> greaterChanceOf(x,z))", "score": 0}
{"id": "eqasc_validation_393", "prediction": "all x y z.((Weather(x) & Stormy(x) & RainTogether(y) & Stormy(z)) -> GreaterChanceOfRain(y,z))", "score": 0}
{"id": "eqasc_validation_393", "prediction": "all x.((WeatherStormy(x) & GreaterChanceOfRain(x)) -> Stormy(x))", "score": 0}
{"id": "eqasc_validation_393", "prediction": "all x.((Weather(x) & Stormy(x)) -> GreaterChanceOfRain(x))", "score": 0}
{"id": "eqasc_validation_393", "prediction": "all x y.((Weather(x) & Stormy(x)) -> GreaterChanceOfRain(y,x))", "score": 0}
{"id": "eqasc_validation_393", "prediction": "all x y.((Weather(x) & Stormy(x)) -> GreaterChanceOfRain(x))", "score": 0}
{"id": "eqasc_validation_393", "prediction": "-StormyWeather(x) -> GreaterChanceOfRain(x))", "score": -1}
{"id": "eqasc_validation_394", "prediction": "all x y.((Parse(x) & Rain(y)) -> (DisturbedCrops(y) & RainSubject(y)))", "score": 0}
{"id": "eqasc_validation_394", "prediction": "-((Sentence(x) & RainDestroyedCrops(x)) -> RainSubject(x))", "score": 0}
{"id": "eqasc_validation_394", "prediction": "all x y.((Sentence(x) & Rain(y)) -> (DistributedCrops(y,x) & RainSubject(x)))", "score": 0}
{"id": "eqasc_validation_394", "prediction": "all x.((Spring(x) & RainDamagedCrops(x)) -> RainSubject(x))", "score": 0}
{"id": "eqasc_validation_394", "prediction": "(Littler(Lark(r) & InSpring(r) & InSignificant(r) & InSupply(r) & InSupply(r) & InSupply(r) & InSupply(r) & InSupply(r) & InSupplement(r)) isSubject(r))", "score": -1}
{"id": "eqasc_validation_394", "prediction": "(Concept(Rain(Rain) -> DestroyedCrops(Rain))", "score": -1}
{"id": "eqasc_validation_394", "prediction": "all x y.((Paragraph(x) & Rain(y) & DamagedCrops(y,y)) -> Subject(x))", "score": 0}
{"id": "eqasc_validation_394", "prediction": "all x y z.((Sentence(x) & Rain(y) & Crops(z)) -> (Destroyed(y,z) | Subject(y,z)))", "score": 0}
{"id": "eqasc_validation_394", "prediction": "all x y.((Pence(x,y) & RainOrCrops(x)) -> Dramatic(y,x),plaint(x))", "score": -1}
{"id": "eqasc_validation_394", "prediction": "all x y.((Sentence(x) & Rain(y)) -> DestroyedCrops(y))", "score": 0}
{"id": "eqasc_validation_394", "prediction": "(Body ofOrchestra ((Parse(Rain) & ConstructedCrops)) -> RainSubject(Rain))", "score": -1}
{"id": "eqasc_validation_394", "prediction": "(Putin with TheRain(s) & -DisruptsCrops(s)) -> RainSubject(s))", "score": -1}
{"id": "eqasc_validation_394", "prediction": "(See Also: InConclusionTheRainDamagedCrops(Rain) -> Subject(Rain))", "score": -1}
{"id": "eqasc_validation_394", "prediction": "all x y.((Penalty(x) & Rain(y) & DefectedCrops(y)) -> Subject(x,y))", "score": 0}
{"id": "eqasc_validation_394", "prediction": "all x y.((Penalty(x) & Storm(y)) -> (DestroyedCrops(x,y) & RainSubject(x)))", "score": 0}
{"id": "eqasc_validation_394", "prediction": "(Example: In sentence The RainDestroyedCrops(x) & RainSubject(x))", "score": -1}
{"id": "eqasc_validation_395", "prediction": "all x.(StormyWeather(x) -> ChanceOfDestroyedCrops(x))", "score": 0}
{"id": "eqasc_validation_395", "prediction": "all x.(StormyWeather(x) -> ChanceOfDamagedCrops(x))", "score": 0}
{"id": "eqasc_validation_395", "prediction": "all x.((Weather(x) & Stormy(x)) -> chanceOfDisruptedCrops(x))", "score": 0}
{"id": "eqasc_validation_395", "prediction": "all x y.((WeatherStormy(x) & Climate(y)) -> ChanceOfDisruptions(x,y))", "score": 0}
{"id": "eqasc_validation_395", "prediction": "all x.((WeatherStormy(x) & ChanceOfCropsDestroyed(x)) -> Storny(x))", "score": 0}
{"id": "eqasc_validation_395", "prediction": "all x.((Weather(x) & Stormy(x)) -> ChanceOfDisturbedCrops(x))", "score": 0}
{"id": "eqasc_validation_395", "prediction": "all x.(Stormy(x) -> CancelDisaster(x))", "score": 0}
{"id": "eqasc_validation_395", "prediction": "all x.((WeatherStormy(x) & ChanceOfDamagedCrops(x)) -> WorstStorms(x))", "score": 0}
{"id": "eqasc_validation_395", "prediction": "all x.((Weather(x) & Stormy(x)) -> (ChanceOfDestroyingCrops(x)))", "score": 0}
{"id": "eqasc_validation_395", "prediction": "all x.((Weather(x) & Stormy(x)) -> ChanceOfDisruptedCrops(x))", "score": 0}
{"id": "eqasc_validation_395", "prediction": "all x.(StormyWeather(x) -> ChanceOfDestroyingCrops(x))", "score": 0}
{"id": "eqasc_validation_395", "prediction": "all x.((Weather(x) & Stormy(x)) -> ChanceOfDestroyedCrops(x))", "score": 0}
{"id": "eqasc_validation_395", "prediction": "all x.((Weather(x) & Storn(x)) -> ChanceOfDestroyedCrops(x))", "score": 0}
{"id": "eqasc_validation_396", "prediction": "all x.(SpringDay(x) -> Stormy(x))", "score": 0}
{"id": "eqasc_validation_396", "prediction": "(Stormy(SpringDay) & Sunny(SpringDay))", "score": 0}
{"id": "eqasc_validation_396", "prediction": "(SpringJaunt(x) -> Stormy(x))", "score": 0}
{"id": "eqasc_validation_396", "prediction": "all x.(SpringDay(x) -> CanBeStormy(x))", "score": 0}
{"id": "eqasc_validation_396", "prediction": "all x y.((SpringDay(x) & Spring(y)) -> Stormy(x))", "score": 0}
{"id": "eqasc_validation_396", "prediction": "all x.(Spring(x) -> Stormy(x))", "score": 0}
{"id": "eqasc_validation_397", "prediction": "all x.(SpringDay(x) -> RainWeather(x))", "score": 0}
{"id": "eqasc_validation_397", "prediction": "all x.(SpringDay(x) -> CanSeeRainWeather(x))", "score": 0}
{"id": "eqasc_validation_397", "prediction": "all x y.((SpringDay(x) & RainWeather(y)) -> CanSee(x,y))", "score": 0}
{"id": "eqasc_validation_397", "prediction": "all x.((SpringDays(x) & RainWeather(x)) -> Sees(x,y))", "score": 0}
{"id": "eqasc_validation_397", "prediction": "all x.((SpringDay(x) & RainWeather(x)) -> CanSeeCast(x))", "score": 0}
{"id": "eqasc_validation_397", "prediction": "all x.(Spring(x) -> CanSeeRainWeather(x))", "score": 0}
{"id": "eqasc_validation_397", "prediction": "all x.(Spring(x) -> (SeeSorrowWeather(x) | SeeRainWeather(x)))", "score": 0}
{"id": "eqasc_validation_397", "prediction": "all x yc.((SpringDay(x) & SpringDay(y) & CanSelectRainWeather(x,y)) -> CanSeeRainWeather(y))", "score": -1}
{"id": "eqasc_validation_397", "prediction": "(all x.(SpringDay(x) -> WatchRainWeather(x)))", "score": 0}
{"id": "eqasc_validation_397", "prediction": "all x.(SpringDay(x) -> (SeesRainWeather(x) & AprilDay(x)))", "score": 0}
{"id": "eqasc_validation_397", "prediction": "all x.((SpringDay(x) & RainWeather(x)) -> CanSee(x,rainWeather))", "score": 0}
{"id": "eqasc_validation_397", "prediction": "all x.((SpringDay(x) & RainWeather(x)) -> CanSee(x,y))", "score": 0}
{"id": "eqasc_validation_397", "prediction": "all x.(SpringDay(x) -> (SeeRainWeather(x) | SeeRainWeather(x)))", "score": 0}
{"id": "eqasc_validation_397", "prediction": "all x.((SpringDay(x) & RainWeather(x)) -> CanSee(x,Y))", "score": 0}
{"id": "eqasc_validation_398", "prediction": "all x.(LowPressure(x) -> (CloudyWeather(x) | StormyWeather(x)))", "score": 0}
{"id": "eqasc_validation_398", "prediction": "all x y.((LowPressure(x) & (CloudyWeather(y) | StormyWeather(y))) -> AssociatedWith(x,y))", "score": 0}
{"id": "eqasc_validation_398", "prediction": "all x.((LowPressure(x) & (CloudyWeather(x) | StormyWeather(x))) -> Associative(x))", "score": 0}
{"id": "eqasc_validation_398", "prediction": "all x.(LOWPressure(x) -> ((CloudyWeather(x) | StormyWeather(x))))", "score": 0}
{"id": "eqasc_validation_398", "prediction": "all x.((LowPressure(x) & (CloudyWeather(x) | StormyWeather(x))) -> Associated(x,cloudyWeather))", "score": 0}
{"id": "eqasc_validation_398", "prediction": "all x.((LowPressure(x) & (CloudyWeather(x) | StormyWeather(x))) -> Associates(x,cloudyweather))", "score": 0}
{"id": "eqasc_validation_399", "prediction": "all x.((LowPressure(x) & GreaterChanceOfRain(x)) -> CausesLaterChanceOfRain(x))", "score": 0}
{"id": "eqasc_validation_399", "prediction": "all x.(LowPressure(x) -> GreaterChanceOfRain(x))", "score": 0}
{"id": "eqasc_validation_399", "prediction": "all x y.(LastPressure(x) & GreaterChanceOfRain(y))", "score": 0}
{"id": "eqasc_validation_399", "prediction": "all x.((LowPressure(x) & GreaterChanceOfRain(x)) -> Causes(x))", "score": 0}
{"id": "eqasc_validation_399", "prediction": "all x.((LowPressure(x) & GreaterChanceOfRain(x)) -> CausesGranderRainChance(x))", "score": 0}
{"id": "eqasc_validation_399", "prediction": "all x.((LowPressure(x) & GreaterChanceOfRain(x)) -> CausesLowPressure(x))", "score": 0}
{"id": "eqasc_validation_399", "prediction": "all x y z.((LowPressure(x) & Rain(y) & Rain(z)) -> GreaterChanceOf(x,y,z))", "score": 0}
{"id": "eqasc_validation_399", "prediction": "all x.(LowPressureCausesGreaterChanceOfRain(x) -> GreaterChanceOfRain(x))", "score": 0}
{"id": "eqasc_validation_399", "prediction": "all x y.((LowPressure(x) & Rain(y)) -> GreaterChance(x,y))", "score": 0}
{"id": "eqasc_validation_399", "prediction": "all x.((LowPressure(x) & GreaterChanceOfRain(x)) -> LowPressureIncreasesChanceOfRain(x))", "score": 0}
{"id": "eqasc_validation_399", "prediction": "all x.((LowPressure(x) & GreaterChanceOfRain(x)) -> Causes(x,lowpressure))", "score": 0}
{"id": "eqasc_validation_400", "prediction": "all x.((RapidWarming(x) & IncreasesGlobalStorminess(x) & CreatesPerfectConditions(x)) -> IncreasesGlobalStorminess(x))", "score": 0}
{"id": "eqasc_validation_400", "prediction": "all x y.((RapidWarming(x) & Hurricane(y)) -> (IncreasesGlobalStorminess(x) & CreatesPerfectConditions(x,y)))", "score": 0}
{"id": "eqasc_validation_400", "prediction": "all x.(RapidWarming(x) -> (IncreasesGlobalStorminess(x) & CreatesPerfectConditionsForHurricans(x)))", "score": 0}
{"id": "eqasc_validation_400", "prediction": "all x y z.((RapidWarming(x) & GlobalStorminess(y) & Hurricane(z)) -> (IncreasesGlobalSolutions(x,y) & CreatesPerfectConditions(x,z)))", "score": 0}
{"id": "eqasc_validation_400", "prediction": "all x.(RapidWarming(x) -> (IncreasesGlobalStorminess(x) & CreatesPerfectConditionsForHurricane(x)))", "score": 0}
{"id": "eqasc_validation_400", "prediction": "all x y z.((RapidWarming(x) & GlobalStorminess(y) & Hurricane(z)) -> IncreasesGlobal(x,y))", "score": 0}
{"id": "eqasc_validation_400", "prediction": "all x y z.((RapidWarming(x) & Hurricane(y) & GlobalStorminess(z)) -> (Increases(x,z) & CreatesPerfectConditions(x)))", "score": 0}
{"id": "eqasc_validation_400", "prediction": "all x y.((RapidWarming(x) & Hurricane(y) & ImprovesGlobalStorminess(x,y)) -> CreatesPerfectConditions(x))", "score": 0}
{"id": "eqasc_validation_400", "prediction": "all x y.((RapidWarming(x) & Hurricane(y)) -> (IncreasesGlobalStorminess(x,y) & CreatesPerfectConditions(x,y)))", "score": 0}
{"id": "eqasc_validation_400", "prediction": "all x y z.((RapidWarming(x) & GlobalStorminess(y) & Hurricane(z)) -> (Increases(x,y) & CreatesPerfectConditions(x,z)))", "score": 0}
{"id": "eqasc_validation_400", "prediction": "all x y.((RapidWarming(x) & GlobalStorminess(y)) -> IncreasesGlobalAndCreatesPerfectConditionsForHurricane(x,y))", "score": 0}
{"id": "eqasc_validation_400", "prediction": "all x y.((RapidWarming(x) & GlobalStorminess(y)) -> IncreasesSpecificConditions(x,y))", "score": 0}
{"id": "eqasc_validation_400", "prediction": "all x y z.((RapidWarming(x) & GlobalStorminess(y) & Hurricane(z)) -> IncreasesAndCreatesPerfectConditions(x,y,z))", "score": 0}
{"id": "eqasc_validation_400", "prediction": "all x y.((RapidWarming(x) & Hurricane(y)) -> IncreasesGlobalStorminessAndCreatesPerfectConditions(x,y))", "score": 0}
{"id": "eqasc_validation_400", "prediction": "all x.(RapidWarming(x) -> IncreasesGlobalStorminess(x) & CreatesPerfectConditions(x))", "score": 0}
{"id": "eqasc_validation_401", "prediction": "all x.(Hurricane(x) -> GreaterChanceOfRain(x))", "score": 0}
{"id": "eqasc_validation_401", "prediction": "all x.(Hurricane(x) -> CausesGreaterChanceOfRain(x))", "score": 0}
{"id": "eqasc_validation_401", "prediction": "all x.(Hurricane(x) -> (CausesGreaterChanceOfRain(x) & CausesGreaterChanceOfRain(x)))", "score": 0}
{"id": "eqasc_validation_401", "prediction": "all x.(Hurricane(x) -> CausesFellowThanRain(x))", "score": 0}
{"id": "eqasc_validation_401", "prediction": "all x y.((Hurricane(x) & Hurricane(y)) -> CausesGreaterChanceOfRain(x,y))", "score": 0}
{"id": "eqasc_validation_401", "prediction": "all x.(Hurricane(x) -> CausesLargerChanceOfRain(x))", "score": 0}
{"id": "eqasc_validation_401", "prediction": "all x y z.((Hurricane(x) & Weather(y) & Rain(z)) -> CausesGreaterChanceOf(x,y,z))", "score": 0}
{"id": "eqasc_validation_401", "prediction": "all x y z.(Hurricane(x) & RainChance(y) & Causes(x,y) & RainChance(z))", "score": 0}
{"id": "eqasc_validation_401", "prediction": "all x y.((Hurricane(x) & Hurricane(y)) -> GreaterChanceOfRain(x,y))", "score": 0}
{"id": "eqasc_validation_401", "prediction": "all x y.((Hurricane(x) & Hurricane(y)) -> Maim ChanceOfRain(x,y))", "score": -1}
{"id": "eqasc_validation_402", "prediction": "all x.(Rain(x) -> (WonderfulThing(x) & HelpsPlantsGrow(x)))", "score": 0}
{"id": "eqasc_validation_402", "prediction": "all x y.((Rain(x) & Plant(y)) -> HelpsGrow(x,y))", "score": 0}
{"id": "eqasc_validation_402", "prediction": "all x.(Ruin(x) -> (WonderfulThing(x) & HelpsPlantsGrow(x)))", "score": 0}
{"id": "eqasc_validation_402", "prediction": "(all x.(Rain(x) -> WonderfulThing(x)) & HelpsPlantsGrow(x))", "score": 0}
{"id": "eqasc_validation_402", "prediction": "all x.(Rein(x) -> (WonderfulThing(x) & HelpsPlantsGrow(x)))", "score": 0}
{"id": "eqasc_validation_403", "prediction": "all x y.((StormyWeather(x) & Plant(y)) -> HelpsGrow(x,y))", "score": 0}
{"id": "eqasc_validation_403", "prediction": "all x y.((StormyWeather(x) & Plant(y) & HelpsGrowThrough(x,y)) -> HelpsGrow(x,y))", "score": 0}
{"id": "eqasc_validation_403", "prediction": "all x.((StormyWeather(x) & Plant(y)) -> HelpsGrow(x,y))", "score": 0}
{"id": "eqasc_validation_403", "prediction": "all x.(StormyWeather(x) -> HelpsPlantsGrow(x))", "score": 0}
{"id": "eqasc_validation_403", "prediction": "all x.((StormyWeather(x) & Plant(y)) -> HelpsGrow(y,x))", "score": 0}
{"id": "eqasc_validation_403", "prediction": "all x y.( (StormyWeather(x) & Plant(y)) -> HelpsGrow(x,y))", "score": 0}
{"id": "eqasc_validation_403", "prediction": "all x y.(StormyWeather(x) & Plant(y) & GrowWith(x,y))", "score": 0}
{"id": "eqasc_validation_403", "prediction": "all x.((StormyWeather(x) & Plants(y)) -> HelpsGrowWith(x,y))", "score": 0}
{"id": "eqasc_validation_403", "prediction": "all x.(StormyWeather(x) -> HelpsPlantsGrowThrough(x))", "score": 0}
{"id": "eqasc_validation_404", "prediction": "all x.(Rain(x) -> (Precipitation(x) & Rain(x)))", "score": 2}
{"id": "eqasc_validation_404", "prediction": "all x.(Rain(x) -> Precipitation(x))", "score": 2}
{"id": "eqasc_validation_405", "prediction": "all x.(StormyWeather(x) -> GreaterChanceOfPrecipitation(x))", "score": 0}
{"id": "eqasc_validation_405", "prediction": "all x.((Weather(x) & Stormy(x)) -> GreaterChanceOfPrecipitation(x))", "score": 0}
{"id": "eqasc_validation_405", "prediction": "all x.((Weather(x) & Stormy(x)) -> GreaterSharkOfPrecipitation(x))", "score": 0}
{"id": "eqasc_validation_405", "prediction": "exists x.(StormyWeather(x) & GreaterChanceOfPrecipitation(x))", "score": 0}
{"id": "eqasc_validation_405", "prediction": "all x.((Stormy(x) & Stormy(x)) -> GreaterChanceOfPrecipitation(x))", "score": 0}
{"id": "eqasc_validation_405", "prediction": "all x y.((Weather(x) & Stormy(x) & GreaterChanceOfPrecipitation(y)) -> IncreasedChanceOfPrecipitation(x,y))", "score": 0}
{"id": "eqasc_validation_405", "prediction": "all x.(StormyWeather(x) -> GreaterHabitOfPrecipitation(x))", "score": 0}
{"id": "eqasc_validation_405", "prediction": "all x y z.((Weather(x) & Stormy(x) & Precipitation(y) & Weather(z) & GreaterChanceOf(z,x)) -> GreaterChanceOf(x,y))", "score": 0}
{"id": "eqasc_validation_405", "prediction": "all x.((WeatherStormy(x) & GreaterChanceOfPrecipitation(x)) -> Stormy(x))", "score": 0}
{"id": "eqasc_validation_405", "prediction": "all x.(Weather(x) -> (Stormy(x) & GreaterChanceOfPrecipitation(x)))", "score": 0}
{"id": "eqasc_validation_405", "prediction": "all x.(Stormy(x) -> GreaterChanceOfPrecipitation(x))", "score": 0}
{"id": "eqasc_validation_405", "prediction": "all x y.((Weather(x) & Stormy(x) & IncreasingChanceOfPrecipitation(y)) -> MoreChanceOfPrecipitation(x,y))", "score": 0}
{"id": "eqasc_validation_406", "prediction": "all x.((Unsettled(x) & Stormy(x) & FrequentRain(x)) -> Common(x))", "score": 0}
{"id": "eqasc_validation_406", "prediction": "all x.((UnsettledStormyWeather(x) & FrequentRain(x) & Summer(x)) -> Common(x))", "score": 0}
{"id": "eqasc_validation_406", "prediction": "all x.((UnsettledStormyWeather(x) & FrequentRain(x)) -> Common(x))", "score": 0}
{"id": "eqasc_validation_406", "prediction": "all x y.((UnsettledStormousWeather(x) & FrequentRain(x)) -> Common(y))", "score": 0}
{"id": "eqasc_validation_406", "prediction": "all x.((Unsettled(x) & StormyWeather(x) & FrequentRain(x)) -> Common(x))", "score": 0}
{"id": "eqasc_validation_406", "prediction": "all x.((UnsettledWeather(x) & StormyWeather(x) & FrequentRain(x)) -> CommonMoment(x))", "score": 0}
{"id": "eqasc_validation_406", "prediction": "all x.((UnsettledStormyWeather(x) & FrequentRain(x)) -> SharedDuringSummer(x))", "score": 0}
{"id": "eqasc_validation_406", "prediction": "all x.((Unsettled(x) & StormyWeather(x) & FrequentRain(x)) -> CommonSummer(x))", "score": 0}
{"id": "eqasc_validation_406", "prediction": "all x.((UnsettledWeather(x) & StormyWeather(x) & FrequentRain(x) & Summer(x)) -> Common(x))", "score": 0}
{"id": "eqasc_validation_406", "prediction": "all x.((Unsettled(x) & StormyWeather(x) & FrequentRain(x)) -> CommonEvenDuringSummer(x))", "score": 0}
{"id": "eqasc_validation_406", "prediction": "all x.((UnsettledStormyWeather(x) & FragileRain(x) & Summer(x)) -> Common(x))", "score": 0}
{"id": "eqasc_validation_406", "prediction": "all x.((UnsettledStormyWeather(x) & FrequentRain(x)) -> CommonDuringSummer(x))", "score": 0}
{"id": "eqasc_validation_407", "prediction": "all x.(Summer(x) -> BringsStorms(x))", "score": 0}
{"id": "eqasc_validation_407", "prediction": "all x.(Summer(x) -> (BringsStorms(x) | BringsStorms(x)))", "score": 0}
{"id": "eqasc_validation_407", "prediction": "all x.(Summer(x) -> (BringsStorms(x) & BringsStorms(x)))", "score": 0}
{"id": "eqasc_validation_407", "prediction": "all x y.((Summer(x) & Storm(y)) -> Brings(x,y))", "score": 0}
{"id": "eqasc_validation_407", "prediction": "all x.((Summer(x) & BringsStorm(x)) -> SummerBrings(x,Storm(x))", "score": -1}
{"id": "eqasc_validation_407", "prediction": "all x.((Soul(x) & BringsStorms(x)) -> BringsStorms(x))", "score": 0}
{"id": "eqasc_validation_408", "prediction": "all x.(Weather(x) -> (AtmosphereState(x) & ParticularMomentInTime(x)))", "score": 0}
{"id": "eqasc_validation_408", "prediction": "all x.(Weather(x) -> (Atmosphere(x) & momentInTime(x)))", "score": 0}
{"id": "eqasc_validation_408", "prediction": "all x.(Weather(x) -> StandOfAtmosphere(x))", "score": 0}
{"id": "eqasc_validation_408", "prediction": "(StateOfAtmosphere(Weather) -> IdenticalMomentInTime(Weather))", "score": 0}
{"id": "eqasc_validation_408", "prediction": "all x.(Weather(x) -> StateOfAtmosphere(x))", "score": 0}
{"id": "eqasc_validation_408", "prediction": "all x.(Weather(x) -> exists y.(MomentInTime(y) & Atmosphere(x,y))))", "score": -1}
{"id": "eqasc_validation_408", "prediction": "all x.(Weather(x) -> Atmosphere(x))", "score": 0}
{"id": "eqasc_validation_408", "prediction": "all x y z.((Weather(x) & MomentInTime(y) & MomentInTime(z)) -> Atmosphere(x,y,z))", "score": 0}
{"id": "eqasc_validation_408", "prediction": "all x.(Weather(x) -> (Atmosphere(x) & PresentMoment(x)))", "score": 0}
{"id": "eqasc_validation_408", "prediction": "all x.(Weather(x) -> exists y z.(MomentInTime(y) & MomentInTime(z) & TheStateOfAtmosphere(x))))", "score": -1}
{"id": "eqasc_validation_408", "prediction": "all x.(Weather(x) -> (StateOfAtmosphere(x) & SpecificMomentInTime(x)))", "score": 0}
{"id": "eqasc_validation_408", "prediction": "all x.(Weather(x) -> (AtmosphereAtMoment(x) & Moment(x)))", "score": 0}
{"id": "eqasc_validation_408", "prediction": "all x.((Weather(x) & ParticularMomentInTime(x)) -> AtmosphereState(x))", "score": 0}
{"id": "eqasc_validation_408", "prediction": "all x y z.((Weather(x) & MomentInTime(y) & StateOfAtmosphere(z,y)) -> (AtmosphereInTime(x,y) | Season(z,y))))", "score": -1}
{"id": "eqasc_validation_408", "prediction": "all x.(Weather(x) -> AtmosphereState(x))", "score": 0}
{"id": "eqasc_validation_409", "prediction": "all x.(StormyAtmosphere(x) -> GreaterChanceOfRain(x))", "score": 0}
{"id": "eqasc_validation_409", "prediction": "all x.((StormyAtmosphere(x) & GreaterChanceOfRain(x)) -> StormyAtmosphere(x))", "score": 0}
{"id": "eqasc_validation_409", "prediction": "all x.((StatusOfAtmosphere(x) & Stormy(x)) -> GreaterChanceOfRain(x))", "score": 0}
{"id": "eqasc_validation_409", "prediction": "all x.((StatusOfAtmosphereStormy(x) & GreaterChanceOfRain(x)) -> GreaterChanceOfRain(x))", "score": 0}
{"id": "eqasc_validation_409", "prediction": "all x.((StormfulAtmosphere(x) & GreaterChanceOfRain(x)) -> StormyAtmosphere(x))", "score": 0}
{"id": "eqasc_validation_409", "prediction": "all x.((Status(x) & StormyAtmosphere(x)) -> GreaterCheerOfRain(x))", "score": 0}
{"id": "eqasc_validation_409", "prediction": "all x.(StormyAtmosphere(x) -> GreaterCrewOfRain(x))", "score": 0}
{"id": "eqasc_validation_409", "prediction": "all x.((StormfulAtmosphere(x) & GreaterChanceOfRain(x)) -> Stormy(x))", "score": 0}
{"id": "eqasc_validation_409", "prediction": "all x.((StayOfAtmosphereStormy(x)) -> GreaterChanceOfRain(x))", "score": 0}
{"id": "eqasc_validation_409", "prediction": "all x.((StatusStatusStatusStatusStatusStatusStatusStatusStatusStatusStatusStatusStatusStatusStunty(x)) -> GreaterChanceOfRain(x))", "score": 0}
{"id": "eqasc_validation_409", "prediction": "all x.((StatusOfAtmosphereStormy(x) & GreaterChanceOfRain(x)) -> Rainy(x))", "score": 0}
{"id": "eqasc_validation_409", "prediction": "all x.((Stormy(x) & StormyAtmosphere(x)) -> GreaterChanceOfRain(x))", "score": 0}
{"id": "eqasc_validation_410", "prediction": "all x.(Rain(x) -> Precipitation(x))", "score": 0}
{"id": "eqasc_validation_410", "prediction": "all x y.((Rain(x) & Precipitation(y)) -> FormOf(x,y))", "score": 0}
{"id": "eqasc_validation_410", "prediction": "all x.(Rain(x) -> NormalPrecipitation(x))", "score": 0}
{"id": "eqasc_validation_410", "prediction": "all x.(Rain(x) -> (OwnsPrecipitation(x) & UsuallyForm(x)))", "score": 0}
{"id": "eqasc_validation_410", "prediction": "all x.(Rain(x) -> Straw(x))", "score": 0}
{"id": "eqasc_validation_410", "prediction": "all x.(Rain(x) -> WellKnownPrecipitation(x))", "score": 0}
{"id": "eqasc_validation_410", "prediction": "all x.(Rain(x) -> PrecipitationForm(x))", "score": 0}
{"id": "eqasc_validation_411", "prediction": "all x.((Weather(x) & Stormy(x)) -> GreaterChanceOfPrecipitation(x))", "score": 0}
{"id": "eqasc_validation_411", "prediction": "exists x.(Stormy(x) -> GreaterAchanceOfPrecipitation(x))", "score": 0}
{"id": "eqasc_validation_411", "prediction": "all x.(StormyWeather(x) -> GreaterCauseOfPrecipitation(x))", "score": 0}
{"id": "eqasc_validation_411", "prediction": "all x.(StormyWeather(x) -> GreaterChanceOfPrecipitation(x))", "score": 0}
{"id": "eqasc_validation_411", "prediction": "all x.((Weather(x) & Stormy(x)) -> HigherCompensationOfPrecipitation(x))", "score": 0}
{"id": "eqasc_validation_411", "prediction": "exists x.(StormyWeather(x) & GreaterHabitOfPrecipitation(x))", "score": 0}
{"id": "eqasc_validation_411", "prediction": "all x y.((Weather(x) & Stormy(x)) -> GreaterChanceOfPrecipitation(x,y))", "score": 0}
{"id": "eqasc_validation_412", "prediction": "all x y.((HeavyRain(x) & Plant(y) & AbsorbsLargeAmountOfWater(x,y)) -> GoodForPlant(x,y))", "score": 0}
{"id": "eqasc_validation_412", "prediction": "all x.(FourThirdYearRain(x) -> AbsorbsLargeAmountOfWater(x))", "score": 0}
{"id": "eqasc_validation_412", "prediction": "all x y z.((Red Rain(x) & Heavy(y) & Plant(z)) -> AbsorbsFloor(x,y,z))", "score": -1}
{"id": "eqasc_validation_412", "prediction": "all x y.((HeavyRain(x) & Plant(y) & TakesAbsorbsLargeAmountOfWater(x,y)) -> RequiresAmountOfWater(y,x))", "score": 0}
{"id": "eqasc_validation_412", "prediction": "all x.((HeavyRain(x) & AppearsLargeAmountOfWater(x)) -> PlantAbsorbs(x))", "score": 0}
{"id": "eqasc_validation_412", "prediction": "all x.(HeavyRain(x) -> AbsorbsLargeAmountOfWater(x))", "score": 0}
{"id": "eqasc_validation_412", "prediction": "all x y z.((HeavyRain(x) & AbsorbsLargeAmountOfWater(y) & Plant(z)) -> CanFor(x,y,z))", "score": 0}
{"id": "eqasc_validation_412", "prediction": "so that, after a heavyrain, they absorbs largeamountOfWater(p))", "score": -1}
{"id": "eqasc_validation_412", "prediction": "all x.(HeavyRain(x) -> CanAbsorbSmallAmountOfWater(x))", "score": 0}
{"id": "eqasc_validation_412", "prediction": "all x y.((FreshRain(x) & HeavyRain(y)) -> AbsorbsLargeAmount(x,y))", "score": 0}
{"id": "eqasc_validation_412", "prediction": "all x.(HeavyRain(x) -> CanAbsorbLargeAmountOfWater(x))", "score": 0}
{"id": "eqasc_validation_412", "prediction": "all x y z.((HeavyRain(x) & HeavyRain(y) & Plant(z)) -> AbsorbsLargeAmountOfWater(x,z))", "score": 0}
{"id": "eqasc_validation_412", "prediction": "all x y.((HeavyRain(x) & Plant(y)) -> AbsorbsLargerAmountOfWater(x,y))", "score": 0}
{"id": "eqasc_validation_412", "prediction": "all x.((ShapedRain(x) & HeavyRain(x)) -> AbsorbsLargeAmountOfWater(x))", "score": 0}
{"id": "eqasc_validation_412", "prediction": "all x y.((HeavyRain(x) & Plant(y)) -> AbsorbsLargeAmountOfWater(x,y))", "score": 0}
{"id": "eqasc_validation_412", "prediction": "all x y z.((HardRain(x) & Plant(y) & Water(z) & AbsorbsLargeAmount(x,z)) -> CanFinishWith(x,y,z))", "score": 0}
{"id": "eqasc_validation_413", "prediction": "all x.((WeatherStormy(x) & WaterBody(x)) -> PlantsAbsorbWater(x))", "score": 0}
{"id": "eqasc_validation_413", "prediction": "all x y.((Weather(x) & Stormy(x)) -> PlantsAbsorbWater(y))", "score": 0}
{"id": "eqasc_validation_413", "prediction": "all x.(StormyWeather(x) -> PlantsAbsorbWater(x))", "score": 0}
{"id": "eqasc_validation_413", "prediction": "All x.((Weather(x) & Stormy(x)) -> AbsorbsWater(x))", "score": -1}
{"id": "eqasc_validation_413", "prediction": "all x y.((WarmThaw(x) & Stormy(x)) -> PlantsAbsorbWeather(y))", "score": 0}
{"id": "eqasc_validation_413", "prediction": "all x.((WeatherShadowy(x) & Storny(x)) -> PlantsAbsorbWater(x))", "score": 0}
{"id": "eqasc_validation_413", "prediction": "all x y.((Weather(x) & Stormy(x) & Plants(y)) -> WaterAbsorbing(y))", "score": 0}
{"id": "eqasc_validation_413", "prediction": "all x.(All y.((Weather(x) & Stormy(x)) -> AbsorbWater(x,y))", "score": -1}
{"id": "eqasc_validation_413", "prediction": "all x.((WeatherStormy(x) & Plants(x)) -> AbsorbWater(x))", "score": 0}
{"id": "eqasc_validation_413", "prediction": "all x.((WeatherIsStormy(x) & PlantsAbsorbWater(x)) -> Stormy(x))", "score": 0}
{"id": "eqasc_validation_413", "prediction": "all x.((Weather(x) & Stormy(x)) -> PlantsAbsorbWater(x))", "score": 0}
{"id": "eqasc_validation_413", "prediction": "all x y.((Weather(x) & Stormy(x)) -> PlantsAbsorb(y,Water,Water))", "score": 0}
{"id": "eqasc_validation_414", "prediction": "all x.(StormyWeather(x) -> GreaterChanceOfPrecipitation(x))", "score": 0}
{"id": "eqasc_validation_414", "prediction": "all x.((Weather(x) & Stormy(x)) -> GreaterChanceOfPrecipitation(x))", "score": 0}
{"id": "eqasc_validation_414", "prediction": "all x.((Weather(x) & Stormy(x)) -> greaterChanceOfPrecipitation(x))", "score": 0}
{"id": "eqasc_validation_414", "prediction": "all x.((Weather(x) & Stormy(x)) -> Maim ChanceOfPrecipitation(x))", "score": -1}
{"id": "eqasc_validation_414", "prediction": "all x.(StormyWeather(x) -> GreaterCauseOfPrecipitation(x))", "score": 0}
{"id": "eqasc_validation_414", "prediction": "all x.((Weather(x) & Stormy(x)) -> GreaterCauseOfPrecipitation(x))", "score": 0}
{"id": "eqasc_validation_414", "prediction": "all x.(StormyWeather(x) -> GreaterChancePeriodOfPrecipitation(x))", "score": 0}
{"id": "eqasc_validation_414", "prediction": "all x.((Wall(x) & Stormy(x)) -> GreaterChanceOfPrecipitation(x))", "score": 0}
{"id": "eqasc_validation_415", "prediction": "(all x.(Rain(x) -> Good(x)) | (DisruptiveFlooding(x) & LotsOfRain(x))))", "score": -1}
{"id": "eqasc_validation_415", "prediction": "all x.(Rain(x) -> (Good(x) | -DestructiveFlooding(x)))", "score": 0}
{"id": "eqasc_validation_415", "prediction": "(all x.(Rain(x) -> Good(x)) & all y.(Large(y) & Rain(y)) -> DestructiveFlooding(y)))", "score": -1}
{"id": "eqasc_validation_415", "prediction": "(all x.(Rain(x) -> Good(x)) | (LotsOfRain(x) -> DestructiveFlooding(x))))", "score": -1}
{"id": "eqasc_validation_415", "prediction": "all x.(Rain(x) -> (Good(x) & LotsOfRain(x) & CausesDestructiveFlooding(x)))", "score": 0}
{"id": "eqasc_validation_415", "prediction": "exists x.(Rain(x) & Good(x) & -DestructiveFlooding(x))", "score": 0}
{"id": "eqasc_validation_415", "prediction": "all x.((Rain(x) & Good(x)) -> (LiquidRain(x) & CausesDestructiveFlooding(x)))", "score": 0}
{"id": "eqasc_validation_415", "prediction": "(all x.(Rain(x) -> Good(x)) & (DisruptiveFlooding(x) | Damaging(x))))", "score": -1}
{"id": "eqasc_validation_415", "prediction": "(all x.(Rain(x) -> Good(x)) & all y.(Rain(y) -> DestructiveFlooding(y))))", "score": -1}
{"id": "eqasc_validation_415", "prediction": "all x y.((Rain(x) & Drainage(y)) -> (Good(x) & CausesDestructiveFlooding(y)))", "score": 0}
{"id": "eqasc_validation_415", "prediction": "all x y.((Rain(x) & Reliable(y)) -> (Bad(x) & Leamy(y)))", "score": 0}
{"id": "eqasc_validation_415", "prediction": "(all x.(Rain(x) -> Good(x)) & all y.(Rain(y) -> DestructiveFlooding(y)))", "score": 0}
{"id": "eqasc_validation_415", "prediction": "(all x.(Rain(x) -> Good(x)) & (LotsOfRain(x) -> DestructiveFlooding(x)))", "score": 0}
{"id": "eqasc_validation_416", "prediction": "all x y.((StormyWeather(x) & FloodingChance(y)) -> IncreasesChances(x,y))", "score": 0}
{"id": "eqasc_validation_416", "prediction": "all x.((StormyWeather(x) & IncreasesChancesOfFlooding(x)) -> IncreasesChancesOfFlooding(x))", "score": 0}
{"id": "eqasc_validation_416", "prediction": "all x.(StormyWeather(x) -> IncreasesChancesOfFlooding(x))", "score": 0}
{"id": "eqasc_validation_416", "prediction": "all x y.((StormyWeather(x) & Flooding(y)) -> IncreasesSchances(x,y))", "score": 0}
{"id": "eqasc_validation_416", "prediction": "all x y.((StormyWeather(x) & FloodingChance(y)) -> Increases(x,y))", "score": 0}
{"id": "eqasc_validation_416", "prediction": "all x y z.((StormyWeather(x) & Flooding(y) & Chance(z)) -> Increased(x,y,z))", "score": 0}
{"id": "eqasc_validation_416", "prediction": "all x y.((StormyWeather(x) & FloodingChance(y)) -> IncreasesHabitat(x,y))", "score": 0}
{"id": "eqasc_validation_416", "prediction": "all x y.((StormyWeather(x) & FloodingChances(y)) -> IncreasesChance(x,y))", "score": 0}
{"id": "eqasc_validation_416", "prediction": "all x y.((StormyWeather(x) & FloodingChance(y)) -> IncreasesChance(x,y))", "score": 0}
{"id": "eqasc_validation_416", "prediction": "all x y z.((StormyWeather(x) & FloodingChance(y) & StormyWeather(z)) -> IncreasesChances(x,y))", "score": 0}
{"id": "eqasc_validation_416", "prediction": "all x y.((StormyWeather(x) & FloodingChance(y)) -> Increased(x,y))", "score": 0}
{"id": "eqasc_validation_416", "prediction": "all x y z.((StormyWeather(x) & Flooding(y) & StormyWeather(z)) -> IncreasesChances(x,z))", "score": 0}
{"id": "eqasc_validation_416", "prediction": "all x.((StormyWeather(x) & IncreasesNecesssOfFlooding(x)) -> IncreasesChancesOfFlooding(x))", "score": 0}
{"id": "eqasc_validation_417", "prediction": "all x.(Erosion(x) -> (LessOfSoil(x) & CausedByRain(x) & CausedByWind(x)))", "score": 0}
{"id": "eqasc_validation_417", "prediction": "all x.(Erosion(x) -> (LossOfSoil(x) & CausedByRainAndWind(x)))", "score": 0}
{"id": "eqasc_validation_417", "prediction": "all x.(Erosion(x) -> (LossOfSoil(x,Rain) & LossOfSoil(x,Wind)))", "score": 0}
{"id": "eqasc_validation_417", "prediction": "all x.(Erosion(x) -> (LossOfSoil(x) & CausedByRain(x) & CausedByWind(x)))", "score": 0}
{"id": "eqasc_validation_417", "prediction": "all x.(Erosion(x) -> (LastOrTumbleRain(x) & CausesWind(x)))", "score": 0}
{"id": "eqasc_validation_417", "prediction": "all x y.((Erosion(x) & Soil(y)) -> (LossOf(x,y) | CausedBy(x,war)))", "score": 0}
{"id": "eqasc_validation_417", "prediction": "all x.(Erosia(x) -> (LossOfSoil(x) & CausedByRainAndWind(x)))", "score": 0}
{"id": "eqasc_validation_417", "prediction": "all x.((Erosion(x) & Rain(y) & Wind(z)) -> LossOfSoil(x))", "score": 0}
{"id": "eqasc_validation_417", "prediction": "all x.(Erosion(x) -> (LossOfSoil(x) & CausedBy(x,rain,wind)))", "score": 0}
{"id": "eqasc_validation_417", "prediction": "all x y.((Erosion(x) & Rain(y)) -> DamagedSoil(x))", "score": 0}
{"id": "eqasc_validation_417", "prediction": "all x.(Erosion(x) -> (LessOrderOfSoil(x) & CausedByRainAndWind(x)))", "score": 0}
{"id": "eqasc_validation_418", "prediction": "all x.((Weather(x) & Stormy(x)) -> GreaterChanceOfErosion(x))", "score": 0}
{"id": "eqasc_validation_418", "prediction": "all x y.((Weather(x) & Stormy(x)) -> GreaterChanceOfErosion(y))", "score": 0}
{"id": "eqasc_validation_418", "prediction": "all x.((Weather(x) | Stormy(x)) -> GreaterChanceOfErosion(x))", "score": 0}
{"id": "eqasc_validation_418", "prediction": "all x.(Storm(x) -> GreaterChanceOfErosion(x))", "score": 0}
{"id": "eqasc_validation_418", "prediction": "all x.((WeatherStormy(x) & GreaterChanceOfErosion(x)) -> Stormy(x))", "score": 0}
{"id": "eqasc_validation_418", "prediction": "all x.((Weather(x) & Stormy(x)) -> GreaterCauseOfErosion(x))", "score": 0}
{"id": "eqasc_validation_418", "prediction": "all x.(Stormy(x) -> greaterChanceOfErosion(x))", "score": 0}
{"id": "eqasc_validation_419", "prediction": "Rain Rain ReduitsVisibilityAndMakesPacementDangerous(Rain)", "score": -1}
{"id": "eqasc_validation_419", "prediction": "Rain Rain(Rain) & ReducesVisibility(Rain) & BecomesPementoisonDangerous(Rain))", "score": -1}
{"id": "eqasc_validation_419", "prediction": "all x.(RainRain(x) -> (ReducesVisibility(x) & MakesPavementDangerous(x)))", "score": 0}
{"id": "eqasc_validation_419", "prediction": "(ReducesVisibility(Rain) & MakesPacewayDangerous(Rain))", "score": 0}
{"id": "eqasc_validation_419", "prediction": "all x y.((Rain(x) & Pavement(y)) -> (ReducesVisibility(x,y) & MakesDangerous(x,y)))", "score": 0}
{"id": "eqasc_validation_419", "prediction": "all x.(Rain(x) -> (ReducesVisibility(x) & MakesPavementDangerous(x)))", "score": 0}
{"id": "eqasc_validation_419", "prediction": "all x.(Rain(x) -> (ReducesVisibility(x) & MakesPatio pavement(x) & Dangerous(x)))", "score": -1}
{"id": "eqasc_validation_419", "prediction": "all x.((Rain(x) & ReducesVisibility(x) & MakesPatchedDiagnostic(x)) -> Rain(x))", "score": 0}
{"id": "eqasc_validation_419", "prediction": "all x.(Rain(x) -> (ReducesVisibility(x) & MakesPacewayDangerous(x)))", "score": 0}
{"id": "eqasc_validation_419", "prediction": "Rain Rain ReducesVisibilityAndMadePatternDangerous(Rain)", "score": -1}
{"id": "eqasc_validation_419", "prediction": "(all x.(Rain(x) -> ReducesVisibility(x)) & MakesPathwayDangerous(x))", "score": 0}
{"id": "eqasc_validation_419", "prediction": "Rain Rain ReducesVisibilityAndMakesPaceementDangerous(Rain)", "score": -1}
{"id": "eqasc_validation_419", "prediction": "(ReducesVisibility(Rain) & MakesPacewayDanger(Rain))", "score": 0}
{"id": "eqasc_validation_419", "prediction": "Rain Rain(Rain) -> (ReducesVisibility(Rain) & MakesPacementDangerous(Rain)))", "score": -1}
{"id": "eqasc_validation_420", "prediction": "all x.((Weather(x) & Stormy(x)) -> IncreasedChanceOfReducedVisibility(x))", "score": 0}
{"id": "eqasc_validation_420", "prediction": "all x.(StormyWeather(x) -> GreaterChanceOfRiskOfReducedVisibility(x))", "score": 0}
{"id": "eqasc_validation_420", "prediction": "all x.((Weather(x) & Stormy(x)) -> GreaterChanceOfReducedVisibility(x))", "score": 0}
{"id": "eqasc_validation_420", "prediction": "all x.(Stormy(x) -> GreaterChanceOfReducedVisibility(x))", "score": 0}
{"id": "eqasc_validation_420", "prediction": "all x.(StormyWeather(x) -> GreaterChanceOfReducedVisibility(x))", "score": 0}
{"id": "eqasc_validation_420", "prediction": "all x.((WeatherStormy(x) & GreaterChanceOfReducedVisibility(x)) -> WeatherStormy(x))", "score": 0}
{"id": "eqasc_validation_420", "prediction": "all x.((Weather(x) & Stormy(x)) -> GreaterCauseOfReducedVisibility(x))", "score": 0}
{"id": "eqasc_validation_420", "prediction": "all x.(StormyWeather(x) -> GreaterChanceOf(x,ReducedVisibility))", "score": 0}
{"id": "eqasc_validation_420", "prediction": "all x.((WeatherStormy(x) & GreaterChanceOfChanceOfReducedVisibility(x)) -> GreaterChanceOfReducedVisibility(x))", "score": 0}
{"id": "eqasc_validation_420", "prediction": "all x.((Waiting(x) & Stormy(x)) -> GreaterChanceOfReducedVisibility(x))", "score": 0}
{"id": "eqasc_validation_420", "prediction": "all x.((Weather(x) & Stormy(x)) -> greaterChanceOfReducedVisibility(x))", "score": 0}
{"id": "eqasc_validation_421", "prediction": "all x y z.((Protozoa(x) & Human(y) & Parasite(z)) -> MakesSick(x,y,z))", "score": 0}
{"id": "eqasc_validation_421", "prediction": "all x y.((Protozoa(x) & HumanParasite(y)) -> MakesHumansSick(x,y))", "score": 0}
{"id": "eqasc_validation_421", "prediction": "all x y.((Protozoa(x) & HumanParallel(y)) -> MakesSick(x,y))", "score": 0}
{"id": "eqasc_validation_421", "prediction": "all x.(Protozoa(x) -> MakesHumansSick(x))", "score": 0}
{"id": "eqasc_validation_421", "prediction": "all x.((Protozoa(x) & HumanParasite(x)) -> MakesHumanSick(x))", "score": 0}
{"id": "eqasc_validation_421", "prediction": "all x.((Protozoa(x) & HumanParasite(x)) -> MakesSick(x))", "score": 0}
{"id": "eqasc_validation_421", "prediction": "all x.((Protozoa(x) & HumanParasite(x)) -> MakesHumansSick(x))", "score": 0}
{"id": "eqasc_validation_421", "prediction": "all x y.((Protozoa(x) & Human(y) & Parasite(z)) -> MakesSick(x,y,z))", "score": 0}
{"id": "eqasc_validation_421", "prediction": "all x y.((Protozoa(x) & HumanParasite(y)) -> Makes(x,y))", "score": 0}
{"id": "eqasc_validation_421", "prediction": "all x y z.((Protozoa(x) & HumanParasite(y) & Human(z)) -> MakesHumansSick(x,y,z))", "score": 0}
{"id": "eqasc_validation_421", "prediction": "all x y.((Protozoa(x) & HumanParasite(y)) -> MakesSick(x,y))", "score": 0}
{"id": "eqasc_validation_422", "prediction": "all x.((IntestinalParasite(x) & Malaria(x)) -> Endémic(x))", "score": 0}
{"id": "eqasc_validation_422", "prediction": "all x.((IntestinalParasite(x) & Malaria(x)) -> Endemistic(x))", "score": 0}
{"id": "eqasc_validation_422", "prediction": "all x.(IntestinalParallax(x) & Malaria(x)) -> Encemic(x))", "score": -1}
{"id": "eqasc_validation_422", "prediction": "all x.((IntestinalParasite(x) | Malaria(x)) -> Endémic(x))", "score": 0}
{"id": "eqasc_validation_422", "prediction": "all x y.((IntestinalParasite(x) & Malaria(y)) -> Endemistic(x))", "score": 0}
{"id": "eqasc_validation_422", "prediction": "all x.((IntestinalParasite(x) | Malaria(x)) -> Endurance(x))", "score": 0}
{"id": "eqasc_validation_422", "prediction": "all x.((IntestinalParasite(x) & Malaria(x)) -> Endemic(x))", "score": 0}
{"id": "eqasc_validation_422", "prediction": "all x y z.((IntestinalParasite(x) & Malaria(y) & IntestinalParasite(z)) -> Enendemic(x,z))", "score": 0}
{"id": "eqasc_validation_422", "prediction": "all x y.((IntestinalParasite(x) and Malaria(y)) -> Endemic(x,y))", "score": 0}
{"id": "eqasc_validation_422", "prediction": "all x.(TentinalParasite(x) & IntestinalParasite(x) & Malaria(x)) -> Endemisic(x))", "score": -1}
{"id": "eqasc_validation_422", "prediction": "all x.(IntestinalParasite(x) & Malaria(x)) -> Endemiical(x))", "score": -1}
{"id": "eqasc_validation_423", "prediction": "all x.(IntestinalProtozoa(x) -> MakesHumansSick(x))", "score": 0}
{"id": "eqasc_validation_423", "prediction": "all x y.((IntestinalProtozoa(x) & Human(y)) -> MakesSick(x,y))", "score": 0}
{"id": "eqasc_validation_423", "prediction": "all x y z.((IntestinalProtozoa(x) & Human(y) & IntestinalProtozoa(z)) -> MakesSick(x,y,z))", "score": 0}
{"id": "eqasc_validation_423", "prediction": "all x y.((IntestinalProtozoa(x) & Human(y) & MadeSick(y)) -> MedicateProtozoa(x,y))", "score": 0}
{"id": "eqasc_validation_423", "prediction": "all x y.((IntestinalProtozoa(x) & Human(y)) -> MakesSick(x))", "score": 0}
{"id": "eqasc_validation_423", "prediction": "all x y z w.((IntestinalProtozoa(x) & Human(y) & IntestinalProtozoa(z) & Human(w)) -> MakeSick(z))", "score": 0}
{"id": "eqasc_validation_423", "prediction": "all x.(IntestinalProtozoa(x) -> MakesHumanSick(x))", "score": 0}
{"id": "eqasc_validation_423", "prediction": "all x y z.((IntestinalProtozoa(x) & Human(y) & (IntestinalProtozoa(z) | Human(z))) -> MakesSick(x,y,z))", "score": 0}
{"id": "eqasc_validation_423", "prediction": "all x y.((IntestinalProtozoa(x) & Human(y)) -> MakeSick(x,y))", "score": 0}
{"id": "eqasc_validation_424", "prediction": "all x.(IllnessCausingParasite(x) -> (Protozoa(x) & Cyclospora(x) & Toxoplasmagondii(x)))", "score": 0}
{"id": "eqasc_validation_424", "prediction": "all x.(IllnessCausingParasite(x) -> (Protozoa(x) & Cyclospora(x) & ToxoplasmaGondii(x)))", "score": 0}
{"id": "eqasc_validation_424", "prediction": "all x y.((IllnessCausingParasite(x) & (Protozoa(y) | Toxoplasma(y))) -> (Cyclospora(y) | ToxoplasmaGondii(y)))", "score": 0}
{"id": "eqasc_validation_424", "prediction": "all x.(IllnessCausingParasite(x) -> (Protozoa(x) | Toxoplasma(x)))", "score": 0}
{"id": "eqasc_validation_424", "prediction": "all x y.((Protozoa(x) & Oryzagomata(y)) -> (Cyclospora(x) | ToxoplasmaGondii(y)))", "score": 0}
{"id": "eqasc_validation_424", "prediction": "all x.(IllnessCausingParasite(x) -> (ProtozoaCyclospora(x) | ToxoplasmaGondii(x)))", "score": 0}
{"id": "eqasc_validation_424", "prediction": "all x y z.((Protozoa(x) & Molecule(y) & DiseaseCausingParasite(z)) -> (Cyclospora(x) | ToxoplasmaGondii(x)))", "score": 0}
{"id": "eqasc_validation_424", "prediction": "all x.(IllnessCausingParasite(x) -> (Cyclospora(x) | Toxoplasmagondii(x)))", "score": 0}
{"id": "eqasc_validation_424", "prediction": "all x.(IllnessFacingParasite(x) -> (ProtozoaCyclospora(x) | ToxoplasmaGondii(x)))", "score": 0}
{"id": "eqasc_validation_424", "prediction": "(all x.(IllnessCausingParasite(x) -> Cyclospora(x)) & all y.(ToxoplasmaGondii(y) -> ToxoplasmaGnomii(y)))", "score": 0}
{"id": "eqasc_validation_424", "prediction": "all x y.((Protozoa(x) & Spotton(y)) -> (DiseaseCausingParasite(x,y) | ToxoplasmaGanna(x,y)))", "score": 0}
{"id": "eqasc_validation_424", "prediction": "all x y.((Protozoa(x) & Cyclospora(y) & Toxoplasmagondii(y)) -> IllnessCausingParasite(x,y))", "score": 0}
{"id": "eqasc_validation_424", "prediction": "all x.(IllnessCausingParasites(x) -> (Protozoa(x) & Cyclospora(x) & Toxoplasmagondii(x)))", "score": 0}
{"id": "eqasc_validation_425", "prediction": "All x y z.((Toxoplasmagondii(x) & Human(y) & ToxoplasmaGondii(z)) -> MakesSickness(x,y,z))", "score": -1}
{"id": "eqasc_validation_425", "prediction": "All x y.((ToxoplasmaGOndii(x) & Human(y)) -> MakesSick(x,y))", "score": -1}
{"id": "eqasc_validation_425", "prediction": "(MakesHumansSick(ToxoplasmaGondii) & ToxoplasmaGondii(Toxoplasma))", "score": 0}
{"id": "eqasc_validation_425", "prediction": "all x.(Toxoplasma(x) -> MakesHumansSick(x))", "score": 0}
{"id": "eqasc_validation_425", "prediction": "(MakesHopeSick fromToxoplasmaGondii))", "score": -1}
{"id": "eqasc_validation_425", "prediction": "all x.(ToxoplasmaGondii(x) -> MakesHumansSick(x))", "score": 0}
{"id": "eqasc_validation_425", "prediction": "all x y z.((Toxoplasma Gondii) & Human(y) & Sick(z)) -> MakesSickness(x,y,z))", "score": -1}
{"id": "eqasc_validation_425", "prediction": "Toxoplasma gondii makes humans sick(Toxiplasma gondii)", "score": -1}
{"id": "eqasc_validation_425", "prediction": "all x y.((ToxoplasmaGondii(x) & Human(y)) -> MakesSick(x,y))", "score": 0}
{"id": "eqasc_validation_425", "prediction": "all x.(Toxoplasmagonii(x) -> MakesHumansSick(x))", "score": 0}
{"id": "eqasc_validation_425", "prediction": "(Grey Toxoplasma(Gondii) & ManMakesHumansSick(ToxoplasmaGondii))", "score": -1}
{"id": "eqasc_validation_425", "prediction": "All x y z.((Toxoplasma(x) & Gondii(y) & Human(z)) -> MakesSick(x,y,z))", "score": -1}
{"id": "eqasc_validation_426", "prediction": "all x.((Organism(x) & CanCauseLungInfection(x)) -> (Bacteria(x) | Viral(x) | Fungi(x) | Protozoa(x)))", "score": 0}
{"id": "eqasc_validation_426", "prediction": "all x y.((Bacteria(x) & Viruses(x)?Fungi(x) | Protozoa(x)) -> CausesLungInfection(x))", "score": -1}
{"id": "eqasc_validation_426", "prediction": "all x.((Bacteria(x) | Virals(x) | Fungi(x) | Protozoa(x)) -> CausesInfectionInLung(x))", "score": 0}
{"id": "eqasc_validation_426", "prediction": "all x.((Organism(x) & (Bacteria(x) | Viral(x) | Fungal(x) | Protozoa(x))) -> CanCauseInfectionInLung(x))", "score": 0}
{"id": "eqasc_validation_426", "prediction": "all x.((Bacteria(x) | Virus(x) | Fungi(x) | Protozoa(x)) -> CausesInfectionInLung(x))", "score": 0}
{"id": "eqasc_validation_426", "prediction": "(Organism(bacteria) | Organism(fungi) | Organism(protozoa)))", "score": -1}
{"id": "eqasc_validation_426", "prediction": "all x.((Organism(x) & (Bacteria(x) | Viral(x) | Fungi(x) | Protozoa(x))) -> CanCauseInfectionInLung(x))", "score": 0}
{"id": "eqasc_validation_426", "prediction": "all x y.((Creature(x) & (Bacteria(y) | Viral(y) | Fungi(y) | Protozoa(y))) -> CausesInfection(x,y))", "score": 0}
{"id": "eqasc_validation_426", "prediction": "all x y z.((Bacteria(x) & Virus(y) & Fungus(z) &/OrProtozoa(x)) -> CanCauseInfection(x,y,z))", "score": 0}
{"id": "eqasc_validation_426", "prediction": "all x y.((Bacteria(x) &/Virus(y) | Fungi(y) | Protozoa(x)) -> (CausesInfectionInLung(x) & CanCauseInfectionInLung(x)))", "score": 0}
{"id": "eqasc_validation_426", "prediction": "all x.((Organism(x) & CausesInfection(x,Lung)) -> (Bacteria(x) | Viral(x) | Fungi(x) | Protozoa(x)))", "score": 0}
{"id": "eqasc_validation_426", "prediction": "all x.((Bacteria(x) | Viral(x) | Fungi(x) | Protozoa(x)) -> CausesInfectionInLung(x))", "score": 0}
{"id": "eqasc_validation_426", "prediction": "all x y z.((Bacteria(x) | Viral(x) | Fungi(y) | Protozoa(z)) -> CausesInfectionInLung(x,y & InLung(y))", "score": -1}
{"id": "eqasc_validation_426", "prediction": "all x.((Organism(x) & (Bacteria(x) | Viral(x) | Fungi(x) | Protozoa(x))) -> CausesInfection(x))", "score": 0}
{"id": "eqasc_validation_426", "prediction": "all x y.((Organism(x) & (Bacteria(x,y) | Viral(y) | Fungi(y) | Protozoa(y))) -> CanCauseInfectionInLung(x,y))", "score": 0}
{"id": "eqasc_validation_426", "prediction": "all x y z.((Bacteria(x) & Viral(y) & Fungi(z)) -> (InfectsLung(x) | InfectsLung(y) & InfectsLung(z)))", "score": 0}
{"id": "eqasc_validation_427", "prediction": "all x.((Organisms(x) & CausesInfection(x)) -> MakesHumansSick(x))", "score": 0}
{"id": "eqasc_validation_427", "prediction": "all x.((Organism(x) & CanCauseInfection(x)) -> MakesHumansSick(x))", "score": 0}
{"id": "eqasc_validation_427", "prediction": "all x.((Organism(x) & CausesInfection(x)) -> MakesHumansSick(x))", "score": 0}
{"id": "eqasc_validation_427", "prediction": "all x.((Organism(x) & CauseInfection(x)) -> MakesHumanSick(x))", "score": 0}
{"id": "eqasc_validation_427", "prediction": "all x y.((Organism(x) & Organism(y) & CauseInfection(y)) -> Sick(x))", "score": 0}
{"id": "eqasc_validation_427", "prediction": "all x y.((Organism(x) & CanCauseInfection(x)) -> MakesHumanSick(y))", "score": 0}
{"id": "eqasc_validation_427", "prediction": "all x y z.((Organism(x) & Organism(y) & Infection(z)) -> CausesToMakeHumansSick(x,y,z))", "score": 0}
{"id": "eqasc_validation_427", "prediction": "all x y.((Organism(x) & InfectionCausesInfection(x)) -> MakesHumansSick(y))", "score": 0}
{"id": "eqasc_validation_427", "prediction": "all x y.((Organism(x) & Organism(y) & CanCauseInfection(x,y) & CanCauseInfection(y)) -> MakesHumansSick(x))", "score": 0}
{"id": "eqasc_validation_427", "prediction": "all x.((Organism(x) & CausesInfection(x)) -> MakesHumanSick(x))", "score": 0}
{"id": "eqasc_validation_427", "prediction": "all x y.((Organism(x) & Organism(y) & CausesInfection(x)) -> CanRefuseIllness(x,y))", "score": 0}
{"id": "eqasc_validation_427", "prediction": "all x.((Organism(x) & CauseInfection(x)) -> MakesHumansSick(x))", "score": 0}
{"id": "eqasc_validation_427", "prediction": "all x y.((Organism(x) & Organism(y) & CausesInfection(x,y)) -> MakesHumansSick(y))", "score": 0}
{"id": "eqasc_validation_427", "prediction": "all x y.((Organism(x) & Organism(y) & CausesInfection(x,y)) -> RemakesHumansSick(x))", "score": 0}
{"id": "eqasc_validation_428", "prediction": "(all x.((Protozoa(x) & ToxoplasmaGondiiMuscles(x) & NematodeTrichinellaSpiralis(x)) -> Sarcocystisssp.))", "score": -1}
{"id": "eqasc_validation_428", "prediction": "all x.((Protozoa(x) & ToxoplasmaGondiiMuscles(x)) -> NematodeTrichinellaSpiritis(x))", "score": 0}
{"id": "eqasc_validation_428", "prediction": "all x.(Protozoa(x) -> (ToxoplasmaGondii(x) & Muscles(x) & NematodeTrichinellaSpiralis(x)))", "score": 0}
{"id": "eqasc_validation_428", "prediction": "all x.((Protozoa(x) & Toxoplasmagondii(x)) -> MusclesNematodeTrichinellaSpiralisProtozoaSarcocystisssp.(Protozoas) & Sarcocystisssp.(Protozoa(x)))", "score": -1}
{"id": "eqasc_validation_428", "prediction": "all x.(Protozoa(x) -> (ToxoplasmagondiiMuscles(x) & NematodeTrichinellassilvius(x)))", "score": 0}
{"id": "eqasc_validation_428", "prediction": "all x.((Protozoa(x) & Toxoplasmagondii(x)) -> MusclesNematodeTrichinellaSpiralisProtozoaSarcocystisSp(x))", "score": 0}
{"id": "eqasc_validation_428", "prediction": "all x.(Protozoa(x) -> (ToxoplasmagondiiMuscle(x) & NematodeTrichinellaSpiriformis(x)))", "score": 0}
{"id": "eqasc_validation_428", "prediction": "all x.(Protozoa(x) -> (ToxoplasmaGandiiMuscles(x) & NematodeTrichinellaSpiralis(x) & SarcocystissSp(x)))", "score": 0}
{"id": "eqasc_validation_428", "prediction": "all x y.((Protozoa(x) & Toxoplasmagondii(x)) -> MusclesNematodeTrichinellaSpiralisProtozoaSarcocystisSp.(x)))", "score": -1}
{"id": "eqasc_validation_428", "prediction": "all x y z.((Protozoa(x) & Toxoplasmagondii(y) & Muscles(z) & NematodeTrichinellaSpiralis(x,y)) -> SarcocystisSp.(Protozoa(x)))", "score": -1}
{"id": "eqasc_validation_428", "prediction": "All x.(Protozoa(x) -> ToxoplasmagondiiMuscles(x))", "score": -1}
{"id": "eqasc_validation_428", "prediction": "all x y z.((Protozoa(x) & ToxoplasmaGondiiMuscles(y) & Muscles(z)) -> NucleusNematodeTrichinellaSpiralisProtozoaSarcocystisssp.(SarcocystisSp.))", "score": -1}
{"id": "eqasc_validation_428", "prediction": "all x.(Protozoa(x) -> ToxoplasmagondiiMusclesNematodeTrichinellas spiralisProtozoaSarcocystiss(x))", "score": -1}
{"id": "eqasc_validation_428", "prediction": "all x.(Protozoa(x) -> (ToxoplasmagondiiModules(x) & NematodeTrichinellassillini(x) & Sarcocystisssp)))", "score": -1}
{"id": "eqasc_validation_428", "prediction": "(NematodeDirtySpiralis(Protozoa) & SarcocystisSp(Protozoa))", "score": 0}
{"id": "eqasc_validation_428", "prediction": "all x.(Sarcocystis(x) -> Protozoa Toxoplasmagondii Muscles NematodeTrichinellas spiralis Protozoa Sarcocystisssp.(Sarcocystis(x)))", "score": -1}
{"id": "eqasc_validation_429", "prediction": "all x.(Sarcocystis(x) -> (CanParallelize(x) & (MakeThemSick(x) | MakeAthletesSick(x))))", "score": 0}
{"id": "eqasc_validation_429", "prediction": "all x.(Sarcocystis(x) -> (Parasites(x,humans) & MakesSick(x,humans)))", "score": 0}
{"id": "eqasc_validation_429", "prediction": "all x.(SarcocystisSpecies(x) -> (ParasitesHumans(x) & MakesHumansSick(x)))", "score": 0}
{"id": "eqasc_validation_429", "prediction": "all x.(AsterocystisSpecies(x) -> (ParasitesHumans(x) & MakesHumansSick(x)))", "score": 0}
{"id": "eqasc_validation_429", "prediction": "all x y z.((SpeciesOfSarcocystis(x,y) & Human(y) & Parasite(x,z)) -> ParasitesAndMakesSick(y,z))", "score": 0}
{"id": "eqasc_validation_429", "prediction": "all x.(SpeciesOfSarcocystis(x) -> (CanParasite(x,Humans) & MakesSick(x)))", "score": 0}
{"id": "eqasc_validation_429", "prediction": "all x.(SarcocystisSpecies(x) -> (ParatizesHumans(x) & MakesSick(x)))", "score": 0}
{"id": "eqasc_validation_429", "prediction": "all x.(SarcocystisSpecies(x) -> (CanParatizeHumans(x) & MakeHuntSick(x)))", "score": 0}
{"id": "eqasc_validation_429", "prediction": "all x y z.((SpeciesOfSarkocystis(x) & Human(y) & Malaria(z)) -> (Paratize(x,y,z) & MakeSick(y)))", "score": 0}
{"id": "eqasc_validation_429", "prediction": "all x.(Sarcocystis(x) -> (ParasiteHospitals(x) & MakesClinicsSick(x)))", "score": 0}
{"id": "eqasc_validation_429", "prediction": "all x.((Species(x) & Sarcocystis(x)) -> ParasitesHumansAndMakesSick(x))", "score": 0}
{"id": "eqasc_validation_429", "prediction": "all x.(Sarcocystis(x) -> (Poison(x) & Parasite(x) & MakeHuman(x)))", "score": 0}
{"id": "eqasc_validation_429", "prediction": "all x.(SarcocystisSpecies(x) -> (CanParanize(x,Human) & MakesSick(x)))", "score": 0}
{"id": "eqasc_validation_429", "prediction": "all x y z.((Species(x) & Sarcocystis(y) & Human(z)) -> (CanParasite(x,z) & MakesSick(x,z)))", "score": 0}
{"id": "eqasc_validation_429", "prediction": "all x.(Sarcocystis(x) -> (ParachutesHumans(x) & MakesHungariansSick(x)))", "score": 0}
{"id": "eqasc_validation_430", "prediction": "all x.(OneCelledAnimal(x) -> Protozoa(x))", "score": 0}
{"id": "eqasc_validation_430", "prediction": "all x.(ExhibitOf(x,oneCelledAnimals) -> Protozoa(x))", "score": 0}
{"id": "eqasc_validation_430", "prediction": "all x.(ExhibitOneCellled(x) -> Protozoa(x))", "score": 0}
{"id": "eqasc_validation_430", "prediction": "all x.(ExhibitOneCelledAnimal(x) -> Protozoa(x))", "score": 0}
{"id": "eqasc_validation_430", "prediction": "all x y.((Exhibit(x) & OneCelledAnimal(y)) -> Protozoa(x))", "score": 0}
{"id": "eqasc_validation_430", "prediction": "all x.((ExhibitOneCelledAnimal(x) & Protozoa(x)) -> CanTogether(x))", "score": 0}
{"id": "eqasc_validation_430", "prediction": "all x.((Element(x) & OneCellled(x)) -> Protozoa(x))", "score": 0}
{"id": "eqasc_validation_430", "prediction": "all x.((Exhibit1CellledAnimal(x) & Protozoa(x)) -> Exhibit1(x))", "score": 0}
{"id": "eqasc_validation_430", "prediction": "all x.(OtherExhibit(x) -> Protozoa(x))", "score": 0}
{"id": "eqasc_validation_430", "prediction": "all x.(Exhibit1Cellled(x) -> Protozoa(x))", "score": 0}
{"id": "eqasc_validation_430", "prediction": "all x.(Exhibit(x) -> (OneCellledAnimal(x) & Carnivore(x)))", "score": 0}
{"id": "eqasc_validation_430", "prediction": "all x.((ExhibitOneCelledAnimals(x) & Protozoa(x)) -> Contains(x))", "score": 0}
{"id": "eqasc_validation_431", "prediction": "all x.((OneCellledAnimal(x) & Parasite(x)) -> MakesHumansSick(x))", "score": 0}
{"id": "eqasc_validation_431", "prediction": "all x.((TwoCelled(x) & Parasite(x)) -> MakesHunt(x))", "score": 0}
{"id": "eqasc_validation_431", "prediction": "all x y.((OneCelledAnimal(x) & Human(y) & Parasite(y)) -> MakesSickWhenChanged(x,y))", "score": 0}
{"id": "eqasc_validation_431", "prediction": "all x.((OneCelledAnimal(x) & Parasites(x)) -> MakesHumansSick(x))", "score": 0}
{"id": "eqasc_validation_431", "prediction": "all x y.((OneCelledAnimal(x) & Human(y) & Parasite(y)) -> MakesSick(x,y))", "score": 0}
{"id": "eqasc_validation_431", "prediction": "all x y.((Animal(x) & Parasite(y)) -> MakesHumansSick(x,y))", "score": 0}
{"id": "eqasc_validation_431", "prediction": "all x y.((OneCelledAnimal(x) & Human(y) & Parasite(z) & Translocated(x)) -> MakesSick(x,y))", "score": 0}
{"id": "eqasc_validation_431", "prediction": "all x y z.((Elephant(x) & Animal(y) & Parasite(z)) -> MakesHumansSick(x,y,z))", "score": 0}
{"id": "eqasc_validation_431", "prediction": "all x.((Animal(x) & OneCelled(x)) -> MakesHumansSick(x))", "score": 0}
{"id": "eqasc_validation_431", "prediction": "all x y.((Animal(x) & OneCelled(x)) -> MakesHumansSick(x,y))", "score": 0}
{"id": "eqasc_validation_431", "prediction": "all x y.((Hospital(x) & Animal(y) & OneCelled(y)) -> MakesHumansSick(x,y))", "score": 0}
{"id": "eqasc_validation_431", "prediction": "all x y.((OneCelledAnimal(x) & Human(y) & Parasite(x,y)) -> MakesSickInParallel(x,y))", "score": 0}
{"id": "eqasc_validation_431", "prediction": "all x.((DomesticBirth(x) & OneCelled(x)) -> MakesHumansSick(x))", "score": 0}
{"id": "eqasc_validation_431", "prediction": "all x y.((OneCelledOrganism(x) & Human(y) & Parasite(x,y)) -> MakesSickWhenParasite(x,y))", "score": 0}
{"id": "eqasc_validation_431", "prediction": "all x y.((User(x) & OneCelledAnimal(x) & Parasite(y)) -> MakesSickWhenCanceled(x,y))", "score": 0}
{"id": "eqasc_validation_432", "prediction": "all x.(MalariaParasite(x) -> TransmittedByMosquitoes(x))", "score": 0}
{"id": "eqasc_validation_432", "prediction": "all x.(MalariaParasite(x) -> TransmittedByMouses(x))", "score": 0}
{"id": "eqasc_validation_432", "prediction": "all x.(MalariaParasite(x) -> TransmittedByMoskitos(x))", "score": 0}
{"id": "eqasc_validation_432", "prediction": "all x y.((MalariaParasite(x) & Moskito(y)) -> TransmittedBy(x,y))", "score": 0}
{"id": "eqasc_validation_432", "prediction": "all x y.((MalariaParasite(x) & Mosquito(y)) -> TransmittedBy(x,y))", "score": 0}
{"id": "eqasc_validation_432", "prediction": "all x.(MalariaParasite(x) -> TransmittedByMouse(x))", "score": 0}
{"id": "eqasc_validation_432", "prediction": "all x.(MalariaParane(x) -> (TargetSpoison(x) & Mosquitos(x)))", "score": 0}
{"id": "eqasc_validation_432", "prediction": "all x.((MalariaParasite(x) & Mosquito(x)) -> TransmittedBy(x,y))", "score": 0}
{"id": "eqasc_validation_432", "prediction": "all x.(MalariaPattern(x) -> (TransmittedBy(x,Moskalion) & InfectedBy(x,Moskalion)))", "score": 0}
{"id": "eqasc_validation_432", "prediction": "all x.(MalariaParasite(x) -> TransmittedByMosquitos(x))", "score": 0}
{"id": "eqasc_validation_433", "prediction": "all x.(Malaria(x) -> (Protozoa(x) & DoesMakeHumansSick(x)))", "score": 0}
{"id": "eqasc_validation_433", "prediction": "all x.(Malaria(x) -> (Protozoa(x) & MakesHumansSick(x)))", "score": 0}
{"id": "eqasc_validation_433", "prediction": "all x.(Malaria(x) -> (Protozoa(x) & MakeHumansSick(x)))", "score": 0}
{"id": "eqasc_validation_433", "prediction": "all x.(Malaria(x) -> (Proteozoa(x) & MakesHumansSick(x)))", "score": 0}
{"id": "eqasc_validation_433", "prediction": "all x y.((Malaria(x) & Human(y)) -> (Protozoa(x) & MakesSick(x,y)))", "score": 0}
{"id": "eqasc_validation_433", "prediction": "all x y z.((Malaria(x) & Protozoa(y) & Human(z)) -> (MakesSick(y,z) | MakesSick(y,z)))", "score": 0}
{"id": "eqasc_validation_433", "prediction": "all x y z.((Malaria(x) & Protozoa(y) & Human(z)) -> MakesSick(x,z))", "score": 0}
{"id": "eqasc_validation_433", "prediction": "all x y.((Malaria(x) & Proteozoa(y) & Human(z)) -> MakesSick(x,z))", "score": 0}
{"id": "eqasc_validation_433", "prediction": "all x y z.((Malaria(x) & Protozoa(y) & Human(z)) -> MakesSick(y,z))", "score": 0}
{"id": "eqasc_validation_433", "prediction": "all x y.((Malaria(x) & Protozoa(y)) -> (Protozoa(x) & MakesHumansSick(x)))", "score": 0}
{"id": "eqasc_validation_433", "prediction": "all x.(Malaria(x) -> (Protonzoa(x) & MakesHumansSick(x)))", "score": 0}
{"id": "eqasc_validation_434", "prediction": "all x.((NaturalMagnetism(x) & PointsNorth(x) & Compass(x)) -> PointsNorth(x))", "score": 0}
{"id": "eqasc_validation_434", "prediction": "all x y z.((NaturalMagnetism(x) & Compass(y) & North(z)) -> PointsBy(x,y,z))", "score": 0}
{"id": "eqasc_validation_434", "prediction": "all x.(NaturalMagnetism(x) -> PointsNorth(x))", "score": 0}
{"id": "eqasc_validation_434", "prediction": "all x y z.((NaturalMagnetism(x) & Compass(y) & PointsNorth(z)) -> PointedThrough(x,y,z))", "score": 0}
{"id": "eqasc_validation_434", "prediction": "all x y z.((NaturalMagnetism(x) & Compass(y) & Compass(z)) -> PointsNorthBy(x,y,z))", "score": 0}
{"id": "eqasc_validation_434", "prediction": "all x y z.((NaturalMagnetism(x) & Compass(y) & PointsNorth(z)) -> UsedForPointingNorth(x,y,z))", "score": 0}
{"id": "eqasc_validation_434", "prediction": "all x y.((NaturalMagnetism(x) & Compass(y)) -> PointsNorth(x,y))", "score": 0}
{"id": "eqasc_validation_434", "prediction": "all x y.((NaturalMagnetism(x) & Compass(y)) -> PointsNorthBy(x,y))", "score": 0}
{"id": "eqasc_validation_434", "prediction": "all x.((NaturalMagnetism(x) & PointsNorth(x)) -> CompassByCompass(x))", "score": 0}
{"id": "eqasc_validation_434", "prediction": "all x y z.((NaturalMagneticMagnetism(x) & Compass(y) & PointNorthEfficient(z)) -> WeaklyPivotsSouthBy(x,y,z))", "score": 0}
{"id": "eqasc_validation_434", "prediction": "all x y.((NaturalMagnetism(x) & Compass(y)) -> PointsNord(x,y))", "score": 0}
{"id": "eqasc_validation_434", "prediction": "all x y z.((NaturalMagnetism(x) & Compass(y) & PointsNorth(x,y)) -> (UsedForPointingNorth(x) & UsesCompass(x,z)))", "score": 0}
{"id": "eqasc_validation_434", "prediction": "all x y.((NaturalMagnetism(x) & Compass(y) & PointsNorth(x,y)) -> UsedForPointingNorthBy(x,y))", "score": 0}
{"id": "eqasc_validation_434", "prediction": "all x y z.((NaturalMagnetism(x) & Compass(y) & PointsNorth(x,y)) -> UsedForPointingNorth(x,z))", "score": 0}
{"id": "eqasc_validation_435", "prediction": "all x y z.((Magnet(x) & Compasse(y) & Earth(z)) -> (MagneticEnergy(x) | MagneticEnergy(y) & MagneticEnergy(x)))", "score": 0}
{"id": "eqasc_validation_435", "prediction": "all x y z.((Magnet(x) & Compasse(y) & Earth(z)) -> (MagneticEnergy(x) & HasMagneticEnergy(x,y,z)))", "score": 0}
{"id": "eqasc_validation_435", "prediction": "all x.((Magnet(x) | Compasse(x) | Earth(x)) -> HasMagneticEnergy(x))", "score": 0}
{"id": "eqasc_validation_435", "prediction": "exists x.(Magnet(x) & (Compass(x) | Earth(x))) -> HasMagneticEnergy(x))", "score": -1}
{"id": "eqasc_validation_435", "prediction": "all x y.((Magnet(x) | Compasse(x) | Earth(y)) -> MagneticEnergy(x))", "score": 0}
{"id": "eqasc_validation_435", "prediction": "(all x.(Magnet(x) | Compasse(x) | Earth(x)) -> HasMagneticEnergy(x))", "score": 0}
{"id": "eqasc_validation_435", "prediction": "all x y z.((Magnetic(x) | Compasse(y) | Earth(z)) -> HasMagneticEnergy(x,y,z))", "score": 0}
{"id": "eqasc_validation_435", "prediction": "all x y z.((Magnet(x) | Compasse(y) | Earth(z)) -> HasMagneticEnergy(x,y,z))", "score": 0}
{"id": "eqasc_validation_435", "prediction": "all x.((MagneticEnergy(x) | Compasses(x) | Earth(x)) -> HasMagneticEnergy(x))", "score": 0}
{"id": "eqasc_validation_435", "prediction": "all x.((Magnet(x) | Compasse(x) | Earth(x)) -> Magnetenergy(x))", "score": 0}
{"id": "eqasc_validation_435", "prediction": "all x.(Magnet(x) & Compasse(x) & Earth(x)) -> HasMagneticEnergy(x))", "score": -1}
{"id": "eqasc_validation_435", "prediction": "all x.(Magnet(x) | Compass(x) | Earth(x)) -> HasMagneticEnergy(x))", "score": -1}
{"id": "eqasc_validation_435", "prediction": "all x y z.((Magnet(x) | Compasse(y) | Earth(z)) & MagneticEnergy(x,y,z)) -> Has(x,y...))", "score": -1}
{"id": "eqasc_validation_436", "prediction": "all x y.((MagneticEnergy(x) & North(y)) -> FindNorthern(x,y))", "score": 0}
{"id": "eqasc_validation_436", "prediction": "all x y.((MagneticEnergy(x) & Norther(y) & FoundNorthern(x,y)) -> UsedFor(x,y))", "score": 0}
{"id": "eqasc_validation_436", "prediction": "all x y.((MagneticEnergy(x) & NorthWide(y)) -> UsedToFollow(x,y))", "score": 0}
{"id": "eqasc_validation_436", "prediction": "all x.(MagneticEnergy(x) -> (FindNorthNorthNorth(x) | FindNorthNorthNorthNorth(x)))", "score": 0}
{"id": "eqasc_validation_436", "prediction": "all x.(MagneticEnergy(x) -> KnownSouthern(x))", "score": 0}
{"id": "eqasc_validation_436", "prediction": "all x y z.((MagneticEnergy(x) & North(y) & MagneticEnergy(z)) -> UsedToFindNorth(x,y,z))", "score": 0}
{"id": "eqasc_validation_436", "prediction": "all x y.((MagneticEnergy(x) & NorthNorth(y)) -> FindsNorthernEnergy(x,y))", "score": 0}
{"id": "eqasc_validation_436", "prediction": "all x y.((MagneticEnergy(x) & NorthRun(y)) -> UsedToFind(x,y))", "score": 0}
{"id": "eqasc_validation_436", "prediction": "all x y z.((MagneticEnergy(x) & North (y) & North(z)) & FoundIn(x,y,z)) -> MagneticEnergy(x,y))", "score": -1}
{"id": "eqasc_validation_436", "prediction": "all x y z.((MagneticEnergy(x) & North(y) & MagneticEnergy(z)) -> UsedAt(x,y,z))", "score": 0}
{"id": "eqasc_validation_436", "prediction": "all x y.((MagneticEnergy(x) & North(y)) -> UsedToFind(x,y))", "score": 0}
{"id": "eqasc_validation_436", "prediction": "(all x y z.((MagneticEnergy(x) & North(y)) -> Found(z)))", "score": 0}
{"id": "eqasc_validation_436", "prediction": "all x y.((MagneticEnergy(x) & NorthOcean(y)) -> UsesToFindNorth(x,y))", "score": 0}
{"id": "eqasc_validation_436", "prediction": "all x y.((MagneticEnergy(x) & North(y)) -> UsedToReachNorth(x,y))", "score": 0}
{"id": "eqasc_validation_436", "prediction": "all x.(MagneticEnergy(x) -> FindNorthernNord(x))", "score": 0}
{"id": "eqasc_validation_436", "prediction": "all x.(MagneticEnergy(x) -> UsedToFindNorthern(x))", "score": 0}
{"id": "eqasc_validation_437", "prediction": "all x y.((SurveillanceCompass(x) & Surveyor(y)) -> Used(x))", "score": 0}
{"id": "eqasc_validation_437", "prediction": "all x.((SurveyorsCompass(x) & Used(x)) -> Used(x))", "score": 0}
{"id": "eqasc_validation_437", "prediction": "all x.(FieldCompass(x) -> UsedBetween(x))", "score": 0}
{"id": "eqasc_validation_437", "prediction": "all x y.((SurveyorsCompass(x) & SurveyorsCompass(y)) -> Used(x))", "score": 0}
{"id": "eqasc_validation_437", "prediction": "all x.(Compass(x) -> Surveyors(x))", "score": 0}
{"id": "eqasc_validation_437", "prediction": "all x.(SurveyorsCompass(x) -> Used(x))", "score": 0}
{"id": "eqasc_validation_437", "prediction": "all x.((SurveyorCompass(x) & Used(x)) -> CompletesTarget(x))", "score": 0}
{"id": "eqasc_validation_437", "prediction": "all x.(DoubleSurveillanceCompass(x) -> Used(x))", "score": 0}
{"id": "eqasc_validation_437", "prediction": "exists x y.(SurveyorsCompass(x) & UsedFor(x,y))", "score": 0}
{"id": "eqasc_validation_437", "prediction": "all x y.((SurveyorSCompass(x) & Surveyor(y)) -> Used(x))", "score": 0}
{"id": "eqasc_validation_437", "prediction": "(UnderstandingCompass(x): SurveyorsCompass(x))", "score": -1}
{"id": "eqasc_validation_437", "prediction": "all x.(Compass(x) -> UsedBySurveyor(x))", "score": 0}
{"id": "eqasc_validation_437", "prediction": "all x.(SurveillanceCompass(x) -> Used(x))", "score": 0}
{"id": "eqasc_validation_437", "prediction": "all x.(WorshiporsCompass(x) -> WasUsed(x))", "score": 0}
{"id": "eqasc_validation_437", "prediction": "all x y.((SurveyorsCompass(x) & Surveyor(y)) -> Used(x))", "score": 0}
{"id": "eqasc_validation_438", "prediction": "all x.(NaturalMagnetism(x) -> PointsNorth(x))", "score": 0}
{"id": "eqasc_validation_438", "prediction": "all x y.((NovelleMagnetism(x) & SurveyingTool(y)) -> UsedForPointingNorth(x,y))", "score": 0}
{"id": "eqasc_validation_438", "prediction": "all x y.((NaturalMagnetism(x) & SurveyingTool(y)) -> PointsNorthIn(x,y))", "score": 0}
{"id": "eqasc_validation_438", "prediction": "all x y.((NaturalMagnetism(x) & SurveyingTool(y)) -> PointsNorth(x,y))", "score": 0}
{"id": "eqasc_validation_438", "prediction": "all x y z.((NaturalMagnetism(x) & SurveyingTool(y) & SurveyingTool(z)) -> PointsNorth(x,y,z))", "score": 0}
{"id": "eqasc_validation_438", "prediction": "all x.((NaturalMagnetism(x) & SurveyingTool(e)) -> PointNorth(x,e,z))", "score": 0}
{"id": "eqasc_validation_438", "prediction": "all x.(NaturalMagnetism(x) -> PointsNorthInQuestioningTool(x))", "score": 0}
{"id": "eqasc_validation_438", "prediction": "all x y.((NaturalMagnetics(x) & SurveyingTool(y)) -> PointsNorth(x,y))", "score": 0}
{"id": "eqasc_validation_438", "prediction": "all x y z.((NaturalMagnetism(x) & SurveyingTool(y) & SurveyingTool(z)) -> PointsNorth(x))", "score": 0}
{"id": "eqasc_validation_438", "prediction": "all x y z.((NaturalMagnetism(x) & SurveyingTool(y) & LocatedIn(x,y)) -> PointsNorth(x,y))", "score": 0}
{"id": "eqasc_validation_438", "prediction": "all x.(NorthernSurveillanceTool(x) -> NaturalMagnetism(x))", "score": 0}
{"id": "eqasc_validation_439", "prediction": "all x y.((Student(x) & Needle(y) & Magnetize(x,y)) -> LocateNorth(x))", "score": 0}
{"id": "eqasc_validation_439", "prediction": "all x.(Distance(x) -> MagnetizesNeedles(x) & LocatesNorth(x))", "score": 0}
{"id": "eqasc_validation_439", "prediction": "all x y.((Student(x) & MagnetizesNeedles(x) & LocatesNorth(x,y)) -> FindsDirection(x,y))", "score": 0}
{"id": "eqasc_validation_439", "prediction": "all x.((Student(x) & MagnetizesNeedles(x) & LocatesNorth(x)) -> FindDirection(x))", "score": 0}
{"id": "eqasc_validation_439", "prediction": "all x y.((Student(x) & MagnetizeNeedles(x,y)) -> FindDirection(x,y))", "score": 0}
{"id": "eqasc_validation_439", "prediction": "all x.((Student(x) & MagnetizesNeedles(x) & LocatesNorth(x)) -> FindsDirection(x))", "score": 0}
{"id": "eqasc_validation_439", "prediction": "all x y z.((Student(x) & Nail(y) & Branche(z)) -> MagnetizesAndFinds(x,y,z))", "score": 0}
{"id": "eqasc_validation_439", "prediction": "all x.(Selective(x) -> (MagnetizeNeedles(x) & LocateNorth(x)))", "score": 0}
{"id": "eqasc_validation_439", "prediction": "all x.((Student(x) & MagnetizesNeedles(x) & LocatesNord(x)) -> FindDirection(x))", "score": 0}
{"id": "eqasc_validation_439", "prediction": "all x.(Searchdirection(x) -> MagnetizesNeedlesAndLocatesNorth(x))", "score": 0}
{"id": "eqasc_validation_439", "prediction": "all x y z.((Student(x) & MagnetizeNeedles(x) & North(y)) -> LocatesForDirection(x,y))", "score": 0}
{"id": "eqasc_validation_439", "prediction": "all x.((Student(x) & MagnetizeNeedles(x) & LocateNorth(x)) -> FindDirection(x))", "score": 0}
{"id": "eqasc_validation_439", "prediction": "all x y.((Student(x) & Needle(y)) -> (Magnetizes(x,y) & LocatesNorth(x,y)))", "score": 0}
{"id": "eqasc_validation_440", "prediction": "all x.((Compass(x) & PointsNorth(x)) -> FindingDirections(x))", "score": 0}
{"id": "eqasc_validation_440", "prediction": "all x.((Compass(x) & PointsNorth(x)) -> FindDirections(x))", "score": 0}
{"id": "eqasc_validation_440", "prediction": "all x.((Compass(x) & PointsNorth(x)) -> FindsDirections(x))", "score": 0}
{"id": "eqasc_validation_440", "prediction": "all x.(FindDirections(x) -> (UsesCompass(x) & PointsNorth(x)))", "score": 0}
{"id": "eqasc_validation_440", "prediction": "all x y z.((Compass(x) & Directions(y) & Orientation(z)) -> LooksNorth(y,z))", "score": 0}
{"id": "eqasc_validation_440", "prediction": "all x.(FindingDirections(x) -> (ProvidesCompass(x) & PointsNorth(x)))", "score": 0}
{"id": "eqasc_validation_440", "prediction": "all x.((Compass(x) & PointsNorth(x)) -> SearchesForDirections(x))", "score": 0}
{"id": "eqasc_validation_440", "prediction": "all x.((Compass(x) & PointsNorth(x)) -> CanFindDirections(x))", "score": 0}
{"id": "eqasc_validation_440", "prediction": "all x y.((Compass(x) & Compass(y) & PointsNorth(x)) -> FindsDirections(x,y))", "score": 0}
{"id": "eqasc_validation_440", "prediction": "all x.(FindDirections(x) -> (UsedByCompass(x) & PointsNorth(x)))", "score": 0}
{"id": "eqasc_validation_441", "prediction": "(AllowsNorthDirection(Compass,OtherDivision) | AlignsToNorthDirection(Compass,NorthDirection)))", "score": -1}
{"id": "eqasc_validation_441", "prediction": "all x.((Compass(x) & Ordinary(x)) -> AlignToNorthDirection(x))", "score": 0}
{"id": "eqasc_validation_441", "prediction": "all x.(OmnCompass(x) -> AlignsToNorthDirection(x))", "score": 0}
{"id": "eqasc_validation_441", "prediction": "(OrdinaryCompass(x) -> AlignsToNorthDirection(x))", "score": 0}
{"id": "eqasc_validation_441", "prediction": "all x.((Compass(x) & Ordinary(x)) -> AlignNorthDirection(x))", "score": 0}
{"id": "eqasc_validation_441", "prediction": "all x y.((Compass(x) & Ordinary(y)) -> AlignsToNorthDirection(x,y))", "score": 0}
{"id": "eqasc_validation_441", "prediction": "(all x.(Command(x) -> AlignsToNorthDirection(x)))", "score": 0}
{"id": "eqasc_validation_441", "prediction": "(AlignWithNorthDirection(compass) & Ordinary(compass))", "score": 0}
{"id": "eqasc_validation_441", "prediction": "all x.(OtherCompass(x) -> AlignToNorthDirection(x))", "score": 0}
{"id": "eqasc_validation_441", "prediction": "all x.(OrdinaryCompass(x) -> AlignsToNorthDirection(x))", "score": 0}
{"id": "eqasc_validation_441", "prediction": "all x y.((Compass(x) & Compass(y)) -> AlignsToNorthDirection(x,y))", "score": 0}
{"id": "eqasc_validation_441", "prediction": "all x.((Compass(x) & Ordinary(x)) -> AlignsToNordDirection(x))", "score": 0}
{"id": "eqasc_validation_441", "prediction": "all x y.((Compass(x) & Ordinary(x)) -> AlignToNorthDirection(y))", "score": 0}
{"id": "eqasc_validation_441", "prediction": "all x y.((OrdinaryCompass(x) & AlignsToNorthDirection(y)) -> SimpleCompass(x))", "score": 0}
{"id": "eqasc_validation_442", "prediction": "all x y.((Compact(x) & Magnetism(y)) -> Uses(x,y))", "score": 0}
{"id": "eqasc_validation_442", "prediction": "all x.(Compass(x) -> UsesMagnetism(x))", "score": 0}
{"id": "eqasc_validation_442", "prediction": "all x.(Compass(x) -> MagnetismUse(x))", "score": 0}
{"id": "eqasc_validation_442", "prediction": "all x.(Compasse(x) -> Magnetism(x))", "score": 0}
{"id": "eqasc_validation_442", "prediction": "all x.(Compasse(x) -> UsesMagnetism(x))", "score": 0}
{"id": "eqasc_validation_442", "prediction": "all x.(Compact(x) -> (UsesMagnetism(x) & Use(x,Magnetism)))", "score": 0}
{"id": "eqasc_validation_442", "prediction": "all x.(Compass(x) -> Magnetism(y))", "score": 0}
{"id": "eqasc_validation_442", "prediction": "all x y z.((Compasse(x) & Magnetism(y) & Magnetism(z)) -> Uses(x,y))", "score": 0}
{"id": "eqasc_validation_442", "prediction": "all x.(Compass(x) -> Magnetism(x))", "score": 0}
{"id": "eqasc_validation_442", "prediction": "all x.(Compasse(x) -> MagnetismUses(x))", "score": 0}
{"id": "eqasc_validation_442", "prediction": "all x y.((Compast(x) & Magnetism(y)) -> Uses(x,y))", "score": 0}
{"id": "eqasc_validation_443", "prediction": "all x.((Ten(x) & NavigateGround(x) & UseCompass(x)) -> LearnsTerrainAndCompass(x))", "score": 0}
{"id": "eqasc_validation_443", "prediction": "all x y.((Teen(x) & Terrain(y)) -> (LearnTerrain(x,y) & UseCompass(x,y)))", "score": 0}
{"id": "eqasc_validation_443", "prediction": "all x.(Teen(x) -> (LearnsHowToNavigate(x) & LearnsHowToUseCompass(x)))", "score": 0}
{"id": "eqasc_validation_443", "prediction": "all x y z.((Teen(x) & Terrain(y) & Compass(z)) -> (LearnsHowToNavigate(x,y) & Uses(x,z)))", "score": 0}
{"id": "eqasc_validation_443", "prediction": "all x.(Teen(x) -> (LearnsHowToNavigateTerrain(x) & UsesCompass(x)))", "score": 0}
{"id": "eqasc_validation_443", "prediction": "all x.((Teen(x) & NavigateTerrain(x) & UseCompass(x)) -> LearnsHowToUseCompass(x))", "score": 0}
{"id": "eqasc_validation_443", "prediction": "all x.(Teen(x) -> (LearnsHowToNarrowTerrain(x) & UsesCompass(x)))", "score": 0}
{"id": "eqasc_validation_443", "prediction": "all x.(Teen(x) -> (LearnsToNavigateTerrain(x) & UsesCompass(x)))", "score": 0}
{"id": "eqasc_validation_443", "prediction": "all x.(Ten(x) -> (LearnsToNavigateTerrain(x) & UsesCompass(x)))", "score": 0}
{"id": "eqasc_validation_443", "prediction": "all x.(Teen(x) -> (LearnsToNavigateTravel(x) & UsesCompass(x)))", "score": 0}
{"id": "eqasc_validation_443", "prediction": "all x.(Tief(x) -> (LearnsNavigation(x) & UsesCompass(x)))", "score": 0}
{"id": "eqasc_validation_443", "prediction": "all x.(Teen(x) -> (LearnsHowToNAVIGATETerrain(x) & UsesCompass(x)))", "score": 0}
{"id": "eqasc_validation_443", "prediction": "all x.(Teen(x) -> (LearningToNavigateTerrain(x) & LearningToUseCompass(x)))", "score": 0}
{"id": "eqasc_validation_443", "prediction": "all x.(Adolescent(x) -> (LearnsToNavigateTerrain(x) & UsesCompass(x)))", "score": 0}
{"id": "eqasc_validation_444", "prediction": "all x y.((NaturalMagnetismPunsNord(x) & Navigation(y)) -> PointsNorth(x,y))", "score": 0}
{"id": "eqasc_validation_444", "prediction": "all x y z.((NaturalMagnetism(x) & Position(y) & NavigationNavigation(z)) -> PointsNorthFor(x,y,z))", "score": 0}
{"id": "eqasc_validation_444", "prediction": "all x.(NaturalMagnetismPointsNorth(x) -> Navigation(x))", "score": 0}
{"id": "eqasc_validation_444", "prediction": "all x y.((NaturalMagnetism(x) & NaturalMagnetic(y)) -> PointsNorthForNavigation(x))", "score": 0}
{"id": "eqasc_validation_444", "prediction": "all x.(NaturalMagnetismPointsNorthForNavigation(x) -> ForNavigation(x))", "score": 0}
{"id": "eqasc_validation_444", "prediction": "all x y.((NaturalMagnetismPointsNorthForNavigation(x) & NaturalMagnetismPointsNorthForNavigation(y)) -> NavigationalNavigation(x,y))", "score": 0}
{"id": "eqasc_validation_444", "prediction": "all x y z.((NaturalMagnetism(x) & NaturalMagnetism(y) & Navigation(z)) -> PointsNorthForNavigation(x,y,z))", "score": 0}
{"id": "eqasc_validation_444", "prediction": "all x y.((NaturalMagnetismPoint(x,y) & NorthforNavigation(x)) -> PointNord(y))", "score": 0}
{"id": "eqasc_validation_444", "prediction": "all x y z.((NaturalMagnetism(x) & NorthForNavigation(y) & NaturalMagnetismPosition(z)) -> PointsCyclist(x,y,z))", "score": 0}
{"id": "eqasc_validation_444", "prediction": "all x y.((NaturalMagnetism(x) & NorthForNavigation(y)) -> PointsNorthForNavigation(x,y))", "score": 0}
{"id": "eqasc_validation_444", "prediction": "all x y z.((NaturalMagnetism(x) & North(y) & Navigation(z)) -> PointsNorthForNavigation(x,y,z))", "score": 0}
{"id": "eqasc_validation_444", "prediction": "all x.(NaturalMagnetismPointsNorth(x) OpticalMagneticMapsNorth(x) & Navigation(x))", "score": -1}
{"id": "eqasc_validation_444", "prediction": "all x.(NaturalMagnetismPointsNorthForNavigation(x) -> NavigationalNavigation(x))", "score": 0}
{"id": "eqasc_validation_444", "prediction": "all x y.((NaturalMagnetism(x) & PointsNorthNote(y)) -> Navigation(z))", "score": 0}
{"id": "eqasc_validation_444", "prediction": "all x.(NaturalMagnetismPointsNorth(x) -> NavigationNavigation(x))", "score": 0}
{"id": "eqasc_validation_444", "prediction": "all x.(NaturalMagnetismPointsNorthForNavigation(x) -> NorthForNavigation(x))", "score": 0}
{"id": "eqasc_validation_445", "prediction": "all x.(Compass(x) -> PointToMagneticPoles(x))", "score": 0}
{"id": "eqasc_validation_445", "prediction": "all x y z.((Compesa(x) & MagneticPole(y) & MagneticPole(z)) -> PointsTo(x,y,z))", "score": 0}
{"id": "eqasc_validation_445", "prediction": "all x.(Compass(x) -> PointsToMagneticPoles(x))", "score": 0}
{"id": "eqasc_validation_445", "prediction": "all x.(Compasse(x) -> PointsToMagneticPoles(x))", "score": 0}
{"id": "eqasc_validation_445", "prediction": "all x.(Compesa(x) -> PointsToMagneticPoles(x))", "score": 0}
{"id": "eqasc_validation_445", "prediction": "all x.(Compose(x) -> PointToMagneticPoles(x))", "score": 0}
{"id": "eqasc_validation_445", "prediction": "all x y.((Compasse(x) & MagneticPole(y)) -> PointTo(x,y))", "score": 0}
{"id": "eqasc_validation_445", "prediction": "all x y.((Compass(x) & MagneticPole(y)) -> PointsTo(x,y))", "score": 0}
{"id": "eqasc_validation_446", "prediction": "all x.(Pole(x) -> PointsWithCompass(x))", "score": 0}
{"id": "eqasc_validation_446", "prediction": "all x y.((Pole(x) & Compass(y)) -> PointsWith(x,y))", "score": 0}
{"id": "eqasc_validation_446", "prediction": "all x.(Pod(x) -> (PointsWithCompass(x) & UsedToPointWithCompass(x)))", "score": 0}
{"id": "eqasc_validation_446", "prediction": "all x y z.((Pole(x) & Compass(y) & Compass(z)) -> PointsWith(x,y,z))", "score": 0}
{"id": "eqasc_validation_446", "prediction": "all x.(Pole(x) -> PointWithCompass(x))", "score": 0}
{"id": "eqasc_validation_446", "prediction": "all x y z w.((Pole(x) & Compass(y) & Compass(z)) -> PointsWith(x,y,z))", "score": 0}
{"id": "eqasc_validation_446", "prediction": "all x y.((Pole(x) & Compass(y)) -> Point(x,y))", "score": 0}
{"id": "eqasc_validation_446", "prediction": "all x y z.((Pole(x) & Compass(y) & Compass(z)) -> Point(x,y,z))", "score": 0}
{"id": "eqasc_validation_446", "prediction": "all x y.((Pole(x) & Compass(y)) -> UsedToPointWith(x,y))", "score": 0}
{"id": "eqasc_validation_447", "prediction": "all x.(NaturalMagnetism(x) -> PointsToMagneticPoles(x))", "score": 0}
{"id": "eqasc_validation_447", "prediction": "all x y.((NaturalMagnetism(x) & MagneticPole(y)) -> PointsTo(x,y))", "score": 0}
{"id": "eqasc_validation_447", "prediction": "all x y.((NaturalMagnetism(x) & MagneticPole(y)) -> UsedToPointTo(x,y))", "score": 0}
{"id": "eqasc_validation_447", "prediction": "all x y.((NaturalMagnetism(x) & MagneticPole(y)) -> PointingTo(x,y))", "score": 0}
{"id": "eqasc_validation_447", "prediction": "all x y.((NaturalMagnetism(x) & MagneticPole(y)) -> UsedToPoint(x,y))", "score": 0}
{"id": "eqasc_validation_447", "prediction": "all x y z.((NaturalMagnetism(x) & MagneticPole(y) & Magnetism(z)) -> PointsTo(x,y,z))", "score": 0}
{"id": "eqasc_validation_447", "prediction": "all x y z.((NaturalMagnetism(x) & MagneticPole(y) & Pole(z)) -> PointsTo(x,y,z))", "score": 0}
{"id": "eqasc_validation_447", "prediction": "all x y z.((NaturalMagnetism(x) & MagneticPole(y) & MagneticPole(z)) -> LedTo(x,y,z))", "score": 0}
{"id": "eqasc_validation_447", "prediction": "all x.(NaturalMagneticism(x) -> PointsToMagneticPoles(x))", "score": 0}
{"id": "eqasc_validation_447", "prediction": "all x y z.((NaturalMagnetism(x) & MagnetitePole(y) & MagneticPole(z)) -> PointsTo(x,y,z))", "score": 0}
{"id": "eqasc_validation_447", "prediction": "all x y.((NaturalMagnetism(x) & MagneticPose(y)) -> PointsTo(x,y))", "score": 0}
{"id": "eqasc_validation_447", "prediction": "all x y z.((NaturalMagnetism(x) & MagneticPole(y) & Line(z)) -> PointsTo(x,y,z))", "score": 0}
{"id": "eqasc_validation_448", "prediction": "all x.(NaturalMagnet(x) -> (PermanentMagnet(x) & -LosesMagnetism(x)))", "score": 0}
{"id": "eqasc_validation_448", "prediction": "all x.(NaturalMagnet(x) -> (PermanentMagnet(x) & NeverLosesMagnetism(x)))", "score": 0}
{"id": "eqasc_validation_448", "prediction": "all x.(NaturalMagnet(x) -> (PermanentMagnet(x) & NeverLoseMagnetism(x)))", "score": 0}
{"id": "eqasc_validation_448", "prediction": "all x.(NaturalMagnet(x) -> (PermanentMagnet(x) & -LoseMagnetism(x)))", "score": 0}
{"id": "eqasc_validation_448", "prediction": "all x.(NaturalMagnet(x) -> (PermanentMagnet(x) & -LosSelectiveMagnetism(x)))", "score": 0}
{"id": "eqasc_validation_449", "prediction": "all x.(PermanentMagnet(x) -> PointsNorth(x))", "score": 0}
{"id": "eqasc_validation_449", "prediction": "all x y.((PermanentMagnet(x) & Compasse(y) & PointsNorth(y)) -> UsedFor(x,y))", "score": 0}
{"id": "eqasc_validation_449", "prediction": "all x.(PermanentMagnet(x) -> (UsedForCompressas(x) & PointsNorth(x)))", "score": 0}
{"id": "eqasc_validation_449", "prediction": "all x.(PermanentMagnetic(x) -> (UsedForCompassesPointingNorth(x)))", "score": 0}
{"id": "eqasc_validation_449", "prediction": "all x.(PermanentMagnet(x) -> (PondentMagnet(x) & Point(x,North)))", "score": 0}
{"id": "eqasc_validation_449", "prediction": "all x.(PermanentMagnet(x) -> UsedForPosingNorth(x))", "score": 0}
{"id": "eqasc_validation_449", "prediction": "all x.(PermanentMagnet(x) -> UsedFor(x,compasses) & PointsNorth(x))", "score": 0}
{"id": "eqasc_validation_449", "prediction": "all x.(PermanentMagnet(x) -> (PointsNorthForCompacts(x)))", "score": 0}
{"id": "eqasc_validation_449", "prediction": "all x y z w.((PermanentMagnet(x) & Compasse(y) & NorthPoint(z)) -> UsedFor(x,y,z))", "score": 0}
{"id": "eqasc_validation_449", "prediction": "all x.(PermanentMagnet(x) -> OptimalForPositioningCompasses(x))", "score": 0}
{"id": "eqasc_validation_449", "prediction": "all x.(PermanentMagnet(x) -> UsedForPointsNorth(x))", "score": 0}
{"id": "eqasc_validation_449", "prediction": "all x.(PermanentMagnet(x) & PointsNorth(x))", "score": 0}
{"id": "eqasc_validation_449", "prediction": "all x.(PermanentMagnet(x) -> PointNorth(x))", "score": 0}
{"id": "eqasc_validation_450", "prediction": "all x.(NMETALItem(x) -> FarShorterInNumber(x))", "score": 0}
{"id": "eqasc_validation_450", "prediction": "all x.(NonMetalElement(x) -> FarFarFriendlier(x))", "score": 0}
{"id": "eqasc_validation_450", "prediction": "all x.((NonMetalElement(x) & LongerNumber(x)) -> FewerEnoughInNumber(x))", "score": 0}
{"id": "eqasc_validation_450", "prediction": "all x.((In-MetalElement(x) & FewerInNumber(x)) -> ThenAndUnder(x))", "score": -1}
{"id": "eqasc_validation_450", "prediction": "all x.(NonmetalElement(x) -> FarFamerInNumber(x))", "score": 0}
{"id": "eqasc_validation_450", "prediction": "all x.(NonmetalElement(x) -> FarFarDierInNumber(x))", "score": 0}
{"id": "eqasc_validation_450", "prediction": "all x.((NumericalElement(x) & -MetalElement(x)) -> FarFarLessInNumber(x))", "score": 0}
{"id": "eqasc_validation_450", "prediction": "all x.(NonmetalElement(x) -> FarLowerInNumericalNumber(x))", "score": 0}
{"id": "eqasc_validation_450", "prediction": "all x.(NonmetalElement(x) -> FarLessNumber(x))", "score": 0}
{"id": "eqasc_validation_450", "prediction": "all x.((NonmetalElement(x) & LongerNumber(x)) -> SmallerNumber(x))", "score": 0}
{"id": "eqasc_validation_450", "prediction": "all x.(NonmetalElement(x) -> FarFarFamerInNumber(x))", "score": 0}
{"id": "eqasc_validation_450", "prediction": "all x.(NonmetalElement(x) -> FarLessInNumber(x))", "score": 0}
{"id": "eqasc_validation_450", "prediction": "all x.(NonmetalElement(x) -> FarLessDownNumber(x))", "score": 0}
{"id": "eqasc_validation_450", "prediction": "exists x.(NonmetalElement(x) & FarFamerInNumber(x))", "score": 0}
{"id": "eqasc_validation_450", "prediction": "all x.((Element(x) & NonMetal(x)) -> FarLessEntertaine(x))", "score": 0}
{"id": "eqasc_validation_450", "prediction": "all x.((MetalElement(x) & FarFarLider(x)) -> DecreasedNumber(x))", "score": 0}
{"id": "eqasc_validation_451", "prediction": "all x.(Titanium(x) -> (Lightly(x) & White(x)))", "score": 0}
{"id": "eqasc_validation_451", "prediction": "all x.(Titanium(x) -> (LightlyWhiteMetallicElement(x) & MetallicElement(x)))", "score": 0}
{"id": "eqasc_validation_451", "prediction": "all x.(Titanium(x) -> (LuxuriousWhiteMetallicElement(x) & Metallic(x)))", "score": 0}
{"id": "eqasc_validation_451", "prediction": "all x.(Titanium(x) -> (LubriousWhiteMetallicElement(x) & MetallicElement(x)))", "score": 0}
{"id": "eqasc_validation_451", "prediction": "all x.(Titanium(x) & LustrousWhiteMetallicElement(x))", "score": 0}
{"id": "eqasc_validation_451", "prediction": "all x.(Tenium(x) -> (LutrousWhiteMirror(x) & MetallicElement(x)))", "score": 0}
{"id": "eqasc_validation_451", "prediction": "all x.(Titanium(x) -> (LightlyWhiteElectricalElement(x) & MetallicFunction(x)))", "score": 0}
{"id": "eqasc_validation_451", "prediction": "all x.(Titanium(x) -> (LightningWhiteMetallicElement(x) & Metallic(x)))", "score": 0}
{"id": "eqasc_validation_451", "prediction": "all x.(Titanium(x) -> (LuxuriousWhiteMetallicElement(x) & MetallicElement(x)))", "score": 0}
{"id": "eqasc_validation_451", "prediction": "all x y.((Titanium(x) & MetallicElement(y)) -> LustrousWhite(x,y))", "score": 0}
{"id": "eqasc_validation_451", "prediction": "all x.(Titanium(x) -> (LighttrousWhiteMetallicElement(x) & MetallicElement(x)))", "score": 0}
{"id": "eqasc_validation_451", "prediction": "all x.(Titanium(x) -> (LightlyWhiteMetalElement(x) & MetallicElement(x)))", "score": 0}
{"id": "eqasc_validation_451", "prediction": "all x.(Titanium(x) -> (LightedWhiteMetallicElement(x) & MetallicElement(x)))", "score": 0}
{"id": "eqasc_validation_451", "prediction": "all x.(Titanium(x) -> (LubriousWhiteMetallicElement(x) & MetallicElement(x) & MetallicElement(x)))", "score": 0}
{"id": "eqasc_validation_451", "prediction": "all x.(Titanium(x) -> (LightestWhiteMetallicElement(x) & Metallic(x) & WhiteElement(x)))", "score": 0}
{"id": "eqasc_validation_451", "prediction": "all x.(Titanium(x) -> (LightlyWhiteMetallicElement(x) & Metallic(x)))", "score": 0}
{"id": "eqasc_validation_452", "prediction": "all x.(Titanium(x) -> (-NonMetal(x) & -Metal(x)))", "score": 0}
{"id": "eqasc_validation_452", "prediction": "(NonMetallic(titanium) & -NonMetallic(titanium))", "score": 0}
{"id": "eqasc_validation_452", "prediction": "all x.(Titanium(x) -> -NonMetal(x))", "score": 0}
{"id": "eqasc_validation_452", "prediction": "all x.(Titanium(x) -> -(NonMetal(x) & -Material(x)))", "score": 0}
{"id": "eqasc_validation_452", "prediction": "all x.(Titanium(x) -> (NonMetal(x) & -Metal(x)))", "score": 0}
{"id": "eqasc_validation_452", "prediction": "all x.(Titanium(x) -> -(NonMetal(x) & -Metal(x)))", "score": 0}
{"id": "eqasc_validation_452", "prediction": "all x.(Titanium(x) -> -metalNonMetal(x))", "score": 0}
{"id": "eqasc_validation_452", "prediction": "all x.(Titanium(x) -> -Metal(x))", "score": 0}
{"id": "eqasc_validation_452", "prediction": "all x.(Titanium(x) -> -MetalNonMetal(x))", "score": 0}
{"id": "eqasc_validation_452", "prediction": "all x.(Titanium(x) -> (-Metal(x) & NonMetal(x)))", "score": 0}
{"id": "eqasc_validation_452", "prediction": "all x.(Titanium(x) -> -(NonMetal(x) & NonMetal(x)))", "score": 0}
{"id": "eqasc_validation_452", "prediction": "(-Metal( Titanium) & -Metal(Titanium))", "score": 0}
{"id": "eqasc_validation_453", "prediction": "all x.(Nonmetal(x) -> Element(x,17))", "score": 0}
{"id": "eqasc_validation_453", "prediction": "all x.((Nonmetal(x) & Element(x)) -> UpperRightHand(x,176))", "score": 0}
{"id": "eqasc_validation_453", "prediction": "all x y.((Element(x) & Element(y) & UpperRightHandCrown(x,y)) -> Nonmetal(x))", "score": 0}
{"id": "eqasc_validation_453", "prediction": "all x y.((Nonmetal(x) & Element(y)) -> UpperRightEarnClose(x,y))", "score": 0}
{"id": "eqasc_validation_453", "prediction": "all x.(Nonmetal(x) -> ElementsInUpperRightHandCoin(x))", "score": 0}
{"id": "eqasc_validation_453", "prediction": "all x.(Nonmetal(x) -> (AlreadyElement(x,7) & UpperRightHandCrown(x)))", "score": 0}
{"id": "eqasc_validation_453", "prediction": "all x.(Nonmetal(x) -> Item(x,17))", "score": 0}
{"id": "eqasc_validation_453", "prediction": "all x.(NonMetal(x) -> UpperRightHandCoin(x,7))", "score": 0}
{"id": "eqasc_validation_453", "prediction": "all x y.((Nonmetal(x) & PeriodicTable(y)) -> LowerRealHandCentricHandColumn(x,y))", "score": 0}
{"id": "eqasc_validation_453", "prediction": "all x.(Nonmetal(x) -> UpperRightHandCrown(x,172))", "score": 0}
{"id": "eqasc_validation_453", "prediction": "all x.(Numerical(x) -> (UpperRightHand(x,17) & IsTopElement(x,7)))", "score": 0}
{"id": "eqasc_validation_453", "prediction": "all x.(Nonmetal(x) -> (ElementInUpperRightHandCurve(x) & PeriodicalTable(x)))", "score": 0}
{"id": "eqasc_validation_453", "prediction": "all x.(Nonmetal(x) -> Object(x,17))", "score": 0}
{"id": "eqasc_validation_453", "prediction": "all x.(Nonmetal(x) -> UprightHandCrowdElement(x,17))", "score": 0}
{"id": "eqasc_validation_453", "prediction": "all x y.((Nonmetal(x) & Elements(y) & UpperRightHandCrowd(y,x)) -> PartOfPeriodicalTable(x,y))", "score": 0}
{"id": "eqasc_validation_453", "prediction": "(UpperReightHandCrown(NMale) & Element(n) & RemainsInPeripheralTable(n,2)))", "score": -1}
{"id": "eqasc_validation_454", "prediction": "all x.(PersonalTable(x) -> FarSixteenElementsInRightHandCoin(x))", "score": 0}
{"id": "eqasc_validation_454", "prediction": "all x.(PeriodicalTable(x) -> FarKinderElementsListenInRightHandCrown(x))", "score": 0}
{"id": "eqasc_validation_454", "prediction": "all x.(PectronicalTable(x) -> FarLerserRedHandCrownElements(x))", "score": 0}
{"id": "eqasc_validation_454", "prediction": "all x y.((RecentTable(x) & Element(y)) -> FarFarFarFarFarFarFarLeftChicken(y))", "score": 0}
{"id": "eqasc_validation_454", "prediction": "all x y z.((PedianalTable(x) & Elements(y) & RightHandCrown(z)) -> FarLarger(x,y,z))", "score": 0}
{"id": "eqasc_validation_454", "prediction": "all x.(RecentPersonalTable(x) -> FewerElements(x))", "score": 0}
{"id": "eqasc_validation_454", "prediction": "all x.(PeriodicTable(x) -> FarKleinerElementsInRightHandCrown(x))", "score": 0}
{"id": "eqasc_validation_454", "prediction": "all x y.((PivoticalTable(x) & Elements(y) & ListedInRightHandCorner(x,y)) -> FarFifthener(x))", "score": 0}
{"id": "eqasc_validation_454", "prediction": "-all x.(PeriodicTable(x) -> FewerElementsLikeToRightHandCoin(x))", "score": 0}
{"id": "eqasc_validation_454", "prediction": "(LargerElements(periodicalTable) & ListedInRightHandCoin(periodicalTable))", "score": 0}
{"id": "eqasc_validation_454", "prediction": "all x.(PeriodicTable(x) -> FarFamerElementsInRightHandChange(x))", "score": 0}
{"id": "eqasc_validation_454", "prediction": "all x.(PeriodicTable(x) -> FarFarfewerElementsListedInNeightHandCrown(x))", "score": 0}
{"id": "eqasc_validation_454", "prediction": "all x.(PeriodicalTable(x) -> FarFierceElements(x))", "score": 0}
{"id": "eqasc_validation_454", "prediction": "all x.(ProximityTable(x) -> FarCleanerElements(x))", "score": 0}
{"id": "eqasc_validation_454", "prediction": "all x.(PeripheralTable(x) -> FarFarFamerElementsInRightHandCorner(x))", "score": 0}
{"id": "eqasc_validation_454", "prediction": "all x.(PeripheralTable(x) -> FarLittlerElementsInRightHandCoin(x))", "score": 0}
{"id": "eqasc_validation_455", "prediction": "all x y.((Atom(x) & Element(y)) -> ComposedOf(x,y))", "score": 0}
{"id": "eqasc_validation_455", "prediction": "all x.(Element(x) -> (ComposedOfAtoms(x)))", "score": 0}
{"id": "eqasc_validation_455", "prediction": "all x.(Elements(x) -> (Contains(x,Atoms) | Contains(x,Atoms)))", "score": 0}
{"id": "eqasc_validation_455", "prediction": "all x.(Element(x) -> ComposedOfAtoms(x))", "score": 0}
{"id": "eqasc_validation_455", "prediction": "all x.(Elements(x) -> ComposedOfAtoms(x))", "score": 0}
{"id": "eqasc_validation_455", "prediction": "All x.(Element(x) -> ComposedOfAtoms(x))", "score": -1}
{"id": "eqasc_validation_455", "prediction": "all x.(Element(x) -> (ComposedOfAtoms(x) & ComposedOfAtoms(x)))", "score": 0}
{"id": "eqasc_validation_455", "prediction": "all x y.((Element(x) & Atom(y)) -> ComposedOf(x,y))", "score": 0}
{"id": "eqasc_validation_455", "prediction": "all x.((Element(x) & ComposedOfAtoms(x)) -> ComposedOfAtoms(x))", "score": 0}
{"id": "eqasc_validation_456", "prediction": "all x.((NonmetalAtomicMaterial(x) & FarFarMoreNumber(x)) -> LessInNumber(x))", "score": 0}
{"id": "eqasc_validation_456", "prediction": "all x.((NonMetalAtomicMaterial(x) & SmallerNumber(x)) -> Substantial(x))", "score": 0}
{"id": "eqasc_validation_456", "prediction": "all x.(NonmetalAtomicMaterial(x) -> FarKierinNumber(x))", "score": 0}
{"id": "eqasc_validation_456", "prediction": "all x.((NonmetalAtomicMaterial(x) & FarFarLessInNumber(x)) -> -OneNumber(x))", "score": 0}
{"id": "eqasc_validation_456", "prediction": "all x.((NonmetalAtomicMaterial(x) & FarFarFourtyInNumber(x)) -> NoMaterial(x))", "score": 0}
{"id": "eqasc_validation_456", "prediction": "all x.((NonmetalAtomicMaterial(x) & TougherInNumber(x)) -> LeanerInNumber(x))", "score": 0}
{"id": "eqasc_validation_456", "prediction": "all x.(NonmetalAtomicMaterial(x) -> FarLergerInNumber(x))", "score": 0}
{"id": "eqasc_validation_456", "prediction": "all x.(NonmetalAtomicMaterial(x) -> FarRergerInNumber(x))", "score": 0}
{"id": "eqasc_validation_456", "prediction": "all x.((NonmetalAtomicMaterial(x) & FewerInNumber(x)) -> Node(x))", "score": 0}
{"id": "eqasc_validation_456", "prediction": "all x.((NonMetalAtomicMaterial(x) & FarLessNumber(x)) -> SubparPurity(x))", "score": 0}
{"id": "eqasc_validation_456", "prediction": "all x.(NonmetalAtomicMaterial(x) -> FarLesserInNumber(x))", "score": 0}
{"id": "eqasc_validation_456", "prediction": "all x.((NonMetalAtomic(x) & FarFarShorter(x)) -> NuclearMaterial(x))", "score": 0}
{"id": "eqasc_validation_456", "prediction": "all x.(NonMetalAtomicMaterial(x) -> FarBlowerNumberInNumber(x))", "score": 0}
{"id": "eqasc_validation_456", "prediction": "all x.((NometalAtomicMaterial(x) & FarUnderestimable(x)) -> (Material(x) & NumberLimited(x)))", "score": 0}
{"id": "eqasc_validation_456", "prediction": "all x.(NonMetalAtomicMaterial(x) -> FarLerserInPopulation(x))", "score": 0}
{"id": "eqasc_validation_456", "prediction": "all x.(NonmetalAtomicMaterial(x) -> FewerInNumber(x))", "score": 0}
{"id": "eqasc_validation_457", "prediction": "all x y.((Element(x) & PeriodicTable(y)) -> GroupedInto(x,y))", "score": 0}
{"id": "eqasc_validation_457", "prediction": "(GroupedIntoPeriodicTable(Elements) & PeriodicTable(Elements))", "score": 0}
{"id": "eqasc_validation_457", "prediction": "all x y z.((Element(x) & PeriodicTable(y) & PeriodicTable(z)) -> GroupedInto(x,y,z))", "score": 0}
{"id": "eqasc_validation_457", "prediction": "all x y.(Element(x) -> PeriodicTable(y))", "score": 0}
{"id": "eqasc_validation_457", "prediction": "All x y.((Element(x) & PeriodicTable(y)) -> GroupedAt(x,y))", "score": -1}
{"id": "eqasc_validation_457", "prediction": "all x.(Elements(x) -> PeriodicTable(x))", "score": 0}
{"id": "eqasc_validation_457", "prediction": "all x.(Element(x) -> PeriodicTable(x))", "score": 0}
{"id": "eqasc_validation_457", "prediction": "all x y.((Elements(x) & PeriodicTable(y)) -> GroupedInto(x,y))", "score": 0}
{"id": "eqasc_validation_457", "prediction": "are grouped into the PeriodicTable(elements)", "score": -1}
{"id": "eqasc_validation_457", "prediction": "all x.(Element(x) -> Exists y.(PeriodicalTable(y) & GroupedIn(x,y)))", "score": -1}
{"id": "eqasc_validation_458", "prediction": "all x”.", "score": -1}
{"id": "eqasc_validation_458", "prediction": "all x.((NonMetalPeriodicTableGroup(x) & FarLivierInNumber(x)) -> FarLigerInNumber(x))", "score": 0}
{"id": "eqasc_validation_458", "prediction": "all x.((FinancialSpecialTableGroup(x) & FarLessInNumber(x)) -> -MetalPeriodicTableGroup(x))", "score": 0}
{"id": "eqasc_validation_458", "prediction": "all x.(NonMetalPeriphericalTableGroup(x) -> FarLessThan(x))", "score": 0}
{"id": "eqasc_validation_458", "prediction": "all x.(NonMetalPeriodicTableGroup(x) -> FarFamerInNumber(x))", "score": 0}
{"id": "eqasc_validation_458", "prediction": "all x.(NonMetalPeriodicTableGroup(x) -> FarFourthSinnerInNumberInGroup(x))", "score": 0}
{"id": "eqasc_validation_458", "prediction": "all x.((NonmetalPeriodicTableGroup(x) & FarFamerInNumber(x)) -> FarFamerInNumber(x))", "score": 0}
{"id": "eqasc_validation_458", "prediction": "all x y.((NonMetalPeriodicalTableGroup(x) & NonMetalPeriodicTableGroup(y)) -> FarLessInNumber(x,y))", "score": 0}
{"id": "eqasc_validation_458", "prediction": "all x.(NonmetalPeriodicTableGroups(x) -> FarLergerInNumber(x))", "score": 0}
{"id": "eqasc_validation_458", "prediction": "all x.(NonmetalPeriodicTableGroup(x) -> FarFarLessInNumber(x))", "score": 0}
{"id": "eqasc_validation_458", "prediction": "all x.((NonmetalPeriodicTableGroup(x) & FarFierierInNumber(x,Number)) -> FarLess(x,Number))", "score": 0}
{"id": "eqasc_validation_458", "prediction": "all x.((NonMetalPeriodicalTableGroup(x) & LessFourInNumber(x)) -> FarLigerInNumber(x))", "score": 0}
{"id": "eqasc_validation_458", "prediction": "all x.(NumetalPeriodicTableGroup(x) -> FarFarLargerInNumber(x))", "score": 0}
{"id": "eqasc_validation_458", "prediction": "all x.(NonmetalPeriodicTableGroup(x) -> FarLessInNumber(x))", "score": 0}
{"id": "eqasc_validation_458", "prediction": "all x.(NonMetalPeriodicalTableGroup(x) -> FarLenderInNumber(x))", "score": 0}
{"id": "eqasc_validation_458", "prediction": "all x.(NonMetalPeriodicTable(x) -> FarLittlerInNumber(x))", "score": 0}
{"id": "eqasc_validation_459", "prediction": "all x.(Element(x) -> (Metal(x) | Nonmetal(x) | Metalloid(x)))", "score": 0}
{"id": "eqasc_validation_459", "prediction": "all x.(Element(x) -> (Metal(x) | NonMetal(x) | Metalloid(x)))", "score": 0}
{"id": "eqasc_validation_459", "prediction": "all x.(Element(x) -> (Metal(x) | -Metal(x) | Metalloid(x)))", "score": 0}
{"id": "eqasc_validation_460", "prediction": "all x.((Element(x) & -Metal(x) & -Metalloid(x)) -> FarLongerInNumber(x))", "score": 0}
{"id": "eqasc_validation_460", "prediction": "all x.((Element(x) & -Metal(x) & -Metalloid(x)) -> FarFarFierceInNumber(x))", "score": 0}
{"id": "eqasc_validation_460", "prediction": "all x.((Element(x) & -Metal(x) & -Metalloid(x)) -> FarLessNumber(x])", "score": -1}
{"id": "eqasc_validation_460", "prediction": "all x.((Element(x) & -Metal(x) & -Metalloid(x)) -> FarRfewerInNumeracy(x))", "score": 0}
{"id": "eqasc_validation_460", "prediction": "all x.((Electra(x) & -Metal(x)) | -Metalloid(x)) -> FarLesserInNumber(x))", "score": -1}
{"id": "eqasc_validation_460", "prediction": "all x.((Element(x) & -Metal(x) | -Metalloid(x)) -> FarLergierInNumber(x))", "score": 0}
{"id": "eqasc_validation_460", "prediction": "all x.((Element(x) & -Metal(x) & -Metalloid(x)) -> FarLeastNumberInNumber(x))", "score": 0}
{"id": "eqasc_validation_460", "prediction": "all x.((Element(x) & -Metal(x) & -Metalloid(x)) -> FarFarFamerInNumber(x))", "score": 0}
{"id": "eqasc_validation_460", "prediction": "all x.((Element(x) & (-Metal(x) | -Metalloid(x))) -> FarLernerInNumber(x))", "score": 0}
{"id": "eqasc_validation_460", "prediction": "all x.((Element(x) & -MetalElement(x) & -MetalloidElement(x)) -> LessInNumber(x))", "score": 0}
{"id": "eqasc_validation_460", "prediction": "all x.((Element(x) & -Metal(x) & -Metalloid(x)) -> FarLergerInNumber(x))", "score": 0}
{"id": "eqasc_validation_460", "prediction": "all x.((Element(x) & -Metal(x) & -Metalloid(x)) -> Far FewerInNumber(x))", "score": -1}
{"id": "eqasc_validation_460", "prediction": "all x.((Elements(x) & -MetalOrMetalloid(x)) -> FarLersensiorInNumber(x))", "score": 0}
{"id": "eqasc_validation_460", "prediction": "all x.((Element(x) & -Metal(x) & -Metalloid(x)) -> FarFarLessNumber(x))", "score": 0}
{"id": "eqasc_validation_460", "prediction": "all x.((Metallic(x) | Metalloid(x)) -> FarFarLessInSufficientNumber(x))", "score": 0}
{"id": "eqasc_validation_460", "prediction": "all x.((Element(x) & -Metal(x) & -Metalloid(x)) -> FarLessInNumber(x))", "score": 0}
{"id": "eqasc_validation_461", "prediction": "-(Numetal(x) & OnPeriodicTable(x,17))", "score": 0}
{"id": "eqasc_validation_461", "prediction": "-MalteNonMetal(17,PeriodicTable)", "score": 0}
{"id": "eqasc_validation_461", "prediction": "All x y = (NonMetal(x,y) & OnPenelicTable(y)) & -(PreferredTable(x,y) | PeriodicalTable(x,y))))", "score": -1}
{"id": "eqasc_validation_461", "prediction": "all x.((Nonmetal(x) & PeriodicTable(x)) -> Numbers17(x,p,x))", "score": 0}
{"id": "eqasc_validation_461", "prediction": "all x.(Path(x) -> NonMetal(x))", "score": 0}
{"id": "eqasc_validation_461", "prediction": "Exists xl(x,y,z) & Nonmetal(y) & (Nonmetal(z) | PeriodicTable(v,u)))", "score": -1}
{"id": "eqasc_validation_461", "prediction": "17 nonmetals (onperiodicalTable(x) & 17 (nonmetal) & periodicTable(x)))", "score": -1}
{"id": "eqasc_validation_461", "prediction": "(Nonmetal(number) => (CastsOnPeriodicTable(x,17))))", "score": -1}
{"id": "eqasc_validation_461", "prediction": "There are 17 nonmetals on périodicTable(nonmetal2a,nonmetal3b,nonmetal2))", "score": -1}
{"id": "eqasc_validation_461", "prediction": "There are nometals(nonmetals) -> OnPeriodicTable(n,2017))", "score": -1}
{"id": "eqasc_validation_461", "prediction": "all x.((Nonmetal(x) & PeriodicalTable(x)) -> ThereAre17(x))", "score": 0}
{"id": "eqasc_validation_461", "prediction": "(NonMetal(x) & OnPeriodicTable(x)) -27(x))", "score": -1}
{"id": "eqasc_validation_461", "prediction": "17 nonmetals (nonmetal) & OnPeriodicalTable(n))", "score": -1}
{"id": "eqasc_validation_461", "prediction": "(Nonmetal(e) -> TheNonmetal(e))", "score": 0}
{"id": "eqasc_validation_461", "prediction": "(Nometal(n) & PeriodicalTable(n) & NumberOfNonMetals(n) & NumberOfNonmetals(n)))", "score": -1}
{"id": "eqasc_validation_461", "prediction": "DicentNonmetals(y) & OnPeriodicTable(x,p) & OnPeriodicTable(x,j))", "score": -1}
{"id": "eqasc_validation_462", "prediction": "all x.((Element(x) & NonMetal(x)) -> ToRightViaSemiconductor(x))", "score": 0}
{"id": "eqasc_validation_462", "prediction": "all x.((Element(x) & ToRightOfSemiconductors(x)) -> Nonmetal(x))", "score": 0}
{"id": "eqasc_validation_462", "prediction": "all x.((Element(x) & Semiconductor(y) & ToTheRightOf(x,y)) -> Nonmetal(x))", "score": 0}
{"id": "eqasc_validation_462", "prediction": "all x.((Element(x) & ToRightOfSemiconductors(x)) -> Nonmetals(x))", "score": 0}
{"id": "eqasc_validation_462", "prediction": "all x.((Element(x) & ToRedOfSemiconductors(x)) -> Nonmetals(x))", "score": 0}
{"id": "eqasc_validation_462", "prediction": "all x.((Element(x) & ToRightOfSelective(x)) -> Nonmetals(x))", "score": 0}
{"id": "eqasc_validation_462", "prediction": "all x y.((Element(x) & Semiconductor(y) & ToRightPattern(x,y)) -> Nonmetal(x))", "score": 0}
{"id": "eqasc_validation_462", "prediction": "all x.((Element(x) & Optical(x) & RightOfSemiconductors(x)) -> Nonmetal(x))", "score": 0}
{"id": "eqasc_validation_462", "prediction": "all x.((Element(x) & RightOfSemiconductors(x)) -> Nonmetals(x))", "score": 0}
{"id": "eqasc_validation_462", "prediction": "all x.((Element(x) & -(SubsequentElement(x) & ToRightOf(x,Semiconductor))) -> Nonmetal(x))", "score": 0}
{"id": "eqasc_validation_462", "prediction": "all x.(Element(x) -> Nonmetal(x))", "score": 0}
{"id": "eqasc_validation_462", "prediction": "all x.(ElementsToRightOfSelectiveSelective(x) -> Nonmetals(x))", "score": 0}
{"id": "eqasc_validation_462", "prediction": "all x.(((Element(x) & ToRightOfSemiconductors(x)) -> Nonmetal(x))", "score": -1}
{"id": "eqasc_validation_462", "prediction": "(-Elements(e) & RightOfSemiconductor(e))", "score": 0}
{"id": "eqasc_validation_463", "prediction": "all x.((Element(x) & ToTheRightOfSerials(x)) -> FarFarLargerInNumber(x))", "score": 0}
{"id": "eqasc_validation_463", "prediction": "all x.((ElementsToRightOfSemiconductor(x) & FarFarLergerInNumber(x)) -> SemiconductorElements(x))", "score": 0}
{"id": "eqasc_validation_463", "prediction": "all x.((Element(x) & InResidenceOfSemiconductors(x)) -> FarFarLargerInNumber(x))", "score": 0}
{"id": "eqasc_validation_463", "prediction": "all x.((ElementsToRightOfSemiconductors(x)) -> FarLessInNumber(x))", "score": 0}
{"id": "eqasc_validation_463", "prediction": "all x.((ElementsToRightOfSemiconductors(x) & FarLergerNumber(x)) -> SemiconductorSemiconductorSensory(x))", "score": 0}
{"id": "eqasc_validation_463", "prediction": "all x.((Element(x) & LeftOfSemiconductors(x)) -> FarLendererInNumeracy(x))", "score": 0}
{"id": "eqasc_validation_463", "prediction": "all x.((Element(x) & ToTheRightOfSemiconductors(x)) -> FarFamerNumberInNumber(x))", "score": 0}
{"id": "eqasc_validation_463", "prediction": "all x y.((Element(x) & Semiconductor(y)) -> FarLeastInNumber(x,y))", "score": 0}
{"id": "eqasc_validation_463", "prediction": "all x.((ElementsToRightOfSubselectives(x) & FarFarLargerInNumber(x)) -> Semiconductor(x))", "score": 0}
{"id": "eqasc_validation_463", "prediction": "all x.((ElementsToRightOfSemiconductors(x) & FarFarLessInNumber(x,number)) -> Semiconductor(x))", "score": 0}
{"id": "eqasc_validation_463", "prediction": "all x y.((Element(x) & Semiconductor(y)) -> FarLessInNumber(x,y))", "score": 0}
{"id": "eqasc_validation_463", "prediction": "all x.((Element(x) & ToTheRightOfSemiconductors(x)) -> FarFarLimiterInNumber(x))", "score": 0}
{"id": "eqasc_validation_463", "prediction": "all x.((Element(x) & ToRedOfSemiconductors(x)) -> FarFarLessInNumeracy(x))", "score": 0}
{"id": "eqasc_validation_463", "prediction": "all x.((ElementsToRightOfSubsequents(x) & ForCutting(x)) -> FarFarLargerInNumber(x))", "score": 0}
{"id": "eqasc_validation_463", "prediction": "all x y z.((Electron(x) & Semiconductor(y) 3 & ElementsToRight(x,y)) -> FarFarFolderInNumber(x,z))", "score": -1}
{"id": "eqasc_validation_463", "prediction": "all x.((ElementsToTheRightOfSemiconductors(x) & FarLongerNumber(x)) -> FewerNumber(x))", "score": 0}
{"id": "eqasc_validation_464", "prediction": "for medical reasons (importantbloodtype))", "score": -1}
{"id": "eqasc_validation_464", "prediction": "all x.(BloodType(x) -> ImportantForMedicalPurposes(x))", "score": 0}
{"id": "eqasc_validation_464", "prediction": "all x.((BloodType(x) & Medical(x)) -> ImportantFor(x,y))", "score": 0}
{"id": "eqasc_validation_464", "prediction": "all x.(BloodType(x) -> ImportantForMedicalRates(x))", "score": 0}
{"id": "eqasc_validation_464", "prediction": "all x.(BloodType(x) -> ImportantForMedicalCauses(x))", "score": 0}
{"id": "eqasc_validation_464", "prediction": "all x.((BloodType(x) & MedicalRapidness(x)) -> Important(x))", "score": 0}
{"id": "eqasc_validation_464", "prediction": "all x.((BloodType(x) & MedicalArea(x)) -> ImportantFor(x,y))", "score": 0}
{"id": "eqasc_validation_464", "prediction": "all x.((BloodType(x) & MedicalMatters(x)) -> ImportantFor(x,y))", "score": 0}
{"id": "eqasc_validation_464", "prediction": "all x.((BloodType(x) & MedicalRates(x)) -> Important(x))", "score": 0}
{"id": "eqasc_validation_464", "prediction": "all x.(BloodType(x) -> ImportantForMedicalCredits(x))", "score": 0}
{"id": "eqasc_validation_464", "prediction": "all x.(BlueType(x) -> ImportantForMedicalCauses(x))", "score": 0}
{"id": "eqasc_validation_464", "prediction": "all x.((BloodType(x) & MedicalRapids(x)) -> ImportantFor(x,y))", "score": 0}
{"id": "eqasc_validation_465", "prediction": "all x.((SeriousEmergency(x) & BloodTypeCompatible(x)) -> Team(x))", "score": 0}
{"id": "eqasc_validation_465", "prediction": "all x y.((Emergency(x) & Team(y) & SeriousEmergency(x,y)) -> KnowsCompatibleBloodTypes(y,x))", "score": 0}
{"id": "eqasc_validation_465", "prediction": "all x y z.((SeriousEmergency(x) & Team(y) & BloodType(z)) -> Knows(y,x))", "score": 0}
{"id": "eqasc_validation_465", "prediction": "all x y.((SeriousEmergency(x) & Team(y)) -> KnowsCompatibleBloodTypes(y,x))", "score": 0}
{"id": "eqasc_validation_465", "prediction": "all x.((SeriousEmergency(x)) -> KnowsCompatibleBloodTypes(x))", "score": 0}
{"id": "eqasc_validation_465", "prediction": "all x.(SeriousEmergency(x) -> KnowsCompatibleBloodType(x))", "score": 0}
{"id": "eqasc_validation_465", "prediction": "all x.((Emergency(x) & Serious(x)) -> KnowsCompatibleBloodTypes(x))", "score": 0}
{"id": "eqasc_validation_465", "prediction": "all x.((SeriousEmergency(x) & TeamsClosingPurposeInBloodTypes(x)) -> KnowsCompatibleTypes(x))", "score": 0}
{"id": "eqasc_validation_465", "prediction": "all x.(SeriousEmergency(x) -> KnowsCompatibleBloodTypes(x))", "score": 0}
{"id": "eqasc_validation_465", "prediction": "all x.((SeriousEmergency(x) & CompatibleBloodTypes(x)) -> Knows(x))", "score": 0}
{"id": "eqasc_validation_465", "prediction": "all x.(SeriousEmergency(x) -> KnowsFriendlyBloodTypes(x))", "score": 0}
{"id": "eqasc_validation_465", "prediction": "all x.((SeriousEmergency(x) & CompatibleBloodTypes(x)) -> KnowsWhoWithests(x))", "score": 0}
{"id": "eqasc_validation_465", "prediction": "all x.((Emergency(x) & Serious(x)) -> FindsCompatibleBloodTypes(x))", "score": 0}
{"id": "eqasc_validation_465", "prediction": "all x.(SeriousEmergency(x) -> exists y.(CompatibleBloodType(y) & Has(x,y)))", "score": 0}
{"id": "eqasc_validation_466", "prediction": "all x.(((CompatibleBlood(x) & InMedicalRoots(x)) -> ImportantForMedicalRite(x))", "score": -1}
{"id": "eqasc_validation_466", "prediction": "all x.((BloodCompatible(x)) -> ImportantForMedicalRates(x))", "score": 0}
{"id": "eqasc_validation_466", "prediction": "all x.((CompatibleBlood(x) & Knows(x,Blood)) -> ImportantForMedicalCrues(x))", "score": 0}
{"id": "eqasc_validation_466", "prediction": "all x.(CompatibleBlood(x) -> ImportantForMedicalRates(x))", "score": 0}
{"id": "eqasc_validation_466", "prediction": "all x.((BothHasCompatibleBlood(x)) -> ImportantForMedicalRates(x))", "score": 0}
{"id": "eqasc_validation_466", "prediction": "all x y z.((CompatibleBlood(x) & Patient(y) & MedicalCause(z)) -> ImportantFor(x,y,z))", "score": 0}
{"id": "eqasc_validation_466", "prediction": "all x.((CompatibleBlood(x) & HasCompatibleBlood(x)) -> ImportantForMedicalCauses(x))", "score": 0}
{"id": "eqasc_validation_466", "prediction": "all x.((BothCompatibleBlood(x) & KnowsDailyCompatibleBlood(x)) -> ImportantForMedicalAreas(x))", "score": 0}
{"id": "eqasc_validation_466", "prediction": "all x.((HasCompatibleBlood(x) & Medical(x)) -> ImportantFor(x,Medical(x))", "score": -1}
{"id": "eqasc_validation_466", "prediction": "all x.((BothCompatibleBlood(x) & MedicalCauses(x)) -> ImportantForMedicalArguments(x))", "score": 0}
{"id": "eqasc_validation_466", "prediction": "all x y.((ConsistentBlood(x) & BloodImportantForMedicalCauses(x)) -> ImportantForMedicalRates(x))", "score": 0}
{"id": "eqasc_validation_466", "prediction": "all x y.((HealthyCourses(x) & CompatibleBlood(y)) -> ImportantForMedicalAreas(x))", "score": 0}
{"id": "eqasc_validation_466", "prediction": "all x.((CompatibleBlood(x) & HasBlood(x)) -> ImportantForMedicalRheems(x))", "score": 0}
{"id": "eqasc_validation_466", "prediction": "all x.((HealthyRights(x) & CompatibleBlue(x)) -> ImportantForMedical(x))", "score": 0}
{"id": "eqasc_validation_466", "prediction": "all x.((CanConnectionBlood(x) & MedicalRental(x)) -> ImportantFor(x,y))", "score": 0}
{"id": "eqasc_validation_466", "prediction": "all x.((HasCompatibleBlood(x)) -> ImportantForMedicalCauses(x))", "score": 0}
{"id": "eqasc_validation_467", "prediction": "all x.(MedicalTreatment(x) -> OverseenByMedicalPersonel(x))", "score": 0}
{"id": "eqasc_validation_467", "prediction": "all x y.((MedicalTreatment(x) & MedicalPersonnel(y)) -> Oversees(x,y))", "score": 0}
{"id": "eqasc_validation_467", "prediction": "all x.(MedicalTreatment(x) -> OverseenByMedicalPersonnel(x))", "score": 0}
{"id": "eqasc_validation_467", "prediction": "all x y.((MedicalTreatment(x) & MedicalPersonnel(y)) -> Assisted(y))", "score": 0}
{"id": "eqasc_validation_467", "prediction": "all x y.((Maleficent(x) & MedicalTreatment(y)) -> Oversees(x,y))", "score": 0}
{"id": "eqasc_validation_467", "prediction": "all x.(MedicalTreatment(x) -> OverseenBy(x,MedicalPersonnel))", "score": 0}
{"id": "eqasc_validation_467", "prediction": "all x y.((MedicalTreatment(x) & MedicalPersonnel(y)) -> OverseenBy(x,y))", "score": 0}
{"id": "eqasc_validation_467", "prediction": "all x.(MedicalTreatment(x) -> SupervisedByMedicalPerson(x))", "score": 0}
{"id": "eqasc_validation_467", "prediction": "all x.(MedicalTraining(x) -> SurvivesByMedicalPersonnel(x))", "score": 0}
{"id": "eqasc_validation_468", "prediction": "all x y.((HospitalPersonnel(x) & BloodType(y)) -> WantsToKnow(x,y))", "score": 0}
{"id": "eqasc_validation_468", "prediction": "all x.(HospitalPersonnel(x) -> MayWantToKnowBloodType(x))", "score": 0}
{"id": "eqasc_validation_468", "prediction": "all x.(HospitalPersonnel(x) -> (WantToKnowBloodType(x) & InterestedInBloodType(x)))", "score": 0}
{"id": "eqasc_validation_468", "prediction": "all x.((HospitalPersonnel(x) & WantsToKnowBloodType(x)) -> WantsToKnowBloodType(x))", "score": 0}
{"id": "eqasc_validation_468", "prediction": "all x y.((HospitalPersonnel(x) & BloodType(y)) -> MayQuiet(x,y))", "score": 0}
{"id": "eqasc_validation_468", "prediction": "may want to know blood type.", "score": -1}
{"id": "eqasc_validation_468", "prediction": "all x.(HospitalPersonnel(x) -> MayWannaKnowBloodType(x))", "score": 0}
{"id": "eqasc_validation_468", "prediction": "all x.(HospitalPersonnel(x) -> (UsesBloodType(x) | CaresForBloodType(x)))", "score": 0}
{"id": "eqasc_validation_468", "prediction": "all x.(HospitalPersonnel(x) -> (WantToKnow(x,BloodType) | WantToKnow(x,BloodType)))", "score": 0}
{"id": "eqasc_validation_468", "prediction": "all x.(HospitalPersonnel(x) -> (WantToKnowBloodType(x)))", "score": 0}
{"id": "eqasc_validation_468", "prediction": "all x.(HospitalPersonnel(x) -> (CarefullyKnowsBloodType(x) | CarefullyKnowsBloodType(x)))", "score": 0}
{"id": "eqasc_validation_468", "prediction": "all x y.((HospitalPersonnel(x) & SymptomType(y)) -> WouldLoveToKnow(x,y))", "score": 0}
{"id": "eqasc_validation_468", "prediction": "all x.(HospitalPersonnel(x) -> MayWantToKnowBloodType(x,y))", "score": 0}
{"id": "eqasc_validation_469", "prediction": "all x y.((Treatment(x) & Cirrhosis(y)) -> Medical(x))", "score": 0}
{"id": "eqasc_validation_469", "prediction": "all x.(Cirrhosis(x) -> MedicalTreatment(x))", "score": 0}
{"id": "eqasc_validation_469", "prediction": "all x.(CyrrhosisTreatment(x) -> Medical(x))", "score": 0}
{"id": "eqasc_validation_469", "prediction": "all x.((Cyrrhosis(x) & Treatment(x)) -> Medical(x))", "score": 0}
{"id": "eqasc_validation_469", "prediction": "all x.((Treatment(x) & Cirrhosis(y)) -> Medical(x))", "score": 0}
{"id": "eqasc_validation_469", "prediction": "all x.(Cirrhosis(x) -> Medical(x))", "score": 0}
{"id": "eqasc_validation_469", "prediction": "(MedicalTreatment(cirrhosis) -> Treatment(cirrhosis))", "score": 0}
{"id": "eqasc_validation_469", "prediction": "All x.((Cirrhosis(x) & Treatment(x)) -> Medical(x))", "score": -1}
{"id": "eqasc_validation_469", "prediction": "(MedicalTreatment(cirrhosis) | Treatment(drug)))", "score": -1}
{"id": "eqasc_validation_469", "prediction": "the treatment of cirrhosis.", "score": -1}
{"id": "eqasc_validation_469", "prediction": "All x.(Cyrrhosis(x) -> MedicalTreatment(x))", "score": -1}
{"id": "eqasc_validation_469", "prediction": "all x.((Cirrhosis(x) & Treatment(x)) -> Medical(x))", "score": 0}
{"id": "eqasc_validation_469", "prediction": "all x.(Cyrrhosis(x) -> MedicalTreatment(x))", "score": 0}
{"id": "eqasc_validation_470", "prediction": "exists x.(Stem(x) & ImportantForTreatment(x))", "score": 0}
{"id": "eqasc_validation_470", "prediction": "exists x.(BloodType(x) & ImportantForTreatments(x))", "score": 0}
{"id": "eqasc_validation_470", "prediction": "all x.(BloodType(x) -> ImportantForTreatments(x))", "score": 0}
{"id": "eqasc_validation_470", "prediction": "exists x.(Drug(x) & BloodType(x))", "score": 0}
{"id": "eqasc_validation_470", "prediction": "all x y.((BloodType(x) & Treatment(y)) -> ImportantFor(x,y))", "score": 0}
{"id": "eqasc_validation_470", "prediction": "all x.((BloodType(x) & ManyTreatments(x)) -> ImportantFor(x,x))", "score": 0}
{"id": "eqasc_validation_470", "prediction": "exists x y.((BloodType(x) & Treatment(y)) -> Important(x,y))", "score": 0}
{"id": "eqasc_validation_470", "prediction": "all x.(BloodType(x) -> ImportantForTreatment(x))", "score": 0}
{"id": "eqasc_validation_470", "prediction": "all x.((BloodType(x) & -Treatment(x)) -> ImportantFor(x,y))", "score": 0}
{"id": "eqasc_validation_470", "prediction": "exists x.(BloodType(x) & ImportantFor(x))", "score": 0}
{"id": "eqasc_validation_470", "prediction": "exists x.(BloodType(x) & ImportantFor(x,Treatment))", "score": 0}
{"id": "eqasc_validation_470", "prediction": "exists x.(BloodType(x) & ImportantForTreatment(x))", "score": 0}
{"id": "eqasc_validation_470", "prediction": "exists x.(BloodType(x) & ForTreatment(x))", "score": 0}
{"id": "eqasc_validation_471", "prediction": "all x.((BloodType(x) & O(x) | A(x) | B(x) | AB(x))) -> ImportantRoleInPatientCare(x))", "score": -1}
{"id": "eqasc_validation_471", "prediction": "all x y z.((BloodType(x) & BloodType(y) & (O(x) | A(x) | B(x) | AB(x))) -> PlaysImportantRole(y))", "score": 0}
{"id": "eqasc_validation_471", "prediction": "all x.((BloodType(x) & (O(x) | A(x) | B(x) | AB(x))) -> ImportantInPatientCare(x))", "score": 0}
{"id": "eqasc_validation_471", "prediction": "all x.((Four(x) & BloodType(x) & O(x)) | A(x) | B(x) | AB(x)) -> ImportantRoleInPatientCare(x))", "score": -1}
{"id": "eqasc_validation_471", "prediction": "all x y.((BloodType(x) & O(y) & A(y) & B(y) & AB(y)) -> PlaysInDependentCare(x,y))", "score": 0}
{"id": "eqasc_validation_471", "prediction": "all x.((BloodType(x) & O(x) | A(x) | B(x) | A(x))) -> ImportantRoleInPatientCare(x))", "score": -1}
{"id": "eqasc_validation_471", "prediction": "all x.((BloodType(x) & (O(x) | A(x) | B(x) | AB(x))) -> ImportantRoleInBathCare(x))", "score": 0}
{"id": "eqasc_validation_471", "prediction": "all x.((BloodType(x) & O(x) & A(x) & B(x) & AB(x)) -> ImportantRoleInPatientCare(x))", "score": 0}
{"id": "eqasc_validation_471", "prediction": "all x.((BloodType(x) & O(x) | A(x) | B(x) | Ab(x))) -> ImportantRoleInPatientCare(x))", "score": -1}
{"id": "eqasc_validation_471", "prediction": "all x.((BloodType(x) & O(x) & A(x) & B(x) & Ab(x)) -> ImportantRoleInPatientCare(x))", "score": 0}
{"id": "eqasc_validation_471", "prediction": "all x.((BloodType(x) & ImportantRole(x)) -> (O(x) | A(x) | B(x) | A(x)))", "score": 0}
{"id": "eqasc_validation_471", "prediction": "all x.((BloodType(x) & O(x) & A(x) & B(x) & AB(x)) -> ImportantInPatientCare(x))", "score": 0}
{"id": "eqasc_validation_471", "prediction": "all x.((BloodType(x) & (O) | A(x) | B(x) | AB(x))) -> ImportantRoleInPatientCare(x))", "score": -1}
{"id": "eqasc_validation_472", "prediction": "all x y.((Board(x) | Abb(x)) -> ImportantForMedicalRates(x,y))", "score": 0}
{"id": "eqasc_validation_472", "prediction": "all x.((TypeO(x) | TypeAB(x)) -> ImportantForFormedMedicalRates(x))", "score": 0}
{"id": "eqasc_validation_472", "prediction": "all x.((TypeOA(x) | TypeAB(x)) -> ImportantForMedicalRates(x))", "score": 0}
{"id": "eqasc_validation_472", "prediction": "all x.((O A B(x) | AAB(x)) -> ImportantForMedicalCauses(x))", "score": -1}
{"id": "eqasc_validation_472", "prediction": "all x.(Name(x,Y) -> (B(x) | AB(x)) & ImportantForMedicalReason(x)))", "score": -1}
{"id": "eqasc_validation_472", "prediction": "all x.((BeingTypeO(x) | BecomingTypeAB(x)) -> ImportantForMedicalRates(x))", "score": 0}
{"id": "eqasc_validation_472", "prediction": "all x.((TypeOA(x) | TypeAB(x)) -> ImportantForMedicalCauses(x))", "score": 0}
{"id": "eqasc_validation_472", "prediction": "all x.((TypOB(x) | TypeAB(x)) -> ImportantForMedicalAnds(x))", "score": 0}
{"id": "eqasc_validation_472", "prediction": "all x y.((B(x) | Ab (x))) -> ImportantForMedicalAndities(x,y))", "score": -1}
{"id": "eqasc_validation_472", "prediction": "all x.((B(x) | AB(x)) -> ImportantForMedicalRates(x))", "score": 0}
{"id": "eqasc_validation_472", "prediction": "all x.(B & TypeO(x)) -> ImportantForMedicalComforts(x))", "score": -1}
{"id": "eqasc_validation_472", "prediction": "all x.((B(x) | AB(x)) -> ImportantForMedicalCauses(x))", "score": 0}
{"id": "eqasc_validation_472", "prediction": "(AllowedFor(BYO) & ImportantFor(By(AB,MM)) -> (TypeO(B) | TypeA(AB))))", "score": -1}
{"id": "eqasc_validation_472", "prediction": "all x.((Boy(x) | Abby(x)) -> ImportantForMedicalCauses(x))", "score": 0}
{"id": "eqasc_validation_472", "prediction": "all x.(PatternO(x) -> (B(x) | AB(x)) & ImportantForMedicalRights(x)))", "score": -1}
{"id": "eqasc_validation_472", "prediction": "all x.((B Type(x) | AB Type(x)) -> ImportantForMedicalRoads(x))", "score": -1}
{"id": "eqasc_validation_473", "prediction": "all x.(BloodType(x) -> (DeterminedByHornedAntigensAndAntibodies(x)))", "score": 0}
{"id": "eqasc_validation_473", "prediction": "all x.(BloodType(x) -> (FoundByAllegedAntigens(x) & DeterminedByAntibodies(x)))", "score": 0}
{"id": "eqasc_validation_473", "prediction": "all x.(BloodType(x) -> (HeritageAntigens(x) & Antibodies(x)))", "score": 0}
{"id": "eqasc_validation_473", "prediction": "all x.(BloodType(x) -> (DailyProtein(x) & Immune(x)))", "score": 0}
{"id": "eqasc_validation_473", "prediction": "all x.(HerevityAntigensAndAntibodies(x) -> BloodTypeDetermination(x))", "score": 0}
{"id": "eqasc_validation_473", "prediction": "all x.(BloodType(x) -> (DeterminedByIninheritedAntigens(x) & DeterminedByAntibodies(x)))", "score": 0}
{"id": "eqasc_validation_473", "prediction": "all x.(BloodType(x) -> (HadinheritedAntigens(x) & HasAntibodies(x)))", "score": 0}
{"id": "eqasc_validation_473", "prediction": "all x.(LivestockType(x) -> (DeterminedBy(x,inheritedAntigens) & DeterminedBy(x,Antibodies)))", "score": 0}
{"id": "eqasc_validation_473", "prediction": "all x.(BloodType(x) -> (AllegatedAntigens(x) & RetainedAntibodies(x)))", "score": 0}
{"id": "eqasc_validation_473", "prediction": "all x.((BloodType(x) & HasAllergicAntigens(x) & HasAntibodies(x)) -> DeterminedBy(x,y))", "score": 0}
{"id": "eqasc_validation_473", "prediction": "all x.(BloodType(x) -> (HasHierderedAntigens(x) & HasAntibody(x)))", "score": 0}
{"id": "eqasc_validation_473", "prediction": "all x.(BloodType(x) -> (DoubledByHorse(x) & DeterminedByAntigens(x) & DeterminedByAntibodies(x)))", "score": 0}
{"id": "eqasc_validation_473", "prediction": "all x.(BloodType(x) -> (MetifiedBy(x,inheritedantigens) | DeterminéeBy(x,antibodies)))", "score": 0}
{"id": "eqasc_validation_473", "prediction": "all x.(BloodType(x) -> (DeterminedBy(x,inheritedAntigens) & DeterminedBy(x,antibodies)))", "score": 0}
{"id": "eqasc_validation_473", "prediction": "all x y.((BloodType(x) & ErasedAntigen(y) & ImmunopathicAntibodies(y)) -> DeterminedBy(x,y))", "score": 0}
{"id": "eqasc_validation_473", "prediction": "all x.(BlueTyp(x) -> (DeterminedByThreat(x,Antigens) & DeterminedByAntibodies(x,Antibodies)))", "score": 0}
{"id": "eqasc_validation_474", "prediction": "all x y z.((HeritageAntigen(x) & Antibodies(y) & Components(z)) -> ImportantForMedicalCauses(x,z))", "score": 0}
{"id": "eqasc_validation_474", "prediction": "all x y.((EarnedAntigen(x) & Antibodies(y)) -> (ImportantForMedicalRitus(x,y) & ImportantForMedicalRite(y)))", "score": 0}
{"id": "eqasc_validation_474", "prediction": "all x.((EarnedAntigens(x) | HeterogeneousAntibodies(x)) -> ImportantForMedicalCauses(x))", "score": 0}
{"id": "eqasc_validation_474", "prediction": "all x.((HerevenedAntigen(x) | Immunoaggressive(x)) -> ImportantForMedicalCauses(x))", "score": 0}
{"id": "eqasc_validation_474", "prediction": "all x.(MedicalResponsibility(x) -> (Patient(x) & Hepatogen(x) & Antibodies(x) & ImportantForMedicalRates(x)))", "score": 0}
{"id": "eqasc_validation_474", "prediction": "all x.(MethodicalClarity(x) -> (InfluentOnHerevansAndAntibodies(x) & ImportantForMedicalClarity(x)))", "score": 0}
{"id": "eqasc_validation_474", "prediction": "all x y.((EarnedAntigen(x) & Immunostatus(y)) -> ImportantForMedicalAncients(x,y))", "score": 0}
{"id": "eqasc_validation_474", "prediction": "all x.((EarnedAntigens(x) & EarnedAntibodies(x)) -> ImportantForMedicalCauses(x))", "score": 0}
{"id": "eqasc_validation_474", "prediction": "all x y z.((EratedAntigen(x) & Antibody(y) & MedicalRates(z)) -> (ImportantFor(x,y,z) & RemainsIn(x,y,z)))", "score": 0}
{"id": "eqasc_validation_474", "prediction": "all x.(EarnedAntigensAndAntibodies(x) -> ImportantForMedicalRates(x))", "score": 0}
{"id": "eqasc_validation_474", "prediction": "all x.((ErasedAntigens(x) & InheritanceAntibodies(x)) -> ImportantForMedicalCeremonies(x))", "score": 0}
{"id": "eqasc_validation_474", "prediction": "all x.((ErasedAntigens(x) & ReceivedAntibodies(x)) -> ImportantForMedicalRules(x))", "score": 0}
{"id": "eqasc_validation_474", "prediction": "all x y z.((EarnedAntigens(x) & Antibodies(y) & MedicalRights(z)) -> ImportantFor(x,analyte,medicalRights))", "score": 0}
{"id": "eqasc_validation_474", "prediction": "all x y z.(((EboratedAntigen(x) & Antibody(y) & MedicalMotor(z)) -> (Excel(x,y) & HealthMotor(z)))", "score": -1}
{"id": "eqasc_validation_474", "prediction": "all x.((EarnedAntigens(x) | EratedAntibodies(x)) -> ImportantForMedicalCauses(x))", "score": 0}
{"id": "eqasc_validation_474", "prediction": "all x.((ErboviteAntigenInHereditaryMedical(x) & InHeritageAntigensAndAntibodies(x)) -> ImportantForMedicalRates(x))", "score": 0}
{"id": "eqasc_validation_475", "prediction": "all x.(MedicalIntervention(x) -> (AbovePills(x) & BeyondBandages(x) & BeyondSurgery(x)))", "score": 0}
{"id": "eqasc_validation_475", "prediction": "all x.(MedicalIntervention(x) -> (GoesAbovePills(x) & GoesBetas(x) & GoesBetas(x) & GoesBeta(x)))", "score": 0}
{"id": "eqasc_validation_475", "prediction": "all x.(MedicalIntervention(x) -> (GoesBeyondPills(x) & GoesBeyondBandages(x) & GoesBeyondSurgery(x)))", "score": 0}
{"id": "eqasc_validation_475", "prediction": "all x.(MedicalIntervention(x) -> (Almost(x) & beyond(x) & Contains(x,Pills) & Contains(x,Bandages) & Contains(x,Surgery)))", "score": 0}
{"id": "eqasc_validation_475", "prediction": "all x.(MedicalIntervention(x) -> (GoesBetweenPills(x) & GoesBetweenBandages(x) & GoesBetweenSurgery(x)))", "score": 0}
{"id": "eqasc_validation_475", "prediction": "all x.(MedicalIntervention(x) -> (IsLittleAbovePills(x) | IsBandages(x) | IsSurgery(x)))", "score": 0}
{"id": "eqasc_validation_475", "prediction": "all x.(MedicalIntervention(x) -> (-Pills(x) & Bandages(x) & Surgery(x)))", "score": 0}
{"id": "eqasc_validation_475", "prediction": "all x.(MedicalIntervention(x) -> (ByPills(x) | ByBandages(x) | BySurgery(x)))", "score": 0}
{"id": "eqasc_validation_475", "prediction": "all x.(MedicalIntervention(x) -> (WithoutPills(x) & BeyondBandages(x) & BeyondSurgicalInterventions(x)))", "score": 0}
{"id": "eqasc_validation_475", "prediction": "all x y z w.((MedicalIntervention(x) & Pill(y) & Bandage(z) & Surgery(w)) -> Allowed(x,y,z,w))", "score": 0}
{"id": "eqasc_validation_475", "prediction": "all x.(MedicalIntervention(x) -> (HasPills(x) & HasBandages(x) & HasSurgery(x)))", "score": 0}
{"id": "eqasc_validation_475", "prediction": "exists x.(MedicalIntervention(x) & WelcomeTo(x,Pills) & WelcomeTo(x,Bandages) & OurlcomeTo(x,Surgery))", "score": 0}
{"id": "eqasc_validation_475", "prediction": "all x.((MedicalIntervention(x) & BeyondPills(x) & BeyondBandages(x) & BeyondSurgery(x)) -> ScientificImprovement(x))", "score": 0}
{"id": "eqasc_validation_475", "prediction": "all x y z.((MedicalIntervention(x) & Pills(y) & Bandages(z) & Surgery(w)) -> (GoesBeyond(x,y,z) & EvenAbove(x,w)))", "score": 0}
{"id": "eqasc_validation_475", "prediction": "all x.(MedicalInterventions(x) -> (GoesBeyondPills(x) & GoesBeyondBandages(x) & GoesBeyondSurgicalInterventions(x)))", "score": 0}
{"id": "eqasc_validation_476", "prediction": "all x y.((BloodType(x) & Surgery(y)) -> ImportantFor(x,y))", "score": 0}
{"id": "eqasc_validation_476", "prediction": "all x y z.((BloodType(x) & Surgery(y) & Surgery(z)) -> ImportantToKnow(x,y,z))", "score": 0}
{"id": "eqasc_validation_476", "prediction": "all x.(Bloodtype(x) -> ImportantToKnow(x))", "score": 0}
{"id": "eqasc_validation_476", "prediction": "all x.(BloodType(x) -> ImportantToKnow(x))", "score": 0}
{"id": "eqasc_validation_476", "prediction": "all x.((BloodType(x) & ImportantForSurgery(x)) -> Unbekannt(x))", "score": 0}
{"id": "eqasc_validation_476", "prediction": "all x.((BloodType(x) & Procedure(x)) -> ImportantToKnow(x,ex))", "score": 0}
{"id": "eqasc_validation_476", "prediction": "all x.((BloodType(x) & ImportantForSurgery(x)) -> Knows(x,y))", "score": 0}
{"id": "eqasc_validation_476", "prediction": "all x.(BloodType(x) -> ImportantToKnowBeforeSurgery(x))", "score": 0}
{"id": "eqasc_validation_476", "prediction": "all x y z.((BloodType(x) & Surgery(y) & Surgical(z)) -> ImportantToKnow(x,y,z))", "score": 0}
{"id": "eqasc_validation_476", "prediction": "all x.(BloodType(x) -> ImportantForSurgery(x))", "score": 0}
{"id": "eqasc_validation_476", "prediction": "all x.((BloodType(x) & BelongsToOptomosurgery(x)) -> ImportantToKnow(x))", "score": 0}
{"id": "eqasc_validation_476", "prediction": "all x.((BloodType(x) & PriorToSurgery(x)) -> ImportantToKnow(x))", "score": 0}
{"id": "eqasc_validation_476", "prediction": "all x.(BloodType(x) -> ImportantInPrimarySurgery(x))", "score": 0}
{"id": "eqasc_validation_476", "prediction": "all x.(BloodType(x) -> ImportantAfterSurgery(x))", "score": 0}
{"id": "eqasc_validation_477", "prediction": "all x.(Transplant(x) -> MedicalMajority(x))", "score": 0}
{"id": "eqasc_validation_477", "prediction": "all x.(Transplant(x) -> Miracle(x))", "score": 0}
{"id": "eqasc_validation_477", "prediction": "all x.(Transplant(x) -> MedicalMastrology(x))", "score": 0}
{"id": "eqasc_validation_477", "prediction": "all x.(Transplant(x) -> MedicalMammoth(x))", "score": 0}
{"id": "eqasc_validation_478", "prediction": "all x y.((Transplant(x) & BloodType(y)) -> ImportantFor(x,y))", "score": 0}
{"id": "eqasc_validation_478", "prediction": "All x.((BloodType(x) & Transplant(x)) -> ImportantForTransplant(x))", "score": -1}
{"id": "eqasc_validation_478", "prediction": "All x.(Transplant(x) -> ImportantBloodType(x))", "score": -1}
{"id": "eqasc_validation_478", "prediction": "all x.(BloodType(x) -> ImportantForTransplants(x))", "score": 0}
{"id": "eqasc_validation_478", "prediction": "all x y.((Transplant(x) & Transplantation(y)) -> ImportantBloodType(x,y))", "score": 0}
{"id": "eqasc_validation_478", "prediction": "all x.(Blood Type(x) -> ImportantForTransplants(x))", "score": -1}
{"id": "eqasc_validation_478", "prediction": "all x.((BloodType(x) & Transplants(x)) -> Important(x))", "score": 0}
{"id": "eqasc_validation_478", "prediction": "all x.(Transplant(x) -> Important(BloodType(x))", "score": -1}
{"id": "eqasc_validation_478", "prediction": "all x.(Transplant(x) -> ImportantToIncreaseBloodType(x))", "score": 0}
{"id": "eqasc_validation_478", "prediction": "all x.((BloodType(x) & Transplant(x)) -> ImportantFor(x,transplants))", "score": 0}
{"id": "eqasc_validation_478", "prediction": "all x.(ExtraOrganicBloodType(x) -> ImportantForTransplants(x))", "score": 0}
{"id": "eqasc_validation_478", "prediction": "all x.(Tranplant(x) -> ImportantBloodType(x))", "score": 0}
{"id": "eqasc_validation_478", "prediction": "all x y.((Bloodtype(x) & Transplant(y)) -> ImportantFor(x,y))", "score": 0}
{"id": "eqasc_validation_478", "prediction": "all x.((Transplant(x) & ImportantBloodType(x)) -> ImportantForTransplant(x))", "score": 0}
{"id": "eqasc_validation_478", "prediction": "(AllowedForTransplants(bluetype) -> ImportantForTransplants(bluetype,transplantation))", "score": 0}
{"id": "eqasc_validation_479", "prediction": "all x y.((Doctor(x) & Doctor(y)) -> (Consults(x,y) & MedicalAdvice(x)))", "score": 0}
{"id": "eqasc_validation_479", "prediction": "all x.(MentalAdvice(x) -> ConsultDoctor(x))", "score": 0}
{"id": "eqasc_validation_479", "prediction": "all x.((Doctor(x) & Consults(x)) -> MedicalAdvice(x))", "score": 0}
{"id": "eqasc_validation_479", "prediction": "ALL x y z.((MedicalAdvice(x) & Doctor(y) & Consult(y,z)) -> Allowed(z))", "score": -1}
{"id": "eqasc_validation_479", "prediction": "all x.((MedicalAdvice(x) & Doctor(x)) -> Consults(x))", "score": 0}
{"id": "eqasc_validation_479", "prediction": "all x y z.((Doctor(x) & MedicalAdvice(y) & (Doctor(z) | Doctor(z))) -> Consults(x,y,z))", "score": 0}
{"id": "eqasc_validation_479", "prediction": "all x y z.((Doctor(x) & MedicalAdvice(y) & Doctor(z)) -> Consults(x,y))", "score": 0}
{"id": "eqasc_validation_479", "prediction": "all x y z.((Doctor(x) & MedicalAdvice(y) & Doctor(z)) -> Consults(x,y,z))", "score": 0}
{"id": "eqasc_validation_479", "prediction": "all x y.((Doctor(x) & Doctor(y)) -> MedicalAdvice(y))", "score": 0}
{"id": "eqasc_validation_479", "prediction": "all x y.(Doctor(x) & Doctor(y)) -> MedicalAdvice(x,y))", "score": -1}
{"id": "eqasc_validation_479", "prediction": "all x y.((MedicalAdvice(x) & Doctor(y)) -> Consultain(y,x))", "score": 0}
{"id": "eqasc_validation_479", "prediction": "all x.(MedicalAdvice(x) -> ConsultDoctor(x))", "score": 0}
{"id": "eqasc_validation_479", "prediction": "all x.(PrescribesDoctor(x) -> ForMedicalAdvice(x))", "score": 0}
{"id": "eqasc_validation_479", "prediction": "all x y.((Doctor(x) & Doctor(y)) -> Consult(x,y))", "score": 0}
{"id": "eqasc_validation_479", "prediction": "exists x y.(Doctor(x) & DoctorConsultsForMedicalAdvice(x,y))", "score": 0}
{"id": "eqasc_validation_479", "prediction": "all x y.((MedicalAdvice(x) & Doctor(y)) -> Consults(x,y))", "score": 0}
{"id": "eqasc_validation_480", "prediction": "all x y.((Drops(x) & Doctor(y)) -> ImportantToKnow(x,y))", "score": 0}
{"id": "eqasc_validation_480", "prediction": "all x y.((Doctor(x) & Doctor(y)) -> ImportantForBloodType(x,y))", "score": 0}
{"id": "eqasc_validation_480", "prediction": "all x.((BloodType(x) & ImportantForDoctor(x)) -> InformedBy(x,y))", "score": 0}
{"id": "eqasc_validation_480", "prediction": "all x y.((Doctor(x) & Patient(y)) -> KnowingAboutBloodType(x,y))", "score": 0}
{"id": "eqasc_validation_480", "prediction": "all x y.((Pharmacist(x) & Doctor(y)) -> Important(x,y))", "score": 0}
{"id": "eqasc_validation_480", "prediction": "all x.((BloodType(x) & ImportantForDoctor(x)) -> ImportantForDoctor(x))", "score": 0}
{"id": "eqasc_validation_480", "prediction": "all x y.((Doctor(x) & Doctor(y)) -> ImportantFor(x,y))", "score": 0}
{"id": "eqasc_validation_480", "prediction": "all x.((BlueTyp(x) & ImportantForDoctor(x)) -> ImportantForDoctor(x))", "score": 0}
{"id": "eqasc_validation_480", "prediction": "all x y.((Doctor(x) & Doctor(y)) -> Important(x,y))", "score": 0}
{"id": "eqasc_validation_480", "prediction": "all x.((BloodType(x) & ImportantForDoctor(x)) -> Checks(x))", "score": 0}
{"id": "eqasc_validation_480", "prediction": "all x y.((Doctor(x) & Doctor(y)) -> ImportantBloodType(x))", "score": 0}
{"id": "eqasc_validation_480", "prediction": "all x y.((Doctor(x) & Patient(y)) -> Important(y,x))", "score": 0}
{"id": "eqasc_validation_480", "prediction": "all x y.((Doctor(x) & BloodType(y)) -> ImportantFor(x,y))", "score": 0}
{"id": "eqasc_validation_480", "prediction": "all x.((LastDoctor(x) & ImportantFor(x,bloodType)) -> NeededFor(x,Dhector))", "score": 0}
{"id": "eqasc_validation_480", "prediction": "all x y.((Doctor(x) & Doctor(y)) -> ImportantSignificantBloodType(x,y))", "score": 0}
{"id": "eqasc_validation_480", "prediction": "all x.(BloodType(x) -> ImportantForDoctorToKnow(x,x))", "score": 0}
{"id": "eqasc_validation_481", "prediction": "all x.(Scientist(x) -> RelativelyLittleAboutArchaea(x))", "score": 0}
{"id": "eqasc_validation_481", "prediction": "all x.(Scientist(x) -> -KnowsRelativelyLittleAboutArchaea(x))", "score": 0}
{"id": "eqasc_validation_481", "prediction": "all x.(Scientist(x) -> (KnowsLittleAboutArchaea(x) & WellReadyAboutArchaea(x)))", "score": 0}
{"id": "eqasc_validation_481", "prediction": "all x.(Scientist(x) & Archaea(x)) -> -knowsSixtyThanFourThings(x))", "score": -1}
{"id": "eqasc_validation_481", "prediction": "all x.(Scientist(x) -> -> Archaea(y))", "score": -1}
{"id": "eqasc_validation_481", "prediction": "all x y.((Scientist(x) & Archaea(y)) -> KnowingLessOn(x,y))", "score": 0}
{"id": "eqasc_validation_481", "prediction": "all x y.((Scientist(x) & Archaea(y)) -> LittleAbout(x,y))", "score": 0}
{"id": "eqasc_validation_481", "prediction": "all x y.((Scientist(x) & Archaea(y)) -> KnowledgesAbout(x,y))", "score": 0}
{"id": "eqasc_validation_481", "prediction": "all x.(Scientist(x) -> -ClearSky(x))", "score": 0}
{"id": "eqasc_validation_481", "prediction": "all x y.((Scientist(x) & Archaea(y)) -> -KnowsRapidly(x,y))", "score": 0}
{"id": "eqasc_validation_481", "prediction": "all x y.((Scientist(x) & Archaean(y)) -> KnownLittleAbout(x,y))", "score": 0}
{"id": "eqasc_validation_481", "prediction": "all x y.((Scientist(x) & Archaea(y)) -> ProbablyKnowsLittleAbout(x,y))", "score": 0}
{"id": "eqasc_validation_481", "prediction": "(exists x.(Scientist(x) & KnowsLittleAboutArchaea(x)))", "score": 0}
{"id": "eqasc_validation_481", "prediction": "(exists x.(Scientist(x) & -knows(x)))", "score": 0}
{"id": "eqasc_validation_481", "prediction": "all x.(Scientist(x) -> KnowsRelativelyLittleAboutArchaea(x))", "score": 0}
{"id": "eqasc_validation_481", "prediction": "all x.(Scientist(x) -> InformsRelativelyLittleAboutArchaea(x))", "score": 0}
{"id": "eqasc_validation_482", "prediction": "all x.(Scientist(x) -> DoesResearchEveryYear(x))", "score": 0}
{"id": "eqasc_validation_482", "prediction": "all x.((Scientist(x) & Year(x)) -> DoseResearch(x))", "score": 0}
{"id": "eqasc_validation_482", "prediction": "all x.(Scientist(x) -> (DoesResearchEveryYear(x) & Studies(x)))", "score": 0}
{"id": "eqasc_validation_482", "prediction": "(DoesResearch(Scientist) & EveryYear(scientist))", "score": 0}
{"id": "eqasc_validation_482", "prediction": "all x.(Scientist(x) -> DosResearchEveryYear(x))", "score": 0}
{"id": "eqasc_validation_482", "prediction": "all x.(Scientist(x) -> DoseResearchEveryYear(x))", "score": 0}
{"id": "eqasc_validation_482", "prediction": "all x.(Scientist(x) -> DoseResearch(x))", "score": 0}
{"id": "eqasc_validation_482", "prediction": "(DoesResearchEveryAnnual(Scientist) -> DoesResearch(Scientist,Year))", "score": 0}
{"id": "eqasc_validation_482", "prediction": "all x y.((Scientist(x) & Year(y)) -> DoesResearch(x,y))", "score": 0}
{"id": "eqasc_validation_482", "prediction": "all x.(Scientist(x) -> DoesResearch(x))", "score": 0}
{"id": "eqasc_validation_482", "prediction": "all x.(Scientist(x) -> DoResearch(x))", "score": 0}
{"id": "eqasc_validation_482", "prediction": "all x.(Scientist(x) -> DoesResearch(x,Year))", "score": 0}
{"id": "eqasc_validation_483", "prediction": "all x.(DoResearch(x) -> LittleAboutArchaea(x))", "score": 0}
{"id": "eqasc_validation_483", "prediction": "all x.((Person(x) & DoesResearch(x)) -> LittleAboutArchaea(x))", "score": 0}
{"id": "eqasc_validation_483", "prediction": "all x.((Person(x) & ResearchesArchaea(x)) -> -KnowsLittleAboutArchaea(x))", "score": 0}
{"id": "eqasc_validation_483", "prediction": "all x y.((Person(x) & StudiesArchaea(x)) -> -LittleAbout(x,y))", "score": 0}
{"id": "eqasc_validation_483", "prediction": "all x.((Person(x) & DosResearch(x)) -> KnowsLittleAboutArchaea(x))", "score": 0}
{"id": "eqasc_validation_483", "prediction": "all x.((DoesResearch(x) & NotDoingResearch(x)) -> StillKnowsLittleAboutArchaea(x))", "score": 0}
{"id": "eqasc_validation_483", "prediction": "all x.((People(x) & DoResearch(x)) -> ButKnowsRelativelyLittleAboutArchaea(x))", "score": 0}
{"id": "eqasc_validation_483", "prediction": "all x.(DoesResearch(x) -> KnowsLittleAboutArchaea(x))", "score": 0}
{"id": "eqasc_validation_483", "prediction": "all x.((DoesResearch(x) & KnowsRelativelyLittleAboutArchaea(x)) -> (OfArchaea(x) & NoneAboutArchaea(x)))", "score": 0}
{"id": "eqasc_validation_483", "prediction": "all x.((DoResearch(x) & DoArchaea(x)) -> StillKnowsRelativelyLittleAboutArchaea(x))", "score": 0}
{"id": "eqasc_validation_483", "prediction": "all x.((DoesResearch(x) & KnowsRelativelyLittleAboutArchaea(x)) -> NotSeenABtArchaea(x))", "score": 0}
{"id": "eqasc_validation_483", "prediction": "all x.(DoResearch(x) -> LuckilyKnowsSlightlyAboutArchaea(x))", "score": 0}
{"id": "eqasc_validation_483", "prediction": "all x.((DoesResearch(x) & KnowsRelativelyLittleAboutArchaea(x)) -> DoesResearch(x))", "score": 0}
{"id": "eqasc_validation_483", "prediction": "all x.((DoesResearch(x)) -> KnowsRelativelyLittleAboutArchaea(x))", "score": 0}
{"id": "eqasc_validation_483", "prediction": "all x.((DoesResearch(x)) -> We know(x,Archaea))", "score": -1}
{"id": "eqasc_validation_483", "prediction": "all x y z.(((Person(x) & Research(y) & Archaea(z)) -> KnowsLittleAbout(x,z))", "score": -1}
{"id": "eqasc_validation_484", "prediction": "all x.(SkinColor(x) -> PolygenicTreatment(x))", "score": 5}
{"id": "eqasc_validation_484", "prediction": "all x.(SkinColor(x) -> PolygenicTait(x))", "score": 0}
{"id": "eqasc_validation_484", "prediction": "all x.(SkinColor(x) -> PolygenicTrait(x))", "score": 6}
{"id": "eqasc_validation_484", "prediction": "ALL x.(SkinColor(x) -> PolygenicTrait(x))", "score": -1}
{"id": "eqasc_validation_485", "prediction": "exists x.(Tait(x) & Hered(x))", "score": 0}
{"id": "eqasc_validation_485", "prediction": "exists x.(Trait(x) & Heard(x))", "score": 0}
{"id": "eqasc_validation_485", "prediction": "exists x.(Treatment(x) & Erased(x))", "score": 0}
{"id": "eqasc_validation_485", "prediction": "exists x.(Trait(x) & Erased(x))", "score": 0}
{"id": "eqasc_validation_485", "prediction": "exists x.(Trait(x) & Hearned(x))", "score": 0}
{"id": "eqasc_validation_485", "prediction": "exists x.(Tax(x) & Erased(x))", "score": 0}
{"id": "eqasc_validation_485", "prediction": "exists x.(Treatment(x) & Hegemony(x))", "score": 0}
{"id": "eqasc_validation_485", "prediction": "exists x.(Treatment(x) & Heard(x))", "score": 0}
{"id": "eqasc_validation_485", "prediction": "exists x.(Tay(x) & Erased(x))", "score": 0}
{"id": "eqasc_validation_485", "prediction": "exists x.(Trait(x) & Genealogical(x))", "score": 0}
{"id": "eqasc_validation_485", "prediction": "exists x.(Treatment(x) & InHeritage(x))", "score": 0}
{"id": "eqasc_validation_485", "prediction": "exists x.(Tain(x) & HeardEarned(x))", "score": 0}
{"id": "eqasc_validation_486", "prediction": "all x.((SkinColor(x) & Earned(x)) -> SkinColorIninherited(x))", "score": 0}
{"id": "eqasc_validation_486", "prediction": "all x.((SkinColor(x) & Erased(x)) -> SkinColor(x))", "score": 0}
{"id": "eqasc_validation_486", "prediction": "all x y.((SkinColor(x) & SkinColor(y)) -> Iinherited(x,y))", "score": 0}
{"id": "eqasc_validation_486", "prediction": "all x.(Flexible(x) -> inheritsSkinColor(x))", "score": 0}
{"id": "eqasc_validation_486", "prediction": "all x.(SkinColor(x) -> Irinherited(x))", "score": 0}
{"id": "eqasc_validation_486", "prediction": "all x.((SkinColor(x) & inherited(x)) -> HasSkinColor(x,Color,Color,Color,Color,Color))", "score": 0}
{"id": "eqasc_validation_486", "prediction": "(All x.(SkinColor(x) -> Erased(x)))", "score": -1}
{"id": "eqasc_validation_486", "prediction": "all x.(GeoinheritedSkinColor(x) -> SkinColorDaughter(x))", "score": 0}
{"id": "eqasc_validation_486", "prediction": "all x.(SkinColor(x) -> Elected(x))", "score": 0}
{"id": "eqasc_validation_486", "prediction": "all x.(SeedColor(x) -> Irinherited(x))", "score": 0}
{"id": "eqasc_validation_486", "prediction": "all x.((SkinColor(x) & ErathedFromSeed(x)) -> Odorized(x))", "score": 0}
{"id": "eqasc_validation_486", "prediction": "all x.(SkinColor(x) -> HeritableHealed(x))", "score": 0}
{"id": "eqasc_validation_486", "prediction": "all x.(SkinColor(x) -> Sheltered(x))", "score": 0}
{"id": "eqasc_validation_486", "prediction": "all x.((SkinColor(x) & Erased(x)) -> ExtractedBy(x,skin))", "score": 0}
{"id": "eqasc_validation_486", "prediction": "all x.(SkinColor(x) -> ErasedInSterileColor(x))", "score": 0}
{"id": "eqasc_validation_486", "prediction": "All x.(SkinColor(x) -> ErasedBy(x))", "score": -1}
{"id": "eqasc_validation_487", "prediction": "all x.(PolygenicTreatment(x) -> InteractionOfGenes(x))", "score": 4}
{"id": "eqasc_validation_487", "prediction": "all x.(PolygenicTreatment(x) -> resultOfInteractionOfSeveralGenes(x))", "score": 0}
{"id": "eqasc_validation_487", "prediction": "all x.(PolygenicTarget(x) -> InteractionOfGenes(x))", "score": 0}
{"id": "eqasc_validation_487", "prediction": "all x.(PolygenicTraits(x) -> InteractionOfGenes(x))", "score": 0}
{"id": "eqasc_validation_487", "prediction": "all x y.((PolygenicTrait(x) & Gene(y)) -> Interaction(x,y))", "score": 2}
{"id": "eqasc_validation_487", "prediction": "all x.(PolygenicTrait(x) -> InteractionAttributes(x,y))", "score": 0}
{"id": "eqasc_validation_487", "prediction": "all x.(PolygenicTrait(x) -> InteractionOfGenes(x))", "score": 4}
{"id": "eqasc_validation_487", "prediction": "all x.(PolygenicTrait(x) -> exists y.(Gene(y) & Interaction(x,z))))", "score": -1}
{"id": "eqasc_validation_488", "prediction": "all x.(SkinColor(x) -> InteractionOfGenes(x))", "score": 4}
{"id": "eqasc_validation_488", "prediction": "all x y z.((SkinColor(x) & Gene(y) & Gene(z)) -> Interaction(x,y,z))", "score": 0}
{"id": "eqasc_validation_488", "prediction": "(InteractionOfGenes(SkinColor) & InteractionOfGenes(SkinColor))", "score": 0}
{"id": "eqasc_validation_488", "prediction": "all x y.((SkinColor(x) & Gene(y) & InteractionResult(x,y)) -> SkinColor(x))", "score": 0}
{"id": "eqasc_validation_488", "prediction": "all x y.((SkinColor(x) & Gene(y)) -> InteractionResultOf(x,y))", "score": 0}
{"id": "eqasc_validation_488", "prediction": "all x y.((SkinColor(x) & Gene(y)) -> InteractionResult(x,y))", "score": 0}
{"id": "eqasc_validation_488", "prediction": "all x y.((SkinColor(x) & Gene(y)) -> Interaction(x,y))", "score": 2}
{"id": "eqasc_validation_488", "prediction": "all x y z.((SkinColor(x) & Gene(y) & Gene(z)) -> InteractionResult(x,y,z))", "score": 0}
{"id": "eqasc_validation_488", "prediction": "all x.((SkinColor(x) & InteractionOfGenes(x)) -> TheResultOfGenesInInteraction(x))", "score": 0}
{"id": "eqasc_validation_488", "prediction": "all x.(SkinColor(x) -> InteractionOfGenes(x,y))", "score": 0}
{"id": "eqasc_validation_488", "prediction": "all x (SkinColor(x) -> InteractionOfGenes(x))", "score": 4}
{"id": "eqasc_validation_489", "prediction": "all x y.((SkinColor(x) & Gene(y)) -> Controls(x,y))", "score": 0}
{"id": "eqasc_validation_489", "prediction": "all x.(SkinColor(x) -> exists y.(Gene(y) & Controls(x,y)))", "score": 1}
{"id": "eqasc_validation_489", "prediction": "all x.(SkinColor(x) -> (ContainGenes(x) | ControlGenes(x)))", "score": 0}
{"id": "eqasc_validation_489", "prediction": "all x.(SkinColor(x) -> exists y.(Gain(y) & Controls(x,y)))", "score": 0}
{"id": "eqasc_validation_489", "prediction": "all x.(SkinColor(x) -> exists y.(Gene(y) & Controls(x,y))))", "score": -1}
{"id": "eqasc_validation_489", "prediction": "all x.(SkinColor(x) -> ControlledByGenes(x))", "score": 0}
{"id": "eqasc_validation_489", "prediction": "all x.(SkinColor(x) -> (ControledByGenes(x) & ControledByGenes(x)))", "score": 0}
{"id": "eqasc_validation_489", "prediction": "all x.(SkinColor(x) -> (ContainsGene(x,2) | ContainsGene(x,4)))", "score": 0}
{"id": "eqasc_validation_489", "prediction": "all x.(SkinColor(x) -> (Gene(x,2) | Gene(x,3)))", "score": 0}
{"id": "eqasc_validation_489", "prediction": "all x.(SkinColor(x) -> (InvolvesGenes(x,2) | MoreGenes(x,3)))", "score": 0}
{"id": "eqasc_validation_490", "prediction": "all x.((Trait(x) & GovernedByTwoOrMoreSets(x)) -> PolygenicInheritance(x))", "score": 0}
{"id": "eqasc_validation_490", "prediction": "all x.((Trait(x) & RegimedByTwoOrMore(x)) -> PolygenicInheritance(x))", "score": 0}
{"id": "eqasc_validation_490", "prediction": "all x.((Trait(x) & RegulatedByTwoOrMoreSetsOfAlleles(x)) -> PolygenicInheritance(x))", "score": 0}
{"id": "eqasc_validation_490", "prediction": "all x.((Trait(x) & RestrainedByTwoOrMoreSetsOfAlleles(x)) -> PolygenicInheritance(x))", "score": 0}
{"id": "eqasc_validation_490", "prediction": "all x.((Trait(x) & GovesTatmentByKnife(x,Typ2)) -> PolygenicInheritance(x))", "score": 0}
{"id": "eqasc_validation_490", "prediction": "all x.((Trait(x) & IsGovernedByDifferentAlleles(x)) -> PolygenicInheritance(x))", "score": 0}
{"id": "eqasc_validation_490", "prediction": "all x.(PolygenicInheritance(x) -> (GovernedByTrait(x,2) | GovernedByIndividualSets(x,2).))", "score": -1}
{"id": "eqasc_validation_490", "prediction": "all x.(PolygenicInheritance(x) -> (ThreatGovernedByTwoOrMoreSetsOfAlleles(x)))", "score": 0}
{"id": "eqasc_validation_490", "prediction": "all x y.((Trait(x) & AlleleStories(y)) -> PolygenicInheritance(x))", "score": 0}
{"id": "eqasc_validation_490", "prediction": "all x y z.((Trait(x) & Allele(y) & Allele(z) & Governance(x,y)) -> PolygenicTolerance(x,y,z))", "score": 0}
{"id": "eqasc_validation_490", "prediction": "all x y.((Trait(x) & Allele(y) & SetOfAllele(y,x)) -> PolygenicImmersion(x))", "score": 0}
{"id": "eqasc_validation_490", "prediction": "all x.((Trait(x) & HasTrait(x,2)) -> HasTolerance(x,3,2))", "score": 0}
{"id": "eqasc_validation_490", "prediction": "all x.((Trait(x) & GeneratesTreatments(x,y) & HasTreatments(x,z) & HasTreatments(x,a)) -> PolygenicInheritance(y))", "score": 0}
{"id": "eqasc_validation_490", "prediction": "all x.(PositiveInheritance(x) -> (TraitGovernedByForestAlleles(x) & ForestAllelesGovernsPositiveInheritance(x)))", "score": 0}
{"id": "eqasc_validation_490", "prediction": "all x.((Trait(x) & GovernedByExact(x,y) & Number(x,y)) -> PolygenicInheritance(x))", "score": 0}
{"id": "eqasc_validation_490", "prediction": "all x.(PolygenicInheritance(x) -> exists y.(Trait(y) & RegulatedBy(y,2))))", "score": -1}
{"id": "eqasc_validation_491", "prediction": "all x.(SkinColor(x) -> exists y.(SetOfAlleles(y) & (exists z.(SkinColor(z) & GoesByAlele(x,z))) | exists w.(SetOfAlleles(w) & GoesBy(x,w)))))", "score": -1}
{"id": "eqasc_validation_491", "prediction": "all x.(SkinColor(x) -> exists y.(Set(y) & Allele(z) & Override(x,y,z)))", "score": 0}
{"id": "eqasc_validation_491", "prediction": "all x.(SkinColor(x) -> exists y.(Allele(y) & Governs(x,y)))", "score": 0}
{"id": "eqasc_validation_491", "prediction": "all x y z.((SkinColor(x) & Allele(y) & Elefant(z)) -> (GovernedBy(x,y,z) & GovernedBy(x,y,z)))", "score": 0}
{"id": "eqasc_validation_491", "prediction": "all x.(SkinColor(x) -> exists y.(Allele(y) & Allele(y) & Regime(x,y)))", "score": 0}
{"id": "eqasc_validation_491", "prediction": "all x.(SkinColor(x) => exists y.(Set(y) & Allele(y) & RegulatedBy(x,y,z) & Variation(z) & Variation(x,z))))", "score": -1}
{"id": "eqasc_validation_491", "prediction": "all x y.((SkinColor(x) & Allele(y)) -> (GovernedBy(x,y) & GovernedBy(x,y)))", "score": 0}
{"id": "eqasc_validation_491", "prediction": "all x y.((SkinColor(x) & Allele(y)) -> (GovernsBy(x,y) & OverrideBy(x,y)))", "score": 0}
{"id": "eqasc_validation_491", "prediction": "all x y.((SkinColor(x) & Allele(y)) -> (GovernedBy(x,y) & HasAllele(x,y)))", "score": 0}
{"id": "eqasc_validation_491", "prediction": "all x.((SkinColor(x) & (exists y.(SkinAlleleSet(y) | AlleleSet(y)))) -> Regulates(x,y))", "score": 0}
{"id": "eqasc_validation_491", "prediction": "all x.(SkinColor(x) -> (GovesByAllele(x,2) | GovesByAllele(x,3)))", "score": 0}
{"id": "eqasc_validation_491", "prediction": "all x y.((SkinColor(x) & Allele(y)) -> (GovernedBy(x,y) & OneOrMoreSet(x,y)))", "score": 0}
{"id": "eqasc_validation_491", "prediction": "all x.(SkinColor(x) -> exists y.(Allele(y) & (exists z.(Skin(z) & GovernedBy(x,z)) + exists w.(Allele(w,v)))))", "score": -1}
{"id": "eqasc_validation_491", "prediction": "all x y z w.((SkinColor(x) & Allele(y) & Allele(z) & Allele(w)) -> (Region(x,y,z) & (SetsOfAlleles(y,w) | SetOfAlleles(x,y))))", "score": 0}
{"id": "eqasc_validation_491", "prediction": "all x y.((SkinColor(x) & Allele(y)) -> (GovernedBy(x,y) & GoesBy(x,i)))", "score": 0}
{"id": "eqasc_validation_491", "prediction": "all x y.((SkinColor(x) & Allele(y) & Controls(x,y)) -> (GovernedBy(x,y) & Controls(x,y)))", "score": 0}
{"id": "eqasc_validation_492", "prediction": "all x y.((SkinColour(x) & Gene(y)) -> EinheritedFrom(x,y))", "score": 0}
{"id": "eqasc_validation_492", "prediction": "all x.(SkinColor(x) -> ErasedFromGenes(x))", "score": 0}
{"id": "eqasc_validation_492", "prediction": "all x y.((SkinColor(x) & Gene(y)) -> HealedFrom(x,y))", "score": 0}
{"id": "eqasc_validation_492", "prediction": "all x y.((SkinColor(x) & Gene(y)) -> ErasedFrom(x,y))", "score": 0}
{"id": "eqasc_validation_492", "prediction": "all x y z.((Skin(x) & Gene(y) & Gene(z)) -> AlleviatesSkinColor(x,y,z))", "score": 0}
{"id": "eqasc_validation_492", "prediction": "all x y.((SkinColor(x) & Gene(y)) -> IrreceivedFrom(x,y))", "score": 0}
{"id": "eqasc_validation_492", "prediction": "all x.(SkinColor(x) -> InheritsGenes(x))", "score": 0}
{"id": "eqasc_validation_492", "prediction": "all x y z.((SkinColor(x) & Gene(y) & Gene(z)) -> ErasedFrom(x,y,z))", "score": 0}
{"id": "eqasc_validation_492", "prediction": "all x y.((SkinColor(x) & Gene(y)) -> AllegedFrom(x,y))", "score": 0}
{"id": "eqasc_validation_492", "prediction": "ALL x y.((SkinColor(x) & Gene(y)) -> Hearer(x,y))", "score": -1}
{"id": "eqasc_validation_492", "prediction": "all x.(SkinColor(x) -> (ErasedFromGenes(x)))", "score": 0}
{"id": "eqasc_validation_492", "prediction": "all x.(SkinColor(x) -> AbortedFromGenes(x))", "score": 0}
{"id": "eqasc_validation_492", "prediction": "all x.(SkinColor(x) -> HeardFromGenes(x))", "score": 0}
{"id": "eqasc_validation_492", "prediction": "all x.(SkinColour(x) -> ErasedFromGenes(x))", "score": 0}
{"id": "eqasc_validation_492", "prediction": "all x y.((SkinColor(x) & Gene(y)) -> Iinherited(x,y))", "score": 0}
{"id": "eqasc_validation_493", "prediction": "all x.(Melanin(x) -> ResponsibleForSkinColor(x))", "score": 0}
{"id": "eqasc_validation_493", "prediction": "all x.(Melanin(x) -> SkinColor(x))", "score": 0}
{"id": "eqasc_validation_493", "prediction": "all x.(Melanin(x) -> SkinColor(y))", "score": 0}
{"id": "eqasc_validation_493", "prediction": "all x y.((Melanin(x) & SkinColor(y)) -> ResponsibleFor(x,y))", "score": 0}
{"id": "eqasc_validation_493", "prediction": "all x.(Melanin(x) -> ResponsibleFor(x,SkinColor))", "score": 0}
{"id": "eqasc_validation_494", "prediction": "all x.(SkinColor(x) -> (Grey(x) | Brown(x)))", "score": 0}
{"id": "eqasc_validation_494", "prediction": "all x y.((SkinColor(x) & Grey(y)) -> Brown(y))", "score": 0}
{"id": "eqasc_validation_494", "prediction": "all x y.((SkinColor(x) & (Gray(y) | Brown(y))) -> Variable(x,y))", "score": 0}
{"id": "eqasc_validation_494", "prediction": "all x.(SkinColor(x) -> (GreyToBrown(x)))", "score": 0}
{"id": "eqasc_validation_494", "prediction": "(SkinColor(skin) & (FromGrey(skin,grey) ToBrown(skin)))", "score": -1}
{"id": "eqasc_validation_494", "prediction": "all x.(SkinColor(x) -> (Reference(x,y) & GreyColor(y)) & VarianceOfColor(x,z) & BrownColor(z)))", "score": -1}
{"id": "eqasc_validation_494", "prediction": "all x.(SkinColor(x) -> (VariesFromGrayToBrown(x)))", "score": 0}
{"id": "eqasc_validation_494", "prediction": "exists x.(SkinColor(x) & Grey(x) & Brown(x))", "score": 0}
{"id": "eqasc_validation_494", "prediction": "all x.(SkinColor(x) -> (FromGreenColor(x) & FromBrownColor(x)))", "score": 0}
{"id": "eqasc_validation_494", "prediction": "all x.(SkinCover(x) -> (DispersFromGray(x) & DistinctFromBronze(x)))", "score": 0}
{"id": "eqasc_validation_494", "prediction": "all x.(SkinColor(x) -> (Grint(x) | Brown(x)))", "score": 0}
{"id": "eqasc_validation_494", "prediction": "all x.(SkinColor(x) -> (Gray(x) | Brown(x)))", "score": 0}
{"id": "eqasc_validation_495", "prediction": "all x.((White(x) | Brown(x)) -> PolygenicTrait(x))", "score": 0}
{"id": "eqasc_validation_495", "prediction": "all x.(White(x) | Brown(x)) -> PolygenicTrait(x))", "score": -1}
{"id": "eqasc_validation_495", "prediction": "all x.((White(x) | Brown(x)) -> PolygenicTait(x))", "score": 0}
{"id": "eqasc_validation_495", "prediction": "all x y z.((White(x) | Brown(x)) -> PolygenicTrait(y))", "score": 0}
{"id": "eqasc_validation_495", "prediction": "all x.((White(x) | Brown(x)) -> ComesFromPolygenicTrait(x))", "score": 0}
{"id": "eqasc_validation_495", "prediction": "all x.((White(x) | Brown(x)) -> PolygenicTraitWhatever(x))", "score": 0}
{"id": "eqasc_validation_496", "prediction": "all x y z.((Chapter(x) & PolygenicInheritance(y) & Intelligence(z)) -> Discuses(x,y))", "score": 0}
{"id": "eqasc_validation_496", "prediction": "Chapter 5 discusses PolygenicInheritanceAndIntelligence(x)", "score": -1}
{"id": "eqasc_validation_496", "prediction": "all x y.((Chapter5(x) & PolygenicInheritance(y) & Intelligence(z)) -> Discuses(x,y))", "score": 0}
{"id": "eqasc_validation_496", "prediction": "all x.(Chapter5(x) -> (PolygenicInheritance(x) & Intelligence(x)))", "score": 0}
{"id": "eqasc_validation_496", "prediction": "all x.(Discusses(x,y) -> (PolygenicInheritance(y) & Intelligence(y)))", "score": 0}
{"id": "eqasc_validation_496", "prediction": "(Discusses(Chapter5): PolygenicInheritance(Chapter4), Intelligence(Chapter3))", "score": -1}
{"id": "eqasc_validation_496", "prediction": "all x.(Chapter5(x) -> (DiscussesPolygenicHeritage(x) & DisputesIntelligence(x)))", "score": 0}
{"id": "eqasc_validation_496", "prediction": "(Discourse(Chapter5) -> (PolygenicInheritance(Chapter5) & Intelligence(Chapter5)))", "score": 0}
{"id": "eqasc_validation_496", "prediction": "all x.(Chapter5(x) -> (DisputesPolygenicInheritance(x) & DiscoursesIntelligence(x)))", "score": 0}
{"id": "eqasc_validation_496", "prediction": "all x.(Chapter5(x) -> (DiscussesPolygenicInheritance(x) & DiscussesIntelligence(x)))", "score": 0}
{"id": "eqasc_validation_496", "prediction": "all x y z.((Chapter5(x) & Inheritance(y) & Intelligence(z)) -> (Exposes(x,y) & Polygenic(y)))", "score": 0}
{"id": "eqasc_validation_496", "prediction": "in chapter 5, we discusss polygenic inheritance and intelligence.", "score": -1}
{"id": "eqasc_validation_496", "prediction": "all x y.((Chapter5(x) & PolygenicInheritance(y,x) & Intelligence(x)) -> Discuses(x,y))", "score": 0}
{"id": "eqasc_validation_497", "prediction": "all x.(Intelligence(x) -> (HadgedTrait(x) | (HasTrait(x) & HasTrait(x)))))", "score": -1}
{"id": "eqasc_validation_497", "prediction": "all x.(Intelligence(x) -> (InheritanceTrait(x) | RequirementsTrait(x)))", "score": 0}
{"id": "eqasc_validation_497", "prediction": "all x.(IntelligenceTrait(x) -> SheddenTat trait(x))", "score": -1}
{"id": "eqasc_validation_497", "prediction": "all x.(Intelligence(x) -> (ErasedTrait(x) & HasTrait(x) & ReleavedTrait(x)))", "score": 0}
{"id": "eqasc_validation_497", "prediction": "all x.(Intelligence(x) -> (EarnedTrait(x) & HasTrait(x)))", "score": 0}
{"id": "eqasc_validation_497", "prediction": "all x.(Intelligence(x) -> EmblemTait(x))", "score": 0}
{"id": "eqasc_validation_497", "prediction": "all x y z.((Intelligence(x) & Trait(y) & Genealogical(z) & LivesIn(x,y)) -> inherited(x,z))", "score": 0}
{"id": "eqasc_validation_497", "prediction": "all x.(Intelligence(x) & HeardTrait(x))", "score": 0}
{"id": "eqasc_validation_497", "prediction": "all x.(Intelligence(x) -> (EminheritedTrait(x) | GenealogicalTrait(x)))", "score": 0}
{"id": "eqasc_validation_497", "prediction": "all x.(Intelligence(x) -> (ErasedTrait(x) & MorphologicalTrait(x)))", "score": 0}
{"id": "eqasc_validation_497", "prediction": "all x.(Intelligence(x) -> (EarnedTrait(x) & Enough(x)))", "score": 0}
{"id": "eqasc_validation_497", "prediction": "all x.(Intelligence(x) -> (HasTait(x) & LedgerTait(x)...))", "score": -1}
{"id": "eqasc_validation_497", "prediction": "all x.(Intelligence(x) -> AchievedTrait(x))", "score": 0}
{"id": "eqasc_validation_497", "prediction": "all x.(Intelligence(x) -> ErasedTrait(x))", "score": 0}
{"id": "eqasc_validation_497", "prediction": "all x.(Intelligence(x) -> (HereditableTrait(x) & HasTrait(x)))", "score": 0}
{"id": "eqasc_validation_497", "prediction": "all x.(Intelligence(x) -> (HasTrait(x) | RemainsHad(x)))", "score": 0}
{"id": "eqasc_validation_498", "prediction": "all x.((MelaninPigmentAmountInSkin(x) & PolygenicTreatment(x)) -> PolygenicTrait(x))", "score": 0}
{"id": "eqasc_validation_498", "prediction": "all x.((MelaninPigment(x) & Skin(x)) -> PolygenicTrait(x))", "score": 0}
{"id": "eqasc_validation_498", "prediction": "all x.((MelaninPigmentInSkin(x) & PolygenicTrait(x)) -> PorousInTrait(x))", "score": 0}
{"id": "eqasc_validation_498", "prediction": "all x.((MelaninPigment(x) & PorousTrait(x)) -> PolygenicTrait(x))", "score": 0}
{"id": "eqasc_validation_498", "prediction": "all x.(Skin(x) -> PolygenicTrait(x))", "score": 0}
{"id": "eqasc_validation_498", "prediction": "all x y.((MelaninPigmentInSkin(x) & PolygenicTrait(y)) -> PolygenicTrait(y))", "score": 0}
{"id": "eqasc_validation_498", "prediction": "all x.((AmountOfMelaninPigmentInSkin(x) & PolygenicTrait(x)) -> PolygenicTrait(x))", "score": 0}
{"id": "eqasc_validation_498", "prediction": "all x.(MelaninPigmentAndTrait(x) -> PolygenicTrait(x))", "score": 0}
{"id": "eqasc_validation_498", "prediction": "all x.((MelaninPigmentArticle(x) & InSkin(x)) -> PolygenicTrait(x))", "score": 0}
{"id": "eqasc_validation_498", "prediction": "all x.((MelaninPigmentInSkin(x) & PolygenicTrait(x)) -> exists y.(MelaninPigmentInSkin(y) & PolygenicTrait(x)))", "score": 0}
{"id": "eqasc_validation_498", "prediction": "all x y.((MelaninPigment(x) & Skin(y)) -> PolygenicTrain(x,y))", "score": 0}
{"id": "eqasc_validation_498", "prediction": "all x y.((MelaninPigment(x) & Skin(y) & PolygenicTreatment(x,y)) -> IsInSkin(x,y))", "score": 0}
{"id": "eqasc_validation_498", "prediction": "all x.((MelaninPigmentInFace(x) & InSkin(x)) -> PolygenicTrait(x))", "score": 0}
{"id": "eqasc_validation_498", "prediction": "all x.((MelaninGlimmerInSkin(x) & PolygenicTrait(x)) -> PolygenicTrait(x))", "score": 0}
{"id": "eqasc_validation_498", "prediction": "all x.((MelaninPigmentInSkin(x) & PolygenicTrait(x)) -> EnoughProtein(x))", "score": 0}
{"id": "eqasc_validation_499", "prediction": "all x.(Pregnancy(x) -> (CarriesOffspringBetweenFertilizationToBirth(x)))", "score": 0}
{"id": "eqasc_validation_499", "prediction": "all x y.((Pregnancy(x) & Offspring(y)) -> CarryingFromFertilizationToBirth(x,y))", "score": 0}
{"id": "eqasc_validation_499", "prediction": "all x.(Pregnancy(x) -> CarryingOffspring(x))", "score": 0}
{"id": "eqasc_validation_499", "prediction": "all x.(Pregnancy(x) -> (CarriesOffspring(x) & FertilizationUntilBirth(x)))", "score": 0}
{"id": "eqasc_validation_499", "prediction": "all x y.((Pregnancy(x) & Offspring(y)) -> CarryingFromFertilization(x,y))", "score": 0}
{"id": "eqasc_validation_499", "prediction": "all x y.((Pregnancy(x) & Offspring(y) & Fertilization(y,x)) -> Carrying(x,y,x))", "score": 0}
{"id": "eqasc_validation_499", "prediction": "all x.(Pregnancy(x) -> (CarriesOffspring(x) & FromFertilizationToBirth(x)))", "score": 0}
{"id": "eqasc_validation_499", "prediction": "all x.(Pregnancy(x) -> (CarriesOffspringFromFertilization(x) & ToBirth(x)))", "score": 0}
{"id": "eqasc_validation_499", "prediction": "all x.(Pregnancy(x) -> (CarriesOffspring(x) & Fertilization(x) & Birth(x)))", "score": 0}
{"id": "eqasc_validation_499", "prediction": "all x.(Pregnancy(x) -> (CarriesOffspringFromFertilization(x) & BelongsToBirth(x)))", "score": 0}
{"id": "eqasc_validation_499", "prediction": "all x y.((Pregnancy(x) & OffspringFromFertilisation(y)) -> CarryingUntilBirth(x,y))", "score": 0}
{"id": "eqasc_validation_499", "prediction": "all x.((Offspring(x) & CarryingFromFertilization(x)) -> Born(x))", "score": 0}
{"id": "eqasc_validation_499", "prediction": "all x.(Pregnancy(x) -> (CarriesOffspring(x) & FertilizesUntilBirth(x)))", "score": 0}
{"id": "eqasc_validation_499", "prediction": "all x y z.((Pregnancy(x) & Offspring(y) & Fertilization(z)) -> CarryingUntilBirth(x,y,z))", "score": 0}
{"id": "eqasc_validation_499", "prediction": "all x.(Pregnancy(x) -> CarriesOffspring(x,fertilization))", "score": 0}
{"id": "eqasc_validation_499", "prediction": "all x.(Pregnancy(x) -> CarryingOffspring(x,fetration,birth))", "score": 0}
{"id": "eqasc_validation_500", "prediction": "all x.(Pregnancy(x) -> FertilizedEgg(x))", "score": 0}
{"id": "eqasc_validation_500", "prediction": "all x.((Pregnancy(x) & FertilizedEgg(x)) -> StartsWith(x,Egg,Valid))", "score": 0}
{"id": "eqasc_validation_500", "prediction": "all x.(Pregnancy(x) -> FertileEgg(x))", "score": 0}
{"id": "eqasc_validation_500", "prediction": "all x y.((Pregnancy(x) & FertilizedEgg(y)) -> Expectation(x))", "score": 0}
{"id": "eqasc_validation_500", "prediction": "all x y.((Pregnancy(x) & FertileEgg(y)) -> StartsWith(x,y))", "score": 0}
{"id": "eqasc_validation_500", "prediction": "all x.(Pregnancy(x) -> StartsWithFertilizedEgg(x))", "score": 0}
{"id": "eqasc_validation_500", "prediction": "all x.(Paternity(x) -> (TurnsWithFertilizedEgg(x)))", "score": 0}
{"id": "eqasc_validation_501", "prediction": "all x y.((FertileEgg(x) & CarriedByBirth(x)) -> CanCreateOffspring(x,y))", "score": 0}
{"id": "eqasc_validation_501", "prediction": "all x.(FertilizedEgg(x) -> WillCreateOffspring(x))", "score": 0}
{"id": "eqasc_validation_501", "prediction": "all x.((FertilizedEgg(x) & CarriedUntilBirth(x)) -> CanCreateOffspring(x))", "score": 0}
{"id": "eqasc_validation_501", "prediction": "all x.((Egg(x) & Fertile(x) & CarriedUntilBirth(x)) -> CreatesOffspring(x))", "score": 0}
{"id": "eqasc_validation_501", "prediction": "all x y.((FertilizedEgg(x) & Offspring(x) & CarriedUntilBirth(x)) -> CanCreate(x,y))", "score": 0}
{"id": "eqasc_validation_501", "prediction": "all x y z.((FertileEgg(x) & Offspring(y) & CarriedUntilBirth(z) & FertileEgg(x)) -> ProvidesOffspring(x,y))", "score": 0}
{"id": "eqasc_validation_501", "prediction": "all x y.((FertilizedEgg(x) & CarriedUntilBirth(y)) -> CanCreateOffspring(x,y))", "score": 0}
{"id": "eqasc_validation_501", "prediction": "all x y.((FertileEgg(x) & CarriedUntilBirth(x)) -> CanCreateOffspring(x,y))", "score": 0}
{"id": "eqasc_validation_501", "prediction": "all x.((FertileEgg(x) & CarriedUntilBirth(x)) -> CanCreateOffspring(x))", "score": 0}
{"id": "eqasc_validation_501", "prediction": "all x y.((FertilizedEgg(x) & CarriedUntilBirth(x) & CanCreateOffspring(x,y)) -> CanCreateOffspring(x))", "score": 0}
{"id": "eqasc_validation_501", "prediction": "all x.((FertilizedEgg(x) & CarriedUntilBirth(x) & CanCreateOffspring(x)) -> CanCreateOffspring(x))", "score": 0}
{"id": "eqasc_validation_501", "prediction": "all x.(CanCreateOffspring(x) -> FertilizedEgg(x))", "score": 0}
{"id": "eqasc_validation_501", "prediction": "all x y.((FertilizedEgg(x) & CarryingUntilBirth(y) & CarriedToBirth(x,y)) -> CanCreateOffspring(x))", "score": 0}
{"id": "eqasc_validation_502", "prediction": "all x.(Birth(x) -> MainComponentOfPopulationGrowth(x))", "score": 0}
{"id": "eqasc_validation_502", "prediction": "all x.(Birth(x) -> MainCOMponentOfPopulationGrowth(x))", "score": 0}
{"id": "eqasc_validation_502", "prediction": "all x.(Birth(x) -> MainCommitmentOfPopulationGrowth(x))", "score": 0}
{"id": "eqasc_validation_502", "prediction": "all x.(Birth(x) -> PopulationGrowthComponent(x))", "score": 0}
{"id": "eqasc_validation_502", "prediction": "all x.(Birth(x) -> MainCommponentOfPopulationGrowth(x))", "score": 0}
{"id": "eqasc_validation_502", "prediction": "all x y.((Birth(x) & Population(y)) -> MainComponentOfGrowth(x,y))", "score": 0}
{"id": "eqasc_validation_502", "prediction": "all x.(Birth(x) -> MainComponentOfPopulation(x))", "score": 0}
{"id": "eqasc_validation_502", "prediction": "(MainComponent(Births) -> PopulationGrowth(Births))", "score": 0}
{"id": "eqasc_validation_502", "prediction": "all x.(Birth(x) -> MainCameraOfPopulation(x))", "score": 0}
{"id": "eqasc_validation_503", "prediction": "all x.(PregnancyLeadsToPopulationGrowth(x) -> PopulationGrowth(x))", "score": 0}
{"id": "eqasc_validation_503", "prediction": "all x y z.((Pregnancy(x) & Population(y) & Population(z)) -> LeadsToGrowth(x,y,z))", "score": 0}
{"id": "eqasc_validation_503", "prediction": "all x y z.((Pregnancy(x) & Population(y) & Pregnancy(z) & Pregnancy(x,y) & Population(z)) -> LeadsToGrowth(x,y,z))", "score": 0}
{"id": "eqasc_validation_503", "prediction": "all x.((Pregnancy(x) & PopulationGrowth(x)) -> LeadsTo(x, population))", "score": 0}
{"id": "eqasc_validation_503", "prediction": "all x.((Pregnancy(x) & LeadsToPopulationGrowth(x)) -> PopulationGrowth(x))", "score": 0}
{"id": "eqasc_validation_503", "prediction": "all x y z.((Pregnancy(x) & Population(y) & Population(z)) -> LeadsTo(x,y,z))", "score": 0}
{"id": "eqasc_validation_503", "prediction": "all x.((Pregnancy(x) & PopulationGrowth(x)) -> LeadsTo(x,Pregnancy))", "score": 0}
{"id": "eqasc_validation_503", "prediction": "all x y.((Pregnancy(x) & PopulationGrowth(y)) -> LeadingTo(x,y))", "score": 0}
{"id": "eqasc_validation_503", "prediction": "all x y.((Pregnancy(x) & Population(y)) -> LeadsToGrowth(x,y))", "score": 0}
{"id": "eqasc_validation_504", "prediction": "all x.(Mother(x) -> (ChoosesSex(x) & LeadsToPregnancies(x)))", "score": 0}
{"id": "eqasc_validation_504", "prediction": "all x.(Mother(x) -> exists y.(Sex(y) & Choses(x,y)) & LeadsToPregnancy(x)))", "score": -1}
{"id": "eqasc_validation_504", "prediction": "all x y z.((Mother(x) & Sex(y) & Pregnancy(z)) -> (OwnsSex(x,y) & LendsTo(x,z)))", "score": 0}
{"id": "eqasc_validation_504", "prediction": "all x.(Mother(x) -> (ElectsSex(x) & LeadsToPregnancy(x)))", "score": 0}
{"id": "eqasc_validation_504", "prediction": "all x.(Mother(x) -> (PlansSex(x) & LeadsToPregnancy(x)))", "score": 0}
{"id": "eqasc_validation_504", "prediction": "all x.((Mother(x) & HasSex(x)) -> Pregnancy(x))", "score": 0}
{"id": "eqasc_validation_504", "prediction": "all x.(Mother(x) -> (ElipsShex(x) & LeadsToPregnancy(x)))", "score": 0}
{"id": "eqasc_validation_504", "prediction": "all x.(Mother(x) -> ((UsesSex(x) & LeadsToPregnancy(x))))", "score": 0}
{"id": "eqasc_validation_504", "prediction": "all x y.((Mother(x) & sex(y)) -> (HasSex(x,y) & LeadsToPregnancy(x,y)))", "score": 0}
{"id": "eqasc_validation_504", "prediction": "all x.(Mother(x) -> (QuaseSex(x) & LeadsToPregnancy(x)))", "score": 0}
{"id": "eqasc_validation_504", "prediction": "all x.(Mother(x) -> (Quick(x) & HasSex(x) & LeadToPregnancy(x)))", "score": 0}
{"id": "eqasc_validation_504", "prediction": "all x y.((Mother(x) & Sex(y)) -> (Causes(x,y) & LeadsTo(x,Kids)))", "score": 0}
{"id": "eqasc_validation_504", "prediction": "all x y.((Mother(x) & Sex(y)) -> (Has(x,y) & LeadsToPregnancy(y)))", "score": 0}
{"id": "eqasc_validation_504", "prediction": "all x y.((Mother(x) & Sex(y)) -> Choses(x,y))", "score": 0}
{"id": "eqasc_validation_504", "prediction": "exists x.(Mother(x) & Pregnancy(x))", "score": 0}
{"id": "eqasc_validation_504", "prediction": "all x y.((Mother(x) & Species(y)) -> (Prefers(x,y) & LeadsToPregnancy(x,y)))", "score": 0}
{"id": "eqasc_validation_505", "prediction": "all x y z.((Mother(x) & Offspring(y) & Fertilization(z) & CarryFrom(x,y,z)) -> CarryingFrom(x,y,z))", "score": 0}
{"id": "eqasc_validation_505", "prediction": "all x.(Mother(x) -> (CarriesOffspring(x) & FertilizesUntilBirth(x)))", "score": 0}
{"id": "eqasc_validation_505", "prediction": "all x y z.((Mother(x) & Offspring(y) & Fertilization(z) & Fertilization(z)) -> Carries(x,y,z))", "score": 0}
{"id": "eqasc_validation_505", "prediction": "all x y z.((Mother(x) & Offspring(y) & Fertilization(z) & Born(y)) -> CarriesFrom(x,y,z))", "score": 0}
{"id": "eqasc_validation_505", "prediction": "all x y.((Mother(x) & Offspring(a) & Fertilization(b)) -> CarrysFromBirth(x,a))", "score": 0}
{"id": "eqasc_validation_505", "prediction": "all x y.((Mother(x) & Offspring(y) & Fertilization(y)) -> CarryAtBirth(x,y))", "score": 0}
{"id": "eqasc_validation_505", "prediction": "all x y z.((Mother(x) & Offspring(y) & Fertilization(z) & Baby(x)) -> Carries(x,y,z))", "score": 0}
{"id": "eqasc_validation_505", "prediction": "all x y z.((Mother(x) & Offspring(y) & Fertilization(z) & Born(z)) -> CarriesFrom(x,y,z))", "score": 0}
{"id": "eqasc_validation_505", "prediction": "all x y z w.((Mother(x) & Offspring(y) & Fertilization(z) & Birth(w)) -> CarryFromFertilization(x,y,w))", "score": 0}
{"id": "eqasc_validation_505", "prediction": "all x y z.((Mother(x) & Offspring(y) & Fertilization(z)) -> CarriesFromToBirth(x,y,z))", "score": 0}
{"id": "eqasc_validation_505", "prediction": "all x y z.((Mother(x) & Offspring(y) & Fertilization(z) & Born(y)) -> CarriesFromTo(x,y,z))", "score": 0}
{"id": "eqasc_validation_505", "prediction": "all x y z.((Mother(x) & Offspring(y) & Fertilization(z) & Born(y)) -> (CarriesFrom(x,y,z)))", "score": 0}
{"id": "eqasc_validation_505", "prediction": "all x y z.((Mother(x) & Offspring(y) & Fertilization(z) & Offspring(w)) -> CarriesFrom(x,y,z,w))", "score": 0}
{"id": "eqasc_validation_505", "prediction": "all x y.((Mother(x) & Offspring(y) & Fertilization(x) & Birth(x)) -> CarriesFromFlowerationToBirth(x,y))", "score": 0}
{"id": "eqasc_validation_505", "prediction": "all x y.((Mother(x) & Offspring(y) & Fertilation(y) & Birth(y)) -> CarryFromToBirth(x,y))", "score": 0}
{"id": "eqasc_validation_505", "prediction": "all x y z w.((Mother(x) & Offspring(y) & Fungilation(z) & Birth(w)) -> CarryFromTo(x,y,z,w))", "score": 0}
{"id": "eqasc_validation_506", "prediction": "(HumanEmbryonicDevelopment (HumanFertilization(Human) & FollowsDestination(Human)) -> FollowsHarmony(Human))", "score": -1}
{"id": "eqasc_validation_506", "prediction": "all x y z.((HumanEmbryonicDevelopment(x) & Fertilization(y) & Birth(z)) -> FollowsDevelopmentFromToTo(x,y,z))", "score": 0}
{"id": "eqasc_validation_506", "prediction": "all x.(HumanEmbryonicDevelopment(x) -> FollowsFertilizationThroughBirth(x))", "score": 0}
{"id": "eqasc_validation_506", "prediction": "all x.(HumanEmbryonicDevelopment(x) -> (Fertilization(x) | Birth(x)))", "score": 0}
{"id": "eqasc_validation_506", "prediction": "all x.(HumanEmbryonicDevelopment(x) -> FollowsHumanDevelopmentFromFertilizationThroughBirth(x))", "score": 0}
{"id": "eqasc_validation_506", "prediction": "all x.(HumanEmbryonicDevelopment(x) -> FollowsHumanDevelopmentFromFertilizationToBirth(x))", "score": 0}
{"id": "eqasc_validation_506", "prediction": "all x y.((HumanEmbryonicDevelopment(x) & Fertilization(y) & Birth(y)) -> FollowsDevelopmentFromFertilizationToBirth(x,y))", "score": 0}
{"id": "eqasc_validation_506", "prediction": "all x.(HumanEmbryonicDevelopment(x) -> (Fertilization(x) & Birth(x) & FollowsDevelopment(x)))", "score": 0}
{"id": "eqasc_validation_506", "prediction": "all x y.((HumanEmbryonicDevelopment(x) & FetalFertilization(y) & Birth(y)) -> Follows(x,y))", "score": 0}
{"id": "eqasc_validation_506", "prediction": "all x.(HumanEmbryonicDevelopment(x) -> FollowsHumanDevelopment(x))", "score": 0}
{"id": "eqasc_validation_506", "prediction": "all x y z.((HumanEmbryonicDevelopment(x) & Fertilization(y) & Birth(z)) -> FollowsHumanEntryonicDevelopment(x,y,z))", "score": 0}
{"id": "eqasc_validation_506", "prediction": "all x.(HumanEmbryonicDevelopment(x) -> (FertilizationBirth(x) & FollowsDevelopment(x)))", "score": 0}
{"id": "eqasc_validation_506", "prediction": "all x y.((HumanEmbryonicDevelopment(x) & Fertilization(y) & Birth(y)) -> FollowsFrom(x,y))", "score": 0}
{"id": "eqasc_validation_506", "prediction": "All x.(HumanEmbryonicDevelopment(x) -> FollowsEntry(x,Fertilization,Birth))", "score": -1}
{"id": "eqasc_validation_506", "prediction": "All x.(HumanEmbryonicDevelopment(x) -> FollowsHumanDevelopment(x))", "score": -1}
{"id": "eqasc_validation_506", "prediction": "all x y.((HumanEmbryonicDevelopment(x) & Human(y)) -> FollowsDevelopmentFromFertilizationToBirth(x,y))", "score": 0}
{"id": "eqasc_validation_507", "prediction": "all x.(Pregnancy(x) -> EmbryonicDevelopment(x))", "score": 0}
{"id": "eqasc_validation_507", "prediction": "all x.(Pregnancy(x) -> (EmbryonalDevelopment(x) & Pregnancy(x)))", "score": 0}
{"id": "eqasc_validation_507", "prediction": "all x y.((Pregnancy(x) & EmbryonicDevelopment(y)) -> (EmbryonicDevelopment(x) & EmbryonicDevelopment(x,y)))", "score": 0}
{"id": "eqasc_validation_507", "prediction": "all x.(Pregnancy(x) -> (EmbryonicDevelopment(x) & EmbryonicDevelopment(x)))", "score": 0}
{"id": "eqasc_validation_507", "prediction": "all x y.((Pregnancy(x) & Development(y)) -> Embryonic(x,y))", "score": 0}
{"id": "eqasc_validation_507", "prediction": "all x y.((Pregnancy(x) & EmbilicalDevelopment(y)) -> IsEmbryonic(x,y))", "score": 0}
{"id": "eqasc_validation_507", "prediction": "all x.(Pregnancy(x) -> EctomorphicDevelopment(x))", "score": 0}
{"id": "eqasc_validation_507", "prediction": "all x.(Pregnancy(x) -> EarlyEmbryonicDevelopment(x))", "score": 0}
{"id": "eqasc_validation_507", "prediction": "all x y.((Pregnancy(x) & EggtomonicDevelopment(y)) -> IsEmbrynicDevelopment(x,y))", "score": 0}
{"id": "eqasc_validation_507", "prediction": "all x y.((Pregnancy(x) & EmbryonicDevelopment(y)) -> Requires(x,y))", "score": 0}
{"id": "eqasc_validation_508", "prediction": "all x.(Offspring(x) -> (exists y.(ForeignError(y) & (ComesIntoSinexistenceAsResultOfPregnancy(x) | ComesIntoSinexistenceAsResultOfPregnancy(x)))))", "score": 0}
{"id": "eqasc_validation_508", "prediction": "all x.(Offspring(x) -> (ComesIntoInexistenceAsResultOfPregnancy(x) | IsConsciousInBeingAsResultOfPregnancy(x)))", "score": 0}
{"id": "eqasc_validation_508", "prediction": "all x.(Offspring(x) -> (exists y.(Pretty(y) & DefinitionSolves(x,y))))", "score": 0}
{"id": "eqasc_validation_508", "prediction": "all x.(Offspring(x) -> ((Other(x) | Person(x) & ComesIntoOccurrenceExecutionAfterPregnancy(x))))", "score": 0}
{"id": "eqasc_validation_508", "prediction": "all x.(Offspring(x) -> (Is(x,y) & (Is(y,x) & Pregnancies(y)))))", "score": -1}
{"id": "eqasc_validation_508", "prediction": "all x.(Offspring(x) -> (exists y.(Paternity(y) & ComesInBeing(x,y)))))", "score": -1}
{"id": "eqasc_validation_508", "prediction": "all x.(Offspring(x) -> (What(x) | Person(x)) & ComesIntoBeingAsResultOfPregnancy(x)))", "score": -1}
{"id": "eqasc_validation_508", "prediction": "all x.(Offspring(x) -> (ComesIntoOctainAsResultOfPregnancy(x) | ComesIntoOctainAsResultOfPregnancy(x)))", "score": 0}
{"id": "eqasc_validation_508", "prediction": "all x.(Offspring(x) -> (Something(x) | Someone(x) & ComesIntoOcean(x)))", "score": 0}
{"id": "eqasc_validation_508", "prediction": "all x.(Offspring(x) -> ((Borrows(x) & ComesIntoInstinctAsResultOfPregnancy(x))))", "score": 0}
{"id": "eqasc_validation_508", "prediction": "all x.(Offspring(x) -> (Termine(x) & (ComesIntoInexistence(x) -ResultOfPregnancy(x))))", "score": -1}
{"id": "eqasc_validation_508", "prediction": "all x.(Offspring(x) -> (Consistent(x) | ComesIntoExistenceAsResultOfPregnancy(x)))", "score": 0}
{"id": "eqasc_validation_508", "prediction": "all x.(Offspring(x) -> ((BeautifulResult(x) | DisputedResult(x))))", "score": 0}
{"id": "eqasc_validation_508", "prediction": "all x.(Ofspring(x) -> (Equal(x) | Person(x) & ComesIntoOceanAsResultOfPregnancy(x)))", "score": 0}
{"id": "eqasc_validation_508", "prediction": "all xer(x) -> exists y.(Offspring(y) & (Patient(x) | Person(y) & BirthResult(x,y))))", "score": -1}
{"id": "eqasc_validation_508", "prediction": "all x.(Offspring(x) -> ((Probe(x) | ComesIntoBeingOfPregnancy(x)) & KnownAsResultOfPregnancy(x))))", "score": -1}
{"id": "eqasc_validation_509", "prediction": "all x.(Claims(x,Fertility) -> PregnancyResultsFromFertilization(x))", "score": 0}
{"id": "eqasc_validation_509", "prediction": "all x y.((Paternity(x) & Fertilization(y) & BirthResults(x,y)) -> Fertilization(y))", "score": 0}
{"id": "eqasc_validation_509", "prediction": "all x y.((Partition(x) & Fertilization(y)) -> ReleasesFrom(x,y))", "score": 0}
{"id": "eqasc_validation_509", "prediction": "all x.((Pregnancy(x) & ResultFromFertilization(x)) -> Fertility(x))", "score": 0}
{"id": "eqasc_validation_509", "prediction": "all x y.((Pregnancy(x) & Fertilization(y) & FertilizationResultsFrom(x,y)) -> Reconcile(x,y))", "score": 0}
{"id": "eqasc_validation_509", "prediction": "all x.((PaternityResult(x) & Fertilization(x)) -> FertilizationResult(x))", "score": 0}
{"id": "eqasc_validation_509", "prediction": "all x y.((Pregnancy(x) & Fertilization(y) & ResultsFrom(x,y)) -> Successful(x))", "score": 0}
{"id": "eqasc_validation_509", "prediction": "all x.((PregnancyResult(x) & Fertilization(x)) -> ReliesOn(x,y))", "score": 0}
{"id": "eqasc_validation_509", "prediction": "all x y.((PaternityResult(x) & Fertilization(y)) -> ConsectsFrom(x,y))", "score": 0}
{"id": "eqasc_validation_509", "prediction": "all x.(Paternity(x) -> RedirectsFromFertilisation(x))", "score": 0}
{"id": "eqasc_validation_509", "prediction": "all x y.((Pregnancy(x) & Fertilization(y) & FertilizationRisk(x)) -> ResultsFrom(x,y))", "score": 0}
{"id": "eqasc_validation_509", "prediction": "all x.(PregnancyResultsFromFertilization(x) -> PregnancyFertilization(x))", "score": 0}
{"id": "eqasc_validation_509", "prediction": "all x y.((PregnancyResultsFromFertilisation(x) & Fertilization(y)) -> Fertilize(x,y))", "score": 0}
{"id": "eqasc_validation_509", "prediction": "all x y.((Pregnancy(x) & FertilizationResult(y)) -> ResultsFrom(x,y))", "score": 0}
{"id": "eqasc_validation_509", "prediction": "all x.((PregnancyResultsFromFertilization(x)) -> ResultsFromFertilization(x))", "score": 0}
{"id": "eqasc_validation_509", "prediction": "all x.((Pregnant(x) & FertilizationResults(x)) -> PregnancyResultsFromFertilization(x))", "score": 0}
{"id": "eqasc_validation_510", "prediction": "all x y.((Proceeding(x) & Infertility(y)) -> (CapabilityToCarryToFullTerm(z) & CanBeCarriedToFullTerm(y)))", "score": 0}
{"id": "eqasc_validation_510", "prediction": "all x.(Infertility(x) -> (InabilityToCarry(x,pregnancy) & FullTerm(x,pregnancy)))", "score": 0}
{"id": "eqasc_validation_510", "prediction": "all x.(Infertility(x) -> (InabilityToCarryPregnancyToFullTerm(x)))", "score": 0}
{"id": "eqasc_validation_510", "prediction": "all x.(Infertility(x) -> (InabilityToCarryFullTerm(x) & CarriesPaternity(x)))", "score": 0}
{"id": "eqasc_validation_510", "prediction": "all x.(Infertility(x) -> (LittleManning(x) & CarriesPregnancy(x) & FullyTerm(x)))", "score": 0}
{"id": "eqasc_validation_510", "prediction": "all x.(Infertility(x) -> (IncapacityToCarryFullTerm(x) & CarryInFullTerm(x)))", "score": 0}
{"id": "eqasc_validation_510", "prediction": "all x.(Infertility(x) -> (InabilityToCarryFullTerm(x) & Infertility(x)))", "score": 0}
{"id": "eqasc_validation_510", "prediction": "all x.(Infertility(x) -> (InabilityToCarry(x,FullTerm) & Carry(x,FullTerm)))", "score": 0}
{"id": "eqasc_validation_510", "prediction": "all x.(Infertility(x) -> InabilityToCarry(x,fullTerm))", "score": 0}
{"id": "eqasc_validation_510", "prediction": "all x.(Infertility(x) -> (InabilityToCarry(x,pregnancy) & ToFullTerm(x)))", "score": 0}
{"id": "eqasc_validation_510", "prediction": "all x.(Infertility(x) -> (Compromises(x) & Carrying(x,Paternity)))", "score": 0}
{"id": "eqasc_validation_510", "prediction": "all x.(Infertility(x) -> (InabilityToCarryPourgnantToFullTerm(x)))", "score": 0}
{"id": "eqasc_validation_510", "prediction": "all x.(Infertility(x) -> (InabilityToCarry(x,pregnant) & FullTerm(x)))", "score": 0}
{"id": "eqasc_validation_510", "prediction": "all x.(Infertility(x) -> (InabilityToCarryPaternityToFullTerm(x)))", "score": 0}
{"id": "eqasc_validation_510", "prediction": "all x.(Infertility(x) -> (CaseoutToFullTerm(x) & IncapableToCarry(x & Pregnancy(x)))", "score": -1}
{"id": "eqasc_validation_510", "prediction": "all x.(Infertility(x) -> (InabilityToCarry(x,PartyMoment) & Carry(x,PartyMoment)))", "score": 0}
{"id": "eqasc_validation_511", "prediction": "all x y.((Offspring(x) & Fertilization(y) & Birth(y)) -> CarryingToFullTerm(x,y))", "score": 0}
{"id": "eqasc_validation_511", "prediction": "all x y.((ChargingOffspringToFullTerm(x,y) & Fertilization(y) & Birth(y)) -> IsFromFertilization(y))", "score": 0}
{"id": "eqasc_validation_511", "prediction": "all x.(CarryingOffspring(x) -> FromFertilizationToBirth(x))", "score": 0}
{"id": "eqasc_validation_511", "prediction": "all x y z.((Offspring(x) & Fertilization(y) & Birth(z)) -> Carrying(x,y,z))", "score": 0}
{"id": "eqasc_validation_511", "prediction": "all x y.((ClarifyingOffspring(x) & Fertilization(y) & Birth(y)) -> FullTerm(x,y))", "score": 0}
{"id": "eqasc_validation_511", "prediction": "all x.((Fertilization(x) -Birth(x)) -> CarryingOffspringTofulTerm(x))", "score": -1}
{"id": "eqasc_validation_511", "prediction": "all x y z w.((Offspring(x) & Fertilization(y) & Birth(z) & FromFertilizationToFullTerm(x,y,z)) -> CarryingToFullTerm(x))", "score": 0}
{"id": "eqasc_validation_511", "prediction": "all x y.((OffspringCarriedToFullTerm(x) & Fertilization(y) & Birth(y)) -> FromFertilizationToBirth(x,y))", "score": 0}
{"id": "eqasc_validation_511", "prediction": "all x y.((Fertilization(x) & Birth(y)) -> CarryingOffspringToFullTerm(x,y))", "score": 0}
{"id": "eqasc_validation_511", "prediction": "all x.((Offspring(x) & CarryingToFullTerm(x)) -> FertilizationUntilBirth(x))", "score": 0}
{"id": "eqasc_validation_511", "prediction": "all x.((CarryingOffspring(x) & FullTerm(x)) -> FertilizationToBirth(x))", "score": 0}
{"id": "eqasc_validation_511", "prediction": "all x y.((Offspring(x) & Fertilization(y) & Birth(x)) -> CarryingToFullTerm(x,y))", "score": 0}
{"id": "eqasc_validation_512", "prediction": "all x.(Pregnancy(x) -> (MomentForGestation(x) & TermForGestation(x)))", "score": 0}
{"id": "eqasc_validation_512", "prediction": "all x.(Pregnancy(x) -> (Gestation(x) | Iteration(x)))", "score": 0}
{"id": "eqasc_validation_512", "prediction": "((Pregnancy(pregnancy) & OtherWordForGestation(pregnancy)) -> AnotherWordForGestation(pregnancy))", "score": 0}
{"id": "eqasc_validation_512", "prediction": "all x.(Pregnancy(x) -> AnotherGestationWord(x))", "score": 0}
{"id": "eqasc_validation_512", "prediction": "all x.(Pregnancy(x) -> Gestation(x))", "score": 0}
{"id": "eqasc_validation_512", "prediction": "all x.(Pregnancy(x) -> AnotherWordForGestation(x))", "score": 0}
{"id": "eqasc_validation_512", "prediction": "all x y.((Pregnancy(x) & Gestation(y)) -> Word(x,y))", "score": 0}
{"id": "eqasc_validation_512", "prediction": "(FourWordsForGestation(pregnancy))", "score": 0}
{"id": "eqasc_validation_512", "prediction": "all x.(Pregnancy(x) -> AnotherForGestation(x))", "score": 0}
{"id": "eqasc_validation_512", "prediction": "all x.(Pregnancy(x) -> (Gestation(x) & AnotherWordFor(x)))", "score": 0}
{"id": "eqasc_validation_513", "prediction": "all x y.((Offspring(x) & Fertilizer(y) & CarryingFromToBirth(x,y)) -> Gestation(x))", "score": 0}
{"id": "eqasc_validation_513", "prediction": "all x.(Gestation(x) -> (CarriesOffspring(x) & FromFertilizationBetweenBirth(x)))", "score": 0}
{"id": "eqasc_validation_513", "prediction": "all x.(Gestation(x) -> (CarriesOffspring(x) & FromFertilisation(x) & TillBirth(x)))", "score": 0}
{"id": "eqasc_validation_513", "prediction": "all x y z.((Gestation(x) & Offspring(y) & Fertilization(z) & Carrying(x,y,z)) -> FromFertilizationUntilBirth(x))", "score": 0}
{"id": "eqasc_validation_513", "prediction": "all x.(Gemist(x) -> (CarriesOffspring(x) & FromFertilization(x) & Birth(x)))", "score": 0}
{"id": "eqasc_validation_513", "prediction": "all x y z.((Gestation(x) & Offspring(y) & Fertilization(z) & Arrives(x,y,z)) -> CarriesFromToBirth(x,y))", "score": 0}
{"id": "eqasc_validation_513", "prediction": "all x y.((Offspring(x) & Fertilization(y)) -> CarryingFromFertilizationToBirth(x,y))", "score": 0}
{"id": "eqasc_validation_513", "prediction": "all x.(Gestation(x) -> (CarriesOffspringFromFertilisation(x) & Birth(x)))", "score": 0}
{"id": "eqasc_validation_513", "prediction": "all x y.((Gestation(x) & Offspring(y)) -> CarryingFromFertilisationToBirth(x,y))", "score": 0}
{"id": "eqasc_validation_513", "prediction": "all x.(Gestation(x) -> CarryingUnderfewOffspring(x))", "score": 0}
{"id": "eqasc_validation_513", "prediction": "all x y.((Offspring(x) & Fertilization(y)) -> CarryingFromToBirth(x,y))", "score": 0}
{"id": "eqasc_validation_513", "prediction": "all x.(Gestation(x) -> CarryingOffspring(x))", "score": 0}
{"id": "eqasc_validation_513", "prediction": "all x y z.((Offspring(x) & Fertilization(y) & Birth(z)) -> TragesFromTo(x,y,z))", "score": 0}
{"id": "eqasc_validation_513", "prediction": "all x.(Gestation(x) -> (CarriesOffspringFromFertilizationToBirth(x)))", "score": 0}
{"id": "eqasc_validation_513", "prediction": "all x.(Gestation(x) -> (CarriesOffspring(x) & FromFertilizationToBirth(x)))", "score": 0}
{"id": "eqasc_validation_513", "prediction": "all x.(Gestation(x) -> CarryingOfOffspring(x))", "score": 0}
{"id": "eqasc_validation_514", "prediction": "all x.((Pregnant(x) & HealthyBaby(x)) -> EndsHappyly(x))", "score": 0}
{"id": "eqasc_validation_514", "prediction": "all x y.((Pregnancies(x) & HealthyBaby(y)) -> EndsSoulfully(x,y))", "score": 0}
{"id": "eqasc_validation_514", "prediction": "all x.((Pregnancies(x) & HealthyBaby(x)) -> EndsHappily(x))", "score": 0}
{"id": "eqasc_validation_514", "prediction": "all x.((Pregnancies(x) & HealthyBaby(x)) -> HappyEnd(x))", "score": 0}
{"id": "eqasc_validation_514", "prediction": "all x.((Pregnancies(x) & HealthyBaby(x)) -> EndsHappyly(x))", "score": 0}
{"id": "eqasc_validation_514", "prediction": "all x.((Pregnancies(x) & HealthyBirth(x)) -> EndsSoHollyly(x))", "score": 0}
{"id": "eqasc_validation_514", "prediction": "all x.((Pregnancies(x) & HealthyBirth(x)) -> HappyEnd(x))", "score": 0}
{"id": "eqasc_validation_514", "prediction": "all x y.((Pregnancy(x) & HealthyBaby(y)) -> EndsHollyly(x))", "score": 0}
{"id": "eqasc_validation_514", "prediction": "all x.((Pregnancy(x) & HealthyBaby(x)) -> EndsHappily(x))", "score": 0}
{"id": "eqasc_validation_514", "prediction": "all x y.((Pregnancy(x) & HealthyBaby(y) & HealthyBaby(x,y)) -> EndsWith(x,y))", "score": 0}
{"id": "eqasc_validation_514", "prediction": "all x y.((Pregnancies(x) & HealthyBaby(y)) -> (EndsHappyly(x,y)))", "score": 0}
{"id": "eqasc_validation_514", "prediction": "all x.((Pregnancies(x) & HealthyBaby(x)) -> EnjoyableEnd(x))", "score": 0}
{"id": "eqasc_validation_514", "prediction": "all x.((Pregnancy(x) & HealthyBaby(x)) -> HappilyEnds(x))", "score": 0}
{"id": "eqasc_validation_515", "prediction": "all x.((Offspring(x) & Fertilization(x) & BirthResult(x,baby)) -> CarriesFromFertilizationUntilBirthResultsIn(x,baby))", "score": 0}
{"id": "eqasc_validation_515", "prediction": "all x y.((OffspringCarry(x) & Fertilization(y) & BirthResult(y,x,y)) -> CarryingFromToBirth(x,y))", "score": 0}
{"id": "eqasc_validation_515", "prediction": "all x y.((Offspring(x) & Fertilization(y) & BirthResultsInBaby(y)) -> CarryingFromToBirth(x,y))", "score": 0}
{"id": "eqasc_validation_515", "prediction": "all x y.((Offspring(x) & Fertilization(y) & BirthResult(x,y)) -> Carrying(x,y))", "score": 0}
{"id": "eqasc_validation_515", "prediction": "all x.(CarriesOffspring(x) -> (FertilizationConsistentBirthResultsInBaby(x)))", "score": 0}
{"id": "eqasc_validation_515", "prediction": "all x y.((Offspring(x) & Fertilization(y) & DeliversFromTobacco(x,y)) -> Baby(x,y))", "score": 0}
{"id": "eqasc_validation_515", "prediction": "all x y z.((Offspring(x) & Fertilization(y) & Baby(z)) -> CarryingFromFertilizationToBirth(x,y,z))", "score": 0}
{"id": "eqasc_validation_515", "prediction": "all x y.((Offspring(x) & Fertilization(x) & BabyResultsIn(y,x)) -> CarryingFromFertilizationToBirth(x,y))", "score": 0}
{"id": "eqasc_validation_515", "prediction": "all x y z.((Offspring(x) & Fertilization(y) & (BirthResult(z) | BabyResult(z))) -> CarryingFromToBirth(x,y,z))", "score": 0}
{"id": "eqasc_validation_515", "prediction": "all x y z.((Offspring(x) & Fertilization(y) & Baby(z)) -> CarryingFromToBirthInBaby(x,y,z))", "score": 0}
{"id": "eqasc_validation_515", "prediction": "all x y.((Offspring(x) & Fertilization(y) & BlessingResult(z)) -> CarriesFromFertilizationToBirth(x,y,z))", "score": 0}
{"id": "eqasc_validation_515", "prediction": "all x y.((Offspring(x) & Fertilization(y)) -> CarriesFromBirth(x,y))", "score": 0}
{"id": "eqasc_validation_515", "prediction": "all x y z.((Offspring(z) & Fertilization(x) & Fertilization(y) & BirthResult(z) & Carrying(x,z)) -> Baby(z))", "score": 0}
{"id": "eqasc_validation_515", "prediction": "all x.((TransportsOffspringFromFertilization(x) & BornWithBaby(x)) -> BabyResultsIn(x,baby4))", "score": 0}
{"id": "eqasc_validation_515", "prediction": "all x.((CarriesOffspringFromFertilization(x) & DeliversBabyResult(x,baby)) -> BabyResult(x,baby))", "score": 0}
{"id": "eqasc_validation_515", "prediction": "all x y z.((Offspring(x) & Fertilization(y) & Baby(z)) -> CarryingFromToBirthToResultInBaby(x,y,z))", "score": 0}
{"id": "eqasc_validation_516", "prediction": "all x.(ElephantPregnancies(x) -> LastsAbout22Months(x))", "score": 0}
{"id": "eqasc_validation_516", "prediction": "all x.(ElephantPregnant(x) -> LastsAbout22Months(x))", "score": 0}
{"id": "eqasc_validation_516", "prediction": "all x.(Elephant(x) -> PregnancyLasting(x,22))", "score": 0}
{"id": "eqasc_validation_516", "prediction": "all x.(ElephantPregnancy(x) -> LastsAbout22Months(x))", "score": 0}
{"id": "eqasc_validation_516", "prediction": "all x.(Elephant(x) -> Length(x,22))", "score": 0}
{"id": "eqasc_validation_516", "prediction": "all x.(Elephant(x) -> PregnanciesAbout22Months(x))", "score": 0}
{"id": "eqasc_validation_516", "prediction": "all x.((Elephant(x) & Pregnancy(x)) -> LastsAbout22Months(x))", "score": 0}
{"id": "eqasc_validation_516", "prediction": "all x.(ElffootPregnancy(x) -> LastsCast22Months(x))", "score": 0}
{"id": "eqasc_validation_516", "prediction": "all x.(Elephant(x) -> LastsAbout22Months(x))", "score": 0}
{"id": "eqasc_validation_516", "prediction": "all x.(ElephantPregnancy(x) -> LastsAround22Months(x))", "score": 0}
{"id": "eqasc_validation_517", "prediction": "all x y.((Elephant(x) & Offspring(y)) -> CarriesFromFertilizationToBirth(x,y))", "score": 0}
{"id": "eqasc_validation_517", "prediction": "all x y.((Elephant(x) & Offspring(y) & Fertilization(p) & Birth(y)) -> CarriesFromAtoBirth(x,i,22,p))", "score": 0}
{"id": "eqasc_validation_517", "prediction": "all x.(Elephant(x) -> CarriesOffspring(x,42,22))", "score": 0}
{"id": "eqasc_validation_517", "prediction": "all x.(Elephant(x) -> CarriesOffspringFromFertilization(x))", "score": 0}
{"id": "eqasc_validation_517", "prediction": "all x y.((Elephant(x) & Offspring(y)) -> CarriesForBirth(x,y,22))", "score": 0}
{"id": "eqasc_validation_517", "prediction": "all x.(Elephant(x) -> (CarriesOffspring(x) & FromFertilizationToBirth(x,22)))", "score": 0}
{"id": "eqasc_validation_517", "prediction": "all x.(Elephant(x) -> CarriesOffspringNecessarilyForFertilization(x,22))", "score": 0}
{"id": "eqasc_validation_517", "prediction": "all x.(Elephant(x) -> (CarriesOffspring(x) & Fertilized(x) & Birth(x) & 22MonthsAfter(x)))", "score": 0}
{"id": "eqasc_validation_517", "prediction": "all x.(Elephant(x) -> CarriesOffspring(x,fetuation & Birth(x,22))", "score": -1}
{"id": "eqasc_validation_517", "prediction": "all x y z.((Elephant(x) & Ofspring(y,z)) -> CarriesFromFertilizationToBirth(x,z))", "score": 0}
{"id": "eqasc_validation_517", "prediction": "all x y.((Elephant(x) & Offspring(y)) -> CarriesUntilBirth(x,y,22))", "score": 0}
{"id": "eqasc_validation_517", "prediction": "all x y z.((Elephant(x) & Offspring(y) & Fertilization(z) & 22MonthsToBirth(x,y)) -> CarriesFromToBirth(x,z))", "score": 0}
{"id": "eqasc_validation_517", "prediction": "all x.(Elephant(x) -> (CarriesOrgoffspringBetweenFertilization(x,22)))", "score": 0}
{"id": "eqasc_validation_518", "prediction": "all x y.((Bolt(x) & Glacier(y)) -> (FormedBy(x,y) & Melting(y)))", "score": 0}
{"id": "eqasc_validation_518", "prediction": "all x y.((Block(x) & Glacier(y)) -> (FormedBy(x,y) | Melting(y)))", "score": 0}
{"id": "eqasc_validation_518", "prediction": "all x y.((Blast(x) & Glacier(y)) -> FormedBy(x,y)) (GlacierMelt(y) | GlacierMelt(y)))", "score": -1}
{"id": "eqasc_validation_518", "prediction": "(all x.(Bolt(x) -> (FormedByGlaciers(x) | MeltingSometimes(x))))", "score": 0}
{"id": "eqasc_validation_518", "prediction": "all x y.((Blood(x) & Glacier(y)) -> Melts(y))", "score": 0}
{"id": "eqasc_validation_518", "prediction": "all x.(Bolt(x) -> (FormedByGlacier(x) & MeltingGlaciers(x)))", "score": 0}
{"id": "eqasc_validation_518", "prediction": "all x y z.(Bolt(x) & Glacier(y) & Ice(z) & Melts(x,y) & Sometimes(x,z)) -> FormedBy(x,y,z))", "score": -1}
{"id": "eqasc_validation_518", "prediction": "all x.(Bolt(x) -> (FormedByGlaciersMelt(x) & OccasionallyMeltsBolt(x)))", "score": 0}
{"id": "eqasc_validation_518", "prediction": "all x.(Balloon(x) -> (FormedByGlaciers(x) & Melting(x)))", "score": 0}
{"id": "eqasc_validation_518", "prediction": "all x y.((Block(x) & Glacier(y)) -> FormedBy(x,y))", "score": 0}
{"id": "eqasc_validation_518", "prediction": "all x y z.((Balloon(x) & Glacier(y) & Glacier(z)) -> Melts(x,y,z))", "score": 0}
{"id": "eqasc_validation_518", "prediction": "all x y.((Blood(x) & Glacier(y) & Melted(y)) -> FormedBy(x,y))", "score": 0}
{"id": "eqasc_validation_518", "prediction": "all x y.((Blast(x) & Glacier(y)) -> MeltsAndForms(x,y))", "score": 0}
{"id": "eqasc_validation_518", "prediction": "all x.(Balloon(x) -> (FormedByGlaciers(x) & MeltInSomeTimes(x)))", "score": 0}
{"id": "eqasc_validation_518", "prediction": "all x y z.((Bolt(x) & Glacier(y) & Glacier(z)) -> FormedByMelting(x,y,z))", "score": 0}
{"id": "eqasc_validation_519", "prediction": "all x.(Crag(x) -> Boulder(x))", "score": 0}
{"id": "eqasc_validation_519", "prediction": "all x.(Crag(x) -> (Blooded(x) | Boulder(x)))", "score": 0}
{"id": "eqasc_validation_519", "prediction": "most of the crags are boulders.", "score": -1}
{"id": "eqasc_validation_519", "prediction": "all x.(Crag(x) -> (Bomber(x) | Rock(x)))", "score": 0}
{"id": "eqasc_validation_519", "prediction": "all x.(Crag(x) -> Blob(x))", "score": 0}
{"id": "eqasc_validation_519", "prediction": "all x.(Crag(x) -> BlastedOutOfCrag(x))", "score": 0}
{"id": "eqasc_validation_519", "prediction": "all x y.((Crag(x) & Boulder(y)) -> Crag(x))", "score": 0}
{"id": "eqasc_validation_519", "prediction": "all x.(Crag(x) -> (Blast(x) | Boulder(x)))", "score": 0}
{"id": "eqasc_validation_520", "prediction": "all x.(Crag(x) -> MhealingGlacier(x))", "score": 0}
{"id": "eqasc_validation_520", "prediction": "all x.(Crag(x) -> (FormedByMeltingGlaciers(x) & MeltingGlaciers(x)))", "score": 0}
{"id": "eqasc_validation_520", "prediction": "all x.(Crag(x) -> FormedByMeltingGlaciers(x))", "score": 0}
{"id": "eqasc_validation_520", "prediction": "all x y.((Crag(x) & Glacier(y) & Melting(x,y)) -> FormedBy(x,y))", "score": 0}
{"id": "eqasc_validation_520", "prediction": "all x.(Crag(x) -> (FormedByMeltingGlaciers(x) & MostCrags(x)))", "score": 0}
{"id": "eqasc_validation_520", "prediction": "all x.(Crag(x) -> (FormedByMeltingGlaciers(x) & ProbablyCrag(x)))", "score": 0}
{"id": "eqasc_validation_520", "prediction": "the most pronounced crag (Crag(c) & FormedByMeltingGlaciers(c))", "score": -1}
{"id": "eqasc_validation_520", "prediction": "all x y.((Crag(x) & MeltingGlacier(y)) -> FormedBy(x,y))", "score": 0}
{"id": "eqasc_validation_520", "prediction": "all x.(Crag(x) -> (FormedByMeltingGlaciers(x) & HasFilter(x)))", "score": 0}
{"id": "eqasc_validation_520", "prediction": "all x.(Crag(x) -> (FormedByWheatsGlaciers(x) & Melting(x)))", "score": 0}
{"id": "eqasc_validation_520", "prediction": "all x.(Crag(x) -> (FormedByMeltingGlaciers(x) & MostCragForms(x)))", "score": 0}
{"id": "eqasc_validation_521", "prediction": "all x y.((AlpineGlacier(x) & Mountain(y)) -> FormsIn(x,y))", "score": 0}
{"id": "eqasc_validation_521", "prediction": "all x.(AlpineGlacier(x) -> FormsInMountains(x))", "score": 0}
{"id": "eqasc_validation_521", "prediction": "all x y.((AlpineGlimmer(x) & Mountain(y)) -> FormIn(x,y))", "score": 0}
{"id": "eqasc_validation_521", "prediction": "all x.(AlpineGlacier(x) -> FormedInMountains(x))", "score": 0}
{"id": "eqasc_validation_522", "prediction": "all x y.((Boulder(x) & Mountain(y)) -> FormedIn(x,y))", "score": 0}
{"id": "eqasc_validation_522", "prediction": "all x.(Blast(x) -> FormedInMountains(x))", "score": 0}
{"id": "eqasc_validation_522", "prediction": "all x y z.((Belt(x) & Mountain(y) & Mountain(z)) -> FormsIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_522", "prediction": "all x.(Balloon(x) -> FormedInMountains(x))", "score": 0}
{"id": "eqasc_validation_522", "prediction": "all x.(Boulder(x) -> FormedInMountains(x))", "score": 0}
{"id": "eqasc_validation_522", "prediction": "all x.(Boulder(x) -> (FormedInMountains(x)))", "score": 0}
{"id": "eqasc_validation_522", "prediction": "all x.(Bolt(x) -> FormedInMountain(x))", "score": 0}
{"id": "eqasc_validation_522", "prediction": "all x.( Boulder(x) -> (FormedInMountains(x)))", "score": 0}
{"id": "eqasc_validation_523", "prediction": "all x y.((Erratic(x) & Glacier(y)) -> DeposesSecondary(x,y))", "score": 0}
{"id": "eqasc_validation_523", "prediction": "all x.(Erratic(x) -> (Rocket(x) & DepostedByGlaciers(x) & PartOfMoraines(x)))", "score": 0}
{"id": "eqasc_validation_523", "prediction": "all x y.((Erratic(x) & Glacier(y)) -> (Bumps(x) & DepositedByMoraines(x,y)))", "score": 0}
{"id": "eqasc_validation_523", "prediction": "all x.(Erratic(x) -> (Blood(x) & DepositedByGlaciers(x) & PartOfMoraines(x)))", "score": 0}
{"id": "eqasc_validation_523", "prediction": "all x y.((Erratic(x) & Glacier(y)) -> DeposeBy(x,y))", "score": 0}
{"id": "eqasc_validation_523", "prediction": "all x.(Erratic(x) -> (Bolt(x) & DeposesByGlaciers(x) & PartOfMoraines(x)))", "score": 0}
{"id": "eqasc_validation_523", "prediction": "all x.(Erratic(x) -> (Bolt(x) & DepositedByGlaciers(x) & PartOfMoraines(x) & PartOf(x,Moraines)))", "score": 0}
{"id": "eqasc_validation_523", "prediction": "all x.(Erratic(x) -> (Bolt(x) & DeposedByGlaciers(x,moraines)))", "score": 0}
{"id": "eqasc_validation_523", "prediction": "all x.(Erratic(x) -> (Balloon(x) & DepositedByGlaciers(x) & PartOfMoraines(x)))", "score": 0}
{"id": "eqasc_validation_523", "prediction": "all x.(Erratic(x) -> (Bolt(x) & DepositedByGlaciers(x) & PartOfMoraines(x)))", "score": 0}
{"id": "eqasc_validation_523", "prediction": "all x.(Erratic(x) -> (Bolt(x) & DepositedByGlaciers(x) & Moraines(x)))", "score": 0}
{"id": "eqasc_validation_523", "prediction": "all x y z.((Erratic(x) & Glacier(y) & Moraines(z)) -> DeposeByForMoraines(x,y,z))", "score": 0}
{"id": "eqasc_validation_523", "prediction": "(all x.(Erratic(x) -> (Block(y) & DedepositedBy(y,GlacierCraft))))", "score": 0}
{"id": "eqasc_validation_523", "prediction": "all x y.((Erratic(x) & Glacier(y)) -> DepositedBy(x,y))", "score": 0}
{"id": "eqasc_validation_523", "prediction": "all x y z.((Erratic(x) & Boulder(y) & Glacier(z) & DetonatedBy(y,z)) -> Moraine(z))", "score": 0}
{"id": "eqasc_validation_524", "prediction": "all x y.((Eratoid(x) & Glacier(y)) -> FormedByMelting(x,y))", "score": 0}
{"id": "eqasc_validation_524", "prediction": "all x y.((Eratoid(x) & Glacier(y)) -> FormedBy(x,y))", "score": 0}
{"id": "eqasc_validation_524", "prediction": "all x.(Eratoid(x) -> (FormedBy(x,Glaciers),MeltingGlaciers)))", "score": -1}
{"id": "eqasc_validation_524", "prediction": "all x y z.((Eratic(x) & Glacier(y) & Glacier(z)) -> FormedBy(x,z,y))", "score": 0}
{"id": "eqasc_validation_524", "prediction": "all x y.((Erastic(x) & GlacierMelting(y) & FormedBy(z) & Melting(z)) -> Forms(x,y))", "score": 0}
{"id": "eqasc_validation_524", "prediction": "all x y.(Verberratic(x) -> (FormedByGlaciers(y) & MeltingGlaciers(x)))", "score": 0}
{"id": "eqasc_validation_524", "prediction": "all x y.((Erastic(x) & Glacier(y)) -> (FormedBy(x,y) & MeltingGlacier(y)))", "score": 0}
{"id": "eqasc_validation_524", "prediction": "all x.(Eraser(x) -> FormedByGlaciers(x))", "score": 0}
{"id": "eqasc_validation_524", "prediction": "all x y z.((Erastic(x) & Glacier(y) & Glacier(z)) -> FormedBy(x,y,z))", "score": 0}
{"id": "eqasc_validation_524", "prediction": "all x y.(Eratoid(x) -> (FormedBy(x,y) & GlacierMelting(y)))", "score": 0}
{"id": "eqasc_validation_524", "prediction": "all x.(Eratoid(x) -> formedbyGlacierMelting(x))", "score": 0}
{"id": "eqasc_validation_524", "prediction": "all x.(Erastrotic(x) -> FormedByGlaciersMelting(x))", "score": 0}
{"id": "eqasc_validation_524", "prediction": "all x y z.((Erastist(x) & Glacier(y) & Melting(z)) -> FormsBy(x,y,z))", "score": 0}
{"id": "eqasc_validation_524", "prediction": "all x y z.((Eratotics(x) & Glacier(y) & Ice(z)) -> FormedBy(x,y,z))", "score": 0}
{"id": "eqasc_validation_524", "prediction": "all x.(Eratoid(x) -> FormedByGlacierMelting(x))", "score": 0}
{"id": "eqasc_validation_524", "prediction": "all x y.((Eratosis(x) & Glacier(y)) -> FormedByMelting(x,y))", "score": 0}
{"id": "eqasc_validation_525", "prediction": "all x.(Glacier(x) -> (MadeOfSnow(x) & MadeOfIce(x) & MadeOfRock(x)))", "score": 0}
{"id": "eqasc_validation_525", "prediction": "all x.(Glacier(x) -> (MadeOf(x,Snow) & MadeOf(x,Ice) & BuiltOf(x,Rock,Rock)))", "score": 0}
{"id": "eqasc_validation_525", "prediction": "all x.(Glacier(x) -> (MadeOf(x,Snow) & MadeOf(x,Ice) & MadeOf(x,Rock)))", "score": 0}
{"id": "eqasc_validation_525", "prediction": "all x.(Glacier(x) -> (Snow(x) & Ice(x) & Rock(x)))", "score": 0}
{"id": "eqasc_validation_525", "prediction": "all x.(Glacier(x) -> ((HasSnow(x) & HasIce(x) & HasRock(x))))", "score": 0}
{"id": "eqasc_validation_525", "prediction": "all x.(Glitzer(x) -> (MadeOfSnow(x) & MadeOfIce(x) & MadeOfRock(x)))", "score": 0}
{"id": "eqasc_validation_525", "prediction": "all x.(Glacier(x) -> (MadeOfSnow(x) & MadeOfIceAndRock(x)))", "score": 0}
{"id": "eqasc_validation_526", "prediction": "all x.(Blast(x) -> (FormedBySnow(x) | FormedByIce(x) | FormedByRockMelting(x)))", "score": 0}
{"id": "eqasc_validation_526", "prediction": "all x.(Bolt(x) -> (FormedBySnow(x) | FormedByIce(x) | FormedByRockMelting(x)))", "score": 0}
{"id": "eqasc_validation_526", "prediction": "all x y z.((Bolt(x) & Snow(y) & Ice(z) & RockMelting(x,w)) -> (FormedBy(x,y) & FormedBy(x,z) & FormedBy(x,w)))", "score": 0}
{"id": "eqasc_validation_526", "prediction": "all x.(Blood(x) -> (FormedBySnow(x) | FormedByIce(x) | FormedByRockMelting(x)))", "score": 0}
{"id": "eqasc_validation_526", "prediction": "all x.(Block(x) -> (FormedBySnow(x) & FormedByIce(x) & FormedByRockMelting(x)))", "score": 0}
{"id": "eqasc_validation_526", "prediction": "all x y z.((Blast(x) & Snow(y) & Ice(z)) -> Forms(x,y)) (FelterMelting(x) | (FeltMelting(x) | Melting(x)))))", "score": -1}
{"id": "eqasc_validation_526", "prediction": "all x.(Brochle(x) -> (FormedBySnow(x) & FormedByIce(x) & FormedByRockMelting(x)))", "score": 0}
{"id": "eqasc_validation_526", "prediction": "all x.(Bolt(x) -> (FormedBySnow(x) & FormedByIce(x) & FormedByRockMelting(x)))", "score": 0}
{"id": "eqasc_validation_526", "prediction": "all x.(Balloon(x) -> (FormedBySnowIceAndRockMelting(x) & FormedByIceAndRockMelting(x)))", "score": 0}
{"id": "eqasc_validation_526", "prediction": "all x y.((Boulder(x) & Snow(y)) | Ice(y) | RockMelting(x)) -> FormedBy(x,y))", "score": -1}
{"id": "eqasc_validation_526", "prediction": "all x.(Boulder(x) -> (FormedBySnow(x) | FormedByIce(x) | FormedByRockMelting(x)))", "score": 0}
{"id": "eqasc_validation_526", "prediction": "all x.(Boiler(x) -> (FormedBy(x,snow) & FormedBy(x,ice) & FormedBy(x,rockMelting)))", "score": 0}
{"id": "eqasc_validation_527", "prediction": "all x y z.((Pelycosaur(x) & Animal(y) & Body(z)) -> Therapsid(x))", "score": 0}
{"id": "eqasc_validation_527", "prediction": "all x y.((Pelycosaur(x) & Therapsid(y)) -> GivesRoseTo(x,y))", "score": 0}
{"id": "eqasc_validation_527", "prediction": "exists x y.(Pelycosaur(x) & Animal(y) & GivesRiseToGroup(x,y))", "score": 0}
{"id": "eqasc_validation_527", "prediction": "exists x y.(Pelycosaur(x) & Animal(y) & GivesRiseToTherapsids(x))", "score": 0}
{"id": "eqasc_validation_527", "prediction": "all x.(Pelycosaur(x) -> Therapsid(x))", "score": 0}
{"id": "eqasc_validation_527", "prediction": "exists x.(Pelycosaur(x) & Animal(x) & Therapsid(x))", "score": 2}
{"id": "eqasc_validation_527", "prediction": "all x.(Pelycosaur(x) -> AnimalTherapsid(x))", "score": 0}
{"id": "eqasc_validation_527", "prediction": "all x y.((Pelycosaur(x) & Animal(y)) -> Therapsid(y))", "score": 0}
{"id": "eqasc_validation_527", "prediction": "all x y.((Pelycosaur(x) & Animal(y)) -> GivesRiptosy(x,y))", "score": 0}
{"id": "eqasc_validation_527", "prediction": "all x y.((Pelycosaur(x) & Animal(y)) -> GaveRootToPherapsids(x,y))", "score": 0}
{"id": "eqasc_validation_527", "prediction": "exists x y.(Pelycosaur(x) & Animal(y) & Therapsid(x))", "score": 2}
{"id": "eqasc_validation_527", "prediction": "all x.(Pelycosaur(x) -> GivesRaw(x))", "score": 0}
{"id": "eqasc_validation_527", "prediction": "all x.(Pelycosaur(x) -> GivesRiseToTherapsids(x))", "score": 0}
{"id": "eqasc_validation_527", "prediction": "all x y.((Pelycosaur(x) & Therapsid(y)) -> GivesRiseTo(x,y))", "score": 0}
{"id": "eqasc_validation_527", "prediction": "all x.(Pelycosaur(x) -> GivesRiseToTherapsid(x))", "score": 0}
{"id": "eqasc_validation_527", "prediction": "all x.(Pelycosaur(x) -> GeneticEvolution(x,therapsids))", "score": 0}
{"id": "eqasc_validation_528", "prediction": "all x.(Pelycosaur(x) -> PreservedInFossilRecord(x))", "score": 0}
{"id": "eqasc_validation_528", "prediction": "all x.(Pelycosaur(x) -> ImportantLineagePreservedInFossilRecord(x))", "score": 0}
{"id": "eqasc_validation_528", "prediction": "all x.(Pelycosaur(x) -> ImportantLineage(x))", "score": 0}
{"id": "eqasc_validation_528", "prediction": "all x y.((Pelycosaur(x) & FrassilRecord(y)) -> ImportantLineagePreservedIn(x,y))", "score": 0}
{"id": "eqasc_validation_528", "prediction": "all x.(Pelycosaur(x) -> exists y.(FossilRecord(y) | LimbDomesticRecord(x,y))))", "score": -1}
{"id": "eqasc_validation_528", "prediction": "all x.(Pelycosaur(x) -> exists y.(FossilRecord(y) & Preserved(x,y))))", "score": -1}
{"id": "eqasc_validation_528", "prediction": "all x.(Pelycosaur(x) -> (PurifiedInFossilRecord(x) & ImportantLineage(x)))", "score": 0}
{"id": "eqasc_validation_528", "prediction": "all x y.((Pelycosaur(x) & ImportantLineage(y)) -> PreservedInFossilRecord(x,y))", "score": 0}
{"id": "eqasc_validation_528", "prediction": "all x.(Pelycosaur(x) -> (InterestingLiniage(x) & PreservedInFossilRecord(x)))", "score": 0}
{"id": "eqasc_validation_529", "prediction": "all x.(FossilRecord(x) -> ShowsLineageOfTherapsids(x))", "score": 0}
{"id": "eqasc_validation_529", "prediction": "all x.(FossilRecord(x) -> ShowsLangageOfTherapsids(x))", "score": 0}
{"id": "eqasc_validation_529", "prediction": "all x y.((FossilRecord(x) & Therapsid(y)) -> ShowsLineage(x,y))", "score": 0}
{"id": "eqasc_validation_529", "prediction": "therapsid(fossil)", "score": 0}
{"id": "eqasc_validation_529", "prediction": "all x.(FossilRecord(x) -> ShowsLineage(x))", "score": 0}
{"id": "eqasc_validation_529", "prediction": "all x y.(FossilRecord(x) -> DisplaysLanguageOfTherapsids(y))", "score": 0}
{"id": "eqasc_validation_529", "prediction": "all x.(FossilRecord(x) -> ShowsLineageOf(x,Therapsids))", "score": 0}
{"id": "eqasc_validation_529", "prediction": "all x.(FossilRecord(x) -> ShowsLineage(x,Therapsids))", "score": 0}
{"id": "eqasc_validation_530", "prediction": "all x.(Theropsid(x) -> (Pelycosaur(x) | Therapsid(x)))", "score": 0}
{"id": "eqasc_validation_530", "prediction": "(all x.(Pelycosaur(x) -> Theropsid(x)) & ((Pelycosaur(x) & Therapsid(x)) | (Therapsid(x) & Theropsid))))", "score": -1}
{"id": "eqasc_validation_530", "prediction": "all x.((Pelycosaur(x) | Therapsid(x)) -> Theropsid(x))", "score": 0}
{"id": "eqasc_validation_530", "prediction": "all x y.((Pelycosaur(x) & Therapsid(y)) -> Theropsid(x))", "score": 0}
{"id": "eqasc_validation_530", "prediction": "all x.(Pelycosaur(x) -> Therapsid(x))", "score": 0}
{"id": "eqasc_validation_530", "prediction": "all x y.((Pelycosaur(x) & Therapsid(y)) -> (Theropsid(x) & Theropsid(y)))", "score": 0}
{"id": "eqasc_validation_530", "prediction": "all x y.((Pelycosaur(x) | Therapsid(y)) -> Theropsid(x))", "score": 0}
{"id": "eqasc_validation_531", "prediction": "all x.(Therapsid(x) -> Animal(x))", "score": 0}
{"id": "eqasc_validation_531", "prediction": "all x y.((Therapsid(x) & Animal(y) & Animal(x)) -> Animal(y))", "score": 0}
{"id": "eqasc_validation_531", "prediction": "all x.(Therapsid(x) -> (Animal(x) & Animal(x) & Animal(x)))", "score": 0}
{"id": "eqasc_validation_531", "prediction": "all x.(Rapossid(x) -> Animal(x))", "score": 0}
{"id": "eqasc_validation_531", "prediction": "all x.((Therapsid(x) & Animal(x)) -> Animal(x))", "score": 0}
{"id": "eqasc_validation_531", "prediction": "all x.(Therapsid(x) -> (Animal(x) | Animal(x))))", "score": -1}
{"id": "eqasc_validation_531", "prediction": "all x.(Therapsid(x) -> (Animal(x) & Animal(x) & Animal(x) & Animal(x)))", "score": 0}
{"id": "eqasc_validation_531", "prediction": "all x.(Therapsid(x) -> (Animal(x) & Animal(x)))", "score": 0}
{"id": "eqasc_validation_532", "prediction": "Tetraceratops is oldestKnownTherapsid.", "score": -1}
{"id": "eqasc_validation_532", "prediction": "the oldest known therapsid(Tetraceratops)", "score": -1}
{"id": "eqasc_validation_532", "prediction": "therapsid(tetraceratops)", "score": 0}
{"id": "eqasc_validation_532", "prediction": "(AlterestKnownTherapsid) & Tetraceratops(Tetraceratops)", "score": 0}
{"id": "eqasc_validation_532", "prediction": "Tetraceratops is oldestKnownTherapsid(e)", "score": -1}
{"id": "eqasc_validation_532", "prediction": "-AlterestKnownTherapsid(tetraceratops)", "score": 0}
{"id": "eqasc_validation_532", "prediction": "(AlterestKnownTherapsid(Tetraceratops))", "score": 0}
{"id": "eqasc_validation_532", "prediction": "(AlsoOldKnownTherapsid(Tetraceratops)", "score": -1}
{"id": "eqasc_validation_532", "prediction": "(OldestKnownTherapsid(Tetraceratops) & LongestKnown(Tetraceratops))", "score": 0}
{"id": "eqasc_validation_532", "prediction": "therapsid (MostOldKnownTetraceratops))", "score": -1}
{"id": "eqasc_validation_532", "prediction": "Tetraceratops (TMaStrongerKnownTherapsid(TM))", "score": 0}
{"id": "eqasc_validation_532", "prediction": "Therapsid(Tetraceratops)", "score": 0}
{"id": "eqasc_validation_532", "prediction": "Tetraceratops(TM) -HasSeasonalTherapsid(TM)", "score": -1}
{"id": "eqasc_validation_532", "prediction": "Tetraceratops (Certacle(t) & KnowsPrayer(l))", "score": -1}
{"id": "eqasc_validation_532", "prediction": "therapsid. (OldestKnownTherapsid(tetraceratops) | OldestKnownTherapsid(tetraceratops))", "score": -1}
{"id": "eqasc_validation_532", "prediction": "(OldestKnownTherapsid(Tetraceratops))", "score": 0}
{"id": "eqasc_validation_533", "prediction": "all x.(Tetraceratop(x) -> Pelycosaur(x))", "score": 0}
{"id": "eqasc_validation_533", "prediction": "all x.(Tetraceratop(x) -> Pelegrinus(x))", "score": 0}
{"id": "eqasc_validation_534", "prediction": "all x.(Therapsid(x) -> (Reptile(x) & AnimatedToMammals(x)))", "score": 0}
{"id": "eqasc_validation_534", "prediction": "all x.(Therapsid(x) -> (AncientToMammals(x) & Reptile(x)))", "score": 2}
{"id": "eqasc_validation_534", "prediction": "all x.(Terraceid(x) -> (Reptile(x) & AscendedToMammals(x)))", "score": 0}
{"id": "eqasc_validation_534", "prediction": "all x.(Therapsid(x) -> (Rptile(x) & AscendedToMammal(x)))", "score": 0}
{"id": "eqasc_validation_534", "prediction": "all x.(Therapsid(x) -> AncientToMammals(x))", "score": 0}
{"id": "eqasc_validation_534", "prediction": "all x.(Therapsid(x) -> (Reptile(x) & AscendedToMammals(x)))", "score": 0}
{"id": "eqasc_validation_534", "prediction": "all x.(Therapsid(x) -> (AncientToMammals(x) & ForefatherToMammals(x)))", "score": 0}
{"id": "eqasc_validation_534", "prediction": "all x.(Therapsid(x) -> (Reptile(x) & AncientToMammal(x)))", "score": 0}
{"id": "eqasc_validation_534", "prediction": "all x.(Therapsid(x) -> (Reptile(x) & AncientToMammals(x)))", "score": 2}
{"id": "eqasc_validation_534", "prediction": "all x y.((Reptile(x) & Mammal(y)) -> AvorableTo(x,y))", "score": 0}
{"id": "eqasc_validation_534", "prediction": "all x y.((Therapsid(x) & Mammal(y)) -> Reptile(x,y))", "score": 0}
{"id": "eqasc_validation_534", "prediction": "all x.(Therapsid(x) -> (AboriginelToMammals(x)))", "score": 0}
{"id": "eqasc_validation_535", "prediction": "all x y.(Pelycosaur(x) -> (GaveRenaissance(x) & Reptile(y) & AncientToMammals(y)))", "score": 0}
{"id": "eqasc_validation_535", "prediction": "all x y.((Pelycosaur(x) & Reptile(y)) -> GaveRidgeToAncientToMammals(y,x,y))", "score": 0}
{"id": "eqasc_validation_535", "prediction": "all x y z.((Pelycosaur(x) & Reptile(y) & Mammal(z)) -> GivesRigor(x,y,z))", "score": 0}
{"id": "eqasc_validation_535", "prediction": "all x y z.((Pelycosaur(x) & Reptile(y) & Moose(z)) -> GivesRibbetToAncientTo(y,z))", "score": 0}
{"id": "eqasc_validation_535", "prediction": "all x y z.((Pelycosaur(x) & Reptile(y) & Mammal(z)) -> AscendedTo(y,z))", "score": 0}
{"id": "eqasc_validation_535", "prediction": "all x y.((Pelycosaur(x) & Reptile(y)) -> GivesRigor(x,y))", "score": 0}
{"id": "eqasc_validation_535", "prediction": "all x y.((Pelycosaur(x) & Reptile(y)) -> GivingRiderTo(x,y))", "score": 0}
{"id": "eqasc_validation_535", "prediction": "all x y.((Pelycosaur(x) & Reptile(y)) -> GivingRiseTo(x,y))", "score": 0}
{"id": "eqasc_validation_535", "prediction": "all x y.((Pelycosaur(x) & Reptiles(y) & NativeToMammals(y)) -> GivesRiseTo(x,y))", "score": 0}
{"id": "eqasc_validation_535", "prediction": "all x.(Pelycosaur(x) -> GroupOfReptilesAncientToMammals(x))", "score": 0}
{"id": "eqasc_validation_535", "prediction": "all x y.((Pelycosaur(x) & Reptile(y)) -> (GatheredRiverDescendedTo(x,y)) & AnalogToMammals(y)))", "score": -1}
{"id": "eqasc_validation_535", "prediction": "all x y.((Pelycosaur(x) & Reptiles(y)) -> AscendedTo(x,y))", "score": 0}
{"id": "eqasc_validation_535", "prediction": "all x y.((Pelycosaur(x) & Reptile(y)) -> AscendedTo(x,y))", "score": 0}
{"id": "eqasc_validation_535", "prediction": "all x y.((Pelycosaur(x) & Reptile(y)) -> AntecedentTo(x,y))", "score": 0}
{"id": "eqasc_validation_535", "prediction": "all x y.((Pelycosaur(x) & Reptile(y)) -> GaveRadicalToMammals(x))", "score": 0}
{"id": "eqasc_validation_535", "prediction": "all x y z.((Pelycosaur(x) & Reptile(y) & AntecedentToMammals(z)) -> GivesRawTo(x,y,z))", "score": 0}
{"id": "eqasc_validation_536", "prediction": "exists x.(Pelycosaur(x) & Reptile(x) & AgoraticToMammals(x))", "score": 0}
{"id": "eqasc_validation_536", "prediction": "exists x.(Pelycosaur(x) & Generated(x) & Reptile(x) & AdjacentToMammal(x))", "score": 0}
{"id": "eqasc_validation_536", "prediction": "exists x.(Pelycosaur(x) & GivesRiseToReptile(x) & AntecedentToMammals(x))", "score": 0}
{"id": "eqasc_validation_536", "prediction": "exists x y.(Pelycosaur(x) & Reptile(y) & AntecedentToMammals(x,y))", "score": 0}
{"id": "eqasc_validation_536", "prediction": "exists x.(Pelycosaur(x) & Reptile(x) & NativeToMammals(x))", "score": 0}
{"id": "eqasc_validation_536", "prediction": "exists x y.(Pelycosaur(x) & ReptileAncientToMammals(y))", "score": 0}
{"id": "eqasc_validation_536", "prediction": "exists x.(Pelycosaur(x) & Reptile(y) & AntecedentToMammals(x,y))", "score": 0}
{"id": "eqasc_validation_536", "prediction": "exists x.(Pelycosaur(x) & Giant(x) & Reptile(x))", "score": 0}
{"id": "eqasc_validation_536", "prediction": "exists x.(Pelycosaur(x) & GoneToReptile(x) & AntecedentToMammals(x))", "score": 0}
{"id": "eqasc_validation_536", "prediction": "exists x.(Pelycosaur(x) & Reptile(x) & AncientToMammals(x))", "score": 4}
{"id": "eqasc_validation_536", "prediction": "exists x.(Pelycosaur(x) & GivesRisisToReptile(x))", "score": 0}
{"id": "eqasc_validation_536", "prediction": "exists x.(Pelycosaur(x) & GivesRiverToReptile(x))", "score": 0}
{"id": "eqasc_validation_536", "prediction": "exists x.(Pelycosaur(x) & ResidentAncientTo(x,mammals))", "score": 0}
{"id": "eqasc_validation_536", "prediction": "exists x.(Pelycosaur(x) & GaveRiseToReptile(x) & AscendedToMammals(x))", "score": 0}
{"id": "eqasc_validation_536", "prediction": "exists x.(Pelycosaur(x) & (ExploresToReptile(x) | AntecedentToMammals(x)))", "score": 0}
{"id": "eqasc_validation_537", "prediction": "all x.(Howling(x) -> WarnsWolf(x))", "score": 0}
{"id": "eqasc_validation_537", "prediction": "all x y.((Wolf(x) & Wolf(y) & Wolf(x)) -> HowledWarning(x,y))", "score": 0}
{"id": "eqasc_validation_537", "prediction": "all x y z.((Wolf(x) & Wolf(y) & Howl(z)) -> Warns(z,y))", "score": 0}
{"id": "eqasc_validation_537", "prediction": "all x y.((Wolf(x) & Wolf(y)) -> HowlesUsedToWarn(x,y))", "score": 0}
{"id": "eqasc_validation_537", "prediction": "all x y.((Howling(x) & Wolf(y)) -> WarnsByTheWolves(x,y))", "score": 0}
{"id": "eqasc_validation_537", "prediction": "all x y.((Wolf(x) & Wolf(y)) -> Warns(x,y))", "score": 0}
{"id": "eqasc_validation_537", "prediction": "all x y.((Howling(x) & Wolf(y) & Wolf(a)) -> Warns(x,y))", "score": 0}
{"id": "eqasc_validation_537", "prediction": "all x y z.((Howling(x) & Wolf(y) & Wolf(z)) -> (Warning(x,y,z) & By(x,y) & Wolf(y,z)))", "score": 0}
{"id": "eqasc_validation_537", "prediction": "all x y z.((Howling(x) & Wolf(y) & Wolf(z)) -> Warns(x,y,z))", "score": 0}
{"id": "eqasc_validation_537", "prediction": "all x y.((Whole(x) & Wolf(y)) -> Warns(x,y))", "score": 0}
{"id": "eqasc_validation_537", "prediction": "all x y.((Howling(x) & Wolf(y)) -> Warns(x,y))", "score": 0}
{"id": "eqasc_validation_537", "prediction": "all x y.((Wolf(x) & Wolf(y)) -> WarnsAlternatively(x,y))", "score": 0}
{"id": "eqasc_validation_537", "prediction": "all x y.((Wolf(x) & Wolf(y)) -> HowlingWarns(x,y))", "score": 0}
{"id": "eqasc_validation_537", "prediction": "all x y z.((Worl(x) & Wolf(y) & Wolf(z)) -> WarnsOf(x,y,z)) Wolver(x))", "score": -1}
{"id": "eqasc_validation_538", "prediction": "all x y.((Beagle(x) & PitifulSound(y)) -> Howls(x,y))", "score": 0}
{"id": "eqasc_validation_538", "prediction": "(all x.(Beagle(x) -> HowlsPitifulSound(x)))", "score": 0}
{"id": "eqasc_validation_538", "prediction": "all x y z.((Galaxy(x) & Beagle(y) & PitifulSound(z)) -> Howls(y,z))", "score": 0}
{"id": "eqasc_validation_538", "prediction": "all x.(Beagle(x) -> Howls(x,MostPitifulSound))", "score": 0}
{"id": "eqasc_validation_538", "prediction": "exists x y.(BayBeagle(x) & PitifulSound(y) & Howls(x,y))", "score": 0}
{"id": "eqasc_validation_538", "prediction": "and somewhere a Beeagle HowlsMostPitifulSound.", "score": -1}
{"id": "eqasc_validation_538", "prediction": "(all x y.(Beagle(x) -> Howles(x,PitifulSound)))", "score": 0}
{"id": "eqasc_validation_538", "prediction": "(exists x.(Beagle(x) & HowlsPalicSound(x)))", "score": 0}
{"id": "eqasc_validation_538", "prediction": "(all x.(Beagle(x) -> Howl(x)))", "score": 0}
{"id": "eqasc_validation_538", "prediction": "all x y z.((Beagle(x) & PitifulSound(y) & Howls(x,y)) -> PitifulSound(x))", "score": 0}
{"id": "eqasc_validation_538", "prediction": "exists x.(Beagle(x) & HowlsPalpitifulSound(x))", "score": 0}
{"id": "eqasc_validation_538", "prediction": "((Beagle(x) & PitifulSound(x)) | Howls(x)))", "score": -1}
{"id": "eqasc_validation_538", "prediction": "exists x y.(Beagle(x) & HowlsPitifulSound(x))", "score": 0}
{"id": "eqasc_validation_539", "prediction": "all x y.((Wolf(x) & Wolf(y)) -> UsesSoundToWarn(x,y))", "score": 0}
{"id": "eqasc_validation_539", "prediction": "all x y.((Wolf(x) & Wolf(y) & Sound(z)) -> UsesToWarn(x,z))", "score": 0}
{"id": "eqasc_validation_539", "prediction": "all x y z.((Wolf(x) & Wolf(y) & Sound(z)) -> Use(x,z))", "score": 0}
{"id": "eqasc_validation_539", "prediction": "all x y z.((Wolf(x) & Sound(y) & Wolf(z)) -> (UsesToWarn(x,y,z) & Harm(x)))", "score": 0}
{"id": "eqasc_validation_539", "prediction": "all x y.((Wolf(x) & Wolf(y)) -> UsesSound(x,y))", "score": 0}
{"id": "eqasc_validation_539", "prediction": "all x y.((Whale(x) & Wolf(y)) -> UsesSound(x,y))", "score": 0}
{"id": "eqasc_validation_539", "prediction": "all x y z.((Wolf(x) & Wolf(y) & Sound(z) & Warn(z,y)) -> UsesToWarnAndWarn(x,y,z))", "score": 0}
{"id": "eqasc_validation_539", "prediction": "all x y z w.((Wolf(x) & Sound(y) & Wolf(z) & Hennessy(w)) -> UseSignToWarn(x,y,z))", "score": 0}
{"id": "eqasc_validation_539", "prediction": "all x y.((Wolf(x) & Wolf(y)) -> (UsesSoundBeforeWarning(x,y) & UsesSoundToWarn(x,y)))", "score": 0}
{"id": "eqasc_validation_539", "prediction": "all x y z.((Wolf(x) & Sound(y) & Wolf(z)) -> UsesToWarn(x,z))", "score": 0}
{"id": "eqasc_validation_539", "prediction": "all x y z w.((Wolf(x) & Sound(y) & Wolf(z)) -> UsesToWarn(x,y,z))", "score": 0}
{"id": "eqasc_validation_539", "prediction": "all x.(Wolf(x) -> (UsesSoundToWarnWolf(x) & Worm(x) & UsesSoundToWarn(x)))", "score": 0}
{"id": "eqasc_validation_540", "prediction": "all x.(Indris(x) -> (Group(x) & Weighful(x) & IdenticalHowls(x)))", "score": 0}
{"id": "eqasc_validation_540", "prediction": "all x.(IndrisGroup(x) -> CommunicateWithDeathefulAndDistinctiveHowls(x))", "score": 0}
{"id": "eqasc_validation_540", "prediction": "all x.((IndrisGroup(x) & MelodfulHowls(x) & DistinctiveHowls(x)) -> CommunicatesWith(x,y))", "score": 0}
{"id": "eqasc_validation_540", "prediction": "all x.(IndrisGroup(x) -> CommunicatesWithMeetfulAndSpecializedHowls(x))", "score": 0}
{"id": "eqasc_validation_540", "prediction": "all x.((Indris(x) & Mimoseful(x) & DistinctiveHowl(x)) -> CommunicatesWith(x,y))", "score": 0}
{"id": "eqasc_validation_540", "prediction": "all x.(Indris(x) -> (RememberfulHowl(x) & ParticularlyIndris(x)))", "score": 0}
{"id": "eqasc_validation_540", "prediction": "all x y z.((Group(x) & Indiris(y) & Howl(z)) -> CommunicatesMournfulAndDiscipline(x,y,z))", "score": 0}
{"id": "eqasc_validation_540", "prediction": "all x.(GroupOfIndris(x) -> CommunicateWithMelancholyAndDistinctiveHowls(x))", "score": 0}
{"id": "eqasc_validation_540", "prediction": "all x.(IndrisGroup(x) -> (Communicate(x,bael,mournful) & CommunicateTogether(x,divisible,bamboo)))", "score": 0}
{"id": "eqasc_validation_540", "prediction": "all x.((IndrisGroup(x) & MiestfulHowl(x) & DifficultHowl(x)) -> Communicate(x))", "score": 0}
{"id": "eqasc_validation_540", "prediction": "all x.(Indris(x) -> (CommunicatesWithMelancholy(x) & CommunicatesWithDistinctiveHowls(x)))", "score": 0}
{"id": "eqasc_validation_540", "prediction": "all x.((Indris(x) & mournfulHowl(x) & DistinctiveHowl(x)) -> Communicates(x))", "score": 0}
{"id": "eqasc_validation_540", "prediction": "all x.(IndrisGroup(x) -> CommunicatesWithMeetingAndTradictiveHowls(x))", "score": 0}
{"id": "eqasc_validation_540", "prediction": "all x.(Indris(x) -> CommunicatesWithMelodfulAndDisciplingHowls(x))", "score": 0}
{"id": "eqasc_validation_540", "prediction": "all x.(IndrisGroup(x) -> CommunicatesWithMournfulAndDiverseHowls(x))", "score": 0}
{"id": "eqasc_validation_540", "prediction": "all x.(IndrisGroup(x) -> CommunicatesMournfulAndDistinctiveHowls(x))", "score": 0}
{"id": "eqasc_validation_541", "prediction": "all x.(Wolf(x) -> UsesDistinctFormsOfCommunication(x))", "score": 0}
{"id": "eqasc_validation_541", "prediction": "all x y.((Wolf(x) & Communicator(y)) -> UsesDistinctForms(x,y))", "score": 0}
{"id": "eqasc_validation_541", "prediction": "all x.(Wolf(x) -> UsesDifferentFramesOfCommunication(x))", "score": 0}
{"id": "eqasc_validation_541", "prediction": "all x.(Wolf(x) -> UsesCommunication(x))", "score": 0}
{"id": "eqasc_validation_541", "prediction": "all x y.((Wolf(x) & FormOfCommunication(y)) -> Uses(x,y))", "score": 0}
{"id": "eqasc_validation_541", "prediction": "all x y z.((Wolf(x) & Communication(y) & Communication(z)) -> Use(x,y,z))", "score": 0}
{"id": "eqasc_validation_541", "prediction": "all x.(Wolf(x) -> UsesDistinctFramesOfCommunication(x))", "score": 0}
{"id": "eqasc_validation_541", "prediction": "all x.(Wolf(x) -> UsesDistinctForms(x))", "score": 0}
{"id": "eqasc_validation_541", "prediction": "all x.(Wolf(x) -> DistinctFormsOfCommunication(x))", "score": 0}
{"id": "eqasc_validation_542", "prediction": "all x y z.((Hosque(x) & HowlingCoyote(y) & Area(z) & JoinsIn(x,y)) -> ReverberatesWithNoise(z))", "score": 0}
{"id": "eqasc_validation_542", "prediction": "all x y.((CoyoteChorch(x) & Coyote(y) & JoinIn(x,y)) -> NoiseReverberates(x))", "score": 0}
{"id": "eqasc_validation_542", "prediction": "all x y z.((Coyote(x) & HowlingCoyote(y) & Area(z)) -> (JoinIn(x,y) & Reverberates(z)))", "score": 0}
{"id": "eqasc_validation_542", "prediction": "all x y.((Cyclist(x) & HowlingCoyote(y)) -> (JoinsIn(x,y) & WholeAreaReverberates(x)))", "score": 0}
{"id": "eqasc_validation_542", "prediction": "all x y.((Coyote(x) & HowlingCoyote(y)) -> (JoinsIn(x,y) & WholeAreaReverberatesWithNoise(x)))", "score": 0}
{"id": "eqasc_validation_542", "prediction": "all x.((ShowerCoyote(x) & CanYouBird(x)) -> (SeemsMuteIn(x) & ReverberatesWithNoise(x)))", "score": 0}
{"id": "eqasc_validation_542", "prediction": "all x y z.((Cooks(x) & Coyote(y) & Area(z)) -> (Combines(x,y) & ReverberatesWithNoise(x,z)))", "score": 0}
{"id": "eqasc_validation_542", "prediction": "all x y z.((HowlingCoyote(x) & Chorus(y) & Area(z) & JoinsIn(y,x)) -> ReverberatesWithNoise(z))", "score": 0}
{"id": "eqasc_validation_542", "prediction": "all x.((Nearly(x) & ChorusOfHowlingCoyote(x)) -> (JoinsIn(x) & WholeAreaReverbersWithNoise(x)))", "score": 0}
{"id": "eqasc_validation_542", "prediction": "all x.((Worship(x) & HowlingCoyote(x)) -> (Joins(x) & WholeAreaReverberatesWithNoise(x)))", "score": 0}
{"id": "eqasc_validation_542", "prediction": "all x y.((CoyoteChoir(x) & CoyoteWhatever(y)) -> (JoinsIn(x,y) & ReverbersWithNoise(x)))", "score": 0}
{"id": "eqasc_validation_542", "prediction": "all x y.((Cojoice(x) & HowlingCoyotes(x)) -> (JoinsIn(x) & WholeAreaReverberatesWithNoise(y)))", "score": 0}
{"id": "eqasc_validation_542", "prediction": "all x y z.((Choir(x) & HowlingCoyote(y) & Area(z)) -> (JumbersIn(y,z) & ReverberatesWithNoise(z,y)))", "score": 0}
{"id": "eqasc_validation_542", "prediction": "all x y.((Dozens(x) & HowlingCoyote(y)) -> (JauntsIn(x) & ReverberatesRain(y)))", "score": 0}
{"id": "eqasc_validation_542", "prediction": "all x y.((Rainforest(x) & Coyote(y) & Howling(y)) -> (Joins(x,y) & ReverberatesWithNoise(x)))", "score": 0}
{"id": "eqasc_validation_542", "prediction": "all x y z.((HecticFollowingCoyote(x) & Area(y) & HowlingCoyote(z)) -> (Emits(x,y) & ReverberatesWithNoise(y)))", "score": 0}
{"id": "eqasc_validation_543", "prediction": "all x y z.((Lark(x) & Wolf(y) & Wolf(z) & ReverberatingNumber(x) & Worm(y) & Wolf(z)) -> WarnsOthers(x,y,z))", "score": 0}
{"id": "eqasc_validation_543", "prediction": "all x y z w.((Hollow(x) & Wolf(y) & Wolf(z) & ReverberatingNoise(x,y) & Wolf(w)) -> WarnsAbout(y,z,w))", "score": 0}
{"id": "eqasc_validation_543", "prediction": "all x.((ReverberatingNoise(x) & WarnsOthers(x)) -> Rodents(x))", "score": 0}
{"id": "eqasc_validation_543", "prediction": "all x y z.((ReverberatingNoise(x) & Wolf(y) & Wolf(z)) -> Warns(x,y,z))", "score": 0}
{"id": "eqasc_validation_543", "prediction": "all x y.((Wolf(x) & Wolf(y)) -> (ReverberatingNeoderation(x) & Warns(x,y)))", "score": 0}
{"id": "eqasc_validation_543", "prediction": "all x y.((Wolf(x) & Wolf(y)) -> WarnsOthers(x,y))", "score": 0}
{"id": "eqasc_validation_543", "prediction": "all x y.((ReverberatingNast(x) & Wolf(y) & Wolf(z)) -> Warns(x,y,z))", "score": 0}
{"id": "eqasc_validation_543", "prediction": "all x y.((Wolf(x) & Wolf(y) & UsesReverberatingNissip(x,y)) -> Warns(x,y))", "score": 0}
{"id": "eqasc_validation_543", "prediction": "all x y.((ReverberatingNoise(x) & Wolf(y)) -> WarnsAnother(x,y))", "score": 0}
{"id": "eqasc_validation_543", "prediction": "all x.((ReverberatingNast(x) & Wolf(y)) -> UsedToWarn(x,y))", "score": 0}
{"id": "eqasc_validation_543", "prediction": "all x.((ReverberatingNoise(x) & Wolf(x)) -> Warns(x,wolf))", "score": 0}
{"id": "eqasc_validation_543", "prediction": "all x.(ReverberatingNoise(x) -> WarnWolf(x))", "score": 0}
{"id": "eqasc_validation_543", "prediction": "all x y.((ReverberatingNoise(x) & Wolf(y)) -> Warns(x,y))", "score": 0}
{"id": "eqasc_validation_543", "prediction": "all x y.((Wolf(x) & Wolf(y)) -> Warn(x,y))", "score": 0}
{"id": "eqasc_validation_543", "prediction": "all x y.((ReverberatingNoise(x) & Wolf(y)) -> WarnsBy(x,y))", "score": 0}
{"id": "eqasc_validation_543", "prediction": "all x y z.((None(x) & Wolf(y) & Wolf(z)) -> (UsedBy(y,z) & ReverberatingNebulas(x) & Warns(y,y)))", "score": 0}
{"id": "eqasc_validation_544", "prediction": "all x.(GreyWolf(x) -> LargestMemberOfCanineFamily(x))", "score": 0}
{"id": "eqasc_validation_544", "prediction": "all x.(GreyWolf(x) -> (LargestMember(x,CANineFamily)))", "score": 0}
{"id": "eqasc_validation_544", "prediction": "all x.(GrayWolf(x) -> LargestChildLife(x))", "score": 0}
{"id": "eqasc_validation_544", "prediction": "all x.(GrayWolf(x) -> LargestMemberOfCanineFamily(x))", "score": 0}
{"id": "eqasc_validation_544", "prediction": "all x.(GreyWolf(x) -> (LargestMemberOfCanineFamily(x,y)))", "score": 0}
{"id": "eqasc_validation_544", "prediction": "all x.(GreyWolf(x) -> LargestCareer(x))", "score": 0}
{"id": "eqasc_validation_544", "prediction": "all x.(Wolf(x) -> LargestMemberOfCanineFamily(x))", "score": 0}
{"id": "eqasc_validation_544", "prediction": "all x.(GrayWolf(x) -> LargestCarnivore(x))", "score": 0}
{"id": "eqasc_validation_544", "prediction": "all x.((Wolf(x) & LargestMemberOfCanineFamily(x)) -> Gray(x))", "score": 0}
{"id": "eqasc_validation_544", "prediction": ". MembersToTheCanineFamily(x) & GrayWolf(x))", "score": -1}
{"id": "eqasc_validation_545", "prediction": "all x y z.((Whatle(x) & Canine(y) & Canine(z)) -> Warns(y,z))", "score": 0}
{"id": "eqasc_validation_545", "prediction": "all x y.((Canine(x) & Canine(y) & Howling(x)) -> (WarnsOthers(y) & Uses(x,y)))", "score": 0}
{"id": "eqasc_validation_545", "prediction": "all x y.((Canine(x) & Animal(y)) -> HowlsToWarn(x,y))", "score": 0}
{"id": "eqasc_validation_545", "prediction": "all x y.((Canine(x) & Canine(y)) -> UsesToWarnOthers(x,y))", "score": 0}
{"id": "eqasc_validation_545", "prediction": "all x y.((Howling(x) & Canine(y)) -> Warning(y))", "score": 0}
{"id": "eqasc_validation_545", "prediction": "all x y zo.((HowlingRed(x) & Canine(y) & Animal(z)) -> WarningSons(x,y,z))", "score": -1}
{"id": "eqasc_validation_545", "prediction": "all x y.((Canine(x) & Canine(y)) -> (Howles(x,y) & WarnsOthers(y)))", "score": 0}
{"id": "eqasc_validation_545", "prediction": "all x y.((Canine(x) & Howl(y)) -> WarnOthers(x,y))", "score": 0}
{"id": "eqasc_validation_545", "prediction": "all x.(Howling(x) -> (Canine(x) & UsesToWarn(x,y)))", "score": 0}
{"id": "eqasc_validation_545", "prediction": "all x y z.((Canine(x) & Howling(y) & Animal(z)) -> (UsedByCanines(x,y) & Warns(y,z)))", "score": 0}
{"id": "eqasc_validation_545", "prediction": "all x y.((Canine(x) & Dog(y)) -> HowlingOnWarning(x,y))", "score": 0}
{"id": "eqasc_validation_545", "prediction": "all x y z.((Howling(x) & Canine(y) & Careful(z)) -> CanineWarning(y,z))", "score": 0}
{"id": "eqasc_validation_545", "prediction": "all x y z.((Howling(x) & Canine(y) & Intern(z)) -> WarnsOthersAboutHowling(y,z))", "score": 0}
{"id": "eqasc_validation_545", "prediction": "all x y.((Howling(x) & Canine(y)) -> WarnsOthers(y))", "score": 0}
{"id": "eqasc_validation_545", "prediction": "all x y.((Howling(x) & Canine(y)) -> WarnsOthers(x,y))", "score": 0}
{"id": "eqasc_validation_545", "prediction": "all x y z w.((Howling(x) & Canine(y) & Other(z) & UsesToWarn(x,y,z) & Animal(w)) -> WasUsedToWarn(y,z,w))", "score": 0}
{"id": "eqasc_validation_546", "prediction": "all x.(TheGoodRight(x) -> (Warning(x) | Warning(x)))", "score": 0}
{"id": "eqasc_validation_546", "prediction": "all x.((Warning(x) & Warning(x)) -> GoodRight(x))", "score": 0}
{"id": "eqasc_validation_546", "prediction": "all x.(Awakening(x) & Avertissement(x)) -> GoodPoorArea(x))", "score": -1}
{"id": "eqasc_validation_546", "prediction": "all x.(Warning(x) -> GoodRight(x))", "score": 0}
{"id": "eqasc_validation_546", "prediction": "all x.(Warning(x) & -Warning(x))", "score": 0}
{"id": "eqasc_validation_546", "prediction": "all x.((Waiting(x) | Warning(x)) & GoodRight(x)) -> IsBelow(x))", "score": -1}
{"id": "eqasc_validation_546", "prediction": "all x.(Warning(x) & Advise(x)) -> GoodRightArea(x))", "score": -1}
{"id": "eqasc_validation_546", "prediction": "all x.(Waiting(x) -> Precaution(x))", "score": 0}
{"id": "eqasc_validation_546", "prediction": "all x.((Warning(x) | Advise(x)) -> GoodRunning(x))", "score": 0}
{"id": "eqasc_validation_546", "prediction": "all x.(Warning(x) -> (GoodPurpose(x) | GoodPurpose(x)))", "score": 0}
{"id": "eqasc_validation_546", "prediction": "all x.(Warning(x) | Precaution(x)) -> GoodRight(x))", "score": -1}
{"id": "eqasc_validation_546", "prediction": "all x.((Warning(x) | Conveyance(x)) -> GoodRight(x))", "score": 0}
{"id": "eqasc_validation_546", "prediction": "all x.((Warning(x) | Consenting(x)) -> GoodRight(x))", "score": 0}
{"id": "eqasc_validation_546", "prediction": "all x.(Warning(x) -> The GoodPoorRight(x))", "score": -1}
{"id": "eqasc_validation_546", "prediction": "all x.(Warning(x) & WarningConstruction(x)) -> GoodRight(x))", "score": -1}
{"id": "eqasc_validation_546", "prediction": "all x.(Warning(x) | Conveyance(x)) -> GoodRight(x))", "score": -1}
{"id": "eqasc_validation_547", "prediction": "all x y.((Howling(x) & Wolf(y)) -> UsedToConvey(x,y))", "score": 0}
{"id": "eqasc_validation_547", "prediction": "all x y.((Howling(x) & Wolf(y)) -> UsedToConstrain(x,y))", "score": 0}
{"id": "eqasc_validation_547", "prediction": "all x.(Howling(x) -> UsesToGuardianWolf(x,Wolf))", "score": 0}
{"id": "eqasc_validation_547", "prediction": "all x y z.((Howling(x) & Wolf(y) & Wolf(z)) -> UsedToConstrainTo(x,y,z))", "score": 0}
{"id": "eqasc_validation_547", "prediction": "all x y.((Howling(x) & Wolf(y)) -> Conveys(x,y))", "score": 0}
{"id": "eqasc_validation_547", "prediction": "all x y.((Howling(x) & Wolver(y)) -> Concocts(x,y))", "score": 0}
{"id": "eqasc_validation_547", "prediction": "all x.(Wolf(x) -> (CausesWolf(x) & ByWolf(x)))", "score": 0}
{"id": "eqasc_validation_547", "prediction": "all x y.((Howling(x) & Wolf(y)) -> UsedToConsult(x,y))", "score": 0}
{"id": "eqasc_validation_547", "prediction": "all x y.(((Howling(x) & Wolf(y)) -> UsedToConstrain(x,y))", "score": -1}
{"id": "eqasc_validation_547", "prediction": "all x y z.((Howling(x) & Wolf(y) & Wolf(z)) -> (Consults(x,y,z) | Contains(x,y)))", "score": 0}
{"id": "eqasc_validation_547", "prediction": "all x y z.((Howling(x) & Wolf(y) & Wolf(z)) -> UsedToConstrain(x,y,z))", "score": 0}
{"id": "eqasc_validation_547", "prediction": "all x y.((Wolf(x) & Wolf(y)) -> (Caution(x,y) & UsefulToCoaner(x,y)))", "score": 0}
{"id": "eqasc_validation_547", "prediction": "all x y.((Howling(x) & Wolf(y)) -> (Caution(x,y) & Contains(x,y)))", "score": 0}
{"id": "eqasc_validation_548", "prediction": "all x.(CanisLupus(x) -> GreyWolf(x))", "score": 0}
{"id": "eqasc_validation_548", "prediction": "all x.(CanisLupus(x) -> ContainsGreyWolves(x))", "score": 0}
{"id": "eqasc_validation_548", "prediction": "(IsCanisLupus(i) & IncludesGrintWolf(i))", "score": 0}
{"id": "eqasc_validation_548", "prediction": "(NumberOfGrinnWolf(CanisLupus))", "score": 0}
{"id": "eqasc_validation_548", "prediction": "(EvenSpecies(CanisLupus) & GreyWolf(Canis))", "score": 0}
{"id": "eqasc_validation_548", "prediction": "all x y.((Canis(x) & GreyWolf(y)) -> Inhabits(x,y))", "score": 0}
{"id": "eqasc_validation_548", "prediction": "all x.(CanisLupus(x) -> (IncludesGrintWolfe(x) & WithIncludesGreyWolves(x)))", "score": 0}
{"id": "eqasc_validation_548", "prediction": "all x y.((CanisLupus(x) & GreyWolf(y)) -> Includes(x,y))", "score": 0}
{"id": "eqasc_validation_548", "prediction": "(exists x.(CanisLupus(x) & GreyWolf(x)) & Includes(x,Lupus))", "score": 0}
{"id": "eqasc_validation_548", "prediction": "all x.(CanisLupus(x) -> GreyWolfe(x))", "score": 0}
{"id": "eqasc_validation_548", "prediction": "(IncludesGrintWolf(Canis lupus)", "score": -1}
{"id": "eqasc_validation_548", "prediction": "all x.(CanisLupus(x) -> (IsGreyWolf(x) & IncludesWildWolf(x)))", "score": 0}
{"id": "eqasc_validation_548", "prediction": "all x.(CanisLupus(x) -> IncludesGreyWolfes(x))", "score": 0}
{"id": "eqasc_validation_548", "prediction": "all x.(CanisLupus(x) -> (FindsGrintWolfes(x) & IncludesWolfes(x) & IncludesWolfes(x)))", "score": 0}
{"id": "eqasc_validation_549", "prediction": "all x y z.((Howling(x) & Member(y) & CanisLupus(z)) -> HasWorry(x,y,z))", "score": 0}
{"id": "eqasc_validation_549", "prediction": "all x.(Howling(x) -> CanisLupus(x))", "score": 0}
{"id": "eqasc_validation_549", "prediction": "all x y.(CannisLupus(x) -> (UsedToWarn(x,y) & Canis(y)))", "score": 0}
{"id": "eqasc_validation_549", "prediction": "all x.(Howling(x) -> (UsedByCulcers(x) & WarnsOtherCulcers(x)))", "score": 0}
{"id": "eqasc_validation_549", "prediction": "all x y.((Member(x) & (CanisLupus(x) | CanisLupus(y))) -> Warns(x,y))", "score": 0}
{"id": "eqasc_validation_549", "prediction": "all x.(Howling(x) -> UsedToWarnOtherMembers(x,CannasLupus))", "score": 0}
{"id": "eqasc_validation_549", "prediction": "all x y.((Howling(x) & Member(y) & CanisLupus(y)) -> Warns(x,y))", "score": 0}
{"id": "eqasc_validation_549", "prediction": "all x y z.((Howling(x) & Member(y) & Member(z)) -> CanisLupus(y))", "score": 0}
{"id": "eqasc_validation_549", "prediction": "all x y.((CanisLupus(x) & Member(y)) -> Warns(x,y))", "score": 0}
{"id": "eqasc_validation_549", "prediction": "(AllegroCanisLupus(Howling,Canis) -> WarnsOther(Howling))", "score": 0}
{"id": "eqasc_validation_549", "prediction": "all x y.((Groove(x) & CanisLupus(y)) -> UsesToWarn(x,y,z))", "score": 0}
{"id": "eqasc_validation_549", "prediction": "all x y.((Howling(x) & Member(y) & CanisLupus(y)) -> UsesToWarnOrWorry(x,y))", "score": 0}
{"id": "eqasc_validation_549", "prediction": "all x y.((Howling(x) & Member(y)) -> UsedToWarn(x,y))", "score": 0}
{"id": "eqasc_validation_549", "prediction": "all x y z.((Howling(x) & Member(y) & Member(z)) -> Has(x,y,z))", "score": 0}
{"id": "eqasc_validation_549", "prediction": "(CanisLupus(x) & UsedToWarn(x))", "score": 0}
{"id": "eqasc_validation_549", "prediction": "all x y z.((Howling(x) & Species(y) & Member(z)) -> UsesToWarn(x,y,z))", "score": 0}
{"id": "eqasc_validation_550", "prediction": "all x y.((Wolf(x) & Howl(y)) -> CommunicatesUsingPitch(x,y))", "score": 0}
{"id": "eqasc_validation_550", "prediction": "all x y.((Wolf(x) & Pitch(y)) -> CommunicatesUsing(x,y))", "score": 0}
{"id": "eqasc_validation_550", "prediction": "all x.(Wolf(x) -> CommunicatesWith(x,TwoPitches,Clay,Pipes))", "score": 0}
{"id": "eqasc_validation_550", "prediction": "all x y z.((Wolf(x) & Howl(y) & HowlPitch(z)) -> Communicates(x,y,z))", "score": 0}
{"id": "eqasc_validation_550", "prediction": "all x.(Wolf(x) -> Communicates(x))", "score": 0}
{"id": "eqasc_validation_550", "prediction": "all x.(Wolf(x) -> Communicates(x,y))", "score": 0}
{"id": "eqasc_validation_550", "prediction": "all x.(Wolf(x) -> CommunicatesWithNearlyPieces(x))", "score": 0}
{"id": "eqasc_validation_550", "prediction": "all x.(Wolf(x) -> CommunicatesWith(x,y))", "score": 0}
{"id": "eqasc_validation_550", "prediction": "all x.(Wolf(x) -> CommunicatesUsingTwoPitches(x))", "score": 0}
{"id": "eqasc_validation_550", "prediction": "all x y z.((Wolf(x) & Howl(y) & PitchPitch(z)) -> Communicate(x,y,z))", "score": 0}
{"id": "eqasc_validation_550", "prediction": "all x y.((Wolf(x) & Howl(y)) -> CommunicatesWithMe(x,y))", "score": 0}
{"id": "eqasc_validation_550", "prediction": "all x y.((Wolf(x) & Wayl(y)) -> CommunicatesMiddlePitch(x,y))", "score": 0}
{"id": "eqasc_validation_550", "prediction": "all x.(Wolf(x) -> CommunicatesWithTwoPitches(x))", "score": 0}
{"id": "eqasc_validation_550", "prediction": "all x y.((Wolf(x) & Howl(y)) -> CommunicatesWithPitch(x,y))", "score": 0}
{"id": "eqasc_validation_550", "prediction": "all x.(Wolf(x) -> CommunicatesWithWolves(x))", "score": 0}
{"id": "eqasc_validation_550", "prediction": "all x.(Wolf(x) -> CommunicatesUsingVisiblePitch(x))", "score": 0}
{"id": "eqasc_validation_551", "prediction": "all x y z.((Wolf(x) & Wolf(y) & Plough(z)) -> WarnsByUsingPitch(x,y,z))", "score": 0}
{"id": "eqasc_validation_551", "prediction": "all x y.((Wolf(x) & Wolf(y) & UsesPitch(x,y)) -> WarnsByUsingPitch(x,y))", "score": 0}
{"id": "eqasc_validation_551", "prediction": "all x y.((Wolf(x) & Wolf(y) & UsesPitch(x,y)) -> WarnsThrough(x,y))", "score": 0}
{"id": "eqasc_validation_551", "prediction": "all x y.((Whale(x) & Wolf(y) & Pitch(y) & UsesPitches(x,y)) -> WarnAndShow(x,y))", "score": 0}
{"id": "eqasc_validation_551", "prediction": "all x y z.((Wolf(x) & Wolf(y) & Pitch(z) & UsesPitches(z)) -> WarnsByUsingPitchTargets(x,y,z))", "score": 0}
{"id": "eqasc_validation_551", "prediction": "all x y.((Wolf(x) & Wolf(y)) -> WarnsByUsingPitches(x,y))", "score": 0}
{"id": "eqasc_validation_551", "prediction": "all x.(Wolf(x) -> WarnsOthers(x)) & useesPitches(x,e,f))", "score": -1}
{"id": "eqasc_validation_551", "prediction": "all x y z.((Wild(x) & Wolf(y) & Pitcher(z)) -> WarnsByVisittingPitches(x,y,z))", "score": 0}
{"id": "eqasc_validation_551", "prediction": "all x y.((Wolf(x) & Wolf(y)) -> Warns(x,y))", "score": 0}
{"id": "eqasc_validation_551", "prediction": "all x y z.((Wolf(x) & Wolf(y) & Pitches(z)) -> WarnsByUsingPitch(x,y,z))", "score": 0}
{"id": "eqasc_validation_551", "prediction": "all x y.(Wolf(x) -> (WarnsWolf(y) & UsesDifferentPitches(x,y)))", "score": 0}
{"id": "eqasc_validation_551", "prediction": "all x y z.((Wolf(x) & Wolf(y) & Pitch(z) & UsedToWarn(x,y,z)) -> Warns(x,y))", "score": 0}
{"id": "eqasc_validation_551", "prediction": "all x y.((Whale(x) & Wolf(y)) -> Warns(x,y))", "score": 0}
{"id": "eqasc_validation_551", "prediction": "all x y z.((Wolf(x) & Wolf(y) & Pitch(z) & UsesPitch(x,y,z)) -> WarnsWorlsByTwoPitches(x,y,z))", "score": 0}
{"id": "eqasc_validation_552", "prediction": "all x.(CanisLupusHowl(x) -> CanisLupusHowl(x))", "score": 0}
{"id": "eqasc_validation_552", "prediction": "canis lupus howl (Canis) & Howl(Canis))", "score": -1}
{"id": "eqasc_validation_552", "prediction": "all x.(AlienLupusHowl(x) -> CanisLupusHowl(x))", "score": 0}
{"id": "eqasc_validation_552", "prediction": "all x.((CanisLupusHowl(x) & CanisLupusHowl(x)) -> Howl(x))", "score": 0}
{"id": "eqasc_validation_552", "prediction": "canis lupus howl (Lupus Howl(Lupus) & Canis Lupus Howl(Lupus))", "score": -1}
{"id": "eqasc_validation_552", "prediction": "exists x y z.(CanisLupusHowl(x) & CanisLupusHowl(y) & CanisLupusHowl(z) & CanisHowl(z) & CanisLupusHowl(y) & Howl(z) & Howl(y) & Howl(w))", "score": 0}
{"id": "eqasc_validation_552", "prediction": "all x.(CallCanisLupusHowl(x) -> CanisLupusHowl(x))", "score": 0}
{"id": "eqasc_validation_552", "prediction": "all x((CanisLupusHowl(x) & CanisLupusHowl(x)) -> CanisLupusHowl(x))", "score": 0}
{"id": "eqasc_validation_552", "prediction": "canis lupus howl (canis lupus howl))", "score": -1}
{"id": "eqasc_validation_552", "prediction": "all x y.((Canis(x) & LupusHowl(y)) -> CanisLupusHowl(x,y))", "score": 0}
{"id": "eqasc_validation_552", "prediction": "all x y z.((CanisLupusHowl(x) & CanisLupusHowl(y) & Howl(z)) -> (CanisLupusHowl(y) & CanisHowl(z)))", "score": 0}
{"id": "eqasc_validation_552", "prediction": "all x.((CanisLupusHowl(x) & CanisLupusHowl(x)) -> CanisLupusHowl(x))", "score": 0}
{"id": "eqasc_validation_553", "prediction": "all x y.((Wolf(x) & WildCanine(y)) -> DistinctedBySize(x,y))", "score": 0}
{"id": "eqasc_validation_553", "prediction": "all x y z.((Wolf(x) & WildCanine(z)) -> DistinctBySize(x,y,z))", "score": 0}
{"id": "eqasc_validation_553", "prediction": "all x.(Wolf(x) -> Distinct(x,wildCanine))", "score": 0}
{"id": "eqasc_validation_553", "prediction": "all x.(Wolf(x) -> (Distinct(x,y) & WildCanine(y)))", "score": 0}
{"id": "eqasc_validation_553", "prediction": "all x y.((Wolf(x) & Canine(y)) -> Distinct(x,y))", "score": 0}
{"id": "eqasc_validation_553", "prediction": "all x y.((Wolf(x) & WildCanine(y)) -> DistinctInSize(x,y))", "score": 0}
{"id": "eqasc_validation_553", "prediction": "all x.(Wolf(x) -> DistinctedBySizing(x))", "score": 0}
{"id": "eqasc_validation_553", "prediction": "all x.(Wolf(x) -> DistinctedBySize(x))", "score": 0}
{"id": "eqasc_validation_553", "prediction": "all x.(Wolf(x) -> DistinguishedBySize(x))", "score": 0}
{"id": "eqasc_validation_553", "prediction": "all x.(Wolf(x) -> (Variety(x) & WildCanine(x) & Size(x)))", "score": 0}
{"id": "eqasc_validation_553", "prediction": "all x y.((Wolf(x) & WildCanine(y)) -> DistinctBySize(x,y))", "score": 0}
{"id": "eqasc_validation_553", "prediction": "all x.(Wolf(x) -> (DistinuedBySize(x) & WildCanine(x)))", "score": 0}
{"id": "eqasc_validation_553", "prediction": "all x.(Wolf(x) -> (DistinctBySize(x,y) & WildCanine(x)))", "score": 0}
{"id": "eqasc_validation_553", "prediction": "all x.(Wolf(x) -> Distinct(x,AlternativeSize,Wolf))", "score": 0}
{"id": "eqasc_validation_553", "prediction": "all x.(Wolves(x) -> DistinctedFromWildCaninesBySize(x))", "score": 0}
{"id": "eqasc_validation_554", "prediction": "all x y.((RoadCanine(x) & WildCanine(y)) -> UsesHowlingToWarnOthers(x,y))", "score": 0}
{"id": "eqasc_validation_554", "prediction": "all x.(WildCanine(x) -> (UsesHowling(x) & WarnsButories(x)))", "score": 0}
{"id": "eqasc_validation_554", "prediction": "all x.(WildCanine(x) -> (WelcomesHowling(x) & WarnsOthers(x)))", "score": 0}
{"id": "eqasc_validation_554", "prediction": "all x y.((WildCanine(x) & Howl(x)) -> UsesToWarn(x,y))", "score": 0}
{"id": "eqasc_validation_554", "prediction": "all x.(WildCanine(x) -> (UsesHowling(x) & WarnsOthers(x)))", "score": 0}
{"id": "eqasc_validation_554", "prediction": "all x y.((WildCanine(x) & Howling(y)) -> WarnsOthersAlways(x,y))", "score": 0}
{"id": "eqasc_validation_554", "prediction": "all x.(WildCanine(x) -> UsesHowlingToWarn(x))", "score": 0}
{"id": "eqasc_validation_554", "prediction": "all x y z.((RoadCanine(x) & Howling(y) & Coward(z)) -> UsesToWarn(x,y,z))", "score": 0}
{"id": "eqasc_validation_554", "prediction": "all x y.((WildCanine(x) & Howling(y)) -> UsesToWarn(x,y))", "score": 0}
{"id": "eqasc_validation_554", "prediction": "all x y.((WildCanine(x) & Howling(y)) -> UsedToWarn(x,y))", "score": 0}
{"id": "eqasc_validation_554", "prediction": "all x y.((WildCanine(x) & Howling(y)) -> Warns(x,y))", "score": 0}
{"id": "eqasc_validation_554", "prediction": "all x y.((WildCanine(x) & Howling(y)) -> WarnsOthers(x,y))", "score": 0}
{"id": "eqasc_validation_554", "prediction": "all x.(WildCanine(x) -> UsesHowlingToWarmOthers(x))", "score": 0}
{"id": "eqasc_validation_554", "prediction": "all x.(WildCanine(x) & UsesHowlingToWarn(x)) -> Warns(x))", "score": -1}
{"id": "eqasc_validation_554", "prediction": "all x.(WildCanine(x) -> UsesHowlingToWarnOthers(x))", "score": 0}
{"id": "eqasc_validation_555", "prediction": "All x.(Warning(x) -> MeansDanger(x))", "score": -1}
{"id": "eqasc_validation_555", "prediction": "Warning Warning means danger.", "score": -1}
{"id": "eqasc_validation_555", "prediction": "Warning Warning Means(x)", "score": -1}
{"id": "eqasc_validation_555", "prediction": "Warning Warning(Warning) -> MeansDanger(Warning))", "score": -1}
{"id": "eqasc_validation_555", "prediction": "Warning Warning (Warning(Warning))", "score": -1}
{"id": "eqasc_validation_555", "prediction": "(Cardio(Warning) & MeansDangerous(Warning))", "score": 0}
{"id": "eqasc_validation_555", "prediction": "all x.(WarningWarning(x) -> MeansDanger(x))", "score": 0}
{"id": "eqasc_validation_555", "prediction": "Warning Warning MeansDanger(x)", "score": -1}
{"id": "eqasc_validation_555", "prediction": "Warning Warning (Warning) -> Means(Warning))", "score": -1}
{"id": "eqasc_validation_555", "prediction": "(Warning(Warning) & Meaning(Warning))", "score": 0}
{"id": "eqasc_validation_555", "prediction": "(WarningWarning(Warning) & meansDanger(Warning))", "score": 0}
{"id": "eqasc_validation_555", "prediction": "Warning Warning MeansDanger(w).", "score": -1}
{"id": "eqasc_validation_555", "prediction": "(Warning(Warning) -> MeansDanger(Warning))", "score": 0}
{"id": "eqasc_validation_556", "prediction": "all x y z.((Wolf(x) & Danger(y) & Pathology(z)) -> HowlsWhen(x,y,z))", "score": 0}
{"id": "eqasc_validation_556", "prediction": "all x y.((Wolf(x) & Danger(y)) -> HowlsWhenThere(x,y))", "score": 0}
{"id": "eqasc_validation_556", "prediction": "all x y.(((Wolf(x) & Danger(y)) -> Howls(x))", "score": -1}
{"id": "eqasc_validation_556", "prediction": "all x y z.((Wolf(x) & Danger(y) & Distant(z)) -> Howls(x))", "score": 0}
{"id": "eqasc_validation_556", "prediction": "all x y z.((Wolf(x) & Danger(y) & Hazard(z) & In(x,y)) -> Howls(x,y,z))", "score": 0}
{"id": "eqasc_validation_556", "prediction": "all x.((Wolf(x) & HasDangerous(x)) -> Howl(x))", "score": 0}
{"id": "eqasc_validation_556", "prediction": "all x.((Wolf(x) & Danger(x)) -> Howls(x))", "score": 0}
{"id": "eqasc_validation_556", "prediction": "all x y.((Wolf(x) & Warning(y)) -> HowlsWhenPanic(x,y))", "score": 0}
{"id": "eqasc_validation_556", "prediction": "all x y z.((Wolf(x) & Danger(y) & Danger(z)) -> Howls(x,y,z))", "score": 0}
{"id": "eqasc_validation_556", "prediction": "all x y.((Wolf(x) & Danger(y)) -> Howls(x))", "score": 0}
{"id": "eqasc_validation_556", "prediction": "all x y.((Wolf(x) & Danger(y)) -> Howls(x,y))", "score": 0}
{"id": "eqasc_validation_556", "prediction": "all x y.((Wolf(x) & Danger(y)) -> HowlsWhen(x,y))", "score": 0}
{"id": "eqasc_validation_556", "prediction": "all x.((Worm(x) & InWarmage(x,y)) -> Howls(x))", "score": 0}
{"id": "eqasc_validation_556", "prediction": "all x y.((Whale(x) & Direction(y)) -> Howls(x))", "score": 0}
{"id": "eqasc_validation_557", "prediction": "the underlying social structure.", "score": -1}
{"id": "eqasc_validation_557", "prediction": "all x.(Wolf(x) -> Social(x))", "score": 0}
{"id": "eqasc_validation_557", "prediction": "all x y.((Wolf(x) & (Person(y) | Social(x))) -> Wolf(x))", "score": 0}
{"id": "eqasc_validation_557", "prediction": "all x.(Wolf(x) -> (Social(x) & LikeSomeone(x)))", "score": 0}
{"id": "eqasc_validation_557", "prediction": "(All x y.((Wolf(x) & Person(y)) -> Social(x)))", "score": -1}
{"id": "eqasc_validation_557", "prediction": "all x.((Wolf(x) & Human(x)) -> Social(x))", "score": 0}
{"id": "eqasc_validation_557", "prediction": "All x.(Wolf(x) -> Social(x))", "score": -1}
{"id": "eqasc_validation_558", "prediction": "all x y.((Meaning(x) & SocialAnimal(y)) -> Warns(x,y))", "score": 0}
{"id": "eqasc_validation_558", "prediction": "all x.(Howling(x) -> WarnsAudiences(x,socialAnimal))", "score": 0}
{"id": "eqasc_validation_558", "prediction": "all x.(Howling(x) -> (WarnsDissociativeAnimals(x) & UsesToWarnSEOps(x)))", "score": 0}
{"id": "eqasc_validation_558", "prediction": "all x y.((Howling(x) & SocialAnimal(y)) -> Warn(x,y))", "score": 0}
{"id": "eqasc_validation_558", "prediction": "all x y.((Howling(x) & SocialAnimal(y)) -> UsedToWarn(x,y))", "score": 0}
{"id": "eqasc_validation_558", "prediction": "all x y z.((Howling(x) & SocialAnimal(y) & SocialAnimal(z)) -> UsedToWarn(x,y,z))", "score": 0}
{"id": "eqasc_validation_558", "prediction": "all x y.((Howling(x) & SocialAnimal(y)) -> WarnsSecretAnimals(x,y))", "score": 0}
{"id": "eqasc_validation_558", "prediction": "all x y.((Howling(x) & SocialAnimal(y)) -> Warns(x,y))", "score": 0}
{"id": "eqasc_validation_558", "prediction": "all x.(Howling(x) -> (UsedToWarnSocialAnimals(x) & HarmsSocialAnimals(x)))", "score": 0}
{"id": "eqasc_validation_558", "prediction": "all x y.((Howling(x) & SocialAnimal(y)) -> (WarnsHirst(x,y) & SocialAnimal(z) & SeemsFamiliar(x,z)))", "score": 0}
{"id": "eqasc_validation_558", "prediction": "all x y.((Organism(x) & SocialAnimal(y)) -> UsedToWarn(x,y))", "score": 0}
{"id": "eqasc_validation_558", "prediction": "all x y z w.((Howling(x) & Animal(y) & Animal(z) & SocialAnimal(w)) -> (Warns(x,z,w) | Harkens(x,z,w)))", "score": 0}
{"id": "eqasc_validation_559", "prediction": "all x y z.((Sandpaper(x) & WoodenObject(y) & Sandpaper(z)) -> (Smooth(x,y) | Smooth(x,z)))", "score": 0}
{"id": "eqasc_validation_559", "prediction": "all x y z.((Sandpaper(x) & WoodenObject(y) & WoodenObject(z)) -> Smooth(x,y))", "score": 0}
{"id": "eqasc_validation_559", "prediction": "all x.(Sandpaper(x) -> UsedToSmoothWoodenObjects(x))", "score": 0}
{"id": "eqasc_validation_559", "prediction": "all x.(Sandpaper(x) -> (SmoothWoodenObjects(x) & UsesSandpaper(x)))", "score": 0}
{"id": "eqasc_validation_559", "prediction": "all x y.((Sandpaper(x) & WoodenObject(y)) -> Smooth(x,y))", "score": 0}
{"id": "eqasc_validation_559", "prediction": "all x.(Sandpaper(x) -> SmoothWoodenObjects(x))", "score": 0}
{"id": "eqasc_validation_559", "prediction": "all x y.((Sandpaper(x) & WoodenObject(y)) -> Smooth.(SandpaperWoodenObject(y)))", "score": -1}
{"id": "eqasc_validation_559", "prediction": "all x y.((Sandpaper(x) & WoodenObject(y)) -> SmoothOf(x,y))", "score": 0}
{"id": "eqasc_validation_559", "prediction": "all x y.((Sandpaper(x) & WoodenObject(y,x)) -> SmoothAndEasy(x))", "score": 0}
{"id": "eqasc_validation_559", "prediction": "all x.(Sandpaper(x) -> SmoothwoodObjects(x))", "score": 0}
{"id": "eqasc_validation_559", "prediction": "all x y.((Sandpaper(x) & WoodenObject(y)) -> UsedToSmooth(x,y))", "score": 0}
{"id": "eqasc_validation_559", "prediction": "all x y.((Sandpaper(x) & WoodenObject(y)) -> SmoothTo(x,y))", "score": 0}
{"id": "eqasc_validation_560", "prediction": "all x.(Dream(x) -> Abrasive(x))", "score": 0}
{"id": "eqasc_validation_560", "prediction": "all x.(Dirt(x) -> (Abrasive(x) & Sandpaper(x)))", "score": 0}
{"id": "eqasc_validation_560", "prediction": "all x.(Drit(x) -> (Abrasive(x) & Sandpaper(x)))", "score": 0}
{"id": "eqasc_validation_560", "prediction": "all x.(Dirt(x) -> (AbrasivelikeSandpaper(x)))", "score": 0}
{"id": "eqasc_validation_560", "prediction": "all x y.((Dream(x) & Sandpaper(y)) -> Abrasive(x,y))", "score": 0}
{"id": "eqasc_validation_560", "prediction": "all x.(Dirt(x) -> AbrasivelikeSandpaper(x))", "score": 0}
{"id": "eqasc_validation_560", "prediction": "all x y.((Dire(x) & Sandpaper(y)) -> Abrasive(x,y))", "score": 0}
{"id": "eqasc_validation_560", "prediction": "all x y.((Dirt(x) & Sandpaper(y)) -> Abrasive(x))", "score": 0}
{"id": "eqasc_validation_560", "prediction": "all x.(Dire(x) -> Abrasive(x))", "score": 0}
{"id": "eqasc_validation_560", "prediction": "all x.(Dry(x) -> (Abrasive(x) & Sandpaper(x)))", "score": 0}
{"id": "eqasc_validation_560", "prediction": "all x y.((Dirt(x) & Sandpaper(y)) -> Abrasive(x,y))", "score": 0}
{"id": "eqasc_validation_560", "prediction": "all x.(Drill(x) -> (Abrasive(x) & Sandpaper(x)))", "score": 0}
{"id": "eqasc_validation_561", "prediction": "all x.(Abrasive(x) -> UsedToSmoothWoodenObjects(x))", "score": 0}
{"id": "eqasc_validation_561", "prediction": "all x.(Abrasive(x) -> SurfacesWoodenObjects(x))", "score": 0}
{"id": "eqasc_validation_561", "prediction": "all x y.((Abrasive(x) & WoodenObject(y)) -> Smooth(x,y))", "score": 0}
{"id": "eqasc_validation_561", "prediction": "all x y.((Abrasive(x) & WoodenObject(y)) -> UsefulForSmoothness(x,y))", "score": 0}
{"id": "eqasc_validation_561", "prediction": "all x y.((Abrasive(x) & WoodenObject(y)) -> UsedToSmooth(x,y))", "score": 0}
{"id": "eqasc_validation_561", "prediction": "all x.(Abrasive(x) -> SmoothsWoodenObjects(x))", "score": 0}
{"id": "eqasc_validation_561", "prediction": "all x y z.((Abrasive(x) & WoodenObject(y) & (Smooth(z) | Smooth(z))))", "score": 0}
{"id": "eqasc_validation_561", "prediction": "all x.(Abrasive(x) -> SmoothWoodenObject(x))", "score": 0}
{"id": "eqasc_validation_561", "prediction": "all x.(Abrasive(x) -> SmoothwoodenObjects(x))", "score": 0}
{"id": "eqasc_validation_561", "prediction": "all x.(Abrasive(x) -> SmoothWindowObjects(x))", "score": 0}
{"id": "eqasc_validation_561", "prediction": "all x.(Abrasive(x) -> SmoothWooden(x))", "score": 0}
{"id": "eqasc_validation_561", "prediction": "all x.(Abrasive(x) -> SmoothHot WoodenObjects(x))", "score": -1}
{"id": "eqasc_validation_561", "prediction": "all x y.((Abrasive(x) & WoodenObject(y)) -> AppliedTo(x,y))", "score": 0}
{"id": "eqasc_validation_561", "prediction": "all x.(Abrasive(x) -> SmoothsWoodenOfObjects(x))", "score": 0}
{"id": "eqasc_validation_562", "prediction": "all x y.((PaveementSmoothness(x) & Roughness(y)) -> LackOf(x,y))", "score": 0}
{"id": "eqasc_validation_562", "prediction": "all x.(PavementShallowness(x) -> LackOfRoughness(x))", "score": 0}
{"id": "eqasc_validation_562", "prediction": "all x.(PaveementSmoothness(x) -> LackOfRoughness(x))", "score": 0}
{"id": "eqasc_validation_562", "prediction": "all x.(PavementSmoothness(x) -> LackOfRoughness(x))", "score": 0}
{"id": "eqasc_validation_562", "prediction": "all x y.((PavementSmoothness(x) & PavementRoughness(y)) -> LackOfRoughness(x))", "score": 0}
{"id": "eqasc_validation_562", "prediction": "all x.(PavémentSmoothness(x) -> LackOfRoughness(x))", "score": 0}
{"id": "eqasc_validation_562", "prediction": "all x.(VehicleShapedness(x) -> LackOfRoughness(x))", "score": 0}
{"id": "eqasc_validation_562", "prediction": "all x.((PavementShapedness(x) & LackOfRoughness(x)) -> Smoothness(x))", "score": 0}
{"id": "eqasc_validation_562", "prediction": "all x.(PavementSmoothness(x) -> -Roughness(x))", "score": 0}
{"id": "eqasc_validation_563", "prediction": "all x.(Sandpaper(x) -> RemovesRoughness(x))", "score": 0}
{"id": "eqasc_validation_563", "prediction": "all x y.((Sandpaper(x) & Roughness(y)) -> Removes(x,y))", "score": 0}
{"id": "eqasc_validation_563", "prediction": "all x.((Sandpaper(x) & RemovesRoughness(x)) -> UsedToRemoveRoughness(x))", "score": 0}
{"id": "eqasc_validation_563", "prediction": "all x.(Sandpaper(x) -> RemoveRoughness(x))", "score": 0}
{"id": "eqasc_validation_563", "prediction": "all x.(Sandpaper(x) -> RemoverToRoughness(x))", "score": 0}
{"id": "eqasc_validation_563", "prediction": "all x y.((Sandpaper(x) & Rigness(y)) -> Removes(x,y))", "score": 0}
{"id": "eqasc_validation_563", "prediction": "all x y.((Sandpaper(x) & Roughness(y)) -> Remove (Meaning(x,y) & Remove(x,y)))", "score": -1}
{"id": "eqasc_validation_563", "prediction": "all x.(Sandpaper(x) -> (RemovesRoughness(x) & RemovesRoughness(x)))", "score": 0}
{"id": "eqasc_validation_563", "prediction": "all x.((Sandpaper(x) & -Roughness(y)) -> Removes(x,y))", "score": 0}
{"id": "eqasc_validation_563", "prediction": "all x y.((SandPaper(x) & Roughness(y)) -> Removes(x,y))", "score": 0}
{"id": "eqasc_validation_564", "prediction": "all x.((CasualLook(x) & WoodenPicnicTable(x)) -> CasualLook(x))", "score": 0}
{"id": "eqasc_validation_564", "prediction": "all x.((CasualLook(x) & UsesWoodenPicnicTable(x)) -> CasualLook(x))", "score": 0}
{"id": "eqasc_validation_564", "prediction": "all x.((ColorfulLook(x) & UsesWoodenPicnicTable(x)) -> Casual(x))", "score": 0}
{"id": "eqasc_validation_564", "prediction": "all x.(CafelLook(x) -> (BetweenCozy(x) & UsesWoodenPicnicTable(x)))", "score": 0}
{"id": "eqasc_validation_564", "prediction": "all x.((PicnicTable(x) & CasualLook(x)) -> UsesWooden(x))", "score": 0}
{"id": "eqasc_validation_564", "prediction": "all x.((CafaroLook(x) & UsesWoodenPicnicTable(x)) -> Casual(x))", "score": 0}
{"id": "eqasc_validation_564", "prediction": "(ForCasualLook(WoodenPicnicTable))", "score": 0}
{"id": "eqasc_validation_564", "prediction": "all x.((Costume(x) & WoodenPicnicTable(x)) -> CasualLook(x))", "score": 0}
{"id": "eqasc_validation_564", "prediction": "all x y z.((PicnicTable(x) & CasualLook(y) & UsedFor(x,z)) -> UsesWooden(z))", "score": 0}
{"id": "eqasc_validation_564", "prediction": "all x.((WoodenPicnicTable(x) & CasualLook(x)) -> Uses(x,y))", "score": 0}
{"id": "eqasc_validation_564", "prediction": "all x.((NiceLook(x) & UsesWoodenPicnicTable(x)) -> CasualLook(x))", "score": 0}
{"id": "eqasc_validation_564", "prediction": "(CafefulLook(x) -> TryUsingWoodenPicnicTable(x))", "score": 0}
{"id": "eqasc_validation_564", "prediction": "all x.((ChildrenYouGet(x)) -> UsesWoodenPicnicTable(x))", "score": 0}
{"id": "eqasc_validation_564", "prediction": "all x y z.((Stick-Off-WoodenPicnicTable(x) & CasualLook(y) & WoodenPicnicTable(z)) -> Uses(x,y,z))", "score": -1}
{"id": "eqasc_validation_564", "prediction": "all x.((Targets(x) & CasualLook(x)) -> UsesWoodenPicnicTable(x))", "score": 0}
{"id": "eqasc_validation_565", "prediction": "all x.(Sandpaper(x) -> CanBeUsedToSmoothTables(x))", "score": 0}
{"id": "eqasc_validation_565", "prediction": "all x y.((Sandpaper(x) & Table(y)) -> Smooth(x,y))", "score": 0}
{"id": "eqasc_validation_565", "prediction": "all x.(Sandpaper(x) -> SmoothTables(x))", "score": 0}
{"id": "eqasc_validation_565", "prediction": "all x.(Sandpaper(x) -> Smoothtable(x))", "score": 0}
{"id": "eqasc_validation_565", "prediction": "all x y.((Sandpaper(x) & Table(y)) -> Smooth(y))", "score": 0}
{"id": "eqasc_validation_565", "prediction": "all x.(Sandpaper(x) -> CanSmoothTables(x))", "score": 0}
{"id": "eqasc_validation_565", "prediction": "all x.(Sandpaper(x) -> SmoothsTables(x))", "score": 0}
{"id": "eqasc_validation_565", "prediction": "all x y.((Sandpaper(x) & Table(y)) -> Smooth(x,y)))", "score": -1}
{"id": "eqasc_validation_565", "prediction": "all x.(Sandpaper(x) -> Smoothtables(x))", "score": 0}
{"id": "eqasc_validation_566", "prediction": "all x.((Sandpaper(x) & RemovesPaint(x)) -> Uses(x,p))", "score": 0}
{"id": "eqasc_validation_566", "prediction": "all x.(RemovePaint(x) -> UseSandpaper(x))", "score": 0}
{"id": "eqasc_validation_566", "prediction": "all x.((Sandpaper(x) & Use(x)) -> RemovesPaint(x))", "score": 0}
{"id": "eqasc_validation_566", "prediction": "all x.((Sandpaper(x) & RemovesPaint(x)) -> Uses(x,y))", "score": 0}
{"id": "eqasc_validation_566", "prediction": "all x y.((Sandpaper(x) & Paint(y)) -> Removes(x,y))", "score": 0}
{"id": "eqasc_validation_566", "prediction": "all x.((Sandpaper(x) & RemovePaint(x)) -> Use(x))", "score": 0}
{"id": "eqasc_validation_566", "prediction": "all x.((Sandpaper(x) & RemovePaint(x)) -> Uses(x,y))", "score": 0}
{"id": "eqasc_validation_566", "prediction": "all x.((Paint(x) & Sandpaper(x)) -> Removes(x))", "score": 0}
{"id": "eqasc_validation_566", "prediction": "all x y.((Paint(x,y) & Sandpaper(y)) -> RemovePaint(x))", "score": 0}
{"id": "eqasc_validation_566", "prediction": "all x y.((Paint(x) & Sandpaper(y)) -> Removes(x,y))", "score": 0}
{"id": "eqasc_validation_566", "prediction": "(UsesSandpaperToRemovePaint(x))", "score": 0}
{"id": "eqasc_validation_566", "prediction": "all x.((Sandpaper(x) & RemovePaint(x)) -> Uses(x,Sandpaper))", "score": 0}
{"id": "eqasc_validation_566", "prediction": "all x.((Painting(x) & Sandpaper(x)) -> Removes(x,Paint))", "score": 0}
{"id": "eqasc_validation_567", "prediction": "all x.(Sandpaper(x) -> RemovesPaint(x))", "score": 0}
{"id": "eqasc_validation_567", "prediction": "all x.(SandPaper(x) -> RemovesPaint(x))", "score": 0}
{"id": "eqasc_validation_567", "prediction": "all x y.((Sandpaper(x) & Paint(y)) -> Removes(x,y))", "score": 0}
{"id": "eqasc_validation_567", "prediction": "all x.(Sandpaper(x) -> RemovePaint(x))", "score": 0}
{"id": "eqasc_validation_568", "prediction": "all x.((Object(x) & WoodenTable(x)) -> MadeUpOfMolecules(x))", "score": 0}
{"id": "eqasc_validation_568", "prediction": "all x y.((Object(x) & WoodenTable(y)) -> Molecule(x))", "score": 0}
{"id": "eqasc_validation_568", "prediction": "all x y.((Object(x) & WoodenTable(y)) -> (MadeUpOfMolecules(x) & VibrationToCreateMass(x,y)))", "score": 0}
{"id": "eqasc_validation_568", "prediction": "all x.((Object(x) & WoodenTable(x)) -> (MadeOfMoleculars(x) & Vibrates(x) & CreatesMass(x)))", "score": 0}
{"id": "eqasc_validation_568", "prediction": "all x.((Object(x) & WoodenTable(x)) -> MadeUpOfMolecularMolecules(x))", "score": 0}
{"id": "eqasc_validation_568", "prediction": "all x.((Object(x) & Tree(x)) -> (MadeUpOfMoleculars(x) & Vibrate(x) & CreatesMass(x)))", "score": 0}
{"id": "eqasc_validation_568", "prediction": "all x.((Object(x) & WoodenTable(x)) -> (MadeUpOfMoleculars(x) & VibrateToCreateMass(x)))", "score": 0}
{"id": "eqasc_validation_568", "prediction": "all x.(Object(x) -> (VibratesToCreateMass(x) & IncludesWoodenTable(x)))", "score": 0}
{"id": "eqasc_validation_568", "prediction": "all x.((Object(x) & WoodenTable(x)) -> VibratesToCreateMass(x))", "score": 0}
{"id": "eqasc_validation_568", "prediction": "all x.(Object(x) -> (MadeUpOfMolecules(x) & VibratesToCreateMass(x)))", "score": 0}
{"id": "eqasc_validation_568", "prediction": "all x.((Object(x) & -WoodenTable(x)) -> MadeUpOfMolecules(x))", "score": 0}
{"id": "eqasc_validation_568", "prediction": "all x y.((Object(x) & EvenWoodenTable(y)) -> MadeUpOfMolecular(x))", "score": 0}
{"id": "eqasc_validation_568", "prediction": "all x.((Object(x) & WoodenTable(x)) -> exists y.(Molecule(y) & Vibrates(y,x)))", "score": 0}
{"id": "eqasc_validation_568", "prediction": "all x.(Object(x) -> (MadeUpOfMolecules(x) & Vibrate(x) & CreatesMass(x)))", "score": 0}
{"id": "eqasc_validation_568", "prediction": "all x.((Object(x) & WoodenTable(x)) -> (MadeOfMolecules(x) & Vibrate(x) & CreateMass(x)))", "score": 0}
{"id": "eqasc_validation_568", "prediction": "all x y z.((Object(x) & WoodenTable(y) & Molecule(z)) -> (MadeUpOf(x,z) & VibrateToCreateMass(x,y,z)))", "score": 0}
{"id": "eqasc_validation_569", "prediction": "all x y.((SandPaper(x) & Table(y)) -> SmoothsWith(x,y))", "score": 0}
{"id": "eqasc_validation_569", "prediction": "all x y.((SandPaper(x) & Table(y)) -> SmoothingSimple(x,y))", "score": 0}
{"id": "eqasc_validation_569", "prediction": "all x.(SandPaper(x) -> SmoothsTable(x))", "score": 0}
{"id": "eqasc_validation_569", "prediction": "all x y.((SandPaper(x) & Table(y)) -> Smooths(x,y))", "score": 0}
{"id": "eqasc_validation_569", "prediction": "all x y.((SandPaper(x) & Table(y)) -> Smoothed(x,y))", "score": 0}
{"id": "eqasc_validation_569", "prediction": "all x y z.((SandPaper(x) & Table(y) & Surface(z)) -> Smoothed(x,y,z))", "score": 0}
{"id": "eqasc_validation_569", "prediction": "all x y z.((SandPaper(x) & Table(y) & Table(z)) -> SmoothsWith(x,y,z))", "score": 0}
{"id": "eqasc_validation_569", "prediction": "all x y z w.((SandPaper(x) & Table(y) & Table(z) & Smooth(x,y,z)) -> UsedToSmooth(x))", "score": 0}
{"id": "eqasc_validation_569", "prediction": "all x y.((SandPaper(x) & Table(y)) -> SmoothsToSmooth(x,y))", "score": 0}
{"id": "eqasc_validation_569", "prediction": "all x y.((SandPaper(x) & Table(y)) -> SmoothSmooth(x,y))", "score": 0}
{"id": "eqasc_validation_569", "prediction": "all x y.((SandPaper(x) & Table(y)) -> SmoothedToSmooth(x,y))", "score": 0}
{"id": "eqasc_validation_569", "prediction": "all x y z.((SandPaper(x) & Table(y) & Table(z) & Smooth(x,y,z)) -> UsefulToSmooth(x,y,z))", "score": 0}
{"id": "eqasc_validation_569", "prediction": "all x y z.((SandPaper(x) & Table(y) & Table(z)) -> SmoothedWith(x,y,z))", "score": 0}
{"id": "eqasc_validation_569", "prediction": "all x y.((SandPaper(x) & Table(y) & Smooth(x,y)) -> UsedToSmooth(x,y))", "score": 0}
{"id": "eqasc_validation_569", "prediction": "all x y.((SandPaper(x) & Table(y) & Smoothed(x,y)) -> UsedToSmooth(x,y))", "score": 0}
{"id": "eqasc_validation_570", "prediction": "all x.(ScrapWood(x) -> UsedWithConsumable(x,y))", "score": 0}
{"id": "eqasc_validation_570", "prediction": "all x y z.((ScrapWood(x) & WoodenBin(y) & LowEdition(z)) -> CanBeUsedFor(x,y,z))", "score": 0}
{"id": "eqasc_validation_570", "prediction": "all x.(ScrapWood(x) -> UsedForBins(x,y))", "score": 0}
{"id": "eqasc_validation_570", "prediction": "all x.(ScrapWood(x) -> UsedForChildHouse(x))", "score": 0}
{"id": "eqasc_validation_570", "prediction": "all x.(ScrapWood(x) -> (UsedForWoodenBin(x) & Cheap(x)))", "score": 0}
{"id": "eqasc_validation_570", "prediction": "all x.(ScrapWood(x) -> UsedForCoftWoodenBenches(x))", "score": 0}
{"id": "eqasc_validation_570", "prediction": "all x.(ScrapWood(x) -> UsedForBins(x))", "score": 0}
{"id": "eqasc_validation_570", "prediction": "all x y.((ScrapWood(x) & WoodenBin(y)) -> UsesFor(x,y))", "score": 0}
{"id": "eqasc_validation_570", "prediction": "all x.(ScrapWood(x) -> CheapWoodenBin(x))", "score": 0}
{"id": "eqasc_validation_570", "prediction": "all x.(ScrapWood(x) -> UsedForHotWoodenBins(x))", "score": 0}
{"id": "eqasc_validation_570", "prediction": "all x y.((ScrapWood(x) & WoodenBin(y)) -> CanBeUsedFor(x,y))", "score": 0}
{"id": "eqasc_validation_570", "prediction": "all x y.((ScrapWood(x) & WoodenBin(y)) -> UsedFor(x,y))", "score": 0}
{"id": "eqasc_validation_570", "prediction": "all x.(ScrapWood(x) -> UsedForQuickWooden(x))", "score": 0}
{"id": "eqasc_validation_570", "prediction": "all x.((ScrapWood(x) & UsedFor(x,WoodenBins)) -> Cheap(x))", "score": 0}
{"id": "eqasc_validation_570", "prediction": "all x y.((ScrapWood(x) & WoodenBug(y)) -> UsedFor(x,y))", "score": 0}
{"id": "eqasc_validation_571", "prediction": "all x.(Sandpaper(x) -> (UsedToSmoothObjects(x) & MadeOfWood(x)))", "score": 0}
{"id": "eqasc_validation_571", "prediction": "all x.(Sandpaper(x) -> ScanningObjectsOfWood(x))", "score": 0}
{"id": "eqasc_validation_571", "prediction": "all x y.((Sandpaper(x) & Wood(y)) -> Smooth(x,y))", "score": 0}
{"id": "eqasc_validation_571", "prediction": "all x.(Sandpaper(x) -> SmoothObjects(x))", "score": 0}
{"id": "eqasc_validation_571", "prediction": "all x.(Sandpaper(x) -> SmoothObjectsFromWood(x))", "score": 0}
{"id": "eqasc_validation_571", "prediction": "all x.(Sandpaper(x) -> (MadeOfWood(x) & SmoothObjects(x)))", "score": 0}
{"id": "eqasc_validation_571", "prediction": "all x y.((Sandpaper(x) & Material(y)) -> SmoothsOfObjects(x,y))", "score": 0}
{"id": "eqasc_validation_571", "prediction": "all x.(Sandpaper(x) -> SmoothesOfWoodObjects(x))", "score": 0}
{"id": "eqasc_validation_571", "prediction": "all x.(Sandpaper(x) -> SmoothesWoodMadeObjects(x))", "score": 0}
{"id": "eqasc_validation_571", "prediction": "all x y z.((Sandpaper(x) & Wood(y) & Product(z)) -> Smooth(x,y,z))", "score": 0}
{"id": "eqasc_validation_571", "prediction": "all x.(Sandpaper(x) -> Smooth(x))", "score": 0}
{"id": "eqasc_validation_571", "prediction": "all x y.((Sandpaper(x) & Smooth(x,y)) -> MadeOfWood(y))", "score": 0}
{"id": "eqasc_validation_571", "prediction": "all x.(Sandpaper(x) -> UsedToSmoothObjects(x))", "score": 0}
{"id": "eqasc_validation_571", "prediction": "all x.(Sandpaper(x) -> SmoothsMadeOfWood(x))", "score": 0}
{"id": "eqasc_validation_571", "prediction": "all x.(Sandpaper(x) -> (UsedToSmoothObjects(x) & MadeOfWooden(x)))", "score": 0}
{"id": "eqasc_validation_572", "prediction": "all x.(DrumStick(x) -> OfWoodenCane(x))", "score": 0}
{"id": "eqasc_validation_572", "prediction": "all x.(DrumStick(x) -> UsesWoodenCane(x))", "score": 0}
{"id": "eqasc_validation_572", "prediction": "all x.(DrumStick(x) -> WoodenCane(x))", "score": 0}
{"id": "eqasc_validation_572", "prediction": "all x y.((DrumStick(x) & WoodenCane(y)) -> MadeOf(x,y))", "score": 0}
{"id": "eqasc_validation_572", "prediction": "from woodencane.", "score": -1}
{"id": "eqasc_validation_572", "prediction": "all x.(drumstick(x) -> WoodenCaneStick(x))", "score": 0}
{"id": "eqasc_validation_573", "prediction": "all x.(Sandpaper(x) -> SmoothSoundDrumSticks(x))", "score": 0}
{"id": "eqasc_validation_573", "prediction": "all x y.((Sandpaper(x) & DrumStick(y)) -> UsedToSmoothDrumSticks(x,y))", "score": 0}
{"id": "eqasc_validation_573", "prediction": "all x.(Sandpaper(x) -> SmoothdrumSticks(x))", "score": 0}
{"id": "eqasc_validation_573", "prediction": "all x y.((Sandpaper(x) & DrumStick(y)) -> Smooths(x,y))", "score": 0}
{"id": "eqasc_validation_573", "prediction": "all x y.((Sandpaper(x) & DrumStick(y)) -> SmoothEasyRibbed(x,y))", "score": 0}
{"id": "eqasc_validation_573", "prediction": "all x.(Sandpaper(x) -> SmoothDrumSticks(x))", "score": 0}
{"id": "eqasc_validation_573", "prediction": "all x y z.((Sandpaper(x) & DrumSticks(y) & Seams(z)) -> Smooth(x,y,z))", "score": 0}
{"id": "eqasc_validation_573", "prediction": "all x y.((Sandpaper(x) & DrumStick(y)) -> Smooth(x,y))", "score": 0}
{"id": "eqasc_validation_573", "prediction": "all x y.(Sandpaper(x) & DrumStick(y) & Smooths(x,y))", "score": 0}
{"id": "eqasc_validation_573", "prediction": "all x.((Sandpaper(x) & SmoothDrumSticks(x)) -> UsedToEmploy(x))", "score": 0}
{"id": "eqasc_validation_573", "prediction": "all x.(Sandpaper(x) -> SmoothsDrumSticks(x))", "score": 0}
{"id": "eqasc_validation_573", "prediction": "all x.(Sandpaper(x) -> SmoothTrumpetSticks(x))", "score": 0}
{"id": "eqasc_validation_573", "prediction": "all x.((Sandpaper(x) & SmoothDrumSticks(x)) -> Sandpaper(x))", "score": 0}
{"id": "eqasc_validation_573", "prediction": "all x y.((Sandpaper(x) & DrumStick(y)) -> SmoothInSmoothness(x,y))", "score": 0}
{"id": "eqasc_validation_574", "prediction": "all x.(CoarseGritSandpaper(x) -> WorksWell(x))", "score": 0}
{"id": "eqasc_validation_574", "prediction": "all x.(CoarseGritSandPaper(x) -> WorksWell(x))", "score": 0}
{"id": "eqasc_validation_574", "prediction": "all x.((CoarseGrit(x) & Sandpaper(x)) -> WorksWell(x))", "score": 0}
{"id": "eqasc_validation_574", "prediction": "all x y.((CoarseGritSandpaper(x) & Sandpaper(y)) -> WorksWell(x,y))", "score": 0}
{"id": "eqasc_validation_574", "prediction": "all x.(CoarseGrit(x) -> WorksWell(x))", "score": 0}
{"id": "eqasc_validation_575", "prediction": "all x y.((CoarseGrit(x) & WoodenObject(y)) -> Smoothed(x,y))", "score": 0}
{"id": "eqasc_validation_575", "prediction": "all x y.((Grain(x) & WoodenObject(y)) -> Smooth(x,y))", "score": 0}
{"id": "eqasc_validation_575", "prediction": "all x y.((Grain(x) & WoodenObject(y)) -> UsedToSmooth(x,y))", "score": 0}
{"id": "eqasc_validation_575", "prediction": "all x.((Grain(x) & WoodenObject(y)) -> Smooth(x,y))", "score": 0}
{"id": "eqasc_validation_575", "prediction": "all x.(Grate(x) -> UsedToSmoothWoodenObjects(x))", "score": 0}
{"id": "eqasc_validation_575", "prediction": "all x y.((Grain(x) & WoodenObject(y)) -> Smoothed(x,y))", "score": 0}
{"id": "eqasc_validation_575", "prediction": "all x.(CurrentGrit(x) -> SmoothsWoodenObjects(x))", "score": 0}
{"id": "eqasc_validation_575", "prediction": "all x.(Grain(x) -> SmoothWoodenObjects(x))", "score": 0}
{"id": "eqasc_validation_575", "prediction": "all x y.((Grain(x) & WoodenObject(y)) -> SmoothedWith(x,y))", "score": 0}
{"id": "eqasc_validation_575", "prediction": "all x.(Grain(x) -> SmoothNaturalObjects(x))", "score": 0}
{"id": "eqasc_validation_575", "prediction": "all x.(CoarseGrit(x) -> SmoothWoodenObjects(x))", "score": 0}
{"id": "eqasc_validation_575", "prediction": "all x.(Grind(x) -> SmoothSandwichObjects(x))", "score": 0}
{"id": "eqasc_validation_575", "prediction": "all x y.((GroovyGrit(x) & WoodenObject(y)) -> SmoothedWith(x,y))", "score": 0}
{"id": "eqasc_validation_575", "prediction": "all x y.((Grain(x) & WoodenObject(y)) -> Smooths(x,y))", "score": 0}
{"id": "eqasc_validation_576", "prediction": "all x y.((Child(x) & TinyWoodenLogs(y)) -> (MakeLogCombinations(x,y) | MakeStructuresFrom(x,y)))", "score": 0}
{"id": "eqasc_validation_576", "prediction": "all x y.((Child(x) & TinyWoodenLog(y)) -> MakesLogBoakesAndStructures(x,y))", "score": 0}
{"id": "eqasc_validation_576", "prediction": "all x y z.((Child(x) & TimberLog(y) & LogCabin(z)) -> MakesFrom(x,z))", "score": 0}
{"id": "eqasc_validation_576", "prediction": "all x y.((Child(x) & TinyWoodenLog(y)) -> (MakeLogCabinsAndStructuresFrom(x,y)))", "score": 0}
{"id": "eqasc_validation_576", "prediction": "all x y.((Child(x) & TinyWoodenLog(y)) -> (MakelogCabins(x,y) & MakeStructures(x,y)))", "score": 0}
{"id": "eqasc_validation_576", "prediction": "all x y z.((Child(x) & LogCabin(y) & LogStructure(z)) -> (MakesFromTinyWoodenLogs(x,y,z) & EasyFrom(x,y,z)))", "score": 0}
{"id": "eqasc_validation_576", "prediction": "all x y z.((Child(x) & LogCoast(y) & WoodenLogs(z) & FromImperfectLogs(x,y,z)) -> EasyMakingFromTinyLogs(x,y,z))", "score": 0}
{"id": "eqasc_validation_576", "prediction": "all x y.((Child(x) & TinyWoodenLog(y)) -> (MakesLogCabinsAndStructuresFrom(x,y)))", "score": 0}
{"id": "eqasc_validation_576", "prediction": "all x y.((Child(x) & TipicalWoodenLog(y)) -> (MakesLogCabinsAndStructures(x,y) & FromTinyWoodenLogs(x,y)))", "score": 0}
{"id": "eqasc_validation_576", "prediction": "all x y z.((Child(x) & TwistyWoodenLog(y) & Log(z)) -> (Makes(x,y) & Makes(x,z)))", "score": 0}
{"id": "eqasc_validation_576", "prediction": "all x y z.((Child(x) & TinyWoodenLog(y) & LogCabin(z) & OtherStructures(z)) -> MakesFrom(x,y,z))", "score": 0}
{"id": "eqasc_validation_576", "prediction": "all x y.((Child(x) & Kiln(y)) -> (RectangleLog(x) | FeatureLog(x)))", "score": 0}
{"id": "eqasc_validation_576", "prediction": "all x y.((Child(x) & LogCabin(y)) -> (MadeFromTinyWoodenLogs(x,y) & OtherStructures(x,y)))", "score": 0}
{"id": "eqasc_validation_576", "prediction": "all x y.((Child(x) & WoodenLog(y)) -> (EasilyMakesLogCabins(x,y) & MakesStructures(x,y)))", "score": 0}
{"id": "eqasc_validation_576", "prediction": "all x y.((Child(x) & TinyWoodenLogs(y)) -> MakesLogBooksAndStructuresFrom(x,y))", "score": 0}
{"id": "eqasc_validation_576", "prediction": "all x y.((Child(x) & MinimalWoodenLog(y)) -> (MadeLogBakesFromTinyLogs(x,y) | MakesStructuresFromTinyLogs(x,x)))", "score": 0}
{"id": "eqasc_validation_577", "prediction": "all x.(Sandpaper(x) -> SmoothLogCabins(x))", "score": 0}
{"id": "eqasc_validation_577", "prediction": "all x.(Sandpaper(x) -> SmoothsLogCabins(x))", "score": 0}
{"id": "eqasc_validation_577", "prediction": "all x y.((Sandpaper(x) & LogCabinet(y)) -> Smooth(x,y))", "score": 0}
{"id": "eqasc_validation_577", "prediction": "all x y.((Sandpaper(x) & LogCabin(y)) -> Smooth(x,y))", "score": 0}
{"id": "eqasc_validation_577", "prediction": "all x y.((Sandpaper(x) & LogCast(y)) -> Smooth(x,y))", "score": 0}
{"id": "eqasc_validation_578", "prediction": "all x.((WoodenObject(x) & Decoupage(x)) -> UsedIn(x,y))", "score": 0}
{"id": "eqasc_validation_578", "prediction": "all x.((WoodenObject(x) & Decoupage(x)) -> Uses(x,y))", "score": 0}
{"id": "eqasc_validation_578", "prediction": "all x.((Wooden(x) & Decoupage(x)) -> UsedIn(x,y))", "score": 0}
{"id": "eqasc_validation_578", "prediction": "all x.((WoodenObject(x) & TraditionalDecoupage(x)) -> UsedIn(x,y))", "score": 0}
{"id": "eqasc_validation_578", "prediction": "all x.((WoodenObject(x) & Decoupage(x)) -> Traditional(x))", "score": 0}
{"id": "eqasc_validation_578", "prediction": "all x y.((WoodenObject(x) & Decoupage(y)) -> UsedFor(x,y))", "score": 0}
{"id": "eqasc_validation_578", "prediction": "all x.(WoodenObject(x) & UsedInDecoupage(x))", "score": 0}
{"id": "eqasc_validation_578", "prediction": "all x.((WoodenOf(x) & Decoupage(x)) -> UsedIn(x,y))", "score": 0}
{"id": "eqasc_validation_578", "prediction": "all x.((WoodenObject(x) & Decoupage(x)) -> UsedIn(x,Offset))", "score": 0}
{"id": "eqasc_validation_578", "prediction": "all x y z.((WoodenObject(x) & Decoupage(y) & Traditional(z)) -> UsedIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_578", "prediction": "all x.((WoodenObject(x) & TraditionallyUsed(x,Decoupage)) -> UsedIn(x,Decoupage))", "score": 0}
{"id": "eqasc_validation_578", "prediction": "all x.((WoodenOutlook(x) & Decoupage(x)) -> UsedIn(x,y))", "score": 0}
{"id": "eqasc_validation_578", "prediction": "all x.((Wooden(x) & Decoupage(x)) -> UsedFor(x,y))", "score": 0}
{"id": "eqasc_validation_578", "prediction": "all x.((WoodenObject(x) & TraditionallyUsedInDecoupage(x)) -> UsedInDecoupage(x))", "score": 0}
{"id": "eqasc_validation_578", "prediction": "all x.((WoodenObject(x) & TraditionalDecoupage(x)) -> UsesObject(x,Wooden))", "score": 0}
{"id": "eqasc_validation_579", "prediction": "all x.(Sandpaper(x) -> SmoothDecoupage(x))", "score": 0}
{"id": "eqasc_validation_579", "prediction": "all x y z.((Sandpaper(x) & Decoupage(y) & Semi-Smooth(z)) -> Smooth(x,y,z))", "score": -1}
{"id": "eqasc_validation_579", "prediction": "all x.((Sandpaper(x) & SmoothDecoupage(x)) -> Sandpaper(x))", "score": 0}
{"id": "eqasc_validation_579", "prediction": "all x y.((Sandpaper(x) & Sandpaper(y)) -> UsesToSmoothDecoupage(x,y))", "score": 0}
{"id": "eqasc_validation_579", "prediction": "all x y.((Sandpaper(x) & Sandpaper(y)) -> SmoothDentcoupage(x,y))", "score": 0}
{"id": "eqasc_validation_579", "prediction": "all x y.((Sandpaper(x) & SmoothDecoupage(y)) -> UsedToUseSmoothDecoupage(x,y))", "score": 0}
{"id": "eqasc_validation_579", "prediction": "all x y.((Sandpaper(x) & Sandpaper(y)) -> SmoothDecoupage(x))", "score": 0}
{"id": "eqasc_validation_579", "prediction": "all x y z.((Sandpaper(x) & Brush(y) & SandpaperOf(z)) -> UsedForSmoothDecoupage(x,y,z))", "score": 0}
{"id": "eqasc_validation_579", "prediction": "all x y.((Sandpaper(x) & Sandpaper(y)) -> (OwnedToSmoothDecoupage(x,y) | SmoothDecoupage(x,y)))", "score": 0}
{"id": "eqasc_validation_579", "prediction": "all x y.((Sandpaper(x) & Sandpaper(y)) -> SmoothDecoupage(z))", "score": 0}
{"id": "eqasc_validation_579", "prediction": "all x y z.((Sandpaper(x) & Sandpaper(y) & Sandpaper(z)) -> SmoothDecoupage(x,z))", "score": 0}
{"id": "eqasc_validation_579", "prediction": "all x.(Sandpaper(x) -> UsedToSmoothDefocage[x])", "score": 0}
{"id": "eqasc_validation_580", "prediction": "all x y z.((Spacecraft(x) & Spacecraft(y) & Spacecraft(z)) -> PropulsionUsedForFlying(x,y,z))", "score": 0}
{"id": "eqasc_validation_580", "prediction": "all x y.((Spacecraft(x) & Propulsion(y)) -> UsedForFlying(x,y))", "score": 0}
{"id": "eqasc_validation_580", "prediction": "all x y.((Spacecraft(x) & Spacecraft(y)) -> FliesPropulsion(x,y))", "score": 0}
{"id": "eqasc_validation_580", "prediction": "all x y.((Spacecraft(x) & Spacecraft(y)) -> UsesForFlying(x,y))", "score": 0}
{"id": "eqasc_validation_580", "prediction": "all x.((Spacecraft(x) & Propeller(x)) -> UsedForFlying(x))", "score": 0}
{"id": "eqasc_validation_580", "prediction": "all x y z.((Spacecraft(x) & Spacecraft(y) & Propulsion(z)) -> UsedForFlying(x,z))", "score": 0}
{"id": "eqasc_validation_580", "prediction": "all x y z.((Spacecraft(x) & Spacecraft(y) & Propulsion(z) & UsedForFlying(x,z)) -> Spacecraft(x))", "score": 0}
{"id": "eqasc_validation_580", "prediction": "all x y z.((Spacecraft(x) & Spacecraft(y) & Propulsion(z)) -> UsedForFlying(z,y))", "score": 0}
{"id": "eqasc_validation_580", "prediction": "all x y z.((Spacecraft(x) & Spacecraft(y) & InSpacecraft(z)) -> UsesForFlying(x,y,z))", "score": 0}
{"id": "eqasc_validation_580", "prediction": "all x y.((Spacecraft(x) & Spacecraft(y) & UsesForFlying(x,y)) -> UsedForFlying(x,y))", "score": 0}
{"id": "eqasc_validation_580", "prediction": "all x y z.((Spacecraft(x) & Spacecraft(y) & Propulsion(z)) -> UsedForFlying(x,y,z))", "score": 0}
{"id": "eqasc_validation_580", "prediction": "all x y.((Spacecraft(x) & Spacecraft(y)) -> PropulsionUsedForFlying(x,y))", "score": 0}
{"id": "eqasc_validation_580", "prediction": "all x y z.((Spacecraft(x) & Propulsion(y) & Spacecraft(z)) -> UsesForFlying(y,z))", "score": 0}
{"id": "eqasc_validation_580", "prediction": "all x y.((Spacecraft(x) & Spacecraft(y)) -> UsedForFlying(x,y))", "score": 0}
{"id": "eqasc_validation_580", "prediction": "all x y z.((Spacecraft(x) & Spacecraft(y) & Propulsion(z) & PropulsionUsedForFlying(x,z)) -> Spacecraft (x)))", "score": -1}
{"id": "eqasc_validation_581", "prediction": "all x.(Propulsion(x) -> (Shoots(x,forecaster) | Drives(x,forecaster)))", "score": 0}
{"id": "eqasc_validation_581", "prediction": "all x.(Propulsion(x) -> ((PressForward(x) | DriveForward(x))))", "score": 0}
{"id": "eqasc_validation_581", "prediction": "all x.(Propulsion(x) -> (PushForward(x) | DriveForward(x)))", "score": 0}
{"id": "eqasc_validation_581", "prediction": "all x.(Propulsion(x) -> (PushFront(x) | DriveFront(x)))", "score": 0}
{"id": "eqasc_validation_581", "prediction": "All x.(Propulsion(x) -> (PutsForward(x) | DrivesForward(x)))", "score": -1}
{"id": "eqasc_validation_581", "prediction": "all x y.((Propulsion(x) & (Object(y) | Object(y))) -> (PushForward(x,y) | DriveForward(x,y)))", "score": 0}
{"id": "eqasc_validation_581", "prediction": "all x.(Propulsion(x) -> (PuchForward(x) | DriveForward(x)))", "score": 0}
{"id": "eqasc_validation_581", "prediction": "all x y.((Propulsion(x) & Object(y)) -> (PushForward(x) | DriveForward(x,y)))", "score": 0}
{"id": "eqasc_validation_581", "prediction": "all x y.((Propulsion(x) & Object(y)) -> (PushForward(x) | DriveForward(x)))", "score": 0}
{"id": "eqasc_validation_581", "prediction": "all x.(Propulsion(x) -> (PropelForward(x) | DriveForward(x)))", "score": 0}
{"id": "eqasc_validation_581", "prediction": "all x y.((Propulsion(x) & Object(y)) -> (PushForward(x,y) | DriveForward(x,y)))", "score": 0}
{"id": "eqasc_validation_581", "prediction": "all x.(Propulsion(x) -> (PutsForward(x) | DrivesForward(x)))", "score": 0}
{"id": "eqasc_validation_581", "prediction": "all x.(Propulsion(x) -> (PromoteForward(x) | DriveForward(x)))", "score": 0}
{"id": "eqasc_validation_582", "prediction": "all x.(PushForward(x) -> UsedForFlying(x,Spacecraft))", "score": 0}
{"id": "eqasc_validation_582", "prediction": "all x y.((PushForward(x) & Spacecraft(y)) -> UsedForFlying(x,y))", "score": 0}
{"id": "eqasc_validation_582", "prediction": "all x y.((Spacecraft(x) & PushForward(y)) -> UsedForFlying(x,y))", "score": 0}
{"id": "eqasc_validation_582", "prediction": "all x y.((Spacecraft(x) & PushForward(y)) -> UsedForFlyingBy(y,x))", "score": 0}
{"id": "eqasc_validation_582", "prediction": "all x y.((Spacecraft(x) & Spacecraft(y)) -> PushForwardForFlying(x,y))", "score": 0}
{"id": "eqasc_validation_582", "prediction": "all x y z.((PushForward(x) & Spacecraft(y) & Spacecraft(z)) -> UsedForFlying(x,y,z))", "score": 0}
{"id": "eqasc_validation_582", "prediction": "all x y.((Spacecraft(x) & Spacecraft(y)) -> PushForward(x,y))", "score": 0}
{"id": "eqasc_validation_582", "prediction": "all x y.(PushForward(x) -> UsedForFlyingBySpacecraft(x))", "score": 0}
{"id": "eqasc_validation_582", "prediction": "all x y.((PushForward(x) & Spacecraft(y)) -> UsedForFlying(y,x))", "score": 0}
{"id": "eqasc_validation_582", "prediction": "all x.(PushForward(x) -> UsedForFlyingBySpacecraft(x))", "score": 0}
{"id": "eqasc_validation_582", "prediction": "all x.(PushForward(x) -> UsedForFlying(x))", "score": 0}
{"id": "eqasc_validation_582", "prediction": "all x y z.((PumpsForward(x) & Spacecraft(y) & Spacecraft(z)) -> UsedForFlying(y,x))", "score": 0}
{"id": "eqasc_validation_583", "prediction": "all x y.((EarthOrbitingSpacecraft(x) & Satellite(y)) -> Involves(x,y))", "score": 0}
{"id": "eqasc_validation_583", "prediction": "all x.((EarthOrbitingSpacecraft(x) & Satellite(x)) -> Called(x))", "score": 0}
{"id": "eqasc_validation_583", "prediction": "all x.((EarthOrbitingSatellite(x) & -EarthOrbitingSpacecraft(x)) -> Satellite(x))", "score": 0}
{"id": "eqasc_validation_583", "prediction": "(all x.(EarthOrbitingSatellite(x) -> Satellite(x)))", "score": 0}
{"id": "eqasc_validation_583", "prediction": "all x.((EarthOrbitingSpacecraft(x) & Satellite(x)) -> (Finds(x,y) & HasAttributes(y,x)))", "score": 0}
{"id": "eqasc_validation_583", "prediction": "all x.((EarthOrbitingSpacecraft(x) & Satellite(x)) -> Is(x,y))", "score": 0}
{"id": "eqasc_validation_583", "prediction": "all x.((EarthOrbitingSpacecraft(x) & Satellite(x)) -> SeemsToBe(x))", "score": 0}
{"id": "eqasc_validation_583", "prediction": "all x.((EarthOrbitingSpacecraft(x) & Satellite(x)) -> Orbiting(x))", "score": 0}
{"id": "eqasc_validation_583", "prediction": "all x.((EarthOrbitingSpacecraft(x) & Satellite(x)) -> Receiver(x))", "score": 0}
{"id": "eqasc_validation_583", "prediction": "all x.(OrbitingSpacecraft(x) -> Satellite(x))", "score": 0}
{"id": "eqasc_validation_583", "prediction": "all x.((EarthOrbitingSpacecraft(x) & Satellite(y)) -> Calls(x,y))", "score": 0}
{"id": "eqasc_validation_583", "prediction": "all x.((EarthOrbitingSpacecraft(x) & Satellite(x)) -> NeedsInformation(x))", "score": 0}
{"id": "eqasc_validation_583", "prediction": "all x.(Satellite(x) -> EarthOrbitingSpacecraft(x))", "score": 0}
{"id": "eqasc_validation_583", "prediction": "all x.((EarthOrbiting(x) & Spacecraft(x)) -> Satellite(x))", "score": 0}
{"id": "eqasc_validation_583", "prediction": "all x.((EarthOrbitingSpacecraft(x) & Satellite(x)) -> Orbits(x))", "score": 0}
{"id": "eqasc_validation_584", "prediction": "all x y.((Propulsion(x) & Satellite(y)) -> UsedFor(x,y))", "score": 0}
{"id": "eqasc_validation_584", "prediction": "all x.(Propulsion(x) -> FliesSatellites(x))", "score": 0}
{"id": "eqasc_validation_584", "prediction": "all x.(Propulsion(x) -> UsedForFlyingSatellites(x))", "score": 0}
{"id": "eqasc_validation_584", "prediction": "all x.(Propulsion(x) -> UsedForFlying(x,satellites))", "score": 0}
{"id": "eqasc_validation_584", "prediction": "all x y.((Propulsion(x) & Satellite(y)) -> UsedForFlying(x,y))", "score": 0}
{"id": "eqasc_validation_585", "prediction": "all x y.((Aircraft(x) & PropulsionSystem(y)) -> GeneratesThrust(x,y))", "score": 0}
{"id": "eqasc_validation_585", "prediction": "(GatheringSystème(a) & Aeroplane(b))", "score": 0}
{"id": "eqasc_validation_585", "prediction": "(All x y z w.((Aircraft(x) & PropulsionSystem(y) & Thrust(z)) -> Generate(x,y,z)))", "score": -1}
{"id": "eqasc_validation_585", "prediction": "(all x y.((Aircraft(x) & PropulsionSystem(y)) -> GeneratesThrust(x,y))", "score": -1}
{"id": "eqasc_validation_585", "prediction": "(AndThriveGeneratedByPropulsionSystem(x) & Aircraft(x))", "score": 0}
{"id": "eqasc_validation_585", "prediction": "all x y.((Aircraft(x) & PropellerSystem(y)) -> GeneratesThruthe(x,y))", "score": 0}
{"id": "eqasc_validation_585", "prediction": "a) (GeneratedByPropulsionSystem(a) & Airplane(b))", "score": -1}
{"id": "eqasc_validation_585", "prediction": "амание амание() и елание().(PropulsionSystem() -> GeneratesThroat())", "score": -1}
{"id": "eqasc_validation_585", "prediction": "(exists x.(Pressure(x) & Generates(x)) & exists y.(AircraftPropulsionSystem(y) & Generates(x,y))))", "score": -1}
{"id": "eqasc_validation_585", "prediction": "all x.(Thrust(x) -> GeneratedByPropulsionSystem(x))", "score": 0}
{"id": "eqasc_validation_585", "prediction": "And thrustGeneratedByPropulsionSystemOfAircraft(x)", "score": -1}
{"id": "eqasc_validation_585", "prediction": "(all x.(Thrust(x) -> GeneratedByPropulsionSystem(x)))", "score": 0}
{"id": "eqasc_validation_585", "prediction": "ALL x y z.((Fetch(x) & Aeroplane(y) & PropulsionSystem(z)) -> GeneratesThroat(x,y,z))", "score": -1}
{"id": "eqasc_validation_585", "prediction": "-(GeneratesThruth(x) & ThePropulsionSystemOfAircraft(x)))", "score": -1}
{"id": "eqasc_validation_585", "prediction": "(all x.(Twins(x) -> GeneratesPropulsionSystem(x)))", "score": 0}
{"id": "eqasc_validation_585", "prediction": "And thrustgeneratedByPropulsionSystemOfAircraft(thrust)", "score": -1}
{"id": "eqasc_validation_586", "prediction": "all x.(ThrustingEnergy(x) -> UsedForFlying(x))", "score": 0}
{"id": "eqasc_validation_586", "prediction": "all x.(ThrobbingEnergy(x) -> UsedForFlying(x))", "score": 0}
{"id": "eqasc_validation_586", "prediction": "all x y z.((ThrustingEnergy(x) & Fist(y) & Force(z)) -> UsedForFlying(x))", "score": 0}
{"id": "eqasc_validation_586", "prediction": "all x y.((ThrustingEnergy(x) & Flying(y)) -> UsedFor(x,y))", "score": 0}
{"id": "eqasc_validation_586", "prediction": "all x y z.((ThrushingEnergy(x) & Flying(y) & WindingEnergy(z)) -> UsedFor(x,y,z))", "score": 0}
{"id": "eqasc_validation_586", "prediction": "all x y.((ThrustingEnergy(x) & Flying(y)) -> UsedForFlying(x,y))", "score": 0}
{"id": "eqasc_validation_586", "prediction": "all x.(GrassingEnergy(x) -> UsedForFlying(x))", "score": 0}
{"id": "eqasc_validation_586", "prediction": "all x.(TaskingEnergy(x) -> UsedForFlying(x))", "score": 0}
{"id": "eqasc_validation_586", "prediction": "all x y.((Throughting(x) & Flying(y)) -> UsedForFlying(x,y))", "score": 0}
{"id": "eqasc_validation_586", "prediction": "all x y.((ThrustingEnergy(x) & Flying(y)) -> UsedFor(x,y)).", "score": -1}
{"id": "eqasc_validation_586", "prediction": "all x y.((TossingEnergy(x) & Flying(y)) -> UsedFor(x,y))", "score": 0}
{"id": "eqasc_validation_587", "prediction": "Apollo 13 Spacecraft Launched.", "score": -1}
{"id": "eqasc_validation_587", "prediction": "all x y.((Spacecraft(x) & Apollo(y) & Launched(y)) -> Apollo13(x))", "score": 0}
{"id": "eqasc_validation_587", "prediction": "all x y.((Spacecraft(x) & Apollo(y) & Launched(x,y)) -> Apollo13(y))", "score": 0}
{"id": "eqasc_validation_587", "prediction": "all x.((Spacecraft(x) & Apollo13(x)) -> Launched(x))", "score": 0}
{"id": "eqasc_validation_587", "prediction": "all x.(Apollo13(x) -> Launched(x))", "score": 0}
{"id": "eqasc_validation_587", "prediction": "all x.(AboveApolloWheel(x) -> Launched(x))", "score": 0}
{"id": "eqasc_validation_587", "prediction": "Lunar Spacecraft(Apollo13) launched.", "score": -1}
{"id": "eqasc_validation_587", "prediction": "(Spacecraft(Apollo13) & Launched(Apollo138))", "score": 0}
{"id": "eqasc_validation_587", "prediction": "(Marinecraft(Apollo13) & Launched(Apollo13))", "score": 0}
{"id": "eqasc_validation_587", "prediction": "all x.((Spacecraft(x) & Apollo(x)) -> Launched(x))", "score": 0}
{"id": "eqasc_validation_587", "prediction": "all x.(Spacecraft(x) -> Apollo-13(x))", "score": -1}
{"id": "eqasc_validation_587", "prediction": "the Apollo13 spacecraft is launched.", "score": -1}
{"id": "eqasc_validation_587", "prediction": "the Apollo13Spacecraft(x) is launched(x))", "score": -1}
{"id": "eqasc_validation_588", "prediction": "all x y z.((Propulsion(x) & Apollo13(y) & Apollo13(z)) -> UsedForFlying(x,y,z))", "score": 0}
{"id": "eqasc_validation_588", "prediction": "all x.((Apollo13(x) & Apollo13(x)) -> UsedForFlyingPropulsion(x))", "score": 0}
{"id": "eqasc_validation_588", "prediction": "all x y z.((Propulsion(x) & Apollo13(y) & Apollo13(z)) -> Flies(x,y,z))", "score": 0}
{"id": "eqasc_validation_588", "prediction": "all x.(Propulsion(x) -> UsedForFlying(x)) MessagesCamera(x,apollo13,apollo6))", "score": -1}
{"id": "eqasc_validation_588", "prediction": "all x.((Propulsion(x) & Apollo13(x)) -> UsedForFlying(x))", "score": 0}
{"id": "eqasc_validation_588", "prediction": "all x.(BuiltByApollo13(x) -> SpacePropulsion(x))", "score": 0}
{"id": "eqasc_validation_588", "prediction": "all x y.((Propulsion(x) & Apollo13(y)) -> PropelledBy(x,y))", "score": 0}
{"id": "eqasc_validation_588", "prediction": "all x y.((Propulsion(x) & Apollo13(y)) -> UsesForFlying(x,y))", "score": 0}
{"id": "eqasc_validation_588", "prediction": "(-apollo(a) & Apollo13(b)) -UsedForFlying(a))", "score": -1}
{"id": "eqasc_validation_588", "prediction": "all x y z.((Propulsion(x) & Apollo(y) & Apollo13(z) & UsedForFlying(x,y,z)) -> Apollo(y,x))", "score": 0}
{"id": "eqasc_validation_588", "prediction": "all x.(Apollo13(x) -> (UsedForFlying(x) & Apollo13(x)))", "score": 0}
{"id": "eqasc_validation_588", "prediction": "all x.(ApolloCrew(x) -> (UsedForFlying(x) & Apollo13(x)))", "score": 0}
{"id": "eqasc_validation_588", "prediction": "all x y.((Bust(x) & Apollo13(y) & Propulsion(x)) -> UsedForFlying(x,y))", "score": 0}
{"id": "eqasc_validation_588", "prediction": "all x y z.((Propulsion(x) & Apollo13(y) & Apollo13(z)) -> (UsedForFlight(x,y,z) & Apollo13(y,x)))", "score": 0}
{"id": "eqasc_validation_589", "prediction": "all x.(Rocket(x) -> OperatesOnFastPropulsion(x))", "score": 0}
{"id": "eqasc_validation_589", "prediction": "all x.(Raket(x) -> OperatesOnBasicPropulsionPrinciples(x))", "score": 0}
{"id": "eqasc_validation_589", "prediction": "all x y.((Rocket(x) & BasicPropulsionPrinciples(y)) -> OperatesOn(x,y))", "score": 0}
{"id": "eqasc_validation_589", "prediction": "all x.(Raket(x) -> OperatesOnBasicPrinciplesOfPropulsion(x))", "score": 0}
{"id": "eqasc_validation_589", "prediction": "all x.(Raket(x) -> OperatesOnSameBasicPropulsionPrinciples(x))", "score": 0}
{"id": "eqasc_validation_589", "prediction": "all x y.((Rocket(x) & BasicPropulsionPrinciple(y)) -> OperatesOn(x,y))", "score": 0}
{"id": "eqasc_validation_589", "prediction": "all x.(Raket(x) -> OperatesOnUniquePropulsionPrinciples(x))", "score": 0}
{"id": "eqasc_validation_589", "prediction": "all x.(Rocket(x) -> OperatesOnBasicPropulsion(x))", "score": 0}
{"id": "eqasc_validation_589", "prediction": "all x.(Raket(x) -> OperatesOnElementsOfPropulsion(x))", "score": 0}
{"id": "eqasc_validation_589", "prediction": "all x.(Rocket(x) -> OperatesOnSamePropulsionPrinciples(x))", "score": 0}
{"id": "eqasc_validation_589", "prediction": "all x.(Rapid(x) -> OperatesOnPropulsionPrinciples(x))", "score": 0}
{"id": "eqasc_validation_589", "prediction": "all x.(Raket(x) -> OperatesOnBasicPropulsion(x))", "score": 0}
{"id": "eqasc_validation_589", "prediction": "all x.(Raket(x) -> OperatesOnPropulsion(x,y))", "score": 0}
{"id": "eqasc_validation_590", "prediction": "all x y.((Spacecraft(x) & Rocket(y)) -> CanFlyWith(x,y))", "score": 0}
{"id": "eqasc_validation_590", "prediction": "all x.(Spacecraft(x) -> FliesWithRocket(x))", "score": 0}
{"id": "eqasc_validation_590", "prediction": "all x.(Spacecraft(x) -> CanFlyWithRakets(x))", "score": 0}
{"id": "eqasc_validation_590", "prediction": "all x.(Spacecraft(x) -> CanFlyWith(x,rattle))", "score": 0}
{"id": "eqasc_validation_590", "prediction": "all x.(Spacecraft(x) -> (CanFlyWithRakets(x)))", "score": 0}
{"id": "eqasc_validation_590", "prediction": "all x y.((Spacecraft(x) & Spacecraft(y)) -> CanFlyWithRockets(x))", "score": 0}
{"id": "eqasc_validation_590", "prediction": "all x.(Spacecraft(x) -> (FliesWithRatoon(x) | CanFlyWithRockets(x)))", "score": 0}
{"id": "eqasc_validation_590", "prediction": "all x.(Spacecraft(x) -> (CanFlyWithRockets(x) & Spacecraft(x)))", "score": 0}
{"id": "eqasc_validation_590", "prediction": "all x.(Spacecraft(x) -> CanFlyWithRockets(x))", "score": 0}
{"id": "eqasc_validation_590", "prediction": "all x.(Spacecraft(x) -> CanFlyWithRocket(x))", "score": 0}
{"id": "eqasc_validation_591", "prediction": "all x.(Apollo12(x) -> HitByLightning(x))", "score": 0}
{"id": "eqasc_validation_591", "prediction": "all x y.((Apollo12(x) & Spacecraft(y)) -> HitByLightning(y))", "score": 0}
{"id": "eqasc_validation_591", "prediction": "all x y.((Spacecraft(x) & Apollo12(y)) -> HitByLightning(x,y))", "score": 0}
{"id": "eqasc_validation_591", "prediction": "all x y.((Spacecraft(x) & Apollo(y)) -> HitByLightning(x,y))", "score": 0}
{"id": "eqasc_validation_591", "prediction": "all x y.((Apollo12(x) & Apollo12(y)) -> HitByLightning(y))", "score": 0}
{"id": "eqasc_validation_591", "prediction": "all x.(Lapto12(x) -> HitByLightning(x))", "score": 0}
{"id": "eqasc_validation_591", "prediction": "when Apollo 12 took off, the spacecraft was hit by lightning.", "score": -1}
{"id": "eqasc_validation_591", "prediction": "all x.((Spacecraft(x) & Apollo12(x)) -> HitByLightning(x))", "score": 0}
{"id": "eqasc_validation_591", "prediction": "all x.((Spacecraft(x) & Apollo12TakesOff(x)) -> HitByLightning(x))", "score": 0}
{"id": "eqasc_validation_591", "prediction": "all x y.((Apollo12(x) & TakeOff(x) & Spacecraft(y)) -> HitByLightning(y))", "score": 0}
{"id": "eqasc_validation_591", "prediction": "all x y z.((Planet(x) & Apollo12(y) & AtOperation(z) & Take Off(z,y)) -> HitByLightning(x,y,z))", "score": -1}
{"id": "eqasc_validation_591", "prediction": "all x.(Apollo12TakeOff(x) -> HitByLightning(x))", "score": 0}
{"id": "eqasc_validation_592", "prediction": "all x y z.((Propulsion(x) & Apollo12(y) & Apollo12(z)) -> UsedForFlying(x,y,z))", "score": 0}
{"id": "eqasc_validation_592", "prediction": "all x.((Propulsion(x) & Flying(x)) -> Apollo(x,y))", "score": 0}
{"id": "eqasc_validation_592", "prediction": "all x y.((Propulsion(x) & Apollo12(y)) -> UsedForFlying(x,y))", "score": 0}
{"id": "eqasc_validation_592", "prediction": "all x.((Propulsion(x) & Apollo12(x)) -> UsedForFlying(x))", "score": 0}
{"id": "eqasc_validation_592", "prediction": "all x y z w.((Apollo(z) & Apollo12(w) & Propulsion(z) & Propulsion(w)) -> UsedForFlying(z))", "score": 0}
{"id": "eqasc_validation_592", "prediction": "(UsedForFlyingByApollo12(Propulsion) & Apollo12(Propulsion))", "score": 0}
{"id": "eqasc_validation_592", "prediction": "all x y.((Apollo_12(x) & Apollo12(y)) -> (UsedForFlying(x,y) & UsedForFlying(x,y)))", "score": 0}
{"id": "eqasc_validation_592", "prediction": "all x.(Apollo12(x) -> FlightPropulsion(x))", "score": 0}
{"id": "eqasc_validation_592", "prediction": "all x y.((Apollo12(x) & Apollo12(y)) -> UsedForFlying(x,y))", "score": 0}
{"id": "eqasc_validation_592", "prediction": "All x.((Planet(x) & Apollo12(x)) -> UsedForFlying(x))", "score": -1}
{"id": "eqasc_validation_592", "prediction": "all x y.((Propulsion(x) & Apollo12(y)) -> UsedForFlyingBy(y,x))", "score": 0}
{"id": "eqasc_validation_592", "prediction": "all x y.((Propulsion(x) & Apollo(y)) -> UsedForFlying(x,y))", "score": 0}
{"id": "eqasc_validation_592", "prediction": "most popular fliers are Apollo 12's (OfPropulsion(apollo12a(a) & Apollo12(b)))", "score": -1}
{"id": "eqasc_validation_593", "prediction": "all x.(Propulsion(x) -> UsedForFlyingApollo(x))", "score": 0}
{"id": "eqasc_validation_593", "prediction": "all x.(PropulsionPropulsion(x) -> UsedForFlyingApollo13(x))", "score": 0}
{"id": "eqasc_validation_593", "prediction": "all x.(Propulsion(x) -> UsedForFlyingApollo13(x))", "score": 0}
{"id": "eqasc_validation_593", "prediction": "all x y z.((Propulsion(x) & Apollo13(y)) -> (Flying(z) | Flying(z))))", "score": -1}
{"id": "eqasc_validation_593", "prediction": "(Apollo(Propulsion) -> UsedForFlying(Propulsion))", "score": 0}
{"id": "eqasc_validation_593", "prediction": "all x y z.((Propulsion(x) & Apollo13(y) & Apollo13(z)) -> UsedForFlying(x,y,z))", "score": 0}
{"id": "eqasc_validation_593", "prediction": "all x.(Propulsion(x) -> FliesApollo13(x))", "score": 0}
{"id": "eqasc_validation_593", "prediction": "all x.((Propulsion(x) & Apollo13(x)) -> UsedFor(x,1 Apollo))", "score": -1}
{"id": "eqasc_validation_593", "prediction": "all x y.((Propulsion(x) & Apollo13(y)) -> UsedForFlying(x,y))", "score": 0}
{"id": "eqasc_validation_593", "prediction": "All x y.((Propulsion(x) & Apollo(y)) -> UsedForFlying(x,y))", "score": -1}
{"id": "eqasc_validation_594", "prediction": "all x.(Butter(x) -> (Fat(x) & SolidAtRoomTemperature(x)))", "score": 0}
{"id": "eqasc_validation_594", "prediction": "all x y.((ButterFat(x) & Fat(y)) -> (Fat(x) & SolidAtRoomTemperature(x)))", "score": 0}
{"id": "eqasc_validation_594", "prediction": "all x.((Butter(x) & Fat(x)) -> SolidAtRoomTemperature(x))", "score": 0}
{"id": "eqasc_validation_595", "prediction": "exists x.(Fat(x) & MoreLikelyToCauseHeartDisease(x))", "score": 0}
{"id": "eqasc_validation_595", "prediction": "exists x.(Fat(x) & CausesHeartDisease(x))", "score": 0}
{"id": "eqasc_validation_595", "prediction": "exists x.(Fat(x) & MoreLikelyToCause(x,HeartDisease))", "score": 0}
{"id": "eqasc_validation_596", "prediction": "all x.(Butter(x) -> HeartDisease(x))", "score": 0}
{"id": "eqasc_validation_596", "prediction": "all x.((Butter(x) & HeartDisease(x)) -> LeadsTo(x,HeartDisease))", "score": 0}
{"id": "eqasc_validation_596", "prediction": "all x y.((Butter(x) & HeartDisease(y)) -> LeadsTo(x,y))", "score": 0}
{"id": "eqasc_validation_596", "prediction": "all x.((Butter(x) & HeartDisease(x)) -> CanLeadTo(x,HeartDisease))", "score": 0}
{"id": "eqasc_validation_596", "prediction": "all x.((Butter(x) & HeartDisease(x)) -> LeadsTo(x,butter,crystaldisease))", "score": 0}
{"id": "eqasc_validation_596", "prediction": "all x.(Butter(x) -> CanLeadToHeartDeath(x))", "score": 0}
{"id": "eqasc_validation_596", "prediction": "all x.((Butter(x) & HeartDisease(x)) -> LeadsTo(x,Butter,HeartDisease,HeartDisease))", "score": 0}
{"id": "eqasc_validation_596", "prediction": "all x.(Butter(x) -> canLeadToHeartDisease(x))", "score": 0}
{"id": "eqasc_validation_596", "prediction": "all x.(Butter(x) -> (LeadsToHeartDisease(x) | HeartDiseaseAid(x)))", "score": 0}
{"id": "eqasc_validation_596", "prediction": "all x y.((Butter(x) & HeartDisease(y)) -> CanLeadTo(x,y))", "score": 0}
{"id": "eqasc_validation_597", "prediction": "(keepsClimateIn(eggs,cooler) & KeepsHeatIn(eggs,cooler))", "score": 0}
{"id": "eqasc_validation_597", "prediction": "(KeepsInCocktail(eggs,refrigerator) | KeepsInCocktail(ebbs,refrigerator)))", "score": -1}
{"id": "eqasc_validation_597", "prediction": "all x y z.((Egg(x) | Butter(x) | Margarine(x)) -> KeepsInClimate(x,y,z))", "score": 0}
{"id": "eqasc_validation_597", "prediction": "all x y.((Egg(x) | Butter(x) | Margarine(x)) -> KeepsInCooler(x,y))", "score": 0}
{"id": "eqasc_validation_597", "prediction": "all x y.((Egg(x) | Butter(x) | Margarine(x)) -> KeepsInCoolerAndRefrigerator(x,y))", "score": 0}
{"id": "eqasc_validation_597", "prediction": "all x y z.((Egg(x) & (Butter(y) | Margarine(y)) & Refrigerator(z)) -> KeepsInClimate(x,y,z))", "score": 0}
{"id": "eqasc_validation_597", "prediction": "all x y.((Egg(x) | Butter(x) | Margarine(x)) -> KeepsInClimate(x,y))", "score": 0}
{"id": "eqasc_validation_597", "prediction": "all x.((Egg(x) | Butter(x) | Margarine(x)) -> KeepsInCooler(x))", "score": 0}
{"id": "eqasc_validation_597", "prediction": "all x y.((Egg(x) | Butter(x) | Margarine(x)) -> (KeepsInChester(x) & KeepsInRefrigerator(y)))", "score": 0}
{"id": "eqasc_validation_597", "prediction": "all x y.((Egg(x) | Butter(x) | Margarine(x)) -> KeepsInColder(x,y))", "score": 0}
{"id": "eqasc_validation_597", "prediction": "((Egg(Egg) | Butter(Egg) | Margarine(Egg))) -> KeepsInColder(Egg,Refrigerator))", "score": -1}
{"id": "eqasc_validation_597", "prediction": "all x y.(((Eggs(x) | Butter(x) | Margarine(x)) & Refrigerator(y)) -> KeepsIn(x,y))", "score": 0}
{"id": "eqasc_validation_598", "prediction": "all x.((Fiber(x) & SolidAtRoomTemperature(x)) -> Cooler(x))", "score": 0}
{"id": "eqasc_validation_598", "prediction": "all x.((Fat(x) & SolidAtRoomTemperature(x)) -> CanBeKeptInCooler(x))", "score": 0}
{"id": "eqasc_validation_598", "prediction": "all x.((Fat(x) & SolidAtRoomTemperature(x)) -> ClockwiseClimate(x))", "score": 0}
{"id": "eqasc_validation_598", "prediction": "all x.((Fat(x) & SolidAtRoomTemperature(x)) -> CanBeKeptInCocker(x))", "score": 0}
{"id": "eqasc_validation_598", "prediction": "all x.((Fat(x) & SolidRawTemperature(x)) -> Cooler(x))", "score": 0}
{"id": "eqasc_validation_598", "prediction": "all x y.((Fat(x) & SolidAtRoomTemperature(x) & RoomTemperature(y)) -> CanBeKeptInCooler(x,y))", "score": 0}
{"id": "eqasc_validation_599", "prediction": "all x.(Butter(x) -> ContainsSaturatedFats(x))", "score": 0}
{"id": "eqasc_validation_599", "prediction": "all x.(Butter(x) -> (ContainsSaturatedFats(x)))", "score": 0}
{"id": "eqasc_validation_599", "prediction": "all x.(Butter(x) -> SaturatedFats(x))", "score": 0}
{"id": "eqasc_validation_599", "prediction": "exists x.(Butter(x) & ContainsSaturatedFats(x))", "score": 0}
{"id": "eqasc_validation_599", "prediction": "all x y.((Butter(x) & Fats(y)) -> Contains(x,y))", "score": 0}
{"id": "eqasc_validation_600", "prediction": "all x.(SaturatedFat(x) -> SolidAtRoomTemperature(x))", "score": 0}
{"id": "eqasc_validation_600", "prediction": "all x y.((SaturatedFat(x) & RoomTemperature(y)) -> Solid(x))", "score": 0}
{"id": "eqasc_validation_600", "prediction": "all x.((SaturatedFat(x) & RoomTemperature(x)) -> SolidAtRoomTemperature(x))", "score": 0}
{"id": "eqasc_validation_600", "prediction": "SaturatedFat(Fat,100) - SolidAtRoomTemperature(Fat,SaturatedAtRoomTemperature))", "score": -1}
{"id": "eqasc_validation_600", "prediction": "all x y z.((SaturatedFat(x) & RoomTemperature(y) & RoomTemperature(z)) -> SolidFat(x,y,z))", "score": 0}
{"id": "eqasc_validation_600", "prediction": "all x y.((Fat(x) & RoomTemperature(y) & SolidAt(x,y)) -> Saturated(x))", "score": 0}
{"id": "eqasc_validation_601", "prediction": "all x y.((SaturatedFat(x) & RoomTemperature(y)) -> SolidAt(x,y))", "score": 0}
{"id": "eqasc_validation_601", "prediction": "all x.(SaturatedFat(x) -> SolidAtRoomTemperature(x))", "score": 0}
{"id": "eqasc_validation_601", "prediction": "all x.(SaturatedFat(x) => SolidAtRoomTemperature(x))", "score": 0}
{"id": "eqasc_validation_601", "prediction": "all x.((SaturatedFat(x) & RoomTemperature(x)) -> Solid(x))", "score": 0}
{"id": "eqasc_validation_601", "prediction": "all x.((Fat(x) & Saturated(x)) -> SolidAtRoomTemperature(x))", "score": 0}
{"id": "eqasc_validation_601", "prediction": "all x y.((Fat(x) & SolidAtRoomTemperature(y)) -> Saturated(x,y))", "score": 0}
{"id": "eqasc_validation_602", "prediction": "all x.(Butter(x) -> (SaturatedFat(x) & Fat(x) & SaturatedFat(x) & Fat(x)))", "score": 0}
{"id": "eqasc_validation_602", "prediction": "all x.(Butter(x) -> (SaturatedFat(x) & Fat(x)))", "score": 0}
{"id": "eqasc_validation_602", "prediction": "all x.(Butter(x) -> (SaturatedFat(x) & SaturatedFat(x) & SaturatedFat(x)))", "score": 0}
{"id": "eqasc_validation_602", "prediction": "all x.(Butter(x) -> SaturatedFat(x))", "score": 0}
{"id": "eqasc_validation_602", "prediction": "all x.(Butter(x) -> (SaturatedFat(x) & SaturatedFat(x)))", "score": 0}
{"id": "eqasc_validation_602", "prediction": "all x.(Butter(x) -> (SaturatedFat(x) = SatisfiedFat(x)))", "score": 0}
{"id": "eqasc_validation_602", "prediction": "all x y z w.((Butter(x) & SatelliteFat(y) & Fat(z) & SatelliteFat(w)) -> SaturatedFat(x,y,z))", "score": 0}
{"id": "eqasc_validation_602", "prediction": "all x.(Butter(x) -> (SaturatedFat(x) & SaltyFat(x)))", "score": 0}
{"id": "eqasc_validation_603", "prediction": "all x.((SaturatedFat(x) & ButterBond(x) & AmbientTemperature(x)) -> MakesSolid(x))", "score": 0}
{"id": "eqasc_validation_603", "prediction": "all x.(SaturatedFat(x) -> MakesButterSolidAtAmbientTemperature(x))", "score": 0}
{"id": "eqasc_validation_603", "prediction": "all x y.((SaturatedFat(x) & Butter(y)) -> MakesButterSolidAtAmbientTemperature(x,y))", "score": 0}
{"id": "eqasc_validation_603", "prediction": "all x y.((SaturatedFat(x) & Butter(y)) -> (MadeSilent(x,y) & AmbientTemperatures(x,y)))", "score": 0}
{"id": "eqasc_validation_603", "prediction": "all x y.((SaturatedFat(x) & Butter(y) & AmbientTemperature(x)) -> InventedAt(x,y))", "score": 0}
{"id": "eqasc_validation_603", "prediction": "all x y z.((SaturatedFat(x) & Butter(y) & AmbientTemperature(z)) -> SolidAt(y,z))", "score": 0}
{"id": "eqasc_validation_603", "prediction": "all x.((SaturatedFat(x) & (AmbientTemperature(x) | AmbientTemperature(x))) -> MakesButterSolid(x))", "score": 0}
{"id": "eqasc_validation_603", "prediction": "all x y.((SaturatedFat(x) & Butter(y) & AmbientTemperature(y)) -> MakesStillAt(x,y))", "score": 0}
{"id": "eqasc_validation_603", "prediction": "all x y.((SaturatedFat(x) & Butter(y) & AmbientTemperature(z)) -> Makes(x,y))", "score": 0}
{"id": "eqasc_validation_603", "prediction": "all x.((Fat(x) & Saturated(x)) -> SolidButter(x))", "score": 0}
{"id": "eqasc_validation_603", "prediction": "all x.(SaturatedFat(x) -> MakesButterSolidAtAmbientTemperatures(x))", "score": 0}
{"id": "eqasc_validation_603", "prediction": "all x y.((SaturatedFat(x) & Butter(y)) -> MakesSolidAtAmbientTemperatures(x,y))", "score": 0}
{"id": "eqasc_validation_603", "prediction": "all x.(SaturatedFats(x) -> MakesButterSolidAtAmbientTemperatures(x))", "score": 0}
{"id": "eqasc_validation_603", "prediction": "all x.((SaturatedFat(x) & ButterSolidAtAmbientTemperature(x)) -> Makes(x,saturatedFats))", "score": 0}
{"id": "eqasc_validation_604", "prediction": "all x.((RoomTemperature(x) & -(7075°Fidenheit) | (75C,5S)))) -> AcceptableForSmallSpecies(x))", "score": -1}
{"id": "eqasc_validation_604", "prediction": "all x.((RoomTemperature(x) & Temperature(x,70) & Temperature(x,75)) -> AcceptableForMostSpecies(x))", "score": 0}
{"id": "eqasc_validation_604", "prediction": "all x.((RoomTemperature(x) & (70-75Federnheit(x) | (-72Federnheit(x) | 35Federnheit(x)))) -> AcceptableForMostSpecies(x))", "score": -1}
{"id": "eqasc_validation_604", "prediction": "all x.((RoomTemperature(x) & 60-75KF(x)) -> AcceptableToMostSpecies(x))", "score": -1}
{"id": "eqasc_validation_604", "prediction": "all x.((RoomTemperature(x) & Temperature(x,70) | Temperature(x,75))) -> AcceptableToNorstySpecies(x))", "score": -1}
{"id": "eqasc_validation_604", "prediction": "all x y.((RoomTemperature(x) & Animal(y)) -> (NormalFrom70Fostenheit(x,y) | Acceptable(x,y)))", "score": 0}
{"id": "eqasc_validation_604", "prediction": "all x.((Room(x) & 60DegreeFreshness(x)) -> AcceptableToMostSpecies(x))", "score": 0}
{"id": "eqasc_validation_604", "prediction": "all x.((RoomTemperature(x) & 70KF(x) & 75KF(x)) -> Acceptable(x))", "score": 0}
{"id": "eqasc_validation_604", "prediction": "all x.(RoomTemperature(x) -> (70-75Fahrenheit(x) | AcceptableToMostSpecies(x)))", "score": -1}
{"id": "eqasc_validation_604", "prediction": "(Borrows(RoomTemperature) -> (707374(Room) & Temperature(Room) & Temperature(Room,0,70)))", "score": 0}
{"id": "eqasc_validation_604", "prediction": "all x.((RoomTemperature(x) & (70-75DegreesFederal(x) | (-70) | 75(x)))) -> AcceptableToMostSpecies(x)))", "score": -1}
{"id": "eqasc_validation_604", "prediction": "all x.((RoomTemperature(x) & BoilingCast,Daily(x) & Temperatures(x,Darkness,75)) -> AcceptableToMostSpecies(x))", "score": -1}
{"id": "eqasc_validation_604", "prediction": "all x y.((Room(x) & Temperature(y) & 70-75Federnhiz(x)) -> Acceptable(x))", "score": -1}
{"id": "eqasc_validation_604", "prediction": "all x.((RoomTemperature(x) & Temperature(x,60,70) & Temperature(x,75)) -> AdequateForSameSpecies(x))", "score": 0}
{"id": "eqasc_validation_604", "prediction": "(CalibratingRoomTemperatures(x,70) & CoolingRoomTemperatures(x,75))", "score": 0}
{"id": "eqasc_validation_604", "prediction": "all x.((RoomTemperature(x) & TemperaturesOf70Than75FederalThan(x)) -> AcceptableToMostSpecies(x))", "score": 0}
{"id": "eqasc_validation_605", "prediction": "all x y.((Butter(x) & Fat(y)) -> (Fat(y) & SolidAt70-775DegreesFahrenheit(x,y)))", "score": -1}
{"id": "eqasc_validation_605", "prediction": "all x.( Butter(x) -> (Fat(x,70) & SolidAt(x,75)))", "score": 0}
{"id": "eqasc_validation_605", "prediction": "all x.(Butter(x) -> (Fat(x) & SolidAt7075Federnheit(x)))", "score": 0}
{"id": "eqasc_validation_605", "prediction": "all x.(Butter(x) -> (Fat(x) & SolidAt70To75DegreesFederheit(x)))", "score": 0}
{"id": "eqasc_validation_605", "prediction": "all x.(Butter(x) -> (Fat(x) & SolidAtCentury(x,70) & SolidAtCentury(x,75) & WithNature(x,70)))", "score": 0}
{"id": "eqasc_validation_605", "prediction": "all x.(Butter(x) -> (Fat(x) & SolidAt7075(x) & WellAtSeptKittsburgh(x)))", "score": 0}
{"id": "eqasc_validation_605", "prediction": "all x.(Butter(x) -> (Fat(x) & SolidAt70Than75Fosstenheit(x)))", "score": 0}
{"id": "eqasc_validation_605", "prediction": "all x.(Butter(x) -> (Fat(x) & SolidAt(x,70) & SolidAt(x,75)))", "score": 0}
{"id": "eqasc_validation_605", "prediction": "all x.(Butter(x) -> (Fat(x) & SolidAt70-75Federnheit(x)))", "score": -1}
{"id": "eqasc_validation_605", "prediction": "all x.(Butter(x) -> Fat(x) & SolidAt7075Federheit(x))", "score": 0}
{"id": "eqasc_validation_605", "prediction": "all x y.((Butter(x) & Fat(y) & SolidAt(y,65,75 degrees)) -> Fat(x))", "score": -1}
{"id": "eqasc_validation_605", "prediction": "all x.(Butter(x) -> (Fat(x,70) & Solid(x,75)))", "score": 0}
{"id": "eqasc_validation_605", "prediction": "all x.(Butter(x) -> (Fat(x) & SolidAt70-75Funnheit(x)))", "score": -1}
{"id": "eqasc_validation_606", "prediction": "all x.((RoomTemperature(x) & (40-80Federnheit(x) | (3-5Celsius(x) | 27Celsius(x)))) -> BetterForStorage(x))", "score": -1}
{"id": "eqasc_validation_606", "prediction": "all x.((RoomTemperature(x) & (Feb.42(x) & Feb.80(x)) | B.Climate(x,5))) -> BestForStorage(x))", "score": -1}
{"id": "eqasc_validation_606", "prediction": "all x.((RoomTemperature(x) & (40Firth(x) | 80Firth(x) | 5Firth(x,27F))) -> BestForStorage(x))", "score": 0}
{"id": "eqasc_validation_606", "prediction": "all x.((RoomTemperature(x) & (40Federnheit(x) | 80Federnheit(x) | 25Federnitud/(Celsius(x)))) -> BestForStorage(x))", "score": 0}
{"id": "eqasc_validation_606", "prediction": "all x.((RoomTemperature(x) & (40-80Federnheit(x) | (-43Federnheit(x) | -31Federnite(x)))) -> BestForStorage(x))", "score": -1}
{"id": "eqasc_validation_606", "prediction": "all x.((RoomTemperature(x) & (40-80Fuel(x) | 5-27Celsius(x))) -> BestForStorage(x))", "score": -1}
{"id": "eqasc_validation_606", "prediction": "all x.(RoomTemperature(x) -> ((40Foot(x) | 80Foot(x)) | (-5Celsius(x) | 27Celsius(x)))))", "score": -1}
{"id": "eqasc_validation_606", "prediction": "all x.((RoomTemperature(x) & (-40.(Freshness) | 80(f)) | 28(f))) -> BestForStorage(x))", "score": -1}
{"id": "eqasc_validation_606", "prediction": "all x.((RoomTemperature(x) & (40Fostenheit(x) | 80Fuelheit(x) | 5FuelCelsius(x))) -> BestForStorage(x))", "score": 0}
{"id": "eqasc_validation_606", "prediction": "all x.((RoomTemperature(x) & (40+80Fessenheit(x) | 5+27Celsius(x))) -> BestForStorage(x))", "score": 0}
{"id": "eqasc_validation_606", "prediction": "all x.((RoomTemperature(x) & (40-80Federnheit(x) | 5-27Celsius(x))) -> BestForStorage(x))", "score": -1}
{"id": "eqasc_validation_606", "prediction": "all x.((RoomTemperature(x) & (40Federnheit(x) | 80Federnheit(x) | 5Federnheit(x) | 27Celsius(x))) -> BestForStorage(x))", "score": 0}
{"id": "eqasc_validation_606", "prediction": "all x.((RoomTemperature(x,40) & 80Federnheit(x) & (-5Celsius(x,27))) -> BestForStorage(x))", "score": 0}
{"id": "eqasc_validation_606", "prediction": "all x.((RoomTemperature(x,40) & 85(x)) | (Temperature(x,5) | Temperature(x,27))))", "score": -1}
{"id": "eqasc_validation_606", "prediction": "all x.((RoomTemperature(x) & (40Feier(x) | 80Feier(x) | 5Feier(x) | 27Feier(x))) -> BestForStorage(x))", "score": 0}
{"id": "eqasc_validation_606", "prediction": "all x.((Room(x) & Temperature(x,0,10) & (40FebStock(x) | 70FebStock(x))) -> BestForStorage(x))", "score": 0}
{"id": "eqasc_validation_607", "prediction": "all x.(Butter(x) -> (Fat(x) & SolidInHerrity(x,-5) & SolidInHerrity(x,27)))", "score": 0}
{"id": "eqasc_validation_607", "prediction": "all x.(Butter(x) -> (Fat(x) & Solid(x) & Between(x,5) & Between(x,27)))", "score": 0}
{"id": "eqasc_validation_607", "prediction": "all x.(Butter(x) -> (Fat(x) & Solid(x),5 & Hard(x,27)))", "score": -1}
{"id": "eqasc_validation_607", "prediction": "all x.(Butter(x) -> (Fat(x) & SolidBetween(x,5,27)))", "score": 0}
{"id": "eqasc_validation_607", "prediction": "all x.(Butter(x) -> (Fat(x) & SolidBetween(x,5 & 27Celsius)))", "score": -1}
{"id": "eqasc_validation_607", "prediction": "all x.(Butter(x) -> (Fat(x) & SolidBetween(x,5 & 27)))", "score": -1}
{"id": "eqasc_validation_607", "prediction": "all x.(Butter(x) -> (Fat(x) & SolidBetween(x,5) & SolidBetween(x,27)))", "score": 0}
{"id": "eqasc_validation_607", "prediction": "(Fat( Butter) & SolidBoth(Fat) & Between5And27Celsius(Butter))", "score": 0}
{"id": "eqasc_validation_607", "prediction": "all x.(Butter(x) -> (Fat(x) & SolidOnThan(x,5) & SolidOnThan(x,27)))", "score": 0}
{"id": "eqasc_validation_607", "prediction": "all x.(Butter(x) -> (Fat(x) & SolidAfter5And27Celsius(x)))", "score": 0}
{"id": "eqasc_validation_608", "prediction": "exists x.(Butter(x) & SolidAtRoomTemperature(x) & Saturated(x))", "score": 0}
{"id": "eqasc_validation_608", "prediction": "all x.((Butter(x) & SolidAtRoomTemperature(x)) -> Saturated(x))", "score": 0}
{"id": "eqasc_validation_608", "prediction": "(SolidAtRoomTemperature(Butter) & MostlySaturated(Butter))", "score": 0}
{"id": "eqasc_validation_608", "prediction": "all x y.((Butter(x) & RoomTemperature(y) & SolidAt(x,y)) -> PrimarilySaturated(x))", "score": 0}
{"id": "eqasc_validation_608", "prediction": "all x.((Butter(x) & StolenAtRoomTemperature(x)) -> MostlySaturated(x))", "score": 0}
{"id": "eqasc_validation_608", "prediction": "(Solid(Butter) & RoomTemperature(Butter) & MostlySaturated(Butter))", "score": 0}
{"id": "eqasc_validation_608", "prediction": "all x.((Butter(x) & SolidAtRoomTemperature(x)) -> MostlySaturated(x))", "score": 0}
{"id": "eqasc_validation_608", "prediction": "(all x.(Butter(x) -> SolidAtRoomTemperature(x)) & saturatedAtRoomTemperature(x))", "score": 0}
{"id": "eqasc_validation_608", "prediction": "all x y,z.((Butter(x) & RoomTemperature(y) & SolidAt(x,y)) -> Seamless(x))", "score": -1}
{"id": "eqasc_validation_608", "prediction": "all x.(Butter(x) -> (SolidAtRoomTemperature(x) & MostlySaturated(x)))", "score": 0}
{"id": "eqasc_validation_608", "prediction": "all x.(Butter(x) -> (SolidAtRoomTemperature(x) & Saline(x)))", "score": 0}
{"id": "eqasc_validation_608", "prediction": "all x.((Butter(x) & SolidAtRoomTemperature(x) & Saturated(x)) -> SolidAtRoomTemperature(x))", "score": 0}
{"id": "eqasc_validation_608", "prediction": "all x y z.((Butter(x) & RoomTemperature(y) & RoomTemperature(z)) -> (Solid(x) & Saturated(x)))", "score": 0}
{"id": "eqasc_validation_609", "prediction": "all x.(Silent(x) -> CloselyPackaged(x))", "score": 0}
{"id": "eqasc_validation_609", "prediction": "all x.(Solid(x) -> (ComposedOfCloselyPackagedMolecules(x)))", "score": 0}
{"id": "eqasc_validation_609", "prediction": "all x.(Solid(x) -> (ComposedOfFullyPackagedMolecules(x)))", "score": 0}
{"id": "eqasc_validation_609", "prediction": "all x.(Solid(x) -> (ComposedOfConsistentMolecules(x) & CloselyPacked(x)))", "score": 0}
{"id": "eqasc_validation_609", "prediction": "all x.(Solid(x) -> (ComposedOfNearlyPackaged(x) & Molecule(x)))", "score": 0}
{"id": "eqasc_validation_609", "prediction": "all x.(Solid(x) -> (ComposedOfLengthlyPackedMolecules(x)))", "score": 0}
{"id": "eqasc_validation_609", "prediction": "all x.(Solid(x) -> (ComposedOfConnectivelyPackedMolecules(x)))", "score": 0}
{"id": "eqasc_validation_609", "prediction": "all x y.((Solid(x) & Molecule(y)) -> ComposedOf(x,y))", "score": 0}
{"id": "eqasc_validation_609", "prediction": "all x.(Solid(x) -> CloselyPackagedMolecule(x))", "score": 0}
{"id": "eqasc_validation_609", "prediction": "all x y.((Solid(x) & Molecular(y)) -> ComposedOf(x,y))", "score": 0}
{"id": "eqasc_validation_609", "prediction": "all x.(Solid(x) -> (ComposedOfAccuratelyPackedMolecules(x)))", "score": 0}
{"id": "eqasc_validation_609", "prediction": "all x y.((Solid(x) & CloselyPackagedMolecules(y)) -> ComposedOf(x,y))", "score": 0}
{"id": "eqasc_validation_609", "prediction": "all x y.((Solid(x) & Molecule(y)) -> CleverlyPacked(x,y))", "score": 0}
{"id": "eqasc_validation_609", "prediction": "all x.(Solid(x) -> (ComposedOfStronglyPackedMolecules(x)))", "score": 0}
{"id": "eqasc_validation_609", "prediction": "all x.(Solid(x) -> (ComposedOfCloselyPackedMolecularogy(x) & Contains(x,y) & CloselyPackaged(x,z) & Contains(y,z)))", "score": 0}
{"id": "eqasc_validation_609", "prediction": "all x.(Solid(x) -> (ComposedOfCloselyPacketedMolecules(x)))", "score": 0}
{"id": "eqasc_validation_610", "prediction": "all x y.((Butter(x) & WellPacked(y) & Enhanced(y)) -> FAT(x))", "score": 0}
{"id": "eqasc_validation_610", "prediction": "all x y.((Butter(x) & Lyophile(y)) -> (Fat(x) & CloselyPackedMolecules(x,y) & RoomTemperature(y)))", "score": 0}
{"id": "eqasc_validation_610", "prediction": "all x.(Butter(x) -> (Fat(x) & ComesAbovePackedMolecules(x) & RoomTemperature(x)))", "score": 0}
{"id": "eqasc_validation_610", "prediction": "all x.(Butter(x) -> (Fat(x) & CondensedOfConsistentMolecules(x) & RoomTemperature(x)))", "score": 0}
{"id": "eqasc_validation_610", "prediction": "all x.(Butter(x) -> (Fat(x) & ComposedOfCloselyPackagedMoleculesNearRoomTemperature(x)))", "score": 0}
{"id": "eqasc_validation_610", "prediction": "all x.(Butter(x) -> (Fat(x) & ComposedOfFlexiblyPackedMolecularsAtRoomTemperature(x)))", "score": 0}
{"id": "eqasc_validation_610", "prediction": "all x.(Butter(x) -> (Fat(x) & ComposedOfCloselyPackagedMolecules(x) & RoomTemperature(x)))", "score": 0}
{"id": "eqasc_validation_610", "prediction": "all x.(Butter(x) -> (Fat(x) & CloselyPackaged(x) & RoomTemperature(x)))", "score": 0}
{"id": "eqasc_validation_610", "prediction": "all x.(Butter(x) -> (Fat(x) & ComposedOfFast(x) & GlucoselyPackedMoleculesAtRoomTemperature(x)))", "score": 0}
{"id": "eqasc_validation_610", "prediction": "all x.(Butter(x) -> (Fat(x) & ComposedOfConsistentTarget(x) & HighlyPackagedMolecules(x) & RoomTemperature(x)))", "score": 0}
{"id": "eqasc_validation_610", "prediction": "all x.((Butter(x) & GlucoseFree(x) & RoomTemperature(x)) -> Fat(x))", "score": 0}
{"id": "eqasc_validation_610", "prediction": "all x.(Butter(x) -> (Fat(x) & ComposedOfFragileMolecules(x) & RoomTemperature(x)))", "score": 0}
{"id": "eqasc_validation_610", "prediction": "all x y.((Butter(x) & Fat(y)) -> (Fat(x,y) & ComposedOf(y,x) & LocatedAtRoomTemperature(y,x)))", "score": 0}
{"id": "eqasc_validation_610", "prediction": "all x.(Butter(x) -> (Fat(x) & ContainsCorrosionPackedMolecules(x) & RoomTemperature(x)))", "score": 0}
{"id": "eqasc_validation_610", "prediction": "all x.(Butter(x) -> (Fat(x) & CloselyPackagedMolecules(x) & RoomTemperature(x)))", "score": 0}
{"id": "eqasc_validation_610", "prediction": "all x.(Butter(x) -> (Fat(x) & ComposedOfConsistentlyPackedMolecules(x) & RoomTemperature(x)))", "score": 0}
{"id": "eqasc_validation_611", "prediction": "all x y.((Bile(x) & Food(y)) -> ReducesAcidity(x,y))", "score": 0}
{"id": "eqasc_validation_611", "prediction": "all x.(Bile(x) -> ReducesAcidity(x))", "score": 0}
{"id": "eqasc_validation_611", "prediction": "all x y.((Bile(x) & Food(y)) -> ReducesAcidityOr(x,y))", "score": 0}
{"id": "eqasc_validation_611", "prediction": "all x y z.((Bile(x) & Food(y) & Sophistic(z)) -> ReducesAcidity(x,y,z))", "score": 0}
{"id": "eqasc_validation_611", "prediction": "all x y z.((Bile(x) & Food(y) & HighlyAcidicStomach(z)) -> ReducesAcidity(x,y,z))", "score": 0}
{"id": "eqasc_validation_611", "prediction": "all x.(Bile(x) -> ReducesAcidityOfFood(x))", "score": 0}
{"id": "eqasc_validation_611", "prediction": "all x.((Bile(x) & AcidityOfFood(x) & EnteringFromHighlyAcidStomach(x)) -> Reduces(x))", "score": 0}
{"id": "eqasc_validation_611", "prediction": "all x y.((Bile(x) & Food(y) & EntersFromCruellyAcidStomach(x)) -> ReducesAcidityOfFood(x,y))", "score": 0}
{"id": "eqasc_validation_611", "prediction": "all x y.((Blimine(x) & FoodEntry(y)) -> ReducesAcidityOf(x,y))", "score": 0}
{"id": "eqasc_validation_611", "prediction": "all x y.((Bile(x) & Food(y) & EntersFromAcidStomach(x,y)) -> ReducesAcidity(x,y))", "score": 0}
{"id": "eqasc_validation_611", "prediction": "all x y.((Bile(x) & Food(y) & EnteringFromAcidStomach(x,y)) -> ReducesAcidity(x,y))", "score": 0}
{"id": "eqasc_validation_611", "prediction": "all x y.((Bile(x) & Food(y) & EnteringFrom(x,y)) -> ReducesAcidity(x,y))", "score": 0}
{"id": "eqasc_validation_611", "prediction": "all x y.((Bile(x) & Food(y) & EnteringFromHighlyAciditicStomach(x,y)) -> ReducesAcidity(x,y))", "score": 0}
{"id": "eqasc_validation_611", "prediction": "all x.(Bile(x) -> ReducesAcidityOfFoodInvading(x))", "score": 0}
{"id": "eqasc_validation_612", "prediction": "all x y z.((Gallbladder(x) & Meal(y) & BilePathway(z) & HasPedals(x,z)) -> ReleasesRelease(x,z))", "score": 0}
{"id": "eqasc_validation_612", "prediction": "all x y.((Cowder(x) & Meal(y)) -> ReleasesBile(x,y))", "score": 0}
{"id": "eqasc_validation_612", "prediction": "all x y.((Glidebladder(x) & Meal(y)) -> ReleasesBile(x,y))", "score": 0}
{"id": "eqasc_validation_612", "prediction": "all x y.((Gallbladder(x) & Meal(y)) -> ReleasesBile(x,y))", "score": 0}
{"id": "eqasc_validation_612", "prediction": "all x y.((Galbladder(x) & Meal(y)) -> ReleasesBile(x,y))", "score": 0}
{"id": "eqasc_validation_612", "prediction": "all x y z.((Gallbladder(x) & Meal(y) & BileDuct(z)) -> ReleasesThrough(x,z))", "score": 0}
{"id": "eqasc_validation_612", "prediction": "all x y z.((Gallbladder(x) & Meal(y) & BileDuct(z)) -> Releases(x,y,z))", "score": 0}
{"id": "eqasc_validation_612", "prediction": "all x y.((Galbladder(x) & Meal(y) & BileDuct(x) & Releases(x,y)) -> Releases(x,y))", "score": 0}
{"id": "eqasc_validation_612", "prediction": "all x.((Gallbladder(x) & Meal(x)) -> ReleasesBiline(x))", "score": 0}
{"id": "eqasc_validation_612", "prediction": "all x y.((Gylbladder(x) & Meal(y)) -> ReleasesBiline(x,y))", "score": 0}
{"id": "eqasc_validation_612", "prediction": "all x y.((Gallbladder(x) & Meal(y)) -> (ReleasesBile(x,y) & KnownFacility(x,y)))", "score": 0}
{"id": "eqasc_validation_612", "prediction": "all x.((Gallbladder(x) & Meal(x)) -> ReleasesBile(x))", "score": 0}
{"id": "eqasc_validation_613", "prediction": "all x.(Gallbladder(x) -> ReducesAcidityOfFood(x))", "score": 0}
{"id": "eqasc_validation_613", "prediction": "all x.(Galbladder(x) -> ReducesAcidityOfFood(x))", "score": 0}
{"id": "eqasc_validation_613", "prediction": "all x.(Glomadder(x) -> ReducesAcidityOfFood(x))", "score": 0}
{"id": "eqasc_validation_613", "prediction": "all x y.((Gallbladder(x) & Food(y)) -> ReducesAcidity(x,y))", "score": 0}
{"id": "eqasc_validation_613", "prediction": "all x.(GalbladderFunction(x) -> ReduceAcidityOfFood(x))", "score": 0}
{"id": "eqasc_validation_614", "prediction": "all x y.((Bile(x) & Lipitor(y) & MadeBy(x,y)) -> StoredInGallbladder(x))", "score": 0}
{"id": "eqasc_validation_614", "prediction": "all x y.((Bile(x) & Liver(y) & MadeBy(x,y)) -> StoredInGallbladder(x))", "score": 0}
{"id": "eqasc_validation_614", "prediction": "all x y z.((Bile(x) & Liver(y) & Gallbladder(z)) -> (MadeBy(x,y) & StoredIn(x,z)))", "score": 0}
{"id": "eqasc_validation_614", "prediction": "all x.(Bile(x) -> (MadeByLiver(x) & StoredInGallbladder(x)))", "score": 0}
{"id": "eqasc_validation_614", "prediction": "all x y z.((Fluid(x) & Bile(y) & Liver(z) & MadeBy(x,y)) -> StoredInGallbladder(x))", "score": 0}
{"id": "eqasc_validation_614", "prediction": "all x.((FluidMadeByLiver(x) & StoredInGallbladder(x)) -> Bile(x))", "score": 0}
{"id": "eqasc_validation_614", "prediction": "all x.((Fluid(x) & MadeByLiver(x)) -> StoredInGallbladder(x))", "score": 0}
{"id": "eqasc_validation_614", "prediction": "all x y.((Bile(x) & Liver(y)) -> MadeBy(x,y))", "score": 0}
{"id": "eqasc_validation_614", "prediction": "all x y.((Fluid(x) & Bile(y)) -> (MadeByLiver(x,y) & StoredInGalbladder(x)))", "score": 0}
{"id": "eqasc_validation_614", "prediction": "all x y.((MadeByLiver(x) & Bile(y) & StovedInGallbladder(x,y)) -> LiverFluid(y))", "score": 0}
{"id": "eqasc_validation_614", "prediction": "all x y.((Bile(x) & LiverFluid(y)) -> (MadeBy(x,y) & StoredInGalbladder(x)))", "score": 0}
{"id": "eqasc_validation_614", "prediction": "all x.(Bile(x),y) -> (FluidMadeByLiver(x,y) & StoredInGallbladder(x)))", "score": -1}
{"id": "eqasc_validation_614", "prediction": "all x y.((MadeByLiver(x,y) & Fluid(y)) -> StoredInGallbladder(x))", "score": 0}
{"id": "eqasc_validation_614", "prediction": "all x.((Fluid(x) & MadeByLiver(x)) -> StoredInGalbladder(x))", "score": 0}
{"id": "eqasc_validation_615", "prediction": "all x.(Gallbladder(x) -> (StoresFloid(x) & ReducesAcidityOfFood(x)))", "score": 0}
{"id": "eqasc_validation_615", "prediction": "all x.(Galbladder(x) -> StoresFluid(x,acidity,food))", "score": 0}
{"id": "eqasc_validation_615", "prediction": "all x y.((Galbladder(x) & Fluid(y)) -> StoresReducesAcidityOfFood(x,y))", "score": 0}
{"id": "eqasc_validation_615", "prediction": "all x y.((Gallbladder(x) & Food(y)) -> StoresFluid(x,y) & ReducesAcidity(x,y))", "score": 0}
{"id": "eqasc_validation_615", "prediction": "all x.(Gallbladder(x) -> (StoresFluid(x) & ReducesAcidityOfFood(x)))", "score": 0}
{"id": "eqasc_validation_615", "prediction": "all x y.((Galbladder(x) & Food(y)) -> StoresFluid(x,y))", "score": 0}
{"id": "eqasc_validation_615", "prediction": "all x.(Galbladder(x) -> (StoresFluid(x) & ReducesAcidityOfFood(x)))", "score": 0}
{"id": "eqasc_validation_615", "prediction": "all x.(Gallbladder(x) -> (StoresFluid(x) & ReducesAcidity(x)))", "score": 0}
{"id": "eqasc_validation_615", "prediction": "all x y z.((Gallbladder(x) & Fluid(y) & Food(z)) -> Stores(x,y))", "score": 0}
{"id": "eqasc_validation_615", "prediction": "all x y z.((Gallbladder(x) & Fluid(y) & Food(z) & Stores(x,y) & ReducesAcidity(x,z)) -> Galbladder(x))", "score": 0}
{"id": "eqasc_validation_615", "prediction": "all x y.((Gallbladder(x) & Food(y)) -> StoresFluid(x,y))", "score": 0}
{"id": "eqasc_validation_615", "prediction": "all x y.((Gallbladder(x) & Food(y)) -> (StoresFluid(x) & ReducesAcidity(x,y)))", "score": 0}
{"id": "eqasc_validation_615", "prediction": "all x y z.((Gallbladder(x) & Fluid(y) & Food(z) & Stores(x,y)) -> ReducesAcidity(y,z))", "score": 0}
{"id": "eqasc_validation_616", "prediction": "all x.(Bile(x) -> ExitsByFootballbladder(x))", "score": 0}
{"id": "eqasc_validation_616", "prediction": "all x.(Bile(x) -> ExitsGallbladderByCommonBileDuct(x))", "score": 0}
{"id": "eqasc_validation_616", "prediction": "all x.(Bile(x) -> ExitGallbladder(x))", "score": 0}
{"id": "eqasc_validation_616", "prediction": "all x.(Bile(x) -> ExitsGalbladderByCommonBileDuct(x))", "score": 0}
{"id": "eqasc_validation_616", "prediction": "all x y.((Bile(x) & Gallbladder(y)) -> Exits(x,y))", "score": 0}
{"id": "eqasc_validation_616", "prediction": "all x.(Bile(x) -> (ExitsGalbladder(x) & CommonBileDuct(x)))", "score": 0}
{"id": "eqasc_validation_616", "prediction": "all x.(Bile(x) -> ExitGalbladderByConsumableBileDuct(x))", "score": 0}
{"id": "eqasc_validation_616", "prediction": "all x y.((Gloodybrid(x) & Bile(y)) -> ExitsBySmallBleepDuct(x,y))", "score": 0}
{"id": "eqasc_validation_616", "prediction": "all x y.((Bile(x) & Gallbladder(y) & CommonBileDuct(x)) -> ExtricatesBy(x,y))", "score": 0}
{"id": "eqasc_validation_616", "prediction": "all x.(Bile(x) -> ExitSglarderAtGalbladder(x))", "score": 0}
{"id": "eqasc_validation_616", "prediction": "all x.(Bile(x) -> EntersByGrillbladder(x))", "score": 0}
{"id": "eqasc_validation_616", "prediction": "all x.(Bile(x) -> Exitgilbladder(x,BileneDuct))", "score": 0}
{"id": "eqasc_validation_616", "prediction": "all x y.((Bile(x) & Gallbladder(y)) -> ExitSyntheticBileDuct(x,y))", "score": 0}
{"id": "eqasc_validation_616", "prediction": "all x.(Bile(x) -> (ExitsGalbladderByCourt(x) & CommonBileDuct(x)))", "score": 0}
{"id": "eqasc_validation_617", "prediction": "all x y.((Gallbladder(x) & Food(y) & EntersFromHighlyAcidStomach(x,y)) -> ReducesAcidity(x,y))", "score": 0}
{"id": "eqasc_validation_617", "prediction": "all x.(Gallbladder(x) -> ReducesAcidityOfFoodFromDisastrousStomach(x))", "score": 0}
{"id": "eqasc_validation_617", "prediction": "all x y z.((Galbladder(x) & Food(y) & FoodEmitment(z)) -> ReducesAcidity(x,y,z))", "score": 0}
{"id": "eqasc_validation_617", "prediction": "all x y.((Gallbladder(x) & Food(y)) -> ReducesAcidityFrom(x,y))", "score": 0}
{"id": "eqasc_validation_617", "prediction": "all x.(Gallbladder(x) -> ReducesAcidity(x))", "score": 0}
{"id": "eqasc_validation_617", "prediction": "all x y z.((Gallbladder(x) & Food(y) & Food(z) & EnteringFromAcidStomach(x,y,z)) -> ReducesAcidity(x,y,z))", "score": 0}
{"id": "eqasc_validation_617", "prediction": "all x y z.((Gallbladder(x) & Food(y) & AcidicStomach(z)) -> ReducesAcidity(x,y,z))", "score": 0}
{"id": "eqasc_validation_617", "prediction": "all x.(Gallbladder(x) -> ReducesAcidityOfFood(x))", "score": 0}
{"id": "eqasc_validation_617", "prediction": "all x y.((Galbladder(x) & Food(y) & HighlyAcidicStomach(x)) -> ReducesAcidity(x,y))", "score": 0}
{"id": "eqasc_validation_617", "prediction": "all x y.((Gallbladder(x) & Food(y)) -> ReducesAcidity(x,y))", "score": 0}
{"id": "eqasc_validation_617", "prediction": "all x y z.((Galbladder(x) & Food(y) & HighlyAcid(z)) -> ReducesAcidity(x,y,z))", "score": 0}
{"id": "eqasc_validation_617", "prediction": "all x y.((Galbladder(x) & Food(y) & EntersFromExaggeratedStomach(x)) -> ReducesAcidity(x,y))", "score": 0}
{"id": "eqasc_validation_617", "prediction": "all x y.((Galbladder(x) & Food(y) & EntersFromHighlyAcidStomach(x,y)) -> ReducesAcidity(x,y))", "score": 0}
{"id": "eqasc_validation_618", "prediction": "all x.((Bile(x) & ProducedByLiver(x)) -> HelpsFatDigestionAndAbsorption(x))", "score": 0}
{"id": "eqasc_validation_618", "prediction": "all x.(Bile(x) -> (ProducesByLiver(x) & HelpsFatDigestmentAndAbsorption(x)))", "score": 0}
{"id": "eqasc_validation_618", "prediction": "all x y.((Bile(x) & Liver(y)) -> (ProducedBy(x,y) & HelpsDigestFat(x,y) & HelpsAbsorbFat(y)))", "score": 0}
{"id": "eqasc_validation_618", "prediction": "all x y.((Bile(x) & Liver(y)) -> (ProducedBy(x,y) & HelpsFatDigestion(x) & HelpsAbsorption(x)))", "score": 0}
{"id": "eqasc_validation_618", "prediction": "all x.((Bile(x) & ProducedByLeaf(x)) -> HelpsDietaryFat(x) & HelpsAbsorption(x))", "score": 0}
{"id": "eqasc_validation_618", "prediction": "all x.(Bile(x) -> (ProducedByLiver(x) & HelpsFatDigestrationAndAbsorption(x)))", "score": 0}
{"id": "eqasc_validation_618", "prediction": "all x.((Bile(x) & ProducedByLip(x)) -> (HelpsDigestion(x) & HelpsAbsorbtion(x)))", "score": 0}
{"id": "eqasc_validation_618", "prediction": "all x.(Bile(x) -> (ProducedByLiver(x) & HelpsFatDiversification(x) & HelpsAbsorption(x)))", "score": 0}
{"id": "eqasc_validation_618", "prediction": "all x.((Liver(x) & ProducedByLiver(x)) -> HelpsFatDigestionAndAbsorption(x))", "score": 0}
{"id": "eqasc_validation_618", "prediction": "all x.((Bile(x) & ProducedByLiver(x)) -> (HelpsFatDigestion(x) & HelpsAbsorption(x)))", "score": 0}
{"id": "eqasc_validation_618", "prediction": "all x.((Biele(x) & ProducedByLiver(x)) -> (HelpsFatDigestion(x) & HelpsAbsorption(x)))", "score": 0}
{"id": "eqasc_validation_618", "prediction": "all x y.((Bile(x) & Liver(y)) -> (ProducedBy(x,y) & FatDigestion(y) & FatAbsorption(y)))", "score": 0}
{"id": "eqasc_validation_618", "prediction": "all x.((Bile(x) & ProducedByLiver(x)) -> (HelpsFatDigestion(x) & HelpsAbsorbtion(x)))", "score": 0}
{"id": "eqasc_validation_619", "prediction": "all x y z.((Liver(x) & Food(y) & Alcohol(z)) -> HelpsReduceAcidity(x,y,z))", "score": 0}
{"id": "eqasc_validation_619", "prediction": "all x y z.((Liver(x) & Food(y) & Alcoholity(z)) -> HelpsReduce(x,y,z))", "score": 0}
{"id": "eqasc_validation_619", "prediction": "all x y.( (Liver(x) & Food(y)) -> HelpsReduceAcidity(x,y))", "score": 0}
{"id": "eqasc_validation_619", "prediction": "all x.(HepaticAcidity(x) -> HelpsReduce(x,Acidity))", "score": 0}
{"id": "eqasc_validation_619", "prediction": "all x.(Liver(x) -> HelpsReduceAcidityOfFood(x))", "score": 0}
{"id": "eqasc_validation_619", "prediction": "all x.(HepatolyticalReduction(x) -> HelpsReduceAcidityOfFood(x))", "score": 0}
{"id": "eqasc_validation_619", "prediction": "all x y.((Liver(x) & Food(y)) -> HelpsReduceAcidity(x,y))", "score": 0}
{"id": "eqasc_validation_619", "prediction": "all x y.((Liver(x) & Food(y)) -> ReducesAcidity(x,y))", "score": 0}
{"id": "eqasc_validation_619", "prediction": "all x y.((Lipid(x) & Food(y)) -> (HelpsReduceAcidity(x,y) & CanBeReducedAcidity(x,y)))", "score": 0}
{"id": "eqasc_validation_619", "prediction": "all x y.((Lip(x) & Food(y) & HelpsReduceAcidity(x,y)) -> HelpsReduceAcidity(x,y))", "score": 0}
{"id": "eqasc_validation_619", "prediction": "all x y.((Liver(x) & Food(y)) -> ReducedAcidity(x,y))", "score": 0}
{"id": "eqasc_validation_619", "prediction": "all x y.((Liver(x) & Food(y)) -> ReducesAcidityOfFood(x,y))", "score": 0}
{"id": "eqasc_validation_620", "prediction": "all x.(BileAcid(x) -> UsedByBodyToDigestFats(x))", "score": 0}
{"id": "eqasc_validation_620", "prediction": "all x y z.((BileAcid(x) & Body(y) & Fat(z)) -> Digests(x,y,z))", "score": 0}
{"id": "eqasc_validation_620", "prediction": "all x y.((Body(x) & BileAcid(x) & Fats(y)) -> Digests(x,y))", "score": 0}
{"id": "eqasc_validation_620", "prediction": "all x y.((BileAcid(x) & Body(y)) -> UsedToDigestFats(x,y))", "score": 0}
{"id": "eqasc_validation_620", "prediction": "all x.(BileAcid(x) -> DigestsFats(x))", "score": 0}
{"id": "eqasc_validation_620", "prediction": "all x y.((Bielecide(x) & Body(y) & UsedToDigestFat(x)) -> DigestsFats(x))", "score": 0}
{"id": "eqasc_validation_620", "prediction": "all x y.((BaleAcid(x) & Body(y)) -> UsedToDigestFats(x,y))", "score": 0}
{"id": "eqasc_validation_620", "prediction": "all x.(BuleAcid(x) -> UsedToDigestFats(x))", "score": 0}
{"id": "eqasc_validation_620", "prediction": "all x y z.((BileAcid(x) & Body(y) & Fat(z) & Dittose(x,y,z)) -> UsedToDigest(x,y,z))", "score": 0}
{"id": "eqasc_validation_620", "prediction": "all x.((Body(x) & BileAcid(x)) -> DigestsFats(x))", "score": 0}
{"id": "eqasc_validation_620", "prediction": "all x y z.((BileAcid(x) & Body(y) & Fat(z)) -> UsedToDigest(x,y,z))", "score": 0}
{"id": "eqasc_validation_620", "prediction": "all x.(BileAcid(x) -> DigestFats(x))", "score": 0}
{"id": "eqasc_validation_621", "prediction": "all x.(StomachAcidityHelpsDigestFats(x) -> DigestsFats(x))", "score": 0}
{"id": "eqasc_validation_621", "prediction": "all x y.((StomachAcidity(x) & Fats(y)) -> AgitatesDigestion(x,y))", "score": 0}
{"id": "eqasc_validation_621", "prediction": "all x y z.((StomachAcidity(x) & Fats(y) & Fats(z)) -> Digests(x,y,z))", "score": 0}
{"id": "eqasc_validation_621", "prediction": "all x y.((StomachAcidity(x) & Fats(y)) -> Digests(x,y))", "score": 0}
{"id": "eqasc_validation_621", "prediction": "all x.(StomachAcidity(x) -> HelpsDigestFats(x))", "score": 0}
{"id": "eqasc_validation_621", "prediction": "all x.(StomachAciditySolventsAndDigestsFats(x))", "score": 0}
{"id": "eqasc_validation_621", "prediction": "all x.(StomachAcidity(x) -> DigestsFats(x))", "score": 0}
{"id": "eqasc_validation_621", "prediction": "all x.(StomachAcidityProvidesDigestFats(x) -> HelpsDigestFats(x))", "score": 0}
{"id": "eqasc_validation_621", "prediction": "all x.(StomachAcidityHelpsDigestFats(x))", "score": 0}
{"id": "eqasc_validation_621", "prediction": "all x.((StomachAcidity(x) & DigestsFats(x)) -> HelpsDigest(x))", "score": 0}
{"id": "eqasc_validation_621", "prediction": "all x y.((StomachAcidity(x) & Fats(y)) -> Digest(x,y))", "score": 0}
{"id": "eqasc_validation_622", "prediction": "all x.(Bile(x) -> (SynthesizedByLiver(x) & ContainsHCO3Salts(x) & ContainsBilePigments(x)))", "score": 0}
{"id": "eqasc_validation_622", "prediction": "ALL x y.((Bile(x) & SynthesizedByLiver(x) & HCO3(y) & BileSalts(y) & BilePigments(z)) -> Contains(x,y))", "score": -1}
{"id": "eqasc_validation_622", "prediction": "all x.((Bile(x) & SynthesizedByLiver(x)) -> (ContainsHCO3-bileSalts(x) & ContainsBilePigments(x)))", "score": -1}
{"id": "eqasc_validation_622", "prediction": "all x.(Bile(x) -> (SynthesizedByLiver(x) & ContainsHCO3(x) & ContainsBileSalts(x) & ContainsBilePigments(x)))", "score": 0}
{"id": "eqasc_validation_622", "prediction": "(SynthesizedByLiver(bire),ContainsHCO3SaltsAndBilePigments(bireIgnite))", "score": -1}
{"id": "eqasc_validation_622", "prediction": "all x.((Bile(x) & SynthesizedByLiver(x)) -> (ContainsHCO3Salts(x) & ContainsBilePigments(x)))", "score": 0}
{"id": "eqasc_validation_622", "prediction": "all x y z.((Bullete(x) & Liver(y) & Organ(z) & SynthesizedBy(x,y,z)) -> (ContainsHCO3Fuel(x) & ContainsBileSalts(x) & ContainsBilePigments(x)))", "score": 0}
{"id": "eqasc_validation_622", "prediction": "all x y.((Bule(x) & SynthesizedByLiver(x) & HCO3Salts(y) & BilePigments(x)) -> (ContainsHCO3Salts(x) & ContainsBilePigments(x)))", "score": 0}
{"id": "eqasc_validation_622", "prediction": "all x.((Bile(x) & SynthesizedByLiver(x)) -> (ContainsHCO3,ContainsBileSalts) & ContainsBilePigments(x)))", "score": -1}
{"id": "eqasc_validation_622", "prediction": "all x y.((Bile(x) & SynthesizedByLiver(x)) -> (ContainsHCO3Salts(x) & ContainsBilePigments(x)))", "score": 0}
{"id": "eqasc_validation_622", "prediction": "all x.(Bile(x) -> (SynthesizedByLiver(x) & ContainsHCO3BiteSalts(x) & ContainsBilePigments(x)))", "score": 0}
{"id": "eqasc_validation_622", "prediction": "all x y.((Bile(x) & SynthesizedByLiver(x) & Hepatitis(y)) -> (ContainsHCO3Salts(x) & ContainsBilePigments(x)))", "score": 0}
{"id": "eqasc_validation_623", "prediction": "all x y z.((Liver(x) & Food(y) & System(z) & HighlyAcidicStomach(y)) -> ReducesAcidity(x,y,z))", "score": 0}
{"id": "eqasc_validation_623", "prediction": "all x y z.((Liver(x) & Food(y) & AcidicStomach(z)) -> ReducesAcidity(x,y))", "score": 0}
{"id": "eqasc_validation_623", "prediction": "all x y z.((Liver(x) & Food(y) & AcidicStomach(z)) -> ReducesAcidity(x,y,z))", "score": 0}
{"id": "eqasc_validation_623", "prediction": "all x y.((Liver(x) & Food(y) & EntersFromAcidStomach(x,y)) -> ReducesAcidity(x,y))", "score": 0}
{"id": "eqasc_validation_623", "prediction": "all x y.((Liver(x) & Food(y) & HighlyAcidicStomach(z)) -> ReducesAcidity(x,y,z))", "score": 0}
{"id": "eqasc_validation_623", "prediction": "all x.(Liver(x) -> ReducesAcidityOfFoodEntrantFromHighlyAcidicStomach(x))", "score": 0}
{"id": "eqasc_validation_623", "prediction": "all x y z.((Liver(x) & FoodEntrant(y) & HighlyAcidStomach(z)) -> ReducesAcidityOfFood(x,y,z))", "score": 0}
{"id": "eqasc_validation_623", "prediction": "all x y.((Liver(x) & FoodIngressesFrom(x,y) & AcidicStomach(y)) -> ReducesAcidity(x,y))", "score": 0}
{"id": "eqasc_validation_623", "prediction": "all x y z.((Liver(x) & Food(y) & Service(z) & HighlyAcidicStomach(x)) -> ReducesAcidity(x,y,z))", "score": 0}
{"id": "eqasc_validation_623", "prediction": "all x.(Hepat(x) -> ReducesAcidityOfFoodEntrantFromHumanlyAcidicStomach(x))", "score": 0}
{"id": "eqasc_validation_623", "prediction": "is the hepatic system that reducesacidityOfFood(hereafter) & EntersFromAcidicStomach(hereafter))", "score": -1}
{"id": "eqasc_validation_623", "prediction": "all x y.((Liver(x) & Food(y)) -> ReducesAcidity(x,y))", "score": 0}
{"id": "eqasc_validation_623", "prediction": "all x y.((Liver(x) & Food(y) & HighlyAcidicStomach(x)) -> ReducesAcidity(x,y))", "score": 0}
{"id": "eqasc_validation_623", "prediction": "all x y.((Liver(x) & Food(y) & EntersFromAcidStorm(x,y)) -> ReducesAcidity(x,y))", "score": 0}
{"id": "eqasc_validation_623", "prediction": "all x.(Liver(x) -> ReducesAcidityOfFoodEntryFromAcidicStomach(x))", "score": 0}
{"id": "eqasc_validation_624", "prediction": "all x y z.((BileAcid(x) & Food(y) & Stomach(z)) -> PoursIntoToAbsorbFats(x,y,z))", "score": 0}
{"id": "eqasc_validation_624", "prediction": "all x y.((BileAcid(x) & Stomach(y)) -> PoursInto(x,y))", "score": 0}
{"id": "eqasc_validation_624", "prediction": "all x y z.((BileAcid(x) & Food(y) & Satire(z)) -> PoursInto(x,y))", "score": 0}
{"id": "eqasc_validation_624", "prediction": "all x.(BileAcidPoursIntoStomachToAbsorbFats(x,Foods))", "score": 0}
{"id": "eqasc_validation_624", "prediction": "all x y.((Stomach(x) & BileAcid(y)) -> PoursInto(x,y))", "score": 0}
{"id": "eqasc_validation_624", "prediction": "(all x y z.((BileAcid(x) & Food(y) & Food(z)) -> PoursIntoStomach(x,z)))", "score": 0}
{"id": "eqasc_validation_624", "prediction": "all x y z.((BileAcid(x) & Food(y) & Saute(z)) -> PoursInto(x,y,z))", "score": 0}
{"id": "eqasc_validation_624", "prediction": "all x y.((HasPurpose(x) & BileAcid(x,y)) -> HelpsAbsorbFatsFromFoods(y))", "score": 0}
{"id": "eqasc_validation_624", "prediction": "all x y.((GlileAcid(x) & Sagittain(y)) -> PoursInto(x,y))", "score": 0}
{"id": "eqasc_validation_624", "prediction": "all x.(BileAcidPurpose(x) -> AbsorbFatsFromFood(x))", "score": 0}
{"id": "eqasc_validation_624", "prediction": "all x y.((BileAcid(x) & SophisticAbsorbence(y)) -> PoursInto(x,y))", "score": 0}
{"id": "eqasc_validation_624", "prediction": "all x.(BileAcid(x) -> PoursIntoStomachToAbsorbFats(x))", "score": 0}
{"id": "eqasc_validation_624", "prediction": "all x y z.((BileAcid(x) & Singular(y) & Food(z)) -> PoursInto(x,y,z))", "score": 0}
{"id": "eqasc_validation_624", "prediction": "all x.(BileAcid(x) -> (PurposesIntoStomach(x) & AbsorbsFats(x)))", "score": 0}
{"id": "eqasc_validation_624", "prediction": "all x y.((GileAcid(x) & Sept(y)) -> PoursIntoStomach(x,y))", "score": 0}
{"id": "eqasc_validation_625", "prediction": "all x.(Bile(x) -> (ReducesAcidity(x) & HelpsAbsorbFats(x)))", "score": 0}
{"id": "eqasc_validation_625", "prediction": "all x y.((Bile(x) & Food(y)) -> (ReducesAcidity(x,y) & HelpsAbsorbFats(x,y)))", "score": 0}
{"id": "eqasc_validation_625", "prediction": "all x y.((Bile(x) & Food(y)) -> (ReducesAcidity(x) & AbsorbsFats(x)))", "score": 0}
{"id": "eqasc_validation_625", "prediction": "all x.(Bile(x) -> (ReducesAcidity(x) & HelpsAbsorbFatsFromFoods(x)))", "score": 0}
{"id": "eqasc_validation_625", "prediction": "all x.(Bile(x) -> (ReducesAcidity(x) & AbsorbsFats(x)))", "score": 0}
{"id": "eqasc_validation_625", "prediction": "all x y z.((Bile(x) & Acidity(y) & FatAbsorption(z)) -> (Reduces(x,y) & HelpsWith(x,z)))", "score": 0}
{"id": "eqasc_validation_625", "prediction": "all x.(Bile(x) -> (ReducesAcidity(x) & AbsorbsFatsFromFoods(x)))", "score": 0}
{"id": "eqasc_validation_625", "prediction": "all x.(Bile(x) -> (ReducesAcidity(x) & AbsorbsFats(x,food)))", "score": 0}
{"id": "eqasc_validation_625", "prediction": "all x y z.((Bile(x) & Acacia(y) & Fat(z)) -> (Reduces(x,y) & Absorbs(x,z)))", "score": 0}
{"id": "eqasc_validation_626", "prediction": "all x.(Liver(x) -> (SupplyAcidEatingFood(x) & ReducesAcidity(x)))", "score": 0}
{"id": "eqasc_validation_626", "prediction": "all x y.((Liver(x) & FoodEntrance(y) & HighlyAcidicStomach(z)) -> ReducesAcidity(x,y,z))", "score": 0}
{"id": "eqasc_validation_626", "prediction": "all x y z.((Liver(x) & Food(y) & HighlyAcidStomach(z)) -> ReducesAcidityOfFoodEntrantsFrom(x,y,z))", "score": 0}
{"id": "eqasc_validation_626", "prediction": "all x y z.((Liver(x) & Food(y) & StoppedStomach(z)) -> ReducesAcidity(x,y))", "score": 0}
{"id": "eqasc_validation_626", "prediction": "all x.(Liver(x) -> (ReducesAcidityOfFood(x) & EntersFromHighlyAcidicStomach(x)))", "score": 0}
{"id": "eqasc_validation_626", "prediction": "all x y.((Liver(x) & Food(y)) -> ReducesAcidityOfFood(x,y))", "score": 0}
{"id": "eqasc_validation_626", "prediction": "all x y.((Liver(x) & AcidicStomach(y)) -> ReducesAcidityOfFood(x,y))", "score": 0}
{"id": "eqasc_validation_626", "prediction": "all x y.((Liver(x) & Food(y) & VeryAcidicStomach(z)) -> ReducesAcidity(x,y,z))", "score": 0}
{"id": "eqasc_validation_626", "prediction": "all x y z w.((Liver(x) & Food(y) & AcidicStomach(z) & Entering(w,y,z)) -> ReducesAcidity(x,y))", "score": 0}
{"id": "eqasc_validation_626", "prediction": "all x y z.((Liver(x) & Food(y) & AcidicStomach(z)) -> (ReducesAcidityOf(x,y,z) & EntersAfter(x,y)))", "score": 0}
{"id": "eqasc_validation_626", "prediction": "all x y.((Liver(x) & Food(y)) -> ReducesAcidity(x,y))", "score": 0}
{"id": "eqasc_validation_626", "prediction": "all x y z.((Liver(x) & Food(y) & AcidicStomach(z) & EntersFrom(x,y) & HighlyAcidic(x)) -> ReducesAcidityOfFood(x,y,z))", "score": 0}
{"id": "eqasc_validation_626", "prediction": "all x y.((Liver(x) & FoodEntrance(y) & HighlyAcidicStomach(x)) -> ReducesAcidityOfFood(x,y))", "score": 0}
{"id": "eqasc_validation_626", "prediction": "all x y.((Liver(x) & FoodEntry(y) & HighlyAcidicStomach(y)) -> ReducesAcidity(x,y))", "score": 0}
{"id": "eqasc_validation_626", "prediction": "all x y.((Liver(x) & AcidityOfFood(y) & EnteringFromHighlyAciditicStomach(x,y)) -> ReducesAcidityOfFood(x,y))", "score": 0}
{"id": "eqasc_validation_627", "prediction": "all x y.((Bile(x) & Fats(y)) -> Absorbs(x,y))", "score": 0}
{"id": "eqasc_validation_627", "prediction": "all x.(Bile(x) -> AbsorbsFats(x))", "score": 0}
{"id": "eqasc_validation_627", "prediction": "all x y z w.((Bile(x) & Fat(w) & Fat(w)) -> Absorbs(x,y,z,w))", "score": 0}
{"id": "eqasc_validation_627", "prediction": "all x y.((Bile(x) & Fats(y)) -> AbsorbsBy(x,y))", "score": 0}
{"id": "eqasc_validation_627", "prediction": "all x y.((Mile(x) & Fat(y)) -> AbsorbsBile(x,y))", "score": 0}
{"id": "eqasc_validation_627", "prediction": "(AbsorbsFats(bile))", "score": 0}
{"id": "eqasc_validation_627", "prediction": "(BileAbsorbsFats(bile))", "score": 0}
{"id": "eqasc_validation_627", "prediction": "all x y.((Bile(x) & Fat(y)) -> Absorbs(x,y))", "score": 0}
{"id": "eqasc_validation_628", "prediction": "all x y.((Bile(x) & Liver(y)) -> (ContainsBileSalts(x) & ContainsOtherOrganicSubstances(x) & -ContainsEnzymes(x)))", "score": 0}
{"id": "eqasc_validation_628", "prediction": "all x.((Bile(x) & Liver(x)) -> (ContainsBileSalts(x) & ContainsBioseeds(x) & ContainsOrganicSubstances(x) & -ContainsEnzymes(x)))", "score": 0}
{"id": "eqasc_validation_628", "prediction": "all x.(Bile(x) -> (LittleSalt(x) & OrganicSubstance(x) & -Enzymes(x)))", "score": 0}
{"id": "eqasc_validation_628", "prediction": "all x y.((Liver(x) & Bile(y) & OrganicSubstance(y)) -> (ContainsBileSalts(y) & ContainsManyEnzymes(y)))", "score": 0}
{"id": "eqasc_validation_628", "prediction": "all x.((BileFromLiver(x) & IncludesBileSalts(x) & ContainsOrganicSubstances(x)) -> (-ContainsEnzymes(x)))", "score": 0}
{"id": "eqasc_validation_628", "prediction": "all x.((Bile(x) & Liver(x)) -> (ContainsBileSalts(x) & ContainsMostOrganicSubstances(x) & -ContainsEnzymes(x)))", "score": 0}
{"id": "eqasc_validation_628", "prediction": "all x.(BileFromLiver(x) -> exists y.(BileSalt(y) & Contains(x,y)) & exists z.(OrganicSubstance (z) & Contains(x,z))) & -exists w.(Enzyme(w) & Contains(x,e))))", "score": -1}
{"id": "eqasc_validation_628", "prediction": "(all x y.((Bile(x) & Liver(y)) -> Contains(x,y)))", "score": 0}
{"id": "eqasc_validation_628", "prediction": "all x.(BileFromLiver(x) -> (ContainsBileSalts(x) & ContainsOtherOrganicSubstances(x) & -ContainsEnzymes(x)))", "score": 0}
{"id": "eqasc_validation_628", "prediction": "all x.(Bile(x) -> (ContainsBileSalts(x) & ContainsOtherOrganicSubstances(x) & -ContainsEnzymes(x)))", "score": 0}
{"id": "eqasc_validation_628", "prediction": "all x y z.((Liver(x) & Bile(y) & OrganicSubstance(z)) -> (ContainsBileSalts(y,z) & ContainsMany(x,z)))", "score": 0}
{"id": "eqasc_validation_628", "prediction": "all x.(Bile(x) -> * (ReportsbileSalts(x) & ContainsOtherOrganicSubstances(x) & -ContainsEnzymes(x)))", "score": -1}
{"id": "eqasc_validation_628", "prediction": "all x.(BileFromHepatitis(x) -> (ContainsBelleSalts(x) & containsOxygens(x) & -ContainsEnzymes(x)))", "score": 0}
{"id": "eqasc_validation_628", "prediction": "all x.(Liver(x) -> (ContainsBileSalts(x) & ContainsOrganicSubstances(x) & -ContainsEnzymes(x)))", "score": 0}
{"id": "eqasc_validation_628", "prediction": "all x.(BileFromLiver(x) -> (ContainsBelleSalts(x) & ManyOrigins(x) & NoEnzymes(x)))", "score": 0}
{"id": "eqasc_validation_628", "prediction": "all x.(Bile(x) -> (HasBileSalts(x) & ContainsOxidatingSubstances(x) & -HasEnzymes(x)))", "score": 0}
{"id": "eqasc_validation_629", "prediction": "all x y.((Liver(x) & FoodEntry(y) & HighlyAcidicStomach(x)) -> HelpsReduceAcidityRide(x))", "score": 0}
{"id": "eqasc_validation_629", "prediction": "all x y z.((Liver(x) & Food(y) & AcidicStomach(z) & EntersFrom(x,y,z)) -> ReducesAcidity(x,y,z))", "score": 0}
{"id": "eqasc_validation_629", "prediction": "all x y.((Liver(x) & Food(y)) -> ReducesAcidity(x,y))", "score": 0}
{"id": "eqasc_validation_629", "prediction": "all x y z.((Liver(x) & Food(y) & StronglyAcidicStomach(z) & EnteringFrom(x,y) & AcidicStomach(y) & HelpsReduceAcidity(x,y,z)) -> HelpsReduceAcidity(x,y,z))", "score": 0}
{"id": "eqasc_validation_629", "prediction": "all x y.((Liver(x) & HighAcidStomach(y)) -> HelpsReduceAcidityOfFood(x,y))", "score": 0}
{"id": "eqasc_validation_629", "prediction": "all x y.((Liver(x) & Food(y)) -> HelpsReduceAcidity(x,y))", "score": 0}
{"id": "eqasc_validation_629", "prediction": "all x y.((Liver(x) & EntersFastAcid(x,y) & HighlyAcidicStomach(y)) -> HelpsReduceAcidity(x,z))", "score": 0}
{"id": "eqasc_validation_629", "prediction": "all x y.((Liver(x) & Food(y) & HighlyAcidicStomach(y)) -> ReducesAcidity(x,y))", "score": 0}
{"id": "eqasc_validation_629", "prediction": "all x y.((Liver(x) & Food(y) & EntersFromHighlyAcidStomach(y,x)) -> HelpsReduceAcidity(x,y))", "score": 0}
{"id": "eqasc_validation_629", "prediction": "all x y.((Lipid(x) & Food(y)) -> ReducesAcidityFromAcidStomach(x,y))", "score": 0}
{"id": "eqasc_validation_629", "prediction": "all x y.((Liver(x) & Food(y) & EntersFromHighlyAcidStomach(x,y)) -> ReducesAcidity(x,y))", "score": 0}
{"id": "eqasc_validation_629", "prediction": "all x y.((Liver(x) & Food(y) & EntersFromAcidSpittus(x,y)) -> ReducesAcidity(x,y))", "score": 0}
{"id": "eqasc_validation_629", "prediction": "all x y z.((Liver(x) & Food(y) & StoppedAcidic(z)) -> ReducesAcidity(x,y,z))", "score": 0}
{"id": "eqasc_validation_629", "prediction": "all x.(Liver(x) -> ReducesAcidityOrFoodEntrantsFromHydroacidStomach(x))", "score": 0}
{"id": "eqasc_validation_629", "prediction": "all x y.((Liver(x) & Food(y) & AdhesiveStomach(y)) -> HelpsReduceAcidity(x,y))", "score": 0}
{"id": "eqasc_validation_630", "prediction": "all x.(Hormone(x) -> RegulateByFeedbackMechanisms(x))", "score": 0}
{"id": "eqasc_validation_630", "prediction": "all x.(Hannapin(x) -> RegulatesByFeedbackMechanisms(x))", "score": 0}
{"id": "eqasc_validation_630", "prediction": "all x.(Hormone(x) -> RegulatedByFeedbackMechanisms(x))", "score": 1}
{"id": "eqasc_validation_630", "prediction": "all x.(Hannabin(x) -> RegulatedByFeedbackMechanics(x))", "score": 0}
{"id": "eqasc_validation_630", "prediction": "all x.(Hormone(x) -> RegulatesByFeedbackMechanisms(x))", "score": 0}
{"id": "eqasc_validation_630", "prediction": "all x.(Horizon(x) -> RegulatesByFeedback(x))", "score": 0}
{"id": "eqasc_validation_630", "prediction": "all x.(Hydrogen(x) -> RegulateByFeedbackMechanisms(x))", "score": 0}
{"id": "eqasc_validation_630", "prediction": "all x y.((Hydrogen(x) & FeedbackMechanism(y)) -> Regulate(x,y))", "score": 0}
{"id": "eqasc_validation_630", "prediction": "all x.(Hannabinol(x) -> RegulatedByFeedbackMechanisms(x))", "score": 0}
{"id": "eqasc_validation_630", "prediction": "all x y.((Hormone(x) & FeedbackMechanism(y)) -> Regulates(x,y))", "score": 0}
{"id": "eqasc_validation_630", "prediction": "all x.(Honey(x) -> RegulatesByFeedbackMechanisms(x))", "score": 0}
{"id": "eqasc_validation_630", "prediction": "all x.(Hannah(x) -> RegulatedByFeedbackMechanisms(x))", "score": 0}
{"id": "eqasc_validation_631", "prediction": "all x.(Homone(x) -> ChemistryMechanic(x))", "score": 0}
{"id": "eqasc_validation_631", "prediction": "all x.(Hormone(x) -> ChemicalMessager(x))", "score": 0}
{"id": "eqasc_validation_631", "prediction": "all x.(Hormone(x) & ChemicalMessager(x))", "score": 1}
{"id": "eqasc_validation_631", "prediction": "all x.( Hormone(x) -> ChemicalMessenger(x))", "score": 0}
{"id": "eqasc_validation_631", "prediction": "all x y.((Homone(x) & ChemicalMessenger(y)) -> ActionsAs(x,y))", "score": 0}
{"id": "eqasc_validation_631", "prediction": "all x.(Homone(x) -> ChemicalMessenger(x))", "score": 0}
{"id": "eqasc_validation_631", "prediction": "all x y.((Hormone(x) & ChemicalMessage(y)) -> ActsAs(x,y))", "score": 0}
{"id": "eqasc_validation_631", "prediction": "all x.(Hormone(x) -> ChemicalMessenger(x))", "score": 0}
{"id": "eqasc_validation_631", "prediction": "all x y.((Homone(x) & ChemicalMysher(y)) -> Affects(x,y))", "score": 0}
{"id": "eqasc_validation_631", "prediction": "all x.(Homone(x) -> ActsAsChemicalMeander(x))", "score": 0}
{"id": "eqasc_validation_631", "prediction": "all x.(Hormone(x) -> ActsAsChemicalMessenger(x))", "score": 0}
{"id": "eqasc_validation_631", "prediction": "all x.(Hormone(x) -> ActsAsChemicalBottom(x))", "score": 0}
{"id": "eqasc_validation_631", "prediction": "all x.(Hormone(x) -> (ChemicalMessager(x) & Activates(x)))", "score": 0}
{"id": "eqasc_validation_632", "prediction": "all x.(MostChemicalMessagersRegulatedByFeedbackMechanisms(x) -> MostChemicalMessagers(x))", "score": 0}
{"id": "eqasc_validation_632", "prediction": "all x y z.((ChemicalMessenger(x) & FeedbackMechanism(y) & Controls(z)) -> Regulates(x,y,z))", "score": 0}
{"id": "eqasc_validation_632", "prediction": "all x.(ChemicalMessenger(x) -> RegulatedByFeedbackMechanisms(x))", "score": 0}
{"id": "eqasc_validation_632", "prediction": "all x y.((ChemicalBottom(x) & ChemicalMessager(y)) -> RegulatedByFeedbackMechanisms(x))", "score": 0}
{"id": "eqasc_validation_632", "prediction": "all x.(ChemicalMachine(x) -> RegulatedByFeedbackMechanisms(x))", "score": 0}
{"id": "eqasc_validation_632", "prediction": "all x y.((ChemicalMessager(x) & ChemicalMenu(y)) -> RegulatedByFeedbackMechanisms(x,y))", "score": 0}
{"id": "eqasc_validation_632", "prediction": "all x y.((ChemicalMessager(x) & ReplyMechanism(y)) -> Regulates(x,y))", "score": 0}
{"id": "eqasc_validation_632", "prediction": "(all x y.(ChemicalMessager(x) & FeedbackMechanism(y)) -> Regulate(x,y)))", "score": -1}
{"id": "eqasc_validation_632", "prediction": "all x.(MostChemicalMessengers(x) -> RegulatedByFeedbackMechanisms(x))", "score": 0}
{"id": "eqasc_validation_632", "prediction": "all x.(ChemicalMessager(x) -> RegulatedByFeedbackMechanisms(x))", "score": 1}
{"id": "eqasc_validation_632", "prediction": "all x y.((ChemicalMachine(x) & ChemicalMessager(y)) -> RegulatesByFeedbackMechanisms(x,y))", "score": 0}
{"id": "eqasc_validation_632", "prediction": "all x.(ChemisticalMessenger(x) -> RegulatedByFeedbackMechanisms(x))", "score": 0}
{"id": "eqasc_validation_633", "prediction": "all x y.((HormonalProduction(x) & Enzyme(y)) -> Regulates(x,y))", "score": 0}
{"id": "eqasc_validation_633", "prediction": "all x y.((HomonalProduction(x) & Enzyme(y)) -> Regulates(x,y))", "score": 0}
{"id": "eqasc_validation_633", "prediction": "all x.((HormonalProduction(x) & Enzyme(x)) -> Regulates(x))", "score": 0}
{"id": "eqasc_validation_633", "prediction": "all x.(HomonalProduction(x) -> RegulatedByEnzymes(x))", "score": 0}
{"id": "eqasc_validation_633", "prediction": "all x.(HormonalProduction(x) -> RegulatesByEnzymes(x))", "score": 0}
{"id": "eqasc_validation_633", "prediction": "all x.(HormonalProduction(x) -> RegulatedByEnzymes(x))", "score": 0}
{"id": "eqasc_validation_633", "prediction": "all x.(HormonalProduction(x) -> GeneratedByEnzymes(x))", "score": 0}
{"id": "eqasc_validation_633", "prediction": "all x y z.((HormonalProduction(x) & Enzyme(y) & Enzyme(z)) -> Regulates(x,y,z))", "score": 0}
{"id": "eqasc_validation_633", "prediction": "all x.(Hemone(x) -> RegulatedByEnzymes(x))", "score": 0}
{"id": "eqasc_validation_633", "prediction": "all x.(HormonalProduction(x) -> RegulationByEnzymes(x))", "score": 0}
{"id": "eqasc_validation_633", "prediction": "(Enzymes(hormonalProduction) & Regulate(hormonalProduction))", "score": 0}
{"id": "eqasc_validation_633", "prediction": "(RegulatesEnzymes(hormonal,s) & HormonalProduction(hormone,s))", "score": 0}
{"id": "eqasc_validation_633", "prediction": "all x y z.((Enzyme(z) & HormonalProduction(x,y,z)) -> Regulates(y,z))", "score": 0}
{"id": "eqasc_validation_634", "prediction": "all x.(Enzymes(x) -> ControlsHormones(x))", "score": 0}
{"id": "eqasc_validation_634", "prediction": "all x.(Enzymes(x) & ControlsHormones(x))", "score": 0}
{"id": "eqasc_validation_634", "prediction": "all x.(Enzyme(x) -> ControlsHormones(x))", "score": 0}
{"id": "eqasc_validation_634", "prediction": "all x.(Enzyme(x) -> ControlsHydrogens(x))", "score": 0}
{"id": "eqasc_validation_634", "prediction": "all x y z.((Enzyme(x) & Hormone(y) & Enzyme(z) & Controls(x,y,z)) -> Controls(x,y))", "score": 0}
{"id": "eqasc_validation_634", "prediction": "all x y.((Enzyme(x) & Hormone(y)) -> Controls(x,y))", "score": 0}
{"id": "eqasc_validation_634", "prediction": "all x y z.(Enzyme(x) & Hormone(y) & Enzyme(z) & Control(x,y))", "score": 0}
{"id": "eqasc_validation_634", "prediction": "all x.(Genesis(x) -> ControlsHormones(x))", "score": 0}
{"id": "eqasc_validation_634", "prediction": "all x y.((Enzyme(x) & Hormone(y)) -> Control(x,y))", "score": 0}
{"id": "eqasc_validation_634", "prediction": "all x.(Enzyme(x) -> ControlsHydro(x))", "score": 0}
{"id": "eqasc_validation_634", "prediction": "all x.(Enzyme(x) -> ControlsHoneys(x))", "score": 0}
{"id": "eqasc_validation_635", "prediction": "all x.(Hormone(x) -> ChemicalMask(y))", "score": 0}
{"id": "eqasc_validation_635", "prediction": "all x y.((Hormone(x) & Body(y)) -> ChemicalMessenger(x,y))", "score": 0}
{"id": "eqasc_validation_635", "prediction": "all x.(Hormone(x) -> ChemicalMessengerInBody(x))", "score": 0}
{"id": "eqasc_validation_635", "prediction": "all x.(Hormone(x) -> ChemicalMessager(x))", "score": 0}
{"id": "eqasc_validation_635", "prediction": "all x.(Hormone(x) -> (ChemicalMessenger(x) & InBody(x)))", "score": 0}
{"id": "eqasc_validation_635", "prediction": "all x.(Hormone(x) -> ChemicalMachine(x))", "score": 0}
{"id": "eqasc_validation_635", "prediction": "all x.(Hormone(x) -> ChemicalMerchanter(x))", "score": 0}
{"id": "eqasc_validation_635", "prediction": "all x.(Hormone(x) -> ChemicalMessenger(x))", "score": 0}
{"id": "eqasc_validation_635", "prediction": "all x y.((Hormone(x) & Body(y)) -> ChemicalMessager(x,y))", "score": 0}
{"id": "eqasc_validation_635", "prediction": "all x.(Homone(x) -> ChemicalMessager(x))", "score": 0}
{"id": "eqasc_validation_635", "prediction": "all x.(Harmone(x) -> ChemicalMessager(x))", "score": 0}
{"id": "eqasc_validation_636", "prediction": "all x.(ChemicalMeasurer(x) -> RegulatedByFeedback(x))", "score": 0}
{"id": "eqasc_validation_636", "prediction": "all x.(ChemicalMessenger(x) -> RegulatedByFeedbackMechanismes(x))", "score": 0}
{"id": "eqasc_validation_636", "prediction": "all x y.((ChemicalMessager(x) & Body(y)) -> RegulatesByFeedback(x,y))", "score": 0}
{"id": "eqasc_validation_636", "prediction": "all x.(ChemicalMessager(x) -> RegulatedByFeedbackMechanisms(x))", "score": 0}
{"id": "eqasc_validation_636", "prediction": "all x.(ChemicalMessager(x) -> RegulateBetween(x))", "score": 0}
{"id": "eqasc_validation_636", "prediction": "all x y.((ChemicalMessager(x) & Body(y)) -> RegulatedBy(x,y))", "score": 0}
{"id": "eqasc_validation_636", "prediction": "all x.(ChemicalMessagerInBody(x) -> RegulatesThroughFeedbackMechanisms(x))", "score": 0}
{"id": "eqasc_validation_636", "prediction": "all x.((ChemicalMessager(x) & InBody(x)) -> RegulatesByFeedbackMechanisms(x))", "score": 0}
{"id": "eqasc_validation_636", "prediction": "all x.(ChemicalMessenger(x) -> RegulatedByFeedbackMechanisms(x))", "score": 0}
{"id": "eqasc_validation_636", "prediction": "all x.((ChemicalMessenger(x) & InBody(x)) -> RegulatedByFeedbackMechanisms(x))", "score": 0}
{"id": "eqasc_validation_636", "prediction": "all x.(ChemicalMessager(x) -> RegulatesByFeedbackMechanisms(x))", "score": 0}
{"id": "eqasc_validation_636", "prediction": "all x.(ChemicalMessager(x) -> (RegulatedByFeedbackMechanisms(x) | RegulatedByFeedbackMechanisms(x)))", "score": 0}
{"id": "eqasc_validation_636", "prediction": "all x y.((ChemicalMessenger(x) & Body(y)) -> RegulatesByFeedbackMechanisms(x,y))", "score": 0}
{"id": "eqasc_validation_636", "prediction": "all x.(ChemistryMessenger(x) -> RegulatesByFeedbackMechanisms(x))", "score": 0}
{"id": "eqasc_validation_636", "prediction": "all x y.((ChemicalMechanist(x) & Body(y)) -> RegulatesByFeedbackMechanisms(x,y))", "score": 0}
{"id": "eqasc_validation_637", "prediction": "all x y.((ChemicalMessager(x) & Body(y)) -> (RegulatedByFeedbackMechanisms(x,y)))", "score": 0}
{"id": "eqasc_validation_637", "prediction": "all x y.((ChemicalMessager(x) & Body(y)) -> RegulatesByFeedbackMechanisms(x,y))", "score": 0}
{"id": "eqasc_validation_637", "prediction": "all x.((ChemicalMembro(x) & Body(y)) -> RegulatesByFeedbackMechanisms(x,y))", "score": 0}
{"id": "eqasc_validation_637", "prediction": "all x.(ChemistInBody(x) -> RegulatoryByFeedbackMechanisms(x))", "score": 0}
{"id": "eqasc_validation_637", "prediction": "all x y z.((ChemicalMessaging(x) & Body(y) & FeedbackMechanism(z)) -> RegulatedBy(x,y,z))", "score": 0}
{"id": "eqasc_validation_637", "prediction": "all x y.((Chemist(x) & Body(y)) -> RegulatesByFeedbackMechanisms(x,y))", "score": 0}
{"id": "eqasc_validation_637", "prediction": "all x.(ChemicalMessager(x) -> RegulatesByFeedbackMechanisms(x))", "score": 0}
{"id": "eqasc_validation_637", "prediction": "all x y.((ChemicalMessager(x) & Body(y) & RegulatesFeedbackMechanisms(x,y)) -> DirectedBy(x,y))", "score": 0}
{"id": "eqasc_validation_637", "prediction": "all x y.((ChemistryBottom(x) & Body(y) & Regulates(x,y)) -> FeedbackMechanism(x))", "score": 0}
{"id": "eqasc_validation_637", "prediction": "all x y.((ChemistryMeasurer(x) & Body(y)) -> RegulatesByFeedbackMechanisms(x,y))", "score": 0}
{"id": "eqasc_validation_637", "prediction": "all x.(ChemicalMessenger(x) -> RegulatesByFeedbackMechanisms(x))", "score": 0}
{"id": "eqasc_validation_637", "prediction": "all x.(ChemistryMessenger(x) -> (Regulates(x) & InBody(x)))", "score": 0}
{"id": "eqasc_validation_637", "prediction": "all x y.((ChemicalMessagerInBody(x) & Body(y)) -> Regulates(x,y))", "score": 0}
{"id": "eqasc_validation_637", "prediction": "all x y.( (ChemicalMessager(x) & Body(y)) -> RegulatedByFeedbackMechanisms(x,y))", "score": 0}
{"id": "eqasc_validation_638", "prediction": "all x.(Hormone(x) -> HelpsBodyManageStress(x))", "score": 0}
{"id": "eqasc_validation_638", "prediction": "all x.(Humor(x) -> HelpsBodyManageStress(x))", "score": 0}
{"id": "eqasc_validation_638", "prediction": "all x.(Hormone(x) -> HelpsHaveStress(x))", "score": 0}
{"id": "eqasc_validation_638", "prediction": "all x.(Homone(x) -> HelpsMortgageStress(x))", "score": 0}
{"id": "eqasc_validation_638", "prediction": "all x y.((Hormone(x) & Body(y)) -> HelpsManageStress(x,y))", "score": 0}
{"id": "eqasc_validation_638", "prediction": "all x y.((Hormone(x) & Body(y)) -> HelpsManagementStress(x,y))", "score": 0}
{"id": "eqasc_validation_638", "prediction": "all x.(Hormone(x) -> HelpStressManagement(x))", "score": 0}
{"id": "eqasc_validation_638", "prediction": "all x y.((Moon(x) & Body(y)) -> ManagesStress(x,y))", "score": 0}
{"id": "eqasc_validation_639", "prediction": "all x y.((Body(x) & Body(y)) -> ManagesStress(x,y))", "score": 0}
{"id": "eqasc_validation_639", "prediction": "all x y z.((Organism(x) & Body(y) & Emphasis(z)) -> (RegulatesByFeedbackMechanisms(x,y,z)))", "score": 0}
{"id": "eqasc_validation_639", "prediction": "all x.(ManagingStress(x) -> (RegulatedByFeedbackMechanisms(x) & EnablesManagement(x) | EnablesManagement(x)))", "score": 0}
{"id": "eqasc_validation_639", "prediction": "all x y.((Body(x) & Body(y)) -> ManagesStressThroughFeedbackMechanisms(x,y))", "score": 0}
{"id": "eqasc_validation_639", "prediction": "all x y.((Body(x) & Stress (y) & FeedbackMechanisms(x)) -> Regulates(x,y))", "score": 0}
{"id": "eqasc_validation_639", "prediction": "all x y.((Body(x) & Body(y)) -> (RegulatesThroughFeedbackMechanisms(x,y) & ManagesStress(x,y)))", "score": 0}
{"id": "eqasc_validation_639", "prediction": "all x y.((StressManagement(x) & Body(y) & FeedbackMechanisms(x)) -> RegulatesBody(y,x))", "score": 0}
{"id": "eqasc_validation_639", "prediction": "all x y.((Body(x) & Body(y)) -> AdministratesStress(x,y))", "score": 0}
{"id": "eqasc_validation_639", "prediction": "all x y.((Body(x) & Body(y) & Stress(z)) -> RegulatoryByFeedbackMechanisms(x))", "score": 0}
{"id": "eqasc_validation_639", "prediction": "all x y.((Body(x) & Body(y) & ManagesStress(x,y)) -> RegulatesFeedbackMechanisms(x,y))", "score": 0}
{"id": "eqasc_validation_639", "prediction": "all x.(ManagingBodysStress(x) -> FeedbackMechanismsRegulate(x))", "score": 0}
{"id": "eqasc_validation_639", "prediction": "all x y.((Body(x) & Stress(y) & FeedbackMechanisms(z)) -> ManagesStress(x,y,z))", "score": 0}
{"id": "eqasc_validation_639", "prediction": "all x y z.((Body(x) & Body(y) & Stress(z)) -> (Manages(x,y) & FeedbackMechanisms(c)))", "score": 0}
{"id": "eqasc_validation_639", "prediction": "all x y.((BodyDomain(x) & BodyDomain(y) & RegulatesThroughFeedbackMechanisms(x,y)) -> ManagesStress(x,y))", "score": 0}
{"id": "eqasc_validation_639", "prediction": "all x.(ManagingBodyStress(x) -> RegulatesFeedbackMechanisms(x))", "score": 0}
{"id": "eqasc_validation_639", "prediction": "all x y.((Body(x) & Body(y) & Stress(z)) -> RegulatesFeedbackMechanisms(x,w))", "score": 0}
{"id": "eqasc_validation_640", "prediction": "all x.(FemaleHormone(x) -> IsOsteroid(x))", "score": 0}
{"id": "eqasc_validation_640", "prediction": "all x.(FemaleHistocin(x) -> Esterogen(x))", "score": 0}
{"id": "eqasc_validation_640", "prediction": "all x.(FemaleHormone(x) -> Estrogen(x))", "score": 0}
{"id": "eqasc_validation_640", "prediction": "all x.(FemaleHormone(x) -> (Estrogen(x)))", "score": 0}
{"id": "eqasc_validation_640", "prediction": "all x.(FemaleHydrogen(x) -> Estrogen(x))", "score": 0}
{"id": "eqasc_validation_640", "prediction": "all x.(FemaleHormone(x) -> IsErgotamin(x))", "score": 0}
{"id": "eqasc_validation_640", "prediction": "all x.(FemaleHormone(x) -> Oestrogen(x))", "score": 0}
{"id": "eqasc_validation_640", "prediction": "all x.(FemaleHormone(x) -> Esterogen(x))", "score": 0}
{"id": "eqasc_validation_640", "prediction": "all x.(FemaleHydrogen(x) -> Esterogen(x))", "score": 0}
{"id": "eqasc_validation_640", "prediction": "all x y z.((FemaleHolotype(x) & Hormone(y) & Estrogen(z) & TestedBy(x,y,z)) -> Estrogen(y))", "score": 0}
{"id": "eqasc_validation_640", "prediction": "all x y.((FemaleHéron(x) & Female(y)) -> Estrogen(x))", "score": 0}
{"id": "eqasc_validation_641", "prediction": "all x.(Estrogen(x) -> RegulatedByFeedbackMechanisms(x))", "score": 0}
{"id": "eqasc_validation_641", "prediction": "all x y.((Estrogen(x) & FeedbackMechanism(y)) -> Regulates(x,y))", "score": 0}
{"id": "eqasc_validation_641", "prediction": "all x.(Estrogen(x) -> RegulatesByFeedbackMechanisms(x))", "score": 0}
{"id": "eqasc_validation_641", "prediction": "all x.(RegularWithFeedbackMechanisms(x) -> strogen(x))", "score": 0}
{"id": "eqasc_validation_641", "prediction": "all x.((Estrogen(x) & FeedbackMechanism(x)) -> Regulates(x))", "score": 0}
{"id": "eqasc_validation_641", "prediction": "all x.((Estrogen(x) & FeedbackMechanism(x)) -> Regulates(x,estrogen,estrogen))", "score": 0}
{"id": "eqasc_validation_641", "prediction": "all x.(Estrogen(x) -> GeneratesByFeedbackMechanisms(x))", "score": 0}
{"id": "eqasc_validation_642", "prediction": "all x.(FeedbackMechanism(x) -> ControlsIncertitude(x))", "score": 0}
{"id": "eqasc_validation_642", "prediction": "all x y.((FeedbackMechanism(x) & Uncertainty(y)) -> NecessaryToControl(x,y))", "score": 0}
{"id": "eqasc_validation_642", "prediction": "all x y.((Mechanisme(x) & Incertitude(y)) -> NecessaryToControl(x,y))", "score": 0}
{"id": "eqasc_validation_642", "prediction": "all x.(FeedbackMechanism(x) -> ControlsUncertainty(x))", "score": 0}
{"id": "eqasc_validation_642", "prediction": "all x.(FeedbackMechanism(x) -> ControlsIncertity(x))", "score": 0}
{"id": "eqasc_validation_642", "prediction": "all x.(FormFeedback(x) -> ControlsUncertainty(x))", "score": 0}
{"id": "eqasc_validation_642", "prediction": "all x.(FeedbackMethod(x) -> ControlsUncertainty(x))", "score": 0}
{"id": "eqasc_validation_642", "prediction": "all x.((FeedbackMechanism(x) & ControlsIncertitude(x)) -> NecessaryToControlIncertitude(x))", "score": 0}
{"id": "eqasc_validation_643", "prediction": "all x.(Hannabinol(x) -> (RegulatedByControllingUncertainty(x) & ControlsIncertitude(x)))", "score": 0}
{"id": "eqasc_validation_643", "prediction": "all x.(Hannabinoid(x) -> (RegulatedByControllingIncertitude(x) & Notification(x) & RegulatesIncertitude(x)))", "score": 0}
{"id": "eqasc_validation_643", "prediction": "all x.(Hormone(x) -> (ReglementedByControllingIncertitude(x) & -RegulatesIncertitude(x)))", "score": 0}
{"id": "eqasc_validation_643", "prediction": "all x.(Hormone(x) -> Regulate(x))", "score": 0}
{"id": "eqasc_validation_643", "prediction": "all x.(Hydrogen(x) -> RegulatesByCompellingIncertitude(x))", "score": 0}
{"id": "eqasc_validation_643", "prediction": "all x.(Hormone(x) -> (RegulatedByControllingUncertainty(x) | ControlledUncertainty(x)))", "score": 0}
{"id": "eqasc_validation_643", "prediction": "all x.(Hormone(x) -> (Regulatement(x) & ControlsUncertainty(x)))", "score": 0}
{"id": "eqasc_validation_643", "prediction": "all x y.((Hormone(x) & Uncertainty(y)) -> RegulatesByControlling(x,y))", "score": 0}
{"id": "eqasc_validation_643", "prediction": "all x y.((Hologen(x) & Uncertainty(y)) -> Regulate(x,y))", "score": 0}
{"id": "eqasc_validation_643", "prediction": "all x y.((Holomocrite(x) & Insurgency(y)) -> (RegulatedByControlling(x,y) & ControlledByControlling(x,z)))", "score": 0}
{"id": "eqasc_validation_643", "prediction": "all x.(Hormone(x) -> (ControlsIncertitude(x) & ControlsIncertitude(x)))", "score": 0}
{"id": "eqasc_validation_643", "prediction": "all x.(Hormone(x) -> (RegulatedByContainingIncertitude(x) | ControledByIncertitude(x)))", "score": 0}
{"id": "eqasc_validation_643", "prediction": "all x y.((Estrogen(x) & Uncertainty(y)) -> Regulates(x,y))", "score": 0}
{"id": "eqasc_validation_643", "prediction": "all x.(Hannabins(x) -> (RegulatedByControlingIncertitude(x) | ControlsIncertitude(x)))", "score": 0}
{"id": "eqasc_validation_643", "prediction": "all x y.((Hormone(x) & Incertitude(y)) -> (RegulatedByControllingIncertitude(x,y) & ControlsIncertitude(x,y)))", "score": 0}
{"id": "eqasc_validation_643", "prediction": "all x.(Holo(x) -> (RegulatedByControllingUncertainty(x) & NecessarilyControlledIncertitude(x)))", "score": 0}
{"id": "eqasc_validation_644", "prediction": "all x y.((Hormone(x) & PancreaticSecticiones(y)) -> Regulates(x,y))", "score": 0}
{"id": "eqasc_validation_644", "prediction": "all x.(Homologe(x) -> RegulatesPancreaticSections(x))", "score": 0}
{"id": "eqasc_validation_644", "prediction": "all x y z.((Homone(x) & PancreaticSectition(y) & Secretions(z)) -> Regulate(x,y,z))", "score": 0}
{"id": "eqasc_validation_644", "prediction": "all x y.((Hormone(x) & PancreaticSectionism(y)) -> Regulates(x,y))", "score": 0}
{"id": "eqasc_validation_644", "prediction": "all x.(Hormone(x) -> RegulatesPancreaticSections(x))", "score": 0}
{"id": "eqasc_validation_644", "prediction": "all x.(Hormone(x) -> RegulatesPancreaticSectaions(x))", "score": 0}
{"id": "eqasc_validation_644", "prediction": "all x.(Hormon(x) -> RegulatesPancreaticSections(x))", "score": 0}
{"id": "eqasc_validation_644", "prediction": "all x.(Homone(x) -> RegulatesPancreaticSectations(x))", "score": 0}
{"id": "eqasc_validation_644", "prediction": "all x.(Hormone(x) -> RegulatesSecrétions(x))", "score": 0}
{"id": "eqasc_validation_644", "prediction": "all x.(Hormones(x) -> RegulatesPancreaticSections(x))", "score": 0}
{"id": "eqasc_validation_644", "prediction": "all x y.((Hormone(x) & PancreaticSectioid(y)) -> Regulates(x,y))", "score": 0}
{"id": "eqasc_validation_645", "prediction": "all x y.((FeedbackMechanism(x) & PancreaticSectivity(y)) -> Regulates(x,y))", "score": 0}
{"id": "eqasc_validation_645", "prediction": "all x y.((FeedbackMechanism(x) & PancreaticSectiions(y)) -> Regulates(x,y))", "score": 0}
{"id": "eqasc_validation_645", "prediction": "all x.(FeedbackMechanism(x) -> RegulatesPancreaticSections(x))", "score": 0}
{"id": "eqasc_validation_645", "prediction": "all x y.((FeedbackMechanism(x) & PancreaticSectition(y)) -> Regulates(x,y))", "score": 0}
{"id": "eqasc_validation_645", "prediction": "all x.(FeedbackMechanism(x) -> RegulatesPancreaticSectrition(x))", "score": 0}
{"id": "eqasc_validation_645", "prediction": "all x y z.((FeedbackMechanism(x) & PancreaticSectition(y) & PancreaticSectition(z)) -> Regulates(x,y,z))", "score": 0}
{"id": "eqasc_validation_645", "prediction": "all x y.((FeedbackMechanism(x) & PancreaticSecrineSections(y)) -> Regulates(x,y))", "score": 0}
{"id": "eqasc_validation_645", "prediction": "all x.(FeedbackMechanism(x) -> RegulatesPangereatricSections(x))", "score": 0}
{"id": "eqasc_validation_645", "prediction": "all x y z.((FeedbackMechanism(x) & PancreaticSectitations(y) & PancreaticShepthesis(z)) -> Regulates(x,y,z))", "score": 0}
{"id": "eqasc_validation_645", "prediction": "all x y z.((FeedbackMechanism(x) & PancreaticSectations(y) & FeedbackMechanical(z)) -> Regulates(x,y,z))", "score": 0}
{"id": "eqasc_validation_645", "prediction": "all x y.((FeedbackMechanism(x) & PancreaticSectiton(y)) -> Regulates(x,y))", "score": 0}
{"id": "eqasc_validation_645", "prediction": "all x y.((Mechanism(x) & PancreaticSectition(y)) -> Regulate(x,y))", "score": 0}
{"id": "eqasc_validation_645", "prediction": "all x y.((FeedbackMechanism(x) & PancreaticSecrine(y)) -> RegulatesSecretions(x,y))", "score": 0}
{"id": "eqasc_validation_645", "prediction": "all x y z.((FeedbackMechanism(x) & PancreaticSectations(y) & Secretions(z) & Regulates(x,y,z)) -> Regulates(x,y,z))", "score": 0}
{"id": "eqasc_validation_645", "prediction": "all x.(FeedbackMechanism(x) -> RegulatesPapercreaticSectations(x))", "score": 0}
{"id": "eqasc_validation_646", "prediction": "all x.(Hostasis(x) -> NegativeFeedbackMechanisms(x))", "score": 0}
{"id": "eqasc_validation_646", "prediction": "all x.(Homeostasis(x) -> InvolvesNegativeFeedbackMechanisms(x))", "score": 0}
{"id": "eqasc_validation_646", "prediction": "all x.(Homeostasis(x) -> IntegratesNegativeFeedbackMeasures(x))", "score": 0}
{"id": "eqasc_validation_646", "prediction": "all x.(Honeyostasis(x) -> NegativeFeedbackMechanisms(x))", "score": 0}
{"id": "eqasc_validation_646", "prediction": "all x.(Homeostasis(x) -> NegativeFeedback(x))", "score": 0}
{"id": "eqasc_validation_646", "prediction": "all x.(Hydrogestasis(x) -> InvolvesNegativeFeedback(x))", "score": 0}
{"id": "eqasc_validation_646", "prediction": "all x.(Homeostasis(x) -> UninvolvesNegativeFeedbackMechanisms(x))", "score": 0}
{"id": "eqasc_validation_646", "prediction": "all x.(Homeostasis(x) -> InvolvesNegativeFeedbackMechanismes(x))", "score": 0}
{"id": "eqasc_validation_646", "prediction": "all x y.((Homeostasis(x) & NegativeFeedbackMechanisms(y)) -> Involves(x,y))", "score": 0}
{"id": "eqasc_validation_646", "prediction": "all x.(Homeostasis(x) -> InvolvesNoFeedbackMechanisms(x))", "score": 0}
{"id": "eqasc_validation_646", "prediction": "all x.(Honeyostasis(x) -> InvolvesNegativeFeedbackMechanisms(x))", "score": 0}
{"id": "eqasc_validation_646", "prediction": "all x.(Homeostasis(x) -> NegativeFeedbackMechanisms(x))", "score": 0}
{"id": "eqasc_validation_647", "prediction": "all x.(Hysterone(x) -> RegulatedByHomeostasis(x))", "score": 0}
{"id": "eqasc_validation_647", "prediction": "all x y.((Hormone(x) & Hormone(y)) -> RegulatesByHomeostasis(x,y))", "score": 0}
{"id": "eqasc_validation_647", "prediction": "all x y.((Hormone(x) & Hormone(y)) -> RegulatesByHomeostasis(y,x))", "score": 0}
{"id": "eqasc_validation_647", "prediction": "all x.(HormoneRegulate(x) -> Homeostasis(x))", "score": 0}
{"id": "eqasc_validation_647", "prediction": "all x y.((Hydrogen(x) & Hormone(y)) -> RegulatesByHomeostasis(x,y))", "score": 0}
{"id": "eqasc_validation_647", "prediction": "all x y.((Holesterase(x) & Hormone(y)) -> RegulatesByHomeostasis(x,y))", "score": 0}
{"id": "eqasc_validation_647", "prediction": "all x y z.((Homoglobin(x) & Hormone(y) & Homeostasis(z)) -> RegulatesByHomeostasis(x,y,z))", "score": 0}
{"id": "eqasc_validation_647", "prediction": "all x y.((Hormone(x) & Hormone(y)) -> (RegulatoryByHomeostasis(x,y) & RegulateByHomeostasis(x,y)))", "score": 0}
{"id": "eqasc_validation_647", "prediction": "all x.(Hormone(x) -> RegulatesByHomeostasis(x))", "score": 0}
{"id": "eqasc_validation_647", "prediction": "all x.(Hormone(x) -> RegulatedByHomeostasis(x))", "score": 0}
{"id": "eqasc_validation_647", "prediction": "all x y z.((Hannah(x) & Hormone(y) & Homeostasis(z)) -> RegulatesBy(x,y,z))", "score": 0}
{"id": "eqasc_validation_647", "prediction": "all x.(Hominet(x) -> RegulatedByHomeostasis(x))", "score": 0}
{"id": "eqasc_validation_647", "prediction": "all x y z.((Herbal(x) & Hormone(y) & Hormone(z)) -> RegulatesByHomeostasis(y,z))", "score": 0}
{"id": "eqasc_validation_647", "prediction": "all x y.((Hormone(x) & Hormone(y)) -> RegulatedByHomeostasis(x,y))", "score": 0}
{"id": "eqasc_validation_648", "prediction": "all x.((MoorinaryRegulation(x) & DependantOnFeedbackLoops(x)) -> MaintainsBalanceAndHomeostasis(x))", "score": 0}
{"id": "eqasc_validation_648", "prediction": "all x.((HydrogeneticRegulation(x) & FeedbackLoops(x)) -> (MaintainsBalance(x) & MaintainsHomeostasis(x)))", "score": 0}
{"id": "eqasc_validation_648", "prediction": "all x.((HormonalRegulation(x) & FeedbackLoops(x)) -> MaintainsBalanceAndHomeostasis(x))", "score": 0}
{"id": "eqasc_validation_648", "prediction": "all x.((Regulation(x) & FeedbackLoops(x) & MaintainBalanceAndHomeostasis(x)) -> MuchRegulation(x))", "score": 0}
{"id": "eqasc_validation_648", "prediction": "all x y z w.((Regulation(x) & FeedbackLoops(y) & Balance(z) & Homeostasis(w)) -> DependsOn(x,y,z,w))", "score": 0}
{"id": "eqasc_validation_648", "prediction": "all x.((OralRegulation(x) & DependsOnFeedbackLoops(x)) -> SupportsBalanceAndHomeostasis(x))", "score": 0}
{"id": "eqasc_validation_648", "prediction": "all x.((HormonalRegulation(x) & FeedbackLoops(x)) -> (MaintainsBalance(x) & MaintainsHomeostasis(x)))", "score": 0}
{"id": "eqasc_validation_648", "prediction": "all x.(HolisticRegulation(x) -> DependsOnFeedbackLogics(x))", "score": 0}
{"id": "eqasc_validation_648", "prediction": "all x y.((HolisticRegulation(x) & Balance(y) & Homeostasis(z)) -> DependsOnFeedbackLoops(x,y,z))", "score": 0}
{"id": "eqasc_validation_648", "prediction": "all x.((HydrostaticRegulation(x) & FeedbackLoops(x)) -> MaintainsBalanceAndHomeostasis(x))", "score": 0}
{"id": "eqasc_validation_648", "prediction": "all x.((HannabinolaryRegulation(x) & DependsOnFeedbackLoops(x)) -> (MaintainsBalance(x) & MaintainsHomeostasis(x)))", "score": 0}
{"id": "eqasc_validation_648", "prediction": "all x.((HolisticRegulation(x) & Balance(x) & Homeostasis(x)) -> ReliesOnFeedbackLoops(x))", "score": 0}
{"id": "eqasc_validation_648", "prediction": "all x y.((HormonalRegulation(x) & FeedbackLoops(y)) -> (MaintainsBalance(x,y) & MaintainsHomeostasis(x,y)))", "score": 0}
{"id": "eqasc_validation_648", "prediction": "all x.((HydrogenoregulatoryRegulation(x) & FeedbackLoops(x)) -> (MaintainsBalance(x) & MaintainsHomeostasis(x)))", "score": 0}
{"id": "eqasc_validation_648", "prediction": "all x.((MonotoralRegulation(x) & DependsOnFeedback(x)) -> (MaintainsBalance(x) & MaintainsHomeostasis(x)))", "score": 0}
{"id": "eqasc_validation_649", "prediction": "all x y z.((Hormone(x) & FeedbackLoops(y) & Hormone(z)) -> MaintainBalanceOrFeedback(x,y,y))", "score": 0}
{"id": "eqasc_validation_649", "prediction": "all x.(Hormone(x) -> (MaintainsBalanceWithFeedbackLoops(x) & FeedbackLoops(x)))", "score": 0}
{"id": "eqasc_validation_649", "prediction": "all x.(Hormone(x) -> MaintainsBalanceWithFeedbackLoops(x))", "score": 0}
{"id": "eqasc_validation_649", "prediction": "all x.((Hormone(x) & BalanceForFeedback(x)) -> MaintainsBalanceWithFeedback(x))", "score": 0}
{"id": "eqasc_validation_649", "prediction": "all x.((Hormone(x) & Balance(x)) -> FeedbackLoops(x))", "score": 0}
{"id": "eqasc_validation_649", "prediction": "all x y.((Hormone(x) & FeedbackLoop(y)) -> MaintainsBalanceWith(x,y))", "score": 0}
{"id": "eqasc_validation_649", "prediction": "all x y z.((Hormone(x) & FeedbackLoop(y) & Balance(z)) -> MaintainsWith(x,y,z))", "score": 0}
{"id": "eqasc_validation_649", "prediction": "all x y z.((Hemone(x) & FeedbackLoop(y) & Balance(z)) -> MaintainsBalanceWith(x,y,z))", "score": 0}
{"id": "eqasc_validation_649", "prediction": "all x.(Homone(x) -> MaintainsBalanceWithFeedbackLoops(x))", "score": 0}
{"id": "eqasc_validation_649", "prediction": "all x y z.((Hormone(x) & FeedbackLoop(y) & Balance(z)) -> MaintainsBalanceWith(x,y,z))", "score": 0}
{"id": "eqasc_validation_649", "prediction": "all x.(Hormone(x) -> WeatherBalanceWithFeedbackLoops(x))", "score": 0}
{"id": "eqasc_validation_649", "prediction": "all x y.((Hormone(x) & FeedbackLoops(y)) -> MaintainsBalance(x,y))", "score": 0}
{"id": "eqasc_validation_649", "prediction": "all x y.((Hormone(x) & FeedbackLoop(y)) -> MaintenanceWithBalance(x,y))", "score": 0}
{"id": "eqasc_validation_649", "prediction": "all x y.((Hormone(x) & FeedbackLoops(y)) -> MaintainsBalanceAndFeedback(x,y))", "score": 0}
{"id": "eqasc_validation_650", "prediction": "all x y.((Absorbment(x) & Nutrient(y) & LocatedInSmallIntestine(x,y)) -> Adheres(x,y))", "score": 0}
{"id": "eqasc_validation_650", "prediction": "all x.(AbsorptionOfNutrients(x) -> SmallIntestine(x))", "score": 0}
{"id": "eqasc_validation_650", "prediction": "all x.(AbsorptionOfNutrients(x) -> InSmallintestine(x))", "score": 0}
{"id": "eqasc_validation_650", "prediction": "all x.(AbsorptionOfNutrients(x) -> exists y.(SmallIntestine(y) & OccursIn(x,y))))", "score": -1}
{"id": "eqasc_validation_650", "prediction": "all x.(AbsorbmentOfNutrients(x) -> SmallIntestine(x))", "score": 0}
{"id": "eqasc_validation_650", "prediction": "all x y.((AbsorptionOfNutrients(x,y) & SmallIntestine(y)) -> ObtainedIn(x,y))", "score": 0}
{"id": "eqasc_validation_650", "prediction": "all x y.((SmallIntestine(x) & NutrientAbsorption(y)) -> OccursIn(x,y))", "score": 2}
{"id": "eqasc_validation_650", "prediction": "all x y.((SmallIntestine(x) & Metabolite(y)) -> AbsorbsIn(x,y))", "score": 0}
{"id": "eqasc_validation_650", "prediction": "all x y.((AbsorptionOf(x,y) & Nutrients(y)) -> OccursInSmallintestine(y))", "score": 0}
{"id": "eqasc_validation_650", "prediction": "all x y.((MineralAbsorption(x) & SmallIguane(y)) -> OccursIn(x,y))", "score": 0}
{"id": "eqasc_validation_650", "prediction": "all x.(AbsorptionOfNutrients(x) -> PrimarilyInSmallintestine(x))", "score": 0}
{"id": "eqasc_validation_650", "prediction": "all x y.((SmallIntestine(x) & AbsorptionOfNutrients(x,y)) -> OccursIn(y,x))", "score": 0}
{"id": "eqasc_validation_650", "prediction": "all x.(AbsorbsNutrients(x) -> Larger(x))", "score": 0}
{"id": "eqasc_validation_650", "prediction": "all x.(AbsorptionOfNutrients(x) -> (SmallIntestine(x) & PresentedInSmallIgnitor(x)))", "score": 0}
{"id": "eqasc_validation_650", "prediction": "all x.(AbsorbsNutrients(x,SmallIntestine) -> OccursIn(x,SmallIntestine))", "score": 0}
{"id": "eqasc_validation_650", "prediction": "all x.(NutrientAbsorption(x) -> exists y.(Smallintestine(y) & OccursIn(x,y))))", "score": -1}
{"id": "eqasc_validation_651", "prediction": "all x y z.((Nutrient(x) & LivingPlant(y) & Animal(z)) -> NeededForGrowthPartOf(x,y,z))", "score": 0}
{"id": "eqasc_validation_651", "prediction": "all x.(Nutrient(x) -> (NeedsForGrowth(x) & InLivingPlantsAndAnimals(x)))", "score": 0}
{"id": "eqasc_validation_651", "prediction": "all x.(Nutrient(x) -> (NeedsToGrowthInLivingPlantsAndAnimals(x)))", "score": 0}
{"id": "eqasc_validation_651", "prediction": "all x y z.((Nutrient(x) & LivingPlant(y) & Animal(z)) -> NeededForGrowth(x,y,z))", "score": 0}
{"id": "eqasc_validation_651", "prediction": "all x y.((Nutrient(x) & LivingPlant(y) & LivingAnimal(y)) -> NeededForGrowth(x,y))", "score": 0}
{"id": "eqasc_validation_651", "prediction": "all x.(Nutrient(x) -> NeededForGrowth(x))", "score": 0}
{"id": "eqasc_validation_651", "prediction": "all x.(Nutrient(x) -> (NeededForGrowth(x) & exists y.(Plant(y) | Animal(y)) & LivesIn(x,y))))", "score": -1}
{"id": "eqasc_validation_651", "prediction": "all x.(Nutrient(x) -> (Nutrient(x) & NeededForGrowth(x) & LivingPlantsOrAnimals(x)))", "score": 0}
{"id": "eqasc_validation_651", "prediction": "all x y.((Nutrient(x) & (LivingPlant(y) | LivingAnimal(y))) -> NeedsForGrowth(x,y))", "score": 0}
{"id": "eqasc_validation_651", "prediction": "all x.(Nutrient(x) -> (NeededForGrowthInAllLivingPlants(x) & NeededForGrowthInAllLivingAnimals(x)))", "score": 0}
{"id": "eqasc_validation_651", "prediction": "all x.(Nutrient(x) -> NeededForGrowthInLivingPlantsAndAnimals(x))", "score": 0}
{"id": "eqasc_validation_651", "prediction": "all x.(Nutrient(x) -> (NeededForGrowthInAllLivingPlantsAndAnimals(x)))", "score": 0}
{"id": "eqasc_validation_652", "prediction": "all x y.((SmallIntestine(x) & Human(y)) -> NeededForGrowthAndLive(x,y))", "score": 0}
{"id": "eqasc_validation_652", "prediction": "all x.(SmallIntestine(x) -> NeededForHumansToGrowAndLive(x))", "score": 0}
{"id": "eqasc_validation_652", "prediction": "all x y.((Smallintestine(x) & Human(y)) -> NeededForGrowthAndLive(x,y))", "score": 0}
{"id": "eqasc_validation_652", "prediction": "all x y.((SmallIntestine(x) & Human(y)) -> Needs(x,y))", "score": 0}
{"id": "eqasc_validation_652", "prediction": "all x.(Smallintestine(x) -> NeededForGrowthAndLive(x))", "score": 0}
{"id": "eqasc_validation_652", "prediction": "all x.(SmallIntestine(x) -> (NeedsForHuntsToGrowAndLive(x) & GrowAndLive(x)))", "score": 0}
{"id": "eqasc_validation_652", "prediction": "all x y z.((SmallIntestine(x) & Human(y) & Adult(z)) -> NeededFor(x,y,z))", "score": 0}
{"id": "eqasc_validation_652", "prediction": "all x.(SmallIntestine(x) -> NecessaryForMankindToGrowAndLive(x))", "score": 0}
{"id": "eqasc_validation_652", "prediction": "all x.(SmallIntestine(x) -> NeededForGrowthAndLive(x))", "score": 0}
{"id": "eqasc_validation_652", "prediction": "all x.(SmallIntestine(x) -> (NeedsToGrowInHumans(x) & NeedsToLiveInHumans(x)))", "score": 0}
{"id": "eqasc_validation_652", "prediction": "all x y,z.((Smallintestine(x) & Human(y) & NeededForGrowthAndLive(z)) -> NecessaryForGrowthAndLive(x,y,z))", "score": -1}
{"id": "eqasc_validation_652", "prediction": "all x y z.((SmallIguine(x) & Human(y) & GrowthAndLive(y,z)) -> NeededForGrowthAndLive(z,y))", "score": 0}
{"id": "eqasc_validation_652", "prediction": "all x.(SmallIntestine(x) -> NeededForHumansToGrow(x) & NeededForHumansToLive(x))", "score": 0}
{"id": "eqasc_validation_652", "prediction": "all x.(Smallintestine(x) -> (NeedsToGrowAndLive(x) & GrowAndLive(x)))", "score": 0}
{"id": "eqasc_validation_653", "prediction": "all x y.((SmallIntestine(x) & SmallIntestine(y)) -> (TubularOrgan(x) & Structurally(x)))", "score": 0}
{"id": "eqasc_validation_653", "prediction": "all x.(SmallIntestine(x) -> TubularOrgan(x))", "score": 0}
{"id": "eqasc_validation_653", "prediction": "all x.(SmallIntestine(x) -> (SmallIntestine(x) & TubularOrgan(x)))", "score": 0}
{"id": "eqasc_validation_653", "prediction": "all x.(SmallIntestine(x) -> (TuberculousOrgan(x) & StructurallySmallIntestine(x)))", "score": 0}
{"id": "eqasc_validation_653", "prediction": "all x.(SmallIntestine(x) -> TuberalOrgan(x))", "score": 0}
{"id": "eqasc_validation_653", "prediction": "all x.(SmallIntestine(x) -> TuberculousOrgan(x))", "score": 0}
{"id": "eqasc_validation_653", "prediction": "SmallIntestineStructurally,SmallIntestineIsTuberculousOrgan(SmallIntestine)", "score": -1}
{"id": "eqasc_validation_653", "prediction": "SmallIntestine(SMI) & TubularOrgan(TIV) & Structurally(SSI)", "score": 2}
{"id": "eqasc_validation_653", "prediction": "all x y.((SmallIntestine(x) & SmallIntestine(y)) -> TubularOrgan(y))", "score": 0}
{"id": "eqasc_validation_654", "prediction": "all x y.((TubularOrgan(x) & TuberculalOrgan(y)) -> AbsorbsNutrients(x,y))", "score": 0}
{"id": "eqasc_validation_654", "prediction": "all x y.((AbsorbsNutrients(x) & TubularOrgan(y)) -> ObtainedIn(x,y))", "score": 0}
{"id": "eqasc_validation_654", "prediction": "all x y.((TubularOrgan(x) & NutrientAbsorption(y)) -> OccursIn(x,y))", "score": 2}
{"id": "eqasc_validation_654", "prediction": "all x y.((NaturalNutrient(x) & TubularOrgan(y)) -> AbsorbsIn(x,y))", "score": 0}
{"id": "eqasc_validation_654", "prediction": "all x y.((TuberculosicOrgan(x) & TubularOrgan(y)) -> AbsorbsNutrients(x,y))", "score": 0}
{"id": "eqasc_validation_654", "prediction": "all x y.((TumorOrgan(x) & TubularOrgan(y)) -> AbsorbsNutrients(x,y))", "score": 0}
{"id": "eqasc_validation_654", "prediction": "all x y z.((Nutrient(x) & TubularOrgan(y) & Body(z)) -> AdsorbsIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_654", "prediction": "all x y.((TuberculosicOrgan(x) & Nutrient(y)) -> AbsorptionOf(x,y))", "score": 0}
{"id": "eqasc_validation_654", "prediction": "all x.((Nutrients(x) & TubularOrgan(x)) -> AbsorptionOfNutrients(x))", "score": 0}
{"id": "eqasc_validation_654", "prediction": "all x.(AbsorptionOfNutrientsInTulbulusOrgan(x) -> PrimarilyInTuloidOrgan(x))", "score": 0}
{"id": "eqasc_validation_654", "prediction": "all x.(AbsorbsNutrients(x) -> UsuallyInTumulularOrgan(x))", "score": 0}
{"id": "eqasc_validation_654", "prediction": "all x.(AbsorptionOfNutrientsInTubularOrgan(x) -> (OccursIn(x,tubularOrgan) & OccursIn(x,tutubularOrgan)))", "score": 0}
{"id": "eqasc_validation_654", "prediction": "all x.((AbsorptionOfNutrients(x) & TubularOrgan(x)) -> OccursIn(x,y))", "score": 0}
{"id": "eqasc_validation_654", "prediction": "all x y.((TumulusOrgan(x) & Nutrients(y) & AbsorbIn(x,y)) -> TubularOrgan(x))", "score": 0}
{"id": "eqasc_validation_654", "prediction": "all x.(AbsorptionOfNutrients(x) -> PrimarilyInTtubularOrgan(x))", "score": 0}
{"id": "eqasc_validation_654", "prediction": "all x.(AbsorbsNutrients(x) -> TubularOrgan(x))", "score": 0}
{"id": "eqasc_validation_655", "prediction": "all x.(GastrointestinalGiddisfunction(x) -> InhibitsMgAbsorptionFromSmallintestine(x))", "score": 0}
{"id": "eqasc_validation_655", "prediction": "all x y.((GastrointestinalGIDisfunction(x) & SmallIntestine(y)) -> InhibitsMgAbsorptionFromAbsorbing(x,y))", "score": 0}
{"id": "eqasc_validation_655", "prediction": "all x.(GastrointestinalGIDisfunction(x) -> InhibitsMgAbsorptionFromSmallintestine(x))", "score": 0}
{"id": "eqasc_validation_655", "prediction": "all x.(GastrointestinalGIDisfunction(x) -> InhibitsMgAbsorption(x,SmallIndividual))", "score": 0}
{"id": "eqasc_validation_655", "prediction": "all x.(GastrointestinalGiddi dysfunction(x) -> InhibitsMgAbsorption(x))", "score": -1}
{"id": "eqasc_validation_655", "prediction": "all x y.((GastrointestinalGiddisfunction(x) & Smallintestine(y)) -> InhibitsMgAbsorption(x,y))", "score": 0}
{"id": "eqasc_validation_655", "prediction": "all x.(GastrointestinalGIDisfunction(x) -> InhibitsMgAbsorption(x))", "score": 0}
{"id": "eqasc_validation_655", "prediction": "all x y.((GastrointestinalGiddyDisfunction(x) & SmallIndividual(y)) -> InhibitsMgAbsorption(x,y))", "score": 0}
{"id": "eqasc_validation_655", "prediction": "all x y.((GastrointestinalGIDisfunction(x) & GastrointestinalGIDisfunction(y)) -> InhibitsMgAbsorptionFromSmallIntestine(x,y))", "score": 0}
{"id": "eqasc_validation_655", "prediction": "(inhibitsMgAbsorptionFromSmallIndividual(GGI) -> GastrointestinalNormalDisfunction(GGI))", "score": 0}
{"id": "eqasc_validation_655", "prediction": "all x.(GastrointestinalGIDisruptionCanInhibitMgAbsorption(x) -> InhibitsSmallintestine(x))", "score": 0}
{"id": "eqasc_validation_655", "prediction": "all x.(GastrointestinalGIDisfunction(x) -> InhibitsMgAbsorptionFromSmallIntestine(x))", "score": 0}
{"id": "eqasc_validation_656", "prediction": "all x!(AbsorptionOfMagnesium(x) -> OccursInGiant(x))", "score": 0}
{"id": "eqasc_validation_656", "prediction": "all x.(MagnesiumAbsorption(x) -> OccursInGITract(x))", "score": 0}
{"id": "eqasc_validation_656", "prediction": "all x.(MagnesiumAbsorption(x) -> OccursInGi tract(x))", "score": -1}
{"id": "eqasc_validation_656", "prediction": "all x y.((Magnesium(x) & Gait(y)) -> AbsorbsIn(x,y))", "score": 0}
{"id": "eqasc_validation_656", "prediction": "all x y.((MagnesiumAbsorption(x) & GITract(y)) -> OccursIn(x,y))", "score": 0}
{"id": "eqasc_validation_656", "prediction": "all x.(MagnesiumAbsorption(x) -> OccursInGitactic(x))", "score": 0}
{"id": "eqasc_validation_656", "prediction": "all x.(AbsorptionOfMagnetic(x) -> WithinGITrip(x))", "score": 0}
{"id": "eqasc_validation_656", "prediction": "all x y.((MagnesiumAbsorption(x) & GITract(y)) -> occursIn(x,y))", "score": 0}
{"id": "eqasc_validation_656", "prediction": "all x.(MagnesiumAbsorption(x) -> OccursInGiant(x))", "score": 0}
{"id": "eqasc_validation_656", "prediction": "all x.((MagnesiumAbsorption(x) & GITract(x)) -> OccursIn(x,GITrack))", "score": 0}
{"id": "eqasc_validation_656", "prediction": "all x y z.((Magnesium(x) & GITrace(y) & Absorbs(z)) -> OccursIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_656", "prediction": "all x y.((Magnesium(x) & GIThreshold(y)) -> AbsorbsIn(x,y))", "score": 0}
{"id": "eqasc_validation_656", "prediction": "AbsorbsMagnesiumInGynecologicalTrack(AbsorbsMagnesiumInGITrack(AbsorbsMagnesiumInGITriangle(AbsorbsMagnesiumInGITrack(A))", "score": -1}
{"id": "eqasc_validation_656", "prediction": "all x.(AbsorptionOfMagnesium(x) -> ObtainedInGITract(x))", "score": 0}
{"id": "eqasc_validation_656", "prediction": "all x.(AbsorbsMagnesiumInGITriath(x) -> ObscuresInGynaecologicTrap(x))", "score": 0}
{"id": "eqasc_validation_656", "prediction": "all x.(AbsorptionOfMagnesium(x) -> OccursInGITract(x))", "score": 0}
{"id": "eqasc_validation_657", "prediction": "all x.(Diarrhea(x) -> ReducesAbsorption(x))", "score": 0}
{"id": "eqasc_validation_657", "prediction": "all x.(Diarrhea(x) -> ReducedAbsorptionOfNutrients(x))", "score": 0}
{"id": "eqasc_validation_657", "prediction": "all x.(Diarrhea(x) -> ReducesAbsorptionOfNutrients(x))", "score": 0}
{"id": "eqasc_validation_657", "prediction": "all x.(Diarrhea(x) -> ReducesAbsorptionOfNutrients(x,y))", "score": 0}
{"id": "eqasc_validation_657", "prediction": "all x y z.((Diarrhea(x) & Nutrient(y) & Nutrient(z)) -> ReducesAbsorption(x,y))", "score": 0}
{"id": "eqasc_validation_657", "prediction": "all x y z.((Diarrhea(x) & Nutrient(y) & Nutrient(z)) -> ReducesAbsorption(x,y,z))", "score": 0}
{"id": "eqasc_validation_657", "prediction": "all x y.((Diarrhea(x) & Nutrient(y)) -> ReducesAbsorption(x,y))", "score": 0}
{"id": "eqasc_validation_658", "prediction": "all x y.((Diarrhea(x) & Smallintestinal(y)) -> ReducesFuntcion(x,y))", "score": 0}
{"id": "eqasc_validation_658", "prediction": "all x.(Diarrhea(x) -> (ReducesFuntcion(x) & OccursInSmallintestine(x)))", "score": 0}
{"id": "eqasc_validation_658", "prediction": "all x.(Diarrhea(x) -> ReducesFuntcion(x))", "score": 0}
{"id": "eqasc_validation_658", "prediction": "all x y.((Diarrhea(x) & SmallIntestine(y)) -> ReducesFuntcion(x,y))", "score": 0}
{"id": "eqasc_validation_658", "prediction": "all x.(Diarrhea(x) -> (ReducesFontcion(x) & OccursInSmallintestine(x)))", "score": 0}
{"id": "eqasc_validation_658", "prediction": "all x.(Dairrhea(x) -> (ReducesFuntcion(x) & OccursInSmallIntestine(x)))", "score": 0}
{"id": "eqasc_validation_658", "prediction": "all x.((Diarrhea(x) & Funtcion(x) & Smallintestine(x)) -> Reduces(x,y))", "score": 0}
{"id": "eqasc_validation_658", "prediction": "all x.(Diarrhea(x) -> (ReducesFuntcion(x) & OccursInSmallIntestine(x)))", "score": 0}
{"id": "eqasc_validation_658", "prediction": "all x.(Darrhea(x) -> (ReducesFuntcion(x)) & OccursThanSmallintestine(x)))", "score": -1}
{"id": "eqasc_validation_659", "prediction": "all x y.((Absorption(x) & SmallIndividual(y)) -> TakesPlaceIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_659", "prediction": "all x.(Absorption(x) -> TakesPlaceInSmallintestine(x))", "score": 0}
{"id": "eqasc_validation_659", "prediction": "all x.(Absorbtion(x) -> TakesPlaceInSmallIndigestive(x))", "score": 0}
{"id": "eqasc_validation_659", "prediction": "all x y.((Absorption(x) & SmallIntestine(y)) -> PlaceDischarge(x,y))", "score": 0}
{"id": "eqasc_validation_659", "prediction": "all x y z.((Absorption(x) & SmallIntestine(y) & SmallIntestine(z)) -> TakesPlaceIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_659", "prediction": "all x.(Absorption(x) -> TakesPlaceInSmallIntestine(x))", "score": 0}
{"id": "eqasc_validation_659", "prediction": "all x y.((SmallIndividual(x) & AbsorptionPlace(x,y)) -> TakesPlaceIn(x,y))", "score": 0}
{"id": "eqasc_validation_659", "prediction": "all x.(Absorbment(x) -> SmallIntestine(x))", "score": 0}
{"id": "eqasc_validation_659", "prediction": "all x.(Absorbtion(x) -> TakesPlaceInSmallintestine(x))", "score": 0}
{"id": "eqasc_validation_659", "prediction": "all x.(Absorption(x) -> HappensInSmallintestine(x))", "score": 0}
{"id": "eqasc_validation_659", "prediction": "all x y.((Absorption(x) & SmallIntestine(y)) -> TakesPlace(x,y))", "score": 0}
{"id": "eqasc_validation_659", "prediction": "all x y.((Absorption(x) & SmallIgnitor(y)) -> TakesPlaceIn(x,y))", "score": 0}
{"id": "eqasc_validation_659", "prediction": "all x y.((Absorbal(x) & SmallIntestine(y)) -> TakesPlaceIn(x,y))", "score": 0}
{"id": "eqasc_validation_659", "prediction": "all x.(Absorption(x) -> exists y.(Intericular(y) & TakesPlaceIn(x,y)))", "score": 0}
{"id": "eqasc_validation_659", "prediction": "all x y.((Absorption(x) & SmallIntestine(y)) -> TakesPlaceIn(x,y))", "score": 0}
{"id": "eqasc_validation_660", "prediction": "all x.(Nutrients(x) & AbsorbedInSmallintestine(x))", "score": 0}
{"id": "eqasc_validation_660", "prediction": "all x y.((NutrientAbsorptionRoute(x) & SmallIntestine(y)) -> IntakedInSmallIntestine(y))", "score": 0}
{"id": "eqasc_validation_660", "prediction": "all x y z w.((Nutrient(x) & Smallintestine(y) & SME(z) & ApsorbedIn(x,y,z)) -> Absorbed(y))", "score": 0}
{"id": "eqasc_validation_660", "prediction": "all x y z.((SmallIndividual(x) & Nutrients(y) & Smallintestine(z)) -> AbsorbedInSmallItertain(y,z))", "score": 0}
{"id": "eqasc_validation_660", "prediction": "all x y z.((Nutrient(x) & SmallInternal(y) & SmallIntestine(z)) -> AbsorbedIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_660", "prediction": "all x y.((Nutrients(x) & SmallIntestine(y)) -> AbsorbedIn(x,y))", "score": 0}
{"id": "eqasc_validation_660", "prediction": "all x y z.((Beverage(x) & Nutrients(y) & SmallIgnite(z)) -> AbsorbedInSmallintestine(y,z))", "score": 0}
{"id": "eqasc_validation_660", "prediction": "all x.(NutrientAbsorbedInSmallintestine(x) -> (InjectedInSmallintestine(x) | InsertedInSmallintestine(x)))", "score": 0}
{"id": "eqasc_validation_660", "prediction": "all x y z.((SmallIgnitus(x) & Nutrient(y) & Smallintestine(z) & AbsorbedIn(y,z)) -> InjectedIn(y,z))", "score": 0}
{"id": "eqasc_validation_660", "prediction": "all x.(SeedsInSmallintestine(x) -> AbsorbedInSmallintestine(x))", "score": 0}
{"id": "eqasc_validation_660", "prediction": "all x y.((Nutrients(x) & Smallintestine(y)) -> AbsorbedIn(x,y))", "score": 0}
{"id": "eqasc_validation_660", "prediction": "all x y.((SmallIntestin(x) & Smallintestine(y)) -> NervineAbsorbedIn(x,y))", "score": 0}
{"id": "eqasc_validation_660", "prediction": "all x.(NutrientsAbsorbedInSmallintestine(x) -> AbsorbedInSmallintestine(x))", "score": 0}
{"id": "eqasc_validation_660", "prediction": "all x y z.((Nutrient(x) & Smallintestine(y) & Smallintestine(z)) -> AbsorbedIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_660", "prediction": "all x y.((Nutrients(x) & SmallIntestine(y)) -> AbsorbedInSmallintestine(x,y))", "score": 0}
{"id": "eqasc_validation_660", "prediction": "all x y.((Nutrient(x) & Smallintestine(y) & absorbedIn(x,y)) -> AbsorbsIn(x,y))", "score": 0}
{"id": "eqasc_validation_661", "prediction": "all x y.((Food(x) & Body(y)) -> BestNutrientSource(x,y))", "score": 0}
{"id": "eqasc_validation_661", "prediction": "all x y.((Food(x) & Body(y)) -> BestNaturalSourceFor(x,y))", "score": 0}
{"id": "eqasc_validation_661", "prediction": "all x y.((Food(x) & Body(y)) -> BestSourceOfNutrients(x,y))", "score": 0}
{"id": "eqasc_validation_661", "prediction": "all x.(Food(x) -> BestSourceOfNutrients(x))", "score": 0}
{"id": "eqasc_validation_661", "prediction": "all x.(Food(x) -> BestNutrientSource(x))", "score": 0}
{"id": "eqasc_validation_661", "prediction": "all x.(Food(x) -> BestNutrientSourceForBody(x))", "score": 0}
{"id": "eqasc_validation_661", "prediction": "all x.(Food(x) -> SourceOfNutrientsForBody(x))", "score": 0}
{"id": "eqasc_validation_661", "prediction": "all x.(Food(x) -> BenefitsToBody(x))", "score": 0}
{"id": "eqasc_validation_661", "prediction": "all x.(Food(x) -> BestNaturalSourceForBody(x))", "score": 0}
{"id": "eqasc_validation_662", "prediction": "all x.(SmallIntestine(x) -> FoodAbsorptionElement(x))", "score": 0}
{"id": "eqasc_validation_662", "prediction": "all x.(SmallIntestine(x) -> FoodAbsorption(x))", "score": 0}
{"id": "eqasc_validation_662", "prediction": "all x y.((SmallIntestine(x) & FoodAbsorption(y)) -> MainPlace(x,y))", "score": 0}
{"id": "eqasc_validation_662", "prediction": "all x.(SmallIntestine(x) -> (MainPlaceOfFoodAbsorption(x)))", "score": 0}
{"id": "eqasc_validation_662", "prediction": "all x.(SmallIntestine(x) -> FoodAbsorptionPlace(x))", "score": 0}
{"id": "eqasc_validation_662", "prediction": "all x y.((Smallintestine(x) & FoodAbsorptionPlace(y)) -> MainPlace(x,y))", "score": 0}
{"id": "eqasc_validation_662", "prediction": "all x y.((SmallIntestine(x) & FoodAbsorptionPlace(y)) -> MainPlace(x,y))", "score": 0}
{"id": "eqasc_validation_662", "prediction": "all x.(SmallIntestine(x) -> FoodAbsorptionHouse(x))", "score": 0}
{"id": "eqasc_validation_662", "prediction": "all x.(SmallIntestine(x) -> FoodAbsorptionOfOrganism(x))", "score": 0}
{"id": "eqasc_validation_662", "prediction": "(MainSiteOfFoodAbsorption(SmallIntestine) -> FoodAbsorbment(SmallIntestine))", "score": 0}
{"id": "eqasc_validation_663", "prediction": "all x.(Fertilizer(x) -> NumerousNutrients(x))", "score": 0}
{"id": "eqasc_validation_663", "prediction": "all x.(Food(x) -> ContainsMultipleNutrients(x))", "score": 0}
{"id": "eqasc_validation_663", "prediction": "all x.(Food(x) -> containsNeroents(x))", "score": 0}
{"id": "eqasc_validation_663", "prediction": "exists x.(Food(x) & Feast(x) & Contains(x,y))", "score": 0}
{"id": "eqasc_validation_663", "prediction": "all x.(Food(x) -> ContainsNerts(x))", "score": 0}
{"id": "eqasc_validation_663", "prediction": "all x.(Food(x) -> ContainsTenNerts(x))", "score": 0}
{"id": "eqasc_validation_663", "prediction": "all x.(Fruit(x) -> ContainsSeveralNutrients(x))", "score": 0}
{"id": "eqasc_validation_663", "prediction": "all x.(Food(x) -> exists y.(Elements(y) & Contains(x,y))))", "score": -1}
{"id": "eqasc_validation_663", "prediction": "all x.(Food(x) -> ContainsSeveralNutrients(x))", "score": 0}
{"id": "eqasc_validation_663", "prediction": "all x.(Food(x) -> (ContainsNergote(x,10)))", "score": 0}
{"id": "eqasc_validation_663", "prediction": "all x.(Food(x) -> Contains(x,y))", "score": 0}
{"id": "eqasc_validation_663", "prediction": "all x.(Food(x) -> (ContainsMultipleNutrients(x)))", "score": 0}
{"id": "eqasc_validation_663", "prediction": "all x).(Food(x) -> ContainsSeveralNutrients(x))", "score": -1}
{"id": "eqasc_validation_663", "prediction": "all x.(Food(x) -> ContainsNutrients(x))", "score": 0}
{"id": "eqasc_validation_664", "prediction": "all x.(FoodAbsorption(x) -> HappensPurposelyInSmallIntestine(x))", "score": 0}
{"id": "eqasc_validation_664", "prediction": "all x y.((SmallIntestine(x) & SmallIntestine(y)) -> AbsorbsFood(x,y))", "score": 0}
{"id": "eqasc_validation_664", "prediction": "all x.(AbsorptionOfFood(x) -> LocatedInSmallintestine(x))", "score": 0}
{"id": "eqasc_validation_664", "prediction": "all x.(AbsorptionOfFood(x) -> MostlyInSmallIntestine(x))", "score": 0}
{"id": "eqasc_validation_664", "prediction": "all x.(AbsorptionOfFood(x) -> (OccursInSmallIntestine(x) & AlsoInSmallintestine(x)))", "score": 0}
{"id": "eqasc_validation_664", "prediction": "all x y z.((AbsorptionOfFood(x,y) & SmallIgnitor(z) & SmallIntestine(y)) -> HappensInSmallItis(z))", "score": 0}
{"id": "eqasc_validation_664", "prediction": "all x.(AbsorbmentOfFood(x) -> UsuallyInSmallIgniter(x))", "score": 0}
{"id": "eqasc_validation_664", "prediction": "all x y.((Food(x) & SmallIntestine(y)) -> AbsorbsInSmallIntestine(x,y))", "score": 0}
{"id": "eqasc_validation_664", "prediction": "(AbsorptionOfFood(Smallintestine,SmallIntestine))", "score": 0}
{"id": "eqasc_validation_664", "prediction": "all x y.((Smallintestine(x) & AbsorbsFood(x,y)) -> OccursPrimarilyInSmallIntestine(y))", "score": 0}
{"id": "eqasc_validation_664", "prediction": "all x y.((AbsorptionOfFood(x) & Smallintestine(y)) -> MostlyOccursIn(x,y))", "score": 0}
{"id": "eqasc_validation_664", "prediction": "all x y.((Absorption(x) & Food(y) & SmallIntuition(x,y)) -> ObisitesInSmallIntestine(x,y))", "score": 0}
{"id": "eqasc_validation_664", "prediction": "all x y z.((AbsorptionOfFood(x) & SmallIntestine(y) & Smallintestine(z)) -> OccursInSmallIntestine(x,y,z))", "score": 0}
{"id": "eqasc_validation_664", "prediction": "all x y.((AbsorptionOfFood(x) & SmallIntestine(y)) -> OccursInSmallIgnite(x,y))", "score": 0}
{"id": "eqasc_validation_664", "prediction": "all x.(AbsorptionOfFood(x,y) -> OccursInSmallIntestine(y))", "score": 0}
{"id": "eqasc_validation_664", "prediction": "all x y.((FoodAbsorption(x) & SmallIntestine(y)) -> AdheresTo(x,y))", "score": 0}
{"id": "eqasc_validation_665", "prediction": "all x.(DozensOfDrugs(x) -> (InhibitsNutrientAbsorption(x) | DepletesNutrients(x)))", "score": 0}
{"id": "eqasc_validation_665", "prediction": "all x.((Drug(x) & (InhibitesNutrientAbsorption(x) | DepletesNutrients(x))) -> InhibitsNutrientAbsorption(x))", "score": 0}
{"id": "eqasc_validation_665", "prediction": "Thousands of drugs (InhibitsNutrientAbsorption(drugs) | DepletesNutrients(drugs))", "score": -1}
{"id": "eqasc_validation_665", "prediction": "all x y.((Drug(x) & NutrientAbsorption(y)) -> InhibitsOrDepletes(x,y))", "score": 0}
{"id": "eqasc_validation_665", "prediction": "all x.(Drugs(x) -> (InhibitsNutrientAbsorption(x) | DepletesNutrients(x)))", "score": 0}
{"id": "eqasc_validation_665", "prediction": "all x y.((DozensOfDrugs(x) & NutrientAbsorption(y)) -> (Inhibits(x,y) | Depletes(x,y)))", "score": 0}
{"id": "eqasc_validation_665", "prediction": "all x.((Drug(x) & (InhibitsNutrientAbsorption(x) | DepletesNutrients(x))) -> InhibitsNutrientAbsorption(x))", "score": 0}
{"id": "eqasc_validation_665", "prediction": "all x.(Drug(x) -> (InhibitsNutrientAbsorption(x) | DepletesNutrients(x)))", "score": 0}
{"id": "eqasc_validation_665", "prediction": "thousands of drugs (inhibitsNutrientAbsorption(drugs) | DepletesNutrients(drugs)))", "score": -1}
{"id": "eqasc_validation_665", "prediction": "all x.((DozensOfDrug(x) & (InhibitsNutrientAbsorption(x) | DepletsNutrients(x))) -> Diffuses(x))", "score": 0}
{"id": "eqasc_validation_665", "prediction": "all x.(DozensOfDrugs(x) -> (ImmuneNutrientAbsorption(x) | DepleteNutrients(x)))", "score": 0}
{"id": "eqasc_validation_665", "prediction": "all x.(DozensDevicesInhibitNutrientAbsorptionOrDepleteNerts(x) -> Solves(x))", "score": 0}
{"id": "eqasc_validation_665", "prediction": "exists x.(Drug(x) & (InhibitsNutrientAbsorption(x) | DepletesNutrients(x)))", "score": 0}
{"id": "eqasc_validation_665", "prediction": "all x.((DozensOfDrugs(x) & (InhibitsNutrientAbsorption(x) | DepletesNutrients(x))) -> InhibitsNaturalAbsorption(x))", "score": 0}
{"id": "eqasc_validation_665", "prediction": "all x y.((DozensOfDrugs(x) & NutrientAbsorption(y)) -> (Inhibits(x,y) | DepletesNutrients(x,y)))", "score": 0}
{"id": "eqasc_validation_666", "prediction": "so called Incontinence(x) -> Many(x))", "score": -1}
{"id": "eqasc_validation_666", "prediction": "all x.((Drug(x) & CanInhibitSmallIntestineActions(x)) -> CanInhibitSmallIntestineActions(x))", "score": 0}
{"id": "eqasc_validation_666", "prediction": "all x.(Drug(x) -> InhibitsIntestinalActions(x))", "score": 0}
{"id": "eqasc_validation_666", "prediction": "all x.(Drug(x) -> InhibitsSmallintestineActions(x))", "score": 0}
{"id": "eqasc_validation_666", "prediction": "exists x.(Drug(x) & InclinesSmallIntestineActions(x))", "score": 0}
{"id": "eqasc_validation_666", "prediction": "exists x.(Drug(x) & InhibitsSmallIndividual(x))", "score": 0}
{"id": "eqasc_validation_666", "prediction": "exists x.(Drug(x) & InhibitsSmallIntestineAction(x))", "score": 0}
{"id": "eqasc_validation_666", "prediction": "exists x.(Drug(x) & CanInhibitSmallIntestine(x))", "score": 0}
{"id": "eqasc_validation_666", "prediction": "exists x.(Drug(x) & InhibitsSmallIntestine(x))", "score": 0}
{"id": "eqasc_validation_666", "prediction": "exists x.(Drug(x) & InhibitSmallintestinalAction(x))", "score": 0}
{"id": "eqasc_validation_666", "prediction": "exists x.(Drug(x) & IncarceratesSmallintestine(x))", "score": 0}
{"id": "eqasc_validation_666", "prediction": "all x.(Cocaine(x) -> InhibitsSmallInfections(x))", "score": 0}
{"id": "eqasc_validation_666", "prediction": "exists x.(Drug(x) & InhibitsActions(x,Smallintestine))", "score": 0}
{"id": "eqasc_validation_666", "prediction": "all x y.((Drug(x) & SmallIntestine(y)) -> CanInhibitActions(x,y))", "score": 0}
{"id": "eqasc_validation_666", "prediction": "all x.(Drugs(x) -> InhibitSmallintestine(x))", "score": 0}
{"id": "eqasc_validation_666", "prediction": "all x.(Drug(x) -> InhibitsSmallIntestinalActions(x))", "score": 0}
{"id": "eqasc_validation_667", "prediction": "(Nerfuit(e) & Nutrient(e) & Food(e) & Minerals(e))", "score": 0}
{"id": "eqasc_validation_667", "prediction": "all x.((Food(x) & Mineral(x)) -> Nutrient(x))", "score": 0}
{"id": "eqasc_validation_667", "prediction": "(Nutrient(Food) & Nutrient(Minerals))", "score": 0}
{"id": "eqasc_validation_667", "prediction": "all x y.((Food(x) & Mineral(y)) -> Nutrient(x,y))", "score": 0}
{"id": "eqasc_validation_667", "prediction": "((Food(n),n) | Minerals(n)))", "score": -1}
{"id": "eqasc_validation_667", "prediction": "(NaturalNutrient(Food) & Nutrient(Minerals))", "score": 0}
{"id": "eqasc_validation_667", "prediction": "in(food) -> (Nutrient(minerals) | Nutrient(minerals)))", "score": -1}
{"id": "eqasc_validation_667", "prediction": "exists x.(Food(x) & Minerals(x))", "score": 0}
{"id": "eqasc_validation_667", "prediction": "(Natural(Food) & Nutrient(Minerals))", "score": 0}
{"id": "eqasc_validation_667", "prediction": "all x.(Natural(x) -> (Food(x) & Minerals(x)))", "score": 0}
{"id": "eqasc_validation_667", "prediction": "((Food(Fruit) & Minerals(Minerals)) -> Nutrient(Food) & Nutrient(Minerals))", "score": 0}
{"id": "eqasc_validation_667", "prediction": "all x.((Food(x) & Mineral(x)) -> Nutrition(x))", "score": 0}
{"id": "eqasc_validation_667", "prediction": "(NeroBody(Food) & Nutrient(Minerals))", "score": 0}
{"id": "eqasc_validation_667", "prediction": "all x.((Food(x) | Minerals(x)) -> Nutrient(x))", "score": 0}
{"id": "eqasc_validation_667", "prediction": "all x.((Food(x) & Minerals(x)) -> Nutrient(x))", "score": 0}
{"id": "eqasc_validation_668", "prediction": "all x.(AbsorbsMinerals(x) -> OccursInSmallIntestine(x))", "score": 0}
{"id": "eqasc_validation_668", "prediction": "all x.(AbsorptionOfMinerals(x) -> OccursIn(x,SmallIntestine))", "score": 0}
{"id": "eqasc_validation_668", "prediction": "all x y.((Mineral(x) & SmallIngredient(y)) -> Absorbs(x,y))", "score": 0}
{"id": "eqasc_validation_668", "prediction": "all x y.((Mineral(x) & SmallIntestine(y)) -> Absorbs(x,y))", "score": 0}
{"id": "eqasc_validation_668", "prediction": "all x.(Absorption(x,Minerals) -> OccursInSmallIntestine(x))", "score": 0}
{"id": "eqasc_validation_668", "prediction": "all x.(Mineral(x) -> UsuallyOccursInSmallintestine(x))", "score": 0}
{"id": "eqasc_validation_668", "prediction": "all x y.((MineralAbsorption(x) & SmallIntestine(y)) -> ObtainedIn(x,y))", "score": 0}
{"id": "eqasc_validation_668", "prediction": "all x.(MineralAbsorption(x) -> exists y.(Smallintestine(y) & OccursIn(x,y))))", "score": -1}
{"id": "eqasc_validation_668", "prediction": "all x.((Mineral(x) & SmallIntestine(x)) -> Absorbs(x,y))", "score": 0}
{"id": "eqasc_validation_668", "prediction": "all x.(Absorption(x) -> OccursInSmallIntestine(x))", "score": 0}
{"id": "eqasc_validation_668", "prediction": "all x y.((Minerals(x) & SmallIntestine(y)) -> Absorbs(x,y))", "score": 0}
{"id": "eqasc_validation_668", "prediction": "all x.(mineralabsorption(x) -> OccursInSmallIntestine(x))", "score": 0}
{"id": "eqasc_validation_668", "prediction": "all x.(MineralAbsorption(x) -> OccursInSmallIntestine(x))", "score": 0}
{"id": "eqasc_validation_668", "prediction": "all x.(MineralAbsorbtion(x) -> HappensInSmallintestine(x))", "score": 0}
{"id": "eqasc_validation_669", "prediction": "(all x.(Fat(x) -> Nutrient(x)))", "score": 0}
{"id": "eqasc_validation_669", "prediction": "all x.((Fat(x) & Protein(x)) -> Nutrient(x))", "score": 0}
{"id": "eqasc_validation_669", "prediction": "(All x.(Fat(x) & Protein(x)) -> Nutrient(x))", "score": -1}
{"id": "eqasc_validation_669", "prediction": "(Nertifuge(Fat) & Protein(Fat))", "score": 0}
{"id": "eqasc_validation_669", "prediction": "all x.(Fat(x) & Protein(x) -> Nutrient(x))", "score": 0}
{"id": "eqasc_validation_669", "prediction": "all x.((Fat(x) & Protein(x) & Nutrient(x)) -> Nutrient(x))", "score": 0}
{"id": "eqasc_validation_669", "prediction": "all x y.((Fat(x) & Protein(y)) -> Nutrient(x))", "score": 0}
{"id": "eqasc_validation_669", "prediction": "all x.(Element(x) -> (Fat(x) | Protein(x)))", "score": 0}
{"id": "eqasc_validation_669", "prediction": "(Forme(fat) & LikeProtein(fat) & Nutrient(fat))", "score": 0}
{"id": "eqasc_validation_670", "prediction": "all x y.((AbsorbsFat(x) | AbsorbsProtein(x) & StructuralSmallIntestine(y)) -> OccursInSmallIntestine(x,y))", "score": 0}
{"id": "eqasc_validation_670", "prediction": "all x y.((Absorption(x) & Fat(y) & Protein(y)) -> OccursInSmallIndividual(x,y))", "score": 0}
{"id": "eqasc_validation_670", "prediction": "all x.(Absorption(x) -> (OccursInSmallintestine(x) & Fat(x) & Protein(x)))", "score": 0}
{"id": "eqasc_validation_670", "prediction": "all x y.((Absorption(x,y) & Fat(y) & Protein(y)) -> (OccursInSmallIntestine(x,y)))", "score": 0}
{"id": "eqasc_validation_670", "prediction": "all x y z.((Fat(x) & Protein(y) & SmallIntestine(z)) -> AbsorbsInSmallIntestine(x,y,z))", "score": 0}
{"id": "eqasc_validation_670", "prediction": "all x.(AbsorptionOfFatAndProtein(x) -> Smallintestine(x))", "score": 0}
{"id": "eqasc_validation_670", "prediction": "all x.((AbsorptionOfFat(x) & AbsorptionOfProtein(x)) -> OccursPredominantlyInSmallIndividual(x))", "score": 0}
{"id": "eqasc_validation_670", "prediction": "all x y z.((AbsorptionOfFat(x) & AbsorptionOfProtein(y) & SmallIntestine(z)) -> OriginatesIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_670", "prediction": "all x.(Absorption(x) -> (AbsorbsFat(x) & AbsorbsProtein(x) & UsuallyOccursInSmallIntegument(x)))", "score": 0}
{"id": "eqasc_validation_670", "prediction": "all x.(Absorption(x) -> (FatAndProtein(x) & SmallIntestine(x)))", "score": 0}
{"id": "eqasc_validation_670", "prediction": "all x y.((AbsorptionOfFat(x) & AbsorptionOfProtein(y)) -> OccursInSmallIntestine(x))", "score": 0}
{"id": "eqasc_validation_670", "prediction": "all x.(Absorbance(x) -> (Fit(x) | Protein(x)) & SmallIntestine(x)))", "score": -1}
{"id": "eqasc_validation_670", "prediction": "all x y.((Fat(x) & Protein(y) & Smallintestine(z)) -> AbsorbsIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_670", "prediction": "all x.(AbsorbsFat(x) & AbsorbsProtein(x)) -> OccursInSmallIgnitor(x))", "score": -1}
{"id": "eqasc_validation_670", "prediction": "all x.(AbsorptionOfFatAndProtein(x) -> SmallIntestine(x))", "score": 0}
{"id": "eqasc_validation_670", "prediction": "all x.(Absorption(x,fat,protein) -> SurvivesInSmallIntestine(x))", "score": 0}
{"id": "eqasc_validation_671", "prediction": "all x.(Ssperm(x) -> DetonatedIsVagina(x))", "score": 0}
{"id": "eqasc_validation_671", "prediction": "all x y.((Ssperm(x) & Vagina(y) & DuringSexualIntercourse(x,y)) -> DepositedIn(x,y))", "score": 0}
{"id": "eqasc_validation_671", "prediction": "all x y.((Ssperm(x) & Vagina(y) & SexualIntercourse(y)) -> DepositedIn(x,y))", "score": 0}
{"id": "eqasc_validation_671", "prediction": "all x.(Serum(x) -> DepositedInVagina(x))", "score": 0}
{"id": "eqasc_validation_671", "prediction": "all x.(Spore(x) -> (DepositsInVagina(x) & SexualIntercourse(x)))", "score": 0}
{"id": "eqasc_validation_671", "prediction": "all x y.((Sporem(x) & Vagina(y) & SexualIntercourse(y)) -> DepositsIn(x,y))", "score": 0}
{"id": "eqasc_validation_671", "prediction": "all x y.((Ssperm(x) & Vagina(y)) -> Deposited(x,y))", "score": 0}
{"id": "eqasc_validation_671", "prediction": "all x y.((Sporem(x) & Vagina(v)) -> DepositedIn(x,v))", "score": 0}
{"id": "eqasc_validation_671", "prediction": "all x.(Ssperm(x) -> DepositedInVacaginaAfterEyes(x))", "score": 0}
{"id": "eqasc_validation_671", "prediction": "all x.((Sporem(x) & DepositedInVagina(x)) -> SexualIntercourse(x))", "score": 0}
{"id": "eqasc_validation_671", "prediction": "all x y.((Spore(x) & Vagina(y)) -> DepositedIn(x,y))", "score": 0}
{"id": "eqasc_validation_671", "prediction": "all x y.((Ghem(x) & Vagina(y)) -> DepositedIn(x,y))", "score": 0}
{"id": "eqasc_validation_671", "prediction": "all x y.((Ssperm(x) & Vagina(y)) -> DepositedIn(x,y))", "score": 0}
{"id": "eqasc_validation_671", "prediction": "all x y.((Sporem(x) & Vagina(y)) -> depositedIn(x,y))", "score": 0}
{"id": "eqasc_validation_671", "prediction": "all x.((Speech(x) & Vagina(y)) -> DepositedIn(x,y))", "score": 0}
{"id": "eqasc_validation_671", "prediction": "all x y z.((Ssperm(x) & Vagina(y) & SexualIntercourse(e) & DepositedIn(x,y,z)) -> Disposable(x,z))", "score": 0}
{"id": "eqasc_validation_672", "prediction": "all x y.((Semen(x) & Sperm(y)) -> CarrierFor(x,y))", "score": 0}
{"id": "eqasc_validation_672", "prediction": "all x.(Seman(x) -> CarrierForSperm(x))", "score": 0}
{"id": "eqasc_validation_672", "prediction": "all x.((Semen(x) & CarrierForSperm(x)) -> InVariety(x))", "score": 0}
{"id": "eqasc_validation_672", "prediction": "all x.(Semen(x) -> CarrierForSperm(x))", "score": 0}
{"id": "eqasc_validation_672", "prediction": "all x.(Semi(x) -> CarrierForSkerm(x))", "score": 0}
{"id": "eqasc_validation_672", "prediction": "all x.(Semen(x) -> (CarrierForSperm(x) & ContainsSspermIn(x)))", "score": 0}
{"id": "eqasc_validation_672", "prediction": "all x.(Semen(x) -> CarrierForSpores(x))", "score": 0}
{"id": "eqasc_validation_672", "prediction": "all x.(Semen(x) -> CarrierForSsperm(x))", "score": 0}
{"id": "eqasc_validation_672", "prediction": "all x.((Semen(x) & CarriersThesperm(x)) -> Contains(x,sperm))", "score": 0}
{"id": "eqasc_validation_672", "prediction": "all x.((Semen(x) & CarrierForSperm(x)) -> CanBeContainedInSporen(x))", "score": 0}
{"id": "eqasc_validation_672", "prediction": "all x.(Semen(x) -> CarriersForSperm(x))", "score": 0}
{"id": "eqasc_validation_672", "prediction": "all x.((Semian(x) & FragileForSpores(x)) -> CarrierForSpores(x))", "score": 0}
{"id": "eqasc_validation_672", "prediction": "all x.(Semen(x) -> CarryingVirginForSsperm(x))", "score": 0}
{"id": "eqasc_validation_673", "prediction": "all x y.((Semen(x) & Vagina(y) & SexualIntercourse(y)) -> DepositedIn(x,y))", "score": 0}
{"id": "eqasc_validation_673", "prediction": "all x y.((Semen(x) & Vagina(y)) -> DepositedDuringIntercourse(x,y))", "score": 0}
{"id": "eqasc_validation_673", "prediction": "all x.(Semen(x) -> DepositedInVagina(x))", "score": 0}
{"id": "eqasc_validation_673", "prediction": "all x y.((Epithelial(x) & Vagina(y)) -> DepositedDuringSexualIntercourse(x,y))", "score": 0}
{"id": "eqasc_validation_673", "prediction": "all x y.((Semen(x) & Vagina(y)) -> DeposesDuringSexualIntercourse(x,y))", "score": 0}
{"id": "eqasc_validation_673", "prediction": "all x y z.((Semen(x) & Vagina(y) & SexualIntercourse(z)) -> DepositedIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_673", "prediction": "all x.((Semen(x) & SexualIntercourse(x)) -> DepositedInVagina(x))", "score": 0}
{"id": "eqasc_validation_673", "prediction": "all x.(Serum(x) -> DepositedInValgina(x))", "score": 0}
{"id": "eqasc_validation_673", "prediction": "all x y.((Semen(x) & Vagina(y)) -> DepositedIn(x,y))", "score": 0}
{"id": "eqasc_validation_673", "prediction": "all x.((Semen(x) & SexualIntercourse(x)) -> DeposesInVagina(x))", "score": 0}
{"id": "eqasc_validation_673", "prediction": "all x y.((Semen(x) & Vagina(y)) -> DepositedInDuringSexualIntercourse(x,y))", "score": 0}
{"id": "eqasc_validation_673", "prediction": "all x y.((Semen(x) & Vagina(y) & SexualIntercourse(x,y)) -> DepositedIn(x,y))", "score": 0}
{"id": "eqasc_validation_674", "prediction": "all x y.((Erection(x) & Sperm(y) & Ejaculate(x) & Pore(y)) -> CarriesIntoVagina(x,y))", "score": 0}
{"id": "eqasc_validation_674", "prediction": "all x y.((Ejaculate(x) & Sperm(y) & CarriesIntoVagina(x)) -> ErectionNecessaryForCarryingIntoVagina(x,y))", "score": 0}
{"id": "eqasc_validation_674", "prediction": "all x.(Erection(x) -> CarriesEjaculateIntoValga(x))", "score": 0}
{"id": "eqasc_validation_674", "prediction": "all x y.((Erection(x) & Ejaculate(y) & ContainsSpore(y) & Immortal(y)) -> CarriesIntoVagina(x,y))", "score": 0}
{"id": "eqasc_validation_674", "prediction": "all x y.((Erection(x) & Ejaculate(y) & ContainsSsperm(y)) -> CarriesIntoVagina(x,y))", "score": 0}
{"id": "eqasc_validation_674", "prediction": "(-ErectionNecessaryForCarryingEjaculate(Ejaculate) & ContainsSsperm(ejaculate) & IntoVagina(ejaculate,vaginal))", "score": 0}
{"id": "eqasc_validation_674", "prediction": "all x y.((Ejaculate(x) & Sperm(y) & CarryIntoVagina(x,y)) -> NecessaryForCarrying(x,y))", "score": 0}
{"id": "eqasc_validation_674", "prediction": "all x.(Erection(x) -> CarryEjaculateIntoVagina(x))", "score": 0}
{"id": "eqasc_validation_674", "prediction": "all x y.((Ejaculate(x) & Sperm(y) & Contains(x,y)) -> CarriesIntoVagina(x))", "score": 0}
{"id": "eqasc_validation_674", "prediction": "all x.(ErectionInVagina(x) -> CarriesEnclosure(x,sperm))", "score": 0}
{"id": "eqasc_validation_674", "prediction": "all x y z.((Ejaculate(x) & Sperm(y) & Vagina(z)) -> CarriesInto(x,y,z))", "score": 0}
{"id": "eqasc_validation_674", "prediction": "all x.(Erectile(x) -> (CarryingEjaculate(x) & ContainsSperm(x) & HasValganism(x)))", "score": 0}
{"id": "eqasc_validation_674", "prediction": "all x.((Ejaculate(x) & ContainsSperm(x) & CarryingIntoValgus(x)) -> NecessaryForVagina(x))", "score": 0}
{"id": "eqasc_validation_674", "prediction": "all x y.((Ejaculate(x) & Sperm(y) & ToBeCarryIntoVagina(x,y)) -> Needed(x))", "score": 0}
{"id": "eqasc_validation_674", "prediction": "all x.(Erection(x) -> CarriesEjaculate(x))", "score": 0}
{"id": "eqasc_validation_674", "prediction": "all x.((Ejaculate(x) & ContainsSsperm(x)) -> CarryIntoVagina(x))", "score": 0}
{"id": "eqasc_validation_675", "prediction": "all x.((Ssperm(x) & EjaculateCarried(x) & SexualIntercourse(x)) -> DepositedAfterEjaculate(x))", "score": 0}
{"id": "eqasc_validation_675", "prediction": "all x y.((Ssperm(x) & Ejaculate(y) & SexualIntercourse(z) & CarriedDuring(x,y,z)) -> DepositsAfter(x,y,z))", "score": 0}
{"id": "eqasc_validation_675", "prediction": "all x y z.((Ssperm(x) & Ejaculate(y) & SexualIntercourse(z)) -> DepositedAfterTransportation(x,y,z))", "score": 0}
{"id": "eqasc_validation_675", "prediction": "all x y z.((Ssperm(x) & Ejaculate(y) & SexualIntercourse(z) &CarriedDuring(x,y,z)) -> Deposited(x,y,z))", "score": 0}
{"id": "eqasc_validation_675", "prediction": "all x y.((Spore(x) & Ejaculate(y) & CarryByDuringSexualIntercourse(x,y)) -> DepositedAfterEjaculateCarryedForSexualIntercourse(x,y))", "score": 0}
{"id": "eqasc_validation_675", "prediction": "all x y.((Ssperm(x) & Ejaculate(y) & CarriedDuringSexualIntercourse(x)) -> DepositedFollowing(x,y))", "score": 0}
{"id": "eqasc_validation_675", "prediction": "all x y z.((Ssperm(x) & Ejaculate(y) & SexualIntercourse(z) & CarriedDuring(y,z)) -> DepositedAfter(x,y,z))", "score": 0}
{"id": "eqasc_validation_675", "prediction": "all x.(DepositsSspermAfterEjaculateCarry(x) & SexualIntercourse(x))", "score": 0}
{"id": "eqasc_validation_675", "prediction": "all x.((Ssperm(x) & EjaculateCarried(x) & SexualIntercourse(x)) -> DepositedAfter(x))", "score": 0}
{"id": "eqasc_validation_675", "prediction": "all x y z w.((Sporem(x) & Ejaculate(y) & SexualIntercourse(z) & Carried(y,z) & Escubiscated(y)) -> Deposits(x,y,z))", "score": 0}
{"id": "eqasc_validation_675", "prediction": "all x.((Ssperm(x) & EjaculateCarried(x) & SexualIntercourse(x)) -> Deposited(x))", "score": 0}
{"id": "eqasc_validation_675", "prediction": "all x y z.((Stem(x) & Ejaculate(y) & SexualIntercourse(z)) -> Deposes(x,y))", "score": 0}
{"id": "eqasc_validation_675", "prediction": "all x y.((Ssperm(x) & Ejaculate(y) & CarriedDuringSexualIntercourse(x)) -> DepositesAfter(x,y))", "score": 0}
{"id": "eqasc_validation_675", "prediction": "all x y.((Skem(x) & Ejaculate(y) & CarriedDuringSexualIntercourse(z)) -> Deposited(x,y))", "score": 0}
{"id": "eqasc_validation_675", "prediction": "all x y z.((Spore(x) & Ejaculate(y) & SexualIntercourse(z)) -> DepositsBeforeCarrying(x,y,z))", "score": 0}
{"id": "eqasc_validation_675", "prediction": "all x.((Ssperm(x) & EjaculateCarried(x)) -> DepositedInIntercourse(x))", "score": 0}
{"id": "eqasc_validation_676", "prediction": "exists x.(Intercourse(x) & HundredsMillionsSpermReleasedInvagina(x))", "score": 0}
{"id": "eqasc_validation_676", "prediction": "all x y z.((Intercourse(x) & Sperm(y) & Vagina(z) & ReleasedInside(y,x,z)) -> MillionsPetit(y,z))", "score": 0}
{"id": "eqasc_validation_676", "prediction": "every 10 minutes - There are (over a hundred million) sperms inside the vagina.", "score": -1}
{"id": "eqasc_validation_676", "prediction": "(MillionsInVagina(r) | 1 & 504S.M.Vagina(r)))", "score": -1}
{"id": "eqasc_validation_676", "prediction": "exists x.(Host(x,y) & Intercourse(y) & Perma(x,z) & ReleasedWithinVagina(z))", "score": 0}
{"id": "eqasc_validation_676", "prediction": "all x.((Intercourse(x) & ReleasesSperm(x,Varieta)) -> ThirtyMillionsInvagina(x))", "score": 0}
{"id": "eqasc_validation_676", "prediction": "all x y.((Intercourse(x) & Vagina(y)) -> ReleasesSpermInside(x,y))", "score": 0}
{"id": "eqasc_validation_676", "prediction": "all x y.((Intercourse(x) & Sperm(y) & ReleasedInvagina(y)) -> Millions(x,y))", "score": 0}
{"id": "eqasc_validation_676", "prediction": "(Intercourse(s) & Overhead(o) & OneFiveMillionSpermInVagina(s) & DuringIntercourse(o))", "score": 0}
{"id": "eqasc_validation_676", "prediction": "all x y.((Intercourse(x) & Sperm(y)) -> FreedInsideVagina(x,y))", "score": 0}
{"id": "eqasc_validation_676", "prediction": "all x y.((Intercourse(x) & Purpose(y)) -> InvaginalVagina(x,y))", "score": 0}
{"id": "eqasc_validation_676", "prediction": "all x y z.((Intercourse(x) & Sperm(y) & Vagina(z)) -> (DeliversInside(x,y,z) & Contains(y,z)))", "score": 0}
{"id": "eqasc_validation_676", "prediction": "all x y.((Intercourse(x) & Sperm(y)) -> ReleasedInvagina(x,y))", "score": 0}
{"id": "eqasc_validation_676", "prediction": "all x y.((Intercourse(x) & Sperm(y) & Vagina(y)) -> ReleasedInside(x,y))", "score": 0}
{"id": "eqasc_validation_676", "prediction": "all x y.((Intercourse(x) & Sperm(y)) -> ReleasedInVagina(y,x))", "score": 0}
{"id": "eqasc_validation_676", "prediction": "at a time when some hundred millionsperms (withinvilax) are released DuringIntercourse(x,vagail))", "score": -1}
{"id": "eqasc_validation_677", "prediction": "all x.((Alto(x) & TransferredDuringSexualIntercourse(x)) -> MillionsOfSsperm(x))", "score": 0}
{"id": "eqasc_validation_677", "prediction": "all x y.((SexualIntercourse(x) & SexualIntercourse(y)) -> MillionsOfSspermDeposite(x,y))", "score": 0}
{"id": "eqasc_validation_677", "prediction": "all x y z.((Spider(x) & SexualIntercourse(y) & Sperm(z) & Deposits(x,z)) -> MillionsLimits(x,y,z))", "score": 0}
{"id": "eqasc_validation_677", "prediction": "all x y z.((MillionsOfSsperm(x) & SexualIntercourse(y) & SexualIntercourse(z)) -> DepositedDuring(x,y,z))", "score": 0}
{"id": "eqasc_validation_677", "prediction": "all x.((MillionsOfSperm(x) & SexualIntercourse(x)) -> DepositedDuring(x,SexualIntercourse))", "score": 0}
{"id": "eqasc_validation_677", "prediction": "all x y z.((Sextromonaw(x) & Sperm(y) & SexualIntercourse(z)) -> DepositedDuring(x,y,z))", "score": 0}
{"id": "eqasc_validation_677", "prediction": "all x y.((SexualIntercourse(x) & SexualIntercourse(y)) -> DepositsMillionsOfSsperm(x,y))", "score": 0}
{"id": "eqasc_validation_677", "prediction": "all x y z.((Ssperm(x) & SexualIntercourse(y) & SpermDeposits(z)) -> (MillionsOf(x,y) | MillionsOf(x,z))))", "score": -1}
{"id": "eqasc_validation_677", "prediction": "all x y z.((MillionsOfSsperm(x) & SexualIntercourse(y) & SexualIntercourse(z)) -> DepositedAt(x,y,z))", "score": 0}
{"id": "eqasc_validation_677", "prediction": "all x.(Spore(x) -> (MillionsOfSspermDeposite(x) & SexualIntercourse(x) & SexualConcourse(x)))", "score": 0}
{"id": "eqasc_validation_677", "prediction": "all x y z.((SpiderMillions(x) & Sperm(y) & SexualIntercourse(z)) -> DepositedDuring(x,y,z))", "score": 0}
{"id": "eqasc_validation_677", "prediction": "all x.((SexualIntercourse(x) & SexualIntercourse(x)) -> DepositsMillionsOfSsperm(x))", "score": 0}
{"id": "eqasc_validation_677", "prediction": "all x y z.((Sparrow(x) & SexualIntercourse(y) & Sperm(z) & DepositsDuring(x,z)) -> (MillionsOfSperm(x) & SexualIntercourse(y,z)))", "score": 0}
{"id": "eqasc_validation_677", "prediction": "all x y z.((SexerciseIntercourse(z) & Sperm(x) & Sperm(y) & Sperm(z) & DeposesDuring(x,y,z)) -> SexualIntercourse(x,y,z))", "score": 0}
{"id": "eqasc_validation_677", "prediction": "all x.((Ssperm(x) & SexualIntercourse(x) & DepositedInSexualIntercourse(x)) -> MillionsOfSsperm(x))", "score": 0}
{"id": "eqasc_validation_678", "prediction": "exists x y.((Sperm(x) & Freed(y)) & SexualIntercourse(x) & SexualIntercourse(y)) -> (One hundredmillion(x) & Sperm(x)))", "score": -1}
{"id": "eqasc_validation_678", "prediction": "During sexual intercourse, there are thousands of million sperms released while sexually-intercourse(x) -> SpermsReleased(x))", "score": -1}
{"id": "eqasc_validation_678", "prediction": "(MillionsOfSspermsReleased(x) & SexualIntercourse(x))", "score": 0}
{"id": "eqasc_validation_678", "prediction": "(exists x y.(GiantMinorSentimate(x) & SexualIntercourse(x,y))) & ThousandsOfMillionsDiseasesSsperms(y)) & SexualIntercourse(x,z))", "score": -1}
{"id": "eqasc_validation_678", "prediction": "During sexual intercourse, sperms are released every 4-6 weeks.", "score": -1}
{"id": "eqasc_validation_678", "prediction": "Several hundred MillionSspermsReleasedDuringSexualIntercourse(x) -> (SspermsReleasedDuringSexualIntercourse(x) & SpermsReleasedDuringSexualIntercourse(x)))", "score": -1}
{"id": "eqasc_validation_678", "prediction": "exists x.(SexualIntercourse(x) & ReleasesSerums(x,hundredsMillions))", "score": 0}
{"id": "eqasc_validation_678", "prediction": "exists x y.(Spores(x) & SexualIntercourse(y) & Sperms(y) & SexualIntercourse(x,y,z) & HundredsMillions(z))", "score": 0}
{"id": "eqasc_validation_678", "prediction": "During sexual intercourse, sperms (sperms) x.((Single(x) & ReleasedToGenerate(x))) -> exists y.(Spider(y) & SexualIntercourse(y))))", "score": -1}
{"id": "eqasc_validation_678", "prediction": "During sexual intercourse, sperms can be released for hundreds of millions of years.", "score": -1}
{"id": "eqasc_validation_678", "prediction": "During sexual intercourse, sperms are released in excess of a trillionth of the worlds sperms.", "score": -1}
{"id": "eqasc_validation_678", "prediction": "exists x y.(Zowel(x) & Sperm(y) & SexualIntercourse(z) & Released(x,y))", "score": 0}
{"id": "eqasc_validation_678", "prediction": "all x y.((SpiderMillions(x) & SexualIntercourse(y)) -> ReleasesSsperms(x,y))", "score": 0}
{"id": "eqasc_validation_678", "prediction": "Hundreds-millionsPermsProducedDuringSexualIntercourse(x) & SexualIntercourse(e) & FreedDuringIntercourse(x))", "score": -1}
{"id": "eqasc_validation_678", "prediction": "(exists x.(sperm(x) & ReleasedDuringIntercourse(x)) & HundredsMillions(x)))", "score": -1}
{"id": "eqasc_validation_678", "prediction": "(exists x.(Stern(x) & SexualIntercourse(x)) & ReleasesScreen(x))", "score": 0}
{"id": "eqasc_validation_679", "prediction": "all x y.((Porm(x) & DepostedInVagina(x,y)) -> TravelsThroughCervixAndIntoFallopianTubes(x))", "score": 0}
{"id": "eqasc_validation_679", "prediction": "all x y.((Pattern(x) & Sperm(y) & DepositedInVagina(y,x)) -> (FlightsThroughCervix(x) & TravelsIntoFallopianTubes(x)))", "score": 0}
{"id": "eqasc_validation_679", "prediction": "all x.((Sperm(x) & DepositedInVagina(x)) -> (TravelsThroughCervix(x) & FallsopianTubes(x)))", "score": 0}
{"id": "eqasc_validation_679", "prediction": "all x.((Ssperm(x) & DepositedInVagina(x)) -> TravelsThroughCervixAndIntoFallopianTubes(x))", "score": 0}
{"id": "eqasc_validation_679", "prediction": "all x y z.((Sperm(x) & Vagina(y) & Cervix(z) & DepositsIn(x,y,z)) -> TravelsThrough(x,z))", "score": 0}
{"id": "eqasc_validation_679", "prediction": "all x y z.((Ssperm(x) & Vagina(y) & Cervix(z) & DepositedIn(x,y)) -> TravelsThrough(x,z))", "score": 0}
{"id": "eqasc_validation_679", "prediction": "all x y.((Spirit(x) & DepositedInValgina(x,y)) -> (TravelsThroughCervix(x) & FallopianTubes(x)))", "score": 0}
{"id": "eqasc_validation_679", "prediction": "all x.((Ssperm(x) & DepositedInVacagina(x)) -> TravelsThroughCervixAndIntoFallopianTubes(x))", "score": 0}
{"id": "eqasc_validation_679", "prediction": "all x.(DepositsInVagina(x) -> TravelsThroughCervixAndIntoFallopianTubes(x))", "score": 0}
{"id": "eqasc_validation_679", "prediction": "all x y.((Ssperm(x) & DepositedInVagina(x,y)) -> (TravelsThroughCervix(x,y) & FallsopianTubes(y)))", "score": 0}
{"id": "eqasc_validation_679", "prediction": "all x.((Porcel(x) & DepositedInVagina(x,cervix)) -> TravelsThroughCervix(x) & FallsopianUmbrella(x))", "score": 0}
{"id": "eqasc_validation_679", "prediction": "all x.(PoisonedInValga(x) -> TravelThroughCervix(x) & into FallopianTubes(x))", "score": -1}
{"id": "eqasc_validation_679", "prediction": "all x y z.((Spider(x) & Vagina(y) & Cervix(z) & DepositedIn(x,y)) -> TravelsThroughAndIntoFallopianUmbrella(x,z))", "score": 0}
{"id": "eqasc_validation_679", "prediction": "all x y.((Ssperm(x) & Perinatal(y)) -> DepositsInVagina(x,y))", "score": 0}
{"id": "eqasc_validation_679", "prediction": "all x y.((Spore(x) & DepositedInVagina(x) & Cervix(y) & FallopianTubes(x)) -> TravelsThrough(x,y))", "score": 0}
{"id": "eqasc_validation_679", "prediction": "all x y.((Ssperm(x) & LaddenInValencia(x,y)) -> TravelsThroughCervixIntoFallopianTubes(x))", "score": 0}
{"id": "eqasc_validation_680", "prediction": "all x y z w.((Ssperm(x) & Cervix(y) & FallopianTubes(z) & SexualIntercourse(w)) -> TravelsThrough(x,y,z,w))", "score": 0}
{"id": "eqasc_validation_680", "prediction": "all x y z.((Ssperm(x) & Cervix(y) & FallopianTube(z)) -> (TranscendsThrough(x,y) & AndInto(x,z)))", "score": 0}
{"id": "eqasc_validation_680", "prediction": "all x y z.((Ssperm(x) & Cervix(y) & FallopianTubes(z) & SexualIntercourse(x) & After(x,z)) -> TravelsThrough(x,y,z))", "score": 0}
{"id": "eqasc_validation_680", "prediction": "all x y z.((Ssperm(x) & Cervix(y) & FallopianTubes(z)) -> (TravelsThrough(x,y) & TravelsInto(x,z)))", "score": 0}
{"id": "eqasc_validation_680", "prediction": "all x y z.((Ssperm(x) & Cervix(y) & FallopianTub(z)) -> TravelsThrough(x,y))", "score": 0}
{"id": "eqasc_validation_680", "prediction": "all x y z.((Sterm(x) & Cervix(y) & FallopianTuber(z)) -> TravelsThrough(x,y,z))", "score": 0}
{"id": "eqasc_validation_680", "prediction": "all x.((Ssperm(x) & Cervix(x) & FallopianTumulus(x)) -> TravelsToFallopianTumulus(x))", "score": 0}
{"id": "eqasc_validation_680", "prediction": "all x y.((Ssperm(x) & Cervix(y)) -> TravelsThrough(x,y)) & (FallopianTubes(x) -> SexualIntercourse(x)))", "score": -1}
{"id": "eqasc_validation_680", "prediction": "all x y.((Ssperm(x) & Cervix(y) & FallopianTube(x) & SexualIntercourse(y)) -> TravelsThrough(x,y))", "score": 0}
{"id": "eqasc_validation_680", "prediction": "all x y z.((Ssperm(x) & Cervix(y) & FallopianTubes(z) & SexualIntercourse(o)) -> TravelsThrough(x,y,z))", "score": 0}
{"id": "eqasc_validation_680", "prediction": "all x y.((Spectrum(x) & Cervix(y) & FallopianTubes(z) & SexualIntercourse(x,y,z)) -> TravelsThrough(x,y,z))", "score": 0}
{"id": "eqasc_validation_680", "prediction": "all x.(Sperm(x) -> (TravelsThroughCervix(x) & (IntoFallopianTumulus(x) -> SexualIntercourse(x))))", "score": 0}
{"id": "eqasc_validation_680", "prediction": "all x.(Ssperm(x) -> (TravelsThroughCervix(x) & IntoFallopianUtilities(x)))", "score": 0}
{"id": "eqasc_validation_680", "prediction": "all x y.((Ssperm(x) & Cervix(y) & FallopianTubes(z) & SexualIntercourse(w)) -> TravelsThroughArcticOrFallopianTubes(x,z))", "score": 0}
{"id": "eqasc_validation_680", "prediction": "all x y.((Ssperm(x) & Cervix(y) & FallopianTube(x)) -> TravelsAfterSexualIntercourse(x,y))", "score": 0}
{"id": "eqasc_validation_680", "prediction": "all x y z.((Ssperm(x) & Cervix(y) & FallopianTumulus(z) & SexualIntercourse(y)) -> (TravelsThrough(x,y) & To(x,z)))", "score": 0}
{"id": "eqasc_validation_681", "prediction": "all x.(MaleSsperm(x) -> MadeInTestes(x))", "score": 0}
{"id": "eqasc_validation_681", "prediction": "all x.(MaleSperm(x) -> MadeInTestes(x))", "score": 0}
{"id": "eqasc_validation_681", "prediction": "all x y.((Male(x) & Man(y) & MadeInTestes(x,y)) -> Male Sperm(x))", "score": -1}
{"id": "eqasc_validation_681", "prediction": "all x y z.((MalePaper(x) & Man(y) & Testes(z)) -> MadeIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_681", "prediction": "all x y z.((Malesperm(x) & Man(y) & Testes(z)) -> MadeIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_681", "prediction": "all x.(MaleSperm(x) -> MadeInMalePestes(x))", "score": 0}
{"id": "eqasc_validation_681", "prediction": "all x y.((Male(x) & Man(y)) -> MadeInTestes(x,y))", "score": 0}
{"id": "eqasc_validation_681", "prediction": "all x y z.((MalePorm(x) & Man(y) & Testes(z)) -> MadeIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_681", "prediction": "all x y.((MaleSsperm(x) & Man(y)) -> MakepedInTestes(x,y))", "score": 0}
{"id": "eqasc_validation_681", "prediction": "all x.(MaleSpore(x) -> MadeInTestes(x))", "score": 0}
{"id": "eqasc_validation_681", "prediction": "all x.(MalePerm(x) -> MadeInGenestes(x))", "score": 0}
{"id": "eqasc_validation_681", "prediction": "all x.(Male(x) -> MadeIn(x,mansTestes))", "score": 0}
{"id": "eqasc_validation_681", "prediction": "all x y z.((Ssperm(x) & Man(y) & Testes(z)) -> MadeIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_681", "prediction": "all x y.((Male(x) & Malesperm(y)) -> MadeInMansTestes(x,y))", "score": 0}
{"id": "eqasc_validation_681", "prediction": "all x y.((MaleSpore(x) & Man(y)) -> MadeInTestes(x,y))", "score": 0}
{"id": "eqasc_validation_681", "prediction": "all x.(MaleSperm(x) -> MadeInMansTestes(x))", "score": 0}
{"id": "eqasc_validation_682", "prediction": "all x y.((MadeInTestes(x) & Vagina(y) & SexualIntercourse(x)) -> DepositedInVagina(x,y))", "score": 0}
{"id": "eqasc_validation_682", "prediction": "all x y.((MakedInTestes(x) & ApprovedInVagina(y)) -> DepositedInVagina(x,y))", "score": 0}
{"id": "eqasc_validation_682", "prediction": "all x y z.((MakedInTestes(x) & Testes(y) & Vagina(z)) -> DepositedInVagina(x,y,z))", "score": 0}
{"id": "eqasc_validation_682", "prediction": "all x y z.((MadeInTestes(x) & Testes(y) & Vagina(z) & SexualIntercourse(z)) -> DepositedInVagina(x,y,z))", "score": 0}
{"id": "eqasc_validation_682", "prediction": "all x.((MadeInTestes(x) & DepostedInVagina(x) & SexualIntercourse(x)) -> DeposeDestroyNonAlteredInVagina(x))", "score": 0}
{"id": "eqasc_validation_682", "prediction": "all x y.((MadeInTestes(x) & Vagina(y)) -> DepositedInVagina(x,y))", "score": 0}
{"id": "eqasc_validation_682", "prediction": "all x y.((MadeInTestes(x) & Testes(y) & SexualIntercourse(x,y)) -> DepositedInVagina(x))", "score": 0}
{"id": "eqasc_validation_682", "prediction": "all x y z.((MadeInTestes(x,y) & Testes (z) & Vagina(w)) -> DeposesIn(x,y,w))", "score": 0}
{"id": "eqasc_validation_682", "prediction": "all x y z.((MadeInTestes(x) & Vasa(y) & SexualIntercourse(z) & DepositedInVagina(x,y)) -> DuringVagina(x,z))", "score": 0}
{"id": "eqasc_validation_682", "prediction": "all x y.((Pattern(x,y) & MadeInTestes(x)) -> TransferredInVagina(x))", "score": 0}
{"id": "eqasc_validation_682", "prediction": "all x y z w.((MadeInTestes(x) & Potent(y) & Vagina(z) & SexualIntercourse(w)) -> SittingInValgina(y,z))", "score": 0}
{"id": "eqasc_validation_682", "prediction": "all x y.((MakedInTestes(x) & Vagina(y)) -> DepositedInVagina(x,n))", "score": 0}
{"id": "eqasc_validation_682", "prediction": "all x.((MadeInTestes(x) & DeposableInVagina(x) & SexualIntercourse(x)) -> DepositedDuringVagina(x))", "score": 0}
{"id": "eqasc_validation_682", "prediction": "all x y z.((MakedInTestesInVagina(x) & Vagina(y) & SexualIntercourse(z)) -> DepositedInValga(x,y,z))", "score": 0}
{"id": "eqasc_validation_682", "prediction": "all x y z.((Experiment(x) & Testes(y) & Vagina(z)) -> (MadeInTestes(x,y) & DepositedInVagina(y,z) & SexualIntercourse(y)))", "score": 0}
{"id": "eqasc_validation_682", "prediction": "all x.((MakenInTestes(x) & RedepositedInVagina(x) & SexualIntercourse(x)) -> DepositedInVagina(x))", "score": 0}
{"id": "eqasc_validation_683", "prediction": "all x.(MaleGamete(x) -> Sperm(x))", "score": 0}
{"id": "eqasc_validation_683", "prediction": "all x.(MaleGamete(x) & Sperm(x))", "score": 0}
{"id": "eqasc_validation_683", "prediction": "all x.(MantelGamete(x) -> Sperm(x))", "score": 0}
{"id": "eqasc_validation_684", "prediction": "all x.((MaleGamete(x) & SexualIntercourse(y)) -> DepositedInVagina(x,y))", "score": 0}
{"id": "eqasc_validation_684", "prediction": "all x y.((MaleGamete(x) & Vagina(x)) -> DepositedIn(x,y))", "score": 0}
{"id": "eqasc_validation_684", "prediction": "all x.(MaleGamete(x) -> DepositedInVaginaDuringSexualIntercourse(x))", "score": 0}
{"id": "eqasc_validation_684", "prediction": "all x.((MaleGamete(x) & SexualIntercourse(x)) -> DepositedInValga(x))", "score": 0}
{"id": "eqasc_validation_684", "prediction": "all x y z.(((MaleGamete(x) & Vagina(y) & SexualIntercourse(z)) -> DetachedIn(x,y,z))", "score": -1}
{"id": "eqasc_validation_684", "prediction": "all x.(MaleGamete(x) -> DepositedInWagina(x))", "score": 0}
{"id": "eqasc_validation_684", "prediction": "all x.(MaleGamete(x) -> DepositedInTheValgus(x))", "score": 0}
{"id": "eqasc_validation_684", "prediction": "all x y.((MaleGamete(x) & Vagina(y)) -> PlacedInVaginaDuringSexualIntercourse(x,y))", "score": 0}
{"id": "eqasc_validation_684", "prediction": "all x.(MaleGamete(x) -> DepositedInVacaine(x))", "score": 0}
{"id": "eqasc_validation_684", "prediction": "all x.((MaleGamete(x) & SexualIntercourse(x)) -> DepositedInVagina(x))", "score": 0}
{"id": "eqasc_validation_684", "prediction": "all x y.((MaleGamete(x) & Vagina(y)) -> DepositedIn(x,y))", "score": 0}
{"id": "eqasc_validation_684", "prediction": "all x y.((MulleGamete(x) & Vagina(y)) -> SettledDuring(x,y))", "score": 0}
{"id": "eqasc_validation_684", "prediction": "all x y.((MaleGamete(x) & Vagina(y) & SexualIntercourse(z)) -> DepositedIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_684", "prediction": "all x.((MaleGametes(x) & SexualIntercourse(x)) -> DepositedInVagina(x))", "score": 0}
{"id": "eqasc_validation_684", "prediction": "all x.(MaleGamete(x) -> DepositedInVagina(x))", "score": 0}
{"id": "eqasc_validation_684", "prediction": "all x y.((MaleGamete(x) & Vagina(y)) -> DepositedInVagina(x,y))", "score": 0}
{"id": "eqasc_validation_685", "prediction": "all x.(MaleGamete(x) -> DepostedInVagina(x))", "score": 0}
{"id": "eqasc_validation_685", "prediction": "all x.((MaleGamete(x) & SexualIntercourse(x)) -> DepositedInVagina(x))", "score": 0}
{"id": "eqasc_validation_685", "prediction": "all x y.((MaleGamete(x) & Vagina(y) & SexualIntercourse(i) & SexualIntercourse(i)) -> DepositedIn(x,y))", "score": 0}
{"id": "eqasc_validation_685", "prediction": "all x y.((ManleGamete(x) & Vagina(y) & SexualIntercourse(z)) -> DepositedIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_685", "prediction": "all x.((MaleGamete(x) & SexualIntercourse(x)) -> DeposesInVagina(x))", "score": 0}
{"id": "eqasc_validation_685", "prediction": "all x.(MaleGamete(x) -> DepositedInVaginaDuringSexualIntercourse(x))", "score": 0}
{"id": "eqasc_validation_685", "prediction": "all x.(((MaleGamete(x) & SexualIntercourse(x)) -> DepositedInVagina(x))", "score": -1}
{"id": "eqasc_validation_685", "prediction": "all x y.((MaleGamete(x) & Vagina(y)) -> DepositedIn(x,y))", "score": 0}
{"id": "eqasc_validation_685", "prediction": "all x.((MausalGamete(x) & LocatedInVagina(x)) -> Deposes(x,Vagina))", "score": 0}
{"id": "eqasc_validation_685", "prediction": "all x y z.((MammalGamete(x) & Vagina(y) & SexualIntercourse(z)) -> DepositedIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_685", "prediction": "all x y.((MaleGamete(x) & Vagina(y) & SexualIntercourse(z)) -> DepositedInVaginaDuring(x,y))", "score": 0}
{"id": "eqasc_validation_685", "prediction": "all x y z.((MaleGamete(x) & Vagina(y) & SexualIntercourse(z)) -> DepositedIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_685", "prediction": "all x y z w.((MaleGamete(x) & Vagina(y) & SexualIntercourse(z) & SexualIntercourse(w)) -> depositedInVagina(x,y,z,w))", "score": 0}
{"id": "eqasc_validation_685", "prediction": "all x y.((MetalGamete(x) & VaginalIntercourse(y)) -> DepositedInValgus(x,y))", "score": 0}
{"id": "eqasc_validation_686", "prediction": "all x.(Pregnancy(x) -> SexualIntercourse(x))", "score": 0}
{"id": "eqasc_validation_686", "prediction": "all x.(Pregnancy(x) -> EvidenceOfSexualIntercourse(x))", "score": 0}
{"id": "eqasc_validation_686", "prediction": "all x y.((Pregnancy(x) & SexualIntercourse(y)) -> Evidence(x,y))", "score": 0}
{"id": "eqasc_validation_686", "prediction": "all x.(Pregnancy(x) -> Exploit(x,sexualIntercourse))", "score": 0}
{"id": "eqasc_validation_686", "prediction": "all x.(Pregnancy(x) -> EvidenceOfExperience(x))", "score": 0}
{"id": "eqasc_validation_686", "prediction": "all x.(Pregnancy(x) -> Discourse(x))", "score": 0}
{"id": "eqasc_validation_686", "prediction": "all x.(Pregnancy(x) -> SexualIntercourseEvidence(x))", "score": 0}
{"id": "eqasc_validation_687", "prediction": "all x y.((Skem(x) & Vagina(y)) -> (DepositsIn(x,y) & CausesPregnant(x)))", "score": 0}
{"id": "eqasc_validation_687", "prediction": "all x y.((Ssperm(x) & Vagina(y)) -> (Deposits(x,y) & CausesPregnancy(x,y)))", "score": 0}
{"id": "eqasc_validation_687", "prediction": "all x y.((Ssperm(x) & Vagina(y)) -> DeposesIn(x,y))", "score": 0}
{"id": "eqasc_validation_687", "prediction": "exist x.(ssperm(x) & DepositedInVagina(x) & CanCauseGardening(x))", "score": 0}
{"id": "eqasc_validation_687", "prediction": "all x y.((Spore(x) & Vagina(y)) -> DepositedIn(x,y))", "score": 0}
{"id": "eqasc_validation_687", "prediction": "all x y.((Ssperm(x) & Vagina(y)) -> (depositedIn(x,y) & SometimesCausesPregnancy(x)))", "score": 0}
{"id": "eqasc_validation_687", "prediction": "all x y z.((Ssperm(x) & Vagina(y) & Birth(z)) -> DepositedIn(x,y))", "score": 0}
{"id": "eqasc_validation_687", "prediction": "all x y.((Ssperm(x) & Vagina(y)) -> DepositedIn(x,y)) (LocationBeforeKnife(x,y) & (CausesPregnancy(z) | CausesPregnancy(z)))))", "score": -1}
{"id": "eqasc_validation_687", "prediction": "all x y.((Speim(x) & Vagina(y)) | ((Vagina(y) & DepositedIn(x,y)) & CausesGatherina(x,y))))", "score": -1}
{"id": "eqasc_validation_687", "prediction": "all x y.((Ssperm(x) & Vagina(y)) -> DepositedIn(x,y))", "score": 0}
{"id": "eqasc_validation_687", "prediction": "all x y z.((Ssperm(x) & Vagina(y) & DepostedIn(x,y)) -> (CausesReproductive(x) & CausesPregnancy(y)))", "score": 0}
{"id": "eqasc_validation_687", "prediction": "all x y.((Ssperm(x) & Vagina(y)) -> (DeposesIn(x,y) & SometimesCausesPregnancy(x)))", "score": 0}
{"id": "eqasc_validation_687", "prediction": "all x y.((Ssperm(x) & Vagina(y)) -> DepositedIn(x,y)) – NormallyCausesPregnancy(x,y))", "score": -1}
{"id": "eqasc_validation_687", "prediction": "all x y z.((Ssperm(x) & Vagina(y) & Vagina(z)) -> DepositedIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_687", "prediction": "all x y z.((Serm(x) & Vagina(y) & Vagina(z)) -> Deposes(x,y,z))", "score": 0}
{"id": "eqasc_validation_688", "prediction": "all x.(Woman(x) -> HasValgina(x))", "score": 0}
{"id": "eqasc_validation_688", "prediction": "all x.(WomenHasVagina(x) -> HasVagina(x))", "score": 0}
{"id": "eqasc_validation_688", "prediction": "all x.(Woman(x) -> HasVagina(x))", "score": 0}
{"id": "eqasc_validation_688", "prediction": "all x.(Woman(x) -> HasValencia(x))", "score": 0}
{"id": "eqasc_validation_688", "prediction": "all x.(Women(x) -> HasVagina(x))", "score": 0}
{"id": "eqasc_validation_688", "prediction": "all x.(Bubos(x) -> HasVagina(x))", "score": 0}
{"id": "eqasc_validation_688", "prediction": "all x.(Woman(x) -> HasValagina(x))", "score": 0}
{"id": "eqasc_validation_688", "prediction": "all x.(Woman(x) -> HasValga(x))", "score": 0}
{"id": "eqasc_validation_688", "prediction": "all x.(Woman(x) -> HaveVagina(x))", "score": 0}
{"id": "eqasc_validation_688", "prediction": "all x.(Women(x) -> HasValga(x))", "score": 0}
{"id": "eqasc_validation_689", "prediction": "all x y.((Sex(x) & Sperm(y) & Atlas(y,x)) -> DeposesIntoReproductiveOrgan(y,x))", "score": 0}
{"id": "eqasc_validation_689", "prediction": "all x y.((Sex(x) & Woman(y)) -> SpermDepose(x,y))", "score": 0}
{"id": "eqasc_validation_689", "prediction": "all x y.((Sex(x) & Sperm(y)) -> DeposesIntoOrganOf(y,x))", "score": 0}
{"id": "eqasc_validation_689", "prediction": "all x y z.((Sex(x) & Sperm(y) & Woman(z)) -> DepositedIntoOrgan(y,z))", "score": 0}
{"id": "eqasc_validation_689", "prediction": "all x.((Sex(x) & SpermDepositment(y)) -> ReproductiveOrgan(x,y))", "score": 0}
{"id": "eqasc_validation_689", "prediction": "all x y.((Sex(x) & Sperm(y)) -> DepositedInto(y,x))", "score": 0}
{"id": "eqasc_validation_689", "prediction": "all x.(Sex(x) -> DepositsSeedsIntoReproductiveOrgan(x))", "score": 0}
{"id": "eqasc_validation_689", "prediction": "all x y.((Sex(x) & Sperm(y)) -> DepositsIntoReproductiveOrgan(y,x))", "score": 0}
{"id": "eqasc_validation_689", "prediction": "all x y z.((Sex(x) & Sperm(y) & ReproductiveOrgan(z)) -> DepositedInto(y,z))", "score": 0}
{"id": "eqasc_validation_689", "prediction": "all x y.((Sex(x) & Sperm(y)) -> DepositedIntoFibersOrgan(y,x))", "score": 0}
{"id": "eqasc_validation_689", "prediction": "all x y z.((Sex(x) & Sperm(y) & WomenReproductiveOrgan(z)) -> DepositsIn(y,z))", "score": 0}
{"id": "eqasc_validation_689", "prediction": "all x y z.((Exercise(x) & Sperm(y) & Woman(z)) -> DepositedIntoOrgan(y,z))", "score": 0}
{"id": "eqasc_validation_689", "prediction": "all x.(Sex(x) -> DepositedIntoReproductiveOrgan(x))", "score": 0}
{"id": "eqasc_validation_689", "prediction": "all x y.((Sex(x) & Sperm(y)) -> DepositedInReproductiveOrgan(y,x))", "score": 0}
{"id": "eqasc_validation_689", "prediction": "all x y.((Sex(x) & Sperm(y)) -> DepositedIntoReproductiveOrgan(x,y))", "score": 0}
{"id": "eqasc_validation_690", "prediction": "all x y.((SexualUniship(x) & Purpose(y) & Closeness(y)) -> Procreation(x))", "score": 0}
{"id": "eqasc_validation_690", "prediction": "all x.(SexualUnion(x) -> (IsForPlace(x) & IsForCloseness(x) & IsForProcreation(x)))", "score": 0}
{"id": "eqasc_validation_690", "prediction": "all x.(SexualUnion(x) -> (ForPlenade(x) & ForCloseness(x) & ForProcreation(x)))", "score": 0}
{"id": "eqasc_validation_690", "prediction": "all x.(SexualUnion(x) -> (ForPurpose(x) & ForCloseness(x) & ForProcreation(x)))", "score": 0}
{"id": "eqasc_validation_690", "prediction": "all x.(SexualUnion(x) -> (ForPlace(x) & ForCloseness(x) & ForProcreation(x)))", "score": 0}
{"id": "eqasc_validation_690", "prediction": "all x.(SexualUnion(x) -> (ForPluise(x) & ForCloseness(x) & ForProcreation(x)))", "score": 0}
{"id": "eqasc_validation_690", "prediction": "all x.(SexualUnion(x) -> (ForPleasing(x) & ForCloseness(x) & ForProcreation(x)))", "score": 0}
{"id": "eqasc_validation_690", "prediction": "all x.(SexualUnited(x) -> (ForPlaise(x) & ForCloseness(x) & ForProcreation(x)))", "score": 0}
{"id": "eqasc_validation_690", "prediction": "all x.(SexualUnion(x) -> (ForPlisence(x) & ForCloseness(x) & ForProcreation(x)))", "score": 0}
{"id": "eqasc_validation_690", "prediction": "all x.(SexualUnion(x) -> (ForPride(x) & ForCloseness(x) & ForProcreation(x)))", "score": 0}
{"id": "eqasc_validation_690", "prediction": "all x.(SexualUnion(x) -> (Plair(x) & Closeness(x) & Procreation(x)))", "score": 0}
{"id": "eqasc_validation_690", "prediction": "all x.((SexualUnion(x) & ForPlenish(x) & ForCloseness(x) & ForProcreation(x)) -> ForProcreation(x))", "score": 0}
{"id": "eqasc_validation_690", "prediction": "all x.(SexualUnison(x) -> (ForPluice(x) & ForCloseness(x) & ForProcreation(x)))", "score": 0}
{"id": "eqasc_validation_690", "prediction": "all x.(SexualUnion(x) -> (Pride(x) & Closeness(x) & Procreation(x)))", "score": 0}
{"id": "eqasc_validation_691", "prediction": "all x y.((Ssperm(x) & Via(y) & Procreation(x)) -> DepositedInValga(x,y))", "score": 0}
{"id": "eqasc_validation_691", "prediction": "all x.((Ssperm(x) & DepostedInVagina(x)) -> Procreation(x))", "score": 0}
{"id": "eqasc_validation_691", "prediction": "all x y.((Ssperm(x) & Vena(y)) -> DepositedInTheVagina(x,y))", "score": 0}
{"id": "eqasc_validation_691", "prediction": "all x y.((Ssperm(x) & Vagina(y) & Procreation(z)) -> DepositedIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_691", "prediction": "all x.(Ssperm(x) -> DepositedInVagina(x))", "score": 0}
{"id": "eqasc_validation_691", "prediction": "all x y z.((Ssperm(x) & Vagina(y) & Procreation(z) & DepositedIn(x,y,z)) -> (Procreation(z) & Procreation(z)))", "score": 0}
{"id": "eqasc_validation_691", "prediction": "all x.(Sperm(x) -> DepositedInVaginaAtProcreation(x))", "score": 0}
{"id": "eqasc_validation_691", "prediction": "all x and y z.((Schist(x) & Vagina(y) & Procreation(z)) -> (DepositsValgament(x,y) & During(x,z)))", "score": -1}
{"id": "eqasc_validation_691", "prediction": "all x y z.((Sporem(x) & Vagina(y) & Procreation(z) & DepositedInVagina(x,y,z)) -> DeposesDuringProcreation(x,y,z))", "score": 0}
{"id": "eqasc_validation_691", "prediction": "all x y.((Sporem(x) & Vena(y)) -> DepositedIn(x,y))", "score": 0}
{"id": "eqasc_validation_691", "prediction": "all x y.((Sporem(x) & Vagina(y)) -> DepositsIn(x,y))", "score": 0}
{"id": "eqasc_validation_691", "prediction": "all x y.((Sperm(x) & Procreation(y)) -> DepositedInVagina(x,y))", "score": 0}
{"id": "eqasc_validation_691", "prediction": "all x y.((Sporem(x) & Vaganism(y) & Procreation(z)) -> DedepositedIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_691", "prediction": "all x.((Ssperm(x) & DepositedInVagina(x) & Procreation(x)) -> Depose(x))", "score": 0}
{"id": "eqasc_validation_691", "prediction": "all x y.((Ssperm(x) & VaginaLocation(y)) -> DepositedIn(x,y))", "score": 0}
{"id": "eqasc_validation_692", "prediction": "all x.(MaleGamete(x) -> Sperm(x))", "score": 1}
{"id": "eqasc_validation_692", "prediction": "all x.(HasSperm(x) -> MaleGamete(x))", "score": 0}
{"id": "eqasc_validation_692", "prediction": "all x.(MammalGamete(x) -> Sperm(x))", "score": 1}
{"id": "eqasc_validation_692", "prediction": "all x y.((MaleGamete(x) & Sperm(y)) -> Esteemed(x,y))", "score": 0}
{"id": "eqasc_validation_693", "prediction": "all x.(MaleGamete(x) -> DepositedInVagina(x))", "score": 0}
{"id": "eqasc_validation_693", "prediction": "all x y.((MaleGamete(x) & SexualIntercourse(y)) -> DepositedInVagina(x,y))", "score": 0}
{"id": "eqasc_validation_693", "prediction": "all x.((MaleGamete(x) & SexualIntercourse(x)) -> DeposesInVagina(x))", "score": 0}
{"id": "eqasc_validation_693", "prediction": "all x y.((MammalGamete(x) & Vagina(y)) -> DepositedIn(x,y))", "score": 0}
{"id": "eqasc_validation_693", "prediction": "all x.((MaleGamete(x) & Vagina(y) & SexualIntercourse(z)) -> DeposesIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_693", "prediction": "all x y.((MaleGamete(x) & Vagina(y)) -> DepositedDuring(x,y))", "score": 0}
{"id": "eqasc_validation_693", "prediction": "all x y z.((MaleGamete(x) & Vagina(y) & SexualIntercourse(z)) -> DepositedIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_693", "prediction": "all x y.((MaleGamete(x) & Vagina(y)) -> DepositedIn(x,y))", "score": 0}
{"id": "eqasc_validation_693", "prediction": "all x y.((MaleGamete(x) & Vagina(y) & SexualIntercourse(y)) -> DepositedIn(x,y))", "score": 0}
{"id": "eqasc_validation_693", "prediction": "all x.((MaleGamete(x) & SexualIntercourse(x)) -> DepositedInVagina(x))", "score": 0}
{"id": "eqasc_validation_694", "prediction": "all x y.((Ssperm(x) & Osculum(y)) -> (ReleasedIntoWater(x,y)))", "score": 0}
{"id": "eqasc_validation_694", "prediction": "all x y.((Sperm(x) & Osculum(y)) -> ReleasedIntoWater(x,y))", "score": 2}
{"id": "eqasc_validation_694", "prediction": "all x.(Ssperm(x) -> ReleasedIntoSurroundingWaterThroughOsculum(x))", "score": 0}
{"id": "eqasc_validation_694", "prediction": "all x y.((Ssperm(x) & Osculum(y)) -> ReleasesIntoWater(x,y))", "score": 0}
{"id": "eqasc_validation_694", "prediction": "all x y z.((Sperm(x) & Osculum(y) & Water(z)) -> ReleasedInto(x,y,z))", "score": 0}
{"id": "eqasc_validation_694", "prediction": "all x.(Ssperm(x) -> (ReleasedIntoWater(x) & ThroughOsculum(x)))", "score": 0}
{"id": "eqasc_validation_694", "prediction": "all x y z.((Ssperm(x) & Osculum(y) & Osculum(z)) -> (ReleasedInto(x,y,z)))", "score": 0}
{"id": "eqasc_validation_694", "prediction": "all x y.((Ssperm(x) & Water(y) & ReleasedInto(x,y)) -> Osculum(x))", "score": 0}
{"id": "eqasc_validation_694", "prediction": "all x y.((Ssperm(x) & Osculum(y)) -> ReleasedIntoWaterThroughOsculum(x,y))", "score": 0}
{"id": "eqasc_validation_694", "prediction": "all x y.((Ssperm(x) & Osculum(y)) -> ReleasedIntoSurroundingWater(x,y))", "score": 0}
{"id": "eqasc_validation_694", "prediction": "all x y.((Soil(x) & Osculum(y)) -> ReleasedInto(y,x))", "score": 0}
{"id": "eqasc_validation_694", "prediction": "all x.(Orbit(x) -> FreedFromSperm(x))", "score": 0}
{"id": "eqasc_validation_694", "prediction": "all x y.((Ssperm(x) & Osculum(y)) -> ReleasedIntoWaterThroughFossil(x,y))", "score": 0}
{"id": "eqasc_validation_694", "prediction": "all x.(Sperm(x) -> (ReleasesIntoWater(x) & FromOsculum(x)))", "score": 0}
{"id": "eqasc_validation_694", "prediction": "all x.(Sperm(x) -> ReleasedIntoSurroundingWater(x))", "score": 0}
{"id": "eqasc_validation_695", "prediction": "all x y.((MaleGamete(x) & Osculum(y)) -> ReleasedIntoSurroundingWater(x,y))", "score": 0}
{"id": "eqasc_validation_695", "prediction": "all x.(MaleGamete(x) -> ReleasedIntoWaterThroughOsculum(x))", "score": 0}
{"id": "eqasc_validation_695", "prediction": "all x y.((MammalGamete(x) & Water(y) & Osculum(x)) -> ReleasedInto(x,y))", "score": 0}
{"id": "eqasc_validation_695", "prediction": "all x.((MaleGamete(x) & Osculum(y)) -> ReleasedIntoSurroundingWater(x,y))", "score": 0}
{"id": "eqasc_validation_695", "prediction": "all x.(Gamete(x) -> ReleasedIntoSurroundingWaterByOsculum(x))", "score": 0}
{"id": "eqasc_validation_695", "prediction": "all x y.((MammalGamete(x) & Osculum(y)) -> ReleasedIntoWater(x,y))", "score": 0}
{"id": "eqasc_validation_695", "prediction": "all x y z.((MalignantGamete(x) & Osculum(y) & Water(z)) -> ReleasedInto(x,y,z))", "score": 0}
{"id": "eqasc_validation_695", "prediction": "all x y z.((Player(x) & Omulum(y) & Water(z)) -> Released(x,y,z))", "score": 0}
{"id": "eqasc_validation_695", "prediction": "all x.((MaineGamete(x) & ReleasedIntoSurroundingWater(x,osculum)) -> ReleasedThroughOsculum(x))", "score": 0}
{"id": "eqasc_validation_695", "prediction": "all x y.((MaleGamete(x) & Water(y)) -> AllowedByOsculum(x,y))", "score": 0}
{"id": "eqasc_validation_695", "prediction": "all x.((MaleGamete(x) & Osculum(x)) -> ReleasedIntoSurroundingWaterThroughOsculum(x))", "score": 0}
{"id": "eqasc_validation_695", "prediction": "all x y z.((MaleGamette(x) & Osculum(y)) -> (ReleasedIntoSurroundingWater(x,y) & Osculum(z)))", "score": 0}
{"id": "eqasc_validation_695", "prediction": "all x.(MaleGamete(x) -> ReleasedIntoSurroundingWaterThroughOsculum(x))", "score": 0}
{"id": "eqasc_validation_695", "prediction": "all x.(MaleGamete(x) -> (ReleasedIntoWater(x,osculum) & OvercomesWater(x)))", "score": 0}
{"id": "eqasc_validation_695", "prediction": "all x.((Gamete(x) & Muscle(y)) -> (ReleasedIntoWater(x,y) & Water(x,y)))", "score": 0}
{"id": "eqasc_validation_695", "prediction": "all x y.((DominantGamete(x) & Osculum(y)) -> ReleasedIntoWater(x,y))", "score": 0}
{"id": "eqasc_validation_696", "prediction": "all x y.((MaleGamete(x) & Osculum(y)) -> ReleasedIntoSurroundingWater(x,y))", "score": 0}
{"id": "eqasc_validation_696", "prediction": "all x.((MaleGametic(x) & Osculum(y)) -> ReleasedIntoSurroundingWater(x,y))", "score": 0}
{"id": "eqasc_validation_696", "prediction": "all x y.((MammalGamete(x) & Osculum(y)) -> ReleasedIntoWater(x,y))", "score": 1}
{"id": "eqasc_validation_696", "prediction": "all x.(MaleGamete(x) -> ReleasedIntoWaterThroughOsculum(x))", "score": 0}
{"id": "eqasc_validation_696", "prediction": "all x y.((MannGamete(x) & LocatedInOsculum(x,y)) -> ReleasedInWater(x,y))", "score": 0}
{"id": "eqasc_validation_696", "prediction": "all x.(MaleGamete(x) -> Released(x,Osculum))", "score": 0}
{"id": "eqasc_validation_696", "prediction": "all x y z.((MaleGamete(x) & Osculum(y) & Water(z)) -> (ReleasedInto(x,z) | ReleasedInto(x,y,z))))", "score": -1}
{"id": "eqasc_validation_696", "prediction": "all x.(MaleGamete(x) -> ReleasedInWaterThroughOsculum(x))", "score": 0}
{"id": "eqasc_validation_696", "prediction": "all x.(MaleGamete(x) -> ReleasedTwoDistances(x))", "score": 0}
{"id": "eqasc_validation_696", "prediction": "all x y z.((MaleGamete(x) & Osculum(y) & Water(z)) -> ReleasedThrough(x,y,z))", "score": 0}
{"id": "eqasc_validation_696", "prediction": "all x.(MännyGamete(x) -> ReleasedIntoSurroundingWater(x))", "score": 0}
{"id": "eqasc_validation_696", "prediction": "all x y.((MaleGamete(x) & Osculum(y)) -> ReleasedIntoWater(x,y))", "score": 1}
{"id": "eqasc_validation_696", "prediction": "all x y z.((MaleGamete(x) & Osculum(y) & Water(z)) -> OuterReleases(x,y,z))", "score": 0}
{"id": "eqasc_validation_697", "prediction": "all x.((Lightning(x) & ForestFire(x)) -> CanCause(x,fire))", "score": 0}
{"id": "eqasc_validation_697", "prediction": "all x.((Lightning(x) & ForestFire(x)) -> Causes(x,forestfire))", "score": 0}
{"id": "eqasc_validation_697", "prediction": "all x y.((Lightning(x) & ForestFire(y)) -> CanCause(x,y))", "score": 0}
{"id": "eqasc_validation_697", "prediction": "all x y.((Lightning(x) & ForestFire(y)) -> Causes(x,y))", "score": 0}
{"id": "eqasc_validation_697", "prediction": "all x y.((Lightning(x) & ForestFire(y)) -> CanCauseFurniture(x,y))", "score": 0}
{"id": "eqasc_validation_697", "prediction": "all x.(Lightning(x) -> CausesForestFire(x))", "score": 0}
{"id": "eqasc_validation_697", "prediction": "all x y.((Lightning(x) & ForestFire(y) & Causes(x,y)) -> Causes(x,y))", "score": 0}
{"id": "eqasc_validation_697", "prediction": "all x y z.((Lightning(x) & ForestFire(y) & Fire(z)) -> Causes(x,y,z))", "score": 0}
{"id": "eqasc_validation_697", "prediction": "all x y z.((Lightning(x) & ForestFire(y) & ForestFire(z)) -> CanCause(x,y,z))", "score": 0}
{"id": "eqasc_validation_697", "prediction": "all x y z.((Lightning(x) & ForestFire(y) & ForestFire(z)) -> CausesForestFire(x,y,z))", "score": 0}
{"id": "eqasc_validation_697", "prediction": "all x y.((Lightning(x) & ForestFire(y)) -> CausesForestFire(x,y))", "score": 0}
{"id": "eqasc_validation_697", "prediction": "all x y.((Lightning(x) & ForestFire(y)) -> CauseForestFire(x,y))", "score": 0}
{"id": "eqasc_validation_698", "prediction": "all x y z.((Bush(x) & ForestFire(y) & Vegetation(z)) -> CausesEnvelopingDamage(x,z))", "score": 0}
{"id": "eqasc_validation_698", "prediction": "all x y z.((Bust(x) & ForestFire(y) & Vegetation(z) & Wildlife(z)) -> CausesDamage(x,y,z))", "score": 0}
{"id": "eqasc_validation_698", "prediction": "all x y.((Bush(x) & ForestFire(y)) -> (CausesEmbolicalDamage(x,Vegetation) & CausesEmbolicalDamage(y,Wildlife)))", "score": 0}
{"id": "eqasc_validation_698", "prediction": "all x.((Bush(x) | ForestFire(x)) -> (BreathesGreenecoherence(x) & CreatesWildlife(x)))", "score": 0}
{"id": "eqasc_validation_698", "prediction": "all x y.((Bust(x) & ForestFire(y)) -> (CausesExtremeDamageToVegetation(x) & CausesExtremeDamageToWildlife(x)))", "score": 0}
{"id": "eqasc_validation_698", "prediction": "all x.((Bust(x) | ForestFire(x)) -> CausesEnormessevelableDamageToVegetationAndWildlife(x))", "score": 0}
{"id": "eqasc_validation_698", "prediction": "all x y.((Bust(x) & ForestFire(y)) -> CausesErrorousDamageToVegetationAndWildlife(x,y))", "score": 0}
{"id": "eqasc_validation_698", "prediction": "all x.((Bush(x) | ForestFire(x)) -> (CausesMassiveDamage(x) & VegetationAndWildlife(x)))", "score": 0}
{"id": "eqasc_validation_698", "prediction": "all x y.((Bust(x) & ForestFire(y)) -> CausesEnormousDamage(x,y))", "score": 0}
{"id": "eqasc_validation_698", "prediction": "all x y.((Bust(x) & ForestFire(y)) -> (CausesEverthingDamageToVegetation(x) & CausesEverthingDamageToWildlife(x)))", "score": 0}
{"id": "eqasc_validation_698", "prediction": "all x y z.((Bush(x) | ForestFire(x) & Vegetation(y) & Wildlife(z)) -> CausesEternalDamage(x,y,z))", "score": 0}
{"id": "eqasc_validation_698", "prediction": "all x y.((Bush(x) | ForestFire(y)) -> (CausesEnormousDamage(x,y) & The PlantsAndWildlife(z) & Inhabits(x,z)))", "score": -1}
{"id": "eqasc_validation_698", "prediction": "all x y.((Buster(x) & ForestFire(y)) -> CausesEmbarrassmentalDamageToVegetationAndWildlife(x,y))", "score": 0}
{"id": "eqasc_validation_698", "prediction": "all x y.((Bush(x) & ForestFire(y)) -> CausesEnormousDamageToVegetationAndWildlife(x,y))", "score": 0}
{"id": "eqasc_validation_698", "prediction": "all x.((Bust(x) | ForestFires(x)) -> (CausesExpensiveDamage(x) & VegetationAndWildlife(x)))", "score": 0}
{"id": "eqasc_validation_698", "prediction": "all x y.((Bush(x) & ForestFire(y) & Vegetation(z)) -> CausesExtremeDamage(x,y,z))", "score": 0}
{"id": "eqasc_validation_699", "prediction": "all x y.((Lightning(x) & Vegetation(y) & Wildlife(y)) -> CausesDamage(x,y))", "score": 0}
{"id": "eqasc_validation_699", "prediction": "all x.(Lightning(x) -> (CausesDamage(x) & ToVegetation(x) & ToWildlife(x)))", "score": 0}
{"id": "eqasc_validation_699", "prediction": "all x.(Lightning(x) -> CausesDamage(x,Vegetation) & CausesDamage(x,Wildlife))", "score": 0}
{"id": "eqasc_validation_699", "prediction": "all x y.((Lightning(x) & Plant(y)) -> CausesDamage(x,y))", "score": 0}
{"id": "eqasc_validation_699", "prediction": "all x.(Lightning(x) -> (CausesDamage(x) & ToVegetationAndWildlife(x)))", "score": 0}
{"id": "eqasc_validation_699", "prediction": "all x y z.((Lightning(x) & Vegetation(y) & Wildlife(z)) -> CausesDamage(x,y,z))", "score": 0}
{"id": "eqasc_validation_699", "prediction": "(all x.(Lightning(x) -> CausesDamage(x)))", "score": 0}
{"id": "eqasc_validation_699", "prediction": "all x.(Lightning(x) -> (CausesDamage(x) & Damage(x) & Damage(x) & Damage(x) & Damage(x) & Damage(x) & Damage(x) & Damaged(x) & Damage(x) & Damage(x)))", "score": 0}
{"id": "eqasc_validation_699", "prediction": "all x.(Lightning(x) -> (CausesDamageToVegetation(x) & CausesDamageToWildlife(x)))", "score": 0}
{"id": "eqasc_validation_699", "prediction": "all x.(Lightning(x) -> CausesDetonationToVegetationAndWildlife(x))", "score": 0}
{"id": "eqasc_validation_699", "prediction": "all x y.((Lightning(x) & Vegetation(y)) -> CausesDamage(x,y))", "score": 0}
{"id": "eqasc_validation_699", "prediction": "all x.(Literon(x) -> (CausesDamage(x,Vegetation) | CausesDamage(x,Wildlife)))", "score": 0}
{"id": "eqasc_validation_699", "prediction": "all x.(Lightning(x) -> (DamageToVegetation(x) & DamageToWildlife(x)))", "score": 0}
{"id": "eqasc_validation_700", "prediction": "all x y.((ForestFire(x) & Environment(y)) -> BadFor(x,y))", "score": 0}
{"id": "eqasc_validation_700", "prediction": "all x.(ForestFire(x) -> BadForEnvironment(x))", "score": 0}
{"id": "eqasc_validation_701", "prediction": "all x.(Lightning(x) -> BadForEnvironment(x))", "score": 0}
{"id": "eqasc_validation_701", "prediction": "all x y.((Lightning(x) & Environment(y)) -> BadFor(x,y))", "score": 0}
{"id": "eqasc_validation_701", "prediction": "canBeBadForEnvironment(lightning)", "score": 0}
{"id": "eqasc_validation_701", "prediction": "all x.(Lightning(x) -> CanBeBadForEnvironment(x))", "score": 0}
{"id": "eqasc_validation_702", "prediction": "all x.(Thunderstorm(x) -> ContainsLightning(x))", "score": 0}
{"id": "eqasc_validation_702", "prediction": "all x y z.((Thunderstorm(x) & Lightning(y) & Lightning(z)) -> Contains(x,y,z))", "score": 0}
{"id": "eqasc_validation_702", "prediction": "all x y.((Thunderstorm(x) & Lightning(y)) -> Contains(x,y))", "score": 0}
{"id": "eqasc_validation_702", "prediction": "all x.(Thunderstorm(x) -> HasLightning(x))", "score": 0}
{"id": "eqasc_validation_702", "prediction": "all x.(Thunderstorm(x) -> IncorporatesLightning(x))", "score": 0}
{"id": "eqasc_validation_703", "prediction": "all x y.((Thunderstorm(x) & ForestFire(y)) -> Causes(x,y))", "score": 0}
{"id": "eqasc_validation_703", "prediction": "all x.(Thunderstorm(x) -> CausesForestFires(x))", "score": 0}
{"id": "eqasc_validation_703", "prediction": "all x y z.((Thunderstorm(x) & ForestFire(y) & ForestFarm(z)) -> CanCause(x,y,z))", "score": 0}
{"id": "eqasc_validation_703", "prediction": "all x y z.((Thunderstorm(x) & ForestFire(y) & ForestFire(z)) -> CanCause(x,y,z))", "score": 0}
{"id": "eqasc_validation_703", "prediction": "all x y.((Thunderstorm(x) & ForestFire(y)) -> CanCause(x,y))", "score": 0}
{"id": "eqasc_validation_703", "prediction": "all x.(Thunderstorm(x) -> CanCauseForestFire(x))", "score": 0}
{"id": "eqasc_validation_703", "prediction": "all x.(Thunderstorm(x) -> CausesForestFootfires(x))", "score": 0}
{"id": "eqasc_validation_703", "prediction": "all x.(Thunderstorm(x) -> CanCauseForestFires(x))", "score": 0}
{"id": "eqasc_validation_704", "prediction": "all x y.((Fire(x) & Forest(y) & CleansOut(x,y)) -> (NewGrowth(y) & Revitalization(y)))", "score": 0}
{"id": "eqasc_validation_704", "prediction": "all x y.((Fire(x) & Forest(y) & Fire(x) & CleaningOut(x,y)) -> (NewGrowth(x) & Revitalization(x)))", "score": 0}
{"id": "eqasc_validation_704", "prediction": "all x y z.((Fire(x) & Forest(y) & Forest(z)) -> (CleansOut(x,y,z) & LeadsToNewGrowth(x,y) & Revitalizes(x,y)))", "score": 0}
{"id": "eqasc_validation_704", "prediction": "all x y.((Fire(x) & Forest(y)) -> (ClearsOut(x,y) & LeadsToNewGrowth(x) & Revitalizes(x)))", "score": 0}
{"id": "eqasc_validation_704", "prediction": "all x y.((Fire(x) & Forest(y)) -> (CleansOut(x,y) & LeadsToNewGrowth(x) & Revitalizes(x)))", "score": 0}
{"id": "eqasc_validation_704", "prediction": "all x y.((Fire(x) & Forest(y)) -> (CleansOut(x,y) & LeadsTo(x,NewGrowth) & Revitalizes(x,y)))", "score": 0}
{"id": "eqasc_validation_704", "prediction": "all x y.((Fire(x) & Forest(y) & CleansOut(x,y)) -> (NewGrowth(x) & Revitalization(x)))", "score": 0}
{"id": "eqasc_validation_704", "prediction": "all x y.((Fire(x) & Forest(y)) -> (Cleaneout(x,y) & NewGrowth(x) & Revitalization(x)))", "score": 0}
{"id": "eqasc_validation_704", "prediction": "all x y.((Fire(x) & Forest(y)) -> (Cleans(x,y) & LeadsToNewGrowth(x) & Revitalizes(x)))", "score": 0}
{"id": "eqasc_validation_704", "prediction": "all x y.((Fire(x) & Forest(y) & CleansOut(x,y)) -> (LeadsToNewGrowth(x,y) & Revitalizes(x,y)))", "score": 0}
{"id": "eqasc_validation_704", "prediction": "all x y.((Fire(x) & Forest(y) & CleansOut(x,y)) -> LeadsToNewGrowthAndRevitalization(x))", "score": 0}
{"id": "eqasc_validation_704", "prediction": "all x y.((Fire(x) & Forest(y) & CleansOut(x,y)) -> NewGrowthAndRevitalization(x))", "score": 0}
{"id": "eqasc_validation_704", "prediction": "all x.((Fire(x) & CleansOutForest(x)) -> (NewGrowth(x) & Revitalization(x)))", "score": 0}
{"id": "eqasc_validation_704", "prediction": "((Fire(Fire) & CleansOutForest(Fire)) -> NewGrowthAndRevitalization(Fire))", "score": 0}
{"id": "eqasc_validation_704", "prediction": "all x y.((Fire(x) & Forest(y) & CleansOut(x,y)) -> (NewGrowth(x,y) & Revitalization(x,y)))", "score": 0}
{"id": "eqasc_validation_704", "prediction": "all x y.((Fire(x) & Forest(y) & CleansOut(x,y)) -> (LensuresNewGrowth(x) & Revitalizes(x)))", "score": 0}
{"id": "eqasc_validation_705", "prediction": "all x y.((Lightning(x) & Forest(y)) -> (CausesNewGrowth(x,y) & Renews(x,y)))", "score": 0}
{"id": "eqasc_validation_705", "prediction": "all x.((Lightning(x) & Forest(y)) -> (CausesNewGrowth(x,y) & Revitalizes(x,y)))", "score": 0}
{"id": "eqasc_validation_705", "prediction": "all x y z.((Lightning(x) & Forest(y) & Forest(z)) -> (CausesNewGrowth(x,y) & Revitalizes(x,z)))", "score": 0}
{"id": "eqasc_validation_705", "prediction": "all x.(Lightning(x) -> (CausesNewGrowth(x) & RevitalizesForest(x)))", "score": 0}
{"id": "eqasc_validation_705", "prediction": "all x y.((Lightning(x) & Forest(y)) -> (CausesNewGrowth(x,y) & Revitalizes(x,y)))", "score": 0}
{"id": "eqasc_validation_705", "prediction": "all x y.((Lightning(x) & Forest(y)) -> (CausesNewGrowth(x,y) & Revitalization(x,y)))", "score": 0}
{"id": "eqasc_validation_705", "prediction": "all x y.((Lightning(x) & Forest(y)) -> (CausesNewGrowth(x,y) & EnsuresRevitalization(x,y)))", "score": 0}
{"id": "eqasc_validation_705", "prediction": "all x y.((Lightning(x) & Forest(y)) -> (CausesNewGrowth(x,y) & Revalves(x,y)))", "score": 0}
{"id": "eqasc_validation_705", "prediction": "all x y.((Lightning(x) & Forest(y)) -> (CausesNewGrowth(x) & Revitalizes(x,y)))", "score": 0}
{"id": "eqasc_validation_705", "prediction": "all x y z.((Lightning(x) & Forest(y) & Forest(z)) -> (CausesNewGrowth(x,y) & Revitalizes(x,y,z)))", "score": 0}
{"id": "eqasc_validation_705", "prediction": "all x.(Lightning(x) -> (CausesNewGrowth(x) & VibrantInForest(x)))", "score": 0}
{"id": "eqasc_validation_706", "prediction": "all x.(Lightning(x) -> CommonDuringStorms(x))", "score": 0}
{"id": "eqasc_validation_706", "prediction": "all x.(Lightning(x) -> VeryCommonDuringStorms(x))", "score": 0}
{"id": "eqasc_validation_706", "prediction": "exists x.(Lightning(x) & DuringStorm(x))", "score": 0}
{"id": "eqasc_validation_706", "prediction": "all x.(Lightning(x) -> CircumstanceDuringStorms(x))", "score": 0}
{"id": "eqasc_validation_706", "prediction": "all x.((Lightning(x) & Storm(y)) -> VeryCommon(x,y))", "score": 0}
{"id": "eqasc_validation_706", "prediction": "all x.((Lightning(x) & Storm(x)) -> VeryCommon(x))", "score": 0}
{"id": "eqasc_validation_706", "prediction": "all x.(Lightning(x) -> VeryCommonDuringStorm(x))", "score": 0}
{"id": "eqasc_validation_706", "prediction": "all x.((Lightning(x) & Storm(x)) -> Common(x))", "score": 0}
{"id": "eqasc_validation_707", "prediction": "all x y z.((ForestFire(x) & ThunderStorm(y) & ThunderCat(z)) -> Causes(x,y,z))", "score": 0}
{"id": "eqasc_validation_707", "prediction": "all x.(ForestFire(x) & CausedByThunderStorms(x))", "score": 0}
{"id": "eqasc_validation_707", "prediction": "all x y.((ForestFire(x) & ThunderStorm(y)) -> CausedBy(x,y))", "score": 0}
{"id": "eqasc_validation_707", "prediction": "all x y.((ForestFeuer(x) & ThunderStorm(y)) -> CreatedBy(x,y))", "score": 0}
{"id": "eqasc_validation_707", "prediction": "all x.((ForestFire(x) & ThunderStorm(x)) -> CreatedBy(x,Thunderstorms))", "score": 0}
{"id": "eqasc_validation_707", "prediction": "all x y z.((ForestFire(x) & ThunderStorm(y) & Thunder(z)) -> CausedBy(x,y,z))", "score": 0}
{"id": "eqasc_validation_707", "prediction": "all x.(ForestFire(x) -> CausedByThunderStorms(x))", "score": 0}
{"id": "eqasc_validation_707", "prediction": "all x y.((ForestFire(x) & ThunderStorm(y)) -> CanBeCausedBy(x,y))", "score": 0}
{"id": "eqasc_validation_707", "prediction": "all x y.((ForestFurniture(x) & ThunderStorm(y)) -> CausedBy(x,y))", "score": 0}
{"id": "eqasc_validation_707", "prediction": "all x y z.((ForestFire(x) & ThunderStorm(y)) -> (CausedBy(x,y) & CausedBy(x,z)))", "score": 0}
{"id": "eqasc_validation_707", "prediction": "all x y z.((ForestFire(x) & Thunderstorm(w) & ThunderStorm(w)) -> CausedBy(x,w))", "score": 0}
{"id": "eqasc_validation_707", "prediction": "all x y z.((ForestFire(x) & ThunderStorm(y) & ThunderStorm(z)) -> CausedBy(x,y,z))", "score": 0}
{"id": "eqasc_validation_707", "prediction": "all x y.((ForestFire(x) & Thunderstorm(y)) -> CanBeCausedBy(x,y))", "score": 0}
{"id": "eqasc_validation_707", "prediction": "all x y.((ForestFire(x) & ThunderStorm(y)) -> CanCause(x,y))", "score": 0}
{"id": "eqasc_validation_708", "prediction": "All x.(Lightning(x) -> MajorCauseOfFires(x))", "score": -1}
{"id": "eqasc_validation_708", "prediction": "all x.(Lightning(x) -> MajorCauseOfFires(x))", "score": 0}
{"id": "eqasc_validation_708", "prediction": "all x.((Literary(x) & MajorCauseOfFires(x)) -> Overall(x))", "score": 0}
{"id": "eqasc_validation_708", "prediction": "all x.((Lightning(x) & MajorFault(x)) -> MajorFault(x))", "score": 0}
{"id": "eqasc_validation_708", "prediction": "all x.((Lightning(x) & MajorCauseOfFires(x)) -> MajorCauseOfFires(x))", "score": 0}
{"id": "eqasc_validation_708", "prediction": "all x y.((Lightning(x) & Fire(y)) -> MajorCause(x,y))", "score": 0}
{"id": "eqasc_validation_708", "prediction": "all x.((Lightning(x) & MajorFireCause(x)) -> MajorCause(x))", "score": 0}
{"id": "eqasc_validation_708", "prediction": "all x y.((Lightning(x) & Fire(y)) -> MajorCauseOf(x,y))", "score": 0}
{"id": "eqasc_validation_708", "prediction": "all x.((Lightning(x) & Fire(y)) -> MajorCause(x,y))", "score": 0}
{"id": "eqasc_validation_709", "prediction": "all x y z.((Lightning(x) & Fire(y) & Fire(z)) -> Ignites(x,y))", "score": 0}
{"id": "eqasc_validation_709", "prediction": "all x y.((Lightning(x) & Fire(y)) -> Ignites(x,y))", "score": 0}
{"id": "eqasc_validation_709", "prediction": "all x y.((Lightner(x) & Fire(y)) -> Ignites(x,y))", "score": 0}
{"id": "eqasc_validation_709", "prediction": "all x y.((Lightning(x) & Fire(y)) -> Inflammates(x,y))", "score": 0}
{"id": "eqasc_validation_709", "prediction": "all x y z.((Lightning(x) & Fire(y) & Fire(z) & Inflammates(x,y,z)) -> Inflammates(x,y,z))", "score": 0}
{"id": "eqasc_validation_709", "prediction": "all x y z.((Lightning(x) & Fire(y) & Fire(z)) -> Ignites(x,y,z))", "score": 0}
{"id": "eqasc_validation_709", "prediction": "all x y.((Lightning(x) & Fire(y) & Ignites(x,y)) -> Ignites(x,y))", "score": 0}
{"id": "eqasc_validation_709", "prediction": "all x.(Lightning(x) -> IgnitesFires(x))", "score": 0}
{"id": "eqasc_validation_710", "prediction": "all x.(ForestFire(x) -> Wildfire(x))", "score": 0}
{"id": "eqasc_validation_710", "prediction": "all x.((ForestFire(x) & Wildfire(y)) -> Examples(x,y))", "score": 0}
{"id": "eqasc_validation_710", "prediction": "all x.((ForestFire(x) & Wildfire(x)) -> Examples(x))", "score": 0}
{"id": "eqasc_validation_710", "prediction": "all x y.((ForestFire(x) & Wildfire(y)) -> Examples(x,y))", "score": 0}
{"id": "eqasc_validation_710", "prediction": "all x.(FountainFire(x) -> Wildfire(x))", "score": 0}
{"id": "eqasc_validation_711", "prediction": "all x y.(Wildfire(x) -> (CausedByLightning(x,Y) & Causes(y,Lightning) & -Attributes(x,y)))", "score": 0}
{"id": "eqasc_validation_711", "prediction": "all x.(Swildfire(x) -> (CausedByLightning(x) & BornAs(x)))", "score": 0}
{"id": "eqasc_validation_711", "prediction": "all x y z w.((Wildfire(x) & Lightning(y) & Load(z)) -> CausedBy(x,y,z))", "score": 0}
{"id": "eqasc_validation_711", "prediction": "all x y.((Wildfire(x) & Lightning(y)) -> CausedBy(x,y))", "score": 0}
{"id": "eqasc_validation_711", "prediction": "all x.((Welcoming(x) & Lightning(y)) -> Wildfire(x))", "score": 0}
{"id": "eqasc_validation_711", "prediction": "all x.(Wildfire(x) -> CausedByLightning(x))", "score": 0}
{"id": "eqasc_validation_711", "prediction": "all x.(Welcome(x) -> (FacesWildfire(x) & CausedByLightning(x)))", "score": 0}
{"id": "eqasc_validation_711", "prediction": "all x.(WellBed(x) -> (Wildfire(x) & CausedByLightning(x)))", "score": 0}
{"id": "eqasc_validation_711", "prediction": "all x y.((Wildfire(x) & Lightning(y)) -> CreatedBy(x,y))", "score": 0}
{"id": "eqasc_validation_711", "prediction": "all x.((Wildfire(x) & Lightning(x)) -> CausedBy(x,y))", "score": 0}
{"id": "eqasc_validation_711", "prediction": "all x y z.((Wildfire(x) & Lightning(y) & Lightning(z)) -> CausedBy(x,y,z))", "score": 0}
{"id": "eqasc_validation_712", "prediction": "all x.(Lightning(x) -> CanCauseWildfire(x))", "score": 0}
{"id": "eqasc_validation_712", "prediction": "all x y.((Lightning(x) & Wildfire(y)) -> CanCause(x,y))", "score": 0}
{"id": "eqasc_validation_712", "prediction": "all x.(Lightning(x) -> exists y.(Wildfire(y) & CausedBy(x,y))))", "score": -1}
{"id": "eqasc_validation_712", "prediction": "all x.(Lightning(x) -> CanCauseWarmfire(x))", "score": 0}
{"id": "eqasc_validation_712", "prediction": "all x.(Lightning(x) -> CausesWildfire(x))", "score": 0}
{"id": "eqasc_validation_712", "prediction": "all x.(Literon(x) -> CanCauseWildfire(x))", "score": 0}
{"id": "eqasc_validation_712", "prediction": "all x.(Lightning(x) -> Wildfire(x))", "score": 0}
{"id": "eqasc_validation_713", "prediction": "UntilsForestFire(town,0,0)", "score": 0}
{"id": "eqasc_validation_713", "prediction": "Until the town was destroyed by the forest fire.", "score": -1}
{"id": "eqasc_validation_713", "prediction": "all x.(Town(x) -> (DestroyedByForestFire(x) | DestroyedByForestFire(x)))", "score": 0}
{"id": "eqasc_validation_713", "prediction": "Until the town was destroyed by forestfire.", "score": -1}
{"id": "eqasc_validation_713", "prediction": "Until destroyed byForestFire(town)", "score": -1}
{"id": "eqasc_validation_713", "prediction": "Until ForestFire(Town)", "score": -1}
{"id": "eqasc_validation_713", "prediction": "Until the town was destroyed by theforestfire.", "score": -1}
{"id": "eqasc_validation_713", "prediction": "all x y.((Town(x) & ForestFire(y)) -> DestroyedBy(x,y))", "score": 0}
{"id": "eqasc_validation_713", "prediction": "all x.(Town(x) -> DisclosedByForestFire(x))", "score": 0}
{"id": "eqasc_validation_713", "prediction": "Until the town was destroyed by forest fire.", "score": -1}
{"id": "eqasc_validation_713", "prediction": "Until ForestFire(s) ару.", "score": -1}
{"id": "eqasc_validation_713", "prediction": "-DestroyedByForestFire(Town)", "score": 0}
{"id": "eqasc_validation_714", "prediction": "all x.(Lightning(x) -> CanDestroyTowns(x))", "score": 0}
{"id": "eqasc_validation_714", "prediction": "all x.(Lightning(x) -> CanDefeatTourisms(x))", "score": 0}
{"id": "eqasc_validation_714", "prediction": "all x y z.((Lightning(x) & Town(y) & Town(z)) -> CanDestroy(x,y,z))", "score": 0}
{"id": "eqasc_validation_714", "prediction": "all x.(Lightning(x) -> CanDestroyTories(x))", "score": 0}
{"id": "eqasc_validation_714", "prediction": "all x.(Lightning(x) -> CanDestroyCounties(x))", "score": 0}
{"id": "eqasc_validation_714", "prediction": "all x.(Lightning(x) -> DefeatsTowns(x))", "score": 0}
{"id": "eqasc_validation_714", "prediction": "all x.(Lightning(x) -> CanDestroyCountries(x))", "score": 0}
{"id": "eqasc_validation_714", "prediction": "all x y z,w.((Lightning(x) & Town(y) & Town(z)) -> CanDisrupt(x,y,z))", "score": -1}
{"id": "eqasc_validation_714", "prediction": "all x.(Lightning(x) -> DisruptsCountries(x))", "score": 0}
{"id": "eqasc_validation_714", "prediction": "all x.(Lightning(x) -> CanDestroyRates(x))", "score": 0}
{"id": "eqasc_validation_714", "prediction": "all x y.((Lightning(x) & Town(y)) -> CanDestroy(x,y))", "score": 0}
{"id": "eqasc_validation_715", "prediction": "all x y.((SummerStorm(x) & Lightning(y)) -> (KicksUpHullOfDust(x) & IgnitesBrushFires(y)))", "score": 0}
{"id": "eqasc_validation_715", "prediction": "all x y.((SummerStorm(x) & Lightning(y)) -> (KicksUpHorizonsOfDust(x) & IgnitesBrushFires(y)))", "score": 0}
{"id": "eqasc_validation_715", "prediction": "all x y.((SummerStorm(x) & Lightning(y)) -> (KicksUpCloudsOfDust(x) & IgnitesBrushFires(y)))", "score": 0}
{"id": "eqasc_validation_715", "prediction": "all x y z.((SummerStorm(x) & Doom(y) & Lightning(z)) -> (KickUpDumps(x,y) | IgniteBrushFires(y)))", "score": 0}
{"id": "eqasc_validation_715", "prediction": "all x y z.((SummerStorm(x) & BigDust(y) & Lightning(z)) -> (KicksUp(x,y) & IgnitesBrushFires(z)))", "score": 0}
{"id": "eqasc_validation_715", "prediction": "all x y.((SummerStorm(x) & Lightning(y)) -> (KicksUpHillsOfDust(x) & InvestsBrushFire(y)))", "score": 0}
{"id": "eqasc_validation_715", "prediction": "(all x.(SummerStorm(x) -> KicksUpHugeCloudsOfDust(x)) & all y.(Lightning(y) -> IgnitesBrushFires(y)))", "score": 0}
{"id": "eqasc_validation_715", "prediction": "all x y.((SummerStorm(x) & Lightning(y)) -> (CoatsUp(x,y) & IgnitesBrushFires(y)))", "score": 0}
{"id": "eqasc_validation_715", "prediction": "all x y.((SummerStorm(x) & Lightning(y) & KickupDumClouds(x,y)) -> IlluminatesBrushFires(y))", "score": 0}
{"id": "eqasc_validation_715", "prediction": "all x y z.((SummerStorm(x) & HumidDust(y) & Lightning(z)) -> (KicksUp(x,y) & IgnitesBrushFires(z)))", "score": 0}
{"id": "eqasc_validation_715", "prediction": "all x y.((SummerStorm(x) & Lightning(y) & KickUpsHallsOfDust(x,y)) -> IgnitesBrushFires(x,y))", "score": 0}
{"id": "eqasc_validation_715", "prediction": "all x.(SummerStorm(x) -> (KickUpHallionsOfDust(x) & LightningIgnitesBrushFires(x)))", "score": 0}
{"id": "eqasc_validation_715", "prediction": "(all x y.((SummerStorm(x) & Cloud(y)) -> KickUp(x,y,MountainDust)) & ((Lightning(x) & BrushFire(y)) -> Ignite(x,y)))", "score": 0}
{"id": "eqasc_validation_715", "prediction": "all x y z.((SummerTurbine(x) & Lightning(y) & BrushFire(z)) -> (KicksUp(x,bakedWheels) | Ignites(y,z)))", "score": 0}
{"id": "eqasc_validation_715", "prediction": "(all x y z.((SummerStorm(x) & HumidDust(y)) -> KicksUp(x,y)) & ((Lightning(z) & BrushFire(z)) | Ignites(z,x,z))))", "score": -1}
{"id": "eqasc_validation_715", "prediction": "all x y.((SummerStorm(x) & Lightning(y)) -> (KicksUp(x,y) & IgnitesBrushFires(y)))", "score": 0}
{"id": "eqasc_validation_716", "prediction": "all x y.((Storm(x) & Wood(y)) -> CausesFiresIn(x,y))", "score": 0}
{"id": "eqasc_validation_716", "prediction": "all x y.((Storm(x) & Woods(y)) -> CausesFire(x,y))", "score": 0}
{"id": "eqasc_validation_716", "prediction": "all x y z.((Storm(x) & Forest(y) & Woods(z) & CausesFire(x,y,z)) -> ForgedIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_716", "prediction": "all x y z.((Storm(x) & Fire(y) & Woods(z)) -> CausesIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_716", "prediction": "all x y.((Storm(x) & Woods(y)) -> CausesFiresIn(x,y))", "score": 0}
{"id": "eqasc_validation_716", "prediction": "all x.(Storm(x) -> CausesFire(x))", "score": 0}
{"id": "eqasc_validation_716", "prediction": "all x y z.((Storm(x) & Wood(y) & Wood(z) & CausesFireIn(x,y) & Woods(x,z)) -> CausesFireIn(x,y))", "score": 0}
{"id": "eqasc_validation_716", "prediction": "all x y z.((Storm(x) & Woods(y) & Fire(z)) -> Causes(x,y))", "score": 0}
{"id": "eqasc_validation_716", "prediction": "all x y.((Storm(x) & Woods(y)) -> CausesFires(x,y))", "score": 0}
{"id": "eqasc_validation_716", "prediction": "all x y z.((Storm(x) & Fire(y) & Wood(z)) -> CausesIn(x,z))", "score": 0}
{"id": "eqasc_validation_716", "prediction": "all x y z.((Storm(x) & Wood(y) & Fire(z)) -> CausesInWoods(x,y,z))", "score": 0}
{"id": "eqasc_validation_716", "prediction": "all x.((Storm(x) & Fire(c) & Woods(c)) -> CausesInWoods(x,c))", "score": 0}
{"id": "eqasc_validation_716", "prediction": "all x y z.((Storm(x) & Woods(y) & Woods(z)) -> CausesFire(x,y,z))", "score": 0}
{"id": "eqasc_validation_717", "prediction": "all x.((StaticElectricity(x) & LightningCause(x)) -> Static(x))", "score": 0}
{"id": "eqasc_validation_717", "prediction": "all x.((StaticElectricity(x) & Lightning(x)) -> CauseOf(x,lightning))", "score": 0}
{"id": "eqasc_validation_717", "prediction": "all x.((StaticElectricity(x) & Lightning(y)) -> Cause(x,y))", "score": 0}
{"id": "eqasc_validation_717", "prediction": "all x y.((StaticElectricity(x) & Lightning(y)) -> Cause(x,y))", "score": 0}
{"id": "eqasc_validation_717", "prediction": "all x.(StaticElectricity(x) -> CauseOfLightning(x))", "score": 0}
{"id": "eqasc_validation_717", "prediction": "all x.((StaticElectricity(x) & Lightning(x)) -> CauseOf(x,LastTime))", "score": 0}
{"id": "eqasc_validation_717", "prediction": "all x.((StaticElectricity(x) & Lightning(x)) -> CauseOf(x,y))", "score": 0}
{"id": "eqasc_validation_717", "prediction": "all x.((StableElectricity(x) & Lightning(x)) -> Cause(x))", "score": 0}
{"id": "eqasc_validation_717", "prediction": "all x.((StaticElectricity(x) & Lightning(x)) -> Cause(x,s,y))", "score": 0}
{"id": "eqasc_validation_717", "prediction": "all x y.((StaticElectricity(x) & Lightning(y) & Cause(z)) -> CauseOf(x,y))", "score": 0}
{"id": "eqasc_validation_717", "prediction": "all x.((StaticElectricity(x) & Lightning(y)) -> CauseOf(x,y))", "score": 0}
{"id": "eqasc_validation_717", "prediction": "all x.((StaticElectricity(x) & LightningCause(x)) -> StaticElectricity(x))", "score": 0}
{"id": "eqasc_validation_718", "prediction": "all x.((StaticElectricity(x) & ForestFire(x)) -> Causes(x,s,y))", "score": 0}
{"id": "eqasc_validation_718", "prediction": "all x.(StaticElectricity(x) -> CausesForestFire(x))", "score": 0}
{"id": "eqasc_validation_718", "prediction": "all x.((StaticElectricity(x) & ForestFire(x)) -> Causes(x,y))", "score": 0}
{"id": "eqasc_validation_718", "prediction": "all x.((StaticElectricity(x) & ForestFire(x)) -> Cause(x,y))", "score": 0}
{"id": "eqasc_validation_718", "prediction": "all x y.((StraticElectricity(x) & ForestFire(y)) -> Cause(x,y))", "score": 0}
{"id": "eqasc_validation_718", "prediction": "all x y z.((StaticElectricity(x) & Fire(y)) -> CanCause(x,y))", "score": 0}
{"id": "eqasc_validation_718", "prediction": "all x.((StaticElectricity(x) & ForestFire(x)) -> CanCause(x))", "score": 0}
{"id": "eqasc_validation_718", "prediction": "all x.((StaticElectricity(x) & ForestFire(y)) -> Causes(x,y))", "score": 0}
{"id": "eqasc_validation_718", "prediction": "all x.((StaticElectricity(x) & ForestFire(x)) -> Causes(x,e,z))", "score": 0}
{"id": "eqasc_validation_718", "prediction": "all x y.((StaticElectricity(x) & ForestFire(y)) -> Cause(x,y))", "score": 0}
{"id": "eqasc_validation_718", "prediction": "all x.(StaticElectricity(x) -> CanCauseForestFire(x))", "score": 0}
{"id": "eqasc_validation_718", "prediction": "all x y.((StaticElectricity(x) & ForestFire(y)) -> Causes(x,y))", "score": 0}
{"id": "eqasc_validation_719", "prediction": "all x.(Forest(x) -> AtRiskOfForestFires(x))", "score": 0}
{"id": "eqasc_validation_719", "prediction": "all x.(Forest(x) -> (DestroyedByForestFires(x) | DamagedByForestFires(x)))", "score": 0}
{"id": "eqasc_validation_719", "prediction": "all x y.((Forest(x) & ForestFire(y)) -> AtRiskOfDefiring(x,y))", "score": 0}
{"id": "eqasc_validation_719", "prediction": "all x.(Forest(x) -> AtRiskOfForestFire(x))", "score": 0}
{"id": "eqasc_validation_719", "prediction": "all x.(Forest(x) -> (AtRiskOfFire(x) & DestroyedByForestFire(x)))", "score": 0}
{"id": "eqasc_validation_719", "prediction": "all x.(Forest(x) -> (ProperlyAtRiskOfFire(x) | (DestroyedByForestFires(x) & DestroyedByForestFires(x))))", "score": 0}
{"id": "eqasc_validation_719", "prediction": "all x.(Forest(x) -> (AtRiskOfForestFires(x) & OftenDestroyedByForestFires(x)))", "score": 0}
{"id": "eqasc_validation_719", "prediction": "all x.(Forest(x) -> AtRiskOfFire(x))", "score": 0}
{"id": "eqasc_validation_719", "prediction": "all x.(Forest(x) -> (DistorbedByForestFires(x) | DestroyedByForestFires(x)))", "score": 0}
{"id": "eqasc_validation_719", "prediction": "all x.(Forest(x) -> (AtRiskOfFlight(x) & DestroyedByFire(x)))", "score": 0}
{"id": "eqasc_validation_719", "prediction": "all x y.((Forest(x) & ForestFire(y)) -> OftenAtRiskOfDefeating(x,y))", "score": 0}
{"id": "eqasc_validation_719", "prediction": "all x y.((Forest(x) & ForestFire(y)) -> Dissembles(x,y))", "score": 0}
{"id": "eqasc_validation_719", "prediction": "all x y.((Forest(x) & ForestFire(y)) -> AtRiskOfDisaster(x,y))", "score": 0}
{"id": "eqasc_validation_719", "prediction": "all x.(Forest(x) -> OftenAtRiskOfFootfire(x))", "score": 0}
{"id": "eqasc_validation_720", "prediction": "all x y.((Lightning(x) & Forest(y)) -> CausesDestruction(x,y))", "score": 0}
{"id": "eqasc_validation_720", "prediction": "Lightning can cause forests to be destroyed(insects)", "score": -1}
{"id": "eqasc_validation_720", "prediction": "all x y z.((Lightning(x) & Forest(y) & Forest(z)) -> CanCause(x,y,z))", "score": 0}
{"id": "eqasc_validation_720", "prediction": "all x y.((Lightning(x) & Forest(y)) -> CanCauseDestroyed(x,y))", "score": 0}
{"id": "eqasc_validation_720", "prediction": "all x y z.((Lightning(x) & Forest(y) & Land(z)) -> CausesToBeDestroyed(x,y,z))", "score": 0}
{"id": "eqasc_validation_720", "prediction": "all x y z.((Lightning(x) & Forest(y) & Forest(z)) -> CausedBy(x,y,z))", "score": 0}
{"id": "eqasc_validation_720", "prediction": "all x y.((Lightning(x) & Forest(y) & CausesDamage(x,y)) -> CanBreathe(x,y))", "score": 0}
{"id": "eqasc_validation_720", "prediction": "all x y.((Lightning(x) & Forest(y)) -> CanCauseDestruction(x,y))", "score": 0}
{"id": "eqasc_validation_720", "prediction": "all x y.((Lightning(x) & Forest(y) & CausedBy(x,y)) -> CanCauseDistruction(x,y))", "score": 0}
{"id": "eqasc_validation_720", "prediction": "all x y z.((Lightning(x) & Forest(y) & Forest(z)) -> CausesToBeDisturbed(x,y,z))", "score": 0}
{"id": "eqasc_validation_720", "prediction": "all x y.((Lightning(x) & Forest(y)) -> CausesToBeDestroyed(x,y))", "score": 0}
{"id": "eqasc_validation_720", "prediction": "all x y z.((Lightning(x) & Forest(y) & Forest(z) & CausedBy(x,y,z)) -> CanBeDisrupted(y))", "score": 0}
{"id": "eqasc_validation_720", "prediction": "all x.(Lightning(x) -> CausesForestDestruction(x))", "score": 0}
{"id": "eqasc_validation_720", "prediction": "all x y.((Lightning(x) & Forest(y)) -> CanCausesDestruction(x,y))", "score": 0}
{"id": "eqasc_validation_721", "prediction": "all x.((MaterialType(x) & MaterialThrough(x) & SoundPasses(x)) -> ChangesSpeedAtLowSpeedAtLowSpeedAtLowSpeedAtLowSpeedAtLowSpeedAtLowSpeed(x))", "score": 0}
{"id": "eqasc_validation_721", "prediction": "all x.((MaterialType(x) & SoundPassesThrough(x)) -> ChangesSpeedAtWheels(x))", "score": 0}
{"id": "eqasc_validation_721", "prediction": "all x.((MaterialType(x) & SoundPasses(x)) -> ChangesSpeedAtTravel(x))", "score": 0}
{"id": "eqasc_validation_721", "prediction": "exists x y.((Material(x) & Sound(x) & Sound(y) & Through(x,y)) -> ChangesSpeedAt(x,y))", "score": 0}
{"id": "eqasc_validation_721", "prediction": "all x y z.((MaterialType(x) & SoundPath(y) & SoundTransports(z)) -> ChangesSpeedAtTransport(x,y))", "score": 0}
{"id": "eqasc_validation_721", "prediction": "all x y.((MaterialType(x) & SoundPassesBy(x)) -> ChangesSpeedAt(x,y))", "score": 0}
{"id": "eqasc_validation_721", "prediction": "all x y.((Component(x) & Sound(y)) -> ChangesSpeedAtWorth(x,y))", "score": 0}
{"id": "eqasc_validation_721", "prediction": "all x y.((MaterialIsMaterial(x) & SoundPassesThrough(x,y)) -> ChangesSpeedAtTravel(x,y))", "score": 0}
{"id": "eqasc_validation_721", "prediction": "all x.((MaterialType(x) & SoundPasses(x)) -> ChangesSpeedAtCast(x))", "score": 0}
{"id": "eqasc_validation_721", "prediction": "all x.((Material(x) & SoundPasses(x)) -> ChangesSpeedAtLetterByTravel(x))", "score": 0}
{"id": "eqasc_validation_721", "prediction": "all x y.((MaterialType(x) & SoundPasses(x) & Shape(y)) -> ChangesSpeedAtWheelsAtWheels(x,y))", "score": 0}
{"id": "eqasc_validation_721", "prediction": "all x.((MaterialType(x) & SoundPassesThrough(x)) -> ChangesSpeedAtWillSoundTravels(x))", "score": 0}
{"id": "eqasc_validation_721", "prediction": "all x y.((TypeOfMaterial(x) & SoundPasses(x) & SoundSpeed(y)) -> ChangesSpeedAtLocation(y,x))", "score": 0}
{"id": "eqasc_validation_721", "prediction": "all x.((Material(x) & SoundPassesThrough(x)) -> ChangesSpeedAtLanguage(x))", "score": 0}
{"id": "eqasc_validation_721", "prediction": "all x y.((Material(x) & Sound(y) & Through(x,y)) -> ChangesSpeedCompetition(x))", "score": 0}
{"id": "eqasc_validation_721", "prediction": "all x.((MaterialType(x) & SoundPasses(x)) -> ChangesSpeedAtCurrent(x))", "score": 0}
{"id": "eqasc_validation_722", "prediction": "all x.(Hearing(x) -> PerceivingSound(x))", "score": 0}
{"id": "eqasc_validation_722", "prediction": "all x y.((Hearing(x) & Sound(y)) -> Perceives(x,y))", "score": 0}
{"id": "eqasc_validation_722", "prediction": "all x.(Hearing(x) -> PerceivesSound(x))", "score": 0}
{"id": "eqasc_validation_722", "prediction": "All x.(Hearing(x) -> PerceivesSound(x))", "score": -1}
{"id": "eqasc_validation_723", "prediction": "all x y z.((HasMaterial(x) & Material(y) & PassedThrough(z)) -> FastSpeedOfHearingChange(x,y,z))", "score": 0}
{"id": "eqasc_validation_723", "prediction": "all x y.((Material(y) & PassedThrough(x,y)) -> ChangesSpeedOfHearing(x))", "score": 0}
{"id": "eqasc_validation_723", "prediction": "all x y z.((Material(x) & Material(y) & MaterialPassedThrough(z) & ChangesSpeedOfHearing(x,y,z)) -> HearingSpeedChangesDependingOnMaterial(x,y,z))", "score": 0}
{"id": "eqasc_validation_723", "prediction": "all x y.((MaterialSatisfaction(x) & Hearing(y)) -> SpeedChangesBasedOn(x,y))", "score": 0}
{"id": "eqasc_validation_723", "prediction": "all x y.((Wearing(x) & Material(y)) -> SpeedChangesDependingOn(x,y))", "score": 0}
{"id": "eqasc_validation_723", "prediction": "all x.((HiringStandard(x) & MaterialPassed(x)) -> ChangesSpeed(x))", "score": 0}
{"id": "eqasc_validation_723", "prediction": "all x.(HiringTemperature(x) -> DependingOnMaterial(x))", "score": 0}
{"id": "eqasc_validation_723", "prediction": "all x y.((SpeedOfHearing(x) & Material(y) & PassedThrough(x,y)) -> VariatesDependingOn(x,y))", "score": 0}
{"id": "eqasc_validation_723", "prediction": "all x.(MaterialPassedAndPassed(x) -> ChangesSpeedOfHearing(x))", "score": 0}
{"id": "eqasc_validation_723", "prediction": "all x.(HiringSpeed(x) -> (SeveralSpeedsDependsOnMaterial(x) & PassedThrough(x)))", "score": 0}
{"id": "eqasc_validation_723", "prediction": "all x y.((Material(x) & PassedThrough(y)) -> TempoOfHearingChanges(x,y))", "score": 0}
{"id": "eqasc_validation_723", "prediction": "all x y.((Material(y) & PassedThrough(y,z) & Material(z)) -> AltersSpeedOfHearing(x,y,z))", "score": 0}
{"id": "eqasc_validation_723", "prediction": "all x.((Material(x) & PassedThrough(x)) -> TheSpeedOfHearing(x))", "score": 0}
{"id": "eqasc_validation_723", "prediction": "all x.((SpeedOfHearing(x) & MaterialPassedThrough(x)) -> SpeedChanges(x))", "score": 0}
{"id": "eqasc_validation_723", "prediction": "all x.((SpeedOfHearing(x) & MaterialPassedThrough(x)) -> ChangesSpeedOfHearing(x))", "score": 0}
{"id": "eqasc_validation_723", "prediction": "all x y.((GainOfHearing(x) & MaterialPassedThrough(y)) -> SpeedChangeReliantOn(x,y))", "score": 0}
{"id": "eqasc_validation_724", "prediction": "all x.((SoundVibration(x) & DifferentSpeeds(x)) -> TravelsThroughDifferentMaterials(x))", "score": 0}
{"id": "eqasc_validation_724", "prediction": "all x y.((SoundVibration(x) & Material(y)) -> TravelsAtDifferentSpeeds(x,y))", "score": 0}
{"id": "eqasc_validation_724", "prediction": "all x y.((SoundVibration(x) & Material(y)) -> (TravelsAtDifferentSpeeds(x,y) | TravelsAtDifferentSpeeds(x,y)))", "score": 0}
{"id": "eqasc_validation_724", "prediction": "all x y z.((SoundVibration(x) & Material(y) & Material(z)) -> TravelsAtVariousSpeeds(x,y,z))", "score": 0}
{"id": "eqasc_validation_724", "prediction": "all x y.((SoundVibration(x) & Material(y)) -> TransportsAtDifferentSpeeds(x,y))", "score": 0}
{"id": "eqasc_validation_724", "prediction": "all x y.((SoundVibration(x) & Material(y)) -> Travel(x,y))", "score": 0}
{"id": "eqasc_validation_724", "prediction": "all x y.((SoundVibration(x) & Material(y)) -> TravelsAtChangeSpeed(x,y))", "score": 0}
{"id": "eqasc_validation_724", "prediction": "all x y.((SoundVibration(x) & Material(y)) -> TravelsAtVariousSpeeds(x,y))", "score": 0}
{"id": "eqasc_validation_724", "prediction": "all x.(SoundVibration(x) -> TravelsAtFourThanDoubleSpeeds(x))", "score": 0}
{"id": "eqasc_validation_724", "prediction": "all x y z.((SoundVibration(x) & Material(y) & Material(z)) -> TravelsAtDifferentSpeeds(x,y,z))", "score": 0}
{"id": "eqasc_validation_724", "prediction": "all x y z.(Ghost(x,y) & Material(z) & SoundVibration(x) -> TravelsAtGas(x,z))", "score": 0}
{"id": "eqasc_validation_724", "prediction": "all x.(SoundVibration(x) -> TravelsAtDifferentSpeeds(x))", "score": 0}
{"id": "eqasc_validation_724", "prediction": "all x y.((SoundVibration(x) & Material(y) & TravelsAtDifferentSpeed(x,y)) -> DifferentSpeeds(x,y))", "score": 0}
{"id": "eqasc_validation_725", "prediction": "everything from the way sound passes throughs to materials changes soundVibrations.", "score": -1}
{"id": "eqasc_validation_725", "prediction": "all x.((Material(x) & SoundPassesThrough(x)) -> ChangesSoundVibrations(x))", "score": 0}
{"id": "eqasc_validation_725", "prediction": "all x y.((MaterialType(x) & SoundPasses(y)) -> ChangesSoundVibrations(x,y))", "score": 0}
{"id": "eqasc_validation_725", "prediction": "all x y.((Material(x) & Sound(y) & Sound(vibrations) & SoundVibrations(z) & Substrates(x,y)) -> Transforms(x,z))", "score": 0}
{"id": "eqasc_validation_725", "prediction": "all x y.((TypeOfMaterial(x) and SoundPass(y)) -> ChangesSoundVibrations(z))", "score": 0}
{"id": "eqasc_validation_725", "prediction": "all x.((MaterialType(x) & SoundPassesThrough(x)) -> ChangesSoundVibrations(x))", "score": 0}
{"id": "eqasc_validation_725", "prediction": "all x y.((Material(x) & SoundPath(x) & Material(y)) -> ChangesVibrations(x,y))", "score": 0}
{"id": "eqasc_validation_725", "prediction": "all x.((MaterialType(x) & SoundPasses(x)) -> ChangesSoundVibrations(x))", "score": 0}
{"id": "eqasc_validation_725", "prediction": "all x y.((Material(x) & SoundPasses(x,y)) -> ChangesSonNihilities(x,y))", "score": 0}
{"id": "eqasc_validation_725", "prediction": "all x y.((MaterialType(x) & SoundPasses(y) & MaterialType(x,y)) -> ChangesVibrations(x,y))", "score": 0}
{"id": "eqasc_validation_725", "prediction": "all x y z.((Material(x) & Sound(y) & Material(z)) -> ChangesVibrations(x,y,z))", "score": 0}
{"id": "eqasc_validation_725", "prediction": "all x.((MaterialType(x) & SoundPasses(x)) -> ChangesVibrations(x))", "score": 0}
{"id": "eqasc_validation_725", "prediction": "all x y.((MaterialType(x) & SoundPassesThrough(x,y)) -> ChangesSoundVibrations(x))", "score": 0}
{"id": "eqasc_validation_725", "prediction": "all x y z.((Material(x) & Sound(y) & Sound(z) & Through(x,y) & Transmitted(x,z)) -> ChangesVibrationsSound(x,w))", "score": 0}
{"id": "eqasc_validation_725", "prediction": "all x y.((Material(x) & Sound(y) & PassesThrough(x,y)) -> ChangesSoundVibrations(x,y))", "score": 0}
{"id": "eqasc_validation_726", "prediction": "all x.((Sonic(x) & Mechanical(x)) -> SoundWaves(x))", "score": 0}
{"id": "eqasc_validation_726", "prediction": "all x.(Sound(x) -> (MechanicalWaves(x) & RequiresMachineWaves(x)))", "score": 0}
{"id": "eqasc_validation_726", "prediction": "all x.((Sound(x) & SoundWaves(x)) -> MechanicalWaves(x))", "score": 0}
{"id": "eqasc_validation_726", "prediction": "all x.(Sound(x) -> (MechanicalWave(x) & Wave(x)))", "score": 0}
{"id": "eqasc_validation_726", "prediction": "all x.(SoundWaves(x) -> Mechanical(x))", "score": 0}
{"id": "eqasc_validation_726", "prediction": "all x.(Sonon(x) -> MechanicalWaves(x))", "score": 0}
{"id": "eqasc_validation_726", "prediction": "all x.((SoundWaves(x) & MechanicalWaves(x)) -> SoundWaves(x))", "score": 0}
{"id": "eqasc_validation_726", "prediction": "all x.(Sonic(x) -> MechanicalWaves(x))", "score": 0}
{"id": "eqasc_validation_726", "prediction": "all x.(SoundWaves(x) -> MechanicalWaves(x))", "score": 0}
{"id": "eqasc_validation_726", "prediction": "all x.(SonicWell(x) -> MechanicalWell(x))", "score": 0}
{"id": "eqasc_validation_726", "prediction": "all x.(SonorSoundWaves(x) -> MechanicalWaves(x))", "score": 0}
{"id": "eqasc_validation_726", "prediction": "all x.(SoundWeather(x) -> MechanicalWaves(x))", "score": 0}
{"id": "eqasc_validation_726", "prediction": "all x.(Sound(x) -> MechanicalWaves(x))", "score": 0}
{"id": "eqasc_validation_726", "prediction": "all x.(Sound(x) -> SoundWaves(x))", "score": 0}
{"id": "eqasc_validation_727", "prediction": "all x.((Material(x) & ThroughwhichMechanicalWavesPass(x)) -> ChangeSpeedAtPosition(x))", "score": 0}
{"id": "eqasc_validation_727", "prediction": "all x.((MaterialType(x) & MechanicalWavesPass(x)) -> ChangeSpeedAtWheat(x))", "score": 0}
{"id": "eqasc_validation_727", "prediction": "all x y z.((Material(x) & MechanicalWinds(y) & Material(z) & Through whichMaterialPaints(x,y,z)) -> ChangesSpeedAtCarve(y,z))", "score": -1}
{"id": "eqasc_validation_727", "prediction": "all x.((MetalType(x) & MechanicalWaves(x)) -> ChangesSpeed(x))", "score": 0}
{"id": "eqasc_validation_727", "prediction": "all x y.((Material(x) & MechanicalWaves(y)) -> ChangesSpeedAtTravel(x,y))", "score": 0}
{"id": "eqasc_validation_727", "prediction": "all x.((MaterialType(x) & MechanicalWavesPass(x)) -> ChangesSpeedAtTravelAt(x))", "score": 0}
{"id": "eqasc_validation_727", "prediction": "all x y.((Material(x) & Material(y) & MechanicalWavesPast(x,y)) -> ChangesSpeedAtTaxiAtTravel(y))", "score": 0}
{"id": "eqasc_validation_727", "prediction": "all x.((MaterialType(x) & MechanicalWaves(x)) -> ChangesSpeedAtTravel(x))", "score": 0}
{"id": "eqasc_validation_727", "prediction": "all x.((Material(x) & MechanicalWavesPass(x)) -> ChangeSpeedAtTravel(x))", "score": 0}
{"id": "eqasc_validation_727", "prediction": "all x.(Material(x) & MaterialType(x) & MechanicalWaves(x)) -> ChangesSpeedAtFrequency(x))", "score": -1}
{"id": "eqasc_validation_727", "prediction": "all x y z w.((MaterialType(x) & Material(y) & MechanicalWaves(z) & MechanicalWaves(w)) -> ChangesSpeedAtRun(x,y,z,w))", "score": 0}
{"id": "eqasc_validation_727", "prediction": "all x.(TechnicalWaves(x) -> (MaterialType(x) & MechanicalWavesPass(x)) & ChangeSpeedAtTravel(x,y))", "score": 0}
{"id": "eqasc_validation_727", "prediction": "all x.((MaterialType(x) & MechanicalWavesPass(x)) -> ChangeSpeedAtTravel(x))", "score": 0}
{"id": "eqasc_validation_727", "prediction": "all x y.((Material(x) & MechanicalWaves(y) & PassesThrough(x,y)) -> ChangesSpeedAtTreadway(x,y))", "score": 0}
{"id": "eqasc_validation_727", "prediction": "all x y.((MaterialType(x) & MechanicalWaves(y)) -> ChangeSpeedAtTravelAt(x,y))", "score": 0}
{"id": "eqasc_validation_728", "prediction": "all x.(Sound(x) -> MovesThroughDifferentMaterialsAtDifferentRate(x))", "score": 0}
{"id": "eqasc_validation_728", "prediction": "all x y.((Sound(x) & Material(y)) -> MovesAtDifferentRate(x,y))", "score": 0}
{"id": "eqasc_validation_728", "prediction": "all x.(SoundMovesAtDifferentRates(x) -> SoundMovesAtDifferentRate(x))", "score": 0}
{"id": "eqasc_validation_728", "prediction": "all x y((SoundMovement(x) & Material(y)) -> (MovesAbout(x,y) & DifferentRates(x)))", "score": 0}
{"id": "eqasc_validation_728", "prediction": "all x.(Sound(x) -> MovesThroughDifferentMaterials(x))", "score": 0}
{"id": "eqasc_validation_728", "prediction": "all x y.((Sound(x) & Material(y) & Material(y) & DifferentRates(x)) -> MovesToDifferentRatesAtDifferentRates(x,y))", "score": 0}
{"id": "eqasc_validation_728", "prediction": "all x y z.((Sound(x) & Material(y) & Material(z)) -> MovesAtTwoRates(x,y,z))", "score": 0}
{"id": "eqasc_validation_728", "prediction": "all x y z.((Sound(x) & Material(y) & Material(z)) -> MovesTo(x,y,z))", "score": 0}
{"id": "eqasc_validation_728", "prediction": "all x y z.((Sound(x) & Material(y) & Material(z) & MotionsAt(x,y,z)) -> DifferentRate(y,z))", "score": 0}
{"id": "eqasc_validation_728", "prediction": "all x y,z.((Sound(x) & Material(y) & Material(z)) -> MovesAtDifferentRates(x,y,z))", "score": -1}
{"id": "eqasc_validation_728", "prediction": "all x y.((Sound(x) & Material(y)) -> MovesChange(x,y))", "score": 0}
{"id": "eqasc_validation_728", "prediction": "all x y z.((Sound(x) & Material(y) & Material(z)) -> MovesAtLocation(x,y))", "score": 0}
{"id": "eqasc_validation_728", "prediction": "all x y z.((Sound(x) & Material(y) & Material(z)) -> MovesFast(x,y,z))", "score": 0}
{"id": "eqasc_validation_729", "prediction": "all x y.((Refraction(x) & Wave(y) & Medium(z)) -> ChangesIn(x,y))", "score": 0}
{"id": "eqasc_validation_729", "prediction": "all x y.((Refraction(x) & Wave(y) & ChangesInMedium(x,y)) -> EffectUpon(x,y))", "score": 0}
{"id": "eqasc_validation_729", "prediction": "all x.((Refraction(x) & MediumChange(x)) -> EffectOnWave(x))", "score": 0}
{"id": "eqasc_validation_729", "prediction": "all x y.((Refraction(x) & Wave(y) & Medium(z)) -> Changes(x,y,z))", "score": 0}
{"id": "eqasc_validation_729", "prediction": "all x y z.((Refraction(x) & Wave(y) & Medium(z) & Changes(x,z)) -> EffectOn(x,y,z))", "score": 0}
{"id": "eqasc_validation_729", "prediction": "all x y.((Wave(x) & Medium(y) & Changes(x,y)) -> RefractionEffect(x,y))", "score": 0}
{"id": "eqasc_validation_729", "prediction": "all x y.((Refraction(x) & Medium(y)) -> Changes(x,y))", "score": 0}
{"id": "eqasc_validation_729", "prediction": "all x y.((Refraction(x) & Wave(y) & Medium(y)) -> ChangeIn(x,y))", "score": 0}
{"id": "eqasc_validation_729", "prediction": "all x y.((Refraction(x) & Wave(y) & ChangesInMedium(y)) -> Effect_on(x,y))", "score": 0}
{"id": "eqasc_validation_729", "prediction": "all x y.((Refraction(x) & Wave(y) & Medium(y)) -> HasChanges(x,y))", "score": 0}
{"id": "eqasc_validation_729", "prediction": "all x y.((Refraction(x) & Medium(y) & ChangesInMedium(x,y)) -> EffectOnWave(x,y))", "score": 0}
{"id": "eqasc_validation_729", "prediction": "all x.((Waves(x) & MediumChanges(x)) -> RefractionEffect(x))", "score": 0}
{"id": "eqasc_validation_729", "prediction": "all x y.((Refraction(x) & Wave(y) & Medium(z)) -> EffectSupport(x,y))", "score": 0}
{"id": "eqasc_validation_729", "prediction": "all x y.((Refraction(x) & Wave(y) & ChangesInMedium(x,y)) -> EffectIn(x,y))", "score": 0}
{"id": "eqasc_validation_729", "prediction": "all x.((Refraction(x) & ChangesInMedium(x)) -> EffectOnWave(x))", "score": 0}
{"id": "eqasc_validation_729", "prediction": "all x y.((Refraction(x) & Medium(y)) -> ChangesIn(x,y))", "score": 0}
{"id": "eqasc_validation_730", "prediction": "all x y.((FastOfSonder(x) & SpeedOfSound(y)) -> CausesSonWavesToBeRefractedByDifferentMedia(x,y))", "score": 0}
{"id": "eqasc_validation_730", "prediction": "all x.(DecreasesInSpeedOfSound(x) -> SoundsRefracted(x))", "score": 0}
{"id": "eqasc_validation_730", "prediction": "all x.(DifferencesInSpeedOfSound(x) -> CausesRefractionOfSoundWells(x))", "score": 0}
{"id": "eqasc_validation_730", "prediction": "all x y z.((DifferenceInSpeedOfSound(x) & SoundWaves(y) & Media(z)) -> AllowsRefractiveWhenPassing(x,y,z))", "score": 0}
{"id": "eqasc_validation_730", "prediction": "all x y.((DifferencesInSpeedOfSound(x,y) & Media(y)) -> CausesRefractingFactor(x,y))", "score": 0}
{"id": "eqasc_validation_730", "prediction": "all x y z.((SlowSpeed(x) & SoundWaves(y) & Media(z)) -> (DifferencesToSpeed(x,y,z) & PassingBetweenMedia(ez,y,z)))", "score": 0}
{"id": "eqasc_validation_730", "prediction": "all x y.((DiffferenceInSpeedOfSound(x) & Media(y) & Media(z) & PassesBetweenMedia(x,y,z)) -> SoundWavesRefracted(x,y,z))", "score": 0}
{"id": "eqasc_validation_730", "prediction": "all x.((DifferencesInSpeedOfSound(x)) -> SoundWavesRefracted(x))", "score": 0}
{"id": "eqasc_validation_730", "prediction": "all x y z.((Speed(x) & SoundQuality(y) & Media(z)) -> ConduitsSoundWavesToBeRefracted(x,y,z))", "score": 0}
{"id": "eqasc_validation_730", "prediction": "all x y.((DifferencesInSpeedOfSound(x) & MediaMedia(y)) -> RefractsSonWavesWhenPassing(x,y))", "score": 0}
{"id": "eqasc_validation_730", "prediction": "all x y.((SignalWaves(x) & Media(y) & DifferentFastOfSound(x)) -> (DifferencesInSpeedOfSound(x) | Refracted(x,y)))", "score": 0}
{"id": "eqasc_validation_730", "prediction": "all x y.((Difference(x) & SpeedOfSound(y)) -> CausesRefractingOfSoundWaves(x,y))", "score": 0}
{"id": "eqasc_validation_730", "prediction": "all x y.((Signwave(x) & Media(y)) -> DifferentSpeedOfSound(x,y))", "score": 0}
{"id": "eqasc_validation_730", "prediction": "all x.((DifferencesInSpeedOfSound(x) & PassingBetweenMedia(x,d)) -> SoundWavesRefracted(x))", "score": 0}
{"id": "eqasc_validation_730", "prediction": "all x y.((Speed(x) & Media(y) & DifferentMedia(y)) -> RefractedSoundWaves(x,y))", "score": 0}
{"id": "eqasc_validation_730", "prediction": "all x.((DifferencesInSpeedOfSound(x) & PassingBetweenMedia(x)) -> SoundWavesRefracted(x))", "score": 0}
{"id": "eqasc_validation_731", "prediction": "all x.((FiberousMaterial(x) & MolecularLevel(x)) -> SlowsTransmissionOfSound(x))", "score": 0}
{"id": "eqasc_validation_731", "prediction": "all x.((FerbousMaterial(x) & MolecularLevel(x)) -> SlowsTransmissionOfSound(x))", "score": 0}
{"id": "eqasc_validation_731", "prediction": "all x.(FluorousMaterial(x) -> SlowsTransmissionOfSound(x))", "score": 0}
{"id": "eqasc_validation_731", "prediction": "all x y.((FilmousMaterial(x) & MolecularLevel(y)) -> SlowestTransmissionOfSound(x,y))", "score": 0}
{"id": "eqasc_validation_731", "prediction": "all x y.((FibrousMaterial(x) & MolecularLevel(y)) -> SlowsTransmissionOfSound(x,y))", "score": 0}
{"id": "eqasc_validation_731", "prediction": "all x.(FiberousMaterial(x) -> SlowsSpeedOfTransmissionOfSound(x))", "score": 0}
{"id": "eqasc_validation_731", "prediction": "all x.((FiberousMaterial(x) & MolecularLevel(x)) -> SlowSpeedOfTransmissionOfSound(x))", "score": 0}
{"id": "eqasc_validation_731", "prediction": "all x y z.((FiberousMaterial(x) & MolecularBoundary(y) & SoundTransmissionSpeed(z)) -> SlowsTransmission(x,y,z))", "score": 0}
{"id": "eqasc_validation_731", "prediction": "all x y.((MolecularLevel(x) & FibrositicMaterial(y)) -> SlowsTransmissionOfSound(y))", "score": 0}
{"id": "eqasc_validation_731", "prediction": "all x.(FiberousMaterial(x) -> SlowsTransmissionOfSound(x))", "score": 0}
{"id": "eqasc_validation_731", "prediction": "all x.((FiberousMaterial(x) & MolecularLevel(x)) -> SlowsTransmissionForSound(x))", "score": 0}
{"id": "eqasc_validation_731", "prediction": "all x.(FilmousMaterial(x) -> SlowsTransmissionOfSound(x))", "score": 0}
{"id": "eqasc_validation_732", "prediction": "all x y.((Sound(x) & FibrousMaterial(y) & PassesThrough(x,y)) -> SlowsDown(x))", "score": 0}
{"id": "eqasc_validation_732", "prediction": "all x y.((SoundPassage(x,y) & FibrousMaterial(y)) -> SlowsDown(x,y))", "score": 0}
{"id": "eqasc_validation_732", "prediction": "all x y z.((Sound(x) & FibrousMaterial(y) & FibrosidMaterial(z) & PassesThrough(x,y)) -> SlowDownTime(x,z))", "score": 0}
{"id": "eqasc_validation_732", "prediction": "all x y.((Sound(x) & FibrousMaterial(y) & PassesThrough(x,y)) -> SlowsDownSlowness(y))", "score": 0}
{"id": "eqasc_validation_732", "prediction": "all x.((Sound(x) & PassesThroughFibrousMaterial(x)) -> SlowsDownSubstance(x))", "score": 0}
{"id": "eqasc_validation_732", "prediction": "all x y z.((Sound(x) & FibrousMaterial(y) & FibriousMaterial(z)) -> SlowsDownForSound(x,y,z))", "score": 0}
{"id": "eqasc_validation_732", "prediction": "all x y z.((Sound(x) & FibrousMaterial(y) & PassingThrough(x,y) & SettleSlowDownAlarm(z)) -> SlowsDownAlarm(x,y))", "score": 0}
{"id": "eqasc_validation_732", "prediction": "all x y z.((Sound(x) & FibrousMaterial(y) & FibrousMaterial(z) & PassesThrough(x,y,z)) -> SlowsDown(x,y))", "score": 0}
{"id": "eqasc_validation_732", "prediction": "all x y z.((Sound(x) & FibrousMaterial(y) & SoundPassingThrough(x,y)) -> SlowsDown(x))", "score": 0}
{"id": "eqasc_validation_732", "prediction": "all x.((Sound(x) & PassingThroughFiberousMaterial(x)) -> SlowsDown(x))", "score": 0}
{"id": "eqasc_validation_732", "prediction": "all x y z.((Sound(x) & FibrousMaterial(y) & SoundPassing(x,y,z)) -> SlowsDown(x))", "score": 0}
{"id": "eqasc_validation_732", "prediction": "all x y z.((Ensemble(x) & Sound(y) & FibrousMaterial(z)) -> SlowsDown(y,z))", "score": 0}
{"id": "eqasc_validation_732", "prediction": "all x.((SoundPassingThroughFibrousMaterial(x)) -> Slowdown(x))", "score": 0}
{"id": "eqasc_validation_732", "prediction": "all x y.((Sound(x) & FibrousMaterial(y)) -> SlowsDown(x,y))", "score": 0}
{"id": "eqasc_validation_733", "prediction": "all x.((Energy(x) & ProducedByVibrations(x) & TravelsInWaves(x)) -> Sound(x))", "score": 0}
{"id": "eqasc_validation_733", "prediction": "all x.((Energy(x) & Sound(x)) -> (ProducedByVibrations(x) & TravelsInWaves(x)))", "score": 0}
{"id": "eqasc_validation_733", "prediction": "(Sonic(Speech) -> ProducedByFvibrationsAndTravelsInWaves(Speech))", "score": 0}
{"id": "eqasc_validation_733", "prediction": "all x.((Energy(x) & ProducedByVibrations(x) & TravelsInWaves(x)) -> SoundEnergy(x))", "score": 0}
{"id": "eqasc_validation_733", "prediction": "all x.(Sound(x) -> (AlwaysproducedByVIbrations(x) & TravelInWaves(x)))", "score": 0}
{"id": "eqasc_validation_733", "prediction": "all x.(Sound(x) -> (Energy(x) & ProducedByVibrations(x) & TravelsInWaves(x)))", "score": 0}
{"id": "eqasc_validation_733", "prediction": "all x.(Sound(x) -> (Exercise(x) & ProducedByVibrations(x) & TravelsInWaves(x)))", "score": 0}
{"id": "eqasc_validation_733", "prediction": "all x.((Energy(x) & Sound(x)) -> (ProducesByVibrations(x) & TravelsInWaves(x)))", "score": 0}
{"id": "eqasc_validation_733", "prediction": "all x y z.((Sound(x) & Energy(y) & Vibration(z)) -> (ProducedBy(x,z) & TravelsInWaves(x)))", "score": 0}
{"id": "eqasc_validation_733", "prediction": "all x.(Son(x) -> (ProducedByVibrations(x) & TravelsInWaves(x)))", "score": 0}
{"id": "eqasc_validation_733", "prediction": "all x.((Energy(x) & ProducedByVibrations(x) & TravelsInWaves(x)) -> SoundSpecies(x))", "score": 0}
{"id": "eqasc_validation_734", "prediction": "all x.(ChangingSpeedAtWaves(x) -> ChangesMaterial(x))", "score": 0}
{"id": "eqasc_validation_734", "prediction": "all x.((FossileType(x) & WavePath(x)) -> SpeedAt(x,waves))", "score": 0}
{"id": "eqasc_validation_734", "prediction": "all x y z.((Material(x) & Wave(y) & Surface(z) & PassesThrough(x,y) & WaveSpeed(y)) -> ChangesSpeedAtWavesMovement(x,y,z))", "score": 0}
{"id": "eqasc_validation_734", "prediction": "all x y z.((Material(x) & Waves(y) & Material(z) & PassesThrough(x,y)) -> EffectsSpeed(x,z))", "score": 0}
{"id": "eqasc_validation_734", "prediction": "all x y.((MaterialType(x) & Waves(y) & Through(x,y)) -> ChangesSpeedAt(x,y))", "score": 0}
{"id": "eqasc_validation_734", "prediction": "all x y.((Material(x) & Waves(y) & MaterialType(x,y)) -> ChangesSpeedAtWavesMovement(x,y))", "score": 0}
{"id": "eqasc_validation_734", "prediction": "all x.((Material(x) & Material(x) & PassesThrough(x)) -> ChangesSpeedAtLimitOfWarms(x))", "score": 0}
{"id": "eqasc_validation_734", "prediction": "all x.((MaterialType(x) & Waves(x)) -> ChangesSpeedAtWavesMovement(x))", "score": 0}
{"id": "eqasc_validation_734", "prediction": "all x.((Material(x) & WavesPast(x)) -> ChangesSpeedAtWavesMovement(x))", "score": 0}
{"id": "eqasc_validation_734", "prediction": "all x y.((MaterialType(x) & Waves(y)) -> ChangesSpeedAtMovement(x,y))", "score": 0}
{"id": "eqasc_validation_734", "prediction": "all x y.((Material(x) & Material(y) & WavesPass(x) & Waves(y)) -> ChangesSpeedAtwhichMove(x,y))", "score": 0}
{"id": "eqasc_validation_734", "prediction": "all x y.((Material(x) & Waves(y) & Through(x,y)) -> ChangesSpeedAtWavesMove(x))", "score": 0}
{"id": "eqasc_validation_734", "prediction": "all x y.((Material(x) & Wave(y) & Through(x,y)) -> ChangesSpeedAtMovement(x))", "score": 0}
{"id": "eqasc_validation_734", "prediction": "all x y.((Material(x) & Wave(y)) -> ChangesSpeedAtPast(x,y))", "score": 0}
{"id": "eqasc_validation_734", "prediction": "all x y z w.((Material(x) & Waves(y) & Waves(z) & Material(w) & Material(y) & Waves(w)) -> ChangesSpeedAt(x,y,z,w))", "score": 0}
{"id": "eqasc_validation_734", "prediction": "all x y.((MaterialType(x) & Wave(y)) -> ChangesSpeedAtMovement(x,y))", "score": 0}
{"id": "eqasc_validation_735", "prediction": "all x.(NegativeFeedback(x) -> ControlsInsulinSecrétionByPancreas(x))", "score": 5}
{"id": "eqasc_validation_735", "prediction": "all x.(NegativeFeedback(x) -> ControlsInsulinSecration(x,pancreas))", "score": 0}
{"id": "eqasc_validation_735", "prediction": "all x y.((NegativeFeedback(x) & InsulinSecrétion(y)) -> Controls(x,y))", "score": 5}
{"id": "eqasc_validation_735", "prediction": "all x.(NegativeFeedback(x) -> ControlsInsulinSecrétion(x))", "score": 0}
{"id": "eqasc_validation_735", "prediction": "all x y.((NegativeFeedback(x) & InsulinSectiation(y)) -> ControlsBy(x,y))", "score": 0}
{"id": "eqasc_validation_735", "prediction": "all x y.((NegativeFeedback(x) & Insulin(y)) -> ControlsSecretionBy(x,y))", "score": 0}
{"id": "eqasc_validation_735", "prediction": "all x y.((NegativeFeedback(x) & Pancreas(y) & InsulinSecrétion(x,y)) -> Controls(x,y))", "score": 0}
{"id": "eqasc_validation_735", "prediction": "all x y.((Pancreas(x) & NegativeFeedback(x) & InsulinSecration(y)) -> Controls(x,y))", "score": 0}
{"id": "eqasc_validation_735", "prediction": "all x.((NegativeFeedback(x) & insulinSecrine(x,pancreas)) -> Control(x,intense))", "score": 0}
{"id": "eqasc_validation_735", "prediction": "all x.(NegativeFeedback(x) -> ControlsInsulinSecrationByPancreas(x))", "score": 0}
{"id": "eqasc_validation_735", "prediction": "all x y.((NegativeFeedback(x) & InsulinSecration(y)) -> Controls(x,y))", "score": 0}
{"id": "eqasc_validation_736", "prediction": "all x y.((Glucose(x) & Pancreas(y)) -> StimulatesSpreadInsulinByNegativeFeedback(x,y))", "score": 0}
{"id": "eqasc_validation_736", "prediction": "all x.(GlucoseStudiesPancreas(x) -> SecretesIndividualThroughNegativeFeedback(x))", "score": 0}
{"id": "eqasc_validation_736", "prediction": "all x y.((Glucose(x) & Pancreas(y)) -> StimulatesStoichiogenesis(x,y))", "score": 0}
{"id": "eqasc_validation_736", "prediction": "all x.(Glucose(x) -> StimulatesPancreasToSecrowIsitineThroughNegativeFeedback(x))", "score": 0}
{"id": "eqasc_validation_736", "prediction": "all x y z.((Glucose(x) & Pancreas(y) & Insulin(z)) -> StimulatesSecturing(x,y,z))", "score": 0}
{"id": "eqasc_validation_736", "prediction": "all x.(Glucose(x) -> StimulatesPancreasToSecrateIndividual(x))", "score": 0}
{"id": "eqasc_validation_736", "prediction": "all x y.((Glucose(x) & Pancreas(y)) -> StimulatesToSecreteIndividual(x,y))", "score": 0}
{"id": "eqasc_validation_736", "prediction": "all x.(Glucose(x) -> (StimulatesPancreas(x) & SecretesIndividual(x) & NegativeFeedback(x)))", "score": 0}
{"id": "eqasc_validation_736", "prediction": "all x.(Glucose(x) -> StimulatesPancreasToSecrateIndividuals(x))", "score": 0}
{"id": "eqasc_validation_736", "prediction": "all x.(Glucose(x) -> (StimulatesPancreas(x) & SecretesInsulin(x) & NegativeFeedback(x)))", "score": 0}
{"id": "eqasc_validation_736", "prediction": "all x.(GlucoseStimulatesPancreasToSectIsotropinThroughNegativeFeedback(x) -> Secrete(x,insuline))", "score": 0}
{"id": "eqasc_validation_736", "prediction": "all x y.((Glucose(x) & Pancreas(y)) -> StimulatesSpokenIndulgence(x,y))", "score": 0}
{"id": "eqasc_validation_736", "prediction": "all x y z.((Glucose(x) & Pancreas(y) & Insulin(z)) -> (Stimulates(x,y,z) & Secretes(x,z)))", "score": 0}
{"id": "eqasc_validation_736", "prediction": "all x y z.((Glucose(x) & Pancreas(y) & Insulin(z)) -> (StimulatesBy(x,y) & SecretesThroughNegativeFeedback(x,z)))", "score": 0}
{"id": "eqasc_validation_736", "prediction": "all x.(Glucose(x) -> StimulatesPancreasToSectifyIndividualByNegativeFeedback(x))", "score": 0}
{"id": "eqasc_validation_737", "prediction": "all x.(Glucose(x) -> MakesPancreasSecrateIndividual(x))", "score": 0}
{"id": "eqasc_validation_737", "prediction": "all x.(Glucose(x) -> ThePancreasSectsIndividual(x))", "score": 0}
{"id": "eqasc_validation_737", "prediction": "all x.(Glucose(x) -> ProducesSectainIndol(x))", "score": 0}
{"id": "eqasc_validation_737", "prediction": "all x.(Glucose(x) -> MakesPancreasSecreteIndividual(x))", "score": 0}
{"id": "eqasc_validation_737", "prediction": "all x.(Glucose(x) -> (MadePacreasSecreteIndividual(x) & IncreasePoreformGene(x)))", "score": 0}
{"id": "eqasc_validation_737", "prediction": "all x.(Glucose(x) -> MakesPancreasSectIsotropin(x))", "score": 0}
{"id": "eqasc_validation_737", "prediction": "all x.(Glucose(x) -> CanSensitizeIndividual(x))", "score": 0}
{"id": "eqasc_validation_737", "prediction": "all x y.((Glucose(x) & Pancreas(y)) -> SecretesIndividual(x,y))", "score": 0}
{"id": "eqasc_validation_737", "prediction": "all x.(Glucose(x) -> SecretesInsulin(x))", "score": 0}
{"id": "eqasc_validation_737", "prediction": "all x.(Glucose(x) -> WorksWithIndividual(x))", "score": 0}
{"id": "eqasc_validation_737", "prediction": "all x.(Glucose(x) -> SecretesIndividual(x))", "score": 0}
{"id": "eqasc_validation_737", "prediction": "all x.(Glucose(x) -> MakesPancreasSectIginate(x))", "score": 0}
{"id": "eqasc_validation_737", "prediction": "all x.(Glucose(x) -> MakesPancreasSectIgnite(x))", "score": 0}
{"id": "eqasc_validation_738", "prediction": "all x.(FeedbackInhibition(x) -> (CommonBiologicalControlMechanics(x) & NegativeFeedback(x)))", "score": 2}
{"id": "eqasc_validation_738", "prediction": "all x.((FeedbackInhibition(x) & CommonBiologicalControlMachine(x)) -> NegativeFeedback(x))", "score": 0}
{"id": "eqasc_validation_738", "prediction": "all x.(FeedbackInhibition(x) -> NegativeFeedback(x))", "score": 2}
{"id": "eqasc_validation_738", "prediction": "all x.(FeedbackInhibition(x) -> (CommonBiologicalControlMechanism(x) & NegativeFeedback(x)))", "score": 2}
{"id": "eqasc_validation_738", "prediction": "all x.(FeedbackInhibition(x) -> (CommonBiologicControlMechanism(x) & NegativeFeedback(x)))", "score": 2}
{"id": "eqasc_validation_738", "prediction": "all x.((FeedbackInhibition(x) & CommonBiologicalControlMechanism(x)) -> NegativeFeedback(x))", "score": 0}
{"id": "eqasc_validation_738", "prediction": "all x.(FeedbackInhibition(x) -> (BiologicControlMachine(x) & NegativeFeedback(x)))", "score": 2}
{"id": "eqasc_validation_738", "prediction": "all x.(FeedbackInhibition(x) -> CommonBiologicalControlMechanism(x))", "score": 0}
{"id": "eqasc_validation_738", "prediction": "all x.((GatherFormingInhibition(x) & CommonBiologicalControlMachine(x)) -> NimativeFeedback(x))", "score": 0}
{"id": "eqasc_validation_738", "prediction": "all x.((FeedbackInhibition(x) & NegativeFeedback(x)) -> CommonBiologicalControlMechanism(x))", "score": 0}
{"id": "eqasc_validation_739", "prediction": "all x y.((FeedbackInhibition(x) & Pancreas(y)) -> ControlsInsulinSecrétion(x,y))", "score": 0}
{"id": "eqasc_validation_739", "prediction": "all x y z.((FeedbackInhibition(x) & InsulinSecretion(y) & Pancreas(z)) -> Controls(x,y,z))", "score": 0}
{"id": "eqasc_validation_739", "prediction": "all x.(FeedbackInhibition(x) -> ControlsInsulinSecrine(x))", "score": 0}
{"id": "eqasc_validation_739", "prediction": "all x.(FeedbackInhibition(x) -> ControlsIndulgenceSeccrine(x))", "score": 0}
{"id": "eqasc_validation_739", "prediction": "all x y.((FeedbackInhibition(x) & Pancreas(y)) -> ControlsIgnitorsecretion(x,y))", "score": 0}
{"id": "eqasc_validation_739", "prediction": "all x.(FeedbackInhibition(x) -> ControlsInsulinSecrétionByPancreas(x))", "score": 5}
{"id": "eqasc_validation_739", "prediction": "all x.(FloorInhibition(x) -> ControlsInsulinSecrineSection(x,pancreas))", "score": 0}
{"id": "eqasc_validation_739", "prediction": "all x.(FiberFeedbackInhibition(x) -> (ControlsInsulinserineSection(x) & PancreasSectioon(x)))", "score": 0}
{"id": "eqasc_validation_739", "prediction": "all x.(FeedbackInhibition(x) -> Controls(x,InsulinarySecrator))", "score": 0}
{"id": "eqasc_validation_739", "prediction": "all x y.((FeedbackInhibition(x) & Pancreas(y)) -> ControlsSecrétion(x,y))", "score": 0}
{"id": "eqasc_validation_739", "prediction": "all x y.((FeedbackInhibition(x) & InsulinSecrétion(y)) -> Controls(x,y))", "score": 5}
{"id": "eqasc_validation_739", "prediction": "all x.(FeedbackInhibition(x) -> ControlsInsulinExsecretionByPancreas(x))", "score": 0}
{"id": "eqasc_validation_739", "prediction": "all x y.((FeedbackInhibition(x) & Insulin(y)) -> Controls(x,y))", "score": 0}
{"id": "eqasc_validation_739", "prediction": "all x y.((FeedbackInhibition(x) & Pancreas(y)) -> ControlsInsulinSecrineProsecretion(x,y))", "score": 0}
{"id": "eqasc_validation_740", "prediction": "all x.(IsletCell(x) -> LocationInPancreas(x))", "score": 0}
{"id": "eqasc_validation_740", "prediction": "all x.(IslandCell(x) -> (LocatedInPancreas(x) & InPancreas(x)))", "score": 0}
{"id": "eqasc_validation_740", "prediction": "all x.(IsletCell(x) -> exists y.(Pancreas(y) & LocatedIn(x,y))))", "score": -1}
{"id": "eqasc_validation_740", "prediction": "all x.(IslandCell(x) -> LocationInPancreas(x))", "score": 0}
{"id": "eqasc_validation_740", "prediction": "all x y.((IsletCell(x) & Pancreas(y)) -> LocatedIn(x,y))", "score": 0}
{"id": "eqasc_validation_740", "prediction": "all x.(IsletCell(x) -> LocatedInPancreas(x))", "score": 0}
{"id": "eqasc_validation_740", "prediction": "all x.(IsletCell(x) -> is locatedInPancreas(x))", "score": -1}
{"id": "eqasc_validation_740", "prediction": "all x.(IslandCell(x) -> LocatedInPancreas(x))", "score": 0}
{"id": "eqasc_validation_740", "prediction": "all x.(IslandCell(x) -> LocalizedInPancreas(x))", "score": 0}
{"id": "eqasc_validation_740", "prediction": "all x.(IsletCell(x) -> (LocatedInPancreas(x) & LocatedWithPancreas(x)))", "score": 0}
{"id": "eqasc_validation_740", "prediction": "all x y z.((IsletCell(x) & Pancreas(y) & Pancreas(z)) -> LocatedIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_740", "prediction": "all x.(IsletCell(x) -> HappensInPancreas(x))", "score": 0}
{"id": "eqasc_validation_740", "prediction": "all x.(IslandCell(x) -> ArePancreatics(x))", "score": 0}
{"id": "eqasc_validation_741", "prediction": "all x.(IsletCell(x) -> (LocatedWhereInsulinSecrétionOf(x,insulin,insulin,audit)))", "score": 0}
{"id": "eqasc_validation_741", "prediction": "all x.((IletCells(x) & InsulinSecrétion(x)) -> LocatedWhereSecrétionOf(x,Individual))", "score": 0}
{"id": "eqasc_validation_741", "prediction": "all x y z.((IsletCell(x) & InsulinSecrétion(y) & InsulinSecrétion(z)) -> LocatedAndSecrétionOf(x,y,z))", "score": 0}
{"id": "eqasc_validation_741", "prediction": "all x y.((IsletCell(x) & InsulinSecrétion(y)) -> LocatedIn(x,y))", "score": 0}
{"id": "eqasc_validation_741", "prediction": "all x.(IsletCell(x) -> InsulinSecrétionOccur(x))", "score": 0}
{"id": "eqasc_validation_741", "prediction": "all x y z.((IsletCell(x) & InsulinSeccrine(y) & AthletCell(z)) -> LocalizedMovement(x,y))", "score": 0}
{"id": "eqasc_validation_741", "prediction": "all x y.((IsletCell(x) & InsulinSecrétion(y)) -> Located(x,y))", "score": 0}
{"id": "eqasc_validation_741", "prediction": "all x.(IsletCell(x) -> (LocatedWhereInsulinSectionOccurs)))", "score": -1}
{"id": "eqasc_validation_741", "prediction": "all x y z.((IsletCell(x) & InsulinSecrétion(y) & isletCell(z)) -> (LocatedWhere(x,y,z) & Selected(z,y)))", "score": 0}
{"id": "eqasc_validation_741", "prediction": "all x.(IsletCells(x) -> exists y.(InsulinSecrantionOccurrence(y) & LocatedWhere(x,y))))", "score": -1}
{"id": "eqasc_validation_741", "prediction": "all x.((IsletCell(x) & InsulinSeccrine(x)) -> LocatedInIsletCell(x))", "score": 0}
{"id": "eqasc_validation_741", "prediction": "all x.(IsletCells(x) -> (LocatedWhereIsletSecrétionSecrétion(x) & InsulinSecrétionOf(x)))", "score": 0}
{"id": "eqasc_validation_741", "prediction": "all x.(IsletCell(x) -> (SecrétionOfIndividual(x) | InsulinSecrétionOfIndividual(x)))", "score": 0}
{"id": "eqasc_validation_741", "prediction": "all x.(IsletCell(x) -> (LocatedWithInsulinSection(x) & InsulinSectionOccurs(x)))", "score": 0}
{"id": "eqasc_validation_741", "prediction": "all x.(IsletCell(x) -> (LocationOfIsletCells(x) & InsulinSecretionOccurred(x)))", "score": 0}
{"id": "eqasc_validation_742", "prediction": "all x.(Spot(x) -> FilterFeder(x))", "score": 0}
{"id": "eqasc_validation_742", "prediction": "all x.(Spoonge(x) -> FilterFeeder(x))", "score": 0}
{"id": "eqasc_validation_742", "prediction": "all x.(Sponges(x) -> FilterFeeder(x))", "score": 0}
{"id": "eqasc_validation_742", "prediction": "all x.(Spot(x) -> FilterFeeder(x))", "score": 0}
{"id": "eqasc_validation_742", "prediction": "all x.(Spunge(x) -> FilterFilter(x))", "score": 0}
{"id": "eqasc_validation_742", "prediction": "all x.((Spotge(x) & FilterFeeder(x)) -> Spoonge(x))", "score": 0}
{"id": "eqasc_validation_742", "prediction": "all x.(Spotlight(x) -> FiltersFeeder(x))", "score": 0}
{"id": "eqasc_validation_742", "prediction": "all x.(Spot(x) -> FilterFerner(x))", "score": 0}
{"id": "eqasc_validation_742", "prediction": "all x.(Spotge(x) -> FilterFeeder(x))", "score": 0}
{"id": "eqasc_validation_743", "prediction": "all x.(DietFilterFilter(x) -> (EatsKrill(x) & EatsPlankton(x)))", "score": 0}
{"id": "eqasc_validation_743", "prediction": "all x.((DietFilterFeeder(x) & EatsKrill(x) & EatsPlankton(x)) -> Feeder(x))", "score": 0}
{"id": "eqasc_validation_743", "prediction": "All x.(DietFilter(x) -> (EatKerl(x) & EatPlankton(x)))", "score": -1}
{"id": "eqasc_validation_743", "prediction": "all x.(Filter(x) -> (EatsKrill(x) & EatsPlankton(x)))", "score": 0}
{"id": "eqasc_validation_743", "prediction": "all x.(DietFilter(x) ->,EatsKrill(x) & EatsPlankton(x))", "score": -1}
{"id": "eqasc_validation_743", "prediction": "all x.(DietFilterFeeder(x) -> (EatsKrill(x) & EatsPlankton(x)))", "score": 0}
{"id": "eqasc_validation_743", "prediction": "all x y.((DietFilterFiller(x) & Krill(y) & Plankton(z)) -> Eats(x,y,z))", "score": 0}
{"id": "eqasc_validation_743", "prediction": "all x.(DietFilterFilter(x) -> (EatsKirll(x) & EatsPlankton(x)))", "score": 0}
{"id": "eqasc_validation_743", "prediction": "all x.(DietFilterFiller(x) -> (EatsKril(x) & EatsPlankton(x)))", "score": 0}
{"id": "eqasc_validation_743", "prediction": "all x.(DietFilterFilter(x) -> EatsKril(x) & EatsPlankton(x))", "score": 0}
{"id": "eqasc_validation_743", "prediction": "all x.(DietFilterFilter(x) -> (EatKirll(x) & EatPlankton(x)))", "score": 0}
{"id": "eqasc_validation_743", "prediction": "all x.(DIETFilterFilter(x) -> (EatsKrill(x) & EatsPlankton(x)))", "score": 0}
{"id": "eqasc_validation_743", "prediction": "all x y.((DietFilter(x) & Species(y)) -> (EatKrill(x,y) & EatPlankton(x,y)))", "score": 0}
{"id": "eqasc_validation_743", "prediction": "all x y.((DietFilter(x) & Filter(y)) -> (EatsKril(x) & EatsPlankton(x)))", "score": 0}
{"id": "eqasc_validation_744", "prediction": "all x.(Spoonge(x) -> EatsPlankton(x))", "score": 0}
{"id": "eqasc_validation_744", "prediction": "all x y.((Spot(x) & Plankton(y)) -> Eats(x,y))", "score": 0}
{"id": "eqasc_validation_744", "prediction": "all x.(Spotge(x) -> EatsPlankton(x))", "score": 0}
{"id": "eqasc_validation_744", "prediction": "all x.(Spotne(x) -> EatsPlankton(x))", "score": 0}
{"id": "eqasc_validation_744", "prediction": "all x.(Spotne(x) -> EatPlankton(x))", "score": 0}
{"id": "eqasc_validation_744", "prediction": "all x.(Spot(x) -> EatsPlankton(x))", "score": 0}
{"id": "eqasc_validation_744", "prediction": "all x.(Sponger(x) -> EatPlankton(x))", "score": 0}
{"id": "eqasc_validation_744", "prediction": "all x.(Spotk(x) -> EatPlankton(x))", "score": 0}
{"id": "eqasc_validation_744", "prediction": "all x.(Sponge(x) -> EatsPlankton(x))", "score": 0}
{"id": "eqasc_validation_744", "prediction": "all x.(Spoonge(x) -> EatPlankton(x))", "score": 0}
{"id": "eqasc_validation_744", "prediction": "all x.(Spotge(x) -> EatPlankton(x))", "score": 0}
{"id": "eqasc_validation_745", "prediction": "all x.(BottomDwellingOrganism(x) -> (Coral(x) | Urchin(x) | Sponge(x)))", "score": 0}
{"id": "eqasc_validation_745", "prediction": "all x.((BottomDwellingOrganism(x) & (Coral(x) | Urchin(x) | Sponge(x))) -> ColorfulBackground(x))", "score": 0}
{"id": "eqasc_validation_745", "prediction": "all x.(BottomDwellingOrganism(x) -> (ProvidesColorfulBackground(x) & IncludesCoral(x) & IncludesUrchin(x) & IncludesSponge(x)))", "score": 0}
{"id": "eqasc_validation_745", "prediction": "all x.((BottomDwellingOrganism(x) & Coral(x) & Urchin(x) & Sponge(x)) -> ProvidesColorfulBackground(x))", "score": 0}
{"id": "eqasc_validation_745", "prediction": "all x.((BottomDwellingOrganism(x) & Reef(x) & Urchin(x) & Sponge(x)) -> ColorfulBackground(x))", "score": 0}
{"id": "eqasc_validation_745", "prediction": "all x.(BottomDwellingOrganism(x) -> (ColoredOrganism(x) | UrchinOrGatherOrganism(x) | SpongeOrganism(x)))", "score": 0}
{"id": "eqasc_validation_745", "prediction": "all x y z.((BottomDwellingOrganism(x) & Bottom(y) & (Coral(z) | Urchin(z) | Sponge(z))) -> ColorfulBackground(x))", "score": 0}
{"id": "eqasc_validation_745", "prediction": "all x y.((BottomDwellingOrganism(x) & (Coral(y) | Urchin(y) | Sponge(y))) -> ColorfulBackground(x))", "score": 0}
{"id": "eqasc_validation_745", "prediction": "all x y z.((BottomDwellingOrganism(x) & Coral(y) & Urchin(z) & Sponge(w)) -> ProvidesColorfulBackground(x,y,z,w))", "score": 0}
{"id": "eqasc_validation_745", "prediction": "all x y z.((BottomDwellingOrganism(x) & Coral(y) & Urchin(z) & Sponge(x)) -> ProvidesColorfulBackdrop(x))", "score": 0}
{"id": "eqasc_validation_745", "prediction": "all x.(BottomDwellingOrganism(x) -> exists y.(Coral(y) | Urchin(y) | Sponge(y)) & ProvidesColorfulBackground(x)))", "score": -1}
{"id": "eqasc_validation_745", "prediction": "all x.(BottomDwellingOrganism(x,Coral) | BottomDwellingOrganism(x,Urchins) | BottomDwellingOrganism(x,Sponges)) -> ProvidesColorfulBackground(x))", "score": -1}
{"id": "eqasc_validation_745", "prediction": "all x.((BottomHousingOrganism(x) & (Coral) | Urchin(x) | Sponge(x))) -> ColorfulBackground(x))", "score": -1}
{"id": "eqasc_validation_746", "prediction": "all x.(BodyDwellingOrganism(x) -> FilterFeeder(x))", "score": 0}
{"id": "eqasc_validation_746", "prediction": "all x.(BottomDemandingOrganism(x) -> CanBeFilterFeeder(x))", "score": 0}
{"id": "eqasc_validation_746", "prediction": "all x y.((BottomDwellingOrganism(x) & BottomDwellingOrganism(y)) -> FilterFeeder(x,y))", "score": 0}
{"id": "eqasc_validation_746", "prediction": "all x.(FilterFeeder(x) -> BottomDwellingOrganism(x))", "score": 0}
{"id": "eqasc_validation_746", "prediction": "all x.(BottomDomesticOrganism(x) -> FilterFeeder(x))", "score": 0}
{"id": "eqasc_validation_746", "prediction": "all x.(BottomDwellingOrganism(x) -> (FilterFeeder(x) | FilterFeeder(x)))", "score": 0}
{"id": "eqasc_validation_746", "prediction": "all x.(BottomDwellingOrganism(x) -> CanBeFilterFeeder(x))", "score": 0}
{"id": "eqasc_validation_746", "prediction": "all x.(BoundDwellingOrganism(x) -> FilterFeeder(x))", "score": 0}
{"id": "eqasc_validation_746", "prediction": "all x.(BottomDwellingOrganism(x) -> FilterFeeder(x))", "score": 0}
{"id": "eqasc_validation_746", "prediction": "all x.((FilterFeeder(x) & BottomDwellingOrganisms(x)) -> NotFiberFeeder(x))", "score": 0}
{"id": "eqasc_validation_746", "prediction": "all x.(FilterFeeder(x) -> exists y.(BottomDwellingOrganism(y) & DissolvedIn(x,y)))", "score": 0}
{"id": "eqasc_validation_746", "prediction": "all x.((BottomDwellingOrganism(x) & ChannelFilterFeeder(x)) -> FilterFeeder(x))", "score": 0}
{"id": "eqasc_validation_747", "prediction": "all x y z.((Sponge(x) & Krill(y) & Plankton(z)) -> Eats(x,y,z))", "score": 0}
{"id": "eqasc_validation_747", "prediction": "all x y.((Sponge(x) & SpongeEat(y,x)) -> (EatsKnill(x) | EatsPlankton(y),x)))", "score": -1}
{"id": "eqasc_validation_747", "prediction": "all x y.((Sponge(x) & Sponge(y)) -> (EatsKrill(x) & EatsPlankton(y)))", "score": 0}
{"id": "eqasc_validation_747", "prediction": "all x.(Sponge(x) -> (EatsKrill(x) & EatsPlankton(x)))", "score": 0}
{"id": "eqasc_validation_747", "prediction": "all x y z.((Sponge(x) & Krill(y) & Plankton(z)) -> (Eats(x,y) & Eats(x,z)))", "score": 0}
{"id": "eqasc_validation_747", "prediction": "all x y z.((Sponge(x) & Krill(y) & Planktons(z)) -> (Eats(x,y) & Eats(x,z)))", "score": 0}
{"id": "eqasc_validation_747", "prediction": "all x y.((Sponge(x) & Sponge(y)) -> (EatsKrill(x) | EatsPlankton(y)))", "score": 0}
{"id": "eqasc_validation_747", "prediction": "all x y z.((Sponge(x) & Sponge(y) & (KrillEat(z) | PlanktonEat(z))) -> (Eats(x,y) & Eats(y,z))))", "score": -1}
{"id": "eqasc_validation_747", "prediction": "all x y z.((Sponge(x) & Krill(y) & Plankton(z)) -> (Eats(x,z) & Eats(x,y)))", "score": 0}
{"id": "eqasc_validation_747", "prediction": "all x y z.((Sponge(x) & Krill(y) & Plankton(z)) -> Eats(x,y))", "score": 0}
{"id": "eqasc_validation_747", "prediction": "all x y.((Sponge(x) & (Kark(y) | Plankton(y))) -> Eats(x,y))", "score": 0}
{"id": "eqasc_validation_747", "prediction": "all x y z.((Sponge(x) & Krill(y) & Plankton(z)) -> EatsAndEats(x,z))", "score": 0}
{"id": "eqasc_validation_748", "prediction": "all x.(Clam(x) -> (FilterFeeder(x) & TrapsFiltersFood(x) & WaterPassesBy(x)))", "score": 0}
{"id": "eqasc_validation_748", "prediction": "all x.(Clam(x) -> (FilterFeeder(x) & TrapAndFilterOutFood(x)))", "score": 0}
{"id": "eqasc_validation_748", "prediction": "all x y.((Clam(x) & WaterPassesBy(y)) -> (FilterFeeder(x) & TrapsAndFiltersFood(x)))", "score": 0}
{"id": "eqasc_validation_748", "prediction": "all x.(Clamm(x) -> (FermerFeeder(x) & trapsFood(x) & FiltersFood(x) & WaterPassesBy(x)))", "score": 0}
{"id": "eqasc_validation_748", "prediction": "all x y.((Clam(x) & Water(y)) -> (FilterFeeder(x) & Traps(x,y) & Filters(x,y)))", "score": 0}
{"id": "eqasc_validation_748", "prediction": "all x.(Chamb(x) -> (FilterFeeder(x) & TrapAndFilterOutFood(x)))", "score": 0}
{"id": "eqasc_validation_748", "prediction": "all x.(Clay(x) -> (FilterFeeder(x) & TrapsAndFiltersFoodAsWaterPassesBy(x)))", "score": 0}
{"id": "eqasc_validation_748", "prediction": "all x.(Clamm(x) -> (FilterFeeder(x) & TrapFood(x) & FilterFood(x) & WaterPassesBy(x)))", "score": 0}
{"id": "eqasc_validation_748", "prediction": "all x.(Lamb(x) -> (FilterFeeder(x) & TrapsAndFiltersFeed(x) & WaterPassesBy(x)))", "score": 0}
{"id": "eqasc_validation_748", "prediction": "all x.(Clam(x) -> (FilterFiller(x) & TrapsFilterDairy(x) & WaterPassesBy(x)))", "score": 0}
{"id": "eqasc_validation_748", "prediction": "all x.(Chamb(x) -> (FilterFeeder(x) & TrapsAndFiltersFood(x)))", "score": 0}
{"id": "eqasc_validation_748", "prediction": "all x.(Chamber(x) -> (FilterFeeder(x) & TrapsAndFiltersFeeding(x) & WaterPassesBy(x)))", "score": 0}
{"id": "eqasc_validation_748", "prediction": "all x y.((Chamb(x) & WaterPassesBy(y)) -> (FilterFeeder(x) & TrapAs(x,y) & FilterAs(x,y)))", "score": 0}
{"id": "eqasc_validation_748", "prediction": "all x.(Cham(x) -> (FilterFeeder(x) & TrapsAndFiltersFood(x)))", "score": 0}
{"id": "eqasc_validation_748", "prediction": "all x.(Clam(x) -> (FilterFeeder(x) & TrapsFilterOutFood(x) & PassesByWater(x)))", "score": 0}
{"id": "eqasc_validation_748", "prediction": "all x.(Chambour(x) -> (FilterFeeder(x) & TrapsFood(x) & FiltersWater(x)))", "score": 0}
{"id": "eqasc_validation_749", "prediction": "all x y z.((Sponge(x) & Water(y) & Water(z)) -> (Traps(x,y) & FiltersOutFood(x,z)))", "score": 0}
{"id": "eqasc_validation_749", "prediction": "all x y z.((Sponge(x) & WaterPasses(y) & Food(z)) -> (Traps(x) & FiltersOutFood(x,z)))", "score": 0}
{"id": "eqasc_validation_749", "prediction": "all x y.((Sponges(x) & Water(y)) -> exists z.(Trap(x,z) & FilterOutFood(x)))", "score": 0}
{"id": "eqasc_validation_749", "prediction": "all x.(Spoonge(x) -> (TrapsAndFiltersOutFood(x) & WaterPassesBy(x)))", "score": 0}
{"id": "eqasc_validation_749", "prediction": "all x y.((Spotge(x) & Water(y)) -> (TrapsAndFiltersFood(x,y) & WaterPasses(y)))", "score": 0}
{"id": "eqasc_validation_749", "prediction": "all x y z.((Shone(x) & Water(y) & Food(z) & Passes(x,y)) -> (Traps(x,z) & FiltersOut(x,z)))", "score": 0}
{"id": "eqasc_validation_749", "prediction": "all x.(Spoonge(x) -> (Trap(x) & FilterOutFood(x) & WaterPasses(x)))", "score": 0}
{"id": "eqasc_validation_749", "prediction": "all x y.((Sponge(x) & Water(y)) -> (Captures(x,y) & FiltersOutFood(x,y)))", "score": 0}
{"id": "eqasc_validation_749", "prediction": "all x.(Spoonge(x) -> (TrapsFood(x) & FiltersOutFood(x)))", "score": 0}
{"id": "eqasc_validation_749", "prediction": "all x y.((Spot(x) & Water(y)) -> (Traps&FiltersOutFood(x,y) & PassesBy(x,y)))", "score": 0}
{"id": "eqasc_validation_749", "prediction": "all x.(Spoonge(x) -> (Path(x) & Filter(x) & WaterPasses(x)))", "score": 0}
{"id": "eqasc_validation_749", "prediction": "all x y z.((Spoonge(x) & Water(y) & Water(z)) -> (TrapsAndFiltersOutFood(x,y,z) & WaterPassesBefore(x,y)))", "score": 0}
{"id": "eqasc_validation_749", "prediction": "all x y.((Spotge(x) & Water(y)) -> (CapturesOf(x,y) & FiltersOutFood(x,y)))", "score": 0}
{"id": "eqasc_validation_749", "prediction": "all x y.((Spenge(x) & Water(y)) -> (TrapsFood(x) & FiltersOutFood(x)))", "score": 0}
{"id": "eqasc_validation_749", "prediction": "all x y.((Sponge(x) & Water(y)) -> (TrapsAndFilters(x,y) & WaterPassesBy(x)))", "score": 0}
{"id": "eqasc_validation_749", "prediction": "all x y.((Spotge(x) & Water(y)) -> TrapsAndFiltersOutFood(x,y))", "score": 0}
{"id": "eqasc_validation_750", "prediction": "(FilterFeeder(mush) & CleansWater(mush))", "score": 0}
{"id": "eqasc_validation_750", "prediction": "all x.(Mushels(x) -> FilterFeeders(x))", "score": 0}
{"id": "eqasc_validation_750", "prediction": "all x.(Mushels(x) -> FilterFeeder(x))", "score": 0}
{"id": "eqasc_validation_750", "prediction": "all x.((Mushels(x) & FilterFeeder(x)) -> CleansWaterAsIsFeed(x))", "score": 0}
{"id": "eqasc_validation_750", "prediction": "all x.(Mushele(x) -> (FilterFeeder(x) & CleanWaterFor(x,Mushels)))", "score": 0}
{"id": "eqasc_validation_750", "prediction": "all x.(Museum(x) -> (FilterFeeder(x) & CleanWaterAs(x)))", "score": 0}
{"id": "eqasc_validation_750", "prediction": "all x.((Mushels(x) & FilterFeeders(x)) -> CleansWater(x))", "score": 0}
{"id": "eqasc_validation_750", "prediction": "all x.(Mushlin(x) -> (FilterFeeder(x) & CleanWater(x)))", "score": 0}
{"id": "eqasc_validation_750", "prediction": "all x.((Mushroom(x) & FilterFeeder(x)) -> CleanWaterAsMushels(x))", "score": 0}
{"id": "eqasc_validation_750", "prediction": "all x.((Mushlet(x) & FilterFeeder(x)) -> CleansWaterAsYouFeed(x))", "score": 0}
{"id": "eqasc_validation_750", "prediction": "all x.(Mushel(x) -> FilterFeeder(x))", "score": 0}
{"id": "eqasc_validation_750", "prediction": "all x.(Musel(x) -> FilterFeeder(x))", "score": 0}
{"id": "eqasc_validation_750", "prediction": "all x.(Mushelle(x) -> FilterFeeder(x))", "score": 0}
{"id": "eqasc_validation_750", "prediction": "all x.(Muschel(x) -> (FilterFeeder(x) & CleansWater(x)))", "score": 0}
{"id": "eqasc_validation_750", "prediction": "all x.(Mushels(x) -> (FilterFeeder(x) & CleanWaterAsMushels(x)))", "score": 0}
{"id": "eqasc_validation_750", "prediction": "all x.(Mushele(x) -> (FilterFeeder(x) & CleansWater(x) & Feeds(x)))", "score": 0}
{"id": "eqasc_validation_751", "prediction": "all x.(Sponge(x) -> CleansWater(x))", "score": 0}
{"id": "eqasc_validation_751", "prediction": "all x y z.((Sponge(x) & WaterCare(y) & WaterCare(z)) -> Cleans(x,y,z))", "score": 0}
{"id": "eqasc_validation_751", "prediction": "all x y.((Sponge(x) & Water(y)) -> CleansWith(x,y))", "score": 0}
{"id": "eqasc_validation_751", "prediction": "all x.(Sponge(x) -> (CleanWater(x) & Sponge(x)))", "score": 0}
{"id": "eqasc_validation_751", "prediction": "all x y.((Sponge(x) & Water(y)) -> Cleans(x,y))", "score": 0}
{"id": "eqasc_validation_751", "prediction": "all x y.((Sponge(x) & Aqua(y)) -> Cleans(x,y))", "score": 0}
{"id": "eqasc_validation_751", "prediction": "all x.(Sponge(x) -> CleaningWater(x))", "score": 0}
{"id": "eqasc_validation_752", "prediction": "all x.(Sponge(x) -> (CleansWater(x) & Feeds(x)))", "score": 0}
{"id": "eqasc_validation_752", "prediction": "all x.(Sponge(x) -> CleansWater(x))", "score": 0}
{"id": "eqasc_validation_752", "prediction": "all x.(Sponge(x) -> (CleansWater(x) & Feeds(x) & Feeds(x)))", "score": 0}
{"id": "eqasc_validation_752", "prediction": "all x.(Sponge(x) -> (InfeedsWater(x) & CleansWater(x)))", "score": 0}
{"id": "eqasc_validation_752", "prediction": "all x y z.((Sponge(x) & Feed(y)) -> (CleansWaterAs(x,y) & Feeds(z)))", "score": 0}
{"id": "eqasc_validation_752", "prediction": "all x.(Sponge(x) -> (CleansWater(x) & Feed(x)))", "score": 0}
{"id": "eqasc_validation_752", "prediction": "all x.((Sponge(x) & Feeds(x)) -> (CleanWater(x) & Feeds(x)))", "score": 0}
{"id": "eqasc_validation_752", "prediction": "all x y.((Sponge(x) & Water(y)) -> (CleanWater(x,y) & Feeds(x,y)))", "score": 0}
{"id": "eqasc_validation_752", "prediction": "all x.(Sponge(x) -> CleanWater(x))", "score": 0}
{"id": "eqasc_validation_752", "prediction": "all x y.((Sponge(x) & FeedsIn(x,y)) -> CleansWaterAsSponge(x))", "score": 0}
{"id": "eqasc_validation_752", "prediction": "all x.(Sponge(x) -> (CleansWater(x) | FeedsFood(x)))", "score": 0}
{"id": "eqasc_validation_753", "prediction": "all x.(Spot(x) -> (TrapsSolve(x) & FiltersOutFoodAsWaterPassesBy(x)))", "score": 0}
{"id": "eqasc_validation_753", "prediction": "all x y.((Spot(x) & Water(y)) -> (Traps(x,y) & FiltersOutFood(x,y)))", "score": 0}
{"id": "eqasc_validation_753", "prediction": "all x.(Spoonge(x) -> (Traps(x) & Filters(x) & PassesBy(x,Water)))", "score": 0}
{"id": "eqasc_validation_753", "prediction": "all x y.((Spot(x) & Water(y)) -> TrapsAndFiltersOut(x,y))", "score": 0}
{"id": "eqasc_validation_753", "prediction": "all x.(Spotges(x) -> (Traps(x) & FiltersOutFood(x) & WaterPassesBy(x)))", "score": 0}
{"id": "eqasc_validation_753", "prediction": "all x.(Sponges(x) -> (TrapsAndFilterFood(x) & WaterPassesBy(x)))", "score": 0}
{"id": "eqasc_validation_753", "prediction": "all x.( Sponge(x) -> (Traps(x) & FiltersElements(x) & WaterPassesBy(x)))", "score": 0}
{"id": "eqasc_validation_753", "prediction": "all x.(Spot(x) -> (Traps(x) & FiltersOut(x)))", "score": 0}
{"id": "eqasc_validation_753", "prediction": "all x y.((Spotge(x) & Water(y)) -> (Traps(x,y) & FiltersOutFood(x,y)))", "score": 0}
{"id": "eqasc_validation_753", "prediction": "all x.(Spencer(x) -> (TrapsWater(x) & FiltersOfFood(x) & PassesBy(x)))", "score": 0}
{"id": "eqasc_validation_753", "prediction": "all x y.((Sponge(x) & Water(y)) -> (Traps(x,y) & FiltersFood(x,y)))", "score": 0}
{"id": "eqasc_validation_753", "prediction": "all x y z.((Spoonge(x) & Water(y) & Water(z)) -> (Trap(x,y) & FilterOut(x,y,z)))", "score": 0}
{"id": "eqasc_validation_753", "prediction": "all x y z.((Spot(x) & Water(y) & Water(z)) -> (Traps(x,y) & Filters(x,z)))", "score": 0}
{"id": "eqasc_validation_753", "prediction": "all x y.((Spot(x) & Water(y)) -> (Traps(x,y) & FiltersOut(x,y)))", "score": 0}
{"id": "eqasc_validation_753", "prediction": "all x.(Spoonge(x) -> (Traps(x) & Filters(x) & WaterPassesBy(x)))", "score": 0}
{"id": "eqasc_validation_754", "prediction": "all x y z.((Spot (x) & Krill(y) & Plankton(z)) -> (Eats(x,y) & Eats(x,z)))", "score": 0}
{"id": "eqasc_validation_754", "prediction": "all x.(Spotge(x) -> (EatsKary(x) & EatsPlankton(x)))", "score": 0}
{"id": "eqasc_validation_754", "prediction": "all x y.((Spot(x) & Krill(y)) -> Eats(x,y)) & (Plankton(y) -> Eats(x,y)))", "score": -1}
{"id": "eqasc_validation_754", "prediction": "all x y.(Spot(x) & (Execute(x,Krill) & Eat(x,Plankton))) -> (Eat(x,Krill) & Eat(x,Plankton)))", "score": -1}
{"id": "eqasc_validation_754", "prediction": "all x y z w.((Sponge(x) & (Killer(y) | Plankton(z)) & (Eats(x,y) | Eats(x,z)))) -> (Eats(x,w) & Eats(x,z)))", "score": -1}
{"id": "eqasc_validation_754", "prediction": "all x y z.((Spoonge(x) & Krill(y) & Plankton(z)) -> (Eats(x,y) & Eats(x,z)))", "score": 0}
{"id": "eqasc_validation_754", "prediction": "all x y z.((Sponge(x) & Krill(y) & Plankton(z)) -> (Eats(x,y) & Eats(x,z)))", "score": 0}
{"id": "eqasc_validation_754", "prediction": "all x y.((Spot(x) & Krill(y)) -> (Eats(x,y) & EatsPlankton(x,y)))", "score": 0}
{"id": "eqasc_validation_754", "prediction": "all x y.((Spotge(x) & Krill(y)) -> Eats(x,y)) & (Plankton(z) -> Eats(x,z)))", "score": -1}
{"id": "eqasc_validation_754", "prediction": "all x y z.((Spot(x) & Krill(y) & Plankton(z)) -> (Eats(x,y) & Eats(x,z)))", "score": 0}
{"id": "eqasc_validation_754", "prediction": "all x y.((Spotge(x) & Krill(y)) | Plankton(xy)) -> Eats(x,y))", "score": -1}
{"id": "eqasc_validation_754", "prediction": "all x y.((Spoonge(x) & Krill(y)) -> EatsAndPlanton(x,y))", "score": 0}
{"id": "eqasc_validation_754", "prediction": "all x y z.((Hood(x) & Krill(y) & Plankton(z)) -> (Eats(x,y) & Eats(x,z)))", "score": 0}
{"id": "eqasc_validation_754", "prediction": "all x.(Spot(x) -> (EatsKerl(x) & EatsPlankton(x)))", "score": 0}
{"id": "eqasc_validation_754", "prediction": "all x.(Spot(x) -> (EatsKeril(x) & EatsPlankton(x)))", "score": 0}
{"id": "eqasc_validation_754", "prediction": "all x y.((Spot(x) & Krill(y)) -> Eat(x,y)) & ((Spot(x) & Plankton(z)) -> Eat(x,z)))", "score": -1}
{"id": "eqasc_validation_755", "prediction": "all x.(Sponge(x) -> CleansWater(x))", "score": 0}
{"id": "eqasc_validation_755", "prediction": "all x y z.((Sponge(x) & Water(y) & Water(z)) -> Cleans(x,y,z))", "score": 0}
{"id": "eqasc_validation_755", "prediction": "all x y.((Sponge(x) & CleanWater(y)) -> Scrub(x))", "score": 0}
{"id": "eqasc_validation_755", "prediction": "all x y.((Sponge(x) & Water(y)) -> Cleans(x,y))", "score": 0}
{"id": "eqasc_validation_755", "prediction": "all x y z.((Sponge(x) & CleanSediment(z) & CleanWater(z)) -> SpongePrettyWater(x,y,z))", "score": 0}
{"id": "eqasc_validation_755", "prediction": "all x y.((Sponge(x) & CleanWater(y)) -> CleanWater(x,y))", "score": 0}
{"id": "eqasc_validation_755", "prediction": "all x y z.((Sponge(x) & Sponge(y) & WaterSpray(z) & CleanWater(y,z)) -> CleanWater(y))", "score": 0}
{"id": "eqasc_validation_755", "prediction": "all x.(Sponge(x) -> (CleanWater(x) & CleanWater(x)))", "score": 0}
{"id": "eqasc_validation_756", "prediction": "all x.(BaleenWhale(x) -> FilterFurner(x))", "score": 0}
{"id": "eqasc_validation_756", "prediction": "all x.(BaleenWhale(x) -> FilterFeeder(x))", "score": 0}
{"id": "eqasc_validation_756", "prediction": "all x y.((BaleenWhale(x) & Feeder(y)) -> FilterFeeder(x))", "score": 0}
{"id": "eqasc_validation_756", "prediction": "all x.(Baleen(x) -> FilterFeeder(x))", "score": 0}
{"id": "eqasc_validation_757", "prediction": "all x.((BaleenWhale(x) | Sponge(x)) -> EatsInSameMode(x))", "score": 0}
{"id": "eqasc_validation_757", "prediction": "all x y.((BaleenWhale(x) & Sponge(y)) -> EatsInSameWinds(x,y))", "score": 0}
{"id": "eqasc_validation_757", "prediction": "all x y.((BaleenWhale(x) & Sponge(y)) -> EatsInSameWay(x,y))", "score": 0}
{"id": "eqasc_validation_757", "prediction": "all x y.((BaleenWhale(x) & Sponge(y)) -> EatsInSameManner(x,y))", "score": 0}
{"id": "eqasc_validation_757", "prediction": "all x y.((Baleen(x) | Sponge(y)) -> EatsInAppropriateForms(x,y))", "score": 0}
{"id": "eqasc_validation_757", "prediction": "(EatsInSameWays(baleseen,wolf) | EatsInSameWays(bsph)))", "score": -1}
{"id": "eqasc_validation_757", "prediction": "all x y.((BaleenWhale(x) & Sponge(y)) -> EatInSame(x,y))", "score": 0}
{"id": "eqasc_validation_757", "prediction": "all x.(Baleen(x) & (Baleen(x) | Sponge(x))) -> EatsInSameWay(x))", "score": -1}
{"id": "eqasc_validation_757", "prediction": "all x y.((BaleenWhale(x) & Sponge(y)) -> EatsInSameFactors(x,y))", "score": 0}
{"id": "eqasc_validation_757", "prediction": "all x y.((BaleenWhale(x) & Sponge(y)) -> EatsInSameDistance(x,y))", "score": 0}
{"id": "eqasc_validation_757", "prediction": "all x.((BaléenWhale(x) | Sponge(x)) -> EatsSame(x))", "score": 0}
{"id": "eqasc_validation_757", "prediction": "(Snake(BaleenWhale(Baleen) & Sponge(Sponge))", "score": -1}
{"id": "eqasc_validation_757", "prediction": "all x y.((BaleenWhale(x) | Sponge(y)) -> EatsInSameWay(x))", "score": 0}
{"id": "eqasc_validation_757", "prediction": "all x y.((BaleenWhale(x) & Sponge(y)) -> EatsInSameChances(x,y))", "score": 0}
{"id": "eqasc_validation_757", "prediction": "all x.((BaleenWhale(x) | Sponge(x)) -> EatsInSameWay(x))", "score": 0}
{"id": "eqasc_validation_758", "prediction": "all x.(Mutualism(x) -> (SymbioticRelationshipBetweenSpecies(x) & BenefitsEnough(x,y)))", "score": 0}
{"id": "eqasc_validation_758", "prediction": "all x y.((Mutualism(x) & Species(y)) -> BenefitsBothSpecies(x,y))", "score": 0}
{"id": "eqasc_validation_758", "prediction": "all x.(SharedSpecies(x) -> Benefits(x,y))", "score": 0}
{"id": "eqasc_validation_758", "prediction": "all x.(Mutualism(x) -> (SymbioticRelationship(x) & BiosymbioticRelationshipBenefits(x)))", "score": 4}
{"id": "eqasc_validation_758", "prediction": "all x.((Mutualism(x) -> SymbioticRelationship(x) & BothSpeciesBenefit(x)))", "score": 4}
{"id": "eqasc_validation_758", "prediction": "all x y.((Mutualism(x) & SpicyRelationship(y) & Benefit(y,x)) -> Mutualism(x))", "score": 0}
{"id": "eqasc_validation_758", "prediction": "all x.(Mutualism(x) -> (SymbioticRelationship(x) & BenefitsBothSpecies(x)))", "score": 4}
{"id": "eqasc_validation_758", "prediction": "all x.(Mutualism(x) -> (SymbioticIndividual(x) & BenefitsBothSeasones(x)))", "score": 0}
{"id": "eqasc_validation_758", "prediction": "all x.(Mutualism(x) -> (SymbioticRelationship(x) & Benefit2Species(x)))", "score": 4}
{"id": "eqasc_validation_758", "prediction": "all x.(SymbioticRelationship(x) -> MutualismBenefit(x))", "score": 1}
{"id": "eqasc_validation_758", "prediction": "all x.(Mutualism(x) -> (SymbioticRelationship(x) & BothSpeciesBenefit(x)))", "score": 4}
{"id": "eqasc_validation_758", "prediction": "all x,y.((Mutualism(x) & Species(y)) -> BenefitsBoth(x,y))", "score": -1}
{"id": "eqasc_validation_759", "prediction": "all x.((Dog(x) | Human(x)) -> SymbioticSpecies(x))", "score": 0}
{"id": "eqasc_validation_759", "prediction": "all x.(SymbioticSpecies(x) -> (Dog(x) | Human(x)))", "score": 0}
{"id": "eqasc_validation_759", "prediction": "all x.((Dog(x) | Human(x)) -> Symbiotic[x))", "score": -1}
{"id": "eqasc_validation_759", "prediction": "all x.((Dog(x) | Human(x)) -> Symbiotic(x))", "score": 0}
{"id": "eqasc_validation_759", "prediction": "all x y.((Dog(x) | Human(y)) -> SymbioticSpecies(x))", "score": 0}
{"id": "eqasc_validation_760", "prediction": "all x y z.((Dog(x) & Human(y) & Dog(z)) -> Mutualism(x,y,z))", "score": 0}
{"id": "eqasc_validation_760", "prediction": "all x.(Mutualism(x) -> (exists y.(Dog(y) & Human(y)) & Dog(y) & Human(y))))", "score": -1}
{"id": "eqasc_validation_760", "prediction": "exists x y z.((Dog(x) & Human(y) & Dog(z)) | Human(y)) -> Mutualism(x,y,z))", "score": -1}
{"id": "eqasc_validation_760", "prediction": "all x y.((Dog(x) & Human(y)) -> Mutualism(x,y))", "score": 0}
{"id": "eqasc_validation_760", "prediction": "all x.((Dog(x) | Human(x)) -> Mutualism(x))", "score": 0}
{"id": "eqasc_validation_760", "prediction": "all x y.((Dog(x) & Human(y)) -> MutualismExistsBy(x,y))", "score": 0}
{"id": "eqasc_validation_760", "prediction": "all x y z.((Dog(x) & Human(y) & Dog(z) & Human(z)) -> Mutualism(x,y,z))", "score": 0}
{"id": "eqasc_validation_760", "prediction": "all x y z.((Dog(x) & Human(y) & Dog(z) & Mutualism(x,z)) -> ExistsNebulousism(x,y,z))", "score": 0}
{"id": "eqasc_validation_760", "prediction": "all x y.((Dog(x) | Human(y)) -> Mutualism(x,y))", "score": 0}
{"id": "eqasc_validation_760", "prediction": "all x y z w.((Dog(x) & Human(y) & Dog(z) & Human(w)) -> Mutualism(x,y,z,w))", "score": 0}
{"id": "eqasc_validation_760", "prediction": "all x y z.((Dog(x) & Human(y) & Dog(z)) -> MutualismExistsBetween(x,y,z))", "score": 0}
{"id": "eqasc_validation_760", "prediction": "all x.((Dog(x) & Human(x)) -> Mutualism(x))", "score": 0}
{"id": "eqasc_validation_761", "prediction": "all x.(DomesticatingAnimals(x) -> SymbioticRelationship(x))", "score": 0}
{"id": "eqasc_validation_761", "prediction": "all x.(DomesticationOfAnimals(x) -> SymbioticRelationship(x))", "score": 0}
{"id": "eqasc_validation_761", "prediction": "all x.((AnimalDistriction(x) & SymbioticRelationship(x)) -> Domestication(x))", "score": 0}
{"id": "eqasc_validation_761", "prediction": "all x.(DomesticationDeliveriesAnimals(x) -> SymbioticRelationship(x))", "score": 0}
{"id": "eqasc_validation_761", "prediction": "all x y.((Domestication(x) & Animal(y)) -> SymbioticRelationship(x,y))", "score": 0}
{"id": "eqasc_validation_761", "prediction": "all x.(Domesticating(x) -> SymbioticRelationship(x))", "score": 0}
{"id": "eqasc_validation_761", "prediction": "all x.((AnimalDomestication(x) & SymbioticRelationship(x)) -> Domestication(x))", "score": 5}
{"id": "eqasc_validation_761", "prediction": "all x.(Domestication(x) -> SymbioticRelationship(x))", "score": 0}
{"id": "eqasc_validation_761", "prediction": "all x y.((Animal(x) & Animal(y)) -> DomesticationParticipation(x,y))", "score": 0}
{"id": "eqasc_validation_761", "prediction": "all x y.((Animal(x) & Domestication(x)) -> SymbioticRelationship(y))", "score": 0}
{"id": "eqasc_validation_762", "prediction": "all x y z.((DomesticationInAnimal(x) & Animal(y) & Mutualism(z)) -> Mutualism(x))", "score": 0}
{"id": "eqasc_validation_762", "prediction": "all x.(Domestication(x) -> Mutualism(x))", "score": 0}
{"id": "eqasc_validation_762", "prediction": "all x.(DomesticationOfAnimals(x) -> Mutualism(x))", "score": 0}
{"id": "eqasc_validation_762", "prediction": "all x.(DomesticationOfAnimals(x) -> MutualismExemple(x))", "score": 0}
{"id": "eqasc_validation_762", "prediction": "all x y.((Animal(x) & Domestication(y)) -> Mutualism(x,y))", "score": 0}
{"id": "eqasc_validation_762", "prediction": "all x y z.((AnimalDomestication(x) & Animal(y) & Mutualism(z)) -> Domestication(x,y))", "score": 0}
{"id": "eqasc_validation_762", "prediction": "all x y.((AnimalDomestication(x) & Animal(y)) -> Mutualism(x))", "score": 0}
{"id": "eqasc_validation_762", "prediction": "all x y.((Animal(x) & Animal(y) & Domestication(x,y)) -> Mutualism(x))", "score": 0}
{"id": "eqasc_validation_762", "prediction": "all x y.((Domestication(x) & Animal(y)) -> Mutualism(x,y))", "score": 0}
{"id": "eqasc_validation_763", "prediction": "all x.((AnimalDomestication(x) & Mutualism(x)) -> Domestication(x))", "score": 5}
{"id": "eqasc_validation_763", "prediction": "all x.(DomesticationOfAnimals(x) -> Mutualism(x))", "score": 0}
{"id": "eqasc_validation_763", "prediction": "all x y z.((Births(x) & Animal(y) & Domestication(x,y)) -> MutualismInThisMutualistic(z))", "score": 0}
{"id": "eqasc_validation_763", "prediction": "all x.(DomesticationOfAnimals(x) -> MutualismExample(x))", "score": 0}
{"id": "eqasc_validation_763", "prediction": "all x y.((DomesticationOfAnimals(x) & Mutualism(y)) -> Mutualism(x))", "score": 0}
{"id": "eqasc_validation_763", "prediction": "all x.(DomesticationOfAnimals(x) & Mutualism(x))", "score": 0}
{"id": "eqasc_validation_763", "prediction": "all x y.((DomesticationOfAnimals(x) & Animal(y)) -> Mutualism(x))", "score": 0}
{"id": "eqasc_validation_763", "prediction": "all x y.((DomesticationOfAnimals(x) & Animal(y) & MutualismExample(x,y)) -> Mutualism(x))", "score": 0}
{"id": "eqasc_validation_763", "prediction": "all x y z.((Animal(x) & Animal(y) & Domestication(z)) -> MutualismExemple(x,y))", "score": 0}
{"id": "eqasc_validation_763", "prediction": "all x.((AnimalDomestication(x) & Mutualism(x)) -> Domestication[x))", "score": -1}
{"id": "eqasc_validation_763", "prediction": "all x.((DomesticationOfAnimals(x) & Mutualism(x)) -> Mutualism(x))", "score": 0}
{"id": "eqasc_validation_764", "prediction": "all x.((Coral(x) & Alga(x)) -> SymbioticRelationship(x))", "score": 0}
{"id": "eqasc_validation_764", "prediction": "all x.((Coral(x) & Alga(x)) -> SymbioticRelationship(x,y))", "score": 0}
{"id": "eqasc_validation_764", "prediction": "all x y.((Coral(x) & Alga(y)) -> SymbioticRelationship(x,y))", "score": 0}
{"id": "eqasc_validation_764", "prediction": "exists x.(Coral(x) & Alga(x) & SymbioticRelationship(x))", "score": 0}
{"id": "eqasc_validation_764", "prediction": "exists x y.(Coral(x) & Alga(y) & SymbioticRelationship(x,y))", "score": 0}
{"id": "eqasc_validation_764", "prediction": "exists x y.(Coral(x) & Alga(y) & SymbioticRelationship(x))", "score": 0}
{"id": "eqasc_validation_764", "prediction": "all x.(Coral(x) | Alga(x)) -> StymbioticRelationship(x))", "score": -1}
{"id": "eqasc_validation_764", "prediction": "all x y.((Coral(x) & Alga(y)) -> HasSymbioticRelationship(x,y))", "score": 0}
{"id": "eqasc_validation_765", "prediction": "all x y.((Coral(x) & Alga(y)) -> Mutualism(x))", "score": 0}
{"id": "eqasc_validation_765", "prediction": "all x.((Interaction(x,Coral) & Alga(x)) -> MutualismExample(x))", "score": 0}
{"id": "eqasc_validation_765", "prediction": "all x.((Interaction(x) & Coral(x) & Alga(x)) -> Mutualism(x))", "score": 0}
{"id": "eqasc_validation_765", "prediction": "all x y z.((Interaction(x,y) & Coral(z) & Alga(w)) -> Mutualism(z,w))", "score": 0}
{"id": "eqasc_validation_765", "prediction": "all x y.((Coral(x) & Alga(y)) -> Mutualism(x,y))", "score": 0}
{"id": "eqasc_validation_765", "prediction": "all x.((Interaction(x) & CoralAndAlpha(x)) -> Mutualism(x))", "score": 0}
{"id": "eqasc_validation_765", "prediction": "all x.((Interaction(x) & CoralAndAlga(x)) -> Mutualism(x))", "score": 0}
{"id": "eqasc_validation_765", "prediction": "(Interaction(Coral(alga) & Coral(coral))", "score": -1}
{"id": "eqasc_validation_765", "prediction": "all x.((Interaction(x,copper) & Alga(x)) -> Mutualism(x))", "score": 0}
{"id": "eqasc_validation_765", "prediction": "all x y.((Interaction(x) & Coral(y) & Alga(y)) -> Mutualism(x))", "score": 0}
{"id": "eqasc_validation_766", "prediction": "all x.(Mutualism(x) -> (Association(x,2) & BenefitsSpecies(x,2)))", "score": 0}
{"id": "eqasc_validation_766", "prediction": "all x y z.((Mutualism(x) & SpySpecies(y) & SpySpecies(z)) -> Benefits(x,y,z))", "score": 0}
{"id": "eqasc_validation_766", "prediction": "all x.(Mutualism(x) -> (exists y.(Species(y) & Involves(x,x))))", "score": 0}
{"id": "eqasc_validation_766", "prediction": "all x y.((Mutualism(x) & DifferentSpecies(y)) -> BenefitsSpecies(x,y))", "score": 0}
{"id": "eqasc_validation_766", "prediction": "all x.(Mutualism(x) -> (Association(x) & BenefitsSpecies(x)))", "score": 0}
{"id": "eqasc_validation_766", "prediction": "all x.(Mutualism(x) -> (Assistance(x,two) & BenefitsSpecies(x,one)))", "score": 0}
{"id": "eqasc_validation_766", "prediction": "all x y.((Mutualism(x) & Species(y)) -> Benefits(x,y))", "score": 0}
{"id": "eqasc_validation_766", "prediction": "all x y.((Mutualism(x) & BirdSpecies(y)) -> BenefitsSpecies(x,y))", "score": 0}
{"id": "eqasc_validation_766", "prediction": "all x y.((Mutualism(x) & DiverseSpecies(y) & Benefits(x,y)) -> AssocationsAndBenefits(x,y))", "score": 0}
{"id": "eqasc_validation_766", "prediction": "all x.(Mutualism(x) -> (Association(x,y) & DifferentSpecies(y)) & BenefitsSpecies(x,y)))", "score": -1}
{"id": "eqasc_validation_766", "prediction": "all x.(Mutualism(x) -> (Association(x,x) & BenefitsSpecies(x)))", "score": 0}
{"id": "eqasc_validation_766", "prediction": "all x.(Mutualism(x) -> (exists y.(Species(y) & Assembles(x,y) & Benefits(x))))", "score": 0}
{"id": "eqasc_validation_766", "prediction": "all x.(MutualISm(x) -> (Association(x,2) & BenefitsSpecies(x,2)))", "score": 0}
{"id": "eqasc_validation_766", "prediction": "all x.(Mutualism(x) -> (Association(x,2) & BenefitsSpecies(x,5)))", "score": 0}
{"id": "eqasc_validation_767", "prediction": "all x y z.(SymbioticRelationship(x) -> (AssociationBothDifferentSpecies(x,y) & BenefitsSpecies(x,z)))", "score": 0}
{"id": "eqasc_validation_767", "prediction": "all x y.((SymbioticRelationship(x) &Species(y)) -> Association(x,y))", "score": 0}
{"id": "eqasc_validation_767", "prediction": "all x y.((SymbioticRelationship(x) & DifferentSpecies(y)) -> BenefitsAssociation(x,y))", "score": 0}
{"id": "eqasc_validation_767", "prediction": "all x!(SymbioticRelationship(x) -> (AssociationBetweenSixSpecies(x) & BenefitsBothSpecies(x)))", "score": 0}
{"id": "eqasc_validation_767", "prediction": "all x y z.((SymbioticRelationship(x) & Association(y) &Species(z)) -> BenefitsSpecies(y,z))", "score": 0}
{"id": "eqasc_validation_767", "prediction": "all x y z.((SymbioticRelationship(x) & SpecificSpecies(y) & species(z) & Benefits(y,z)) -> AssociationByTwoSpecies(x,y,z))", "score": 0}
{"id": "eqasc_validation_767", "prediction": "all x y z.((SymbioticRelationship(x) & Species(y) & Species(z)) -> (SymbioticAssociation(x,y) & BenefitsSpecies(y)))", "score": 0}
{"id": "eqasc_validation_767", "prediction": "all x.(SymbioticRelationship(x) -> exists y.(Species(y) & Species(z) & Benefits(x,z)) & BetweenSpecies(x,y,z)))", "score": -1}
{"id": "eqasc_validation_767", "prediction": "all x.(SymbioticRelationship(x) -> (AssociationBetweenSpecies(x) & BenefitsSpecies(x)))", "score": 0}
{"id": "eqasc_validation_767", "prediction": "all x y.((SymbioticRelationship(x) & SpecificSpecies(y)) -> AssociationBetweenSimilarSpecies(x,y))", "score": 0}
{"id": "eqasc_validation_767", "prediction": "all x y.((SymbioticRelationship(x) & ActsParticipantInSpecies(y)) -> BenefitsSpecies(x,y))", "score": 0}
{"id": "eqasc_validation_767", "prediction": "all x y z.((SymbioticRelationship(x) & AssociationOrTwoSpecies(y) & Assemble(x,y,z)) -> BenefitsBothSpecies(x,w))", "score": 0}
{"id": "eqasc_validation_767", "prediction": "all x y z.(SymbioticRelationship(x) -> (Assocation(x,y) & Species(y) & DifferentSpecies(z) & BenefitsSpecies(x,y,z)))", "score": 0}
{"id": "eqasc_validation_767", "prediction": "all x y.((SymbioticRelationship(x) & Association(y,x)) -> BenefitsSpecies(y,x))", "score": 0}
{"id": "eqasc_validation_767", "prediction": "all x.(SymbioticRelationship(x) -> AssociationThroughTwoDifferentSpecies(x) & BenefitsBothSpecies(x))", "score": 0}
{"id": "eqasc_validation_768", "prediction": "all x.((ExtendingSpecies(x,commendations,8)) -> HumanSpecies(x))", "score": 0}
{"id": "eqasc_validation_768", "prediction": "all x.((Eight.(Eight.(Eight.(Equity,Widerman) & Human(e)) -> NumberOfSpecies(x,Equity,Widerman))", "score": -1}
{"id": "eqasc_validation_768", "prediction": "all x y.((LifeformSpecies(x) & AnimalSpecies(y) & 8,40000(x)) -> HumanSpecies(x))", "score": -1}
{"id": "eqasc_validation_768", "prediction": "all x.((House(x) & 8400000SpeciesOfLivingBeings(x)) -> 40000SpeciesOfHumanSpecies(x))", "score": 0}
{"id": "eqasc_validation_768", "prediction": "out of the 84000000 different species of living beings, 400000 have human species.", "score": -1}
{"id": "eqasc_validation_768", "prediction": "all x.((livingBeing(x) & NumberOfSpecies(x,879000)) -> NumberOfSpecies(x,408000))", "score": 0}
{"id": "eqasc_validation_768", "prediction": "all x.(EqualEnough(x,8600000) -> HumanSpecies(x))", "score": 0}
{"id": "eqasc_validation_768", "prediction": "AmongstAllEarths(x,840000) exists z.(HumanSpecies(z) & OutOfEighth(z,8000))", "score": -1}
{"id": "eqasc_validation_768", "prediction": "all x.((LivingSpecies(x) & Species(x,y)) -> HumanSpecies(y))", "score": 0}
{"id": "eqasc_validation_768", "prediction": "all x.((LivesInEngland(x) & 8,400,000Species(x)) -> HumanSpecies(x))", "score": -1}
{"id": "eqasc_validation_768", "prediction": "(OutOfExactEightCounter400,000LivingBeings(x) & HumanSpecies(x))", "score": -1}
{"id": "eqasc_validation_768", "prediction": "all x y.((Knowledge(x) & Population(y) & Exists z.(Habitat(z) & On(x,y)) & On(x,z))) -> HumanSpecies(x))", "score": -1}
{"id": "eqasc_validation_768", "prediction": "(ThereAreHarvardians(r) & OutOfEighteenPercent(t) & LivesWith(it,000)) & -LivingBeing(ch),y) & Human(a))", "score": -1}
{"id": "eqasc_validation_768", "prediction": "all x y.((Earth(x,y) & OutOf(x,y)) -> HumanSpecies(x))", "score": 0}
{"id": "eqasc_validation_768", "prediction": "all x.((LivingBeing(x) & Generation(x) & Generation(x)) -> HumanSpecies(x))", "score": 0}
{"id": "eqasc_validation_768", "prediction": "all x.(HumanSpecies(x) -> OutOfFourTenSizes(x))", "score": 0}
{"id": "eqasc_validation_769", "prediction": "all x.((Mutualism(x) & LivingBeing(x)) -> BenefitsFrom(x,y))", "score": 0}
{"id": "eqasc_validation_769", "prediction": "all x.(Mutualism(x) -> (LivingBeingsBenefit(x) & LivingBeingBenefit(x)))", "score": 0}
{"id": "eqasc_validation_769", "prediction": "all x.exists y.((SymbioticRelationship(x) & LivingBeing(y) & Benefit(x,y)) -> Mutualism(x))", "score": 0}
{"id": "eqasc_validation_769", "prediction": "all x.(Mutualism(x) -> (SymbioticRelationship(x) & LivingBeingBenefit(x,y,z)))", "score": 0}
{"id": "eqasc_validation_769", "prediction": "all x y.((Mutualism(x) & LivingBeing(y)) -> SymbioticRelationshipBenefit(x,y))", "score": 0}
{"id": "eqasc_validation_769", "prediction": "all x y.((Mutualism(x) & LivingBeing(y)) -> BenefitsBoth(x,y))", "score": 0}
{"id": "eqasc_validation_769", "prediction": "all x.(Mutualism(x) -> (SymbioticRelationship(x) & LivingBeing(x)))", "score": 0}
{"id": "eqasc_validation_769", "prediction": "all x.(Mutualism(x) -> (SymbioticRelationship(x) & BothLivingBeamsBenefit(x)))", "score": 0}
{"id": "eqasc_validation_769", "prediction": "all x.(Mutualism(x) -> (SymbioticRelationship(x) & BothLivingBeingsBenefit(x)))", "score": 0}
{"id": "eqasc_validation_769", "prediction": "all x y.((Mutualism(x) & LivingBeing(y)) -> (Benefits(x,y) & Benefits(x,y)))", "score": 0}
{"id": "eqasc_validation_769", "prediction": "all x.(Mutualism(x) -> (SymbioticRelationship(x) & LivingBeingsBenefit(x)))", "score": 0}
{"id": "eqasc_validation_769", "prediction": "all x.(Mutualism(x) -> (SymbioticRelationship(x) & BENEFITSBothLeivingBeings(x)))", "score": 0}
{"id": "eqasc_validation_769", "prediction": "all x.(Mutualism(x) -> (SymbioticRelationship(x) & LivingBeingBenefit(x)))", "score": 0}
{"id": "eqasc_validation_769", "prediction": "all x.(Mutualism(x) -> (LivesInBelts(x) & BenefitsFrom(x)))", "score": 0}
{"id": "eqasc_validation_769", "prediction": "(exists x.(SymbioticRelationship(x) & LivingBeing(x)) & Benefits(x))", "score": 0}
{"id": "eqasc_validation_769", "prediction": "all x.(Mutualism(x) -> (exists y.(LevingBeing(y) & Benefits(x,y))))", "score": 0}
{"id": "eqasc_validation_770", "prediction": "all x y z.((SymbioticCircule(x) & MuschelGills(y) & Mustell(z)) -> LivesIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_770", "prediction": "all x y.((SymbioticMicrobe(x) & Muschel(y)) -> LivesInGills(x,y))", "score": 0}
{"id": "eqasc_validation_770", "prediction": "all x y z.((SymbioticMicob(x) & Muschel(y) & Gill(z)) -> LivesIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_770", "prediction": "all x.(SymbioticMicrobe(x) -> LivesInMushelsGills(x))", "score": 0}
{"id": "eqasc_validation_770", "prediction": "all x.(SymbioticMicrobial(x) -> LivesInMuschelGills(x))", "score": 0}
{"id": "eqasc_validation_770", "prediction": "all x y.((SymbioticMicrobe(x) & Mustell(y)) -> LivesInGills(x,y))", "score": 0}
{"id": "eqasc_validation_770", "prediction": "all x y.((SymbioticMicrobe(x) & MusselGills(y)) -> LivesIn(x,y))", "score": 0}
{"id": "eqasc_validation_770", "prediction": "all x.(SymbioticMicrobe(x) -> LivesInMoldelsGills(x))", "score": 0}
{"id": "eqasc_validation_770", "prediction": "all x.(SymbioticMicrobe(x) -> LivesInMusselGills(x))", "score": 0}
{"id": "eqasc_validation_770", "prediction": "all x y.((Mushels(x) & SymbioticMicrobe(y)) -> LivesInGillsOf(y,x))", "score": 0}
{"id": "eqasc_validation_771", "prediction": "all x.(Mutualism(x) -> (exists y.(Microbe(y) | Muschel(y)) & Benefits(x,y)))", "score": 0}
{"id": "eqasc_validation_771", "prediction": "all x y.((Mutualism(x) & Microbe(y) & Muschel(y)) -> (Benefit(x,y) | Benefit(x,y)))", "score": 0}
{"id": "eqasc_validation_771", "prediction": "all x y.((Mutualism(x) & Microbe(y) & Muschel(y)) -> (Benefit(x,y) & Benefit(x,y)))", "score": 0}
{"id": "eqasc_validation_771", "prediction": "all x y.((Mutualism(x) & Microbe(y) & Muschel(z)) -> Benefits(x,y,z))", "score": 0}
{"id": "eqasc_validation_771", "prediction": "all x y.((Mutualism(x) & Microbe(y) & Muschel(y)) -> AllowedBenefit(x,y))", "score": 0}
{"id": "eqasc_validation_771", "prediction": "((Mutualism(x) & Microbe(x) & Muschel(x)) -> BenefitsBothSpecies(x)))", "score": -1}
{"id": "eqasc_validation_771", "prediction": "all x y z.((Mutualism(x) & Microbe(y) & Muschel(z)) -> (ProneBenefit(x,y) & Borrow(x,z)))", "score": 0}
{"id": "eqasc_validation_771", "prediction": "all x.(Mutrism(x) -> (exists y.(Microbe(y) & InRelationship(x,y)) & BeneficialToBothSpecies(y)))", "score": 0}
{"id": "eqasc_validation_771", "prediction": "all x.(Mutualism(x) -> ((Relationship(x,Microbials) & Relationship(x,Muschels) & Benefits(x,Muschels))))", "score": 0}
{"id": "eqasc_validation_771", "prediction": "all x y.((Mutualism(x) & Microbe(y) & Muschel(y)) -> (Rate(x) & Benefit(x,y)))", "score": 0}
{"id": "eqasc_validation_771", "prediction": "all x.(Mutualism(x) -> (Relationship(x,y) & Microbes(y) & Mussels(y) & BenefitsBothSpecies(x,y)))", "score": 0}
{"id": "eqasc_validation_771", "prediction": "all x.(Mutualism(x) -> (Relationship(x) & (Microbes(x) & Mussels(x)) & Benefit(x)))", "score": 0}
{"id": "eqasc_validation_771", "prediction": "all x y.((Mutualism(x) & Microbe(y) & Muschel(z)) -> BenefitsBothSpecies(x,y,z))", "score": 0}
{"id": "eqasc_validation_771", "prediction": "all x.(Mutualism(x) -> ((Biomicrobial(x) & Biomouse(x) & BeneficiousForBothSpecies(x))))", "score": 0}
{"id": "eqasc_validation_771", "prediction": "all x y z.((Mutualism(x) & Microbe(y) & Mouschel(z) & BenefitsVariety(x,y)) -> Similar(x,z))", "score": 0}
{"id": "eqasc_validation_771", "prediction": "all x y z.(Mutualism(x) -> (Relationship(x,y) & Microbes(y) & Mussels(z) & BenefitsBothSpecies(x,z)))", "score": 0}
{"id": "eqasc_validation_772", "prediction": "(BenefitsFromMutualism(Coral) & BenefitsFromMutualism(Alga))", "score": 0}
{"id": "eqasc_validation_772", "prediction": "all x y z.((Coral(x) & Alga(y) & Mutualism(z)) -> Benefit(x,z))", "score": 0}
{"id": "eqasc_validation_772", "prediction": "all x y.((Coral(x) & Alga(y)) -> BenefitsFromMutualism(x,y))", "score": 0}
{"id": "eqasc_validation_772", "prediction": "(Mutualism(Coral) & Mutualism(Alga))", "score": 0}
{"id": "eqasc_validation_772", "prediction": "all x y.((Coral(x) | Alga(y)) -> BenefitsFromMutualism(x,y))", "score": 0}
{"id": "eqasc_validation_772", "prediction": "(BenefitFromMutualism(Coral) & BenefitFromMutualism(alga))", "score": 0}
{"id": "eqasc_validation_772", "prediction": "((Coral(coral) | Alga(alga))) & Mutualism(alga))", "score": -1}
{"id": "eqasc_validation_772", "prediction": "(BenefitFromMutualism(Coral,Coral) & BenefitFromMutualism(Alga,Coral)) & BenefitFromMutualism(Alga,Coral))", "score": -1}
{"id": "eqasc_validation_772", "prediction": "all x y z.((Coral(x) & Alga(y) & Mutualism(z)) -> (BenefitsFromMutualism(x,y) & BenefitsFromMutualism(y,z)))", "score": 0}
{"id": "eqasc_validation_772", "prediction": "all x.((Coral(x) | Alga(x)) -> BenefitsFromMutualism(x))", "score": 0}
{"id": "eqasc_validation_772", "prediction": "(BenefitFromMutualism(Coral,Mutualism) & BenefitFromMutualism(alga,Coral,Mutualism))", "score": 0}
{"id": "eqasc_validation_772", "prediction": "all x y z.((Coral(x) & Alga(y) & Mutualism(z)) -> (BenefitFrom(x,z) & BenefitFrom(y,z)))", "score": 0}
{"id": "eqasc_validation_772", "prediction": "(BenefitsFromMutualism(Coral,Alga) & BenefitsFromMutualism(Alga,Coral)) & BenefitsFromMutualism(Alga,Coral))", "score": -1}
{"id": "eqasc_validation_773", "prediction": "all x y.((SymbioticRelationship(x) & Common(x)) -> AddsComplexity(x,y))", "score": 0}
{"id": "eqasc_validation_773", "prediction": "all x.(SymbioticRelationship(x) -> (Common(x) & AddsComplexity(x)))", "score": 0}
{"id": "eqasc_validation_773", "prediction": "all x y.((SymbioticRelationship(x) & Bird(y)) -> (Common(x,y) & AddsComplexity(x,y)))", "score": 0}
{"id": "eqasc_validation_773", "prediction": "all x.((SymbioticRelationship(x) & Common(x)) -> AddsToComplexity(x))", "score": 0}
{"id": "eqasc_validation_773", "prediction": "all x.(SymbioticRelationship(x) -> (Common(x) & AddToComplexityOfSpeciesInteraction(x)))", "score": 0}
{"id": "eqasc_validation_773", "prediction": "all x.(SymbioticRelationship(x) -> (Common(x) & AddsToComplexityOfSpeciesInteraction(x)))", "score": 0}
{"id": "eqasc_validation_773", "prediction": "all x.(SymbioticRelationship(x) -> (Common(x) & AddsComplexity(x,SpeciesInteractions)))", "score": 0}
{"id": "eqasc_validation_773", "prediction": "all x.((SymbioticRelationship(x) & Common(x)) -> ComplexSpeciesInteraction(x))", "score": 0}
{"id": "eqasc_validation_773", "prediction": "all x.((SymbioticRelationship(x) & Common(x)) -> AddsComplexityOfSpeciesInteractions(x))", "score": 0}
{"id": "eqasc_validation_773", "prediction": "all x.(SymbioticRelationship(x) -> (Common(x) & AddsComplexityOfSpeciesInteractions(x)))", "score": 5}
{"id": "eqasc_validation_773", "prediction": "all x.(SymbioticRelationship(x) -> (Common(x) & AddToComplexityOfSpeciesInteractions(x)))", "score": 0}
{"id": "eqasc_validation_773", "prediction": "all x.(SymbioticRelationship(x) -> (Common(x) & AddToComplexity(x)))", "score": 0}
{"id": "eqasc_validation_773", "prediction": "all x y.((SymbioticRelationship(x) & SpeciesInteraction(y)) -> (Common(x) & AddsComplexity(x,y)))", "score": 5}
{"id": "eqasc_validation_773", "prediction": "all x y.((SymbioticRelationship(x) & SpeciesInteraction(y)) -> (Complex(x,y) & Common(x) & AddsComplexity(x,y)))", "score": 5}
{"id": "eqasc_validation_773", "prediction": "all x y.((SymbioticRelationship(x) & Society(y)) -> (Common(x) & AddComplexity(x,y)))", "score": 0}
{"id": "eqasc_validation_773", "prediction": "all x.((SymbioticRelationship(x) & Common(x)) -> AddsToComplexityOfSpeciesInteractions(x))", "score": 0}
{"id": "eqasc_validation_774", "prediction": "all x.(Mutualism(x) -> AddsToComplexityOfSpeciesInteractions(x))", "score": 0}
{"id": "eqasc_validation_774", "prediction": "all x.(Mutualism(x) -> ComplexSpeciesInteractions(x))", "score": 0}
{"id": "eqasc_validation_774", "prediction": "all x y.((Mutualism(x) & SpeciesInteraction(y)) -> AddsComplexity(x,y))", "score": 10}
{"id": "eqasc_validation_774", "prediction": "all x.(Mutualism(x) -> (AddsComplexity(x,SpeciesInteraction) & ContainsComplexity(x,SpeciesInteraction)))", "score": 0}
{"id": "eqasc_validation_774", "prediction": "all x y z.((Mutualism(x) & SpeciesInteraction(y) & Complexity(z)) -> AddsTo(x,y,z))", "score": 0}
{"id": "eqasc_validation_774", "prediction": "all x.(Mutualism(x) -> AddsComplexityOfSpeciesInteractions(x))", "score": 5}
{"id": "eqasc_validation_775", "prediction": "all x.(Mammal(x) -> (HasIndividualTerritories(x) & MutuallyBeneficialSymbioticRelationship(x,OxpeckerBird)))", "score": 0}
{"id": "eqasc_validation_775", "prediction": "all x y.((Male(x) & OxpeckerBird(y)) -> IndividualTerritoriesHasMutuallyBeneficialSymbioticRapport(x,y))", "score": 0}
{"id": "eqasc_validation_775", "prediction": "all x.(Male(x) -> (HasImparticularTerritory(x,y) & MutuallyBeneficialSymbioticRelationship(x,z) & OxpeckerBird(x)))", "score": 0}
{"id": "eqasc_validation_775", "prediction": "all x y.((Mammal(x) & OxpeckerBird(y)) -> HasIndividualTerritories(x))", "score": 0}
{"id": "eqasc_validation_775", "prediction": "all x y.((Mammal(x) & OxpeckerBird(y)) -> HasIndividualTerritories(x,y))", "score": 0}
{"id": "eqasc_validation_775", "prediction": "all x.(Male(x) -> HasIndividualTerritories(x,y))", "score": 0}
{"id": "eqasc_validation_775", "prediction": "all x.(Male(x) -> IndividualTerritories(x)) Has(x,y) & MutuallyBeneficialSymbioticRelationship(x))", "score": -1}
{"id": "eqasc_validation_775", "prediction": "all x.((Male(x) & IndividualTerritories(x)) -> MutuallyBeneficialSymbioticRelationship(x,oxpeckerBird))", "score": 0}
{"id": "eqasc_validation_775", "prediction": "all x.(Male(x) -> IndividualTourisms(x))", "score": 0}
{"id": "eqasc_validation_775", "prediction": "all x y z.((Male(x) & IndividualTerritories(y) & Oxpecker(z)) -> (MuchBeneficialSymbioticRelationship(x,y,z) | MutuallyBeneficialSymbioticRelationship(x,y)))", "score": 0}
{"id": "eqasc_validation_775", "prediction": "all x.((Male(x) & IndividualTerritories(x)) -> MutuallyBeneficialSymbioticRelationship(x,OxpeckerBird))", "score": 0}
{"id": "eqasc_validation_775", "prediction": "all x.((Male(x) & OxpeckerBird(x)) -> IndividualTerritories(x))", "score": 0}
{"id": "eqasc_validation_775", "prediction": "all x.(Male(x) -> (Has(x,individualTerritories) & MutuallyBeneficialSymbioticRelationship(x,OxpeckerBird)))", "score": 0}
{"id": "eqasc_validation_775", "prediction": "all x.((Male(x) & IndividualTourisms(x) & MutuallyBeneficialSymbioticRelationship(x,y,z)) -> (Has(x,z) | Has(x,y))))", "score": -1}
{"id": "eqasc_validation_775", "prediction": "all x y.((Male(x) & Oxpecker(y)) -> IndividualTerritories(x,y))", "score": 0}
{"id": "eqasc_validation_775", "prediction": "all x.(Male(x) -> HasIndividualTerritory(x)) HasMutuallyBeneficialSymbioticRelationshipWithOxpeckerBird(x))", "score": -1}
{"id": "eqasc_validation_776", "prediction": "all x.(OxpeckerBird(x) -> (HelpsSpeciesBenefit(x) & Benefits(x)))", "score": 0}
{"id": "eqasc_validation_776", "prediction": "all x y z.((Oxpecker(x) & Bird(y) & Species(z)) -> HelpsBenefit(x,y,z))", "score": 0}
{"id": "eqasc_validation_776", "prediction": "all x y z.((OxpeckerBird(x) & Bird(y) & PlantSpecies(z)) -> HelpsBenefit(x,z))", "score": 0}
{"id": "eqasc_validation_776", "prediction": "all x y.((OxpeckerBird(x) & Bird(y)) -> (HelpsOtherSpecies(x,y) & Beneficiate(y,x)))", "score": 0}
{"id": "eqasc_validation_776", "prediction": "all x.(OxpeckerBird(x) -> (HelpsBenefitNation(x) | HelpsBenefitSpecies(x)))", "score": 0}
{"id": "eqasc_validation_776", "prediction": "all x.(OxpeckerBird(x) -> (HelpsAdditionalSpeciesBenefit(x) & HelpsSpeciesBenefit(x)))", "score": 0}
{"id": "eqasc_validation_776", "prediction": "all x y.((OxpeckerBird(x) & Sparrow(y)) -> HelpsBenefitOtherSpecies(x,y))", "score": 0}
{"id": "eqasc_validation_776", "prediction": "all x.(OxpeckerBird(x) -> HelpsAlternativeSpeciesBenefit(x))", "score": 0}
{"id": "eqasc_validation_776", "prediction": "all x.(OxpeckerBird(x) -> HelpBenefitSpecies(x,y))", "score": 0}
{"id": "eqasc_validation_776", "prediction": "all x y.((OxpeckerBird(x) & Bird(y)) -> HelpsSpeciesBenefit(x,y))", "score": 0}
{"id": "eqasc_validation_776", "prediction": "all x y.((Oxpecker(x) & Bird(y)) -> HelpsBenefit(x,y))", "score": 0}
{"id": "eqasc_validation_776", "prediction": "all x.(OxpeckerBird(x) -> HelpsBenefitInotherSpecies(x))", "score": 0}
{"id": "eqasc_validation_776", "prediction": "all x y z.((OxpeckerBird(x) & Oxpecker(y) & Bird(z)) -> (HelpsBenefit(x,z) | HelpsBenefit(y,z)))", "score": 0}
{"id": "eqasc_validation_776", "prediction": "all x y.((OxpeckerBird(x) & OtherSpecies(y)) -> HelpsBenefit(x,y))", "score": 0}
{"id": "eqasc_validation_776", "prediction": "all x y.((OxpeckerBird(x) & Species(y)) -> AidsBenefit(x,y))", "score": 0}
{"id": "eqasc_validation_777", "prediction": "all x.(SymbioticRelationship(x) -> (FoundWithCucumbers(x) & FoundWithCorn(x)))", "score": 0}
{"id": "eqasc_validation_777", "prediction": "all x.(Cuckoo(x) -> SymbioticRelationship(x))", "score": 0}
{"id": "eqasc_validation_777", "prediction": "all x.((Currant(x) & Corn(x)) -> SymbioticRelationship(x))", "score": 0}
{"id": "eqasc_validation_777", "prediction": "exists x.(SymbioticRelationship(x) & FoundWith(x,Cucumbers) & FoundWith(x,Corn))", "score": 0}
{"id": "eqasc_validation_777", "prediction": "(exists x.(SymbioticRelationship(x) & With(x,cucumber) & Has(x,corn)))", "score": 0}
{"id": "eqasc_validation_777", "prediction": "all x y.((Cucumber(x) & Corn(y)) -> SymbioticRelationship(x,y))", "score": 0}
{"id": "eqasc_validation_777", "prediction": "all x y z.(SymbioticRelationship(x,y) -> (Cucumbers(y) | Corn(z)))", "score": 0}
{"id": "eqasc_validation_777", "prediction": "all x y z.((SymbioticRelationship(x) & Cucumber(y) & Corn(z)) -> FoundWith(x,y,z))", "score": 0}
{"id": "eqasc_validation_777", "prediction": "exists x.(SymbioticRelationship(x) -> (Cucumbers(x) & Corn(x)))", "score": 0}
{"id": "eqasc_validation_777", "prediction": "exists x.(SymbioticRelationship(x) & Finds(x,Cucumbers,Corn))", "score": 0}
{"id": "eqasc_validation_777", "prediction": "all x y.((Rubix(x) & Cucumber(y) & Corn(y)) -> Symbiotic(x))", "score": 0}
{"id": "eqasc_validation_777", "prediction": "all x.((Cucumber(x) & Corn(x)) -> SymbioticRelationship(x))", "score": 1}
{"id": "eqasc_validation_777", "prediction": "all x.(SymbioticRelationship(x) -> (exists y.(Cream(y) & Sunflower(z))) & FoundWith(x,y,z)))", "score": -1}
{"id": "eqasc_validation_777", "prediction": "exists x y.(SymbioticRelationship(x) & Cucumber(y) & Corn(y))", "score": 0}
{"id": "eqasc_validation_778", "prediction": "all x y.((Cucumber(x) & Corn(y) & -Mutualism(x,y)) -> Beneficiaries(x,y))", "score": 0}
{"id": "eqasc_validation_778", "prediction": "all x y.((Cucumber(x) & Corn(y)) -> (HasMutualism(x,y) & BenefitsBothSpecies(x,y)))", "score": 0}
{"id": "eqasc_validation_778", "prediction": "all x.((Cucumber(x) & Corn(x)) -> (HasMutualism(x) & BenefitsSpecies(x)))", "score": 0}
{"id": "eqasc_validation_778", "prediction": "(BothSpecies(Cucumber) & Species(Corn) -> BenefitsMutualism(Curcumin,Corn)))", "score": -1}
{"id": "eqasc_validation_778", "prediction": "all x y.((Cucumber(x) & Corn(y)) -> (BothSpecies(x,y) & Mutualism(y)))", "score": 0}
{"id": "eqasc_validation_778", "prediction": "all x.((Cucumber(x) | Corn(x)) -> (PossessesMutualism(x) & BenefitsBothSpecies(x)))", "score": 0}
{"id": "eqasc_validation_778", "prediction": "all x.((Cucumber(x) & Corn(x)) -> (HasMutualism(x) & BenefitsBothSpecies(x)))", "score": 0}
{"id": "eqasc_validation_778", "prediction": "all x y.((Cucumber(x) & Corn(y)) -> (PossibleForMutualism(x,y) & BenefitsForBothSpecies(x,y)))", "score": 0}
{"id": "eqasc_validation_778", "prediction": "all x y.((Cucumber(x) & Corn(y)) -> (HasMutualISm(x,y) & Benefits(y,x)))", "score": 0}
{"id": "eqasc_validation_778", "prediction": "all x y.((Cucumber(x) & Corn(y)) -> (PossessesMutualism(x,y) & Benefits(y,x)))", "score": 0}
{"id": "eqasc_validation_778", "prediction": "all x y.((Cucumber(x) & Corn(y)) -> (PossessesMutualism(x,y) & BenefitsBothSpecies(y,x)))", "score": 0}
{"id": "eqasc_validation_778", "prediction": "all x y.((Cucumber(x) & Corn(y)) -> (HasMutualism(x,y) & HasMutualism(y,x)))", "score": 0}
{"id": "eqasc_validation_778", "prediction": "all x y.((Cucumber(x) | Corn(y)) -> (HasMutualism(x,y) & BenefitsFrom(x,y)))", "score": 0}
{"id": "eqasc_validation_778", "prediction": "((Cucumber(c) & Corn(c)) -> BenefitsMutualism(c))", "score": 0}
{"id": "eqasc_validation_778", "prediction": "all x.((Cucumber(x) & Corn(x)) -> HasMutualism(x))", "score": 0}
{"id": "eqasc_validation_778", "prediction": "all x.((Cucumber(x) & Corn(x)) -> MutualismBenefit(x))", "score": 1}
{"id": "eqasc_validation_779", "prediction": "all x.(Adolescence(x) -> EndOfLife(x))", "score": 0}
{"id": "eqasc_validation_779", "prediction": "all x.(Adolescence(x) -> TheLutherOfLife(x))", "score": 0}
{"id": "eqasc_validation_779", "prediction": "All x.(Adolescence(x) -> EndOfLife(x))", "score": -1}
{"id": "eqasc_validation_779", "prediction": "all x.(Adolescence(x) -> LastStageOfLifePreviousAdulthood(x))", "score": 0}
{"id": "eqasc_validation_779", "prediction": "all x.(Adolescence(x) -> LastStageOfLife(x))", "score": 0}
{"id": "eqasc_validation_779", "prediction": "all x.(Adolescence(x) -> (LeastStageOfLife(x) & BeforeAdulthood(x)))", "score": 0}
{"id": "eqasc_validation_779", "prediction": "all x.(Adolescence(x) -> EnoughAfterAdulthood(x))", "score": 0}
{"id": "eqasc_validation_779", "prediction": "all x.(Adolescence(x) -> (EndStageOfLife(x) & BeforeAdulthood(x)))", "score": 0}
{"id": "eqasc_validation_779", "prediction": "all x.(Adolescence(x) -> (LastStageOfLife(x) & BeforeAdulthood(x)))", "score": 0}
{"id": "eqasc_validation_779", "prediction": "(LatherOfAdolescence(adolescence) -> Adulthood(a))", "score": 0}
{"id": "eqasc_validation_779", "prediction": "all x.(Adolescence(x) -> (FourthStageOfLife(x) & BeforeAdulthood(x)))", "score": 0}
{"id": "eqasc_validation_779", "prediction": "all x.(Adolescence(x) -> (LastStageOfLifeBeforeAdulthood(x)))", "score": 0}
{"id": "eqasc_validation_779", "prediction": "all x.(Adolescence(x) -> (FourthStageOfLife BeforeAdulthood(x)))", "score": -1}
{"id": "eqasc_validation_779", "prediction": "all x.(Adolescence(x) -> LifeEndStage(x))", "score": 0}
{"id": "eqasc_validation_780", "prediction": "all x.(Adolescence(x) -> RapidChangesOccur(x))", "score": 0}
{"id": "eqasc_validation_780", "prediction": "all x.((Adolescence(x) & RapidChanges(x)) -> Adolescent(x))", "score": 0}
{"id": "eqasc_validation_780", "prediction": "all x.(Adolescence(x) -> RapidChange(x))", "score": 0}
{"id": "eqasc_validation_780", "prediction": "all x.((Adolescence(x) & Adolescence(y)) -> RapidChangesOccur.(Adolescence(y) | Adolescence(z)))", "score": -1}
{"id": "eqasc_validation_780", "prediction": "all x y.((Adolescence(x) & Adolescence(y)) -> RapidChangesOccur(x,y))", "score": 0}
{"id": "eqasc_validation_780", "prediction": "all x.((DiverseChange(x) & Adolescence(x)) -> RapidChange(x))", "score": 0}
{"id": "eqasc_validation_780", "prediction": "all x.((Adolescence(x) & Adolescence(x)) -> RapidChangesOccur(x))", "score": 0}
{"id": "eqasc_validation_780", "prediction": "all x.(Adolescence(x) -> RapidChanges(x))", "score": 0}
{"id": "eqasc_validation_780", "prediction": "all x.((Adolescence(x) & RapidChange(x)) -> Adolescence(x))", "score": 0}
{"id": "eqasc_validation_780", "prediction": "all x.(Adolescence(x) -> -RapidChangesOccur(x))", "score": 0}
{"id": "eqasc_validation_780", "prediction": "all x.((Adolescence(x) & Adolescence(y)) -> RapidChangesOccurs(x))", "score": 0}
{"id": "eqasc_validation_780", "prediction": "all x.(Adolescence(x) -> (RapidChanges(x) & IntoAdolescence(x)))", "score": 0}
{"id": "eqasc_validation_780", "prediction": "(RapidChanges(adolescence) -> MovesInto(adolescence))", "score": 0}
{"id": "eqasc_validation_781", "prediction": "all x y.((TenthOfLife(x) & LifeMature(y)) -> RapidChangesOccursInSpecialStages(x,y))", "score": 0}
{"id": "eqasc_validation_781", "prediction": "all x y z.((RecentChange(x) & Age(y) & StagePeriod(z)) -> (OccursInEndOfLife(x,y,z) & EndOfLife(y)))", "score": 0}
{"id": "eqasc_validation_781", "prediction": "all x:(RapidChange(x) & LifeStageEnoughFromAdulthood(x)) -> RapidChange(x))", "score": -1}
{"id": "eqasc_validation_781", "prediction": "all x y.((RapidChange(x) & StageOfLife(y) & Age(z)) -> OccursIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_781", "prediction": "all x.((RapidChange(x) & StageOfLife(x)) -> Adulthood(x))", "score": 0}
{"id": "eqasc_validation_781", "prediction": "all x.(RapidChanges(x) -> HappensInLengthOfLifeBeforeAdulthood(x))", "score": 0}
{"id": "eqasc_validation_781", "prediction": "all x y.((RapidChange(x) & StageOfLife(x)) -> OccursInLastStageOfLife(x,y))", "score": 0}
{"id": "eqasc_validation_781", "prediction": "all x.((RapidChange(x) & -Adulthood(x)) -> OccursInTheLastStageOfLife(x))", "score": 0}
{"id": "eqasc_validation_781", "prediction": "all x y z.((RapidChange(x) & StageOfLife(y) & AdulthoodStage(z) & ExistsBefore(y,z)) -> OccursInLastStageOfLife(y,z))", "score": 0}
{"id": "eqasc_validation_781", "prediction": "all x y.((Growth(x) & Stage1(y) & LifeStage(y)) -> RapidChangesOccursInEndOfLife(y,x))", "score": 0}
{"id": "eqasc_validation_781", "prediction": "all x y.((RapidChange(x) & LifeStyleArea(y)) -> WhenAlreadyAdult(x,y))", "score": 0}
{"id": "eqasc_validation_781", "prediction": "all x y.((RapidChange(x) & StageOfLife(y) & Adulthood(x)) -> OccursInLastStage(x,y))", "score": 0}
{"id": "eqasc_validation_781", "prediction": "all x.((RapidChange(x) & LifePostadulthoodStage(x)) -> Occurs(x))", "score": 0}
{"id": "eqasc_validation_781", "prediction": "all x.((RapidChanges(x) & StageOfLife(x,adulthood)) -> HappensInNextStageOfLife(x,adulthood))", "score": 0}
{"id": "eqasc_validation_781", "prediction": "all x y z.((RapidChange(x) & StageOfLife(y) & Age(z)) -> OccursInLastStageOfLife(y,z))", "score": 0}
{"id": "eqasc_validation_781", "prediction": "all x y z.((RapidChange(x) & StageOfLife(y) & Adulthood(z)) -> -OccursInLastStageOfLife(x,y,z))", "score": 0}
{"id": "eqasc_validation_782", "prediction": "all x.((StageOfLife(x) & Adulthood(x)) -> PubertyBegins(x))", "score": 0}
{"id": "eqasc_validation_782", "prediction": "all x.(Adulthood(x) -> EndStageOfLife(x))", "score": 0}
{"id": "eqasc_validation_782", "prediction": "all x.(Ends(x,Adulthood) -> Puberty(x))", "score": 0}
{"id": "eqasc_validation_782", "prediction": "the last stage of life before adulthood begins with puberty.", "score": -1}
{"id": "eqasc_validation_782", "prediction": "all x.((EndStageOfLife(x) & Adulthood(x) & EmptiesPuberty(x)) -> LastStageOfLife(x))", "score": 0}
{"id": "eqasc_validation_782", "prediction": "all x.(Adult(x) -> EndStageOfLife(x))", "score": 0}
{"id": "eqasc_validation_782", "prediction": "all x.((Adult(x) & Puberty(x)) -> LastStageOfLifeBefore(x,adult))", "score": 0}
{"id": "eqasc_validation_782", "prediction": "(LastStageOfLifeBeforeAdulthood(a) & FirstStageOfLife(b) & Puberty(c))", "score": 0}
{"id": "eqasc_validation_782", "prediction": "all x.((Adult(x) & Puberty(x)) -> LastStageOfLife(x))", "score": 0}
{"id": "eqasc_validation_782", "prediction": "all x.((Puberty(x) & SequelOfLife(x)) -> MayBeAdult(x))", "score": 0}
{"id": "eqasc_validation_782", "prediction": "all x y.((AdultStage(x) & Adulthood(y)) -> (EndsWithPuberty(x,y)))", "score": 0}
{"id": "eqasc_validation_782", "prediction": "all x.((PuptasterTerm(x) & Adulthood(x)) -> EndsInPuptancy(x))", "score": 0}
{"id": "eqasc_validation_782", "prediction": "all x y.((EndStageOfLife(x) & Adulthood(y)) -> PubertyBorrows(x,y))", "score": 0}
{"id": "eqasc_validation_782", "prediction": "all x.((EndedStageOfLife(x) & Adulthood(x)) -> Puberty(x))", "score": 0}
{"id": "eqasc_validation_783", "prediction": "all x.(Adolescent(x) -> ComplexLife(x))", "score": 0}
{"id": "eqasc_validation_783", "prediction": "all x y.((Adolescent(x) & Adolescent(y)) -> ComplexLife(x,y))", "score": 0}
{"id": "eqasc_validation_783", "prediction": "all x.(Adolescent(x) -> LifeComplex(x))", "score": 0}
{"id": "eqasc_validation_783", "prediction": "all x.((Adolescent(x) & VeryComplex(x)) -> (Life(x) & VeryComplex(x)))", "score": 0}
{"id": "eqasc_validation_783", "prediction": "all x.(Adolescent(x) -> VeryComplexLife(x))", "score": 0}
{"id": "eqasc_validation_783", "prediction": "exists x.(Adolescent(x) & ComplexLife(x))", "score": 0}
{"id": "eqasc_validation_784", "prediction": "all x y.((LateStageOfLife(x) & Adulthood(y)) -> Complex(x,y))", "score": 0}
{"id": "eqasc_validation_784", "prediction": "all x.((LeastStageOfLife(x) & Adulthood(x)) -> VeryComplex(x))", "score": 0}
{"id": "eqasc_validation_784", "prediction": "all x.(LastStageOfLife(x) -> (AgeBeforeAdulthood(x) & VeryComplex(x)))", "score": 0}
{"id": "eqasc_validation_784", "prediction": "all x.(AdultLifePath(x) -> Complex(x))", "score": 0}
{"id": "eqasc_validation_784", "prediction": "all x.((LextStageOfLife(x) & BeforeAdventhood(x)) -> VeryComplex(x))", "score": 0}
{"id": "eqasc_validation_784", "prediction": "all x.z.((LeastStageOfLife(x) & Adulthood(z)) -> VeryComplex(x,z))", "score": -1}
{"id": "eqasc_validation_784", "prediction": "all x.(LateStageOfLifePreceedingAdulthood(x) -> VeryComplex(x))", "score": 0}
{"id": "eqasc_validation_784", "prediction": "all x.(RentalEdgeBeforeAdulthood(x) -> VeryComplex(x))", "score": 0}
{"id": "eqasc_validation_784", "prediction": "all x.((LivesInStage(x) & Adulthood(x)) -> Complex(x))", "score": 0}
{"id": "eqasc_validation_784", "prediction": "the,AncientStage(AlternativeStage) - VeryComplexVisualStage(Adulthood)", "score": -1}
{"id": "eqasc_validation_784", "prediction": "all x.((StageOfLife(x) & BeforeAdulthood(x)) -> VeryComplex(x))", "score": 0}
{"id": "eqasc_validation_784", "prediction": "all x y.((LextStageOfLifePasternhood(x) & Adulthood(y)) -> Complex(x))", "score": 0}
{"id": "eqasc_validation_784", "prediction": "all x.((PastOfLife(x) & Tolerance(x)) -> VeryComplex(x))", "score": 0}
{"id": "eqasc_validation_784", "prediction": "all x.(PorentOfLife(x) -> VeryComplex(x))", "score": 0}
{"id": "eqasc_validation_784", "prediction": "all x y.((LifeStage(x) & Adulthood(y)) -> VeryComplex(x,y))", "score": 0}
{"id": "eqasc_validation_784", "prediction": "all x y.((LifeStage(x) & Adulthood(y)) -> Complex(x,y))", "score": 0}
{"id": "eqasc_validation_785", "prediction": "longafterpuberty,adultLifeStage(x)", "score": -1}
{"id": "eqasc_validation_785", "prediction": "all x.((Pupil(x) & StartsAdultLifeStage(x)) -> AfterPupilhood(x))", "score": 0}
{"id": "eqasc_validation_785", "prediction": "all x.((Pupilhood(x) & AdultLife(x)) -> BeginsWithinJustBefore(x,pupilhood))", "score": 0}
{"id": "eqasc_validation_785", "prediction": ".(Pupilhood() & AdultLife() & WithinMorning())", "score": -1}
{"id": "eqasc_validation_785", "prediction": "all x.((Puperhood(x) & AdultLife(x)) -> Assembles(x,puberty))", "score": 0}
{"id": "eqasc_validation_785", "prediction": "all x.((Pupberty(x) & AdultLifeStage(x)) -> Very SoonAfter(x,Pupberty))", "score": -1}
{"id": "eqasc_validation_785", "prediction": "soonafterpuberty, the adultlifestage begins.", "score": -1}
{"id": "eqasc_validation_785", "prediction": "all x.((Pumbery(x) & AdultLifeStage(x)) -> WellAfter(x,y))", "score": 0}
{"id": "eqasc_validation_785", "prediction": "soonAfterPumbria,adultLifeEnds(a))", "score": -1}
{"id": "eqasc_validation_785", "prediction": "all x.((Puperhood(x) & AdultLife(x)) -> Becomes(x))", "score": 0}
{"id": "eqasc_validation_785", "prediction": "soonafterPumberty, adultLifeStage((x) & Starts(x))", "score": -1}
{"id": "eqasc_validation_785", "prediction": "somewhat soon after puberty begins the AdultLifeStudy.", "score": -1}
{"id": "eqasc_validation_785", "prediction": "all x y.((Puperhood(x) & AdultLife(y)) -> BeginsNow(y))", "score": 0}
{"id": "eqasc_validation_785", "prediction": "soonafter(puberty,adultStage)", "score": 0}
{"id": "eqasc_validation_785", "prediction": "all x.(Puberty(x) -> AdultLifeStage(x))", "score": 0}
{"id": "eqasc_validation_785", "prediction": "all x y.((Pupil(x) & AdultStage(y)) -> IdentifiesAfterPupilhood(y,x))", "score": 0}
{"id": "eqasc_validation_786", "prediction": "all x.(Pupil(x) -> EndsStageOfLifeBeforeAdulthood(x))", "score": 0}
{"id": "eqasc_validation_786", "prediction": "all x.(Pupilhood(x) -> EndOfFirstStage(x))", "score": 0}
{"id": "eqasc_validation_786", "prediction": "all x.(Pupilhood(x) -> EndsFourthStageOfLife(x))", "score": 0}
{"id": "eqasc_validation_786", "prediction": "all x y.((Pupil(x) & Adulthood(y)) -> EndsOfStage(x,y))", "score": 0}
{"id": "eqasc_validation_786", "prediction": "all x.(Puberty(x) -> EndsStageOfLife(x))", "score": 0}
{"id": "eqasc_validation_786", "prediction": "all x y.((Pupilhood(x) & LifeStage(y)) -> StartsBeforeAdulthood(x,y))", "score": 0}
{"id": "eqasc_validation_786", "prediction": "all x.(Pupilhood(x) -> LastStageOfLife(x))", "score": 0}
{"id": "eqasc_validation_786", "prediction": "all x y.((Pupil(x) & Adulthood(y)) -> CompleteStageOfLife(x,y))", "score": 0}
{"id": "eqasc_validation_786", "prediction": "all x.(Pupilhood(x) -> EndsLongestStageBeforeAdulthood(x))", "score": 0}
{"id": "eqasc_validation_786", "prediction": "all x y.((Pupilhood(x) & Adulthood(y)) -> EndsStageOfLife(x,y))", "score": 0}
{"id": "eqasc_validation_786", "prediction": "all x.(Puberty(x) -> TheLastStageOfLifeBeforeadulthood(x))", "score": 0}
{"id": "eqasc_validation_786", "prediction": "all x.(Puperhood(x) -> EndsStageOfLife(x))", "score": 0}
{"id": "eqasc_validation_786", "prediction": "all x.(Pupertainty(x) -> EndsStageOfLifeAfterAdulthood(x))", "score": 0}
{"id": "eqasc_validation_786", "prediction": "all x.(Pupilhood(x) -> EndsAgeBeforeAdulthood(x))", "score": 0}
{"id": "eqasc_validation_786", "prediction": "(EndsLiftOfLife(puberty) & Adulthood(i))", "score": 0}
{"id": "eqasc_validation_786", "prediction": "all x.(Puperty(x) -> (EndsEndStage(x,adulthood)))", "score": 0}
{"id": "eqasc_validation_787", "prediction": "all x y z.((StageOfLife(x) & Adulthood(y) & Puberty(z)) -> FirstStageOfLifeBetween(x,y,z))", "score": 0}
{"id": "eqasc_validation_787", "prediction": "all x y.((CulturalStage(x) & Adulthood(y)) -> BirthOf(x,y))", "score": 0}
{"id": "eqasc_validation_787", "prediction": "all x.(IsPubertyBeforeAdulthood(x) -> EndStageOfLife(x))", "score": 0}
{"id": "eqasc_validation_787", "prediction": "all x y.((HasPupardy(x) & ToEnjoy(y,Childhood)) -> LastStageOfLife(x,y))", "score": 0}
{"id": "eqasc_validation_787", "prediction": "all x.((StageOfLife(x) & AdulthoodEndsWithPuberty(x)) -> EndsWithPuberty(x))", "score": 0}
{"id": "eqasc_validation_787", "prediction": "all x.((StageOfLifeBeforeAdulthood(x) & Puberty(x)) -> EndsWithPuperhood(x))", "score": 0}
{"id": "eqasc_validation_787", "prediction": "all x.((LifeStage(x) & AdulthoodEndsWithPuberty(x)) -> LastStageOfLife(x))", "score": 0}
{"id": "eqasc_validation_787", "prediction": "(LetsEndStageOfLifeBeforeAdult(s) & StartsPuberty(s))", "score": 0}
{"id": "eqasc_validation_787", "prediction": "all x.((Pupilhood(x) & LastStageOfLife(x)) -> CommencesWithPuberty(x))", "score": 0}
{"id": "eqasc_validation_787", "prediction": "all x.((Puberty(x) & LastLifeStage(x)) -> AdulthoodEndsWithPuberty(x))", "score": 0}
{"id": "eqasc_validation_787", "prediction": "all x.(CelestialEngagement(x) -> (EndedEndStageOfLife(x,Adulthood) & Puberty(x)))", "score": 0}
{"id": "eqasc_validation_787", "prediction": "all x y z.((Engagement(x) & Adulthood(y) & Puberty(z)) -> CompleteStageOfLife(x,y,z))", "score": 0}
{"id": "eqasc_validation_787", "prediction": "all x.((StageOfLife(x) & Age(x) & EndStageOfLife(x,puberty)) -> BeginningStageOfLife(x,puberty))", "score": 0}
{"id": "eqasc_validation_787", "prediction": "all x.((StageOfLife(x) & AdulthoodEndsWithPuberty(x)) -> EndStageOfLife(x))", "score": 0}
{"id": "eqasc_validation_787", "prediction": "all x.((StageOfLife(x) & Adulthood(x)) -> PubertyBeginsWithPuberty(x))", "score": 0}
{"id": "eqasc_validation_787", "prediction": "all x y.((StageOfLife(x) & Adulthood(y)) -> (EndsWithPupiberty(x,y) & EntersWithPupiancy(x,y)))", "score": 0}
{"id": "eqasc_validation_788", "prediction": "all x.(Adolescence(x) -> pivotalStage(x))", "score": 0}
{"id": "eqasc_validation_788", "prediction": "all x.(Dollarescence(x) -> HumanDevelopmentPivotalStage(x))", "score": 0}
{"id": "eqasc_validation_788", "prediction": "all x.(Adolescence(x) -> PivotalStageOfHumanDevelopment(x))", "score": 0}
{"id": "eqasc_validation_788", "prediction": "all x.(Adolescence(x) -> (PivotalStage(x) & HumanDevelopment(x)))", "score": 0}
{"id": "eqasc_validation_788", "prediction": "all x.(Adolescence(x) -> (PivotalStageOfHumanDevelopment(x) & Adolescence(x)))", "score": 0}
{"id": "eqasc_validation_788", "prediction": "all x.(Adolescence(x) -> (PivotalStageOfHumanDevelopment(x)))", "score": 0}
{"id": "eqasc_validation_788", "prediction": "all x y.((Adolescence(x) & HumanDevelopment(y)) -> Killed(x,y))", "score": 0}
{"id": "eqasc_validation_788", "prediction": "all x y.((Adolescence(x) & HumanDevelopment(y)) -> PivotalStage(x,y))", "score": 0}
{"id": "eqasc_validation_788", "prediction": "all x.(Adolescence(x) -> PilgrimageOfHumanDevelopment(x))", "score": 0}
{"id": "eqasc_validation_789", "prediction": "all x.((FourthStagePreceedingAdulthood(x) & PivotalLaterTenureOfHumanDevelopment(x)) -> ChildElevenProgress(x))", "score": 0}
{"id": "eqasc_validation_789", "prediction": "all x.((LastStageBeforeAdulthood(x) & EarlyHumanDevelopment(x)) -> ThePionalLaterStage(x))", "score": 0}
{"id": "eqasc_validation_789", "prediction": "all x.((FourthStageBeforeAdulthood(x) & EndsYoung(x)) -> ThePivotalFollowingStageOfHumanDevelopment(x))", "score": 0}
{"id": "eqasc_validation_789", "prediction": "all x.((LivesBeforeAdulthood(x) & PivotalFocusedDevelopment(x)) -> LeftStage(x))", "score": 0}
{"id": "eqasc_validation_789", "prediction": "all x.((VorAdulthood(x) & ApproximateProgress(x)) -> LaterHumanDevelopment(x))", "score": 0}
{"id": "eqasc_validation_789", "prediction": "all x.((PilotalLaterDevelopment(x) & BeforeAdulthood(x)) -> LastStage(x))", "score": 0}
{"id": "eqasc_validation_789", "prediction": "all x.((LullVorAdultment(x) & HumanDevelopment(x)) -> FinalStagePivotalForDevelopment(x))", "score": 0}
{"id": "eqasc_validation_789", "prediction": "all x.((LendRiver(x) & Adulthood(x)) -> PivotalTeresionalDevelopment(x))", "score": 0}
{"id": "eqasc_validation_789", "prediction": "all x.(PioneerStage(x) -> (EndPast(x) & Adulthood(x)))", "score": 0}
{"id": "eqasc_validation_789", "prediction": "all x y.((LastStageAvantAdulthood(x) & HumanDevelopment(y)) -> ThePivotalLateStage(x,y))", "score": 0}
{"id": "eqasc_validation_789", "prediction": "all x.((EndStage(x) & Adulthood(x)) -> PitchicalStage(x,HumanDevelopment))", "score": 0}
{"id": "eqasc_validation_789", "prediction": "all x.((EntranceCast(x) & AdulthoodStage(x)) -> LaterEarthStageOfHumanDevelopment(x))", "score": 0}
{"id": "eqasc_validation_789", "prediction": "all x.(FollowStagePreparingAdulthood(x) -> PivotalLaterStageOfHumanDevelopment(x))", "score": 0}
{"id": "eqasc_validation_789", "prediction": "all x.((Stage(x) & BetweenAdulthood(x)) -> PillowalLaterStageOfHumanDevelopment(x))", "score": 0}
{"id": "eqasc_validation_789", "prediction": "all x.((LastStage(x) & Adulthood(x)) -> PivotalLaterStageOfHumanDevelopment(x))", "score": 0}
{"id": "eqasc_validation_789", "prediction": "all x.(PivotalLaterEssentialStageOfHumanDevelopment(x) -> AdultRequirement(x))", "score": 0}
{"id": "eqasc_validation_790", "prediction": "all x.((Adolescence(x) & Fascinating(x) & Crazy(x)) -> TimeOfLife(x))", "score": 0}
{"id": "eqasc_validation_790", "prediction": "all x.(Adolescence(x) -> (Funny(x) & Crazy(x)))", "score": 0}
{"id": "eqasc_validation_790", "prediction": "all x.(Adolescence(x) -> (Freshful(x) & Crazy(x)))", "score": 0}
{"id": "eqasc_validation_790", "prediction": "all x.(Adolescence(x) -> (FunnyTimeOfLife(x) & CrazyTimeOfLife(x)))", "score": 0}
{"id": "eqasc_validation_790", "prediction": "all x.(Adolescence(x) -> (FunnyTime(x) & CrazyTime(x)))", "score": 0}
{"id": "eqasc_validation_790", "prediction": "all x.(Adolescence(x) -> (Faltering(x) & Crazy(x)))", "score": 0}
{"id": "eqasc_validation_790", "prediction": "all x.(Adolescent(x) -> (FunnyTimeOfLife(x) & CrazyTimeOfLife(x)))", "score": 0}
{"id": "eqasc_validation_790", "prediction": "all x.(Adolescence(x) -> (FamousTimeOfLife(x) & CrazyTimeOfLife(x)))", "score": 0}
{"id": "eqasc_validation_790", "prediction": "all x.((Adolescence(x) & Fascinating(x) & Crazy(x)) -> FascinatingTimeOfLife(x))", "score": 0}
{"id": "eqasc_validation_791", "prediction": "all x.(Adolescence(x) -> CrazyTimeBeforeAdulthood(x))", "score": 0}
{"id": "eqasc_validation_791", "prediction": "all x.(Adolescence(x) -> (RainfulTimeBeforeAdulthood(x) & BeforeAdulthood(x)))", "score": 0}
{"id": "eqasc_validation_791", "prediction": "all x.(Adolescence(x) -> (CrazyTimeBeforeAdulthood(x) & BeforeAdulthood(x)))", "score": 0}
{"id": "eqasc_validation_791", "prediction": "all x.(Adolescence(x) -> (KastTimeBeforeAdulthood(x) & CrazyTimeBeforeAdulthood(x)))", "score": 0}
{"id": "eqasc_validation_791", "prediction": "all x.(Adolescence(x) -> (ScrewsAheadDeadMinors(x) & BeforeAdulthood(x)))", "score": 0}
{"id": "eqasc_validation_791", "prediction": "all x.((Adolescence(x) & CrazyTimeBeforeAdulthood(x)) -> CrazyTimeBeforeAdulthood(x))", "score": 0}
{"id": "eqasc_validation_791", "prediction": "all x.(Adolescence(x) -> CrazyTime(x))", "score": 0}
{"id": "eqasc_validation_791", "prediction": "all x.(Adolescence(x) -> (ShakingTime(x) & BeforeAdulthood(x)))", "score": 0}
{"id": "eqasc_validation_791", "prediction": "all x y.((Adolescence(x) & Adulthood(y)) -> CrazyTime(x,y))", "score": 0}
{"id": "eqasc_validation_791", "prediction": "all x.(Adolescence(x) -> (Morning(x,adulthood) & CrazyTime(x)))", "score": 0}
{"id": "eqasc_validation_791", "prediction": "all x.((Adolescence(x) & CrazyTime(x) & BeforeAdulthood(x)) -> Adulthood(y))", "score": 0}
{"id": "eqasc_validation_791", "prediction": "all x.((Adolescence(x) & CrazyTime(x)) -> Adulthood(x))", "score": 0}
{"id": "eqasc_validation_791", "prediction": "all x.(Adolescence(x) -> (RainyTimeBeforeAdulthood(x) & HasAdulthood(x) & Adulthood(x)))", "score": 0}
{"id": "eqasc_validation_792", "prediction": "all x.(Phylogeny(x) -> EvolutionaryHistoryOfRelatedOrganisms(x))", "score": 0}
{"id": "eqasc_validation_792", "prediction": "all x y.((Phylogeny(x) & Organism(y)) -> EvolutionaryHistory(x,y))", "score": 0}
{"id": "eqasc_validation_792", "prediction": "all x y z.((Phylogeny(x) & Organization(y) & Organism(z)) -> EvolutionaryHistory(x,y,z))", "score": 0}
{"id": "eqasc_validation_792", "prediction": "all x y z.((Phylogeny(x) & Organism(y) & Organism(z)) -> EvolutionaryHistory(x))", "score": 0}
{"id": "eqasc_validation_792", "prediction": "all x.(Phylogeny(x) -> (EvolutionaryHistory(x) & exists y.(RelatedOrganism(y) & RelatedOrganism(y)))))", "score": -1}
{"id": "eqasc_validation_792", "prediction": "all x.(Phylogeny(x) -> EvolutionaryHistoryOfGroupOfOrganisms(x))", "score": 0}
{"id": "eqasc_validation_792", "prediction": "all x y z.((Phylogeny(x) & Organism(y) & Organism(z)) -> EvolutionaryHistory(x,y,z))", "score": 0}
{"id": "eqasc_validation_792", "prediction": "all x y.((Phylogeny(x) & RelatedOrganisms(y)) -> EvolutionaryHistory(x,y))", "score": 0}
{"id": "eqasc_validation_792", "prediction": "all x.(Phylogeny(x) -> (exists y.(Organism(y) & Related(y)) & GroupOf(x,y))))", "score": -1}
{"id": "eqasc_validation_792", "prediction": "all x.(Phylogeny(x) -> (EvolutionaryHistoryOfRelatedOrganisms(x)))", "score": 0}
{"id": "eqasc_validation_792", "prediction": "all x y z.((Phylogeny(x) & Organism(y) & Organism(z) & RelatedInformation(x,y) & RelatedInformation(y,z)) -> EvolutionaryHistory(x,y))", "score": 0}
{"id": "eqasc_validation_793", "prediction": "all x y.((Classification(x) & Phylogeny(y)) -> CanBeBasedOn(x,y))", "score": 0}
{"id": "eqasc_validation_793", "prediction": "all x.(Classification(x) -> BasedOnPhylogeny(x))", "score": 0}
{"id": "eqasc_validation_793", "prediction": "all x.(Classification(x) -> (BasedOnPhylogeny(x) & Phylogeny(x)))", "score": 0}
{"id": "eqasc_validation_793", "prediction": "all x y.((Classification(x) & Phylogeny(y)) -> CanBeBased(x,y))", "score": 0}
{"id": "eqasc_validation_793", "prediction": "all x.(Classification(x) -> BaseOnPhylogeny(x))", "score": 0}
{"id": "eqasc_validation_794", "prediction": "all x y.((Organism(x) & RelatedOrganism(y)) -> Human(x))", "score": 0}
{"id": "eqasc_validation_794", "prediction": "all x y.((Organism(x) & RelatedOrganism(y)) -> BasedInEvolutionaryHistoryOf(x,y))", "score": 0}
{"id": "eqasc_validation_794", "prediction": "all x y z.((Organism(x) & RelatedOrganism(y) & Organism(z)) -> (EvolutiveHistory(x) & RelationshipHistory(x,y,z)))", "score": 0}
{"id": "eqasc_validation_794", "prediction": "all x y.((Organization(x) & RelatedOrganism(y) & EvolutionaryHistory(x,y)) -> Classified())", "score": -1}
{"id": "eqasc_validation_794", "prediction": "all x.((Organism(x) & RelatedOrganism(x)) -> LinkedInEvolutionaryHistory(x,))", "score": -1}
{"id": "eqasc_validation_794", "prediction": "all x y z.(Clarification(x,y) -> (BasedInEvolutionaryHistory(x) & RelatedOrganisms(y) & RelatedOrganisms(z) & RelatedOrganisms(y,q)))", "score": 0}
{"id": "eqasc_validation_794", "prediction": "all x y.((Organism(x) & EvolutionaryHistory(y)) -> CanBeBasedIn(x,y))", "score": 0}
{"id": "eqasc_validation_794", "prediction": "all x).((Organism(x) & RelatedOrganism(x)) -> EvolutionaryHistory(x))", "score": -1}
{"id": "eqasc_validation_794", "prediction": "all x y z.((Organism(x) & EvolutionaryHistory(y) & RelatedOrganisms(z) & BasedIn(x,y,z)) -> RelationalOrganism(x,z))", "score": 0}
{"id": "eqasc_validation_794", "prediction": "all x.((Organism(x) & RelatedOrganism(x)) -> InEvolutionaryHistoryPosition(x))", "score": 0}
{"id": "eqasc_validation_794", "prediction": "all x y z w.((Organism(x) & Organism(y) & EvolutionaryHistory(z) & Related(w)) -> CanBeBasedIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_794", "prediction": "all x y z.((Organism(x) & EvolutionaryHistory(y) & RelatedOrganism(z)) -> CanBeBasedIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_794", "prediction": "all x y.((Organisms(x) & EvolutionaryHistory(y)) -> ClassificationBasesIn(x,y))", "score": 0}
{"id": "eqasc_validation_794", "prediction": "all x y.((Organization(x) & RelatedOrganism(y)) -> CanByEvolutionaryHistory(x,y))", "score": 0}
{"id": "eqasc_validation_794", "prediction": "all x.((Organism(x) & RelatedOrganism(x)) -> basedInEvolutionaryHistory(x))", "score": 0}
{"id": "eqasc_validation_795", "prediction": "all x.(EvolutionaryBiology(x) -> (InvolvesHistoryOfOrganicDiversity(x) & InvolvesHistoryOfOrganicDiversity(x)))", "score": 0}
{"id": "eqasc_validation_795", "prediction": "all x.(EvolutionaryBiology(x) -> InvolvesHistoryOfOrganicDiversity(x))", "score": 0}
{"id": "eqasc_validation_795", "prediction": "all x.((EvolutionaryBiology(x) & OrganicDiversity(x)) -> InvolvesHistory(x,y))", "score": 0}
{"id": "eqasc_validation_795", "prediction": "all x y.((EvolutionaryBiology(x) & OrganicDiversity(y)) -> InvolvesHistory(x,y))", "score": 0}
{"id": "eqasc_validation_795", "prediction": "all x.((EvolutionaryBiology(x) & OrganicDiverseHistory(x)) -> Involves(x,y))", "score": 0}
{"id": "eqasc_validation_796", "prediction": "all x y.((Phylogeny(x) & Organism(y)) -> (HistoryAndOrganismDiversity(x,y) & RelatedOrganism(y)))", "score": 0}
{"id": "eqasc_validation_796", "prediction": "all x.(Phylogeny(x) -> (HistoryAndOrganicDiversityOfOrganisms(x) & RelatedOrganisms(x) & RelatedOrganisms(x) & RelatedOrganisms(x)))", "score": 0}
{"id": "eqasc_validation_796", "prediction": "all x y z.((Phylogeny(x) & Organism(y) & Organism(z)) -> (History(x,y) & OrganicDiversity(x,z)))", "score": 0}
{"id": "eqasc_validation_796", "prediction": "all x y.((Phylogeny(x) & Organism(y)) -> (History(x,y) & OrganicDiversity(x,y)))", "score": 0}
{"id": "eqasc_validation_796", "prediction": "all x.(Phylogeny(x) -> (HistoryAndOrganicDiversityOfOrganisms(x) & RelatedOrganisms(x)))", "score": 0}
{"id": "eqasc_validation_796", "prediction": "all x.(Phylogeny(x) - (HistoryAndOrganismDatabase(x) & OrganicDiversityOfRelatedOrganisms(x)))", "score": -1}
{"id": "eqasc_validation_796", "prediction": "all x.(Phylogeny(x) -> (HistoryAndOrganismDiversity(x) & RelatedOrganisms(x)))", "score": 0}
{"id": "eqasc_validation_796", "prediction": "all x y.((Phylogeny(x) & RelationshipOrganism(y)) -> (History(x,y) & OrganicDiversity(x,y)))", "score": 0}
{"id": "eqasc_validation_796", "prediction": "all x.(Phylogeny(x) -> (HistoryAndOrganicDiversityOfRelatedOrganisms(x) & (RelatedOrganisms(x) | RelatedOrganisms(x)))))", "score": -1}
{"id": "eqasc_validation_796", "prediction": "all x.(Phylogeny(x) -> (HistoryAndOrganismDiversityOfRelatedOrganisms(x) & OrganomicDiversityOfOrganisms(x)))", "score": 0}
{"id": "eqasc_validation_796", "prediction": "all x y.(Phylogeny(x) -> (HasHistory(x,y) & OrganicDiversity(x,y)))", "score": 0}
{"id": "eqasc_validation_796", "prediction": "all x y z.(Phelogeny(x) -> (HistoryOfOrganisms(x) & OrganicDiversityOfOrganisms(x) & RelatedOrganisms(y) & SimilarOrganisms(z) & RelatedOrganismsBy(y,z)))", "score": 0}
{"id": "eqasc_validation_796", "prediction": "all x y.((Phylogeny(x) & RelationalOrganisms(y)) -> (HistoryAndOrganicDiversity(x) & RelatedOrganisms(y)))", "score": 0}
{"id": "eqasc_validation_796", "prediction": "all x.(Phylogeny(x) -> (HistoryAndOrganicDiversityOfRelatedOrganisms(x) & RelatedOrganisms(x)))", "score": 0}
{"id": "eqasc_validation_796", "prediction": "all x.(Phylogeny(x) -> (HistoryAndOrganisms(x) & OrganodiverseOrganisms(x)))", "score": 0}
{"id": "eqasc_validation_796", "prediction": "all x y.((Phylogeny(x) & OrganicDiverseOrganism(y)) -> (History(x) & OrganicDiverseOrganism(x) & RelatedOrganism(y)))", "score": 0}
{"id": "eqasc_validation_797", "prediction": "PhylogenyMetazoan(Phylogeny(Phyla) & PoorlyUnderstood(phyla))", "score": -1}
{"id": "eqasc_validation_797", "prediction": "MetazoanPhylogeny (PhylogenyOfPhylea) — PoorlyUnderstood(byPhyla))", "score": -1}
{"id": "eqasc_validation_797", "prediction": "all x y.((MetazoanPhylogeny(x) & Phyla(y)) -> PoorlyUnderstand(x,y))", "score": 0}
{"id": "eqasc_validation_797", "prediction": "MetazoanPhylogeny (PhylogenyOfPhyla) & Mißunderstood(phyla))", "score": -1}
{"id": "eqasc_validation_797", "prediction": "MetazoanPhylogeny (PhylogenyOfPhyla),Understandable(PhylogenyOfPhyla))", "score": -1}
{"id": "eqasc_validation_797", "prediction": "L'Englishment(MetazoanPhylogeny)", "score": 0}
{"id": "eqasc_validation_797", "prediction": "MetazoanPhylogeny PoorlyUnderstandedPhylogenyOfPhyla(x)", "score": -1}
{"id": "eqasc_validation_797", "prediction": "(MetazoanPhylogeny) & PoorlyUnderstandsPhylogenyOfPhela(phylo))", "score": -1}
{"id": "eqasc_validation_797", "prediction": "(MetazoanPhylogeny(metazoan) & WeaklyUnderstand(phyla))", "score": 0}
{"id": "eqasc_validation_797", "prediction": "All x y.((MetazoanPhylogeny(x) & Phyla(y)) -> PoorlyUnderstood(x,y))", "score": -1}
{"id": "eqasc_validation_797", "prediction": "all x y.((Metazoan(x) & Phylogeny(y)) -> LittleUnderstandable(x,y))", "score": 0}
{"id": "eqasc_validation_797", "prediction": "all x y.((MetazoanPhylogeny(x) & Phyla(y)) -> PoorlyUnderseen(x,y))", "score": 0}
{"id": "eqasc_validation_797", "prediction": "both hexagon and phylogeny(metazoan) & poorlyUnverified(metazoan)", "score": -1}
{"id": "eqasc_validation_797", "prediction": "(MetazoanPhylogeny (MetazoanPhylogeny) & PhylogenyOfPhyla@BoltEver(phyla))", "score": 0}
{"id": "eqasc_validation_797", "prediction": "all x y.((MetazoanPhylogeny(x) & Phylogeny(y)) -> PoorlyUnderstood(x,y))", "score": 0}
{"id": "eqasc_validation_797", "prediction": "(Phylogeny(metazoan) & PoorlyUnderstandable(metazoan))", "score": 0}
{"id": "eqasc_validation_798", "prediction": "all x.(Metazoa(x) -> -Understanden(x))", "score": 0}
{"id": "eqasc_validation_798", "prediction": "all x.(Metazoa(x) -> PoorlyUnderstandedEvolutionaryHistory(x))", "score": 0}
{"id": "eqasc_validation_798", "prediction": "all x.(Metazoa(x) -> DecadesOfUpcoming(x))", "score": 0}
{"id": "eqasc_validation_798", "prediction": "all x.(Metazoa(x) -> PoorlyUnderstandableEvolutionaryHistory(x))", "score": 0}
{"id": "eqasc_validation_798", "prediction": "all x.(Metazoa(x) -> -UnprecedentedEvolutionaryHistory(x))", "score": 0}
{"id": "eqasc_validation_798", "prediction": "all x.(Metazoa(x) -> SomberEvolutionaryHistory(x))", "score": 0}
{"id": "eqasc_validation_798", "prediction": "all x.(Metazoa(x) -> PhenomenologicalHistory(x))", "score": 0}
{"id": "eqasc_validation_798", "prediction": "all x.(Tatazoa(x) -> Phenomenal(x))", "score": 0}
{"id": "eqasc_validation_798", "prediction": "all x.(Metazoa(x) -> PoundlyUnknownEvolutionaryHistory(x))", "score": 0}
{"id": "eqasc_validation_798", "prediction": "exists x.(EvolutionaryHistoryOfMetazoas(x) & PoorlyUnderstood(x))", "score": 0}
{"id": "eqasc_validation_798", "prediction": "all x.(Metazoa(x) -> PoorlyUnderstoodEvolutionaryHistory(x))", "score": 0}
{"id": "eqasc_validation_798", "prediction": "all x.(Metazoas(x) -> PoorlyUnderstanded(x))", "score": 0}
{"id": "eqasc_validation_798", "prediction": "all x.(Metazoa(x) -> (UnunderstandableEvolutionaryHistory(x) -- PoorlyUnderstanding(x)))", "score": -1}
{"id": "eqasc_validation_798", "prediction": "all x.(Metazoa(x) -> PoorlyUnderstoodHeritage(x))", "score": 0}
{"id": "eqasc_validation_798", "prediction": "all x.((Metazoa(x) & EvolutionaryHistory(x)) -> PoorlyUnderstood(x))", "score": 0}
{"id": "eqasc_validation_798", "prediction": "all x.((Metazoa(x) & EvolutionaryHistory(x)) -> PoorlyUnderstand(x))", "score": 0}
{"id": "eqasc_validation_799", "prediction": "all x y.((Organism(x) & Environment(y)) -> RelatedBehaviorTo(x,y))", "score": 0}
{"id": "eqasc_validation_799", "prediction": "all x y z.((Organism(x) & Environment(y) & Behavior(z)) -> RelatedTo(x,y,z))", "score": 0}
{"id": "eqasc_validation_799", "prediction": "all x.(OrganismBehavior(x) -> RelatedToEnvironment(x))", "score": 0}
{"id": "eqasc_validation_799", "prediction": "all x y z.((Organism(x) & Behavior(y) & Environment(z)) -> Affects(x,y,z))", "score": 0}
{"id": "eqasc_validation_799", "prediction": "all x.(Organism(x) -> BehaviorRelatedToEnvironment(x))", "score": 0}
{"id": "eqasc_validation_799", "prediction": "all x y.((Organism(x) & Environment(y)) -> BehaviorRelated(x,y))", "score": 0}
{"id": "eqasc_validation_799", "prediction": "all x y.((Organism(x) & Environment(x) & Behavior(y)) -> RelatedTo(x,y))", "score": 0}
{"id": "eqasc_validation_799", "prediction": "all x y.((Organism(x) & Environment(y)) -> HaveBehaviorRelatedTo(x,y))", "score": 0}
{"id": "eqasc_validation_799", "prediction": "all x y z.((Organism(x) & Behavior(y) & EnvironmentalEnvironment(z)) -> RelatedTo(x,y,z))", "score": 0}
{"id": "eqasc_validation_799", "prediction": "all x y.((Organism(x) & Environment(y)) -> BehaviorRelatedTo(x,y))", "score": 0}
{"id": "eqasc_validation_799", "prediction": "all x y.((Organism(x) & Environment(y)) -> RelationalBehavior(x,y))", "score": 0}
{"id": "eqasc_validation_799", "prediction": "all x y z.((Organism(x) & Environment(y) & Behavior(z)) -> RelatedTo(x,z))", "score": 0}
{"id": "eqasc_validation_799", "prediction": "all x y.((Organism(x) & Environment(y)) -> BehaviorRelationaryTo(x,y))", "score": 0}
{"id": "eqasc_validation_800", "prediction": "all x.(Phylogeny(x) -> (ExplainsEvolution(x) & OrganismEnvironment(x)))", "score": 0}
{"id": "eqasc_validation_800", "prediction": "all x.(Phylogeny(x) -> ExplanesEvolution(x))", "score": 0}
{"id": "eqasc_validation_800", "prediction": "all x.(Phylogeny(x) -> ((ExplainsEvolutionaryPart(x) & OrganismEnvironment(x)) | (ExplainsEvolutionaryPart(x) & OrganismEnvironment(x)))))", "score": -1}
{"id": "eqasc_validation_800", "prediction": "all x y.((Phylogeny(x) & Organism(y)) -> CouldExplainEvolution(x,y))", "score": 0}
{"id": "eqasc_validation_800", "prediction": "all x y.((Phylogeny(x) & Organism(y)) -> ExplainsEvolutionaryPartOfEnvironment(x,y))", "score": 0}
{"id": "eqasc_validation_800", "prediction": "all x.(Phylogeny(x) -> ExplainsEvolutionaryPart(x))", "score": 0}
{"id": "eqasc_validation_800", "prediction": "all x.(Phylogeny(x) -> MayExplainEvolution(x))", "score": 0}
{"id": "eqasc_validation_800", "prediction": "all x y.((Phylogeny(x) & Organism(y)) -> MayExplainEvolution(x,y))", "score": 0}
{"id": "eqasc_validation_800", "prediction": "all x.(Phylogeny(x) -> ExplainsEvolutionalPartOfEnvironment(x))", "score": 0}
{"id": "eqasc_validation_800", "prediction": "all x y.((Phylogeny(x) & Environment(y)) -> ExplainsEvolution(x,y))", "score": 0}
{"id": "eqasc_validation_800", "prediction": "all x.(Phylogeny(x) -> ExplainsEvolutionaryPartOfEnvironment(x))", "score": 0}
{"id": "eqasc_validation_800", "prediction": "all x.(Phylogeny(x) -> MayExplainEvolutionaryPartOfEnvironment(x))", "score": 0}
{"id": "eqasc_validation_800", "prediction": "all x y.((Phylogeny(x) & Organism(y)) -> ExplainsEvolution(x,y))", "score": 0}
{"id": "eqasc_validation_800", "prediction": "all x y.((Phylogeny(x) & Environment(y)) -> EvolutionaryPart(x,y))", "score": 0}
{"id": "eqasc_validation_800", "prediction": "all x.(Phylogeny(x) -> (ExplainsEvolutionaryPartOfOrganismsEnvironment(x)))", "score": 0}
{"id": "eqasc_validation_801", "prediction": "all x y z.((GroupOfRelatedOrganisms(x) & Organism(y) & Organ(z)) -> Pylosis(x))", "score": 0}
{"id": "eqasc_validation_801", "prediction": "all x.((GroupOfRelatedOrganisms(x) & RelatedOrganisms(x)) -> Phyla(x))", "score": 0}
{"id": "eqasc_validation_801", "prediction": "all x.(RelatedOrganisms(x) -> Phyla(x))", "score": 0}
{"id": "eqasc_validation_801", "prediction": "all x y.((RelatedOrganisms(x) & Group(y)) -> Phyla(x))", "score": 0}
{"id": "eqasc_validation_801", "prediction": "all x y z.((Arbor(x) & RelatedOrganism(y) & Organism(z) & Related(z)) -> Physical(x))", "score": 0}
{"id": "eqasc_validation_801", "prediction": "all x.((GroupOfRelatedOrganisms(x) & Phyla(x)) -> RelatedOrganisms(x))", "score": 0}
{"id": "eqasc_validation_801", "prediction": "all x.((FriendlyOrganisms(x) & RelatedOrganisms(x)) -> Phyla(x))", "score": 0}
{"id": "eqasc_validation_801", "prediction": "all x y.(Group(x) & RelatedOrganisms(x) -> Phyla(y))", "score": 0}
{"id": "eqasc_validation_801", "prediction": "all x.((VeryRelatedOrganisms(x) & HasRelatedOrganisms(x)) -> Phyla(x))", "score": 0}
{"id": "eqasc_validation_801", "prediction": "all x.((Organisms(x) & HasRelatedOrganisms(x)) -> Sphloa(x))", "score": 0}
{"id": "eqasc_validation_801", "prediction": "all x.((GroupOfRelatedOrganisms(x) & LikedOrganisms(x)) -> Plasma(x))", "score": 0}
{"id": "eqasc_validation_801", "prediction": "all x.((GroupOfRelatedOrganisms(x) & ResponsiveOrganisms(x)) -> Phyla(x))", "score": 0}
{"id": "eqasc_validation_801", "prediction": "all x.(PartOfOrganisms(x) -> Pylea(x))", "score": 0}
{"id": "eqasc_validation_801", "prediction": "all x.(Phyla(x) -> exists y.(Organism(y) & RelatedOrganism(z) & RelatedOrganism(y,z))))", "score": -1}
{"id": "eqasc_validation_802", "prediction": "all x y z.((Speedometer(x) & Driver(y) & Vehicle(z)) -> (GiveFeedbackOnSpeed(x,y) & SpeedOfVehicle(y) & Driver(y,z)))", "score": 0}
{"id": "eqasc_validation_802", "prediction": "all x y z.((Speedometer(x) & Driver(y) & Vehicle(z)) -> GivesFeedbackOnSpeed(x,y,z))", "score": 1}
{"id": "eqasc_validation_802", "prediction": "all x y.((Speedometer(x) & Driver(y)) -> GivesFeedbackOnSpeed(x,y))", "score": 0}
{"id": "eqasc_validation_802", "prediction": "all x y.((Speedometer(x) & Driver(y)) -> (GiveFeedbackOnSpeed(x,y) & SpeedOfVehicle(y)))", "score": 0}
{"id": "eqasc_validation_802", "prediction": "all x y.((Speedometer(x) & Driver(y) & UsedForGivingFeedbackOnSpeed(x,y)) -> SpeedometerPositioning(x,y))", "score": 0}
{"id": "eqasc_validation_802", "prediction": "all x y.((Speedometer(x) & Driver(y)) -> GivesFeedbackOnSpeed(y,x))", "score": 0}
{"id": "eqasc_validation_802", "prediction": "all x y.((Speedometer(x) & Driver(y)) -> ItGivesFeedbackOnSpeed(x,y))", "score": 0}
{"id": "eqasc_validation_802", "prediction": "all x y z.((Speedometer(x) & Driver(y,z) & Vehicle(z)) -> SpeedometerGatesFeedbackOnSpeed(x,y,z))", "score": 0}
{"id": "eqasc_validation_802", "prediction": "all x y z.((Speedometer(x) & Driver(y) & Vehicle(z)) -> GivesFeedbackOnSpeedOfVehicle(x,y,z))", "score": 0}
{"id": "eqasc_validation_802", "prediction": "all x y.((Speedometer(x) & Driver(y)) -> GivesFeedbackOnSpeedOfVehicle(x,y))", "score": 0}
{"id": "eqasc_validation_802", "prediction": "all x y.((Speedometer(x) & Driver(y)) -> (GivesFeedback(x,y) & MeasuresSpeedOfVehicle(y,x)))", "score": 0}
{"id": "eqasc_validation_802", "prediction": "all x y z.((Speedometer(x) & Driver(y) & Vehicle(z)) -> GivesFeedbackOnSpeed(y,z))", "score": 0}
{"id": "eqasc_validation_802", "prediction": "all x.(Speedometer(x) -> (GiveFeedbackOnSpeed(x) | DriverFeedbackOnSpeed(x)))", "score": 0}
{"id": "eqasc_validation_802", "prediction": "all x y.((Speedometer(x) & Driver(y)) -> FeedbackOnSpedicityOfVehicle(x),y))", "score": -1}
{"id": "eqasc_validation_803", "prediction": "all x.(Speed(x) -> (MilesPerHour(x) | Distance(x) & Yards(x)))", "score": 0}
{"id": "eqasc_validation_803", "prediction": "all x y.((Speed(x) & Distance(y)) -> (MilesPerHour(x) & MilesWithGrades(y) & SubMeasure(x,y)))", "score": 0}
{"id": "eqasc_validation_803", "prediction": "all x y.((Speed(x) & Distance(y)) -> (InMilesPerHour(x) & InMilesWithyards(y)))", "score": 0}
{"id": "eqasc_validation_803", "prediction": "all x.((Speed(x) -> InMilesPerHour(x)) & (Distance(x) -> InMiles(x)))", "score": 0}
{"id": "eqasc_validation_803", "prediction": "(all x.(Speed(x) -> Measurement(x)) & (Distance(x) -> Measurement(x)))", "score": 0}
{"id": "eqasc_validation_803", "prediction": "(all x.(Speed(x) -> PerMile(x)) & (Distance(x) -> Millswithyards(x)))", "score": 0}
{"id": "eqasc_validation_803", "prediction": "all x.(Speed(x) -> (InMilesPerHour(x) & Distance(x) & InMilesWithyards(x)))", "score": 0}
{"id": "eqasc_validation_803", "prediction": "(all x.(Speed(x) -> MilesPerHour(x)) & (Distance(x) -> MilesWithyards(x)))", "score": 0}
{"id": "eqasc_validation_803", "prediction": "all x y.((Speed(x) & Distance(y)) -> (InMilesPerHour(x) & InMiles(y) & UsedInMiles(y) & IncludesSeedsAsSub-measure(y)))", "score": -1}
{"id": "eqasc_validation_803", "prediction": "(all x.(Speed(x) -> InMilesPerHour(x)) & all y.(Distance(y) -> InNims(y))))", "score": -1}
{"id": "eqasc_validation_803", "prediction": "all x y.((Speed(x) & Distance(y)) -> (MilesPerHour(x) & MilesWithyards(y)))", "score": 0}
{"id": "eqasc_validation_803", "prediction": "all x.(Speed(x) -> (InMilesPerHead(x) & Distance(x)))", "score": 0}
{"id": "eqasc_validation_803", "prediction": "all x y z.((Speed(x) & Distance(y) & Yards(z)) -> (InMilesOrHubit(x) & InMilesWithyards(y)))", "score": 0}
{"id": "eqasc_validation_803", "prediction": "all x y.((Speed(x) & Distance(y)) -> (MilesPerHub(x) & MilesWithYards(y)))", "score": 0}
{"id": "eqasc_validation_803", "prediction": "(all x.(Speed(x) -> MilesPerHour(x)) & all y.(Distance(y) -> Mills(y)))", "score": 0}
{"id": "eqasc_validation_804", "prediction": "all x.(Speedometer(x) -> (GiveNumberOfMilesPerHour (x,DriverFeedback) | GiveNumberOfMilesPerHour(x,DriverFeedback)))", "score": 0}
{"id": "eqasc_validation_804", "prediction": "all x y.((Speedometer(x) & Driver(y)) -> GivesFeedbackOnMilesPerHour(y,z))", "score": 0}
{"id": "eqasc_validation_804", "prediction": "all x.(Speedometer(x) -> (GiveDriverFeedback(x) & HowManyMilesPerHourVehicleGoes(x)))", "score": 0}
{"id": "eqasc_validation_804", "prediction": "all x.(Speedometer(x) -> (GivesDriverFeedbackOnMilesPerHour(x) & VehicleGoes(x)))", "score": 0}
{"id": "eqasc_validation_804", "prediction": "all x.(Speedometer(x) -> (GiveDriverFeedbackOnMilePerInh(x) & DeterminesVehicleSpeed(x)))", "score": 0}
{"id": "eqasc_validation_804", "prediction": "all x y.((Speedometer(x) & Driver(y)) -> GivesFeedbackOnMultipleMilesPerHour(x,y))", "score": 0}
{"id": "eqasc_validation_804", "prediction": "all x y z.((Spoker(x) & Driver(y) & Vehicle(z)) -> GivesFeedbackOnMilePerHour(x,y,z))", "score": 0}
{"id": "eqasc_validation_804", "prediction": "all x y z.((Speedometer(x) & Driver(y) & Vehicle(z)) -> GivesFeedbackOnMilesPerHour(x,y,z))", "score": 0}
{"id": "eqasc_validation_804", "prediction": "all x.(Speedometer(x) -> (WaitsFeedbackOnMilesPerHour(x) & Driver(x)))", "score": 0}
{"id": "eqasc_validation_804", "prediction": "all x.(Speedometer(x) -> (GiveSteantFeedbackOnMilesPerHours(x) & Driver(x)))", "score": 0}
{"id": "eqasc_validation_804", "prediction": "all x y.((Speedometer(x) & Driver(y)) -> (GivesMilesPerHourFeedback(x,y) & MeasuresMilesPerHour(x)))", "score": 0}
{"id": "eqasc_validation_804", "prediction": "all x y.((Speedometer(x) & Driver(y)) -> GivesFeedbackOnMilesPerHour(x,y))", "score": 0}
{"id": "eqasc_validation_804", "prediction": "all x y.((Speedometer(x) & Driver(y)) -> FeedbackOnMilesPerHour(x,y))", "score": 0}
{"id": "eqasc_validation_804", "prediction": "all x y.((Speedometer(x) & Driver(y)) -> TestsShowsMilesPerHour(y,x))", "score": 0}
{"id": "eqasc_validation_805", "prediction": "all x y z.((Odometer(x) & Speedometer(y) & Distance(z) & Speed(z)) -> (Measures(x,z) & Measures(y,z)))", "score": 0}
{"id": "eqasc_validation_805", "prediction": "all x y.((Odometer(x) | Speedometer(y)) -> (MeasuresDistance(x) & MeasuresSpeed(y)))", "score": 0}
{"id": "eqasc_validation_805", "prediction": "all x.((Odometer(x) | Speedometer(x)) -> (MeasuresDistance(x) | MeasuresSpeed(x)))", "score": 0}
{"id": "eqasc_validation_805", "prediction": "all x y.((Odometer(x) & Speedometer(y)) -> (MeasuresDistance(x) & MeasuresSpeed(y)))", "score": 0}
{"id": "eqasc_validation_805", "prediction": "all x.(Odometer(x) & Speedometer(x)) -> (MinglesDistance(x) & MeasuresSpeed(x)))", "score": -1}
{"id": "eqasc_validation_805", "prediction": "all x.((Odometer(x) | Speedometer(x)) -> (MeasuresDistance(x) & MeasuresSpeed(x)))", "score": 0}
{"id": "eqasc_validation_805", "prediction": "all x.(Odometer(x) -> MeasuresDistanceAndSpeed(x))", "score": 0}
{"id": "eqasc_validation_805", "prediction": "all x y.((Odometer(x) & Speedometer(y)) -> (MeasureDistance(x,MeasureSpeed(x) & MeasureDistance(y,MeasureSpeed(x)\"))", "score": -1}
{"id": "eqasc_validation_805", "prediction": "all x.(Odometer(x) & Speedometer(x)) -> (MeasuresDistance(x) & MeasuresSpeed(x)))", "score": -1}
{"id": "eqasc_validation_805", "prediction": "all x.(Odometer(x) & Speedometer(x)) -> (MeasuresDistance(x) | MeasuresSpeed(x)))", "score": -1}
{"id": "eqasc_validation_805", "prediction": "all x.((Odometer(x) | Speedometer(x)) -> MeasuresDistanceAndSpeed(x))", "score": 0}
{"id": "eqasc_validation_805", "prediction": "(MeasuresDistance(odometer) | MeasuresSpeed(odometer))", "score": 0}
{"id": "eqasc_validation_805", "prediction": "all x.(Odometer(x) & Speedometer(x)) -> MeasuresDistanceAndSpeed(x))", "score": -1}
{"id": "eqasc_validation_805", "prediction": "all x y.((Odometer(x) | Speedometer(x)) -> (MeasuresDistance(x) & MeasuresSpeed(x)))", "score": 0}
{"id": "eqasc_validation_806", "prediction": "all x.(Speedometer(x) -> MeasuresRateOfTravel(x))", "score": 0}
{"id": "eqasc_validation_806", "prediction": "all x y.((Speedometer(x) & TravelRate(y)) -> MeasuresRateOfTravel(x,y))", "score": 0}
{"id": "eqasc_validation_806", "prediction": "all x.(Speedometer(x) -> MeasuresSpeedOfTravel(x))", "score": 0}
{"id": "eqasc_validation_806", "prediction": "all x y.((Speedometer(x) & Motor(y)) -> MeasuresTravelPosition(x,y))", "score": 0}
{"id": "eqasc_validation_806", "prediction": "all x y.((Speedometer(x) & Travel(y)) -> MeasuresRateOfTravel(x,y))", "score": 0}
{"id": "eqasc_validation_806", "prediction": "all x.(Speedometer(x) -> MeasuresRateOfVisitage(x))", "score": 0}
{"id": "eqasc_validation_807", "prediction": "(MeasuresMotion(Speed) -> MeasuresMotion(Speed))", "score": 0}
{"id": "eqasc_validation_807", "prediction": "all x.(Speed(x) -> MeasuresMotion(x))", "score": 0}
{"id": "eqasc_validation_807", "prediction": "all x.(Speed(x) -> MeasuresDepthOfMotion(x))", "score": 0}
{"id": "eqasc_validation_807", "prediction": "all x.(Speed(x) -> MeasureStopMotion(x))", "score": 0}
{"id": "eqasc_validation_807", "prediction": "(MeasuresSpeed(Speed,Motion))", "score": 0}
{"id": "eqasc_validation_807", "prediction": "(MeasuresMotion(Speed) & -MeasuresMigration(Speed,Method))", "score": 0}
{"id": "eqasc_validation_807", "prediction": "all x.(Speed(x) -> MeasureofMotion(x))", "score": 0}
{"id": "eqasc_validation_807", "prediction": "all x y.((Speed(x) & Motion(y)) -> Measures(x,y))", "score": 0}
{"id": "eqasc_validation_807", "prediction": "(MeasureofMotion(Speed))", "score": 0}
{"id": "eqasc_validation_807", "prediction": "°Speed().", "score": -1}
{"id": "eqasc_validation_807", "prediction": "(MeasuresSpeed(Speed,Motion) & MeasuresSpeed(Speed,Motion))", "score": 0}
{"id": "eqasc_validation_807", "prediction": "all x.(Speed(x) -> MeasureOfMotion(x))", "score": 0}
{"id": "eqasc_validation_807", "prediction": "(MeasuresMotion(Speed) & MeasuresMotion(Speed,Motion))", "score": 0}
{"id": "eqasc_validation_808", "prediction": "all x y.((Speedometer(x) & Driver(y)) -> GivesMeasureOfMotionFeedbackOnMeasureOfMotion(y,x))", "score": 0}
{"id": "eqasc_validation_808", "prediction": "all x y z.((Speedometer(x) & Driver(y) & Vehicle(z)) -> GivesFeedbackOnMotion(x,y,z))", "score": 0}
{"id": "eqasc_validation_808", "prediction": "all x y z.((Speedometer(x) & Driver(y) & Vehicle(z) & MeasuredMotion(z)) -> GivesDriverFeedback(x,y,z))", "score": 0}
{"id": "eqasc_validation_808", "prediction": "all x y.((Speedometer(x) & Driver(y)) -> UsesForGivingFeedbackOnMotion(x,y))", "score": 0}
{"id": "eqasc_validation_808", "prediction": "all x y z.(Speedometer(x) -> (GivesDriverFeedback(x,y) & MeasuresMotion(y) & Chauffeur(z) & Measure(z,x,y) & Vehicle(y)))", "score": 0}
{"id": "eqasc_validation_808", "prediction": "all x.(Speedometer(x) -> (GivesDriverFindingsOnMotion(x) & MeasuresMotion(x,y)))", "score": 0}
{"id": "eqasc_validation_808", "prediction": "all x.(Speedometer(x) -> (GivesDriverFeedbackOnMotion(x) & InVehicleMechanization(x)))", "score": 0}
{"id": "eqasc_validation_808", "prediction": "all x y.((Speedometer(x) & Driver(y) & MeasureOfMotion(y,2)) -> GivesFeedback(x,y))", "score": 0}
{"id": "eqasc_validation_808", "prediction": "all x y z.((Speedometer(x) & Driver(y) & Vehicle(z)) -> (GivesTweets(x,y,z) & MeasureOfMotion(y,z)))", "score": 0}
{"id": "eqasc_validation_808", "prediction": "all x y.((Speedometer(x) & Driver(y)) -> GivesRefeedback(x,y))", "score": 0}
{"id": "eqasc_validation_808", "prediction": "all x y.((Speedometer(x) & Driver(y) & MeasuresMotion(y,x)) -> GivesFeedback(x,y))", "score": 0}
{"id": "eqasc_validation_808", "prediction": "all x.(Speedometer(x) -> GivesDriverFeedbackOnMeasureOfMotion(x))", "score": 0}
{"id": "eqasc_validation_808", "prediction": "all x.(Speedometer(x) -> HelpsDriversMetMotion(x))", "score": 0}
{"id": "eqasc_validation_808", "prediction": "all x y.((Speedometer(x) & Driver(y)) -> ProvidesFeedback(x,y))", "score": 0}
{"id": "eqasc_validation_808", "prediction": "all x y z.((Speedometer(x) & Driver(y) & Vehicle(z)) -> GivesFeedbackOnMotionOnMeasureOfMotion(x,y,z))", "score": 0}
{"id": "eqasc_validation_808", "prediction": "all x y.((Speedometer(x) & Driver(y) & Drives(y,x)) -> GivesFeedbackOnMotion(x,y))", "score": 0}
{"id": "eqasc_validation_809", "prediction": "This Speedometer Now ShowsMaxSpeedOf90mph.", "score": -1}
{"id": "eqasc_validation_809", "prediction": "Speedometer NowAssignsMaxSpeedOf90BPM.", "score": -1}
{"id": "eqasc_validation_809", "prediction": "All x.(Speedometer(x) -> ShowsMaxSpeedOf(x,90))", "score": -1}
{"id": "eqasc_validation_809", "prediction": "All x.(Speedometer(x) -> SpeedometerMaxMax(x,90))", "score": -1}
{"id": "eqasc_validation_809", "prediction": "100 mph(SpokenSpeedometer)", "score": -1}
{"id": "eqasc_validation_809", "prediction": "Der Speedometer zeigt jetzt maximalSpeed(90)(Snake(x))", "score": -1}
{"id": "eqasc_validation_809", "prediction": "all x.(Speedometer(x) -> ShowsMaxSpeed(x,90))", "score": 0}
{"id": "eqasc_validation_809", "prediction": "(MaxSpeedometer(Spoker) & Speedometer(Speedometer) & -90Phs(Speedometer))", "score": 0}
{"id": "eqasc_validation_809", "prediction": "All x.(Speedometer(x) -> SpeedometerMicrosoft(x,90))", "score": -1}
{"id": "eqasc_validation_809", "prediction": "(Spoisonometer(Season,90))", "score": 0}
{"id": "eqasc_validation_809", "prediction": "the Speedometer now shows maximumSpeedOf90Ph.(SpoiaOf(Standard(Speed) -> ShowsMaxSpeedOf90Ph.(StandardSpeedOf90Ph).))", "score": -1}
{"id": "eqasc_validation_809", "prediction": "All x.(Speedometer(x) -> ShowsMaxSpeedOf90mph(x))", "score": -1}
{"id": "eqasc_validation_809", "prediction": "All x.(Speedometer(x) -> ShowsShowMaxSpeedOf90(x))", "score": -1}
{"id": "eqasc_validation_809", "prediction": "all x.(Spoieometer(x) -> ShowsMaxSpeed(x,90))", "score": 0}
{"id": "eqasc_validation_809", "prediction": "now showsMaxSpeedOf90(Speedometer)", "score": -1}
{"id": "eqasc_validation_809", "prediction": "-ApairsSpoilage(SpeedometerShowsMaxSpeedOf90mph(Sim))", "score": 0}
{"id": "eqasc_validation_810", "prediction": "all x.(Speedometer(x) -> ShowsMPH(x,Driver,Vehicle))", "score": 0}
{"id": "eqasc_validation_810", "prediction": "all x y.((Speedometer(x) & Driver(y)) -> ShowsMPH(x,y))", "score": 0}
{"id": "eqasc_validation_810", "prediction": "all x y z.((Speedometer(x) & Driver(y) & Vehicle(z)) -> ShowsMPH(x,y,z))", "score": 0}
{"id": "eqasc_validation_810", "prediction": "all x y.((Speedometer(x) & Vehicle(y) & Driver(z)) -> ShowsMPH(x,z))", "score": 0}
{"id": "eqasc_validation_810", "prediction": "all x y.((Speedometer(x) & Driver(y)) -> ShowsMPHIn(x,y))", "score": 0}
{"id": "eqasc_validation_810", "prediction": "all x y.(Locationometer(x) & Driver(y) & DisplaysMPH(x,y))", "score": 0}
{"id": "eqasc_validation_810", "prediction": "all x y.(Speedometer(x) & Driver(y) & MeasuresMPH(x,y))", "score": 0}
{"id": "eqasc_validation_810", "prediction": "all x y.((Speedometer(x) & Vehicle(y)) -> (ShowsMPH(x,y) & Driver(y)))", "score": 0}
{"id": "eqasc_validation_810", "prediction": "all x y z.(Speedometer(x) -> (ShowsMPH(x,y) & Driver(y) & Vehicle(z) & ShowsMPH(x,z)))", "score": 0}
{"id": "eqasc_validation_810", "prediction": "all x y.((Speedometer(x) & Driver(y) & Vehicle(z)) -> DisplaysMPH(x,y,z))", "score": 0}
{"id": "eqasc_validation_810", "prediction": "the speedometer shows the driver the vehicle's MPH and shows the speedometer's MPH and indicates MPH(driver))", "score": -1}
{"id": "eqasc_validation_810", "prediction": "all x y z.((Speedometer(x) & Driver(y) & Vehicle(z) & ShowsMPH(y,z)) -> MeasuresMPH(y,z))", "score": 0}
{"id": "eqasc_validation_810", "prediction": "all x y.((Speedometer(x) & Driver(y) & Vehicle(z)) -> ShowsMPH(x,y,z))", "score": 0}
{"id": "eqasc_validation_811", "prediction": "all x y.((Vehicle(x) & RoadBend(y)) -> ReducesSpeedAtBroadBend(x,y))", "score": 0}
{"id": "eqasc_validation_811", "prediction": "all x.((Vehicle(x) & RoadBend(x)) -> ReducesSpeed(x))", "score": 0}
{"id": "eqasc_validation_811", "prediction": "all x.(Vehicle(x) -> ReducesSpeedAtRoadBends(x))", "score": 0}
{"id": "eqasc_validation_811", "prediction": "all x y.((Vehicle(x) & RoadBend(y)) -> ReducesSpeedAt(x,y))", "score": 0}
{"id": "eqasc_validation_811", "prediction": "all x.((Vehicle(x) & RoadBend(x)) -> ReducesSpeedAt(x,y))", "score": 0}
{"id": "eqasc_validation_811", "prediction": "all x.(Vehicle(x) -> ReducesSpeedAtBends(x))", "score": 0}
{"id": "eqasc_validation_811", "prediction": "all x.(Vehicle(x) -> ReducesSpeedAtRoadBend(x))", "score": 0}
{"id": "eqasc_validation_812", "prediction": "all x y.((Speedometer(x) & Driver(y)) -> CanHelpNavigateRoadBends(x,y))", "score": 0}
{"id": "eqasc_validation_812", "prediction": "all x y.((Speedometer(x) & Driver(y)) -> NavigatesBends(y,x))", "score": 0}
{"id": "eqasc_validation_812", "prediction": "all x y.((Speedometer(x) & DriverDoesRoadBends(y)) -> HelpsNavigateRoadBends(x,y))", "score": 0}
{"id": "eqasc_validation_812", "prediction": "all x.(Speedometer(x) -> HelpsDriverNavigateRoadBends(x))", "score": 0}
{"id": "eqasc_validation_812", "prediction": "all x y z.( (Speedometer(x) & Driver(y) & RoadBend(z)) -> HelpsNavigate(x,y,z))", "score": 0}
{"id": "eqasc_validation_812", "prediction": "all x y z.((Speedometer(x) & Driver(y) & RoadBend(z)) -> HelpsNavigate(x,y,z))", "score": 0}
{"id": "eqasc_validation_812", "prediction": "all x y z.((Speedometer(x) & Driver(y) & RoadBend(z)) -> CanHelpNavigate(x,y,z))", "score": 0}
{"id": "eqasc_validation_812", "prediction": "all x y.((Speedometer(x) & Driver(y)) -> HelpsNavigateRoadBends(x,y))", "score": 0}
{"id": "eqasc_validation_812", "prediction": "all x y z.((Speedometer(x) & Driver(y) & RoadBend(z)) -> CanHelpNavigate(y,z))", "score": 0}
{"id": "eqasc_validation_812", "prediction": "all x y.((Speedometer(x) & Driver(y)) -> NavigateBends(y,x))", "score": 0}
{"id": "eqasc_validation_812", "prediction": "all x y z.((Speedometer(x) & Driver(y) & RoadBends(z) & Navigate(y,x,z)) -> CanHelpNavigate(x,y,z))", "score": 0}
{"id": "eqasc_validation_812", "prediction": "all x y.((Speedometer(x) & Driver(y)) -> NavigatesRufBugs(x,y))", "score": 0}
{"id": "eqasc_validation_812", "prediction": "all x y z.((Speedometer(x) & Driver(y) & RoadBend(z)) -> Reaches(x,y,z))", "score": 0}
{"id": "eqasc_validation_813", "prediction": "all x.(Speed(x) -> MagnitudeOfVelocity(x))", "score": 0}
{"id": "eqasc_validation_813", "prediction": "(MagnitudeOfVelocity(Speed) -> -MajorityOfVelocity(Speed))", "score": 0}
{"id": "eqasc_validation_813", "prediction": "all x.(Speed(x) -> MagnitudeofVibration(x))", "score": 0}
{"id": "eqasc_validation_813", "prediction": "(MagnitudeOfVelocity(Speed))", "score": 0}
{"id": "eqasc_validation_813", "prediction": "(Speed(x) & MagnitudeOfVoice(x))", "score": 0}
{"id": "eqasc_validation_813", "prediction": "all x.(Speed(x) -> MagnitudeOfVoice(x))", "score": 0}
{"id": "eqasc_validation_813", "prediction": "all x y.((Speed(x) & Magnitude(y)) -> Vase(x,y))", "score": 0}
{"id": "eqasc_validation_813", "prediction": "Typically, all x.(Speed(x) -> MagnitudeVelocity(x))", "score": -1}
{"id": "eqasc_validation_813", "prediction": "All x.(Speed(x) -> MagnitudeOfVelocity(x))", "score": -1}
{"id": "eqasc_validation_814", "prediction": "all x y.((Speedometer(x) & Vehicle(y)) -> GivesFeedbackOnVibration(x,y))", "score": 0}
{"id": "eqasc_validation_814", "prediction": "all x.(Speedometer(x) -> GivesFeedbackOnVelocity(x))", "score": 0}
{"id": "eqasc_validation_814", "prediction": "all x.(Speedometer(x) -> (GivesFeedbackThanVelocity(x) & Vehicle(x)))", "score": 0}
{"id": "eqasc_validation_814", "prediction": "all x.(Speedometer(x) -> GivesVibrationFeedback(x))", "score": 0}
{"id": "eqasc_validation_814", "prediction": "all x.(Speedometer(x) -> (GivesFeedbackOnVelocity(x) & Vehicle(y)))", "score": 0}
{"id": "eqasc_validation_814", "prediction": "all x y.((Speedometer(x) & Vehicle(y)) -> GivesFeedbackOnVelocity(x,y))", "score": 0}
{"id": "eqasc_validation_814", "prediction": "all x y z.((Speedometer(x) & Vehicle(y) & Vehicle(z)) -> GivesFeedbackOnVelocity(x,y,z))", "score": 0}
{"id": "eqasc_validation_814", "prediction": "all x y.((Speedometer(x) & Vehicle(y) & ReliableForFeedback(x,y)) -> GivesFeedback(x,y))", "score": 0}
{"id": "eqasc_validation_814", "prediction": "all x y z.((Speedometer(x) & Vehicle(y) & Vehicle(z)) -> (GivesFeedback(x,y,z) & Velocity(y) & Vehicle(z)))", "score": 0}
{"id": "eqasc_validation_814", "prediction": "all x.(Speedometer(x) -> (GivesFeedbackOnVelocity(x,Vehicle)))", "score": 0}
{"id": "eqasc_validation_814", "prediction": "all x y.((Speedometer(x) & Vehicle(y)) -> GivesFeedback(x,y))", "score": 0}
{"id": "eqasc_validation_815", "prediction": "all x y.((VehicleSpeed(x) & Radar(y)) -> CheckedBy(x,y))", "score": 0}
{"id": "eqasc_validation_815", "prediction": "all x y.((Vehicle(x) & Radar(y)) -> CheckedThrough(x,y))", "score": 0}
{"id": "eqasc_validation_815", "prediction": "all x.(VehicleSpeed(x) -> CheckedByRadar(x))", "score": 0}
{"id": "eqasc_validation_815", "prediction": "all x y.((Radar(x) & VehicleSpeed(y)) -> Checked(x,y))", "score": 0}
{"id": "eqasc_validation_815", "prediction": "all x.(VehicleSpeedCheckedByRadar(x) -> CheckedByEcho(x))", "score": 0}
{"id": "eqasc_validation_815", "prediction": "all x.(VehicleSpeedCheckedByRadar(x) -> Checked(x))", "score": 0}
{"id": "eqasc_validation_815", "prediction": "all x.(VehicleSpeedCheckedByRadar(x) -> -CheckedByRadar(x))", "score": 0}
{"id": "eqasc_validation_815", "prediction": "all x.(VehicleSpeedCheckedByRadar(x) -> CheckedByVehicle(x))", "score": 0}
{"id": "eqasc_validation_815", "prediction": "all x.(VehicleSpeedCheckedByRadar(x) -> ClearsVehicleSpeed(x))", "score": 0}
{"id": "eqasc_validation_815", "prediction": "all x.(VehicleSpeedCheckedByRadar(x) -> CheckedBy(x))", "score": 0}
{"id": "eqasc_validation_816", "prediction": "all x y.((Speedometer(x) & Radar(y)) -> SameReading(x,y))", "score": 0}
{"id": "eqasc_validation_816", "prediction": "all x.(Speedometer(x) -> SeemsSameReading(x))", "score": 0}
{"id": "eqasc_validation_816", "prediction": "all x y z.((Speedometer(x) & Radar(y) & Reading(z)) -> SameLanguage(x,z))", "score": 0}
{"id": "eqasc_validation_816", "prediction": "all x y.((Speedometer(x) & Radar(y)) -> GivesSameReading(x,y))", "score": 0}
{"id": "eqasc_validation_816", "prediction": "all x y.((Speedometer(x) & Radar(y)) -> GivesTheSameReadyAs(x,y))", "score": 0}
{"id": "eqasc_validation_816", "prediction": "all x y z.((Speedometer(x) & Radar(y) & Read(z)) -> GivesUniqueReading(x,y,z))", "score": 0}
{"id": "eqasc_validation_816", "prediction": "all x.(Speedometer(x) -> SameReading(x,Radar))", "score": 0}
{"id": "eqasc_validation_816", "prediction": "all x.(Speedometer(x) -> SameReadingAsRadar(x))", "score": 0}
{"id": "eqasc_validation_816", "prediction": "all x.(Speedometer(x) -> SameReading(x))", "score": 0}
{"id": "eqasc_validation_816", "prediction": "ALL x.(Speedometer(x) -> SameReading(x))", "score": -1}
{"id": "eqasc_validation_816", "prediction": "all x y.((Speedometer(x) & Radar(y)) -> GivesAsMoreReading(x,y))", "score": 0}
{"id": "eqasc_validation_817", "prediction": "all x y.((Odometer(x) & Distance(y)) -> UsesToMeasure(x,y))", "score": 0}
{"id": "eqasc_validation_817", "prediction": "all x y.((Odometer(x) & Distance(y)) -> MeasuresDistances(x,y))", "score": 0}
{"id": "eqasc_validation_817", "prediction": "all x y z.((Odometer(x) & DistanceMeasure(y) & DistanceMedication(z)) -> UsedFor(x,y,z))", "score": 0}
{"id": "eqasc_validation_817", "prediction": "all x y z.((Odometer(x) & Distance(y) & Distance(z)) -> Measures(x,y,z))", "score": 0}
{"id": "eqasc_validation_817", "prediction": "all x.(Odometer(x) -> MeasuresDistances(x))", "score": 0}
{"id": "eqasc_validation_817", "prediction": "all x.(Odometer(x) -> UsedToMeasureDistances(x))", "score": 0}
{"id": "eqasc_validation_817", "prediction": "all x y.([Odometer(x) & Distance(y)) -> Measures(x,y))", "score": -1}
{"id": "eqasc_validation_817", "prediction": "all x.(Odometer(x) & MeasureDistances(x))", "score": 0}
{"id": "eqasc_validation_817", "prediction": "all x y z.((Odometer(x) & Distance(y) & Distance(z)) -> MeasurementsUsing(x,y,z))", "score": 0}
{"id": "eqasc_validation_817", "prediction": "all x.(Odometer(x) -> MeasuresDistance(x))", "score": 0}
{"id": "eqasc_validation_817", "prediction": "all x y.((Odometer(x) & DistanceMeasure(y)) -> Measures(x,y))", "score": 0}
{"id": "eqasc_validation_817", "prediction": "all x.((Odometer(x) & MeasuresDistances(x)) -> UsefulToMeasureDistances(x))", "score": 0}
{"id": "eqasc_validation_817", "prediction": "all x.(Odometer(x) -> MeasuresDistanceMeasures(x))", "score": 0}
{"id": "eqasc_validation_818", "prediction": "all x.(MilesPerHourResistance(x) -> AverageOnly(x))", "score": 0}
{"id": "eqasc_validation_818", "prediction": "all x.((VehicleSpeed(x) & Average(x)) -> OnlyRides(x,0.3))", "score": -1}
{"id": "eqasc_validation_818", "prediction": "all x.((VehicleSpeed(x) & Average(x,0)) -> RisesBy(x,0.3))", "score": -1}
{"id": "eqasc_validation_818", "prediction": "all x.((VehicleSpeed(x) & Average(x)) -> Rises(x,0.3))", "score": -1}
{"id": "eqasc_validation_818", "prediction": "all x.((VehicleSpeed(x) & RisesBy(x,0.3)) -> Average(x))", "score": -1}
{"id": "eqasc_validation_818", "prediction": "all x y.((VehicleSpeed(x) & VehicleSpeed(y) & InReturn(x,y)) -> -0.3MopsPerHour(y))", "score": -1}
{"id": "eqasc_validation_818", "prediction": "all x.(AverageVehicleSpeed(x) -> AttractiveSurplus(x))", "score": 0}
{"id": "eqasc_validation_818", "prediction": "all x.((VehicleSpeed(x) & Average(x,0.3)) -> RisesTo(x,0.3))", "score": -1}
{"id": "eqasc_validation_818", "prediction": "all x.(AverageVehicleSpeed(x) -> (RisesBy(x,0.4) / PerHour(x)))", "score": -1}
{"id": "eqasc_validation_818", "prediction": "average vehiclespeed(r) -0.5M(r)).", "score": -1}
{"id": "eqasc_validation_818", "prediction": "all x.(AverageVehicleSpeed(x) -> (RisesBy(x,0.3)))", "score": -1}
{"id": "eqasc_validation_818", "prediction": "all x.(AverageVehicleSpeedRises(x,0.02) -> -HigherAverageSpeed(x,0.3))", "score": -1}
{"id": "eqasc_validation_818", "prediction": "all x.(AverageVehicleSpeed(x) -> Rises(x,0.3))", "score": -1}
{"id": "eqasc_validation_818", "prediction": "all x.(AverageVehicleSpeedRises(x,0.3) -> Alive(x))", "score": -1}
{"id": "eqasc_validation_818", "prediction": "all x.(AverageVehicleSpeedRises(x,0.3) -> CanRise(x))", "score": -1}
{"id": "eqasc_validation_818", "prediction": "all x.((VehicleSpeed(x) & Average(x,0.3)) -> RapidRises(x))", "score": -1}
{"id": "eqasc_validation_819", "prediction": "all x.(Speedometer(x) -> MeasuresMilesPerHour(x))", "score": 0}
{"id": "eqasc_validation_819", "prediction": "all x.(Speedometer(x) -> MeshesMilesPerHour (x)))", "score": -1}
{"id": "eqasc_validation_819", "prediction": "all x.(Speedometer(x) -> MeasuresMilesPerHours(x))", "score": 0}
{"id": "eqasc_validation_819", "prediction": "all x y.((Speedometer(x) & MilesPerHour(y)) -> Measures(x,y))", "score": 0}
{"id": "eqasc_validation_819", "prediction": "all x y.((Speedometer(x) & MeasuresMilesPerHour(x)) -> Speedometer(y))", "score": 0}
{"id": "eqasc_validation_819", "prediction": "all x y z.((Speedometer(x) & MeasureFeelPerHour(y) & MilesPerHour(z)) -> Measures(x,z))", "score": 0}
{"id": "eqasc_validation_820", "prediction": "all x y.((Driver(x) & Car(y)) -> FeedsFeedbackOnSpeed(x,y))", "score": 0}
{"id": "eqasc_validation_820", "prediction": "all x y.((Driver(x) & Car(y)) -> ProvidesFeedbackOnSpeedWithSpeedometer(x,y))", "score": 0}
{"id": "eqasc_validation_820", "prediction": "all x y z.((Driver(x) & Car(y) & Speedometer(z)) -> FeedsFeedbackOnSpeed(x,y,z))", "score": 0}
{"id": "eqasc_validation_820", "prediction": "all x y.((Treator(x) & Car(y)) -> FeedsFeedbackBySpeedometer(x,y))", "score": 0}
{"id": "eqasc_validation_820", "prediction": "all x.(Driver(x) -> FeedsFeedbackOnSpeedWithSpeedometer(x))", "score": 0}
{"id": "eqasc_validation_820", "prediction": "all x y z.((Driver(x) & Car(y) & Speedometer(z)) -> FeedsFeedbackForSpeed(x,y,z))", "score": 0}
{"id": "eqasc_validation_820", "prediction": "all x y z.((Driver(x) & Car(y) & Speedometer(z)) -> FeedsFeedback(x,y,z))", "score": 0}
{"id": "eqasc_validation_820", "prediction": "all x y.((Driver(x) & Car(y)) -> FeedsFeedbackWithSpeedometer(x,y))", "score": 0}
{"id": "eqasc_validation_820", "prediction": "all x y.((Driver(x) & Car(y)) -> FeedsFeedbackOnSpeedWithSpeedometer(x,y))", "score": 0}
{"id": "eqasc_validation_820", "prediction": "all x y.((Driver(x) & Car(y)) -> FeedsFinding(x,y))", "score": 0}
{"id": "eqasc_validation_820", "prediction": "all x y z.((Driver(x) & Car(y) & Speedometer(z)) -> FeedsFeedbackOnSpeedWith(x,y,z))", "score": 0}
{"id": "eqasc_validation_821", "prediction": "all x y.((Speedometer(x) & Driver(y)) -> (TellsHowFastVehicle(x,y) & TellsHowFastYouGoing(x,y)))", "score": 0}
{"id": "eqasc_validation_821", "prediction": "all x y.((Speedometer(x) & Driver(y)) -> ShowsFastVehicleGoingTo(y,x))", "score": 0}
{"id": "eqasc_validation_821", "prediction": "all x.(Speedometer(x) -> (TellsDriverHowFast(x) & VehicleSignsHowFastW.(x))))", "score": -1}
{"id": "eqasc_validation_821", "prediction": "all x y.((Speedometer(x) & Driver(y)) -> TellsFastVehicle(x,y))", "score": 0}
{"id": "eqasc_validation_821", "prediction": "all x y.((Speedometer(x) & Driver(y)) -> TellsHowFast(x,y))", "score": 0}
{"id": "eqasc_validation_821", "prediction": "all x y z.((Speedometer(x) & Driver(y) & Vehicle(z)) -> TellsRapidSpeed(x,y,z))", "score": 0}
{"id": "eqasc_validation_821", "prediction": "all x.(Speedometer(x) -> (TellsDriver(x) & HowFastVehicleGoes(x)))", "score": 0}
{"id": "eqasc_validation_821", "prediction": "all x.(Speedometer(x) -> Autonomy(x,Driver))", "score": 0}
{"id": "eqasc_validation_821", "prediction": "all x y z.((Speedometer(x) & Driver(y) & Vehicle(z)) -> FindsFastGoing(x,y,z))", "score": 0}
{"id": "eqasc_validation_821", "prediction": "all x y.((Speedometer(x) & Driver(y)) -> TellsHowFast(y,x))", "score": 0}
{"id": "eqasc_validation_821", "prediction": "all x y.((Speedometer(x) & Driver(y)) -> TellsFast(x,y))", "score": 0}
{"id": "eqasc_validation_821", "prediction": "all x.(Speedometer(x) -> (TellsDriverFast(x) & ExactlyHowFast(x)))", "score": 0}
{"id": "eqasc_validation_821", "prediction": "all x y.((Speedometer(x) & Driver(y)) -> TellsHasFastAuto(x,y))", "score": 0}
{"id": "eqasc_validation_821", "prediction": "all x y z.((Speedometer(x) & Driver(y) & Vehicle(z)) -> Tells(x,y,z))", "score": 0}
{"id": "eqasc_validation_822", "prediction": "all x.((Driver(x) & -WantsSpeedingTicket(x)) -> NoDriver(x))", "score": 0}
{"id": "eqasc_validation_822", "prediction": "all x.((Driver(x) & -WantsSpeedingTicket(x)) -> -WantsSpeedingTicket(x))", "score": 0}
{"id": "eqasc_validation_822", "prediction": "all x.(Roadrunner(x) -> -WantsSpeedingTicket(x))", "score": 0}
{"id": "eqasc_validation_822", "prediction": "-(Driver(x) & WantsSpeedingTicket(x))", "score": 0}
{"id": "eqasc_validation_822", "prediction": "all x.((Driver(x) & -LisesSpeedingTicket(x)) -> -Likely(x))", "score": 0}
{"id": "eqasc_validation_822", "prediction": "all x y.((Driver(x) & SpeedingTicket(y)) -> -WantsToGet(x,y))", "score": 0}
{"id": "eqasc_validation_822", "prediction": "Clearly, noDriverWantsToGetSpeedingTicket(x)!", "score": -1}
{"id": "eqasc_validation_822", "prediction": "exists x.(Driver(x) & -WantsToGainSpeedingTicket(x))", "score": 0}
{"id": "eqasc_validation_822", "prediction": "all x.((Driver(x) & -SpedingTicket(x)) -> NoDriverWantsToGet(x,Speeding))", "score": 0}
{"id": "eqasc_validation_822", "prediction": "all x.((Driver(x) & -LimitsSpeedingTicket(x)) -> -LimitsSpeedingTicket(x))", "score": 0}
{"id": "eqasc_validation_822", "prediction": "all x.(Driver(x) -> -HasSpeedingTicket(x))", "score": 0}
{"id": "eqasc_validation_823", "prediction": "all x y.((Driver(x) & Speedometer(y)) -> UsesToAvoidTicket(x,y))", "score": 0}
{"id": "eqasc_validation_823", "prediction": "all x y.((Driver(x) & Speedometer(y)) -> -DoesTicket(x,y))", "score": 0}
{"id": "eqasc_validation_823", "prediction": "all x.(Driver(x) -> UsesSpeedometerToAvoidTicketing(x))", "score": 0}
{"id": "eqasc_validation_823", "prediction": "all x y.((Driver(x) & Speedometer(y)) -> AvoidsTicket(x,y))", "score": 0}
{"id": "eqasc_validation_823", "prediction": "all x y z.((Driver(x) & Speedometer(y) & Ticket(z)) -> (UsesToAvoid(x,y,z)))", "score": 0}
{"id": "eqasc_validation_823", "prediction": "all x y.((Driver(x) & Speedometer(y)) -> UsedToAvoidTicket(x,y))", "score": 0}
{"id": "eqasc_validation_823", "prediction": "all x.(Driver(x) -> (UsesSpeedometer(x) & -GetTicket(x)))", "score": 0}
{"id": "eqasc_validation_823", "prediction": "all x y.((Driver(x) & Speedometer(y) & -RichTicket(x,y)) -> UsesToAvoid(x,y))", "score": 0}
{"id": "eqasc_validation_823", "prediction": "all x.((Driver(x) & UsesSpeedometer(x)) -> AvoidsTicket(x))", "score": 0}
{"id": "eqasc_validation_823", "prediction": "all x.(Driver(x) -> (UsesSpeedometer(x,y) & AvoidsTicket.)))", "score": -1}
{"id": "eqasc_validation_823", "prediction": "all x y z.((Driver(x) & Speedometer(y) & Ticket(z)) -> UsesToAvoid(x,y,z))", "score": 0}
{"id": "eqasc_validation_824", "prediction": "all x.(ExcessiveSpeed(x) -> FactorInManyAccidents(x))", "score": 0}
{"id": "eqasc_validation_824", "prediction": "all x y z.((ExcessiveSpeed(x) & Accident(y) & Accident(z)) -> FactorIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_824", "prediction": "all x y.((ExcessiveSpeed(x) & Accident(y)) -> FactorIn(z,y))", "score": 0}
{"id": "eqasc_validation_824", "prediction": "all x.(ExcessiveSpeed(x) -> InManyAccidents(x))", "score": 0}
{"id": "eqasc_validation_824", "prediction": "all x.(ExcessiveSpeed(x) -> ManyAccidents(x))", "score": 0}
{"id": "eqasc_validation_824", "prediction": "all x y.((ExcessiveSpeed(x) & Accident(y)) -> FactorIn(x,y))", "score": 0}
{"id": "eqasc_validation_825", "prediction": "all x.(Speedometer(x) -> CanHelpPreventAccidents(x))", "score": 0}
{"id": "eqasc_validation_825", "prediction": "all x.(Speedometer(x) -> PreventsAccidents(x))", "score": 0}
{"id": "eqasc_validation_825", "prediction": "all x.(Speedometer(x) -> HelpsPreventAccidents(x))", "score": 0}
{"id": "eqasc_validation_825", "prediction": "all x.(Speedometer(x) -> CanPreventAccidents(x))", "score": 0}
{"id": "eqasc_validation_825", "prediction": "all x.(Speedometer(x) -> AdvidesPreventingAccidents(x))", "score": 0}
{"id": "eqasc_validation_825", "prediction": "all x.(Speedometer(x) -> PreventThem(x))", "score": 0}
{"id": "eqasc_validation_825", "prediction": "all x y.((Speedometer(x) & Accident(y)) -> CanPrevent(x,y))", "score": 0}
{"id": "eqasc_validation_826", "prediction": "all x.(Speedometer(x) -> (GivesDriverFeedbackOnSpeedOfTruck(x) & FeedbackOnSpeedOfTruck(x)))", "score": 0}
{"id": "eqasc_validation_826", "prediction": "all x y.((Speedometer(x) & Driver(y) & Driver(z)) -> GivesFeedbackOnSpeedOfTruck(x,y,z))", "score": 0}
{"id": "eqasc_validation_826", "prediction": "all x y z.((Speedometer(x) & Driver(y) & Truck(z)) -> GivesFeedbackOnSpeed(x,y,z))", "score": 1}
{"id": "eqasc_validation_826", "prediction": "all x y.((Speedometer(x) & Driver(y)) -> (GiveFeedbackOnSpeedOfTruck(x,y) & GiveFeedbackOnSpeed(y,x)))", "score": 0}
{"id": "eqasc_validation_826", "prediction": "all x y z.((Speedometer(x) & Driver(y) & Truck(z)) -> UserGuideOfSpeed(x,y,z))", "score": 0}
{"id": "eqasc_validation_826", "prediction": "all x y z.((Speedometer(x) & Driver(y) & Truck(z) & GivesFeedbackOnSpeed(x,y,z)) -> UsedForFeedbackOnSpeed(x))", "score": 0}
{"id": "eqasc_validation_826", "prediction": "all x y.((Speedometer(x) & Driver(y)) -> GivesFeedbackOnSpeed(x,y))", "score": 0}
{"id": "eqasc_validation_826", "prediction": "all x y.((Speedometer(x) & Driver(y)) -> GivesFeedbackOnSpeedOfTruck(x,y))", "score": 0}
{"id": "eqasc_validation_826", "prediction": "all x y z.((Speedometer(x) & Driver(y) & Truck(z) & GivesFeedback(x,y,z)) -> Speedometer(x))", "score": 0}
{"id": "eqasc_validation_826", "prediction": "all x y z.((Speedometer(x) & Driver(y) & Truck(z)) -> GivesComparisonReaction(x,y,z))", "score": 0}
{"id": "eqasc_validation_826", "prediction": "all x y z.((Speedometer(x) & Driver(y) & Truck(z)) -> (GivesFeedback(x,y) & SpeedOf(y,z)))", "score": 0}
{"id": "eqasc_validation_826", "prediction": "all x y.((Speedometer(x) & Driver(y)) -> GivesFeedbackOnSpeedOnDouble(x,y))", "score": 0}
{"id": "eqasc_validation_826", "prediction": "all x y.((Speedometer(x) & Driver(y)) -> GivesFeedbackOnSpeedOffTruck(x,y))", "score": 0}
{"id": "eqasc_validation_826", "prediction": "all x.(Speedometer(x) -> (GivesDriverFeedbackOnSpeedOfTruck(x) & Driver(x)))", "score": 0}
{"id": "eqasc_validation_827", "prediction": "all x.(PolarBear(x) -> ColdEnvironment(x))", "score": 0}
{"id": "eqasc_validation_827", "prediction": "all x y z.((PolarBear(x) & Environment(y) & Temperature(z)) -> RequiresColdEnvironment(x,y,z))", "score": 0}
{"id": "eqasc_validation_827", "prediction": "all x.(PolarBear(x) -> RequiresColdEnvironment(x))", "score": 0}
{"id": "eqasc_validation_827", "prediction": "all x y.((PolarBear(x) & ColdEnvironment(y)) -> Requires(x,y))", "score": 0}
{"id": "eqasc_validation_827", "prediction": "all x.((PolarBear(x) & ColdEnvironment(x)) -> Requires(x,y))", "score": 0}
{"id": "eqasc_validation_827", "prediction": "all x.(DarkBeard(x) -> RequiresColdEnvironment(x))", "score": 0}
{"id": "eqasc_validation_828", "prediction": "all x.(PolarBear(x) -> GrowsFurToSurviveInCold(x))", "score": 0}
{"id": "eqasc_validation_828", "prediction": "all x.(PolarBear(x) -> EatsFur(x))", "score": 0}
{"id": "eqasc_validation_828", "prediction": "all x.(PolarBear(x) -> GrowsFurToSurviveCool(x))", "score": 0}
{"id": "eqasc_validation_828", "prediction": "all x.(PolarBear(x) -> (GrowsFur(x) & InCold(x)))", "score": 0}
{"id": "eqasc_validation_828", "prediction": "all x.(PolarBear(x) -> (GrowsFur(x) & SurvivesInCold(x)))", "score": 0}
{"id": "eqasc_validation_828", "prediction": "all x.(PolarBear(x) -> GrowsFur(x))", "score": 0}
{"id": "eqasc_validation_828", "prediction": "all x.(PolarBear(x) -> GrowsForCould(x))", "score": 0}
{"id": "eqasc_validation_829", "prediction": "all x y z.((PolarBear(x) & Fur(y) & Environment(z) & GrowsToSurvive(x,y,z)) -> GrowsToSurvive(x))", "score": 0}
{"id": "eqasc_validation_829", "prediction": "all x y.((PolarBear(x) & Fur(y)) -> GrowsToSurvive(x,y))", "score": 0}
{"id": "eqasc_validation_829", "prediction": "all x.(PolarBear(x) -> GrowsFurToSurvive(x))", "score": 0}
{"id": "eqasc_validation_829", "prediction": "all x y z.((PolarBear(x) & Fur(y) & Environment(z)) -> GrowsToSurvive(x,y,z))", "score": 0}
{"id": "eqasc_validation_829", "prediction": "all x.(PolarBear(x) -> GrowsFur(x))", "score": 0}
{"id": "eqasc_validation_829", "prediction": "all x y z.((PolarBear(x) & Fur(y) & Environment(z)) -> GrowsToSurviveIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_829", "prediction": "all x y z.((PolarBear(x) & Fur(y) & Environment(z) & Grows(x,y)) -> SurvivesInEnvironment(y,z))", "score": 0}
{"id": "eqasc_validation_829", "prediction": "all x y.((PotentialBear(x) & Fur(y)) -> GrowsFurToSurvive(x,y))", "score": 0}
{"id": "eqasc_validation_829", "prediction": "all x.(LemonBear(x) -> GrowsFurToSurvive(x))", "score": 0}
{"id": "eqasc_validation_829", "prediction": "all x.(PotoralBar(x) -> GrowsFurToSurviveInEnvironment(x))", "score": 0}
{"id": "eqasc_validation_829", "prediction": "all x.(PolarBear(x) -> (GrowsFurToSurvive(x) & Environment(x)))", "score": 0}
{"id": "eqasc_validation_829", "prediction": "all x.(PolarBear(x) -> exists y.((Fur(y) & GrowsFor(x,y)) & SurvivesInEnvironment(x))))", "score": -1}
{"id": "eqasc_validation_830", "prediction": "all x.(PolarBear(x) -> EatsSeals(x))", "score": 0}
{"id": "eqasc_validation_830", "prediction": "all x,y.((PolarBear(x) & Seal(y)) -> Eats(x,y))", "score": -1}
{"id": "eqasc_validation_830", "prediction": "all x.(PolarBear(x) -> PrimarilyEatsSeals(x))", "score": 0}
{"id": "eqasc_validation_830", "prediction": "all x.(SnowPalm(x) -> EatSeals(x))", "score": 0}
{"id": "eqasc_validation_831", "prediction": "all x.(Seal(x) -> LivesInColdEnvironment(x))", "score": 0}
{"id": "eqasc_validation_831", "prediction": "all x y.((Seal(x) & ColdEnvironment(y)) -> LivesIn(x,y))", "score": 0}
{"id": "eqasc_validation_831", "prediction": "all x.(Seal(x) -> LiveInColdEnvironment(x))", "score": 0}
{"id": "eqasc_validation_832", "prediction": "all x.(PolarBear(x) -> exists y.(Fur(y) & FurLayer(x,y)))", "score": 0}
{"id": "eqasc_validation_832", "prediction": "all x.(PolarBear(x) -> HasTwoLayersOfFur(x))", "score": 0}
{"id": "eqasc_validation_832", "prediction": "all x.(PolarBear(x) -> exists y.(FurLayer(y) & Layers(y,z)))", "score": 0}
{"id": "eqasc_validation_832", "prediction": "all x.(PolarBear(x) -> exists y.(Layers(y) & Fur(y) & Fur(y) & Fur(x,y)))", "score": 0}
{"id": "eqasc_validation_832", "prediction": "all x.(PolarBear(x) -> (HasThreeLayersOfFur(x) & ProvidesFullProtectionFromCold(x)))", "score": 0}
{"id": "eqasc_validation_832", "prediction": "all x.(PolarBear(x) -> (HasTwoLayersOfFur(x) & ProtectsFromCold(x)))", "score": 0}
{"id": "eqasc_validation_832", "prediction": "all x.(PolarBear(x) -> (HasTwoLayersOfFur(x) & ColdProtection(x)))", "score": 0}
{"id": "eqasc_validation_832", "prediction": "all x.(PosarBear(x) -> (HasTwoLayer(x) & FurForCare(x)))", "score": 0}
{"id": "eqasc_validation_832", "prediction": "all x.(PolarBear(x) -> (HasSixLayerFur(x) & ProtectsFromCold(x)))", "score": 0}
{"id": "eqasc_validation_832", "prediction": "all x.(PolarBear(x) -> (HasTwoLayersOfFur(x) & CoolProtection(x)))", "score": 0}
{"id": "eqasc_validation_832", "prediction": "all x.((PolarBear(x) & HasTwoLayersOfFur(x)) -> FurtherProtectionFromCold(x))", "score": 0}
{"id": "eqasc_validation_832", "prediction": "all x.(PolarBear(x) -> (HasTwoLayersOfFur(x) & ForColdProtection(x)))", "score": 0}
{"id": "eqasc_validation_833", "prediction": "all x.(PolarBear(x) -> HasTwoLayersOfFur(x))", "score": 0}
{"id": "eqasc_validation_833", "prediction": "all x.(PolarBear(x) -> (HasTwoLayersOfFur(x) & LivesInEnvironment(x)))", "score": 0}
{"id": "eqasc_validation_833", "prediction": "all x y.((PolarBear(x) & Fur(y,x)) -> (HasTwoLayer(x) & HasEnvironment(x,y)))", "score": 0}
{"id": "eqasc_validation_833", "prediction": "all x.(PolarBear(x) -> HasFurGrass(x,2))", "score": 0}
{"id": "eqasc_validation_833", "prediction": "all x.(PolarBear(x) -> HasTwoLayerOfFur(x))", "score": 0}
{"id": "eqasc_validation_833", "prediction": "all x.(PolarBear(x) -> (HasTwoLayersOfFur(x) & Live(x)))", "score": 0}
{"id": "eqasc_validation_833", "prediction": "all x.(PolarBear(x) -> 2LayerOfFur(x))", "score": 0}
{"id": "eqasc_validation_833", "prediction": "all x y z w.((PolarBear(x) & Fur(y) & Fur(z) & Fur(w)) -> HasTwoLayerLiving(x,z))", "score": 0}
{"id": "eqasc_validation_833", "prediction": "all x.(PolarBearPerformance(x) -> TwoLayersOfFur(x))", "score": 0}
{"id": "eqasc_validation_833", "prediction": "all x.(PolarBear(x) -> TwoLayersOfFur(x,4))", "score": 0}
{"id": "eqasc_validation_834", "prediction": "all x y.((PolarBear(x) & Arctic(y)) -> LivesIn(x,y))", "score": 0}
{"id": "eqasc_validation_834", "prediction": "all x.(PolarBear(x) -> LivesInArctic(x))", "score": 0}
{"id": "eqasc_validation_834", "prediction": "all x y.((PolarBear(x) & -PolarBear(y)) -> LivesInArctic(x,y))", "score": 0}
{"id": "eqasc_validation_834", "prediction": "all x y z.((PolarBear(x) & Arctic(y) & Arctic(z)) -> LivesIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_835", "prediction": "all x.(Arctic(x) -> ColdEnvironment(x))", "score": 0}
{"id": "eqasc_validation_835", "prediction": "all x.((Arctic(x) & ColdEnvironment(x)) -> ColdEnvironment(x))", "score": 0}
{"id": "eqasc_validation_835", "prediction": "All x.(Arctic(x) -> ColdEnvironment(x))", "score": -1}
{"id": "eqasc_validation_835", "prediction": "(ColdEnvironment(arctic) -> ColdEnvironment(arctic))", "score": 0}
{"id": "eqasc_validation_836", "prediction": "(ColdWeather(x) & Winter(x) & Snowing(x))", "score": 0}
{"id": "eqasc_validation_836", "prediction": "all x.(ColdWeather(x) -> (IsWinter(x) & Snowing(x)))", "score": 0}
{"id": "eqasc_validation_836", "prediction": "all x.(ColdWeather(x) -> (IsWinter(x) & Snow(x)))", "score": 0}
{"id": "eqasc_validation_836", "prediction": "(ColdWeather(now) & Winter(now) & Snowing(now))", "score": 0}
{"id": "eqasc_validation_836", "prediction": "exists x.(ColdWeather(x) & Winter(x) & Snowing(x))", "score": 0}
{"id": "eqasc_validation_836", "prediction": "all x.(ColdWeather(x) -> (Wine(x) & Snowing(x)))", "score": 0}
{"id": "eqasc_validation_836", "prediction": "isColdWeather(x) -> (IsWinter(x) & IsSnowing(x)))", "score": -1}
{"id": "eqasc_validation_836", "prediction": "all x.(ColdWeather(x) -> (Winter(x) & Snowing(x)))", "score": 0}
{"id": "eqasc_validation_836", "prediction": "(ColdWeather(um) & Winter(lum) & Snowing(um))", "score": 0}
{"id": "eqasc_validation_836", "prediction": "all x y z.((ColdWeather(x) & Winter(y) & Snowing(z)) -> (ClosedWeather(x) & Winter(y) & Snowing(z)))", "score": 0}
{"id": "eqasc_validation_836", "prediction": "isColdWeather(x) & Winter(x) & Snowing(x))", "score": -1}
{"id": "eqasc_validation_836", "prediction": "(ColdWeather(Warmweather) & Winter(Winter) & Snowing(Soil))", "score": 0}
{"id": "eqasc_validation_837", "prediction": "all x.(PolarBear(x) -> RequiresWinterEnvironmentWithSnow(x))", "score": 0}
{"id": "eqasc_validation_837", "prediction": "all x.(PolarBear(x) -> (RequiresWinterEnvironmentWithSnow(x)))", "score": 0}
{"id": "eqasc_validation_837", "prediction": "all x.(PaloorBear(x) -> RequiresWinterEnvironmentWithSnow(x))", "score": 0}
{"id": "eqasc_validation_837", "prediction": "all x.(PolarBear(x) -> (RequiresWinterEnvironmentInDark(x) & HasWinterSnow(x)))", "score": 0}
{"id": "eqasc_validation_837", "prediction": "all x.(PolarBear(x) -> (RequiresWinterEnvironment(x) & Snow(x)))", "score": 0}
{"id": "eqasc_validation_837", "prediction": "all x.(PolarBear(x) -> RequiresWarmEnvironmentWithSnow(x))", "score": 0}
{"id": "eqasc_validation_837", "prediction": "all x.((PolarBear(x) & WinterEnvironment(x) & Snow(x)) -> Requires(x))", "score": 0}
{"id": "eqasc_validation_837", "prediction": "all x.(PolarBear(x) -> (RequiresWinterEnvironment(x) & HasSnow(x)))", "score": 0}
{"id": "eqasc_validation_838", "prediction": "all x.(Lynx(x) -> LivesInColdSnowyEnvironments(x))", "score": 0}
{"id": "eqasc_validation_838", "prediction": "all x.(Lynx(x) -> LivesInCold(x))", "score": 0}
{"id": "eqasc_validation_838", "prediction": "all x.(Lynx(x) -> exists y z.(ColdSnowyEnvironment(y) & Environment(z) & LivesIn(x,y,z))))", "score": -1}
{"id": "eqasc_validation_838", "prediction": "all x y z.((Lynx(x) & ColdEnvironment(y) & SnowyEnvironment(z)) -> LivesIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_838", "prediction": "all x y.((Lynx(x) & Cold(y) & Snowy(z)) -> LivesIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_838", "prediction": "all x.(Lynx(x) -> (LivesInColdSnowyEnvironments(x) | LivesInSnowyEnvironments(x)))", "score": 0}
{"id": "eqasc_validation_838", "prediction": "all x y.((Lynx(x) & ColdSnowyEnvironment(y)) -> LivesIn(x,y))", "score": 0}
{"id": "eqasc_validation_838", "prediction": "all x.(Lynx(x) -> LivesInColdSnowYEnvironments(x))", "score": 0}
{"id": "eqasc_validation_838", "prediction": "all x.(Lynx(x) -> (LivesInColdSnowyEnvironments(x) & LivesInColdSnowyEnvironments(x)))", "score": 0}
{"id": "eqasc_validation_838", "prediction": "all x y.((Lynx(x) & ColdSnowYEnvironment(x)) -> LivesIn(x,y))", "score": 0}
{"id": "eqasc_validation_838", "prediction": "all x.(Lynx(x) -> LiveInColdSnowyEnvironments(x))", "score": 0}
{"id": "eqasc_validation_839", "prediction": "all x y z.((Lynx(x) & PolarBear(y) & ClimateRequirement(z)) -> SimilarClimateRequirements(x,y,z))", "score": 0}
{"id": "eqasc_validation_839", "prediction": "(SameClimateRequirementsAffinity(Lynx) | SameClimateRequirementsAffinity(PolarBear))", "score": 0}
{"id": "eqasc_validation_839", "prediction": "all x.((Lynx(x) | PolarBear(x)) -> SimilarClimateRequirements(x))", "score": 0}
{"id": "eqasc_validation_839", "prediction": "all x.((Lynx(x) & PolarBear(x)) -> SimilarClimateRequirements(x))", "score": 0}
{"id": "eqasc_validation_839", "prediction": "(ClimateRequirements(Lynx) & ClimateRequirements(PolarBears))", "score": 0}
{"id": "eqasc_validation_839", "prediction": "(SameClimateRequirements(Lynx,Lynx) & SimilarClimateRequirements(PolarBear(Lynx))", "score": -1}
{"id": "eqasc_validation_839", "prediction": "(SameClimateRequirements(Lynx,SilentClimate) & SimilarClimateRequirements(PolarBears,SilentClimate))", "score": 0}
{"id": "eqasc_validation_839", "prediction": "(SameClimateRequirements(Lynx) & SimilarClimateRequirements(PolarBear))", "score": 0}
{"id": "eqasc_validation_839", "prediction": "(ClimateRequirements(lynx) | ClimateRequirements(polar bears))", "score": -1}
{"id": "eqasc_validation_839", "prediction": "exists x.(Lynx(x) & PolarBear(x) & SimilarClimateRequirements(x))", "score": 0}
{"id": "eqasc_validation_839", "prediction": "all x y.((Lynx(x) & PolarBear(y)) -> SimilarClimateRequirements(x,y))", "score": 0}
{"id": "eqasc_validation_839", "prediction": "(Lynx(Lynx) & PolarBear(PolarBear) & SimilarClimateRequirements(Lynx,Lynx))", "score": 0}
{"id": "eqasc_validation_839", "prediction": "(exists x.(Lynx(x) & PolarBear(x)) & SimilarClimateRequirements(x))", "score": 0}
{"id": "eqasc_validation_840", "prediction": "all x.(ArcticAirMass(x) -> (ExtremelyCold(x) & ArcticOcean(x) & SourceRegion(x)))", "score": 0}
{"id": "eqasc_validation_840", "prediction": "all x.(ArcticAirMass(x) -> (ExtremelyCold(x) & SourceRegion(x,ArcticOcean)))", "score": 0}
{"id": "eqasc_validation_840", "prediction": "all x.((ArcticAirMass(x) & ArcticOcean(x)) -> ExtremelyCold(x))", "score": 0}
{"id": "eqasc_validation_840", "prediction": "all x.((ArcticAirMass(x) & ArcticOcean(y)) -> ExtremelyCold(x,y))", "score": 0}
{"id": "eqasc_validation_840", "prediction": "all x.(ArcticAirMass(x) -> (From(ArcticOcean(x) & AsSourceRegion(x))))", "score": -1}
{"id": "eqasc_validation_840", "prediction": "all x.((ArcticAirMasses(x) & ArcticOcean(x)) -> ExtremelyCold(x))", "score": 0}
{"id": "eqasc_validation_840", "prediction": "all x y.((Ocean(x) & ArcticAirMass(y)) -> (ExtremelyCold(y) & SourceRegionArcticOcean(z)))", "score": 0}
{"id": "eqasc_validation_840", "prediction": "all x y.((ArcticAirMass(x) & ArcticOcean(y)) -> ExtremelyCold(x))", "score": 0}
{"id": "eqasc_validation_840", "prediction": "all x.((ArcticAirMass(x) & IceLocation(x)) -> (ExtremelyCold(x) & SourceRegionOcean(x)))", "score": 0}
{"id": "eqasc_validation_840", "prediction": "all x.(ArcticAirMass(x) -> (ExtremelyCold(x) & SourceRahmenOcean(x)))", "score": 0}
{"id": "eqasc_validation_840", "prediction": "all x.(ArcticAirMass(x) & ExtremelyCold(x) & SourceRegion(x,arcticOcean))", "score": 0}
{"id": "eqasc_validation_840", "prediction": "all x.(ArcticAirMass(x) -> (ExtremelyCold(x) & SourceRegionArcticOcean(x)))", "score": 0}
{"id": "eqasc_validation_841", "prediction": "all x y z.((PolarBear(x) & Arctic(y) & Arctic(z)) -> LivesIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_841", "prediction": "all x.((PolarBear(x) & LivesInArctic(x)) -> CanLiveInArctic(x))", "score": 0}
{"id": "eqasc_validation_841", "prediction": "all x y.((PolarBear(x) & ArcticArctic(y)) -> CanLiveIn(x,y))", "score": 0}
{"id": "eqasc_validation_841", "prediction": "all x.(PolarBear(x) -> (LivingInArctic(x) | LivingInArctic(x)))", "score": 0}
{"id": "eqasc_validation_841", "prediction": "all x.(PolarBear(x) -> CanLiveInArctic(x))", "score": 0}
{"id": "eqasc_validation_841", "prediction": "all x y z.((PolarBear(x) & Arctic(y) & Arctic(z)) -> CanLiveIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_841", "prediction": "all x.(PolarBear(x) -> LivesInArctic(x))", "score": 0}
{"id": "eqasc_validation_841", "prediction": "all x y.((PolarBear(x) & Arctic(y)) -> CanLiveIn(x,y))", "score": 0}
{"id": "eqasc_validation_841", "prediction": "all x y z.((PlarBear(x) & Arctic(y) & Arctic(z)) -> CanLiveIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_841", "prediction": "all x y.((PolarBear(x) & Arctic(y) & LivesIn(x,y)) -> CanLiveIn(x,y))", "score": 0}
{"id": "eqasc_validation_842", "prediction": "all x y z.((Hurricane(x) & Land(y) & MovesOver(x,y) & Hurricane(z)) -> DecreasesStrength(z,y))", "score": 0}
{"id": "eqasc_validation_842", "prediction": "all x y.((Hurricane(x) & Land(y) & MovesOver(x,y)) -> DecreasesStrength(x,y))", "score": 0}
{"id": "eqasc_validation_842", "prediction": "all x y z w.(Hurricane(x) & Land(y) & Land(z) & MovesOver(x,y)) -> (DecreasesStrength(x,z) | ReducingStrength(x,w)))", "score": -1}
{"id": "eqasc_validation_842", "prediction": "all x y z.((Hurricane(x) & Land(y) & MovesOver(x,y)) -> (DecreasesStrength(z) & Hurricane(w)))", "score": 0}
{"id": "eqasc_validation_842", "prediction": "all x y z.((Hurricane(x) & Land(y) & MovesOver(x,y)) -> (DecreasesStrength(x) & Hurricane(z) & MovesOver(x,z)))", "score": 0}
{"id": "eqasc_validation_842", "prediction": "all x y.((Hurricane(x) & MovesOverLand(x)) -> (DecreasesStrength(y,x)))", "score": 0}
{"id": "eqasc_validation_842", "prediction": "all x y.((Hurricane(x) & MovesOverLand(x)) -> DecreasesStrength(y))", "score": 0}
{"id": "eqasc_validation_842", "prediction": "all x y z.((Hurricane(x) & Land(y) & Land(z) & MovesOver(x,z)) -> (DecreasedStrength(x) & Hurricane(x)))", "score": 0}
{"id": "eqasc_validation_842", "prediction": "all x y z.((Hurricane(x) & Land(y) & MovesOver(x,y)) -> DecreaseInStrength(x,z))", "score": 0}
{"id": "eqasc_validation_842", "prediction": "all x y z.((Hurricane(x) & LandMovement(y) & Hurricane(z)) -> (DecreaseDownStrength(z) & MovesOver(x,y,z))))", "score": -1}
{"id": "eqasc_validation_842", "prediction": "all x y z.((Hurricane(x) & Land(y) & Land(z) & MovesOver(x,y)) -> DecreaseInStrength(x,z))", "score": 0}
{"id": "eqasc_validation_842", "prediction": "all x y z.((Hurricane(x) & Land(y) & Land(z) & MovesOver(x,y,z)) -> DecreasesStrength(x,y))", "score": 0}
{"id": "eqasc_validation_842", "prediction": "all x y z.((Hurricane(x) & Land(y) & Land(z)) -> MovesOver(x,y,z))", "score": 0}
{"id": "eqasc_validation_842", "prediction": "all x y z.((Hurricane(x) & LandMove(y) & Hurricane(z) & MovesOver(x,y)) -> (DecreasedStrength(z) & DowngradedStrength(z)))", "score": 0}
{"id": "eqasc_validation_842", "prediction": "all x y z w.((Hurricane(x) & Land(y) & MovingOver(x,z)) -> DecreasesStrength(z,w))", "score": 0}
{"id": "eqasc_validation_842", "prediction": "all x y z.((Hurricane(x) & Land(y) & Float(z) & MovesOver(x,y) & Hurricane(x) & DecreaseInStrength(x)) -> WindsDescent(x))", "score": 0}
{"id": "eqasc_validation_843", "prediction": "all x.((Hurricane(x) & HitsLand(x)) -> (LosesImpact(x) & LosesHeat(x) & LosesImpact(x) & Weaks(x)))", "score": 0}
{"id": "eqasc_validation_843", "prediction": "all x.(Hurricane(x) -> (LastsHeat(x) & LosesMoisture(x) & WeakensLand(x)))", "score": 0}
{"id": "eqasc_validation_843", "prediction": "all x y.((Hurricane(x) & Land(y)) -> (LosesHeat(x,y) & LosesMoisture(x,y) & Weaks(x,y)))", "score": 0}
{"id": "eqasc_validation_843", "prediction": "all x.(Hurricane(x) -> (LosesHeat(x) & LosesMoisture(x) & Weakens(x)))", "score": 0}
{"id": "eqasc_validation_843", "prediction": "all x y.((Hurricane(x) & Land(y)) -> (LosesHeat(x) & LosesMoisture(x) & Weakens(x)))", "score": 0}
{"id": "eqasc_validation_843", "prediction": "all x.(Hurricane(x) -> (LaysHeat(x) & LosesMoisture(x) & Weakens(x)))", "score": 0}
{"id": "eqasc_validation_843", "prediction": "all x.((Hurricane(x) & HitsLand(x)) -> (LosesHeat(x) & LosesMoisture(x) & Strongens(x)))", "score": 0}
{"id": "eqasc_validation_843", "prediction": "all x.((Hurricane(x) & HitsLand(x)) -> (LosesHeat(x) & LosesMoisture(x) & Weakens(x)))", "score": 0}
{"id": "eqasc_validation_844", "prediction": "all x y.((Hurricane(x) & Strength(y)) -> (Decreases(x,y) & LosesHeat(x) & LosesMoisture(x)))", "score": 0}
{"id": "eqasc_validation_844", "prediction": "all x.((Hurricane(x) & DecroiteStructure(x)) -> (LosesHeat(x) & LosesMoisture(x)))", "score": 0}
{"id": "eqasc_validation_844", "prediction": "all x.((Hurricane(x) & DecreasesStrength(x)) -> (LosesHeat(x) & LosesMoisture(x)))", "score": 0}
{"id": "eqasc_validation_844", "prediction": "all x.(DecreasesStrength(x) -> (LosesHeat(x) & LosesMoisture(x)))", "score": 0}
{"id": "eqasc_validation_844", "prediction": "all x.((Hurricane(x) & DecreasingStrength(x)) -> (LosesHeat(x) & LosesMoisture(x)))", "score": 0}
{"id": "eqasc_validation_844", "prediction": "all x.(Hurricane(x) -> (DecreasesStrength(x) & LosesHeat(x) & LosesMoisture(x)))", "score": 0}
{"id": "eqasc_validation_844", "prediction": "all x y.((Hurricane(x) & DecreasesStrength(x)) -> (LosesHeat(x) & LosesMoisture(x)))", "score": 0}
{"id": "eqasc_validation_844", "prediction": "all x y.((Hurricane(x) & Heat(y)) -> Loses(x,y))", "score": 0}
{"id": "eqasc_validation_844", "prediction": "all x.(Hurricane(x) -> (DecreasesStrength(x) & LosesHeatAndMoisture(x)))", "score": 0}
{"id": "eqasc_validation_844", "prediction": "all x.((Hurricane(x) & DecreasesStrength(x)) -> LosesHeatAndMoisture(x))", "score": 0}
{"id": "eqasc_validation_845", "prediction": "all x.(LargeBodyOfLand(x) -> Continent(x))", "score": 0}
{"id": "eqasc_validation_845", "prediction": "all x.(LargeBodyOfLand(x) -> IndicatesContinent(x))", "score": 0}
{"id": "eqasc_validation_845", "prediction": "all x.(LeargeBodyOfLand(x) -> CallsContinent(x))", "score": 0}
{"id": "eqasc_validation_845", "prediction": "all x.(LargeBodyOfLand(x) -> continent(x))", "score": 0}
{"id": "eqasc_validation_845", "prediction": "all x.(GembestOfLand(x) -> Continence(x))", "score": 0}
{"id": "eqasc_validation_845", "prediction": "all x.(LargeBodyOfLand(x) -> Antarctic(x))", "score": 0}
{"id": "eqasc_validation_846", "prediction": "all x y.((Hurricane(x) & continent(y)) -> (MovesOver(x,y) & StrengthDecreases(x)))", "score": 0}
{"id": "eqasc_validation_846", "prediction": "all x y.((Hurricane(x) & MovesOverContinents(x,z)) -> StrengthDecreases(x))", "score": 0}
{"id": "eqasc_validation_846", "prediction": "all x y.((Hurricane(x) & Continence(y)) -> DecreasesStrength(x,y))", "score": 0}
{"id": "eqasc_validation_846", "prediction": "all x y.((Hurricane(x) & continent(y)) -> MovesOver(x,y))", "score": 0}
{"id": "eqasc_validation_846", "prediction": "all x y.((Hurricane(x) & Continence(y)) -> Moves(x,y))", "score": 0}
{"id": "eqasc_validation_846", "prediction": "all x y z.(Hurricane(x) -> (Moves(x,Y) & Continent(y) & Manoeuvring(x,z) & StrengthDecreases(z,y)))", "score": 0}
{"id": "eqasc_validation_846", "prediction": "all x.(Hurricane(x) -> MovesOverContinent(x))", "score": 0}
{"id": "eqasc_validation_846", "prediction": "all x.((Hurricane(x) & MovesOverContinents(x)) -> StrengthDecrease(x))", "score": 0}
{"id": "eqasc_validation_846", "prediction": "all x.((Hurricane(x) & MovesOverContinents(x)) -> StrengthDecreases(x))", "score": 0}
{"id": "eqasc_validation_846", "prediction": "all x y.((Hurricane(x) & Continence(y) & MovesOver(x,y)) -> StrengthDecreases(x))", "score": 0}
{"id": "eqasc_validation_846", "prediction": "all x.(Hurricane(x) -> (MovesOverContinents(x) & StrengthDecreases(x)))", "score": 0}
{"id": "eqasc_validation_846", "prediction": "all x.(Hurricane(x) -> (MovesOverContinent(x) & DecreasesStrength(x)))", "score": 0}
{"id": "eqasc_validation_847", "prediction": "all x.(Hurricane(x) -> GrowsStrengthFromWarmWaters(x))", "score": 0}
{"id": "eqasc_validation_847", "prediction": "all x.(Hurricane(x) -> GrowsStrengthFromWarmWater(x))", "score": 0}
{"id": "eqasc_validation_847", "prediction": "all x y.((Hurricane(x) & WarmWater(y)) -> GrowsStrengthFrom(x,y))", "score": 0}
{"id": "eqasc_validation_847", "prediction": "all x.(Horizon(x) -> GrowsStrengthFromWarmWaters(x))", "score": 0}
{"id": "eqasc_validation_847", "prediction": "all x y.((Hurricane(x) & WarmWaterWash(y)) -> GrowsStrengthFrom(x,y))", "score": 0}
{"id": "eqasc_validation_847", "prediction": "all x y.((Hurricane(x) & WarmWater(y)) -> GrowsStrength(x,y))", "score": 0}
{"id": "eqasc_validation_848", "prediction": "all x.(Hurricane(x) -> (WarmWater(x) & Land(x) & Worse(x) & Weaker(x)))", "score": 0}
{"id": "eqasc_validation_848", "prediction": "all x.(Hurricane(x) -> (Worse(x) over WarmWater(x) & Weaker(x)))", "score": -1}
{"id": "eqasc_validation_848", "prediction": "all x.(Hurricane(x) -> (WorseOverWarmWater(x) & WorseOverLand(x)))", "score": 0}
{"id": "eqasc_validation_848", "prediction": "all x.(Hurricane(x) -> (WorstOverWarmWater(x) & WeakerOverLand(x)))", "score": 0}
{"id": "eqasc_validation_848", "prediction": "all x.(Hurricane(x) -> (StillOverWarmWater(x) & SlowerOverLand(x)))", "score": 0}
{"id": "eqasc_validation_848", "prediction": "all x.(Hurricane(x) -> (Loder(x,warmWater) & Weaker(x,Land)))", "score": 0}
{"id": "eqasc_validation_848", "prediction": "all x y.((Hurricane(x) & WarmWater(y)) -> (Worse(x,y) | Wrong(x,y)))", "score": 0}
{"id": "eqasc_validation_848", "prediction": "all x y z w.((Hurricane(x) & WarmWater(y) & Land(z) & WarmWater(w)) -> (Worse(x,y) & Weaker(x,z)),)", "score": -1}
{"id": "eqasc_validation_848", "prediction": "all x.(Hurricane(x) -> (Worse(x,warmWater) & Weaker(x,Land)))", "score": 0}
{"id": "eqasc_validation_848", "prediction": "all x.(Hurricane(x) -> (HasRawWater(x) & -WarmWater(x) & -WeakerLand(x)))", "score": 0}
{"id": "eqasc_validation_848", "prediction": "all x.(Hurricane(x) -> (WorseOverWarmWater(x) & WeakerOverLand(x)))", "score": 0}
{"id": "eqasc_validation_848", "prediction": "all x.(Hurricane(x) -> (WorseOverWarmWater(x) & SweaterOverLand(x)))", "score": 0}
{"id": "eqasc_validation_848", "prediction": "all x y z.((Hurricane(x) & WarmWater(y) & Land(z)) -> (MoreRight(x,y) & Weaker(x,z)))", "score": 0}
{"id": "eqasc_validation_848", "prediction": "all x y.((Hurricane(x) & WarmWater(y)) -> (Safer(x,y) | Weaker(x,y)))", "score": 0}
{"id": "eqasc_validation_848", "prediction": "all x y z.((Hurricane(x) & WarmWater(y) & Land(z) & Worse(x,y) & Worse(x,z)) -> (WarmWater(x) & Weaker(x,z)))", "score": 0}
{"id": "eqasc_validation_848", "prediction": "all x.(Hurricane(x) -> (LowerOverWarmWater(x) & WeakerOverLand(x)))", "score": 0}
{"id": "eqasc_validation_849", "prediction": "all x.(Hurricane(x) -> (FiveStays(x,SaffirSimpsonScale) & BasedOnSaffirSimpsonScale(x)))", "score": 0}
{"id": "eqasc_validation_849", "prediction": "all x y.((Hurricane(x) & Category(y)) -> (DivisionsIn(x,y) & BasedOnSaffirSimpsonScale(x)))", "score": 0}
{"id": "eqasc_validation_849", "prediction": "all x.(Hurricane(x) -> StrongnessBasedOnSaffirSimpsonScale(x,5))", "score": 0}
{"id": "eqasc_validation_849", "prediction": "all x.(Horizon(x) -> (FiveStrengthCategories(x) & BasedOnSaffirSimpsonScene(x)))", "score": 0}
{"id": "eqasc_validation_849", "prediction": "all x.(Hurricane(x) -> (SaffirSimpsonScale(x) & Strength(x,5) & Strength(x,9)))", "score": 0}
{"id": "eqasc_validation_849", "prediction": "all x y.((Hurricane(x) & SaffirSimpsonScale(y)) -> DividedIntoFourGradeOfStrength(x,y))", "score": 0}
{"id": "eqasc_validation_849", "prediction": "all x.(Hurricane(x) -> (FiveStrengthCategories(x) & BasedOnSaffirSimpsonScale(x)))", "score": 0}
{"id": "eqasc_validation_849", "prediction": "all x y.((Hurricane(x) & Strength(y)) -> (Divided(x,y) & St.SaffirSimpson(x)))", "score": -1}
{"id": "eqasc_validation_849", "prediction": "all x.(Hurricane(x) -> (Division(x,y) & Strength(y) & BasedOnSaffirSimpsonSkala(x)))", "score": 0}
{"id": "eqasc_validation_849", "prediction": "all x y.((Hurricane(x) & Hurricane(y)) -> (FiveWheelCategories(x,y) & BasedOnSaffirSimpsonScale(x,y)))", "score": 0}
{"id": "eqasc_validation_849", "prediction": "all x.(Hurricane(x) -> (FiveStrengthCategories(x) & BasedOnSaffirSimpsonScales(x)))", "score": 0}
{"id": "eqasc_validation_849", "prediction": "all x y.((Hurricane(x) & Strength(y)) -> SaffirSimpsonScale(x,y))", "score": 0}
{"id": "eqasc_validation_849", "prediction": "all x.(Hurricane(x) -> (DividedIntoFiveStandards(x) & BasedOnSaffirSimpsonScale(x)))", "score": 0}
{"id": "eqasc_validation_849", "prediction": "all x.(Hurricane(x) -> (DivisionsThreat(x,6) & BasedOnSaffirSimpsonScale(x)))", "score": 0}
{"id": "eqasc_validation_849", "prediction": "all x y.((Hurricane(x) & SaffirSimpson(y)) -> StrengthTypes(x,y))", "score": 0}
{"id": "eqasc_validation_850", "prediction": "all x.((Hurricane(x) & MovesOverLand(x)) -> DropsOnSaffirSimpsonScale(x))", "score": 0}
{"id": "eqasc_validation_850", "prediction": "all x.(Hurricane(x) -> (MovesOverLand(x) & DropsOnSaffirSimpsonScale(x)))", "score": 0}
{"id": "eqasc_validation_850", "prediction": "all x y.((Hurricane(x) & Land(y) & MovesOver(x,y)) -> DropsOnSaffirSimpsonScale(x))", "score": 0}
{"id": "eqasc_validation_850", "prediction": "all x.(Hurricane(x) -> MovesOverLand(x))", "score": 0}
{"id": "eqasc_validation_850", "prediction": "all x.(MovesOverLand(x) -> (SaffirSimpsonScale(x) & DropsMovement(x)))", "score": 0}
{"id": "eqasc_validation_850", "prediction": "all x y.((Hurricane(x) & MovingOverLand(x) & SaffirSimpsonScales(y)) -> DropsOnSaffirSimpsonScales(x,y))", "score": 0}
{"id": "eqasc_validation_850", "prediction": "all x y.((Hurricane(x) & MovesOverLand(x)) -> DropsOnSaffirSimpsonScale(y))", "score": 0}
{"id": "eqasc_validation_850", "prediction": "all x y.((Hurricane(x) & Land(y)) -> MovesOnSaffirSimpsonScale(x,y))", "score": 0}
{"id": "eqasc_validation_850", "prediction": "all x.((Hurricane(x) & MovesOverFlat(x)) -> DropsOnSaffirSimpsonScales(x))", "score": 0}
{"id": "eqasc_validation_850", "prediction": "all x.((Hurricane(x) & MovesOverLand(x)) -> HasSaffirSimpsonScale(x))", "score": 0}
{"id": "eqasc_validation_851", "prediction": "all x.(Hurricane(x) -> ExtremelyDangerousStorm(x))", "score": 0}
{"id": "eqasc_validation_851", "prediction": "all x.(Hurricane(x) -> ExtremelyDangerous(x))", "score": 0}
{"id": "eqasc_validation_851", "prediction": "all x.(Hurricane(x) -> ExceptionallyDangerousStorm(x))", "score": 0}
{"id": "eqasc_validation_851", "prediction": "all x.(Hurricane(x) -> ExtremelyDangerStorm(x))", "score": 0}
{"id": "eqasc_validation_851", "prediction": "all x.(Hurricane(x) -> HighlyDangerousStorm(x))", "score": 0}
{"id": "eqasc_validation_852", "prediction": "all x y.((Storm(x) & ExtremelyDangerous(x) & MoveOverLand(x)) -> DecreaseInStrength(y))", "score": 0}
{"id": "eqasc_validation_852", "prediction": "all x y.((Storm(x) & ExtremelyDangerous(x) & MovesOverLand(x) & DecreasesStrength(y)) -> VeryTensible(x))", "score": 0}
{"id": "eqasc_validation_852", "prediction": "all x.((Storm(x) & ExtremelyDangerous(x) & MovesOverLand(x)) -> (DecreasesStrength(x)))", "score": 0}
{"id": "eqasc_validation_852", "prediction": "all x y.((AddressivelyDangerousStorm(x) & MoveOverLand(x) & MovingOverLand(y)) -> DecreasesInStrength(x,y))", "score": 0}
{"id": "eqasc_validation_852", "prediction": "all x.((Storm(x) & ExtremelyDangerous(x) & MoveOverLand(x)) -> AlloksDecreaseInStrength(x))", "score": 0}
{"id": "eqasc_validation_852", "prediction": "all x.((Storm(x) & ExtremelyDangerous(x)) -> (DecreaseInStrength(x))))", "score": -1}
{"id": "eqasc_validation_852", "prediction": "all x.((Storm(x) & ExtremelyDangerous(x)) -> (DecreasesStrength(x) & MovesWithLand(x)))", "score": 0}
{"id": "eqasc_validation_852", "prediction": "all x y.((Storm(x) & ExtremelyDangerous(x) & Land(y)) -> (DecreasesStrength(x,y)))", "score": 0}
{"id": "eqasc_validation_852", "prediction": "all x.((Storm(x) & ExtremelyDangerous(x)) -> (DecreaseStrength(x) & OverLand(x)))", "score": 0}
{"id": "eqasc_validation_852", "prediction": "all x y z.((Storm(x) & ExtremelyDangerful(x) & Land(y) & Land(z)) -> (DecreasesStrength(x) & -DecreasesStrength(x)))", "score": 0}
{"id": "eqasc_validation_852", "prediction": "all x y z.((Storm(x) & QuiteDangerousAtmosphere(y) & Land(z) & MovesOver(x,z)) -> DecreasesStability(x))", "score": 0}
{"id": "eqasc_validation_852", "prediction": "all x y.((Storm(x) & VeryDangerous(x) & MovesOverLand(x)) -> MinimizesStrength(y))", "score": 0}
{"id": "eqasc_validation_852", "prediction": "all x y z.((Storm(x) & Float(y) & Land(z) & ExtremelyDangerous(x) & Moves(x,y,z)) -> DecreasesStrength(x,y))", "score": 0}
{"id": "eqasc_validation_852", "prediction": "all x y.(((Storm(x) & ExtremelyDangerous(x)) & MoveOverLand(x,y)) -> DecreasesStrength(x))", "score": 0}
{"id": "eqasc_validation_852", "prediction": "all x y.((Storm(x) & ExtremelyDangerous(x) & MovesOverLand(x)) -> DecreasesStrength(y))", "score": 0}
{"id": "eqasc_validation_852", "prediction": "all x y.((Storm(x) & ExtremelyDangerous(x) and Land(y) & MovesOver(x,y)) -> DecreasedStrength(x))", "score": 0}
{"id": "eqasc_validation_853", "prediction": "all x y z.((Hurricane(x) & WarmTropicalWater(y) & Ocean(z)) -> (FormsOver(x,y,z) & DiesDown(x,y) & MovesOver(x,land)))", "score": 0}
{"id": "eqasc_validation_853", "prediction": "all x.(Hurricane(x) -> (FormsOverWarmTropicalWater(x) & DiesDown(x)))", "score": 0}
{"id": "eqasc_validation_853", "prediction": "all x.(Hurricane(x) -> (FormsOverWarmTropicalWaterInOcean(x) & DiesDownAsLand(x)))", "score": 0}
{"id": "eqasc_validation_853", "prediction": "all x y z.((Hurricane(x) & Ocean(y) & Land(z)) -> (FormsOverWarmTropicalWater(x,y) & DiesDown(x,z)))", "score": 0}
{"id": "eqasc_validation_853", "prediction": "all x y.((Hurricane(x) & WarmTropicalWater(y)) -> (FormsOver(x,y) & DiesDown(x)))", "score": 0}
{"id": "eqasc_validation_853", "prediction": "all x.(Hurricane(x) -> (FormsOverWarmTropicalWater(x) & DiesDown(x) & MovesOverLand(x)))", "score": 0}
{"id": "eqasc_validation_853", "prediction": "all x y.((Hurricane(x) & WarmThalingWater(y) & Ocean(z)) -> (FormsOver(x,y,z) & DiesDown(x,y)))", "score": 0}
{"id": "eqasc_validation_853", "prediction": "all x y z.((Hurricane(x) & WarmTropicalWater(y) & Ocean(z)) -> (FormsAbout(x,y) & DiesDeadWhenMoving(x,z)))", "score": 0}
{"id": "eqasc_validation_853", "prediction": "all x y z.((Hurricane(x) & WarmTropicalWater(y) & Ocean(z) & Land(w)) -> (FormsOver(x,y,z) & DiesDown(x)))", "score": 0}
{"id": "eqasc_validation_853", "prediction": "all x.(Hurricane(x) -> (FormsOverWarmTropicalWater(x) & DiesDownWhenMovingOverLand(x)))", "score": 0}
{"id": "eqasc_validation_853", "prediction": "all x.(Hurricane(x) -> (Form OverHotTropicalWater(x) & DieDownWhenMovingOverLand(x)))", "score": -1}
{"id": "eqasc_validation_853", "prediction": "all x y z.((Hurricane(x) & WarmTropicalWater(y) & Ocean(z)) -> (FormsOver(x,y,z) & DiesIn(x)))", "score": 0}
{"id": "eqasc_validation_853", "prediction": "all x y.((Hurricane(x) & WarmTropicalWater(y) & Ocean(y)) -> (FormsOver(x,y) & DiesDeadWhenMovingOverLand(x)))", "score": 0}
{"id": "eqasc_validation_853", "prediction": "all x y.((Hurricane(x) & WarmTropicalWater(x) & Ocean(y)) -> (FormsOver(x,y) & DiesDown(x,y)))", "score": 0}
{"id": "eqasc_validation_854", "prediction": "all x y z.((Hurricane(x) & WarmTropicalWater(z)) -> (FormsOver(x,y,z) & DecreasesStrengthOnGround(x)))", "score": 0}
{"id": "eqasc_validation_854", "prediction": "all x y z.((Hurricane(x) & WarmTropicalWater(y) & OceanDecreasesStrength(z)) -> FormsOver(x,y,z))", "score": 0}
{"id": "eqasc_validation_854", "prediction": "all x y z.((Hurricane(x) & WarmTropicalWater(y) & OceanDecreaseStrengthOnGround(z)) -> FormsOver(x,y,z))", "score": 0}
{"id": "eqasc_validation_854", "prediction": "all x y z.((Hurricane(x) & WarmTropicalWater(y) & OceanDecreaseStrength(z)) -> FormsOverGround(x))", "score": 0}
{"id": "eqasc_validation_854", "prediction": "all x y z.((Hurricane(x) & WarmThaiWater(y) & OceanDecreasedStrength(z)) -> FormedOver(x,y,z))", "score": 0}
{"id": "eqasc_validation_854", "prediction": "all x y.((Hurricane(x) & WarmTropicalWater(y) & OceanDecreaseStrengthOnGround(x)) -> FormsOverInCompany(x,y))", "score": 0}
{"id": "eqasc_validation_854", "prediction": "all x.(Hurricane(x) -> (FormsOverWarmTropicalWater(x) & OceanDescendsStrengthOnGround(x)))", "score": 0}
{"id": "eqasc_validation_854", "prediction": "all x y.((Hurricane(x) & WarmTropicalWater(y) & OceanDecreasesStrengthOnGround(x,Ground,Ground)) -> FormsOver(x,y))", "score": 0}
{"id": "eqasc_validation_854", "prediction": "all x.(Hurricane(x) -> (FormsOverWarmTropicalWater(x) & OceanDecreasesStrengthOnGround(x)))", "score": 0}
{"id": "eqasc_validation_854", "prediction": "all x y.((Horizon(x) & WarmTropicalWater(y)) -> FormsOverDecreasedStrengthOffGround(x,y))", "score": 0}
{"id": "eqasc_validation_854", "prediction": "all x y.((Hurricane(x) & WarmTropicalWater(y)) -> FromInFoundation(x,y))", "score": 0}
{"id": "eqasc_validation_854", "prediction": "all x.(Hurricane(x) -> FormsOverWarmTropicalWater(x))", "score": 0}
{"id": "eqasc_validation_854", "prediction": "all x.(Hurricane(x) & form overWarmTropicalWater(x) & OceanDecreaseDensityOnGround(x))", "score": -1}
{"id": "eqasc_validation_854", "prediction": "all x.(Hurricane(x) -> (FormOverWarmTropicalWater(x) & OceanDecreaseStiftOnGround(x)))", "score": 0}
{"id": "eqasc_validation_854", "prediction": "all x y.((Hurricane(x) & WarmTropicalWater(y) & OceanDecreaseStrengthOnGround(x)) -> FormsOver(x,y))", "score": 0}
{"id": "eqasc_validation_855", "prediction": "all x.(Hurricane(x) -> TropicalCyclone(x))", "score": 0}
{"id": "eqasc_validation_855", "prediction": "all x.(Rainforest(x) -> TropicalCyclone(x))", "score": 0}
{"id": "eqasc_validation_855", "prediction": "all x.(Hurricane(x) -> (TropicalCyclone(x) & IsPeriod(x)))", "score": 0}
{"id": "eqasc_validation_855", "prediction": "all x.(Hurricane(x) -> (TropicalCyclone(x) & Hurricane(x)))", "score": 0}
{"id": "eqasc_validation_855", "prediction": "all x.(Hurricane(x) - TropicalCyclone(x))", "score": -1}
{"id": "eqasc_validation_855", "prediction": "all x.(Hurricane(x) -> (TropicalCyclone(x) | TropicalCyclone(x)))", "score": 0}
{"id": "eqasc_validation_856", "prediction": "all x y.((TropicalCyclone(x) & MovesOverLand(x) & DecreaseStrength(x)) -> Tropical(x,y))", "score": 0}
{"id": "eqasc_validation_856", "prediction": "all x y z.((TropicalCyclone(x) & Land(y) & MovesOver(x,y)) -> (DecreasesStrength(x,z) & DecreasesStrength(z))))", "score": -1}
{"id": "eqasc_validation_856", "prediction": "all x.(TropicalCyclone(x) -> (MovesOverLand(x,Land) & DecreasedStrength(x)))", "score": 0}
{"id": "eqasc_validation_856", "prediction": "all x.((TropicalCyclone(x) & MovesOverLand(x)) -> DecreasesStrengthInLand(x))", "score": 0}
{"id": "eqasc_validation_856", "prediction": "all x y z.((TropicalCyclone(x) & Land(y) & Land(z)) -> (DecreasesStrength(x,y,z)))", "score": 0}
{"id": "eqasc_validation_856", "prediction": "all x y.((TropicalCyclone(x) & Land(y) & MovesOver(x,y)) -> DecreasesStrength(x,y))", "score": 0}
{"id": "eqasc_validation_856", "prediction": "all x.((TropicalCyclone(x) & MovesOverLand(x)) -> DecreasesStrength(x))", "score": 0}
{"id": "eqasc_validation_856", "prediction": "all x.((TropicalCyclone(x) & MovesOverLand(x)) -> (DecreasesStrengthInLand(x) & DecreasesStrengthInLand(x)))", "score": 0}
{"id": "eqasc_validation_856", "prediction": "all x y z.((TropicalCyclone(x) & Land(y) & TemporalCyclone(z)) -> (FlowsOver(x,y) & ImprovesStrength(x,z)))", "score": 0}
{"id": "eqasc_validation_856", "prediction": "all x y ans(x) & TropicalCyclone(y) & MovesOverLand(y,x) -> DecreasesStrength(x,y))", "score": -1}
{"id": "eqasc_validation_856", "prediction": "all x y.((TropicalCyclone(x) & MovesOverLand(x)) -> DecreasedStrength(x))", "score": 0}
{"id": "eqasc_validation_856", "prediction": "all x y.((TropicalCyclone(x) & LandMovement(y)) -> (DecreasesStrength(x,y)))", "score": 0}
{"id": "eqasc_validation_856", "prediction": "all x.(TropicalCyclone(x) -> (MovesOverLand(x) & DecreasesStrength(x)))", "score": 0}
{"id": "eqasc_validation_856", "prediction": "all x y.((TropicalCyclone(x) & MovesOverLand(x,y)) -> DecreasesStrength(x))", "score": 0}
{"id": "eqasc_validation_857", "prediction": "all x.(Blood(x) -> FluidConnectiveTissue(x))", "score": 0}
{"id": "eqasc_validation_857", "prediction": "(FluidConnectiveTissue(blood) -> Fluid(blood))", "score": 0}
{"id": "eqasc_validation_857", "prediction": "all x.((Blood(x) & FluidConnectiveTissue(x)) -> HasTissue(x))", "score": 0}
{"id": "eqasc_validation_857", "prediction": "all x y.((Blood(x) & ConnectiveTissue(y)) -> Fluid(x,y))", "score": 0}
{"id": "eqasc_validation_858", "prediction": "all x.(Blood(x) -> (ConnectiveTissue(x) & CarriesOxygen(x) & DeliversNutrientToTissues(x)))", "score": 0}
{"id": "eqasc_validation_858", "prediction": "all x.(Blood(x) -> (ConnectiveTissue(x) & CarriesOxygenToTissues(x) & DeliversNutrient(x)))", "score": 0}
{"id": "eqasc_validation_858", "prediction": "all x.((Blood(x) & ConnectiveTissue(x)) -> CarriesAndDistributesOxygenAndNutrient(x))", "score": 0}
{"id": "eqasc_validation_858", "prediction": "all x.(Blood(x) -> (ConnectiveTissue(x) & CarriesOxygen(x) & DeliversNutrient(x)))", "score": 0}
{"id": "eqasc_validation_858", "prediction": "all x.(Built(x) -> (ConnectiveTissue(x) & CarriesOrDeliversOxygenAndNutrientToTissues(x)))", "score": 0}
{"id": "eqasc_validation_858", "prediction": "all x.(Blood(x) -> (ConnectiveTissue(x) & CarriesOxygen(x) & DeliversNutrient(x) & ToTissues(x)))", "score": 0}
{"id": "eqasc_validation_858", "prediction": "all x y.((Blood(x) & Tissue(y)) -> (ConnectiveTissue(x) & CarriesOxygen(x) & DeliversNutrient(x)))", "score": 0}
{"id": "eqasc_validation_858", "prediction": "all x.(Blood(x) -> (ConnectiveTissue(x) & CarriesOxygenRelease(x) & DeliversNutrientToTissues(x)))", "score": 0}
{"id": "eqasc_validation_858", "prediction": "all x.(Blood(x) -> (ConnectiveTissue(x) & CarriesOxygenAndNutrient(x) & DeliversToTissues(x)))", "score": 0}
{"id": "eqasc_validation_858", "prediction": "all x.(Blood(x) -> (ConnectiveTissue(x) & CarriesOxygenSustainableNutrients(x)))", "score": 0}
{"id": "eqasc_validation_858", "prediction": "all x y.((Blood(x) & Tissue(y)) -> (Connective(x) & CarriesOxygenAndNutrient(x,y) & DeliversToTissues(x,y)))", "score": 0}
{"id": "eqasc_validation_858", "prediction": "all x y.((Blood(x) & ConnectiveTissue(y)) -> (Carries(x,y) & DeliversOrganismAndNutrient(x,y)))", "score": 0}
{"id": "eqasc_validation_858", "prediction": "all x.(Blood(x) -> (ConnectiveTissue(x) & Carries(x) & Delivers(x,oxygen) & Delivers(x,nutrient)))", "score": 0}
{"id": "eqasc_validation_859", "prediction": "all x y.((Blood(x) & Tissue(y)) -> (EmpoweredByOxygen(x) & DeliversNutrients(x,y)))", "score": 0}
{"id": "eqasc_validation_859", "prediction": "all x.(Blood(x) -> (FluidTissue(x) & DeliversOxygen(x) & DeliversNutrients(x) & ToTissues(x)))", "score": 0}
{"id": "eqasc_validation_859", "prediction": "all x.(Blood(x) -> (FluidTissue(x) & DeliversOxygenAndNutrients(x)))", "score": 0}
{"id": "eqasc_validation_859", "prediction": "all x.(Blood(x) -> (FluidTissue(x) & DeliveryOfOxygenAndNutrientsToTissues(x)))", "score": 0}
{"id": "eqasc_validation_859", "prediction": "all x.(Blood(x) -> (FluidTissue(x) & DeliversOxygen(x) & DeliversNutrients(x) & ToOtherTissues(x)))", "score": 0}
{"id": "eqasc_validation_859", "prediction": "all x.(Blood(x) -> (FluidTissue(x) & LiquidTissue(x) & DeliversOxygen(x) & DeliversNutrientsToTissues(x)))", "score": 0}
{"id": "eqasc_validation_859", "prediction": "all x y.((Holm(x) & Other(y)) -> (FluidTissue(x) & DeliversOxygen(x,y) & DeliversNutrientsTo(x,y)))", "score": 0}
{"id": "eqasc_validation_859", "prediction": "all x y.((Blood(x) & Tissue(y)) -> (FluidTissue(x) & DeliversOxygenandNutrients(x) & ToTissue(x,y)))", "score": 0}
{"id": "eqasc_validation_859", "prediction": "all x y z.((Blood(x) & FluidTissue(y) & Tissue(z) & DeliversOxygen(x,y) & DeliversNutrients(x,z)) -> Tissue(z))", "score": 0}
{"id": "eqasc_validation_859", "prediction": "all x.(Blood(x) -> (FluidTissue(x) & DeliversOxygen(x) & DeliversNutrients(x)))", "score": 0}
{"id": "eqasc_validation_859", "prediction": "all x y.((Blood(x) & OtherTissues(y) & Flowtissue(x)) -> Delivers(x,ox,ox,nutrients))", "score": 0}
{"id": "eqasc_validation_859", "prediction": "all x y.((Blood(x) & Tissue(y) & DeliversOxygen(x) & DeliversNutrientsToTissues(x)) -> FluidTissue(x))", "score": 0}
{"id": "eqasc_validation_859", "prediction": "all x y.((Blood(x) & Transcutaneous(y) & DeliversOxygen(x) & DeliversNutrients(x)) -> FluidTissue(x,y))", "score": 0}
{"id": "eqasc_validation_859", "prediction": "all x.((Blood(x) & FluidTissue(x) & DeliversOxygenAndNutrients(x)) -> (FluidTissue(x) & DeliveryOfOxygen(x) & DeliversNutrients(x)))", "score": 0}
{"id": "eqasc_validation_860", "prediction": "all x.(ConnectiveTissue(x) -> ViscoElastic(x))", "score": 0}
{"id": "eqasc_validation_860", "prediction": "all x.((ConnectiveTissue(x) & ViscoElastic(x)) -> Classed(x))", "score": 0}
{"id": "eqasc_validation_860", "prediction": "all x.(ContainiveTissue(x) -> ViscoElastic(x))", "score": 0}
{"id": "eqasc_validation_860", "prediction": "all x.((ConnectiveTissue(x) & ViscoElastic(x)) -> ClassedAs(x))", "score": 0}
{"id": "eqasc_validation_860", "prediction": "all x.(Vertico-ElasticTissue(x) -> ConnectiveTissue(x))", "score": -1}
{"id": "eqasc_validation_860", "prediction": "all x.(ConductiveTissue(x) -> ViscoElastic(x))", "score": 0}
{"id": "eqasc_validation_860", "prediction": "all x.( ConnectiveTissue(x) -> ViscoElastic(x))", "score": 0}
{"id": "eqasc_validation_861", "prediction": "all x.((Blood(x) & ViscoElastic(x)) -> ClassedAs(x))", "score": 0}
{"id": "eqasc_validation_861", "prediction": "all x.(Blood(x) -> ViscoElastic(x))", "score": 0}
{"id": "eqasc_validation_861", "prediction": "all x.((Blood(x) & ViscoElastic(x)) -> Classed(x))", "score": 0}
{"id": "eqasc_validation_861", "prediction": "all x.((Blood(x) & ViscoElastic(x)) -> Classified(x))", "score": 0}
{"id": "eqasc_validation_861", "prediction": "all x.(Viscoelastic(x) -> Blood(x))", "score": 0}
{"id": "eqasc_validation_861", "prediction": "all x.(Blue(x) -> ViscoElastic(x))", "score": 0}
{"id": "eqasc_validation_861", "prediction": "all x.((Blood(x) & ViscoElastic(x)) -> ClassedAs(x,y))", "score": 0}
{"id": "eqasc_validation_862", "prediction": "all x.(Blood(x) -> PulsedThroughBody(x))", "score": 0}
{"id": "eqasc_validation_862", "prediction": "all x y.((Blood(x) & Body(y)) -> PulsedThrough(x,y))", "score": 0}
{"id": "eqasc_validation_862", "prediction": "all x y z.((Blood(x) & Body(y) & PulsedThrough(x,y)) -> PulsedThrough(x,z))", "score": 0}
{"id": "eqasc_validation_862", "prediction": "all x.(Blue(x) -> PulsedThroughBody(x))", "score": 0}
{"id": "eqasc_validation_862", "prediction": "all x.(Half(x) -> PulsedThroughBody(x))", "score": 0}
{"id": "eqasc_validation_862", "prediction": "all x y z.((Blood(x) & Body(y) & PulsedThrough(x,y)) -> Pulsed(x,z))", "score": 0}
{"id": "eqasc_validation_862", "prediction": "all x.(Blood(x) -> PulsedThrough(x))", "score": 0}
{"id": "eqasc_validation_862", "prediction": "all x y z.((Blood(x) & Body(y) & PulsedThrough(z)) -> Pulled(x,y,z))", "score": 0}
{"id": "eqasc_validation_863", "prediction": "all x y.((FluidConnectiveTissue(x) & Body(y)) -> PulsedThrough(x,y))", "score": 0}
{"id": "eqasc_validation_863", "prediction": "all x y.((PulsedThroughBody(x) & Body(y)) -> LiquidConnectiveTissue(x,y))", "score": 0}
{"id": "eqasc_validation_863", "prediction": "all x y z.((FluidConnectiveTissue(x) & Body(y) & Body(z)) -> PulsedThrough(x,y,z))", "score": 0}
{"id": "eqasc_validation_863", "prediction": "all x y.((FluidConnectiveTissue(x) & Body(y) & PulsedThrough(x,y)) -> PulsedThrough(x,y))", "score": 0}
{"id": "eqasc_validation_863", "prediction": "all x y z w.((FluidConnectiveTissue(x) & Body(y) & Body(z) & PulsedThrough(x,w,z)) -> PulsedThrough(x,y,z))", "score": 0}
{"id": "eqasc_validation_863", "prediction": "all x y z or w.((FluidConnectiveTissue(x) & Body(y) & Body(z)) -> PulsedThrough(x,y,z))", "score": -1}
{"id": "eqasc_validation_863", "prediction": "all x y z.((FluidConnectiveTissue(x) & Body(y) & Body(z)) -> PulsedThroughTo(x,y,z))", "score": 0}
{"id": "eqasc_validation_863", "prediction": "all x.(FluidConnectiveTissue(x) -> PulsedThroughBody(x))", "score": 0}
{"id": "eqasc_validation_863", "prediction": "all x.((FluidConnectiveTissue(x) & PulsedThroughBody(x)) -> PulsedThroughBody(x))", "score": 0}
{"id": "eqasc_validation_864", "prediction": "all x.(Elements(x) -> (InBody(x) | InBody(x)))", "score": 0}
{"id": "eqasc_validation_864", "prediction": "all x.((Tissue(x) | Fluid(x)) -> ContainsMinerals(x))", "score": 0}
{"id": "eqasc_validation_864", "prediction": "all x.((Tissue(x) | Fluid(x)) -> ContainsMineralsInOf(x))", "score": 0}
{"id": "eqasc_validation_864", "prediction": "all x.((Tissues(x) & Fluids(x)) -> ContainsMilk(x))", "score": 0}
{"id": "eqasc_validation_864", "prediction": "all x.(TissuesAndFluids(x) -> ContainsMinerals(x))", "score": 0}
{"id": "eqasc_validation_864", "prediction": "all x.((Tissues(x) & Fluids(x) & InBody(x)) -> ContainsMinerals(x))", "score": 0}
{"id": "eqasc_validation_864", "prediction": "all x.((Tissue(x) & Fluid(x) & Body(x)) -> ContainsMinerals(x))", "score": 0}
{"id": "eqasc_validation_864", "prediction": "all x.((TissuesOfOrFluids(x) & Body(x)) -> ContainsMinerals(x))", "score": 0}
{"id": "eqasc_validation_864", "prediction": "all x.((Tissues(x) & Fluids(x)) -> ContainsMolecules(x))", "score": 0}
{"id": "eqasc_validation_864", "prediction": "all x.((Tissue(x) & FluidInBody(x)) -> ContainsMinerals(x))", "score": 0}
{"id": "eqasc_validation_864", "prediction": "all x.((Tissue(x) | Fluid(x)) -> Minerals(x))", "score": 0}
{"id": "eqasc_validation_864", "prediction": "all x.(Mineral(x) -> (Tissues(x) & FluidsInBody(x)))", "score": 0}
{"id": "eqasc_validation_864", "prediction": "all x.(Tissue(x) -> ContainsMineralsInBody(x))", "score": 0}
{"id": "eqasc_validation_864", "prediction": "all x.(IncorporatesMinerals(x) -> (TissuesAndFluidsInBody(x) & InBody(x)))", "score": 0}
{"id": "eqasc_validation_864", "prediction": "all x.((TissuesAndFluids(x) & Body(x)) -> ContainsMinerals(x))", "score": 0}
{"id": "eqasc_validation_865", "prediction": "all x y.((Blood(x,alcohol) & Body(y)) -> ContainsMinerals(x,y))", "score": 0}
{"id": "eqasc_validation_865", "prediction": "all x.(BloodInBody(x) -> ContainsMinerals(x))", "score": 0}
{"id": "eqasc_validation_865", "prediction": "all x.((Blood(x) & InBody(x)) -> ContainsMinerals(x))", "score": 0}
{"id": "eqasc_validation_865", "prediction": "all x y.((Blood(x) & Body(y)) -> ContainsMinerals(x,y))", "score": 0}
{"id": "eqasc_validation_865", "prediction": "all x y z.((Blood(x) & Body(y) & Minerals(z) & In(x,y,z)) -> Contains(x,y))", "score": 0}
{"id": "eqasc_validation_865", "prediction": "all x.(InBody(x) -> ContainsMinerals(x))", "score": 0}
{"id": "eqasc_validation_865", "prediction": "all x.((Blood(x) & Body(x)) -> ContainsMinerals(x))", "score": 0}
{"id": "eqasc_validation_865", "prediction": "all x.((Blood(x) & Body(y)) -> ContainsMinerals(x,y))", "score": 0}
{"id": "eqasc_validation_865", "prediction": "all x y z.((Blood(x) & Body(y) & Minerals(z)) -> Contains(x,y,z))", "score": 0}
{"id": "eqasc_validation_865", "prediction": "all x y z w.((Blue(x) & Body(y) & Minerals(z)) -> Contains(x,y,z,w))", "score": 0}
{"id": "eqasc_validation_866", "prediction": "all x y.((Flour(x) & Fluid(y)) -> (Flows(x) | Liquids(y)))", "score": 0}
{"id": "eqasc_validation_866", "prediction": "all x.((Fluid(x) & Flies(x)) -> (Liquids(x) & Flows(x) | Liquids(x))))", "score": -1}
{"id": "eqasc_validation_866", "prediction": "all x.(Liquid(x) -> (FlowingSubstance(x) & Liquids(x)))", "score": 0}
{"id": "eqasc_validation_866", "prediction": "all x.(Floid(x) -> (exists y.(Substance(y) & Flows(x)) & exists z.(Liquid(z) & Flows(z)))))", "score": -1}
{"id": "eqasc_validation_866", "prediction": "all x y.((Fluid(x) & Substance(y) & Flows(x,y)) -> Liquid(x))", "score": 0}
{"id": "eqasc_validation_866", "prediction": "all x.(Liquid(x) -> (AnySubstance(x) & Flows(x)) & all y.(Liquid(y) -> ExamplesOfLiquid(y))))", "score": -1}
{"id": "eqasc_validation_866", "prediction": "all x.((Fluid(x) & Flows(x)) -> (Liquids(x) & Fluids(x)))", "score": 0}
{"id": "eqasc_validation_866", "prediction": "all x.((Fluid(x) & Fluid(x)) -> (Flows(x) & Fluid(x)))", "score": 0}
{"id": "eqasc_validation_866", "prediction": "all x.(Fluid(x) -> (Waters(x) & Liquids(x)))", "score": 0}
{"id": "eqasc_validation_866", "prediction": "all x.(Liquid(x) -> (Fluid(x) | Fluid(x)))", "score": 0}
{"id": "eqasc_validation_866", "prediction": "all x y.((Fluid(x) & Fluid(y)) -> (Flows(x) & ExampleOf(y,x)))", "score": 0}
{"id": "eqasc_validation_866", "prediction": "all x.(Liquid(x) -> (Flows(x) & Liquid(x)))", "score": 0}
{"id": "eqasc_validation_866", "prediction": "all x.(Fluid(x) -> (MadeOf(x) & Flows(x) & Liquids(x)))", "score": 0}
{"id": "eqasc_validation_866", "prediction": "all x.(Liquid(x) -> (Floid(x) & Flows(x) & Liquid(x)))", "score": 0}
{"id": "eqasc_validation_866", "prediction": "all x.(Liquid(x) -> (Fluid(x) & exists y.(Liquid(y) & Flows(y))))", "score": 0}
{"id": "eqasc_validation_866", "prediction": "all x y.((Fluid(x) & Fluid(y)) -> (Float(x) & Liquid(y)))", "score": 0}
{"id": "eqasc_validation_867", "prediction": "all x.((Blood(x) & LiquidConnectiveTissue(x)) -> LiquidConnectiveTissue(x))", "score": 0}
{"id": "eqasc_validation_867", "prediction": "all x.((Blood(x) & LiquidConnectiveTissue(x)) -> LiquidConnectiveTissue. (LiquidConnectiveTissue(x) & ConnectiveTissue(x)))", "score": -1}
{"id": "eqasc_validation_867", "prediction": "all x.(Blood(x) -> LiquidConnectiveTissue(x))", "score": 0}
{"id": "eqasc_validation_867", "prediction": "all x.(Heart(x) -> LiquidConnectiveTissue(x))", "score": 0}
{"id": "eqasc_validation_867", "prediction": "all x.((Blood(x) & LiquidConnectiveTissue(x)) -> LiquidTissue(x))", "score": 0}
{"id": "eqasc_validation_867", "prediction": "all x y.((Blood(x) & LiquidConnectiveTissue(x) & LiquidConnectiveTissue(y)) -> LiquidConnectiveTissue(x))", "score": 0}
{"id": "eqasc_validation_867", "prediction": "all x y.((Blood(x) & LiquidConnectiveTissue(y)) -> LiquidTissue(x,y))", "score": 0}
{"id": "eqasc_validation_867", "prediction": "all x y.((Blood(x) & LiquidConnectiveTissue(y)) -> LiquidConnectiveTissue(x,y))", "score": 0}
{"id": "eqasc_validation_868", "prediction": "all x.(Blue(x) -> CarriesOxygenToBrain(x))", "score": 0}
{"id": "eqasc_validation_868", "prediction": "all x y.((Brain(x) & Blood(y)) -> CarriesOxygen(x,y))", "score": 0}
{"id": "eqasc_validation_868", "prediction": "all x y.((Blood(x) & Brain(y)) -> CarriesOxygenTo(x,y))", "score": 0}
{"id": "eqasc_validation_868", "prediction": "all x y.((Soul(x) & Brain(y)) -> CarriesOxygen(x,y))", "score": 0}
{"id": "eqasc_validation_868", "prediction": "all x.(Blood(x) -> CarriesOxygenToBrain(x))", "score": 0}
{"id": "eqasc_validation_868", "prediction": "all x.(OrganismCarriesBloodToBody(x) -> Carries(x,Organism))", "score": 0}
{"id": "eqasc_validation_868", "prediction": "all x y.((Bloode(x) & Brain(y)) -> CarriesOxygen(x,y))", "score": 0}
{"id": "eqasc_validation_868", "prediction": "all x y z.((blood(x) & Brain(y) & Oxygen(z) & Carries(x,y)) -> Carries(x,z))", "score": 0}
{"id": "eqasc_validation_868", "prediction": "all x y.((Lives(x) & Blood(y)) -> CarriesOxygenToBrain(y,x))", "score": 0}
{"id": "eqasc_validation_868", "prediction": "All x.(Blood(x) -> CarriesOxygenToBrain(x))", "score": -1}
{"id": "eqasc_validation_868", "prediction": "all x y.((Blue(x) & Brain(y)) -> CarriesOxygen(x,y))", "score": 0}
{"id": "eqasc_validation_868", "prediction": "all x y.((Blood(x) & Brain(y)) -> CarriesOxygen(x,y))", "score": 0}
{"id": "eqasc_validation_869", "prediction": "all x y.((FluidConnectiveTissue(x) & Brain(y)) -> CarriesOxygenTo(x,y))", "score": 0}
{"id": "eqasc_validation_869", "prediction": "all x.(FluidConnectiveTissue(x) -> CarriesOxygenToBody(x))", "score": 0}
{"id": "eqasc_validation_869", "prediction": "all x y.((FluidConnectiveTissue(x) & Brain(y)) -> CarriesOxygen(x,y))", "score": 0}
{"id": "eqasc_validation_869", "prediction": "all x y z.((FluidConstraintiveTissue(x) & Breath(y) & Brain(z)) -> CarriesOxygenTo(x,y,z))", "score": 0}
{"id": "eqasc_validation_869", "prediction": "all x y z.((FluidConnectiveTissue(x) & Brain(y) & Oxygen(z)) -> CarriesTo(x,y,z))", "score": 0}
{"id": "eqasc_validation_869", "prediction": "all x y z.((FluidConnectiveTissue(x) & Brain(y) & CarriesOxygen(x,z)) -> CarriesOxygenTo(x,y,z))", "score": 0}
{"id": "eqasc_validation_869", "prediction": "all x.(FluidConnectiveTissue(x) -> CarriesOxygenToBrain(x))", "score": 0}
{"id": "eqasc_validation_869", "prediction": "all x.(FluidConnectiveTissue(x) -> CarriesOxygen(x))", "score": 0}
{"id": "eqasc_validation_870", "prediction": "all x.(ConnectiveTissueCancer(x) -> Rare(x))", "score": 0}
{"id": "eqasc_validation_870", "prediction": "all x.(ConnectiveTissueCancer(x) -> Rarity(x))", "score": 0}
{"id": "eqasc_validation_870", "prediction": "all x.((ConnectiveTissueCancerous(x) & Rare(x)) -> Rare(x))", "score": 0}
{"id": "eqasc_validation_870", "prediction": "all x.(CreativeTissueCancer(x) -> Rare(x))", "score": 0}
{"id": "eqasc_validation_871", "prediction": "all x.(BloodCancer(x) -> Rare(x))", "score": 0}
{"id": "eqasc_validation_871", "prediction": "all x.(BloodCancerous(x) -> Rare(x))", "score": 0}
{"id": "eqasc_validation_871", "prediction": "all x.(BlueCancer(x) -> Rare(x))", "score": 0}
{"id": "eqasc_validation_871", "prediction": "all x.((BloodCancer(x) & Rare(x)) -> Has(x,y))", "score": 0}
{"id": "eqasc_validation_871", "prediction": "all x.(BloodCances(x) -> Rare(x))", "score": 0}
{"id": "eqasc_validation_872", "prediction": "all x y.((Compass(x) & Ocean(y)) -> Navigate(x,y))", "score": 0}
{"id": "eqasc_validation_872", "prediction": "all x y z.((Compass(x) & Ocean(y) & Ocean(z)) -> UsedToNavigate(x,y,z))", "score": 0}
{"id": "eqasc_validation_872", "prediction": "all x.(Compass(x) -> NavigatesOceans(x))", "score": 0}
{"id": "eqasc_validation_872", "prediction": "all x y.((Compass(x) & Ocean(y)) -> Navigates(x,y))", "score": 0}
{"id": "eqasc_validation_872", "prediction": "all x y z.((Compass(x) & Ocean(y) & Ocean(z)) -> Navigate(x,y,z))", "score": 0}
{"id": "eqasc_validation_872", "prediction": "all x.(Compass(x) -> NavigatesOcean(x))", "score": 0}
{"id": "eqasc_validation_872", "prediction": "all x y z.((Compass(x) & Ocean(y) & Ocean(z)) -> Navigates(x,y,z))", "score": 0}
{"id": "eqasc_validation_872", "prediction": "all x.(Compass(x) -> NavigateOceans(x))", "score": 0}
{"id": "eqasc_validation_872", "prediction": "all x y z w.((Compass(x) & Ocean(y) & Ocean(z) & Navigate(x,y,z)) -> Navigates(x,w))", "score": 0}
{"id": "eqasc_validation_872", "prediction": "all x y.((Compass(x) & Ocean(y)) -> NavigatesOceans(x,y))", "score": 0}
{"id": "eqasc_validation_873", "prediction": "all x.(OceanWaves(x) -> TravelOnWaterSurface(x))", "score": 0}
{"id": "eqasc_validation_873", "prediction": "all x.(OceanWaves(x) -> travelsOnWaterSurface(x))", "score": 0}
{"id": "eqasc_validation_873", "prediction": "all x.(OceanWaves(x) -> TravelsOnWaterSurface(x))", "score": 0}
{"id": "eqasc_validation_873", "prediction": "all x y.((OceanWaves(x) & Water(y)) -> TravelsOnSurface(x,y))", "score": 0}
{"id": "eqasc_validation_873", "prediction": "all x y z.((OceanWave(x) & Water(y) & Surface(z)) -> TravelsOn(x,y,z))", "score": 0}
{"id": "eqasc_validation_873", "prediction": "all x.(OceanWing(x) -> TravelOnWaterSurface(x))", "score": 0}
{"id": "eqasc_validation_873", "prediction": "all x y.((OceanWave(x) & Water(y)) -> TravelsOnSurface(x,y))", "score": 0}
{"id": "eqasc_validation_873", "prediction": "all x.(OceanWaves(x) -> (TravelsOnWaterSurface(x)))", "score": 0}
{"id": "eqasc_validation_873", "prediction": "all x.(OceanWaves(x) -> TravelsOnSurface(x))", "score": 0}
{"id": "eqasc_validation_873", "prediction": "all x y.((OceanWaves(x) & WaterSurface(y)) -> TravelsOn(x,y))", "score": 0}
{"id": "eqasc_validation_873", "prediction": "all x.(Position(x,ocean) -> TravelWithWater(x))", "score": 0}
{"id": "eqasc_validation_874", "prediction": "all x.(Compass(x) -> TravelsOnWater(x))", "score": 0}
{"id": "eqasc_validation_874", "prediction": "all x y.((Compass(x) & Water(y,x)) -> UsedToTravelOn(x,y))", "score": 0}
{"id": "eqasc_validation_874", "prediction": "all x.(Compass(x) -> TravelsOnWaterSurface(x))", "score": 0}
{"id": "eqasc_validation_874", "prediction": "all x y.((Compass(x) & Water(y)) -> UsedToTravel(x,y))", "score": 0}
{"id": "eqasc_validation_874", "prediction": "all x.(Compass(x) -> TravelsOnSurfaceOfWater(x))", "score": 0}
{"id": "eqasc_validation_874", "prediction": "all x.(Compass(x) -> UsedToTravelOnWaterSurface(x))", "score": 0}
{"id": "eqasc_validation_874", "prediction": "all x.(Compass(x) -> TravelSurface(x))", "score": 0}
{"id": "eqasc_validation_875", "prediction": "all x y z.((Magnet(x) & Compasse(y) & Compass(z)) -> UsedIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_875", "prediction": "all x.(Magnet(x) -> UsedInCompass(x))", "score": 0}
{"id": "eqasc_validation_875", "prediction": "all x y z.((Magnet(x) & Compasse(y) & Compasse(z)) -> UsedIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_875", "prediction": "all x.(Magnet(x) -> UsedInCompasses(x))", "score": 0}
{"id": "eqasc_validation_875", "prediction": "all x y.((Magnet(x) & Compasse(y)) -> UsedIn(x,y))", "score": 0}
{"id": "eqasc_validation_875", "prediction": "all x.(Magnet(x) -> UsedInComputers(x))", "score": 0}
{"id": "eqasc_validation_875", "prediction": "all x.(Magnet(x) -> UsedInCompasse(x))", "score": 0}
{"id": "eqasc_validation_875", "prediction": "all x.(Magnet(x) -> UsedInCompacts(x))", "score": 0}
{"id": "eqasc_validation_876", "prediction": "all x y.((Magnet(x) & Ocean(y)) -> Navigates(x,y))", "score": 0}
{"id": "eqasc_validation_876", "prediction": "all x.(Magnet(x) -> NavigatesOceans(x))", "score": 0}
{"id": "eqasc_validation_876", "prediction": "all x y z.((Magnet(x) & Ocean(y) & Ocean(z)) -> Navigate(x,y,z))", "score": 0}
{"id": "eqasc_validation_876", "prediction": "all x y.((Magnet(x) & Ocean(y)) -> UsedToNavigate(x,y))", "score": 0}
{"id": "eqasc_validation_876", "prediction": "all x.(Magnetos(x) -> NavigatesOceans(x))", "score": 0}
{"id": "eqasc_validation_876", "prediction": "all x.((Magnet(x) & Ocean(y)) -> Navigates(x,y))", "score": 0}
{"id": "eqasc_validation_876", "prediction": "all x y z.((Magnet(x) & Ocean(y) & Sea(z) & UsedToNavigate(x,y,z)) -> Navigate(x,y,z))", "score": 0}
{"id": "eqasc_validation_876", "prediction": "all x y.((Magnet(x) & Ocean(y)) -> Navigate(x,y))", "score": 0}
{"id": "eqasc_validation_877", "prediction": "(LargestOcean(east) -> PacificOcean(west))", "score": 0}
{"id": "eqasc_validation_877", "prediction": "all x y.((Ocean(x) & Earth(y)) -> Pacific(x,y))", "score": 0}
{"id": "eqasc_validation_877", "prediction": "all x y.((Ocean(x) & Ocean(y)) -> PacificOcean(x,y))", "score": 0}
{"id": "eqasc_validation_877", "prediction": "(LargestOceanOnEarth(Ocean,Pak))", "score": 0}
{"id": "eqasc_validation_877", "prediction": "largestOceanOnEarth(x) -> PacificOcean(x))", "score": -1}
{"id": "eqasc_validation_877", "prediction": "Located on Earth, this Ocean LargestOnOrbit(x,Pacific)", "score": -1}
{"id": "eqasc_validation_877", "prediction": "-LastOceanOnEarth(Pacadia)", "score": 0}
{"id": "eqasc_validation_877", "prediction": "LargestOceanOnEarth(x) -> PacificOcean(x))", "score": -1}
{"id": "eqasc_validation_877", "prediction": "(Ocean(Pacean) & LargestOnEarth(Pacific))", "score": 0}
{"id": "eqasc_validation_877", "prediction": "(LargestOcean(Ocean) -> PacificOcean(Ocean))", "score": 0}
{"id": "eqasc_validation_877", "prediction": "(LargestOceanOnEarth(Ocean(Ocean) & -MoreStaysOrbit(Ocean)(Earth))", "score": -1}
{"id": "eqasc_validation_877", "prediction": "(LargestOceanOnEarth(Ocean) | Ocean(Ocean)))", "score": -1}
{"id": "eqasc_validation_877", "prediction": "Der größteOceanOnEarth(x) -> PacificOcean(x))", "score": -1}
{"id": "eqasc_validation_877", "prediction": "all x y.((Ocean(x) & Earth(y)) -> PacificOcean(x,y))", "score": 0}
{"id": "eqasc_validation_877", "prediction": "(LargestOcean(x) & OnEarth(x))", "score": 0}
{"id": "eqasc_validation_877", "prediction": "(LargestOcean(x) -PacificOcean(x))", "score": -1}
{"id": "eqasc_validation_878", "prediction": "all x y z.((Compass(x) & Pacific(y) & Pacific(z)) -> Navigates(x,y,z))", "score": 0}
{"id": "eqasc_validation_878", "prediction": "all x y.((Compass(x) & Pacific(y)) -> Navigates(x,y))", "score": 0}
{"id": "eqasc_validation_878", "prediction": "all x y.((Compass(x) & Pacific(y)) -> NavigatesPacific(x,y))", "score": 0}
{"id": "eqasc_validation_878", "prediction": "all x y.((Compass(x) & Pacific(y) & Navigate(x,y)) -> Navigates(x,y))", "score": 0}
{"id": "eqasc_validation_878", "prediction": "all x y z.((Compass(x) & Pacific(y) & USPacific(z)) -> Navigates(x,y,z))", "score": 0}
{"id": "eqasc_validation_878", "prediction": "all x y.((Compass(x) & Pacific(y)) -> NavigatesWith(x,y))", "score": 0}
{"id": "eqasc_validation_878", "prediction": "all x y.((Compass(x) & Pacific(y)) -> NavigatesUsing(x,y))", "score": 0}
{"id": "eqasc_validation_878", "prediction": "all x y z.((Compass(x) & Pacific(y) & Pacific(z)) -> Navigates(x,z))", "score": 0}
{"id": "eqasc_validation_878", "prediction": "all x y z.((Compass(x) & Pacific(y) & Navigates(x,z)) -> (UsedForSurveillance(x),y) & Navigates(x,z)))", "score": -1}
{"id": "eqasc_validation_878", "prediction": "all x y z.((Compass(x) & Pacific(y) & Pacific(z)) -> NavigatesPacific(x,y,z))", "score": 0}
{"id": "eqasc_validation_879", "prediction": "all x.(MountlessNight(x) -> NavigatesWithCompass(x))", "score": 0}
{"id": "eqasc_validation_879", "prediction": "all x y.((MoonlessNight(x) & GeomagneticCompass(y)) -> NavigatesOn(x,y))", "score": 0}
{"id": "eqasc_validation_879", "prediction": "all x.(MoonlessNight(x) -> NavigatesWithCompass(x))", "score": 0}
{"id": "eqasc_validation_879", "prediction": "all x y.((MoonlessNight(x) & GeomagneticCompass(y)) -> Navigates(x,y))", "score": 0}
{"id": "eqasc_validation_879", "prediction": "all x.((SunlessNight(x) & GeomagneticCompass(x)) -> NavigatesWith(x,y))", "score": 0}
{"id": "eqasc_validation_879", "prediction": "all x y z.((MoonlessNight(x) & GeomagneticCompass(y) & MoonlessNight(z)) -> NavigatesWith(x,y,z))", "score": 0}
{"id": "eqasc_validation_879", "prediction": "all x.(MoonlessNight(x) -> NavigatesSolvelyWithGeomagneticCompass(x))", "score": 0}
{"id": "eqasc_validation_879", "prediction": "all x y.((MoonlessNight(x) & GeomagneticCompass(y)) -> NavigatesWith(x,y))", "score": 0}
{"id": "eqasc_validation_879", "prediction": "all x.(MoonlessNight(x) -> NavigatesSolelyWithCompass(x))", "score": 0}
{"id": "eqasc_validation_879", "prediction": "all x.((Night(x) & Moonless(x)) -> NavigateWithCompass(x))", "score": 0}
{"id": "eqasc_validation_879", "prediction": "all x.((MoonlessNight(x) & GeomagneticCompass(x)) -> NavigatesWith(x,z))", "score": 0}
{"id": "eqasc_validation_879", "prediction": "all x.(MoonlessNight(x) -> NavigatesByOtherCompass(x))", "score": 0}
{"id": "eqasc_validation_879", "prediction": "all x.((MoonlessNight(x) & GeomagneticCompass(x)) -> NavigatesWith(x,y))", "score": 0}
{"id": "eqasc_validation_880", "prediction": "all x.((Ocean(x) & MoonlessNight(y)) -> NavigatedOn(x,y))", "score": 0}
{"id": "eqasc_validation_880", "prediction": "all x y.((Ocean(x) & MoonlessNight(y) & LengthOfNight(x,y)) -> NavigatesAndOn(x,y))", "score": 0}
{"id": "eqasc_validation_880", "prediction": "all x.((Ocean(x) & MoonlessNight(x)) -> Navigates(x))", "score": 0}
{"id": "eqasc_validation_880", "prediction": "all x.((Ocean(x) & MoonlessNight(x)) -> NavigatesOnNight(x,y))", "score": 0}
{"id": "eqasc_validation_880", "prediction": "all x y.((Ocean(x) & MoonlessNight(y)) -> NavigableOn(x,y))", "score": 0}
{"id": "eqasc_validation_880", "prediction": "all x y.((Ocean(x) & MoonlessNight(y)) -> NavigatedOn(x,y))", "score": 0}
{"id": "eqasc_validation_880", "prediction": "all x y.((Ocean(x) & MoonlessNight(y)) -> CanNavigateDown(x,y))", "score": 0}
{"id": "eqasc_validation_880", "prediction": "all x.((Ocean(x) & MoonlessNight(x)) -> NavigatedOn(x,y))", "score": 0}
{"id": "eqasc_validation_880", "prediction": "all x y z.((Ocean(x) & MoonlessNight(y) & MoonlessNight(z)) -> Navigate(x,y,z))", "score": 0}
{"id": "eqasc_validation_880", "prediction": "all x.((Ocean(x) & MoonlessNight(x)) -> Navigateable(x))", "score": 0}
{"id": "eqasc_validation_880", "prediction": "all x.((Ocean(x) & MoonlessNight(x)) -> NavigatesOn(x,y))", "score": 0}
{"id": "eqasc_validation_880", "prediction": "all x y.((Ocean(x) & MoonlessNight(y)) -> Navigates(x,y))", "score": 0}
{"id": "eqasc_validation_880", "prediction": "all x.((Ocean(x) & MoonlessNight(x)) -> NavigatesOn(x))", "score": 0}
{"id": "eqasc_validation_880", "prediction": "all x.(Ocean(x) -> (NavigateOnMoonlessNights(x) & MoonlessNights(x)))", "score": 0}
{"id": "eqasc_validation_880", "prediction": "all x y.((Ocean(x) & MoonlessNight(y)) -> Navigated(x,y))", "score": 0}
{"id": "eqasc_validation_881", "prediction": "(-East): AtlanticOcean(-East))", "score": -1}
{"id": "eqasc_validation_881", "prediction": "(LittleNorthwestBoat(x) -> AtlanticOcean(x))", "score": 0}
{"id": "eqasc_validation_881", "prediction": "(East is AtlanticOcean(x) & ToEst(x))", "score": -1}
{"id": "eqasc_validation_881", "prediction": "(Eastern(AtlanticOcean)", "score": -1}
{"id": "eqasc_validation_881", "prediction": "Besides the Atlantic Ocean, there is the Atlantic(x)", "score": -1}
{"id": "eqasc_validation_881", "prediction": "(ToTheEast(Ocean) | AtlanticOcean(OTc)))", "score": -1}
{"id": "eqasc_validation_881", "prediction": "(and is west))", "score": -1}
{"id": "eqasc_validation_881", "prediction": "(ToTheEast(a) is AtlanticOcean(a))", "score": -1}
{"id": "eqasc_validation_881", "prediction": "(EastEnde(a) & AtlanticOcean(a))", "score": 0}
{"id": "eqasc_validation_881", "prediction": "(ToEastern(x) -> AtlanticOcean(x))", "score": 0}
{"id": "eqasc_validation_881", "prediction": "(SupremelyToTheEast(GhostOcean) & EastOcean(Ocean))", "score": 0}
{"id": "eqasc_validation_881", "prediction": "(And ToTheEastern(AtlanticOcean))", "score": -1}
{"id": "eqasc_validation_881", "prediction": "(East (Pacific Ocean) & East (AtlanticOcean)))", "score": -1}
{"id": "eqasc_validation_881", "prediction": "Und en route à l'Est (AtlanticOcean))", "score": -1}
{"id": "eqasc_validation_881", "prediction": "(ore-West(Ocean))", "score": -1}
{"id": "eqasc_validation_881", "prediction": "(To East is AtlanticOcean(Oxygen)", "score": -1}
{"id": "eqasc_validation_882", "prediction": "all x y.((Compass(x) & AtlanticAtlantic(y)) -> Navigates(x,y))", "score": 0}
{"id": "eqasc_validation_882", "prediction": "all x y.((Compass(x) & Atlantic(y)) -> NavigatesAtlantic(x,y))", "score": 0}
{"id": "eqasc_validation_882", "prediction": "all x y.((Compass(x) & Atlantic(y)) -> Navigates(x,y))", "score": 0}
{"id": "eqasc_validation_882", "prediction": "all x y.((Compass(x) & AtlanticAtlantic(y)) -> NavigatesAtlantic(x,y))", "score": 0}
{"id": "eqasc_validation_882", "prediction": "all x y z.((Compass(x) & Atlantic(y) & Atlantic(z)) -> Navigate(x,y))", "score": 0}
{"id": "eqasc_validation_882", "prediction": "all x y.((Compass(x) & Atlantic(y,x)) -> NavigatesAtlantic(x,y))", "score": 0}
{"id": "eqasc_validation_882", "prediction": "all x y z.((Compass(x) & Atlantic(y) & Atlantic(z)) -> Navigate(x,y,z))", "score": 0}
{"id": "eqasc_validation_882", "prediction": "all x y z.((Compass(x) & Atlantic(y) & Atlantic(z)) -> Navigates(x,y,z))", "score": 0}
{"id": "eqasc_validation_882", "prediction": "all x y z.((Compass(x) & AtlanticAtlantic(y) & AtlanticAtlantic(z)) -> Navigates(x,y,z))", "score": 0}
{"id": "eqasc_validation_883", "prediction": "all x.((Compass(x) & MagneticStorm(x)) -> DifficultNavigation(x))", "score": 0}
{"id": "eqasc_validation_883", "prediction": "all x.((NumerationByCompass(x) & MagneticStorm(x)) -> DifficultIn(x))", "score": 0}
{"id": "eqasc_validation_883", "prediction": "all x.(NavigationByCompass(x) -> ParticularlyDifficultDuringMagneticStorm(x))", "score": 0}
{"id": "eqasc_validation_883", "prediction": "all x.((CompassNavigation(x) & MagneticStorm(x)) -> ParticularlyDifficult(x))", "score": 0}
{"id": "eqasc_validation_883", "prediction": "all x.((Compass(x) & MagneticStorm(x)) -> DifficultToNavigate(x))", "score": 0}
{"id": "eqasc_validation_883", "prediction": "all x!((Compass(x) & MagneticStorm(x)) -> DifficultNavigation(x))", "score": 0}
{"id": "eqasc_validation_883", "prediction": "all x.((Compass(x) & MagneticStorm(x)) -> EspeciallyDifficultNavigation(x))", "score": 0}
{"id": "eqasc_validation_883", "prediction": "all x y.((Cenote(x) & MagnetStorm(z)) -> ParticularlyDifficult(x,y,z))", "score": 0}
{"id": "eqasc_validation_883", "prediction": "all x.(CompassNavigation(x) -> ParticularlyDifficultDuringMagneticStorm(x))", "score": 0}
{"id": "eqasc_validation_884", "prediction": "all x y.((MagneticStorm(x) & Ocean(y)) -> MoreDifficultOfNavigate(x,y))", "score": 0}
{"id": "eqasc_validation_884", "prediction": "all x.(DifficultyNavigatingOceansDuringMagneticStorm(x) -> MoreDifficultyNavigatingOceansDuringMagneticStorm(x))", "score": 0}
{"id": "eqasc_validation_884", "prediction": "all x.((NavigatesOcean(x) & MagneticStorm(x)) -> MoreDifficulty(x))", "score": 0}
{"id": "eqasc_validation_884", "prediction": "all x.((MagneticStorm(x) & Ocean(y)) -> (DifficultToNavigate(x,y)))", "score": 0}
{"id": "eqasc_validation_884", "prediction": "all x y.((MagneticStorm(x) & Ocean(y) & MagneticStorm(y)) -> MoreDelicateNavigation(x,y))", "score": 0}
{"id": "eqasc_validation_884", "prediction": "all x.((MagneticStorm(x) & NavigatesOceans(x)) -> MoreDifficult(x))", "score": 0}
{"id": "eqasc_validation_884", "prediction": "all x y.((MagneticStorm(x) & FloatingOceans(y)) -> MoreDifficultDuring(x,y))", "score": 0}
{"id": "eqasc_validation_884", "prediction": "all x y.((MagneticStorm(x) & Oceans(y)) -> MoreDifficultNavigatingDuring(x,y))", "score": 0}
{"id": "eqasc_validation_884", "prediction": "all x y z.((MagneticStorm(x) & Ocean(y) & MagneticStorm(z)) -> MoreDifficultToNavigate(x,y,z))", "score": 0}
{"id": "eqasc_validation_884", "prediction": "all x y.((MagneticStorm(x) & Ocean(y)) -> MoreDifficultNavigating(x,y))", "score": 0}
{"id": "eqasc_validation_884", "prediction": "all x y z.((MagneticStorm(x) & Ocean(y) & MagneticStorm(z)) -> MoreDifficultNavigate(x,y,z))", "score": 0}
{"id": "eqasc_validation_884", "prediction": "all x y.((MagneticStorm(x) & Ocean(y)) -> MoreDifficultIn(x,y))", "score": 0}
{"id": "eqasc_validation_884", "prediction": "all x.((MagneticStorm(x) & NavigateOceans(x)) -> MoreDifficultDuring(x,y))", "score": 0}
{"id": "eqasc_validation_884", "prediction": "all x.((NavigatingOceans(x) & MagneticStorm(x)) -> MoreDifficultyVia(x))", "score": 0}
{"id": "eqasc_validation_884", "prediction": "all x y.((MagneticStorm(x) & Ocean(y)) -> DifficultNavigation(x,y))", "score": 0}
{"id": "eqasc_validation_884", "prediction": "all x.((NavigatingOceans(x) & MagneticStorm(x)) -> MoreDifficult(x))", "score": 0}
{"id": "eqasc_validation_885", "prediction": "all x.(MapNavigator(x) -> (UsesGridNorth(x) | UtilizesMagneticNorth(x)))", "score": 0}
{"id": "eqasc_validation_885", "prediction": "all x y.((MapNavigator(x) & (GridNorth(y) | MagneticNorth(y))) -> UseDefault(x,y))", "score": 0}
{"id": "eqasc_validation_885", "prediction": "all x.(MapNavigator(x) -> (UsesGridNorth(x) | UsesMagneticNorth(x)))", "score": 0}
{"id": "eqasc_validation_885", "prediction": "all x.(MapNavigator(x) -> (AppliesGridNorth(x) | AppliesMagneticNorth(x)))", "score": 0}
{"id": "eqasc_validation_885", "prediction": "all x.(MapNavigator(x) -> (GridNorth(x) | MagneticNorth(x)))", "score": 0}
{"id": "eqasc_validation_885", "prediction": "all x y.((MapNavigator(x) & GridNorth(y)) | MagneticNorth(y)) -> UsesDefault(x,y))", "score": -1}
{"id": "eqasc_validation_885", "prediction": "all x.(MapNurtior(x) -> (WastesGridNorth(x) | UsesMagneticNorth(x)))", "score": 0}
{"id": "eqasc_validation_885", "prediction": "(SecondVerdict(MapNavigator) -> (HasGridNorth(MapNavigator) | HasMagneticNorth(MapNavigator)))", "score": 0}
{"id": "eqasc_validation_885", "prediction": "all x.(MapNavigator(x) -> (WesternDown(x) | MagneticNorth(x)))", "score": 0}
{"id": "eqasc_validation_885", "prediction": "all x.(MapNavigator(x) -> (GrindNorth(x) | MagneticNorth(x)))", "score": 0}
{"id": "eqasc_validation_886", "prediction": "all x.(Compass(x) -> FoundMagneticNorth(x))", "score": 0}
{"id": "eqasc_validation_886", "prediction": "all x.(Compass(x) -> FindsMagneticNorth(x))", "score": 0}
{"id": "eqasc_validation_886", "prediction": "all x y z.((Compass(x) & MagneticNorth(y) & Magnet(z)) -> UsedForFollowing(x,y,z))", "score": 0}
{"id": "eqasc_validation_886", "prediction": "all x.(Compass(x) -> LocatesMagneticNorth(x))", "score": 0}
{"id": "eqasc_validation_886", "prediction": "all x y.((Compass(x) & MagneticNorth(y)) -> UsedToFind(x,y))", "score": 0}
{"id": "eqasc_validation_886", "prediction": "all x.(Compass(x) -> MagneticNorthFinds(x))", "score": 0}
{"id": "eqasc_validation_886", "prediction": "all x.(Compass(x) -> UsesReachMagneticNorth(x))", "score": 0}
{"id": "eqasc_validation_886", "prediction": "all x y.((Compass(x) & MagneticNorth(y)) -> Finds(x,y))", "score": 0}
{"id": "eqasc_validation_886", "prediction": "all x.(Compass(x) -> MagneticNorth(x))", "score": 0}
{"id": "eqasc_validation_887", "prediction": "(NavigateOcean(magnet) -> NavigateOcean(magnet))", "score": 0}
{"id": "eqasc_validation_887", "prediction": "all x y z.((Magnet(x) & Ocean(y) & Ocean(z)) -> Navigates(x,y,z))", "score": 0}
{"id": "eqasc_validation_887", "prediction": "all x y.((Magnet(x) & Ocean(y)) -> (Navigate(x,y) | Navigate(x,y)))", "score": 0}
{"id": "eqasc_validation_887", "prediction": "all x y.((Magnet(x) & Ocean(y)) -> Navigates(x,y))", "score": 0}
{"id": "eqasc_validation_887", "prediction": "all x.(Magnet(x) -> NavigatesOceans(x))", "score": 0}
{"id": "eqasc_validation_887", "prediction": "all x.(Magnet(x) -> NaviesOceans(x))", "score": 0}
{"id": "eqasc_validation_887", "prediction": "all x y z.((Magnet(x) & Ocean(y) & Ocean(z)) -> Navigate(x,y,z))", "score": 0}
{"id": "eqasc_validation_887", "prediction": "all x y.((Magnet(x) & Ocean(y)) -> Navigate(x,y))", "score": 0}
{"id": "eqasc_validation_888", "prediction": "all x.((Compass(x) & NavigatesPacific(x)) -> CanBeHas(x,Compass))", "score": 0}
{"id": "eqasc_validation_888", "prediction": "all x.((Navigates(x) & Compass(x)) -> LocatedInPacific(x))", "score": 0}
{"id": "eqasc_validation_888", "prediction": "all x.(CanNavigateWithCompass(x) -> Pacific(x))", "score": 0}
{"id": "eqasc_validation_888", "prediction": "all x.((Navigation(x) & Compass(x)) -> NavigatesPacific(x))", "score": 0}
{"id": "eqasc_validation_888", "prediction": "all x.(ConvidesWithCompass(x) -> LocatedInPacific(x))", "score": 0}
{"id": "eqasc_validation_888", "prediction": "exists x y.(Pacife(x) & Compass(y) & Navigates(x,y))", "score": 0}
{"id": "eqasc_validation_888", "prediction": "all x.((Compass(x) | Pacific(x))) -> NavigatesEarth(x))", "score": -1}
{"id": "eqasc_validation_888", "prediction": "all x.((Compass(x) & NavigatesPacific(x)) -> CanNavigate(x,Pacific))", "score": 0}
{"id": "eqasc_validation_888", "prediction": "all x y.((Compass(x) & Pacific(y)) -> NavigatesWith(x,y))", "score": 0}
{"id": "eqasc_validation_888", "prediction": "all x.((Compass(x) & NavigatesPace(x)) -> HasTrails(x,Pace))", "score": 0}
{"id": "eqasc_validation_888", "prediction": "all x.((Compass(x) & NavigateInPacific(x)) -> CanNavigateWith(x,Pacific))", "score": 0}
{"id": "eqasc_validation_888", "prediction": "all x.(NoCalcation(x) -> ComesWithCompass(x))", "score": 0}
{"id": "eqasc_validation_888", "prediction": "all x.((Compass(x) & NavigatePactic(x)) -> -StaysIn(x,Pac))", "score": 0}
{"id": "eqasc_validation_888", "prediction": "all x.(NavigatesWithCompass(x) -> NativeDiverseDiverseDiverseDiverseDiagnostic(x))", "score": 0}
{"id": "eqasc_validation_888", "prediction": "all x.((Compass(x) & NavigatesCardio(x,Cardio)) -> WorksWith(x,Compass))", "score": 0}
{"id": "eqasc_validation_888", "prediction": "all x y.((Compass(x) & Pacific(y)) -> Navigates(x,y))", "score": 0}
{"id": "eqasc_validation_889", "prediction": "all x.(NauticalChart(x) -> (UsedByMarinersAndBoaters(x) & NavigatesOnOcean(x)))", "score": 0}
{"id": "eqasc_validation_889", "prediction": "all x.(NauticalChart(x) -> UsedByMarinersAndBoaters(x))", "score": 0}
{"id": "eqasc_validation_889", "prediction": "all x.(NauticalChart(x) -> (LearnsToNavigate(x) & Navigate(x) & Navigates(x)))", "score": 0}
{"id": "eqasc_validation_889", "prediction": "all x y.((NauticalChart(x) & Mariner(y) & Boater(z)) -> UsedBy(x,y,z))", "score": 0}
{"id": "eqasc_validation_889", "prediction": "all x.(NauticalChart(x) -> (UsedByMarinersAndBoaters(x) & SafeNavigators(x)))", "score": 0}
{"id": "eqasc_validation_889", "prediction": "all x.(NauticalChart(x) -> (UsedByMariners(x) | UsedByBoaters(x)) & SafelyNAvigatesOnOcean(x))", "score": 0}
{"id": "eqasc_validation_889", "prediction": "all x y.((NavigatorChart(x) & Mariner(y)) -> CanNavigateOnOcean(x,y))", "score": 0}
{"id": "eqasc_validation_889", "prediction": "all x y.((NauticalChart(x) & Mariner(y) & Boater(y)) -> UsedBy(x,y))", "score": 0}
{"id": "eqasc_validation_889", "prediction": "all x.(NauticalChart(x) -> (UsedByMariners(x) | UsedByBoaters(x)) & SafeNavigate(x)))", "score": -1}
{"id": "eqasc_validation_889", "prediction": "all x y z.((NauticalChart(x) & Mariner(y) & Boater(z)) -> (MadeAsSafeTree(x,y,z) & NavigateOnOcean(z)))", "score": 0}
{"id": "eqasc_validation_889", "prediction": "all x y.((NauticalChart(x) & Mariner(y)) -> (UsedBy(x,y) | UsedBy(x,y)) & Contains(x,y)))", "score": -1}
{"id": "eqasc_validation_889", "prediction": "all x y.((NavigatorChart(x) & Mariner(y) & Boater(y)) -> UseSecureNavigate(x,y))", "score": 0}
{"id": "eqasc_validation_889", "prediction": "all x y z.((NauticalChart(x) & Mariner(y) & Boater(z)) -> UsedBy(x,y,z))", "score": 0}
{"id": "eqasc_validation_889", "prediction": "all x y.((AquaticChart(x) & Mariner(y) & Boater(y)) -> SafeNavigator(x,y))", "score": 0}
{"id": "eqasc_validation_889", "prediction": "all x y.((NauticalChart(x) & Mariner(y) & Boater(z)) -> UsedForNavigation(x,y,z))", "score": 0}
{"id": "eqasc_validation_890", "prediction": "all x y.((Mariner(x) & Compass(y)) -> TravelsOcean(x,y))", "score": 0}
{"id": "eqasc_validation_890", "prediction": "all x y z.((Mariner(x) & Compass(y) & Ocean(z)) -> UsesForWordsPale(x,y,z))", "score": 0}
{"id": "eqasc_validation_890", "prediction": "all x y z.((Mariner(x) & Compass(y) & Ocean(z)) -> TravelsUsing(x,y,z))", "score": 0}
{"id": "eqasc_validation_890", "prediction": "all x y z.((Mariner(x) & Compass(y) & Ocean(z)) -> Travels(x,y,z))", "score": 0}
{"id": "eqasc_validation_890", "prediction": "all x y.((Mariner(x) & Compass(y)) -> TravelsToOcean(x,y))", "score": 0}
{"id": "eqasc_validation_890", "prediction": "all x y.((Marine(x) & Compass(y)) -> TravelsOcean(x,y))", "score": 0}
{"id": "eqasc_validation_890", "prediction": "all x y z.((Marine(x) & Compass(y) & Ocean(z)) -> Travels(x,z,y,z))", "score": 0}
{"id": "eqasc_validation_890", "prediction": "all x y.((Marine(x) & Compass(y)) -> UsesToTravel(x,y))", "score": 0}
{"id": "eqasc_validation_890", "prediction": "all x y.((Mariner(x) & Compass(y)) -> TravelsOceanOcean(x,y))", "score": 0}
{"id": "eqasc_validation_890", "prediction": "all x.(Mariner(x) -> (UsesCompass(x) & TravelsOcean(x)))", "score": 0}
{"id": "eqasc_validation_890", "prediction": "all x y.((Marine(x) & Compass(y)) -> Travels(x,y))", "score": 0}
{"id": "eqasc_validation_890", "prediction": "all x.(Mariner(x) -> UsesCompassToTravelOcean(x))", "score": 0}
{"id": "eqasc_validation_890", "prediction": "all x.(Mariner(x) -> UseCompassToTravelOcean(x))", "score": 0}
{"id": "eqasc_validation_891", "prediction": "all x.(DegreesFromNorth(x) & MeasuredByCompass(x))", "score": 0}
{"id": "eqasc_validation_891", "prediction": "all x y.((Direction(x) & Compass(y)) -> DegreesFromNord(x,y))", "score": 0}
{"id": "eqasc_validation_891", "prediction": "all x.(Direction(x) -> (DegreesFromNorth(x) & MeasuredByCompass(x)))", "score": 0}
{"id": "eqasc_validation_891", "prediction": "all x.(Direction(x) -> (DegreesFromNorth(x,compass)))", "score": 0}
{"id": "eqasc_validation_891", "prediction": "all x y.((Direction(x) & Compass(y)) -> (DegreesInNorth(x,y) & MeasurableBy(x,y)))", "score": 0}
{"id": "eqasc_validation_891", "prediction": "all x y.((Direction(x) & Compass(y)) -> DegreeFromNorth(x,y))", "score": 0}
{"id": "eqasc_validation_891", "prediction": "all x y.((Diction(x) & Compass(y)) -> (DegreeFromNorth(x,y)))", "score": 0}
{"id": "eqasc_validation_891", "prediction": "all x y.((Orientation(x) & Compass(y)) -> Deg(x,y))", "score": 0}
{"id": "eqasc_validation_891", "prediction": "all x y.((Direction(x) & Compass(y)) -> (DegreeFromNorth(x,y) & MeasuredBy(x,y)))", "score": 0}
{"id": "eqasc_validation_891", "prediction": "all x y.((Direction(x) & Compass(y)) -> DistanceInDegrees(x,y))", "score": 0}
{"id": "eqasc_validation_891", "prediction": "all x.(DegreesFromNorth(x) -> MeasuredByCompass(x))", "score": 0}
{"id": "eqasc_validation_891", "prediction": "(DegreeFromNorth(north) & MeasuredByCompass(north))", "score": 0}
{"id": "eqasc_validation_891", "prediction": "all x y.((Direction(x) & Compass(y)) -> degreesFromNorth(x,y))", "score": 0}
{"id": "eqasc_validation_892", "prediction": "all x y z.((DivisionInDegrees(x) & Ocean(y) & Ocean(z)) -> Navigate(x,y,z))", "score": 0}
{"id": "eqasc_validation_892", "prediction": "all x.((Direction(x,Degrees) & Oceans(x)) -> Navigates(x,Oceans))", "score": 0}
{"id": "eqasc_validation_892", "prediction": "all x y.((Direction(x) & Degree(y)) -> NavigatesOcean(x,y))", "score": 0}
{"id": "eqasc_validation_892", "prediction": "all x y.((Orientation(x) & Degrees(y)) -> NavigatesOceans(x,y))", "score": 0}
{"id": "eqasc_validation_892", "prediction": "all x y.((Direction(x,y) & Degree(y)) -> NavigatesOceans(x,y))", "score": 0}
{"id": "eqasc_validation_892", "prediction": "all x.((DirectionInDegrees(x) & NavigatesOceans(x)) -> InDirectionInDegrees(x))", "score": 0}
{"id": "eqasc_validation_892", "prediction": "all x.((Direction(x) & Degrees(x)) -> NavigatesOceans(x))", "score": 0}
{"id": "eqasc_validation_892", "prediction": "all x.((Direction(x) & DegreeDirection(x)) -> NavigatesOceans(x))", "score": 0}
{"id": "eqasc_validation_892", "prediction": "all x y.((Orientation(X,y) & Degrees(y)) -> NavigatesOceans(x))", "score": 0}
{"id": "eqasc_validation_892", "prediction": "all x y.((DirectionInDegrees(x) & Ocean(y)) -> Navigates(x,y))", "score": 0}
{"id": "eqasc_validation_892", "prediction": "all x y.((Direction(x) & Degrees(y)) -> NavigatesOceans(x,y))", "score": 0}
{"id": "eqasc_validation_892", "prediction": "all x y z.((DirectionTo(x,y) & Degrees(z)) -> NavigatesOceans(x))", "score": 0}
{"id": "eqasc_validation_892", "prediction": "all x y.((DegreeDirection(x) & Ocean(y)) -> Navigates(x,y))", "score": 0}
{"id": "eqasc_validation_892", "prediction": "all x.((DirectionInDegrees(x) & Ocean(x)) -> Navigates(x,e,o,o))", "score": 0}
{"id": "eqasc_validation_892", "prediction": "All x y.((Direction(x) & Degree(y)) -> NavigatesOceans(x,y))", "score": -1}
{"id": "eqasc_validation_893", "prediction": "all x.(Magnetism(x) -> (FactWithMagnets(x) & (FactWithCompasses(x) & Act WithEarth(x))))", "score": -1}
{"id": "eqasc_validation_893", "prediction": "all x y.((Magnetism(x) & Magnets(y)) -> HappensWithAndWith(x,y))", "score": 0}
{"id": "eqasc_validation_893", "prediction": "all x y.((Magnetism(x) & (Magnetics(y) | Compasses(y) | Earth(y))) -> HappensWith(x,y))", "score": 0}
{"id": "eqasc_validation_893", "prediction": "all x.(Magnetism(x) -> (Worth(x) & HappensWithMagnets(x) & HappensWithCompasses(x) & HappensWithEarth(x)))", "score": 0}
{"id": "eqasc_validation_893", "prediction": "all x y z w.((Magnetism(x) & Magnet(y) & Compasse(z) & Earth(w)) -> HappensWithEarth(x,y,z,w))", "score": 0}
{"id": "eqasc_validation_893", "prediction": "all x y.((Magnetism(x) & Magnet(y)) -> (AffectsWith(x,y) & HappensWith(x,y)))", "score": 0}
{"id": "eqasc_validation_893", "prediction": "all x.(Magneticism(x) -> (HasMagnets(x) & HasCompasas(x) & HasEarth(x)))", "score": 0}
{"id": "eqasc_validation_893", "prediction": "all x y.((Magnetism(x) & Magnets(y) & Compasses(y) & Earth(y)) -> HappensWith(x,y))", "score": 0}
{"id": "eqasc_validation_893", "prediction": "all x.(Magnetism(x) -> (HasMagnets(x) & HasCompasses(x) & HasEarth(x)))", "score": 0}
{"id": "eqasc_validation_893", "prediction": "all x.(Magnetic(x) -> (HasMutations(x) & WithMagnetics(x) & HasCompasses(x) & HasEarth(x)))", "score": 0}
{"id": "eqasc_validation_893", "prediction": "all x y z.((Magnetics(x) & Magnets(y) & Compasses(z) & Earth(x)) -> HappensWithAndWith(x,y,z))", "score": 0}
{"id": "eqasc_validation_893", "prediction": "all x.(Magnetism(x) -> (Magnets(x) & Compasses(x) & Earth(x)))", "score": 0}
{"id": "eqasc_validation_893", "prediction": "all x.(Magnetism(x) -> (Nausea(x) & Magnetics(x) & Earth(x)))", "score": 0}
{"id": "eqasc_validation_893", "prediction": "all x.(Magnetism(x) -> (GasThanMaterials(x) & HappensWith(x,Magnets) & HappensWith(x,Compasses) & HappensWith(x,Earth)))", "score": 0}
{"id": "eqasc_validation_893", "prediction": "all x.(Magnetism(x) -> (HasMagnets(x) | HasCompasses(x) | HasEarth(x)))", "score": 0}
{"id": "eqasc_validation_893", "prediction": "all x.(Magnetism(x) -> (CausesMagnets(x) & HappensWithCompassesAndEarth(x)))", "score": 0}
{"id": "eqasc_validation_894", "prediction": "all x y.((Magnetism(x) & Ocean(y)) -> Navigates(x,y))", "score": 0}
{"id": "eqasc_validation_894", "prediction": "all x y z.((Magnetism(x) & Ocean(y) & Ocean(z)) -> UsedParabolicallyToNavigate(x,y,z))", "score": 0}
{"id": "eqasc_validation_894", "prediction": "all x.(Magnetism(x) -> NavigatesOceans(x))", "score": 0}
{"id": "eqasc_validation_894", "prediction": "all x y.((Magnetism(x) & Ocean(y)) -> Navigate(x,y))", "score": 0}
{"id": "eqasc_validation_894", "prediction": "all x.(Magnetism(x) -> NavigatesOcean(x))", "score": 0}
{"id": "eqasc_validation_894", "prediction": "all x.(Magnetism(x) -> NavigateOcean(x))", "score": 0}
{"id": "eqasc_validation_894", "prediction": "all x y z.((Magnetism(x) & Ocean(y) & Ocean(z)) -> Navigates(x,y,z))", "score": 0}
{"id": "eqasc_validation_894", "prediction": "all x.(Magnetism(x) -> NavigateLands(x))", "score": 0}
{"id": "eqasc_validation_895", "prediction": "all x.((OceanGoingVessel(x) & Large(x)) -> UsesGyrocompass(x))", "score": 0}
{"id": "eqasc_validation_895", "prediction": "all x.(LargeOceanGoingVessel(x) -> TheNavigationCompass(x.Gyrocompass))", "score": -1}
{"id": "eqasc_validation_895", "prediction": "all x.(OceanGoingVessel(x) -> SteeringCompass(x,y))", "score": 0}
{"id": "eqasc_validation_895", "prediction": "all x y.((FloorGoingVessel(x) & Cyclocompass(y)) -> UsesAsSteeringCompass(x,y))", "score": 0}
{"id": "eqasc_validation_895", "prediction": "all x.(LargeOceanGoingVessel(x) -> UsesGyrocompassAsSteeringCompass(x))", "score": 0}
{"id": "eqasc_validation_895", "prediction": "all x.((OceanGoingVessel(x) & Gyrocompass(x)) -> SteeringCompass(x))", "score": 0}
{"id": "eqasc_validation_895", "prediction": "all x y.((LargeOceanGoingVessel(x) & Windward(y)) -> UsesGyrocompass(x,y))", "score": 0}
{"id": "eqasc_validation_895", "prediction": "all x.((OceanGroundingVessel(x) & UsesGyrocompass(x)) -> SteeringCompass(x))", "score": 0}
{"id": "eqasc_validation_895", "prediction": "all x.(LargeOceanGoingVessel(x) -> UsesGyrocompass(x))", "score": 0}
{"id": "eqasc_validation_895", "prediction": "all x.((OceanGoingVessel(x) & UsesGyroCompass(x)) -> SteeringCompass(x))", "score": 0}
{"id": "eqasc_validation_895", "prediction": "all x y.((OceanGoingVessel(x) & Gyrocompass(y)) -> UsesAsSteeringCompass(x,y))", "score": 0}
{"id": "eqasc_validation_895", "prediction": "all x.(OceanGoingVessel(x) -> UsesGyrocompass(x))", "score": 0}
{"id": "eqasc_validation_895", "prediction": "all x.((LargeOceanGoingVessel(x) & UsesGyrocompass(x)) -> SteeringCompass(x))", "score": 0}
{"id": "eqasc_validation_895", "prediction": "all x.((LargeOceanGoingVessel(x) & Gyrocompass(x)) -> UsesAsSteeringCompass(x))", "score": 0}
{"id": "eqasc_validation_895", "prediction": "all x y.((LargeOceanGoingVessel(x) & Gyrocompass(y)) -> UsesSigningCompass(x,y))", "score": 0}
{"id": "eqasc_validation_896", "prediction": "all x.(Compass(x) -> UsedForSteering(x))", "score": 0}
{"id": "eqasc_validation_896", "prediction": "all x.(Compasse(x) -> (UsedForSteering(x) & UsedForSteering(x)))", "score": 0}
{"id": "eqasc_validation_896", "prediction": "all x y.((Compasse(x) & Steering(y)) -> UsedFor(x,y))", "score": 0}
{"id": "eqasc_validation_896", "prediction": "all x y.((Compass(x) & SteeringCompact(y)) -> UsedFor(x,y))", "score": 0}
{"id": "eqasc_validation_896", "prediction": "all x.(Compasse(x) -> (ServesForSteering(x) & UsedForSteering(x)))", "score": 0}
{"id": "eqasc_validation_896", "prediction": "all x.(Compasse(x) -> SteeringCross(x))", "score": 0}
{"id": "eqasc_validation_896", "prediction": "all x.(Compass(x) -> (UsedForSteering(x) & UsedForSteering(x)))", "score": 0}
{"id": "eqasc_validation_896", "prediction": "all x.(Compass(x) -> (UsedForStanding(x) | UsedForStanding(x)))", "score": 0}
{"id": "eqasc_validation_896", "prediction": "all x.(Compass(x) -> SteeringCompasse(x))", "score": 0}
{"id": "eqasc_validation_896", "prediction": "all x.(Compass(x) -> UsedForLeadership(x))", "score": 0}
{"id": "eqasc_validation_896", "prediction": "all x.(Compasse(x) -> UsedForSteering(x))", "score": 0}
{"id": "eqasc_validation_896", "prediction": "all x y z.((Compasse(x) & Steering(y) & Steering(z)) -> UsesFor(x,y,z))", "score": 0}
{"id": "eqasc_validation_897", "prediction": "all x.(Precipitation(x) -> IncreasesMoisture(x))", "score": 2}
{"id": "eqasc_validation_897", "prediction": "all x y.((Precipitation(x) & Moisture(y,x)) -> Increases(x,y))", "score": 0}
{"id": "eqasc_validation_897", "prediction": "everything.(Precipitation(precipitation) -> IncreasesMoisture(precipitation))", "score": -1}
{"id": "eqasc_validation_897", "prediction": "all x y.((Precipitation(x) & Moisture(y)) -> Increases(x,y))", "score": 2}
{"id": "eqasc_validation_897", "prediction": "all x y.((Precipitation(x) & Moisture(y)) -> Increase(x,y))", "score": 0}
{"id": "eqasc_validation_898", "prediction": "ALL X.((PrecipitationAmount(x) & MoistureCondensationRate(x)) -> DependsOn(x,y))", "score": -1}
{"id": "eqasc_validation_898", "prediction": "Et all x.((MoistureCondensation(x) & Concentration(x)) -> DependsOnRoot(x,y))", "score": -1}
{"id": "eqasc_validation_898", "prediction": "and is very important to you, too. MoistureCondensationAmount(x) -> (HasCondensationRate(x) & DependsOn(x,y)))", "score": -1}
{"id": "eqasc_validation_898", "prediction": "all x.(MoistureCondensation(x) -> DependedOn(x,y))", "score": 0}
{"id": "eqasc_validation_898", "prediction": "all x.((PrecipitationAmounts(x) & MoistureCondensing(x)) -> DependsOnReader(x))", "score": 0}
{"id": "eqasc_validation_898", "prediction": "(all x.((MoistureCondensation(x)) -> DependsOnRate(x,(MoistureCondensation)))", "score": -1}
{"id": "eqasc_validation_898", "prediction": "(all x.(Precipitation(x) & Rate(y) & Condenses(x,y)) -> DependsOn(x,y))", "score": 0}
{"id": "eqasc_validation_898", "prediction": "all x.((MarginCondensation(x) & And PrecipitationAmounts(x)) -> DependsOnRate(x))", "score": -1}
{"id": "eqasc_validation_898", "prediction": "all x.(Allowed(x) -> DependsOnRate(x))", "score": 0}
{"id": "eqasc_validation_898", "prediction": "(all x.(MoistureCondensationRelation(x)) -> DependsOnRate(x))", "score": 0}
{"id": "eqasc_validation_898", "prediction": "(all x.((MoistureCondensation(x)) -> DependsOn(x)))", "score": 0}
{"id": "eqasc_validation_898", "prediction": "all x.((MoistureCondensation(x) & TemperatureAmount(y)) -> DependsOnRate(x,y))", "score": 0}
{"id": "eqasc_validation_898", "prediction": "(all x y z.((MoistureCondensation(x) & MoistureCondensation(y)) -> Determines(x,y)))", "score": 0}
{"id": "eqasc_validation_898", "prediction": "(all x.(MoistureCondensation(x) -> DependsOnRate(x)))", "score": 0}
{"id": "eqasc_validation_898", "prediction": "All x.(Precipitation(x) -> (RateAtwhichMoistureCondenses(x) & DependsOnAtQuantity(x)))", "score": -1}
{"id": "eqasc_validation_898", "prediction": ",and PrecipitationAmountsDependsOnRateAtWorking(MoistureCondensation(MoistureCenser)", "score": -1}
{"id": "eqasc_validation_899", "prediction": "all x.((PrecipitationAmount(x) & DependsOnCondensation(x)) -> DependsOnCondensation(x))", "score": 0}
{"id": "eqasc_validation_899", "prediction": "all x.(PrecipitationAmount(x) -> DependsOnCondensation(x))", "score": 0}
{"id": "eqasc_validation_899", "prediction": "all x.(PrecipitationAmount(x) & DependsOnCondensation(x))", "score": 0}
{"id": "eqasc_validation_899", "prediction": "all x y.((Precipitation(x) & Condensation(y)) -> DependsOn(x,y))", "score": 0}
{"id": "eqasc_validation_899", "prediction": "(Abhängigab(precipitation) & DependsOnCondensation(precipitation))", "score": 0}
{"id": "eqasc_validation_899", "prediction": "all x.(Precipitation(x) -> DependsOnCondensation(x))", "score": 0}
{"id": "eqasc_validation_899", "prediction": "all x.((PrecipitationAmount(x) & Condensation(x)) -> DependsOnAmountOfPrecipitation(x))", "score": 0}
{"id": "eqasc_validation_899", "prediction": "all x.(PrecipitationSpecies(x) -> DependsOnCondensation(x))", "score": 0}
{"id": "eqasc_validation_899", "prediction": "all x.(ReliesOnCondensation(x) -> PrecipitationAmount(x))", "score": 0}
{"id": "eqasc_validation_899", "prediction": "all x y.((Precipitation(x) & Condensation(y)) -> DependsOnCondensation(x,y))", "score": 0}
{"id": "eqasc_validation_899", "prediction": "all x y.((Precipitation(x) & condensation(y)) -> DependsOnAmount(x,y))", "score": 0}
{"id": "eqasc_validation_899", "prediction": "all x y z.((PrecipitationAmount(x) & Condensation(y) & Dixion(z)) -> DependsOn(x,y,z))", "score": 0}
{"id": "eqasc_validation_900", "prediction": "all x.(Rain(x) -> IncreasesMoisture(x))", "score": 2}
{"id": "eqasc_validation_900", "prediction": "all x y.((Rain(x) & Moisture(y)) -> Increased(x,y))", "score": 0}
{"id": "eqasc_validation_900", "prediction": "all x y.((Rain(x) & Moisture(y)) -> Increases(x,y))", "score": 2}
{"id": "eqasc_validation_900", "prediction": "all x.(Rain(x) -> IncreasedMoisture(x))", "score": 0}
{"id": "eqasc_validation_901", "prediction": "all x.(Rain(x) -> LiquidPrecipitation(x))", "score": 0}
{"id": "eqasc_validation_901", "prediction": "all x.(Rain(x) -> (LiquidPrecipitation(x) & CanPrecipitation(x)))", "score": 0}
{"id": "eqasc_validation_902", "prediction": "all x.(Rain(x) -> IncreasesMoisture(x))", "score": 0}
{"id": "eqasc_validation_902", "prediction": "all x y.((Rain(x) & Moisture(y)) -> Increases(x,y))", "score": 0}
{"id": "eqasc_validation_902", "prediction": "all x y z.((Rain(x) & Moisture(y) & Moisture(z)) -> Improves(x,z))", "score": 0}
{"id": "eqasc_validation_902", "prediction": "all x.(Rain(x) -> ImprovesMoisture(x))", "score": 0}
{"id": "eqasc_validation_902", "prediction": "all x y.((Rain(x) & Mold(y)) -> IncreaseMoisture(x,y))", "score": 0}
{"id": "eqasc_validation_902", "prediction": "all x y z.((rain(x) & Rain(y) & Moisture(z)) -> Increases(x,y,z))", "score": 0}
{"id": "eqasc_validation_902", "prediction": "all x y z.((Rain(x) & Moisture(y) & Moisture(z)) -> Increases(x,y,z))", "score": 0}
{"id": "eqasc_validation_902", "prediction": "all x y.((Rain(x) & Moisture(y)) -> Increase(x,y))", "score": 0}
{"id": "eqasc_validation_902", "prediction": "all x y z.((Rain(x) & Moisture(y) & Moisture(z)) -> Increases(x,y))", "score": 0}
{"id": "eqasc_validation_903", "prediction": "all x.(LocalPrecipitation(x) -> StrongAltitudeAccroissement(x))", "score": 0}
{"id": "eqasc_validation_903", "prediction": "all x.((LocalPrecipitation(x) & Height(x)) -> IncreasesSharply(x))", "score": 0}
{"id": "eqasc_validation_903", "prediction": "all x.(LocalPrecipitation(x) -> IncreasesSharplyWithAltitude(x))", "score": 0}
{"id": "eqasc_validation_903", "prediction": "all x.((LocalPrecipitation(x) & Altitude(x)) -> IncreasesSharply(x))", "score": 0}
{"id": "eqasc_validation_903", "prediction": "all x.(Improve(x,alignitude) -> LocalPrecipitation(x))", "score": 0}
{"id": "eqasc_validation_903", "prediction": "all x.(TheLocalPrecipitation(x) -> IncreasesSharplyWithAlptitude(x))", "score": 0}
{"id": "eqasc_validation_903", "prediction": "all x.(LocalPrecipitation(x) -> IncreasesSlowlyWithAltitude(x))", "score": 0}
{"id": "eqasc_validation_903", "prediction": "all x.((LocalPrecipitation(x) & Altitude(x)) -> IncreasesSlowly(x))", "score": 0}
{"id": "eqasc_validation_903", "prediction": "all x.((LocalPrecipitation(x) & Altitude(x)) -> IncreasesSharplyWith(x,altitude))", "score": 0}
{"id": "eqasc_validation_903", "prediction": "all x.((LocalPrecipitation(x) & Altitude(x)) -> IncreasesSharply(x,y))", "score": 0}
{"id": "eqasc_validation_903", "prediction": "all x.((LocalPrecipitation(x) & Altitude(x)) -> IncreasesSharplyWith(x,y))", "score": 0}
{"id": "eqasc_validation_904", "prediction": "all x.((Air(x) & Altitude(x)) -> MoistureIncreasesSharply(x))", "score": 0}
{"id": "eqasc_validation_904", "prediction": "all x.(Moisture(x) -> IncreasingMoisture(x))", "score": 0}
{"id": "eqasc_validation_904", "prediction": "all x.((Moisture(x) & Altitude(x)) -> (AccrobatsSharplyWith(x,Altitude)))", "score": 0}
{"id": "eqasc_validation_904", "prediction": "all x.((Humidity(x) & Altitude(x)) -> AcuteMoistureAddition(x))", "score": 0}
{"id": "eqasc_validation_904", "prediction": "all x y.(Altitude(y) & Altitude(z)) -> SharpMoistureAccroissement(m2) & Altitude(m))", "score": -1}
{"id": "eqasc_validation_904", "prediction": "all x.((Moisture(x) & Altitude(x)) -> IncreasesSharplyWith(x,Alptitude))", "score": 0}
{"id": "eqasc_validation_904", "prediction": "all x.((Moisture(x,y) & Altitude(y)) -> IncreasesSharply(x,y))", "score": 0}
{"id": "eqasc_validation_904", "prediction": "all x.((Moisture(x) & Altitude(x)) -> IncreasesFootballWith(x,altitude))", "score": 0}
{"id": "eqasc_validation_904", "prediction": "all x.((Moisture(x) & Altitude(x)) -> IncreasesSharplyWith(x,altitude))", "score": 0}
{"id": "eqasc_validation_904", "prediction": "all x y.((Depends(x) & Altitude(y) & Elevation(x)) -> Increases(x,y))", "score": 0}
{"id": "eqasc_validation_904", "prediction": "all x y.((Depth(x) & Altitude(y)) -> SharpMoistureDecrease(x))", "score": 0}
{"id": "eqasc_validation_904", "prediction": "all x.((SharpMoisture(x) & Altitude(x)) -> SteakHabitatMoisture(x))", "score": 0}
{"id": "eqasc_validation_904", "prediction": "all x.((Moisture(x) & Altitude(x)) -> IncreasesSticklyWithAltitude(x))", "score": 0}
{"id": "eqasc_validation_904", "prediction": "all x.((Moisture(x) & Altitude(x)) -> TemperatureIncreasesWithHigherAltitude(x))", "score": 0}
{"id": "eqasc_validation_904", "prediction": "all x.((Moisture(x) & Altitude(x)) -> IncreasesSharply(x))", "score": 0}
{"id": "eqasc_validation_905", "prediction": "all x.(MoistureCondition(x) -> (Damp(x) | Dry(x)))", "score": 0}
{"id": "eqasc_validation_905", "prediction": "all x.(MoistureCondition(x) -> [Damp(x) | Dry(x)])", "score": -1}
{"id": "eqasc_validation_905", "prediction": "all x.((MoistureCondition(x) & Damped(y) & Dry(z)) -> Range(x,y,z))", "score": 0}
{"id": "eqasc_validation_905", "prediction": "all x.((MoistureCondition(x) & FromDampToDry(x)) -> MoistureCondition(x))", "score": 0}
{"id": "eqasc_validation_905", "prediction": "all x.(MoistureCondition(x) -> (Damp(x) & Dry(x)))", "score": 0}
{"id": "eqasc_validation_905", "prediction": "all x.(MoistureCondition(x) -> (RangeFromDampFromDry(x)))", "score": 0}
{"id": "eqasc_validation_906", "prediction": "all x y.((Precipitation(x) & Condition(y)) -> (IncreasesConditionsForDryToDampConditions(x)))", "score": 0}
{"id": "eqasc_validation_906", "prediction": "all x y.((Precipitation(x) & Conditions(y) & DryToDamp(x)) -> Increases(x,y))", "score": 0}
{"id": "eqasc_validation_906", "prediction": "all x y z.((Precipitation(x) & DryCondition(y) & DriedCondition(z)) -> Increases(x,y,z))", "score": 0}
{"id": "eqasc_validation_906", "prediction": "all x y.((Precipitation(x) & Climate(y)) -> (IncreasesFromDryToDamp(x,y)))", "score": 0}
{"id": "eqasc_validation_906", "prediction": "all x y.((Precipitation(x) & DryToDampConditions(y)) -> IncreasesConditions(x,y))", "score": 0}
{"id": "eqasc_validation_906", "prediction": "all x y.((Precipitation(x) & DryCondition(y)) -> IncreasesConditions(x,y))", "score": 0}
{"id": "eqasc_validation_906", "prediction": "all x y z w.((Precipitation(x) & DrySpecies(y) & DriedConditions(z)) -> IncreasesConditions(x,y,z))", "score": 0}
{"id": "eqasc_validation_906", "prediction": "all x y.((Precipitation(x) & DryCondition(y)) -> Increases(x,y))", "score": 0}
{"id": "eqasc_validation_906", "prediction": "all x y.((Precipitation(x) & Dry(y) & Damp(y)) -> IncreasesConditions(x,y))", "score": 0}
{"id": "eqasc_validation_906", "prediction": "all x y z.((Precipitation(x) & DryToDampConditions(y)) -> IncreasesConditions(x,z))", "score": 0}
{"id": "eqasc_validation_906", "prediction": "all x y z.((Precipitation(x) & DryCondition(y) & DampCondition(z)) -> IncreasesConditionsFromToDampConditions(x,y,z))", "score": 0}
{"id": "eqasc_validation_906", "prediction": "all x.(Precipitation(x) -> IncreasesConditionsFromDryToDamp(x))", "score": 0}
{"id": "eqasc_validation_906", "prediction": "all x y.((Precipitation(x) & Conditions(y)) -> Increases(x,y))", "score": 0}
{"id": "eqasc_validation_906", "prediction": "all x y.((Precipitation(x) & Conditions(y)) -> IncreasesFromDryToDamp(x,y))", "score": 0}
{"id": "eqasc_validation_907", "prediction": "all x.(Moisture(x) -> (NecessaryIngredientForClouds(x) & NecessaryIngredientForPrecipitation(x)))", "score": 0}
{"id": "eqasc_validation_907", "prediction": "all x.((Humidity(x) & ProducesClouds(x) & ProducesPrecipitation(x)) -> NecessaryIngredientForPrecipitation(x))", "score": 0}
{"id": "eqasc_validation_907", "prediction": "all x.(Moisture(x) -> (NecessaryIngredient(x) & ProductionOfCloudsAndPrecipitation(x)))", "score": 0}
{"id": "eqasc_validation_907", "prediction": "all x.(Moisture(x) -> (NecessaryIngredient(x) & ProducesClouds(x) & ProducesPrecipitation(x)))", "score": 0}
{"id": "eqasc_validation_907", "prediction": "all x y.((Moisture(x) & Cloud(y)) -> (NecessaryIngredient(x,y) & RequiredIngredient(x,y)))", "score": 0}
{"id": "eqasc_validation_907", "prediction": "all x.(Moisture(x) -> (NutritiousIngredient(x) & ProductionOfClouds(x) & ProductionOfPrecipitation(x)))", "score": 0}
{"id": "eqasc_validation_907", "prediction": "all x.(Moisture(x) -> (NecessaryIngredientForCloudProduction(x) & NecessaryIngredientForPrecipitation(x)))", "score": 0}
{"id": "eqasc_validation_907", "prediction": "all x.(Moisture(x) -> (NecessaryIngredient(x) & ProductionOfClouds(x) & Precipitation(x)))", "score": 0}
{"id": "eqasc_validation_907", "prediction": "all x y z.((Moisture(x) & Cloud(y) & Precipitation(z)) -> (NecessaryIngredient(x,y) & Produces(x,z)))", "score": 0}
{"id": "eqasc_validation_907", "prediction": "all x y z.((Moisture(x) & Cloud(y) & Precipitation(z)) -> NiteIngredientFor(x,y,z))", "score": 0}
{"id": "eqasc_validation_907", "prediction": "all x y.((Moisture(x) & Cloud(y)) -> (NecessaryIngredient(x,y) & NecessaryToPrecipitation(x,y)))", "score": 0}
{"id": "eqasc_validation_908", "prediction": "all x.(Cloud(x) -> PrescipitationNecessary(x))", "score": 0}
{"id": "eqasc_validation_908", "prediction": "all x.(Cloud(x) -> PrecipitationNecessaryForPrecipitation(x))", "score": 0}
{"id": "eqasc_validation_908", "prediction": "all x.(Cloud(x) -> PrecipitationTrend(x))", "score": 0}
{"id": "eqasc_validation_908", "prediction": "all x.(Cloud(x) -> PrecipitationNecessary(x))", "score": 0}
{"id": "eqasc_validation_908", "prediction": "all x.(Cloud(x) -> NecessaryForPrecipitation(x))", "score": 0}
{"id": "eqasc_validation_908", "prediction": "all x.(Cloud(x) -> Precipitation(x))", "score": 0}
{"id": "eqasc_validation_908", "prediction": "all x y.((Cloud(x) & Precipitation(y)) -> NecessaryFor(x,y))", "score": 0}
{"id": "eqasc_validation_908", "prediction": "all x y z.((Cloud(x) & Precipitation(y) & Precipitation(z)) -> Necessary(x,y,z))", "score": 0}
{"id": "eqasc_validation_908", "prediction": "all x y.((Cloud(x) & Precipitation(y)) -> NecessaryForPrecipitation(x,y))", "score": 0}
{"id": "eqasc_validation_909", "prediction": "all x.(Precipitation(x) -> Rainfall(x))", "score": 0}
{"id": "eqasc_validation_909", "prediction": "all x.(Precipitation(x) -> RainfallOccurrence(x))", "score": 0}
{"id": "eqasc_validation_909", "prediction": "all x.(Precipitation(x) -> OccursAsRainfall(x))", "score": 0}
{"id": "eqasc_validation_909", "prediction": "all x.(Precipitation(x) -> BecomesRainfall(x))", "score": 0}
{"id": "eqasc_validation_909", "prediction": "all x y.((Precipitation(x) & Rainfall(y)) -> OccursAs(x,y))", "score": 0}
{"id": "eqasc_validation_909", "prediction": "all x.(Precipitation(x) -> Weather(x))", "score": 0}
{"id": "eqasc_validation_909", "prediction": "all x.(Precipitation(x) -> (OccursAsRainfall(x)))", "score": 0}
{"id": "eqasc_validation_909", "prediction": "all x.((Precipitation(x) & Rainfall(x)) -> MostOccursAs(x,y))", "score": 0}
{"id": "eqasc_validation_910", "prediction": "all x.(Rainfall(x) -> IncreasedMoisture(x))", "score": 0}
{"id": "eqasc_validation_910", "prediction": "all x y.((Rainfall(x) & Moisture(y)) -> Increases(x,y))", "score": 0}
{"id": "eqasc_validation_910", "prediction": "all x.(Rainfall(x) -> IncreasesMoisture(x))", "score": 0}
{"id": "eqasc_validation_910", "prediction": "all x.(Rainfall(x) -> IncreaseMoisture(x))", "score": 0}
{"id": "eqasc_validation_911", "prediction": "(AllPrecipitation(s) -> InInches(s))", "score": 0}
{"id": "eqasc_validation_911", "prediction": "all x.(Precipitation(x) -> InInches(x))", "score": 0}
{"id": "eqasc_validation_911", "prediction": "all x.(PrecipitationAmount(x) -> InInches(x))", "score": 0}
{"id": "eqasc_validation_911", "prediction": "all x.(PrecipitationAmount(x) -> InInch(x))", "score": 0}
{"id": "eqasc_validation_912", "prediction": "all x.(MeasuresMoisture(x,inches) -> Moisture(x))", "score": 0}
{"id": "eqasc_validation_912", "prediction": "all x.(MeasuresMoisture(x) -> MeasuresInInches(x))", "score": 0}
{"id": "eqasc_validation_912", "prediction": "all x.(MeasuresMoistureInInches(x) -> MoistureMeasuredInInches(x))", "score": 0}
{"id": "eqasc_validation_912", "prediction": "all x y.((Moisture(x) & InInches(y)) -> MeasuredInInches(x,y))", "score": 0}
{"id": "eqasc_validation_912", "prediction": "all x.(MeasuredMoistureInInches(x) -> MoistureMeasuredInInches(x))", "score": 0}
{"id": "eqasc_validation_912", "prediction": "all x y.((Moisture(x) & InInches(y)) -> MeasuresInInches(x,y))", "score": 0}
{"id": "eqasc_validation_912", "prediction": "all x y.((Moisture(x) & InInch(y)) -> MeasuredInInch(x,y))", "score": 0}
{"id": "eqasc_validation_912", "prediction": "all x.(MeasuredInInches(x) -> MoistureMeasuredInInches(x))", "score": 0}
{"id": "eqasc_validation_912", "prediction": "all x.(MeasurementInInch(x) -> MoistureMeasurement(x))", "score": 0}
{"id": "eqasc_validation_912", "prediction": "all x y z.((Moisture(x) & InInch(y) & Minutes(z)) -> MeasuredInInches(x,y,z))", "score": 0}
{"id": "eqasc_validation_912", "prediction": "all x.(MeasurementInInches(x) -> Moisture(x))", "score": 0}
{"id": "eqasc_validation_912", "prediction": "all x.(MeasuredInInches(x) -> MoistureMet(x))", "score": 0}
{"id": "eqasc_validation_912", "prediction": "all x.(MeasuresMoisture(x,Inches) -> MoistureMeasuredInInches(x))", "score": 0}
{"id": "eqasc_validation_912", "prediction": "all x.(Measurement(x) -> MoistureMeasuredInInches(x))", "score": 0}
{"id": "eqasc_validation_913", "prediction": "all x.(Moisture(x) -> (RelatedToElectricalConductivity(x) & IncreasesWithIncreasedMoisture(x)))", "score": 0}
{"id": "eqasc_validation_913", "prediction": "all x.(Moisture(x) -> (ElectricalConductivity(x) & IncreasesWithIncreasesMoisture(x)))", "score": 0}
{"id": "eqasc_validation_913", "prediction": "all x.(Moisture(x) -> (ElectricalConductivity(x) & IncreasesWithIncreasedMoisture(x)))", "score": 0}
{"id": "eqasc_validation_913", "prediction": "all x y.((Moisture(x) & ElectricalConductivity(y)) -> (IncreasesWithIncreasingMoistureLevels(x)).)", "score": -1}
{"id": "eqasc_validation_913", "prediction": "all x.(Moisture(x) -> (ElectricalConductivity(x) & IncreasesWithIncreasedMoistureLevels(x)))", "score": 0}
{"id": "eqasc_validation_913", "prediction": "all x y.((Moisture(x) & ElectricalConductivity(y)) -> IncreasesWithIncreasement(x,y))", "score": 0}
{"id": "eqasc_validation_913", "prediction": "all x.(Moisture(x) -> (ElectricalConductivity(x) & IncreasesWithMoistureLevel(x)))", "score": 0}
{"id": "eqasc_validation_913", "prediction": "all x.(Moisture(x) -> ElectricConductivity(x))", "score": 0}
{"id": "eqasc_validation_913", "prediction": "all x y.((Moisture(x) & ElectricalConductivity(y) & IncreasesWithIncreasedMoisture(x)) -> LinkedTo(x,y))", "score": 0}
{"id": "eqasc_validation_913", "prediction": "all x.((Moisture(x) & ElectricalConductivity(x)) -> IncreasesWithIncreaseDairyLevels(x))", "score": 0}
{"id": "eqasc_validation_913", "prediction": "all x.(Moisture(x) -> (RelatedToElectricalConductivity(x) & IncreasedWithIncreasesMoisture(x)))", "score": 0}
{"id": "eqasc_validation_913", "prediction": "all x.(Moisture(x) -> (ElectricalConductivity(x) & IncreasesWithMoistureLevels(x)))", "score": 0}
{"id": "eqasc_validation_913", "prediction": "all x.(Moisture(x) -> (ElectricalConductivity(x) & AssistsWithIncreasedMoistureLevels(x)))", "score": 0}
{"id": "eqasc_validation_913", "prediction": "all x.(Moisture(x) -> (RelatedToElectricalConductivity(x) & IncreasedWithIncreasedMoistureLevels(x)))", "score": 0}
{"id": "eqasc_validation_913", "prediction": "all x.(Moisture(x) -> (ElectricalConductivity(x) & IncreasesWithIncreasesMoistureLevel(x)))", "score": 0}
{"id": "eqasc_validation_913", "prediction": "all x.(Moisture(x) -> (RelatedToElectricalConductivity(x) & IncreasesWithIncreasement(x)))", "score": 0}
{"id": "eqasc_validation_914", "prediction": "all x y.((Wood(x) & Precipitation(y) & FallsOn(x,y)) -> IncreasesElectricalConductivity(x))", "score": 0}
{"id": "eqasc_validation_914", "prediction": "all x y z.((Wood(x) & Precipitation(y) & Wood(z)) -> ElectricalConductivityAccro(x,y,z))", "score": 0}
{"id": "eqasc_validation_914", "prediction": "all x y.((Wood(x) & PrecipitationFall(y)) -> IncreasesElectricalConductivity(x,y))", "score": 0}
{"id": "eqasc_validation_914", "prediction": "all x y.((Wood(x) & Precipitation(y) & FallsOn(x,y)) -> ElectricConductivityIncreases(x))", "score": 0}
{"id": "eqasc_validation_914", "prediction": "all x.((Wood(x) & PrecipitationFalls(x)) -> ElectricalConductivityIncreases(x))", "score": 0}
{"id": "eqasc_validation_914", "prediction": "all x y z.((Wood(x) & PrecipitationFalls(x) & Precipitation(y)) -> ElectricConductivityIncreases(x,y))", "score": 0}
{"id": "eqasc_validation_914", "prediction": "all x y.((Wood(x) & Precipitation(y)) -> ElectricConductivityIncrease(x,y))", "score": 0}
{"id": "eqasc_validation_914", "prediction": "all x y.((Wood(x) & Precipitation(y) & FatesOn(x,y)) -> ElectricalConductivityIncrease(x,y))", "score": 0}
{"id": "eqasc_validation_914", "prediction": "all x y.((Wood(y) & Precipitation(z)) -> IncreasedElectricalConductivity(x,y,z))", "score": 0}
{"id": "eqasc_validation_914", "prediction": "all x y.( (Wood(x) & Precipitation(y) & FallOn(x,y)) -> IncreasesElectricalConductivity(x,y))", "score": 0}
{"id": "eqasc_validation_914", "prediction": "all x.((Wood(x) & PrecipitationFallsOn(x)) -> ElectronicalConductivityIncreases(x))", "score": 0}
{"id": "eqasc_validation_914", "prediction": "all x y z.((Wood(x) & Precipitation(y) & PrecipitationFall(z) & IncreasesElectricalColorivity(x,y,z)) -> PredictableFalls(z))", "score": 0}
{"id": "eqasc_validation_914", "prediction": "all x y.((Wood(x) & Precipitation(y)) -> ElectricalConductivityIncreases(x,y))", "score": 0}
{"id": "eqasc_validation_914", "prediction": "all x y.((Wood(x) & Precipitation(y) & FallsOn(y,x)) -> ElectricalConductivityIncreases(x,y))", "score": 0}
{"id": "eqasc_validation_915", "prediction": "all x y z.((SpiderWeb(x) & Spider(y) & Food(z)) -> CapturesBy(x,y,z))", "score": 0}
{"id": "eqasc_validation_915", "prediction": "all x y z.((SpiderWeb(x) & Spider(y) & Food(z)) -> UsedToCaptureBy(x,y,z))", "score": 0}
{"id": "eqasc_validation_915", "prediction": "all x y z.((SpiderWeb(x) & Spider(y) & Food(z)) -> CapturesPeak(x,y,z))", "score": 0}
{"id": "eqasc_validation_915", "prediction": "all x.((SpiderWeb(x) & UsedToCaptureFood(x,spiders)) -> CapturesFood(x,spiders))", "score": 0}
{"id": "eqasc_validation_915", "prediction": "all x y z.((SpiderWeb(x) & Spider(y) & Food(z)) -> UsedToCapture(x,y,z))", "score": 0}
{"id": "eqasc_validation_915", "prediction": "all x y z.((SpiderWall(x) & Spiders(y) & Food(z)) -> Captures(x,y,z))", "score": 0}
{"id": "eqasc_validation_915", "prediction": "all x y.((SpiderWeb(x) & Spider(y)) -> CapturesFood(x,y))", "score": 0}
{"id": "eqasc_validation_915", "prediction": "all x.(SpiderWeb(x) -> CapturesFoodBySpiders(x))", "score": 0}
{"id": "eqasc_validation_915", "prediction": "all x.((SpiderWeb(x) & UsedToCaptureFood(x)) -> UsedBySpiders(x))", "score": 0}
{"id": "eqasc_validation_915", "prediction": "all x y z.((SpiderWeb(x) & Food(y) & Spider(z)) -> CapturesBy(x,y,z))", "score": 0}
{"id": "eqasc_validation_915", "prediction": "all x y.((SpiderWeb(x) & Spider(y)) -> CapturesFoodAt(x,y))", "score": 0}
{"id": "eqasc_validation_915", "prediction": "all x y.((SpiderWeb(x) & Spider(y)) -> CapturesFoodBy(x,y))", "score": 0}
{"id": "eqasc_validation_916", "prediction": "all x.(BlackWildWifeSpider(x) -> ConstructsFunnelShapedWebs(x))", "score": 0}
{"id": "eqasc_validation_916", "prediction": "all x.(BlackWifeSpider(x) -> ConstructsFunnelShapedWebs(x))", "score": 0}
{"id": "eqasc_validation_916", "prediction": "all x.(BlackWifeSpider(x) -> ConstructsNailfoilShapewebs(y))", "score": 0}
{"id": "eqasc_validation_916", "prediction": "all x.(BlackWifeSpider(x) -> BuildsFunnelShapeWeb(x))", "score": 0}
{"id": "eqasc_validation_916", "prediction": "all x y.((BlackWife(x) & Spider(y)) -> ConstructsFunnelShapedWebs(x,y))", "score": 0}
{"id": "eqasc_validation_916", "prediction": "all x y z.((BlackWife(x) & Web(y) & Web(z)) -> Constructs(x,y,z))", "score": 0}
{"id": "eqasc_validation_916", "prediction": "all x.(BlackWitchcraftSpider(x) -> ConstructsFunnelshapedWebs(x))", "score": 0}
{"id": "eqasc_validation_916", "prediction": "all x.(BlackWillowSpider(x) -> (ConstructsFunnelShapedWebs(x)))", "score": 0}
{"id": "eqasc_validation_916", "prediction": "all x.(BlackWondowSpider(x) -> (ConstructsFunnelShapedWebs(x)))", "score": 0}
{"id": "eqasc_validation_916", "prediction": "all x.(BlackWitch-Spider(x) -> (ConstructsFentonShapedWebs(x)))", "score": -1}
{"id": "eqasc_validation_916", "prediction": "all x.(BlackWitnessSpider(x) -> ConstructsFlantern-ShapedWebs(x))", "score": -1}
{"id": "eqasc_validation_916", "prediction": "all x.(BlackWildWife(x) -> ConstructsFunctionalShapeWebs(x))", "score": 0}
{"id": "eqasc_validation_917", "prediction": "all x y z.((BlackWondow(x) & Web(y) & Food(z)) -> UsesToCapture(x,y,z))", "score": 0}
{"id": "eqasc_validation_917", "prediction": "all x.(BlackWife(x) -> UsesWebsToCaptureFood(x))", "score": 0}
{"id": "eqasc_validation_917", "prediction": "all x y z.((BlackWondow(x) & Web(w) & (Food(z) | Food(w))) -> Uses(x,w))", "score": 0}
{"id": "eqasc_validation_917", "prediction": "all x y.((BlackWife(x) & Web(y)) -> UsesToCarolFood(x,y))", "score": 0}
{"id": "eqasc_validation_917", "prediction": "all x y.((BlackWildwine(x) & Web(y)) -> UsesToCaptureFood(x,y))", "score": 0}
{"id": "eqasc_validation_917", "prediction": "all x.(BlackWidow(x) -> UsesWebsToCaptureFood(x))", "score": 0}
{"id": "eqasc_validation_917", "prediction": "all x.(BlackWife(x) -> UsesWebStripsToCaptureFood(x))", "score": 0}
{"id": "eqasc_validation_917", "prediction": "all x y z.((BlackWife(x) & Web(y) & Food(z)) -> UsesForFood(x,y,z))", "score": 0}
{"id": "eqasc_validation_917", "prediction": "all x.(BlackWildWife(x) -> UsesWebsToCaptureFood(x))", "score": 0}
{"id": "eqasc_validation_917", "prediction": "all x y.((BlackWife(x) & Web(y)) -> (Uses(x,y) & CapturesFood(x)))", "score": 0}
{"id": "eqasc_validation_917", "prediction": "all x y z.((BlackWiven(x) & Web(y) & Food(z)) -> UsesToCapture(y,z,z))", "score": 0}
{"id": "eqasc_validation_917", "prediction": "all x.(BlackWild(x) -> UsesWebStations(x))", "score": 0}
{"id": "eqasc_validation_917", "prediction": "all x y.((BlackWife(x) & Web(y)) -> UsesToCaptureFood(x,y))", "score": 0}
{"id": "eqasc_validation_918", "prediction": "ALL Y.((Spider(y) & CapturedInsect(z)) -> InjectsVenom(y,z))", "score": -1}
{"id": "eqasc_validation_918", "prediction": "all x y.((Spider(x) & CapturedInsect(y)) -> InjectsVenom(x,y))", "score": 0}
{"id": "eqasc_validation_918", "prediction": "all x.(Spider(x) -> (InjectsVenom(x) & CapturesInsect(x) & ParalyzesInsect(x)))", "score": 0}
{"id": "eqasc_validation_918", "prediction": "all x y.((Spider(x) & CapturedInsect(y)) -> (InjectVenom(x,y) & Paralyze(x,y)))", "score": 0}
{"id": "eqasc_validation_918", "prediction": "all x y z.((Spider(x) & CapturedInsect(y) & Venom(z)) -> Paralyzes(x,z))", "score": 0}
{"id": "eqasc_validation_918", "prediction": "all x.(Spider(x) -> (InjectsVenom(x,capturedInsect) & ParalyzesInsect(x,capturedInsect)))", "score": 0}
{"id": "eqasc_validation_918", "prediction": "all x y.((Spider(x) & CapturedInsect(y)) -> InjectsVenomToParalize(x,y))", "score": 0}
{"id": "eqasc_validation_918", "prediction": "all x y z.((Spider(x) & Insect(y) & Venom(z)) -> InjectsInto(x,y,z))", "score": 0}
{"id": "eqasc_validation_918", "prediction": "all x y z.((Spider(x) & Insect(y) & Venom(z)) -> Injects(x,y,z))", "score": 0}
{"id": "eqasc_validation_918", "prediction": "all x y.((Spider(x) & Incinerator(y) & CapturedInsect(x)) -> InjectVenom(x,y))", "score": 0}
{"id": "eqasc_validation_918", "prediction": "all x y z.((Spider(x) & CapturedInsect(y) & Venom(z)) -> InjectsIntoBody(x,y,z))", "score": 0}
{"id": "eqasc_validation_918", "prediction": "all x y z.((Spider(x) & Insect(y) & Body(z) & Captured(z)) -> InjectsVenom(x,y,z))", "score": 0}
{"id": "eqasc_validation_918", "prediction": "all x y z.((Spider(x) & Insect(y) & Insect(z) & Captured(y,z)) -> InjectsVenom(x,y))", "score": 0}
{"id": "eqasc_validation_919", "prediction": "all x y.((Arachnid(x) & Arachnid(y) & EightLegged(x)) -> (CapturesFoodWithWeb(x) & InjectsVenom(x) & ParalyzesToEat(y)))", "score": 0}
{"id": "eqasc_validation_919", "prediction": "all x y.((Arachnid(x) & Arachnid(y) & EightLegged(x)) -> (CapturesFood(x,y) & InjectsVenom(x) & ParalyzesFood(x) & Eats(x)))", "score": 0}
{"id": "eqasc_validation_919", "prediction": "all x y.((Arachnid(x) & EggLegged(x)) -> (CapturesFood(x) & UsesWeb(x) & InjectsVenom(x) & ParalyzesYouToEat(y)))", "score": 0}
{"id": "eqasc_validation_919", "prediction": "all x y z.((Arachnid(x) & EightLegged(x) & Web(y) & Food(z)) -> (Captures(x,y,z) & InjectsVenom(x) & Paralyzes(x,z)))", "score": 0}
{"id": "eqasc_validation_919", "prediction": "all x y z.((Arachnid(x) & AchillesLegged(x) & Food(y) & Web(z)) -> (CapturesLengthsWith(x,y) & InjectsVenom(x) & ParalyzesToEat(x)))", "score": 0}
{"id": "eqasc_validation_919", "prediction": "all x y.((Arachnid(x) & Arachnid(y)) -> (CapturesFoodWithWeb(x,y) & InjectsVenomToParalyze(x,y) & Eats(y)))", "score": 0}
{"id": "eqasc_validation_919", "prediction": "all x.(Arachnid(x) -> (EightLegged(x) & CapturesFoodWithWeb(x) & InjectsVenom(x) & ParalyzesToEat(x)))", "score": 0}
{"id": "eqasc_validation_919", "prediction": "all x y z.((Arrubid(x) & EightLeggedArachnid(x) & Food(w) & Web(w)) -> (Captures(x,w) & InjectsVenom(x,v) & Paralyzes(x,W)))", "score": 0}
{"id": "eqasc_validation_919", "prediction": "all x y z.((Arachnid(x) & EightLegged(x) & Food(y) & Web(z) & CapturesWith(x,y) & InjectsVenomToParalyzeToEat(x)) -> ParalyzeToEat(x,z))", "score": 0}
{"id": "eqasc_validation_919", "prediction": "all x y z.((Arachnid(x) & EightLeggedArachnid(y) & Food(z)) -> (CapturesWithWeb(y,z) & InjectsVenom(y,z) & ParalyzesToEat(x,z)))", "score": 0}
{"id": "eqasc_validation_919", "prediction": "all x.(Arachnid(x) -> (EightLegged(x) & CapturesFoodWithWeb(x) & InjectsVenom(x) & Paralyzes(x) & Eats(x)))", "score": 0}
{"id": "eqasc_validation_919", "prediction": "all x y z.((Arachnid(x) & EightLegged(x) & Food(y) & Web(z)) -> (Captures(x,y,z) & InjectsVenom(x,y) & ParalyzesFood(x) & Eats(x)))", "score": 0}
{"id": "eqasc_validation_919", "prediction": "all x y.((Arachnid(x) & Arachnid(y)) -> (CapturesFoodWithWeb(x) & InjectsVenom(y) & ParalyzesToEat(y)))", "score": 0}
{"id": "eqasc_validation_919", "prediction": "all x y z.((Arachnid(x) & EightLeggedArachnid(y) & Food(z) & CapturesWithWeb(x,z) & InjectsVenom(x) & ParalyzesToEat(y,z)) -> Arachnist(x))", "score": 0}
{"id": "eqasc_validation_919", "prediction": "all x y z.((Arachnid(x) & EightLeggedArachnid(y) & Web(z) & CapturesFoodWith(x,y,z) & InjectsVenom(x,y)) -> ParalyzesToEatInstead_OfEat(y,z))", "score": 0}
{"id": "eqasc_validation_919", "prediction": "all x.(Arachnid(x) -> (EightLegged(x) & CapturesFood(x) & InjectsVenom(x) & ParalyzesToEat(x)))", "score": 0}
{"id": "eqasc_validation_920", "prediction": "all x.(CrabSpider(x) -> SpinsNoWeb(x))", "score": 0}
{"id": "eqasc_validation_920", "prediction": "all x.(GrabSpider(x) -> SpinsNoWebs(x))", "score": 0}
{"id": "eqasc_validation_920", "prediction": "all x.(CrabSpider(x) -> SpinsNoWebs(x))", "score": 0}
{"id": "eqasc_validation_920", "prediction": "all x y.((CrabSpider(x) & Web(y)) -> SpinsIn(x,y))", "score": 0}
{"id": "eqasc_validation_921", "prediction": "all x y.((Web(x) & Food(y)) -> CapturesFood(x,y))", "score": 0}
{"id": "eqasc_validation_921", "prediction": "all x y z.((Web(x) & Food(y) & Food(z)) -> Captures(x,y,z))", "score": 0}
{"id": "eqasc_validation_921", "prediction": "all x y.((Web(x) & Food(y)) -> CapturesTool(x,y))", "score": 0}
{"id": "eqasc_validation_921", "prediction": "all x.(Web(x) -> (ApproachesFood(x) & CapturesFood(x)))", "score": 0}
{"id": "eqasc_validation_921", "prediction": "all x.(Web(x) -> CapturesFood(x))", "score": 0}
{"id": "eqasc_validation_921", "prediction": "all x y.((Web(x) & FoodCanvas(y)) -> CapturesFoodFeedingTool(x,y))", "score": 0}
{"id": "eqasc_validation_921", "prediction": "all x.(Web(x) -> (CapturesFood(x) & AnimatedGift(x)))", "score": 0}
{"id": "eqasc_validation_921", "prediction": "all x y.((Web(x) & Food(y)) -> Captures(x,y))", "score": 0}
{"id": "eqasc_validation_922", "prediction": "all x.(Spider(x) -> EatsInsects(x))", "score": 0}
{"id": "eqasc_validation_922", "prediction": "all x y.((Spider(x) & Insect(y)) -> Eats(x,y))", "score": 0}
{"id": "eqasc_validation_922", "prediction": "all x.(Spider(x) -> EatsInsect(x))", "score": 0}
{"id": "eqasc_validation_922", "prediction": "all x.(Spider(x) -> EatInsects(x))", "score": 0}
{"id": "eqasc_validation_922", "prediction": "all x y z.((Spider(x) & Insect(y) & Insect(z)) -> Eat(x,y,z))", "score": 0}
{"id": "eqasc_validation_923", "prediction": "all x.(Web(x) -> CapturesInsects(x))", "score": 0}
{"id": "eqasc_validation_923", "prediction": "all x.((Web(x) & Insect(y)) -> Captures(x,y))", "score": 0}
{"id": "eqasc_validation_923", "prediction": "all x y.((Web(x) & Insect(y)) -> Captures(x,y))", "score": 0}
{"id": "eqasc_validation_923", "prediction": "all x y z.((Web(x) & Insect(y) & Insect(z)) -> Captures(x,y))", "score": 0}
{"id": "eqasc_validation_924", "prediction": "all x y z.((WebSpinningSpider(x,y) & Web(y) & Insect(z)) -> Spins(x,y))", "score": 0}
{"id": "eqasc_validation_924", "prediction": "all x y z.((WebSpinningSpider(x) & Web(y) & Insect(z)) -> SpinsToCatch(x,y,z))", "score": 0}
{"id": "eqasc_validation_924", "prediction": "all x y.((WebSpinningSpider(x) & Web(y)) -> SpinsToCatch(x,y))", "score": 0}
{"id": "eqasc_validation_924", "prediction": "all x y.((WebSpinningSpider(x) & Spider(y)) -> SpinsWebs(x))", "score": 0}
{"id": "eqasc_validation_924", "prediction": "all x y z.((WebSpinningSpider(x) & Web(y) & Insect(z)) -> Spins(x,y,z))", "score": 0}
{"id": "eqasc_validation_924", "prediction": "all x.(WebSpinningSpider(x) -> SpinsWeb(x,Insects))", "score": 0}
{"id": "eqasc_validation_924", "prediction": "all x y.((WebSpinningSpider(x) & (Insect(y) | Insect(y))) -> SpinsWebs(x,y))", "score": 0}
{"id": "eqasc_validation_924", "prediction": "all x y z.((WebSpinner(x) & Spider(y) & Web(z)) -> SpinsForAngling(y,z))", "score": 0}
{"id": "eqasc_validation_924", "prediction": "all x y z.((WebSpinningSpider(x) & Web(y) & Insect(z) & Spin(x,y,z)) -> Catches(x,y))", "score": 0}
{"id": "eqasc_validation_924", "prediction": "all x.(WebSpinningSpider(x) -> SpinsWebsToCatchInsects(x))", "score": 0}
{"id": "eqasc_validation_924", "prediction": "all x y.((WebSpinningSpider(x) & Web(y)) -> SpinsToCatchInsects(x,y))", "score": 0}
{"id": "eqasc_validation_925", "prediction": "all x y.((Spider(x) & Insect(y)) -> CatchesBySpinning(x,y))", "score": 0}
{"id": "eqasc_validation_925", "prediction": "all x.(Spider(x) -> (CatchesInsects(x) & Spins(x)))", "score": 0}
{"id": "eqasc_validation_925", "prediction": "all x y.((Spider(x) & Insect(y) & Spin(x)) -> CatchesBySpinning(x,y))", "score": 0}
{"id": "eqasc_validation_925", "prediction": "all x y z.((Spider(x) & Insect(y) & Insect(z)) -> CatchesBySpinner(x,y,z))", "score": 0}
{"id": "eqasc_validation_925", "prediction": "all x y.((Spider(x) & Insect(y) & Spins(x,y)) -> CatchsBySpinning(x,y))", "score": 0}
{"id": "eqasc_validation_925", "prediction": "all x y.((Spider(x) & Insect(y) & Spins(x,y)) -> CatchsInsects(x,y))", "score": 0}
{"id": "eqasc_validation_925", "prediction": "all x y.((Spider(x) & Insect(y) & Spins(x,y)) -> CatchesBy(x,y))", "score": 0}
{"id": "eqasc_validation_925", "prediction": "all x y z.((Spider(x) & Insect(y) & Spider(z)) -> (Catch(x,y,z) | Spin(x,y)))", "score": 0}
{"id": "eqasc_validation_925", "prediction": "all x y.((Spider(x) & Insect(y) & spinning(x,y)) -> CapturesBySpinning(x,y))", "score": 0}
{"id": "eqasc_validation_925", "prediction": "all x y.((Spider(x) & Insect(y)) -> (Catch(x,y) & SintSpinning(x)))", "score": 0}
{"id": "eqasc_validation_925", "prediction": "all x y.((Spider(x) & Insect(y) & Spin(x,y)) -> Catches(x,y))", "score": 0}
{"id": "eqasc_validation_925", "prediction": "all x.(Spider(x) -> (CatchInsects(x) & Spin(x)))", "score": 0}
{"id": "eqasc_validation_925", "prediction": "all x y z.((Spider(x) & Insect(y) & Insect(z) & Spins(x,y,z)) -> Catches(x,y))", "score": 0}
{"id": "eqasc_validation_925", "prediction": "all x y.((Spider(x) & Insect(y)) -> (Catches(x,y) & Spins(x,y)))", "score": 0}
{"id": "eqasc_validation_926", "prediction": "all x.(Spider(x) -> SpiderHasEightLegs(x))", "score": 0}
{"id": "eqasc_validation_926", "prediction": "all x.(Spider(x) -> (HasLegs(x,8)))", "score": 0}
{"id": "eqasc_validation_926", "prediction": "all x.(Spider(x) -> HasEightLegs(x))", "score": 0}
{"id": "eqasc_validation_926", "prediction": "all x.(Spider(x) -> HasLegs(x,9))", "score": 0}
{"id": "eqasc_validation_926", "prediction": "all x.(Spider(x) -> (HasEightLegs(x) & Spider(x)))", "score": 0}
{"id": "eqasc_validation_927", "prediction": "all x y.((Web(x) & EightLeggedCreature(y)) -> CapturesFoodFor(x,y))", "score": 0}
{"id": "eqasc_validation_927", "prediction": "all x.(Web(x) -> CapturesFood(x,EightLeggedCreatures))", "score": 0}
{"id": "eqasc_validation_927", "prediction": "all x.(Web(x) -> CapturesFood(x))", "score": 0}
{"id": "eqasc_validation_927", "prediction": "all x y.((Web(x) & Creature(y)) -> CapturesFood(x,y))", "score": 0}
{"id": "eqasc_validation_927", "prediction": "all x.(Web(x) -> (CaptureFood(x,EightLeggedCreature) & BuiltTo(x,EightLeggedCreatures)))", "score": 0}
{"id": "eqasc_validation_927", "prediction": "all x y z.((Web(x) & Human(y) & Bird(z)) -> BuiltToCaptureFood(x,y,z))", "score": 0}
{"id": "eqasc_validation_927", "prediction": "all x.((Web(x) & BuiltToCaptureFood(x)) -> EightLeggedCreatures(x))", "score": 0}
{"id": "eqasc_validation_927", "prediction": "all x.(Web(x) -> (CapturesFood(x) & By(x,8) LeggedCreature)))", "score": -1}
{"id": "eqasc_validation_927", "prediction": "all x.(Web(x) -> (CapturesFood(x) & BuiltByEightLeggedCreatures(x)))", "score": 0}
{"id": "eqasc_validation_927", "prediction": "all x.(Web(x) -> (CapturesFood(x) & WrittenByEightLeggedCreatures(x)))", "score": 0}
{"id": "eqasc_validation_927", "prediction": "all x y z.((Web(x) & Food(y) & Creature(z)) -> BuiltFor(x,y,z))", "score": 0}
{"id": "eqasc_validation_927", "prediction": "all x y.((Web(x) & Animal(y) & BuiltToCaptureFood(x,y)) -> EightLegged(x))", "score": 0}
{"id": "eqasc_validation_927", "prediction": "all x.(Web(x) -> (CapturesInWalls(x) & 8LeggedCreatures(x)))", "score": 0}
{"id": "eqasc_validation_927", "prediction": "all x y.((Web(x) & Creature(y) & BuiltFor(x,y)) -> CapturesFoodBy(x,y))", "score": 0}
{"id": "eqasc_validation_927", "prediction": "all x.(Web(x) -> BuiltForCapturingFood(x))", "score": 0}
{"id": "eqasc_validation_928", "prediction": "all x.(SpiderWeb(x) -> InterestingTrap(x))", "score": 0}
{"id": "eqasc_validation_928", "prediction": "all x.(RapidWeb(x) -> InterestingTrap(x))", "score": 0}
{"id": "eqasc_validation_928", "prediction": "all x.((SpiderWeb(x) & InterestingTrap(x)) -> Interesting(x))", "score": 0}
{"id": "eqasc_validation_928", "prediction": "all x y.((SpiderWeb(x) & Trap(y)) -> Interesting(x))", "score": 0}
{"id": "eqasc_validation_928", "prediction": "all x y.((SpiderWeb(x) & Trap(y)) -> Interesting(y))", "score": 0}
{"id": "eqasc_validation_929", "prediction": "all x y.((Spider(x) & Trap(y)) -> UsesToCaptureFood(x,y))", "score": 0}
{"id": "eqasc_validation_929", "prediction": "all x y z.((Spider(x) & Trap (y) & Food(z))) -> UsesToCapture(x,y,z))", "score": -1}
{"id": "eqasc_validation_929", "prediction": "all x y.((Spider(x) & Trap(y)) -> Uses(x,y))", "score": 0}
{"id": "eqasc_validation_929", "prediction": "all x y z.((Spider(x) & Trap(y) & Food(z)) -> UsesToCapture(x,y,z))", "score": 0}
{"id": "eqasc_validation_929", "prediction": "all x y.((Spider(x) & Trap(y)) -> (Uses(x,y) & CapturesFood(x)))", "score": 0}
{"id": "eqasc_validation_929", "prediction": "all x y.((Spring(x) & Trap(y)) -> UsesToCaptureFood(x,y))", "score": 0}
{"id": "eqasc_validation_929", "prediction": "all x y z.((Spider(x) & Trap(y) & Food(z)) -> UsesToCapture(x,y,z)))", "score": -1}
{"id": "eqasc_validation_929", "prediction": "all x y.((Spider(x) & TrapBetween(x,y)) -> UsesToCaptureFood(x,y))", "score": 0}
{"id": "eqasc_validation_929", "prediction": "all x y z.((Spider(x) & Trap(y) & Food(z) & Uses(x,y)) -> Captures(x,z))", "score": 0}
{"id": "eqasc_validation_929", "prediction": "all x y.((Spider(x) & Trap(y) & Uses(x,y)) -> CapturesFood(x))", "score": 0}
{"id": "eqasc_validation_929", "prediction": "all x y.((Spider(x) & Trap(y)) -> UsesToCapture(x,y))", "score": 0}
{"id": "eqasc_validation_929", "prediction": "all x.(Spider(x) -> (UsesTraps(x) & CapturesFood(x)))", "score": 0}
{"id": "eqasc_validation_930", "prediction": "all x.(Spider(x) -> Arachnid(x))", "score": 0}
{"id": "eqasc_validation_930", "prediction": "(All x.(Spider(x) -> Arachnid(x)))", "score": -1}
{"id": "eqasc_validation_930", "prediction": "(arachnid(spider) & Arachnid(s))", "score": 0}
{"id": "eqasc_validation_930", "prediction": "(Arachnid(spider) | Arachnid(s)))", "score": -1}
{"id": "eqasc_validation_931", "prediction": "all x.(Web(x) -> CapturesFood(x,Arachnids))", "score": 0}
{"id": "eqasc_validation_931", "prediction": "all x y.((Web(x) & Arachnid(y)) -> CapturesFood(x,y))", "score": 0}
{"id": "eqasc_validation_931", "prediction": "all x y z.((Web(x) & Arachnid(y) & Food(z)) -> Captures(x,y,z))", "score": 0}
{"id": "eqasc_validation_931", "prediction": "all x.(Web(x) -> CapturesFood(x))", "score": 0}
{"id": "eqasc_validation_931", "prediction": "all x.(Web(x) -> UsedToCaptureFood(x))", "score": 0}
{"id": "eqasc_validation_931", "prediction": "all x y.((Web(x) & Arachnid(y) & CapturesFeed(x,y)) -> Uses(x,y))", "score": 0}
{"id": "eqasc_validation_931", "prediction": "all x y.((Web(x) & Aphnid(y)) -> CapturesFood(x,y))", "score": 0}
{"id": "eqasc_validation_931", "prediction": "all x.(Web(x) -> CapturesFoodByArachnids(x))", "score": 0}
{"id": "eqasc_validation_932", "prediction": "all x.(CobwebSpider(x) -> (ConstructsWebsInCrown(x) & ConstructsWebsInLittleTraffic(x)))", "score": 0}
{"id": "eqasc_validation_932", "prediction": "all x y.((CobwebSpider(x) & Corner(y) & LittleTrafficRoad(y)) -> ConstructsWebs(x,y))", "score": 0}
{"id": "eqasc_validation_932", "prediction": "all x.(CobwebSpider(x) -> (ConstructsWebs(x) & InCoverons(x) & InLittleTrafficAreas(x)))", "score": 0}
{"id": "eqasc_validation_932", "prediction": "all x.(CobwebSpider(x) -> (ConstructsWebs(x) & InEaves(x) & InLittleTraffic(x)))", "score": 0}
{"id": "eqasc_validation_932", "prediction": "all x y z.((CobwebSpider(x) & Corner(y),Kinds(z) & Basements(z)) -> BuildsWebs(x,y,z))", "score": -1}
{"id": "eqasc_validation_932", "prediction": "all x.(CobwebSpider(x) -> (ConstructWeb(x) & InCourse(x) & InLittleTraffic(x)))", "score": 0}
{"id": "eqasc_validation_932", "prediction": "all x y z.((CobwebSpider(x) & Corner(y) & LittleTraffic(z) & Basement(o)) -> BuildsWebIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_932", "prediction": "all x.(CobwebSpider(x) -> (ConstructWebsInCornersAndAreas(x) & LittleTraffic(x)))", "score": 0}
{"id": "eqasc_validation_932", "prediction": "all x.(CobwebSpider(x) -> (ConstructsWebs(x) & InCourse(x) & InLittleTrafficAreas(x)))", "score": 0}
{"id": "eqasc_validation_932", "prediction": "all x y.((CobwebSpider(x) & Corner(y) & LittleTraffic(z)) -> ConstructsWeb(x,y,z))", "score": 0}
{"id": "eqasc_validation_932", "prediction": "all x.(CobwebSpider(x) -> (ConstructsWebsInCorners(x) & ConstructsWebsInLittleTraffic(x)))", "score": 0}
{"id": "eqasc_validation_932", "prediction": "all x y z.((CubbwebSpider(x) & Corner(y) & LittleTraffic(z)) -> ConstructsWeb(x,y,z))", "score": 0}
{"id": "eqasc_validation_932", "prediction": "all x.(CobwebSpider(x) -> (ConstructsWebs(x) & InCoveredAccessions(x) & InLittleTraffic(x)))", "score": 0}
{"id": "eqasc_validation_932", "prediction": "all x.(CobwebSpider(x) -> (ConstructsWebsIn(x,Crowns) & LittleTrafficAreas(x,Bodens)))", "score": 0}
{"id": "eqasc_validation_932", "prediction": "all x.(EcobwebSpider(x) -> ConstructsWebsInCrownsAndLittleTraffic(x))", "score": 0}
{"id": "eqasc_validation_932", "prediction": "all x y.((CobwebSpider(x) & Corner(y) & Zone(z) & LittleTraffic(x)) -> ConstructsWebsIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_933", "prediction": "all x.(Cobweb(x) -> CapturesFood(x))", "score": 0}
{"id": "eqasc_validation_933", "prediction": "all x y.((Cobweb(x) & Food(y)) -> Captures(x,y))", "score": 0}
{"id": "eqasc_validation_933", "prediction": "all x y.((Cobweb(x) & Food(y)) -> UsedToCapture(x,y))", "score": 0}
{"id": "eqasc_validation_933", "prediction": "all x y z.((Cobweb(x) & Food(y) & Food(z)) -> Captures(x,y,z))", "score": 0}
{"id": "eqasc_validation_933", "prediction": "all x.((Cobweb(x) & UsedToCaptureFood(x)) -> CapturesFood(x))", "score": 0}
{"id": "eqasc_validation_934", "prediction": "all x y.((Spider(x) & SpiderWeb(y) & LargerNumber(x,y)) -> ManyInsects(x,y))", "score": 0}
{"id": "eqasc_validation_934", "prediction": "all x y.((LargerNumbersOfSpiders,Pinstalks,Evolutions) & -SpiderWebs(x)) -> ThereAreManyInsects(x))", "score": -1}
{"id": "eqasc_validation_934", "prediction": "all x.((Spider(x) & SpiderWeb(x)) -> ManyInsectsAvailable(x))", "score": 0}
{"id": "eqasc_validation_934", "prediction": "all x.((Spider(x) & SpiderWeb(x)) -> (LargerNumber(x) & AvailabilityOfInsectsForFood(x)))", "score": 0}
{"id": "eqasc_validation_934", "prediction": "all x.(LargerNumberOfSpidersAndSpiderWebs(x) -> ManyInsectsForFood(x))", "score": 0}
{"id": "eqasc_validation_934", "prediction": "all x.((Spider(x) & SpiderWeb(x)) -> ManyInsectsAvailableForFood(x))", "score": 0}
{"id": "eqasc_validation_934", "prediction": "all x.((Spider(x) & SpiderWeb(x)) -> (LargerNumber(x) & ManyInsectsInResponseForFood(x)))", "score": 0}
{"id": "eqasc_validation_934", "prediction": "all x y.((Spider(x) & SpiderWeb(y)) -> ThereOfInsects(x,y))", "score": 0}
{"id": "eqasc_validation_934", "prediction": "all x.((Spider(x) | SpiderWeb(x)) -> NumerousInsects(x))", "score": 0}
{"id": "eqasc_validation_934", "prediction": "all x.((Spider(x) & SpiderWeb(x)) -> ThereGrowsMoreInsects(x))", "score": 0}
{"id": "eqasc_validation_934", "prediction": "all x.((Spider(x) & SpiderWeb(x)) -> exists y.(Insect(x) & AvailableForFood(y))))", "score": -1}
{"id": "eqasc_validation_934", "prediction": "all x y.((Spider(x) & SpiderWeb(y)) -> exists z.(Insect(z) & AvailableForFood(z))))", "score": -1}
{"id": "eqasc_validation_934", "prediction": "all x y.((Spider(x) & SpiderWeb(y)) -> LargerNumber(x,y))", "score": 0}
{"id": "eqasc_validation_934", "prediction": "all x y.((Spider(x) & SpiderWeb(y)) -> (LargerNumbers(x,y) & ManyInsects(x,z)))", "score": 0}
{"id": "eqasc_validation_934", "prediction": "all x.(FourteenInsects(x) -> (LargerNumberOfSpiders(x) & LargerNumberOfSpiderWebs(x)))", "score": 0}
{"id": "eqasc_validation_935", "prediction": "all x y z.((SpiderWeb(x) & Insect(y) & Spider(z)) -> CapturesBy(x,y,z))", "score": 0}
{"id": "eqasc_validation_935", "prediction": "all x y z.((SpiderWeb(x) & Insect(y) & Spider(z)) -> UsedToCapture(x,y,z))", "score": 0}
{"id": "eqasc_validation_935", "prediction": "all x y.((SpiderWeb(x) & Spider(y)) -> CapturesInsectsBy(x,y))", "score": 0}
{"id": "eqasc_validation_935", "prediction": "all x y z.((SpiderWeb(x) & Insect(y) & Spider(z)) -> (Captures(x,y,z) & By(x,y)))", "score": 0}
{"id": "eqasc_validation_935", "prediction": "all x y.((SpiderWeb(x) & Spider(y)) -> (CapturesInsects(x,y) & Spider(y)))", "score": 0}
{"id": "eqasc_validation_935", "prediction": "all x y z.((SpiderWeb(x) & Spider(y) & insect(z)) -> CapturesBy(x,y,z))", "score": 0}
{"id": "eqasc_validation_935", "prediction": "all x y z.((SpiderWeb(x) & Insect(y) & Spider(z)) -> UsedToCaptureBy(x,y,z))", "score": 0}
{"id": "eqasc_validation_935", "prediction": "all x y z.((SpiderWeb(x) & Spider(y) & Insect(z) & Spider(z)) -> CapturesBy(x,y,z))", "score": 0}
{"id": "eqasc_validation_935", "prediction": "all x y z.((SpiderWeb(x) & Spider(y) & Insect(z) & Captures(x,y,z)) -> UsedBySpiders(x))", "score": 0}
{"id": "eqasc_validation_935", "prediction": "all x y z.((SpiderWeb(x) & Spiders(y) & Insect(z)) -> (Captures(x,z) | Captures(x,y,z))))", "score": -1}
{"id": "eqasc_validation_935", "prediction": "all x y z.((SpiderWeb(x) & Spider(y)) -> (Captures(x,y) & Spider(z)))", "score": 0}
{"id": "eqasc_validation_935", "prediction": "all x y z.((SpiderWeb(x) & Insect(y) & Spider(z) & Uses(x,y,z)) -> Captures(x,y,z))", "score": 0}
{"id": "eqasc_validation_935", "prediction": "all x y z.((SpiderWeb(x) & Insect(y) & Spider(z) & CapturesBy(x,y,z)) -> UsedParamountToCapture(x,y,z))", "score": 0}
{"id": "eqasc_validation_935", "prediction": "all x y z.((SpiderWeb(x) & Spiders(y) & Insect(z)) -> UsesToCapture(x,z))", "score": 0}
{"id": "eqasc_validation_936", "prediction": "all x y.((Arachnid(x) & Spider(y)) -> (LargestGroup(x,y) & Arachnid(x)))", "score": 0}
{"id": "eqasc_validation_936", "prediction": "all x.(Arachnid(x) -> LargestGroup(x))", "score": 0}
{"id": "eqasc_validation_936", "prediction": "all x.(Spider(x) -> Arachnids(x))", "score": 0}
{"id": "eqasc_validation_936", "prediction": "all x.(Spider(x) -> Arachnid(x))", "score": 0}
{"id": "eqasc_validation_936", "prediction": "all x.(Spider(x) -> (LargestGroupArachnid(x) & Arachnid(x)))", "score": 0}
{"id": "eqasc_validation_936", "prediction": "all x.(Spider(x) -> (LargestArachnidGroup(x)))", "score": 0}
{"id": "eqasc_validation_936", "prediction": "all x.(Spider(x) -> ArachnidCentre(x))", "score": 0}
{"id": "eqasc_validation_936", "prediction": "all x.(Spider(x) -> GroupOfArachnids(x))", "score": 0}
{"id": "eqasc_validation_936", "prediction": "all x.(Spider(x) -> LargestArachnidGroup(x))", "score": 0}
{"id": "eqasc_validation_936", "prediction": "all x.(Spider(x) -> (LargestGroupOfArachnids(x) & Arachnid(x)))", "score": 0}
{"id": "eqasc_validation_936", "prediction": "all x.(Arachnid(x) -> (Legend(x) & Arachnid(x)))", "score": 0}
{"id": "eqasc_validation_937", "prediction": "exists x.(Arachnid(x) & CapturesFood(x) & HasWeb(x))", "score": 0}
{"id": "eqasc_validation_937", "prediction": "exists x.(Arachnid(x) & CapturesFoodWithWeb(x))", "score": 0}
{"id": "eqasc_validation_937", "prediction": "exists x.(Arachnid(x) & CanCaptureFood(x) & UtilizeWeb(x))", "score": 0}
{"id": "eqasc_validation_937", "prediction": "exists x.(Arachnid(x) & CapturesFood(x) & UsesWeb(x))", "score": 0}
{"id": "eqasc_validation_937", "prediction": "exists x.(Arachnid(x) & CapturesFood(x) & WithWeb(x))", "score": 0}
{"id": "eqasc_validation_938", "prediction": "all x.(Spider(x) -> (BuildsWebsFromSilk(x) & ProducedInAbdomen(x)))", "score": 0}
{"id": "eqasc_validation_938", "prediction": "all x.(Spider(x) -> (BuildsWebsFromSilk(x) | ProducedInAbdomen(x)))", "score": 0}
{"id": "eqasc_validation_938", "prediction": "all x.(Spider(x) -> exists y.(Silk(y) & ProducedInAbdomen(x,y))))", "score": -1}
{"id": "eqasc_validation_938", "prediction": "all x.(Spider(x) -> (BuildsWebsFromSilk(x) & ProducesInAbdomen(x)))", "score": 0}
{"id": "eqasc_validation_938", "prediction": "all x y z.((Spider(x) & Silk(y) & Abdomen(z)) -> BuildsWebsFrom(x,y,z))", "score": 0}
{"id": "eqasc_validation_938", "prediction": "all x y z.((Spider(x) & Web(y) & Silk(z) & ProducedInAbdomen(x)) -> BuildsFrom(x,y,z))", "score": 0}
{"id": "eqasc_validation_938", "prediction": "all x y.((Spider(x) & Silk(y)) -> BuildsWebFrom(x,y))", "score": 0}
{"id": "eqasc_validation_938", "prediction": "all x.(Spider(x) -> exists y.(Silk(y) & Builds(x,y)))", "score": 0}
{"id": "eqasc_validation_938", "prediction": "all x y z.((Spider(x) & Web(y) & Silk(z) & ProducedInAbdomen(x,y,z)) -> BuildsFrom(x,y,z))", "score": 0}
{"id": "eqasc_validation_938", "prediction": "all x y.((Spider(x) & Silk(y) & ProducedInAbdomen(x,y)) -> BuildsWebsFrom(x,y))", "score": 0}
{"id": "eqasc_validation_939", "prediction": "all x y z.((Spider(x) & Silk(y) & Food(z)) -> UsesForCapturing(x,y,z))", "score": 0}
{"id": "eqasc_validation_939", "prediction": "all x.(Spider(x) -> UsesSilk(x))", "score": 0}
{"id": "eqasc_validation_939", "prediction": "all x y.((Spider(x) & Silk(y)) -> UsesToCaptureFood(x,y))", "score": 0}
{"id": "eqasc_validation_939", "prediction": "all x.(Spider(x) -> (UsesSilk(x) & CapturesFood(x)))", "score": 0}
{"id": "eqasc_validation_939", "prediction": "all x.(Spider(x) -> UsesSilkToCaptureFood(x))", "score": 0}
{"id": "eqasc_validation_939", "prediction": "all x y.(Seed(x) & Spider(y) & UsesSilkToCaptureFood(x,y))", "score": 0}
{"id": "eqasc_validation_939", "prediction": "all x y z.((Spider(x) & Silk(y) & Food(z)) -> (Uses(x,y) & CapturesFood(x,z)))", "score": 0}
{"id": "eqasc_validation_940", "prediction": "all x.(Protozoa(x) -> ClassifiedOnMovement(x))", "score": 0}
{"id": "eqasc_validation_940", "prediction": "all x.(Protozoum(x) -> HowMoves(x))", "score": 0}
{"id": "eqasc_validation_940", "prediction": "all x.(Protozoa(x) -> ClassifiedOnFragmentOfMovement(x))", "score": 0}
{"id": "eqasc_validation_940", "prediction": "all x.(Protozoa(x) -> CanBeClassifiedOnMovement(x))", "score": 7}
{"id": "eqasc_validation_940", "prediction": "all x.(Protozoa(x) -> (Application(x) & Movement(x)))", "score": 7}
{"id": "eqasc_validation_940", "prediction": "all x.(Protozoa(x) -> MoveOn(x))", "score": 0}
{"id": "eqasc_validation_940", "prediction": "all x.(Protozoa(x) -> CanBeCategorizedOnMethodOfMovement(x),y))", "score": -1}
{"id": "eqasc_validation_940", "prediction": "all x.(Protozoan(x) -> MovesOnBasis(x))", "score": 0}
{"id": "eqasc_validation_940", "prediction": "all x.(Protozoa(x) -> CanBeCategorizedOnMovement(x))", "score": 0}
{"id": "eqasc_validation_940", "prediction": "all x.(Protozoa(x) -> CanBeClassifiedOnBasically(x))", "score": 0}
{"id": "eqasc_validation_940", "prediction": "all x.(Protozoa(x) -> LikelyMovementToCultify(x))", "score": 0}
{"id": "eqasc_validation_940", "prediction": "all x.(Protozoa(x) -> (AffiliatedOnMovement(x) & ClassifiedOnMovement(x)))", "score": 0}
{"id": "eqasc_validation_940", "prediction": "all x.(Protozoa(x) -> MovesDisasterically(x))", "score": 0}
{"id": "eqasc_validation_941", "prediction": "all x.(Flagellates(x) -> (SmallestProtozoa(x) & UseFlagella(x)))", "score": 0}
{"id": "eqasc_validation_941", "prediction": "all x.(Flagellate(x) -> (SmallerThanProtozoa(x) & UsesFlagellaCwp(x)))", "score": 0}
{"id": "eqasc_validation_941", "prediction": "all x.(Flagellate(x) -> (SmallestProtozoa(x) & UsesSweepToMove(x)))", "score": 0}
{"id": "eqasc_validation_941", "prediction": "all x.(Flagellate(x) -> (SmallestProtozoa(x) & UsesFlagella(x)))", "score": 0}
{"id": "eqasc_validation_941", "prediction": "all x.(Flagellates(x) -> (SmallestOfProtozoa(x) & UsesFlagellaForMovement(x)))", "score": 0}
{"id": "eqasc_validation_941", "prediction": "all x.(Flagellate(x) -> (SmallestOfProtozoa(x) & UsesFlagellaToMove(x)))", "score": 0}
{"id": "eqasc_validation_941", "prediction": "all x.(Flagellates(x) -> (SmallestOfProtozoa(x) & UsesLittleWheelToMove(x)))", "score": 0}
{"id": "eqasc_validation_941", "prediction": "all x.(Flagellates(x) -> (SmallestProtozoa(x) & usesEarlyWhip(x)))", "score": 0}
{"id": "eqasc_validation_941", "prediction": "all x.(Flagellate(x) -> (Smallest(x) & UsesRusticWhip(x) & LikesFlagella(x)))", "score": 0}
{"id": "eqasc_validation_941", "prediction": "all x.(Flagellate(x) -> (SmallerOfProtozoa(x) & UsesFlagellaToMove(x)))", "score": 0}
{"id": "eqasc_validation_941", "prediction": "all x.(Flagellate(x) -> ((Smallest(x) & Protozoa(x)) & MostlyUsesCheek(x))))", "score": -1}
{"id": "eqasc_validation_941", "prediction": "all x.(Flagellates(x) -> (SmallestOfProtozoa(x) & UsesMovementWhip(x,y)))", "score": 0}
{"id": "eqasc_validation_941", "prediction": "all x.(Flagellate(x) -> (Stinky(x) & KnownForPotato(x) & exists y.(Flagella) & Use(x,y))))", "score": -1}
{"id": "eqasc_validation_941", "prediction": "all x.(Flagellates(x) -> (Smallest(x) & UsedLayaround(x,flagella)))", "score": 0}
{"id": "eqasc_validation_941", "prediction": "all x.(Flagellatic(x) -> (SmallestOfProtozoa(x) & UtilizesFlagella(x)))", "score": 0}
{"id": "eqasc_validation_942", "prediction": "all x.((Flagellates(x) & SmallProtozoa(x)) -> Flagellates(x))", "score": 0}
{"id": "eqasc_validation_942", "prediction": "all x.(Flagellate(x) -> (SmallProtozoa(x) & SmallProtozoa(x)))", "score": 0}
{"id": "eqasc_validation_942", "prediction": "all x y.((Flagellate(x) & Protozoa(y)) -> Small(x))", "score": 0}
{"id": "eqasc_validation_942", "prediction": "all x.(Flagellates(x) -> (SmallProtozoa(x) & SmallProtozoa(x)))", "score": 0}
{"id": "eqasc_validation_942", "prediction": "all x.(Flagellate(x) -> (Small(x) & Small(x)))", "score": 0}
{"id": "eqasc_validation_942", "prediction": "all x.(Flagellate(x) -> SmallProtozoa(x))", "score": 0}
{"id": "eqasc_validation_942", "prediction": "all x.(Flagellates(x) -> (SmallProtozoa(x) & Protozoa(x)))", "score": 0}
{"id": "eqasc_validation_942", "prediction": "all x.(Flagellate(x) -> (SmallProtozoe(x) & SmallProtozoa(x)))", "score": 0}
{"id": "eqasc_validation_943", "prediction": "all x.((CottonSeedling(x) & SeenInCategory(x,3)) -> EasyOfIdentification(x))", "score": 0}
{"id": "eqasc_validation_943", "prediction": "all x.((Seedling(x) & Cotton(x)) -> ClassifiedIntoCategories(x,3))", "score": 0}
{"id": "eqasc_validation_943", "prediction": "all x.(CottonSeedling(x) -> ClassifiedIntoFiveCategories(x))", "score": 0}
{"id": "eqasc_validation_943", "prediction": "all x.((CottonSeedling(x) & ClassifiedIntoCulturalCategories(x,3)) -> EasyOfIdentification(x))", "score": 0}
{"id": "eqasc_validation_943", "prediction": "all x.((CellflowerSeedling(x) & CottonSeedling(x)) -> CategorizedInto(x,3))", "score": 0}
{"id": "eqasc_validation_943", "prediction": "all x.((CottonSeedling(x) & (FeelOfIdentification(x) | FeelOfIdentification(x))) -> ClassifiedIntoTwoCategories(x))", "score": 0}
{"id": "eqasc_validation_943", "prediction": "all x.((PopcornSeedling(x) & ClassifiedInto(x,3)) -> EasyOfIdentification(x))", "score": 0}
{"id": "eqasc_validation_943", "prediction": "all x.(CottonSeedling(x) -> (ClassifiedInto3Categories(x) & EfficientInIdentification(x)))", "score": 0}
{"id": "eqasc_validation_943", "prediction": "all x.(CellwoodSeedling(x) -> (Category(x,9) | Category(x,2)))", "score": 0}
{"id": "eqasc_validation_943", "prediction": "all x.((CircumberSeedling(x) & EfficientIdentification(x)) -> ClassifiesInto(x,3))", "score": 0}
{"id": "eqasc_validation_943", "prediction": "all x.((CottonSeedling(x) & EasyIdentification(x)) -> ClassifiedIn(x,3))", "score": 0}
{"id": "eqasc_validation_943", "prediction": "all x.((Seedling(x) & Cement(y)) -> ClassifiedIntoFourFeels(x,y))", "score": 0}
{"id": "eqasc_validation_943", "prediction": "all x.((Seedling(x) & CottonFederal(x)) -> ClassifiedIntoCategories(x,3))", "score": 0}
{"id": "eqasc_validation_943", "prediction": "all x.((CottonSeedling(x) & CottonSeedling(x)) -> ClassifiedIntoFourCategories(x))", "score": 0}
{"id": "eqasc_validation_943", "prediction": "all x y.((Cementeedling(x) & Cotton(y)) -> (ClassifiedInto(x,y) | ClassifiedInto(x,y)))", "score": 0}
{"id": "eqasc_validation_943", "prediction": "all x y.((Grammar(x) & Cotton(y)) -> -(Category(x,y) | Category(x,y)) \"Grammar(x,y))\"", "score": -1}
{"id": "eqasc_validation_944", "prediction": "all x.(Protozoa(x) -> Moves(x))", "score": 0}
{"id": "eqasc_validation_944", "prediction": "all x.(Protozoa(x) -> IdentifiedByMovement(x))", "score": 0}
{"id": "eqasc_validation_944", "prediction": "all x.(Protozoa(x) -> canBeIdentifiedByMovement(x))", "score": 0}
{"id": "eqasc_validation_944", "prediction": "all x.(Protozoa(x) -> CanBeIdentifiedAsMovement(x))", "score": 0}
{"id": "eqasc_validation_944", "prediction": "all x.(Protozoa(x) -> IdentifiesByMovement(x))", "score": 0}
{"id": "eqasc_validation_944", "prediction": "all x.(Protozoa(x) -> CanBeIdentifiedByMovement(x))", "score": 0}
{"id": "eqasc_validation_944", "prediction": "all x.(Protozoa(x) -> CanBeIdentifiedByMode(x))", "score": 0}
{"id": "eqasc_validation_944", "prediction": "all x.(Protozoa(x) -> MoveIt(x))", "score": 0}
{"id": "eqasc_validation_945", "prediction": "all x y.((Cilia(x) & Protozoa(y)) -> WavesInCoordinatedManner(x,y))", "score": 0}
{"id": "eqasc_validation_945", "prediction": "all x y.((Cilia(x) & Protozoa(y)) -> CoordinatedWaveToMoveInOneDirection(x,y))", "score": 0}
{"id": "eqasc_validation_945", "prediction": "all x y.((Cilia(x) & Protozoa(y)) -> WavesCoordinatedInManner(x,y))", "score": 0}
{"id": "eqasc_validation_945", "prediction": "all x.((CiliaWavesIn(x) & CoordinatesWell(x)) -> MovesProtozoaInOneDirection(x))", "score": 0}
{"id": "eqasc_validation_945", "prediction": "all x y.((Cilia(x) & Protozoa(y)) -> SeamsConnectedInOneDirection(x,y))", "score": 0}
{"id": "eqasc_validation_945", "prediction": "all x y.((Cilia(x) & Protozoa(y)) -> WavesInCoordinatedMovement(x,y))", "score": 0}
{"id": "eqasc_validation_945", "prediction": "all x.(CiliaWave(x) -> Coordinated(x))", "score": 0}
{"id": "eqasc_validation_945", "prediction": "all x y.((Cilia(x) & Cilia(y)) -> CoordinatedWaveProtozoa(x,y))", "score": 0}
{"id": "eqasc_validation_945", "prediction": "all x y.((Cilia(x) & Protozoa(y)) -> (WaveInCoordinatedForms(x,y) & MoveInOneDirection(x,y)))", "score": 0}
{"id": "eqasc_validation_945", "prediction": "all x.((Cilia(x) & CoordinatedWave(x)) -> MoveProtozoaInOneDirection(x))", "score": 0}
{"id": "eqasc_validation_945", "prediction": "all x y.((Cilia(x) & Protozoa(y)) -> (WavesInCoordinatedWayToMove(x,y) | MovesInOneDirection(x,y)))", "score": 0}
{"id": "eqasc_validation_945", "prediction": "all x y.((Cilia(x) & Orbiter(y)) -> CoordinatesWaveToMoveProtozoaInOneDirection(x,y))", "score": 0}
{"id": "eqasc_validation_945", "prediction": "all x y z.((CiliaWaves(x) & Proteozoa(y) & Coordinated(x,Y) & Direction(z)) -> MovesInOneDirection(x,z))", "score": 0}
{"id": "eqasc_validation_945", "prediction": "all x y.((Cilia(x) & Protozoa(y)) -> Motion(x,y))", "score": 0}
{"id": "eqasc_validation_945", "prediction": "all x y z.((Cilia(x) & Protozoa(y) & CoordinatedWeak(x,y)) -> MovedInOneDirection(x,y))", "score": 0}
{"id": "eqasc_validation_945", "prediction": "all x.(CiliaWavesInCoordinatedManual(x) -> MovesProtozoa(x))", "score": 0}
{"id": "eqasc_validation_946", "prediction": "cilia wave to move?", "score": -1}
{"id": "eqasc_validation_946", "prediction": "all x.(CiliaWaveToMovement(x))", "score": 0}
{"id": "eqasc_validation_946", "prediction": "all x.(CiliaWave(x) -> Move(x))", "score": 0}
{"id": "eqasc_validation_946", "prediction": "all x y z.((Cilia(x) & CiliaWave(y) & Cirla(z)) -> Moves(x,y,z))", "score": 0}
{"id": "eqasc_validation_946", "prediction": "all x.(Cilinawave(x) -> Move(x))", "score": 0}
{"id": "eqasc_validation_946", "prediction": "all x.(Cilia wave(x) -> Move(x))", "score": -1}
{"id": "eqasc_validation_946", "prediction": "all x.(Cilia(x) -> MovesWithCiliaWave(x))", "score": 0}
{"id": "eqasc_validation_946", "prediction": "all x y.((CiliaWave(x) & Crocodile(y)) -> Move(x,y))", "score": 0}
{"id": "eqasc_validation_946", "prediction": "all x.(CiliaWave(x) -> MovesTo(x,Cilia,Movement))", "score": 0}
{"id": "eqasc_validation_946", "prediction": "all x.(CiliaWave(x) -> Moves(x))", "score": 0}
{"id": "eqasc_validation_946", "prediction": "all x.(Cilia Wave(x) -> Movement(x))", "score": -1}
{"id": "eqasc_validation_946", "prediction": "all the x.(CiliaWaveToMove(x) -> CanCiliaWaveToMove(x))", "score": -1}
{"id": "eqasc_validation_946", "prediction": "all x y.((CiliaWave(x) & CiliaWave toMove(x)) -> CiliaWaveToMove(x))", "score": -1}
{"id": "eqasc_validation_946", "prediction": "all x y z.((CiliaFlyer(x) & CiliaWave(y) & Cilia(z)) -> ToMove(x,y,z))", "score": 0}
{"id": "eqasc_validation_946", "prediction": "all x.(Cilia.WindToMove(x) -> CiliaWave(x))", "score": -1}
{"id": "eqasc_validation_947", "prediction": "all x.(Paramecium(x) -> (Protozoa(x) & SingleLeededAnimal(x)))", "score": 2}
{"id": "eqasc_validation_947", "prediction": "(Protozoa). (SingleLeazedAnimal(Paramecium))", "score": -1}
{"id": "eqasc_validation_947", "prediction": "all x.(Paramecium(x) -> (Protozoa(x) & SingleLeasedAnimal(x)))", "score": 2}
{"id": "eqasc_validation_947", "prediction": "all x.(Paramecium(x) -> (Protozoa(x) & SingleLeached(x)))", "score": 2}
{"id": "eqasc_validation_947", "prediction": "all x.(Paramecium(x) -> (Protozoa(x) & SingleLeared(x)))", "score": 2}
{"id": "eqasc_validation_947", "prediction": "all x.(Paramecium(x) -> (Cleared(x) & Isolated(x)))", "score": 0}
{"id": "eqasc_validation_947", "prediction": "all x.(Paramecium(x) -> (Protozoa(x) & SingleLaid(x)))", "score": 2}
{"id": "eqasc_validation_947", "prediction": "all x.(Paramecium(x) -> (Protozoa(x) & SingleLeachedAnimal(x)))", "score": 2}
{"id": "eqasc_validation_947", "prediction": "all x.(Paramecium(x) -> (Platozoa(x) & SingleLeached(x)))", "score": 0}
{"id": "eqasc_validation_947", "prediction": "all x.(Paramecium(x) -> (Protozoan(x) & SingleLeasenedAnimal(x)))", "score": 0}
{"id": "eqasc_validation_947", "prediction": "all x.(Pamera(x) -> (Protozoa(x) & SingleLeased(x)))", "score": 0}
{"id": "eqasc_validation_947", "prediction": "all x.(Paramecium(x) -> (Athlete(x) & SingleLeached(x)))", "score": 0}
{"id": "eqasc_validation_947", "prediction": "All x.(Paramecium(x) -> (SheathAcid(x) & SingleLeafed(x)))", "score": -1}
{"id": "eqasc_validation_947", "prediction": "all x.(Paramecium(x) -> (Protozoa(x) & SingleLeavedAnimal(x)))", "score": 2}
{"id": "eqasc_validation_947", "prediction": "all x.(Paramecium(x) -> (Animal(x) & SingleLeafed(x)))", "score": 0}
{"id": "eqasc_validation_948", "prediction": "all x.(Paramecium(x) -> (CategorizedOnMovement(x) & IndicatesOnMovement(x)))", "score": 0}
{"id": "eqasc_validation_948", "prediction": "all x.(Paramecium(x) -> CanBeClassifiedOnMovement(x))", "score": 7}
{"id": "eqasc_validation_948", "prediction": "all x y.((Paramecium(x) & Fracture(y)) -> CategorizedOn(x,y))", "score": 0}
{"id": "eqasc_validation_948", "prediction": "all x.(Paramecium(x) -> (Movement(x,x) | Movement(x,m)))", "score": 0}
{"id": "eqasc_validation_948", "prediction": "all x.(Paramecium(x) -> (ReliesOnMovement(x) & MovesOnMovement(x)))", "score": 0}
{"id": "eqasc_validation_948", "prediction": "all x y.((Paramecium(x) & ReactionHeight(y)) -> ClassifiedOn(x,y))", "score": 0}
{"id": "eqasc_validation_948", "prediction": "all x.(Paramecium(x) -> (ClassifiedOnMovement(x) & Moves(x)))", "score": 0}
{"id": "eqasc_validation_948", "prediction": "all x y.((Paramecium(x) & (Moving(y) | Moving(y))) -> CanBeClassifiedOn(x,y))", "score": 0}
{"id": "eqasc_validation_948", "prediction": "all x y.((Paramecium(x) & Move(y)) -> CanBeClassifiedOnMovement(x,y))", "score": 0}
{"id": "eqasc_validation_948", "prediction": "all x.(Paramecium(x) -> (Movement(y) & Moving(z) & Moves(x,z)))", "score": 0}
{"id": "eqasc_validation_948", "prediction": "all x.(Paramecium(x) -> (MovementOnMovementOnParamecium(x) & MoveOnMovementOnParamecium(x)))", "score": 0}
{"id": "eqasc_validation_948", "prediction": "all x y.((Paramecium(x) & Movement(y)) -> CanBeClassifiedOn(x,y))", "score": 0}
{"id": "eqasc_validation_948", "prediction": "all x.(Paramecium(x) -> CanBeClassifiedOnMovementIllustratedOnMovement(x))", "score": 0}
{"id": "eqasc_validation_948", "prediction": "all x y.((Paramecium(x) & Moves(y) & CategorizedOnMovement(x,y)) -> CanBeClassifiedOnMovement(x,y))", "score": 0}
{"id": "eqasc_validation_948", "prediction": "all x.(Paramecium(x) -> (Movement(x) | Movement(x)))", "score": 7}
{"id": "eqasc_validation_949", "prediction": "all x.(SingleLéguédAnimal(x) -> CanBeClassifiedOnFacingMovement(x))", "score": 0}
{"id": "eqasc_validation_949", "prediction": "all x y.((Animal(x) & SingleLeached(x)) -> (CanBeCategorizedOnMovement(x) & CanBeCategorizedOnMovement(y)))", "score": 0}
{"id": "eqasc_validation_949", "prediction": "all x.(ByClipped(x) -> (SingleLeaved(x) & Moves(x)))", "score": 0}
{"id": "eqasc_validation_949", "prediction": "all x y.((SingleLeaved(x) & Animal(y) & Moves(x,y)) -> CanBeClassifiedOnBasisOfMovement(x,y))", "score": 0}
{"id": "eqasc_validation_949", "prediction": "all x.(SingleLaidAnimal(x) -> CanBeClassifiedOnBaseOnMovement(x))", "score": 0}
{"id": "eqasc_validation_949", "prediction": "all x.(SingleLeapedAnimal(x) -> CanBeClassifiedOnTheBaseOnMovement(x))", "score": 0}
{"id": "eqasc_validation_949", "prediction": "all x.(SingleLayedAnimal(x) -> CanBeClassifiedOnGroundingMovements(x))", "score": 0}
{"id": "eqasc_validation_949", "prediction": "all x y.((Veterin(x) & SingleLayed(y)) -> (ClassifiedOnFacingMovement(x,y) & ClassifiedOnMovement(x,y)))", "score": 0}
{"id": "eqasc_validation_949", "prediction": "all x.(SingleLeatheredAutor(x) -> ClassifiedOnMovement(x))", "score": 0}
{"id": "eqasc_validation_949", "prediction": "all x.(SingleLeatheredAnimal(x) -> ClassifiedOnDifferenceOfMovements(x))", "score": 0}
{"id": "eqasc_validation_949", "prediction": "all x.(SingleLaundered(x) -> (Animal(x) & Moves(x) & Moves(x)))", "score": 0}
{"id": "eqasc_validation_949", "prediction": "all x.(SpecifiedOnMovingSingleLayed(x) -> Animal(x))", "score": 0}
{"id": "eqasc_validation_949", "prediction": "all x.(SingleLeaped(x) -> (Animal(x) & MovesOnMovement(x)))", "score": 0}
{"id": "eqasc_validation_949", "prediction": "all x.(SingleLeavedAnimal(x) -> ClassifiedOnBaseOnMovement(x))", "score": 0}
{"id": "eqasc_validation_949", "prediction": "all x.(SingleLeavedAnimal(x) -> ClassifiedOnBaseOfHowMovement(x,y))", "score": 0}
{"id": "eqasc_validation_949", "prediction": "all x y.((SingleLeached(x) & Animal(y)) -> (ClassifiedOnMethodOfMovements(x,y) & ClassifiedOnMethodOfMovement(x,y)))", "score": 0}
{"id": "eqasc_validation_950", "prediction": "is the hardesttokillProtozoa(CryprosporidiumParvum)", "score": -1}
{"id": "eqasc_validation_950", "prediction": "(Stainest(CrystallidiumParvum) & Protozoa(Cryptosporidium))", "score": 0}
{"id": "eqasc_validation_950", "prediction": "all x.(CrystallidiumParvum(x) -> HardestProtozoaToKill(x))", "score": 0}
{"id": "eqasc_validation_950", "prediction": "Cryptosporidium parvum (Crotosporidium) & HardestProtozoaToKill(x))", "score": -1}
{"id": "eqasc_validation_950", "prediction": "(SheartestProtozoaToKill(X) & CryptosporidiumParvum(x))", "score": 0}
{"id": "eqasc_validation_950", "prediction": "all x.(CryptosporidiumParvum(x) -> HardestProtozoaToKill(x))", "score": 0}
{"id": "eqasc_validation_950", "prediction": "all x.((CryptosporidiumParvum(x) & HardestProtozoaToKill(x)) -> CryptosporidiumParvum(x))", "score": 0}
{"id": "eqasc_validation_950", "prediction": "(HardestProtozoaToKill(CryptosporidiumParvum))", "score": 0}
{"id": "eqasc_validation_950", "prediction": "all x.((CryosporidiumParvum(x) & Protozoa(y)) -> HardestToKill(x,y))", "score": 0}
{"id": "eqasc_validation_950", "prediction": "(HasTheHardestProteozoaToClean(CHP) & CryptosporidiumParvum(CHP))", "score": 0}
{"id": "eqasc_validation_950", "prediction": "(DamnestProtozoa(CryptosporidiumParvum))", "score": 0}
{"id": "eqasc_validation_950", "prediction": "all x.((Protozoa(x) & HardestToKill(x)) -> CryptosporidiumParvum(x))", "score": 0}
{"id": "eqasc_validation_950", "prediction": "all x.(CocosmodiumParvum(x) -> HardestProtozoaToKill(x))", "score": 0}
{"id": "eqasc_validation_950", "prediction": "all x y.((CryptosporidiumParvum(x) & Protozoa(y)) -> HardestToKill(x,y))", "score": 0}
{"id": "eqasc_validation_950", "prediction": "all x.((Protozoa(x) & CryptosporidiumPurvum(x)) -> FeltiestToKill(x))", "score": 0}
{"id": "eqasc_validation_951", "prediction": "all x y.((Animal(x) & Cyptosporidium(y)) -> OftenClassifiedOnMovement(x,y))", "score": 0}
{"id": "eqasc_validation_951", "prediction": "all x.((Animal(x) & Cyptosporinium(x)) -> ClassifiedOn(x))", "score": 0}
{"id": "eqasc_validation_951", "prediction": "all x.((Animal(x) & Cyptosporidium(x)) -> ClassifiedOnMovement(x))", "score": 0}
{"id": "eqasc_validation_951", "prediction": "all x.(Arbitrat(x) -> (Cyptosporidium(x) & MoveOn(x)))", "score": 0}
{"id": "eqasc_validation_951", "prediction": "all x.(Cyptosporidium(x) -> (Animal(x) & ClassifiedOnMovement(x)))", "score": 0}
{"id": "eqasc_validation_951", "prediction": "all x.(Cyptosporidium(x) -> (Animal(x) & Moves(x)))", "score": 0}
{"id": "eqasc_validation_951", "prediction": "all x.(Cyptosporidium(x) -> ClassifiedOnMovement(x))", "score": 0}
{"id": "eqasc_validation_951", "prediction": "all x y z.((Animal(x) & Cyptosporidium(y) & Move(z)) -> ClassifiedOn(x,y,z))", "score": 0}
{"id": "eqasc_validation_951", "prediction": "all x y.((Animal(x) & Cyptosporidium(y)) -> ClassifiedOnMovement(x,y))", "score": 0}
{"id": "eqasc_validation_951", "prediction": "all x.((Animal(x) & Cyptosporidium(x) & MovesLess(x)) -> ClassifiedOnDevice(x))", "score": 0}
{"id": "eqasc_validation_952", "prediction": "all x.(Ciliate(x) -> CilibratedProtozoa(x))", "score": 0}
{"id": "eqasc_validation_952", "prediction": "all x.(Ciliate(x) -> CiliatedProtozoa(x))", "score": 0}
{"id": "eqasc_validation_952", "prediction": "all x.(Ciliate(x) -> CilinatedProtozoa(x))", "score": 0}
{"id": "eqasc_validation_952", "prediction": "all x y.((Ciliate(x) & Ciliate(y)) -> Cilite(x))", "score": 0}
{"id": "eqasc_validation_952", "prediction": "all x.(Ciliatic(x) -> CiliatedProtozoa(x))", "score": 0}
{"id": "eqasc_validation_952", "prediction": "all x.(Ciliate(x) -> CeciliatedProtozoa(x))", "score": 0}
{"id": "eqasc_validation_952", "prediction": "all x.(Ciliates(x) -> CilinidatedProtozoa(x))", "score": 0}
{"id": "eqasc_validation_952", "prediction": "all x.(Ciliates(x) -> CiliatedProtozoa(x))", "score": 0}
{"id": "eqasc_validation_952", "prediction": "all x y.((Ciliate(x) & Ciliate(y)) -> CilicatedProtozoa(x,y))", "score": 0}
{"id": "eqasc_validation_952", "prediction": "(Ciliates(Ciliates) -> CilicatedProtozoa(Ciliates))", "score": 0}
{"id": "eqasc_validation_953", "prediction": "all x.(Ciliates(x) -> CanBeClassifiedOnMovement(x))", "score": 0}
{"id": "eqasc_validation_953", "prediction": "all x.(Ciliate(x) -> LocatedOnMovement(x))", "score": 0}
{"id": "eqasc_validation_953", "prediction": "all x.(Ciliate(x) -> CanBeClassified(x))", "score": 0}
{"id": "eqasc_validation_953", "prediction": "all x.(Ciliate(x) -> ClassifiedOnMovement(x))", "score": 0}
{"id": "eqasc_validation_953", "prediction": "all x.(Ciliat(x) -> MovesOn(x))", "score": 0}
{"id": "eqasc_validation_953", "prediction": "all x.(Ciliat(x) -> (MovesOn(x,Ciliates) & ClassifiesOn(x,Ciliates)))", "score": 0}
{"id": "eqasc_validation_953", "prediction": "all x.(Ciliate(x) -> ClassifyByMovement(x))", "score": 0}
{"id": "eqasc_validation_953", "prediction": "all x.(Ciliate(x) -> ClassifiedOnModernMovement(x))", "score": 0}
{"id": "eqasc_validation_953", "prediction": "all x y.((Ciliates(x) & Moving(y)) -> ClassifiedOnBase(x,y))", "score": 0}
{"id": "eqasc_validation_953", "prediction": "all x.(Ciliat(x) -> Classified(x))", "score": 0}
{"id": "eqasc_validation_953", "prediction": "all x.(Ciliates(x) -> ClassifiedOnMovement(x))", "score": 0}
{"id": "eqasc_validation_953", "prediction": "all x.(Ciliatic(x) -> CanBeClassifiedOnMovement(x))", "score": 0}
{"id": "eqasc_validation_953", "prediction": "all x.(Ciliate(x) -> CanBeClassifiedOnFacility(x))", "score": 0}
{"id": "eqasc_validation_953", "prediction": "all x.(Ciliat(x) -> (Movement(x) & Move(x)))", "score": 0}
{"id": "eqasc_validation_953", "prediction": "all x.(Ciliat(x) -> ClassifiedOnMovement(x))", "score": 0}
{"id": "eqasc_validation_954", "prediction": "all x.(Chromoplast(x) -> (Make(x,pigment) & Store(x,pigment)))", "score": 4}
{"id": "eqasc_validation_954", "prediction": "all x.(Chromoplast(x) -> (MakesPigments(x) & StoresPigments(x)))", "score": 0}
{"id": "eqasc_validation_954", "prediction": "all x.(Chromoplast(x) -> (MadePigments(x) & StorePigments(x)))", "score": 0}
{"id": "eqasc_validation_954", "prediction": "all x.(Chromoplast(x) -> (Makes(x,pigment) & Stores(x,pigment)))", "score": 0}
{"id": "eqasc_validation_954", "prediction": "all x.(Chromoplast(x) -> (Makes(x,Pigments) & Stores(x,Pigments)))", "score": 0}
{"id": "eqasc_validation_954", "prediction": "all x.(Chromoplast(x) -> (MakeStaysPigments(x) & StoresPigments(x)))", "score": 0}
{"id": "eqasc_validation_954", "prediction": "all x.(Chromoplast(x) -> (Makes(x,Pigment) & Stores(x,Pigment)))", "score": 0}
{"id": "eqasc_validation_954", "prediction": "all x.(Chromoplast(x) -> MakesAndStoresPigments(x))", "score": 0}
{"id": "eqasc_validation_954", "prediction": "all x y.((Chromoplast(x) & Pigment(y)) -> (Makes(x,y) & Stores(x,y)))", "score": 0}
{"id": "eqasc_validation_955", "prediction": "all x.(Chromoplast(x) -> (ContainsRedOrYellowXanthophyllPigments(x) & LargeAmounts(x)))", "score": 0}
{"id": "eqasc_validation_955", "prediction": "all x.(Chromoplast(x) -> (ContainsRedOrYellowXanthophyll(x) & InLargeAmounts(x)))", "score": 0}
{"id": "eqasc_validation_955", "prediction": "all x y.((Chromoplast(x) & Pigment(y,x) & (Red(y) | Yellow(y))) -> LargeAmount(x,y))", "score": 0}
{"id": "eqasc_validation_955", "prediction": "all x.(Chromoplast(x) -> ContainsLargeAmounts(x,red,yellow))", "score": 0}
{"id": "eqasc_validation_955", "prediction": "all x.(Chromoplast(x) -> (ContainsRedOrYellowXanthophyll(x) & LargeAmounts(x)))", "score": 0}
{"id": "eqasc_validation_955", "prediction": "all x.(Chromoplast(x) -> (ContainsRedOrYellowXanthophylls(x) & LargeAmounts(x)))", "score": 0}
{"id": "eqasc_validation_955", "prediction": "all x.(Chromoplast(x) -> (ContainsRedXanthophyllPigments(x) | ContainsYellowXanthophyllPigments(x)))", "score": 0}
{"id": "eqasc_validation_955", "prediction": "all x.(Chromoplast(x) -> (ContainsRedOrYellowXanthophyllPigments(x) & InLargeAmounts(x)))", "score": 0}
{"id": "eqasc_validation_955", "prediction": "all x.(Chromoplast(x) -> (Contains(x,y) & (Contains(x,z) | Contains(x,z)))))", "score": -1}
{"id": "eqasc_validation_955", "prediction": "all x.(Chromoplast(x) -> (RedOrYellowXanthophyllPigmentsInLargeAccumulations(x) & InLargeAccumulates(x)))", "score": 0}
{"id": "eqasc_validation_955", "prediction": "exists x.(Chromoplast(x) & (ContainsRedXanthophyll(x) | ContainsYellowXanthophyllPigments(x)) & InLargeAmounts(x))", "score": 0}
{"id": "eqasc_validation_955", "prediction": "all x.(Chromoplast(x) -> (ContainsPigments(x,y) & (ContainsRed(x) | ContainsYellow(x))))", "score": 0}
{"id": "eqasc_validation_955", "prediction": "all x.(Chromoplast(x) -> (ContainsRedXanthophyll(x) | ContainsYellowXanthophyll(x)))", "score": 0}
{"id": "eqasc_validation_955", "prediction": "all x.(Chromoplast(x) -> (ContainsRedOrYellowXanthophyllPigments(x) & LargeAmount(x,y)))", "score": 0}
{"id": "eqasc_validation_955", "prediction": "all x.(Chromoplast(x) -> (ContainsRedXanthophyll(x) | ContainsYellowXanthophyll(x)) & LargeAmounts(x)))", "score": -1}
{"id": "eqasc_validation_956", "prediction": "all x.(Chromoplast(x) -> (Makes(x,red) | Stores(x,y,y)) & InLargeAmounts(x,y)))", "score": -1}
{"id": "eqasc_validation_956", "prediction": "all x y.((Chromoplast(x) & Color(y)) -> (Makes(x,y) & Stores(x,y) & In(x,y)))", "score": 0}
{"id": "eqasc_validation_956", "prediction": "all x.(Chromoplast(x) -> exists y z w.(RedColor(y) | YellowColor(z) & MuchAmount(w) & MakesAndStores(x,y) & InLargeAmountsOfAmounts(x,z))))", "score": -1}
{"id": "eqasc_validation_956", "prediction": "all x y z.((Chromoplast(x) & (RedColor(y) | YellowColor(z))) -> (Makes(x,y) & Stores(x,z)))", "score": 0}
{"id": "eqasc_validation_956", "prediction": "all x y.((Chromoplast(x) & Red(y)) -> Stores(x,y))", "score": 0}
{"id": "eqasc_validation_956", "prediction": "all x.(Chromoplast(x) -> (Make(x,y) & Store(x,y) & (RedColor(y) | YellowColor(y)) & LargeAmounts(z))))", "score": -1}
{"id": "eqasc_validation_956", "prediction": "all x.(Chromoplast(x) -> (MakesRedOrYellowColors(x) & StoresRedOrYellowColors(x) & LargeAmountsOfColors(x)))", "score": 0}
{"id": "eqasc_validation_956", "prediction": "all x.(Chromoplast(x) -> (MakesRedOrYellowColors(x) & StoresIt(x) & LargeAmounts(x)))", "score": 0}
{"id": "eqasc_validation_956", "prediction": "all x.(Chromoplast(x) -> (MakesRedOrYellowColors(x) & StoresRedOrYellowColors(x) & LargeAmounts(x)))", "score": 0}
{"id": "eqasc_validation_956", "prediction": "all x y z.((Chromoplast(x) & Color(y) & Color(z)) -> (Makes(x,y) & Stores(x,z) & InLargeAmounts(x)))", "score": 0}
{"id": "eqasc_validation_956", "prediction": "all x.(Chromoplast(x) -> (MakesAndStoresRedOrYellowColors(x) & InLargeAmounts(x)))", "score": 0}
{"id": "eqasc_validation_956", "prediction": "all x.(Chromoplast(x) -> (MakesAndStoresRedOrYellowColors(x) & LargeAmountsAmounts(x) & LargeAmountsAmounts(x)))", "score": 0}
{"id": "eqasc_validation_956", "prediction": "all x y.((Chromoplast(x) & RedOrYellowColor(y)) -> (MadeAndStore(x,y) & LargeAmounts(x)))", "score": 0}
{"id": "eqasc_validation_956", "prediction": "all x y z.((Chromoplast(x) & (RedColor(y) | YellowColor(y)) & LargeAmounts(z)) -> MakesAndStores(x,y,z))", "score": 0}
{"id": "eqasc_validation_956", "prediction": "all x y z.((Chromoplast(x) & Color(y) & Color(z) & LargeAmounts(z)) -> (MakesAndStores(x,y,z,ry) & InLargeAmounts(x,y,z)))", "score": 0}
{"id": "eqasc_validation_956", "prediction": "all x.(Chromoplast(x) -> (Makes(x,Red) | Stores(x,Yellow)) & InLargeAmounts(x)))", "score": -1}
{"id": "eqasc_validation_957", "prediction": "all x.(Pigment(x) -> GivesColorToPaint(x))", "score": 0}
{"id": "eqasc_validation_957", "prediction": "all x y.((Pigment(x) & Pigment(y)) -> GivesColorToPaint(x,y))", "score": 0}
{"id": "eqasc_validation_957", "prediction": "All x.((Pigment(x) & Pigments(x)) -> GivesColorToPaint(x))", "score": -1}
{"id": "eqasc_validation_957", "prediction": "all x.(GiantPopulation(x) -> GiveColorToPaint(x))", "score": 0}
{"id": "eqasc_validation_957", "prediction": "all x.(Pigment(x) -> GivesColorAndPaint(x))", "score": 0}
{"id": "eqasc_validation_957", "prediction": "all x y z.((Pigment(x) & Pigment(y) & Paint(z)) -> GivesColor(x,y,z))", "score": 0}
{"id": "eqasc_validation_957", "prediction": "all x.(Pigmented(x) -> GivesColorTo(x,Paint))", "score": 0}
{"id": "eqasc_validation_957", "prediction": "all x.(GivingPigment(x) -> GivesColorToPaint(x))", "score": 0}
{"id": "eqasc_validation_957", "prediction": "all x.(Pigment(x) -> ColorToPaint(x))", "score": 0}
{"id": "eqasc_validation_958", "prediction": "all x.(Chromoplast(x) -> GivesColorToPaint(x))", "score": 0}
{"id": "eqasc_validation_958", "prediction": "all x.(Cromoplast(x) -> GivesColorToPaint(x))", "score": 0}
{"id": "eqasc_validation_958", "prediction": "all x y.((Cromoplast(x) & Paint(y)) -> GivesColor(x,y))", "score": 0}
{"id": "eqasc_validation_958", "prediction": "all x y z.((Chromoplast(x) & (Paint(y) | Paint(z))) -> GivesColorToPaint(x,y))", "score": 0}
{"id": "eqasc_validation_958", "prediction": "all x y.((Chromoplast(x) & Paint(y)) -> GivesColor(x,y))", "score": 0}
{"id": "eqasc_validation_958", "prediction": "all x y z.((Chromoplast(x) & Paint(y) & Paint(z)) -> GivesColorTo(x,y,z))", "score": 0}
{"id": "eqasc_validation_958", "prediction": "all x y z.((Chromoplast(x) & Painter(y) & Color(z)) -> GivesColorTo(x,y,z))", "score": 0}
{"id": "eqasc_validation_958", "prediction": "all x.(Chromoplast(x) -> GiveColorToPaint(x))", "score": 0}
{"id": "eqasc_validation_958", "prediction": "all x.(Chromoplast(x) -> GalvanisesColor(x))", "score": 0}
{"id": "eqasc_validation_959", "prediction": "all x.(Chromoplast(x) -> ((Red(x) | Yellow(x) | Orange(x))))", "score": 1}
{"id": "eqasc_validation_959", "prediction": "all x.(Chromoplast(x) -> ((RedHasCartenoidPigments(x) & HasCartenoidPigments(x)) | (YellowHasCartenoidPigments(x) & HasCartenoidPigments(x))))", "score": 0}
{"id": "eqasc_validation_959", "prediction": "all x y.(( Chromoplast(x) & CarrotnoidPigments(y)) -> (Red(x) | Yellow(x) | Orange(x)))", "score": 0}
{"id": "eqasc_validation_959", "prediction": "all x.(Chromoplast(x) -> (Rod(x) | Yellow(x) | Orange(x)) & CarnenoidPigments(x)))", "score": -1}
{"id": "eqasc_validation_959", "prediction": "all x.(Chromoplast(x) -> ((RedHaut(x) | YellowHaut(x) | OrangeHaut(x)) & CarbonoidPigments(x)))", "score": 0}
{"id": "eqasc_validation_959", "prediction": "all x.(Chromoplast(x) -> ((RedHull(x) | YellowHull(x) | OrangeHull(x))))", "score": 0}
{"id": "eqasc_validation_959", "prediction": "all x.(Chromoplast(x) -> ((Red(x) | Yellow(x) | Orange(x)) & CartenoidPigments(x)))", "score": 1}
{"id": "eqasc_validation_959", "prediction": "all x.(Chromoplast(x) -> (Rain(x) | Yellow(x) | Orange(x)))", "score": 0}
{"id": "eqasc_validation_959", "prediction": "all x.(Chromoplast(x) -> (Red(x) | Yellow(x) | Orange(x)))", "score": 1}
{"id": "eqasc_validation_959", "prediction": "all x.(Chromoplast(x) -> ((Red(x) | Yellow(x) | Orange(x)) & CarnenoidPigments(x)))", "score": 1}
{"id": "eqasc_validation_959", "prediction": "all x.(Cromoplast(x) -> (Tree(y) & (Red(y) | Yellow(y) | Orange(y))))", "score": 0}
{"id": "eqasc_validation_959", "prediction": "all x.(Chromoplast(x) -> (RedPigments(x) & Cartonoids(x) & YellowPigments(x) & OrangePigments(x)))", "score": 0}
{"id": "eqasc_validation_959", "prediction": "all x.(Chromoplast(x) -> (RedHair(x) | YellowHair(x) | OrangeHair(x)))", "score": 0}
{"id": "eqasc_validation_959", "prediction": "all x.(Chromoplast(x) -> (Rose(x) | Yellow(x) | Orange(x)) & Cartenoid(x)))", "score": -1}
{"id": "eqasc_validation_960", "prediction": "all x.(Chromoplast(x) -> ((Red(x) | Yellow(x) | Orange(x)) & MakesColor(x) & StoresColors(x)))", "score": 0}
{"id": "eqasc_validation_960", "prediction": "all x.(Chromoplast(x) -> ((Red(x) | Yellow(x) | Orange(x)) & (MakesColors(x) | StoresColors(x))))", "score": 0}
{"id": "eqasc_validation_960", "prediction": "all x.(Chromoplast(x) -> ((Red(x) | Yellow(x) | Orange(x)) & (MakeColors(x) | StoreColors(x))))", "score": 0}
{"id": "eqasc_validation_960", "prediction": "all x.(Chromoplast(x) -> ((RedInHaura(x) | YellowInHAura(x) | OrangeInHaura(x)) & MakesAndStoresColors(x)))", "score": 0}
{"id": "eqasc_validation_960", "prediction": "all x.(Chromoplast(x) -> ((Red(x) | Yellow(x) | Orange(x)) & Make(x,Color) & Store(x,Color)))", "score": 4}
{"id": "eqasc_validation_960", "prediction": "all x.(Chromoplast(x) -> (Red(x) | Yellow(x) | Orange(x)) & Make(x) & StoreColor(x)))", "score": -1}
{"id": "eqasc_validation_960", "prediction": "all x.(Chromoplast(x) -> ((Red(x) | Yellow(x) | Orange(x)) & MakeOrStoreColor(x)))", "score": 0}
{"id": "eqasc_validation_960", "prediction": "all x.(Chromoplast(x) -> ((Red(x) | Yellow(x) | Orange(x)) & MakeColors(x)) & StoreColors(x)))", "score": -1}
{"id": "eqasc_validation_960", "prediction": "all x.(Chromoplast(x) -> ((Red(x) | Yellow(x) | Orange(x)) & MakeAndStoreColor(x)))", "score": 0}
{"id": "eqasc_validation_960", "prediction": "all x.(Chromoplast(x) -> (FourTones(x) & (Red(x) | Yellow(x) | Orange(x)) & MakeStock Color(x)))", "score": -1}
{"id": "eqasc_validation_960", "prediction": "all x.(Chromoplast(x) -> ((Red(x) | Yellow(x) | Orange(x)) & MakesColor(x) & StoresColor(x)))", "score": 0}
{"id": "eqasc_validation_960", "prediction": "all x.(Chromoplast(x) -> ((Red(x) | Yellow(x) | Orange(x)) & MakesAndStoresColors(x)))", "score": 0}
{"id": "eqasc_validation_960", "prediction": "all x.(Chromoplast(x) -> ((Red(x) | Yellow(x) | Orange(x)) & MakesColors(x) & StoresColors(x)))", "score": 0}
{"id": "eqasc_validation_960", "prediction": "all x.(Chromoplast(x) -> ((Red(x) | Yellow(x) | Orange(x)) & MakeColors(x) & StoreColors(x)))", "score": 0}
{"id": "eqasc_validation_960", "prediction": "all x.(Chromoplast(x) -> ((RedHair(x) | YellowHair(x) | OrangeHair(x)) & MakeColors(x) & StoreColors(x)))", "score": 0}
{"id": "eqasc_validation_961", "prediction": "all x.(Chromoplast(x) -> (exists y.(FlowerPetal(y) | Fruit(y)) & FoundIn(x,y)))", "score": 0}
{"id": "eqasc_validation_961", "prediction": "all x.(Chromoplast(x) -> (InvariantElements(x) & FoundInFlowerPetals(x) & FoundInFruits(x)))", "score": 0}
{"id": "eqasc_validation_961", "prediction": "all x y.((Chromoplast(x) & FlowerPetal(y) & Fruit(y)) -> exists z.(FoundIn(x,z) & FoundIn(x,z))))", "score": -1}
{"id": "eqasc_validation_961", "prediction": "all x.(Chromoplast(x) -> (FoundInFloweringPetalsAndFruits(x)))", "score": 0}
{"id": "eqasc_validation_961", "prediction": "all x.(Chromoplast(x) -> (exists y.(FlowerPetal(y) | Fruit(y)) & FoundIn(x,y))))", "score": -1}
{"id": "eqasc_validation_961", "prediction": "all x.(Chromoplast(x) -> (InfectedInFlowerPetals(x) | FoundInFruits(x)))", "score": 0}
{"id": "eqasc_validation_961", "prediction": "all x.(Chromoplast(x) -> (InFlowerPetals(x) & InFruits(x)))", "score": 0}
{"id": "eqasc_validation_961", "prediction": "all x.((Chromoplast(x) & (FlowerPetals(x) | Fruits(x))) -> FoundIn(x,y))", "score": 0}
{"id": "eqasc_validation_961", "prediction": "all x.(Chromoplast(x) -> (FoundInFlowerPetals(x) & Flies(x)))", "score": 0}
{"id": "eqasc_validation_961", "prediction": "all x y.((Chromoplast(x) & FlowerPetal(y) & Fruit(y)) -> FoundIn(x,y))", "score": 0}
{"id": "eqasc_validation_961", "prediction": "all x.(Chromoplast(x) -> (FoundInMostFlowerPetalsAndFruits(x)))", "score": 0}
{"id": "eqasc_validation_961", "prediction": "all x.(Chromoplast(x) -> (FoundInFlowerPetals(x) | FoundInFruits(x)))", "score": 0}
{"id": "eqasc_validation_961", "prediction": "all x.(Chromoplast(x) -> (FoundInFlowerPetals(x) & FoundInFruits(x)))", "score": 0}
{"id": "eqasc_validation_961", "prediction": "all x.(Chromoplast(x) -> (exists y.(FlowerPetal(y) & FoundIn(x,y))) & exists z.(Fruit(z) & FoundIn(x,z)))))", "score": -1}
{"id": "eqasc_validation_961", "prediction": "all x.(Chromoplast(x) -> (FoundInFlowerPetals(x) & FoundInFruit(x)))", "score": 0}
{"id": "eqasc_validation_961", "prediction": "all x.(Chromoplast(x) -> (FoundInFlowerPetals(x,y) & FoundIn(x,z) & FoundIn(x,y)))", "score": 0}
{"id": "eqasc_validation_962", "prediction": "all x y.((FlowerPetals(x) & Fruit(y)) -> (MakesPigments(x,y) | StoresPigments(x,y)))", "score": 0}
{"id": "eqasc_validation_962", "prediction": "all x y.((FlowerPetals(x) & Fruit(y)) -> MakesAndStoresPigments(x,y))", "score": 0}
{"id": "eqasc_validation_962", "prediction": "all x y z.((FlowerPetals(x) & Fruit(y) & Pigments(z)) -> (Makes(y,z) & Stores(y,z)))", "score": 0}
{"id": "eqasc_validation_962", "prediction": "all x.((FlowerPetals(x) & Fruit(x)) -> (MakesPigments(x) & StoresPigments(x)))", "score": 0}
{"id": "eqasc_validation_962", "prediction": "all x.(FloweringPetals(x) & FermentedFruits(x)) -> (MakePigments(x) & StorePigments(x)))", "score": -1}
{"id": "eqasc_validation_962", "prediction": "all x y.((FlowerPetal(x) & Fruit(y)) -> (MadePigments(x,y) & StoresPigments(x,y)))", "score": 0}
{"id": "eqasc_validation_962", "prediction": "all x y.((FlowerPetal(x) & Fruit(y)) -> (MakesPigments(x) & StoresPigments(x)))", "score": 0}
{"id": "eqasc_validation_962", "prediction": "all x y.((FlowerPetal(x) & Fruit(y)) -> (MakesPigments(x,y) & StoresPigments(x,y)))", "score": 0}
{"id": "eqasc_validation_962", "prediction": "all x y.((FlowerPetals(x) & Fruit(y)) -> (MakesPigments(x) & StoresPigments(x)))", "score": 0}
{"id": "eqasc_validation_962", "prediction": "all x.((FlowerPetal(x) & Fruit(x)) -> (MakesPigments(x) & StoresPigments(x)))", "score": 0}
{"id": "eqasc_validation_962", "prediction": "all x.((FlowerPetals(x) | Fruits(x)) -> (MakesPigments(x) & StoresPigments(x)))", "score": 0}
{"id": "eqasc_validation_962", "prediction": "all x y z.((FlowerPetal(x) & Fruit(y) & (Phizer(z) | Fruit(z))) -> (Makes(y,z) | Stores(y,z,p,p)))", "score": 0}
{"id": "eqasc_validation_962", "prediction": "all x y z.((FlowerPetal(x) & Fruit(y) & Pigment(z)) -> (Makes(y) & Stores(y,z)))", "score": 0}
{"id": "eqasc_validation_963", "prediction": "all x y z.((Flower(x) & Pigment(y) & Pigment(z)) -> Contains(x,y,z))", "score": 0}
{"id": "eqasc_validation_963", "prediction": "all x.(Flower(x) -> ContainsPigments(x))", "score": 0}
{"id": "eqasc_validation_963", "prediction": "all x.(Flower(x) -> ContainsPigment(x))", "score": 0}
{"id": "eqasc_validation_963", "prediction": "all x y.((Flower(x) & Pigment(y)) -> Contains(x,y))", "score": 0}
{"id": "eqasc_validation_963", "prediction": "all x y.((Flower(x) & Flower(y)) -> ContainsPigments(x,y))", "score": 0}
{"id": "eqasc_validation_963", "prediction": "all x y.((Flower(x) & Flower(y) & ContainsPigments(x,y)) -> ContainPigments(x,y))", "score": 0}
{"id": "eqasc_validation_964", "prediction": "all x y.((Chromoplast(x) & Paint(y)) -> MakeAndStoreTheMadeAndStoreOther(x,y))", "score": 0}
{"id": "eqasc_validation_964", "prediction": "all x y.((Chromoplast(x) & ColorPaint(y)) -> MakesAndStores(x,y))", "score": 0}
{"id": "eqasc_validation_964", "prediction": "all x.(Chromoplast(x) -> MakesAndStoresSameTeil(x))", "score": 0}
{"id": "eqasc_validation_964", "prediction": "all x.(Chromoplast(x) -> (Makes(x,Chamber) & Stores(x,Chemoplast)))", "score": 0}
{"id": "eqasc_validation_964", "prediction": "all x.(Chromoplast(x) -> (MakesAndStoresSameTeacher(x) & GivesColorToPaint(x)))", "score": 0}
{"id": "eqasc_validation_964", "prediction": "all x y.((Chromoplast(x) & Color(y)) -> MakesAndStores(x,y))", "score": 0}
{"id": "eqasc_validation_964", "prediction": "all x.(Chromoplast(x) -> (MakesAndStoresMame(x,Color) & GivesColorToPaint(x,Color)))", "score": 0}
{"id": "eqasc_validation_964", "prediction": "all x.(Chromoplast(x) -> (MakeAndStoreChemicalBody(x) & GivesColorToPaint(x)))", "score": 0}
{"id": "eqasc_validation_964", "prediction": "all x.(Chromoplast(x) -> MakesAndStoresTheMameThing(x))", "score": 0}
{"id": "eqasc_validation_964", "prediction": "all x.(Chromoplast(x) -> (MakesCompound(x) & StoresCompound(x) & GivesColorToPaint(x)))", "score": 0}
{"id": "eqasc_validation_964", "prediction": "all x.(Chromoplast(x) -> (MakesAndStoresMadeAndStoresSameTHing(x) & GivesColorToPaint(x)))", "score": 0}
{"id": "eqasc_validation_964", "prediction": "all x.(Chromoplast(x) -> (MakesAndStoresTheCommonThing(x) & GivesColorToPaint(x)))", "score": 0}
{"id": "eqasc_validation_964", "prediction": "all x.(Chromoplast(x) -> (MakesAndStoresSameThing(x) & GivesColorToPaint(x)))", "score": 0}
{"id": "eqasc_validation_964", "prediction": "all x.(Chromoplast(x) -> MakeAndStoreSameThingSameColor(x))", "score": 0}
{"id": "eqasc_validation_964", "prediction": "all x.(Chromoplast(x) -> (MakesAndStoresSameDing(x) & GivesColorToPaint(x)))", "score": 0}
{"id": "eqasc_validation_965", "prediction": "all x y.((PhotosynthesisPigments(x) & Substance(y)) -> AbsorbsVisibleLight(y,x))", "score": 0}
{"id": "eqasc_validation_965", "prediction": "all x.(PhotosynthesisPigments(x) -> AbsorbsVisibleLight(x))", "score": 0}
{"id": "eqasc_validation_965", "prediction": "all x.(PhotosynthesisPigment(x) -> AbsorbsVisibleLight(x))", "score": 0}
{"id": "eqasc_validation_965", "prediction": "All x.(PhotosynthesisPigments(x) -> AbsorbsVisibleLight(x))", "score": -1}
{"id": "eqasc_validation_965", "prediction": "all x.(Pigment(x) -> (AbsorbsVisibleLight(x) & Contains(x,y) & Contains(x,z) & Contains(x,z)))", "score": 0}
{"id": "eqasc_validation_965", "prediction": "all x y.((Photosynthesis(x) & Pigment(y)) -> (AbsorbVisibleLight(y) & Substance(x,y)))", "score": 0}
{"id": "eqasc_validation_965", "prediction": "all x.(Pigment(x) -> AbsorbsVisibleLight(x))", "score": 0}
{"id": "eqasc_validation_965", "prediction": "all x.(PhotosynthesisPigments(x) -> (AbsorbsVisibleLight(x) | SurgeLight(x)))", "score": 0}
{"id": "eqasc_validation_965", "prediction": "all x.(PhotosynthesisPigments(x) -> (AbsorbsVisibleLight(x) & Pigments(x)))", "score": 0}
{"id": "eqasc_validation_965", "prediction": "all x.(PhotosynthesisPigment(x) -> exists y.(Substance(y) & Absorbs(y,Light)))", "score": 0}
{"id": "eqasc_validation_965", "prediction": "all x.(Photosynthesis(x) -> PigmentsMostainablyAbsorbsVisibleLight(x))", "score": 0}
{"id": "eqasc_validation_965", "prediction": "all x.(PhotosynthesisPigments(x) -> (SeedAbsorbsLight(x) & Contains(x,y)))", "score": 0}
{"id": "eqasc_validation_966", "prediction": "all x.(Chromoplast(x) -> StoresSufficientSupply(x,SupportedFromVisibleLight,SupportedFromLight))", "score": 0}
{"id": "eqasc_validation_966", "prediction": "all x.(Chromoplast(x) -> (StoresSubstances(x) & AbsorbsVisibleLight(x)))", "score": 0}
{"id": "eqasc_validation_966", "prediction": "all x y z.((Chromoplast(x) & Substance(l) & Light(z)) -> StoresAndAbsorbs(x,l,z,l))", "score": 0}
{"id": "eqasc_validation_966", "prediction": "all x y z.((Chromoplast(x) & Substance(y) & VisibleLight(z)) -> Stores(x,y))", "score": 0}
{"id": "eqasc_validation_966", "prediction": "all x.(Chromoplast(x) -> Stores(x))", "score": 0}
{"id": "eqasc_validation_966", "prediction": "all x y z.((Chromoplast(x) & Substance(y) & VisibleLight(z)) -> Stores(x,y,z))", "score": 0}
{"id": "eqasc_validation_966", "prediction": "all x y z.((Chromoplast(x) & Substance(y) & AbsorbVisibleLight(z) & Stores(x,y)) -> Stores(x,z))", "score": 0}
{"id": "eqasc_validation_966", "prediction": "all x.(Chromoplast(x) -> StoresSubstances(x))", "score": 0}
{"id": "eqasc_validation_966", "prediction": "all x y.((Chromoplast(x) & Substance(y)) -> StoresOnly(x,y))", "score": 0}
{"id": "eqasc_validation_966", "prediction": "all x y z.((Chromoplast(x) & Substance(y) & Body(z) & AbsorbsVisibleLight(x,z)) -> Stores(x,y))", "score": 0}
{"id": "eqasc_validation_966", "prediction": "all x y z.((Chromoplast(x) & Substance(y) & Light(z)) -> Stores(x,y))", "score": 0}
{"id": "eqasc_validation_966", "prediction": "all x.(Chromoplast(x) -> StoresSubstancesAndAbsorbsVisibleLight(x))", "score": 0}
{"id": "eqasc_validation_967", "prediction": "all x.(Chromoplast(x) -> Hauled(x))", "score": 0}
{"id": "eqasc_validation_967", "prediction": "all x.(Chromoplast(x) -> Huid(x))", "score": 0}
{"id": "eqasc_validation_967", "prediction": "all x.(Chromoplast(x) -> HushedHamed(x))", "score": 0}
{"id": "eqasc_validation_967", "prediction": "all x.(Chromoplast(x) -> (Hued(x) & -Hued(x) & Chromoplast(x)))", "score": 0}
{"id": "eqasc_validation_967", "prediction": "all x.(Chromoplast(x) -> Huaged(x))", "score": 0}
{"id": "eqasc_validation_967", "prediction": "(Huished(chromoplast) & Chromoplast(chromoplast))", "score": 0}
{"id": "eqasc_validation_967", "prediction": "all x.(Chromoplast(x) -> Hued(x))", "score": 0}
{"id": "eqasc_validation_967", "prediction": "all x.(Chromoplast(x) -> Hushed(x))", "score": 0}
{"id": "eqasc_validation_967", "prediction": "all x y.((Chromoplast(x) & Chromoplast(y)) -> Yellowed(x))", "score": 0}
{"id": "eqasc_validation_967", "prediction": "all x y z.((Chromoplast(x) & Chromoplast(y) & Huited(z)) -> Colored(x,y,z))", "score": 0}
{"id": "eqasc_validation_967", "prediction": "all x y z.((Chromoplast(x) & Chromoplast(y) & Huished(z)) -> (Huled(y,z) | Huted(z,y)))", "score": 0}
{"id": "eqasc_validation_967", "prediction": "all x.(Chromoplast(x) -> Haled(x))", "score": 0}
{"id": "eqasc_validation_967", "prediction": "all x.(Chromoplast(x) -> HUDED. (Cromoplasts(x) & Chromoplasts(x)))", "score": -1}
{"id": "eqasc_validation_968", "prediction": "all x.(Pile(x) -> (PhotosyntheticPile(x) & ColorfulCompound(x)))", "score": 0}
{"id": "eqasc_validation_968", "prediction": "all x.(PhotosyntheticPigment(x) -> (ColorfulCompound(x) & Pigments(x)))", "score": 0}
{"id": "eqasc_validation_968", "prediction": "all x.(PionsyntheticPigment(x) -> ColorfulCompound(x))", "score": 0}
{"id": "eqasc_validation_968", "prediction": "all x.(PhotosyntheticPigment(x) -> ColorfulCompound(x))", "score": 0}
{"id": "eqasc_validation_968", "prediction": "all x.((PhotosyntheticPigment(x) & ColorfulCompound(x)) -> Pigments(x))", "score": 0}
{"id": "eqasc_validation_968", "prediction": "all x.(PysosyntheticPigments(x) -> ColorfulCompound(x))", "score": 0}
{"id": "eqasc_validation_968", "prediction": "all x.(PythonicPigments(x) -> ColorfulCompound(x))", "score": 0}
{"id": "eqasc_validation_968", "prediction": "all x y.((PhotosyntheticPigment(x) & Pigment(y)) -> ColorfulCompound(x,y))", "score": 0}
{"id": "eqasc_validation_968", "prediction": "all x.(Paint(x) -> ColorfulCompound(x))", "score": 0}
{"id": "eqasc_validation_968", "prediction": "all x.(PhotosyntheticPigments(x) -> ColorfulCompound(x))", "score": 0}
{"id": "eqasc_validation_969", "prediction": "all x.(Chromoplast(x) -> (Makes(x) & Stores(x) & ColorfulCompounds(y) & Makes(x) & Stores(x,y)))", "score": 0}
{"id": "eqasc_validation_969", "prediction": "all x y.((Chromoplast(x) & Compound(y)) -> (Makes(x,y) & Stores(x,y)))", "score": 0}
{"id": "eqasc_validation_969", "prediction": "all x y.((Chromoplast(x) & ColorfulCompound(y)) -> (Makes(x,y) & Stores(x,y)))", "score": 0}
{"id": "eqasc_validation_969", "prediction": "all x.(Chromoplast(x) -> (Make(x,colorfulCompounds) & Store(x,colorfulCompounds)))", "score": 0}
{"id": "eqasc_validation_969", "prediction": "all x.(Chromoplast(x) -> (MakesCompounds(x) & StoresCompounds(x)))", "score": 0}
{"id": "eqasc_validation_969", "prediction": "all x y.((Chromoplast(x) & ColorfulCompound(y)) -> MakesAndStores(x,y))", "score": 0}
{"id": "eqasc_validation_969", "prediction": "all x.(Chromoplast(x) -> (MakesColorfulCompounds(x) & StoresColorfulCompounds(x)))", "score": 0}
{"id": "eqasc_validation_969", "prediction": "all x y z.((Chromoplast(x) & ColorfulCompound(y) & ColorfulCompound(z) & MakesAndStores(x,y,z)) -> ColorfulCompound(x))", "score": 0}
{"id": "eqasc_validation_969", "prediction": "all x y.((Chromoplast(x) & Compound(y)) -> (Make(x,y) & Store(x,y)))", "score": 0}
{"id": "eqasc_validation_969", "prediction": "all x y z.((Chromoplast(x) & ColorfulCompound(y) & ColoringCompound(z)) -> (Makes(x,y) & Stores(x,z)))", "score": 0}
{"id": "eqasc_validation_969", "prediction": "all x.(Chromoplast(x) -> (MakesColoredCompounds(x) & StoresCompounds(x)))", "score": 0}
{"id": "eqasc_validation_969", "prediction": "all x.(Chromoplast(x) -> (Makes(x,ColorfulCompounds) & Stores(x,ColorfulCompounds)))", "score": 0}
{"id": "eqasc_validation_969", "prediction": "all x y z.((Chromoplast(x) & ColorfulCompound(y) & ItsCompound(z)) -> (Makes(x,y) & Stores(x,z)))", "score": 0}
{"id": "eqasc_validation_969", "prediction": "all x y z.((Chromoplast(x) & ColorfulCompound(y) & Compound(z) & ColorfulCompound(z)) -> (MakeColourfulCompounds(x,y) & StoreColourfulCompounds(x,z)))", "score": 0}
{"id": "eqasc_validation_970", "prediction": "all x.(Chromoplast(x) -> RedColoring(x))", "score": 0}
{"id": "eqasc_validation_970", "prediction": "all x.(Chromoplast(x) -> MakesRedColoring(x))", "score": 0}
{"id": "eqasc_validation_970", "prediction": "all x.(Chromoplast(x) -> MadeInRedColoring(x))", "score": 0}
{"id": "eqasc_validation_970", "prediction": "all x y.((Chromoplast(x) & Makes(x,y)) -> RedColoring(y))", "score": 0}
{"id": "eqasc_validation_970", "prediction": "all x.(Chromoplast(x) -> MakesRedKnitting(x))", "score": 0}
{"id": "eqasc_validation_970", "prediction": "all x y z.((Chromoplast(x) & Color(y) & RedColoring(z)) -> Makes(x,z))", "score": 0}
{"id": "eqasc_validation_971", "prediction": "all x y.((Bee(x) & Nectar(y)) -> Convert(x,y))", "score": 0}
{"id": "eqasc_validation_971", "prediction": "all x y.((Bee(x) & Nectar(y)) -> ConvertsToHoney(x,y))", "score": 0}
{"id": "eqasc_validation_971", "prediction": "all x.(Bee(x) -> (ConvertsNectarIntoHoney(x) & BeeConversion(x)))", "score": 0}
{"id": "eqasc_validation_971", "prediction": "all x.(Bee(x) -> (ConvertsNectarToHoney(x) & BecomesHoney(x)))", "score": 0}
{"id": "eqasc_validation_971", "prediction": "all x.(Bee(x) -> (ConvertNectar(x) & Honey(x)))", "score": 0}
{"id": "eqasc_validation_971", "prediction": "all x.(Bee(x) -> (ConvertsNectarToHoney(x) & ConvertsNectarToHoney(x)))", "score": 0}
{"id": "eqasc_validation_971", "prediction": "all x y z w.((Bee(x) & Nectar(y) & Honey(z) & Bees(w)) -> ConvertsTo(x,y,z,w))", "score": 0}
{"id": "eqasc_validation_971", "prediction": "all x y z.((Bee(x) & Nectar(y) & Honey(z) & Converts(x,y,z)) -> Honey(h))", "score": 0}
{"id": "eqasc_validation_971", "prediction": "all x y.((Bee(x) & Nectar(y)) -> ConvertsIntoHoney(x,y))", "score": 0}
{"id": "eqasc_validation_971", "prediction": "all x y z.((Bee(x) & Nectar(y) & Honey(z)) -> ConvertsInto(x,y,z))", "score": 0}
{"id": "eqasc_validation_971", "prediction": "all x y.((Bee(x) & Nectar(y)) -> (Converts(x,y) & Honey(z)))", "score": 0}
{"id": "eqasc_validation_971", "prediction": "all x.(Bee(x) -> (ConvertsNectar(x) & Honey(x)))", "score": 0}
{"id": "eqasc_validation_971", "prediction": "all x.(Bee(x) -> (ConvertsCentroyalIntoHoney(x) & NectarIntoHoney(x)))", "score": 0}
{"id": "eqasc_validation_971", "prediction": "all x y.((Bee(x) & Nectar(y)) -> BindsToHoney(x,y))", "score": 0}
{"id": "eqasc_validation_971", "prediction": "all x y z.((Bee(x) & Nectar(y) & Honey(z)) -> Converts(x,y))", "score": 0}
{"id": "eqasc_validation_972", "prediction": "all x.(HoneyBee(x) -> (SharedLife(x) | LiveInHome(x)))", "score": 0}
{"id": "eqasc_validation_972", "prediction": "all x y.((HoneyBee(x) & HomeApiary(y)) -> (Social(x,y) & LivesIn(x,y)))", "score": 0}
{"id": "eqasc_validation_972", "prediction": "all x.(HoneyBee(x) -> (LivesInHome(x) | LivesInAapiary(x)))", "score": 0}
{"id": "eqasc_validation_972", "prediction": "all x.(HoneyBee(x) -> (LiveSemi-(Home(x) | Apiary(x))))", "score": -1}
{"id": "eqasc_validation_972", "prediction": "all x.(HoneyBee(x) -> (Social(x) & LivesTogetherInHome(x) | LivesTogetherInAapiary(x)))", "score": 0}
{"id": "eqasc_validation_972", "prediction": "all x.(HoneyBee(x) -> ((LivingInHome(x) | LivingInAipary(x))))", "score": 0}
{"id": "eqasc_validation_972", "prediction": "all x.(HoneyBee(x) -> (LiveBetweenHome(x) | LiveTogetherInAiry(x)))", "score": 0}
{"id": "eqasc_validation_972", "prediction": "all x.(HoneyBee(x) -> (LiveInHome(x) | LiveInAidary(x)))", "score": 0}
{"id": "eqasc_validation_972", "prediction": "all x.(HoneyBee(x) -> (SocialIn(x,home) | SocialIn(x,apiary)))", "score": 0}
{"id": "eqasc_validation_972", "prediction": "all x.(HoneyBee(x) -> (Live(x,home) | Live(x,apiary)))", "score": 0}
{"id": "eqasc_validation_972", "prediction": "all x y.((HoneyBee(x) & Home(y)) | Apiary(y)) -> Social(x,y))", "score": -1}
{"id": "eqasc_validation_972", "prediction": "all x.(HoneyBee(x) -> (LivesInHome(x) | LivesInHapiary(x)))", "score": 0}
{"id": "eqasc_validation_972", "prediction": "all x.(HoneyBee(x) -> (Social(x) & LivesInHome(x) | LivesInApriary(x)))", "score": 0}
{"id": "eqasc_validation_972", "prediction": "all x.(HoneyBee(x) -> (Social(x) & (LivesInHome(x) | LivesInApiary(x))))", "score": 0}
{"id": "eqasc_validation_972", "prediction": "all x.((HoneyBee(x) & LivesInHome(x)) -> Social(x))", "score": 0}
{"id": "eqasc_validation_972", "prediction": "all x y.((HoneyBee(x) & Host(y)) -> (LivesInHome(x,y) | LivesInAapiary(x,y)))", "score": 0}
{"id": "eqasc_validation_973", "prediction": "all x y.((Nectar(x) & Apiary(y)) -> ConvertedToHoney(x,y))", "score": 0}
{"id": "eqasc_validation_973", "prediction": "all x y z.((Nectar(x) & Apiary(y) & Tapestry(z)) -> ConvertsIntoHoney(x))", "score": 0}
{"id": "eqasc_validation_973", "prediction": "all x.((Nectar(x) & Honey(y) & Apiary(z)) -> ConvertedInto(x,y,z))", "score": 0}
{"id": "eqasc_validation_973", "prediction": "all x y.((Nectar(x) & Honey(y)) -> ConvertedTo(x,y))", "score": 0}
{"id": "eqasc_validation_973", "prediction": "all x y z.((Nectar(x) & Apiary(y) & Beef(z)) -> ConvertedTo(x,y,z))", "score": 0}
{"id": "eqasc_validation_973", "prediction": "all x y z.((Nectar(x) & Apiary(y) & Apiary(z)) -> ConvertedIntoHoney(x))", "score": 0}
{"id": "eqasc_validation_973", "prediction": "all x y z.((Nectar(x) & Apiary(y) & Honey(z)) -> ConvertedTo(x,y,z))", "score": 0}
{"id": "eqasc_validation_973", "prediction": "all x y z.((Nectar(x) & Honey(y) & Apiary(z)) -> (ConvertedInto(x,y,z) & Produces(x,y)))", "score": 0}
{"id": "eqasc_validation_973", "prediction": "all x y z.((Nectar(x) & Apiary(y) & Apiary(z)) -> ConvertedToHoney(x))", "score": 0}
{"id": "eqasc_validation_973", "prediction": "all x y z.((Nectar(x) & Aapiary(y) & Apiary(a)) -> ConvertedToHoney(x,y,z))", "score": 0}
{"id": "eqasc_validation_973", "prediction": "all x y.((Nectar(x) & Apiary(y) & ConvertedIntoHoney(x,y)) -> HoneyIsIn(x,y))", "score": 0}
{"id": "eqasc_validation_973", "prediction": "all x y z.((Nectar(x) & Honey(y) & Apiary(z)) -> ConvertedInto(x,y,z))", "score": 0}
{"id": "eqasc_validation_973", "prediction": "all x y z w.((Nectar(x) & Apiary(y) & Binder(z) & ConvertsTo(x,Z)) -> Honey(y))", "score": 0}
{"id": "eqasc_validation_974", "prediction": "all x.(Butterfly(x) -> FeedsOnNectarProducedByFlowers(x))", "score": 0}
{"id": "eqasc_validation_974", "prediction": "all x.(Butterfly(x) -> (FindNectar(x) & ProducedByFlowers(x)))", "score": 0}
{"id": "eqasc_validation_974", "prediction": "all x.(Butterfly(x) -> FeedsOnDescart(x))", "score": 0}
{"id": "eqasc_validation_974", "prediction": "all x.(Butterfly(x) -> FeedsOnNectar(x))", "score": 0}
{"id": "eqasc_validation_974", "prediction": "all x y.((Butterfly(x) & Flower(y)) -> FeedsOnNectar(x,y))", "score": 0}
{"id": "eqasc_validation_974", "prediction": "all x.(Butterfly(x) -> (FeedsOnNectar(x) & ProducedByFlowers(x)))", "score": 0}
{"id": "eqasc_validation_974", "prediction": "all x y.((Butterfly(x) & Flower(y)) -> FeedsOn(x,y))", "score": 0}
{"id": "eqasc_validation_974", "prediction": "all x.(Butterfly(x) -> FeedsOn(x,blue))", "score": 0}
{"id": "eqasc_validation_974", "prediction": "all x y.((Butterfly(x) & Flowers(y)) -> FeedsOnNectar(x,y))", "score": 0}
{"id": "eqasc_validation_975", "prediction": "all x.(Bee(x) -> NeedsFlowersToMakeHoney(x))", "score": 0}
{"id": "eqasc_validation_975", "prediction": "all x.((Bee(x) & NeedsFlowers(x)) -> MakesHoney(x))", "score": 0}
{"id": "eqasc_validation_975", "prediction": "all x.(Bee(x) -> NeedsFlowers(x))", "score": 0}
{"id": "eqasc_validation_975", "prediction": "all x y.((Bee(x) & Flower(y)) -> NeedsForHoney(x,y))", "score": 0}
{"id": "eqasc_validation_975", "prediction": "all x.(Bee(x) -> NoFlowersToMakeHoney(x))", "score": 0}
{"id": "eqasc_validation_975", "prediction": "all x.(Bee(x) -> (NeedsFlowers(x) & MakesHoney(x)))", "score": 0}
{"id": "eqasc_validation_975", "prediction": "all x y.((Bee(x) & Flower(y)) -> NeedsToMake(x,y))", "score": 0}
{"id": "eqasc_validation_976", "prediction": "all x y.((Bee(x) & Beehive(y)) -> ChangesNectar(x,y))", "score": 0}
{"id": "eqasc_validation_976", "prediction": "all x.(Bee(x) -> ChangesNectarInBeehive(x))", "score": 0}
{"id": "eqasc_validation_976", "prediction": "all x y.((Bee(x) & Beehive(y)) -> ChangeNectarIn(x,y))", "score": 0}
{"id": "eqasc_validation_976", "prediction": "all x y.((Bee(x) & Beehive(y)) -> ChangesNectarIn(x,y))", "score": 0}
{"id": "eqasc_validation_976", "prediction": "all x.(Bee(x) -> (ChangesNectar(x) & InBeehive(x)))", "score": 0}
{"id": "eqasc_validation_976", "prediction": "all x y z.((Bee(x) & Beehive(y) & NectarIsInBeehive(z)) -> ChangesSoil(x,y,z))", "score": 0}
{"id": "eqasc_validation_977", "prediction": "all x y.((Honey(x) & Beehive(y)) -> ChangedIn(x,y))", "score": 0}
{"id": "eqasc_validation_977", "prediction": "all x y z.((Honey(x) & Beehive(y) & Beehive(z)) -> (Changes(x,y) & Changes(y)))", "score": 0}
{"id": "eqasc_validation_977", "prediction": "all x y z.((Honey(x) & Beehive(y) & Beehive(z)) -> Changed(x,honey))", "score": 0}
{"id": "eqasc_validation_977", "prediction": "all x y z.((Honey(x) & Beehive(y) & Beehive(z)) -> ChangedInBeehive(x,y,z))", "score": 0}
{"id": "eqasc_validation_977", "prediction": "all x y.(Honey(x) & Beehive(y) & ChangedIn(y,Beehive))", "score": 0}
{"id": "eqasc_validation_977", "prediction": "all x y.((Honey(x) & Beehive(y)) -> Changed(x,y))", "score": 0}
{"id": "eqasc_validation_977", "prediction": "all x y z.((Honey(x) & Beehive(y) & Beehive(z)) -> ChangedInAndSort(x,y,z))", "score": 0}
{"id": "eqasc_validation_977", "prediction": "all x y.((Honey(x) & Beehive(y)) -> ChangedInBeehive(x,y))", "score": 0}
{"id": "eqasc_validation_977", "prediction": "all x.((Honey(x) & Beehive(y)) -> ChangesInBeehive(x,y))", "score": 0}
{"id": "eqasc_validation_978", "prediction": "all x y.((Flower(x) & Honey(y)) -> NectarSource(x,y))", "score": 0}
{"id": "eqasc_validation_978", "prediction": "all x.(Flower(x) -> SourceOfNectarForPreferredHoney(x))", "score": 0}
{"id": "eqasc_validation_978", "prediction": "all x.(Flower(x) -> (SourceOfNectar(x) & PreferredHoney(x)))", "score": 0}
{"id": "eqasc_validation_978", "prediction": "all x y.((Flower(x) & Honey(y)) -> SourceOfNectar(x,y))", "score": 0}
{"id": "eqasc_validation_978", "prediction": "all x y.((Flower(x) & HoneyPrime(y)) -> SourceOfNectar(x,y))", "score": 0}
{"id": "eqasc_validation_978", "prediction": "all x.(Flower(x) -> (SourceOfNectar(x,honey) & Prefered(x,honey)))", "score": 0}
{"id": "eqasc_validation_978", "prediction": "all x y z.((Flower(x) & Honey(y) & Honey(z)) -> SourceOfNectar(x,y,z))", "score": 0}
{"id": "eqasc_validation_978", "prediction": "all x.(Flower(x) -> (NectarSource(x) & HoneyPreferred(x)))", "score": 0}
{"id": "eqasc_validation_979", "prediction": "all x y z.((Bee(x) & Flower(y) & Flower(z) & GetsNectar(x,y)) -> NectarFrom(x,z))", "score": 0}
{"id": "eqasc_validation_979", "prediction": "all x y.(Bee(x) -> (GetsNectarFromFlowers(x,y) & FromFlowers(y)))", "score": 0}
{"id": "eqasc_validation_979", "prediction": "all x y.((Bee(x) & Flower(y)) -> (GetsNectarFrom(x,y)))", "score": 0}
{"id": "eqasc_validation_979", "prediction": "all x y z.((Bee(x) & Flower(y) & Flower(z)) -> (GetsNectarFrom(x,y) & ProducesFrom(x,z)))", "score": 0}
{"id": "eqasc_validation_979", "prediction": "all x y z.((Bee(x) & Flower(y) & Flower(z)) -> GetsNectar(x,y,z))", "score": 0}
{"id": "eqasc_validation_979", "prediction": "all x y z.((Bee(x) & Flower(y) & Flower(z)) -> GetsNectarFrom(x,y,z))", "score": 0}
{"id": "eqasc_validation_979", "prediction": "all x y,((Bee(x) & Flower(y)) -> (GetsNectarFromNectar(x,y)))", "score": -1}
{"id": "eqasc_validation_979", "prediction": "all x y.((Bee(x) & Flower(y)) -> GetsNectarFrom(x,y))", "score": 0}
{"id": "eqasc_validation_979", "prediction": "all x.(Bee(x) -> (GetsNectarFromFlowers(x)))", "score": 0}
{"id": "eqasc_validation_979", "prediction": "all x y z w.((Bee(x) & Flower(y) & Flower(z) & Nectar(w)) -> GetsFrom(x,y,z,w)))", "score": -1}
{"id": "eqasc_validation_979", "prediction": "all x.(Bee(x) -> GetsNectarFromFlowers(x))", "score": 0}
{"id": "eqasc_validation_979", "prediction": "all x y.((Bee(x) & Flower(y)) -> GetsNectar(x,y))", "score": 0}
{"id": "eqasc_validation_979", "prediction": "all x y z.((Bee(x) & Flower(z)) -> GetsNectarFrom(x,z))", "score": 0}
{"id": "eqasc_validation_979", "prediction": "all x.(Bee(x) -> (GetsNectarFromFlowers(x) & FromFlowers(x)))", "score": 0}
{"id": "eqasc_validation_980", "prediction": "all x.(Flower(x) -> SecretsNectar(x))", "score": 0}
{"id": "eqasc_validation_980", "prediction": "all x.(Flower(x) -> SecretesNectar(x))", "score": 0}
{"id": "eqasc_validation_981", "prediction": "all x y.((Bee(x) & FlowerSecrétion(y)) -> ConvertsToHoney(x,y))", "score": 0}
{"id": "eqasc_validation_981", "prediction": "all x y z.((Bee(x) & Flower(y) & Honey(z)) -> ConvertsTo(x,y,z))", "score": 0}
{"id": "eqasc_validation_981", "prediction": "all x y.((Bee(x) & FlowerSection(y)) -> ConvertsIntoHoney(x,y))", "score": 0}
{"id": "eqasc_validation_981", "prediction": "all x.(Bee(x) -> ConvertsFlowerSecimentToHoney(x))", "score": 0}
{"id": "eqasc_validation_981", "prediction": "all x y.((Bee(x) & FlowerSecrétion(i) & Honey(i)) -> ConvertsTo(x,i,i,w))", "score": 0}
{"id": "eqasc_validation_981", "prediction": "all x.(Bee(x) -> (ConvertsFlowerSecitarionToHoney(x) & FlowerSecitarionIntoHoney(x)))", "score": 0}
{"id": "eqasc_validation_981", "prediction": "all x.(Bee(x) -> (ConvertsFlowerSection(x) & ConvertsHoney(x)))", "score": 0}
{"id": "eqasc_validation_981", "prediction": "all x:(Bee(x) -> ConfinesFlourSecretionIntoHoney(x))", "score": -1}
{"id": "eqasc_validation_981", "prediction": "all x y.((Bee(x) & FlowerSecrétion(y)) -> ConvertsIntoHoney(x,y))", "score": 0}
{"id": "eqasc_validation_981", "prediction": "all x y.((Bée(x) & FlowerSecrétion(y)) -> ConvertsToHoney(x,y))", "score": 0}
{"id": "eqasc_validation_981", "prediction": "all x y.((Bee(x) & FlowerSection(y)) -> ConvertsToHoney(x,y))", "score": 0}
{"id": "eqasc_validation_981", "prediction": "all x.(Bee(x) -> (ConvertsFlowerSecretion(x) & GetsHoney(x)))", "score": 0}
{"id": "eqasc_validation_981", "prediction": "all x.(Bee(x) -> ConvertsFlowerSectionToHoney(x))", "score": 0}
{"id": "eqasc_validation_982", "prediction": "all x.((Tea(x) & Honey(x)) -> Good(x))", "score": 0}
{"id": "eqasc_validation_982", "prediction": "all x.((Tea(x) & HasHoney(x)) -> Good(x))", "score": 0}
{"id": "eqasc_validation_982", "prediction": "all x y.((Tea(x) & Honey(y)) -> Good(x))", "score": 0}
{"id": "eqasc_validation_982", "prediction": "All x.((Tea(x) & Honey(x)) -> Good(x))", "score": -1}
{"id": "eqasc_validation_983", "prediction": "all x y z.((Bee(x) & Nectar(y) & Tea(z)) -> ConvertsTo(x,y,z))", "score": 0}
{"id": "eqasc_validation_983", "prediction": "all x y.((Bee(x) & Nectar(y)) -> ConvertsToTea(x,y))", "score": 0}
{"id": "eqasc_validation_983", "prediction": "all x y.((Bee(x) & Nectar(y)) -> Converts(x,y))", "score": 0}
{"id": "eqasc_validation_983", "prediction": "all x y z.((Bee(x) & Nectar(y) & Tea(z)) -> (ConvertsNewNectar(x,y) & Tea(y,z)))", "score": 0}
{"id": "eqasc_validation_983", "prediction": "all x y z.((Bee(x) & Nectar(n) & Tea(z)) -> (Converts(x,n,y) & CanDo(x,z)))", "score": 0}
{"id": "eqasc_validation_983", "prediction": "all x y z.((Bee(x) & nectar(y) & tea(z)) -> ConvertsTo(x,y,z))", "score": 0}
{"id": "eqasc_validation_983", "prediction": "all x y z.((Bee(x) & Nectar(y) & Tea(z)) -> Coffee(x,y,z))", "score": 0}
{"id": "eqasc_validation_983", "prediction": "all x y z w.((Bee(x) & Nectar(z) & Tea(w)) -> (Converts_x,z,w) & For(x,y,w)))", "score": -1}
{"id": "eqasc_validation_983", "prediction": "all x y.((Bee(x) & Nectar(n)) -> ConvertsForTea(x,n,pea,y))", "score": 0}
{"id": "eqasc_validation_983", "prediction": "all x.(Bee(x) -> (ConvertsNectarForTea(x) & TeaTrain(x)))", "score": 0}
{"id": "eqasc_validation_983", "prediction": "all x y z.((Bee(x) & Nectar(y) & Tea(z)) -> (ConvertsNectarTo(x,y,z)))", "score": 0}
{"id": "eqasc_validation_983", "prediction": "all x y.((Bee(x) & Nectar(y)) -> ConvertsTo(x,y))", "score": 0}
{"id": "eqasc_validation_984", "prediction": "all x.(Bee(x) -> (MovesFromFlowerToFlower(x) & GathersNectar(x)))", "score": 0}
{"id": "eqasc_validation_984", "prediction": "all x y z.((Bee(x) & Flower(y) & Flower(z)) -> (MovesFromTo(x,y,z) & GathersNectar(x)))", "score": 0}
{"id": "eqasc_validation_984", "prediction": "all x.(Bee(x) -> MovesFromFlowerToFlower(x))", "score": 0}
{"id": "eqasc_validation_984", "prediction": "all x.(Bee(x) -> (Likes(x,flower) & CollectsNectar(x)))", "score": 0}
{"id": "eqasc_validation_984", "prediction": "all x y z.((Bee(x) & Flower(y) & Flower(z) & MovingFromTo(x,y) & Nectar(z)) -> GathersIn(x,z))", "score": 0}
{"id": "eqasc_validation_984", "prediction": "all x y.((Bee(x) & Flower(y)) -> MovesFromTo(x,y))", "score": 0}
{"id": "eqasc_validation_984", "prediction": "all x y z.((Bee(x) & Flower(y) & Flower(z) & MoveSituations(x,y,z)) -> GathersNectar(x))", "score": 0}
{"id": "eqasc_validation_984", "prediction": "all x.(Bee(x) -> (MoveFromFlowerToFlower(x) & GathersNectar(x)))", "score": 0}
{"id": "eqasc_validation_984", "prediction": "all x y z.((Bee(x) & Flower(y) & Flower(z)) -> (Moves(x,y) & GathersNectar(x,z)))", "score": 0}
{"id": "eqasc_validation_984", "prediction": "all x y.((Bee(x) & Flower(y)) -> (MovesFromTo(x,y) & GathersNectar(x)))", "score": 0}
{"id": "eqasc_validation_984", "prediction": "all x.(Bee(x) -> (MoveFromFlowerToFlower(x) & GatherNectar(x)))", "score": 0}
{"id": "eqasc_validation_984", "prediction": "all x y z.((Bee(x) & Flower(y) & Flower(z)) -> MovesFromTo(x,y,z))", "score": 0}
{"id": "eqasc_validation_985", "prediction": "all x y.((Bee(x) & Flower(y)) -> (MakesHoneyFromWhatTheyGathered(x,y) & GathersFrom(x,y)))", "score": 0}
{"id": "eqasc_validation_985", "prediction": "all x y.((Bee(x) & Flower(y) & GathersFrom(x,y)) -> MakesHoneyFrom(x,y))", "score": 0}
{"id": "eqasc_validation_985", "prediction": "all x.(Bee(x) -> (CollectsFromFlowersWhatHeathes(x,flowers) & MakesHoneyFrom(x,herbs)))", "score": 0}
{"id": "eqasc_validation_985", "prediction": "all x.(Bee(x) -> (MakesHoneyFromWhatSeethFromFlowers(x) & ThrivesFromFlowers(x)))", "score": 0}
{"id": "eqasc_validation_985", "prediction": "all x y.((Bee(x) & Flower(y)) -> MakesHoneyFromWhat(x,y))", "score": 0}
{"id": "eqasc_validation_985", "prediction": "all x y.((Bee(x) & Flower(y)) -> MakesHoneyFromHoney(x,y))", "score": 0}
{"id": "eqasc_validation_985", "prediction": "all x y z.((Bee(x) & Honey(y) & Flowers(z)) -> (GathersFrom(x,y,z) & CreatesFrom(x,y)))", "score": 0}
{"id": "eqasc_validation_985", "prediction": "all x y z.((Bee(x) & Honey(y) & Flower(z)) -> (MadeFrom(x,y) & GathersFrom(x,z)))", "score": 0}
{"id": "eqasc_validation_985", "prediction": "all x y.((Bee(x) & Flower(y)) -> MakesHoneyFromHunt(x,y))", "score": 0}
{"id": "eqasc_validation_985", "prediction": "all x y z.((Bee(x) & Flower(y) & Flower(z) & GathersFrom(x,y,z)) -> MakesHoneyFrom(x,y,z))", "score": 0}
{"id": "eqasc_validation_985", "prediction": "all x.(Bee(x) -> (GathersHoneyFromFlowers(x) & EatsHoneyFromFlowers(x) & CollectsFromFlowers(x)))", "score": 0}
{"id": "eqasc_validation_985", "prediction": "all x y.((Bee(x) & Flower(y) & GatherFrom(x,y)) -> MakesHoneyFrom(x,y))", "score": 0}
{"id": "eqasc_validation_985", "prediction": "all x y z.((Bee(x) & Flower(y) & Flower(z)) -> MakesHoneyFrom(x,y,z))", "score": 0}
{"id": "eqasc_validation_985", "prediction": "all x y z.((Bee(x) & Honey(y) & Flower(z)) -> MakesFrom(x,y,z))", "score": 0}
{"id": "eqasc_validation_985", "prediction": "all x y.((Bee(x) & Flower(y)) -> MakesHoneyFromWhatBabesCollect(x,y))", "score": 0}
{"id": "eqasc_validation_985", "prediction": "all x y.((Bee(x) & Flower(y)) -> (MakeHoney(x) & GathersFrom(x,y)))", "score": 0}
{"id": "eqasc_validation_986", "prediction": "all x.(Nectar(x) -> (InFlowers(x) & InTrees(x) & InHummingbirdFeeders(x)))", "score": 0}
{"id": "eqasc_validation_986", "prediction": "all x.(Nectar(x) -> (In(x,Flowers) | In(x,Trees) | In(x,HummingbirdFeeders)))", "score": 0}
{"id": "eqasc_validation_986", "prediction": "all x.(Nectar(x) -> (InFlowers(x) | InTrees(x) | InHummingbirdFeeders(x)))", "score": 0}
{"id": "eqasc_validation_986", "prediction": "(InFlowers(nectar) & InTrees(nectar) & InHummingbirdFeeders(nectar))", "score": 0}
{"id": "eqasc_validation_986", "prediction": "all x.(Nectar(x) & (InFlowers(x) | InTrees(x) | InHummingbirdFeeders(x)))", "score": 0}
{"id": "eqasc_validation_986", "prediction": "all x.(Nectar(x) -> (Tree(x) | HummingbirdFern feeder(x)))", "score": -1}
{"id": "eqasc_validation_986", "prediction": "all x y.((Nectar(x) & Flower(y)) | Tree(y) | HummingbirdFeeder(x,y)) -> InOrder(x,y))", "score": -1}
{"id": "eqasc_validation_987", "prediction": "all x y.((Bee(x) & Honey(y) & Uses(x,y)) -> GathersMaterial(x))", "score": 0}
{"id": "eqasc_validation_987", "prediction": "all x y.((Bee(x) & Flower(y) & Tree(z)) -> GathersMaterialToMadeHoney(x,y,z))", "score": 0}
{"id": "eqasc_validation_987", "prediction": "all x y z.((Bee(x) & Material(y) & Flowers(z) & Trees(z)) -> GathersToMakeHoneyFrom(x,y,z))", "score": 0}
{"id": "eqasc_validation_987", "prediction": "all x.(Bee(x) -> (GathersMaterial(x) & MakesHoneyFromFlowersAndTrees(x)))", "score": 0}
{"id": "eqasc_validation_987", "prediction": "all x y.((Bee(x) & Member(y)) -> (CollectsMaterialToMakeHoney(x,y) & FromFlowersAndTrees(x)))", "score": 0}
{"id": "eqasc_validation_987", "prediction": "all x.(Bee(x) -> GathersMaterial(x))", "score": 0}
{"id": "eqasc_validation_987", "prediction": "all x y.((Bee(x) & Honey(y)) -> (GeeksMaterial(x,y) & MakesFromFlowersAndTrees(x,y)))", "score": 0}
{"id": "eqasc_validation_987", "prediction": "all x y.((Bee(x) & GatherMaterial(x,y)) -> (MadeHoneyFromFlowers(x,y) & MakesHoneyFromTrees(x,y)))", "score": 0}
{"id": "eqasc_validation_987", "prediction": "all x.(Bee(x) -> (GeeksMaterial(x) & MakesHoneyFromFlowersAndTrees(x)))", "score": 0}
{"id": "eqasc_validation_987", "prediction": "all x y.((Bee(x) & (Flower(y) | Tree(y))) -> GathersMaterialToMakeHoneyFrom(x,y))", "score": 0}
{"id": "eqasc_validation_987", "prediction": "all x.(Bee(x) -> (GathersMaterial(x) & MakesHoney(x) & FromFlowersAndTrees(x)))", "score": 0}
{"id": "eqasc_validation_987", "prediction": "all x y z.((Bee(x) & Material(y) & Honey(z) & (Flowers(z) | Trees(z))) -> GathersForHoney(x,y,z))", "score": 0}
{"id": "eqasc_validation_987", "prediction": "all x.(Bee(x) -> (GathesMaterial(x) & MakesHoneyFromFlowersAndTrees(x)))", "score": 0}
{"id": "eqasc_validation_987", "prediction": "all x y.((Bee(x) & Honey(y)) -> GathersMaterialForHabitationFrom(x,y))", "score": 0}
{"id": "eqasc_validation_987", "prediction": "all x.(Bee(x) -> (GathesInMaterial(x) & MakesHoneyFromFlowersAndTrees(x)))", "score": 0}
{"id": "eqasc_validation_987", "prediction": "all x y z.((Bee(x) & Material(y) & Honey(z)) -> GathersForMaking(x,y,z))", "score": 0}
{"id": "eqasc_validation_988", "prediction": "all x.(Haffish(x) -> (SectsLargeMucus(x) & ThickSlimyMucus(x)))", "score": 0}
{"id": "eqasc_validation_988", "prediction": "all x.(Haggfish(x) -> (SecretsLargeAmountsOfThickSlimyMucus(x)))", "score": 0}
{"id": "eqasc_validation_988", "prediction": "all x.(Hadfish(x) -> (SecretsLargeAmountsOfThickSlimyMucus(x) & HasEventyExercise(x)))", "score": 0}
{"id": "eqasc_validation_988", "prediction": "all x.(Haggfish(x) -> SeeksLargeAmountsOfThickSmoothyMucus(x))", "score": 0}
{"id": "eqasc_validation_988", "prediction": "all x.(Hacker(x) -> (SsecretesThickSlimyMucus(x) & LargeAmountsThickMucus(x)))", "score": 0}
{"id": "eqasc_validation_988", "prediction": "all x.(Haggs(x) -> (SheetsHucus(x) & ThickSlimyMucus(x)))", "score": 0}
{"id": "eqasc_validation_988", "prediction": "all x.(Haggfish(x) -> (secretesLargeAmountsOfHaggishMucus(x)))", "score": 0}
{"id": "eqasc_validation_988", "prediction": "all x.(Haggfish(x) -> (SecreteLargeAmountsOfThickSlimyMucus(x)))", "score": 0}
{"id": "eqasc_validation_988", "prediction": "all x.(Haggfish(x) -> (SpoisesLargeMucus(x) & ThickSlimyMucus(x)))", "score": 0}
{"id": "eqasc_validation_988", "prediction": "all x.(Haggfish(x) -> (Sects(x,y) & LargeMucus(y) & Thick(y) & Slimy(y)))", "score": 0}
{"id": "eqasc_validation_988", "prediction": "all x.(Haggf(x) -> (Secrite(x) & SmallMucus(x) & ThinMuscus(x)))", "score": 0}
{"id": "eqasc_validation_988", "prediction": "all x.(Haggfish(x) -> SecretesLargeMucus(x))", "score": 0}
{"id": "eqasc_validation_988", "prediction": "all x.(Haggfish(x) -> (SectsLargeMucus(x) & ThinMucus(x) & SlimyMucus(x)))", "score": 0}
{"id": "eqasc_validation_988", "prediction": "all x.(Haggfish(x) -> (Muscle(y) & Thick(x,y) & Slimy(y)))", "score": 0}
{"id": "eqasc_validation_988", "prediction": "all x.(Hagfish(x) -> (secretesLargeAmountsOfThickSlimyMucus(x)))", "score": 0}
{"id": "eqasc_validation_988", "prediction": "all x.(Haggfish(x) -> (SecretsLargeAmountsOfThickSmoothMucus(x) & SmallMucus(x)))", "score": 0}
{"id": "eqasc_validation_989", "prediction": "all x.(JawlessFish(x) -> (IncludesLampreys(x) | IncludesHagafisks(x)))", "score": 0}
{"id": "eqasc_validation_989", "prediction": "all x.(JawlessFish(x) -> (Lambrey(x) | Hagfish(x)))", "score": 0}
{"id": "eqasc_validation_989", "prediction": "all x y z.(JawlessFish(x) & (Lamprey(y) | Hagfish(y)))", "score": 0}
{"id": "eqasc_validation_989", "prediction": "all x.(JawlessFish(x) -> (Champrey(x) | Hagfish(x)))", "score": 0}
{"id": "eqasc_validation_989", "prediction": "all x.(JawlessFish(x) -> (Lampreys(x) | Hagfishes(x)))", "score": 0}
{"id": "eqasc_validation_989", "prediction": "all x.(JawlessFish(x) -> (Includes(x,lamprey) & Includes(x,habfish)))", "score": 0}
{"id": "eqasc_validation_989", "prediction": "all x.(JawlessFish(x) -> (Lammery(x) | Hagfish(x)))", "score": 0}
{"id": "eqasc_validation_989", "prediction": "the jawlessfish(x) -> (JanelessFish(x) & IncludesLampreys(x) & IncludesHagfish(x)))", "score": -1}
{"id": "eqasc_validation_989", "prediction": "all x.(JawlessFish(x) -> (Lampreyfish(x) | Hagfishfish(x)))", "score": 0}
{"id": "eqasc_validation_989", "prediction": "all x.(JawlessFish(x) -> (Lambray(x) & Hagfish(x)))", "score": 0}
{"id": "eqasc_validation_989", "prediction": "all x.(JawlessFish(x) -> (Yog(y) | Hagfish(y)))", "score": 0}
{"id": "eqasc_validation_989", "prediction": "all x.(JawlessFish(x) -> (Palmrey(x) | Hagfish(x)))", "score": 0}
{"id": "eqasc_validation_989", "prediction": "all x.(JudylessFish(x) -> (Lambrose(x) | Hagfish(x)))", "score": 0}
{"id": "eqasc_validation_989", "prediction": "all x y z.((JawlessFish(x) & Lamprey(y) & Hagfish(z)) -> (Enumerates(x,y) & Includes(x,z)))", "score": 0}
{"id": "eqasc_validation_989", "prediction": "all x y z.((JawlessFish(x) & Lamprey(y) & Humpfish(z)) -> (Includes(x,y) & Includes(x,z)))", "score": 0}
{"id": "eqasc_validation_989", "prediction": "all x.(JawlessFish(x) -> (ListensToLambrey(x) | ListsToHagfish(x)))", "score": 0}
{"id": "eqasc_validation_990", "prediction": "exists x.(JamlessFish(x) & SponsesLargeAmountsOfThickAndSlimyMucus(x))", "score": 0}
{"id": "eqasc_validation_990", "prediction": "exists x.(Jawless(x) & Salmon(x) & SecretesThickSlimyMucus(x))", "score": 0}
{"id": "eqasc_validation_990", "prediction": "exists x.(JawlessFish(x) & SecretesLargeMucus(x))", "score": 0}
{"id": "eqasc_validation_990", "prediction": "exists x.(JawlessFish(x) & SecretesLargeAmountsOfThickSlimyMucus(x))", "score": 0}
{"id": "eqasc_validation_990", "prediction": "exists x.(JawlessFish(x) & ChestlessFish(x) & SecretesLargeAmountsOfThickSlimyMucus(x))", "score": 0}
{"id": "eqasc_validation_990", "prediction": "exists x.(JawlessFish(x) & SecretesLargeAmountsOfThickLimbyMucus(x))", "score": 0}
{"id": "eqasc_validation_990", "prediction": "exists x.(JawlessFish(x) & ExectsLargeAmountsOfThickSlimyMucus(x))", "score": 0}
{"id": "eqasc_validation_990", "prediction": "exists x.(JawlessFish(x) & HeavyMucus(x))", "score": 0}
{"id": "eqasc_validation_990", "prediction": "exists x.(JawlessFish(x) & SecreteLargeAmountsOfSleekMucus(x))", "score": 0}
{"id": "eqasc_validation_990", "prediction": "exists x.(JawlessFish(x) & SurrendersLargeAmountsOfThickSlimyMucus(x))", "score": 0}
{"id": "eqasc_validation_990", "prediction": "exists x.(JawlessFish(x) & HugeAmountsOfLiquidMucus(x))", "score": 0}
{"id": "eqasc_validation_990", "prediction": "exists x.(JawlessFish(x) & SecretesLargeAmountsOfThickSlimyMuscus(x))", "score": 0}
{"id": "eqasc_validation_990", "prediction": "exists x.(JawlessFish(x) & ThickSlimyMucus(x))", "score": 0}
{"id": "eqasc_validation_991", "prediction": "exists x.(JawlessFish(x) & SecretesLargeAmountsOfThickSlimyMuscus(x))", "score": 0}
{"id": "eqasc_validation_991", "prediction": "exists x.(JawlessFish(x) & SpongeYuckyMuscus(x))", "score": 0}
{"id": "eqasc_validation_991", "prediction": "exists x.(JawlessFish(x) & SecretesLargeAmountsOfThickSlimyMucus(x))", "score": 0}
{"id": "eqasc_validation_991", "prediction": "exists x.(JawlessFish(x) & SecretesLargeAmountsOfThickLamps(x))", "score": 0}
{"id": "eqasc_validation_991", "prediction": "exists x y.(JawlessFish(x) & YawlessFish(y) & SecretesLargeAmountsOfThickSlimyMucus(x))", "score": 0}
{"id": "eqasc_validation_991", "prediction": "exists x.(JawlessFish(x) & LargeMucus(x) & KnownForThickShimmeryMuscus(x))", "score": 0}
{"id": "eqasc_validation_991", "prediction": "exists x.(JawlessFish(x) & (SheepsMucus(x) | StickyMucus(x))))", "score": -1}
{"id": "eqasc_validation_991", "prediction": "exists x y.(JawlessFish(x) & Jawless(y) & SecretesLargeAmountsOfThickSlimyMucus(x))", "score": 0}
{"id": "eqasc_validation_991", "prediction": "exists x.(JawlessFish(x) & SecretsLargeAmountsOfThickSlimyMucus(x))", "score": 0}
{"id": "eqasc_validation_991", "prediction": "exists x.(JawlessFish(x) & SecretesLargeAmountsOfThickSmoothMucus(x))", "score": 0}
{"id": "eqasc_validation_991", "prediction": "exists x.(JamlessFish(x) & YawFish(x) & LargeAmountsOfThickSlimyMucus(x))", "score": 0}
{"id": "eqasc_validation_991", "prediction": "exists x.(JawlessFish(x) & SecretesLargeMucus(x))", "score": 0}
{"id": "eqasc_validation_991", "prediction": "exists x.(JawlessFish(x) & -ThickSlimyMucus(x))", "score": 0}
{"id": "eqasc_validation_991", "prediction": "exists x.(JawlessFish(x) & SpeciesLargeAmountsOfThickSlimyMucus(x))", "score": 0}
{"id": "eqasc_validation_991", "prediction": "exists x.(JawlessFish(x) & SecretesLargeAmountsOfThickLimbyMucus(x))", "score": 0}
{"id": "eqasc_validation_991", "prediction": "exists x.(JawlessFish(x) & ExcerstesLargeAmountsOfThickEyeLizzyMuscus(x))", "score": 0}
{"id": "eqasc_validation_992", "prediction": "all x.(Haggfish(x) -> (ElementsMarine(x) & Slimy(x) & FeedsOnCarrionAndIlluishedFishes(x)))", "score": 0}
{"id": "eqasc_validation_992", "prediction": "all x y.((Haffish(x) & Marine(y)) -> (Slimy(x) & Carrion(y) & Injuredfish(y)))", "score": 0}
{"id": "eqasc_validation_992", "prediction": "all x.(Hagus(x) -> (All Y.(Marine(y) & Sealed(x,y)) & Slimy(x) & FeedsOnCarrionAndInjured(x,y)))", "score": -1}
{"id": "eqasc_validation_992", "prediction": "all x.(Haggfish(x) -> ((Marine(x) & Slimy(x) & FeedsOn(x,Carrion,InjuredFishes)) | FeedsOn(x,InjuredFishes))))", "score": -1}
{"id": "eqasc_validation_992", "prediction": "all x.(Haggfishes(x) -> (Marine(x) & VerySlimy(x) & FeedsOnCarrionAndInjuredFishes(x)))", "score": 0}
{"id": "eqasc_validation_992", "prediction": "all x.(Haggfish(x) -> (Underwater(x) & Slimy(x) & FeedsOnCarrionAndInjuredFishes(x)))", "score": 0}
{"id": "eqasc_validation_992", "prediction": "all x.(Hakenfish(x) -> (Marine(x) & Slimy(x) & FeedsOnCarrionOrInjuredFishes(x)))", "score": 0}
{"id": "eqasc_validation_992", "prediction": "all x.(Haggfish(x) -> (Marine(x) & Slimy(x) & FeedsOnCarrionAndInjuredFishes(x)))", "score": 0}
{"id": "eqasc_validation_992", "prediction": "all x.(Haggfish(x) -> (All Y.(Marine(y) & Sealed(y) & Slimy(x) & FeedonCarrionAndInjuredFishes(x))))", "score": -1}
{"id": "eqasc_validation_992", "prediction": "all x.(Haggfish(x) -> (CombinesMarineLife(x) & Slimy(x) & FeedsOnCarrionAndInjuredFish(x)))", "score": 0}
{"id": "eqasc_validation_992", "prediction": "all x.(Haggfish(x) -> (EntirelyMarine(x) & Slimy(x) & FeedsOnCarrionAndInjuredFishes(x)))", "score": 0}
{"id": "eqasc_validation_992", "prediction": "all x.(Haffish(x) -> (Marine(x) & Slimy(x) & FeedsOnCarrion(x) & FeedsOnInjured(x)))", "score": 0}
{"id": "eqasc_validation_992", "prediction": "all x.(Haggfish(x) -> (Marine(x) & Slimy(x) & FeedsOnCarrionFishes(x) & FeedsOnInjuredFishes(x)))", "score": 0}
{"id": "eqasc_validation_992", "prediction": "all x.(Haffish(x) -> (IncludesMarine(x) & VerySlimy(x) & FeedsOnCarrionAndInjuredFishes(x)))", "score": 0}
{"id": "eqasc_validation_992", "prediction": "all x.(Haggfish(x) -> (Marine(x) & Slimy(x) & FeedsOnCarrion(x) & FeedsOnInjuredFishes(x)))", "score": 0}
{"id": "eqasc_validation_992", "prediction": "all x.(Haggfish(x) -> (OriginalMarine(x) & Slimy(x) & FeedsOnCarrionAndInjuredFishes(x)))", "score": 0}
{"id": "eqasc_validation_993", "prediction": "all x.(Haggfish(x) -> SecretesLargeAmountsOfMucus(x))", "score": 0}
{"id": "eqasc_validation_993", "prediction": "all x.(Haggfish(x) -> SecretesLargeAmountsOfMuscus(x))", "score": 0}
{"id": "eqasc_validation_993", "prediction": "all x.(Hagfish(x) -> SecretesLargeAmountsOfMucus(x))", "score": 0}
{"id": "eqasc_validation_993", "prediction": "all x.(Hagfish(x) -> SecretesLargeMucus(x))", "score": 0}
{"id": "eqasc_validation_993", "prediction": "all x.(Haggfish(x) -> SecretesLargeAmountsInMucus(x))", "score": 0}
{"id": "eqasc_validation_993", "prediction": "all x.(Haggfish(x) -> (SectsLargeAmountsOfMucus(x) & Muscles(x)))", "score": 0}
{"id": "eqasc_validation_993", "prediction": "all x y.((Haggfish(x) & Mucus(y)) -> Secretes(x,y))", "score": 0}
{"id": "eqasc_validation_994", "prediction": "all x y.((MarineEnvironment(x) & MarineEnvironment(y)) -> HasThick(x,y)) (HasSmoothy(x) & HasThick(x,y)))", "score": -1}
{"id": "eqasc_validation_994", "prediction": "all x.((MarineEnvironment(x) & ThickSmoothyMucus(x)) -> HasMuscus(x))", "score": 0}
{"id": "eqasc_validation_994", "prediction": "all x y.((MarineEnvironment(x) & MarineEnvironment(y)) -> HasThickSlimyMuscus(x,y))", "score": 0}
{"id": "eqasc_validation_994", "prediction": "all x.(MarineEnvironment(x) -> HasThickShimmeryMucus(x))", "score": 0}
{"id": "eqasc_validation_994", "prediction": "all x.(MarineEnvironment(x) -> HasThickSlimyMucus(x))", "score": 0}
{"id": "eqasc_validation_994", "prediction": "all x.(MarineEnvironment(x) -> (HasThickSlimyMucus(x) & HasThickSlimyMucus(x) & HasSlimyMucus(x) & HasThickSlimyMucus(x)))", "score": 0}
{"id": "eqasc_validation_994", "prediction": "all x y z.((MarineEnvironment(x) & ThickMucus(y) & SlimyMucus(z)) -> Has(x,y,z))", "score": 0}
{"id": "eqasc_validation_994", "prediction": "all x.(MarineEnvironment(x) -> (HasThickSlimyMucus(x) & HasToughSlimyMucus(x) & HasCleanMucus(x) & HasDryMucus(x) & HasSlimyMucus(x)))", "score": 0}
{"id": "eqasc_validation_994", "prediction": "all x.(MarineEnvironment(x) -> HasThickSmoothyMumcus(x))", "score": 0}
{"id": "eqasc_validation_994", "prediction": "all x.(MarineEnvironment(x) -> HasThickMucus(x)) (ThickMucus(x) & SlimyMucus(x)))", "score": -1}
{"id": "eqasc_validation_994", "prediction": "all x.(Mucus(x) -> MostThickSlimyMucus(x))", "score": 0}
{"id": "eqasc_validation_995", "prediction": "exists x.(JawlessFish(x) & SpongeHasThickSlimyMucus(x))", "score": 0}
{"id": "eqasc_validation_995", "prediction": "exists x.(LivingJawlessFish(x) & SpontaneousMucus(x))", "score": 0}
{"id": "eqasc_validation_995", "prediction": "exists x.(JawlessFish(x) & KnownForProppingMuscus(x))", "score": 0}
{"id": "eqasc_validation_995", "prediction": "exists x.(LivingJawlessFish(x) & SecretedFromThickSlimyMucus(x))", "score": 0}
{"id": "eqasc_validation_995", "prediction": "exists x.(LivingJawlessFish(x) & SpontaneouslySleekyMucus(x))", "score": 0}
{"id": "eqasc_validation_995", "prediction": "exists x.(JawlessFish(x) & SpyKnows(x) & SpysThickSlimyMucus(x))", "score": 0}
{"id": "eqasc_validation_995", "prediction": "exists x.(JawlessFish(x) & RarelyDescitatesThickSlimyMucus(x))", "score": 0}
{"id": "eqasc_validation_995", "prediction": "exists x.(LivingJawlessFish(x) & SpongedInMouseExtraktingMouse(x))", "score": 0}
{"id": "eqasc_validation_995", "prediction": "exists x.(JawlessFish(x) & Living(x) & SecretesLargeAmountsOfThickSlimyMUcus(x))", "score": 0}
{"id": "eqasc_validation_995", "prediction": "exists x.(JawlessFish(x) & SpongeMucus(x) & LargeMuck(x))", "score": 0}
{"id": "eqasc_validation_995", "prediction": "exists x.(JawlessFish(x) & NotedForThesecretionOfMucus(x))", "score": 0}
{"id": "eqasc_validation_995", "prediction": "exists x.(LivingJawlessFish(x) & ManyLargeAmountsOfThickSlimyMucus(x))", "score": 0}
{"id": "eqasc_validation_995", "prediction": "exists x.(JawlessFish(x) & SalvedBySleekMucus(x))", "score": 0}
{"id": "eqasc_validation_995", "prediction": "exists x.(JawlessFish(x) & ObservedForSecsificExtraction(x) & LargeAmountsOfThickSlimyMuscus(x))", "score": 0}
{"id": "eqasc_validation_995", "prediction": "exists x.(LivingJawlessFish(x) & KnownForSleepyMucus(x))", "score": 0}
{"id": "eqasc_validation_995", "prediction": "exists x.(JawlessFish(x) & Leakless(x) & SecretsThickShimmerMuscus(x))", "score": 0}
{"id": "eqasc_validation_996", "prediction": "all x.(Haggfish(x) | Lamprey(x)) -> NoHardTissues(x))", "score": -1}
{"id": "eqasc_validation_996", "prediction": "all x.((Haggfish(x) | Lamprey(x)) -> -HasHardTissues(x))", "score": 0}
{"id": "eqasc_validation_996", "prediction": "all x y.((Haggfish(x) & Lamprey(y)) -> -HasHardTissues(x,y))", "score": 0}
{"id": "eqasc_validation_996", "prediction": "all x y.((Haqfish(x) | Lamprey(x)) -> -HasComparisonInternalHardTissues(y))", "score": 0}
{"id": "eqasc_validation_996", "prediction": "all x.((Hagfish(x) | Lamprey(x)) -> -HasHardTissues(x))", "score": 0}
{"id": "eqasc_validation_996", "prediction": "all x y.((Hagfish(x) & Lamprey(y)) -> NoHardTissues(x,y))", "score": 0}
{"id": "eqasc_validation_996", "prediction": "all x.((Hagfish(x) | Lamprey(x)) -> -InnerHardTissues(x))", "score": 0}
{"id": "eqasc_validation_996", "prediction": "all x.((Haggfish(x) | Lamprey(x)) -> NoHardTissues(x))", "score": 0}
{"id": "eqasc_validation_996", "prediction": "all x.((Hagfish(x) | Lamprey(x)) -> -InternalHardTissues(x))", "score": 0}
{"id": "eqasc_validation_996", "prediction": "all x.((Hagfish(x) | Lamprey(x)) -> NoHardTissues(x))", "score": 0}
{"id": "eqasc_validation_997", "prediction": "all x.((Creature(x) & -HasInternalHardTissues(x)) -> SecretingLargeAmountsOfThickSlimyMucus(x))", "score": 0}
{"id": "eqasc_validation_997", "prediction": "all x.((Creature(x) & -InternalHardTissues(x)) -> ProducesLargeAmountsOfThickSlimyMucus(x))", "score": 0}
{"id": "eqasc_validation_997", "prediction": "all x.((Creature(x) & -InnerHardTissues(x)) -> Extrapolates(x))", "score": 0}
{"id": "eqasc_validation_997", "prediction": "all x.((Creature(x) & -HasInternalHardTissues(x)) -> SignificantMuscusSyringe(x))", "score": 0}
{"id": "eqasc_validation_997", "prediction": "all x.((Creature(x) & NoInternalHardTissues(x)) -> SeekedForSpoilingLargeAmountsOfThickSlimyMucus(x))", "score": 0}
{"id": "eqasc_validation_997", "prediction": "all x.((Creature(x) & NoHardTissues(x)) -> NotedForSeccisingLargeAmountsOfSheetMucus(x))", "score": 0}
{"id": "eqasc_validation_997", "prediction": "all x.((Creature(x) & NoInnerHardTissues(x)) -> SpontaneousSlammyMucus(x))", "score": 0}
{"id": "eqasc_validation_997", "prediction": "all x.((Creature(x) & NoHardTissues(x)) -> SecretesThickSlimyMucus(x))", "score": 0}
{"id": "eqasc_validation_997", "prediction": "all x.((Creature(x) & -HasInternalHardTissues(x)) -> SecretsLargeMupum(x))", "score": 0}
{"id": "eqasc_validation_997", "prediction": "all x.((Creature(x) & -HasInternalHardTissues(x)) -> NotedForSkinnyMucus(x))", "score": 0}
{"id": "eqasc_validation_997", "prediction": "all x.((Creature(x) & NoHardTissues(x)) -> NotExceededForSlamyMucus(x))", "score": 0}
{"id": "eqasc_validation_997", "prediction": "all x.((Creature(x) & NoInternalHardTissues(x)) -> SignificantHasThickSlimyMucus(x))", "score": 0}
{"id": "eqasc_validation_997", "prediction": "all x.((Creature(x) & NoHardTissues(x)) -> SecretesLargeAmounts(x))", "score": 0}
{"id": "eqasc_validation_997", "prediction": "all x.((Creature(x) & -exists y.(InternalHardTissues(y) & NotHas(x,y))) -> SeeksLargeAmountsOfThickSlimyMucus(x)))", "score": -1}
{"id": "eqasc_validation_997", "prediction": "all x.((Creature(x) & DoesNoHardTissues(x)) -> SustainsLargeAmountsOfThickSlimyMucus(x))", "score": 0}
{"id": "eqasc_validation_998", "prediction": "all x.(Mountain(x) -> FormedByEarthquakes(x))", "score": 0}
{"id": "eqasc_validation_998", "prediction": "all x.(Mountain(x) -> (FormedByEarthquakes(x) & CausedByEarthquakes(x)))", "score": 0}
{"id": "eqasc_validation_998", "prediction": "all x y.((Mountain(x) & Earthquake(y)) -> FormedBy(x,y))", "score": 0}
{"id": "eqasc_validation_998", "prediction": "all x y z.((Mountain(x) & Earthquake(y) & Earthquake(z)) -> FormedBy(x,y,z))", "score": 0}
{"id": "eqasc_validation_998", "prediction": "all x y.((Mountain(x) & Earthquake(y) & FormedBy(x,y)) -> FormedBy(x,y))", "score": 0}
{"id": "eqasc_validation_998", "prediction": "all x.(Mountain(x) -> FreeznabyEarthquake(x))", "score": 0}
{"id": "eqasc_validation_998", "prediction": "all x.(Mountain(x) -> (FormedByEarthquakes(x) | FormedByEarthquakes(x)))", "score": 0}
{"id": "eqasc_validation_999", "prediction": "all x.(Earthquake(x) -> CausedByTectonicPlates(x))", "score": 0}
{"id": "eqasc_validation_999", "prediction": "all x y.((Earthquake(x) & TectonicPlate(y)) -> (CausedBy(x,y) & MovementOf(x,y)))", "score": 0}
{"id": "eqasc_validation_999", "prediction": "all x.(Earthquake(x) -> CausedByTectonicPlatesMovement(x))", "score": 0}
{"id": "eqasc_validation_999", "prediction": "all x.(Earthquake(x) -> ThereBegansActionOfTectonicPlates(x))", "score": 0}
{"id": "eqasc_validation_999", "prediction": "all x.(TectonicPlate(x) -> CausesEarthquake(x))", "score": 0}
{"id": "eqasc_validation_999", "prediction": "all x y z.((Earthquake(x) & TectonicPlate(y) & Plate(z)) -> CausedBy(x,y,z))", "score": 0}
{"id": "eqasc_validation_999", "prediction": "all x.(Earthquake(x) -> CausedByMechanism(x))", "score": 0}
{"id": "eqasc_validation_999", "prediction": "all x.(Earthquake(x) -> CausedByTectonicPlate(x))", "score": 0}
{"id": "eqasc_validation_999", "prediction": "all x.(Earthquake(x) -> CausedBy(x,TectonicPlates))", "score": 0}
{"id": "eqasc_validation_999", "prediction": "all x y.((Earthquake(x) & TectonicPlate(y)) -> CausedByMovement(x,y))", "score": 0}
{"id": "eqasc_validation_999", "prediction": "all x y.((Earthquake(x) & TectonicPlate(y)) -> CausedBy(x,y))", "score": 0}
{"id": "eqasc_validation_999", "prediction": "all x.(Earthquake(x) -> (CausedByTectonicPlates(x) & MovingInTectonicPlates(x)))", "score": 0}
{"id": "eqasc_validation_999", "prediction": "all x y.((Earthquake(x) & TectonicPlate(y) & CausedBy(x,y)) -> CausedBy(x,y))", "score": 0}
{"id": "eqasc_validation_1000", "prediction": "all x.(Mountain(x) -> FormsByChoiceMovement(x))", "score": 0}
{"id": "eqasc_validation_1000", "prediction": "all x.(Mountain(x) -> FormedByMovementOfTectonicPlates(x))", "score": 0}
{"id": "eqasc_validation_1000", "prediction": "all x.(Mountain(x) -> FormedBy(x,TectonicPlates))", "score": 0}
{"id": "eqasc_validation_1000", "prediction": "all x y.((Mountain(x) & TectonicPlate(y)) -> FormedByMovement(x,y))", "score": 0}
{"id": "eqasc_validation_1000", "prediction": "all x.(Mountain(x) -> (FormedByCectonicPlates(x) & MovementOfTectonicPlates(x)))", "score": 0}
{"id": "eqasc_validation_1000", "prediction": "all x.(Mountain(x) -> FormedByTechtonicPlates(x))", "score": 0}
{"id": "eqasc_validation_1000", "prediction": "all x.(Mountain(x) -> FormedByMovement(x))", "score": 0}
{"id": "eqasc_validation_1000", "prediction": "all x y.((Mountain(x) & TectonicPlate(y)) -> FormedBy(x,y))", "score": 0}
{"id": "eqasc_validation_1000", "prediction": "all x y.((Mountain(x) & TectonicPlates(y)) -> FormedBy(x,y))", "score": 0}
{"id": "eqasc_validation_1000", "prediction": "all x.(Mountain(x) -> FormedByTectonicPlateMovement(x))", "score": 0}
{"id": "eqasc_validation_1001", "prediction": "all x.(Earthquake(x) -> (TheResultOfMovingPlates(x) & FoundIn(x,y)))", "score": 0}
{"id": "eqasc_validation_1001", "prediction": "all x.(Earthquake(x) -> (MovingPlatesResult(x) | MovingPlatesResult(x)))", "score": 0}
{"id": "eqasc_validation_1001", "prediction": "all x.(Earthquake(x) -> (ShapingPlate(x) & ReliesOn(x,movingPlates)))", "score": 0}
{"id": "eqasc_validation_1001", "prediction": "all x.(Earthquake(x) -> exists y z.(MovingPlate(y) & Earthquake(z) & ResultsOf(x,y))))", "score": -1}
{"id": "eqasc_validation_1001", "prediction": "All x.(Earthquake(x) -> (ResultOfMovingPlates(x) & HappensIn(x,Earthquake,Earthquake)))", "score": -1}
{"id": "eqasc_validation_1001", "prediction": "all x y.((Earthquake(x) & MovingPlate(y)) -> Has(x,y))", "score": 0}
{"id": "eqasc_validation_1001", "prediction": "all x.(Earthquake(x) -> (MovingPlateResult(x) & ResultsOf(x,e)))", "score": 0}
{"id": "eqasc_validation_1001", "prediction": "all x.(Earthquake(x) -> (MovingPlate(x) & ResultsOf(x,y)))", "score": 0}
{"id": "eqasc_validation_1001", "prediction": "all x.(Earthquake(x) -> (MovingPlate(x) & ResultsOf(x)))", "score": 0}
{"id": "eqasc_validation_1001", "prediction": "(All x.(Earthquake(x) -> MovedPlate(x)))", "score": -1}
{"id": "eqasc_validation_1001", "prediction": "all x.(Earthquake(x) -> (MovingPlate(x) & Earthquake(x)))", "score": 0}
{"id": "eqasc_validation_1001", "prediction": "all x.(Earthquake(x) -> InvolvesMovingPlates(x))", "score": 0}
{"id": "eqasc_validation_1001", "prediction": "all x.(Earthquake(x) -> MoveablePlate(x))", "score": 0}
{"id": "eqasc_validation_1001", "prediction": "all x.(Earthquake(x) -> (MovingPlate(x) & Causes(x,y)))", "score": 0}
{"id": "eqasc_validation_1001", "prediction": "all x.(Earthquake(x) -> (MovingPlates(x) & ResultOf(x,y)))", "score": 0}
{"id": "eqasc_validation_1001", "prediction": "all x.(Earthquake(x) -> (ResultOfMovingPlates(x)))", "score": 0}
{"id": "eqasc_validation_1002", "prediction": "all x.(Mountain(x) -> (FormedByMovingPlates(x) & FormedByMovingPlates(x)))", "score": 0}
{"id": "eqasc_validation_1002", "prediction": "all x y.((Mountain(x) & MovingPlate(y)) -> FormedBy(x,y))", "score": 0}
{"id": "eqasc_validation_1002", "prediction": "all x:(Mountain(x) -> FormedByMovingPlates(x))", "score": -1}
{"id": "eqasc_validation_1002", "prediction": "all x y z.((Mountain(x) & MovingPlate(y) & MovingPlate(z) & FormedBy(x,y)) -> Forms(x,z))", "score": 0}
{"id": "eqasc_validation_1002", "prediction": "all x.(Mountain(x) -> (FormedByMovingPlates(x) & MoveablePlates(x)))", "score": 0}
{"id": "eqasc_validation_1002", "prediction": "all x.(Mountain(x) -> (FormedByMovingPlates(x) & LocatedOnMovingPlates(x)))", "score": 0}
{"id": "eqasc_validation_1002", "prediction": "all x.(Mountain(x) -> (FormedByMovingPlates(x) & CreatedByMovingPlates(x)))", "score": 0}
{"id": "eqasc_validation_1002", "prediction": "all x.(Mountain(x) -> (FormedByMovingPlates(x) & MovingPlates(x) & MovingPlates(x) & MovingPlates(x)))", "score": 0}
{"id": "eqasc_validation_1002", "prediction": "all x y.((Mountain(x) & MovingPlate(y)) -> FormedByMountain(x,y))", "score": 0}
{"id": "eqasc_validation_1002", "prediction": "all x y z.((Mountain(x) & MovingPlate(y) & MovingPlate(z)) -> FormedBy(x,y))", "score": 0}
{"id": "eqasc_validation_1003", "prediction": "(Check out the Himalayas & BigMountainBackground(s))", "score": -1}
{"id": "eqasc_validation_1003", "prediction": "all x y z w.((BigMountain(x) & Himalayas(y) & Background(z)) -> Check(x,y,z))", "score": 0}
{"id": "eqasc_validation_1003", "prediction": "all x.((BigMountainBackground(x) & Himalayas(x)) -> CheckNevadasHistory(x))", "score": 0}
{"id": "eqasc_validation_1003", "prediction": "all x.((MountainBackground(x) & Himalayas(x)) -> BigMountain(x))", "score": 0}
{"id": "eqasc_validation_1003", "prediction": "(See Himalayas) & BigMountainBackground(x))", "score": -1}
{"id": "eqasc_validation_1003", "prediction": "All x y.((Background(x) & Himalayas(y)) -> SettledIn(x,y))", "score": -1}
{"id": "eqasc_validation_1003", "prediction": "all x y.((Hispalm(x) & BigMountainBackground(y)) -> CheckOut(x,y))", "score": 0}
{"id": "eqasc_validation_1003", "prediction": "(For BigMountainBackground,CheckOutHimmalayas).", "score": -1}
{"id": "eqasc_validation_1003", "prediction": "all x y z.((Himalayas(x) & BigMountainBackground(y) & Himalayas(z)) -> Checkout(x,y))", "score": 0}
{"id": "eqasc_validation_1003", "prediction": "all x.((Himalayan(x) & BigMountainBackground(x)) -> HasBackground(x))", "score": 0}
{"id": "eqasc_validation_1003", "prediction": "all x y.((Himalaya(x) & MountainBackground(y)) -> CheckedOut(x,y))", "score": 0}
{"id": "eqasc_validation_1003", "prediction": "(Himalayas(h) & BigMountainBackground(z))", "score": 0}
{"id": "eqasc_validation_1003", "prediction": "(Groundup(x) -> Himalayas(x))", "score": 0}
{"id": "eqasc_validation_1003", "prediction": "all x y.((Himalayas(x) & MountainBackground(y)) -> Check(x,y))", "score": 0}
{"id": "eqasc_validation_1003", "prediction": "all x.((BigMountainBackground(x) & Himalayas(x)) -> Checkout(x))", "score": 0}
{"id": "eqasc_validation_1003", "prediction": "all x y.((BigMountainBackground(x) & Mountains(y)) -> ChecksOut(z,x))", "score": 0}
{"id": "eqasc_validation_1004", "prediction": "all x.(Himalaya(x) -> FormedByEarthquakes(x))", "score": 0}
{"id": "eqasc_validation_1004", "prediction": "all x y.((Hispanic(x) & Earthquake(y)) -> FormedBy(x,y))", "score": 0}
{"id": "eqasc_validation_1004", "prediction": "all x y z.((Hemalayas(x) & Earthquake(y) & Earthquake(z)) -> FormedBy(x,y,z))", "score": 0}
{"id": "eqasc_validation_1004", "prediction": "all x y.((Himalayas(x) & Earthquake(y)) -> FormedBy(x,y))", "score": 0}
{"id": "eqasc_validation_1004", "prediction": "all x.(Hemalayas(x) -> FormedByEarthquakes(x))", "score": 0}
{"id": "eqasc_validation_1004", "prediction": "all x.(Himalaya(x) -> (FormedByEarthquakes(x) & FormationByEarthquakes(x)))", "score": 0}
{"id": "eqasc_validation_1004", "prediction": "all x y.((Himalayas(x) & Earthquake(y)) -> FormsBy(x,y))", "score": 0}
{"id": "eqasc_validation_1004", "prediction": "all x y.((Himalayas(x) & Earthquake(y)) -> FormedByInhabitors(x,y))", "score": 0}
{"id": "eqasc_validation_1004", "prediction": "all x y z.((Himalayas(x) & Earthquake(y)) -> FormedBy(x,y))", "score": 0}
{"id": "eqasc_validation_1004", "prediction": "all x.(Hemalaya(x) -> WithdrawnByEarthquakes(x))", "score": 0}
{"id": "eqasc_validation_1004", "prediction": "all x.(Hispalay(x) -> FormedByEarthquakes(x))", "score": 0}
{"id": "eqasc_validation_1004", "prediction": "all x.(Himachala(x) -> (FormedByEarthquakes(x) & FormedByEarthquakes(x)))", "score": 0}
{"id": "eqasc_validation_1004", "prediction": "all x y z.((Hemalayas(x) & Earthquake(y) & Earthquake(z)) -> FormsBy(x,y,z))", "score": 0}
{"id": "eqasc_validation_1005", "prediction": "all x.(Mountain(x) -> FormedByMovingPlates(x))", "score": 0}
{"id": "eqasc_validation_1005", "prediction": "all x.(Mountain(x) -> (FormedByMovingPlates(x)))", "score": 0}
{"id": "eqasc_validation_1005", "prediction": "all x.(Mountain(x) -> FormsByMovingPlates(x))", "score": 0}
{"id": "eqasc_validation_1005", "prediction": "all x y.((Mountain(x) & MovingPlate(y)) -> FormedBy(x,y))", "score": 0}
{"id": "eqasc_validation_1005", "prediction": "all x.(Mountain(x) -> MoveablePlate(x))", "score": 0}
{"id": "eqasc_validation_1005", "prediction": "all x.(Mountain(x) -> exists y z.(MovingPlate(y) & Form(w,x,y))))", "score": -1}
{"id": "eqasc_validation_1005", "prediction": "all x.(Mountain(x) -> (FormedBy(x,movingPlates) & In(x,movingPlates)))", "score": 0}
{"id": "eqasc_validation_1005", "prediction": "all x y z.((Mountain(x) & MovingPlate(y) & Plate(z)) -> FormedBy(x,z))", "score": 0}
{"id": "eqasc_validation_1006", "prediction": "exists x.(Mountain(x) & FormedByUplifting(x))", "score": 0}
{"id": "eqasc_validation_1006", "prediction": "all x.(Mountain(x) -> FormedThroughUplifting(x))", "score": 0}
{"id": "eqasc_validation_1006", "prediction": "all x.(Mountain(x) -> FormedByUplifting(x))", "score": 0}
{"id": "eqasc_validation_1006", "prediction": "formedthroughuplifting(Mountain(Mountain)", "score": -1}
{"id": "eqasc_validation_1006", "prediction": "has been a part of uplifting.", "score": -1}
{"id": "eqasc_validation_1006", "prediction": "all x.(Mountain(x) -> FormedByUpliftment(x))", "score": 0}
{"id": "eqasc_validation_1006", "prediction": "exists x.(Mountain(x) & FormedThroughUplifting(x))", "score": 0}
{"id": "eqasc_validation_1007", "prediction": "all x.(Earthquake(x) -> CausesUplifting(x))", "score": 0}
{"id": "eqasc_validation_1007", "prediction": "all x.(Earthquake(x) -> Uplifting(x))", "score": 0}
{"id": "eqasc_validation_1007", "prediction": "all x.(Earthquake(x) -> CausesUpliftment(x))", "score": 0}
{"id": "eqasc_validation_1007", "prediction": "all x.(Earthquake(x) -> CauseForUplifting(x))", "score": 0}
{"id": "eqasc_validation_1007", "prediction": "all x.(Earthquake(x) -> CanCauseUplifting(x))", "score": 0}
{"id": "eqasc_validation_1007", "prediction": "all x.(Earthquake(x) -> CausesUpliftion(x))", "score": 0}
{"id": "eqasc_validation_1007", "prediction": "all x.(Earthquake(x) -> (CausesUplifting(x)))", "score": 0}
{"id": "eqasc_validation_1007", "prediction": "all x.(Earthquake(x) -> TypicallyCausesUplifting(x))", "score": 0}
{"id": "eqasc_validation_1007", "prediction": "all x.(Earthquake(x) -> CanCauseUpliftingOf(x))", "score": 0}
{"id": "eqasc_validation_1008", "prediction": "all x.((Mountain(x) & Alps(x)) -> GoesTo(x,y))", "score": 0}
{"id": "eqasc_validation_1008", "prediction": "all x y z.((Mountain(x) & Alp(y) & (Alps(z) | -Alps(g))) -> HeavensBeauty(x,g,z))", "score": 0}
{"id": "eqasc_validation_1008", "prediction": "all x.((Mountain(x) & Alps(x)) -> LooksFor(x,y))", "score": 0}
{"id": "eqasc_validation_1008", "prediction": "all x.(Mountain(x) -> GoesToAlps(x))", "score": 0}
{"id": "eqasc_validation_1008", "prediction": "all x y.((Mountain(x) & Alps(y)) -> GoesTo(x,y))", "score": 0}
{"id": "eqasc_validation_1008", "prediction": "all x y.((Mountain(x) & Alpine(y)) -> GoesTo(x,y))", "score": 0}
{"id": "eqasc_validation_1008", "prediction": "all x y.((Mountain(x) & Alps(y)) -> TheKingdom(x,y))", "score": 0}
{"id": "eqasc_validation_1008", "prediction": "exists x.(Mountain(x) & GoesToAlps(x))", "score": 0}
{"id": "eqasc_validation_1008", "prediction": "(all x.(Mountain(x) -> AfteAlps(x)))", "score": 0}
{"id": "eqasc_validation_1009", "prediction": "all x y.((Alps(x) & Earthquake(y)) -> FormedBy(x,y))", "score": 0}
{"id": "eqasc_validation_1009", "prediction": "all x y.((Alps(x) & Earthquakes(y)) -> FormedBy(x,y))", "score": 0}
{"id": "eqasc_validation_1009", "prediction": "all x.(Alps(x) -> FormedByEarthquakes(x))", "score": 0}
{"id": "eqasc_validation_1009", "prediction": "All x.(Alps(x) -> FirstFormedByEarthquakes(x))", "score": -1}
{"id": "eqasc_validation_1009", "prediction": "all x.(Alps(x) -> (FormedByEarthquakes(x) & FormedByEarthquakes(x)))", "score": 0}
{"id": "eqasc_validation_1009", "prediction": "AlpsFormedByEarthquakes(Alps,Earthquakes)", "score": 0}
{"id": "eqasc_validation_1009", "prediction": "all x.(Alps(x) -> (FormedByEarthquakes(x) & HeldByEarthquakes(x)))", "score": 0}
{"id": "eqasc_validation_1009", "prediction": "all x y z.((Alps(x) & Earthquake(y) & Earthquake(z)) -> FormedBy(x,y,z))", "score": 0}
{"id": "eqasc_validation_1009", "prediction": "all x.(Alps(x) -> (FormedByEarthquakes(x) & FormedByEarthquakes(x) & FormedByEarthquakes(x)))", "score": 0}
{"id": "eqasc_validation_1010", "prediction": "all x y.((Rock(x) & EarthquakeFault(y)) -> UpliftedAlong(x,y))", "score": 0}
{"id": "eqasc_validation_1010", "prediction": "all x.((Rocks(x) & UpliftedAlongEarthquakeFaults(x)) -> MakesMountain(x))", "score": 0}
{"id": "eqasc_validation_1010", "prediction": "all x.((Rocks(x) & UpliftedThroughEarthquakeFaults(x)) -> Mountain(x))", "score": 0}
{"id": "eqasc_validation_1010", "prediction": "all x.((Rocks(x) & UpliftedAlongEarthquakeFaults(x)) -> Mountain(x))", "score": 0}
{"id": "eqasc_validation_1010", "prediction": "all x y z.((Rock(x) & EarthquakeFault(y) & Rock(z)) -> UpliftedAlong(x,y,z))", "score": 0}
{"id": "eqasc_validation_1010", "prediction": "all x.(RocksUpliftedOnEarthquakeFaults(x) -> BecomesMountain(x))", "score": 0}
{"id": "eqasc_validation_1010", "prediction": "all x.((Rock(x) & UpliftedAlongEarthquakeFaults(x) & Mountain(x)) -> UpliftedBelow(x,earthquakeFaults,earthquakeFaults))", "score": 0}
{"id": "eqasc_validation_1010", "prediction": "all x y.((Rock(x) & EarthquakeFault(y)) -> UpliftedAlongToMountain(x,y))", "score": 0}
{"id": "eqasc_validation_1010", "prediction": "all x y z.((Rock(x) & EarthquakeFault(y) & Moose(z)) -> UpliftedAlongForest(x,y))", "score": 0}
{"id": "eqasc_validation_1010", "prediction": "all x y z.((Rock(x) & EarthquakeFaults(y) & Mountain(z)) -> UpliftedLike(x,y))", "score": 0}
{"id": "eqasc_validation_1010", "prediction": "all x.(Rocks(x) -> UpliftedYear(x))", "score": 0}
{"id": "eqasc_validation_1011", "prediction": "all x y.((RocksLiftToMake(x,y)) -> Mountain(y))", "score": 0}
{"id": "eqasc_validation_1011", "prediction": "all x y z.((Rocks(x) & Mountain(y) & Rocks(z)) -> (Halls(z) & Makes(z)))", "score": 0}
{"id": "eqasc_validation_1011", "prediction": "all x y.((Rock(x) & Mountain(y)) -> LiftsToMade(x,y))", "score": 0}
{"id": "eqasc_validation_1011", "prediction": "all x y.((Rock(x) & Mountain(y)) -> LiftsToMake(x,y))", "score": 0}
{"id": "eqasc_validation_1011", "prediction": "all x y.((Rock(x) & Mountain(y)) -> LiftToMake(x,y))", "score": 0}
{"id": "eqasc_validation_1011", "prediction": "all x y z.((Rocks(x) & Mountain(y)) -> LiftsToMake(x,y))", "score": 0}
{"id": "eqasc_validation_1011", "prediction": "all x.(RocksShiftToMakeMountains(x) -> LiftToMakeMountains(x))", "score": 0}
{"id": "eqasc_validation_1011", "prediction": "all x y.((Rock(x) & Mountains(y)) -> LiftsToMake(x,y))", "score": 0}
{"id": "eqasc_validation_1011", "prediction": "all x y z.((Rocks(x) & Mountain(y) & Rocks(z) & LiftsToMake(x,y,z)) -> Makes(x,y))", "score": 0}
{"id": "eqasc_validation_1011", "prediction": "all x.(RocksLiftToMakeMountains(x) -> MakesMountains(x))", "score": 0}
{"id": "eqasc_validation_1011", "prediction": "all x y.((Rocks(x) & Mountain(y)) -> LiftToMake(x,y))", "score": 0}
{"id": "eqasc_validation_1011", "prediction": "all x y z.((Rock(x) & Rock(y) & Mountain(z)) -> (Lifts(x,y) & Makes(x,z)))", "score": 0}
{"id": "eqasc_validation_1011", "prediction": "all x y z.((Rock(x) & Mountain(y) & Mountain(z)) -> (LiftsToMake(x,y) & Makes(x,z)))", "score": 0}
{"id": "eqasc_validation_1011", "prediction": "all x y z.((Rock(x) & Mountain(y) & Meteor(z)) -> LiftsToMake(x,y,z))", "score": 0}
{"id": "eqasc_validation_1011", "prediction": "all x y.((Rock(x) & Rock(y) & LiftsToMade(x,y)) -> MountainsMake(x,y))", "score": 0}
{"id": "eqasc_validation_1012", "prediction": "all x.(Earthquake(x) -> EarthquakeProne(x))", "score": 0}
{"id": "eqasc_validation_1012", "prediction": "all x y.((Earthquake(x) & Earthquake(y) & Japan(z)) -> EarthquakeProne(z))", "score": 0}
{"id": "eqasc_validation_1012", "prediction": "all x.(Earthquakes(x) -> (JapanElecteron(x) & EarthquakeProne(x)))", "score": 0}
{"id": "eqasc_validation_1012", "prediction": "all x.(Earthquake(x) -> EarthquakeProneCountry(x))", "score": 0}
{"id": "eqasc_validation_1012", "prediction": "Earthquakes Earthquakes Japan is earthquakeprone.", "score": -1}
{"id": "eqasc_validation_1012", "prediction": "all x.((Earthquake(x) & EarthquakeProneCountry(x)) -> JapanNaturalCountry(x))", "score": 0}
{"id": "eqasc_validation_1012", "prediction": "(Earthquake(Japan) | EarthquakeProne(Japan)))", "score": -1}
{"id": "eqasc_validation_1012", "prediction": "all x.(Earthquake(x) & EarthquakeProneCountry(x))", "score": 0}
{"id": "eqasc_validation_1012", "prediction": "all x.((Earthquake(x) & EarthquakeProne(x)) -> Japan(x))", "score": 0}
{"id": "eqasc_validation_1012", "prediction": "all x.(Earthquake(x,y) -> EarthquakeProneCountry(x))", "score": 0}
{"id": "eqasc_validation_1012", "prediction": "Earthquakes Earthquakes Japan is earthquakeProne Country(x)", "score": -1}
{"id": "eqasc_validation_1012", "prediction": "all x.(Earthquake(x) -> (EarthquakeProne(x) & Japan(x)))", "score": 0}
{"id": "eqasc_validation_1013", "prediction": "all x.(Japan(x) -> HasMountains(x))", "score": 0}
{"id": "eqasc_validation_1013", "prediction": "all x.(Japan(x) -> LotsOfMountains(x))", "score": 0}
{"id": "eqasc_validation_1013", "prediction": "all x.(Japan(x) -> HasLotOfMountains(x))", "score": 0}
{"id": "eqasc_validation_1013", "prediction": "all x.((Japan(x) & LotsOfMountains(x)) -> LotsOfMountains(x))", "score": 0}
{"id": "eqasc_validation_1013", "prediction": "all x.(Japan(x) -> HasPlentyOfMountains(x))", "score": 0}
{"id": "eqasc_validation_1013", "prediction": "all x.(Japan(x) -> HasBillionsOfMountains(x))", "score": 0}
{"id": "eqasc_validation_1013", "prediction": "all x.(Japan(x) -> exists y.(Mountain(y) & Many(x,y)))", "score": 0}
{"id": "eqasc_validation_1013", "prediction": "all x.((Japan(x) & Mountain(y)) -> HasMountains(x,y))", "score": 0}
{"id": "eqasc_validation_1013", "prediction": "all x.(Japan(x) -> LotOfMountains(x))", "score": 0}
{"id": "eqasc_validation_1013", "prediction": "all x.(Japan(x) -> hasBillionsOfMountains(x))", "score": 0}
{"id": "eqasc_validation_1013", "prediction": "all x.(Japan(x) -> ManyMountains(x))", "score": 0}
{"id": "eqasc_validation_1014", "prediction": "all x.(ChemicalDigestion(x) -> OccursInSmallIntestine(x))", "score": 0}
{"id": "eqasc_validation_1014", "prediction": "all x.(ChemicalDigestion(x) -> OccursInSmallintestine(x))", "score": 0}
{"id": "eqasc_validation_1014", "prediction": "all x y.((ChemicalDigestion(x) & SmallIntestine(y)) -> OccursIn(x,y))", "score": 0}
{"id": "eqasc_validation_1014", "prediction": "all x.(ChemicalDigestion(x) -> (OccursInSmallintestine(x) & (HasSmallIntestine(x) | HasSmallIntestine(x))))", "score": 0}
{"id": "eqasc_validation_1014", "prediction": "all x y.((Chemistry(x) & SmallIgnite(y)) -> OccursIn(x,y))", "score": 0}
{"id": "eqasc_validation_1014", "prediction": "all x.(ChemicalDigestment(x) -> AdheresInSmallIntestine(x))", "score": 0}
{"id": "eqasc_validation_1014", "prediction": "all x.(ChemicalDigestion(x) -> exists y.(Smallintestine(y) & OccursIn(x,y))))", "score": -1}
{"id": "eqasc_validation_1014", "prediction": "all x y.((ChemicalDigestion(x) & Smallintestine(y) & OccursIn(x,y)) -> OccursIn(x,y))", "score": 0}
{"id": "eqasc_validation_1014", "prediction": "all x.(ChemicalDigestion(x) -> Occurs(x,Smallintestine))", "score": 0}
{"id": "eqasc_validation_1014", "prediction": "all x.((ChemicalDigestion(x) & SmallIntestine(x)) -> OccursIn(x,ChemicalDigestion))", "score": 0}
{"id": "eqasc_validation_1014", "prediction": "all x y.((ChemicalDigestion(x) & Smallintestine(y)) -> OccursIn(x,y))", "score": 0}
{"id": "eqasc_validation_1015", "prediction": "all x.(Enzyme(x) -> (InterestsInDigestion(x) | InvolvedInDigestion(x)))", "score": 0}
{"id": "eqasc_validation_1015", "prediction": "all x.(Enzyme(x) -> (Chemistry(x) & Involves(x,Digestion)))", "score": 0}
{"id": "eqasc_validation_1015", "prediction": "all x.(Enzyme(x) -> (ConstrictedInDigestion(x) & InvolvedInDigestion(x)))", "score": 0}
{"id": "eqasc_validation_1015", "prediction": "all x.(Enzyme(x) -> (Chemist(x) & InvolvesDigestment(x)))", "score": 0}
{"id": "eqasc_validation_1015", "prediction": "all x.(Enzyme(x) -> Chemical(x))", "score": 0}
{"id": "eqasc_validation_1015", "prediction": "all x.(Enzyme(x) -> (Involved(x,Digestion) | Involved(x,Digestion)))", "score": 0}
{"id": "eqasc_validation_1015", "prediction": "all x.(Enzyme(x) -> (InterestsInDigestion(x) & Chemical(x)))", "score": 0}
{"id": "eqasc_validation_1015", "prediction": "all x.(Enzyme(x) -> (InvolvedInDigestion(x) | InvolvedInDigestion(x)))", "score": 0}
{"id": "eqasc_validation_1015", "prediction": "all x.(Enzyme(x) -> EnrichedInDigestion(x))", "score": 0}
{"id": "eqasc_validation_1015", "prediction": "all x.(Enzymes(x) -> IntervenesInDigestation(x))", "score": 0}
{"id": "eqasc_validation_1015", "prediction": "all x.(Enzyme(x) -> Dissolves(x))", "score": 0}
{"id": "eqasc_validation_1015", "prediction": "all x.(Enzyme(x) -> DigestionChemicals(x))", "score": 0}
{"id": "eqasc_validation_1015", "prediction": "all x.(Enzyme(x) -> ChemicalInDigestion(x))", "score": 0}
{"id": "eqasc_validation_1015", "prediction": "all x.(Enzyme(x) -> (ConsultsInDigestion(x) & Chemical(x)))", "score": 0}
{"id": "eqasc_validation_1015", "prediction": "all x.(Enzyme(x) -> (EnablesDigestion(x) & HelpsDigest(x)))", "score": 0}
{"id": "eqasc_validation_1016", "prediction": "all x y.((Enzyme(x) & SmallIntestine(y)) -> InSmallIntestine(x,y))", "score": 0}
{"id": "eqasc_validation_1016", "prediction": "all x.(Enzyme(x) -> SmallIgnitus(x))", "score": 0}
{"id": "eqasc_validation_1016", "prediction": "all x y z.((Enzyme(x) & SmallIntestine(y) & Enzyme(z)) -> InSmallIntestine(x,y))", "score": 0}
{"id": "eqasc_validation_1016", "prediction": "all x.(EnzymesIn(x,Smallintestine) -> InSmallIntestine(x))", "score": 0}
{"id": "eqasc_validation_1016", "prediction": "all x.(Enzymes(x) -> InSmallIntestine(x))", "score": 0}
{"id": "eqasc_validation_1016", "prediction": "all x y.((Enzyme(x) & SmallIntestine(y)) -> InSmallintestine(x,y))", "score": 0}
{"id": "eqasc_validation_1016", "prediction": "all x.(Enzyme(x) -> SmallIntestine(x))", "score": 0}
{"id": "eqasc_validation_1016", "prediction": "all x y z.((Enzyme(x) & SmallIntestine(y) & Smallintestine(z)) -> InSmallintestine(x,y,z))", "score": 0}
{"id": "eqasc_validation_1016", "prediction": "all x y.(((Enzyme(x) & Smallintestine(y)) -> InSmallintestine(x,y))", "score": -1}
{"id": "eqasc_validation_1016", "prediction": "all x.(Enzymes(x) -> InSmallIgnitorEpithelium(x))", "score": 0}
{"id": "eqasc_validation_1016", "prediction": "all x y z.((Enzyme(x) & SmallIndividual(y) & Enzyme(z)) -> InSmallIndividual(x,y))", "score": 0}
{"id": "eqasc_validation_1016", "prediction": "all x y.((Enzyme(x) & SmallIntestine(y)) -> InSmallIgniter(x,y))", "score": 0}
{"id": "eqasc_validation_1016", "prediction": "all x y z.((Enzyme(x) & Smallintestine(y) & Enzyme(z)) -> InIntestine(x,y,z))", "score": 0}
{"id": "eqasc_validation_1016", "prediction": "all x y.((Enzyme(x) & SmallIntestine(y)) -> In(x,y))", "score": 0}
{"id": "eqasc_validation_1017", "prediction": "all x.(CeliacDisease(x) -> (DamagesSmallIntestine(x) & Interferes(x,NutrientAbsorption)))", "score": 0}
{"id": "eqasc_validation_1017", "prediction": "all x.(CeliacDisease(x) -> (DamagesSmallIgnitor(x) & InterfersWithNutrientAbsorption(x)))", "score": 0}
{"id": "eqasc_validation_1017", "prediction": "all x.(CeliacDisease(x) -> (DamagesSmallIntestine(x) & InterferesWithNutrientAbsorption(x)))", "score": 0}
{"id": "eqasc_validation_1017", "prediction": "all x.(CeliacDisease(x) -> (DamageSmallIntestine(x) & InterferenceWithNutrientAbsorption(x)))", "score": 0}
{"id": "eqasc_validation_1017", "prediction": "all x.(CeliacDisease(x) -> (DamagesSmallintestine(x) & InterferesWithNutrientAbsorption(x)))", "score": 0}
{"id": "eqasc_validation_1017", "prediction": "all x.(CeliacDisease(x) -> (DeterioratesSmallintestine(x) & InterferesWithNutrientAbsorption(x)))", "score": 0}
{"id": "eqasc_validation_1017", "prediction": "all x.(CeliacDisease(x) -> (DeterioratesSmallIntestine(x) & InterferesWithNutrientAbsorption(x)))", "score": 0}
{"id": "eqasc_validation_1017", "prediction": "all x y z.((CeliacDisease(x) & SmallIntestine(y) & NutrientAbsorption(z)) -> (Damages(x,y) & InterfersWith(x,z)))", "score": 0}
{"id": "eqasc_validation_1017", "prediction": "all x.(CeliacDisease(x) -> (damagesSmallIntestine(x) & InterferesWithNutrientAbsorption(x)))", "score": 0}
{"id": "eqasc_validation_1017", "prediction": "all x.(CeliacDisease(x) -> (DeteriorateSmallIntestine(x) & InterfereWithNutrientAbsorption(x)))", "score": 0}
{"id": "eqasc_validation_1018", "prediction": "all x.(CeliacDisease(x) -> InterferesWithChemicalDigestion(x))", "score": 0}
{"id": "eqasc_validation_1018", "prediction": "all x y.((CeliacDisease(x) & ChemicalDigestion(y)) -> InterferesWith(x,y))", "score": 0}
{"id": "eqasc_validation_1018", "prediction": "all x.(CeliacDisease(x) -> Interferes(x))", "score": 0}
{"id": "eqasc_validation_1018", "prediction": "all x y z.((CeliacDisease(x) & ChemicalDigestment(y) & ChemicalDigestment(z)) -> InterferesWith(x,y))", "score": 0}
{"id": "eqasc_validation_1018", "prediction": "all x.(CeliacDisease(x) -> InterferesWithDetoxion(x))", "score": 0}
{"id": "eqasc_validation_1018", "prediction": "all x.(CeliacDisease(x) -> InterferesWithChemicalDigestive(x))", "score": 0}
{"id": "eqasc_validation_1018", "prediction": "all x y.((CeliacSide(x) & ChemicalDigestion(y)) -> InterferesWith(x,y))", "score": 0}
{"id": "eqasc_validation_1018", "prediction": "all x y.((CeliacDisease(x) & ChemicalDigestment(y)) -> InterferesWith(x,y))", "score": 0}
{"id": "eqasc_validation_1019", "prediction": "all x y.((SmallIndividual(x) & SmallIndividual(y)) -> (ChemicalDigestion(x) & AbsorptionOfFood(x,y)))", "score": 0}
{"id": "eqasc_validation_1019", "prediction": "all x y.((SmallIntestine(x) & MolecularDigestion(x) & AbsorptionOfFood(y)) -> OccursIn(x,y))", "score": 0}
{"id": "eqasc_validation_1019", "prediction": "all x.exists y.((Smallintestine(x) & SmallIntestine(y)) -> (ChemicalDigestion(x,y) & AbsorbsFood(x,y)))", "score": 0}
{"id": "eqasc_validation_1019", "prediction": "all x.(SmallIntestine(x) -> (ChemicalDigestment(x) & AbsorbsFood(x)))", "score": 0}
{"id": "eqasc_validation_1019", "prediction": "all x y.((Smallintestine(x) & ChemicalDigestion(y) & Absorption(y)) -> OccursIn(x,y))", "score": 0}
{"id": "eqasc_validation_1019", "prediction": "all x y.((SmallIngredient(x) & ChemicalDigestment(y) & AbsorbsFood(y,x)) -> OccursIn(x,y))", "score": 0}
{"id": "eqasc_validation_1019", "prediction": "all x.((ChemicalDigestion(x) & AbsorptionOfFood(x)) -> OccursInSmallIntestine(x))", "score": 0}
{"id": "eqasc_validation_1019", "prediction": "all x.(SmallIntestine(x) -> (ChemicalDigestion(x) & AbsorptionOfFood(x) & OccursInIntestine(x)))", "score": 0}
{"id": "eqasc_validation_1019", "prediction": "all x y.(SmallIntestine(x) & (ChemicalDigestion(x) | Absorbion(x)))", "score": 0}
{"id": "eqasc_validation_1019", "prediction": "all x.(OccursInSmallIndividual(x) -> (EvalsInIndividual(x) & ChemicalDigestion(x) & AbsorbsFood(x)))", "score": 0}
{"id": "eqasc_validation_1019", "prediction": "all x y.((SmallIntestine(x) & Smallintestine(y)) -> (Digests(x) & AbsorbsFood(x)))", "score": 0}
{"id": "eqasc_validation_1019", "prediction": "all x.((ChemisticallyDigests(x) & AbsorbsFood(x)) -> OccursInSmallIntestine(x))", "score": 0}
{"id": "eqasc_validation_1019", "prediction": "all x y.((SmallIntestine(x) & ChemicalDigestion(x) & AbsorptionDevice(x,y)) -> OccursIn(x,y))", "score": 0}
{"id": "eqasc_validation_1019", "prediction": "all x.(ChemicalDigestionAndAbsorptionOfFood(x) -> OccursInSmallintestine(x))", "score": 0}
{"id": "eqasc_validation_1019", "prediction": "all x y.((SmallIntestine(x) & SmallIntestine(y)) -> SimplifiedDigestionAndAbsorption(x,y))", "score": 0}
{"id": "eqasc_validation_1019", "prediction": "all x y.((SmallIndividual(x) & SmallIndividual(y)) -> (ChemicalDigestion(x) & Absorption(x,y)))", "score": 0}
{"id": "eqasc_validation_1020", "prediction": "all x.(ChemicalAbsorption(x) -> HappensInSmallintestine(x))", "score": 0}
{"id": "eqasc_validation_1020", "prediction": "all x y z.((ChemicalAbsorption(x) & SmallIgnite(y) & SmallIntestine(z)) -> HappensIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_1020", "prediction": "all x y z.((SmallIntestine(x) & Smallintestine(y) & ChemicalAbsorption(z)) -> HappendsIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_1020", "prediction": "all x y z.((ChemicalAbsorption(x,y) & SmallIntestine(z)) -> HappensIn(y,z))", "score": 0}
{"id": "eqasc_validation_1020", "prediction": "all x.(ChemicalAbsorptionOfSmallIntestine(x) -> HappensInSmallintestine(x))", "score": 0}
{"id": "eqasc_validation_1020", "prediction": "all x y.((ChemicalAbsorptionAbsorption(x) & Smallintestine(y)) -> HappensInSmallIntestine(x,y))", "score": 0}
{"id": "eqasc_validation_1020", "prediction": "all x.(ChemicalAbsorptionOfSmallIntestine(x) -> HappensInSmallIntestine(x))", "score": 0}
{"id": "eqasc_validation_1020", "prediction": "all ages.(ChemicalAbsorptionMayOccur(x) -> SmallIntestine(x))", "score": -1}
{"id": "eqasc_validation_1020", "prediction": "all x.(ChemicalAbsorptionHasSoundsInSmallintestine(x) -> HappensInSmallintestine(x))", "score": 0}
{"id": "eqasc_validation_1020", "prediction": "all x y.((ChemicalAbsorption(x) & SmallIntestine(y)) -> HappensInSmallIntestine(x,y))", "score": 0}
{"id": "eqasc_validation_1020", "prediction": "all x y z w.((ChemicalAbsorption(x) & SmallIntestine(y) & SmallIntestine(z) & TakesOver(x,y,z)) -> AbsorbsIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_1020", "prediction": "all x y.((ChemicalAbsorption(x) & Smallintestine(y) & HappensIn(x,y)) -> AdsorbsIn(x,y))", "score": 0}
{"id": "eqasc_validation_1020", "prediction": "all x.((ChemicalAbsorption(x) & Smallintestine(x)) -> HappensInSmallintestine(x))", "score": 0}
{"id": "eqasc_validation_1020", "prediction": "all x y z.((ChemicalAbsorption(x) & SmallIntestine(y) & Smallintestine(z)) -> HappensIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_1021", "prediction": "all x.(ChemicalDiagnosis(x) -> BreaksComplexChemicalsIntoSimpleChemicals(x))", "score": 0}
{"id": "eqasc_validation_1021", "prediction": "all x.((ChemicalDigestion(x) & ComplexChemicals(x) & SimpleChemicals(x)) -> BreaksInto(x,y))", "score": 0}
{"id": "eqasc_validation_1021", "prediction": "all x y.((ChemicalDigestion(x) & ComplexChemicals(y)) -> BreaksIntoSimpleChemicals(x,y))", "score": 0}
{"id": "eqasc_validation_1021", "prediction": "all x y z.((ChemicalDigerty(x) & ComplexChemicals(y) & SimpleChemicals(z)) -> BreaksInto(x,y,z))", "score": 0}
{"id": "eqasc_validation_1021", "prediction": "all x.((ChemicalDigestment(x) & ComplexChemicals(x,ChemicalsSolid)) -> BreaksInto(x,Chemicals))", "score": 0}
{"id": "eqasc_validation_1021", "prediction": "all x.(ChemicalDigestment(x) -> BreaksComplexChemicalsIntoSimpleChemicals(x))", "score": 0}
{"id": "eqasc_validation_1021", "prediction": "all x y.((ChemicalDigestment(x) & ComplexChemistry(y)) -> BreaksSimpleChemistry(x,y))", "score": 0}
{"id": "eqasc_validation_1021", "prediction": "all x.(ChemicalDigestion(x) -> ActivatesComplexChemicals(x))", "score": 0}
{"id": "eqasc_validation_1021", "prediction": "all x y z.((Chemistry(x) & ComplexChemical(y) & SimpleChemical(z)) -> BreaksInto(x,y,z))", "score": 0}
{"id": "eqasc_validation_1021", "prediction": "all x y.((ChemicalDigestion(x) & ComplexChemistry(y)) -> BreaksIntoSimpleChemistry(x,y))", "score": 0}
{"id": "eqasc_validation_1021", "prediction": "all x.(ChemicalDigestion(x) -> BreaksComplexChemicalsIntoSimpleChemicals(x))", "score": 0}
{"id": "eqasc_validation_1021", "prediction": "all x y.((ChemicalDigestation(x) & ComplexChemical(y)) -> BreaksIntoSimpleChemicals(x,y))", "score": 0}
{"id": "eqasc_validation_1021", "prediction": "all x y.((ChemicalDigestment(x) & ComplexChemicals(y)) -> BreaksIntoSimpleChemicals(x,y))", "score": 0}
{"id": "eqasc_validation_1021", "prediction": "all x y.((ComplexChemical(x) & SimpleChemical(y)) -> BreaksInto(x,y))", "score": 0}
{"id": "eqasc_validation_1022", "prediction": "all x.(ReleasingComplexChemicalsToSimpleChemicalsInSmallintestine(x) -> ObscuresInSmallintestine(x))", "score": 0}
{"id": "eqasc_validation_1022", "prediction": "all x y z.((ComplexChemical(x) & SimpleChemical(y) & SmallIntestine(z)) -> OccursIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_1022", "prediction": "all x.((ComplexChemical(x) & SimpleChemical(x)) -> OccursInSmallintestine(x))", "score": 0}
{"id": "eqasc_validation_1022", "prediction": "all x y z w.((ComplexChemical(x) & SimpleChemical(y) & SmallImmune(z) & BreakingInto(x,y,z)) -> OccursIn(x,w))", "score": 0}
{"id": "eqasc_validation_1022", "prediction": "all x y.((ComplexChemical(x) & SimpleChemical(y)) -> (OccursInSmallIntestine(x) & BreakedInto(x,y)))", "score": 0}
{"id": "eqasc_validation_1022", "prediction": "all x y.((ComplexChemical(x) & SimpleChemical(y)) -> Stalks(x,y))", "score": 0}
{"id": "eqasc_validation_1022", "prediction": "all x.((ComplexChemical(x) & SimpleChemical(x)) -> OccursInSmallIntestine(x))", "score": 0}
{"id": "eqasc_validation_1022", "prediction": "all x.(ComplexChemicals(x) -> BreaksIntoSimpleChemicals(x))", "score": 0}
{"id": "eqasc_validation_1022", "prediction": "all x.(SmallIntestine(x) -> BreaksComplexChemicalsIntoSimpleChemicals(x))", "score": 0}
{"id": "eqasc_validation_1022", "prediction": "all x.((ComplexChemical(x) & BreakingComplexChemicalsIntoSimpleChemicals(x)) -> OccursInSmallIntestine(x))", "score": 0}
{"id": "eqasc_validation_1022", "prediction": "all x.(ComplexChemicals(x) -> SimpleChemicals(x))", "score": 0}
{"id": "eqasc_validation_1022", "prediction": "all x y.((ComplexChemistry(x) & SimpleChemistry(y)) -> OccursInSmallIndividual(y))", "score": 0}
{"id": "eqasc_validation_1022", "prediction": "all x.((ComplexChemicals(x) & SimpleChemicals(x)) -> OccursPrimarilyInSmallintestine(x))", "score": 0}
{"id": "eqasc_validation_1022", "prediction": "all x.((ComplexChemical(x) & SimpleChemical(x)) -> OccursInSmallInternal(x))", "score": 0}
{"id": "eqasc_validation_1022", "prediction": "exists x y.(ComplexChemical(x) & SimpleChemical(y) & BreakingInto(x,y) & SmallIntestine(x))", "score": 0}
{"id": "eqasc_validation_1022", "prediction": "all x y.((ComplexChemical(x) & SimpleChemical(y)) -> OccursPurlyInSmallintestine(x,y))", "score": 0}
{"id": "eqasc_validation_1023", "prediction": "all x.(Enzyme(x) & (ConsultsInDigestion(x) | OccursPrimarilyInSmallIgnitor(x))) -> PorcelainInSmallIntestine(x))", "score": -1}
{"id": "eqasc_validation_1023", "prediction": "all x y.((enzyme(x) & Dried(y)) -> (OccursInSmallIgniter(x,y) | ObscuresInSmallIgniter(z)))", "score": 0}
{"id": "eqasc_validation_1023", "prediction": "all x y z.((Enzyme(x) & Dissolving(y) & SmallIntestine(z)) -> (OccursIn(x,y) & AlsoIn(x,z)))", "score": 0}
{"id": "eqasc_validation_1023", "prediction": "all x y.((Enzyme(x) & Minimalintestinal(y)) -> OrcuresIn(x,y))", "score": 0}
{"id": "eqasc_validation_1023", "prediction": "all x y.((Enzyme(x) & SmallImmune(y)) -> OccursIn(x,y)) (Enzyme(x) & SimplifiedInDigestation(x)))", "score": -1}
{"id": "eqasc_validation_1023", "prediction": "all x.(Enzyme(x) -> (InterestsInDigestion(x) & OccursInSmallintestine(x)))", "score": 0}
{"id": "eqasc_validation_1023", "prediction": "all x y.(DigestmentEnzyme(x) & SmallIntestinal(y) & Ingestion(x,y) & InSmallintestine(x,y))", "score": 0}
{"id": "eqasc_validation_1023", "prediction": "all x.(DigestantEnzymes(x) -> (OccursInSmallintestine(x) & PrimarySmallintestine(x)))", "score": 0}
{"id": "eqasc_validation_1023", "prediction": "all x.(Enzyme(x) -> EnzymesInDigestion(x)) OccursPrimarilyInSmallintestine(x))", "score": -1}
{"id": "eqasc_validation_1023", "prediction": "all x.(Enzyme(x) -> InvolvedInDigestion(x)) EvolvesInSmallIntestine(x))", "score": -1}
{"id": "eqasc_validation_1023", "prediction": "all x y z.((Enzyme(x) & Enzyme(y) & ImportantInDigestion(x,y) & SmallIntestine(z)) -> OccursIn(x,z))", "score": 0}
{"id": "eqasc_validation_1023", "prediction": "all x y.((Enzyme(x) & Dissolving(y)) -> (OccursInSmallInteger(x,y) & SmallIntense(x,y)))", "score": 0}
{"id": "eqasc_validation_1023", "prediction": "all x y.((Enzyme(x) & Digestion(y)) -> OccursInSmallintestine(x,y))", "score": 0}
{"id": "eqasc_validation_1023", "prediction": "all x.(Enzyme(x) -> (InterestingInDigestion(x) & OccursInSmallintestine(x)))", "score": 0}
{"id": "eqasc_validation_1023", "prediction": "all x.((Enzyme(x) & InvolvedInDigestion(x)) -> OrbitsPersonallyInSmallintestine(x))", "score": 0}
{"id": "eqasc_validation_1023", "prediction": "all x y z w.((Enzyme(x) & Digestive(y) & Smallintestine(z) & Digestive(w)) -> (OccursIn(x,y,z,w)))", "score": 0}
{"id": "eqasc_validation_1024", "prediction": "(presentInSmallIntestine(Lactobacillus) & PresentInSmallIntestine(Lactobacillus))", "score": 0}
{"id": "eqasc_validation_1024", "prediction": "(Lactobacillus(lactobacillus) & SmallIntestine(lactobacillus))", "score": 0}
{"id": "eqasc_validation_1024", "prediction": "A.Smallintestine(Lactobacillus)", "score": -1}
{"id": "eqasc_validation_1024", "prediction": "exists x.(Lactobacillus(x) & PresentInSmallIgnitor(x))", "score": 0}
{"id": "eqasc_validation_1024", "prediction": "all x.(Lactobacillus(x) -> PresentInSmallIntestine(x))", "score": 0}
{"id": "eqasc_validation_1024", "prediction": "the smallintestine (Smallintestine(Lactobacillus) -> PresentInIntestine(Lactobacillus))", "score": -1}
{"id": "eqasc_validation_1024", "prediction": "(exists x.(Lactobacillus(x) & SmallIntestine(x)))", "score": 0}
{"id": "eqasc_validation_1024", "prediction": "all x.(Lactobacillus(x) -> exists y.(SmallIndividual(y) & Small(y)))", "score": 0}
{"id": "eqasc_validation_1024", "prediction": "all x.(Lactobacillus(x) -> PresentInSmallintestine(x))", "score": 0}
{"id": "eqasc_validation_1024", "prediction": "exists x.(Lactobacillus(x) & SmallIntestine(x))", "score": 0}
{"id": "eqasc_validation_1024", "prediction": "(presentInSmallIntestine(Lactobacillus) -> PresentInSmallIntestine(Lactobacillus))", "score": 0}
{"id": "eqasc_validation_1024", "prediction": "all x.(Lactobacillus(x) -> (PresentInSmallIntestine(x) & PresentInSmallIntestine(x)))", "score": 0}
{"id": "eqasc_validation_1024", "prediction": "all x y.((Lactobacillus(x) & SmallIntestine(y)) -> PresentIn(x,y))", "score": 0}
{"id": "eqasc_validation_1025", "prediction": "lactobacillus aids ChemicalDigestion(Lactobacillus)", "score": -1}
{"id": "eqasc_validation_1025", "prediction": "all x.((Lactobacillus(x) & Cyan Digestion(x)) -> Aids(x,ChemicalDigestion))", "score": -1}
{"id": "eqasc_validation_1025", "prediction": "all x.(Lactobacillus(x) -> AidsChemicalDigestion(x))", "score": 0}
{"id": "eqasc_validation_1025", "prediction": "all x.(Luctobacillus(x) -> AidsChemicalDigestion(x))", "score": 0}
{"id": "eqasc_validation_1025", "prediction": "all x y z.((Lactobacillus(x) & ChemicalDigestion(y) & ChemicalDigestion(z)) -> Advises(x,y,z))", "score": 0}
{"id": "eqasc_validation_1025", "prediction": "all x y z.((Lactobacillus(x) & ChemicalDigestion(y) & AcidTodest(z) & Aids(x,y,z)) -> Lactobacillus(x))", "score": 0}
{"id": "eqasc_validation_1025", "prediction": "all x y.((Lactobacillus(x) & ChemicalDigestion(y)) -> Aids(x,y))", "score": 0}
{"id": "eqasc_validation_1025", "prediction": "all x y z.((Lactobacillus(x) & Digestion(y) & ChemicalDigestion(z)) -> Aids(x,y,z))", "score": 0}
{"id": "eqasc_validation_1025", "prediction": "all x.(Lacobacillus(x) -> AidsChemicalDigestion(x))", "score": 0}
{"id": "eqasc_validation_1026", "prediction": "all x.(Phedician(x) -> CallsIntestinesBowels(x))", "score": 0}
{"id": "eqasc_validation_1026", "prediction": "all x.(Pharmacist(x) -> CallsIntestinesBowels(x))", "score": 0}
{"id": "eqasc_validation_1026", "prediction": "all x y.((Pharmacist(x) & Intestine(y)) -> TheBowels(x))", "score": 0}
{"id": "eqasc_validation_1026", "prediction": "all x.(Phlebotist(x) -> (CallingIntestine(x) | CallingBowels(x)))", "score": 0}
{"id": "eqasc_validation_1026", "prediction": "all x.(Pharmacist(x) -> (CallsIntestine(x,intestines) | CallsBowels(x)))", "score": 0}
{"id": "eqasc_validation_1026", "prediction": "all x.(Phlebotist(x) -> (CallingGoutes(x) | CallingBoots(x)))", "score": 0}
{"id": "eqasc_validation_1026", "prediction": "all x y.((Phone(x) & Intestine(y)) -> WeCall(x,y))", "score": 0}
{"id": "eqasc_validation_1026", "prediction": "all x.(Pheasant(x) -> (HasIngredients(x) | HasBowels(x)))", "score": 0}
{"id": "eqasc_validation_1026", "prediction": "all x.(Doctor(x) -> (Intestine(x) | Bub(x)))", "score": 0}
{"id": "eqasc_validation_1026", "prediction": "all x.(Pursist(x) -> Bumps(x))", "score": 0}
{"id": "eqasc_validation_1026", "prediction": "all x.(Purist(x) -> exists y.(Intestine(y) & Bought(x))))", "score": -1}
{"id": "eqasc_validation_1026", "prediction": "all x.(Prayer(x) -> OftenCalledIntestineBodies(x))", "score": 0}
{"id": "eqasc_validation_1026", "prediction": "all x y z.((Pharmacist(x) & Intestine(y) & Bowel(z)) -> Calls(x,y,z))", "score": 0}
{"id": "eqasc_validation_1026", "prediction": "all x y.((PhD(x) & Intestine(y)) -> Bores(y))", "score": 0}
{"id": "eqasc_validation_1026", "prediction": "all x.(Purist(x) -> (Intestine(x) | Bowel(x)))", "score": 0}
{"id": "eqasc_validation_1026", "prediction": "all x y.((Pharmacist(x) & Intestine(y)) -> (Callenged(x,y) | Callenged(x,y)))", "score": 0}
{"id": "eqasc_validation_1027", "prediction": "all x.(ChemisticalDigestion(x) -> (OccursInSmallBody(x) & MostInSmallBody(x)))", "score": 0}
{"id": "eqasc_validation_1027", "prediction": "all x.(ChemicalDigestion(x) -> exists y.(SmallBody(y) & OccursIn(x,y))))", "score": -1}
{"id": "eqasc_validation_1027", "prediction": "all x.(Chemistry(x) -> OccursInSmallBody(x))", "score": 0}
{"id": "eqasc_validation_1027", "prediction": "all x y.((ChemicalDigestion(x) & SmallBody(y)) -> OccursIn(x,y))", "score": 0}
{"id": "eqasc_validation_1027", "prediction": "all x.(RequiresSmallBody(x) -> DigestionChemical(x))", "score": 0}
{"id": "eqasc_validation_1027", "prediction": "all x.(ChemicalDigestion(x) -> OccursInSmallBody(x))", "score": 0}
{"id": "eqasc_validation_1027", "prediction": "all x y.((ChemicalDigestion(x) & SmallBowel(y)) -> OccursIn(x,y))", "score": 0}
{"id": "eqasc_validation_1027", "prediction": "all x.(ChemicalDigestation(x) -> PresidesInSmallBody(x))", "score": 0}
{"id": "eqasc_validation_1027", "prediction": "all x y.((ChemisticalDigestion(x) & SmallBody(y)) -> OccursIn(x,y))", "score": 0}
{"id": "eqasc_validation_1027", "prediction": "all x.(ChemicalDigestment(x) -> OccursInSmallBody(x))", "score": 0}
{"id": "eqasc_validation_1027", "prediction": "all x y.((ChemicalDigestion(x) & SmallBod(y)) -> OccursIn(x,y))", "score": 0}
{"id": "eqasc_validation_1027", "prediction": "all x y.((SmallBody(x) & ChemicalDigestion(y)) -> OccursIn(x,y))", "score": 0}
{"id": "eqasc_validation_1028", "prediction": "all x y.((Enzyme(x) & SmallIntestine(y)) -> LocalizedIn(x,y))", "score": 0}
{"id": "eqasc_validation_1028", "prediction": "all x.(Enzyme(x) -> (LocatedInSmallintestine(x) | FindsInSmallintestine(x)))", "score": 0}
{"id": "eqasc_validation_1028", "prediction": "all x.(Enzyme(x) -> FoundInSmallintestine(x))", "score": 0}
{"id": "eqasc_validation_1028", "prediction": "all x y z.((Enzyme(x) & SmallIntestine(y) & Enzyme(z)) -> IsLocatedIn(x,y))", "score": 0}
{"id": "eqasc_validation_1028", "prediction": "(all x y.((Enzyme(x) & SmallIntestine(y)) -> LocatedIn(x,y)))", "score": 0}
{"id": "eqasc_validation_1028", "prediction": "all x.(Enzyme(x) -> LocatedInSmallIntestine(x))", "score": 0}
{"id": "eqasc_validation_1028", "prediction": "all x y.((Enzyme(x) & SmallIntestine(y)) -> LocatedIn(x,y))", "score": 0}
{"id": "eqasc_validation_1028", "prediction": "all x.(Enzyme(x) -> (LocatedInSmallIntestine(x) & InSmallIntestine(x)))", "score": 0}
{"id": "eqasc_validation_1028", "prediction": "all x y.((Enzyme(x) & SmallInternal(y)) -> FoundIn(x,y))", "score": 0}
{"id": "eqasc_validation_1028", "prediction": "all x y z.((Enzyme(x) & Smallintestine(y) & SmallIgnite(z)) -> LocationInIntestine(x,y,z))", "score": 0}
{"id": "eqasc_validation_1029", "prediction": "all x.(ComplexCompound(x) -> BreakSimpleAndIntestinal(x))", "score": 0}
{"id": "eqasc_validation_1029", "prediction": "all x y.((ComplexChemical(x) & SmallIntestine(y)) -> BreaksDownIntoSimpleChemicals(x,y))", "score": 0}
{"id": "eqasc_validation_1029", "prediction": "all x.(ComplexChemical(x) -> BreaksIntoSimpleChemicals(x))", "score": 0}
{"id": "eqasc_validation_1029", "prediction": "all x y.((ComplexChemical(x) & SimpleChemical(y)) -> BreaksDecomposedInto(x,y))", "score": 0}
{"id": "eqasc_validation_1029", "prediction": "all x y.((ComplexChemical(x) & SmallIntestine(y)) -> BreaksDownToSimpleChemicals(x))", "score": 0}
{"id": "eqasc_validation_1029", "prediction": "all x.(ComplexChemical(x) -> (BreaksIntoSimpleChemicals(x) & MostlyInSmallIntestine(x)))", "score": 0}
{"id": "eqasc_validation_1029", "prediction": "all x y.((ComplexChemical(x) & SimpleChemical(y)) -> BreaksDownInTheSmallIntestine(x,y))", "score": 0}
{"id": "eqasc_validation_1029", "prediction": "all x.(ComplexChemicals(x) -> BreaksIntoSimpleChemicals(x))", "score": 0}
{"id": "eqasc_validation_1029", "prediction": "all x y.((ComplexChemical(x) & SimpleChemical(y)) -> BreaksDownInto(x,y))", "score": 0}
{"id": "eqasc_validation_1029", "prediction": "all x.(ComplexChemicals(x) -> BreakDownIntoSimpleChemicals(x))", "score": 0}
{"id": "eqasc_validation_1029", "prediction": "all x y z.((ComplexChemical(x) & SimpleChemical(y) & SmallIntestine(z)) -> BreaksInto(x,y))", "score": 0}
{"id": "eqasc_validation_1029", "prediction": "all x.(ComplexChemicals(x) -> BreakDownSimple(x))", "score": 0}
{"id": "eqasc_validation_1029", "prediction": "all x y.((ComplexChemical(x) & SimpleChemical(y)) -> BreaksDownIntoInnergy(x,y))", "score": 0}
{"id": "eqasc_validation_1030", "prediction": "all x.(Second(x) -> MeasuresTime(x))", "score": 0}
{"id": "eqasc_validation_1030", "prediction": "all x.(Second(x) -> MeasurementSeconds(x))", "score": 0}
{"id": "eqasc_validation_1030", "prediction": "all x.(Second(x) -> UsedToMeasureTime(x))", "score": 0}
{"id": "eqasc_validation_1030", "prediction": "(MeasuresTime(seconds) -> UsedToMeasureTime(seconds))", "score": 0}
{"id": "eqasc_validation_1030", "prediction": "all x y.((Second(x) & Time(y) & Measures(x,y)) -> UsedToMeasure(x,y))", "score": 0}
{"id": "eqasc_validation_1030", "prediction": "all x y z.((Second(x) & Time(y) & Moment(z)) -> MeasuresMeting(x,y,z))", "score": 0}
{"id": "eqasc_validation_1030", "prediction": "(all x.(Second(x) -> MeasureTime(x)))", "score": 0}
{"id": "eqasc_validation_1030", "prediction": "all x.(Seconds(x) -> MeasuresTime(x))", "score": 0}
{"id": "eqasc_validation_1030", "prediction": "all x.(Second(x) -> MeasuredTime(x))", "score": 0}
{"id": "eqasc_validation_1030", "prediction": "all x y z.((Second(x) & Time(y) & Space(z)) -> Measures(x,y,z))", "score": 0}
{"id": "eqasc_validation_1030", "prediction": "all x y.(Second(x) -> MeasuresTime(x,y))", "score": 0}
{"id": "eqasc_validation_1030", "prediction": "all x y.((Second(x,y) & Second(y)) -> MeasuresTime(x))", "score": 0}
{"id": "eqasc_validation_1030", "prediction": "all x.(Sixts(x) -> UsedToMeasureTime(x))", "score": 0}
{"id": "eqasc_validation_1031", "prediction": "all x y.((CPUTime(x) & Second(y)) -> Measuring(x,y))", "score": 0}
{"id": "eqasc_validation_1031", "prediction": "all x.(ComputerTime(x) -> MeasuredInSeconds(x))", "score": 0}
{"id": "eqasc_validation_1031", "prediction": "everything about CPUTimeMeasuredInSeconds(CPUTime)", "score": -1}
{"id": "eqasc_validation_1031", "prediction": "all x.(ColorCPUTime(x) -> MeasuredInSeconds(x))", "score": 0}
{"id": "eqasc_validation_1031", "prediction": "all x.(CPUTime(x) -> MeasuredInSeconds(x))", "score": 0}
{"id": "eqasc_validation_1031", "prediction": "all x.((CPUTime(x) & MeasuredInSeconds(x)) -> MeasuredInSeconds(x))", "score": 0}
{"id": "eqasc_validation_1031", "prediction": "all x.(CPUTime(x) -> MeasurableInSeconds(x))", "score": 0}
{"id": "eqasc_validation_1031", "prediction": "all x.(CPUTime(x) -> MeasuringSeconds(x))", "score": 0}
{"id": "eqasc_validation_1031", "prediction": "all x y.((CPUTime(x) & Seconds(y)) -> Measurable(x,y))", "score": 0}
{"id": "eqasc_validation_1031", "prediction": "all x y.((CPUTime(x) & Session(y)) -> MeasuredIn(x,y))", "score": 0}
{"id": "eqasc_validation_1032", "prediction": "all x.(CPUTime(x) -> CanBeUsedAsClock(x))", "score": 0}
{"id": "eqasc_validation_1032", "prediction": "all x.(CPUTime(x) -> (Clock(x) | Clock(x)))", "score": 0}
{"id": "eqasc_validation_1032", "prediction": "all x y.((CPUTime(x) & Clock(y)) -> (UsesClockTime(x,y) & WorksAs(x,y)))", "score": 0}
{"id": "eqasc_validation_1032", "prediction": "(CPUTimeClock(CPU) & -UsedAsClock(CPU))", "score": 0}
{"id": "eqasc_validation_1032", "prediction": "all x.(CPUTime(x) & CanBeUsedAsClock(x))", "score": 0}
{"id": "eqasc_validation_1032", "prediction": "all x y.((CPUTime(x) & Clock(y)) -> CanBeUsedAs(x,y))", "score": 0}
{"id": "eqasc_validation_1032", "prediction": "all x.((CoreProcessorTime(x) & Clock(x)) -> CanBeUsedAs(x,Clock))", "score": 0}
{"id": "eqasc_validation_1032", "prediction": "all x.(CPUTime(x) -> Clock(x))", "score": 0}
{"id": "eqasc_validation_1032", "prediction": "all x.( CPUTime(x) -> CanBeUsedAsClock(x))", "score": 0}
{"id": "eqasc_validation_1032", "prediction": "all x.((CPUTime(x) & Clock(x)) -> CanBeUsedAs(x,Clock))", "score": 0}
{"id": "eqasc_validation_1033", "prediction": "all x.(AccountingPeriod(x) -> PeriodOfTime(x))", "score": 0}
{"id": "eqasc_validation_1033", "prediction": "all x.(AccountingPeriod(x) -Time(x))", "score": -1}
{"id": "eqasc_validation_1034", "prediction": "all x.(Second(x) -> MeasuresPeriod(x))", "score": 0}
{"id": "eqasc_validation_1034", "prediction": "all x y.((Second(x) & Period(y) & Measure(x,y)) -> Measure(x,y))", "score": 0}
{"id": "eqasc_validation_1034", "prediction": "all x y.((Second(x) & Period(y) & Measures(x,y)) -> UsedToMeter(x,y))", "score": 0}
{"id": "eqasc_validation_1034", "prediction": "all x y.((Second(x) & Period(y)) -> Measures(x,y))", "score": 0}
{"id": "eqasc_validation_1034", "prediction": "all x y.((Second(x) & Period(y)) -> UsedToMeasure(x,y))", "score": 0}
{"id": "eqasc_validation_1034", "prediction": "all x.(Seconds(x) -> MeasuresPange(x))", "score": 0}
{"id": "eqasc_validation_1034", "prediction": "all x.(Seconds(x) -> UsedToMeasurePeriod(x))", "score": 0}
{"id": "eqasc_validation_1034", "prediction": "all x y.((Seconds(x) & Period(y)) -> MeasuresPeriod(x,y))", "score": 0}
{"id": "eqasc_validation_1034", "prediction": "all x y z w.((Second(x) & Duration(y) & Period(z) & UsedToMeasure(x,y,z)) -> Measures(x,e,z))", "score": 0}
{"id": "eqasc_validation_1034", "prediction": "all x.(Seconds(x) -> MeasuresPeriod(x))", "score": 0}
{"id": "eqasc_validation_1034", "prediction": "all x y.((Second(x) & Period(y)) -> MeasuresPeriod(x,y))", "score": 0}
{"id": "eqasc_validation_1034", "prediction": "all x y.((Second(x) & Period(y)) -> MeasurePathFor(x,y))", "score": 0}
{"id": "eqasc_validation_1034", "prediction": "all x y.((Second(x) & Period(y) & Measure(x,y)) -> MeasuresPeter(x,y))", "score": 0}
{"id": "eqasc_validation_1035", "prediction": "((Stopwatch(Stopwatch) & MeasuredTime(Stopwatch)) -> UsedToMeasure(Stopwatch,Stopwatch))", "score": 0}
{"id": "eqasc_validation_1035", "prediction": "Stopwatch was used to measure Time.", "score": -1}
{"id": "eqasc_validation_1035", "prediction": "all x.(Stopwatch(x) -> MeasuresTime(x))", "score": 0}
{"id": "eqasc_validation_1035", "prediction": "(MeasuresTime(Stopwatch) & UsedToMeasure(Stopwatch))", "score": 0}
{"id": "eqasc_validation_1035", "prediction": "all x y.((Stopwatch(x) & Source(y)) -> MeasuredTime(x))", "score": 0}
{"id": "eqasc_validation_1035", "prediction": "(MeasuresTime(Stopwatch) -> UsedToMeasure(Stopwatch))", "score": 0}
{"id": "eqasc_validation_1035", "prediction": "all x.(Stopwatch(x) -> WasMeasuredTime(x))", "score": 0}
{"id": "eqasc_validation_1035", "prediction": "all x.(Stopwatch(x) -> UsedToMeasureTime(x))", "score": 0}
{"id": "eqasc_validation_1035", "prediction": "Stopwatch was used to measureTime (MeasuredTime(Stopwatch) | MeasuredTime(Stopwatch)))", "score": -1}
{"id": "eqasc_validation_1035", "prediction": "MeasuresTime(stopwatch)", "score": 0}
{"id": "eqasc_validation_1036", "prediction": "all x y.((Stopwatch(x) & Minutes(y)) -> Measured(x,y))", "score": 0}
{"id": "eqasc_validation_1036", "prediction": "all x.(Stopwatch(x) -> MeasuresSeconds(x))", "score": 0}
{"id": "eqasc_validation_1036", "prediction": "all x y.((Stopwatch(x) & Seconds(y)) -> Measures(x,y))", "score": 0}
{"id": "eqasc_validation_1036", "prediction": "all x y z.((Stopwatch(x) & Second(y) & Second(z)) -> Measure(x,y,z))", "score": 0}
{"id": "eqasc_validation_1036", "prediction": "all x y z.((Stopwatch(x) & Seconds(y) & Seconds(z)) -> MeasuresWith(x,y,z))", "score": 0}
{"id": "eqasc_validation_1036", "prediction": "all x y z.((Stopwatch(x) & Seconds(y) & Seconds(z)) -> Measures(x,y,z))", "score": 0}
{"id": "eqasc_validation_1036", "prediction": "all x y.((Stopwatch(x) & Seconds(y) & Measures(x,y)) -> UsedToMeasure(x,y))", "score": 0}
{"id": "eqasc_validation_1036", "prediction": "all x y.((Stopwatch(x) & MeasuresSeconds(y)) -> UsedToMeasureSeconds(x,y))", "score": 0}
{"id": "eqasc_validation_1036", "prediction": "all x.(Startwatch(x) -> MeasuresSeconds(x))", "score": 0}
{"id": "eqasc_validation_1036", "prediction": "all x.(Stopwatch(x) -> UsedToMeasureSeconds(x))", "score": 0}
{"id": "eqasc_validation_1037", "prediction": "all x.(Speed(x) -> (MeasuredByDistance(x) & DividedByElapsedTime(x)))", "score": 0}
{"id": "eqasc_validation_1037", "prediction": "all x y z.(Speed(x) -> (Distance(y) & ElapsedTime(z) & DivisibleBy(x,y,z)))", "score": 0}
{"id": "eqasc_validation_1037", "prediction": "all x y.((Speed(x) & Distance(y)) -> DivisibleByElapsedTime(x,y))", "score": 0}
{"id": "eqasc_validation_1037", "prediction": "all x.(Speed(x) -> MeasuredByDistance(x))", "score": 0}
{"id": "eqasc_validation_1037", "prediction": "all x y.((Speed(x) & Distance(y)) -> DividedByElapsedTime(x,y))", "score": 0}
{"id": "eqasc_validation_1037", "prediction": "all x.(Speed(x) -> MeasurableByDistance(x))", "score": 0}
{"id": "eqasc_validation_1037", "prediction": "all x y.((Speed(x) & Distance(y) & CollapsedTime(y)) -> MeasuredBy(x,y))", "score": 0}
{"id": "eqasc_validation_1037", "prediction": "all x.(Speed(x) -> DistanceCovered(x))", "score": 0}
{"id": "eqasc_validation_1037", "prediction": "all x y.((Speed(x) & Distance(y) & CoveredDependent(y,x)) -> MeasuredBy(x,y))", "score": 0}
{"id": "eqasc_validation_1037", "prediction": "all x.(Speed(x) -> MeasuresDistance(x))", "score": 0}
{"id": "eqasc_validation_1037", "prediction": "all x.(Speed(x) -> MeasurableByDistanceDividedByElapsedTime(x))", "score": 0}
{"id": "eqasc_validation_1037", "prediction": "all x.(Speed(x) -> MeasuresDistanceDivision(x))", "score": 0}
{"id": "eqasc_validation_1038", "prediction": "all x y.((seconds(x) & Speed(y)) -> CanBeMeasured(x,y))", "score": 0}
{"id": "eqasc_validation_1038", "prediction": "all x.(Seconds(x) -> MeasuringSpeed(x))", "score": 0}
{"id": "eqasc_validation_1038", "prediction": "all x.(Second(x) -> Measurespeed(x))", "score": 0}
{"id": "eqasc_validation_1038", "prediction": "all x.(Seconds(x) -> UsedToMeasureSpeed(x))", "score": 0}
{"id": "eqasc_validation_1038", "prediction": "all x.(Seconds(x) -> MeasuresSpeed(x))", "score": 0}
{"id": "eqasc_validation_1038", "prediction": "all x.(Second(x) & MeasureSpeed(x))", "score": 0}
{"id": "eqasc_validation_1038", "prediction": "all x.(Second(x) -> UsedToMeasureSpeed(x))", "score": 0}
{"id": "eqasc_validation_1038", "prediction": "all x y.((Second(x) & Speed(y)) -> CanMeasure(x,y))", "score": 0}
{"id": "eqasc_validation_1038", "prediction": "all x.(Seconds(x) -> MeasureSpeed(x))", "score": 0}
{"id": "eqasc_validation_1038", "prediction": "all x.(Seconds(x) -> UsenForSpeedMeasurement(x))", "score": 0}
{"id": "eqasc_validation_1038", "prediction": "all x.(Second(x) -> CanBeMeasuredToMeasureSpeed(x))", "score": 0}
{"id": "eqasc_validation_1038", "prediction": "all x y.((Second(x) & Number(y)) -> MeasureSpeed(x,y))", "score": 0}
{"id": "eqasc_validation_1038", "prediction": "all x.(Second(x) -> CanBeMeasuredToSpeed(x))", "score": 0}
{"id": "eqasc_validation_1039", "prediction": "all x.(Whisker(x) -> UsedForSense(x))", "score": 0}
{"id": "eqasc_validation_1039", "prediction": "all x.(Whiskers(x) -> UsedForFeeling(x))", "score": 0}
{"id": "eqasc_validation_1039", "prediction": "all x y.((Whisker(x) & Animal(y)) -> UsedForWitness(x,y))", "score": 0}
{"id": "eqasc_validation_1039", "prediction": "all x y z.((Whisker(x) & Animal(y) & Animal(z)) -> UsedFor(x,y,z))", "score": 0}
{"id": "eqasc_validation_1039", "prediction": "all x.(Whiskers(x) -> UsedForMeaning(x))", "score": 0}
{"id": "eqasc_validation_1039", "prediction": "all x y z.((Whiskers(x) & Animal(y) & Animal(z)) -> UsedForFeelingBy(x,y,z))", "score": 0}
{"id": "eqasc_validation_1039", "prediction": "all x y.((Whiskers(x) & Animal(y)) -> UsedForFeeling.(WhiskersBetween(x,y)))", "score": -1}
{"id": "eqasc_validation_1039", "prediction": "all x y.((Whiskers(x) & Animal(y)) -> UsedForSense(x,y))", "score": 0}
{"id": "eqasc_validation_1039", "prediction": "all x y.((Whiskers(x) & Animal(y)) -> UsedForFeeling(x,y))", "score": 1}
{"id": "eqasc_validation_1039", "prediction": "all x.(Whiskers(x) -> UsedForFeelingByAnimals(x))", "score": 0}
{"id": "eqasc_validation_1039", "prediction": "all x y z.((Whirlback(x) & Animal(y)) -> UsedForFeeling(x,y,z))", "score": 0}
{"id": "eqasc_validation_1039", "prediction": "all x y.((Whiskers(x) & Animal(y)) -> UsedForFeelingBy(x,y))", "score": 0}
{"id": "eqasc_validation_1039", "prediction": "all x y.((Whiskers(x) & Animal(y)) -> Feeling(x,y))", "score": 0}
{"id": "eqasc_validation_1039", "prediction": "all x y.((Whiskers(x) & Animal(y)) -> UsedForSmoothing(x,y))", "score": 0}
{"id": "eqasc_validation_1040", "prediction": "all x y z.((Dog(x) & Whisker(y) & Dog(z)) -> (StiffHairs(z) & OnFace(y,z)))", "score": 0}
{"id": "eqasc_validation_1040", "prediction": "all x.(Dog(x) -> StiffHairsOnFace(x))", "score": 0}
{"id": "eqasc_validation_1040", "prediction": "all x.(Whiskers(x) -> (StiffHairs(x) & OnDogsFace(x)))", "score": 0}
{"id": "eqasc_validation_1040", "prediction": "all x y.((Dog(x) & Whisker(y)) -> StiffHairs(y))", "score": 0}
{"id": "eqasc_validation_1040", "prediction": "all x.((Dog(x) & Whisker(x)) -> StiffHairsOnFace(x))", "score": 0}
{"id": "eqasc_validation_1040", "prediction": "all x.(Whiskers(x) -> (StiffHairsOnDogs(x) & Dog(x)))", "score": 0}
{"id": "eqasc_validation_1040", "prediction": "all x y.((Dog(x) & Whisker(y)) -> StiffHairs(y,x))", "score": 0}
{"id": "eqasc_validation_1040", "prediction": "all x.(Schottisher(x) -> (StiffHairsOnDog(x) & OnFace(x)))", "score": 0}
{"id": "eqasc_validation_1040", "prediction": "all x.(Shuffler(x) -> (StiffHairsOnDogs(x) & OnSurface(x)))", "score": 0}
{"id": "eqasc_validation_1040", "prediction": "all x.(Shiffer(x) -> (StiffHairsOnFace(x) & Dog(x)))", "score": 0}
{"id": "eqasc_validation_1040", "prediction": "all x.(Whiskers(x) -> (StiffHairsOnFace(x) & HasLipe(x)))", "score": 0}
{"id": "eqasc_validation_1040", "prediction": "all x.(Fisher(x) -> StiffHairsOnDogsFace(x))", "score": 0}
{"id": "eqasc_validation_1040", "prediction": "all x.(Shuckers(x) -> (StiffHairs(x) & OnDogsFace(x)))", "score": 0}
{"id": "eqasc_validation_1040", "prediction": "(Shufflers(whisper) - (StrongHairs(w) | Feet(w))))", "score": -1}
{"id": "eqasc_validation_1040", "prediction": "all x.(Twinner(x) -> (StiffHairs(x) & OnDogCase(x)))", "score": 0}
{"id": "eqasc_validation_1040", "prediction": "all x.(Whisper(x) -> (StiffHairs(x) & OnDog(x)))", "score": 0}
{"id": "eqasc_validation_1041", "prediction": "all x y.((Hair(x) & Animal(y) & SciffOnFace(x,y)) -> UsedForFeeling(x,y))", "score": 0}
{"id": "eqasc_validation_1041", "prediction": "all x.((Face(x) & StiffHuars(x)) -> UsedForFeelingByAnimals(x))", "score": 0}
{"id": "eqasc_validation_1041", "prediction": "all x y.((StiffHair(x) & Face(y) & Animal(z)) -> UsedForFeeling(x,y,z))", "score": 0}
{"id": "eqasc_validation_1041", "prediction": "all x y.((Hair(x) & Animal(y)) -> UsedForFitness(x,y))", "score": 0}
{"id": "eqasc_validation_1041", "prediction": "all x y.((Shadow(x) & Animal(y)) -> StiffOnFaceForFeeling(x,y))", "score": 0}
{"id": "eqasc_validation_1041", "prediction": "all x.(StiffHairsOnFace(x) -> UsedForSensement(x))", "score": 0}
{"id": "eqasc_validation_1041", "prediction": "all x y.((DiffHair(x) & Face(y) & Animal(z)) -> UsedForFeeling(x,y,z))", "score": 0}
{"id": "eqasc_validation_1041", "prediction": "all x y.((SiffHair(x) & Animal(y)) -> UsedForFeeling(x,y))", "score": 0}
{"id": "eqasc_validation_1041", "prediction": "all x y.((SticHair(x) & Face(y)) -> UsedForFeeling(x,y))", "score": 0}
{"id": "eqasc_validation_1041", "prediction": "all x.((Hair(x) & StiffOnFace(x)) -> UsedForSensementByAnimals(x))", "score": 0}
{"id": "eqasc_validation_1041", "prediction": "all x y.((Arbeit(x) & Animal(y) & StiffHairsOnFace(x,y)) -> UsedForSmelling(x,y))", "score": 0}
{"id": "eqasc_validation_1041", "prediction": "all x.((Hair(x) & Stiff(x) & Face(x)) -> UsedForFeeling(x,Animals))", "score": 0}
{"id": "eqasc_validation_1041", "prediction": "all x.((StiffHair(x) & Face(x)) -> UsedForFellowing(x))", "score": 0}
{"id": "eqasc_validation_1041", "prediction": "all x.((Hair(x) & StiffOnFace(x)) -> UsedForSenseing(x))", "score": 0}
{"id": "eqasc_validation_1041", "prediction": "all x.(StiffHairs(x) -> UseForFeeling(x))", "score": 0}
{"id": "eqasc_validation_1041", "prediction": "all x ys.((StiffHair(x) & Face(y)) -> UsedForFeelingByAnimals(x,y))", "score": -1}
{"id": "eqasc_validation_1042", "prediction": "all x y.((Dog(x) & Fidget(y)) -> UsedForFeeling(x,y))", "score": 0}
{"id": "eqasc_validation_1042", "prediction": "all x.((Dog(x) & StiffHairsOnFace(x)) -> UsedForFeeling(x))", "score": 0}
{"id": "eqasc_validation_1042", "prediction": "all x y.((Dog(x) & Hair(y) & DogFace(y)) -> Stiff(y))", "score": 0}
{"id": "eqasc_validation_1042", "prediction": "all x.((Dog(x) & StiffHair(x)) -> UsedForFeeling(x))", "score": 0}
{"id": "eqasc_validation_1042", "prediction": "all x.((Dog(x) & StiffHairs(x)) -> UsedForFeeling(x))", "score": 0}
{"id": "eqasc_validation_1042", "prediction": "all x.(StiffHairsOnDogsFace(x) -> UsedForFeeling(x))", "score": 0}
{"id": "eqasc_validation_1042", "prediction": "all x y.((Dog(x) & StiffHairsOnFace(x)) -> UsedForFeeling(y))", "score": 0}
{"id": "eqasc_validation_1042", "prediction": "all x.((Disabled(x) & StiffHairsOnFace(x)) -> UsedForFeeling(x))", "score": 0}
{"id": "eqasc_validation_1042", "prediction": "all x.(StriftHairsOnDogFace(x) -> UsedForFeeling(x))", "score": 0}
{"id": "eqasc_validation_1042", "prediction": "all x y.((Dog(x) & StiffHairs(y)) -> UsedForFeeling(x,y))", "score": 0}
{"id": "eqasc_validation_1042", "prediction": "all x.((Dog(x) & StiffHairsOnDog(x)) -> UsedForEmotion(x))", "score": 0}
{"id": "eqasc_validation_1042", "prediction": "all x y.((Canine(x) & StiffHair(y)) -> UsedForFinding(x,y))", "score": 0}
{"id": "eqasc_validation_1042", "prediction": "all x.((Dog(x) & StiffHairs(x) & Face(x)) -> UsedForFeeling(x))", "score": 0}
{"id": "eqasc_validation_1042", "prediction": "all x y.((Dog(x) & StiffHairsOnFace(x,y)) -> UsedForSensement(x))", "score": 0}
{"id": "eqasc_validation_1042", "prediction": "all x.(StiffHairsOnDog(x) -> UsedForFelting(x))", "score": 0}
{"id": "eqasc_validation_1043", "prediction": "all x.(Cat(x) -> Animal(x))", "score": 1}
{"id": "eqasc_validation_1044", "prediction": "all x.(Cat(x) -> (UsesSpecializedLongHairOnFace(x) & FeelsWith(x)))", "score": 0}
{"id": "eqasc_validation_1044", "prediction": "all x.(Cat(x) -> exists y.(SpecializedLongHairOnFace(y) & FeelsWith(x,y)))", "score": 0}
{"id": "eqasc_validation_1044", "prediction": "all x.(Cat(x) -> FindsLongHair(x))", "score": 0}
{"id": "eqasc_validation_1044", "prediction": "all x y.((Cat(x) & Face(y)) -> UsesSpecializedLongHair(x,y))", "score": 0}
{"id": "eqasc_validation_1044", "prediction": "all x.(Cat(x) -> (UsesSpecializedLongHair(x) & FeelsWith(x)))", "score": 0}
{"id": "eqasc_validation_1044", "prediction": "all x.(Cat(x) -> UsesLongHairOnFaces(x))", "score": 0}
{"id": "eqasc_validation_1044", "prediction": "all x.(Cat(x) -> UsesSpecializedLongHairOnFace(x))", "score": 0}
{"id": "eqasc_validation_1044", "prediction": "all x y.((Cat(x) & ExpertLongHair(x) & Face(y)) -> FeelsWith(x,y))", "score": 0}
{"id": "eqasc_validation_1044", "prediction": "all x.(Cat(x) -> UsesSpecializedLongHair(x))", "score": 0}
{"id": "eqasc_validation_1044", "prediction": "all x.(Cat(x) & SpecializedLongHair(y) & UsesOnFace(x,y))", "score": 0}
{"id": "eqasc_validation_1044", "prediction": "all x y.((Cat(x) & LargeHair(y)) -> UsesToGesture(x,y))", "score": 0}
{"id": "eqasc_validation_1045", "prediction": "all x.(CatsWhiskers(x) -> HasName(x))", "score": 0}
{"id": "eqasc_validation_1045", "prediction": "all x y.((Cat(x) & Whisker(y)) -> DoesNotCount(x,y))", "score": 0}
{"id": "eqasc_validation_1045", "prediction": "all x.(CatWhiskers(x) -> HasThirdsRose(x,y))", "score": 0}
{"id": "eqasc_validation_1045", "prediction": "all x.((Cat(x) & Whisker(x)) -> CanBeNumbered(x))", "score": 0}
{"id": "eqasc_validation_1045", "prediction": "exists x.(CatsWhiskers(x) & Whiskers(x))", "score": 0}
{"id": "eqasc_validation_1045", "prediction": "-Its Whisker(x))", "score": -1}
{"id": "eqasc_validation_1045", "prediction": "all x.(CatSwifters(x) -> KnownFor(x))", "score": 0}
{"id": "eqasc_validation_1045", "prediction": "all x.(CatName(x) -> Whiskers(x))", "score": 0}
{"id": "eqasc_validation_1045", "prediction": "exists x.(CatWhiskers(x) & TheName(x))", "score": 0}
{"id": "eqasc_validation_1045", "prediction": "all x.(CatsWhiskers(x) -> BottleName(x))", "score": 0}
{"id": "eqasc_validation_1045", "prediction": "exists x.(CatsWhiskers(x))", "score": 0}
{"id": "eqasc_validation_1045", "prediction": "all x.(CatsWhiskers(x) -> Name(x))", "score": 0}
{"id": "eqasc_validation_1045", "prediction": "exists x.(CatWhiskers(x) & CatOwner(x))", "score": 0}
{"id": "eqasc_validation_1045", "prediction": "exists x.(CatsWhiskers(x) & AvailableOn(x))", "score": 0}
{"id": "eqasc_validation_1045", "prediction": "all x.(CatWhiskers(x) -> (NameForCat(x) & Long(x)))", "score": 0}
{"id": "eqasc_validation_1045", "prediction": "all x.(Cat(x) -> Whiskers(x))", "score": 0}
{"id": "eqasc_validation_1046", "prediction": "all x.(Cat(x) -> HasBodyParts(x))", "score": 0}
{"id": "eqasc_validation_1046", "prediction": "all x.(Cat(x) -> exists y.(BodyPart(y) & FeelsHealing(x,y)))", "score": 0}
{"id": "eqasc_validation_1046", "prediction": "all x.(Cat(x) -> (HasBodyParts(x,y) & FeelsWith(x,z)))", "score": 0}
{"id": "eqasc_validation_1046", "prediction": "all x.(Cat(x) -> HasBodyPartsForFellowing(x))", "score": 0}
{"id": "eqasc_validation_1046", "prediction": "all x.(Cat(x) -> HasBodyPartsForFelting(x))", "score": 0}
{"id": "eqasc_validation_1046", "prediction": "all x.(Cat(x) -> HasBodyPartsForFeeling(x))", "score": 0}
{"id": "eqasc_validation_1046", "prediction": "all x y.((Cat(x) & BodyPart(x) & FeelingApparance(y)) -> HasTolerance(x,y))", "score": 0}
{"id": "eqasc_validation_1046", "prediction": "all x.(Cat(x) -> HasBodyPartsForPoorFinding(x))", "score": 0}
{"id": "eqasc_validation_1047", "prediction": "all x y z.((Whisker(x) & Cat(y) & Cat(z)) -> Feeling(x,y,z))", "score": 0}
{"id": "eqasc_validation_1047", "prediction": "all x y.((Whisker(x) & Cat(y)) -> (UsedForFelting(x,y) & UsedForFelting(x,y)))", "score": 0}
{"id": "eqasc_validation_1047", "prediction": "all x y z.((Whisker(x) & Cat(y) & Cat(z)) -> UsedForFeelingBy(x,y,z))", "score": 0}
{"id": "eqasc_validation_1047", "prediction": "all x y.((Whisker(x) & Cat(y)) -> UsedForFeeling(x,y))", "score": 0}
{"id": "eqasc_validation_1047", "prediction": "all x.(Whiskers(x) -> UsedForFeeling(x,Cats))", "score": 0}
{"id": "eqasc_validation_1047", "prediction": "all x y z.((Whisker(x) & Cat(y) & Cat(z)) -> UsedForFeltBy(x,y,z))", "score": 0}
{"id": "eqasc_validation_1047", "prediction": "all x y z.((Shurter(x) & Cat(y) & Cat(z)) -> UsedForFeeling(x,z,x))", "score": 0}
{"id": "eqasc_validation_1047", "prediction": "all x y z.((Shoesher(x) & Cat(y) & Cat(z)) -> UsedForFeeling(x,y,z))", "score": 0}
{"id": "eqasc_validation_1047", "prediction": "all x y z.((Whirls(x) & Cat(y) & Cat(z)) -> UsedForFeeling(x,y,z))", "score": 0}
{"id": "eqasc_validation_1047", "prediction": "all x y.((Whiskers(x) & Cat(y)) -> UsedForFeeling(x,y))", "score": 1}
{"id": "eqasc_validation_1047", "prediction": "all x y z.((Schnauzer(x) & Cat(y) & Cat(z) & Flees(x,y)) -> UsedForSense(x,y,z))", "score": 0}
{"id": "eqasc_validation_1047", "prediction": "all x y.((Whiskers(x) & Cat(y)) -> UsedForSmoking(x,y))", "score": 0}
{"id": "eqasc_validation_1047", "prediction": "all x y z.((Whiskers(x) & Cat(y)) -> (UsedForSmearing(x,y) & UsedForSmellingBy(x,z)))", "score": 0}
{"id": "eqasc_validation_1047", "prediction": "all x.(Whiskers(x) -> (UsedForFeeling(x) & Cat(x)))", "score": 0}
{"id": "eqasc_validation_1048", "prediction": "(MadeOfKeratin(Hair) & MadeOfKeratin(Wheels,Claws,Hooves))", "score": 0}
{"id": "eqasc_validation_1048", "prediction": "all x.((Hair(x) | Whiskers(x) | Claws(x) | Hooves(x)) -> MadeOfKeratin(x))", "score": 0}
{"id": "eqasc_validation_1048", "prediction": "all x.((Hair(x) | Whiskers(x) | Claws(x) | Hooves(x)) -> Keratin(x))", "score": 0}
{"id": "eqasc_validation_1048", "prediction": "all x y z.((Hair(x) & Whisker(y) & Claws(z) & Hooves(x)) -> MadeOfKeratin(x))", "score": 0}
{"id": "eqasc_validation_1048", "prediction": "all x.((Hair(x) | Whisker(x) | Claws(x) | Hooves(x)) -> MadeOfKeratin(x))", "score": 0}
{"id": "eqasc_validation_1048", "prediction": "all x.((Hair(x) | Whiskers(x) | Cleats(x) | Hooves(x)) -> Keratin(x))", "score": 0}
{"id": "eqasc_validation_1048", "prediction": "all x.((Hair(x) | Whiskers(x) | Cleats(x) | Hooves(x)) -> MadeOfKeratin(x))", "score": 0}
{"id": "eqasc_validation_1048", "prediction": "all x.((Hair(x) | Whiskers(x) | Cleats(x) | Shoes(x)) -> MadeOfKeratin(x))", "score": 0}
{"id": "eqasc_validation_1048", "prediction": "all x.((Hair(x) | Whiskers(x) | Claims(x) | Hooves(x)) -> MadeOfKeratin(x))", "score": 0}
{"id": "eqasc_validation_1048", "prediction": "all x.(Manufacture(x) -> (Hair(x) | Whiskers(x) | Claws(x) | Hooves(x)))", "score": 0}
{"id": "eqasc_validation_1048", "prediction": "all x.(Keratin(x) -> (Hair(x) | Whiskers(x) | Claws(x) | Hooves(x)))", "score": 0}
{"id": "eqasc_validation_1049", "prediction": "all x y.((Tissue(x) & Keratin(x)) -> UsedForSense(y))", "score": 0}
{"id": "eqasc_validation_1049", "prediction": "all x y.((Tissue(x) & MadeOfKeratin(x) & Animal(y)) -> UsedForFelt(x,y))", "score": 0}
{"id": "eqasc_validation_1049", "prediction": "all x y z.((Tissue(x) & Keratin(y) & Animal(z) & MadeOf(x,y)) -> UsedForFeelingBy(x,z))", "score": 0}
{"id": "eqasc_validation_1049", "prediction": "all x.((Tissue(x) & MadeOfKeratin(x)) -> UsedForSensement(x))", "score": 0}
{"id": "eqasc_validation_1049", "prediction": "all x y z.((Tissue(x) & Keratin(y) & Animal(z)) -> UsedForFinding(x,y,z))", "score": 0}
{"id": "eqasc_validation_1049", "prediction": "all x y.((Tissue(x) & Keratin(y)) -> FeelingByAnimals(x))", "score": 0}
{"id": "eqasc_validation_1049", "prediction": "all x.((TissueMadeOfKeratin(x)) -> UsedForFeelingByAnimals(x))", "score": 0}
{"id": "eqasc_validation_1049", "prediction": "all x y.((Tissue(x) & Keratin(y)) -> UsedForGettingByAnimals(x,y))", "score": 0}
{"id": "eqasc_validation_1049", "prediction": "all x.((Tissue(x) & MadeOfKeratin(x)) -> UsedForFindingByAnimals(x))", "score": 0}
{"id": "eqasc_validation_1049", "prediction": "all x y.((Tissue(x) & Keratin(y)) -> UsedForSense(x,y))", "score": 0}
{"id": "eqasc_validation_1049", "prediction": "all x.((Tissue(x) & MadeOfKeratin(x)) -> UsedForSenseing(x))", "score": 0}
{"id": "eqasc_validation_1049", "prediction": "all x y.((Tissue(x) & Fiber(y) & MadeOfKeratin(x)) -> UsedForFeelingByAnimals(x))", "score": 0}
{"id": "eqasc_validation_1049", "prediction": "all x y.((Trishedia(x) & Keratin(y) & Animal(z)) -> UsedForFeltingBy(x,z))", "score": 0}
{"id": "eqasc_validation_1049", "prediction": "all x y.((Tissue(x) & Keratin(y)) -> UsedForFeelingByAnimals(x))", "score": 0}
{"id": "eqasc_validation_1049", "prediction": "all x.((Tissue(x) & MadeOfKeratin(x)) -> UsedForSenseSense(x))", "score": 0}
{"id": "eqasc_validation_1050", "prediction": "all x y.((Watch(x) & MeasuresTime(y)) -> UsedFor(x,y))", "score": 0}
{"id": "eqasc_validation_1050", "prediction": "all x.(Watch(x) -> MeasuresTime(x))", "score": 0}
{"id": "eqasc_validation_1050", "prediction": "all x.(Watch(x) -> UsuallyMeasuresTime(x))", "score": 0}
{"id": "eqasc_validation_1050", "prediction": "all x.(Watch(x) -> UsedForMeasuringTime(x))", "score": 0}
{"id": "eqasc_validation_1050", "prediction": "all x y.((Watch(x) & MeasuresTime(x,y)) -> UsedForMeasuringTime(x,y))", "score": 0}
{"id": "eqasc_validation_1050", "prediction": "all x y.((Watch(x) & Time(y)) -> UsedToMeasure(x,y))", "score": 0}
{"id": "eqasc_validation_1050", "prediction": "all x y.((Watch(x) & Time(y)) -> Measures(x,y))", "score": 0}
{"id": "eqasc_validation_1050", "prediction": "all x y.(Watch(x) -> MeasuringTime(x,y))", "score": 0}
{"id": "eqasc_validation_1050", "prediction": "all x y z.((Watch(x) & Time(y) & Hour(z) & Measures(x,y,z,y)) -> Measures(x,y))", "score": 0}
{"id": "eqasc_validation_1051", "prediction": "all x.(Time(x) -> MeasuredInSeconds(x))", "score": 0}
{"id": "eqasc_validation_1051", "prediction": "all x.(Time(x) -> MeasurementInSeconds(x))", "score": 0}
{"id": "eqasc_validation_1051", "prediction": "all x y.((Time(x) & Second(y)) -> MeasurableIn(x,y))", "score": 0}
{"id": "eqasc_validation_1051", "prediction": "all x.(Time(x) -> MeasuringSeconds(x))", "score": 0}
{"id": "eqasc_validation_1051", "prediction": "all x.(Time(x) -> MeasurableInSecond(x))", "score": 0}
{"id": "eqasc_validation_1051", "prediction": "all x.(Time(x) -> MeasurableInSeconds(x))", "score": 0}
{"id": "eqasc_validation_1052", "prediction": "all x.(Watch(x) -> UsingToMeasureSeconds(x))", "score": 0}
{"id": "eqasc_validation_1052", "prediction": "all x.(Watch(x) -> MeasuresSeconds(x))", "score": 0}
{"id": "eqasc_validation_1052", "prediction": "all x.(Watch(x) -> CanMeasureSeconds(x))", "score": 0}
{"id": "eqasc_validation_1052", "prediction": "all x.(Watch(x) -> UsedToMeasureSeconds(x))", "score": 0}
{"id": "eqasc_validation_1053", "prediction": "all x.(Time(x) -> MeasuringInSeconds(x))", "score": 0}
{"id": "eqasc_validation_1053", "prediction": "all x.(Time(x) -> MeasuredInSeconds(x))", "score": 0}
{"id": "eqasc_validation_1053", "prediction": "all x y.((Time(x) & Duration(y)) -> MeasuredInSeconds(x))", "score": 0}
{"id": "eqasc_validation_1053", "prediction": "all x y.((Time(x) & Second(y)) -> MeasuredIn(x,y))", "score": 0}
{"id": "eqasc_validation_1053", "prediction": "all x y.((Time(x) & Times(y)) -> MeasuringSeconds(x,y))", "score": 0}
{"id": "eqasc_validation_1053", "prediction": "all x.(Time(x) -> MeasurableInSeconds(x))", "score": 0}
{"id": "eqasc_validation_1054", "prediction": "all x y.((Watch(x) & Session(y)) -> UsedForMeasuring(x,y))", "score": 0}
{"id": "eqasc_validation_1054", "prediction": "all x y.((Watch(x) & Seconds(y) & Measure(x,y)) -> UsedFor(x,y))", "score": 0}
{"id": "eqasc_validation_1054", "prediction": "all x.(Watch(x) -> UsedForSecondsMeasurement(x))", "score": 0}
{"id": "eqasc_validation_1054", "prediction": "all x.(Watch(x) -> Measure(x,seconds))", "score": 0}
{"id": "eqasc_validation_1054", "prediction": "all x.(Watch(x) -> UsedForMeasuringSeconds(x))", "score": 0}
{"id": "eqasc_validation_1054", "prediction": "all x y.((Watch(x) & OperatesForMeasuringSeconds(x)) -> MeasuresSeconds(x,y))", "score": 0}
{"id": "eqasc_validation_1054", "prediction": "all x.(Watch(x) -> MeasuresSeconds(x))", "score": 0}
{"id": "eqasc_validation_1054", "prediction": "all x y z.((Watch(x) & Seconds(y) & Seconds(z)) -> Measures(x,y,z))", "score": 0}
{"id": "eqasc_validation_1054", "prediction": "all x y.((Watch(x) & Second(y)) -> MeasureSeconds(x,y))", "score": 0}
{"id": "eqasc_validation_1054", "prediction": "all x y.((Wave(x) & Watch(y)) -> UsedForMeasuringSeconds(x,y))", "score": 0}
{"id": "eqasc_validation_1054", "prediction": "all x y.((Watch(x) & SecondOfSpecies(y)) -> Measures(x,y))", "score": 0}
{"id": "eqasc_validation_1054", "prediction": "all x y.((Watch(x) & Second(y)) -> Measures(x,y))", "score": 0}
{"id": "eqasc_validation_1054", "prediction": "all x.(Watch(x) -> UsedForMeasuringSeconds(x,seconds))", "score": 0}
{"id": "eqasc_validation_1055", "prediction": "all x.(Rolex(x) -> CheapGoldWatch(x))", "score": 0}
{"id": "eqasc_validation_1055", "prediction": "all x.(Rolex(x) -> ModernGoldWatch(x))", "score": 0}
{"id": "eqasc_validation_1055", "prediction": "all x.(Word(x) -> Rolex(x))", "score": 0}
{"id": "eqasc_validation_1055", "prediction": "all x.(Rolex(x) -> (LowGoldWatch(x) & Tomorrow(x)))", "score": 0}
{"id": "eqasc_validation_1055", "prediction": "all x.((Rolex(x) & WorstToday(x)) -> CheapGoldWatch(x))", "score": 0}
{"id": "eqasc_validation_1055", "prediction": "all x.((Rolex(x) & Tomorrow'sLimousGoldWatch(x)) -> IsTodays(x))", "score": 0}
{"id": "eqasc_validation_1055", "prediction": "all x.(Relex(x) -> CheapGoldWatch(x))", "score": 0}
{"id": "eqasc_validation_1055", "prediction": "all x.(Rolex(x) -> TomorrowsLiquidGoldWatch(x))", "score": 0}
{"id": "eqasc_validation_1055", "prediction": "all x.((Rolex(x) & Rolex(x)) -> TomorrowsBuyGoldWatch(x))", "score": 0}
{"id": "eqasc_validation_1055", "prediction": "all x.((Rolex(x) & Todays(x)) -> TomorrowsCheapGoldWatch(x))", "score": 0}
{"id": "eqasc_validation_1055", "prediction": "all x.((Rolex(x) & TomorrowsLiquidGoldWatch(x)) -> TodayRolex(x))", "score": 0}
{"id": "eqasc_validation_1055", "prediction": "all x.((Castlex(x) & Todays(x)) -> CheapGoldWatch(x))", "score": 0}
{"id": "eqasc_validation_1055", "prediction": "(LastMinute(Rolex) -> CheapGoldWatch(Rolex))", "score": 0}
{"id": "eqasc_validation_1055", "prediction": "all x.((Rolex(x) & TomorrowsLiquidGoldWatch(x)) -> WormWatch(x))", "score": 0}
{"id": "eqasc_validation_1055", "prediction": "the cheapgoldwatch(Rolex) -> Todays(Rolex))", "score": -1}
{"id": "eqasc_validation_1055", "prediction": "all x.((Rolex(x) & -CheapGoldWatch(x)) -> Tomorrows(x))", "score": 0}
{"id": "eqasc_validation_1056", "prediction": "all x.(Rolex(x) -> MeasuresTimeWithRolex(x))", "score": 0}
{"id": "eqasc_validation_1056", "prediction": "all x y.((Rolex(x) & Time(y)) -> UsedForMeasuring(x,y))", "score": 0}
{"id": "eqasc_validation_1056", "prediction": "all x.(Rolex(x) -> MeasuresTime(x))", "score": 0}
{"id": "eqasc_validation_1056", "prediction": "all x.(Rolex(x) -> UsedForMeasuringTime(x))", "score": 0}
{"id": "eqasc_validation_1056", "prediction": "all x y.((Rolex(x) & MeasuresTime(y)) -> UsedFor(x,y))", "score": 0}
{"id": "eqasc_validation_1056", "prediction": "all x y.((Rolex(x) & Rolex(y)) -> UsedForMeasuringTime(x,y))", "score": 0}
{"id": "eqasc_validation_1056", "prediction": "all x y.((Rolex(x) & Time(y)). AppliedFor(x,y)) -> MeasuresTime(x,y))", "score": -1}
{"id": "eqasc_validation_1056", "prediction": "all x y z w.((Rolex(x) & Time(y) & Time(z)) -> UsedForMeasuring(x,y,z))", "score": 0}
{"id": "eqasc_validation_1056", "prediction": "all x.(Rolex(x) -> MeasuredTime(x))", "score": 0}
{"id": "eqasc_validation_1056", "prediction": "all x.((Rolex(x) & MeasuresTime(x)) -> UsedFor(x,DiagonalTime(x))", "score": -1}
{"id": "eqasc_validation_1057", "prediction": "all x y.((Time(x) & Hours(y) & Seconds(z)) -> Minutes(x))", "score": 0}
{"id": "eqasc_validation_1057", "prediction": "all x.(Time(x) -> (Measured(x, hours) & Measured(x,seconds) & Measured(x,minutes)))", "score": 0}
{"id": "eqasc_validation_1057", "prediction": "all x.(Time(x) -> (Met(x) & Hours(x) & Seconds(x) & Minutes(x)))", "score": 0}
{"id": "eqasc_validation_1057", "prediction": "all x.(Time(x) -> (MeasuresHours(x) & MeasuresSeconds(x) & MeasuresMinutes(x)))", "score": 0}
{"id": "eqasc_validation_1057", "prediction": "all x.(Time(x) -> (Metaphors(x,hours) | Messaged(x,seconds) | Messaged(x,minutes)))", "score": 0}
{"id": "eqasc_validation_1057", "prediction": "all x y z.((Time(x) & Hours(y) & Seconds(z) & Minutes(z)) -> Measured(x))", "score": 0}
{"id": "eqasc_validation_1057", "prediction": "all x.(Time(x) -> (Method(x,hours) & Measured(x,seconds) & Measured(x,minutes)))", "score": 0}
{"id": "eqasc_validation_1057", "prediction": "all x.(Time(x) -> (MeasuredUsing(x,hours) & MeasurableUsing(x,seconds) & MeasurableUsing(x,minutes)))", "score": 0}
{"id": "eqasc_validation_1057", "prediction": "all x.((Time(x) & Measured(x,Hours,Seconds,Minutes)) -> Measured(x,Minutes))", "score": 0}
{"id": "eqasc_validation_1057", "prediction": "all x.(Time(x) -> exists y.(Hours(y) | Seconds(y) | Minutes(y)) & Measured(x,y)))", "score": -1}
{"id": "eqasc_validation_1057", "prediction": "all x y z.((Time(x) & Hour(y) & Second(z)) -> Measures(x,y,z))", "score": 0}
{"id": "eqasc_validation_1057", "prediction": "all x.(Time(x) -> (MetalsUse(x,hours) & Measures(x,seconds) & Measures(x,minutes)))", "score": 0}
{"id": "eqasc_validation_1057", "prediction": "all x y.((Time(x) & Hour(y) & Second(y) & Minute(y)) -> MeasuredUsing(x,y))", "score": 0}
{"id": "eqasc_validation_1057", "prediction": "all x.(Time(x) -> (MetacutedWith(x,hours) | MeasuredUsing(x,seconds) | MeasuredUsing(x,minutes)))", "score": 0}
{"id": "eqasc_validation_1057", "prediction": "all x.(Time(x) -> (MeasuredUsing(x,hours) & MeasurenUsing(x,seconds) & MeasuredUsing(x,minutes)))", "score": 0}
{"id": "eqasc_validation_1057", "prediction": "all x.(Time(x) -> (MeasuredUsing(x,hours) | MeasuredUsing(x,seconds) | MeasuredUsing(x,minutes)))", "score": 0}
{"id": "eqasc_validation_1058", "prediction": "all x.(Watch(x) -> (MeasuresHours(x) & MeasuresSeconds(x) & MeasuresMinutes(x)))", "score": 0}
{"id": "eqasc_validation_1058", "prediction": "all x.(Watch(x) -> (Measures(x,hours,seconds) & Measures(x,minutes)))", "score": 0}
{"id": "eqasc_validation_1058", "prediction": "all x.(Watch(x) -> (MeasuresHours(x) | MeasuresSeconds(x) | MeasuresMinutes(x)))", "score": 0}
{"id": "eqasc_validation_1058", "prediction": "all x.(Watch(x) -> Measures(x,hours) & Measures(x,seconds) & Measures(x,minutes))", "score": 0}
{"id": "eqasc_validation_1058", "prediction": "all x.(Watch(x) -> (MeasuresHours(x) & MeasuresSeasons(x) & MeasuresMinutes(x)))", "score": 0}
{"id": "eqasc_validation_1059", "prediction": "all x.(TimeManagement(x) -> UsesHoursEfficiently(x,Day))", "score": 0}
{"id": "eqasc_validation_1059", "prediction": "all x.(TimeManagement(x) -> (Uses(x,hours) & Efficient(x)))", "score": 0}
{"id": "eqasc_validation_1059", "prediction": "all x.(TimeManagement(x) -> (ScientificUseOfHours(x) & EfficientUsage(x)))", "score": 0}
{"id": "eqasc_validation_1059", "prediction": "all x.(TimeManagement(x) -> UsesEfficientlyInDay(x))", "score": 0}
{"id": "eqasc_validation_1059", "prediction": "all x.(TimeManagement(x) -> (UsesInHours(x) & MoreEfficientUsage(x)))", "score": 0}
{"id": "eqasc_validation_1059", "prediction": "all x.(TimeManagement(x) -> (UsesInHoursEfficiently(x) & Day(x)))", "score": 0}
{"id": "eqasc_validation_1059", "prediction": "all x.(TimeManagement(x) -> (UsesHoursInDay(x) & MoreEfficient(x)))", "score": 0}
{"id": "eqasc_validation_1059", "prediction": "all x y.((TimeManagement(x) & Day(y)) -> (Uses(x,y) & EfficiencyUse(x,y)))", "score": 0}
{"id": "eqasc_validation_1059", "prediction": "all x.(TimeManagement(x) -> UsesHoursWithEfficientUse(x))", "score": 0}
{"id": "eqasc_validation_1059", "prediction": "all x.(TimeManagement(x) -> (ScientificScientificScientificProducts(x) & UsedEfficiently(x)))", "score": 0}
{"id": "eqasc_validation_1059", "prediction": "all x.(TimeManagement(x) -> (UsesHeightsEfficiently(x) & Efficiently(x)))", "score": 0}
{"id": "eqasc_validation_1059", "prediction": "all x.(TimeManagement(x) -> (ScientificResearch(x) & UsesHoursEfficiently(x)))", "score": 0}
{"id": "eqasc_validation_1059", "prediction": "all x y.((TimeManagement(x) & Hour(y) & Day(y)) -> UsesEfficiently(x,y))", "score": 0}
{"id": "eqasc_validation_1059", "prediction": "all x.(TimeManagement(x) -> (UseHoursEfficiently(x) & Efficiently(x)))", "score": 0}
{"id": "eqasc_validation_1059", "prediction": "all x y.((Scientific(x) & Hours(y) & Day(z)) -> UsesEfficiently(x,y,z))", "score": 0}
{"id": "eqasc_validation_1059", "prediction": "all x.(TimeManagement(x) -> UsesHoursEfficiently(x))", "score": 0}
{"id": "eqasc_validation_1060", "prediction": "all x.(Watch(x) -> NeededForScientificResearch(x))", "score": 0}
{"id": "eqasc_validation_1060", "prediction": "all x y.((Watch(x) & ScientificResearch(y) & NeededFor(x,y)) -> Helps(x,y))", "score": 0}
{"id": "eqasc_validation_1060", "prediction": "all x y.((Watch(x) & ScientificResearch(y)) -> NeededFor(x,y))", "score": 0}
{"id": "eqasc_validation_1060", "prediction": "all x y.((Watch(x) & Scientist(y)) -> NeededForResearch(x,y))", "score": 0}
{"id": "eqasc_validation_1060", "prediction": "all x.(Wall(x) -> NeededForScientificResearch(x))", "score": 0}
{"id": "eqasc_validation_1060", "prediction": "all x.(Watch(x) -> NecessaryForScientificResearch(x))", "score": 0}
{"id": "eqasc_validation_1060", "prediction": "all x y z.((Watch(x) & ScientificResearch(y) & ScientificResearch(z)) -> NeededFor(x,y,z))", "score": 0}
{"id": "eqasc_validation_1060", "prediction": "all x.(ScientificResearch(x) -> (NeedsWatch(x) & ForScientificResearch(x)))", "score": 0}
{"id": "eqasc_validation_1060", "prediction": "all x y.((Watch(x) & ScientificResearch(y)) -> NeedsFor(x,y))", "score": 0}
{"id": "eqasc_validation_1060", "prediction": "all x y z.((Watch(x) & ScientificResearch(y) & ScientificResearch(z)) -> Necessary(x,y,z))", "score": 0}
{"id": "eqasc_validation_1060", "prediction": "all x.((Watch(x) & ScientificResearch(x)) -> NecessaryFor(x,scientificResearch))", "score": 0}
{"id": "eqasc_validation_1060", "prediction": "all x.(WATCH(x) -> ScientificResearchNeedsForResearch(x))", "score": 0}
{"id": "eqasc_validation_1060", "prediction": "all x.(Wizard(x) -> NeededForScientificResearch(x))", "score": 0}
{"id": "eqasc_validation_1061", "prediction": "all x.(Time(x) -> MeasuredInMinutes(x))", "score": 0}
{"id": "eqasc_validation_1061", "prediction": "all x y.((Time(x) & Minute(y)) -> MeasuredIn(x,y))", "score": 0}
{"id": "eqasc_validation_1061", "prediction": "all x y.((Time(x) & Minute(y)) -> Measured(x,y))", "score": 0}
{"id": "eqasc_validation_1061", "prediction": "all x.(Time(x) -> MeasuringInMinutes(x))", "score": 0}
{"id": "eqasc_validation_1061", "prediction": "all x.(Time(x) -> MeasurableInMinutes(x))", "score": 0}
{"id": "eqasc_validation_1061", "prediction": "all x.(Time(x) -> MeasurementInMinutes(x))", "score": 0}
{"id": "eqasc_validation_1062", "prediction": "all x.(Watch(x) -> MeasuresMinutes(x))", "score": 0}
{"id": "eqasc_validation_1062", "prediction": "all x.(Watch(x) -> UsedForMeasuringMinutes(x))", "score": 0}
{"id": "eqasc_validation_1062", "prediction": "all x.(Wall(x) -> MeasuresMinutes(x))", "score": 0}
{"id": "eqasc_validation_1062", "prediction": "all x.(Watch(x) -> Measures(x,minutes))", "score": 0}
{"id": "eqasc_validation_1062", "prediction": "all x y.((Watch(x) & Minutes(y)) -> Measures(x,y))", "score": 0}
{"id": "eqasc_validation_1062", "prediction": "all x.(Watch(x) -> PostedInMinutes(x))", "score": 0}
{"id": "eqasc_validation_1062", "prediction": "all x.(Watch(x) -> MeasureMinutes(x))", "score": 0}
{"id": "eqasc_validation_1063", "prediction": "all x.(Watch(x) -> MustKeepTrackOfSeconds(x))", "score": 0}
{"id": "eqasc_validation_1063", "prediction": "all x.(Watch(x) -> KeepsVoiceOfSeconds(x))", "score": 0}
{"id": "eqasc_validation_1063", "prediction": "all x.(Watch(x) -> KeepSecondsToTrack(x))", "score": 0}
{"id": "eqasc_validation_1063", "prediction": "all x.(Watch(x) -> KeepsTrackOfSeconds(x))", "score": 0}
{"id": "eqasc_validation_1063", "prediction": "all x.(Watch(x) -> TracksSeconds(x))", "score": 0}
{"id": "eqasc_validation_1063", "prediction": "all x.(Watch(x) -> KeepsSecondsTrack(x))", "score": 0}
{"id": "eqasc_validation_1063", "prediction": "all x.(Watch(x) -> KeepSeconds(x))", "score": 0}
{"id": "eqasc_validation_1063", "prediction": "all x.(Watch(x) -> MustKeepSeconds(x))", "score": 0}
{"id": "eqasc_validation_1063", "prediction": "all x.(Watch(x) -> -TogetherSeconds(x))", "score": 0}
{"id": "eqasc_validation_1064", "prediction": "all x y z.((Clock(x) & Hand(y) & Time(z)) -> Watch(x,y,z))", "score": 0}
{"id": "eqasc_validation_1064", "prediction": "all x y.((TickingHandsClock(x) & Time(y)) -> Sees(x,y))", "score": 0}
{"id": "eqasc_validation_1064", "prediction": "Probably the simplest way to seeTime is to WatchTickingHandsOfClock(x))", "score": -1}
{"id": "eqasc_validation_1064", "prediction": "all x y.((Clock(x) & TickingHands(y)) -> MostEasyToSeeTime(x))", "score": 0}
{"id": "eqasc_validation_1064", "prediction": "all x.(TickingHandsOfClock(x) -> ObviouslyEasiestToWatchToTime(x))", "score": 0}
{"id": "eqasc_validation_1064", "prediction": "all x.((TickingHands(x) & Clock(x)) -> ProbablyEasiestScanToTime(x))", "score": 0}
{"id": "eqasc_validation_1064", "prediction": "all x y.((TickingHands(x) & Clock(y)) -> SimplestWearToSelectTime(x))", "score": 0}
{"id": "eqasc_validation_1064", "prediction": "all x y.((TickingHandsOfClock(x) & SimplestTak(x)) -> SeeTime(x))", "score": 0}
{"id": "eqasc_validation_1064", "prediction": "all x y z.((EasiestWaitToSeeTime(x) & Clock(y) & TickingHands(z)) -> Watch(x,y,z))", "score": 0}
{"id": "eqasc_validation_1064", "prediction": "all x.(ClockClock(x) & WatchTickingHands(x)) -> EasyestToSeenTime(x))", "score": -1}
{"id": "eqasc_validation_1064", "prediction": "all x.((At-LeastEasy(x) & WatchTickingHands(x)) -> TimeTapping(x))", "score": -1}
{"id": "eqasc_validation_1064", "prediction": "all x.((TickingHands(x) & Clock(x)) -> Eye-Opening(x))", "score": -1}
{"id": "eqasc_validation_1064", "prediction": "all x.(EasiestSharingTime(x) -> WatchTickingHandsOfClock(x))", "score": 0}
{"id": "eqasc_validation_1064", "prediction": "all x y.((Clock(x) & TickingHands(y)) -> SimplestClockView(x,y))", "score": 0}
{"id": "eqasc_validation_1064", "prediction": "all x y z.((Clock(x) & InClock(y) & Time(z) & WatchTickingHands(x)) -> Reads(x,y,z))", "score": 0}
{"id": "eqasc_validation_1064", "prediction": "all x y.((Clock(x) & Time(y) & WatchTickingHands(x,y)) -> EasyToSee(x,y))", "score": 0}
{"id": "eqasc_validation_1065", "prediction": "all x.(TickingHands(x) -> UsedForMeasuringTime(x))", "score": 0}
{"id": "eqasc_validation_1065", "prediction": "all x.(TickingHand(x) -> UsedForMeasuringTime(x))", "score": 0}
{"id": "eqasc_validation_1065", "prediction": "all x.(TickingHands(x) -> MeasuresTime(x))", "score": 0}
{"id": "eqasc_validation_1065", "prediction": "all x.(TickingHand(x) -> MeasuresTime(x))", "score": 0}
{"id": "eqasc_validation_1065", "prediction": "all x.(TickingHand(x) -> UsedForMeasurement(x))", "score": 0}
{"id": "eqasc_validation_1065", "prediction": "all x y.((TickingHand(x) & Time(y)) -> UsedForMeasuring(x,y))", "score": 0}
{"id": "eqasc_validation_1066", "prediction": "all x.(Time(x) -> SpeedOfMovements(x))", "score": 0}
{"id": "eqasc_validation_1066", "prediction": "all x.(Time(x) -> (SpeedOfMovements(x) & SpeedOfMovementFacility(x)))", "score": 0}
{"id": "eqasc_validation_1066", "prediction": "all x.(Time(x) -> (SpeedOfMovements(x) & AssignsSpeedOfMovements(x)))", "score": 0}
{"id": "eqasc_validation_1066", "prediction": "all x y.((Time(x) & Movement(y)) -> SpeedOfMovements(x,y))", "score": 0}
{"id": "eqasc_validation_1066", "prediction": "all x y.((Time(x) & MovementSpeed(y)) -> RefersTo(x,y))", "score": 0}
{"id": "eqasc_validation_1066", "prediction": "all x.(Time(x) -> TempoOfMovements(x))", "score": 0}
{"id": "eqasc_validation_1066", "prediction": "all x y z.((Time(x) & Movement(z)) -> SpeedOfMovements(x,y,z))", "score": 0}
{"id": "eqasc_validation_1067", "prediction": "all x.(Watch(x) -> MeasuresSpeedOfMovements(x))", "score": 0}
{"id": "eqasc_validation_1067", "prediction": "all x.(Watch(x) -> MeasureStopMovements(x))", "score": 0}
{"id": "eqasc_validation_1067", "prediction": "all x.(Watch(x) -> (MeasuresSpeedOfMovements(x)))", "score": 0}
{"id": "eqasc_validation_1067", "prediction": "all x.(Watch(x) -> MeasuresSpedicityOfMovements(x))", "score": 0}
{"id": "eqasc_validation_1068", "prediction": "all x.((Surface(x) & -Sterilized(x)) -> CoveredWithBacteria(x))", "score": 0}
{"id": "eqasc_validation_1068", "prediction": "all x.((Surface(x) & -Steriled(x)) -> CoveredWithBacteria(x))", "score": 0}
{"id": "eqasc_validation_1068", "prediction": "all x.((Surface(x) & -Sterilized(x)) -> ProbabilityToBeCoveredWithBacteria(x))", "score": 0}
{"id": "eqasc_validation_1068", "prediction": "all x.((Surface(x) & -St sterilizedIn(x)) -> LikelyCoveredWithBacteria(x))", "score": -1}
{"id": "eqasc_validation_1068", "prediction": "all x.((Surface(x) & -Sterilized(x)) -> LikelyCoveredWithBacteria(x))", "score": 0}
{"id": "eqasc_validation_1068", "prediction": "all x.((Surface(x) & -Stérilized(x)) -> CoveredWithBacteria(x))", "score": 0}
{"id": "eqasc_validation_1068", "prediction": "all x.((Surface(x) & -Stormized(x)) -> LikelyCoveredWithBacteria(x))", "score": 0}
{"id": "eqasc_validation_1068", "prediction": "all x.((Surface(x) & -Sterilized(x)) -> PlanktonCoveredWithBacteria(x))", "score": 0}
{"id": "eqasc_validation_1068", "prediction": "all x.((Surface(x) & -Sterilized(x)) -> ExpectedToBeCovertWithBacteria(x))", "score": 0}
{"id": "eqasc_validation_1069", "prediction": "all x.((Bacteria(x) | Viral(x)) -> Microbe(x))", "score": 0}
{"id": "eqasc_validation_1069", "prediction": "all x y.((Bacteria(x) & Viral(y)) -> (Microbe(x) & Microbe(x)))", "score": 0}
{"id": "eqasc_validation_1069", "prediction": "(Microbe(x) -> (Bacteria(x) | Viral(x)))", "score": 0}
{"id": "eqasc_validation_1069", "prediction": "all x.((Bacteria(x) | Virus(x)) -> Microbe(x))", "score": 0}
{"id": "eqasc_validation_1069", "prediction": "all x y.((Bacteria(x) & Viral(y)) -> Microbe(x))", "score": 0}
{"id": "eqasc_validation_1069", "prediction": "all x.(Bacteria(x) | Viral(x)) -> Microbe(x))", "score": -1}
{"id": "eqasc_validation_1069", "prediction": "all x.(Medicine(x) -> (Bacteria(x) | Microbe(x)))", "score": 0}
{"id": "eqasc_validation_1069", "prediction": "all x.((Bacteria(x) & Viral(x)) -> Microbe(x))", "score": 0}
{"id": "eqasc_validation_1070", "prediction": "all x.((Surface(x) & -Sterilized(x)) -> LikelyCoveredWithLiveMicrobes(x))", "score": 0}
{"id": "eqasc_validation_1070", "prediction": "all x.((Surface(x) & -Sterilized(x)) -> likelyToBeChangedWithLiveMicrobes(x))", "score": 0}
{"id": "eqasc_validation_1070", "prediction": "all x.((Surface(x) & -Sterilized(x)) -> CoveredWithLiveMicrobes(x))", "score": 0}
{"id": "eqasc_validation_1070", "prediction": "all x.((Surface(x) & -Steering(x)) -> CoveredWithLiveMicrobes(x))", "score": 0}
{"id": "eqasc_validation_1070", "prediction": "all x.((Surface(x) & -Steriled(x)) -> CoveredWithLiveMicrobes(x))", "score": 0}
{"id": "eqasc_validation_1070", "prediction": "all x.((Surface(x) & -Stormized(x)) -> CoveredWithLiveMicrobes(x))", "score": 0}
{"id": "eqasc_validation_1070", "prediction": "all x.((Surface(x) & -Sterilized(x)) -> likelyCovertWithLiveMicrobes(x))", "score": 0}
{"id": "eqasc_validation_1070", "prediction": "all x.((Surface(x) & -Sterilized(x)) -> LikelyConsumedWithLiveMicrobes(x))", "score": 0}
{"id": "eqasc_validation_1070", "prediction": "all x.((Surface(x) & -Ststerilized(x)) -> CoveredWithLivingMicrobes(x))", "score": 0}
{"id": "eqasc_validation_1071", "prediction": "all x y z.((Bacteria(x) & Food(y) & Bacteria(z)) -> (Eats(x,y) & Digests(z,y)))", "score": 0}
{"id": "eqasc_validation_1071", "prediction": "all x y.((Bacteria(x) & Bacteria(y)) -> (Eats(x,y) & DigestsFoods(y)))", "score": 0}
{"id": "eqasc_validation_1071", "prediction": "all x y.((Bacteria(x) & Bacteria(y)) -> (Eats(x) & DigestsFoods(y)))", "score": 0}
{"id": "eqasc_validation_1071", "prediction": "all x y.((Bacteria(x) & Bacteria(y)) -> (Eat(x) & Digest(y)))", "score": 0}
{"id": "eqasc_validation_1071", "prediction": "all x.(Bacteria(x) -> (Eats(x) & DigestsIn(x)))", "score": 0}
{"id": "eqasc_validation_1071", "prediction": "(all x.(Bacteria(x) -> Eats(x)) & all y.(Bacteria(y) -> DigestsFoods(y))))", "score": -1}
{"id": "eqasc_validation_1071", "prediction": "(all x.(Bacteria(x) -> Eat(x)) & all y.(Bacteria(y) -> Digest(y))))", "score": -1}
{"id": "eqasc_validation_1071", "prediction": "all x y.((Bacteria(x) & Bacteria(y)) -> (Eats(x) & Digests(y)))", "score": 0}
{"id": "eqasc_validation_1071", "prediction": "all x.(Bacteria(x) -> (Eat(x) & Digest(x)))", "score": 0}
{"id": "eqasc_validation_1071", "prediction": "all x y.((Bacteria(x) & Bacteria(y)) -> (Eats(x,y) & Digests(y,z)))", "score": 0}
{"id": "eqasc_validation_1071", "prediction": "all x y.((Bacteria(x) & Bacteria(y)) -> (Eats(x,y) & DigestsFoods(y,x)))", "score": 0}
{"id": "eqasc_validation_1071", "prediction": "all x.(Bacteria(x) -> (Eats(x,y) & Bacteria(x,z) & DigestsFoods(x)))", "score": 0}
{"id": "eqasc_validation_1072", "prediction": "all x.((Surface(x) & -Sterilized(x)) -> CoveredWith(x,eats,digests,eats))", "score": 0}
{"id": "eqasc_validation_1072", "prediction": "all x.((Surface(x) & -Sterilized(x)) -> CoveredWith(x,y) & EatsAndDigestsFoods(y))", "score": 0}
{"id": "eqasc_validation_1072", "prediction": "all x.((Surface(x) & -Sterilized(x)) -> CoveredWith(x,eats,digests,foods))", "score": 0}
{"id": "eqasc_validation_1072", "prediction": "all x.((Surface(x) & -Medicated(x)) -> (Eats(x) & Digests(x)))", "score": 0}
{"id": "eqasc_validation_1072", "prediction": "all x.(UnsterilizedSurface(x) -> CoveredWithSomething(x))", "score": 0}
{"id": "eqasc_validation_1072", "prediction": "all x.((Surface(x) & -Sterilized(x)) -> CoveredWith(x\" & EatsFood(x) & DigestsFood(x)))", "score": -1}
{"id": "eqasc_validation_1072", "prediction": "all x y.((Surface(x) & -Sterilized(x)) -> (EatsAndDigestsFoods(x) & LikelyCovered(x)))", "score": 0}
{"id": "eqasc_validation_1072", "prediction": "all x.((Surface(x) & -St sterilized(x)) -> LikelyCoveredWith(x))", "score": -1}
{"id": "eqasc_validation_1072", "prediction": "all x.((Surface(x) & -Sterilized(x)) -> (CoveredWithMathematicalSurface(x) & EatsAndDigestsFoods(x)))", "score": 0}
{"id": "eqasc_validation_1072", "prediction": "all x.((Surface(x) & -Sterilized(x)) -> CoveredWith(x))", "score": 0}
{"id": "eqasc_validation_1072", "prediction": "all x.((Surface(x) & -Steriled(x)) -> CoveredWithPotentiallyDigestsAndEatsFoods(x))", "score": 0}
{"id": "eqasc_validation_1072", "prediction": "all x.((Surface(x) & -Sterilized(x)) -> CoveredWithMeal(x) & DigestsFoods(x))", "score": 0}
{"id": "eqasc_validation_1072", "prediction": "all x.((Surface(x) & -Sterilized(x)) -> CoveredWith(x,EatsAndDigestsFoods(x))", "score": -1}
{"id": "eqasc_validation_1072", "prediction": "all x.((Surface(x) & -Sterilized(x)) -> CoveredWith(x,EatsEatsOdifferentDietsFoods(x))", "score": -1}
{"id": "eqasc_validation_1072", "prediction": "all x.((Surface(x) & -St sterilized(x)) -> CoveredWithAbsorbentClearingStructures(x))", "score": -1}
{"id": "eqasc_validation_1073", "prediction": "all x y.((Bacteria(x) & Viral(y) & People(z) & MakesSick(x,z)) -> PassedOnHands(x,y))", "score": 0}
{"id": "eqasc_validation_1073", "prediction": "all x y z.((Bacteria(x) & Viral(y) & Person(y) & MakesSick(y,z)) -> PassedOnHands(z))", "score": 0}
{"id": "eqasc_validation_1073", "prediction": "all x.((Bacteria(x) & Viruses(x) & MakesPersonSick(x)) -> CanBePassedOnHands(x))", "score": 0}
{"id": "eqasc_validation_1073", "prediction": "all x.((Bacteria(x) & Virus(x) & MakesPeopleSick(x)) -> PassableOnHands(x))", "score": 0}
{"id": "eqasc_validation_1073", "prediction": "all x y.((Bacteria(x) & (Virovirus(y) & MakesPeopleSick(y))) -> PassedOnHands(x,y))", "score": 0}
{"id": "eqasc_validation_1073", "prediction": "all x.((Bacteria(x) | (Viruses(x) & MakesPeopleSick(x))) -> PassableOnHand(x))", "score": 0}
{"id": "eqasc_validation_1073", "prediction": "all x.((Bacteria(x) & Virals(x) & MakesPeopleSick(x)) -> PassedOnHands(x))", "score": 0}
{"id": "eqasc_validation_1073", "prediction": "all x.((Bacteria(x) & HIV(x) & MakesSick(x)) -> PassesOnHands(x))", "score": 0}
{"id": "eqasc_validation_1073", "prediction": "all x.((Bacteria(x) & Viruses(x) & MakesPeopleSick(x)) -> Passable(x))", "score": 0}
{"id": "eqasc_validation_1073", "prediction": "all x y.((Bacteria(x) & Virus(y) & MakesPeopleSick(x)) -> PassedOnHands(x,y))", "score": 0}
{"id": "eqasc_validation_1073", "prediction": "all x.((Bacteria(x) & Viruses(x) & MakesPeopleSick(x)) -> PassedOnHands(x))", "score": 0}
{"id": "eqasc_validation_1073", "prediction": "all x.((Bacteria(x) & Viral(x) & MakesPeopleSick(x)) -> PassedOnHands(x))", "score": 0}
{"id": "eqasc_validation_1073", "prediction": "all x.((BacteriaAndViruses(x) & MakesPeopleSick(x)) -> PassedOnHands(x))", "score": 0}
{"id": "eqasc_validation_1073", "prediction": "all x.((Bacteria(x) & Viral(x) & ManagsSick(x)) -> CanBePassedOnHands(x))", "score": 0}
{"id": "eqasc_validation_1073", "prediction": "all x.((Bacteria(x) & Virals(x) & MakesPersonSick(x)) -> CanBePassedOnHands(x))", "score": 0}
{"id": "eqasc_validation_1073", "prediction": "all x y.((Bacteria(x) & Virals(y) & PeopleSick(x)) -> PassableOnHands(x,y))", "score": 0}
{"id": "eqasc_validation_1074", "prediction": "all x.((Surface(x) & -Sterilized(x)) -> CanMakePeopleSick(x))", "score": 0}
{"id": "eqasc_validation_1074", "prediction": "all x.((Surface(x) & NotSterilized(x)) -> MakesPersonSick(x))", "score": 0}
{"id": "eqasc_validation_1074", "prediction": "all x.((Surface(x) & -Sterilized(x)) -> MakesSick(x))", "score": 0}
{"id": "eqasc_validation_1074", "prediction": "all x.((Surface(x) & -Sterilized(x)) -> MakesPeopleSick(x))", "score": 0}
{"id": "eqasc_validation_1074", "prediction": "all x.((Surface(x) & -Stérilized(x)) -> CanMakePeopleSick(x))", "score": 0}
{"id": "eqasc_validation_1074", "prediction": "all x.((Surface(x) & -Sterilized(x)) -> MakesPersonSick(x))", "score": 0}
{"id": "eqasc_validation_1074", "prediction": "all x.((surface(x) & -Sterilized(x)) -> MakesPersonSick(x))", "score": 0}
{"id": "eqasc_validation_1074", "prediction": "all x.((Surface(x) & -SteeringEdged(x)) -> MakesPersonSick(x))", "score": 0}
{"id": "eqasc_validation_1074", "prediction": "all x y.((Surface(x) & -Sterilized(x)) -> MakesPeopleSick(x))", "score": 0}
{"id": "eqasc_validation_1074", "prediction": "all x y.((Surface(x) & -Sterilized(y)) -> MakesPersonSick(x))", "score": 0}
{"id": "eqasc_validation_1075", "prediction": "all x.(Bacteria(x) -> SingleCellMicroorganism(x))", "score": 0}
{"id": "eqasc_validation_1075", "prediction": "all x y.((Bacteria(x) & SingleCellMicroorganism(y)) -> Microorganism(x))", "score": 0}
{"id": "eqasc_validation_1076", "prediction": "all x.((Surface(x) & -Steriled(x)) -> HighlyCoveredWithSingleCellMicroorganisms(x))", "score": 0}
{"id": "eqasc_validation_1076", "prediction": "all x.((Surface(x) & -Steriled(x)) -> CoveredWithSingleCellMicroorganisms(x))", "score": 0}
{"id": "eqasc_validation_1076", "prediction": "all x.((Surface(x) & -Sterilized(x)) -> CoveredWithSingleCellMicroorganisms(x))", "score": 0}
{"id": "eqasc_validation_1076", "prediction": "all x.((Surface(x) & -TracedWithSingleCellMicroorganisms(x)) -> CoveredWithSingleCellMicroorganisms(x))", "score": 0}
{"id": "eqasc_validation_1076", "prediction": "all x.((Surface(x) & -Sterilized(x)) -> ProbablyCoveredWithSingleCellMicroorganisms(x))", "score": 0}
{"id": "eqasc_validation_1076", "prediction": "all x.((Surface(x) & -Sterilized(x)) -> HighlyCoveredWithSingleCellMicroorganisms(x))", "score": 0}
{"id": "eqasc_validation_1076", "prediction": "all x.((Surface(x) & -St sterilized(x)) -> CoveredWithSingleCellMicroorganisms(x))", "score": -1}
{"id": "eqasc_validation_1076", "prediction": "all x.((Surface(x) & -Structurized(x)) -> CoveredWithSingleCellMicroorganisms(x))", "score": 0}
{"id": "eqasc_validation_1077", "prediction": "all x.(Surface(x) -> (SteamedClean(x) & Sterilized(x)))", "score": 0}
{"id": "eqasc_validation_1077", "prediction": "all x.(Surface(x) -> (Steamed(x) & Sterilized(x)))", "score": 0}
{"id": "eqasc_validation_1077", "prediction": "all x.(Surface(x) -> (SteamedCleaned(x) & Sterilized(x)))", "score": 0}
{"id": "eqasc_validation_1077", "prediction": "all x.(Surface(x) -> (SteamedCleaped(x) & Sterilized(x)))", "score": 0}
{"id": "eqasc_validation_1077", "prediction": "all x.(Surface(x) -> (SteamedCleared(x) & Sterilized(x)))", "score": 0}
{"id": "eqasc_validation_1077", "prediction": "all x.(Surface(x) -> (SteamedCleared(x) & Floats(x) & Sterilized(x)))", "score": 0}
{"id": "eqasc_validation_1077", "prediction": "all x.(Surface(x) -> (SteamedCleaning(x) & Sterilized(x)))", "score": 0}
{"id": "eqasc_validation_1077", "prediction": "all x.(Surface(x) -> (CanBeSteamed(x) & CanBeSterilized(x)))", "score": 0}
{"id": "eqasc_validation_1077", "prediction": "all x.(Surface(x) -> (SteamedCleased(x) & Sterilized(x)))", "score": 0}
{"id": "eqasc_validation_1077", "prediction": "all x.(Surface(x) -> (WaysRicked(x) & CanBeSterilized(x)))", "score": 0}
{"id": "eqasc_validation_1078", "prediction": "all x.((Surface(x) & -Cleaned(x)) -> CoveredWithBacteria(x))", "score": 0}
{"id": "eqasc_validation_1078", "prediction": "all x.((Surface(x) & -Cleared(x)) -> CoveredWithBacteria(x))", "score": 0}
{"id": "eqasc_validation_1078", "prediction": "all x.((Surface(x) & -Cleaned(x)) -> LikelyCoveredWithBacteria(x))", "score": 0}
{"id": "eqasc_validation_1078", "prediction": "all x.((Surface(x) & -Cleared(x)) -> LikelyCoveredWithBacteria(x))", "score": 0}
{"id": "eqasc_validation_1078", "prediction": "all x.((Surface(x) & -Cleaned(x)) -> ProbabillyCoveredWithBacteria(x))", "score": 0}
{"id": "eqasc_validation_1078", "prediction": "all x.((Surface(x) & -Clean(x)) -> CoveredWithBacteria(x))", "score": 0}
{"id": "eqasc_validation_1079", "prediction": "all x.(RawMeat(x) -> (LoadedWithHarmfulBacteria(x)))", "score": 0}
{"id": "eqasc_validation_1079", "prediction": "all x.(RawMeat(x) -> HoardsHarmfulBacteria(x))", "score": 0}
{"id": "eqasc_validation_1079", "prediction": "all x.(RawMeat(x) -> HasHarmfulBacteria(x))", "score": 0}
{"id": "eqasc_validation_1079", "prediction": "all x.(RawMeat(x) -> LoadedWithHarmfulBacteria(x))", "score": 0}
{"id": "eqasc_validation_1079", "prediction": "all x.(RawMeat(x) -> ContainsHarmfulBacteria(x))", "score": 0}
{"id": "eqasc_validation_1079", "prediction": "all x.((RawMeat(x) & ContainsHealthyBacteria(x)) -> LoadedWith(x,y))", "score": 0}
{"id": "eqasc_validation_1079", "prediction": "all x.(RawMeat(x) -> (LayedWithHarmfulBacteria(x)))", "score": 0}
{"id": "eqasc_validation_1079", "prediction": "all x.(RawMeat(x) -> LoadedWithHazardousBacteria(x))", "score": 0}
{"id": "eqasc_validation_1079", "prediction": "all x.(Meat(x) -> ContainsHarmfulBacteria(x))", "score": 0}
{"id": "eqasc_validation_1079", "prediction": "all x.(RawMeat(x) -> HasProteins(x))", "score": 0}
{"id": "eqasc_validation_1080", "prediction": "all x.((Surface(x) & RawMeat(x)) -> Sterilized(x))", "score": 0}
{"id": "eqasc_validation_1080", "prediction": "all x.((Surface(x) & RawMeat(x)) -> ShouldBeSterilized(x))", "score": 0}
{"id": "eqasc_validation_1080", "prediction": "all x.((Surface(x) & RawMeat(x)) -> Sterile(x))", "score": 0}
{"id": "eqasc_validation_1080", "prediction": "all x y z.((Surface(x) & RawMeat(y) & Surface(z) & HasBeen(x,y)) -> ShouldBeSterilized(x))", "score": 0}
{"id": "eqasc_validation_1080", "prediction": "all x.((Surface(x) & HasRawMeat(x)) -> ShouldBeStormized(x))", "score": 0}
{"id": "eqasc_validation_1080", "prediction": "all x y.((Surface(x) & RawMeat(y)) -> ShouldBeSterilized(x))", "score": 0}
{"id": "eqasc_validation_1080", "prediction": "all x.((Surface(x) & RawMeat(x)) -> Sterilised(x))", "score": 0}
{"id": "eqasc_validation_1080", "prediction": "all x.((Surface(x) & RawMeat(x)) -> -Mercerified(x))", "score": 0}
{"id": "eqasc_validation_1080", "prediction": "all x.((Surface(x) & RawMeat(x)) -> IdeallySt sterilized(x))", "score": -1}
{"id": "eqasc_validation_1081", "prediction": "all x.(CookerSurface(x) -> NaturalStone(x))", "score": 0}
{"id": "eqasc_validation_1081", "prediction": "all x.(ConsiderCuisine(x) -> NaturalStone(x))", "score": 0}
{"id": "eqasc_validation_1081", "prediction": "all x.(CooltopSurface(x) -> NaturalStone(x))", "score": 0}
{"id": "eqasc_validation_1081", "prediction": "all x.(CoffeetopSurface(x) -> NaturalStone(x))", "score": 0}
{"id": "eqasc_validation_1081", "prediction": "all x.(ConsiderboardSurface(x) -> NaturalStone(x))", "score": 0}
{"id": "eqasc_validation_1081", "prediction": "all x.(CoveredSurface(x) -> NaturalStone(x))", "score": 0}
{"id": "eqasc_validation_1081", "prediction": "all x.(CookingSurface(x) -> NaturalStone(x))", "score": 0}
{"id": "eqasc_validation_1081", "prediction": "all x.(WorktopSurface(x) -> NaturalStone(x))", "score": 0}
{"id": "eqasc_validation_1082", "prediction": "all x.((Coffered(x) & -Sterilized(x)) -> LikelyCoveredWithBacteria(x))", "score": 0}
{"id": "eqasc_validation_1082", "prediction": "all x.((Console(x) & -Stormed(x)) -> ProbablyCovertWithBacteria(x))", "score": 0}
{"id": "eqasc_validation_1082", "prediction": "all x.((Coconut(x) & -Stormished(x)) -> CoveredWithBacteria(x))", "score": 0}
{"id": "eqasc_validation_1082", "prediction": "all x.((CoveredCovered(x) & -Sterilized(x)) -> CoveredWithBacteria(x))", "score": 0}
{"id": "eqasc_validation_1082", "prediction": "all x y.((Coffeetop(x) & -Steriled(x)) -> ProbabillyCoveredWithBacteria(y))", "score": 0}
{"id": "eqasc_validation_1082", "prediction": "all x.((Cooker(x) & -Steriled(x)) -> CloakedWithBacteria(x))", "score": 0}
{"id": "eqasc_validation_1082", "prediction": "all x.((Coffeetop(x) & -Sterilized(x)) -> CoveredWithBacteria(x))", "score": 0}
{"id": "eqasc_validation_1082", "prediction": "all x.((Cooltop(x) & -Sterilized(x)) -> CoveredWithBacteria(x))", "score": 0}
{"id": "eqasc_validation_1082", "prediction": "all x.((Worktop(x) & NotSt sterilized(x)) -> LikelySurroundedWithBacteria(x))", "score": -1}
{"id": "eqasc_validation_1082", "prediction": "all x y.((Colorbar(x) & -Sterilized(x) & -Sterilized(x)) -> LikelyCollapsedWithBacteria(y))", "score": 0}
{"id": "eqasc_validation_1082", "prediction": "all x.((Cooltop(x) & -Steertilized(x)) -> LikelyCoveredWithBacteria(x))", "score": 0}
{"id": "eqasc_validation_1082", "prediction": "all x.((Coverstick(x) & -Sterilized(x)) -> CoveredWithBacteria(x))", "score": 0}
{"id": "eqasc_validation_1082", "prediction": "all x.((Cooker(x) & -Sterilized(x)) -> CoveredWithBacteria(x))", "score": 0}
{"id": "eqasc_validation_1082", "prediction": "all x.((Country(x) & -Sterilized(x)) -> LikelyCoveredWithBacteria(x))", "score": 0}
{"id": "eqasc_validation_1082", "prediction": "all x.((ColorShebdomad(x) & -Sterilized(x)) -> CoveredWithBacteria(x))", "score": 0}
{"id": "eqasc_validation_1083", "prediction": "all x.(Surface(x) -> ScrubbedWithBleath(x))", "score": 0}
{"id": "eqasc_validation_1083", "prediction": "ALL SKYSurfacesWeavedWithBleeth(x) -> StructurallyBacked(x))", "score": -1}
{"id": "eqasc_validation_1083", "prediction": "-exists x.(Surface(x) & ScrubbedWithBleach(x))", "score": 0}
{"id": "eqasc_validation_1083", "prediction": "all x.(Surface(x) -> CleanedWithBleak(x))", "score": 0}
{"id": "eqasc_validation_1083", "prediction": "all x.(Surface(x) -> ScrubbedWithBleakBleath(x))", "score": 0}
{"id": "eqasc_validation_1083", "prediction": "all x.(Surface(x) -> CleanedWithBleakage(x))", "score": 0}
{"id": "eqasc_validation_1083", "prediction": "all x.(Surface(x) -> ScrubbedWithBroth(x))", "score": 0}
{"id": "eqasc_validation_1083", "prediction": "Upon removal, all surfaces were scrubbed with bleach.", "score": -1}
{"id": "eqasc_validation_1083", "prediction": "all x.(Surface(x) -> ScrubbedWithBleek(x))", "score": 0}
{"id": "eqasc_validation_1083", "prediction": "all x.(Surface(x) -> ScrubbedWithBrightey(x))", "score": 0}
{"id": "eqasc_validation_1083", "prediction": "all x.(Surface(x) -> ScrubbedWithBleak(x))", "score": 0}
{"id": "eqasc_validation_1083", "prediction": "all x.(Surface(x) -> ScrubbedWithBleach(x))", "score": 0}
{"id": "eqasc_validation_1084", "prediction": "all x.((Area(x) & -ScrubbedWithBleach(x)) -> CoveredWithBacteria(x))", "score": 0}
{"id": "eqasc_validation_1084", "prediction": "all x.((Area(x) & -ScrubbedWithBrolze(x)) -> ProbablyColoredWithBacteria(x))", "score": 0}
{"id": "eqasc_validation_1084", "prediction": "all x.((Area(x) & -ScrubbedWithBleak(x)) -> CoveredWithBacteria(x))", "score": 0}
{"id": "eqasc_validation_1084", "prediction": "all x.((Area(x) & -ScrubbedWithBleese(x)) -> ProbablyCoveredWithBacteria(x))", "score": 0}
{"id": "eqasc_validation_1084", "prediction": "all x.((Area(x) & -ScrubbedWithBleese(x)) -> SlaughterRisk(x))", "score": 0}
{"id": "eqasc_validation_1084", "prediction": "all x y.((Area(x) & -ScrubbedWithBleath(x) & -ScrubbedWithBleath(x)) -> CoveredWithBacteria(y))", "score": 0}
{"id": "eqasc_validation_1084", "prediction": "all x.((Area(x) & -ScrubbedWithBleese(x)) -> CoveredWithBacteria(x))", "score": 0}
{"id": "eqasc_validation_1084", "prediction": "all x.((Area(x) & -ScrubbedWithBlee Bleach(x)) -> CommonlyCoveredWithBacteria(x))", "score": -1}
{"id": "eqasc_validation_1084", "prediction": "all x.((Area(x) & -ScrubbedWithBleece(x)) -> CoveredWithBacteria(x))", "score": 0}
{"id": "eqasc_validation_1084", "prediction": "all x.((Area(x) & -BloodedWithBlood(x)) -> CoveredWithBacteria(x))", "score": 0}
{"id": "eqasc_validation_1084", "prediction": "all x.((Area(x) & -ScrubbedWithBleek(x)) -> CoveredWithBacteria(x))", "score": 0}
{"id": "eqasc_validation_1084", "prediction": "all x.((Area(x) & -CleamedWithBleach(x)) -> CoveredWithBacteria(x))", "score": 0}
{"id": "eqasc_validation_1084", "prediction": "all x.((Area(x) & NotScrubbingWithBleach(x)) -> CoveredWithBacteria(x))", "score": 0}
{"id": "eqasc_validation_1085", "prediction": "all x.(Bacteria(x) -> CausesInfection(x))", "score": 0}
{"id": "eqasc_validation_1085", "prediction": "all x.(Bacteria(x) -> CanCauseInfection(x))", "score": 0}
{"id": "eqasc_validation_1085", "prediction": "all x.(Bacteria(x) -> Catalyze(x,infection))", "score": 0}
{"id": "eqasc_validation_1086", "prediction": "all x.((Surface(x) & -Steriled(x)) -> CouldResultInInfection(x))", "score": 0}
{"id": "eqasc_validation_1086", "prediction": "all x.((Surface(x) & -St sterilized(x)) -> CouldResultInInfection(x))", "score": -1}
{"id": "eqasc_validation_1086", "prediction": "all x.((Surface(x) & -Stormized(x)) -> CouldResultInInfection(x))", "score": 0}
{"id": "eqasc_validation_1086", "prediction": "all x.((Surface(x) & -Sterilized(x)) -> CanResultInInfection(x))", "score": 0}
{"id": "eqasc_validation_1086", "prediction": "all x.((Surface(x) & -Sterilized(x)) -> PotentialInfection(x))", "score": 0}
{"id": "eqasc_validation_1086", "prediction": "all x.((Surface(x) & -Termed(x)) -> CouldResultInInfection(x))", "score": 0}
{"id": "eqasc_validation_1086", "prediction": "all x.((Surface(x) & -Sterilized(x)) -> Infection(x))", "score": 0}
{"id": "eqasc_validation_1086", "prediction": "all x.((Surface(x) & -Sterilized(x)) -> LeadsInfection(x))", "score": 0}
{"id": "eqasc_validation_1086", "prediction": "all x.((Surface(x) & -St sterilized(x)) -> PossibleInfection(x))", "score": -1}
{"id": "eqasc_validation_1086", "prediction": "all x.((Surface(x) & -Sterilized(x)) -> PossibleInfection(x))", "score": 0}
{"id": "eqasc_validation_1087", "prediction": "all x.(Bacteria(x) -> Microscopical(x))", "score": 0}
{"id": "eqasc_validation_1087", "prediction": "all x.(Bacteria(x) -> MinimalMicroorganism(x))", "score": 0}
{"id": "eqasc_validation_1087", "prediction": "all x.(Bacteria(x) -> MicroscopicOrganism(x))", "score": 0}
{"id": "eqasc_validation_1087", "prediction": "all x.(Bacteria(x) -> (MinimalMicroscopicOrganism(x) & Microscope(x)))", "score": 0}
{"id": "eqasc_validation_1087", "prediction": "all x.(Bacteria(x) -> SmallerMicroscopicalOrganisms(x))", "score": 0}
{"id": "eqasc_validation_1087", "prediction": "all x.(Bacteria(x) -> SlightestOfMicroscopicalOrganisms(x))", "score": 0}
{"id": "eqasc_validation_1087", "prediction": "all x.(Bacteria(x) -> TheSmallestOfMicroscopicOrganisms(x))", "score": 0}
{"id": "eqasc_validation_1087", "prediction": "all x.(Bacteria(x) -> MicroscopicallySmaller(x))", "score": 0}
{"id": "eqasc_validation_1087", "prediction": "all x.(Bacteria(x) -> MicroscopicalOrganism(x))", "score": 0}
{"id": "eqasc_validation_1087", "prediction": "all x.(Bacteria(x) -> Minimal(x))", "score": 0}
{"id": "eqasc_validation_1087", "prediction": "all x.(Bacteria(x) -> (SmallestOfMicroscopicOrganisms(x) & Microscope(x)))", "score": 0}
{"id": "eqasc_validation_1087", "prediction": "all x.(Bacteria(x) -> (MinimalMicroorganism(x) & MicroscopicOrganism(x)))", "score": 0}
{"id": "eqasc_validation_1087", "prediction": "all x.(Bacteria(x) -> MinimalMicroscopicOrganism(x))", "score": 0}
{"id": "eqasc_validation_1087", "prediction": "all x.(Bacteria(x) -> SmallestOfMicroscopicalOrganisms(x))", "score": 0}
{"id": "eqasc_validation_1088", "prediction": "all x.((Surface(x) & -Sterilized(x)) -> CoveredWithMicroscopicOrganisms(x))", "score": 0}
{"id": "eqasc_validation_1088", "prediction": "all x.((Surface(x) & -Sterilized(x)) -> MoldedOrganics(x))", "score": 0}
{"id": "eqasc_validation_1088", "prediction": "all x.((Surface(x) & NotSterilized(x)) -> CoveredWithMicroscopicOrganisms(x))", "score": 0}
{"id": "eqasc_validation_1088", "prediction": "all x.((Surface(x) & -Sterilized(x)) -> MicroscopicOrganisms(x))", "score": 0}
{"id": "eqasc_validation_1088", "prediction": "all x.((Surface(x) & -St sterilized(x)) -> CoveredWithMicrospores(x))", "score": -1}
{"id": "eqasc_validation_1088", "prediction": "all x y.((Surface(x) & -Sterilized(x) & -Styrowelded(x)) -> CoveredWithMicroscopicOrganisms(y))", "score": 0}
{"id": "eqasc_validation_1088", "prediction": "all x.((Surface(x) & -MarineDisinfection(x)) -> CoveredWithMicroscopicOrganisms(x))", "score": 0}
{"id": "eqasc_validation_1088", "prediction": "all x.((Surface(x) & -Sterilized(x)) -> PossiblyCovernedWithMicroscopeOrganisms(x))", "score": 0}
{"id": "eqasc_validation_1088", "prediction": "all x.((Surface(x) & -St sterilized(x)) -> CoveredWithMicroscopicOrganisms(x))", "score": -1}
{"id": "eqasc_validation_1088", "prediction": "all x.((Surface(x) & -Sterilized(x)) -> CapableOfCoveringMicroscopicalOrganisms(x))", "score": 0}
{"id": "eqasc_validation_1089", "prediction": "all x.((Clean(x) & Sterilized(x)) -> LessLikelyToBreedBacteria(x))", "score": 0}
{"id": "eqasc_validation_1089", "prediction": "all x.((Clean(x) & Sterilized(x) & Contacts(x)) -> LessLikelyToBreedBacteria(x))", "score": 0}
{"id": "eqasc_validation_1089", "prediction": "all x.((Clean(x) & Sterilized(x)) -> NonefavorableToBreedBacteria(x))", "score": 0}
{"id": "eqasc_validation_1089", "prediction": "all x.((Clean(x) & SterilizedContacts(x)) -> -BreedBacteria(x))", "score": 0}
{"id": "eqasc_validation_1089", "prediction": "all x.((Clean(x) & SterilizedContacts(x)) -> LessLikelyToBreedBacteria(x))", "score": 0}
{"id": "eqasc_validation_1089", "prediction": "all x.((Clean(x) & SterilizedContact(x)) -> LessLikelyToBreedBacteria(x))", "score": 0}
{"id": "eqasc_validation_1089", "prediction": "all x.((Contact(x) & Clean(x) & Sterilized(x)) -> RarelyBreedBacteria(x))", "score": 0}
{"id": "eqasc_validation_1089", "prediction": "all x.((CleanSterilizedContacts(x) & Clean(x)) -> LessLikelyToBreedBacteria(x))", "score": 0}
{"id": "eqasc_validation_1089", "prediction": "all x.((Clean(x) & SterilizedContacts(x)) -> IsLessLikelyToBreedBacteria(x))", "score": 0}
{"id": "eqasc_validation_1089", "prediction": "all x.((Clean(x) & Sterilized(x)) -> LessLikelyToBearBacteria(x))", "score": 0}
{"id": "eqasc_validation_1089", "prediction": "all x.((Clean(x) & Sterilized(x)) -> RarelyBreedsBacteria(x))", "score": 0}
{"id": "eqasc_validation_1089", "prediction": "all x.((Clean(x) & SterilizedContacts(x)) -> LessLikelyToBegrateBacteria(x))", "score": 0}
{"id": "eqasc_validation_1089", "prediction": "all x.((CleanStricturedContact(x) & -BreedBacteria(x)) -> LessLikelyToBreedBacteria(x))", "score": 0}
{"id": "eqasc_validation_1090", "prediction": "all x y z.((SterilizingSurface(x) & Bacteria(y) & Bacteria(z) & ReducingSurface(x,y,z)) -> Reduces(x,y))", "score": 0}
{"id": "eqasc_validation_1090", "prediction": "all x.(SteeringSurface(x) -> ReducesBacteria(x))", "score": 0}
{"id": "eqasc_validation_1090", "prediction": "all x y z.((Sterilizing(x) & Surface(y) & Bacteria(z)) -> Reduces(x,y,z))", "score": 0}
{"id": "eqasc_validation_1090", "prediction": "all x y.((SterilizingSurface(x) & Bacteria(y)) -> Reduces(x,y))", "score": 0}
{"id": "eqasc_validation_1090", "prediction": "all x y z.((Staph(x) & Surface(y) & Bacteria(z)) -> Reduces(x,y,z))", "score": 0}
{"id": "eqasc_validation_1090", "prediction": "all x y z.((StapheningSurface(x) & Bacteria(y) & Bacteria(z)) -> Reduces(x,y,z))", "score": 0}
{"id": "eqasc_validation_1090", "prediction": "all x y.((SterilizingSurface(x) & Bacteria(y)) -> ReducesBacteria(x,y))", "score": 0}
{"id": "eqasc_validation_1090", "prediction": "all x y z.((Sterilization(x) & Surface(y) & Bacteria(z) & Reduces(x,y,z)) -> Reduces(x,y))", "score": 0}
{"id": "eqasc_validation_1090", "prediction": "all x.((Sterilization(x) & Surface(x)) -> ReducesBacteria(x))", "score": 0}
{"id": "eqasc_validation_1090", "prediction": "all x y.((SanitizingSurface(x) & Bacteria(y)) -> ReducesBacteria(x,y))", "score": 0}
{"id": "eqasc_validation_1090", "prediction": "all x y z.((Sterilizing(x) & Surface(y) & Bacteria(z)) -> (Reduce(x,y,z) | Reduce(x,y)))", "score": 0}
{"id": "eqasc_validation_1090", "prediction": "all x y.((SterilizingSurface(x) & Bacteria(y)) -> Reducs(x,y))", "score": 0}
{"id": "eqasc_validation_1090", "prediction": "all x y z.((Sterilizer(x) & Surface(y) & Bacteria(z)) -> ReducesSurfaceBacteria(x,y,z))", "score": 0}
{"id": "eqasc_validation_1090", "prediction": "all x y z.((Sterilization(x) & Surface(y) & Bacteria(z)) -> ReducesSurface(x,y,z))", "score": 0}
{"id": "eqasc_validation_1090", "prediction": "all x y.((Surface(x) & Microbiota(y) & Sterilizing(x,y)) -> ReducesBacteria(x,y))", "score": 0}
{"id": "eqasc_validation_1091", "prediction": "all x y.((PotentLiquidSterilant(x) & Disease(y)) -> KillOnSurface(x,y))", "score": 0}
{"id": "eqasc_validation_1091", "prediction": "all x.((PotentLiquidSterilant(x) & KillsAIDSAndViruses(x)) -> OnSurface(x))", "score": 0}
{"id": "eqasc_validation_1091", "prediction": "all x y.((PotentLiquidSterilenant(x) & AIDS(y)) -> KillsOnSurface(x,y))", "score": 0}
{"id": "eqasc_validation_1091", "prediction": "all x.((PotentLiquidSterilant(x) & KillsAIDSAndViruses(x)) -> KillsOnSurfaces(x))", "score": 0}
{"id": "eqasc_validation_1091", "prediction": "all x.((PotentLiquidSterilant(x) & KillsAIDSAndVirusesOnSurfaces(x)) -> PotentLiquidSterilant(x))", "score": 0}
{"id": "eqasc_validation_1091", "prediction": "all x y.((PotentLiquidSterilant(x) & AIDS(y) & OtherViruses(x)) -> KillsOnSurface(x,y))", "score": 0}
{"id": "eqasc_validation_1091", "prediction": "all x.((PotentLiquidSterilant(x) & KillsAIDS(x) & KillsViruses(x)) -> CleansSurfaces(x))", "score": 0}
{"id": "eqasc_validation_1091", "prediction": "all x.(PotentLiquidSterilant(x) -> KillsAIDSAndVirusesOnSurfaces(x))", "score": 0}
{"id": "eqasc_validation_1091", "prediction": "all x y.((PotentLiquidSterilant(x) & AIDSVirus(y)) -> (Kills(x,y) | Kills(x,y)))", "score": 0}
{"id": "eqasc_validation_1091", "prediction": "all x.((PotentLiquidSterilant(x) & KillsAIDSAndVirusesOnSurfaces(x)) -> PotentLiquidSterilantOnSurface(x))", "score": 0}
{"id": "eqasc_validation_1091", "prediction": "all x y.((PotentLiquidSterilant(x) & (AIDS(y) | OtherViruses(y))) -> KillsOnSurfaces(x,y))", "score": 0}
{"id": "eqasc_validation_1091", "prediction": "all x.((Sterilant(x) & Potent(x)) -> KillsAIDSAndVirusesOnSurfaces(x))", "score": 0}
{"id": "eqasc_validation_1091", "prediction": "all x.((PotentLiquidSterilant(x) & KillsAIDS(x) & KillsViruses(x)) -> SilicateOnSurfaces(x))", "score": 0}
{"id": "eqasc_validation_1091", "prediction": "all x.((Sterilant(x) & Potent(x)) -> KillsAIDSAndAllOtherVirusesOnSurfaces(x))", "score": 0}
{"id": "eqasc_validation_1092", "prediction": "all x.((Tale(x) & UseSterilant(x)) -> Sterilize(x))", "score": 0}
{"id": "eqasc_validation_1092", "prediction": "exists x y.(Table(x) & Sterile(x))", "score": 0}
{"id": "eqasc_validation_1092", "prediction": "all x y.((Protocol(x) & Table(y)) -> Sterilant(x,y))", "score": 0}
{"id": "eqasc_validation_1092", "prediction": "all x.((Sterileant(x) & Table(y)) -> Sterilizes(x,y))", "score": 0}
{"id": "eqasc_validation_1092", "prediction": "all x.(ServesSterilent(x) -> SterilizeTable(x))", "score": 0}
{"id": "eqasc_validation_1092", "prediction": "all x y.((Sterilent(x) & Table(y)) -> Sterilizes(x,y))", "score": 0}
{"id": "eqasc_validation_1092", "prediction": "all x.((Person(x) & Sterilant(x)) -> SterilizeToTable(x))", "score": 0}
{"id": "eqasc_validation_1092", "prediction": "all x y z.((Sterilant(x) & Table(y) & Table(z)) -> Sterilizes(x,y,z))", "score": 0}
{"id": "eqasc_validation_1092", "prediction": "all x.((Telephone(x) & Sterilant(x)) -> Sterilises(x))", "score": 0}
{"id": "eqasc_validation_1092", "prediction": "all x.((Table(x) & Sterilant(x)) -> Sterilizes(x))", "score": 0}
{"id": "eqasc_validation_1092", "prediction": "all x y z.((Sterilet(x) & Table(y) & Table(z)) -> Sterilize(x,y,z))", "score": 0}
{"id": "eqasc_validation_1092", "prediction": "all x y.((Table(x) & Sterileant(y)) -> UsedInDependent(x,y))", "score": 0}
{"id": "eqasc_validation_1092", "prediction": "all x y.((Tab(x) & UsingSteriletor(x,y)) -> Sterilizes(x,y))", "score": 0}
{"id": "eqasc_validation_1092", "prediction": "all x y.((Palette(x) & Table(y)) -> UseSterilantToSteer(x,y))", "score": 0}
{"id": "eqasc_validation_1093", "prediction": "all x.(Fluoride(x) -> LowersToothDecay(x))", "score": 0}
{"id": "eqasc_validation_1093", "prediction": "all x y z.((Fluid(x) & TeethDecay(z) & Decreases(x,y,z)) -> Decreases(x,y,z))", "score": 0}
{"id": "eqasc_validation_1093", "prediction": "all x y.((Flourid(x) & TeethDecay(y)) -> Decreases(x,y))", "score": 0}
{"id": "eqasc_validation_1093", "prediction": "all x y.((Flavoride(x) & TeethDecay(y)) -> Decreases(x,y))", "score": 0}
{"id": "eqasc_validation_1093", "prediction": "all x y.((Fluoride(x) & TeethDecay(y)) -> Decreases(x,y))", "score": 0}
{"id": "eqasc_validation_1093", "prediction": "all x y.((Fluoride(x) & DentDecay(y)) -> Decreases(x,y))", "score": 0}
{"id": "eqasc_validation_1093", "prediction": "all x y z.((Fluoride(x) & TeethDecomposition(y) & Decreases(x,z)) -> Increases(x,y))", "score": 0}
{"id": "eqasc_validation_1093", "prediction": "all x.(FfluorideDecreasesToothDecay(x) -> IncreasesToothDecay(x))", "score": 0}
{"id": "eqasc_validation_1093", "prediction": "all x.((Ffluoride(x) & DentalDecay(x)) -> Diminuates(x,totalDecay(x))", "score": -1}
{"id": "eqasc_validation_1093", "prediction": "all x y.((Ffluoride(x) & TeethDecay(y)) -> ReducesDiscoloration(x,y))", "score": 0}
{"id": "eqasc_validation_1093", "prediction": "all x y z.((Flavoride(x) & TeethDecay(y) & Dent(z)) -> Decreases(x,y,z))", "score": 0}
{"id": "eqasc_validation_1093", "prediction": "all x.(Fluoride(x) -> ReducesToothDecay(x))", "score": 0}
{"id": "eqasc_validation_1093", "prediction": "all x.(Flavoride(x) -> (DecreasesToothDecay(x) & Fluoride(x)))", "score": 0}
{"id": "eqasc_validation_1093", "prediction": "all x y.((Fluid(x) & TeethCause(y)) -> Decreases(x,y))", "score": 0}
{"id": "eqasc_validation_1093", "prediction": "all x y.((Fluoride(x) & DentDecay(y)) -> Drops(x,y))", "score": 0}
{"id": "eqasc_validation_1094", "prediction": "all x.(ToothDisease(x) -> (DestructionOfToothEmail(x) & ToothEmbarrassment(x)))", "score": 0}
{"id": "eqasc_validation_1094", "prediction": "all x.(ToothDecay(x & TheEnglen(x)) -> EnhancedToothEnamelDestruction(x))", "score": -1}
{"id": "eqasc_validation_1094", "prediction": "all x.(TonyDecay(x) -> DefamerationOfToothEmail(x))", "score": 0}
{"id": "eqasc_validation_1094", "prediction": "all x.(ToethDecay(x) -> (DestructionOfEnamel(x) & Teeth(x)))", "score": 0}
{"id": "eqasc_validation_1094", "prediction": "all x y.((ToothDecay(x) & Teardrop(y)) -> DestroysEmail(x,y))", "score": 0}
{"id": "eqasc_validation_1094", "prediction": "all x.((ToothDisease(x) & DetonationOfEnamel(x)) -> (Root(x) & Teeth(x)))", "score": 0}
{"id": "eqasc_validation_1094", "prediction": "all x y.((ToothDisease(x) & Dent(y)) -> DefamationOfEyel(x,y))", "score": 0}
{"id": "eqasc_validation_1094", "prediction": "all x.(ToothDisease(x) -> DissolutionOfEnemiel(x))", "score": 0}
{"id": "eqasc_validation_1094", "prediction": "all x.(TotalDecay(x) -> WarningOfEnamel(x))", "score": 0}
{"id": "eqasc_validation_1094", "prediction": "all x.(TotalDisease(x) -> (DestructionOfToothEmail(x)))", "score": 0}
{"id": "eqasc_validation_1094", "prediction": "all x.(ToothDecay(x) -> DestroysToothEyel(x))", "score": 0}
{"id": "eqasc_validation_1094", "prediction": "all x.(ToothDisease(x) -> DistructionOfMathEmail(x))", "score": 0}
{"id": "eqasc_validation_1094", "prediction": "all x y.((TotalDecay(x) & ToothEmmail(y)) -> Destroys(x,y))", "score": 0}
{"id": "eqasc_validation_1094", "prediction": "all x.(ToothDisease(x) -> DistructionOfEmily(x))", "score": 0}
{"id": "eqasc_validation_1094", "prediction": "all x.(ThoatDecay(x) -> (DestructionOfEnamel(x)))", "score": 0}
{"id": "eqasc_validation_1094", "prediction": "all x.(TotalDecay(x) -> (DestructionOfEnamel(x)))", "score": 0}
{"id": "eqasc_validation_1095", "prediction": "all x.(Fluid(x) -> -DamagesCyclingOfEnamel(x))", "score": 0}
{"id": "eqasc_validation_1095", "prediction": "all x.(Fluid(x) -> DecreasesDistructionOfE enamel(x))", "score": -1}
{"id": "eqasc_validation_1095", "prediction": "all x y.((Fluid(x) & Enamel(y)) -> DecreasesDegradation(x,y))", "score": 0}
{"id": "eqasc_validation_1095", "prediction": "all x.(Flavoride(x) -> DecreasedDestructionOfEnamel(x))", "score": 0}
{"id": "eqasc_validation_1095", "prediction": "all x y.((Flavoride(x) & Enamel(y)) -> DecreasesDegradation(x,y))", "score": 0}
{"id": "eqasc_validation_1095", "prediction": "all x y z.((Flaoride(x) & Enamel(y) & Enamel(z)) -> DecreasesDestruction(x,y,z))", "score": 0}
{"id": "eqasc_validation_1095", "prediction": "all x.(Flusoride(x) -> DecreasesDestructionOfEmail(x))", "score": 0}
{"id": "eqasc_validation_1095", "prediction": "all x y.((Fluid(x) & Enamel(y)) -> DecreasesDestruction(x,y))", "score": 0}
{"id": "eqasc_validation_1095", "prediction": "all x y.((Fluoride(x) & Enamel(y)) -> DecreasedDestruction(x,y))", "score": 0}
{"id": "eqasc_validation_1095", "prediction": "all x.(Flushoride(x) -> DecreasesDestructionOfEnamel(x))", "score": 0}
{"id": "eqasc_validation_1095", "prediction": "all x y.((Fluid(x) & Equene(y)) -> DecreasesDestruction(x,y))", "score": 0}
{"id": "eqasc_validation_1095", "prediction": "all x.(Flusoride(x) -> ReducesDestructionOfEnamel(x))", "score": 0}
{"id": "eqasc_validation_1095", "prediction": "all x y.((Liquid(x) & Enamel(y)) -> DecreasesDestruction(x,y))", "score": 0}
{"id": "eqasc_validation_1095", "prediction": "all x.(Ffluoride(x) -> DecreasesDemolitionOfEmail(x))", "score": 0}
{"id": "eqasc_validation_1095", "prediction": "all x.(Flusconide(x) -> DecreasesDestruction(x))", "score": 0}
{"id": "eqasc_validation_1095", "prediction": "all x.(Ffluoride(x) -> DecreasesDestructionOfEmail(x))", "score": 0}
{"id": "eqasc_validation_1096", "prediction": "all x.(ToothDecay(x) -> ((Prolonged(x) & MakesTeethUnsightly(x))))", "score": 0}
{"id": "eqasc_validation_1096", "prediction": "all x.(ToothCause(x) -> (Poor(x) & MakesTeethWearly(x)))", "score": 0}
{"id": "eqasc_validation_1096", "prediction": "all x.(ToothDisturbance(x) -> (MeanTeeth(x) & Painful(x) & UnsightlyTeeth(x)))", "score": 0}
{"id": "eqasc_validation_1096", "prediction": "all x.(ToothDisease(x) -> (Poisonous(x) & MakesTeethUnsightly(x)))", "score": 0}
{"id": "eqasc_validation_1096", "prediction": "all x.(DoubleTeeth(x) -> (ToothDecaying(x) & UnsightlyTeeth(x)))", "score": 0}
{"id": "eqasc_validation_1096", "prediction": "all x.(ToothDecay(x) -> (Disabling(x) & MakesTeethUnsightly(x)))", "score": 0}
{"id": "eqasc_validation_1096", "prediction": "all x.(ToothDecay(x) -> ((Pourishing(x) & MakingTeethUnsightly(x))))", "score": 0}
{"id": "eqasc_validation_1096", "prediction": "all x.(ToothDecay(x) -> (Pourishing(x) & MakingTeethUnsightly(x)))", "score": 0}
{"id": "eqasc_validation_1096", "prediction": "all x.(ToothDecay(x) -> (NecessarilyPainting(x) & MakesTeethUnsightly(x)))", "score": 0}
{"id": "eqasc_validation_1096", "prediction": "all x.(ToothDecline(x) -> (MameOresightlyTeeth(x) | VeryPoisonous(x)))", "score": 0}
{"id": "eqasc_validation_1096", "prediction": "all x.(ToothCause(x) -> ((Poor(x) & Tearable(x)) | TeethUnsightly(x))))", "score": -1}
{"id": "eqasc_validation_1096", "prediction": "all x.(ToothCause(x) -> (Disabling(x) & MakingTeethUnsightly(x)))", "score": 0}
{"id": "eqasc_validation_1096", "prediction": "all x.(ToothDecay(x) -> (Degenerative(x) & Nauseous(x)))", "score": 0}
{"id": "eqasc_validation_1096", "prediction": "all x.(ToothDecay(x) -> (IsAdult(x) & MakesTeethUnsightly(x)))", "score": 0}
{"id": "eqasc_validation_1096", "prediction": "all x.(ToothDecay(x) -> ((Healing(x) & MakingTeethUnsightly(x))))", "score": 0}
{"id": "eqasc_validation_1096", "prediction": "all x.(ToothCause(x) -> ((Rainful(x) & Skinny(x)) | MakesTeethUnsightly(x))))", "score": -1}
{"id": "eqasc_validation_1097", "prediction": "all x y.((Fluoride(x) & TeethPain(y)) -> ReducesPotential(x,y))", "score": 0}
{"id": "eqasc_validation_1097", "prediction": "all x.(Fruit(x) -> DecreasesPotentialForTonguePain(x))", "score": 0}
{"id": "eqasc_validation_1097", "prediction": "all x.(Fluoride(x) -> DecreasesPotentialForToothPain(x))", "score": 0}
{"id": "eqasc_validation_1097", "prediction": "all x.(Fluoride(x) -> There's a PotentialForToothPain(x))", "score": -1}
{"id": "eqasc_validation_1097", "prediction": "all x y z.((Flushide(x) & TeethPain(y) & ToothPain(z)) -> IncreasesPotential(x,y,z))", "score": 0}
{"id": "eqasc_validation_1097", "prediction": "all x y.((Ffluoride(x) & ToothPain(y)) -> ReducesPotential(x,y))", "score": 0}
{"id": "eqasc_validation_1097", "prediction": "all x y.((Floride(x) & TeethPain(y)) -> DecreasesPotential(x,y))", "score": 0}
{"id": "eqasc_validation_1097", "prediction": "all x y.((Fluid(x) & TeethPain(y)) -> DecreasesPotentialForPain(x,y))", "score": 0}
{"id": "eqasc_validation_1097", "prediction": "all x.(Ferfluoride(x) -> (DecreasesPotentialForToothPain(x) & TeethPain(x)))", "score": 0}
{"id": "eqasc_validation_1097", "prediction": "all x.(Fluid(x) -> DecreasesPotentialForToothPain(x))", "score": 0}
{"id": "eqasc_validation_1097", "prediction": "all x.(Fluid(x) -> DecreasesPotentialToLeinPain(x))", "score": 0}
{"id": "eqasc_validation_1097", "prediction": "all x y.((Fluoride(x) & PotentialPotential(y)) -> DecreasesPotentialToothPain(x,y))", "score": 0}
{"id": "eqasc_validation_1097", "prediction": "all x.(Fluid(x) -> (DecreasesPotentialForToothPain(x) & ReducesPotentialForToothPain(x)))", "score": 0}
{"id": "eqasc_validation_1097", "prediction": "all x y.((Fluid(x) & ToothPain(y)) -> ReducesPotential(x,y))", "score": 0}
{"id": "eqasc_validation_1097", "prediction": "all x.(Ffluoride(x) -> DecreasesPotentialForToothPain(x))", "score": 0}
{"id": "eqasc_validation_1098", "prediction": "all x.(Flauride(x) -> PreventsDestructionOfToothEmbattle(x))", "score": 0}
{"id": "eqasc_validation_1098", "prediction": "all x y.((Fluid(x) & TeethEnamel(y)) -> PreventsDestruction(x,y))", "score": 0}
{"id": "eqasc_validation_1098", "prediction": "all 0 -> (Flauride(x) & PreventsDistructionOfToothEmilene(x)))", "score": -1}
{"id": "eqasc_validation_1098", "prediction": "all x.(Fluoride(x) -> PreventsDestructionOfTenNeoelEnamel(x))", "score": 0}
{"id": "eqasc_validation_1098", "prediction": "all x.(Flush+NaturalEnamel(x) -> PreventsDestruction(x))", "score": 0}
{"id": "eqasc_validation_1098", "prediction": "all x y.((Fluid(x) & TeethEmcel(y)) -> PreventsDestruction(x,y))", "score": 0}
{"id": "eqasc_validation_1098", "prediction": "all x.(Fluoride(x) -> PreventsDestructionOfToothEnamel(x))", "score": 0}
{"id": "eqasc_validation_1098", "prediction": "all x.(Fluoride(x) -> PreventsDistructionOfToothEmcel(x))", "score": 0}
{"id": "eqasc_validation_1098", "prediction": "all x y.((Flooride(x) & Enamel(y)) -> PreventsDestruction(x,y))", "score": 0}
{"id": "eqasc_validation_1098", "prediction": "all x y.((Fluoride(x) & TeethEmilene(y)) -> PreventsDestruction(x,y))", "score": 0}
{"id": "eqasc_validation_1098", "prediction": "all x y.((Flushide(x) & TeethEmulsion(y)) -> PreventsDistruction(x,y))", "score": 0}
{"id": "eqasc_validation_1098", "prediction": "all x.(Ffluoride(x) -> PreventsDestructionOfTeethEnamel(x))", "score": 0}
{"id": "eqasc_validation_1098", "prediction": "all x.(Flavoride(x) -> PreventsDestructionOfToothEmcel(x))", "score": 0}
{"id": "eqasc_validation_1098", "prediction": "all x.(Fluidoxy(x) -> PreventsDestructionOfToothEmilen(x))", "score": 0}
{"id": "eqasc_validation_1098", "prediction": "all x y.((Fluoride(x) & TeethEmilene(y) & PreventsDistruction(x,y)) -> PreventsDestruction(x,y))", "score": 0}
{"id": "eqasc_validation_1098", "prediction": "all x.(Ffluoride(x) -> PreventsDestructionOfToothEnamel(x))", "score": 0}
{"id": "eqasc_validation_1099", "prediction": "all x.(Flouride(x) -> PreventsDestructionOfToothEnamel(x))", "score": 0}
{"id": "eqasc_validation_1099", "prediction": "Flouride prevents toothenelissment from disabling.", "score": -1}
{"id": "eqasc_validation_1099", "prediction": "all x y z.((Flouride(x) & TeethEmery(y) & DentalEmilene(z)) -> PreventsDamage(x,y,z))", "score": 0}
{"id": "eqasc_validation_1099", "prediction": "all x y.((Flouride(x) & TeethEmail(y)) -> PreventsDestruction(x,y))", "score": 0}
{"id": "eqasc_validation_1099", "prediction": "all x.(Flouride(x) -> PreventsDistructionOfToothEmiling(x))", "score": 0}
{"id": "eqasc_validation_1099", "prediction": "all x.(Flouride(x) -> PreventsDistructionOfToothEmail(x))", "score": 0}
{"id": "eqasc_validation_1099", "prediction": "all x.(Flouride(x) -> PreventsDestructionOfToothEmily(x))", "score": 0}
{"id": "eqasc_validation_1099", "prediction": "all x.(Flouride(x) -> PreventsDestructionOfToothEmail(x))", "score": 0}
{"id": "eqasc_validation_1099", "prediction": "all x.(Flouride(x) -> PreventsDisasterOfToothEnelim(x))", "score": 0}
{"id": "eqasc_validation_1099", "prediction": "all x.(Flouride(x) -> PreventsDestructionOfToothEaseling(x))", "score": 0}
{"id": "eqasc_validation_1099", "prediction": "all x.(Flouride(x) -> PreventsDisturbationOfToothEmail(x))", "score": 0}
{"id": "eqasc_validation_1099", "prediction": "all x y.((Flouride(x) & DentalEmail(y)) -> PreventsDestruction(x,y))", "score": 0}
{"id": "eqasc_validation_1099", "prediction": "all x y.((Flouride(x) & TeethEnamel(y)) -> PreventsDestruction(x,y))", "score": 0}
{"id": "eqasc_validation_1100", "prediction": "all x.(Cavity(x) -> (Carries(x) & ThornDecay(x)))", "score": 0}
{"id": "eqasc_validation_1100", "prediction": "all x.(Cavity(x) -> (Carries(x) | TeethDecay(x)))", "score": 0}
{"id": "eqasc_validation_1100", "prediction": "all x y.((Cavity(x) & Carries(y)) -> (Density(x,y) | Carries(z,x)))", "score": 0}
{"id": "eqasc_validation_1100", "prediction": "all x.(Cavity(x) -> (AsCarries(x) & AsToothDecay(x)))", "score": 0}
{"id": "eqasc_validation_1100", "prediction": "all x.(Cavity(x) -> (Carries(x) | TeethDisease(x)))", "score": 0}
{"id": "eqasc_validation_1100", "prediction": "all x.(Cavity(x) -> (Carries(x) & TeethDecay(x)))", "score": 0}
{"id": "eqasc_validation_1100", "prediction": "all x.(Cavities(x) -> (Carries(x) | TeethDecay(x)))", "score": 0}
{"id": "eqasc_validation_1100", "prediction": "all x.(Cavities(x) -> (Carries(x) & TeethCause(x)))", "score": 0}
{"id": "eqasc_validation_1100", "prediction": "all x.(Cavities(x) -> (Carries(x) | TeethDisease(x)))", "score": 0}
{"id": "eqasc_validation_1100", "prediction": "all x.(Cavity(x) -> (Carries(x) | TeethDecline(x)))", "score": 0}
{"id": "eqasc_validation_1100", "prediction": "all x.(Cavity(x) -> (HolesCarrying(x) & TeethDecay(x)))", "score": 0}
{"id": "eqasc_validation_1100", "prediction": "all x.(Cavity(x) -> (Caves(x) | ToothDecay(x)))", "score": 0}
{"id": "eqasc_validation_1101", "prediction": "all x.(Fluoride(x) -> ReducesCavityFormation(x))", "score": 0}
{"id": "eqasc_validation_1101", "prediction": "all x.(Fluid(x) -> ReducesCavityFormation(x))", "score": 0}
{"id": "eqasc_validation_1101", "prediction": "all x.(Fluidite(x) -> ReducesCaviumFormation(x))", "score": 0}
{"id": "eqasc_validation_1101", "prediction": "all x.(Fluoride(x) -ReducesCavityFormation(x))", "score": -1}
{"id": "eqasc_validation_1101", "prediction": "all x.(Flavoride(x) -> ReducedCavityFormation(x))", "score": 0}
{"id": "eqasc_validation_1101", "prediction": "all x.(Fluid(x) -> ReducesCaviumFormation(x))", "score": 0}
{"id": "eqasc_validation_1101", "prediction": "all x.(Flushoride(x) -> ReducesCavityFormation(x))", "score": 0}
{"id": "eqasc_validation_1101", "prediction": "all x.(Flavoride(x) -> ReducesCavityFormation(x))", "score": 0}
{"id": "eqasc_validation_1101", "prediction": "all x.(Flute(x) -> ReducesCavityFormation(x))", "score": 0}
{"id": "eqasc_validation_1101", "prediction": "all x.(Fluid(z) -> ReducesAcaciaFormation(x,z))", "score": 0}
{"id": "eqasc_validation_1102", "prediction": "all x.(Fluoride(x) -> (HydrogfluoricAcidSalt(x) & HydroxyfluoricAcidSalt(x)))", "score": 0}
{"id": "eqasc_validation_1102", "prediction": "all x.(Fluoride(x) -> (HydrofluoricAcid(x) & Salt(x)))", "score": 0}
{"id": "eqasc_validation_1102", "prediction": "all x.(Flouride(x) -> (HydrofluoricAcid(x) & Salt(x)))", "score": 0}
{"id": "eqasc_validation_1102", "prediction": "all x.(Florida(x) -> (SaltOfHydrofluoricAcid(x) | SaltOfHydrofluoricAcid(x)))", "score": 0}
{"id": "eqasc_validation_1102", "prediction": "all x y.((Fluoride(x) & HydrofluoricAcid(y)) -> Salt(x,y))", "score": 0}
{"id": "eqasc_validation_1102", "prediction": "(Salt(fluoride) & HydrofluoricAcid(fluoride))", "score": 0}
{"id": "eqasc_validation_1102", "prediction": "(SaltOfHierofluoricAcid(Flooride))", "score": 0}
{"id": "eqasc_validation_1102", "prediction": "all x.(Fluid(x) -> (HydrofluoricAcidSalt(x) & Fluoride(x)))", "score": 0}
{"id": "eqasc_validation_1102", "prediction": "all x.(Flushoride(x) -> (HydrofluoricAcid(x) & Salt(x)))", "score": 0}
{"id": "eqasc_validation_1102", "prediction": "all x.(Fluoride(x) -> (HolyfluoricAcid(x) & Salt(x)))", "score": 0}
{"id": "eqasc_validation_1102", "prediction": "all x.(Fluoride(x) -> (SaltsOfHydrofluoricAcid(x) & HydrofluoricAcid(x)))", "score": 0}
{"id": "eqasc_validation_1102", "prediction": "(HydrofluoricAcid(fluoride) -> Salts(fluoride))", "score": 0}
{"id": "eqasc_validation_1102", "prediction": "all x.(Fluoride(x) -> (HydrofluoricAcidSalts(x) & Salts(x)))", "score": 0}
{"id": "eqasc_validation_1102", "prediction": "all x.(Fluoride(x) -> (SaltsHydroxyfluoricAcid(x) & HydrofluoricAcid(x)))", "score": 0}
{"id": "eqasc_validation_1102", "prediction": "all x.(Fluoride(x) -> (SaltOfHydrofluoricAcid(x) | SaltOfHydrofluoricAcid(x)))", "score": 0}
{"id": "eqasc_validation_1103", "prediction": "all x y z.((HydrofluoricAcid(x) & SaltsOf(x,y) & DentalDecay(z)) -> ReducesDecay(x,z))", "score": 0}
{"id": "eqasc_validation_1103", "prediction": "all x.((SaltsOfHydrocloricAcid(x) & DentalDecay(y)) -> ReducesFluoricAcid(x))", "score": 0}
{"id": "eqasc_validation_1103", "prediction": "all x y.((SaltOfHydrofluoricAcid(x) & ToothCramp(y)) -> DecreasesToothDecay(x,y))", "score": 0}
{"id": "eqasc_validation_1103", "prediction": "all x.(Salz(x) -> (HydroxyfluoricAcidDecreasesToothDecay(x)))", "score": 0}
{"id": "eqasc_validation_1103", "prediction": "all x.((HydrocluricAcid(x) & Salts(x)) -> DecreasesToothDecay(x))", "score": 0}
{"id": "eqasc_validation_1103", "prediction": "all x y.((SaltsOfHydroxyfluoricAcid(x) & TeethDecay(y)) -> Decreases(x,y))", "score": 0}
{"id": "eqasc_validation_1103", "prediction": "all x.((Salt(x) & HydrofluoricAcid(x)) -> DecreasesToothDecay(x))", "score": 0}
{"id": "eqasc_validation_1103", "prediction": "all x y.((SaltsOfHydrogloscopicAcid(x) & DentalDecline(y)) -> DecreaseRiteDisease(x,y))", "score": 0}
{"id": "eqasc_validation_1103", "prediction": "all x.((Salts(x) & HydrofluoricAcid(x)) -> DecreasedToothDecay(x))", "score": 0}
{"id": "eqasc_validation_1103", "prediction": "all x y.((Salt(x) & HydrofluoricAcid(y)) -> DecreasesToothCrusation(x,y))", "score": 0}
{"id": "eqasc_validation_1103", "prediction": "all x.((Salts(x) & HydrofluoricAcid(x) & DecreaseToothDecay(x)) -> ReducesToothDecay(x))", "score": 0}
{"id": "eqasc_validation_1103", "prediction": "all x y.((HydrofluoricAcid(x) & Salts(x)) -> DecreasesToothDecay(x,y))", "score": 0}
{"id": "eqasc_validation_1103", "prediction": "all x.((HydrofluoricAcid(x) & Salts(x)) -> DecreasesThinningDecay(x))", "score": 0}
{"id": "eqasc_validation_1103", "prediction": "all x y z.((Salt(x) & HydrofluoricAcid(y) & TeethDecline(z)) -> DecreasesDecay(x,y,z))", "score": 0}
{"id": "eqasc_validation_1103", "prediction": "all x.(SaltsOfHydrofluoricAcid(x) -> ReducesToothDecay(x))", "score": 0}
{"id": "eqasc_validation_1103", "prediction": "all x y z.((Salt(x) of HydrofluoricAcid(y) & TeethDecline(z)) -> (Decreases(x,y,z) & DentalDecay(x)))", "score": -1}
{"id": "eqasc_validation_1104", "prediction": "all x.(Water(x) -> ContainsFloridor(x))", "score": 0}
{"id": "eqasc_validation_1104", "prediction": "all x.(Water(x) -> ContainsFluid(x))", "score": 0}
{"id": "eqasc_validation_1104", "prediction": "all x.(Water(x) -> ContainsFluidite(x))", "score": 0}
{"id": "eqasc_validation_1104", "prediction": "all x.(Water(x) -> ContainsFluidoride(x))", "score": 0}
{"id": "eqasc_validation_1104", "prediction": "all x.(Water(x) -> ContainsFluidide(x))", "score": 0}
{"id": "eqasc_validation_1104", "prediction": "all x.(Water(x) -> ContainsFluoride(x))", "score": 0}
{"id": "eqasc_validation_1104", "prediction": "all x.(Water(x) -> ContainsFloride(x))", "score": 0}
{"id": "eqasc_validation_1104", "prediction": "all x.(IllustratedWater(x) -> ContainsFluidoride(x))", "score": 0}
{"id": "eqasc_validation_1104", "prediction": "all x y.((Water(x) & Fluoride(y)) -> Contains(x,y))", "score": 0}
{"id": "eqasc_validation_1104", "prediction": "all x.(Water(x) -> ContainsFlushoride(x))", "score": 0}
{"id": "eqasc_validation_1104", "prediction": "all x.(Water(x) -> IsInFluoride(x))", "score": 0}
{"id": "eqasc_validation_1104", "prediction": "ContainsFloride(x)", "score": 0}
{"id": "eqasc_validation_1104", "prediction": "exists x.(Water(x) & ContainsFlouride(x))", "score": 0}
{"id": "eqasc_validation_1105", "prediction": "(DecreasesToothDecay(Water,Tooth))", "score": 0}
{"id": "eqasc_validation_1105", "prediction": "all x.(Water(x) -> DecreasesToothDecay(x))", "score": 0}
{"id": "eqasc_validation_1105", "prediction": "(DecreasesToothDecay(Water))", "score": 0}
{"id": "eqasc_validation_1105", "prediction": "all x.(Water(x) -> DecreasesToothDamage(x))", "score": 0}
{"id": "eqasc_validation_1105", "prediction": "all x.(Has(x,ToothDisease) -> WaterDecrease(x,ToothDisease))", "score": 0}
{"id": "eqasc_validation_1105", "prediction": "all x.(Water(x) -> MinimizesToothDecay(x))", "score": 0}
{"id": "eqasc_validation_1105", "prediction": "all x.(Water(x) -> DeclinedToothDecay(x))", "score": 0}
{"id": "eqasc_validation_1105", "prediction": "exists x.(Water(x) & DentDecay(x))", "score": 0}
{"id": "eqasc_validation_1105", "prediction": "all x y.((Water(x) & ToothDecline(y)) -> Decreases(x,y))", "score": 0}
{"id": "eqasc_validation_1106", "prediction": "all x.(Human(x) -> GetsMostMostFluidorideInHotWater(x))", "score": 0}
{"id": "eqasc_validation_1106", "prediction": "all x y.((Human(x) & DrinkingWater(y)) -> MostInfluoride(x,y))", "score": 0}
{"id": "eqasc_validation_1106", "prediction": "all x.(Human(x) -> Fluoride(x))", "score": 0}
{"id": "eqasc_validation_1106", "prediction": "all x.(Human(x) -> MostOfFluidyl(x))", "score": 0}
{"id": "eqasc_validation_1106", "prediction": "all x y.((Human(x) & Water(y)) -> (GetsFluorideIn(x,y)))", "score": 0}
{"id": "eqasc_validation_1106", "prediction": "all x.(Human(x) -> (GetsFluidorideInDrinkingWater(x) & -GetsFluidorideInWater(x)))", "score": 0}
{"id": "eqasc_validation_1106", "prediction": "all x y.((Human(x) & DrinkingWater(y)) -> GetsFluidorideIn(x,y))", "score": 0}
{"id": "eqasc_validation_1106", "prediction": "all x.(Human(x) -> GetsFluoride(x,drinkingWater))", "score": 0}
{"id": "eqasc_validation_1106", "prediction": "all x.(Human(x) -> (HasFlorotide(x) & InDrinkingWater(x)))", "score": 0}
{"id": "eqasc_validation_1106", "prediction": "all x.(Human(x) -> GetsFluidoride(x))", "score": 0}
{"id": "eqasc_validation_1106", "prediction": "all x.(Human(x) -> MostFluorideInDrinkingWater(x))", "score": 0}
{"id": "eqasc_validation_1106", "prediction": "all x.(Human(x) -> MostOfFlush(x,DrinkingWater))", "score": 0}
{"id": "eqasc_validation_1106", "prediction": "all x.(Human(x) -> (GetsFluidine(x) & DrinksWater(x)))", "score": 0}
{"id": "eqasc_validation_1106", "prediction": "all x.(Human(x) -> In(x,drinkingWater))", "score": 0}
{"id": "eqasc_validation_1106", "prediction": "all x.(Human(x) -> GetsFluorideInDrinkingWater(x))", "score": 0}
{"id": "eqasc_validation_1106", "prediction": "all x.(Human(x) -> (GetWordfluoride(x) & GenerallyIn(x,DrinkingWater)))", "score": 0}
{"id": "eqasc_validation_1107", "prediction": "all x.((DrinkingWater(x) & TeethDecay(x)) -> Decreases(x))", "score": 0}
{"id": "eqasc_validation_1107", "prediction": "all x.((DrinkingWater(x) & TeethDecay(x)) -> Decreases(x,y))", "score": 0}
{"id": "eqasc_validation_1107", "prediction": "all x.(IsTours(x) -> Decreases(x))", "score": 0}
{"id": "eqasc_validation_1107", "prediction": "all x.(DrinkingWater(x) -> ReducesToothDecay(x))", "score": 0}
{"id": "eqasc_validation_1107", "prediction": "all x.(DrinkingWater(x) -> DecreasesToothDecay(x))", "score": 0}
{"id": "eqasc_validation_1107", "prediction": "is a large source of the toxic chemical compound,y.", "score": -1}
{"id": "eqasc_validation_1107", "prediction": "all x.(DrinkingWater(x) -> DiffusesToothDecay(x))", "score": 0}
{"id": "eqasc_validation_1107", "prediction": "all x.((DrinkingWater(x) & DecreasesToothDecay(x)) -> -DiminishesToothDisease(x))", "score": 0}
{"id": "eqasc_validation_1107", "prediction": "all x.(DrinkingWater(x) -> DecreasedToothDiet(x))", "score": 0}
{"id": "eqasc_validation_1107", "prediction": "all x y.((DrinkingWater(x) & TeethDecay(y)) -> Minimizes(x,y))", "score": 0}
{"id": "eqasc_validation_1107", "prediction": "all x.((DrinkingWater(x) & DentalDecay(x)) -> Decreases(x,y))", "score": 0}
{"id": "eqasc_validation_1108", "prediction": "all x y z.((Differiation(x) & UnspecializedCell(y) & SpecializedCell(z)) -> MakesSpecialized(y,z))", "score": 0}
{"id": "eqasc_validation_1108", "prediction": "all x y.((Differential(x) & UnspecializedCell(y)) -> Specialized(y))", "score": 0}
{"id": "eqasc_validation_1108", "prediction": "all x.(Differentiation(x) -> (UnspecializedCell(x) & SpecializedCell(x)))", "score": 0}
{"id": "eqasc_validation_1108", "prediction": "all x y.((Differential(x) & UnSpecializedCell(y)) -> BecomesSecularized(x,y))", "score": 0}
{"id": "eqasc_validation_1108", "prediction": "all x.(Differential(x) -> (UnspecializedCells(x) & BecomesSpecialized(x)))", "score": 0}
{"id": "eqasc_validation_1108", "prediction": "all x.(Differiation(x) -> (UnspecializedCellsBecomeSpecialized(x)))", "score": 0}
{"id": "eqasc_validation_1108", "prediction": "all x.(Differiation(x) -> (UnspecializedCell(x) & SpecializedCell(x)))", "score": 0}
{"id": "eqasc_validation_1108", "prediction": "all x y.((Differential(x) & UnspecializedCell(y)) -> Specialized(x,y))", "score": 0}
{"id": "eqasc_validation_1108", "prediction": "all x.(Differentiation(x) -> (UnsegmentedCells(x) & SpecializedCells(x)))", "score": 0}
{"id": "eqasc_validation_1108", "prediction": "all x.(Differentiation(x) -> (UnspecializedCells(y) & BecomeSpecialized(x,y)))", "score": 0}
{"id": "eqasc_validation_1108", "prediction": "all x y.((Differentiation(x) & UnspecializedCell(y)) -> GetsSpecialized(y))", "score": 0}
{"id": "eqasc_validation_1108", "prediction": "all x.(Differentiation(x) -> (UnspecializedCells(x) & BecomeSpecialized(x)))", "score": 0}
{"id": "eqasc_validation_1108", "prediction": "all x.(Differential(x) -> (UnspecializedCells(x) & SpecializedCells(x)))", "score": 0}
{"id": "eqasc_validation_1108", "prediction": "all x.(Differensation(x) -> (UnspecializedCells(x) & BecomesSpecialized(x)))", "score": 0}
{"id": "eqasc_validation_1108", "prediction": "all x.exists y.((Cell(x) & Unspecialized(y) & BecomesSpecialized(x)) -> Differentiation(x))", "score": 0}
{"id": "eqasc_validation_1109", "prediction": "all x y.(Differential(x) -> Specification(x,y))", "score": 0}
{"id": "eqasc_validation_1109", "prediction": "all x.(Differentiation(x) -> SpecializedCellLine(x))", "score": 0}
{"id": "eqasc_validation_1109", "prediction": "all x.(Differentiation(x) -> SpecializationOfCellLine(x))", "score": 0}
{"id": "eqasc_validation_1109", "prediction": "all x y.((CellLine(x) & CellLine(y)) -> Specialization(x,y))", "score": 0}
{"id": "eqasc_validation_1109", "prediction": "all x y.((Medication(x) & CellLine(y)) -> SpecializedIn(x,y))", "score": 0}
{"id": "eqasc_validation_1109", "prediction": "all x y z.((CellLine(x) & CellLine(y) & CellLine(z)) -> Specialization(x,y,z))", "score": 0}
{"id": "eqasc_validation_1109", "prediction": "all x y.((CellLine(x) & CellLine(y) & Specialization(x,y)) -> Differentiation(x))", "score": 0}
{"id": "eqasc_validation_1109", "prediction": "all x.(Differential(x) -> SpecializationOfCellLine(x))", "score": 0}
{"id": "eqasc_validation_1109", "prediction": "all x y.((CellLine(x) & CellLine(y) & Differentiation(x,y)) -> Specialization(x))", "score": 0}
{"id": "eqasc_validation_1109", "prediction": "all x.((CellLineLine(x) | CellLineLine(y)) -> Specification(x,y))", "score": 0}
{"id": "eqasc_validation_1110", "prediction": "all x.(Specializing(x) -> DifferentiationOccurs(x))", "score": 0}
{"id": "eqasc_validation_1110", "prediction": "all x.(Specializes(x) -> Distinctive(x))", "score": 0}
{"id": "eqasc_validation_1110", "prediction": "all x.(Specializes(x) -> DistinctiveOrGatherization(x))", "score": 0}
{"id": "eqasc_validation_1110", "prediction": "all x y.((Specialization(x) & Distinction(y)) -> DoesOccursWith(x,y))", "score": 0}
{"id": "eqasc_validation_1110", "prediction": "all x y.((Specificization(x) & Diffectation(y)) -> OccursWith(x,y))", "score": 0}
{"id": "eqasc_validation_1110", "prediction": "all x.(SpecializationOccursWithDiversification(x) -> Specializes(x))", "score": 0}
{"id": "eqasc_validation_1110", "prediction": "all x.(Specializes(x) -> DifferentiationOccursWith(x,specializing))", "score": 0}
{"id": "eqasc_validation_1110", "prediction": "all x.(Specializing(x) -> OccursWithDifferenciation(x))", "score": 0}
{"id": "eqasc_validation_1110", "prediction": "all x.(Specializing(x) -> Distinctive(x))", "score": 0}
{"id": "eqasc_validation_1110", "prediction": "all x y.((Specialized(x) & Differenciation(y)) -> HappensWith(x,y))", "score": 0}
{"id": "eqasc_validation_1110", "prediction": "all x y.((Specialist(x) & DifferentiationOccur(y)) -> Specializes(x,y))", "score": 0}
{"id": "eqasc_validation_1110", "prediction": "all x y.((Specialist(x) & Differenciation(y)) -> OccursWith(x,y))", "score": 0}
{"id": "eqasc_validation_1110", "prediction": "all x.(Specialization(x) -> ActivatesWithDifference(x))", "score": 0}
{"id": "eqasc_validation_1110", "prediction": "all x.(Specializing(x) -> Differences(x))", "score": 0}
{"id": "eqasc_validation_1110", "prediction": "all x y.((Specializing(x) & Differentiation(y)) -> OccursWith(x,y))", "score": 0}
{"id": "eqasc_validation_1110", "prediction": "All x.(Specialization(x) -> Distinctive(x))", "score": -1}
{"id": "eqasc_validation_1111", "prediction": "all x.(Neuron(x) -> SpecializedCell(x))", "score": 0}
{"id": "eqasc_validation_1111", "prediction": "all x y.((Neuron(x) & SpecializedCell(y)) -> Specialized(y))", "score": 0}
{"id": "eqasc_validation_1111", "prediction": "all x y.((Neuron(x) & Cell(y)) -> Specialized(x))", "score": 0}
{"id": "eqasc_validation_1111", "prediction": "all x.(NeuronTree(x) -> SpecializedCell(x))", "score": 0}
{"id": "eqasc_validation_1111", "prediction": "all x.(Nervous(x) -> SpecializedCell(x))", "score": 0}
{"id": "eqasc_validation_1111", "prediction": "all x y.((Neuron(x) & SpecializedCell(y)) -> (SettlesOn(x,y) | CellsOn(x,y)))", "score": 0}
{"id": "eqasc_validation_1112", "prediction": "all x.(Differenciation(x) -> NeuronsCreatedBy(x,y,z))", "score": 0}
{"id": "eqasc_validation_1112", "prediction": "all x y.((Distinctiation(x) & Neuronal(y)) -> IsCreatedBy(x,y))", "score": 0}
{"id": "eqasc_validation_1112", "prediction": "all x.(Differentiation(x) -> CreatesNeuronsByDifferentiation(x))", "score": 0}
{"id": "eqasc_validation_1112", "prediction": "all x y.((Differiation(x) & Neuron(y)) -> CreatedBy(x,y))", "score": 0}
{"id": "eqasc_validation_1112", "prediction": "all x y.((Differentiation(x) & Neuron(y)) -> (CanCreate(x,y) & Create(x,z) & Create(x,y)))", "score": 0}
{"id": "eqasc_validation_1112", "prediction": "all x y.((Differentiation(x) & Neuron(y)) -> CreatedBy(y,y))", "score": 0}
{"id": "eqasc_validation_1112", "prediction": "all x y z.((Distinctiation(x) & Neuron(y) & Neuron(z)) -> Creeds(g,y,z))", "score": 0}
{"id": "eqasc_validation_1112", "prediction": "all x.(Differiation(x) -> NeuralGeneration(x))", "score": 0}
{"id": "eqasc_validation_1112", "prediction": "all x y z.((Difference(x) & Neuron(y) & Neuron(z)) -> ProcessBy(x,y,z))", "score": 0}
{"id": "eqasc_validation_1112", "prediction": "all x.(Differentiation(x) -> (InvolvesNeurons(x) & CreatesNeurons(x)))", "score": 0}
{"id": "eqasc_validation_1112", "prediction": "all x y z.((Differentiation(x) & Neuron (y) & Neuron (z))) -> Creates(x,y,z))", "score": -1}
{"id": "eqasc_validation_1112", "prediction": "all x y z.(Differiation(x) -> (CreatingNeurons(y) & DifferentiatingProcess(z) & CreatesNeurons(x,y,z)))", "score": 0}
{"id": "eqasc_validation_1112", "prediction": "all x.(Differencial(x) -> (ProcessBy(x,Neurony) & Creates(x,Neurony)))", "score": 0}
{"id": "eqasc_validation_1112", "prediction": "(Process(x) & CreatesNeurons(x))", "score": 0}
{"id": "eqasc_validation_1112", "prediction": "all x.(Differentiation(x) -> (ProcessByWirth(x) & NeuronsCreated(x)))", "score": 0}
{"id": "eqasc_validation_1112", "prediction": "all x y z.((Differenciament(x) & Neuron(y) & Neuron(z)) -> (CreatedBy(z,y) & CreatedBy(x,y)))", "score": 0}
{"id": "eqasc_validation_1113", "prediction": "all x.((PlantCell(x) & SpecializedInDevelopment(x)) -> HasSpecializedDuringDevelopment(x))", "score": 0}
{"id": "eqasc_validation_1113", "prediction": "all x.(PlantCell(x) -> SpecializedDuringDevelopment(x))", "score": 0}
{"id": "eqasc_validation_1113", "prediction": "all x.((PlantCell(x) & SpecializedDuringDevelopment(x)) -> TurnsTo(x))", "score": 0}
{"id": "eqasc_validation_1113", "prediction": "all x y.((PlantCell(x) & Development(y)) -> Specialized(x,y))", "score": 0}
{"id": "eqasc_validation_1113", "prediction": "How PlantCellsBecomeSeenDuringDevelopment(x)", "score": -1}
{"id": "eqasc_validation_1113", "prediction": "all x y.((PlantCell(x) & Development(y)) -> SpecializedBetween(x,y))", "score": 0}
{"id": "eqasc_validation_1113", "prediction": "all x y.((PlantCell(x) & Development(y)) -> SpecializedDuring(x,y))", "score": 0}
{"id": "eqasc_validation_1113", "prediction": "all x.(PlantCell(x) -> Specialist(x))", "score": 0}
{"id": "eqasc_validation_1113", "prediction": "ChangingPlantCells(x) -> SpecializedDuringDevelopment(x))", "score": -1}
{"id": "eqasc_validation_1113", "prediction": "all x.(PlantCells(x) -> SpecializedDuringDevelopment(x))", "score": 0}
{"id": "eqasc_validation_1113", "prediction": "all x.((PlantCells(x) & BecomeSpecializedDuringDevelopment(x)) -> SpecializedDuringDevelopment(x))", "score": 0}
{"id": "eqasc_validation_1113", "prediction": "all x.((PlantCell(x) & SpecializedDuringDevelopment(x)) -> BecomesDuringDevelopment(x))", "score": 0}
{"id": "eqasc_validation_1113", "prediction": "all x.((PlantCell(x) & SpecializedDuringDevelopment(x)) -> GetsSpecializedDuringDevelopment(x))", "score": 0}
{"id": "eqasc_validation_1113", "prediction": "all x.((PlantCell(x) & DevelopsDuringDevelopment(x)) -> Specialized(x))", "score": 0}
{"id": "eqasc_validation_1113", "prediction": "all x.((PlantCell(x) & DevelopsSewnDuringDevelopment(x)) -> SpecializedLayers(x))", "score": 0}
{"id": "eqasc_validation_1114", "prediction": "all x.(Differentiation(x) -> (PlantsBecome(x) & SpecializedDuringDevelops(x)))", "score": 0}
{"id": "eqasc_validation_1114", "prediction": "all x.(Differentiation(x) -> (BecomesSpecializedDuringDevelopment(x) & Plant(x) & DuringDevelopment(x)))", "score": 0}
{"id": "eqasc_validation_1114", "prediction": "all x.(Differenciation(x) -> (PlantsBecomeSpecializedDuringDevelopment(x) & DevelopsDuringDevelopment(x)))", "score": 0}
{"id": "eqasc_validation_1114", "prediction": "all x.(Differentiation(x) -> (Plant(x) & SpecializedDuringDevelopment(x)))", "score": 0}
{"id": "eqasc_validation_1114", "prediction": "all x y.((Plant(x) & Development(y)) -> Differentiate(x,y))", "score": 0}
{"id": "eqasc_validation_1114", "prediction": "all x.(Differenciation(x) -> All y.(Plant(y) & BecomesSpecializedDuringDevelopment(x,y)))", "score": -1}
{"id": "eqasc_validation_1114", "prediction": "all x.(Differenciation(x) -> (SeesPlantsDevelopment(x) & SpecializedDuringDevelopment(x)))", "score": 0}
{"id": "eqasc_validation_1114", "prediction": "all x.((Plant(x) & BecomesSpecializedDuringDevelopment(x)) -> Differentiation(x))", "score": 0}
{"id": "eqasc_validation_1114", "prediction": "all x y.((Plant(x) & Development(y)) -> SpecializedDuring(x,y))", "score": 0}
{"id": "eqasc_validation_1114", "prediction": "all x y.((Plant(x) & Development(y)) -> Differentiation(x,y))", "score": 0}
{"id": "eqasc_validation_1114", "prediction": "all x y.((Plant(x) & Development(y) & SpecializedDuring(x,y)) -> Differentiation(x))", "score": 0}
{"id": "eqasc_validation_1114", "prediction": "all x y.((Plant(x) & Development(y)) -> SpecializedDuringDifferiation(x,y))", "score": 0}
{"id": "eqasc_validation_1114", "prediction": "all x.(Differentiation(x) -> (PlantsBecomeSpecializedInDevelOPment(x) & DuringDevelopment(x)))", "score": 0}
{"id": "eqasc_validation_1114", "prediction": "all x.(Differentiation(x) -> (SpecializedPlants(x) & DuringDezort(x)))", "score": 0}
{"id": "eqasc_validation_1114", "prediction": "all x y z.((Plant(x) & Development(y) & Developer(z)) -> Differenzation(x,y))", "score": 0}
{"id": "eqasc_validation_1115", "prediction": "all x.(HairCell(x) -> RequiresBran3.1ForDifference(x))", "score": -1}
{"id": "eqasc_validation_1115", "prediction": "all x.(HairCell(x) -> RequiresBrun3.1(x))", "score": -1}
{"id": "eqasc_validation_1115", "prediction": "all x.((HairCell(x) & RequiresBrun3.1(x)) -> Distinctions(x))", "score": -1}
{"id": "eqasc_validation_1115", "prediction": "all x.(HairCell(x) -> RequiresBren3.1(x))", "score": -1}
{"id": "eqasc_validation_1115", "prediction": "all x.(HairCell(x) -> RequiresBRn3.1ForDifferentialization(x))", "score": -1}
{"id": "eqasc_validation_1115", "prediction": "all x.(HairCell(x) -> RequiresBrn3.1(x))", "score": -1}
{"id": "eqasc_validation_1115", "prediction": "all x.(HairCell(x) -> RequiresBRn3.1(x))", "score": -1}
{"id": "eqasc_validation_1115", "prediction": "all x.(HairCell(x) -> RequiresBran3.1(x))", "score": -1}
{"id": "eqasc_validation_1115", "prediction": "all x.(HairCell(x) -> RequiresBran3.1ForDifferentiality(x))", "score": -1}
{"id": "eqasc_validation_1115", "prediction": "all x.(HumanCell(x) -> RequiresBrn3.1(x))", "score": -1}
{"id": "eqasc_validation_1115", "prediction": "all x.(HairCell(x) -> RequiresBrun3.1ForDiversification(x))", "score": -1}
{"id": "eqasc_validation_1115", "prediction": "all x.(HairCell(x) -> RequiresBrén3.1ForDifferenciation(x))", "score": -1}
{"id": "eqasc_validation_1116", "prediction": "all x.(Hair(x) -> SpecializedThroughDifferentiation(x))", "score": 0}
{"id": "eqasc_validation_1116", "prediction": "all x.((Hair(x) & Specialized(x) & Differenzation(x)) -> Specialized(x))", "score": 0}
{"id": "eqasc_validation_1116", "prediction": "all x.(Hair(x) -> SpecializedThroughDifference(x))", "score": 0}
{"id": "eqasc_validation_1116", "prediction": "all x y.((Hair(x) & HairFormat(x,y)) -> SpecializedByDifferenzation(y))", "score": 0}
{"id": "eqasc_validation_1116", "prediction": "all x.(Hair(x) -> Specialized(x))", "score": 0}
{"id": "eqasc_validation_1116", "prediction": "all x.(Hair(x) & SpecializedThroughDifference(x))", "score": 0}
{"id": "eqasc_validation_1116", "prediction": "all x.(Hair(x) & SpecializedThroughDifferenciation(x)) -> HairBecomes(x))", "score": -1}
{"id": "eqasc_validation_1116", "prediction": "all x.(Hair(x) -> SpecializedThroughDifferenciation(x))", "score": 0}
{"id": "eqasc_validation_1116", "prediction": "all x y.((Hair(x) & Difference(y)) -> SpecializedThroughDistribution(x))", "score": 0}
{"id": "eqasc_validation_1116", "prediction": "all x.(Hair(x) -> SpecializedTheNecessityThroughDiscipline(x))", "score": 0}
{"id": "eqasc_validation_1116", "prediction": "all x y z.((Hair(x) & Hair(y) & Differation(z)) -> SpecializedThroughDifferience(x,y,z))", "score": 0}
{"id": "eqasc_validation_1116", "prediction": "all x y z.((Hair(x) & Hair(y) & Difference(z) & SpecializedBy(y,z)) -> SpecializedBy(x,y))", "score": 0}
{"id": "eqasc_validation_1116", "prediction": "all x.(Hair(x) & SpecializingByDiversification(x))", "score": 0}
{"id": "eqasc_validation_1117", "prediction": "all x.(Cell(x) -> BasicUnitOfLife(x))", "score": 0}
{"id": "eqasc_validation_1117", "prediction": "all x y.((Cell(x) & Habitat(y)) -> BasicUnitOfLife(x,y))", "score": 0}
{"id": "eqasc_validation_1117", "prediction": "all x y z.((Cell(x) & Life(y) & BasicUnitOf(z)) -> exists w.(UnitOf(w,y) & Exists(c,w))))", "score": -1}
{"id": "eqasc_validation_1117", "prediction": "all x.(Cell(x) -> BasicLifeUnit(x))", "score": 0}
{"id": "eqasc_validation_1117", "prediction": "all x y.((Cell(x) & Life(y)) -> BasicUnit(x,y))", "score": 0}
{"id": "eqasc_validation_1118", "prediction": "all x.(Differenciation(x) -> (UnspecializedBasicUnitsOfLife(x) & SpecializedUnitsOfLife(x)))", "score": 0}
{"id": "eqasc_validation_1118", "prediction": "all x y.((Differentiation(x) & UnspecializedBasicUnitOfLife(y)) -> Specialized(x,y))", "score": 0}
{"id": "eqasc_validation_1118", "prediction": "all x.(Differenciation(x) -> (UnspecializedBasicUnitOfLife(x) & BecomesSpecialized(x)))", "score": 0}
{"id": "eqasc_validation_1118", "prediction": "all x.((Differentiation(x) & UnspecializedBasicUnitOfLife(x)) -> Specialized(x))", "score": 0}
{"id": "eqasc_validation_1118", "prediction": "all x.(Differentiation(x) -> (UnspecializedBasicUnitsOfLife(x) & SpecializedUnitsOfLife(x)))", "score": 0}
{"id": "eqasc_validation_1118", "prediction": "all x y.((Differential(x) & UnspecializedBasicUnitsOfLife(y)) -> Specialized(x))", "score": 0}
{"id": "eqasc_validation_1118", "prediction": "all x y.((Differentiation(x) & UnspecializedBasicUnitsOfLife(y)) -> BecomesSpecialized(x,y))", "score": 0}
{"id": "eqasc_validation_1118", "prediction": "all x.(Differenciation(x) -> (UnspecializedBasicUnitsOfLife(x) & BecomeSecular(x)))", "score": 0}
{"id": "eqasc_validation_1118", "prediction": "all x.(Differential(x) -> All Y.(BasicLifeUnit(y) & Unspecialized(y))))", "score": -1}
{"id": "eqasc_validation_1118", "prediction": "all x.(Differentiation(x) -> All y.(UnspecializedUnitArt(y) & BecomesSpecialized(x,y)))", "score": -1}
{"id": "eqasc_validation_1118", "prediction": "all x y.((Differentiation(x) & UnspecializedBasicUnitOfLife(y)) -> BecomesSpecialized(x,y))", "score": 0}
{"id": "eqasc_validation_1118", "prediction": "all x.(Differenciation(x) -> BecomesSpecializedBasicUnitsOfLife(x))", "score": 0}
{"id": "eqasc_validation_1118", "prediction": "all x.(Differential(x) -> (BecomesSpecificatedBasicUnitsOfLife(x) & BecomesSpecialized(x)))", "score": 0}
{"id": "eqasc_validation_1118", "prediction": "all x.(Differiation(x) -> (UnspecializedBasicUnitsOfLife(x) & BecomesSpecialized(x)))", "score": 0}
{"id": "eqasc_validation_1118", "prediction": "all x y.((Differential(x) & UnspecializedBasicUnitsOfLife(y)) -> Specialized(x,y))", "score": 0}
{"id": "eqasc_validation_1119", "prediction": "all x.(NerveCell(x) -> (Large(x) & Complicated(x) & HighlySpecialized(x)))", "score": 0}
{"id": "eqasc_validation_1119", "prediction": "all x.(NucleusCell(x) -> (LargeCell(x) & ComplicatedCell(x) & HighlySpecializedCell(x)))", "score": 0}
{"id": "eqasc_validation_1119", "prediction": "all x.(NeurineCell(x) -> (Large(x) & Complicated(x) & HighlySpecialized(x)))", "score": 0}
{"id": "eqasc_validation_1119", "prediction": "all x.(NerveCell(x) -> (LargeCell(x) & ComplexCell(x) & HighlySpezializedCell(x)))", "score": 0}
{"id": "eqasc_validation_1119", "prediction": "all x.((NerveCell(x) & Large(x) & Complicated(x) & HighlySpecialized(x)) -> SpecializedCell(x))", "score": 0}
{"id": "eqasc_validation_1119", "prediction": "all x.(NerveCell(x) -> (Large(x) & Complex(x) & HighlySpecialized(x)))", "score": 0}
{"id": "eqasc_validation_1119", "prediction": "all x.(NerveCell(x) -> (Large(x) & Complimentary(x) & HighlySpecialized(x)))", "score": 0}
{"id": "eqasc_validation_1119", "prediction": "all x.(NerveCell(x) -> (LargeCell(x) & Complicated(x) & HighlySpecialized(x)))", "score": 0}
{"id": "eqasc_validation_1119", "prediction": "all x.(NervusCell(x) -> (Large(x) & Complicated(x) & HighlySpecialized(x)))", "score": 0}
{"id": "eqasc_validation_1119", "prediction": "all x y.((NerveCell(x) & Large(y)) -> Complicated(y) & HighlySpecialized(y))", "score": 0}
{"id": "eqasc_validation_1119", "prediction": "all x.(NerveCell(x) -> (Large(x) & Compromised(x) & HighlySpecialized(x)))", "score": 0}
{"id": "eqasc_validation_1120", "prediction": "all x.(Differential(x) -> NerveCellDevelopment(x))", "score": 0}
{"id": "eqasc_validation_1120", "prediction": "all x.(Differiation(x) -> NerveCellDevelopment(x))", "score": 0}
{"id": "eqasc_validation_1120", "prediction": "all x y z.((Distinctiation(x) & NerveCellDevelopment(y) & NerveCell(z)) -> EssentialToDifferentialDissociation(x,y,z))", "score": 0}
{"id": "eqasc_validation_1120", "prediction": "all x y.((Differentiation(x) & NerveCellDevelopment(y)) -> EssentialToDignitation(x,y))", "score": 0}
{"id": "eqasc_validation_1120", "prediction": "all x y.((Differiation(x) & NerveCellDevelopment(y) & ElementsTo(x,y)) -> EssentialTo(x,y))", "score": 0}
{"id": "eqasc_validation_1120", "prediction": "all x.(Differiation(x) -> EssentialToNervousCellDevelopment(x))", "score": 0}
{"id": "eqasc_validation_1120", "prediction": "all x.(Differensation(x) -> (EssentialToNervineCellDevelopment(x) & EssentialToNerveCellDevelopment(x)))", "score": 0}
{"id": "eqasc_validation_1120", "prediction": "all x.(Differentiation(x) -> NerveCellDevelopment(x))", "score": 0}
{"id": "eqasc_validation_1120", "prediction": "all x y.((Differentiation(x) & NerveCellDevelopment(y)) -> Essential(x,y))", "score": 0}
{"id": "eqasc_validation_1120", "prediction": "all x.(Differenciation(x) -> NucleusForNervousCellDevelopment(x))", "score": 0}
{"id": "eqasc_validation_1120", "prediction": "all x.(Differential(x) -> NeroCellDevelopment(x))", "score": 0}
{"id": "eqasc_validation_1120", "prediction": "all x y z.((Differiation(x) & NerveCellDevelopment(y) & NerveCellDestination(z)) -> EssentialToDevelopment(x,y,z))", "score": 0}
{"id": "eqasc_validation_1120", "prediction": "all x.(DifferentialDifference(x) -> NerveCellDevelopment(x))", "score": 0}
{"id": "eqasc_validation_1120", "prediction": "all x.(Difference(x) -> NerveCellDevelopment(x))", "score": 0}
{"id": "eqasc_validation_1120", "prediction": "all x.(Differenciation(x) -> EssentialToNerveCellDevelopment(x))", "score": 0}
{"id": "eqasc_validation_1120", "prediction": "all x y z.((Differiation(x) & NerveCell(y) & NerveCell(z)) -> EssentialToNervousCellDevelopment(x,y,z))", "score": 0}
{"id": "eqasc_validation_1121", "prediction": "all x.(Neurone(x) -> HighlySpecializedCell(x))", "score": 0}
{"id": "eqasc_validation_1121", "prediction": "all x.(Neuron(x) -> HighlySpecializedCell(x))", "score": 0}
{"id": "eqasc_validation_1121", "prediction": "all x.(Neuron(x) -> HighlySpecialized(x))", "score": 0}
{"id": "eqasc_validation_1121", "prediction": "all x.(Neuron(x) -> HighlySpecifiatedCell(x))", "score": 0}
{"id": "eqasc_validation_1121", "prediction": "all x.(Neurone(x) -> (HighlySpecializedCell(x) & HighlySelective(x)))", "score": 0}
{"id": "eqasc_validation_1121", "prediction": "all x.(Neurone(x) -> HighlySpecialized(x))", "score": 0}
{"id": "eqasc_validation_1122", "prediction": "all x.((Differentiation(x) & Neurone(y)) -> CreatedBy(y,x))", "score": 0}
{"id": "eqasc_validation_1122", "prediction": "all x y.((Differentiation(x) & Neuron(y)) -> Creates(x,y))", "score": 0}
{"id": "eqasc_validation_1122", "prediction": "all x y z.((Differentiation(x) & Neuron(y) & Neuron(z)) -> (Created(x,y) & Created(y,z)))", "score": 0}
{"id": "eqasc_validation_1122", "prediction": "all x y.((DifferentialProcess(x) & Neuron(y)) -> CreatedBy(y,nano))", "score": 0}
{"id": "eqasc_validation_1122", "prediction": "all x y.((Differiation(x) & Neuron(y)) -> CreatedBy(x,y))", "score": 0}
{"id": "eqasc_validation_1122", "prediction": "all x.(Differenciation(x) -> (ProcessByCreationOfNeurines(x).))", "score": -1}
{"id": "eqasc_validation_1122", "prediction": "all x y z.((Differiation(x) & Neuron(y) & Neuron(z)) -> CreatedBy(x,y,z))", "score": 0}
{"id": "eqasc_validation_1122", "prediction": "all x y z.((Differenciation(x) & Neurone(y) & Neurone(z)) -> CreatedBy(x,y,z))", "score": 0}
{"id": "eqasc_validation_1122", "prediction": "all x y.((Differentiation(x) & Neurone(y)) -> CreatedBy(x,y))", "score": 0}
{"id": "eqasc_validation_1122", "prediction": "all x.(Differiation(x) -> (Process(x) & CreatesNeuronines(x)))", "score": 0}
{"id": "eqasc_validation_1122", "prediction": "all x.((Distinctiation(x) & Neurones(y)) -> CreatedBy(x,y))", "score": 0}
{"id": "eqasc_validation_1122", "prediction": "all x.(Differential(x) -> NeuroneCreation(x))", "score": 0}
{"id": "eqasc_validation_1122", "prediction": "all x.(Differencial(x) -> Neuronia(x))", "score": 0}
{"id": "eqasc_validation_1122", "prediction": "all x y.((Neuron(x) & Neuron(y)) -> Creates(x,y))", "score": 0}
{"id": "eqasc_validation_1122", "prediction": "all x.(SymbioticDifferensation(x) -> (CreatesNeurones(x) & CreatesNeurines(x)))", "score": 0}
{"id": "eqasc_validation_1122", "prediction": "all x y z.((Differential(x) & Neuron(y) & Neuron(z)) -> (CreatedBy(x,y) & CreatedBy(x,z)))", "score": 0}
{"id": "eqasc_validation_1123", "prediction": "all x y z.((THelperCell(x) & MemoryCell(y) & EffectorCell(z)) -> DifferentiatesTo(x,y,z))", "score": 0}
{"id": "eqasc_validation_1123", "prediction": "all x.(ThelperCell(x) -> (MemoryCells(x) | EffectorCells(x)))", "score": 0}
{"id": "eqasc_validation_1123", "prediction": "all x y.((THelperCell(x) & MemoryCell(y) & EffectorCell(y)) -> DifferentiatesTo(x,y))", "score": 0}
{"id": "eqasc_validation_1123", "prediction": "all x.(THelperCell(x) -> (Different(x,MemoryCells) & Differentiate(x,ActorCell)))", "score": 0}
{"id": "eqasc_validation_1123", "prediction": "all x.(THelperCell(x) -> (DifferentToMemorycells(x) & DifferentToEffectorCells(x)))", "score": 0}
{"id": "eqasc_validation_1123", "prediction": "all x.(THelperCell(x) -> (MemoryCell(x) | EffectorCell(x)))", "score": 0}
{"id": "eqasc_validation_1123", "prediction": "all x.(THelperCell(x) -> (DifferentTo(x,MediationCell) & DifferentTo(x,EffectivorCell)))", "score": 0}
{"id": "eqasc_validation_1123", "prediction": "all x.(THelperCell(x) -> (DistinctToMemoryCell(x) & DifferentToEffectorCell(x)))", "score": 0}
{"id": "eqasc_validation_1123", "prediction": "all x.(THelperCell(x) -> (DifferentTo(x,MemoryCells) & DifferentTo(x,EffectorCells)))", "score": 0}
{"id": "eqasc_validation_1123", "prediction": "all x y.((THelperCell(x) & MemoryCell(y) & EffectorCell(x)) -> DifferentiatesTo(x,y))", "score": 0}
{"id": "eqasc_validation_1123", "prediction": "all x y.((T HelperCell(x) & MemoryCell(y) & EffectorCell(x)) -> DifferentiatesTo(x,y))", "score": -1}
{"id": "eqasc_validation_1123", "prediction": "all x.(THelperCell(x) -> (DistributesToMemoryCells(x) | DistributesToEffectorCells(x)))", "score": 0}
{"id": "eqasc_validation_1123", "prediction": "all x.(THelperCell(x) -> (SeparatesToMemoryCells(x) | DiscriminatesToEffectorCells(x)))", "score": 0}
{"id": "eqasc_validation_1123", "prediction": "all x y.((THelperCell(x) & MemoryCell(y)) | EffectorCell(y)) -> DifferentiatesTo(x,y))", "score": -1}
{"id": "eqasc_validation_1123", "prediction": "all x.(THelperCell(x) -> (DifferentMemoryCell(x) & DifferentEffectorCell(x)))", "score": 0}
{"id": "eqasc_validation_1123", "prediction": "all x.(THelperCell(x) -> (Different(x,MemoryCells) & Different(x,EffectivorCells)))", "score": 0}
{"id": "eqasc_validation_1124", "prediction": "all x.(THelperCell(x) -> (MemoryCell(x) & EffectorCell(x)))", "score": 0}
{"id": "eqasc_validation_1124", "prediction": "(MemoryCells(t) | EffectorCells(t)))", "score": -1}
{"id": "eqasc_validation_1124", "prediction": "all x.(T HelperCells(x) -> (MemoryCell(x) | EffectorCell(x)))", "score": -1}
{"id": "eqasc_validation_1124", "prediction": "all x y z.((THelperCell(x) & MemoryCell(y) & EffectorCell(z)) -> (Magnetic(x) | EffectorCell(x)))", "score": 0}
{"id": "eqasc_validation_1124", "prediction": "all x.((ThelperCell(x) & MemoryCell(x) & EffectorCell(x)) -> MoreSpezialized(x))", "score": 0}
{"id": "eqasc_validation_1124", "prediction": "all x y z.((THelperCell(x) & MemoryCell(y) & EffectorCell(z)) -> (MoreSpecialized(x,y) & MoreSpecialized(x,z)))", "score": 0}
{"id": "eqasc_validation_1124", "prediction": "all x y.((THelperCell(x) & MemoryCell(y) & EffectorCell(y)) -> MoreSpecializedAs(x,y))", "score": 0}
{"id": "eqasc_validation_1124", "prediction": "all x.(THelperCell(x) -> (MemoryCell(x) | EffectorCell(x)))", "score": 0}
{"id": "eqasc_validation_1124", "prediction": "all x y z.((T HelperCell(x) & MemoryCell(y) & EffectorCell(z)) -> (SpecialistInMemoryCells(x) & MoreSpecialistInEffectorCells(x)))", "score": -1}
{"id": "eqasc_validation_1124", "prediction": "all x.((T HelperCell(x) & MemoryCell(x) & EffectorCell(x)) -> (Dispensive(x) & -Dispensable(x)))", "score": -1}
{"id": "eqasc_validation_1124", "prediction": "all x.((THelperCell(x) & MemoryCell(x) & EffectorCell(x)) -> MoreSpezifique(x))", "score": 0}
{"id": "eqasc_validation_1125", "prediction": "all x.((Method(x) & Process(x)) -> Activity(x))", "score": 0}
{"id": "eqasc_validation_1125", "prediction": "(Activities(Methods) & Activities(Processes))", "score": 0}
{"id": "eqasc_validation_1125", "prediction": "all x.(Method(x) -> (Process(x) & Operate(x)))", "score": 0}
{"id": "eqasc_validation_1125", "prediction": "all x.((Method(x) | Process(x)) -> Activities(x))", "score": 0}
{"id": "eqasc_validation_1125", "prediction": "all x.((Method(x) | Process(x)) -> Activity(x))", "score": 0}
{"id": "eqasc_validation_1125", "prediction": "all x.(Event(x) -> (Method(x) | Process(x)))", "score": 0}
{"id": "eqasc_validation_1125", "prediction": "all x.((Method(x) & Process(x)) -> Activities(x))", "score": 0}
{"id": "eqasc_validation_1126", "prediction": "all x.(Differiation(x) -> (TheMethodBy(x,unspecializedCells) & SpecializedCells(x)))", "score": 0}
{"id": "eqasc_validation_1126", "prediction": "all x.(Differential(x) -> (UnspecializedCell(x) & BecomesSpecialized(x)))", "score": 0}
{"id": "eqasc_validation_1126", "prediction": "All x.(Differentiation(x) -> (UnspecializedCellsBecomeSpecialized(x)))", "score": -1}
{"id": "eqasc_validation_1126", "prediction": "all x.(Discrimination(x) -> (UnspecializedCells(x) & Specialist(x)))", "score": 0}
{"id": "eqasc_validation_1126", "prediction": "all x y.((Discipline(x) & UnspecializedCell(y)) -> Specialized(x,y))", "score": 0}
{"id": "eqasc_validation_1126", "prediction": "all x y.((UnspecializedCell(x) & SpecializedCell(y)) -> Distinction(x))", "score": 0}
{"id": "eqasc_validation_1126", "prediction": "all x.(Differential(x) -> (UnspecializedCell(x) & SpecializedCell(x)))", "score": 0}
{"id": "eqasc_validation_1126", "prediction": "all x.(Differential(x) -> (UnspecializedCells(x) & SpecializedCells(x)))", "score": 0}
{"id": "eqasc_validation_1126", "prediction": "all x y.((SpecializedCell(x) & SpecializedCell(y)) -> Differentiation(x))", "score": 0}
{"id": "eqasc_validation_1126", "prediction": "all x.(Differentiation(x) -> (InformsSpecializedCells(x) & DevelopsSpecializedCells(x)))", "score": 0}
{"id": "eqasc_validation_1126", "prediction": "all x.(Differentiation(x) -> (UnspecializedCells(x) & SpecializedCells(x)))", "score": 0}
{"id": "eqasc_validation_1126", "prediction": "all x.(Differentiation(x) -> HoweverSpecializedCellsBecome(x))", "score": 0}
{"id": "eqasc_validation_1126", "prediction": "all x.(Differimentation(x) -> (UnspecializedCellsBecomeSpecialized(x)))", "score": 0}
{"id": "eqasc_validation_1126", "prediction": "all x.(Differentiation(x) -> BecomesSpecialized(x))", "score": 0}
{"id": "eqasc_validation_1126", "prediction": "all x.(Differentiation(x) -> (UnSpecializedCells(x) & SpecializedCells(x)))", "score": 0}
{"id": "eqasc_validation_1126", "prediction": "all x.(Differiation(x) -> (UnspecializedCells(x) & SpecializedCells(x)))", "score": 0}
{"id": "eqasc_validation_1127", "prediction": "all x y.((Ancestors(x,y) & Haigfish(y)) -> EarlyVertebrate(x))", "score": 0}
{"id": "eqasc_validation_1127", "prediction": "all x.(AncestorsOfHugfish(x) -> TheOresterialVertebrate(x))", "score": 0}
{"id": "eqasc_validation_1127", "prediction": "all x.(HiddenAncestorsOfHagfish(x) -> EarlyVertebrate(x))", "score": 0}
{"id": "eqasc_validation_1127", "prediction": "all x.(AncestorsOfHugfish(x) -> FrühestVertebrate(x))", "score": 0}
{"id": "eqasc_validation_1127", "prediction": "all x.(Hagfish(x) -> TheOwnVertilizedEarthbiter(x))", "score": 0}
{"id": "eqasc_validation_1127", "prediction": "all x.(HegfishAncestors(x) -> EarlyVertebrate(x))", "score": 0}
{"id": "eqasc_validation_1127", "prediction": "all x.(HaggfishAncestors(x) -> earliestVertebrate(x))", "score": 0}
{"id": "eqasc_validation_1127", "prediction": "all x.((AncestorOfHogfish(x) & FoundInHagfish(x)) -> EarlyVertebrate(x))", "score": 0}
{"id": "eqasc_validation_1127", "prediction": "all x.(HagfishAncestors(x) -> EarlyVertebrate(x))", "score": 0}
{"id": "eqasc_validation_1127", "prediction": "all x.(HasAcestors(x) -> earliestVertebrate(x))", "score": 0}
{"id": "eqasc_validation_1127", "prediction": "all x.(HaggfishAncestors(x) -> EarlierVeterbrate(x))", "score": 0}
{"id": "eqasc_validation_1127", "prediction": "all x.(Hagfish(x) -> (AncestorsOfHagafish(x) & earliestVertebrates(x)))", "score": 0}
{"id": "eqasc_validation_1127", "prediction": "all x.(HagfishAncestors(x) -> AmongstOrderingVertebrate(x))", "score": 0}
{"id": "eqasc_validation_1127", "prediction": "all x.((AncestorsOfHagfish(x) & EarliestVertebrate(x)) -> Thesis(x))", "score": 0}
{"id": "eqasc_validation_1127", "prediction": "all x.(Hagagefish(x) -> earliestVertebrate(x))", "score": 0}
{"id": "eqasc_validation_1127", "prediction": "all x.(AncestorOfHagfish(x) -> earliestVertebrate(x))", "score": 0}
{"id": "eqasc_validation_1128", "prediction": "all x.((Animal(x) & HasBackboneShower(x)) -> Vertebrates(x))", "score": 0}
{"id": "eqasc_validation_1128", "prediction": "all x.((Animal(x) & HasBackbone(x)) -> Vertebrate(x))", "score": 0}
{"id": "eqasc_validation_1128", "prediction": "all x.((Animal(x) & HasBackbone(x)) -> Vertebrates(x))", "score": 0}
{"id": "eqasc_validation_1128", "prediction": "all x.((Animal(x) & HasBackbones(x)) -> Vertebrates(x))", "score": 0}
{"id": "eqasc_validation_1128", "prediction": "all x.((Animal(x) & HasBackbones(x)) -> Vertebrate(x))", "score": 0}
{"id": "eqasc_validation_1129", "prediction": "all x.(AcestorsOfHagfish(x) -> -FriendliestAnimalWithBackbones(x))", "score": 0}
{"id": "eqasc_validation_1129", "prediction": "all x.(AncestorsOfHagagfish(x) -> EarlyAnimal(x))", "score": 0}
{"id": "eqasc_validation_1129", "prediction": "all x y.((AncestorsOfHagfish(x) & Animal(y)) -> EarlyBirdbone(x,y))", "score": 0}
{"id": "eqasc_validation_1129", "prediction": "all x y.((Ancestors(x) & Haigfish(y)) -> EarlyAnimal(x,y))", "score": 0}
{"id": "eqasc_validation_1129", "prediction": "all x.(HagfishAncestors(x) -> FrühestHaggfishAnimalWithBackbones(x))", "score": 0}
{"id": "eqasc_validation_1129", "prediction": "all x.(Hugfish(x) -> (Ancestor(x,hagfish) & HasBackbones(x,hagfish)))", "score": 0}
{"id": "eqasc_validation_1129", "prediction": "all x y.((Ancestry(x) & Hagfish(y)) -> (BorrowerAnimal(x,y) & HasBackbone(x)))", "score": 0}
{"id": "eqasc_validation_1129", "prediction": "all x.(AncestorOfHagfish(x) -> EarlyAnimal(x))", "score": 0}
{"id": "eqasc_validation_1129", "prediction": "all x.(AncestorsOfHagfish(x) -> OneOfThirtyPrimaryAnimalWithBackbones(x))", "score": 0}
{"id": "eqasc_validation_1129", "prediction": "all x y z.((Angestors(x) & Hagfish(y) & TheOwnAnimal(z) & HasBackbones(z)) -> (TwoFaithenAnimal(x,y) & EarlyAnimal(x,z)))", "score": 0}
{"id": "eqasc_validation_1129", "prediction": "all x.((AncestorsOfHagfish(x) & -Backbones(x)) -> earliestAnimalWithBackbone(x))", "score": 0}
{"id": "eqasc_validation_1129", "prediction": "all x.(AncestorsOfHagfish(x) -> EarlyAnimal(x))", "score": 0}
{"id": "eqasc_validation_1129", "prediction": "all x.(HagfishAncestors(x) -> (EarlyAnimalBackbone(x) & EmbryoAnimal(x)))", "score": 0}
{"id": "eqasc_validation_1129", "prediction": "all x y.((Ancestor(x) & Dragon(y)) -> (Animal(x,y) & HasBackbone(x)))", "score": 0}
{"id": "eqasc_validation_1129", "prediction": "all x y.((Ancestor(x) & Hagfish(y)) -> ArrestAnimal(x,y))", "score": 0}
{"id": "eqasc_validation_1129", "prediction": "all x y.((AcestorsOfHagfish(x) & Animal(y)) -> AllOfBackbones(y,z))", "score": 0}
{"id": "eqasc_validation_1130", "prediction": "all x.(RecentDescendantsOfJawlessFish(x) -> (SeemsToBeInLampreysAndHagafisk(x)))", "score": 0}
{"id": "eqasc_validation_1130", "prediction": "all x.((JawlessFish(x) & EarlyJawless(x)) -> (TodayInLambreys(x) | TodayInHagicfishes(x)))", "score": 0}
{"id": "eqasc_validation_1130", "prediction": "all x.(Scendant(x) -> (EarlyJawlessFish(x) & (Hagfish(x) | Lamprey(x))))", "score": 0}
{"id": "eqasc_validation_1130", "prediction": "all x.((Scendant(x) & JawlessFish(x)) -> (TodayInLampreysAndHagfishes(x)))", "score": 0}
{"id": "eqasc_validation_1130", "prediction": "all x y.((EarlyJawlessFish(x) & Lamprey(y) & Hagfish(y)) -> Descendant(x,y))", "score": 0}
{"id": "eqasc_validation_1130", "prediction": "all x.(Descendant(x) -> (JawlessFish(x) & PresentInLampreysAndHagafishes(x)))", "score": 0}
{"id": "eqasc_validation_1130", "prediction": "all x y.((FrühJawlessFish(x) & Lamprey(y) & Hagfish(y)) -> DescendantTo(x,y))", "score": 0}
{"id": "eqasc_validation_1130", "prediction": "all x.((Descendant(x) & EarlyJawlessFish(x)) -> PresentedToday(x,lampreys & Hagfishes))", "score": -1}
{"id": "eqasc_validation_1130", "prediction": "all x.(Descendant(x) -> (JawlessFish(x) & FoundInLampreysAndHagafishes(x)))", "score": 0}
{"id": "eqasc_validation_1130", "prediction": "all x.((JawlessFish(x) & Lamprey(x) & Hagfish(x)) -> DescendantInPosition(x))", "score": 0}
{"id": "eqasc_validation_1130", "prediction": "all x.((Descendant(x) & EarlyJawlessFish(x)) -> (exists y.(Lamprey(y) | Hagfish(y)) & Present(x,y))))", "score": -1}
{"id": "eqasc_validation_1130", "prediction": "all x y z.((Descendant(x) & JawlessFish(y) & Lamprey(z) & Hagfish(z)) -> exists w.(Ancient(x,y,z) & Dabylon(w) & Present(x) & inLambria(x,w)) & InGawfish(x,w)))", "score": -1}
{"id": "eqasc_validation_1130", "prediction": "all x.((DescendantOfEarlyJawlessFish(x)) -> (PatternInLampreys(x) | PresentInHagfishes(x)))", "score": 0}
{"id": "eqasc_validation_1130", "prediction": "all x.((FrühJawlessFish(x) & Lamprey(x) & Hagfish(x)) -> DistinctDescendants(x))", "score": 0}
{"id": "eqasc_validation_1130", "prediction": "all x y z.((BabylessFish(x) & Lamprey(y) | Hagfish(y)) -> (DescendantsOf(x,y) & PresentIn(x,z)))", "score": 0}
{"id": "eqasc_validation_1130", "prediction": "all x.((Descendant(x) ofJawlessFish(x)) -> (Present(x,lampreys) & Present(x,hagfishes)))", "score": -1}
{"id": "eqasc_validation_1131", "prediction": "all x.((Vertebrate(x) & JawlessFish(x)) -> Friend or Fossil(x))", "score": 0}
{"id": "eqasc_validation_1131", "prediction": "all x.((Vertebrate(x) & JawlessFish(x)) -> Early(x))", "score": 0}
{"id": "eqasc_validation_1131", "prediction": "all x.((Vertebrates(x) & JawlessFish(x)) -> Early(x))", "score": 0}
{"id": "eqasc_validation_1131", "prediction": "(JawlessFish(-EarlyVertebrite))", "score": 0}
{"id": "eqasc_validation_1131", "prediction": "all x.(EarlyVertebrate(x) -> (Jawless(x) | Fisher(x)))", "score": 0}
{"id": "eqasc_validation_1131", "prediction": "all x.((EarlyVertebrates(x) & JawlessFishes(x)) -> JawlessChart(x))", "score": 0}
{"id": "eqasc_validation_1131", "prediction": "all x.((Brutebrate(x) & JawlessFish(x)) -> Early(x))", "score": 0}
{"id": "eqasc_validation_1131", "prediction": "all x.((Vertebrate(x) & Jawless(x)) -> Early(x))", "score": 0}
{"id": "eqasc_validation_1131", "prediction": "all x y.((Vertebrate(x) & JawlessFish(y)) -> Early(x:))", "score": 0}
{"id": "eqasc_validation_1131", "prediction": "all x y z.((Vertebrate(x) & JawlessFish(y) & Vertebrate(z)) -> Early(x,z))", "score": 0}
{"id": "eqasc_validation_1131", "prediction": "all x.((FirstVertebrates(x) & JawlessFish(x)) -> JawlessFish(x))", "score": 0}
{"id": "eqasc_validation_1131", "prediction": "all x.((Vertebrate(x) & JawlessFish(x)) -> EarlyAverage(x))", "score": 0}
{"id": "eqasc_validation_1131", "prediction": "all x y z.((Vertebrate(x) & JawlessFish(y) & Fish(z)) -> Inigo(x,y,z))", "score": 0}
{"id": "eqasc_validation_1131", "prediction": "all x y.(((Vertebrate(x) & Jawless(y)) -> EarlyNebrate(x))", "score": -1}
{"id": "eqasc_validation_1132", "prediction": "all x.(Vertebrates(x) -> (Animal(x) & HasBackbone(x)))", "score": 0}
{"id": "eqasc_validation_1132", "prediction": "all x.(Vertebrates(x) -> HasBackbone(x))", "score": 0}
{"id": "eqasc_validation_1132", "prediction": "all x.(Vertebrate(x) -> HasBackbone(x))", "score": 0}
{"id": "eqasc_validation_1132", "prediction": "all x.(Vertebrat(x) -> (Animal(x) & HasBackbone(x)))", "score": 0}
{"id": "eqasc_validation_1132", "prediction": "all x y.((Vertebrates(x) & Animal(y) & HasBackbone(x)) -> HasBackbone(x,y))", "score": 0}
{"id": "eqasc_validation_1132", "prediction": "all x.(Vertebrat(x) -> HasBackbone(x))", "score": 0}
{"id": "eqasc_validation_1132", "prediction": "all x.(Vertebrates(x) -> Animal(x))", "score": 0}
{"id": "eqasc_validation_1132", "prediction": "all x.(Vertebrates(x) -> (Animal(x) & Backbone(x)))", "score": 0}
{"id": "eqasc_validation_1133", "prediction": "all x.(EarlyAges(x,hagfish) -> HadBackbones(x))", "score": 0}
{"id": "eqasc_validation_1133", "prediction": "all x y z.((Ancestors(x) & Hagfish(y) & HadBackbones(z)) -> HadBackbones(y))", "score": 0}
{"id": "eqasc_validation_1133", "prediction": "all x.(History(x) -> (Ancients(x,ha) & (HasBackbone(x,h) | HadBackbone(x))))", "score": 0}
{"id": "eqasc_validation_1133", "prediction": "all x y z.((Ancient(x) & Hagfish(y) & Backbone(z)) -> Had(x,y,z))", "score": 0}
{"id": "eqasc_validation_1133", "prediction": "all x.((Ancient(x) & Hagfish(v)) -> likelyHadBackbones(x,v))", "score": 0}
{"id": "eqasc_validation_1133", "prediction": "all x.((Ancient(x) & HadBackbones(x)) -> Hagfish(x))", "score": 0}
{"id": "eqasc_validation_1133", "prediction": "all x.((Ancestor(x) & Aestors(x,hagfish) & HadBackbones(x)) -> HadBackbones(x))", "score": 0}
{"id": "eqasc_validation_1133", "prediction": "all x.((AncientsOfHagfish(x) & HadBackbones(x)) -> WasHaggfish(x))", "score": 0}
{"id": "eqasc_validation_1133", "prediction": "all x.((HagfishAncient(x) & HadBackbones(x)) -> HasBackbones(x))", "score": 0}
{"id": "eqasc_validation_1133", "prediction": "all x.(HasBackbone(x) -> (AncientsOfHagfish(x) & ProbablyHasBackbone(x)))", "score": 0}
{"id": "eqasc_validation_1133", "prediction": "all x.(HagastfishAncestors(x) -> HadBackbones(x))", "score": 0}
{"id": "eqasc_validation_1133", "prediction": "all x.(Borrowing(x,y) -> (AncientsOfHagfish(y) & HadBackbones(x,y)))", "score": 0}
{"id": "eqasc_validation_1133", "prediction": "all x y.((Ancient(x) & Humptick(y) & HadBackbones(x,y)) -> HadBackbone(x,y))", "score": 0}
{"id": "eqasc_validation_1133", "prediction": "all x.((AncestorsOfHagfish(x) & HadBackbones(x)) -> HadAncestorsOfHagfish(x))", "score": 0}
{"id": "eqasc_validation_1133", "prediction": "all x.((Ancient(x) & Hagfish(y)) -> MostProbablyHasBackbone(x,y))", "score": 0}
{"id": "eqasc_validation_1133", "prediction": "all xerox.(HistoryOfHagfish(x) -> MainlyHadBackbones(x))", "score": -1}
{"id": "eqasc_validation_1134", "prediction": "(IsosmoticWithSalineEnvironments(Haggfish) & IsosmoticWithSalineEnvironments(Sharks))", "score": 0}
{"id": "eqasc_validation_1134", "prediction": "all x y.((Haggfish(x) & Shark(y)) -> (Isosmotic(x) & SalineEnvironment(y)))", "score": 0}
{"id": "eqasc_validation_1134", "prediction": "all x.((Hagfish(x) & Shark(x)) -> (Isosmotic(x) & SalineEnvironment(x)))", "score": 0}
{"id": "eqasc_validation_1134", "prediction": "(Isosmotic(Haggfish) & Isosmotic(Shark(Shark))", "score": -1}
{"id": "eqasc_validation_1134", "prediction": "(isosmotic(haugfish,sarine) & isosmotic(haugfish,shark))", "score": 0}
{"id": "eqasc_validation_1134", "prediction": "all x.(Hegfish(x) | Shark(x)) -> IsosmoticWithSalineEnvironments(x))", "score": -1}
{"id": "eqasc_validation_1134", "prediction": "all x.((Haggfish(x) & Shark(x)) -> IsosmoticEnvironments(x))", "score": 0}
{"id": "eqasc_validation_1134", "prediction": "all x y.((Hagfish(x) & Shark(y)) -> (IsosmoticWithSalineEnvironment(x,y) & IsosmoticWithSalineEnvironment(y,z)))", "score": 0}
{"id": "eqasc_validation_1134", "prediction": "(isosmotic(Haggfish) & isosmotic(Sharks))", "score": 0}
{"id": "eqasc_validation_1134", "prediction": "all x.((Haffish(x) & Shark(x)) -> IsosmoticWithSalineEnvironments(x))", "score": 0}
{"id": "eqasc_validation_1134", "prediction": "(SalineEnvironments(a) & InAquaticEnvironments(b) & Isosmotic(h))", "score": 0}
{"id": "eqasc_validation_1134", "prediction": "all x.(Hawkfish(x) -> (Isosmotic(x) & Isosmotic(x) & SalineEnvironment(x)))", "score": 0}
{"id": "eqasc_validation_1134", "prediction": "all x y.((Haggfish(x) & Shark(y)) -> (IsosmoticWithSalineEnvironment(x,y) & IsosmoticWithSalineEnvironment(y,x)))", "score": 0}
{"id": "eqasc_validation_1134", "prediction": "all x y.((Haggfish(x) & Shark(y)) -> (Isosmotic(x) & Saline(y) & Does(x,y)))", "score": 0}
{"id": "eqasc_validation_1134", "prediction": "all x.((Haggfish(x) | Shark(x)) -> Isosmotic(x))", "score": 0}
{"id": "eqasc_validation_1134", "prediction": "(SalineEnvironments(Haffish) & SealineEnvironments(Sharks))", "score": 0}
{"id": "eqasc_validation_1135", "prediction": "all x.(Shark(x) -> Vertebrates(x))", "score": 0}
{"id": "eqasc_validation_1135", "prediction": "all x y.((Shark(x) & Vertebrate(y)) -> Vertebrate(x,y))", "score": 0}
{"id": "eqasc_validation_1135", "prediction": "all x.(Shark(x) -> (Vertebrate(x) | Vertebrate(x)))", "score": 0}
{"id": "eqasc_validation_1135", "prediction": "all x.(Shark(x) -> (Vertebrate(x) & Vertebrates(x)))", "score": 0}
{"id": "eqasc_validation_1135", "prediction": "all x.(Shark(x) -> (Vertebrate(x) & Vertebrate(x)))", "score": 0}
{"id": "eqasc_validation_1135", "prediction": "all x.(Shark(x) -> (Vertebrate(x) | Vertebrates(x)))", "score": 0}
{"id": "eqasc_validation_1135", "prediction": "all x.(Shark(x) -> Vertebrate(x))", "score": 0}
{"id": "eqasc_validation_1135", "prediction": "all x.(Shark(x) -> (Vertebrate(x) & Vertebrate(x) & Vertebrate(x)))", "score": 0}
{"id": "eqasc_validation_1135", "prediction": "all x.(Shark(x) -> (Vertebrates(x) & Vertebrates(x)))", "score": 0}
{"id": "eqasc_validation_1136", "prediction": "all x y z.((Vertebrat(x) & (Horse(y) | Horse(z))) -> HasBackbone(x,y))", "score": 0}
{"id": "eqasc_validation_1136", "prediction": "all x.(Vertebrate(x) -> (Animal(x) & HasBackbones(x)))", "score": 0}
{"id": "eqasc_validation_1136", "prediction": "all x.(Vertebrates(x) -> (Animal(x) & HasBackbone(x)))", "score": 0}
{"id": "eqasc_validation_1136", "prediction": "all x.(Vertebrates(x) -> (Animal(x) & HasBackbone(x) & Horses(x)))", "score": 0}
{"id": "eqasc_validation_1136", "prediction": "all x.(Vertebrat(x) -> (Animal(x) & HasBackbone(x)))", "score": 0}
{"id": "eqasc_validation_1136", "prediction": "all x.(Vertebrates(x) -> (Animal(x) & HasBackbone(x) & Horse(x)))", "score": 0}
{"id": "eqasc_validation_1136", "prediction": "all x y z w.((Vertebrate(x) & Animal(y) & Backbone(z) & Horse(w)) -> (HasBackbone(y,z,w)))", "score": 0}
{"id": "eqasc_validation_1136", "prediction": "all x y.((Vertebrate(x) & Animal(y)) -> (Bodybone(y) | Horse(y)))", "score": 0}
{"id": "eqasc_validation_1136", "prediction": "all x.(Vertebrate(x) -> (Animal(x) & HasBackbone(x) & Horse(x)))", "score": 0}
{"id": "eqasc_validation_1136", "prediction": "all x.(Vertebrates(x) -> (Animal(x) & Backbone(x) & Horse(x)))", "score": 0}
{"id": "eqasc_validation_1136", "prediction": "all x.(Vertebrates(x) -> (IsAnimal(x) & HasBackbone(x)))", "score": 0}
{"id": "eqasc_validation_1137", "prediction": "the earliest animals withbackbones (AncestorsOfHagfish) - Thy'sDeepestBody(Hagfish)", "score": -1}
{"id": "eqasc_validation_1137", "prediction": "all x y.(Hagfish(x) & Ancestors(y) & InColor(x,y)) & InfancyAndBackbone(x))", "score": -1}
{"id": "eqasc_validation_1137", "prediction": "all x.(Hagfish(x) -> (AncestorsOfHagfish(x) & EarlyAnimalWithBackbone(x)))", "score": 0}
{"id": "eqasc_validation_1137", "prediction": "all x y.((AncestorOfHagfish(x) & Hagfish(y)) -> EarlyAnimalWithBackbones(x,y))", "score": 0}
{"id": "eqasc_validation_1137", "prediction": "all x.(HagfishAncestors(x) -> (LowerAnimalBackbones(x) & FoundInAnimals(x)))", "score": 0}
{"id": "eqasc_validation_1137", "prediction": "all x.(Ancestors(x,hagfish) -> (FirstAnimal(x,Backbone) & ProbablyDamage(x)))", "score": 0}
{"id": "eqasc_validation_1137", "prediction": "all x y.((Hagfish(x) & Ancestors(x,y)) -> (TheOldestAnimal(x) & WithBackbone(y)))", "score": 0}
{"id": "eqasc_validation_1137", "prediction": "all x.(Ancestors(x) -> (Hagfish(x) & EarlyAnimal(x) & Backbone(x)))", "score": 0}
{"id": "eqasc_validation_1137", "prediction": "all x.((Hagfish(x) & Ancestors(x,hagic)) -> VeryEarlyAnimal(x,Backbones))", "score": 0}
{"id": "eqasc_validation_1137", "prediction": "all x y.((AncestorsOfHagfish(x) & Antecedent(y)) -> (AtomicAnimal(x,y) & WithBackbones(y)))", "score": 0}
{"id": "eqasc_validation_1137", "prediction": "all x y.((AncestorOfHagfish(x) & Hegfish(y)) -> (Orbital(x) & HatchedBackbones(x)))", "score": 0}
{"id": "eqasc_validation_1137", "prediction": "all x.(Hagastfish(x) -> (Ancestors(x) & EarlyTree withBackbones(x)))", "score": -1}
{"id": "eqasc_validation_1137", "prediction": "all x.(Gathfish(x) -> (AcestorsOf(x,hagfish) & earliestAnimalWithBackbones(x)))", "score": 0}
{"id": "eqasc_validation_1137", "prediction": "all x.(Hagfish(x) -> (Ancestors(x,hagfish) & EarlyAnimalWithBackbones(x)))", "score": 0}
{"id": "eqasc_validation_1137", "prediction": "all x.((Hagfish(x) & Ancestors(x)) -> earliestAnimal(x) & HasBackbone(x))", "score": 0}
{"id": "eqasc_validation_1137", "prediction": "all x.((Hagfish(x) & Ancestors(x)) -> earliestAnimalWithBackbones(x))", "score": 0}
{"id": "eqasc_validation_1138", "prediction": "all x y.((Bone(x) & Vertebrate(y)) -> FoundIn(x,y))", "score": 0}
{"id": "eqasc_validation_1138", "prediction": "all x.(Bone(x) -> CanTailVertebrate(x))", "score": 0}
{"id": "eqasc_validation_1138", "prediction": "all x y z.((Bone(x) & Vertebrate(y) & Vertebrate(w)) -> FoundIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_1138", "prediction": "all x.(Plant(x) -> FoundInVertebrate(x))", "score": 0}
{"id": "eqasc_validation_1138", "prediction": "all x.(Bone(x) -> FoundInVertebrates(x))", "score": 0}
{"id": "eqasc_validation_1138", "prediction": "all x.(Bone(x) -> FoundInVertebrate(x))", "score": 0}
{"id": "eqasc_validation_1138", "prediction": "is FoundOnlyIn(bone,vertebrate)", "score": -1}
{"id": "eqasc_validation_1138", "prediction": "all x.(Bone(x) -> FoundIn(x,vertebrate))", "score": 0}
{"id": "eqasc_validation_1138", "prediction": "all x y.((Vertebrate(x) & Vertebrates(y)) -> FoundIn(x,y))", "score": 0}
{"id": "eqasc_validation_1138", "prediction": "all x.(Bone(x) -> (Vertebrate(x) & FoundIn(x,Vertebrate)))", "score": 0}
{"id": "eqasc_validation_1139", "prediction": "all x.(HagfishAncestors(x) -> earliestBones(x))", "score": 0}
{"id": "eqasc_validation_1139", "prediction": "all x.(HasRecentBodies(x) -> Hagfish(x))", "score": 0}
{"id": "eqasc_validation_1139", "prediction": "all x.(HasEarliestBones(x) -> AncestryOfHagfish(x))", "score": 0}
{"id": "eqasc_validation_1139", "prediction": "all x y.((Ancestors(x,y) & Hagfish(y)) -> YouPoorBeans(x,y))", "score": 0}
{"id": "eqasc_validation_1139", "prediction": "all x.(Haggfish(x) -> HasOldBones(x,a,b,r,r))", "score": 0}
{"id": "eqasc_validation_1139", "prediction": "all x.(HasEarliestBones(x) -> AncestorsOfHagagfish(x))", "score": 0}
{"id": "eqasc_validation_1139", "prediction": "all x.(Acestors(x) -> HasEarliestBones(x))", "score": 0}
{"id": "eqasc_validation_1139", "prediction": "all x.(HasTheOldBone(x,HasFishAncetor(x))", "score": -1}
{"id": "eqasc_validation_1139", "prediction": "all x.(HagfishAngestors(x) -> HasFaithiestBones(x))", "score": 0}
{"id": "eqasc_validation_1139", "prediction": "all x.(HasOldBone(x) -> RecessOfHagfish(x))", "score": 0}
{"id": "eqasc_validation_1139", "prediction": "all x.(HagfishAncestors(x) -> HasEarliestBones(x))", "score": 0}
{"id": "eqasc_validation_1139", "prediction": "all x.((Ancestors(x) & Hagfish(x)) -> HasEarliestBones(x))", "score": 0}
{"id": "eqasc_validation_1139", "prediction": "all x.(HasOldBones(x) -> OneOfAncestors(x))", "score": 0}
{"id": "eqasc_validation_1139", "prediction": "all x.(HasOldBones(x) -> AncestorsOfHagfish(x))", "score": 0}
{"id": "eqasc_validation_1139", "prediction": "all x.(HasAcestorsOfHaggfish(x) -> FirstBones(x))", "score": 0}
{"id": "eqasc_validation_1139", "prediction": "all x.(HasCameralBones(x) -> AncestorsOfHagfish(x))", "score": 0}
{"id": "eqasc_validation_1140", "prediction": "all x y z.((Hagfish(x) & Ancestral(y) & Hagfish(z) & Kidneys(z)) -> earliestCreatureWithBones(x,y,z))", "score": 0}
{"id": "eqasc_validation_1140", "prediction": "all x.(HagfishAncestors(x) -> (OldestCreatureWithSingles(x) & HasBones(x)))", "score": 0}
{"id": "eqasc_validation_1140", "prediction": "all x y.((AncestorsOfHagfish(x) & Hagfish(y)) -> (LastCreatureWithBones(x,y)))", "score": 0}
{"id": "eqasc_validation_1140", "prediction": "all x y.((Ancestors(x) & Hagfish(y)) -> (FollowestCreationWithBones(x,y) | earliestCreationWithBones(x,y)))", "score": 0}
{"id": "eqasc_validation_1140", "prediction": "all x.(AncestorsOfHagfish(x) -> EarlyCreatureWithBones(x))", "score": 0}
{"id": "eqasc_validation_1140", "prediction": "all x y.((AncestorsOf(x,y) & Hagfish(y)) -> (CreditElementSeason(x,y) & HasBones(y)))", "score": 0}
{"id": "eqasc_validation_1140", "prediction": "all x.((AncestorsOfHagfish(x) & AncestorsOfHagfish(x)) -> EarlyCreatureWithBones(x))", "score": 0}
{"id": "eqasc_validation_1140", "prediction": "all x.(HagfishHagic(x) -> EarlyCreatureWithBones(x))", "score": 0}
{"id": "eqasc_validation_1140", "prediction": "all x.((AncestorsOfHagfish(x) & PossiblyOfTheRestingCreatures(x) & HasBones(x)) -> EarlyCreatureWithBones(x))", "score": 0}
{"id": "eqasc_validation_1140", "prediction": "all x y.((AncestorsOfHugfish(x) & Hagfish(y)) -> FoundEarly(x,y))", "score": 0}
{"id": "eqasc_validation_1140", "prediction": "all x.(HagfishAncestors(x) -> (LittleCreature(x) & HasBones(x)))", "score": 0}
{"id": "eqasc_validation_1140", "prediction": "all x.((AncestorsOfHagfish(x) & FoundInStructure(x,Bones)) -> YoungestCreatureWithBones(x))", "score": 0}
{"id": "eqasc_validation_1140", "prediction": "all x.(Hagfish(x) -> (1Angelican(x) & MostTenTenUrbanCreatures(x) & ManyUrbanHubs(x)))", "score": 0}
{"id": "eqasc_validation_1140", "prediction": "all x.((Ancestors(x) & Hagfish(x)) -> FrühestCreatureWithBones(x))", "score": 0}
{"id": "eqasc_validation_1140", "prediction": "all x y.((Ancesstor(x) & Hagfish(y)) -> (ErgonomicallyAscended(x,y) & Bearded(y)))", "score": 0}
{"id": "eqasc_validation_1140", "prediction": "all x.(LessThanHagfishAncestors(x) -> InfraredCreature(x))", "score": 0}
{"id": "eqasc_validation_1141", "prediction": "all x.(Vertebrates(x) -> HasBackbone(x))", "score": 0}
{"id": "eqasc_validation_1141", "prediction": "all x.(Vertebrat(x) -> HasBackbone(x))", "score": 0}
{"id": "eqasc_validation_1141", "prediction": "all x.(Vertebrates(x) -> HasBackbones(x))", "score": 0}
{"id": "eqasc_validation_1141", "prediction": "all x.(Vertebrate(x) -> HasBackbones(x))", "score": 0}
{"id": "eqasc_validation_1141", "prediction": "all x.(Vertebrates(x) -> (IsAnimal(x) & HasBackbone(x)))", "score": 0}
{"id": "eqasc_validation_1141", "prediction": "all x.(Vertebrate(x) -> HasBackbone(x))", "score": 0}
{"id": "eqasc_validation_1141", "prediction": "all x.(Vertebrates(x) -> (Animal(x) & HasBackbones(x)))", "score": 0}
{"id": "eqasc_validation_1141", "prediction": "all x.(Vertebrates(x) -> (Animal(x) & HasBackbone(x)))", "score": 0}
{"id": "eqasc_validation_1141", "prediction": "all x.(Vertebrate(x) -> (Animal(x) & HasBackbone(x)))", "score": 0}
{"id": "eqasc_validation_1142", "prediction": "all x.((Angel(x) & Hagfish(y)) -> EarlyAnimalWithBackbones(x,y))", "score": 0}
{"id": "eqasc_validation_1142", "prediction": "all x.(HasBackbone(x) -> (AncestorOfHagfish(x) | AgeFast(x)))", "score": 0}
{"id": "eqasc_validation_1142", "prediction": "all x y.((AncestorsOfHagfish(x) & Henrietta(y)) -> EarlyAnimalWithBackbones(x,y))", "score": 0}
{"id": "eqasc_validation_1142", "prediction": "all x.(AncestorOfHagfish(x) -> (EarlyAnimal(x) & HasBackbone(x)))", "score": 0}
{"id": "eqasc_validation_1142", "prediction": "all x.((Ancestor(x) & Hagfish(x)) -> earliestAnimalWithBackbones(x))", "score": 0}
{"id": "eqasc_validation_1142", "prediction": "all x.(HagfishAncestors(x) -> earliestAnimalWithBackbone(x))", "score": 0}
{"id": "eqasc_validation_1142", "prediction": "all x.(HagfishAncestors(x) -> earliestAncientWithBackbone(x))", "score": 0}
{"id": "eqasc_validation_1142", "prediction": "all x.(HagfishAngestors(x) -> EarlyAnimalsWithBackbones(x))", "score": 0}
{"id": "eqasc_validation_1142", "prediction": "all x.(HagfishAncestor(x) -> FrühestAnimalManWithBackbone(x))", "score": 0}
{"id": "eqasc_validation_1142", "prediction": "all x.(AncestorsOfGagfish(x) -> EarlyAnimalsWithBackbones(x))", "score": 0}
{"id": "eqasc_validation_1142", "prediction": "all x.(HasBackbone(x) -> EarlyHagfish(x))", "score": 0}
{"id": "eqasc_validation_1142", "prediction": "all x.(HagfishAncestors(x) -> EarlyAnimal(x))", "score": 0}
{"id": "eqasc_validation_1142", "prediction": "all x.(Hagfish(x) -> (Ancestor(x) & HasBackbone(x)))", "score": 0}
{"id": "eqasc_validation_1142", "prediction": "all x.((AngestorsOfHagfish(x) & HasBackbones(x)) -> earliestAnimalCuttingBackbones(x))", "score": 0}
{"id": "eqasc_validation_1142", "prediction": "all x.(HasBackbone(x) -> EarlyCarol(x))", "score": 0}
{"id": "eqasc_validation_1142", "prediction": "all x.(HagfishAncestors(x) -> EarlyAnimalWithBackbones(x))", "score": 0}
{"id": "eqasc_validation_1143", "prediction": "all x y.((Ancient(x) & Forefather(y) & Son(y)) -> WillLegallyHead(x,y))", "score": 0}
{"id": "eqasc_validation_1143", "prediction": "all x y.((Property(x) & Son(y)) -> (Ancient(x,y) | Forefather(y)))", "score": 0}
{"id": "eqasc_validation_1143", "prediction": "all x y.((Property(x) & Son(y)) -> (Alleviates(x,y) | Alleviates(x,y)))", "score": 0}
{"id": "eqasc_validation_1143", "prediction": "all x.((Ancient(x) | Forefather(x)) -> OnlyLegallyEarnedBySons(x))", "score": 0}
{"id": "eqasc_validation_1143", "prediction": "all x y.((Ancestors(x) & Forefathers(y)) -> CanLegallyHort(x,y))", "score": 0}
{"id": "eqasc_validation_1143", "prediction": "all x y.((Ancestors(x) & Forefathers(y)) -> (LegallyEinheritedBySons(x)))", "score": 0}
{"id": "eqasc_validation_1143", "prediction": "all x y.((Ancient(x) & Forefather(y)) -> OnlyLegallyMortgaged(x,y))", "score": 0}
{"id": "eqasc_validation_1143", "prediction": "all x.((AncientEarlyAncient(x) & Forefather(x)) -> -BilledBySons(x))", "score": 0}
{"id": "eqasc_validation_1143", "prediction": "all x y z.((Ancestors(x) & Forefather(y) & Sons(z)) -> (LegallyHinderedBy(z,x) | LegallyHiddenBy(z,y)))", "score": 0}
{"id": "eqasc_validation_1143", "prediction": "all x.((Understandment(x) & Son(x)) -> AncestralAndForefatherInhabited(x))", "score": 0}
{"id": "eqasc_validation_1143", "prediction": "all x.((Ancestors(x) | Forefathers(x)) -> MayLimitProperty(x))", "score": 0}
{"id": "eqasc_validation_1143", "prediction": "all x y.((Ancient(x) & Forefather(y)) -> (LegalLegalLegalLegacy(x,y) & Son(x)))", "score": 0}
{"id": "eqasc_validation_1143", "prediction": "all x.((Property(x) & (Ancestors(x) | Forefathers(x))) -> CanBeLegallyHeld(x))", "score": 0}
{"id": "eqasc_validation_1143", "prediction": "all x y.((Ancestors(x) | Forefathers(x)) -> (CanDonaliseProperty(x,y) & InSons(y)))", "score": 0}
{"id": "eqasc_validation_1143", "prediction": "all x y z.((Ancestors(x) & Forefather(y) & Sons(z)) -> CanLegallyEarn(x,y,z))", "score": 0}
{"id": "eqasc_validation_1143", "prediction": "all x y.((Ancient(x) & Forefather(y)) -> (LegallyAcquire(y,x) & -Heads(y,x)))", "score": 0}
{"id": "eqasc_validation_1144", "prediction": "all x.(HagfishForefather(x) -> earliestVertebrate(x))", "score": 0}
{"id": "eqasc_validation_1144", "prediction": "all x.(HagfishForefather(x) -> FrühestVertebrate(x))", "score": 0}
{"id": "eqasc_validation_1144", "prediction": "all x.(HagfishForefather(x) -> EarlyVertebrate(x))", "score": 0}
{"id": "eqasc_validation_1144", "prediction": "all x.(TheForefather(x) -> (HasEarlyVertebrate(x) | Hagfish(x)))", "score": 0}
{"id": "eqasc_validation_1144", "prediction": "all x.(HaggfishForefather(x) -> EarlyMertilizedVertebrate(x))", "score": 0}
{"id": "eqasc_validation_1144", "prediction": "all x.((Forefather(x) & Fogfish(x)) -> EarlyVertebrate(x))", "score": 0}
{"id": "eqasc_validation_1144", "prediction": "all x.(Headforefather(x) -> EarlyVertebrate(x))", "score": 0}
{"id": "eqasc_validation_1144", "prediction": "all x.(Average(x) -> Forefather(x,hagfish))", "score": 0}
{"id": "eqasc_validation_1144", "prediction": "all x.(HaggfishForefather(x) -> earliestVertebrate(x))", "score": 0}
{"id": "eqasc_validation_1144", "prediction": "all x.((Forefather(x) & Hagfish(y)) -> Activist(x,y))", "score": 0}
{"id": "eqasc_validation_1144", "prediction": "all x.((Forefather(x) & Hagfish(x)) -> AmongstProfessors(x))", "score": 0}
{"id": "eqasc_validation_1144", "prediction": "all x y.((Forefather(x) & Hagfish(y)) -> Early(x,Vertebrate))", "score": 0}
{"id": "eqasc_validation_1144", "prediction": "all x y.((Forefather(x) & Hagfish(y)) -> AmongOrthodoxVertebrate(x,y))", "score": 0}
{"id": "eqasc_validation_1144", "prediction": "all x.((Forefather(x) & Humpback(x)) -> EarlyVertebrate(x))", "score": 0}
{"id": "eqasc_validation_1144", "prediction": "all x.(HugfishForefather(x) -> earliestVertebrate(x))", "score": 0}
{"id": "eqasc_validation_1145", "prediction": "all x.(Haggfish(x) -> (JawlessFish(x) & ParasiticVertebrate(x)))", "score": 0}
{"id": "eqasc_validation_1145", "prediction": "all x.(Haggfish(x) -> (Jawless(x) & OnlyParasiticVertebrate(x)))", "score": 0}
{"id": "eqasc_validation_1145", "prediction": "all x.(Hagfish(x) -> (JawlessFish(x) & ParasiticVertebrate(x)))", "score": 0}
{"id": "eqasc_validation_1145", "prediction": "all x.(Haggfish(x) -> (JawlessFish(x) & ParasiteDestinate(x)))", "score": 0}
{"id": "eqasc_validation_1145", "prediction": "all x.(Haghfish(x) -> (JawlessFish(x) & ParasiteTree(x)))", "score": 0}
{"id": "eqasc_validation_1145", "prediction": "all x.(Haffish(x) -> (Jawless(x) & ParasiticDerived(x)))", "score": 0}
{"id": "eqasc_validation_1145", "prediction": "all x.(Hashfish(x) -> (JawlessFish(x) & ParasiticVertebrate(x)))", "score": 0}
{"id": "eqasc_validation_1145", "prediction": "all x.(Haggfish(x) -> (Janeless(x) & Parasitic(x)))", "score": 0}
{"id": "eqasc_validation_1145", "prediction": "all x y z.((Haggfish(x) & JawlessFish(y) & Vegetable(z)) -> Parasitic(x,y,z))", "score": 0}
{"id": "eqasc_validation_1145", "prediction": "all x.(Haggfish(x) -> (JawlessFish(x) & ParasitedVertebrate(x)))", "score": 0}
{"id": "eqasc_validation_1145", "prediction": "all x.(Haggfish(x) -> (Jawless(x) & ParasiticVeterinary(x)))", "score": 0}
{"id": "eqasc_validation_1145", "prediction": "all x y.((Haggfish(x) & JawlessFish(x)) -> (EntirelyParasiticVertebrate(x,y)))", "score": 0}
{"id": "eqasc_validation_1145", "prediction": "all x.(Haggfish(x) -> (JawlessFish(x) & ParasitedVertebrates(x)))", "score": 0}
{"id": "eqasc_validation_1145", "prediction": "all x.(Haggfish(x) -> (JawlessFish(x) & ParasiticalVertebrate(x)))", "score": 0}
{"id": "eqasc_validation_1146", "prediction": "all x y z.((Ancestor(x) & JawlessFish(y) & Parasitic(z) & JawlessFish(y) & Parasitic(x) & Vegetable(x)) -> EarlyVertebrates(x))", "score": 0}
{"id": "eqasc_validation_1146", "prediction": "all x y z.((AncestorsOfJawless(x) & Parasitic(y) & JawlessFish(z)) -> EarlyVertebrate(x))", "score": 0}
{"id": "eqasc_validation_1146", "prediction": "all x y z.((Acestors(x) & JawlessFish(y) & Parasitic(z)) -> (Ancestors(x,y,z) & OriginallyVertebrate(x)))", "score": 0}
{"id": "eqasc_validation_1146", "prediction": "all x y.((Acestors(x) & JawlessFish(y) & Parasitic(y)) -> EarlyVegetable(x))", "score": 0}
{"id": "eqasc_validation_1146", "prediction": "all x y z.((Ancestors(x) & JawlessFish(y) & Parasite(z) & JawlessFish(y)) -> FoundInOfFruit(x,y,z))", "score": 0}
{"id": "eqasc_validation_1146", "prediction": "all x y z.((Acestors(x,y) & JawlessFish(y) & Parasite(z) & JawlessFish(z) & Parrot(z)) -> EarlyVertebrate(x))", "score": 0}
{"id": "eqasc_validation_1146", "prediction": "all x y.((Ancestor(x) & JawlessFish(y) & Parasitic(y) & (OldVertebrate(x,y) | EarlyVertebrate(x,y))) -> EarlyVertebrate(x))", "score": 0}
{"id": "eqasc_validation_1146", "prediction": "all x y z.((Acestors(x) & JawlessFish(y) & Parasitic(z) & JawlessFish(z)) -> PossiblyOfficialVertebrate(x & EarlyVertebrate(x,y,z))", "score": -1}
{"id": "eqasc_validation_1146", "prediction": "all x y.((Acestors(x) & JawlessFish(y) & Parasitic(y)) -> AncientVertebrates(x))", "score": 0}
{"id": "eqasc_validation_1146", "prediction": "all x y z.((Ancestor(x) & JawlessFish(y) & Parasitic(z) & JawlessFish(y) & Parasitic(z)) -> FirstVertebrate(x))", "score": 0}
{"id": "eqasc_validation_1146", "prediction": "all x y z.((Ancestors(x) & JawlessFish(y) & Parasitical(z) & JPandal(z)) -> EarlyVertebrates(x))", "score": 0}
{"id": "eqasc_validation_1146", "prediction": "all x y.((Acestors(x) & JawlessFish(y) & Parasitic(y)) -> EarlyVertebrates(x,y))", "score": 0}
{"id": "eqasc_validation_1146", "prediction": "all x y z.((Acestors(x) & JawlessFish(y) & Parasitic(z)) -> EarlyVertebrate(x))", "score": 0}
{"id": "eqasc_validation_1146", "prediction": "all x y z.((Ancestors(x) & JawlessFish(y) & Parasitic(y) & Parasitic(z) & Judgmentary(z)) -> EarlyVertebrate(x,y,z))", "score": 0}
{"id": "eqasc_validation_1146", "prediction": "all x y z.((Ancestor(x) & JawlessFish(y) & Parasitic(z)) -> EarlyVertebrate(x))", "score": 0}
{"id": "eqasc_validation_1146", "prediction": "all x y.((Ancestor(x) & JawlessFish(y) & Parasitic(y)) -> EarlyVertebrites(x))", "score": 0}
{"id": "eqasc_validation_1147", "prediction": "all x.(HasBackbones(x) -> Vertebrate(x))", "score": 0}
{"id": "eqasc_validation_1147", "prediction": "all x.(HasBackbone(x) -> Vertebrate(x))", "score": 0}
{"id": "eqasc_validation_1147", "prediction": "all x.((Animal(x) & HasBackbones(x)) -> Vertebrate(x))", "score": 0}
{"id": "eqasc_validation_1147", "prediction": "all x.(Backbone(x) -> Vertebrate(x))", "score": 0}
{"id": "eqasc_validation_1148", "prediction": "all x.(Hagfish(x) -> HasBackbone(x))", "score": 0}
{"id": "eqasc_validation_1148", "prediction": "all x.(Hagafish(x) -> HasBackbone(x))", "score": 0}
{"id": "eqasc_validation_1148", "prediction": "(all x (Hagfish(x) -> HasBackbone(x)))", "score": 0}
{"id": "eqasc_validation_1149", "prediction": "all x.(AquaticOrganism(x) -> -(ExtremeTemperature(x) | ExtremeMoisture(x))))", "score": -1}
{"id": "eqasc_validation_1149", "prediction": "all x.(AquaticOrganism(x) -> (-ExtremeTemperature(x) | ExtremeMoisture(x)))", "score": 5}
{"id": "eqasc_validation_1149", "prediction": "all x.(AquaticOrganism(x) -> (-TodealWithExtremeTemperature(x) & -TodealWithExtremeMoisture(x)))", "score": 0}
{"id": "eqasc_validation_1149", "prediction": "all x.(AquaticOrganism(x) -> (-TooWarmTech(x,temperature) & -TooProperMoisture(x,moisture)))", "score": 0}
{"id": "eqasc_validation_1149", "prediction": "all x.(AquaticOrganism(x) -> -ExtremeTemperatureOrMoisture(x))", "score": 5}
{"id": "eqasc_validation_1149", "prediction": "all x.((AquaticOrganism(x) & -ExtremeTemperature(x) & -ExtremeMoisture(x)) -> -ExtremeMoisture(x))", "score": 0}
{"id": "eqasc_validation_1149", "prediction": "all x.(AquaticOrganism(x) -> (-ExtremeTemperature(x) | -ExtremeMoisture(x)))", "score": 0}
{"id": "eqasc_validation_1149", "prediction": "all x.(AquaticOrganism(x) -> -(TogetherToExtremeTemperature(x) | DealWithExtremeMoisture(x)))", "score": 0}
{"id": "eqasc_validation_1149", "prediction": "all x.(AquaticOrganism(x) -> -(ExtremeTemperature(x) | ExtremeMoisture(x)))", "score": 14}
{"id": "eqasc_validation_1149", "prediction": "all x.(AquaticOrganism(x) -> (-ExtremeTemperature(x) & -ExtremeMoisture(x)))", "score": 14}
{"id": "eqasc_validation_1149", "prediction": "all x.(AquaticOrganism(x) -> -(ExtremeTemperature(x) | ExcessiveMoisture(x)))", "score": 0}
{"id": "eqasc_validation_1149", "prediction": "(all x.(AquaticOrganism(x) -> -ExtremeTemperature(x)) & -ExtremeMoisture(x)))", "score": -1}
{"id": "eqasc_validation_1150", "prediction": "(AquaticOrganism(Fish) & Utmost(Fish))", "score": 0}
{"id": "eqasc_validation_1150", "prediction": "all x y.((Fish(x) & AquaticOrganism(y)) -> Endural(x,y))", "score": 0}
{"id": "eqasc_validation_1150", "prediction": "ALL x.(Fish(x) -> UltimateAquaticOrganism(x))", "score": -1}
{"id": "eqasc_validation_1150", "prediction": "all x.(Fish(x) -> AquaticOrganism(x))", "score": 38}
{"id": "eqasc_validation_1150", "prediction": "all x.(Fish(x) -> UltimateAquaticOrganism(x))", "score": 0}
{"id": "eqasc_validation_1150", "prediction": "all x y.((Fish(x) & AquaticOrganism(y)) -> (Uppermost(x,y)))", "score": 0}
{"id": "eqasc_validation_1150", "prediction": "All x.(Fish(x) -> UltimateAquaticOrganism(x))", "score": -1}
{"id": "eqasc_validation_1150", "prediction": "all x.(Fish(x) -> UltimateWatercraftOrganism(x))", "score": 0}
{"id": "eqasc_validation_1151", "prediction": "all x.(Fish(x) -> (-ExtremeTemperature(x) | ExtremeMoisture(x)))", "score": 6}
{"id": "eqasc_validation_1151", "prediction": "most of the fish in the world does not have to deal with extremes of temperature or moisture.", "score": -1}
{"id": "eqasc_validation_1151", "prediction": "all x.(Fish(x) -> (-IdealWithExtremeTemperatureOrMoisture(x) | IdealWithMoisture(x)))", "score": 0}
{"id": "eqasc_validation_1151", "prediction": "all x.(Fish(x) -> -ExtremeTemperatureOrMoisture(x))", "score": 2}
{"id": "eqasc_validation_1151", "prediction": "all x.(Fish(x) -> -(ExtremeTemperature(x) | ExtremeMoisture(x))))", "score": -1}
{"id": "eqasc_validation_1151", "prediction": "all x y.((Fish(x) & Fish(y)) -> (-SupportsExtremeTemperature(x) & -SupportsExtremeMoisture(x)))", "score": 0}
{"id": "eqasc_validation_1151", "prediction": "all x.(Fish(x) -> (-ExtremeTemperatureOrMoisture(x) & -ExtremeMoisture(x)))", "score": 0}
{"id": "eqasc_validation_1151", "prediction": "all x.(Fish(x) -> (-VeryExtremeTemperature(x) | ExtremeMoisture(x)))", "score": 0}
{"id": "eqasc_validation_1151", "prediction": "all x.(Fish(x) -> (-(ExtremeTemperature(x) | ExtremeMoisture(x)))))", "score": -1}
{"id": "eqasc_validation_1151", "prediction": "all x y.((Fish(x) & Fish(y)) -> (-DemandsWithExtremeTemperatureOrMoisture(y)))", "score": 0}
{"id": "eqasc_validation_1151", "prediction": "all x.(Fish(x) -> (-ExtremeTemperatureOrMoisture(x) & -ExtremeTemperatureOrMoisture(x)))", "score": 2}
{"id": "eqasc_validation_1151", "prediction": "all x.(Fish(x) -> (-BelongsToExtremeTemperatureOrWaterPressure(x) | -BaysExtremeMoisture(x)))", "score": 0}
{"id": "eqasc_validation_1151", "prediction": "(all x.(Fish(x) -> -(ExtremeTemperature(x) | ExtremeMoisture(x))))", "score": 4}
{"id": "eqasc_validation_1152", "prediction": "all x.((Fish(x) & -(ExtremeTemperature(x) | ExtremeMoisture(x))))", "score": 0}
{"id": "eqasc_validation_1152", "prediction": "all x.(Fish(x) -> (-ExtremeTemperature(x) & -ExtremeMoisture(x)))", "score": 4}
{"id": "eqasc_validation_1152", "prediction": "all x.(Fish(x) -> (-ExtremeTemperature(x) | ExtremeMoisture(x)))", "score": 6}
{"id": "eqasc_validation_1152", "prediction": "all x.(Fish(x) -> -exists y.(ExtremeTemperature(y) | ExtremeMoisture(y))))", "score": -1}
{"id": "eqasc_validation_1152", "prediction": "all x.(Fish(x) -> (-(ExtremeTemperature(x) | ExtremeMoisture(x)) & -(ExtremeTemperature(x) | ExtremeMoisture(x)))))", "score": -1}
{"id": "eqasc_validation_1152", "prediction": "all x.(Fish(x) -> (-TooHot(x) | TooHot(x))))", "score": -1}
{"id": "eqasc_validation_1152", "prediction": "all x.(Fish(x) -> -(ExtremeTemperature(x) | ExtremeMoisture(x)))", "score": 4}
{"id": "eqasc_validation_1152", "prediction": "all x.(Fish(x) -> ( -ExtremeTemperature(x) & -ExtremeMoisture(x)))", "score": 4}
{"id": "eqasc_validation_1152", "prediction": "all x.(Fish(x) -> -(ExtremeTemperature(x) | ExtremeMoisture(x))))", "score": -1}
{"id": "eqasc_validation_1152", "prediction": "all x y.((Fish(x) & WaterExtreme(y)) -> -(ExtremeTemperature(x,y) | ExtremeMoisture(x,y)))", "score": 0}
{"id": "eqasc_validation_1152", "prediction": "all x.(Fish(x) -> (NoExtremeAtoms(x) & -FocusesTemperature(x) & -DropsExtremeMoisture(x)))", "score": 0}
{"id": "eqasc_validation_1153", "prediction": "all x y.((Tertillate(x) & AquaticOrganism(y)) -> (ToxicToFish(x,y) & ToxicToAquaticOrganisms(x)))", "score": 0}
{"id": "eqasc_validation_1153", "prediction": "all x.(Triallate(x) -> (HighlyToxicToFishEquineOrganisms(x) & AllowedToSawnOrganisms(x)))", "score": 0}
{"id": "eqasc_validation_1153", "prediction": "All x.(Triallate(x) -> (ToxicToAquaticOrganisms(x) & ToFishAndAquaticOrganisms(x)))", "score": -1}
{"id": "eqasc_validation_1153", "prediction": "all x y.((Triallate(x) & AquaticOrganism(y)) -> (ToxicToFish(x,y) & ToOtherAquaticOrganisms(x,y)))", "score": 0}
{"id": "eqasc_validation_1153", "prediction": "all x.((Triallate(x) & ToxicTo(x,ox)) -> (Tertiary(x) & Fish(y) & AquaticOrganism(y)))", "score": 0}
{"id": "eqasc_validation_1153", "prediction": "all x.(Triallate(x) -> ToxicToAquaticOrganisms(x))", "score": 0}
{"id": "eqasc_validation_1153", "prediction": "all x y.((Triallate(x) & AquaticOrganism(y) & ToxicTo(x,y)) -> HighlyToxicTo(x,y))", "score": 0}
{"id": "eqasc_validation_1153", "prediction": "(EffectsOnAquaticOrganisms(Triallate) & HighlyToxicToFish(Triallate) & HighlyToxicToAquaticOrganisms(Triallate))", "score": 0}
{"id": "eqasc_validation_1153", "prediction": "(EffectsOnAquaticOrganisms Triallate) -> ToxicToFishAndOrganisms(Trialslate))", "score": -1}
{"id": "eqasc_validation_1153", "prediction": "All x.(Triallate(x) -> ToxicToAquaticOrganisms(x))", "score": -1}
{"id": "eqasc_validation_1153", "prediction": "all x.(Triallate(x) -> (HasToxicToFish(x) & HasToxicToAquaticOrganisms(x)))", "score": 0}
{"id": "eqasc_validation_1153", "prediction": "all x.(Triallate(x) -> HighlyToxicToFishAndOrganisms(x))", "score": 0}
{"id": "eqasc_validation_1153", "prediction": "all x.(Triallate(x) -> (HighlyToxicToFishOrganisms(x) & ToAquaticOrganisms(x)))", "score": 0}
{"id": "eqasc_validation_1153", "prediction": "all x.(Triallate(x) -> DependsOnAquaticOrganisms(x))", "score": 0}
{"id": "eqasc_validation_1154", "prediction": "all x.((SocialIsMoisturizing(x) & ImportantToSkin(x)) -> Moisturizes(x))", "score": 0}
{"id": "eqasc_validation_1154", "prediction": "Second, moisturizingtheSkinImportant(Skin)", "score": -1}
{"id": "eqasc_validation_1154", "prediction": "(Moisturizing(skin) -> IsElement(s))", "score": 0}
{"id": "eqasc_validation_1154", "prediction": "all x.((Moisturizing(x) & Skin(y)) -> ExtremelyImportant(x,y))", "score": 0}
{"id": "eqasc_validation_1154", "prediction": "(Moisturizing) & Moisturizing(MoistureSkin) & ExtensiveImportance(MoisturizingSkin))", "score": -1}
{"id": "eqasc_validation_1154", "prediction": "all x.(Moisturizing(x) -> HighlyInstantSkin(x))", "score": 0}
{"id": "eqasc_validation_1154", "prediction": "(-MoisturizingSkin(y))", "score": 0}
{"id": "eqasc_validation_1154", "prediction": "(MoisturizingSkin(x) -> VeryImportant(x))", "score": 0}
{"id": "eqasc_validation_1154", "prediction": "(MoisturizingSkin(skin) -> ExtremelyImportant(skin))", "score": 0}
{"id": "eqasc_validation_1154", "prediction": "(WetuarantSkin(x) -> VeryImportant(x))", "score": 0}
{"id": "eqasc_validation_1154", "prediction": "-MoisturizingSkin(x) – (MoisturizingSkin(x) & ExtremelyImportant(x)))", "score": -1}
{"id": "eqasc_validation_1154", "prediction": "IsolatingTheSkin(i) -> IsolatingTheSkin(i))", "score": -1}
{"id": "eqasc_validation_1154", "prediction": "(WildCutting(Mirroring) & Skin (Mirroring)) -> ExtremelyImportant(Mirroring))", "score": -1}
{"id": "eqasc_validation_1154", "prediction": "(exists x.(MoisturizingSkin(x) & Important(x)))", "score": 0}
{"id": "eqasc_validation_1154", "prediction": "(MoisturizeSkin) -> -ExtremelyImportantForSkin(y))", "score": -1}
{"id": "eqasc_validation_1154", "prediction": "(Moisturizing(skin,b) & Moisturizing(skin))", "score": 0}
{"id": "eqasc_validation_1155", "prediction": "all x.(AquaticOrganism(x) -> -HasToMoisturizeSkin(x))", "score": 0}
{"id": "eqasc_validation_1155", "prediction": "all x.(AquaticOrganism(x) -> -MoisturizeSkin(x))", "score": 0}
{"id": "eqasc_validation_1155", "prediction": "all x.(AquaticOrganism(x) -> -MoistureIsSkin(x))", "score": 0}
{"id": "eqasc_validation_1155", "prediction": "all x.((AquaticOrganism(x) & -MoisturizeSkin(x)) -> -MoisturizeSkin(x))", "score": 0}
{"id": "eqasc_validation_1155", "prediction": "all x.(AquaticOrganism(x) -> -HasToMoisturize(x))", "score": 0}
{"id": "eqasc_validation_1155", "prediction": "(all x.(AquaticOrganism(x) -> -MoisturizeSkin(x)))", "score": 0}
{"id": "eqasc_validation_1155", "prediction": "all x y.((AquaticOrganism(x) & AquaticOrganism(y)) -> -MoisturizeSkin(x,y))", "score": 0}
{"id": "eqasc_validation_1155", "prediction": "all x.(AquaticOrganism(x) -> -HasMoisturishesSkin(x))", "score": 0}
{"id": "eqasc_validation_1155", "prediction": "all x.(AquaticOrganism(x) -> We do notMoisturizeSkin(x))", "score": -1}
{"id": "eqasc_validation_1156", "prediction": "all x.((Fish(x) & AllEcologicalCreatures(x)) -> -Exception(x))", "score": 0}
{"id": "eqasc_validation_1156", "prediction": "all x.((Fish(x) & aquaticCreature(x)) -> -Exception(x))", "score": 0}
{"id": "eqasc_validation_1156", "prediction": "all x.((Fish(x) & AquaticCreature(x)) -> -Exception(x))", "score": 0}
{"id": "eqasc_validation_1156", "prediction": "all x.((Fish(x) | OtherAquaticCreatures(x)) -> -Exception(x))", "score": 0}
{"id": "eqasc_validation_1156", "prediction": "all x.((Fish(x) | AquaticCreature(x)) -> -Exception(x))", "score": 0}
{"id": "eqasc_validation_1156", "prediction": "(-all x.(Fish(x) & AllAquaticCreature(x)) -> -Exception(x))", "score": 0}
{"id": "eqasc_validation_1157", "prediction": "(all x.(Fish(x) -> -ConfrontsTemperatureAndMoistureExtremes(x)))", "score": 0}
{"id": "eqasc_validation_1157", "prediction": "all x.(Fish(x) -> (-DeathesWithTemperatureAndMoistureExtremes(x) | EliminatesWithMoistureExtremes(x)))", "score": 0}
{"id": "eqasc_validation_1157", "prediction": "all x.(Fish(x) -> (-ChangeFromTemperatureToMoisture(x) | ManageFromMoistureToMoisture(x))))", "score": -1}
{"id": "eqasc_validation_1157", "prediction": "all x.(Fish(x) -> (-(TemperatureExtreme(x) | MoistureExtreme(x))))", "score": 0}
{"id": "eqasc_validation_1157", "prediction": "all x.((Fish(x) & -(Temperature(x) | Moisture(x)))) -> -ContainsExtremeTemperature(x))", "score": -1}
{"id": "eqasc_validation_1157", "prediction": "all x.(Fish(x) -> -(TemperateExtreme(x) | MoistureExtreme(x)))", "score": 0}
{"id": "eqasc_validation_1157", "prediction": "(exists x.(Fish(x) & -exists y.(Fish(y) & TroubleshootingTemperatureUrbans(x,y)) | WaterOutreals(x,y)))", "score": 0}
{"id": "eqasc_validation_1157", "prediction": "all x.(Fish(x) -> -(Temperate(x) | Moisture(x)) & -(TemperatureResistance(x) | MoistureResistance(x))))", "score": -1}
{"id": "eqasc_validation_1157", "prediction": "all x.((Fish(x) & -(TemperatureExtreme(x) | MoistureExtreme(x)))) -> -(TemperatureExtreme(x) | MoistureExtreme(x))))", "score": -1}
{"id": "eqasc_validation_1157", "prediction": "all x.(Fish(x) -> -(MajorFish(x) & -Temperature(x) & -MoistureExtreme(x)))", "score": 0}
{"id": "eqasc_validation_1157", "prediction": "all x y z.((Fish(x) & (Temperature(y) | Moisture(y)) & -TemperatureOrMoistureExtreme(z)) -> -FishFishFx (y,z)))", "score": -1}
{"id": "eqasc_validation_1157", "prediction": "all x.(Fish(x) -> (-(Temperature(x) | Moisture(x))) & -(Temperature(x) | Moisture(x))))", "score": -1}
{"id": "eqasc_validation_1157", "prediction": "all x.(Fish(x) -> -(HasToDedealWithTemperature(x) | HasToDedealWithMoisture(x)))", "score": 0}
{"id": "eqasc_validation_1157", "prediction": "all x y.((Fish(x) & Fish(y)) -> (-TreatsTemperatureOrMoistureExtremes(x,y) | -TreatsMoistureExtremes(x,y)))", "score": 0}
{"id": "eqasc_validation_1157", "prediction": "all x.(Fish(x) -> (-HasToCompleWithTemperatureOrMoistureExtremes(x)))", "score": 0}
{"id": "eqasc_validation_1157", "prediction": "all x.(Fish(x) -> (-(TemperatureExtreme(x) | MoistureExtreme(x)))))", "score": -1}
{"id": "eqasc_validation_1158", "prediction": "(all x.(Fish(x) & -(ExtremeTemperature(x) | ExtremeMoisture(x)))) -> -FishFishFish(x))", "score": -1}
{"id": "eqasc_validation_1158", "prediction": "all x.(Fish(x) -> -(ExtremeTemperature(x) | ExtremeMoisture(x)) | -ExtremeWeather(x)))", "score": -1}
{"id": "eqasc_validation_1158", "prediction": "all x.(Fish(x) -> (-(ExtremeTemperature(x) | ExtremeMoisture(x)) & -(ExtremeTemperature(x) | ExtremeMoisture(x)))))", "score": -1}
{"id": "eqasc_validation_1158", "prediction": "all x y.((Fish(x) & InShreveport(x,y) & -ExtremeTemperature(y) & -ExtremeMoisture(y)) -> -ExtremeMoisture(x,y))", "score": 0}
{"id": "eqasc_validation_1158", "prediction": "all x.(Fish(x) -> (-ExtremeTemperatureAndMoisture(x) | ExtremeMoisture(x))))", "score": -1}
{"id": "eqasc_validation_1158", "prediction": "all x.(Fish(x) -> -(ExtremeTemperature(x) | ExtremeMoisture(x))))", "score": -1}
{"id": "eqasc_validation_1158", "prediction": "all x.(Fish(x) -> (-ExtremeTemperature(x) | ExtremeMoisture(x)))", "score": 3}
{"id": "eqasc_validation_1158", "prediction": "all x.(Fish(x) -> -(ExtremeTemperature(x) | ExtremeMoisture(x)))", "score": 2}
{"id": "eqasc_validation_1158", "prediction": "all x.(Fish(x) -> -ExtremeTemperatureOrMoisture(x))", "score": 1}
{"id": "eqasc_validation_1158", "prediction": "all x.(Fish(x) -> (-ExtremeTemperature(x) | ExtremeMoisture(x)) & -ExtremeTemperature(x) & -ExtremeMoisture(x)))", "score": -1}
{"id": "eqasc_validation_1158", "prediction": "all x y.((Fish(x) & (ExtremeTemperature(y) | ExtremeMoisture(y))) -> -HasToBeExtreme(x,y))", "score": 0}
{"id": "eqasc_validation_1158", "prediction": "all x.(Fish(x) -> (-ExtremeTemperature(x) | ExtremeMoisture(x))))", "score": -1}
{"id": "eqasc_validation_1158", "prediction": "all x.(Fish(x) -> (-TogetherWithExtremeTemperature(x) | TogetherWithExtremeMoisture(x)))", "score": 0}
{"id": "eqasc_validation_1158", "prediction": "all x.(Fish(x) & -(ExtremeTemperature(x) | ExtremeMoisture(x))))", "score": -1}
{"id": "eqasc_validation_1159", "prediction": "all x y.((Wetting(x) & Brier(y)) -> ProvidesMoisture(x,y))", "score": 0}
{"id": "eqasc_validation_1159", "prediction": "all x y.((Wetting(x) & Corn(y)) -> (ProvidesMoisture(x,y) & MakesBrine(x)))", "score": 0}
{"id": "eqasc_validation_1159", "prediction": "all x.(Wetting(x) -> ProvidesMoisture(x))", "score": 0}
{"id": "eqasc_validation_1159", "prediction": "all x.(Wetting(x) -> (ProvidesMoisture(x) & MakesMarine(x)))", "score": 0}
{"id": "eqasc_validation_1159", "prediction": "all x.(Wetting(x) -> ProvidesMoistureToMakeBrain(x))", "score": 0}
{"id": "eqasc_validation_1159", "prediction": "all x y.((Wetting(x) & Water(y)) -> Provides(x,y))", "score": 0}
{"id": "eqasc_validation_1159", "prediction": "All x.(Wetting(x) -> ProvidesMoisture(x))", "score": -1}
{"id": "eqasc_validation_1159", "prediction": "all x.(Wetting(x) -> ProvidesMoistureToMakeBrine(x))", "score": 0}
{"id": "eqasc_validation_1159", "prediction": "all x y.((Wetting(x) & Grass(y)) -> ProvidesMoistureToMake(x,y))", "score": 0}
{"id": "eqasc_validation_1159", "prediction": "all x y.((Wetting(x) & Salt(y)) -> ProvideMoistureToMake(x,y))", "score": 0}
{"id": "eqasc_validation_1159", "prediction": "all x y.((Wetting(x) & Brittle(y)) -> ProvidesMoisture(x,y))", "score": 0}
{"id": "eqasc_validation_1159", "prediction": "all x y.((Wetting(x) & Briar(y)) -> ProvidesMoisture(x,y))", "score": 0}
{"id": "eqasc_validation_1159", "prediction": "Wetting ProvidesMoisture(wetting)", "score": -1}
{"id": "eqasc_validation_1159", "prediction": "all x.(Wetting(x) -> (ProvidesMoisture(x,Brine)))", "score": 0}
{"id": "eqasc_validation_1160", "prediction": "all x.(AquaticOrganism(x) -> (-TravelingExtremeTemperature(x) & -TravelingExtremeWetness(x)))", "score": 0}
{"id": "eqasc_validation_1160", "prediction": "all x.(AquaticOrganism(x) -> (-ExtremeTemperatureAndWetness(x)))", "score": 0}
{"id": "eqasc_validation_1160", "prediction": "all x.((AquaticOrganism(x) & -ExtremeTemperature(x) & -ExtremeWetness(x)) -> -ExtremeWetness(x))", "score": 0}
{"id": "eqasc_validation_1160", "prediction": "all x.((AquaticOrganism(x) & -ExtremeTemperature(x) & -ExtremeWetness(x)) -> -ExtremeWetnessAndTemperature(x))", "score": 0}
{"id": "eqasc_validation_1160", "prediction": "all x.(WatercraftOrganism(x) -> -(ExtremeTemperature(x) | ExtremeWetness(x)))", "score": 0}
{"id": "eqasc_validation_1160", "prediction": "all x.(AquaticOrganism(x) -> -(ExtremeTemperature(x) | ExtremeWetness(x)))", "score": 0}
{"id": "eqasc_validation_1160", "prediction": "all x.(AquaticOrganism(x) -> -ExtremeTemperatureOrWetness(x))", "score": 0}
{"id": "eqasc_validation_1160", "prediction": "all x.(AquaticOrganism(x) -> -ExtremeTemperature(x) & -ExtremeWetness(x))", "score": 0}
{"id": "eqasc_validation_1160", "prediction": "all x.((AquaticOrganism(x) & -ExtremeTemperature(x) & -ExtremeWetness(x)) -> -ExtremeTemperatureOrWetness(x))", "score": 0}
{"id": "eqasc_validation_1160", "prediction": "(exists x.(AquaticOrganism(x) & -ExtremeTemperature(x)) & -ExtremeWetness(x))", "score": 0}
{"id": "eqasc_validation_1160", "prediction": "all x.(AquaticOrganism(x) -> (-ExtremeTemperature(x) | ExtremeWetness(x)))", "score": 0}
{"id": "eqasc_validation_1160", "prediction": "all x.((AquaticOrganism(x) & -RangesOfTemperatureAndWetness(x)) -> -Equals(x))", "score": 0}
{"id": "eqasc_validation_1160", "prediction": "all x.(AquaticOrganism(x) -> (-ExtremeTemperatureOrWetness(x)))", "score": 0}
{"id": "eqasc_validation_1161", "prediction": "all x y.((Metal(x) & Rusts(x)) -> OrangeOnSurface(y))", "score": 0}
{"id": "eqasc_validation_1161", "prediction": "all x y.((Metal(x) & Rusts(x)) -> BecomesOrangeOnSurface(y))", "score": 0}
{"id": "eqasc_validation_1161", "prediction": "all x y z.((Metal(x) & Rusts(x) & Metal(y) & Surface(z)) -> Obsidian(x,y,z))", "score": 0}
{"id": "eqasc_validation_1161", "prediction": "all x.((Metal(x) & Rusts(x)) -> OrangeOnSurface(x))", "score": 0}
{"id": "eqasc_validation_1161", "prediction": "all x.(Rotes(x) -> Orange(x))", "score": 0}
{"id": "eqasc_validation_1161", "prediction": "all x y z.((Metal(x) & Rusts(x) & Metal(y) & Surface(z)) -> (Decline(y,z) & Orange(y)))", "score": 0}
{"id": "eqasc_validation_1161", "prediction": "all x y z w.((Metal(x) & Rusts(x) & Metal(y) & Surface(z) & OrangeOnSurface(y)) -> White(y))", "score": 0}
{"id": "eqasc_validation_1161", "prediction": "all x y z.((Metal(x) & Rust(y) & Bleaches(x,y)) -> OrangeOnSurface(x))", "score": 0}
{"id": "eqasc_validation_1161", "prediction": "all x y z.((Metal(x) & Rusts(x) & Metal(y) & Surface(z) & HasAction(x,y)) -> Orange(y,z))", "score": 0}
{"id": "eqasc_validation_1161", "prediction": "all x y z.((Metal(x) & Rusts(x) & Metal(y) & Surface(z) & OrangeOnSurface(y,z)) -> BecomesWhenSurfaceRusts(y,z))", "score": 0}
{"id": "eqasc_validation_1161", "prediction": "all x y z w.((Metal(x) & Rusts(x) & Metal(y) & Surface(z) & Color(w)) -> OrangeOnSurface(y,z,w))", "score": 0}
{"id": "eqasc_validation_1161", "prediction": "all x y z.(Metallic(x) & Rusts(x) & Metal(y) & Surface(z) & OrangeOnSurface(y,z)) -> OrangeOnSurface(x,y,z))", "score": -1}
{"id": "eqasc_validation_1161", "prediction": "all x y z.((Metal(x) & Rusts(x) & Metal(y) & Surface(z)) -> (Telefine(y,z) & OrangeOnSurface(y,z)))", "score": 0}
{"id": "eqasc_validation_1161", "prediction": "all x y z.((Metal(x) & Rusts(x) & Metal(y) & Surface(z)) -> Orange(y))", "score": 0}
{"id": "eqasc_validation_1161", "prediction": "all x y z.((Metal(x) & Rusts(x) & Metal(y) & Surface(z) & BecomesOrange(y)) -> Orange(y,z))", "score": 0}
{"id": "eqasc_validation_1162", "prediction": "all x.((Iron(x) & Oxidizes(x)) -> Rusts(x))", "score": 0}
{"id": "eqasc_validation_1162", "prediction": "all x.(Orbits(x) -> Rotates(x))", "score": 0}
{"id": "eqasc_validation_1162", "prediction": "all x y.((Iron(x) & Oxidizes(x)) -> Rusts(x))", "score": 0}
{"id": "eqasc_validation_1162", "prediction": "all x.((Coal(x) & Oxidizes(x)) -> Rusts(x))", "score": 0}
{"id": "eqasc_validation_1162", "prediction": "all x.(Oxidizes(x) -> Rusts(x))", "score": 0}
{"id": "eqasc_validation_1162", "prediction": "all x.(OxydatesIron(x) -> Rust(x))", "score": 0}
{"id": "eqasc_validation_1162", "prediction": "all x.((Iron(x) & Oxidizes(x)) -> Rotates(x))", "score": 0}
{"id": "eqasc_validation_1162", "prediction": "all x.(OxidizesIron(x) -> Rusts(x))", "score": 0}
{"id": "eqasc_validation_1162", "prediction": "all x y.((Iron(x) & Oxidizes(x)) -> Ruins(y))", "score": 0}
{"id": "eqasc_validation_1162", "prediction": "all x.(OxygensIron(x) -> Retains(x))", "score": 0}
{"id": "eqasc_validation_1163", "prediction": "all x.(Oxidizes(x,iron) -> AgreesOnSurface(x,orange))", "score": 0}
{"id": "eqasc_validation_1163", "prediction": "all x y.((Iron(x) & Oxidizes(x)) -> Orange(y))", "score": 0}
{"id": "eqasc_validation_1163", "prediction": "all x.((Iron(x) & Oxidizes(x)) -> BecomesOrangeOnSurface(x))", "score": 0}
{"id": "eqasc_validation_1163", "prediction": "all x.((Iron(x) & Oxidizes(x)) -> Orange(x))", "score": 0}
{"id": "eqasc_validation_1163", "prediction": "all x y.((Iron(x) & Oxidizes(x)) -> BecomesOrange(y))", "score": 0}
{"id": "eqasc_validation_1163", "prediction": "all x.((IronOxidizing(x) & Oxygens(x)) -> OrangeOnSurface(x))", "score": 0}
{"id": "eqasc_validation_1163", "prediction": "all x y.((IronOxidizes(x) & Metal(y)) -> Orange(y))", "score": 0}
{"id": "eqasc_validation_1163", "prediction": "all x.((IronOxidizes(x) & Metal(x)) -> Orange(x))", "score": 0}
{"id": "eqasc_validation_1163", "prediction": "all x y.((Iron(x) & Oxydizes(x,y)) -> Orange(y))", "score": 0}
{"id": "eqasc_validation_1163", "prediction": "all x.((Element(x) & Oxidizes(x)) -> OrangeMarble(x))", "score": 0}
{"id": "eqasc_validation_1163", "prediction": "all x.((Iron(x) & Oxizes(x)) -> OrangeOnSurface(x))", "score": 0}
{"id": "eqasc_validation_1163", "prediction": "all x.(Oxydizes(x) -> ColorOrange(x))", "score": 0}
{"id": "eqasc_validation_1163", "prediction": "all x.((Iron(x) & Oxidas(x)) -> OrangeOnSurface(x))", "score": 0}
{"id": "eqasc_validation_1163", "prediction": "all x y.((IronOxidizes(x) & Metal(y)) -> OrangeOnSurface(y))", "score": 0}
{"id": "eqasc_validation_1164", "prediction": "all x y z.((Moisture(x) & Metal(y) & Rusting(z) & Corrosion(z)) -> Damages(x,y,z))", "score": 0}
{"id": "eqasc_validation_1164", "prediction": "all x.(Moisture(x) -> CanDamageMetal(x))", "score": 0}
{"id": "eqasc_validation_1164", "prediction": "all x.(Moisture(x) -> DamagesMetal(x))", "score": 0}
{"id": "eqasc_validation_1164", "prediction": "all x.(Moisture(x) -> (DutyMetal(x) & CauseRooting(x) & CauseCorrosion(x)))", "score": 0}
{"id": "eqasc_validation_1164", "prediction": "all x.(Moisture(x) -> (DamagesMetal(x) & CausesRusting(x) & CausesCorrosion(x)))", "score": 0}
{"id": "eqasc_validation_1164", "prediction": "all x y z.((Moisture(x) & Metal(y) & Rust(z) & Corrosion(w)) -> Damage(x,y))", "score": 0}
{"id": "eqasc_validation_1164", "prediction": "all x.(Moisture(x) -> (DamageMetal(x) & CausesRusting(x) & CausesCorrosion(x)))", "score": 0}
{"id": "eqasc_validation_1164", "prediction": "all x y.((Moisture(x) & Metal(y)) -> (Damages(x,y) & CausesRosting(x) & CausesCorrosion(x)))", "score": 0}
{"id": "eqasc_validation_1164", "prediction": "all x.(Moisture(x) -> (DamageMetal(x) & Rusting(x) & Corrosion(x)))", "score": 0}
{"id": "eqasc_validation_1164", "prediction": "all x y.((Moisture(x) & Metal(y)) -> (Damage(x,y) & CausesRosting(x) & CausesCorrosion(x)))", "score": 0}
{"id": "eqasc_validation_1164", "prediction": "all x.(Moisture(x) -> (DamageMetal(x) & (Roséing(x) | Corrosion(x))))", "score": 0}
{"id": "eqasc_validation_1164", "prediction": "all x.(Moisture(x) -> (DamageMetal(x) & CausesRaining(x) & CausesCorrosion(x)))", "score": 0}
{"id": "eqasc_validation_1164", "prediction": "all x.(Moisture(x) -> (DamagesMetal(x) & CausesRotzing(x) & CausesCorrosion(x)))", "score": 0}
{"id": "eqasc_validation_1164", "prediction": "all x.((Moisture(x) & Metal(y)) -> (Damages(x,y) & CausesRotting(x) & CausesCorrosion(x)))", "score": 0}
{"id": "eqasc_validation_1165", "prediction": "all x y.((Moisture(x) & Metal(y)) -> Orange(y))", "score": 0}
{"id": "eqasc_validation_1165", "prediction": "all x.(Moisture(x) -> MetalBecomesOrangeOnSurface(x))", "score": 0}
{"id": "eqasc_validation_1165", "prediction": "all x y z.((Moisture(x) & Metal(y) & Surface(z)) -> OrangeBefore(x,y,z))", "score": 0}
{"id": "eqasc_validation_1165", "prediction": "all x y.((Moisture(x) & Surface(y)) -> MetalOrange(x,y))", "score": 0}
{"id": "eqasc_validation_1165", "prediction": "all x.(Moisture(x) -> CanCauseMetalToBecomeOrange(x))", "score": 0}
{"id": "eqasc_validation_1165", "prediction": "all x.((Moisture(x) & Metal(y) & Surface(z)) -> Orange(y,z))", "score": 0}
{"id": "eqasc_validation_1165", "prediction": "all x y.((Moisture(x) & Metal(y)) -> (BecomesOrangeOnSurface(y)))", "score": 0}
{"id": "eqasc_validation_1165", "prediction": "all x y.((Moisture(x) & Metal(y)) -> (BecomesOrangeOnSurface(x,y)))", "score": 0}
{"id": "eqasc_validation_1165", "prediction": "all x.(Moisture(x) -> MetalBecomesOrange(x))", "score": 0}
{"id": "eqasc_validation_1165", "prediction": "all x.(Moisture(x) -> Metal(y))", "score": 0}
{"id": "eqasc_validation_1165", "prediction": "all x.(Moisture(x) -> (Metalle hasBecomeOrangeOnSurface(x)))", "score": -1}
{"id": "eqasc_validation_1165", "prediction": "all x.(Moisture(x) -> OxygenOnSurface(x))", "score": 0}
{"id": "eqasc_validation_1165", "prediction": "all x y z.((Moisture(x) & Metal(y) & Surface(z)) -> BecomesOrange(x,y,z))", "score": 0}
{"id": "eqasc_validation_1165", "prediction": "all x y.((Moisture(x) & Metal(y)) -> OrangeOnSurface(y))", "score": 0}
{"id": "eqasc_validation_1165", "prediction": "all x.(Moisture(x) -> MetalBecomesOrangeLiquid(x))", "score": 0}
{"id": "eqasc_validation_1166", "prediction": "all x y.((Iron(x) & PresenceOf(x,oxygen) & PresenceOf(y,water)) -> Ruin(x))", "score": 0}
{"id": "eqasc_validation_1166", "prediction": "all x.((Iron(x) & PresenceOfOxygen(x) & PresenceOfWater(x)) -> Ruins(x))", "score": 0}
{"id": "eqasc_validation_1166", "prediction": "all x.((Iron(x) & PresenceOfOxygen(x) & PresenceOfWater(x)) -> RustsIn(x))", "score": 0}
{"id": "eqasc_validation_1166", "prediction": "all x.(Iron(x) -> (RoseInSurface(x) & PresenceOfOxygenOrWater(x)))", "score": 0}
{"id": "eqasc_validation_1166", "prediction": "all x y.((Iron(x) & Presence(y,Oxygen) & Presence(y)) -> RuinsIn(x,y))", "score": 0}
{"id": "eqasc_validation_1166", "prediction": "all x.(Iron(x) -> (RucksInPresenceOfOxygen(x) & RuinsInPresenceOfWater(x)))", "score": 0}
{"id": "eqasc_validation_1166", "prediction": "all x.(Iron(x) -> NourishesInOxygen(x) & NourishesInWater(x))", "score": 0}
{"id": "eqasc_validation_1166", "prediction": "all x.((Iron(x) & PresenceOfOxygen(x) & PresenceOfWater(x)) -> RuinsInPresenceOf(x,y))", "score": 0}
{"id": "eqasc_validation_1166", "prediction": "all x y.((Iron(x) & Oxygen(y) & Water(y)) -> RustsIn(x,y))", "score": 0}
{"id": "eqasc_validation_1166", "prediction": "all x y z.((Iron(x) & Oxygen(y) & Water(z)) -> Rodents(x))", "score": 0}
{"id": "eqasc_validation_1166", "prediction": "all x.((Iron(x) & PresenceOfOxygen(x) & PresenceOfWater(x)) -> Ruin(x))", "score": 0}
{"id": "eqasc_validation_1166", "prediction": "all x.(Iron(x) -> (RosesInOxygen(x) & RuinsInWater(x)))", "score": 0}
{"id": "eqasc_validation_1166", "prediction": "all x.(Iron(x) -> RitesSinOxygenAndWater(x))", "score": 0}
{"id": "eqasc_validation_1167", "prediction": "all x.((Oxygen(x) & Water(x)) -> MetalTurnsOrange(x))", "score": 0}
{"id": "eqasc_validation_1167", "prediction": "all x.((Oxygen(x) & Water(x)) -> TurnsOrange(x))", "score": 0}
{"id": "eqasc_validation_1167", "prediction": "all x.((Oxygen(x) & Water(x)) -> MetalReturnsOrange(x))", "score": 0}
{"id": "eqasc_validation_1167", "prediction": "all x.((Oxygen(x) & Water(x)) -> MetalToTurnOrange(x))", "score": 0}
{"id": "eqasc_validation_1167", "prediction": "all x y.((Oxygen(x) & Water(y)) -> (MetalTurnsOrange(y) & CausesOrange(x,y)))", "score": 0}
{"id": "eqasc_validation_1167", "prediction": "all x y.((Oxygen(x) & Water(y)) -> MetalToTurnOrange(x,y))", "score": 0}
{"id": "eqasc_validation_1167", "prediction": "all x y.((Oxygen(x) & Water(y)) -> MetalTworesOrange(x))", "score": 0}
{"id": "eqasc_validation_1167", "prediction": "all x.((Oxygen(x) & Water(y) & Metal(x)) -> TurnsOrange(x))", "score": 0}
{"id": "eqasc_validation_1167", "prediction": "all x.((Oxygen(x) & Water(x)) -> RedMetal(x))", "score": 0}
{"id": "eqasc_validation_1167", "prediction": "all x y.((Oxygen(x) & Water(y)) -> (MaterialTurnsOrange(x,y) & OxygenTurnsOrange(x)))", "score": 0}
{"id": "eqasc_validation_1167", "prediction": "all x y z.((Oxygen(x) & Water(y) & Metal(z)) -> (OrangeOrange(z) & Oxygen(x) & Water(y)))", "score": 0}
{"id": "eqasc_validation_1167", "prediction": "all x y.((Oxygen(x) & Water(y)) -> MetalTurnsOrange(x))", "score": 0}
{"id": "eqasc_validation_1167", "prediction": "all x y.((Oxygen(x) & Water(y)) -> (VibrantOrange(x) & WillCauseMetalToTurnOrange(x)))", "score": 0}
{"id": "eqasc_validation_1167", "prediction": "all x y z.((Oxygen(x) & Water(y) & Metal(z)) -> TurnsOrangeToMelt(z))", "score": 0}
{"id": "eqasc_validation_1168", "prediction": "all x.(RustStained(x) -> OxidationResult(x))", "score": 0}
{"id": "eqasc_validation_1168", "prediction": "all x.(RustStain(x) -> OxidationResult(x))", "score": 0}
{"id": "eqasc_validation_1168", "prediction": "all x.(RustStain(x) -> Oxidation(x))", "score": 0}
{"id": "eqasc_validation_1168", "prediction": "all x.(RustStone(x) -> OxidationResult(x))", "score": 0}
{"id": "eqasc_validation_1168", "prediction": "all x.((RustStain(x) & Oxidation(x)) -> Distinct(x))", "score": 0}
{"id": "eqasc_validation_1168", "prediction": "all x.(RustStained(x) -> Oxidation(x))", "score": 0}
{"id": "eqasc_validation_1168", "prediction": "all x.(RushStrain(x) -> ThisResultOfOxidation(x))", "score": 0}
{"id": "eqasc_validation_1168", "prediction": "all x.(RustStains(x) -> ResultOfOxidation(x))", "score": 0}
{"id": "eqasc_validation_1168", "prediction": "all x.(RustStains(x) -> Oxidation(x))", "score": 0}
{"id": "eqasc_validation_1168", "prediction": "all x.(RustStains(x) -> OxidationResult(x))", "score": 0}
{"id": "eqasc_validation_1168", "prediction": "all x.(Rust(x) -> OxidationResult(x))", "score": 0}
{"id": "eqasc_validation_1168", "prediction": "all x.(RustStation(x) -> Oxidation(x))", "score": 0}
{"id": "eqasc_validation_1168", "prediction": "all x.(RustStained(x) -> ResultOfOxidation(x))", "score": 0}
{"id": "eqasc_validation_1169", "prediction": "all x y.((Metal(x) & Oxidation(y)) -> OrangeOnSurface(x,y))", "score": 0}
{"id": "eqasc_validation_1169", "prediction": "all x.((Metal(x) & OxidationResult(x)) -> OrangeOnSurface(x))", "score": 0}
{"id": "eqasc_validation_1169", "prediction": "all x.((Metal(x) & Oxidation(x)) -> OrangeOnSurface(x))", "score": 0}
{"id": "eqasc_validation_1169", "prediction": "all x.(OxidationOfMetal(x) -> OrangeOnSurface(x))", "score": 0}
{"id": "eqasc_validation_1169", "prediction": "all x.(Oxidation(x) -> ColorsOrange(x))", "score": 0}
{"id": "eqasc_validation_1169", "prediction": "all x y z.((Metal(x) & Oxidation(y) & Surface(z)) -> Orange(x,y,z))", "score": 0}
{"id": "eqasc_validation_1169", "prediction": "all x y.((Metal(x) & ObsidianArea(y)) -> Orange(x,y))", "score": 0}
{"id": "eqasc_validation_1169", "prediction": "all x.((Metal(x) & Oxidation(x)) -> OrangeAsSurface(x))", "score": 0}
{"id": "eqasc_validation_1169", "prediction": "all x.((Metal(x) & Oxidation(x)) -> OrangeSurface(x))", "score": 0}
{"id": "eqasc_validation_1169", "prediction": "all x y.((Metal(x) & Oxidation(y)) -> OrangeSheet(x,y))", "score": 0}
{"id": "eqasc_validation_1169", "prediction": "all x y.((Metal(x) & Oxidation(y)) -> OrangeOnSurface(x))", "score": 0}
{"id": "eqasc_validation_1170", "prediction": "all x.(Moisture(x) -> MainCauseOfRust(x))", "score": 0}
{"id": "eqasc_validation_1170", "prediction": "all x.((Moisture(x) & Rust(x)) -> MainCause(x,y))", "score": 0}
{"id": "eqasc_validation_1170", "prediction": "all x y.((Moisture(x) & Rust(y)) -> Cause(x,y))", "score": 0}
{"id": "eqasc_validation_1170", "prediction": "all x.((Moisture(x) & Rust(x)) -> MainCauseOf(x,rust))", "score": 0}
{"id": "eqasc_validation_1170", "prediction": "all x.(Moisture(x) -> CauseOfRain(x))", "score": 0}
{"id": "eqasc_validation_1170", "prediction": "all x y.((Moisture(x) & Rust(y)) -> MainCause(x,y))", "score": 0}
{"id": "eqasc_validation_1170", "prediction": "all x.(Moisture(x) -> CauseOfRose(x))", "score": 0}
{"id": "eqasc_validation_1170", "prediction": "all x.(Moisture(x) -> MainCauseOfRose(x))", "score": 0}
{"id": "eqasc_validation_1170", "prediction": "the main cause of rust.", "score": -1}
{"id": "eqasc_validation_1170", "prediction": "all x y z.((Moisture(x) & Rust(y) & Moisture(z)) -> Cause(x,y))", "score": 0}
{"id": "eqasc_validation_1170", "prediction": "all x.(Moisture(x) -> MainCauseOfRost(x))", "score": 0}
{"id": "eqasc_validation_1170", "prediction": "all x.((Moisture(x) & Rust(x)) -> Cause(x,Moisture))", "score": 0}
{"id": "eqasc_validation_1170", "prediction": "all x.((Moisture(x) & Rrust(x)) -> MainCause(x))", "score": 0}
{"id": "eqasc_validation_1171", "prediction": "all x y.((Moisture(x) & Surface(y)) -> TurnsMetalOrange(x,y))", "score": 0}
{"id": "eqasc_validation_1171", "prediction": "all x.(Moisture(x) -> TurnsMetalOrangeOnSurface(x))", "score": 0}
{"id": "eqasc_validation_1171", "prediction": "all x.((Moisture(x) & MetalOrange(x)) -> TurnsOnSurface(x,MetalOrange))", "score": 0}
{"id": "eqasc_validation_1171", "prediction": "all x.(Moisture(x) -> ChangesMetalOrangeOnSurface(x))", "score": 0}
{"id": "eqasc_validation_1171", "prediction": "all x y.((Moisture(x) & MetalOrange(y)) -> CanTurnsOnSurface(x,y))", "score": 0}
{"id": "eqasc_validation_1171", "prediction": "all x.((Moisture(x) & MetalOrange(x)) -> TurnsOnSurface(x,y))", "score": 0}
{"id": "eqasc_validation_1171", "prediction": "all x y z.((Moisture(x) & MetalOrange(y) & Surface(z)) -> CanTurnOn(x,y,z))", "score": 0}
{"id": "eqasc_validation_1171", "prediction": "all x.(Moisture(x) -> CanTurnMetalOrange(x))", "score": 0}
{"id": "eqasc_validation_1171", "prediction": "all x y.((Moisture(x) & MetalOrange(y)) -> ReturnsOnSurface(x,y))", "score": 0}
{"id": "eqasc_validation_1171", "prediction": "all x y.((Moisture(x) & MetalOrange(y)) -> TurnsOnSurface(x,y))", "score": 0}
{"id": "eqasc_validation_1171", "prediction": "all x y.((Moisture(x) & Surface(y)) -> TurnsMetallonOrange(x,y))", "score": 0}
{"id": "eqasc_validation_1171", "prediction": "all x.(Moisture(x) -> TurnsMetalOrange(x))", "score": 0}
{"id": "eqasc_validation_1171", "prediction": "all x.(MoistureToReturnMetalOrange(x) -> TurnsMetalOrangeOnSurface(x))", "score": 0}
{"id": "eqasc_validation_1171", "prediction": "all x.((Moisture(x) & TurnsOrangeOnSurface(x)) -> MetalOrangeOnSurface(x))", "score": 0}
{"id": "eqasc_validation_1171", "prediction": "all x y.((Moisture(x) & MetalOrange(y) & SoftSurface(y)) -> TurnsOnSurfaceOnOrange(x,y))", "score": 0}
{"id": "eqasc_validation_1172", "prediction": "all x.(Iron(x) -> ActiveMetal(x))", "score": 0}
{"id": "eqasc_validation_1172", "prediction": "all x.(Eric(x) -> ActiveMetal(x))", "score": 0}
{"id": "eqasc_validation_1172", "prediction": "all x.((Iron(x) & ChemicallyActiveMetal(x)) -> ActiveMetal(x))", "score": 0}
{"id": "eqasc_validation_1172", "prediction": "all x.(Iron(x) -> (ActiveMetal(x) & Chemically(x)))", "score": 0}
{"id": "eqasc_validation_1172", "prediction": "all x.((Iron(x) & Chemically(x)) -> ActiveMetal(x))", "score": 0}
{"id": "eqasc_validation_1173", "prediction": "all x y z.((Iron(x) & Rust(x) & Iron(y) & Surface(z) & Rusts(y,x)) -> Orange(y,z))", "score": 0}
{"id": "eqasc_validation_1173", "prediction": "all x y z.((IronRusts(x) & Iron(y) & Surface(z)) -> OrangeOnSurface(y,z))", "score": 0}
{"id": "eqasc_validation_1173", "prediction": "all x y z.((IronRushes(x) & Iron(y) & Surface(z)) -> Orange(y))", "score": 0}
{"id": "eqasc_validation_1173", "prediction": "all x y z.((Iron(x) & Rust(x)) -> IronThan(y,z))", "score": 0}
{"id": "eqasc_validation_1173", "prediction": "all x y z.((IronRushes(x) & Iron(y) & Surface(z) & OrangeBetween(y,z)) -> (RosesRushes(y) & Iron(z)))", "score": 0}
{"id": "eqasc_validation_1173", "prediction": "all x y z w.((IronRoses(x) & Iron(y) & Surface(z) & Estrange(x)) -> Orange(y))", "score": 0}
{"id": "eqasc_validation_1173", "prediction": "all x y z.((EirdRerusts(x) & Iron(y) & Surface(z)) -> OrangeOnSurface(y,z))", "score": 0}
{"id": "eqasc_validation_1173", "prediction": "all x y z.((IronRushes(x) & IronRoss(y) & Surface(z) & Orange(y)) -> MakesOnSurface(x,y,z))", "score": 0}
{"id": "eqasc_validation_1173", "prediction": "all x y z.((Iron(x) & Rusts(x) & Iron(y) & Surface(z)) -> Orange(y))", "score": 0}
{"id": "eqasc_validation_1173", "prediction": "all x.((IronRusts(x) & Iron(x)) -> OrangeOnSurface(x))", "score": 0}
{"id": "eqasc_validation_1173", "prediction": "all x y.((Iron(x) & Rusts(x)) -> IronBecomesOrangeOnSurface(y))", "score": 0}
{"id": "eqasc_validation_1173", "prediction": "all x y z.((IronRrust(x) & Iron(y) & Surface(z)) -> OrangeInSurface(y,z))", "score": 0}
{"id": "eqasc_validation_1173", "prediction": "all x y z.((Iron(x) & Rusts(x) & Iron(y) & Surface(z) & Orange(y)) -> (Becomes(y) & OnSurface(y,z)))", "score": 0}
{"id": "eqasc_validation_1173", "prediction": "all x y.((Fermented(x) & Ruins(x)) -> ObscureOnSurface(y,x))", "score": 0}
{"id": "eqasc_validation_1173", "prediction": "all x y.((IronRushes(x) & Iron(y)) -> OrangeSurface(y,x))", "score": 0}
{"id": "eqasc_validation_1173", "prediction": "all x y z.((Iron(x) & Rusts(x) & Iron(y) & Surface(z) & Rusts(y,z) & Color(z)) -> Orange(y,z))", "score": 0}
{"id": "eqasc_validation_1174", "prediction": "all x.(IronOxygen(x) -> Rust(x))", "score": 0}
{"id": "eqasc_validation_1174", "prediction": "all x.(IronOxide(x) -> Rust(x))", "score": 0}
{"id": "eqasc_validation_1174", "prediction": "all x y.((IronOxygen(x) & Rust(y)) -> Does(x,y))", "score": 0}
{"id": "eqasc_validation_1174", "prediction": "all x.(IronOxygen(x) -> IsRose(x))", "score": 0}
{"id": "eqasc_validation_1174", "prediction": "all x y.((IronOxygen(x) & Weather(y)) -> Rust(x))", "score": 0}
{"id": "eqasc_validation_1174", "prediction": "all x.(IronOxygen(x) -> Ruth(x))", "score": 0}
{"id": "eqasc_validation_1174", "prediction": "(IronOxygen(iron) & Rust(iron))", "score": 0}
{"id": "eqasc_validation_1174", "prediction": "(Raut(iron) & Oxidation(iron))", "score": 0}
{"id": "eqasc_validation_1174", "prediction": "all x.(IronOil(x) -> Rosten(x))", "score": 0}
{"id": "eqasc_validation_1174", "prediction": "all x.(IronOxygen(x) -> Rot(x))", "score": 0}
{"id": "eqasc_validation_1174", "prediction": "all x y.((IronOxygen(x) & Rust(y)) ->.", "score": -1}
{"id": "eqasc_validation_1174", "prediction": "(IronOxygen(IronOxygen) & Rust(IronOxygen))", "score": 0}
{"id": "eqasc_validation_1175", "prediction": "all x.((Metal(x) & ContainsIronOxide(x)) -> OrangeOnSurface(x))", "score": 0}
{"id": "eqasc_validation_1175", "prediction": "all x y z.((Metal(x) & IronOxide(y) & Surface(z) & Contains(x,y)) -> OrangeOnSurface(x,z))", "score": 0}
{"id": "eqasc_validation_1175", "prediction": "all x y z.((Metal(x) & IronOxide(y) & Surface(z) & Contains(x,y) & OrangeOnSurface(x)) -> OrangeOnSurface(x))", "score": 0}
{"id": "eqasc_validation_1175", "prediction": "all x.((Metal(x) & ContainsIronOxygen(x)) -> OrangeOnSurface(x))", "score": 0}
{"id": "eqasc_validation_1175", "prediction": "all x y.((Metal(x) & IronOxide(y) & Contains(x,y)) -> OrangeOnSurface(x))", "score": 0}
{"id": "eqasc_validation_1175", "prediction": "all x y z.((Metal(x) & IronOxide(y) & Surface(z) & Contains(x,y) & Contains(x,z)) -> Orange(x,y))", "score": 0}
{"id": "eqasc_validation_1175", "prediction": "all x.((Metal(x) & IronOxide(x)) -> OrangeOnSurface(x))", "score": 0}
{"id": "eqasc_validation_1175", "prediction": "all x y.((Metal(x) & ContainsInIronOxide(x) & Has(x,y)) -> Orange(x))", "score": 0}
{"id": "eqasc_validation_1175", "prediction": "all x.(ContainsElement(x,ironOxide) -> OrangeOnSurface(x))", "score": 0}
{"id": "eqasc_validation_1176", "prediction": "all x y.((Surface(x) & PresenceOfOxygen(x) & PresenceOfWater(x) & Iron(y)) -> Orange(y))", "score": 0}
{"id": "eqasc_validation_1176", "prediction": "all x y.((PastOxygen(x) & PresenceOfWater(y)) -> IronOrangeOnSurface(x))", "score": 0}
{"id": "eqasc_validation_1176", "prediction": "all x.(PresentOfOxygenAndWater(x) -> OrangeOnSurface(x))", "score": 0}
{"id": "eqasc_validation_1176", "prediction": "all x.((Surface(x) & PresenceOfOxygen(x) & PresenceOfWater(x)) -> OrangeIn(x))", "score": 0}
{"id": "eqasc_validation_1176", "prediction": "all x.(PresenceOfOxygenAndWater(x) -> IronOrangeOnSurface(x))", "score": 0}
{"id": "eqasc_validation_1176", "prediction": "all x.((PresenceOfOxygen(x) & PresenceOfWater(x)) -> TurnsOrangeOnSurface(x))", "score": 0}
{"id": "eqasc_validation_1176", "prediction": "all x.((PresenceOfOxygen(x) & PresenceOfWater(x)) -> (OrangeAndSurface(x)))", "score": 0}
{"id": "eqasc_validation_1176", "prediction": "all x y.((PresenceOfOxygen(x) & PresenceOfWater(y)) -> Orange(x))", "score": 0}
{"id": "eqasc_validation_1176", "prediction": "all x.(PresentOfOxygen(x) & PresenceOfWater(x) -> IronDependsOrange(x))", "score": 0}
{"id": "eqasc_validation_1176", "prediction": "all x.((PresenceOfOxygen(x) & PresenceOfWater(x)) -> OrangeOnSurface(x))", "score": 0}
{"id": "eqasc_validation_1176", "prediction": "all x y.((PresenceOf(x,y) & PresenceOf(y,x) & PresenceOf(x,y)) -> IronBecomesOrangeOnSurface(x))", "score": 0}
{"id": "eqasc_validation_1176", "prediction": "all x y.((PresentOfOxygen(x) & PresentOfWater(y)) -> AgeOrange(x))", "score": 0}
{"id": "eqasc_validation_1176", "prediction": "(PurposeOfOxygen(x) & PresenceOfWater(x) & Iron(x)) -> OrangeOnSurface(x))", "score": -1}
{"id": "eqasc_validation_1176", "prediction": "all x y.((Oxygen(x) & Water(y) & PresenceIsOrange(x,y)) -> Iron(x))", "score": 0}
{"id": "eqasc_validation_1176", "prediction": "all x.((PresenceOfOxygen(x) & PresenceOfWater(x)) -> IronBecomesOrange(x))", "score": 0}
{"id": "eqasc_validation_1176", "prediction": "all x.((PresenceOfOxygen(x) & PresenceOfWater(x)) -> OrangeSurface(x))", "score": 0}
{"id": "eqasc_validation_1177", "prediction": "all x y.((Metal(x) & Oxidation(y)) -> TurnsToRrust(x,y))", "score": 0}
{"id": "eqasc_validation_1177", "prediction": "all x.(Metal(x) -> TurnsToRust(x,oxidation))", "score": 0}
{"id": "eqasc_validation_1177", "prediction": "all x.(Metal(x) -> Rust(x))", "score": 0}
{"id": "eqasc_validation_1177", "prediction": "all x.(Metal(x) -> TurnsToRose(x))", "score": 0}
{"id": "eqasc_validation_1177", "prediction": "exists x.(Metal(x) & TurnsToRust(x))", "score": 0}
{"id": "eqasc_validation_1177", "prediction": "all x.(Metal(x) -> TurnsToRust(x))", "score": 0}
{"id": "eqasc_validation_1177", "prediction": "all x.(Metal(x) -> TurnsToRustViaOxidation(x))", "score": 0}
{"id": "eqasc_validation_1177", "prediction": "all x y.((Metal(x) & Oxidation(y)) -> TurnsToRose(x,y))", "score": 0}
{"id": "eqasc_validation_1177", "prediction": "all x.(Metal(x) -> TurnsToRoss(x))", "score": 0}
{"id": "eqasc_validation_1177", "prediction": "all x.(Metal(x) & Oxidation(x)) -> TurnsToRust(x))", "score": -1}
{"id": "eqasc_validation_1177", "prediction": "all x.(Metal(x) -> ToRustViaOxidation(x))", "score": 0}
{"id": "eqasc_validation_1178", "prediction": "all x.(Oxidation(x) -> MakesMetalOrange(x))", "score": 0}
{"id": "eqasc_validation_1178", "prediction": "all x y z.((Oxidation(x) & MetalOrange(y) & Oxidation(z)) -> Makes(x,y,z))", "score": 0}
{"id": "eqasc_validation_1178", "prediction": "all x.(OxidationMakesMeltOrange(x) -> (Oxidation(x) & MetallicOrange(x)))", "score": 0}
{"id": "eqasc_validation_1178", "prediction": "all x.(Oxidation(x) -> MetalOrange(x))", "score": 0}
{"id": "eqasc_validation_1178", "prediction": "all x y z.((Oxidation(x) & MetalOrange(y) & Oxidation(x)) -> Makes(x,y))", "score": 0}
{"id": "eqasc_validation_1178", "prediction": "all x y.(Oxidation(x) -> MetalOrange(y))", "score": 0}
{"id": "eqasc_validation_1178", "prediction": "all x y.((Oxidation(x) & MetalOrange(y)) -> Makes(x,y))", "score": 0}
{"id": "eqasc_validation_1178", "prediction": "all x.(Oxidation(x) -> MakesMetallicOrange(x))", "score": 0}
{"id": "eqasc_validation_1178", "prediction": "(OxidationMakesMetalOrange(OrangeA))", "score": 0}
{"id": "eqasc_validation_1178", "prediction": "all x y z.((Oxidation(x) & MetalOrange(y)) -> Makes(x,y))", "score": 0}
{"id": "eqasc_validation_1179", "prediction": "all x.((IronRushes(x) & IronTwoThirds(x)) -> OrangeOnSurface(x))", "score": 0}
{"id": "eqasc_validation_1179", "prediction": "all x.((IronRusting(x) & IronRrusts(x)) -> OrangeOnSurface(x))", "score": 0}
{"id": "eqasc_validation_1179", "prediction": "all x y.((IronRose(x) & Iron(y)) -> OrangeOnSurface(x))", "score": 0}
{"id": "eqasc_validation_1179", "prediction": "all x.((IronRushes(x) & Orange(x)) -> onSurface(x))", "score": 0}
{"id": "eqasc_validation_1179", "prediction": "all x y.((IronRusts(x) & Iron(y)) -> OrangeOnSurface(x))", "score": 0}
{"id": "eqasc_validation_1179", "prediction": "all x.(RrustsIron(x) -> Orange(x))", "score": 0}
{"id": "eqasc_validation_1179", "prediction": "all x.(RostsIron(x) -> OrangePurpose(x))", "score": 0}
{"id": "eqasc_validation_1179", "prediction": "all x y z.((Iron(x) & Rusts(x) & Orange(y)) -> OnSurface(x,y))", "score": 0}
{"id": "eqasc_validation_1179", "prediction": "all x.((IronRusts(x) & OrangeOnSurface(x)) -> Retains(x))", "score": 0}
{"id": "eqasc_validation_1179", "prediction": "all x.((IronRrusts(x) & OrangeSurface(x)) -> Rotates(x))", "score": 0}
{"id": "eqasc_validation_1179", "prediction": "all x.((IronRushes(x) & OrangeOnSurface(x)) -> IronRushes(x))", "score": 0}
{"id": "eqasc_validation_1179", "prediction": "all x,y.((IronRusting(x) & IronRusts(x)) -> OrangeOnSurface(y))", "score": -1}
{"id": "eqasc_validation_1179", "prediction": "all x y z.((Iron(x) & Rusts(x) & Surface(y) & EndsWith(x,y)) -> Orange(z))", "score": 0}
{"id": "eqasc_validation_1179", "prediction": "all x y z.((Iron(x) & Rust(y) & Surface(z)) -> (Orange(x,z) & Orange(y,z)))", "score": 0}
{"id": "eqasc_validation_1179", "prediction": "all x.(RosesIron(x) -> Orange(x) onSurface(x))", "score": -1}
{"id": "eqasc_validation_1180", "prediction": "all x.(Steel(x) -> MostUsualOfMetals(x))", "score": 0}
{"id": "eqasc_validation_1180", "prediction": "(MostUtilityMetal(styl) & Steel(r) & -UtilestMetal(s) & NonUtilizedMetal(s) & -UtilestMetal(s))", "score": 0}
{"id": "eqasc_validation_1180", "prediction": "all x.(Steel(x) -> UsefulMetal(x))", "score": 0}
{"id": "eqasc_validation_1180", "prediction": "all x.(Steel(x) -> MostUsefulMetal(x))", "score": 0}
{"id": "eqasc_validation_1180", "prediction": "all x.(Steel(x) -> MostNecessaryMetal(x))", "score": 0}
{"id": "eqasc_validation_1180", "prediction": "all x y z.((Steel(x) & Metal(y) & Metal(z)) -> MostUseful(x,y,z))", "score": 0}
{"id": "eqasc_validation_1180", "prediction": "all x.(Steel(x) -> MostUsefulOfMetals(x))", "score": 0}
{"id": "eqasc_validation_1180", "prediction": "all x.(Steel(x) -> CurrentlyMostUsualOfMetals(x))", "score": 0}
{"id": "eqasc_validation_1180", "prediction": "all x.((Steel(x) & UsedMaterial(x)) -> Most(x))", "score": 0}
{"id": "eqasc_validation_1180", "prediction": "(MostUsualMetal(Stain) -> Steel(Steel))", "score": 0}
{"id": "eqasc_validation_1180", "prediction": "(MostViableMetal(Steel) -> MostUseful(Steel))", "score": 0}
{"id": "eqasc_validation_1180", "prediction": "all x.((Steel(x) & Metal(x)) -> MostUseful(x))", "score": 0}
{"id": "eqasc_validation_1180", "prediction": "all x.(Steel(x) -> MostUtil(x))", "score": 0}
{"id": "eqasc_validation_1180", "prediction": "all x.(Steel(x) -> UsualOfMetals(x))", "score": 0}
{"id": "eqasc_validation_1181", "prediction": "all x.((Steel(x) & Rusts(x)) -> Orange(x))", "score": 0}
{"id": "eqasc_validation_1181", "prediction": "all x.((Steel(x) & Ruins(x)) -> Orange(x))", "score": 0}
{"id": "eqasc_validation_1181", "prediction": "all x.((Steel(x) & Rusting(x)) -> Orange(x))", "score": 0}
{"id": "eqasc_validation_1181", "prediction": "all x.(Rosts(x) -> Orange(x))", "score": 0}
{"id": "eqasc_validation_1181", "prediction": "all x.(Roses(x) -> RedOrange(x))", "score": 0}
{"id": "eqasc_validation_1181", "prediction": "all x.(Rose(x) -> Orange(x))", "score": 0}
{"id": "eqasc_validation_1181", "prediction": "all x (Resins(x) -> Orange(x))", "score": 0}
{"id": "eqasc_validation_1181", "prediction": "all x.((Steel(x) & Rotates(x)) -> Orange(x))", "score": 0}
{"id": "eqasc_validation_1182", "prediction": "all x.((Surface(x) & Castiron(x) & Steel(x)) -> SusceptibleToCorrosion(x))", "score": 0}
{"id": "eqasc_validation_1182", "prediction": "all x y.((Castiron(x) & Steel(y)) -> (SensitivityToCorrosion(x,y) & FormOfRust(y)))", "score": 0}
{"id": "eqasc_validation_1182", "prediction": "all x.((MachironSolid(x) & SteelSolid(x)) -> (Rubbed(x) | SusceptibleToCorrosion(x)))", "score": 0}
{"id": "eqasc_validation_1182", "prediction": "all x.(ConsistsOf(x,cast-iron,seam,rust) -> SensitiveToCorrosion(x))", "score": -1}
{"id": "eqasc_validation_1182", "prediction": "all x y.((Castiron(x) | Steel(y)) -> SusceptibleToCorrosion(x,y))", "score": 0}
{"id": "eqasc_validation_1182", "prediction": "all x.((Surface(x) & CastIron(x) & Steel(x)) -> ResponsiveToCorrosion(x) & CausesRust(x))", "score": 0}
{"id": "eqasc_validation_1182", "prediction": "all x.((Surface(x) & CastIron(x) & Steel(x)) -> SpikedToCorrosion(x))", "score": 0}
{"id": "eqasc_validation_1182", "prediction": "all x.((Surface(x) & CastIron(x) & Steel(x)) -> SusceptibleToCorrosion(x))", "score": 0}
{"id": "eqasc_validation_1182", "prediction": "all x.((Surface(x) & CastIron(x) & Steel(x)) -> ReceptiveToCorrosion(x))", "score": 0}
{"id": "eqasc_validation_1182", "prediction": "all x.((Surface(x) & (CastIron(x) | Steel(x))) -> SusceptibleToCorrosion(x))", "score": 0}
{"id": "eqasc_validation_1182", "prediction": "all x y.((CastAiron(x) & SteelSurface(y)) -> SusceptibleToCorrosion(x,Rrust))", "score": 0}
{"id": "eqasc_validation_1182", "prediction": "all x y z.((Surface(x) & CastIron(y) & Steel(z)) -> (SusceptibleToCorrosion(y,z) & InFormOfRust(z)))", "score": 0}
{"id": "eqasc_validation_1182", "prediction": "all x.((Surface(x) & CastIsolene(x) | Surface(x,Steel(x))) -> ResponsiveToCorrosion(x))", "score": 0}
{"id": "eqasc_validation_1182", "prediction": "all x.((Shape(x) & CastIron(x) & Steel(x)) -> ResponsiveToCorrosion(x))", "score": 0}
{"id": "eqasc_validation_1182", "prediction": "all x.((Castiron(x) | SteelSurface(x)) -> SusceptibleToCorrosion(x))", "score": 0}
{"id": "eqasc_validation_1183", "prediction": "all x.((Shape(x) & CastIron(x) & Steel(x)) -> SusceptibleToOrange(x))", "score": 0}
{"id": "eqasc_validation_1183", "prediction": "all x.((Surface(x) & CastIron(x) & SteelSurface(x)) -> AdaptableToOrangeTo(x))", "score": 0}
{"id": "eqasc_validation_1183", "prediction": "all x y z.((Surface(x) & CastIron(y) & Steel(z)) -> (Fossil(x,y) & Surface(x,z)))", "score": 0}
{"id": "eqasc_validation_1183", "prediction": "all x.((Surface(x) & CastIron(x) & SteelSurface(x)) -> (SusceptibleToVersionOrange(x) & SusceptibleToToggleOrange(x)))", "score": 0}
{"id": "eqasc_validation_1183", "prediction": "all x y.((Surface(x) & (Cast-iron(x) | Steel(x)) & Silicone(y)) -> SusceptibleToOrange(x,y))", "score": -1}
{"id": "eqasc_validation_1183", "prediction": "all x y.((CastironSurface(x) & SteelSurface(y)) -> -ColorChocolate(x,y))", "score": 0}
{"id": "eqasc_validation_1183", "prediction": "all x y.((Surface(x) & CastIron(x) & Steel(y)) -> (Via Orange(x) & CapriciousToBecoming(x,y)))", "score": -1}
{"id": "eqasc_validation_1183", "prediction": "all x y.((Surface(x) & CastIron(y) & Surface(z) & Steel(z)) -> (BecomesOrange(x,y) | ChangesSurface(z,x,z)))", "score": 0}
{"id": "eqasc_validation_1183", "prediction": "all x.((Surface(x) & CastIron(x) & Steel(x)) -> GenericToBecomeOrange(x))", "score": 0}
{"id": "eqasc_validation_1183", "prediction": "all x y.((Surface(x) & CastIron(x) & SteelSurface(y)) -> VulnerableToBloss Orange(x,y))", "score": -1}
{"id": "eqasc_validation_1183", "prediction": "all x y.((Surface(x,y) & CastIron(y) & Steel(y)) -> (ResponsibleToOrange(y) & OnSurface(x,y)))", "score": 0}
{"id": "eqasc_validation_1183", "prediction": "all x y z.((Mach-iron(x) & Steel(y) & Surface(z)) -> VeryEmpathicToOrange(z,y))", "score": -1}
{"id": "eqasc_validation_1183", "prediction": "all x y.((Surface(x) & CastIron(x) & Surface(y) & Steel(y)) -> SensedToOrange(x))", "score": 0}
{"id": "eqasc_validation_1183", "prediction": "all x.((Surface(x) & CastIron(x) & Steel(x)) -> SensitiveToOrangeOnSurface(x))", "score": 0}
{"id": "eqasc_validation_1183", "prediction": "all x y.((Surface(x) & CastIron(x) & Steel(y)) -> (TreesOrangeOnSurface(x,y) | GainsOrangeOnSurface(x,y)))", "score": 0}
{"id": "eqasc_validation_1183", "prediction": "all x y.((Cast-ironSurface(x) & SteelSurface(y)) -> OrangeOn(x,y))", "score": -1}
{"id": "eqasc_validation_1184", "prediction": "all x.(YinMetal(x) -> (SmallMetal(x) & JeweleryMetal(x) & DecorationalMetal(x)))", "score": 0}
{"id": "eqasc_validation_1184", "prediction": "all x.(YinMetal(x) -> (SmallMetal(x) & JeweleryMetal(x) & DecorativeMetal(x)))", "score": 0}
{"id": "eqasc_validation_1184", "prediction": "all x.(YinMetal(x) -> (SmallMetal(x) | JeweleryMetal(x) | DecorativeMetal(x)))", "score": 0}
{"id": "eqasc_validation_1184", "prediction": "(SmallMetal(YinMetal) & JeweleryMetal(YinMetal) & DecorativeMetal(YinMetal))", "score": 0}
{"id": "eqasc_validation_1184", "prediction": "all x.(YinMetal(x) -> (SmallMetal(x) | JeweleryMetal(x) | DecoratorMetal(x)))", "score": 0}
{"id": "eqasc_validation_1184", "prediction": "all x.(YinMetal(x) -> (SmallMaterial(x) & JeweleryMetal(x) & DecorativeMetal(x)))", "score": 0}
{"id": "eqasc_validation_1184", "prediction": "(All x.(YinMetal(x) -> Small(x)) & (JenkeryMetal(x) | DecoratorMetal(x))))", "score": -1}
{"id": "eqasc_validation_1184", "prediction": "(all x.(YinMetal(x) -> SmallMetal(x)) & all y.(YinMetal(y) -> JeweleryMetal(y)) & all z.(YinMetal(z) -> DecorativeMetal(z))))", "score": -1}
{"id": "eqasc_validation_1184", "prediction": "(all x.(YinMetal(x) -> SmallMetal(x)) & (JeweleryMetal(x) |DecorativeMetal(x))))", "score": -1}
{"id": "eqasc_validation_1185", "prediction": "all x.((Jewelry(x) & Rusts(x)) -> MayBecomeOrangeOnSurface(x))", "score": 0}
{"id": "eqasc_validation_1185", "prediction": "all x y.((Jewelry(x) & Rusts(x)) -> (BecomesOrangeOnSurface(x)))", "score": 0}
{"id": "eqasc_validation_1185", "prediction": "all x.((JewelryRusts(x) & Orange(x)) -> HasSurface(x))", "score": 0}
{"id": "eqasc_validation_1185", "prediction": "all x.(Rusts(x) -> Orange(x))", "score": 0}
{"id": "eqasc_validation_1185", "prediction": "all x.((Jewelry(x) & Rotts(x)) -> MayBecomeOrangeOnSurface(x))", "score": 0}
{"id": "eqasc_validation_1185", "prediction": "(Roses(jewelry) & OrangeOnSurface(jewelry))", "score": 0}
{"id": "eqasc_validation_1185", "prediction": "all x.((Jewelry(x) & Rusts(x)) -> LooksOrangeOnSurface(x))", "score": 0}
{"id": "eqasc_validation_1185", "prediction": "all x.(Rusts(x) -> (OrangeOnSurface(x)))", "score": 0}
{"id": "eqasc_validation_1185", "prediction": "all x.((Jewelry(x) & Rusts(x)) -> (BecomesOrange(x)))", "score": 0}
{"id": "eqasc_validation_1185", "prediction": "all x.((Jewelry(x) & Rusts(x)) -> (Orange(x)))", "score": 0}
{"id": "eqasc_validation_1185", "prediction": "all x.((Jewelry(x) & Rusts(x)) -> (BecomesOrangeOnSurface(x)))", "score": 0}
{"id": "eqasc_validation_1185", "prediction": "all x.((Jewelry(x) & Rusts(x)) -> MayBecomeOrange(x))", "score": 0}
{"id": "eqasc_validation_1185", "prediction": "all x.((Jewelry(x) & Rusts(x)) -> Orange(x))", "score": 0}
{"id": "eqasc_validation_1185", "prediction": "all x.((Joyage(x) & Rusts(x)) -> MayBeOrange(x))", "score": 0}
{"id": "eqasc_validation_1186", "prediction": "all x.(WaterCausesPartsToRoss(x) & exists y.(SmallAmountOfRoss(y) & DamagesInjectors(x)))", "score": 0}
{"id": "eqasc_validation_1186", "prediction": "all x y z.((Water(x) & Injector(y) & Armour(z)) -> (CausesPartsToRuin(x) & DamagesInjectors(y)))", "score": 0}
{"id": "eqasc_validation_1186", "prediction": "all x.((Water(x) & CausesPartsToRust(x)) -> DamagesInjectors(x))", "score": 0}
{"id": "eqasc_validation_1186", "prediction": "(all x.(Water(x) -> CausesPartsToRust(x)) & (SmallAmountOfRust(x) -> DamagesInjectors(x)))", "score": 0}
{"id": "eqasc_validation_1186", "prediction": "all x y.((Water(x) & Injector(y)) -> (CausesPartsToRust(x) & -CausesDamage(y)))", "score": 0}
{"id": "eqasc_validation_1186", "prediction": "all x.(Water(x) -> (CausesPartsToRust(x) & DamagesInjectors(x) & SmallAmountOfRose(x)))", "score": 0}
{"id": "eqasc_validation_1186", "prediction": "all x.(Water(x) -> (CausesPartsToRot(x) & EvenSmallAmountOfRot(x) & DamagesInjector(x)))", "score": 0}
{"id": "eqasc_validation_1186", "prediction": "(all x.(Water(x) -> CausesPartsToRose(x)) & all y.(FastMovement(y) -> DamagesInjectors(y))))", "score": -1}
{"id": "eqasc_validation_1186", "prediction": "all x.(Water(x) -> (CausesPartsToRosen(x) & DamagesInjectors(x)))", "score": 0}
{"id": "eqasc_validation_1186", "prediction": "all x.((Water(x) & Injector(x)) -> (CausesPartsToRust(x) & DamagesInjector(x)))", "score": 0}
{"id": "eqasc_validation_1186", "prediction": "(all x y.((Water(x) & Part(y)) -> CausesRust(x,y)) & ((Water(x) & Injector(x) & Injector(y)) -> Damages(x,y)))", "score": 0}
{"id": "eqasc_validation_1186", "prediction": "all x.(WaterCausesPartsToRust(x) -> DamagesInjectors(x))", "score": 0}
{"id": "eqasc_validation_1186", "prediction": "all x.((Water(x) & CauseRetardation(x)) -> (DamageInjectors(x) & AmountOfRust(x)))", "score": 0}
{"id": "eqasc_validation_1186", "prediction": "all x y.((Water(x) & Injector(y)) -> (CausesPartsToRust(x) & Irrigate(y) & DamagesInjectors(y)))", "score": 0}
{"id": "eqasc_validation_1186", "prediction": "(all x.(Water(x) -> CausesPartsToRust(x)) & exists y.(SmallAmountOfRust(y) & DamagesInjectors(y))))", "score": -1}
{"id": "eqasc_validation_1186", "prediction": "(all x.((Water(x) & Part(y)) -> Rust(y)) & ((LargeAmountOfRust(x,y)) -> DamagesInjector(x,y)))", "score": 0}
{"id": "eqasc_validation_1187", "prediction": "all x y z.((Water(x) & MetalSurface(y) & Metal(z)) -> (CausesOrangeSurface(z,y) & OrangeSurface(y)))", "score": 0}
{"id": "eqasc_validation_1187", "prediction": "all x.(Water(x) -> (CausesMetalSurfaceToBecomeOrange(x)))", "score": 0}
{"id": "eqasc_validation_1187", "prediction": "all x.((Water(x) & MetalSurface(y)) -> OrangeSurface(z))", "score": 0}
{"id": "eqasc_validation_1187", "prediction": "-MoreOrangeSurface((mould,metalSurface) -> CausesGlow(mould,metalSurface))", "score": -1}
{"id": "eqasc_validation_1187", "prediction": "all x y z.((Water(x) & MetalSurface(y) & Color(z)) -> CausesToBecomeOrange(y,z))", "score": 0}
{"id": "eqasc_validation_1187", "prediction": "all x y.((Water(x) & MetalSurface(y)) -> Orange(y))", "score": 0}
{"id": "eqasc_validation_1187", "prediction": "all x.(Water(x) -> CausesMetalSurfaceToBecomeOrange(x))", "score": 0}
{"id": "eqasc_validation_1187", "prediction": "all x.((Water(x) & MetalSurface(x)) -> OrangeSurface(x))", "score": 0}
{"id": "eqasc_validation_1187", "prediction": "all x.((Water(x) & MetalSurface(x)) -> orange(x))", "score": 0}
{"id": "eqasc_validation_1187", "prediction": "(CausesWater(Water(Water) & MetalSurface(MetalSurface) - OrangeSurface))", "score": -1}
{"id": "eqasc_validation_1187", "prediction": "all x y.((Water(x) & MetalSurface(y)) -> Orange(x,y))", "score": 0}
{"id": "eqasc_validation_1187", "prediction": "all x y.((Water(x) & MetalSurface(y)) -> CausesOrangeSurface(x,y))", "score": 0}
{"id": "eqasc_validation_1187", "prediction": "all x y.((Water(x) & MetalSurface(y) & In(x,y)) -> OrangeSurface(y))", "score": 0}
{"id": "eqasc_validation_1187", "prediction": "all x y z.((Water(x) & MetalSurface(y) & MetalSurface(z)) -> CausesOrange(x,y,z))", "score": 0}
{"id": "eqasc_validation_1187", "prediction": "all x.((Water(x) & MetalSurfaceGasOrange(x)) -> CausesOrange(x))", "score": 0}
{"id": "eqasc_validation_1188", "prediction": "all x y.((Sound(x) & ReachesEar(x)) -> CanBeHeard(y))", "score": 6}
{"id": "eqasc_validation_1188", "prediction": "all x y z.((Sound(x) & Ear(y) & Ear(z) & Reaches(x,y,z)) -> SoundCanBeHeard(x))", "score": 0}
{"id": "eqasc_validation_1188", "prediction": "all x y z.((Sound(x) & Sound(y) & Ear(z) & Reaches(y,z)) -> CanBeHeard(x,y))", "score": 0}
{"id": "eqasc_validation_1188", "prediction": "when sound reaches the ear, that sound can be heard.", "score": -1}
{"id": "eqasc_validation_1188", "prediction": "all x y.((Sound(x) & SoundReachesEar(x,y)) -> KanBeHeard(y))", "score": 0}
{"id": "eqasc_validation_1188", "prediction": "all x y z.((Sound(x) & Ear(y) & Sound(z) & Reaches(x,z)) -> CanBeHeard(x,y,z))", "score": 0}
{"id": "eqasc_validation_1188", "prediction": "all x y.((Sound(x) & SoundReachesEar(x)) -> CanBeHeard(y))", "score": 0}
{"id": "eqasc_validation_1188", "prediction": "all x y z.((Sound(x) & Ear(y) & Sound(z) & Reaches(x,y)) -> CanBeHeard(z,y))", "score": 0}
{"id": "eqasc_validation_1188", "prediction": "all x y z w.((Sound(x) & Ear(y) & Sound(z) & Reaches(x,y)) -> CanBeHeard(x,z))", "score": 0}
{"id": "eqasc_validation_1188", "prediction": "all x y z.((Sound(x) & Ear(y) & Hear(z) & Reaches(x,y,z)) -> CanBeHeard(x,y))", "score": 0}
{"id": "eqasc_validation_1188", "prediction": "all x y z.((Sound(x) & Ear(y) & Threats(x,y)) -> CanBeHeard(z))", "score": 0}
{"id": "eqasc_validation_1188", "prediction": "all x.((Sound(x) & ReachesEar(x)) -> SoundCanBeHeard(x))", "score": 0}
{"id": "eqasc_validation_1188", "prediction": "all x y z.((Sound(x) & Sound(y) & Ear(z) & Touches(y,z)) -> CanBeHeard(x,y,z))", "score": 0}
{"id": "eqasc_validation_1188", "prediction": "all x y.((Sound(x) & Hearing(y)) -> (AtSavers(x,y) & ToBeHeard(y)))", "score": 0}
{"id": "eqasc_validation_1188", "prediction": "all x y z w.((Sound(x) & Ear(y) & Ear(z) & Reaches(x,y)) -> SoundListen(x))", "score": 0}
{"id": "eqasc_validation_1188", "prediction": "all x y z.((Sound(x) & AcousticEar(y) & Sound(z)) -> (ReachesEar(x,z) & Listenable(x,y)))", "score": 0}
{"id": "eqasc_validation_1189", "prediction": "all x y.((SoundWaves(x) & Eardrum(y)) -> CausesVibration(x,y))", "score": 0}
{"id": "eqasc_validation_1189", "prediction": "all x.(SoundWaves(x) -> HeartdrumVibration(x))", "score": 0}
{"id": "eqasc_validation_1189", "prediction": "all x y.((SoundWaves(x) & Eardrum(y) & CausesVibration(x,y)) -> Vibrates(y,x))", "score": 0}
{"id": "eqasc_validation_1189", "prediction": "all x.(SoundWaves(x) -> (CausesEardrumVibration(x) & Urine(x)))", "score": 0}
{"id": "eqasc_validation_1189", "prediction": "all x.(SoundWaves(x) -> CausesEardrumValidate(x))", "score": 0}
{"id": "eqasc_validation_1189", "prediction": "all x.(SoundWaves(x) -> CausesEardrumVibration(x))", "score": 0}
{"id": "eqasc_validation_1189", "prediction": "all x.((SoundWaves(x) & Eardrum(y)) -> Vibrate(x,y))", "score": 0}
{"id": "eqasc_validation_1189", "prediction": "all x.(SoundWavesCauseEardrumToVibrate(x) -> SymptomAccommodateEardrum(x))", "score": 0}
{"id": "eqasc_validation_1189", "prediction": "all x y z.((SoundWaves(x) & Eardrum(y) & Eardrum(z)) -> Vibrate(x,y,z))", "score": 0}
{"id": "eqasc_validation_1189", "prediction": "all x.(SoundWaves(x) -> CausesEardrumToVibrate(x))", "score": 0}
{"id": "eqasc_validation_1189", "prediction": "all x y.((SoundWaves(x) & Eardrum(y)) -> Vibrates(x,y))", "score": 0}
{"id": "eqasc_validation_1189", "prediction": "all x y z.((SoundWaves(x) & Eardrum(y) & Music(z)) -> CausesVibration(x,y,z))", "score": 0}
{"id": "eqasc_validation_1190", "prediction": "all x.((SonicWaves(x) & CausesEardrumVibration(x)) -> CanHear(x))", "score": 0}
{"id": "eqasc_validation_1190", "prediction": "all x.((SonicWaves(x) & CausesEardrumToVibrates(x)) -> Hears(x))", "score": 0}
{"id": "eqasc_validation_1190", "prediction": "all x y.((SonicWaves(x) & Eardrum(y)) -> Vibrates(x,y))", "score": 0}
{"id": "eqasc_validation_1190", "prediction": "all x y.((SonicWaves(x) & Eardrum(y) & CausesVibration(x,y)) -> CanHear(x))", "score": 0}
{"id": "eqasc_validation_1190", "prediction": "all x y.((SonicWaves(x) & Eardrum(y)) -> Vibrate(y))", "score": 0}
{"id": "eqasc_validation_1190", "prediction": "all x.((SonicWaves(x) & CausesEardrumToVibrate(x)) -> CanHear(x))", "score": 0}
{"id": "eqasc_validation_1190", "prediction": "exists x y.((SonicWaves(x,y) & Eardrum(y)) -> CausesVibrate(x,y))", "score": 0}
{"id": "eqasc_validation_1190", "prediction": "all x y.((SonicWaves(x) & Eardrum(y)) -> CausesVibration(x,y))", "score": 0}
{"id": "eqasc_validation_1190", "prediction": "all x y z.((SonicWaves(x) & Eardrum(y) & IsInVibration(z)) -> CanHear(x,y))", "score": 0}
{"id": "eqasc_validation_1191", "prediction": "all x y.((SharpestSound(x) & Brain(y)) -> PerceivedIn(x,y))", "score": 0}
{"id": "eqasc_validation_1191", "prediction": "all x.(SharpestSound(x) -> PerceivedInBern(x))", "score": 0}
{"id": "eqasc_validation_1191", "prediction": "all x.(SharpESTSound(x) -> PerceivedInBrain(x))", "score": 0}
{"id": "eqasc_validation_1191", "prediction": "all x.(SharpestSound(x) -> PerceivedInBrain(x))", "score": 0}
{"id": "eqasc_validation_1191", "prediction": "all x.(SharpestSounds(x) -> PerceivedInBrain(x))", "score": 0}
{"id": "eqasc_validation_1191", "prediction": "all x y z.((SharpestSound(x) & Brain(y) & Brain(z)) -> PerceivedIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_1191", "prediction": "Despite all x y z.((SharpestSound(x) & Brain(y) & Brain(z)) -> PerceivedIn(x,y))", "score": -1}
{"id": "eqasc_validation_1191", "prediction": "all x.((SharpestSounds(x) & PerceivedByBrain(x)) -> PerceivedByBrain(x))", "score": 0}
{"id": "eqasc_validation_1191", "prediction": "all x.(SharpestSoundsPerceivedInBrain(x) -> (PerceivedInBody(x) & PerceivedInBody(x)))", "score": 0}
{"id": "eqasc_validation_1191", "prediction": "all x.(SharpestSound(x) -> PerceivedInBody(x))", "score": 0}
{"id": "eqasc_validation_1191", "prediction": "all x y.(SharpestSound(x) -> PerceivedInBody(x))", "score": 0}
{"id": "eqasc_validation_1192", "prediction": "all x y.((Noise(x) & Brain(y) & Reaches(x,y)) -> ProcessedWhenCannotReach(x,y))", "score": 0}
{"id": "eqasc_validation_1192", "prediction": "all x y.((Noise(x) & Brain(y) & Reaches(x,y)) -> ProcessedWhenBreakfast(x,y))", "score": 0}
{"id": "eqasc_validation_1192", "prediction": "all x.((Nonsense(x) & ReachesBrain(x)) -> Processed(x))", "score": 0}
{"id": "eqasc_validation_1192", "prediction": "all x.((Noise(x) & reachesBrain(x)) -> Processed(x))", "score": 0}
{"id": "eqasc_validation_1192", "prediction": "all x.((Noise(x) & ReachesBrain(x)) -> Processed(x))", "score": 0}
{"id": "eqasc_validation_1192", "prediction": "all x y.((Noise(x) & Brain(y) & Reaches(x,y)) -> Processed(x,y))", "score": 0}
{"id": "eqasc_validation_1192", "prediction": "all x.((Noise(x) & ReachesBody(x)) -> ProcessedWhenReachesBrain(x))", "score": 0}
{"id": "eqasc_validation_1192", "prediction": "all x y z.((Noise(x) & Brain(y) & Brain(z) & Reaches(x,y)) -> Processed(x,z))", "score": 0}
{"id": "eqasc_validation_1192", "prediction": "all x.((Noise(x) & ReachesBrain(x)) -> ProcessedWhenHearing(x))", "score": 0}
{"id": "eqasc_validation_1192", "prediction": "all x.((Noise(x) & Brain(x)) -> ProcessedWhenReaches(x,Brain))", "score": 0}
{"id": "eqasc_validation_1192", "prediction": "all x y.((Norm(x) & Brain(y) & Reaches(x,y)) -> Processed(x))", "score": 0}
{"id": "eqasc_validation_1192", "prediction": "all x yz.((Noise(x) & Brain(y) & Reaches(x,y)) -> Proced(x))", "score": -1}
{"id": "eqasc_validation_1193", "prediction": "all x.(Sound(x) -> UsesSenseOfHaring(x))", "score": 0}
{"id": "eqasc_validation_1193", "prediction": "all x.((SenseOfHearing(x) & ForSound(x)) -> Used(x))", "score": 0}
{"id": "eqasc_validation_1193", "prediction": "all x.(Sound(x) -> UsesSenseOfHearing(x))", "score": 0}
{"id": "eqasc_validation_1193", "prediction": "all x.(SenseOfHearing(x) -> UsedForSound(x))", "score": 0}
{"id": "eqasc_validation_1193", "prediction": "all x.((SenseOfHearing(x)) -> UsedForSound(x))", "score": 0}
{"id": "eqasc_validation_1193", "prediction": "all x.((SenseOfHearing(x) & SoundElement(x)) -> Used(x))", "score": 0}
{"id": "eqasc_validation_1193", "prediction": "all x.((HasSenseOfHearing(x)) -> UsedForSound(x))", "score": 0}
{"id": "eqasc_validation_1193", "prediction": "all x.(SeenOfHearing(x) -> UsedForSound(x))", "score": 0}
{"id": "eqasc_validation_1193", "prediction": "all x.(SensationOfHearing(x) -> UsedForSound(x))", "score": 0}
{"id": "eqasc_validation_1193", "prediction": "all x.((SenseOfHearing(x) -> UsedForSound(x))", "score": -1}
{"id": "eqasc_validation_1194", "prediction": "all x y.((Ears(x) & Hearing(y)) -> UsedFor(x,y))", "score": 0}
{"id": "eqasc_validation_1194", "prediction": "all x.(Ears(x) -> UsedForHearing(x))", "score": 0}
{"id": "eqasc_validation_1194", "prediction": "all x y z.((Ear(x) & Ear(y) & Hearing(z)) -> UsedFor(yes,z))", "score": 0}
{"id": "eqasc_validation_1194", "prediction": "all x.(HasHearingEars(x) -> UsedForHearing(x))", "score": 0}
{"id": "eqasc_validation_1194", "prediction": "all x.(Ear(x) -> UsedForHearing(x))", "score": 0}
{"id": "eqasc_validation_1194", "prediction": "all x.(Ears(x) -> UsedForHearing.Hearing(x))", "score": -1}
{"id": "eqasc_validation_1194", "prediction": "all x y.((Ear(x) & Hearing(y)) -> UsedFor(x,y))", "score": 0}
{"id": "eqasc_validation_1195", "prediction": "all x.(SoundWaves(x) -> MakesEarDrumVibrate(x))", "score": 0}
{"id": "eqasc_validation_1195", "prediction": "all x y.((SoundWaves(x) & Eardrum(y)) -> Vibrate(x,y))", "score": 0}
{"id": "eqasc_validation_1195", "prediction": "all x y.((SoundWaves(x) & EarDrum(y)) -> Vibrate(x,y))", "score": 0}
{"id": "eqasc_validation_1195", "prediction": "all x.(SoundWaves(x) -> MakeEarDrumVibrate(x))", "score": 0}
{"id": "eqasc_validation_1195", "prediction": "all x.(Soundwave(x) -> VibrateEarDrum(x))", "score": 0}
{"id": "eqasc_validation_1195", "prediction": "all x y.((SoundWaves(x) & EarDrum(y)) -> Vibrates(x,y))", "score": 0}
{"id": "eqasc_validation_1195", "prediction": "all x y.((SoundWaves(x) & OarDrum(y)) -> Vibrates(x,y))", "score": 0}
{"id": "eqasc_validation_1195", "prediction": "all x.(SoundWaves(x) -> MakesEarDrumVibrant(x))", "score": 0}
{"id": "eqasc_validation_1195", "prediction": "all x y.( (SoundWaves(x) & EarDrum(y)) -> Vibrate(y))", "score": 0}
{"id": "eqasc_validation_1195", "prediction": "all x y.((SoundWaves(x) & Pedestrian(y)) -> Vibrates(x,y))", "score": 0}
{"id": "eqasc_validation_1195", "prediction": "all x.((SoundWaves(x) & EarDrum(y)) -> Vibrate(x,y))", "score": 0}
{"id": "eqasc_validation_1195", "prediction": "all x.((SoundWaves(x) & EarDrumVibrates(x)) -> MakesVibrating(x))", "score": 0}
{"id": "eqasc_validation_1195", "prediction": "all x.(SoundWaves(x) -> MakesEarDrumVibrates(x))", "score": 0}
{"id": "eqasc_validation_1196", "prediction": "all x y z.((Wave(x) & Ear(y) & EarDrum(z) & Reaches(x,y)) -> (Vibrates(z,y) & CanHear(x,y)))", "score": 0}
{"id": "eqasc_validation_1196", "prediction": "all x y z.((Wave(x) & Ear(y) & Eardrum(z) & Visible(y,z)) -> (Reaches(x,y) & Vibrates(y,z) & CanHear(y,x)))", "score": 0}
{"id": "eqasc_validation_1196", "prediction": "all x y z.((Wave(x) & Ear(y) & EarDrum(z) & Reaches(x,y)) -> (VibratesAndHear(z,y)))", "score": 0}
{"id": "eqasc_validation_1196", "prediction": "all x y z.((Wave(x) & Ear(y) & EarDrum(z)) -> (Reaches(x,y) & Vibrates(z) & CanHear(x,z)))", "score": 0}
{"id": "eqasc_validation_1196", "prediction": "all x y.((Wave(x) & Ear(y)) -> (Reaches(x,y) & EardrumVibrant(x) & CanHear(x,y)))", "score": 0}
{"id": "eqasc_validation_1196", "prediction": "all x.((Wave(x) & ReachesEar(x)) -> (EarDrumVibrates(x) & CanHear(x)))", "score": 0}
{"id": "eqasc_validation_1196", "prediction": "all x y z.((Wave(x) & Ear(y) & Eardrum(z) & Reaches(x,y)) -> (Vibrates(x,z) & CanHear(y,z)))", "score": 0}
{"id": "eqasc_validation_1196", "prediction": "all x.((Wave(x) & HasEar(x)) -> (VibratesEardrum(x) & CanHear(x)))", "score": 0}
{"id": "eqasc_validation_1196", "prediction": "all x y z.((Wave(x) & Ear(y) & EarDrum(z) & Reaches(x,y)) -> (Vibration(z) & CanHear(z)))", "score": 0}
{"id": "eqasc_validation_1196", "prediction": "all x.((Wave(x) & ReachesEar(x)) -> (VibratesEarDrum(x) & CanHear(x)))", "score": 0}
{"id": "eqasc_validation_1196", "prediction": "all x y z.((Wave(x) & Ear(y) & Thrives(x,y) & EarDrum(z)) -> (Vibrates(x,z) & CanHear(x,y)))", "score": 0}
{"id": "eqasc_validation_1196", "prediction": "all x y z.((Wave(x) & Ear(y) & EarDrum(z)) -> (RiseThrough(x,y) & VibrateSound(x,z)))", "score": 0}
{"id": "eqasc_validation_1196", "prediction": "all x y z.((Wave(x) & Ear(y) & Eardrum(z) & Reaches(x,y)) -> Vibrates(x,z))", "score": 0}
{"id": "eqasc_validation_1196", "prediction": "all x y z.((Wave(x) & Ear(y) & Eardrum(z)) -> (RiseThrough(x,y) & Vibrate(z,y) & CanHear(x,y)))", "score": 0}
{"id": "eqasc_validation_1196", "prediction": "all x y z.((Wave(x) & Ear(y) & Eardrum(z) & Reaches(x,y)) -> VibratesAndCanHear(x,z))", "score": 0}
{"id": "eqasc_validation_1196", "prediction": "all x.((Wave(x) & ReachesEar(x)) -> (EarDrumVibration(x) & CanHear(x)))", "score": 0}
{"id": "eqasc_validation_1197", "prediction": "all x.(Music(x) -> (sound(x) & energy(x)))", "score": 2}
{"id": "eqasc_validation_1197", "prediction": "all x y z.((Music(x) & Sound(y) & Energy(z)) -> (Sings(x) | Sound(y)))", "score": 0}
{"id": "eqasc_validation_1197", "prediction": "all x.(Music(x) -> (Sound(x) | Energy(x)))", "score": 0}
{"id": "eqasc_validation_1197", "prediction": "(all x.(Music(x) -> Sound(x)) & all y.(Sound(y) -> Energy(y)))", "score": 2}
{"id": "eqasc_validation_1197", "prediction": "all x.(Music(x) -> (Sound(x) & Energy(x)))", "score": 2}
{"id": "eqasc_validation_1197", "prediction": "all x.(Music(x) -> (Son(x) | Energy(x)))", "score": 0}
{"id": "eqasc_validation_1197", "prediction": "all x y.((Music(x) & Sound(y)) -> (Sound(x) & Energy(y)))", "score": 0}
{"id": "eqasc_validation_1197", "prediction": "all x y z.((Music(x) & Sound(y) & Energy(z)) -> (IsSound(x) | IsSound(y)))", "score": 0}
{"id": "eqasc_validation_1197", "prediction": "all x y.((Music(x) & Sound(y)) -> (IsSound(x) & IsEnergy(y)))", "score": 0}
{"id": "eqasc_validation_1197", "prediction": "all x.(Music(x) -> (IsSound(x) & IsEnergy(x)))", "score": 0}
{"id": "eqasc_validation_1197", "prediction": "all x y.((Music(x) & Sound(y)) -> (EstablishedBy(x,y) & Energy(y)))", "score": 0}
{"id": "eqasc_validation_1198", "prediction": "all x y.((Music(x) & Music(y) & ReachesEar(y)) -> CanBeHeard(x,y))", "score": 0}
{"id": "eqasc_validation_1198", "prediction": "all x y.((Music(x) & Ear(y)) -> MusicCanBeHeard(x,y))", "score": 0}
{"id": "eqasc_validation_1198", "prediction": "all x y.((Music(x) & reachesEar(x) & Music(y)) -> CanBeHeard(x,y))", "score": 0}
{"id": "eqasc_validation_1198", "prediction": "all x y z.((MusicToEar(x) & Ear(y) & MusicToHave(z) & Reaches(y,z)) -> CanBeHeard(z))", "score": 0}
{"id": "eqasc_validation_1198", "prediction": "all x.((MusicReachesEar(x) & AchievesEar(x)) -> MusicCanBeHeard(x))", "score": 0}
{"id": "eqasc_validation_1198", "prediction": "all x y.((Music(x) & Ear(y) & Reaches(x,y)) -> MusicCanBeHeard(x))", "score": 0}
{"id": "eqasc_validation_1198", "prediction": "all x or the musicreaches(x) -> MusicCanBeHeard(x))", "score": -1}
{"id": "eqasc_validation_1198", "prediction": "all x y.((Music(x) & ReachesEar(x)) -> CanBeHeard(x,y))", "score": 0}
{"id": "eqasc_validation_1198", "prediction": "all x.((MusicReachesEar(x) & MusicCanBeHeard(x)) -> MusicCanBeHeard(x))", "score": 0}
{"id": "eqasc_validation_1198", "prediction": "all x.((MusicReachesEar(x) & (MusicToOnce(x) | MusicToLearn(x))) -> MusicCanBeHeard(x))", "score": 0}
{"id": "eqasc_validation_1198", "prediction": "all x y.((Music(x) & ReachesEar(x,y) & Music(y)) -> MusicCanBeHeard(x))", "score": 0}
{"id": "eqasc_validation_1198", "prediction": "all x y.((Music(x) & ReachesEar(x)) -> CanBeHeard(x))", "score": 3}
{"id": "eqasc_validation_1198", "prediction": "all x y.((Music(x) & ReachesEar(x,y)) -> CanBeHeard(x,y))", "score": 0}
{"id": "eqasc_validation_1198", "prediction": "all x.((MusicComplishesEar(x) & ReachesEar(x)) -> MusicCanBeHeared(x))", "score": 0}
{"id": "eqasc_validation_1198", "prediction": "all x y.((Music(x) & Podolgia(y) & ReachesEar(x,y)) -> CanBeHeard(y))", "score": 0}
{"id": "eqasc_validation_1198", "prediction": "all x y.((Music(x) & ReachesEar(x)) -> MusicCanBeHeard(y))", "score": 0}
{"id": "eqasc_validation_1199", "prediction": "all x y.((Music(x) & ReachesEar(x,y)) -> CanBeHeard(x,y))", "score": 0}
{"id": "eqasc_validation_1199", "prediction": "all x.((MusicReachesEar(x) & HasEar(x)) -> CanBeHeard(x))", "score": 0}
{"id": "eqasc_validation_1199", "prediction": "all x.((Music(x) & ReachesEar(x)) -> CanBeHeard(x))", "score": 3}
{"id": "eqasc_validation_1199", "prediction": "all x y.((Music(x) & Ear(y) & Reaches(x,y)) -> CanBeHeard(x))", "score": 0}
{"id": "eqasc_validation_1199", "prediction": "all x.((MusicReachesEar(x) & ReachesEar(x)) -> CanBeHeard(x))", "score": 0}
{"id": "eqasc_validation_1199", "prediction": "all x.((MusicRreachesEar(x) & ReachesEar(x)) -> CanBeHeard(x))", "score": 0}
{"id": "eqasc_validation_1199", "prediction": "all x y.((Music(x) & ReachesEar(x) & Ear(y)) -> CanBeHeard(x))", "score": 0}
{"id": "eqasc_validation_1199", "prediction": "all x y z.((Music(x) & Ear(y) & Ear(z) & Reaches(x,y)) -> SoundsAt(x,z))", "score": 0}
{"id": "eqasc_validation_1199", "prediction": "all x.((MusiqueReachesEar(x)) -> CanBeHeard(x))", "score": 0}
{"id": "eqasc_validation_1199", "prediction": "all x y.((Music(x) & ReachesEar(x,y)) -> CanBeHeard(x))", "score": 0}
{"id": "eqasc_validation_1199", "prediction": "all x.((MusicReachesEar(x)) -> CanBeHeard(x))", "score": 0}
{"id": "eqasc_validation_1199", "prediction": "all x y.((Music(x) & Music(y) & ReachesEar(x,y)) -> Listenable(x))", "score": 0}
{"id": "eqasc_validation_1199", "prediction": "all x.((MusicComesToEar(x) & ReachesEar(x)) -> CanBeHeard(x))", "score": 0}
{"id": "eqasc_validation_1200", "prediction": "all x.(Music(x) -> Sound(x))", "score": 0}
{"id": "eqasc_validation_1200", "prediction": "all x.(Music(x) -> SoundProducedByVibrations(x))", "score": 0}
{"id": "eqasc_validation_1200", "prediction": "all x.(Music(x) -> (DiscriminatingVibrations(x) & ProducesSound(x)))", "score": 0}
{"id": "eqasc_validation_1200", "prediction": "all x.(Music(x) -> (Sound(x) | ProducedByVibrations(x)))", "score": 0}
{"id": "eqasc_validation_1200", "prediction": "all x.(Music(x) -> (Music(x) & ProducedByVibrations(x)))", "score": 0}
{"id": "eqasc_validation_1200", "prediction": "all x.(Music(x) -> (Sonor(x) & ProducedByVibrations(x)))", "score": 0}
{"id": "eqasc_validation_1200", "prediction": "all x.(Music(x) -> ProducedByVibrations(x))", "score": 0}
{"id": "eqasc_validation_1200", "prediction": "all x.(Music(x) -> (ProducedByVibrations(x) & -DerivedByVibrations(x)))", "score": 0}
{"id": "eqasc_validation_1200", "prediction": "all x.(Music(x) -> (ProducedByVibrations(x) & Sound(y) & Sound(z)))", "score": 0}
{"id": "eqasc_validation_1200", "prediction": "all x.(Music(x) -> (ProducedByVibrations(x) & -ProducedByVibrations(x)))", "score": 0}
{"id": "eqasc_validation_1200", "prediction": "all x.(Music(x) -> exists y.(Vibrating(y) & Produces(x,y)))", "score": 0}
{"id": "eqasc_validation_1200", "prediction": "all x.(Music(x) -> (Lives(x) & ProducesByVibrations(x)))", "score": 0}
{"id": "eqasc_validation_1200", "prediction": "all x.(Music(x) -> Music(x))", "score": 0}
{"id": "eqasc_validation_1200", "prediction": "all x.(Music(x) -> (Vibrations(x) & Sound(x)))", "score": 0}
{"id": "eqasc_validation_1201", "prediction": "all x y z.((Vibration(x) & Ear(y) & Ambient(z)) -> Hide(x,y))", "score": 0}
{"id": "eqasc_validation_1201", "prediction": "all x.(SeemsReachEar(x) -> MusicKnowed(x))", "score": 0}
{"id": "eqasc_validation_1201", "prediction": "all x.((VibrationSensation(x) & ReachEar(x)) -> MusicCanBeHeard(x))", "score": 0}
{"id": "eqasc_validation_1201", "prediction": "all x.((VibrationsReachEar(x)) -> MusicCanBeHeard(x))", "score": 0}
{"id": "eqasc_validation_1201", "prediction": "all x.((VibrationsAtEar(x)) -> MusicCanBeHeard(x))", "score": 0}
{"id": "eqasc_validation_1201", "prediction": "all x y z.((Vibrations(x) & Ear(y) & Music(z) & reaches(x,y)) -> CanBeHeard(z))", "score": 0}
{"id": "eqasc_validation_1201", "prediction": "all x.((VibrationsRise(x) & Ear(y)) -> MusicCanBeHeard(x))", "score": 0}
{"id": "eqasc_validation_1201", "prediction": "all x y.((Vibration(x) & Ear(y)) -> CanBeHeard(x,y))", "score": 0}
{"id": "eqasc_validation_1201", "prediction": "all x.((VibrationsAtEar(x) & Anxiety(x)) -> MusicAnchored(x))", "score": 0}
{"id": "eqasc_validation_1201", "prediction": "all x.((VibrationsRiseEar(x)) -> MusicCanBeHeard(x))", "score": 0}
{"id": "eqasc_validation_1201", "prediction": "all x y.((Vibration(x) & Ear(y) & Reaches(x,y)) -> MusicCanBeHeard(x))", "score": 0}
{"id": "eqasc_validation_1201", "prediction": "all x.(VibrationsAtEar(x) -> MusicAtEar(x))", "score": 0}
{"id": "eqasc_validation_1201", "prediction": "all x y.((Vibration(x) & Ear(y) & Reaches(x,y)) -> MusicMeets(x,y))", "score": 0}
{"id": "eqasc_validation_1201", "prediction": "all x.((VibrationsReachEar(x) & MusicSounds(x)) -> CanBeHeard(x))", "score": 0}
{"id": "eqasc_validation_1202", "prediction": "all x.(OtoacousticEmission(x) -> GeneratesSound(x))", "score": 0}
{"id": "eqasc_validation_1202", "prediction": "all x.(OtoacousticEmissions(x) -> (Sounds(x) & Generates(x)))", "score": 0}
{"id": "eqasc_validation_1202", "prediction": "all x.(OtoacousticEmissions(x) -> (Sound(x) & Generates(x)))", "score": 0}
{"id": "eqasc_validation_1202", "prediction": "all x.(OtoacousticEmission(x) -> EarGeneratesSounds(x))", "score": 0}
{"id": "eqasc_validation_1202", "prediction": "all x.(OtoacousticEmissions(x) -> GeneratesSounds(x))", "score": 0}
{"id": "eqasc_validation_1202", "prediction": "all x.(OtoacousticEmission(x) -> GeneratesSound(x,ear))", "score": 0}
{"id": "eqasc_validation_1202", "prediction": "all x.(OtoacousticEmission(x) -> SoundsTheEarGenerates(x))", "score": 0}
{"id": "eqasc_validation_1202", "prediction": "all x.(OtoacousticEmission(x) -> SoundsEarGenerates(x))", "score": 0}
{"id": "eqasc_validation_1202", "prediction": "all x.(OtoacousticEmissions(x) -> SoundsEarGenerates(x))", "score": 0}
{"id": "eqasc_validation_1202", "prediction": "all x.(OtoacousticEmissions(x) -> (GeneratesSound(x) & EarGeneratesSound(x)))", "score": 0}
{"id": "eqasc_validation_1202", "prediction": "all x.(OtoacousticEmission(x) -> GeneratesSounds(x))", "score": 0}
{"id": "eqasc_validation_1202", "prediction": "all x.(OtoacousticEmission(x) -> SoundGenerating(x))", "score": 0}
{"id": "eqasc_validation_1203", "prediction": "all x y z.((Vibration(x) & Ear(y) & Noise(z) & Attracts(x,y) & Makes(x,z)) -> Otoacoustic(x))", "score": 0}
{"id": "eqasc_validation_1203", "prediction": "all x.((Vibrations(x) & ReachEar(x) & MakeNoise(x)) -> Otoacoustic(x))", "score": 0}
{"id": "eqasc_validation_1203", "prediction": "all x.((Vibrations(x) & ReachEarToMakeNoise(x)) -> Otoacoustic(x))", "score": 0}
{"id": "eqasc_validation_1203", "prediction": "(all x.((Vibration(x) & ReachEar(x) & MakeNoise(x)) -> Otoacoustic(x)))", "score": 0}
{"id": "eqasc_validation_1203", "prediction": "all x y.((Vibration(x) & Ear(y) & Reaches(x,y) & MakesNoise(y)) -> Otoacoustic(x))", "score": 0}
{"id": "eqasc_validation_1203", "prediction": "ALL ABOUT THEVibration(x) & ReachesEarToMakeNoise(x))", "score": -1}
{"id": "eqasc_validation_1203", "prediction": "all x.((Vibration(x) & ReachesEarToMakeNoise(x)) -> Otoacoustic(x))", "score": 0}
{"id": "eqasc_validation_1203", "prediction": "all x y z.((Vibration(x) & Ear(y) & Ear(z) & MakeNoise(x,y)) -> Otoacoustic(x))", "score": 0}
{"id": "eqasc_validation_1203", "prediction": "all x.((Vibration(x) & ReachEarToMakeNoise(x)) -> Otoacoustic(x))", "score": 0}
{"id": "eqasc_validation_1203", "prediction": "all x y z.((Vibration(x) & Ear(y) & Ear(z) & ReachesToMakeNoise(x,y,z)) -> OtoacousticVibration(x))", "score": 0}
{"id": "eqasc_validation_1203", "prediction": "all x.((Vibration(x) & GetsToEarToMakeNoise(x)) -> Otoacoustic(x))", "score": 0}
{"id": "eqasc_validation_1203", "prediction": "all x.((Vibration(x) & ReachEar(x) & MakeNoise(x)) -> Otoacoustic(x))", "score": 0}
{"id": "eqasc_validation_1203", "prediction": "all x y z.((Vibration(x) & Ear(y) & Ear(z) & ReachesForNoise(x,y,z)) -> Otoacoustic(x))", "score": 0}
{"id": "eqasc_validation_1204", "prediction": "all x.(Ears(x) -> WeakensVibrationsDevices(x))", "score": 0}
{"id": "eqasc_validation_1204", "prediction": "all x y.((Vibrations(x) & Ears(y) & Reach(x,y)) -> ChangedIntoSounds(x))", "score": 0}
{"id": "eqasc_validation_1204", "prediction": "all x.((Vibrations(x) & ReachEars(x)) -> ChangedIntoSound(x))", "score": 0}
{"id": "eqasc_validation_1204", "prediction": "all x.((Vibrations(x) & ReachOurEars(x)) -> ChangedIntoSounds(x))", "score": 0}
{"id": "eqasc_validation_1204", "prediction": "all x.((Vibrations(x) & ReachEars(x)) -> ChangedIntoSounds(x))", "score": 0}
{"id": "eqasc_validation_1204", "prediction": "all x.(Vibrations(x) -> (ReachesEars(x) & ChangedIntoSounds(x)))", "score": 0}
{"id": "eqasc_validation_1204", "prediction": "all x y.((Vibrations(x) & Appear(y) & ReachOurEars(x,y)) -> ChangedIntoSounds(x))", "score": 0}
{"id": "eqasc_validation_1204", "prediction": "all x y z.((Vibration(x) & Ear(y) & Ear(z) & ReachEar(x,y)) -> ChangedIntoSound(x,z))", "score": 0}
{"id": "eqasc_validation_1204", "prediction": "all x.(NeedsVibration(x) -> ChangedIntoSounds(x))", "score": 0}
{"id": "eqasc_validation_1204", "prediction": "all x y.((Ears(x) & Vibrations(y) & Reach(x)) -> ChangedIntoSounds(y))", "score": 0}
{"id": "eqasc_validation_1204", "prediction": "all x.((Vibration(x) & ReachesEars(x)) -> ChangedIntoSound(x))", "score": 0}
{"id": "eqasc_validation_1204", "prediction": "all x.((Vibrations(x) & BecomeEars(x)) -> ChangedIntoSounds(x))", "score": 0}
{"id": "eqasc_validation_1204", "prediction": "all x.((Vibrations(x) & Reach(x,Ears)) -> ChangedIntoSounds(x))", "score": 0}
{"id": "eqasc_validation_1205", "prediction": "all x.((Vibrations(x) & ReachEars(x)) -> CanBeHeard(x))", "score": 0}
{"id": "eqasc_validation_1205", "prediction": "all x.((Vibrations(x) & ReachOurEars(x)) -> CanBeHeard(x))", "score": 0}
{"id": "eqasc_validation_1205", "prediction": "all x.((VibrationRise(x) & ReachedEars(x)) -> CanBeHeard(x))", "score": 0}
{"id": "eqasc_validation_1205", "prediction": "all x y.((Vibrations(x) & Ears(y) & Reach(x,y)) -> CanBeHeard(x))", "score": 0}
{"id": "eqasc_validation_1205", "prediction": "all x y.((Vibration(x) & Embryon(y) & ReachEars(x,y)) -> CanBeHeard(x))", "score": 0}
{"id": "eqasc_validation_1205", "prediction": "all x.((VibrationsReachEars(x) & VisibleToHaut(x)) -> CanBeHeard(x))", "score": 0}
{"id": "eqasc_validation_1205", "prediction": "all x.((VibrationsReachEars(x)) -> CanBeHeard(x))", "score": 0}
{"id": "eqasc_validation_1205", "prediction": "all x y z.((Vibration(x) & Ears(y) & Eye(z) & Reaches(x,y,z)) -> CanBeHeard(x))", "score": 0}
{"id": "eqasc_validation_1205", "prediction": "all x.((Vibration(x) & ReachEars(x)) -> CanBeHearned(x))", "score": 0}
{"id": "eqasc_validation_1205", "prediction": "all x.((Vibrations(x) & ReachesEars(x)) -> CanBeHeard(x))", "score": 0}
{"id": "eqasc_validation_1205", "prediction": "all x y.((Vibration(x) & Ear(y)) -> CanBeHeard(x))", "score": 0}
{"id": "eqasc_validation_1205", "prediction": "all x y.((Vibration(x) & Ears(y) & Reach(x,y)) -> CanBeHeard(x,y))", "score": 0}
{"id": "eqasc_validation_1205", "prediction": "all x.((VibrationsRiseInToEars(x)) -> CanBeHeard(x))", "score": 0}
{"id": "eqasc_validation_1206", "prediction": "all x y z.((MeasureingHardnessOfMinerals(x) & MicronMaterial(y) & MicronMaterial(z)) -> RequiresScrapingOfMinerals(x,y))", "score": 0}
{"id": "eqasc_validation_1206", "prediction": "all x y.(MeasuresHardnessOfMinerals(x,y) -> ScratchesMaterials(x,y))", "score": 0}
{"id": "eqasc_validation_1206", "prediction": "all x.((Mineral(x) & Hardness(x)) -> Scratches(x))", "score": 0}
{"id": "eqasc_validation_1206", "prediction": "all x.((MeasuresHardnessOfMinerals(x) & Scratches(x,y)) -> Material(y))", "score": 0}
{"id": "eqasc_validation_1206", "prediction": "all x y.((Mineral(x) & Mineral(y) & Scratch(x,y)) -> MeasuresHardness(x,y))", "score": 0}
{"id": "eqasc_validation_1206", "prediction": "all x y.((MeasuresHardnessOfMinerals(x) & ScratchesMinerals(y)) -> ScratchesMinerals(x,y))", "score": 0}
{"id": "eqasc_validation_1206", "prediction": "all x y.((Mineral(x) & Material(y) & MeasuresHardness(x,y)) -> ScratchesCommissions(x,y))", "score": 0}
{"id": "eqasc_validation_1206", "prediction": "all x.(Marcose(x) -> (MeasuresHardnessOfMinerals(x) & ScratchesMaterials(x)))", "score": 0}
{"id": "eqasc_validation_1206", "prediction": "all x.(MeasuringHardnessOfMinerals(x) -> (RequiresCrikingMaterials(x,Minerals) & ScratchesMaterials(x,Minerals)))", "score": 0}
{"id": "eqasc_validation_1206", "prediction": "all x y.((Mineral(x) & Hardness(y)) -> MeasuringScraps(x,y))", "score": 0}
{"id": "eqasc_validation_1206", "prediction": "all x y.((Mineral(x) & Mineral(y) & Hardness(z)) -> ScratchesRequiresShredding(x,y))", "score": 0}
{"id": "eqasc_validation_1206", "prediction": "all x.(MeasureShardnessOfMinerals(x) -> ScratchesMinerals(x))", "score": 0}
{"id": "eqasc_validation_1206", "prediction": "all x y.((Mineral(x) & Mineral(y) & For(x,y)) -> MeasuresHardnessOf(x,y))", "score": 0}
{"id": "eqasc_validation_1206", "prediction": "all x.((Marine(x) & Hardness(x)) -> ScratchesMaterials(x))", "score": 0}
{"id": "eqasc_validation_1206", "prediction": "all x y.((Mineral(x) & Material(y) & Hardness(y)) -> RequiresCrusting(x,y))", "score": 0}
{"id": "eqasc_validation_1206", "prediction": "all x.((Minerals(x) & RequiresCrathering(x)) -> MeasuresHardness(x,maximal),x.(Minerals(x) & RequiresCratching(x,x)))", "score": -1}
{"id": "eqasc_validation_1207", "prediction": "all x.(MohsScale(x) -> UsedForRankingHardnessOfMinerals(x))", "score": 0}
{"id": "eqasc_validation_1207", "prediction": "all x.((MineralHardness(x) & MohsScales(x)) -> UsedForRating(x))", "score": 0}
{"id": "eqasc_validation_1207", "prediction": "all x.(MohsScanning(x) -> UsedToRankHardnessOfMinerals(x))", "score": 0}
{"id": "eqasc_validation_1207", "prediction": "all x y.((Soil(x) & Mineral(y)) -> MohsScale(x))", "score": 0}
{"id": "eqasc_validation_1207", "prediction": "all x.(Scale(x) -> (RanksHardnessOfMinerals(x) & MohsCalibrate(x)))", "score": 0}
{"id": "eqasc_validation_1207", "prediction": "all x y z.((MohsScale(x) & Mineral(y) & Hardness(z)) -> Used(x))", "score": 0}
{"id": "eqasc_validation_1207", "prediction": "all x.((FollowingHardness(x) & Rocks(x)) -> MohsScale(x))", "score": 0}
{"id": "eqasc_validation_1207", "prediction": "all x.((MineralHardness(x) & MohsScale(x)) -> UsedForRanking(x))", "score": 0}
{"id": "eqasc_validation_1207", "prediction": "all x.((MineralHardness(x) & MohsScale(x)) -> UsedForRanking(x,y))", "score": 0}
{"id": "eqasc_validation_1207", "prediction": "all x.((Hardness(x) & MohsScene(x)) -> Used(x))", "score": 0}
{"id": "eqasc_validation_1207", "prediction": "all x y z.((MohsScavenge(x) & Mineral(y) & Hardness(z)) -> Ranked(x,y,z))", "score": 0}
{"id": "eqasc_validation_1207", "prediction": "all x y.((MohsScale(x) & Mineral(y)) -> LoadedForHardness(x,y))", "score": 0}
{"id": "eqasc_validation_1207", "prediction": "all x.(MohsScale(x) -> UsedForRankingHardness(x))", "score": 0}
{"id": "eqasc_validation_1207", "prediction": "all x.(RatingHardnessOfMinerals(x) -> MohsScales(x))", "score": 0}
{"id": "eqasc_validation_1207", "prediction": "all x.((MohsScales(x) & Hardness(x,minerals)) -> UsedForRanking(x,minerals))", "score": 0}
{"id": "eqasc_validation_1207", "prediction": "all x y.((Mineral(x) & Hardness(y)) -> MohsScale(x))", "score": 0}
{"id": "eqasc_validation_1208", "prediction": "all x y.((Mineral(x) & Scratching(x)) -> MohsScaleRanking(y))", "score": 0}
{"id": "eqasc_validation_1208", "prediction": "all x y.((Mineral(x) & Scratching(x,y)) -> (IncludesRanking(x,y) & DeterminesRanking(x,MohsScile)))", "score": 0}
{"id": "eqasc_validation_1208", "prediction": "all x y.((Mineral(x) & Scratching(x)) -> AllowsRunningOnMohsScale(x,y))", "score": 0}
{"id": "eqasc_validation_1208", "prediction": "all x y.((Mineral(x) & Scratching(x)) -> DetermineRatingOnMohsScale(y))", "score": 0}
{"id": "eqasc_validation_1208", "prediction": "all x y.((Mineral(x) & Scratches(x,y)) -> For MohsScale(y))", "score": -1}
{"id": "eqasc_validation_1208", "prediction": "all x y.((Mineral(x) & Scratching(x,y)) -> RankingOnMohsScale(x,y))", "score": 0}
{"id": "eqasc_validation_1208", "prediction": "all x y.((Mineral(x) & Scratching(x,y)) -> (RanksOn MohsScale(y) & DeterminesClassification(x,y)))", "score": -1}
{"id": "eqasc_validation_1208", "prediction": "all x y z.((Mineral(x) & Scratching(x,y) & Ranking(z)) -> Determines(x,z))", "score": 0}
{"id": "eqasc_validation_1208", "prediction": "all x y z.((Mineral(x) & Scratching(x,y) & MohsScale(z)) -> DetermineRatingOn(x,z))", "score": 0}
{"id": "eqasc_validation_1208", "prediction": "all x y.((Mineral(x) & Scratching(x) & MohsScale(y)) -> DeterminesRanking(x,y))", "score": 0}
{"id": "eqasc_validation_1208", "prediction": "all x y.((Mineral(x) & Scratches(x,y)) -> DeterminesRankingOnMohsScale(x))", "score": 0}
{"id": "eqasc_validation_1208", "prediction": "all x y.((Mineral(x) & Scratching(x,y)) -> DeterminesRoleOnMohsScanning(y))", "score": 0}
{"id": "eqasc_validation_1208", "prediction": "all x y z.((Mineral(x) & Scratching(x,y) & Mineral(y)) -> TheRanking(z))", "score": 0}
{"id": "eqasc_validation_1208", "prediction": "all x y z.((Mineral(x) & Scratching(x,y) & MohsScene(z)) -> DeterminesRanking(x,z))", "score": 0}
{"id": "eqasc_validation_1208", "prediction": "all x y.((Mineral(x) & Scratching(x,y) & MohsScale(y)) -> DeterminesRatingOnScale(x,y))", "score": 0}
{"id": "eqasc_validation_1208", "prediction": "all x y z.((Mineral(x) & Scratches(y,x) & MohsScale(z)) -> DeterminesRanking(x,y,z))", "score": 0}
{"id": "eqasc_validation_1209", "prediction": "all x.(GemStone(x) -> HardMinerals(x))", "score": 0}
{"id": "eqasc_validation_1209", "prediction": "all x.(GemBridge(x) -> HardMineral(x))", "score": 0}
{"id": "eqasc_validation_1209", "prediction": "all x.(GemStone(x) -> HardMineral(x))", "score": 0}
{"id": "eqasc_validation_1209", "prediction": "all x.(GemSteel(x) -> HardMinerals(x))", "score": 0}
{"id": "eqasc_validation_1210", "prediction": "all x y.((GemStone(x) & Gem(y)) -> MeasuresHardnessByCrater(x,y))", "score": 0}
{"id": "eqasc_validation_1210", "prediction": "all x y.((GemStone(x) & GemStone(y)) -> MeasuresHardness(x,y))", "score": 0}
{"id": "eqasc_validation_1210", "prediction": "all x y z.((Gemstone(x) & Stone(y) & Stone(z) & Scratches(y,z)) -> MeasuresHardness(x,y,z))", "score": 0}
{"id": "eqasc_validation_1210", "prediction": "all x y.((GemStone(x) & Gem(y) & Scratches(x,y)) -> MeasuresHardness(x,y))", "score": 0}
{"id": "eqasc_validation_1210", "prediction": "all x y.((Detail(x) & GemStone(y)) -> (MeasureHardness(x,y) & Scratch(x,y)))", "score": 0}
{"id": "eqasc_validation_1210", "prediction": "(or measure hardness(x) & scratching(x) -> MeasuresHardness(x))", "score": -1}
{"id": "eqasc_validation_1210", "prediction": "all x y z.((Horse(x,y) & GemStone(z)) -> MeasuresThreat(x,y,z))", "score": 0}
{"id": "eqasc_validation_1210", "prediction": "all x y z.(HorsenessOfGemStone(x) -> MeasurableByCrushing(x,y,z))", "score": 0}
{"id": "eqasc_validation_1210", "prediction": "all x y.((Gemstone(x) & GemStone(y)) -> MeasureHardness(x,y))", "score": 0}
{"id": "eqasc_validation_1210", "prediction": "all x y.((GemStone(x) & GemStone(y)) -> MeasuresHardnessByScraping(x,y))", "score": 0}
{"id": "eqasc_validation_1210", "prediction": "all x y.((GemStone(x) & Stone(y)) -> CanMeasureHardnessByCrushing(x,y))", "score": 0}
{"id": "eqasc_validation_1210", "prediction": "all x y z.((GemStone(x) & Hardness(y) & Surface(z) & ScratchedBy(x,z)) -> MeasuresHardness(x,y,z))", "score": 0}
{"id": "eqasc_validation_1210", "prediction": "all x y.((Gemstone(x) & Stone(y) & Scratches(x,y)) -> MeasuresHardness(x,y))", "score": 0}
{"id": "eqasc_validation_1210", "prediction": "all x y z.((GemStone(x) & Stone(y) & Hardness(z)) -> MeasuredByCrossing(x,y,z))", "score": 0}
{"id": "eqasc_validation_1210", "prediction": "all x y.((Gemstone(x) & Stone(y)) -> MeasuresHardness(x,y))", "score": 0}
{"id": "eqasc_validation_1210", "prediction": "all x y.((GemStone(x) & Stone(y)) -> MeasuresHardness(x,y))", "score": 0}
{"id": "eqasc_validation_1211", "prediction": "all x.(Mineral(x) -> ClassifiedByHardness(x))", "score": 0}
{"id": "eqasc_validation_1211", "prediction": "all x.(Mineral(x) -> Hardness(x))", "score": 0}
{"id": "eqasc_validation_1211", "prediction": "all x.(Mineral(x) -> ClassedByHardness(x))", "score": 0}
{"id": "eqasc_validation_1211", "prediction": "all x y.((Mineral(x) & Hardness(y)) -> ClassifiedBy(x,y))", "score": 0}
{"id": "eqasc_validation_1212", "prediction": "all x.(Mineral(x) -> RequiresScraping(x))", "score": 0}
{"id": "eqasc_validation_1212", "prediction": "all x.(Mineral(x) -> RequiresCrater(x,mild(x))", "score": -1}
{"id": "eqasc_validation_1212", "prediction": "all x.(Mineral(x) -> (RequiresCratching(x) & Classifies(x)))", "score": 0}
{"id": "eqasc_validation_1212", "prediction": "all x y.((Mineral(x) & Material(y)) -> RequiresScraping(x,y))", "score": 0}
{"id": "eqasc_validation_1212", "prediction": "all x y.((Mineral(x) & Material(y)) -> ClassifiesRequiresCratching(x,y))", "score": 0}
{"id": "eqasc_validation_1212", "prediction": "all x y.((Mineral(x) & Material(y)) -> Scratching(x,y))", "score": 0}
{"id": "eqasc_validation_1212", "prediction": "all x.(ClassifyingMinerals(x) -> RequiresScrapingMaterials(x))", "score": 0}
{"id": "eqasc_validation_1212", "prediction": "all x.(Mineral(x) -> ScratchingMaterial(x))", "score": 0}
{"id": "eqasc_validation_1212", "prediction": "all x.(Mineral(x) -> RequiresCratching(x))", "score": 0}
{"id": "eqasc_validation_1212", "prediction": "all x.(Mineral(x) -> RequiresCrashes(x))", "score": 0}
{"id": "eqasc_validation_1212", "prediction": "all x y.((Mineral(x) & Material(y) & Crack(x,y)) -> Classifies(x,y))", "score": 0}
{"id": "eqasc_validation_1212", "prediction": "all x.((Mineral(x) & Scratching(x)) -> Classifying(x))", "score": 0}
{"id": "eqasc_validation_1212", "prediction": "all x.(Mineral(x) -> RequiresCratering(x))", "score": 0}
{"id": "eqasc_validation_1213", "prediction": "all x.((Diamond(x) & ShapeOfDiamondStructure(x)) -> Hard(x))", "score": 0}
{"id": "eqasc_validation_1213", "prediction": "all x.(Diamond(x) -> (Hard(x) & ShapeOfDiamond(x)))", "score": 0}
{"id": "eqasc_validation_1213", "prediction": "all x y.((Diamond(x) & DiamondStructure(y)) -> Hard(x))", "score": 0}
{"id": "eqasc_validation_1213", "prediction": "all x.(Diamond(x) -> (SoHard(x) & ShapeOfDiamond(x)))", "score": 0}
{"id": "eqasc_validation_1213", "prediction": "all x.(Diamond(x) & Hard(x))", "score": 0}
{"id": "eqasc_validation_1213", "prediction": "all x y.((Diamond(x) & DiamondStructure(y) & Shape(x,y)) -> SoHard(x))", "score": 0}
{"id": "eqasc_validation_1213", "prediction": "all x y.((Diamond(x) & DiamondStructure(y)) -> SoHard(x))", "score": 0}
{"id": "eqasc_validation_1213", "prediction": "all x.(Diamond(x) -> Hard(x))", "score": 0}
{"id": "eqasc_validation_1213", "prediction": "all x.((Diamond(x) & ShapeOfDiamond(x)) -> SoHard(x))", "score": 0}
{"id": "eqasc_validation_1213", "prediction": "all x y.((Diamond(x) & Diamond(y) & ShapeOfStructure(x,y)) -> SoHard(x))", "score": 0}
{"id": "eqasc_validation_1213", "prediction": "all x.((Diamond(x) & ShapeOfStructure(x,Diamonds)) -> SoHard(x))", "score": 0}
{"id": "eqasc_validation_1213", "prediction": "all x y.((Diamond(x) & Diamond(y)) -> Hard(x,y))", "score": 0}
{"id": "eqasc_validation_1213", "prediction": "all x.((Diamond(x) & ShapeOfDiamondStructure(x)) -> SoHard(x))", "score": 0}
{"id": "eqasc_validation_1213", "prediction": "all x.(Dimension(x) -> (Hard(x) & DesignedForDiamond(x)))", "score": 0}
{"id": "eqasc_validation_1213", "prediction": "all x.(ShapeOfDiamond(x) -> SoHard(x))", "score": 0}
{"id": "eqasc_validation_1214", "prediction": "all x y.((Diamond(x) & Diamond(y) & Measures(x,y)) -> RequiresCrakingAndScraping(x,y))", "score": 0}
{"id": "eqasc_validation_1214", "prediction": "all x.(Diamond(x) -> ScratchingRequirement(x))", "score": 0}
{"id": "eqasc_validation_1214", "prediction": "all x.(Diamond(x) -> ScratchingRequirements(x))", "score": 0}
{"id": "eqasc_validation_1214", "prediction": "all x.(Diamond(x) & Scratches(x)) -> MeasuringRequiresScraping(x))", "score": -1}
{"id": "eqasc_validation_1214", "prediction": "all x y z.((Diamond(x) & Diamond(y) & Diamond(z)) -> MeasuresRequiresCrater(x,y,z))", "score": 0}
{"id": "eqasc_validation_1214", "prediction": "all x y.((Diamond(x) & Diamond(y)) -> ScratchesRequires(x,y))", "score": 0}
{"id": "eqasc_validation_1214", "prediction": "all x y.((Diamond(x) & Diamond(y)) -> ScratchesRequirements(x,y))", "score": 0}
{"id": "eqasc_validation_1214", "prediction": "all x.(Diamond(x) -> (Measures(x,Diamonds) & Scratches(x,Diamonds)))", "score": 0}
{"id": "eqasc_validation_1214", "prediction": "all x.(Diamond(x) -> Scratches(x))", "score": 0}
{"id": "eqasc_validation_1214", "prediction": "all x.(Diamond(x) -> MeasuresRequiresCretching(x))", "score": 0}
{"id": "eqasc_validation_1214", "prediction": "all x.(Diamond(x) -> NeedsScrating(x))", "score": 0}
{"id": "eqasc_validation_1214", "prediction": "all x.(Diamond(x) -> RestrictlyCrushes(x))", "score": 0}
{"id": "eqasc_validation_1214", "prediction": "all x y.((Diamond(x) & Diamond(y)) -> NeedsScrapping(x,y))", "score": 0}
{"id": "eqasc_validation_1214", "prediction": "all x.(Diamond(x) -> ScratchesRequirements(x))", "score": 0}
{"id": "eqasc_validation_1214", "prediction": "all x y.((Diamond(x) & Diamond(y)) -> (Measures(x,y) & RequiresCutting(x,y)))", "score": 0}
{"id": "eqasc_validation_1215", "prediction": "all x.(PaintingGemHardness(x) -> ScratchingGem(x))", "score": 0}
{"id": "eqasc_validation_1215", "prediction": "all x y.((MeasuresGemHardness(x) & Diamond(y)) -> ScratchesRequiredToMeasure(x,y))", "score": 0}
{"id": "eqasc_validation_1215", "prediction": "all x y.((MeasuresGemHardness(x) & Rock Gem(y)) -> ScratchesRequiredToMeasure(x,y))", "score": -1}
{"id": "eqasc_validation_1215", "prediction": "all x.(GemHardness(x) -> ScratchesRequires(x,z))", "score": 0}
{"id": "eqasc_validation_1215", "prediction": "all x.((MeasuringGemHardness(x) & Stacketing(x)) -> MeasuresBeltHardness(x))", "score": 0}
{"id": "eqasc_validation_1215", "prediction": "all x.(MarsHandler(x) -> ScratchingGerms(x))", "score": 0}
{"id": "eqasc_validation_1215", "prediction": "all x.(ZermHardness(x) -> Cratches(x))", "score": 0}
{"id": "eqasc_validation_1215", "prediction": "all x.((MetaphoringGemHardness(x) & ScratchingGems(x)) -> MeasuresGemHardness(x))", "score": 0}
{"id": "eqasc_validation_1215", "prediction": "all x.(MineUpRich(x) -> ScratchesGemHardness(x))", "score": 0}
{"id": "eqasc_validation_1215", "prediction": "all x y.((MeasuringGemHardness(x) & Gem(y)) -> Scratching(x,y))", "score": 0}
{"id": "eqasc_validation_1215", "prediction": "all x.(MeasuringBeltHardness(x) -> RequiresScrappingShells(x))", "score": 0}
{"id": "eqasc_validation_1215", "prediction": "all x y.((MetatheorizingGemHardness(x) & Gem(y)) -> ScratchingRequires(x,y))", "score": 0}
{"id": "eqasc_validation_1215", "prediction": "all x y.(MetaorizingGemHardness(x) -> ScratchesGems(y))", "score": 0}
{"id": "eqasc_validation_1215", "prediction": "all x.((MetathesizesGemHardness(x) & ScratchesGems(x)) -> RequiresCracking(x))", "score": 0}
{"id": "eqasc_validation_1215", "prediction": "all x y.((MeasuresGemHardness(x) & Scratches(x,y)) -> RequiresScraping(y))", "score": 0}
{"id": "eqasc_validation_1215", "prediction": "all x y z.((Measurement(x) & GemHardness(y) & Excavation(z)) -> (RequiresCreating(x,y,z) & Creaking(y,z)))", "score": 0}
{"id": "eqasc_validation_1216", "prediction": "all x y.((Mineral(x) & MohsScene(y)) -> CanRank(x,y))", "score": 0}
{"id": "eqasc_validation_1216", "prediction": "all x y.((Mineral(x) & MohsScene(y)) -> Scratches(x,y))", "score": 0}
{"id": "eqasc_validation_1216", "prediction": "all x.(RulesOnMohsScale(x) -> MohsMineral(x))", "score": 0}
{"id": "eqasc_validation_1216", "prediction": "all x y.((Mineral(x) & MohsScale(y)) -> Scratch(x,y))", "score": 0}
{"id": "eqasc_validation_1216", "prediction": "all x y.((Mineral(x) & MohsScale(y)) -> MustCruize(x,y))", "score": 0}
{"id": "eqasc_validation_1216", "prediction": "all x y z.((Mineral(x) & MohsScale(y) & Scotch(z)) -> Placing(x,y,z))", "score": 0}
{"id": "eqasc_validation_1216", "prediction": "all x y.((Mineral(x) & MohsScale(y)) -> RangsOnTracking(x,y))", "score": 0}
{"id": "eqasc_validation_1216", "prediction": "all x.(Role(x,MohsScale) -> CrawlMineral(x))", "score": 0}
{"id": "eqasc_validation_1216", "prediction": "all x y.((Mineral(x) & MohsScale(y)) -> Scratches(x,y))", "score": 0}
{"id": "eqasc_validation_1216", "prediction": "all x.(RanksMineralsOnMohsScale(x) -> Scratch(x))", "score": 0}
{"id": "eqasc_validation_1216", "prediction": "all x y.((Mineral(x) & MohsScale(y)) -> ScratchMade(x,y))", "score": 0}
{"id": "eqasc_validation_1216", "prediction": "all x y.((Mineral(x) & MohsScene(y)) -> Recognizes(x,y))", "score": 0}
{"id": "eqasc_validation_1216", "prediction": "all x.(MohsScale(x) -> RangMineral(x))", "score": 0}
{"id": "eqasc_validation_1216", "prediction": "all x y.((Mineral(x) & MohsScale(y) & Scrunk(x)) -> RangOnScale(x,y))", "score": 0}
{"id": "eqasc_validation_1216", "prediction": "all x.((Mineral(x) & MohsScene(x)) -> CanCrashes(x))", "score": 0}
{"id": "eqasc_validation_1216", "prediction": "all x.(KicksMineral(x) -> MohsScaleMineral(x))", "score": 0}
{"id": "eqasc_validation_1217", "prediction": "all x.(Calcite(x) -> VeryCommonMineral(x))", "score": 0}
{"id": "eqasc_validation_1217", "prediction": "all x y.((Calcite(x) & Mineral(y)) -> VeryCommon(x,y))", "score": 0}
{"id": "eqasc_validation_1217", "prediction": "all x.(Calcite(x) -> CommonMineral(x))", "score": 0}
{"id": "eqasc_validation_1217", "prediction": "all x.(Calcite(x) -> UsuallyColournMineral(x))", "score": 0}
{"id": "eqasc_validation_1217", "prediction": "(SilverFossil(Calcite) & VeryCommonMineral(Calcite))", "score": 0}
{"id": "eqasc_validation_1217", "prediction": "all x.(Calcite(x) -> (CommonMineral(x) & VeryCommonMineral(x)))", "score": 0}
{"id": "eqasc_validation_1218", "prediction": "all x.((MeasuringHardnessOfClacite(x) & ScratchingClaciteMaterials(x)) -> Requires(x))", "score": 0}
{"id": "eqasc_validation_1218", "prediction": "all x y.((MeasuringHardnessOfCalcite(x) & Calcite(y)) -> ScratchesAndRises(x,y))", "score": 0}
{"id": "eqasc_validation_1218", "prediction": "all x y z.((Carbon(x) & Hardness(y) & Material(z) & ScalesRequires(x,z)) -> Scratches(x,y,z))", "score": 0}
{"id": "eqasc_validation_1218", "prediction": "all x y.((CalciteMaterial(x) & CalciteMaterial(y) & UsedForDurability(x,y)) -> Scratches(x))", "score": 0}
{"id": "eqasc_validation_1218", "prediction": "all x.((Calcite(x) & Hardness(x,calcite)) -> Scratches(x))", "score": 0}
{"id": "eqasc_validation_1218", "prediction": "all x.(MeasuringHardnessOfCalcite(x) -> RequiresCrackedMaterials(x))", "score": 0}
{"id": "eqasc_validation_1218", "prediction": "all x.(ScreeningHorstOfCalcite(x) -> MeasuringHardnessOfCalcite(x))", "score": 0}
{"id": "eqasc_validation_1218", "prediction": "all x.(AssemblesHardnessOfCalcite(x) -> ScratchesMaterials(x))", "score": 0}
{"id": "eqasc_validation_1218", "prediction": "all x.((Calcite(x) & ShakingCalcite(x)) -> MeasuresHardnessOf(x,y))", "score": 0}
{"id": "eqasc_validation_1218", "prediction": "all x.(KnifesCalciteHardness(x) -> WeaksMaterialsAndRequiresShredding(x))", "score": 0}
{"id": "eqasc_validation_1218", "prediction": "all x.((Calcite(x) & Calcite(x)) -> RequiresScraping(x))", "score": 0}
{"id": "eqasc_validation_1218", "prediction": "all x y.((MeasuringHardness(x) & Calcite(y)) -> Scratching(x,y))", "score": 0}
{"id": "eqasc_validation_1218", "prediction": "all x y.((Calcite(x) & Hardness(y)) -> ScrashesRequires(x,y))", "score": 0}
{"id": "eqasc_validation_1218", "prediction": "all x y.((MeasuringHardnessOfCalcite(x) & Calcite(x)) -> ScratchesRequiredToMeasureHardness(x,y))", "score": 0}
{"id": "eqasc_validation_1218", "prediction": "all x.(MeasuringHardnessOfCalcite(x) -> RequiresScrapingOfCalcite(x))", "score": 0}
{"id": "eqasc_validation_1218", "prediction": "all x.((MeasuringHardnessOfCalcite(x)) -> ScratchesMaterials(x))", "score": 0}
{"id": "eqasc_validation_1219", "prediction": "all x y z.((CarbonateMineral(x) & Malachite(y) & Pearl(z) & Rhodochrosite(z)) -> DamagedBy(x,y,z))", "score": 0}
{"id": "eqasc_validation_1219", "prediction": "all x.((CarbonateMineral(x) & Malachite(x) & Pearl(x) & Rhodochrosite(x)) -> DamagedByChemicalAttack(x))", "score": 0}
{"id": "eqasc_validation_1219", "prediction": "(DamagedByChemistry(ceromate) & (Malachite(ceromate) | Pearl(ceromate) | Rhodochrosite(ceromate)))", "score": 0}
{"id": "eqasc_validation_1219", "prediction": "all x.((CarbonateMineral(x) & (Malachite(x) | Pearl(x) | Rhodochrosite(x))) -> DamagedByChemicalAttack(x))", "score": 0}
{"id": "eqasc_validation_1219", "prediction": "all x.((CarbonateMineral(x) & -Malachite(x) & -Pearl(x) & -Rhodochrosite(x)) -> DamagedByChemicalAttack(x))", "score": 0}
{"id": "eqasc_validation_1219", "prediction": "all x.((Malachite(x) | Pearl(x) | Rhodochrosite(x)) -> DamagedByChemicalAttack(x))", "score": 0}
{"id": "eqasc_validation_1219", "prediction": "all x.(CarbonateMinerals(x) -> ((malachite(x) | pearl(x) | Rhodochrosite(x))))", "score": 0}
{"id": "eqasc_validation_1219", "prediction": "all x.((CarbonateMineral(x) & Malachite(x) | Pearl(x) | Rhodochrosite(x))) -> DamagedByChemicalAttack(x))", "score": -1}
{"id": "eqasc_validation_1219", "prediction": "all x y.((CarbonateMineral(x) & Malachite(y) | Pearl(y) | Rhodochrosite(y)) -> DamagedByChemicalAttack(x))", "score": 0}
{"id": "eqasc_validation_1219", "prediction": "all x y z.((CarbonateMineral(x) & Malachite(y) & Pearl(z) & Rhodochrosite(z)) -> DamagedByChemicalAttack(x))", "score": 0}
{"id": "eqasc_validation_1220", "prediction": "all x y.((Pearl(x) & Pearl(y)) -> MeasuresHardness(x,y))", "score": 0}
{"id": "eqasc_validation_1220", "prediction": "all x.((Pearl(x) & MeasuresHardness(x)) -> RequiresCreating(x))", "score": 0}
{"id": "eqasc_validation_1220", "prediction": "all x y z.((Pearl(x) & Hardness(y) & Pearl(z)) -> MeasuresWithScratch(x,z))", "score": 0}
{"id": "eqasc_validation_1220", "prediction": "all x y z.((Pearl(x) & Hardness(y) & Pearl(z) & MeasuresThroughCrater(x,z)) -> ScratchesThemToThem(x,y,z))", "score": 0}
{"id": "eqasc_validation_1220", "prediction": "all x y z.((Pearl(x) & Hardness(y) & Pearl(z)) -> Measures(x,y,z))", "score": 0}
{"id": "eqasc_validation_1220", "prediction": "all x.(Scraping(x) -> MeasuresHeadnessOfPerl(x))", "score": 0}
{"id": "eqasc_validation_1220", "prediction": "all x.((Perl(x) & Hardness(x) & Scratching(x)) -> MeasuresHardness(x))", "score": 0}
{"id": "eqasc_validation_1220", "prediction": "all x.((Pearl(x) & MeasuresHardness(x,y)) -> Revisit Scratching(y,x))", "score": -1}
{"id": "eqasc_validation_1220", "prediction": "all x.(MeasuresHardnessOfPearl(x) -> ScratchesItToImproveHardness(x))", "score": 0}
{"id": "eqasc_validation_1220", "prediction": "all x y z.((Pearl(x) & Hardness(y) & Pearl(z)) -> (Scratching(x,z) & Mesuring(x,y,z)))", "score": 0}
{"id": "eqasc_validation_1220", "prediction": "all x y.((Pearl(x) & Hardness(y)) -> MeasuresWithScratching(x,y))", "score": 0}
{"id": "eqasc_validation_1220", "prediction": "all x.((Pearl(x) & Hardness(x)) -> Scratches(x))", "score": 0}
{"id": "eqasc_validation_1220", "prediction": "all x y.((Perl(x) & Pearl(y)) -> MeasuresHardnessWithScraping(x,y))", "score": 0}
{"id": "eqasc_validation_1220", "prediction": "all x y z.((Perl(x) & Hardness(y) & Pearl(z)) -> MeasuresCracked(x,y))", "score": 0}
{"id": "eqasc_validation_1221", "prediction": "all x.(Diamond(x) -> (HarstSubstanceKnownToMan(x) & (Chipped(x) | Scrubbed(x))))", "score": 0}
{"id": "eqasc_validation_1221", "prediction": "all x.(Diamond(x) -> (HardestSubstanceKnownToMan(x) & (Chemped(x) | Scrubbed(x))))", "score": 0}
{"id": "eqasc_validation_1221", "prediction": "all x.(Diamond(x) -> (SevereSubstance(x) & (Chipped(x) | Scrubbed(x)))))", "score": -1}
{"id": "eqasc_validation_1221", "prediction": "all x.(Diamond(x) & (HarstSubstanceKnownToMan(x) -> (Chopped(x) | Scracked(x))))", "score": 0}
{"id": "eqasc_validation_1221", "prediction": "all x.(Diamond(x) -> (Cushion(x) | Scratched(x)))", "score": 0}
{"id": "eqasc_validation_1221", "prediction": "all x.(Diamond(x) -> (HarstSubstance(x) & (CanBeChipped(x) | CanBeScrapped(x)))))", "score": -1}
{"id": "eqasc_validation_1221", "prediction": "all x.(Diamond(x) -> (HarstSubstanceKnownToMan(x) | CanBeChippedOrScraped(x)))", "score": 0}
{"id": "eqasc_validation_1221", "prediction": "all x y.((Diamond(x) & Man(y)) -> (HarstSubstance(x,y) & (CanBeChipped(x) | CanBeScrabbled(x))))", "score": 0}
{"id": "eqasc_validation_1221", "prediction": "(HasHardestSubstanceToMan(diamond) & (Chipped(diamond) | Scrubbed(diamond)))", "score": 0}
{"id": "eqasc_validation_1221", "prediction": "all x.(Diamond(x) -> (HarstSubstanceKnownToMan(x) & (CanBeChipped(x) | CanBeScraped(x))))", "score": 0}
{"id": "eqasc_validation_1221", "prediction": "all x.(Diamond(x) -> (HarstSubstanceKnownToMan(x) & (Chopped(x) | Scrubbed(x))))", "score": 0}
{"id": "eqasc_validation_1221", "prediction": "all x.(Diamond(x) -> (Harst(x) & ManKnown(x)) & (CanBeChipped(x) | CanBeScraped(x))))", "score": -1}
{"id": "eqasc_validation_1221", "prediction": "all x.(Diamond(x) -> (HarstSubstanceKnownToMan(x) & CanBeChipped(x) | CanBeScrapped(x)))", "score": 0}
{"id": "eqasc_validation_1221", "prediction": "all x y.((Diamond(x) & Man(y)) -> (DarkestSubstance(x,y) & (Chipped(x) | Scrubbed(x))))", "score": 0}
{"id": "eqasc_validation_1221", "prediction": "all x.(Diamond(x) -> (ShellestSubstanceKnownToMan(x) & (Chipped(x) | Scrubbed(x)))))", "score": -1}
{"id": "eqasc_validation_1222", "prediction": "all x.((Mineral(x) & Hardness(x)) -> Chips(x))", "score": 0}
{"id": "eqasc_validation_1222", "prediction": "all x.(MetatheringHardnessOfMinerals(x) -> RequiresCheppingMaterials(x))", "score": 0}
{"id": "eqasc_validation_1222", "prediction": "all x y z.((Mineral(x) & Mineral(y) & Hardness(z)) -> MeasuresFaster(x,y,z))", "score": 0}
{"id": "eqasc_validation_1222", "prediction": "all x y.((MeasuresHardnessOfMinerals(x) & ChipsMaterials(y)) -> ForMeasuresHardness(x,y))", "score": 0}
{"id": "eqasc_validation_1222", "prediction": "all x y.((MeasuresHardnessOfMinerals(x,y) & ChipsMinerals(y)) -> NotFormat(x,y))", "score": 0}
{"id": "eqasc_validation_1222", "prediction": "all x.(MeasuresHardnessOfMinerals(x) -> RequiresChange(x))", "score": 0}
{"id": "eqasc_validation_1222", "prediction": "all x.(MeasuringHardnessOfMinerals(x) -> ChipsMaterials(x))", "score": 0}
{"id": "eqasc_validation_1222", "prediction": "all x y.((Measurement(x) & Mineral(y) & Hardness(z) & Materials(y)) -> ChipsMaterials(x,y,z))", "score": 0}
{"id": "eqasc_validation_1222", "prediction": "all x y z.((MeasuresHeadnessOfMinerals(x) & Mineral(y) & Material(z)) -> RequiresChips(x,y,z))", "score": 0}
{"id": "eqasc_validation_1222", "prediction": "all x y z.((Mineral(x) & Hardness(y) & Material(z) & Chemped(x,z)) -> MeasuresHardness(x,y,z))", "score": 0}
{"id": "eqasc_validation_1222", "prediction": "all x.(MeasuresHardnessOfMinerals(x) -> ShpopsMaterials(x))", "score": 0}
{"id": "eqasc_validation_1222", "prediction": "all x.(MeasuresHardness(x) -> RequiresChippingMaterials(x))", "score": 0}
{"id": "eqasc_validation_1222", "prediction": "all x.(MeasuresHardnessOfMinerals(x) -> RequiresChoppingMaterials(x))", "score": 0}
{"id": "eqasc_validation_1222", "prediction": "all x y.((MeasuresHardnessOfMinerals(x) & Mineral(y)) -> ChipsMethods(x,y))", "score": 0}
{"id": "eqasc_validation_1222", "prediction": "all x.(MeasuringHardnessOfMineralsDemandsRequiresChips(x))", "score": 0}
{"id": "eqasc_validation_1223", "prediction": "all x.(RequiredBefore(x) -> NecessaryTravel(x))", "score": 0}
{"id": "eqasc_validation_1223", "prediction": "all x.(Travel(x) -> Necessary(x))", "score": 0}
{"id": "eqasc_validation_1223", "prediction": "all x.(TravelRequired(x) -> Necessary(x))", "score": 0}
{"id": "eqasc_validation_1223", "prediction": "All x.(Travel(x) -> Necessary(x))", "score": -1}
{"id": "eqasc_validation_1223", "prediction": "there are no other arrangements for travel.", "score": -1}
{"id": "eqasc_validation_1223", "prediction": "all x.(Travel(x) -> AsNecessary(x))", "score": 0}
{"id": "eqasc_validation_1223", "prediction": "All x.((Travel(x) & Necessary(x)) -> Requires(x,y))", "score": -1}
{"id": "eqasc_validation_1223", "prediction": "all x.(Travel(x) -> (Requires(x,y) & Necessary(y)))", "score": 0}
{"id": "eqasc_validation_1223", "prediction": "all x.(Travel(x) -> Requires(x))", "score": 0}
{"id": "eqasc_validation_1223", "prediction": "all x y.((Travel(x) & Required(x)) -> Necessary(x))", "score": 0}
{"id": "eqasc_validation_1223", "prediction": "all x.((Travel(x) & Necessary(x)) -> Required(x))", "score": 0}
{"id": "eqasc_validation_1223", "prediction": "all x.(RequiredAsNecessary(x) -> TravelRequiredAsNecessary(x))", "score": 0}
{"id": "eqasc_validation_1224", "prediction": "all x.(MeasuresHardnessOfMaterials(x) & ScratchesOn(x))", "score": 0}
{"id": "eqasc_validation_1224", "prediction": "all x.((MeasuresHardnessOfMaterials(x) & Scratches(x)) -> Necessary(x))", "score": 0}
{"id": "eqasc_validation_1224", "prediction": "all x.((MeasuresHardnessOfMaterials(x) & ScratchesMaterials(x)) -> Necessary(x))", "score": 0}
{"id": "eqasc_validation_1224", "prediction": "all x.((MeasuresHardness(x) & Scratches(x)) -> Necessary(x))", "score": 0}
{"id": "eqasc_validation_1224", "prediction": "all x.((MeasuresHeadness(x) & ScratchesMaterials(x)) -> NecessaryFor(x,EdibleAt(x,At(x))", "score": -1}
{"id": "eqasc_validation_1224", "prediction": "all x y.((MeasuresHardnessOfMaterials(x) & Material(y)) -> NeedsScraping(x))", "score": 0}
{"id": "eqasc_validation_1224", "prediction": "all x.(Damage(x) -> (MeasuresHardnessOfMaterials(x) & ScratchesMaterials(x)))", "score": 0}
{"id": "eqasc_validation_1224", "prediction": "all x y.((Material(x) & Material(y)) -> (Cutting(x,y) & MeasuresHardness(x,y)))", "score": 0}
{"id": "eqasc_validation_1224", "prediction": "all x.(Shaking(x) -> MeasuresHardness(x))", "score": 0}
{"id": "eqasc_validation_1224", "prediction": "all x.(MeasuresHardnessOfMaterials(x) -> NoCrashes(x))", "score": 0}
{"id": "eqasc_validation_1224", "prediction": "all x y z.((MeasuresHardnessOfMaterials(x) & Material(y) & Material(z)) -> (Cracked(x,y) & NotNecessaryForMaterials(x,y,z)))", "score": 0}
{"id": "eqasc_validation_1224", "prediction": "all x y.((MeasuresHardness(x) & Material(y)) -> NeedsCrisping(x,y))", "score": 0}
{"id": "eqasc_validation_1224", "prediction": "all x y.((MeasuresHardness(x) & Material(y) & Scratches(x,y)) -> NecessaryToPossify(x,y))", "score": 0}
{"id": "eqasc_validation_1224", "prediction": "all x.((MeasuresHardness(x) & ScratchAndMaterials(x)) -> NecessaryFunction(x))", "score": 0}
{"id": "eqasc_validation_1225", "prediction": "all x.((HarderMineral(x) & SofterMineral(y)) -> CanScratch(x,y))", "score": 0}
{"id": "eqasc_validation_1225", "prediction": "all x y.((HarderMineral(x) & SofterMineral(y)) -> CanScratch(x,y))", "score": 0}
{"id": "eqasc_validation_1225", "prediction": "all x y.((HarderMineral(x) & SofterMineral(y)) -> Scratches(x,y))", "score": 0}
{"id": "eqasc_validation_1225", "prediction": "all x.(HarderMinerals(x) -> CanScratchSofterMinerals(x))", "score": 0}
{"id": "eqasc_validation_1225", "prediction": "all x.((HarderMineral(x) & SofterMineral(x)) -> Scratches(x,y))", "score": 0}
{"id": "eqasc_validation_1225", "prediction": "all x y.((HarderMinerals(x) & SofterMinerals(y)) -> CanScratch(x,y))", "score": 0}
{"id": "eqasc_validation_1225", "prediction": "all x.((HarderMineral(x) & SofterMineral(x)) -> CouldScratch(x,y))", "score": 0}
{"id": "eqasc_validation_1225", "prediction": "all x.((HarderMineral(x) & SofterMineral(x)) -> Scrashes(x,y))", "score": 0}
{"id": "eqasc_validation_1225", "prediction": "all x y.((HarderMineral(x) & SofterMineral(y)) -> Scrashes(x,y))", "score": 0}
{"id": "eqasc_validation_1225", "prediction": "all x.(SofterMinerals(x) -> ScratchSofterMinerals(x))", "score": 0}
{"id": "eqasc_validation_1225", "prediction": "all x.(HarderMineral(x) -> CanScratchSofterMinerals(x))", "score": 0}
{"id": "eqasc_validation_1225", "prediction": "all x.(HarderMineral(x) -> ScratchSofterMinerals(x))", "score": 0}
{"id": "eqasc_validation_1226", "prediction": "all x y.((Mineral(x) & Hardness(y) & Measuring(x,y)) -> RequiresHarshMineral(x))", "score": 0}
{"id": "eqasc_validation_1226", "prediction": "all x.((Mineral(x) & Hardness(x)) -> RequiresHarderMineral(x))", "score": 0}
{"id": "eqasc_validation_1226", "prediction": "all x.(MeasuringHardnessOfMinerals(x) -> RequiresHarderMineral(x))", "score": 0}
{"id": "eqasc_validation_1226", "prediction": "all x y z.((Mineral(x) & Hardness(y) & Mineral(z)) -> RequiresHarsherMineral(x,y))", "score": 0}
{"id": "eqasc_validation_1226", "prediction": "all x y z.((Mineral(x) & Mineral(y) & Mineral(z)) -> RequiresHarder(y,z))", "score": 0}
{"id": "eqasc_validation_1226", "prediction": "all x.((Mineral(x) & HarderMineral(x)) -> MeasuresHardness(x))", "score": 0}
{"id": "eqasc_validation_1226", "prediction": "all x.(MeasuringHardnessOfMinerals(x) -> ResistsHarshMineral(x))", "score": 0}
{"id": "eqasc_validation_1226", "prediction": "all x y.((MeasuringHardness(x) & Mineral(y)) -> RequiresHarshMelenite(x,y))", "score": 0}
{"id": "eqasc_validation_1226", "prediction": "all x.(MeasuringHeadnessOfMinerals(x) -> RequiresHarshMineral(x))", "score": 0}
{"id": "eqasc_validation_1226", "prediction": "all x.(MeasuringHardnessOfMinerals(x) -> RequiresHarshMineral(x))", "score": 0}
{"id": "eqasc_validation_1226", "prediction": "all x.((Mineral(x) & MeasuringHardness(x,x)) -> RequiresHarshMineral(x))", "score": 0}
{"id": "eqasc_validation_1226", "prediction": "all x y.((MeasuringHardnessOfMinerals(x) & Mineral(y)) -> RequiresHarsh(x,y))", "score": 0}
{"id": "eqasc_validation_1226", "prediction": "all x y.((Mineral(x) & Mineral(y)) -> NeedsHarsheerMineral(x,y))", "score": 0}
{"id": "eqasc_validation_1227", "prediction": "all x y z.((Moh'sScale(x) & Mineral(y) & Hardness(z)) -> UsedToDefine(x,y,z))", "score": 0}
{"id": "eqasc_validation_1227", "prediction": "all x y z.((MohScene(x) & Mineral(y) & Hardness(z)) -> Depicts(x,y,z))", "score": 0}
{"id": "eqasc_validation_1227", "prediction": "all x y.()MohScale(x) & Mineral(y) & UsedToDepictHardness(x,y))", "score": -1}
{"id": "eqasc_validation_1227", "prediction": "all x.((Magnetic(x) & Scale(x)) -> DefinesHardness(x))", "score": 0}
{"id": "eqasc_validation_1227", "prediction": "all x y.((MohScale(x) & Mineral(y)) -> DescribesHardness(x,y))", "score": 0}
{"id": "eqasc_validation_1227", "prediction": "all x.(MohScale(x) -> DefineSharpness(x))", "score": 0}
{"id": "eqasc_validation_1227", "prediction": "all x y.((MohScene(x) & Mineral(y)) -> DefinesHardness(x,y))", "score": 0}
{"id": "eqasc_validation_1227", "prediction": "all x.(Tongue(x) -> DefinesMohScale(x))", "score": 0}
{"id": "eqasc_validation_1227", "prediction": "all x y.((MohScale(x) & Mineral(y)) -> UsedToDepictHardness(x,y))", "score": 0}
{"id": "eqasc_validation_1227", "prediction": "all x y.((MohScales(x) & Mineral(y)) -> DepictsHardness(x,y))", "score": 0}
{"id": "eqasc_validation_1227", "prediction": "all x.(MohSociety(x) -> DefinesMineralHardness(x))", "score": 0}
{"id": "eqasc_validation_1227", "prediction": "all x y.((Scale(x) & Mineral(y)) -> (DepictsHardness(x,y)))", "score": 0}
{"id": "eqasc_validation_1227", "prediction": "all x y.((MohScale(x) & Mineral(y)) -> DescriptionOfHardness(x,y))", "score": 0}
{"id": "eqasc_validation_1227", "prediction": "all x.((MohScale(x) & Mineral(x)) -> DefinesHardness(x))", "score": 0}
{"id": "eqasc_validation_1227", "prediction": "all x y z.((MohScale(x) & Mineral(y) & Hardness(z)) -> Description(x,y z))", "score": -1}
{"id": "eqasc_validation_1227", "prediction": "all x y.((MohScale(x) & Mineral(y)) -> DepictsHardness(x,y))", "score": 0}
{"id": "eqasc_validation_1228", "prediction": "all x y z.((MohScale(x) & Measurement(y) & Scale(z)) -> RequiresScraping(x,y,z))", "score": 0}
{"id": "eqasc_validation_1228", "prediction": "all x y.((MohScale(x) & MohScale(y)) -> ScratchingWhatToEasyIfToEasy(x,y))", "score": 0}
{"id": "eqasc_validation_1228", "prediction": "all x y z.((MohScale(x) & Measurement(y) & MohScale(z)) -> (RequiresCrackeding(x) & RequiresScraping(x)))", "score": 0}
{"id": "eqasc_validation_1228", "prediction": "all x y.((MohsScale(x) & Measurement(y)) -> RequiresScraping(x,y))", "score": 0}
{"id": "eqasc_validation_1228", "prediction": "all x.((MohsScale(x) & Measurement(x)) -> ScratchingRequires(x))", "score": 0}
{"id": "eqasc_validation_1228", "prediction": ",or,if you have not done so, scratching the surface of the MohsScene(x) -> MohsSceneMeasurement(x))", "score": -1}
{"id": "eqasc_validation_1228", "prediction": "all x.((MohsScale(x) & Scale(y)) -> RequiresCraking(x,y))", "score": 0}
{"id": "eqasc_validation_1228", "prediction": "all x y.((MohScale(x) & MohScale(y)) -> Scratching(x))", "score": 0}
{"id": "eqasc_validation_1228", "prediction": "all x.(Measurement(x) -> SeeksRequiresCriking(x))", "score": 0}
{"id": "eqasc_validation_1228", "prediction": "all x.((MohsScale(x) & Measurement(x)) -> RequiresCrating(x))", "score": 0}
{"id": "eqasc_validation_1228", "prediction": "all x y z.((MohScalesCrashes(x) & Measurement(y) & Scale(z)) -> Requires(x,y),z))", "score": -1}
{"id": "eqasc_validation_1228", "prediction": "all x.((MohsScene(x) & MohsScene(x)) -> RequiresScraping(x))", "score": 0}
{"id": "eqasc_validation_1228", "prediction": "all x.((MohsScene(x) & Measurement(x)) -> RequiresScratching(x))", "score": 0}
{"id": "eqasc_validation_1228", "prediction": "all x.(MeasurementOnMohScale(x) -> RequiresScrating(x))", "score": 0}
{"id": "eqasc_validation_1228", "prediction": "all x.((Measurement(x) & MohScale(x)) -> RequiresCrisping(x))", "score": 0}
{"id": "eqasc_validation_1228", "prediction": "all x y.((MohScale(x) & MohScale(y)) -> RequiresScraping(x,y))", "score": 0}
{"id": "eqasc_validation_1229", "prediction": "exists x.(Damage(x) & Scratch(x))", "score": 0}
{"id": "eqasc_validation_1229", "prediction": "all x.(Damage(x) -> Scratch(x))", "score": 0}
{"id": "eqasc_validation_1229", "prediction": "can be done in several ways.", "score": -1}
{"id": "eqasc_validation_1229", "prediction": "all x.(Crater(x) -> Damage(x))", "score": 0}
{"id": "eqasc_validation_1229", "prediction": "all x.((Damage(x) & Scratch(x)) -> Damage(x))", "score": 0}
{"id": "eqasc_validation_1229", "prediction": "exists x.(Crater(x) & Damage(x))", "score": 0}
{"id": "eqasc_validation_1229", "prediction": "all x.(Straw(x) -> Scratched(x))", "score": 0}
{"id": "eqasc_validation_1230", "prediction": "all x.(MeasuresHardnessOfMinerals(x) -> RequiresDamagingMeal(x))", "score": 0}
{"id": "eqasc_validation_1230", "prediction": "all x.(Hardness(x) -> DamageMinerals(x))", "score": 0}
{"id": "eqasc_validation_1230", "prediction": "all x y.((Mineral(x) & Mineral(y)) -> MeasuresHardness(x,y))", "score": 0}
{"id": "eqasc_validation_1230", "prediction": "all x y.((Mineral(x) & Mineral(y)) -> (MeasuresHardness(x,y) & DistantsMinerals(x)))", "score": 0}
{"id": "eqasc_validation_1230", "prediction": "all x.(MeasuresHardnessItMinerals(x) -> RequiresDamage(x,Minerals))", "score": 0}
{"id": "eqasc_validation_1230", "prediction": "all x.((MeasuresHardnessOfMiners(x) & RisksDamage(x)) -> DamagesMiners(x))", "score": 0}
{"id": "eqasc_validation_1230", "prediction": "all x.((MetaphoringHardness(x) & Mineralogy(x)) -> RequiresHazarding(x))", "score": 0}
{"id": "eqasc_validation_1230", "prediction": "all x y z.((Mineral(x) & Mineral(y) & Hardness(z)) -> (HasHardness(x,y) & -Harms(y,z)))", "score": 0}
{"id": "eqasc_validation_1230", "prediction": "all x.(MeasuringHardnessOfMineralsRequiresDamage(x) -> HardnessMeasurementsComplementaryHardnessMethod(x))", "score": 0}
{"id": "eqasc_validation_1230", "prediction": "all x y.((Minerals(x) & Materials(y) & Hardness(x,y)) -> Damages(z,y))", "score": 0}
{"id": "eqasc_validation_1230", "prediction": "all x.((MineralsWithHardness(x) & DeterminementOfHardness(x)) -> Damages(x))", "score": 0}
{"id": "eqasc_validation_1230", "prediction": "all x y.((MeasuresHearing(x,y) & Mineral(y)) -> RequiresDamaging(x,y))", "score": 0}
{"id": "eqasc_validation_1230", "prediction": "all x.((MeasuresHardnessOfMinerals(x) & DamagesMinerals(x)) -> RequiresDamage(x))", "score": 0}
{"id": "eqasc_validation_1230", "prediction": "all x.((MineralHardness(x) & DrakingDemolition(x)) -> MeasuresHardness(x))", "score": 0}
{"id": "eqasc_validation_1230", "prediction": "all x y.((Mineral(x) & Mineral(y)) -> PreventsHardnessMeasurement(x,y))", "score": 0}
{"id": "eqasc_validation_1230", "prediction": "all x.(MeasuringHardnessOfMinerals(x) -> DamagesMinerals(x))", "score": 0}
{"id": "eqasc_validation_1231", "prediction": "all x y.((Mineral(x) & Scratching(x,y)) -> DeterminesPlaceOnMohsScale(x))", "score": 0}
{"id": "eqasc_validation_1231", "prediction": "all x y z.((Mineral(x) & Scratching(x,y) & MohScale(z)) -> DeterminesPlaceOnScale(x,y,z))", "score": 0}
{"id": "eqasc_validation_1231", "prediction": "all x y.((Mineral(x) & Scratching(y)) -> MohsScene(x))", "score": 0}
{"id": "eqasc_validation_1231", "prediction": "all x y z.((Mineral(x) & Scratching(x,y) & MohScale(y)) -> RequiresToDeterminePlaceOnScale(x,z))", "score": 0}
{"id": "eqasc_validation_1231", "prediction": "all x y!((Mineral(x) & Spratching(x,y)) -> DeterminesPlaceOnMohScale(x))", "score": 0}
{"id": "eqasc_validation_1231", "prediction": "all x y z.((Mineral(x) & Scratching(x) & MohsScale(y) & Mineral(z)) -> The Place(x,z))", "score": -1}
{"id": "eqasc_validation_1231", "prediction": "all x y z.((Mineral(x) & Scratching(x,y) & MohsScale(z)) -> DeterminesPlaceOnScale(y,z))", "score": 0}
{"id": "eqasc_validation_1231", "prediction": "all x y.((Mineral(x) & Scratching(x)) -> DeterminesPlaceOnMohsScale(x,y))", "score": 0}
{"id": "eqasc_validation_1231", "prediction": "all x y z.((Mineral(x) & Scratching(y) & MohsScena(z)) -> DeterminesPlaceOnScena(x,z))", "score": 0}
{"id": "eqasc_validation_1231", "prediction": "all x y.((Mineral(x) & Scratching(x)) -> DeterminesPlaceOnMohsScale(y))", "score": 0}
{"id": "eqasc_validation_1231", "prediction": "all x y z.((Mineral(x) & Scratching(x) & MohScaleScene(y) & MohScaleScene(z)) -> DeterminePlaceOn(x,y,z))", "score": 0}
{"id": "eqasc_validation_1231", "prediction": "all x.((Mineral(x) & ScratchingRequiresForScale(x)) -> DeterminesPlaceOnMohsScene(x))", "score": 0}
{"id": "eqasc_validation_1231", "prediction": "all x y.((Mineral(x) & Scratching(y)) -> DeterminesPlaceOnMohsScale(y,x))", "score": 0}
{"id": "eqasc_validation_1231", "prediction": "all x y.((Mineral(x) & Scratching(y)) -> DeterminesPlaceOnMohsScale(x,y))", "score": 0}
{"id": "eqasc_validation_1231", "prediction": "all x.((Mineral(x) & Scratching(x)) -> DeterminesPlaceOnMohShaping(x))", "score": 0}
{"id": "eqasc_validation_1231", "prediction": "all x y.((Mineral(x) & Scratching(x,y)) -> DeterminesPlaceOnMohScale(x,y))", "score": 0}
{"id": "eqasc_validation_1232", "prediction": "all x y z.((Mineral(x) & Mineral(y) & MohScaleOfHardness(z)) -> UsedToTellHardness(x,y,z))", "score": 0}
{"id": "eqasc_validation_1232", "prediction": "all x y.((Mineral(x) & MohsScaleOfHardness(x)) -> FiguredOut(x,y))", "score": 0}
{"id": "eqasc_validation_1232", "prediction": "all x y.((Mineral(x) & MohShapeOfHardness(y)) -> Used(x,y))", "score": 0}
{"id": "eqasc_validation_1232", "prediction": "all x.((Mineral(x) & MohsSceneOfHardness(x)) -> FiguredOut(x,x))", "score": 0}
{"id": "eqasc_validation_1232", "prediction": "all x.((Mineral(x) & MohsScaleOfHardness(x)) -> FiguredOut(x))", "score": 0}
{"id": "eqasc_validation_1232", "prediction": "all x y.((Mineral(x) & MohsSceneOfHardness(y)) -> FiguredOut(x,y))", "score": 0}
{"id": "eqasc_validation_1232", "prediction": "all x y.((Mineral(x) & MohsScale(y)) -> FiguratedOutHardness(x,y))", "score": 0}
{"id": "eqasc_validation_1232", "prediction": "all x y z.((Mineral(x) & MohsScaleOfHardness(y) & Mineral(z)) -> DeterminesHardness(x,y,z))", "score": 0}
{"id": "eqasc_validation_1232", "prediction": "all x.((Mineral(x) & MohScaleOfHardness(x)) -> FiguresOutHardness(x))", "score": 0}
{"id": "eqasc_validation_1232", "prediction": "all x y.((Mineral(x) & MohScaleOfHardness(y)) -> Identifier(x,y))", "score": 0}
{"id": "eqasc_validation_1232", "prediction": "all x y.((Mineral(x) & MohMarsSceneOfHardness(x,y)) -> IdentifiedAboveHardness(x,y))", "score": 0}
{"id": "eqasc_validation_1232", "prediction": "all x y.((Mineral(x) & MohsScaleOfHardness(x,y)) -> DeterminesHardness(x,y))", "score": 0}
{"id": "eqasc_validation_1232", "prediction": "all x y.((MohsScale(x) & Mineral(y)) -> DeterminesHardness(x,y))", "score": 0}
{"id": "eqasc_validation_1232", "prediction": "all x y.((Mineral(x) & MohScaleOfHardness(y)) -> FiguresOutHardness(x,y))", "score": 0}
{"id": "eqasc_validation_1232", "prediction": "all x y.((Mineral(x) & Mineral(y)) -> MohScaleOfHardness(x,y))", "score": 0}
{"id": "eqasc_validation_1233", "prediction": "all x y.((Mohs(x) & MohsScaleOfHardness(y)) -> Scratches(x,y))", "score": 0}
{"id": "eqasc_validation_1233", "prediction": "all x y.((ShapedBy(x,y) & MohScaleOfHardness(x) & Material(y)) -> UsedByCracking(x,y))", "score": 0}
{"id": "eqasc_validation_1233", "prediction": "all x.(MohScaleOfHardness(x) -> ScratchesMaterials(x))", "score": 0}
{"id": "eqasc_validation_1233", "prediction": "all x.(Moh'sScaleOfHardness(x) -> ScratchesMaterials(x))", "score": 0}
{"id": "eqasc_validation_1233", "prediction": "all x y.((MohScalesOfHardness(x) & MohsScalesOfHardness(y)) -> UsedByCrackedMaterials(x,y))", "score": 0}
{"id": "eqasc_validation_1233", "prediction": "all x y.((ScaleOfHardness(x) & MohScaleOfHardnessElements(x) & Materials(y)) -> Scratches(x,y))", "score": 0}
{"id": "eqasc_validation_1233", "prediction": "all x.(ScaleOfHardness(x) -> UsedByScrapingMaterials(x))", "score": 0}
{"id": "eqasc_validation_1233", "prediction": "all x.(MohScaleOfHardness(x) -> ScratchMaterials(x))", "score": 0}
{"id": "eqasc_validation_1233", "prediction": "all x y.((MohScalesOfHardness(x,y) & MohScalesOfHardness(z)) -> (CrackedMaterials(x) | ScratchedMaterials(x)))", "score": 0}
{"id": "eqasc_validation_1233", "prediction": "all x.((MohScaleOfHardness(x) & ScratchingMaterials(x)) -> UsedBy(x))", "score": 0}
{"id": "eqasc_validation_1233", "prediction": "all x y.((MohsScaleOfHardness(x) & Material(y)) -> Scratches(x,y))", "score": 0}
{"id": "eqasc_validation_1233", "prediction": "all x y.((MohsSkaleOfHardness(x) & MohMaterials(y)) -> ScratchesMaterials(x,y))", "score": 0}
{"id": "eqasc_validation_1233", "prediction": "all x.((MohsScalesOfHardness(x) & ScratchMaterials(x)) -> UsedBy(x))", "score": 0}
{"id": "eqasc_validation_1233", "prediction": "all x.((MohsScaleOfHardness(x) & ScratchMaterials(x)) -> UsedByForCrateringMaterials(x))", "score": 0}
{"id": "eqasc_validation_1233", "prediction": "all x.((MohsScaleOfHardness(x) & ScratchesMaterials(x)) -> UsedBy(x))", "score": 0}
{"id": "eqasc_validation_1233", "prediction": "all x y.((MohsScaleOfHardness(x) & Materials(y) & ScratchesMaterials(x,y)) -> UsedBy(x,Y))", "score": 0}
{"id": "eqasc_validation_1234", "prediction": "all x y z.((Satellite(x) & Space(y) & Image(z)) -> TakenFrom(x,y,z))", "score": 0}
{"id": "eqasc_validation_1234", "prediction": "all x.(Satellite(x) -> TakesImagesFromSpace(x))", "score": 0}
{"id": "eqasc_validation_1234", "prediction": "all x y.((Satellite(x) & Space(y)) -> TakeImagesFrom(x,y))", "score": 0}
{"id": "eqasc_validation_1234", "prediction": "all x.(Satellite(x) -> TakeImagesFromSpace(x))", "score": 0}
{"id": "eqasc_validation_1234", "prediction": "all x y.((Satellite(x) & Space(y)) -> TakeSpaceImages(x,y))", "score": 0}
{"id": "eqasc_validation_1234", "prediction": "all x y.((Satellite(x) & Space(y)) -> (TakeImagesFromSin(x,y) & Space(y)))", "score": 0}
{"id": "eqasc_validation_1234", "prediction": "all x y.((Satellite(x) & Space(y)) -> TakesImagesFrom(x,y))", "score": 0}
{"id": "eqasc_validation_1234", "prediction": "all x.(Satellite(x) -> UsedToTakeImagesFromSpace(x))", "score": 0}
{"id": "eqasc_validation_1234", "prediction": "all x (Satellite(x) -> TakeImagesFromSpace(x))", "score": 0}
{"id": "eqasc_validation_1234", "prediction": "all x y z.((Satellite(x) & Image(y) & Space(z)) -> TakeSocialFrom(x,y,z))", "score": 0}
{"id": "eqasc_validation_1234", "prediction": "all x y z.((Satellite(x) & ImageFromSpace(y) & Satellite(z)) -> TakesFromSpace(x,z))", "score": 0}
{"id": "eqasc_validation_1234", "prediction": "all x y z.((Satellite(x) & Spacespace(y) & Image(z)) -> TakesFrom(x,y,z))", "score": 0}
{"id": "eqasc_validation_1235", "prediction": "all x.(Image(x) -> (Satellite(x) | Infrared(x)))", "score": 0}
{"id": "eqasc_validation_1235", "prediction": "all x.(Image(x) -> (Includes(x,Satellite) & Includes(x,Infrared)))", "score": 0}
{"id": "eqasc_validation_1235", "prediction": "all x.(Image(x) -> (IncludesSatellitPictures(x) | IncludesInfraredPictures(x)))", "score": 0}
{"id": "eqasc_validation_1235", "prediction": "all x.(Image(x) -> (SatelliteImage(x) & InfraredImage(x)))", "score": 0}
{"id": "eqasc_validation_1235", "prediction": "all x.(Image(x) -> (SatellitePicture(x) & InfraredPicture(x)))", "score": 0}
{"id": "eqasc_validation_1235", "prediction": "all x.(Image(x) -> (IncludeSatellite(x) | IncludeInfrared(x)))", "score": 0}
{"id": "eqasc_validation_1235", "prediction": "all x.(Image(x) -> (SatelliteGraphics(x) | InfraredGraphics(x)))", "score": 0}
{"id": "eqasc_validation_1235", "prediction": "all x.(Image(x) -> (SatellitePicture(x) | InfraredPicture(x)))", "score": 0}
{"id": "eqasc_validation_1235", "prediction": "all x y.((Image(x) & Satellite(y)) -> Infinite(x,y))", "score": 0}
{"id": "eqasc_validation_1235", "prediction": "all x.(Image(x) -> (Satellite(x) & Infrared(x)))", "score": 0}
{"id": "eqasc_validation_1235", "prediction": "all x.(Image(x) -> (SatellitePhoto(x) & InfraredPhoto(x)))", "score": 0}
{"id": "eqasc_validation_1235", "prediction": "all x.(Image(x) -> (Incorporate(x,satellite) | Incorporate(x,infrared)))", "score": 0}
{"id": "eqasc_validation_1236", "prediction": "all x.(Satellite(x) -> TakesInfraredPictures(x))", "score": 0}
{"id": "eqasc_validation_1236", "prediction": "all x.(Satellite(x) -> (TakesInfrared(x) & FromSpace(x)))", "score": 0}
{"id": "eqasc_validation_1236", "prediction": "all x.(Satellite(x) -> (TakesInfraredPhotography(x) & FromSpace(x)))", "score": 0}
{"id": "eqasc_validation_1236", "prediction": "all x.(Satellite(x) -> TakesInfraredPicturesFromSpace(x))", "score": 0}
{"id": "eqasc_validation_1236", "prediction": "all x y.((Satellite(x) & Space(y)) -> TakesInfraredPhotographsFrom(x,y))", "score": 0}
{"id": "eqasc_validation_1236", "prediction": "all x y.((Satellite(x) & Infrared(y)) -> UsedToTake(x,y))", "score": 0}
{"id": "eqasc_validation_1236", "prediction": "all x.(Satellite(x) -> TakeInfraredPicturesFromSpace(x))", "score": 0}
{"id": "eqasc_validation_1236", "prediction": "all x y.((Satellite(x) & InfraredPicture(y)) -> UsedFor(x,y))", "score": 0}
{"id": "eqasc_validation_1236", "prediction": "all x y z.((Satellite(x) & Infrared(y) & Space(z)) -> TakesFrom(x,y,z))", "score": 0}
{"id": "eqasc_validation_1236", "prediction": "all x y.((Satellite(x) & Space(y)) -> TakesInfraredPicturesFrom(x,y))", "score": 0}
{"id": "eqasc_validation_1236", "prediction": "all x y z.((Satellite(x) & InfraredPainting(y) & Space(z)) -> TakesFrom(x,y,z))", "score": 0}
{"id": "eqasc_validation_1236", "prediction": "all x.(Satellite(x) -> (TakeInfraredPhotosFromSpace(x) & FromSpace(x)))", "score": 0}
{"id": "eqasc_validation_1236", "prediction": "all x.(Satellite(x) -> TakesInfrared(x))", "score": 0}
{"id": "eqasc_validation_1236", "prediction": "all x y.((Satellite(x) & Space(y)) -> TakesInfraredPictures(x,y))", "score": 0}
{"id": "eqasc_validation_1236", "prediction": "all x y.((Satellite(x) & Space(y)) -> TakesInfraredPhotograph(x,y))", "score": 0}
{"id": "eqasc_validation_1237", "prediction": "all x.(Meteorologist(x) -> (EmploysImagesFromSatellites(x) & ForecastsWeather(x)))", "score": 0}
{"id": "eqasc_validation_1237", "prediction": "all x.(Meteorologist(x) -> EmploysImagesFromSatellites(x))", "score": 0}
{"id": "eqasc_validation_1237", "prediction": "all x y z.((Meteorologist(x) & Satellite(y) & Weather(z)) -> (EmploysImages(x,y,z)))", "score": 0}
{"id": "eqasc_validation_1237", "prediction": "all x y.((Meteorologist(x) & Satellite(y)) -> (UsesImages(x,y) & ForecastsWeather(x)))", "score": 0}
{"id": "eqasc_validation_1237", "prediction": "all x y.((Meteorologist(x) & Satellite(y)) -> EmploysImages(x,y))", "score": 0}
{"id": "eqasc_validation_1237", "prediction": "all x y z.((Meteorologist(x) & Satellite(y) & Weather(z) & EmploysImages(x,y)) -> ForecastWeather(x,z))", "score": 0}
{"id": "eqasc_validation_1237", "prediction": "all x y.((Meteorologist(x) & Satellite(y)) -> EmploysImagesToHelpPredictWeather(x,y))", "score": 0}
{"id": "eqasc_validation_1237", "prediction": "all x y z.((Meteorologist(x) & Satellite(y) & Satellite(z)) -> EmploysImagesToPrognose(x,y,z))", "score": 0}
{"id": "eqasc_validation_1237", "prediction": "all x y.((Meteorologist(x) & Location(y) & Satellite(z)) -> (EmploysImagesFrom(x,z) & ForecastsWeather(x)))", "score": 0}
{"id": "eqasc_validation_1237", "prediction": "all x.(Meteorologist(x) -> (EmploySatelliteImages(x) & ForecastWeather(x)))", "score": 0}
{"id": "eqasc_validation_1237", "prediction": "all x.(Meteorologist(x) -> EmploysImagesFromSatellitesToProvidesWeather(x))", "score": 0}
{"id": "eqasc_validation_1237", "prediction": "all x.((Meteorologist(x) & EmploysImagesFromSatellites(x)) -> UsedToInfluenceToPredictWeather(x))", "score": 0}
{"id": "eqasc_validation_1237", "prediction": "all x y z.((Meteorologist(x) & Satellite(y) & Satellite(z) & EmploysImage(x,y)) -> PredictionOfWeather(y,z))", "score": 0}
{"id": "eqasc_validation_1237", "prediction": "all x.(Meteorologist(x) -> (EmploysImagesFromSatellites(x) & HelpsPredictWeather(x)))", "score": 0}
{"id": "eqasc_validation_1237", "prediction": "all x y z w.((Meteorologists(x) & Satellite(y) & Weather(z) & ImagesFrom(x,y)) -> UsesToPredict(x,z))", "score": 0}
{"id": "eqasc_validation_1238", "prediction": "all x.(Satellite(x) -> CanHelpPredictWeather(x))", "score": 0}
{"id": "eqasc_validation_1238", "prediction": "all x y.((Satellite(x) & Weather(y)) -> CanHelpPredictWeather(x,y))", "score": 0}
{"id": "eqasc_validation_1238", "prediction": "all x y.((Satellite(x) & Weather(y)) -> Predicts(x,y))", "score": 0}
{"id": "eqasc_validation_1238", "prediction": "all x.(Satellite(x) -> (ProvidesWeather(x) & Weather(x) & Weather(x)))", "score": 0}
{"id": "eqasc_validation_1238", "prediction": "all x y.((Satellite(x) & Weather(y)) -> CanHelpPredict(x,y))", "score": 0}
{"id": "eqasc_validation_1238", "prediction": "all x y.((Satellite(x) & Weather(y)) -> CanPredict(x,y))", "score": 0}
{"id": "eqasc_validation_1238", "prediction": "all x.(Satellite(x) -> (CanHelpProveWeather(x) & CanHelpPredictWeather(x)))", "score": 0}
{"id": "eqasc_validation_1238", "prediction": "all x y z.((Satellite(x) & Weather(y) & Weather(z)) -> ForecastsWhatWeather(x,y,z))", "score": 0}
{"id": "eqasc_validation_1238", "prediction": "all x.(Satellite(x) -> (PredictsWeather(x) & HelpsPredictWeather(x)))", "score": 0}
{"id": "eqasc_validation_1238", "prediction": "all x y.((Satellite(x) & Weather(y) & CanHelpPredict(x,y)) -> CanHelpPredict(x,y))", "score": 0}
{"id": "eqasc_validation_1239", "prediction": "all x.(EarthImage(x) -> TakenFromSpace(x))", "score": 0}
{"id": "eqasc_validation_1239", "prediction": "images of Earth taken from space.", "score": -1}
{"id": "eqasc_validation_1239", "prediction": "all x y.((Image(x) & Earth(y) & TakenFromSpace(x,y)) -> TakenFromSpace(x))", "score": 0}
{"id": "eqasc_validation_1239", "prediction": "ImagesOfEarthPixel(x) -> TakenFromSpace(x))", "score": -1}
{"id": "eqasc_validation_1239", "prediction": "all x.((Image(x) & Earth(x)) -> TakenFromSpace(x))", "score": 0}
{"id": "eqasc_validation_1239", "prediction": "exists x.(EarthImage(x) & TakenFromSpace(x))", "score": 0}
{"id": "eqasc_validation_1239", "prediction": "all x.((Image(x) & Earth(x) & TakenFromSpace(x)) -> TakenFromSpace(x))", "score": 0}
{"id": "eqasc_validation_1239", "prediction": "all x y.((Image(x) & Earth(y)) -> TakenFromSpace(x,y))", "score": 0}
{"id": "eqasc_validation_1239", "prediction": "all x.((Image(x) & TakenFromSpace(x)) -> Earth(x))", "score": 0}
{"id": "eqasc_validation_1239", "prediction": "image of Earth taken fromSpace.", "score": -1}
{"id": "eqasc_validation_1239", "prediction": "all x.((Image(x) & TakenFromSpace(x)) -> EarthCue(x))", "score": 0}
{"id": "eqasc_validation_1240", "prediction": "all x y.((Satellite(x) & Earth(y)) -> TakeImage(x,y))", "score": 0}
{"id": "eqasc_validation_1240", "prediction": "all x y z.(Satellite(x) -> (TakeImagesOf(x,y) & Earth(y)))", "score": 0}
{"id": "eqasc_validation_1240", "prediction": "all x y.((Satellite(x) & Earth(y)) -> TakesImagesOf(x,y))", "score": 0}
{"id": "eqasc_validation_1240", "prediction": "all x y z.((Satellite(x) & Earth(y) & Satellite(z)) -> TakesImagesOf(x,y,z))", "score": 0}
{"id": "eqasc_validation_1240", "prediction": "all x y.((Satellite(x) & Earth(y)) -> TakeImagesOf(x,y))", "score": 0}
{"id": "eqasc_validation_1240", "prediction": "all x.(Satellite(x) -> (TakeImagesOfEarth(x) & TakeImagesOfEarth(x)))", "score": 0}
{"id": "eqasc_validation_1240", "prediction": "all x y.((Satellite(x) & Earth(y)) -> TakesImage(x,y))", "score": 0}
{"id": "eqasc_validation_1240", "prediction": "all x.(Satellite(x) -> TakesImagesOfEarth(x,Earth,Earth))", "score": 0}
{"id": "eqasc_validation_1240", "prediction": "all x y z.((Satellite(x) & Earth(y) & Satellite(z)) -> TakesImage(x,y,z))", "score": 0}
{"id": "eqasc_validation_1240", "prediction": "all x.(Satellite(x) -> TakeImagesOfEarth(x))", "score": 0}
{"id": "eqasc_validation_1240", "prediction": "all x y z.((Satellite(x) & Earth(y) & Image(z)) -> Takes(x,y,z))", "score": 0}
{"id": "eqasc_validation_1240", "prediction": "all x.(Satellite(x) -> TakesImagesOfEarth(x))", "score": 0}
{"id": "eqasc_validation_1240", "prediction": "all x y z.((Satellite(x) & Earth(y) & Satellite(z)) -> TakesEarthImages(x,z))", "score": 0}
{"id": "eqasc_validation_1241", "prediction": "all x y.((SatelliteImagery(x) & OzoneHole(y)) -> GivesGlobalPerspective(x,y))", "score": 0}
{"id": "eqasc_validation_1241", "prediction": "all x y.((SatelliteImagery(x) & OzoneHole(y)) -> GlobalPerspective(x,y))", "score": 0}
{"id": "eqasc_validation_1241", "prediction": "all x.(SatelliteImagery(x) -> GlobalPerspectiveOnOzoneHole(x))", "score": 0}
{"id": "eqasc_validation_1241", "prediction": "(GlobalPerspectiveOnOzoneHole(insertion) -> SatelliteImagery(satellite))", "score": 0}
{"id": "eqasc_validation_1241", "prediction": "all x.(SatelliteImageryGivesGlobalPerspectiveOfOzoneHole(x) -> GlobalPerspectiveOfOzoneHole(x))", "score": 0}
{"id": "eqasc_validation_1241", "prediction": "all x y.((SatelliteImagery(x) & OzonHole(y)) -> GivesGlobalPerspective(x,y))", "score": 0}
{"id": "eqasc_validation_1241", "prediction": "all x.(SatelliteImaging(x) -> GlobalPerspectiveOnOzoneHole(x))", "score": 0}
{"id": "eqasc_validation_1241", "prediction": "all x y.((SatelliteImagery(x) & OzoneHole(y)) -> GivesGlobalPerspectiveOn(x,y))", "score": 0}
{"id": "eqasc_validation_1241", "prediction": "all x y.((SatelliteImagery(x) & OzonHole(y)) -> GlobalPerspective(x,y))", "score": 0}
{"id": "eqasc_validation_1242", "prediction": "all x.((ImagesFromSpace(x) & OzoneHole(x)) -> UsedToStudy(x))", "score": 0}
{"id": "eqasc_validation_1242", "prediction": "all x y z.((ImagesFromSpace(x) & OzoneHole(y) & OzoneHole(z)) -> UsedToStudy(x,y,z))", "score": 0}
{"id": "eqasc_validation_1242", "prediction": "all x y.((SpaceImage(x) & OzonHole(b)) -> UsedToStudy(x,y))", "score": 0}
{"id": "eqasc_validation_1242", "prediction": "all x.((Image(x) & FromSpace(x)) -> UsedToStudiesOzoneHole(x))", "score": 0}
{"id": "eqasc_validation_1242", "prediction": "all x y z.((Image(x) & Space(y) & OzoneHole(z)) -> UsedToStudyOzone(x,y,z))", "score": 0}
{"id": "eqasc_validation_1242", "prediction": "all x y.((Image(x) & OzoneHole(y)) -> UsedToStudy(x,y))", "score": 0}
{"id": "eqasc_validation_1242", "prediction": "all x y.((ImagesFromSpace(x) & OzoneHole(y)) -> UsedToStudy(x,y))", "score": 0}
{"id": "eqasc_validation_1242", "prediction": "all x y.((SpaceImage(x) & OzoneHole(y)) -> UsedToStudyOzoneHole(x,y))", "score": 0}
{"id": "eqasc_validation_1242", "prediction": "all x.((ImagesFromSpace(x) & OzoneHole(y)) -> UsedToStudy(x,y))", "score": 0}
{"id": "eqasc_validation_1242", "prediction": "all x y z.((Image(x) & Space(y) & OzoneHole(z)) -> UsedToStudy(x,y,z))", "score": 0}
{"id": "eqasc_validation_1242", "prediction": "all x y.((SpaceImage(x) & OilHole(y)) -> UsedToStudyOzoneHalf(x,y))", "score": 0}
{"id": "eqasc_validation_1242", "prediction": "all x y.((SpaceImage(x) & OzoneHole(y)) -> UsedToStudy(x,y))", "score": 0}
{"id": "eqasc_validation_1242", "prediction": "all x y z.((SpaceImage(x) & OzoneHole(y) & OzoneHole(z)) -> Study(x,y,z))", "score": 0}
{"id": "eqasc_validation_1242", "prediction": "all x y z.((Image(x) & Space(y) & OzoneHole(z)) -> StudyOzone(x,y,z))", "score": 0}
{"id": "eqasc_validation_1243", "prediction": "all x.(Photo(x) -> DigitalImage(x))", "score": 0}
{"id": "eqasc_validation_1244", "prediction": "all x y.((Satellite(x) & Photo(y)) -> UsedToTakeFromSpace(x,y))", "score": 0}
{"id": "eqasc_validation_1244", "prediction": "all x y z.((Satellite(x) & Space(y) & Photo(z)) -> TakesFrom(x,y,z))", "score": 0}
{"id": "eqasc_validation_1244", "prediction": "all x y.((Satellite(x) & Space(y) & TakesPhotosFrom(x,y)) -> TakesPhotosFrom(x,y))", "score": 0}
{"id": "eqasc_validation_1244", "prediction": "all x y.((Satellite(x) & Space(y)) -> UsedToTakePhotosFrom(x,y))", "score": 0}
{"id": "eqasc_validation_1244", "prediction": "all x.(Satellite(x) -> TakesPhotosFromSpaceAndSpace(x))", "score": 0}
{"id": "eqasc_validation_1244", "prediction": "all x.(Satellite(x) -> UsedToTakePhotosFromSpace(x))", "score": 0}
{"id": "eqasc_validation_1244", "prediction": "all x.(Satellite(x) -> TakePhotosFromSpace(x))", "score": 0}
{"id": "eqasc_validation_1244", "prediction": "all x.(Satellite(x) -> TakesPhotosFromSeason(x))", "score": 0}
{"id": "eqasc_validation_1244", "prediction": "all x y z.((Satellite(x) & PhotosFromSpace(y) & Photo(z)) -> UsedToTakeFromSpace(x,y))", "score": 0}
{"id": "eqasc_validation_1244", "prediction": "all x.(Satellite(x) -> (TakesPhotosFromSpace(x) & FromSpace(x)))", "score": 0}
{"id": "eqasc_validation_1244", "prediction": "all x.(Satellite(x) -> (TakePhotosFromSpace(x) & TakePhotosFromSpace(x) & TakePhotosFromSpace(x)))", "score": 0}
{"id": "eqasc_validation_1244", "prediction": "all x y.((Satellite(x) & Photo(y)) -> TakeFromSpacePhotos(x,y))", "score": 0}
{"id": "eqasc_validation_1244", "prediction": "all x y.((Satellite(x) & Space(y)) -> TakePhotosFrom(x,y))", "score": 0}
{"id": "eqasc_validation_1244", "prediction": "all x.(Satellite(x) -> (UsedToTakePhotosFromSpace(x) & TakeSatelliteFromSpace(x)))", "score": 0}
{"id": "eqasc_validation_1245", "prediction": "all x y.((Satellite(x) & Earth(y) & TakesPictures(x,y)) -> TakesFromSpace(x,y))", "score": 0}
{"id": "eqasc_validation_1245", "prediction": "all x.(Satellite(x) -> (TakesPicturesOfEarthFromSpace(x) & FromSpace(x)))", "score": 0}
{"id": "eqasc_validation_1245", "prediction": "all x y z.((Satellite(x) & EarthFromSpace(y) & Satellite(z)) -> TakesPicturesFromSpace(x,z))", "score": 0}
{"id": "eqasc_validation_1245", "prediction": "all x y.((Satellite(x) & Earth(y)) -> TakesPicturesFromSpace(x,y))", "score": 0}
{"id": "eqasc_validation_1245", "prediction": "all x y.((Satellite(x) & Earth(y)) -> TakesPhotographsFromSpace(x,y))", "score": 0}
{"id": "eqasc_validation_1245", "prediction": "all x.(Satellite(x) -> (UsedToTakePicturesOfEarth(x) & FromSpace(x)))", "score": 0}
{"id": "eqasc_validation_1245", "prediction": "all x y.((Satellite(x) & Earth(y)) -> TakesPhotosFromSpace(x,y))", "score": 0}
{"id": "eqasc_validation_1245", "prediction": "all x y z.((Satellite(x) & Earth(y) & Space(z)) -> TakesPictures(x,y))", "score": 0}
{"id": "eqasc_validation_1245", "prediction": "all x y z.((Satellite(x) & Earth(y) & Space(z)) -> (TakesPictures(x,y,z) & From(x,y,z)))", "score": 0}
{"id": "eqasc_validation_1245", "prediction": "all x y z.((Satellite(x) & Earth(y) & Space(z)) -> (TakesPicturesFromSpace(x,y,z) & TakesPicturesFromSpace(x,y)))", "score": 0}
{"id": "eqasc_validation_1245", "prediction": "all x.(Satellite(x) -> TakesPictures(x,Earth))", "score": 0}
{"id": "eqasc_validation_1245", "prediction": "all x y z.((Satellite(x) & Earth(y) & Space(z)) -> TakesPicturesFrom(x,y,z))", "score": 0}
{"id": "eqasc_validation_1245", "prediction": "all x y z w.((Satellite(x) & Satellite(y) & Earth(z) & TakesPhotosFromSpace(x,y,z)) -> TakesPhotosFromSpace(x,y))", "score": 0}
{"id": "eqasc_validation_1245", "prediction": "all x y.((Satellite(x) & Earth(y)) -> (TakesPicturesFromSpace(x,y) & FromSpace(x,y)))", "score": 0}
{"id": "eqasc_validation_1246", "prediction": "all x y z.((Meteorologist(x) & WeatherImage(y) & Space(z)) -> ReliesOn(x,y,z))", "score": 0}
{"id": "eqasc_validation_1246", "prediction": "all x.(Meteorologist(x) -> ReddensOnWeatherImages(x,Space))", "score": 0}
{"id": "eqasc_validation_1246", "prediction": "all x y.((Meteorologist(x) & WeatherImage(y)) -> ReliesOnFromSpace(x,y))", "score": 0}
{"id": "eqasc_validation_1246", "prediction": "all x.(Meteorologist(x) -> ReliesOnWeatherImagesFromSpace(x))", "score": 0}
{"id": "eqasc_validation_1246", "prediction": "all x y.((Meteorologist(x) & WeatherImage(y) & Space(y)) -> ReliesOn(x,y))", "score": 0}
{"id": "eqasc_validation_1246", "prediction": "all x.(Meteorologist(x) -> ReliesOnSpaceWeatherImages(x))", "score": 0}
{"id": "eqasc_validation_1246", "prediction": "all x y.((Meteorologist(x) & WeatherImage(y)) -> ReliesOn(x,y))", "score": 0}
{"id": "eqasc_validation_1246", "prediction": "all x y.((Meteorologist(x) & WeatherImages(y)) -> ReliesOn(x,y))", "score": 0}
{"id": "eqasc_validation_1246", "prediction": "all x y.((Meteorologist(x) & Space(y)) -> ReliesOnWeatherImages(x,y))", "score": 0}
{"id": "eqasc_validation_1246", "prediction": "all x y.((Meteorologist(x) & WeatherImage(y) & Space(z)) -> ReliesOn(x,y,z))", "score": 0}
{"id": "eqasc_validation_1247", "prediction": "all x.(Meteorologist(x) -> RelySatellitesForData(x))", "score": 0}
{"id": "eqasc_validation_1247", "prediction": "all x y.((Meteorologist(x) & Satellite(y)) -> ReliesOn(x,y))", "score": 0}
{"id": "eqasc_validation_1247", "prediction": "all x.(Meteorologist(x) -> ReliesOnSatellitesForData(x))", "score": 0}
{"id": "eqasc_validation_1247", "prediction": "all x y.((Meteorologist(x) & Satellite(y)) -> ReliesOnForData(x,y))", "score": 0}
{"id": "eqasc_validation_1247", "prediction": "all x y.((Meteorologist(x) & Satellite(y)) -> ReliesOnData(x,y))", "score": 0}
{"id": "eqasc_validation_1247", "prediction": "all x.(Meteorologist(x) -> ReliesOnSatellite(x))", "score": 0}
{"id": "eqasc_validation_1247", "prediction": "all x y z.((Meteorologist(x) & Satellite(y) & Data(z)) -> ReliesOn(x,y))", "score": 0}
{"id": "eqasc_validation_1248", "prediction": "all x.(SatelliteImage(x) -> DigitalPhotograph(x))", "score": 0}
{"id": "eqasc_validation_1248", "prediction": "all x y.((SatelliteImage(x) & Photograph(y)) -> Digital(x,y))", "score": 0}
{"id": "eqasc_validation_1248", "prediction": "all x.(SatelliteImage(x) -> DigitalPhotography(x))", "score": 0}
{"id": "eqasc_validation_1249", "prediction": "all x.(Satellite(x) -> TakeDigitalPhotographsFromSpace(x))", "score": 0}
{"id": "eqasc_validation_1249", "prediction": "all x.(Satellite(x) -> TakesDigitalPhotographs(x))", "score": 0}
{"id": "eqasc_validation_1249", "prediction": "all x.(Satellite(x) -> TakesDigitalPhotographsFromSpace(x))", "score": 0}
{"id": "eqasc_validation_1249", "prediction": "all x y z.((Satellite(x) & Photograph(y) & Space(z)) -> TakesFrom(x,y,z))", "score": 0}
{"id": "eqasc_validation_1249", "prediction": "all x y.((Satellite(x) & DigitalPhotograph(y)) -> TakesFromSpace(x,y))", "score": 0}
{"id": "eqasc_validation_1249", "prediction": "all x y.((Satellite(x) & Space(y)) -> TakesDigitalPhotographs(x,y))", "score": 0}
{"id": "eqasc_validation_1249", "prediction": "all x y.((Satellite(x) & DigitalPhotograph(y)) -> UsedToTake(x,y))", "score": 0}
{"id": "eqasc_validation_1249", "prediction": "all x.(Satellite(x) -> UsedToTakeDigitalPhotographsFromSpace(x))", "score": 0}
{"id": "eqasc_validation_1249", "prediction": "all x y z.((Satellite(x) & DigitalPhotographic(y) & Space(z)) -> TakeFrom(x,y,z))", "score": 0}
{"id": "eqasc_validation_1250", "prediction": "all x y.((Seatbelt(x) & Passenger(y)) -> UsedForPreventingInjuriesInCar(x,y))", "score": 0}
{"id": "eqasc_validation_1250", "prediction": "all x y z.((SeatBelt(x) & PassengerInCar(y) & (InCar(z) | InCar(z))) -> PreventsInjuries(x,y,z))", "score": 0}
{"id": "eqasc_validation_1250", "prediction": "all x.(SeatBelt(x) -> UsedForPreventingInjuriesToPassengersInCars(x))", "score": 0}
{"id": "eqasc_validation_1250", "prediction": "all x y.((Seat(x) & Car(y)) -> PreventsInjuriesToPassengers(x,y))", "score": 0}
{"id": "eqasc_validation_1250", "prediction": "all x y z.((SeatBerg(x) & Passenger(y) & Car(z)) -> PreventsInjury(x,y,z))", "score": 0}
{"id": "eqasc_validation_1250", "prediction": "all x y.((SeatBelt(x) & Passenger(y)) -> (UsedForInjuryPrevention(x,y) & UsedForInjuryInCar(x,y)))", "score": 0}
{"id": "eqasc_validation_1250", "prediction": "all x.(SeatBear(x) -> PreventsStrikes(x,passenger))", "score": 0}
{"id": "eqasc_validation_1250", "prediction": "all x.(SeatBelts(x) -> PreventsInjuriesForPassengersInCars(x))", "score": 0}
{"id": "eqasc_validation_1250", "prediction": "all x y z.((Seatbelt(x) & Passenger(y) & Car(z) & InCar(t)) -> (UsedForPreventingInjuries(x,y) & ProtectedFromInjuriesInCars(x,z)))", "score": 0}
{"id": "eqasc_validation_1250", "prediction": "all x.(SeatBelt(x) -> PreventsInjuriesToPassengers(x))", "score": 0}
{"id": "eqasc_validation_1250", "prediction": "all x y z.((SeatBelt(x) & Passenger(y) & Car(z)) -> PreventsInjuriesTo(y,z))", "score": 0}
{"id": "eqasc_validation_1250", "prediction": "all x y.((SeatBelt(x) & Car(y)) -> (PreventsInjuries(x,y) & PassengerInjuries(x,y)))", "score": 0}
{"id": "eqasc_validation_1250", "prediction": "all x y.((Seatbelt(x) & Car(y)) -> UsedForInjuries(x,y))", "score": 0}
{"id": "eqasc_validation_1250", "prediction": "all x y.((SeatBelt(x) & Car(y)) -> (PreventsInjuries(x,y) & SeatbeltsInCar(y)))", "score": 0}
{"id": "eqasc_validation_1250", "prediction": "all x.(SeatBergs(x) -> UsedToProtectInjuries(x))", "score": 0}
{"id": "eqasc_validation_1250", "prediction": "all x y z.((SeatBelt(x) & Passenger(y) & Car(z)) -> UsedForPreventingInjuriesTo(x,y,z))", "score": 0}
{"id": "eqasc_validation_1251", "prediction": "all x.(Child(x) -> Passenger(x))", "score": 0}
{"id": "eqasc_validation_1251", "prediction": "(All x.(Child(x) -> Passenger(x))", "score": -1}
{"id": "eqasc_validation_1252", "prediction": "all x.(Seatbelt(x) -> PreventsInjuriesToChildren(x))", "score": 0}
{"id": "eqasc_validation_1252", "prediction": "all x y.((SeatBear(x) & Child(y)) -> PreventsInjuries(x,y))", "score": 0}
{"id": "eqasc_validation_1252", "prediction": "all x y z w.((SeatBelt(x) & Child(y) & Injuries(z,y) & Child(w), & Injuries(w,x and Child(z)) -> Prevent(x,y,z,w))", "score": -1}
{"id": "eqasc_validation_1252", "prediction": "all x y.((SeatBelt(x) & Child(y)) -> PreventsInjuries(x,y))", "score": 0}
{"id": "eqasc_validation_1252", "prediction": "all x y.((SeatBear(x) & Child(y)) -> PreventsInjuriesTo(x,y))", "score": 0}
{"id": "eqasc_validation_1252", "prediction": "all x.(SeatBlade(x) -> PreventsInjuriesToChildren(x))", "score": 0}
{"id": "eqasc_validation_1252", "prediction": "all x.(SeatBelt(x) -> PreventsInjuriesToChildren(x))", "score": 0}
{"id": "eqasc_validation_1252", "prediction": "all x y z.((SeatGuard(x) & Child(y) & Child(z)) -> PreventInjuries(x,y,z))", "score": 0}
{"id": "eqasc_validation_1252", "prediction": "all x y.((SeatBeat(x) & Child(y)) -> (PreventsInjures(x,y) & Child(y)))", "score": 0}
{"id": "eqasc_validation_1252", "prediction": "all x.((SeatBear(x) & ChildrenSeat(x)) -> -PreventsDeathBatteries(x))", "score": 0}
{"id": "eqasc_validation_1252", "prediction": "all x y.((Seatbelt(x) & Child(y) & UsedToPreventInjuries(x,y)) -> PreventsInjuriesTo(x,y))", "score": 0}
{"id": "eqasc_validation_1252", "prediction": "all x y.((Seatbelt(x) & Children(y)) -> PreventsInjuries(x,y))", "score": 0}
{"id": "eqasc_validation_1252", "prediction": "all x y.((SeatBelt(x) & Child(y)) -> PreventsInjuriesTo(x,y))", "score": 0}
{"id": "eqasc_validation_1253", "prediction": "all x y z.((Seatbelt(x) & Person(y) & Life(z)) -> Saves(x,y,z))", "score": 0}
{"id": "eqasc_validation_1253", "prediction": "all x.(Seatbelt(x) -> SavesLives(x))", "score": 0}
{"id": "eqasc_validation_1253", "prediction": "all x y.((SeatBelt(x) & Life(y)) -> Saves(x,y))", "score": 0}
{"id": "eqasc_validation_1253", "prediction": "all x.(SeatBelt(x) -> SavesLives(x))", "score": 0}
{"id": "eqasc_validation_1253", "prediction": "all x y.((Seatbelt(x) & Life(y)) -> Saves(x,y))", "score": 0}
{"id": "eqasc_validation_1253", "prediction": "all x.(SeatBlade(x) -> SavesLives(x))", "score": 0}
{"id": "eqasc_validation_1253", "prediction": "all x.(SeatBelt(x) -> SavesLife(x))", "score": 0}
{"id": "eqasc_validation_1253", "prediction": "all x.(SeatBelt(x) -> SavesLifes(x))", "score": 0}
{"id": "eqasc_validation_1253", "prediction": "all x.(SeatGear(x) -> SavesLife(x))", "score": 0}
{"id": "eqasc_validation_1254", "prediction": "all x.(PreventsInjuriesInCars(x) -> SavesLives(x))", "score": 0}
{"id": "eqasc_validation_1254", "prediction": "all x y.((Car(x) & Passenger(y) & PreventsInjuries(x,y)) -> SavesLives(x))", "score": 0}
{"id": "eqasc_validation_1254", "prediction": "all x y.((Car(x) & Passenger(y)) -> InjuriesPreventSavesLives(x,y))", "score": 0}
{"id": "eqasc_validation_1254", "prediction": "all x y.((Car(x) & Passenger(y) & PreventsInjuries(x,y)) -> SavesLife(x))", "score": 0}
{"id": "eqasc_validation_1254", "prediction": "all x y.((Past(x) & Passenger(y) & InCar(x,y)) -> SavesLifes(x,y))", "score": 0}
{"id": "eqasc_validation_1254", "prediction": "all x y.((Car(x) & Passenger(y)) -> SavesLifes(x,y))", "score": 0}
{"id": "eqasc_validation_1254", "prediction": "all x y.((Passenger(x) & Passenger(y) & Car(y)) -> PreventsInjuries(x,y))", "score": 0}
{"id": "eqasc_validation_1254", "prediction": "all x.((PorningInjuries(x) & PassengerInCars(x)) -> SavesLives(x))", "score": 0}
{"id": "eqasc_validation_1254", "prediction": "all x.((PediableInjury(x) & Passenger(x) & Car(x)) -> SavesLives(x))", "score": 0}
{"id": "eqasc_validation_1254", "prediction": "all x y z.((Car(x) & Passenger(y) & Car(z) & PreventsInjuries(x,y)) -> SavesLives(x))", "score": 0}
{"id": "eqasc_validation_1254", "prediction": "all x y z.((PencilInjury(x) & Passenger(y) & Car(z) & Praises(x,y,z)) -> SavesLives(x,y))", "score": 0}
{"id": "eqasc_validation_1254", "prediction": "all x.((Car(x) & PreventsInjuries(x,y)) -> SavesLifes(x))", "score": 0}
{"id": "eqasc_validation_1254", "prediction": "all x y z.((Driving(x) & Passenger(y) & Car(z) & PreventsInjuries(x,y,z)) -> SavesLives(y,z))", "score": 0}
{"id": "eqasc_validation_1254", "prediction": "all x y.((Passenger(x) & Car(y) & PreventInjuries(x,y)) -> SaveLife(x,y))", "score": 0}
{"id": "eqasc_validation_1254", "prediction": "all x.(PreventsInjuriesToPassengers(x) -> SavesLives(x))", "score": 0}
{"id": "eqasc_validation_1255", "prediction": "all x.(CarAccident(x) -> LeadsToDeath(x))", "score": 0}
{"id": "eqasc_validation_1255", "prediction": "all x.(CarAccident(x) -> LeadingCauseOfDeathForChildren(x))", "score": 0}
{"id": "eqasc_validation_1255", "prediction": "all x y.((CarAccident(x) & Child(y)) -> LeadingCauseOfDeath(x,y))", "score": 0}
{"id": "eqasc_validation_1255", "prediction": "all x.(CarAccident(x) -> LeadCauseOfDeathForChildren(x))", "score": 0}
{"id": "eqasc_validation_1255", "prediction": "all x.(CarAccident(x) -> (LivingCauseOfDeath(x) & ForChildren(x)))", "score": 0}
{"id": "eqasc_validation_1255", "prediction": "all x.(CarAccident(x) -> LeadsCauseOfDeath(x))", "score": 0}
{"id": "eqasc_validation_1255", "prediction": "all x y.((CarAccident(x) & Child(y)) -> LeadCauseOfDeath(x,y))", "score": 0}
{"id": "eqasc_validation_1255", "prediction": "all x y z.((CarAccident(x) & Child(y) & Child(z)) -> LeadingCauseOfTod(x,y,z))", "score": 0}
{"id": "eqasc_validation_1255", "prediction": "all x.(CarAccident(x) -> LeadCauseOfDeath(x))", "score": 0}
{"id": "eqasc_validation_1255", "prediction": "all x.(CarAccident(x) -> LessFavoriteOfDeath(x,child))", "score": 0}
{"id": "eqasc_validation_1255", "prediction": "all x y.((CarAttack(x) & Child(y)) -> LeadingCauseOfDeath(x,y))", "score": 0}
{"id": "eqasc_validation_1255", "prediction": "all x y.((CarAccident(x) & Child(y)) -> LeadsCauseOfDeath(x,y))", "score": 0}
{"id": "eqasc_validation_1256", "prediction": "all x.(SeatBang(x) -> Insulate(x,y))", "score": 0}
{"id": "eqasc_validation_1256", "prediction": "all x.(SeatGarment(x) -> HelpsPreventDisaster(x))", "score": 0}
{"id": "eqasc_validation_1256", "prediction": "all x.(SeatBelt(x) -> CanPreventDeath(x))", "score": 0}
{"id": "eqasc_validation_1256", "prediction": "all x.(SeatBelt(x) -> CanHelpPreventDeath(x))", "score": 0}
{"id": "eqasc_validation_1256", "prediction": "all x y.((Seatbelt(x) & Seat(y)) -> PreventsDeath(x,y))", "score": 0}
{"id": "eqasc_validation_1256", "prediction": "all x.(SeatBelt(x) -> CanPreventDisaster(x))", "score": 0}
{"id": "eqasc_validation_1256", "prediction": "all x y.((SeatBelt(x) & SeatGear(y)) -> HelpsPreventDamage(x,y))", "score": 0}
{"id": "eqasc_validation_1256", "prediction": "all x.(SeatBelt(x) -> InvestInHelpingPreventDeath(x))", "score": 0}
{"id": "eqasc_validation_1256", "prediction": "all x.(SeatBelt(x) -> PreventsDeath(x))", "score": 0}
{"id": "eqasc_validation_1256", "prediction": "all x.(SeatBelt(x) -> (HelpsPreventDeath(x) | HelpsPreventDeath(x)))", "score": 0}
{"id": "eqasc_validation_1256", "prediction": "all x.(SeatBelt(x) -> CanHelpPrevent(x,death))", "score": 0}
{"id": "eqasc_validation_1256", "prediction": "all x.(SeatBelt(x) -> UsesToPreventDeath(x))", "score": 0}
{"id": "eqasc_validation_1256", "prediction": "all x y.((SeatBelt(x) & Seat(y)) -> HelpsPreventDisaster(x,y))", "score": 0}
{"id": "eqasc_validation_1257", "prediction": "all x y.((CrashInjuries(x) & UnbeltedPassenger(y) & Colliding(y,x)) -> CaughtInCar(y,x))", "score": 0}
{"id": "eqasc_validation_1257", "prediction": "all x y z.((Injured(x) & Car(y) & UnbeltedPassenger(z) & CollidingWith(z,y)) -> Allergy(x))", "score": 0}
{"id": "eqasc_validation_1257", "prediction": "all x y z.(((Crash(x) & UnbeltedPassenger(y) & Car(z)) -> Colliding(y,z))", "score": -1}
{"id": "eqasc_validation_1257", "prediction": "all x y.((Crash(x) & UnbeltedPassenger(y)) -> Collide(y,x))", "score": 0}
{"id": "eqasc_validation_1257", "prediction": "all x y z.((Incident(x) & Car(y) & UnbeltedPassenger(z)) -> Collision(x,z))", "score": 0}
{"id": "eqasc_validation_1257", "prediction": "all x y.((Crash(x) & UnbeltedPassenger(y) & Car(y) & Collides(y,x)) -> ManyInjuries(x))", "score": 0}
{"id": "eqasc_validation_1257", "prediction": "all x y.((Crash(x) & Car(y) & UnbeltedPassenger(y,x)) -> CollidingWithPerson(y,x))", "score": 0}
{"id": "eqasc_validation_1257", "prediction": "all x y.((Junk(x) & UnbeltedPassenger(y) & CollidingWithCar(y)) -> ManyInjuriesInCrash(x,y))", "score": 0}
{"id": "eqasc_validation_1257", "prediction": "all x.((Incident(x) & UnbeltedPassengers(x) & Colliding(x)) -> MostInCrash(x))", "score": 0}
{"id": "eqasc_validation_1257", "prediction": "Often, injuries are caused by unbeltedpassengers colliding in vehicle.", "score": -1}
{"id": "eqasc_validation_1257", "prediction": "all x y z.((Crash(x) & UnbeltedPassenger(y) & Car(z) & Collider(y,z)) -> Caught(y,z))", "score": 0}
{"id": "eqasc_validation_1257", "prediction": "all x y.((Crash(x) & InCrash(y)) -> (UnbeltedPassenger(x,y) & Colliding(y,x)))", "score": 0}
{"id": "eqasc_validation_1257", "prediction": "all x y.((Crash(x) & UnbeltedPassenger(y) & DrivesInCar(y,x)) -> Colliding(y,x))", "score": 0}
{"id": "eqasc_validation_1257", "prediction": "exists x.(Injuries(x) & UnbeltedPassenger(x) & CollidingCollision(x))", "score": 0}
{"id": "eqasc_validation_1257", "prediction": "all x y z.((Crash(x) & UnbeltedPassenger(y) & Car(z) & Car(z)) -> Colliding(y,z))", "score": 0}
{"id": "eqasc_validation_1257", "prediction": "all x y.((Crash(x) & -BebeltedPassenger(y)) -> CollidingWithCar(y,x))", "score": 0}
{"id": "eqasc_validation_1258", "prediction": "all x y z.((SeatBlade(x) & Carcrash(y) & Passenger(z)) -> (AvoidsInjuries(x,y) & InCrash(x,z)))", "score": 0}
{"id": "eqasc_validation_1258", "prediction": "all x y z.((SeatBelt(x) & Carcage(y) & Passenger(z)) -> UsedFor(x,y,z))", "score": 0}
{"id": "eqasc_validation_1258", "prediction": "all x y.((SeatBang(x) & Passenger(y)) -> ((UsedForSecurityIncidents(x,y) & AvoidsCrashes(z)) & InCrashes(x,y))))", "score": -1}
{"id": "eqasc_validation_1258", "prediction": "all x y z.((SeatBlade(x) & Carcylic(y) & Passenger(z)) -> ReducesInjuriesSeatbelts(x,y,z))", "score": 0}
{"id": "eqasc_validation_1258", "prediction": "all x y.((Seatbelt(x) & Passenger(y)) -> UsedForEvit-Injuries(x,y))", "score": -1}
{"id": "eqasc_validation_1258", "prediction": "all x y.((SeatBelt(x) & Carcass(y)) -> (UsedFor(x,y) & AvoidsInjuriesInCrimes(x)))", "score": 0}
{"id": "eqasc_validation_1258", "prediction": "all x y z.((SeatBelt(x) & Car crash(y) & Passenger(z)) -> (UsedFor(x,y) & AvoidsInjuries(x,y,z)))", "score": -1}
{"id": "eqasc_validation_1258", "prediction": "all x y z.((SeatBelt(x) & Passenger(y) & Crash(z)) -> UsedForEvitingInjuries(x,y,z))", "score": 0}
{"id": "eqasc_validation_1258", "prediction": "all x y.((SeatBlade(x) & Passenger(y)) -> AvoidsInjuries(x,y))", "score": 0}
{"id": "eqasc_validation_1258", "prediction": "all x y z.((SeatBelt(x) & Passenger(y) & Crash(z)) -> (NeverInjuredIn(x,y,z) | NeverInjuredIn(y,z)))", "score": 0}
{"id": "eqasc_validation_1258", "prediction": "all x y z.((SeatBelt(x) & InCrashes(y) & Passenger(z)) -> (UsedFor(x,y) & AvoidsInjuries(x,z)))", "score": 0}
{"id": "eqasc_validation_1258", "prediction": "all x y.((Seatbelt(x) & Passenger(y)) -> AvoidsInjuriesInCrashes(x,y))", "score": 0}
{"id": "eqasc_validation_1258", "prediction": "all x y.((SeatBelt(x) & Passenger(y)) -> (UsedForVisuingInjuries(x,y) & AvoidsCrash(x,y)))", "score": 0}
{"id": "eqasc_validation_1258", "prediction": "all x y.((SeatBelt(x) & Passenger(y)) -> (AvoidsInjuries(x) & InCrashes(x,y)))", "score": 0}
{"id": "eqasc_validation_1258", "prediction": "all x.(SeatBeat(x) -> (UsedForHasIllness(x) & AvoidsCrashes(x)))", "score": 0}
{"id": "eqasc_validation_1258", "prediction": "all x.(SeatBlade(x) -> (UsedForVoices(x) & AvoidsIllnessesInCrash(x) & Passenger(x)))", "score": 0}
{"id": "eqasc_validation_1259", "prediction": "all x.(Helmet(x) -> PreventsInjuriesAndDeath(x))", "score": 0}
{"id": "eqasc_validation_1259", "prediction": "all x.(Helmet(x) -> (PreventsInjuries(x) & PreventsDeath(x)))", "score": 0}
{"id": "eqasc_validation_1259", "prediction": "all x.(Helmet(x) -> (PreventsInjuries(x) & PreventsTotalDeath(x)))", "score": 0}
{"id": "eqasc_validation_1259", "prediction": "all x y.((Helmet(x) & Injury(y)) -> PreventsDeath(x,y))", "score": 0}
{"id": "eqasc_validation_1260", "prediction": "all x y.((SeatGear(x) & Helmet(y)) -> ProtectsPassengers(x,y))", "score": 0}
{"id": "eqasc_validation_1260", "prediction": "All x.((SeatBerge(x) | Helmet(x)) -> ProtectsPassengers(x))", "score": -1}
{"id": "eqasc_validation_1260", "prediction": "all x y z.((SeatBelt(x) & Helmet(y) & Passenger(z)) -> Protects(x,y,z))", "score": 0}
{"id": "eqasc_validation_1260", "prediction": "all x.((SeatBelt(x) | Helmet(x)) -> ProtectsPassengers(x))", "score": 0}
{"id": "eqasc_validation_1260", "prediction": "all x y.((Seat(x) & Seatbelt(y) & Helmet(y)) -> ProtectsPassengers(x,y))", "score": 0}
{"id": "eqasc_validation_1260", "prediction": "all x.((SeatBerg(x) & Helmet(x)) -> ProtectsPassengers(x))", "score": 0}
{"id": "eqasc_validation_1260", "prediction": "all x y.((SeatBelt(x) & Helmet(y)) -> ProtectsPassengers(x,y))", "score": 0}
{"id": "eqasc_validation_1260", "prediction": "all x.((Seat(x) & Seatbelt(x) & Helmet(x)) -> ProtectsPassengers(x))", "score": 0}
{"id": "eqasc_validation_1260", "prediction": "all x y z.((SeatBlade(x) & Headgear(y) & Passenger(z)) -> ProtectsFrom(x,y,z))", "score": 0}
{"id": "eqasc_validation_1260", "prediction": "all x y.((Seatbelt(x) & Helmet(y)) -> ProtectsPassengers(x,y))", "score": 0}
{"id": "eqasc_validation_1260", "prediction": "all x.(SeatBeltsAndHelmets(x) -> ProtectsPassengers(x))", "score": 0}
{"id": "eqasc_validation_1260", "prediction": "all x y z w.((SeatBelt(x) & Helmet(y) & Passenger(z) & SeatBelt(w)) -> Protects(x,z,w))", "score": 0}
{"id": "eqasc_validation_1260", "prediction": "all x y z.((Seatbelt(x) & Helmet(y) & Passenger(z)) -> (Encrypts(x,y) & Protects(y,z)))", "score": 0}
{"id": "eqasc_validation_1260", "prediction": "all x.((Seatbelt(x) | Helmet(x)) -> ProtectsPassengers(x))", "score": 0}
{"id": "eqasc_validation_1261", "prediction": "all x.(InjuredByAccident(x) -> CausedBy(x,accident))", "score": 0}
{"id": "eqasc_validation_1261", "prediction": "all x y.((Injury(x) & Accident(y)) -> CausedBy(x,y))", "score": 0}
{"id": "eqasc_validation_1261", "prediction": "all x.(Injury(x) -> CausedByAccident(x))", "score": 0}
{"id": "eqasc_validation_1261", "prediction": "all x.(Illness(x) -> CausedByAccident(x))", "score": 0}
{"id": "eqasc_validation_1261", "prediction": "all x.(Injuries(x) -> CausedByAccident(x))", "score": 0}
{"id": "eqasc_validation_1261", "prediction": "all x.(Injured(x) -> CausedByAccident(x))", "score": 0}
{"id": "eqasc_validation_1262", "prediction": "all x.((SeatBelt(x) & Accident(x)) -> Important(x))", "score": 0}
{"id": "eqasc_validation_1262", "prediction": "all x y.((Seatbelt(x) & Accident(y)) -> Important(x,y))", "score": 0}
{"id": "eqasc_validation_1262", "prediction": "all x.(SeatBelt(x) -> ImportantInHazard(x))", "score": 0}
{"id": "eqasc_validation_1262", "prediction": "all x.((Seatbelt(x) & Accident(x)) -> Important(x))", "score": 0}
{"id": "eqasc_validation_1262", "prediction": "all x y z.((SeatBelt(x) & Accident(y) & Accident(z)) -> Important(x,y,z))", "score": 0}
{"id": "eqasc_validation_1262", "prediction": "all x.(StartsAcing(x) -> SeatBlades(x))", "score": 0}
{"id": "eqasc_validation_1262", "prediction": "all x.((SeatBelt(x) & Accident(x)) -> ImportantIn(x))", "score": 0}
{"id": "eqasc_validation_1262", "prediction": "all x y.((Seatbelt(x) & Accident(y)) -> ImportantFor(x,y))", "score": 0}
{"id": "eqasc_validation_1262", "prediction": "all x y.((Seatbelt(x) & Accident(y)) -> ImportantIn(x,y))", "score": 0}
{"id": "eqasc_validation_1262", "prediction": "all x.((Seatbelt(x) & Accident(y)) -> Important(x,y))", "score": 0}
{"id": "eqasc_validation_1263", "prediction": "all x y.((SeatBelt(x) & Carcyst(y)) -> ProvidesPrimaryProtection(x,y))", "score": 0}
{"id": "eqasc_validation_1263", "prediction": "all x.((SeatBbelt(x) & ForCrash(x)) -> ProvidesPrimaryProtection(x))", "score": 0}
{"id": "eqasc_validation_1263", "prediction": "all x y.((SeatBlade(x) & Crashes(y)) -> ProvidesPrimaryProtection(x,y))", "score": 0}
{"id": "eqasc_validation_1263", "prediction": "all x.(SeatBelt(x) -> ProvidePrimaryProtection(x))", "score": 0}
{"id": "eqasc_validation_1263", "prediction": "all x y z.((SeatBelt(x) & Crash(y) & Car(z)) -> ProvidesPrimaryProtection(x,y,z))", "score": 0}
{"id": "eqasc_validation_1263", "prediction": "all x.(SeatBeat(x) -> ProvidesPrimaryProtectionInCrashes(x))", "score": 0}
{"id": "eqasc_validation_1263", "prediction": "all x y.((SeatBelt(x) & Crash(y)) -> ProvidesPrimaryProtection(x,y))", "score": 0}
{"id": "eqasc_validation_1263", "prediction": "all x.((SeatBelt(x) & PrimaryProtection(x)) -> Provides(x,y))", "score": 0}
{"id": "eqasc_validation_1263", "prediction": "all x.(SeatBelt(x) -> ProvidesPrimaryProtection(x))", "score": 0}
{"id": "eqasc_validation_1263", "prediction": "all x.(SeatBlade(x) -> ProvidesPrimaryProtection(x))", "score": 0}
{"id": "eqasc_validation_1263", "prediction": "All x.(SeatBelt(x) -> ProvidesPrimaryProtectionInCrashes(x))", "score": -1}
{"id": "eqasc_validation_1264", "prediction": "all x y z.((CarCrash(x) & Passenger(y) & Car(z)) -> Injures(x,y))", "score": 0}
{"id": "eqasc_validation_1264", "prediction": "all x y z.(CarCrashes(x) -> (InjurePassengers(y) | InjurePassengers(z)))", "score": 0}
{"id": "eqasc_validation_1264", "prediction": "all x.(CarCollision(x) -> (InjurePassengers(x) & CanInjurePassengers(x)))", "score": 0}
{"id": "eqasc_validation_1264", "prediction": "all x y.((CarCrashes(x) & Passenger(y)) -> CanInjure(x,y))", "score": 0}
{"id": "eqasc_validation_1264", "prediction": "all x y.((CarCrashes(x) & Passenger(y)) -> Injures(x,y))", "score": 0}
{"id": "eqasc_validation_1264", "prediction": "all x y z.((CarCrashes(x) & Car(y) & Passenger(z)) -> CanInjure(x,y,z))", "score": 0}
{"id": "eqasc_validation_1264", "prediction": "all x.(CarCollision(x) -> CanInjurePassengers(x))", "score": 0}
{"id": "eqasc_validation_1264", "prediction": "all x y z.((CarCrashes(x) & Passenger(y) & Car(z) & Injects(x,y)) -> CanInjure(x,z))", "score": 0}
{"id": "eqasc_validation_1264", "prediction": "all x y.((CarCrashes(x) & Passenger(y)) -> Injure(x,y))", "score": 0}
{"id": "eqasc_validation_1264", "prediction": "all x y.((CarCrashes(x) & Passenger(y) & In CarCrashes(x,y)) -> Injures(x,y))", "score": -1}
{"id": "eqasc_validation_1264", "prediction": "all x.(CameraCrashes(x) -> CanInjurePassengers(x))", "score": 0}
{"id": "eqasc_validation_1264", "prediction": "all x.(CarCrashes(x) -> CanInjurePassengers(x))", "score": 0}
{"id": "eqasc_validation_1264", "prediction": "all x y z.((CarCollision(x) & Passenger(y) & Car(z)) -> (Injure(x,y,y) | Injure(x,y)))", "score": 0}
{"id": "eqasc_validation_1265", "prediction": "all x.(WhiplashInjuries(x) -> SoftTissueInjuries(x))", "score": 0}
{"id": "eqasc_validation_1265", "prediction": "all x.(Whiplash(x) -> SoftLegallyInjured(x))", "score": 0}
{"id": "eqasc_validation_1265", "prediction": "all x.(WhippedInjuries(x) -> SoftTissueInjuries(x))", "score": 0}
{"id": "eqasc_validation_1265", "prediction": "exists x.(Whiplash(x) & SoftTissueInjuries(x))", "score": 0}
{"id": "eqasc_validation_1265", "prediction": "all x.(WhiplashIllness(x) -> SoftTissueInjuries(x))", "score": 0}
{"id": "eqasc_validation_1265", "prediction": "all x.(WhraplashInjuries(x) -> SoftTissueInjuries(x))", "score": 0}
{"id": "eqasc_validation_1265", "prediction": "all x.(WhippedLayer(x) -> SoftTissue(x))", "score": 0}
{"id": "eqasc_validation_1265", "prediction": "all x.(Whiplash(x) -> SoftTissueInjuries(x))", "score": 0}
{"id": "eqasc_validation_1265", "prediction": "all x.(Whippedlash(x) -> SoftTissueInjuries(x))", "score": 0}
{"id": "eqasc_validation_1266", "prediction": "all x.(SeatBlade(x) -> PreventWheels(x))", "score": 0}
{"id": "eqasc_validation_1266", "prediction": "all x.(SeatBelt(x) -> PreventsWindowlash(x))", "score": 0}
{"id": "eqasc_validation_1266", "prediction": "all x.(SeatBelt(x) -> CanPreventWraplash(x))", "score": 0}
{"id": "eqasc_validation_1266", "prediction": "all x.(SeatBelt(x) -> PreventsChipslipLikelInCars(x))", "score": 0}
{"id": "eqasc_validation_1266", "prediction": "all x y.((SeatBelt(x) & Car(y)) -> PreventsCheeklash(x,y))", "score": 0}
{"id": "eqasc_validation_1266", "prediction": "all x.((SeatBelt(x) & Car(y)) -> CanPreventThuglash(x,y))", "score": 0}
{"id": "eqasc_validation_1266", "prediction": "all x y.((SeatBelt(x) & Car(y)) -> -PreventsChreeklash(x,y))", "score": 0}
{"id": "eqasc_validation_1266", "prediction": "all x.(SeatBelt(x) -> CanPreventChrisplash(x))", "score": 0}
{"id": "eqasc_validation_1266", "prediction": "all x y.((SeatBelt(x) & Automobile(y)) -> PreventsChurchlash(x,y))", "score": 0}
{"id": "eqasc_validation_1266", "prediction": "all x.(SeatBear(x) -> CanPrevent(x,whiplash,cars))", "score": 0}
{"id": "eqasc_validation_1266", "prediction": "all x y.((SeatBlade(x) & Car(y)) -> PreventsChrisplash(x,y))", "score": 0}
{"id": "eqasc_validation_1266", "prediction": "all x y z.((SeatBlade(x) & Car(y) & Vehicle(z)) -> CanPrevent(x,y,z))", "score": 0}
{"id": "eqasc_validation_1266", "prediction": "all x.((SeatBelt(x) & Car(y)) -> PreventsWhisklash(x,y))", "score": 0}
{"id": "eqasc_validation_1266", "prediction": "all x.(SeatBelt(x) -> CanPreventWheatlash(x))", "score": 0}
{"id": "eqasc_validation_1266", "prediction": "all x.(SeatBelt(x) -> PreventsWhiplashInCars(x))", "score": 0}
{"id": "eqasc_validation_1267", "prediction": "all x y z.((SeatBelt(x) & Passenger(y) & Vehicle(z) & User(x)) -> PreventsInjury(x,y,z))", "score": 0}
{"id": "eqasc_validation_1267", "prediction": "all x y.((SeatBelt(x) & Vehicle(y) & PreventsInjuries(x,y)) -> Seatbelts(x))", "score": 0}
{"id": "eqasc_validation_1267", "prediction": "all x.(SeatBelt(x) -> (PreventsInjuries(x) & ForPassengers(x) & InVehicles(x)))", "score": 0}
{"id": "eqasc_validation_1267", "prediction": "all x y z.((SeatBelt(x) & Passenger(y) & Vehicle(z)) -> PreventsInjuriesTo(x,y,z))", "score": 0}
{"id": "eqasc_validation_1267", "prediction": "all x y z.((Seatbelts(x) & Driver(y) & Vehicle(z)) -> ProvidesInjuriesIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_1267", "prediction": "all x.(SeatBelt(x) -> PreventsInjuriesToPassengersInVehicles(x))", "score": 0}
{"id": "eqasc_validation_1267", "prediction": "all x.(Seatbelt(x) -> PreventsInjuriesToPassengersInVehicles(x))", "score": 0}
{"id": "eqasc_validation_1267", "prediction": "all x y z.((SeatCaret(x) & Vehicle(y) & Passenger(z)) -> PreventsInjuries(x,y,z))", "score": 0}
{"id": "eqasc_validation_1267", "prediction": "all x y.((Seatbelts(x) & Passenger(y)) -> UsedForPreventingInjuries(x,y))", "score": 0}
{"id": "eqasc_validation_1267", "prediction": "all x y.((SeatBelt(x) & Vehicle(y)) -> (PreventsInjuries(x,y) & PassengersInVehicles(x)))", "score": 0}
{"id": "eqasc_validation_1267", "prediction": "all x.(SeatBelt(x) -> (PreventsInjury(x) & PassengerInVehicles(x)))", "score": 0}
{"id": "eqasc_validation_1267", "prediction": "all x y.((SeatBelt(x) & Passenger(y) & Vehicle(z)) -> PreventsInjuries(x,y,z))", "score": 0}
{"id": "eqasc_validation_1267", "prediction": "all x y z.((SeatBelt(x) & Passenger(y) & Vehicle(z)) -> PreventsInjuriesInTo(x,y,z))", "score": 0}
{"id": "eqasc_validation_1267", "prediction": "all x.(SeatGear(x) -> UsedForPreventingInjuriesToPassengers(x))", "score": 0}
{"id": "eqasc_validation_1267", "prediction": "all x y z.((Seatbelt(x) & Passenger(y) & Vehicle(z)) -> PreventsInjuries(x,y,z))", "score": 0}
{"id": "eqasc_validation_1267", "prediction": "all x y z.((SeatBelt(x) & PassengerOwner(y) & Vehicle(z)) -> UsedForPreventingInjuries(x,y,z))", "score": 0}
{"id": "eqasc_validation_1268", "prediction": "all x y.((Vehicle(x) & Sweeps(x) & Vehicle(y)) -> Injuries(x,y))", "score": 0}
{"id": "eqasc_validation_1268", "prediction": "all x y.(((Vehicle(x) & Severs(y)) -> IncreasesInjuriesToDriversAndPassengers(x))", "score": -1}
{"id": "eqasc_validation_1268", "prediction": "all x y z.((Vehicle(x) & Driver(y) & Passenger(z) & Sweeps(x)) -> Injuries(x,y,z))", "score": 0}
{"id": "eqasc_validation_1268", "prediction": "all x.((Driver(x) & Passenger(x)) -> Injuries(x,Swerve))", "score": 0}
{"id": "eqasc_validation_1268", "prediction": "all x.((Vehicle(x) & Swaves(x)) -> InjuriesToDriversAndPassengers(x))", "score": 0}
{"id": "eqasc_validation_1268", "prediction": "all x y.((Vehicle(x) & Steer(y)) -> (InjuriesToDrivers(x,y) | InjuriesToPassengers(x,y)))", "score": 0}
{"id": "eqasc_validation_1268", "prediction": "all x.((Vehicle(x) & SteerVertically(x)) -> IncreasesInjuries(x))", "score": 0}
{"id": "eqasc_validation_1268", "prediction": "all x y.((SwervedVehicle(x) & Driver(y) & Passenger(y)) -> InjuriesIncrease(x,y))", "score": 0}
{"id": "eqasc_validation_1268", "prediction": "all x y.((Vehicle(x) & -Swerves(y)) -> IncreasedInjuries(x))", "score": 0}
{"id": "eqasc_validation_1268", "prediction": "all x y.((Vehicle(x) & Sweeps(y)) -> (Infliction(x,y) & Injuries(x,z) & Driver(z) & Passenger(z)))", "score": 0}
{"id": "eqasc_validation_1268", "prediction": "all x.((Driver(x) | Passenger(x)) -> InjuredInswerve(x))", "score": 0}
{"id": "eqasc_validation_1268", "prediction": "all x y.((Vehicle(x) & Sweeps(x,y)) -> IncreasedInjuries(x,y))", "score": 0}
{"id": "eqasc_validation_1268", "prediction": "all x y.((Vehicle(x) & Skews(x)) -> InjuriesToDriversAndPassengers(x,y))", "score": 0}
{"id": "eqasc_validation_1268", "prediction": "all x y z.((Driver(x) & Passenger(y) & Vehicle(z) & Swerves(x)) -> IncreasedInjuries(y,z))", "score": 0}
{"id": "eqasc_validation_1268", "prediction": "all x y.((Vehicle(x) & Steer(y)) -> IncreasesInjuriesForDriversAndPassengers(x,y))", "score": 0}
{"id": "eqasc_validation_1268", "prediction": "all x y.((Vehicle(x) & Swerves(x)) -> IncreasesInjuries(x,y))", "score": 0}
{"id": "eqasc_validation_1269", "prediction": "all x.(Seatbelt(x) -> PreventsInjuriesWhileSwerving(x))", "score": 0}
{"id": "eqasc_validation_1269", "prediction": "all x y.((Seatbelt(x) & Striking(y)) -> PreventsInjuries(x,y))", "score": 0}
{"id": "eqasc_validation_1269", "prediction": "all x.(Seatbelt(x) -> CanPreventInjuries(x))", "score": 0}
{"id": "eqasc_validation_1269", "prediction": "all x.(Seatbelt(x) -> (PreventsInjuries(x) & Sweeping(x)))", "score": 0}
{"id": "eqasc_validation_1269", "prediction": "all x.(Seatbelt(x) -> PreventsInjuriesWhenSwerving(x))", "score": 0}
{"id": "eqasc_validation_1269", "prediction": "all x.(Seatbelt(x) -> (PreventInjuries(x) & Swerve(x)))", "score": 0}
{"id": "eqasc_validation_1269", "prediction": "all x y.((Seatbelt(x) & Skirving(y)) -> CanPreventInjuries(x,y))", "score": 0}
{"id": "eqasc_validation_1269", "prediction": "all x.(Seatbelt(x) -> (PreventInjuries(x) & StopSwerving(x)))", "score": 0}
{"id": "eqasc_validation_1269", "prediction": "all x.(Seatbelt(x) -> PreventsInjuries(x))", "score": 0}
{"id": "eqasc_validation_1269", "prediction": "all x y z.((Seatbelt(x) & Swerving(y) & Injuries(z)) -> Prevents(x,y,z))", "score": 0}
{"id": "eqasc_validation_1269", "prediction": "all x y.((Seatbelt(x) & Skewing(y)) -> PreventsInjuries(x,y))", "score": 0}
{"id": "eqasc_validation_1269", "prediction": "all x.(Seatbelt(x) -> PreventInjuriesWhileSwerving(x))", "score": 0}
{"id": "eqasc_validation_1269", "prediction": "all x y z.((Seatbelt(x) & Swerving(y) & Injury(z)) -> CanPrevent(x,z))", "score": 0}
{"id": "eqasc_validation_1270", "prediction": "all x y.((WaldronB buckle(x) & LeadFoil(y)) -> SeatBangs(x))", "score": -1}
{"id": "eqasc_validation_1270", "prediction": "all x.((WaldronBowl(x) & LeadFolit(x)) -> SeatBelt(x))", "score": 0}
{"id": "eqasc_validation_1270", "prediction": "all x.((WaldronBolt(x) & LeadFoil(x)) -> SeatBelts(x))", "score": 0}
{"id": "eqasc_validation_1270", "prediction": "all x.((WaldronBowl(x) & LeadFoil(x)) -> SeatBelt(x))", "score": 0}
{"id": "eqasc_validation_1270", "prediction": "all x y.((WaldronBowl(x) & LeadFolide(y)) -> SeatBelt(x,y))", "score": 0}
{"id": "eqasc_validation_1270", "prediction": "all x y.((WaldronBolt(x) & LeadFoil(y)) -> SeatBlades(x))", "score": 0}
{"id": "eqasc_validation_1270", "prediction": "all x y z.((WaldronBlock(x) & LeadFoil(y) & SeatBelt(z)) -> MadeUp(x,y))", "score": 0}
{"id": "eqasc_validation_1270", "prediction": "all x y.((WaldronBowl(x) & LeadFoil(y)) -> MadeUpSeatbelts(x))", "score": 0}
{"id": "eqasc_validation_1270", "prediction": "all x y.((WaldronBond(x) & LeadFoil(y)) -> MadeUpSeatBelts(x,y))", "score": 0}
{"id": "eqasc_validation_1270", "prediction": "all x y z.((Waldron(x) & Buckle(y) & LeadFoil(z) & SeatBbelt(z)) -> MadeUpWith(x,y,z))", "score": 0}
{"id": "eqasc_validation_1270", "prediction": "all x y.((WaldronBolt(x) & LeadFoil(y)) -> MadeUpSeatbelt(x,y))", "score": 0}
{"id": "eqasc_validation_1270", "prediction": "all x.((WaldronBowl(x) & LeadFoil(x)) -> SeatBelts(x))", "score": 0}
{"id": "eqasc_validation_1270", "prediction": "all x.((WaldronBowl(x) & LeadFoil(x)) -> MadeUpSeatBelts(x))", "score": 0}
{"id": "eqasc_validation_1270", "prediction": "exists x.(WaldronBolt(x) & HasLeadFolid(x) & SeatBelt(x))", "score": 0}
{"id": "eqasc_validation_1270", "prediction": "all x y.((WaldronButton(x) & LeadFoil(y)) -> MakeBelts(x,y))", "score": 0}
{"id": "eqasc_validation_1270", "prediction": "all x y.((WaldronBowl(x) & LeadFoil(y)) -> Seatbelt(x,y))", "score": 0}
{"id": "eqasc_validation_1271", "prediction": "all x y.((WaldronBlock(x) & Car(y)) -> (UsedToPreventInjuries(x,y) & UsedToPreventInjuries(x,y)))", "score": 0}
{"id": "eqasc_validation_1271", "prediction": "all x y.((WaldronBolt(x) & Car(y) & HasLead(x)) -> (PreventsInjuriesToPassengers(x,y) & IncarCars(x)))", "score": 0}
{"id": "eqasc_validation_1271", "prediction": "all x y z.((WaldronBlock(x) & LeadBlock(y) & Passenger(z)) -> DesignedToPreventInjuriesInCars(x,y,z))", "score": 0}
{"id": "eqasc_validation_1271", "prediction": "all x y z.((WaldronBolt(x) & LeadBolt(y) & Passenger(z)) -> UsedToPreventInjuries(x,y,z))", "score": 0}
{"id": "eqasc_validation_1271", "prediction": "all x y z.((WaldronBolt(x) & LeadBlade(y) & Passenger(z) & Car(w)) -> (UsedToPreventInjuries(x,y,z) & InCar(a,w)))", "score": 0}
{"id": "eqasc_validation_1271", "prediction": "all x y.((WaldronBolt(x) & Car(y)) -> (BrokenWithLead(x,y) & UsedToPreventInjuries(x,y)))", "score": 0}
{"id": "eqasc_validation_1271", "prediction": "all x y z.((WaldronBolt(x) & LeadBolt(y) & Passenger(z)) -> (PreventsInjury(x,y,z) & InCars(x)))", "score": 0}
{"id": "eqasc_validation_1271", "prediction": "all x y z.((WaldronBolt(x) & Bleed(y) & Car(z)) -> PreventsInjuriesToPassengers(x,y,z))", "score": 0}
{"id": "eqasc_validation_1271", "prediction": "all x y z.((WaldronBear(x) & LeadBear(y) & Passenger(z) & Car(z)) -> UsedToPreventInjuriesTo(x,y,z))", "score": 0}
{"id": "eqasc_validation_1271", "prediction": "all x y.((WaldronBowl(x) & Car(y)) -> UsedToPreventInjuriesToPassengersInCars(x,y))", "score": 0}
{"id": "eqasc_validation_1271", "prediction": "all x y z.((WaldronBowl(x) & LeadBowl(y) & Passenger(z) & Car(x)) -> UsedToPreventInjuries(x,y,z))", "score": 0}
{"id": "eqasc_validation_1271", "prediction": "all x y.((WaldronBlade(x) & LeadButton(y)) -> (PreventsInjury(x,y) & PassengerInCars(y)))", "score": 0}
{"id": "eqasc_validation_1271", "prediction": "all x y.((WaldronBolt(x) & Car(y) & IncludesLead(x)) -> UsedToPreventInjuries(x,y))", "score": 0}
{"id": "eqasc_validation_1271", "prediction": "all x y z.((WaldronBowl(x) & LeadBowl(y) & Passenger(z)) -> (UsedToPreventInjuries(x,y) & InCar(z)))", "score": 0}
{"id": "eqasc_validation_1271", "prediction": "all x y.((WaldronBlock(x) & Car(y)) -> (PreventsInjuries(x,y) & PassengerInjuries(x,y)))", "score": 0}
{"id": "eqasc_validation_1271", "prediction": "all x y.((WaldronBlock(x) & LeadBlock(y)) -> UsedToPreventInjuries(x,y))", "score": 0}
{"id": "eqasc_validation_1272", "prediction": "all x y z.((Wildfire(x) & Ecosystem(y) & Ecosystem(z)) -> ChangesDramaticly(x,y,z))", "score": 0}
{"id": "eqasc_validation_1272", "prediction": "all x y z.((Wildfire(x) & Ecosystem(y) & Changes(x,y) & Climate(z)) -> ChangesDisruptively(x,y,z))", "score": 0}
{"id": "eqasc_validation_1272", "prediction": "all x y.((Wildfire(x) & Ecosystem(y)) -> ChangesDramaticly(x,y))", "score": 0}
{"id": "eqasc_validation_1272", "prediction": "all x y z.((Wildfire(x) & Ecosystem(y) & Ecosystem(z) & ChangesRapidly(x,y,z)) -> ChangesDramaticly(x,y))", "score": 0}
{"id": "eqasc_validation_1272", "prediction": "all x.(Fernfire(x) -> CleverlyChangesEcosystem(x))", "score": 0}
{"id": "eqasc_validation_1272", "prediction": "all x.(Wildfire(x) -> ChangesEcosystemDirregularly(x))", "score": 0}
{"id": "eqasc_validation_1272", "prediction": "all x y.((Wildfire(x) & Ecosystem(y)) -> ChangesDirectly(x,y))", "score": 0}
{"id": "eqasc_validation_1272", "prediction": "all x y.((Wildfire(x) & Ecosystem(y)) -> ChangesDisturbed(x,y))", "score": 0}
{"id": "eqasc_validation_1272", "prediction": "all x.(Wildfire(x) -> ChangesEcosystemDramaticly(x))", "score": 0}
{"id": "eqasc_validation_1272", "prediction": "all x.((Wildfire(x) & Ecosystem(y)) -> ChangesDracinally(x,y))", "score": 0}
{"id": "eqasc_validation_1272", "prediction": "all x.(Wildfire(x) -> (ChangesEcosystem(x) & DramaticEcosystem(2)))", "score": 0}
{"id": "eqasc_validation_1272", "prediction": "all x y z.((Wildfire(x) & Ecosystem(y) & Ecosystem(z)) -> ChangesDisruptively(x,y,z))", "score": 0}
{"id": "eqasc_validation_1272", "prediction": "all x y z.((Wildfire(x) & Ecosystem(y) & Ecosystem(z)) -> ChangesDirreproachably(x,y))", "score": 0}
{"id": "eqasc_validation_1272", "prediction": "all x.(Wildfire(x) -> ChangesEcosystemDramically(x))", "score": 0}
{"id": "eqasc_validation_1272", "prediction": "all x y.((Wildfire(x) & Ecosystem(y)) -> ChangesDirriously(x,y))", "score": 0}
{"id": "eqasc_validation_1273", "prediction": "all x.(Ecosystem(x) -> (EstablishmentBenchmark(x) & InNature(x)))", "score": 0}
{"id": "eqasc_validation_1273", "prediction": "all x.(Ecosystem(x) -> LikeNashville(x))", "score": 0}
{"id": "eqasc_validation_1273", "prediction": "all x.(Ecosystem(x) -> (Neighborhood(x) & Nature(x)))", "score": 0}
{"id": "eqasc_validation_1273", "prediction": "all x.(Ecosystem(x) -> NeighborhoodInNature(x))", "score": 0}
{"id": "eqasc_validation_1273", "prediction": "all x.(Ecosystem(x) -> (LikeNeighborhood(x) & InNature(x)))", "score": 0}
{"id": "eqasc_validation_1273", "prediction": "all x.(Ecosystem(x) -> SimilarToNeighborhood(x))", "score": 0}
{"id": "eqasc_validation_1273", "prediction": "all x y.((Ecosystem(x) & Neighborhood(y)) -> InNature(x,y))", "score": 0}
{"id": "eqasc_validation_1273", "prediction": "all x.(Ecosystem(x) -> (Neighborhood(x) & NeighborhoodInNature(x)))", "score": 0}
{"id": "eqasc_validation_1273", "prediction": "all x y z.((Ecosystem(x) & Neighborhood(y) & Nature(z)) -> Like(x,y,z))", "score": 0}
{"id": "eqasc_validation_1273", "prediction": "all x.(Ecosystem(x) -> Neighborhood(x))", "score": 0}
{"id": "eqasc_validation_1273", "prediction": "all x.(Ecosystem(x) -> (Neighborhood(x) & InNature(x)))", "score": 0}
{"id": "eqasc_validation_1273", "prediction": "all x.(Ecosystem(x) -> LikeNeighborhoodInNature(x))", "score": 0}
{"id": "eqasc_validation_1274", "prediction": "all x y.((Wildfire(x) & Neighborhood(y)) -> ChangesDramially(x,y))", "score": 0}
{"id": "eqasc_validation_1274", "prediction": "all x y.((Wildfire(x) & Neighborhood(y)) -> ChangesDramaticly(x,y))", "score": 0}
{"id": "eqasc_validation_1274", "prediction": "all x y.((Wildfire(x) & Neighborhood(y)) -> SignificantChangesInNature(x,y))", "score": 0}
{"id": "eqasc_validation_1274", "prediction": "all x y.((Wildfire(x) & Neighborhood(y)) -> ChangesDirriscously(x,y))", "score": 0}
{"id": "eqasc_validation_1274", "prediction": "all x y.((Wildfire(x) & Neighborhood(y)) -> ChangesDeliciously(x,y))", "score": 0}
{"id": "eqasc_validation_1274", "prediction": "all x.(Wildfire(x) -> ChangesNeighborhoodDirratically(x))", "score": 0}
{"id": "eqasc_validation_1274", "prediction": "all x y z.((Wildfire(x) & Neighborhood(y) & Nature(z)) -> ChangesDramaticly(x,y,z))", "score": 0}
{"id": "eqasc_validation_1274", "prediction": "all x y.((Wildfire(x) & Neighborhood(y)) -> ChangesDirrially(x,y))", "score": 0}
{"id": "eqasc_validation_1274", "prediction": "all x.(Wildfire(x) -> DisruptsNeighborhood(x))", "score": 0}
{"id": "eqasc_validation_1274", "prediction": "all x y.((Wildfire(x) & Neighborhood(y) & Nature(z)) -> ChangesDramaticly(x,y,z))", "score": 0}
{"id": "eqasc_validation_1274", "prediction": "all x y.((Wildfire(x) & Neighborhood(y)) -> ChangesDramaticInNature(x,y))", "score": 0}
{"id": "eqasc_validation_1274", "prediction": "all x y.((Wildfire(x) & Neighborhood(y)) -> ChangingDirriously(x,y))", "score": 0}
{"id": "eqasc_validation_1274", "prediction": "all x y.((Wildfire(x) & Neighborhood(y) & Nature(z)) -> ChangesDistantly(x,y,z))", "score": 0}
{"id": "eqasc_validation_1274", "prediction": "all x y.((Wildfire(x) & Neighborhood(y) & Nature(z)) -> ChangesDurably(x,y,z))", "score": 0}
{"id": "eqasc_validation_1274", "prediction": "all x y.(Wildfire(x) -> ChangesNeighborhood(x))", "score": 0}
{"id": "eqasc_validation_1274", "prediction": "all x y.((Wildfire(x) & Neighborhood(y)) -> ChangesDramaticNature(x,y))", "score": 0}
{"id": "eqasc_validation_1275", "prediction": "all x.(Human(x) -> StartsWildfire(x))", "score": 0}
{"id": "eqasc_validation_1275", "prediction": "all x y.((Human(x) & Wildfire(y)) -> Starts(x,y))", "score": 0}
{"id": "eqasc_validation_1275", "prediction": "all x.(Human(x) -> StartsMostWildfires(x))", "score": 0}
{"id": "eqasc_validation_1275", "prediction": "all x.(Human(x) -> StartsWildfires(x))", "score": 0}
{"id": "eqasc_validation_1275", "prediction": "(all x.(Human(x) -> StartsWildfire(x)))", "score": 0}
{"id": "eqasc_validation_1276", "prediction": "all x.(Human(x) -> CanChangeEcosystemsDramaticly(x))", "score": 0}
{"id": "eqasc_validation_1276", "prediction": "all x y z w.((Human(x) & Ecosystem(y) & Ecosystem(z) & Changes(x,y,z) | Dramatically(x,w))) -> CanChange(x,y))", "score": -1}
{"id": "eqasc_validation_1276", "prediction": "all x y z.((Human(x) & Ecosystem(y) & Ecosystem(z)) -> CanChangeDrastically(x,y,z))", "score": 0}
{"id": "eqasc_validation_1276", "prediction": "all x y.((Human(x) & Ecosystem(y)) -> CanChangeDramaticly(x,y))", "score": 0}
{"id": "eqasc_validation_1276", "prediction": "all x.(Human(x) -> CanChange(x,Ecosystems))", "score": 0}
{"id": "eqasc_validation_1276", "prediction": "all x y z.((Human(x) & Ecosystem(y) & Ecosystem(z)) -> CanChangeDisturbously(x,y,z))", "score": 0}
{"id": "eqasc_validation_1276", "prediction": "all x.(Human(x) -> (CanChangeEcosystemsDramaticly(x) & ChangeEcosystems(x)))", "score": 0}
{"id": "eqasc_validation_1276", "prediction": "all x y z w.((Human(x) & Ecosystem(y) & Ecosystem(z) & ChangesDramaticly(x,y,z)) -> Human(x))", "score": 0}
{"id": "eqasc_validation_1276", "prediction": "all x.(Human(x) -> ChangesEcosystemsDramaticly(x))", "score": 0}
{"id": "eqasc_validation_1276", "prediction": "all x.(Human(x) -> ChangeEcosystemsThreeDiminishly(x))", "score": 0}
{"id": "eqasc_validation_1276", "prediction": "all x y.((Human(x) & Ecosystem(y) & People(x)) -> CanChangeDesolutely(x,y))", "score": 0}
{"id": "eqasc_validation_1276", "prediction": "all x y.(Human(x) & (Ecosystem(y) | Ecosystem(y))) -> CanChangeDramatic(x,y))", "score": -1}
{"id": "eqasc_validation_1276", "prediction": "all x y z.((Human(x) & Ecosystem(y) & Ecosystem(z)) -> CanChangeCritically(x,y,z))", "score": 0}
{"id": "eqasc_validation_1276", "prediction": "all x y.((Human(x) & Ecosystem(y)) -> ChangesDistantly(x,y))", "score": 0}
{"id": "eqasc_validation_1276", "prediction": "all x.(Human(x) -> EasilyChangesEcosystems(x))", "score": 0}
{"id": "eqasc_validation_1277", "prediction": "all x.(Fire(x) -> NaturalPartForestEcosystem(x))", "score": 0}
{"id": "eqasc_validation_1277", "prediction": "all x.(Fire(x) -> -ForestEcosystem(x))", "score": 0}
{"id": "eqasc_validation_1277", "prediction": "all x.(Fire(x) -> NaturalPartFutureEcosystem(x))", "score": 0}
{"id": "eqasc_validation_1277", "prediction": "all x y.((Fire(x) & ForestEcosystem(y)) -> NaturalPart(x,y))", "score": 0}
{"id": "eqasc_validation_1277", "prediction": "all x y.((Fire(x) & ForestEcosystems(y)) -> NaturalAllPart(x,y))", "score": 0}
{"id": "eqasc_validation_1277", "prediction": "all x.(Fire(x) -> NaturalPartForestEcosystems(x))", "score": 0}
{"id": "eqasc_validation_1277", "prediction": "all x y z.((Fire(x) & ForestEcosystem(y) & ForestEcosystem(z)) -> NaturalPart(x,y,z))", "score": 0}
{"id": "eqasc_validation_1277", "prediction": "all x y z.((Fire(x) & Forest(y) & Ecosystem(z)) -> NaturalPart(x,y,z))", "score": 0}
{"id": "eqasc_validation_1278", "prediction": "all x y z.((RougeFire(x) & Forest(y) & Forest(z)) -> Changes(x,y,z))", "score": 0}
{"id": "eqasc_validation_1278", "prediction": "all x y.((Wildfire(x) & Forest(y) & Changes(x,y)) -> Changes(x,y))", "score": 0}
{"id": "eqasc_validation_1278", "prediction": "all x.(Wildfire(x) -> ChangesForests(x))", "score": 0}
{"id": "eqasc_validation_1278", "prediction": "all x y.((Wildfire(x) & Forest(y)) -> ChangesForests(x,y))", "score": 0}
{"id": "eqasc_validation_1278", "prediction": "all x y.((Wildfire(x) & Forest(y)) -> Changes(x,y))", "score": 0}
{"id": "eqasc_validation_1278", "prediction": "all x y.((Wildfire(x) & Forests(y)) -> ChangesForests(x,y))", "score": 0}
{"id": "eqasc_validation_1278", "prediction": "all x y z.((Wildfire(x) & Forest(y) & Forest(z) & Changes(x,y)) -> Changes(x,z))", "score": 0}
{"id": "eqasc_validation_1278", "prediction": "all x y.((Wildfire(x) & Forest(y) & ChangesForests(x,y)) -> ChangesForests(x,y))", "score": 0}
{"id": "eqasc_validation_1278", "prediction": "all x y z.((Wildfire(x) & Forest(y) & Forest(z)) -> Changes(x,y,z))", "score": 0}
{"id": "eqasc_validation_1279", "prediction": "all x y z.((Ecosystem(x) & CommunityOfSpecies(y) & Area(z)) -> Specific(x,y,z))", "score": 0}
{"id": "eqasc_validation_1279", "prediction": "all x.(Ecosystem(x) -> CommunityOfSpecies(x))", "score": 0}
{"id": "eqasc_validation_1279", "prediction": "all x y.((Ecosystem(x) & Area(y)) -> CommunityOfSpecies(x,y))", "score": 0}
{"id": "eqasc_validation_1279", "prediction": "all x.(Ecosystem(x) -> exists y z w.(Species(y) & Area(z) & Community(x,y) & InSpecificArea(x,z))))", "score": -1}
{"id": "eqasc_validation_1279", "prediction": "all x y z.(Ecosystem(x) -> (CommunityOfSpecies(x,y) & Species(y) & SpecificArea(z) & In(x,y,z)))", "score": 0}
{"id": "eqasc_validation_1279", "prediction": "all x.(Ecosystem(x) -> (CommunityOfSpecies(x) & InSpecificArea(x)))", "score": 0}
{"id": "eqasc_validation_1279", "prediction": "all x.(Ecosystem(x) -> exists y.Area(y) & exists z.Region(z) & Species(p) & CommunitiesInArea(x,p,p)))", "score": -1}
{"id": "eqasc_validation_1279", "prediction": "all x.(Ecosystem(x) -> exists y z.(SpeciesCommunity(y) & ASpecificArea(z) & InSpecificArea(x,z))))", "score": -1}
{"id": "eqasc_validation_1279", "prediction": "all x.(Ecosystem(x) -> exists y.(Species(y) & Community(x,y)) & LocatedInSpecificArea(x,y)))", "score": -1}
{"id": "eqasc_validation_1279", "prediction": "all x y.(Ecosystem(x) -> (CommunityOfSpecies(y) & InSpecificArea(y)))", "score": 0}
{"id": "eqasc_validation_1279", "prediction": "all x y.((Ecosystem(x) & Spear(y) & Species(y) & SpecificArea(z)) -> CommunityOfArts(x,y,z))", "score": 0}
{"id": "eqasc_validation_1279", "prediction": "all x y.((Ecosystem(x) & CommunityOfSpecies(x) & SpecificArea(y)) -> InSpecificArea(y,x))", "score": 0}
{"id": "eqasc_validation_1279", "prediction": "all x.(Ecosystem(x) -> (CommunityOfSpecies(x) & SpecificArea(x)))", "score": 0}
{"id": "eqasc_validation_1279", "prediction": "all x.(Ecosystem(x) -> (OrganismOfSpecies(x) & InSpecificArea(x)))", "score": 0}
{"id": "eqasc_validation_1279", "prediction": "all x.(Ecosystem(x) -> exists y.(SpeciesCommunity(y) & InSpecificArea(y,x)))", "score": 0}
{"id": "eqasc_validation_1279", "prediction": "all x y z.((Ecosystem(x) & CommunityOfSpecies(y) & Area(z)) -> InSpecificArea(x,y,z))", "score": 0}
{"id": "eqasc_validation_1280", "prediction": "all x y.((Wildfire(x) & Community(y) & Area(z)) -> ChangesDramatic(x,y,z))", "score": 0}
{"id": "eqasc_validation_1280", "prediction": "all x y z.((Wildfire(x) & CommunityOfSpecies(y) & Area(z)) -> Changed(x,y,z))", "score": 0}
{"id": "eqasc_validation_1280", "prediction": "all x y z.((Wildfire(x) & CommunityOfSpecies(y) & Area(z) & ChangesCircumstancesIn(x,y,z)) -> ChangesCircumstances(x,y,z))", "score": 0}
{"id": "eqasc_validation_1280", "prediction": "all x y z.((Wildfire(x) & Community(y) & Area(z)) -> ChangesDramaticCommunity(x,y,z))", "score": 0}
{"id": "eqasc_validation_1280", "prediction": "all x y z.((Wildfire(x) & CommunityOfSpecies(y) & Area(z)) -> ChangesDreamly(x,y,z))", "score": 0}
{"id": "eqasc_validation_1280", "prediction": "all x y z.((Wildfire(x) & Community(y) & Area(z) & Has(x,y,z)) -> ChangesDirtaviouslyInSpecific(y,z))", "score": 0}
{"id": "eqasc_validation_1280", "prediction": "all x y z.((Wildfire(x) & CommunityOfSpecies(y) & Area(z) & Shifts(x,y,z)) -> Changes(x,y,z))", "score": 0}
{"id": "eqasc_validation_1280", "prediction": "all x y.([Wildfire(x) & CommunityOfSpecies(y) & Area(x) & DecreasesDrasticallyCommunity(x,y)) -> ChangesInSpecificArea(x,y))", "score": -1}
{"id": "eqasc_validation_1280", "prediction": "all x y z.((Wildfire(x) & CommunityOfSpecies(y) & Area(z) & Species(z)) -> ChangeedDramaticly(x,y,z))", "score": 0}
{"id": "eqasc_validation_1280", "prediction": "all x y.((Wildfire(x) & CommunityOfSpecies(y) & InSpecificArea(x,y)) -> DecreasesDrasticCroplessCrops(x,y))", "score": 0}
{"id": "eqasc_validation_1280", "prediction": "all x y.((Wildfire(x) & CommunityOfSpecies(y) & Area(z)) -> ChangesDramaticArea(x,y,z))", "score": 0}
{"id": "eqasc_validation_1280", "prediction": "all x y z.((Wildfire(x) & CommunityOfSpecies(y) & Area(z)) -> ChangesDirtily(x,y,z))", "score": 0}
{"id": "eqasc_validation_1280", "prediction": "all x y.((Wildfire(x) & CommunityOfSpecies(y) & InSpecificArea(x,y)) -> DeletesThematically(x,y))", "score": 0}
{"id": "eqasc_validation_1280", "prediction": "all x.(Wildfire(x) -> ChangesSpeciesClub(x))", "score": 0}
{"id": "eqasc_validation_1280", "prediction": "all x y.((Wildfire(x) & CommunityOfSpecies(y) & Area(z) & Changing(x,y,z)) -> StrikingChange(x,y,z))", "score": 0}
{"id": "eqasc_validation_1280", "prediction": "all x y z.((Wildfire(x) & CommunityOfSpecies(y) & Area(z) & Changes(x,y,z)) -> SpecificArea(x,y,z))", "score": 0}
{"id": "eqasc_validation_1281", "prediction": "(AgilesInEcosystems(weather) & AgilesInEcosystems(wildfire))", "score": 0}
{"id": "eqasc_validation_1281", "prediction": "all x.((Weather(x) & Wildfire(x)) -> AcactsInEcosystems(x))", "score": 0}
{"id": "eqasc_validation_1281", "prediction": "all x.((Wood(x) & Wildfire(x)) -> ActsInEcosystems(x))", "score": 0}
{"id": "eqasc_validation_1281", "prediction": "all x y.((Weather(x) & Wildfire(y)) -> ActsInEcosystem(x,y))", "score": 0}
{"id": "eqasc_validation_1281", "prediction": "all x.((Weather(x) & Wildfire(x)) -> (ActsInEcosystems(x) & ActsInEcosystems(x)))", "score": 0}
{"id": "eqasc_validation_1281", "prediction": "all x y z.((Force(x) & Energy(y) & Environment(z)) -> (Weather(x) | Wildfire(x)))", "score": 0}
{"id": "eqasc_validation_1281", "prediction": "all x y.((Force(x) & Ecosystem(y)) -> (Weather(x) | Wildfire(x)))", "score": 0}
{"id": "eqasc_validation_1281", "prediction": "all x y.((GroundFrequency(x) & Ecosystem(y)) -> (Weather(x) | Wildfire(x)))", "score": 0}
{"id": "eqasc_validation_1281", "prediction": "all x.((Weather(x) | Wildfire(x)) -> ActsWithinEcosystems(x))", "score": 0}
{"id": "eqasc_validation_1281", "prediction": "all x y z.((Weather(x) & Wildfire(y) & Ecosystem(z)) -> (FactorsActioningWithin(x,z) | ForcesActioningWithIn(x,z)))", "score": 0}
{"id": "eqasc_validation_1281", "prediction": "all x y.((Weather(x) & Wildfire(y)) -> (Action(x,y) & ActsInEcosystems(x)))", "score": 0}
{"id": "eqasc_validation_1281", "prediction": "(ActEcosystem(e) & ActForce(e) & (Weather(e) | Wildfire(e)))", "score": 0}
{"id": "eqasc_validation_1281", "prediction": "all x.((Weather(x) & Wildfire(x)) -> ActsInEcosystems(x))", "score": 0}
{"id": "eqasc_validation_1281", "prediction": "all x y.((Weather(x) & Wildfire(y)) -> ActsInEcosystems(x,y))", "score": 0}
{"id": "eqasc_validation_1282", "prediction": "all x.(Weather(x) -> (Force(x) & ChangesEcosystemDirractedly(x)))", "score": 0}
{"id": "eqasc_validation_1282", "prediction": "all x y.((Weather(x) & Ecosystem(y)) -> ChangesDisruptively(x,y))", "score": 0}
{"id": "eqasc_validation_1282", "prediction": "all x y.((Weather(x) & Ecosystem(y)) -> ChangesStratically(x,y))", "score": 0}
{"id": "eqasc_validation_1282", "prediction": "all x y.((Weather(x) & Ecosystem(y)) -> ChangesDramaticly(x,y))", "score": 0}
{"id": "eqasc_validation_1282", "prediction": "all x y.((Weather(x) & Ecosystem(y)) -> ChangesDramiously(x,y))", "score": 0}
{"id": "eqasc_validation_1282", "prediction": "all x.(Weather(x) -> (Force(x) & ChangesEcosystem(x) & Dramatically(x)))", "score": 0}
{"id": "eqasc_validation_1282", "prediction": "all x.(Weather(x) -> (FixesEcosystem(x) & ChangesEcosystem(x)))", "score": 0}
{"id": "eqasc_validation_1282", "prediction": "all x y.((Weather(x) & Ecosystem(y) & ChangesScoradically(x,y)) -> ChangesDisruptively(x))", "score": 0}
{"id": "eqasc_validation_1282", "prediction": "all x.(Weather(x) -> ChangesEcosystemDramaticly(x))", "score": 0}
{"id": "eqasc_validation_1282", "prediction": "all x y z.((Weather(x) & Ecosystem(y) & Impact(z)) -> ChangesDramaticly(x,y,z))", "score": 0}
{"id": "eqasc_validation_1282", "prediction": "all x.(Weather(x) -> (Force(x) & ChangesEcosystem(x) & Dramally(x)))", "score": 0}
{"id": "eqasc_validation_1282", "prediction": "all x y.((Weather(x) & Ecosystem(y)) -> ChangesDramaticly(x))", "score": 0}
{"id": "eqasc_validation_1282", "prediction": "all x y z.((Wetter(x) & Ecosystem(y) & Ecosystem(z)) -> ChangesDramaticly.(WetterInTouch(x,y) & ChangesDramaticly(x,y,z)))", "score": -1}
{"id": "eqasc_validation_1282", "prediction": "all x.(Weather(x) -> (ChangesEcosystemDimultaneously(x) & ImpactsEcosystem(x)))", "score": 0}
{"id": "eqasc_validation_1282", "prediction": "all x y.((Weather(x) & Environment(y)) -> ChangesDisruptively(x,y))", "score": 0}
{"id": "eqasc_validation_1282", "prediction": "all x y z.((Weather(x) & EnergyEcosystem(y) & Ecosystem(z)) -> (Changes(x,y,z) & Changes(x,y)))", "score": 0}
{"id": "eqasc_validation_1283", "prediction": "all x y.((ForestFire(x) & Ecosystem(y)) -> CanChange(x,y))", "score": 0}
{"id": "eqasc_validation_1283", "prediction": "all x y z.((Fire(x) & Ecosystem(y) & ForestFire(z)) -> Changes(x,y,z))", "score": 0}
{"id": "eqasc_validation_1283", "prediction": "all x y z.((ForestFire(x) & Ecosystem(y) & Ecosystem(z) & Changes(x,y,z)) -> CanChange(x,y))", "score": 0}
{"id": "eqasc_validation_1283", "prediction": "all x y.((ForestFire(x) & Ecosystem(y)) -> Changes(x,y))", "score": 0}
{"id": "eqasc_validation_1283", "prediction": "all x y z.((ForestFire(x) & Ecosystem(y) & Ecosystem(z)) -> Changes(x,y,z))", "score": 0}
{"id": "eqasc_validation_1283", "prediction": "all x y.((Fire(x) & Ecosystem(y)) -> CanChange(x,y))", "score": 0}
{"id": "eqasc_validation_1283", "prediction": "all x y z.((ForestFire(x) & Ecosystem(y) & Ecosystem(z) & Changes(x,z)) -> Changes(x))", "score": 0}
{"id": "eqasc_validation_1283", "prediction": "all x y z.((ForestFire(x) & Ecosystem(y) & Ecosystem(z)) -> CanChange(x,y,z))", "score": 0}
{"id": "eqasc_validation_1283", "prediction": "all x y z.((ForestFire(x) & Ecosystem(y) & Environment(z)) -> CanChange(x,y,z))", "score": 0}
{"id": "eqasc_validation_1283", "prediction": "all x y z.((ForestFire(x) & Ecosystem(y) & Ecosystem(z) & CanChange(x,y)) -> Changes(x,y))", "score": 0}
{"id": "eqasc_validation_1283", "prediction": "all x.(ForestFire(x) -> CanChangeEcosystem(x))", "score": 0}
{"id": "eqasc_validation_1284", "prediction": "all x.((ViaLargeEcosystem(x) & KnownAsBiome(x)) -> Ecosystem(x))", "score": 0}
{"id": "eqasc_validation_1284", "prediction": "all x.(LargeEcosystem(x) -> Biome(x))", "score": 0}
{"id": "eqasc_validation_1284", "prediction": "all x.((GreatEcosystem(x) & Large(x)) -> Biomes(x))", "score": 0}
{"id": "eqasc_validation_1284", "prediction": "all x.((Ocean(x) & VeryLarge(x)) -> Biome(x))", "score": 0}
{"id": "eqasc_validation_1284", "prediction": "all x.((LargeEcosystem(x) & Biome(x)) -> (Bird(x) & LargeEcosystem(x)))", "score": 0}
{"id": "eqasc_validation_1284", "prediction": "all x.((PopularEcosystem(x) & Large(x)) -> Biome(x))", "score": 0}
{"id": "eqasc_validation_1284", "prediction": "all x.((Explosive(x) & Large(x)) -> Biome(x))", "score": 0}
{"id": "eqasc_validation_1284", "prediction": "all x.((VeryLargeEcosystem(x) & EarthEcosystem(x)) -> Biome(x))", "score": 0}
{"id": "eqasc_validation_1284", "prediction": "all x.((LargeEcosystem(x) & Biomes(x)) -> KnownExects(x))", "score": 0}
{"id": "eqasc_validation_1284", "prediction": "all x y.((Ecosystem(x) & Large(y)) -> Biome(x))", "score": 0}
{"id": "eqasc_validation_1284", "prediction": "all x.((LargeEcosystem(x) & Biome(x)) -> Large(x))", "score": 0}
{"id": "eqasc_validation_1284", "prediction": "all x.((VeryLargeEcosystem(x) & Biome(x)) -> Biome(x))", "score": 0}
{"id": "eqasc_validation_1284", "prediction": "all x y.((Ecosystem(x) & Large(x) & Large(y)) -> Biome(x))", "score": 0}
{"id": "eqasc_validation_1284", "prediction": "all x.(LivesLargeEcosystem(x) -> Biome(x))", "score": 0}
{"id": "eqasc_validation_1284", "prediction": "all x.((LargeEcosystem(x) & Biome(x)) -> TheMorningBody(x))", "score": 0}
{"id": "eqasc_validation_1285", "prediction": "all x y.((Wildfire(x) & Biome(y)) -> ChangesDirriously(x,y))", "score": 0}
{"id": "eqasc_validation_1285", "prediction": "all x y.((Wildfire(x) & Biome(y)) -> AmidChangesDramaticly(x,y))", "score": 0}
{"id": "eqasc_validation_1285", "prediction": "all x y z.((Wildfire(x) & Biome(y) & Biome(z)) -> (Changes(x,y,z) & Significantly(z)))", "score": 0}
{"id": "eqasc_validation_1285", "prediction": "all x y z.((Wildfire(x) & Biome(y) & Biome(z)) -> ChangeToDramaticChange(x,y,z))", "score": 0}
{"id": "eqasc_validation_1285", "prediction": "all x y z.((Wildfire(x) & Biome(y) & Biome(z)) -> ChangesDisruptively(x,y,z))", "score": 0}
{"id": "eqasc_validation_1285", "prediction": "all x y.((Wildfire(x) & Biome(y)) -> ChangesDeterminantly(x,y))", "score": 0}
{"id": "eqasc_validation_1285", "prediction": "all x y z.(.((Wildfire(x) & Biome(y) & Biome(z)) -> ChangesDramaticly(x,y,z)))", "score": -1}
{"id": "eqasc_validation_1285", "prediction": "all x y z.((Wildfire(x) & Biome(y) & Biome(z)) -> ChangesRapidly (Wildfire(x,y) & Biome(y,z)))", "score": -1}
{"id": "eqasc_validation_1285", "prediction": "all x y z.((Wildfire(x) & Biome(y) & Biome(z)) -> ChangesDirratically(x,y,z))", "score": 0}
{"id": "eqasc_validation_1285", "prediction": "all x y.((Wildfire(x) & Biome(y)) -> (Changes(x,y) & Biome(y)))", "score": 0}
{"id": "eqasc_validation_1285", "prediction": "all x y z.((Wildfire(x) & Biome(y) & Biome(z)) -> ChangesForDirtually(x,y,z))", "score": 0}
{"id": "eqasc_validation_1285", "prediction": "all x y z.((Wildfire(x) & Biome(y) & Biome(z)) -> (CharacterlyChanges(x,y,z) | -CrucificallyChanges(x,y))))", "score": -1}
{"id": "eqasc_validation_1285", "prediction": "all x y z.((Wildfire(x) & Biome(y) & Biome(z)) -> ChangesDiadoxly(x,y,z))", "score": 0}
{"id": "eqasc_validation_1285", "prediction": "all x y z.((Wildfire(x) & Biome(y) & Biome(z)) -> ChangesDramaticly(x,y,z))", "score": 0}
{"id": "eqasc_validation_1286", "prediction": "all x.(ForestEcosystem(x) -> (Dynamic(x) & EverChanged(x)))", "score": 0}
{"id": "eqasc_validation_1286", "prediction": "all x.(ForestEcosystem(x) -> (Dynamic(x) & EverChanging(x)))", "score": 0}
{"id": "eqasc_validation_1286", "prediction": "all x.(ForestEcosystem(x) -> (Dynamic(x) & EverChanges(x)))", "score": 0}
{"id": "eqasc_validation_1286", "prediction": "all x.(ForestEcosystem(x) -> (Dynamic(x) & EverChange(x)))", "score": 0}
{"id": "eqasc_validation_1286", "prediction": "all x y.((ForestEcosystem(x) & Forest(y)) -> (Dynamic(x) & EverChange(x)))", "score": 0}
{"id": "eqasc_validation_1286", "prediction": "all x.(Forest(x) -> (Dynamic(x) & EverChanged(x)))", "score": 0}
{"id": "eqasc_validation_1286", "prediction": "all x y.((ForestEcosystem(x) & Ecosystem(y)) -> (Dynamic(x) & EverChanging(x)))", "score": 0}
{"id": "eqasc_validation_1287", "prediction": "all x y.((Wildfire(x) & Forest(y)) -> ChangesDisruptively(x,y))", "score": 0}
{"id": "eqasc_validation_1287", "prediction": "all x y.((Wildfire(x) & Forest(y)) -> (ChangesDramaticForest(x,y) | ChangesDramaticForest(x,y)))", "score": 0}
{"id": "eqasc_validation_1287", "prediction": "all x y.((Wildfire(x) & Forest(y)) -> ChangesDemiprocably(x,y))", "score": 0}
{"id": "eqasc_validation_1287", "prediction": "all x y z.((Wildfire(x) & Forest(y) & Forest(z)) -> ChangesDramaticly(x,y,z))", "score": 0}
{"id": "eqasc_validation_1287", "prediction": "all x y z.((Wildfire(x) & Forest(y) & Forest(z)) -> ChangesRegularly(x,y,z))", "score": 0}
{"id": "eqasc_validation_1287", "prediction": "all x y z.((Wildfire(x) & Forest(y) & Forest(z)) -> ChangesDesirably(x,y,z))", "score": 0}
{"id": "eqasc_validation_1287", "prediction": "all x y.((Wildfire(x) & Forest(y)) -> ChangesCrucially(x,y))", "score": 0}
{"id": "eqasc_validation_1287", "prediction": "all x y.((Wildfire(x) & Forest(y)) -> ChangesDramaticly(x,y))", "score": 0}
{"id": "eqasc_validation_1287", "prediction": "all x y.(Wildfire(x) & Forest(y) & DecreasinglyChanges(x,y))", "score": 0}
{"id": "eqasc_validation_1287", "prediction": "all x y z.((Wildfire(x) & Forest(y) & Forest(z)) -> (Changes(x,y,z) | DramaticDisruptiveChange(y,z)))", "score": 0}
{"id": "eqasc_validation_1287", "prediction": "all x y z w.((Wildfire(x) & Forest(y) & Forest(z)) -> ChangesDramaticly(x,y,z))", "score": 0}
{"id": "eqasc_validation_1287", "prediction": "all x y.((Wildfire(x) & Forest(y)) -> ChangesDirroactively(x,y))", "score": 0}
{"id": "eqasc_validation_1287", "prediction": "all x y z w.((Wildfire(x) & Forest(y) & Forest(z) & ChangesDramaticly(x,y,z)) -> ChangesDramaticly(x,y,z))", "score": 0}
{"id": "eqasc_validation_1287", "prediction": "all x y z.((Wildfire(x) & Forest(y) & Forest(z) & Changes(x,y,z)) -> CutthroatForest(y))", "score": 0}
{"id": "eqasc_validation_1287", "prediction": "all x y.((Wildfire(x) & Forest(y) & ChangesDirtuously(x)) -> SpectralChange(x,y))", "score": 0}
{"id": "eqasc_validation_1288", "prediction": "all x.(ForestFire(x) -> (ChangesEcosystem(x) & Dramatically(x)))", "score": 0}
{"id": "eqasc_validation_1288", "prediction": "all x y z.((ForestFire(x) & Ecosystem(y) & Ecosystem(z)) -> ChangesDrakely(x,y,z))", "score": 0}
{"id": "eqasc_validation_1288", "prediction": "all x y z.((ForestFire(x) & Ecosystem(y) & Ecosystem(z) & Change(x,y,z)) -> ChangesDisplicately(x,y))", "score": 0}
{"id": "eqasc_validation_1288", "prediction": "all x y.((ForestFeuer(x) & Ecosystem(y)) -> (CruciallyChanges(x,y) | DravisivelyChanges(x,y)))", "score": 0}
{"id": "eqasc_validation_1288", "prediction": "all x y z.((ForestFire(x) & Ecosystem(y) & Ecosystem(z)) -> ChangesDistantly(x,y,z))", "score": 0}
{"id": "eqasc_validation_1288", "prediction": "all x y z.((ForestFire(x) & Ecosystem(y) & Ecosystem(z)) -> ChangsDisturbed(x,y,z))", "score": 0}
{"id": "eqasc_validation_1288", "prediction": "all x y z.((ForestFire(x) & Ecosystem(y) & Ecosystem(z)) -> ChangesDirtually(x,y,z))", "score": 0}
{"id": "eqasc_validation_1288", "prediction": "all x y z w.((ForestFire(x) & Ecosystem(z) & Ecosystem(w) & ForestFire(y) & Ecosystem(z) & Change(z,w)) -> DramaticallyCreates(x,z,w))", "score": 0}
{"id": "eqasc_validation_1288", "prediction": "all x y z.((ForestFire(x) & Ecosystem(y) & Ecosystem(z)) -> ChangesDifferently(x,y,z))", "score": 0}
{"id": "eqasc_validation_1288", "prediction": "all x y.((ForestFire(x) & Ecosystem(y)) -> Changes(x,y))", "score": 0}
{"id": "eqasc_validation_1288", "prediction": "all x y.((ForestFire(x) & Ecosystem(y)) -> (Changes(x,y) & Irreversible(x,y)))", "score": 0}
{"id": "eqasc_validation_1288", "prediction": "all x y z.((ForestFire(x) & Ecosystem(y) & Ecosystem(z)) -> ChangesDramaticLiquidly(x,y,z))", "score": 0}
{"id": "eqasc_validation_1288", "prediction": "all x y.((ForestFire(x) & Ecosystem(y)) -> ChangesDisruptively(x,y))", "score": 0}
{"id": "eqasc_validation_1288", "prediction": "all x y.((ForestFire(x) & Ecosystem(y)) -> (Changes(x,y) & Spectacular(x,y)))", "score": 0}
{"id": "eqasc_validation_1288", "prediction": "all x y z.((ForestFire(x) & Ecosystem(y) & Spectral(z)) -> ChangesDirracially(x,y))", "score": 0}
{"id": "eqasc_validation_1289", "prediction": "all x.((Wildfire(x) & BurnsUncontrollably(x) & DestroysRarePlantsAndAnimals(x)) -> (FiresUncontrollably(x) & DestroysRareAnimals(x)))", "score": 0}
{"id": "eqasc_validation_1289", "prediction": "all x y.((Wildfire(x) & Mexican(y)) -> (BurnsUncontrollably(x,y) & DisposesRarePlants(x,y) & DisposesRareAnimals(x,y)))", "score": 0}
{"id": "eqasc_validation_1289", "prediction": "all x y z.((Wildfire(x) & Mexico(y) & Plant(z) & Animal(z)) -> (RediscriminatelyBurns(x,y) & Destroys(x,z)))", "score": 0}
{"id": "eqasc_validation_1289", "prediction": "all x.((Wildfire(x) & BurnsUncontrollablyAcrossMexico(x) & DestroysRarePlantsAndAnimals(x)) -> Uncontrollable(x))", "score": 0}
{"id": "eqasc_validation_1289", "prediction": "all x y.((Wildfire(x) & Mexico(y)) -> (BurnsUncontrollably(x,y) & DestroysRarePlantsAndAnimals(x,y)))", "score": 0}
{"id": "eqasc_validation_1289", "prediction": "all x y z w.((Wildfire(x) & Mexico(y) & Plant(z) & Animal(w) & Plant(z) & Wildcat(w)) -> BurnsUncontrollably,Destroying(x,y,z,w))", "score": -1}
{"id": "eqasc_validation_1289", "prediction": "all x y.((Wildfire(x) & Mexico(y)) -> BurnsUncontrollably(x,y))", "score": 0}
{"id": "eqasc_validation_1289", "prediction": "all x.(Wildfire(x) -> (BurnsUncontrollably(x) & DefeatsRarePlants(x) & DefeatsRareAnimals(x)))", "score": 0}
{"id": "eqasc_validation_1289", "prediction": "all x.(Wildfire(x) -> (BurnUncontrollably(x) & In Mexico(x) & DestroysRarePlantsAndAnimals(x)))", "score": -1}
{"id": "eqasc_validation_1289", "prediction": "all x y z.((Wildfire(x) & Mexico(y) & Plant(z) & Animal(z)) -> BurnsUncontrollably(x,y,z))", "score": 0}
{"id": "eqasc_validation_1289", "prediction": "all x.(Wildfire(x) -> (BurnsUncontrollably(x) & DisfiguresRarePlantsAndAnimals(x)))", "score": 0}
{"id": "eqasc_validation_1289", "prediction": "all x y.((Wildfire(x) & Mexico(y)) -> BurnUncontrollablyAcross(x,y))", "score": 0}
{"id": "eqasc_validation_1289", "prediction": "all x y z.((Wildfire(x) & Mexico(y) & Plant(z)) -> (BurnsUncontrollably(x,y) & DestroysRainyAnimals(y)))", "score": 0}
{"id": "eqasc_validation_1289", "prediction": "all x.(Wildfire(x) -> (About(y,Q) & BurnsUncontrollably(x) & DisposesRulePlantsAndAnimals(x)))", "score": 0}
{"id": "eqasc_validation_1289", "prediction": "all x.(Wildfire(x) -> (BurstsUncontrollablyAcrossMexico(x) & DestroysRarePlantsAndAnimals(x)))", "score": 0}
{"id": "eqasc_validation_1290", "prediction": "all x y.((UncontrollableBurning(x) & Ecosystem(y)) -> DefeatsDeclinedCruisingReacts(x,y))", "score": 0}
{"id": "eqasc_validation_1290", "prediction": "all x.((UncontrollableBurning(x) & ChangesEcosystem(x)) -> DramaticChange(x))", "score": 0}
{"id": "eqasc_validation_1290", "prediction": "all x y.((ConstantBurning(x) & Ecosystem(y)) -> DrimaticChange(x,y))", "score": 0}
{"id": "eqasc_validation_1290", "prediction": "all x y z.((UncontrollableBurning(x) & Ecosystem(y) & Ecosystem(z)) -> ChangesDramaticly(x,y,z))", "score": 0}
{"id": "eqasc_validation_1290", "prediction": "all x.((UncontrollableBurning(x) & DramaticEcosystemChanges(x)) -> UncontrollableBurningSmapping(x))", "score": 0}
{"id": "eqasc_validation_1290", "prediction": "all x y.((UncontrollableBurning(x) & Ecosystem(y)) -> ChangesDirramaticly(x,y))", "score": 0}
{"id": "eqasc_validation_1290", "prediction": "all x.((UncontrollableBurning(x) & UncontrollableBurning(x)) -> DisruptiveCruising(x))", "score": 0}
{"id": "eqasc_validation_1290", "prediction": "all x y.((UncontrollableBurning(x) & Ecosystem(y) & ChangesDramaticly(x,y)) -> (UncontrollableBurningChanges(x,y)))", "score": 0}
{"id": "eqasc_validation_1290", "prediction": "all x y z.((UncontrollableBurning(x) & Ecosystem(y) & Ecosystem(z)) -> (ExtremelyChanges(x,z) & DisastrouslyChanges(y,x)))", "score": 0}
{"id": "eqasc_validation_1290", "prediction": "all x y z.((UncontrollableBurning(x) & Ecosystem(y) & Burning(z) & Reduces(x,z)) -> DramaticallyCauses(x,y,z))", "score": 0}
{"id": "eqasc_validation_1290", "prediction": "all x.((UncontrollableBurning(x) & EcosystemInEcosystem(x)) -> ChangesDecayingly(x))", "score": 0}
{"id": "eqasc_validation_1290", "prediction": "all x y z.((UncontrollableBurning(x) & Ecosystem(y) & Environmental(z)) -> (CruciallyChanges(x,y,z) | ClimateChangs(x)))", "score": 0}
{"id": "eqasc_validation_1290", "prediction": "all x y.((UncontrollableBurning(x) & Ecosystem(y)) -> DoesDistantCruizableChanges(x,y))", "score": 0}
{"id": "eqasc_validation_1290", "prediction": "all x.(UncontrollableBurningChangesEcosystemDeeply(x) -> DramaticChangeCrossroadsEcosystem(x))", "score": 0}
{"id": "eqasc_validation_1290", "prediction": "all x y.((UncontrollableBurning(x) & Ecosystem(y)) -> ChangesDirrruptly(x,y))", "score": 0}
{"id": "eqasc_validation_1291", "prediction": "all x.(Biome(x) -> GlobalEcosystem(x))", "score": 0}
{"id": "eqasc_validation_1292", "prediction": "all x y.((Wildfire(x) & Biome(y)) -> CanChangeAndChange(x,y))", "score": 0}
{"id": "eqasc_validation_1292", "prediction": "all x y.((Wildfire(x) & Biome(y)) -> CanChang(x,y))", "score": 0}
{"id": "eqasc_validation_1292", "prediction": "all x y.((Hunger(x) & Biome(y)) -> CanChangeDramaticly(x,y))", "score": 0}
{"id": "eqasc_validation_1292", "prediction": "all x.(WestFire(x) -> CanChangeDramaticBiome(x))", "score": 0}
{"id": "eqasc_validation_1292", "prediction": "all x y.((Wildfire(x) & Biome(y)) -> CanCruciallyChange(x,y))", "score": 0}
{"id": "eqasc_validation_1292", "prediction": "all x y.((Wildfire(x) & Biome(y)) -> CanDramaticChange(x,y))", "score": 0}
{"id": "eqasc_validation_1292", "prediction": "all x y.((Wildfire(x) & Biome(y)) -> CanChange(x,y))", "score": 0}
{"id": "eqasc_validation_1292", "prediction": "all x y.((Wildfire(x) & Biome(y)) -> CanTreatmentChange(x,y))", "score": 0}
{"id": "eqasc_validation_1292", "prediction": "all x y.((Wildfire(x) & Biome(y)) -> CanChanging(x,y))", "score": 0}
{"id": "eqasc_validation_1292", "prediction": "all x y.((Wildfire(x) & Biome(y)) -> CanTransform(x,y))", "score": 0}
{"id": "eqasc_validation_1292", "prediction": "all x.(Wildfire(x) -> CanCruciallyChangeBiome(x))", "score": 0}
{"id": "eqasc_validation_1292", "prediction": "all x.(Wildfire(x) -> CanColorBiome(x))", "score": 0}
{"id": "eqasc_validation_1292", "prediction": "all x.(Wildfire(x) -> ChangesBiome(x))", "score": 0}
{"id": "eqasc_validation_1292", "prediction": "all x y z.((Wildfire(x) & Biome(y) & Biome(z)) -> CanCropsDragonically(x,y,z))", "score": 0}
{"id": "eqasc_validation_1292", "prediction": "all x y.((Wildfire(x) & Biome(y)) -> CanDirtivelyChange(x,y))", "score": 0}
{"id": "eqasc_validation_1293", "prediction": "all x.(Wildfire(x) -> ScorchWest(x))", "score": 0}
{"id": "eqasc_validation_1293", "prediction": "all x.(Wildfire(x) -> ScratchesWest(x))", "score": 0}
{"id": "eqasc_validation_1293", "prediction": "all x.( Wildfire(x) -> SpreadsWild(x,West))", "score": 0}
{"id": "eqasc_validation_1293", "prediction": "all x.(Wildfire(x) -> ScorpionsWest(x))", "score": 0}
{"id": "eqasc_validation_1293", "prediction": "all x.(Wildfire(x) -> ScorpionsWood(x))", "score": 0}
{"id": "eqasc_validation_1293", "prediction": "all x.(Wildfire(x) -> ScrashesTheWest(x))", "score": 0}
{"id": "eqasc_validation_1293", "prediction": "all x y.((Wildfire(x) & West(y)) -> Scratches(x,y))", "score": 0}
{"id": "eqasc_validation_1293", "prediction": "all x.(Wildfire(x) -> ScourchesWest(x))", "score": 0}
{"id": "eqasc_validation_1293", "prediction": "all x.(Wildfire(x) -> ScoursWest(x))", "score": 0}
{"id": "eqasc_validation_1293", "prediction": "all x.(Wildfire(x) -> ScrashesWest(x))", "score": 0}
{"id": "eqasc_validation_1293", "prediction": "all x y.((Wildfire(x) & West(y)) -> Scoring(x,y))", "score": 0}
{"id": "eqasc_validation_1293", "prediction": "all x.((Wildfire(x) & West(y)) -> Scorpions(x,y))", "score": 0}
{"id": "eqasc_validation_1294", "prediction": "all x.((West(x) & Economic(y)) -> ExperiencesDrasticChanges(x,y))", "score": 0}
{"id": "eqasc_validation_1294", "prediction": "all x y.((West(x) & Ocean(y)) -> DrakticChangesToEcosystem(x,y))", "score": 0}
{"id": "eqasc_validation_1294", "prediction": "all x y.((West(x) & Ecology(y)) -> HasDrestrictChange(x,y))", "score": 0}
{"id": "eqasc_validation_1294", "prediction": "all x y.((West(x) & West(y)) -> ExperiecesDrasticChangesToEcosystem(x,y))", "score": 0}
{"id": "eqasc_validation_1294", "prediction": "all x y.((West(x) & Ecosystem(y)) -> ExperiencesDramaticChanges(x,y))", "score": 0}
{"id": "eqasc_validation_1294", "prediction": "all x.((West(x) & DramaticChangesToEcosystem(x)) -> Experiments(x,West))", "score": 0}
{"id": "eqasc_validation_1294", "prediction": "all x y.((West(x) & Community(y)) -> ExperiencesDramaticChangesToEcosystem(x,y))", "score": 0}
{"id": "eqasc_validation_1294", "prediction": "all x y z.((West(x) & Ecology(y) & Environment(z)) -> ThrillingChange(x,y,z))", "score": 0}
{"id": "eqasc_validation_1294", "prediction": "all x.((West(x) & ExploresDramaticChanges(x)) -> EconomicWest(x))", "score": 0}
{"id": "eqasc_validation_1294", "prediction": "all x.((West(x) & WestEcosystem(x)) -> SignificantChanges(x))", "score": 0}
{"id": "eqasc_validation_1294", "prediction": "all x y.((West(x) & Ecosystem(y)) -> ExperiencesDrasticChanges(x,y))", "score": 0}
{"id": "eqasc_validation_1294", "prediction": "all x y.((West(x) & EconomicEcosystem(y)) -> ExperiencesDrasticChangeTo(x,y))", "score": 0}
{"id": "eqasc_validation_1294", "prediction": "all x.((West(x) & ExperiencesDrasticChanges(x)) -> WestEcosystemTransformations(x))", "score": 0}
{"id": "eqasc_validation_1294", "prediction": "all x y z.((West(x) & ) & Ecosystem(y) & West(z)) -> ExperiencesDrasticChanges(x,y,z))", "score": -1}
{"id": "eqasc_validation_1294", "prediction": "all x.((West(x) & DeepEcosystemChanges(x)) -> Experiences(x))", "score": 0}
{"id": "eqasc_validation_1294", "prediction": "all x.((West(x) & ExperiencesDramaticChangesToEcosystem(x)) -> ExperiencesDramaticChanges(x))", "score": 0}
{"id": "eqasc_validation_1295", "prediction": "all x y.((Seeing(x) & Light(y)) -> Requires(x,y))", "score": 0}
{"id": "eqasc_validation_1295", "prediction": "all x.(Seeing(x) -> RequiresLight(x))", "score": 0}
{"id": "eqasc_validation_1295", "prediction": "all x.(SeeingRequiresLight(x) -> RequiresLight(x))", "score": 0}
{"id": "eqasc_validation_1295", "prediction": "all x y z.((Seeing(x) & Light(y) & Light(z)) -> Requires(x,y,z))", "score": 0}
{"id": "eqasc_validation_1295", "prediction": "all x.(Seen(x) -> RequiresLight(x))", "score": 0}
{"id": "eqasc_validation_1295", "prediction": "all x.(Saving(x) -> RequiresLight(x))", "score": 0}
{"id": "eqasc_validation_1295", "prediction": "all x.(Seasuring(x) -> RequiresLight(x))", "score": 0}
{"id": "eqasc_validation_1295", "prediction": "all x y z.((Sighting(x) & Light(y) & Light(z)) -> Requires(x,y,z))", "score": 0}
{"id": "eqasc_validation_1295", "prediction": "all x.(Saying(x) -> RequiresLight(x))", "score": 0}
{"id": "eqasc_validation_1296", "prediction": "all x.(LooksAroundEveryday(x) -> SeesColor(x))", "score": 0}
{"id": "eqasc_validation_1296", "prediction": "all x y.((Person(x) & LookAroundEveryday(x)) -> SeeColor(x))", "score": 0}
{"id": "eqasc_validation_1296", "prediction": "all x.(LookingAround(x) -> SeesColor(x))", "score": 0}
{"id": "eqasc_validation_1296", "prediction": "all x.(Likes(x,RightNow) -> Color(x))", "score": 0}
{"id": "eqasc_validation_1296", "prediction": "all x.(LooksAround(x) -> SeesColor(x))", "score": 0}
{"id": "eqasc_validation_1296", "prediction": "all x.((Person(x) & LooksAroundEveryday(x)) -> SeesColor(x))", "score": 0}
{"id": "eqasc_validation_1296", "prediction": "all x.(LooksAllround(x) -> SeesColor(x))", "score": 0}
{"id": "eqasc_validation_1296", "prediction": "all x y.((Person(x) & LookAroundEveryDay(x) & SeesColor(y)) -> LookAround(x,y))", "score": 0}
{"id": "eqasc_validation_1296", "prediction": "all x.(LooksAroundEveryDay(x) -> SpectacularColor(x))", "score": 0}
{"id": "eqasc_validation_1296", "prediction": "all x.(LooksAroundEveryDay(x) -> SeesColor(x))", "score": 0}
{"id": "eqasc_validation_1296", "prediction": "all x.(LooksEveryday(x) -> SeesColor(x))", "score": 0}
{"id": "eqasc_validation_1296", "prediction": "all x.(LookAroundEveryday(x) -> SeeColor(x))", "score": 0}
{"id": "eqasc_validation_1296", "prediction": "all x.(RightAroundEveryDay(x) -> SeesColor(x))", "score": 0}
{"id": "eqasc_validation_1297", "prediction": "all x.(LooksAround(x) -> RequiresLight(x))", "score": 0}
{"id": "eqasc_validation_1297", "prediction": "all x.(LooksAroundEveryday(x) -> RequiresLight(x))", "score": 0}
{"id": "eqasc_validation_1297", "prediction": "all x.((Person(x) & LooksAroundEveryDay(x)) -> RequiresLight(x))", "score": 0}
{"id": "eqasc_validation_1297", "prediction": "all x.(LooksAroundEveryDay(x) -> RequiresLight(x))", "score": 0}
{"id": "eqasc_validation_1297", "prediction": "all x.(Light(x) -> LookToday(x))", "score": 0}
{"id": "eqasc_validation_1297", "prediction": "all x.((Person(x) & LooksAroundEveryday(x)) -> RequiresLight(x))", "score": 0}
{"id": "eqasc_validation_1297", "prediction": "all x.(LookingAroundEveryday(x) -> RequiresLight(x))", "score": 0}
{"id": "eqasc_validation_1297", "prediction": "all x.(LooksAroundAtEveryDay(x) -> RequiresLight(x))", "score": 0}
{"id": "eqasc_validation_1298", "prediction": "all x.(Light(x) -> EssentialToVision(x))", "score": 0}
{"id": "eqasc_validation_1298", "prediction": "all x.(Litere(x) -> EssentialToVision(x))", "score": 0}
{"id": "eqasc_validation_1298", "prediction": "exists x.(Light(x) & EssentialToVision(x))", "score": 0}
{"id": "eqasc_validation_1298", "prediction": "Exists x.(Light(x) & EssentialToVision(x))", "score": -1}
{"id": "eqasc_validation_1298", "prediction": "all x.(Light(x) -> essentialToVision(x))", "score": 0}
{"id": "eqasc_validation_1299", "prediction": "all x y.((Selecting(x) & Seeing(y) & Seeing(y)) -> Same(x,y))", "score": 0}
{"id": "eqasc_validation_1299", "prediction": "all x y.((Seeing(x) & Vision(y)) -> Same(x,y))", "score": 0}
{"id": "eqasc_validation_1299", "prediction": "exists x.(Seen(x) & Vision(x))", "score": 0}
{"id": "eqasc_validation_1299", "prediction": "all x.(GasSeeing(x) & Vision(x)) -> Same(x))", "score": -1}
{"id": "eqasc_validation_1299", "prediction": "all x.(Selling(x) -> Vision(x))", "score": 0}
{"id": "eqasc_validation_1299", "prediction": "all x.(Seating(x) | Vision(x))", "score": 0}
{"id": "eqasc_validation_1299", "prediction": "all x (Sequel(x) & Same(x)) -> (Sequel(x) & Same(x\")))", "score": -1}
{"id": "eqasc_validation_1299", "prediction": "all x y.((Seen(x) & Vision(y)) -> Same(x,y))", "score": 0}
{"id": "eqasc_validation_1299", "prediction": "(Seating(so) & Vision(seen)) & Same(seen) & Same(seen))", "score": -1}
{"id": "eqasc_validation_1299", "prediction": "all x y.((Seeing(x) & Vision(y)) -> SeekingAndVision(x,y))", "score": 0}
{"id": "eqasc_validation_1299", "prediction": "all x y.((Seen(x) & Vision(y)) -> SameSameSameSame(x,y))", "score": 0}
{"id": "eqasc_validation_1299", "prediction": "(Seeing(same) & Vision(same))", "score": 0}
{"id": "eqasc_validation_1299", "prediction": "all x y.((Seeing(x) & Vision(y)) -> (Same(x) & Same(y)))", "score": 0}
{"id": "eqasc_validation_1299", "prediction": "all x y z w.((Seen(x) & Vision(y) & Vision(z)) -> (SameSameSameSameSameAs(x,y,z) & SameSeeingSame(y,z)))", "score": 0}
{"id": "eqasc_validation_1299", "prediction": "all x y.((Waiting(x) & Vision(y)) -> Same(x,y))", "score": 0}
{"id": "eqasc_validation_1299", "prediction": "all x y z.((Seen(x) & Vision(y) & Vision(z)) -> Same(x))", "score": 0}
{"id": "eqasc_validation_1300", "prediction": "all x.(Light(x) -> (SimpleRayming(x) & EyesCanSee(x)))", "score": 0}
{"id": "eqasc_validation_1300", "prediction": "all x y.((Light(x) & Eye(y)) -> CanSeen(x,y))", "score": 0}
{"id": "eqasc_validation_1300", "prediction": "all x.(Light(x) -> Rayon(x))", "score": 0}
{"id": "eqasc_validation_1300", "prediction": "all x.(Light(x) -> (Rayon(x) & EyesCanSee(x)))", "score": 0}
{"id": "eqasc_validation_1300", "prediction": "all x y.((Light(x) & Eyes(y)) -> SeeableWith(x,y))", "score": 0}
{"id": "eqasc_validation_1300", "prediction": "all x y.((Light(x) & EyesCanSee(x,y)) -> LightFormOfRadiation(x,y))", "score": 0}
{"id": "eqasc_validation_1300", "prediction": "all x.(Light(x) -> exists y.(Radiation(y) & AvailableForEyes(x,y)))", "score": 0}
{"id": "eqasc_validation_1300", "prediction": "all x.(Light(x) -> exists y.(Rayon(y) & EyesCanSee(x,y)))", "score": 0}
{"id": "eqasc_validation_1300", "prediction": "all x.(Light(x) -> Radiation(x))", "score": 0}
{"id": "eqasc_validation_1300", "prediction": "all x y z.((Light(x) & Radiation(y) & Eyes(z) & CanSeam(z)) -> CanSee(x,y,z))", "score": 0}
{"id": "eqasc_validation_1300", "prediction": "all x y.((Light(x) & Eyes(y)) -> CanSelect(x,y))", "score": 0}
{"id": "eqasc_validation_1300", "prediction": "all x y.((Light(x) & Eyes(y)) -> CanSee(x,y))", "score": 0}
{"id": "eqasc_validation_1300", "prediction": "all x y.((Light(x) & Eye(y)) -> CanSelect(x,y))", "score": 0}
{"id": "eqasc_validation_1300", "prediction": "all x.((Light(x) & OneFormOfRadiation(x)) -> CanSelect(x))", "score": 0}
{"id": "eqasc_validation_1300", "prediction": "all x.(Light(x) -> exists y.(Radiation(y) & EyesCanSee(x,y)))", "score": 0}
{"id": "eqasc_validation_1300", "prediction": "all x y.((Light(x) & Eye(y)) -> CanSee(x,y))", "score": 0}
{"id": "eqasc_validation_1301", "prediction": "all x.(Eyes(x) -> RequiresLight(x))", "score": 0}
{"id": "eqasc_validation_1301", "prediction": "all x y z.((Eyes(x) & Light(y) & Eyes(z)) -> Requires(x,y))", "score": 0}
{"id": "eqasc_validation_1301", "prediction": "all x.(Eyes(x) -> LightRequires(x))", "score": 0}
{"id": "eqasc_validation_1301", "prediction": "all x.((Eye(x) & EyesRequireLight(x)) -> RequiresLight(x))", "score": 0}
{"id": "eqasc_validation_1301", "prediction": "all x.(EyesRequireLight(x) -> EyesRequireLight(x))", "score": 0}
{"id": "eqasc_validation_1301", "prediction": "all x.((Eyes(x) & Eyes(x)) -> RequiresLight(x))", "score": 0}
{"id": "eqasc_validation_1301", "prediction": "all x.(EyesRequireLeight(x) -> EyesRequireLeight(x))", "score": 0}
{"id": "eqasc_validation_1301", "prediction": "all x.(Seed(x) -> RequiresLight(x))", "score": 0}
{"id": "eqasc_validation_1301", "prediction": "all x.(Eye(x) -> (RequiresLight(x) & RequiresLight(x)))", "score": 0}
{"id": "eqasc_validation_1301", "prediction": "all x.(Eye(x) -> RequiresLight(x))", "score": 0}
{"id": "eqasc_validation_1301", "prediction": "all x.((Eyes(x) & RequiresLight(x)) -> RequiresLight(x))", "score": 0}
{"id": "eqasc_validation_1301", "prediction": "all x.(Eyes(x) -> RequireRequireLight(x))", "score": 0}
{"id": "eqasc_validation_1302", "prediction": "all x.(Sight(x) -> (AbilityToSee(x) & EyeResponseToLight(x)))", "score": 0}
{"id": "eqasc_validation_1302", "prediction": "all x.(Sight(x) -> (OnlySight(x) & exists y.(Light(y) & ReflectiveResponse(x,y))))", "score": 0}
{"id": "eqasc_validation_1302", "prediction": "all x y z.((Sight(x) & Eye(y) & Light(z) & JustSightElement(x,y)) -> (CompanyToSee(y,z) & ResponseToShakenInto(y,z)))", "score": 0}
{"id": "eqasc_validation_1302", "prediction": "all x.(Sight(x) -> (NoSenseToSee(x) & EyeResponsesToLight(x)))", "score": 0}
{"id": "eqasc_validation_1302", "prediction": "all x.(Sight(x) -> (Sees(x) & ReactionToLight(x)))", "score": 0}
{"id": "eqasc_validation_1302", "prediction": "all x.(Sight(x) -> (BeingLight(x) & EyeResponseToLight(x)))", "score": 0}
{"id": "eqasc_validation_1302", "prediction": "all x.(Sight(x) -> (SeesWith(x) & EyeResponsesToLight(x)))", "score": 0}
{"id": "eqasc_validation_1302", "prediction": "all x y z.((Sight(x) & EyesResponse(y) & Light(z)) -> (Says(x,z) & Sees(y,z) & RepliesToLight(y,y,z)))", "score": 0}
{"id": "eqasc_validation_1302", "prediction": "all x.(Sight(x) -> (ResponseToLight(x) & EyesResponseToLight(x)))", "score": 0}
{"id": "eqasc_validation_1302", "prediction": "all x.((Eye(x) & BrightEndurance(x)) -> (SeeHowTo(x) & ResponsivesToLight(x)))", "score": 0}
{"id": "eqasc_validation_1302", "prediction": "all x.(Sight(x) -> (AllowsSeeing(x) & EyeResponsesToLight(x)))", "score": 0}
{"id": "eqasc_validation_1302", "prediction": "all x y.((Sight(x) & Eye(y)) -> (TheMadeWith(x,y) & ReactsToLight(y)))", "score": 0}
{"id": "eqasc_validation_1302", "prediction": "all x.(Sight(x) -> (CanSee(x) & EyeResponsesToLight(x)))", "score": 0}
{"id": "eqasc_validation_1302", "prediction": "all x.(Sight(x) -> (ResponseToLight(x) & EyeResponseToLight(x)))", "score": 0}
{"id": "eqasc_validation_1302", "prediction": "all x.(Sight(x) -> (See,x) & EyesSightSensation(x)))", "score": -1}
{"id": "eqasc_validation_1302", "prediction": "all x.(Sight(x) -> (LearnsToSee(x) & DetectsLightShining(x)))", "score": 0}
{"id": "eqasc_validation_1303", "prediction": "all x y.((Eyes(x) & Light(y)) -> Requires(x,y))", "score": 0}
{"id": "eqasc_validation_1303", "prediction": "all x.(Eye(x) -> (RequiresLight(x) & ShinesInto(x)))", "score": 0}
{"id": "eqasc_validation_1303", "prediction": "all x y.((Eye(x) & Light(y)) -> RequiresAndShiningInto(x,y))", "score": 0}
{"id": "eqasc_validation_1303", "prediction": "all x.(Eye(x) -> RequiresLightShiningInto(x,Eye))", "score": 0}
{"id": "eqasc_validation_1303", "prediction": "all x y z.((Eye(x) & Light(y) & Surface(z)) -> RequiresShiningInto(x,y,z))", "score": 0}
{"id": "eqasc_validation_1303", "prediction": "all x.(Eyes(x) -> RequiresLightShimmeringInto(x))", "score": 0}
{"id": "eqasc_validation_1303", "prediction": "all x.(Eye(x) -> RequiresLightShiningInto(x,y))", "score": 0}
{"id": "eqasc_validation_1303", "prediction": "all x.(Eyes(x) -> RequiresLightShapping(x))", "score": 0}
{"id": "eqasc_validation_1303", "prediction": "(all x.(Eyed(x) -> RequiresLightShining(x)))", "score": 0}
{"id": "eqasc_validation_1303", "prediction": "all x.(Eyes(x) -> MustShineInto(x,Light & Eyes(x))", "score": -1}
{"id": "eqasc_validation_1303", "prediction": "all x.(Eyes(x) -> RequiresLight(x))", "score": 0}
{"id": "eqasc_validation_1303", "prediction": "all x.(Eyes(x) -> (RequiresLight(x) & ShinesInto(x)))", "score": 0}
{"id": "eqasc_validation_1303", "prediction": "all x.(Eyed(x) -> RequiresLightShiningInto(x,y))", "score": 0}
{"id": "eqasc_validation_1303", "prediction": "all x.((Eyes(x) & FloatingInto(x)) -> RequiresLight(x))", "score": 0}
{"id": "eqasc_validation_1303", "prediction": "all x y.(Eyes(x) & Light(y) & ShimmersInto(x,y))", "score": 0}
{"id": "eqasc_validation_1304", "prediction": "all x.(Human(x) -> SeesWithEyes(x))", "score": 0}
{"id": "eqasc_validation_1304", "prediction": "exists x.(Human(x) & VisionsAndEyes(x))", "score": 0}
{"id": "eqasc_validation_1304", "prediction": "all x y.((Human(x)) -> SeesWithOurEyes(x,y))", "score": 0}
{"id": "eqasc_validation_1304", "prediction": "all x y.((Human(x) & Eyes(y)) -> SeesWith(x,y))", "score": 0}
{"id": "eqasc_validation_1304", "prediction": "all x y.((Human(x) & Eye(y)) -> SeesWith(x,y))", "score": 0}
{"id": "eqasc_validation_1304", "prediction": "all x.(Human(x) -> SeesWithOwn(x))", "score": 0}
{"id": "eqasc_validation_1304", "prediction": "all x.(Human(x) -> SeesWithOwners(x))", "score": 0}
{"id": "eqasc_validation_1304", "prediction": "all x.(Human(x) -> SeeingWithEyes(x))", "score": 0}
{"id": "eqasc_validation_1304", "prediction": "all x.(Human(x) -> See(x,y))", "score": 0}
{"id": "eqasc_validation_1304", "prediction": "all x.(Human(x) -> SeesWith(x,eyes))", "score": 0}
{"id": "eqasc_validation_1305", "prediction": "all x.(Vision(x) -> AbilityToSee(x))", "score": 0}
{"id": "eqasc_validation_1305", "prediction": "all x.(Vision(x) -> CanSee(x))", "score": 0}
{"id": "eqasc_validation_1305", "prediction": "all x.(Vision(x) -> Sees(x))", "score": 0}
{"id": "eqasc_validation_1305", "prediction": "all x.(Vision(x) -> CapableToSee(x))", "score": 0}
{"id": "eqasc_validation_1305", "prediction": "all x.(Vision(x) -> (AttitudeToSee(x)))", "score": 0}
{"id": "eqasc_validation_1305", "prediction": "exists x.(Vision(x) & AbilityToSee(x))", "score": 0}
{"id": "eqasc_validation_1305", "prediction": "All x.(Vision(x) -> CanSee(x))", "score": -1}
{"id": "eqasc_validation_1305", "prediction": "all x.(Vision(x) -> See(x))", "score": 0}
{"id": "eqasc_validation_1305", "prediction": "(AKA(Vision) & Visible(See))", "score": 0}
{"id": "eqasc_validation_1306", "prediction": "all x.((Light(x) & Vision(x)) -> Requires(x,y))", "score": 0}
{"id": "eqasc_validation_1306", "prediction": "all x.(Light(x) -> RequiredForVision(x))", "score": 0}
{"id": "eqasc_validation_1306", "prediction": "all x.((Light(x) & Vision(x)) -> RequiresFor(x,Vision))", "score": 0}
{"id": "eqasc_validation_1306", "prediction": "all x.((Light(x) & Vision(x)) -> RequiresLight(x))", "score": 0}
{"id": "eqasc_validation_1306", "prediction": "all x.(Light(x) -> RequiresForVision(x))", "score": 0}
{"id": "eqasc_validation_1306", "prediction": "all x y z.((Light(x) & Vision(y) & Vision(z)) -> Requires(x,y,z))", "score": 0}
{"id": "eqasc_validation_1306", "prediction": "all x y.((Light(x) & Vision(y)) -> RequiresLight(x,y))", "score": 0}
{"id": "eqasc_validation_1306", "prediction": "all x y.((Light(x) & Vision(y)) -> RequiredFor(x,y))", "score": 0}
{"id": "eqasc_validation_1306", "prediction": "Exists x.(Light(x) & RequiredForVision(x))", "score": -1}
{"id": "eqasc_validation_1306", "prediction": "all x.((Light(x) & Requires(x,vision)) -> RequiredForVision(x))", "score": 0}
{"id": "eqasc_validation_1306", "prediction": "all x.(RequiresLight(x) -> Vision(x))", "score": 0}
{"id": "eqasc_validation_1306", "prediction": "all x.(Light(x) -> Vision(x))", "score": 0}
{"id": "eqasc_validation_1306", "prediction": "all x y.((Light(x) & Vision(y)) -> Requires(x,y))", "score": 0}
{"id": "eqasc_validation_1306", "prediction": "all x y.((Light(x) & Vision(y)) -> RequiresFor(x,y))", "score": 0}
{"id": "eqasc_validation_1306", "prediction": "all x.(Light(x) -> NeededForVision(x))", "score": 0}
{"id": "eqasc_validation_1307", "prediction": "all x.(Light(x) -> ComesFromPupil(x))", "score": 0}
{"id": "eqasc_validation_1307", "prediction": "all x.((Pupil(x) & LightComes(x)) -> ComesThrough(x))", "score": 0}
{"id": "eqasc_validation_1307", "prediction": "all x y.((Pupil(x) & Light(y)) -> ComesThrough(x,y))", "score": 0}
{"id": "eqasc_validation_1307", "prediction": "all x.((Pupil(x) & Light(x)) -> ComesFruit(x))", "score": 0}
{"id": "eqasc_validation_1307", "prediction": "all x y.((Pupil(x) & Pupil(y)) -> LightComesThrough(x,y))", "score": 0}
{"id": "eqasc_validation_1307", "prediction": "all x.(Light(x) -> ComesThroughPupil(x))", "score": 0}
{"id": "eqasc_validation_1307", "prediction": "all x y z.((Pupil(x) & Light(y) & Pupil(z)) -> ComesThrough(x,y,z))", "score": 0}
{"id": "eqasc_validation_1307", "prediction": "all x y.((Light(x) & Pupil(y)) -> Comes(x,y))", "score": 0}
{"id": "eqasc_validation_1307", "prediction": "all x y.((Pupil(x) & Light(y)) -> Comes(x,y))", "score": 0}
{"id": "eqasc_validation_1307", "prediction": "all x y.((Pupil(x) & LightComesThrough(x,y)) -> ComesThrough(x,y))", "score": 0}
{"id": "eqasc_validation_1308", "prediction": "all x y.((Seen(x) & Pupil(y)) -> RequiresSeeding(x,y))", "score": 0}
{"id": "eqasc_validation_1308", "prediction": "all x y.((Seeing(x) & Pupil(y)) -> Requires(x,y))", "score": 0}
{"id": "eqasc_validation_1308", "prediction": "all x.(SeeingRequiresPupils(x) -> RequiresPupils(x))", "score": 0}
{"id": "eqasc_validation_1308", "prediction": "all x y.((Saying(x) & Teacher(y)) -> Requires(z,y))", "score": 0}
{"id": "eqasc_validation_1308", "prediction": "all x y z.((Seeing(x) & Pupil(y) & Pupil(z)) -> Seeks(x,y))", "score": 0}
{"id": "eqasc_validation_1308", "prediction": "all x y.((Seen(x) & Seeing(y)) -> RequiresPupils(x,y))", "score": 0}
{"id": "eqasc_validation_1308", "prediction": "all x y.((Pupil(x) & Seeing(y)) -> Requires(x,y.))", "score": -1}
{"id": "eqasc_validation_1308", "prediction": "all x y z.((Seeing(x) & Pupil(y) & Pupil(z) & Requires(x,y,z)) -> Requires(y,z))", "score": 0}
{"id": "eqasc_validation_1308", "prediction": "all x y z.((Seeing(x) & Pupils(y) & Pupils(z)) -> RequiresToSeeing(x,y,z))", "score": 0}
{"id": "eqasc_validation_1308", "prediction": "All x y z.((Seeing(x) & Pupil(y) & Pupil(z)) -> Requires(x,y,z))", "score": -1}
{"id": "eqasc_validation_1308", "prediction": "all x y.((Seeing(x) & Pupils(y)) -> Requires(y,x))", "score": 0}
{"id": "eqasc_validation_1308", "prediction": "all x y.((Seen(x) & Pupil(y)) -> Requires(x,y))", "score": 0}
{"id": "eqasc_validation_1308", "prediction": "all x.(Seen(x) -> RequiresPupils(x))", "score": 0}
{"id": "eqasc_validation_1308", "prediction": "all x y z.((Seeing(x) & Pupil(y) & Eye(z)) -> RequiresPupils(x,y,z))", "score": 0}
{"id": "eqasc_validation_1308", "prediction": "all x y z.((Seeing(x) & Pupils(y) & InVisiting(z)) -> Requires(x,y,z))", "score": 0}
{"id": "eqasc_validation_1309", "prediction": "all x.(MeterStick(x) -> MeasureDistance(x))", "score": 0}
{"id": "eqasc_validation_1309", "prediction": "all x y.((MeterStick(x) & MeterStick(y)) -> UsedToMeasureDistance(x,y))", "score": 0}
{"id": "eqasc_validation_1309", "prediction": "all x y.((MeterStick(x) & MeasuresDistance(x)) -> UsedToMeasureDistance(x,y))", "score": 0}
{"id": "eqasc_validation_1309", "prediction": "all x y.((MeterStick(x) & Meter(y)) -> (MeasuredDistance(x,y) | MeasureledDistance(y)))", "score": 0}
{"id": "eqasc_validation_1309", "prediction": "all x.((MeterStick(x) & MeasureDistance(x,Distance)) -> UsedToMeasureDistance(x,Distance))", "score": 0}
{"id": "eqasc_validation_1309", "prediction": "all x y z.((MeasureDistance(x) & MeterStick(y) & MeterStick(z)) -> MeasureDistance(y,z))", "score": 0}
{"id": "eqasc_validation_1309", "prediction": "all x.(MeterStick(x) -> MeasuresDistance(x))", "score": 0}
{"id": "eqasc_validation_1309", "prediction": "all x y.((MeterStick(x) & MeasureDistance(y)) -> MeasureDistance(x,y))", "score": 0}
{"id": "eqasc_validation_1309", "prediction": "all x y z.((MeterStick(x) & Distance(y) & Meter(z)) -> Measures(x,y,z))", "score": 0}
{"id": "eqasc_validation_1309", "prediction": "all x y.((MeterStick(x) & Disk(y)) -> MeasureDistance(x,y))", "score": 0}
{"id": "eqasc_validation_1309", "prediction": "all x y z.((MeasurementStick(x) & Meter(y) & Distance(z)) -> MeasuresDistance(x,y,z))", "score": 0}
{"id": "eqasc_validation_1309", "prediction": "all x.(MeterStick(x) -> MeasuredDistance(x))", "score": 0}
{"id": "eqasc_validation_1309", "prediction": "all x y.((MeterStick(x) & Distance(y)) -> Measures(x,y))", "score": 0}
{"id": "eqasc_validation_1309", "prediction": "all x y.((MeterStick(x) & MeasuresDepth(y,x)) -> UsedToMeasureDistance(x,y))", "score": 0}
{"id": "eqasc_validation_1310", "prediction": "all x y.((Spacing(x) & Plant(y)) -> (CenterMeasurement(x,y) | Distance(x,y)))", "score": 0}
{"id": "eqasc_validation_1310", "prediction": "all x.(Spacing(x) -> (CenterMeasurements(x) | DistanceBetweenPlants(x)))", "score": 0}
{"id": "eqasc_validation_1310", "prediction": "all x y z.((Spacing(x) & Plant(y) & Plant(z)) -> (CenterMeasurements(x,z) | DistanceBetween(x,y)))", "score": 0}
{"id": "eqasc_validation_1310", "prediction": "all x y.((Spacing(x) & Plant(y)) -> (MaintainsCenterMeasurements(x,y) | ShowsDistance(x,y)))", "score": 0}
{"id": "eqasc_validation_1310", "prediction": "all x.(Spacing(x) -> (CentralMeasurements(x) | DistanzBetween(x)))", "score": 0}
{"id": "eqasc_validation_1310", "prediction": "all x.(Spacing(x) -> (CenterMeasurements(x) | DistanzBetweenPlants(x)))", "score": 0}
{"id": "eqasc_validation_1310", "prediction": "all x y.((Spacing(x) & Plant(y)) -> (CenterMeasurements(x) | DistanceBetween(x,y)))", "score": 0}
{"id": "eqasc_validation_1310", "prediction": "all x.(Spacing(x) -> (CenterMeasurements(x) | Distance(x,y)))", "score": 0}
{"id": "eqasc_validation_1310", "prediction": "all x.(Spacing(x) -> (CenterMeasurements(x) | DistanzCentrePlant(x)))", "score": 0}
{"id": "eqasc_validation_1310", "prediction": "all x y.((Spacing(x) & Plant(y)) -> (CenterMeasurements(x,y) | DistanceBetweenPlant(x,y)))", "score": 0}
{"id": "eqasc_validation_1310", "prediction": "all x.(Spacing(x) -> (CenterMeasurement(x) | DistanceBetweenPlant(x)))", "score": 0}
{"id": "eqasc_validation_1310", "prediction": "all x y.((Spacing(x) & Plant(y)) -> (CenterMeasurements(x,y) | DistanceBetween(x,y)))", "score": 0}
{"id": "eqasc_validation_1310", "prediction": "all x y.((Spacing(x) & Plant(y)) -> (CenterMeasurement(x,y) | DistanceBetweenPlants(x,y)))", "score": 0}
{"id": "eqasc_validation_1311", "prediction": "all x y.((MeterStick(x) & SpaceBetween(y,x)) -> MeasuresSpaceBetween(x,y))", "score": 0}
{"id": "eqasc_validation_1311", "prediction": "all x.(MeterStick(x) -> MeasuresSpaceBetween(x))", "score": 0}
{"id": "eqasc_validation_1311", "prediction": "all x y.((MeetStick(x) & SpaceBetween(y,x)) -> Measures(x,y))", "score": 0}
{"id": "eqasc_validation_1311", "prediction": "all x.(MeterStick(x) -> MeasuresSideSpaceBetween(x))", "score": 0}
{"id": "eqasc_validation_1311", "prediction": "all x y.((MeterStick(x) & SpaceBetween(y)) -> MeasuresFrom(x,y))", "score": 0}
{"id": "eqasc_validation_1311", "prediction": "all x.(MeterStick(x) -> Measure(x,Space,Between))", "score": 0}
{"id": "eqasc_validation_1311", "prediction": "exists x.(MeterStick(x) & MeasureSpaceBetween(x))", "score": 0}
{"id": "eqasc_validation_1311", "prediction": "all x.(MeasureStick(x) -> (MeasureSpaceBetween(x) & MeasureSpaceBetween(x)))", "score": 0}
{"id": "eqasc_validation_1311", "prediction": "all x y.((MeterStick(x) & Space(y)) -> MeasuresBetween(x,y))", "score": 0}
{"id": "eqasc_validation_1311", "prediction": "all x.(MeterStick(x) -> MeasureSpaceBetween(x))", "score": 0}
{"id": "eqasc_validation_1311", "prediction": "all x y.((MeterStick(x) & SpaceBetween(y)) -> MeasuresSpace(x,y))", "score": 0}
{"id": "eqasc_validation_1312", "prediction": "all x.(Measures(x) -> (Depth(x) | Distance(x)))", "score": 0}
{"id": "eqasc_validation_1312", "prediction": "all x.((Depth(x) | Distance(x))) -> RepresentedInMeter(x))", "score": -1}
{"id": "eqasc_validation_1312", "prediction": "all x.(Meter(x) -> (RepresentedInDepth(x) | RepresentedInDistance(x)))", "score": 0}
{"id": "eqasc_validation_1312", "prediction": "all x.(Depth(x) & Distance(x)) -> (RepresentedIn(x,Meters)))", "score": -1}
{"id": "eqasc_validation_1312", "prediction": "all x.(Depth(x) -> (Depth(x) | Distance(x)))", "score": 0}
{"id": "eqasc_validation_1312", "prediction": "all x.(Mens(x) -> (Depth(x) | Distance(x)))", "score": 0}
{"id": "eqasc_validation_1312", "prediction": "all x.(Meter(x) -> (Depth(x) | Distance(x)))", "score": 0}
{"id": "eqasc_validation_1312", "prediction": "all x.(Temperature(x) -> (Depth(x) | Distance(x)))", "score": 0}
{"id": "eqasc_validation_1312", "prediction": "all x.((Depth(x) | Distance(x)) -> ReflectedInMeters(x))", "score": 0}
{"id": "eqasc_validation_1312", "prediction": "all x.(Depth(x) & Distance(x)) -> RepresentedInMeters(x))", "score": -1}
{"id": "eqasc_validation_1312", "prediction": "all x y.((Depth(x) & Distance(x)) -> ArrangedInMeters(x))", "score": 0}
{"id": "eqasc_validation_1312", "prediction": "all x.((Depth(x) | Distance(x)) -> RepresentedInMeter(x))", "score": 0}
{"id": "eqasc_validation_1312", "prediction": "all x.((Depth(x) | Distance(x)) & Meter(x)) -> RepresentedIn(x,meters))", "score": -1}
{"id": "eqasc_validation_1312", "prediction": "all x.(Meter(x) -> (RepresentedIn(x,y) & (Depth(y) | Distance(y))))", "score": 0}
{"id": "eqasc_validation_1312", "prediction": "(all x.(Depth(x) | AllDistance(x)) -> InMetrics(x))", "score": 0}
{"id": "eqasc_validation_1313", "prediction": "all x y z.((MeterStick(x) & Meter(y) & Meter(z)) -> MeasuresMeters(x,y,z))", "score": 0}
{"id": "eqasc_validation_1313", "prediction": "all x y.((MeterStick(x) & Meters(y)) -> MeasureMeasurement(x,y))", "score": 0}
{"id": "eqasc_validation_1313", "prediction": "all x y.((MeasurementStick(x) & Meter(y)) -> MeasuresMeters(x,y))", "score": 0}
{"id": "eqasc_validation_1313", "prediction": "all x y z.((MeterStick(x) & MeterStick(y) & Meter(z)) -> UsedToMeasure(x,y,z))", "score": 0}
{"id": "eqasc_validation_1313", "prediction": "all x y.((MeterStick(x) & Meter(y)) -> MeasuresMeasurements(x,y))", "score": 0}
{"id": "eqasc_validation_1313", "prediction": "all x y.((MeterStick(x) & Meter(y)) -> UsedToMeasure(x,y))", "score": 0}
{"id": "eqasc_validation_1313", "prediction": "all x y.((MeterStick(x) & Meter(y)) -> MeasureMeasureMeasurements(z))", "score": 0}
{"id": "eqasc_validation_1313", "prediction": "all x.(MeterStick(x) -> UsedToMeasureMeters(x))", "score": 0}
{"id": "eqasc_validation_1313", "prediction": "all x.(MeterStick(x) -> MeasuresMeters(x))", "score": 0}
{"id": "eqasc_validation_1313", "prediction": "all x y z.((MeterStick(x) & Meters(y) & Meters(z)) -> Measures(x,y,z))", "score": 0}
{"id": "eqasc_validation_1313", "prediction": "all x y.((MeterStick(x) & Meter(y)) -> Measures(x,y))", "score": 0}
{"id": "eqasc_validation_1313", "prediction": "all x y.((MeterStick(x) & MeterStick(y)) -> MeasuresMeters(x,y))", "score": 0}
{"id": "eqasc_validation_1313", "prediction": "all x y.((MeterStick(x) & Meter(y)) -> Mines(x,y))", "score": 0}
{"id": "eqasc_validation_1313", "prediction": "all x y.((MeasurementStick(x) & Meter(y)) -> Measure(x,y))", "score": 0}
{"id": "eqasc_validation_1314", "prediction": "all x y.((MeasuredDistances(x) & MeasuredDevice(y)) -> MeasureDistance(x,y))", "score": 0}
{"id": "eqasc_validation_1314", "prediction": "all x y z.((MeasuresDistance(x) & Measures(y,z)) -> UsesMeasuringDevice(x))", "score": 0}
{"id": "eqasc_validation_1314", "prediction": "all x y.((MeasuresDistances(x) & MeasuringDevice(y)) -> MeasuresWith(x,y))", "score": 0}
{"id": "eqasc_validation_1314", "prediction": "all x y.((Method(x) & MeasuresDistance(x,y)) -> UsesMeasuringDevice(x,y))", "score": 0}
{"id": "eqasc_validation_1314", "prediction": "all x.((MeasuresDistances(x) & MeasuresdWithDevice(x)) -> MeasuresDistances(x))", "score": 0}
{"id": "eqasc_validation_1314", "prediction": "all x y.((MeasuresDistances(x) & MeasuresDistance(y)) -> UsesMetaphor(x))", "score": 0}
{"id": "eqasc_validation_1314", "prediction": "all x.(MeasureDistances(x) -> UsingMeasuringDevice(x))", "score": 0}
{"id": "eqasc_validation_1314", "prediction": "all x.(ProblemMetameter(x) -> MeasuresDistances(x))", "score": 0}
{"id": "eqasc_validation_1314", "prediction": "all x y.((MeasuresDistances(x) & MeasuresDevice(y)) -> MeasuresInDevice(x,y))", "score": 0}
{"id": "eqasc_validation_1314", "prediction": "all x y.((Metameter(x) & Disk(y)) -> MeasureWith(x,y))", "score": 0}
{"id": "eqasc_validation_1314", "prediction": "all x y.((MeasuresDistances(x) & Device(y)) -> Uses(x,y))", "score": 0}
{"id": "eqasc_validation_1314", "prediction": "all x y z.((MeasuresDistance(x) & MeasuringDevice(y) & MeasuresDistancesWith(x,y),z)) -> MeasuresDistances(z))", "score": -1}
{"id": "eqasc_validation_1314", "prediction": "all x y.((MeasuredDistance(x) & MeasuredDevice(y)) -> Measures(x,y))", "score": 0}
{"id": "eqasc_validation_1314", "prediction": "all x.(MeasureDistances(x) -> MeasureDistances(x))", "score": 0}
{"id": "eqasc_validation_1314", "prediction": "all x y.((MeasuresDistances(x) & MeasuringDevice(y)) -> MeasuresDistances(x,y))", "score": 0}
{"id": "eqasc_validation_1314", "prediction": "all x y.((MeasuresDistances(x) & MeasuresDevice(y)) -> MeasuresDistances(x,y))", "score": 0}
{"id": "eqasc_validation_1315", "prediction": "all x.(MeasuringDevice(x) -> (MeterStick(x) & MeasuresDevice(x)))", "score": 0}
{"id": "eqasc_validation_1315", "prediction": "all x.(MeasurementDevice(x) -> MeasurementDevice(x))", "score": 0}
{"id": "eqasc_validation_1315", "prediction": "all x.(MeasuringDevice(x) -> MeasurementStick(x))", "score": 0}
{"id": "eqasc_validation_1315", "prediction": "all x.(MeterStick(x) -> MeasurementDevice(x))", "score": 0}
{"id": "eqasc_validation_1315", "prediction": "all x.(MeterStick(x) -> MeasuresDevice(x))", "score": 0}
{"id": "eqasc_validation_1315", "prediction": "all x y.((MeterStick(x) & MeasurementDevice(y)) -> MeasurementDevice(x,y))", "score": 0}
{"id": "eqasc_validation_1315", "prediction": "all x.((MeterStick(x) & MeasuringDevice(x)) -> Instrument(x))", "score": 0}
{"id": "eqasc_validation_1315", "prediction": "all x.(MeasurementStick(x) -> MeasuresDevice(x))", "score": 0}
{"id": "eqasc_validation_1315", "prediction": "all x.(MeasuringDevice(x) -> (MeterStick(x) & MeasurementDevice(x)))", "score": 0}
{"id": "eqasc_validation_1315", "prediction": "all x y z.((MeasurementStick(x) & Device(y) & Measures(x,z)) -> Measurements(z))", "score": 0}
{"id": "eqasc_validation_1315", "prediction": "all x.(MeterStick(x) -> MeasureingDevice(x))", "score": 0}
{"id": "eqasc_validation_1316", "prediction": "all x.((BoatBrokerage(x) | BoatDemandator(x)) -> WithinWalkingDistance(x))", "score": 0}
{"id": "eqasc_validation_1316", "prediction": "all x y.((BoatBrokerage(x) & BoatDemandant(y)) -> InWalkingDistance(x,y))", "score": 0}
{"id": "eqasc_validation_1316", "prediction": "all x.(BoatBrokerage(x) & BoatDepot(x)) -> WalkableDistance(x))", "score": -1}
{"id": "eqasc_validation_1316", "prediction": "all x y.((BoatBrokerage(x) & BoatDealand(y)) -> (LocatedWithinWalkingDistance(x,y) & WalkingDistance(x,d)))", "score": 0}
{"id": "eqasc_validation_1316", "prediction": "all x.(BoatBrokerage(x) & BoatDepot(x)) -> LocatedWithinWalkingDistance(x))", "score": -1}
{"id": "eqasc_validation_1316", "prediction": "all x.(BoatBrokerage(x) & BoatDepot(x))", "score": 0}
{"id": "eqasc_validation_1316", "prediction": "all x.((BoatBroking(x) | BoatDealroom(x)) -> WithinWalkingDistance(x))", "score": 0}
{"id": "eqasc_validation_1316", "prediction": "all x.((BoatBrokerage(x) | BoatDealroom(x)) -> WithinWalkingDistance(x))", "score": 0}
{"id": "eqasc_validation_1316", "prediction": "all x.(BoatBrokerage(x) -> (DirectlyAcrossWalkingDistance(x) | DirectlyAcrossWalkingDistance(x)))", "score": 0}
{"id": "eqasc_validation_1316", "prediction": "all x.(BoatBrokerage(x) & BoatDepot(x)) -> WithinWalkingDistance(x))", "score": -1}
{"id": "eqasc_validation_1316", "prediction": "all x.((BoatBrokerage(x) | BoatDepot(x)) -> WithinWalkingDistance(x))", "score": 0}
{"id": "eqasc_validation_1316", "prediction": "all x.(Brokerage(x) -> (exists y.(MarineDelivery(y) & LocatedWithinWalkingDistance(y)))", "score": -1}
{"id": "eqasc_validation_1316", "prediction": "all x y.((BoatBrokerage(x) & BoatDelivery(y)) -> (LocatedInWalkingDistance(x,y) & LocatedInWalkingDistance(x,z)))", "score": 0}
{"id": "eqasc_validation_1316", "prediction": "all x y.((BoatBrokerage(x) & BoatDemandator(y)) -> LocatedWithinWalkingDistance(x,y))", "score": 0}
{"id": "eqasc_validation_1316", "prediction": "all x y.((BoatBrokerage(x) & BoatDepot(y)) -> (LocatedWithinWalkingDistance(x,y) & LocatedWithinWalkingDistance(y)))", "score": 0}
{"id": "eqasc_validation_1316", "prediction": "all x.((BoatBrokerage(x) & BoatDeliveration(x)) -> WithinWalkingDistance(x))", "score": 0}
{"id": "eqasc_validation_1317", "prediction": "all x y z.((Buybrokers(x) & BoatDemandator(y) & MeterStick(z)) -> MeasuredPath(x,y,z))", "score": 0}
{"id": "eqasc_validation_1317", "prediction": "all x y z.((BoatBrokers(x) & BoatDealroomPlace(y) & MeterStick(z)) -> MeasuresPathWith(x,y,z))", "score": 0}
{"id": "eqasc_validation_1317", "prediction": "all x y z.((Shore(x) & BoatBrokers(y) & DealershipLocation(z) & MeasuresPath(x,y,z)) -> (Landmark(y,z) & MeasuresPath(x,z)))", "score": 0}
{"id": "eqasc_validation_1317", "prediction": "all x y z.((BoatBrokery(x) & BoatDemandation(y) & MeterStick(z)) -> MeasuresPathBetween(z,y))", "score": 0}
{"id": "eqasc_validation_1317", "prediction": "all x y z.((BoatBrokers(x) & BoatDemandatorLayouts(y) & MeterStick(z)) -> MeasuredPath(z,y))", "score": 0}
{"id": "eqasc_validation_1317", "prediction": "all x y.((BoatBrokers(x) & BoatDealer(y)) -> MeasuresPathWithMeterStick(x,y))", "score": 0}
{"id": "eqasc_validation_1317", "prediction": "all x y z.((Trails(x) & BoatBrokers(y) & DealershipLocations(z) & MessedByMeterStick(x)) -> BetweenBranchLocationsAndDemandations(y,z))", "score": 0}
{"id": "eqasc_validation_1317", "prediction": "all x y z.((BoatBrokery(x) & BoatDemandation(y) & MeterStick(z)) -> PathMeasuredBy(z,y,z))", "score": 0}
{"id": "eqasc_validation_1317", "prediction": "all x.((Path(x) & BetweenBoatBrokeragesAndDemandations(x)) -> MeasuredByMeterStick(x))", "score": 0}
{"id": "eqasc_validation_1317", "prediction": "all x y.((BoatBrokerage(x) & BoatDemandation(y)) -> MeasuredByMeterStick(x,y))", "score": 0}
{"id": "eqasc_validation_1317", "prediction": "all x y z.((BoatBrokery(x) & BoatDelivery(y) & MeterStick(z)) -> MeasuresPathFrom(z,y))", "score": 0}
{"id": "eqasc_validation_1317", "prediction": "all x y.((BoatBrokers(x) & BoatDemandant(y) & LocatedIn(x,y)) -> MeasurablePath(x,y))", "score": 0}
{"id": "eqasc_validation_1317", "prediction": "all x y.((BoatBrokers(x) & BoatDemandatorLocations(y) & MeasuresPathByMeterStick(x,y)) -> MeasuresPathByMeasurement(x,y))", "score": 0}
{"id": "eqasc_validation_1317", "prediction": "all x y z.((BoatBrokers(x) & BoatCommunity(y) & Dealer(z)) -> (MeasuresPath(x,y,z) & MeterStick(x,y)))", "score": 0}
{"id": "eqasc_validation_1317", "prediction": "all x y.((BoatBrokerage(x) & BoatDemandation(y)) -> MeasuresPath(x,y))", "score": 0}
{"id": "eqasc_validation_1317", "prediction": "all x y.((MeasurementStick(x) & BoatBrokers(y) & DealerHouse(y)) -> MeasuresPathBy(x,y))", "score": 0}
{"id": "eqasc_validation_1318", "prediction": "all x y.((MeterStick(x) & (Centimeter(y) | Millimeter(y))) -> HasUnit(x,y))", "score": 0}
{"id": "eqasc_validation_1318", "prediction": "all x.(Measurestick(x) -> (HasCentimeters(x) & HasMillimeters(x)))", "score": 0}
{"id": "eqasc_validation_1318", "prediction": "all x y.((MeasureStick(x) & Centimeter(y)) -> HasUnit(x,y))", "score": 0}
{"id": "eqasc_validation_1318", "prediction": "all x.(Measurestick(x) -> (HasCentimeters(x) | HasMillimeters(x)))", "score": 0}
{"id": "eqasc_validation_1318", "prediction": "all x.(MeterStick(x) -> (Centimeter(x) | Millimeter(x)))", "score": 0}
{"id": "eqasc_validation_1318", "prediction": "all x.(MeterStick(x) -> (HasCentrics(x) | HasMillimeters(x)))", "score": 0}
{"id": "eqasc_validation_1318", "prediction": "all x.(MeterStick(x) -> (HasCentimeters(x) | HasMillimeters(x)))", "score": 0}
{"id": "eqasc_validation_1318", "prediction": "all x.(Measurestick(x) -> (Centimeter(x) | Millimeter(x)))", "score": 0}
{"id": "eqasc_validation_1318", "prediction": "all x.(MeterStick(x) -> (HasUnits(x,centimeters) | HasUnits(x,millimeters)))", "score": 0}
{"id": "eqasc_validation_1318", "prediction": "all x.(MeterStick(x) -> (Has(x,centimeter) | Has(x,millimeter)))", "score": 0}
{"id": "eqasc_validation_1318", "prediction": "all x.(MeterStick(x) -> (HasCentimeter(x) & HasMillimeter(x)))", "score": 0}
{"id": "eqasc_validation_1318", "prediction": "all x.(MeasurementStick(x) -> (HasUnit(x,centimeter) & HasUnit(x,millimeter)))", "score": 0}
{"id": "eqasc_validation_1318", "prediction": "all x.(MeterStick(x) -> (HasCentrice(x) | HasMillimeter(x)))", "score": 0}
{"id": "eqasc_validation_1318", "prediction": "all x.(MeasurementStick(x) -> (Concentimeter(x) | Millimeter(x)))", "score": 0}
{"id": "eqasc_validation_1318", "prediction": "all x.(MeterStick(x) -> (HasCentrices(x) | HasMillimeters(x)))", "score": 0}
{"id": "eqasc_validation_1319", "prediction": "all x.((Centric(x) & Millimeter(x)) -> DistanzUnits(x))", "score": 0}
{"id": "eqasc_validation_1319", "prediction": "all x.((Centimeter(x) | Millimeter(x)) -> Distance(x))", "score": 0}
{"id": "eqasc_validation_1319", "prediction": "all x.((Centimeter(x) | Millimeter(x)) -> UnitOfDistance(x))", "score": 0}
{"id": "eqasc_validation_1319", "prediction": "all x y.((Centimeter(x) | Millimeter(y)) -> DistanceUnit(x,y))", "score": 0}
{"id": "eqasc_validation_1319", "prediction": "all x.((Centric(x) | Millimeter(x)) -> DispersionUnit(x))", "score": 0}
{"id": "eqasc_validation_1319", "prediction": "all x y.((Centimeter(x) & Millimeter(y)) -> DistanceUnit(x))", "score": 0}
{"id": "eqasc_validation_1319", "prediction": "all x.((Centimeter(x) | Millimeter(x)) -> DistanceUnit(x))", "score": 0}
{"id": "eqasc_validation_1319", "prediction": "all x.((Centimeter(x) | Millimeter(x)) -> DistinctionUnit(x))", "score": 0}
{"id": "eqasc_validation_1319", "prediction": "all x y.((Centimeter(x) | Millimeter(x)) -> DistanceUnit(x))", "score": 0}
{"id": "eqasc_validation_1320", "prediction": "all x.(Distance(x) -> (InMeters(x) & ByTheWay(x)))", "score": 0}
{"id": "eqasc_validation_1320", "prediction": "all x.(Distance(x) -> (InMelts(x) & byTheAid(x)))", "score": 0}
{"id": "eqasc_validation_1320", "prediction": "all x.(Distance(x) -> (Meters(x) | -Meters(x)))", "score": 0}
{"id": "eqasc_validation_1320", "prediction": "all x.(Distance(x) -> (Memmeter(x) & ByTheMove(x)))", "score": 0}
{"id": "eqasc_validation_1320", "prediction": "all x.(Distance(x) -> (Meters(x) | Way(x)))", "score": 0}
{"id": "eqasc_validation_1320", "prediction": "all x.(Distance(x) -> (Measured(x) & Way(x)))", "score": 0}
{"id": "eqasc_validation_1320", "prediction": "all x.(Distance(x) -> exists y.Metrometer(y) & BYWay(x,y)))", "score": -1}
{"id": "eqasc_validation_1320", "prediction": "all x.(Distance(x) -> (InMetrics(x) & ByTheMetrics(x)))", "score": 0}
{"id": "eqasc_validation_1320", "prediction": "all x.(Distance(x) -> (InMeters(x) & InMeters(x)))", "score": 0}
{"id": "eqasc_validation_1320", "prediction": "all x.(Distance(x) -> (InMeters(x) & ByTheByTheByTheByTheBy(x)))", "score": 0}
{"id": "eqasc_validation_1320", "prediction": "all x.(Distance(x) -> (Memory(x) & ByTheWay(x)))", "score": 0}
{"id": "eqasc_validation_1320", "prediction": "all x.(Distance(x) -> (Mean(x) & BytheGod(x)))", "score": 0}
{"id": "eqasc_validation_1320", "prediction": "all x.(Distance(x) -> (InMesh(x) & ByTheMan(x)))", "score": 0}
{"id": "eqasc_validation_1320", "prediction": "all x.(Distance(x) -> (Meter(x) & ByTheWay(x)))", "score": 0}
{"id": "eqasc_validation_1320", "prediction": "all x.(Distance(x) -> (Meters(x) | ByWay(x)))", "score": 0}
{"id": "eqasc_validation_1321", "prediction": "all x y z.((MeterStick(x) & Meter(y) & Meter(z)) -> MeasuresMelters(x,y))", "score": 0}
{"id": "eqasc_validation_1321", "prediction": "all x y z.((MeterStick(x) & MeasuresMeters(y) & Meters(z)) -> MeasuresMeters(x,y,z))", "score": 0}
{"id": "eqasc_validation_1321", "prediction": "all x y.((MeterStick(x) & Meter(y)) -> Measures(x,y))", "score": 0}
{"id": "eqasc_validation_1321", "prediction": "all x.(MeasuresMeters(x) -> MeterSteg(x))", "score": 0}
{"id": "eqasc_validation_1321", "prediction": "all x.(MeterStick(x) -> MeasuresMeters(x))", "score": 0}
{"id": "eqasc_validation_1321", "prediction": "all x.(MeterStick(x) -> MeasuresMagnetics(x))", "score": 0}
{"id": "eqasc_validation_1321", "prediction": "all x y.((MeasuremeterStick(x) & Meter(y)) -> MeasuresMeasurements(x,y))", "score": 0}
{"id": "eqasc_validation_1321", "prediction": "all x y.((MeterStick(x) & Meter(y)) -> MeasuresMeters(x,y))", "score": 0}
{"id": "eqasc_validation_1321", "prediction": "all x.(MeasuresMeters(x) -> MeasuresMeters(x))", "score": 0}
{"id": "eqasc_validation_1322", "prediction": "all x y.((Person(x) & Object(y)) -> DifferentDistance(x,y))", "score": 0}
{"id": "eqasc_validation_1322", "prediction": "all x y.((Person(x) & Person(y)) -> PlacedAtDistance(x,y))", "score": 0}
{"id": "eqasc_validation_1322", "prediction": "all x y.((Person(x) & Object(y)) -> PlacedAtDistanceFrom(x,y))", "score": 0}
{"id": "eqasc_validation_1322", "prediction": "all x y.((Person(x) & Object(y)) -> DifferentDistanceFrom(x,y))", "score": 0}
{"id": "eqasc_validation_1322", "prediction": "all x.(Place(x,y) -> DifferentDistanceFromObject(y))", "score": 0}
{"id": "eqasc_validation_1322", "prediction": "all x y.((Person(x) & Object(y)) -> SetAtDistanceFrom(x,y))", "score": 0}
{"id": "eqasc_validation_1322", "prediction": "exists x.(Person(x) & PlacedAtDistance(x,y) & Object(y))", "score": 0}
{"id": "eqasc_validation_1322", "prediction": "all x y.(ProportionalDistance(x) & Object(y) & DifferentDistance(x,y))", "score": 0}
{"id": "eqasc_validation_1322", "prediction": "all x y.((Person(x) & Object(y)) -> PutsAtDifferentDistance(x,y))", "score": 0}
{"id": "eqasc_validation_1322", "prediction": "all x.(Place(x) -> DistantDistance(x))", "score": 0}
{"id": "eqasc_validation_1322", "prediction": "all x.(Personne(x) & PlacesAtDistance(x,b))", "score": 0}
{"id": "eqasc_validation_1322", "prediction": "all x.(Person(x) -> DifferentDistanceFromObject(x))", "score": 0}
{"id": "eqasc_validation_1322", "prediction": "all x y.((Person(x) & Object(y)) -> DistinctDistanceFrom(x,y))", "score": 0}
{"id": "eqasc_validation_1323", "prediction": "all x y z.((MeterStick(x) & Person(y) & Object(z)) -> MeasuresBetween(x,y,z))", "score": 0}
{"id": "eqasc_validation_1323", "prediction": "all x y.((MeterStick(x) & Person(y)) -> MeasuresBetween(x,y))", "score": 0}
{"id": "eqasc_validation_1323", "prediction": "all x y z.(MeterStick(x) -> MeasuresBetween(x,y,z))", "score": 0}
{"id": "eqasc_validation_1323", "prediction": "all x.(MeterStick(x) -> MeasuresBetweenPersonAndObject(x))", "score": 0}
{"id": "eqasc_validation_1323", "prediction": "all x.(MeterStick(x) -> MeasuresBorderAndObject(x))", "score": 0}
{"id": "eqasc_validation_1323", "prediction": "all x y.((MeterStick(x) & Person(y)) -> UsedToMeasure(x,y))", "score": 0}
{"id": "eqasc_validation_1323", "prediction": "all x y.((MeterStick(x) & Person(y) & Object(y)) | MeasuresBetween(x,y))", "score": 0}
{"id": "eqasc_validation_1323", "prediction": "all x y z.((MeterStick(x) & Person(y) & Object(z)) -> UsedToMeasure(x,y,z))", "score": 0}
{"id": "eqasc_validation_1323", "prediction": "all x y.((MeterStick(x) & Person(y) & Object(y)) -> MeasuresBetween(x,y))", "score": 0}
{"id": "eqasc_validation_1323", "prediction": "all x y.((MeterStick(x) & Person(y)) -> MeasuresBetweenObject(x,y))", "score": 0}
{"id": "eqasc_validation_1324", "prediction": "all x.(MetricStick(x) -> (100Cm(x)))", "score": 0}
{"id": "eqasc_validation_1324", "prediction": "all x.(MeterStick(x) -> MeasuresInCms(x))", "score": 0}
{"id": "eqasc_validation_1324", "prediction": "(MeasurementStick(MeilingStick) £100(MeilingStick))", "score": -1}
{"id": "eqasc_validation_1324", "prediction": "all x.(MeterStick(x) -> (100Cm(x)))", "score": 0}
{"id": "eqasc_validation_1324", "prediction": "all x.(MeterStick(x) -> is100Cm(x))", "score": 0}
{"id": "eqasc_validation_1324", "prediction": "Meterstick(m)", "score": 0}
{"id": "eqasc_validation_1324", "prediction": "everything about the MeterStick(meter,100)", "score": -1}
{"id": "eqasc_validation_1324", "prediction": "all x.(MeterStick(x) -> Size(x,100))", "score": 0}
{"id": "eqasc_validation_1324", "prediction": "(MinuteStick(MSStick) & 100Cm(MSStick))", "score": 0}
{"id": "eqasc_validation_1324", "prediction": "all x.(MeterStick(x) -> 100Cm(x))", "score": 0}
{"id": "eqasc_validation_1324", "prediction": "-100CmStick(meter)", "score": 0}
{"id": "eqasc_validation_1324", "prediction": "All x.(MeterStick(x) -> Size100cm(x))", "score": -1}
{"id": "eqasc_validation_1324", "prediction": "(100 cm)", "score": -1}
{"id": "eqasc_validation_1324", "prediction": "ManifoldsBlock(Mesh,100)", "score": 0}
{"id": "eqasc_validation_1324", "prediction": "all x.(MeterStick(x) -> HasCinnamon(x,100))", "score": 0}
{"id": "eqasc_validation_1325", "prediction": "all x.((100 cm(x) & Meter(x)) -> Meter(x))", "score": -1}
{"id": "eqasc_validation_1325", "prediction": "all x.((Cylinder(x) & 100(x)) -> Meter(x))", "score": 0}
{"id": "eqasc_validation_1325", "prediction": "all x.((SixtyCm(x) & Meter(x)) -> Meter(x))", "score": 0}
{"id": "eqasc_validation_1325", "prediction": "all x.((100 cms(x) & Meter(x)) -> Meter(x))", "score": -1}
{"id": "eqasc_validation_1325", "prediction": "all x.(((100 cm(x) & Meter(x)) -> Meter(x))", "score": -1}
{"id": "eqasc_validation_1325", "prediction": "all x y.((100 cm(x) & Meter(y) & 100 cm(x)) -> Meter(y))", "score": -1}
{"id": "eqasc_validation_1325", "prediction": "all x.((100Cm(x) & Meter(x) & Measurement(x)) -> Meter(x))", "score": 0}
{"id": "eqasc_validation_1325", "prediction": "all x.(CurrentMeter(x) -> Meter(x))", "score": 0}
{"id": "eqasc_validation_1325", "prediction": "all x.((HasCell(x,100) & Meter(x)) -> Meter(x))", "score": 0}
{"id": "eqasc_validation_1325", "prediction": "all x.((100Cm(x) & Meter(x)) -> MeterFor(x))", "score": 0}
{"id": "eqasc_validation_1325", "prediction": "all x.((100cm(x) & Meter(x)) -> Meter(x))", "score": 0}
{"id": "eqasc_validation_1325", "prediction": "all x.((Current(x) & Meter(x)) -> Meter(x))", "score": 0}
{"id": "eqasc_validation_1325", "prediction": "all x.((100Cm(x) & Meter(x)) -> Meter(x))", "score": 0}
{"id": "eqasc_validation_1326", "prediction": "all x.((Stick(x) & 100Cm(x)) -> MeasuresDistance(x))", "score": 0}
{"id": "eqasc_validation_1326", "prediction": "all x.(Stick(x) -> MeasuresDistance(x,100))", "score": 0}
{"id": "eqasc_validation_1326", "prediction": "all x.((Stick(x) & 100CmStick(x)) -> MeasuredDistance(x))", "score": 0}
{"id": "eqasc_validation_1326", "prediction": "all x.((Stick(x) & 100Cm(x)) -> MeasureDistance(x))", "score": 0}
{"id": "eqasc_validation_1326", "prediction": "all x.((Stick(x) & 100Cms(x)) -> MeasuresDistance(x))", "score": 0}
{"id": "eqasc_validation_1326", "prediction": "all x.((Stick(x) & MeasuresDistance(x,100)) -> UsedToMeasure(x,100))", "score": 0}
{"id": "eqasc_validation_1326", "prediction": "all x.((Stick(x) & 100Cm(x)) -> MeasuredDistance(x))", "score": 0}
{"id": "eqasc_validation_1326", "prediction": "all x.(100cmStick(x) -> UsedToMeasureDistance(x))", "score": 0}
{"id": "eqasc_validation_1326", "prediction": "all x y.((Stick(x,y) & Square(y,200)) -> MeasuresDistance(x,y))", "score": 0}
{"id": "eqasc_validation_1326", "prediction": "all x.(Stick(x,100) -> MeasureDistance(x))", "score": 0}
{"id": "eqasc_validation_1326", "prediction": "all x.(Stick(x,100) -> MeasuresDistance(x))", "score": 0}
{"id": "eqasc_validation_1326", "prediction": "all x.((Stick(x) & -100Cm(x)) -> (MeasureDistance(x)))", "score": 0}
{"id": "eqasc_validation_1326", "prediction": "all x.((Stick(x) & MeasuresDistance(x,100)) -> Used(x))", "score": 0}
{"id": "eqasc_validation_1326", "prediction": "all x.((Stick(x) & 100Cm(x)) -> UsedToMeasureDistance(x))", "score": 0}
{"id": "eqasc_validation_1327", "prediction": "all x.(Space(x) -> DistanceBetween(x))", "score": 0}
{"id": "eqasc_validation_1327", "prediction": "all x.(Space(x) -> Disk(x))", "score": 0}
{"id": "eqasc_validation_1327", "prediction": "all x.(Space(x) -> DistantBetween(x))", "score": 0}
{"id": "eqasc_validation_1327", "prediction": "all x.(Space(x) -> DistinctionBetween(x))", "score": 0}
{"id": "eqasc_validation_1327", "prediction": "all x.(Space(x) -> Distant(x))", "score": 0}
{"id": "eqasc_validation_1327", "prediction": "(Space(Space) & SpaceBetween(Space,Space))", "score": 0}
{"id": "eqasc_validation_1327", "prediction": "all x.(Space(x) -> DistanceOrVisibility(x))", "score": 0}
{"id": "eqasc_validation_1328", "prediction": "all x.(MeterStick(x) -> MeasuresSpaceBetweenThings(x))", "score": 0}
{"id": "eqasc_validation_1328", "prediction": "all x y.((MeterStick(x) & Things(y)) -> UsedToMeasureSpaceBetween(x,y))", "score": 0}
{"id": "eqasc_validation_1328", "prediction": "to measureSpaceBetweenThings(meterstick)", "score": -1}
{"id": "eqasc_validation_1328", "prediction": "all x.(MeterStick(x) -> UsesToMeasureSpaceByThings(x))", "score": 0}
{"id": "eqasc_validation_1328", "prediction": "all x y.((MeasureStick(x) & MeasuresSpace(x)) -> UsedForMeasurement(x))", "score": 0}
{"id": "eqasc_validation_1328", "prediction": "all x y z w.((MeterStick(x) & Place(z) & Things(w)) -> MeasuresSpaceBetweenWhatTodgets(x,m,e,w,y))", "score": 0}
{"id": "eqasc_validation_1328", "prediction": "all x y z.((UsedToMeasureSpace(x) & MeterStick(y) & Things(z) & MeasureSpace(y,z)) -> MeasuresSpaceBetweenThings(y,z))", "score": 0}
{"id": "eqasc_validation_1328", "prediction": "all x y.((MeterStick(x) & Things(y)) -> MeasuresSpaceBetween(x,y))", "score": 0}
{"id": "eqasc_validation_1328", "prediction": "all x y z.((MeterStick(x) & Space(y) & Things(z)) -> Measures(x,y,z))", "score": 0}
{"id": "eqasc_validation_1328", "prediction": "all x.(MeterStick(x) -> UsedToMeasureSpaceBetweenThings(x))", "score": 0}
{"id": "eqasc_validation_1328", "prediction": "all x y z.((MeterStick(x) & SpaceBetweenThings(y) & Something(z)) -> MeasuresSpreadBetweenThings(x,y,z))", "score": 0}
{"id": "eqasc_validation_1328", "prediction": "all x y.((MeterStick(x) & Things(y)) -> MeasuresSpaceWhen(x,y))", "score": 0}
{"id": "eqasc_validation_1328", "prediction": "all x y.((MeterStick(x) & Time(y)) -> MeasuresSpaceBetweenThings(x,y))", "score": 0}
{"id": "eqasc_validation_1328", "prediction": "all x.(MeterStick(x) -> UsedToMeasureSpaceBetweenTHINGs(x))", "score": 0}
{"id": "eqasc_validation_1328", "prediction": "all x y.((MeterStick(x) & Things(y)) -> MeasuresLanguage(x,y))", "score": 0}
{"id": "eqasc_validation_1329", "prediction": "all x.(Length(x) -> (RefersToTime(x) & RefersToDistance(x)))", "score": 0}
{"id": "eqasc_validation_1329", "prediction": "all x.(Length(x) -> (TimeOfRide(x) & DistanceAvailable(x)))", "score": 0}
{"id": "eqasc_validation_1329", "prediction": "all x y.((RideTime(x) & RiderDistance(y)) -> EndsLength(x))", "score": 0}
{"id": "eqasc_validation_1329", "prediction": "(RefersToLength(TeethRide(t) & RefersToDistances(t))", "score": -1}
{"id": "eqasc_validation_1329", "prediction": "all x.(Length(x) -> (TimeOfRide(x) & DistancesAvailable(x)))", "score": 0}
{"id": "eqasc_validation_1329", "prediction": "all x y.((Ride(x) & RideDistance(y)) -> (Time(x,y) & Distance(x,y)))", "score": 0}
{"id": "eqasc_validation_1329", "prediction": "all x.(HeightRefersTo(x,Time) & RefersTo(x,Distances))", "score": 0}
{"id": "eqasc_validation_1329", "prediction": "all x.(Length(x) -> (FastDistance(x) & Time(x) & Distance(x)))", "score": 0}
{"id": "eqasc_validation_1329", "prediction": "all x y.((Ride(x) & Length(y)) -> (Time(x,y) & Distance(y)))", "score": 0}
{"id": "eqasc_validation_1329", "prediction": "all x.(Length(x) -> (TimeOfRide(x) & Distances(x)))", "score": 0}
{"id": "eqasc_validation_1329", "prediction": "all x.((Ride(x) & Length(x)) -> (TimeOfRide(x) & DistancesAvailable(x)))", "score": 0}
{"id": "eqasc_validation_1329", "prediction": "ALL x.(Length(x) -> (Ride(x) & Ride(x) & RideDistance(x)))", "score": -1}
{"id": "eqasc_validation_1329", "prediction": "all x.(Length(x) -> (Distance(x) & Time(x,2) & Distance(x,1)))", "score": 0}
{"id": "eqasc_validation_1330", "prediction": "all x.(MeasuresLength(x) -> Measures(x,y))", "score": 0}
{"id": "eqasc_validation_1330", "prediction": "all x.(MeterStick(x) -> MeasureLength(x))", "score": 0}
{"id": "eqasc_validation_1330", "prediction": "all x.(MeterStick(x) -> UsedToMeasureLength(x))", "score": 0}
{"id": "eqasc_validation_1330", "prediction": "all x.(MeasurementStick(x) -> UsedToMeasureLength(x))", "score": 0}
{"id": "eqasc_validation_1330", "prediction": "all x.(MeterStick(x) -> MeasuresLength(x))", "score": 0}
{"id": "eqasc_validation_1330", "prediction": "all x y.((MeterStick(x) & MeasureLength(y)) -> UsedToMeasure(x,y))", "score": 0}
{"id": "eqasc_validation_1330", "prediction": "all x.(MeasureLengthWithMeasureStick(x) -> MeasuresLength(x))", "score": 0}
{"id": "eqasc_validation_1330", "prediction": "all x.(MeasureLaeth(x) -> MeasureLength(x))", "score": 0}
{"id": "eqasc_validation_1330", "prediction": "all x.(MeasureLength(x) -> UsesMeterStick(x))", "score": 0}
{"id": "eqasc_validation_1330", "prediction": "all x y.((MeasurementStick(x) & Latitude(y)) -> UsedFor(x,y))", "score": 0}
{"id": "eqasc_validation_1331", "prediction": "all x.(Distances(x) -> InFeet(x))", "score": 0}
{"id": "eqasc_validation_1331", "prediction": "all x.(Distance(x) -> InFeet(x))", "score": 0}
{"id": "eqasc_validation_1331", "prediction": "all x.(Distance(x) -> (InFeet(x)))", "score": 0}
{"id": "eqasc_validation_1331", "prediction": "all x.(Distance(x) -> AreInFeet(x))", "score": 0}
{"id": "eqasc_validation_1331", "prediction": "all x.(Distance(x) -> InFoot(x))", "score": 0}
{"id": "eqasc_validation_1331", "prediction": "all x.(Distance(x) -> (InFeet(x) | MeasuredInFeet(x)))", "score": 0}
{"id": "eqasc_validation_1332", "prediction": "all x y.((MeterStick(x) & Foot(y)) -> MeasureFeet(x,y))", "score": 0}
{"id": "eqasc_validation_1332", "prediction": "all x.((MeasuresFeetWithMeterStick(x)) -> UsedToMeasureFeet(x))", "score": 0}
{"id": "eqasc_validation_1332", "prediction": "all x y.((MeterStick(x) & Foot(y)) -> MeasuresFeet(x,y))", "score": 0}
{"id": "eqasc_validation_1332", "prediction": "all x y z.((MeterStick(x) & Feet(y) & Foot(z)) -> MeasuresAndMeasures(x,y,z))", "score": 0}
{"id": "eqasc_validation_1332", "prediction": "all x.((MeterStick(x) & MeasureFeet(x)) -> CanBeUsedToMeasureFeet(x))", "score": 0}
{"id": "eqasc_validation_1332", "prediction": "all x y.((MeterStick(x) & Foot(y)) -> MayMeasure(x,y))", "score": 0}
{"id": "eqasc_validation_1332", "prediction": "all x.((MeterStick(x) & FootMeasure(x)) -> CanBeUsedToMeasure(x,Meter(x))", "score": -1}
{"id": "eqasc_validation_1332", "prediction": "all x y z.((MeterStick(x) & Foot(y) & Foot(z)) -> Measures(x,y,z))", "score": 0}
{"id": "eqasc_validation_1332", "prediction": "all x.(MeterStick(x) -> MeasuresFeet(x))", "score": 0}
{"id": "eqasc_validation_1332", "prediction": "all x.(MeasuresFeet(x) -> (MeterStick(x) & MeasuresFeet(x)))", "score": 0}
{"id": "eqasc_validation_1332", "prediction": "all x.(MeasureFeet(x) -> (MeterStick(x) & MeasureFeet(x)))", "score": 0}
{"id": "eqasc_validation_1332", "prediction": "all x.(Measurefeather(x) -> CanMeasureFeet(x))", "score": 0}
{"id": "eqasc_validation_1332", "prediction": "all x.(MeterStick(x) -> MeasuresFoot(x))", "score": 0}
{"id": "eqasc_validation_1332", "prediction": "all x y z.((MeterStick(x) & Foot(y) & Foot(z)) -> MeasuresUsing(x,y,z))", "score": 0}
{"id": "eqasc_validation_1333", "prediction": "all x y.((TransactionMeasurement(x) & TransactionMeasurement(y)) -> Calculated(x,y))", "score": 0}
{"id": "eqasc_validation_1333", "prediction": "(HowTransactionMeasurements(x) & Calculated(x))", "score": 0}
{"id": "eqasc_validation_1333", "prediction": "how transactionMeasurementsDocuments(x)", "score": -1}
{"id": "eqasc_validation_1333", "prediction": "(HowTransactionMeasurements(x) -> Calculated(x))", "score": 0}
{"id": "eqasc_validation_1333", "prediction": "HowTransactionMeasurements(x)", "score": 0}
{"id": "eqasc_validation_1333", "prediction": "how transaction measurements are calculated.", "score": -1}
{"id": "eqasc_validation_1333", "prediction": "all x y.((TransactionMeasurement(x) & Transaction(y)) -> Calculated(x))", "score": 0}
{"id": "eqasc_validation_1333", "prediction": "UsefulForMeasurement(x)", "score": 0}
{"id": "eqasc_validation_1333", "prediction": "all x.(Measurement(x) -> Calculated(x))", "score": 0}
{"id": "eqasc_validation_1333", "prediction": "How TransactionMeasurementsRepresent(x)", "score": -1}
{"id": "eqasc_validation_1333", "prediction": "(MethodsofTransaction(x) & Calculated(x))", "score": 0}
{"id": "eqasc_validation_1333", "prediction": "-Compounded(TaxationMeasurements)", "score": 0}
{"id": "eqasc_validation_1333", "prediction": "all x.(TransactionMethod(x) -> Calculated(x))", "score": 0}
{"id": "eqasc_validation_1333", "prediction": "all x.(TransactionMeasurement(x) -> CalculatedOn(x))", "score": 0}
{"id": "eqasc_validation_1333", "prediction": "(Methods(transaction) & Calculated(transaction))", "score": 0}
{"id": "eqasc_validation_1333", "prediction": "exists x y.(TransactionMeasurement(x) & TransactionMethod(y) & Calculated(x,y))", "score": 0}
{"id": "eqasc_validation_1334", "prediction": "all x y,x.((MeterStick(x) & Distance(y)) -> Calculates(x,y,z))", "score": -1}
{"id": "eqasc_validation_1334", "prediction": "all x.(MeterStick(x) -> CalculateDistance(x))", "score": 0}
{"id": "eqasc_validation_1334", "prediction": "all x y.((MeterStick(x) & Distance(y)) -> Calculates(x,y))", "score": 0}
{"id": "eqasc_validation_1334", "prediction": "all x.(MeterStick(x) -> CalculatesDistance(x))", "score": 0}
{"id": "eqasc_validation_1334", "prediction": "all x y.((MeasurementStick(x) & Distance(y)) -> CalculatesDistance(x,y))", "score": 0}
{"id": "eqasc_validation_1334", "prediction": "all x y z.((MeterStick(x) & Distance(y) & Distance(z)) -> Calculate(x,y,z))", "score": 0}
{"id": "eqasc_validation_1334", "prediction": "all x y.((MeterStick(x) & Distance(y)) -> CalculatedUsing(x,y))", "score": 0}
{"id": "eqasc_validation_1334", "prediction": "all x y.((MessStick(x) & Distance(y)) -> Calculates(x,y))", "score": 0}
{"id": "eqasc_validation_1334", "prediction": "all x y.((MeterStick(x) & Distance(y)) -> CalculatesDistance(x,y))", "score": 0}
{"id": "eqasc_validation_1334", "prediction": "all x.(MeasurementStick(x) -> CalculatesDistance(x))", "score": 0}
{"id": "eqasc_validation_1334", "prediction": "all x y.((MeterStick(x) & DistanceColumn(y) & Calculate(x,y)) -> UsedToCalculate(x,y))", "score": 0}
{"id": "eqasc_validation_1335", "prediction": "LossOfOzoneCreatesOzoneHoleOverAntarctica(x))", "score": -1}
{"id": "eqasc_validation_1335", "prediction": "(LossOfOzone(o) & CreatedOzoneHoleOverAntarctica(o))", "score": 0}
{"id": "eqasc_validation_1335", "prediction": "Various OzoneLossesCreatedOzoneHole(x)", "score": -1}
{"id": "eqasc_validation_1335", "prediction": "all x y.((LossOzone(x) & Antarctica(y)) -> CreatesOzoneHole(x,y))", "score": 0}
{"id": "eqasc_validation_1335", "prediction": "(LossOfOzone(o) -> CreatedOzoneHoleOverAntarctica(o))", "score": 0}
{"id": "eqasc_validation_1335", "prediction": "all x.(LossOfOzone(x) -> CreatedOzoneHoleOverAntarctica(x))", "score": 0}
{"id": "eqasc_validation_1335", "prediction": "all x.(LossOfOzone(x) -> CreatesOzoneHoleOverAntarctica(x))", "score": 0}
{"id": "eqasc_validation_1335", "prediction": "all x y.((LossOfOzone(x) & OzoneHole(y)) -> OverAntarctica(x,y))", "score": 0}
{"id": "eqasc_validation_1335", "prediction": "all x.(LossOzone(x) -> CreatedOzoneHoleOverAntarctica(x))", "score": 0}
{"id": "eqasc_validation_1335", "prediction": "all x y z.((LossOfOzone(x) & OzoneHole(y) & Antarctica(z)) -> CreatedOver(x,y,z))", "score": 0}
{"id": "eqasc_validation_1335", "prediction": "all x.((LossOfOzone(x) & CreatedOzoneHole(x)) -> OverAntarctica(x))", "score": 0}
{"id": "eqasc_validation_1335", "prediction": "all x y z.((LossOfOzone(x) & Antarctica(y) & OzoneHole(z)) -> CreatesOver(x,z))", "score": 0}
{"id": "eqasc_validation_1335", "prediction": "LOSSOZONE CREATESOzoneHole(x,Antarctica)", "score": -1}
{"id": "eqasc_validation_1335", "prediction": "all x y.((LossOfOzone(x) & Antarctica(y)) -> CreatedOzoneHole(x))", "score": 0}
{"id": "eqasc_validation_1335", "prediction": "(LossOfOzone(OzoneHoleOverAntarctica))", "score": 0}
{"id": "eqasc_validation_1335", "prediction": "all x y.((LossOfOzone(x) & Antarctica(y)) -> CreatesOzoneHole(x,y))", "score": 0}
{"id": "eqasc_validation_1336", "prediction": "all x.(Scientist(x) & UnderstandingOzoneDisruptiveCompatiblesModerateOzoneLoss(x))", "score": 0}
{"id": "eqasc_validation_1336", "prediction": "all x.((Scientist(x) & OzoneDisruptingIndustrialChemicals(x)) -> MajorCauseOfOzoneLoss(x))", "score": 0}
{"id": "eqasc_validation_1336", "prediction": "all x.(Scientist(x) -> (OzoneDisruptingIndustrielChemicals(x) & MajorCauseOfOzoneLoss(x)))", "score": 0}
{"id": "eqasc_validation_1336", "prediction": "all x y.((Scientist(x) & OzoneDestinatingIndustrialChemicals(y)) -> MajorCauseOfOzoneLoss(x))", "score": 0}
{"id": "eqasc_validation_1336", "prediction": "all x.(Earth(x) -> (OzoneDamagingIndustrialChemicals(x) & MajorCauseOfOzoneLoss(x)))", "score": 0}
{"id": "eqasc_validation_1336", "prediction": "all x y.((Scientist(x) & OzoneDisruptingIndustrialChemicals(y)) -> MajorCauseOfOzoneLoss(x))", "score": 0}
{"id": "eqasc_validation_1336", "prediction": "all x y.((Scientist(x) & OzoneDestroyingIndustrialChemistries(y)) -> MajorCauseOfOzoneLoss(x,y))", "score": 0}
{"id": "eqasc_validation_1336", "prediction": "all x.(Scientist(x) -> (OzoneDamagingIndustrialChemicals(x) & MajorCauseOfOzoneLoss(x)))", "score": 0}
{"id": "eqasc_validation_1336", "prediction": "all x.((Scientist(x) & OzoneDestroyingIndustrialChemicals(x)) -> MajorCauseOfOzoneLoss(x))", "score": 0}
{"id": "eqasc_validation_1336", "prediction": "all x.((Scientist(x) & OzoneAssassiningIndustrialChemicals(x)) -> MajorCauseOfOzoneLoss(x))", "score": 0}
{"id": "eqasc_validation_1336", "prediction": "all x y.((Scientist(x) & OzoneDisruptingIndustrialChemicals(y)) -> MajorCauseOfOzoneLoss(x,y))", "score": 0}
{"id": "eqasc_validation_1336", "prediction": "all x y.((Scientist(x) & OzoneDisruptingCorporate(y)) -> MajorCauseOfOzoneLoss(x,y))", "score": 0}
{"id": "eqasc_validation_1336", "prediction": "all x.((Scientist(x) & OzonDestinatingIndustrialChemicals(x)) -> MajorCauseOfOzoneLoss(x))", "score": 0}
{"id": "eqasc_validation_1336", "prediction": "all x y.((Scientist(x) & OzoneDisasterIndustrialChemistry(y)) -> MajorCauseOfOzoneLoss(x,y))", "score": 0}
{"id": "eqasc_validation_1336", "prediction": "all x.(Scientist(x) -> (OzoneDisruptingIndustrialChemicals(x) & MajorCauseOfOzoneLoss(x)))", "score": 0}
{"id": "eqasc_validation_1337", "prediction": "all x y z.((Chemicals(x) & Antarctica(y) & Ozone(z)) -> (CreatedHoleInOzone(x,z) & Over(x,y)))", "score": 0}
{"id": "eqasc_validation_1337", "prediction": "all x y z.((Chemicals(x) & Ozone(y) & Antarctica(z)) -> CreatedHoleInOzone(x,y))", "score": 0}
{"id": "eqasc_validation_1337", "prediction": "all x y z.((Chemicals(x) & Ozone(y) & Antarctica(z)) -> CreatedHoleInOzoneOver(x,y,z))", "score": 0}
{"id": "eqasc_validation_1337", "prediction": "all x y z.((Chemistry(x) & Ozone(y) & Antarctica(z)) -> CreatedHoleInOzone(x,y,z))", "score": 0}
{"id": "eqasc_validation_1337", "prediction": "all x y z.((Chemicals(x) & Ozone(y) & Antarctica(z)) -> CreatedHauseInOzone(x,y))", "score": 0}
{"id": "eqasc_validation_1337", "prediction": "all x.(Chemicals(x) -> CreatedHoleInOzone(x))", "score": 0}
{"id": "eqasc_validation_1337", "prediction": "all x y z.((Chemicals(x) & Antarctica(y) & Ozone(z) & CreatedHole(x,y,z)) -> OverwhelmsHabitat(x,y))", "score": 0}
{"id": "eqasc_validation_1337", "prediction": "all x y z.((Chemicals(x) & Ozone(y) & Antarctica(z)) -> CreatedHoleInOzoneOverAntarctica(x,y,z))", "score": 0}
{"id": "eqasc_validation_1337", "prediction": "all x y.((Chemicals(x) & Antarctica(y) & CreatedHoleInOzone(x,y)) -> CreatedToOzoneOverAntarctica(y,y))", "score": 0}
{"id": "eqasc_validation_1337", "prediction": "all x.(Chemicals(x) -> createdHoleInOzone(x))", "score": 0}
{"id": "eqasc_validation_1337", "prediction": "all x y z.((Chemicals(x) & Ozone(y) & Antarctica(z)) -> CreatedHoleInOzone(x,y,z))", "score": 0}
{"id": "eqasc_validation_1337", "prediction": "all x.(ChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsDevelopmentOzonePerfection", "score": -1}
{"id": "eqasc_validation_1337", "prediction": "all x y.((Chemicals(x) & Antarctica(y)) -> CreatedHoleInOzoneOver(x,y))", "score": 0}
{"id": "eqasc_validation_1337", "prediction": "all x y.((Chemicals(x) & Antarctica(y)) -> CreatedHoleInOzone(x,y))", "score": 0}
{"id": "eqasc_validation_1337", "prediction": "all x y.((Chemicals(x) & AntarcticaAntarctic(y)) -> CreatedHoleInOzoneOverZona(x,y))", "score": 0}
{"id": "eqasc_validation_1338", "prediction": "all x.(Antarctica(x) -> ThreatenedByOzone(x))", "score": 0}
{"id": "eqasc_validation_1338", "prediction": "all x.(Antarctica(x) -> ThreatenedOzoneLayer(x))", "score": 0}
{"id": "eqasc_validation_1338", "prediction": "all x y z.((OzoneLayer(x) & Antarctica(y) & Depletion(z)) -> ThreatenedBy(x,y))", "score": 0}
{"id": "eqasc_validation_1338", "prediction": "all x.((AntarcticAntarctica(x) & OzonLayer(x)) -> ThreatenedByDepletion(x))", "score": 0}
{"id": "eqasc_validation_1338", "prediction": "all x.((AntarcticaOzoneLayer(x) & ThreatenedByDepletion(x)) -> ThreatenedByDepletion(x))", "score": 0}
{"id": "eqasc_validation_1338", "prediction": "all x.(Antarctica(x) -> ThreatenedByOzoneLayer(x))", "score": 0}
{"id": "eqasc_validation_1338", "prediction": "all x.(Antarctica(x) -> ThreatenedByDepletion(x))", "score": 0}
{"id": "eqasc_validation_1338", "prediction": "exists x.(OzoneLayer(x) & ThreatenedBy(x,Depletion)) -> Antarctica(x))", "score": -1}
{"id": "eqasc_validation_1338", "prediction": "all x.((AntarcticOzoneLayer(x) & ThreatenedByDepletion(x)) -> ThreatenedByDepletion(x))", "score": 0}
{"id": "eqasc_validation_1338", "prediction": "all x.((OzoneLayer(x) & Antarctica(x)) -> ThreatenedByDepletion(x))", "score": 0}
{"id": "eqasc_validation_1338", "prediction": "all x.(OzoneLayer(x) -> ThreatenedByDepletion(x))", "score": 0}
{"id": "eqasc_validation_1338", "prediction": "(Depletion EndangeredOrbitalOzone(Antarctica))", "score": -1}
{"id": "eqasc_validation_1338", "prediction": "all x.((Antarctica(x) & OzonLayer(x)) -> ThreatenedByDepletion(x))", "score": 0}
{"id": "eqasc_validation_1338", "prediction": "all x y.((Antarctica(x) & OzoneLayer(y)) -> ThreatenedRedemption(x,y))", "score": 0}
{"id": "eqasc_validation_1338", "prediction": "all x.(AntarcticAntarcticOzoneLayer(x) -> ThreatenedByDepletion(x))", "score": 0}
{"id": "eqasc_validation_1339", "prediction": "all x y.((LossOfOzone(x) & OzoneHole(y)) -> CanMeanOzoneHole(x,y))", "score": 0}
{"id": "eqasc_validation_1339", "prediction": "all x.(LossOfOzone(x) -> OzoneHole(x))", "score": 0}
{"id": "eqasc_validation_1339", "prediction": "all x y.((LossOzone(x) & OzoneHole(y)) -> CanBeMean(x,y))", "score": 0}
{"id": "eqasc_validation_1339", "prediction": "all x.(LossOzone(x) -> CanBeOzoneHole(x))", "score": 0}
{"id": "eqasc_validation_1339", "prediction": "all x.(LossOfOzone(x) -> (OzoneHole(x) & OzoneHole(x)))", "score": 0}
{"id": "eqasc_validation_1339", "prediction": "all x.((LossOfOzone(x) & OzoneHole(x)) -> CanSupportEvent(x))", "score": 0}
{"id": "eqasc_validation_1339", "prediction": "all x.((LossOzone(x) & OzoneHole(x)) -> CanSignify(x,OzoneHole(x))", "score": -1}
{"id": "eqasc_validation_1339", "prediction": "all x.(LossOfOzone(x) -> MeansOzoneHole(x))", "score": 0}
{"id": "eqasc_validation_1339", "prediction": "all x.((LossOfOzone(x) & OpportunityHole(x)) -> LoomOzone(x))", "score": 0}
{"id": "eqasc_validation_1339", "prediction": "all x.((LossOzone(x) & OzoneHole(x)) -> HasOzone(x))", "score": 0}
{"id": "eqasc_validation_1339", "prediction": "all x.(LossOzone(x) -> OzoneHole(x))", "score": 0}
{"id": "eqasc_validation_1339", "prediction": "all x.((LossOzone(x) & OzoneHole(x)) -> OzoneHole(x))", "score": 0}
{"id": "eqasc_validation_1339", "prediction": "all x.((LossOfOzone(x) & OzoneHole(x)) -> Measurable(x))", "score": 0}
{"id": "eqasc_validation_1339", "prediction": "all x.(LossOzoneOzone(x) -> CanBeOzoneHole(x))", "score": 0}
{"id": "eqasc_validation_1339", "prediction": "all x.((LossOfOzone(x) & OzoneHole(x)) -> PossibleOzoneHole(x))", "score": 0}
{"id": "eqasc_validation_1340", "prediction": "all x.(GlobalWarming(x) -> HoleInOzoneLayer(x))", "score": 0}
{"id": "eqasc_validation_1340", "prediction": "all x.(GlobalWarming(x) -> HoleInOzoneLayerOverAntarctica(x))", "score": 0}
{"id": "eqasc_validation_1340", "prediction": "all x y.((GlobalWarming(x) & HoleInOzoneLayer(y)) -> OverAntarctica(x,y))", "score": 0}
{"id": "eqasc_validation_1340", "prediction": "all x y.((GlobalWarming(x) & HoleInOzoneLayer(y)) -> Over Antarctica(x))", "score": -1}
{"id": "eqasc_validation_1340", "prediction": "all x.(GlobalWarmingHole(x) -> OverAntarctica(x))", "score": 0}
{"id": "eqasc_validation_1340", "prediction": "all x.((HoleInOzoneLayer(x) & OverAntarctica(x)) -> GlobalWarming(x))", "score": 0}
{"id": "eqasc_validation_1340", "prediction": "all x.(GlobalWarming(x) -> (HoleInOzoneLayer(x) & OverAntarctica(x)))", "score": 0}
{"id": "eqasc_validation_1340", "prediction": "(GlobalWarming(h) -> HasHoleInOzoneLayer(h))", "score": 0}
{"id": "eqasc_validation_1340", "prediction": "all x y.((GlobalWarming(x) & HoleInOzoneLayer(y)) -> OverAntarctica(y))", "score": 0}
{"id": "eqasc_validation_1340", "prediction": "all x.((HoleInOzone(x) & Antarctica(x)) -> GlobalWarming(x))", "score": 0}
{"id": "eqasc_validation_1341", "prediction": "all x.(GlobalWarming(x) -> CreatedOzoneHole(x))", "score": 0}
{"id": "eqasc_validation_1341", "prediction": "all x y z.((GlobalWarming(x) & OzoneHole(y) & GlobalWarming(z)) -> Created(x,y))", "score": 0}
{"id": "eqasc_validation_1341", "prediction": "all x y z w.((GlobalWarming(x) & OzoneHole(y) & OzoneHole(z) & GlobalWarming(w)) -> Created(x,y,z,w))", "score": 0}
{"id": "eqasc_validation_1341", "prediction": "all x y.((GlobalWarming(x) & OzonHole(y)) -> Created(x,y))", "score": 0}
{"id": "eqasc_validation_1341", "prediction": "all x.(GlobalWarming(x) -> CreatesOzoneHole(x))", "score": 0}
{"id": "eqasc_validation_1341", "prediction": "all x y.((GlobalWarming(x) & OzoneHole(y)) -> Created(x,y))", "score": 0}
{"id": "eqasc_validation_1341", "prediction": "all x y z.((GlobalWarming(x) & OzonHole(y) & GlobalClimate(z)) -> CreatedOzoneHole(x,y,z))", "score": 0}
{"id": "eqasc_validation_1341", "prediction": "all x.(GlobalWarming(x) -> ThereOzoneHole(x))", "score": 0}
{"id": "eqasc_validation_1341", "prediction": "all x.(GlobalWarming(x) -> CreatedOzOzoneHole(x))", "score": 0}
{"id": "eqasc_validation_1341", "prediction": "all x.(GlobalWarming(x) -> CultivatedOzoneHole(x))", "score": 0}
{"id": "eqasc_validation_1341", "prediction": "all x.(GlobalWarming(x) -> hascreatedOzoneHole(x))", "score": 0}
{"id": "eqasc_validation_1341", "prediction": "all x y z.((GlobalWarming(x) & OzoneHole(y) & OzoneHole(z)) -> Creates(x,y,z))", "score": 0}
{"id": "eqasc_validation_1342", "prediction": "all x.(OzoneDepletion(x) -> CausesGlobalWarming(x))", "score": 0}
{"id": "eqasc_validation_1342", "prediction": "all x.(OzoneDepletion(x) -> GlobalWarming(x))", "score": 0}
{"id": "eqasc_validation_1342", "prediction": "all x y.((OzoneDepletion(x) & GlobalWarming(y)) -> Causes(x,y))", "score": 0}
{"id": "eqasc_validation_1343", "prediction": "all x y.((Hole(x) & Antarctica(y)) -> CausesGlobalWarming(x,y))", "score": 0}
{"id": "eqasc_validation_1343", "prediction": "all x y.((HoleOver(x,y) & Antarctica(y)) -> GlobalWarming(x))", "score": 0}
{"id": "eqasc_validation_1343", "prediction": "all x y.((Hole(x) & OverAntarctica(y)) -> CausesGlobalWarming(x,y))", "score": 0}
{"id": "eqasc_validation_1343", "prediction": "all x y z.(GlobalWarming(x) -> (HoleOverAntectica(x) & OverAntectica(y) & CausesGlobalWarming(z)))", "score": 0}
{"id": "eqasc_validation_1343", "prediction": "all x y.((HoleOver(x,y) & Antarctica(y)) -> CausesGlobalWarming(x))", "score": 0}
{"id": "eqasc_validation_1343", "prediction": "all x y.((Hole(x) & Antarctica(y)) -> GlobalWarming(x,y))", "score": 0}
{"id": "eqasc_validation_1343", "prediction": "all x.((Hole(x) & OverAntarctica(x)) -> CausesGlobalWarming(x))", "score": 0}
{"id": "eqasc_validation_1343", "prediction": "all x.((HoleOverAntartica(x) & CausesGlobalWarming(x)) -> CausesGlobalWarming(x))", "score": 0}
{"id": "eqasc_validation_1343", "prediction": "all x y.((HoleOver(x,z) & Antarctica(y)) -> CausesGlobalWarmering(x))", "score": 0}
{"id": "eqasc_validation_1343", "prediction": "all x.((HoleOverAntarctica(x) & CausesGlobalWarming(x)) -> CausesGlobalWarming(x))", "score": 0}
{"id": "eqasc_validation_1343", "prediction": "all x y.((HoleOverAntarctica(x) & Antarctica(y)) -> CausesGlobalWarming(x,y))", "score": 0}
{"id": "eqasc_validation_1343", "prediction": "all x y.((HoleOverAntarctica(x) & HoleOverAntarctica(y)) -> GlobalWarming(x))", "score": 0}
{"id": "eqasc_validation_1343", "prediction": "all x.((HoleOverAntartica(x) & GlobalWarming(x)) -> CausesGlobalWarming(x))", "score": 0}
{"id": "eqasc_validation_1344", "prediction": "Ozone Ozone is a natural ComponentOfAtmosphere(O.(Oxygen))", "score": -1}
{"id": "eqasc_validation_1344", "prediction": "Ozone Ozone is a natural component of the atmosphere.", "score": -1}
{"id": "eqasc_validation_1344", "prediction": "all x.(Ozone(x) -> NaturalComponentOfAtmosphere(x))", "score": 0}
{"id": "eqasc_validation_1344", "prediction": "Ozone (Ozone) - NaturalComponentOfAtmosphere.", "score": -1}
{"id": "eqasc_validation_1344", "prediction": "Ozone (NaturalComponentOfAtmosphere(ozone))", "score": 0}
{"id": "eqasc_validation_1344", "prediction": "Ozone (NaturalComponent(Ozone))", "score": 0}
{"id": "eqasc_validation_1344", "prediction": "Ozone Ozone is a NaturalComponentOfAtmosphere(OOC,ItalianAtmosphere)", "score": -1}
{"id": "eqasc_validation_1344", "prediction": "Ozone (Ozone isNaturalComponentOfAtmosphere(o))", "score": -1}
{"id": "eqasc_validation_1344", "prediction": "Ozone Ozone is a naturalcomponentofAtmosphere(Ozone)", "score": -1}
{"id": "eqasc_validation_1345", "prediction": "all x y z.((LossOfNaturalComponent(x) & Atmosphere(y) & Earth(z)) -> (CreatedHoleOverAntarctica(x,y,z) & CoastalAtmosphere(y) & OverAntarctica(z)))", "score": 0}
{"id": "eqasc_validation_1345", "prediction": "all x.((LossOfNaturalAtmosphereComponent(x) & Atmosphere(x)) -> CreatedHoleOverAntarctica(x))", "score": 0}
{"id": "eqasc_validation_1345", "prediction": "all x y.((LossOfNaturalComponentOfAtmosphere(x) & LossOfNaturalComponentOfAtmosphere(x)) -> CreatedHoleOverAntarctica(y))", "score": 0}
{"id": "eqasc_validation_1345", "prediction": "all x y z.((LossOfNaturalComponentOfAtmosphere(x) & NaturalComponentOfAtmosphere(y) & NaturalComponent(z) & Antarctica(x)) -> CreatedHoleOverAntarctica(x))", "score": 0}
{"id": "eqasc_validation_1345", "prediction": "all x y.((LossOfNaturalCommitmentOfAtmosphere(x) & CreationOfHole(e)) -> HoleOverAntarctica(y))", "score": 0}
{"id": "eqasc_validation_1345", "prediction": "all x y.((LossOfNaturalComponent(x) & LossOfAtmosphereAtmosphere(y) & CreatedHoleOverAntarctica(x)) -> CreatedHollowOverAntarctica(x,y))", "score": 0}
{"id": "eqasc_validation_1345", "prediction": "all x y.((LossOfNaturalComponentOfAtmosphere(x) & HoleOverAntarctica(y)) -> Creating(x,y))", "score": 0}
{"id": "eqasc_validation_1345", "prediction": "all x y z.((LossOfNaturalComponentOfAtmosphere(x) & -NaturalComponentOfAtmosphere(y) & NaturalComponentOfAtmosphere(z)) -> CreatedHoleOverAntarctica(x,y))", "score": 0}
{"id": "eqasc_validation_1345", "prediction": "all x y.((LossOfNaturalComponent(x) & NaturalAtmosphereRapidity(y)) -> CreatedHoleOverAntarctica(x))", "score": 0}
{"id": "eqasc_validation_1345", "prediction": "all x y z.((Loss(x) & NaturalComponent(y) & Atmosphere(z) & NaturalComponent(y,z)) -> CreatedHole(x))", "score": 0}
{"id": "eqasc_validation_1345", "prediction": "all x y.((LossOfNaturalComponentOfAtmosphere(x) & GreenedOverAntarctica(y)) -> CreatedHoleOverAntarctica(x))", "score": 0}
{"id": "eqasc_validation_1345", "prediction": "all x y.((LossOfNaturalComponentOfAtmosphere(x) & HoleOverAntarctica(y)) -> CreatesHole(x,y))", "score": 0}
{"id": "eqasc_validation_1345", "prediction": "all x y.((LossOfNaturalComponentOfAtmosphere(x) & HoleOverAntarctica(y)) -> CreatedOverAntarctica(x,y))", "score": 0}
{"id": "eqasc_validation_1345", "prediction": "all x y.((LossOfNaturalComponent(x,y) & LostOfAtmosphere(x,y)) -> CreatedHoleOverAntarctica(x))", "score": 0}
{"id": "eqasc_validation_1345", "prediction": "all x y.((LossOfNaturalComponentOfAtmosphere(x) & NaturalComponentOfAtmosphere(y)) -> CreatedHoleOverAntarctica(x))", "score": 0}
{"id": "eqasc_validation_1345", "prediction": "all x y.((LossOfNaturalComponent(x) & MissingNaturalComponent(y)) -> CreatedHoleOverAntarctica(x))", "score": 0}
{"id": "eqasc_validation_1346", "prediction": "all x.(OzoneLoss(x) -> ProducedByIntenseUVRadiation(x))", "score": 0}
{"id": "eqasc_validation_1346", "prediction": "all x.(OzoneLoss(x) -> (IntenseUniformRadiation(x) & InUpperStratosphere(x)))", "score": 0}
{"id": "eqasc_validation_1346", "prediction": "all x.(OzoneLoss(x) -> (ProducedByIntenseUVRadiation(x) & HigherStratosphere(x)))", "score": 0}
{"id": "eqasc_validation_1346", "prediction": "Ozone Loss Ozone is produced by intenseUVRadiationInUpperStratosphere(Ozone,UpperStratosphere)", "score": -1}
{"id": "eqasc_validation_1346", "prediction": "all x.(OzoneLoss(x) -> (IntenseUVRadiation(x) & ObliterateStratosphere(x)))", "score": 0}
{"id": "eqasc_validation_1346", "prediction": "Ozone Loss Ozone is produced by intense ultraviolet radiation in the upperStatosphere.", "score": -1}
{"id": "eqasc_validation_1346", "prediction": "all x.(OzoneLoss(x) -> ProducedByIntenseUltravioletRadiation(x))", "score": 0}
{"id": "eqasc_validation_1346", "prediction": "all x.(OzoneLoss(x) -> (ProducedByIntenseUltravioletRadiation(x) & InUpperStratosphere(x)))", "score": 0}
{"id": "eqasc_validation_1346", "prediction": "all x.(OzoneLoss Ozone isproducedByUltravioletRadiationInOberStratosphere(x) -> ProducedByIntenseUltravioletRadiationInOldStratosphere(x))", "score": -1}
{"id": "eqasc_validation_1346", "prediction": "all x.(OzoneLoss(x) -> (IntenseUltravioletRadiation(x) & UpperStratosphere(x)))", "score": 0}
{"id": "eqasc_validation_1346", "prediction": "Ozone Loss Ozone is produced by intenseuviumRadiationInUpperStratosphere(o))", "score": -1}
{"id": "eqasc_validation_1346", "prediction": "all x.(OzoneLoss(x) -> (ProducedByIntenseUltravioletRadiation(x) & UpperStatosphere(x)))", "score": 0}
{"id": "eqasc_validation_1346", "prediction": "(IntenseUltravioletRadiation(OzoneLoss))", "score": 0}
{"id": "eqasc_validation_1346", "prediction": "all x.(OzoneLoss(x) -> (IntenseUltravioletRadiation(x) & LowerStratosphere(x)))", "score": 0}
{"id": "eqasc_validation_1346", "prediction": "Ozone Loss Ozone is produced by intenseUVRadiationInUpperStratosphere(Ozone)", "score": -1}
{"id": "eqasc_validation_1347", "prediction": "all x y z.((IntenseUltravioletRadiation(x) & UpperStratosphereRadiation(y) & Antarctica(z)) -> CreatedOzoneHole(x,y,z))", "score": 0}
{"id": "eqasc_validation_1347", "prediction": "all x y.((IntenseUVRadiation(x) & UpperStratosphere(y)) -> CreatedOzoneHole(x,y))", "score": 0}
{"id": "eqasc_validation_1347", "prediction": "all x y.((IntenseUltravioletRadiation(x) & UpperStratosphere(y) & InStratosphere(z)) -> CreatedOzoneHole(x,x))", "score": 0}
{"id": "eqasc_validation_1347", "prediction": "all x y.((IntenseUVRadiation(x) & UpperStratosphere(y) & OxygenHole(x,Antarctic)) -> CreatedOverAntarctica(x))", "score": 0}
{"id": "eqasc_validation_1347", "prediction": "all x.(IntenseUVRadiation(x) -> (UpperStratosphereOzoneHole(x) & OverAntarctica(x)))", "score": 0}
{"id": "eqasc_validation_1347", "prediction": "all x y z.((IntenseUltravioletRadiation(x) & UpperStratosphere(y) & OzoneHole(z)) -> CreatedOverAntarctica(x,y,z))", "score": 0}
{"id": "eqasc_validation_1347", "prediction": "all x y z.((IntenseUVRadiation(x) & UpperStratosphere(y) & OzoneHole(z)) -> CreatedOverAntarctica(x,y,z))", "score": 0}
{"id": "eqasc_validation_1347", "prediction": "all x.((IntenseUVRadiation(x) & UpperStratosphere(x) & OzoneHole(x)) -> OverAntarctica(x))", "score": 0}
{"id": "eqasc_validation_1347", "prediction": "all x y.((IntenseUVRadiationInUpperStratosphere(x) & UpperStratosphere(y)) -> ThisColdLayer(x))", "score": 0}
{"id": "eqasc_validation_1347", "prediction": "all x y z.((IntenseUVRadiation(x) & UpperStratosphere(y) & OceanHole(z)) -> (RapidUltravioletRadiationInStratosphere(x,z) & CreatedOzoneHoleOverAntarctica(z)))", "score": 0}
{"id": "eqasc_validation_1347", "prediction": "all x.((IntenseUltravioletRadiation(x) & UpperStratosphericRadiation(x) & Antarctica(x)) -> CreatedOzoneHole(x,Antarctica))", "score": 0}
{"id": "eqasc_validation_1347", "prediction": "all x y.((IntenseUltravioletRadiation(x) & UpperStratosphere(y) & Initiates(x,y)) -> CreatedOzoneHole(x,Antarctica))", "score": 0}
{"id": "eqasc_validation_1347", "prediction": "all x.((IntenseUnivertebrateRadiation(x) & UpperStratosphere(x) & LowerStratosphere(x)) -> OzoneHole(x,AntarcticAntarctica))", "score": 0}
{"id": "eqasc_validation_1347", "prediction": "all x y z.((InternalUVRadiation(x) & UpperStratosphere(y) & OzoneHole(z) & Over(x,Antarctica)) -> Created(x,z))", "score": 0}
{"id": "eqasc_validation_1347", "prediction": "all x y.((IntenseUltravioletRadiation(x) & UpperStratosphere(y)) -> CreatedOzoneHoleOverAntarctica(x))", "score": 0}
{"id": "eqasc_validation_1347", "prediction": "all x y z.((IntenseUltravioletRadiation(x) & UpperStratosphere(y) & Antarctica(z)) -> CreatedOzoneHole(x))", "score": 0}
{"id": "eqasc_validation_1348", "prediction": "OzoneLossRapid(O)", "score": 0}
{"id": "eqasc_validation_1348", "prediction": "exists x.(OzoneLoss(x) & Rapid(x))", "score": 0}
{"id": "eqasc_validation_1348", "prediction": "all x.(OzoneLoss(x) -> Rapid(x))", "score": 0}
{"id": "eqasc_validation_1348", "prediction": "all x.(Ozone(x) -> RapidLoss(x))", "score": 0}
{"id": "eqasc_validation_1348", "prediction": "all x y.((OzoneLoss(x) & Environment(y)) -> Rapid(x,y))", "score": 0}
{"id": "eqasc_validation_1348", "prediction": "all x.(ozoneloss(x) -> Rapid(x))", "score": 0}
{"id": "eqasc_validation_1349", "prediction": "all x.(Ozone(x) -> DisappearsRapidly(x))", "score": 0}
{"id": "eqasc_validation_1349", "prediction": "all x.(Ozone(x) -> DissolvingRapidly(x))", "score": 0}
{"id": "eqasc_validation_1349", "prediction": "all x.(Ozone(x) -> DisappearingRapidly(x))", "score": 0}
{"id": "eqasc_validation_1349", "prediction": "all x.(OzoneDissolvingRapidly(x) -> DissolvingOzone(x))", "score": 0}
{"id": "eqasc_validation_1349", "prediction": "all x y.((Ozone(x) & Ozone(y)) -> DisappearsRapidly(x))", "score": 0}
{"id": "eqasc_validation_1349", "prediction": "all x.(Ozone(x) -> RapidlyDispersing(x))", "score": 0}
{"id": "eqasc_validation_1349", "prediction": "all x y.((Ozone(x) & Ozone(y)) -> AppearsRapidly(x,y))", "score": 0}
{"id": "eqasc_validation_1349", "prediction": "all x.(Ozone(x) -> AppearsRapidly(x))", "score": 0}
{"id": "eqasc_validation_1349", "prediction": "all x.(Zone(x) -> DisappearingRapidly(x))", "score": 0}
{"id": "eqasc_validation_1349", "prediction": "all x.(Ozone(x) -> DistantRapidly(x))", "score": 0}
{"id": "eqasc_validation_1349", "prediction": "all x.((Ozone(x) & DissolvingRapidly(x)) -> Ozone(x))", "score": 0}
{"id": "eqasc_validation_1349", "prediction": "all x.(Ozone(x) -> VanishingRapidly(x))", "score": 0}
{"id": "eqasc_validation_1349", "prediction": "all x.(OzoneDistantRapidly(x) -> Dissolving(x))", "score": 0}
{"id": "eqasc_validation_1349", "prediction": "all x.(Ozone(x) -> DriasticDisturbance(x))", "score": 0}
{"id": "eqasc_validation_1349", "prediction": "all x.(Ozone(x) -> DistinuatingRapidly(x))", "score": 0}
{"id": "eqasc_validation_1350", "prediction": "all x.(OzoneDepletion(x) -> (AllowsPlusUltravioletRadiation(x) & CausesSkinCancer(x)))", "score": 0}
{"id": "eqasc_validation_1350", "prediction": "all x.((OzoneDepletion(x) & MoreUVRadiation(x)) -> SkinCancer(x))", "score": 0}
{"id": "eqasc_validation_1350", "prediction": "all x.(OzoneDepletion(x) -> (AllowsMoreUVRadiation(x) & CausesSkinCancer(x)))", "score": 0}
{"id": "eqasc_validation_1350", "prediction": "all x.(OzoneDepletion(x) -> (CancelsUltravioletRadiation(x) & CausesSkinCancer(x)))", "score": 0}
{"id": "eqasc_validation_1350", "prediction": "all x y.((OzoneDepletion(x) & UVRadiation(y)) -> (LessRadiation(x) & SkinCancerous(x)))", "score": 0}
{"id": "eqasc_validation_1350", "prediction": "all x.(OzoneDepletion(x) -> AllowsMoreUVRadiation(x))", "score": 0}
{"id": "eqasc_validation_1350", "prediction": "all x.(OzoneDepletion(x) -> (AllowsUltravioletRadiation(x) & CausesSkinCancer(x)))", "score": 0}
{"id": "eqasc_validation_1350", "prediction": "all x.(OzoneDepletion(x) -> (GivesMoreUltravioletRadiation(x) & CausesSkinCancer(x)))", "score": 0}
{"id": "eqasc_validation_1350", "prediction": "all x.(OzoneDepletion(x) -> (AbandonesMoreUVRadiation(x) & CausesSkinCancer(x)))", "score": 0}
{"id": "eqasc_validation_1350", "prediction": "all x.(OzoneDepletion(x) -> (LeadsMoreUniformRadiation(x) & CausesSkinCancer(x)))", "score": 0}
{"id": "eqasc_validation_1350", "prediction": "ALL x.(OzoneDepletion(x) -> (AllowsMoreUltravioletRadiation(x) & CausesSkinCancer(x)))", "score": -1}
{"id": "eqasc_validation_1350", "prediction": "all x.(OzoneDepletion(x) -> (allowsMoreUVRadiation(x) & CausesSkinCancer(x)))", "score": 0}
{"id": "eqasc_validation_1350", "prediction": "all x.(OzoneDepletion(x) -> (allowsUnlimitedUVRadiation(x) & CausesSkinCancer(x)))", "score": 0}
{"id": "eqasc_validation_1351", "prediction": "all x.(Client(x) -> ElevatedSkinCancerRisk(x))", "score": 0}
{"id": "eqasc_validation_1351", "prediction": "all x y.((LivesNearAtartica(x) & LivesNearAtartica(y)) -> ElevatedSkinCancerRisk(x))", "score": 0}
{"id": "eqasc_validation_1351", "prediction": "all x.((PrimarilyLivingNearAtartica(x) & IncreasedUltravioletRadiation(x,UV)) -> ElevatedSkinCardRisk(x))", "score": 0}
{"id": "eqasc_validation_1351", "prediction": "all x y z.((Person(x) & LivingNear(y,x) & Region(z)) -> (ElevatedSkinCancerRiskByIncreasedUltraviolet(z) & UppedInUVRadiation(x,y)))", "score": 0}
{"id": "eqasc_validation_1351", "prediction": "all x y z.((Person(x) & LivingNearAntartica(x) & LivingNearAntartica(y)) -> (ElevatedSkinCancerRisk(x) & IncreasedUltravioletRadiation(z)))", "score": 0}
{"id": "eqasc_validation_1351", "prediction": "all x y.((LivesNearAtartica(x) & LivingNearAtartica(y)) -> ElevatedSkinCancerRiskDueToIncreasedUVRadiation(z))", "score": 0}
{"id": "eqasc_validation_1351", "prediction": "all x.((PeopleLivingNearAtartica(x) & InNear(x,Atartica)) -> HighSkinCancerRiskFromIncreasedUltravioletRayming(x))", "score": 0}
{"id": "eqasc_validation_1351", "prediction": "all x.((PeopleNearAntartica(x) & LivingNearAtartica(x)) -> UppedSkinCancerRiskDailyFromIncreasedUltravioletRadiation(x))", "score": 0}
{"id": "eqasc_validation_1351", "prediction": "all x y.((Person(x) & LivingNearAntartica(x)) -> ElevatedSkinCancerRiskDueToIncreasedUltravioletRays(x))", "score": 0}
{"id": "eqasc_validation_1351", "prediction": "all x y z.((LivingNearAntartica(x) & Person(y) & Antartica(z) & IncreasedUltravioletRadiation(y)) -> ElevatedSkinCarcinogenesisRiskDueToIncreasedUVRadiation(y,z))", "score": 0}
{"id": "eqasc_validation_1351", "prediction": "all x y z.((Person(x) & Antartica(y) & Sun(z) & LivesNear(x,y)) -> (ElevatedSkinCancerousRisk(x,z) & IncreasedUltravioletRadiation(x) & IncreasedUltravioletRadioactivity(x)))", "score": 0}
{"id": "eqasc_validation_1351", "prediction": "all x y.((Vibe(x,y) & LivingNearAntartica(y)) -> HighSkinCancerRiskByIrresistantUltravioletRadioactivity(x))", "score": 0}
{"id": "eqasc_validation_1351", "prediction": "all x.(LivingNearAntartica(x) -> ElevatedSkinCancerRiskDueToIncreasedUltravioletRadiation(x))", "score": 0}
{"id": "eqasc_validation_1351", "prediction": "all x y z.((Person(x) & LivingNear(x,Antartica) & Person(y) & LivesNear(z,Altartica)) -> ElevatedSkinCancerRiskDueToIncreasedUVRaying(x))", "score": 0}
{"id": "eqasc_validation_1351", "prediction": "all x y.((Person(x) & LivingNearAntartica(y)) -> (ElevatedSkinCancerRisk(x,y) & IncreasedUltravioletRadiotherapy(x)))", "score": 0}
{"id": "eqasc_validation_1351", "prediction": "all x y z.((LivingNear(x,Antartica) & Person(y) & HighSkinCancerRisk(z)) -> (EnhancedSkinCancerRisk(y,z) & IncreasedUltravioletRadiation(y,z)))", "score": 0}
{"id": "eqasc_validation_1352", "prediction": "all x.((Ozone(x) & AtmosphericChemicalShield(x)) -> ProtectiveUVShield(x))", "score": 0}
{"id": "eqasc_validation_1352", "prediction": "all x.(Ozone(x) -> (AtmosphericChemical(x) & ProtectiveUVShield(x)))", "score": 0}
{"id": "eqasc_validation_1352", "prediction": "All x.(Ozone(x) -> (AtmosphericChemical(x) & ProtectiveUVShield(x)))", "score": -1}
{"id": "eqasc_validation_1352", "prediction": "all x.(Ozone(x) -> (Key(x,AtmosphericChemical) & ProtectiveUVShield(x)))", "score": 0}
{"id": "eqasc_validation_1352", "prediction": "all x.(Ozone(x) -> (AtmosphericChemicalShield(x) & ProtectiveUVShield(x)))", "score": 0}
{"id": "eqasc_validation_1352", "prediction": "all x.(Ozone(x) -> (AtmosphericChemicalAndProtectiveUVShield(x)))", "score": 0}
{"id": "eqasc_validation_1352", "prediction": "all x.(Ozone(x) -> (AtmosphericChemicalShield(x) & ProtectiveUltravioletShield(x)))", "score": 0}
{"id": "eqasc_validation_1352", "prediction": "all x.(Ozone(x) -> (ChemicalShield(x) & ProtectiveUltravioletShield(x)))", "score": 0}
{"id": "eqasc_validation_1352", "prediction": "all x.(Ozone(x) -> (KeyAtmosphericChemical(x) & ProtectiveUVShield(x)))", "score": 0}
{"id": "eqasc_validation_1353", "prediction": "all x y.((HoleOverAtarctica(x) & Antarctica(y)) -> ReducesUVShielding(x,y))", "score": 0}
{"id": "eqasc_validation_1353", "prediction": "all x y z w.((HoleOverAntarctica(x) & Antarctica(y) & UltravioletShielding(z)) -> Reduces(x,y,z))", "score": 0}
{"id": "eqasc_validation_1353", "prediction": "all x.((HoleOver(x,antarctica) & ReflectsUVShielding(x)) -> ReducesUVShielding(x))", "score": 0}
{"id": "eqasc_validation_1353", "prediction": "all x y.((Hole(x) & Antarctica(y) & Over(x,y)) -> ReducesUVShielding(x,y))", "score": 0}
{"id": "eqasc_validation_1353", "prediction": "all x y.((HoleOverAntarctica(x) & Antarctica(y)) -> ReducesUVShielding(x,y))", "score": 0}
{"id": "eqasc_validation_1353", "prediction": "all x y.((HoleOverAntartica(x) & Antarctica(y)) -> ReducesUVShielding(x,y))", "score": 0}
{"id": "eqasc_validation_1353", "prediction": "all x.((HoleOverAtarctica(x) & ReducesUVShielding(x)) -> HeatsOver(x,antarctica))", "score": 0}
{"id": "eqasc_validation_1353", "prediction": "all x y.((HoleOverAntartica(x) & Antarctica(y)) -> ReducesUVShielding(x))", "score": 0}
{"id": "eqasc_validation_1353", "prediction": "all x y.((HoleOverAntarctica(x) & Antarctic(y)) -> ReducesUVSheltering(x,y))", "score": 0}
{"id": "eqasc_validation_1353", "prediction": "all x y z.((HorseOverAntarctica(x) & Antarctica(y) & UVShielding(z)) -> Reduces(x,z))", "score": 0}
{"id": "eqasc_validation_1353", "prediction": "all x y.((HoleOverAntectica(x) & Antarctica(y)) -> ReducesUltravioletShielding(x,y))", "score": 0}
{"id": "eqasc_validation_1353", "prediction": "all x.(LowerOverAntarctica(x) -> ReducesUVShielding(x))", "score": 0}
{"id": "eqasc_validation_1353", "prediction": "all x y.((Hole(x) & Antarctica(y) & Over(x,y)) -> ReducesUVShielding(x))", "score": 0}
{"id": "eqasc_validation_1353", "prediction": "all x y z.((HoleOverTarctica(x) & Antarctica(y) & UVShielding(z)) -> Reduces(x,y,z))", "score": 0}
{"id": "eqasc_validation_1353", "prediction": "all x.((HoleOverAntarctica(x) & ReducesUVShielding(x)) -> ProtectsAgainstUVShielding(x))", "score": 0}
{"id": "eqasc_validation_1354", "prediction": "all x.(OzoneHole(x) -> OverAntarctica(x))", "score": 0}
{"id": "eqasc_validation_1354", "prediction": "all x.(AnnualOzoneHole(x) -> OverAntarctica(x))", "score": 0}
{"id": "eqasc_validation_1354", "prediction": "all x.((AnnualOzoneHole(x) & OverAntarctica(x)) -> ObservedFromThe80s(x))", "score": 0}
{"id": "eqasc_validation_1354", "prediction": "all x.(AnnualOzoneHoleOverAntarctica(x) -> ObservedInThe80s(x))", "score": 0}
{"id": "eqasc_validation_1354", "prediction": "all x.((OzoneHole(x) & InAntarctica(x) & Since80s(x)) -> ObservedAnnually(x))", "score": 0}
{"id": "eqasc_validation_1354", "prediction": "all x y z.((AnnualOzoneHole(x) & Antarctica(y) & 1980s(z)) -> ObservedFrom(x,y,z))", "score": 0}
{"id": "eqasc_validation_1354", "prediction": "all x.((OzoneHoleOverAntarctica(x) & ObservedInThe80s(x)) -> AnnualFromStartToEnoughOf(x,y))", "score": 0}
{"id": "eqasc_validation_1354", "prediction": "all x y.((AnnualOzoneHoleOverAntarctica(x) & 1980s(y)) -> Observed(x))", "score": 0}
{"id": "eqasc_validation_1354", "prediction": "all x.(OzoneHole(x) -> ObservedOverAntarctica(x))", "score": 0}
{"id": "eqasc_validation_1354", "prediction": "all x y.((OzoneHole(x) & Antarctica(y) & Over(x,y)) -> ObservedDemocracyFromOct1980(x))", "score": 0}
{"id": "eqasc_validation_1354", "prediction": "all x y.((YearlyOzoneHole(x) & OverAntarctica(y)) -> ObservedFromOcean(x,y))", "score": 0}
{"id": "eqasc_validation_1354", "prediction": "all x y.((OzoneHole(x) & Antarctica(y)) -> ObservedAsOccupied(x,y))", "score": 0}
{"id": "eqasc_validation_1354", "prediction": "all x y z.((OzoneHole(x) & Antarctica(y) & 1980s(z)) -> ObservedBy(x,y,z))", "score": 0}
{"id": "eqasc_validation_1354", "prediction": "all x y.((AnnualOzoneHole(x) & Antarctica(y)) -> ObservedDecadesAfter(x,y))", "score": 0}
{"id": "eqasc_validation_1354", "prediction": "all x y.((OzoneHole(x) & Antarctica(y)) -> ObservedAntarcticanEarth(x,y))", "score": 0}
{"id": "eqasc_validation_1355", "prediction": "all x y.((LossOzone(x) & SouthPole(y)) -> CreatedHoleOver(x,y))", "score": 0}
{"id": "eqasc_validation_1355", "prediction": "all x y.((LossOzone(x) & SouthPole(y)) -> CreatedHoleOverSüdPole(x,y))", "score": 0}
{"id": "eqasc_validation_1355", "prediction": "all x y z.((LossOzone(x) & SouthPole(y) & HoleOverSouthPole(z)) -> Created(x,y,z))", "score": 0}
{"id": "eqasc_validation_1355", "prediction": "all x y.((LossOzone(x) & SouthPole(y)) -> CollectsHoleOver(x,y))", "score": 0}
{"id": "eqasc_validation_1355", "prediction": "all x y z.((LossOzone(x) & SouthPole(y) & SouthPole(z)) -> CreatedHoleOver(x,y,z))", "score": 0}
{"id": "eqasc_validation_1355", "prediction": "all x y.((LossOzone(x) & SouthPole(y)) -> CreatedHoleOverSouthPole(x,y))", "score": 0}
{"id": "eqasc_validation_1355", "prediction": "the loss of ozone has created hole over south pole.", "score": -1}
{"id": "eqasc_validation_1355", "prediction": "all x y.((LossOfOzone(x) & SouthPole(y)) -> CreatedHoleOverSouthPole(x,y))", "score": 0}
{"id": "eqasc_validation_1355", "prediction": "all x y.((LossOzone(x) & NorthPole(y)) -> (OzoneCreatedHole(x,y) & OverSouthPolar(x,y)))", "score": 0}
{"id": "eqasc_validation_1355", "prediction": "all x.((LossOzone(x) & SouthPole(x)) -> CreatedHoleOverSouthPole(x))", "score": 0}
{"id": "eqasc_validation_1355", "prediction": "all x y.((PositionOfOzone(x) & SouthPole(y)) -> CreatesHoleOver(x,y))", "score": 0}
{"id": "eqasc_validation_1355", "prediction": "all x y z.((LossOzone(x) & SouthPole(y) & SouthPole(z)) -> CreatedHole(x,y,z))", "score": 0}
{"id": "eqasc_validation_1355", "prediction": "all x.((LossOzone(x) & SouthPole(x)) -> CreatesHoleOverSouthPole(x))", "score": 0}
{"id": "eqasc_validation_1355", "prediction": "all x y.((LossOzone(x) & SouthPole(y)) -> CreatedHole(x,y))", "score": 0}
{"id": "eqasc_validation_1356", "prediction": "all x.(Ozone(x) -> (TriatomicOxygen(x) & O3E).)", "score": -1}
{"id": "eqasc_validation_1356", "prediction": "all x.(Ozone(x) -> (TriatomicOxygen(x) & O3(x)))", "score": 0}
{"id": "eqasc_validation_1356", "prediction": "all x.(Ozone(x) -> (TriatomicOxygen(x) & O3.(Ozone(x))))", "score": -1}
{"id": "eqasc_validation_1356", "prediction": "all x y.((Ozone(x) & TriatomicOxygen(y)) -> -(TrAtomicOxygen(z) & O3(z)))", "score": 0}
{"id": "eqasc_validation_1356", "prediction": "Ozone () is triatomicOxygen(x) & IsO3,3 & IsO2,E3 & IsIsO2,II and IsO3.)", "score": -1}
{"id": "eqasc_validation_1356", "prediction": "all x.(Ozone(x) -> (TriatomicOxygen(x) & -TriatomicOxygen(x)). -TriatomicOxygen(x) & O2E(x)))", "score": -1}
{"id": "eqasc_validation_1356", "prediction": "all x.(Ozone(x) -> (TriatomicOxygenO3) | O3+OxygenO3)))", "score": -1}
{"id": "eqasc_validation_1356", "prediction": "all x.(Ozone(x) -> (TriatomicOrganism(x,O3) | TriatomicOxygen(x)))", "score": 0}
{"id": "eqasc_validation_1356", "prediction": "Ozone (AnorganicOxygen(Z) & TriatomicOxygen(O3))", "score": -1}
{"id": "eqasc_validation_1356", "prediction": "(TriatomicOxygen(Ozone) & TriatomicOxygen(O3))", "score": 0}
{"id": "eqasc_validation_1356", "prediction": "all x.(Ozone(x) -> (TriatomicOxygen(x) & O3.(ChemicalOxygen(x) & TriatomicOxygen(x))))", "score": -1}
{"id": "eqasc_validation_1356", "prediction": "all x.(Ozone(x) -> (TotalOxygen(x,O3) & TriatomicOxygen(x,O3) & TriatomicOxygen(x)))", "score": 0}
{"id": "eqasc_validation_1356", "prediction": "all x.(Ozone(x) -> (TriatomicOxygen(x) & O3.(O3) & O3(x))))", "score": -1}
{"id": "eqasc_validation_1356", "prediction": "all x.(Ozone(x) -> (TriatomicOxygen(x) | TriatomicOxygen(x)))", "score": 0}
{"id": "eqasc_validation_1356", "prediction": "all x.(Ozone(x) -> (TriatomicOxygen(x) & O3 (x))))", "score": -1}
{"id": "eqasc_validation_1357", "prediction": "all x y z.((LossOfTriatomicOxygen(x) & TriatomicOxygenHole(y) & Antarctica(z)) -> CreatesOver(y,z))", "score": 0}
{"id": "eqasc_validation_1357", "prediction": "all x.((LossOfTriatomicOxygen(x) & TriatomicOxygenHole(x)) -> OverAntarctica(x))", "score": 0}
{"id": "eqasc_validation_1357", "prediction": "all x.(LossOfTriatomicOxygen(x) -> CreatedTriatomicOxygenHole(x))", "score": 0}
{"id": "eqasc_validation_1357", "prediction": "all x y.((LossOfTriatomicOxygen(x) & Antarctica(y)) -> CreatedTriatomicOxygenHole(x,y))", "score": 0}
{"id": "eqasc_validation_1357", "prediction": "all x.(LossOfTriatomicOxygen(x) -> CreatesTriatomicOxygenHole(x))", "score": 0}
{"id": "eqasc_validation_1357", "prediction": "all x.((ExcludingTriatomicOxygen(x) & TriatomicOxygenHole(x)) -> CreatedOverAntarctica(x))", "score": 0}
{"id": "eqasc_validation_1357", "prediction": "all x y.((LossOfTriatomicOxygen(x) & AntarcticAntarcticHole(y)) -> Created(x,y))", "score": 0}
{"id": "eqasc_validation_1357", "prediction": "all x y.((LossOfTriatomicOxygen(x) & Antarctica(y)) -> ScientistCreatedTriatomicOxygenHole(x,y))", "score": 0}
{"id": "eqasc_validation_1357", "prediction": "all x.(LossOfTriatomicOxygen(x) -> (CreatedTriatomicOxygenHoleOverAntarctica(x)))", "score": 0}
{"id": "eqasc_validation_1357", "prediction": "all x y.((LossOfTriatomicOrganism(x) & Carbonaceous(y)) -> CreatedTriatomicOxygenHoleOverAntarctica(x,y))", "score": 0}
{"id": "eqasc_validation_1357", "prediction": "all x.(LossOfTriatomicOxygen(x) -> CreatesTriatomicOxygenHoleOverAntarctica(x))", "score": 0}
{"id": "eqasc_validation_1357", "prediction": "all x y.((LossOfTriatomicOxygen(x) & Antarctica(y)) -> CreatesTriatomicOxygenHole(x,y))", "score": 0}
{"id": "eqasc_validation_1357", "prediction": "all x y.((LossOfTriatomicOxygen(x) & Antarctica(y)) -> TriatomicOxygenHoleOver(x,y))", "score": 0}
{"id": "eqasc_validation_1357", "prediction": "all x.((LossOfTriatomicOxygen(x) & TriatomicOxygenHole(y)) -> CreatedOverAntarctica(x,y))", "score": 0}
{"id": "eqasc_validation_1358", "prediction": "all x.((HighMountain(x) & WellRoundedPeaks(x)) -> WellFormedByCrustalPlateCouple(x))", "score": 0}
{"id": "eqasc_validation_1358", "prediction": "all x.((HighMountain(x) & WellRoundedPeaks(x)) -> CollisionOfCrustalPlates(x))", "score": 0}
{"id": "eqasc_validation_1358", "prediction": "all x y.([HighMountain(x) & WellRoundedPeak(y)) -> FormedByCrustalPlateCollusion(x,y))", "score": -1}
{"id": "eqasc_validation_1358", "prediction": "all x y.((HighMountain(x) & WellRoundedPeak(x) & CrustalPlateCollapse(y)) -> Formed(x))", "score": 0}
{"id": "eqasc_validation_1358", "prediction": "all x y z.((HighMountain(x) & WellRoundedPeak(y) & CranalPlate(z) & CollisionOf(x,z)) -> EasilyFormedBy(x,y,z))", "score": 0}
{"id": "eqasc_validation_1358", "prediction": "all x.((HighMountain(x) & WellRoundedPeaks(x)) -> FormedByCrustalPlateCollapsure(x))", "score": 0}
{"id": "eqasc_validation_1358", "prediction": "all x y z w.((HighMountain(x) & WellRoundedPeak(y) & CrassalPlate(z) & Impact(w)) -> FormedBy(x,z,w))", "score": 0}
{"id": "eqasc_validation_1358", "prediction": "all x y z.((HighMountain(x) & WellRoundedPeak(y) & CrasstalPlate(z)) -> FormedByCollision(x,z))", "score": 0}
{"id": "eqasc_validation_1358", "prediction": "all x.((WoodenCrustelPlace(x) & HighMountain(x) & WellRoundedPeak(x)) -> FormedByCrustallinPlateCosmation(x))", "score": 0}
{"id": "eqasc_validation_1358", "prediction": "all x y.((HighMountains(x) & WellRoundedPeaks(y) & CollisionOfCrustalPlates(x)) -> Forms(x,y))", "score": 0}
{"id": "eqasc_validation_1358", "prediction": "all x.((HighMountain(x) & WellRoundedPeaks(x)) -> FormsCrustalPlatesCollection(x))", "score": 0}
{"id": "eqasc_validation_1358", "prediction": "all x.((HighMountain(x) & WellRoundedPeaks(x) & CrustalPlateCoupling(x)) -> FormsHighMountain(x))", "score": 0}
{"id": "eqasc_validation_1358", "prediction": "all x y.((HighMountain(x) & WellRoundedPeak(x) & CrestalPlateCollusion(y)) -> FormedByCrustalPlateCollar(x,y))", "score": 0}
{"id": "eqasc_validation_1358", "prediction": "all x.((HighMountain(x) & WellRoundedPeaks(x)) -> CanFormCrustalPlatesByCollision(x))", "score": 0}
{"id": "eqasc_validation_1358", "prediction": "all x y.((HighMountain(x) & WellRoundedPeak(y) & CollisionOfCrustalPlates(x)) -> FormedByCrisisalPlates(x))", "score": 0}
{"id": "eqasc_validation_1359", "prediction": "All x.((PlatesCollide(x) & EarthquakeResult(x)) -> Collide(x))", "score": -1}
{"id": "eqasc_validation_1359", "prediction": "all x.(CollidePlates(x) -> EarthquakeResult(x))", "score": 0}
{"id": "eqasc_validation_1359", "prediction": "all x.(ColidePlates(x) -> EarthquakeResult(x))", "score": 0}
{"id": "eqasc_validation_1359", "prediction": "all x.((PlatesCouples(x) & Earthquake(x)) -> ResultFromCoupling(x))", "score": 0}
{"id": "eqasc_validation_1359", "prediction": "all x.((Plate(x) & Collide(x)) -> Earthquake(x))", "score": 0}
{"id": "eqasc_validation_1359", "prediction": "all x y.((Plate(x) & Plate(y) & Collides(x,y)) -> Earthquake(x))", "score": 0}
{"id": "eqasc_validation_1359", "prediction": "all x y.((Plate(x) & PlateCollide(x)) -> Earthquake(y))", "score": 0}
{"id": "eqasc_validation_1359", "prediction": "all x y.((Plate(x) & PlateInterview(y)) -> Earthquake(x,y))", "score": 0}
{"id": "eqasc_validation_1359", "prediction": "all x.((PlatesCollide(x) & Earthquake(x)) -> Conversion(x))", "score": 0}
{"id": "eqasc_validation_1359", "prediction": "all x.((PlatesCollide(x) & EarthquakeResult(x)) -> Collide(x))", "score": 0}
{"id": "eqasc_validation_1359", "prediction": "all x.((PlatesCollide(x) & Earthquake(x)) -> CollisionResult(x))", "score": 0}
{"id": "eqasc_validation_1359", "prediction": "all x y.((Plate(x) & Plate(y)) -> CollideDamage(x,y))", "score": 0}
{"id": "eqasc_validation_1359", "prediction": "all x.((PlatesCollide(x) & Earthquake(x)) -> CollisionResult(x,c,d))", "score": 0}
{"id": "eqasc_validation_1359", "prediction": "all x y.((Plastic(x) & Plate(y)) -> Collide(x,y))", "score": 0}
{"id": "eqasc_validation_1359", "prediction": "all x y.((Plate(x) & Earthquake(y)) -> Collides(x,y))", "score": 0}
{"id": "eqasc_validation_1359", "prediction": "all x y.((Plates(x) & PlateCollide(x)) -> Earthquake(y))", "score": 0}
{"id": "eqasc_validation_1360", "prediction": "all x.(Earthquake(x) -> (HighMountainShape(x) & WellRoundedPeaks(x)))", "score": 0}
{"id": "eqasc_validation_1360", "prediction": "all x y.((Earthquake(x) & HighMountain(y) & WellRoundedPeak(x)) -> CanResultInFormation(x,y))", "score": 0}
{"id": "eqasc_validation_1360", "prediction": "all x y z.((Earthquake(x) & HighMountain(y) & WellRoundedPeak(z)) -> Forms(x,y))", "score": 0}
{"id": "eqasc_validation_1360", "prediction": "all x y.((Earthquake(x) & HighMountain(y) & WellRoundedPeaks(y)) -> Forms(x,y))", "score": 0}
{"id": "eqasc_validation_1360", "prediction": "all x y z.((Earthquake(x) & HighMountain(y) & WellRoundedPeak(z)) -> CanResultInFormationOf(x,y,z))", "score": 0}
{"id": "eqasc_validation_1360", "prediction": "all x.(Earthquake(x) -> (HighMountain(x) & WellRoundedPeaks(x)))", "score": 0}
{"id": "eqasc_validation_1360", "prediction": "all x y z.((Earthquake(x) & HighMountain(y) & Peak(z)) -> FormsWellRounded(y,z))", "score": 0}
{"id": "eqasc_validation_1360", "prediction": "all x y z.((Earthquake(x) & HighMountain(y) & WellRoundedPeak(z)) -> FormsLastingMountains(x,y,z))", "score": 0}
{"id": "eqasc_validation_1360", "prediction": "all x y.((Earthquake(x) & HighMountain(y) & WellRoundedPeak(x,y)) -> CanInduceFormation(x,y))", "score": 0}
{"id": "eqasc_validation_1360", "prediction": "all x y.((Earthquake(x) & HighMountain(y) & WellRoundedPeak(y)) -> FormationOfFormation(x,y))", "score": 0}
{"id": "eqasc_validation_1360", "prediction": "all x.(Earthquake(x) -> (HighMountains(x) & WellRoundedPeaks(x)))", "score": 0}
{"id": "eqasc_validation_1360", "prediction": "all x y z.((Earthquake(x) & HighMountains(y) & WellRoundedPeaks(z)) -> CanResultInFormation(x,y,z))", "score": 0}
{"id": "eqasc_validation_1360", "prediction": "all x y.((Earthquake(x) & HighMountain(y) & WellRoundedPeaks(z)) -> FormationOf(x,y,z))", "score": 0}
{"id": "eqasc_validation_1361", "prediction": "exists x.(Earthquake(x) & EarthsCrustalPlates(x) & GrindAndShiftLettuce(x))", "score": 0}
{"id": "eqasc_validation_1361", "prediction": "all x.(Earthquake(x) -> (Earth'sCrustalPlatesCrushAndShiftOnThirst(x)))", "score": 0}
{"id": "eqasc_validation_1361", "prediction": "all x y.((Earthquake(x) & EarthsCrustalPlates(y) & Grinds(y,x) & ShiftsAlong(x,y)) -> Occurs(x))", "score": 0}
{"id": "eqasc_validation_1361", "prediction": "all x y.((Earthquake(x) & EarthsCrustalPlates(y) & GrindAndShiftAlongOneAnother(x)) -> Oppose(x,y))", "score": 0}
{"id": "eqasc_validation_1361", "prediction": "all x.(Earthquake(x) -> (GrindsCrustalPlates(x) & ShiftsAlong(x)))", "score": 0}
{"id": "eqasc_validation_1361", "prediction": "all x y z.((Earthquake(x) & EarthsCrustalPlatesGrindAndShiftAlong(x,y) & Earth(z)) -> Occurs(x))", "score": 0}
{"id": "eqasc_validation_1361", "prediction": "all x y.((Earthquake(x) & EarthScientificPlates(y) & GrindenAndShift(y,x)) -> Occurs(x))", "score": 0}
{"id": "eqasc_validation_1361", "prediction": "all x.((Earthquake(x) & EarthsCrustalPlatesGrind(x) & ShiftAlong(x)) -> ManyEarthquakes(x))", "score": 0}
{"id": "eqasc_validation_1361", "prediction": "all x y.((Earthquake(x) & EarthsCrustalPlatesGrindAndShift(y)) -> EarthsPlanetAndShape(x,y))", "score": 0}
{"id": "eqasc_validation_1361", "prediction": "all x y z.((Earthquake(x) & EarthsCrustalPlates(y) & EarthsCrustalPlates(z)) -> (Grind(y,z) & Shift(y,z)))", "score": 0}
{"id": "eqasc_validation_1361", "prediction": "(-most of the time the Earth's crustalPlatesGrindAndShiftAlongAnother(e))", "score": -1}
{"id": "eqasc_validation_1361", "prediction": "all x.((Earthquake(x) & EarthsCrustalPlatesGrainAndShiftAlong(x)) -> Occurs(x))", "score": 0}
{"id": "eqasc_validation_1361", "prediction": "all x y.((Earthquake(x) & EarthsCrustalPlates(y) & GrazeAlongEarth(y)) -> ShiftAlongEarth(x,y))", "score": 0}
{"id": "eqasc_validation_1361", "prediction": "all x.(Earthquake(x) -> (MoundsCrustalPlates(x) & ShiftsAlong(x)))", "score": 0}
{"id": "eqasc_validation_1361", "prediction": "all x.((Earthquake(x) & EarthsCrustalPlatesGrindAndShiftAlong(x)) -> ManyEarthquakes(x))", "score": 0}
{"id": "eqasc_validation_1361", "prediction": "all x.(Earthquake(x) -> (EarthsCrustalPlatesGrind(x) & ShiftWithoutAnother(x)))", "score": 0}
{"id": "eqasc_validation_1362", "prediction": "all x y z.(Earthquake(x) -> (HighMountains(y) & WellRoundedPeak(z) & Area(x) & HighMountains(y) & WellRoundedPeaks(x,z)))", "score": 0}
{"id": "eqasc_validation_1362", "prediction": "all x y z.((Earthquake(x) & HighMountain(y) & WellRoundedPeak(z)) -> (OccursIn(x,y,z) & Area(x) & HighMountain(y) & WellRoundedPeak(z)))", "score": 0}
{"id": "eqasc_validation_1362", "prediction": "all x y.((Earthquake(x) & Area(y) & HighMountain(y) & WellRoundedPeaks(y)) -> CanOccurIn(x,y))", "score": 0}
{"id": "eqasc_validation_1362", "prediction": "all x y z.((Earthquake(x) & HighMountain(y) & WellRoundedPeak(z)) -> CanOccurInAreas(x,y))", "score": 0}
{"id": "eqasc_validation_1362", "prediction": "all x y.((Earthquake(x) & HighMountainArea(y) & WellRoundedPeak(y)) -> CanOccurInArea(x,y))", "score": 0}
{"id": "eqasc_validation_1362", "prediction": "all x y z.((Earthquake(x) & HighMountains(y) & WellRoundedPeaks(z)) -> CanOccur(x,y,z))", "score": 0}
{"id": "eqasc_validation_1362", "prediction": "all x y.((Earthquake(x) & Area(y) & HighMountain(y) & WellRoundedPeak(y)) -> MayOccur(x,y))", "score": 0}
{"id": "eqasc_validation_1362", "prediction": "all x y z.(Earthquake(x) -> (Elevated(x) & HighMountains(y) & WellRoundedPeaks(z) & InAreas(x,y) & HighMountains(y) & WellRoundedPeaks(x)))", "score": 0}
{"id": "eqasc_validation_1362", "prediction": "all x.((Earthquake(x) & HighMountains(x) & WellRoundedPeaks(x)) -> CanOccurInAreas(x))", "score": 0}
{"id": "eqasc_validation_1362", "prediction": "all x.(Earthquake(x) -> exists y.(HighMountain(y) & WellRoundedPeaks(y) & HighMountain(y) & WellRoundedPeaks(y)))", "score": 0}
{"id": "eqasc_validation_1362", "prediction": "also exists x.((Earthquake(x) & HighMountains(x) & WellRoundedPeaks(x)) -> CanOccur(x))", "score": -1}
{"id": "eqasc_validation_1362", "prediction": "all x y.((Earthquake(x) & Area(y) & HighMountains(y) & WellRoundedPeaks(y)) -> CanOccur(x,y))", "score": 0}
{"id": "eqasc_validation_1362", "prediction": "all x y.((Earthquake(x) & Area(y)) -> (HighMountain(y) & WellRoundedPeaks(y)))", "score": 0}
{"id": "eqasc_validation_1362", "prediction": "all x.(Earthquake(x) -> (HighMountain(x) & WellRoundedPeak(x)))", "score": 0}
{"id": "eqasc_validation_1362", "prediction": "(all x.(Earthquake(x) -> HighMountainOrWellRoundedPeaks(x)))", "score": 0}
{"id": "eqasc_validation_1362", "prediction": "all x y.((Earthquake(x) & Area(y) & HighMountain(y) & WellRoundedPeaks(x)) -> CanOccurIn(x,y))", "score": 0}
{"id": "eqasc_validation_1363", "prediction": "all x.(PlateTectonics(x) -> (GraduateMovementOfCrustalPlates(x) & AtSurfaceOfEarth(x)))", "score": 0}
{"id": "eqasc_validation_1363", "prediction": "all x.(PlateTectonics(x) -> exists y.(CrustalPlates(y) & Mouth(x,y))))", "score": -1}
{"id": "eqasc_validation_1363", "prediction": "all x.(PlateTectonics(x) -> (MovementMovementOfCrustalPlates(x) & OnSurfaceOfEarth(x)))", "score": 0}
{"id": "eqasc_validation_1363", "prediction": "all x.(PlateTectonics(x) -> (RapidMovementOfCrustalPlates(x) & SurfaceOnEarth(x)))", "score": 0}
{"id": "eqasc_validation_1363", "prediction": "all x.(PlateTectonics(x) -> (GraduateMovementOfCrustalPlates(x) & OnSurfaceOfEarth(x)))", "score": 0}
{"id": "eqasc_validation_1363", "prediction": "All x.(PlateTectonics(x) -> (ScientificMovementOfCrustalPlates(x) & OnSurfaceOfEarth(x)))", "score": -1}
{"id": "eqasc_validation_1363", "prediction": "all x y z.(Plate(x) & CrustalPlate(y) & EarthSurface(z) -> Crustal(y))", "score": 0}
{"id": "eqasc_validation_1363", "prediction": "all x.(PlateTectonics(x) -> PavementOfCrustalPlates(x))", "score": 0}
{"id": "eqasc_validation_1363", "prediction": "all x.(PlateTectonics(x) -> (MovementGround-OfCrustalPlates(x) & onSurfaceOfEarth(x)))", "score": -1}
{"id": "eqasc_validation_1363", "prediction": "all x.(PlateTectonics(x) -> (PlasticMovement(x) & OnEarthSurface(x) & PlacesCrustalPlates(x)))", "score": 0}
{"id": "eqasc_validation_1363", "prediction": "all x y z.((PlateTectonics(x) & CrustalPlates(y) & EarthSurface(z)) -> ProgressibleMovement(x,y,z))", "score": 0}
{"id": "eqasc_validation_1363", "prediction": "all x.(PlateTectonics(x) -> (Movement(y) & NoctalPlates(y) & SurfaceOfEarth(z)))", "score": 0}
{"id": "eqasc_validation_1363", "prediction": "all x.(PlateTectonics(x) -> (MovementOfCrustalPlates(x) & OnSurfaceOfEarth(x)))", "score": 0}
{"id": "eqasc_validation_1363", "prediction": "all x.(PlateTectonics(x) -> (GraduateCrustalPlaques(x) & OnSurfaceOfEarth(x)))", "score": 0}
{"id": "eqasc_validation_1363", "prediction": "all x y z.((Plate(x) & CranialPlate(y) & EarthSurface(z)) -> ProgressiveMovementOn(x,y,z))", "score": 0}
{"id": "eqasc_validation_1363", "prediction": "all x y z.((PlateTectonics(x) & CrustalPlate(y) & EarthSurface(z)) -> MovingOn(x,y,z))", "score": 0}
{"id": "eqasc_validation_1364", "prediction": "all x.(PlateTectonics(x) -> (FormsHighMountains(x) & FormsWellRoundedPeaks(x)))", "score": 0}
{"id": "eqasc_validation_1364", "prediction": "all x.(PlateTectonics(x) -> (FormsHighMountains(x) & WellRoundedPeaks(x)))", "score": 0}
{"id": "eqasc_validation_1364", "prediction": "all x y.((PlateTectonics(x) & HighMountain(y) & WellRoundedPeak(y)) -> Forms(x,y))", "score": 0}
{"id": "eqasc_validation_1364", "prediction": "all x y z.((PlateTectonics(x) & Mountain(y) & Peak(z)) -> (High(y) & WellRounded(z) & From(x,y) & From(x,y) & From(x,z))))", "score": -1}
{"id": "eqasc_validation_1364", "prediction": "all x.(PlateTectonics(x) -> (HighMountains(x) & WellRoundedPeaks(x)))", "score": 0}
{"id": "eqasc_validation_1364", "prediction": "all x y.((PlateTectonics(x) & HighMountain(y) & WellRoundedPeaks(y)) -> FormedWith(x,y))", "score": 0}
{"id": "eqasc_validation_1364", "prediction": "all x.(PlateTectonic(x) -> FormsHighMountainsWithWellRoundedPeaks(x))", "score": 0}
{"id": "eqasc_validation_1364", "prediction": "all x.(PlasticTectonics(x) -> (FormsHighMountains(x) & WellRoundedPeaks(x)))", "score": 0}
{"id": "eqasc_validation_1365", "prediction": "all x.(PlateTectonics(x) -> (StudiesCrustalPlates(x) & StudiesCrustalBoundaries(x)))", "score": 0}
{"id": "eqasc_validation_1365", "prediction": "all x.(PlateTectonics(x) -> (StudyOfCrustalPlates(x) & StudiesBoundaries(x)))", "score": 0}
{"id": "eqasc_validation_1365", "prediction": "all x y z.((PlateTectonics(x) & CraspalPlate(y) & Breach(z)) -> Studies(x,y,z))", "score": 0}
{"id": "eqasc_validation_1365", "prediction": "all x.(PlateTectonics(x) -> (StudiesCrustalPlates(x) & StudiesBorders(x)))", "score": 0}
{"id": "eqasc_validation_1365", "prediction": "all x.(PlateTectonics(x) -> (StudiesCrustalPlatesAndBoundaries(x)))", "score": 0}
{"id": "eqasc_validation_1365", "prediction": "all x.(PlateTectonics(x) -> (StudiesCrustalPlates(x) & StudiesBoundaries(x)))", "score": 0}
{"id": "eqasc_validation_1365", "prediction": "all x.(PlateTectonics(x) -> (ProvidesCrustalPlates(x) & StudiesCrustalPlates(x) & StudiesBorders(x)))", "score": 0}
{"id": "eqasc_validation_1365", "prediction": "all x y.((PlateTectonics(x) & CrustalPlate(y)) -> StudiesBoundaries(x,y))", "score": 0}
{"id": "eqasc_validation_1365", "prediction": "all x.(PlateTectonics(x) -> (StudiesCrustalPlates(x) & StudiesCrustalPlateBoundaries(x)))", "score": 0}
{"id": "eqasc_validation_1365", "prediction": "all x.(PlateTectonics(x) -> (StudyOfCrustalPlates(x) & StudyOfBloodesheets(x)))", "score": 0}
{"id": "eqasc_validation_1366", "prediction": "all x.(HighMountains(x) -> (StudiesPlateTectonics(x) & ExposesFormation(x,y)))", "score": 0}
{"id": "eqasc_validation_1366", "prediction": "all x y.((HighMountain(x) & PlateTectonics(y)) -> CanExplainFormation(x,y))", "score": 0}
{"id": "eqasc_validation_1366", "prediction": "all x.(HighMountainFormation(x) -> (DoesPlateTectonicsSupport(x) & ExplainedBy(x,PlateTechnology)))", "score": 0}
{"id": "eqasc_validation_1366", "prediction": "all x y z.((HighMountain(x) & PlateTectonics(y) & PlateTectonics(z)) -> CanExplainFormation(x,y,z))", "score": 0}
{"id": "eqasc_validation_1366", "prediction": "all x.(HighMountain(x) -> CanBeExplainedByPlateTectonics(x))", "score": 0}
{"id": "eqasc_validation_1366", "prediction": "all x.((HighMountain(x) & StudiedByPlateTectonics(x)) -> CanExplainFormation(x))", "score": 0}
{"id": "eqasc_validation_1366", "prediction": "all x.(HighMountain(x) -> (PlateTectonicStudy(x) & ExplainedBy(x,PlateTectonics)))", "score": 0}
{"id": "eqasc_validation_1366", "prediction": "all x.((HighMountain(x) & PlateTectonics(x)) -> CanBeExplained(x))", "score": 0}
{"id": "eqasc_validation_1366", "prediction": "all x.(HighMountain(x) -> (SocietiesAnalysisCertonics(x) | StudiesPlateTectonics(x)))", "score": 0}
{"id": "eqasc_validation_1366", "prediction": "all x y.((HighMountains(x) & PlateTectonics(y)) -> CanBeExplained(x,y))", "score": 0}
{"id": "eqasc_validation_1366", "prediction": "all x.(HighMountain(x) -> (StudiesPlateTectonics(x) & ExplainsFormation(x)))", "score": 0}
{"id": "eqasc_validation_1366", "prediction": "all x y.((HighMountain(x) & PlateTectonics(y)) -> CanExplore(x,y))", "score": 0}
{"id": "eqasc_validation_1366", "prediction": "all x.(HighMountain(x) -> -(PlateTectonics(y) & Studies(x,y)))", "score": 0}
{"id": "eqasc_validation_1366", "prediction": "all x y.((HighMountain(x) & PlateTectonics(y)) -> CanBeExplainedBy(x,y))", "score": 0}
{"id": "eqasc_validation_1366", "prediction": "all x.((HighMountain(x) & PlateTectonics(x)) -> CanExplainFormation(x))", "score": 0}
{"id": "eqasc_validation_1366", "prediction": "all x.((HighMountainFormation(x) & PlateTectonicsResearch(x)) -> ExplainedBy(x,y))", "score": 0}
{"id": "eqasc_validation_1367", "prediction": "all x.((Problem(x) & Collision(x) & Subduction(x)) -> Earthquakes(x))", "score": 0}
{"id": "eqasc_validation_1367", "prediction": "all x.((Phenomenon(x) & Collision(x) & Subduction(x)) -> Earthquakes(x))", "score": 0}
{"id": "eqasc_validation_1367", "prediction": "all x.((AssociatesCollision(x) & AssociatesSubductionOfPlates(x)) -> Earthquakes(x))", "score": 0}
{"id": "eqasc_validation_1367", "prediction": "all x.((Phenomenon(x) & CollisionAndSubduction(x) & Plates(x)) -> Earthquakes(x))", "score": 0}
{"id": "eqasc_validation_1367", "prediction": "exists x.(Phenomenon(x) & CollisionAndSubduction(x) & PlatePhenomenon(x))", "score": 0}
{"id": "eqasc_validation_1367", "prediction": "all x y.((Function(x) & Collision(y) & SubductionOfPlates(z) & Along(y,z)) -> earthquakes(x))", "score": 0}
{"id": "eqasc_validation_1367", "prediction": "all x y.((Phenomenon(x) & Collision(y) & Subduction(y)) -> Earthquakes(x))", "score": 0}
{"id": "eqasc_validation_1367", "prediction": "all x.((Phenomenon(x) & Collision(x) & SubductionOfPlates(x)) -> Earthquakes(x))", "score": 0}
{"id": "eqasc_validation_1367", "prediction": "all x y z.((Chain(x) & Plate(y) & Collision(z) & Subduction(z,y)) -> Earthquakes(x))", "score": 0}
{"id": "eqasc_validation_1367", "prediction": "all x y z w.((Phenomenon(x) & Collision(y) & Subduction(z) & Plate(w) & Earthquakes(w)) -> Phenomenon(x))", "score": 0}
{"id": "eqasc_validation_1367", "prediction": "all x.((Phenomenon(x) & Collision(x) & Subduction(x) & Plates(x)) -> Earthquakes(x))", "score": 0}
{"id": "eqasc_validation_1367", "prediction": "all x.((Phenomenon(x) & Collision(x) & SubductionEarthquakes(x)) -> InvolvedInPeriodicPlate(x))", "score": 0}
{"id": "eqasc_validation_1367", "prediction": "all x.((Earthquake(x) & Collision(x) & Subduction(x)) -> Crackery(x))", "score": 0}
{"id": "eqasc_validation_1367", "prediction": "all x.(Earthquakes(x) -> (AssociatedWithCouple(x) & Subduction(x)))", "score": 0}
{"id": "eqasc_validation_1367", "prediction": "all x.(Has(x,y) -> (Collects(y) & Subduction(y) & Plates(y) & Earthquakes(y)))", "score": 0}
{"id": "eqasc_validation_1368", "prediction": "all x y.((Earthquake(x) & HighMountain(y)) -> FormsInEmpathia(x,y))", "score": 0}
{"id": "eqasc_validation_1368", "prediction": "all x y.((Earthquake(x) & HighMountain(y)) -> FormsInSameLamb(x,y))", "score": 0}
{"id": "eqasc_validation_1368", "prediction": "all x y.((Earthquake(x) & HighMountain(y)) -> FormsInSameMannerWith(x,y))", "score": 0}
{"id": "eqasc_validation_1368", "prediction": "all x y z w.((Earthquake(x) & HighMountain(y) & Mountains(z)) -> FormsInSameSameFormation(x,y,z))", "score": 0}
{"id": "eqasc_validation_1368", "prediction": "all x y z.((Earthquake(x) & HighMountain(y) & HighMountain(z)) -> (FormInSameSignalAs(x,z)))", "score": 0}
{"id": "eqasc_validation_1368", "prediction": "all x y z.((Earthquake(x) & HighMountain(y) & HighMountain(z)) -> FormsInTheAsMountainType(x,y,z))", "score": 0}
{"id": "eqasc_validation_1368", "prediction": "all x.(Earthquake(x) -> FormsInTheSameMountainsAsHighMountains(x))", "score": 0}
{"id": "eqasc_validation_1368", "prediction": "all x y.((Earthquake(x) & HighMountain(y)) -> FormsSameAsHighMoon(x,y))", "score": 0}
{"id": "eqasc_validation_1368", "prediction": "all x y.((Earthquake(x) & HighMountain(y)) -> FormsInEqualNumberEqualHeart(x,y))", "score": 0}
{"id": "eqasc_validation_1368", "prediction": "all x.(Earthquake(x) -> (MadeInSameSignalAsHighMountain(x) & FormedInSameSignalAsHighMountain(x)))", "score": 0}
{"id": "eqasc_validation_1368", "prediction": "all x y.((EarthquakeLast(x) & HighMountain(y)) -> FormsDaily(x))", "score": 0}
{"id": "eqasc_validation_1368", "prediction": "all x y.((Earthquake(x) & HighMountain(y)) -> SameFormation(x,y))", "score": 0}
{"id": "eqasc_validation_1368", "prediction": "all x y.((Earthquake(x) & HighMountain(y)) -> FormedInSameManner(x,y))", "score": 0}
{"id": "eqasc_validation_1368", "prediction": "all x.(Earthquake(x) -> (FormsInSameManner(x,HighMountains) & FormsInSameManner(x,HighMountains)))", "score": 0}
{"id": "eqasc_validation_1368", "prediction": "all x y z.((Earthquake(x) & HighMountain(y) & HighMountain(z)) -> FormsInSameMethodAs(x,y))", "score": 0}
{"id": "eqasc_validation_1368", "prediction": "all x y.((Earthquake(x) & HighMountain(y)) -> FormsInTheSameEasyLike(x,y))", "score": 0}
{"id": "eqasc_validation_1369", "prediction": "all x.(Himachal(x) -> (ColloquiatureOfCrustalPlates(x) & FormedByCrasalPlates(x)))", "score": 0}
{"id": "eqasc_validation_1369", "prediction": "all x.(Himalaya(x) -> FormedByCrustallCollectation(x))", "score": 0}
{"id": "eqasc_validation_1369", "prediction": "all x.(Himalaya(x) -> (FormedByCrusalPlateCollision(x) & CrustalPlateCollimination(x)))", "score": 0}
{"id": "eqasc_validation_1369", "prediction": "all x y z.((Himalayas(x) & CrustalPlate(y) & CressalPlate(z) & Collision(x,y,z)) -> FormedBy(x,y))", "score": 0}
{"id": "eqasc_validation_1369", "prediction": "all x.(Himalaya(x) -> (FormedByCroricalPlateCollisions(x) & RocksCrustalPlates(x) & CrasstalPlatesCollisions(x) & RockPlatesCrustalPlatesCollisions(x)))", "score": 0}
{"id": "eqasc_validation_1369", "prediction": "all x y z.((Hermana(x) & CrustalPlate(y) & CrustalPlate(z)) -> CollisionForms(x,y))", "score": 0}
{"id": "eqasc_validation_1369", "prediction": "all x.(Himalaya(x) -> FormedByCrustalPlateCollosion(x))", "score": 0}
{"id": "eqasc_validation_1369", "prediction": "All x y.((Himalaya(x) & CrustalPlate(y) & Collision(x,y)) -> FormedBy(x,y))", "score": -1}
{"id": "eqasc_validation_1369", "prediction": "(CruiselPlateCompany(himalayan) & CrustalPlateCombble(himalayan))", "score": 0}
{"id": "eqasc_validation_1369", "prediction": "all x.(Himalayas(x) -> CollidingOfCrustalPlates(x))", "score": 0}
{"id": "eqasc_validation_1369", "prediction": "all x y.((Hemalayas(x) & CrustalPlate(y)) -> ForcedByCollision(x,y))", "score": 0}
{"id": "eqasc_validation_1369", "prediction": "(FormedByCrustallPhysicles(NH-210) & CollisionsOfCrustalPlates(NH-214))", "score": -1}
{"id": "eqasc_validation_1369", "prediction": "all x.(Himalayas(x) -> (CruisedByCruisedPlates(x) & FormedByCrustalPlates(x)))", "score": 0}
{"id": "eqasc_validation_1369", "prediction": "all x y z.((Himalaya(x) & CrustalPlate(y) & CrasticPlate(z)) -> CreatesBy(x,y,z))", "score": 0}
{"id": "eqasc_validation_1369", "prediction": "all x y.((Melisas(x) & CrustalPlate(y)) -> FormedByCollision(x,y))", "score": 0}
{"id": "eqasc_validation_1369", "prediction": "all x.(Himachal(x) -> CollisionOfCrustalPlates(x))", "score": 0}
{"id": "eqasc_validation_1370", "prediction": "all x.((Volcano(x) & FoundAlongCollidingBoundaries(x)) -> FantasticCrustalPlate(x))", "score": 0}
{"id": "eqasc_validation_1370", "prediction": "all x y.((Volcano(x) & Earth(y)) -> FoundAlongCrossilBoundaries(x,y))", "score": 0}
{"id": "eqasc_validation_1370", "prediction": "all x y.((Volcano(x) & Earth(y)) -> Found AlongColidingBoundaries(x,y))", "score": -1}
{"id": "eqasc_validation_1370", "prediction": "all x y z.((Volcano(x) & Earth(y) & GreatCrustalPlate(z)) -> FoundBetweenBoundaries(x,y,z))", "score": 0}
{"id": "eqasc_validation_1370", "prediction": "all x.(Vulcan(x) -> (OnEarth(x) & FoundAlongCollidingBoundariesOfGreatCrustalPlates(x)))", "score": 0}
{"id": "eqasc_validation_1370", "prediction": "all x y.((Volcano(x) & Earth(y)) -> FoundAlong(x,y))", "score": 0}
{"id": "eqasc_validation_1370", "prediction": "all x.(Vulcan(x) -> (OnEarth(x) & CollidingBoundaries(x) & GreatCrustalPlates(x)))", "score": 0}
{"id": "eqasc_validation_1370", "prediction": "all x.(Volcano(x) -> (exists y.(CrustalPlate(y) & CollidingBoundaries(y,x))))", "score": 0}
{"id": "eqasc_validation_1370", "prediction": "all x y.((Volcano(x) & Earth(y)) -> CollidingBoundariesOfGrandPlates(x,y))", "score": 0}
{"id": "eqasc_validation_1370", "prediction": "all x y.((Volcano(x) & Earth(y)) -> FoundAlongCollidingBoundaries(x,y))", "score": 0}
{"id": "eqasc_validation_1370", "prediction": "all x.(Volcano(x) -> (OnEarth(x) & CollidingBorders(x,greatCrustalPlates)))", "score": 0}
{"id": "eqasc_validation_1370", "prediction": "all x.(Volcano(x) -> OnEarth(x))", "score": 0}
{"id": "eqasc_validation_1370", "prediction": "all x y.((Volcano(x) & Earth(y)) -> FoundOnCollidingBoundaries(x,y))", "score": 0}
{"id": "eqasc_validation_1370", "prediction": "all x.(Volcano(x) -> exists y.(CrustalPlate(y) & CollidingBoundaries(x,y))))", "score": -1}
{"id": "eqasc_validation_1370", "prediction": "all x y.((Volcano(x) & Earth(y)) -> CollidingBoundariesOfGreatCrustalPlates(x,y))", "score": 0}
{"id": "eqasc_validation_1370", "prediction": "all x.((Volcano(x) & Earth(x) & CollidingBoundariesOfGrandeCrustalPlates(x)) -> FoundOn(x,y))", "score": 0}
{"id": "eqasc_validation_1371", "prediction": "all x.(Volcano(x) -> LikelyLikelyToBeFoundInHighMountains(x))", "score": 0}
{"id": "eqasc_validation_1371", "prediction": "all x.(Volcano(x) -> (NearHighMountains(x) & FoundNearHighMountains(x)))", "score": 0}
{"id": "eqasc_validation_1371", "prediction": "all x.(Volcano(x) -> LikelyFindNearHighMountain(x))", "score": 0}
{"id": "eqasc_validation_1371", "prediction": "all x.(Volcano(x) -> (LikelyToBeHundredNovels(x) & NearHighMountains(x)))", "score": 0}
{"id": "eqasc_validation_1371", "prediction": "all x y.((Volcano(x) & HighMountain(y) & Near(x,y)) -> DesignedBy(x,y))", "score": 0}
{"id": "eqasc_validation_1371", "prediction": "all x.(Volcano(x) -> LocatedNearHighMountains(x))", "score": 0}
{"id": "eqasc_validation_1371", "prediction": "all x y.((Volcano(x) & HighMountain(y)) -> LikelyFoundBehind(x,y))", "score": 0}
{"id": "eqasc_validation_1371", "prediction": "all x y.((Volcano(x) & HighMountain(y)) -> LikelyToBeFound(x,y))", "score": 0}
{"id": "eqasc_validation_1371", "prediction": "all x.(Volcano(x) -> NearHighMountain(x))", "score": 0}
{"id": "eqasc_validation_1371", "prediction": "all x.(Volcano(x) -> (LikelyFound(x,highMountains) | Near(x,lowMountains)))", "score": 0}
{"id": "eqasc_validation_1371", "prediction": "all x.(Volcano(x) -> FoundNearHighMountain(x))", "score": 0}
{"id": "eqasc_validation_1371", "prediction": "all x.(Volcano(x) -> LikelyFindingNearHighMountains(x))", "score": 0}
{"id": "eqasc_validation_1371", "prediction": "all x y.((Volcano(x) & HighMountain(y)) -> LikelyFindableNear(x,y))", "score": 0}
{"id": "eqasc_validation_1371", "prediction": "all x.(Volcano(x) -> FoundNearHighMountains(x))", "score": 0}
{"id": "eqasc_validation_1371", "prediction": "all x.(Volcano(x) -> ProbablyFindsNearHighMountains(x))", "score": 0}
{"id": "eqasc_validation_1371", "prediction": "all x y.((Volcano(x) & HighMountain(y)) -> FoundNear(x,y))", "score": 0}
{"id": "eqasc_validation_1372", "prediction": "all x y.((HighMountain(x) & WellRoundedPeak(x) & PlateTectonics(y)) -> FormedByCollusion(x,y))", "score": 0}
{"id": "eqasc_validation_1372", "prediction": "all x y.((HighMountain(x) & WellRoundedPeak(y) & Met(x,y)) -> FormedByCollision(x))", "score": 0}
{"id": "eqasc_validation_1372", "prediction": "all x.((HighMountain(x) & WellRoundedPeak(x)) -> (FormedByCoupling(x,PlateTectonics,PlateTectonics)))", "score": 0}
{"id": "eqasc_validation_1372", "prediction": "all x y.((HighMountain(x) & WellRoundedPeaks(y) & ScenicPlateTectonics(x) & CollisionOf(x,y)) -> FormedByCollision(x))", "score": 0}
{"id": "eqasc_validation_1372", "prediction": "all x.((HighMountain(x) & WellRoundedPeaks(x)) -> (FormedByCoupulation(x) & StudiedByPlateTectonics(x)))", "score": 0}
{"id": "eqasc_validation_1372", "prediction": "all x.((HighMountain(x) & WellRoundedPeaks(x)) -> CollapseOfStudies(x))", "score": 0}
{"id": "eqasc_validation_1372", "prediction": "all x y z.((HighMountain(x) & WellRoundedPeak(y) & PlateTectonics(z) & Collision(x,y,z)) -> CanForm(x,y))", "score": 0}
{"id": "eqasc_validation_1372", "prediction": "all x y z.((HighMountain(x) & WellRoundedPeak(y) & PlateTectonics(z) & Study(z)) -> (FormedByCollision(x,y) & StudiedByPlateTectonics(x)))", "score": 0}
{"id": "eqasc_validation_1372", "prediction": "all x y z.((HighMountain(x) & WellRoundedPeaks(y) & PlateTectonicsDiscussion(z)) -> (FormedByColcation(x,y,z) & Collision(x,z)))", "score": 0}
{"id": "eqasc_validation_1372", "prediction": "all x y.((HighMountain(x,y) & WellRoundedPeak(x,y)) -> (Collidation(x,y) & PlateTectonics(x)))", "score": 0}
{"id": "eqasc_validation_1372", "prediction": "all x y z.((HighMountain(x) & WellRoundedPeaks(z) & PlateTectonics(x)) -> FormedByCollusion(x,z))", "score": 0}
{"id": "eqasc_validation_1372", "prediction": "all x y.((HighMountain(x) & WellRoundedPeaks(x) & PlateTectonic(y)) -> (FormedByComlapsing(x,y) & StudiedByPlateTectonics(y)))", "score": 0}
{"id": "eqasc_validation_1372", "prediction": "all x.((HighMountain(x) & WellRoundedPeaks(x) & Collision(x) & StudiedByPlateTectonics(x)) -> FormedBy(x))", "score": 0}
{"id": "eqasc_validation_1372", "prediction": "exists x.(Sequence(x) & Collission(x) & PlateTectonics(x) & HighMountainsWellRoundedPeaks(x) & ShapedByCollection(x))", "score": 0}
{"id": "eqasc_validation_1372", "prediction": "all x y z.((HighMountain(x) & WellRoundedPeak(x) & PlateTectonics(y) & Collision(z)) -> CanFormByCollusion(x,z))", "score": 0}
{"id": "eqasc_validation_1372", "prediction": "all x y.((HighMountain(x) & WellRoundedPeaks(x)) -> (FormedByCollision(x,y) & StudiedByPlateTectonics(y)))", "score": 0}
{"id": "eqasc_validation_1373", "prediction": "all x.((HighMountain(x) & WellRoundedPeaks(x) & CollisionOfPlateTectonics(x)) -> FormsHighMountains(x))", "score": 0}
{"id": "eqasc_validation_1373", "prediction": "all x.((HighMountain(x) & WellRoundedPeaks(x)) -> (FormedByCollisionOfPlateTectonics(x)))", "score": 0}
{"id": "eqasc_validation_1373", "prediction": "all x.((HighMountain(x) & WellRoundedPeaks(x)) -> CollisionOfPlateTectonics(x))", "score": 0}
{"id": "eqasc_validation_1373", "prediction": "all x y.((HighMountain(x) & WellRoundedPeak(y) & PlateTectonicsCoupling(x)) -> FormedBy(x,y))", "score": 0}
{"id": "eqasc_validation_1373", "prediction": "all x.((HoleMountain(x) & WellRoundedPeaks(x)) -> CollisionOfPlateTectonics(x))", "score": 0}
{"id": "eqasc_validation_1373", "prediction": "all x y.((HighMountain(x) & WellRoundedPeak(x) & PlateTectonicCollapssion(y)) -> FormedBy(x,y))", "score": 0}
{"id": "eqasc_validation_1373", "prediction": "all x.((HighMountain(x) & WellRoundedPeaks(x)) -> CollisionElectronics(x))", "score": 0}
{"id": "eqasc_validation_1373", "prediction": "all x y.((HighMountain(x) & WellRoundedPeak(y) & PlateTectonicComparison(x,y)) -> FormedByCollapse(x,y))", "score": 0}
{"id": "eqasc_validation_1373", "prediction": "all x y.((HighMountain(x) & WellRoundedPeak(y) & PlateTectonic(x) & CollisionOfPlateTectonics(x,y)) -> FormedBy(x,y))", "score": 0}
{"id": "eqasc_validation_1373", "prediction": "all x y.((HighMountain(x) & WellRoundedPeak(x) & PlateTectonicConstriction(y) & Collision(x,y)) -> FormedBy(x,z))", "score": 0}
{"id": "eqasc_validation_1373", "prediction": "all x.((HighMountain(x) & WellRoundedPeaks(x)) -> (FormedByCollisionOfPlateTectonics(x) & HasPlateTectonics(x)))", "score": 0}
{"id": "eqasc_validation_1373", "prediction": "all x y.((HighMountainTree(x) & WellRoundedPeak(x) & PlateTectonicsCommission(y)) -> FormedBy(x,y))", "score": 0}
{"id": "eqasc_validation_1373", "prediction": "all x y z.((HighMountain(x) & WellRoundedPeak(y) & PlateTectonics(z)) -> CanFormByCollision(x,y,z))", "score": 0}
{"id": "eqasc_validation_1373", "prediction": "all x y.((HighMountain(x) & WellRoundedPeak(x) & PlateTectonics(y) & Collision(x,y)) -> FormedBy(x,y))", "score": 0}
{"id": "eqasc_validation_1373", "prediction": "all x y.((HighMountain(x) & WellRoundedPeaks(x) & PlateTectonicsColcation(y)) -> FormedBy(x,y))", "score": 0}
{"id": "eqasc_validation_1374", "prediction": "all x.(Infancy(x) -> MostRapidGrowthAfterBirth(x))", "score": 0}
{"id": "eqasc_validation_1374", "prediction": "all x.(Infancy(x) -> RapidGrowthAfterBirth(x))", "score": 3}
{"id": "eqasc_validation_1374", "prediction": "all x.(Infancy(x) -> (RapidGrowthAfterBirth(x)))", "score": 3}
{"id": "eqasc_validation_1374", "prediction": "All x.(Infancy(x) -> RapidGrowthAfterBirth(x))", "score": -1}
{"id": "eqasc_validation_1374", "prediction": "all x.(Infancy(x) -> During(x,Birth))", "score": 0}
{"id": "eqasc_validation_1374", "prediction": "all x.(Infancy(x) -> (RapidGrowthAfterBirth(x) & MostRapidAfterBirth(x)))", "score": 3}
{"id": "eqasc_validation_1374", "prediction": "(RapidGrowthAfterBirth(Infancy) & UsuallyAfterBirth(Infancy))", "score": 1}
{"id": "eqasc_validation_1374", "prediction": "all x.(UndertookInfancy(x) -> MostRapidGrowthAfterBirth(x))", "score": 0}
{"id": "eqasc_validation_1374", "prediction": "all x.(Infancy(x) -> (RapidGrowthAfterBirth(x,9)))", "score": 0}
{"id": "eqasc_validation_1375", "prediction": "all x.((Baby(x) & RapidGrowth(x)) -> LearnsMost(x))", "score": 0}
{"id": "eqasc_validation_1375", "prediction": "all x.(Baby(x) _(RapidGrowth(x) & LearnsMost(x)))", "score": -1}
{"id": "eqasc_validation_1375", "prediction": "all x.((Baby(x) & RapidGrowthPeriod(x)) -> LearnsMostDuring(x,y))", "score": 0}
{"id": "eqasc_validation_1375", "prediction": "all x.(Baby(x) -> LearnsMostDuringRapidGrowthPeriod(x))", "score": 0}
{"id": "eqasc_validation_1375", "prediction": "all x.((Baby(x) & RapidGrowthPeriod(x)) -> LearnsMost(x))", "score": 0}
{"id": "eqasc_validation_1375", "prediction": "all x.((Baby(x) & RapidGrowthPeriod(x)) -> LearnsMostDuring(x,RapidGrowth))", "score": 0}
{"id": "eqasc_validation_1375", "prediction": "all x.(Baby(x) -> LearnsMostInRapidGrowth(x))", "score": 0}
{"id": "eqasc_validation_1375", "prediction": "all x.((Baby(x) & RapidGrowthPeriod(x)) -> LearnsMostDuring(x))", "score": 0}
{"id": "eqasc_validation_1375", "prediction": "all x.(Babie(x) -> (RapidGrowth(x) & LearnsMost(x)))", "score": 0}
{"id": "eqasc_validation_1375", "prediction": "all x.(Baby(x) -> (CroatGrowthPeriod(x) & LearnsMost(x)))", "score": 0}
{"id": "eqasc_validation_1376", "prediction": "exists x.(Baby(x) & LowBornWeight(x))", "score": 0}
{"id": "eqasc_validation_1376", "prediction": "exists x.(Baby(x) & BornWithLowBirthWeight(x))", "score": 0}
{"id": "eqasc_validation_1376", "prediction": "all x.(Baby(x) -> BornWithLowBirthWeight(x))", "score": 0}
{"id": "eqasc_validation_1376", "prediction": "exists x.(Baby(x) & IsBornWithlowBirthWeight(x))", "score": 0}
{"id": "eqasc_validation_1376", "prediction": "all x.((Birth(x) & BornWithLowBirthWeight(x)) -> BornWithLowBirthWeight(x))", "score": 0}
{"id": "eqasc_validation_1376", "prediction": "all x.((Baby(x) & BornWithLowBirthWeight(x)) -> BornWithLowBirthWeight(x))", "score": 0}
{"id": "eqasc_validation_1376", "prediction": "all x.(Baby(x) -> (BirthWithLowBirthMass(x)))", "score": 0}
{"id": "eqasc_validation_1376", "prediction": "all x.(Baby(x) -> BornWithLowBirthWight(x))", "score": 0}
{"id": "eqasc_validation_1376", "prediction": "exists x.(Birth(x) & BornLowBirthWeight(x))", "score": 0}
{"id": "eqasc_validation_1376", "prediction": "exists x.(Baby(x) & LowBirthWeight(x))", "score": 0}
{"id": "eqasc_validation_1376", "prediction": "all x y.((Baby(x) & LowBirthWeight(y)) -> BornWith(x,y))", "score": 0}
{"id": "eqasc_validation_1377", "prediction": "all x.(Infancy(x) -> (RapidGrowthAfterBirth(x) & BornTo(x)))", "score": 0}
{"id": "eqasc_validation_1377", "prediction": "all x.(Infancy(x) -> PeriodOfHostestRapidGrowthAfterBirth(x))", "score": 0}
{"id": "eqasc_validation_1377", "prediction": "all x.((Infancy(x) & MostRapidGrowthAsBorn(x)) -> MostRapidGrowthAfterBirth(x))", "score": 0}
{"id": "eqasc_validation_1377", "prediction": "all x.(Infancy(x) -> (PeriodOfRapidGrowthAfterBirth(x) & Born(x)))", "score": 0}
{"id": "eqasc_validation_1377", "prediction": "all x.(Infancy(x) -> (RapidGrowthAfterBirth(x) & MostRapidGrowthAfterBirth(x)))", "score": 0}
{"id": "eqasc_validation_1377", "prediction": "all x.(Infancy(x) -> (MostRapidGrowthAfterBirth(x) & BecameAlbum(x)))", "score": 0}
{"id": "eqasc_validation_1377", "prediction": "all x.(Infancy(x) -> (RapidGrowthAfterBirth(x) & Born(x)))", "score": 0}
{"id": "eqasc_validation_1377", "prediction": "all x.(Infancy(x) -> (RapidGrowthAfterBirth(x) & BecomingBirth(x)))", "score": 0}
{"id": "eqasc_validation_1377", "prediction": "all x.(Infancy(x) -> (RapidGrowthAfterBeingBorn(x) & Born(x)))", "score": 0}
{"id": "eqasc_validation_1377", "prediction": "all x.((Fancy(x) & MostRapidGrowthAfterBirth(x)) -> MostRapidGrowthAfterBirth(x))", "score": 0}
{"id": "eqasc_validation_1377", "prediction": "all x.(Infancy(x) -> (RapidGrowthAfterBirthBeforeBeingBirth(x) & DurationOfGrowth(x)))", "score": 0}
{"id": "eqasc_validation_1377", "prediction": "all x y z.(Infancy(x) -> (RapidGrowthAfterBirth(y) & Born(z) & MostRapid(x,W)))", "score": 0}
{"id": "eqasc_validation_1377", "prediction": "all x.(Infancy(x) -> (RapidGrowth(x) & Born(y) & -Infancy(x)))", "score": 0}
{"id": "eqasc_validation_1377", "prediction": "all x.(Infancy(x) -> (RapidGrowthAfterBirth(x) & Birthing(x)))", "score": 0}
{"id": "eqasc_validation_1378", "prediction": "all x.(Learning(x) -> (Infancy(x) & BecomesCompressed(x)))", "score": 0}
{"id": "eqasc_validation_1378", "prediction": "all x.(Learning(x) -> StartsInInfancy(x))", "score": 0}
{"id": "eqasc_validation_1378", "prediction": "all x.(Learning(x) -> Infancy(x))", "score": 0}
{"id": "eqasc_validation_1378", "prediction": "all x.(Learning(x) -> BeginsInInfancy(x))", "score": 0}
{"id": "eqasc_validation_1378", "prediction": "all x.(LearningStartsInInfancy(x) -> LearnsInInfancy(x))", "score": 0}
{"id": "eqasc_validation_1378", "prediction": "all x.(Learning(x) -> InInfancy(x))", "score": 0}
{"id": "eqasc_validation_1378", "prediction": "all x y.((Learning(x) & Infancy(y)) -> StartsIn(x,y))", "score": 0}
{"id": "eqasc_validation_1378", "prediction": "all x.(Learning(x) -> BeginningInInfancy(x))", "score": 0}
{"id": "eqasc_validation_1378", "prediction": "all x.(LearningHost(x) -> (Infancy(x) & Infancy(x)))", "score": 0}
{"id": "eqasc_validation_1378", "prediction": "all x.(Learning(x) -> InFancy(x))", "score": 0}
{"id": "eqasc_validation_1379", "prediction": "all x.(Birth(x) -> LearningEnds(x))", "score": 0}
{"id": "eqasc_validation_1379", "prediction": "all x.(Birth(x) -> LearningEndebuts(x))", "score": 0}
{"id": "eqasc_validation_1379", "prediction": "all x.(AfterBirth(x) -> Learning(x))", "score": 0}
{"id": "eqasc_validation_1379", "prediction": "all x.((Birth(x) & Learning(x)) -> Following(x,y))", "score": 0}
{"id": "eqasc_validation_1379", "prediction": "all x y.((Birth(x) & Child(y)) -> Learns(x,y))", "score": 0}
{"id": "eqasc_validation_1379", "prediction": "all x.(AfterBirth(x) -> LearningEnds(x))", "score": 0}
{"id": "eqasc_validation_1379", "prediction": "all x.((Birth(x) & Learning(x)) -> Starts(x))", "score": 0}
{"id": "eqasc_validation_1379", "prediction": "all x.((Birth(x) & Learning(x)) -> Begins(x))", "score": 0}
{"id": "eqasc_validation_1379", "prediction": "all x.(Birth(x) -> FirstLevelLearning(x))", "score": 0}
{"id": "eqasc_validation_1379", "prediction": "all x.((Birth(x) & Born(x)) -> LearningStarts(x))", "score": 0}
{"id": "eqasc_validation_1379", "prediction": "all x.((Birth(x) & Learning(x)) -> Beginning(x))", "score": 0}
{"id": "eqasc_validation_1379", "prediction": "all x.((Birth(x) & Birth(x)) -> Learning(x))", "score": 0}
{"id": "eqasc_validation_1379", "prediction": "all x.((Birth(x) & Learning(x)) -> Continues(x))", "score": 0}
{"id": "eqasc_validation_1380", "prediction": "all x y.((Baby(x) & Infancy(y)) -> (BeingYoung(x) & CoSleepingConvenientForFeedingSchedules(x,y)))", "score": 0}
{"id": "eqasc_validation_1380", "prediction": "all x.((Baby(x) & VeryYoung(x)) -> ConvenientForFeedingSchedules(x))", "score": 0}
{"id": "eqasc_validation_1380", "prediction": "all x.(Baby(x) & Young(x) & Infancy(x) & CoSleeping(x))", "score": 10}
{"id": "eqasc_validation_1380", "prediction": "all x y.((Baby(x) & VeryYoung(x)) -> (CoSleep(x,y) & PreferableForFeeding(y,x)))", "score": 0}
{"id": "eqasc_validation_1380", "prediction": "all x y.((Baby(x) & Child(y)) -> (HowToCo-Sleep(x,y) & InFancy(x)))", "score": -1}
{"id": "eqasc_validation_1380", "prediction": "(all x.((Baby(x) & Young(x)) -> CoSleep(x)))", "score": 0}
{"id": "eqasc_validation_1380", "prediction": "all x y.((Baby(x) & Infancy(y)) -> CoSleeping(x))", "score": 0}
{"id": "eqasc_validation_1380", "prediction": "(all x.(Baby(x) -> VeryYoung(x)) & all y.(Infancy(y) -> CoSleeping(x,y))))", "score": -1}
{"id": "eqasc_validation_1380", "prediction": "all x y.((Baby(x) & Infancy(y)) -> ((CoSleeping(x,y) & -Illustrated(x,y))))", "score": 0}
{"id": "eqasc_validation_1380", "prediction": "all x.((Baby(x) & VeryYoung(x)) -> (CoSleeps(x) & VeryComfortableForFeeding(x)))", "score": 0}
{"id": "eqasc_validation_1380", "prediction": "all x.((Baby(x) & VeryYear(x)) -> (Co-Sleeping(x) & PreferableFor(x,Infancy)))", "score": -1}
{"id": "eqasc_validation_1380", "prediction": "all x.((Baby(x) & VeryYoung(x)) -> CoSleepingFunctional(x))", "score": 0}
{"id": "eqasc_validation_1380", "prediction": "all x y.((Baby(x) & Young(x)) -> (CoSleeping(x) & Infancy(y) & ConvenientForFeedingSchedules(x)))", "score": 0}
{"id": "eqasc_validation_1380", "prediction": "all x.((Baby(x) & VeryYoung(x)) -> (CoSleeping(x) & InInfancy(x) & PrecommendableForFeedingSchedules(x)))", "score": 0}
{"id": "eqasc_validation_1380", "prediction": "all x.((Baby(x) & VeryYoung(x)) -> ConvenientCoSleeping(x))", "score": 0}
{"id": "eqasc_validation_1380", "prediction": "all x.((Baby(x) & Young(x)) -> VeryConvenientForFeedingSchedules(x))", "score": 0}
{"id": "eqasc_validation_1381", "prediction": "all x y.((Butterfly(x) & Young(y)) -> HasRapidGrowthAfterBirth(x,y))", "score": 0}
{"id": "eqasc_validation_1381", "prediction": "all x y.((Bird(x) & VeryYoung(x)) -> VeryRapidGrowthAfterBirth(y))", "score": 0}
{"id": "eqasc_validation_1381", "prediction": "all x y.((Baby(x) & VeryYoung(x)) -> MostRapidGrowthAfterBirth(y))", "score": 0}
{"id": "eqasc_validation_1381", "prediction": "all x.((Baby(x) & VeryYoung(x)) -> PeriodOfRapidGrowthAfterBirth(x))", "score": 0}
{"id": "eqasc_validation_1381", "prediction": "all x.((RapidGrowthAround(x) & VeryYoungBaby(x)) -> HasPeriodOfFastGrowthAfterBirth(x))", "score": 0}
{"id": "eqasc_validation_1381", "prediction": "all x y z.((Baby(x) & VeryYoung(y) & ThePastOfRapidGrowthAfterBirth(z)) -> MostRapidGrowthAfterBirth(x,y,z))", "score": 0}
{"id": "eqasc_validation_1381", "prediction": "all x.((Birth(x) & VeryYoung(x)) -> HasRapidGrowthAfterBirth(x))", "score": 0}
{"id": "eqasc_validation_1381", "prediction": "all x!((Bird(x) & VeryYoung(x)) -> MostRapidGrowthAfterBirth(x))", "score": 0}
{"id": "eqasc_validation_1381", "prediction": "all x.((Birth(x) & VeryYoung(x)) -> RhythmicGrowthBeforeBirth(x))", "score": 0}
{"id": "eqasc_validation_1381", "prediction": "all x.((Babie(x) & VeryYoung(x)) -> MostRapidGrowthPostBirth(x))", "score": 0}
{"id": "eqasc_validation_1381", "prediction": "all x.((Birth(x) & VeryYoung(x)) -> MostRapidGrowthExceedingBirth(x))", "score": 0}
{"id": "eqasc_validation_1381", "prediction": "all x y z.((Bird(x) & VeryYoung(y) & Birth(z) & MostRapidGrowth(x,y,z)) -> -InPastOfHorizontalGrowthAfterBirth(y,z))", "score": 0}
{"id": "eqasc_validation_1381", "prediction": "all x y z.((Birth(x) & VeryYoung(y) & Baby(x) & Birth(z)) -> MostRapidGrowthAfterBirth(y,x))", "score": 0}
{"id": "eqasc_validation_1381", "prediction": "all x.((Baby(x) & Young(x)) -> MostRapidGrowthPostBirthAfterBirth(x))", "score": 0}
{"id": "eqasc_validation_1381", "prediction": "all x.(TrèsYoungBaby(x) -> MostRapidGrowthAfterBirth(x))", "score": 0}
{"id": "eqasc_validation_1381", "prediction": "all x.((Baby(x) & VeryYoung(x)) -> MostRapidGrowthAfterBirthAtBirth(x))", "score": 0}
{"id": "eqasc_validation_1382", "prediction": "all x y.((Baby(x) & Birth(y)) -> FastestGrowth(x,y))", "score": 0}
{"id": "eqasc_validation_1382", "prediction": "all x.((Baby(x) & FastestGrowthAfterBirth(x)) -> UsuallyFastAfterBirth(x))", "score": 0}
{"id": "eqasc_validation_1382", "prediction": "all x.((Bird(x) & RapidGrowthAfterBirth(x)) -> InPeriodOfFastGrowth(x))", "score": 0}
{"id": "eqasc_validation_1382", "prediction": "all x y.((Bird(x) & Birth(y)) -> (RapidGrowthAfterBirth(x,y) & InPastureOf(x,y)))", "score": 0}
{"id": "eqasc_validation_1382", "prediction": "all x y z.((Baby(x) & Birth(y) & PeriodOfRapidGrowthAfter(x,y) & Born(z)) -> InPeriodOfRapidGrowthAfter(x,z))", "score": 0}
{"id": "eqasc_validation_1382", "prediction": "all x.((Baby(x) & MostRapidGrowthAfterBirth(x)) -> HasThrastGrowthOrCrowthAfterBirth(x))", "score": 0}
{"id": "eqasc_validation_1382", "prediction": "all x.((Birth(x) & MostRapidGrowth(x)) -> AfterBirth(x))", "score": 0}
{"id": "eqasc_validation_1382", "prediction": "all x.(Baby(x) -> (RapidGrowthAfterBirth(x) | RapidGrowthAfterBirth(x)))", "score": 3}
{"id": "eqasc_validation_1382", "prediction": "all x.((Birth(x) & MostRapidGrowthAfterBirth(x)) -> InPastOfGrowthAfterBirth(x))", "score": 0}
{"id": "eqasc_validation_1382", "prediction": "all x,y.((Baby(x) & Birth(y)) -> MostRapidGrowthAfter(x,y))", "score": -1}
{"id": "eqasc_validation_1382", "prediction": "all x y z.((Baby(x) & Birth(y) & GrowthPeriod(z)) -> MostRapid(x,y,z))", "score": 0}
{"id": "eqasc_validation_1382", "prediction": "all x y z.((Baby(x) & PeriodOfRapidGrowthAdmission(y) & Birth(z)) -> FastestGrowthAfterBirth(x,y,z))", "score": 0}
{"id": "eqasc_validation_1382", "prediction": "all x.(Baby(x) -> InRapidGrowthAfterBirth(x))", "score": 0}
{"id": "eqasc_validation_1382", "prediction": "all x.((Baby(x) & MostRapidGrowthAfterBirth(x)) -> InPeriodOfFastGrowthAfterBirth(x))", "score": 0}
{"id": "eqasc_validation_1382", "prediction": "all x y.((Baby(x) & Birth(y)) -> MostRapidGrowthPostBirth(x,y))", "score": 0}
{"id": "eqasc_validation_1382", "prediction": "all x y.((Bird(x) & Birthperiod(y)) -> RAREGrowthAfterBirth(x,y))", "score": 0}
{"id": "eqasc_validation_1383", "prediction": "all x.((PeerOfRapidGrowthAfterBirth(x) & Baby(x)) -> BabyGrowthFast(x))", "score": 0}
{"id": "eqasc_validation_1383", "prediction": "all x y.((Baby(x) & Baby(y)) -> MostRapidGrowthAfterBirth(x,y))", "score": 0}
{"id": "eqasc_validation_1383", "prediction": "all x.((Baby(x) & Baby(x)) -> RapidGrowthAfterBirth(x))", "score": 3}
{"id": "eqasc_validation_1383", "prediction": "all x.(RapidGrowthAfterBirth(x) -> Baby(x))", "score": 0}
{"id": "eqasc_validation_1383", "prediction": "all x.((Baby(x) & Baby(x)) -> PeriodOfRapidGrowth(x))", "score": 0}
{"id": "eqasc_validation_1383", "prediction": "all x.((BirthBirth(x) & Baby(x)) -> FastGrowthAfterBirth(x))", "score": 0}
{"id": "eqasc_validation_1383", "prediction": "all x y.((RapidGrowthAfterBirth(x) & Baby(y)) -> (ApplicationAdult(x,y) & Baby(x)))", "score": 0}
{"id": "eqasc_validation_1383", "prediction": "all x.((Period(x) & Baby(x)) -> (RapidGrowthAfterBirth(x) & Baby(x)))", "score": 0}
{"id": "eqasc_validation_1383", "prediction": "all x.((Birth(x) & Baby(x)) -> RapidGrowthAfterBirth(x))", "score": 0}
{"id": "eqasc_validation_1383", "prediction": "all x.((Birth(x) & Baby(x)) -> RapidGrowthPostCreation(x))", "score": 0}
{"id": "eqasc_validation_1383", "prediction": "all x.((PeriodOfRapidGrowthAfterBirth(x) & Baby(x)) -> Baby(x))", "score": 0}
{"id": "eqasc_validation_1383", "prediction": "all x y.((Baby(x) & Baby(y)) -> CrapidGrowthAfterBirth(x,y))", "score": 0}
{"id": "eqasc_validation_1383", "prediction": "all x.(Baby(x) -> (RapidGrowthAfterBirth(x) & Baby(x)))", "score": 4}
{"id": "eqasc_validation_1384", "prediction": "Infancy & Stages(Infancy)", "score": 0}
{"id": "eqasc_validation_1384", "prediction": "all x.(Infancy(x) -> HasThirdStages(x))", "score": 0}
{"id": "eqasc_validation_1384", "prediction": "All x.(Infancy(x) -> hasTwoStages(x))", "score": -1}
{"id": "eqasc_validation_1384", "prediction": "Infancy (Infancy(x) -> HasThreeStages(x))", "score": -1}
{"id": "eqasc_validation_1384", "prediction": "all x.(Infancy(x) -> HasThreeStages(x))", "score": 0}
{"id": "eqasc_validation_1384", "prediction": "InfancyhasThreeStages(Infancy,NewStages)", "score": 0}
{"id": "eqasc_validation_1384", "prediction": "(Infancy(in) -> HasTwoStages(in))", "score": 0}
{"id": "eqasc_validation_1384", "prediction": "all x.(Infancy(x) -> HasTwoStages(x))", "score": 0}
{"id": "eqasc_validation_1384", "prediction": "All x.(Infancy(x) -> HasThreeStages(x))", "score": -1}
{"id": "eqasc_validation_1384", "prediction": "all x.(Infancy(x) -> Stage(x,3))", "score": 0}
{"id": "eqasc_validation_1385", "prediction": "all x.((StageDownStage(x) & AfterBirth(x)) -> MostRapidGrowthToLife(x))", "score": 0}
{"id": "eqasc_validation_1385", "prediction": "all x.((Stage(x) & AfterBirth(x)) -> RapidGrowth(x))", "score": 0}
{"id": "eqasc_validation_1385", "prediction": "all x.((Stage(x) & Birth(x)) -> ModerateGrowthInLife(x))", "score": 0}
{"id": "eqasc_validation_1385", "prediction": "all x.(RapidGrowthInLife(x) -> AfterBirth(x))", "score": 0}
{"id": "eqasc_validation_1385", "prediction": "these changes during rapid growth in life.", "score": -1}
{"id": "eqasc_validation_1385", "prediction": "all x.((Stage(x) & AfterBirth(x)) -> RapidGrowthInLife(x))", "score": 0}
{"id": "eqasc_validation_1385", "prediction": "all x y.((Stage(x) & AfterBirth(x) & Stage(y)) -> (RapidGrowthInLife(y) & RapidGrowthInLife(y)))", "score": 0}
{"id": "eqasc_validation_1385", "prediction": "all x y.((Stage(x) & AfterBirth(x,y)) -> RapidGrowth(x))", "score": 0}
{"id": "eqasc_validation_1385", "prediction": "all x.((Stage(x) & AfterBirth(x)) -> MostRapidGrowth(x))", "score": 0}
{"id": "eqasc_validation_1385", "prediction": "all x.((Stage(x) & AfterBirth(x)) -> MostRapidGrowthInLife(x))", "score": 0}
{"id": "eqasc_validation_1385", "prediction": "all x.((ThirdStagesAfterBirth(x) & FastestGrowthInLife(x)) -> MostRapidGrowth(x))", "score": 0}
{"id": "eqasc_validation_1385", "prediction": "all x.((Stage(x,y) & Birth(x)) -> RhythmicGrowthInLife(y))", "score": 0}
{"id": "eqasc_validation_1385", "prediction": "all x.((AfterBirth(x) & ThreeStages(x)) -> MostRapidGrowthInLife(x))", "score": 0}
{"id": "eqasc_validation_1385", "prediction": "all x.(StepAfterBirth(x) -> MostRapidGrowth(x))", "score": 0}
{"id": "eqasc_validation_1385", "prediction": "all x.((StageAfterBirth(x) & StageAfterBirth(x)) -> RapidGrowthInLife(x))", "score": 0}
{"id": "eqasc_validation_1386", "prediction": "all x.((Infancy(x) & EarlyChildhood(x)) -> RapidGrowthAndDevelopment(x))", "score": 0}
{"id": "eqasc_validation_1386", "prediction": "all x y z.((Infancy(x) & EarlyChildhood(y) & Infancy(z)) -> (RapidGrowth(z) & RapidDevelopment(z) & Infancy(x,y) & EarlyChildhood(y)))", "score": 0}
{"id": "eqasc_validation_1386", "prediction": "all x.((Infancy(x) & EarlyChildhood(x)) -> (RapidGrowth(x) & RapidDevelopment(x)))", "score": 0}
{"id": "eqasc_validation_1386", "prediction": "all x.((Infancy(x) | EarlyChildhood(x)) -> (RapidGrowth(x) & RapidDevelopment(x)))", "score": 0}
{"id": "eqasc_validation_1386", "prediction": "all x.((Infancy(x) | EarlyCrowding(x)) -> (RapidGrowth(x) & RapidDevelopment(x)))", "score": 0}
{"id": "eqasc_validation_1386", "prediction": "all x.((Infancy(x) | EarlyCrowdbirth(x)) -> RapidGrowthAndDevelopment(x))", "score": 0}
{"id": "eqasc_validation_1386", "prediction": "all x.((Infancy(x) | EarlyChildren(x)) -> (SpeedyGrowth(x) & RapidDevelopment(x)))", "score": 0}
{"id": "eqasc_validation_1386", "prediction": "all x y.((Infancy(x) & EarlyChildhood(y)) -> (RapidGrowth(x) & RapidDevelopment(y)))", "score": 0}
{"id": "eqasc_validation_1386", "prediction": "all x.((Infancy(x) | EarlyCrowdcare(x)) -> (RapidGrowth(x) & RapidDevelopment(x)))", "score": 0}
{"id": "eqasc_validation_1387", "prediction": "all x.((Destination(x) & RapidInChildhood(x)) -> RapidInCrowdhood(x))", "score": 0}
{"id": "eqasc_validation_1387", "prediction": "all x.((Children(x) & EarlyStartUp(x)) -> RapidDevelopment(x))", "score": 0}
{"id": "eqasc_validation_1387", "prediction": "all x y.((Kinderhood(x) & Childhood(y)) -> RapidDevelopment(x,y))", "score": 0}
{"id": "eqasc_validation_1387", "prediction": "all x.((Crowd(x) & Childhood(x)) -> RapidDevelopment(x))", "score": 0}
{"id": "eqasc_validation_1387", "prediction": "all x y.((Child(x) & Childhood(y)) -> RapidDevelopment(x,y))", "score": 0}
{"id": "eqasc_validation_1387", "prediction": "all x.((Childhood(x) & RapidDevelopment(x)) -> RapidProgressIn(x,Childhood))", "score": 0}
{"id": "eqasc_validation_1387", "prediction": "all x y.((Crowd(x) & Childhood(y)) -> RapidDevelopment(x))", "score": 0}
{"id": "eqasc_validation_1387", "prediction": "all x y z.((Children(x) & Child(y) & Development(z)) -> RapidDevelopment(x,y,z))", "score": 0}
{"id": "eqasc_validation_1387", "prediction": "all x y z.((Childhood(x) & Childhood(y) & Childhood(z)) -> RapidDevelopment(x,y,z))", "score": 0}
{"id": "eqasc_validation_1387", "prediction": "all x y.((Child(x) & Child(y)) -> RapidDevelopment(x,y))", "score": 0}
{"id": "eqasc_validation_1387", "prediction": "all x.((Childhood(x) & RapidDevelopment(x)) -> RapidDevelopment(x))", "score": 0}
{"id": "eqasc_validation_1387", "prediction": "all x y z.((Birdhood(x) & Childhood(y) & Development(z)) -> RapidDevelopment(x,z))", "score": 0}
{"id": "eqasc_validation_1387", "prediction": "all x.((Crowd(x) & ChildSibling(x)) -> RapidDevelopment(x))", "score": 0}
{"id": "eqasc_validation_1388", "prediction": "all x y.((Development(x) & Growth(y)) -> (GetBetter(x) & GetBigger(y)))", "score": 0}
{"id": "eqasc_validation_1388", "prediction": "(all x.((Discipline(x) -> Better(x)) & all y.((Growth(y) & Better(y)) -> Bigger(y)))", "score": -1}
{"id": "eqasc_validation_1388", "prediction": "all x.(Dentification(x) -> Better(x) & Growth(x)))", "score": -1}
{"id": "eqasc_validation_1388", "prediction": "all x.((Development(x) & Growth(x)) -> (Better(x) & Bigger(x)))", "score": 0}
{"id": "eqasc_validation_1388", "prediction": "(all x y.((Development(x) & Improved(y)) -> Sizeable(y)))", "score": 0}
{"id": "eqasc_validation_1388", "prediction": "all x.((Development(x) -> Better(x)) & (Growth(x) -> Bigger(x)))", "score": 0}
{"id": "eqasc_validation_1388", "prediction": "all x.((Development(x) -> NeedsBetter(x)) & ((Growth(x) & NeedsBerger(x)) -> NeedsBetter(x)))", "score": 0}
{"id": "eqasc_validation_1388", "prediction": "(all x y.((Development(x) & Better(x)) -> Bigger(y)))", "score": 0}
{"id": "eqasc_validation_1388", "prediction": "all x y z.((Development(x) & Growth(y) & Development(z)) -> (GetBetter(x) & GetBigger(y)))", "score": 0}
{"id": "eqasc_validation_1388", "prediction": "all x y.((Development(x) & Growth(y)) -> (BeLike(x,y) & BeLarger(y)))", "score": 0}
{"id": "eqasc_validation_1388", "prediction": "(all x.(Development(x) -> Better(x)) & all y.(Growth(y) -> Bigger(y)))", "score": 0}
{"id": "eqasc_validation_1388", "prediction": "all x y.((Development(x) & Growth(y)) -> (GoesBetter(x) & GoesBigger(y)))", "score": 0}
{"id": "eqasc_validation_1388", "prediction": "all x y.((Development(x) & Growth(y)) -> (Growth(x) & GetBetter(x)))", "score": 0}
{"id": "eqasc_validation_1389", "prediction": "all x.(Infancy(x) -> (RapidLivingAfterBirth(x) & MostRapidGettingBiggerAfterBirth(x)))", "score": 0}
{"id": "eqasc_validation_1389", "prediction": "all x.(Infancy(x) -> (ProcessOfRapidGirlsBeforeBirth(x) & VeryRapidGetsBiggerAfterBirth(x)))", "score": 0}
{"id": "eqasc_validation_1389", "prediction": "all x y.((Infancy(x) & Birth(y)) -> (ZoomMore(x,y) & Fastest(x,y)))", "score": 0}
{"id": "eqasc_validation_1389", "prediction": "all x.(Infancy(x) -> (GetsBiggerAfterBirth(x) & MostRapidlyAfterBirth(x)))", "score": 0}
{"id": "eqasc_validation_1389", "prediction": "all x.(Infancy(x) -> (RapidlyGettingBiggerFollowingBirth(x) & AfterBirth(x)))", "score": 0}
{"id": "eqasc_validation_1389", "prediction": "all x.(Infancy(x) -> (MostRapidlyGettingBiggerAfterBirth(x) & AfterBirth(x)))", "score": 0}
{"id": "eqasc_validation_1389", "prediction": "the most-RapidGettingBiggerAfterBirth(infancy) -> IsPeriodOfInfancy(i))", "score": -1}
{"id": "eqasc_validation_1389", "prediction": "all x.(Infancy(x) -> (RapidlyGainingBerthAfterBirth(x) & AfterBirth(x)))", "score": 0}
{"id": "eqasc_validation_1389", "prediction": "all x.(Infancy(x) -> ((MostRapidlyGettingBiggerAfterBirth(x) & AfterBirth(x)) | MostRapidlyGettingBiggerAsAtBirth(x))))", "score": -1}
{"id": "eqasc_validation_1389", "prediction": "all x.(Infancy(x) -> (PopularGrowthAfterBirth(x,y) & MostRapidlyGrowingBirth(y)))", "score": 0}
{"id": "eqasc_validation_1389", "prediction": "all x.(Infancy(x) -> (SummerOfGirlsWhenBirth(x) & MostRapidlyBigger(x)))", "score": 0}
{"id": "eqasc_validation_1389", "prediction": "all x y.((Infancy(x) & Birth(y)) -> (RapidGettingBigger(x,y)))", "score": 0}
{"id": "eqasc_validation_1389", "prediction": "all x.(Infancy(x) -> (GetsBigger(x) & MostRapidAfterBirth(x)))", "score": 0}
{"id": "eqasc_validation_1389", "prediction": "all x.(Infancy(x) -> (ZielOfAlmostGettingBiggerAfterBirth(x) & AlmostNecessarilyGettingBiggerAfterBirth(x)))", "score": 0}
{"id": "eqasc_validation_1389", "prediction": "all x.(Infancy(x) -> (RapidlyGettingBiggerBeforeBirth(x) & AfterBirth(x)))", "score": 0}
{"id": "eqasc_validation_1389", "prediction": "all x.(Infancy(x) -> (RapidGettingBiggerAfterBirth(x) & MostRapidlyAfterBirth(x)))", "score": 0}
{"id": "eqasc_validation_1390", "prediction": "all x.(Infant(x) -> exists y.(Year(y) & Birth(x,y))))", "score": -1}
{"id": "eqasc_validation_1390", "prediction": "all x.(Infant(x) -> (BirthTo(x,y) & OneYear(y)))", "score": 0}
{"id": "eqasc_validation_1390", "prediction": "all x.(Infant(x) -> BirthToOneYear(x))", "score": 0}
{"id": "eqasc_validation_1390", "prediction": "all x.(Infant(x) -> BirthToYear(x))", "score": 0}
{"id": "eqasc_validation_1390", "prediction": "all x.(Infant(x) -> BornTo(x,1))", "score": 0}
{"id": "eqasc_validation_1390", "prediction": "all x.(Infant(x) -> Birth(x,y))", "score": 0}
{"id": "eqasc_validation_1391", "prediction": "all x.(RapidGrowthPeriod(x) -> TermOneYear(x))", "score": 0}
{"id": "eqasc_validation_1391", "prediction": "all x.(RapidGrowthPeriod(x) -> FirstYear(x))", "score": 0}
{"id": "eqasc_validation_1391", "prediction": "all x.(RapidGrowthPhase(x) -> FirstYear(x))", "score": 0}
{"id": "eqasc_validation_1391", "prediction": "all x.((PeriodOfRapidGrowth(x) & FirstYear(x)) -> MostRapidGrowth(x))", "score": 0}
{"id": "eqasc_validation_1391", "prediction": "(RapidGrowthPeriod(r):FirstYear(r) & MostRapidGrowthPeriod(r) & FirstYear(r))", "score": -1}
{"id": "eqasc_validation_1391", "prediction": "all x.(RapidGrowthPage(x) -> FirstYearOfGrowth(x))", "score": 0}
{"id": "eqasc_validation_1391", "prediction": "all x.(RapidGrowthPeriod(x) -> InitialYear(x))", "score": 0}
{"id": "eqasc_validation_1391", "prediction": "the period of most rapidgrowth is the first year.", "score": -1}
{"id": "eqasc_validation_1391", "prediction": "all x y.((PeriodOfRapidGrowth(x) & Year(y)) -> FirstYear(x))", "score": 0}
{"id": "eqasc_validation_1391", "prediction": "all x.(RapidGrowthPeriod(x) -> (FirstYear(x) | MonthOfRapidGrowth(x)))", "score": 0}
{"id": "eqasc_validation_1391", "prediction": "all x.((PeriodOfRapidGrowth(x) & -ExposureOfFastGrowth(x)) -> FirstYear(x))", "score": 0}
{"id": "eqasc_validation_1391", "prediction": "all x y.((PeriodOfRapidGrowth(x) & FirstYear(y,x)) -> RapidGrowth(y))", "score": 0}
{"id": "eqasc_validation_1391", "prediction": "all x.(RapidGrowthPeriod(x) -> ThisFirstYear(x))", "score": 0}
{"id": "eqasc_validation_1392", "prediction": "all x y z.((Infant(x) | Child(y) | Teen(z)) -> HighNaturityNeeds(x,y,z))", "score": 0}
{"id": "eqasc_validation_1392", "prediction": "all x.((Infant(x) | Child(x) | Teen(x)) -> (HighNutritionNeeds(x) & FuelRapidGrowth(x)))", "score": 0}
{"id": "eqasc_validation_1392", "prediction": "all x.((Infant(x) | Child(x) | Teen(x)) -> HasRelativelyHighNutritionNeeds(x))", "score": 0}
{"id": "eqasc_validation_1392", "prediction": "all x y z.((Infant(x) | Child(y) | Teen(z)) -> HighNutritionNeeds(x,y,z))", "score": 0}
{"id": "eqasc_validation_1392", "prediction": "all x.((Infant(x) | Child(x) | Teen(x)) -> HasRelativelyHighNutritionNeeds(x,y))", "score": 0}
{"id": "eqasc_validation_1392", "prediction": "all x.((Infant(x) | Children(x) | Teenage(x)) -> HighNutritionNeedsToFuelRapidGrowth(x))", "score": 0}
{"id": "eqasc_validation_1392", "prediction": "all x.((Infant(x) | Child(x) | Teen(x)) -> HighNutritionNeeds(x))", "score": 0}
{"id": "eqasc_validation_1392", "prediction": "all x.((Infant(x) | Children(x) | Teenage(x)) -> HighNutritionalNeeds(x))", "score": 0}
{"id": "eqasc_validation_1392", "prediction": "all x y.((Infant(x) | Child(y) | Teen(y)) -> (RelativelyHighNutritionNeeds(x,y) & FuelsRapidGrowth(y)))", "score": 0}
{"id": "eqasc_validation_1392", "prediction": "all x.((Infant(x) | Child(x) | Teen(x)) -> (RelativelyHighNutritionNeed(x) & FuelRapidGrowth(x)))", "score": 0}
{"id": "eqasc_validation_1392", "prediction": "all x.((Infant(x) | Child(x) | Teen(x)) -> (RelativelyHighNutritionNeeds(x) & FuelRapidGrowth(x)))", "score": 0}
{"id": "eqasc_validation_1392", "prediction": "all x.((Infant(x) | Child(x) | Teen(x)) -> (AbsolutelyHighNutritionNeeds(x) & FuelsRapidGrowth(x)))", "score": 0}
{"id": "eqasc_validation_1392", "prediction": "(RelativelyHighNutritionNeeds(infant,certain) & HighNutritionNeeds(children,teen))", "score": 0}
{"id": "eqasc_validation_1392", "prediction": "all x.((Infant(x) | Child(x) | Teen(x)) -> RapidGrowth(x))", "score": 0}
{"id": "eqasc_validation_1393", "prediction": "all x.(HighNutrition(x) -> FuelsBirth(x))", "score": 0}
{"id": "eqasc_validation_1393", "prediction": "all x y.((Infant(x,y) & Food(y)) -> HighNutrition(x,y))", "score": 0}
{"id": "eqasc_validation_1393", "prediction": "all x y.((Infant(x) & Baby(y)) -> FuelsGrowth(x,y))", "score": 0}
{"id": "eqasc_validation_1393", "prediction": "all x y.((Infant(x) & Infant(y)) -> HighNutrient(x,y))", "score": 0}
{"id": "eqasc_validation_1393", "prediction": "all x y.((Infant(x) & Infant(y) & HighNutrition(x,y)) -> FuelsGrowth(y,x))", "score": 0}
{"id": "eqasc_validation_1393", "prediction": "all x.((Infant(x) & HighNutrition(x)) -> FuelsGrowth(x))", "score": 0}
{"id": "eqasc_validation_1393", "prediction": "all x.(HighNutrition(x) -> NeededForInfantGrowth(x))", "score": 0}
{"id": "eqasc_validation_1393", "prediction": "all x.(HighNutrition(x) -> FuelInfantGrowth(x))", "score": 0}
{"id": "eqasc_validation_1393", "prediction": "all x.((Irv(x) & HighNutrition(x)) -> FuelsGrowth(x))", "score": 0}
{"id": "eqasc_validation_1393", "prediction": "all x.((ToFuelInfantGrowth(x) & HighNutrition(x)) -> IsNeeded(x))", "score": 0}
{"id": "eqasc_validation_1393", "prediction": "all x.((Infant(x) & NeededHighNutrition(x)) -> FuelsGrowth(x))", "score": 0}
{"id": "eqasc_validation_1393", "prediction": "all x.((Infant(x) & HighNutrition(x)) -> FuelGrowth(x))", "score": 0}
{"id": "eqasc_validation_1393", "prediction": "all x y.((Infant(x) & Infant(y)) -> HighNutrition(x,y))", "score": 0}
{"id": "eqasc_validation_1393", "prediction": "all x y.((Infant(x) & Infant(y)) -> HighNutritionNecessityToGrowth(x,y))", "score": 0}
{"id": "eqasc_validation_1394", "prediction": "all x y.((Person(x) & Born(x) & BirthCertificate(y)) -> WrittenUpToRecordBirth(x,y))", "score": 0}
{"id": "eqasc_validation_1394", "prediction": "all x.((Person(x) & Born(x)) -> CreatesBirthCertificate(x))", "score": 0}
{"id": "eqasc_validation_1394", "prediction": "all x y.((Birth(x) & Person(y)) -> WrittenUp(x,y))", "score": 0}
{"id": "eqasc_validation_1394", "prediction": "all x.(Birth(x) -> WrittenBirthCertificate(x))", "score": 0}
{"id": "eqasc_validation_1394", "prediction": "all x.(Birth(x) -> WrittenUpCertain(x))", "score": 0}
{"id": "eqasc_validation_1394", "prediction": "all x y.((Person(x) & Born(y)) -> (WrittenBirthCertificate(x,y) & Record(y,x)))", "score": 0}
{"id": "eqasc_validation_1394", "prediction": "all x.((Person(x) & Born(x)) -> WrittenBirthCertificate(x))", "score": 0}
{"id": "eqasc_validation_1394", "prediction": "all x.((Birth(x) & BirthCertificate(x)) -> WrittenUp(x))", "score": 0}
{"id": "eqasc_validation_1394", "prediction": "all x.((Person(x) & Born(x)) -> WrittenCertificateToRecordBirth(x))", "score": 0}
{"id": "eqasc_validation_1394", "prediction": "all x.((Person(x) & Born(x)) -> WrittenForBirth(x))", "score": 0}
{"id": "eqasc_validation_1394", "prediction": "all x y.((Person(x) & Born(x)) -> WrittenCertain(x,y))", "score": 0}
{"id": "eqasc_validation_1394", "prediction": "all x.((Person(x) & Born(x)) -> (WrittenBirthCertain(x) & RecordBirth(x)))", "score": 0}
{"id": "eqasc_validation_1394", "prediction": "all x y.((Person(x) & Born(x,y)) -> PlacesCertainToRecordBirth(x,y))", "score": 0}
{"id": "eqasc_validation_1394", "prediction": "all x y.((Person(x) & Born(x)) -> WrittenCertificate(x,y))", "score": 0}
{"id": "eqasc_validation_1394", "prediction": "all x.((Birth(x) & BirthCertificate(x)) -> WrittenUpToRecordCertification(x))", "score": 0}
{"id": "eqasc_validation_1394", "prediction": "all x.((Birth(x) & WrittenUpBirthCertificate(x)) -> RecordsBirth(x))", "score": 0}
{"id": "eqasc_validation_1395", "prediction": "all x.(Infancy(x) -> (RapidGrowthAsBorn(x)))", "score": 0}
{"id": "eqasc_validation_1395", "prediction": "all x.(Infancy(x) -> MostRapidGrowthAfterBeingBirth(x))", "score": 0}
{"id": "eqasc_validation_1395", "prediction": "all x.(Infancy(x) -> (RapidGrowthAfterBirth(x)))", "score": 0}
{"id": "eqasc_validation_1395", "prediction": "all x.(Infancy(x) -> RoughThanBeginning(x))", "score": 0}
{"id": "eqasc_validation_1395", "prediction": "all x.(Infancy(x) -> (FastGrowth(x) & Born(x)))", "score": 0}
{"id": "eqasc_validation_1395", "prediction": "all x.(Infancy(x) -> (RapidGrowthAfterBirth(x) & FastestGrowthAfterBirth(x)))", "score": 0}
{"id": "eqasc_validation_1395", "prediction": "all x.(Infancy(x) -> (RapidGrowthImmediatelyAfterBirth(x) & Born(x)))", "score": 0}
{"id": "eqasc_validation_1395", "prediction": "all x.(Infancy(x) -> (RapidGrowth(x) & BornIn(x)))", "score": 0}
{"id": "eqasc_validation_1395", "prediction": "all x.(Infancy(x) -> FastestRapidGrowthDupăBirth(x))", "score": 0}
{"id": "eqasc_validation_1395", "prediction": "all x.(Infancy(x) -> RapidGrowthAfterBirth(x))", "score": 0}
{"id": "eqasc_validation_1395", "prediction": "all x.(Infancy(x) -> (MostRapidGrowth(x) & Born(y)))", "score": 0}
{"id": "eqasc_validation_1396", "prediction": "all x.(Communication(x) -> InfancyCommunication(x))", "score": 0}
{"id": "eqasc_validation_1396", "prediction": "all x.(Connection(x) -> StartsInInfancy(x))", "score": 0}
{"id": "eqasc_validation_1396", "prediction": "all x.(Communication(x) -> EarlyInfancy(x))", "score": 0}
{"id": "eqasc_validation_1396", "prediction": "all x.(Communication(x) -> Infancy(x))", "score": 0}
{"id": "eqasc_validation_1396", "prediction": "all x.(Communication(x) -> InInfancy(x))", "score": 0}
{"id": "eqasc_validation_1396", "prediction": "all x y.((Communication(x) & Infancy(y)) -> (BeginsIn(x,y) & Enters(x,y)))", "score": 0}
{"id": "eqasc_validation_1396", "prediction": "all x.(Communication(x) -> StartsInInfancy(x))", "score": 0}
{"id": "eqasc_validation_1396", "prediction": "all x y.((Communication(x) & Infancy(y)) -> StartIn(x,y))", "score": 0}
{"id": "eqasc_validation_1396", "prediction": "all x.(Communication(x) -> EmbracesInfancy(x))", "score": 0}
{"id": "eqasc_validation_1397", "prediction": "all x y.((Communication(x) & HighestRapidGrowthAfterBirth(y)) -> Beginning(x,y))", "score": 0}
{"id": "eqasc_validation_1397", "prediction": "all x.(Communication(x) -> (EntersInRapidGrowth(x) & AfterBirth(x)))", "score": 0}
{"id": "eqasc_validation_1397", "prediction": "all x y.((Communication(x) & Birth(y)) -> MostRapidGrowthAfterBirth(y,x))", "score": 0}
{"id": "eqasc_validation_1397", "prediction": "all x.((Communication(x) & MostRapidGrowthAfterBirth(x)) -> StartsIn(x,RapidGrowth))", "score": 0}
{"id": "eqasc_validation_1397", "prediction": "all x.(Communication(x) -> (GrowthFastAfterBirth(x) & FounderFormsRapidGrowth(x)))", "score": 0}
{"id": "eqasc_validation_1397", "prediction": "all x.(Communication(x) -> (ExposesInRapidGrowth(x) & Birth(x) & Birth(x)))", "score": 0}
{"id": "eqasc_validation_1397", "prediction": "all x.((Communication(x) & MostRapidGrowthAfterBirth(x)) -> EntombsIn(x))", "score": 0}
{"id": "eqasc_validation_1397", "prediction": "all x y.((Communication(x) & Birth(y)) -> MostRapidGrowth(x,y))", "score": 0}
{"id": "eqasc_validation_1397", "prediction": "all x.((Communication(x) & MostRapidGrowthAfterBirth(x)) -> CommencesInTermAfterBirth(x))", "score": 0}
{"id": "eqasc_validation_1397", "prediction": "all x.(Communication(x) -> (MostRapidGrowthAfterBirth(x) & -MostRapidGrowthAfterBirth(x)))", "score": 0}
{"id": "eqasc_validation_1397", "prediction": "all x y.((Communication(x) & Birth(y)) -> MostRapidGrowthAfterBirth(x,y))", "score": 0}
{"id": "eqasc_validation_1397", "prediction": "all x.(Communication(x) -> (RapidGrowth(x) & Birth(x)))", "score": 0}
{"id": "eqasc_validation_1397", "prediction": "all x.(Communication(x) & MostRapidGrowthAfterBirth(x)) -> MostEnthusiasticGrowth(x))", "score": -1}
{"id": "eqasc_validation_1397", "prediction": "all x.(Communication(x) -> (RapidGrowthAfterBirth(x) & PeriodAvailableAfterBirth(x)))", "score": 0}
{"id": "eqasc_validation_1397", "prediction": "all x y z.((Communication(x) & Birth(y) & MostRapidGrowthAfterBirth(z)) -> CommencesInPastOf(x,y,z))", "score": 0}
{"id": "eqasc_validation_1397", "prediction": "(RelativelyRapidGrowthAfterBirth(Communication)", "score": -1}
{"id": "eqasc_validation_1398", "prediction": "all x.(RapidGrowth(x) -> RapidAdvancement(x))", "score": 0}
{"id": "eqasc_validation_1398", "prediction": "all x.(RapidGrowth(x) -> RapidAcquisition(x))", "score": 0}
{"id": "eqasc_validation_1398", "prediction": "all x.(RapidGrowth(x) -> RapidAccuracy(x))", "score": 0}
{"id": "eqasc_validation_1398", "prediction": "all x.(RapidGrowth(x) -> RapidAccroissement(x))", "score": 0}
{"id": "eqasc_validation_1398", "prediction": "all x y z.((RapidGrowth(x) & Approval(y) & Industry(z)) -> Rapid(x))", "score": 0}
{"id": "eqasc_validation_1398", "prediction": "all x y.((RapidGrowth(x) & RapidProgression(y)) -> RapidGrowth(x))", "score": 0}
{"id": "eqasc_validation_1398", "prediction": "all x.((RapidGrowth(x) & RapidProgression(x)) -> RapidGrowth(x))", "score": 0}
{"id": "eqasc_validation_1399", "prediction": "all x.(Infancy(x) -> (RapidAdvancement(x) & MostRapidAdvancement(x)))", "score": 0}
{"id": "eqasc_validation_1399", "prediction": "all x.(Infancy(x) -> RapidAdvancement(x))", "score": 0}
{"id": "eqasc_validation_1399", "prediction": "all x y.((Infancy(x) & FastestProgression(y)) -> PeriodOfInfancy(x,y))", "score": 0}
{"id": "eqasc_validation_1399", "prediction": "all x.(Infancy(x) -> FastestAdvancement(x))", "score": 0}
{"id": "eqasc_validation_1399", "prediction": "all x.(Infancy(x) -> RapidAcquisition(x))", "score": 0}
{"id": "eqasc_validation_1399", "prediction": "all x.(Infancy(x) -> MostRapidAvances(x))", "score": 0}
{"id": "eqasc_validation_1399", "prediction": "all x.(Infancy(x) -> Acceleration(x))", "score": 0}
{"id": "eqasc_validation_1399", "prediction": "all x.(Infancy(x) -> MostRapidAdvancement(x))", "score": 0}
{"id": "eqasc_validation_1399", "prediction": "(RapidAdvancement(Infancy) -> MostRapidProgress(Infancy))", "score": 0}
{"id": "eqasc_validation_1399", "prediction": "all x.(Infancy(x) -> (RapidAvancement(x) & MostRapidProgression(x)))", "score": 0}
{"id": "eqasc_validation_1399", "prediction": "all x y.((Infancy(x) & MostRapidAdvancement(y)) -> MostRapidSuccessfulAvancement(x,y))", "score": 0}
{"id": "eqasc_validation_1399", "prediction": "all x.(Infancy(x) -> (RapidProgressionPeriod(x) & MostRecipefulAdvancement(x)))", "score": 0}
{"id": "eqasc_validation_1399", "prediction": "all x.(Infancy(x) -> MostRapidProgress(x))", "score": 0}
{"id": "eqasc_validation_1399", "prediction": "all x.(Infancy(x) -> ThePeriodOfRapidAdvancement(x))", "score": 0}
{"id": "eqasc_validation_1400", "prediction": "all x y.((Food(x) & SalivaDigestiveGlands(y)) -> EasierToCheek(x,y))", "score": 0}
{"id": "eqasc_validation_1400", "prediction": "all x.((Food(x) & MoistenedBySaliva(x)) -> EasierToCheek(x))", "score": 0}
{"id": "eqasc_validation_1400", "prediction": "all x y.((Food(x) & SalivaryGlands(y)) -> EasierToChops(x,y))", "score": 0}
{"id": "eqasc_validation_1400", "prediction": "all x.((Food(x) & MoistenedBySaliva(x)) -> EasyToCheek(x))", "score": 0}
{"id": "eqasc_validation_1400", "prediction": "all x.((Food(x) & MoistenedBySavoryGlands(x)) -> BetterToCheek(x))", "score": 0}
{"id": "eqasc_validation_1400", "prediction": "all x.((Food(x) & MoisturizedBySaliva(x)) -> EasierToCheek(x))", "score": 0}
{"id": "eqasc_validation_1400", "prediction": "all x.(Food(x) -> (Moistened(x) & FromSalivaryGlands(x)))", "score": 0}
{"id": "eqasc_validation_1400", "prediction": "all x y z.((Food(x) & SalivaryGlands(y) & MoistenedBy(x,y) & Milk(x)) -> EasyToCheek(x))", "score": 0}
{"id": "eqasc_validation_1400", "prediction": "all x y.((Food(x) & MouthEnhancedBySalineGlands(y)) -> EasyToChew(x))", "score": 0}
{"id": "eqasc_validation_1400", "prediction": "all x.((Food(x) & MuzzenedBySpam(x)) -> EasierToChew(x))", "score": 0}
{"id": "eqasc_validation_1400", "prediction": "all x y.((Food(x) & SalivaryGlands(y) & MoistenedBy(x,y)) -> EasierToCheek(x))", "score": 0}
{"id": "eqasc_validation_1400", "prediction": "all x.((Food(x) & MoistenedBySaline(x)) -> EasierToChew(x))", "score": 0}
{"id": "eqasc_validation_1400", "prediction": "all x.((Food(x) & Moisture(x) & fromSalineGlands(x)) -> EasierToCheek(x))", "score": 0}
{"id": "eqasc_validation_1400", "prediction": "all x y.((Food(x) & SalivaryGlands(y)) -> EasierToCheek(x))", "score": 0}
{"id": "eqasc_validation_1400", "prediction": "all x y.((Food(x) & Sponge(y)) -> MoisturisedBySaline(x))", "score": 0}
{"id": "eqasc_validation_1400", "prediction": "all x.((Food(x) & MoistenedBySpite(x)) -> EasierToCheek(x))", "score": 0}
{"id": "eqasc_validation_1401", "prediction": "all x.(SalivaryGlendonCancerous(x) -> FoundThroughoutOralCavity(x))", "score": 0}
{"id": "eqasc_validation_1401", "prediction": "all x.(SalivaryGlandCancerSalivaryGlandsRemoteThroughoutOralCave(x) -> LocalizedThroughoutOralCave(x))", "score": 0}
{"id": "eqasc_validation_1401", "prediction": "all x.(SalivaryGlandCancer(x) -> (LocatedThroughoutOralCavity(x) & SalivaryGlandCancer(x)))", "score": 0}
{"id": "eqasc_validation_1401", "prediction": "all x.(SalivaryGlandCancer(x) -> (OralCavity(x) & SalivaryGlands(x) & LocatedThroughout(x,y)))", "score": 0}
{"id": "eqasc_validation_1401", "prediction": "all x.(SalivaryGlendCancerous(x) -> SalivaryGlenn(x))", "score": 0}
{"id": "eqasc_validation_1401", "prediction": "all x.(SalivaryGlandColor(x) -> SeatedThroughoutOralCavity(x))", "score": 0}
{"id": "eqasc_validation_1401", "prediction": "all x.(SalivaryGlandsCancer(x) -> SalivaryGlands(x))", "score": 0}
{"id": "eqasc_validation_1401", "prediction": "all x y.((SalivaryGlawn(x) & OralCavity(y)) -> Solved(x,y))", "score": 0}
{"id": "eqasc_validation_1401", "prediction": "all x y.((SalivaryGland(x) & OralCavity(y)) -> SalivaryGlandCancerous(x,y))", "score": 0}
{"id": "eqasc_validation_1401", "prediction": "all x y.((SalivaryGanum(x) & OralCavity(y)) -> SalivaryGanome(x,y))", "score": 0}
{"id": "eqasc_validation_1401", "prediction": "all x.(SalivaryGlands(x) -> (LocatedThroughoutOralCavity(x) & SalivaryGlands(x)))", "score": 0}
{"id": "eqasc_validation_1401", "prediction": "all x.(SalivaryGlandCancerSalivaryGländsLocatedThroughoutOralCavity(x) -> LocatedThroughoutOralCavity(x))", "score": 0}
{"id": "eqasc_validation_1401", "prediction": "all x.(SalivaryGalandCancerous(x) -> (SalivaryGlands(x) & FoundThroughoutOralCarboche(x)))", "score": 0}
{"id": "eqasc_validation_1401", "prediction": "all x.(SalivaryGlands(x) -> SalivaryGlandsCancer(x))", "score": 0}
{"id": "eqasc_validation_1401", "prediction": "all x y.((SalivaryGlands(x) & Malignant(y)) -> LocatedInOralCavity(x,y))", "score": 0}
{"id": "eqasc_validation_1401", "prediction": "all x.(SalivaryGlandCancer(x) -> (SalivaryGlands(x) & OccursThroughoutOralCavity(x)))", "score": 0}
{"id": "eqasc_validation_1402", "prediction": "all x y z.((Food(x) & OralCavity(y) & MoistenedBySab(x,y) & InOralCavity(x,z)) -> EasierToCheek(x))", "score": 0}
{"id": "eqasc_validation_1402", "prediction": "all x.((Food(x) & MoistenedBySaliva(x) & OralCavityInOralCavium(x)) -> BetterToChew(x))", "score": 0}
{"id": "eqasc_validation_1402", "prediction": "all x.((Food(x) & MoistenedBySaline(x) & OralChamber(x)) -> SofterToCheek(x))", "score": 0}
{"id": "eqasc_validation_1402", "prediction": "all x y z.((Food(x) & MustisedBySaft(x) & OralCavity(y) & MoistenedBySaft(x,y,z)) -> EasierToCheek(x))", "score": 0}
{"id": "eqasc_validation_1402", "prediction": "all x y.((Food(x) & Mouth-MoistenedBySaft(x),y) & OralCavity(y)) -> EasierToChew(x))", "score": -1}
{"id": "eqasc_validation_1402", "prediction": "all x y z.((Food(x) & MouthsInOralCavity(y) & Saliva(z) & MoistenedBy(x,z)) -> EasierToCheek(x))", "score": 0}
{"id": "eqasc_validation_1402", "prediction": "all x y.((Food(x) & PoralChamber(y)) -> (MoistenedBySatiety(x,y) & MoistenedByOralChamber(x,y)))", "score": 0}
{"id": "eqasc_validation_1402", "prediction": "all x y.((Food(x) & Dentin(y) & MoistenedBySaline(x,y)) -> EasierToCheek(x,y))", "score": 0}
{"id": "eqasc_validation_1402", "prediction": "all x y.((Food(x) & MouthwateringFlavorite(y) & MoistenedBySaft(x,y) & ThroughoutOralCarbohydrate(x) & MaltenedBySaft(y)) -> EasyToCheek(x))", "score": 0}
{"id": "eqasc_validation_1402", "prediction": "all x y.((Food(x) & OralCompartment(y)) -> (EasierToCheek(x),y) & MoistenedBySaline(x,y)))", "score": -1}
{"id": "eqasc_validation_1402", "prediction": "all x y z.((Food(x) & Saliva(y) & OralCavity(z)) -> MoussedBy(x,y))", "score": 0}
{"id": "eqasc_validation_1402", "prediction": "all x.((Food(x) & MoistenedBySaliva(x) & Tender(x)) -> EasierToCheek(x))", "score": 0}
{"id": "eqasc_validation_1402", "prediction": "all x.((Food(x) & MoistenedBySalvia(x)) -> EasierToCheek(x))", "score": 0}
{"id": "eqasc_validation_1402", "prediction": "all x.(EasierToChew(x) -> (Food(x) & MoistenedBySaline(x) & MoistenedBySaline(x)))", "score": 0}
{"id": "eqasc_validation_1402", "prediction": "all x.((Food(x) & MoistenedBySulfur(x) & MoistenedBySaliva(x) & MoistureDiverseOralCare(x)) -> EasierToCheek(x))", "score": 0}
{"id": "eqasc_validation_1402", "prediction": "all x y.((Food(x) & OralCarbohydrate(y) & MoisturedBySulfur(y)) -> EasierToCheek(x))", "score": 0}
{"id": "eqasc_validation_1403", "prediction": "FavoriteFood(x)", "score": 0}
{"id": "eqasc_validation_1403", "prediction": "all x.(FavoriteFood(x) -> Steak(x))", "score": 0}
{"id": "eqasc_validation_1403", "prediction": "(FavoriteFood(steak))", "score": 0}
{"id": "eqasc_validation_1403", "prediction": "IsFavoriteFood(IsSteak(I))", "score": 0}
{"id": "eqasc_validation_1403", "prediction": "all x.(Favorite(x) -> Steak(x))", "score": 0}
{"id": "eqasc_validation_1403", "prediction": "FavouriteFood(screw)", "score": 0}
{"id": "eqasc_validation_1403", "prediction": "FavoriteFood(steak)", "score": 0}
{"id": "eqasc_validation_1403", "prediction": "FavoriteFood(x) -> Steak(x))", "score": -1}
{"id": "eqasc_validation_1403", "prediction": "All x.(FavoriteFood(x) -> Steak(x))", "score": -1}
{"id": "eqasc_validation_1404", "prediction": "all x y.((Steak(x) & SalivaryGlands(y) & MoisturizedBy(x,y)) -> EasyToCheek(x))", "score": 0}
{"id": "eqasc_validation_1404", "prediction": "all x.((Steak(x) & MoisturizedBySulfur(x)) -> EasyToCheek(x))", "score": 0}
{"id": "eqasc_validation_1404", "prediction": "all x y z.((Steak(x) & SalivaryGlands(y) & SalivaryGlands(z)) -> EasierToCheek(x))", "score": 0}
{"id": "eqasc_validation_1404", "prediction": "all x.((Steak(x) & MoisturedBySlavonia(x)) -> EasierToCheek(x))", "score": 0}
{"id": "eqasc_validation_1404", "prediction": "all x.((Steak(x) & MoistureDisruptedBySlavones(x)) -> LessHarshToCheek(x))", "score": 0}
{"id": "eqasc_validation_1404", "prediction": "all x y.((Steak(x) & Sulfore(y) & MoistenedBySaliva(x)) -> EasierToCheek(x))", "score": 0}
{"id": "eqasc_validation_1404", "prediction": "all x y.((Steak(x) & SalivaRhinoganism(y)) -> EasierToCheek(x,y))", "score": 0}
{"id": "eqasc_validation_1404", "prediction": "all x.((Steak(x) & MoistenedBySaliva(x)) -> EasierToCheek(x))", "score": 0}
{"id": "eqasc_validation_1404", "prediction": "all x.(Steak(x) -> (EasierToCheek(x) & MoisturedBySaliva(x) & FromS salivaryGlands(x)))", "score": -1}
{"id": "eqasc_validation_1404", "prediction": "all x y.((Steak(x) & Serum(y)) -> (EasierToCheek(x) & MoisturedBySaliva(x,y)))", "score": 0}
{"id": "eqasc_validation_1404", "prediction": "all x y.((Steak(x) & Saliva(y)) -> (EasierToCheek(x) & MoistenedBy(x,y) & FromSatelliteGlands(x)))", "score": 0}
{"id": "eqasc_validation_1404", "prediction": "all x.((Steak(x) & MoistenedBySaft(x) & SalivaryGlands(x)) -> EasierToCheek(x))", "score": 0}
{"id": "eqasc_validation_1404", "prediction": "all x y.((Steak(x) & SalivaryGlands(y) & MoistureDiffused(x,y)) -> EasierToCheek(x))", "score": 0}
{"id": "eqasc_validation_1404", "prediction": "all x y.((Steak(x) & Sponge(y)) -> EasyToCheek(x))", "score": 0}
{"id": "eqasc_validation_1404", "prediction": "all x.((Steak(x) & MoistenedBySalineFromSalineGlands(x)) -> EasierToCheek(x))", "score": 0}
{"id": "eqasc_validation_1405", "prediction": "all x y.((Food(x) & Mouth(y) & Enter(x,y)) -> (BreaksDownByChooking(x,y) & BreaksDownByEnzymesInSausage(x)))", "score": 0}
{"id": "eqasc_validation_1405", "prediction": "all x.(Food(x) -> (EntersMouth(x) & BreaksDownBy(x,y) & ChewableBy(y) & BySavoryEnzymes(x)))", "score": 0}
{"id": "eqasc_validation_1405", "prediction": "all x y z.((Food(x) & Mouth(y) & Choking(z) & EnzymesInSaline(z)) -> (Entertain(x,y) & PartiallyBreakdown(x,z)))", "score": 0}
{"id": "eqasc_validation_1405", "prediction": "all x.(Food(x) -> (EntertainMouth(x) & (BrackedDownByChoosing(x) | BroachedDownByEnzymes(x))))", "score": 0}
{"id": "eqasc_validation_1405", "prediction": "all x.(Food(x) -> (IntroducesMouth(x) & BrokenDownByChooking(x) & BrewedDownByEnzymesInSaline(x)))", "score": 0}
{"id": "eqasc_validation_1405", "prediction": "all x y z.((Food(x) & Mouth(y) & Chewing(z) & Enzymes(e)) -> (Entertains(x,y) & BreaksDownBy(x,z)))", "score": 0}
{"id": "eqasc_validation_1405", "prediction": "all x.(Food(x) -> (EntersMouth(x) & BroachedByChoosingEnzymes(x)))", "score": 0}
{"id": "eqasc_validation_1405", "prediction": "all x y.((Food(x) & Mouth(y)) -> (Enters(x,y) & PartiallyBreakenedBy(x,y)))", "score": 0}
{"id": "eqasc_validation_1405", "prediction": "all x y.((Food(x) & Mouth(y)) -> (Enters(x,y) & BreakedDownBy(x,y) & Chewing(x) & EnzymesInSaline(x)))", "score": 0}
{"id": "eqasc_validation_1405", "prediction": "all x y z.((Food(x) & Mouth(y) & Chewing(z) & EnzymesInSaline(z)) -> (Enters(x,y) & BreaksDownBy(x,z)))", "score": 0}
{"id": "eqasc_validation_1405", "prediction": "all x y.((Food(x) & Mouth(y)) -> (Enters(x,y) & PartiallyBreathedBy(x,y) & ChewsAndBreathesByEnzymes(x)))", "score": 0}
{"id": "eqasc_validation_1405", "prediction": "all x.(Food(x) -> (EntersMouth(x) & BreaksDownByChoosing(x) & EnzymesInSavoria(x)))", "score": 0}
{"id": "eqasc_validation_1405", "prediction": "all x y.((Food(x) & Mouth(y)) -> (Entertains(x,y) & PartiallyBrokenDownByChewing(x) & PartiallyBrokenDownByEnzymes(x)))", "score": 0}
{"id": "eqasc_validation_1405", "prediction": "all x y z w.((Food(x) & Mouth(y) & Chewing(z) & Enzymes(w)) -> (Enters(x,y) & BreaksDown(x,z) & InSarum(z,w)))", "score": 0}
{"id": "eqasc_validation_1405", "prediction": "all x y.((Food(x) & Mouth(y) & Enters(x,y)) -> (BreaksDown(x,y) & (ChewsBy(x,y) | EnzymesInSaline(x))))", "score": 0}
{"id": "eqasc_validation_1405", "prediction": "all x.(Food(x) -> (EntersMouth(x) & BrokenDownByChoosing(x) & BrokenDownByEnzymesInSauce(x)))", "score": 0}
{"id": "eqasc_validation_1406", "prediction": "all x y.((Food(x) & EnzymeInMouth(y) & EnzymesInMouth(x)) -> EasierToCheek(x))", "score": 0}
{"id": "eqasc_validation_1406", "prediction": "all x y.((Food(x) & EnzymeInMouth(y)) -> EasierToCheek(x))", "score": 0}
{"id": "eqasc_validation_1406", "prediction": "all x y z.((Food(x) & Enzyme(y) & Mouth(z) & EnzymesInMouth(y,z)) -> EasierToCheek(x))", "score": 0}
{"id": "eqasc_validation_1406", "prediction": "all x y.((Food(x) & EnzymeInMouth(y)) -> EasierToCheek(x,y))", "score": 0}
{"id": "eqasc_validation_1406", "prediction": "all x.((Food(x) & EnzymesInMouth(x)) -> EasierToCheek(x))", "score": 0}
{"id": "eqasc_validation_1406", "prediction": "all x y.((Food(x) & Enzyme(y) & InMouth(x)) -> EasierToCheekAsExect(x,y))", "score": 0}
{"id": "eqasc_validation_1406", "prediction": "all x y z.((Food(x) & Enzymes(y) & Mouth(z)) -> SofterToEasyToCheek(x,y,z))", "score": 0}
{"id": "eqasc_validation_1406", "prediction": "all x y z.((Food(x) & Enzyme(y) & Mouth(z)) -> EasierToCheek(x))", "score": 0}
{"id": "eqasc_validation_1406", "prediction": "all x y.((Food(x) & EnzymesInMouth(y)) -> EasierToCheek(x))", "score": 0}
{"id": "eqasc_validation_1406", "prediction": "all x y z.((Food(x) & EnzymeInMouth(y) & EnzymeInMouth(z) & BetterToCheek(x)) -> EnzymesInMouth(y,z))", "score": 0}
{"id": "eqasc_validation_1406", "prediction": "all x.((Food(x) & BetterToCheek(x)) -> EnzymesInMouth(x))", "score": 0}
{"id": "eqasc_validation_1406", "prediction": "all x y.((Food(x) & Enzyme(y) & InMouth(r)) -> EasierToChew(x,y))", "score": 0}
{"id": "eqasc_validation_1406", "prediction": "all x y.((Food(x) & Enzyme(y) & InMouth(x)) -> EasierToCheek(x))", "score": 0}
{"id": "eqasc_validation_1406", "prediction": "all x y.((Food(x) & Enzyme(y)) -> EasierToCheek(x))", "score": 0}
{"id": "eqasc_validation_1407", "prediction": "(all x y.((Savory(x) & DigitationEnzyme(y)) -> Contains(x,y)))", "score": 0}
{"id": "eqasc_validation_1407", "prediction": "(all x.(Sulfa(x) -> DigestiveEnzymes(x)))", "score": 0}
{"id": "eqasc_validation_1407", "prediction": "(exists x.(Sulfur(x) & DigestiveEnzymes(x)))", "score": 0}
{"id": "eqasc_validation_1407", "prediction": "all x.(Sulfate(x) & DigestiveEnzymes(x))", "score": 0}
{"id": "eqasc_validation_1407", "prediction": "all x.(Sulgar(x) -> ContainsDigestiveEnzymes(x))", "score": 0}
{"id": "eqasc_validation_1407", "prediction": "all x y.((Saline(x) & DigestiveEnzymes(y)) -> Contains(x,y))", "score": 0}
{"id": "eqasc_validation_1407", "prediction": "all x.(Sauce(x) -> ContainsDigestiveEnzymes(x))", "score": 0}
{"id": "eqasc_validation_1407", "prediction": "all x y.((Sulfur(x) & DigestiveEnzyme(y)) -> Contains(x,y))", "score": 0}
{"id": "eqasc_validation_1407", "prediction": "all x.(Sulfur(x) -> DigestiveEnzymes(x))", "score": 0}
{"id": "eqasc_validation_1407", "prediction": "all x.(Saliva(x) -> ContainsDigestiveEnzymes(x))", "score": 0}
{"id": "eqasc_validation_1407", "prediction": "all x y.((Saline(x) & DigestiveEnzyme(y)) -> Contains(x,y))", "score": 0}
{"id": "eqasc_validation_1407", "prediction": "all x.(Salivar(x) -> ContainsDigestiveEnzymes(x))", "score": 0}
{"id": "eqasc_validation_1407", "prediction": "(all x.(Saline(x) -> DigestiveEnzymes(x)))", "score": 0}
{"id": "eqasc_validation_1407", "prediction": "Besides, saliva contains digestiveEnzymes (DigestiveEnzymes))", "score": -1}
{"id": "eqasc_validation_1407", "prediction": "all x.(Savory(x) -> ContainsDigestiveEnzymes(x))", "score": 0}
{"id": "eqasc_validation_1407", "prediction": "(ContainsDigestiveEnzymes(saft) & InAddition(saft(saft) & InAddition(saft(saft,sand))", "score": -1}
{"id": "eqasc_validation_1408", "prediction": "all x y.((Food(x) & DigestiveEnzymes(y) & BetterToCheek(x)) -> ImprovedToChoose(x,y))", "score": 0}
{"id": "eqasc_validation_1408", "prediction": "all x y.((Food(x) & DigestiveEnzymes(y)) -> EasierToCheek(x))", "score": 0}
{"id": "eqasc_validation_1408", "prediction": "all x y.((Food(x) & DigestiveEnzymes(y)) -> EasierToCheekDueTo(x,y))", "score": 0}
{"id": "eqasc_validation_1408", "prediction": "all x.((Food(x) & DigestiveEnzymes(x)) -> EasierToChew(x))", "score": 0}
{"id": "eqasc_validation_1408", "prediction": "all x.(DigestinalEnzymes(x) -> EssenceEasierToCheek(x))", "score": 0}
{"id": "eqasc_validation_1408", "prediction": "all x.((Food(x) & DigestiveEnzymes(x)) -> EasierToCheek(x))", "score": 0}
{"id": "eqasc_validation_1408", "prediction": "all x y z.((Food(x) & DigestiveEnzymes(y) & DigestiveEnzymes(z)) -> EasierToCheek(x))", "score": 0}
{"id": "eqasc_validation_1408", "prediction": "all x y z.((Food(x) & DigestiveEnzymes(y) & DigestiveEnzymes(z)) -> EasierToChew(x))", "score": 0}
{"id": "eqasc_validation_1408", "prediction": "all x.((Food(x) & DigestiveEnzymes(x)) -> EasyToCheek(x))", "score": 0}
{"id": "eqasc_validation_1408", "prediction": "all x y.((Food(x) & DigestiveEnzymes(y)) -> EasierToCheekDueToEnzymes(x,y))", "score": 0}
{"id": "eqasc_validation_1408", "prediction": "all x y.((Food(x) & DigestiveEnzyme(y)) -> EasierToChew(x,y))", "score": 0}
{"id": "eqasc_validation_1409", "prediction": "all x y.((SalivaryGlands(x) & Mouth(y)) -> FoundIn(x,y))", "score": 0}
{"id": "eqasc_validation_1409", "prediction": "all x.(SalivaryGlands(x) -> FoundInMouth(x))", "score": 0}
{"id": "eqasc_validation_1409", "prediction": "all x y.((SalivaryGlens(x) & Mouth(y)) -> FoundIn(x,y))", "score": 0}
{"id": "eqasc_validation_1410", "prediction": "all x y.((Food(x) & Gum(y) & MaltenedBySulfur(x)) -> LighterToCheek(x))", "score": 0}
{"id": "eqasc_validation_1410", "prediction": "all x.((Food(x) & MoistenedBySaliva(x) & FoundInMouthGlands(x)) -> EasierToCheek(x))", "score": 0}
{"id": "eqasc_validation_1410", "prediction": "all x y z w.((Food(x) & Saliva(y) & Glands(z) & MoisturedBy(x,y,z)) -> EasierToChew(x))", "score": 0}
{"id": "eqasc_validation_1410", "prediction": "all x.((Food(x) & MoisturedBySulfur(x)) -> EasilyToCheek(x))", "score": 0}
{"id": "eqasc_validation_1410", "prediction": "all x y z.((Food(x) & Saliva(y) & Glands(z) & MoisturizedBy(x,y,z)) -> EasyToQuick(x))", "score": 0}
{"id": "eqasc_validation_1410", "prediction": "all x y z.((Food(x) & Glissement(y) & Glissement(z) & MoisturizedBySulfa(x,y)) -> EasierToCheek(x))", "score": 0}
{"id": "eqasc_validation_1410", "prediction": "all x y.((Food(x) & Glymph(y) & FoundInMouth(y)) -> MoistenedBySalineGlands(x,y))", "score": 0}
{"id": "eqasc_validation_1410", "prediction": "all x y z.((Food(x) & Silica(y) & GlimmerInMouth(z)) -> MoistenedBySalineFromGlimmerInMouth(x,y,z))", "score": 0}
{"id": "eqasc_validation_1410", "prediction": "all x y z.((Food(x) & Glands(y) & Mouth(z) & Sustains(x,y)) -> CookerToChew(x))", "score": 0}
{"id": "eqasc_validation_1410", "prediction": "all x y z.((Food(x) & Saliva(y) & Throat(z) & MoistenedBy(x,y,z)) -> MoreEfficientToCheek(x))", "score": 0}
{"id": "eqasc_validation_1410", "prediction": "all x y.((Food(x) & Glimmer(y) & MoistenedAndSpite(x,y)) -> EasierToCheek(x))", "score": 0}
{"id": "eqasc_validation_1410", "prediction": "all x y.((Food(x) & Glühner(y) & MoistureDissolvedBy(x,y)) -> EasyToCheek(x))", "score": 0}
{"id": "eqasc_validation_1410", "prediction": "all x y.((Food(x) & Gum(y) & MoistenedBySaliva(x,y) & GumsInMouth(y)) -> EasierToCheek(x))", "score": 0}
{"id": "eqasc_validation_1410", "prediction": "all x.((Food(x) & MoistenedBySaline(y) & GumsInMouth(x)) -> EasierToCheek(x))", "score": 0}
{"id": "eqasc_validation_1410", "prediction": "all x.((Food(x) & SkinPorousEarn(x) & MoisturizedBySaliva(x)) -> EasyToCheek(x))", "score": 0}
{"id": "eqasc_validation_1410", "prediction": "all x y.((Food(x) & Saliva(y) & FoundInMouth(x,y)) -> MoistenedByGlands(x,y))", "score": 0}
{"id": "eqasc_validation_1411", "prediction": "all x.(BirdFood(x) -> BrainFood(x))", "score": 0}
{"id": "eqasc_validation_1411", "prediction": "all x.(Bakel(x) -> BrainFood(x))", "score": 0}
{"id": "eqasc_validation_1411", "prediction": "all x.(BuncleFood(x) -> BrainFood(x))", "score": 0}
{"id": "eqasc_validation_1411", "prediction": "all x.(Bagel(x) -> BrainFood(x))", "score": 0}
{"id": "eqasc_validation_1411", "prediction": "all x.(BreatheLight(x) -> BrainFish(x))", "score": 0}
{"id": "eqasc_validation_1411", "prediction": "all x.(BodyFood(x) -> BrainFood(x))", "score": 0}
{"id": "eqasc_validation_1411", "prediction": "all x.(Bernfood(x) -> BrainFood(x))", "score": 0}
{"id": "eqasc_validation_1411", "prediction": "all x.(BergyFood(x) -> BrainFood(x))", "score": 0}
{"id": "eqasc_validation_1411", "prediction": "all x.(BrainFood(x) -> BrainFood(x))", "score": 0}
{"id": "eqasc_validation_1411", "prediction": "all x.(Bubble(x) -> BrainFood(x))", "score": 0}
{"id": "eqasc_validation_1411", "prediction": "all x y.((Bagel(x) & BrainFood(y)) -> BrainFood(x))", "score": 0}
{"id": "eqasc_validation_1411", "prediction": "all x.(Breakfast(x) -> BrainFood(x))", "score": 0}
{"id": "eqasc_validation_1411", "prediction": "all x.(BernFood(x) -> BrainFood(x))", "score": 0}
{"id": "eqasc_validation_1411", "prediction": "all x.(BoneFood(x) -> (Ballels(x) & BrainFood(x)))", "score": 0}
{"id": "eqasc_validation_1411", "prediction": "all x.(BoneFood(x) -> BrainFood(x))", "score": 0}
{"id": "eqasc_validation_1411", "prediction": "all x.(BrainFood(x) -> (Bagel(x) | BrainFood(x)))", "score": 0}
{"id": "eqasc_validation_1412", "prediction": "all x.(Babbel(x) -> (SofterToChew(x) & MoistenedBySaline(x)))", "score": 0}
{"id": "eqasc_validation_1412", "prediction": "all x.((Bagel(x) & MoisturizedBySaline(x)) -> EasierToCheese(x))", "score": 0}
{"id": "eqasc_validation_1412", "prediction": "all x.(Baby(x) -> (MoistenedBySalineGlands(x) & MoltenByGlands(x)))", "score": 0}
{"id": "eqasc_validation_1412", "prediction": "all x.(Bubble(x) -> (MoistenedBySalineGlands(x) & BetterToChew(x)))", "score": 0}
{"id": "eqasc_validation_1412", "prediction": "all x.(Bagel(x) -> (MoistenedBySpa(x) & HasSalivaryGlands(x)))", "score": 0}
{"id": "eqasc_validation_1412", "prediction": "all x.(Bagel(x) -> (MoistenedBySalvia(x) & MoisturedBySalivaryGlands(x)))", "score": 0}
{"id": "eqasc_validation_1412", "prediction": "all x.(Bakel(x) -> (MoistenedBySaliva(x) & HasSavoryGlands(x)))", "score": 0}
{"id": "eqasc_validation_1412", "prediction": "all x.(Bagel(x) -> (EasierToChew(x) & MoistenedBySavor(x)))", "score": 0}
{"id": "eqasc_validation_1412", "prediction": "all x.((Bagel(x) & MoistenedBySavor(x,salivaryGlands)) -> AnEasierToCheek(x))", "score": 0}
{"id": "eqasc_validation_1412", "prediction": "all x.(Bagel(x) -> (HarmerToTuck(x) & MoistenedBySaline(x,salivaryGlands)))", "score": 0}
{"id": "eqasc_validation_1412", "prediction": "all x.(Bakel(x) -> (MoistenedBySaline(x) & SmoothToChew(x)))", "score": 0}
{"id": "eqasc_validation_1412", "prediction": "all x.(Bagel(x) -> (MoistenedBySaline(x) & SoftToCheek(x)))", "score": 0}
{"id": "eqasc_validation_1412", "prediction": "all x.((Bagel(x) & MummtenedBySauceDilution(x)) -> EasyToCheek(x))", "score": 0}
{"id": "eqasc_validation_1412", "prediction": "all x.(Bagel(x) -> (MoistenedBySavor(x) & FromSalivaryGlands(x)))", "score": 0}
{"id": "eqasc_validation_1412", "prediction": "all x.(Bagel(x) -> (MoistenedBySpite(x,saliva) & SofterToChew(x)))", "score": 0}
{"id": "eqasc_validation_1412", "prediction": "all x.(Bagel(x) -> MoistenedBySaliva(x))", "score": 0}
{"id": "eqasc_validation_1413", "prediction": "all x y.((Feed(x) & Saliva(y)) -> MixedWith(x,y))", "score": 0}
{"id": "eqasc_validation_1413", "prediction": "all x y.((Feed(x) & Saliva(y) & Mouth(y)) -> (MixedInMouth(x,y) & MoistBbolus(x) & EasyToSnake(x)))", "score": 0}
{"id": "eqasc_validation_1413", "prediction": "all x y.((Feed(x) & Saliva(y) & Mouth(z)) -> (MixedWith(x,y,z) & MoistBbolus(x) & EasySnoozed(x)))", "score": 0}
{"id": "eqasc_validation_1413", "prediction": "all x.((Feed(x) & MaltedSulfur(x)) -> (MustedBlowout(x) & EasilySnorted(x)))", "score": 0}
{"id": "eqasc_validation_1413", "prediction": "all x.(Feed(x) -> MixedButSaftInMouth(x))", "score": 0}
{"id": "eqasc_validation_1413", "prediction": "all x.(Feed(x) -> (MixedWithSaline(x) & InMouthToMakeMoistBbolus(x) & CanBeEasilySneaded(x)))", "score": 0}
{"id": "eqasc_validation_1413", "prediction": "all x y z.((Feed(x) & Saliva(y) & Mouth(z)) -> (MixedWith(x,y,z) & MoistBolus(x) & QuicklyWinkeled(x)))", "score": 0}
{"id": "eqasc_validation_1413", "prediction": "all x.(Feed(x) -> (MixedWithSauce(x) & MuffyBolus(x) & EasySpraying(x)))", "score": 0}
{"id": "eqasc_validation_1413", "prediction": "all x y.((Feeds(x) & Saliva(y)) -> MixedWithMouth(x,y))", "score": 0}
{"id": "eqasc_validation_1413", "prediction": "all x y z.((Feed(x) & Saliva(y) & Mouth(z)) -> (MixedWith(x,y,z) & MakesMoistBbolus(x) & CanBeEasilySneaked(x)))", "score": 0}
{"id": "eqasc_validation_1413", "prediction": "all x.(Feed(x) -> (Mixes(x,Saliva) & Mash(x) & MakesMoistBolus(x) & EasilySnaped(x)))", "score": 0}
{"id": "eqasc_validation_1413", "prediction": "all x.(Feed(x) -> (MixedWithSaftInMouth(x) & MakesMoistBolus(x) & EasySnake(x)))", "score": 0}
{"id": "eqasc_validation_1413", "prediction": "all x y z.((Feed(x) & Saliva(y) & Mouth(z) & MixedAndCushioned(x,y) & MoistBallus(x,z)) -> AllowableSawn(x,y))", "score": 0}
{"id": "eqasc_validation_1413", "prediction": "all x y.((Feed(x) & MeltSaft(y)) -> FormsMoistBolus(x,y))", "score": 0}
{"id": "eqasc_validation_1413", "prediction": "all x.(Feed(x) -> (MixedWithSaline(x,y) & Mash(y) & MakesMoistBolis(x) & CanBeEasilySnooked(x)))", "score": 0}
{"id": "eqasc_validation_1413", "prediction": "all x y z.((Feeds(x) & Saumage(y) & Mouth(z) & MixedWith(x,y,z)) -> BuildsMoistBbolus(x,y))", "score": 0}
{"id": "eqasc_validation_1414", "prediction": "all x y.((Bulus(x) & MoustedFood(y)) -> MoistenedFood(x,y))", "score": 0}
{"id": "eqasc_validation_1414", "prediction": "all x.(Blow(x) -> MorphoredFood(x))", "score": 0}
{"id": "eqasc_validation_1414", "prediction": "all x y.((Bolus(x) & MoistenedFood(y)) -> MoistenedFood(x,y))", "score": 0}
{"id": "eqasc_validation_1414", "prediction": "all x.(Bbolus(x) -> MoistenedFood(x))", "score": 0}
{"id": "eqasc_validation_1414", "prediction": "all x.(Ball(x) -> MoistenedFood(x))", "score": 0}
{"id": "eqasc_validation_1414", "prediction": "all x y.((Blood(x) & Food(y)) -> Moistened(x,y))", "score": 0}
{"id": "eqasc_validation_1414", "prediction": "(MoistenedFood(bolus,food) & BolusMoistened(bolus,food) & MoistenedFood(bolus),food)", "score": -1}
{"id": "eqasc_validation_1414", "prediction": "all x.(Bulus(x) -> MoistenedFood(x))", "score": 0}
{"id": "eqasc_validation_1414", "prediction": "all x.(Blood(x) -> MoistenedFood(x))", "score": 0}
{"id": "eqasc_validation_1414", "prediction": "all x.(Bolus(x) -> MoistenedFood(x))", "score": 0}
{"id": "eqasc_validation_1414", "prediction": "all x y.(Blood(x) -> MoistenedFood(x,y))", "score": 0}
{"id": "eqasc_validation_1414", "prediction": "all x.(Bloode(x) -> MoistenedFood(x))", "score": 0}
{"id": "eqasc_validation_1415", "prediction": "all x y.((Salvation(x) & Rumen(y,x)) -> ContributesMoreThan(x,y))", "score": 0}
{"id": "eqasc_validation_1415", "prediction": "all x.(Saliva(x) -> ContributesMoreThan70PercentLiquid(x))", "score": 0}
{"id": "eqasc_validation_1415", "prediction": "all x.(Saliva(x) -> ContributesMoreThan(x,70))", "score": 0}
{"id": "eqasc_validation_1415", "prediction": "all x.(Saliva(x) -> ContributesMoreThan70Percent(x))", "score": 0}
{"id": "eqasc_validation_1415", "prediction": "all x.(Saliva(x) -> (ContributesLiquid(x,75) | ContributesLiquid(x,70)))", "score": 0}
{"id": "eqasc_validation_1415", "prediction": "all x.(Saliva(x) -> exists y.(LiquidAround(y) & ContributesTo(x,y))))", "score": -1}
{"id": "eqasc_validation_1415", "prediction": "has a total of 73.7% liquidity in Rumen(saliva)", "score": -1}
{"id": "eqasc_validation_1415", "prediction": "all x y z.((Saliva(x) & Rumen(y) & Liquid(z)) -> ContributesGreaterThan(x,y,z))", "score": 0}
{"id": "eqasc_validation_1415", "prediction": "all x y.((Saliva(x) & Rumen(y) & ContributesMoreThan70Percent(x,y)) -> ContributesMoreThan70Percent(x,y))", "score": 0}
{"id": "eqasc_validation_1415", "prediction": "all x y.((Saliva(x) & Rumen(y)) -> ContributesMoreThan70Percent(x,y))", "score": 0}
{"id": "eqasc_validation_1415", "prediction": "all x.(Saliva(x) -> ContributesMoreThan70PercentLiquidInRumen(x))", "score": 0}
{"id": "eqasc_validation_1415", "prediction": "most of the time, Saliva contributes more than 70 percent of the liquid in the Rumen(saliva))", "score": -1}
{"id": "eqasc_validation_1416", "prediction": "all x.((Food(x) & MoisturedByLiquid(x)) -> EasierToCheek(x))", "score": 0}
{"id": "eqasc_validation_1416", "prediction": "all x.(Food(x) -> (EasierToCheek(x) & MoistenedByLiquid(x)))", "score": 0}
{"id": "eqasc_validation_1416", "prediction": "all x y.((Food(x) & LiquidMoisten(y) & MoistenedBy(x,y)) -> EasierToCheek(x))", "score": 0}
{"id": "eqasc_validation_1416", "prediction": "all x y.((Food(x) & Liquid(y)) -> MoistenedBy(x,y))", "score": 0}
{"id": "eqasc_validation_1416", "prediction": "all x.((Food(x) & MoisturizedByLiquid(x)) -> EasierToCheek(x))", "score": 0}
{"id": "eqasc_validation_1416", "prediction": "all x y.((Food(x) & Liquid(y)) -> MoltenByLiquid(x,y))", "score": 0}
{"id": "eqasc_validation_1416", "prediction": "all x y z.(EasierToKnife(x) – Food(y) -> (MoistenedByLiquids(z) & MoisturizedByLiquids(y,z) & MoistureProteins(y,w) & MoisturizedByLiquids(z)))", "score": -1}
{"id": "eqasc_validation_1416", "prediction": "all x.((Food(x) & MoistenedByLiquid(x)) -> EasierToCheek(x))", "score": 0}
{"id": "eqasc_validation_1416", "prediction": "all x.((Food(x) & MoistenedByLiquids(x)) -> EasierToCheek(x))", "score": 0}
{"id": "eqasc_validation_1416", "prediction": "all x.((Food(x) & MoistureDashedLiquid(x)) -> EasierToCheek(x))", "score": 0}
{"id": "eqasc_validation_1416", "prediction": "all x.(EasierToCheek(x) -> (Food(x) & MoistenedByLiquid(x)))", "score": 0}
{"id": "eqasc_validation_1416", "prediction": "all x y.((Food(x) & Liquid(y)) -> EasierToCheek(x,y))", "score": 0}
{"id": "eqasc_validation_1417", "prediction": "all x.(Milk(x) -> NutritiousFlour(x))", "score": 0}
{"id": "eqasc_validation_1417", "prediction": "all x.(Milk(x) -> NutritiousFluid(x))", "score": 0}
{"id": "eqasc_validation_1418", "prediction": "all x.(ColdsMilk(x) -> DesignedForBabyCows(x))", "score": 0}
{"id": "eqasc_validation_1418", "prediction": "all x.((BuddySmoon(x) & CowsMilk(y)) -> DesignedFor(x,y))", "score": 0}
{"id": "eqasc_validation_1418", "prediction": "all x.(CowsMilk(x) -> DesignedForBabyCows(x))", "score": 0}
{"id": "eqasc_validation_1418", "prediction": "all x.(CowsMilk(x) -> DesignedForLayers(x))", "score": 0}
{"id": "eqasc_validation_1418", "prediction": "all x.(CowsMilk(x) -> (DesignedForBabyCows(x) & HasCowMilk(x)))", "score": 0}
{"id": "eqasc_validation_1418", "prediction": "all x.(Bubble(x) -> CowsMilk(x))", "score": 0}
{"id": "eqasc_validation_1418", "prediction": "all x.((CowsMilk(x) & Cow(y)) -> DesignedFor(x,y))", "score": 0}
{"id": "eqasc_validation_1418", "prediction": "all x.((CowsMilk(x) & BabyCow(y)) -> DesignedFor(x,y))", "score": 0}
{"id": "eqasc_validation_1418", "prediction": "all x.(CardsMilk(x) -> DesignedForBabyCows(x))", "score": 0}
{"id": "eqasc_validation_1418", "prediction": "all x y.((CowsMilk(x) & Cow(y)) -> DesignedForBabyCows(x,y))", "score": 0}
{"id": "eqasc_validation_1418", "prediction": "all x.(CowsMilk(x) -> (DesignedForBabyCows(x) & Milk(x) & DesignedForBabyCows(x)))", "score": 0}
{"id": "eqasc_validation_1418", "prediction": "All x.(CowsMilk(x) -> (DesignedForBabyCows(x) & DesignedForCows(x)))", "score": -1}
{"id": "eqasc_validation_1419", "prediction": "all x.(Cow(x) -> (MakesNourishingFluid(x) & Cow(y) & Laces(z)))", "score": 0}
{"id": "eqasc_validation_1419", "prediction": "all x.(Cow(x) -> MakesNutritiousFluid(x))", "score": 0}
{"id": "eqasc_validation_1419", "prediction": "all x y.((Cow(x) & Dairy(y)) -> MakesNourishableFluid(x,y))", "score": 0}
{"id": "eqasc_validation_1419", "prediction": "all x y.((Cow(x) & Fluid(y)) -> MakesNutritious(x,y))", "score": 0}
{"id": "eqasc_validation_1419", "prediction": "all x y.((Cow(x) & Fat(y)) -> MakesNutritiousFluid(x,y))", "score": 0}
{"id": "eqasc_validation_1419", "prediction": "all x.(Cow(x) -> MakesNaturallyFluid(x))", "score": 0}
{"id": "eqasc_validation_1419", "prediction": "all x y z.((Cow(x) & Milk(y) & Fluid(z)) -> MakesNutritious(x,y,z))", "score": 0}
{"id": "eqasc_validation_1419", "prediction": "all x.((Cow(x) & HealthyFluid(x)) -> Makes(x,Cows))", "score": 0}
{"id": "eqasc_validation_1419", "prediction": "all x.(Cup(x) -> MakesNutritiousFluid(x))", "score": 0}
{"id": "eqasc_validation_1419", "prediction": "all x.((Cow(x) & NutritiousFluid(x)) -> Makes(x,cure))", "score": 0}
{"id": "eqasc_validation_1419", "prediction": "all x.(Cow(x) -> (MakesNutritiousFluid(x) & MakesLiquid(x)))", "score": 0}
{"id": "eqasc_validation_1419", "prediction": "all x y.((Cow(x) & NutritiousFluid(y)) -> Makes(x,y))", "score": 0}
{"id": "eqasc_validation_1419", "prediction": "all x y.((Cow(x) & VegetableFluid(y)) -> MakesBonding(x,y))", "score": 0}
{"id": "eqasc_validation_1420", "prediction": "all x y.((Floid(x) & Dehydration(y) & NutritiousDiet(x)) -> Important(x))", "score": 0}
{"id": "eqasc_validation_1420", "prediction": "(PreventsDehydration(fluents) & NutritiousDiet(fluents))", "score": 0}
{"id": "eqasc_validation_1420", "prediction": "(all x.((Fluid(x) & PreventsDehydration(x)) -> NutritiousDiet(x)))", "score": 0}
{"id": "eqasc_validation_1420", "prediction": "all x.((Fluids(x) & PreventsDehydration(x) & NutritiousDiet(x)) -> Important(x))", "score": 0}
{"id": "eqasc_validation_1420", "prediction": "all x.((Fluid(x) & PreventsDehydration(x) & NutritiousDiet(x)) -> Important(x))", "score": 0}
{"id": "eqasc_validation_1420", "prediction": "all x.(Fluid(x) -> (PreventsDehydration(x) & NutritiousDiet(x)))", "score": 0}
{"id": "eqasc_validation_1420", "prediction": "(Fluids(fibres) | NutritiousDiet(fibre))", "score": 0}
{"id": "eqasc_validation_1421", "prediction": "all x.(Milk(x) -> (Nutritious(x) & PreventsDehydration(x)))", "score": 0}
{"id": "eqasc_validation_1421", "prediction": "All x.(Milk(x) -> (Nutritious(x) & PreventsDehydration(x)))", "score": -1}
{"id": "eqasc_validation_1421", "prediction": "all x.(Milk(x) -> (Natural(x) & PreventsDehydration(x)))", "score": 0}
{"id": "eqasc_validation_1422", "prediction": "all x.(FluidMilk(x) -> (FortifiedWithVitaminD(x) & RichInCalcium(x)))", "score": 0}
{"id": "eqasc_validation_1422", "prediction": "all x.((FluidMilk(x) & FortifiedWithVitaminD(x) & RichInCalcine(x)) -> FortifiedWithCalcine(x))", "score": 0}
{"id": "eqasc_validation_1422", "prediction": "all x y.((FlowerMilk(x) & VitaminD(y)) -> (FortifiedWith(x,y) & RichInCalcium(x)))", "score": 0}
{"id": "eqasc_validation_1422", "prediction": "all x.(FluidMilk(x) -> (FortifiedWithVitaminD) & RichInCalcium(x)))", "score": -1}
{"id": "eqasc_validation_1422", "prediction": "all x.((FluidMilk(x) & FortifiedWithVitaminD(x) & RichInCalcium(x)) -> Fortified(x))", "score": 0}
{"id": "eqasc_validation_1422", "prediction": "all x.(FlourishMilk(x) -> (FortifiedWithVitaminD(x) & RichInCalcium(x)))", "score": 0}
{"id": "eqasc_validation_1423", "prediction": "all x y.((Milk(x) & VitaminD(y) & Calcium(y)) -> Nutritious(x))", "score": 0}
{"id": "eqasc_validation_1423", "prediction": "all x.((Milk(x) & VitaminD(x) & Calcium(x)) -> Nutritious(x))", "score": 0}
{"id": "eqasc_validation_1423", "prediction": "all x y.\"((Milk(x) & VitaminD(y) & Calcium(y)) -> Nutritious(x))", "score": -1}
{"id": "eqasc_validation_1423", "prediction": "all x y z.((Milk(x) & VitaminD(y) & Calcium(z) & Has(x,y) & Has(x,z)) -> Nutritious(x))", "score": 0}
{"id": "eqasc_validation_1423", "prediction": "all x.(NaturalMilk(x) -> (Milk(x) & VitaminD(x) & Calcium(x)))", "score": 0}
{"id": "eqasc_validation_1423", "prediction": "all x.((Milk(x) & ContainsVitaminD(x) & Calcium(x)) -> Nutritious(x))", "score": 0}
{"id": "eqasc_validation_1424", "prediction": "all x y.((BreastMilk(x) & Newborn(y)) -> IdealNutrition(x,y))", "score": 0}
{"id": "eqasc_validation_1424", "prediction": "all x.(BreastMilk(x) -> IdealNutrition(x))", "score": 0}
{"id": "eqasc_validation_1424", "prediction": "all x.(BreastMilk(x) -> IdealNutrition(x,Newborn))", "score": 0}
{"id": "eqasc_validation_1424", "prediction": "all x.(Breakmilk(x) -> IdealNutritionForNature(x))", "score": 0}
{"id": "eqasc_validation_1424", "prediction": "all x.(BreastMilk(x) -> IdealNutritionForNewborn(x))", "score": 0}
{"id": "eqasc_validation_1424", "prediction": "all x.(BreastMilk(x) -> IdealNutrientForNewborn(x))", "score": 0}
{"id": "eqasc_validation_1424", "prediction": "all x.(BreastMilk(x) -> IdealNutritionForNatal(x))", "score": 0}
{"id": "eqasc_validation_1424", "prediction": "all x.((BreastMilk(x) & Newborn(x)) -> IdealNutrition(x,BerryMilk))", "score": 0}
{"id": "eqasc_validation_1424", "prediction": "all x.(BuelletMilk(x) -> IdealNutritionForNewborn(x))", "score": 0}
{"id": "eqasc_validation_1424", "prediction": "all x.((BreastMilk(x) & Neuborn(y)) -> IdealNutrient(x,y))", "score": 0}
{"id": "eqasc_validation_1424", "prediction": "all x.((BreastMilk(x) & Newborn(y)) -> IdealNutrition(x,y))", "score": 0}
{"id": "eqasc_validation_1424", "prediction": "all x.(Breakmilk(x) -> IdealNutritionForNewborn(x))", "score": 0}
{"id": "eqasc_validation_1424", "prediction": "all x.((BreastMilk(x) & Newborn(x)) -> IdealNutrition(x))", "score": 0}
{"id": "eqasc_validation_1424", "prediction": "all x.(Breakmilk(x) -> IdealNutritionForNatures(x))", "score": 0}
{"id": "eqasc_validation_1424", "prediction": "all x y.((BreastMilk(x) & Newborn(y)) -> AllSentimentalIndividual(x,y))", "score": 0}
{"id": "eqasc_validation_1425", "prediction": "all x,y z.((Newborn(x) & Breast(y)) -> GetsNutritionFrom(x,z))", "score": -1}
{"id": "eqasc_validation_1425", "prediction": "all x y.((Newborn(x) & Breast(y)) -> GetsNutritionFrom(x,y))", "score": 0}
{"id": "eqasc_validation_1425", "prediction": "all x y.((Nature(x) & Breast(y) & GetsNutritionFrom(x,y)) -> BabiesGetNutritionFrom(x,y))", "score": 0}
{"id": "eqasc_validation_1425", "prediction": "all x y.((Nature(x) & Breast(y)) -> GetsNutritionFrom(x,y))", "score": 0}
{"id": "eqasc_validation_1425", "prediction": "all x y.((Newborn(x) & Breast(y)) -> GettingNutritionFrom(x,y))", "score": 0}
{"id": "eqasc_validation_1425", "prediction": "all x.(Newborn(x) -> GetsNutritionFromBreasts(x))", "score": 0}
{"id": "eqasc_validation_1425", "prediction": "all x y.((Novel(x) & Breast(y)) -> GetsNutritionFrom(x,y))", "score": 0}
{"id": "eqasc_validation_1425", "prediction": "all x.(Nature(x) -> (GetsNutritionFromBreaks(x) & Bumps(x)))", "score": 0}
{"id": "eqasc_validation_1425", "prediction": "all x y z.((Newborn(x) & Breast(y) & Breast(z)) -> GetsNutritionFrom(x,y,z))", "score": 0}
{"id": "eqasc_validation_1425", "prediction": "all x.(Newborn(x) -> GetsNutritionFromBrust(x))", "score": 0}
{"id": "eqasc_validation_1425", "prediction": "all x.(Nature(x) -> GetNutritionFromBreasts(x))", "score": 0}
{"id": "eqasc_validation_1425", "prediction": "all x y.((Newborn(x) & Breast(y)) -> GetsNaturalNutritionFrom(x,y))", "score": 0}
{"id": "eqasc_validation_1425", "prediction": "all xi y z.((Newborn(x) & Breast(y) & Breasts(z)) -> GetsNutritionFrom(x,y,z))", "score": -1}
{"id": "eqasc_validation_1426", "prediction": "all x y.((Milk(x) & Cow(y)) -> ComesFrom(x,y))", "score": 0}
{"id": "eqasc_validation_1426", "prediction": "all x.(Milk(x) -> ComesFromCows(x))", "score": 0}
{"id": "eqasc_validation_1426", "prediction": "All x.(Milk(x) -> Cow(x))", "score": -1}
{"id": "eqasc_validation_1426", "prediction": "all x.(Milk(x) -> ComesFromCow(x))", "score": 0}
{"id": "eqasc_validation_1426", "prediction": "all x.(Milk(x) -> ComesFrom(x,Cows))", "score": 0}
{"id": "eqasc_validation_1426", "prediction": "all x.(Milk(x) -> Cow(x))", "score": 0}
{"id": "eqasc_validation_1427", "prediction": "all x.(MilkShake(x) -> HasMilk(x))", "score": 0}
{"id": "eqasc_validation_1427", "prediction": "all x.(MilkShake(x) -> Milk(x))", "score": 0}
{"id": "eqasc_validation_1427", "prediction": "all x.((MilkShake(x) & Milk(x)) -> HasMilk(x))", "score": 0}
{"id": "eqasc_validation_1427", "prediction": "exists x.(MilkShake(x) & Has(x,milk))", "score": 0}
{"id": "eqasc_validation_1428", "prediction": "all x y.((Milkshake(x) & Fluid(y)) -> Nutritious(x,y))", "score": 0}
{"id": "eqasc_validation_1428", "prediction": "all x.(Milkshake(x) -> NutritiousFluid(x))", "score": 0}
{"id": "eqasc_validation_1428", "prediction": "all x.(MilkShakes(x) -> NutritiousFluid(x))", "score": 0}
{"id": "eqasc_validation_1428", "prediction": "all x.(Milkshake(x) -> (NutritiousFluid(x) & Liquid(y) & ProvidesFluid(x,y)))", "score": 0}
{"id": "eqasc_validation_1428", "prediction": "all x y z.((Milkshake(x) & Liquid(y) & Fluid(z)) -> Nutritious(x,y))", "score": 0}
{"id": "eqasc_validation_1428", "prediction": "all x.(Milkshake(x) -> (NutritiousFluid(x) & Milkshake(x)))", "score": 0}
{"id": "eqasc_validation_1428", "prediction": "all x.(Milkshake(x) -> NutritiousFlexicon(x))", "score": 0}
{"id": "eqasc_validation_1429", "prediction": "all x.(Cow(x) -> (ProducesNutritiousFluid(x) & ProducesFluid(x)))", "score": 0}
{"id": "eqasc_validation_1429", "prediction": "all x.((Cow(x) & NutritiousFluid(x)) -> Produces(x,cows))", "score": 0}
{"id": "eqasc_validation_1429", "prediction": "all x.(Cow(x) -> (ProducesNutritiousFluid(x) & ProducesFediment(x)))", "score": 0}
{"id": "eqasc_validation_1429", "prediction": "all x.((Cow(x) & ProducesNutritiousFlo fluid(x)) -> Produces(x,y))", "score": -1}
{"id": "eqasc_validation_1429", "prediction": "all x.(Cow(x) -> ProducesNutritiousFluid(x))", "score": 0}
{"id": "eqasc_validation_1429", "prediction": "all x.(Cow(x) -> (ProducesNutritiousFluid(x) & Dairy(x)))", "score": 0}
{"id": "eqasc_validation_1429", "prediction": "all x y.((Cow(x) & CowFluid(y)) -> ProducesNutritious(x,y))", "score": 0}
{"id": "eqasc_validation_1429", "prediction": "all x y.((Cow(x) & CowFluid(y)) -> ProducesNutritiousFluid(x,y))", "score": 0}
{"id": "eqasc_validation_1429", "prediction": "all x y.((Cow(x) & Milk(y)) -> ProducesNutritiousFluid(x,y))", "score": 0}
{"id": "eqasc_validation_1429", "prediction": "all x.(Cow(x) -> ProducesIndulgentFluid(x))", "score": 0}
{"id": "eqasc_validation_1429", "prediction": "all x y.((Cow(x) & CowFluid(y)) -> ProducesNutritiousFluidProduces(x,y))", "score": 0}
{"id": "eqasc_validation_1429", "prediction": "all x y z.((Cow(x) & Flurry(y) & Feeding(z)) -> Produces(x,y,z))", "score": 0}
{"id": "eqasc_validation_1430", "prediction": "all x.(Milk(x) -> PreventsDehydration(x))", "score": 0}
{"id": "eqasc_validation_1430", "prediction": "all x y.((Milk(x) & Dehydratation(y)) -> Prevents(x,y))", "score": 0}
{"id": "eqasc_validation_1430", "prediction": "all x y.((Milk(x) & Dehydration(y)) -> Prevents(x,y))", "score": 0}
{"id": "eqasc_validation_1430", "prediction": "(all x.(Milk(x) -> PreventsDehydration(x)))", "score": 0}
{"id": "eqasc_validation_1431", "prediction": "all x y.((Birth(x) & Offspring(y)) -> FollowsParentalCare(x,y))", "score": 0}
{"id": "eqasc_validation_1431", "prediction": "all x y.((Birth(x) & ParentalCare(y)) -> FollowedBy(x,y))", "score": 0}
{"id": "eqasc_validation_1431", "prediction": "all x y.((Birth(x) & ParentalCare(y)) -> Follows(x,y))", "score": 0}
{"id": "eqasc_validation_1431", "prediction": "all x.(Birth(x) -> TimeOfParentalCare(x,Offspring))", "score": 0}
{"id": "eqasc_validation_1431", "prediction": "all x y.((Birth(x) & Offspring(y)) -> (ExecutesParentalCare(x,y)))", "score": 0}
{"id": "eqasc_validation_1431", "prediction": "all x.((Birth(x) & Offspring(y)) -> (AfterParentalCare(x,y)))", "score": 0}
{"id": "eqasc_validation_1431", "prediction": "all x y.((Birth(x) & Offspring(y)) -> MayBeFocusedByParentalCare(x,y))", "score": 0}
{"id": "eqasc_validation_1431", "prediction": "all x.((Birth(x) & ParentalCare(x)) -> FollowedBy(x))", "score": 0}
{"id": "eqasc_validation_1431", "prediction": "all x y.((Birth(x) & Ofspring(y) & FollowedByParentalCare(y,x)) -> Offspring(x,y))", "score": 0}
{"id": "eqasc_validation_1431", "prediction": "all x y z.((Birth(x) & ParentalCare(y) & Offspring(z)) -> Follows(x,y,z))", "score": 0}
{"id": "eqasc_validation_1431", "prediction": "all x.(Background(x) -> FollowedByParentalCare(x))", "score": 0}
{"id": "eqasc_validation_1432", "prediction": "all x y.((Parent(x) & Child(y)) -> TakesCareOf(x,y))", "score": 0}
{"id": "eqasc_validation_1432", "prediction": "all x y z.((Parent(x) & Child(y) & Child(z)) -> TakesCareOf(x,y,z))", "score": 0}
{"id": "eqasc_validation_1432", "prediction": "all x y z.((Parent(x) & Child(y)) -> TakesCare(x,y))", "score": 0}
{"id": "eqasc_validation_1432", "prediction": "all x y z.((Parent(x) & Child(y) & Parent(z)) -> TakesCareOf(x,y,z))", "score": 0}
{"id": "eqasc_validation_1432", "prediction": "all x.(Parent(x) -> TakesCareOfChildren(x))", "score": 0}
{"id": "eqasc_validation_1432", "prediction": "all x y.((Parent(x) & Child(y)) -> TakesCare(x,y))", "score": 0}
{"id": "eqasc_validation_1433", "prediction": "all x y.((Birth(x) & ParentalNavigation(y)) -> ThisCanBeFocusedBy(x,y))", "score": 0}
{"id": "eqasc_validation_1433", "prediction": "all x y.((Birth(x) & ParentalNourishment(y)) -> FollowedBy(x,y))", "score": 0}
{"id": "eqasc_validation_1433", "prediction": "all x y.((Birth(x) & ParentalNourishing(y)) -> FollowedBy(x,y))", "score": 0}
{"id": "eqasc_validation_1433", "prediction": "all x y.((Birth(x) & ParentalNourishment(y)) -> CanBeSuffiedBy(x,y))", "score": 0}
{"id": "eqasc_validation_1433", "prediction": "all x y z.((Birth(x) & ParentalNavigation(y) & FollowedBy(x,y)) -> ParentalNavigation(z))", "score": 0}
{"id": "eqasc_validation_1433", "prediction": "all x y.((Birth(x) & ParentalNavigation(y)) -> MayBeChangedBy(x,y))", "score": 0}
{"id": "eqasc_validation_1433", "prediction": "all x.((Birth(x) & FollowedByParentalNavigation(x)) -> MayBe(x,MaternalNavigation))", "score": 0}
{"id": "eqasc_validation_1433", "prediction": "all x y.((Birth(x) & ParentalNavigation(y)) -> FollowedBy(x,y))", "score": 0}
{"id": "eqasc_validation_1433", "prediction": "all x y z.((Birth(x) & ParentalNavigating(y)) -> (SuspendedBy(x,y) & ParentalNavigation(z) & FollowedBy(x,y,z)))", "score": 0}
{"id": "eqasc_validation_1433", "prediction": "all x.((Birth(x) & FollowedByParentalNavigation(x)) -> MayBeSuceedBy(x,ParentalNavigation))", "score": 0}
{"id": "eqasc_validation_1433", "prediction": "all x.((Birth(x) & ParentalNurturing(x)) -> Follows(x,Birth,Nature))", "score": 0}
{"id": "eqasc_validation_1433", "prediction": "all x y z.((Birth(x) & ParentalNourishment(y) & Parent(z) & FollowedBy(x,y) & LeadsIn(y,x)) -> FollowedBy(x,z))", "score": 0}
{"id": "eqasc_validation_1433", "prediction": "all x.(Birth(x) -> ParentalNavigation(x))", "score": 0}
{"id": "eqasc_validation_1433", "prediction": "all x.((Birth(x) & ParentalNourishment(x)) -> FollowedBy(x,nurturing))", "score": 0}
{"id": "eqasc_validation_1433", "prediction": "all x.((Birth(x) & ParentalNourishment(x)) -> FollowedBy(x,y))", "score": 0}
{"id": "eqasc_validation_1433", "prediction": "all x y z.((Birth(x) & ParentalNavigation(y) & -ParentalNavigation(z)) -> (CanBeSuceedBy(x,y) & ParentalNavigation(x,z)))", "score": 0}
{"id": "eqasc_validation_1434", "prediction": "all x.((Bird(x) & Mammal(x)) -> (CareForOffspring(x) | Caregivers(x)))", "score": 0}
{"id": "eqasc_validation_1434", "prediction": "all x.((Bird(x) & Mammal(x)) -> (CaresForOffspring(x) | CaresForOffspring(x)))", "score": 0}
{"id": "eqasc_validation_1434", "prediction": "all x y.((MonogamousSpecies(x) & MonogamousSpecies(y)) -> (Patient(x,y) & Offspring(x)))", "score": 0}
{"id": "eqasc_validation_1434", "prediction": "(all x y.((EmbryonicSpeciesOfBirdsAndMammals(x) & MonogamousSpeciesOfBirdsAndMammals(y)) -> CaresForOffspring(x,y))", "score": -1}
{"id": "eqasc_validation_1434", "prediction": "all x y.(((Wildbird(x) & Mammal(y)) -> (Parent(x,y) & Parents(x,y)))", "score": -1}
{"id": "eqasc_validation_1434", "prediction": "all x y.(((Bird(x) & Mammal(y) & Monogamous(x)) -> CaresForOffspring(x,y))", "score": -1}
{"id": "eqasc_validation_1434", "prediction": "all x.((BirdAndMammal(x) & Monogamous(x)) -> CaresForOffspring(x))", "score": 0}
{"id": "eqasc_validation_1434", "prediction": "all x y.((MonogamySpecies(x) & MonogamousSpecies(y)) -> CareForOffspring(x,y))", "score": 0}
{"id": "eqasc_validation_1434", "prediction": "all x y.((Embryon(x) & MonogamousSpecies(y) & Bird(y) & MammalSpecies(y)) -> CareForOffspring(x,y))", "score": 0}
{"id": "eqasc_validation_1434", "prediction": "all x y.((Monochrome(x) & MonogamousType(y) & (Bird(y) | Mammal(y))) -> CaresForOffspring(x,y))", "score": 0}
{"id": "eqasc_validation_1434", "prediction": "all x y.((MomgamousSpecies(x) & MonogamousSpecies(x) & MonogamousSpecies(y)) -> (CondominatesOffspring(x) | CaresForOffspring(x)))", "score": 0}
{"id": "eqasc_validation_1434", "prediction": "all x y z.((Bull(x) & Sibling(y) & Species(z) & Animal(y)) -> (Mammal(x) & Bird(z) & Mammal(z)))", "score": 0}
{"id": "eqasc_validation_1434", "prediction": "all x y.((Parent(x) & Monogamous(x) & (Bird(y) | Mammal(y))) -> CaresForOffspring(x,y))", "score": 0}
{"id": "eqasc_validation_1434", "prediction": "all x y.((Endovirus(x) & Monogamous(x,y) & Breed(y)) -> CaresForOffspring(x,y))", "score": 0}
{"id": "eqasc_validation_1434", "prediction": "all x y.((Jungle(x) & MonogamousSpecies(x,y)) -> (Mammal(x) & Mammal(y)))", "score": 0}
{"id": "eqasc_validation_1434", "prediction": "all x.((MonochromousSpecies(x) & MonogamousSpecies(x)) -> (Care(x,offspring) | MembraneSpecies(x,molecules)))", "score": 0}
{"id": "eqasc_validation_1435", "prediction": "all x y z.((PaternalCareAfterBirth(x) & ManogamousSpecies(y) & Parent(z)) -> (HandledBy(z,y) & HandledBy(z,y)))", "score": 0}
{"id": "eqasc_validation_1435", "prediction": "all x.((ParentalCareAfterBirth(x) & ManogamousSpecies(x)) -> HandledByParent(x,Parents,Parents,MuskousSpecies,Denomination))", "score": 0}
{"id": "eqasc_validation_1435", "prediction": "all x.((ParentalCare[x) & ManogamousSpecies(x)) -> HandledByParents(x))", "score": -1}
{"id": "eqasc_validation_1435", "prediction": "all x y.((ParentalCareAfterBirth(x) & ManogamousSpecies(y)) -> HandlingParent(x,y))", "score": 0}
{"id": "eqasc_validation_1435", "prediction": "all x.((ParentalCareAfterBirth(x) & ManogamousSpecies(x)) -> (HandleParent(x,y) & HandleParents(x,z)))", "score": 0}
{"id": "eqasc_validation_1435", "prediction": "all x y.((ParentalCareAfterBirth(x) & ManogamousSpecies(y)) -> HandledByParents(x,y))", "score": 0}
{"id": "eqasc_validation_1435", "prediction": "all x y.((ParentalCare(x) & MammalSpecies(y)) -> (HandledByParents(x,y) | HandledByParents(x,y)))", "score": 0}
{"id": "eqasc_validation_1435", "prediction": "all x y z.((ParentalCare(x) & ApostrialCareForManogamousSpecies(y) & Apparent(z)) -> (HandledBy(x,y,z) & HandledBy(x,z)))", "score": 0}
{"id": "eqasc_validation_1435", "prediction": "all x y.((ParentalCareAfterBirth(x) & ManogamousSpecies(y)) -> Handle(x,y))", "score": 0}
{"id": "eqasc_validation_1435", "prediction": "all x y.(-(ParentalCareAfterBirth(x) & ManogamousSpecies(y)) -> HandledBy(x,y))", "score": 0}
{"id": "eqasc_validation_1435", "prediction": "all x.((ParentalCareAfterBirth(x) & ManogamousSpecies(x)) -> (HandlepiatedByParent(x) & HandlelpaternalCareForMamogamousSpecies(x)))", "score": 0}
{"id": "eqasc_validation_1435", "prediction": "all x y z.((PasternalCare(x) & ManogamousSpecies(y) & ManogamousSpecies(z)) -> (HandlesFor(x,y,z) & HandlesFor(x,y,z)))", "score": 0}
{"id": "eqasc_validation_1435", "prediction": "all x y.((ParentalCare(x) & ManogamousSpecies(y)) -> HandledBy(x,y))", "score": 0}
{"id": "eqasc_validation_1435", "prediction": "all x.((ParentalCareAfterBirth(x) & ManogamousSpecies(x)) -> HandledByParents(x))", "score": 0}
{"id": "eqasc_validation_1435", "prediction": "all x.((ParentalCareAfterBirth(x) & ManogamousSpecies(x)) -> HandledBy(x,Parents))", "score": 0}
{"id": "eqasc_validation_1436", "prediction": "all x.((Circle(x) & Immature(x)) -> Ambiguous(x))", "score": 0}
{"id": "eqasc_validation_1436", "prediction": "all x y.((Child(x) & Offspring(y)) -> Ambiguous(x,y))", "score": 0}
{"id": "eqasc_validation_1436", "prediction": "(Adult(c) & Offspring(c,d) & ImmatureOffspring(c,d))", "score": 0}
{"id": "eqasc_validation_1436", "prediction": "(ambiguous(Child(Cricket) & Emphasize(offspring(x)) & Emphasize(immature(x))", "score": -1}
{"id": "eqasc_validation_1436", "prediction": "all x y.((Child(x) & Offspring(y) & ImmatureOffspring(x)) -> Ambiguous(x,y))", "score": 0}
{"id": "eqasc_validation_1436", "prediction": "all x.((Child(x) & Offspring(x) & ImmatureOffspring(x)) -> Ambiguous(x))", "score": 0}
{"id": "eqasc_validation_1436", "prediction": "all x y.((Child(x) & Offspring(y)) -> IsAlwaysIdentifiable(x,y))", "score": 0}
{"id": "eqasc_validation_1436", "prediction": "(ambiguous between 'Offspring(s) & ImmatureOffspring(s))", "score": -1}
{"id": "eqasc_validation_1436", "prediction": "(ImpressedOnCounse(Crown) & ClearSigns(Offspring) & ClearSigns(ImmatureOffspring))", "score": 0}
{"id": "eqasc_validation_1436", "prediction": "all x.((Child(x) & Ambiguous(x)) -> (Offspring(x) | ImmatureOffspring(x)))", "score": 0}
{"id": "eqasc_validation_1436", "prediction": "all x.(Click(x) -> (LimitsOffspring(x) & LimitsImmatureOffspring(x)))", "score": 0}
{"id": "eqasc_validation_1436", "prediction": "(ambiguous(Child(Child) and Equal(Offspring(Offspring,Single(offspring,single(offspring,single(i)))", "score": -1}
{"id": "eqasc_validation_1436", "prediction": "all x.(Child(x) -> (ExcelsInOffspring(x) & AmbiguousInImmatureOffspring(x)))", "score": 0}
{"id": "eqasc_validation_1436", "prediction": "all x.((Offspring(x) & ImmatureOffspring(x)) -> Ambiguous(x))", "score": 0}
{"id": "eqasc_validation_1437", "prediction": "all x y.((Birth(x) & ParentalCare(y)) -> CanBeSuspended(x,y))", "score": 0}
{"id": "eqasc_validation_1437", "prediction": "all x y z.((Birth(x) & PeriodOfParentalCare(y) & Child(z)) -> MayBeChangedBy(x,y,z))", "score": 0}
{"id": "eqasc_validation_1437", "prediction": "all x y z.((Birth(x) & ParentalCare(y) & Child(z)) -> FollowedBy(x,y,z))", "score": 0}
{"id": "eqasc_validation_1437", "prediction": "all x y.((Birth(x) & ParentalCare(y)) -> CanReceed(x,y))", "score": 0}
{"id": "eqasc_validation_1437", "prediction": "all x y.((Birth(x) & ParentalCare(y)) -> FollowedBy(x,y))", "score": 0}
{"id": "eqasc_validation_1437", "prediction": "all x.(Birth(x) -> ParentalCare(x))", "score": 0}
{"id": "eqasc_validation_1437", "prediction": "all x y.((Birth(x) & ParentalCare(y)) -> Follows(x,y))", "score": 0}
{"id": "eqasc_validation_1437", "prediction": "all x.((Birth(x) & ParentalCare(x)) -> FollowedBy(x,Child,Parental))", "score": 0}
{"id": "eqasc_validation_1437", "prediction": "all x.((Birth(x) & ParentalCare(x)) -> Followed(x))", "score": 0}
{"id": "eqasc_validation_1437", "prediction": "all x y.((Birth(x) & Child(y)) -> MayBeChangedBy(x,y))", "score": 0}
{"id": "eqasc_validation_1437", "prediction": "all x y.((Birth(x) & ParentalCare(y)) -> FollowsBirth(x,y))", "score": 0}
{"id": "eqasc_validation_1437", "prediction": "all x.(Birth(x) -> HasParentalCare(x))", "score": 0}
{"id": "eqasc_validation_1437", "prediction": "all x.(Birth(x) -> FollowedByParentalCare(x))", "score": 0}
{"id": "eqasc_validation_1438", "prediction": "all x.(HumanBirth(x) -> RarestOfAllBirths(x))", "score": 0}
{"id": "eqasc_validation_1438", "prediction": "all x.(Human(x) -> RarestOfAllBirths(x))", "score": 0}
{"id": "eqasc_validation_1438", "prediction": "all x.(HumanBirth(x) -> RarestOfBirths(x))", "score": 0}
{"id": "eqasc_validation_1438", "prediction": "all x y.((HumanBirth(x) & Birth(y)) -> Rarest(x,y))", "score": 0}
{"id": "eqasc_validation_1438", "prediction": "All x.(HumanBirth(x) -> RarestOfAllBirths(x))", "score": -1}
{"id": "eqasc_validation_1438", "prediction": "all x.(HumanBirth(x) -> RaritiestOfBirths(x))", "score": 0}
{"id": "eqasc_validation_1439", "prediction": "all x y.((Human(x) & Offspring(y)) -> HasParentalCare(x,y))", "score": 0}
{"id": "eqasc_validation_1439", "prediction": "all x,y.((Human(x) & Offspring(y)) -> HasParentalCare(x,y))", "score": -1}
{"id": "eqasc_validation_1439", "prediction": "all x y z.((Human(x) & Offspring(y) & ParentalCare(z)) -> HasPeriodOfCare(x,y,z))", "score": 0}
{"id": "eqasc_validation_1439", "prediction": "all x y.((Human(x) & Ofspring(y) & HasParentalCare(x,y)) -> TakesOffspring(x,y))", "score": 0}
{"id": "eqasc_validation_1439", "prediction": "all x.(Human(x) -> HasParentalCare(x))", "score": 0}
{"id": "eqasc_validation_1439", "prediction": "all x y.((Human(x) & Offspring(y)) -> HasPassiveCare(x,y))", "score": 0}
{"id": "eqasc_validation_1439", "prediction": "all x.(Human(x) -> HasParentalCare(x,offspring,offspring))", "score": 0}
{"id": "eqasc_validation_1439", "prediction": "all x y.((Human(x) & Offspring(y)) -> HasParentalCarePeriod(x,y))", "score": 0}
{"id": "eqasc_validation_1439", "prediction": "all x.(Human(x) -> HasParentalCareOfOffspring(x))", "score": 0}
{"id": "eqasc_validation_1439", "prediction": "all x y z.((Human(x) & Offspring(y) & ParentalCare(z)) -> Has(x,y,z))", "score": 0}
{"id": "eqasc_validation_1440", "prediction": "all x.(Female(x) -> GivesBirthToSingleBaby(x))", "score": 0}
{"id": "eqasc_validation_1440", "prediction": "all x y.((Female(x) & SingleBaby(y)) -> GivesBirthTo(x,y))", "score": 0}
{"id": "eqasc_validation_1440", "prediction": "all x.(Female(x) -> GivesBirthToSingleBirth(x))", "score": 0}
{"id": "eqasc_validation_1440", "prediction": "all x y.((Female(x) & SingleBirth(y)) -> GivesBirthTo(x,y))", "score": 0}
{"id": "eqasc_validation_1440", "prediction": "all x.(Female(x) -> (GivesBirthToSingleBaby(x)))", "score": 0}
{"id": "eqasc_validation_1441", "prediction": "all x.(Baby(x) -> (Offspring(x) & ProbablyHasParentalCare(x)))", "score": 0}
{"id": "eqasc_validation_1441", "prediction": "all x.(Baby(x) -> (Offspring(x) & ProbablyParentalCare(x)))", "score": 0}
{"id": "eqasc_validation_1441", "prediction": "all x y.((Birth(x) & Offspring(y)) -> (Offspring(y) & MostLikelyHasParentalCare(x,y)))", "score": 0}
{"id": "eqasc_validation_1441", "prediction": "all x.(Baby(x) -> Offspring(x) & Most likelyHasParentalCare(x))", "score": -1}
{"id": "eqasc_validation_1441", "prediction": "all x.(Baby(x) -> (Offspring(x) & MostlikelyHasParentalCare(x)))", "score": 0}
{"id": "eqasc_validation_1441", "prediction": "all x.(Baby(x) -> (Offspring(x) & Most likelyHasParentalCare(x)))", "score": -1}
{"id": "eqasc_validation_1441", "prediction": "all x.(Baby(x) -> (Offspring(x) & ParentalCare(x) & MostLikelyHasParentalCare(x)))", "score": 0}
{"id": "eqasc_validation_1441", "prediction": "all x y z.((Bird(x) & Offspring(y) & ParentalCare(z)) -> (Offspring(x,y,z) & MostProbablyHas(y,z)))", "score": 0}
{"id": "eqasc_validation_1441", "prediction": "all x y z.((Birth(x) & Offspring(y) & ParentalCare(z)) -> (OffspringOf(x,y) & Most LikelyHasParentalCare(y)))", "score": -1}
{"id": "eqasc_validation_1441", "prediction": "all x y.((Baby(x) & Offspring(y)) -> (Offspring(x) & HasParentalCare(x,y)))", "score": 0}
{"id": "eqasc_validation_1441", "prediction": "all x.(Baby(x) -> (Offspring(x) & MostLikelyHasParentalCare(x)))", "score": 0}
{"id": "eqasc_validation_1441", "prediction": "all x.(Baby(x) -> Offspring(x) & ParentalCare(x))", "score": 0}
{"id": "eqasc_validation_1441", "prediction": "all x y.((Birth(x) & Offspring(y)) -> (Offspring(x,y) & ProbablyHasParentalCare(x)))", "score": 0}
{"id": "eqasc_validation_1441", "prediction": "all x.(Baby(x) -> (Offspring(x) & ParentalCare(x)))", "score": 0}
{"id": "eqasc_validation_1441", "prediction": "all x.(Birth(x) -> (Offspring(x) & Most likelyHasParentalCare(x)))", "score": -1}
{"id": "eqasc_validation_1442", "prediction": "all x y.((Birth(x) & Child(y)) -> UniqueAs(x,y))", "score": 0}
{"id": "eqasc_validation_1442", "prediction": "all x y z.((Birth(x) & Child(y) & Born(z)) -> Unique(x,y,z))", "score": 0}
{"id": "eqasc_validation_1442", "prediction": "all x.((Birth(x) & Child(x)) -> Unique(x))", "score": 0}
{"id": "eqasc_validation_1442", "prediction": "all x y.((Birth(x) & Child(y) & Born(x)) -> Unique(x,y))", "score": 0}
{"id": "eqasc_validation_1442", "prediction": "all x.(Birth(x) -> Unique(x))", "score": 0}
{"id": "eqasc_validation_1442", "prediction": "all x y.((Birth(x) & Child(y) & Born(y)) -> Unique(x,y))", "score": 0}
{"id": "eqasc_validation_1442", "prediction": "all x y.((Birth(x) & Child(y)) -> Unique(x,y))", "score": 0}
{"id": "eqasc_validation_1442", "prediction": "all x.((Birth(x) & Birth(x)) -> Unique(x))", "score": 0}
{"id": "eqasc_validation_1442", "prediction": "all x.(Birth(x) -> UniqueAs(x,Kid(x))", "score": -1}
{"id": "eqasc_validation_1442", "prediction": "all x y.((Birth(x) & Child(y) & Born(x,y)) -> Unique(x,y))", "score": 0}
{"id": "eqasc_validation_1442", "prediction": "all x.((Birth(x) & Unique(x)) -> Born(x))", "score": 0}
{"id": "eqasc_validation_1443", "prediction": "all x y.((Child(x) & Born(x)) -> ParentsTakeCareOf(y,x))", "score": 0}
{"id": "eqasc_validation_1443", "prediction": "all x.((Child(x) & Born(x)) -> ParentsTakeCareOf(x,y))", "score": 0}
{"id": "eqasc_validation_1443", "prediction": "all x y.((Child(x) & Born(y)) -> TakesCareOf(x,y))", "score": 0}
{"id": "eqasc_validation_1443", "prediction": "all x y z.((Child(x) & Born(y) & Parent(z)) -> (TakesCareOf(z,x)))", "score": 0}
{"id": "eqasc_validation_1443", "prediction": "all x y.((Child(x) & Born(x)) -> (ParentsTakeCareOf(y,x)))", "score": 0}
{"id": "eqasc_validation_1443", "prediction": "all x y.((Child(x) & Born(x) & Parents(y)) -> TakesCareOf(y,x))", "score": 0}
{"id": "eqasc_validation_1443", "prediction": "all x y.((Child(x) & Born(x,y)) -> TakesCareOf(x,y))", "score": 0}
{"id": "eqasc_validation_1443", "prediction": "all x y.((Child(x) & Born(x,y)) -> ParentsTakeCare(x,y))", "score": 0}
{"id": "eqasc_validation_1443", "prediction": "all x y.((Child(x) & Born(x)) -> ParentsTakeCareOfAndAndParent(y,x))", "score": 0}
{"id": "eqasc_validation_1443", "prediction": "all x.((Child(x) & Born(x)) -> TakesCareOf(x,children))", "score": 0}
{"id": "eqasc_validation_1443", "prediction": "all x y z.((Child(x) & Born(x) & Parent(y) & Child(z)) -> TakeCareOf(y,x))", "score": 0}
{"id": "eqasc_validation_1443", "prediction": "all x y.((Child(x) & Born(x)) -> ManyParentsTakeCareOf(y,x))", "score": 0}
{"id": "eqasc_validation_1444", "prediction": "all x y.((Child(x) & Birth(x,y)) -> (PeriodOfParentalCare(x,y)))", "score": 0}
{"id": "eqasc_validation_1444", "prediction": "all x y.((Child(x) & Born(x)) -> (ParentalCare(y,x) & Offspring(y,x)))", "score": 0}
{"id": "eqasc_validation_1444", "prediction": "all x y.((Child(x) & Born(x)) -> (ParentalCareOfOffspring(y) & Followed(x,y)))", "score": 0}
{"id": "eqasc_validation_1444", "prediction": "all x y.((Child(x) & Born(x) & Offspring(y)) -> (AncientAttendance(x,y) & ParentalCare(x,y)))", "score": 0}
{"id": "eqasc_validation_1444", "prediction": "all x y.((Child(x) & Born(y)) -> ServedByPaternalCare(x,y))", "score": 0}
{"id": "eqasc_validation_1444", "prediction": "all x y.((Child(x) & Born(x)) -> (SufficientParentalCare(y,x) & OffspringHasOffspring(x)))", "score": 0}
{"id": "eqasc_validation_1444", "prediction": "all x,y.((Child(x) & Born(x,y)) -> PupilParentalCareOfOffspring(x,y))", "score": -1}
{"id": "eqasc_validation_1444", "prediction": "all x y.((Child(x) & Born(x)) -> (ParentalCarePeriod(y) & Offspring(x,y)))", "score": 0}
{"id": "eqasc_validation_1444", "prediction": "all x.(Birth(x) -> (ParentalCarePassage(x) & Offspring(x)))", "score": 0}
{"id": "eqasc_validation_1444", "prediction": "all x y.((Child(x) & Born(x)) -> MayBeSustainedByParentalCare(x,y))", "score": 0}
{"id": "eqasc_validation_1444", "prediction": "all x.((Civil(x) & Born(x)) -> (ParentalCare(x) | Offspring(x)))", "score": 0}
{"id": "eqasc_validation_1444", "prediction": "all x y z.((Child(x) & Born(x) & Offspring(y)) -> (PosterPrincipalCareOfOffspring(x,y)))", "score": 0}
{"id": "eqasc_validation_1444", "prediction": "all x y z.((Child(x) & Born(x) & Offspring(y) & ParentalCare(z)) -> MayBeSustained(x,y))", "score": 0}
{"id": "eqasc_validation_1444", "prediction": "all x y z.((Child(x) & Born(y) & Offspring(z)) -> MayBeCursedBy(x,y,z))", "score": 0}
{"id": "eqasc_validation_1444", "prediction": "all x y.((Child(x) & Born(x)) -> MayBeCausedByPaternalCare(x,y,offspring))", "score": 0}
{"id": "eqasc_validation_1444", "prediction": "all x y z.((Civil(x) & Born(x) & Offspring(y) & ParentalCare(z)) -> MayBeChangedBy(x,y,z))", "score": 0}
{"id": "eqasc_validation_1445", "prediction": "all x.(Scales(x) -> MeasuresWeightForWeight(x))", "score": 0}
{"id": "eqasc_validation_1445", "prediction": "all x y.((Scales(x) & MeasuresWeight(y)) -> UsedForMeasuringWeight(x,y))", "score": 0}
{"id": "eqasc_validation_1445", "prediction": "all x y.((Scales(x) & MeasuresWeight(y)) -> Use For(x,y))", "score": -1}
{"id": "eqasc_validation_1445", "prediction": "all x y.((Scale(x) & MeasuresWeight(x,y)) -> UsedFor(x,y))", "score": 0}
{"id": "eqasc_validation_1445", "prediction": "all x.(Scale(x) -> (UsedForMeasuringWeight(x) & MeasuresWeight(x)))", "score": 0}
{"id": "eqasc_validation_1445", "prediction": "all x.((Scales(x) & MeasuresWeight(x)) -> UsesScaleForWeight Measuring(x))", "score": -1}
{"id": "eqasc_validation_1445", "prediction": "all x y.((Scale(x) & Scale(y)) -> MeasuresWeight(x,y))", "score": 0}
{"id": "eqasc_validation_1445", "prediction": "all x y z.((Scale(x) & Weight(y) & Scale(z) & Measures(x,y)) -> Scale(x,z))", "score": 0}
{"id": "eqasc_validation_1445", "prediction": "all x y.((Scale(x) & Weight(y)) -> UsedForMeasuring(x,y))", "score": 0}
{"id": "eqasc_validation_1445", "prediction": "all x.(Scale(x) -> MeasuresWeight(x))", "score": 0}
{"id": "eqasc_validation_1445", "prediction": "all x y.( (Scale(x) & Scale(y)) -> MeasuresWeight(x,y))", "score": 0}
{"id": "eqasc_validation_1445", "prediction": "all x y.((Scale(x) & Weight(y)) -> Measures(x,y))", "score": 0}
{"id": "eqasc_validation_1445", "prediction": "all x.(Scave(x) -> MeasuresWeight(x))", "score": 0}
{"id": "eqasc_validation_1446", "prediction": "all x.(Result(x) -> MeasuredInPounds(x))", "score": 0}
{"id": "eqasc_validation_1446", "prediction": "all x.(Results(x) -> MeasuredInPounds(x))", "score": 0}
{"id": "eqasc_validation_1446", "prediction": "all x.(ResultsMeasuredInPounds(x) -> MeasuredInPounds(x))", "score": 0}
{"id": "eqasc_validation_1446", "prediction": "all x.(Result(x) -> MeasurableInPounds(x))", "score": 0}
{"id": "eqasc_validation_1446", "prediction": "all x yx.((Result(x) & Pound(y)) -> Measuring(x,y))", "score": -1}
{"id": "eqasc_validation_1446", "prediction": "all x y.((Result(x) & Pound(y)) -> Measuring(x,y))", "score": 0}
{"id": "eqasc_validation_1446", "prediction": "all x.(Results(x) -> MeasurizedInPfunds(x))", "score": 0}
{"id": "eqasc_validation_1446", "prediction": "all x.(Results(x) -> MeasuringPounds(x))", "score": 0}
{"id": "eqasc_validation_1446", "prediction": "all x.(ResultsMeasuredInPounds(x) -> MeasuredInResults(x))", "score": 0}
{"id": "eqasc_validation_1447", "prediction": "all x.(Scale(x) -> (DeterminesWeightInPounds(x) & InLengthPounds(x)))", "score": 0}
{"id": "eqasc_validation_1447", "prediction": "all x.(Scale(x) -> DeterminesWeightInPounds(x))", "score": 0}
{"id": "eqasc_validation_1447", "prediction": "all x y z.((Scale(x) & Weight(y) & Pound(z)) -> DeterminedInPounds(x,y,z))", "score": 0}
{"id": "eqasc_validation_1447", "prediction": "all x y.((Scale(x) & Weight(y)) -> DeterminesInPounds(x,y))", "score": 0}
{"id": "eqasc_validation_1447", "prediction": "all x y.((Scale(x) & WeightDetermination(y)) -> InPounds(x,y))", "score": 0}
{"id": "eqasc_validation_1447", "prediction": "all x y z.((Scales(x) & Weight(y) & Pounds(z)) -> DeterminesInPounds(x,y,z))", "score": 0}
{"id": "eqasc_validation_1447", "prediction": "all x y z.(Scale(x) -> (DerivesWeight(x,y) & Pounds(y) & InPounds(z)))", "score": 0}
{"id": "eqasc_validation_1447", "prediction": "all x.(Scale(x) -> DeterminesWeightInPlumbs(x))", "score": 0}
{"id": "eqasc_validation_1447", "prediction": "all x y z.((Scale(x) & Weight(y) & Pound(z)) -> DeterminesInPerson(x,y,z))", "score": 0}
{"id": "eqasc_validation_1447", "prediction": "all x y z.((Scale(x) & Weight(y) & Pound(z)) -> DeterminesInPounds(x,y,z))", "score": 0}
{"id": "eqasc_validation_1447", "prediction": "all x y z.((Scale(x) & WeightInPounds(y) & Tone(z)) -> DeterminesWeightInPounds(x,y,z))", "score": 0}
{"id": "eqasc_validation_1447", "prediction": "all x.(Scale(x) -> (CalculatedWeight(x) & InPounds(x)))", "score": 0}
{"id": "eqasc_validation_1447", "prediction": "all x y.((Scale(x) & MeasuresWeightInParens(y)) -> UsedToDetermineWeightInPounds(x,y))", "score": 0}
{"id": "eqasc_validation_1448", "prediction": "(all x.(Dimension(x) -> InInches(x)) & all y.(Weight(y) -> InPounds(y)))", "score": 0}
{"id": "eqasc_validation_1448", "prediction": "(all x.(DimensionalInches(x) -> WeightsInPounds(x))", "score": -1}
{"id": "eqasc_validation_1448", "prediction": "(all x.(Dimension(x) -> InInch(x)) & all y.(Weight(y) -> Kilogrammes(y)))", "score": 0}
{"id": "eqasc_validation_1448", "prediction": "all x y.((Dimension(x) & Weight(y)) -> (InInches(x) & InPound(y)))", "score": 0}
{"id": "eqasc_validation_1448", "prediction": "all x y.((Dimension(x) & Weight(y)) -> (InInches(x) | InPounds(y)))", "score": 0}
{"id": "eqasc_validation_1448", "prediction": "all x.((Dimension(x) & Weight(x)) -> (InInch(x) & InPounds(x)))", "score": 0}
{"id": "eqasc_validation_1448", "prediction": "all x y.((Length(x) & Weight(y)) -> (InInch(x) | InPound(y)))", "score": 0}
{"id": "eqasc_validation_1448", "prediction": "(all x.(Dimensional(x) -> InInches(x)) & all y.(Weight(y) -> BritishPound(y)))", "score": 0}
{"id": "eqasc_validation_1448", "prediction": "all x y.((Dimensional(x) & Weight(y)) -> (InInches(x) & Pounds(y)))", "score": 0}
{"id": "eqasc_validation_1448", "prediction": "all x y.((Dimensional(x) & Weight(y)) -> (InInches(x) & InPounds(y)))", "score": 0}
{"id": "eqasc_validation_1448", "prediction": "(all x.(Dimensional(x) -> InInches(x)) & (Weight(x) -> InPounds(x)))", "score": 0}
{"id": "eqasc_validation_1448", "prediction": "all x.(Dimensions(x) -> (InInches(x) & Weights(x,pounds)))", "score": 0}
{"id": "eqasc_validation_1448", "prediction": "all x.(Dimension(x) -> (InInch(x) & WeightInPounds(x)))", "score": 0}
{"id": "eqasc_validation_1448", "prediction": "all x y.((Dimensional(x) & Weight(y)) -> (InInches(x,y) | InPfunds(y)))", "score": 0}
{"id": "eqasc_validation_1448", "prediction": "(all x.(Dimension(x) -> InInch(x)) & all y.(Weight(y) -> Weight(y)))", "score": 0}
{"id": "eqasc_validation_1449", "prediction": "all x.(Scale(x) -> MeasuresPounds(x))", "score": 0}
{"id": "eqasc_validation_1449", "prediction": "all x y.((Scale(x) & Weight(y)) -> MeasuresWeighs(x,y))", "score": 0}
{"id": "eqasc_validation_1449", "prediction": "all x y.((Scale(x) & Weight(y)) -> Measures(x,y))", "score": 0}
{"id": "eqasc_validation_1449", "prediction": "all x y.((Scale(x) & MeasuresPounds(x)) -> MeasuresPounds(y))", "score": 0}
{"id": "eqasc_validation_1449", "prediction": "all x y.((Scale(x) & Weight(y)) -> MeasuresPounds(x,y))", "score": 0}
{"id": "eqasc_validation_1449", "prediction": "all x y.((Scale(x) & Scale(y) & MeasuresPounds(x,y)) -> MeasuresPounds(x,y))", "score": 0}
{"id": "eqasc_validation_1449", "prediction": "all x.(Scale(x) -> MeasuresPlumbs(x))", "score": 0}
{"id": "eqasc_validation_1449", "prediction": "all x.(Scales(x) -> MeasuresPounds(x))", "score": 0}
{"id": "eqasc_validation_1449", "prediction": "all x y.((Scale(x) & Weight(y) & Measures(x,y)) -> QuantifiesPounds(x,y))", "score": 0}
{"id": "eqasc_validation_1450", "prediction": "All x.(WeaningWeight(x) -> ExpressedInPounds(x))", "score": -1}
{"id": "eqasc_validation_1450", "prediction": "WeightWeaningWeight(x) -> (ExposureInPounds(x)))", "score": -1}
{"id": "eqasc_validation_1450", "prediction": "All x y.((WeaningWeight(x) & Pound(y)) -> ExpressedIn(x,y))", "score": -1}
{"id": "eqasc_validation_1450", "prediction": "All x.(WeaningWeight(x) -> ExpressesInPounds(x))", "score": -1}
{"id": "eqasc_validation_1450", "prediction": "WeaningWeight(weaning(weaning) & expressedInPounds(weaning))", "score": -1}
{"id": "eqasc_validation_1450", "prediction": "All x.(WeaningWeight(x) -> (ExpressedInPounds(x)))", "score": -1}
{"id": "eqasc_validation_1450", "prediction": "All x.(Weigh(x) -> (ExpressedInPounds(x)))", "score": -1}
{"id": "eqasc_validation_1450", "prediction": "Young(weaning) weight(weaning)weight(weaning))", "score": -1}
{"id": "eqasc_validation_1450", "prediction": "WeaningWeight(WeaningWeight) -> expressedInPounds(weaningWeight))", "score": -1}
{"id": "eqasc_validation_1450", "prediction": "All x.(WeaningWeight(x) -> expressedInPounds(x))", "score": -1}
{"id": "eqasc_validation_1450", "prediction": "WiraningWeight(WeaningWire) -> (ExpressedInPounds(WeaningWeight) & InPounds(weaningWeight)))", "score": -1}
{"id": "eqasc_validation_1450", "prediction": "How Much WeaningWeight(WeaningWeight) -InPounds(WeaningWeight))", "score": -1}
{"id": "eqasc_validation_1450", "prediction": "All x.(Weigh(x) -> ExpressedInPounds(x))", "score": -1}
{"id": "eqasc_validation_1450", "prediction": "WeaningWeight(x) -> expressedInPounds(x))", "score": -1}
{"id": "eqasc_validation_1451", "prediction": "all x.(Scene(x) -> MeasuresPounds(x))", "score": 0}
{"id": "eqasc_validation_1451", "prediction": "all x.(Scene(x) -> UsedForMeasuringPounds(x))", "score": 0}
{"id": "eqasc_validation_1451", "prediction": "exists x.(Scale(x) & MeasuringPounds(x))", "score": 0}
{"id": "eqasc_validation_1451", "prediction": "all x y z.((Scale(x) & Pound(y) & Product(z)) -> UsedForMeasuring(x,y,z))", "score": 0}
{"id": "eqasc_validation_1451", "prediction": "all x.(Scales(x) -> MeasuresPounds(x))", "score": 0}
{"id": "eqasc_validation_1451", "prediction": "all x.(Scale(x) -> UsedForMeasuringPounds(x))", "score": 0}
{"id": "eqasc_validation_1451", "prediction": "all x.(Scale(x) -> MeasuresPounds(x))", "score": 0}
{"id": "eqasc_validation_1451", "prediction": "all x.(Scale(x) -> UsedForMeteoringPounds(x))", "score": 0}
{"id": "eqasc_validation_1451", "prediction": "all x.(Scale(x) -> MeasurePounds(x))", "score": 0}
{"id": "eqasc_validation_1451", "prediction": "all x.(ScALE(x) -> MeasuresPounds(x))", "score": 0}
{"id": "eqasc_validation_1451", "prediction": "all x y.((Scale(x) & Pums(y)) -> Measures(x,y))", "score": 0}
{"id": "eqasc_validation_1452", "prediction": "all x.(Weight(x) -> InGramms(x))", "score": 0}
{"id": "eqasc_validation_1452", "prediction": "all x.(Weight(x) -> InGaso(x))", "score": 0}
{"id": "eqasc_validation_1452", "prediction": "all x.(Weight(x) -> InGrooves(x))", "score": 0}
{"id": "eqasc_validation_1452", "prediction": "all x.(Weight(x) -> InGlobes(x))", "score": 0}
{"id": "eqasc_validation_1452", "prediction": "all x.(Weight(x) -> InGas(x))", "score": 0}
{"id": "eqasc_validation_1452", "prediction": "all x.(Weight(x) -> InGms(x))", "score": 0}
{"id": "eqasc_validation_1452", "prediction": "all x.(Weight(x) -> InGrams(x))", "score": 0}
{"id": "eqasc_validation_1452", "prediction": "all x.(Way(x) -> InGel(x))", "score": 0}
{"id": "eqasc_validation_1452", "prediction": "all x.(Wait(x) -> InGas(x))", "score": 0}
{"id": "eqasc_validation_1452", "prediction": "all x.(Weight(x) -> InGrMg(x))", "score": 0}
{"id": "eqasc_validation_1452", "prediction": "all x.(Weight(x) -> InGround(x))", "score": 0}
{"id": "eqasc_validation_1452", "prediction": "all x.(Wait(x) -> InGems(x))", "score": 0}
{"id": "eqasc_validation_1452", "prediction": "all x.(Weight(x) -> InMg(x))", "score": 0}
{"id": "eqasc_validation_1453", "prediction": "all x.(Scales(x) -> MeasuresGums(x))", "score": 0}
{"id": "eqasc_validation_1453", "prediction": "all x y.((Scales(x) & Grains(y)) -> UsedForMeasuring(x,y))", "score": 0}
{"id": "eqasc_validation_1453", "prediction": "all x y.((Scale(x) & Meterg(y)) -> UsedForMeasuring(x,y))", "score": 0}
{"id": "eqasc_validation_1453", "prediction": "all x y.((Scales(x) & Grams(y)) -> Measure(x,y))", "score": 0}
{"id": "eqasc_validation_1453", "prediction": "all x.(Scales(x) -> MeasurementsGazette(x))", "score": 0}
{"id": "eqasc_validation_1453", "prediction": "all x y.((Scale(x) & Weight(y) & Uses(x,y)) -> MeasuresGrams(x,y))", "score": 0}
{"id": "eqasc_validation_1453", "prediction": "all x y.((Scale(x) & Gram(y)) -> UsedForMeasuring(x,y))", "score": 0}
{"id": "eqasc_validation_1453", "prediction": "all x y.((Scene(x) & Scale(y)) -> MeasuresGrams(x,y))", "score": 0}
{"id": "eqasc_validation_1453", "prediction": "all x.(Scale(x) -> (MeasuresGasWeight(x) & MeasuresGrams(x)))", "score": 0}
{"id": "eqasc_validation_1453", "prediction": "all x y z.((Scale(x) & Grams(y) & Grams(z)) -> Measures(x,y,z))", "score": 0}
{"id": "eqasc_validation_1453", "prediction": "all x y z.((Scale(x) & Gram(y) & Gram(z) & Measured(x,y,z)) -> Scale(x))", "score": 0}
{"id": "eqasc_validation_1453", "prediction": "exists x.(Scale(x) & MeasuresGramms(x) & UsedFor(x,Gr,m))", "score": 0}
{"id": "eqasc_validation_1453", "prediction": "all x y z.((Scale(x) & Gramophone(y) & Gramophone(z)) -> MeasuresGramogrammes(x,y,z))", "score": 0}
{"id": "eqasc_validation_1453", "prediction": "all x y z.((Scene(x) & GrammageGas(y) & Scale(z)) -> UsedForMeasuring(x,y))", "score": 0}
{"id": "eqasc_validation_1453", "prediction": "all x y.((Scales(x) & Grips(y)) -> Measures(x,y))", "score": 0}
{"id": "eqasc_validation_1454", "prediction": "all x y.((Object(x) & Weight(y)) -> ItsGravity(x,y))", "score": 0}
{"id": "eqasc_validation_1454", "prediction": "all x y.((Object(x) & Weight(y,x)) -> ForceOfGravityOn(x,y))", "score": 0}
{"id": "eqasc_validation_1454", "prediction": "all x y z.((Object(x) & Weight(y) & Gravity(z) & ForceOn(x,y,z)) -> WeightOn(z,x))", "score": 0}
{"id": "eqasc_validation_1454", "prediction": "all x y.((Object(x) & Weight(y)) -> GravityForce(x,y))", "score": 0}
{"id": "eqasc_validation_1454", "prediction": "all x.(Object(x) -> Weight(x))", "score": 0}
{"id": "eqasc_validation_1454", "prediction": "all x.(ObjectsWeight(x) -> ForceOfGravityOn(x,y))", "score": 0}
{"id": "eqasc_validation_1454", "prediction": "all x y.((Object(x) & Object(y)) -> GravityForce(x,y))", "score": 0}
{"id": "eqasc_validation_1454", "prediction": "all x.(Object(x) -> WeightForce(x))", "score": 0}
{"id": "eqasc_validation_1454", "prediction": "all x y.((Object(x) & Weight(x)) -> TheForceOfGravity(x,y))", "score": 0}
{"id": "eqasc_validation_1454", "prediction": "all x.(Object(x) -> ThisForceOfGravityOn(x,y))", "score": 0}
{"id": "eqasc_validation_1454", "prediction": "all x.(ObjectsWeight(x) -> ForceOfGravity(x))", "score": 0}
{"id": "eqasc_validation_1454", "prediction": "all x.(ObjectsWeight(x) -> ForceOfGravityOnObject(x))", "score": 0}
{"id": "eqasc_validation_1454", "prediction": "all x.((Object(x) & Weight(x)) -> GravityForce(x))", "score": 0}
{"id": "eqasc_validation_1454", "prediction": "all x y.((Object(x) & Weight(y)) -> ForgeOfGravity(x,y))", "score": 0}
{"id": "eqasc_validation_1454", "prediction": "all x.(Object(x) -> GravitationalForceOnObject(x))", "score": 0}
{"id": "eqasc_validation_1454", "prediction": "all x y.((Object(x) & Weight(y)) -> ForceOfGravity(x,y))", "score": 0}
{"id": "eqasc_validation_1455", "prediction": "all x y z.((Scale(x) & Gravity(y) & Pulse(z)) -> MeasuresForceOfGravity(x,y,z))", "score": 0}
{"id": "eqasc_validation_1455", "prediction": "all x.(Scale(x) -> MeasuresFormOfGravity(x))", "score": 0}
{"id": "eqasc_validation_1455", "prediction": "all x y z.((Scales(x) & MeasuresGrivity(y) & Gravity(z)) -> UsedFor(x,y,z))", "score": 0}
{"id": "eqasc_validation_1455", "prediction": "all x y.((Scale(x) & MeasuresForceOfGravity(y)) -> ScaleMeasuresForceOfGravity(x,y))", "score": 0}
{"id": "eqasc_validation_1455", "prediction": "all x.(Scales(x) -> MeasuresForceOfGravity(x))", "score": 0}
{"id": "eqasc_validation_1455", "prediction": "all x y.((Scanning(x) & Scale(y)) -> MeasuresForceOfGravity(y,x))", "score": 0}
{"id": "eqasc_validation_1455", "prediction": "all x y.((Scales(x) & MeasuresForceOfGravity(x,y)) -> Scale(x))", "score": 0}
{"id": "eqasc_validation_1455", "prediction": "all x.(Scale(x) -> UsedForMeasuringForceOfGravity(x,Gravity,Groove,Groove,Gravity))", "score": 0}
{"id": "eqasc_validation_1455", "prediction": "all x y.((Scales(x) & ForceOfGravity(y)) -> UsedForMeasuring(x,y))", "score": 0}
{"id": "eqasc_validation_1455", "prediction": "all x y.((Scales(x) & Gravity(y) & MeasuresForce(x,y)) -> MeasuresForce(x,y))", "score": 0}
{"id": "eqasc_validation_1455", "prediction": "all x.(Scales(x) -> (MeasuresGravity(x,Gravity) | Measures(x,Gravity)))", "score": 0}
{"id": "eqasc_validation_1455", "prediction": "all x y z.(Scales(x) -> (AnalysisScale(y) & MeasuresForceOfGravity(z) & PulsedForceOfGravity(y,z)))", "score": 0}
{"id": "eqasc_validation_1455", "prediction": "all x.(Scale(x) -> (MeasuresGravity(x) & MeasuresForceOfGravity(x)))", "score": 0}
{"id": "eqasc_validation_1455", "prediction": "all x y.((Scales(x) & MeasuresForceOfGravity(y)) -> (UsedForGravity(x,y) & MeasuresForceOfGravity(y)))", "score": 0}
{"id": "eqasc_validation_1455", "prediction": "exists x.(Scale(x) & UsedForMeasuringGravity(x))", "score": 0}
{"id": "eqasc_validation_1455", "prediction": "all x.(Scales(x) -> UsedForMeasuringForceOfGravity(x))", "score": 0}
{"id": "eqasc_validation_1456", "prediction": "all x.(Weigh(x) -> InKg(x))", "score": 0}
{"id": "eqasc_validation_1456", "prediction": "all x.(Weight(x) -> Kilogram(x))", "score": 0}
{"id": "eqasc_validation_1456", "prediction": "(all x y.(Weight(x) -> InKilograms(x))", "score": -1}
{"id": "eqasc_validation_1456", "prediction": "all x.(Weight(x) -> InKilograms(x))", "score": 0}
{"id": "eqasc_validation_1456", "prediction": "all x.(Weight(x) -> InKgs(x))", "score": 0}
{"id": "eqasc_validation_1456", "prediction": "all x.(Weight(x) -> Kilogrammes(x))", "score": 0}
{"id": "eqasc_validation_1456", "prediction": "all x.(Weight(x) -> Kilograms(x))", "score": 0}
{"id": "eqasc_validation_1456", "prediction": "all x.(Weight(x) -> InKg(x))", "score": 0}
{"id": "eqasc_validation_1456", "prediction": "all x.(Weight(x,Kg) -> WeightInKg(x))", "score": 0}
{"id": "eqasc_validation_1457", "prediction": "all x.(Scale(x) -> MeasuresKg(x))", "score": 0}
{"id": "eqasc_validation_1457", "prediction": "all x y.((Scale(x) & Kilometre(y)) -> Measures(x,y))", "score": 0}
{"id": "eqasc_validation_1457", "prediction": "all x.(Scale(x) -> MeasuresKg[x])", "score": 0}
{"id": "eqasc_validation_1457", "prediction": "all x y.((Scales(x) & Kilogram(y)) -> Measure(x,y))", "score": 0}
{"id": "eqasc_validation_1457", "prediction": "all x.(Scale(x) -> CanMeasureKg(x))", "score": 0}
{"id": "eqasc_validation_1457", "prediction": "all x y.((Scale(x) & Scale(y)) -> MeasuresKg(x,y))", "score": 0}
{"id": "eqasc_validation_1457", "prediction": "all x.(Scales(x) -> MeasuresKg(x))", "score": 0}
{"id": "eqasc_validation_1457", "prediction": "all x y.((Scale(x) & Kilograms(y)) -> Measures(x,y))", "score": 0}
{"id": "eqasc_validation_1457", "prediction": "all x y.((Scale(x) & Kilogram(y)) -> Measures(x,y))", "score": 0}
{"id": "eqasc_validation_1457", "prediction": "all x y.((Scales(x) & Kilogram(y)) -> Measures(x,y))", "score": 0}
{"id": "eqasc_validation_1457", "prediction": "all x y.((Scale(x) & Kilogram(y)) -> CanMeasure(x,y))", "score": 0}
{"id": "eqasc_validation_1457", "prediction": "all x.(Scales(x) -> MeasureKg(x))", "score": 0}
{"id": "eqasc_validation_1458", "prediction": "all x.(Weight(x) -> InPounds(x))", "score": 0}
{"id": "eqasc_validation_1458", "prediction": "all x.(Weight(x) -> (Pounds(x)))", "score": 0}
{"id": "eqasc_validation_1458", "prediction": "all x.(Weight(x) -> Pound(x))", "score": 0}
{"id": "eqasc_validation_1458", "prediction": "all x.(Weight(x) -> (InPounds(x)))", "score": 0}
{"id": "eqasc_validation_1459", "prediction": "all x y.((Scale(x) & Weight(y)) -> MeasuresPounds(x,y))", "score": 0}
{"id": "eqasc_validation_1459", "prediction": "all x y z.((Scale(x) & Pound(y) & Weight(z) & UsedForMeasuring(x,y,z)) -> MeasuresPounds(x,y,z))", "score": 0}
{"id": "eqasc_validation_1459", "prediction": "all x y.((Scale(x) & Pounds(y) & UsedForMeasuring(x,y)) -> Measures(x,y))", "score": 0}
{"id": "eqasc_validation_1459", "prediction": "all x y.((Scale(x) & Pounds(y)) -> MeasuresPounds(x,y))", "score": 0}
{"id": "eqasc_validation_1459", "prediction": "all x y z.((Scale(x) & Pfund(y) & Pound(z)) -> Measuring(x,y,z))", "score": 0}
{"id": "eqasc_validation_1459", "prediction": "all x y.((Scales(x) & Weight(y)) -> UsedForMeasuring(x,y))", "score": 0}
{"id": "eqasc_validation_1459", "prediction": "all x.(Scale(x) -> MeasuresPounds(x))", "score": 0}
{"id": "eqasc_validation_1459", "prediction": "all x y z.((Scales(x) & Pound(y) & Scale(z)) -> MeasuresPounds(x,y))", "score": 0}
{"id": "eqasc_validation_1459", "prediction": "all x y.((Scale(x) & Pound(y)) -> UsedForMeasuring(x,y))", "score": 0}
{"id": "eqasc_validation_1459", "prediction": "all x y z.((Scale(x) & Pound(y) & Pound(z)) -> UsedForMeasuring(x,y,z))", "score": 0}
{"id": "eqasc_validation_1459", "prediction": "all x y.((Scale(x) & PoundMeter(y)) -> Measures(x,y))", "score": 0}
{"id": "eqasc_validation_1459", "prediction": "all x.(Scale(x) -> UsedForMeasuringPounds(x))", "score": 0}
{"id": "eqasc_validation_1459", "prediction": "all x y.((Scale(x) & Pounds(y)) -> Measures(x,y))", "score": 0}
{"id": "eqasc_validation_1459", "prediction": "all x y z.((Scale(x) & Pfund(y) & Tonnage(z)) -> Measures(x,y,z))", "score": 0}
{"id": "eqasc_validation_1460", "prediction": "all x.(MeasuresObjectsWeight(x) -> InGrams(x))", "score": 0}
{"id": "eqasc_validation_1460", "prediction": "all x.(MeasureObjectsWeight(x) -> InGyps(x))", "score": 0}
{"id": "eqasc_validation_1460", "prediction": "all x.(MeasuresObjectWeightIn(x,grams) -> Measures(x))", "score": 0}
{"id": "eqasc_validation_1460", "prediction": "all x y.((Measures(x,y) & Weight(x)) -> MeasuresIn(x,y))", "score": 0}
{"id": "eqasc_validation_1460", "prediction": "all x.(MeasuresObjectsWeightInGems(x) -> Fat(x))", "score": 0}
{"id": "eqasc_validation_1460", "prediction": "all x.(MeasuresObjectWeightInGems(x) -> MeasuresWeightInGems(x))", "score": 0}
{"id": "eqasc_validation_1460", "prediction": "all x.(MeasuresObjectsWeightInGrams(x) -> WeightInGrams(x))", "score": 0}
{"id": "eqasc_validation_1460", "prediction": "all x y.((Object(x) & MeasuresWeight(x,y)) -> InGems(y))", "score": 0}
{"id": "eqasc_validation_1460", "prediction": "all x y.((Object(x) & Weight(y) & Measure(x,y)) -> Ingrams(x))", "score": 0}
{"id": "eqasc_validation_1460", "prediction": "all x y.((Object(x) & Grams(y)) -> MeasuresWeight(x,y))", "score": 0}
{"id": "eqasc_validation_1460", "prediction": "all x.(MeasuresObjectWeight(x) -> InGramograms(x))", "score": 0}
{"id": "eqasc_validation_1460", "prediction": "all x.(MeasuresObjectsWeightInGrammes(x) -> WeightInGrammes(x))", "score": 0}
{"id": "eqasc_validation_1460", "prediction": "all x.(MeterObject(x) -> WeightInGramumps(x))", "score": 0}
{"id": "eqasc_validation_1460", "prediction": "all x.(MeterDomestic(x) -> MeasuresWheight(x,Gase))", "score": 0}
{"id": "eqasc_validation_1460", "prediction": "all x.(Object(x) -> MeasuresWeightInGrams(x))", "score": 0}
{"id": "eqasc_validation_1460", "prediction": "all x.(MeasuresObjectsWeightInGms(x))", "score": 0}
{"id": "eqasc_validation_1461", "prediction": "all x.(Lancelet(x) -> FreeSwimming(x))", "score": 0}
{"id": "eqasc_validation_1461", "prediction": "all x.(Larva(x) -> FreeSwimming(x))", "score": 0}
{"id": "eqasc_validation_1461", "prediction": "all x.(LanceletLarvae(x) -> FreeSwimming(x))", "score": 0}
{"id": "eqasc_validation_1461", "prediction": "all x.(LanceletLarva(x) -> FreeSwimming(x))", "score": 0}
{"id": "eqasc_validation_1461", "prediction": "all x.(Larva(x:Lancelet) -> FreeSwimming(x))", "score": 0}
{"id": "eqasc_validation_1461", "prediction": "all x.(Landlanita(x) -> FreeSwimming(x))", "score": 0}
{"id": "eqasc_validation_1461", "prediction": "all x.(Larvae(x) -> (Lancelet(x) | FreeSwimming(x)))", "score": 0}
{"id": "eqasc_validation_1461", "prediction": "all x.(Larvae(x) -> FreeSwimming(x))", "score": 0}
{"id": "eqasc_validation_1461", "prediction": "all x.(Largelet(x) -> FreeSwimming(x))", "score": 0}
{"id": "eqasc_validation_1462", "prediction": "all x.(Lakelet(x) -> (SmallFishlikeAnimal(x) & TapenedBody(x)))", "score": 0}
{"id": "eqasc_validation_1462", "prediction": "all x.(Lancelet(x) -> (SmallFishlikeAnimal(x) & TaperedBody(x)))", "score": 0}
{"id": "eqasc_validation_1462", "prediction": "all x.(Lancelet(x) -> (SmallFishlikeAnimal(x) & HasTapedBody(x)))", "score": 0}
{"id": "eqasc_validation_1462", "prediction": "all x.(Lakelet(x) -> (SmallFishlikeAnimal(x) & TaperedBody(x)))", "score": 0}
{"id": "eqasc_validation_1462", "prediction": "all x.(Lancelet(x) -> (Fishlike(x) & TaperedBody(x)))", "score": 0}
{"id": "eqasc_validation_1462", "prediction": "all x.(Lancelet(x) -> (SmallFishlikeAnimal(x) & HasTappenedBody(x)))", "score": 0}
{"id": "eqasc_validation_1462", "prediction": "all x.(Lancelet(x) -> (SmallFishlike(x) & HasTurnedBody(x)))", "score": 0}
{"id": "eqasc_validation_1462", "prediction": "all x.(Lancelet(x) -> (SmallFish(x) & HasTarteredBody(x)))", "score": 0}
{"id": "eqasc_validation_1463", "prediction": "all x.((Larvae(x) & SmallFishlikeAnimal(x) & TaperedBody(x)) -> FreeSwimming(x))", "score": 0}
{"id": "eqasc_validation_1463", "prediction": "all x y.((Larvae(x) & SmallFishlikeAnimal(y) & TaperedBody(y) & SmallFishlikeAnimal(y) & HasAnchoredBody(y)) -> FreeSwimmingFreeSwimmingFreeSwimmingFreeSwimmingFreeSwimmingFreeSwimmingFreeSwimmingFreeSwimmingFree(x,y))", "score": 0}
{"id": "eqasc_validation_1463", "prediction": "all x y.((Larvae(x) & SmallFishlike(y) & TaperedBody(z) & SmallFishlike(x)) -> FreeSwimming(x))", "score": 0}
{"id": "eqasc_validation_1463", "prediction": "all x y.((Larvae(x) & SmallFishlikeAnimal(y) & TaperedBody(y)) -> FreeSwimming(x,y))", "score": 0}
{"id": "eqasc_validation_1463", "prediction": "all x.(LarvaeOfSmallFishlikeAnimals(x) & TaperedBody(x) -> FreeSwimming(x))", "score": 0}
{"id": "eqasc_validation_1463", "prediction": "all x.((LarvaeOfSmallFishLikeAnimals(x) & TaperedBody(x)) -> FreeSwimming(x))", "score": 0}
{"id": "eqasc_validation_1463", "prediction": "all x.((Larvae(x) & SmallFloatlikeAnimal(x) & TaperedBody(x)) -> FreeSwimming(x))", "score": 0}
{"id": "eqasc_validation_1463", "prediction": "all x y z.((Larvale(x) & SmallFishlikeAnimal(y) & TaperedBody(z) & SmallFishlikeAnimal(y) & Has(y,z)) -> FreeSwimmingLarvals(x))", "score": 0}
{"id": "eqasc_validation_1463", "prediction": "all x y z.((Larvae(x) & SmallFishlikeAnimal(y) & TaperedBody(z) & SmallAnimal(w) & TaperedBody(z) & Has(x,w) & Has(x,w)) -> FreeSwimming(x))", "score": 0}
{"id": "eqasc_validation_1463", "prediction": "all x y.((Larvae(x) & SmallFishlikeAnimal(y) & TaperedBody(x)) -> FreeSwimming(x))", "score": 0}
{"id": "eqasc_validation_1463", "prediction": "all x.((Larvae(x) & SmallFishModel(x) & Tail(x,p3) & TaperedBody(x)) -> FreeSwimming(x))", "score": 0}
{"id": "eqasc_validation_1463", "prediction": "all x y.((Larvae(x) & SmallFishlikeAnimal(y) & TaperedBody(y)) -> FreeSwimming(x))", "score": 0}
{"id": "eqasc_validation_1464", "prediction": "all x.(WaterFlows(x) -> (DiveIn(x) & SwimThrough(x)))", "score": 0}
{"id": "eqasc_validation_1464", "prediction": "all x.((Water(x) & WaterFlows(x)) -> (DiveIn(x) & SwimThrough(x)))", "score": 0}
{"id": "eqasc_validation_1464", "prediction": "all x.((WaterFlies(x) & DivingIn(x) & SwimmingThrough(x)) -> WaterFlows(x))", "score": 0}
{"id": "eqasc_validation_1464", "prediction": "all x y.((Water(x) & WaterFlow(y)) -> (DiveIn(z) & SwimThrough(z) & WaterFlow(z)))", "score": 0}
{"id": "eqasc_validation_1464", "prediction": "all x.((Water(x) & Flows(x)) -> (DiveIn(x) & SwimThrough(x)))", "score": 0}
{"id": "eqasc_validation_1464", "prediction": "all x y.((Water(x) & Flows(x)) -> (DiveIn(x) & SwimThrough(x)))", "score": 0}
{"id": "eqasc_validation_1464", "prediction": "all x y.((Water(x) & WaterFlows(x) & DivingIn(x,y)) -> SwimsThrough(x,y))", "score": 0}
{"id": "eqasc_validation_1464", "prediction": "all x.((Water(x) & WaterFlows(x)) -> (DiveIn(x,y) & SwimThrough(x,y)))", "score": 0}
{"id": "eqasc_validation_1464", "prediction": "all x.(WaterFlow(x) -> (DiveIn(x) & SwimThrough(x)))", "score": 0}
{"id": "eqasc_validation_1465", "prediction": "all x.(LanceletLarvae(x) -> LivesInWater(x))", "score": 0}
{"id": "eqasc_validation_1465", "prediction": "all x y.((Larvae(x) & Lancelet(y) & Water(p)) -> LivesIn(x,p,p,p,p,p))", "score": 0}
{"id": "eqasc_validation_1465", "prediction": "all x.(LanceletLarvaeLiveInWater(x) -> Larvae(x))", "score": 0}
{"id": "eqasc_validation_1465", "prediction": "all x.(Laurel(x) -> (LivesInWater(x) | LivesInWater(x)))", "score": 0}
{"id": "eqasc_validation_1465", "prediction": "all x y z.((LanceletLarvae(x) & Water(y) & Water(z)) -> LivesIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_1465", "prediction": "all x y.((LanceletLarvae(x) & Water(y)) -> LivesIn(x,y))", "score": 0}
{"id": "eqasc_validation_1465", "prediction": "all x.(Larva(x) & LanceletLarva(x) & LivesInWater(x))", "score": 0}
{"id": "eqasc_validation_1465", "prediction": "all x y.((Larva(x) & LanceletLarva(y) & LivesInWater(x,y)) -> LivesInWater(y))", "score": 0}
{"id": "eqasc_validation_1466", "prediction": "all x.((SmallFishlikeAnimal(x) & TaperedBody(x)) -> FreeSwimming(x))", "score": 0}
{"id": "eqasc_validation_1466", "prediction": "all x.((SmallFish(x) & TaperedBody(x)) -> FreeSwimming(x))", "score": 0}
{"id": "eqasc_validation_1466", "prediction": "all x.(AlwaysSwimming(x) -> (SmallFishlikeAnimal(x) & TaperedBody(x) & FreeSwimming(x)))", "score": 0}
{"id": "eqasc_validation_1466", "prediction": "all x.((Animal(x) & SmallFishIce Animal(x) & TaperedBody(x)) -> FreeSwimming(x))", "score": -1}
{"id": "eqasc_validation_1466", "prediction": "all x y.((SmallFish(x) & SmallFisherlike(x) & TaperedBody(x) & HasTearnBody(x)) -> FreeSwimming(y))", "score": 0}
{"id": "eqasc_validation_1466", "prediction": "all x y z.((SmallFishlikeAnimal(x) & TaperedBody(y) & SmallFishlikeAnimal(z) & Has(x,y)) -> (FreeSwimming(x) | FreeSwimming(x)))", "score": 0}
{"id": "eqasc_validation_1466", "prediction": "all x y z.((Illustrated(x) & SmallFishlikeAnimal(y) & TaperedBody(z) & TaperedBody(z)) -> FreeSwimming(x,y))", "score": 0}
{"id": "eqasc_validation_1466", "prediction": "all x y.((SmallFishlikeAnimal(x) & TaperedBody(x) & TaperedBody(y)) -> FreeSwimming(x))", "score": 0}
{"id": "eqasc_validation_1466", "prediction": "all x.((SmallFishLikeAnimal(x) & TaperedBody(x)) -> FreeSwimming(x))", "score": 0}
{"id": "eqasc_validation_1466", "prediction": "all x y z.((SmallFishlikeAnimal(x) & TaperedBody(x) & SmallFishlike(x) & TaperedBody(y) & TaperedBody(z)) -> FreeSwimming(x,y,z))", "score": 0}
{"id": "eqasc_validation_1467", "prediction": "all x.((EggsFertilized(x) & FreeSwimmingLarvae(x)) -> Develops(x))", "score": 0}
{"id": "eqasc_validation_1467", "prediction": "all x.(FertilizedEggs(x) -> FreeSwimmingLarvae(x))", "score": 0}
{"id": "eqasc_validation_1467", "prediction": "all x.((EggsFertilized(x) & Larvae(x) & FreeSwimming(x)) -> Develops(x))", "score": 0}
{"id": "eqasc_validation_1467", "prediction": "all x.((EggsFertilized(x) & FreeSwimmingLarvaeDevelops(x)) -> Fertilized(x))", "score": 0}
{"id": "eqasc_validation_1467", "prediction": "all x y.((Egg(x) & Fertile(x)) -> (FreeSwimmingLarvae(x) | FreeSwimmingLarvae(y)))", "score": 0}
{"id": "eqasc_validation_1467", "prediction": "all x.((EggsFertilized(x) & Larvae(x)) -> FreeSwimming(x))", "score": 0}
{"id": "eqasc_validation_1467", "prediction": "all x.(Fertile(x) -> FreeSwimmingLarvae(x))", "score": 0}
{"id": "eqasc_validation_1467", "prediction": "all x y.((Egg(x) & Fertilized(x)) -> FreeSwimmingLarvaeDevelops(y))", "score": 0}
{"id": "eqasc_validation_1467", "prediction": "all x y z.((Egg(x) & Fragranized(x) & FreeSwimmingLarva(y) & Larva(z)) -> Develops(y))", "score": 0}
{"id": "eqasc_validation_1467", "prediction": "all x.((EggsFiberized(x) & FreeSwimmingLarvae(x)) -> Develop(x))", "score": 0}
{"id": "eqasc_validation_1468", "prediction": "all x.(FertilizedLanceletEggs(x) -> DevelopsToNavigateInWater(x))", "score": 0}
{"id": "eqasc_validation_1468", "prediction": "all x.(FertilizedLanceletEggs(x) -> (DevelopsSoBalanceInWater(x)))", "score": 0}
{"id": "eqasc_validation_1468", "prediction": "all x.((LanceletEggs(x) & Fertilized(x)) -> DevelopsToNavigateInWater(x))", "score": 0}
{"id": "eqasc_validation_1468", "prediction": "all x.((LanceletEggs(x) & Fermented(x)) -> DevelopsSo(x))", "score": 0}
{"id": "eqasc_validation_1468", "prediction": "all x.((LanceletEggs(x) & Fertilized(x)) -> DevelopsSoCanNavigateInWater(x))", "score": 0}
{"id": "eqasc_validation_1468", "prediction": "all x.(Fertilized(x) -> DevelopsInWater(x))", "score": 0}
{"id": "eqasc_validation_1468", "prediction": "all x.(Fertile(x) -> (LanceletEggs(x) & WaterElements(x)))", "score": 0}
{"id": "eqasc_validation_1468", "prediction": "all x.((LanceletEgg(x) & Fertile(x)) -> DevelopsSoClearWater(x))", "score": 0}
{"id": "eqasc_validation_1468", "prediction": "all x y.((LanceletEggs(x) & Fertile(x)) -> (ProducesCleanness(x) & NavigatesWater(y)))", "score": 0}
{"id": "eqasc_validation_1468", "prediction": "all x.(Fertile(x) -> DevelopsAndNavigates(x,water,water))", "score": 0}
{"id": "eqasc_validation_1468", "prediction": "all x.((LanceletEgg(x) & Fertilized(x)) -> Development(x) & NavigatesInWater(x))", "score": 0}
{"id": "eqasc_validation_1468", "prediction": "all x.(LelaneletEggs(x) -> Fertilized(x))", "score": 0}
{"id": "eqasc_validation_1468", "prediction": "all x.((LanceletEgg(x) & Feralized(x)) -> DevelopsSoInWater(x))", "score": 0}
{"id": "eqasc_validation_1468", "prediction": "all x.((LanceletEggs(x) & Fertile(x)) -> DevelopsSoWaterNavigator(x))", "score": 0}
{"id": "eqasc_validation_1468", "prediction": "all x y.((LanceletEgg(x) & Fertile(x)) -> DevelopsToNavigateInWater(y))", "score": 0}
{"id": "eqasc_validation_1469", "prediction": "all x.(Pupilhood(x) -> (SexuallyMature(y) & Human(z) & InSexualMature(y,z)))", "score": 0}
{"id": "eqasc_validation_1469", "prediction": "all x.(Pumbery(x) -> HumanProgress(x))", "score": 0}
{"id": "eqasc_validation_1469", "prediction": "all x.(Pupernicity(x) -> SexuallyMature(x))", "score": 0}
{"id": "eqasc_validation_1469", "prediction": "all x.(Puberty(x) -> ThisPeriodOfDeadness(x))", "score": 0}
{"id": "eqasc_validation_1469", "prediction": "all x.(Puperhood(x) -> (BelongsToMaturity(x) & ChangesSexuation(x)))", "score": 0}
{"id": "eqasc_validation_1469", "prediction": "all x.(Puberty(x) -> (Between(x,Humans) & SexuallyMature(x)))", "score": 0}
{"id": "eqasc_validation_1469", "prediction": "all x y z.((Pupilhood(x) & Human(y) & SexualMaturity(z)) -> (BecomesDuring(x,y) & Adult(y)))", "score": 0}
{"id": "eqasc_validation_1469", "prediction": "(Puberty(HasHumansInFemalePeriod(HumanAdult) & SexuallyMature(Human))", "score": -1}
{"id": "eqasc_validation_1469", "prediction": "all x.(Puperty(x) -> (RapidMaturity(x) & Human(x)))", "score": 0}
{"id": "eqasc_validation_1469", "prediction": "(AtPartOfPupberty(Humans) & SexuallyMature(Humans))", "score": 0}
{"id": "eqasc_validation_1469", "prediction": "all x.(Puperhood(x) -> (Becomes(x,Mature) & SexuallyMature(x)))", "score": 0}
{"id": "eqasc_validation_1469", "prediction": "(Puberty(Humans) & SexuallyMature(Humans))", "score": 0}
{"id": "eqasc_validation_1469", "prediction": "all x y.((Human(x) & Puberty(y)) -> SexuallyMature(x,y))", "score": 2}
{"id": "eqasc_validation_1469", "prediction": "all x.(Puperty(x) -> (EntertainsSexuallyMature(x) & Humans(x)))", "score": 0}
{"id": "eqasc_validation_1469", "prediction": "all x.(Puperty(x) -> BecomesSexuallyMature(x))", "score": 0}
{"id": "eqasc_validation_1469", "prediction": "all x y.((Human(x) & Puberty(y)) -> SexuallyMature(x))", "score": 1}
{"id": "eqasc_validation_1470", "prediction": "all x.(Boy(x) -> EntersPupiteriaAtAbout12Years(x))", "score": 0}
{"id": "eqasc_validation_1470", "prediction": "all x.(Boy(x) -> EntersPupilhoodAt12YearsOld(x))", "score": 0}
{"id": "eqasc_validation_1470", "prediction": "all x.(Boy(x) -> EntersPupilhoodAtAge(x,12))", "score": 0}
{"id": "eqasc_validation_1470", "prediction": "all x.(Bird(x) -> IsAbout(x,12))", "score": 0}
{"id": "eqasc_validation_1470", "prediction": "all x.((Boy(x) & Age(y)) -> EntersPumbhoodAt(x,y))", "score": 0}
{"id": "eqasc_validation_1470", "prediction": "all x.(Boy(x) -> EntersPumberyAround12YearsOfAge(x))", "score": 0}
{"id": "eqasc_validation_1470", "prediction": "all x.(Bird(x) -> EntersPubertyAtAge(x,12))", "score": 0}
{"id": "eqasc_validation_1470", "prediction": "all x.(Boy(x) -> EntersPumbhoodAtAbout12Years(x))", "score": 0}
{"id": "eqasc_validation_1470", "prediction": "all x.(Boy(x) & EntersPubertyAtAge(x,12))", "score": 0}
{"id": "eqasc_validation_1470", "prediction": "all x y.((Bird(x) & Child(y) & Age(y,12)) -> EntersPupiteria(x,y))", "score": 0}
{"id": "eqasc_validation_1470", "prediction": "all x.(Boy(x) -> EnteredPuperaAtAge(x,12))", "score": 0}
{"id": "eqasc_validation_1470", "prediction": "all x.(Bird(x) -> EntersPumberyEnoughAt12Years(x))", "score": 0}
{"id": "eqasc_validation_1470", "prediction": "all x.(Bird(x) -> (IsHarvest(x,12) & EntersPupiteria(x,12)))", "score": 0}
{"id": "eqasc_validation_1470", "prediction": "all x.(Boy(x) -> Age(x,11))", "score": 0}
{"id": "eqasc_validation_1470", "prediction": "all x y.((Bird(x) & Puberty(y) & Age(z)) -> InitialAt(x,y,z))", "score": 0}
{"id": "eqasc_validation_1470", "prediction": "all x.(Boy(x) -> (EnterPumberyAt(x,12)))", "score": 0}
{"id": "eqasc_validation_1471", "prediction": "all x.((Boy(x) & Age(x) & Age(x,122)) -> SexuallyMature(x))", "score": 0}
{"id": "eqasc_validation_1471", "prediction": "all x.((Bird(x) & 13YearsOld(x)) -> SexuallyMature(x,27))", "score": 0}
{"id": "eqasc_validation_1471", "prediction": "all x.(12Annual(x) -> Girl(x))", "score": 0}
{"id": "eqasc_validation_1471", "prediction": "all x y.((Boy(y) & Age(x,y)) -> SexuallyMaturity(y))", "score": 0}
{"id": "eqasc_validation_1471", "prediction": "all x.((Boy(x) & 12YearsOfAge(x)) -> SexuallyMature(x))", "score": 0}
{"id": "eqasc_validation_1471", "prediction": "12 years of age – boysgenuinelyMature(x))", "score": -1}
{"id": "eqasc_validation_1471", "prediction": "all x.((Bird(x) & Male(x,12)) -> SexuallyMature(x))", "score": 0}
{"id": "eqasc_validation_1471", "prediction": "all x.((Boys(x) & SexuallyMature(x)) -> Age(x,12))", "score": 0}
{"id": "eqasc_validation_1471", "prediction": "all x.(Daily(x) -> (BoysBecomesSexuallyMature(x) & Male(x) & Mankind(x) & SexuallyMature(x) & Male(x)))", "score": 0}
{"id": "eqasc_validation_1471", "prediction": "all x.((Boy(x) & Bambin(x)) -> BecomesSexuallyMature(x))", "score": 0}
{"id": "eqasc_validation_1471", "prediction": "all x.(Is12YearsOfOld(x) -> Boy(x))", "score": 0}
{"id": "eqasc_validation_1471", "prediction": "all x.((Boy(x) & 12YearsOld(x)) -> SexuallyMature(x))", "score": 0}
{"id": "eqasc_validation_1471", "prediction": "all x.(MatureBird(x) -> SexuallyMatureBird(x))", "score": 0}
{"id": "eqasc_validation_1471", "prediction": "all x.((Boy(x) & SexuallyMature(x)) -> 12YearsOfAge(x))", "score": 0}
{"id": "eqasc_validation_1471", "prediction": "all x.((Bird(x) & Age(x,12)) -> SexuallyMature(x,12))", "score": 0}
{"id": "eqasc_validation_1471", "prediction": "all x.((Boy(x) & Age(x,12)) -> SexuallyMaturized(x))", "score": 0}
{"id": "eqasc_validation_1472", "prediction": "all x.(WetDream(x) -> SignOfPuberty(x))", "score": 0}
{"id": "eqasc_validation_1472", "prediction": "all x y.((WetDance(x) & Puberty(y)) -> SignOf(x,y))", "score": 0}
{"id": "eqasc_validation_1472", "prediction": "all x.(WetSeason(x) -> SignOfPuberty(x))", "score": 0}
{"id": "eqasc_validation_1472", "prediction": "all x.((WetDespect(x) & Puberty(x)) -> SignOf(x,y))", "score": 0}
{"id": "eqasc_validation_1472", "prediction": "all x.(WetDread(x) -> PubertySign(x))", "score": 0}
{"id": "eqasc_validation_1472", "prediction": "all x.(WetDawn(x) -> SignOfPuberty(x))", "score": 0}
{"id": "eqasc_validation_1472", "prediction": "all x.(WetDream(x) -> SignOfPupilhood(x))", "score": 0}
{"id": "eqasc_validation_1472", "prediction": "all x.(WtDread(x) -> Puberty(x))", "score": 0}
{"id": "eqasc_validation_1472", "prediction": "all x y.((WetDream(x) & Puberty(y)) -> SignOf(x,y))", "score": 0}
{"id": "eqasc_validation_1472", "prediction": "all x.((Wetdream(x) & Puberty(x)) -> SignOf(x,puberty))", "score": 0}
{"id": "eqasc_validation_1472", "prediction": "all x.(WetDessert(x) -> SignOfPuperhood(x))", "score": 0}
{"id": "eqasc_validation_1473", "prediction": "all x.((WetDream(x) & SexualMaturity(y)) -> SignOf(x,y))", "score": 0}
{"id": "eqasc_validation_1473", "prediction": "all x.(WetDream(x) -> SexuallyMaturity(x))", "score": 0}
{"id": "eqasc_validation_1473", "prediction": "all x y z.((WetDance(x) & SexualMaturity(y) & SexualMaturity(z)) -> SignOf(x,y,z))", "score": 0}
{"id": "eqasc_validation_1473", "prediction": "all x.(WetDream(x) -> SignOfSexuallyMaturity(x))", "score": 0}
{"id": "eqasc_validation_1473", "prediction": "all x.((WetDawn(x) & SexualMaturity(x)) -> IsMaturity(x))", "score": 0}
{"id": "eqasc_validation_1473", "prediction": "all x.(WetDawn(x) -> SignOfSexuallyMaturity(x))", "score": 0}
{"id": "eqasc_validation_1473", "prediction": "all x.(WetD dreams(x) -> SignOfSexuallyMaturity(x))", "score": -1}
{"id": "eqasc_validation_1473", "prediction": "all x.((WetDinner(x) & SexualMaturity(x)) -> SignOfSexualMaturity(x))", "score": 0}
{"id": "eqasc_validation_1473", "prediction": "all x y z.((WetDrawing(x) & SexualMaturity(y) & SexualMaturity(z) & SignOf(x,y,z)) -> SexualMaturitySignificant(x,y,z))", "score": 0}
{"id": "eqasc_validation_1473", "prediction": "all x.(WetDream(x) -> SexualMaturity(x))", "score": 0}
{"id": "eqasc_validation_1473", "prediction": "all x.(WetDesktop(x) | SexualMaturity(x))", "score": 0}
{"id": "eqasc_validation_1473", "prediction": "all x.(WetD Dream(x) -> SexualMaturity(x))", "score": -1}
{"id": "eqasc_validation_1473", "prediction": "all x y.((Wetdream(x) & SexualMaturity(y)) -> SignOf(x,y))", "score": 0}
{"id": "eqasc_validation_1473", "prediction": "all x.(WetDream(x) & SignOfSexuallyMaturity(x))", "score": 0}
{"id": "eqasc_validation_1473", "prediction": "all x y.((WetDawn(x) & SexuallyMaturity(y)) -> SignOfMaturity(x,y))", "score": 0}
{"id": "eqasc_validation_1474", "prediction": "all x.((Human(x) & Adolescence(x)) -> SexuallyMature(x))", "score": 1}
{"id": "eqasc_validation_1474", "prediction": "all x.((Human(x) & Adolescence(x) & SexuallyMature(x)) -> BecomesDuringAdolescence(x))", "score": 0}
{"id": "eqasc_validation_1474", "prediction": "all x y.((Human(x) & Adolescence(y)) -> SexuallyMature(x,y))", "score": 1}
{"id": "eqasc_validation_1474", "prediction": "all x.((Human(x) & Adolescence(y)) -> SexuallyMature(x,y))", "score": 1}
{"id": "eqasc_validation_1474", "prediction": "all x y z.((Human(x) & Adolescence(y) & Adolescence(z)) -> SexuallyMature(x,y,z))", "score": 0}
{"id": "eqasc_validation_1474", "prediction": "(all x y.((Human(x) & ThrivesDuringAdolescence(y)) -> SexuallyMature(x,y)))", "score": 0}
{"id": "eqasc_validation_1474", "prediction": "all x.(Human(x) -> SexuallyMatureDuringAdolescence(x))", "score": 0}
{"id": "eqasc_validation_1475", "prediction": "all x.(Pumber(x) -> GrowthStopsWith(x,y))", "score": 0}
{"id": "eqasc_validation_1475", "prediction": "all x.((Growth(x) & Puberty(x)) -> UsuallyChangesGrowth(x))", "score": 0}
{"id": "eqasc_validation_1475", "prediction": "all x.(Pupilhood(x) -> GrowthStops(x))", "score": 0}
{"id": "eqasc_validation_1475", "prediction": "all x y.((Growth(x) & Puberty(y)) -> StopsWith(x,y))", "score": 0}
{"id": "eqasc_validation_1475", "prediction": "-IsGridnessSuscillatedWithPuperhood(x)", "score": 0}
{"id": "eqasc_validation_1475", "prediction": "all x.((Growth(x) & Puberty(x)) -> SettlesWith(x,pupil))", "score": 0}
{"id": "eqasc_validation_1475", "prediction": "all x.((Growth(x) & Puberty(x)) -> UsuallyFourtsWith(x,puberty))", "score": 0}
{"id": "eqasc_validation_1475", "prediction": "(GrowthWithPuperhood(Growth) -> Obsess(Growth,Growth))", "score": 0}
{"id": "eqasc_validation_1475", "prediction": "all x.(Puberty(x) -> GrowthChest(x))", "score": 0}
{"id": "eqasc_validation_1475", "prediction": "all x.(Growth(x) -> Puberty(x))", "score": 0}
{"id": "eqasc_validation_1475", "prediction": "all x.((Growth(x) & Puberty(x)) -> EndsWith(x,Puberty))", "score": 0}
{"id": "eqasc_validation_1475", "prediction": "all x.((Growth(x) & Puberty(x)) -> SoonsWith(x,Puberty))", "score": 0}
{"id": "eqasc_validation_1475", "prediction": "all x.(Growth[x] -> TypicallyPubertyFour(x))", "score": 0}
{"id": "eqasc_validation_1475", "prediction": "all x.(Growth(x) -> Portion(x))", "score": 0}
{"id": "eqasc_validation_1475", "prediction": "all x.(Growth(x) -> UsuallyCutsWithPupitery(x))", "score": 0}
{"id": "eqasc_validation_1476", "prediction": "all x.((Human(x) & SexuallyMature(x)) -> GrowthChance(x))", "score": 0}
{"id": "eqasc_validation_1476", "prediction": "All x.((Human(x) & SexuallyMature(x)) -> GrowthStops(x))", "score": -1}
{"id": "eqasc_validation_1476", "prediction": "all x.((Human(x) & SexuallyMature(x)) -> GrowthQuestions(x))", "score": 0}
{"id": "eqasc_validation_1476", "prediction": "all x.((Human(x) & SexuallyMature(x)) -> GenerallyDecreivesGrowth(x))", "score": 0}
{"id": "eqasc_validation_1476", "prediction": "all x.((Human(x) & SexuallyMature(x)) -> GrowthConceuse(x))", "score": 0}
{"id": "eqasc_validation_1476", "prediction": "all x y.((Human(x) & SexuallyMature(y)) -> GrowthEnds(x,y))", "score": 0}
{"id": "eqasc_validation_1476", "prediction": "all x.((Human(x) & SexuallyMature(x)) -> GrowthStops(x))", "score": 0}
{"id": "eqasc_validation_1476", "prediction": "all x.((Human(x) & SexuallyMature(x)) -> GrowthFurniture(x))", "score": 0}
{"id": "eqasc_validation_1476", "prediction": "all x.(GoalsToGrowth(x) -> SexuallyMature(x))", "score": 0}
{"id": "eqasc_validation_1476", "prediction": "all x y.((Human(x) & SexuallyMature(y)) -> GrowthSentiments(x,y))", "score": 0}
{"id": "eqasc_validation_1476", "prediction": "all x.((Human(x) & SexuallyMature(x)) -> StopGrowth(x))", "score": 0}
{"id": "eqasc_validation_1476", "prediction": "all x.((Human(x) & SexuallyMaintained(x)) -> GrowthEnds(x))", "score": 0}
{"id": "eqasc_validation_1476", "prediction": "all x.(GrowthOfHumans(x) -> SexuallyMature(x))", "score": 0}
{"id": "eqasc_validation_1476", "prediction": "all x y.((Human(x) & SexuallyMature(y)) -> GrowsWithin(x,y))", "score": 0}
{"id": "eqasc_validation_1476", "prediction": "all x y.((Human(x) & SexuallyMature(y)) -> GrowthFurniture(x,y))", "score": 0}
{"id": "eqasc_validation_1477", "prediction": "all x.(Breast(x) -> (DevelopsDuringPeriod(x) & HumansBecomeSexuallyMature(x)))", "score": 0}
{"id": "eqasc_validation_1477", "prediction": "the breasts (revealin-heart-of-humans(Bird))", "score": -1}
{"id": "eqasc_validation_1477", "prediction": "all x.(Breast(x) -> (EntwickedDuring(x,y) & HumansBecomeSexuallyMature(y)))", "score": 0}
{"id": "eqasc_validation_1477", "prediction": "all x y.((Breast(x) & Human(y) & SexuallyMature(z)) -> DevelopsDuring(x,y,z))", "score": 0}
{"id": "eqasc_validation_1477", "prediction": "all x y.((Breast(x) & Human(y) & SexuallyMature(x)) -> DevelopsDuring(x,y))", "score": 0}
{"id": "eqasc_validation_1477", "prediction": "all x.((Breast(x) & Humans(y)) -> (GeniusMature(x,y) & SexuallyMature(y)))", "score": 0}
{"id": "eqasc_validation_1477", "prediction": "all x y.((Breast(x) & Human(y) & SexuallyMature(x,y)) -> AppearsFromTheTimeOfMature(x,y))", "score": 0}
{"id": "eqasc_validation_1477", "prediction": "all x y.((Brust(x) & Human(y) & SexuallyMature(y,x)) -> DevelopsDuring(x,y))", "score": 0}
{"id": "eqasc_validation_1477", "prediction": "all x y.((Breast(x) & Human(y)) -> ComesToSexuallyMature(x,y))", "score": 0}
{"id": "eqasc_validation_1477", "prediction": "all x y.((Breast(x) & Human(y) & SexuallyMature(y)) -> DevelopsDuring(x,y))", "score": 0}
{"id": "eqasc_validation_1477", "prediction": "all x y.((Breast(x) & Human(y)) -> SexuallyMature(x,y))", "score": 0}
{"id": "eqasc_validation_1477", "prediction": "all x.((Breast(x) & HumanMature(x)) -> DevelopsDuringPhase(x))", "score": 0}
{"id": "eqasc_validation_1477", "prediction": "all x y.((Brust(x) & HumanGeneration(y) & SexuallyMature(z)) -> DevelopsDuring(x,y,z))", "score": 0}
{"id": "eqasc_validation_1477", "prediction": "all x y.((Breast(x) & Human(y) & SexuallyMature(x,y)) -> DevelopsDuring(x,y))", "score": 0}
{"id": "eqasc_validation_1477", "prediction": "all x y z.((Breast(x) & Human(y) & SexuallyMature(z)) -> DevelopsDuring(x,y,z))", "score": 0}
{"id": "eqasc_validation_1478", "prediction": "all x y.((Breast(x) & Human(y)) -> SexuallyMature(x,y))", "score": 0}
{"id": "eqasc_validation_1478", "prediction": "all x.((Breast(x) & HumanAcquiresSexuallyMature(x)) -> Develops(x))", "score": 0}
{"id": "eqasc_validation_1478", "prediction": "all x.((Human(x) & SexuallyMature(x)) -> Breast(x))", "score": 0}
{"id": "eqasc_validation_1478", "prediction": "all x.(Breast(x) -> (BecomesSexuallyMature(x) & Human(x)))", "score": 0}
{"id": "eqasc_validation_1478", "prediction": "all x.(Breast(x) -> (BecomesSexuallyMature(x) & Breasts(x)))", "score": 0}
{"id": "eqasc_validation_1478", "prediction": "all x y.((Breast(x) & Human(y) & SexuallyMature(y)) -> Develops(x,y))", "score": 0}
{"id": "eqasc_validation_1478", "prediction": "all x.((Break(x) & Human(x) & SexuallyMature(x)) -> Develops(x))", "score": 0}
{"id": "eqasc_validation_1478", "prediction": "all x.((Breast(x) & Human(y) & SexuallyMature(x,y)) -> Develops(x,y))", "score": 0}
{"id": "eqasc_validation_1478", "prediction": "all x.((Brust(x) & Human(y)) -> SexuallyMature(x))", "score": 0}
{"id": "eqasc_validation_1478", "prediction": "all x.((Breast(x) & Human(y) & SexuallyMature(x)) -> Develops(x,y))", "score": 0}
{"id": "eqasc_validation_1478", "prediction": "all x.((Breast(x) & Human(y)) -> SexuallyMature(x))", "score": 0}
{"id": "eqasc_validation_1479", "prediction": "all x.((Adolescent(x) & BeforePumbery(x)) -> HighestNutritionalDemand(x))", "score": 0}
{"id": "eqasc_validation_1479", "prediction": "all x.((Adolescent(x) & BeforePuberty(x)) -> HighestNutritionalDemandBetweenInfancy(x))", "score": 0}
{"id": "eqasc_validation_1479", "prediction": "all x.((Adolescent(x) & PastPupidge(x)) -> HighestNutritionalDemand(x))", "score": 0}
{"id": "eqasc_validation_1479", "prediction": "all x.((Adolescent(x) & UntilPuberty(x)) -> HighestNutritionalDemand(x))", "score": 0}
{"id": "eqasc_validation_1479", "prediction": "all x y.((Adolescent(x) & INFancy(y)) -> HighestNutritionalDemand(x,y))", "score": 0}
{"id": "eqasc_validation_1479", "prediction": "all x.(Adolescent(x) -> (EstablishedNutritionalDemandAtInfancy(x) & -> HighestSatisfactionYoungInfancy(x)))", "score": -1}
{"id": "eqasc_validation_1479", "prediction": "all x.((Adolescent(x) & AfterPuberty(x)) -> HighestNutritionalDemandSinceInfancy(x))", "score": 0}
{"id": "eqasc_validation_1479", "prediction": "all x.(Adolescent(x) & ExperiencesHighestNutritionalDemand(x))", "score": 0}
{"id": "eqasc_validation_1479", "prediction": "all x y.((Adolescent(x) & Puberty(y)) -> HighestNutritionalDemand(x,y))", "score": 0}
{"id": "eqasc_validation_1479", "prediction": "all x y.((Adolescent(x) & -Pupilhood(y)) -> HighestNutritionalDemand(x,y))", "score": 0}
{"id": "eqasc_validation_1479", "prediction": "all x.((Adolescent(x) & PreciousDemand(x)) -> HighestNaturalDemand(x))", "score": 0}
{"id": "eqasc_validation_1479", "prediction": "(ExperiencesHighestNutritionalDemand(adolescence) & -BeforePuberty(adolescence))", "score": 0}
{"id": "eqasc_validation_1479", "prediction": "all x.((Adolescent(x) & HeadsHighestNutritionalDemand(x,infancy)) -> BeforePuberty(x))", "score": 0}
{"id": "eqasc_validation_1479", "prediction": "all x.(Adolescent(x) -> (EfficientSupport(x,Infancy) & HighestNutritionalDemand(x)))", "score": 0}
{"id": "eqasc_validation_1479", "prediction": "all x.(Adolescent(x) -> HighestNutritionalDemand(x))", "score": 0}
{"id": "eqasc_validation_1479", "prediction": "all x y.((Adolescent(x) & Puberty(y)) -> (HighestNutritionalDemand(x,y) & SinceInfancy(x,y)))", "score": 0}
{"id": "eqasc_validation_1480", "prediction": "all x y.((Adolescent(x) & SexualMaturity(y)) -> HighestNutritionalDischargeHas(x,y))", "score": 0}
{"id": "eqasc_validation_1480", "prediction": "all x y.((Adolescent(x) & SexualMaturity(y)) -> HighestNutritionalDemand(x,y))", "score": 0}
{"id": "eqasc_validation_1480", "prediction": "all x.((Adolescent(x) & SexualMaturity(x)) -> HasHighestNutritionalDemand(x))", "score": 0}
{"id": "eqasc_validation_1480", "prediction": "all x.((Adolescent(x) & HighestNutritionalDemand(x) & Infancy(x)) -> SexualMaturityMaturity(x))", "score": 0}
{"id": "eqasc_validation_1480", "prediction": "all x y.((Adolescent(x) & SexualMaturity(y)) -> HasHighestNutritionalDemandForInfancy(x,y))", "score": 0}
{"id": "eqasc_validation_1480", "prediction": "all x.((Adolescent(x) & ActivatesHighestNutritionalDemand(x)) -> SexualMaturity(x))", "score": 0}
{"id": "eqasc_validation_1480", "prediction": "all x.((Adolescent(x) & SexualMaturity(x)) -> (HighestNutritionalDemand(x) & Infancy(x)))", "score": 0}
{"id": "eqasc_validation_1480", "prediction": "(all x.(Adolescent(x) -> HighestNutrientDemand(x)))", "score": 0}
{"id": "eqasc_validation_1480", "prediction": "all x.((Adolescent(x) & SexualMaturity(x)) -> (HighestNutritionalDemand(x) & Infancy(x) & Infancy(x)))", "score": 0}
{"id": "eqasc_validation_1480", "prediction": "all x y.((Adolescent(x) & SexualMaturity(y)) -> HighestNutrientDemand(x,y))", "score": 0}
{"id": "eqasc_validation_1480", "prediction": "all x y z.((Adolescent(x) & SexualMaturity(y) & -Infancy(z)) -> HealthiestNutritionalDemand(x,y,z))", "score": 0}
{"id": "eqasc_validation_1480", "prediction": "all x y.((Adolescent(x) & SexualMature(y)) -> HighestNutritionalDemand(x,y))", "score": 0}
{"id": "eqasc_validation_1480", "prediction": "all x.((Adolescent(x) & SexualMaturity(x)) -> HighestNutritionalDemandRecentFromInfancy(x))", "score": 0}
{"id": "eqasc_validation_1480", "prediction": "all x y.((Adolescent(x) & SexualMaturity(y)) -> (HighestNutritionalDemand(x,y) & InfancySiebenth(y)))", "score": 0}
{"id": "eqasc_validation_1480", "prediction": "all x y z.((Adolescent(x) & SexualMaturity(y) & HighEstimateNutritionalDemand(z)) -> HighestSecondaryDemand(x,z))", "score": 0}
{"id": "eqasc_validation_1480", "prediction": "all x y.((Adolescent(x) & SexualMaturity(y)) -> (HighestNutritionalDemandFromInfancy(x,y)))", "score": 0}
{"id": "eqasc_validation_1481", "prediction": "all x.(CircleGraph(x) -> DisplaysPercents(x))", "score": 0}
{"id": "eqasc_validation_1481", "prediction": "all x y z.((CircleGraph(x) & Percent(y) & Percent(z)) -> Displays(x,y,z))", "score": 0}
{"id": "eqasc_validation_1481", "prediction": "all x.(CircleGraph(x) -> (DisplaysPercents(x) & DisplaysPercents(x)))", "score": 0}
{"id": "eqasc_validation_1481", "prediction": "all x.(DrawsCircleGraph(x) -> DisplaysPercents(x))", "score": 0}
{"id": "eqasc_validation_1481", "prediction": "all x.((CircleGraph(x) & DisplaysPercents(x)) -> CanBeUsedToDisplayPercents(x))", "score": 0}
{"id": "eqasc_validation_1481", "prediction": "all x.(CircleGraph(x) -> CanDisplayPercents(x))", "score": 0}
{"id": "eqasc_validation_1481", "prediction": "all x.(CircleGraph(x) -> (DisplaysPercents(x) & CalculatesPercents(x)))", "score": 0}
{"id": "eqasc_validation_1481", "prediction": "all x y z.((CircleGraph(x) & Percent(y) & Performance(z) & DisplayPercents(x,y,z)) -> CanBeUsedToDisplayPercents(x))", "score": 0}
{"id": "eqasc_validation_1481", "prediction": "all x.(CircleGraph(x) -> CanBeUsedToDisplayPercents(x))", "score": 0}
{"id": "eqasc_validation_1481", "prediction": "all x y z.((CircleGraph(x) & Percent(y) & Graph(z)) -> DisplaysPercents(x,y,z))", "score": 0}
{"id": "eqasc_validation_1481", "prediction": "all x.(CircleGraph(x) -> WillDisplayPercents(x))", "score": 0}
{"id": "eqasc_validation_1481", "prediction": "all x.(CircleGraph(x) -> DisplayPercents(x))", "score": 0}
{"id": "eqasc_validation_1481", "prediction": "all x y z.((CircleGraph(x) & Percent(y) & Percent(z)) -> DisplaysGraph(x,y,z))", "score": 0}
{"id": "eqasc_validation_1481", "prediction": "all x y.((CircleGraph(x) & CenterGraph(y)) -> CanDisplayPercents(x,y))", "score": 0}
{"id": "eqasc_validation_1481", "prediction": "all x.(CircleGraph(x) -> UsedToDisplayPercents(x))", "score": 0}
{"id": "eqasc_validation_1482", "prediction": "all x.(Fraction(x) -> (ExpressedAsPercent(x)))", "score": 0}
{"id": "eqasc_validation_1482", "prediction": "all x y z.((Fraction(x) & Percent(y) & (Percent(z) | Percent(z))) -> -> Expresses(x,y))", "score": -1}
{"id": "eqasc_validation_1482", "prediction": "all x.(Fraction(x) -> (ExpressedAsPercent(x) | ExpressedByPercent(x)))", "score": 0}
{"id": "eqasc_validation_1482", "prediction": "all x y z.((Fraction(x) & Percent(y) & Term(z)) -> ExpressesAs(x,y,z))", "score": 0}
{"id": "eqasc_validation_1482", "prediction": "all x.(Fraction(x) -> (ExpressedAsPercent(x) & Often(x)))", "score": 0}
{"id": "eqasc_validation_1482", "prediction": "all x.(Fraction(x) -> (ExpressedAsPercent(x) | ExpressedAsPercent(x)))", "score": 0}
{"id": "eqasc_validation_1482", "prediction": "all x.(Fraction(x) -> (ExpressedAsPercent(x) & -ExpressedAsPercent(x)))", "score": 0}
{"id": "eqasc_validation_1482", "prediction": "all x.(Fraction(x) -> (ExpressedAsPercent(x) & ExpressedByPercent(x)))", "score": 0}
{"id": "eqasc_validation_1482", "prediction": "all x.(Fraction(x) -> Object(x))", "score": 0}
{"id": "eqasc_validation_1482", "prediction": "all x y z.((Fraction(x) & Percent(y)) -> Expression(x,y))", "score": 0}
{"id": "eqasc_validation_1482", "prediction": "all x.(Fraction(x) -> (ExpressedAsPercent(x) & OtherTimes(x)))", "score": 0}
{"id": "eqasc_validation_1482", "prediction": "all x y.((Fraction(x,y) & Percent(y)) -> Expression(x,y))", "score": 0}
{"id": "eqasc_validation_1482", "prediction": "all x.(Fraction(x) -> ExpressedAsPercent(x))", "score": 0}
{"id": "eqasc_validation_1482", "prediction": "all x.(Fraction(x) -> (Percent(x) | SometimesExposesAsPercent(x)))", "score": 0}
{"id": "eqasc_validation_1483", "prediction": "all x y z.((CircleGraph(x) & Fraction(y) & Fraction(z) & Display(x,z)) -> CanBeUsedToDisplay(x,y))", "score": 0}
{"id": "eqasc_validation_1483", "prediction": "all x y.((CircleGraph(x) & Fraction(y)) -> CanBeUsedToDisplay(x,y))", "score": 0}
{"id": "eqasc_validation_1483", "prediction": "all x.(CircleGraph(x) -> CanDisplayFractions(x))", "score": 0}
{"id": "eqasc_validation_1483", "prediction": "all x y.((CircleGraph(x) & Fraction(y)) -> (DisplaysIn(x,y) & DisplaysIn(x,y)))", "score": 0}
{"id": "eqasc_validation_1483", "prediction": "all x y z.((CircleGraph(x) & Fractions(y) & Fractions(z)) -> DisplaysStrings(x,y)))", "score": -1}
{"id": "eqasc_validation_1483", "prediction": "all x y.((CirculeGraph(x) & Fractions(y)) -> UsedToDisplay(x,y))", "score": 0}
{"id": "eqasc_validation_1483", "prediction": "all x.(CircleGraph(x) -> DisplaysFractions(x))", "score": 0}
{"id": "eqasc_validation_1483", "prediction": "all x.(CircleGraph(x) -> CanBeUsedToDisplayFractions(x))", "score": 0}
{"id": "eqasc_validation_1483", "prediction": "all x y.((CircleGraph(x) & Fraction(y)) -> CanDisplay(x,y))", "score": 0}
{"id": "eqasc_validation_1483", "prediction": "all x y.((CircleGraph(x) & Fractions(y)) -> CanDisplay(x,y))", "score": 0}
{"id": "eqasc_validation_1483", "prediction": "all x y z.((CircleGraph(x) & Fractions(y) & Time(z)) -> DisplayFrequencies(x,y,z))", "score": 0}
{"id": "eqasc_validation_1483", "prediction": "all x y z.((CircleGraph(x) & Fraction(y) & Fraction(z)) -> (Displays(x,y,z) & Displays(x,y)))", "score": 0}
{"id": "eqasc_validation_1483", "prediction": "all x.(CircleGraph(x) -> (CanDisplayFractions(x) & UseFractionsGraph(x)))", "score": 0}
{"id": "eqasc_validation_1484", "prediction": "all x.(PieChart(x) -> (ShowsTheConcentrationsOrPartsOfWhole(x) & EspeciallyUsedFor(x)))", "score": 0}
{"id": "eqasc_validation_1484", "prediction": "all x y.((PieChart(x) & PieChart(y)) -> (ShowsPotentialsOrPartsOf(y)))", "score": 0}
{"id": "eqasc_validation_1484", "prediction": "all x.(PieChart(x) -> (ShowsPieces(x) | ShowsPartsOfWhole(x)))", "score": 0}
{"id": "eqasc_validation_1484", "prediction": "all x.(PieChart(x) -> (HasPencil(x) | HasPartsOfWall(x)) | DisplaysProportions(x)))", "score": -1}
{"id": "eqasc_validation_1484", "prediction": "all x.(PieChart(x) -> (PieceChart(x) & ShowsPercentageOrPartsOfWhole(x)))", "score": 0}
{"id": "eqasc_validation_1484", "prediction": "all x.(PieChart(x) -> (PreciselyShowsPartsOrPercentages(x)))", "score": 0}
{"id": "eqasc_validation_1484", "prediction": "all x.(PieChart(x) -> (ShowsProportions(x) | ShowsParts(x)))", "score": 0}
{"id": "eqasc_validation_1484", "prediction": "all x.(PieChart(x) -> (Pieces(x) | Parts(x)))", "score": 0}
{"id": "eqasc_validation_1484", "prediction": "all x y.(PieChart(x) -> (Pie Chart(y) & (ShowsPercents(y) | ShowsParts(y))))", "score": -1}
{"id": "eqasc_validation_1484", "prediction": "all x y.((PieChart(x) & Part(y)) -> (ShowsPotentials(x,y) | ShowsParts(x,y)))", "score": 0}
{"id": "eqasc_validation_1484", "prediction": "all x.(Graphics(x) -> (ShowsPercentageOrPartsOfWhole(x)))", "score": 0}
{"id": "eqasc_validation_1484", "prediction": "all x y.((PieChart(x) & PieChart(y)) -> (ShowsPairsOrPartsOfWhole(y,x)))", "score": 0}
{"id": "eqasc_validation_1484", "prediction": "all x.(PieChart(x) -> (ShowProportions(x) | ShowPartsOfWord(x)))", "score": 0}
{"id": "eqasc_validation_1484", "prediction": "all x.(PieChart(x) -> (SharePairs(x) | ShowPartsOfWhich(x)))", "score": 0}
{"id": "eqasc_validation_1484", "prediction": "all x y.((PieChart(x) & PieChart(y)) -> (ShowsPoorPercentsOrParts(y)))", "score": 0}
{"id": "eqasc_validation_1484", "prediction": "all x.((PieChart(x) & UsesPieceChart(x)) -> ShowsProportionsOrPartsOfWhole(x))", "score": 0}
{"id": "eqasc_validation_1485", "prediction": "all x.(PieChart(x) -> CircleGraph(x))", "score": 0}
{"id": "eqasc_validation_1485", "prediction": "all x.(PieChart(x) -> (CircleGraph(x) & CircleGraph(x)))", "score": 0}
{"id": "eqasc_validation_1485", "prediction": "all x y.((PieChart(x) & CircleGraph(y)) -> RectangleGraph(x))", "score": 0}
{"id": "eqasc_validation_1485", "prediction": "(CircleGraph(PieCharts) -> CircleGraph(PieCharts))", "score": 0}
{"id": "eqasc_validation_1485", "prediction": "all x.(PieChart(x) -> (SkyGraph(x) & CircleGraph(x)))", "score": 0}
{"id": "eqasc_validation_1486", "prediction": "all x.(Percent(x) -> DecimalFraction(x))", "score": 0}
{"id": "eqasc_validation_1486", "prediction": "all x.(Percent(x) -> (DecimalFraction(x) & -DecimalFraction(x)))", "score": 0}
{"id": "eqasc_validation_1486", "prediction": "all x.(Percent(x) -> DefinimalFruit(x))", "score": 0}
{"id": "eqasc_validation_1487", "prediction": "all x.(CircleGraph(x) -> (CanShowDecimalFractions(x)))", "score": 0}
{"id": "eqasc_validation_1487", "prediction": "all x y.((CircleGraph(x) & DecimalFraction(y)) -> Shows(x,y))", "score": 0}
{"id": "eqasc_validation_1487", "prediction": "all x.(CircleGraph(x) -> ShowDecimmalFractions(x))", "score": 0}
{"id": "eqasc_validation_1487", "prediction": "all x.(CircleGraph(x) -> (CanShowDecimalFractions(x) & ShowDecimalFractions(x)))", "score": 0}
{"id": "eqasc_validation_1487", "prediction": "all x.((CircleGraph(x) & DecimalFractures(x)) -> Shows(x,CircleGraph))", "score": 0}
{"id": "eqasc_validation_1487", "prediction": "all x y z.((CircleGraph(x) & DecimalFraction(y) & DecimalFraction(z)) -> ShowsIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_1487", "prediction": "all x.(CircleGraph(x) -> ShowDecimalFractions(x))", "score": 0}
{"id": "eqasc_validation_1487", "prediction": "all x.(CircleGraph(x) -> (DispimalFraction(x) & -DecimalFraction(x)))", "score": 0}
{"id": "eqasc_validation_1487", "prediction": "all x.(CircleGraph(x) -> (ShowDecimalFractions(x) & ShowDecimalFractions(x)))", "score": 0}
{"id": "eqasc_validation_1487", "prediction": "all x.(CircleGraph(x) -> (DecimalFraction(x) & SnailFraction(x)))", "score": 0}
{"id": "eqasc_validation_1487", "prediction": "all x y.((CircleGraph(x) & DecimalFraction(y)) -> CanShow(x,y))", "score": 0}
{"id": "eqasc_validation_1488", "prediction": "all x.(DataValue(x) -> CanBeConvertedToPercentValue(x))", "score": 0}
{"id": "eqasc_validation_1488", "prediction": "all x.(DataValue(x) -> (ConvertToPercentValue(x)))", "score": 0}
{"id": "eqasc_validation_1488", "prediction": "all x.(DataValue(x) -> ConvertToPercentValue(x))", "score": 0}
{"id": "eqasc_validation_1488", "prediction": "all x.(DataValue(x) -> (CentricValue(x) | ConstantValue(x)))", "score": 0}
{"id": "eqasc_validation_1488", "prediction": "all x.(DataValue(x) -> ConvertedToPercentValue(x))", "score": 0}
{"id": "eqasc_validation_1488", "prediction": "all x.(DataValue(x) -> ConvertibleToPercentValue(x))", "score": 0}
{"id": "eqasc_validation_1488", "prediction": "(ConvertableToPercentValues(DataValues))", "score": 0}
{"id": "eqasc_validation_1488", "prediction": "all x.((DataValue(x) & ConvertableToPercentValue(x)) -> ConvertibleToPercentValue(x))", "score": 0}
{"id": "eqasc_validation_1488", "prediction": "all x.(DataValue(x) -> ConvertableToPercentValue(x))", "score": 0}
{"id": "eqasc_validation_1488", "prediction": "all x.(DataValue(x) -> CanBeConvertibleToPercentValue(x))", "score": 0}
{"id": "eqasc_validation_1489", "prediction": "all x.(CircleGraph(x) -> CanDisplayDataValues(x))", "score": 0}
{"id": "eqasc_validation_1489", "prediction": "all x.(CircleGraph(x) -> DisplayDataValues(x))", "score": 0}
{"id": "eqasc_validation_1489", "prediction": "all x.(CircleGraph(x) -> DisplaysDataValues(x))", "score": 0}
{"id": "eqasc_validation_1489", "prediction": "all x.(CircleGraph(x) -> CanBeUsedToDisplayDataValues(x))", "score": 0}
{"id": "eqasc_validation_1489", "prediction": "all x y.((CircleGraph(x) & DataValue(y)) -> CanDisplay(x,y))", "score": 0}
{"id": "eqasc_validation_1490", "prediction": "all x y.((CircleGraph(x) | PieGraph(x)) -> (UsesCircle(x,y) & DividedIntoSections(x,y)))", "score": 0}
{"id": "eqasc_validation_1490", "prediction": "all x.(CircleGraph(x) -> (UsesCircleSection(x) & ShowData(x)))", "score": 0}
{"id": "eqasc_validation_1490", "prediction": "all x y.((CircleGraph(x) | PieGraph(y)) -> UsesDiagonal(x,y))", "score": 0}
{"id": "eqasc_validation_1490", "prediction": "all x.((CircleGraph(x) | PieGraph(x)) -> ShowsData(x,Circle),Sections(x))", "score": -1}
{"id": "eqasc_validation_1490", "prediction": "all x.(CircleGraph(x) -> ((UsesCircle(x) & DividedIntoSections(x)) & ShowsData(x)))", "score": 0}
{"id": "eqasc_validation_1490", "prediction": "all x y.((CircleGraph(x) | PieGraph(y)) -> (UsesCircle(x) & DividedIntoSections(x)))", "score": 0}
{"id": "eqasc_validation_1490", "prediction": "all x.(CircleGraph(x) -> UtilizesCircle(x))", "score": 0}
{"id": "eqasc_validation_1490", "prediction": "all x.(CircleGraph(x) -> (CircleGraph(x) | PieGraph(x)) & UsesCircle(x) & DividedIntoSections(x) & ShowsData(x)))", "score": -1}
{"id": "eqasc_validation_1490", "prediction": "all x.((CircleGraph(x) | PieGraph(x)) -> (UsesCircle(x) & DividedIntoSections(x) & ShowsData(x)))", "score": 0}
{"id": "eqasc_validation_1490", "prediction": "all x y.((CircleGraph(x) | PieGraph(y)) -> (UsesCircle(x,y) & DividedIntoSections(x,y)))", "score": 0}
{"id": "eqasc_validation_1490", "prediction": "all x y.(CircleGraph(x) -> (CircleGraph(y) | PieGraph(y)) & UsesCircleToShowData(x,y)))", "score": -1}
{"id": "eqasc_validation_1490", "prediction": "all x.(CircleGraph(x) -> ((CircleGraph(x) | PieGraph(x)) & DividedIntoSections(x))))", "score": -1}
{"id": "eqasc_validation_1490", "prediction": "all x y.((CircleGraph(x) | PieGraph(y)) -> (UsesCircle(x,y) & DividedIntoSections(x) & ShowsData(x)))", "score": 0}
{"id": "eqasc_validation_1490", "prediction": "all x.(CircleGraph(x) -> (CircleGraph(x) | PieGraph(x)) & usesCircle(x) & DividedIntoSections(x)))", "score": -1}
{"id": "eqasc_validation_1490", "prediction": "all x.(CircleGraph(x) -> (CircleGraph(x) | PieGraph(x)) & UsesCircleAndSections(x) & ShowData(x)))", "score": -1}
{"id": "eqasc_validation_1490", "prediction": "all x.(CircleGraph(x) -> ((Circle(x) | PieGraph(x)) & UsesCircle(x) & DividedIntoSections(x)))", "score": 0}
{"id": "eqasc_validation_1491", "prediction": "all x.(Percentage(x) -> ShowData(x))", "score": 0}
{"id": "eqasc_validation_1491", "prediction": "all x.(Potential(x) -> ShowData(x))", "score": 0}
{"id": "eqasc_validation_1491", "prediction": "all x.(Percentage(x) -> ShowData(y))", "score": 0}
{"id": "eqasc_validation_1491", "prediction": "all x.(Percentage(x) -> UsedToShowData(x))", "score": 0}
{"id": "eqasc_validation_1491", "prediction": "all x.(Percentage(x) -> CanShowData(x))", "score": 0}
{"id": "eqasc_validation_1491", "prediction": "all x y.((Percentage(x) & Data(y)) -> CanBeShownToShow(x,y))", "score": 0}
{"id": "eqasc_validation_1491", "prediction": "all x.((Potentials(x) & Data(x)) -> Shows(x,y))", "score": 0}
{"id": "eqasc_validation_1491", "prediction": "all x y.((Procentage(x) & Data(y)) -> ShowData(x,y))", "score": 0}
{"id": "eqasc_validation_1491", "prediction": "all x.(Precise(x) -> ShowData(x))", "score": 0}
{"id": "eqasc_validation_1491", "prediction": "all x.(Percentage(x) -> ShowsData(x))", "score": 0}
{"id": "eqasc_validation_1491", "prediction": "all x y.((Percentage(x) & Data(y)) -> CanShow(x,y))", "score": 0}
{"id": "eqasc_validation_1492", "prediction": "all x y.((CircleGraph(x) & PipChart(y)) -> MakesOfDataInList(x,y))", "score": 0}
{"id": "eqasc_validation_1492", "prediction": "all x y.((CircleGraph(x) & PipChart(y)) -> MakesOfData(x,y))", "score": 0}
{"id": "eqasc_validation_1492", "prediction": "all x.((CircleGraph(x) & PieChart(x)) -> ProducesDataInList(x))", "score": 0}
{"id": "eqasc_validation_1492", "prediction": "all x y z.((CircleGraph(x) & PieChart(y) & Data(z)) -> MadeOfListWithData(x,y,z))", "score": 0}
{"id": "eqasc_validation_1492", "prediction": "all x.((CircleGraph(x) & PieChart(x)) -> DataInList(x))", "score": 0}
{"id": "eqasc_validation_1492", "prediction": "all x.(MakesCircleGraph(x) -> (PieChart(x) & ProvidesDataInList(x)))", "score": 0}
{"id": "eqasc_validation_1492", "prediction": "all x y.((CircleGraph(x) & PieChart(y)) -> Makes(x,y))", "score": 0}
{"id": "eqasc_validation_1492", "prediction": "all x.((CircleGraph(x) & PieChart(x)) -> ProducesData(x))", "score": 0}
{"id": "eqasc_validation_1492", "prediction": "all x.(CircleGraph(x) -> (MakesFieldChart(x) & DataInList(x)))", "score": 0}
{"id": "eqasc_validation_1492", "prediction": "all x.(MakesCircleGraph(x) -> (PieChart(x) & DataInList(x)))", "score": 0}
{"id": "eqasc_validation_1492", "prediction": "all x.((CircleGraph(x) & PieChart(x)) -> MakesData(x,y))", "score": 0}
{"id": "eqasc_validation_1492", "prediction": "all x y.((CircleGraph(x) & List(y)) -> (MakesDeliveryOfData(x,y) & AlsoKnownAsPieChart(x,y)))", "score": 0}
{"id": "eqasc_validation_1492", "prediction": "all x.((CircleGraph(x) & PieChart(x)) -> MakesOfData(x))", "score": 0}
{"id": "eqasc_validation_1492", "prediction": "all x.((CircleGraph(x) & PieChart(x)) -> OfDataInList(x))", "score": 0}
{"id": "eqasc_validation_1492", "prediction": "all x.((CircleGraph(x) & PieChart(x)) -> MakesOfData(x,List))", "score": 0}
{"id": "eqasc_validation_1492", "prediction": "all x.(CircleGraph(x) -> (PieChart(x) & UsesData(x)))", "score": 0}
{"id": "eqasc_validation_1493", "prediction": "all x.(PieChart(x) -> DisplaysPercents(x))", "score": 0}
{"id": "eqasc_validation_1493", "prediction": "all x y.((PieChart(x) & Percent(y)) -> UsesToDisplayPercents(x,y))", "score": 0}
{"id": "eqasc_validation_1493", "prediction": "all x y.((PieChart(x) & ParcentData(y)) -> CanDisplay(x,y))", "score": 0}
{"id": "eqasc_validation_1493", "prediction": "all x y.((PieChart(x) & Percent(y) & DisplaysPencilCountries(x,y)) -> HasPencilCount(x,y))", "score": 0}
{"id": "eqasc_validation_1493", "prediction": "all x y.((PieChart(x) & ThePieceChart(y)) -> CanDisplayPercents(x,y))", "score": 0}
{"id": "eqasc_validation_1493", "prediction": "all x y.((PieChart(x) & DisplayPurcents(y)) -> CanBeUsedToDisplayPercents(x,y))", "score": 0}
{"id": "eqasc_validation_1493", "prediction": "all x.((PieChart(x) & DisplayPercents(x)) -> UsefulToDisplayPercents(x))", "score": 0}
{"id": "eqasc_validation_1493", "prediction": "all x.(PieChart(x) -> (DisplaysPercents(x) & DisplaysPercents(x)))", "score": 0}
{"id": "eqasc_validation_1493", "prediction": "all x y.((PieChart(x) & Percent(y)) -> CanDisplayPercent(x,y))", "score": 0}
{"id": "eqasc_validation_1493", "prediction": "all x y.((PieChart(x) & Citable(y)) -> DisplaysPercents(x,y))", "score": 0}
{"id": "eqasc_validation_1493", "prediction": "all x y.((PieChart(x) & Pear(y)) -> DisplaysPercents(x,y))", "score": 0}
{"id": "eqasc_validation_1493", "prediction": "all x y.((PieChart(x) & Percent(y) & Displays(x,y)) -> CanBeUsedToDisplay(x,y))", "score": 0}
{"id": "eqasc_validation_1493", "prediction": "all x y.((PieChart(x) & Percent(y) & UsedToDisplayPercents(x,y)) -> Displays(x,y))", "score": 0}
{"id": "eqasc_validation_1494", "prediction": "all x.(CircleGraph(x) -> CanDisplayDecimalFractions(x))", "score": 0}
{"id": "eqasc_validation_1494", "prediction": "all x.(CircleGraph(x) -> DisplaysDecimalFractions(x))", "score": 0}
{"id": "eqasc_validation_1494", "prediction": "all x y z.((CircleGraph(x) & DecimalFraction(y) & DecimalFraction(z)) -> CanBeDisplayed(x,y,z))", "score": 0}
{"id": "eqasc_validation_1494", "prediction": "all x y.((CircleGraph(x) & DecimalFraction(y)) -> Display(y,x))", "score": 0}
{"id": "eqasc_validation_1494", "prediction": "all x y.((CircleGraph(x) & DecimalFraction(y)) -> Displays(x,y))", "score": 0}
{"id": "eqasc_validation_1494", "prediction": "all x y.((CircleGraph(x) & DecimalFraction(y)) -> DisplaysFrom(x,y))", "score": 0}
{"id": "eqasc_validation_1494", "prediction": "all x.(CircleGraph(x) -> CanFruitToDisplayDecimalFractions(x))", "score": 0}
{"id": "eqasc_validation_1494", "prediction": "all x y z.((CircleGraph(x) & DecimalFraction(y) & DecimalFraction(z)) -> Displays(x,y,z))", "score": 0}
{"id": "eqasc_validation_1495", "prediction": "all x y.((CircleGraph(x) & DecimalFractions(y)) -> CanDisplay(x,y))", "score": 0}
{"id": "eqasc_validation_1495", "prediction": "all x y z.((CircleGraph(x) & DecimalFraction(y,z)) -> CanDisplay(x,y,z))", "score": 0}
{"id": "eqasc_validation_1495", "prediction": "all x.(CircleGraph(x) -> DisplayDecimalFractions(x))", "score": 0}
{"id": "eqasc_validation_1495", "prediction": "all x.(CircleGraph(x) -> (DisplaysDecimmalFractions(x) & HasDecimalFractions(x)))", "score": 0}
{"id": "eqasc_validation_1495", "prediction": "all x y.((CircleGraph(x) & DecimalFraction(y)) -> CanBeUsedToDisplay(x,y))", "score": 0}
{"id": "eqasc_validation_1495", "prediction": "all x y.((CircleGraph(x) & DecimalFractions(y)) -> Displays(x,y))", "score": 0}
{"id": "eqasc_validation_1495", "prediction": "all x.(CircleGraph(x) -> DisplaysDecimalFractions(x))", "score": 0}
{"id": "eqasc_validation_1495", "prediction": "all x.(CircleGraph(x) -> (DisplaysDecimalFractions(x) & DisplaysDecimalFractions(x)))", "score": 0}
{"id": "eqasc_validation_1495", "prediction": "all x.((CircleGraph(x) & DisplayDecimalFractions(x)) -> UseToDisplayDecimalFractions(x))", "score": 0}
{"id": "eqasc_validation_1495", "prediction": "all x y z.((CircleGraph(x) & DecimalFruits(y) & DecimalFruits(z)) -> DisplaysDecimalFractures(x,y,z))", "score": 0}
{"id": "eqasc_validation_1495", "prediction": "all x y z.((CircleGraph(x) & DecimalFraction(y) & Table(z)) -> Displays(x,y,z))", "score": 0}
{"id": "eqasc_validation_1495", "prediction": "all x.(CircleGraph(x) -> CanDisplayDecimalFractions(x))", "score": 0}
{"id": "eqasc_validation_1495", "prediction": "all x.((CircleGraph(x) & DecimalFractions(x)) -> Displays(x))", "score": 0}
{"id": "eqasc_validation_1496", "prediction": "all x.((Line(x) | Bar(x) | Circle(x) | PictorialGraph(x)) -> GoodAnswer(x))", "score": 0}
{"id": "eqasc_validation_1496", "prediction": "(GoodApplication(Line) & GoodApplication(Bar) & GoodApplication(Circle) & GoodApplication(Pictorial))", "score": 0}
{"id": "eqasc_validation_1496", "prediction": "all x.((Line(x) | Bar(x) | Circle(x) | PictorialGraph(x)) -> GoodResponse(x))", "score": 0}
{"id": "eqasc_validation_1496", "prediction": "(GoodQuestion(Line) & GoodQuestion(Bar(Circle) & GoodQuestion(PictorialGraph))", "score": -1}
{"id": "eqasc_validation_1496", "prediction": "All x.(GoodApplication(x) -> (Line(x) | Bar(x) | Circle(x) | PictorialGraph(x)))", "score": -1}
{"id": "eqasc_validation_1496", "prediction": "all x.((Line(x) | Bar(x) | Circle(x) | PictorialGraph(x)) -> Good(x))", "score": 0}
{"id": "eqasc_validation_1496", "prediction": "(GhostResponse(Line,Cross) & GoodResponse(Bar,Circle,PictorialGraph))", "score": 0}
{"id": "eqasc_validation_1496", "prediction": "all x.((Line(x) | Bar(x) | Circle(x) | PictorialGraph(x)) -> GoodApplication(x))", "score": 0}
{"id": "eqasc_validation_1496", "prediction": "all x.((Line(x) | Bar(x) | Circle(x) | PictorialGraph(x)) -> GoodExecutions(x))", "score": 0}
{"id": "eqasc_validation_1496", "prediction": "(GoodAnswer(Line) & GoodAnswer(Bar) & GoodAnswer(Circle) & GoodAnswer(PictorialGraph))", "score": 0}
{"id": "eqasc_validation_1497", "prediction": "all x.(Bar(x) -> (Graph(x) & Graph(x)))", "score": 0}
{"id": "eqasc_validation_1497", "prediction": "all x.(Bar(x) -> (Graph(x) & UsedForGraph(x)))", "score": 0}
{"id": "eqasc_validation_1497", "prediction": "all x.(Bar(x) -> IsGraph(x))", "score": 0}
{"id": "eqasc_validation_1497", "prediction": "all x.(Bar(x) -> (Graphic(x) & Graph(x)))", "score": 0}
{"id": "eqasc_validation_1497", "prediction": "all x.(Bar(x) -> (Graph(x) & TypeOfGraph(x)))", "score": 0}
{"id": "eqasc_validation_1497", "prediction": "all x.(Bar(x) -> isGraph(x))", "score": 0}
{"id": "eqasc_validation_1497", "prediction": "all x y.((Bar(x) & Diagram(y)) -> (Graph(x) & Forms(x,y)))", "score": 0}
{"id": "eqasc_validation_1497", "prediction": "all x.(Bar(x) -> Graph(x))", "score": 0}
{"id": "eqasc_validation_1497", "prediction": "all x y.((Bar(x) & Diagram(y)) -> TypeOfGraph(x,y))", "score": 0}
{"id": "eqasc_validation_1497", "prediction": "all x.(Bar(x) -> (Graph(x) & BitColor(x)))", "score": 0}
{"id": "eqasc_validation_1497", "prediction": "all x y.((Bar(x) & BarGraph(y)) -> Graph(x,y))", "score": 0}
{"id": "eqasc_validation_1498", "prediction": "all x y.((Resident(x) & resident(y) & resident(x)) -> (Black(x) | Asian(y) | Latino(y)))", "score": 0}
{"id": "eqasc_validation_1498", "prediction": "(RentalAge(RR) & (Black(RR) | Asian(RR)) & Latino(RR))", "score": 0}
{"id": "eqasc_validation_1498", "prediction": "(Residents(c) & SeventeenPercentBlack(c) & FourPercentAsian(c) & ThreePercentLatino(c))", "score": 0}
{"id": "eqasc_validation_1498", "prediction": "17 percent (Residents(x) & Black(x)) & 51%(x) & Asian(x) & 31%(x) & Latino(x))", "score": -1}
{"id": "eqasc_validation_1498", "prediction": "(UnderestimatedBlack(residents) & OverestimatedAsian(residents) & OverestimatedLatino(residents))", "score": 0}
{"id": "eqasc_validation_1498", "prediction": "all x y z.((Resident(x) & Black(y) & Asian(z)) -> (SeventeenPercent(x) | FourPercent(z) | ThreePercent(z))))", "score": -1}
{"id": "eqasc_validation_1498", "prediction": "all x y z.((Resident(x) & Black(x) & Asian(y) & Latino(z)) -> (SeventeenPercent(x) | FourPercent(x) | ThreePercent(x)))", "score": 0}
{"id": "eqasc_validation_1498", "prediction": "all x y z.((Resident(x) & Black(y) & Asian(z)) -> (SeventeenPercent(x,y) & FourPercent(x,z) & ThreePercent(x,z)))", "score": 0}
{"id": "eqasc_validation_1498", "prediction": "all x.(Resident(x) -> (black(x) | Asian(x) | Latino(x)))", "score": 0}
{"id": "eqasc_validation_1498", "prediction": "(SeventeenPercentBlack(residents) & FourPercentAsian(residents) & ThreePercentLatino(residents))", "score": 0}
{"id": "eqasc_validation_1498", "prediction": "all x.(Restaurant(x) -> (Black(x) | Asian(x) | Latino(x)))", "score": 0}
{"id": "eqasc_validation_1498", "prediction": "(7) (Residents(x) & Black(x)) & Asian(x) & Latino(x))", "score": -1}
{"id": "eqasc_validation_1498", "prediction": "Seventeen percent of residents are Black(Residents) & FourPercentAsian(Residents) & ThreePercentLatino(Residents))", "score": -1}
{"id": "eqasc_validation_1498", "prediction": "all x.((Resident(x) & Black(x)) -> (Asian(x) & Latino(x)))", "score": 0}
{"id": "eqasc_validation_1498", "prediction": "(Residents(Seventeen) & Black(sixteen) & Asian(sixty) & Latino(sixty))", "score": 0}
{"id": "eqasc_validation_1498", "prediction": "all x,y.((Resident(x) & Black(x) & Asian(y)) -> (SeventeenPercent(x) | FourPercent(x,y) | ThreePercent(x,y)))", "score": -1}
{"id": "eqasc_validation_1499", "prediction": "all x y.((CircleGraph(x) & BlackResidents(y) & AsianResidents(y) & LatinoResidents(y)) -> DisplaysPopularNotices(x,y))", "score": 0}
{"id": "eqasc_validation_1499", "prediction": "all x.(CircleGraph(x) -> DisplaysNumberOfResidents(x,blackAsianAndLatino(x))", "score": -1}
{"id": "eqasc_validation_1499", "prediction": "all x.((CircleGraph(x) & DisplaysRestaurant(x) & Black(x) & Asian(x) & Latino(x)) -> CircleGraph(x))", "score": 0}
{"id": "eqasc_validation_1499", "prediction": "all x.(CircleGraph(x) -> DisplaysResidents(x))", "score": 0}
{"id": "eqasc_validation_1499", "prediction": "all x.((CircleGraph(x) & DisplaysDensityOfResidents(x,black) & DisplaysDensityOfRegioners(x,asia) & DisplaysDensityOfResidents(x,latino)) -> CanBeUsedToDisplayDensityOfResidents(x,latino))", "score": 0}
{"id": "eqasc_validation_1499", "prediction": "all x.((CircleGraph(x) & DisplaysAmountOfResidents(x)) -> (BlackResidents(x) | AsianResidents(x) | LatinoResidents(x)))", "score": 0}
{"id": "eqasc_validation_1499", "prediction": "all x y z.(SilkGraph(x) & Resident(y) & Black(y) & Asian(y) & Latino(z) & DisplaysNumberOfResidents(x,y,z))", "score": 0}
{"id": "eqasc_validation_1499", "prediction": "all x.((CircleGraph(x) & Resident(x) & Black(x) & Asian(x) & Latino(x)) -> DisplaysNumberOfResidents(x))", "score": 0}
{"id": "eqasc_validation_1499", "prediction": "all x.((CircleGraph(x) & NumberOfResidents(x,black) & NumberOfResidents(x,asia) & NumberOfResidents(x,latino)) -> Displays(x))", "score": 0}
{"id": "eqasc_validation_1499", "prediction": "all x y.((CircleGraph(x) & BlackResidents(y) & AsianResidents(y) & LatinoResidents(y)) -> DisplaysNumberOfResidents(x,y))", "score": 0}
{"id": "eqasc_validation_1499", "prediction": "all x y.((CircleGraph(x) & Residents(y) & Black(y) & Asian(y) & Latino(y)) -> Displays(x,y))", "score": 0}
{"id": "eqasc_validation_1499", "prediction": "all x y z.((CircleGraph(x) & BlackResident(y) & AsianResident(y)) -> DisplaysNumberOfResidents(x,y,z))", "score": 0}
{"id": "eqasc_validation_1499", "prediction": "all x.(CircleGraph(x) -> DisplaysResidents(x,black,asiatic,latino))", "score": 0}
{"id": "eqasc_validation_1499", "prediction": "all x.((CircleGraph(x) & DisplaysBlackResidents(x) & DisplaysAsianResidents(x) & DisplaysLatinoResidents(x)) -> CanBeUsedToDisplayResidents(x))", "score": 0}
{"id": "eqasc_validation_1499", "prediction": "all x y.((CircleGraph(x) & BlackResident(x) & AsianResident(x) & LatinoResident(y)) -> DisplaysPopularity(x,y))", "score": 0}
{"id": "eqasc_validation_1499", "prediction": "all x.(CircleGraph(x) -> (DisplaysBlackResidents(x) & DisplaysAsianResidents(x) & DisplaysLatinoResidents(x)))", "score": 0}
{"id": "eqasc_validation_1500", "prediction": "all x.(Percent(x) -> CanBeWrittenAsFractions(x))", "score": 0}
{"id": "eqasc_validation_1500", "prediction": "all x.(Percent(x) -> CanBeWrittenAsFractures(x))", "score": 0}
{"id": "eqasc_validation_1500", "prediction": "all x.(Percent(x) -> WrittenAsFractions(x))", "score": 0}
{"id": "eqasc_validation_1500", "prediction": "all x.(Percent(x) -> CanBeWrittenAsFraction(x))", "score": 0}
{"id": "eqasc_validation_1500", "prediction": "all x.(Percent(x) -> CanBeWrittenAsFragments(x))", "score": 0}
{"id": "eqasc_validation_1501", "prediction": "all x y.((CircleGraph(x) & Fractions(y)) -> CanDisplay(x,y))", "score": 0}
{"id": "eqasc_validation_1501", "prediction": "all x y.((CircleGraph(x) & Fraction(y)) -> CanDisplay(x,y))", "score": 0}
{"id": "eqasc_validation_1501", "prediction": "all x y.((CircleGraph(x) & Fraction(y)) -> Displays(x,y))", "score": 0}
{"id": "eqasc_validation_1501", "prediction": "all x.(CircleGraph(x) -> DisplaysFractions(x))", "score": 0}
{"id": "eqasc_validation_1501", "prediction": "all x.(CircleGraph(x) -> DisplayFractions(x))", "score": 0}
{"id": "eqasc_validation_1501", "prediction": "all x.((CircleGraph(x) & Parting(x)) -> DisplaysFractionsOn(x,Fractions))", "score": 0}
{"id": "eqasc_validation_1501", "prediction": "all x.((CircleGraph(x) & DisplayFractions(x)) -> UsedFor(x))", "score": 0}
{"id": "eqasc_validation_1501", "prediction": "all x y.((CircleGraph(x) & Fractions(y)) -> Displays(x,y))", "score": 0}
{"id": "eqasc_validation_1501", "prediction": "all x.(CircleGraph(x) -> CanBeUsedToDisplayFractions(x))", "score": 0}
{"id": "eqasc_validation_1501", "prediction": "all x y z.((CircleGraph(x) & Fractions(y) & Fractions(z)) -> Displays(x,y,z))", "score": 0}
{"id": "eqasc_validation_1501", "prediction": "all x y.((CircleGraph(x) & FractionShow(y)) -> CanDistributeFractions(x,y))", "score": 0}
{"id": "eqasc_validation_1501", "prediction": "all x.(CircleGraph(x) -> DisplaysFractures(x))", "score": 0}
{"id": "eqasc_validation_1502", "prediction": "all x.(Percent(x) -> PartsPerSixty(x))", "score": 0}
{"id": "eqasc_validation_1502", "prediction": "all x.(Percent(x) -> PartsPerThreeThan(x))", "score": 0}
{"id": "eqasc_validation_1502", "prediction": "all x.(Percent(x) -> PartsPerSix(x))", "score": 0}
{"id": "eqasc_validation_1502", "prediction": "all x y.((Percent(x) & PartPerSixt(y)) -> Is(x,y))", "score": 0}
{"id": "eqasc_validation_1502", "prediction": "all x.(Percent(x) -> PartPerSixty(x))", "score": 0}
{"id": "eqasc_validation_1502", "prediction": "all x.(Percent(x) -> PartsPerSixt(x))", "score": 0}
{"id": "eqasc_validation_1503", "prediction": "all x y z.((CircleGraph(x) & PartsPerSixty(y) & PartsPerSixty(z)) -> CanShowDepthOnG-Graph(x,y,z))", "score": -1}
{"id": "eqasc_validation_1503", "prediction": "all x y.((CuelGraph(x) & PartPerCenna(y)) -> DisplaysPiecesPerSixt(x,y))", "score": 0}
{"id": "eqasc_validation_1503", "prediction": "all x y.((CircleGraph(x) & PartPerSixt(y)) -> Displays(x,y))", "score": 0}
{"id": "eqasc_validation_1503", "prediction": "all x y.((CircleGraph(x) & PartPerSixty(y)) -> DisplaysPerSixty(x,y))", "score": 0}
{"id": "eqasc_validation_1503", "prediction": "all x y z.((CircleGraph(x) & PartsPerSixt(y) & TimePerSixt(z)) -> Displays(x,y,z))", "score": 0}
{"id": "eqasc_validation_1503", "prediction": "all x.(CircleGraph(x) -> CanDetailPiecesPer100(x))", "score": 0}
{"id": "eqasc_validation_1503", "prediction": "all x.(CircleGraph(x) -> DisplaysPartPerThousand(x))", "score": 0}
{"id": "eqasc_validation_1503", "prediction": "all x y.((CircleGraph(x) & PartsPerThrough100(x,y)) -> CanDisplay(x,y))", "score": 0}
{"id": "eqasc_validation_1503", "prediction": "all x y.((CircleGraph(x) & PartPerSix Hundred(x)) -> CanDisplay(x,y))", "score": -1}
{"id": "eqasc_validation_1503", "prediction": "all x y.((CircleGraph(x) & PartPerSixt(y) & UsedToDisplay(x,y)) -> Display(x,y))", "score": 0}
{"id": "eqasc_validation_1503", "prediction": "all x.(CircleGraph(x) -> (DisplaysPartsPerOne(x) | DisplaysPiecesPerZenu(x))))", "score": -1}
{"id": "eqasc_validation_1503", "prediction": "all x y.((CircleGraph(x) & PartPer100(y)) -> DisplayBy(x,y))", "score": 0}
{"id": "eqasc_validation_1503", "prediction": "all x.(CircleGraph(x) -> DisplaysPartsPerSixt(x))", "score": 0}
{"id": "eqasc_validation_1503", "prediction": "all x.(CircleGraph(x) -> DisplaysPartsPer100(x))", "score": 0}
{"id": "eqasc_validation_1503", "prediction": "all x y z.((CircleGraph(x) & PartsPerSixty(y) & PartsPerSixten(z)) -> Displays(x,y,z))", "score": 0}
{"id": "eqasc_validation_1504", "prediction": "all x.(DisplayScreen(x) -> ShowsAll(x))", "score": 0}
{"id": "eqasc_validation_1504", "prediction": "all x.(DisplayScreen(x) -> Shows(x,Celebrates))", "score": 0}
{"id": "eqasc_validation_1504", "prediction": "all x y.(.DisplayScreen(x) -> Shows(x,y))", "score": -1}
{"id": "eqasc_validation_1504", "prediction": "all x y.((DisplayScreen(x) & Device(y)) -> ShowsAll(x,y))", "score": 0}
{"id": "eqasc_validation_1504", "prediction": "(Sees(DisplayScreen) & Displays(DisplayScreen))", "score": 0}
{"id": "eqasc_validation_1504", "prediction": "-(DisplayScreen(x) & ShowsAll(x)))", "score": -1}
{"id": "eqasc_validation_1504", "prediction": "Exists x.(DisplayScreen(x) & ShowsAll(x))", "score": -1}
{"id": "eqasc_validation_1504", "prediction": "Display Screen ShowsAll(Display(Display)", "score": -1}
{"id": "eqasc_validation_1505", "prediction": "all x y.((CircleGraph(x) & Percent(y)) -> CanShow(x,y))", "score": 0}
{"id": "eqasc_validation_1505", "prediction": "all x y.((CircleGraph(x) & Year(y)) -> ShowPERCENTS(x,y))", "score": 0}
{"id": "eqasc_validation_1505", "prediction": "all x.(CircleGraph(x) -> ShowsPercents(x))", "score": 0}
{"id": "eqasc_validation_1505", "prediction": "all x.(CircleGraph(x) -> (DestinatedPercentage(x) & ShowsPercentages(x)))", "score": 0}
{"id": "eqasc_validation_1505", "prediction": "all x y z.((CircleGraph(x) & Percents(y) & (CircleGraph(z) | Percents(z)))) -> ShowPercents(x,y,z))", "score": -1}
{"id": "eqasc_validation_1505", "prediction": "all x y.((CircleGraph(x) & Percent(y)) -> CanShowPercents(x,y))", "score": 0}
{"id": "eqasc_validation_1505", "prediction": "all x.(CircleGraph(x) -> CanShowPercents(x))", "score": 0}
{"id": "eqasc_validation_1505", "prediction": "all x y.((CircleGraph(x) & Percent(y)) -> ShowsPercents(x,y))", "score": 0}
{"id": "eqasc_validation_1505", "prediction": "all x y.((CircleGraph(x) & Percents(y)) -> ShowPercents(x,y))", "score": 0}
{"id": "eqasc_validation_1505", "prediction": "all x y.((CircleGraph(x) & Percent(y)) -> Shows(x,y))", "score": 0}
{"id": "eqasc_validation_1505", "prediction": "all x y.((CircleGraph(x) & Percents(y)) -> Shows(x,y))", "score": 0}
{"id": "eqasc_validation_1505", "prediction": "all x y.((CircleGraph(x) & Percent(y)) -> ShowsPotential(x,y))", "score": 0}
{"id": "eqasc_validation_1505", "prediction": "all x.(CircleGraph(x) -> Showpercentage(x))", "score": 0}
{"id": "eqasc_validation_1505", "prediction": "all x y.((CircleGraph(x) & Percent(y)) -> CanBeShownToShowPercents(x,y))", "score": 0}
{"id": "eqasc_validation_1506", "prediction": "all x y.((Compass(x) & Direction(y)) -> DeterminesDirection(x,y))", "score": 4}
{"id": "eqasc_validation_1506", "prediction": "all x y.((Compass(x) & DirectionDiscovery(y)) -> UsedForDetermining(x,y))", "score": 0}
{"id": "eqasc_validation_1506", "prediction": "all x.(Compass(x) -> DetermineDistance(x))", "score": 0}
{"id": "eqasc_validation_1506", "prediction": "all x.(Compass(x) -> DeterminesDirectionWithCompass(x))", "score": 0}
{"id": "eqasc_validation_1506", "prediction": "all x y z.((Compass(x) & Direction(y) & Direction(z) & DeterminedWith(x,y,z)) -> Compass(x))", "score": 0}
{"id": "eqasc_validation_1506", "prediction": "all x y.((Compass(x) & DirectionYouDetermine(y)) -> Uses(x,y))", "score": 0}
{"id": "eqasc_validation_1506", "prediction": "all x y.((Compass(x) & Direction(y)) -> Determined(x,y))", "score": 0}
{"id": "eqasc_validation_1506", "prediction": "all x.(Compass(x) -> DeterminesDirection(x))", "score": 4}
{"id": "eqasc_validation_1506", "prediction": "all x y z.((Compass(x) & Direction(y) & Direction(z)) -> Calculates(x,y))", "score": 0}
{"id": "eqasc_validation_1506", "prediction": "all x.(Compass(x) -> DeterminingDirectionWithCompass(x))", "score": 0}
{"id": "eqasc_validation_1506", "prediction": "all x y z.((Compass(x) & Direction(y) & Direction(z)) -> DeterminesDirection(x,y))", "score": 4}
{"id": "eqasc_validation_1507", "prediction": "all x y.((CompassNeedle(x) & MagneticField(y)) -> LineupsWith(x,y))", "score": 0}
{"id": "eqasc_validation_1507", "prediction": "all x.(CompassNeedle(x) -> LineUpWithMagneticFields(x))", "score": 0}
{"id": "eqasc_validation_1507", "prediction": "all x.(CompassNeedle(x) -> LinesUpWithMagneticFields(x))", "score": 0}
{"id": "eqasc_validation_1507", "prediction": "all x y.((CompassNeedle(x) & MagneticField(y)) -> LinensUp(x,y))", "score": 0}
{"id": "eqasc_validation_1507", "prediction": "all x.(CompassNeedle(x) -> LineUpWithMagneticField(x))", "score": 0}
{"id": "eqasc_validation_1507", "prediction": "all x y.((CompassNeedle(x) & MagneticField(y)) -> LinesUpWith(x,y))", "score": 0}
{"id": "eqasc_validation_1507", "prediction": "all x.(CompassNeedle(x) -> Lineup(x,MagneticFields))", "score": 0}
{"id": "eqasc_validation_1507", "prediction": "all x.(CompassNeedle(x) -> LineUpMagneticFields(x))", "score": 0}
{"id": "eqasc_validation_1507", "prediction": "all x y.((CompassNeedle(x) & MagneticField(y)) -> LinesUp(x,y))", "score": 0}
{"id": "eqasc_validation_1507", "prediction": "all x.(Compass(x) -> LinesUpWithMagneticFields(x))", "score": 0}
{"id": "eqasc_validation_1508", "prediction": "all x.(MagneticField(x) -> DetermineDirection(x))", "score": 0}
{"id": "eqasc_validation_1508", "prediction": "all x y z.((MagneticField(x) & Direction(y) & Direction(z)) -> UsedFor(x,y,z))", "score": 0}
{"id": "eqasc_validation_1508", "prediction": "all x y.((MagneticField(x) & Direction(y)) -> Determines(x,y))", "score": 0}
{"id": "eqasc_validation_1508", "prediction": "all x.(MagneticField(x) -> DetermineDescription(x))", "score": 0}
{"id": "eqasc_validation_1508", "prediction": "all x.(MagneticField(x) -> DeterminesDirection(x))", "score": 0}
{"id": "eqasc_validation_1508", "prediction": "all x y.((MagneticField(x) & Direction(y)) -> Determined(x,y))", "score": 0}
{"id": "eqasc_validation_1508", "prediction": "all x.(MagneticField(x) -> DeterminedDirection(x))", "score": 0}
{"id": "eqasc_validation_1509", "prediction": "all x.(Magnet(x) -> (UsedToDetermineDirection(x) | -UsedToDetermineDirection(x)))", "score": 0}
{"id": "eqasc_validation_1509", "prediction": "all x.(Magnet(x) -> DetermineDirection(x))", "score": 0}
{"id": "eqasc_validation_1509", "prediction": "all x y z.((Magnet(x) & Direction(y) & Direction(z)) -> DeterminedWith(x,y,z))", "score": 0}
{"id": "eqasc_validation_1509", "prediction": "all x y.((Magnet(x) & Direction(y) & UsedToDetermine(x,y)) -> CanBeUsedToDetermine(x))", "score": 0}
{"id": "eqasc_validation_1509", "prediction": "all x.(Magnet(x) -> DetermineDirectionOrDirection(x))", "score": 0}
{"id": "eqasc_validation_1509", "prediction": "all x.(Magnet(x) -> (DetermineDirection(x) & Use(x,Magnet) & DetermineDirection(x)))", "score": 0}
{"id": "eqasc_validation_1509", "prediction": "all x.(Magnet(x) -> DeterminesDirection(x))", "score": 0}
{"id": "eqasc_validation_1509", "prediction": "all x y z.((Magnet(x) & Direction(y) & Direction(z)) -> CanBeUsedToDetermine(x,y,z))", "score": 0}
{"id": "eqasc_validation_1509", "prediction": "all x y.((Magnet(x) & Direction(y)) -> DetermineDirection(x,y))", "score": 0}
{"id": "eqasc_validation_1509", "prediction": "all x y.((Magnet(x) & Direction(y)) -> Determines(x,y))", "score": 0}
{"id": "eqasc_validation_1509", "prediction": "all x.(Magnet(x) -> (DetermineDirection(x) & Magnet(y)))", "score": 0}
{"id": "eqasc_validation_1509", "prediction": "all x y.((Magnet(x) & Direction(y)) -> Determine(x,y))", "score": 0}
{"id": "eqasc_validation_1509", "prediction": "all x.(Magnet(x) -> HasDirectionDisposition(x))", "score": 0}
{"id": "eqasc_validation_1509", "prediction": "all x.(Magnet(x) -> (DetermineDirection(x) & UseAdithopon(x)))", "score": 0}
{"id": "eqasc_validation_1509", "prediction": "all x.(Magnetic(x) -> CanBeUsedToDetermineDirection(x))", "score": 0}
{"id": "eqasc_validation_1510", "prediction": "all x.(GPSBasedNavigation(x) -> (Distance(x) & Direction(x)))", "score": 0}
{"id": "eqasc_validation_1510", "prediction": "all x.(Gps(x) -> (Distance(x) & Direction(x)))", "score": 0}
{"id": "eqasc_validation_1510", "prediction": "all x.((MappingSurveillance(x) & Distance(x) & Direction(x)) -> MapFinding(x))", "score": 0}
{"id": "eqasc_validation_1510", "prediction": "(GNSSensitiveNavigation(x) -> (Distance(x) & Direction(x)))", "score": 0}
{"id": "eqasc_validation_1510", "prediction": "all x y.((GPSBasedNavigation(x) & Distance(y) & Direction(z)) -> TheMomentOf(x,y,z))", "score": 0}
{"id": "eqasc_validation_1510", "prediction": "all x.(GlossMap(x) -> (Distance(x) & Direction(x) & FoundationOfGlossMap(x)))", "score": 0}
{"id": "eqasc_validation_1510", "prediction": "all x.((Distance(x) & Direction(x)) -> GPSBasedNavigation(x))", "score": 0}
{"id": "eqasc_validation_1510", "prediction": "all x.(GPSBody(x) -> (Distance(x) & Direction(x)))", "score": 0}
{"id": "eqasc_validation_1510", "prediction": "all x y.((GPS(x) & Distance(y) & Direction(y)) -> InGraditude(x,y))", "score": 0}
{"id": "eqasc_validation_1510", "prediction": "all x y.((Range(x) & Distance(y)) -> LocatedIn(x,y))", "score": 0}
{"id": "eqasc_validation_1510", "prediction": "all x.((MapSurveillance(x) & Distance(x) & Direction(x)) -> GPS-BasedNavigation(x))", "score": -1}
{"id": "eqasc_validation_1510", "prediction": "all x.((Distance(x) & Direction(x)) -> GPSBackground(x))", "score": 0}
{"id": "eqasc_validation_1511", "prediction": "all x.(Compass(x) -> UsedForNavigation(x))", "score": 0}
{"id": "eqasc_validation_1511", "prediction": "all x y.((Compass(x) & Navigation(y)) -> UsedFor(x,y))", "score": 0}
{"id": "eqasc_validation_1511", "prediction": "all x y z.((Compass(x) & Navigation(y) & Navigation(z)) -> UsedFor(x,y,z))", "score": 0}
{"id": "eqasc_validation_1511", "prediction": "exists x.(Compass(x) & UsedForNavigation(x))", "score": 0}
{"id": "eqasc_validation_1512", "prediction": "all x y.((Direction(x) & CompassScales(y) & 16Point(z)) -> GivenOn(x,y,z))", "score": 0}
{"id": "eqasc_validation_1512", "prediction": "all x.(Direction(x) -> givenOnCompassScale(x,16))", "score": 0}
{"id": "eqasc_validation_1512", "prediction": "all x.(Direction(x) -> SixPointCompassScales(x))", "score": 0}
{"id": "eqasc_validation_1512", "prediction": "all x.(DirectION(x) -> 16PunchCompassScales(x))", "score": 0}
{"id": "eqasc_validation_1512", "prediction": "all x.(Direction(x) -> GivenOnCommassScan(x,16))", "score": 0}
{"id": "eqasc_validation_1512", "prediction": "all x.((Direction(x) & SixPointCompassScales(x)) -> DirectionGiven(x))", "score": 0}
{"id": "eqasc_validation_1512", "prediction": "all x y.((Direction(x) & Compass(y)) -> ShownOnScale(x,y))", "score": 0}
{"id": "eqasc_validation_1512", "prediction": "all x.(DirectionScale(x) -> ForCommassage(x,16))", "score": 0}
{"id": "eqasc_validation_1512", "prediction": "all x.(Document(x) -> (Scale(x,16) & CompassScaulk(x)))", "score": 0}
{"id": "eqasc_validation_1512", "prediction": "all x.(Direction(x) -> 16PointCompassScale(x))", "score": 0}
{"id": "eqasc_validation_1512", "prediction": "all x.((Direction(x) & 16PointCompassScale(x)) -> Given(x))", "score": 0}
{"id": "eqasc_validation_1512", "prediction": "all x.(Direction(x) -> 16PieceCompassScales(x))", "score": 0}
{"id": "eqasc_validation_1512", "prediction": "all x.(Direction(x,y) -> 16PointCompassScale(y))", "score": 0}
{"id": "eqasc_validation_1512", "prediction": "all x.(Direction(x) -> CompassScale(x))", "score": 0}
{"id": "eqasc_validation_1512", "prediction": "all x.(Direction(x) -> GivenOnCommassScale(x,16))", "score": 0}
{"id": "eqasc_validation_1513", "prediction": "all x.(Compass(x) -> CanDetermineDifferentPoints(x,16))", "score": 0}
{"id": "eqasc_validation_1513", "prediction": "all x.(Compass(x) -> CanDetermine16Punches(x))", "score": 0}
{"id": "eqasc_validation_1513", "prediction": "all x.(Compass(x) -> DifferentPoints(x,16))", "score": 0}
{"id": "eqasc_validation_1513", "prediction": "all x y.((Compass(x) & Point(y)) -> Determines(x,y))", "score": 0}
{"id": "eqasc_validation_1513", "prediction": "all x.(Compass(x) -> DeterminesSixDifferentPoints(x))", "score": 0}
{"id": "eqasc_validation_1513", "prediction": "all x.(Compass(x) -> DeterminesPoints(x,16))", "score": 0}
{"id": "eqasc_validation_1513", "prediction": "all x.(Compass(x) -> canDefineDifferentPoints(x,16))", "score": 0}
{"id": "eqasc_validation_1513", "prediction": "all x y.((Compass(x) & PedestrianPoint(y,16)) -> Determines(x,y,16))", "score": 0}
{"id": "eqasc_validation_1513", "prediction": "all x y.((Compass(x) & Point(y) & Determines(x,y,6)) -> CanDetermine(x,y,16))", "score": 0}
{"id": "eqasc_validation_1513", "prediction": "all x.(Compass(x) -> DeterminesDifferentPoints(x,16))", "score": 0}
{"id": "eqasc_validation_1513", "prediction": "has16 DifferentPoints(compass)", "score": -1}
{"id": "eqasc_validation_1513", "prediction": "all x.(Compass(x) -> Determines(x,16))", "score": 0}
{"id": "eqasc_validation_1513", "prediction": "all x.(Compass(x) -> Determines(x,168))", "score": 0}
{"id": "eqasc_validation_1514", "prediction": "all x.(Navigate(x) -> Compass(x))", "score": 0}
{"id": "eqasc_validation_1514", "prediction": "all x.(Navigate(x) -> CompassOnly(x))", "score": 0}
{"id": "eqasc_validation_1514", "prediction": "all x.(Navigation(x) -> (Compass(x) & Doing(x)))", "score": 3}
{"id": "eqasc_validation_1514", "prediction": "all x.(Navigation(x) -> (Compass(x) | GPS(x)))", "score": 0}
{"id": "eqasc_validation_1514", "prediction": "all x.(Navigation(x) -> (Compass(x) | Compass(x)))", "score": 3}
{"id": "eqasc_validation_1514", "prediction": "all x.(Navigation(x) -> CompassBased(x))", "score": 0}
{"id": "eqasc_validation_1514", "prediction": "all x.(Navigation(x) -> (Compass(x) & None(x)))", "score": 3}
{"id": "eqasc_validation_1514", "prediction": "all x.(Navigation(x) -> NavigationDoesByCompass(x))", "score": 0}
{"id": "eqasc_validation_1514", "prediction": "all x.(Navigation(x) -> (CompassOnly) & Completes(x)))", "score": -1}
{"id": "eqasc_validation_1514", "prediction": "all x.(Noise(x) -> (Compass(x) | Compass(x)))", "score": 0}
{"id": "eqasc_validation_1514", "prediction": "all x.(Navigate(x) -> OnlyCompass(x))", "score": 0}
{"id": "eqasc_validation_1514", "prediction": "all x.(Navigation(x) -> ((Compass(x) | Compass(x))))", "score": 3}
{"id": "eqasc_validation_1514", "prediction": "all x.(Navigate(x) -> (Compass(x) & -Compass(x)))", "score": 0}
{"id": "eqasc_validation_1514", "prediction": "all x.(Navigation(x) -> UsingCompass(x))", "score": 0}
{"id": "eqasc_validation_1514", "prediction": "all x.(Navigation(x) -> ComesWith(x))", "score": 0}
{"id": "eqasc_validation_1514", "prediction": "all x.(Navigate(x) -> (OnCompass(x) & -OffCompass(x)))", "score": 0}
{"id": "eqasc_validation_1515", "prediction": "all x y.((Navigation(x) & Direction(y,x)) -> DeterminesDirection(x))", "score": 0}
{"id": "eqasc_validation_1515", "prediction": "all x y z.((Navigation(x) & Direction(y) & Direction(z)) -> DeterminesForDirection(x,y,z))", "score": 0}
{"id": "eqasc_validation_1515", "prediction": "all x.(Navigation(x) -> DeterminesDirection(x))", "score": 4}
{"id": "eqasc_validation_1515", "prediction": "all x y.((Navigation(x) & Direction(y)) -> DeterminedFor(x,y))", "score": 0}
{"id": "eqasc_validation_1515", "prediction": "all x.(Navigation(x) -> DeterminedDirection(x))", "score": 0}
{"id": "eqasc_validation_1515", "prediction": "all x.((Navigation(x) & Direction(y)) -> Determines(x,y))", "score": 0}
{"id": "eqasc_validation_1515", "prediction": "all x y.((Navigation(x) & Direction(y)) -> DeterminesDirection(x,y))", "score": 8}
{"id": "eqasc_validation_1515", "prediction": "all x y.((Navigation(x) & Direction(y) & DeterminesDetermination(x,y)) -> Navigation(x))", "score": 0}
{"id": "eqasc_validation_1515", "prediction": "all x y z.((Navigation(x) & Direction(y) & Direction(z) & UsesToDefinite(x,y)) -> Determine(x,z))", "score": 0}
{"id": "eqasc_validation_1515", "prediction": "all x.(Naviation(x) -> DetermineDirectionElement(x))", "score": 0}
{"id": "eqasc_validation_1516", "prediction": "all x.(SatelliteTechnologie(x) -> UsedForPredictingWeather(x))", "score": 0}
{"id": "eqasc_validation_1516", "prediction": "all x y.((SatelliteTechnology(x) & Weather(y)) -> PredictsTheWeather(x,y))", "score": 0}
{"id": "eqasc_validation_1516", "prediction": "all x y z.((SatelliteTechnology(x) & Weather(y) & Weather(z)) -> PredictsWith(x,y,z))", "score": 0}
{"id": "eqasc_validation_1516", "prediction": "all x.(SatelliteTechnology(x) -> UsedForPredictingWeather(x))", "score": 0}
{"id": "eqasc_validation_1516", "prediction": "all x.(SatelliteTechnologie(x) -> PredictsWeather(x))", "score": 0}
{"id": "eqasc_validation_1516", "prediction": "all x y z.((SatelliteTechnology(x) & Weather(y) & Weather(z)) -> Predicts(x,y,z))", "score": 3}
{"id": "eqasc_validation_1516", "prediction": "all x y.((SatelliteTechnologie(x) & Weather(y)) -> Prediction(x,y))", "score": 0}
{"id": "eqasc_validation_1516", "prediction": "all x.(Satellite(x) -> UsedForPredictingWeather(x))", "score": 0}
{"id": "eqasc_validation_1516", "prediction": "all x.(SatelliteTechnology(x) -> PredictsWeather(x))", "score": 0}
{"id": "eqasc_validation_1516", "prediction": "all x y.((SatelliteTechnology(x) & Weather(y)) -> UsedForPredicting(x,y))", "score": 0}
{"id": "eqasc_validation_1516", "prediction": "(MappingWeather(usingSatellite(Satellite) & Weather(Satellite))", "score": -1}
{"id": "eqasc_validation_1516", "prediction": "all x y.((SatelliteTechnology(x) & Weather(y) & Planes(x,y)) -> UsedForPredicting(x,y))", "score": 0}
{"id": "eqasc_validation_1517", "prediction": "all x y.((Meteorologist(x) & SatelliteTechnology(y)) -> Uses(x,y))", "score": 0}
{"id": "eqasc_validation_1517", "prediction": "all x y z.((Meteorologist(x) & SatelliteTechnology(y) & Meteorologist(z)) -> Uses(x,y,z))", "score": 0}
{"id": "eqasc_validation_1517", "prediction": "all x y z.((Meteorologist(x) & SatelliteTechnology(y) & Telescope Technology(z)) -> Uses(x,y))", "score": -1}
{"id": "eqasc_validation_1517", "prediction": "all x.(Meteorologist(x) -> UsesSatelliteTechnology(x))", "score": 0}
{"id": "eqasc_validation_1517", "prediction": "all x.(Meteorologist(x) -> UsesSatelliteTechnologie(x))", "score": 0}
{"id": "eqasc_validation_1517", "prediction": "all x y.((Meteorologist(x) & Satellite(y)) -> Uses(x,y))", "score": 0}
{"id": "eqasc_validation_1518", "prediction": "all x.(Meteorologist(x) -> UsesSatelliteTechnology(x))", "score": 0}
{"id": "eqasc_validation_1518", "prediction": "all x y.((Meteorologist(x) & SatelliteTechnology(y)) -> Uses(x,y))", "score": 0}
{"id": "eqasc_validation_1518", "prediction": "all x.(Meteorologist(x) -> UsesSatelliteTechnique(x))", "score": 0}
{"id": "eqasc_validation_1519", "prediction": "all x.(SatellitTechnologie(x) -> UsedByMeteologists(x))", "score": 0}
{"id": "eqasc_validation_1519", "prediction": "all x.(SatelliteTechnology(x) -> CanBeUsedByMeteologists(x))", "score": 0}
{"id": "eqasc_validation_1519", "prediction": "all x y.((Satellite(x) & Meteologist(y)) -> CanUse(x,y))", "score": 0}
{"id": "eqasc_validation_1519", "prediction": "all x.(SatelliteTechnology(x) -> UsedByMeteologists(x))", "score": 0}
{"id": "eqasc_validation_1519", "prediction": "all x y.((SatelliteTechnology(x) & Meteologist(y)) -> UsedBy(x,y))", "score": 0}
{"id": "eqasc_validation_1519", "prediction": "all x.(SatelliteTechnologie(x) -> CanBeUsedByMeteologists(x))", "score": 0}
{"id": "eqasc_validation_1519", "prediction": "all x y.((Metesologist(x) & SatelliteTechnology(y)) -> UsedBy(x,y))", "score": 0}
{"id": "eqasc_validation_1519", "prediction": "exists x.(SatelliteTechnology(x) & UsedByMeteologists(x))", "score": 0}
{"id": "eqasc_validation_1519", "prediction": "all x y.((SatelliteTechnology(x) & Meteologist(y)) -> Uses(x,y))", "score": 0}
{"id": "eqasc_validation_1519", "prediction": "all x.(RunsOnSatellite(x) -> UsedByMeteologists(x))", "score": 0}
{"id": "eqasc_validation_1520", "prediction": "all x y z.((Meteorologist(x) & SatelliteTechnology(y) & Meteorologist(z)) -> Uses(x,z))", "score": 0}
{"id": "eqasc_validation_1520", "prediction": "all x y.(Meteorologist(x) & SatelliteTechnology(y) & Uses(x,y))", "score": 0}
{"id": "eqasc_validation_1520", "prediction": "all x.(Meteorologist(x) & SatelliteTechnology(y) & Uses(x,y))", "score": 0}
{"id": "eqasc_validation_1520", "prediction": "all x y,z.((Meteoorologist(x) & SatelliteTechnology(y)) -> Uses(x,y))", "score": -1}
{"id": "eqasc_validation_1520", "prediction": "all x y.((Meteorologist(x) & SatelliteTechnology(y) & Satellite(z)) -> Uses(x,y))", "score": 0}
{"id": "eqasc_validation_1520", "prediction": "all x y.((Meteorologist(x) & SatelliteTechnology(y)) -> Uses(x,y))", "score": 0}
{"id": "eqasc_validation_1520", "prediction": "all x y.((Meteorologist(x) & SatelliteTechnologie(y)) -> Uses(x,y))", "score": 0}
{"id": "eqasc_validation_1520", "prediction": "all x y z.((Meteorologist(x) & SatelliteTechnology(y) & SatelliteTechnology(z)) -> Uses(x,y,z))", "score": 0}
{"id": "eqasc_validation_1520", "prediction": "all x y.((Meteorologist(x) & SatelliteTechnology(y)) -> UsesTo(x,y))", "score": 0}
{"id": "eqasc_validation_1520", "prediction": "all x.(Meteorologist(x) & SatelliteTechnique(x) & Uses(x,SatelliteTechnique))", "score": 0}
{"id": "eqasc_validation_1520", "prediction": "all x.(Meteorologist(x) -> UsesSatelliteTechnology(x))", "score": 0}
{"id": "eqasc_validation_1520", "prediction": "all x y.((Meteoorologist(x) & SatelliteTechnology(y) & Uses(x,y)) -> MeteorologistUses(x,y))", "score": 0}
{"id": "eqasc_validation_1520", "prediction": "all x y.((Meteorolist(x) & SatelliteTechnology(y)) -> UsesSatellite(x,y))", "score": 0}
{"id": "eqasc_validation_1521", "prediction": "(exists x.(Weather(x) & (Rain(x) | Shine(x))))", "score": 0}
{"id": "eqasc_validation_1521", "prediction": "all x y.((Rain(x) | Shine(x)) -> Weather(y))", "score": 1}
{"id": "eqasc_validation_1521", "prediction": "all x.(Weather(x) -> (Rain(x) | Shine(x)))", "score": 0}
{"id": "eqasc_validation_1521", "prediction": "Whether it be Rain or Shine, there is always Weather.", "score": -1}
{"id": "eqasc_validation_1521", "prediction": "(exists x.(Weather(x) & Rain(x)) | exists y.(Weather(y) & Shine(y))))", "score": -1}
{"id": "eqasc_validation_1521", "prediction": "all x.((Rain(x) | Shine(x)) -> Weather(x))", "score": 1}
{"id": "eqasc_validation_1521", "prediction": "all x.(Weather(x) -> ((Rain(x) | Shine(x)) | Weather(x)))", "score": 0}
{"id": "eqasc_validation_1521", "prediction": "exists x y.(Weather(x) & Weather(y) & Weather(x))", "score": 0}
{"id": "eqasc_validation_1521", "prediction": "all x.(Rain(x) | Shine(x); Weather(x))", "score": -1}
{"id": "eqasc_validation_1521", "prediction": "all x.(((Rain(x) | Shine(x))) -> Weather(x))", "score": 1}
{"id": "eqasc_validation_1521", "prediction": "((Rain(Rain) | Shine(Rain)) | Weather(Winter))", "score": 0}
{"id": "eqasc_validation_1522", "prediction": "all x y.((SatelliteTechnology(x) & PredictsRainOrShine(y)) -> UsesForPenetration(x,y))", "score": 0}
{"id": "eqasc_validation_1522", "prediction": "all x.(Satellite(x) -> PredictsRainOrShine(x))", "score": 0}
{"id": "eqasc_validation_1522", "prediction": "all x.((SatelliteTechnology(x) & PredictsRainOrShine(x)) -> UsedForPredictingRainOrShine(x))", "score": 0}
{"id": "eqasc_validation_1522", "prediction": "all x.(Satellite(x) -> (PredictsRain(x) | PredictsShine(x)))", "score": 0}
{"id": "eqasc_validation_1522", "prediction": "all x y.((SatelliteTechnology(x) & SurfaceTechnology(y)) -> (PredictsRain(y) | PredictsShine(y)))", "score": 0}
{"id": "eqasc_validation_1522", "prediction": "all x.(SatelliteTechnology(x) -> PredictsRainOrShine(x))", "score": 0}
{"id": "eqasc_validation_1522", "prediction": "all x y z.((SatelliteTechnology(x) & Rain(y) & Shine(z)) -> Predicts(x,y,z))", "score": 3}
{"id": "eqasc_validation_1522", "prediction": "all x y.((SatelliteTechnology(x) & SatelliteTech(y)) -> (PredictsRainOrShine(x,y) | PredictsRainOrShine(x,y)))", "score": 0}
{"id": "eqasc_validation_1522", "prediction": "all x y.((SatelliteTechnologie(x) & Weather(y)) -> UsedForPredicting(x,y))", "score": 0}
{"id": "eqasc_validation_1522", "prediction": "all x y z.((SatelliteTechnology(x) & SatelliteTechnology(y) & (Rain(z) | Shine(z)))) -> Predicts(x,y,z))", "score": -1}
{"id": "eqasc_validation_1522", "prediction": "all x y.((SatelliteTechnology(x) & WeatherOrSun(y)) -> Predicts(x,y))", "score": 0}
{"id": "eqasc_validation_1522", "prediction": "all x.(SatelliteTechnologie(x) -> (PredictsRainOrShine(x) & PredictsRainOrShine(x)))", "score": 0}
{"id": "eqasc_validation_1522", "prediction": "all x y.((SatelliteTechnology(x) & RainOrShinePrognosis(y)) -> UsedFor(x,y))", "score": 0}
{"id": "eqasc_validation_1522", "prediction": "all x.(SatelliteTechnology(x) -> (PredictsRainOrShine(x) & -PredictsRainOrShine(x)))", "score": 0}
{"id": "eqasc_validation_1522", "prediction": "all x.(SatelliteTechnology(x) -> (PredictsRain(x) | PredictsSunny(x)))", "score": 0}
{"id": "eqasc_validation_1522", "prediction": "all x.(SatelliteTechnology(x) -> (PredictsRainOrShine(x)))", "score": 0}
{"id": "eqasc_validation_1523", "prediction": "all x.(Weather(x) -> LikeAboutEveryDay(x))", "score": 0}
{"id": "eqasc_validation_1523", "prediction": "all x.(Weather(x) -> Outside(x))", "score": 0}
{"id": "eqasc_validation_1523", "prediction": "all x.(Weather(x) -> OutsideDay(x))", "score": 0}
{"id": "eqasc_validation_1523", "prediction": "all x.(Weather(x) -> LikeOutside(x))", "score": 0}
{"id": "eqasc_validation_1523", "prediction": "(All x.(Weather(x) -> OutsideDay(x)))", "score": -1}
{"id": "eqasc_validation_1523", "prediction": "all x y.((Weather(x) & Day(y)) -> LikeOutside(x,y))", "score": 0}
{"id": "eqasc_validation_1523", "prediction": "all x.(Weather(x) -> ExactlyOutsideDay(x))", "score": 0}
{"id": "eqasc_validation_1523", "prediction": "all x.(Weather(x) -> WhatIsOutside(x))", "score": 0}
{"id": "eqasc_validation_1523", "prediction": "all x.(Weather(x) -> AsIsOutside(x))", "score": 0}
{"id": "eqasc_validation_1523", "prediction": "all x.(Weather(x) -> OutsideEveryDay(x))", "score": 0}
{"id": "eqasc_validation_1523", "prediction": "all x.(Weather(x) -> (Person(x) & Day(x)))", "score": 0}
{"id": "eqasc_validation_1523", "prediction": "exists x y.(Weather(x) & Day(y) & Outside(x,y))", "score": 0}
{"id": "eqasc_validation_1523", "prediction": "(Outdoor(weather) -> LikeOutside(Winter))", "score": 0}
{"id": "eqasc_validation_1524", "prediction": "all x.(SatelliteTechnology(z) -> (PredictsOutsideEachDay(x) & OutsideEachDay(x)))", "score": 0}
{"id": "eqasc_validation_1524", "prediction": "all x.(Satellite(x) -> PredictsOutside(x))", "score": 0}
{"id": "eqasc_validation_1524", "prediction": "all x.(SatelliteTechnologyServesForPrediction(x) & OutsideEachDay(x))", "score": 0}
{"id": "eqasc_validation_1524", "prediction": "all x.(SatelliteTechnology(x) -> (PredictsOutsideDays(x) & WeatherInsideDays(x)))", "score": 0}
{"id": "eqasc_validation_1524", "prediction": "all x y z w.((SatelliteTechnology(x) & (OutsideDay(y) | OutsideDay(y))) -> PredictsOutsideDiary(x,y,z))", "score": 0}
{"id": "eqasc_validation_1524", "prediction": "all x y.((SatelliteTechnology(x) & OutsideDay(y)) -> PredictsWhatIsOutsideDay(x,y))", "score": 0}
{"id": "eqasc_validation_1524", "prediction": "all x.(SatelliteTechnology(x) -> ThisUsedForPredictingWhatIsOutsideTheDay(x))", "score": 0}
{"id": "eqasc_validation_1524", "prediction": "all x y z.((SatelliteTechnology(x) & OutsideExecutiveDay(y) & Day(z)) -> PredictsWithoutSatellite(x,y,z))", "score": 0}
{"id": "eqasc_validation_1524", "prediction": "all x.(SatelliteTechnology(x) -> PredictsOutsideDays(x))", "score": 0}
{"id": "eqasc_validation_1524", "prediction": "all x y.((SatelliteTechnology(x) & OutsideDay(y)) -> Predicts(x,y))", "score": 0}
{"id": "eqasc_validation_1524", "prediction": "all x y z.((SatelliteTechnology(x) & OutsideEveryDay(y) & OutsideEveryDay(z)) -> Predicts(x,y,z))", "score": 0}
{"id": "eqasc_validation_1524", "prediction": "all x y z.((SatelliteTechnology(x) & Weather(y) & Day(z)) -> UsedForPredicting(x,y,z))", "score": 0}
{"id": "eqasc_validation_1524", "prediction": "all x y z w.((SatelliteTechnology(x) & Outside(y) & Outside(z) & Predicts(x,y,z)) -> IsInSatellite(x))", "score": 0}
{"id": "eqasc_validation_1524", "prediction": "all x y.((SatelliteTechnology(x) & OutsideDay(y)) -> PredictsWithoutSatelliteTechnology(x,y))", "score": 0}
{"id": "eqasc_validation_1524", "prediction": "all x y.((SatelliteTechnology(x) & OutsideDay(y)) -> ForecastsOutside(x,y))", "score": 0}
{"id": "eqasc_validation_1524", "prediction": "all x y z.((SatelliteTechnology(x) & OutsideYear(y) & OutsideEasternSydney(z)) -> PredictionTool(x,z))", "score": 0}
{"id": "eqasc_validation_1525", "prediction": "all x y.((Technology(x) & Meteorologist(y)) -> LocatesTornadoes(y))", "score": 0}
{"id": "eqasc_validation_1525", "prediction": "all x.((Technology(x) & Meteorologist(y)) -> DetectedTornadoes(x))", "score": 0}
{"id": "eqasc_validation_1525", "prediction": "all x.((Technology(x) & Meteorologist(x)) -> DifficultlyDetectsTornadoes(x))", "score": 0}
{"id": "eqasc_validation_1525", "prediction": "all x.((Meteorologist(x) & HasMeteorology(x)) -> ReadsTermones(x))", "score": 0}
{"id": "eqasc_validation_1525", "prediction": "all x y z.((Technology(x) & Meteorologist(y) & Tornado(z)) -> HelpsDetect(x,y,z))", "score": 0}
{"id": "eqasc_validation_1525", "prediction": "all x y.((Technology(x) & Meteorologist(y)) -> HelpsDetectTornadoes(x,y))", "score": 0}
{"id": "eqasc_validation_1525", "prediction": "all x y.((Meteodologist(x) & Tornado(y)) -> HelpsDetect(x,y))", "score": 0}
{"id": "eqasc_validation_1525", "prediction": "all x.((Technology(x) & DetectTornadoes(x)) -> HelpedMetabologists(x))", "score": 0}
{"id": "eqasc_validation_1525", "prediction": "all x.(Technology(x) -> HasHelpedDetectTornadoes(x))", "score": 0}
{"id": "eqasc_validation_1525", "prediction": "all x y.((Technology(x) & Meteorologist(y)) -> DetectsTornadoes(y,x))", "score": 0}
{"id": "eqasc_validation_1525", "prediction": "all x y.((Technology(x) & Meteorologist(y)) -> HasDetectedTornadoes(x,y))", "score": 0}
{"id": "eqasc_validation_1525", "prediction": "all x y.((Technology(x) & Meteorologist(y)) -> HasHelpedDetectTornadoes(x,y))", "score": 0}
{"id": "eqasc_validation_1525", "prediction": "all x.(TechnologyInWall(x) -> HelpsDetectTornadoes(x))", "score": 0}
{"id": "eqasc_validation_1525", "prediction": "all x y.((Technology(x) & Meteorologist(y)) -> HelpedDetectTornadoes(x,y))", "score": 0}
{"id": "eqasc_validation_1526", "prediction": "all x y z.((Meteorologist(x) & Satellite(y) & Tornado(z)) -> UsesToDetect(x,y,z))", "score": 0}
{"id": "eqasc_validation_1526", "prediction": "all x y z w.((Meteorologist(x) & Satellite(y) & Tornado(z) & (Meteorologist(w) | Meteorologist(w)) & Satellite(z)) & (Meteorologist(w) & Spot(e,y) | Spot(w)))) -> UseSatellites(x,y,Z))", "score": -1}
{"id": "eqasc_validation_1526", "prediction": "all x y z.((Meteorologist(x) & Satellite(y) & Tornado(z) & UsedToDetect(x,y,z)) -> Uses(x,y))", "score": 0}
{"id": "eqasc_validation_1526", "prediction": "all x y z.((Meteorologist(x) & Satellite(y) & Tornado(z)) -> Uses(x,y))", "score": 0}
{"id": "eqasc_validation_1526", "prediction": "all x y z w.((Meteorologist(x) & Satellite(y) & Tornado(z) & Tracks(x,y,z)) -> UsesToDetect(x,y,z))", "score": 0}
{"id": "eqasc_validation_1526", "prediction": "all x y.((Meteorologist(x) & Satellite(y)) -> UsesToDetectTornadoes(x,y))", "score": 0}
{"id": "eqasc_validation_1526", "prediction": "all x.(Meteorologist(x) -> UsesSatellites(x))", "score": 0}
{"id": "eqasc_validation_1526", "prediction": "all x y z.((Meteorologist(x) & Satellites(y) & Tornado(z)) -> UsesToDetect(x,y,z))", "score": 0}
{"id": "eqasc_validation_1527", "prediction": "all x y z;((Barometer(x) & AirPressure(y) & AirPressure(z) & Measures(x,y,z)) -> UsedToMeasure(x,y))", "score": -1}
{"id": "eqasc_validation_1527", "prediction": "all x y.((Barometer(x) & AirPressure(y)) -> Measures(x,y))", "score": 0}
{"id": "eqasc_validation_1527", "prediction": "all x.(Barometer(x) -> MeasuresAirPressure(x))", "score": 0}
{"id": "eqasc_validation_1527", "prediction": "all x y z.((Barometer(x) & AirPressure(y) & AirPressure(z)) -> Measures(x,y,z))", "score": 0}
{"id": "eqasc_validation_1527", "prediction": "all x y z.((Barometer(x) & AirPressure(y) & AirPressure(z)) -> Measures(x,y))", "score": 0}
{"id": "eqasc_validation_1527", "prediction": "all x y z.((Barometer(x) & AirPressureHydrometer(y) & AirPressureHydrometer(z)) -> Measures(x,y,z))", "score": 0}
{"id": "eqasc_validation_1527", "prediction": "all x y z.((Barometer(x) & AirPressure(y) & Pressure(z)) -> Measures(x,y,z))", "score": 0}
{"id": "eqasc_validation_1527", "prediction": "all x.((Barometer(x) & AirPressurePosition(x)) -> Measured(x))", "score": 0}
{"id": "eqasc_validation_1527", "prediction": "all x y.((Barometer(x) & AirPressure(y)) -> MeasuresAirPressure(x,y))", "score": 0}
{"id": "eqasc_validation_1528", "prediction": "all x.(AirPressurePressure(x) -> ActsOnUnitArea(x))", "score": 0}
{"id": "eqasc_validation_1528", "prediction": "all x.(AirPressure(x) -> ForceAgingOnUnitArea(x))", "score": 0}
{"id": "eqasc_validation_1528", "prediction": "all x.(AirPressurePressure(x) -> exists y.(UnitArea(y) & ActsOn(x,y))))", "score": -1}
{"id": "eqasc_validation_1528", "prediction": "all x.(AirPressure(x) -> Alligator(x))", "score": 0}
{"id": "eqasc_validation_1528", "prediction": "all x.(AirPressurePressure(x) -> EffectsOnUnitArea(x,unitArea))", "score": 0}
{"id": "eqasc_validation_1528", "prediction": "all x.(AirPressurePressure(x) -> AffectsUnitAreas(x))", "score": 0}
{"id": "eqasc_validation_1528", "prediction": "all x.(AirPressurePressure(x) -> ActionOnUnitArea(x))", "score": 0}
{"id": "eqasc_validation_1528", "prediction": "all x.(AirPressurePressure(x) -> ActionableOnUnitArea(x))", "score": 0}
{"id": "eqasc_validation_1528", "prediction": "all x y.((AirPressure(x) & UnitOnArea(y)) -> ForceAgingOn(x,y))", "score": 0}
{"id": "eqasc_validation_1528", "prediction": "all x y.((AirPressure(x) & UnitArea(y)) -> ActsOn(x,y))", "score": 0}
{"id": "eqasc_validation_1528", "prediction": "all x y.((AirPressurePressure(x) & UnitArea(y)) -> ForceActsOn(x,y))", "score": 0}
{"id": "eqasc_validation_1528", "prediction": "all x y.((AirPressurePressure(x) & UnitArea(y)) -> ForceAgingOn(x,y))", "score": 0}
{"id": "eqasc_validation_1528", "prediction": "all x y.((AirPressure(x) & UnitArea(y)) -> (AgingForce(x,y) & ActsOn(x,y)))", "score": 0}
{"id": "eqasc_validation_1528", "prediction": "all x y.((AirPressurePressure(x) & UnitArea(y)) -> ActsOn(x,y))", "score": 0}
{"id": "eqasc_validation_1529", "prediction": "all x y.((Barometer(x) & UnitArea(y)) -> MeasuresForceAction(x,y))", "score": 0}
{"id": "eqasc_validation_1529", "prediction": "all x y z.((Barometer(x) & UnitArea(y) & Force(z)) -> MeasuresOn(x,y,z))", "score": 0}
{"id": "eqasc_validation_1529", "prediction": "all x y.((Barometer(x) & UnitArea(y)) -> MeasuresForce(x,y))", "score": 0}
{"id": "eqasc_validation_1529", "prediction": "all x y z.((Barometer(x) & UnitArea(y) & Force(z)) -> MeasuredOn(x,y,z))", "score": 0}
{"id": "eqasc_validation_1529", "prediction": "all x.(Barometer(x) -> MeasuresForce(x))", "score": 0}
{"id": "eqasc_validation_1529", "prediction": "all x.(Barometer(x) -> (MeasuresForce(x) & UnitArea(x)))", "score": 0}
{"id": "eqasc_validation_1529", "prediction": "all x y z.(Barometer(x) -> (MeasuresForceAction(x,y) & UnitArea(y)))", "score": 0}
{"id": "eqasc_validation_1529", "prediction": "all x.(Barometer(x) -> MeasuresForceArea(x))", "score": 0}
{"id": "eqasc_validation_1529", "prediction": "all x y z.((Barometer(x) & UnitArea(y) & Force(z)) -> MeasuresOn(x,z))", "score": 0}
{"id": "eqasc_validation_1529", "prediction": "all x y z.((Barometer(x) & UnitArea(y) & Force(z)) -> Measures(x,z))", "score": 0}
{"id": "eqasc_validation_1529", "prediction": "all x y.((Barometer(x) & UnitArea(y)) -> MeasuresForceAtActing(x,y))", "score": 0}
{"id": "eqasc_validation_1530", "prediction": "all x.(AirPressure(x) -> Measure(x,Weight,Air))", "score": 0}
{"id": "eqasc_validation_1530", "prediction": "all x.(AirPressure(x) -> MeasureOfWeight(x))", "score": 0}
{"id": "eqasc_validation_1530", "prediction": "all x y z.((AirPressure(x) & Air(y)) -> (Measures(x,y) & Weight(z)))", "score": 0}
{"id": "eqasc_validation_1530", "prediction": "all x.(AirPressure(x) -> MeasuredWightOfAir(x))", "score": 0}
{"id": "eqasc_validation_1530", "prediction": "all x.(AirPressure(x) -> MeasuresWeightOfAir(x))", "score": 0}
{"id": "eqasc_validation_1530", "prediction": "all x.(AirPressure(x) -> MeasuresAirWeight(x))", "score": 0}
{"id": "eqasc_validation_1530", "prediction": "all x.(AirPressure(x) -> MeasuresWarmth(x))", "score": 0}
{"id": "eqasc_validation_1530", "prediction": "all x.(AirPressure(x) -> WeightOfAir(x))", "score": 0}
{"id": "eqasc_validation_1530", "prediction": "all x.(AirPressure(x) -> (MeasuresAirWeight(x) & Weight(x)))", "score": 0}
{"id": "eqasc_validation_1530", "prediction": "all x y.((AirPressure(x) & Air(y)) -> MeasuresWeight(x,y))", "score": 0}
{"id": "eqasc_validation_1531", "prediction": "all x.(Barometer(x) -> MeasuresAirWeight(x))", "score": 0}
{"id": "eqasc_validation_1531", "prediction": "all x.(Barometer(x) -> MeasuresAirWaight(x))", "score": 0}
{"id": "eqasc_validation_1531", "prediction": "all x.(Barometer(x) -> MeasuresAirWight(x))", "score": 0}
{"id": "eqasc_validation_1531", "prediction": "all x.(Barometer(x) -> MeasuresWeightOfAir(x))", "score": 0}
{"id": "eqasc_validation_1531", "prediction": "all x.(Barometer(x) -> MeasuresAirWheat(x))", "score": 0}
{"id": "eqasc_validation_1531", "prediction": "all x.(Barometer(x) -> MeasuresWeight(x,Air))", "score": 0}
{"id": "eqasc_validation_1531", "prediction": "all x.(Barometer(x) -> MeasuresWightOfAir(x))", "score": 0}
{"id": "eqasc_validation_1532", "prediction": "all x.(AtmosphericPressure(x) -> MeasuredByBarometer(x))", "score": 0}
{"id": "eqasc_validation_1532", "prediction": "all x y.((AtmosphericPressure(x) & Barometer(y)) -> MeasuredBy(x,y))", "score": 0}
{"id": "eqasc_validation_1532", "prediction": "all x y.((Barometer(x) & AtmosphericPressure(y)) -> MeasuredBy(x,y))", "score": 0}
{"id": "eqasc_validation_1532", "prediction": "all x y z.((AtmosphericPressure(x) & Barometer(y) & Barometer(z)) -> Measures(x,y,z))", "score": 0}
{"id": "eqasc_validation_1532", "prediction": "all x.(AtmosphericPressure(x) -> MeasuringByBarometer(x))", "score": 0}
{"id": "eqasc_validation_1532", "prediction": "all x y.((AtmosphericPressure(x) & Barometer(y)) -> Measures(y,x))", "score": 0}
{"id": "eqasc_validation_1532", "prediction": "all x y z w.((AtmosphericPressure(x) & Barometer(y) & Barometer(z)) -> MeasuredBy(x,y,z))", "score": 0}
{"id": "eqasc_validation_1532", "prediction": "all x.(AtmosphericPressure(x) -> MeasurableByBarometer(x))", "score": 0}
{"id": "eqasc_validation_1532", "prediction": "all x y.((Barometer(x) & ATOMSphericPressure(y)) -> MeasurableBy(x,y))", "score": 0}
{"id": "eqasc_validation_1533", "prediction": "all x y z.((Barometer(x) & AtmosphericPressure(y) & AtmosphericPressure(z)) -> Gauges(x,y,z))", "score": 0}
{"id": "eqasc_validation_1533", "prediction": "all x.(Barometer(x) -> GaugesAtmosphericPressure(x))", "score": 0}
{"id": "eqasc_validation_1533", "prediction": "all x y z.((Barometer(x) & AtmosphericPressure(y) & AtmosphericPressure(z) & VariousPressures(x,y,z)) -> Gauges(x,y,z))", "score": 0}
{"id": "eqasc_validation_1533", "prediction": "all x y.((Barometer(x) & AtmosphericPressure(y)) -> Gilts(x,y))", "score": 0}
{"id": "eqasc_validation_1533", "prediction": "all x y.((Barometer(x) & AtmosphericPressure(y)) -> GaugesAtmosphericPressure(x,y))", "score": 0}
{"id": "eqasc_validation_1533", "prediction": "all x y.((Barometer(x) & AtmosphericPressure(y)) -> Gauges(x,y))", "score": 0}
{"id": "eqasc_validation_1533", "prediction": "all x.(Barometer(x) -> GisesAtmosphericPressure(x))", "score": 0}
{"id": "eqasc_validation_1533", "prediction": "all x y.(Barometer(x) & AmbientPressure(y) & Measures(x,y))", "score": 0}
{"id": "eqasc_validation_1533", "prediction": "all x.(Barometer(x) -> GeasesAtmosphericPressure(x))", "score": 0}
{"id": "eqasc_validation_1534", "prediction": "all x y.((Air(x) & Barometer(y)) -> DeterminedWorth(x,y))", "score": 0}
{"id": "eqasc_validation_1534", "prediction": "all x y.((Air(x) & Barometer(y)) -> DeterminesWeightWith(y,x))", "score": 0}
{"id": "eqasc_validation_1534", "prediction": "all x.(Barometer(x) -> DeterminesAirWeight(x))", "score": 0}
{"id": "eqasc_validation_1534", "prediction": "all x.(AirWadth(x) -> CanBeDeletedWithBarometer(x))", "score": 0}
{"id": "eqasc_validation_1534", "prediction": "all x.(FindsBarometer(x) -> WeightOfAir(x))", "score": 0}
{"id": "eqasc_validation_1534", "prediction": "all x y.((Air(x) & Barometer(y)) -> DeterminedWeightWith(x,y))", "score": 0}
{"id": "eqasc_validation_1534", "prediction": "all x.(AirWaist(x) -> DeterminedWithBarometer(x))", "score": 0}
{"id": "eqasc_validation_1534", "prediction": "all x.(AirWeight(x) -> CanBeDeterminedWithBarometer(x))", "score": 0}
{"id": "eqasc_validation_1534", "prediction": "all x y.((Air(x) & Barometer(y)) -> WeightDetermined(m,y))", "score": 0}
{"id": "eqasc_validation_1534", "prediction": "all x.(Barometer(x) -> DeterminesWathOfAir(x))", "score": 0}
{"id": "eqasc_validation_1534", "prediction": "all x y.((Air(x) & Barometer(y)) -> DeterminesWeight(x,y))", "score": 0}
{"id": "eqasc_validation_1534", "prediction": "all x.((AirGuide(x) & Barometer(x)) -> DeterminesWaitForAir(x))", "score": 0}
{"id": "eqasc_validation_1534", "prediction": "all x.((Air(x) & Barometer(x)) -> WeightDetermination(x))", "score": 0}
{"id": "eqasc_validation_1534", "prediction": "all x y z.((Air(x) & Barometer(y) & Air(z)) -> DeterminesWeightWith(byy,z))", "score": 0}
{"id": "eqasc_validation_1534", "prediction": "all x.(AirBody(x) -> DeterminesWathWithBarometer(x))", "score": 0}
{"id": "eqasc_validation_1534", "prediction": "all x y z.((Air(x) & Barometer(y) & Air(z)) -> WeightTest(x,y,z))", "score": 0}
{"id": "eqasc_validation_1535", "prediction": "AirPressure (Barometer) - measuresairwaste.", "score": -1}
{"id": "eqasc_validation_1535", "prediction": "All x.(Barometer(x) -> MeasuresWathOfAir(x))", "score": -1}
{"id": "eqasc_validation_1535", "prediction": "All x y.((Barometer(x) & Air(y)) -> MeasuresWeight(x,y))", "score": -1}
{"id": "eqasc_validation_1535", "prediction": "All x y z.((Barometer(x) & Air(y) & Air(z)) -> MeasuresWeight(x,y))", "score": -1}
{"id": "eqasc_validation_1535", "prediction": "(MeasuresAirPresence(barometer) -> MeasuresAirWeight(barometer))", "score": 0}
{"id": "eqasc_validation_1535", "prediction": "AirPressure & BarometerMetsWeight(Baroma,Air)", "score": 0}
{"id": "eqasc_validation_1535", "prediction": "all x.(Barometer(x) -> MeasuresAirPressure(x))", "score": 0}
{"id": "eqasc_validation_1535", "prediction": "AirPressure(barometer) -> MeasuresWathOfAir(barometer))", "score": -1}
{"id": "eqasc_validation_1535", "prediction": "AirPressure(Barometer) -> MeasuresAirWeight(Barometer))", "score": -1}
{"id": "eqasc_validation_1535", "prediction": "all x.(Barometer(x) -> MeasuresAirWeight(x))", "score": 0}
{"id": "eqasc_validation_1535", "prediction": "AirPressure -Barometer measuresWeightOfAir(Barometer)", "score": -1}
{"id": "eqasc_validation_1535", "prediction": "AmountOfAirPressure(Barometer) -MassesWeightOfAir(Barometer)", "score": -1}
{"id": "eqasc_validation_1535", "prediction": "all x.(Barometer(x) -> MeasuresAirPressureWeight(x))", "score": 0}
{"id": "eqasc_validation_1535", "prediction": "all x.(Barometer(x) -> MeasuresAirPressureWight(x))", "score": 0}
{"id": "eqasc_validation_1535", "prediction": "All x y z.((Barometer(x) & AirPositive(y) & Air(z)) -> MeasuresWeight(x,z))", "score": -1}
{"id": "eqasc_validation_1535", "prediction": "AirPressure(Barometer) -measuresWeightOfAir(Barometer)", "score": -1}
{"id": "eqasc_validation_1536", "prediction": "all x y.((Barometer(x) & Air(y)) -> MeasuresWeightOfAir(x,y))", "score": 0}
{"id": "eqasc_validation_1536", "prediction": "all x y z.((Barometer(x) & Air(y) & Air(z)) -> MeasuresWeight(x,y,z))", "score": 0}
{"id": "eqasc_validation_1536", "prediction": "all x y.((Barometer(x) & Air(y)) -> MeasuresWeightAlso(x,y))", "score": 0}
{"id": "eqasc_validation_1536", "prediction": "all x.(Barometer(x) -> MeasuresAirWight(x))", "score": 0}
{"id": "eqasc_validation_1536", "prediction": "all x.(Barometer(x) -> UsedToMeasureSweatWorth(x))", "score": 0}
{"id": "eqasc_validation_1536", "prediction": "all x y.((Barometer(x) & Air(y)) -> MeasuresWeight(x,y))", "score": 0}
{"id": "eqasc_validation_1536", "prediction": "all x y z.((Barometer(x) & Air(y) & Air(z)) -> MeasuresWeightOfAir(x,y,z))", "score": 0}
{"id": "eqasc_validation_1536", "prediction": "all x y z.(Barometer(x) -> (MeasuresWeightOfAir(x,y) & MeasuresWeightOfAir(x,z)))", "score": 0}
{"id": "eqasc_validation_1536", "prediction": "all x y.((Barometer(x) & Air(y)) -> MeasuresAirWaight(x,y))", "score": 0}
{"id": "eqasc_validation_1536", "prediction": "all x.(Barometer(x) -> MeasuresAirWath(x))", "score": 0}
{"id": "eqasc_validation_1537", "prediction": "all x y.((AirPressure(x) & UnitOfArea(y)) -> ForceOfAirAgainst(x,y))", "score": 0}
{"id": "eqasc_validation_1537", "prediction": "all x y z.((AirPressure(x) & AirUnit(y) & Area(z)) -> (ForceOf(x,y,z) & Represents(x,y)))", "score": 0}
{"id": "eqasc_validation_1537", "prediction": "all x.(AirPressure(x) -> ForceOfAir(x))", "score": 0}
{"id": "eqasc_validation_1537", "prediction": "all x.(AirPressure(x) -> ForceOfAirAgainstUnitOfArea(x))", "score": 0}
{"id": "eqasc_validation_1537", "prediction": "all x y z.((AirPressure(x) & AirUnity(y) & Area(z)) -> ForceAgainst(x,y,z))", "score": 0}
{"id": "eqasc_validation_1537", "prediction": "all x y.((AirPressure(x) & UnitOfArea(y)) -> ForceOfAir(x,y))", "score": 0}
{"id": "eqasc_validation_1537", "prediction": "all x.(AirPressure(x) -> (ForceOfAir(x) & OperatesAgainstUnitOfArea(x)))", "score": 0}
{"id": "eqasc_validation_1537", "prediction": "all x y.((AirPressure(x) & AirUnit(y)) -> ForceAgainstUnitOfArea(x,y))", "score": 0}
{"id": "eqasc_validation_1537", "prediction": "all x y.((AirPressure(x) & AirUnit(y)) -> ForceAgainst(x,y))", "score": 0}
{"id": "eqasc_validation_1537", "prediction": "all x y z.((AirPressure(x) & AirUnit(y) & Area(z)) -> (ArmorNatureAgainst(x,y,z) & ForceOn(x,y,z)))", "score": 0}
{"id": "eqasc_validation_1537", "prediction": "all x y.((AirPressure(x) & AirUnit(y)) -> ForceOfAgainst(x,y))", "score": 0}
{"id": "eqasc_validation_1537", "prediction": "all x y z.((AirPressure(x) & AirUnit(y) & Area(z)) -> ForgeAllAwayAgainstUnit(x,y,z))", "score": 0}
{"id": "eqasc_validation_1538", "prediction": "all x y z.((Barometer(x) & AirUnitOfArea(y) & UnitOfArea(z)) -> MeasuresForceAgainstArea(x,y,z))", "score": 0}
{"id": "eqasc_validation_1538", "prediction": "all x.(Barometer(x) -> MeasuresAirForceAgainstUnitOfArea(x))", "score": 0}
{"id": "eqasc_validation_1538", "prediction": "all x y.((Barometer(x) & UnitOfArea(y)) -> MeasuresForceOfAirAgainstOfAreaForce(x,y))", "score": 0}
{"id": "eqasc_validation_1538", "prediction": "all x y z.(Barometer(x) & AirForce(y) & AreaForce(z) & MeasuresForce(x,y,z) & UnitOfArea(x))", "score": 0}
{"id": "eqasc_validation_1538", "prediction": "all x y z.(Barometer(x) -> (MeasuresAirForce(x,y) & UnitOfArea(z)))", "score": 0}
{"id": "eqasc_validation_1538", "prediction": "all x y z.((Barometer(x) & AirFrequencyCount(y) & Area(z)) -> MeasuresAgainst(x,y,z))", "score": 0}
{"id": "eqasc_validation_1538", "prediction": "all x y z.((Barometer(x) & AirForce(y) & UnitOfArea(z)) -> MeasuresAgainst(x,y,z))", "score": 0}
{"id": "eqasc_validation_1538", "prediction": "all x y.((Barometer(x) & AirForce(y)) -> MeasuresToUnitOfArea(x,y))", "score": 0}
{"id": "eqasc_validation_1538", "prediction": "all x.(Barometer(x) -> MeasuresAirForceAgainstAreaUnit(x))", "score": 0}
{"id": "eqasc_validation_1538", "prediction": "all x y z.((Barometer(x) & AirForceWorth(y) & UnitOfArea(z)) -> MeasuresForceAgainstAreaForce(x,y))", "score": 0}
{"id": "eqasc_validation_1538", "prediction": "all x y z.((Barometer(x) & AirForce(y) & Area(z) & MeasuresAgainst(x,y,z)) -> UnitOfArea(x,y))", "score": 0}
{"id": "eqasc_validation_1538", "prediction": "all x y z.((Barometer(x) & Air(y) & Area(z)) -> MeasuresForceAgainstUnitOfArea(x,y,z))", "score": 0}
{"id": "eqasc_validation_1538", "prediction": "all x y z.((Barometer(x) & AirForce(y) & UnitOfArea(z)) -> MeasuresAgainstAgainstUnitOfArea(x,y,z))", "score": 0}
{"id": "eqasc_validation_1538", "prediction": "all x y.(Barometer(x) -> MeasuresAirForce(x,y))", "score": 0}
{"id": "eqasc_validation_1538", "prediction": "all x y z.((Barometer(x) & AirForce(y) & AreaUnit(z)) -> MeasuresAgainst(x,y,z))", "score": 0}
{"id": "eqasc_validation_1539", "prediction": "all x.(Barometer(x) -> MeasuresWeightOfAir(x))", "score": 0}
{"id": "eqasc_validation_1539", "prediction": "all x y.((Barometer(x) & Air(y)) -> MeasuresWeight(x,y))", "score": 0}
{"id": "eqasc_validation_1539", "prediction": "all x y z.((Barometer(x) & Air(y) & Weight(z)) -> Measures(x,y,z))", "score": 0}
{"id": "eqasc_validation_1539", "prediction": "all x.(Barometer(x) -> MeasureWarmthOfAir(x))", "score": 0}
{"id": "eqasc_validation_1539", "prediction": "all x.(Barometer(x) -> MeasuresAirWight(x))", "score": 0}
{"id": "eqasc_validation_1539", "prediction": "all x.(Barometer(x) -> MeasuresAirWheight(x))", "score": 0}
{"id": "eqasc_validation_1539", "prediction": "all x.(Barometer(x) -> MeasuresWaightOfAir(x))", "score": 0}
{"id": "eqasc_validation_1540", "prediction": "All x y.((Uses(x) & ElementalMercury(y)) -> (UsedInThermometers(x) & UsedInBarometers(x) & UsedInPressureSensingDevices(y)))", "score": -1}
{"id": "eqasc_validation_1540", "prediction": "all x.(SelementalMerck(x) -> (UsedInThermometers(x) | UsedInBarometers(x) | UsedInPressureSensingDevices(x)))", "score": 0}
{"id": "eqasc_validation_1540", "prediction": "all x.(ElementaryMercury(x) -> (UsedInThermometers(x) & UsedInBarometers(x) & UsedInPressureSensingDevices(x)))", "score": 0}
{"id": "eqasc_validation_1540", "prediction": "all x y.((Standard(x) & UsesElementaryMercury(x)) -> (UsedInThermometers(x) & UsedInBarometers(x) & UsedInPressureSensingDevices(x)))", "score": 0}
{"id": "eqasc_validation_1540", "prediction": "(Uses(elementalMercer) & InThermometers(elemental) & InBarometers(elemental) & InPressureSensingDevices(elemental))", "score": 0}
{"id": "eqasc_validation_1540", "prediction": "all x.(ElementaryMercury(x) -> (UsedInThroatmeters(x) & UsedInBarometers(x) & UsedInPressureSensingDevices(x)))", "score": 0}
{"id": "eqasc_validation_1540", "prediction": "all x y z.((Use(x) & ElementalMercury(y) & (Thermometer(z) | Barometer(z) | PressureSensingDevice(z))) -> UsedIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_1540", "prediction": "All x.((Uses(x) & ElementalMercury(x)) -> (ProperWorthers(x) | ProperBarometers(x) | PressureSensingDevices(x)))", "score": -1}
{"id": "eqasc_validation_1540", "prediction": "all x y z.((Uses(x,y,z) & ElementalMercury(x)) -> (UsedInThermometers(y) | UsedInBarometers(z) | UsedInPressureSensingDevices(x)))", "score": 0}
{"id": "eqasc_validation_1540", "prediction": "all x.(ElementalMercury(x) -> (UsedInThermometers(x) | UsedInBarometers(x) | UsedInPressureSensingDevices(x)))", "score": 0}
{"id": "eqasc_validation_1540", "prediction": "all x.((CarbonMercury(x) & (Thermometers(x) | Barometers(x) | PressureSensingDevices(x))) -> UsedIn(x,y))", "score": 0}
{"id": "eqasc_validation_1540", "prediction": "all x.((ElementalMercury(x) & UsedInThermometers(x) & UsedInBarometers(x) & UsedInPressureSensingDevices(x)) -> Uses(x))", "score": 0}
{"id": "eqasc_validation_1540", "prediction": "(Uses(elementalMercer) & TemperatureMeter(r) | Barometer(r) | PressureSenser(r)))", "score": -1}
{"id": "eqasc_validation_1540", "prediction": "all x.(ElementaryMercer(x) -> (UsedInThermometers(x) | UsedInBarometers(x) | UsedInPressureSensingDevices(x)))", "score": 0}
{"id": "eqasc_validation_1540", "prediction": "exists x.(ElementalMercury(x) & UsedInThermometersBarometersPositiveSensingDevices(x))", "score": 0}
{"id": "eqasc_validation_1540", "prediction": "all x.(Crampagnesium(x) -> (UsedInThermometers(x) | UsedInBarometers(x) | UsedInPressureSensingDevices(x)))", "score": 0}
{"id": "eqasc_validation_1541", "prediction": "all x.(ElementalM mercuryHelpsMoonPressure(x) -> MeasuresAirPressure(x))", "score": -1}
{"id": "eqasc_validation_1541", "prediction": "all x.(ElementalMercury(x) -> HelpsMeterAirPressure(x))", "score": 0}
{"id": "eqasc_validation_1541", "prediction": "all x.(ElementalMercury(x) -> MeasuresAirPressure(x))", "score": 0}
{"id": "eqasc_validation_1541", "prediction": "all x y.((ElementalMercury(x) & AirPressure(y)) -> Measures(x,y))", "score": 0}
{"id": "eqasc_validation_1541", "prediction": "all x y.((ElementalMercury(x) & AirPressure(y)) -> MeasuresAerospacePressure(x,y))", "score": 0}
{"id": "eqasc_validation_1541", "prediction": "all x.((ElementalMagerium(x) & MeasuresAirPressure(x)) -> HelpsMeasure(x,airPressure))", "score": 0}
{"id": "eqasc_validation_1541", "prediction": "all x.(ElmentalMercury(x) -> MeasureAirPressure(x))", "score": 0}
{"id": "eqasc_validation_1541", "prediction": "all x y.([ElementalMercury(x) & AirPressure(y)) -> Measures(x,y))", "score": -1}
{"id": "eqasc_validation_1541", "prediction": "all x.((ElementalMercury(x) & HelpsMeteorAirPressure(x)) -> MeasuresAirPressure(x))", "score": 0}
{"id": "eqasc_validation_1541", "prediction": "all x.(ElementaryMercury(x) -> MeasuresAirPressure(x))", "score": 0}
{"id": "eqasc_validation_1541", "prediction": "all x.((ElementalMercure(x) & MeasuresAirPressure(x)) -> ElementalMercuryHelpsMeasureAeroPressure(x))", "score": 0}
{"id": "eqasc_validation_1541", "prediction": "all x y z.((ElementaryMercury(x) & AirPressure(y) & AirPressure(z)) -> Measures(x,y,z))", "score": 0}
{"id": "eqasc_validation_1541", "prediction": "all x.(ElementalCarbon(x) -> MeasuresAirPressure(x))", "score": 0}
{"id": "eqasc_validation_1541", "prediction": "all x y.((Treatment(x) & ElementalMercury(y) & MeasuresAirPressure(y)) -> Hilarious(x,y))", "score": 0}
{"id": "eqasc_validation_1542", "prediction": "all x.(SecurityGoggles(x) -> (ProtectsEyes(x) & DuringExperiments(x)))", "score": 0}
{"id": "eqasc_validation_1542", "prediction": "all x.(SafetyGoggles(x) -> (ProtectsEyes(x) & DuringExperiments(x)))", "score": 0}
{"id": "eqasc_validation_1542", "prediction": "all x y.((SafetyGlass(x) & Experiment(y) & ProtectsEyes(x,y)) -> UsedForProtectingEyes(x,y))", "score": 0}
{"id": "eqasc_validation_1542", "prediction": "all x.((SafetyGlocks(x) & Experiment(x)) -> ProtectsEyesDuringExperiment(x))", "score": 0}
{"id": "eqasc_validation_1542", "prediction": "all x y.((SafetyGoggles(x) & Eyes(y) & Experiment(y)) -> ProtectsDuring(x,y))", "score": 0}
{"id": "eqasc_validation_1542", "prediction": "all x y.((SafetyGoggles(x) & Experiment(y)) -> DesignedForProtectingEyesDuring(x,y))", "score": 0}
{"id": "eqasc_validation_1542", "prediction": "all x.(SafetyGoggles(x) -> ProtectsEyes(x))", "score": 0}
{"id": "eqasc_validation_1542", "prediction": "all x.(SafetyGlide(x) -> (ProtectsEyesInExperiments(x) & DuringExperiments(x) & DuringExperiments(x)))", "score": 0}
{"id": "eqasc_validation_1542", "prediction": "all x.(SafetyGoggles(x) -> ProtectsEyesWeeklong(x))", "score": 0}
{"id": "eqasc_validation_1542", "prediction": "all x.(SecurityGggles(x) -> (ProtectsEyes(x) & Experiments(x)))", "score": 0}
{"id": "eqasc_validation_1542", "prediction": "all x y.((SecurityGoggles(x) & Experiment(y)) -> ProtectsEyes(x,y))", "score": 0}
{"id": "eqasc_validation_1542", "prediction": "all x.(SafetyGoggles(x) -> ProtectsEyesExperiments(x))", "score": 0}
{"id": "eqasc_validation_1543", "prediction": "all x.((Product(x) & EyeIrritating(x)) -> WearGoggles(x))", "score": 0}
{"id": "eqasc_validation_1543", "prediction": "all x.((Product(x) & EyeIrritating(x)) -> WearGggles(x))", "score": 0}
{"id": "eqasc_validation_1543", "prediction": "all x.((Product(x) & EyeIrrigation(x)) -> WearGoggles(x))", "score": 0}
{"id": "eqasc_validation_1543", "prediction": "all x.((Product(x) & EyeIrritator(x)) -> WearsGops(x))", "score": 0}
{"id": "eqasc_validation_1543", "prediction": "Irritable(x) – WearsGlocks(x))", "score": -1}
{"id": "eqasc_validation_1543", "prediction": "all x.((Product(x) & EyeIrritator(x)) -> WearGoggles(x))", "score": 0}
{"id": "eqasc_validation_1543", "prediction": "all x.((Product(x) & EyeIrrigant(x)) -> WearGoopes(x))", "score": 0}
{"id": "eqasc_validation_1543", "prediction": "all x.(EyeIrritatingProduct(x) -> WearGoggles(x))", "score": 0}
{"id": "eqasc_validation_1543", "prediction": "all x.((Product(x) & EyeIrrigant(x)) -> WearGoggles(x))", "score": 0}
{"id": "eqasc_validation_1543", "prediction": "all x.((Product(x) & EyeIrrigator(x)) -> WearGums(x))", "score": 0}
{"id": "eqasc_validation_1543", "prediction": "all x.((Product(x) & EyeIrrigant(x)) -> WearGggles(x))", "score": 0}
{"id": "eqasc_validation_1543", "prediction": "all x.((Product(x) & EyeIrrigator(x)) -> WearGoggles(x))", "score": 0}
{"id": "eqasc_validation_1543", "prediction": "all x.((Product(x) & EyeIrritating(x)) -> WearGlasses(x))", "score": 0}
{"id": "eqasc_validation_1544", "prediction": "all x y.((Goggles(x) & Irritating(y)) -> SafeAgainst(x,y))", "score": 0}
{"id": "eqasc_validation_1544", "prediction": "all x.(Goggles(x) -> ProtectsAgainstIrrigants(x))", "score": 0}
{"id": "eqasc_validation_1544", "prediction": "all x.(Goggles(x) -> CanProtectAgainstIrritators(x))", "score": 0}
{"id": "eqasc_validation_1544", "prediction": "all x.(Glasses(x) -> ProtectAgainstIrritation(x))", "score": 0}
{"id": "eqasc_validation_1544", "prediction": "all x y.((Glasses(x) & Irritating(y)) -> ProtectsAgainst(x,y))", "score": 0}
{"id": "eqasc_validation_1544", "prediction": "all x y.((Goggles(x) & Irritating(y)) -> ProtectsAgainst(x,y))", "score": 0}
{"id": "eqasc_validation_1544", "prediction": "all x.(Goggles(x) -> ProtectsAgainst(x,irritants))", "score": 0}
{"id": "eqasc_validation_1544", "prediction": "all x y.((Goggle(x) & Irritating(y)) -> ProtectsAgainst(x,y))", "score": 0}
{"id": "eqasc_validation_1544", "prediction": "all x y.((Goope(x) & Irrigator(y)) -> ProtectsAgainst(x,y))", "score": 0}
{"id": "eqasc_validation_1544", "prediction": "all x.(Goggles(x) -> ProtectAgainstIrritatings(x))", "score": 0}
{"id": "eqasc_validation_1544", "prediction": "all x y.((Goggles(x) & Irritatants(y)) -> ProtectsAgainst(x,y))", "score": 0}
{"id": "eqasc_validation_1544", "prediction": "all x.(Goggles(x) -> ProtectsAgainstIrritatings(x))", "score": 0}
{"id": "eqasc_validation_1544", "prediction": "all x y z.((Goggles(x) & Irrigation(y) & Irritator(z)) -> ProtectsAgainst(x,y,z))", "score": 0}
{"id": "eqasc_validation_1544", "prediction": "all x y.((Gaggles(x) & Irritated(y)) -> CanProtectAgainst(x,y))", "score": 0}
{"id": "eqasc_validation_1544", "prediction": "all x y.((Goggles(x) & Irritatant(y)) -> ProtectsAgainst(x,y))", "score": 0}
{"id": "eqasc_validation_1544", "prediction": "all x y.((Goggles(x) & Irritating(y)) -> CanProtectAgainst(x,y))", "score": 0}
{"id": "eqasc_validation_1545", "prediction": "all x.((Eye(x) & AtBack(x)) -> Retina(x))", "score": 0}
{"id": "eqasc_validation_1545", "prediction": "inside the eye, at the back, is the retina.", "score": -1}
{"id": "eqasc_validation_1545", "prediction": "all x.((Ear(x) & InBack(x)) -> Retina(x))", "score": 0}
{"id": "eqasc_validation_1545", "prediction": "(Inside(eye) -> (Retina(e) & AtBack(e)))", "score": 0}
{"id": "eqasc_validation_1545", "prediction": "all x.((Eye(x) & Back(x)) -> Retina(x))", "score": 0}
{"id": "eqasc_validation_1545", "prediction": "all x.((Eye(x) & In(x,Eye) & At(x,Back)) -> Retina(x))", "score": 0}
{"id": "eqasc_validation_1545", "prediction": "-InsideEyes(x) & AtBackEyes(x) -> Retina(x))", "score": -1}
{"id": "eqasc_validation_1545", "prediction": "Inside theEye(retinal) -> AtBack(retinal))", "score": -1}
{"id": "eqasc_validation_1545", "prediction": "all x.((Eye(x) & Eye(x) & AtBack(x)) -> Retina(x))", "score": 0}
{"id": "eqasc_validation_1545", "prediction": "all x y.((Eye(x) & Eye(y)) -> (Inside(x,y) & AtBack(z)))", "score": 0}
{"id": "eqasc_validation_1545", "prediction": "all x y.((Eye(x) & Eye(y) & Inside(y,x) & AtBack(x,y)) -> Retina(x))", "score": 0}
{"id": "eqasc_validation_1545", "prediction": "all x.((Eye(x) & InsideEye(x) & AtBack(x)) -> Retina(x))", "score": 0}
{"id": "eqasc_validation_1545", "prediction": "all x y.((Eyes(x) & Eye(y) & Eye(x)) -> (Inside(x,y) & Back(x,y)))", "score": 0}
{"id": "eqasc_validation_1545", "prediction": "All x.((InsideEye(x) & AtBack(x)) -> Retina(x))", "score": -1}
{"id": "eqasc_validation_1545", "prediction": "all x.((Own(x) & atBack(x)) -> Retina(x))", "score": 0}
{"id": "eqasc_validation_1546", "prediction": "all x y.((SafetyGoggles(x) & Retina(y)) -> ProtectsDuringExperiments(x,y))", "score": 0}
{"id": "eqasc_validation_1546", "prediction": "all x y z.((SafetyGoggles(x) & Experiment(y)) -> (ProtectsRetina(x,y) & UsedFor(x,z)))", "score": 0}
{"id": "eqasc_validation_1546", "prediction": "all x.(SafetyGoggles(x) -> ProtectsRetina(x))", "score": 0}
{"id": "eqasc_validation_1546", "prediction": "all x.(SafetyGoggles(x) -> (ProtectsRetina(x) & DuringExperiments(x)))", "score": 0}
{"id": "eqasc_validation_1546", "prediction": "all x.(SecurityGoggles(x) -> (ProtectsRetina(x) & DuringExperiments(x)))", "score": 0}
{"id": "eqasc_validation_1546", "prediction": "all x y z.((SafetyGlo(x) & Experiment(y) & Retina(z)) -> ProtectsRetinal(x,y,z))", "score": 0}
{"id": "eqasc_validation_1546", "prediction": "all x.(SafeguardGoggles(x) -> ProtectsRetinaDuringExperiments(x))", "score": 0}
{"id": "eqasc_validation_1546", "prediction": "all x.(SafetyGoggles(x) -> (ProtectsRetinaByExperiments(x) & Experiments(x) & UsesDuringExperiments(x)))", "score": 0}
{"id": "eqasc_validation_1546", "prediction": "all x.(SafetyGlide(x) -> (ProtectsRetina(x) & DuringExperiments(x)))", "score": 0}
{"id": "eqasc_validation_1546", "prediction": "all x y z.((SafetyGoggles(x) & Experiment(y) & Retina(z)) -> ProtectsRetinal(x,y,z))", "score": 0}
{"id": "eqasc_validation_1546", "prediction": "all x.(SafetyGoggles(x) -> (ProtectsRetinalRetinal(x) & DuringExperiments(x)))", "score": 0}
{"id": "eqasc_validation_1546", "prediction": "all x y.((PittoralGlide(x) & Experiment(y)) -> (ProtectsRetina(x) & UsedForExperiments(x)))", "score": 0}
{"id": "eqasc_validation_1546", "prediction": "all x.(SafetyGloves(x) -> ProtectsRetina(x))", "score": 0}
{"id": "eqasc_validation_1546", "prediction": "all x.(SafetyGlobe(x) -> (ProtectsRetina(x) & DuringExperiments(x) & DuringExperiments(x)))", "score": 0}
{"id": "eqasc_validation_1547", "prediction": "all x.(IsFiber(x) -> (EarlyLights(x) | Goggles(x)))", "score": 0}
{"id": "eqasc_validation_1547", "prediction": "all x.((FiberPlasticEarglasses(x) | FirmPlasticGoggles(x)) -> Better(x))", "score": 0}
{"id": "eqasc_validation_1547", "prediction": "all x.((Fiber(x) & (Earglasses(x) | Goggles(x))) -> Better(x))", "score": 0}
{"id": "eqasc_validation_1547", "prediction": "all x.((Flexible(x) & (Eyes(x) | Goggles(x))) -> Better(x))", "score": 0}
{"id": "eqasc_validation_1547", "prediction": "all x.((Eyeglasses(x) | Goggles(x)) -> Better(x))", "score": 0}
{"id": "eqasc_validation_1547", "prediction": "all x.((FootPlasticEyes(x) | FoamGoggles(x)) -> Better(x))", "score": 0}
{"id": "eqasc_validation_1547", "prediction": "exists x.(FiberCellularEach(x) & (Better(x) | Better(x)))", "score": 0}
{"id": "eqasc_validation_1547", "prediction": "all x.((FiberPlasticEarplugs(x) | FirmPolyesterGoggles(x)) -> Better(x))", "score": 0}
{"id": "eqasc_validation_1547", "prediction": "all x.((Fiber(x) & (Eyes(x) | Goggles(x))) -> Better(x))", "score": 0}
{"id": "eqasc_validation_1547", "prediction": "all x.((Fixed(x) | Firm(x)) -> (Screenwatches(x) | Goggles(x)))", "score": 0}
{"id": "eqasc_validation_1547", "prediction": "all x.((Fixed(x) & (Blue(x) | Green(x))) -> Better(x))", "score": 0}
{"id": "eqasc_validation_1547", "prediction": "all x.((FiberPlasticEarlyglasses(x) | FirmPlasticGoggles(x)) -> Better(x))", "score": 0}
{"id": "eqasc_validation_1547", "prediction": "all x.((Fern(x) & (Eyeglasses(x) | Goggles(x))) -> Better(x))", "score": 0}
{"id": "eqasc_validation_1547", "prediction": "all x.((FirmPlasticEyeglasses(x) | Goggles(x)) -> Better(x))", "score": 0}
{"id": "eqasc_validation_1548", "prediction": "all x y.((Plastic(x) & Experiment(y)) -> ProtectsEyes(x,y))", "score": 0}
{"id": "eqasc_validation_1548", "prediction": "all x y z.((Plastic(x) & Experiement(y) & Eye(z)) -> ProtectsEyesDuring(x,y,z))", "score": 0}
{"id": "eqasc_validation_1548", "prediction": "all x y.((Plastic(x) & Experiement(y)) -> ProtectsEyes(x,y))", "score": 0}
{"id": "eqasc_validation_1548", "prediction": "all x y z.((Plastic(x) & Eye(y) & Experiment(z)) -> Protection(x,y,z))", "score": 0}
{"id": "eqasc_validation_1548", "prediction": "all x y.((Plastic(x) & Experiement(y)) -> ProtectsEyesBetween(x,y))", "score": 0}
{"id": "eqasc_validation_1548", "prediction": "all x.((Plastic(x) & Experiment(x)) -> ProtectsEyes(x))", "score": 0}
{"id": "eqasc_validation_1548", "prediction": "all x yl.((PlasticTreatment(x) & Experiment(y)) -> ProtectsEyes(x,y))", "score": -1}
{"id": "eqasc_validation_1548", "prediction": "all x y z.((Plastic(x) & Experiement(y) & Eye(z) & ProtectsDuring(x,y) & Experiment(y)) -> ProtectsDuring(x,z))", "score": 0}
{"id": "eqasc_validation_1548", "prediction": "all x y z.((Aesthetic(x) & Experiement(y) & Experiment(z) & Plastic(x,y)) -> ProtectsEyes(x,y,z))", "score": 0}
{"id": "eqasc_validation_1548", "prediction": "all x y.((Eyes(y) & Experiment(z)) -> ProtectsFromPlastic(x,y))", "score": 0}
{"id": "eqasc_validation_1548", "prediction": "all x y.((Plastic(x) & Experiement(y)) -> ProtectsEyesDuringExperiements(x,y))", "score": 0}
{"id": "eqasc_validation_1548", "prediction": "all x y z.((Plastic(x) & Eyes(y) & Experiement(z)) -> ProtectsDuring(x,y,z))", "score": 0}
{"id": "eqasc_validation_1548", "prediction": "all x.((Plastic(x) & Experiment(x)) -> ProtectsEyesAtExperiment(x))", "score": 0}
{"id": "eqasc_validation_1549", "prediction": "all x.(Concentration(x) -> NeededFacesShelled(x))", "score": 0}
{"id": "eqasc_validation_1549", "prediction": "all x y.((ConcentratedAcids(x) & ConcentratedAlkalis(y)) -> FeatherShield(x,y))", "score": 0}
{"id": "eqasc_validation_1549", "prediction": "all x.((ConcentratedAcids(x) & ConcentratedAlkalis(x)) -> FaceShield(x))", "score": 0}
{"id": "eqasc_validation_1549", "prediction": "all x.((ConcentratedAcids(x) & Alkali(x)) -> FaceShieldInAdditionToGalls(x))", "score": 0}
{"id": "eqasc_validation_1549", "prediction": "all x.((CentricAcids(x) & ConcentratedAlkalis(x)) -> (FaceShelter(x) & AddsGoggles(x)))", "score": 0}
{"id": "eqasc_validation_1549", "prediction": "all x y.((CentredAcid(x) & ConcentratedAlkalis(y)) -> (FaceScholar(x) & InAdditionToGoggles(x)))", "score": 0}
{"id": "eqasc_validation_1549", "prediction": "all x.((CookedAcids(x) & CookedAlkalis(x)) -> NeededInAdditionToGears(x))", "score": 0}
{"id": "eqasc_validation_1549", "prediction": "all x.((ConcentratedAcids(x) & ConcentratedAlkalis(x)) | (ConcentratedAlkalis(x) & FaceShift(x))))", "score": -1}
{"id": "eqasc_validation_1549", "prediction": "all x.((ConcentratedAcids(x) & Alkalis(x)) -> NeededFaceShift(x))", "score": 0}
{"id": "eqasc_validation_1549", "prediction": "all x.((ConcentratedAcids(x) & DedicatedAlkalis(x)) -> NeededInAdditionToGlocks(x))", "score": 0}
{"id": "eqasc_validation_1549", "prediction": "all x.((ConcentratedAcids(x) & ConcentratedAlkalis(x)) -> NeededInAdditionToGowns(x))", "score": 0}
{"id": "eqasc_validation_1549", "prediction": "all x.((CertaintedAcids(x) & ConcentratedAlkalis(x)) -> NeededInAdditionToGoggles(x))", "score": 0}
{"id": "eqasc_validation_1549", "prediction": "all x.(ConcentratedAcidsAlkalis(x) & FaceShelled(x))", "score": 0}
{"id": "eqasc_validation_1549", "prediction": "all x.((ConcentratedAcids(x) & ConcentratedAlkalis(x)) -> NeedsFacialShelf(x))", "score": 0}
{"id": "eqasc_validation_1549", "prediction": "all x.((ConcentratedAcids(x) & ConcentratedAlkalis(x)) -> NeedsFaceShield(x))", "score": 0}
{"id": "eqasc_validation_1549", "prediction": "all x y.((ConcentratedAcids(x) & ConcentratedAlkalis(y)) -> NeededInAdditionToGoggles(x,y))", "score": 0}
{"id": "eqasc_validation_1550", "prediction": "all x y z.((Acid(x) & Experiment(y) & Eyes(z)) -> Harms(x,y,z))", "score": 0}
{"id": "eqasc_validation_1550", "prediction": "all x y.((Acid(x) & Experiment(y)) -> CanHarmEyes(x,y))", "score": 0}
{"id": "eqasc_validation_1550", "prediction": "all x y z.((Acid(x) & Eye(y) & Experiment(z)) -> CanHarmOrHazard(x,y,z))", "score": 0}
{"id": "eqasc_validation_1550", "prediction": "all x y.((Acid(x) & Eyes(y) & Experiment(z)) -> CanHarmDuringAfterEyes(x,z))", "score": 0}
{"id": "eqasc_validation_1550", "prediction": "all x y z.((Acid(x) & Eyes(y) & Experiment(z) & CanHarm(x,y,z)) -> DoesHarm(x,y,z))", "score": 0}
{"id": "eqasc_validation_1550", "prediction": "all x.((Acids(x) & Experiment(x)) -> HarmsEyes(x))", "score": 0}
{"id": "eqasc_validation_1550", "prediction": "all x.((Acid(x) & Experiment(x)) -> HarmsEyes(x))", "score": 0}
{"id": "eqasc_validation_1550", "prediction": "all x y.((Acid(x) & Experiment(y)) -> HarmsEyes(x,y))", "score": 0}
{"id": "eqasc_validation_1550", "prediction": "all x y.((Acid(x) & Experiment(y)) -> EasilyHarmsEyes(x,y))", "score": 0}
{"id": "eqasc_validation_1550", "prediction": "all x y.((Acid(x) & Experiment(y)) -> HarmsEyesBeforeExpect(x,y))", "score": 0}
{"id": "eqasc_validation_1550", "prediction": "all x.((Acid(x) & Experiment(x)) -> (HarmsEyes(x) & DuringExpeditions(x)))", "score": 0}
{"id": "eqasc_validation_1550", "prediction": "all x.(Acid(x) -> (HasMoreEndsLiquidae(x) & DuringExperiments(x)))", "score": 0}
{"id": "eqasc_validation_1550", "prediction": "all x y.((Acid(x) & Experiment(y) & HasEyes(x,y)) -> HarmsEyes(x,y))", "score": 0}
{"id": "eqasc_validation_1550", "prediction": "all x.(AcidAcidsCanHarmEyes(x) DuringExperiments(x))", "score": -1}
{"id": "eqasc_validation_1550", "prediction": "all x y z.((Acid(x) & Eye(y) & Experiment(z)) -> CanHarmEyes(x,y,z))", "score": 0}
{"id": "eqasc_validation_1550", "prediction": "all x.(Acids(x) -> HarmsEyes(x))", "score": 0}
{"id": "eqasc_validation_1551", "prediction": "all x.(LabExperiment(x) -> GroupProject(x))", "score": 0}
{"id": "eqasc_validation_1551", "prediction": "(GroupProject(lab) & GroupExperiment(lab))", "score": 0}
{"id": "eqasc_validation_1551", "prediction": "(GroupProject(LabExperiment)", "score": -1}
{"id": "eqasc_validation_1552", "prediction": "all x.(SafetyGoggles(x) -> ProtectsEyes(x))", "score": 0}
{"id": "eqasc_validation_1552", "prediction": "all xy.((SafetyGloes(x) & Lab(y)) -> ProtectsEyes(x,y))", "score": -1}
{"id": "eqasc_validation_1552", "prediction": "all x.(SecurityGoggles(x) -> -ProtectsTheEyes(x))", "score": 0}
{"id": "eqasc_validation_1552", "prediction": "all x.(SafetyGoggles(x) -> ProtectionOfEyesInLab(x))", "score": 0}
{"id": "eqasc_validation_1552", "prediction": "all x y.((SafetyGear(x) & Lab(y)) -> ProtectsEyes(x,y))", "score": 0}
{"id": "eqasc_validation_1552", "prediction": "all x.(SafetyGoggles(x) -> ProtectsEyesInLab(x))", "score": 0}
{"id": "eqasc_validation_1552", "prediction": "all x y.((SafetyGoggles(x) & Eyes(y)) -> ProtectedInLab(x,y))", "score": 0}
{"id": "eqasc_validation_1552", "prediction": "all x.(SafetyGggles(x) -> ProtectsEyesInLab(x))", "score": 0}
{"id": "eqasc_validation_1552", "prediction": "all x y.([SafetyGoggles(x) & Lab(y)) -> ProtectsEyes(x,y))", "score": -1}
{"id": "eqasc_validation_1552", "prediction": "all x.(SafetyGoggles(x) -> UsedToProtectEyesInLab(x))", "score": 0}
{"id": "eqasc_validation_1552", "prediction": "all x.(SecurityGlasses(x) -> ProtectsEyesInLab(x))", "score": 0}
{"id": "eqasc_validation_1552", "prediction": "all x y.((HealthyGloge(x) & Lab(y)) -> ProtectEyes(x,y))", "score": 0}
{"id": "eqasc_validation_1552", "prediction": "all x y.((SafetyGear(x) & Lab(y)) -> ProtectsEyesInLab(x,y))", "score": 0}
{"id": "eqasc_validation_1552", "prediction": "all x.(SafetyGoggles(x) -> ItProtectsEyesInLab(x))", "score": 0}
{"id": "eqasc_validation_1552", "prediction": "all x y.((SecurityGoggles(x) & Lab(y)) -> ProtectsEyesInLab(x,y))", "score": 0}
{"id": "eqasc_validation_1552", "prediction": "all x.(SafetyGoggles(x) -> DesignedToProtectEyesInLab(x))", "score": 0}
{"id": "eqasc_validation_1553", "prediction": "all x.((Goggles(x) | SafetyGlassesWithSideshields(x)) -> Recommended(x))", "score": 0}
{"id": "eqasc_validation_1553", "prediction": "all x.(HasSideshield(x) -> (Recommended(y) & Goggles(y) | SafetyGlasses(y) & HasSideshields(y)))", "score": 0}
{"id": "eqasc_validation_1553", "prediction": "all x.((Goggles(x) | SafetyGlasses(x) & Sideshields(x)) -> Recommended(x))", "score": 0}
{"id": "eqasc_validation_1553", "prediction": "all x y.((Goggles(x) | SafetyGlasses(y) & Sideshields(x)) -> Recommended(x,y))", "score": 0}
{"id": "eqasc_validation_1553", "prediction": "all x.((Goggles(x) | SafetyGlasses(x)) & HasSideshield(x)) -> Recommended(x))", "score": -1}
{"id": "eqasc_validation_1553", "prediction": "all x.((SpaOpticalGlasses(x) | SafetyGlasses(x) & Sideshields(x)) -> Recommended(x))", "score": 0}
{"id": "eqasc_validation_1553", "prediction": "all x.((Gallol(x) | SafetyGlass(x) & Sideshield(x)) -> Recommended(x))", "score": 0}
{"id": "eqasc_validation_1553", "prediction": "all x.((Glass(x) | SafetyGlass(x) & Sideshield(x)) -> Recommended(x))", "score": 0}
{"id": "eqasc_validation_1553", "prediction": "all x.((Gggles(x) | SafetyGlasses(x) & Sideshields(x)) -> Recommended(x))", "score": 0}
{"id": "eqasc_validation_1553", "prediction": "all x.((Eligible(x) & (Goggles(x) | SafetyGownsWithSideshields(x))) -> Recommended(x))", "score": 0}
{"id": "eqasc_validation_1553", "prediction": "all x.((Goggle(x) | SafetyGlassesWithSideshields(x)) -> Recommended(x))", "score": 0}
{"id": "eqasc_validation_1553", "prediction": "all x y.((Gloogle(x) & SafetyGlasses(y) & Sideshield(x)) -> Recommended(x))", "score": 0}
{"id": "eqasc_validation_1553", "prediction": "all x.((Goggles(x) | SafetyGlasses(x)) -> HasSideshields(x))", "score": 0}
{"id": "eqasc_validation_1554", "prediction": "all x.((GlassesWithSideshields(x) & DuringExperiments(x)) -> RecommendedForProtectingEyes(x))", "score": 0}
{"id": "eqasc_validation_1554", "prediction": "all x.((Glasses(x) & Sideshields(x)) -> RecommendedForProtectingEyes(x))", "score": 0}
{"id": "eqasc_validation_1554", "prediction": "all x.((Glasses(x) & HasSideshields(x)) -> RecommendedForProtectingEyes(x))", "score": 0}
{"id": "eqasc_validation_1554", "prediction": "all x.((Glasses(x) & HasSideshields(x)) -> RecommendedForProtectingEyesDuringExperiments(x))", "score": 0}
{"id": "eqasc_validation_1554", "prediction": "all x.((Glasses(x) & Sideshields(x)) -> RecommendsToProtectEyes(x))", "score": 0}
{"id": "eqasc_validation_1554", "prediction": "all x y.((Glasses(x) & Sideshields(x)) -> RecommendedForProtectingEyes(x))", "score": 0}
{"id": "eqasc_validation_1554", "prediction": "all x.((Glasses(x) & HasSideshields(x)) -> RecommendedForProtectionOfEyesDuringExperiments(x))", "score": 0}
{"id": "eqasc_validation_1554", "prediction": "all x.((Glasses(x) & HasSideshields(x)) -> RecommendedForProtectingEyes(x,Experiments))", "score": 0}
{"id": "eqasc_validation_1555", "prediction": "all x.((SafetyGear(x) & Laboratory(x)) -> Mandatory(x))", "score": 0}
{"id": "eqasc_validation_1555", "prediction": "all x.(SafetyGear(x) -> MandatoryInLaboratory(x))", "score": 0}
{"id": "eqasc_validation_1555", "prediction": "all x.(SecurityGoggles(x) -> MandatoryInLaboratory(x))", "score": 0}
{"id": "eqasc_validation_1555", "prediction": "all x.(SafetyGoggles(x) -> MandatoryInLaboratory(x))", "score": 0}
{"id": "eqasc_validation_1555", "prediction": "all x.(Field(x) -> MandatoryInLaboratory(x))", "score": 0}
{"id": "eqasc_validation_1555", "prediction": "all x.((SecurityGear(x) & Laboratory(x)) -> Mandatory(x))", "score": 0}
{"id": "eqasc_validation_1555", "prediction": "all x.(SecurityGear(x) -> MandatoryInLaboratory(x))", "score": 0}
{"id": "eqasc_validation_1555", "prediction": "all x.((SafetyGear(x) & Lab(x)) -> Mandatory(x))", "score": 0}
{"id": "eqasc_validation_1555", "prediction": "all x.(SafetyGoggles(x) -> RequiredInLaboratory(x))", "score": 0}
{"id": "eqasc_validation_1555", "prediction": "all x y.((SecurityGear(x) & Laboratory(y)) -> Mandatory(x,y))", "score": 0}
{"id": "eqasc_validation_1555", "prediction": "all x.(SafetyGlobe(x) -> MandatoryInLaboratory(x))", "score": 0}
{"id": "eqasc_validation_1555", "prediction": "all x.(SafetyGoggles(x) -> MandatoryInLab(x))", "score": 0}
{"id": "eqasc_validation_1555", "prediction": "all x.(SafetyGown(x) -> MandatoryInLaboratory(x))", "score": 0}
{"id": "eqasc_validation_1556", "prediction": "all x.(Experiment(x) -> PerformedInLaboratory(x))", "score": 0}
{"id": "eqasc_validation_1556", "prediction": "all x y.((Experiment(x) & Laboratory(y)) -> PerformedIn(x,y))", "score": 0}
{"id": "eqasc_validation_1556", "prediction": "all.(Experiment(x) -> PerformedInLaboratory(x))", "score": -1}
{"id": "eqasc_validation_1556", "prediction": "all x.(Experiment(x) -> (PerformedInLaboratory(x) & PerformableInLaboratory(x)))", "score": 0}
{"id": "eqasc_validation_1556", "prediction": "all x y.((Experiment(x) & Lab(y)) -> PerformedIn(x,y))", "score": 0}
{"id": "eqasc_validation_1556", "prediction": "all x.(Experiment(x) -> PerformableInLaboratory(x))", "score": 0}
{"id": "eqasc_validation_1557", "prediction": "All x.(HandSettings(x) -> EyesSafetyGogglesRecommended(x))", "score": -1}
{"id": "eqasc_validation_1557", "prediction": "All x.((HomeProtectiveEquipment(x) & EyesSafetyGoggles(x)) -> Recommended(x))", "score": -1}
{"id": "eqasc_validation_1557", "prediction": "all x.(Eyes(x) -> Recommended(HasHomeProtectiveEquipment(x))", "score": -1}
{"id": "eqasc_validation_1557", "prediction": "all x.(HomeProtectiveEquipment(x) -> EyesSafetyGlugsRecommended(x))", "score": 0}
{"id": "eqasc_validation_1557", "prediction": "all x.(HomeProtectiveEquipment(x) -> EyesSafetyGloes(x))", "score": 0}
{"id": "eqasc_validation_1557", "prediction": "All x.(HomeProtectiveEquipment(x) -> EyesSafetyGuide(x))", "score": -1}
{"id": "eqasc_validation_1557", "prediction": "all x.(HybridProtectiveEquipment(x) -> EyesSafetyGlugesRecommended(x))", "score": 0}
{"id": "eqasc_validation_1557", "prediction": "(RecommendsHomeProtectiveEquipment(Eyes(e) | Recommendations(e)))", "score": -1}
{"id": "eqasc_validation_1557", "prediction": "all x.(HomeProtectiveEquipment(x) -> RecommendedEyesSafetyGoggles(x))", "score": 0}
{"id": "eqasc_validation_1557", "prediction": "all x.(HasHomeProtectiveEquipment(x) -> RecommendedEyesSafetyGoggles(x))", "score": 0}
{"id": "eqasc_validation_1557", "prediction": "all x.(HomeProtectiveEquipment(x) -> EyesSafetyGoggles(x))", "score": 0}
{"id": "eqasc_validation_1557", "prediction": "all x.((HomeProtectiveEquipment(x) & EyesSafetyGears(x)) -> Recommended(x))", "score": 0}
{"id": "eqasc_validation_1557", "prediction": "all x.(HomeProtectiveEquipmentGuggles(x) -> Recommended(x))", "score": 0}
{"id": "eqasc_validation_1557", "prediction": "All x.(HomeProtectiveEquipmentEyesCareers(x) -> RecommendedEyesSafetyGown(x))", "score": -1}
{"id": "eqasc_validation_1557", "prediction": "all x.((HomeProtectiveEquipment(x) & EyeSecurityGlugs(x)) -> Recommendation(x))", "score": 0}
{"id": "eqasc_validation_1557", "prediction": "all x.((HomeProtectiveEquipment(x) & EyesSafetyGlock(x)) -> Recommended(x))", "score": 0}
{"id": "eqasc_validation_1558", "prediction": "all x y z w.((ProtectiveEquipment(x) & Eyes(y) & Experiement(z) & During(g)) -> Protects(x,y,z))", "score": 0}
{"id": "eqasc_validation_1558", "prediction": "all x y.((ProtectiveEquipment(x) & Experiment(y)) -> ProtectsEyesDuring(x,y))", "score": 0}
{"id": "eqasc_validation_1558", "prediction": "all x.(ConductiveEquipment(x) -> (ProtectsEyesDuringExperiements(x) & ProtectsEyesDuringExperiements(x)))", "score": 0}
{"id": "eqasc_validation_1558", "prediction": "all x y.((ProtectiveEquipment(x) & Experiment(y)) -> ProtectsEyes(x,y))", "score": 0}
{"id": "eqasc_validation_1558", "prediction": "all x y.((ProtectiveEquipment(x) & Experiement(y)) -> ProtectsEyes(x,y))", "score": 0}
{"id": "eqasc_validation_1558", "prediction": "all x.(ProtectiveEquipment(x) -> ProtectsEyesDuringExperiements(x))", "score": 0}
{"id": "eqasc_validation_1558", "prediction": "all x.(ProtectiveEquipment(x) -> (ProtectsEyes(x) & Experiments(x)))", "score": 0}
{"id": "eqasc_validation_1558", "prediction": "all x y z.((ProtectiveEquipment(x) & Eyes(y) & Experiment(z)) -> ProtectsDuring(x,y,z))", "score": 0}
{"id": "eqasc_validation_1558", "prediction": "all x y.(ProtectiveEquipment(x) -> (UsedForProtectingEyes(x,y) & DuringExperiments(x,y)))", "score": 0}
{"id": "eqasc_validation_1558", "prediction": "all x y z.((ProtectiveEquipment(x) & Eyes(y) & Experiement(z)) -> ProtectedDuring(x,y,z))", "score": 0}
{"id": "eqasc_validation_1558", "prediction": "all x y z.((ProtectiveEquipment(x) & Eyes(y) & Experiement(z)) -> (Protects(x,y,z) & Protects(x,y)))", "score": 0}
{"id": "eqasc_validation_1558", "prediction": "all x y.((ProtectiveEquipment(x) & EyePositive(y)) -> ProtectsDuringExperiements(x,y))", "score": 0}
{"id": "eqasc_validation_1558", "prediction": "all x y.((ProtectiveEquipment(x) & Experiment(y)) -> ProtectingEyes(x,y))", "score": 0}
{"id": "eqasc_validation_1558", "prediction": "all x.(ProtectiveEquipment(x) -> (ProtectsEyes(x) & DuringExperiements(x)))", "score": 0}
{"id": "eqasc_validation_1559", "prediction": "all x.(Protection(x) -> (Simple(x) & Safe(x) & Cheap(x)))", "score": 0}
{"id": "eqasc_validation_1559", "prediction": "all x.(Protection(x) -> (Simple(x) & Safe(x) & Cost Effective(x)))", "score": -1}
{"id": "eqasc_validation_1559", "prediction": "all x.(Protection(x) -> (Simple(x) & Safe(x) & Inexpensive(x)))", "score": 0}
{"id": "eqasc_validation_1559", "prediction": "all x.(Protect(x) -> (Simple(x) & Safe(x) & Inexpensive(x)))", "score": 0}
{"id": "eqasc_validation_1559", "prediction": "all x.(Protect(x) -> (Simple(x) & Safe(x) & AlmostInexpensive(x)))", "score": 0}
{"id": "eqasc_validation_1559", "prediction": "all x.((Protect(x) & Simple(x) & Safe(x) & -Inexpensive(x)) -> Costly(x))", "score": 0}
{"id": "eqasc_validation_1559", "prediction": "all x.(Protection(x) -> (Simple(x) & Safe(x) & Inhabitable(x)))", "score": 0}
{"id": "eqasc_validation_1559", "prediction": "all x.(Protection(x) -> (Simple(x) & Safe(x) & u-tasty(x)))", "score": -1}
{"id": "eqasc_validation_1559", "prediction": "all x.(Protect(x) -> (Simple(x) & Safe(x) & Inefficient(x)))", "score": 0}
{"id": "eqasc_validation_1559", "prediction": "all x.(Protection(x) -> (Simple(x) & Safe(x) & ExpenseSmart(x)))", "score": 0}
{"id": "eqasc_validation_1560", "prediction": "all x.(SecurityGlowz (HasEyesSafeWorn(x) & Experiment(x)) -> UsedToKeepEyesSafe(x))", "score": -1}
{"id": "eqasc_validation_1560", "prediction": "all x y.((Compromise(x) & SafetyGear(y)) -> KeepsEyesSafe(y,x))", "score": 0}
{"id": "eqasc_validation_1560", "prediction": "all x.(SafetyGloes(x) -> KeepsEyesSafeDuringExperiments(x))", "score": 0}
{"id": "eqasc_validation_1560", "prediction": "all x y.((SafetyGoggles(x) & Experiment(y)) -> KeepsEyesSafe(x,y))", "score": 0}
{"id": "eqasc_validation_1560", "prediction": "all x.(SecurityGoggles(x) -> KeepsEyesSafe(x))", "score": 0}
{"id": "eqasc_validation_1560", "prediction": "all x y z.((SecurityGoggles(x) & Eye(y) & Experiment(z)) -> KeepsSafe(x,y,z))", "score": 0}
{"id": "eqasc_validation_1560", "prediction": "all x.(SafetyGoggles(x) -> KeepsEyesSafe(x))", "score": 0}
{"id": "eqasc_validation_1560", "prediction": "all x y.((SafetyGoggles(x) & Experiment(y) & Used(x,y)) -> KeepsEyesSafe(x))", "score": 0}
{"id": "eqasc_validation_1560", "prediction": "all x.( SafetyGlide(x) -> (KeepsEyesSafe(x) & Experiment(x)))", "score": 0}
{"id": "eqasc_validation_1560", "prediction": "all x y.((SecurityGoggles(x) & Experiment(y)) -> KeepsEyesSafe(x,y))", "score": 0}
{"id": "eqasc_validation_1560", "prediction": "all x.(SafetyGoggles(x) -> KeepsEyesSafeDuringExperiments(x))", "score": 0}
{"id": "eqasc_validation_1560", "prediction": "all x.(SafetyGlug(x) -> KeepsEyesSafe(x))", "score": 0}
{"id": "eqasc_validation_1561", "prediction": "all x.(Eyes(x) -> (Endangered(x) | Structural(x)))", "score": 0}
{"id": "eqasc_validation_1561", "prediction": "all x y.((Eye(x) & Eye(y)) -> (Organ(y) & MostElementedSymbolicalOrgan(y)))", "score": 0}
{"id": "eqasc_validation_1561", "prediction": "((Eyes(Eyes) & PicturedInOrgan(e)) | PicturedInOrgan(e,s)))", "score": -1}
{"id": "eqasc_validation_1561", "prediction": "all x.(Eyes(x) -> (MostImportantSymbolicSensitiveOrgan(x) & WelcomingSynthetic(x)))", "score": 0}
{"id": "eqasc_validation_1561", "prediction": "(SymbolicalOrgan(Eyes) & Eyes(Eyes))", "score": 0}
{"id": "eqasc_validation_1561", "prediction": "all x.(Eyes(x) & Eyes(x)) -> (LateestSymbolicalSensitiveOrgan(x) & ProbablyTheMostInsignificant(x)))", "score": -1}
{"id": "eqasc_validation_1561", "prediction": "all x.(Eye(x) -> Eyes(x))", "score": 0}
{"id": "eqasc_validation_1561", "prediction": "all x.(Eyes(x) -> (PossibileSyntheticOrgan(x) & Ears(x)))", "score": 0}
{"id": "eqasc_validation_1561", "prediction": "All x.(Eyes(x) -> (SymbolicOrgan(x) & Eye(x)))", "score": -1}
{"id": "eqasc_validation_1561", "prediction": "all x.(Eyes(x) -> Eyes(x))", "score": 0}
{"id": "eqasc_validation_1561", "prediction": "((Eyes(e) & Eyes(e)) -> ProbablyMostImportantSymbolicalSensitiveOrgan(e)))", "score": -1}
{"id": "eqasc_validation_1561", "prediction": "all x.(EyesEyes(x) -> (SympatheticOrgan(y) & MostImportant(x)))", "score": 0}
{"id": "eqasc_validation_1561", "prediction": "all x.(Eyes(x) -> (PopularSymbolicalOrgan(x) & Eyes(x)))", "score": 0}
{"id": "eqasc_validation_1561", "prediction": "all x.(Eyes(x) -> (MostInsignificantSymbolicalOrgan(x) & Eyes(x)))", "score": 0}
{"id": "eqasc_validation_1561", "prediction": "all x y.((Eye(x) & Eye(y)) -> (EssentialSensitiveOrgan(x,y) & ProbablyMostInstant(x,y)))", "score": 0}
{"id": "eqasc_validation_1561", "prediction": "all x y.((Eyes(x) & Eyes(y)) -> (ImportantSympatheticOrgan(x) & MostProminent(z))))", "score": -1}
{"id": "eqasc_validation_1562", "prediction": "all x.((SensitiveOrgan(x) & Experiment(x)) -> ProtectedBySafetyGoggles(x))", "score": 0}
{"id": "eqasc_validation_1562", "prediction": "all x y z.((SensoryOrgan(x) & SafetyGoggles(y) & Experimentation(z)) -> ProtectedBy(x,y,z))", "score": 0}
{"id": "eqasc_validation_1562", "prediction": "all x y.((SensitiveOrgan(x) & Experiment(y) & ProtectedBySafetyGoggles(x,y)) -> Protects(x,y))", "score": 0}
{"id": "eqasc_validation_1562", "prediction": "all x y z.((SensoryOrgan(x) & SafetyGoggles(y) & Experiment(z)) -> ProtectedBy(x,y,z))", "score": 0}
{"id": "eqasc_validation_1562", "prediction": "all x y.((ToleratedBySensoryOrgans(x) & Experiment(y)) -> AvailableInSafetyGears(x,y))", "score": 0}
{"id": "eqasc_validation_1562", "prediction": "all x y z.((SensoryOrgan(x) & SafetyGoggles(y) & Experiment(z) & During(x,z)) -> ProtectedBy(x,y,z))", "score": 0}
{"id": "eqasc_validation_1562", "prediction": "all x y.((SensitiveOrgan(x) & Experiment(y)) -> -SafetyGlobes(x,y))", "score": 0}
{"id": "eqasc_validation_1562", "prediction": "all x y z.((SensoryOrgan(x) & SafetyGear(y) & Experiment(z)) -> Protection(x,y,x))", "score": 0}
{"id": "eqasc_validation_1562", "prediction": "all x.((SensitiveOrgan(x) & Exposure(y)) -> ProtectionBySafetyGoggles(x,y))", "score": 0}
{"id": "eqasc_validation_1562", "prediction": "all x y z.((SensitiveOrgan(x) & SafetyGoggles(y) & Experiment(z)) -> ProtectedBy(x,y,z))", "score": 0}
{"id": "eqasc_validation_1562", "prediction": "all x y.((SensoryOrgan(x) & Experiment(y)) -> CanBeProtectedBySafetyGoggles(x,y))", "score": 0}
{"id": "eqasc_validation_1562", "prediction": "all x y z.((SensoryOrgan(x) & SafetyGoggles(y) & Experiment(z)) -> ProtectsWithGearlets(x,y,z))", "score": 0}
{"id": "eqasc_validation_1562", "prediction": "all x y.((SensitiveOrgan(x) & Experiment(y)) -> SafetyGogglesProtects(x,y))", "score": 0}
{"id": "eqasc_validation_1562", "prediction": "all x y z.((SensitiveOrgan(x) & Experiment(y) & SafetyGoggles(z) & ProtectedByDuring(x,y,z)) -> During(x,y))", "score": 0}
{"id": "eqasc_validation_1562", "prediction": "all x y.((SensitiveOrgan(x) & Experiment(y)) -> CanBeProtectedBySafetyGogglesIn(x,y))", "score": 0}
{"id": "eqasc_validation_1563", "prediction": "all x y.((Laboratory(x) & Eye(y)) -> Protection(x,y))", "score": 0}
{"id": "eqasc_validation_1563", "prediction": "all x.((Laboratory(x) & ProtectionForEyes(x)) -> Mandatory(x))", "score": 0}
{"id": "eqasc_validation_1563", "prediction": "all x.(Requires(x) -> ProtectionOfEyes(x))", "score": 0}
{"id": "eqasc_validation_1563", "prediction": "all x y.((LiquidLaboratory(x) & Eye(y)) -> ProtectionMuslim(x,y))", "score": 0}
{"id": "eqasc_validation_1563", "prediction": "all x.(Eyes(x) -> Mandatory(x))", "score": 0}
{"id": "eqasc_validation_1563", "prediction": "all x y.((Laboratory(x) & Eye(y)) -> Protects(x,y))", "score": 0}
{"id": "eqasc_validation_1563", "prediction": "all x y.((Laboratory(x) & Eyes(y)) -> MandatoryProtection(x,y))", "score": 0}
{"id": "eqasc_validation_1563", "prediction": "all x y.((Laboratory(x) & EyeHealth(y)) -> RequiredProtect(x,y))", "score": 0}
{"id": "eqasc_validation_1563", "prediction": "all x.((Laboratory(x) & ProtectionFollowingEyes(x)) -> Mandatory(x))", "score": 0}
{"id": "eqasc_validation_1563", "prediction": "all x.(EllipticFaculty(x) -> Protection(x,Eyes))", "score": 0}
{"id": "eqasc_validation_1563", "prediction": "all x.((Eyes(x) & Laboratory(x)) -> RequiredProtective(x))", "score": 0}
{"id": "eqasc_validation_1563", "prediction": "all x y.((Laboratory(x) & Eyes(y)) -> Protection(x,y))", "score": 0}
{"id": "eqasc_validation_1563", "prediction": "all x.((Laboratory(x) & ProtectsEyes(x)) -> Mandatory(x))", "score": 0}
{"id": "eqasc_validation_1563", "prediction": "all x y.((Laboratory(x) & Laboratory(y)) -> InVariety(x,y))", "score": 0}
{"id": "eqasc_validation_1563", "prediction": "all x.(Eyes(x) -> MandatoryPurification(x))", "score": 0}
{"id": "eqasc_validation_1564", "prediction": "exists x.(ScientificExperiment(x) & CanBeDangerous(x))", "score": 0}
{"id": "eqasc_validation_1564", "prediction": "exists x.(ScientificExperiment(x) & Dangerous(x))", "score": 0}
{"id": "eqasc_validation_1564", "prediction": "exists x.(ScienceExperiment(x) & -Dangerous(x))", "score": 0}
{"id": "eqasc_validation_1564", "prediction": "exists x.(ScienceExperiment(x) & Dangerous(x))", "score": 0}
{"id": "eqasc_validation_1564", "prediction": "exists x.(ScienceExperiment(x) & Dairy(x))", "score": 0}
{"id": "eqasc_validation_1565", "prediction": "all x.(SafetyGown(x) -> (ProtectsEyes(x) & FromDangerousThings(x)))", "score": 0}
{"id": "eqasc_validation_1565", "prediction": "all x.(SafetyGoggles(x) -> ProtectsEyes(x))", "score": 0}
{"id": "eqasc_validation_1565", "prediction": "all x y.((Glamp(x) & Eyes(y)) -> ProtectsFromDangerousThings(x,y))", "score": 0}
{"id": "eqasc_validation_1565", "prediction": "all x y z.((SafetyGoggles(x) & Eyes(y) & DangerousThing(z)) -> UsedToProtectFrom(x,y,z))", "score": 0}
{"id": "eqasc_validation_1565", "prediction": "all x y.((SafetyGlasses(x) & Eye Safety(y)) -> ProtectsFromDangerousThings(x))", "score": -1}
{"id": "eqasc_validation_1565", "prediction": "all x y z.((SafetyGoggles(x) & Eyes(y) & DangerousThing(z)) -> ProtectsFrom(x,y,z))", "score": 0}
{"id": "eqasc_validation_1565", "prediction": "all x y.((SafetyGloe(x) & Eye(y)) -> ProtectsFromDangerousThings(x,y))", "score": 0}
{"id": "eqasc_validation_1565", "prediction": "all x y z.((StrictlyGoggles(x) & Eyes(y) & DangerousThing(z)) -> ProtectsFrom(x,y,z))", "score": 0}
{"id": "eqasc_validation_1565", "prediction": "all x y z.((SafetyGoggles(x) & Eyes(y) & DangerousThings(z)) -> Protects(x,y,z))", "score": 0}
{"id": "eqasc_validation_1565", "prediction": "all x.(SafetyGoggles(x) -> ProtectEyesFromDangerousThings(x))", "score": 0}
{"id": "eqasc_validation_1565", "prediction": "all x y z.((SafetyGloe(x) & Eyes(y) & DangerousThing(z)) -> ProtectsFrom(x,y,z))", "score": 0}
{"id": "eqasc_validation_1565", "prediction": "all x.(SafetyGloes(x) -> (ProtectsEyes(x) & FromDangerousToys(x)))", "score": 0}
{"id": "eqasc_validation_1565", "prediction": "all x y z.((SafetyGoggles(x) & Eyes(y) & DangerousThing(z)) -> ProtectFrom(x,y,z))", "score": 0}
{"id": "eqasc_validation_1565", "prediction": "all x y z.((SafetyGoggles(x) & Eyes(y) & DangerousOther(z) & UsedToProtectFrom(x,y)) -> ProtectsFromDangerousUse(x,y,z))", "score": 0}
{"id": "eqasc_validation_1565", "prediction": "all x y z.((SafetyGoggles(x) & Eyes(y) & DangerousThings(z)) -> ProtectsYouFrom(x,y,z))", "score": 0}
{"id": "eqasc_validation_1565", "prediction": "all x y z.((SafetyGoggles(x) & Eye(y) & DangerousThing/Object(z)) -> ProtectsFromYoung(x,y,z))", "score": 0}
{"id": "eqasc_validation_1566", "prediction": "all x y.((SafetyGlasses(x) & Glide(y)) -> ProtectsEyes(x,y))", "score": 0}
{"id": "eqasc_validation_1566", "prediction": "all x y.((SafetyGlasses(x) & Goggles(y)) -> ProtectsEyes(x,y))", "score": 0}
{"id": "eqasc_validation_1566", "prediction": "all x.((SecurityGlasses(x) & SafetyGoggles(x)) -> ProtectsEyes(x))", "score": 0}
{"id": "eqasc_validation_1566", "prediction": "all x.((SafetyGlasses(x) & Goggles(x)) -> ProtectsEyes(x))", "score": 0}
{"id": "eqasc_validation_1566", "prediction": "all x y.((SecurityGlasses(x) & Goggles(y)) -> ProtectsEyes(x,y))", "score": 0}
{"id": "eqasc_validation_1566", "prediction": "all x.((SecurityGlasses(x) & Goggles(x)) -> ProtectsEyes(x))", "score": 0}
{"id": "eqasc_validation_1566", "prediction": "all x.((SecurityGlasses(x) | Goggles(x)) -> ProtectsEyes(x))", "score": 0}
{"id": "eqasc_validation_1566", "prediction": "all x.((Goggles(x) & SafetyGlasses(x)) -> ProtectsEyes(x))", "score": 0}
{"id": "eqasc_validation_1566", "prediction": "all x.(SecurityGlassesAndGoggles(x) -> ProtectsEyes(x))", "score": 0}
{"id": "eqasc_validation_1566", "prediction": "all x y z w.((SecurityGlass(x) & Goggles(y) & Eye(z)) -> Protects(x,y,z))", "score": 0}
{"id": "eqasc_validation_1566", "prediction": "all x y.((SafetyGlasses(x) & Glasses(y)) -> (ProtectsEyes(x)))", "score": 0}
{"id": "eqasc_validation_1566", "prediction": "all x.(SafetyGlassesAndGowns(x) -> ProtectTheEyes(x))", "score": 0}
{"id": "eqasc_validation_1567", "prediction": "all x.((SecurityGlasses(x) & ProtectsEyes(x)) -> UsedForExperiments(x))", "score": 0}
{"id": "eqasc_validation_1567", "prediction": "all x.(SafetyGlasses(x) -> (ProtectsEyes(x) & DuringExperiments(x)))", "score": 0}
{"id": "eqasc_validation_1567", "prediction": "all x y z.((SafetyGlasses(x) & Eyes(y) & Experiment(z)) -> (ProtectsDuring(x,y,z) & With(x,y,z)))", "score": 0}
{"id": "eqasc_validation_1567", "prediction": "all x y z.((SecurityGlass(x) & Eye(y) & Experiment(z)) -> ProtectedBefore(x,y,z))", "score": 0}
{"id": "eqasc_validation_1567", "prediction": "all x y.((Experiment(x) & SafetyGlasses(y)) -> ProtectsEyes(y,x))", "score": 0}
{"id": "eqasc_validation_1567", "prediction": "all x y.((SecurityGlasses(x) & Eyes(y) & Experiment(y)) -> GuardsDuring(x,y))", "score": 0}
{"id": "eqasc_validation_1567", "prediction": "all x y.((SafetyGlasses(x) & Eye(y)) -> ProtectsOnExperiment(x,y))", "score": 0}
{"id": "eqasc_validation_1567", "prediction": "all x y.((SecurityGlass(x) & Experiment(y)) -> ProtectsEyes(x,y))", "score": 0}
{"id": "eqasc_validation_1567", "prediction": "all x y.((SecurityGlasses(x) & Eyes(y)) -> ProtectsDuringExperiments(x,y))", "score": 0}
{"id": "eqasc_validation_1567", "prediction": "all x y.((SafetyGlass(x) & Experiment(y)) -> ProtectsEyesDuring(x,y))", "score": 0}
{"id": "eqasc_validation_1567", "prediction": "all x.(SafetyGlasses(x) -> (UsedForProtectingEyes(x) & DuringExperiments(x)))", "score": 0}
{"id": "eqasc_validation_1567", "prediction": "all x y.((SecurityGlasses(x) & Eyes(y)) -> UsedForProtectingDuringExperiment(x,y))", "score": 0}
{"id": "eqasc_validation_1567", "prediction": "all x y z.((SafetyGlasses(x) & Eyes(y) & Experiment(z)) -> ProtectsDuring(x,y,z))", "score": 0}
{"id": "eqasc_validation_1567", "prediction": "all x.(SafetyGlasses(x) -> ProtectsEyesDuringExperiments(x))", "score": 0}
{"id": "eqasc_validation_1567", "prediction": "all x y z.((SilentGlass(x) & Eyes(y) & Experiment(z)) -> (Protects(x,y,z) & During(x,y,z)))", "score": 0}
{"id": "eqasc_validation_1568", "prediction": "all x y.((LargerPupil(x) & LargerCoreas(x)) -> PermitsMoreLightToEnter(x,y))", "score": 0}
{"id": "eqasc_validation_1568", "prediction": "all x.(LargerPupil(x) & LargerCornea(x)) -> PermitsMoreLight(x))", "score": -1}
{"id": "eqasc_validation_1568", "prediction": "all x y z.((LargerPupill(x) & LargerCorea(y) & Cornea(z)) -> PermitsMoreLight(x,y,z))", "score": 0}
{"id": "eqasc_validation_1568", "prediction": "all x y z.((LargerPupil(x) & LargerCoral(y) & Cornea(z)) -> PermitsMoreLightToEnter(x,y,z))", "score": 0}
{"id": "eqasc_validation_1568", "prediction": "all x.((LargerPupil(x) & LargerCornea(x)) -> AllowsMoreLightToEnterEye(x))", "score": 0}
{"id": "eqasc_validation_1568", "prediction": "all x.((LargerPupil(x) & LargerCoracles(x)) -> PermitsMoreLight(x))", "score": 0}
{"id": "eqasc_validation_1568", "prediction": "all x y.((LargerPupill(x) & LargerCorea(y) & PermitsMoreLight(x,y)) -> MoreLightToEnter(y,z))", "score": 0}
{"id": "eqasc_validation_1568", "prediction": "all x y.((LargerPupil(x) & LargerCorea(y)) -> PermitsmoreLight(x,y))", "score": 0}
{"id": "eqasc_validation_1568", "prediction": "all x y.((LargerPupill(x) & LargerCornabulars(y)) -> PermitsMoreLight(x,y))", "score": 0}
{"id": "eqasc_validation_1568", "prediction": "all x y.((LargerPupil(x) & LargerCorea(x)) -> PermitsLight(y))", "score": 0}
{"id": "eqasc_validation_1568", "prediction": "all x y.((LargerPupil(x) & LargerCorea(y)) -> PermitsMoreLight(x))", "score": 0}
{"id": "eqasc_validation_1568", "prediction": "all x.((LargerPupil(x) & LargerCoreotomies(x)) -> AllowsMoreLight(x))", "score": 0}
{"id": "eqasc_validation_1568", "prediction": "all x y.((LargerPupil(x) & LargerCornea(y)) -> PermitsMoreLightToEnterEye(x,y))", "score": 0}
{"id": "eqasc_validation_1568", "prediction": "all x.(LargerPupil(x) & LargerCornea(x)) -> PermitsGreaterLight(x))", "score": -1}
{"id": "eqasc_validation_1568", "prediction": "all x.((LargerPupil(x) & LargerCornea(x)) -> PermitsMoreLight(x))", "score": 0}
{"id": "eqasc_validation_1568", "prediction": "all x.((LargerPupil(x) & LargerCornea(x)) -> LessLightBehindEye(x))", "score": 0}
{"id": "eqasc_validation_1569", "prediction": "all x.((SecurityGoggles(x) & SchoolPupils(y)) -> ProtectsDuringExperiments(x,y))", "score": 0}
{"id": "eqasc_validation_1569", "prediction": "all x y.((SafetyGlass(x) & Pupil(y) & Experiment(z)) -> ProtectsDuring(x,y,z))", "score": 0}
{"id": "eqasc_validation_1569", "prediction": "all x y.((SafetyGoggles(x) & Pupils(y) & Experiments(z)) -> ProtectsDuring(x,y,z))", "score": 0}
{"id": "eqasc_validation_1569", "prediction": "all x.(SafetyGloe(x) -> (ProtectsPupilsDuringExperiments(x) & UsedDuringExperiments(x)))", "score": 0}
{"id": "eqasc_validation_1569", "prediction": "all x.(SafetyGoggle(x) -> (ProtectsPupils(x) & DuringExperiments(x)))", "score": 0}
{"id": "eqasc_validation_1569", "prediction": "all x y.((SafetyGoggles(x) & Pupils(y) & Experiment(z)) -> ProtectsIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_1569", "prediction": "all x y z.((SafetyGear(x) & Pupil(y) & Experiment(z)) -> (Protects(x,y) & During(y,z) & UsedIn(x,y)))", "score": 0}
{"id": "eqasc_validation_1569", "prediction": "all x y.((Pupil(x) & Experiment(y)) -> ProtectionGoop(x,Y))", "score": 0}
{"id": "eqasc_validation_1569", "prediction": "all x y z.((SafetyGoggles(x) & Pupil(y) & Experiment(z)) -> ProtectsDuring(x,y,z))", "score": 0}
{"id": "eqasc_validation_1569", "prediction": "all x y.((SafetyGoggles(x) & Pupils(y) & Experiment(z)) -> ProtectsDuring(x,y,z))", "score": 0}
{"id": "eqasc_validation_1569", "prediction": "all x.(SafetyGoggles(x) -> ProtectsPupilsInExperiments(x))", "score": 0}
{"id": "eqasc_validation_1569", "prediction": "all x.(SafetyGlodges(x) -> UsedForProtectingPupilsDuringExperiments(x))", "score": 0}
{"id": "eqasc_validation_1569", "prediction": "all x y z.((SafetyGlounge(x) & Pupil(y) & Experiment(z)) -> ProtectsPupilsDuring(x,y,z))", "score": 0}
{"id": "eqasc_validation_1569", "prediction": "all x y.((SafetyGlasses(x) & Pupils(y)) -> ProtectsDuringExperiments(x,y))", "score": 0}
{"id": "eqasc_validation_1569", "prediction": "all x y.((SafetyGoggles(x) & PupilsDuringExperiments(y)) -> ProtectsDuringExperimentsWith(x,y))", "score": 0}
{"id": "eqasc_validation_1569", "prediction": "all x y z.((SafetyGoggles(x) & Pupils(y) & Experiment(z)) -> ProtectsDuring(x,y,z))", "score": 0}
{"id": "eqasc_validation_1570", "prediction": "all x.(Goggles(x) -> WornToProtectEyes(x))", "score": 0}
{"id": "eqasc_validation_1570", "prediction": "all x.(Goggles(x) -> WearedToProtectEyes(x))", "score": 0}
{"id": "eqasc_validation_1570", "prediction": "all x.(Goggles(x) -> (WearsToProtectEyes(x) & ProtectsEyes(x)))", "score": 0}
{"id": "eqasc_validation_1570", "prediction": "all x.(Goggles(x) -> (WornToProtectEyes(x) & WearableToProtectEyes(x)))", "score": 0}
{"id": "eqasc_validation_1570", "prediction": "all x.(Goggle(x) -> WearedToProtectEyes(x))", "score": 0}
{"id": "eqasc_validation_1570", "prediction": "all x.(Goggles(x) -> (WornToProtectEyes(x) & WornToProtectEyes(x)))", "score": 0}
{"id": "eqasc_validation_1570", "prediction": "all x y.((Goggles(x) & Eye(y)) -> WornToProtect(x,y))", "score": 0}
{"id": "eqasc_validation_1570", "prediction": "all x.(Goggle(x) -> WornToProtectEyes(x))", "score": 0}
{"id": "eqasc_validation_1571", "prediction": "all x.(Goggles(x) -> ForProtection(x))", "score": 0}
{"id": "eqasc_validation_1571", "prediction": "all x y.((Goggles(x) & Goggles(y)) -> ForProtection(x,y))", "score": 0}
{"id": "eqasc_validation_1571", "prediction": "all x.(Golggle(x) -> ForProtection(x))", "score": 0}
{"id": "eqasc_validation_1571", "prediction": "all x.(Glowl(x) -> (ForProtection(x) & -ForProtection(x)))", "score": 0}
{"id": "eqasc_validation_1572", "prediction": "all x.(Cnidarian(x) -> (Invertebrate(x) & (Jellyfish(x) | Coral(x))))", "score": 12}
{"id": "eqasc_validation_1572", "prediction": "all x.(Cnidarian(x) -> (Invertebrate(x) & (Jellyfish(x) | Corals(x))))", "score": 11}
{"id": "eqasc_validation_1572", "prediction": "all x.(Cnidarian(x) -> (Invertebrate(x) | Coral(x)))", "score": 0}
{"id": "eqasc_validation_1572", "prediction": "all x.(Cnidarian(x) -> (Invertebrate(x) & (Jamefish(x) | Coral(x))))", "score": 10}
{"id": "eqasc_validation_1572", "prediction": "all x.(Cnidarian(x) -> (Invertebrate(x) & (LittleJellyfish(x) | Coral(x))))", "score": 10}
{"id": "eqasc_validation_1572", "prediction": "all x y z.((Cnidarian(x) & (Jellyfish(y) | Coral(z))) -> Invertebrate(x))", "score": 2}
{"id": "eqasc_validation_1572", "prediction": "all x.(Cnidarian(x) -> (Invertebrate(x) | (Jerryfish(x) | Corals(x)))))", "score": -1}
{"id": "eqasc_validation_1572", "prediction": "all x.(Cnidarian(x) -> (Necrophagous(x) & (Jellyfish(x) | Corals(x))))", "score": 0}
{"id": "eqasc_validation_1572", "prediction": "all x.((Cnidarian(x) & (Jellyfish(x) | Coral(x))) -> Invertebrate(x))", "score": 1}
{"id": "eqasc_validation_1573", "prediction": "all x.(Cnidarian(x) -> AquaticAnimal(x))", "score": 0}
{"id": "eqasc_validation_1573", "prediction": "all x.(Cnidarian(x) -> Aquatic(x))", "score": 0}
{"id": "eqasc_validation_1573", "prediction": "all x y.((Cnidarian(x) & Aquarium(y)) -> CompletelyAnimal(x,y))", "score": 0}
{"id": "eqasc_validation_1574", "prediction": "all x.(Jellyfish(x) -> AquaticInvertebrate(x))", "score": 0}
{"id": "eqasc_validation_1574", "prediction": "all x.(Jellyfish(x) -> (AquaticInvertebrate(x) & Invertebrate(x)))", "score": 0}
{"id": "eqasc_validation_1574", "prediction": "all x.(Jellyfish(x) -> (AquaticInvertebrate(x) & Likes(x)))", "score": 0}
{"id": "eqasc_validation_1575", "prediction": "all x.(Coelenterate(x) -> (Invertebrate(x) | Coral(x)))", "score": 0}
{"id": "eqasc_validation_1575", "prediction": "all x.(Coelenterates(x) -> (Invertebrate(x) & (Jellyfish(x) | Coral(x))))", "score": 0}
{"id": "eqasc_validation_1575", "prediction": "all x.(Coelenterate(x) -> (Invertebrate(x) & (Jellyfish(x) | Coral(x))))", "score": 0}
{"id": "eqasc_validation_1575", "prediction": "all x.(Coelenterate(x) -> (Invertebrate(x) | (Jellyfish(x) | Corals(x)))))", "score": -1}
{"id": "eqasc_validation_1575", "prediction": "all x.(Coelenterate(x) -> (Invertebrate(x) & (Jerkfish(x) | Coral(x))))", "score": 0}
{"id": "eqasc_validation_1575", "prediction": "all x y z a.((Coelenterate(x) & Jellyfish(y) & Coral(z)) -> (Invertebrate(x) | Invertebrate(x,y,z)))", "score": 0}
{"id": "eqasc_validation_1575", "prediction": "all x.(Coelenterate(x) -> (Invertebrate(x,y) & Jellyfish(y) & Coral(y)))", "score": 0}
{"id": "eqasc_validation_1575", "prediction": "all x.(Coelenterates(x) -> (Invertebrate(x) & (J jellyfish(x) | Coral(x))))", "score": -1}
{"id": "eqasc_validation_1575", "prediction": "all x.(Coelenterate(x) -> (Invertebrate(x) & (Jewelfish(x) | Coral(x))))", "score": 0}
{"id": "eqasc_validation_1575", "prediction": "all x y.((Coelenterate(x) & (Jellyfish(y) | Coral(y))) -> Invertebrate(x))", "score": 0}
{"id": "eqasc_validation_1575", "prediction": "all x.(Coelenterate(x) -> (Invertebrate(x) & (J jellyfish(x) | Coral(x))))", "score": -1}
{"id": "eqasc_validation_1575", "prediction": "all x.(Coelenterates(x) -> (Invertebrate(x) & (ZeroJerkfish(x) | Coral(x))))", "score": 0}
{"id": "eqasc_validation_1575", "prediction": "all x.(Coelenterate(x) -> (Invertebrate(x) & (Jellyfish(x) | Corals(x))))", "score": 0}
{"id": "eqasc_validation_1576", "prediction": "all x.(Invertebrate(x) -> (-Vertebrae(x) & -Backbone(x)))", "score": 0}
{"id": "eqasc_validation_1576", "prediction": "all x.(Invertebrates(x) -> (-Vertebrae(x) | -Backbone(x)))", "score": 0}
{"id": "eqasc_validation_1576", "prediction": "All x.(Invertebrate(x) -> (IsVertebrate(x) | IsBackbone(x)))", "score": -1}
{"id": "eqasc_validation_1576", "prediction": "all x.(Invertebrates(x) -> (-Vertebrae(x) & -Backbone(x) & -Backbone(x)))", "score": 0}
{"id": "eqasc_validation_1576", "prediction": "all x.(Invertebrate(x) -> (NumberOfVertebrae(x) | NoBackbone(x)))", "score": 0}
{"id": "eqasc_validation_1576", "prediction": "all x.(Invertebrates(x) -> (-Vertebrae(x) & -Backbone(x)))", "score": 0}
{"id": "eqasc_validation_1576", "prediction": "all x.(Invertebrate(x) -> (exists y.(Vertebrae(y) & Has(x,y)) | Has(x,y))))", "score": -1}
{"id": "eqasc_validation_1576", "prediction": "all x.(Invertebrate(x) -> (-Vertebrae(x) | -Backbone(x)))", "score": 0}
{"id": "eqasc_validation_1576", "prediction": "all x.(Invertebrate(x) -> (NoVertebrae(x) | NoBackbone(x)))", "score": 0}
{"id": "eqasc_validation_1577", "prediction": "all x.((Jellyfish(x) | Coral(x)) -> (-Vertebrae(x) | -Backbone(x)))", "score": 0}
{"id": "eqasc_validation_1577", "prediction": "all x.((Jellyfish(x) | Coral(x)) -> (-HasVertebrae(x) | HasBackbone(x)))", "score": 0}
{"id": "eqasc_validation_1577", "prediction": "all x.((Jellyfish(x) & Coral(x)) -> (NoVertebrae(x) & NoBackbone(x)))", "score": 0}
{"id": "eqasc_validation_1577", "prediction": "all x y.((Jellyfish(x) & Coral(y)) -> (-Vertebrae(x) | -Backbone(x)))", "score": 0}
{"id": "eqasc_validation_1577", "prediction": "all x.((Jellyfish(x) | Coral(x)) -> (-Vertebrae(x) | NoBackbone(x)))", "score": 0}
{"id": "eqasc_validation_1577", "prediction": "all x y z.((Jellyfish(x) & Coral(y) & Veterbra(z)) -> (-Vertebrae(z) | -Backbone(z))))", "score": -1}
{"id": "eqasc_validation_1577", "prediction": "all x y z w.((Jellyfish(x) & Coral(y) & Vertebrae(z) & Backbone(w)) -> No(x,y,z,w))", "score": 0}
{"id": "eqasc_validation_1577", "prediction": "all x.(JellyfishAndCoral(x) -> (-VertebraeAndBackbone(x)))", "score": 0}
{"id": "eqasc_validation_1577", "prediction": "all x y.((Jellyfish(x) & Coral(y)) -> (-Veterbrae(x) & -Backbone(x)))", "score": 0}
{"id": "eqasc_validation_1577", "prediction": "all x.((Jellyfish(x) | Coral(x)) -> (-Verbae(x) & -Backbone(x)))", "score": 0}
{"id": "eqasc_validation_1577", "prediction": "all x.((Jellyfish(x) | Coral(x)) -> (-Vertebrae(x) & -Backbone(x)))", "score": 0}
{"id": "eqasc_validation_1577", "prediction": "(exists x.(Jellyfish(x) | Coral(x)) & -Vertebrae(x) & -Backbone(x)))", "score": -1}
{"id": "eqasc_validation_1578", "prediction": "all x.(Invertebrate(x) -> Animal(x) & HasNoBackbone(x))", "score": 0}
{"id": "eqasc_validation_1578", "prediction": "all x.(Invertebrate(x) -> -HasBackbone(x))", "score": 8}
{"id": "eqasc_validation_1578", "prediction": "all x.(Invertebrate(x) -> -Backbones(x))", "score": 4}
{"id": "eqasc_validation_1578", "prediction": "all x.(Invertebrates(x) -> (OwenBody(x) & -Backbone(x)))", "score": 0}
{"id": "eqasc_validation_1578", "prediction": "all x.(Invertebrate(x) -> (Animal(x) & -Backbone(x)))", "score": 12}
{"id": "eqasc_validation_1578", "prediction": "all x.(Invertebrates(x) -> -(Animal(x) & Backbone(x)))", "score": 0}
{"id": "eqasc_validation_1578", "prediction": "all x.(Invertebrate(x) -> AnimalWithOutBackbone(x))", "score": 0}
{"id": "eqasc_validation_1578", "prediction": "all x.(Invertebrate(x) -> Animal(x) & -Backbones(x))", "score": 4}
{"id": "eqasc_validation_1578", "prediction": "all x.(Invertebrate(x) -> HasNoBackbones(x))", "score": 0}
{"id": "eqasc_validation_1578", "prediction": "all x.(Invertebrate(x) -> Animal(x) & -Backbone(x))", "score": 12}
{"id": "eqasc_validation_1578", "prediction": "all x.(Invertebrate(x) -> (FinesBackbone(x) & -FalseBackbone(x)))", "score": 0}
{"id": "eqasc_validation_1578", "prediction": "all x.(Invertebrate(x) -> AnimalsWithoutBackbones(x))", "score": 0}
{"id": "eqasc_validation_1578", "prediction": "all x.(Invertebrate(x) -> Animal(x) -HasBackbone(x))", "score": -1}
{"id": "eqasc_validation_1578", "prediction": "all x.(Invertebrate(x) -> (HasBackbone(x) | -HasBackbone(x)))", "score": 0}
{"id": "eqasc_validation_1578", "prediction": "all x.(Invertebrates(x) -> Animal(x) & -Backbone(x))", "score": 0}
{"id": "eqasc_validation_1579", "prediction": "all x.(Cnidarian(x) -> (Cnidarian(x) & -Backbone(x)))", "score": 8}
{"id": "eqasc_validation_1579", "prediction": "all x.(Cnidarian(x) -> -HasBackbone(x))", "score": 4}
{"id": "eqasc_validation_1579", "prediction": "all x.(Cnidarian(x) -> (-Backbone(x) & -Backbone(x)))", "score": 8}
{"id": "eqasc_validation_1579", "prediction": "all x.(Cnidarian(x) -> -Backbone(x))", "score": 8}
{"id": "eqasc_validation_1579", "prediction": "all x.(NeuralBody(x) -> Cnidarian(x))", "score": 0}
{"id": "eqasc_validation_1579", "prediction": "all x.(Cnidarian(x) -> (-HasBackbone(x) & -HasBackbone(x)))", "score": 4}
{"id": "eqasc_validation_1579", "prediction": "all x.(Cnidarian(x) -> (-HasBackbone(x) | HasBackbone(x)))", "score": 0}
{"id": "eqasc_validation_1579", "prediction": "all x.(Cnidarian(x) -> -CanBackbone(x))", "score": 0}
{"id": "eqasc_validation_1579", "prediction": "all x.(Cnidarian(x) -> (-Backbone(x) & CannotHaveBackbone(x)))", "score": 0}
{"id": "eqasc_validation_1579", "prediction": "all x.(Cnidarian(x) -> (-Backbone(x) & WithoutBackbone(x)))", "score": 0}
{"id": "eqasc_validation_1579", "prediction": "all x.(Cnidarian(x) -> (-Backbones(x) | Cnidarian(x))))", "score": -1}
{"id": "eqasc_validation_1579", "prediction": "all x.(Cnidarian(x) -> -Backbones(x))", "score": 8}
{"id": "eqasc_validation_1579", "prediction": "all x.(Cnidarian(x) -> (HasNoBackbone(x) & -HasBackbone(x)))", "score": 0}
{"id": "eqasc_validation_1580", "prediction": "all x.(Jellyfish(x) -> HydrostaticSkeleton(x))", "score": 0}
{"id": "eqasc_validation_1580", "prediction": "all x.(Jellyfish(x) -> HsHydrostaticSkeleton(x))", "score": 0}
{"id": "eqasc_validation_1580", "prediction": "all x.(Jellyfish(x) -> HasHydrostaticSkeleton(x))", "score": 0}
{"id": "eqasc_validation_1581", "prediction": "all x.(Cnidarian(x) -> (AlivesIn(x,sea) & Radial(x) & Tentacled(x)))", "score": 0}
{"id": "eqasc_validation_1581", "prediction": "all x.(Cnidarian(x) -> (Radial(x) & Tentacled(x) & LivesInSeas(x)))", "score": 0}
{"id": "eqasc_validation_1581", "prediction": "all x.(Cnidarian(x) -> (RadialTentacled(x) & LivesInSeas(x)))", "score": 0}
{"id": "eqasc_validation_1581", "prediction": "all x y.((Cnidarian(x) & Ocean(y)) -> (RadialTentacled(x) & LivesIn(x,y)))", "score": 0}
{"id": "eqasc_validation_1581", "prediction": "all x.(Cnidarian(x) -> (RadialTentacledAnimal(x) & LivesInSeas(x)))", "score": 0}
{"id": "eqasc_validation_1581", "prediction": "all x.(Cnidarian(x) -> (RadiolasticTentacledAnimal(x) & LivesInSeas(x)))", "score": 0}
{"id": "eqasc_validation_1581", "prediction": "all x.(Cnidarian(x) -> (Radioltegmented(x) & Tentacled(x,y) & LivesInTheSeas(x)))", "score": 0}
{"id": "eqasc_validation_1581", "prediction": "all x.(Cnidarian(x) -> (Radial(x) & TentacledOf(x) & LivesInSeas(x)))", "score": 0}
{"id": "eqasc_validation_1581", "prediction": "all x y z.((Cnidarian(x) & RadialAnimal(y) & TentacledAnimal(z) & LivesInSeas(x)) -> LivesIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_1582", "prediction": "all x.((Jellowfish(x) | Coral(x)) -> (Rotal(x) & Tentacled(x) & LivesInSea(x)))", "score": 0}
{"id": "eqasc_validation_1582", "prediction": "all x.((Jellyfish(x) | Coral(x)) -> (Radial(x) & Tentacled(x) & LivesInSeas(x)))", "score": 0}
{"id": "eqasc_validation_1582", "prediction": "all x.((Jellyfish(x) | Coral(x)) -> (Randal(x) & Tentacled(x) & LivesInSeas(x)))", "score": 0}
{"id": "eqasc_validation_1582", "prediction": "all x.(Jellyfish(x) & Corals(x)) -> (radial(x) & Tentacled(x) & LivesInSeas(x)))", "score": -1}
{"id": "eqasc_validation_1582", "prediction": "all x.((Jellyfish(x) | Coral(x)) -> (Radiolar(x) & Tentacled(x)))", "score": 0}
{"id": "eqasc_validation_1582", "prediction": "all x y z.((Jellyfish(x) & Coral(y) & Sea(z)) -> (Rotional(x) & Tentacled(x) & LivesIn(y,z)))", "score": 0}
{"id": "eqasc_validation_1582", "prediction": "all x.((Jellyfish(x) | Coral(x)) -> (RadialTentacled(x) & LivesInSeas(x)))", "score": 0}
{"id": "eqasc_validation_1582", "prediction": "all x y.((Jellyfish(x) | Coral(y)) -> (Radial(x) & Tentacled(x) & LivesInSeas(x)))", "score": 0}
{"id": "eqasc_validation_1582", "prediction": "all x.((Jellyfish(x) | Coral(x)) -> (EstenacledAtmosphere(x) & Radial(x) & LivesInSeas(x)))", "score": 0}
{"id": "eqasc_validation_1582", "prediction": "all x.(Coral(x) -> (Radial(x) & Tentacled(x) & LivesMostlyInSeas(x)))", "score": 0}
{"id": "eqasc_validation_1582", "prediction": "all x.(Jellyfish(x) | Coral(x)) -> (Radial(x) & Tented(x) & LivesInSeas(x)))", "score": -1}
{"id": "eqasc_validation_1582", "prediction": "all x.(Jellyfish(x) | Coral(x)) -> (RadialTentacled(x) & LivesMostlyInSeas(x)))", "score": -1}
{"id": "eqasc_validation_1582", "prediction": "all x y.((Jellyfish(x) & Coral(y)) -> ((Radial(x) & Tentacled(x) & LivesInSeas(x))))", "score": 0}
{"id": "eqasc_validation_1582", "prediction": "all x y.((Jellyfish(x) & Coral(y)) -> (RadialTentacled(x,y) & LivesInSeas(x)))", "score": 0}
{"id": "eqasc_validation_1582", "prediction": "all x.((Jellyfish(x) | Coral(x)) -> (RadialSpecies(x) & Tentacled(x) & LivesInSeas(x)))", "score": 0}
{"id": "eqasc_validation_1583", "prediction": "all x.(Jellyfish(x) -> (Aquatic(x) & Aquatic(x) & Aquatic(x)))", "score": 0}
{"id": "eqasc_validation_1583", "prediction": "all x.(Jellyfish(x) -> TotallyAquatic(x))", "score": 0}
{"id": "eqasc_validation_1583", "prediction": "all x.(Jerryfish(x) -> (Aquatic(x) & Aquatic(x) & -Aquatic(x) & Aquatic(x)))", "score": 0}
{"id": "eqasc_validation_1583", "prediction": "all x.(Jellyfish(x) -> (Aquatic(x) & Aquatic(x)))", "score": 0}
{"id": "eqasc_validation_1583", "prediction": "all x.(Jellyfish(x) -> Aquatic(x))", "score": 0}
{"id": "eqasc_validation_1583", "prediction": "all x.(Jerkfish(x) -> Aquatic ((Aquatic(x) & Aquatic(x))))", "score": 0}
{"id": "eqasc_validation_1583", "prediction": "all x.(Jerkyfish(x) -> (Aquatic(x) & Aquatic(x)))", "score": 0}
{"id": "eqasc_validation_1583", "prediction": "all x.(Jellyfish(x) -> (Aquatic(x) & TotallyAquatic(x)))", "score": 0}
{"id": "eqasc_validation_1583", "prediction": "all x.(Jellyfish(x) -> (IsAquatic(x) & CompletelyAquatic(x)))", "score": 0}
{"id": "eqasc_validation_1583", "prediction": "all x.(Jellyfish(x) -> (Aquatic(x) & -Aquatic(x)))", "score": 0}
{"id": "eqasc_validation_1583", "prediction": "all x.(Jellyfish(x) -> (Aquatic(x) & CompletelyAquatic(x)))", "score": 0}
{"id": "eqasc_validation_1583", "prediction": "all x.(Jellyfish(x) -> (Aquatic(x) & Aquatic(x) & TotallyAquatic(x)))", "score": 0}
{"id": "eqasc_validation_1584", "prediction": "all x.(Invertebrate(x) -> (Animal(x) & -Spine(x) & -Backbone(x)))", "score": 6}
{"id": "eqasc_validation_1584", "prediction": "all x.(Invertebrate(x) -> (Animal(x) & (NoSpine(x) | NoBackbone(x))))", "score": 0}
{"id": "eqasc_validation_1584", "prediction": "all x.(Invertebrate(x) -> (Animal(x) & -(HasSpine(x) | HasBackbone(x)))))", "score": -1}
{"id": "eqasc_validation_1584", "prediction": "all x.(Invertebrate(x) -> (IsAnimal(x) & -NoSpine(x) & -NoBackbone(x)))", "score": 0}
{"id": "eqasc_validation_1584", "prediction": "all x.(Invertebrate(x) -> (UniqueSpine(x) | -HasBackbone(x)))", "score": 0}
{"id": "eqasc_validation_1584", "prediction": "all x.(Invertebrate(x) -> (Animal(x) & NoSpine(x) & -HasBackbone(x)))", "score": 0}
{"id": "eqasc_validation_1584", "prediction": "all x.(Invertebrate(x) -> (NoSpines(x) | NoBackbone(x)))", "score": 0}
{"id": "eqasc_validation_1584", "prediction": "all x.(Invertebrate(x) -> (Animal(x) & -(Spine(x) | Backbone(x)))))", "score": -1}
{"id": "eqasc_validation_1584", "prediction": "all x.(Invertebrate(x) -> (Animal(x) & -HasSpoke(x) & -HasBackbone(x)))", "score": 0}
{"id": "eqasc_validation_1584", "prediction": "all x.(Invertebrate(x) -> (Animal(x) & (-Spine(x) | Backbone(x))))", "score": 0}
{"id": "eqasc_validation_1584", "prediction": "all x.(Invertebrate(x) -> (Fish(x) & -HasSpine(x) & -HasBackbone(x)))", "score": 0}
{"id": "eqasc_validation_1585", "prediction": "all x.(Cnidarian(x) -> (Jellyfish(x) | Coral(x)) & -HasBackbone(x)))", "score": -1}
{"id": "eqasc_validation_1585", "prediction": "all x.(Cnidarian(x) -> (LikeJellyfishOrCoral(x) & -HasBackbone(x)))", "score": 0}
{"id": "eqasc_validation_1585", "prediction": "all x.(Cnidarian(x) -> (Hooaija(x) | Coral(x)))", "score": 0}
{"id": "eqasc_validation_1585", "prediction": "all x.((Cnidarian(x) & (Jellyfish(x) | Coral(x))) -> -BackboneBody(x))", "score": 0}
{"id": "eqasc_validation_1585", "prediction": "all x.((Cnidarian(x) & (Jellyfish(x) | Coral(x))) -> NoBackbone(x))", "score": 0}
{"id": "eqasc_validation_1585", "prediction": "all x.(Cnidarian(x) -> (Jellyfish(x) | Coral(x)) & NoBackbone(x,y)))", "score": -1}
{"id": "eqasc_validation_1585", "prediction": "all x.((Cnidarian(x) & Cnidarian(x) & Jellyfish(x) & Coral(x)) -> -Backbone(x))", "score": 3}
{"id": "eqasc_validation_1585", "prediction": "all x.(Cnidarian(x) -> (Jellyfish(x) | Corals(x)))", "score": 0}
{"id": "eqasc_validation_1585", "prediction": "all x y z.((Cnidarian(x) & (Jellyfish(y) | Coral(y)) & (Jellyfish(y) | Coral(z))) -> -Backbone(x))", "score": 2}
{"id": "eqasc_validation_1585", "prediction": "all x y.((Cnidarian(x) & Cnidarian(y)) -> (Jellyfish(x) | Coral(x)) & -HasBackbone(y)))", "score": -1}
{"id": "eqasc_validation_1585", "prediction": "all x.((Cnidarian(x) & (Jellyfish(x) | Corals(x))) -> NoBackbone(x))", "score": 0}
{"id": "eqasc_validation_1585", "prediction": "all x.(Cnidarian(x) -> ((Jellyfish(x) | Corals(x)) & NoBackbone(x)))", "score": 0}
{"id": "eqasc_validation_1585", "prediction": "all x.((Cnidarian(x) & (Jellyfish(x) | Corals(x))) -> -Backbone(x))", "score": 1}
{"id": "eqasc_validation_1586", "prediction": "all x.(Coelenterate(x) -> (Invertebrate(x) & (Jellyfish(x) | Coral(x))))", "score": 0}
{"id": "eqasc_validation_1586", "prediction": "all x.(coelenterates(x) -> (Invertebrate(x) & (Jerryfish(x) | Coral(x))))", "score": 0}
{"id": "eqasc_validation_1586", "prediction": "all x.(Coelenterates(x) -> (Invertebrate(x) & Jellyfish(x) & Coral(x)))", "score": 0}
{"id": "eqasc_validation_1586", "prediction": "all x.(Coelenterates(x) -> (Invertebrate(x) & (Jellyfish(x) | Corals(x))))", "score": 0}
{"id": "eqasc_validation_1586", "prediction": "all x y.((Coelenterate(x) & Invertebrate(y)) -> (Comparison(x,y) & Jellyfish(y) & Coral(y)))", "score": 0}
{"id": "eqasc_validation_1586", "prediction": "all x.(Coelenterate(x) -> (Invertebrate(x) & (Jellyfish(x) | Corals(x))))", "score": 0}
{"id": "eqasc_validation_1586", "prediction": "all x.(Coelenterate(x) -> (Invertebrate(x) | (Jellyfish(x) | Corals(x)))))", "score": -1}
{"id": "eqasc_validation_1586", "prediction": "all x.(Coelenterates(x) -> (Invertebrate(x) & (Jellyfish(x) | Coral(x))))", "score": 0}
{"id": "eqasc_validation_1586", "prediction": "all x.(Coelenterate(x) -> (Invertebrate(x) & Invertebrate(x) & (Jellyfish(x) | Corals(x))))", "score": 0}
{"id": "eqasc_validation_1586", "prediction": "all x y.((Colelenterate(x) & (Jellyfish(y) | Corals(y))) -> Invertebrate(x,y))", "score": 0}
{"id": "eqasc_validation_1586", "prediction": "all x.(Coelenterates(x) -> (Invertebrates(x) & IncludingJellyfish(x) | IncludingCorals(x)))", "score": 0}
{"id": "eqasc_validation_1587", "prediction": "all x.((Anenome(x) | Coral(x)) -> Invertebrate(x))", "score": 0}
{"id": "eqasc_validation_1587", "prediction": "all x.((Anesome(x) | Coral(x)) -> Invertebrate(x))", "score": 0}
{"id": "eqasc_validation_1587", "prediction": "all x.((Anemos(x) | Coral(x)) -> Invertebrate(x))", "score": 0}
{"id": "eqasc_validation_1587", "prediction": "all x.(Invertebrate(x) -> (Anenome(x) | Coral(x)))", "score": 0}
{"id": "eqasc_validation_1587", "prediction": "(Invertebrate(ANENOMO) & Invertebrate(Coral))", "score": 0}
{"id": "eqasc_validation_1588", "prediction": "all x y.((Anemometer(x) & WindSpeed(y) & Measures(x,y)) -> UsedToMeasure(x,y))", "score": 0}
{"id": "eqasc_validation_1588", "prediction": "all x y.((Anemometer(x) & WindSpeed(y)) -> Measures(x,y))", "score": 0}
{"id": "eqasc_validation_1588", "prediction": "all x y z.((Anemometer(x) & WindSpeed(y) & WindSpeed(z)) -> Measures(x,y,z))", "score": 0}
{"id": "eqasc_validation_1588", "prediction": "all x y.((Anemometer(x) & WindSpeed(y) & Measures(x,y)) -> Measures(x,y))", "score": 0}
{"id": "eqasc_validation_1588", "prediction": "all x.(Anemometer(x) -> UsedToMeasureWindSpeed(x))", "score": 0}
{"id": "eqasc_validation_1588", "prediction": "all x y.((Anemometer(x) & WindSpeed(y)) -> UsedToMeasure(x,y))", "score": 0}
{"id": "eqasc_validation_1588", "prediction": "all x.(Enemometer(x) -> MeasuresWindSpeed(x))", "score": 0}
{"id": "eqasc_validation_1588", "prediction": "all x.(Anemometer(x) -> MeasuresWindSpeed(x))", "score": 0}
{"id": "eqasc_validation_1588", "prediction": "all x.((Anemometer(x) & MeasuresWindSpeed(x)) -> UsedToMeasureWindSpeed(x))", "score": 0}
{"id": "eqasc_validation_1589", "prediction": "all x.((WindSpeedExceeds73(x)) -> Hurricane(x))", "score": 0}
{"id": "eqasc_validation_1589", "prediction": "all x.(ExceedsThirtyPercentWindSpeed(x) -> Hurricane(x))", "score": 0}
{"id": "eqasc_validation_1589", "prediction": "all x.((WindSpeedExceeds(x,73)) -> Hurricane(x))", "score": 0}
{"id": "eqasc_validation_1589", "prediction": "all x.((WindSpeedExceedsTwoTilt(x)) -> Hurricane(x))", "score": 0}
{"id": "eqasc_validation_1589", "prediction": "all x.((WindSpeed(x) & Exceeds73mph(x)) -> Hurricane(x))", "score": 0}
{"id": "eqasc_validation_1589", "prediction": "all x.(Outcomes73MPHWindSpeed(x) -> Hurricane(x))", "score": 0}
{"id": "eqasc_validation_1589", "prediction": "all x.((WindSpeed(x,73)) -> Hurricane(x))", "score": 0}
{"id": "eqasc_validation_1589", "prediction": "all x.(WoodSpeedExceeds73Ph(x) -> Hurricane(x))", "score": 0}
{"id": "eqasc_validation_1589", "prediction": "all x.((WindSpeedExceeds73PhP(x)) -> Hurricane(x))", "score": 0}
{"id": "eqasc_validation_1589", "prediction": "all x.((WindSpeed(x,73) & ExceedsType(x)) -> Hurricane(x))", "score": 0}
{"id": "eqasc_validation_1589", "prediction": "all x.((Storm(x) & WindSpeedExceedsTwoThirtymph(x)) -> UpgradedToHurricane(x))", "score": 0}
{"id": "eqasc_validation_1589", "prediction": "all x.((WindSpeed(x,73) & ExceedsWindSpeed(x,73)) -> Hurricane(x))", "score": 0}
{"id": "eqasc_validation_1589", "prediction": "all x.((WallSpeedExceeds(x,73)) -> Hurricane(x))", "score": 0}
{"id": "eqasc_validation_1590", "prediction": "all x.((Hurricane(x) & AnemometerShowsReadingAbove(x,73)) -> Occurs(x))", "score": 0}
{"id": "eqasc_validation_1590", "prediction": "all x y z.((Hurricane(x) & Anemometer(y) & Reading(z) & Above(z,73)) -> Occurs(x))", "score": 0}
{"id": "eqasc_validation_1590", "prediction": "all x y.((Hurricane(x) & Anaemometer(y) & ReadingAbove73(y,73)) -> Occurs(x))", "score": 0}
{"id": "eqasc_validation_1590", "prediction": "all x y.((Hurricane(x) & Anemometer(y) & ReadingAbove73mph(y)) -> Occurs(x))", "score": 0}
{"id": "eqasc_validation_1590", "prediction": "all x y.((Hurricane(x) & AnemometerRecord(y) & Above73Percent(y)) -> Occurs(x))", "score": 0}
{"id": "eqasc_validation_1590", "prediction": "all x.(Hurricane(x) -> (ShowsAnesmometerSignificanceBelow73mph(x) & Above73mph(x)))", "score": 0}
{"id": "eqasc_validation_1590", "prediction": "all x y z.((Hurricane(x) & Anemometer(y) & Reading(z) & AboveTwoThirteen(y) & Above73(z)) -> Occurs(x))", "score": 0}
{"id": "eqasc_validation_1590", "prediction": "all x.(Hurricane(x) -> (Anemometer(x) & ReadingAboveThirty(x)))", "score": 0}
{"id": "eqasc_validation_1590", "prediction": "all x y z.(Hurricane(x) -> (Anemometer(y) & Reading(z) & Above73mph(y,z) & AboveTier0(z))))", "score": -1}
{"id": "eqasc_validation_1590", "prediction": "all x y z.(Hurricane(x) -> (Anemometer(y) & ReadingAboveNumbers(z,73)))", "score": 0}
{"id": "eqasc_validation_1590", "prediction": "all x.(Hurricane(x) -> (Anemometer(x) & -73mphReading(x)))", "score": 0}
{"id": "eqasc_validation_1590", "prediction": "all x y z.(Hurricane(x) -> (Orbits(x) & Anemometer(y) & ReadingAboveThirty(z) & AboveThirtyPercent(z)))", "score": 0}
{"id": "eqasc_validation_1590", "prediction": "all x y z.((Hurricane(x) & Anemometer(y) & Reading(z)) -> Above(x,73))", "score": 0}
{"id": "eqasc_validation_1590", "prediction": "all x.(Hurricane(x) -> (AnemometerShowsReadingAboveThirtymph(x) & AboveThreeThirtymph(x)))", "score": 0}
{"id": "eqasc_validation_1590", "prediction": "all x.(Hurricane(x) -> (OccursWhenAnemometerShowsReadingAbove73mph(x)))", "score": 0}
{"id": "eqasc_validation_1590", "prediction": "all x y.((Hurricane(x) & Anemometer(y) & ReadingAbove(y,73)) -> Occurs(x))", "score": 0}
{"id": "eqasc_validation_1591", "prediction": "all x.(WindSpeed(x) -> AngledWithAnemometer(x))", "score": 0}
{"id": "eqasc_validation_1591", "prediction": "all x.(WindSpeed(x) -> GaussedWithAnemometer(x))", "score": 0}
{"id": "eqasc_validation_1591", "prediction": "all x.(WindSpeed(x) -> GaugedWithAnemometer(x))", "score": 0}
{"id": "eqasc_validation_1591", "prediction": "all x.(WindSpeed(x) -> GausedWithAnemometer(x))", "score": 0}
{"id": "eqasc_validation_1591", "prediction": "all x y.((WindSpeed(x) & Anemometer(y)) -> GauldsWith(x,y))", "score": 0}
{"id": "eqasc_validation_1591", "prediction": "all x y z.((WindSpeed(x) & Anemometer(y) & WindSpeed(z)) -> Gaugeable(y,z))", "score": 0}
{"id": "eqasc_validation_1591", "prediction": "all x.(WindSpeed(x) & GaussedWithAnemometer(x))", "score": 0}
{"id": "eqasc_validation_1591", "prediction": "all x.(WindSpeed(x) -> GestratedWithAnemometer(x))", "score": 0}
{"id": "eqasc_validation_1591", "prediction": "all x y.((WindSpeed(x) & Anemometer(y)) -> GaugedWith(x,y))", "score": 0}
{"id": "eqasc_validation_1591", "prediction": "all x y.((WindSpeed(x) & Anemometer(y)) -> Gauges(x,y))", "score": 0}
{"id": "eqasc_validation_1591", "prediction": "all x.(WindSpeed(x) -> GaugeableWithAnemometer(x))", "score": 0}
{"id": "eqasc_validation_1591", "prediction": "all x.(WindSpeed(x) -> GaugedByAnemometer(x))", "score": 0}
{"id": "eqasc_validation_1592", "prediction": "all x.(Anemometer(x) -> (GathearizesWind(x) & GaugesWind(x)))", "score": 0}
{"id": "eqasc_validation_1592", "prediction": "all x.(Anemometer(x) -> (GatheratesWind(x) & GagesWind(x)))", "score": 0}
{"id": "eqasc_validation_1592", "prediction": "all x y.((Anemometer(x) & Wind(y)) -> Gauges(x,y))", "score": 0}
{"id": "eqasc_validation_1592", "prediction": "all x.(Anesmometer(x) -> (GasesWind(x) & -GasesWind(x)))", "score": 0}
{"id": "eqasc_validation_1592", "prediction": "all x.(Anemometer(x) & GaugesWind(x))", "score": 0}
{"id": "eqasc_validation_1592", "prediction": "all x.((Anemometer(x) & Wind(y)) -> Gauges(x,y))", "score": 0}
{"id": "eqasc_validation_1592", "prediction": "all x y.((Anemometer(x) & WindWinter(y)) -> Gauges(x,y))", "score": 0}
{"id": "eqasc_validation_1592", "prediction": "all x.(Anemometer(x) -> GaugesWind(x))", "score": 0}
{"id": "eqasc_validation_1592", "prediction": "all x.(Anemometer(x) -> (GainsWind(x)\"))", "score": -1}
{"id": "eqasc_validation_1592", "prediction": "all x.(EnemometerGainWind(x) -> Anemometer(x))", "score": 0}
{"id": "eqasc_validation_1592", "prediction": "all x y.((Anesmometer(x) & Wind(y)) -> Gauges(x,y))", "score": 0}
{"id": "eqasc_validation_1592", "prediction": "all x.(Enemometer(x) -> (GatheringWind(x) | GaugingWind(x)))", "score": 0}
{"id": "eqasc_validation_1592", "prediction": "all x.(Anemometer(x) -> (GaugesWind(x) & Wind(x) & Wind(x)))", "score": 0}
{"id": "eqasc_validation_1593", "prediction": "all x.((WindSpeed(x) & TornadoSeverity(x)) -> EstimatedByDamage(x))", "score": 0}
{"id": "eqasc_validation_1593", "prediction": "all x.((WindSpeed(x) & TwisterSeverity(x)) -> EstimatedByDamage(x))", "score": 0}
{"id": "eqasc_validation_1593", "prediction": "all x y.((Tornado(x) & WindSpeed(x) & Severity(x)) -> DamageCaused(y))", "score": 0}
{"id": "eqasc_validation_1593", "prediction": "all x y.((WindSpeed(x) & Tornado(y) & Damage(x)) -> EstimatedByDamage(x))", "score": 0}
{"id": "eqasc_validation_1593", "prediction": "all x y.((WindSpeed(x) & Tornado(y)) -> (EstimatedByDamage(x) & EstimatedByDamage(x)))", "score": 0}
{"id": "eqasc_validation_1593", "prediction": "all x.(Tornado(x) -> (WindSpeed(x) | Gravity(x)) & WindSpeed(x) & Gravity(x)))", "score": -1}
{"id": "eqasc_validation_1593", "prediction": "all x y.((Tornado(x) & WindSpeed(y) & Gravity(y)) -> Distance(x,y))", "score": 0}
{"id": "eqasc_validation_1593", "prediction": "all x y.((WindSpeed(x) & Tornado(y)) -> (EstimatedByDamage(x,y) & EstimatedBySeverity(x,y)))", "score": 0}
{"id": "eqasc_validation_1593", "prediction": "all x.(Tornado(x) -> (WindSpeed(x) & SevereSeverity(x)))", "score": 0}
{"id": "eqasc_validation_1593", "prediction": "all x.((WindSpeed(x) & TornadoEffect(x)) -> EstimatedByDamage(x))", "score": 0}
{"id": "eqasc_validation_1593", "prediction": "all x y.((WindSpeed(x) & Tornado(y) & Damage(z) & Various(x,y)) -> AssuagedBy(x,z))", "score": 0}
{"id": "eqasc_validation_1593", "prediction": "all x y.((SwiftSpeed(x) & Tornado(y)) -> (Establishes(x,y) & Damage(x)))", "score": 0}
{"id": "eqasc_validation_1593", "prediction": "all x y.((WindSpeed(x) & Tornado(y)) -> EstimatedBy(x,y))", "score": 0}
{"id": "eqasc_validation_1594", "prediction": "all x.(Anemometer(x) -> EstimateDamageOfWind(x))", "score": 0}
{"id": "eqasc_validation_1594", "prediction": "all x y z.((Anemometer(x) & WindDamage(y) & WindDrive(z)) -> Estimates(x,y,z))", "score": 0}
{"id": "eqasc_validation_1594", "prediction": "all x.(Anemometer(x) -> EstimatesWindDamage(x))", "score": 0}
{"id": "eqasc_validation_1594", "prediction": "all x.(Anemometer(x) -> EstimatesDamageByWind(x))", "score": 0}
{"id": "eqasc_validation_1594", "prediction": "all x y.((Anemometer(x) & Wind(y)) -> EstimatesDamage(x,y))", "score": 0}
{"id": "eqasc_validation_1594", "prediction": "all x.(Anemometer(x) -> (EstimatesDamage(x) & CausedByWind(x)))", "score": 0}
{"id": "eqasc_validation_1594", "prediction": "all x!(EnoughMotor(x) -> EstimatesWindDamage(x))", "score": 0}
{"id": "eqasc_validation_1594", "prediction": "all x.(Anemometer(x) -> EstimateDamageByWind(x))", "score": 0}
{"id": "eqasc_validation_1595", "prediction": "all x.(Hurricane(x) -> WindSpeedAtLeast74Kmph(x))", "score": 0}
{"id": "eqasc_validation_1595", "prediction": "all x.(Hurricane(x) -> WindSpeed(x,y))", "score": 0}
{"id": "eqasc_validation_1595", "prediction": "all x.(Hurricane(x) -> WindSpeed(x,AtLeast,74))", "score": 0}
{"id": "eqasc_validation_1595", "prediction": "all x.(Hurricane(x) -> WindSpeedAtLeast74MPH(x))", "score": 0}
{"id": "eqasc_validation_1595", "prediction": "all x.(Hurricane(x) -> HasWindSpeed(x,y))", "score": 0}
{"id": "eqasc_validation_1595", "prediction": "all x.(Hurricane(x) -> WindSpeedAtLeast(x,74))", "score": 0}
{"id": "eqasc_validation_1595", "prediction": "all x.(Hurricane(x) -> WindSpeed(x,TiefTy))", "score": 0}
{"id": "eqasc_validation_1595", "prediction": "all x.(Hurricane(x) -> WindSpeed(x,(Y) & UpTo(y,74)))", "score": -1}
{"id": "eqasc_validation_1595", "prediction": "all x.(Hurricane(x) -> WindSpeed(x,AtLeast(x,74))", "score": -1}
{"id": "eqasc_validation_1595", "prediction": "all x.(Hurricane(x) -> WindSpeed(x,a) & -75(a)))", "score": -1}
{"id": "eqasc_validation_1595", "prediction": "all x.(Hurricane(x) -> WindSpeed(x,at) & WindSpeed(x,70))", "score": 0}
{"id": "eqasc_validation_1595", "prediction": "all x y.((Hurricane(x) & WindSpeed(y)) -> Has(x,y))", "score": 0}
{"id": "eqasc_validation_1596", "prediction": "all x y z.((Anemometer(x) & Hurricane(y) & Hurricane(z)) -> CanMeasure(x,y,z))", "score": 0}
{"id": "eqasc_validation_1596", "prediction": "all x.(Anemometer(x) -> MeasuresHurricane(x))", "score": 0}
{"id": "eqasc_validation_1596", "prediction": "all x.(Elemometer(x) -> -MeasuresHurricane(x),Hurricane(y))", "score": -1}
{"id": "eqasc_validation_1596", "prediction": "all x.(Serendipity(x) & MeasuresHurricane(x))", "score": 0}
{"id": "eqasc_validation_1596", "prediction": "all x y.((Anesometer(x) & Hurricane(y)) -> Measures(x,y))", "score": 0}
{"id": "eqasc_validation_1596", "prediction": "all x.((Anemometer(x) & Hurricane(y)) -> Measures(x,y))", "score": 0}
{"id": "eqasc_validation_1596", "prediction": "all x y.((Anemometer(x) & Hurricane(y)) -> Measures(x,y))", "score": 0}
{"id": "eqasc_validation_1596", "prediction": "all x y z.((Anemometer(x) & Hurricane(y) & Hurricane(z)) -> MeasuresWith(x,y,z))", "score": 0}
{"id": "eqasc_validation_1596", "prediction": "all x.(Anemometer(x) -> (CanMeasureHurricane(x) & Hurricane(x)))", "score": 0}
{"id": "eqasc_validation_1596", "prediction": "all x.(Enemometer(x) -> MeasureHurricane(x))", "score": 0}
{"id": "eqasc_validation_1596", "prediction": "all x.(Anemometer(x) -> CanMeasureHurricane(x))", "score": 0}
{"id": "eqasc_validation_1596", "prediction": "all x y.((Anesmometer(x) & Hurricane(y)) -> Measures(x,y))", "score": 0}
{"id": "eqasc_validation_1597", "prediction": "all x.(Anemometer(x) -> MeasuresWindForce(x))", "score": 0}
{"id": "eqasc_validation_1597", "prediction": "all x.(Anemometer(x) & MeasuresWindForce(x))", "score": 0}
{"id": "eqasc_validation_1597", "prediction": "all x.(Anemometer(x) -> MeasuresFrequencyOfWind(x))", "score": 0}
{"id": "eqasc_validation_1597", "prediction": "all x.(Anemometer(x) -> SizesWindForce(x))", "score": 0}
{"id": "eqasc_validation_1597", "prediction": "all x y.((Emometer(x) & Wind(y)) -> MeasuresFast(x,y))", "score": 0}
{"id": "eqasc_validation_1597", "prediction": "all x.((Device(x) & MeasuresWindForce(x)) -> Anemometer(x))", "score": 0}
{"id": "eqasc_validation_1597", "prediction": "all x.(Emometer(x) -> (MeasuresWindForce(x) & WindForce(x)))", "score": 0}
{"id": "eqasc_validation_1597", "prediction": "all x.(Anemometer(x) -> MeasuresForceOfWind(x))", "score": 0}
{"id": "eqasc_validation_1598", "prediction": "all x y.((Wind(x) & Force(y)) -> MeasuresSpeed(x,y))", "score": 0}
{"id": "eqasc_validation_1598", "prediction": "all x.(FreshOfWind(x) -> CanBeMeasuredWindSpeed(x))", "score": 0}
{"id": "eqasc_validation_1598", "prediction": "all x.(NatureOfWind(x) -> MeasuresSpeed(x))", "score": 0}
{"id": "eqasc_validation_1598", "prediction": "all x y.((Wind(x) & WindStrength(y)) -> MeasureSpeed(x,y))", "score": 0}
{"id": "eqasc_validation_1598", "prediction": "all x y z.((WindForce(x) & Wind(y) & Speed(z)) -> CanBeMeteorized(x,y,z))", "score": 0}
{"id": "eqasc_validation_1598", "prediction": "all x y.((Wind(x) & WindStrength(y)) -> CanMeasureSpeed(x,y))", "score": 0}
{"id": "eqasc_validation_1598", "prediction": "all x.(WindFactors(x) -> MeasureSpeed(x))", "score": 0}
{"id": "eqasc_validation_1598", "prediction": "all x.(WoodForce(x) -> MeasureSpeedWithForce(x))", "score": 0}
{"id": "eqasc_validation_1598", "prediction": "all x.(WindForce(x) -> YouCanMeteorSpeed(x))", "score": 0}
{"id": "eqasc_validation_1598", "prediction": "all x.((WindForce(x) & WindSpeedMetaData(x)) -> MeasuresSpeed(x,wind))", "score": 0}
{"id": "eqasc_validation_1598", "prediction": "all x.((WindForce(x) & WindSpeed(x)) -> MeasuresSpeed(x))", "score": 0}
{"id": "eqasc_validation_1598", "prediction": "all x.(WindForce(x) -> MeasuresSpeed(x))", "score": 0}
{"id": "eqasc_validation_1598", "prediction": "all x y z.((Wind(x) & ForceOf(y) & Speed(z)) -> MeasuresUsing(x,y,z))", "score": 0}
{"id": "eqasc_validation_1598", "prediction": "all x y z.((Wind(x) & Wind(y) & Speed(z)) -> MeasuresForce(x,y,z))", "score": 0}
{"id": "eqasc_validation_1598", "prediction": "(MeasuresSpeed(wind) & WindForce(wind))", "score": 0}
{"id": "eqasc_validation_1599", "prediction": "all x y z.((Anemometer(x) & Hurricane(y) & Windsurfer(z)) -> Measure(x,y,z))", "score": 0}
{"id": "eqasc_validation_1599", "prediction": "all x y.((Anemometer(x) & Hurricane(y)) -> Measures(x,y))", "score": 0}
{"id": "eqasc_validation_1599", "prediction": "all x.(Anemometer(x) -> MeasuresHurricaneStorms(x))", "score": 0}
{"id": "eqasc_validation_1599", "prediction": "all x y z.((Anesmometer(x) & Hurricane(y) & Hurricane(z)) -> MeasuredThrough(x,y,z))", "score": 0}
{"id": "eqasc_validation_1599", "prediction": "all x y z.((Anemometer(x) & Hurricane(y) & Hurricane(z)) -> Measures(x,y))", "score": 0}
{"id": "eqasc_validation_1599", "prediction": "all x y z.((Anesmometer(x) & Hurricane(y) & Hurricane(z)) -> Measures(x,y,z))", "score": 0}
{"id": "eqasc_validation_1599", "prediction": "all x y z.((Anemometer(x) & Hurricane(y) & Hurricane(z)) -> UsedToMeasure(x,y,z))", "score": 0}
{"id": "eqasc_validation_1599", "prediction": "all x.((Anemometer(x) & Hurricane(y)) -> MeasuresUsing(x,y))", "score": 0}
{"id": "eqasc_validation_1599", "prediction": "all x.(Anemometer(x) -> MeasuresHurricane(x))", "score": 0}
{"id": "eqasc_validation_1599", "prediction": "all x y.((Anemometer(x) & Hurricane(y)) -> Measurements(x,y))", "score": 0}
{"id": "eqasc_validation_1599", "prediction": "all x y z.((Anemometer(x) & Hurricane(y) & Hurricane(z)) -> Measures(x,y,z))", "score": 0}
{"id": "eqasc_validation_1599", "prediction": "all x y z.((Anemometer(x) & Hurricane(y) & Windsurfer(z)) -> MeasuresFrom(x,y,z))", "score": 0}
{"id": "eqasc_validation_1599", "prediction": "all x.((Anemometer(x) & Hurricane(y)) -> Measures(x,y))", "score": 0}
{"id": "eqasc_validation_1600", "prediction": "all x.(Vane(x) & Anemometer(x))", "score": 0}
{"id": "eqasc_validation_1600", "prediction": "all x.(Anemometer(x) -> (Vane(x) & TopOfStation(x) & SetIn(x)))", "score": 0}
{"id": "eqasc_validation_1600", "prediction": "exists x.(Station(x) & Anemometer(x) & Vane(x))", "score": 0}
{"id": "eqasc_validation_1600", "prediction": "all x y.((Anemometer(x) & Vane(y)) -> TopOfStation(x,y))", "score": 0}
{"id": "eqasc_validation_1600", "prediction": "all x y.((Anemometer(x) & Vane(y)) -> StandingAtTopOfStation(x,y))", "score": 0}
{"id": "eqasc_validation_1600", "prediction": "all x.(Anemometer(x) & Vane(x))", "score": 0}
{"id": "eqasc_validation_1600", "prediction": "all x y.((Anemometer(x) & Vane(y) & Station(z)) -> TopOf(x,z))", "score": 0}
{"id": "eqasc_validation_1600", "prediction": "all x.((Anemometer(x) & Vane(x)) -> TopOfStation(x))", "score": 0}
{"id": "eqasc_validation_1600", "prediction": "all x y.((Anemometer(x) & Vane(y)) -> (AtTopOfStation(x,y) & AtTopOfStation(y)))", "score": 0}
{"id": "eqasc_validation_1600", "prediction": "all x.(Station(x) -> (Anemometer(x) & Vane(x)))", "score": 0}
{"id": "eqasc_validation_1600", "prediction": "all x.(Location(x) -> (Anesemometer(x) & Vane(x)))", "score": 0}
{"id": "eqasc_validation_1600", "prediction": "all x y.((Anemometer(x) & Vane(y)) -> (AtTopOfStation(x,y) & AtTopOfStation(y,x)).)", "score": -1}
{"id": "eqasc_validation_1601", "prediction": "all x y.((Device(x) & Station(y)) -> MeasuresWinds(x,y))", "score": 0}
{"id": "eqasc_validation_1601", "prediction": "all x y z.((Device(x) & Station(y) & Station(z)) -> MeasuresWind(x,y))", "score": 0}
{"id": "eqasc_validation_1601", "prediction": "all x y z.((Device(x) & Station(y) & Station(z)) -> MeasuresWind(x,y,z))", "score": 0}
{"id": "eqasc_validation_1601", "prediction": "all x y z.((Device(x) & Station(y) & Station(z) & MeasuresWind(x,z)) -> PlacedAtTopOf(x,y,z))", "score": 0}
{"id": "eqasc_validation_1601", "prediction": "all x y z.((Device(x) & Station(y) & Station(z) & MeasuresWind(x,y,z)) -> PlacedAtTopOf(x,y))", "score": 0}
{"id": "eqasc_validation_1601", "prediction": "all x y.((Device(x) & Station(y) & MeasuresWind(x)) -> PlacedAtTopOf(x,y))", "score": 0}
{"id": "eqasc_validation_1601", "prediction": "all x y.((Device(x) & Station(y) & PlacedAtTopOf(x,y)) -> MeasuresWind(x))", "score": 0}
{"id": "eqasc_validation_1601", "prediction": "all x y z.((Device(x) & MeasuresWind(x,y) & Station(z) & PlacedAtTopOf(x,z)) -> MeasuresWind(x,y,z))", "score": 0}
{"id": "eqasc_validation_1601", "prediction": "all x y.((Device(x) & Station(y) & PlacedAtTopOf(x,y)) -> WindMeasure.(x))", "score": -1}
{"id": "eqasc_validation_1601", "prediction": "all x y.((Device(x) & Station(y)) -> MeasuresWind(x))", "score": 0}
{"id": "eqasc_validation_1601", "prediction": "all x y z.((Device(x) & Station(y) & Station(z)) -> PlacedAtTopOf(x,y,z))", "score": 0}
{"id": "eqasc_validation_1601", "prediction": "all x.(Device(x) & MeasuresWind(x)) -> PlacedAtTopOfStation(x))", "score": -1}
{"id": "eqasc_validation_1601", "prediction": "all x y z.((Device(x) & Station(y) & Station(z) & MeasuresWind(x,y)) -> PlacedAtTopOf(x,z))", "score": 0}
{"id": "eqasc_validation_1602", "prediction": "all x.(Hurricane(x) -> ThereAreFiveCategories(x))", "score": 0}
{"id": "eqasc_validation_1602", "prediction": "all x.(Hurricane(x) -> HasCategoriesDependingOnWindSpeed(x))", "score": 0}
{"id": "eqasc_validation_1602", "prediction": "all x.((Hurricane(x) & WindSpeed(y)) -> HatchesFiveCategories(x,y))", "score": 0}
{"id": "eqasc_validation_1602", "prediction": "all x.(Hurricane(x) -> (HasCategory(x,1) & DependsOnWindSpeed(x)))", "score": 0}
{"id": "eqasc_validation_1602", "prediction": "all x.(Hurricane(x) -> (HasFiveCategories(x) & DependsOnWindSpeed(x)))", "score": 0}
{"id": "eqasc_validation_1602", "prediction": "all x.(Hurricane(x) -> (HasCategory(x,Y) & DependsOnWindSpeed(x)))", "score": 0}
{"id": "eqasc_validation_1602", "prediction": "all x.(Hurricane(x) -> (HasCategory(x,5) & DependsOnWindSpeed(x)))", "score": 0}
{"id": "eqasc_validation_1602", "prediction": "all x.(Hurricane(x) -> (HasCategory(x,WoodSpeed) | HasCategory(x,WoodSpeed)))", "score": 0}
{"id": "eqasc_validation_1602", "prediction": "all x y.((Hurricane(x) & WindSpeed(y)) -> HasCategory(x,y))", "score": 0}
{"id": "eqasc_validation_1602", "prediction": "all x.(Hurricane(x) -> HasFiveCategories(x))", "score": 0}
{"id": "eqasc_validation_1602", "prediction": "all x y.((Hurricane(x) & WindSpeed(y)) -> HasCategories(x,y))", "score": 0}
{"id": "eqasc_validation_1602", "prediction": "all x.(Hurricane(x) -> (HasFiveCategories(x) & WindSpeed(x)))", "score": 0}
{"id": "eqasc_validation_1602", "prediction": "all x.(Hurricane(x) -> (HasCategory(x,10) & DependsOnWindSpeed(x)))", "score": 0}
{"id": "eqasc_validation_1602", "prediction": "all x y.((Hurricane(x) & WindSpeed(y)) -> ThereAreFiveCategories(x,y))", "score": 0}
{"id": "eqasc_validation_1602", "prediction": "all x.(Hurricane(x) -> HasCategories(x,5))", "score": 0}
{"id": "eqasc_validation_1603", "prediction": "all x y.((Anemometer(x) & HurricaneCategory(y)) -> Determines(x,y))", "score": 0}
{"id": "eqasc_validation_1603", "prediction": "all x.(Anemometer(x) -> DeterminesHurricaneCode(x))", "score": 0}
{"id": "eqasc_validation_1603", "prediction": "all x y z.((Anemometer(x) & HurricaneCategory(y)\" -> Determines(x,y,z)))", "score": -1}
{"id": "eqasc_validation_1603", "prediction": "all x.((CanBeUsedToDetermineHurricaneCategory(x) & HurricaneCategory(x)) -> InCategory(x,hurricane))", "score": 0}
{"id": "eqasc_validation_1603", "prediction": "all x.(Anemometer(x) -> DeterminesHurricaneCategory(x))", "score": 0}
{"id": "eqasc_validation_1603", "prediction": "all x.((Anemometer(x) & HurricaneCategory(x)) -> CanBeDetermined(x))", "score": 0}
{"id": "eqasc_validation_1603", "prediction": "all x.(Anemometer(x) -> DeterminesHarshstormCategory(x))", "score": 0}
{"id": "eqasc_validation_1603", "prediction": "all x.((Anemometer(x) & HurricaneCategory(y)) -> Determines(x,y))", "score": 0}
{"id": "eqasc_validation_1603", "prediction": "all x.((Anemometer(x) & HurricaneCategory(x)) -> Determines(x,kategory))", "score": 0}
{"id": "eqasc_validation_1603", "prediction": "all x.(Anemometer(x) -> ( DeterminesHurricaneCategory(x) & HurricaneCategory(x) & HurricaneCategory(x)))", "score": 0}
{"id": "eqasc_validation_1603", "prediction": "all x.((Anemometer(x) & HurricaneCategory(x)) -> DeterminesKitalog(x,y))", "score": 0}
{"id": "eqasc_validation_1604", "prediction": "all x y.((Bacteria(x) & Earth(y,x)) -> (Diverse(x) & Abundant(x)))", "score": 0}
{"id": "eqasc_validation_1604", "prediction": "all x.(Bacteria(x) -> (Diverse(x) & Abundant(x) & Organism(x)))", "score": 1}
{"id": "eqasc_validation_1604", "prediction": "all x.(Bacteria(x) -> (DiverseAndAbundantOfOrganisms(x) & OnEarth(x)))", "score": 0}
{"id": "eqasc_validation_1604", "prediction": "all x.(Bacteria(x) -> (DiverseOrganism(x) & AbundantOrganism(x)))", "score": 0}
{"id": "eqasc_validation_1604", "prediction": "all x.(Bacteria(x) -> (DiverseAndAbundantOrganisms(x) & OnEarth(x)))", "score": 0}
{"id": "eqasc_validation_1604", "prediction": "all x.(Bacteria(x) -> (Diverse(x) & Abundant(x)))", "score": 0}
{"id": "eqasc_validation_1604", "prediction": "all x.(Bacteria(x) -> (DiverseOrganisms(x,Earth) & AbundantOrganisms(x)))", "score": 0}
{"id": "eqasc_validation_1604", "prediction": "all x.(Bacteria(x) -> (DiverseAndAbundantOrganism(x) & OnEarth(x)))", "score": 0}
{"id": "eqasc_validation_1604", "prediction": "all x y.((Bacteria(x) & Earth(y)) -> (Devoid(x,y) & Abundant(x,y)))", "score": 0}
{"id": "eqasc_validation_1604", "prediction": "all x y.((Organism(x) & Earth(y)) -> (Diverse(x,y) & Abundant(x,y)))", "score": 0}
{"id": "eqasc_validation_1604", "prediction": "all x y.((Bacteria(x) & Earth(y)) -> (Diverse(x) & Abundant(x)))", "score": 0}
{"id": "eqasc_validation_1604", "prediction": "all x.(Bacteria(x) -> (DiverseAndAbundantOn(x,Earth) & For(x,Bacteria)))", "score": 0}
{"id": "eqasc_validation_1604", "prediction": "all x y.((Bacteria(x) & Earth(y)) -> (DiverseAndAbundant(x,y) & Animal(x)))", "score": 0}
{"id": "eqasc_validation_1605", "prediction": "all x.(Organization(x) -> LifeForm(x))", "score": 0}
{"id": "eqasc_validation_1605", "prediction": "all x.(Organism(x) -> LifeForm(x))", "score": 1}
{"id": "eqasc_validation_1606", "prediction": "all x.(Bacteria(x) -> (DiverseAndAbundantLifeForm(x) & OnEarth(x)))", "score": 0}
{"id": "eqasc_validation_1606", "prediction": "all x.((Bacteria(x) & Diverse(x) & Abundant(x)) -> LifeForm(x,Earth))", "score": 0}
{"id": "eqasc_validation_1606", "prediction": "all x y z.((Bacteria(x) & Earth(y) & LifeForm(z)) -> (Diverse(x) & Abundant(x,y)))", "score": 0}
{"id": "eqasc_validation_1606", "prediction": "all x.(Bacteria(x) -> (DiverseGroupOfLife(x) & AbundantGroupOfLife(x)))", "score": 0}
{"id": "eqasc_validation_1606", "prediction": "all x.(Bacteria(x) -> (DiverseAndAbundantLifeGroup(x) & OnEarth(x)))", "score": 0}
{"id": "eqasc_validation_1606", "prediction": "all x.(Bacteria(x) -> (Diverse(x) & Abundant(x) & LifeForm(x)))", "score": 1}
{"id": "eqasc_validation_1606", "prediction": "all x y.((Bacteria(x) & Earth(y)) -> (Diverse(x,y) & Abundant(x)))", "score": 0}
{"id": "eqasc_validation_1606", "prediction": "all x.(Bacteria(x) -> (MostDiverseAndAbundantLifeForm(x) & OnEarth(x)))", "score": 0}
{"id": "eqasc_validation_1606", "prediction": "all x.(Bacteria(x) -> (DiverseEarthGroup(x) & AbundantOnEarth(x)))", "score": 0}
{"id": "eqasc_validation_1606", "prediction": "all x.(Bacteria(x) -> (Diverse(x) & Abundant(x)))", "score": 0}
{"id": "eqasc_validation_1606", "prediction": "all x.(Bacteria(x) -> (DiverseLifeForm(x) & AbundantLifeForm(x)))", "score": 0}
{"id": "eqasc_validation_1606", "prediction": "all x.(Bacteria(x) -> (DiverseEarthGroup(x) & AbundantEarthGroup(x)))", "score": 0}
{"id": "eqasc_validation_1607", "prediction": "Earth is OurPlanet(Earth)", "score": -1}
{"id": "eqasc_validation_1607", "prediction": "all x.(Earth(x) -> Planet(x))", "score": 0}
{"id": "eqasc_validation_1607", "prediction": "(Earth(e) & Planet(e))", "score": 0}
{"id": "eqasc_validation_1607", "prediction": "(Of(Earth) & Planet(Earth))", "score": 0}
{"id": "eqasc_validation_1607", "prediction": "All x.(Earth(x) -> Planet(x))", "score": -1}
{"id": "eqasc_validation_1607", "prediction": "Earth isPlanet(Earth,Earth)", "score": -1}
{"id": "eqasc_validation_1607", "prediction": "Earth is ourPlanet(x)", "score": -1}
{"id": "eqasc_validation_1607", "prediction": "We are all about Earth.", "score": -1}
{"id": "eqasc_validation_1607", "prediction": "we're all x.(Earth(x) & Planet(x))", "score": -1}
{"id": "eqasc_validation_1608", "prediction": "all x.(Bacteria(x) -> (DiverseAverage(x) & AbundantOfOrganisms(x) & OnPlanet(x)))", "score": 0}
{"id": "eqasc_validation_1608", "prediction": "all x.(Bacteria(x) -> (DiverseAndAbundantOrganisms(x) & Planet(x) & OnPlanet(x)))", "score": 0}
{"id": "eqasc_validation_1608", "prediction": "all x.(Bacteria(x) -> (DiverseAndAbundantOrganisms(x) & LocatedOnPlanet(y) & OnComputer(z) & Plant(w) & AllModernOrganism(x,y) & OnPlanet(y,z)))", "score": 0}
{"id": "eqasc_validation_1608", "prediction": "all x.(Bacteria(x) -> (DiverseAndAbundantOrganism(x) & OnPlanet(x)))", "score": 0}
{"id": "eqasc_validation_1608", "prediction": "all x.(Bacteria(x) -> (DiverseGroup(x) & AbundantGroupOnPlanet(x) & OnPlanet(x)))", "score": 0}
{"id": "eqasc_validation_1608", "prediction": "all x.(Bacteria(x) -> (DiverseGroup(x) & AbundantOnPlanet(x) & Organ(x)))", "score": 0}
{"id": "eqasc_validation_1608", "prediction": "all x.(Bacteria(x) -> (DiverseAndAbundantOfOrganisms(x) & OnPlanet(x)))", "score": 0}
{"id": "eqasc_validation_1608", "prediction": "all x.(Bacteria(x) -> (DiverseOrganism(x) & AbundantOrganismOnPlanet(x)))", "score": 0}
{"id": "eqasc_validation_1608", "prediction": "all x.(Bacteria(x) -> (DiverseOrganism(x) & AbundantOrganism(x) & OnPlanet(x)))", "score": 0}
{"id": "eqasc_validation_1608", "prediction": "all x.(Bacteria(x) -> (Multiple(x) & Abundant(x)))", "score": 0}
{"id": "eqasc_validation_1608", "prediction": "all x.(Bacteria(x) -> (DiverseAndAbundantOrganisms(x) & OnPlanet(x)))", "score": 0}
{"id": "eqasc_validation_1608", "prediction": "all x.(Bacteria(x) -> (DiverseAbundanceOrganisms(x) & AbundantAbundanceOrganisms(x)))", "score": 0}
{"id": "eqasc_validation_1608", "prediction": "all x y.((Bacteria(x) & Plant(y)) -> (DiverseOrganism(x,y) & AbundantOrganism(x,y)))", "score": 0}
{"id": "eqasc_validation_1609", "prediction": "all x.(Earth(x) -> WorldOfWater(x))", "score": 0}
{"id": "eqasc_validation_1609", "prediction": "(world(Earth) & WorldOfWater(Earth))", "score": 0}
{"id": "eqasc_validation_1609", "prediction": "(WorldOfWater(earth) -> Water(earth))", "score": 0}
{"id": "eqasc_validation_1609", "prediction": "all x y.((Earth(x) & Water(y)) -> WorldOf(x,y))", "score": 0}
{"id": "eqasc_validation_1609", "prediction": "exists x.(Earth(x) & WorldOfWater(x))", "score": 0}
{"id": "eqasc_validation_1609", "prediction": "all x.(Earth(x) -> (WealthOfWater(x)))", "score": 0}
{"id": "eqasc_validation_1610", "prediction": "all x.(Bacteria(x) -> (DiverseAndAbundantOrganism(x) & InWorld(x)))", "score": 0}
{"id": "eqasc_validation_1610", "prediction": "all x.(Bacteria(x) -> (DiverseOrganism(x) & AbundantOrganism(x)))", "score": 0}
{"id": "eqasc_validation_1610", "prediction": "all x y z.((Bacteria(x) & Organism(y) & Organism(z) & DiverseAndAbundant(x,y,z)) -> Organism(x,y,y))", "score": 0}
{"id": "eqasc_validation_1610", "prediction": "all x y.((Bacteria(x) & Organism(y)) -> (Diverse(x,y) & Abundant(x,y)))", "score": 0}
{"id": "eqasc_validation_1610", "prediction": "all x y.((Bacteria(x) & Organism(y)) -> (MostDiverseAndAbundant(x,y) | MostAbundant(x,y)))", "score": 0}
{"id": "eqasc_validation_1610", "prediction": "all x.(Bacteria(x) -> (DiverseAndAbundantOrganisms(x) & InWorld(x)))", "score": 0}
{"id": "eqasc_validation_1610", "prediction": "all x.(Bacteria(x) -> (DiverseAndAbundantOrganisms(x) & Worldwide(x)))", "score": 0}
{"id": "eqasc_validation_1610", "prediction": "all x y.((Bacteria(x) & Organism(y) & (Diverse(x,y) | Abundant(x,y))) -> InWorld(x,y))", "score": 0}
{"id": "eqasc_validation_1610", "prediction": "all x.(Bacteria(x) -> (DiverseOrganisms(x) & AbundantOrganisms(x)))", "score": 0}
{"id": "eqasc_validation_1610", "prediction": "all x.(Bacteria(x) -> (MostDiverseAndAbundantOrganism(x) & InWorld(x)))", "score": 0}
{"id": "eqasc_validation_1610", "prediction": "all x y.((Bacteria(x) & Organism(y) & DevelopedIn(x)) -> Availability(y))", "score": 0}
{"id": "eqasc_validation_1610", "prediction": "all x.(Bacteria(x) -> (DiverseOfOrganisms(x) & AbundantOfOrganisms(x)))", "score": 0}
{"id": "eqasc_validation_1611", "prediction": "all x.(ProkaryoticCell(x) -> (DiverseGeographics(x) & AbundantGeomorphies(x)))", "score": 0}
{"id": "eqasc_validation_1611", "prediction": "all x.(ProkaryoticCell(x) -> (DiverseAndAbundantOrganisms(x) & OnEarth(x)))", "score": 0}
{"id": "eqasc_validation_1611", "prediction": "all x.(ProkaryoticCells(x) -> (DiverseAndAbundantOrganism(x) & OnEarth(x)))", "score": 0}
{"id": "eqasc_validation_1611", "prediction": "all x.(ProkaryoticCell(x) -> (Diverse(x) & Abundant(x) & Organism(x) & OnEarth(x)))", "score": 0}
{"id": "eqasc_validation_1611", "prediction": "all x.(ProkaryoticCells(x) -> (DiverseAndAbundantOrganisms(x) & OnEarth(x) & MostAbundantOrganisms(x) & OnEarth(x)))", "score": 0}
{"id": "eqasc_validation_1611", "prediction": "all x.(ProkaryoticCells(x) -> (Diverse(x) & Abundant(x) & OrganismOnEarth(x)))", "score": 0}
{"id": "eqasc_validation_1611", "prediction": "all x.(ProkaryoticCell(x) -> (DiverseOrganismAndAbundant(x) & OnEarth(x) & OnEarth(x)))", "score": 0}
{"id": "eqasc_validation_1611", "prediction": "all x.(ProkaryoticCell(x) -> (DiverseOfOrganisms(x) & Abundant(x)))", "score": 0}
{"id": "eqasc_validation_1611", "prediction": "all x.(ProkaryoticCell(x) -> (Organism(x) & MostDiverseAndAbundant(x)))", "score": 0}
{"id": "eqasc_validation_1611", "prediction": "all x.(ProkaryoticCell(x) -> (Earth's MostDiverseAndAbundantOrganisms(x) & OnEarth(x)))", "score": -1}
{"id": "eqasc_validation_1611", "prediction": "all x.(ProkaryoticCell(x) -> (BestDiverseAndAbundantOrganism(x) & Organism(x) & Organism(x) & Earth(y)))", "score": 0}
{"id": "eqasc_validation_1611", "prediction": "all x y z.((ProkaryoticCell(x) & Organism(y) & Earth(z)) -> (DiverseAndAbundant(x,y,z) & On(x,y,z)))", "score": 0}
{"id": "eqasc_validation_1611", "prediction": "all x.(ProkaryoticCells(x) -> (Diverse(x) & Abundant(x) & Organism(x)))", "score": 0}
{"id": "eqasc_validation_1611", "prediction": "all x.(ProkaryoticCell(x) -> (DiverseAndAbundantOrganismOnEarth(x) & OnEarth(x)))", "score": 0}
{"id": "eqasc_validation_1612", "prediction": "all x.(HermitCrab(x) -> UsesShellOfDeadSnail(x))", "score": 0}
{"id": "eqasc_validation_1612", "prediction": "all x.(HermitCrab(x) -> UsesScreens(x))", "score": 0}
{"id": "eqasc_validation_1612", "prediction": "all x.(HermitCrab(x) -> (UsesShellsOfDeadSnails(x) & ForHomes(x)))", "score": 1}
{"id": "eqasc_validation_1612", "prediction": "all x.(HermitCrab(x) -> UsesShell(x))", "score": 0}
{"id": "eqasc_validation_1612", "prediction": "all x y z.((Shell(x) & DeadSnail(y) & HermitCrab(z)) -> UsesForHomes(x,y,z))", "score": 0}
{"id": "eqasc_validation_1612", "prediction": "all x y.((HermitCrab(x) & DeadSnail(y)) -> UseShell(x,y))", "score": 0}
{"id": "eqasc_validation_1612", "prediction": "all x y.((HermitCrab(x) & DeadSnake(y)) -> UseForHome(x,y))", "score": 0}
{"id": "eqasc_validation_1612", "prediction": "all x y z.((HermitCrab(x) & DeadSnail(y) & Shell(z)) -> UsesForHomes(x,y))", "score": 1}
{"id": "eqasc_validation_1612", "prediction": "all x.(HermitCrab(x) -> (UsesShellsOfDeadSnails(x) & BuysHomes(x)))", "score": 1}
{"id": "eqasc_validation_1612", "prediction": "all x.(HermitCrab(x) -> UsesShellsOnDeadSnails(x))", "score": 0}
{"id": "eqasc_validation_1612", "prediction": "all x y z.((HermitCrab(x) & DeadSnake(y) & Shell(z)) -> UsesForHomes(x,z))", "score": 0}
{"id": "eqasc_validation_1612", "prediction": "all x.(HermitCrab(x) -> KillsSnails(x))", "score": 0}
{"id": "eqasc_validation_1612", "prediction": "all x y.(Dog(x) -> UsedForHomes(x,y))", "score": 0}
{"id": "eqasc_validation_1612", "prediction": "all x y z.((HermitCrab(x) & DeadSnail(y) & Shell(z)) -> UsesForHome(x,y,z))", "score": 0}
{"id": "eqasc_validation_1612", "prediction": "all x y z.((HermitCrab(x) & Shell(y) & DeadSnail(z)) -> UsesForHomes(x,y,z))", "score": 0}
{"id": "eqasc_validation_1612", "prediction": "all x.(HermitCrab(x) -> (UsesMoltsShells(x) & KillsSnail(x)))", "score": 0}
{"id": "eqasc_validation_1613", "prediction": "all x.(Student(x) -> (LivesAtHome(x) | LivesInGroupHome(x)))", "score": 0}
{"id": "eqasc_validation_1613", "prediction": "all x y.((Student(x) & Home(y)) | GroupHouse(x,y)) -> LivesAt(x,y))", "score": -1}
{"id": "eqasc_validation_1613", "prediction": "all x y z.((Student(x) & Home(y) & GroupHome(z)) -> (LiveAtHome(x,y) | LiveInGroupHome(x,z)))", "score": 0}
{"id": "eqasc_validation_1613", "prediction": "all x.(Student(x) -> (LivesInHome(x) | LivesInGroupHome(x)))", "score": 0}
{"id": "eqasc_validation_1613", "prediction": "all x.(Student(x) -> (LivesAtHome(x) | LiveSecondhome(x)))", "score": 0}
{"id": "eqasc_validation_1613", "prediction": "all x.(Student(x) -> (LivesAtHome(x) | LivesInGroupHomes(x)))", "score": 0}
{"id": "eqasc_validation_1613", "prediction": "all x.(Student(x) -> (LivesAtHome(x) | LivesInGroupHouses(x)))", "score": 0}
{"id": "eqasc_validation_1613", "prediction": "all x.(Student(x) -> (LivesAtHome(x) | LivesInGroupHomes(x))))", "score": -1}
{"id": "eqasc_validation_1614", "prediction": "all x y.((HermitsCrab(x) & DeadSnail(y)) -> UsesSnailCrustBoard(x,y))", "score": 0}
{"id": "eqasc_validation_1614", "prediction": "all x y.((Hermit(x) & Snail(y) & Dead(y)) -> Uses(x,y))", "score": 0}
{"id": "eqasc_validation_1614", "prediction": "all x y z.((HermitCrab(x) & DeadSnail(y) & Shell(z)) -> UsesAsPlaceToLive(x,y,z))", "score": 0}
{"id": "eqasc_validation_1614", "prediction": "all x.(HermitCrab(x) -> UsesDeadSnails(x))", "score": 0}
{"id": "eqasc_validation_1614", "prediction": "all x y.((HermitCrab(x) & DeadSnail(y)) -> UsesDailyShell(x,y))", "score": 0}
{"id": "eqasc_validation_1614", "prediction": "all x.(HermitCrab(x) -> UsesDeadSnailCellsBehind(x))", "score": 0}
{"id": "eqasc_validation_1614", "prediction": "all x y.((HermitCrab(x) & DeadSnailShells(y)) -> UsesPlaceToLive(x,y))", "score": 0}
{"id": "eqasc_validation_1614", "prediction": "all x y z.((Hermit(x) & Snail(y) & Shell(z)) -> UsesAsPlacetoLive(x,y,z))", "score": 0}
{"id": "eqasc_validation_1614", "prediction": "all x.(HermitsCrab(x) -> (UsesDeadSnailsShells(x) & LivesIn(x)))", "score": 0}
{"id": "eqasc_validation_1614", "prediction": "all x.(HermitCrab(x) -> (UsesDeadSnailSpecies(x) & LivesIn(x)))", "score": 0}
{"id": "eqasc_validation_1614", "prediction": "all x.(Hermit(x) -> (UsesDeadSnailShells(x) & UsesLayers(x)))", "score": 0}
{"id": "eqasc_validation_1614", "prediction": "all x.(Crab(x) -> (Uses(x,z) & DeadSnailsCholls(x)))", "score": 0}
{"id": "eqasc_validation_1614", "prediction": "all x y.((Hermit(x) & Snail(y)) -> UsesDead(x,y))", "score": 0}
{"id": "eqasc_validation_1614", "prediction": "all x.(Hermit(x) -> UsesDeadSnailShales(x))", "score": 0}
{"id": "eqasc_validation_1614", "prediction": "all x.(HermitCrab(x) -> (UsesDeadSnails(x) & UsesDawnSquirrelShell(x)))", "score": 0}
{"id": "eqasc_validation_1615", "prediction": "all x y.((Crater(x) & Sparrow(y)) -> Scavenger(x))", "score": 0}
{"id": "eqasc_validation_1615", "prediction": "all x.(Crab(x) -> Sarver(x))", "score": 0}
{"id": "eqasc_validation_1615", "prediction": "all x y z.((Crab(x) & (HermitCrab(y) | HermitCrab(z))) -> Scavenger(x))", "score": 0}
{"id": "eqasc_validation_1615", "prediction": "all x.(Crab(x) -> Scavenger(x))", "score": 0}
{"id": "eqasc_validation_1615", "prediction": "all x y.((Crab(x) & HermitCrab(y)) -> Scavenger(x))", "score": 0}
{"id": "eqasc_validation_1615", "prediction": "all x.(Crab(x) -> (Scavenger(x) | HermitCrab(x)))", "score": 0}
{"id": "eqasc_validation_1615", "prediction": "all x.(Crab(x) -> (Scavenger(x) & HermitCrab(x)))", "score": 3}
{"id": "eqasc_validation_1615", "prediction": "all x y.((Crab(x) & HermitCrab(y)) -> Scavenger(x,y))", "score": 0}
{"id": "eqasc_validation_1615", "prediction": "all x.(Crab(x) -> (Shavers(x) | HermitCrab(x)))", "score": 0}
{"id": "eqasc_validation_1615", "prediction": "all x y.((Crab(x) & ShemitCrab(y)) -> Scavenger(x,y))", "score": 0}
{"id": "eqasc_validation_1616", "prediction": "exists x y z.(Scavenger(x) & Shell(y) & DeadSnail(z) & UsesForHomes(x,z))", "score": 0}
{"id": "eqasc_validation_1616", "prediction": "exists x y.(Scavenger(x) & Shell(y) & DeadSnail(y) & UsesForHome(x,y))", "score": 0}
{"id": "eqasc_validation_1616", "prediction": "exists x y z.((Scavenger(x) & DeadSnake(y) & Shell(z)) -> UsesForHomes(x,y,z))", "score": 0}
{"id": "eqasc_validation_1616", "prediction": "exists x y.(Scavenger(x) & Stranger(y) & UsesShellsOfDeadSnailsForHomes(x,y))", "score": 0}
{"id": "eqasc_validation_1616", "prediction": "exists x y.(Scavenger(x) & Cadaver(y) & UsesShell(x,z))", "score": 0}
{"id": "eqasc_validation_1616", "prediction": "exists x.(Scavenger(x) & UseCshellsOfDeadSnails(x))", "score": 0}
{"id": "eqasc_validation_1616", "prediction": "exists x y.(Scavenger(x) & Shell(y) & DeadSnail(z) & UsesForHomes(x,z))", "score": 0}
{"id": "eqasc_validation_1616", "prediction": "exists x y.(Scavenger(x) & Shell(y) & DeadSnail(z) & UsesForHome(x,y,z))", "score": 0}
{"id": "eqasc_validation_1616", "prediction": "exists x y z.(Scavenger(x) & Shell(y) & DeadSnail(z) & UsesForHome(x,z))", "score": 0}
{"id": "eqasc_validation_1616", "prediction": "exists x y z.((Scavenger(x) & DeadSnail(y) & Shell(z) & Uses(x,z)) -> NeedsHome(x))", "score": 0}
{"id": "eqasc_validation_1616", "prediction": "exists x y z.(Scavenger(x) & Shell(y) & DeadSnail(z) & UsesForHome(x,y,z))", "score": 0}
{"id": "eqasc_validation_1616", "prediction": "exists x y.(Scavenger(x) & UsesCellToHome(x,y) & DeadSnail(y) & DeadSnail(z))", "score": 0}
{"id": "eqasc_validation_1616", "prediction": "exists x y.(Scavenger(x) & Shell(y) & DeadSnail(y) & UsesSilk(x,y))", "score": 0}
{"id": "eqasc_validation_1616", "prediction": "exists x y.(Scavenger(x) & Shells(y) & DeadSnail(z) & UsedForHome(x,z))", "score": 0}
{"id": "eqasc_validation_1616", "prediction": "exists x.(Scavenger(x) & UsesCroonsOfDeadSnailsForHomes(x))", "score": 0}
{"id": "eqasc_validation_1616", "prediction": "exists x.(Scavenger(x) & UsesShell(x) & DeadSnails(x,y))", "score": 0}
{"id": "eqasc_validation_1617", "prediction": "all x.(Gastropod(x) -> (Snake(x) | Slug(x)))", "score": 0}
{"id": "eqasc_validation_1617", "prediction": "all x y.((Gastropod(x) & Snail(y)) -> (Snake(x) | Slug(x)))", "score": 0}
{"id": "eqasc_validation_1617", "prediction": "all x.(Gastropod(x) -> (Snail(x) | Slug(x)))", "score": 0}
{"id": "eqasc_validation_1617", "prediction": "all x.(Gastropod(x) -> (Snake(x) & Slug(x)))", "score": 0}
{"id": "eqasc_validation_1617", "prediction": "all x.(Gastropod(x) -> (Shaw(x) | Slug(x)))", "score": 0}
{"id": "eqasc_validation_1617", "prediction": "all x.(Gastropod(x) -> (Snail(y) | Slug(y)))", "score": 0}
{"id": "eqasc_validation_1617", "prediction": "all x.(Gastropod(x) -> (Snicker(x) | Slug(x)))", "score": 0}
{"id": "eqasc_validation_1618", "prediction": "all x y.((HermitCrab(x) & Shell(y) & Gastropod(y)) -> UsesForHomes(x,y))", "score": 0}
{"id": "eqasc_validation_1618", "prediction": "all x.(HormitCrab(x) -> UsesShell(x))", "score": 0}
{"id": "eqasc_validation_1618", "prediction": "all x.(HermitCrab(x) -> UsesShell(x))", "score": 0}
{"id": "eqasc_validation_1618", "prediction": "all x y z.((HermitCrab(x) & Shell(y) & Gastropod(z)) -> UsesForHomes(x,y,z))", "score": 0}
{"id": "eqasc_validation_1618", "prediction": "all x.(HermitCrab(x) -> UsesShellOfGastropodsForHouses(x))", "score": 0}
{"id": "eqasc_validation_1618", "prediction": "all x.(HermitCrab(x) -> (UsesShellFromGastropods(x) & UsesShellFromGastropods(x)))", "score": 0}
{"id": "eqasc_validation_1618", "prediction": "all x y z.((HermitCrab(x) & Shell(y) & Gastropod(z)) -> UseForHomes(x,y,z))", "score": 0}
{"id": "eqasc_validation_1618", "prediction": "all x y.((HermitCrab(x) & Gastropod(y)) -> UsesShell(x,y))", "score": 0}
{"id": "eqasc_validation_1618", "prediction": "all x.(HermitCrab(x) -> UsesCallsOfGastropods(x))", "score": 0}
{"id": "eqasc_validation_1618", "prediction": "all x.(HermitCrab(x) -> (UsesShell(x) | UsesShell(x,Gastropod)))", "score": 0}
{"id": "eqasc_validation_1618", "prediction": "all x y.((HermitCrab(x) & Shell(y)) -> UsesForHomes(x,y))", "score": 0}
{"id": "eqasc_validation_1618", "prediction": "all x y z.((HermitCrab(x) & Shell(y) & Gastropod(z)) -> UsesForHomes(x,y))", "score": 0}
{"id": "eqasc_validation_1618", "prediction": "all x.(HermitCrab(x) -> UsesShellsOfGastropods(x))", "score": 0}
{"id": "eqasc_validation_1618", "prediction": "all x.(HermitCrab(x) -> (UsesShellOfGastropod(x) & UsesShellForHome(x)))", "score": 0}
{"id": "eqasc_validation_1618", "prediction": "all x y z.((HermitCrab(x) & Shell(y) & Gastropod(z)) -> UsesForHome(x,y,z))", "score": 0}
{"id": "eqasc_validation_1618", "prediction": "all x.(HermitCrab(x) -> UsesSshell(x))", "score": 0}
{"id": "eqasc_validation_1619", "prediction": "all x y z w.((Crab(x) & Shell(y) & DeadSnail(z) & Uses(x,y) & ForHome(y) & Scavenger(w)) -> (CanHelpScavenger(x) | CanHelpScavenger(w)))", "score": 0}
{"id": "eqasc_validation_1619", "prediction": "all x y.((Crab(x) & Shell(y)) -> (Uses(x,y) & DeadSnail(y) & UsesForHome(x) & Scavenger(x)))", "score": 0}
{"id": "eqasc_validation_1619", "prediction": "all x y.((Crab(x) & DeadSnake(y)) -> UsesShellForHomes(x,y))", "score": 0}
{"id": "eqasc_validation_1619", "prediction": "all x y z.((Crab(x) & DeadSnail(y) & Shell(z)) -> (UsesForHomes(x,y,z) & Scavenger(x)))", "score": 0}
{"id": "eqasc_validation_1619", "prediction": "all x y z.((Crab(x) & ShellsOfDeadSnail(y) & Home(z)) -> (Uses(x,y) & Scavenger(x)))", "score": 0}
{"id": "eqasc_validation_1619", "prediction": "all x y z.((Crab(x) & DeadSnail(y) & Shell(z)) -> (UsesForHouses(x,y,z) & Scavenger(x)))", "score": 0}
{"id": "eqasc_validation_1619", "prediction": "all x y z.((Crab(x) & DeadSnail(y) & Shell(z)) -> (UsesForHomes(x,y) & Scavenger(x)))", "score": 1}
{"id": "eqasc_validation_1619", "prediction": "all x.(Crab(x) -> (UsesShellsOfDeadSnails(x) & Scavenger(x)))", "score": 2}
{"id": "eqasc_validation_1619", "prediction": "all x.(Crab(x) -> (UsesShell(x) & UsesDeadSnailScraps(x) & Scavenger(x)))", "score": 0}
{"id": "eqasc_validation_1619", "prediction": "(all x.(Crab(x) -> UsesSnailShells(x)) & Scavenger(x))", "score": 0}
{"id": "eqasc_validation_1619", "prediction": "all x.(Crab(x) -> (UsesSnailShells(x) & UsesShells(x) & Scavenger(x)))", "score": 0}
{"id": "eqasc_validation_1619", "prediction": "all x.(Crab(x) -> (UsesCshellsOfDeadSnails(x) & Scavenger(x)))", "score": 0}
{"id": "eqasc_validation_1619", "prediction": "all x y.(Crab(x) & Shell(y) & UsesDeadSnail(x,y) & Scavenger(x,y))", "score": 0}
{"id": "eqasc_validation_1619", "prediction": "all x y z.((Crab(x) & Shell(y) & DeadSnail(z)) -> (UsesForHome(x,y) & Scavenger(x,z)))", "score": 0}
{"id": "eqasc_validation_1619", "prediction": "all x.(Crab(x) -> (UsesCellsOfDeadSnail(x) & Scavenger(x)))", "score": 0}
{"id": "eqasc_validation_1620", "prediction": "all x.(HermitCrab(x) -> FindsShells(x))", "score": 0}
{"id": "eqasc_validation_1620", "prediction": "all x.(Hermit(x) -> FindsShels(x))", "score": 0}
{"id": "eqasc_validation_1620", "prediction": "all x y.((HermitCrab(x) & Shell(y)) -> Finds(x,y))", "score": 0}
{"id": "eqasc_validation_1620", "prediction": "all x.(HermitCrab(x) -> FindsShell(x))", "score": 0}
{"id": "eqasc_validation_1620", "prediction": "all x.(HermitCrab(x) -> (FindsShells(x) & -FindsShells(x)))", "score": 0}
{"id": "eqasc_validation_1620", "prediction": "all x.(HermitCrab(x) -> (FindsShells(x) & HermitCrab(x)))", "score": 0}
{"id": "eqasc_validation_1620", "prediction": "all x y.((HermitCrab(x) & Shell(y)) -> Find(x,y))", "score": 0}
{"id": "eqasc_validation_1621", "prediction": "all x y z.((HermitCrab(x) & Snail(y) & DeadSnail(z) & Finds(x,y,z)) -> UsesAsHome(x,y,z))", "score": 0}
{"id": "eqasc_validation_1621", "prediction": "all x y z.((HermitCrab(x) & DeadSnail(y) & DeadSnail(z)) -> FindsToUseAsHome(x,y,z))", "score": 0}
{"id": "eqasc_validation_1621", "prediction": "all x y.((HermitCrab(x) & DeadSnail(y)) -> FindsAndUsesHomesFor(x,y))", "score": 0}
{"id": "eqasc_validation_1621", "prediction": "all x y.((HermitCrab(x) & DeadSnail(y)) -> Finds(x,y))", "score": 0}
{"id": "eqasc_validation_1621", "prediction": "all x y.((HermitCrab(x) & DeadSnail(y)) -> FindsToUseAsHome(x,y))", "score": 0}
{"id": "eqasc_validation_1621", "prediction": "all x y.((HermitCrab(x) & DeadSnail(y)) -> (Finds(x,y) & UsesRedSquirrel(x)))", "score": 0}
{"id": "eqasc_validation_1621", "prediction": "all x y.((HermitCrab(x) & DeadSnail(y) & FoundIn(x,y)) -> UsesAsHome(x))", "score": 0}
{"id": "eqasc_validation_1621", "prediction": "all x y z.((HermitCrab(x) & DeadSnail(y) & Shell(z) & Finds(x,y,z)) -> UsesAsHome(x))", "score": 0}
{"id": "eqasc_validation_1621", "prediction": "all x y z.((HermitCrab(x) & DeadSnail(y) & HermitCrab(z)) -> FindsToUseAsHome(x,y,z))", "score": 0}
{"id": "eqasc_validation_1621", "prediction": "all x y.((HermitCrab(x) & DeadSnail(y)) -> FindsToUseAsHomes(x,y))", "score": 0}
{"id": "eqasc_validation_1621", "prediction": "all x y z.((HermitCrab(x) & DeadSnail(y) & Home(z)) -> FindsAndUsesAsHome(x,y,z))", "score": 0}
{"id": "eqasc_validation_1621", "prediction": "all x y z.((HermitCrab(x) & DeadSnake(y) & DeadSnake(z)) -> FindsToUseAsHome(x,y,z))", "score": 0}
{"id": "eqasc_validation_1621", "prediction": "all x.(HermitCrab(x) -> (FindsDeadSnail(x) & UsesAsHome(x)))", "score": 0}
{"id": "eqasc_validation_1621", "prediction": "all x y.((HermitCrab(x) & DeadShawn(y)) -> FindsTreatment(x,y))", "score": 0}
{"id": "eqasc_validation_1621", "prediction": "all x y.((HermitCrab(x) & DeadSnail(y)) -> (Finds(x,y) & UsesAsHome(x)))", "score": 0}
{"id": "eqasc_validation_1622", "prediction": "all x.(HermitCrab(x) -> UnusualHome(x))", "score": 0}
{"id": "eqasc_validation_1622", "prediction": "all x.(HermitCrab(x) -> WeirdHome(x))", "score": 0}
{"id": "eqasc_validation_1622", "prediction": "all x.(HermitCrab(x) -> UnusuallyLitterHome(x))", "score": 0}
{"id": "eqasc_validation_1622", "prediction": "all x.(HermitCrab(x) -> UnnormalHomes(x))", "score": 0}
{"id": "eqasc_validation_1622", "prediction": "all x.(HermitCrab(x) -> HasUnusuallyHome(x))", "score": 0}
{"id": "eqasc_validation_1622", "prediction": "all x.(HasUnusuallyHouses(x) -> HermitCrab(x))", "score": 0}
{"id": "eqasc_validation_1622", "prediction": "all x.(HermitCrab(x) -> HasIncongruousHomes(x))", "score": 0}
{"id": "eqasc_validation_1622", "prediction": "all x.(HermitCrab(x) -> UnusuallyHasHome(x))", "score": 0}
{"id": "eqasc_validation_1622", "prediction": "all x.(HermitCrab(x) -> UnusuallyLocatedHome(x))", "score": 0}
{"id": "eqasc_validation_1622", "prediction": "all x.(HermitCrab(x) -> HasUnusuallyHomed(x))", "score": 0}
{"id": "eqasc_validation_1622", "prediction": "all x.(HermitCrab(x) -> HasUnnaturalHomes(x))", "score": 0}
{"id": "eqasc_validation_1622", "prediction": "all x.(HermitCrab(x) -> UnusuallyHomes(x))", "score": 0}
{"id": "eqasc_validation_1622", "prediction": "all x.(HermitCrab(x) -> UnexpectedHouses(x))", "score": 0}
{"id": "eqasc_validation_1622", "prediction": "all x.(HermitCrab(x) -> UnusuallyCrewHome(x))", "score": 0}
{"id": "eqasc_validation_1623", "prediction": "all x.(DeadSnailShelle(x) -> UnusuallyHome(x))", "score": 0}
{"id": "eqasc_validation_1623", "prediction": "all x y.((DawnSnailShell(x) & Dead(x)) -> UnusuallyHome(y))", "score": 0}
{"id": "eqasc_validation_1623", "prediction": "all x.(DawSnailShell(x) -> UnusuallyHome(x))", "score": 0}
{"id": "eqasc_validation_1623", "prediction": "all x.((DeadSnailShell(x) & HomeUrban(x)) -> UnusuallyHome(x))", "score": 0}
{"id": "eqasc_validation_1623", "prediction": "all x.((DeadSnailShell(x) & HomesUnusually(x)) -> Unusual(x))", "score": 0}
{"id": "eqasc_validation_1623", "prediction": "all x y.((DownSnailShell(x) & Dead(x) & Home(y)) -> UnusualHome(y))", "score": 0}
{"id": "eqasc_validation_1623", "prediction": "all x.((SnailShell(x) & Dead(x)) -> UnusuallyHome(x))", "score": 0}
{"id": "eqasc_validation_1623", "prediction": "all x.((DeadSnailShell(x) & Un-UrbanHome(x)) -> UnexpectedHome(x))", "score": -1}
{"id": "eqasc_validation_1623", "prediction": "all x.((DeadSnailShell(x) & UnusualHome(x)) -> (DeadSnailShell(x) & UnusualHome(x)))", "score": 0}
{"id": "eqasc_validation_1623", "prediction": "all x.((SchnailShelled(x) & DeadShelled(x)) -> UnordinaryHome(x))", "score": 0}
{"id": "eqasc_validation_1623", "prediction": "all x y.((SnailShell(x) & Dead(x)) -> UncommonHome(y))", "score": 0}
{"id": "eqasc_validation_1623", "prediction": "all x.((DefyingSnailShell(x) & UnusualHome(x)) -> SnailShell(x))", "score": 0}
{"id": "eqasc_validation_1623", "prediction": "all x y.((DeadSnailShell(x) & House(y)) -> (UnusualHome(z) & Dead(x) & House(y)))", "score": 0}
{"id": "eqasc_validation_1623", "prediction": "all x.((SnailShell(x) & Dead(x)) -> UnusuallyHouse(x))", "score": 0}
{"id": "eqasc_validation_1623", "prediction": "all x.(DiedSnailShell(x) -> UnlikelyHome(x))", "score": 0}
{"id": "eqasc_validation_1623", "prediction": "all x.((DailySnailShell(x) & Dead(x)) -> UnusualHome(x))", "score": 0}
{"id": "eqasc_validation_1624", "prediction": "all x.(HermitCrab(x) -> (LivesInShell(x) & Scavenger(x)))", "score": 0}
{"id": "eqasc_validation_1624", "prediction": "all x.(HermitCrab(x) -> (LivesInShells(x) & Scavenger(x)))", "score": 0}
{"id": "eqasc_validation_1624", "prediction": "all x.(HermitCrab(x) -> (LivesInshell(x) & Scavenger(x)))", "score": 0}
{"id": "eqasc_validation_1624", "prediction": "all x.((HermitCrab(x) & LivesInShell(x)) -> Scavenger(x))", "score": 0}
{"id": "eqasc_validation_1624", "prediction": "all x.(HermitCrab(x) -> (LivesInShelled(x) & Scavenger(x)))", "score": 0}
{"id": "eqasc_validation_1624", "prediction": "all x y.((HermitCrab(x) & Shell(y)) -> (LivesIn(x,y) & Scavenger(x)))", "score": 0}
{"id": "eqasc_validation_1625", "prediction": "all x y.((HermitCrab(x) & DeadSnail(y)) -> ScavengerFor(x,y))", "score": 0}
{"id": "eqasc_validation_1625", "prediction": "all x.(HermitCrab(x) -> (ScavengerForDeadSnails(x) & ForDeadSnails(x)))", "score": 0}
{"id": "eqasc_validation_1625", "prediction": "all x.(HermitCrab(x) -> (Scavenger(x) & ForDeadSnails(x)))", "score": 0}
{"id": "eqasc_validation_1625", "prediction": "all x y z.((HermitCrab(x) & DeadSnail(y) & Snail(z)) -> ScavengerFor(x,y,z))", "score": 0}
{"id": "eqasc_validation_1625", "prediction": "all x.((HermitCrab(x) & DeadSnail(x)) -> ScavengersFor(x,DarkSnail))", "score": 0}
{"id": "eqasc_validation_1625", "prediction": "all x.(HermitCrab(x) -> (Scavenger(x) & HuntsForDeadSnail(x)))", "score": 0}
{"id": "eqasc_validation_1625", "prediction": "all x.(HermitCrab(x) -> (ScavengerForDeadSnails(x) & ForCradle(x)))", "score": 0}
{"id": "eqasc_validation_1625", "prediction": "all x.(HermitCrab(x) -> (Craver(x) & ScavengerForSnails(x)))", "score": 0}
{"id": "eqasc_validation_1625", "prediction": "all x.(HermitCrab(x) -> (ScavengerForDaspySnails(x) & ForAllThreadedSnails(x)))", "score": 0}
{"id": "eqasc_validation_1625", "prediction": "all x.(HermitCrab(x) -> (ScavengersForDeadSnails(x) & CavengerForDeadSnails(x)))", "score": 0}
{"id": "eqasc_validation_1625", "prediction": "all x y.((Crab(x) & Hermit(y)) -> Scavenger(x,y))", "score": 0}
{"id": "eqasc_validation_1625", "prediction": "all x.(HürmitCrab(x) -> (ScavengerForDeadSnails(x) & ScavengerForDeadSnails(x)))", "score": 0}
{"id": "eqasc_validation_1625", "prediction": "all x y z.((HermitCrab(x) & DeadShell(y) & Snail(z)) -> ScavengerFor(x,y,z))", "score": 0}
{"id": "eqasc_validation_1626", "prediction": "all x.((VolcanicAsh(x) & Atmosphere(y)) -> DisproportionatesTemperatureByBlockingSunlight(x,y))", "score": 0}
{"id": "eqasc_validation_1626", "prediction": "all x y.((VolcanicAsh(x) & Atmosphere(x,y) & BlocksSun(x,y)) -> ReducesTemperature(x))", "score": 0}
{"id": "eqasc_validation_1626", "prediction": "all x y.((VolcanicAsh(x) & Atmosphere(y)) -> (DecreasesTemperatureByBlockingSun(x) (SolidAsh(x) & SunAsh(x))))", "score": -1}
{"id": "eqasc_validation_1626", "prediction": "all x y.((VolcanicAsh(x) & Atmosphere(y)) -> DecreasesTemperatureByBlockingSun(x,y))", "score": 0}
{"id": "eqasc_validation_1626", "prediction": "all x y z.((VolcanicAsh(x) & Atmosphere(y) & Temperature(z)) -> Reduced(x,y,z))", "score": 0}
{"id": "eqasc_validation_1626", "prediction": "all x y.((VolcanicAsh(x) & Atmosphere(y) & BlocksSun(x,y)) -> DecroisesTemperatureByBlockingSun(x,y))", "score": 0}
{"id": "eqasc_validation_1626", "prediction": "all x y z.((VolcanicAsh(x) & Atmosphere(y) & Sun(z)) -> (DecreasesTemperature(x,z) & BlocksSun(y,z)))", "score": 0}
{"id": "eqasc_validation_1626", "prediction": "all x.((VolcanicAsh(x) & Atmosphere(x)) -> (DecreasesTemperature(x) & BlocksSun(x)))", "score": 0}
{"id": "eqasc_validation_1626", "prediction": "all x y.((VolcanicAsh(x) & Atmosphere(x)) -> (DecreasesTemperature(x,y) & BlocksSuns(x)))", "score": 0}
{"id": "eqasc_validation_1626", "prediction": "all x y.((VolcanicAsh(x) & Atmosphere(y)) -> (DecreasesTemperatureByBlockingSunlight(x) & IncreasesTemperatureByBlockingSunlight(x)))", "score": 0}
{"id": "eqasc_validation_1626", "prediction": "all x y z.((VolcanicAsh(x) & Atmosphere(y) & Heat(z)) -> (DecreasesTemperatureByBlockingSunlight(x,y,z)))", "score": 0}
{"id": "eqasc_validation_1626", "prediction": "all x.((VolcanicAsh(x) & Atmosphere(x) & BlocksSun(x)) -> DecreasesTemperatureByBlockingSun(x))", "score": 0}
{"id": "eqasc_validation_1626", "prediction": "all x y.((VolcanicAsh(x) & Atmosphere(y)) -> (DecreasesTemperatureByBlockingSuns(x,y)))", "score": 0}
{"id": "eqasc_validation_1626", "prediction": "all x y.((VolcanicAsh(x) & Atmosphere(y) & DecreasesTemperatureByBlockingSun(x,y)) -> DecreasesTemperatureByBlockingSun(x,y))", "score": 0}
{"id": "eqasc_validation_1626", "prediction": "all x.((VolcanicAsh(x) & Atmosphere(x)) -> (BlocksSunlight(x) & DecreasesTemperature(x)))", "score": 0}
{"id": "eqasc_validation_1626", "prediction": "all x y.((VolcanicAsh(x) & Atmosphere(y)) -> (DecreasesTemperatureByBlockingSunlight(x,y)))", "score": 0}
{"id": "eqasc_validation_1627", "prediction": "all x.(Aerosol(x) -> (Dust(x) | VolcanicAsh(x) | Smoke(x)))", "score": 0}
{"id": "eqasc_validation_1627", "prediction": "all x.((Airsol(x) & Dust(x)) -> (VolcanicAsh(x) | Smoke(x)))", "score": 0}
{"id": "eqasc_validation_1627", "prediction": "(Example(x) -> (Aerosol(x) | Dust(x) | VolcanicAsh(x) | Smoke(x))))", "score": -1}
{"id": "eqasc_validation_1627", "prediction": "all x.((Aerosol(x) & Dust(x) & VolcanicAsh(x) & Smoke(x)) -> Aerosol(x))", "score": 0}
{"id": "eqasc_validation_1627", "prediction": "all x.((Airsol(x) & Dust(x) & VolcanicAsh(x) & Smoke(x)) -> Aerosol(x))", "score": 0}
{"id": "eqasc_validation_1627", "prediction": "exists x.(Aerosol(x) & (Dust(x) | VolcanicAsh(x) | Smoke(x)))", "score": 0}
{"id": "eqasc_validation_1627", "prediction": "all x.((Aerosol(x) & Dust(x) & VolcanicAsh(x) & Smoke(x)) -> AerosolHasElements(x))", "score": 0}
{"id": "eqasc_validation_1627", "prediction": "(ExemplesOfAerosols(x) -> (StandardDust(x) | VolcanicAsh(x) | Smoke(x)))", "score": 0}
{"id": "eqasc_validation_1627", "prediction": "all x.(Aerosol(x) -> ((Dums(x) | VolcanicAsh(x) | Smoke(x))))", "score": 0}
{"id": "eqasc_validation_1627", "prediction": "all x.((Aerosol(x) & (Dust(x) | VolcanicAsh(x) | Smoke(x))) -> Aerosol(x))", "score": 0}
{"id": "eqasc_validation_1628", "prediction": "exists x.(Aerosol(x) & (DisassociatesTemperatures(x) | BlocksSun(x)))", "score": 0}
{"id": "eqasc_validation_1628", "prediction": "exists x.(Aerosol(x) & SlowsTemperatureDecrease(x))", "score": 0}
{"id": "eqasc_validation_1628", "prediction": "exists x.(Aerosol(x) & (Cross(x) | Block(x))) -> DecreasesTemperatures(x))", "score": -1}
{"id": "eqasc_validation_1628", "prediction": "exists x.(Aerosol(x) & CanDecreaseTemperatures(x) & BlocksSun(x))", "score": 0}
{"id": "eqasc_validation_1628", "prediction": "exists x.(Aerosol(x) & DecreaseTerminalTemperaturesByBlockingSun(x))", "score": 0}
{"id": "eqasc_validation_1628", "prediction": "exists x.(Aerosol(x) & CanDecreaseTemperaturesByBlockingSun(x))", "score": 0}
{"id": "eqasc_validation_1628", "prediction": "exists x.(Airsol(x) & DecreasesTemperatures(x) & BlocksSun(x))", "score": 0}
{"id": "eqasc_validation_1628", "prediction": "exists x.(Aerosol(x) & CanDecreaseTemperaturesByBlockingSunlight(x))", "score": 0}
{"id": "eqasc_validation_1628", "prediction": "exists x-(Aerosol(x) & CanDicreaseTemperaturesByBlockingSunlight(x))", "score": 0}
{"id": "eqasc_validation_1628", "prediction": "exists x.(Aerosol(x) & CanDecreaseTemperatures(x) & BlockTheSun(x))", "score": 0}
{"id": "eqasc_validation_1628", "prediction": "exists x.(Aerosol(x) & DecreasingTemperatures(x) & BlockingSun(x))", "score": 0}
{"id": "eqasc_validation_1628", "prediction": "exists x.(Aerosol(x) & BlocksSun(x) & DecreasesTemperatures(x))", "score": 0}
{"id": "eqasc_validation_1629", "prediction": "all x.((HawaiianVolcano(x) & EruptiveProducts(x)) -> SpreadsWideRangeOfTemperatures(x))", "score": 0}
{"id": "eqasc_validation_1629", "prediction": "all x y.((Volcano(x) & Hawaiian(y)) -> ERuptiveProduct(x))", "score": 0}
{"id": "eqasc_validation_1629", "prediction": "all x.((Product(x) & HawaiianVolcano(x)) -> SpansWideRangeOfTemperatures(x))", "score": 0}
{"id": "eqasc_validation_1629", "prediction": "all x.((EruptiveProduct(x) & HawaiianVolcano(x)) -> SpreadsWideRangeOfTemperatures(x))", "score": 0}
{"id": "eqasc_validation_1629", "prediction": "all x y z.((UrbanVolcano(x) & Eruptive(y) & Temperature(z) & HawaiianVulcan(x)) -> SpreadsWideRange(x,y,z))", "score": 0}
{"id": "eqasc_validation_1629", "prediction": "all x y.((EruptiveProducts(x) & HawaiianVolcano(y)) -> SpansWideRangeOfTemperatures(x,y))", "score": 0}
{"id": "eqasc_validation_1629", "prediction": "all x.(EruptiveProductsOfHawaiianVolcanoes(x) -> (SpansWideRangeOfTemperatures(x)))", "score": 0}
{"id": "eqasc_validation_1629", "prediction": "all x.((EruptiveProduct(x) & HawaiianVolcano(x)) -> (SpansWideRangeOfTemperatures(x)))", "score": 0}
{"id": "eqasc_validation_1629", "prediction": "all x.((EruptiveProduct(x) & HawaiianVolcano(x)) -> SpansWideRangeOfTemperature(x))", "score": 0}
{"id": "eqasc_validation_1629", "prediction": "all x.(EruptiveProduct(x) -> HawaiianVolcano(x))", "score": 0}
{"id": "eqasc_validation_1629", "prediction": "all x.((EruptiveProductsOfHawaiianVolcanoes(x)) -> SpansWearRangeOfTemperatures(x))", "score": 0}
{"id": "eqasc_validation_1629", "prediction": "all x y.((EruptiveProduct(x) & HawaiianVolcano(y)) -> (SpansWideRangeOfTemperature(x,y)))", "score": 0}
{"id": "eqasc_validation_1629", "prediction": "all x.((HawaiianVolcanoes(x) & EruptiveProducts(x)) -> SpreadsWideRangeOfTemperatures(x))", "score": 0}
{"id": "eqasc_validation_1630", "prediction": "all x.(EruptiveProduct(x) -> BlocksSun(x))", "score": 0}
{"id": "eqasc_validation_1630", "prediction": "all x.((EruptiveProduct(x) & BlockSun(x)) -> BlockSun(x))", "score": 0}
{"id": "eqasc_validation_1630", "prediction": "all x.((EruptiveProduct(x) -> BlockLaser(x)))", "score": 0}
{"id": "eqasc_validation_1630", "prediction": "all x y.((EruptiveProduct(x) & Sun(y)) -> BlocksSun(x,y))", "score": 0}
{"id": "eqasc_validation_1630", "prediction": "all x y z.((EruptiveProduct(x) & Sun(y) & Sun(z)) -> Blocks(x,y,z))", "score": 0}
{"id": "eqasc_validation_1630", "prediction": "all x y.((EruptiveProduct(x) & Sun(y)) -> Blocks(x,y))", "score": 0}
{"id": "eqasc_validation_1630", "prediction": "all x.(EruptiveProducts(x) -> BlocksSun(x))", "score": 0}
{"id": "eqasc_validation_1630", "prediction": "all x.(EffortiveProducts(x) -> BlocksSun(x))", "score": 0}
{"id": "eqasc_validation_1630", "prediction": "all x.((Product(x) & Eruptive(x)) -> BlocksSun(x))", "score": 0}
{"id": "eqasc_validation_1630", "prediction": "all x.((EruptiveProduct(x) & Sun(s)) -> BlocksSun(x,s))", "score": 0}
{"id": "eqasc_validation_1631", "prediction": "all x y.((Cloud(x) & Temperature(y) & Increases(x,y)) -> BlocksSun(x))", "score": 0}
{"id": "eqasc_validation_1631", "prediction": "all x y.((Cloud(x) & Sun(y) & Increased(x,y)) -> SeamlessTemperature(z))", "score": 0}
{"id": "eqasc_validation_1631", "prediction": "all x.((Cloud(x) & IncreasesCloudBlock(x)) -> TemperaturesDrop(x))", "score": 0}
{"id": "eqasc_validation_1631", "prediction": "all x.((CloudBlocksSun(x) & IncreasesCloud(x) & ReducesTemperatures(x)) -> IncreasesTemperatures(x))", "score": 0}
{"id": "eqasc_validation_1631", "prediction": "all x.(TogetherCloud(x) -> (CompletelyBlocksSun(x) & ReducesTemperatures(x)))", "score": 0}
{"id": "eqasc_validation_1631", "prediction": "all x y z.((Cloud(x) & Sun(y) & Temperature(z)) -> Increases(x,y))", "score": 0}
{"id": "eqasc_validation_1631", "prediction": "all x.((CloudImproves(x) & SunBlocks(x)) -> TemperaturesDrop(x))", "score": 0}
{"id": "eqasc_validation_1631", "prediction": "all x.((Cloud(x) & IncreasesSunBlock(x)) -> DropsTemperatures(x))", "score": 0}
{"id": "eqasc_validation_1631", "prediction": "all x.((CloudBlockingSun(x) & IncreasesContext(x)) -> TemperaturesDirtsRegularly(x))", "score": 0}
{"id": "eqasc_validation_1631", "prediction": "all x y.((Cloud(x) & Sun(y) & Increases(x,y)) -> TemperatureDrop(x))", "score": 0}
{"id": "eqasc_validation_1631", "prediction": "all x y.((Cloud(x) & CloudSun(y) & Increases(x,y)) -> TemperatureDecreases(x))", "score": 0}
{"id": "eqasc_validation_1631", "prediction": "all x.((CloudBlock(x) & Increased(x)) -> TemperatureDeclines(x))", "score": 0}
{"id": "eqasc_validation_1631", "prediction": "all x.((CloudBlocking(x) & Increased(x)) -> TemperatureDirt(x))", "score": 0}
{"id": "eqasc_validation_1631", "prediction": "all x y.((CloudBlocksSun(x) & Temperature(y)) -> Reduces(x,y))", "score": 0}
{"id": "eqasc_validation_1631", "prediction": "all x y z.((CloudBlocksSun(x) & Temperature(y) & Sun(z)) -> DiminishedSunlight(y,z))", "score": 0}
{"id": "eqasc_validation_1631", "prediction": "all x.((CloudBlocksSun(x) & Increases(x)) -> TemperaturesDirtsDecently(x))", "score": 0}
{"id": "eqasc_validation_1632", "prediction": "all x.(VolcanicAsh(x) -> IncreasedCloudsBlockingSun(x))", "score": 0}
{"id": "eqasc_validation_1632", "prediction": "all x y.((VolcanicAsh(x) & Atmosphere(y)) -> IncreasesClouds(x,y))", "score": 0}
{"id": "eqasc_validation_1632", "prediction": "all x y z.((VolcanicAsh(x) & Atmosphere(y) & Cloud(z)) -> IncreasesBlockingSun(x,y))", "score": 0}
{"id": "eqasc_validation_1632", "prediction": "all x y.((VolcanicAsh(x) & Atmosphere(y)) -> IncreasesCloudsSunBlocking(x,y))", "score": 0}
{"id": "eqasc_validation_1632", "prediction": "all x y z.((VolcanicAsh(x) & Atmosphere(y) & Cloud(z)) -> Increases(x,y,z))", "score": 0}
{"id": "eqasc_validation_1632", "prediction": "(OptimalAsh(VolcanicAsh) & BoostsClouds(VolcanicAsh))", "score": 0}
{"id": "eqasc_validation_1632", "prediction": "all x y.((VolcanicAsh(x) & Atmosphere(y) & BlocksSun(y,x)) -> IncreasesClouds(x))", "score": 0}
{"id": "eqasc_validation_1632", "prediction": "all x y.((VolcanicAsh(x) & Atmosphere(y) & IncreasesClouds(x,y)) -> BlocksSun(y))", "score": 0}
{"id": "eqasc_validation_1632", "prediction": "all x.(VolcanicAshInAtmosphere(x) -> IncreasesClouds(x))", "score": 0}
{"id": "eqasc_validation_1632", "prediction": "all x y.((VolcanicAshInAtmosphere(x) & Cloud(y)) -> IncreasesBlockingSun(x,y))", "score": 0}
{"id": "eqasc_validation_1632", "prediction": "all x y.((VolcanicAsh(x) & Atmosphere(y)) -> IncreasesCloudsBlockingSun(x,y))", "score": 0}
{"id": "eqasc_validation_1632", "prediction": "all x y z.((VolcanicAsh(x) & Atmosphere(y) & Cloud(z)) -> IncreasesBlockingSun(x,y,z))", "score": 0}
{"id": "eqasc_validation_1632", "prediction": "all x y.((VolcanicAsh(x) & Atmosphere(y)) -> IncreasesCloudsBlockSun(x,y))", "score": 0}
{"id": "eqasc_validation_1632", "prediction": "all x.(VolcanicAsh(x) -> (IncreasesClouds(x) & BlocksSun(x)))", "score": 0}
{"id": "eqasc_validation_1632", "prediction": "all x.(VolcanicAsh(x) -> IncreasesClouds(x))", "score": 0}
{"id": "eqasc_validation_1632", "prediction": "all x y.((VolcanicAsh(x) & Atmosphere(y)) -> IncreasesCloudsBlockingSun.(x,y))", "score": -1}
{"id": "eqasc_validation_1633", "prediction": "all x y.((VolcanicAsh(x) & SpewedIntoAtmosphere(x)) -> BlocksRadiation(x,y))", "score": 0}
{"id": "eqasc_validation_1633", "prediction": "all x.((VolcanicAsh(x) & SpewedIntoAtmosphere(x)) -> BlocksRadioactive(x))", "score": 0}
{"id": "eqasc_validation_1633", "prediction": "all x.(DuckingSunRadiation(x) -> (VolcanicAsh(x) & SpewedIntoAtmosphere(x)))", "score": 0}
{"id": "eqasc_validation_1633", "prediction": "all x y.((VolcanicAsh(x) & SpewedIntoAtmosphere(x)) -> (BlockTheSunResonance(x) & CoolAir(y)))", "score": 0}
{"id": "eqasc_validation_1633", "prediction": "all x.(VolcanicAsh(x) -> (SpewedIntoAtmosphere(x) & BlocksSunRadiation(x) & CoolsAir(x)))", "score": 0}
{"id": "eqasc_validation_1633", "prediction": "all x y.((VolcanicAsh(x) & SpewedIntoAtmosphere(x)) -> BlocksSunsRadiation(x,coolsAir))", "score": 0}
{"id": "eqasc_validation_1633", "prediction": "all x.((VolcanicAsh(x) & SpewedIntoAtmosphere(x)) -> (BlocksSunRadiation(x) & CoolsAir(x)))", "score": 0}
{"id": "eqasc_validation_1633", "prediction": "all x.((VolcanicAsh(x) & SpewedIntoAtmosphere(x)) -> BlocksRayleighToClimateAir(x))", "score": 0}
{"id": "eqasc_validation_1633", "prediction": "all x.((VolcanicAsh(x) & SpewedIntoAtmosphere(x)) -> BlocksSunRadiography(x))", "score": 0}
{"id": "eqasc_validation_1633", "prediction": "all x y.((VolcanicAsh(x) & SpewedIntoAtmosphere(x)) -> BlocksCooling(y))", "score": 0}
{"id": "eqasc_validation_1633", "prediction": "all x.((VolcanicAsh(x) & SpewedIntoAtmosphere(x)) -> BlocksSunRuft(x))", "score": 0}
{"id": "eqasc_validation_1633", "prediction": "all x y.((VolcanicAsh(x) & SpewedIntoAtmosphere(x)) -> CanBlockSunRadioactivity(x,y))", "score": 0}
{"id": "eqasc_validation_1633", "prediction": "all x y.((VolcanicAsh(x) & SpewedIntoAtmosphere(x)) -> CanBlockPartOfSunRadiation(x,y))", "score": 0}
{"id": "eqasc_validation_1633", "prediction": "all x y z.((VolcanicAsh(x) & SunRadiation(y) & Air(z) & SpewedIntoAtmosphere(x)) -> BlocksPartAsSunRadiationCleaningService(x,y,z))", "score": 0}
{"id": "eqasc_validation_1633", "prediction": "all x y.((VolcanicAsh(x) & SpewedIntoAtmosphere(x)) -> BlocksSunRadiationToCoolAir(y))", "score": 0}
{"id": "eqasc_validation_1634", "prediction": "all x.(VolcanicAsh(x) -> BlocksSunAndColdsAir(x))", "score": 0}
{"id": "eqasc_validation_1634", "prediction": "all x y.((VolcanicAsh(x) & Sun(y)) -> (Blocks(x,y) & CoolsAir(x)))", "score": 0}
{"id": "eqasc_validation_1634", "prediction": "all x.(VolcanicAsh(x) -> (BlocksSun(x) & CoolsAir(x)))", "score": 0}
{"id": "eqasc_validation_1634", "prediction": "all x y.((VolcanicAsh(x) & Sun(y)) -> (BlocksSun(x,y) & CoolsAir(x)))", "score": 0}
{"id": "eqasc_validation_1634", "prediction": "all x y z.((VolcanicAsh(x) & Sun(y) & Air(z)) -> (Blocks(x,y) & Cools(x,z)))", "score": 0}
{"id": "eqasc_validation_1634", "prediction": "all x y z.((VolcanicAsh(x) & Sun(y) & Air(z)) -> (BlocksSunSunAndCools(x,y,z)))", "score": 0}
{"id": "eqasc_validation_1634", "prediction": "all x y z.((VolcanicAsh(x) & Sun(y) & Air(z)) -> (Blocks(x,y) | Cools(x)))", "score": 0}
{"id": "eqasc_validation_1634", "prediction": "all x.(VolcanicAshBlocksSunAndColdAir(x) -> (VolcanicAsh(x) & BlocksSun(x) & CoolsAir(x)))", "score": 0}
{"id": "eqasc_validation_1635", "prediction": "all x.(VolcanicAsh(x) -> ConsistsOfFineDesertyParticles(x))", "score": 0}
{"id": "eqasc_validation_1635", "prediction": "all x.(VolcanicAsh(x) -> FineDustyParticles(x))", "score": 0}
{"id": "eqasc_validation_1635", "prediction": "all x.(VolcanicAsh(x) -> ConsistsOfFinishDustyParticles(x))", "score": 0}
{"id": "eqasc_validation_1635", "prediction": "all x.(VulcanicAsh(x) -> FineDesertyParticles(x))", "score": 0}
{"id": "eqasc_validation_1635", "prediction": "all x.(VolcanicAsh(x) -> (ContainsFineDustyParts(x)))", "score": 0}
{"id": "eqasc_validation_1635", "prediction": "(exists x.(VolcanicAsh(x) & Fine(y) & Dusty(z)) & ConsistsOf(x,0,y))", "score": 0}
{"id": "eqasc_validation_1635", "prediction": "all x.(VolcanicAsh(x) -> ConsistsOfFineDustyPartitions(x))", "score": 0}
{"id": "eqasc_validation_1635", "prediction": "all x.(VolcanicAsh(x) -> ConsistsOfFineDustyParticles(x))", "score": 0}
{"id": "eqasc_validation_1635", "prediction": "all x.(VolcanicAsh(x) -> (FineDustyParticles(x) | FineParticles(x)))", "score": 0}
{"id": "eqasc_validation_1635", "prediction": "all x.(VolcanicAsh(x) -> (FineDustyParticles(x) & Contains(x)))", "score": 0}
{"id": "eqasc_validation_1635", "prediction": "all x.(VolcanicAsh(x) -> FineDostyParticles(x))", "score": 0}
{"id": "eqasc_validation_1635", "prediction": "all x.(VolcanicAsh(x) -> (FineDustyParticles(x) & Contains(x,y,z)))", "score": 0}
{"id": "eqasc_validation_1635", "prediction": "all x.(VibrantAsh(x) -> (FineDoubleParticles(x) & DustyParticles(x)))", "score": 0}
{"id": "eqasc_validation_1635", "prediction": "all x.(VolcanicAsh(x) -> FineDumptyParticles(x))", "score": 0}
{"id": "eqasc_validation_1636", "prediction": "all x y z.((FineDustyParticles(x) & Atmosphere(y) & Temperature(z)) -> IncreasesSunTemperatureBlocking(y,z))", "score": 0}
{"id": "eqasc_validation_1636", "prediction": "all x y z.((FineDustyParticles(x) & Atmosphere(y) & Temperature(z)) -> DecreasesFastBlockmentOfSun(x,z))", "score": 0}
{"id": "eqasc_validation_1636", "prediction": "all x.((FineDustyParticles(x) & Atmosphere(x) & BlocksSun(x)) -> LowersTemperature(x))", "score": 0}
{"id": "eqasc_validation_1636", "prediction": "all x y z.((FineDustyParticles(x) & Atmosphere(y) & Sun(z)) -> (DecreasesTemperature(x,y) & BlocksSun(x,z)))", "score": 0}
{"id": "eqasc_validation_1636", "prediction": "all x y.((FineDryParticles(x) & Atmosphere(y) & BlocksSun(x,y)) -> DecreasesTemperatureByBlockingSun(x,y))", "score": 0}
{"id": "eqasc_validation_1636", "prediction": "all x y.((FineDustyParticles(x) & Atmosphere(y) & BlocksSun(x,y)) -> LowersTemperatureByLocating(x,y))", "score": 0}
{"id": "eqasc_validation_1636", "prediction": "all x.((Fine(x) & DustyParticles(x) & Atmosphere(x)) -> (DecreasesTemperature(x) & BlocksSun(x)))", "score": 0}
{"id": "eqasc_validation_1636", "prediction": "all x y z.((FineD dustyParticles(x) & Atmosphere(y) & Atmosphere(z)) -> (DecreasesTemperature(x,y) & BlocksSun(x,z)))", "score": -1}
{"id": "eqasc_validation_1636", "prediction": "all x,((FineDustyParticles(x) & Atmosphere(x) & BlocksSunlight(x)) -> DescrewesTemperature(x,(x)))", "score": -1}
{"id": "eqasc_validation_1636", "prediction": "all x y.((FineDumptyParticles(x) & Atmosphere(y) & BlocksSun(x)) -> DecreasesTemperatureByBlockingSun(x))", "score": 0}
{"id": "eqasc_validation_1636", "prediction": "all x y z.((FineDumptyParticles(x) & Atmosphere(y) & Temperature(z)) -> Diminishes(x,y,z))", "score": 0}
{"id": "eqasc_validation_1636", "prediction": "all x y z.((FineDustyParticlesInAtmosphere(x) & Air(y) & Sun(z) & BlocksSun(z)) -> DecreasesTemperatureByBlockingSun(x,y,z))", "score": 0}
{"id": "eqasc_validation_1636", "prediction": "all x.((FineDustyParticles(x) & Atmosphere(x)) -> -(DecreasesTemperature(x) & BlocksSun(x)))", "score": 0}
{"id": "eqasc_validation_1636", "prediction": "all x y.((FineDustyParticles(x) & Atmosphere(y)) -> (DecreasesTemperature(x,y) & BlocksSun(x)))", "score": 0}
{"id": "eqasc_validation_1636", "prediction": "all x.((FineDustyParticlesInAtmosphere(x) & BlocksSunlight(x)) -> DecreasesTemperatureByHeatingTheSun(x))", "score": 0}
{"id": "eqasc_validation_1636", "prediction": "all x.((FineDustyParticles(x) & InAtmosphere(x) & BlotsSun(x)) -> DecreasesTemperatureByBlockingSun(x))", "score": 0}
{"id": "eqasc_validation_1637", "prediction": "all x y z.((Atmosphere(x) & Object(y) & Space(z)) -> AirAroundIn(x,y,z))", "score": 0}
{"id": "eqasc_validation_1637", "prediction": "all x.(Atmosphere(x) -> AirAroundObjectInSpace(x))", "score": 0}
{"id": "eqasc_validation_1637", "prediction": "all x.(Atmosphere(x) -> AirAround(x))", "score": 0}
{"id": "eqasc_validation_1637", "prediction": "all x.(Atmosphere(x) -> AirAroundAnObject(x))", "score": 0}
{"id": "eqasc_validation_1637", "prediction": "all x y.((Atmosphere(x) & Object(y)) -> AirAround(x,y))", "score": 0}
{"id": "eqasc_validation_1637", "prediction": "all x.(Atmosphere(x) -> (AirAround(x,Space) & Object(x,Space)))", "score": 0}
{"id": "eqasc_validation_1637", "prediction": "all x.(Atmosphere(x) -> AirAroundObject(x))", "score": 0}
{"id": "eqasc_validation_1637", "prediction": "all x y.((Atmosphere(x) & Object(y) & InSpace(x,y)) -> AirAroundOf(x,y))", "score": 0}
{"id": "eqasc_validation_1637", "prediction": "all x y.((Atmosphere(x) & Space(y)) -> AirAround(x,y))", "score": 0}
{"id": "eqasc_validation_1637", "prediction": "all x.(Atmosphere(x) -> AirAroundObject(x,Space))", "score": 0}
{"id": "eqasc_validation_1637", "prediction": "all x.(Atmosphere(x) -> Air(x))", "score": 0}
{"id": "eqasc_validation_1637", "prediction": "all x y.((Atmosphere(x) & Object(y)) -> AirBetween(x,y))", "score": 0}
{"id": "eqasc_validation_1637", "prediction": "all x.(Atmosphere(x) -> AirForObject(x))", "score": 0}
{"id": "eqasc_validation_1638", "prediction": "all x y z.((VolcanicAsh(x) & AirAround(x,y) & Earth(z)) -> (DecreasesTemperature(x,z) & BlocksSun(x,z)))", "score": 0}
{"id": "eqasc_validation_1638", "prediction": "all x y.((VolcanicAsh(x) & Air(y) & InEarth(x,y)) -> BlocksSunlight(x))", "score": 0}
{"id": "eqasc_validation_1638", "prediction": "all x y.((VolcanicAsh(x) & AirCall(y)) -> DecreasesTemperatureByBlockingSunlight(x,y))", "score": 0}
{"id": "eqasc_validation_1638", "prediction": "all x y.(MinorsTemperature(x) -> (VolcanicAsh(x) & AirAroundEarth(y) & BlocksSun(x) & DecreasesTemperature(x)))", "score": 0}
{"id": "eqasc_validation_1638", "prediction": "all x y.((VenutianAsh(x) & AirAround(y) & Earth(y)) -> (DecreasesTemperature(x,y) & BlocksSun(x,y)))", "score": 0}
{"id": "eqasc_validation_1638", "prediction": "all x y z.((VolcanicAsh(x) & AirAroundEarth(y) & Earth(z)) -> (DecreasesTemperature(x,y) & BlocksSun(x,z)))", "score": 0}
{"id": "eqasc_validation_1638", "prediction": "all x y.((VolcanicAsh(x) & Earth(y)) -> DecreasesTheTemperatureByBlockingSunlight(x,y))", "score": 0}
{"id": "eqasc_validation_1638", "prediction": "all x y.((VolcanicAshAir(x) & Earth(y)) -> (DecreasesTemperature(x,y) & BlocksSunbomb(x,y)))", "score": 0}
{"id": "eqasc_validation_1638", "prediction": "all x y z.((VolcanicAsh(x) & Earth(y) & AirAround(x,y)) -> (DecreasesTemperatureByBlockingSun(x,z) & SensesSun(z)))", "score": 0}
{"id": "eqasc_validation_1638", "prediction": "all x y z.((VolcanicAsh(x) & AirAroundEarth(y) & Earth(z)) -> (DecreasesTemperature(x,y,z) & BlocksSun(x,z)))", "score": 0}
{"id": "eqasc_validation_1638", "prediction": "all x.((VolcanicAsh(x) & AirAroundEarth(x)) -> (DecreasesTemperature(x) & BlocksSun(x)))", "score": 0}
{"id": "eqasc_validation_1638", "prediction": "all x.((VolcanicAsh(x) & AirAroundEarth(x)) -> DecreasesTemperatureByBlockingSun(x))", "score": 0}
{"id": "eqasc_validation_1638", "prediction": "all x y.((VolcanicAsh(x) & Air(y) & Earth(p)) -> (DecreasesTemperatureBetweenSuns(x) & BlocksSuns(x)))", "score": 0}
{"id": "eqasc_validation_1638", "prediction": "all x y z.((VolcanicAsh(x) & AirAroundEarth(y) & Earth(z)) -> ReducesTemperatureByBlockingSunlight(x,y,z))", "score": 0}
{"id": "eqasc_validation_1638", "prediction": "all x y.((VolcanicAsh(x) & Earth(y)) -> (DecreasesTemperature(x,y) & BlocksSunlight(x,y)))", "score": 0}
{"id": "eqasc_validation_1638", "prediction": "all x y.((VolcanicAsh(x) & Earth(y) & InAir(x,y) & BlocksSun(x,y)) -> DecreasesTemperatureByBlockingSun(x,y))", "score": 0}
{"id": "eqasc_validation_1639", "prediction": "all x y.((SmallTemperatureVariation(x) & NaturalEcosystem(y)) -> HasMoreEffects(x,y))", "score": 0}
{"id": "eqasc_validation_1639", "prediction": "all x.(SmallTemperatureVariation(x) -> HasMajorEffectsOnNaturalEcosystems(x))", "score": 0}
{"id": "eqasc_validation_1639", "prediction": "all x.(SmallTemperatureVariations(x) -> HasMajorEffectsOnNaturalEcosystems(x))", "score": 0}
{"id": "eqasc_validation_1639", "prediction": "all x y.((SmallTemperatureVariations(x) & NaturalEcosystem(y)) -> HasMajorEffects(x,y))", "score": 0}
{"id": "eqasc_validation_1639", "prediction": "all x.(SmallTemperatureVariation(x) -> CanHaveMajorEffectsOnNaturalEcosystems(x))", "score": 0}
{"id": "eqasc_validation_1639", "prediction": "all x.(SmallTemperatureVariations(x) -> CanHaveMajorEffectsOnNaturalEcosystems(x))", "score": 0}
{"id": "eqasc_validation_1639", "prediction": "all x y.((SmallTemperatureVariations(x) & NaturalEcosystem(y)) -> HasMajorEffect(x,y))", "score": 0}
{"id": "eqasc_validation_1639", "prediction": "all x.(SmallTemperatureVariations(x) -> MajorEffectsOnNaturalEcosystems(x))", "score": 0}
{"id": "eqasc_validation_1639", "prediction": "all x y.((SmallTemperatureVariation(x) & NaturalEcosystem(y)) -> HasSeasonalEffects(x,y))", "score": 0}
{"id": "eqasc_validation_1639", "prediction": "all x y.((SmallTemperatureVariation(x) & NaturalEcosystem(y)) -> HasMajorEffects(x,y))", "score": 0}
{"id": "eqasc_validation_1639", "prediction": "all x.(SmallTemperatureVariation(x) -> HasMajorEffectOnNaturalEcosystems(x))", "score": 0}
{"id": "eqasc_validation_1640", "prediction": "all x y.((VolcanicAsh(x) & Atmosphere(y)) -> HasLeafEffectsOnNaturalEcosystems(x,y))", "score": 0}
{"id": "eqasc_validation_1640", "prediction": "all x y z.((VolcanicAshIsAtmosphere(x) & Atmosphere(y) & NaturalEcosystem(z)) -> CanHaveMajorEffectOn(x,y,z))", "score": 0}
{"id": "eqasc_validation_1640", "prediction": "all x.((VolcanicAsh(x) & Atmosphere(x)) -> CanHaveMajorEffectsOnNaturalEcosystems(x))", "score": 0}
{"id": "eqasc_validation_1640", "prediction": "all x y.((VolcanicAsh(x) & Atmosphere(y)) -> CanHaveMajorEffectsOnNaturalEcosystems(x,y))", "score": 0}
{"id": "eqasc_validation_1640", "prediction": "all x y z.((VolcanicAsh(x) & Atmosphere(y) & NaturalEcosystem(z)) -> (CanHaveMajorEffectsOn(x,y,z)))", "score": 0}
{"id": "eqasc_validation_1640", "prediction": "all x.((VolcanicAshInAtmosphere(x) & Atmosphere(x)) -> (CanHaveMajorEffectsOnNaturalEcosystems(x)))", "score": 0}
{"id": "eqasc_validation_1640", "prediction": "all x.((VolcanicAsh(x) & InAtmosphere(x)) -> HasMajorEffectsOnNaturalEcosystems(x))", "score": 0}
{"id": "eqasc_validation_1640", "prediction": "all x y.((VolcanicAsh(x) & Atmosphere(y)) -> HasMajorEffectsOnNaturalEcosystems(x,y))", "score": 0}
{"id": "eqasc_validation_1640", "prediction": "all x y.((VolcanicAsh(x) & Atmosphere(y)) -> (CanHaveMoreEffectsOnNaturalEcosystems(x,y)))", "score": 0}
{"id": "eqasc_validation_1640", "prediction": "all x.((VolcanicAsh(x) & Atmosphere(x)) -> HasMagnificentEffectsOnNaturalEcosystems(x))", "score": 0}
{"id": "eqasc_validation_1640", "prediction": "all x y.((VolcanicAsh(x) & Atmosphere(y)) -> CanHaveMoreEffectsOnNaturalEcosystems(x,y))", "score": 0}
{"id": "eqasc_validation_1640", "prediction": "all x.((VolcanicAsh(x) & InAtmosphere(x)) -> CanHaveMajorEffectsOnNaturalEcosystems(x))", "score": 0}
{"id": "eqasc_validation_1640", "prediction": "all x.((VolcanicAsh(x) & Atmosphere(x)) -> HasMoreEffectsOnNaturalEcosystems(x))", "score": 0}
{"id": "eqasc_validation_1640", "prediction": "all x y.((VolcanicAsh(x) & Atmosphere(y)) -> MayHaveMajorEffectsOnNaturalEcosystems(x,y))", "score": 0}
{"id": "eqasc_validation_1640", "prediction": "all x y.((VolcanicAsh(x) & Atmosphere(y)) -> CanHaveMajorEffectsOnNaturalEcosystems(x))", "score": 0}
{"id": "eqasc_validation_1641", "prediction": "all x.(Supersaturation(x) -> CommonStateForAtmosphericHazeParticles(x))", "score": 0}
{"id": "eqasc_validation_1641", "prediction": "all x y.((Supersaturation(x) & AtmosphericHazeParticle(y)) -> CommonStateFor(x,y))", "score": 0}
{"id": "eqasc_validation_1641", "prediction": "all x.(Supersaturation(x) -> CommonStateForAtmosphericHaze(x))", "score": 0}
{"id": "eqasc_validation_1641", "prediction": "all x y.((NaturalState(x) & AtmosphericHazeParticle(y)) -> AssociatedWith(x,y))", "score": 0}
{"id": "eqasc_validation_1641", "prediction": "all x y.((Supersaturation(x) & AtmosphericHaze(y)) -> CommonState(x,y))", "score": 0}
{"id": "eqasc_validation_1641", "prediction": "all x y.((AtmosphericHazeParticle(x) & Supersaturation(x)) -> CommonState(x,y))", "score": 0}
{"id": "eqasc_validation_1641", "prediction": "all x.(Supersaturation(x) -> CommonState(x))", "score": 0}
{"id": "eqasc_validation_1641", "prediction": "all x.(SurroundedState(x) -> CommonElementForAtmosphericHaze(x))", "score": 0}
{"id": "eqasc_validation_1641", "prediction": "all x.(Supersaturation(x) -> CommonStateForAtmosphericHaseParticles(x))", "score": 0}
{"id": "eqasc_validation_1641", "prediction": "all x.((Supersaturation(x) & AtmosphericHaze(y) & InferredVeryCommonState(x)) -> CoexistsWith(x,y))", "score": 0}
{"id": "eqasc_validation_1642", "prediction": "all x y.((Haze(x) & Sun(y)) -> (DecreasesTemperature(x) & Blocks(x,y)))", "score": 0}
{"id": "eqasc_validation_1642", "prediction": "all x y z.((Haze(x) & Sun(y) & Heat(z)) -> DecreasesTemperatureByBlocking(x,y,z))", "score": 0}
{"id": "eqasc_validation_1642", "prediction": "all x.(Haze(x) -> (DecreasesTemperature(x) & BlocksSun(x)))", "score": 0}
{"id": "eqasc_validation_1642", "prediction": "all x.(Haze(x) -> (DecreasesTemperature(x) | BlocksSun(x)))", "score": 0}
{"id": "eqasc_validation_1642", "prediction": "all x.(Haze(x) -> DecreasesTemperatureByBlockingSun(x))", "score": 0}
{"id": "eqasc_validation_1642", "prediction": "all x.(Haze(x) -> (DecreasesTemperatureByBlockingSun(x) & SunHaze(x) & SunHaze(x)))", "score": 0}
{"id": "eqasc_validation_1642", "prediction": "all x y z.((Haze(x) & Sun(y) & Sun(z) & BlocksSun(x,y)) -> ReducesTemperatureByBlockingSun(x,z))", "score": 0}
{"id": "eqasc_validation_1642", "prediction": "all x y.((Haze(x) & Sun(y)) -> (DecreasesTemperature(x,y) & BlocksSun(x,y)))", "score": 0}
{"id": "eqasc_validation_1642", "prediction": "all x.(Haze(x) -> (DecreasesTemperature(x) & BlocksSunlight(x)))", "score": 0}
{"id": "eqasc_validation_1642", "prediction": "all x.(Haze(x) -> (DecreasesTemperatureByBlockingSun(x) & Sunsun(x)))", "score": 0}
{"id": "eqasc_validation_1642", "prediction": "all x.(Haze(x) -> DecreasesTemperatureByBlockingSunlight(x))", "score": 0}
{"id": "eqasc_validation_1642", "prediction": "all x y z.((Haze(x) & Sun(y) & Temperature(z)) -> -(DecreasesTemperature(x,y) | Blocks(x,z))))", "score": -1}
{"id": "eqasc_validation_1643", "prediction": "all x.(AshCloud(x) -> AeronauticalProblem(x))", "score": 0}
{"id": "eqasc_validation_1643", "prediction": "all x.(AshCloud(x) -> ProblemForAircraft(x))", "score": 0}
{"id": "eqasc_validation_1643", "prediction": "all x y.((AshCloud(x) & Aeroplane(y)) -> ParticularProblem(x,y))", "score": 0}
{"id": "eqasc_validation_1643", "prediction": "all x y z.((AshCloud(x) & Aircraft(y) & Aircraft(z)) -> EspeciallyProblem(x,y,z))", "score": 0}
{"id": "eqasc_validation_1643", "prediction": "all x.(AshCloud(x) -> FlyingProblem(x))", "score": 0}
{"id": "eqasc_validation_1643", "prediction": "all x.(AshCloud(x) -> (SuitableForAircraft(x) & ParticularForAircraft(x)))", "score": 0}
{"id": "eqasc_validation_1643", "prediction": "all x.(AshCloud(x) -> EspeciallyProblemForAircraft(x))", "score": 0}
{"id": "eqasc_validation_1643", "prediction": "all x.(AshCloud(x) -> ParticularProblemForAircraft(x))", "score": 0}
{"id": "eqasc_validation_1643", "prediction": "all x.(AshCloud(x) -> (Problem(y) & Aircraft(y)))", "score": 0}
{"id": "eqasc_validation_1643", "prediction": "all x.(AshCloud(x) -> AircraftProblem(x))", "score": 0}
{"id": "eqasc_validation_1643", "prediction": "all x y z.((AshCloud(x) & Aeroplane(y) & Aeroplane(z)) -> ParticularProblem(x,y,z))", "score": 0}
{"id": "eqasc_validation_1643", "prediction": "all x y.((AshCloud(x) & Aircraft(y)) -> SpecialProblem(x,y))", "score": 0}
{"id": "eqasc_validation_1643", "prediction": "all x.(AshCloud(x) -> SpecialProblemForAircraft(x))", "score": 0}
{"id": "eqasc_validation_1644", "prediction": "all x.(VolcanicClouds(x) -> ProblemForAircraft(x))", "score": 0}
{"id": "eqasc_validation_1644", "prediction": "all x.(VolcanicCloudsInAtmosphere(x) -> SpecialProblemForAircraft(x))", "score": 0}
{"id": "eqasc_validation_1644", "prediction": "all x.(VolcanicClouds(x) -> AircraftProblem(x))", "score": 0}
{"id": "eqasc_validation_1644", "prediction": "all x.(VolcanicClouds(x) -> ParticularProblemForAircraft(x))", "score": 0}
{"id": "eqasc_validation_1644", "prediction": "all x.(VolcanicClouds@Atmosphere(x) -> ProblemForAircraft(x))", "score": 0}
{"id": "eqasc_validation_1644", "prediction": "all x.((VolcanicCloud(x) & Atmosphere(x)) -> AircraftProblem(x))", "score": 0}
{"id": "eqasc_validation_1644", "prediction": "all x.(VolcanicClouds(x) -> (ProblemForAircraft(x)))", "score": 0}
{"id": "eqasc_validation_1644", "prediction": "all x.( VolcanicClouds(x) -> ProblemForAircraft(x))", "score": 0}
{"id": "eqasc_validation_1644", "prediction": "all x.(VolcanicCloud(x) -> SpecialProblemForAircraft(x))", "score": 0}
{"id": "eqasc_validation_1644", "prediction": "all x.(VolcanicCloud(x) -> ParticularProblemForAircraft(x))", "score": 0}
{"id": "eqasc_validation_1644", "prediction": "all x.(VolcanicCloud(x) -> ProblemForAircraft(x))", "score": 0}
{"id": "eqasc_validation_1644", "prediction": "all x.( VolcanicClouds(x) -> ParticularProblemForAircraft(x))", "score": 0}
{"id": "eqasc_validation_1645", "prediction": "all x.(ConeVolcano(x) -> (ThickLava(x) & MuchAsh(x)))", "score": 0}
{"id": "eqasc_validation_1645", "prediction": "all x.(ConeVolcano(x) -> (ChemicalLava(x) & MetallizedAsh(x)))", "score": 0}
{"id": "eqasc_validation_1645", "prediction": "all x y.((ConeVolcano(x) & Lava(y)) -> (Thick(x,y) & MuchAsh(x)))", "score": 0}
{"id": "eqasc_validation_1645", "prediction": "all x ((Volcano(x) & ThickLava(x)) | MuchAsh(x)))", "score": -1}
{"id": "eqasc_validation_1645", "prediction": "all x.(CenoteVolcano(x) -> (AccusatedWithThickLava(x) & AssociatesWithMuchAsh(x)))", "score": 0}
{"id": "eqasc_validation_1645", "prediction": "all x.(ConeVolcano(x) -> (exists y.(ThickLava(y) & AssociatesTo(x,y)) & exists z.(MuchAsh(z) | MuchAsh(z)))))", "score": -1}
{"id": "eqasc_validation_1645", "prediction": "all x.(ConeVolcano(x) -> (HasThickLava(x) & HasMuchAsh(x)))", "score": 0}
{"id": "eqasc_validation_1646", "prediction": "all x y z.((ConeVolcano(x) & Earth(y) & Earth(z)) -> CanLowerTemperature(x,y))", "score": 0}
{"id": "eqasc_validation_1646", "prediction": "all x.(ConeVolcano(x) -> LowerTemperature(x,earth))", "score": 0}
{"id": "eqasc_validation_1646", "prediction": "all x.(ConeVolcano(x) -> LowersTemperature(x,Earth))", "score": 0}
{"id": "eqasc_validation_1646", "prediction": "all x y z.((ConeVolcano(x) & Earth(y) & Temperature(z)) -> LowersTemperature(x,y,z))", "score": 0}
{"id": "eqasc_validation_1646", "prediction": "all x.(ConeVolcano(x) -> CanLowerTemperature(x,Earth,Earth))", "score": 0}
{"id": "eqasc_validation_1646", "prediction": "all x y.((ConeVolcano(x) & Earth(y)) -> LowersTemperature(x,y))", "score": 0}
{"id": "eqasc_validation_1646", "prediction": "all x.(ConeVolcano(x) -> CanLowerTemperature(x))", "score": 0}
{"id": "eqasc_validation_1646", "prediction": "all x.(ConeVolcano(x) -> LowersTemperatureOfEarth(x))", "score": 0}
{"id": "eqasc_validation_1646", "prediction": "all x y z w.((ConeVolcano(x) & Earth(y) & Earth(z) & Temperature(w)) -> Lowers(x,y,z))", "score": 0}
{"id": "eqasc_validation_1646", "prediction": "all x y.((ConeVolcano(x) & Earth(y)) -> (LowerTemperatureOf(x,y)))", "score": 0}
{"id": "eqasc_validation_1646", "prediction": "all x y.((ConeVolcano(x) & Earth(y)) -> LowersTemperatureBy(x,y))", "score": 0}
{"id": "eqasc_validation_1646", "prediction": "all x y.((ConeVolcano(x) & Earth(y)) -> CanLowerTemperature(x,y))", "score": 0}
{"id": "eqasc_validation_1646", "prediction": "all x.(ConeVolcano(x) -> LowerTemperatureOfEarth(x))", "score": 0}
{"id": "eqasc_validation_1647", "prediction": "all x.((Vulel(x) & TinyParticles(x) & VolcanicEruption(x)) -> BlocksSun(x))", "score": 0}
{"id": "eqasc_validation_1647", "prediction": "all x.((Viel(x) & TinyParticlesFromVolcanicEruption(x)) -> BlocksSun(x))", "score": 0}
{"id": "eqasc_validation_1647", "prediction": "all x.((Viel(x) & TinyParticlesFromVolcanicEruption(x)) -> BlocksSound(x))", "score": 0}
{"id": "eqasc_validation_1647", "prediction": "all x y.((Viel(x) & TinyParticlesFromVolcanicEruption(x)) -> BlockSun(y))", "score": 0}
{"id": "eqasc_validation_1647", "prediction": "exists x.(Vile(x) & (TinyParticles(x) & FromVolcanicEruption(x)) -> BlocksSun(x))", "score": 0}
{"id": "eqasc_validation_1647", "prediction": "all x.((Viel(x) & TinyParticles(x)) -> BlotsSun(x))", "score": 0}
{"id": "eqasc_validation_1647", "prediction": "all x y.((Vulcicle(x) & TinyParticles(x) & VolcanicEruption(y)) -> BlocksSun(x,y))", "score": 0}
{"id": "eqasc_validation_1647", "prediction": "all x.((Vulpe(x) & TinyParticlesFromVolcanicEruption(x)) -> BlockSun(x))", "score": 0}
{"id": "eqasc_validation_1647", "prediction": "all x y.((Veil(x) & TinyParticles(y) & FromVolcanicEruption(x)) -> BlocksSun(x))", "score": 0}
{"id": "eqasc_validation_1647", "prediction": "all x.((Viel(x) & TinyParticles(x) & VolcanicEruption(x)) -> BlocksSun(x))", "score": 0}
{"id": "eqasc_validation_1647", "prediction": "all x.((Vulax(x) & AffluentVulcanicEruption(x)) -> BlocksSun(x))", "score": 0}
{"id": "eqasc_validation_1647", "prediction": "all x.((Vial(x) & TinyParticlesFromVolcanicEruption(x)) -> BlockSun(x))", "score": 0}
{"id": "eqasc_validation_1647", "prediction": "(all x.(Vulture(x) -> BlockSun(x)))", "score": 0}
{"id": "eqasc_validation_1647", "prediction": "all x y.((Vule(x) & TinyParticles(x) & VolcanicEruption(y)) -> BlocksSun(x,y))", "score": 0}
{"id": "eqasc_validation_1647", "prediction": "all x.((Vulel(x) & TinyParticlesFromVolcanicEruption(x)) -> BlocksSun(x))", "score": 0}
{"id": "eqasc_validation_1648", "prediction": "all x y.((Volcano(x) & Sun(y)) -> Blocks(x,y))", "score": 0}
{"id": "eqasc_validation_1648", "prediction": "all x y.((Volcanoe(x) & Sun(y)) -> Blocks(x,y))", "score": 0}
{"id": "eqasc_validation_1648", "prediction": "all x.(Volcano(x) -> CanBlockSun(x))", "score": 0}
{"id": "eqasc_validation_1648", "prediction": "all x.(Volcanic(x) -> CanBlockSun(x))", "score": 0}
{"id": "eqasc_validation_1648", "prediction": "all x.(Volcano(x) -> BlocksSun(x))", "score": 0}
{"id": "eqasc_validation_1648", "prediction": "all x y.((Volcano(x) & Sun[y)) -> Blocks(x,y))", "score": -1}
{"id": "eqasc_validation_1648", "prediction": "all x y.((Volcano(x) & Sun(y)) -> BlocksOther(x,y))", "score": 0}
{"id": "eqasc_validation_1648", "prediction": "all x y.((Volcano(x) & Sun(y)) -> CanBlock(x,y))", "score": 0}
{"id": "eqasc_validation_1648", "prediction": "all x y z.((Volcano(x) & Sun(y) & Sun(z)) -> CanBlock(x,y))", "score": 0}
{"id": "eqasc_validation_1648", "prediction": "all x.((Volcano(x) & BlockSun(x)) -> BlockSun(x))", "score": 0}
{"id": "eqasc_validation_1649", "prediction": "all x.(BlackSand(x) -> VolcanicAsh(x))", "score": 0}
{"id": "eqasc_validation_1649", "prediction": "All x.(BlackSand(x) -> VolcanicAsh(x))", "score": -1}
{"id": "eqasc_validation_1649", "prediction": "all x y.((BlackSand(x) & VolcanicAsh(y)) -> VolcanicAsh(x))", "score": 0}
{"id": "eqasc_validation_1650", "prediction": "all x.(BlackSand(x) -> BlocksOutSunlight(x))", "score": 0}
{"id": "eqasc_validation_1650", "prediction": "all x.(BlackSand(x) -> BlocksOutLastSun(x))", "score": 0}
{"id": "eqasc_validation_1650", "prediction": "all x y z.((BlackSand(x) & Sun(y) & Sun(z)) -> BlocksOut(x,y,z))", "score": 0}
{"id": "eqasc_validation_1650", "prediction": "all x.(BlackSand(x) -> BlocksOutSun(x))", "score": 0}
{"id": "eqasc_validation_1650", "prediction": "all x y.((BlackSand(x) & Sun(y)) -> BlocksOut(x,y))", "score": 0}
{"id": "eqasc_validation_1650", "prediction": "all x.(BlackSand(x) -> BlocksSunOut(x))", "score": 0}
{"id": "eqasc_validation_1650", "prediction": "all x y.((BlackSand(x) & Sun(y)) -> BlocksSun(x,y))", "score": 0}
{"id": "eqasc_validation_1650", "prediction": "all x y.((BlackSand(x) & Sun(y)) -> CanBlockOut(x,y))", "score": 0}
{"id": "eqasc_validation_1651", "prediction": "all x.((FineDustyParticles(x) & EruptedFromVolcanos(x)) -> DecreasesTemperatureByBlockingSunlight(x))", "score": 0}
{"id": "eqasc_validation_1651", "prediction": "all x.((FineDustyParticles(x) & EruptedFromVolcanoes(x)) -> (DecreasesTemperatureByBlockingSunlight(x)))", "score": 0}
{"id": "eqasc_validation_1651", "prediction": "all x.((FineDishyParticles(x) & EruptedFromVolcanoes(x)) -> ReducesTemperature(x))", "score": 0}
{"id": "eqasc_validation_1651", "prediction": "all x y z.((FineDuplicateParticles(x) & Volcano(y) & EruptedFrom(x,y) & Volcano(z)) -> (DecreasesTemperature(x,z) & BlocksSun(z)))", "score": 0}
{"id": "eqasc_validation_1651", "prediction": "all x y z.((FineDustyParticles(x) & Volcano(y) & EquippedWith(x,y)) -> (DecreasesTemperature(x,z) & BlocksSunlight(z)))", "score": 0}
{"id": "eqasc_validation_1651", "prediction": "all x y.((Fine(x) & DustyParticles(x) & EruptedFromVolcano(x)) -> DecreasesTemperatureBlockingSun(y))", "score": 0}
{"id": "eqasc_validation_1651", "prediction": "all x y z w.((FineDustyParticles(x) & Volcano(y) & EruptedFrom(x,y) & Sun(z) & BlocksTemperature(w)) -> (DecreaseTemperature(x,y,z) | BlocksTemperature(x,sun)))", "score": 0}
{"id": "eqasc_validation_1651", "prediction": "all x y.((Turbine(x) & EruptedFromVolcano(x)) -> (FineDustyParticles(x) & BlockSolid(x)))", "score": 0}
{"id": "eqasc_validation_1651", "prediction": "all x y.((FineDryParticlesEruptedFromVolcanoes(x) & Volcano(y)) -> (DecreasesTemperatureByBlockingSunlight(x)))", "score": 0}
{"id": "eqasc_validation_1651", "prediction": "all x.((FineDustyParticles(x) & EruptedFromVolcanoes(x)) -> DecreasesTemperatureByBlockingSunlight(x))", "score": 0}
{"id": "eqasc_validation_1651", "prediction": "all x y.((FineDustyParticles(x) & EruptedFromVolcano(x) & IncreasesTemperatureBlocksSun(x,y)) -> DecreasesTemperatureByBlockingSun(y))", "score": 0}
{"id": "eqasc_validation_1651", "prediction": "all x.((Particle(x) & EruptedFromVolcanoes(x)) -> (DecreasesTemperature(x) & BlocksSun(x)))", "score": 0}
{"id": "eqasc_validation_1651", "prediction": "all x y.((Planet(x) & EruptedFromVolcano(x)) -> (DecreasesTemperatureByBlockingSun(y)))", "score": 0}
{"id": "eqasc_validation_1651", "prediction": "all x y.((FineDryParticles(x) & EruptedFromVolcanos(x) & BlocksSun(x)) -> SlowsTemperature(x))", "score": 0}
{"id": "eqasc_validation_1651", "prediction": "all x y.((Eerupted(x) & Volcano(y) & FineDustyParticles(x) & EruptedVulcans(y)) -> (DecreasesTemperatureBlocking(x,y)))", "score": 0}
{"id": "eqasc_validation_1651", "prediction": "all x y.((Potential(x) & EruptedFromVolcanoesOrGas(x,y)) -> (DecreasesTemperature(x,y) & BlocksSunlight(x)))", "score": 0}
{"id": "eqasc_validation_1652", "prediction": "all x y z.((Seismograph(x) & Earthquake(y) & Earthquake(z)) -> MeasureSize(x,y,z))", "score": 0}
{"id": "eqasc_validation_1652", "prediction": "all x y.((Seismograph(x) & Earthquake(y)) -> UsedForMeasuringSize(x,y))", "score": 0}
{"id": "eqasc_validation_1652", "prediction": "all x y.((Seismograph(x) & Earthquake(y)) -> MeasuresSize(x,y))", "score": 0}
{"id": "eqasc_validation_1652", "prediction": "all x y.((Seismograph(x) & Earthquake(y)) -> MeasuresSizeOf(x,y))", "score": 0}
{"id": "eqasc_validation_1652", "prediction": "all x y z.((Seismograph(x) & Earthquake(y) & MeasuresSize(x,z)) -> UsedFor(x,y))", "score": 0}
{"id": "eqasc_validation_1652", "prediction": "all x.(Seismograph(x) -> MeasuresSizeOfEarthquake(x))", "score": 0}
{"id": "eqasc_validation_1652", "prediction": "all x y z.(Seismograph(x) -> MeasuresSizeOfEarthquake(y))", "score": 0}
{"id": "eqasc_validation_1652", "prediction": "all x y z.((Seismograph(x) & Earthquake(y) & Seam(z)) -> MeasuresSize(x,y,z))", "score": 0}
{"id": "eqasc_validation_1652", "prediction": "all x y z.((Seismograph(x) & ESCA(y) & Earthquake(z)) -> MeasuresSize(x,y,z))", "score": 0}
{"id": "eqasc_validation_1652", "prediction": "all x.(Seismograph(x) -> MeasuresSizingOfEarthquake(x))", "score": 0}
{"id": "eqasc_validation_1652", "prediction": "all x y.((Seismograph(x) & Earthquake(y)) -> MeasurmentsSize(x,y))", "score": 0}
{"id": "eqasc_validation_1652", "prediction": "all x.(Seismograph(x) -> UsedForMeasuringSizeOfEarthquake(x))", "score": 0}
{"id": "eqasc_validation_1653", "prediction": "all x.(Seismograph(x) -> MonitorsFaultMovements(x))", "score": 0}
{"id": "eqasc_validation_1653", "prediction": "all x.(Seismograph(x) -> (DetectsFaultMovements(x) & FingerMovements(x)))", "score": 0}
{"id": "eqasc_validation_1653", "prediction": "all x.(Seismograph(x) -> DetectsFaultMovements(x))", "score": 0}
{"id": "eqasc_validation_1653", "prediction": "all x.(Seismograph(x) -> (DetectsFaultMovements(x) & FaultMovements(x)))", "score": 0}
{"id": "eqasc_validation_1653", "prediction": "all x.(Seismograph(x) -> DetectionOfFaults(x))", "score": 0}
{"id": "eqasc_validation_1653", "prediction": "all x.(Seismograph(x) -> DistranglesFaultMovements(x))", "score": 0}
{"id": "eqasc_validation_1653", "prediction": "all x.(Seismograph(x) -> DetectFaultMovements(x))", "score": 0}
{"id": "eqasc_validation_1653", "prediction": "all x.(Seismograph(x) -> DetectFault(x))", "score": 0}
{"id": "eqasc_validation_1653", "prediction": "all x.(Eismograph(x) -> WillDetectFaultMovements(x))", "score": 0}
{"id": "eqasc_validation_1654", "prediction": "all x.(Magnitude(x) -> MeasuresEarthquakeSize(x))", "score": 0}
{"id": "eqasc_validation_1654", "prediction": "(MeasuresEarthquakeSize(Magnitude) & MeasuresEarthquakeSize(Magnitude))", "score": 0}
{"id": "eqasc_validation_1654", "prediction": "(MeasuresEarthquakeSize(Magnitude))", "score": 0}
{"id": "eqasc_validation_1654", "prediction": "all x.(Magnitude(x) -> Measure(x,EarthquakeSize))", "score": 0}
{"id": "eqasc_validation_1654", "prediction": "all x.(Magnitude(x) -> MeasureOfEarthquakeSize(x))", "score": 0}
{"id": "eqasc_validation_1654", "prediction": "all x.(Magnitude(x) -> (MeasuresEarthquakeSize(x)))", "score": 0}
{"id": "eqasc_validation_1654", "prediction": "exists x.(Magnitude(x) & EarthquakeSize(x))", "score": 0}
{"id": "eqasc_validation_1654", "prediction": "all x y.((Gravity(x) & EraserBuilt(x)) -> MeasuresSize(y,x))", "score": 0}
{"id": "eqasc_validation_1654", "prediction": "(MeasuresEarthquakeSize(Magnitude) | MeasuresEarthquakeSize(Magnitude)))", "score": -1}
{"id": "eqasc_validation_1654", "prediction": "all x.(Magnitude.(x) -> MeasuresEarthquakeSize(x))", "score": -1}
{"id": "eqasc_validation_1655", "prediction": "all x.(Seismograph(x) -> MeasuresMagnitudeOfEarthquakes(x))", "score": 0}
{"id": "eqasc_validation_1655", "prediction": "all x y.((Seismograph(x) & Earthquake(y)) -> MeasuresMagnitude(x,y))", "score": 0}
{"id": "eqasc_validation_1655", "prediction": "all x y z.((Seismograph(x) & Earthquake(y) & Earthquake(z)) -> MeasuresMagnitude(x,y,z))", "score": 0}
{"id": "eqasc_validation_1655", "prediction": "all x y.((Seismograph(x) & Earthquake(y)) -> MeasuresMagnitudeOf(x,y))", "score": 0}
{"id": "eqasc_validation_1655", "prediction": "all x y z.((Seismograph(x) & Earthquake(y) & MassMassive(z)) -> MeasuresMeasurement(x,y))", "score": 0}
{"id": "eqasc_validation_1655", "prediction": "all x!(Seismograph(x) -> MeasuresMagnitudeOfEarthquakes(x))", "score": 0}
{"id": "eqasc_validation_1655", "prediction": "all x y z.((Seismograph(x) & Earthquake(y) & MeasuresMagnitudeOf(x,y)) -> Measures(x,y))", "score": 0}
{"id": "eqasc_validation_1656", "prediction": "all x y.((Earthquake(x) & RichterScale(y)) -> MeasuresBy(x,y))", "score": 0}
{"id": "eqasc_validation_1656", "prediction": "all x y.((Earthquake(x) & RichterMagnitudeScale(y) & MeasuresSizeOfEarthquakes(x,y)) -> CommonlyMeasuredBy(x,y))", "score": 0}
{"id": "eqasc_validation_1656", "prediction": "all x.(Earthquake(x) -> (MeasuredByGrinderMajorityScale(x) & MeasuresSizeOfEarthquakes(x)))", "score": 0}
{"id": "eqasc_validation_1656", "prediction": "all x y z.((Earthquake(x) & RichterMercuryScale(y) & Earthquake(z)) -> Measures(x,y))", "score": 0}
{"id": "eqasc_validation_1656", "prediction": "all x.(LargeScaleMeasures(x,Earthquake(x)) -> (Measures(y,x) & MeasuresSize(z) & SizesEarthquakes(x,Earthquake,Earthquake)))", "score": 0}
{"id": "eqasc_validation_1656", "prediction": "all x.(Earthquake(x) -> (MercuryScale(x),y) & MeasuresSize(y)))", "score": -1}
{"id": "eqasc_validation_1656", "prediction": "all x y z.((Earthquake(x) & RichterGraditudeScale(y) & Earthquake(z)) -> MeasurableBy(x,y,z))", "score": 0}
{"id": "eqasc_validation_1656", "prediction": "all x.(Earthquake(x) ->,MeasuredByGrimiaScale(x))", "score": -1}
{"id": "eqasc_validation_1656", "prediction": "all x.(Earthquake(x) -> MessagedByRiverMagnitudeScale(x))", "score": 0}
{"id": "eqasc_validation_1656", "prediction": "all x y.((Earthquake(x) & RichterMajorityScene(y)) -> MeasuredBy(x,y))", "score": 0}
{"id": "eqasc_validation_1656", "prediction": "all x.(Earthquake(x) -> MeasuredByRergerMajorityScales(x))", "score": 0}
{"id": "eqasc_validation_1656", "prediction": "all x y z.((Earthquake(x) & RichterMagnitudeScene(y) & Earthquake(z)) -> MeasuredBy(x,y,z))", "score": 0}
{"id": "eqasc_validation_1656", "prediction": "all x y.((Earthquake(x) & RichterMagnitudeScale(y)) -> MeasuresSizeOfEarthquakes(x,y))", "score": 0}
{"id": "eqasc_validation_1656", "prediction": "all x.(Earthquake(x) -> (MeasuredByJerryMagnitudeScale(x) & MeasuresSizeOfEarthquakes(x)))", "score": 0}
{"id": "eqasc_validation_1656", "prediction": "all x y.((Earthquake(x) & RichterMajorityScale(y)) -> MeasurableBy(x,y))", "score": 0}
{"id": "eqasc_validation_1657", "prediction": "all x y.( (Seismograph(x) & RichterMagnitudeScene(y)) -> Measures(x,y))", "score": 0}
{"id": "eqasc_validation_1657", "prediction": "all x y z.((Seismograph(x) & RichterMagnitudeScreen(y) & RichterMagnitudeScene(z)) -> Measures(x,y,z))", "score": 0}
{"id": "eqasc_validation_1657", "prediction": "all x.(Seismograph(x) -> (MeasuresJerryMagnitudeScale(x) & UsesForEvaluatingReristarMagnitudeScale(x)))", "score": 0}
{"id": "eqasc_validation_1657", "prediction": "all x y z.((Seismograph(x) & RichterMagnitudeScale(y) & RichterMagnitude(z)) -> UsedForMeasuring(x,y,z))", "score": 0}
{"id": "eqasc_validation_1657", "prediction": "all x.(Seismograph(x) -> MeasuresRizzermagnitude(x))", "score": 0}
{"id": "eqasc_validation_1657", "prediction": "all x.(Seismograph(x) -> MeasuresMeasurement(x,MagnitudeScale))", "score": 0}
{"id": "eqasc_validation_1657", "prediction": "all x.(Seismograph(x) -> UsedForMeasuringRierkelMagnitudeScales(x))", "score": 0}
{"id": "eqasc_validation_1657", "prediction": "all x.(Seismograph(x) -> MeasuresRiberMagnitude(x))", "score": 0}
{"id": "eqasc_validation_1657", "prediction": "all x y.((Seismograph(x) & RichterMagnitudeScale(y)) -> MeasuresMeasurement(x,y))", "score": 0}
{"id": "eqasc_validation_1657", "prediction": "all x y.((Seismograph(x) & RichterMagnitude(y)) -> MeasuredWith(x,y))", "score": 0}
{"id": "eqasc_validation_1657", "prediction": "all x y.((Seismograph(x) & RichterMajorityScale(y)) -> MeasuresZeroMileasures(x,y))", "score": 0}
{"id": "eqasc_validation_1657", "prediction": "all x y.((Seismograph(x) & RichterMagnitudeScale(y)) -> Measures(x,y))", "score": 0}
{"id": "eqasc_validation_1657", "prediction": "all x.(Seismograph(x) -> MeasuresRiberMagnitudeScale(x))", "score": 0}
{"id": "eqasc_validation_1657", "prediction": "all x y.((Seismograph(x) & RichterMagnitudeSc(y)) -> Measures(x,y))", "score": 0}
{"id": "eqasc_validation_1657", "prediction": "all x.(Seismograph(x) -> MeasuresJeriorMagnitude(x))", "score": 0}
{"id": "eqasc_validation_1657", "prediction": "all x.(Seismograph(x) -> MeasuresJerrerMagnitudeScales(x))", "score": 0}
{"id": "eqasc_validation_1658", "prediction": "all x y.((Earthquake(x) & City(y) & OccursNearOf(x,y)) -> PotentialForDamage(x,y))", "score": 0}
{"id": "eqasc_validation_1658", "prediction": "all x.((Earthquake(x) & NearCosta(x) & AnySize(x)) -> GreatPotentialForDamage(x))", "score": 0}
{"id": "eqasc_validation_1658", "prediction": "all x y.((Earthquake(x) & NearAnySize(x,y)) -> PotentialForDamage(x,y))", "score": 0}
{"id": "eqasc_validation_1658", "prediction": "all x y.((Earthquake(x) & City(y) & NoSize(y)) -> PotentialForDamage(x,y))", "score": 0}
{"id": "eqasc_validation_1658", "prediction": "all x.((EarthquakeArea(x) & OccursNear(x,City) & -AnySize(x)) -> PotentialForDamageGreat(x))", "score": 0}
{"id": "eqasc_validation_1658", "prediction": "all x.((Earthquake(x) & NearCity(x) & Large(x)) -> GreatPotentialForDamage(x))", "score": 0}
{"id": "eqasc_validation_1658", "prediction": "all x y.((Earthquake(x) & City(y) & HasCitySize(x,y)) -> PotentialForDamageGreat(x))", "score": 0}
{"id": "eqasc_validation_1658", "prediction": "all x.((Earthquake(x) & NearAnySize(x)) -> PotencialForDamage(x))", "score": 0}
{"id": "eqasc_validation_1658", "prediction": "all x y z.((Earthquake(x) & NearCity(y) & Size(z) & Of(x,y,z)) -> PotentialForDamageGrand(x))", "score": 0}
{"id": "eqasc_validation_1658", "prediction": "all x y.((Earthquake(x) & City(y) & NearAnySize(x,y)) -> PotentForDamage(x))", "score": 0}
{"id": "eqasc_validation_1658", "prediction": "all x.(Earthquake(x) -> (OccursNearOrBeyondCities(x) | PotentialForDamageGreat(x)))", "score": 0}
{"id": "eqasc_validation_1658", "prediction": "all x.((City(x) & HappensNear(x,y) & Defects(y)) -> PotentialForDamageGreat(x))", "score": 0}
{"id": "eqasc_validation_1658", "prediction": "all x y z.((Earthquake(x) & City(y) & City(z)) -> LocatedNear(x,y,z))", "score": 0}
{"id": "eqasc_validation_1658", "prediction": "all x y.((Earthquake(x) & City(y)) -> (OccursNear(x,y) & GreatPotentialForDamage(x)))", "score": 0}
{"id": "eqasc_validation_1658", "prediction": "all x.(Earthquake(x) -> (exists y.((City(y) & OccursNear(x,y)) & NotSmall(y)) & exists z.(City(z) & OccursNear(x,z)) & PotentialForDamage(x))))", "score": -1}
{"id": "eqasc_validation_1659", "prediction": "all x y.((Seismograph(x) & Damage(y)) -> MeasureSize(x,y))", "score": 0}
{"id": "eqasc_validation_1659", "prediction": "all x.(Seismograph(x) -> MeasuresSizeOfDamage(x))", "score": 0}
{"id": "eqasc_validation_1659", "prediction": "all x y.((Seismograph(x) & Damage(y) & Term(y)) -> MeasuresSizeOfSize(x,y))", "score": 0}
{"id": "eqasc_validation_1659", "prediction": "all x y z.((Seismograph(x) & Event(y) & Damage(z)) -> Measure(x,y,z))", "score": 0}
{"id": "eqasc_validation_1659", "prediction": "all x y.((Seismograph(x) & Damage(y)) -> MeasuresSizeOf(x,y))", "score": 0}
{"id": "eqasc_validation_1659", "prediction": "all x y.((Seismograph(x) & Event(y)) -> MeasuresDamageSize(x,y))", "score": 0}
{"id": "eqasc_validation_1659", "prediction": "all x.(Seismograph(x) -> MeasuresDamageSize(x))", "score": 0}
{"id": "eqasc_validation_1659", "prediction": "all x.(Seismograph(x) -> MeasureSizeOfDamage(x))", "score": 0}
{"id": "eqasc_validation_1659", "prediction": "all x y z.((Seismograph(x) & Event(y) & Damage(z) & MeasuresSizeIn(x,y)) -> DoesTask(x,z))", "score": 0}
{"id": "eqasc_validation_1659", "prediction": "all x y.((Seismograph(x) & Damage(y)) -> MeasuresSizeOfDoor(x,y))", "score": 0}
{"id": "eqasc_validation_1659", "prediction": "all x y.((Seismograph(x) & Incident(y)) -> MeasuresSizeOfDamage(x,y))", "score": 0}
{"id": "eqasc_validation_1659", "prediction": "all x.(Seismograph(x) -> MeasuresSizeOfDamageDoomedByOccurs(x))", "score": 0}
{"id": "eqasc_validation_1660", "prediction": "all x.((EarthquakeDamage(x) & CausedBy(x,earthquake)) -> Emense(x))", "score": 0}
{"id": "eqasc_validation_1660", "prediction": "all x.((SquakeDamage(x) & CausedBy(x,earthquakes)) -> Emmane(x))", "score": 0}
{"id": "eqasc_validation_1660", "prediction": "all x y.((Earthquake(x) & Damage(y)) -> Emense(y))", "score": 0}
{"id": "eqasc_validation_1660", "prediction": "all x.((Earthquake(x) & Damage(x)) -> Emense(x))", "score": 0}
{"id": "eqasc_validation_1660", "prediction": "all x.(EarthquakeDamage(x) -> Emense(x))", "score": 0}
{"id": "eqasc_validation_1660", "prediction": "all x.(Integrate(x) -> Emmense(x))", "score": 0}
{"id": "eqasc_validation_1660", "prediction": "all x.((EarthquakeDamage(x) & CausedBy(x,Earthquake)) -> Emense(x))", "score": 0}
{"id": "eqasc_validation_1660", "prediction": "all x.(Earthquake(x) -> EmmenseDamage(x))", "score": 0}
{"id": "eqasc_validation_1660", "prediction": "all x.((EarthquakeDamage(x) & CausedBy(x,Earthquake)) -> Esmens (Emmense(x)))", "score": 0}
{"id": "eqasc_validation_1660", "prediction": "all x.(EarthquakeDamage(x) -> Emmense(x))", "score": 0}
{"id": "eqasc_validation_1660", "prediction": "all x.(EarthquakeDamage(x) -> Extreme(x))", "score": 0}
{"id": "eqasc_validation_1660", "prediction": "all x y.((Earthquake(x) & Damage(y)) -> Empense(x,y))", "score": 0}
{"id": "eqasc_validation_1660", "prediction": "all x y.((Earthquake(x) & Damage(y)) -> Emense(x))", "score": 0}
{"id": "eqasc_validation_1660", "prediction": "all x.(Earthquake(x) -> EmenseDamage(x))", "score": 0}
{"id": "eqasc_validation_1661", "prediction": "all x.(Seismograph(x) -> CanPreventDamage(x))", "score": 0}
{"id": "eqasc_validation_1661", "prediction": "all x y.((Seismograph(x) & Damage(y)) -> Prevents(x,y))", "score": 0}
{"id": "eqasc_validation_1661", "prediction": "all x.(Eismograph(x) -> PreventsDamage(x))", "score": 0}
{"id": "eqasc_validation_1661", "prediction": "all x.(Seismograph(x) -> PreventsDamage(x))", "score": 0}
{"id": "eqasc_validation_1661", "prediction": "all x y.((Seismograph(x) & Damage(y)) -> (Prevents(x,y) & Seismograph(x)))", "score": 0}
{"id": "eqasc_validation_1661", "prediction": "all x.(Seismograph(x) -> PreventDamage(x))", "score": 0}
{"id": "eqasc_validation_1661", "prediction": "all x.(Seismography(x) -> PreventsDamage(x))", "score": 0}
{"id": "eqasc_validation_1662", "prediction": "(MeasuresSizeOfEarthquake(Rivermagnitude) & MeasuresSizeOfEarthquake(Rivermagnitude & MeasuresSizeOfEarthquake(RerwinMagnitude))", "score": -1}
{"id": "eqasc_validation_1662", "prediction": "all x.(JürgenerMeasurement(x) -> MeasuresSizeOfEarthquake(x))", "score": 0}
{"id": "eqasc_validation_1662", "prediction": "all x.(JürgenMeasurementOfEarthquakeSize(x) -> RichterMagnitude(x))", "score": 0}
{"id": "eqasc_validation_1662", "prediction": "all x.(RiverMeasurement(x) -> MeasuresSizeOfEarthquake(x))", "score": 0}
{"id": "eqasc_validation_1662", "prediction": "all x.(JürgenMajority(x) -> MeasuresSizeOfEarthquake(x))", "score": 0}
{"id": "eqasc_validation_1662", "prediction": "all x.(Jürgen-Magnitude(x) -> MeasuresSizeOfEarthquake(x))", "score": -1}
{"id": "eqasc_validation_1662", "prediction": "all x.(Jürgenmagnitude(x) -> MeasuresSizeOfEarthquake(x))", "score": 0}
{"id": "eqasc_validation_1662", "prediction": "(Establishment(RichterMagnitude) & MeasuresSizeOfEarthquake(RichterMeasuresSizesQuickly(RichterEarthquake))", "score": -1}
{"id": "eqasc_validation_1662", "prediction": "all x y.((JürgenMagnitude(x) & Earthquake(y)) -> MeasuresSize(x,y))", "score": 0}
{"id": "eqasc_validation_1662", "prediction": "all x.(JürgenMagnitude(x) -> MeasuresSizeOfEarthquake(x))", "score": 0}
{"id": "eqasc_validation_1662", "prediction": "all x.(RiverMagnitude(x) -> MeasuresSizeOfEarthquake(x))", "score": 0}
{"id": "eqasc_validation_1662", "prediction": "all x y.((JürgensMagnitude(x) & Earthquake(y)) -> MeasuresSize(x,y))", "score": 0}
{"id": "eqasc_validation_1662", "prediction": "all x.(JürgenMagnitude(x) -> MeasuresEarthquakeSize(x))", "score": 0}
{"id": "eqasc_validation_1662", "prediction": "all x.(RichterMeasurement(x) -> MeasuresSizeOfEarthquake(x))", "score": 0}
{"id": "eqasc_validation_1662", "prediction": "all x.(JürgenerMagnitude(x) -> MeasuresSizeOfEarthquake(x))", "score": 0}
{"id": "eqasc_validation_1662", "prediction": "all x.(RiverMajority(x) -> MeasuresSizeOfEarthquake(x))", "score": 0}
{"id": "eqasc_validation_1663", "prediction": "all x.(Seismograph(x) -> UsedForMeasuring RichterMagnitude(x))", "score": -1}
{"id": "eqasc_validation_1663", "prediction": "all x.(Seismograph(x) -> (MeasuresRindelmagnitude(x) | MessesJürgenmagnitude(x)))", "score": 0}
{"id": "eqasc_validation_1663", "prediction": "all x y.((Seismograph(x) & RichterMagnitude(y)) -> UsedForMeasuring(x,y))", "score": 0}
{"id": "eqasc_validation_1663", "prediction": "all x.(Seismograph(x) -> MeasuresRiverMajority(x))", "score": 0}
{"id": "eqasc_validation_1663", "prediction": "all x y.((Seismograph(x) & RichterMagnitude(y)) -> Measures(x,y))", "score": 0}
{"id": "eqasc_validation_1663", "prediction": "all x y.((Seismograph(x) & RichterMagnitude(y)) -> MeasuresMeasurement(x,y))", "score": 0}
{"id": "eqasc_validation_1663", "prediction": "all x.(Seismograph(x) -> MeasuresRivermagnitude(x))", "score": 0}
{"id": "eqasc_validation_1663", "prediction": "all x.(Seismograph(x) -> UsedForMeasuringRiberMeaning(x))", "score": 0}
{"id": "eqasc_validation_1663", "prediction": "all x.(Seismograph(x) -> (MeasuresRichardBridgemagnitude(x,RichardMWay) | MeasuresRichardMagnitude(x,RichardMapping)))", "score": 0}
{"id": "eqasc_validation_1663", "prediction": "all x.(Seismograph(x) -> MeasuresJürgenmagnet(x,Juergen))", "score": 0}
{"id": "eqasc_validation_1663", "prediction": "all x y z.((Seismograph(x) & RichterMagnitude(y) & RichterMagnitude(z)) -> UsedForMeasuring(x,y,z))", "score": 0}
{"id": "eqasc_validation_1663", "prediction": "all x y z.((Seismograph(x) & RichterMagnitude(y) & RichterMagnitude(z)) -> UsedForMeasuring(x,y))", "score": 0}
{"id": "eqasc_validation_1663", "prediction": "all x.(Seismograph(x) -> (MeasuresRiberMagnitude(x) & UsesSeismoscope(x)))", "score": 0}
{"id": "eqasc_validation_1663", "prediction": "all x y z.((Seismograph(x) & RichterMagnitude(z)) -> Measures(x,y,z))", "score": 0}
{"id": "eqasc_validation_1663", "prediction": "all x y.((Seismograph(x) & RichterMajority(y)) -> Measures(x,y))", "score": 0}
{"id": "eqasc_validation_1664", "prediction": "all x.(Earthquake(x) -> MinorTermor(x))", "score": 0}
{"id": "eqasc_validation_1664", "prediction": "all x.(Earthquake(x) -> MinorTremor(x))", "score": 0}
{"id": "eqasc_validation_1664", "prediction": "all x.(Earthquake(x) -> A MinorTermor(x))", "score": -1}
{"id": "eqasc_validation_1664", "prediction": "the majority of earthquakes are minorTermors(Earthquake)", "score": -1}
{"id": "eqasc_validation_1664", "prediction": "(MinorTermor(earthquake)", "score": -1}
{"id": "eqasc_validation_1665", "prediction": "all x.(Seismograph(x) -> MeasuresSizeOfTremors(x))", "score": 0}
{"id": "eqasc_validation_1665", "prediction": "all x.(Seismograph(x) -> MeasuresSizeOfTermors(x))", "score": 0}
{"id": "eqasc_validation_1665", "prediction": "all x y.((Seismograph(x) & Tremor(y)) -> MeasuresSize(x,y))", "score": 0}
{"id": "eqasc_validation_1665", "prediction": "all x y z.((Seismograph(x) & Tremor(y) & Tumor(z)) -> (MeasuresSize(x,y) | MeasuresSize(x,z)))", "score": 0}
{"id": "eqasc_validation_1665", "prediction": "all x y.((Seismograph(x) & Tremor(y)) -> MeasuringSizeOf(x,y))", "score": 0}
{"id": "eqasc_validation_1665", "prediction": "all x y z.((Seismograph(x) & Tremor(y) & Tremor(z)) -> MeasureSize(x,y,z))", "score": 0}
{"id": "eqasc_validation_1665", "prediction": "all x y.((Seismograph(x) & Tremor(y)) -> UsedForMeasuringSize(x,y))", "score": 0}
{"id": "eqasc_validation_1665", "prediction": "all x y z.((Seismograph(x) & Tremor(y) & Tremor(z)) -> MeasuresSize(x,y,z))", "score": 0}
{"id": "eqasc_validation_1665", "prediction": "all x y.((Seismograph(x) & Tremor(z)) -> MeasuresSize(x,y,z))", "score": 0}
{"id": "eqasc_validation_1665", "prediction": "all x y z.((Seismograph(x) & Tremor(y) & Tremor(z)) -> UsedForMeasuringSize(x,y,z))", "score": 0}
{"id": "eqasc_validation_1666", "prediction": "all x.(Waves(x) -> DoesDamageInEarthquakes(x))", "score": 0}
{"id": "eqasc_validation_1666", "prediction": "all x.((Waves(x) & Earthquake(x)) -> DosageDestruction(x))", "score": 0}
{"id": "eqasc_validation_1666", "prediction": "all x.(Waves(x) & DoDamageDuringEarthquakes(x))", "score": 0}
{"id": "eqasc_validation_1666", "prediction": "all x.((Waves(x) & Earthquake(x)) -> Dosage(x,y))", "score": 0}
{"id": "eqasc_validation_1666", "prediction": "all x y.((Earthquake(x) & Wave(y)) -> DiffuseDamage(y,x))", "score": 0}
{"id": "eqasc_validation_1666", "prediction": "all x.(Water(x) -> DoseDamageDuringEarthquakes(x))", "score": 0}
{"id": "eqasc_validation_1666", "prediction": "all x.((Waves(x) & DoEarthquakeDamage(x)) -> DoEarthquakeDamage(x))", "score": 0}
{"id": "eqasc_validation_1666", "prediction": "all x y.((Waves(x) & Earthquake(y)) -> DosageUpon(x,y))", "score": 0}
{"id": "eqasc_validation_1666", "prediction": "all x.(Waves(x) -> DoDamageDuringEarthquakes(x))", "score": 0}
{"id": "eqasc_validation_1666", "prediction": "all x.((Waves(x) & Earthquake(x)) -> DoPast(x))", "score": 0}
{"id": "eqasc_validation_1666", "prediction": "all x.((Waves(x) & Earthquake(x)) -> DoTheDamageDuring(x,y))", "score": 0}
{"id": "eqasc_validation_1666", "prediction": "all x.(Weather(x) -> DoesDamageDuringEarthquakes(x))", "score": 0}
{"id": "eqasc_validation_1666", "prediction": "all x.((Waves(x) & DoomsDuringEarthquakes(x)) -> DoseDuringEarthquakes(x))", "score": 0}
{"id": "eqasc_validation_1666", "prediction": "all x.((Waves(x) & X) & Earthquake(x)) -> DoDamage(x))", "score": -1}
{"id": "eqasc_validation_1666", "prediction": "all x.((Waves(x) & DoSadnessDuringEarthquakes(x)) -> DoSadnessDuringEarthquakes(x))", "score": 0}
{"id": "eqasc_validation_1666", "prediction": "all x.(Waves(x) -> DoDamageInEarthquakes(x))", "score": 0}
{"id": "eqasc_validation_1667", "prediction": "all x.(Seismograph(x) -> MeasuresWaves(x))", "score": 0}
{"id": "eqasc_validation_1667", "prediction": "all x.(Seismograph(x) -> MeasuresWavesDoingDamage(x))", "score": 0}
{"id": "eqasc_validation_1667", "prediction": "all x.(Seismograph(x) -> MeasuresWellsThatDoDamage(x))", "score": 0}
{"id": "eqasc_validation_1667", "prediction": "all x.(Seismograph(x) -> MeasuresWeatherDamage(x))", "score": 0}
{"id": "eqasc_validation_1667", "prediction": "all x.(Seismograph(x) -> Measures(x,y))", "score": 0}
{"id": "eqasc_validation_1667", "prediction": "all x.(Seismograph(x) -> MeasuresWavesDamage(x))", "score": 0}
{"id": "eqasc_validation_1667", "prediction": "all x.(Seismograph(x) -> MeasuresWellsSoDamage(x))", "score": 0}
{"id": "eqasc_validation_1667", "prediction": "all x.(Seismograph(x) -> MeasuresFastWaves(x))", "score": 0}
{"id": "eqasc_validation_1668", "prediction": "all x.(Spot(x) -> HasCollarCells(x))", "score": 0}
{"id": "eqasc_validation_1668", "prediction": "all x y.((Spot(x) & CollarCell(y)) -> Specialized(x,y))", "score": 0}
{"id": "eqasc_validation_1668", "prediction": "all x.(Spenge(x) -> HasSpecializedCells(x))", "score": 0}
{"id": "eqasc_validation_1668", "prediction": "all x.(Sponges(x) -> HasSpecializedCells(x))", "score": 0}
{"id": "eqasc_validation_1668", "prediction": "all x.((Spoonge(x) & CollarCells(x)) -> SpecializedCells(x))", "score": 0}
{"id": "eqasc_validation_1668", "prediction": "all x.(Sponges(x) -> HasSpecializedCells(x,CollarCells))", "score": 0}
{"id": "eqasc_validation_1668", "prediction": "all x.(Spote(x) -> HasCollarCells(x))", "score": 0}
{"id": "eqasc_validation_1668", "prediction": "all x.(Sponges(x) -> HasCollarCells(x))", "score": 0}
{"id": "eqasc_validation_1668", "prediction": "all x.(Spoonge(x) -> HasCollarCells(x))", "score": 0}
{"id": "eqasc_validation_1668", "prediction": "all x.(Sponge(x) -> (HasSpecializedCells(x,CollarCells)))", "score": 0}
{"id": "eqasc_validation_1668", "prediction": "all x.(Sponges(x) -> HasSpecisializedCell(x))", "score": 0}
{"id": "eqasc_validation_1669", "prediction": "all x.(CollarCell(x) -> (PickUpPlanktonicFood(x) & StartDigestiveProcess(x)))", "score": 0}
{"id": "eqasc_validation_1669", "prediction": "all x.((CollarCell(x) & PickupPlanktonicFood(x) & StartDigestiveProcess(x)) -> DigestiveProcess(x))", "score": 0}
{"id": "eqasc_validation_1669", "prediction": "all x y.((CollarCell(x) & PlanktonicFood(y)) -> PicksUpAndStartsDigestiveProcess(x,y))", "score": 0}
{"id": "eqasc_validation_1669", "prediction": "all x.(CollarCell(x) -> (PicksUpPlanktonicFood(x) & StartsDigestiveProcess(x)))", "score": 0}
{"id": "eqasc_validation_1669", "prediction": "all x y.((CollarCell(x) & PlanktonicFood(y)) -> PicksUpAndStartsDietaryProcess(x,y))", "score": 0}
{"id": "eqasc_validation_1669", "prediction": "all x.(CollarCell(x) -> (picksUpPlanktonicFood(x) & StartsDigestiveProcess(x)))", "score": 0}
{"id": "eqasc_validation_1669", "prediction": "all x.(Collar(x) -> (PrinchesPlanktonicFood(x) & StartsDigestiveProcess(x)))", "score": 0}
{"id": "eqasc_validation_1669", "prediction": "all x.(CollarCell(x) -> (PickUpPlanktonicFood(x) & StartDetoxiveProcess(x)))", "score": 0}
{"id": "eqasc_validation_1669", "prediction": "all x.(CollarCell(x) -> (Pick UpPlanktonicFood(x) & StartsDigestiveProcess(x)))", "score": -1}
{"id": "eqasc_validation_1669", "prediction": "all x.(CollarCell(x) -> (PicksUpPlanktonicFood(x) & StartsDetoxizationProcess(x)))", "score": 0}
{"id": "eqasc_validation_1669", "prediction": "all x.(CollarCell(x) -> (PickupPlanktonicFood(x) & StartDigestiveProcess(x)))", "score": 0}
{"id": "eqasc_validation_1669", "prediction": "all x.(Cell(x) -> (CollarCell(x) & PicksUpPlanktonicFood(x) & StartsDigestiveProcess(x)))", "score": 0}
{"id": "eqasc_validation_1669", "prediction": "all x.(CollarCell(x) -> PicksUpPlanktonicFoodAndStartsDigestiveProcess(x))", "score": 0}
{"id": "eqasc_validation_1670", "prediction": "all x.(Sponges(x) -> (SpecializedCells(x) & PicksUpPlanktonicFoodToDigest(x)))", "score": 0}
{"id": "eqasc_validation_1670", "prediction": "all x.(Sponges(x) -> (HasSpecializedCells(x) & PicksPlanktonicFood(x) & DigestsPlanktonicFood(x)))", "score": 0}
{"id": "eqasc_validation_1670", "prediction": "all x y z.((Spot(x) & PlanktonicFood(y) & Sponge(z)) -> (HasSpecializedCells(x,y) & PicksUpPlanktonicFood(x,z) & DigestsUnderPlanktonicFood(z)))", "score": 0}
{"id": "eqasc_validation_1670", "prediction": "all x y.((Spot(x) & PlanktonicFood(y)) -> HasSpecializedCellsToPickUpToDigestToDigest(x,y))", "score": 0}
{"id": "eqasc_validation_1670", "prediction": "all x y.((Spot(x) & PlanktonicFood(y)) -> SpecializedCellsToPickUpToDigest(x,y))", "score": 0}
{"id": "eqasc_validation_1670", "prediction": "all x y.((Spot(x) & PlanktonicFood(y)) -> HasSpecializedCells(x))", "score": 0}
{"id": "eqasc_validation_1670", "prediction": "all x y.((Spot(x) & PlanktonicFood(y)) -> HasSpecializedCellsTo(x,y))", "score": 0}
{"id": "eqasc_validation_1670", "prediction": "all x.(Spot(x) -> (HasSpecializedCells(x) & PickUpPlanktonicFood(x) & DigestsPlanktonicFood(x)))", "score": 0}
{"id": "eqasc_validation_1670", "prediction": "all x.(Sponge(x) -> (SpecializedCells(x) & PickupPlanktonicFood(x) & DigestToDigest(x)))", "score": 0}
{"id": "eqasc_validation_1670", "prediction": "all x y z.((Spot(x) & PlanktonicFood(y) & Sponge(z)) -> HasSpecializedCells(x,y,z))", "score": 0}
{"id": "eqasc_validation_1670", "prediction": "all x.(Spotne(x) -> (SpecializedCells(x) & PickPlanktonicFood(x) & DigestPlanktonicFood(x)))", "score": 0}
{"id": "eqasc_validation_1670", "prediction": "all x.(Spotne(x) -> (HasSpecializedCells(x) & PickUpPlanktonicFood(x) & DigestsPlanktonicFood(x)))", "score": 0}
{"id": "eqasc_validation_1670", "prediction": "all x.(Spot(x) -> HasSpecializedCellsToPopupPlanktonicFood(x))", "score": 0}
{"id": "eqasc_validation_1670", "prediction": "all x.(Spot(x) -> (HasSpecializedCells(x) & PicksUpPlanktonicFood(x) & DigestsPlanktonicFood(x)))", "score": 0}
{"id": "eqasc_validation_1670", "prediction": "all x y.((Spot(x) & PlanktonicFood(y) & SpecializedCells(x)) -> PickUpToDigestFor(x,y))", "score": 0}
{"id": "eqasc_validation_1670", "prediction": "all x y.((Spot(x) & PlanktonicFood(y) & SpecializedCells(x) & PickupPlanktonic(x)) -> DigestsPlanktonicFood(x))", "score": 0}
{"id": "eqasc_validation_1671", "prediction": "all x y z.((Spotge(x) & Food(y) & SpecializedCells(z)) -> (TrapsAndDigests(x,y) & SpecializedCells(x,z)))", "score": 0}
{"id": "eqasc_validation_1671", "prediction": "all x y z.((Sponge(x) & Food(y) & SpecializedCells(z)) -> (TrapFood(x,y) & DigestFood(x,z)))", "score": 0}
{"id": "eqasc_validation_1671", "prediction": "all x.(Spot(x) -> (Traps(x) & DigestsFood(x) & SpecializedCells(x)))", "score": 0}
{"id": "eqasc_validation_1671", "prediction": "all x y.((Sponges(x) & Food(y)) -> (Traps(x,y) & DigestsBySpecializedCells(x,y)))", "score": 0}
{"id": "eqasc_validation_1671", "prediction": "all x.(Sponges(x) -> (Trap(x) & DigestFoodWithSpecializedCells(x)))", "score": 0}
{"id": "eqasc_validation_1671", "prediction": "all x y.((Sponges(x) & Food(y)) -> (Traps(x,y) & DigestsWithSpecializedCells(x)))", "score": 0}
{"id": "eqasc_validation_1671", "prediction": "all x.(Spotge(x) -> (Traps(x) & DigestsFood(x) & WithSpecializedCells(x)))", "score": 0}
{"id": "eqasc_validation_1671", "prediction": "all x.(Sponges(x) -> (TrapsAndDigestFood(x) & InSpecializedCells(x)))", "score": 0}
{"id": "eqasc_validation_1671", "prediction": "all x y.((Sponges(x) & Food(y)) -> (T traps(x,y) & DigestsBySpecializedCells(x,y)))", "score": -1}
{"id": "eqasc_validation_1671", "prediction": "all x y.((Spotge(x) & Food(y)) -> (Trap(x,y) & Digest(x,y) & SpecializedCells(x)))", "score": 0}
{"id": "eqasc_validation_1671", "prediction": "all x.(Spoonge(x) -> (TrapsFood(x) & DigestsFood(x) & SpecializedCells(x) & SpecializedCells(x)))", "score": 0}
{"id": "eqasc_validation_1671", "prediction": "all x y.((Spotter(x) & Food(y)) -> (Traps(x,y) & Digests(x,y) & SpecializedCells(x)))", "score": 0}
{"id": "eqasc_validation_1671", "prediction": "all x y z.((Spot(x) & Food(y) & SpecializedCells(z)) -> (TrapsAndDigests(x,y) & WithSpecializedCells(x,z)))", "score": 0}
{"id": "eqasc_validation_1671", "prediction": "all x y z.((Sponge(x) & Food(y) & SpecializedCells(z)) -> (Traps(x,y) & DigestsWith(x,z)))", "score": 0}
{"id": "eqasc_validation_1671", "prediction": "all x.(Sponges(x) -> (TrapsFood(x) & DigestsFood(x) & WithSpecializedCells(x)))", "score": 0}
{"id": "eqasc_validation_1671", "prediction": "all x.(Sponges(x) -> (TrapFood(x) & DigestFood(x) & SpecializedCells(x)))", "score": 0}
{"id": "eqasc_validation_1672", "prediction": "all x.((Spicule(x) | AmoeboidCell(x) | CollarCell(x)) -> SeaAnemone(x))", "score": 0}
{"id": "eqasc_validation_1672", "prediction": "(CharacteristicOfSeaAnemones(Spicules,Spoken,AmoeboidCells,CollarCells))", "score": 0}
{"id": "eqasc_validation_1672", "prediction": "all x.((Spice(x) | AmoeboidCell(x) | CollarCell(x)) -> SeaAnemone(x))", "score": 0}
{"id": "eqasc_validation_1672", "prediction": "all x.((Spice(x) | Amoeboid(x) | CollarCell(x)) -> SeaAnemone(x))", "score": 0}
{"id": "eqasc_validation_1672", "prediction": "all x.((Spidile(x) | AmosoeboidCell(x) | CollarCell(x)) -> SeaAnemone(x))", "score": 0}
{"id": "eqasc_validation_1672", "prediction": "all x.((Spider(x) | AmoeboidCell(x) | CollarCell(x)) -> SeaAnemone(x))", "score": 0}
{"id": "eqasc_validation_1672", "prediction": "all x.(Spicule(x) | AmoeboidCell(x) | CollarCell(x)) -> SeaAnemone(x))", "score": -1}
{"id": "eqasc_validation_1672", "prediction": "(Captivating(Spagil(a) & Characteristic(b) & SeaAnemone(a))", "score": -1}
{"id": "eqasc_validation_1672", "prediction": "all x y z.((Spicule(x) & AmoeboidCells(y) & CollarCell(z)) -> SeaAnemone(x))", "score": 0}
{"id": "eqasc_validation_1672", "prediction": "all x y z.((Spicule(x) & AmoeboidCell(y) & CollarCell(z)) -> (CharacteristicOfAnemones(x) & CharacteristicOfAnemones(x)))", "score": 0}
{"id": "eqasc_validation_1672", "prediction": "all x y z.((Spice(x) & AmoeboidCell(y) & CollarCell(z)) -> SeaAnemone(x))", "score": 0}
{"id": "eqasc_validation_1672", "prediction": "all x y z.((Spider(x) & Amoeboid(y) & Collar(z)) -> (CharacteristicOf(x,y) & SeaAnemone(x)))", "score": 0}
{"id": "eqasc_validation_1673", "prediction": "all x.(Spot(x) -> SimilarSpecializedCells(x))", "score": 0}
{"id": "eqasc_validation_1673", "prediction": "all x y.((Spoten(x) & SeaAnemone(y)) -> SimilarSpecializedCells(x,y))", "score": 0}
{"id": "eqasc_validation_1673", "prediction": "all x.(Sponges(x) -> SimilarSpecializedCells(x,sponges,seaanemones))", "score": 0}
{"id": "eqasc_validation_1673", "prediction": "all x y.((Spotch(x) & SeaAnemone(y)) -> (HasSpecializedCell(x,y) | HasSpecializedCell(x,y)))", "score": 0}
{"id": "eqasc_validation_1673", "prediction": "all x y.((Spot(x) & SeaAnemone(y)) -> SimilarSpecializedCell(x,y))", "score": 0}
{"id": "eqasc_validation_1673", "prediction": "all x.(SpongesAndSeaAnemones(x) -> SimilarSpecializedCells(x))", "score": 0}
{"id": "eqasc_validation_1673", "prediction": "all x.(Spunge(x) -> (SeaAnemone(x) & SimilarSpecializedCells(x)))", "score": 0}
{"id": "eqasc_validation_1673", "prediction": "all x.((Spot(x) | SeaAnemone(x)) -> SimilarSpecializedCells(x))", "score": 0}
{"id": "eqasc_validation_1673", "prediction": "all x.(Sponge(x) -> SimilarSpecializedCells(x,Sponges,SeaAnemones))", "score": 0}
{"id": "eqasc_validation_1673", "prediction": "all x.((Speng(x) & SeaAnemone(x)) -> SimilarSpecializedCells(x))", "score": 0}
{"id": "eqasc_validation_1673", "prediction": "all x y.((Spot(x) & SeaAnemone(y)) -> (SameSpecializedCell(x,y) & SimilarSpecializedCells(x,y)))", "score": 0}
{"id": "eqasc_validation_1673", "prediction": "all x.((Spot(x) & SeaAnemone(x)) -> SpicialSpecializedCells(x))", "score": 0}
{"id": "eqasc_validation_1673", "prediction": "all x.(Spotfire(x) -> SimilarSpecializedCells(x))", "score": 0}
{"id": "eqasc_validation_1673", "prediction": "all x y.((Sponge(x) & SeaAnemone(y)) -> HasSpecializedCells(x,y))", "score": 0}
{"id": "eqasc_validation_1673", "prediction": "all x y.((Sunned(x) | SeaAnemone(y)) -> SmokySpecializedCells(x,y))", "score": 0}
{"id": "eqasc_validation_1673", "prediction": "all x y.((Sponges(x) & SeaAnemone(y)) -> HasSpecializedCells(x,y))", "score": 0}
{"id": "eqasc_validation_1674", "prediction": "all x.((CorralCell(x) & Flagellum(x)) -> (CurrentTransfer(x) & FoodCollected(x)))", "score": 0}
{"id": "eqasc_validation_1674", "prediction": "all x y z.((Flagellum(x) & CollarCell(y) & FoodCollection(z)) -> CausesCurrent(x,y,z))", "score": 0}
{"id": "eqasc_validation_1674", "prediction": "all x y.((FlagellumDealCell(x) & CollarCell(y)) -> (CurrentPassesOverCollar(x,y) & FoodCollection(x,y)))", "score": 0}
{"id": "eqasc_validation_1674", "prediction": "all x y.((FlagellumOfCollarCell(x) & Collar(y)) -> (CausesCurrentOverCell(x,y) (FoodCollected(x) & FoodPassesOverCell(y))))", "score": -1}
{"id": "eqasc_validation_1674", "prediction": "all x.((CollarCell(x) & Flagellum(x)) -> (CurrentPassesOverCollar(x) & FoodCollects(x)))", "score": 0}
{"id": "eqasc_validation_1674", "prediction": "all x y z.((Flagellum(x) & CollarCell(y) & FoodCollection(z)) -> CausesCurrentToPassRight(x,y,z))", "score": 0}
{"id": "eqasc_validation_1674", "prediction": "all x.(Cell(x) -> CausesCurrentToPassOverCell(x))", "score": 0}
{"id": "eqasc_validation_1674", "prediction": "all x.(CellCell(x) & FlagellumOfCollarCell(x)) -> (CurrentPassesOverCollar(x) & FoodCollected(x)))", "score": -1}
{"id": "eqasc_validation_1674", "prediction": "all x y z.((FlagellumOfCollarCell(x) & Current(y) & FoodCollecting(z)) -> CausesCurrent(x,y,z))", "score": 0}
{"id": "eqasc_validation_1674", "prediction": "all x y.((Flagellum(x) & CollarCell(y)) -> (CurrentPassesOverCollar(x,y) & FoodCollected(x,y)))", "score": 0}
{"id": "eqasc_validation_1674", "prediction": "all x y.((Cell(x) & Flagellum(y)) -> (CausesCurrentToPass(y,x) & FoodCollects(y,x)))", "score": 0}
{"id": "eqasc_validation_1674", "prediction": "all x y.((CellCell(x) & Flagellum(y)) -> (CurrentToPassOverCollar(x,y) & FoodCollected(x)))", "score": 0}
{"id": "eqasc_validation_1674", "prediction": "all x.((FlagellumOfCollarCell(x) & CurrentPasses(x,Collar) & FoodCollected(x,Collar)) -> CausesCurrentToPassAndCollect(x,Collar))", "score": 0}
{"id": "eqasc_validation_1674", "prediction": "all x y z.((Larlcell(x) & Flagellum(y) & CollarCell(z)) -> (CancelOverCollar(y,z) & FoodCollected(y)))", "score": 0}
{"id": "eqasc_validation_1674", "prediction": "all x y z.((Flagellum(x) & CollarCell(y) & Coarse(z)) -> (CurseCombution(x,y) & FoodCollected(y)))", "score": 0}
{"id": "eqasc_validation_1674", "prediction": "all x y z.((FlagellumOfCollarcell(x) & Current(y) & Collar(z)) -> (CausesPassOver(x,y,z) & FoodCollects(x,y)))", "score": 0}
{"id": "eqasc_validation_1675", "prediction": "all x.(Sponge(x) -> exists y.(SpecializedCell(y) & HasFlagellum(x) & CollectsFood(x)))", "score": 0}
{"id": "eqasc_validation_1675", "prediction": "all x.(Sponge(x) -> UsesSpecializedCellsWithFlagellum(x))", "score": 0}
{"id": "eqasc_validation_1675", "prediction": "all x.((Spot(x) & SpecializedCells(x) & Flagellum(x)) -> CollectsFood(x))", "score": 0}
{"id": "eqasc_validation_1675", "prediction": "all x y.((Spoonge(x) & Sponge(y)) -> UsesSpecializedCellsWithFlagellum(x,y))", "score": 0}
{"id": "eqasc_validation_1675", "prediction": "all x.(Sponges(x) -> (UsesSpecializedCells(x) & HasFlagellum(x) & CollectsFood(x)))", "score": 0}
{"id": "eqasc_validation_1675", "prediction": "all x.(Sponge(x) -> (UsesSpecializedCells(x) & IncludesFlagellum(x) & CollectsFood(x)))", "score": 0}
{"id": "eqasc_validation_1675", "prediction": "all x.(Sponge(x) -> (UsesSpecializedCells(x) & HasFlagellum(x)))", "score": 0}
{"id": "eqasc_validation_1675", "prediction": "all x.(Sponges(x) -> UsesSpecializedCellsWithFlagellum(x))", "score": 0}
{"id": "eqasc_validation_1675", "prediction": "all x y z.((Sponge(x) & SprucedCell(y) & Flagellum(z)) -> CollectsFood(x,y))", "score": 0}
{"id": "eqasc_validation_1675", "prediction": "all x.(Spot(x) -> (usesSpecializedCells(x) & HasFlagellum(x)))", "score": 0}
{"id": "eqasc_validation_1675", "prediction": "all x.(Shonge(x) -> exists y.(SpecializedCell(y) & HasFlagellum(y)) & CollectsFood(x,y)))", "score": -1}
{"id": "eqasc_validation_1675", "prediction": "all x.(Spoonge(x) -> UsesSpecializedCellsWithFlagellumToCollectFood(x))", "score": 0}
{"id": "eqasc_validation_1675", "prediction": "all x y.((Sponge(x) & SpecializedCell(y) & FeaturesFlagellum(y)) -> CollectsFood(x,y))", "score": 0}
{"id": "eqasc_validation_1675", "prediction": "all x y.((Sponge(x) & SpecializedCell(y)) -> CusesFood(x,y))", "score": 0}
{"id": "eqasc_validation_1675", "prediction": "all x y z.((Spote(x) & SpecializedCell(y) & Flagellum(z)) -> CollectFood(x,y,z))", "score": 0}
{"id": "eqasc_validation_1675", "prediction": "all x.(Shell(x) -> UsesSpecializedCellsWithFlagellum(x))", "score": 0}
{"id": "eqasc_validation_1676", "prediction": "all x.(Spot(x) -> (Asymetrical(x) & ManySpecialCells(x)))", "score": 0}
{"id": "eqasc_validation_1676", "prediction": "all x.(Spot(x) -> ((Asymetrical(x) & SpecialTypesOfCells(x)) | CanPersonSignificantCells(x))))", "score": -1}
{"id": "eqasc_validation_1676", "prediction": "all x.(Spot(x) -> (Asymetrical(x) & manySpecialCellTypes(x)))", "score": 0}
{"id": "eqasc_validation_1676", "prediction": "all x.(Sponges(x) -> (Asymetric(x) & ManySpecialCells(x)))", "score": 0}
{"id": "eqasc_validation_1676", "prediction": "all x.(Spoonge(x) -> (Asymetrical(x) & HasSpecialCell(x)))", "score": 0}
{"id": "eqasc_validation_1676", "prediction": "all x.(Sponge(x) -> (Asymetrical(x) & ManySpecialCells(x)))", "score": 0}
{"id": "eqasc_validation_1676", "prediction": "all x.(Spong(x) -> (Asymetrical(x) & HasMultipleSpecialCells(x)))", "score": 0}
{"id": "eqasc_validation_1676", "prediction": "all x.(Sponges(x) -> (Asymetrical(x) & ManySpecialSpecificCells(x)))", "score": 0}
{"id": "eqasc_validation_1676", "prediction": "all x.(Spongest(x) -> (Asymetrical(x) & ManySpecialCells(x)))", "score": 0}
{"id": "eqasc_validation_1676", "prediction": "all x.(Sponges(x) -> (Asymetrical(x) & ManySpecialTypesOfCells(x)))", "score": 0}
{"id": "eqasc_validation_1676", "prediction": "all x.(Spoonge(x) -> (Asymetric(x) & HasSpecialCellTypes(x)))", "score": 0}
{"id": "eqasc_validation_1676", "prediction": "all x.(Sponges(x) -> (Asymetrical(x) & HasSpecialCellTypes(x)))", "score": 0}
{"id": "eqasc_validation_1676", "prediction": "all x.(Spot(x) -> (Asymetrical(x) & exists y.(SpecialCell(y) & SpecificCell(y)))))", "score": -1}
{"id": "eqasc_validation_1676", "prediction": "all x.(Spot(x) -> (Asymetric(x) & exists y.(SpecialCellType(y) & Has(x,y))))", "score": 0}
{"id": "eqasc_validation_1676", "prediction": "all x.(Spot(x) -> (Asymetrical(x) & HasSpecialCells(x)))", "score": 0}
{"id": "eqasc_validation_1676", "prediction": "all x.(Spong(x) -> (Asymetrical(x) & HasSpecialCellTypes(x)))", "score": 0}
{"id": "eqasc_validation_1677", "prediction": "all x.(Spot(x) -> (Asymmetrical(x) & HasCollarCells(x)))", "score": 0}
{"id": "eqasc_validation_1677", "prediction": "all x.(S Sponge(x) -> (Asymmetric(x) & HasCollarCells(x)))", "score": -1}
{"id": "eqasc_validation_1677", "prediction": "all x.(Sponge(x) -> (Asymmetrical(x) & HasCollarCells(x)))", "score": 0}
{"id": "eqasc_validation_1677", "prediction": "all x.(Spenge(x) -> (AsymmetricAL(x) & HasCollarCells(x)))", "score": 0}
{"id": "eqasc_validation_1677", "prediction": "all x.(Spoonge(x) -> (Asymmetrical(x) & HasCollarCell(x)))", "score": 0}
{"id": "eqasc_validation_1677", "prediction": "all x y.((Sponges(x) & Asymmetrical(x) & CollarCell(y)) -> HasCollarCells(x,y))", "score": 0}
{"id": "eqasc_validation_1677", "prediction": "all x.(Sponges(x) -> (Asymmetrical(x) & CollarCells(x)))", "score": 0}
{"id": "eqasc_validation_1677", "prediction": "all x.(Spong(x) -> (Asymmetrical(x) & HasCollarCells(x)))", "score": 0}
{"id": "eqasc_validation_1677", "prediction": "all x.(Sponges(x) -> (Asymmetrical(x) & HasCollarCells(x)))", "score": 0}
{"id": "eqasc_validation_1677", "prediction": "all x.(Sponges(x) -> (Asymmetrical(x) & HasCorralCells(x)))", "score": 0}
{"id": "eqasc_validation_1677", "prediction": "all x.(Sponge(x) -> (Asymmetric(x) & HasCollarCells(x)))", "score": 0}
{"id": "eqasc_validation_1677", "prediction": "all x.(Spline(x) -> (Asymmetrical(x) & CollarCells(x)))", "score": 0}
{"id": "eqasc_validation_1677", "prediction": "all x.(Spoonge(x) -> (Asymmetrical(x) & CollarCells(x)))", "score": 0}
{"id": "eqasc_validation_1677", "prediction": "all x.(Sponse(x) -> (Asymmetrical(x) & HasCollarCells(x)))", "score": 0}
{"id": "eqasc_validation_1678", "prediction": "all x y z.((CollarCell(x) & Sponge(y) & ConstantFlowOfWater(z) & ProductInto(x,y)) -> ProducesIn(x,z))", "score": 0}
{"id": "eqasc_validation_1678", "prediction": "all x.((CollarCell(x) & ConstantFlowOfWater(x)) -> EnoughWaterIntoSponge(x))", "score": 0}
{"id": "eqasc_validation_1678", "prediction": "all x.(ColarCell(x) -> (ProducesConstantFlowOfWater(x) & Spoon(x)))", "score": 0}
{"id": "eqasc_validation_1678", "prediction": "all x.(CollarCell(x) -> ProducesConstantFlowOfWaterIntoSponge(x))", "score": 0}
{"id": "eqasc_validation_1678", "prediction": "all x y.((CollarCell(x) & Sponge(y)) -> ProducesConstantFlowOfWater(x,y))", "score": 0}
{"id": "eqasc_validation_1678", "prediction": "all x.(CollarCell(x) -> ProducesConstantFlowOfWater(x))", "score": 0}
{"id": "eqasc_validation_1678", "prediction": "all x.(CollarCell(x) -> (ProducesConstantFlowOfWater(x) & IntoSponge(x)))", "score": 0}
{"id": "eqasc_validation_1678", "prediction": "all x y.((CollarCell(x) & Sponge(y)) -> ConstantFlowOfWaterInto(x,y))", "score": 0}
{"id": "eqasc_validation_1678", "prediction": "all x y.((CollarCell(x) & WaterSponge(y)) -> ProducesConstantFlowInto(x,y))", "score": 0}
{"id": "eqasc_validation_1678", "prediction": "all x.(CollarCell(x) -> ConstantFlowOfWaterIntoSponge(x))", "score": 0}
{"id": "eqasc_validation_1678", "prediction": "all x y z.((CollarCell(x) & Sponge(y) & WaterFlow(z)) -> ProducesConstantFlowInto(x,y,z))", "score": 0}
{"id": "eqasc_validation_1679", "prediction": "all x.(Sponge(x) -> (exists y.(sponge(y) & SpecializedWorkHorses(y,x)) & ProducesConstantFlowOfWater(x))))", "score": -1}
{"id": "eqasc_validation_1679", "prediction": "all x y.((Sponge(x) & Sponge(y)) -> (HasSpecializedWorkHorses(x) & ProducesConstantFlowOfWater(x,y)))", "score": 0}
{"id": "eqasc_validation_1679", "prediction": "all x y.((Sponge(x) & Sponge(y)) -> (HasWorkHop(x) & ProducesConstantFlowOfWater(x,y)))", "score": 0}
{"id": "eqasc_validation_1679", "prediction": "all x y z.((Sponge(x) & SpecializedWorkHorse(y) & Sponge(z)) -> (ProducesConstantWaterFlow(y,z) & Features(y)))", "score": 0}
{"id": "eqasc_validation_1679", "prediction": "all x.(Sponge(x) -> exists y.(WorkHorse(y) & WorksTo(y,x) & ProducesContinuousFlowOfWater(y)))", "score": 0}
{"id": "eqasc_validation_1679", "prediction": "all x.(Sponge(x) -> (Spy Horse(x) & ProducesConstantFlowOfWater(x)))", "score": -1}
{"id": "eqasc_validation_1679", "prediction": "all x y.(Sponge(x) & SpecializedWorkHorse(x,y) & ProducesConstantFlowOfWater(y,x))", "score": 0}
{"id": "eqasc_validation_1679", "prediction": "all x.((Sponge(x) & SpecializedWorkHofer(x) & ProducesConstantFlowOfWaterToSponge(x)) -> Has(x,y))", "score": 0}
{"id": "eqasc_validation_1679", "prediction": "all x y.((Sponge(x) & Sponge(y)) -> (SpecializedWorkHorse(x) & ProducesConstantWaterFlow(x)))", "score": 0}
{"id": "eqasc_validation_1679", "prediction": "all x y.((Sponge(x) & Sponge(y)) -> (SpecializedWorkHop(x) & ProducesConstantFlowOfWater(x,y)))", "score": 0}
{"id": "eqasc_validation_1679", "prediction": "all x.(Sponge(x) -> (HasSpecializedWorkHorses(x) & ProducesConstantFlowOfWater(x)))", "score": 0}
{"id": "eqasc_validation_1679", "prediction": "all x.(Sponge(x) -> (HasSpecializedWorkHorse(x) & ProducesConstantFlowOfWater(x)))", "score": 0}
{"id": "eqasc_validation_1679", "prediction": "all x.(Sponge(x) -> (SpecializedWorkHorse(x) & ConstantFlowOfWater(x,sponge)))", "score": 0}
{"id": "eqasc_validation_1679", "prediction": "all x.(Sponge(x) -> (SpecializedWorkHorse(x) & ProducesConstantFlowOfWater(x)))", "score": 0}
{"id": "eqasc_validation_1679", "prediction": "all x.(Sponge(x) -> (SpecializedWorkHorse(x) & ProducesContinuousFlowOfWater(x)))", "score": 0}
{"id": "eqasc_validation_1679", "prediction": "all x y.((Sponge(x) & WorkHorse(y) & Specialized(x)) -> (ProducesConstantFlowOfWater(x,y) & ProducesConstantFlow(y,z)))", "score": 0}
{"id": "eqasc_validation_1680", "prediction": "all x y.((Medicine(x) & Person(y) & Sick(y)) -> UsedForCuring(x,y))", "score": 1}
{"id": "eqasc_validation_1680", "prediction": "all x y.((Medicine(x) & Person(y) & Sick(y)) -> CuredForCurring(x,y))", "score": 0}
{"id": "eqasc_validation_1680", "prediction": "all x y z.((Medicine(x) & Person(y) & Sick(z) & UsedForCoring(x,y,z)) -> CuredSilent(x))", "score": 0}
{"id": "eqasc_validation_1680", "prediction": "all x y z.((Medicine(x) & Patient(y) & Sick(z)) -> UsedForCuring(x,y,z))", "score": 0}
{"id": "eqasc_validation_1680", "prediction": "all x.((Medicine(x) & PatientSick(x)) -> UsedForCuring(x))", "score": 0}
{"id": "eqasc_validation_1680", "prediction": "all x y.((Medicine(x) & Patient(y) & Sick(y)) -> Cure(x,y))", "score": 0}
{"id": "eqasc_validation_1680", "prediction": "all x.((Medicine(x) & Swick(x)) -> UsedForCuring(x))", "score": 0}
{"id": "eqasc_validation_1680", "prediction": "all x y z.((Medicine(x) & Person(y) & Sick(z)) -> UsedForCuring(x,y,z))", "score": 1}
{"id": "eqasc_validation_1680", "prediction": "all x y.((Medicine(x) & Person(y) & Sick(y)) -> CuresWhenSick(x,y))", "score": 0}
{"id": "eqasc_validation_1680", "prediction": "all x y.((Medicine(x) & Person(y) & Sick(y)) -> UsedForCuringUses(x,y))", "score": 0}
{"id": "eqasc_validation_1681", "prediction": "all x.(Herb(x) -> (Medicine(x) & Aid(x)))", "score": 2}
{"id": "eqasc_validation_1681", "prediction": "all x.(Herb(x) -> (Medication(x) | Aid(x)))", "score": 0}
{"id": "eqasc_validation_1681", "prediction": "all x.(Herb(x) -> (Medicine(x) | Aid(x)))", "score": 0}
{"id": "eqasc_validation_1682", "prediction": "all x y.((Herb(x) & People(y) & Sick(y)) -> UsedForCuring(x,y))", "score": 0}
{"id": "eqasc_validation_1682", "prediction": "all x y z.((Herb(x) & People(y) & Sick(z)) -> UsedForCurring(z))", "score": 0}
{"id": "eqasc_validation_1682", "prediction": "all x y.((Herb(x) & Sicken(y)) -> UsedForCuringPeople(x,y))", "score": 0}
{"id": "eqasc_validation_1682", "prediction": "all x y.((Herb(x) & Person(y) & Sick(y,x)) -> UsedForCurring(x,y))", "score": 0}
{"id": "eqasc_validation_1682", "prediction": "all x y z.((Herb(x) & Patient(y) & Sick(z) & UsesForCuring(x,y,z)) -> WasThanSick(y,x))", "score": 0}
{"id": "eqasc_validation_1682", "prediction": "all x y.((Herb(x) & Sick(y)) -> UsedForCuringPeople(x,y))", "score": 0}
{"id": "eqasc_validation_1682", "prediction": "all x y.((Herb(x) & Person(y) & Sick(y)) -> UsedForCuring(x,y))", "score": 1}
{"id": "eqasc_validation_1682", "prediction": "all x y z.((Herb(x) & Health(y) & Person(z) & Sick(z)) -> CuresFromSick(x,y,z))", "score": 0}
{"id": "eqasc_validation_1682", "prediction": "all x y z.((Herb(x) & Person(y) & Sick(z)) -> UsedForCuring(x,y,z))", "score": 1}
{"id": "eqasc_validation_1682", "prediction": "all x y z.((Herb(x) & Person(y) & Sick(z)) -> UsedForCaringWhen(x,y,z))", "score": 0}
{"id": "eqasc_validation_1682", "prediction": "all x y.((Herb(x) & Patient(y) & Sick(y)) -> UsedForCurring(x,y))", "score": 0}
{"id": "eqasc_validation_1682", "prediction": "all x y.((Herb(x) & Person(y) & Sick(y)) -> UsedForCoringWhenCored(x,y))", "score": 0}
{"id": "eqasc_validation_1682", "prediction": "all x y.((Herb(x) & Person(y) & PreviouslySick(y) & UsedForCurring(x,y)) -> UsedForCuring(x,y))", "score": 0}
{"id": "eqasc_validation_1683", "prediction": "all x.(Drug(x) -> SmallMedicine(x))", "score": 0}
{"id": "eqasc_validation_1683", "prediction": "all x.(Card(x) -> SmallMedicine(x))", "score": 0}
{"id": "eqasc_validation_1683", "prediction": "all x.(Drug(x) -> SmallMedium(x))", "score": 0}
{"id": "eqasc_validation_1684", "prediction": "all x y,z.((Drug(x) & Person(y) & Sick(z)) -> CanCure(x,y,z))", "score": -1}
{"id": "eqasc_validation_1684", "prediction": "all x y.((Drug(x) & Person(y) & Sick(y)) -> CanCure(x,y))", "score": 0}
{"id": "eqasc_validation_1684", "prediction": "all x.((Drugs(x) & Sick(x)) -> CuresPeople(x))", "score": 0}
{"id": "eqasc_validation_1684", "prediction": "all x.((Drug(x) & Sick(x)) -> Cures(x))", "score": 0}
{"id": "eqasc_validation_1684", "prediction": "all x y z.((Drug(x) & Person(y) & Sick(z) & CanCure(x,y)) -> Cures(x,y,z))", "score": 0}
{"id": "eqasc_validation_1684", "prediction": "all x y.((Drug(x) & Person(y) & Sick(y) & Cures(x,y)) -> CanCure(x,y))", "score": 0}
{"id": "eqasc_validation_1684", "prediction": "all x y.((Drug(x) & Person(y) & Sick(y)) -> CanCures(x,y))", "score": 0}
{"id": "eqasc_validation_1684", "prediction": "all x y z.((Drug(x) & Sucker(y) & Swick(z)) -> CanCurePeople(x,y,z))", "score": 0}
{"id": "eqasc_validation_1684", "prediction": "all x y.((Drugs(x) & Person(y) & Sick(y)) -> CanCureWhen(x,y))", "score": 0}
{"id": "eqasc_validation_1684", "prediction": "all x y.((Substance(x) & Person(y) & Sick(y)) -> Cures(x,y))", "score": 0}
{"id": "eqasc_validation_1684", "prediction": "all x y z.((Drug(x) & Sick(y) & Person(z) & Sick(z)) -> CanCure(x,z))", "score": 0}
{"id": "eqasc_validation_1685", "prediction": "all x.(LooksSick(x) -> Sick(x))", "score": 0}
{"id": "eqasc_validation_1685", "prediction": "all x.(LookedSick(x) -> Sick(x))", "score": 0}
{"id": "eqasc_validation_1685", "prediction": "all x.((Patient(x) & LooksSick(x)) -> Sick(x))", "score": 0}
{"id": "eqasc_validation_1685", "prediction": "all x.(Sick(x) -> PatientSick(x))", "score": 0}
{"id": "eqasc_validation_1685", "prediction": "all x.(Sick(x) -> Patient(x))", "score": 0}
{"id": "eqasc_validation_1685", "prediction": "all x y.((Patient(x) & LooksSick(x)) -> Sick(x))", "score": 0}
{"id": "eqasc_validation_1686", "prediction": "all x.(Medicine(x) -> CuringPatients(x))", "score": 0}
{"id": "eqasc_validation_1686", "prediction": "all x.(Medicine(x) -> UsedForCuringPatients(x))", "score": 0}
{"id": "eqasc_validation_1686", "prediction": "all x y z.((Medicine(x) & Patient(y) & Patient(z)) -> UsedForCuring(x,y,z))", "score": 0}
{"id": "eqasc_validation_1686", "prediction": "all x.(Medicine(x) -> CuresPatients(x))", "score": 0}
{"id": "eqasc_validation_1686", "prediction": "all x y.((Medicine(x) & Patient(y)) -> Curing(x,y))", "score": 0}
{"id": "eqasc_validation_1686", "prediction": "all x y.((Medicine(x) & Patient(y)) -> UsedForCurring(x,y))", "score": 0}
{"id": "eqasc_validation_1686", "prediction": "all x y.((Medicine(x) & Patient(y)) -> UsedForCuring(x,y))", "score": 0}
{"id": "eqasc_validation_1686", "prediction": "all x y.((Medicine(x) & Patient(y)) -> Cured(x,y))", "score": 0}
{"id": "eqasc_validation_1686", "prediction": "all x.(Medium(x) -> UsedForCuringPatients(x))", "score": 0}
{"id": "eqasc_validation_1686", "prediction": "all x.(Medicine(x) -> UsedForCurringPatients(x))", "score": 0}
{"id": "eqasc_validation_1686", "prediction": "all x.(Medication(x) -> UsedForCuringPatients(x))", "score": 0}
{"id": "eqasc_validation_1686", "prediction": "all x y z.((Medicine(x) & Patient(y) & Patient(z)) -> Cured(x,y,z))", "score": 0}
{"id": "eqasc_validation_1687", "prediction": "all x.((Medication(x) & InFormOfPill(x)) -> SwallowComplete(x))", "score": 0}
{"id": "eqasc_validation_1687", "prediction": "all x.((Medicine(x) & Pill(x)) -> SwallowComplete(x))", "score": 0}
{"id": "eqasc_validation_1687", "prediction": "all x.((Medicine(x) & InPillform(x)) -> SwallowPillWath(x))", "score": 0}
{"id": "eqasc_validation_1687", "prediction": "all x.((Medicine(x) & Pill(x)) -> SwallowWait(x))", "score": 0}
{"id": "eqasc_validation_1687", "prediction": "all x.((Medicine(x) & Pill(x)) -> SwallowCompletely(x))", "score": 0}
{"id": "eqasc_validation_1687", "prediction": "all x.((Medicine(x) & InPill(x)) -> SwallowPillWhole(x))", "score": 0}
{"id": "eqasc_validation_1687", "prediction": "all x.((Medicine(x) & Pill(x)) -> SwallowPillWhole(x))", "score": 0}
{"id": "eqasc_validation_1687", "prediction": "all x.((Medicine(x) & Pill(x)) -> TakesOrSnickersWhole(x))", "score": 0}
{"id": "eqasc_validation_1687", "prediction": "all x.((Medicine(x) & Pill(x)) -> SwallowWhole(x))", "score": 0}
{"id": "eqasc_validation_1687", "prediction": "all x.((Medication(x) & Pill(x)) -> SwallowForm(x,whole))", "score": 0}
{"id": "eqasc_validation_1687", "prediction": "all x.((Medicine(x) & Pill(x)) -> SwallowFull(x))", "score": 0}
{"id": "eqasc_validation_1687", "prediction": "all x.((Medication(x) & Pill(x)) -> SwallowPig(x))", "score": 0}
{"id": "eqasc_validation_1687", "prediction": "all x.((Medicine(x) & Pill(x)) -> SwallowTogether(x))", "score": 0}
{"id": "eqasc_validation_1687", "prediction": "all x.((Medication(x) & FormOfPill(x)) -> Swallow(x,pill,whole))", "score": 0}
{"id": "eqasc_validation_1687", "prediction": "all x.((Medicine(x) & FormOfPill(x)) -> SwallowPillWhipped(x))", "score": 0}
{"id": "eqasc_validation_1687", "prediction": "all x.((Medicine(x) & Pill(x)) -> SwallowWhich(x))", "score": 0}
{"id": "eqasc_validation_1688", "prediction": "all x.((Pilloys(x) & Sick(x) & SwallowingItWhole(x)) -> UsedForCuringPeople(x))", "score": 0}
{"id": "eqasc_validation_1688", "prediction": "all x y z.((Pill(x) & Patient(y) & Sick(z) & SwingingPillsWhole(x,y,z)) -> CuringCures(x,y))", "score": 0}
{"id": "eqasc_validation_1688", "prediction": "all x.((Sick(x) & SwallowingPillsWhole(x)) -> Cures(x))", "score": 0}
{"id": "eqasc_validation_1688", "prediction": "all x.((Sick(x) & SwallowingPillsWhole(x)) -> UsedForCuringPeople(x))", "score": 0}
{"id": "eqasc_validation_1688", "prediction": "all x.((Sick(x) & Sain(x)) -> (TeachersWillCour(x) & TakesPillsTogether(x)))", "score": 0}
{"id": "eqasc_validation_1688", "prediction": "all x.((Pill(x) & TakenClothingPillsHoney(x)) -> CuringPerson(x))", "score": 0}
{"id": "eqasc_validation_1688", "prediction": "all x y.((Pill(x) & Person(y) & Sick(y)) -> StomachsToCoure(x,y))", "score": 0}
{"id": "eqasc_validation_1688", "prediction": "all x y z.((Pill(x) & Person(y) & Sick(z)) -> (SmokingPillsWhole(x,y) & Curing(x,y,z)))", "score": 0}
{"id": "eqasc_validation_1688", "prediction": "all x y.((Sick(x) & Person(y) & SwingingPillsWhole(y)) -> UsedToCuringPeople(x,y))", "score": 0}
{"id": "eqasc_validation_1688", "prediction": "all x y.((Pill(x) & Patient(y) & Sick(y)) -> WorstForCuring(x,y))", "score": 0}
{"id": "eqasc_validation_1688", "prediction": "all x y.((Pill(x) & People(y) & Sick(y)) -> (SoukingPillsWhole(x) & UsedForCuring(x,y)))", "score": 0}
{"id": "eqasc_validation_1688", "prediction": "all x y z.((Sick(x) & SwallowingPillsWhole(x) & Person(y) & Sick(z)) -> UsedForCuring(x,y,z))", "score": 0}
{"id": "eqasc_validation_1688", "prediction": "all x y.((Pill(x) & Sick(y) & Sick(y)) -> UsesForCuringPerson(x,y))", "score": 0}
{"id": "eqasc_validation_1688", "prediction": "all x.((Pill(x) & Sick(x)) -> UsedForCuringPeople(x))", "score": 0}
{"id": "eqasc_validation_1688", "prediction": "all x.((Pill(x) & SwoolingPillsWhole(x)) -> UsedForCuringPeople(x))", "score": 0}
{"id": "eqasc_validation_1689", "prediction": "all x y.((Medicine(x) & Physician(y) & OrderedBy(x,y)) -> (Prescription(x) | NonPrescription(x)))", "score": 0}
{"id": "eqasc_validation_1689", "prediction": "all x y z.((PrescriptionMaterial(x) & NonPrescriptionMedication(y) & Supply(z)) -> (OrderedBy Physician(x,y) & OrderedByMan(x,z)))", "score": -1}
{"id": "eqasc_validation_1689", "prediction": "all x y z.((Medicine(x) & (Prescription(y) | NonPrescription(y)) & Medication(y)) -> OrderedBy(z,x))", "score": 0}
{"id": "eqasc_validation_1689", "prediction": "all x y.((PrescriptionMedications(x) & NonPrescriptionMedications(y) & -PrescriptionMedications(x)) -> OrderedByPhysician(x))", "score": 0}
{"id": "eqasc_validation_1689", "prediction": "all x y z.((PrescriptionMedication(x) & NonPreciseMedication(y) & Supplies(z) & OrderedBy(y,x)) -> Physician(x))", "score": 0}
{"id": "eqasc_validation_1689", "prediction": "all x y z.((Prescription(x) & NonPrescription(y) & Medication(z) & OrderedBy(x,y)) -> (Primetary(z) | NonPrescription(z)))", "score": 0}
{"id": "eqasc_validation_1689", "prediction": "all x.((Prescription(x) | NonPrescription(x)) -> MedicineSuppliersOrderedByPhedist(x))", "score": 0}
{"id": "eqasc_validation_1689", "prediction": "all x y z.((Prescription(x) & NonPrescription(x) & Medicines(y) & Supplies(z)) -> OrderedBy(x,z))", "score": 0}
{"id": "eqasc_validation_1689", "prediction": "all x y z.((Pharmacist(x) & Prescription(y) & NonPrescription(y)) -> Orders(x,y,z))", "score": 0}
{"id": "eqasc_validation_1689", "prediction": "all x y z.((PrescriptionMedication(x) & NonPrescriptionMedication(y) & Supply(z)) -> OrderedBy(x,z,x))", "score": 0}
{"id": "eqasc_validation_1689", "prediction": "all x y.((Prescription(x) & NonPrescription(x)) -> (Orders(y) & Medicated(y) & PrescribeSupplies(y)))", "score": 0}
{"id": "eqasc_validation_1689", "prediction": "all x y.((Prescription(x) & NonPrescription(x) & Medicine(y)) -> OrderedBy(y,x))", "score": 0}
{"id": "eqasc_validation_1689", "prediction": "all x.((Prescription(x) | NonPrescription(x)) -> Medical(x) & Medical(x) & Medical(x))", "score": 0}
{"id": "eqasc_validation_1689", "prediction": "all x y.((PrescriptionMedication(x) & NonPrescriptionMedium(x)) -> OrderedBy(x,y))", "score": 0}
{"id": "eqasc_validation_1689", "prediction": "all x y z.((Medicine(x) & PrescriptionMedication(y) & Supplies(z) & -PrescriptionMedication(y)) -> OrderedByPhysician(z))", "score": 0}
{"id": "eqasc_validation_1689", "prediction": "all x y.((Prescription(x) & NonPrescription(x)) -> (Orders(y,x) & Orders(x)))", "score": 0}
{"id": "eqasc_validation_1690", "prediction": "all x y.((Pharmacist(x) & Patient(y) & Sick(y)) -> WritesPrescription(x,y))", "score": 0}
{"id": "eqasc_validation_1690", "prediction": "all x y.((Pharmacist(x) & Person(y) & Sick(y)) -> WritesPrescription(x,y))", "score": 0}
{"id": "eqasc_validation_1690", "prediction": "all x y z.((Phlebot(x) & Person(y) & Sick(z)) -> WritesPrescription(x,y))", "score": 0}
{"id": "eqasc_validation_1690", "prediction": "all x.((Pharmacist(x) & Person(y) & Sick(y)) -> WritesPrescription(x,y))", "score": 0}
{"id": "eqasc_validation_1690", "prediction": "all x.((Phediat(x) & PeopleSick(x)) -> WritesPrescriptions(x))", "score": 0}
{"id": "eqasc_validation_1690", "prediction": "all x.((Phetician(x) & PersonsSick(x)) -> WritesPrescription(x))", "score": 0}
{"id": "eqasc_validation_1690", "prediction": "all x y.((Purist(x) & Person(y) & Sick(x)) -> WritesPrescription(x,y))", "score": 0}
{"id": "eqasc_validation_1690", "prediction": "all x y.((Pharmacist(x) & Person(y) & Sick(y)) -> WritesPrescriptions(x,y))", "score": 0}
{"id": "eqasc_validation_1690", "prediction": "all x.((Pharmacist(x) & Suffering(x)) -> WritesPrescriptions(x))", "score": 0}
{"id": "eqasc_validation_1690", "prediction": "all x.((Pharmacist(x) & PatientSick(x)) -> WritesPrescription(x))", "score": 0}
{"id": "eqasc_validation_1690", "prediction": "all x y.((Pharmacist(x) & Person(y)) -> WritesPrescription(x,y))", "score": 0}
{"id": "eqasc_validation_1690", "prediction": "all x y.((Pharmacist(x) & Person(y) & Stick(y)) -> WritesPrescription(x,y))", "score": 0}
{"id": "eqasc_validation_1690", "prediction": "all x.((PhD(x) & Person(x) & Sick(x)) -> WritesPrescription(x))", "score": 0}
{"id": "eqasc_validation_1690", "prediction": "all x.((Pharmacist(x) & PeopleSick(x)) -> WritesPrescription(x))", "score": 0}
{"id": "eqasc_validation_1691", "prediction": "all x.(People(x) -> (GetsSick(x) & GetsBetter(x)))", "score": 0}
{"id": "eqasc_validation_1691", "prediction": "all x.(Sick(x) -> Better(x))", "score": 0}
{"id": "eqasc_validation_1691", "prediction": "(all x.(Person(x) -> GetsSick(x)) & all y.(Person(y) -> GetsBetter(y)))", "score": 0}
{"id": "eqasc_validation_1691", "prediction": "all x.(Person(x) -> (GetsSick(x) & CanGetBetter(x)))", "score": 0}
{"id": "eqasc_validation_1691", "prediction": "exists x.(Person(x) & GetsSick(x) & GetsBetter(x))", "score": 0}
{"id": "eqasc_validation_1691", "prediction": "all x.(Person(x) -> (Sick(x) & Better(x)))", "score": 0}
{"id": "eqasc_validation_1691", "prediction": "all x.(Personal(x) -> (GetSick(x) & GetBetter(x)))", "score": 0}
{"id": "eqasc_validation_1691", "prediction": "all x.(Person(x) -> (GetsSick(x) & GetsBetter(x)))", "score": 0}
{"id": "eqasc_validation_1691", "prediction": "all x y.((Person(x) & Sick(y)) -> Better(x,y))", "score": 0}
{"id": "eqasc_validation_1691", "prediction": "all x.(Person(x) -> (GiveSick(x) & GetBetter(x)))", "score": 0}
{"id": "eqasc_validation_1691", "prediction": "all x.((Person(x) & Sick(x)) -> Better(x))", "score": 0}
{"id": "eqasc_validation_1691", "prediction": "all x y.((Person(x) & Person(y) & Sydel(x)) -> (GetsSick(x) & GetsBetter(y)))", "score": 0}
{"id": "eqasc_validation_1692", "prediction": "all x y z.((Doctor(x) & Person(y) & Better(z)) -> UsedForGetting(x,y,z))", "score": 0}
{"id": "eqasc_validation_1692", "prediction": "all x.(Medicine(x) -> (GoesBetter(x) & ImprovesPerson(x)))", "score": 0}
{"id": "eqasc_validation_1692", "prediction": "all x.(Medicine(x) -> GetsPerson(x))", "score": 0}
{"id": "eqasc_validation_1692", "prediction": "all x y.((Medicine(x) & Person(y)) -> UsedForGettingBetter(x,y))", "score": 0}
{"id": "eqasc_validation_1692", "prediction": "all x y.((Medicine(x) & Person(y)) -> UsedForEasyingPoorBetter(x,y))", "score": 0}
{"id": "eqasc_validation_1692", "prediction": "all x y.((Medicine(x) & Person(y) & UsedFor(x,y)) -> BetterPeople(x))", "score": 0}
{"id": "eqasc_validation_1692", "prediction": "all x y.((Medicine(x) & People(y)) -> UsedForBetter(x,y))", "score": 0}
{"id": "eqasc_validation_1692", "prediction": "all x.(Medicine(x) -> (GivesPeopleBetter(x)))", "score": 0}
{"id": "eqasc_validation_1692", "prediction": "all x y.((Medicine(x) & Person(y)) -> Better(x,y))", "score": 0}
{"id": "eqasc_validation_1692", "prediction": "all x.(Medicine(x) -> UsedForGettingPeopleBetter(x))", "score": 0}
{"id": "eqasc_validation_1692", "prediction": "all x y.((Medicine(x) & Person(y) & GetsBetter(x,y)) -> UsedFor(x,y))", "score": 0}
{"id": "eqasc_validation_1692", "prediction": "all x.(Medicine(x) -> ImprovesPerson(x))", "score": 0}
{"id": "eqasc_validation_1693", "prediction": "all x.((Child(x) & Hungry(x) & Sick(x)) -> NeededFoodAndMedication(x))", "score": 0}
{"id": "eqasc_validation_1693", "prediction": "all x.(HungryOrSick(x) -> (NeedsFood(x) & NeedsMedication(x)))", "score": 0}
{"id": "eqasc_validation_1693", "prediction": "all x.((Child(x) & (Hungry(x) | Sick(x))) -> NeededFoodAndMedicine(x))", "score": 0}
{"id": "eqasc_validation_1693", "prediction": "all x.(Hungry(x) | Sick(x)) -> (NeedsFood(x) & NeedsMedication(x)))", "score": -1}
{"id": "eqasc_validation_1693", "prediction": "all x.((Child(x) & Hungry(x)) | Sick(x)) -> (NeedsFood(x) & NeedsMedicine(x)))", "score": -1}
{"id": "eqasc_validation_1693", "prediction": "all x.((Child(x) & Hungry(x)) | Sick(x)) -> (Food(x) & Medicine(x)))", "score": -1}
{"id": "eqasc_validation_1693", "prediction": "all x.((Child(x) & (Hungry(x) | Sick(x))) -> (NeedsFood(x) & NeedsMedication(x)))", "score": 0}
{"id": "eqasc_validation_1693", "prediction": "all x.((Child(x) & (Hungry(x) | Sick(x))) -> NeededFood(x) & NeededMedication(x))", "score": 0}
{"id": "eqasc_validation_1693", "prediction": "all x.((Child(x) & Hungry(x) & Sick(x)) -> FoodAndMedicineNeeded(x))", "score": 0}
{"id": "eqasc_validation_1693", "prediction": "all x.((Child(x) & (Hungry(x) | Sick(x)) & NeededFood(x) & NeededMedication(x)) -> Needed(x))", "score": 0}
{"id": "eqasc_validation_1693", "prediction": "all x.((Child(x) & (Hungry(x) | EasilySick(x))) -> (NeedsFood(x) & NeedsMedication(x)))", "score": 0}
{"id": "eqasc_validation_1693", "prediction": "all x y z.((LivingChild(x) | Sick(x)) -> (NeedsFood(x) & NeedsMedication(x)))", "score": 0}
{"id": "eqasc_validation_1693", "prediction": "all x y.((Child(x) & (Hungry(x) | Sick(x))) -> Medication(y))", "score": 0}
{"id": "eqasc_validation_1693", "prediction": "all x.((Child(x) & (Hungry(x) | Sick(x))) -> FoodAndMedicineNeeded(x))", "score": 0}
{"id": "eqasc_validation_1694", "prediction": "all x.(SickChild(x) -> NeedsFood(x))", "score": 0}
{"id": "eqasc_validation_1694", "prediction": "all x y.((Child(x) & Sick(x) & NeedsFood(x,y)) -> NeedsFood(x))", "score": 0}
{"id": "eqasc_validation_1694", "prediction": "all x.((Child(x) & Sick(x)) -> NeedsFood(x))", "score": 0}
{"id": "eqasc_validation_1694", "prediction": "all x y.((Child(x) & Sick(x)) -> NeedsFood(x,y))", "score": 0}
{"id": "eqasc_validation_1694", "prediction": "all x.((SickChild(x) & NeedsFood(x)) -> NeedsFood(x))", "score": 0}
{"id": "eqasc_validation_1694", "prediction": "all x y.((Child(x) & Sick(y)) -> NeedsFood(x,y))", "score": 0}
{"id": "eqasc_validation_1694", "prediction": "all x.((Child(x) & Well(x)) -> NeedsFood(x))", "score": 0}
{"id": "eqasc_validation_1694", "prediction": "all x y z.((Child(x) & Sick(x) & Food(y) & Needs(x,y)) -> Needs(z,y))", "score": 0}
{"id": "eqasc_validation_1694", "prediction": "all x.((Child(x) & NeedsFood(x)) -> Sick(x))", "score": 0}
{"id": "eqasc_validation_1694", "prediction": "all x y.((SickChild(x) & SickChild(x)) -> NeedsFood(x,y))", "score": 0}
{"id": "eqasc_validation_1694", "prediction": "all x y.((SickChild(x) & NeedsFood(x,y)) -> NeedsFood(x))", "score": 0}
{"id": "eqasc_validation_1695", "prediction": "all x.(BotanicalMedicine(x) -> PowerfulMedicine(x))", "score": 0}
{"id": "eqasc_validation_1695", "prediction": "all x.(PlantSubstance(x) -> PowerfulMedicine(x))", "score": 0}
{"id": "eqasc_validation_1695", "prediction": "exists x.(PlantSubstance(x) & PowerfulMedication(x))", "score": 0}
{"id": "eqasc_validation_1695", "prediction": "all x.(BotanicalMedicine(x) -> (ManyPlantSubstances(x) & PowerfulMedication(x)))", "score": 0}
{"id": "eqasc_validation_1695", "prediction": "all x.(BotanicalMedicine(x) -> OftenHasPowerfulMedication(x))", "score": 0}
{"id": "eqasc_validation_1695", "prediction": "all x.(BotanicalMedicine(x) -> (MostPlantSubstances(x) & PowerfulMedication(x)))", "score": 0}
{"id": "eqasc_validation_1695", "prediction": "all x.((PlantSubstance(x) & BotanicalMedicine(x)) -> StrongMedicaid(x))", "score": 0}
{"id": "eqasc_validation_1695", "prediction": "all x.(PlantSubstance(x) -> EffectiveMedication(x))", "score": 0}
{"id": "eqasc_validation_1695", "prediction": "all x.(BotanicalMedicine(x) -> (PowerfulMedium(x) & ManyPlantSubstances(x)))", "score": 0}
{"id": "eqasc_validation_1695", "prediction": "all x.(BotanicalMedicine(x) -> exists y.(PlantSubstance(y) & UsedBy(x,y)))", "score": 0}
{"id": "eqasc_validation_1696", "prediction": "all x y z.((PlantSubstance(x) & Person(y) & ChronicSick(z) & IsPainful(y,z)) -> PowerfulCure(x,y,z))", "score": 0}
{"id": "eqasc_validation_1696", "prediction": "all x y z.((PlantSubstance(x) & Person(y) & Person(z) & Sick(y,z)) -> Cures(x,y))", "score": 0}
{"id": "eqasc_validation_1696", "prediction": "all x y.((PlantSubstance(x) & Person(y)) -> PowerfulCuresForSick(x,y))", "score": 0}
{"id": "eqasc_validation_1696", "prediction": "all x y z.((PlantSubstance(x) & Person(y) & Sick(z)) -> (PowerfulCure(x,y,z) & CarriesSick(x)))", "score": 0}
{"id": "eqasc_validation_1696", "prediction": "all x y.((PlantSubstance(x) & People(y) & Sick(y)) -> PowerfulCuresFor(x,y))", "score": 0}
{"id": "eqasc_validation_1696", "prediction": "all x y.((PlantSubstance(x) & Person(y) & Sick(y)) -> PowerfulCures(x,y))", "score": 0}
{"id": "eqasc_validation_1696", "prediction": "all x.((PlantSubstance(x) & Sick(x)) -> PowerfulCures(x))", "score": 0}
{"id": "eqasc_validation_1696", "prediction": "all x y.((PlantSubstance(x) & Person(y) & Sick(y)) -> PowerfulCuresFor(x,y))", "score": 0}
{"id": "eqasc_validation_1696", "prediction": "all x y z.((PlantSubstance(x) & Sick(y) & Person(z)) -> PowerfulCure(x,y,z))", "score": 0}
{"id": "eqasc_validation_1696", "prediction": "all x y z.((PlantSubstance(x) & Person(y) & Sick(z)) -> PowerfulCures(x,y,z))", "score": 0}
{"id": "eqasc_validation_1696", "prediction": "all x y z.((Plant(x) & Person(y) & sick(z) & UsedForSickness(x)) -> PowerfulCureForCancer(x,y,z))", "score": 0}
{"id": "eqasc_validation_1696", "prediction": "all x y.((PlantSubstance(x) & Person(y) & Sick(y)) -> PowerfulCureInWatt(x,y))", "score": 0}
{"id": "eqasc_validation_1696", "prediction": "all x.((PlantSubstance(x) & PeopleWithSickness(x)) -> PowerfulCure(x,x))", "score": 0}
{"id": "eqasc_validation_1696", "prediction": "all x y.((PlantSugar(x) & Person(y) & Sick(z)) -> PowerfulCure(x,y,z))", "score": 0}
{"id": "eqasc_validation_1696", "prediction": "all x y.((PlantSufficient(x) & Person(y) & Sick(y)) -> PowerfulCures(x,y))", "score": 0}
{"id": "eqasc_validation_1697", "prediction": "All x.(Baby(x) -> MOSTInquisitiveOfPeople(x))", "score": -1}
{"id": "eqasc_validation_1697", "prediction": "ALL x.(Baby(x) -> MOSTInquisitiveOfPeople(x))", "score": -1}
{"id": "eqasc_validation_1697", "prediction": "all x.(Baby(x) -> MOSTInquisitiveOfPeople(x))", "score": 0}
{"id": "eqasc_validation_1697", "prediction": "ALL x.(Baby(x) -> MOSTInquisitive(x))", "score": -1}
{"id": "eqasc_validation_1697", "prediction": "all x.(Babie(x) -> MOSTInquisitiveOfPeople(x))", "score": 0}
{"id": "eqasc_validation_1697", "prediction": "all x.(Baby(x) -> Inquisitive(x))", "score": 0}
{"id": "eqasc_validation_1697", "prediction": "all x y z.((Babie(x) & Person(y) & Person(z)) -> THE MOSTInquisitive(x,y,z))", "score": -1}
{"id": "eqasc_validation_1697", "prediction": "all x.((Baby(x) & MOSTInquisitive(x)) -> Inquisitive(x))", "score": 0}
{"id": "eqasc_validation_1697", "prediction": "all x.(Baby(x) -> MostInquisitiveOfPeople(x))", "score": 0}
{"id": "eqasc_validation_1698", "prediction": "all x y.((Bird(x) & Sick(y)) -> Curing(x,y))", "score": 0}
{"id": "eqasc_validation_1698", "prediction": "all x y.((Medicine(x) & Baby(y) & Sick(y)) -> UsedForCuring(x,y))", "score": 0}
{"id": "eqasc_validation_1698", "prediction": "all x y.((Baby(x) & Sick(y)) -> UsedForCuringWhenCannotBeBurial(x,y))", "score": 0}
{"id": "eqasc_validation_1698", "prediction": "all x y z w.((Medicine(x) & Babies(y) & Kid(z) & Sick(w)) -> Curing(x,y,z,w))", "score": 0}
{"id": "eqasc_validation_1698", "prediction": "all x y.((Medicine(x) & Baby(y) & Sick(y)) -> Curing(x,y))", "score": 0}
{"id": "eqasc_validation_1698", "prediction": "all x.((Medicine(x) & BabiesSick(x)) -> Cure(x))", "score": 0}
{"id": "eqasc_validation_1698", "prediction": "all x.((Medicine(x) & Sick(x)) -> CuringBaby(x,baby))", "score": 0}
{"id": "eqasc_validation_1698", "prediction": "all x y.((Medicine(x) & Baby(y) & Sick(y)) -> CuredBy(x,y))", "score": 0}
{"id": "eqasc_validation_1698", "prediction": "all x y z.((Medicine(x) & Babies(y) & Sick(z) & Uses(x,y,z)) -> Curing(x,y,z))", "score": 0}
{"id": "eqasc_validation_1698", "prediction": "all x y.(((Medicine(x) & Baby(y) & Sick(y)) -> UsedForCuring(x,y))", "score": -1}
{"id": "eqasc_validation_1698", "prediction": "all x.((Medicine(x) & Baby(y) & Sick(y)) -> WithCuring(x,y))", "score": 0}
{"id": "eqasc_validation_1698", "prediction": "all x y.((Medicine(x) & Baby(y) & Sick(y)) -> CuredFor(x,y))", "score": 0}
{"id": "eqasc_validation_1698", "prediction": "all x y.((Medicine(x) & Baby(y) & Sail(y)) -> Cures(x,y))", "score": 0}
{"id": "eqasc_validation_1698", "prediction": "all x.((Medicine(x) & Sick(x)) -> CuringBaby(x))", "score": 0}
{"id": "eqasc_validation_1699", "prediction": "all x.(Antibiotic(x) -> (PowerfulMedicine(x) & UsedToTreatBacteria(x)))", "score": 0}
{"id": "eqasc_validation_1699", "prediction": "all x.(Antibiotic(x) -> (PowerfulMedicine(x) & TreatsBacteriaInfections(x)))", "score": 0}
{"id": "eqasc_validation_1699", "prediction": "all x.(Antibiotic(x) -> (PowerfulMedicine(x) & TreatBacteriaInfections(x)))", "score": 0}
{"id": "eqasc_validation_1699", "prediction": "all x.(Antibiotic(x) -> (ProtectedBacteria(x) & Treatment(x,BacteriaInfections)))", "score": 0}
{"id": "eqasc_validation_1699", "prediction": "all x.(Antibiotic(x) -> (PowerfulMedicine(x) & TreatsBacterialInfections(x)))", "score": 0}
{"id": "eqasc_validation_1699", "prediction": "all x y.((Antibiotic(x) & BacterialInfection(y)) -> (PowerfulMedicine(x,y) & Treats(x,y)))", "score": 0}
{"id": "eqasc_validation_1699", "prediction": "all x.(Antibiotic(x) -> (PotentialMedicine(x) & TreatsBacteriaInfections(x)))", "score": 0}
{"id": "eqasc_validation_1699", "prediction": "all x.(Antibiotic(x) -> (PowerfulMedicine(x) & UsedToTreatBacterialInfections(x)))", "score": 0}
{"id": "eqasc_validation_1699", "prediction": "all x y.((Antibiotic(x) & BacterialInfection(y)) -> Treats(x,y))", "score": 0}
{"id": "eqasc_validation_1699", "prediction": "all x.(Antibiotic(x) -> (PowerfulMedication(x) & TreatsBacterialInfections(x)))", "score": 0}
{"id": "eqasc_validation_1699", "prediction": "all x y.((Antibiotic(x) & BacterialInfection(y)) -> TreatsMilk(x,y))", "score": 0}
{"id": "eqasc_validation_1699", "prediction": "all x.(Antibiotic(x) -> (PowerfulMedication(x) & UsedToTreatBacterialInfections(x)))", "score": 0}
{"id": "eqasc_validation_1699", "prediction": "all x.(Antibiotic(x) -> (PowerfulMedicine(x) & TreatsBacteria(x)))", "score": 0}
{"id": "eqasc_validation_1699", "prediction": "all x y z.((Antibiotic(x) & BacterialInfection(y) & BacteriaInfection(z)) -> (PositiveMedication(x) & UsedToTreat(x,y,z)))", "score": 0}
{"id": "eqasc_validation_1700", "prediction": "all x y.((Azoox(x) & PersonSickWithBacteriaInfections(y)) -> CanCure(x,y))", "score": 0}
{"id": "eqasc_validation_1700", "prediction": "all x y.((Antibiotic(x) & Patient(y)) -> CanCuresWithBacteriaInfections(x,y))", "score": 0}
{"id": "eqasc_validation_1700", "prediction": "all x y.(.(Antibiotic(x) & PersonSickWithBacterialInfection(y)) -> CanCureWith(x,y))", "score": -1}
{"id": "eqasc_validation_1700", "prediction": "all x.(Antibiotic(x) -> CuresBacterialInfections(x))", "score": 0}
{"id": "eqasc_validation_1700", "prediction": "all x.(Antibiotic(x) -> CanCurePerson(x))", "score": 0}
{"id": "eqasc_validation_1700", "prediction": "all x y.((Antibiotic(x) & Person(y) & SickWithBacteriaInfections(y)) -> CanCure(x,y))", "score": 0}
{"id": "eqasc_validation_1700", "prediction": "all x y.((Antibiotic(x) & Sick(y)) -> CanCureCancerSick(x,y))", "score": 0}
{"id": "eqasc_validation_1700", "prediction": "all x y z.((Antibiotic(x) & Person(y) & BacterialInfection(z) & Sick(y,z)) -> CuresCanCuresCanBacteriaInfections(x,y,z))", "score": 0}
{"id": "eqasc_validation_1700", "prediction": "all x y z.((Antibiotic(x) & LiveSick(y) & BacterialInfection(z)) -> CanCurePeople(x,y,z))", "score": 0}
{"id": "eqasc_validation_1700", "prediction": "all x y.((Antibiotic(x) & Person(y)) -> (CuresBacterialInfections(x,y) & SickWithBacterialInfections(y)))", "score": 0}
{"id": "eqasc_validation_1700", "prediction": "all x y z.((Antibiotic(x) & SickWithBacteria(y) & Infection(z)) -> Cures(x,y,z))", "score": 0}
{"id": "eqasc_validation_1700", "prediction": "all x.(Antibiotic(x) -> (ClearsBacterialInfections(x) & SickWithBacteria(x)))", "score": 0}
{"id": "eqasc_validation_1700", "prediction": "all x y.((Antibiotic(x) & Person(y) & Infection(y,bacteria)) -> CuresSick(x,y))", "score": 0}
{"id": "eqasc_validation_1700", "prediction": "all x y.((Antibiotic(x) & Sick(y) & VirusInfection(y)) -> CanCureCures(x,y))", "score": 0}
{"id": "eqasc_validation_1700", "prediction": "all x.(Antibiotic(x) -> CuresSickness(x,BacterialInfections))", "score": 0}
{"id": "eqasc_validation_1700", "prediction": "all x y z.((Antibiotic(x) & Person(y) & BacterialInfection(z)) -> CanCure(x,y,z))", "score": 0}
{"id": "eqasc_validation_1701", "prediction": "all x.(HumanFamily(x) -> BelongsTo(x,Human))", "score": 0}
{"id": "eqasc_validation_1701", "prediction": "all x.(Person(x) -> HumanFamily(x))", "score": 0}
{"id": "eqasc_validation_1701", "prediction": "all x.exists y.(Person(x) & HumanFamily(y) & BelongsTo(x,y))", "score": 0}
{"id": "eqasc_validation_1701", "prediction": "all x.(BelongsToHumanFamily(x) -> HumanFamily(x))", "score": 0}
{"id": "eqasc_validation_1701", "prediction": "all x.((Person(x) & BelongToHumanFamily(x)) -> Likes(x,y))", "score": 0}
{"id": "eqasc_validation_1701", "prediction": "all x.(BirthMember(x) -> HumanFamily(x))", "score": 0}
{"id": "eqasc_validation_1701", "prediction": "all x.exists y.(People(x) & HumanFamily(y) & Belong(x,y))", "score": 0}
{"id": "eqasc_validation_1701", "prediction": "all x.(MembersToHumanFamily(x) -> Human(x))", "score": 0}
{"id": "eqasc_validation_1701", "prediction": "all x.(Human(x) -> BelongsToFamily(x))", "score": 0}
{"id": "eqasc_validation_1701", "prediction": "all x.(Person(x) -> BelongsToHumanFamily(x))", "score": 0}
{"id": "eqasc_validation_1701", "prediction": "all x.(BelongToHumanFamily(x) -> EveryoneBelongsToHumanFamily(x))", "score": 0}
{"id": "eqasc_validation_1702", "prediction": "all x y.((Doctor(x) & Human(y) & Sick(y)) -> UsedForCuringCures(x,y))", "score": 0}
{"id": "eqasc_validation_1702", "prediction": "all x y.((Medicine(x) & Human(y) & Sick(y,x)) -> Curing(x,y))", "score": 0}
{"id": "eqasc_validation_1702", "prediction": "all x y.((Medicine(x) & Human(y) & Sick(y)) -> UsedForCuring(x,y))", "score": 0}
{"id": "eqasc_validation_1702", "prediction": "all x.((Medicine(x) & Human(x) & Sick(x)) -> UsedForCuring(x,Human))", "score": 0}
{"id": "eqasc_validation_1702", "prediction": "all x.((Medicine(x) & Sick(x)) -> UsedForCuringHumans(x))", "score": 0}
{"id": "eqasc_validation_1702", "prediction": "all x y.((Medicine(x) & Human(y) & Sick(y)) -> UsedForCurring(x,y))", "score": 0}
{"id": "eqasc_validation_1702", "prediction": "all x y.((Medicine(x) & Human(y) & Sick(y)) -> Curing(x,y))", "score": 0}
{"id": "eqasc_validation_1702", "prediction": "all x y.((Medicine(x) & Human(y)) -> UsedForCuringWhenSick(x,y))", "score": 0}
{"id": "eqasc_validation_1702", "prediction": "all x y.((Medicine(x) & Human(y) & Sick(y)) -> Cures(x,y))", "score": 0}
{"id": "eqasc_validation_1702", "prediction": "all x y.((Medicine(x) & Human(y) & Sick(y)) -> UsedForCuring (x,y))", "score": 0}
{"id": "eqasc_validation_1703", "prediction": "all x.((Medicine(x) & Ibuprofen(x)) -> (CalmingInflammation(x) & EasingPain(x)))", "score": 0}
{"id": "eqasc_validation_1703", "prediction": "all x y.((Medicine(x) & Ibuprofen(x)) -> (CalmsInflammation(x) & EasesPain(x)))", "score": 0}
{"id": "eqasc_validation_1703", "prediction": "all x.(Ibuprofen(x) -> (CalmInflammation(x) & easePain(x)))", "score": 0}
{"id": "eqasc_validation_1703", "prediction": "all x.((Medicine(x) & Ibuprofen(x)) -> (CalmsInflammation(x) & ElementsPain(x)))", "score": 0}
{"id": "eqasc_validation_1703", "prediction": "all x.((Medicine(x) & Ibuprofen(x)) -> (CalmsInflammation(x) & EasesPain(x)))", "score": 0}
{"id": "eqasc_validation_1703", "prediction": "all x.((Medication(x) & Ibuprofen(x)) -> (CalmsInflammation(x) & EasesPain(x)))", "score": 0}
{"id": "eqasc_validation_1703", "prediction": "all x.((Medicine(x) & Ibuprofen(x)) -> (CalmInflammation(x) & EasePain(x)))", "score": 0}
{"id": "eqasc_validation_1703", "prediction": "all x.((Medication(x) & Ibuprofen(x)) -> (CalmsInflammation(x) & EnlesPain(x)))", "score": 0}
{"id": "eqasc_validation_1703", "prediction": "all x.((Medication(x) & Ibuprofen(x)) -> (CleansInflammation(x) & EasesPain(x)))", "score": 0}
{"id": "eqasc_validation_1703", "prediction": "all x.(Ibuprofen(x) -> (CalmsInflammation(x) & EasesPain(x)))", "score": 0}
{"id": "eqasc_validation_1703", "prediction": "all x.((Medicine(x) & Ibuprofen(x)) -> (CalmsInflammation(x) & EnshrinesPain(x)))", "score": 0}
{"id": "eqasc_validation_1703", "prediction": "all x.(Ibuprofen(x) -> (CalmsInflammation(x) & EliminatesPain(x)))", "score": 0}
{"id": "eqasc_validation_1703", "prediction": "all x.((Medicine(x) & Ibuprofen(x)) -> (CastsInflammation(x) & EasesPain(x)))", "score": 0}
{"id": "eqasc_validation_1703", "prediction": "all x.((Medication(x) & Ibuprofen(x)) -> (CalmsInflammation(x) & ElementsPain(x)))", "score": 0}
{"id": "eqasc_validation_1703", "prediction": "all x.((Medicine(x) & Ibuprofen(x)) -> (CalmsInflammation(x) & ErasesPain(x)))", "score": 0}
{"id": "eqasc_validation_1704", "prediction": "all x.((Ibuprofen(x) & Sick(x)) -> UsedForCuringPerson(x))", "score": 0}
{"id": "eqasc_validation_1704", "prediction": "all x y.((Ibuprofen(x) & Person(y) & Sick(y)) -> UsedForCuring(x,y))", "score": 0}
{"id": "eqasc_validation_1704", "prediction": "all x.((Ibuprofen(x) & Sick(x)) -> UsedForCuringPeople(x))", "score": 0}
{"id": "eqasc_validation_1704", "prediction": "all x y.((Ibuprofen(x) & Person(y) & Hemo(y)) -> UsedForCuring(x,y))", "score": 0}
{"id": "eqasc_validation_1704", "prediction": "all x.((Buprofen(x) & CuresPerson(x)) -> Ibuprofen(x))", "score": 0}
{"id": "eqasc_validation_1704", "prediction": "all x.((Ibuprofen(x) & Person(x) & Sick(x)) -> Cures(x))", "score": 0}
{"id": "eqasc_validation_1704", "prediction": "all x y.((MitingPerson(x) & Person(y) & Sick(y)) -> UsedFor(x,y))", "score": 0}
{"id": "eqasc_validation_1704", "prediction": "all x y.((Ibuprofen(x) & Sick(y)) -> CuringPeople(x))", "score": 0}
{"id": "eqasc_validation_1704", "prediction": "all x y.((Ibuprofen(x) & Sick(y)) -> Cure(x,y))", "score": 0}
{"id": "eqasc_validation_1704", "prediction": "all x.((Ibuprofen(x) & Sick(x)) -> UsedForCuring(x))", "score": 0}
{"id": "eqasc_validation_1704", "prediction": "all x.((Ibuprofen(x) & Person(x)) -> UsedForCuringSickness(x))", "score": 0}
{"id": "eqasc_validation_1704", "prediction": "all x.((Ibuprofen(x) -> UsedForCuringPeople(x))", "score": -1}
{"id": "eqasc_validation_1704", "prediction": "all x.(Ibuprofen(x) -> CuresSick(x))", "score": 0}
{"id": "eqasc_validation_1704", "prediction": "all x y.((Buprofen(x) & Person(y) & Sick(y)) -> UsedForCuring(x,y))", "score": 0}
{"id": "eqasc_validation_1704", "prediction": "all x y.((Ibuprofen(x) & People(y) & Sick(y)) -> UsesForCuring(x,y))", "score": 0}
{"id": "eqasc_validation_1705", "prediction": "all x.(Person(x) -> (GivesSick(x) & Die(x)))", "score": 0}
{"id": "eqasc_validation_1705", "prediction": "all x.(Sick(x) -> Dies(x))", "score": 0}
{"id": "eqasc_validation_1705", "prediction": "all x.(People(x) -> (GivesSick(x) & Dies(x)))", "score": 0}
{"id": "eqasc_validation_1705", "prediction": "all x y.((Person(x) & Person(y)) -> (IsSick(x,y) & Dies(x,y)))", "score": 0}
{"id": "eqasc_validation_1705", "prediction": "all x.(Person(x) -> (GetsSick(x) & Dies(x)))", "score": 0}
{"id": "eqasc_validation_1705", "prediction": "all x.((Person(x) & IsSick(x)) -> Die(x))", "score": 0}
{"id": "eqasc_validation_1705", "prediction": "exists x.(People(x) & GetsSick(x) & Dies(x))", "score": 0}
{"id": "eqasc_validation_1705", "prediction": "all x.(Popular(x) -> (GetsSick(x) & Dies(x)))", "score": 0}
{"id": "eqasc_validation_1705", "prediction": "exists x.(Person(x) & GetsSick(x) & Diet(x))", "score": 0}
{"id": "eqasc_validation_1705", "prediction": "all x.(People(x) -> (Sick(x) & Die(x)))", "score": 0}
{"id": "eqasc_validation_1705", "prediction": "all x.(Person(x) -> (Sick(x) & Die(x)))", "score": 0}
{"id": "eqasc_validation_1705", "prediction": "all x.(Person(x) -> (GetSick(x) & Die(x)))", "score": 0}
{"id": "eqasc_validation_1705", "prediction": "exists x.(Person(x) & GetsSick(x) & dies(x))", "score": 0}
{"id": "eqasc_validation_1706", "prediction": "all x y.((Medicine(x) & Person(y)) -> CanPreventDying(x,y))", "score": 0}
{"id": "eqasc_validation_1706", "prediction": "all x.(Medicine(x) -> PreventsDeath(x))", "score": 0}
{"id": "eqasc_validation_1706", "prediction": "all x y.((Medicine(x) & Person(y)) -> CanPreventDeath(x,y))", "score": 0}
{"id": "eqasc_validation_1706", "prediction": "all x y.((Medicine(x) & Person(y)) -> PreventsDeath(x,y))", "score": 0}
{"id": "eqasc_validation_1706", "prediction": "all x y z.((Medicine(x) & Person(y) & Death(z)) -> -Penetrates(x,y,z))", "score": 0}
{"id": "eqasc_validation_1706", "prediction": "all x y.((Medicine(x) & Patient(y)) -> PreventsDeath(x,y))", "score": 0}
{"id": "eqasc_validation_1706", "prediction": "all x y.((Medicine(x) & Person(y)) -> PreventsDieting(x,y))", "score": 0}
{"id": "eqasc_validation_1706", "prediction": "all x y z.((Medicine(x) & Person(y) & Death(z)) -> PreventsFromDying(x,y,z))", "score": 0}
{"id": "eqasc_validation_1706", "prediction": "all x.(Medicine(x) -> PreventsFromDying(x))", "score": 0}
{"id": "eqasc_validation_1706", "prediction": "all x y.((Medicine(x) & Person(y)) -> PreventsDaying(x,y))", "score": 0}
{"id": "eqasc_validation_1706", "prediction": "all x.(Doctor(x) -> PreventsDeath(x))", "score": 0}
{"id": "eqasc_validation_1706", "prediction": "all x y.((Medicine(x) & Person(y) & Death(y)) -> PreventsDeath(x,y))", "score": 0}
{"id": "eqasc_validation_1706", "prediction": "all x y z.((Medicine(x) & Person(y) & Dying(z)) -> PreventsDying(x,y,z))", "score": 0}
{"id": "eqasc_validation_1706", "prediction": "all x y.((Medicine(x) & Person(y)) -> PreventsDying(x,y))", "score": 0}
{"id": "eqasc_validation_1707", "prediction": "all x y.((Fingernail(x) & Finger(y)) -> (PreventsInjury(x,y) & FormsProtectivePlates(x,y)))", "score": 0}
{"id": "eqasc_validation_1707", "prediction": "all x.((Fingernail(x) & FormsProtectivePlates(x) & OverFingersEnds(x)) -> PreventsInjury(x))", "score": 0}
{"id": "eqasc_validation_1707", "prediction": "all x.(Fingernail(x) -> PreventsInjury(x))", "score": 0}
{"id": "eqasc_validation_1707", "prediction": "all x.(Fingernail(x) -> (PreventsInjury(x) & FormsProtectivePlates(x) & OverFingersEnds(x)))", "score": 0}
{"id": "eqasc_validation_1707", "prediction": "all x.(Fingernail(x) -> (PreventsInjury(x) & FormsProtectivePlates(x)))", "score": 0}
{"id": "eqasc_validation_1707", "prediction": "all x.(Fingernail(x) -> (PreventsInjury(x) & FormsProtectivePlates(x) & OverPigs(x)))", "score": 0}
{"id": "eqasc_validation_1707", "prediction": "all x y.((Fingernail(x) & Finger(y)) -> (PreventsInjury(x,y) & FormsProtectivePlate(z,z)))", "score": 0}
{"id": "eqasc_validation_1707", "prediction": "all x y.((Fingernail(x) & Fingernail(y)) -> PreventsInjury(x,y))", "score": 0}
{"id": "eqasc_validation_1707", "prediction": "all x.(Fingersnail(x) -> (PreventsInjury(x) & FormsProtectivePlates(x)))", "score": 0}
{"id": "eqasc_validation_1707", "prediction": "all x y.((Fingernail(x) & Finger(y)) -> (PreventsInjury(x,y) & FormProtectivePlates(x)))", "score": 0}
{"id": "eqasc_validation_1707", "prediction": "all x.(Fingernail(x) -> (PreventInjuries(x) & FormProtectivePlates(x)))", "score": 0}
{"id": "eqasc_validation_1707", "prediction": "all x y.((Fingernail(x) & Finger(y)) -> PreventsInjuryByFormingProtectivePlates(x,y))", "score": 0}
{"id": "eqasc_validation_1707", "prediction": "all x y.((Fingernail(x) & Finger(y)) -> (PreventsInjuries(x,y) & DefendsPlate(x,y)))", "score": 0}
{"id": "eqasc_validation_1708", "prediction": "all x.(Fingernail(x) -> MadeOfKeratin(x))", "score": 0}
{"id": "eqasc_validation_1708", "prediction": "all x.(Fingersnail(x) -> StartedOfKeratin(x))", "score": 0}
{"id": "eqasc_validation_1708", "prediction": "all x.(Fingernail(x) -> (MadeOfKeratin(x)))", "score": 0}
{"id": "eqasc_validation_1708", "prediction": "all x.(Fingernail(x) -> (MadeOfKeratin(x) & MadeOfKeratin(x)))", "score": 0}
{"id": "eqasc_validation_1708", "prediction": "all x.(Fingernail(x) -> (MadeOfCoratin(x) & Keratin(x)))", "score": 0}
{"id": "eqasc_validation_1709", "prediction": "all x y.((Keratin(x) & Finger(y)) -> PreventsInjuryByFormingPlates(x,y))", "score": 0}
{"id": "eqasc_validation_1709", "prediction": "all x y.((Keratin(x) & Finger(y)) -> PreventsInjury(x,y))", "score": 0}
{"id": "eqasc_validation_1709", "prediction": "all x.(Keratin(x) -> ProtectsInjuryByFormingProtectingPlates(x))", "score": 0}
{"id": "eqasc_validation_1709", "prediction": "all x y.(Keratin(x) -> PreventsInjury(x))", "score": 0}
{"id": "eqasc_validation_1709", "prediction": "all x y.((Keratin(x) & ProtectivePlates(y)) -> PreventsInjury(x,y))", "score": 0}
{"id": "eqasc_validation_1709", "prediction": "all x.(Keratin(x) -> (PreventsInjury(x) & FormsProtectingPlates(x) & OverFingersEnds(x)))", "score": 0}
{"id": "eqasc_validation_1709", "prediction": "all x y z.((Keratin(x) & Injured(y) & ProtectivePlate(z)) -> (PreventsInjuries(x,y,z) & OverEndsOfFingers(x,z)))", "score": 0}
{"id": "eqasc_validation_1709", "prediction": "all x y.((Keratin(x) & Finger(y)) -> (PreventsInjuries(x) & FormsProtectivePlates(x,y) & OverFingersEnds(x,y)))", "score": 0}
{"id": "eqasc_validation_1709", "prediction": "all x y z.((Keratin(x) & Injured(y) & Throat(z) & Plate(m)) -> PreventsInjuries(x,y))", "score": 0}
{"id": "eqasc_validation_1709", "prediction": "all x.(Keratin(x) -> PreventsInjury(x))", "score": 0}
{"id": "eqasc_validation_1709", "prediction": "all x y.((Keratin(x) & DefendsPipes(y)) -> (PreventsInjury(x) & ProtectsPlates(x,y) & OverFingersEnds(x,y)))", "score": 0}
{"id": "eqasc_validation_1709", "prediction": "all x y.((Keratin(x) & FingerGipsExtend(y) & ProtectsPlates(x,y)) -> PreventsInjuryByForming(x,y))", "score": 0}
{"id": "eqasc_validation_1709", "prediction": "all x y.((Keratin(x) & ProtectivePlate(y) & EndsOfFingers(y)) -> PreventsInjuriesByForming(x,y))", "score": 0}
{"id": "eqasc_validation_1709", "prediction": "all x y.((Keratin(x) & Palm(y)) -> PreventsInjuriesByFormingProtectingPlates(x,y))", "score": 0}
{"id": "eqasc_validation_1710", "prediction": "all x.((Ceratin(x) & MadeOf(x,y)) -> PreventsInjuryByFormingProtectivePlates(x))", "score": 0}
{"id": "eqasc_validation_1710", "prediction": "all x.((MakedOfKeratin(x) & DoesPreventInjury(x)) -> FormsProtectivePlates(x))", "score": 0}
{"id": "eqasc_validation_1710", "prediction": "all x.((MadeOfKeratin(x) & PreventsInjuryByFormingProtectivePlates(x)) -> MakingOfKeratin(x))", "score": 0}
{"id": "eqasc_validation_1710", "prediction": "all x.((Ceratin(x) & MadeOf(x)) -> PreventsInjuryByFormingProtectivePlates(x))", "score": 0}
{"id": "eqasc_validation_1710", "prediction": "all x y.((MadeOfKeratin(x) & PreventsInjury(x) & FormedProtectivePlates(y)) -> ProducesProtectivePlates(x))", "score": 0}
{"id": "eqasc_validation_1710", "prediction": "all x y z.((MadeOfKeratin(x) & Injury(y) & ProtectivePlate(z)) -> PreventsByForming(x,y,z))", "score": 0}
{"id": "eqasc_validation_1710", "prediction": "all x y z.((Hard(x) & Keratin(y) & ProtectivePlate(z)) -> PreventsInjuryByForming(x,y,z))", "score": 0}
{"id": "eqasc_validation_1710", "prediction": "all x y.((MadeOfKeratin(x) & ProtectivePlates(y)) -> PreventsInjuriesByForming(x,y))", "score": 0}
{"id": "eqasc_validation_1710", "prediction": "all x.(MadeOfKeratin(x) -> PreventsInjury(x))", "score": 0}
{"id": "eqasc_validation_1710", "prediction": "all x.((MadeOfKeratin(x) & PreventsInjury(x)) -> FormsProtectivePlates(x))", "score": 0}
{"id": "eqasc_validation_1710", "prediction": "all x.((PreventsInjury(x) & MadeOfKeratin(x)) -> FormsProtectivePlates(x))", "score": 0}
{"id": "eqasc_validation_1710", "prediction": "all x.((MadeOfKeratin(x) & ProtectivePlates(x)) -> PreventsInjury(x))", "score": 0}
{"id": "eqasc_validation_1710", "prediction": "all x.((MadeOfKeratin(x) & PreventsInjury(x) & FormsProtectivePlates(x)) -> PreventsInjury(x))", "score": 0}
{"id": "eqasc_validation_1711", "prediction": "all x y.((Keratin(x) & EndEndByFingers(y)) -> PreventsInjury(x,y))", "score": 0}
{"id": "eqasc_validation_1711", "prediction": "all x y.((Keratin(x) & FingerEnd(y)) -> PreventsInjury(x,y))", "score": 0}
{"id": "eqasc_validation_1711", "prediction": "all x y.((Keratin(x) & Finger(y)) -> PreventsInjury(x,y))", "score": 0}
{"id": "eqasc_validation_1711", "prediction": "all x y z.((Keratin(x) & Finger(y) & Finger(z) & FormsOverEnds(x,y,z)) -> PreventsInjury(x))", "score": 0}
{"id": "eqasc_validation_1711", "prediction": "all x y z.((Keratin(x) & Finger(y) & Touch(z)) -> PreventsInjury(x,y,z))", "score": 0}
{"id": "eqasc_validation_1711", "prediction": "all x y z.((Keratin(x) & FingerEnds(y) & Hands(z)) -> PreventsInjury(x,y))", "score": 0}
{"id": "eqasc_validation_1711", "prediction": "all x.((KeratinFormsOverEdgesOfFingers(x) & PreventsInjury(x)) -> FormedOverFingers(x))", "score": 0}
{"id": "eqasc_validation_1711", "prediction": "all x y.((Keratin(x) & FingerEnds(y)) -> PreventsInjury(x,y))", "score": 0}
{"id": "eqasc_validation_1711", "prediction": "all x y z.((Keratin(x) & FingerEdge(y) & FingerEdge(z)) -> PreventsInjury(x,y,z))", "score": 0}
{"id": "eqasc_validation_1711", "prediction": "all x.((Keratin(x) & FormsOverFingers(x)) -> PreventsInjury(x))", "score": 0}
{"id": "eqasc_validation_1711", "prediction": "all x.((KeratinForming(x) & OverFingersEnds(x)) -> PreventsInjury(x))", "score": 0}
{"id": "eqasc_validation_1711", "prediction": "all x y z.((Keratin(x) & FingerEnds(y) & Finger(z) & FormsOver(x,y) & PreventsInjury(x)) -> FormsOver(x,z))", "score": 0}
{"id": "eqasc_validation_1711", "prediction": "all x.((FeltsKeratin(x) & OverFingersEnds(x)) -> PreventsInjury(x))", "score": 0}
{"id": "eqasc_validation_1712", "prediction": "all x.(Fingernail(x) -> Has(x))", "score": 0}
{"id": "eqasc_validation_1712", "prediction": "all x.(Person(x) -> HasFingersnails(x))", "score": 0}
{"id": "eqasc_validation_1712", "prediction": "all x.(Populum(x) -> Fingernails(x))", "score": 0}
{"id": "eqasc_validation_1712", "prediction": "all x.(Person(x) -> HasNails(x))", "score": 0}
{"id": "eqasc_validation_1712", "prediction": "all x.(Person(x) -> HasFingernails(x))", "score": 0}
{"id": "eqasc_validation_1712", "prediction": "(PeopleHasFingers(people))", "score": 0}
{"id": "eqasc_validation_1712", "prediction": "all x.exists y.(Person(x) & Fingernail(y) & Has(x,y))", "score": 0}
{"id": "eqasc_validation_1712", "prediction": "exists x.(Person(x) & Fingernails(x))", "score": 0}
{"id": "eqasc_validation_1712", "prediction": "all x.(HasFingersenail(x) -> HasFingersenail(x))", "score": 0}
{"id": "eqasc_validation_1712", "prediction": "all x.(Men(x) -> HasFingersnails(x))", "score": 0}
{"id": "eqasc_validation_1712", "prediction": "all x.(Human(x) -> HasFingersnail(x))", "score": 0}
{"id": "eqasc_validation_1712", "prediction": "all x.(Person(x) -> HasFingerscrew(x))", "score": 0}
{"id": "eqasc_validation_1713", "prediction": "all x y.((Person(x) & Finger(y)) -> PreventsInjury(x,y))", "score": 0}
{"id": "eqasc_validation_1713", "prediction": "all x y.((Person(x) & Injury(y)) -> FormsProtectivePlatesOverFingersEnds(x,y))", "score": 0}
{"id": "eqasc_validation_1713", "prediction": "all x y.((Person(x) & Person(y) & FormsProtectivePlatesOverFingers(x,y)) -> DesignedForInjuries(x,y))", "score": 0}
{"id": "eqasc_validation_1713", "prediction": "all x y z.((Person(x) & Injury(y) & ProtectivePlates(z)) -> (PreventsInjury(x,y,z) & Forms(x,y,z)))", "score": 0}
{"id": "eqasc_validation_1713", "prediction": "all x y z.((People(x) & TornFingersEnds(y) & ProtectivePlates(z)) -> PreventsInjuriesByForming(x,y,z))", "score": 0}
{"id": "eqasc_validation_1713", "prediction": "all x y.((Person(x) & Finger(y) & FormsProtectivePlate(x,y)) -> PreventsInjuries(x,y))", "score": 0}
{"id": "eqasc_validation_1713", "prediction": "all x y z.((Person(x) & Injured(y) & ProtectivePlate(z) & EndsOfFingers(z) & Forms(x,z)) -> PreventsInjuryByForming(x,y,z))", "score": 0}
{"id": "eqasc_validation_1713", "prediction": "all x.(PreventsInjuryByFormingProtectivePlates(x) -> (Person(x) & EndOfFingers(x)))", "score": 0}
{"id": "eqasc_validation_1713", "prediction": "all x y.((Person(x) & PreventsInjury(y)) -> FormsProtectivePlatesOverFingersEnds(x))", "score": 0}
{"id": "eqasc_validation_1713", "prediction": "all x y.((Person(x) & Person(y)) -> (PreventsInjury(x,y) & FormsProtectivePlates(x,y) & OverFingersEnds(x,y)))", "score": 0}
{"id": "eqasc_validation_1713", "prediction": "all x y z.((People(x) & Injuries(y) & ProtectionPlate(z)) -> Prevents(x,y,z))", "score": 0}
{"id": "eqasc_validation_1713", "prediction": "all x.(PreventsInjuryByFormingProtectivePlates(x) -> OverEndsOfFingers(x))", "score": 0}
{"id": "eqasc_validation_1713", "prediction": "all x y z.(ProtectivePlate(x) -> (PreventsInjury(x) & ProtectsEndsOfFingers(y) & OverEndsOfFingers(z) & OverFingers(x,y,z)))", "score": 0}
{"id": "eqasc_validation_1713", "prediction": "all x y.((Person(x) & Hatched(y) & FormsProtectivePlates(x,y)) -> PreventsInjury(x,y))", "score": 0}
{"id": "eqasc_validation_1713", "prediction": "all x.((Person(x) & ProtectivePlates(x)) -> PreventsInjury(x))", "score": 0}
{"id": "eqasc_validation_1713", "prediction": "all x.(PreventsInjuryByFormingProtectivePlatesThroughFingers(x) -> PreventsInjury(x))", "score": 0}
{"id": "eqasc_validation_1714", "prediction": "all x.(HealthyFingernailExamination(x) -> (Smooth(x) & WellShaped(x)))", "score": 0}
{"id": "eqasc_validation_1714", "prediction": "all x.((FingernailExamination(x) & Smooth(x) & WellShaped(x)) -> Healthy(x))", "score": 0}
{"id": "eqasc_validation_1714", "prediction": "all x y.((FingernailExamination(x) & Smooth(y) & WellShaped(y)) -> Healthy(x))", "score": 0}
{"id": "eqasc_validation_1714", "prediction": "all x.(FingernailExamination(x) -> (Smooth(x) & WellShaped(x)))", "score": 0}
{"id": "eqasc_validation_1714", "prediction": "all x.((Fingernail(x) & Smooth(x) & WellShaped(x)) -> Healthy(x))", "score": 0}
{"id": "eqasc_validation_1714", "prediction": "all x.(HealthyFingernailExamination(x) -> (Soft(x) & WellShaped(x)))", "score": 0}
{"id": "eqasc_validation_1714", "prediction": "all x.(HealthyFingersnailExamination(x) -> (Smooth(x) & WellShaped(x)))", "score": 0}
{"id": "eqasc_validation_1714", "prediction": "all x.((FingernailExamination(x) & Smooth(x) & WellShapen(x)) -> Healthy(x))", "score": 0}
{"id": "eqasc_validation_1714", "prediction": "all x y.((FingernailExamination(x) & Smooth(y) & WellShaped(y)) -> Healthy(y))", "score": 0}
{"id": "eqasc_validation_1714", "prediction": "all x.(FingernailExamination(x) -> (Shaped(x) & WellShaped(x)))", "score": 0}
{"id": "eqasc_validation_1715", "prediction": "all x.((PlasticPlate(x) & Protective(x)) -> (Smooth(x) & WellShaped(x)))", "score": 0}
{"id": "eqasc_validation_1715", "prediction": "all x.(ProtectivePlate(x) -> (Smooth(x) & WellShaped(x)))", "score": 0}
{"id": "eqasc_validation_1715", "prediction": "all x y.((ProtectivePlate(x) & FingerEnds(y)) -> (Smooth(x) & WellShaped(x)))", "score": 0}
{"id": "eqasc_validation_1715", "prediction": "all x.(ProtectivePlate(x) -> (EdibleShape(x) | WellShaped(x)))", "score": 0}
{"id": "eqasc_validation_1715", "prediction": "all x.(ProtectivePlate(x) -> (Shaped(x) & WellShaped(x)))", "score": 0}
{"id": "eqasc_validation_1715", "prediction": "all x y.((ProtectivePlate(x) & Finger(y) & OverEnds(x,y)) -> (Smooth(x) & WellShaped(x)))", "score": 0}
{"id": "eqasc_validation_1715", "prediction": "all x y z.((ProtectivePlate(x) & FingerEnds(y) & Fingers(z)) -> (Smooth(x) & WellShaped(x)))", "score": 0}
{"id": "eqasc_validation_1715", "prediction": "all x.(ProtectivePlate(x) -> (Solid(x) & WellShaped(x)))", "score": 0}
{"id": "eqasc_validation_1715", "prediction": "all x.(ProtectivePlate(x) -> (SmoothEndsOfFingers(x) & WellShapped(x)))", "score": 0}
{"id": "eqasc_validation_1715", "prediction": "all x y.((ProtectivePlate(x) & FingerEngth(x) & Smooth(y) & WellShapened(y)) -> Protective(x))", "score": 0}
{"id": "eqasc_validation_1715", "prediction": "all x y.((ProtectivePlate(x) & Finger(y)) -> (Bulky(x) & WellShaped(x)))", "score": 0}
{"id": "eqasc_validation_1715", "prediction": "all x.(ProtectivePlate(x) -> (ShapedEnds(x) & WellShape(x)))", "score": 0}
{"id": "eqasc_validation_1716", "prediction": "all x y.((Keratin(x) & Finger(y)) -> PreventsInjury(x,y))", "score": 0}
{"id": "eqasc_validation_1716", "prediction": "all x.(Keratin(x) -> (PreventsInjury(x) & FormsProtectivePlates(x)))", "score": 0}
{"id": "eqasc_validation_1716", "prediction": "all x.(Keratin(x) -> PreventsInjury(x))", "score": 0}
{"id": "eqasc_validation_1716", "prediction": "all x.(Keratin(x) -> (ProtectsInjury(x) & FormsProtectivePlates(x)))", "score": 0}
{"id": "eqasc_validation_1716", "prediction": "all x y.((Keratin(x) & Finger(y)) -> (PreventsInjury(x,y) & FormsProtectivePlates(x)))", "score": 0}
{"id": "eqasc_validation_1716", "prediction": "all x.(Keratin(x) -> PreventsInjuries(x))", "score": 0}
{"id": "eqasc_validation_1716", "prediction": "all x.((Keratin(x) & ProtectivePlates(x)) -> PreventsInjury(x,y))", "score": 0}
{"id": "eqasc_validation_1716", "prediction": "all x y.((Keratin(x) & Injured(y)) -> PreventsBy(x,y))", "score": 0}
{"id": "eqasc_validation_1717", "prediction": "all x y.((Keratin(x) & Finger(y) & FormsProtectivePlates(x,y)) -> PreventsInjury(x))", "score": 0}
{"id": "eqasc_validation_1717", "prediction": "all x.(Keratin(x) -> PreventsInjuryByFormingProtectivePlates(x))", "score": 0}
{"id": "eqasc_validation_1717", "prediction": "all x.(Keratin(x) -> PreventsInjury(x))", "score": 0}
{"id": "eqasc_validation_1717", "prediction": "all x y.((Keratin(x) & Finger(y)) -> PreventsInjury(x,y))", "score": 0}
{"id": "eqasc_validation_1717", "prediction": "all x y.((Keratin(x) | ProtectivePlate(x)) -> PreventsInjuries(x))", "score": 0}
{"id": "eqasc_validation_1717", "prediction": "all x.(Keratin(x) -> (PreventsInjury(x) & FormsProtectivePlatesOverFingers(x)))", "score": 0}
{"id": "eqasc_validation_1717", "prediction": "all x y.((Keratin(x) & ProtectivePlates(y)) -> PreventsInjury(x,y))", "score": 0}
{"id": "eqasc_validation_1717", "prediction": "all x.(Keratin(x) -> (PreventsInjury(x) & ProtectivePlates(x) & OverEdgedFingers(x)))", "score": 0}
{"id": "eqasc_validation_1717", "prediction": "all x y.((Keratin(x) & FingerEnds(y)) -> PreventsInjury(x,y))", "score": 0}
{"id": "eqasc_validation_1717", "prediction": "all x y.((Keratin(x) & Finger(y)) -> PreventsInjuriesByFormingProtectivePlates(x,y))", "score": 0}
{"id": "eqasc_validation_1717", "prediction": "all x.(Keratin(x) -> (PreventsInjury(x) & FormsProtectivePlates(x) & OverFingersEnds(x)))", "score": 0}
{"id": "eqasc_validation_1717", "prediction": "all x.(Keratin(x) -> (PreventsInjury(x) & FormsProtectivePlates(x)))", "score": 0}
{"id": "eqasc_validation_1717", "prediction": "all x.((Keratin(x) & PreventsInjury(x)) -> FormsProtectivePlatesOverEdgesOfFingers(x))", "score": 0}
{"id": "eqasc_validation_1717", "prediction": "all x y.((Keratin(x) & FingerFingers(y)) -> PreventsInjury(x,y))", "score": 0}
{"id": "eqasc_validation_1718", "prediction": "all x.(Fingernail(x) -> BrittleWithAge(x))", "score": 0}
{"id": "eqasc_validation_1718", "prediction": "all x y.((Fingernail(x) & Age(y)) -> WorrisomeWith(x,y))", "score": 0}
{"id": "eqasc_validation_1718", "prediction": "all x y.((Fingersnail(x) & Age(y)) -> Brittle(x))", "score": 0}
{"id": "eqasc_validation_1718", "prediction": "(BloodingWithAge(Fingernail))", "score": 0}
{"id": "eqasc_validation_1718", "prediction": "all x.((Fingernail(x) & Age(x)) -> BrittleWith(x,y))", "score": 0}
{"id": "eqasc_validation_1718", "prediction": "all x.(Flobnail(x) -> BrittleWithAge(x))", "score": 0}
{"id": "eqasc_validation_1718", "prediction": "all x.((Fingernail(x) & Age(y)) -> Brittle(x))", "score": 0}
{"id": "eqasc_validation_1718", "prediction": "all x y.((Fingernail(x) & Aging(y)) -> BrittleWith(x,y))", "score": 0}
{"id": "eqasc_validation_1718", "prediction": "all x.(Fingersnail(x) -> BrittleWithAge(x))", "score": 0}
{"id": "eqasc_validation_1718", "prediction": "all x.(Fingernail(x) -> MoreBrustingWithAge(x))", "score": 0}
{"id": "eqasc_validation_1718", "prediction": "all x.((Fingernail(x) & Age(x)) -> MoreBrittle(x))", "score": 0}
{"id": "eqasc_validation_1719", "prediction": "all x y z.((ProtectivePlate(x) & FingerFingers(y) & FingerFingers(z) & Age(x) & BecomesBrittleWithAge(x,y,z)) -> MoreBrittle(x,y))", "score": 0}
{"id": "eqasc_validation_1719", "prediction": "all x.((ProtectivePlate(x) & EndsOfFingers(x)) -> BrittleWithAge(x))", "score": 0}
{"id": "eqasc_validation_1719", "prediction": "all x y z.((ProtectivePlate(x) & FingerEndScreen(y) & FingerEnd(z)) -> BrittleWithAge(x,y,z))", "score": 0}
{"id": "eqasc_validation_1719", "prediction": "all x.((ProtectivePlate(x) & EndsFingers(x) & AgeRittle(x)) -> MoreBrittle(x))", "score": 0}
{"id": "eqasc_validation_1719", "prediction": "all x.((ProtectivePlatesOverFingersEnds(x) & AgeAssociated(x) & BrittleWithAge(x)) -> (BecomeMoreBriberThanEngthsOfFingers(x)))", "score": 0}
{"id": "eqasc_validation_1719", "prediction": "all x y.((ProtectivePlate(x) & FingerEndsReachesAge(y) & Age(y)) -> BrittleWithAge(x,y))", "score": 0}
{"id": "eqasc_validation_1719", "prediction": "all x.((ProtectivePlate(x) & OverFingersEnde(x)) -> BrittleWithAge(x))", "score": 0}
{"id": "eqasc_validation_1719", "prediction": "all x y.((ProtectivePlate(x) & FingerEdge(y) & Age(v)) -> BrittleWithAge(x,y))", "score": 0}
{"id": "eqasc_validation_1719", "prediction": "all x y.((Plate(x) & Fingers(y) & Ends(x,y)) -> BrittleWithAge(x))", "score": 0}
{"id": "eqasc_validation_1719", "prediction": "all x y z.((ProtectivePlate(x) & FingerEnds(y) & FingerEnds(z) & Age(z)) -> BrittleRegardlessOfFactors(x,y,z))", "score": 0}
{"id": "eqasc_validation_1719", "prediction": "all x.((ProtectivePlate(x) & FingerEnds(x) & Age(x)) -> Brittle(x))", "score": 0}
{"id": "eqasc_validation_1719", "prediction": "all x y.((ProtectivePlate(x) & FingerEnds(y)) -> BrittleWithAge(x,y))", "score": 0}
{"id": "eqasc_validation_1719", "prediction": "all x y z.((ProtectivePlate(x) & FingerEnd(y) & FingerEnd(z) & Age(x)) -> MoreBrittleWithAge(x,y,z))", "score": 0}
{"id": "eqasc_validation_1719", "prediction": "all x y.((ProtectivePlate(x) & FingerWend(y)) -> BrittleWithAge(x,y))", "score": 0}
{"id": "eqasc_validation_1719", "prediction": "all x y.((ProtectivePlate(x) & FingerFingers(y) & Age(x,y)) -> Blistering(x))", "score": 0}
{"id": "eqasc_validation_1719", "prediction": "all x y.((ProtectivePlate(x) & Finger(y) & EndsOfFingers(x,y)) -> BrittleWithAge(x))", "score": 0}
{"id": "eqasc_validation_1720", "prediction": "all x.(ProtectivePlatesOverFingers(x) -> MadeOfKeratin(x))", "score": 0}
{"id": "eqasc_validation_1720", "prediction": "all x y.((ProtectivePlate(x) & FingerOf(y) & EndOf(y)) -> MadeOfKeratin(x))", "score": 0}
{"id": "eqasc_validation_1720", "prediction": "all x y.((ProtectivePlate(x) & FingerNeedleEnds(y)) -> MadeOfKeratin(x,y))", "score": 0}
{"id": "eqasc_validation_1720", "prediction": "all x.((ProtectivePlates(x) & EndsOfFingers(x)) -> MadeOfKeratin(x))", "score": 0}
{"id": "eqasc_validation_1720", "prediction": "all x y.((PositivePlate(x) & Finger(y)) -> MadeOfKeratin(x,y))", "score": 0}
{"id": "eqasc_validation_1720", "prediction": "all x.(ProtectivePlate(x) -> (WarmmedOverFingersEndeds(x) & MadeOfKeratin(x)))", "score": 0}
{"id": "eqasc_validation_1720", "prediction": "all x.(ProtectivePlates(x) -> (UrbanDepths(x,y) & FingerExpects(y) & MadeOfKeratin(x)))", "score": 0}
{"id": "eqasc_validation_1720", "prediction": "all x.((ProtectivePlate(x) & EndsOfFingers(x)) -> MadeOfKeratin(x))", "score": 0}
{"id": "eqasc_validation_1720", "prediction": "all x.((ProtectivePlate(x) & EndsOfFingers(x) & MadeOfKeratin(x)) -> MadeOfMadeOfKeratin(x))", "score": 0}
{"id": "eqasc_validation_1720", "prediction": "all x.((ProtectivePlate(x) & OverFingersEnds(x)) -> MadeOfKeratin(x))", "score": 0}
{"id": "eqasc_validation_1720", "prediction": "all x y.((ProtectivePlate(x) & Finger(y)) -> (MakesOfKeratin(x) & MadeOfKeratin(x)))", "score": 0}
{"id": "eqasc_validation_1720", "prediction": "all x.(ProtectivePlates(x) -> MadeOfKeratin(x))", "score": 0}
{"id": "eqasc_validation_1720", "prediction": "all x y.((ProtectivePlate(x) & FingerEdges(y) & MadeOfKeratin(x)) -> ContainingKeratin(x))", "score": 0}
{"id": "eqasc_validation_1720", "prediction": "all x y z.((ProtectivePlate(x) & FingerEnds(y) & Fingers(z)) -> MadeOf(x,keratin))", "score": 0}
{"id": "eqasc_validation_1721", "prediction": "all x.(Stopwatch(x) -> MeasuresTimeOn(x,y))", "score": 0}
{"id": "eqasc_validation_1721", "prediction": "all x y.((Stopwatch(x) & MeasureDate(y)) -> UsedToMeasureTime(x,y))", "score": 0}
{"id": "eqasc_validation_1721", "prediction": "all x y z.((Stopwatch(x) & MeasuresTime(x,y,z)) -> MeasuresTime(x))", "score": 0}
{"id": "eqasc_validation_1721", "prediction": "all x.(Stopwatch(x) -> MeasuresTime(x))", "score": 0}
{"id": "eqasc_validation_1721", "prediction": "all x y.((Stopwatch(x) & MeasuresTime(x,y)) -> UsedToMeasure(x,y))", "score": 0}
{"id": "eqasc_validation_1721", "prediction": "all x y.((Stopwatch(x) & Time(y)) -> Measures(x,y))", "score": 0}
{"id": "eqasc_validation_1721", "prediction": "all x y z w.((Stopwatch(x) & Time(y) & Measure(z)) -> Measures(x,y,z))", "score": 0}
{"id": "eqasc_validation_1721", "prediction": "all x y z.((Stopwatch(x) & Time(y) & Time(z)) -> Measures(x,y,z))", "score": 0}
{"id": "eqasc_validation_1721", "prediction": "all x y z.((Stopwatch(x) & MeasuresTime(y) & Time(z)) -> Measures(x,y,z))", "score": 0}
{"id": "eqasc_validation_1721", "prediction": "all x y.((Stopwatch(x) & MeasuresTime(y)) -> MeasuresTime(x,y))", "score": 0}
{"id": "eqasc_validation_1721", "prediction": "all x y.((Stopwatch(x) & MeasuresTime(y)) -> UsedForTiming(x,y))", "score": 0}
{"id": "eqasc_validation_1721", "prediction": "all x y.((Stopwatch(x) & MeasuresTime(y)) -> UsedToMeasure(x,y))", "score": 0}
{"id": "eqasc_validation_1722", "prediction": "all x y.((Stopwatch(x) & Moment(y)) -> Measure(x,y))", "score": 0}
{"id": "eqasc_validation_1722", "prediction": "all x.(Stopwatch(x) -> UsedToMeasureSeconds(x))", "score": 0}
{"id": "eqasc_validation_1722", "prediction": "all x.(Stopwatch(x) -> MeasuresSeconds(x))", "score": 0}
{"id": "eqasc_validation_1722", "prediction": "all x.(Stopwatch(x) -> IdentifiesSeconds(x))", "score": 0}
{"id": "eqasc_validation_1722", "prediction": "all x.(Stopwatch(x) -> MeasureSeconds(x))", "score": 0}
{"id": "eqasc_validation_1722", "prediction": "all x.((Stopwatch(x) & MeasureSeconds(x)) -> UsedForMetaphor(x))", "score": 0}
{"id": "eqasc_validation_1723", "prediction": "all x.((ReactionTime(x) & MeasuredWithStopwatch(x)) -> (InMinutes(x) | InSeconds(x)))", "score": 0}
{"id": "eqasc_validation_1723", "prediction": "all x.(ReactionTimeMeasuredWithStopwatch(x) -> (Minutes(x) | Seconds(x)))", "score": 0}
{"id": "eqasc_validation_1723", "prediction": "all x.((ReactionTime(x) & Stopwatch(x)) -> (MetaphoringInMinutes(x) & MeasuringWithScores(x)))", "score": 0}
{"id": "eqasc_validation_1723", "prediction": "all x y.((Stopwatch(x) & Minute(y) & Second(y)) -> MeasuredReactionTimeWith(x,y))", "score": 0}
{"id": "eqasc_validation_1723", "prediction": "all x.((Stopwatch(x) & MeasuredReactionTime(x)) -> (InMinutes(x) & InSeconds(x)))", "score": 0}
{"id": "eqasc_validation_1723", "prediction": "all x y.((Stopwatch(x) & ReactionTime(y)) -> MeasuredInMinutesAndSeconds(x,y))", "score": 0}
{"id": "eqasc_validation_1723", "prediction": "all x.((Stopwatch(x) & MeasuringReactionTime(x)) -> (MeasuresReactionTime(x,minutes) & MeasuresReactionTime(x,seconds)))", "score": 0}
{"id": "eqasc_validation_1723", "prediction": "all x.(ReactionTime(x) -> MeasuredWithStopwatchInMinutesAndSeconds(x))", "score": 0}
{"id": "eqasc_validation_1723", "prediction": "all x.(ReactionTime(x) -> (MeasuredInMinutes(x) & MeasuredWithStopwatch(x)))", "score": 0}
{"id": "eqasc_validation_1723", "prediction": "all x.(ReactionTime(x) -> Measuring(x,minutes,seconds))", "score": 0}
{"id": "eqasc_validation_1723", "prediction": "all x y z.((Stopwatch(x) & ReactionTime(y) & Minutes(z) & Seconds(z)) -> MeasuredWith(x,y,z))", "score": 0}
{"id": "eqasc_validation_1723", "prediction": "all x.(ReactionTime(x) -> MeasuredInMinutesAndSeconds(x))", "score": 0}
{"id": "eqasc_validation_1723", "prediction": "all x.((ReactionTime(x) & Stopwatch(x)) -> MessagedInMinutesAndSeconds(x))", "score": 0}
{"id": "eqasc_validation_1723", "prediction": "all x y z.((ReactionTime(x) & Stopwatch(y) & Minute(z) & Second(z)) -> Measuring(x,y,z))", "score": 0}
{"id": "eqasc_validation_1723", "prediction": "all x y.((ReactionTime(x) & Stopwatch(y)) -> MeasuredInMinutesAndSeconds(x,y))", "score": 0}
{"id": "eqasc_validation_1723", "prediction": "all x y.((StepWatch(x) & RespondanceTime(y) & Measuring(x,y)) -> MeasuredInMinutesAndSeconds(x))", "score": 0}
{"id": "eqasc_validation_1724", "prediction": "all x.(Stopwatch(x) -> MeasuresMinutes(x))", "score": 0}
{"id": "eqasc_validation_1724", "prediction": "all x.(Stopwatch(x) -> MeasureMinutes(x))", "score": 0}
{"id": "eqasc_validation_1724", "prediction": "all x.((Stopwatch(x) & MeasuresMinutes(x)) -> MeasuresMinutes(x))", "score": 0}
{"id": "eqasc_validation_1724", "prediction": "all x y.((Stopwatch(x) & Minute(y)) -> Measures(x,y))", "score": 0}
{"id": "eqasc_validation_1724", "prediction": "all x.(Stopwatch(x) -> MeasureMeanMinutes(x))", "score": 0}
{"id": "eqasc_validation_1724", "prediction": "all x.(Putwatch(x) -> MeasuresMinutes(x))", "score": 0}
{"id": "eqasc_validation_1724", "prediction": "all x.(Stopwatch(x) -> CanMeasureMinutes(x))", "score": 0}
{"id": "eqasc_validation_1724", "prediction": "all x y.((Stopwatch(x) & Minute(y)) -> MeasuresMeasurement(x,y))", "score": 0}
{"id": "eqasc_validation_1724", "prediction": "all x.(Arrowwatch(x) -> MeasuresMinutes(x))", "score": 0}
{"id": "eqasc_validation_1724", "prediction": "all x.(Stopwatch(x) -> Measureminutes(x))", "score": 0}
{"id": "eqasc_validation_1725", "prediction": "all x y.((Stopwatch(x) & Minute(y) & Second(y)) -> Measures(x,y))", "score": 0}
{"id": "eqasc_validation_1725", "prediction": "all x y.((Stopwatch(x) & Minutes(y)) -> MeasureMinutesAndSeconds(x,y))", "score": 0}
{"id": "eqasc_validation_1725", "prediction": "all x y z.((Stopwatch(x) & Minutes(y) & Seconds(z)) -> MeasuresWith(x,y,z))", "score": 0}
{"id": "eqasc_validation_1725", "prediction": "all x.(Stopwatch(x) -> MeasuresMinutesAndSeconds(x))", "score": 0}
{"id": "eqasc_validation_1725", "prediction": "all x y z.((Stopwatch(x) & Minute(y) & Second(z)) -> (MeasuresMinutesAndSeconds(x,y) & MeasuresMinutesAndSeconds(x,z)))", "score": 0}
{"id": "eqasc_validation_1725", "prediction": "all x.(Stopwatch(x) -> (MeasuresMinutes(x) & MeasuresSeconds(x)))", "score": 0}
{"id": "eqasc_validation_1725", "prediction": "all x.(Stopwatch(x) -> (MeasureMinutes(x) & MeasureSeconds(x)))", "score": 0}
{"id": "eqasc_validation_1725", "prediction": "all x y z.((Stopwatch(x) & Minutes(y) & Seconds(z)) -> Measures(x,y,z))", "score": 0}
{"id": "eqasc_validation_1725", "prediction": "all x y.((Stopwatch(x) & Minute(y)) -> MeasureMeaning(x,y))", "score": 0}
{"id": "eqasc_validation_1726", "prediction": "all x.(Stopwatch(x) -> MeasuresSeconds(x))", "score": 0}
{"id": "eqasc_validation_1726", "prediction": "all x.(Stopwatch(x) -> UsedToMeasureSeconds(x))", "score": 0}
{"id": "eqasc_validation_1726", "prediction": "all x y.((Stopwatch(x) & Second(y)) -> Measure(x,y))", "score": 0}
{"id": "eqasc_validation_1726", "prediction": "all x y.((Stopwatch(x) & Second(y)) -> UsedToMeasure(x,y))", "score": 0}
{"id": "eqasc_validation_1726", "prediction": "all x.(Stopwatch(x) -> MeasureSeconds(x))", "score": 0}
{"id": "eqasc_validation_1726", "prediction": "all x y.((Stopwatch(x) & Moment(y)) -> Measure.(x,y))", "score": -1}
{"id": "eqasc_validation_1727", "prediction": "all x.(Time(x) -> (WithTimes(x) | WithItimes(x)))", "score": 0}
{"id": "eqasc_validation_1727", "prediction": "all x y.((Time(x) &(Time(y) | Itime(y))) -> AvailableWith(x,y))", "score": 0}
{"id": "eqasc_validation_1727", "prediction": "all x.(Time(x) -> ((Time(x) | Itimes(x))))", "score": 0}
{"id": "eqasc_validation_1727", "prediction": "all x y.((Time(x) & (Time(y) | ITime(y))) -> AvailableWith(x,y))", "score": 0}
{"id": "eqasc_validation_1727", "prediction": "all x y.((Time(x) & Second(y)) -> (DependsWithTime(x,y) | DependsWithItimes(x,y)))", "score": 0}
{"id": "eqasc_validation_1727", "prediction": "all x y.((Time(x) & (Time(y) | Itime(y))) -> AvailableWith(x,y))", "score": 0}
{"id": "eqasc_validation_1727", "prediction": "all x y.((Time(x) & (Time(y) | Itime(y))) -> AvailableWithDate(x,y))", "score": 0}
{"id": "eqasc_validation_1727", "prediction": "all x.(Time(x) -> (Time(x) | Itimes(x)))", "score": 0}
{"id": "eqasc_validation_1727", "prediction": "all x.(TimeInSeconds(x) -> (ForMen(x) | ForDays(x)))", "score": 0}
{"id": "eqasc_validation_1727", "prediction": "exists x y.(Time(x) &(Time(y) | Itime(y)))", "score": 0}
{"id": "eqasc_validation_1727", "prediction": "all x y.((Time(x) & (Time(y) | Itimes(y))) -> Available(x,y))", "score": 0}
{"id": "eqasc_validation_1727", "prediction": "all x.(TimeInSeconds(x) -> (TimeInSeconds(x) | iTimes(x)))", "score": 0}
{"id": "eqasc_validation_1727", "prediction": "all x.(Time(x) -> (Time(x) | itimes(x)))", "score": 0}
{"id": "eqasc_validation_1727", "prediction": "all x.(TimeInSeconds(x) -> (Times(x) | Itimes(x)))", "score": 0}
{"id": "eqasc_validation_1727", "prediction": "exists x.(Time(x) & (Lost(x) | Itimes(x)))", "score": 0}
{"id": "eqasc_validation_1728", "prediction": "all x.(Stopwatch(x) -> MeasuresSeconds(x))", "score": 0}
{"id": "eqasc_validation_1728", "prediction": "all x y.((Stopwatch(x) & MeasuresSeconds(y,x)) -> UsedTomeasure(x,y))", "score": 0}
{"id": "eqasc_validation_1728", "prediction": "all x.(Stopwatch(x) -> MeasureSeconds(x))", "score": 0}
{"id": "eqasc_validation_1728", "prediction": "all x y.((Stopwatch(x) & MeasuresSeconds(x)) -> UsedToMeasureSeconds(x))", "score": 0}
{"id": "eqasc_validation_1728", "prediction": "all x y.((Stopwatch(x) & Seconds(y)) -> Contains(x,y))", "score": 0}
{"id": "eqasc_validation_1728", "prediction": "all x y.((Stopwatch(x) & EndTime(y)) -> MeasuresSeconds(x,y))", "score": 0}
{"id": "eqasc_validation_1728", "prediction": "all x y z.((Stopwatch(x) & Seconds(y) & Seconds(z)) -> Measures(x,y,z))", "score": 0}
{"id": "eqasc_validation_1728", "prediction": "all x y.((Stopwatch(x) & Moment(y)) -> MeasureSeconds(x,y))", "score": 0}
{"id": "eqasc_validation_1728", "prediction": "all x y.((Stopwatch(x) & Time(y)) -> MeasuresSeconds(x,y))", "score": 0}
{"id": "eqasc_validation_1728", "prediction": "all x y.((Intervention(x) & Stopwatch(y) & MeasuresSeconds(y,x)) -> UsedToMeasure(y,x))", "score": 0}
{"id": "eqasc_validation_1728", "prediction": "all x y.((Stopwatch(x) & MeasuresSeconds(y)) -> UsefulToMeasure(x,y))", "score": 0}
{"id": "eqasc_validation_1728", "prediction": "all x y.((Stopwatch(x) & Seconds(y)) -> Measures(x,y))", "score": 0}
{"id": "eqasc_validation_1729", "prediction": "all x.(Time(x) -> (MeasuresWithClock(x) | MeasuresWithWatch(x)))", "score": 0}
{"id": "eqasc_validation_1729", "prediction": "all x y.((Time(x) & (Clock(y) | Watch(y))) -> Measures(x,y))", "score": 0}
{"id": "eqasc_validation_1729", "prediction": "all x.(Time(x) -> (MeasuresWith(x,clock) | MeasuresWith(x,watch)))", "score": 0}
{"id": "eqasc_validation_1729", "prediction": "all x.(Time(x) -> (MeasuredWithClock(x) | MeasuredWithWatch(x)))", "score": 0}
{"id": "eqasc_validation_1729", "prediction": "all x.(Time(x) -> (Magnifies(x,Clock) | Measures(x,Watch)))", "score": 0}
{"id": "eqasc_validation_1729", "prediction": "all x y.((Time(x) & (Clock(y) | Watch(y))) -> MeasuredWith(x,y))", "score": 0}
{"id": "eqasc_validation_1729", "prediction": "all x y.((Time(x) & (Clock(y) | Watch(y))) -> Measurable(x,y))", "score": 0}
{"id": "eqasc_validation_1729", "prediction": "all x y.((Time(x) & Clock(y)) | Watch(y)) -> Measures(x,y))", "score": -1}
{"id": "eqasc_validation_1729", "prediction": "all x.(MeasuresTime(x) -> ((Clock(x) | Watch(x)) | BuiltWith(x,x)))", "score": 0}
{"id": "eqasc_validation_1729", "prediction": "all x.(Time(x) -> (MeasuredWith(x,clock) | MeasuredWithWatch(x,watch)))", "score": 0}
{"id": "eqasc_validation_1729", "prediction": "all x y.((Time(x) & (Clock(y) | Watch(y))) -> Measurement(x,y))", "score": 0}
{"id": "eqasc_validation_1729", "prediction": "all x y.((Time(x) & (Clock(y) | Watch(y))) -> Measured(x,y))", "score": 0}
{"id": "eqasc_validation_1730", "prediction": "all x y.((Time(x) & Watch(y)) -> KeepsWith(x,y))", "score": 0}
{"id": "eqasc_validation_1730", "prediction": "all x y z.((Time(x) & Watch(y) & Watch(z)) -> KeepingWith(x,y,z))", "score": 0}
{"id": "eqasc_validation_1730", "prediction": "all x.(Time(x) -> UsedWithWatchWatch(x))", "score": 0}
{"id": "eqasc_validation_1730", "prediction": "all x.(Time(x) -> (KeepingWithWatch(x) | KeepingWithWave(x)))", "score": 0}
{"id": "eqasc_validation_1730", "prediction": "all x.(Time(x) -> (KeepingWithWatch(x) & TimeKeepsWithWatch(x)))", "score": 0}
{"id": "eqasc_validation_1730", "prediction": "(All x,y) -> TimeWithWatch(x))", "score": -1}
{"id": "eqasc_validation_1730", "prediction": "all x y.((Time(x) & Watch(y)) -> (KeepsWith(x,y) & Watch(z)))", "score": 0}
{"id": "eqasc_validation_1730", "prediction": "all x.(Time(x) -> Watch(x).)", "score": -1}
{"id": "eqasc_validation_1730", "prediction": "all x.((Time(x) & WearsWatch(x)) -> KeepsWith(x,watch))", "score": 0}
{"id": "eqasc_validation_1730", "prediction": "all x.(Time(x) -> Watch(x))", "score": 0}
{"id": "eqasc_validation_1730", "prediction": "all x y z.((Time(x) & Watch(y) & Watch(z)) -> (MaintainsWith(x,y,z) & Watch(y,z)))", "score": 0}
{"id": "eqasc_validation_1730", "prediction": "all x y z.((Time(x) & Watch(y) & Watch(z)) -> KeepsWith(x,y,z))", "score": 0}
{"id": "eqasc_validation_1730", "prediction": "all x.((Time(x) & Watch(x)) -> KeepsWithTime(x))", "score": 0}
{"id": "eqasc_validation_1730", "prediction": "all x y.((Time(x) & Watch(y)) -> IntertwinedWith(x,y))", "score": 0}
{"id": "eqasc_validation_1731", "prediction": "all x.((Timing(x) & Punctuality(x)) -> Essence(x))", "score": 0}
{"id": "eqasc_validation_1731", "prediction": "all x y.((Time(x) & Species(y)) -> Punctuality(x))", "score": 0}
{"id": "eqasc_validation_1731", "prediction": "all x.(Time(x) -> Pointuality(x))", "score": 0}
{"id": "eqasc_validation_1731", "prediction": "all x.(Timing(x) -> EtheismOfPunctuality(x))", "score": 0}
{"id": "eqasc_validation_1731", "prediction": "all x.(Time(x) -> ImpeccablePunctuality(x))", "score": 0}
{"id": "eqasc_validation_1731", "prediction": "all x.(Timing(x) -> Punctuality(x))", "score": 0}
{"id": "eqasc_validation_1731", "prediction": "all x.(Timing(x) -> EthicalPunctuality(x))", "score": 0}
{"id": "eqasc_validation_1731", "prediction": "all x.((Time(x) & EssenceOfPunctuality(x)) -> Timing(x))", "score": 0}
{"id": "eqasc_validation_1731", "prediction": "(EssenceOfPunctuality(Timing) & -EssenceOfPunctuality(Timing))", "score": 0}
{"id": "eqasc_validation_1731", "prediction": "all x.(Timing(x) -> EtiquetteOfPunctuality(x))", "score": 0}
{"id": "eqasc_validation_1731", "prediction": "all x.(Timing(x) -> PurposeOfPunctuality(x))", "score": 0}
{"id": "eqasc_validation_1731", "prediction": "all x y.(( Timing(x) & Punctuality(y)) -> Esteem(x,y))", "score": 0}
{"id": "eqasc_validation_1731", "prediction": "all x.(Timing(x) -> EthicOfPunctuality(x))", "score": 0}
{"id": "eqasc_validation_1731", "prediction": "all x.(Timing(x) -> (EssenceOfPunctuality(x)))", "score": 0}
{"id": "eqasc_validation_1732", "prediction": "all x y z.((Stopwatch(x) & Person(y) & Person(z)) -> HelpsBePunktual(x,y,z))", "score": 0}
{"id": "eqasc_validation_1732", "prediction": "all x y.((Stopwatch(x) & Person(y)) -> HelpsBePunctual(x,y))", "score": 0}
{"id": "eqasc_validation_1732", "prediction": "all x.(Stopwatch(x) -> HelpsPeopleBePunctual(x))", "score": 0}
{"id": "eqasc_validation_1732", "prediction": "all x.(Stopwatch(x) -> HelpsPersuasivePersuasion(x))", "score": 0}
{"id": "eqasc_validation_1732", "prediction": "all x y.((Startwatch(x) & People(y)) -> HelpsBePunctual(x,y))", "score": 0}
{"id": "eqasc_validation_1732", "prediction": "all x y z.((Stopwatch(x) & Person(y) & Punctual(z)) -> HelpsPunctual(x,y,z))", "score": 0}
{"id": "eqasc_validation_1732", "prediction": "all x y z.((Stopwatch(x) & Person(y) & Punctual(z)) -> HelpsBePunctual(x,y,z))", "score": 0}
{"id": "eqasc_validation_1732", "prediction": "all x y z.((Stopwatch(x) & Person(y) & Person(z)) -> HelpsBePunctual(x,y,z))", "score": 0}
{"id": "eqasc_validation_1732", "prediction": "all x y.((Stopwatch(x) & People(y)) -> HelpsBePunctual(x,y))", "score": 0}
{"id": "eqasc_validation_1733", "prediction": "all x.(KidneyFailure(x) -> MayTreatWithDialysis(x))", "score": 0}
{"id": "eqasc_validation_1733", "prediction": "all x y.((KinneyFailure(x) & Dialysis(y)) -> Treats(x,y))", "score": 0}
{"id": "eqasc_validation_1733", "prediction": "all x.(KinneyFailure(x) -> MayBeTreatedWithDialysis(x))", "score": 0}
{"id": "eqasc_validation_1733", "prediction": "all x.(KinneyFailure(x) -> Treatment(x,Dialysis))", "score": 0}
{"id": "eqasc_validation_1733", "prediction": "all x.(KinneyFailure(x) -> (TreatWithDialysis(x)))", "score": 0}
{"id": "eqasc_validation_1733", "prediction": "all x.(KinneyFailure(x) -> MayBeTreateWithDialysis(x))", "score": 0}
{"id": "eqasc_validation_1733", "prediction": "all x.(KidneyFailure(x) -> TrainedWithDialysis(x))", "score": 0}
{"id": "eqasc_validation_1733", "prediction": "all x.(KidneyFall(x) -> (TreatDialysis(x) | TreatDialysis(x)))", "score": 0}
{"id": "eqasc_validation_1733", "prediction": "all x.(KinneyFailure(x) -> TreatedWithDialysis(x))", "score": 0}
{"id": "eqasc_validation_1733", "prediction": "all x.(KidneyFailure(x) -> (TreatedWithDialysis(x)))", "score": 0}
{"id": "eqasc_validation_1733", "prediction": "all x.(KidneyFailure(x) -> MayBeTreatedWithDialysis(x))", "score": 2}
{"id": "eqasc_validation_1733", "prediction": "all x.(KinneyFailure(x) -> TreatmentWithDialysis(x))", "score": 0}
{"id": "eqasc_validation_1733", "prediction": "all x.(KinneyFailure(x) -> (TreatmentsWithDialysis(x)))", "score": 0}
{"id": "eqasc_validation_1733", "prediction": "all x.(KidneyFailure(x) -> TreatableWithDialysis(x))", "score": 0}
{"id": "eqasc_validation_1734", "prediction": "all x.(Dialysis(x) -> (CleansBloodWithArtificialKneel(x)))", "score": 0}
{"id": "eqasc_validation_1734", "prediction": "all x.(Dialysis(x) -> (CleaningBloodWithArtificialKneel(x)))", "score": 0}
{"id": "eqasc_validation_1734", "prediction": "all x.(Dialysis(x) -> (CleansBrainWithArtificialKneedle(x)))", "score": 0}
{"id": "eqasc_validation_1734", "prediction": "all x.(Dialysis(x) -> (CleansBloodWithArtificialKnee(x)))", "score": 0}
{"id": "eqasc_validation_1734", "prediction": "all x y.((Dialysis(x) & ArtificialKnee(y)) -> CleansBloodWith(x,y))", "score": 0}
{"id": "eqasc_validation_1734", "prediction": "all x.(Dialysis(x) -> (CleansBloodWithArtificialKnee(x) & UsesArtificialKneel(x)))", "score": 0}
{"id": "eqasc_validation_1734", "prediction": "all x.(Dialysis(x) -> (CleansLiver(x) & HasArtificialKneel(x)))", "score": 0}
{"id": "eqasc_validation_1734", "prediction": "all x.(Dialysis(x) -> (CleanMyBloodWithArtificialKind(x) & Water-Scrubbing(x)))", "score": -1}
{"id": "eqasc_validation_1734", "prediction": "all x.(Dialysis(x) -> CleansBloodWithArtificialKneep(x))", "score": 0}
{"id": "eqasc_validation_1734", "prediction": "all x y.((Dialysis(x) & Kidney(y)) -> (CleansBlood(x,y) & WithArtificial(x,y)))", "score": 0}
{"id": "eqasc_validation_1734", "prediction": "all x.(Dialysis(x) -> (Cleaning(x) & OrganizedKnyan(x)))", "score": 0}
{"id": "eqasc_validation_1734", "prediction": "all x y.((Dialysis(x) & ArtificialKnee(y)) -> CleansBlood(x,y))", "score": 0}
{"id": "eqasc_validation_1734", "prediction": "all x y.((Dialysis(x) & ArtificialKneel(y)) -> CleansBloodWith(x,y))", "score": 0}
{"id": "eqasc_validation_1734", "prediction": "all x.(Dialysis(x) -> (CleanBloodWithArtificialKneel(x) & CleanBloodWithArtificialKneel(x)))", "score": 0}
{"id": "eqasc_validation_1735", "prediction": "all x.(KinneyFailure(x) -> (CleathesBlood(x) & UsesArtificialKneep(x)))", "score": 0}
{"id": "eqasc_validation_1735", "prediction": "all x y.((KidneyFailure(x) & Kidney(y) & CleansBloodWithArtificialKnee(x)) -> TreadsWithArtificialKnee(x,y))", "score": 0}
{"id": "eqasc_validation_1735", "prediction": "all x y.((KidneyFailure(x) & ArtificialKidney(y)) -> (CoolsBlood(x,y) & UsesArtificialKidney(x)))", "score": 0}
{"id": "eqasc_validation_1735", "prediction": "all x y.((Diagnosis(x) & KidneyFailure(y)) -> (CoolsBloodWithArtificialKnee(x) & ArtificialKnee(y)))", "score": 0}
{"id": "eqasc_validation_1735", "prediction": "all x y z.((KidneyFailure(x) & Blood(y) & ArtificialKidney(z)) -> (CleanBreath(x,y,z) & CleanArtificialKidney(x,y,z)))", "score": 0}
{"id": "eqasc_validation_1735", "prediction": "all x y.((KidneyFailure(x) & Kidney(y)) -> (CleaningBloodWithArtificialKind(x,y)|Treats(x,y)))", "score": 0}
{"id": "eqasc_validation_1735", "prediction": "all x y z.((KinneyFailure(x) & Blood(y) & ArtificialKnee(z)) -> (CleanBlood(x,y,z) | TreatKickenFailure(x,y)))", "score": 0}
{"id": "eqasc_validation_1735", "prediction": "all x y.((KidneyFailure(x) & ArtificialKnead(y)) -> (CleaningBlood(x) | TreatmentWithArtificialKnead(x,y)))", "score": 0}
{"id": "eqasc_validation_1735", "prediction": "all x.(KinneyFailure(x) -> (CleanBloodWithArtificialKnee(x) & RemoveAbsorbedBlood(x)))", "score": 0}
{"id": "eqasc_validation_1735", "prediction": "all x y.((KinneyFailure(x) & ArtificialKnee(y)) -> (CoolBloodWithArtificialKnee (y) & CatalyzeBloodWithArtificialKnee(x,y)))", "score": 0}
{"id": "eqasc_validation_1735", "prediction": "all x y z.((KinneyFailure(x) & ArtificialKneep(y) & BloodCleaning(z) & CleansWith(x,y,z)) -> Treatment(x))", "score": 0}
{"id": "eqasc_validation_1735", "prediction": "all x.(KinneyFailure(x) -> (CanBeTreatedByCleaningBlood(x,artificialKnee(x) & TreatmentWithArtificialKnee(x)))", "score": -1}
{"id": "eqasc_validation_1735", "prediction": "all x.(KinneyFailure(x) -> (CleaningBloodWithArtificialKnee(x) & OperatesSeedlessly(x)))", "score": 0}
{"id": "eqasc_validation_1735", "prediction": "all x.(KinneyFailure(x) -> (PrimariesBlood(x) & UsesArtificialKneep(x)))", "score": 0}
{"id": "eqasc_validation_1735", "prediction": "all x.(KidneyFailure(x) -> ((CleaningBloodWithArtificialKind(x) & ArtificialKnee(x)) | (CleaningBloodWithArtificialKneel(x)) & Treatment(x,KindneyFailure))))", "score": -1}
{"id": "eqasc_validation_1735", "prediction": "all x.(KinneyFailure(x) & CaresByPleasingBloodWithArtificialKnee(x))", "score": 0}
{"id": "eqasc_validation_1736", "prediction": "all x.(KneepFailure(x) -> (CanCleanBlood(x) & NoWater(x)))", "score": 0}
{"id": "eqasc_validation_1736", "prediction": "all x.((KneepFailure(x) & CleansBlood(x)) -> MayBeTreatedWith(x,cleansBlood).", "score": -1}
{"id": "eqasc_validation_1736", "prediction": "all x.((KnephronFailure(x) & CleanBlood(x)) -> MayBeTreatedWithBloodCleaning(x))", "score": 0}
{"id": "eqasc_validation_1736", "prediction": "all x.(KneepFailureTreatment(x) -> CleaningBlood(x))", "score": 0}
{"id": "eqasc_validation_1736", "prediction": "all x.(KneeperFailure(x) -> (CleaningBlood(x) | Treatment(x)))", "score": 0}
{"id": "eqasc_validation_1736", "prediction": "all x.(NephronFailure(x) -> CanBeTreatedWithLivestockCleaning(x))", "score": 0}
{"id": "eqasc_validation_1736", "prediction": "all x.((KneepFailure(x) & WayOfCleaningBlood(x)) -> MayBeTreated(x))", "score": 0}
{"id": "eqasc_validation_1736", "prediction": "all x y.((KneephFailure(x) & WayOfCleaningBlood(x)) -> MayBeTreat(x,y))", "score": 0}
{"id": "eqasc_validation_1736", "prediction": "all x.(NephronFailure(x) -> (CoolsBlood(x) & Cleansblood(x)))", "score": 0}
{"id": "eqasc_validation_1736", "prediction": "all x y.((KneepFailure(x) & WayOfCleaningBlood(x,y)) -> MayBeTreatedWith(x,y))", "score": 0}
{"id": "eqasc_validation_1736", "prediction": "all x.(KnebFailure(x) -> (SeasuringBlood(x) | CleansBlood(x)))", "score": 0}
{"id": "eqasc_validation_1736", "prediction": "all x.(KneeFailures(x) -> (CleanbloodGuidance(x),y) & KidneyFailure(y)))", "score": -1}
{"id": "eqasc_validation_1736", "prediction": "all x y.((KneefFailure(x) & WayOfCleaningBlood(x)) -> MayBeTreatedWith(x,y))", "score": 0}
{"id": "eqasc_validation_1736", "prediction": "all x y.((KneepFailure(x) & HowToCleanBlood(x)) -> MayBeTreatedWith(x,y))", "score": 0}
{"id": "eqasc_validation_1736", "prediction": "all x.((KneepFailure(x) & CleansBlood(x)) -> IntestinalTreatment(x))", "score": 0}
{"id": "eqasc_validation_1736", "prediction": "all x.(KneepFailure(x) -> MayBeProcededWithCleaningBlood(x))", "score": 0}
{"id": "eqasc_validation_1737", "prediction": "all x y.((Dialysis(x) & Blood(y)) -> Filters(x,y))", "score": 0}
{"id": "eqasc_validation_1737", "prediction": "all x.(Dialysis(x) -> (FilterBlood(x) | FilterBlood(x)))", "score": 0}
{"id": "eqasc_validation_1737", "prediction": "all x.(Dialysis(x) -> FiltersBlood(x))", "score": 0}
{"id": "eqasc_validation_1737", "prediction": "all x.(Dialysis(x) -> (FilterBiota(x) & FilterBlood(x)))", "score": 0}
{"id": "eqasc_validation_1737", "prediction": "all x.(Dialysis(x) -> (FiltsBlood(x) & FiltersBlood(x)))", "score": 0}
{"id": "eqasc_validation_1737", "prediction": "all x.(Dialysis(x) -> FiltratesBlood(x))", "score": 0}
{"id": "eqasc_validation_1737", "prediction": "all x.(Dialysis(x) -> FilterBlood(x))", "score": 0}
{"id": "eqasc_validation_1737", "prediction": "all x.(Dialysis(x) -> (ProcedureToFilterBlood(x)))", "score": 0}
{"id": "eqasc_validation_1737", "prediction": "all x y.((Dialysis(x) & Blood(y)) -> Filter(x,y))", "score": 0}
{"id": "eqasc_validation_1737", "prediction": "all x.(Dialysis(x) -> (FilterBlood(x) & FiltersBlood(x)))", "score": 0}
{"id": "eqasc_validation_1737", "prediction": "all x.(Dialysis(x) -> (MathematicaToFilterBlood(x)))", "score": 0}
{"id": "eqasc_validation_1737", "prediction": "all x.(Dialysis(x) -> (FiltsBlood(x) & FindsFloat(x)))", "score": 0}
{"id": "eqasc_validation_1738", "prediction": "all x.(KinneyFailure(x) -> MayTreatWithFilterBlood(x))", "score": 0}
{"id": "eqasc_validation_1738", "prediction": "all x.(KidneyFailure(x) -> TreadsByFilteringBlood(x))", "score": 0}
{"id": "eqasc_validation_1738", "prediction": "all x y.(KidneyFailure(x) -> (Threat(y) & Filter(x,y)))", "score": 0}
{"id": "eqasc_validation_1738", "prediction": "all x y.((KinneyFailure(x) & Procedure(y)) -> CanTreatWithFreeBlood(x,y))", "score": 0}
{"id": "eqasc_validation_1738", "prediction": "all x.(KinneyFailure(x) -> (ProcedureToFilterBlood(x)))", "score": 0}
{"id": "eqasc_validation_1738", "prediction": "all x y.((KidneyFailure(x) & Procedure(y)) -> Treats(x,y))", "score": 0}
{"id": "eqasc_validation_1738", "prediction": "all x.(KinneyFailure(x) -> (TreatsWithPositiveDiagnosis(x) & FiltersBlood(x)))", "score": 0}
{"id": "eqasc_validation_1738", "prediction": "all x.(KidneyFailure(x) -> Treatment(x))", "score": 0}
{"id": "eqasc_validation_1738", "prediction": "all x.(KinneyFailure(x) -> (PurelyTreatsWithBloodFilter(x)))", "score": 0}
{"id": "eqasc_validation_1738", "prediction": "all x.(KinneyFailure(x) -> MayBeTreatedWithFilterBlood(x))", "score": 0}
{"id": "eqasc_validation_1738", "prediction": "all x.(KinneyFailure(x) -> (TreatsBloodWithProcedure(x)))", "score": 0}
{"id": "eqasc_validation_1738", "prediction": "all x.(KidneyFailure(x) -> (TreatProcedure(x) & FiltersBlood(x)))", "score": 0}
{"id": "eqasc_validation_1738", "prediction": "all x.(KinneyFailure(x) -> (TreatmentWithProcedure(x) & Filters(x)))", "score": 0}
{"id": "eqasc_validation_1738", "prediction": "all x.(KinneyFailure(x) -> (TreatsBlood(x) & FiltersBlood(x)))", "score": 0}
{"id": "eqasc_validation_1738", "prediction": "all x.(KidneyFailure(x) -> (TreatmentToFilterBlood(x)))", "score": 0}
{"id": "eqasc_validation_1738", "prediction": "all x.(KinneyFailure(x) -> FilterBlood(x))", "score": 0}
{"id": "eqasc_validation_1739", "prediction": "all x y.((Kinney(x) | RenalFailure(x)) -> (IncapabilityToDoJob(y) & Kidney(x,y)))", "score": 0}
{"id": "eqasc_validation_1739", "prediction": "all x.(KinneyFailure(x) -> (InabilityToDoJob(x) & InabilityToDoJob(x)))", "score": 0}
{"id": "eqasc_validation_1739", "prediction": "all x.(Kinney(x) -> (InabilityToDoJob(x) & DoesJob(x)))", "score": 0}
{"id": "eqasc_validation_1739", "prediction": "all x.(KneeneyFailure(x) -> (IncapabilityToDoJob(x) & KidneyChance(x)))", "score": 0}
{"id": "eqasc_validation_1739", "prediction": "all x.(KidneyOfFailure(x) -> InabilityToDoJob(x))", "score": 0}
{"id": "eqasc_validation_1739", "prediction": "all x.(Kidney(x) | RenalFailure(x)) -> InabilityToDojob(x))", "score": -1}
{"id": "eqasc_validation_1739", "prediction": "(KidneyFailure(Kinney) | RenalFailure(Kinney)) -> Inability(Kinneys))", "score": -1}
{"id": "eqasc_validation_1739", "prediction": "all x.(Kidney(x) -> (InabilityToDoJob(x) & Kidney(x)))", "score": 0}
{"id": "eqasc_validation_1739", "prediction": "all x.(Kinney(x) | RenalFailure(x))", "score": 0}
{"id": "eqasc_validation_1739", "prediction": "all x.(KinneyFisher(x) -> (InabilityOfDiagnosis(x) & Kidney(x)))", "score": 0}
{"id": "eqasc_validation_1739", "prediction": "all x.((Kinney(x) | RenalFailure(x)) -> InabilityToDoJob(x))", "score": 0}
{"id": "eqasc_validation_1739", "prediction": "all x y.((Kinney(x) & RenalFailure(y)) -> InabilityToDoJob(x))", "score": 0}
{"id": "eqasc_validation_1739", "prediction": "all x y.((Kidney(x) | RenalFailure(x)) -> InabilityToDoJob(y))", "score": 0}
{"id": "eqasc_validation_1739", "prediction": "all x.(Kinney(x) -> (InabilityToDoJob(x) & Kidney(x)))", "score": 0}
{"id": "eqasc_validation_1739", "prediction": "all x.(KynneyFailure(x) -> (InabilityToDoJob(x) | InabilityToDoJob(x)))", "score": 0}
{"id": "eqasc_validation_1740", "prediction": "all x y.((Dialysis(x) & Patient(y)) -> Treat(x,y))", "score": 0}
{"id": "eqasc_validation_1740", "prediction": "all x y z.((Dialysis(x) & Patient(y) & RenalFailure(z)) -> Treatable(x,y,z))", "score": 0}
{"id": "eqasc_validation_1740", "prediction": "all x.(Dialysis(x) -> TreatsRenalFailure(x))", "score": 0}
{"id": "eqasc_validation_1740", "prediction": "all x.(Dialysis(x) -> TreatsRadicalFailure(x))", "score": 0}
{"id": "eqasc_validation_1740", "prediction": "all x y.((Dialysis(x) & Patient(y) & RenalFailure(y)) -> UsedToTreat(x,y))", "score": 0}
{"id": "eqasc_validation_1740", "prediction": "all x.(Dialysis(x) -> TreatsRelevantFailure(x))", "score": 0}
{"id": "eqasc_validation_1740", "prediction": "all x.(Dialysis(x) -> (TreatsPatientsWithRetinalFailure(x)))", "score": 0}
{"id": "eqasc_validation_1740", "prediction": "all x y z.((Dialysis(x) & Patient(y) & RenalFailure(z)) -> UsedToTreat(x,y,z))", "score": 0}
{"id": "eqasc_validation_1740", "prediction": "all x.(Dialysis(x) -> (SeemedToTreatRetinalFailure(x) | SeemedToTreatRetinalFailure(x)))", "score": 0}
{"id": "eqasc_validation_1740", "prediction": "all x.(Dialysis(x) -> TreatsRainfailant(x))", "score": 0}
{"id": "eqasc_validation_1740", "prediction": "all x y.((Dialysis(x) & Patient(y) & RenalFailure(y)) -> Treatment(x,y))", "score": 0}
{"id": "eqasc_validation_1740", "prediction": "all x.(Dialysis(x) -> UsedToTreatRelevantFailure(x))", "score": 0}
{"id": "eqasc_validation_1740", "prediction": "all x y.((Dialysis(x) & Patient(y) & Transplant(x,y)) -> TreatsRetinalFailure(x,y))", "score": 0}
{"id": "eqasc_validation_1740", "prediction": "all x.(Dialysis(x) -> TreatsRetinalFailure(x))", "score": 0}
{"id": "eqasc_validation_1740", "prediction": "all x.(Dialysis(x) -> (TreatsPatientsWithRenalFailure(x)))", "score": 0}
{"id": "eqasc_validation_1741", "prediction": "all x.(KinneyFailure(x) -> (TreatsToFilterBlood(x) & TreatsThroughProcedure(x)))", "score": 0}
{"id": "eqasc_validation_1741", "prediction": "all x.(KinneyFailure(x) -> (TreatmentToFilterBlood(x) & ImprovesBloodFlow(x)))", "score": 0}
{"id": "eqasc_validation_1741", "prediction": "all x y.((KidneyFailure(x) & Procedure(y) & FiltersBlood(y)) -> Treats(x,y))", "score": 0}
{"id": "eqasc_validation_1741", "prediction": "all x y.((KinneyFailure(x) & Procedure(y)) -> (TreatsWithInfection(x,y) & FiltersBlood(y)))", "score": 0}
{"id": "eqasc_validation_1741", "prediction": "all x.(KinneyFailure(x) -> (TreatByProcedure(x) & FilterBlood(x)))", "score": 0}
{"id": "eqasc_validation_1741", "prediction": "all x.(KidneyFailure(x) -> (Treatment(x) & FilterBlood(x)))", "score": 0}
{"id": "eqasc_validation_1741", "prediction": "all x.(KidneyFailure(x) -> (TreatmentWithProcedure(x) & FiltersBlood(x)))", "score": 0}
{"id": "eqasc_validation_1741", "prediction": "all x.(KinneyFailure(x) -> (FilterBlood(x) & TreatKinneyFailure(x)))", "score": 0}
{"id": "eqasc_validation_1741", "prediction": "all x.(KidneyFiction(x) -> (TreatsWithPurposeToFilterBlood(x)))", "score": 0}
{"id": "eqasc_validation_1741", "prediction": "all x.(KidneyFailure(x) -> (TreatThroughProcedure(x) & FilterBlood(x)))", "score": 0}
{"id": "eqasc_validation_1741", "prediction": "all x.(KinneyFailure(x) -> (TreatmentWithProcedure(x) & FilterBlood(x)))", "score": 0}
{"id": "eqasc_validation_1741", "prediction": "all x y.((KinneyFailure(x) & Procedure(y) & FiltersBlood(y)) -> MayBeTreatedWithWith(x,y))", "score": 0}
{"id": "eqasc_validation_1741", "prediction": "all x.(KidneyFailure(x) -> mayBeTreatedWithProcedureToFilterBlood(x))", "score": 0}
{"id": "eqasc_validation_1741", "prediction": "all x y.((KidneyFailure(x) & Procedure(y) & FiltersBlood(x)) -> Treats(x,y))", "score": 0}
{"id": "eqasc_validation_1741", "prediction": "all x y.((KinneyFailure(x) & Procedure(y)) -> Treatment(x,y))", "score": 0}
{"id": "eqasc_validation_1741", "prediction": "all x.(KinneyFailure(x) -> (CanBeTreatedWithProcedureToFilterBlood(x)))", "score": 0}
{"id": "eqasc_validation_1742", "prediction": "all x.(Dialysis(x) -> PossiblyNecessaryToFilterBlood(x))", "score": 0}
{"id": "eqasc_validation_1742", "prediction": "all x y.((Dialysis(x) & BloodTrain(y)) -> NerdToFilter(x,y))", "score": 0}
{"id": "eqasc_validation_1742", "prediction": "exists x.(Dialysis(x) & Necessary(x))", "score": 0}
{"id": "eqasc_validation_1742", "prediction": "all x.(Dialysis(x) -> MightNecessaryToFilterBlood(x))", "score": 0}
{"id": "eqasc_validation_1742", "prediction": "all x.(Dialysis(x) -> (Necessary(x,FilterBlood) & FilterBlood(x)))", "score": 0}
{"id": "eqasc_validation_1742", "prediction": "all x.((Dialysis(x) & FiltersHasBlood(x)) -> NeededFor(x,Dialysis,Blood))", "score": 0}
{"id": "eqasc_validation_1742", "prediction": "all x y z.((Dialysis(x) & Blood(y) & Blood(z)) -> (NecessaryToFilter(x,y,z) | NecessaryToFilter(x,y,z)))", "score": 0}
{"id": "eqasc_validation_1742", "prediction": "all x y z.((Dialysis(x) & Blood(y) & Blood(z)) -> (NecessaryToFilter(x,y,z) & Filters(x,y)))", "score": 0}
{"id": "eqasc_validation_1742", "prediction": "all x y.((Dialysis(x) & Blood(y)) -> (NecessaryToFilter(x,y) | NecessaryToFilter(x,y)))", "score": 0}
{"id": "eqasc_validation_1742", "prediction": "all x.(Dialysis(x) -> (NecessaryToFilterBlood(x) & FilterBlood(x)))", "score": 0}
{"id": "eqasc_validation_1742", "prediction": "all x.(Dialysis(x) -> (NecessaryToFilterBlood(x) | NecessaryToFilterBlood(x)))", "score": 0}
{"id": "eqasc_validation_1742", "prediction": "all x y.((Dialysis(x) & Blood(y)) -> Filters(x,y))", "score": 0}
{"id": "eqasc_validation_1742", "prediction": "all x y.((Dialysis(x) & Blood(y)) -> mayNecessaryToFilter(x,y))", "score": 0}
{"id": "eqasc_validation_1742", "prediction": "all x y z.((Dialysis(x) & BloodFiltering(y) & BloodFiltering(z)) -> NoNecessity(x))", "score": 0}
{"id": "eqasc_validation_1742", "prediction": "all x.(Dialysis(x) -> (NecessaryToFilterBlood(x) & -NecessaryToFilterBlood(x)))", "score": 0}
{"id": "eqasc_validation_1743", "prediction": "all x.(KneeFall(x) -> (Treats(x,y) & FilterBlood(x)))", "score": 0}
{"id": "eqasc_validation_1743", "prediction": "all x.((KneepInFailure(x) & Procedure(x)) -> FiltersBlood(x))", "score": 0}
{"id": "eqasc_validation_1743", "prediction": "all x.((KephronFailure(x) & ProcedureToFilterBlood(x)) -> TreatKnephronFailure(x))", "score": 0}
{"id": "eqasc_validation_1743", "prediction": "all x.(KneepFailure(x) -> Remedy(x))", "score": 0}
{"id": "eqasc_validation_1743", "prediction": "all x y z w.((KneephFailure(x) & Procedure(x) & Blood(z) & Filters(x,z,w)) -> MayBeTreated(x,y,z))", "score": 0}
{"id": "eqasc_validation_1743", "prediction": "all x.(KneeFailure(x) -> (TreatmentWithProcedureToFilterBlood(x)))", "score": 0}
{"id": "eqasc_validation_1743", "prediction": "all x.(KneepFossil(x) -> (TreatsWithProcedureToFilterBlood(x)))", "score": 0}
{"id": "eqasc_validation_1743", "prediction": "all x y.((KneeFailure(x) & Procedure(y)) -> MayBeTreatedWithThroughBloodFilter(y,x))", "score": 0}
{"id": "eqasc_validation_1743", "prediction": "all x.(KneeperFossureProcedure(x) -> (TreatsWithPatterns(x) & FiltersBlood(x)))", "score": 0}
{"id": "eqasc_validation_1743", "prediction": "all x y.((KneephFailure(x) & Procedure(y) & FiltersBlood(y,x)) -> TreatmentWith(x,y))", "score": 0}
{"id": "eqasc_validation_1743", "prediction": "all x y.((KnephronFailure(x) & Procedure(y)) -> (Treats(x,y) & FiltersBlood(y)))", "score": 0}
{"id": "eqasc_validation_1743", "prediction": "all x y z w.((KnephronFailure(x) & Procedure(y) & Blood(z)) -> MayBeTreatedWith(x,y,z))", "score": 0}
{"id": "eqasc_validation_1743", "prediction": "all x.(Knephrofailure(x) -> (TreatsWithProcedure(x) & FiltersBlood(x)))", "score": 0}
{"id": "eqasc_validation_1743", "prediction": "all x.(KneepFailure(x) -> (Treat[x,y) & FilterBlood(y)))", "score": -1}
{"id": "eqasc_validation_1743", "prediction": "all x.((KneelFaillure(x) & Procedure(x)) -> FiltersBlood(x))", "score": 0}
{"id": "eqasc_validation_1743", "prediction": "all x.((KnephronFailure(x) & Procedure(x)) -> FiltratesBlood(x))", "score": 0}
{"id": "eqasc_validation_1744", "prediction": "all x.(Dialysis(x) -> CleaningOrCleaningBlood(x))", "score": 0}
{"id": "eqasc_validation_1744", "prediction": "all x.(Dialysis(x) -> CleaningBlood(x))", "score": 0}
{"id": "eqasc_validation_1744", "prediction": "all x.(Dialysis(x) -> CleansBlood(x))", "score": 0}
{"id": "eqasc_validation_1744", "prediction": "all x y.((Dialysis(x) & Blood(y)) -> Cleans(x,y))", "score": 0}
{"id": "eqasc_validation_1744", "prediction": "all x.(Dialysis(x) -> CleansBloodInAsMechanicalProcess(x))", "score": 0}
{"id": "eqasc_validation_1744", "prediction": "all x.(Dialysis(x) -> (MechanicalProcess(x) & CleansBlood(x)))", "score": 0}
{"id": "eqasc_validation_1744", "prediction": "all x y.((Dialysis(x) & Blood(y)) -> CleaningProcess(x,y))", "score": 0}
{"id": "eqasc_validation_1744", "prediction": "all x.(Dialysis(x) -> MechanicalProcessOfCaring(x))", "score": 0}
{"id": "eqasc_validation_1744", "prediction": "all x.(Dialysis(x) -> Cleaning(x))", "score": 0}
{"id": "eqasc_validation_1745", "prediction": "all x.(KinneyFailure(x) -> (MaintainBloodPurpose(x) & MechanicalProcessOfCaring(x)))", "score": 0}
{"id": "eqasc_validation_1745", "prediction": "all x y z.((KidneyFailure(x) & MechanicalProcess(y) & BloodFlow(z)) -> (Remedies(x,y,z) | Cleans(y,z))))", "score": -1}
{"id": "eqasc_validation_1745", "prediction": "all x.(KidneyFailure(x) -> MayBeTreatedByMechanicalProcessOfBloodCleaning(x))", "score": 0}
{"id": "eqasc_validation_1745", "prediction": "all x.(KinneyFailure(x) -> (TreatsByMechanicalProcess(x) & BloodCleaning(x)))", "score": 0}
{"id": "eqasc_validation_1745", "prediction": "all x.(KinneyFailure(x) -> (TreatsByMechanicalProcessOfCleaningBlood(x)))", "score": 0}
{"id": "eqasc_validation_1745", "prediction": "all x.(KinneyFailure(x) -> (MechanicalSystem(x) & CleansBlood(x)))", "score": 0}
{"id": "eqasc_validation_1745", "prediction": "all x.(KinneyFailure(x) -> (MechanicalPathOfCleaningBlood(x) & Treats(x)))", "score": 0}
{"id": "eqasc_validation_1745", "prediction": "all x.(KinneyFailure(x) -> MayBeTreatedByMechanicalProcessOfCleaningBlood(x))", "score": 0}
{"id": "eqasc_validation_1745", "prediction": "all x.(KinneyFailure(x) -> (Treatment(x,y) & MechanicalProcessOfCleaning(y)))", "score": 0}
{"id": "eqasc_validation_1745", "prediction": "all x.(KinneyFailure(x) -> (CleanedBlood(x) & CleansBlood(x)))", "score": 0}
{"id": "eqasc_validation_1745", "prediction": "all x.(KidneyFailure(x) -> MayBeTreatedByMechanicalProcessOfCleaningBlood(x))", "score": 0}
{"id": "eqasc_validation_1745", "prediction": "all x y.((KinneyFailure(x) & MechanicalProcessOfCleaningBlood(y)) -> MayBeTreated(x,y))", "score": 0}
{"id": "eqasc_validation_1745", "prediction": "all x y.((KinneyFailure(x) & MechanicalProcessOfCleaningBlood(x)) -> (TreatsBy(x,y) & CleansBlood(x)))", "score": 0}
{"id": "eqasc_validation_1745", "prediction": "all x y z.((KinneyFailure(x) & MechanicalProcess(y) & Blood(z)) -> MayBeTreatedBy(x,y,z))", "score": 0}
{"id": "eqasc_validation_1745", "prediction": "all x.(KidneyFailure(x) -> (MechanicalProcessOfCleaningBlood(x)))", "score": 0}
{"id": "eqasc_validation_1745", "prediction": "all x.(KinneyFlow(x) -> (TreatsByMechanicalProcessOfBloodCleaning(x)))", "score": 0}
{"id": "eqasc_validation_1746", "prediction": "(DiabeticKneelingDisease(x) & KidneyFailure(x) & DiabetesRelatedKneesyProblems(x))", "score": 0}
{"id": "eqasc_validation_1746", "prediction": "all x.(DiabeticKinneyDisease(x) -> KidneyFailure(x) & DiabetesRelatedKneepProblems(x))", "score": 0}
{"id": "eqasc_validation_1746", "prediction": "all x.(DiabeticKinneyDisease(x) & KidneyFailure(x) & OtherDiabeticKneepProblems(x))", "score": 0}
{"id": "eqasc_validation_1746", "prediction": "all x y z.((DiabeticKneelDisease(x) & KidneyFailure(y)) -> (DiabeticDiabeticDiabeticDiabetic(x) & OtherDiabeticDiabeticDiabeticProblems(z)))", "score": 0}
{"id": "eqasc_validation_1746", "prediction": "all x.(DiabeticKindDisease(x) -> (KneeFailure(x) & OtherDiabeticKneeProblems(x)))", "score": 0}
{"id": "eqasc_validation_1746", "prediction": "all x.(DiabeticKindDisease(x) -> (KneeFailure(x) | OtherDiabeticDiabeticKneepProblems(x)))", "score": 0}
{"id": "eqasc_validation_1746", "prediction": "(DiabeticKneelDisease(d) & KidneyFailure(-d)) & DiabetesRelatedKneelProblems(d))", "score": -1}
{"id": "eqasc_validation_1746", "prediction": "all x.((DiabeticKindDisease(x) & KidneyFailure(x) & DiabetesRelatedProblems(x)) -> ChronicDiabeticKindly(x))", "score": 0}
{"id": "eqasc_validation_1746", "prediction": "all x.(DiabeticKindDisease(x) -> (KneefFailure(x) & OtherDiabeticKneepProblems(x)))", "score": 0}
{"id": "eqasc_validation_1746", "prediction": "all x.(DiabeticKneelDisease(x) & KidneyFailure(x) & DiabetesRelatedKneelProblems(x))", "score": 0}
{"id": "eqasc_validation_1746", "prediction": "all x.((DiabeticKinneyDisease(x) & KidneyFailure(x) & DiabetesRelatedKindneyProblems(x)) -> -Diabetic(x))", "score": 0}
{"id": "eqasc_validation_1746", "prediction": "all x.(DiabeticKind(x) -> (Disease(x) & KidneyFailure(x) & DiabetesRelatedKneepProblems(x)))", "score": 0}
{"id": "eqasc_validation_1746", "prediction": "all x.(DiabeticKneep(x) -> (DiabeticKneep(x) & KidneyFailure(x) & DiabetesRelatedKneepProblems(x)))", "score": 0}
{"id": "eqasc_validation_1746", "prediction": "all x.(DiabeticKindDisease(x) -> KidneyFailure(x))", "score": 0}
{"id": "eqasc_validation_1746", "prediction": "all x.(DiabeticKindDisease(x) & KidneyFailure(x) & DiabetesRelatedKneepProblems(x))", "score": 0}
{"id": "eqasc_validation_1746", "prediction": "all x.((DiabeticKneelDisease(x) & KidneyFailure(x) & DiabetesRelatedKneelProblems(x)) -> EnoughToReturn(x))", "score": 0}
{"id": "eqasc_validation_1747", "prediction": "all x.(DiabeticEffect(x) -> CanBeTreatedWithDialysis(x))", "score": 0}
{"id": "eqasc_validation_1747", "prediction": "all x.(Diabetes(x) -> Treaty(x,Dialysis))", "score": 0}
{"id": "eqasc_validation_1747", "prediction": "all x.(Diabetes(x) -> (TreatsDialysis(x) | TreatsDialysis(x)))", "score": 0}
{"id": "eqasc_validation_1747", "prediction": "all x.((DiabeticEffect(x) & Dialysis(x)) -> CanBeTreated(x))", "score": 0}
{"id": "eqasc_validation_1747", "prediction": "all x.((Diabetes(x),y) & Dialysis(y)) -> CanBeTreated(x,y))", "score": -1}
{"id": "eqasc_validation_1747", "prediction": "all x.(DiabeticEffect(x) -> TreatsWithDialysis(x))", "score": 0}
{"id": "eqasc_validation_1747", "prediction": "all x.(DiabeticEffect(x) -> (TreatmentWithDialysis(x)))", "score": 0}
{"id": "eqasc_validation_1747", "prediction": "all x.(DiabeticEffect(x) -> TreatableWithDialysis(x))", "score": 0}
{"id": "eqasc_validation_1747", "prediction": "all x y.((Dialysis(x) & Diabetes(y)) -> CanTreat(x,y))", "score": 0}
{"id": "eqasc_validation_1747", "prediction": "all x.(Diabetes(x) -> CanBeTreatedWithDialysis(x))", "score": 0}
{"id": "eqasc_validation_1747", "prediction": "exists x.(Dialysis(x) & TreatAllEffectOfDiabetes(x))", "score": 0}
{"id": "eqasc_validation_1747", "prediction": "all x.(DiabeticEffect(x) -> TreatedWithDialysis(x))", "score": 0}
{"id": "eqasc_validation_1747", "prediction": "all x.((DiabeticEffect(x) & Dialysis(y)) -> Treatment(x,y))", "score": 0}
{"id": "eqasc_validation_1747", "prediction": "all x y z.((DiabeticEffect(x) & Dialysis(y) & Diabetes(z)) -> CanBeTreated(x,y,z))", "score": 0}
{"id": "eqasc_validation_1747", "prediction": "all x.(Diabetes(x) -> CanBreakDialysis(x))", "score": 0}
{"id": "eqasc_validation_1748", "prediction": "all x.(KidneyFailure(x) -> DeathSection(x))", "score": 0}
{"id": "eqasc_validation_1748", "prediction": "all x.(KinneyFailure(x) -> DeathSentencing(x))", "score": 0}
{"id": "eqasc_validation_1748", "prediction": "all x.(KinneyFailure(x) -> DeathPension(x))", "score": 0}
{"id": "eqasc_validation_1748", "prediction": "all x.(KinneyFailure(x) -> DeathSentence(x))", "score": 0}
{"id": "eqasc_validation_1748", "prediction": "all x.(KidneyFailure(x) -> DeathSentence(x))", "score": 0}
{"id": "eqasc_validation_1748", "prediction": "all x.(KinneyFailure(x) -> DeathSpeech(x))", "score": 0}
{"id": "eqasc_validation_1748", "prediction": "all x y.((KidneyFailure(x) & DeathSentence(y)) -> KidneyFailure(x))", "score": 0}
{"id": "eqasc_validation_1748", "prediction": "all x.((KidneyFailure(x) & DeathSection(x)) -> KidneyFailure(x))", "score": 0}
{"id": "eqasc_validation_1749", "prediction": "all x.(LackOfDialysis(x) -> MayLeadToDeath(x))", "score": 0}
{"id": "eqasc_validation_1749", "prediction": "all x.((LackOfDialysis(x)) -> MayLeadToDeath(x))", "score": 0}
{"id": "eqasc_validation_1749", "prediction": "all x.(DialysisLack(x) -> CouldLeadToDeath(x))", "score": 0}
{"id": "eqasc_validation_1749", "prediction": "all x.(IsLackOfDialysis(x) -> MayLeadToDeath(x))", "score": 0}
{"id": "eqasc_validation_1749", "prediction": "all x.(LackOfDialysis(x) -> CouldLeadToDeath(x))", "score": 0}
{"id": "eqasc_validation_1749", "prediction": "all x y.((LackOfDialysis(x) & Death(y)) -> MayLeadTo(x,y))", "score": 0}
{"id": "eqasc_validation_1749", "prediction": "all x.(LeafOfDialysis(x) -> MayLeadToDeath(x))", "score": 0}
{"id": "eqasc_validation_1749", "prediction": "all x.(LackOfDialysis(x) -> MayLeadToDaily(x))", "score": 0}
{"id": "eqasc_validation_1750", "prediction": "all x y.((KinneyFailure(x) & ArtificialKneep(y)) -> MayBeTreated(x,y))", "score": 0}
{"id": "eqasc_validation_1750", "prediction": "all x.((KidneyFailure(x) & CleansBloodWithArtificialKneel(x)) -> Treatment(x))", "score": 0}
{"id": "eqasc_validation_1750", "prediction": "all x.(KinneyFailure(x) -> ((Clean(x,Blood) & ArtificialKnee(x))))", "score": 0}
{"id": "eqasc_validation_1750", "prediction": "all x.(KinneyFailure(x) -> (RinsesBloodWithArtificialKnee(x)))", "score": 0}
{"id": "eqasc_validation_1750", "prediction": "all x.(KidneyFailure(x) -> (CleansBloodWithArtificialKnee(x)))", "score": 0}
{"id": "eqasc_validation_1750", "prediction": "all x.(KidneyFailure(x) -> (ToTreatWithArtificialKnee(x) & CleansBloodWithArtificialKnee(x)))", "score": 0}
{"id": "eqasc_validation_1750", "prediction": "all x.(KidneyFailure(x) -> CanBeTreatedByCleaningBloodWithArtificialKneel(x))", "score": 0}
{"id": "eqasc_validation_1750", "prediction": "all x.(KidneyFailure(x) -> (CaresBlood(x) & UsesArtificialKind(x)))", "score": 0}
{"id": "eqasc_validation_1750", "prediction": "all x.(KinneyFailure(x) -> (CleanBrain(x) & UseArtificialKneel(x)))", "score": 0}
{"id": "eqasc_validation_1750", "prediction": "all x.(KidneyFailure(x) -> (ConsumesArtificialKindney(x) & CleansBlood(x)))", "score": 0}
{"id": "eqasc_validation_1750", "prediction": "all x.(KinneyFailure(x) -> (CarefullyTreatsInArtificialKniep(x) & CleansBlood(x)))", "score": 0}
{"id": "eqasc_validation_1750", "prediction": "all x y.((KidneyFailure(x) & Skin(y)) -> (Cleaning(x,y) & ArtificialKneel(x)))", "score": 0}
{"id": "eqasc_validation_1750", "prediction": "all x.(KinneyFailure(x) -> (CleanBlood(x,artificialKneel) & NoBloodClean(x)))", "score": 0}
{"id": "eqasc_validation_1750", "prediction": "all x y z.((KinneyFailure(x) & Blood(y) & ArtificialKneel(z)) -> TreatmentCanBeTreated(x,y,z))", "score": 0}
{"id": "eqasc_validation_1750", "prediction": "all x y.((KidneyFailure(x) & Treatment(y)) -> (CleaningBlood(y) & UsesArtificialKind(x,y)))", "score": 0}
{"id": "eqasc_validation_1750", "prediction": "all x.(KinneyFailure(x) -> (CanBeTreatedByCleaningWithArtificialKneel(x)))", "score": 0}
{"id": "eqasc_validation_1751", "prediction": "all x.(RenalFailure(x) -> KidneyFailure(x))", "score": 1}
{"id": "eqasc_validation_1751", "prediction": "all x.(RenalFailure(x) -> kidneyFailure(x))", "score": 1}
{"id": "eqasc_validation_1751", "prediction": "all x.(RenalFailure(x) -> CausesKnewelFailure(x))", "score": 0}
{"id": "eqasc_validation_1751", "prediction": "all x.(ReinalFailure(x) -> KidneyFailure(x))", "score": 0}
{"id": "eqasc_validation_1751", "prediction": "all x.(RentalFailure(x) -> KidneyFailure(x))", "score": 0}
{"id": "eqasc_validation_1751", "prediction": "all x.((RenalFailure(x) & KidneyFailure(x)) -> Means(x,y))", "score": 0}
{"id": "eqasc_validation_1751", "prediction": "all x.(RenousFailure(x) -> KidneyFailure(x))", "score": 0}
{"id": "eqasc_validation_1752", "prediction": "all x y.((RenalFailure(x) & RenalFailure(y)) -> (TreatmentWithDialysis(y) | TreatmentWithDialysis(y)))", "score": 0}
{"id": "eqasc_validation_1752", "prediction": "all x y.((RenalFailure(x) & Dialysis(y)) -> (TreatmentWith(x,y) & Transplantation(x)))", "score": 0}
{"id": "eqasc_validation_1752", "prediction": "all x.((RenalFailure(x) & Dialysis(x)) -> PossibleTreatment(x))", "score": 0}
{"id": "eqasc_validation_1752", "prediction": "all x.(RenalFailure(x) -> (TreatmentWithDialysis(x) | TreatmentWithDialysis(x)))", "score": 0}
{"id": "eqasc_validation_1752", "prediction": "all x.(RentalFailure(x) -> (TreatmentWithDialysis(x) & TreatmentWithDialysis(x)))", "score": 0}
{"id": "eqasc_validation_1752", "prediction": "all x.(RenalFailure(x) -> CanBeTreatedWithDialysis(x))", "score": 0}
{"id": "eqasc_validation_1752", "prediction": "all x.(RenewalFailure(x) -> (TreatmentWithDialysis(x) | TreatmentWithDialysis(x)))", "score": 0}
{"id": "eqasc_validation_1752", "prediction": "all x.(RenalFailure(x) -> AdequateDialysis(x))", "score": 0}
{"id": "eqasc_validation_1752", "prediction": "all x.((RenalFailure(x) & Dialysis(x)) -> (TreatmentWithDialysis(x) | TreatmentWithDialysis(x)))", "score": 0}
{"id": "eqasc_validation_1752", "prediction": "all x.(RenalFailure(x) -> MayBeTreatedWithDialysis(x))", "score": 2}
{"id": "eqasc_validation_1752", "prediction": "all x y.((RenalFailure(x) & Dialysis(y)) -> MayTreatWith(x,y))", "score": 0}
{"id": "eqasc_validation_1752", "prediction": "all x.(RenalFailure(x) -> CanTreatWithDialysis(x))", "score": 0}
{"id": "eqasc_validation_1752", "prediction": "all x.((RenalFailure(x) & Dialysis(x)) -> MayBeTreatedWith(x,y))", "score": 0}
{"id": "eqasc_validation_1752", "prediction": "all x.(RenalFailure(x) -> (ConsultsDialysis(x) | -Trial(x)))", "score": 0}
{"id": "eqasc_validation_1752", "prediction": "all x.(RenalFailure(x) -> (OralTherapy(x) & Dialysis(x)))", "score": 0}
