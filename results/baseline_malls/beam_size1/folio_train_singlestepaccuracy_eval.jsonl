{"id": "folio_train_0", "prediction": "all x.((Person(x) & RegularDrinksCoffee(x)) -> DependentOnCaffeine(x))", "score": 0}
{"id": "folio_train_1", "prediction": "all x.((Person(x) & (RegularDrinksCoffee(x) | AddictsToCaffeine(x))) -> (Person(x) & AddictsToCaffeine(x)))", "score": 0}
{"id": "folio_train_2", "prediction": "all x.((JokesAboutAddictionToCaffeine(x)) -> UnknownDrug(x))", "score": 0}
{"id": "folio_train_3", "prediction": "((Student(Rina) & UnconsciousOfCaffeine(Rina)) | (-Student(Rina) & UnconsciousOfCaffeine(Rina))))", "score": -1}
{"id": "folio_train_4", "prediction": "all x.((Person(x) & -DependsOnCaffeine(x) & DependsOnStudent(x)) -> ((Person(x) & DependsOnCaffeine(x) & -DependsOnStudent(x)) | (-DependsOnCaffeine(x) & DependsOnStudent(x)))))", "score": -1}
{"id": "folio_train_5", "prediction": "all x.(Rina(x) -> (JokesAboutAddictionToCaffeine(x) | UnknowinglyAdmittedToCaffeine(x)))", "score": 0}
{"id": "folio_train_6", "prediction": "all x.(Rina(x) -> (JokesAboutAddictionToCaffeine(x) | UnknownDrug(x)))", "score": 0}
{"id": "folio_train_7", "prediction": "all x.(Rina(x) -> ((Person(x) & RegularlyDrinksCoffee(x)) | UnknowinglyDrug(x))))", "score": -1}
{"id": "folio_train_8", "prediction": "all x.((Person(x) & JokesAboutCaffeine(x) & -(Person(x) & JokesAboutCaffeine(x) & -(Person(x) & JokesAboutCaffeine(x) & -Person(x) & -(Person(x) & JokesAboutCaffeine(x) & -Person(x) & -PaceCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCa", "score": -1}
{"id": "folio_train_9", "prediction": "Miroslav Venhoda (CzechChoralConductor) & SpecializedInRenaissanceAndBaroqueMusic(Venhoda,Czech))", "score": -1}
{"id": "folio_train_10", "prediction": "all x.(ChoralConductor(x) -> Musician(x))", "score": 0}
{"id": "folio_train_11", "prediction": "exists x.(Musician(x) & LovesMusic(x))", "score": 0}
{"id": "folio_train_12", "prediction": "Miroslav Venhoda published a book in 1946 called MethodOfStudyingGregorianChant(Venhoda,SufficientScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificS", "score": -1}
{"id": "folio_train_13", "prediction": "Miroslav Venhoda lovedMusic(Miroslav Venhoda)", "score": -1}
{"id": "folio_train_14", "prediction": "all x y.((CzechPerson(x) & Book(y)) -> WrittenInSuffrage(x,y))", "score": 0}
{"id": "folio_train_15", "prediction": "-exists x.(ChoralConductor(x) & SpecializedInRenaissancePerformance(x))", "score": 0}
{"id": "folio_train_16", "prediction": "all x.(Elef(x) -> Fish(x))", "score": 0}
{"id": "folio_train_17", "prediction": "-exists x.(Fish(x) & Plant(x))", "score": 0}
{"id": "folio_train_18", "prediction": "all x.(Thing(x) -> (Plant(x) | Animal(x)))", "score": 0}
{"id": "folio_train_19", "prediction": "all x.((Breathes(x) & -Breathes(x)) -> Paper(x))", "score": 0}
{"id": "folio_train_20", "prediction": "all x.(Animal(x) -> Breathes(x))", "score": 0}
{"id": "folio_train_21", "prediction": "all x.((SeaEel(x) & (Eel(x) | Plant(x))) -> (Eel(x) | Animal(x)))", "score": 0}
{"id": "folio_train_22", "prediction": "all x.(SeaEel(x) -> Eel(x))", "score": 0}
{"id": "folio_train_23", "prediction": "all x.(SeaEel(x) -> Paper(x))", "score": 0}
{"id": "folio_train_24", "prediction": "all x.(SeaEel(x) -> (Breathes(x) | Paper(x)))", "score": 0}
{"id": "folio_train_25", "prediction": "all x.((BlakeMcFallCompanyBuilding(x) & CommercialWarehouse(x) & ListedOnNationalRegisterOfHistoricalPlaces(x)) -> BuiltByBlakeMcFallCompany(x))", "score": 0}
{"id": "folio_train_26", "prediction": "all x.((Building(x) & BlakeMcFallCompany(x)) -> AddedToNationalRegisterOfHistoricalPlaces(x,90))", "score": 0}
{"id": "folio_train_27", "prediction": "all x.(EmmetBuilding(x) -> (Building(x) & FiveStory(x) & InPortland(x) & InOregon(x)))", "score": 0}
{"id": "folio_train_28", "prediction": "The EmmetBuilding was built in 1915.", "score": -1}
{"id": "folio_train_29", "prediction": "(BlakeMcFallCompanyBuilding(EmmetBuilding) & BlakeMcFallBuilding(EmmetBuilding))", "score": 0}
{"id": "folio_train_30", "prediction": "John works at EmmetBuilding.", "score": -1}
{"id": "folio_train_31", "prediction": "all x.((Building(x) & BuiltIn1915(x)) -> FiveStory(x))", "score": 0}
{"id": "folio_train_32", "prediction": "The BlakeMcFallCompanyBuilding(BlakeMcFall) is located in Portland, Oregon.", "score": -1}
{"id": "folio_train_33", "prediction": "John started his current job in 1990.", "score": -1}
{"id": "folio_train_34", "prediction": "William Dickinson (BritishPolitician(WilliamDickinson) & SitsInHouseOfCommons(WilliamDickinson))", "score": -1}
{"id": "folio_train_35", "prediction": "(Attended(WilliamDickinson,Westminster) & HighSchool(WilliamDickinson,Edinburgh))", "score": 0}
{"id": "folio_train_36", "prediction": "all x.(UniversityOfEdinburgh(x) -> UniversityLocatedInUnitedKingdom(x))", "score": 0}
{"id": "folio_train_37", "prediction": "William Dickinson supported PortlandWhisgs.", "score": -1}
{"id": "folio_train_38", "prediction": "all x.((Person(x) & SupportedPortlandWhisgs(x)) -> -SeatInParliament(x))", "score": 0}
{"id": "folio_train_39", "prediction": "(-SeatInParliament(WilliamDickinson))", "score": 0}
{"id": "folio_train_40", "prediction": "all x y.((WilliamDickinson(x) & School(y)) -> (GoesTo(x,y) & HighSchool(y) & University(y)))", "score": 0}
{"id": "folio_train_41", "prediction": "William Dickinson attended university in the United Kingdom.", "score": -1}
{"id": "folio_train_42", "prediction": "William Dickinson sat in HouseOfCommons.", "score": -1}
{"id": "folio_train_43", "prediction": "all x.(LanguageA(x) -> UniversalLanguage(x))", "score": 0}
{"id": "folio_train_44", "prediction": "all x.((UniversalLanguage(x) & exists y.(Person(y) & Person(y) & KnowsUniversalLanguage(y,x))) -> CanCommunicate(y,x))", "score": 0}
{"id": "folio_train_45", "prediction": "(-Communicates(Katya,Danil))", "score": 0}
{"id": "folio_train_46", "prediction": "(Katya knowsLanguageA(Katya) & KnowsLanguageA(Katya))", "score": -1}
{"id": "folio_train_47", "prediction": "Danil knowsLanguageA.", "score": -1}
{"id": "folio_train_48", "prediction": "all x.((Customer(x) & SubscribedToAMCList(x)) -> AvailableToWatchMovies(x,3))", "score": 0}
{"id": "folio_train_49", "prediction": "exists x.(Customer(x) & GoesToCinema(x) & EveryWeek(x))", "score": 0}
{"id": "folio_train_50", "prediction": "all x.(Customer(x) -> (SubscribesToAMCService(x) | SubscribesToHBOsService(x)))", "score": 0}
{"id": "folio_train_51", "prediction": "all x.((Customer(x) & PrefersTVSeriesMore(x) & -WatchesTVSeriesInCinemas(x)) -> -WatchesTVSeriesInCinemas(x))", "score": 0}
{"id": "folio_train_52", "prediction": "all x.((Customer(x) & SubscribesToHoneyServices(x)) -> (PrefersTVSeries(x) & PrefersMovies(x)))", "score": 0}
{"id": "folio_train_53", "prediction": "all x y.((James(x) & TVSeries(y)) -> WatchesInCinemas(x,y))", "score": 0}
{"id": "folio_train_54", "prediction": "all x.(James(x) -> GoesToCinema(x))", "score": 0}
{"id": "folio_train_55", "prediction": "-(GoesToCinema(James) & Week(James))", "score": 0}
{"id": "folio_train_56", "prediction": "all x.(James(x) -> (GoesToCinemasEveryWeek(x) | WatchesMoviesEveryWeek(x)))", "score": 0}
{"id": "folio_train_57", "prediction": "all x.((James(x) & -(GoesToCinemasEveryWeek(x) & SubscribesToHBO(x))) -> (AvailableToWatch3Movies(x) | PrefersTVMore(x)))", "score": 0}
{"id": "folio_train_58", "prediction": "all x.((James(x) & AvailableToWatchMovies(x,3) & WatchTVSeriesInCinemas(x)) -> (GoesToCinemas(x) & PrefersTVSeriesMore(x)))", "score": 0}
{"id": "folio_train_59", "prediction": "all x y.((La LigaSoccerTeam(x) & Team(y) & MorePoints(x,y)) -> HigherRank(x,y))", "score": -1}
{"id": "folio_train_60", "prediction": "all x y.((La LigaSoccerTeam(x) & La LigaSoccerTeam(y) & SamePoints(x,y)) -> RangHigher(x))", "score": -1}
{"id": "folio_train_61", "prediction": "all x y.((Team(x) & Team(y) & HigherRank(x,y)) -> -Sufficiency(x,y))", "score": 0}
{"id": "folio_train_62", "prediction": "(La LigaSoccerTeam(RealMadrid) & La LigaSoccerTeam(Barcelona))", "score": -1}
{"id": "folio_train_63", "prediction": "(all x.(LaLiga(x) -> Receives86Points(x)) & (Barcelon(x) -> Receives73Points(x)))", "score": 0}
{"id": "folio_train_64", "prediction": "(RealMadrid(RealMadrid) & Barcelona(Barcelona) & LaLiga2021-2022(Receives3Points(Receives3Points))", "score": -1}
{"id": "folio_train_65", "prediction": "(RanksHigherInLaLiga(RealMadrid,LaLiga2021) & HigherInLaLiga(RealMadrid,LaLiga2022))", "score": 0}
{"id": "folio_train_66", "prediction": "(RanksHigherInLaLiga(Barcelona,LaLiga) & HigherInLaLiga(Barcelona,LaLiga))", "score": 0}
{"id": "folio_train_67", "prediction": "LawtonPark(nearbySeattle)", "score": 0}
{"id": "folio_train_68", "prediction": "all x.(Citizen(x) -> UsesZipCode(x,98199))", "score": 0}
{"id": "folio_train_69", "prediction": "Tom is citizenOfLawtonPark(Tom)", "score": -1}
{"id": "folio_train_70", "prediction": "(UsesZIPCode(Daniel,98199))", "score": 0}
{"id": "folio_train_71", "prediction": "all x.((Tom(x) & ZipCode(x,98199)) -> Uses(x,98199))", "score": 0}
{"id": "folio_train_72", "prediction": "(-UsesZipCode(Tom,98199))", "score": 0}
{"id": "folio_train_73", "prediction": "Tom is a citizen of Washington.", "score": -1}
{"id": "folio_train_74", "prediction": "Daniel is citizenOfLawtonPark(d)", "score": -1}
{"id": "folio_train_75", "prediction": "all x.((Lawmaker(x) & FoundCaughtOfStolenGovernmentFunds(x)) -> SuspendedFromOffice(x))", "score": 0}
{"id": "folio_train_76", "prediction": "all x y.((TiffanyT.Alston(x) & HouseOfDelegates(y)) -> LegislatorIn(x,y))", "score": -1}
{"id": "folio_train_77", "prediction": "(StolenByTiffanyT.Alston(TiffanyT.Alston) & GovernmentFunds(TiffanyT.Alston))", "score": -1}
{"id": "folio_train_78", "prediction": "Tiffany T. Alston was suspended from Maryland HouseOfDelegates.", "score": -1}
{"id": "folio_train_79", "prediction": "Tiffany T. Alston was not suspended from Maryland HouseOfDelegates.", "score": -1}
{"id": "folio_train_80", "prediction": "all x.((TiffanyT.Alston(x) & StolenGovernmentFunds(x)) -> GoesToPenitentiary(x))", "score": -1}
{"id": "folio_train_81", "prediction": "exists x.(Fish(x) & Sting(x))", "score": 0}
{"id": "folio_train_82", "prediction": "all x.(Stonefish(x) -> Fish(x))", "score": 0}
{"id": "folio_train_83", "prediction": "all x.(StepOnStonefish(x) -> Stings(x))", "score": 0}
{"id": "folio_train_84", "prediction": "all x.((Stonefish(x) & -Treated(x)) -> CausesDeath(x))", "score": 0}
{"id": "folio_train_85", "prediction": "all x.((StonefishStings(x) & (AppliesHeat(x) | UsesAntivenom(x))) -> Treats(x,StonefishStings))", "score": 0}
{"id": "folio_train_86", "prediction": "all x.((StepOnStonefish(x) & -UsesAtivenom(x)) -> CausesDeath(x))", "score": 0}
{"id": "folio_train_87", "prediction": "all x.((Fish(x) & StingsOf(x,y)) -> CausesDeath(x))", "score": 0}
{"id": "folio_train_88", "prediction": "all x y.((StepOnStonefish(x) & Stonefish(y) & ApplyHeatToAffectedArea(x,y)) -> CausesDeath(x,y))", "score": 0}
{"id": "folio_train_89", "prediction": "exists x.(Monitor(x) & LGProduced(x) & HasTypeCPort(x))", "score": 0}
{"id": "folio_train_90", "prediction": "all x.((Monitor(x) & TypeCPort(x)) -> -ProducedByAOC(x))", "score": 0}
{"id": "folio_train_91", "prediction": "all x.(Monitor(x) -> ProducedByAOC(x))", "score": 0}
{"id": "folio_train_92", "prediction": "all x.(L-2021(x) -> (InLibrary(x) | HasTypeCPort(x)))", "score": -1}
{"id": "folio_train_93", "prediction": "all x.(L-2021(x) -> (ProducedByAOC(x) & ProducedByLG(x)) | (-ProducedByAOC(x) & ProducedByLG(x))))", "score": -1}
{"id": "folio_train_94", "prediction": "L-2021 is in the library.", "score": -1}
{"id": "folio_train_95", "prediction": "all x.(L-2021(x) -> (InLibrary(x) | ProducedByLG(x)))", "score": -1}
{"id": "folio_train_96", "prediction": "all x.(L-2021(x) -> (TypeCPort(x) | LGProduced(x)))", "score": -1}
{"id": "folio_train_97", "prediction": "all x.((L-2021(x) & (InLibrary(x) & ProducedByLG) | -(InLibrary(x) & ProducedByLG)))) -> -TypeCPort(x) & -ProducedByLG(x)))", "score": -1}
{"id": "folio_train_98", "prediction": "all x.((L-2021(x) & (ProducedByLG(x) | ProducedByAOC(x))) | -ProducedByLG(x) | -ProducedByAOC(x)))", "score": -1}
{"id": "folio_train_99", "prediction": "all x.(People(x) -> (EatsMeatRegularly(x) | Vegetation(x)))", "score": 0}
{"id": "folio_train_100", "prediction": "all x.((People(x) & EatsMeatRegularly(x)) -> (EnjoysEating(x,burgers) & EnjoysEating(x,steaks)))", "score": 0}
{"id": "folio_train_101", "prediction": "all x.(Vegetarian(x) -> (ConsciousOfEnvironment(x) | ConsciousOfHealth(x)))", "score": 0}
{"id": "folio_train_102", "prediction": "all x.((ConsciousAboutEnvironment(x) | ConsciousAboutHealth(x)) -> -FastFoodPlaces(x))", "score": 0}
{"id": "folio_train_103", "prediction": "all x.((Person(x) & BusySchedules(x) & -TimeToCook(x)) -> GoToFastFoodPlaces(x))", "score": 0}
{"id": "folio_train_104", "prediction": "all x.((Jeremy(x) & -(GoesToFastFoodPlacesOfFastFoodPlacesOfFastFoodPlacesOfFastFoodPlacesOfFastFoodPlacesOfFastFoodPlacesOfFastFoodPlacesOfFastFoodPlacesOfFastFoodPlacesOfFastFoodOfFastFoodPlacesOfFastFoodFastFoodFastFoodFastFoodFastFoodFastFoodFastFoodFastFoodFastFoodFastFoodFastFoodFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFa", "score": -1}
{"id": "folio_train_105", "prediction": "all x.((Jeremy(x) & BusySchedule(x) & -TimeToCook(x)) -> -TimeToCook(x))", "score": 0}
{"id": "folio_train_106", "prediction": "all x.((Jeremy(x) & BusySchedule(x)) -> (-Cooks(x) & -EnjoysEating(x,burgers,steaks)))", "score": 0}
{"id": "folio_train_107", "prediction": "all x.((Jeremy(x) & BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(Busts(x) & -(Busts(x)) & Eats(x)))))", "score": -1}
{"id": "folio_train_108", "prediction": "(DoingProject(Sam) -> Doing(Sam))", "score": 0}
{"id": "folio_train_109", "prediction": "all x.(Project(x) -> (WrittenInC++(x) | WrittenInPython(x)))", "score": 0}
{"id": "folio_train_110", "prediction": "all x.((Project(x) & WrittenInPython(x)) -> -UsesMac(x))", "score": 0}
{"id": "folio_train_111", "prediction": "(UsesMac(Sam) & -UsesMac(Sam))", "score": 0}
{"id": "folio_train_112", "prediction": "all x.((Mac(x) & Uses(x,Mac)) -> PlaysSong(x))", "score": 0}
{"id": "folio_train_113", "prediction": "all x.((Song(x) & -Perfect(x)) -> SamWon'tPlay(x))", "score": 0}
{"id": "folio_train_114", "prediction": "all x.((Project(x) & Sam(x)) -> WrittenInC++(x))", "score": 0}
{"id": "folio_train_115", "prediction": "(PerfectSong(Sam) & Playing(Sam))", "score": 0}
{"id": "folio_train_116", "prediction": "all x.((Song(x) & Perfect(x)) -> Plays(x,Sam))", "score": 0}
{"id": "folio_train_117", "prediction": "all x.(Rabbit(x) -> HasFur(x))", "score": 0}
{"id": "folio_train_118", "prediction": "exists x.(Pet(x) & Rabbit(x))", "score": 0}
{"id": "folio_train_119", "prediction": "exists x.(Pet(x) & -HasFur(x))", "score": 0}
{"id": "folio_train_120", "prediction": "all x.(VideoApplication(x) -> Software(x))", "score": 0}
{"id": "folio_train_121", "prediction": "all x.((YouTubeApplication(x) & RelatedTo(x,y)) -> VideoApplication(x))", "score": 0}
{"id": "folio_train_122", "prediction": "all x.(APP(x) -> (RelatedToYouTube(x) | RelatedToInstagram(x)))", "score": 0}
{"id": "folio_train_123", "prediction": "all x.(Instagram(x) -> Entertainment(x))", "score": 0}
{"id": "folio_train_124", "prediction": "all x.(Software(x) -> Programmable(x))", "score": 0}
{"id": "folio_train_125", "prediction": "all x.(Entertainment(x) -> Interesting(x))", "score": 0}
{"id": "folio_train_126", "prediction": "all x.((Interesting(x) & Good(x)) -> Interesting(x))", "score": 0}
{"id": "folio_train_127", "prediction": "(-Good(TikTok))", "score": 0}
{"id": "folio_train_128", "prediction": "all x.(Tiktok(x) -> Program(x))", "score": 0}
{"id": "folio_train_129", "prediction": "all x.(Tiktok(x) -> (Good(x) | Program(x)))", "score": 0}
{"id": "folio_train_130", "prediction": "all x.(Tiktok(x) -> -(RelatedToYoutube(x) & RelatedToProgram(x)))", "score": 0}
{"id": "folio_train_131", "prediction": "all x.(Tiktok(x) -> (RelatedToYoutube(x) | RelatedToProgram(x)))", "score": 0}
{"id": "folio_train_132", "prediction": "all x.(Ordinary(x) -> UnincorporatedCommunity(x))", "score": 0}
{"id": "folio_train_133", "prediction": "(LocatedInElliotCounty(Ordinary) & KentuckyRoute32(Ordinary))", "score": 0}
{"id": "folio_train_134", "prediction": "Ordinary is located northwest of SandyHook.", "score": -1}
{"id": "folio_train_135", "prediction": "-exists x.(UnincorporatedCommunity(x) & AlongKentuckyRoute32(x))", "score": 0}
{"id": "folio_train_136", "prediction": "exists x.(UnincorporatedCommunity(x) & ElliotCounty(x))", "score": 0}
{"id": "folio_train_137", "prediction": "all x.(YoungAdult(x) -> GoesOnDiet(x))", "score": 0}
{"id": "folio_train_138", "prediction": "all x.(CollegeStudent(x) -> YoungAdult(x))", "score": 0}
{"id": "folio_train_139", "prediction": "all x.(YaleStudent(x) -> CollegeStudent(x))", "score": 0}
{"id": "folio_train_140", "prediction": "all x.((Student(x) & YaleStudent(x)) | HarvardStudent(x))", "score": 0}
{"id": "folio_train_141", "prediction": "all x.(HarvardStudent(x) -> Diligent(x))", "score": 0}
{"id": "folio_train_142", "prediction": "all x.((Student(x) & Harvard(x)) -> YoungAdult(x))", "score": 0}
{"id": "folio_train_143", "prediction": "all x.((Susan(x) & YaleStudent(x)) -> -Diet(x))", "score": 0}
{"id": "folio_train_144", "prediction": "Susan is a college student.", "score": -1}
{"id": "folio_train_145", "prediction": "all x.(Susan(x) -> (GoesOnDiet(x) & Diligent(x)))", "score": 0}
{"id": "folio_train_146", "prediction": "all x.((Susan(x) & -Diet(x)) -> Diligent(x))", "score": 0}
{"id": "folio_train_147", "prediction": "(PlaysGuitar(vicDiCara) & PlaysBass(vicDiCara))", "score": 0}
{"id": "folio_train_148", "prediction": "all x.((MusicStyle(x) & VicDiCaraPlays(x)) -> PunkMusic(x))", "score": 0}
{"id": "folio_train_149", "prediction": "(InsideOut(VicDiCara) -> PlayedIn(VicDiCara))", "score": 0}
{"id": "folio_train_150", "prediction": "InsideOut was a punk band.", "score": -1}
{"id": "folio_train_151", "prediction": "all x.(InsideOutMusician(x) -> PlaysBass(x))", "score": 0}
{"id": "folio_train_152", "prediction": "all x.(Athlete(x) -> GoodAtSport(x))", "score": 0}
{"id": "folio_train_153", "prediction": "all x.(OlympicGoldMedalWinner(x) -> GoodAthlete(x))", "score": 0}
{"id": "folio_train_154", "prediction": "-exists x.(Scientist(x) & GoodAtSport(x))", "score": 0}
{"id": "folio_train_155", "prediction": "all x.(NobelLaureate(x) -> Scientist(x))", "score": 0}
{"id": "folio_train_156", "prediction": "(all x.(Amy(x) -> GoodAtSports(x)) | (Amy(x) -> OlympicGoldMedalWinner(x))))", "score": -1}
{"id": "folio_train_157", "prediction": "all x.((Amy(x) & -NobelLaureate(x)) -> -OlympicGoldMedalWinner(x))", "score": 0}
{"id": "folio_train_158", "prediction": "Amy is an athlete.", "score": -1}
{"id": "folio_train_159", "prediction": "(-(Scientist(Amy) & -OlympicGoldMedalWinner(Amy)) | (-Scientist(Amy) & OlympicGoldMedalWinner(Amy))))", "score": -1}
{"id": "folio_train_160", "prediction": "all x.((Amy(x) & -OlympicGoldMedalWinner(x)) -> NobelLaureate(x))", "score": 0}
{"id": "folio_train_161", "prediction": "all x.((Fruit(x) & ColorRed(x)) -> ContainsLargeAmountOfVitaminC(x))", "score": 0}
{"id": "folio_train_162", "prediction": "all x.(Apple(x) -> Fruit(x) & ColorRed(x))", "score": 0}
{"id": "folio_train_163", "prediction": "all x.((Fruit(x) & LargeAmountOfVitaminC(x)) -> BeneficialToPeople(x))", "score": 0}
{"id": "folio_train_164", "prediction": "all x.((Fruit(x) & BeneficialToPeople(x)) -> WarningList(x))", "score": 0}
{"id": "folio_train_165", "prediction": "all x.((K(x) & -BeneficialToPeople(x) & -Apple(x)) -> FruitWithColorRed(x))", "score": 0}
{"id": "folio_train_166", "prediction": "all x.(Apple(x) -> Apple(x))", "score": 0}
{"id": "folio_train_167", "prediction": "all x.(K(x) -> (ContainsLargeAmountOfVitaminC(x) | OnWarningList(x)))", "score": 0}
{"id": "folio_train_168", "prediction": "all x.(K(x) -> (OnWarningList(x) | ColorRed(x)))", "score": 0}
{"id": "folio_train_169", "prediction": "all x.((BeneficialToPeople(x) | WarningList(x)) -> -Red(x))", "score": 0}
{"id": "folio_train_170", "prediction": "all x.((K(x) & (OnWarningList(x) | ColorRed(x))) -> (-BeneficialToPeople(x) & -ContainsLargeAmountOfVitaminC(x)))", "score": 0}
{"id": "folio_train_171", "prediction": "all x.(WorkingAtMeta(x) -> HighIncome(x))", "score": 0}
{"id": "folio_train_172", "prediction": "all x.(HighIncome(x) -> -TakeBusToDestination(x))", "score": 0}
{"id": "folio_train_173", "prediction": "all x.(Person(x) -> (TakeBus(x) | DriveToDestination(x)))", "score": 0}
{"id": "folio_train_174", "prediction": "all x.(HasCar(x) -> ChoosesToDrive(x))", "score": 0}
{"id": "folio_train_175", "prediction": "-exists x.(Student(x) & DrivesToDestination(x))", "score": 0}
{"id": "folio_train_176", "prediction": "(HasCar(James) | WorksAtMeta(James)))", "score": -1}
{"id": "folio_train_177", "prediction": "all x.(James(x) -> HighIncome(x))", "score": 0}
{"id": "folio_train_178", "prediction": "all x.(James(x) -> -HighIncome(x))", "score": 0}
{"id": "folio_train_179", "prediction": "James is Student(James)", "score": -1}
{"id": "folio_train_180", "prediction": "(DrivesToDestination(James) | Student(James)))", "score": -1}
{"id": "folio_train_181", "prediction": "all x.(James(x) -> (DrivesToDestination(x) | Student(x)))", "score": 0}
{"id": "folio_train_182", "prediction": "all x.((James(x) & (DrivesToDestination(x) | Student(x))) -> (HighIncome(x) & Student(x)))", "score": 0}
{"id": "folio_train_183", "prediction": "all x.(Student(x) -> (GoesToPark(x) | GoesToMovies(x)))", "score": 0}
{"id": "folio_train_184", "prediction": "-exists x.(Student(x) & EnjoysNature(x) & FreeTime(x))", "score": 0}
{"id": "folio_train_185", "prediction": "all x.((Student(x) & GoesToMovies(x)) -> EnjoysNature(x))", "score": 0}
{"id": "folio_train_186", "prediction": "all x.((Student(x) & -HasClassDuringWeekend(x)) -> FreeTimeDuringWeekend(x))", "score": 0}
{"id": "folio_train_187", "prediction": "all x.((Student(x) & -SummerCamp(x)) -> -HasClassDuringWeekend(x))", "score": 0}
{"id": "folio_train_188", "prediction": "(-HasClass(James,Weekend))", "score": 0}
{"id": "folio_train_189", "prediction": "James is in summercamp.", "score": -1}
{"id": "folio_train_190", "prediction": "all x.(James(x) -> (GoesToPark(x) | InSummerCamp(x)))", "score": 0}
{"id": "folio_train_191", "prediction": "-exists x.(TelevisionStar(x) & CertifiedPublicAccountant(x))", "score": 0}
{"id": "folio_train_192", "prediction": "all x.(CertifiedPublicAccountant(x) -> GoodBusinessSense(x))", "score": 0}
{"id": "folio_train_193", "prediction": "all x.(TelevisionStar(x) -> GoodBusinessSense(x))", "score": 0}
{"id": "folio_train_194", "prediction": "exists x.(Student(x) & GoodAtMath(x) & GoodAtChemistry(x))", "score": 0}
{"id": "folio_train_195", "prediction": "all x.((Student(x) & GoodAtChemistry(x)) -> EnjoysConductingExperiments(x))", "score": 0}
{"id": "folio_train_196", "prediction": "all x.((Student(x) & EnjoysConductingExperiments(x)) -> GoodAtPlanning(x))", "score": 0}
{"id": "folio_train_197", "prediction": "-exists x.(Student(x) & GoodAtPlanning(x) & AwardedDeansList(x))", "score": 0}
{"id": "folio_train_198", "prediction": "all x.(James(x) -> ((GoodAtChemistry(x) & AwardedDeansList(x)) | (-GoodAtChemistry(x) & AwardedDeansList(x))))", "score": 0}
{"id": "folio_train_199", "prediction": "all x.(James(x) -> GoodAtPlanning(x))", "score": 0}
{"id": "folio_train_200", "prediction": "all x.(James(x) -> (GoodAtPlanning(x) | GoodAtMath(x)))", "score": 0}
{"id": "folio_train_201", "prediction": "all x.(James(x) -> (GoodAtChemistry(x) | GoodAtMath(x)))", "score": 0}
{"id": "folio_train_202", "prediction": "all x.((James(x) & (GoodAtChemistry(x) | AwardedDeansList(x))) -> (GoodAtPlanning(x) | GoodAtMath(x)))", "score": 0}
{"id": "folio_train_203", "prediction": "all x.((LeetcodeProblem(x) & EasyLevel(x)) -> LowerACRateThan(x,20))", "score": 0}
{"id": "folio_train_204", "prediction": "all x.((LeetcodeProblem(x) & RecommendedToNovees(x)) -> Easy(x))", "score": 0}
{"id": "folio_train_205", "prediction": "all x.(LeetodeProblem(x) -> (Easy(x) | Hard(x)))", "score": 0}
{"id": "folio_train_206", "prediction": "all x.((LeetcodeProblem(x) & StartedByMoreThan1000Users(x)) -> Hard(x))", "score": 0}
{"id": "folio_train_207", "prediction": "all x.((Sum(x) & Novice(x)) -> RecommendedTo(x,2))", "score": 0}
{"id": "folio_train_208", "prediction": "all x.((4Sum(x) & StartedByMoreThan(x,1000)) -> StartedBy(x,1))", "score": 0}
{"id": "folio_train_209", "prediction": "2Sum is a LeetcodeProblem(x) & EasyLevel(x))", "score": -1}
{"id": "folio_train_210", "prediction": "all x.((LeetcodeProblem(x) & Novice(x)) -> 4Sum(x))", "score": 0}
{"id": "folio_train_211", "prediction": "all x.((Sum(x) & ACRateHigherThan(x,20)) -> Has(x,20))", "score": 0}
{"id": "folio_train_212", "prediction": "all x.(RentalCar(x) -> CostsRenterMoney(x))", "score": 0}
{"id": "folio_train_213", "prediction": "all x.((Sarah(x) & GoesTo(x,VT)) -> DrivesTo(x,VT))", "score": 0}
{"id": "folio_train_214", "prediction": "all x.((Person(x) & -OwnsCar(x)) -> (BorrowCar(x) | RentCar(x)))", "score": 0}
{"id": "folio_train_215", "prediction": "(-OwnsCar(Sarah))", "score": 0}
{"id": "folio_train_216", "prediction": "all x.((Sarah(x) & Car(y)) -> -Borrows(x,y))", "score": 0}
{"id": "folio_train_217", "prediction": "Sarah is going to goCampingInVenice(Sarah)", "score": -1}
{"id": "folio_train_218", "prediction": "all x.(Camping(x) -> GoToPlace(x))", "score": 0}
{"id": "folio_train_219", "prediction": "all x.(Sarah(x) -> SpendsMoney(x))", "score": 0}
{"id": "folio_train_220", "prediction": "all x.((Person(x) & AttendsWeddings(x)) -> (GettingMarried(x) | HasFriends(x) & GettingMarried(x)))", "score": 0}
{"id": "folio_train_221", "prediction": "all x.((Preteen(x) & YoungChild(x)) -> (-GettingMarried(x) | HasFriends(x) & Married(x)))", "score": 0}
{"id": "folio_train_222", "prediction": "all x.((People(x) & EnjoysCelebratingLifeMilestoneEvents(x)) -> AttendsWeddings(x))", "score": 0}
{"id": "folio_train_223", "prediction": "all x.((Person(x) & FondOfLargeOrganizedGroupFunctions(x)) -> EnjoysCelebratingLifeMilestoneEvents(x))", "score": 0}
{"id": "folio_train_224", "prediction": "all x.((Outgoing(x) & VeryStirring(x)) -> FondOfLargeOrganizedGroupFunctions(x))", "score": 0}
{"id": "folio_train_225", "prediction": "all x.((Preteen(x) | YoungChild(x)) & AttendsWeddings(x)) -> (-GettingMarried(x) | HasFriendsGettingMarried(x)))", "score": -1}
{"id": "folio_train_226", "prediction": "all x.(Caroline(x) -> (Outgoing(x) & VeryStirring(x)))", "score": 0}
{"id": "folio_train_227", "prediction": "all x.(Carol(x) -> (Preteen(x) | YoungChild(x)))", "score": 0}
{"id": "folio_train_228", "prediction": "-(EnjoysCelebratingLifeMilestoneEvents(Caroline) & -(Outgoing(Caroline) & VeryStirring(Caroline))))", "score": -1}
{"id": "folio_train_229", "prediction": "all x.(Republican(x) -> AntiAbortion(x))", "score": 0}
{"id": "folio_train_230", "prediction": "(Republican(republican) | Democratic(republican))", "score": 0}
{"id": "folio_train_231", "prediction": "-exists x.(Democrat(x) & Conservative(x))", "score": 0}
{"id": "folio_train_232", "prediction": "all x.(Conservative(x) | Liberal(x))", "score": 0}
{"id": "folio_train_233", "prediction": "all x.((Official(x) & U.S.Government(x)) -> (Conservative(x) | Republican(x)))", "score": -1}
{"id": "folio_train_234", "prediction": "all x.((U.S.GovernmentOfficial(x) & Democratic(x)) -> Official(x))", "score": -1}
{"id": "folio_train_235", "prediction": "all x.((Official(x) & U.S.Government(x)) -> (AntiAbortion(x) & Liberal(x)))", "score": -1}
{"id": "folio_train_236", "prediction": "all x.((Official(x) & U.S.Government(x)) -> (AntiAbortion(x) | Liberal(x)))", "score": -1}
{"id": "folio_train_237", "prediction": "all x.((U.S.GovernmentOfficial(x) & -AntiAbortion(x) & Republican(x)) -> (-AntiAbortion(x) & -Liberal(x)))", "score": -1}
{"id": "folio_train_238", "prediction": "all x.((U.S.GovernmentOfficial(x) & AntiAbortion(x) & Liberal(x)) -> (Republican(x) | Liberal(x)))", "score": -1}
{"id": "folio_train_239", "prediction": "all x.((U.S.GovernmentOfficial(x) & (Conservative(x) | AntiAbortion(x))) -> (Conservative(x) & Liberal(x)) | -Conservative(x) & Liberal(x)))", "score": -1}
{"id": "folio_train_240", "prediction": "all x.((U.S.GovernmentOfficial(x) & (Conservative(x) | AntiAbortion(x))) -> (-Democrat(x) | Liberal(x)))", "score": -1}
{"id": "folio_train_241", "prediction": "all x.((U.S.GovernmentOfficial(x) & (AntiAbortion(x) | Liberal(x))) -> (AntiAbortion(x) | Liberal(x)))", "score": -1}
{"id": "folio_train_242", "prediction": "all x.(AdvocatesHighTargetRates(x) -> Republicans(x))", "score": 0}
{"id": "folio_train_243", "prediction": "exists x.(Republican(x) & -Conservative(x))", "score": 0}
{"id": "folio_train_244", "prediction": "exists x.(Conservative(x) & AdvocateOfHighTarget(x))", "score": 0}
{"id": "folio_train_245", "prediction": "-exists x.(Athlete(x) & SlowRunner(x))", "score": 0}
{"id": "folio_train_246", "prediction": "all x.(ProfessionalBasketballPlayer(x) -> Athlete(x))", "score": 0}
{"id": "folio_train_247", "prediction": "all x.(NBAPlayer(x) -> ProfessionalBasketballPlayer(x))", "score": 0}
{"id": "folio_train_248", "prediction": "all x.(KnicksPlayer(x) -> NBAPlayer(x))", "score": 0}
{"id": "folio_train_249", "prediction": "(-ProfessionalBasketballPlayer(Jim) | SlowRunner(Jim)))", "score": -1}
{"id": "folio_train_250", "prediction": "all x.(KnicksPlayer(x) -> Jim(x))", "score": 0}
{"id": "folio_train_251", "prediction": "-KnicksPlayer(Jim)", "score": 0}
{"id": "folio_train_252", "prediction": "(Athlete(Jim) & Athlete(Jim))", "score": 0}
{"id": "folio_train_253", "prediction": "all x.(Kid(x) -> LovesAnimals(x))", "score": 0}
{"id": "folio_train_254", "prediction": "all x.(Toddler(x) -> Kid(x))", "score": 0}
{"id": "folio_train_255", "prediction": "all x.(LovesAnimals(x) -> -Bad(x))", "score": 0}
{"id": "folio_train_256", "prediction": "all x.(Pirate(x) -> Bad(x))", "score": 0}
{"id": "folio_train_257", "prediction": "all x.((Nancy(x) & -Pirate(x)) -> LovesAnimals(x))", "score": 0}
{"id": "folio_train_258", "prediction": "all x.((Nancy(x) & -Toddler(x)) -> Bad(x))", "score": 0}
{"id": "folio_train_259", "prediction": "(Pirate(Nancy) & Pirate(Nancy))", "score": 0}
{"id": "folio_train_260", "prediction": "-(Nancy(Nancy) & Pirate(Nancy) & Toddler(Nancy))", "score": 0}
{"id": "folio_train_261", "prediction": "all x.((Nancy(x) & -Pirate(x) & -Toddler(x)) -> (LovesAnimals(x) & Kid(x)))", "score": 0}
{"id": "folio_train_262", "prediction": "(DirectedByLanaWilson(Lana Wilson,AfterTiller,Departure) & DirectedByLanaWilson(LanaWilson,MissAmericana))", "score": -1}
{"id": "folio_train_263", "prediction": "all x y.((Film(x) & Person(y) & DirectedBy(x,y)) -> Filmmaker(y))", "score": 0}
{"id": "folio_train_264", "prediction": "After Tiller is a Documentary.", "score": -1}
{"id": "folio_train_265", "prediction": "all x.(Documentary(x) -> Film(x))", "score": 0}
{"id": "folio_train_266", "prediction": "LanaWilson(Lana) is from Kirkland(Lana))", "score": -1}
{"id": "folio_train_267", "prediction": "(USCity(Kirkland) & LocatedIn(Kirkland))", "score": 0}
{"id": "folio_train_268", "prediction": "all x y.((Person(x) & City(y) & Country(y)) -> From(x,y))", "score": 0}
{"id": "folio_train_269", "prediction": "After Tiller is NominatedForIndependentSpiritAward(Tiller,BestDocumentary)", "score": -1}
{"id": "folio_train_270", "prediction": "LanaWilson(Lana) is a USFilmmaker(Lana)", "score": -1}
{"id": "folio_train_271", "prediction": "all x.(MissAmericana(x) -> -DirectedByFilmmakerFromKirkland(x))", "score": 0}
{"id": "folio_train_272", "prediction": "Lana Wilson has won IndependentSpiritAward(lana@gmail.com)", "score": -1}
{"id": "folio_train_273", "prediction": "all x.((Bear(x) & InZoo(x)) -> -Wild(x))", "score": 0}
{"id": "folio_train_274", "prediction": "exists x.(Bear(x) & Zoo(x))", "score": 0}
{"id": "folio_train_275", "prediction": "-all x.(Bear(x) -> Wild(x))", "score": 0}
{"id": "folio_train_276", "prediction": "all x y.((Person(x) & Country(y) & LeaderOf(x,y)) -> Monarchy(x))", "score": 0}
{"id": "folio_train_277", "prediction": "all x.(Leader(x) -> (King(x) | Queen(x)))", "score": 0}
{"id": "folio_train_278", "prediction": "all x.(Queen(x) -> Female(x))", "score": 0}
{"id": "folio_train_279", "prediction": "all x.(King(x) -> Male(x))", "score": 0}
{"id": "folio_train_280", "prediction": "Elizabeth is Queen.", "score": -1}
{"id": "folio_train_281", "prediction": "Elizabeth is leader(Elizabeth) & Leader(Elizabeth))", "score": -1}
{"id": "folio_train_282", "prediction": "Elizabeth is King(Elizabeth)", "score": -1}
{"id": "folio_train_283", "prediction": "Elizabeth is in Monarchy.", "score": -1}
{"id": "folio_train_284", "prediction": "all x y.((Elizabeth(x) & Country(y)) -> Leader(x,y))", "score": 0}
{"id": "folio_train_285", "prediction": "all x.((Person(x) & MakesOwnMatchaTeasEveryMorningWithCeremonialGradeMatchaPowder(x)) -> (-WakeUpLast(x) & StartSchedulesPastPastRegularly(x)))", "score": 0}
{"id": "folio_train_286", "prediction": "all x.((People(x) & LivesInCalifornia(x) & AttendsYogaClassesRegularly(x)) -> MakesOwnMatchaTeasEveryMorningWithCeremonialGradeMatchaPowder(x))", "score": 0}
{"id": "folio_train_287", "prediction": "all x.((WorksInEntertainmentIndustryAsHighProfileCelebrities(x)) -> (WakeUpLast(x) & StartSchedulesPastPastRegularly(x)))", "score": 0}
{"id": "folio_train_288", "prediction": "all x.((Person(x) & -Regular9-5Jobs(x)) -> HighProfileCelebrities(x))", "score": -1}
{"id": "folio_train_289", "prediction": "all x.((Person(x) & PrefersWorkingAtHome(x)) -> -Regular9-5Jobs(x))", "score": -1}
{"id": "folio_train_290", "prediction": "(PrefersWorkingAtHome(Clay) & ((PrefersWorkingAtHome(Clay) & GoesToOfficeEveryDay(Clay) & MakesOwnMatchaTeas(Clay)) | (PrefersWorkingAtHome(Clay) & -MakesOwnMatchaTeas(Clay) & GoesToOfficeEveryDay(Clay))))", "score": 0}
{"id": "folio_train_291", "prediction": "(-Regular9-5Job(Clay))", "score": -1}
{"id": "folio_train_292", "prediction": "Clay lives in California and attendsYogaClassesRegularly(Clay)", "score": -1}
{"id": "folio_train_293", "prediction": "(-(PrefersWorkingAtHome(Clay) & -PrefersWorkingAtOffice(Clay)) | (LivesInCalifornia(Clay) & AttendsYogaClassesRegularly(Clay))))", "score": -1}
{"id": "folio_train_294", "prediction": "Thomas Barber (*1927 & EnglishProfessionalFootballer(x))", "score": -1}
{"id": "folio_train_295", "prediction": "Thomas Barber played in Football League for Aston Villa.", "score": -1}
{"id": "folio_train_296", "prediction": "all x.((TomTomBarber(x) & HalfBack(x) & InsideLeft(x)) -> PlayedAs(x,y))", "score": 0}
{"id": "folio_train_297", "prediction": "(WinningGoal(ThomasBarber) & 1913FACupFinal(ThomasBarber))", "score": 0}
{"id": "folio_train_298", "prediction": "Thomas Barber played in Football League for Bolton Wanderers (BoltonWanderers) & BoltonWanderers(Wanderers) & BoltonWanderers(Wanderers))", "score": -1}
{"id": "folio_train_299", "prediction": "all x.((ThomasBarber(x) & InsideLeft(x)) -> Played(x,y))", "score": 0}
{"id": "folio_train_300", "prediction": "all x y.((EnglandProfessionalFootballer(x) & FACupFinal(y) & 1913(x)) -> ScoresWinnerGoal(x,y))", "score": 0}
{"id": "folio_train_301", "prediction": "all x.(PlayInConcert(x) -> GoodAtPlayingInstrument(x))", "score": 0}
{"id": "folio_train_302", "prediction": "(PlaysPiano(Peter) | PlaysViolin(Peter) | PlaysSaxophone(Peter))", "score": 0}
{"id": "folio_train_303", "prediction": "all x y.((Peter(x) & ConcertHall(y)) -> InvitedToPlayPiano(x,y))", "score": 0}
{"id": "folio_train_304", "prediction": "(InvitedToPerform(Oliver,Concert) & InvitedToPerform(Peter,Concert))", "score": 0}
{"id": "folio_train_305", "prediction": "all x y.((Oliver(x) & Peter(y)) -> PlaysDifferentInstrument(x,y))", "score": 0}
{"id": "folio_train_306", "prediction": "Oliver playsPianoInConcert(Oliver)", "score": -1}
{"id": "folio_train_307", "prediction": "Oliver plays violin in the concert.", "score": -1}
{"id": "folio_train_308", "prediction": "all x.((Peter(x) & GoodAtPlayingPiano(x)) -> GoodAtPlayingPiano(x))", "score": 0}
{"id": "folio_train_309", "prediction": "all x.((CanGoUnderwater(x)) -> EnjoysWater(x))", "score": 0}
{"id": "folio_train_310", "prediction": "all x.((Animal(x) & CanSwim(x)) -> CanGoUnderwater(x))", "score": 0}
{"id": "folio_train_311", "prediction": "all x.(Animal(x) -> (CanSwim(x) | CanWalk(x)))", "score": 0}
{"id": "folio_train_312", "prediction": "all x.((Animal(x) & Walks(x)) -> TravelsOnLand(x))", "score": 0}
{"id": "folio_train_313", "prediction": "all x.((Animal(x) & EnjoysWater(x)) -> SplashWaterAround(x))", "score": 0}
{"id": "folio_train_314", "prediction": "all x.((Animal(x) & TravelsOnLand(x)) -> EnjoysBakingInSun(x))", "score": 0}
{"id": "folio_train_315", "prediction": "all x.(George(x) -> (SpoilsWater(x) & CanSwim(x)))", "score": 0}
{"id": "folio_train_316", "prediction": "all x.(Liam(x) -> ((Animal(x) & CanWalk(x) & EnjoysWater(x)) | -Animal(x) & -CanWalk(x) & -EnjoysWater(x))))", "score": -1}
{"id": "folio_train_317", "prediction": "all x.(George(x) -> EnjoysBreakingInSun(x))", "score": 0}
{"id": "folio_train_318", "prediction": "all x.(Liam(x) -> (EnjoysBreakingInSun(x) & EnjoysSplashingWater(x)))", "score": 0}
{"id": "folio_train_319", "prediction": "-(EnjoysBreakingInSun(Liam) | EnjoysSplashingWater(Liam)))", "score": -1}
{"id": "folio_train_320", "prediction": "all x.(CancerBiology(x) -> (FindsGeneticAlterations(x) & ConveysSelectiveAdvantage(x)))", "score": 0}
{"id": "folio_train_321", "prediction": "all x y.((CancerResearcher(x) & CancerGrowth(y)) -> RangingImportanceOfSubstitutionsByPValue(x,y))", "score": 0}
{"id": "folio_train_322", "prediction": "all x.(PValue(x) -> (TreethForBelief(x) & -MetametricsOfEffect(x)))", "score": 0}
{"id": "folio_train_323", "prediction": "all x y.((CancerResearcher(x) & CancerEffectSize(y)) -> (Uses(x,y) & DeterminesRelativeImportanceOfGeneticAlterations(x) & ConveysSelectiveAdvantage(x,y)))", "score": 0}
{"id": "folio_train_324", "prediction": "all x.(PValue(x) -> (RepresentsSelectionIntensity(x) & SomaticVariantsInCancerCellLineages(x)))", "score": 0}
{"id": "folio_train_325", "prediction": "all x.(CancerEffectSize(x) -> (PreferredByMajorityOfCancerResearchers(x) & PreferableByMajority(x)))", "score": 0}
{"id": "folio_train_326", "prediction": "all x.(PValue(x) -> -RepresentsMetadataOfEffect(x))", "score": 0}
{"id": "folio_train_327", "prediction": "all x.(DispensableThing(x) -> EnvironmentFriendly(x))", "score": 0}
{"id": "folio_train_328", "prediction": "all x.(Woodware(x) -> Dispensable(x))", "score": 0}
{"id": "folio_train_329", "prediction": "all x.(Paper(x) -> Woodware(x))", "score": 0}
{"id": "folio_train_330", "prediction": "-exists x.(GoodThing(x) & BadThing(x))", "score": 0}
{"id": "folio_train_331", "prediction": "all x.(EnvironmentFriendly(x) -> Good(x))", "score": 0}
{"id": "folio_train_332", "prediction": "all x.(Worksheet(x) -> (Paper(x) | EnvironmentFriendly(x)))", "score": 0}
{"id": "folio_train_333", "prediction": "all x.(Worksheet(x) -> Dispensable(x))", "score": 0}
{"id": "folio_train_334", "prediction": "all x.(Worksheet(x) -> -Dispensable(x))", "score": 0}
{"id": "folio_train_335", "prediction": "all x.(Worksheet(x) -> Bad(x))", "score": 0}
{"id": "folio_train_336", "prediction": "all x.(Worksheet(x) -> -Bad(x))", "score": 0}
{"id": "folio_train_337", "prediction": "-exists x.(Reptile(x) & HasFur(x))", "score": 1}
{"id": "folio_train_338", "prediction": "all x.(Snake(x) -> Reptile(x))", "score": 1}
{"id": "folio_train_339", "prediction": "exists x.(Snake(x) & HasFur(x))", "score": 1}
{"id": "folio_train_340", "prediction": "all x.(Building(x) -> Low(x))", "score": 0}
{"id": "folio_train_341", "prediction": "all x.((Building(x) & ManagedByYaleHousing(x)) -> NewHanover(x))", "score": 0}
{"id": "folio_train_342", "prediction": "all x.((Building(x) & InMetropolitan(x)) -> High(x))", "score": 0}
{"id": "folio_train_343", "prediction": "all x.((Building(x) & OwnedByBanana(x)) -> LocatedInMidtown(x))", "score": 0}
{"id": "folio_train_344", "prediction": "all x.((Building(x) & BloombergLogo(x)) -> OwnedByBananas(x))", "score": 0}
{"id": "folio_train_345", "prediction": "all x.(TowerA(x) -> ManagedByYaleHousing(x))", "score": 0}
{"id": "folio_train_346", "prediction": "all x.(TowerB(x) -> HasBananasLogo(x))", "score": 0}
{"id": "folio_train_347", "prediction": "All x.(TowerA(x) -> Low(x))", "score": -1}
{"id": "folio_train_348", "prediction": "Tower B is not located in Manhattans.", "score": -1}
{"id": "folio_train_349", "prediction": "TowerB is located in New Haven.", "score": -1}
{"id": "folio_train_350", "prediction": "-exists x.(ColdBloodedAnimal(x) & Bird(x))", "score": 0}
{"id": "folio_train_351", "prediction": "all x.(Reptile(x) -> ColdBlooded(x))", "score": 0}
{"id": "folio_train_352", "prediction": "all x.(Animal(x) -> (Bird(x) | EatsAnimals(x)))", "score": 0}
{"id": "folio_train_353", "prediction": "all x.((Animal(x) & EatsOtherAnimals(x)) -> Carnivore(x))", "score": 0}
{"id": "folio_train_354", "prediction": "all x.(Ron(x) -> (-ColdBlooded(x) & -Carnivore(x)))", "score": 0}
{"id": "folio_train_355", "prediction": "(-Carnivore(Henry) & -Lizard(Henry))", "score": 0}
{"id": "folio_train_356", "prediction": "Ron is Lizard(Ron)", "score": -1}
{"id": "folio_train_357", "prediction": "((Henry(Henry) & Reptile(Henry)) | (Ron(Henry) & Animal(Henry))))", "score": -1}
{"id": "folio_train_358", "prediction": "(-(Reptile(Ron) & ColdBlooded(Henry)) -> -Reptile(Ron))", "score": 0}
{"id": "folio_train_359", "prediction": "all x.(Ambiortus(x) -> PrehistoricBirdGenus(x))", "score": 0}
{"id": "folio_train_360", "prediction": "all x.(AmbiorusDementjevi(x) -> (LimitedSpeciesOfAmbiortus(x) & KnownSpeciesOfAmbiortus(x)))", "score": 0}
{"id": "folio_train_361", "prediction": "All x.(MongolRegion(x) -> AmbiorusDementjevi(x))", "score": -1}
{"id": "folio_train_362", "prediction": "Yevgeny Kurochkin was the discoverer of Ambiortus.", "score": -1}
{"id": "folio_train_363", "prediction": "Yevgeny Kurochkin discovered a new birdgenus.", "score": -1}
{"id": "folio_train_364", "prediction": "exists x.(Ambiortus(x) & -LivesInMongolRegion(x))", "score": 0}
{"id": "folio_train_365", "prediction": "Yevgeny Kurochkin lebte in MongolRegion.", "score": -1}
{"id": "folio_train_366", "prediction": "all x.(Ambiortus(x) -> LivesInMongolRegion(x))", "score": 0}
{"id": "folio_train_367", "prediction": "all x.((UsesFootball(x) & ThrowsFootball(x)) -> CanThrewFootball(x))", "score": 0}
{"id": "folio_train_368", "prediction": "all x.(PlaysFootball(x) -> UsesFootball(x))", "score": 0}
{"id": "folio_train_369", "prediction": "all x.((Player(x) & Football(x)) | BasketballPlayer(x))", "score": 0}
{"id": "folio_train_370", "prediction": "all x.(BasketballPlayer(x) -> Tall(x))", "score": 0}
{"id": "folio_train_371", "prediction": "all x.((CanThrewFootball(x) & HasSpiral(x)) -> CanThrewFootballWithSpiral(x))", "score": 0}
{"id": "folio_train_372", "prediction": "all x.(Tall(x) -> InShape(x))", "score": 0}
{"id": "folio_train_373", "prediction": "all x.((Jack(x) & -Tall(x) & -BasketballPlayer(x)) -> -Tall(x) & -CanThrewFootball(x))", "score": 0}
{"id": "folio_train_374", "prediction": "Jack plays football.", "score": -1}
{"id": "folio_train_375", "prediction": "(InShape(Jack))", "score": 0}
{"id": "folio_train_376", "prediction": "-Shape(Jack)", "score": 0}
{"id": "folio_train_377", "prediction": "FortTiconderoga is the currentNameForFortCarillon.", "score": -1}
{"id": "folio_train_378", "prediction": "Pierre de Rigaud de Vaudreuil built Fort Carillon.", "score": -1}
{"id": "folio_train_379", "prediction": "FortCarillon was located in NewFrance.", "score": -1}
{"id": "folio_train_380", "prediction": "(-InEurope(NewFrance))", "score": 0}
{"id": "folio_train_381", "prediction": "Pierre de Rigaud de Vaudreuil built a fort in NewFrance.", "score": -1}
{"id": "folio_train_382", "prediction": "Pierre de Rigaud de Vaudreuil built a fort in New England.", "score": -1}
{"id": "folio_train_383", "prediction": "all x.(FortCarillon(x) -> LocatedInEurope(x))", "score": 0}
{"id": "folio_train_384", "prediction": "-exists x.(SoccerPlayer(x) & ProfessionalBasketballPlayer(x))", "score": 0}
{"id": "folio_train_385", "prediction": "all x.(NBAPlayer(x) -> ProfessionalBasketballPlayer(x))", "score": 0}
{"id": "folio_train_386", "prediction": "all x.(Defendant(x) -> SoccerPlayer(x))", "score": 0}
{"id": "folio_train_387", "prediction": "all x.(CenterbackPlayer(x) -> Defender(x))", "score": 0}
{"id": "folio_train_388", "prediction": "all x.((StephenCurry(x) & (NBAPlayer(x) | SoccerPlayer(x))) -> ProfessionalBasketballPlayer(x))", "score": 0}
{"id": "folio_train_389", "prediction": "StephenCurry(StephenCurry) is NBAPlayer(StephenCurry)", "score": -1}
{"id": "folio_train_390", "prediction": "all x.((StephenCurry(x) & CenterbackPlayer(x)) -> Plays(x,Curry))", "score": 0}
{"id": "folio_train_391", "prediction": "(-CenterbackPlayer(StephenCurry))", "score": 0}
{"id": "folio_train_392", "prediction": "-exists x.(Song(x) & Visual(x))", "score": 0}
{"id": "folio_train_393", "prediction": "all x.(FolkSong(x) -> Songs(x))", "score": 0}
{"id": "folio_train_394", "prediction": "all x.(Video(x) -> Visual(x))", "score": 0}
{"id": "folio_train_395", "prediction": "all x.(Movie(x) -> Video(x))", "score": 0}
{"id": "folio_train_396", "prediction": "all x.(SciFiMovie(x) -> Movie(x))", "score": 0}
{"id": "folio_train_397", "prediction": "Inception is a sci-fi movie.", "score": -1}
{"id": "folio_train_398", "prediction": "all x.(Mac(x) -> (-FolkSong(x) & -SciFiMovie(x)))", "score": 0}
{"id": "folio_train_399", "prediction": "Inception is a folk song.", "score": -1}
{"id": "folio_train_400", "prediction": "Inception is not a folk song.", "score": -1}
{"id": "folio_train_401", "prediction": "all x.(Inception(x) -> (Video(x) | FolkSong(x)))", "score": 0}
{"id": "folio_train_402", "prediction": "all x.(Mac(x) -> Video(x))", "score": 0}
{"id": "folio_train_403", "prediction": "all x.(Extrovert(x) -> OvertlyExpressive(x))", "score": 0}
{"id": "folio_train_404", "prediction": "all x.(Person(x) -> (Extrovert(x) | Introvert(x)))", "score": 0}
{"id": "folio_train_405", "prediction": "all x.(Introvert(x) -> (Shy(x) & Reticent(x)))", "score": 0}
{"id": "folio_train_406", "prediction": "-exists x.(Shy(x) & Reticent(x) & LikesToTalkToSons(x))", "score": 0}
{"id": "folio_train_407", "prediction": "(-Extrovert(Jeff) & LikesToTalkToSonders(Jeff))", "score": 0}
{"id": "folio_train_408", "prediction": "all x.(Jeff(x) -> (Shy(x) & Reticent(x)))", "score": 0}
{"id": "folio_train_409", "prediction": "all x.(Jeff(x) -> (OvertlyExpressive(x) & LikesToTalkToSonders(x)))", "score": 0}
{"id": "folio_train_410", "prediction": "all x.((Jeff(x) & (OvertlyExpressive(x) & LikesToTalkToSnakes(x) | -OvertlyExpressive(x) & LikesToTalkToSnakes(x))) -> -Extrovert(x) & -LikesToTalkToSnakes(x))", "score": 0}
{"id": "folio_train_411", "prediction": "-exists x.(LowScoringPlayer(x) & TopPlayer(x))", "score": 0}
{"id": "folio_train_412", "prediction": "all x.(BasketballPlayer(x) -> ((TopPlayer(x) & InLowerLiga(x)) | HighPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercent(x)))", "score": 0}
{"id": "folio_train_413", "prediction": "all x.((Player(x) & HighPercent3Pointer(x)) -> SolidAtShooting2Pointers(x))", "score": 0}
{"id": "folio_train_414", "prediction": "all x.((Player(x) & SolidAtShooting2Pointers(x)) -> BadAtMidRangeShots(x))", "score": 0}
{"id": "folio_train_415", "prediction": "all x.(Candace(x) -> ((LowScoringPlayer(x) | HighPercentage3Pointers(x))))", "score": 0}
{"id": "folio_train_416", "prediction": "all x.((Candace(x) & TopPlayer(x)) -> TopPlayerInLiga(x))", "score": 0}
{"id": "folio_train_417", "prediction": "all x.((Candace(x) & MidRange(x)) -> BadAt(x,Candace))", "score": 0}
{"id": "folio_train_418", "prediction": "(StandardAtShooting2Pointers(Candace) | BadAtShootingMidRangeShots(Candace))", "score": 0}
{"id": "folio_train_419", "prediction": "all x.(Canace(x) -> (StillAtShooting2Pointers(x) | BadAtShootingMidRangeShots(x)))", "score": 0}
{"id": "folio_train_420", "prediction": "all x.(Candace(x) -> (LowScoringPlayer(x) | BadAtMidRangeShots(x)))", "score": 0}
{"id": "folio_train_421", "prediction": "all x.(Candace(x) -> (LowScoringPlayer(x) | BadAtMidRangeShots(x)))", "score": 0}
{"id": "folio_train_422", "prediction": "all x.((Player(x) & (SuccessfullyShotsHighPercent3Pointers(x) | BadAtMidRangeShots(x))) -> Candace(x))", "score": 0}
{"id": "folio_train_423", "prediction": "all x.((Player(x) & -StandardAtShooting2-Pointers(x) & BadAtShootingMidRangeShots(x)) -> (-StandardAtShooting2-Pointers(x) & HighPercentPercentPercentShooting3Pointers(x)))", "score": -1}
{"id": "folio_train_424", "prediction": "all x.((Candace(x) & (StillAtShooting2Pointers(x) | HighPercentageOf3Pointers(x))) -> (TopPlayerInLiga(x) & BadAtMidRangeShots(x)))", "score": 0}
{"id": "folio_train_425", "prediction": "-exists x.(Plant(x) & Fungus(x))", "score": 1}
{"id": "folio_train_426", "prediction": "all x.(Mushroom(x) -> Fungus(x))", "score": 1}
{"id": "folio_train_427", "prediction": "-exists x.(Plant(x) & Mushroom(x))", "score": 1}
{"id": "folio_train_428", "prediction": "all x.(NewYorkCity(x) -> EastCoast(x))", "score": 0}
{"id": "folio_train_429", "prediction": "all x.(Seattle(x) -> WestCoast(x))", "score": 0}
{"id": "folio_train_430", "prediction": "all x y.((Person(x) & City(y) & EastCoast(x) & WestCoast(y)) -> LongFlight(x))", "score": 0}
{"id": "folio_train_431", "prediction": "all x.((Passenger(x) & SeattleFlight(x) & NewYorkCity(y)) -> -FirstClass(x))", "score": 0}
{"id": "folio_train_432", "prediction": "all x.((Person(x) & LongFlight(x) & -FirstClass(x)) -> Uncomfortable(x))", "score": 0}
{"id": "folio_train_433", "prediction": "exists x.(Flight(x) & NewYorkCityToSeattle(x) & Uncomfortable(x))", "score": 0}
{"id": "folio_train_434", "prediction": "-exists x.(Road(x) & Clean(x))", "score": 0}
{"id": "folio_train_435", "prediction": "exists x.(Street(x) & Road(x))", "score": 0}
{"id": "folio_train_436", "prediction": "exists x.(Street(x) & Clean(x))", "score": 0}
{"id": "folio_train_437", "prediction": "all x.(Musician(x) -> HasBusyLives(x))", "score": 0}
{"id": "folio_train_438", "prediction": "SinghKaur(s) -> (Musician(s) & Famous(s)))", "score": -1}
{"id": "folio_train_439", "prediction": "all x.((Musician(x) & -Famous(x)) -> -MakesLotOfMoney(x))", "score": 0}
{"id": "folio_train_440", "prediction": "all x.(Musician(x) -> (Singer(x) | Writer(x)))", "score": 0}
{"id": "folio_train_441", "prediction": "all x.(SinghKaur(x) -> MakesLotOfMoney(x))", "score": 0}
{"id": "folio_train_442", "prediction": "Singh Kaur is a writer.", "score": -1}
{"id": "folio_train_443", "prediction": "SinghKaur has a veryBusyLife(SinghKaur)", "score": -1}
{"id": "folio_train_444", "prediction": "all x.(Building(x) -> Tall(x))", "score": 0}
{"id": "folio_train_445", "prediction": "all x.(Tall(x) -> HasHeight(x))", "score": 0}
{"id": "folio_train_446", "prediction": "all x.(Building(x) -> Magnificent(x))", "score": 0}
{"id": "folio_train_447", "prediction": "all x.((Cat(x) & Garfield(x) & MainCharacterOfFilmGarfield(x)) -> (Orange(x) & Fat(x) & LikesLasagne(x)))", "score": 0}
{"id": "folio_train_448", "prediction": "(Pet(Garfield) & Pet(Odie) & Pet(Garfield))", "score": 0}
{"id": "folio_train_449", "prediction": "Garfield hatesOdie.", "score": -1}
{"id": "folio_train_450", "prediction": "all x y.((Pet(x) & Pet(y) & HasSameOwner(x,y)) -> (Childish(x) & Possesses(x)))", "score": 0}
{"id": "folio_train_451", "prediction": "all x.(Cat(x) -> Pet(x))", "score": 0}
{"id": "folio_train_452", "prediction": "all x.((Film(x) & Garfield(x)) -> (Childish(x) & Possesses(x)))", "score": 0}
{"id": "folio_train_453", "prediction": "all x.(Human(x) -> Eats(x))", "score": 0}
{"id": "folio_train_454", "prediction": "all x.((Eats(x) & -Plant(x)) -> -Plant(x))", "score": 0}
{"id": "folio_train_455", "prediction": "all x.(Thing(x) -> (Plant(x) | Animal(x)))", "score": 0}
{"id": "folio_train_456", "prediction": "all x.(Goat(x) -> Animal(x))", "score": 0}
{"id": "folio_train_457", "prediction": "-exists x.(Dirt(x) & Animal(x))", "score": 0}
{"id": "folio_train_458", "prediction": "all x.(Hulu(x) -> (Goat(x) | Human(x)))", "score": 0}
{"id": "folio_train_459", "prediction": "all x.(Hulu(x) -> Eats(x))", "score": 0}
{"id": "folio_train_460", "prediction": "all x.(Hulu(x) -> -Eats(x))", "score": 0}
{"id": "folio_train_461", "prediction": "all x.(Hulu(x) -> Dirt(x))", "score": 0}
{"id": "folio_train_462", "prediction": "all x.(Hulu(x) -> (Animal(x) | Dirt(x)))", "score": 0}
{"id": "folio_train_463", "prediction": "all x.(Hulu(x) -> (Animal(x) | Dirt(x)))", "score": 0}
{"id": "folio_train_464", "prediction": "all x.((Hulu(x) & (Animal(x) | Dirt(x))) -> (Eats(x) & Dirt(x)))", "score": 0}
{"id": "folio_train_465", "prediction": "all x.(ControlledSubstance(x) -> Drug(x))", "score": 0}
{"id": "folio_train_466", "prediction": "exists x.(HarmfulSubstance(x) & BeneficialControlledSubstance(x))", "score": 0}
{"id": "folio_train_467", "prediction": "all x.((Child(x) & ExposedToControlledSubstance(x)) -> ChemicalEndangement(x))", "score": 0}
{"id": "folio_train_468", "prediction": "all x.(ChemicalEndangerment(x) -> Harmful(x))", "score": 0}
{"id": "folio_train_469", "prediction": "all x.(ControlledSubstancesAct(x) -> PassedIn(x,71))", "score": 0}
{"id": "folio_train_470", "prediction": "exists x.(Act(x) & PreventsHarmfulThings(x))", "score": 0}
{"id": "folio_train_471", "prediction": "all x.(ControlledSubstancesAct(x) -> PreventsHarmfulThings(x))", "score": 0}
{"id": "folio_train_472", "prediction": "exists x.(Drug(x) & Beneficial(x))", "score": 0}
{"id": "folio_train_473", "prediction": "all x.((Child(x) & ChemicalEndangerment(x)) -> InHarm(x))", "score": 0}
{"id": "folio_train_474", "prediction": "all x.(WorksAtCorporateJobs(x) -> -StartingNewCompany(x))", "score": 0}
{"id": "folio_train_475", "prediction": "all x.(Entrepreneur(x) -> StartsNewCompany(x))", "score": 0}
{"id": "folio_train_476", "prediction": "all x.(RiskAverse(x) -> WorkAtCorporateJobs(x))", "score": 0}
{"id": "folio_train_477", "prediction": "all x.(HasWorkingForOthers(x) -> Entrepreneur(x))", "score": 0}
{"id": "folio_train_478", "prediction": "all x.((MarkZuckerberg(x) & -(Entrepreneur(x) | HatesWorkingForOthers(x))) -> -RiskAversePerson(x))", "score": 0}
{"id": "folio_train_479", "prediction": "Mark Zuckerberg is an Entrepreneur(Mark Zuckerberg)", "score": -1}
{"id": "folio_train_480", "prediction": "Mark Zuckerberg is risk-averse.", "score": -1}
{"id": "folio_train_481", "prediction": "Mark Zuckerberg is not risk-averse.", "score": -1}
{"id": "folio_train_482", "prediction": "all x y.((House(x) & Kitchen(y)) -> (Upstairs(x) & Downstairs(y)))", "score": 0}
{"id": "folio_train_483", "prediction": "all x.((CookingInDownstairsKitchen(x) & AirConditionerRuning(x)) -> FirstFloorSmokey(x))", "score": 0}
{"id": "folio_train_484", "prediction": "all x y.((AirConditioner(x) & AirConditioner(y) & Running(x) & CookingInDownstairsKitchen(x)) -> SmokeTravelsToSecondFloor(y))", "score": 0}
{"id": "folio_train_485", "prediction": "all x.(Cooking(x) -> SmokyFirstFloor(x))", "score": 0}
{"id": "folio_train_486", "prediction": "all x.(CookingUpstairs(x) -> SmokyFirstFloor(x))", "score": 0}
{"id": "folio_train_487", "prediction": "all x.((Cooking(x) & Downstairs(x) & AirConditionerRunning(x)) -> SmokeUpstairs(x))", "score": 0}
{"id": "folio_train_488", "prediction": "All x.(NewYorkCity(x) -> UnitedStatesOfAmerica(x))", "score": -1}
{"id": "folio_train_489", "prediction": "all x.(UnitedStatesOfAmerica(x) -> PartOfNorthAmerica(x))", "score": 0}
{"id": "folio_train_490", "prediction": "all x.(NorthAmerica(x) -> WesternHemisphereOfEarth(x))", "score": 0}
{"id": "folio_train_491", "prediction": "all x.((NewYorkCity(x) & HighlyDeveloped(x)) -> HighlyDeveloped(x))", "score": 0}
{"id": "folio_train_492", "prediction": "all x y.((Place(x) & Place(y) & LocatedIn(x,y)) -> LocatedIn(x,y))", "score": 0}
{"id": "folio_train_493", "prediction": "all x.(HighlyDevelopedCity(x) -> (LocatedInWESTHemisphere(x) & LocatedInEarth(x)))", "score": 0}
{"id": "folio_train_494", "prediction": "all x.(USA(x) -> -LocatedInWideHemisphereOfEarth(x))", "score": 0}
{"id": "folio_train_495", "prediction": "all x.(NewYorkCity(x) -> NewYorkState(x))", "score": 0}
{"id": "folio_train_496", "prediction": "all x.((Poem(x) & AncientRomanWriterCatullus(x)) -> Callus4(x))", "score": 0}
{"id": "folio_train_497", "prediction": "all x.(Callus4(x) -> (RetirementOfWellTraveledShip(x) & WellTraveledShip(x)))", "score": 0}
{"id": "folio_train_498", "prediction": "all x y.((Poem(x) & Poem(y)) -> StrongAnalogyOfHumanAging(x,y))", "score": 0}
{"id": "folio_train_499", "prediction": "all x.(Callus4(x) -> (WrittenInUnusuallyIambicTrimeter(x) & ConveysSpeedOverWaves(x)))", "score": 0}
{"id": "folio_train_500", "prediction": "exists x y.(Poem(x) & AncientRomanWriter(y) & WrittenBy(x,y) & StrongAnalogyOfHumanAging(x))", "score": 0}
{"id": "folio_train_501", "prediction": "exists x.(Poem(x) & WrittenByAncientRomanWriter(x) & WrittenInIambicPetameter(x))", "score": 0}
{"id": "folio_train_502", "prediction": "all x.(Callus4(x) -> (WrittenInUnusuallyIambicTrimeter(x) & ConveysStrongAnalogyOfHumanAging(x)))", "score": 0}
{"id": "folio_train_503", "prediction": "(AsianScienceFictionThrillerTVSeries(Westworld) & AnimatedBy(Westworld))", "score": 0}
{"id": "folio_train_504", "prediction": "all x.((TelevisionSeries(x) & Westworld(x)) -> DebutedOnHBO(x))", "score": 0}
{"id": "folio_train_505", "prediction": "(AdaptedFromOriginalFilm(Westworld, 1973) & WrittenAndDirectedByMichaelCriton(Westworld))", "score": 0}
{"id": "folio_train_506", "prediction": "all x.((Film(x) & 1973(x)) -> (Robots(x) & Malfunction(x) & KillHumanVisitors(x)))", "score": 0}
{"id": "folio_train_507", "prediction": "all x.((MichaelCriton(x) & Robot(y)) -> DirectedFilm(x,y))", "score": 0}
{"id": "folio_train_508", "prediction": "all x.((AmericanTVSeries(x) & DebutedIn2016(x)) -> DebutedIn2016(x))", "score": 0}
{"id": "folio_train_509", "prediction": "all x.((SummerOlympics(x) & HeldIn(x,Beijing)) -> HeldIn(x,China))", "score": 0}
{"id": "folio_train_510", "prediction": "all x.((SummerOlympics(x) & SecondSummerOlympics(x) & HeldInCommunistState(x)) -> HeldInCommunistState(x))", "score": 0}
{"id": "folio_train_511", "prediction": "(GoldMedal(China,48) & SummerOlympics(2008))", "score": 0}
{"id": "folio_train_512", "prediction": "(Second(UnitedStates) & GoldMedalTally(Gold) & HighestNumberOfMedals(Under12))", "score": 0}
{"id": "folio_train_513", "prediction": "all x y.((Russland(x) & SummerOlympics(y)) -> ThirdPlaceInGoldMedalTally(x,y))", "score": 0}
{"id": "folio_train_514", "prediction": "all x y.((Country(x) & Team(y) & PlacesThreeInGoldMedal(x,y)) -> FewerGoldMedal(x,y))", "score": 0}
{"id": "folio_train_515", "prediction": "all x y.((Country(x) & Country(y) & Games(y)) -> WonAtLeastOneMedal(x,y))", "score": 0}
{"id": "folio_train_516", "prediction": "all x y.((Russland(x) & China(y)) -> -WonMinorGoldMedal(x,y))", "score": 0}
{"id": "folio_train_517", "prediction": "all x y.((UnitedStates(x) & China(y)) -> WonMinorGoldMedal(x,y))", "score": 0}
{"id": "folio_train_518", "prediction": "all x y.((Russia(x) & China(y)) -> WonMinorGoldMedal(x,y))", "score": 0}
{"id": "folio_train_519", "prediction": "(District(x) & Guilin(x))", "score": 0}
{"id": "folio_train_520", "prediction": "Yangshuo is not a district in Guilin.", "score": -1}
{"id": "folio_train_521", "prediction": "(District(x,y) & City(y))", "score": 0}
{"id": "folio_train_522", "prediction": "Xiufeng is in Guilin.", "score": -1}
{"id": "folio_train_523", "prediction": "Kowloon District is in Hong Kong.", "score": -1}
{"id": "folio_train_524", "prediction": "all x.((Person(x) & GrowsOwnFreshVegetablesInHomeGarden(x)) -> AmpleSpace(x))", "score": 0}
{"id": "folio_train_525", "prediction": "all x.((YoungWorkingProfessional(x) & LivesInLargeCities(x)) -> -AmpleSpace(x))", "score": 0}
{"id": "folio_train_526", "prediction": "all x.((Person(x) & OrdersTakeoutFromDeliveryServices(x) & Often(x)) -> GrowsFreshVegetablesInHomeGarden(x))", "score": 0}
{"id": "folio_train_527", "prediction": "all x.((People(x) & EnjoysGoingOutOfOften(x) & HasFriends(x)) -> OrdersTakeoutFromDeliveryServicesOfOften(x))", "score": 0}
{"id": "folio_train_528", "prediction": "all x y.((Person(x) & HomegrownMeals(x) & HomecookedMeals(x) & FastFood(y) & RegularlyPurchaseBenefits(x,y)) -> EnjoysGoingOutToRestaurantsWithFriends(x))", "score": 0}
{"id": "folio_train_529", "prediction": "all x y.((Michael(x) & HomegrownAndHomecookedMeals(y)) -> (GrowsFreshVegetablesInHomeGarden(x,y) | -PurchasesBenefits(x,y)))", "score": 0}
{"id": "folio_train_530", "prediction": "all x.((Michael(x) & GoesOutWithFriends(x)) -> Enjoys(x))", "score": 0}
{"id": "folio_train_531", "prediction": "all x.((Jimmy(x) & WorkingProfessional(x) & LivesInLargeCities(x)) -> Young(x))", "score": 0}
{"id": "folio_train_532", "prediction": "all x.((Michael(x) & (GrowsOwnFreshVegetables(x) | YoungWorkingProfessional(x) & LivesInLargeCities(x))) -> GrowsInHomeGarden(x))", "score": 0}
{"id": "folio_train_533", "prediction": "all x.((Device(x) & Company(x)) -> ConnectedToGoogleHome(x))", "score": 0}
{"id": "folio_train_534", "prediction": "all x.((Device(x) & Employee(x)) -> ConnectedToWiFi(x))", "score": 0}
{"id": "folio_train_535", "prediction": "all x.((Device(x) & ConnectedToGoogleHome(x)) -> ControlledByManager(x))", "score": 0}
{"id": "folio_train_536", "prediction": "all x.((Device(x) & ConnectsToWiFi(x)) -> EasyToOperate(x))", "score": 0}
{"id": "folio_train_537", "prediction": "all x.(IPod1(x) -> Employee(x))", "score": 0}
{"id": "folio_train_538", "prediction": "all x.(IPod(x) -> EasyToOperate(x))", "score": 0}
{"id": "folio_train_539", "prediction": "all x.(IPod(x) -> ControlledByManagers(x))", "score": 0}
{"id": "folio_train_540", "prediction": "all x.(IPod(x) -> ConnectedToGoogleHome(x))", "score": 0}
{"id": "folio_train_541", "prediction": "-exists x.(TouristMusician(x) & PermanentMemberOfOrchestra(x))", "score": 0}
{"id": "folio_train_542", "prediction": "all x.(Musician(x) -> (PermanentMemberOfOrchestra(x) | UniqueMusicalVoiceOrStyle(x)))", "score": 0}
{"id": "folio_train_543", "prediction": "all x.((Musician(x) & UniqueMusicalVoiceOrStyle(x)) -> InterestingAsIndividualPerformer(x))", "score": 0}
{"id": "folio_train_544", "prediction": "all x.((Musician(x) & InterestingAsIndividualPerformer(x)) -> CapableOfAttractingLargeAudiences(x))", "score": 0}
{"id": "folio_train_545", "prediction": "all x.((InterestingIndividualPerformer(x) & UniqueMusicalVoiceOrStyle(x)) -> (TouringSoloistMusician(x) & AttractsLargeAudiences(x)) | (-TouringSoloistMusician(x) & AttractsLargeAudiences(x))))", "score": -1}
{"id": "folio_train_546", "prediction": "(InterestingAsIndividualPerformer(Ryan))", "score": 0}
{"id": "folio_train_547", "prediction": "all x.(Ryan(x) -> (PermanentMemberOfOrchestra(x) | TouringSolistMusician(x)))", "score": 0}
{"id": "folio_train_548", "prediction": "all x.(Ryan(x) -> (PermanentMemberOfOrchestra(x) | UniqueMusicalVoiceOrStyle(x)))", "score": 0}
{"id": "folio_train_549", "prediction": "all x.(Yells(x) -> -Cool(x))", "score": 0}
{"id": "folio_train_550", "prediction": "all x.((Angry(x) & Yell(x)) -> IsAngry(x))", "score": 0}
{"id": "folio_train_551", "prediction": "all x.(Flies(x) -> Cool(x))", "score": 0}
{"id": "folio_train_552", "prediction": "all x.((Person(x) & KnowsMagic(x)) -> CanFly(x))", "score": 0}
{"id": "folio_train_553", "prediction": "all x.(Wizard(x) -> KnowsMagic(x))", "score": 0}
{"id": "folio_train_554", "prediction": "all x.(Harry(x) -> (Yells(x) & Flies(x)) | (-Yells(x) & Flies(x))))", "score": -1}
{"id": "folio_train_555", "prediction": "all x.(Potter(x) -> (Magic(x) & Flies(x)))", "score": 0}
{"id": "folio_train_556", "prediction": "Harry is cool.", "score": -1}
{"id": "folio_train_557", "prediction": "Harry is notcool.", "score": -1}
{"id": "folio_train_558", "prediction": "all x.(Harry(x) -> (Magic(x) | Agreed(x)))", "score": 0}
{"id": "folio_train_559", "prediction": "all x.(Harry(x) -> (-Magic(x) & -Angry(x)))", "score": 0}
{"id": "folio_train_560", "prediction": "all x.(Product(x) -> (ProducedIn(x,China) | ProducedIn(x,US)))", "score": 0}
{"id": "folio_train_561", "prediction": "all x.((ProducedInChina(x) & Labeled(x)) -> ProducedInChina(x))", "score": 0}
{"id": "folio_train_562", "prediction": "all x.(ProducedIn(x,US) -> SoldIn(x,US))", "score": 0}
{"id": "folio_train_563", "prediction": "all x.((Labeled(x) & Product(x)) -> Cheaper(x))", "score": 0}
{"id": "folio_train_564", "prediction": "all x.(SoldInUS(x) -> SoldInWalmart(x))", "score": 0}
{"id": "folio_train_565", "prediction": "all x.(DisplayedOnHomepage(x) -> SoldInWalmart(x))", "score": 0}
{"id": "folio_train_566", "prediction": "all x.((Product(x) & CustomerReturned(x)) -> -SoldInWalmart(x))", "score": 0}
{"id": "folio_train_567", "prediction": "all x.(G-910(x) -> (DisplayedOnHomepage(x) | Cheaper(x)))", "score": -1}
{"id": "folio_train_568", "prediction": "all x.(G-910(x) -> DisplayedOnHomepage(x))", "score": -1}
{"id": "folio_train_569", "prediction": "(-Display(G-910))", "score": -1}
{"id": "folio_train_570", "prediction": "all x.(G-910(x) -> ProductReturnedByCustomers(x))", "score": -1}
{"id": "folio_train_571", "prediction": "all x.((Product(x) & (ReturnedByCustomers(x) | SoldInWalmart(x))) -> G-910.", "score": -1}
{"id": "folio_train_572", "prediction": "all x.(G-910(x) -> (ReturnedByCustomers(x) | SoldInWalmart(x)))", "score": -1}
{"id": "folio_train_573", "prediction": "all x.((Person(x) & (OrdersLotsOfAmazonPackages(x) | EnvironmentallyConscious(x))) -> AmazonPackages(x))", "score": 0}
{"id": "folio_train_574", "prediction": "all x.((Person(x) & OrdersLotsOfAmazonPackages(x)) -> GetsLotsOfDailyMail(x))", "score": 0}
{"id": "folio_train_575", "prediction": "all x.(EnvironmentallyConscious(x) -> HasSolarPanelsInHomes(x))", "score": 0}
{"id": "folio_train_576", "prediction": "all x.((Person(x) & LotsOfDailyMail(x)) -> VeryInvolvedWithNeighborhood(x))", "score": 0}
{"id": "folio_train_577", "prediction": "all x.((Person(x) & SolarPanelsInHome(x)) -> SavesMore(x))", "score": 0}
{"id": "folio_train_578", "prediction": "all x.((Marcy(x) & ((GetsLotOfMail(x) & VeryInvolvedWithNeighborhood(x)) | (-OrdersLotOfAmazonPackages(x) & VeryInvolvedWithNeighborhood(x)))) -> -(GetsLotOfDailyMail(x) & OrdersLotOfAmazonPackages(x))))", "score": -1}
{"id": "folio_train_579", "prediction": "all x.(Marcy(x) -> (OrdersLotsOfAmazonPackages(x) | SavesLotsOfMoney(x)))", "score": 0}
{"id": "folio_train_580", "prediction": "all x.((Person(x) & -OrdersLotsOfAmazonPackages(x) & EnvironmentallyConscious(x)) -> -SaversLotsOfMoney(x) & EnvironmentallyConscious(x))", "score": 0}
{"id": "folio_train_581", "prediction": "all x.(Indonesia(x) -> Country(x))", "score": 0}
{"id": "folio_train_582", "prediction": "all x y.((Prosecutor(x) & Indonesia(y)) -> OnlyInspects(x,y))", "score": 0}
{"id": "folio_train_583", "prediction": "all x.(Corruption(x) -> Crime(x))", "score": 0}
{"id": "folio_train_584", "prediction": "all x y.((Police(x) & Crime(y) & CompletesInvestigations(x,y)) -> HandsEvidenceToProsecutor(x,y))", "score": 0}
{"id": "folio_train_585", "prediction": "all x.(Evidence(x) -> (Supplyable(x) | Unsatisfactory(x)))", "score": 0}
{"id": "folio_train_586", "prediction": "all x y.((Police(x) & Prosecutor(y) & HandsEvidence(x,y) & SatisfactoryEvidence(x)) -> ProsecutionInAppropriateCourt(y))", "score": 0}
{"id": "folio_train_587", "prediction": "all x y.((Police(x) & Offender(y) & CompletesInvestigations(x,y)) -> ProsecutionAtAppropriateCourt(x,y))", "score": 0}
{"id": "folio_train_588", "prediction": "all x y.((Prosecutor(x) & Indonesia(y)) -> PersonallyInvestigates(x,y))", "score": 0}
{"id": "folio_train_589", "prediction": "all x y.((Police(x) & Prosecutor(y)) -> CompletesInvestigations(x,y))", "score": 0}
{"id": "folio_train_590", "prediction": "all x.((Watch(x) & BatteryPowered(x)) -> Automatic(x))", "score": 0}
{"id": "folio_train_591", "prediction": "all x.(DigitalWatch(x) -> BatteryPowered(x))", "score": 0}
{"id": "folio_train_592", "prediction": "exists x.(MechanicalWatch(x) & Automatic(x))", "score": 0}
{"id": "folio_train_593", "prediction": "all x.(SmartWatch(x) -> Digital(x))", "score": 0}
{"id": "folio_train_594", "prediction": "all x.(Moonwatch(x) -> (-DigitalWatch(x) | AutomaticWatch(x)))", "score": 0}
{"id": "folio_train_595", "prediction": "all x.(Moonwatch(x) -> MechanicalWatch(x))", "score": 0}
{"id": "folio_train_596", "prediction": "all x.(Moonwatch(x) -> (Smartwatch(x) & MechanicalWatch(x)))", "score": 0}
{"id": "folio_train_597", "prediction": "all x.((Smartwatch(x) & MechanicalWatch(x)) -> -MechanicalWatch(x))", "score": 0}
{"id": "folio_train_598", "prediction": "all x.((Mountwatch(x) & (Mechanical(x) | BatteryPowered(x))) -> -Smartwatch(x))", "score": 0}
{"id": "folio_train_599", "prediction": "all x.((Person(x) & DistinctTasteOfDifferentCondiments(x)) -> CanCookDifferentCondiments(x))", "score": 0}
{"id": "folio_train_600", "prediction": "all x.((Person(x) & TalentOfCooking(x)) -> CanDistinctTasteOfDifferentCondiments(x))", "score": 0}
{"id": "folio_train_601", "prediction": "all x.((Person(x) & TalentOfCooking(x)) -> CanMakeDeliciousMeals(x))", "score": 0}
{"id": "folio_train_602", "prediction": "all x.((Meal(x) & PopularAtParty(x)) -> Delicious(x))", "score": 0}
{"id": "folio_train_603", "prediction": "all x y.((John(x) & Party(y)) -> CanMakeMeals(x,y))", "score": 0}
{"id": "folio_train_604", "prediction": "all x.((John(x) & UsesDifferentCondiments(x)) -> -CooksWithDifferentCondiments(x))", "score": 0}
{"id": "folio_train_605", "prediction": "all x.((InflationControl(x) & StrongNationalCurrency(x)) -> EffectiveMonetaryPolicy(x))", "score": 0}
{"id": "folio_train_606", "prediction": "all x.((Country(x) & -RegulatesExchangeRate(x) & ControlsInflation(x)) -> -RegulatesExchangeRate(x))", "score": 0}
{"id": "folio_train_607", "prediction": "all x y.((Embargo(x) & Country(y) & IntroducedOnFrenchTradeGoods(x,y)) -> SharpDecreaseInExports(x,y))", "score": 0}
{"id": "folio_train_608", "prediction": "all x.((ExportsFallSharply(x) & NationalCurrency(x)) -> -CanBeIn(x,City))", "score": 0}
{"id": "folio_train_609", "prediction": "all x.((RegulationOfExchangeRate(x) & StrongNationalCurrency(x)) -> Requires(x))", "score": 0}
{"id": "folio_train_610", "prediction": "exists x.(RussianFrenchTradeGoodsEmbargo(x))", "score": 0}
{"id": "folio_train_611", "prediction": "all x.((Russland(x) & EffectiveMonetaryPolicy(x)) -> Possible(x))", "score": 0}
{"id": "folio_train_612", "prediction": "all x.(VideoGag(x) -> (FrenchTelevisionSeries(x) & AirsWeekly(x)))", "score": 0}
{"id": "folio_train_613", "prediction": "all x.(VideoGag(x) -> AirsOnFrenchBroadcastChannel(x,TF1))", "score": 0}
{"id": "folio_train_614", "prediction": "all x y.((Viewer(x) & SendsFunnyVideos(x,y) & FrenchBroadcastChannel(y)) -> AirsOnTelevision(x,y))", "score": 0}
{"id": "folio_train_615", "prediction": "all x.(Video(x) -> AiredOnVideoGag(x))", "score": 0}
{"id": "folio_train_616", "prediction": "all x y.((Viewer(x) & FrenchBroadcastChannel(y)) -> SendsFunnyVideos(x,y))", "score": 0}
{"id": "folio_train_617", "prediction": "all x y.((Viewer(x) & FrenchBroadcastChannel(y)) -> SendsFunnyVideos(x,y))", "score": 0}
{"id": "folio_train_618", "prediction": "all x.(Phone(x) -> Things(x))", "score": 0}
{"id": "folio_train_619", "prediction": "all x.(Cellphone(x) -> Phone(x))", "score": 0}
{"id": "folio_train_620", "prediction": "all x.(Iphone(x) -> Cellphone(x))", "score": 0}
{"id": "folio_train_621", "prediction": "all x.(Engineer(x) -> Worker(x))", "score": 0}
{"id": "folio_train_622", "prediction": "all x.(Worker(x) -> Human(x))", "score": 0}
{"id": "folio_train_623", "prediction": "all x.(Jack(x) -> (Engineer(x) | Worker(x)))", "score": 0}
{"id": "folio_train_624", "prediction": "all x.(Jack(x) -> (Human(x) | Phone(x)))", "score": 0}
{"id": "folio_train_625", "prediction": "all x.(Jack(x) -> Thing(x))", "score": 0}
{"id": "folio_train_626", "prediction": "all x.(Jack(x) -> -Thing(x))", "score": 0}
{"id": "folio_train_627", "prediction": "all x.(Jack(x) -> (Thing(x) & iPhone(x)))", "score": 0}
{"id": "folio_train_628", "prediction": "-(Iphone(Jack) & iPhone(Jack))", "score": 0}
{"id": "folio_train_629", "prediction": "all x.(Iphone(x) -> Electronic(x))", "score": 0}
{"id": "folio_train_630", "prediction": "exists x.(Phone(x) & iPhone(x))", "score": 0}
{"id": "folio_train_631", "prediction": "-exists x.(Phone(x) & Electronic(x))", "score": 0}
{"id": "folio_train_632", "prediction": "all x.(MuseumOfArt(x) -> MuseumInNewYork(x))", "score": 0}
{"id": "folio_train_633", "prediction": "all x.((WhitneyMuseumOfAmericanArt(x) & MuseumInNewYork(x)) -> MuseumInNYC(x))", "score": 0}
{"id": "folio_train_634", "prediction": "all x.((MuseumOfModernArt(x) & NYC(x)) -> Museum(x))", "score": 0}
{"id": "folio_train_635", "prediction": "(IncludesBytantine(MuseumOfArt) & IncludesIslamicArt(MuseumOfArt))", "score": 0}
{"id": "folio_train_636", "prediction": "all x.((WhitneyMuseumOfAmericanArt(x) & IncludesAmericanArt(x)) -> IncludesAmericanArt(x))", "score": 0}
{"id": "folio_train_637", "prediction": "all x.((Museum(x) & InNYC(x)) -> (ByzantineArt(x) | IslamicArt(x)))", "score": 0}
{"id": "folio_train_638", "prediction": "all x.((Museum(x) & InNYC(x)) -> IncludesAmericanArt(x))", "score": 0}
{"id": "folio_train_639", "prediction": "all x.((Museum(x) & InNYC(x)) -> IncludesGreekArt(x))", "score": 0}
{"id": "folio_train_640", "prediction": "all x.(Person(x) -> (LikesEatingCheese(x) | Francophile(x)))", "score": 0}
{"id": "folio_train_641", "prediction": "-exists x.(Francophile(x) & Likes(x,Spanish))", "score": 0}
{"id": "folio_train_642", "prediction": "all x.((Person(x) & (LikesSpanish(x) | LikesEatingCheese(x))) -> FavoriteCountry(x))", "score": 0}
{"id": "folio_train_643", "prediction": "(-(Person(Benji) & LikesEatingCheese(Benji)) & -(Person(Benji) & StudiesSpanish(Benji)))", "score": 0}
{"id": "folio_train_644", "prediction": "all x.((Person(x) & -(StudiesSpanish(x) | StudiesFrench(x))) -> (StudiesSpanish(x) | StudiesFrench(x)))", "score": 0}
{"id": "folio_train_645", "prediction": "Benji is a person who likesEatingCheese(Benji)", "score": -1}
{"id": "folio_train_646", "prediction": "all x.((Person(x) & (LikesEatingCheese(x) | Francophile(x))) -> (-StudiesSpanish(x) | StudiesFrench(x)))", "score": 0}
{"id": "folio_train_647", "prediction": "all x.((Person(x) & (LikesSpanish(x) | StudiesFavoriteCountry(x))) -> (StudiesSpanish(x) | LikesSpanish(x)))", "score": 0}
{"id": "folio_train_648", "prediction": "all x.(Gasteren(x) -> Village(x))", "score": 0}
{"id": "folio_train_649", "prediction": "Drenthe (DutchProvince)", "score": 0}
{"id": "folio_train_650", "prediction": "-exists x.(City(x) & Village(x))", "score": 0}
{"id": "folio_train_651", "prediction": "all x y.((Dorm(x) & Village(y)) -> Population(x,y))", "score": 0}
{"id": "folio_train_652", "prediction": "all x.(Gasteren(x) -> DutchDorf(x))", "score": 0}
{"id": "folio_train_653", "prediction": "Gasteren is a city.", "score": -1}
{"id": "folio_train_654", "prediction": "all x.(Gasteren(x) -> Population(x,155))", "score": 0}
{"id": "folio_train_655", "prediction": "all x.((Mammal(x) & LaysEggs(x)) -> (Plutus(x) | Echidna(x)))", "score": 0}
{"id": "folio_train_656", "prediction": "all x.(Plactus(x) -> -Hyrax(x))", "score": 0}
{"id": "folio_train_657", "prediction": "all x.(Echidna(x) -> -Hyrax(x))", "score": 0}
{"id": "folio_train_658", "prediction": "-exists x.(Mammal(x) & Invertebrate(x))", "score": 0}
{"id": "folio_train_659", "prediction": "all x.(Animal(x) -> (Vertebrate(x) | Invertebrate(x)))", "score": 0}
{"id": "folio_train_660", "prediction": "all x.(Mammal(x) -> Animal(x))", "score": 0}
{"id": "folio_train_661", "prediction": "all x.(Hyrax(x) -> Mammal(x))", "score": 0}
{"id": "folio_train_662", "prediction": "all x.(Grebe(x) -> LaysEggs(x))", "score": 0}
{"id": "folio_train_663", "prediction": "all x.(Grebe(x) -> (-Plutypus(x) & -Echidna(x)))", "score": 0}
{"id": "folio_train_664", "prediction": "all x.(Hyrax(x) -> -LaysEggs(x))", "score": 0}
{"id": "folio_train_665", "prediction": "all x.(Grebe(x) -> -Mammal(x))", "score": 0}
{"id": "folio_train_666", "prediction": "all x.(Plactace(x) -> Vertebrate(x))", "score": 0}
{"id": "folio_train_667", "prediction": "BobbyFlynn(Singer(Flynn) & Songwriter(Flynn))", "score": -1}
{"id": "folio_train_668", "prediction": "BobbyFlynn finished7th on AustralianIdol.", "score": -1}
{"id": "folio_train_669", "prediction": "all x.(AustralianIdolCompeter(x) -> AustralianCitizen(x))", "score": 0}
{"id": "folio_train_670", "prediction": "all x.(OmegaThree(x) -> MadeNationalTourIn2007(x))", "score": 0}
{"id": "folio_train_671", "prediction": "BobbyFlynn is a member of OmegaThreeBand(boss.com)", "score": -1}
{"id": "folio_train_672", "prediction": "Bobby Flynn was born in Queensland.", "score": -1}
{"id": "folio_train_673", "prediction": "BobbyFlynn(boss) & AustralianCitizen(b))", "score": -1}
{"id": "folio_train_674", "prediction": "Bobby Flynn flew to America in 2007 (BobbyFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFly", "score": -1}
{"id": "folio_train_675", "prediction": "Bobby Flynn was born in Queens.", "score": -1}
{"id": "folio_train_676", "prediction": "all x.(Protein(x) -> OrganicCompound(x))", "score": 0}
{"id": "folio_train_677", "prediction": "all x.(Enzyme(x) -> OrganicCompound(x))", "score": 0}
{"id": "folio_train_678", "prediction": "all x.(Enzyme(x) -> Protein(x))", "score": 0}
{"id": "folio_train_679", "prediction": "all x.((AmericanScreenwriter(x) & Producer(x)) -> MaggieFriedman(x))", "score": 0}
{"id": "folio_train_680", "prediction": "Maggie Friedman (showrunner/executiveProducer ofWitchesOfEastEnd))", "score": -1}
{"id": "folio_train_681", "prediction": "(FantasyDrama(WitchesOfEastEnd) & FantasySeries(WitchesOfEastEnd))", "score": 0}
{"id": "folio_train_682", "prediction": "Maggie Friedman (ProducedEastwick(Maggie) & DevelopedEastwick(Maggie))", "score": -1}
{"id": "folio_train_683", "prediction": "Eastwick is a series by ABC.", "score": -1}
{"id": "folio_train_684", "prediction": "exists x.(Series(x) & ABC(x) & Showrunner(x) & WitchesOfEastEnd(x))", "score": 0}
{"id": "folio_train_685", "prediction": "exists x.(Series(x) & -DevelopedByWitchesOfEastEnd(x))", "score": 0}
{"id": "folio_train_686", "prediction": "Maggie Friedman & WitchesOfEastEnd(Maggie)", "score": -1}
{"id": "folio_train_687", "prediction": "Evangelos Eleftheriou (GreekElectricalEngineer)", "score": -1}
{"id": "folio_train_688", "prediction": "Evangelos Eleftheriou worked for IBM in Zurich.", "score": -1}
{"id": "folio_train_689", "prediction": "all x.((Company(x) & EmployeesWorkingFor(x,y)) -> HasOffice(x,y))", "score": 0}
{"id": "folio_train_690", "prediction": "all x.(IBM(x) -> Company(x))", "score": 0}
{"id": "folio_train_691", "prediction": "all x.(IBM(x) -> (OfficeInLondon(x) | OfficeInZürich(x)))", "score": 0}
{"id": "folio_train_692", "prediction": "-exists x.(Greek(x) & WorksForIBM(x))", "score": 0}
{"id": "folio_train_693", "prediction": "all x.((BoneyM.(x) & Single(x,Hooray) & Single(x,Hooray) & Single(x,Hooray)) -> SevenConsecutiveGerman #1Singles(x))", "score": -1}
{"id": "folio_train_694", "prediction": "all x.(Hooray!Hooray!Hooray!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday.Hooliday.Hooli", "score": -1}
{"id": "folio_train_695", "prediction": "(Hooray! Hooray! It's HoliHoliday! ) BreaksBoneyM's streak of German #1Singles(Hooray))", "score": -1}
{"id": "folio_train_696", "prediction": "all x.((Song(x) & PeaksBelowTop(x,1)) -> -Top(x))", "score": 0}
{"id": "folio_train_697", "prediction": "all x.((Hooray(x) & Hooray(x) & HoliHoliday(x)) -> #1HitInGermany(x))", "score": 0}
{"id": "folio_train_698", "prediction": "all x.((Hooray(x) & Hooray(x) & HoliHoliday(x)) -> PeakedBelow(x,1))", "score": 0}
{"id": "folio_train_699", "prediction": "all x.((Hooray(x) & Hooray(x) & HoliHoliday(x)) -> PeakedAt#3(x))", "score": 0}
{"id": "folio_train_700", "prediction": "all x.(Chef(x) -> CanCook(x))", "score": 0}
{"id": "folio_train_701", "prediction": "exists x.((Person(x) & -Chef(x)) -> CanCook(x))", "score": 0}
{"id": "folio_train_702", "prediction": "all x.(Cooks(x) -> (MakesScrambledEggs(x) & MakesPasta(x)))", "score": 0}
{"id": "folio_train_703", "prediction": "all x.((CanMakeCookies(x) & CanMakeMuffins(x)) -> Baker(x))", "score": 0}
{"id": "folio_train_704", "prediction": "all x.((Baker(x) & MakesScrambledEggs(x)) -> MakesGoodBreakfast(x))", "score": 0}
{"id": "folio_train_705", "prediction": "(all x.(Luke(x) -> (MakesCookies(x) | MakesScrambledEggs(x) | MakesMuffins(x))) & -(MakesPasta(x) -> MakesPasta(x)))", "score": 0}
{"id": "folio_train_706", "prediction": "all x.(Luke(x) -> CanMakeGoodBreakfast(x))", "score": 0}
{"id": "folio_train_707", "prediction": "Luke is chef.", "score": -1}
{"id": "folio_train_708", "prediction": "all x.((Person(x) & EnjoysEatingGelatoIceCream(x)) -> EnjoysVacationToItaly(x))", "score": 0}
{"id": "folio_train_709", "prediction": "all x.((Person(x) & ResistsMotorheadDelectableDrinksAndDesserts(x) & FamedInItaly(x)) -> -ResistsMotorheadDelectableDrinksAndDesserts(x))", "score": 0}
{"id": "folio_train_710", "prediction": "all x.((Person(x) & (EnjoysEatingGelatoIceCream(x) | LovesToTravel(x))) -> VacationsOfFresh(x))", "score": 0}
{"id": "folio_train_711", "prediction": "all x.((Person(x) & TakesStudyAbroadSemestersToEurope(x)) -> -RegretsCollegeExperiences(x))", "score": 0}
{"id": "folio_train_712", "prediction": "all x.((LovesToTravel(x) & LovesToVacation(x)) -> TakesStudyAbroadSemestersToEurope(x))", "score": 0}
{"id": "folio_train_713", "prediction": "(all x.((Robert(x) & EnjoysGelatoIceCream(x) & LovesToTravelAndVacation(x)) | (-LovesGelatoIceCream(x) & LovesToTravelAndVacation(x))))", "score": 0}
{"id": "folio_train_714", "prediction": "all x.(Robert(x) -> (Resists(x) & DelectableDrinks(x) & DelectableDesserts(x) & FamedInItaly(x)))", "score": 0}
{"id": "folio_train_715", "prediction": "all x.((Robert(x) & (EnjoysVacationToItaly(x) | -EnjoysVacationToItaly(x))) | (-EnjoysVacationToItaly(x) & -ReproducesCollegeExperiences(x))))", "score": -1}
{"id": "folio_train_716", "prediction": "all x.((Robert(x) & -(ResistsMemorableDrinksAndDesserts(x) & FamedInItaly(x) & RefusesCollegeExperiences(x))) -> (EnjoysEatingGelatoIceCream(x) | EnjoysVacationToItaly(x))))", "score": -1}
{"id": "folio_train_717", "prediction": "all x y.((ETS(x) & UnitedStates(y)) -> (DevelopsStandardizedTests(x,y) & primarilyForK-12AndHigherEducation(x,y)))", "score": -1}
{"id": "folio_train_718", "prediction": "all x y z.((ETS(x) & (ToEFL(y) | TOEIC(y) | GRE(y)) & SubjectTest(z)) -> AdministersInMoreThan180Countries(x,y,z))", "score": 0}
{"id": "folio_train_719", "prediction": "all x.((Assessment(x) & ETSDevelops(x)) -> (AssociatesWithEntryTo(x,USTertiaryInstitutions) & AssociatesWith(x,USQuaternaryInstitutions)))", "score": 0}
{"id": "folio_train_720", "prediction": "all x y.((ETS(x) & State(y)) -> DevelopsStatewideAssessments(x,y))", "score": 0}
{"id": "folio_train_721", "prediction": "all x.(ETS(x) -> (DevelopsAssessments(x,K-12) & EntranceToUSTertiaryAndQuaternaryEducationInstitutions(x)))", "score": -1}
{"id": "folio_train_722", "prediction": "all x.(ETS(x) -> -AdministersInternationalTests(x))", "score": 0}
{"id": "folio_train_723", "prediction": "all x y.((ETS(x) & (ToEFL(y) | GRE(y) | SubjectTest(y))) -> AdministersInternationalTests(x,y))", "score": 0}
{"id": "folio_train_724", "prediction": "all x.((FullTimeEnrolledInAcademicProgram(x) & EnrolledInAcademicProgram(x)) -> StudentVisa(x))", "score": 0}
{"id": "folio_train_725", "prediction": "all x.((FullTimeEnrolledInAcademicProgram(x)) -> -WorksFullTime(x))", "score": 0}
{"id": "folio_train_726", "prediction": "all x.((WantsToStudyAround(x) & HasStudentVisa(x)) -> NeedsVisa(x))", "score": 0}
{"id": "folio_train_727", "prediction": "all x.(PhD(x) -> CanWorkFullTime(x))", "score": 0}
{"id": "folio_train_728", "prediction": "all x.((Tom(x) & -WantsToStudyAround(x)) -> EnrolledInEducationalProgram(x))", "score": 0}
{"id": "folio_train_729", "prediction": "Tom is a PhDGraduate(Tom)", "score": -1}
{"id": "folio_train_730", "prediction": "Tom is not a PhDGraduate(Tom)", "score": -1}
{"id": "folio_train_731", "prediction": "(WantsToStudyAround(Tom) -> WantsToStudyAround(Tom))", "score": 0}
{"id": "folio_train_732", "prediction": "all x.(InstalmentSalesMethod(x) -> RecognizesRevenueUnderGAAP(x))", "score": 0}
{"id": "folio_train_733", "prediction": "all x.((AccrualAccounting(x) & RealizedRevenue(x)) -> Recognized(x))", "score": 0}
{"id": "folio_train_734", "prediction": "all x y.((CashAccounting(x) & Cash(y)) -> RecognizedRevenues(x,y))", "score": 0}
{"id": "folio_train_735", "prediction": "all x.((AccountingStandard(x) & DevelopedBySecuritiesAndExchangeCommission(x)) -> UsedByUSGAAP(x))", "score": 0}
{"id": "folio_train_736", "prediction": "Sally works for the USSecuritiesAndExchangeCommission.", "score": -1}
{"id": "folio_train_737", "prediction": "all x.((Company(x) & Sally(x)) -> InstallmentSales(x))", "score": 0}
{"id": "folio_train_738", "prediction": "all x.((Company(x) & WorksFor(x)) -> PerformsAccrualAccounting(x))", "score": 0}
{"id": "folio_train_739", "prediction": "Sally -WorksForGAAP(Sally)", "score": -1}
{"id": "folio_train_740", "prediction": "all x.((Person(x) & RespectedByOthers(x)) -> ContributesToCountry(x))", "score": 0}
{"id": "folio_train_741", "prediction": "all x.(RespectedByOthers(x) -> ContributesToCountry(x))", "score": 0}
{"id": "folio_train_742", "prediction": "all x.((Person(x) & AvailableForVisit(x) & -Fees(x)) -> RespectedByOthers(x))", "score": 0}
{"id": "folio_train_743", "prediction": "all x.((Customer(x) & ServicedInArmy(x)) -> AvailableForVisitWithoutFees(x))", "score": 0}
{"id": "folio_train_744", "prediction": "all x.((Person(x) & SentForThief(x)) -> StayedInPenitence(x))", "score": 0}
{"id": "folio_train_745", "prediction": "all x.((Person(x) & StayedInPenitentiary(x)) -> BadRecordInLocalState(x))", "score": 0}
{"id": "folio_train_746", "prediction": "all x.(James(x) -> (SentencedForThief(x) | StayedInPenitence(x)))", "score": 0}
{"id": "folio_train_747", "prediction": "all x.(James(x) -> (BadRecord(x) | RespectedByOthers(x)))", "score": 0}
{"id": "folio_train_748", "prediction": "all x.(James(x) -> ContributesToCountry(x))", "score": 0}
{"id": "folio_train_749", "prediction": "all x.(James(x) -> -ContributesToCountry(x))", "score": 0}
{"id": "folio_train_750", "prediction": "all x y.((James(x) & Country(y)) -> (ContributesTo(x,y) & ServesInArmy(x)))", "score": 0}
{"id": "folio_train_751", "prediction": "(-ContributesToCountry(James) & -ServesInArmy(James))", "score": 0}
{"id": "folio_train_752", "prediction": "all x.(Watershed(x) -> DrainageBasin(x))", "score": 0}
{"id": "folio_train_753", "prediction": "(SouthwesternNewYork(CrotonRiver) & In(CrotonRiver,SouthwesternNewYork))", "score": 0}
{"id": "folio_train_754", "prediction": "all x y.((Water(x) & CrotonRiverWatershed(y)) -> FlowsToBronx(x,y))", "score": 0}
{"id": "folio_train_755", "prediction": "The Bronx is in NewYork.", "score": -1}
{"id": "folio_train_756", "prediction": "all x y.((Water(x) & CrotonRiverWatershed(y)) -> FlowsTo(x,y))", "score": 0}
{"id": "folio_train_757", "prediction": "all x.(Watershed(x) -> (CrotonRiver(x) & InBronx(x)))", "score": 0}
{"id": "folio_train_758", "prediction": "all x y.((Water(x) & CrotonRiver(y)) -> FlowsToBronx(x,y))", "score": 0}
{"id": "folio_train_759", "prediction": "all x.(NuclearPoweredSubmarine(x) -> Warship(x))", "score": 0}
{"id": "folio_train_760", "prediction": "-exists x.(NuclearPoweredSubmarine(x) & CommercialVessel(x))", "score": 0}
{"id": "folio_train_761", "prediction": "exists x.(Warship(x) & CommercialVessel(x))", "score": 0}
{"id": "folio_train_762", "prediction": "all x.((Album(x) & WrittenByRockBand(x)) -> RockGenre(x))", "score": 0}
{"id": "folio_train_763", "prediction": "all x y.((Band(x) & Album(y) & Writes(x,y)) -> WinsAward(x,y))", "score": 0}
{"id": "folio_train_764", "prediction": "TroubleAtHenhouse(album) & ThrobbinglyHip(album)", "score": 0}
{"id": "folio_train_765", "prediction": "The TragicallyHip is a CanadianRockBand.", "score": -1}
{"id": "folio_train_766", "prediction": "(InTroubleAtHenhouse(Song,ButtsWigglin')", "score": -1}
{"id": "folio_train_767", "prediction": "TroubleAtHenhouse(TroubleAtHenhouse(TroubleAtHenhouse) -WinnerOfAlbumOfYear(TroubleAtHenhouse))", "score": -1}
{"id": "folio_train_768", "prediction": "all x y.((Song(x) & TroubleAtHenhouse(y)) -> AppearsInFilm(x,y))", "score": 0}
{"id": "folio_train_769", "prediction": "all x.(TroubleAtHenhouse(x) -> Rock(x))", "score": 0}
{"id": "folio_train_770", "prediction": "all x.(CanadianRockBand(x) -> -WinsAlbumOfYear(x))", "score": 0}
{"id": "folio_train_771", "prediction": "\"ButtsWigglin'\" appeared in a film.", "score": -1}
{"id": "folio_train_772", "prediction": "(SoftwareEngineer(Daniel) & WorksAtPalantirTechnology(Daniel))", "score": 0}
{"id": "folio_train_773", "prediction": "Daniel studied Bioengineering at Rice University.", "score": -1}
{"id": "folio_train_774", "prediction": "(OlderSister(Daniel) & TechnicalSourcer(Daniel))", "score": 0}
{"id": "folio_train_775", "prediction": "(Dad(Daniel) & OlderSister(Daniel) graduatedFromStanfordUniversity(Daniel))", "score": -1}
{"id": "folio_train_776", "prediction": "all x y.((Danny(x) & Dad(y)) -> (DoctorPracticingInternalMedicine(x,y) & VeteranHospital(y) & InMinneapolis(y)))", "score": 0}
{"id": "folio_train_777", "prediction": "all x y.((Daniel(x) & StanfordUniversity(y)) -> (AppliedTo(x,y) & -CanGetIn(x,y)))", "score": 0}
{"id": "folio_train_778", "prediction": "Daniel studied Bioengineering as MajorAtRiceUniversity(Daniel)", "score": -1}
{"id": "folio_train_779", "prediction": "(Growth(Daniel) & Sister(Daniel) & Minneapolis(Daniel))", "score": 0}
{"id": "folio_train_780", "prediction": "all x.(CommericalAircraft(x) -> (ProducedByBoeing(x) | ProducedByAirbus(x)))", "score": 0}
{"id": "folio_train_781", "prediction": "all x.(AmericanAirlineJet(x) -> CommericalAircraft(x))", "score": 0}
{"id": "folio_train_782", "prediction": "all x y.((Airbus(x) & Boeing(y)) -> MadeMoreRevenue(x,y))", "score": 0}
{"id": "folio_train_783", "prediction": "all x.(AmericanAirlinePlane(x) -> (BoeingPlane(x) | AirbusPlane(x)))", "score": 0}
{"id": "folio_train_784", "prediction": "exists x.(SpaceXCommericalAircraft(x))", "score": 0}
{"id": "folio_train_785", "prediction": "exists x.(UnitedAirlinesPlane(x) & ProducedByBoeing(x))", "score": 0}
{"id": "folio_train_786", "prediction": "exists x.(CommercialPlane(x) & Airbus(x) & Boeing(x))", "score": 0}
{"id": "folio_train_787", "prediction": "IslandInPyrra(Luzon)", "score": 0}
{"id": "folio_train_788", "prediction": "(Earthquake(Decembre99) & HitsLuzon(Decembre99))", "score": 0}
{"id": "folio_train_789", "prediction": "all x y.((People(x) & DecemberEarthquake(y) & Luzon(y)) -> DiedIn(x,y))", "score": 0}
{"id": "folio_train_790", "prediction": "Leyte IslandInPyrras.", "score": -1}
{"id": "folio_train_791", "prediction": "-exists x.(Earthquake(x) & StruckInPhone(x))", "score": 0}
{"id": "folio_train_792", "prediction": "all x.((Earthquake(x) & InPhnomenon(x)) -> InPhnomenon(x))", "score": 0}
{"id": "folio_train_793", "prediction": "all x.(InvestsInPublicStockMarket(x) | EnjoysGambling(x))", "score": 0}
{"id": "folio_train_794", "prediction": "all x.(InvestsInPublicStockMarketRegularly(x) -> (ReadsWallStreetJournal(x) & ReadsOtherNewspapersRegularly(x) & UpdatesFinancialMetrics(x)))", "score": 0}
{"id": "folio_train_795", "prediction": "all x.(EnjoysGambling(x) -> SpendsLotOfMoneyAtCasinoAndBetweenBetweenGames(x))", "score": 0}
{"id": "folio_train_796", "prediction": "all x.((Person(x) & SpendsLotOfMoneyAtCasino(x) & SpendsLotOfBettingGames(x)) -> VisitsLasVegasStripRegularly(x))", "score": 0}
{"id": "folio_train_797", "prediction": "all x.((Person(x) & SpendsLotsOfMoneyAtCasino(x) & SpendsLotsOfBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBettweenBettweenBettweenBe", "score": -1}
{"id": "folio_train_798", "prediction": "all x.((InvestsInPublicStockMarket(x) & Regularly(x)) -> (-(MattHasDisposableIncome(x) & RegularIncome(x)) | -(MattHasDisposableIncome(x) & RegularIncome(x)))))", "score": -1}
{"id": "folio_train_799", "prediction": "all x.((Matt(x) & WallStreetJournal(x) & OtherNewspapers(x)) -> ReadsRegularly(x))", "score": 0}
{"id": "folio_train_800", "prediction": "all x.((Person(x) & ((LotOfDisposableIncome(x) & RegularInvestment(x)) | (-LotOfDisposableIncome(x) & RegularInvestment(x)))) -> (-VisitsLasVegasStripRegularly(x) & -ReadsWallStreetJournalAndOtherNewspapersRegularly(x))))", "score": -1}
{"id": "folio_train_801", "prediction": "all x.((Person(x) & (HasMuchDisposableIncome(x) | ReadsWallStreetJournal(x) & ReadsWallStreetJournal(x))) -> -(HasMuchDisposableIncome(x) & VisitsLasVegasStripRegularly(x)))", "score": 0}
{"id": "folio_train_802", "prediction": "all x.(Student(x) -> CanStrikeRightNotes(x))", "score": 0}
{"id": "folio_train_803", "prediction": "all x.((Student(x) & CanStrikeRightNote(x)) -> CanGetRhythmsRight(x))", "score": 0}
{"id": "folio_train_804", "prediction": "all x.((Student(x) & GetsRhythmsRight(x)) -> WorksOnCoordination(x,left,right))", "score": 0}
{"id": "folio_train_805", "prediction": "all x y.((Student(x) & Student(y) & StartsWorkingOnCoordination(x,left,right)) -> GoodAt(x,y))", "score": 0}
{"id": "folio_train_806", "prediction": "all x.((John(x) & StrikesRightNotes(x) & GetsRhythmsRight(x) & GoodAtCoordination(x)) -> PutsEmotionsIntoPlaying(x))", "score": 0}
{"id": "folio_train_807", "prediction": "(StudentLearningPiano(John))", "score": 0}
{"id": "folio_train_808", "prediction": "(-ChurchableCoordination(John,left) & ChallengingCoordination(John,right))", "score": 0}
{"id": "folio_train_809", "prediction": "all x.(John(x) -> CanGetRhythmsRight(x))", "score": 0}
{"id": "folio_train_810", "prediction": "all x.(John(x) -> -PutsEmotionsIntoPlaying(x))", "score": 0}
{"id": "folio_train_811", "prediction": "all x.(Marshall(x) -> (Ex-Swimmer(x) & FormerWorldRecordHolder(x)))", "score": -1}
{"id": "folio_train_812", "prediction": "Barbara AnnMarshall participated in the 1972 SummerOlympics.", "score": -1}
{"id": "folio_train_813", "prediction": "(HomeCountry(Marshall,BabeAnn) & UnitedStates(Marshall,BabeAnn))", "score": 0}
{"id": "folio_train_814", "prediction": "all x.(CompetesInSummerOlympics(x,72) -> RepresentsHomeCountry(x))", "score": 0}
{"id": "folio_train_815", "prediction": "all x.(Marshall(x) -> ParticipatedInPreliminaryHeat(x))", "score": 0}
{"id": "folio_train_816", "prediction": "(-ParticipatedInEventFinal(Marshall,72))", "score": 0}
{"id": "folio_train_817", "prediction": "all x.((RelaySwimmer(x) & ParticipatedInEventFinal(x)) -> ReceivedMedals(x))", "score": 0}
{"id": "folio_train_818", "prediction": "Barbara AnnMarshall -ReceivedMedals(Marshall)", "score": -1}
{"id": "folio_train_819", "prediction": "Barbara AnnMarshall represented UnitedStatesInSummerOlympics(Marshall,72)", "score": -1}
{"id": "folio_train_820", "prediction": "all x.(Game(x) -> (PlayedWith(x,red) & PlayedWith(x,yellow) & PlayedWith(x,green)))", "score": 0}
{"id": "folio_train_821", "prediction": "all x.(Player(x) -> RedStage(x))", "score": 0}
{"id": "folio_train_822", "prediction": "all x.(Player(x) -> (ReachesYellowStage(x) & ReachesGreenStage(x)))", "score": 0}
{"id": "folio_train_823", "prediction": "all x y.((YellowStage(x) & RedStage(y)) -> ComesAfter(x,y))", "score": 0}
{"id": "folio_train_824", "prediction": "all x.(Player(x) -> ProceedsOneStageAtTime(x))", "score": 0}
{"id": "folio_train_825", "prediction": "all x.(MoveToGreenStage(x) -> -ReachesYellowStage(x))", "score": 0}
{"id": "folio_train_826", "prediction": "all x.((YellowStage(x) & GreenStage(x)) -> CanBeReach(x,y))", "score": 0}
{"id": "folio_train_827", "prediction": "all x.((Game(x) & CompletesWithoutGreenStage(x)) -> Possible(x))", "score": 0}
{"id": "folio_train_828", "prediction": "all x.(Person(x) -> (ValuesPhysicalTouch(x) | ValuesAffirmation(x)))", "score": 0}
{"id": "folio_train_829", "prediction": "all x.(ValuesPhysicalTouch(x) -> GoodWithPets(x))", "score": 0}
{"id": "folio_train_830", "prediction": "all x.((Person(x) & GoodWithPets(x)) -> ScaredOfAnimals(x))", "score": 0}
{"id": "folio_train_831", "prediction": "all x.(Person(x) -> (ScaredOfAnimals(x) | LovesAnimals(x)))", "score": 0}
{"id": "folio_train_832", "prediction": "all x.(Adam(x) -> (ValuesPhysicalTouch(x) & LoveLanguage(x)) | LovesAnimals(x)))", "score": -1}
{"id": "folio_train_833", "prediction": "all x.(Adam(x) -> ScaredOfAnimals(x))", "score": 0}
{"id": "folio_train_834", "prediction": "all x.((Adam(x) & WordOfAffirmation(x)) -> LoveLanguage(x))", "score": 0}
{"id": "folio_train_835", "prediction": "all x y.((Adam(x) & PhysicalTouch(x) & WordOfAffirmation(y)) -> (ImportantLoveLanguage(x) & ImmportantLoveLanguage(y)))", "score": 0}
{"id": "folio_train_836", "prediction": "all x.(Adam(x) -> (ValuesPhysicalTouch(x) | ValuesWordsOfAffirmation(x)))", "score": 0}
{"id": "folio_train_837", "prediction": "all x.((Adam(x) & (ValuesPhysicalTouch(x) | GoodWithPets(x))) -> ValuesWordsOfAffirmation(x))", "score": 0}
{"id": "folio_train_838", "prediction": "all x.(Bird(x) -> HasWings(x))", "score": 0}
{"id": "folio_train_839", "prediction": "all x.((Animal(x) & HasWings(x)) -> Reptile(x))", "score": 0}
{"id": "folio_train_840", "prediction": "exists x.(Animal(x) & Flies(x))", "score": 0}
{"id": "folio_train_841", "prediction": "all x.((Iguana(x) & Reptile(x)) -> Iguana(x))", "score": 0}
{"id": "folio_train_842", "prediction": "John is -(Iguana(John) | Bird(John))", "score": -1}
{"id": "folio_train_843", "prediction": "John is reptile.", "score": -1}
{"id": "folio_train_844", "prediction": "John is notIguana(John) & Animal(John) & CanFly(John))", "score": -1}
{"id": "folio_train_845", "prediction": "(Animal(John) & CanFly(John) & Bird(John))", "score": 0}
{"id": "folio_train_846", "prediction": "(Movie(EndGame) & ReleasedIn2006(EndGame))", "score": 0}
{"id": "folio_train_847", "prediction": "EndGame was set in Washington.", "score": -1}
{"id": "folio_train_848", "prediction": "EndGame was filmed outside of Washington.", "score": -1}
{"id": "folio_train_849", "prediction": "exists x.(Movie(x) & FilmedIn(x,NewYork))", "score": 0}
{"id": "folio_train_850", "prediction": "Andy Chang directedEndGame(x)", "score": -1}
{"id": "folio_train_851", "prediction": "Andy Chang is from Hong Kong.", "score": -1}
{"id": "folio_train_852", "prediction": "EndGame was filmed in New York.", "score": -1}
{"id": "folio_train_853", "prediction": "-HongKongDirectedEndGame(EndGame)", "score": 0}
{"id": "folio_train_854", "prediction": "all x.((Movie(x) & AndyChang(x)) -> FilmedOutsideOfWashington(x))", "score": 0}
{"id": "folio_train_855", "prediction": "(RealNumbers(Six) & RealNumbers(Seven) & RealNumbers(Eight))", "score": 0}
{"id": "folio_train_856", "prediction": "all x y.((RealNumber(x) & RealNumber(y) & Adds(x,y)) -> Larger(x,y))", "score": 0}
{"id": "folio_train_857", "prediction": "all x y.((Number(x) & Number(y) & LargerThan(x,y)) -> -LargerThan(y,x))", "score": 0}
{"id": "folio_train_858", "prediction": "all x.(Seven(x) -> EqualsSixPlusOne(x))", "score": 0}
{"id": "folio_train_859", "prediction": "all x.(Equals(x,7) & PlusOne(x))", "score": 0}
{"id": "folio_train_860", "prediction": "(Positive(Two))", "score": 0}
{"id": "folio_train_861", "prediction": "all x.((Number(x) & Positive(x)) -> Positive(x))", "score": 0}
{"id": "folio_train_862", "prediction": "(DoppelOfFour(Eight) -> DoubleOfFour(Eight))", "score": 0}
{"id": "folio_train_863", "prediction": "all x.(Four(x) -> DoubleOfTwo(x))", "score": 0}
{"id": "folio_train_864", "prediction": "all x.((Eight(x) & Seven(x)) -> Larger(x))", "score": 0}
{"id": "folio_train_865", "prediction": "All x.(Eight(x) -> Positive(x))", "score": -1}
{"id": "folio_train_866", "prediction": "all x.(Six(x) -> LargerThanSeven(x))", "score": 0}
{"id": "folio_train_867", "prediction": "all x.(Dog(x) -> -TellsTruth(x))", "score": 1}
{"id": "folio_train_868", "prediction": "exists x.(PokerPlayer(x) & Dog(x))", "score": 1}
{"id": "folio_train_869", "prediction": "exists x.(PokerPlayer(x) & -TellsTruth(x))", "score": 1}
{"id": "folio_train_870", "prediction": "all x.(Asian(x) -> Human(x))", "score": 0}
{"id": "folio_train_871", "prediction": "all x.(Chinese(x) -> Asian(x))", "score": 0}
{"id": "folio_train_872", "prediction": "all x.(Man(x) -> (Chinese(x) | British(x)))", "score": 0}
{"id": "folio_train_873", "prediction": "all x.(British(x) -> European(x))", "score": 0}
{"id": "folio_train_874", "prediction": "all x.(Spanish(x) -> European(x))", "score": 0}
{"id": "folio_train_875", "prediction": "-exists x.(Individual(x) & European(x))", "score": 0}
{"id": "folio_train_876", "prediction": "all x.(Jessee(x) -> ((Indian(x) & Human(x)) | (-Indian(x) & Human(x)))))", "score": -1}
{"id": "folio_train_877", "prediction": "Jesse is Chinese.", "score": -1}
{"id": "folio_train_878", "prediction": "-Chinese(Jesse)", "score": 0}
{"id": "folio_train_879", "prediction": "all x.((Jesse(x) & (Individual(x) | Spanish(x))) -> (British(x) & European(x)) | (-British(x) & European(x))))", "score": -1}
{"id": "folio_train_880", "prediction": "all x.((Person(x) & NeverAcceptsMistake(x)) -> GoodTeacher(x))", "score": 0}
{"id": "folio_train_881", "prediction": "exists x.(WellInformed(x) & -AcceptsMistake(x))", "score": 0}
{"id": "folio_train_882", "prediction": "exists x.(GoodTeacher(x) & -WellInformed(x))", "score": 0}
{"id": "folio_train_883", "prediction": "all x.(PhilatelicLiterature(x) -> (StampCatalogs(x) | Periodicals(x) | AuctionCatalogs(x) | Books(x) | Bibliographies(x) | BackgroundMaterial(x)))", "score": 0}
{"id": "folio_train_884", "prediction": "Mort is not StampCatalog(Mort)", "score": -1}
{"id": "folio_train_885", "prediction": "all x.(Mort(x) -> (-Periodical(x) & -AuctionCatalog(x) & -Biblical(x) & -BackgroundMaterial(x)))", "score": 0}
{"id": "folio_train_886", "prediction": "all x.(Mort(x) -> PhilatelicLiterature(x))", "score": 0}
{"id": "folio_train_887", "prediction": "all x.(Mort(x) -> Book(x))", "score": 0}
{"id": "folio_train_888", "prediction": "Mort is background material.", "score": -1}
{"id": "folio_train_889", "prediction": "Eragon is a piece of PhilatelicLiterature.", "score": -1}
{"id": "folio_train_890", "prediction": "all x.(AdventuresOfRusty(x) -> (DramaFilm(x) & ChildrensFilm(x)))", "score": 0}
{"id": "folio_train_891", "prediction": "all x y z.((ColumbiaPictures(x) & AdventuresOfRusty(y) & ColumbiaPictures(z)) -> ProducedBy(x,y,z))", "score": 0}
{"id": "folio_train_892", "prediction": "(ProducedByParamount(Tintin))", "score": 0}
{"id": "folio_train_893", "prediction": "Tintin is AdventureFilm(tin) & -AdventureFilm(tin))", "score": -1}
{"id": "folio_train_894", "prediction": "all x.(ColumbiaPictures(x) -> ProducesDramaFilms(x))", "score": 0}
{"id": "folio_train_895", "prediction": "all x.(ColumbiaPictures(x) -> ProducesAdventureFilms(x))", "score": 0}
{"id": "folio_train_896", "prediction": "all x.(Paramount(x) -> ProducesChildrensFilms(x))", "score": 0}
{"id": "folio_train_897", "prediction": "Paramount produces adventure films.", "score": -1}
{"id": "folio_train_898", "prediction": "Deng Xiaoping served as the SupremeLeaderOfPRC(x))", "score": -1}
{"id": "folio_train_899", "prediction": "(PraisedForReaffirmationOfReformProgram(DengXiaoping) & SouthernTour(DengXiaoping) & ReversionOfHongKongToChineseControl(Deng1997) & ReturnOfMacau(DengXiaoping))", "score": 0}
{"id": "folio_train_900", "prediction": "(SecretaryGeneral(Mao) & VicePremier(Mao) & 1950s(Mao) & VicePremier(Mao)) & DengXiaoping(Deng) & AntiRightistCampaign(Deng))", "score": -1}
{"id": "folio_train_901", "prediction": "(InitiativeInChinasEconomicReconstruction(DengXiaoping) & GreatLeapForward(Disaster(DengXiaoping,58) & GreatLeapForward(DengXiaoping,1960))", "score": -1}
{"id": "folio_train_902", "prediction": "Mao Zedong (Mao) & DiedIn(Mao,76))", "score": -1}
{"id": "folio_train_903", "prediction": "(After MaoZedong's Death, DengXiaopingRisesToSupremePower(x))", "score": -1}
{"id": "folio_train_904", "prediction": "all x.((Principal(x) & Primal(x)) -> VicePrimary(x))", "score": 0}
{"id": "folio_train_905", "prediction": "DengXiaoping presided over something launched by someone he wasUnder.", "score": -1}
{"id": "folio_train_906", "prediction": "all x y.((Person(x) & InstrumentalInChinasEconomicReconstruction(x)) -> SufficientPower(y))", "score": 0}
{"id": "folio_train_907", "prediction": "all x.(ImaginativeProcess(x) -> ProducedInHumanBrains(x))", "score": 0}
{"id": "folio_train_908", "prediction": "all x.(ScienceFiction(x) -> FromImaginativeProcess(x))", "score": 0}
{"id": "folio_train_909", "prediction": "(ScienceFiction(science) | Fact(science))", "score": 0}
{"id": "folio_train_910", "prediction": "-exists x.(Fact(x) & False(x))", "score": 0}
{"id": "folio_train_911", "prediction": "all x.(Dune(x) -> (ScienceFiction(x) | ProvenToBeFalse(x)))", "score": 0}
{"id": "folio_train_912", "prediction": "Dune is a fact.", "score": -1}
{"id": "folio_train_913", "prediction": "all x.(Dune(x) -> (ProducedInHumanBrains(x) & ImaginativeProcess(x)))", "score": 0}
{"id": "folio_train_914", "prediction": "all x.(Dune(x) -> (ProducedInHumanBrains(x) | ImaginativeProcess(x)))", "score": 0}
{"id": "folio_train_915", "prediction": "all x.(Dune(x) -> (ProducedInHumanBrains(x) & ScienceFiction(x)))", "score": 0}
{"id": "folio_train_916", "prediction": "all x.(Dune(x) -> (ProducedInHumanBrains(x) | ProducedInScienceFiction(x)))", "score": 0}
{"id": "folio_train_917", "prediction": "all x.((Dune(x) & ProducedInHumanBrains(x) & ImaginativeProcess(x)) -> -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x))", "score": 0}
{"id": "folio_train_918", "prediction": "all x.((Dune(x) & (Factual(x) & ProducedInHumanBrains(x) | -Factual(x) & ProducedInHumanBrains(x))) -> (ProducedInHumanBrains(x) & ScienceFiction(x)))", "score": 0}
{"id": "folio_train_919", "prediction": "all x.((Dune(x) & ScienceFiction(x)) -> -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x))", "score": 0}
{"id": "folio_train_920", "prediction": "all x.((Dune(x) & -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x)) -> (-ImaginativeProcess(x) & -ProvedToBeFalse(x)))", "score": 0}
{"id": "folio_train_921", "prediction": "all x.((Dune(x) & -ImaginativeProcess(x) & ScienceFiction(x)) -> (-ProducedInHumanBrains(x) & -ImaginativeProcess(x)))", "score": 0}
{"id": "folio_train_922", "prediction": "all x.(AmericanSuperhero(x) -> (ComesFromDCUniverse(x) | ComesFromMarvelUniverse(x)))", "score": 0}
{"id": "folio_train_923", "prediction": "all x.(CaptainAmerica(x) -> Superhero(x))", "score": 0}
{"id": "folio_train_924", "prediction": "all x.(CaptainAmerica(x) -> American(x))", "score": 0}
{"id": "folio_train_925", "prediction": "(-ComesFromDCUniverse(CaptainAmerica))", "score": 0}
{"id": "folio_train_926", "prediction": "all x.((Superhero(x) & American(x)) -> SpeaksEnglish(x))", "score": 0}
{"id": "folio_train_927", "prediction": "all x.(Superhero(x) -> (SpeaksEnglish(x) | SpeaksSpanish(x)))", "score": 0}
{"id": "folio_train_928", "prediction": "(-SpeaksEnglish(CaptainAmerica))", "score": 0}
{"id": "folio_train_929", "prediction": "all x.(CaptainAmerica(x) -> MarvelUniverse(x))", "score": 0}
{"id": "folio_train_930", "prediction": "all x.(CaptainAmerica(x) -> SpeaksSpanish(x))", "score": 0}
{"id": "folio_train_931", "prediction": "RobertZimmer (bornInGermany)", "score": 0}
{"id": "folio_train_932", "prediction": "RobertZimmer is an essayist.", "score": -1}
{"id": "folio_train_933", "prediction": "RobertZimmer (bornIn(RobertZimmer,1953))", "score": 0}
{"id": "folio_train_934", "prediction": "all x.(Essayist(x) -> Writer(x))", "score": 0}
{"id": "folio_train_935", "prediction": "all x.(BirthInGermany(x) -> German(x))", "score": 0}
{"id": "folio_train_936", "prediction": "RobertZimmer(x) & German(x))", "score": -1}
{"id": "folio_train_937", "prediction": "all x.(RobertZimmer(x) -> -Writer(x))", "score": 0}
{"id": "folio_train_938", "prediction": "RobertZimmer(biographer)", "score": 0}
{"id": "folio_train_939", "prediction": "all x.((Person(x) & RepaysLoansOnTime(x)) -> HighCreditScore(x))", "score": 0}
{"id": "folio_train_940", "prediction": "exists x.(Person(x) & HighCreditScores(x) & HighSalary(x) & ApprovedForMortgage(x))", "score": 0}
{"id": "folio_train_941", "prediction": "John has a highSalary(John)", "score": -1}
{"id": "folio_train_942", "prediction": "all x.((John(x) & RepaysLoansOnTime(x)) -> ApprovedForMortgage(x))", "score": 0}
{"id": "folio_train_943", "prediction": "all x.(Student(x) -> MemberOfUniversity(x))", "score": 0}
{"id": "folio_train_944", "prediction": "all x.(GraduateStudent(x) -> Student(x))", "score": 0}
{"id": "folio_train_945", "prediction": "all x.(PhDStudent(x) -> GraduateStudent(x))", "score": 0}
{"id": "folio_train_946", "prediction": "exists x.(PhDStudent(x) & HighIQ(x))", "score": 0}
{"id": "folio_train_947", "prediction": "all x.((John(x) & -PhDStudent(x)) -> -MemberOfUniversity(x))", "score": 0}
{"id": "folio_train_948", "prediction": "all x.(HighIQ(x) -> (PhD student(x) | GraduateStudent(x)))", "score": -1}
{"id": "folio_train_949", "prediction": "John has a highIQ.", "score": -1}
{"id": "folio_train_950", "prediction": "(-HighIQ(John))", "score": 0}
{"id": "folio_train_951", "prediction": "John is a PhDStudent(John)", "score": -1}
{"id": "folio_train_952", "prediction": "(EuropeanCountry(Belgium) & EuropeanCountry(France) & EuropeanCountry(Germany))", "score": 0}
{"id": "folio_train_953", "prediction": "Paris is capital of France.", "score": -1}
{"id": "folio_train_954", "prediction": "all x.(EiffelTower(x) -> TouristAttraction(x))", "score": 0}
{"id": "folio_train_955", "prediction": "exists x.(BelgianPerson(x) & LivesIn(x,Belgium))", "score": 0}
{"id": "folio_train_956", "prediction": "all x.((John(x) & GoesToEurope(x)) -> SeesTouristAttractions(x))", "score": 0}
{"id": "folio_train_957", "prediction": "John speaks French.", "score": -1}
{"id": "folio_train_958", "prediction": "all x.((John(x) & GoesToEurope(x)) -> SeesEisenburgerTower(x))", "score": 0}
{"id": "folio_train_959", "prediction": "(LocatedInCapital(EiffelTower) & CapitalOfFrance(EiffelTower))", "score": 0}
{"id": "folio_train_960", "prediction": "John lives in Belgium.", "score": -1}
{"id": "folio_train_961", "prediction": "all x.(SportsCar(x) -> Loud(x))", "score": 0}
{"id": "folio_train_962", "prediction": "-exists x.(LoudCar(x) & Electric(x))", "score": 0}
{"id": "folio_train_963", "prediction": "all x.((Car(x) & Ferrari(x)) -> SportsCar(x))", "score": 0}
{"id": "folio_train_964", "prediction": "all x.((Car(x) & MadeInMaranello(x)) -> Ferrari(x))", "score": 0}
{"id": "folio_train_965", "prediction": "all x.((Prius(x) & -SportsCar(x) & -LoudCar(x)) -> (MaranelloMadeCar(x) | LoudCar(x)))", "score": 0}
{"id": "folio_train_966", "prediction": "all x.(Prius(x) -> ElectricCar(x))", "score": 0}
{"id": "folio_train_967", "prediction": "-ElectricCar(Prius)", "score": 0}
{"id": "folio_train_968", "prediction": "all x.(Prius(x) -> MaranelloMadeCar(x))", "score": 0}
{"id": "folio_train_969", "prediction": "all x.((Prius(x) & (Ferrari(x) | LoudCar(x))) -> ElectricCar(x))", "score": 0}
{"id": "folio_train_970", "prediction": "all x.((Plant(x) & -CrazyAnimal(x)) -> -CrazyAnimal(x))", "score": 0}
{"id": "folio_train_971", "prediction": "all x.(Flower(x) -> Plant(x))", "score": 3}
{"id": "folio_train_972", "prediction": "all x.(Kitten(x) -> CuteAnimal(x))", "score": 0}
{"id": "folio_train_973", "prediction": "all x.((GrownInGarden(x) & Flower(x)) -> GrownInGarden(x))", "score": 0}
{"id": "folio_train_974", "prediction": "all x.(Piper(x) -> (Kitty(x) | CuteAnimal(x)))", "score": 0}
{"id": "folio_train_975", "prediction": "all x.(Piper(x) -> GrownInGarden(x))", "score": 0}
{"id": "folio_train_976", "prediction": "all x.(Piper(x) -> -GrownInGarden(x))", "score": 0}
{"id": "folio_train_977", "prediction": "(Kitten(Piper) & Kitten(Piper))", "score": 0}
{"id": "folio_train_978", "prediction": "all x.(Guam(x) -> ParticipatedInWinterOlympics(x))", "score": 0}
{"id": "folio_train_979", "prediction": "(WinterOlympics(1988) & HeldInCalgary(1988))", "score": 0}
{"id": "folio_train_980", "prediction": "all x y.((Guam(x) & Athlete(y)) -> SendsToCalgaryWinterOlympics(x,y))", "score": 0}
{"id": "folio_train_981", "prediction": "all x y.((Guan(x) & Athlete(y) & CalgaryWinterOlympics(x)) -> ParticipatedIn(y,x))", "score": 0}
{"id": "folio_train_982", "prediction": "Judd Bankert is the only AthleteFromGuam,whoCompetedInWinterOlympics(JuddBankert,Guam))", "score": -1}
{"id": "folio_train_983", "prediction": "Judd Bankert competed in the 1992 WinterOlympics.", "score": -1}
{"id": "folio_train_984", "prediction": "all x.(Guam(x) -> ParticipatedInSummerOlympics(x))", "score": 0}
{"id": "folio_train_985", "prediction": "(BritishPhDennis(MichaelO'Donnell) & Physician(MichaelO'Donnell) & Journalist(MichaelO'Donnell) & Author(MichaelO'Donnell) & Broadcaster(MichaelO'Donnell)", "score": -1}
{"id": "folio_train_986", "prediction": "(WordSetter(MeanWord) & MichaelO'Donnell(MeanWord))", "score": 0}
{"id": "folio_train_987", "prediction": "all x.(WorldMedicine(x) -> EditedByMichaelO'Donnell(x))", "score": 0}
{"id": "folio_train_988", "prediction": "Michael O'Donnell was born in Yorkshire as the son of a general practitioner.", "score": -1}
{"id": "folio_train_989", "prediction": "all x y.((Son(x) & GeneralPharmacist(y)) -> WordSetterOfMyWord(x))", "score": 0}
{"id": "folio_train_990", "prediction": "all x.(WorldMedicine(x) -> -Magazine(x))", "score": 0}
{"id": "folio_train_991", "prediction": "-exists x.(BritishAuthor(x) & -Author(x))", "score": 0}
{"id": "folio_train_992", "prediction": "-exists x.(Journalist(x) & BornInYorkshire(x))", "score": 0}
{"id": "folio_train_993", "prediction": "exists x y.(Son(x) & GeneralPharmacist(y) & GeneralPharmacist(x) & -Author(x))", "score": 0}
{"id": "folio_train_994", "prediction": "-exists x.(Homework(x) & Fun(x))", "score": 0}
{"id": "folio_train_995", "prediction": "exists x.(Reading(x) & Homework(x))", "score": 0}
{"id": "folio_train_996", "prediction": "exists x.(Reading(x) & Fun(x))", "score": 0}
{"id": "folio_train_997", "prediction": "all x.((Violence(x) & Good(x)) -> Justified(x))", "score": 1}
{"id": "folio_train_998", "prediction": "all x.(Justified(x) -> Lawful(x))", "score": 1}
{"id": "folio_train_999", "prediction": "all x.((Violence(x) & Good(x)) -> Lawful(x))", "score": 1}
{"id": "folio_train_1000", "prediction": "all x.(HasHorseRiver(x) -> RegularRideHorsesForPlenishAndSport(x))", "score": 0}
{"id": "folio_train_1001", "prediction": "all x.((Person(x) & HasMoreDiscoverableIncome(x)) -> HasHorseRiver(x))", "score": 0}
{"id": "folio_train_1002", "prediction": "all x.(CompeteInHorseDressageShows(x) -> DisposableIncome(x))", "score": 0}
{"id": "folio_train_1003", "prediction": "all x.(CompeteInHorseDressageShows(x) -> (InvestedInHighQualityEquestrianGear(x) & InvestedInHighQualityEquestrianEquipment(x)))", "score": 0}
{"id": "folio_train_1004", "prediction": "all x.((People(x) & RegularRideHorses(x) & ForPlenish(x) & ForSport(x)) -> -CrombedResidentialBuildings(x))", "score": 0}
{"id": "folio_train_1005", "prediction": "(all x.(Manny(x) -> (HasHorseRiver(x) & LivesInCrombedResidentialBuildings(x))) | (-HasHorseRiver(x) & LivesInCrombedResidentialBuildings(x))))", "score": -1}
{"id": "folio_train_1006", "prediction": "all x.(Manny(x) -> (Rides(x,horse) & ForPlenish(x) & ForSport(x)))", "score": 0}
{"id": "folio_train_1007", "prediction": "all x.(Manny(x) -> (CompetesInHorseDressageShows(x) & InvestedInHighQualityEquestrianEquipmentAndGear(x)))", "score": 0}
{"id": "folio_train_1008", "prediction": "all x.((Manny(x) & (HasHorseRanch(x) | CompetesInHorseDressage(x))) -> -InvestedInHighQualityEquestrianEquipmentAndGear(x))", "score": 0}
{"id": "folio_train_1009", "prediction": "all x.(Roundel(x) -> (RoundedArtilleryFortification(x) & Fortification(x)))", "score": 0}
{"id": "folio_train_1010", "prediction": "all x.(Roundel(x) -> -HigherThanAdjacentWalls(x))", "score": 0}
{"id": "folio_train_1011", "prediction": "all x.(Cannon(x) -> CanBeDeployedOnArtilleryFortifications(x))", "score": 0}
{"id": "folio_train_1012", "prediction": "all x.(Roundels(x) -> (ArtilleryFortification(x) & Oldest(x)))", "score": 0}
{"id": "folio_train_1013", "prediction": "all x.(BatteryTower(x) -> ArtilleryFortification(x))", "score": 0}
{"id": "folio_train_1014", "prediction": "all x.(Cannon(x) -> CanBeDeployedOnBatteryTowers(x))", "score": 0}
{"id": "folio_train_1015", "prediction": "all x y.((Roundel(x) & BatteryTower(y)) -> OlderThan(x,y))", "score": 0}
{"id": "folio_train_1016", "prediction": "all x y.((BatteryTower(x) & Wall(y)) -> HigherThan(x,y))", "score": 0}
{"id": "folio_train_1017", "prediction": "all x.(Roundels(x) -> CanBeDeployedOnRoundels(x))", "score": 0}
{"id": "folio_train_1018", "prediction": "all x.(Tissue(x) -> Soft(x))", "score": 0}
{"id": "folio_train_1019", "prediction": "exists x.(Paper(x) & Tissue(x))", "score": 0}
{"id": "folio_train_1020", "prediction": "exists x.(Paper(x) & Hard(x))", "score": 0}
{"id": "folio_train_1021", "prediction": "all x.(Volunteer(x) -> ReceivesIntangibleBenefits(x))", "score": 0}
{"id": "folio_train_1022", "prediction": "all x.(Volunteer(x) -> (WorksRegularly(x) | WorksAsNeeded(x)))", "score": 0}
{"id": "folio_train_1023", "prediction": "exists x.(Volunteer(x) & Trained(x))", "score": 0}
{"id": "folio_train_1024", "prediction": "all x.(Volunteer(x) -> (WorksInGroups(x) | WorksInPrimaryGroups(x)))", "score": 0}
{"id": "folio_train_1025", "prediction": "all x.(EnvironmentalVolunteer(x) -> (ContributesToEnvironmentalManagement(x) | ContributesToConservation(x)))", "score": 0}
{"id": "folio_train_1026", "prediction": "all x.((Volunteer(x) & NaturalDisasterResponse(x)) -> WorksInGroups(x))", "score": 0}
{"id": "folio_train_1027", "prediction": "all x.((Volunteer(x) & ParticipatesInNaturalDisasterResponse(x)) -> ReceivesIntangibleBenefits(x))", "score": 0}
{"id": "folio_train_1028", "prediction": "all x.(EnvironmentalVolunteer(x) -> WorksInGroups(x))", "score": 0}
{"id": "folio_train_1029", "prediction": "all x.(Volunteer(x) -> Trained(x))", "score": 0}
{"id": "folio_train_1030", "prediction": "all x.((Person(x) & VeryConsistent(x) & EnjoysStickingToRegularRoutines(x)) -> -LikesSurprises(x))", "score": 0}
{"id": "folio_train_1031", "prediction": "all x.((Person(x) & WearsFlannelShirtsEveryDay(x)) -> (Consistent(x) & EnjoysStickingToRegularRoutines(x)))", "score": 0}
{"id": "folio_train_1032", "prediction": "all x.((Person(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)) -> WearsFlannelShirtsEveryDay(x))", "score": 0}
{"id": "folio_train_1033", "prediction": "all x.((OldPerson(x) & LivesInStableHome(x)) -> -LikesSurprises(x))", "score": 0}
{"id": "folio_train_1034", "prediction": "all x.((Person(x) & VeryHighEnergy(x) & Impulsive(x)) -> LikesSurprises(x))", "score": 0}
{"id": "folio_train_1035", "prediction": "all x.((Person(x) & WearsFlannelShirtsEveryDay(x) & VeryHighEnergy(x) & Impulsive(x)) -> ((Consistent(x) & EnjoysRegularRoutines(x)) | -LikesSurprises(x))))", "score": -1}
{"id": "folio_train_1036", "prediction": "all x.(Mike(x) -> OldPerson(x) & LivesInStableHome(x))", "score": 0}
{"id": "folio_train_1037", "prediction": "all x.((Mike(x) & WearsFlannelShirtsEveryDay(x) | (-LikesShoppingForClothesAndMaterialisticGoods(x)))) -> (-OldPerson(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)))", "score": -1}
{"id": "folio_train_1038", "prediction": "all x.((OldPerson(x) & LivesInStableHome(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)) -> -LikesShoppingForClothesAndMaterialisticGoods(x))", "score": 1}
{"id": "folio_train_1039", "prediction": "Adam ownsCars(a)", "score": -1}
{"id": "folio_train_1040", "prediction": "Adam has a favoriteCar(a)", "score": -1}
{"id": "folio_train_1041", "prediction": "(OwnsCar(Adam) & FavoriteCar(Adam))", "score": 0}
{"id": "folio_train_1042", "prediction": "Adam brokefavouriteCar(a)", "score": -1}
{"id": "folio_train_1043", "prediction": "Adam owns a JapaneseCar.", "score": -1}
{"id": "folio_train_1044", "prediction": "Adam brokeCar(a)", "score": -1}
{"id": "folio_train_1045", "prediction": "-exists x.(Building(x) & NewHunt(x) & HigherThan(x,400))", "score": 0}
{"id": "folio_train_1046", "prediction": "all x.((Building(x) & ManagedByYaleHousing(x)) -> NewHunt(x))", "score": 0}
{"id": "folio_train_1047", "prediction": "all x.((Building(x) & InMetropolitan(x)) -> HigherThan400Meters(x))", "score": 0}
{"id": "folio_train_1048", "prediction": "all x.((Building(x) & OwnedByBanana(x)) -> Manhattan(x))", "score": 0}
{"id": "folio_train_1049", "prediction": "all x.((Building(x) & BloombergLogo(x)) -> OwnedByBananas(x))", "score": 0}
{"id": "folio_train_1050", "prediction": "(-NewHaven(TowerA) & -NewHaven(TowerA))", "score": 0}
{"id": "folio_train_1051", "prediction": "all x.(TowerB(x) -> (Building(x) & BloombergLogo(x) & InMetropolitan(x)))", "score": 0}
{"id": "folio_train_1052", "prediction": "All x.(TowerA(x) -> HigherThan(x,400))", "score": -1}
{"id": "folio_train_1053", "prediction": "all x.(TurbineA(x) -> -HigherThan400Meters(x))", "score": 0}
{"id": "folio_train_1054", "prediction": "all x.((Building(x) & (BloombergLogo(x) | YaleHousing(x))) -> TowerA(x))", "score": 0}
{"id": "folio_train_1055", "prediction": "all x.(TowerA(x) -> (-BurningWithBurningBottom(x) & -ManagedByYaleHousing(x)))", "score": 0}
{"id": "folio_train_1056", "prediction": "-exists x.(Fish(x) & Bird(x))", "score": 0}
{"id": "folio_train_1057", "prediction": "all x.((Osprey(x) & Bird(x)) -> Bird(x))", "score": 0}
{"id": "folio_train_1058", "prediction": "all x.((Carp(x) & Fish(x)) -> Fish(x))", "score": 0}
{"id": "folio_train_1059", "prediction": "all x.(Goldfish(x) -> Carp(x))", "score": 0}
{"id": "folio_train_1060", "prediction": "all x.((Bubble(x) & (Osprey(x) | Goldfish(x))) -> -Fish(x))", "score": 0}
{"id": "folio_train_1061", "prediction": "Osprey(Bubbles)", "score": 0}
{"id": "folio_train_1062", "prediction": "all x.(Bubble(x) -> Carp(x))", "score": 0}
{"id": "folio_train_1063", "prediction": "all x.(Bubble(x) -> -Crop(x))", "score": 0}
{"id": "folio_train_1064", "prediction": "all x y.((Mr.Smith(x) & Mrs.Smith(y)) -> (MakesTravelPlan(x) & (WantsToCalifornia(x) | WantsToFlorida(x)) & -WantsToCalifornia(y))))", "score": -1}
{"id": "folio_train_1065", "prediction": "all x.((City(x) & Interest(x)) -> (SanFrancisco(x) | Los Angeles(x) | SanDiego(x)))", "score": -1}
{"id": "folio_train_1066", "prediction": "all x.((City(x) & Interest(x)) -> (Orlando(x) | Miami(x)))", "score": 0}
{"id": "folio_train_1067", "prediction": "(BeganTo(Mr.Smith,City,2) & In(Mr.Smith,City,2))", "score": -1}
{"id": "folio_train_1068", "prediction": "all x.(Ms.Smith(x) -> (BeganTo(x,Fla.) & To(x,Fla.)))", "score": -1}
{"id": "folio_train_1069", "prediction": "(Son(Mr.Smith) & SanFrancisco(Mr.Smith))", "score": -1}
{"id": "folio_train_1070", "prediction": "all x.((City(x) & Candidate(x)) -> Visits(x,Florida))", "score": 0}
{"id": "folio_train_1071", "prediction": "all x.((Big(x) | Small(x)) -> Everything(x))", "score": 0}
{"id": "folio_train_1072", "prediction": "all x.(BigThing(x) -> Heavy(x))", "score": 0}
{"id": "folio_train_1073", "prediction": "all x.(SmallThing(x) -> Light(x))", "score": 0}
{"id": "folio_train_1074", "prediction": "all x.(HeavyThing(x) -> Still(x))", "score": 0}
{"id": "folio_train_1075", "prediction": "all x.(LightThing(x) -> Instabil(x))", "score": 0}
{"id": "folio_train_1076", "prediction": "all x.(InstabileThing(x) -> Changes(x))", "score": 0}
{"id": "folio_train_1077", "prediction": "all x.(InstabileThing(x) -> Kinetic(x))", "score": 0}
{"id": "folio_train_1078", "prediction": "all x.(Bird(x) -> -(Heavy(x) & Still(x)))", "score": 0}
{"id": "folio_train_1079", "prediction": "all x.(Bird(x) -> Still(x))", "score": 0}
{"id": "folio_train_1080", "prediction": "all x.(Bird(x) -> -Still(x))", "score": 0}
{"id": "folio_train_1081", "prediction": "all x.(Bird(x) -> (Kinetic(x) & Changes(x)))", "score": 0}
{"id": "folio_train_1082", "prediction": "all x.(Bird(x) -> (Kinetic(x) | Changes(x)))", "score": 0}
{"id": "folio_train_1083", "prediction": "all x.(Bird(x) -> ((Kinetic(x) | Changeable(x)) & -(Kinetic(x) & Changeable(x))))", "score": 0}
{"id": "folio_train_1084", "prediction": "all x.((Bird(x) & (Small(x) | Still(x))) -> (Kinetic(x) | Changed(x)))", "score": 0}
{"id": "folio_train_1085", "prediction": "all x.(DiRay(x) -> PoliceProceduralTVSeries(x))", "score": 0}
{"id": "folio_train_1086", "prediction": "(CreatedByMayaSondhi(DIRay) & WrittenByMayaSondhi(DIRay))", "score": 0}
{"id": "folio_train_1087", "prediction": "(ProducedByJedMercurio(DIRay)", "score": -1}
{"id": "folio_train_1088", "prediction": "(British(MayaSondhi) & British(JedMercurio))", "score": 0}
{"id": "folio_train_1089", "prediction": "(CreatedByBritish(DIRay)", "score": -1}
{"id": "folio_train_1090", "prediction": "exists x.(British(x) & ProducedTelevisionSeries(x))", "score": 0}
{"id": "folio_train_1091", "prediction": "all x.(Men(x) -> Human(x))", "score": 0}
{"id": "folio_train_1092", "prediction": "all x.(Gentleman(x) -> Men(x))", "score": 0}
{"id": "folio_train_1093", "prediction": "all x.(Lawyer(x) -> Gentlemen(x))", "score": 0}
{"id": "folio_train_1094", "prediction": "all x.(Female(x) -> Human(x))", "score": 0}
{"id": "folio_train_1095", "prediction": "-exists x.(Sheep(x) & Human(x))", "score": 0}
{"id": "folio_train_1096", "prediction": "all x.((Mike(x) & -Human(x) & Sheep(x)) -> (Man(x) | Human(x)))", "score": 0}
{"id": "folio_train_1097", "prediction": "all x.(Mike(x) -> Woman(x))", "score": 0}
{"id": "folio_train_1098", "prediction": "all x.((Mike(x) & (Gentleman(x) | Lawyer(x))) -> -(Mike(x) & Woman(x) & Lawyer(x)))", "score": 0}
{"id": "folio_train_1099", "prediction": "all x.((Mike(x) & -(Woman(x) & Lawyer(x))) -> Lawyer(x))", "score": 0}
{"id": "folio_train_1100", "prediction": "exists x.(Defender(x) & Centerback(x))", "score": 0}
{"id": "folio_train_1101", "prediction": "all x.((StephenCurry(x) & Centerback(x)) -> Centerback(x))", "score": 0}
{"id": "folio_train_1102", "prediction": "(-(Centerback(StephenCurry) & Defender(StephenCurry)))", "score": 0}
{"id": "folio_train_1103", "prediction": "all x.((StephenCurry(x) & -Centerback(x) & -Defendant(x)) -> (-SoccerPlayer(x) & -ProfessionalBasketballPlayer(x)))", "score": 0}
{"id": "folio_train_1104", "prediction": "all x.((Person(x) & -HasEnoughMoney(x)) -> CannotBuyProduct(x))", "score": 0}
{"id": "folio_train_1105", "prediction": "all x.(Monitor(x) -> Product(x))", "score": 0}
{"id": "folio_train_1106", "prediction": "all x y.((4kMonitor(x) & 1080Monitor(y) & 2kMonitor(x)) -> MoreExpective(x,y))", "score": 0}
{"id": "folio_train_1107", "prediction": "John is Person(John)", "score": -1}
{"id": "folio_train_1108", "prediction": "(-HasEnoughMoneyToBuy2kMonitor(John))", "score": 0}
{"id": "folio_train_1109", "prediction": "-CanBuy(John,1080)", "score": 0}
{"id": "folio_train_1110", "prediction": "-CanBuy2kMonitor(John)", "score": 0}
{"id": "folio_train_1111", "prediction": "all x.(ArtificialSatellite(x) -> ImportantScientificAchievement(x))", "score": 0}
{"id": "folio_train_1112", "prediction": "exists x.(ArtificialSatellite(x) & -U.S.Invention(x))", "score": -1}
{"id": "folio_train_1113", "prediction": "all x.((ScientificAchievement(x) & U.S.Invention(x)) -> Important(x))", "score": -1}
{"id": "folio_train_1114", "prediction": "exists x.(Cat(x) & -Pet(x))", "score": 1}
{"id": "folio_train_1115", "prediction": "all x.(Cat(x) -> Mammal(x))", "score": 1}
{"id": "folio_train_1116", "prediction": "exists x.(Mammal(x) & -Pet(x))", "score": 1}
{"id": "folio_train_1117", "prediction": "all x.((Person(x) & VisitsCoffeeShop(x,y) & AtLeastThreeTimesWeek(x)) -> AddictToCoffeeOrCaffeinatedDrinks(x))", "score": 0}
{"id": "folio_train_1118", "prediction": "all x y.((Person(x) & CoffeeShop(y)) -> ((VisitsAtLeastThreeTimes(x,y) | OrdersTakeoutAtLeastOneDay(x,y))))", "score": 0}
{"id": "folio_train_1119", "prediction": "all x.((Person(x) & MakesOwnFoodAtHome(x) & UsesRecipesAndOnlineGuides(x)) -> OrdersTakeoutAtLeastOneDay(x))", "score": 0}
{"id": "folio_train_1120", "prediction": "all x.((Person(x) & OwnsCoffeemaker(x) & OwnsBlender(x)) -> -OrdersTakeout(x))", "score": 0}
{"id": "folio_train_1121", "prediction": "all x.((Person(x) & LeadsBusyLife(x) & 12-hourWorkHours(x)) -> MakesOwnFoodAtHome(x))", "score": -1}
{"id": "folio_train_1122", "prediction": "(all x.(Sam(x) -> ((AddictedToCoffee(x) | AddictedToCaffeinatedDrinks(x)) | (AddictedToCoffee(x) & AddictedToCaffeinatedDrinks(x)) | (AddictedToCoffee(x) & AddictedToCaffeinatedDrinks(x)) | (AddictedToCaffeinatedDrinks(x))))))", "score": -1}
{"id": "folio_train_1123", "prediction": "all x.((Sam(x) & Coffee(x) & CaffeinatedDrinks(x)) -> Addictive(x))", "score": 0}
{"id": "folio_train_1124", "prediction": "all x.((Sam(x) & Coffeemaker(x) & Blender(x)) -> OwnsInHome(x))", "score": 0}
{"id": "folio_train_1125", "prediction": "all x.(Sam(x) -> (OwnsCoffeemaker(x) & OwnsBlender(x) & (OrdersTakeout(x) | OnceADay(x))))", "score": 0}
{"id": "folio_train_1126", "prediction": "-exists x.(ProfessionalBasketballPlayer(x) & SoccerPlayer(x))", "score": 0}
{"id": "folio_train_1127", "prediction": "all x.(Centerback(x) -> Defender(x))", "score": 0}
{"id": "folio_train_1128", "prediction": "(-NBAPlayer(RogerFederer) & -Defendant(RogerFederer))", "score": 0}
{"id": "folio_train_1129", "prediction": "all x.(Centerback(x) -> RogerFederer(x))", "score": 0}
{"id": "folio_train_1130", "prediction": "(-Centerback(RogerFederer))", "score": 0}
{"id": "folio_train_1131", "prediction": "(SoccerPlayer(RogerFederer)", "score": -1}
{"id": "folio_train_1132", "prediction": "exists x.(Teacher(x) & WorkingAtPool(x) & -Nice(x))", "score": 0}
{"id": "folio_train_1133", "prediction": "all x.((Teacher(x) & WorksAtPools(x)) -> PoolManager(x))", "score": 0}
{"id": "folio_train_1134", "prediction": "all x.(PoolManager(x) -> Lifeguard(x))", "score": 0}
{"id": "folio_train_1135", "prediction": "all x.(Lifeguard(x) -> WorkAtPool(x))", "score": 0}
{"id": "folio_train_1136", "prediction": "all x.((Mary(x) & -WorksAtPool(x)) -> -WorksAtPool(x))", "score": 0}
{"id": "folio_train_1137", "prediction": "Mary is nice.", "score": -1}
{"id": "folio_train_1138", "prediction": "all x.((Mary(x) & -Nice(x)) -> TeacherWorkingAtPool(x))", "score": 0}
{"id": "folio_train_1139", "prediction": "all x.(Maria(x) -> (Nice(x) & TeacherWorkingAtPool(x)))", "score": 0}
{"id": "folio_train_1140", "prediction": "-all x.(ArtPiece(x) -> RequiresTalent(x))", "score": 0}
{"id": "folio_train_1141", "prediction": "all x.((RequiresTalent(x)) -> RequiresPractice(x))", "score": 0}
{"id": "folio_train_1142", "prediction": "exists x.(ArtPiece(x) & -RequiresPractice(x))", "score": 0}
{"id": "folio_train_1143", "prediction": "(Painter(BernardaBrysonShahn) & Lithographer(BernardaBrysonShahn))", "score": 0}
{"id": "folio_train_1144", "prediction": "Bernarda BrysonShahn was born in Athens, Ohio.", "score": -1}
{"id": "folio_train_1145", "prediction": "(MarriedTo(BernardaBrysonShahn) & BenShahn(Ben))", "score": 0}
{"id": "folio_train_1146", "prediction": "all x.((Person(x) & BornInAthens(x) & BornInOakland(x)) -> American(x))", "score": 0}
{"id": "folio_train_1147", "prediction": "Bernarda BrysonShahn was born in Greece.", "score": -1}
{"id": "folio_train_1148", "prediction": "(American(BernardaBrysonShahn) & American(BernardaBrysonShahn))", "score": 0}
{"id": "folio_train_1149", "prediction": "all x.((BernardaBrysonShahn(x) & Divorced(x)) -> Divorced(x))", "score": 0}
{"id": "folio_train_1150", "prediction": "all x.((Person(x) & UpgradesToNewestAppleModelEveryYear(x)) -> -SavingMoneyForNewHouse(x))", "score": 0}
{"id": "folio_train_1151", "prediction": "all x.((Person(x) & EnjoysReadingTechSpecs(x) & UpToDateOnTechnology(x)) -> UpgradesToNewestIphoneModel(x))", "score": 0}
{"id": "folio_train_1152", "prediction": "all x y.((Person(x) & House(y)) -> (SavingMoney(x,y) | LivingInApartments(x,y)))", "score": 0}
{"id": "folio_train_1153", "prediction": "all x.((Person(x) & LivesWithAtLeastOneRoommate(x)) -> -OwnAtLeastOnePet(x))", "score": 0}
{"id": "folio_train_1154", "prediction": "all x.((Person(x) & OwnsPet(x)) -> LivesWithRoommate(x))", "score": 0}
{"id": "folio_train_1155", "prediction": "all x.((Emma(x) & -OwnsAtLeastOnePet(x) & LivesInApartmentsInBigMetropolitanCities(x)) -> (OwnsAtLeastOnePet(x) & LivesInApartmentInBigMetropolitanCities(x)) | (-OwnsAtLeastOnePet(x) & LivesInApartmentInBigMetropolitanCities(x))))", "score": -1}
{"id": "folio_train_1156", "prediction": "all x.((Emma(x) & Roommate(x)) -> LivesWith(x,y))", "score": 0}
{"id": "folio_train_1157", "prediction": "all x.((Emma(x) & TechSpecs(x)) -> (EnjoysReading(x) & KeepsUpToDateOnTechnology(x)))", "score": 0}
{"id": "folio_train_1158", "prediction": "all x.((Payroll(x) & OnPayroll(x)) -> PaidBySchool(x))", "score": 0}
{"id": "folio_train_1159", "prediction": "all x.((JobAtSchool(x) & Has(x,School)) -> OnPayroll(x))", "score": 0}
{"id": "folio_train_1160", "prediction": "all x.(FacultyMember(x) -> HasJobAtSchool(x))", "score": 0}
{"id": "folio_train_1161", "prediction": "all x.(FacultyMember(x) | Teacher(x))", "score": 0}
{"id": "folio_train_1162", "prediction": "all x.(Teacher(x) -> HasStudents(x))", "score": 0}
{"id": "folio_train_1163", "prediction": "all x.((Nancy(x) & Teacher(x)) -> OnPayroll(x))", "score": 0}
{"id": "folio_train_1164", "prediction": "all x.((Nancy(x) & -Teacher(x)) -> -PayedBySchool(x))", "score": 0}
{"id": "folio_train_1165", "prediction": "all x.(FacultyMember(x) -> Nancy(x))", "score": 0}
{"id": "folio_train_1166", "prediction": "all x.(Nancy(x) -> (PayedBySchool(x) & HasStudents(x)))", "score": 0}
{"id": "folio_train_1167", "prediction": "(-PayedBySchool(Nancy) & HasStudents(Nancy))", "score": 0}
{"id": "folio_train_1168", "prediction": "all x.(Kangoroo(x) -> Animal(x))", "score": 0}
{"id": "folio_train_1169", "prediction": "-exists x.(Kangaroo(x) & LivesIn(x,Germany))", "score": 0}
{"id": "folio_train_1170", "prediction": "all x.((Jane(x) & SavesEnoughMoney(x)) -> FlyToGermany(x))", "score": 0}
{"id": "folio_train_1171", "prediction": "all x.((FliesToGermany(x) & GoesToBerlinZoo(x)) -> GoesTo(x,BerlinZoo))", "score": 0}
{"id": "folio_train_1172", "prediction": "all x.((GoesToBerlinZoo(x) & SeesAnimals(x)) -> LivesInGermany(x))", "score": 0}
{"id": "folio_train_1173", "prediction": "Jane saved enough money.", "score": -1}
{"id": "folio_train_1174", "prediction": "all x.((Jane(x) & Kangaroo(x)) -> SeesInSummer(x))", "score": 0}
{"id": "folio_train_1175", "prediction": "all x.((Class(x) & HasPrerequisites(x)) -> MustTakePrerequisites(x))", "score": 0}
{"id": "folio_train_1176", "prediction": "all x.((Class(x) & NoPrerequisites(x)) -> CanTakeClass(x))", "score": 0}
{"id": "folio_train_1177", "prediction": "(Prerequisites(CPSC201) & Prerequisites(CPSC223))", "score": 0}
{"id": "folio_train_1178", "prediction": "all x.(IntroMicroeconomics(x) -> IntermediateMicroeconomics(x))", "score": 0}
{"id": "folio_train_1179", "prediction": "all x.(IntroGeology(x) -> -Prerequisites(x))", "score": 0}
{"id": "folio_train_1180", "prediction": "CPSC201 -HasPrerequisites(CPSC201))", "score": -1}
{"id": "folio_train_1181", "prediction": "all x.((Student(x) & TakedCPSC201(x) & -TakedCPSC223)) -> CanTakeCPSC323.", "score": -1}
{"id": "folio_train_1182", "prediction": "all x.(Student(x) -> -TakesIntroGeology(x))", "score": 0}
{"id": "folio_train_1183", "prediction": "all x.(Heptalogy(x) -> (CompoundLiteraryOrNarrativeWork(x) & MadeUpOfSevenDistinctWorks(x)))", "score": 0}
{"id": "folio_train_1184", "prediction": "all x.(HarryPotter(x) -> ConsistsOfSevenDistinctWorks(x))", "score": 0}
{"id": "folio_train_1185", "prediction": "The ChroniclesOfNarnia (CyclopediasOfNarnia) - 7DistinctWorks(x))", "score": -1}
{"id": "folio_train_1186", "prediction": "all x.(HarryPotterBook(x) -> Heptalogy(x))", "score": 0}
{"id": "folio_train_1187", "prediction": "all x.((Books(x) & ChroniclesOfNarnia(x)) -> -Heptalogy(x))", "score": 0}
{"id": "folio_train_1188", "prediction": "(Heptalogy(LordOfRings)", "score": -1}
{"id": "folio_train_1189", "prediction": "all x.((Person(x) & AttendsRenaissanceFairs(x)) -> EnjoysShavingInOldOdiodPeriodClothing(x))", "score": 0}
{"id": "folio_train_1190", "prediction": "all x.((FascinatedByRenaissance(x) & FascinatedByPastEras(x)) -> AttendsRenaissanceFairsRegularly(x))", "score": 0}
{"id": "folio_train_1191", "prediction": "all x.((Person(x) & FascinatedByReformation(x)) | -NostalgicAcademic(x) & EnjoysLearning(x))", "score": 0}
{"id": "folio_train_1192", "prediction": "all x.((People(x) & FocusedOnFuture(x) & FocusedOnIndustryProfessions(x)) -> -NostalgicAcademics(x) & EnjoyLearning(x))", "score": 0}
{"id": "folio_train_1193", "prediction": "all x.((Person(x) & HistoricalProfessor(x) & PassionateAboutJobAndSubject(x)) -> NostalgicAcademic(x))", "score": 0}
{"id": "folio_train_1194", "prediction": "all x.((Clyde(x) & -FocusedOnFutureAndIndustryProfessions(x)) -> (-FocusedOnFutureAndIndustryProfessionals(x) & -EnjoysSewingInOldDecoratedAndHistoricalPeriodClothing(x)))", "score": 0}
{"id": "folio_train_1195", "prediction": "Clyde attendsRenaissanceFairsRegularly(Clyde)", "score": -1}
{"id": "folio_train_1196", "prediction": "all x.((Professor(x) & PassionateAboutJobAndSubject(x)) -> Clyde(x))", "score": 0}
{"id": "folio_train_1197", "prediction": "all x.((HistoryProfessor(x) & (PositiveAboutJob(x) | NostalgicAcademic(x))) -> EnjoysLearning(x))", "score": 0}
{"id": "folio_train_1198", "prediction": "-exists x.(SportsCar(x) & Vehicle(x) & DesignedForModerateSpeeds(x))", "score": 0}
{"id": "folio_train_1199", "prediction": "all x.((Automobile(x) & DesignedForFamilyUse(x)) -> IntendedForModerateSpeeds(x))", "score": 0}
{"id": "folio_train_1200", "prediction": "-exists x.(SportsCar(x) & DesignedForFamilyUse(x))", "score": 0}
{"id": "folio_train_1201", "prediction": "all x.(WorksWellInTeams(x) -> GetsTogetherWithColleagues(x))", "score": 0}
{"id": "folio_train_1202", "prediction": "all x.((Person(x) & ComesToWorkEveryDayWithPositiveAttitude(x)) -> WorksWellInTeams(x))", "score": 0}
{"id": "folio_train_1203", "prediction": "all x.((Person(x) & ComesIntoWorkEveryDayWithPositiveAttitude(x)) | TiredEveryMorning(x))", "score": 0}
{"id": "folio_train_1204", "prediction": "all x y.((Person(x) & Boss(y) & ManyPromotions(x,y)) -> NegativeFeedback(x,y))", "score": 0}
{"id": "folio_train_1205", "prediction": "all x.(Kat(x) -> (WorksWellInTeams(x) & TiredEveryMorning(x)) | (-WorksWellInTeams(x) & TiredEveryMorning(x))))", "score": -1}
{"id": "folio_train_1206", "prediction": "all x.(Kat(x) -> ComesToWorkEveryDayWithPositiveAttitude(x))", "score": 0}
{"id": "folio_train_1207", "prediction": "all x y.((Kat(x) & Work(y)) -> (GetsAlong(x,y) & NegativeFeedback(x,y)))", "score": 0}
{"id": "folio_train_1208", "prediction": "all x y.((Kat(x) & Work(y)) -> (GetsAlong(x,y) | NegativeFeedback(x,y)))", "score": 0}
{"id": "folio_train_1209", "prediction": "all x.(Drishti(x) -> OpenSource(x))", "score": 0}
{"id": "folio_train_1210", "prediction": "all x.(OpenSourceSoftware(x) -> FreeToModify(x))", "score": 0}
{"id": "folio_train_1211", "prediction": "all x.(Drishti(x) -> FreeToModify(x))", "score": 0}
{"id": "folio_train_1212", "prediction": "all x.((Grade(x) & A+(x) | A+(x) | B+(x) | B+(x) | C(x))) -> InEnglish(x))", "score": -1}
{"id": "folio_train_1213", "prediction": "all x.((Student(x) & A+English(x)) -> ScoreGreaterThan95(x))", "score": 0}
{"id": "folio_train_1214", "prediction": "all x.((Student(x) & GetsAInEnglish(x)) -> ScoreInRangeOf90-95(x))", "score": -1}
{"id": "folio_train_1215", "prediction": "Zhang got A in English.", "score": -1}
{"id": "folio_train_1216", "prediction": "(BetterEnglishScore(Wang,Zhang) & BetterEnglishScore(Wang,Zhang))", "score": 0}
{"id": "folio_train_1217", "prediction": "(EnglishScore(Wu) & LowerThan(Wu,90))", "score": 0}
{"id": "folio_train_1218", "prediction": "(EnglishScore(Zhang,95))", "score": 0}
{"id": "folio_train_1219", "prediction": "Wang got A+ in English.", "score": -1}
{"id": "folio_train_1220", "prediction": "(-(Wu(Wu) & English(Wu)) -> (-(Wu(Wu) & English(Wu))))", "score": 0}
{"id": "folio_train_1221", "prediction": "Olivia doesn't prefersWarmTemperatureDuringDay(Olivia)", "score": -1}
{"id": "folio_train_1222", "prediction": "all x.((Olivia(x) & Sleeps(x)) -> PrefersCoolTemperature(x))", "score": 0}
{"id": "folio_train_1223", "prediction": "all x.(Olivia(x) -> SleepsDuringNight(x))", "score": 0}
{"id": "folio_train_1224", "prediction": "Olivia works during the day.", "score": -1}
{"id": "folio_train_1225", "prediction": "all x.(Olivia(x) -> (Works(x) | Sleeps(x)))", "score": 0}
{"id": "folio_train_1226", "prediction": "all x.(Time(x) -> (Day(x) | Night(x)))", "score": 0}
{"id": "folio_train_1227", "prediction": "(PrefersWarmTemperature(Olivia) | PrefersCoolTemperature(Olivia))", "score": 0}
{"id": "folio_train_1228", "prediction": "all x.((Olivia(x) & CoolTemperature(x)) -> Prefers(x,y))", "score": 0}
{"id": "folio_train_1229", "prediction": "all x y.((TaylorSwift(x) & NewYorkUniversity(y)) -> GivesCommitmentSpeech(x,y))", "score": 0}
{"id": "folio_train_1230", "prediction": "(LocatedIn(ColumbiaUniversity) & LocatedIn(NewYorkUniversity))", "score": 0}
{"id": "folio_train_1231", "prediction": "(ReceivedThreeGrammyAlbumOfYearAwards(TaylorSwift))", "score": 0}
{"id": "folio_train_1232", "prediction": "all x.(ColumbiaUniversity(x) -> IvyLionSchool(x))", "score": 0}
{"id": "folio_train_1233", "prediction": "all x y.((TaylorSwift(x) & Manhattan(y)) -> DeliversCommitmentSpeech(x,y))", "score": 0}
{"id": "folio_train_1234", "prediction": "all x.((Speaker(x) & Commencement(x) & NYU)) -> -HasAlbum(x))", "score": -1}
{"id": "folio_train_1235", "prediction": "all x.(Customer(x) -> (ChoosesPlanA(x) | ChoosesPlanB(x)))", "score": 0}
{"id": "folio_train_1236", "prediction": "all x.((PlanB(x) & ChoosePlanB(x)) -> RewardedWithGiftCard(x,30))", "score": 0}
{"id": "folio_train_1237", "prediction": "-exists x.(Customer(x) & -ChoosesPlan(x))", "score": 0}
{"id": "folio_train_1238", "prediction": "-exists x.(Customer(x) & Recognized(x,30) & GiftCard(x))", "score": 0}
{"id": "folio_train_1239", "prediction": "all x.(Customer(x) -> (OlderThan(x,80) | StudyingAtSchool(x)))", "score": 0}
{"id": "folio_train_1240", "prediction": "all x.((Customer(x) & -StudyingAtSchool(x)) -> James(x))", "score": 0}
{"id": "folio_train_1241", "prediction": "all x.((Customer(x) & -ChoosesPlans(x)) -> James(x))", "score": 0}
{"id": "folio_train_1242", "prediction": "all x.((Customer(x) & (ChoosesPlanA(x) | -ChoosesPlanA(x))) -> James(x))", "score": 0}
{"id": "folio_train_1243", "prediction": "all x.((Customer(x) & (ChoosesPlanA(x) | -ChoosesPlanB(x))) -> (Rewarded(x,30) | ChoosesPlanB(x,30)))", "score": 0}
{"id": "folio_train_1244", "prediction": "all x.(Delta(x) -> Horse(x))", "score": 0}
{"id": "folio_train_1245", "prediction": "exists x.(Horse(x) & Racehorse(x))", "score": 0}
{"id": "folio_train_1246", "prediction": "all x.((Horse(x) & FallsDuringRace(x)) -> Dies(x))", "score": 0}
{"id": "folio_train_1247", "prediction": "all x.((Delta-City(x) & Race(y)) -> FallsDuring(x,y))", "score": -1}
{"id": "folio_train_1248", "prediction": "all x.((Horse(x) & InRace(x)) -> Racehorse(x))", "score": 0}
{"id": "folio_train_1249", "prediction": "all x.(Delta(x) -> Dead(x))", "score": 0}
{"id": "folio_train_1250", "prediction": "all x.((Delta(x) & Racehorse(x)) -> DetroitCity(x))", "score": 0}
{"id": "folio_train_1251", "prediction": "Frederick Monhoff (Architect(Frederick) & Artist(Fredrick) & Illustrator(Fredrick))", "score": -1}
{"id": "folio_train_1252", "prediction": "Frederick Monhoff (American)", "score": -1}
{"id": "folio_train_1253", "prediction": "all x.(Artist(x) -> (GoodAtPainting(x) | GoodAtMusic(x)))", "score": 0}
{"id": "folio_train_1254", "prediction": "all x.(American(x) -> SpeaksEnglish(x))", "score": 0}
{"id": "folio_train_1255", "prediction": "all x.(FredrickMonhoff(x) -> GoodAtMusic(x))", "score": 0}
{"id": "folio_train_1256", "prediction": "-exists x.(Illustrator(x) & SpeaksEnglish(x))", "score": 0}
{"id": "folio_train_1257", "prediction": "Miroslav Fiedler (CzechMathematician)", "score": -1}
{"id": "folio_train_1258", "prediction": "Miroslav Fiedler is known for his contributions to linearalgebra and graphtheory.", "score": -1}
{"id": "folio_train_1259", "prediction": "all x.((MiroslavFiedler(x) & FiedlerEigenvalue(x)) -> Honored(x))", "score": 0}
{"id": "folio_train_1260", "prediction": "(SecondSmallestEigenvalueOfGraphLaplacian(Fiedler))", "score": 0}
{"id": "folio_train_1261", "prediction": "(HonoredBySecondSmallestEigenvalue(MiroslavFiedler) & LaplacianGraph(MiroslavFiedler))", "score": 0}
{"id": "folio_train_1262", "prediction": "Miroslav Fiedler (FrenchMathematician) & FoundedIn1914.", "score": -1}
{"id": "folio_train_1263", "prediction": "all x.(CzechMathematician(x) -> (KnownForLinearAlgebra(x) & KnownForGraphTheory(x)))", "score": 0}
{"id": "folio_train_1264", "prediction": "all x.(Laptop(x) -> Computer(x))", "score": 0}
{"id": "folio_train_1265", "prediction": "all x y.((Computer(x) & Computer(y)) -> PlayGames(x,y))", "score": 0}
{"id": "folio_train_1266", "prediction": "all x.(Phone(x) -> -Computer(x))", "score": 0}
{"id": "folio_train_1267", "prediction": "all x.(PlayGamesOnLaptop(x) -> PlayOnLaptop(x))", "score": 0}
{"id": "folio_train_1268", "prediction": "all x.((Phone(x) & -PlayGamesOn(x)) -> -PlayGamesOn(x))", "score": 0}
{"id": "folio_train_1269", "prediction": "(AmericanPoliticianAndLawyer(WalterSueder Brown) & PostmasterGeneral(WalterSueder Brown))", "score": -1}
{"id": "folio_train_1270", "prediction": "Walter Folger Brown graduated from Harvard University with BachelorsOfArts(Walter,1996).", "score": -1}
{"id": "folio_train_1271", "prediction": "((Toledo(WalterSuederBrown) & Father(WalterSuederBrown)) | (PracticedLawWith(WalterSuederBrown) & Father(WalterSuederBrown))))", "score": -1}
{"id": "folio_train_1272", "prediction": "KatherinHafer Married(KatherinHafer,WalterSueder Brown)", "score": -1}
{"id": "folio_train_1273", "prediction": "(BachelorsOfArts(WalterSueder Brown))", "score": -1}
{"id": "folio_train_1274", "prediction": "Walter Folger Brown's father was in Toledo.", "score": -1}
{"id": "folio_train_1275", "prediction": "Walter Folger Brown -InTolo(Walter,Tolo))", "score": -1}
{"id": "folio_train_1276", "prediction": "all x.((Product(x) & ShippedFromChina(x)) -> MadeInChina(x))", "score": 0}
{"id": "folio_train_1277", "prediction": "all x.((Product(x) & SoldInJD(x)) -> ShippedFromChina(x))", "score": 0}
{"id": "folio_train_1278", "prediction": "all x.((Product(x) & CommonlyUsedInChina(x)) -> SoldInJD(x))", "score": 0}
{"id": "folio_train_1279", "prediction": "all x.((Product(x) & FavoredByYoungPeople(x)) -> CommonlyUsedInChina(x))", "score": 0}
{"id": "folio_train_1280", "prediction": "(-MadeInChina(MacBook) & -CommonUseInChina(MacBook))", "score": 0}
{"id": "folio_train_1281", "prediction": "all x.(Macbook(x) -> FavoredByYoungPeople(x))", "score": 0}
{"id": "folio_train_1282", "prediction": "(MadeInChina(MacBook) & MadeInChina(MacBook))", "score": 0}
{"id": "folio_train_1283", "prediction": "all x.(Macbook(x) -> (FavoriteByYoungPeople(x) & CommonlyUsedInChina(x)))", "score": 0}
{"id": "folio_train_1284", "prediction": "all x.(Macbook(x) -> (FavoriteByYoungPeople(x) | CommonlyUsedInChina(x)))", "score": 0}
{"id": "folio_train_1285", "prediction": "all x.((Macbook(x) & FavoredByYoungPeople(x) & CommonlyUsedInChina(x)) -> -(FavouredByYoungPeople(x) | MadeInChina(x)))", "score": 0}
{"id": "folio_train_1286", "prediction": "all x.(OxfordCircle(x) -> (RoadJunction(x) & ConnectsOxfordStreet(x) & ConnectsRegentStreet(x)))", "score": 0}
{"id": "folio_train_1287", "prediction": "all x.(OxfordStreet(x) -> InLondon(x))", "score": 0}
{"id": "folio_train_1288", "prediction": "John Nash designed the construction on Regent Street.", "score": -1}
{"id": "folio_train_1289", "prediction": "John Nash designed OxfordCircle(JohnNash)", "score": -1}
{"id": "folio_train_1290", "prediction": "John Nash (Architect(John) & British(John))", "score": -1}
{"id": "folio_train_1291", "prediction": "all x.(OxfordCircle(x) -> (EntranceToOxfordCircle(x) & CentralLine(x) & InUpperLine(x,1901)))", "score": 0}
{"id": "folio_train_1292", "prediction": "all x.(OxfordCircle(x) -> InLondon(x))", "score": 0}
{"id": "folio_train_1293", "prediction": "all x.(OxfordCircle(x) -> DesignedByBritishArchitect(x))", "score": 0}
{"id": "folio_train_1294", "prediction": "John Nash designed CentralLine(JohnNash,1900)", "score": -1}
{"id": "folio_train_1295", "prediction": "Regent Street -InLondon(RegentStreet(RenownedStreet))", "score": -1}
{"id": "folio_train_1296", "prediction": "all x.(Animal(x) -> (Cat(x) | Dog(x)))", "score": 0}
{"id": "folio_train_1297", "prediction": "all x.(Dog(x) -> Barks(x))", "score": 0}
{"id": "folio_train_1298", "prediction": "all x.(Ghost(x) -> -exists(x))", "score": -1}
{"id": "folio_train_1299", "prediction": "all x.(Barks(x) -> -Alive(x))", "score": 0}
{"id": "folio_train_1300", "prediction": "all x.(Thing(x) -> (Alive(x) | Dead(x)))", "score": 0}
{"id": "folio_train_1301", "prediction": "(-Dead(Jojo))", "score": 0}
{"id": "folio_train_1302", "prediction": "all x.(Jojo(x) -> Ghost(x))", "score": 0}
{"id": "folio_train_1303", "prediction": "all x.(Jojo(x) -> (Cat(x) | Ghost(x)))", "score": 0}
{"id": "folio_train_1304", "prediction": "all x.((Cat(x) | Ghost(x)) -> (Barks(x) | Dog(x)))", "score": 0}
{"id": "folio_train_1305", "prediction": "all x.(Tiger(x) -> Cat(x))", "score": 1}
{"id": "folio_train_1306", "prediction": "-exists x.(Cat(x) & Dog(x))", "score": 1}
{"id": "folio_train_1307", "prediction": "all x.(BengalTiger(x) -> Tiger(x))", "score": 1}
{"id": "folio_train_1308", "prediction": "all x.((Husky(x) & Husky(x)) -> Dog(x))", "score": 0}
{"id": "folio_train_1309", "prediction": "all x.(Fido(x) -> (BengalTiger(x) | Cat(x)))", "score": 1}
{"id": "folio_train_1310", "prediction": "all x.(Husky(x) -> Fido(x))", "score": 0}
{"id": "folio_train_1311", "prediction": "(-Husky(Fido))", "score": 0}
{"id": "folio_train_1312", "prediction": "Fido is BengalTiger(x)", "score": -1}
{"id": "folio_train_1313", "prediction": "all x.(Fido(x) -> (-Dog(x) | Husky(x)))", "score": 1}
{"id": "folio_train_1314", "prediction": "all x.((City(x) & HoldsSummerOlympics(x) & USCity(x)) -> SummerOlympicsInUS(x))", "score": 0}
{"id": "folio_train_1315", "prediction": "all x.((City(x) & InState(x) & InUS(x)) -> USCity(x))", "score": 0}
{"id": "folio_train_1316", "prediction": "all x y.((City(x) & State(y) & SummerOlympics(x) & In(x,y)) -> SummerOlympicsIn(x,y))", "score": 0}
{"id": "folio_train_1317", "prediction": "(SchedulesToTakePlaceIn(2028) & Los Angeles(LA))", "score": -1}
{"id": "folio_train_1318", "prediction": "(City(LA) & InCalifornia(LA))", "score": 0}
{"id": "folio_train_1319", "prediction": "all x.(Atlanta(x) -> USCity(x))", "score": 0}
{"id": "folio_train_1320", "prediction": "(Gastown(Atlanta) & Georgia(CA))", "score": 0}
{"id": "folio_train_1321", "prediction": "all x.(CA(x) -> StateInUnitedStates(x))", "score": 0}
{"id": "folio_train_1322", "prediction": "all x.((Boxing(x) | ModernPentathlon(x) | Weightlifting(x)) -> RemovedFromSummerOlympics(x))", "score": 0}
{"id": "folio_train_1323", "prediction": "all x.((Atlanta(x) & UnitedStates(x)) -> SummerOlympics(x,1996))", "score": 0}
{"id": "folio_train_1324", "prediction": "all x.((SummerOlympics(x) & 2028(x)) -> TakesPlaceIn(x,US))", "score": 0}
{"id": "folio_train_1325", "prediction": "(SummerOlympics(1996) -InGeorgia(1996))", "score": -1}
{"id": "folio_train_1326", "prediction": "All x.(Skateboarding(x) -> AppearsAtSummerOlympics(x,2028))", "score": -1}
{"id": "folio_train_1327", "prediction": "all x.(TaigaVole(x) -> (LargeVole(x) & FoundInNorthwesternNorthAmerica(x)))", "score": 0}
{"id": "folio_train_1328", "prediction": "all x.(Cat(x) -> LikesPlayingWithVoles(x))", "score": 0}
{"id": "folio_train_1329", "prediction": "all x.(TaigaVole(x) -> LivesInBorealTaigaZone(x))", "score": 0}
{"id": "folio_train_1330", "prediction": "all x.(BorealTaigaZone(x) -> ColdPlaceToLiveIn(x))", "score": 0}
{"id": "folio_train_1331", "prediction": "all x.(TaigaVole(x) -> (LargerThanMostNorthAmericanVoles(x) & EspeciallyGenusMicrotus(x)))", "score": 0}
{"id": "folio_train_1332", "prediction": "all x.(Cat(x) -> LikesPlayingWithTaigaVole(x))", "score": 0}
{"id": "folio_train_1333", "prediction": "all x.(TaigaVole(x) -> -Cold(x))", "score": 0}
{"id": "folio_train_1334", "prediction": "all x.(Illness(x) -> (InWomen(x) | InMen(x)))", "score": 0}
{"id": "folio_train_1335", "prediction": "-exists x.(Men(x) & BreastCancer(x))", "score": 0}
{"id": "folio_train_1336", "prediction": "all x.((BreastCancer(x) | NonBreastCancer(x)) -> (BreastCancer(x) | NonBreastCancer(x)))", "score": 0}
{"id": "folio_train_1337", "prediction": "-exists x.(Cancer(x) & -HasTumor(x))", "score": 0}
{"id": "folio_train_1338", "prediction": "all x.((Cancer(x) & -Breast(x)) -> Cancer(x))", "score": 0}
{"id": "folio_train_1339", "prediction": "all x.((Adenocarcinoma(x) & (TypeOfCancer(x) | WithoutTumor(x))) -> (InWomen(x) | WithoutTumor(x)))", "score": 0}
{"id": "folio_train_1340", "prediction": "all x.(Adenocarcinoma(x) -> BreastCancer(x))", "score": 0}
{"id": "folio_train_1341", "prediction": "all x.(Adenocarcinoma(x) -> InWomen(x))", "score": 0}
{"id": "folio_train_1342", "prediction": "all x.((Adenocarcinoma(x) & (InWomen(x) | WithoutTumor(x))) -> (-Tumor(x) & NonBreastCancer(x)))", "score": 0}
{"id": "folio_train_1343", "prediction": "exists x.(Monitor(x) & EquippedInLab(x) & ProducedBy(x,AOC))", "score": 0}
{"id": "folio_train_1344", "prediction": "all x.((Monitor(x) & EquippedInLab(x)) -> CheaperThanOriginalPrice(x))", "score": 0}
{"id": "folio_train_1345", "prediction": "all x.((Monitor(x) & CheaperThanOriginalPrices(x)) -> Resolution(x,1080p))", "score": 0}
{"id": "folio_train_1346", "prediction": "all x.((Monitor(x) & Resolution(x,10)) -> -SupportsTypeCPort(x))", "score": 0}
{"id": "folio_train_1347", "prediction": "all x.(LG34(x) -> EquippedInLab(x))", "score": 0}
{"id": "folio_train_1348", "prediction": "all x.(LG34Machine(x) -> ProducedByAOC(x))", "score": 0}
{"id": "folio_train_1349", "prediction": "all x.(LG34(x) -> -SupportsTypeCPort(x))", "score": 0}
{"id": "folio_train_1350", "prediction": "all x.(LG34(x) -> -Resolution(x,1080))", "score": 0}
{"id": "folio_train_1351", "prediction": "all x.((Fruit(x) & SoldInBoston(x)) -> ShippedFromColumbia(x))", "score": 0}
{"id": "folio_train_1352", "prediction": "exists x.(Fruit(x) & SoldInNewHaven(x) & ShippedFromMexico(x))", "score": 0}
{"id": "folio_train_1353", "prediction": "all x.((Fruit(x) & ShippedFromColumbia(x)) -> -FruitSoldInNewYork(x))", "score": 0}
{"id": "folio_train_1354", "prediction": "all x.(Avocado(x) -> (Fruit(x) & (SoldInNewYork(x) | SoldInBoston(x))))", "score": 0}
{"id": "folio_train_1355", "prediction": "all x.(Avocado(x) -> (ShippedFromColumbia(x) & SoldInNew Haven(x)) | -ShippedFromColumbia(x) & SoldInNew Haven(x)))", "score": -1}
{"id": "folio_train_1356", "prediction": "all x.(Avocado(x) -> (Fruit(x) & SoldInNewYork(x)))", "score": 0}
{"id": "folio_train_1357", "prediction": "all x.(Avocado(x) -> (SoldInNewYork(x) | SoldInNewHanover(x)))", "score": 0}
{"id": "folio_train_1358", "prediction": "all x.(Avocado(x) -> (SoldInNew Haven(x) | SoldInBoston(x)))", "score": -1}
{"id": "folio_train_1359", "prediction": "all x.((Avocado(x) & -SoldInNewYork(x) & -ShippedFromColumbia(x)) -> -SoldInNewYork(x) & -SoldFromNewHaven(x))", "score": 0}
{"id": "folio_train_1360", "prediction": "exists x.(Monitor(x) & EquippedInLibrary(x) & ProducedByAOC(x))", "score": 0}
{"id": "folio_train_1361", "prediction": "all x.((Monitor(x) & EquippedInLibrary(x)) -> CheaperThan(x,800))", "score": 0}
{"id": "folio_train_1362", "prediction": "all x.((Monitor(x) & CheaperThan(x,800)) -> HasResolution(x,1080))", "score": 0}
{"id": "folio_train_1363", "prediction": "all x.((Monitor(x) & Resolution(x,10)) -> -SupportsTypeCPort(x))", "score": 0}
{"id": "folio_train_1364", "prediction": "all x.(A-2017(x) -> SupportsTypeCPort(x))", "score": -1}
{"id": "folio_train_1365", "prediction": "A-2017 is produced by AOC.", "score": -1}
{"id": "folio_train_1366", "prediction": "all x.(A-2017(x) -> (ProducedByAOC(x) & EquippedInLibrary(x)))", "score": -1}
{"id": "folio_train_1367", "prediction": "all x.((A-2017(x) & -Resolution(x,10)) | ProducedByAOC(x)) -> -EquivalentInLibrary(x))", "score": -1}
{"id": "folio_train_1368", "prediction": "SduvaMarijampol holdsLituanianSupercup(SduvaMarijampol)", "score": -1}
{"id": "folio_train_1369", "prediction": "SduvaMarijampol is a soccer team.", "score": -1}
{"id": "folio_train_1370", "prediction": "exists x.(SoccerTeam(x) & HoldsLituanianSupercup(x))", "score": 0}
{"id": "folio_train_1371", "prediction": "all x.(AinderbyQuernhow(x) -> (Dormant(x) & CivilParish(x) & HambletonDistrict(x)))", "score": 0}
{"id": "folio_train_1372", "prediction": "(NorthYorkshire(HambletonDistrict) & NorthYorkshire(HambletonDistrict))", "score": 0}
{"id": "folio_train_1373", "prediction": "all x.(NorthYorkshire(x) -> InEngland(x))", "score": 0}
{"id": "folio_train_1374", "prediction": "exists x.(Dorf(x) & InEngland(x))", "score": 0}
{"id": "folio_train_1375", "prediction": "-exists x.(CivilParish(x) & InEngland(x))", "score": 0}
{"id": "folio_train_1376", "prediction": "Douglas Adams is author who created book collection called SalmonOfDoubt(x))", "score": -1}
{"id": "folio_train_1377", "prediction": "The SalmonOfDoubt.com is aboutLifeExperiencesAndTechnology(Salmon)", "score": -1}
{"id": "folio_train_1378", "prediction": "all x.(Author(x) -> Writer(x))", "score": 0}
{"id": "folio_train_1379", "prediction": "all x y.((Writer(x) & Idea(y)) -> Creates(x,y))", "score": 0}
{"id": "folio_train_1380", "prediction": "exists x.(Book(x) & InnovativeIdeas(x) & AboutTechnology(x))", "score": 0}
{"id": "folio_train_1381", "prediction": "Douglas Adams is a Writer.", "score": -1}
{"id": "folio_train_1382", "prediction": "all x.(DouglasAdams(x) -> CreatedInnovativeIdeas(x))", "score": 0}
{"id": "folio_train_1383", "prediction": "The SalmonOfDoubt.com -InnovativeIdeas(Salmon)", "score": -1}
{"id": "folio_train_1384", "prediction": "-exists x.(DisposableProduct(x) & SlowsGlobalWarming(x))", "score": 0}
{"id": "folio_train_1385", "prediction": "all x.(EcoFriendlyBrand(x) -> SlowsGlobalWarming(x))", "score": 0}
{"id": "folio_train_1386", "prediction": "all x.((SustainableFashionBrand(x) & EcoFriendly(x)) -> SustainableFashionBrand(x))", "score": 0}
{"id": "folio_train_1387", "prediction": "all x.(FastFashionProduct(x) -> Disposable(x))", "score": 0}
{"id": "folio_train_1388", "prediction": "all x.((Reformation(x) & -SlowsGlobalWarming(x)) -> (EcoFriendlyBrand(x) | SustainableFashionBrand(x)))", "score": 0}
{"id": "folio_train_1389", "prediction": "Reformation is ecofriendly brand.", "score": -1}
{"id": "folio_train_1390", "prediction": "all x.(Reformation(x) -> ProducesFastFashionProducts(x))", "score": 0}
{"id": "folio_train_1391", "prediction": "all x.(Reformation(x) -> -ProducesFastFashionProducts(x))", "score": 0}
{"id": "folio_train_1392", "prediction": "all x.(Reformation(x) -> (-ProducesFastFashionProducts(x) | -ProducesDisposableProducts(x)))", "score": 0}
{"id": "folio_train_1393", "prediction": "all x.((Reformation(x) & ProducesDisposableProducts(x)) -> ProducesFastFashionProducts(x))", "score": 0}
{"id": "folio_train_1394", "prediction": "all x.((Reformation(x) & (ProducesFastFashionProducts(x) | SlowsGlobalWarming(x))) -> ProducesFastFashionProducts(x))", "score": 0}
{"id": "folio_train_1395", "prediction": "all x y.((RoyRichardson(x) & SintMaartener(y)) -> Cricketer(x,y))", "score": 0}
{"id": "folio_train_1396", "prediction": "Roy Richardson (RightHandledBatsman(Roy) & MediumPaceBowler(Roy))", "score": -1}
{"id": "folio_train_1397", "prediction": "all x.((RoyRichardson(x) & DebutedInCricket(x)) -> Old(x))", "score": 0}
{"id": "folio_train_1398", "prediction": "ShervilleHuggins dismissedRoy Richardson.", "score": -1}
{"id": "folio_train_1399", "prediction": "ShervilleHuggins has never dismissed anyone playing for a constituentCountry(ShervilleHuggins)", "score": -1}
{"id": "folio_train_1400", "prediction": "-exists x.(RightHandedMediumPaceBolter(x) & PlaysForSintMaartener(x))", "score": 0}
{"id": "folio_train_1401", "prediction": "all x.((GoogleJob(x) & (WorkExperience(x) | GoodEducation(x))) -> GetsJob(x))", "score": 0}
{"id": "folio_train_1402", "prediction": "all x.((Graduate(x) & Yale(x) & submittedResumeToGoogle(x)) -> GotJobs(x))", "score": 0}
{"id": "folio_train_1403", "prediction": "John has a lot of work experience.", "score": -1}
{"id": "folio_train_1404", "prediction": "all x.(John(x) -> (SubmittedResumeToGoogle(x) & GotJob(x)))", "score": 0}
{"id": "folio_train_1405", "prediction": "John is Yale graduate.", "score": -1}
{"id": "folio_train_1406", "prediction": "-exists x.(Student(x) & Doctor(x))", "score": 0}
{"id": "folio_train_1407", "prediction": "all x.(TakesClasses(x) -> Student(x))", "score": 0}
{"id": "folio_train_1408", "prediction": "all x.(GraduateStudent(x) -> TakesClasses(x))", "score": 0}
{"id": "folio_train_1409", "prediction": "all x.(PhDStudent(x) -> GraduateStudent(x))", "score": 0}
{"id": "folio_train_1410", "prediction": "all x.((GraduateStudent(x) | Doctor(x)) -> -(GraduateStudent(x) & Student(x)))", "score": 0}
{"id": "folio_train_1411", "prediction": "all x.(Joe(x) -> TakesClasses(x))", "score": 0}
{"id": "folio_train_1412", "prediction": "(PhD Student(Joe))", "score": -1}
{"id": "folio_train_1413", "prediction": "(-PhD Student(Joe))", "score": -1}
{"id": "folio_train_1414", "prediction": "Hugh Vanstone is one of the world's leadingLightingDesigners(HughVanstone)", "score": -1}
{"id": "folio_train_1415", "prediction": "Hugh Vanstone is from the UK.", "score": -1}
{"id": "folio_train_1416", "prediction": "Hugh Vanstone lit more than 160 productions.", "score": -1}
{"id": "folio_train_1417", "prediction": "Hugh Vanstone attended school where he is from.", "score": -1}
{"id": "folio_train_1418", "prediction": "Hugh Vanstone is one of the world's leading ligtingdesigners and from the uk.", "score": -1}
{"id": "folio_train_1419", "prediction": "Hugh Vanstone has lit 170 productions.", "score": -1}
{"id": "folio_train_1420", "prediction": "Hugh Vanstone attended school in the US.", "score": -1}
{"id": "folio_train_1421", "prediction": "-exists x.(Man(x) & RunsFaster(x,Bolt))", "score": 0}
{"id": "folio_train_1422", "prediction": "all x.(Superman(x) -> -Man(x))", "score": 0}
{"id": "folio_train_1423", "prediction": "all x y.((Superman(x) & Bolt(y)) -> RunsFaster(x,y))", "score": 0}
{"id": "folio_train_1424", "prediction": "Donald ErvinKnuth (AmericanComputerScientist(e) & Mathematician(e) & ProfessorEmeritus(e) & StanfordUniversity(e))", "score": -1}
{"id": "folio_train_1425", "prediction": "Knuth has been called the \"fatherOfAlgorithms(k)\"", "score": -1}
{"id": "folio_train_1426", "prediction": "all x.(AmericanScientist(x) -> FatherOfAlgorithms(x))", "score": 0}
{"id": "folio_train_1427", "prediction": "all x.(Mathematician(x) -> FatherOfAlgorithms(x))", "score": 0}
{"id": "folio_train_1428", "prediction": "Donald Knuth (*) is well-known figure in the field of ArtificialIntelligence (AI))", "score": -1}
{"id": "folio_train_1429", "prediction": "all x.(NeocrepidoderaCorpusulentas(x) -> (FleaBeetle(x) | Moth(x)))", "score": 0}
{"id": "folio_train_1430", "prediction": "all x.(NeocrepidoderaCorpusulenta(x) -> InChrysomelidaeFamily(x))", "score": 0}
{"id": "folio_train_1431", "prediction": "-exists x.(Moth(x) & WithinChrysomelidaeFamily(x))", "score": 0}
{"id": "folio_train_1432", "prediction": "exists x.(FlyBeetle(x) & WithinChrysomelidaeFamily(x))", "score": 0}
{"id": "folio_train_1433", "prediction": "-exists x.(FlyBeetle(x) & WithinChrysomelidaeFamily(x))", "score": 0}
{"id": "folio_train_1434", "prediction": "all x.(CarrolozzeriaColli(x) -> (MilaneseCoachbuilderCompany(x) & EstablishedByGiuseppeColli(x) & EstablishedIn1931(x)))", "score": 0}
{"id": "folio_train_1435", "prediction": "all x.(CarrolozzeriaColli(x) -> SpecializedInAluminum(x))", "score": 0}
{"id": "folio_train_1436", "prediction": "all x.((CarrolozzeriaColli(x) & FirstAutomobile(x)) -> RacingCar(x))", "score": 0}
{"id": "folio_train_1437", "prediction": "exists x.(RacingCar(x) & BuiltByCarrolozzeriaColli(x) & Fiat1100Mechanicals(x) & Chasis(x))", "score": 0}
{"id": "folio_train_1438", "prediction": "all x.(CarrolozzeriaColli(x) -> WorkedForAirforces(x))", "score": 0}
{"id": "folio_train_1439", "prediction": "all x.(CarroceriaColli(x) -> MadeCarBody(x))", "score": 0}
{"id": "folio_train_1440", "prediction": "all x.(CarroceriaColli(x) -> MadeCarBody(x,1931))", "score": 0}
{"id": "folio_train_1441", "prediction": "all x.(CarrolozzeriaColi(x) -> BuiltAirplanesDuringWorldWarII(x))", "score": 0}
{"id": "folio_train_1442", "prediction": "all x.((GiuseppeColli(x) & Company(x)) -> MadeCarBodies(x))", "score": 0}
{"id": "folio_train_1443", "prediction": "all x y.((Giuseppe Colli(x) & MilaneseCoachbuilderCompany(y)) -> SpecializedInAluminum(x,y))", "score": -1}
{"id": "folio_train_1444", "prediction": "all x.((Automobile(x) & CarrozzeriaColli(x)) -> (BuiltWithFiat1100Mechanicals(x) & BuiltWithChassis(x)))", "score": 0}
{"id": "folio_train_1445", "prediction": "all x.((Jack(x) & GoesToCinema(x)) -> WillGoToCinema(x))", "score": 0}
{"id": "folio_train_1446", "prediction": "all x.((Jack(x) & IronManOn(x) & -BadWeather(x)) -> WillGoToCinema(x))", "score": 0}
{"id": "folio_train_1447", "prediction": "exists x.(MarchDay(x) & BadWeather(x))", "score": 0}
{"id": "folio_train_1448", "prediction": "IronManOn.", "score": -1}
{"id": "folio_train_1449", "prediction": "It's March now.", "score": -1}
{"id": "folio_train_1450", "prediction": "all x.(John(x) -> GoesToCinema(x))", "score": 0}
{"id": "folio_train_1451", "prediction": "(GoodWeather(x) & Today(x))", "score": 0}
{"id": "folio_train_1452", "prediction": "all x.(Quicksilver(x) -> (SellsSportswear(x) & SellsClothing(x) & SellsFootwear(x) & SellsAccessories(x)))", "score": 0}
{"id": "folio_train_1453", "prediction": "all x.(Flannel(x) -> Clothing(x))", "score": 0}
{"id": "folio_train_1454", "prediction": "all x.(Owns(x,y) -> (Item(y) & FronQuicksilver(y)))", "score": 0}
{"id": "folio_train_1455", "prediction": "all x.(Quicksilver(x) -> SellsBeer(x))", "score": 0}
{"id": "folio_train_1456", "prediction": "all x.(OwnsFlannel(x) -> JoeOwnsFlannel(x))", "score": 0}
{"id": "folio_train_1457", "prediction": "all x.(Owns(x,y) -> (Sportswear(y) | Clothing(y) | Footwear(y) | Accessory(y)))", "score": 0}
{"id": "folio_train_1458", "prediction": "-exists x.(VideoGame(x) & ReleasedByNintendo(x) & SupportsPS4(x))", "score": 0}
{"id": "folio_train_1459", "prediction": "all x.((VideoGame(x) & PokemonSeries(x)) -> ReleasedByNintendo(x))", "score": 0}
{"id": "folio_train_1460", "prediction": "all x.((VideoGame(x) & FIFASeries(x)) -> SupportsPS4Platform(x))", "score": 0}
{"id": "folio_train_1461", "prediction": "all x.((VideoGame(x) & SupportsSimulation(x) & OnlineSoccerGame(x)) -> FIFASeries(x))", "score": 0}
{"id": "folio_train_1462", "prediction": "all x.((VideoGame(x) & BeLionel(x)) -> (InPokemonSeries(x) | SupportsSimulation(x)))", "score": 0}
{"id": "folio_train_1463", "prediction": "(Pokemon(BeLionel) & InPokemonSeries(BeLionel))", "score": 0}
{"id": "folio_train_1464", "prediction": "(-InFueltballSeries(BeLionel) & -SupportsPS4(BeLionel))", "score": 0}
{"id": "folio_train_1465", "prediction": "all x.((VideoGame(x) & BeLionel(x)) -> (InFifaSeries(x) | SupportsPS4Platform(x)))", "score": 0}
{"id": "folio_train_1466", "prediction": "(VideoGame(BeLionel) & -(FastFame(FastFameSeries) | PokemonSeries(FastFamily))))", "score": -1}
{"id": "folio_train_1467", "prediction": "all x.((PaymentCard(x) & IssuedByRussicBanks(x)) -> CanBeUsedWithApplePay(x))", "score": 0}
{"id": "folio_train_1468", "prediction": "all x.(MIRPaymentCard(x) -> IssuedByRussianBanks(x))", "score": 0}
{"id": "folio_train_1469", "prediction": "exists x.(InternationalPaymentCard(x) & CanBeUsedWithApplePay(x))", "score": 0}
{"id": "folio_train_1470", "prediction": "all x.((SocialPayment(x) & InRussia(x)) -> TransferableToMIRPaymentCards(x))", "score": 0}
{"id": "folio_train_1471", "prediction": "all x.(BankOfAmericaPaymentCard(x) -> CanBeUsedWithApplePay(x))", "score": 0}
{"id": "folio_train_1472", "prediction": "all x.(BankOfAmericaPaymentCard(x) -> International(x))", "score": 0}
{"id": "folio_train_1473", "prediction": "all x.(BankOfAmericaPaymentCard(x) -> (International(x) & TransfersSocialPayments(x) & InRussia(x)))", "score": 0}
{"id": "folio_train_1474", "prediction": "all x.((BankOfAmericaPaymentCards(x) & International(x) & IssuedByRussianBanks(x)) -> -TransferSocialPaymentsInRussia(x))", "score": 0}
{"id": "folio_train_1475", "prediction": "all x.(LuminaAPV(x) -> ProducedBy Chevrolet(x))", "score": -1}
{"id": "folio_train_1476", "prediction": "all x.(Astro(x) -> (Van(x) & ProducedBy(x, Chevrolet)))", "score": 1}
{"id": "folio_train_1477", "prediction": "all x.(Car(x) -> (ProducedByChevrolet(x) | ProducedByChevrolet(x)))", "score": 0}
{"id": "folio_train_1478", "prediction": "all x.(LuminaAPV(x) -> Van(x))", "score": 0}
{"id": "folio_train_1479", "prediction": "all x.(LuminaAPV(x) -> (Car(x) | Van(x)))", "score": 0}
{"id": "folio_train_1480", "prediction": "all x.(Astro(x) -> Van(x))", "score": 1}
{"id": "folio_train_1481", "prediction": "all x.(Astro(x) -> Car(x))", "score": 0}
{"id": "folio_train_1482", "prediction": "all x.(WorksInPerson(x) -> Commuter(x))", "score": 0}
{"id": "folio_train_1483", "prediction": "all x.(Person(x) -> (WorksInPerson(x) | WorksFromHome(x)))", "score": 0}
{"id": "folio_train_1484", "prediction": "all x.(WorksFromHome(x) -> RelaxedSchedule(x))", "score": 0}
{"id": "folio_train_1485", "prediction": "all x.(George(x) -> (Commuter(x) | HomeOfficeSetup(x)))", "score": 0}
{"id": "folio_train_1486", "prediction": "all x.((Person(x) & WorksFromHome(x)) | HomeOfficeSetup(x)) -> -(WorksFromHome(x) & Commuter(x)))", "score": -1}
{"id": "folio_train_1487", "prediction": "all x.(George(x) -> WorksFromHome(x))", "score": 0}
{"id": "folio_train_1488", "prediction": "all x.((Person(x) & -WorksFromHome(x) & WorksInPerson(x)) -> (-Commuter(x) & -RelaxedSchedule(x)))", "score": 0}
{"id": "folio_train_1489", "prediction": "all x.((Person(x) & (HomeOfficeSetup(x) | PersonWorksInPerson(x))) | (-HomeOfficeSetup(x) & PersonWorksInPerson(x))))", "score": -1}
{"id": "folio_train_1490", "prediction": "Jason Kramer (AmericanMusicSupervisor(x))", "score": -1}
{"id": "folio_train_1491", "prediction": "exists x.(AmericanRadioPerson(x) & MusicSupervisor(x))", "score": 0}
{"id": "folio_train_1492", "prediction": "all x.((HostsShow(x) & PublicRadioStation(x)) -> RadioPerson(x))", "score": 0}
{"id": "folio_train_1493", "prediction": "all x.(Rogan(x) -> RadioPerson(x))", "score": 0}
{"id": "folio_train_1494", "prediction": "all x y.((JasonKarmer(x) & PublicRadioStation(y)) -> HostedShow(x,y))", "score": 0}
{"id": "folio_train_1495", "prediction": "(American(JoeRogan) & American(JoeRogan))", "score": 0}
{"id": "folio_train_1496", "prediction": "Jason Kramer is MusicSupervisor(JasonKramer)", "score": -1}
{"id": "folio_train_1497", "prediction": "all x.(RadioPerson(x) -> JasonKarmer(x))", "score": 0}
{"id": "folio_train_1498", "prediction": "-exists x.(Coffee(x) & SoldInWalmart(x) & ProducedInFrance(x))", "score": 0}
{"id": "folio_train_1499", "prediction": "all x.((Coffee(x) & SuppliedByCompany(x)) -> SoldInWalmart(x))", "score": 0}
{"id": "folio_train_1500", "prediction": "all x.(Coffee(x) -> ProducedInColumbia(x))", "score": 0}
{"id": "folio_train_1501", "prediction": "all x.((Coffee(x) & FavoredByLocalResidents(x)) -> ProducedInColumbia(x))", "score": 0}
{"id": "folio_train_1502", "prediction": "all x.((Coffee(x) & HighPrices(x)) -> FavoredByLocalResidents(x))", "score": 0}
{"id": "folio_train_1503", "prediction": "all x.(CivetCoffee(x) -> (-ProducedInColumbia(x) & Cheap(x)))", "score": 0}
{"id": "folio_train_1504", "prediction": "all x.(JamaicaBlue(x) -> (SoldInWalmart(x) | FavoredByLocalResidents(x)))", "score": 0}
{"id": "folio_train_1505", "prediction": "all x.(CivetCoffee(x) -> ProducedInFrance(x))", "score": 0}
{"id": "folio_train_1506", "prediction": "CivetCoffee(c) & -ProducedInFrance(c))", "score": -1}
{"id": "folio_train_1507", "prediction": "all x.(JamaicaBlue(x) -> (Expensive(x) & SupplyedByCompany(x)))", "score": 0}
{"id": "folio_train_1508", "prediction": "all x.(JamaicaBlue(x) -> (-Expensive(x) & -SuppliedByCompany(x)))", "score": 0}
{"id": "folio_train_1509", "prediction": "exists x.(Place(x) & Galicia(x))", "score": 0}
{"id": "folio_train_1510", "prediction": "all x.(Spanish(x) -> InEurope(x))", "score": 0}
{"id": "folio_train_1511", "prediction": "all x.(Poland(x) -> InEurope(x))", "score": 0}
{"id": "folio_train_1512", "prediction": "Rochelle lives in Europe.", "score": -1}
{"id": "folio_train_1513", "prediction": "-exists x.(Dominique(x) & LivesIn(x,Europe))", "score": 0}
{"id": "folio_train_1514", "prediction": "AlfonsoLisesInGalicia(alfonso,galicia)", "score": 0}
{"id": "folio_train_1515", "prediction": "Rochelle lives in Galicia.", "score": -1}
{"id": "folio_train_1516", "prediction": "-exists x.(Dominique(x) & LivesIn(x,Spanish))", "score": 0}
{"id": "folio_train_1517", "prediction": "AlfonsoLisesInEurope(alfonso,europe)", "score": 0}
{"id": "folio_train_1518", "prediction": "Ralph Hammerthaler was born in Wasserburg am Inn.", "score": -1}
{"id": "folio_train_1519", "prediction": "(InGermany(WaterburgAmInn) & InGermany(WaterburgAmInn))", "score": 0}
{"id": "folio_train_1520", "prediction": "all x.(Germany(x) -> InEurope(x))", "score": 0}
{"id": "folio_train_1521", "prediction": "RalphHammerthaler (GermanWriter)", "score": 0}
{"id": "folio_train_1522", "prediction": "Ralph Hammerthaler was born in 1965.", "score": -1}
{"id": "folio_train_1523", "prediction": "RalphHammerthaler is a writer born in Asia.", "score": -1}
{"id": "folio_train_1524", "prediction": "RalphHammerthalerLisesInGermany(RossHammerthaler)", "score": 0}
{"id": "folio_train_1525", "prediction": "all x.((Book(x) & WrittenByTomas(x)) -> SoldMoreThan(x,million))", "score": 0}
{"id": "folio_train_1526", "prediction": "exists x.(Book(x) & WonHugoAward(x) & WrittenByTomas(x))", "score": 0}
{"id": "folio_train_1527", "prediction": "all x.(Book(x) -> InspiredBySaxon(x))", "score": 0}
{"id": "folio_train_1528", "prediction": "all x.((Book(x) & (InspiredFromSaxon(x,Saxon) | SoldMoreThan(x,MillionCopies))) -> 2001(x))", "score": 0}
{"id": "folio_train_1529", "prediction": "all x.((Book(x) & SoldMoreThan(x,1)) | WrittenByTomas(x))", "score": 0}
{"id": "folio_train_1530", "prediction": "all x.((Book(x) & WonHugoAward(x)) -> 2001(x))", "score": 0}
{"id": "folio_train_1531", "prediction": "all x.((Book(x) & WonHugoAward(x) & AboutFuture(x)) -> 2001(x))", "score": 0}
{"id": "folio_train_1532", "prediction": "all x.((2001(x) & (WonHugoAward(x) & AboutFuture(x) | -WonHugoAward(x) & -WrittenByTomas(x))) -> (-WonHugoAward(x) & -WrittenByTomas(x)))", "score": 0}
{"id": "folio_train_1533", "prediction": "-exists x.(Grass(x) & Food(x))", "score": 0}
{"id": "folio_train_1534", "prediction": "all x.(Meadow(x) -> Grass(x))", "score": 0}
{"id": "folio_train_1535", "prediction": "all x.(EdibleThing(x) -> Food(x))", "score": 0}
{"id": "folio_train_1536", "prediction": "all x.(Fruit(x) -> Edible(x))", "score": 0}
{"id": "folio_train_1537", "prediction": "all x.(Lemon(x) -> Fruit(x))", "score": 0}
{"id": "folio_train_1538", "prediction": "all x.((Grape(x) & -Edible(x)) -> Lemon(x))", "score": 0}
{"id": "folio_train_1539", "prediction": "all x.(Banana(x) -> (Grass(x) | Fruit(x)))", "score": 0}
{"id": "folio_train_1540", "prediction": "all x.(Grape(x) -> Food(x))", "score": 0}
{"id": "folio_train_1541", "prediction": "all x.(Grape(x) -> -Food(x))", "score": 0}
{"id": "folio_train_1542", "prediction": "all x.(Banana(x) -> (Lemon(x) & Meadow(x)))", "score": 0}
{"id": "folio_train_1543", "prediction": "all x.(Banana(x) -> -(Lemon(x) & Meadow(x)))", "score": 0}
{"id": "folio_train_1544", "prediction": "all x.(GoldenStateWarriors(x) -> TeamFromSanFrancisco(x))", "score": 0}
{"id": "folio_train_1545", "prediction": "(WinsNBAFinals(GoldenStateWarriors))", "score": 0}
{"id": "folio_train_1546", "prediction": "all x.((Team(x) & AttendsNBAFinals(x)) -> MoreThanThreeYearsOfHistory(x))", "score": 0}
{"id": "folio_train_1547", "prediction": "all x.(BostonCelebrities(x) -> (LoseNBAFinals(x)))", "score": 0}
{"id": "folio_train_1548", "prediction": "all x.((Team(x) & WinsNBAFinals(x)) -> MoreIncome(x))", "score": 0}
{"id": "folio_train_1549", "prediction": "all x.((Team(x) & WinsOrLosesAtNBAFinals(x)) -> AttendingFinals(x))", "score": 0}
{"id": "folio_train_1550", "prediction": "All x.(BostonCrickets(x) -> SanFrancisco(x))", "score": -1}
{"id": "folio_train_1551", "prediction": "all x.(BostonCrickets(x) -> HasMoreThan30YearsOfHistory(x))", "score": 0}
{"id": "folio_train_1552", "prediction": "all x.(GoldenStateWarrior(x) -> MoreIncomeForGateReceipts(x))", "score": 0}
{"id": "folio_train_1553", "prediction": "all x.((Maya(x) & -InjuresFingers(x)) -> WillPlayViolin(x))", "score": 0}
{"id": "folio_train_1554", "prediction": "all x.(VolleyballPlayer(x) -> (InjuresAnkle(x) | InjuresFingers(x) | InjuresShoulder(x)))", "score": 0}
{"id": "folio_train_1555", "prediction": "all x.(Maya(x) -> VolleyballPlayer(x))", "score": 0}
{"id": "folio_train_1556", "prediction": "all x.(Maya(x) -> -PlaysViolin(x))", "score": 0}
{"id": "folio_train_1557", "prediction": "all x.((Device(x) & CompanyLogo(x)) -> BelongsTo(x,Company))", "score": 0}
{"id": "folio_train_1558", "prediction": "all x.(Device(x) -> ((CompanyLogo(x) | Employees(x))))", "score": 0}
{"id": "folio_train_1559", "prediction": "all x.((Device(x) & Employee(x)) -> AvailableToConnectToWifi(x))", "score": 0}
{"id": "folio_train_1560", "prediction": "all x.((Device(x) & ConnectedToGoogleHome(x)) -> ControlledByManager(x))", "score": 0}
{"id": "folio_train_1561", "prediction": "all x.((Device(x) & EasyToOperate(x)) -> ProducedAfter2020(x))", "score": 0}
{"id": "folio_train_1562", "prediction": "all x.(IPod1(x) -> ProducedBefore2020(x))", "score": 0}
{"id": "folio_train_1563", "prediction": "all x.(IPod1(x) -> ControlledByManagers(x))", "score": 0}
{"id": "folio_train_1564", "prediction": "all x.(IPod1(x) -> (ProducedAfter2020(x) | ControlledByManagers(x)))", "score": 0}
{"id": "folio_train_1565", "prediction": "(-(IPod1 & CompanyLogo(i)) & ManagersDoNotControlIPod1))", "score": -1}
{"id": "folio_train_1566", "prediction": "all x.(IPod1(x) -> (WithCompanyLogo(x) | ControlledByManagers(x)))", "score": 0}
{"id": "folio_train_1567", "prediction": "all x.(CDPlayer(x) -> DelicateMechanism(x))", "score": 1}
{"id": "folio_train_1568", "prediction": "-exists x.(DelicateMechanism(x) & SuitableToy(x))", "score": 1}
{"id": "folio_train_1569", "prediction": "exists x.(CDPlayer(x) & SuitableToy(x))", "score": 1}
{"id": "folio_train_1570", "prediction": "all x.(Mammal(x) -> LivingBeing(x))", "score": 1}
{"id": "folio_train_1571", "prediction": "all x.(Elephant(x) -> Mammal(x))", "score": 1}
{"id": "folio_train_1572", "prediction": "all x.(BabyElephant(x) -> Elephant(x))", "score": 2}
{"id": "folio_train_1573", "prediction": "exists x.(BabyElephant(x) & Sleepy(x))", "score": 0}
{"id": "folio_train_1574", "prediction": "all x.((LivingBeing(x) & Jumbo(x)) -> (-Elephant(x) | -Mammal(x)))", "score": 1}
{"id": "folio_train_1575", "prediction": "all x.((Jumbo(x) & Sleepy(x)) -> (BabyElephant(x) | Elephant(x)))", "score": 2}
{"id": "folio_train_1576", "prediction": "all x.(Jumbo(x) -> Sleepy(x))", "score": 0}
{"id": "folio_train_1577", "prediction": "-Sleepy(Jumbo)", "score": 0}
{"id": "folio_train_1578", "prediction": "all x.(Jumbo(x) -> LivingBeing(x))", "score": 0}
{"id": "folio_train_1579", "prediction": "all x.(Jumbo(x) -> (-Sleepy(x) & -BabyElephant(x)))", "score": 1}
{"id": "folio_train_1580", "prediction": "all x.(Jumbo(x) -> (-Sleepy(x) | Elephant(x)))", "score": 1}
{"id": "folio_train_1581", "prediction": "-exists x.(Faculty(x) & DoesHomework(x))", "score": 0}
{"id": "folio_train_1582", "prediction": "all x.(Student(x) -> DoHomework(x))", "score": 0}
{"id": "folio_train_1583", "prediction": "all x.(Kid(x) -> Student(x))", "score": 0}
{"id": "folio_train_1584", "prediction": "all x.(WorksAtSchool(x) -> Faculty(x))", "score": 0}
{"id": "folio_train_1585", "prediction": "all x.((Jill(x) & (WorksAtSchool(x) | Teacher(x))) -> WorksAtSchool(x))", "score": 0}
{"id": "folio_train_1586", "prediction": "all x y.((Jill(x) & School(y)) -> WorksAt(x,y))", "score": 0}
{"id": "folio_train_1587", "prediction": "Jill is a kid.", "score": -1}
{"id": "folio_train_1588", "prediction": "Jill is notKid(Jill)", "score": -1}
{"id": "folio_train_1589", "prediction": "(exists x.(Max(x) & ListensToClassicalMusic(x)) | exists y.(Max(y) & ListensToRap(y))))", "score": -1}
{"id": "folio_train_1590", "prediction": "all x.((Song(x) & ListensTo(x) & ClassicalMusic(x)) -> From12thCentury(x))", "score": 0}
{"id": "folio_train_1591", "prediction": "all x.((Song(x) & ListensTo(x,Rap)) -> KanyeWest(x))", "score": 0}
{"id": "folio_train_1592", "prediction": "all x.((Song(x) & KanyeWest(x)) -> FullOfLyrics(x))", "score": 0}
{"id": "folio_train_1593", "prediction": "all x.((Song(x) & FullOfLyrics(x)) -> NeedsWrittenWithWords(x))", "score": 0}
{"id": "folio_train_1594", "prediction": "all x.((AsItWorth(x) & HarryStyles(x)) -> (ClassicalMusic(x) & (MaxListensTo(x) | 12thCentury(x))) | (ClassicalMusic(x) & MaxListensTo(x))))", "score": -1}
{"id": "folio_train_1595", "prediction": "all x.((HarryStyles(x) & “AsItWas(x)) -> NeedsWrittenWithWords(x))", "score": 0}
{"id": "folio_train_1596", "prediction": "\"AsItWas\" by HarryStyles is a song from the 12thCentury.", "score": -1}
{"id": "folio_train_1597", "prediction": "\"AsItWas\" by HarryStyles is not KanyeWestSong(x) & NeedsWrittenWithWords(x))", "score": -1}
{"id": "folio_train_1598", "prediction": "\"Your Woman\" is a song by BritishOneManBandWhiteTown.", "score": -1}
{"id": "folio_train_1599", "prediction": "\"Your Woman\" song peaked at No.1 on UKSinglesChart(x))", "score": -1}
{"id": "folio_train_1600", "prediction": "all x.((Song(x) & PeakedAtNo.1AtCentainPlace(x)) -> ExtremelyPopular(x))", "score": -1}
{"id": "folio_train_1601", "prediction": "(PeakedNo.1InIsland(YourWoman) & PeakedNo.1InIsrael(YourWoman) & PeakedNo.1InSpain(YourWoman))", "score": -1}
{"id": "folio_train_1602", "prediction": "\"Your Woman\" - ExtremelyPopular(x))", "score": -1}
{"id": "folio_train_1603", "prediction": "WhiteTown.com -exists x.(PopularSong(x) & Produces(x,y)))", "score": -1}
{"id": "folio_train_1604", "prediction": "all x.(WhiteTown(x) -> SuccessfulBand(x))", "score": 0}
{"id": "folio_train_1605", "prediction": "all x.((Person(x) & LempsOfOften(x) & LempsRegularly(x)) -> LongTermMedicalIssues(x))", "score": 0}
{"id": "folio_train_1606", "prediction": "all x.((Person(x) & LongTermMedicalIssues(x) & HasUnderlyingCauses(x)) -> -Spry(x) & Energetic(x))", "score": 0}
{"id": "folio_train_1607", "prediction": "all x.((Person(x) & (StaysIndoors(x) | RestsAtHome(x))) -> (Tense(x) & DisinterestedInActivities(x)))", "score": 0}
{"id": "folio_train_1608", "prediction": "all x.((StaysIndoors(x) & RestsAtHome(x)) -> -VisitsGym(x))", "score": 0}
{"id": "folio_train_1609", "prediction": "all x.((Mark(x) & (LimbsOther(x) | Spry(x) | Energetic(x))) -> (LimbsOther(x) | Tired(x) & DisinterestedInActivities(x)))", "score": 0}
{"id": "folio_train_1610", "prediction": "all x.(Mark(x) -> (LimbsOften(x) & LimbsRegularly(x)))", "score": 0}
{"id": "folio_train_1611", "prediction": "all x.((Mark(x) & VisitsGym(x)) -> AtLeastOneDay(x))", "score": 0}
{"id": "folio_train_1612", "prediction": "all x.(Mark(x) -> (StaysIndoors(x) & (RetainsAtHome(x) | VisitsGym(x))))", "score": 0}
{"id": "folio_train_1613", "prediction": "all x y.((SoccerTeam(x) & SoccerTeam(y) & ScoresSameGoals(x,y) & RegularTime(x)) -> NeedsPlayForExtraTime(x))", "score": 0}
{"id": "folio_train_1614", "prediction": "all x y.((SoccerTeam(x) & SoccerTeam(y) & ScoresSameNumberOfGoals(x,y) & UCLFinal(y) & RegularTime(y) & ExtraTime(y)) -> NeedsPenaltyShootOut(x))", "score": 0}
{"id": "folio_train_1615", "prediction": "(ScoredOneGoal(RealMadrid) & ScoredOneGoal(AtléticoMadrid))", "score": 0}
{"id": "folio_train_1616", "prediction": "(ZeroGoals(RealMadrid) & ZeroGoals(AtléticoMadrid))", "score": 0}
{"id": "folio_train_1617", "prediction": "all x y.((RealMadrid(x) & AtléticoMadrid(y)) -> NeededPenaltyShootOut(x,y))", "score": 0}
{"id": "folio_train_1618", "prediction": "all x.((RealMadrid(x) & AtléticoMadrid(x)) -> -PlayPenaltyShootOut(x,2016))", "score": 0}
{"id": "folio_train_1619", "prediction": "System7 is a UK-based electronic dance music band.", "score": -1}
{"id": "folio_train_1620", "prediction": "(FormedBySteveHillageAndMiquetteGiraudy(SteveHillage) & FormedSystem7(SteveHillage))", "score": 0}
{"id": "folio_train_1621", "prediction": "(Ex-Member(SteveHillage) & FormerMember(MiquetteGiraudy))", "score": -1}
{"id": "folio_train_1622", "prediction": "all x.(ElectricDanceMusicBand(x) -> Band(x))", "score": 0}
{"id": "folio_train_1623", "prediction": "System7 has released several club singles.", "score": -1}
{"id": "folio_train_1624", "prediction": "all x.(ClubSingle(x) -> -Single(x))", "score": 0}
{"id": "folio_train_1625", "prediction": "System7 was formed by formerGongMembers(System7))", "score": -1}
{"id": "folio_train_1626", "prediction": "System7 has released several singles.", "score": -1}
{"id": "folio_train_1627", "prediction": "System7 is notBand(System7))", "score": -1}
{"id": "folio_train_1628", "prediction": "all x.((SummarizationModel(x) & UsesInputContent(x)) -> Faithful(x))", "score": 0}
{"id": "folio_train_1629", "prediction": "all x.(ExtractiveModel(x) -> SummarizationModel(x))", "score": 0}
{"id": "folio_train_1630", "prediction": "all x.(ExtractiveModel(x) -> CanUseContentFromInputDocuments(x))", "score": 0}
{"id": "folio_train_1631", "prediction": "all x.(ExtractiveModel(x) -> AlwaysTrue(x))", "score": 0}
{"id": "folio_train_1632", "prediction": "all x.(ExtractiveModel(x) -> -Firthy(x))", "score": 0}
{"id": "folio_train_1633", "prediction": "all x.(PracticesCodingQuestions(x) -> -StudyingToMedicalSchoolToBecomeDoctor(x))", "score": 0}
{"id": "folio_train_1634", "prediction": "all x.((Person(x) & WantsSoftwareEngineering(x)) -> PracticesCodecingQuestions(x))", "score": 0}
{"id": "folio_train_1635", "prediction": "all x.((EnjoysHealthcareFields(x) & WantsToHelpWithMedicalIssues(x)) -> StudiesToBecomeDoctor(x))", "score": 0}
{"id": "folio_train_1636", "prediction": "all x.((Person(x) & GrownUpWithParents(x) & WorkedAsDoctors(x)) -> (EnjoysHealthcareFields(x) & WantsToHelpWithMedicalIssues(x)))", "score": 0}
{"id": "folio_train_1637", "prediction": "all x.(StudiesHard(x) -> (GrowsUpWithParents(x) & WorkedAsDoctors(x)))", "score": 0}
{"id": "folio_train_1638", "prediction": "all x.((Robin(x) & -(EnjoysHealthcareFields(x) & WantsToHelpPeopleWithMedicalIssues(x) | GrownUpWithDoctors(x))) -> (StudiesHard(x) | GrownUpWithDoctors(x)))", "score": 0}
{"id": "folio_train_1639", "prediction": "all x.(Robin(x) -> StudiesHard(x))", "score": 0}
{"id": "folio_train_1640", "prediction": "all x.(Robin(x) -> (PracticesCodingQuestions(x) & WantsToWorkInSoftwareEngineering(x)))", "score": 0}
{"id": "folio_train_1641", "prediction": "all x.(Robin(x) -> (-PracticesCodingQuestions(x) & -WorksInSoftwareEngineering(x)))", "score": 0}
{"id": "folio_train_1642", "prediction": "all x.((Person(x) & GoesToSpa(x) & AtLeastOnceAWeek(x)) -> -Miserly(x) & NeedsToSaveLargeParticipation(x))", "score": 0}
{"id": "folio_train_1643", "prediction": "all x.((Person(x) & (Miserly(x) & NeedsSavingLargeParticipation(x)) | Frivolous(x))) -> SpendsLotOfMoney(x))", "score": -1}
{"id": "folio_train_1644", "prediction": "all x.((FruitlySpreadsLossOfMoney(x) & GoesOut(x)) -> ValuesQualityManufacturingAndLuxuryItems(x))", "score": 0}
{"id": "folio_train_1645", "prediction": "all x.(ValuesQualityManufacturingAndLuxuryItems(x) -> EnjoysShoppingForMaterialisticItems(x))", "score": 0}
{"id": "folio_train_1646", "prediction": "all x.((Jess(x) & -Miserly(x) & NeedsToSaveLargePartOfIncome(x)) -> -ValuesQualityManufacturingAndLuxuryItems(x))", "score": 0}
{"id": "folio_train_1647", "prediction": "all x.((Jess(x) & ValuesQualityManufacturingAndLuxuryItems(x)) | (-ValuesQualityManufacturingAndLuxuryItems(x)))) -> (Miserly(x) & NeedsToSaveLargePartOfIncome(x)))", "score": -1}
{"id": "folio_train_1648", "prediction": "all x.((Jess(x) & GoOut(x)) -> SpendsLotOfMoney(x))", "score": 0}
{"id": "folio_train_1649", "prediction": "all x.((Jess(x) & (EnjoysShoppingInFreeTime(x) | -EnjoysShoppingInFreeTime(x))) -> GoesToSpa(x))", "score": 0}
{"id": "folio_train_1650", "prediction": "all x.((Jess(x) & (EnjoysShoppingMaterialisticItems(x) | -EnjoysShoppingMaterialisticItems(x))) -> (-ValuesQualityManufacturing(x) & -ValuesLuxuryItems(x)))", "score": 0}
{"id": "folio_train_1651", "prediction": "all x.(IndiePopBand(x) -> Phoenix(x))", "score": 0}
{"id": "folio_train_1652", "prediction": "\"WolfgangAmadeusPheonix\" album sold over 500,000 copies.", "score": -1}
{"id": "folio_train_1653", "prediction": "all x.((GoldAlbum(x) | CertifiedGoldSingle(x)) -> SoldOverHalfMillionCopies(x))", "score": 0}
{"id": "folio_train_1654", "prediction": "\"1901\" is a single from Phoenix's album \"WolfgangAmadeusPhoenix\"\"", "score": -1}
{"id": "folio_train_1655", "prediction": "\"1901\" - sold for over 400000 copies.", "score": -1}
{"id": "folio_train_1656", "prediction": "all x.((Album(x) & WolfgangAmadeusPhoenix(x)) -> CertifiedGoldAlbum(x))", "score": 0}
{"id": "folio_train_1657", "prediction": "all x.((Single(x) & \"1901\" & CertifiedGoldSingle(x)) -> Single(x))", "score": 0}
{"id": "folio_train_1658", "prediction": "all x.(PeterParker(x) -> (Superhero(x) | Civilian(x)))", "score": 0}
{"id": "folio_train_1659", "prediction": "all x.(Hulk(x) -> Disposer(x))", "score": 0}
{"id": "folio_train_1660", "prediction": "all x.((Hulk(x) & Anxious(x)) -> WakesUp(x))", "score": 0}
{"id": "folio_train_1661", "prediction": "all x.((Hulk(x) & WakesUp(x)) -> BreaksBridge(x))", "score": 0}
{"id": "folio_train_1662", "prediction": "all x.(Thor(x) -> God(x))", "score": 0}
{"id": "folio_train_1663", "prediction": "all x.((Thor(x) & Happy(x)) -> BreaksBridge(x))", "score": 0}
{"id": "folio_train_1664", "prediction": "all x y.((God(x) & Disruptor(y)) -> (-Destroyer(x) & -God(y)))", "score": 0}
{"id": "folio_train_1665", "prediction": "all x.((Superhero(x) & WearsUniform(x)) -> WearsUniform(x))", "score": 0}
{"id": "folio_train_1666", "prediction": "all x.((PeterPotter(x) & BreakingBridge(x)) -> -Civil(x))", "score": 0}
{"id": "folio_train_1667", "prediction": "all x.((Thor(x) & Happy(x)) -> Angerous(x))", "score": 0}
{"id": "folio_train_1668", "prediction": "all x.((Hulk(x) & -WakeUp(x)) -> Thor -Happy(x))", "score": -1}
{"id": "folio_train_1669", "prediction": "all x.((Thor(x) & Happy(x)) -> PeterParkerWearsUniform(x))", "score": 0}
{"id": "folio_train_1670", "prediction": "all x.((Thor(x) & -Happy(x)) -> -BrokenBridge(x))", "score": 0}
{"id": "folio_train_1671", "prediction": "Diethylcarbamazine (Medication(x) & DiscoveredInYear(x,47))", "score": -1}
{"id": "folio_train_1672", "prediction": "all x.(Diethylcarbamazine(x) -> TreatsRiverBlindness(x))", "score": 0}
{"id": "folio_train_1673", "prediction": "all x.((PreferredTreatment(x) & RiverBlindness(x)) -> Ivermectin(x))", "score": 0}
{"id": "folio_train_1674", "prediction": "Diethylcarbamazine -Ivermectin(Diethylcarbamazine)", "score": -1}
{"id": "folio_train_1675", "prediction": "all x.(Diethylcarbamazine(x) -> -PreferredForRiverBlindness(x))", "score": 0}
{"id": "folio_train_1676", "prediction": "all x.(Diethylcarbamazine(x) -> TreatsRiverBlindness(x))", "score": 0}
{"id": "folio_train_1677", "prediction": "Diethylcarbamazine (Diéthylcarbamazine) is used in treatment of filariasis.", "score": -1}
{"id": "folio_train_1678", "prediction": "all x.(UnivariateAnalysis(x) -> UsesGeneralizedLinearModel(x))", "score": 0}
{"id": "folio_train_1679", "prediction": "all x.(Multivoxel(x) -> ImplementsMachineLearningAlgorithms(x))", "score": 0}
{"id": "folio_train_1680", "prediction": "all x.((MachineLearningAlgorithm(x) & LearnsMultivariateData(x) & ClassifiesMultivariateData(x)) -> Implements(x))", "score": 0}
{"id": "folio_train_1681", "prediction": "all x.(LatentDirichletAllocationModel(x) -> (GeometricLiniformModel(x) | UnivariateAnalysis(x)))", "score": 0}
{"id": "folio_train_1682", "prediction": "all x.((LatentDirichletAllocationModel(x) & -LearnsMultivariateData(x) & ClassifiesMultivariateData(x)) -> (UsesGeneralizedLinearModel(x) & UsesMultivoxel(x)))", "score": 0}
{"id": "folio_train_1683", "prediction": "all x.(LatentDirichletAllocationModel(x) -> ImplementsMachineLearningAlgorithms(x))", "score": 0}
{"id": "folio_train_1684", "prediction": "all x.(LatentDirichletAllocationModel(x) -> (UsesGeneralizedLinearModel(x) & LearnsMultivariateData(x) & ClassifiesMultivariateData(x)))", "score": 0}
{"id": "folio_train_1685", "prediction": "all x.(LatentDirichletAllocationModel(x) -> (UsesGeneralizedLinearModel(x) | LearnsMultivariateData(x)))", "score": 0}
{"id": "folio_train_1686", "prediction": "all x.((RequiresMedicalDiagnosis(x) & (LabTests(x) | Imaging(x))) -> RequiresMedicalDiagnosis(x))", "score": 0}
{"id": "folio_train_1687", "prediction": "all x.(RareDisease(x) -> RequiresMedicalDiagnosis(x))", "score": 0}
{"id": "folio_train_1688", "prediction": "all x.((Mild(x) & -LabTests(x) & -Imagery(x)) -> -Required(x))", "score": 0}
{"id": "folio_train_1689", "prediction": "all x.(BloodCancer(x) -> RareDisease(x))", "score": 0}
{"id": "folio_train_1690", "prediction": "all x.(Leukemia(x) -> BloodCancer(x))", "score": 0}
{"id": "folio_train_1691", "prediction": "all x.((B bladderCancer(x) & (BloodCancer(x) | Leukemia(x))) -> Leukemia(x))", "score": -1}
{"id": "folio_train_1692", "prediction": "all x.(BladderCancer(x) -> Mild(x))", "score": 0}
{"id": "folio_train_1693", "prediction": "all x.(BladderCancer(x) -> Leukemia(x))", "score": 0}
{"id": "folio_train_1694", "prediction": "all x.(BladderCancer(x) -> (RareDisease(x) | MildDisease(x)))", "score": 0}
{"id": "folio_train_1695", "prediction": "-exists x.(PreciousMetal(x) & -Sharp(x))", "score": 0}
{"id": "folio_train_1696", "prediction": "all x.(NonRareEarthMetal(x) -> -Sharp(x))", "score": 0}
{"id": "folio_train_1697", "prediction": "(NonRareEarthMetal(x) | RareEarthMetal(x))", "score": 0}
{"id": "folio_train_1698", "prediction": "all x.(RareEarthMetal(x) -> CanBeUsedForBatteries(x))", "score": 0}
{"id": "folio_train_1699", "prediction": "all x.(RareEarthMetal(x) -> EssentialForElectricVehicles(x))", "score": 1}
{"id": "folio_train_1700", "prediction": "all x.(Lithium(x) -> (-NonRareEarthMetal(x) & -EssentialForElectricVehicles(x)))", "score": 0}
{"id": "folio_train_1701", "prediction": "all x.(Lithium(x) -> RareEarthMetal(x))", "score": 1}
{"id": "folio_train_1702", "prediction": "all x.(Lithium(x) -> (PreciousMetal(x) & UsedForBatteries(x)))", "score": 0}
{"id": "folio_train_1703", "prediction": "all x.((Lithium(x) & -EssentialForElectricVehicles(x) & -PreciousMetal(x)) -> (-NonRareEarthMetal(x) & -UsableForBatteries(x)))", "score": 0}
{"id": "folio_train_1704", "prediction": "all x.(OwnsAtLeastOnePet(x) -> -TidyHouses(x))", "score": 0}
{"id": "folio_train_1705", "prediction": "all x.((Person(x) & GrownUpWithChildrenPets(x)) -> OwnsPet(x))", "score": 0}
{"id": "folio_train_1706", "prediction": "all x.((HuntsMaid(x) | HiresCleaningService(x)) -> HasTidyHouses(x))", "score": 0}
{"id": "folio_train_1707", "prediction": "all x.((Person(x) & LivesInSuburbs(x)) -> HasTidyHouses(x))", "score": 0}
{"id": "folio_train_1708", "prediction": "all x.((Jack(x) & (-HasMaid(x) | HasCleaningService(x))) | (-HasPet(x) & OwnsPet(x))))", "score": -1}
{"id": "folio_train_1709", "prediction": "all x.(Jack(x) -> LivesInSuburbs(x))", "score": 0}
{"id": "folio_train_1710", "prediction": "(-LivesInSuburbs(Jack))", "score": 0}
{"id": "folio_train_1711", "prediction": "all x.(Jack(x) -> HasTidyHouse(x))", "score": 0}
{"id": "folio_train_1712", "prediction": "-(LivesInSuburbs(Jack) | OwnsPet(Jack)))", "score": -1}
{"id": "folio_train_1713", "prediction": "all x.(Jack(x) -> (GrowsUpWithChildren(x) & LivesInSuburbs(x)))", "score": 0}
{"id": "folio_train_1714", "prediction": "all x.(Bottle(x) -> (StandsUpright(x) | ToppledOver(x)))", "score": 0}
{"id": "folio_train_1715", "prediction": "-Upright(Boutique)", "score": 0}
{"id": "folio_train_1716", "prediction": "all x.(Boutique(x) -> ToppledOver(x))", "score": 0}
{"id": "folio_train_1717", "prediction": "all x.((EatsCerealAndMilkEveryDay(x) & Breakfast(x)) -> BusyMorningSchedule(x))", "score": 0}
{"id": "folio_train_1718", "prediction": "all x.((YoungChild(x) & UnderTen(x)) -> EatsCerealAndMilkEveryDay(x))", "score": 0}
{"id": "folio_train_1719", "prediction": "all x.((Person(x) & (BelowAge(x,10) | LotsOfCommitments(x))) -> YoungChild(x))", "score": 0}
{"id": "folio_train_1720", "prediction": "all x.((Person(x) & LotsOfCommitments(x) & VoluntarilySsignedUpFor(x)) -> HardworkingIndividual(x) & HighAmbitionsAndGoals(x))", "score": 0}
{"id": "folio_train_1721", "prediction": "all x.((HardworkingIndividual(x) & HighAmbitions(x) & HighGoalsForFuture(x)) -> -GoodAtStayingOrganizedAndMotivated(x))", "score": 0}
{"id": "folio_train_1722", "prediction": "((HardworkingIndividual(John) & HighAmbitionsAndGoals(John) & BusyMorningSchedules(John)) | (-HardworkingIndividual(John) & HighAmbitionsAndGoals(John) & BusyMorningSchedules(John))))", "score": -1}
{"id": "folio_train_1723", "prediction": "all x.(John(x) -> (GoodAtStayingOrganized(x) & Motivated(x)))", "score": 0}
{"id": "folio_train_1724", "prediction": "(EatsCereal(John) & EatsMilk(John))", "score": 0}
{"id": "folio_train_1725", "prediction": "all x.(John(x) -> (HardworkingIndividual(x) & (HighAmbitions(x) & HighGoals(x)) | GoodAtStayingOrganized(x) & Motivated(x))))", "score": -1}
{"id": "folio_train_1726", "prediction": "Ableton has an office in Germany.", "score": -1}
{"id": "folio_train_1727", "prediction": "Ableton has an office in the USA.", "score": -1}
{"id": "folio_train_1728", "prediction": "(DifferentCountries(USA,Germany))", "score": 0}
{"id": "folio_train_1729", "prediction": "all x.((Company(x) & HasOfficesInDifferentCountries(x)) -> MultinationalCompany(x))", "score": 0}
{"id": "folio_train_1730", "prediction": "all x.(Ableton(x) -> MakesMusicSoftware(x))", "score": 0}
{"id": "folio_train_1731", "prediction": "all x.(Ableton(x) -> MultinationalCompany(x))", "score": 0}
{"id": "folio_train_1732", "prediction": "all x.(Ableton(x) -> MakesAISoftware(x))", "score": 0}
{"id": "folio_train_1733", "prediction": "Ableton -exists x.(Office(x) & In(x,Germany))", "score": -1}
{"id": "folio_train_1734", "prediction": "all x.(Swimmer(x) -> CanGoUnderwater(x))", "score": 0}
{"id": "folio_train_1735", "prediction": "all x.((EatsFish(x) & CatchesFish(x)) -> Swimmer(x))", "score": 0}
{"id": "folio_train_1736", "prediction": "all x.(Penguin(x) -> (EatsFish(x) & Catches(x)))", "score": 0}
{"id": "folio_train_1737", "prediction": "all x.((NonFlyingBird(x) & InAntarctica(x)) -> Penguin(x))", "score": 0}
{"id": "folio_train_1738", "prediction": "all x.(Fido(x) -> (Penguin(x) | Swimmer(x)))", "score": 0}
{"id": "folio_train_1739", "prediction": "all x.(Fido(x) -> (EatsFish(x) & Catches(x)))", "score": 0}
{"id": "folio_train_1740", "prediction": "(-FlyingBird(Fido) & -UnderwaterBird(Fido))", "score": 0}
{"id": "folio_train_1741", "prediction": "all x.((Bird(x) & (GoesUnderwater(x) | Swimmer(x))) -> NonFlyingInAntartica(x))", "score": 0}
{"id": "folio_train_1742", "prediction": "all x.(Professor(x) -> Teacher(x))", "score": 0}
{"id": "folio_train_1743", "prediction": "all x.(Researcher(x) -> Professor(x))", "score": 0}
{"id": "folio_train_1744", "prediction": "-exists x.(Teacher(x) & Student(x))", "score": 0}
{"id": "folio_train_1745", "prediction": "all x.(Student(x) -> Student(x))", "score": 0}
{"id": "folio_train_1746", "prediction": "Leon is notStudyingOrResearcher(Leon)", "score": -1}
{"id": "folio_train_1747", "prediction": "all x.((Leon(x) & -Studying(x)) -> Teacher(x))", "score": 0}
{"id": "folio_train_1748", "prediction": "Leon is Professor.", "score": -1}
{"id": "folio_train_1749", "prediction": "(-Student(Leon) & -Researcher(Leon))", "score": 0}
{"id": "folio_train_1750", "prediction": "all x.((Leon(x) & -Researcher(x)) -> Student(x))", "score": 0}
{"id": "folio_train_1751", "prediction": "all x y.((Cutman(x) & Fighter(y)) -> (PreventsAndTreatsPhysicalDamage(x,y) & To(x,y)))", "score": 0}
{"id": "folio_train_1752", "prediction": "all x.(Cutmen(x) -> (AppearsInBoxing(x) | AppearsInKickboxing(x) | AppearsInMixedMartialArts(x)))", "score": 0}
{"id": "folio_train_1753", "prediction": "all x.(Cutman(x) -> (HandlesSwelling(x) & HandlesNasalbleeds(x) & HandlesLacerations(x)))", "score": 0}
{"id": "folio_train_1754", "prediction": "all x.((Jack(x) & Cutman(x)) -> Cutman(x))", "score": 0}
{"id": "folio_train_1755", "prediction": "-exists x.(Cutmen(x) & BoxingMatch(x))", "score": 0}
{"id": "folio_train_1756", "prediction": "all x.((Cutman(x) & -Cutman(x)) -> -HandlesNasalbleeds(x))", "score": 0}
{"id": "folio_train_1757", "prediction": "all x.(Jack(x) -> TreatsPhysicalDamage(x))", "score": 0}
{"id": "folio_train_1758", "prediction": "(BestKnownArtwork(MonaLisa) & KnownFor(MonaLisa))", "score": 0}
{"id": "folio_train_1759", "prediction": "(Portrait(MonaLisa) & PaintedByLeonardoDaVinci(MonaLisa))", "score": 0}
{"id": "folio_train_1760", "prediction": "Leonardo da Vinci ((Scientist(s) & Painter(s)))", "score": -1}
{"id": "folio_train_1761", "prediction": "all x.(PaintingGenre(x) -> (History(x) | Portrait(x) | Animal(x) | Landscape(x) | StillLife(x)))", "score": 0}
{"id": "folio_train_1762", "prediction": "all x y.((Artwork(x) & Scientist(y)) -> PaintedBy(x,y))", "score": 0}
{"id": "folio_train_1763", "prediction": "all x.(LeonardoDaVinci(x) -> exists y.(Landscape(y) & Artwork(z) & Landscape(z)))", "score": 0}
{"id": "folio_train_1764", "prediction": "-exists x.(WorldsBestKnownArtwork(x) & Portrait(x))", "score": 0}
{"id": "folio_train_1765", "prediction": "-exists x.(ProfessionalTennisUmpire(x) & ProfessionalTennisPlayer(x))", "score": 0}
{"id": "folio_train_1766", "prediction": "all x.((WorldTourPlayer(x) & ProfessionalTennisPlayer(x)) -> Professional(x))", "score": 0}
{"id": "folio_train_1767", "prediction": "all x.(GrandSlamChampion(x) -> WorldTourPlayer(x))", "score": 0}
{"id": "folio_train_1768", "prediction": "all x.(GrandSlamUmpire(x) -> ProfessionalTennisUmpire(x))", "score": 0}
{"id": "folio_train_1769", "prediction": "all x.(Nadal(x) -> (WorldTourPlayer(x) | GrandSlamChampion(x)))", "score": 0}
{"id": "folio_train_1770", "prediction": "Nadal is a GrandSlamUmpire(Nadal)", "score": -1}
{"id": "folio_train_1771", "prediction": "-GrandSlamUmpire(Nadal)", "score": 0}
{"id": "folio_train_1772", "prediction": "Nadal is a GrandSlamChampion(n)", "score": -1}
{"id": "folio_train_1773", "prediction": "-(GrandSlamUmpire(Nadal) | ProfessionalTennisUmpire(Nadal))", "score": 0}
{"id": "folio_train_1774", "prediction": "all x.((ProfessionalTennisUmpire(x) & Nadal(x)) -> GrandSlamUmpire(x))", "score": 0}
{"id": "folio_train_1775", "prediction": "all x.((Nadal(x) & (GrandSlamUmpire(x) | ProfessionalTennisPlayer(x))) -> GrandSlamUmpire(x))", "score": 0}
{"id": "folio_train_1776", "prediction": "all x.(Business(x) -> (Sanctioned(x) | Unsanctioned(x)))", "score": 0}
{"id": "folio_train_1777", "prediction": "all x.(SanctionedBizness(x) -> Limited(x))", "score": 0}
{"id": "folio_train_1778", "prediction": "all x.((Bizness(x) & -Sanctioned(x)) -> Free(x))", "score": 0}
{"id": "folio_train_1779", "prediction": "all x.(CrudeOilDataExchange(x) -> (Baisness(x) & -Free(x)))", "score": 0}
{"id": "folio_train_1780", "prediction": "all x.(CrudeOilDataExchange(x) -> Sanctioned(x))", "score": 0}
{"id": "folio_train_1781", "prediction": "(Unsanctioned(crudeOilDataExchange))", "score": 0}
{"id": "folio_train_1782", "prediction": "(Limited(CrudeOilDataExchange))", "score": 0}
{"id": "folio_train_1783", "prediction": "all x.((Depressing(x) & Sad(x)) -> Depressing(x))", "score": 0}
{"id": "folio_train_1784", "prediction": "(Depressing(V) -> Depressing(V))", "score": 0}
{"id": "folio_train_1785", "prediction": "V is invigorating.", "score": -1}
{"id": "folio_train_1786", "prediction": "all x.(Palstaves(x) -> EarlyBronzeAxe(x))", "score": 0}
{"id": "folio_train_1787", "prediction": "all x.(Palstaves(x) -> (FoundIn(x,NorthernEurope) & FoundIn(x,WestEurope) & FoundIn(x,SouthWestEurope)))", "score": 0}
{"id": "folio_train_1788", "prediction": "John Evans (Archeologist) & PopularizedPalstave(JohnEvans))", "score": -1}
{"id": "folio_train_1789", "prediction": "all x.(Paalstab(x) -> (-Axe(x) & DiggingPull(x)))", "score": 0}
{"id": "folio_train_1790", "prediction": "John Evans PopularizedTermPaalstab(JohnEvans)", "score": -1}
{"id": "folio_train_1791", "prediction": "exists x.(Axe(x) & CommonlyFoundIn(x,WestEurope))", "score": 0}
{"id": "folio_train_1792", "prediction": "all x.(Archeologist(x) -> -Popularized(x))", "score": 0}
{"id": "folio_train_1793", "prediction": "all x.(KoeiTecmo(x) -> (JapaneseVideoGame(x) & JapaneseAnimeHoldingCompany(x)))", "score": 0}
{"id": "folio_train_1794", "prediction": "all x.(HoldingCompany(x) -> HoldsCompanies(x))", "score": 0}
{"id": "folio_train_1795", "prediction": "(all x.(Tecmo(x) -> DisbandedInJapan(x)) & (Koei(x) -> Survives(x)) & -Renamed(x)))", "score": -1}
{"id": "folio_train_1796", "prediction": "all x.(VideoGameHoldingCompany(x) -> HoldingCompany(x))", "score": 0}
{"id": "folio_train_1797", "prediction": "all x.(KoeiTecmo(x) -> HoldsAnotherCompany(x))", "score": 0}
{"id": "folio_train_1798", "prediction": "all x.(Tecmo(x) -> HoldsAnotherCompany(x))", "score": 0}
{"id": "folio_train_1799", "prediction": "all x.(KoeiTecmo(x) -> HoldsAnime(x))", "score": 0}
{"id": "folio_train_1800", "prediction": "all x.(Playstation2EyeToy(x) -> CameraAdjustment(x))", "score": 0}
{"id": "folio_train_1801", "prediction": "all x.(PlaystationEye(x) -> CameraAccessories(x))", "score": 0}
{"id": "folio_train_1802", "prediction": "all x.(PlaystationCamera(x) -> (CameraApplication(x) & CompatibleWithPlaystation4AndPlaystation5(x)))", "score": 0}
{"id": "folio_train_1803", "prediction": "all x y.((CameraAdjustment(x) & System(y)) -> CompatibleWith(x,y))", "score": 0}
{"id": "folio_train_1804", "prediction": "all x.(PlaystationCamera(x) -> CompatibleWithMoreThanOneSystem(x))", "score": 0}
{"id": "folio_train_1805", "prediction": "(PlaystationEye(Playstation2) & Playstation3(Playstation2))", "score": 0}
{"id": "folio_train_1806", "prediction": "(CompatibleWithPlaystation2(Playstation) & CompatibleWithPlaystation2(Playstation))", "score": 0}
{"id": "folio_train_1807", "prediction": "all x.(PlaystationCamera(x) -> CanBeUsedForPlaystationConsole(x))", "score": 0}
{"id": "folio_train_1808", "prediction": "Adam Buska (EuropeanFootballPlayer)", "score": -1}
{"id": "folio_train_1809", "prediction": "all x.((European(x) & PlaysFootball(x)) -> PlaysWhatAmericansCalledSoccer(x))", "score": 0}
{"id": "folio_train_1810", "prediction": "all x.(AdamBuska(x) -> PlaysWhatAmericansCalledSoccer(x))", "score": 0}
{"id": "folio_train_1811", "prediction": "all x.((Game(x) & SoldMoreThan(x,1000000)) -> BestSellerList(x))", "score": 0}
{"id": "folio_train_1812", "prediction": "all x.((Game(x) & ParadoxDevelopmentStudio(x)) -> SoldMoreThan(x,million))", "score": 0}
{"id": "folio_train_1813", "prediction": "exists x.(Game(x) & PublishedBefore2010(x) & SupportsLinuxOS(x))", "score": 0}
{"id": "folio_train_1814", "prediction": "all x.((Game(x) & BestSellerList(x)) -> PopularAmongYoungPeople(x))", "score": 0}
{"id": "folio_train_1815", "prediction": "(-SupportsLinuxOS(FavoriteFootball22) & -PopularAmongYoungPeople(Football22))", "score": 0}
{"id": "folio_train_1816", "prediction": "all x.(Favorite21(x) -> PublishedBefore2010(x))", "score": 0}
{"id": "folio_train_1817", "prediction": "all x.(Football21(x) -> (PublishedBefore2010(x) & DevelopedByParadoxDevelopmentStudio(x)))", "score": 0}
{"id": "folio_train_1818", "prediction": "all x.((FoxFox21(x) & (PublishedBefore2010(x) | DevelopedByParadoxDevelopmentStudio(x))) -> (BestSellerList(x) & SoldMoreThan1MCopies(x)) | -BestSellerList(x) & -SoldMoreThan1MCopies(x)))", "score": -1}
{"id": "folio_train_1819", "prediction": "all x.(China(x) -> (BRICS(x) & EmergingEconomy(x)))", "score": 0}
{"id": "folio_train_1820", "prediction": "all x.(India(x) -> (BRICS(x) & EmergingEconomy(x)))", "score": 0}
{"id": "folio_train_1821", "prediction": "all x.((Person(x) & FromChina(x)) -> SpeaksChinese(x))", "score": 0}
{"id": "folio_train_1822", "prediction": "all x.(IndianPerson(x) -> (SpeakHindi(x) | SpeakEnglish(x)))", "score": 0}
{"id": "folio_train_1823", "prediction": "exists x.(Indian(x) & LivesIn(x))", "score": 0}
{"id": "folio_train_1824", "prediction": "all x.((Person(x) & BRICS(x)) -> (-SpeaksHindi(x) | SpeaksEnglish(x)))", "score": 0}
{"id": "folio_train_1825", "prediction": "(-EmergingEconomy(India))", "score": 0}
{"id": "folio_train_1826", "prediction": "exists x.(Person(x) & BRICS(x) & SpeaksHindi(x))", "score": 0}
{"id": "folio_train_1827", "prediction": "DaveedDiggs(DIGGS)", "score": 0}
{"id": "folio_train_1828", "prediction": "(DaveedDiggs(Draggs) & Hamilton(Draggs))", "score": 0}
{"id": "folio_train_1829", "prediction": "all x.((Actor(x) & FromHamilton(x)) -> WinsBestActorAward(x))", "score": 0}
{"id": "folio_train_1830", "prediction": "all x.((Actor(x) & PlayingTomJefferson(x)) -> WonBestActorAward(x))", "score": 0}
{"id": "folio_train_1831", "prediction": "all x.(DaveedDiggs(x) -> PlayedTomJefferson(x))", "score": 0}
{"id": "folio_train_1832", "prediction": "all x.(Musical(x) -> -Film(x))", "score": 0}
{"id": "folio_train_1833", "prediction": "all x.(Hamilton(x) -> Film(x))", "score": 0}
{"id": "folio_train_1834", "prediction": "DaveedDiggsWonBestActorAward(DaveedDuggs)", "score": 0}
{"id": "folio_train_1835", "prediction": "Hamilton won two awards.", "score": -1}
{"id": "folio_train_1836", "prediction": "Ernest Pohl (polnishFootballPlayer)", "score": -1}
{"id": "folio_train_1837", "prediction": "all x.((FootballPlayer(x) & PolishFirstDivision(x)) -> ScoredOver180Goals(x))", "score": 0}
{"id": "folio_train_1838", "prediction": "all x.((ErnestPohl(x) & PolishFirstDivision(x)) -> ScoredMoreThan180Goals(x))", "score": 0}
{"id": "folio_train_1839", "prediction": "all x y.((Stadium(x) & GórnikZarrze(y)) -> NamedAfterSoccerPlayer(x,y))", "score": 0}
{"id": "folio_train_1840", "prediction": "Ernest Pohl (EssentialFromRudalska)", "score": -1}
{"id": "folio_train_1841", "prediction": "-(ErnestPohl(ErnestPohl) & ScoredMoreThan180Goals(ErnestPohl))", "score": 0}
{"id": "folio_train_1842", "prediction": "(Stadium(GórnikZabrze) & NamedAfter(GórnikPohl))", "score": 0}
{"id": "folio_train_1843", "prediction": "(MemberOf(AnnJ.Land,Philadelphia) & MemberOfDemocraticParty(AnnJ.Land,Philadelphia))", "score": -1}
{"id": "folio_train_1844", "prediction": "Ann J.Land ran unopposed for PhiladephiaCityConsecutor(AnnJ.Land,80)", "score": -1}
{"id": "folio_train_1845", "prediction": "all x.((Person(x) & RunsUnopposedForCityCity(x)) -> Election(x))", "score": 0}
{"id": "folio_train_1846", "prediction": "all x.((MichaelNutter(x) & PoliticalChallenge(x)) -> PoliticalChallenge(x))", "score": 0}
{"id": "folio_train_1847", "prediction": "(DefeatsMichaelNutter(AnnJ.Land) & RunsForPhiladelphiaCityConsult(AnnJ.Land,87))", "score": -1}
{"id": "folio_train_1848", "prediction": "Ann J.Land was elected to Philadelphia CityConsult(AnnJ.Land,80)", "score": -1}
{"id": "folio_train_1849", "prediction": "Ann J.Land was elected to Philadelphia CityConsult(AnnJ.Land,87)", "score": -1}
{"id": "folio_train_1850", "prediction": "exists x.(DemocraticParty(x) & ElectsToCityConsult(x,80))", "score": 0}
{"id": "folio_train_1851", "prediction": "Aberdeen won the cup in the 2013 final.", "score": -1}
{"id": "folio_train_1852", "prediction": "all x y.((Rangers(x) & Cup(y)) -> Won(x,y))", "score": 0}
{"id": "folio_train_1853", "prediction": "(DifferentTeam(Aberdeen,Aberdeen) & DifferentTeam(Rangers,Aberdeen))", "score": 0}
{"id": "folio_train_1854", "prediction": "all x y.((Team(x) & Year(y)) -> -WinsSameCup(x,y))", "score": 0}
{"id": "folio_train_1855", "prediction": "all x y.((Rangers(x) & Cup(y)) -> Won(x,y))", "score": 0}
{"id": "folio_train_1856", "prediction": "all x y.((Rangers(x) & Cup(y)) -> Won(x,y))", "score": 0}
{"id": "folio_train_1857", "prediction": "all x.((Aberdeen(x) & WonCup(x)) -> WinsCup(x))", "score": 0}
{"id": "folio_train_1858", "prediction": "all x.((YoungWorkingProfessional(x) & RegularJob(x,9) & RegularJob(x,5)) -> HasPets(x))", "score": 0}
{"id": "folio_train_1859", "prediction": "exists x.(Person(x) & LivesInMetropolitan(x) & YoungWorkingProfessional(x) & RegularJob(x,9))", "score": 0}
{"id": "folio_train_1860", "prediction": "all x.(HasPets(x) -> HasAtLeastOneChild(x))", "score": 0}
{"id": "folio_train_1861", "prediction": "all x.((Person(x) & -HasChild(x)) -> OwnsSportsCar(x))", "score": 0}
{"id": "folio_train_1862", "prediction": "all x.((Mary(x) & -OwnSportsCar(x)) | (-HasChild(x) & HasChild(x))))", "score": -1}
{"id": "folio_train_1863", "prediction": "all x.(Maria(x) -> LivesInMidtown(x))", "score": 0}
{"id": "folio_train_1864", "prediction": "all x.(Mary(x) -> (LivesInMiami(x) & YoungWorkingProfessional(x) & RegularJob(x,9)))", "score": 0}
{"id": "folio_train_1865", "prediction": "all x.((YoungWorkingProfessional(x) & RegularJob(x,9)) -> -LivesInMidtown(x))", "score": 0}
{"id": "folio_train_1866", "prediction": "all x.((BlockDesign(x) | EventRelatedDesign(x)) -> (BlockDesign(x) | EventRelatedDesign(x)))", "score": 0}
{"id": "folio_train_1867", "prediction": "all x.(EventRelatedDesign(x) -> BrainImageAcquisition(x))", "score": 0}
{"id": "folio_train_1868", "prediction": "all x.(BrainImageAcquisition(x) -> PreceedsDataProcessing(x))", "score": 0}
{"id": "folio_train_1869", "prediction": "all x.((DataProcessing(x) & -Preceeds(x,Data)) -> AcquiresData(x))", "score": 0}
{"id": "folio_train_1870", "prediction": "all x.(PictureMemory(x) -> ((EventRelatedDesign(x) & AcquiringData(x)) | (-EventRelatedDesign(x) & AcquiringData(x))))", "score": 1}
{"id": "folio_train_1871", "prediction": "all x.(PictureMemory(x) -> PreceedsDataProcessing(x))", "score": 0}
{"id": "folio_train_1872", "prediction": "all x.(PictureMemory(x) -> BlockDesign(x))", "score": 0}
{"id": "folio_train_1873", "prediction": "all x.(PictureMemory(x) -> (BlockDesign(x) | AcquiringData(x)))", "score": 1}
{"id": "folio_train_1874", "prediction": "all x.((PictureMemory(x) & -AcquiringData(x)) -> (BlockDesign(x) & AcquiringData(x)))", "score": 0}
{"id": "folio_train_1875", "prediction": "all x.((USSLyon(x) & USNavyShip(x)) -> InvolvedInWWII(x))", "score": 0}
{"id": "folio_train_1876", "prediction": "all x.((Ship(x) & InvolvedInWWII(x)) -> (Decommissioned(x) | InMuseum(x)))", "score": 0}
{"id": "folio_train_1877", "prediction": "(Decommissioned(USS Lyon))", "score": -1}
{"id": "folio_train_1878", "prediction": "all x.(DiscoverableChopstick(x) -> MadeFromTrees(x))", "score": 0}
{"id": "folio_train_1879", "prediction": "exists x.(Chopstick(x) & EcoFriendly(x))", "score": 0}
{"id": "folio_train_1880", "prediction": "(DisposableChopsticks(x) | ReusableChopsticks(x))", "score": 0}
{"id": "folio_train_1881", "prediction": "all x.((Chopstick(x) & MadeFromMetals(x)) -> -MadeFromPlastics(x))", "score": 0}
{"id": "folio_train_1882", "prediction": "all x.(ReusableChopstick(x) -> MadeFromMetal(x))", "score": 0}
{"id": "folio_train_1883", "prediction": "all x.((Chopstick(x) & Restaurant(x)) -> (MadeFromMetals(x) & MadeFromPlastics(x)) | (-MadeFromMetals(x) & MadeFromPlastics(x))))", "score": -1}
{"id": "folio_train_1884", "prediction": "all x.((Chopstick(x) & Restaurant(x)) -> EcoFriendly(x))", "score": 0}
{"id": "folio_train_1885", "prediction": "all x.((Chopstick(x) & Restaurant(x)) -> (EcoFriendly(x) | MadeFromTrees(x)))", "score": 0}
{"id": "folio_train_1886", "prediction": "all x.((Chopsticks(x) & (MadeFromPlastics(x) | MadeFromTrees(x))) -> (MadeFromPlastics(x) & EcoFriendly(x)))", "score": 0}
{"id": "folio_train_1887", "prediction": "all x.((Lazy(x) & Unproductive(x)) -> Lazy(x))", "score": 0}
{"id": "folio_train_1888", "prediction": "-exists x.(Unproductive(x) & EnergeticPerson(x))", "score": 0}
{"id": "folio_train_1889", "prediction": "all x.(Sloth(x) -> Lazy(x))", "score": 0}
{"id": "folio_train_1890", "prediction": "exists x.(Animal(x) & Sloth(x))", "score": 0}
{"id": "folio_train_1891", "prediction": "(-(Sid(Sid) & EnergeticPerson(Sid)) | Sloth(Sid)))", "score": -1}
{"id": "folio_train_1892", "prediction": "Sid is Animal(Sid)", "score": -1}
{"id": "folio_train_1893", "prediction": "Sid is an energeticPersonAndAnimal(Sid)", "score": -1}
{"id": "folio_train_1894", "prediction": "all x.((Animal(x) | Unproductive(x)) -> -EnergeticPerson(x))", "score": 0}
{"id": "folio_train_1895", "prediction": "all x.((EuropeanSoccerClub(x) & (UCL(x) | UEL(x) | UECL(x))) -> CanAttend(x,UCL))", "score": 0}
{"id": "folio_train_1896", "prediction": "all x y.((SoccerClub(x) & SoccerClub(y) & EligibleToAttendUCL(x) & EligibleToAttendUEL(y)) -> HigherRanking(x,y))", "score": 0}
{"id": "folio_train_1897", "prediction": "all x y.((SoccerClub(x) & SoccerClub(y) & EligibleToAttendUEL(x) & EligibleToAttendUECL(y)) -> HigherRanking(x,y))", "score": 0}
{"id": "folio_train_1898", "prediction": "(EuropeanSoccerClub(ManchesterUnited) & EuropeanSoccerClub(MachesterCity))", "score": 0}
{"id": "folio_train_1899", "prediction": "all x.((ManchesterUnited(x) & EligibleForAttendance(x,UEL)) -> EligibleForAttendance(x,UEL))", "score": 0}
{"id": "folio_train_1900", "prediction": "all x.((ManchesterCity(x) & EligibleForAttendance(x,UCL)) -> EligibleForAttendance(x,UCL))", "score": 0}
{"id": "folio_train_1901", "prediction": "all x y.((ManchesterCity(x) & ManchesterUnited(y)) -> HigherRanking(x,y))", "score": 0}
{"id": "folio_train_1902", "prediction": "all x y.((Person(x) & FootballClub(y) & Coaches(x,y)) -> FootballCoach(x))", "score": 0}
{"id": "folio_train_1903", "prediction": "all x y z.((Person(x) & Club(y) & Position(z) & InYear(y,z) & InYear(z,y)) -> PlaysInNFL(x))", "score": 0}
{"id": "folio_train_1904", "prediction": "all x.(Violins(x) -> FootballClub(x))", "score": 0}
{"id": "folio_train_1905", "prediction": "Dennis Green coached Minnesota Vikings.", "score": -1}
{"id": "folio_train_1906", "prediction": "CrisCarter had13 touchdownReceptions(cris)", "score": -1}
{"id": "folio_train_1907", "prediction": "(InNationalFootballLion(MNVikings,1997))", "score": 0}
{"id": "folio_train_1908", "prediction": "John Randle was defensive tackle for MinnesotaVikings(John,1997).", "score": -1}
{"id": "folio_train_1909", "prediction": "Dennis Green is a football coach.", "score": -1}
{"id": "folio_train_1910", "prediction": "John Randle -PlayedInNationalFootballLol(JohnRandle)", "score": -1}
{"id": "folio_train_1911", "prediction": "CrisCarter played for MinnesotaViolins(cris)", "score": -1}
{"id": "folio_train_1912", "prediction": "all x.(Cat(x) -> Cute(x))", "score": 0}
{"id": "folio_train_1913", "prediction": "all x.(Barks(x) -> Lovely(x))", "score": 0}
{"id": "folio_train_1914", "prediction": "all x.(Dog(x) -> Barks(x))", "score": 0}
{"id": "folio_train_1915", "prediction": "all x.(Grace(x) -> ((Cat(x) & Dog(x)) | (-Cat(x) & Dog(x)))))", "score": -1}
{"id": "folio_train_1916", "prediction": "all x.(Grace(x) -> Ghost(x))", "score": 0}
{"id": "folio_train_1917", "prediction": "all x.((Grace(x) & (Cute(x) | Lovely(x))) | -Cute(x) | Lovely(x))) -> (Dog(x) | Ghost(x)))", "score": -1}
{"id": "folio_train_1918", "prediction": "all x.((Grace(x) & -Ghost(x) & -Lovely(x)) -> (Cat(x) | Cute(x)))", "score": 0}
{"id": "folio_train_1919", "prediction": "all x.(ShafaqAsiman(x) -> (LargeComplexOfOffshoreGeologicalStructures(x) & InCaspianSea(x)))", "score": 0}
{"id": "folio_train_1920", "prediction": "(NorthwestOfShafaqAsiman(Baku))", "score": 0}
{"id": "folio_train_1921", "prediction": "all x.((PlaceA(x) & NorthwestOfPlaceB(x)) -> SoutheastOfPlaceA(x))", "score": 0}
{"id": "folio_train_1922", "prediction": "(ShadaqAsiman(Baku) & SoutheastOf(Baku,Safaq))", "score": 0}
{"id": "folio_train_1923", "prediction": "all x.(LargeComplex(x) -> SoutheastOfBaku(x))", "score": 0}
{"id": "folio_train_1924", "prediction": "all x.(Baku(x) -> -WesterlyOfOffshoreGeologicalStructures(x))", "score": 0}
{"id": "folio_train_1925", "prediction": "(GreekPhD,PhD,Sophist,GymnasticMaster)", "score": -1}
{"id": "folio_train_1926", "prediction": "Herodicus was born in the city of Selymbria.", "score": -1}
{"id": "folio_train_1927", "prediction": "all x.(Selymbria(x) -> (ColonyOfCityStateMegara(x)))", "score": 0}
{"id": "folio_train_1928", "prediction": "all x.((Tutor(x) & Hippocrates(x)) -> Herodicus(x))", "score": 0}
{"id": "folio_train_1929", "prediction": "all x.(Massage(x) -> RecommendedByHerodicus(x))", "score": 0}
{"id": "folio_train_1930", "prediction": "exists x.(TheoriesOfHerodicus(x) & FoundationOfSportsMedicine(x))", "score": 0}
{"id": "folio_train_1931", "prediction": "all x.(Herodicus(x) -> TutoredHippocrates(x))", "score": 0}
{"id": "folio_train_1932", "prediction": "(TutoredByHippocrates(Herodicus)", "score": -1}
{"id": "folio_train_1933", "prediction": "all x.(Herodicus(x) -> BornInCityState(x))", "score": 0}
{"id": "folio_train_1934", "prediction": "(-RecommendsMassages(Herodicus))", "score": 0}
{"id": "folio_train_1935", "prediction": "all x y.((Herodicus(x) & CityState(y)) -> BornIn(x,y))", "score": 0}
{"id": "folio_train_1936", "prediction": "-exists x.(Kid(x) & LovesOpera(x))", "score": 0}
{"id": "folio_train_1937", "prediction": "all x.(Adult(x) -> LovesOpera(x))", "score": 0}
{"id": "folio_train_1938", "prediction": "all x.(Scientist(x) -> Adult(x))", "score": 0}
{"id": "folio_train_1939", "prediction": "exists x.(Student(x) & Kid(x))", "score": 0}
{"id": "folio_train_1940", "prediction": "all x.(Billy(x) -> Kid(x))", "score": 0}
{"id": "folio_train_1941", "prediction": "(Student(Billiam) & Student(Billiam))", "score": 0}
{"id": "folio_train_1942", "prediction": "(Student(Billy) & Scientist(Billy))", "score": 0}
{"id": "folio_train_1943", "prediction": "all x.((Student(x) | Scientist(x)) -> (Student(x) & Kid(x)))", "score": 0}
{"id": "folio_train_1944", "prediction": "Brian Winter is a ScottishFootballReferee(BrianWinter)", "score": -1}
{"id": "folio_train_1945", "prediction": "Brian Winter, who was injured, retired in 2012.", "score": -1}
{"id": "folio_train_1946", "prediction": "Brian Winter was appointed as RefereeObserver after retirement.", "score": -1}
{"id": "folio_train_1947", "prediction": "exists x.(FootballReferee(x) & RefereeObserver(x))", "score": 0}
{"id": "folio_train_1948", "prediction": "(SonOfBrianWinter(SonOfAndyWinter) & FootballPlayer(Anderson) & PlaysForHamiltonAcademical(Anderson))", "score": 0}
{"id": "folio_train_1949", "prediction": "exists x.(SonOfRefereeObserver(x) & PlaysFootball(x))", "score": 0}
{"id": "folio_train_1950", "prediction": "Brian Winter is not a refereeObserver.", "score": -1}
{"id": "folio_train_1951", "prediction": "Brian Winter is retired.", "score": -1}
{"id": "folio_train_1952", "prediction": "Andy Winter is a Referee(Andy)", "score": -1}
{"id": "folio_train_1953", "prediction": "all x.(Puzzle(x) | BadChess(x))", "score": 0}
{"id": "folio_train_1954", "prediction": "all x.(BadAtChess(x) -> -PlaysLotOfChess(x))", "score": 0}
{"id": "folio_train_1955", "prediction": "all x.(Person(x) -> (Planner(x) | CreativePerson(x)))", "score": 0}
{"id": "folio_train_1956", "prediction": "all x.(Erica(x) -> PlaysChess(x))", "score": 0}
{"id": "folio_train_1957", "prediction": "all x.((Erica(x) & -BadAtChess(x) & -Creative(x)) -> (Plans(x) | -Plans(x) | -Creative(x)))", "score": 0}
{"id": "folio_train_1958", "prediction": "all x.(Erica(x) -> Plans(x))", "score": 0}
{"id": "folio_train_1959", "prediction": "(InterestingInPuzzles(Erica) & Creative(Erica))", "score": 0}
{"id": "folio_train_1960", "prediction": "all x.(Erica(x) -> (InterestsInPuzzles(x) | Creative(x)))", "score": 0}
{"id": "folio_train_1961", "prediction": "all x.((Erica(x) & (PlansAhead(x) | PlaysLotsOfChessMatches(x))) -> -InterestsInPuzzles(x) & -InterestsInCreative(x))", "score": 0}
{"id": "folio_train_1962", "prediction": "all x.((Erica(x) & Creative(x)) -> -InterestsInPuzzles(x) & -InterestsInCreative(x))", "score": 0}
{"id": "folio_train_1963", "prediction": "all x.((Erica(x) & InterestInPuzzles(x) & Creative(x)) -> -Creative(x))", "score": 0}
{"id": "folio_train_1964", "prediction": "all x.((Erica(x) & (PlaysLotOfChessMatches(x) | Creative(x))) -> (-InterestingInPuzzles(x) & -PlaysLotOfChessMatches(x)))", "score": 0}
{"id": "folio_train_1965", "prediction": "all x.((Puzzles(x) & PlaysLotsOfChessMatches(x)) -> (PlaysLotsOfChessMatches(x) | Creative(x)))", "score": 0}
{"id": "folio_train_1966", "prediction": "all x.((Erica(x) & (PlansAhead(x) | InterestsInPuzzles(x))) -> Creative(x))", "score": 0}
{"id": "folio_train_1967", "prediction": "all x.((Erica(x) & (BadAtChess(x) | InterestInPuzzles(x))) -> -(PlaysLotsOfChessMatches(x) & Creative(x)))", "score": 0}
{"id": "folio_train_1968", "prediction": "all x.(SoccerPlayer(x) -> (HasRightFoot(x) & HasLeftFoot(x)))", "score": 0}
{"id": "folio_train_1969", "prediction": "all x.((SoccerPlayer(x) & SoccerPlayer(x) & UsesBothFeetEfficiently(x)) -> Top(x))", "score": 0}
{"id": "folio_train_1970", "prediction": "all x.((SoccerPlayer(x) & CanScoreManyGoalsUsingLeftFoot(x)) -> CanUseFootEfficiently(x))", "score": 0}
{"id": "folio_train_1971", "prediction": "all x.((SoccerPlayer(x) & ScoresManyGoalsUsingRightFoot(x)) -> UsesFootEfficiently(x))", "score": 0}
{"id": "folio_train_1972", "prediction": "Cristiano Ronaldo (SoccerPlayer)", "score": -1}
{"id": "folio_train_1973", "prediction": "all x.(CroitoRonaldo(x) -> CanUseRightFootEfficiently(x))", "score": 0}
{"id": "folio_train_1974", "prediction": "all x.((CroitoRonaldo(x) & LeftFoot(x)) -> ScoresMoreThanOneSixtyGoals(x))", "score": 0}
{"id": "folio_train_1975", "prediction": "all x.((Cronocr Ronaldo(x) & TopSoccerPlayer(x)) -> TopSoccerPlayer(x))", "score": -1}
{"id": "folio_train_1976", "prediction": "(-TopSoccerPlayer(CristinoRonaldo))", "score": 0}
{"id": "folio_train_1977", "prediction": "all x.(NationalLobsterHatchery(x) -> (Hackery(x) & LocatedInPadstow(x)))", "score": 0}
{"id": "folio_train_1978", "prediction": "all x.(NationalLobsterHatchery(x) -> OpenToVisitors(x))", "score": 0}
{"id": "folio_train_1979", "prediction": "all x.(Habitery(x) -> (ForProfit(x) | ForConservation(x)))", "score": 0}
{"id": "folio_train_1980", "prediction": "all x.((Habitery(x) & ForConservation(x)) -> MightReleaseAnimalsIntoWild(x))", "score": 0}
{"id": "folio_train_1981", "prediction": "All x.(NationalLobsterHatchery(x) -> -ForProfit(x))", "score": -1}
{"id": "folio_train_1982", "prediction": "all x.(NationalLobsterHatchery(x) -> ForConservation(x))", "score": 0}
{"id": "folio_train_1983", "prediction": "all x.(Habitat(x) -> OpenToVisitors(x))", "score": 0}
{"id": "folio_train_1984", "prediction": "all x y.((NationalLobsterHatchery(x) & Animal(y)) -> ReleasesIntoWild(x,y))", "score": 0}
{"id": "folio_train_1985", "prediction": "all x.((RhosAelwydF.C.(x) & WelshFootballClub(x)) -> FootballClub(x))", "score": -1}
{"id": "folio_train_1986", "prediction": "all x.(RhosAelwydF.C.(Club(x) & BasedInPonciau(x))", "score": -1}
{"id": "folio_train_1987", "prediction": "all x y.((Team(x) & Ponciau(y)) -> WonPrimaryDividend(x,y))", "score": 0}
{"id": "folio_train_1988", "prediction": "all x.((Winner(x) & PremierDividence(x) & 2009-2010) -> PromotedToCymruAlliance(x))", "score": -1}
{"id": "folio_train_1989", "prediction": "(WonPrimaryDividend(2009,10) & WonPrimaryDividend(2005,6))", "score": 0}
{"id": "folio_train_1990", "prediction": "RhosAelwyd F.C. won Premier Division 2005-06.", "score": -1}
{"id": "folio_train_1991", "prediction": "all x.((RhosAelwydF.C. & CymruAlliance(x)) -> PromotedTo(x,y))", "score": -1}
{"id": "folio_train_1992", "prediction": "all x.(OS(x) -> Software(x))", "score": 0}
{"id": "folio_train_1993", "prediction": "all x.(Mac(x) -> OS(x))", "score": 0}
{"id": "folio_train_1994", "prediction": "all x.(OS(x) -> (Mac(x) | Windows(x)))", "score": 0}
{"id": "folio_train_1995", "prediction": "all x.(Windows(x) -> Convenient(x))", "score": 0}
{"id": "folio_train_1996", "prediction": "all x.(Software(x) -> HasCode(x))", "score": 0}
{"id": "folio_train_1997", "prediction": "all x.((Convenient(x) & Popular(x)) -> Convenient(x))", "score": 0}
{"id": "folio_train_1998", "prediction": "all x.(Burger(x) -> (Code(x) & Mac(x)))", "score": 0}
{"id": "folio_train_1999", "prediction": "all x.(PyTorch(x) -> (Windows(x) & Software(x)) | (-Windows(x) & Software(x))))", "score": -1}
{"id": "folio_train_2000", "prediction": "(Popular(Burger))", "score": 0}
{"id": "folio_train_2001", "prediction": "(-Popular(Burger))", "score": 0}
{"id": "folio_train_2002", "prediction": "(Popular(PyTorch) & HasCode(PyTorch))", "score": 0}
{"id": "folio_train_2003", "prediction": "(-Popular(PyTorch) & HasCode(PyTorch))", "score": 0}
{"id": "folio_train_2004", "prediction": "all x.(Road(x) -> (MadeOfConcrete(x) | MadeOfAsphalt(x)))", "score": 0}
{"id": "folio_train_2005", "prediction": "all x y.((Road(x) & Road(y) & MadeOfConcrete(x) & MadeOfAsphalt(y)) -> LastsLonger(x,y))", "score": 0}
{"id": "folio_train_2006", "prediction": "all x y.((Road(x) & Road(y) & MadeOfAsphalt(x)) -> SmootherThan(x,y))", "score": 0}
{"id": "folio_train_2007", "prediction": "all x.(PrefersSmootherRoad(x,2))", "score": 0}
{"id": "folio_train_2008", "prediction": "(MadeOfConcrete(Road1) & MadeOfAsphalt(Road2))", "score": 0}
{"id": "folio_train_2009", "prediction": "all x y.((RoadOne(x) & Road2(y)) -> LastsLonger(x,y))", "score": 0}
{"id": "folio_train_2010", "prediction": "Road Two & Road One -SmootherThan(Road2))", "score": -1}
{"id": "folio_train_2011", "prediction": "John prefers Road Two.", "score": -1}
{"id": "folio_train_2012", "prediction": "all x.(CampDavern(x) -> (TraditionalSummerCamp(x) & ForBoys(x) & ForGirls(x)))", "score": 0}
{"id": "folio_train_2013", "prediction": "Camp Davern was established in the year 1946.", "score": -1}
{"id": "folio_train_2014", "prediction": "all x y.((CampDavern(x) & YMCA(y)) -> OperatedUntil(x,y))", "score": 0}
{"id": "folio_train_2015", "prediction": "all x.(CampDavern(x) -> OntariosOldestSummerCamp(x))", "score": 0}
{"id": "folio_train_2016", "prediction": "all x.((SummerCamp(x) & OntariosOldest(x)) -> (Traditional(x) & ForBoys(x) & ForGirls(x)))", "score": 0}
{"id": "folio_train_2017", "prediction": "all x y z.((SummerCamp(x) & (Boys(y) | Girls(y)) & YMCA(z)) -> OperatedBy(x,y,z))", "score": 0}
{"id": "folio_train_2018", "prediction": "Camp Davern was established in 1989.", "score": -1}
{"id": "folio_train_2019", "prediction": "all x.(PublishesJournals(x) -> -WorksInEntertainmentIndustry(x))", "score": 0}
{"id": "folio_train_2020", "prediction": "all x.((Person(x) & AwardWinningNovelist(x)) -> PublicsJournals(x))", "score": 0}
{"id": "folio_train_2021", "prediction": "all x.((Person(x) & (WorksInEntertainment(x) | HighlyAcclaimedInProfession(x))) -> HighlyAcclaimedInProfession(x))", "score": 0}
{"id": "folio_train_2022", "prediction": "all x.((HighlyAcclaimedInProfession(x)) -> (HoldsTenuredAndHighRankingPositions(x)))", "score": 0}
{"id": "folio_train_2023", "prediction": "all x.((Person(x) & HighlyAcclaimedInProfession(x)) -> (GlowingFeedback(x) & Recommendations(x)))", "score": 0}
{"id": "folio_train_2024", "prediction": "all x.((Emily(x) & (HighlyAcclaimed(x) | (HoldsTenured(x) & HighRanking(x)))) | (-HighlyAcclaimed(x) & HoldsTenured(x) & HighRanking(x)))))", "score": -1}
{"id": "folio_train_2025", "prediction": "all x.((Emily(x) & Tenured(x) & HighRanking(x)) -> HoldsAtWorkplace(x))", "score": 0}
{"id": "folio_train_2026", "prediction": "all x.((Emily(x) & ReceivesGlowingFeedback(x) & ReceivesRecommendations(x)) -> AwardWinningNovelist(x))", "score": 0}
{"id": "folio_train_2027", "prediction": "all x.((Emily(x) & (GlowingFeedback(x) | AwardWinningNovelist(x))) -> -(PublishesJournals(x) & AwardWinningNovelist(x))))", "score": -1}
{"id": "folio_train_2028", "prediction": "ThickAsThieves(x) -> (YAFantasyNovel(x) & WrittenByMeganWhalenTurner(x)))", "score": -1}
{"id": "folio_train_2029", "prediction": "ThickAsThieves(x) & PublishedByGreenwillowBooks(x))", "score": -1}
{"id": "folio_train_2030", "prediction": "all x y.((Book(x) & Company(y) & PublishedBy(x,y)) -> AuthorWorkedWith(x,y))", "score": 0}
{"id": "folio_train_2031", "prediction": "(FictionalMedeEmpire(MedeEmpire) & ThickAsThieves(MedeEmpire))", "score": 0}
{"id": "folio_train_2032", "prediction": "all x y.((MedeEmpire(x) & Country(y)) -> PlotsToSnake(x,y))", "score": 0}
{"id": "folio_train_2033", "prediction": "(NearMedeEmpire(Attolia) & NearSounis(Sounis))", "score": 0}
{"id": "folio_train_2034", "prediction": "all x.(ThickAsThieves(x) -> (SoldAsHardcover(x) & SoldAsEbook(x)))", "score": 0}
{"id": "folio_train_2035", "prediction": "Megan Whalen Turner worked with GreenwillowBooks.", "score": -1}
{"id": "folio_train_2036", "prediction": "All x.(MedeEmpire(x) -> PlansToSnapAttolia(x))", "score": -1}
{"id": "folio_train_2037", "prediction": "all x.(ThickAsThieves(x) -> -SetInMedeEmpire(x))", "score": 0}
{"id": "folio_train_2038", "prediction": "Megan Whalen Turner -WorkedWithGreenwillowBooks(MeganWhalen(MeganWhalen))", "score": -1}
{"id": "folio_train_2039", "prediction": "all x.(WeTab(x) -> MeeGoBasedTabletComputer(x))", "score": 0}
{"id": "folio_train_2040", "prediction": "exists x.(WeTabProduct(x))", "score": 0}
{"id": "folio_train_2041", "prediction": "WeTab was announced by Neofonie.", "score": -1}
{"id": "folio_train_2042", "prediction": "Neofonie is a GermanProducer.", "score": -1}
{"id": "folio_train_2043", "prediction": "all x.(German(x) -> (SpeakEnglish(x) | SpeakDeutsch(x)))", "score": 0}
{"id": "folio_train_2044", "prediction": "exists x.(TabletComputer(x) & AnnouncedByGerman(x))", "score": 0}
{"id": "folio_train_2045", "prediction": "(-SpeaksEnglish(Neofonie) & -SpeaksDeutsch(Neofonie))", "score": 0}
{"id": "folio_train_2046", "prediction": "exists x.(Employee(x) & WorksInBusinessAnalysis(x) & GoodAtMath(x))", "score": 0}
{"id": "folio_train_2047", "prediction": "all x.(WorksInBusinessAnalysis(x) -> WorkingInCompany(x))", "score": 0}
{"id": "folio_train_2048", "prediction": "-exists x.(Employee(x) & WorkingInCompany(x) & -FromChina(x))", "score": 0}
{"id": "folio_train_2049", "prediction": "all x.(WorksInSoftwareEngineering(x) -> China(x))", "score": 0}
{"id": "folio_train_2050", "prediction": "James is working in SoftwareEngineering(James)", "score": -1}
{"id": "folio_train_2051", "prediction": "all x.(James(x) -> GoodAtMath(x))", "score": 0}
{"id": "folio_train_2052", "prediction": "(-GoodAtMath(James) & WorkingInBusinessAnalysis(James))", "score": 0}
{"id": "folio_train_2053", "prediction": "all x.((James(x) & -GoodAtMath(x) & BusinessAnalysis(x)) -> (-WorkingInCompany(x) & -WorkingInSoftwareEngineering(x)))", "score": 0}
{"id": "folio_train_2054", "prediction": "all x.(Party(x) -> (ProvidesFruits(x,Strawberry) & ProvidesFruits(x,Orange) & ProvidesFruits(x,Blueberry) & ProvidesFruits(x,Grape) & ProvidesFruits(x,Cherry)))", "score": 0}
{"id": "folio_train_2055", "prediction": "all x.(Fruit(x) -> SameWeightAtParty(x))", "score": 0}
{"id": "folio_train_2056", "prediction": "all x.((Fruit(x) & LowestRemainingWeightAtEndOfParty(x)) -> MostPopularFruit(x))", "score": 0}
{"id": "folio_train_2057", "prediction": "all x.((Strawberry(x) & PartyEnd(x)) -> LowestRemainingWeight(x))", "score": 0}
{"id": "folio_train_2058", "prediction": "all x y.((Party(x) & Party(y)) -> (LessBlueberries(x,y) & LowerCrèmes(x,y)))", "score": 0}
{"id": "folio_train_2059", "prediction": "all x.((Benjamin(x) & Party(x)) -> (At(x,Oranges) | At(x,Grapes))))", "score": -1}
{"id": "folio_train_2060", "prediction": "all x.(Blueberry(x) -> MostPopularFruitAtParty(x))", "score": 0}
{"id": "folio_train_2061", "prediction": "all x.(Cherry(x) -> MostPopularFruitAtParty(x))", "score": 0}
{"id": "folio_train_2062", "prediction": "Benjamin ate blueberries at the party.", "score": -1}
{"id": "folio_train_2063", "prediction": "all x.((Student(x) & AttendsInPerson(x)) -> RegisteredForConference(x))", "score": 0}
{"id": "folio_train_2064", "prediction": "all x.(Student(x) -> (AttendsConferenceInPerson(x) | AttendsConferenceRemotely(x)))", "score": 0}
{"id": "folio_train_2065", "prediction": "-exists x.(Student(x) & China(x) & AttendsConferenceRemotely(x))", "score": 0}
{"id": "folio_train_2066", "prediction": "(all x.(James(x) -> AttendsConference(x)) & -AttendsConference(x)))", "score": -1}
{"id": "folio_train_2067", "prediction": "(AttendsConference(Jack) & StudentFromChina(Jack))", "score": 0}
{"id": "folio_train_2068", "prediction": "(AttendsConference(James) & -InPerson(James))", "score": 0}
{"id": "folio_train_2069", "prediction": "all x.(Jack(x) -> AttendsConferenceInPerson(x))", "score": 0}
{"id": "folio_train_2070", "prediction": "(Registers(Jack,Conference) & -Registers(Jack,Conference))", "score": 0}
{"id": "folio_train_2071", "prediction": "David Ha'ivri is a political strategist.", "score": -1}
{"id": "folio_train_2072", "prediction": "all x.((BirthInIsrael(x) & HasIsraeliParent(x)) -> ReceivesCitizenshipAtBirth(x))", "score": 0}
{"id": "folio_train_2073", "prediction": "all x y.((DavidHaivri(x) & Israel(y)) -> EmigratedToUnitedStates(x,y))", "score": 0}
{"id": "folio_train_2074", "prediction": "exists x.(ZionistLeader(x) & ElectedToShomronRegionalMountain(x))", "score": 0}
{"id": "folio_train_2075", "prediction": "David Ha'ivri is Zionist Leader.", "score": -1}
{"id": "folio_train_2076", "prediction": "David Ha'ivri is IsraeliCitizen(d)", "score": -1}
{"id": "folio_train_2077", "prediction": "David Ha'ivri is a United States Citizen(x)", "score": -1}
{"id": "folio_train_2078", "prediction": "David Ha'ivri has been elected to Shomron RegionalMunicipalChair(d))", "score": -1}
{"id": "folio_train_2079", "prediction": "(HasFlu(Mary))", "score": 0}
{"id": "folio_train_2080", "prediction": "all x.((Flu(x) & Influenza(x)) -> SameDisease(x))", "score": 0}
{"id": "folio_train_2081", "prediction": "(-HasInfluenza(Susan))", "score": 0}
{"id": "folio_train_2082", "prediction": "(HasInfluenza(Mary) | HasInfluenza(Susan))", "score": 0}
{"id": "folio_train_2083", "prediction": "James Cocks (BritishLawyer)", "score": -1}
{"id": "folio_train_2084", "prediction": "James Cocks (WhigPolitician(Whig) & SitsInHouseOfCommons(Whig))", "score": -1}
{"id": "folio_train_2085", "prediction": "all x.(British(x) -> European(x))", "score": 0}
{"id": "folio_train_2086", "prediction": "all x.(Lawyer(x) -> FamiliarWithLaws(x))", "score": 0}
{"id": "folio_train_2087", "prediction": "exists x.(Whist(x) & SpeaksFrench(x))", "score": 0}
{"id": "folio_train_2088", "prediction": "-exists x.(Lawyer(x) & SitsInHouseOfCommons(x))", "score": 0}
{"id": "folio_train_2089", "prediction": "exists x.(European(x) & FamiliarWithLaws(x))", "score": 0}
{"id": "folio_train_2090", "prediction": "James Cocks speaks French.", "score": -1}
{"id": "folio_train_2091", "prediction": "all x.(BeastsOfPrey(x) -> (FantasyNovel(x) | ScienceFictionNovel(x)))", "score": 0}
{"id": "folio_train_2092", "prediction": "all x.(ScienceFictionNovel(x) -> -MythologicalCreatures(x))", "score": 0}
{"id": "folio_train_2093", "prediction": "all x.(BeastsOfPrey(x) -> (Creature(x) & Shetani(x)))", "score": 0}
{"id": "folio_train_2094", "prediction": "all x.(Shetani(x) -> Mythological(x))", "score": 0}
{"id": "folio_train_2095", "prediction": "all x.(BeastsOfPrey(x) -> FantasyNovel(x))", "score": 0}
{"id": "folio_train_2096", "prediction": "all x.(BeastsOfPrey(x) -> -ScienceFictionNovel(x))", "score": 0}
{"id": "folio_train_2097", "prediction": "all x.(Shetani(x) -> ((Mythological(x) | Creature(x)) & -(Mythological(x) & Creature(x)))))", "score": -1}
{"id": "folio_train_2098", "prediction": "Odell (EnglandSurname(en) & OriginatedIn(en) & Odell(en) & Bedfordshire(en))", "score": -1}
{"id": "folio_train_2099", "prediction": "all x.((Family(x) & Odell(x)) -> SpelledO'Dell(x))", "score": 0}
{"id": "folio_train_2100", "prediction": "(NotablePeopleWithSurname(amber(amber) | NotablePeopleWithSurname(amber(amber) | NotablePeopleWithSurname(amber(amber)))", "score": -1}
{"id": "folio_train_2101", "prediction": "all x.((Singer(x) & Songwriter(x)) -> AmyOdell(x))", "score": 0}
{"id": "folio_train_2102", "prediction": "Jack Odell (ToyInventor) & Invents(Jack,Odell))", "score": -1}
{"id": "folio_train_2103", "prediction": "all x.((JackOdell(x) & FamousPeople(x)) -> NotablePeople(x))", "score": 0}
{"id": "folio_train_2104", "prediction": "Odell (AmyOdell(a) & Surname(b))", "score": -1}
{"id": "folio_train_2105", "prediction": "Amy Odell (ToyInventor)", "score": -1}
{"id": "folio_train_2106", "prediction": "(AmyOdell(Amy) & AmyOdell(Amy))", "score": 0}
{"id": "folio_train_2107", "prediction": "all x.((Train(x) & GoesAround(x)) -> -LosesTime(x))", "score": 0}
{"id": "folio_train_2108", "prediction": "all x.((GoesByCar(x) & MeetsTrafficJam(x)) -> LosesTime(x))", "score": 0}
{"id": "folio_train_2109", "prediction": "all x.(LosesTime(x) -> LateForWork(x))", "score": 0}
{"id": "folio_train_2110", "prediction": "all x.((Maria(x) & NewHunt(x)) -> (Train(x) | Car(x)))", "score": 0}
{"id": "folio_train_2111", "prediction": "Mary is late for work.", "score": -1}
{"id": "folio_train_2112", "prediction": "(Train(Mary) & NewHunt(Mary))", "score": 0}
{"id": "folio_train_2113", "prediction": "(GetsFromNew HavenToNewYorkCity(Mary,Car))", "score": -1}
{"id": "folio_train_2114", "prediction": "(MariaMeetsTrafficJam(Mary))", "score": 0}
{"id": "folio_train_2115", "prediction": "all x.(Hungry(x) -> Uncomfortable(x))", "score": 0}
{"id": "folio_train_2116", "prediction": "all x.(Uncomfortable(x) -> Unhappy(x))", "score": 0}
{"id": "folio_train_2117", "prediction": "all x.((Person(x) & -Hungry(x)) -> Unhappy(x))", "score": 0}
{"id": "folio_train_2118", "prediction": "all x.(TippedEmployee(x) -> -GanitedMinimumWage(x))", "score": 0}
{"id": "folio_train_2119", "prediction": "all x.(WhiteCollarWorker(x) -> GuaranteedMinimumWage(x))", "score": 0}
{"id": "folio_train_2120", "prediction": "all x.(Lawyer(x) -> WhiteCollarWorker(x))", "score": 0}
{"id": "folio_train_2121", "prediction": "all x.(Advocate(x) -> Lawyer(x))", "score": 1}
{"id": "folio_train_2122", "prediction": "(-Lawyer(Mary) & -TippedEmployee(Mary))", "score": 1}
{"id": "folio_train_2123", "prediction": "all x.(WhiteCollarWorker(x) -> Mary(x))", "score": 0}
{"id": "folio_train_2124", "prediction": "Mary is advocate.", "score": -1}
{"id": "folio_train_2125", "prediction": "-Advocate(Mary)", "score": 1}
{"id": "folio_train_2126", "prediction": "all x.(Mary(x) -> (Advocate(x) | TippedEmployee(x)))", "score": 0}
{"id": "folio_train_2127", "prediction": "all x.((Advocate(x) & -Advocate(x) & GuaranteedMinimumWage(x)) -> -TippedEmployee(x))", "score": 1}
{"id": "folio_train_2128", "prediction": "all x.((Advocate(x) | TippedEmployee(x)) -> Advocate(x))", "score": 0}
{"id": "folio_train_2129", "prediction": "Asa Hoffmann was born in New York City.", "score": -1}
{"id": "folio_train_2130", "prediction": "Asa Hoffman lives in Manhattan.", "score": -1}
{"id": "folio_train_2131", "prediction": "Asa Hoffman is a chess player.", "score": -1}
{"id": "folio_train_2132", "prediction": "exists x.(ChessPlayer(x) & Grandmaster(x))", "score": 0}
{"id": "folio_train_2133", "prediction": "all x.((Birth(x) & LivesInNewYork(x)) -> NewYorker(x))", "score": 0}
{"id": "folio_train_2134", "prediction": "all x.((Person(x) & LivesInNewYork(x)) -> LivesIn(x,NewYork))", "score": 0}
{"id": "folio_train_2135", "prediction": "Asa Hoffmann is NewYorkers(AsaHoffman)", "score": -1}
{"id": "folio_train_2136", "prediction": "Asa Hoffmann is a grandmaster.", "score": -1}
{"id": "folio_train_2137", "prediction": "Asa Hoffmann -LivesInNewYork(Asa))", "score": -1}
{"id": "folio_train_2138", "prediction": "exists x.(AppliesForSchengenVisa(x) & GetsVisa(x))", "score": 0}
{"id": "folio_train_2139", "prediction": "all x.((ApplyForSchengenVisa(x) & ProvideFinancialGaranties(x)) -> ProvidesFinancialGaranties(x))", "score": 0}
{"id": "folio_train_2140", "prediction": "all x.((Bank(x) & NeedsFinancialGaranties(x)) -> RequiresDocuments(x))", "score": 0}
{"id": "folio_train_2141", "prediction": "all x y.((BankAccount(x) & Bank(y) & RequestsDocuments(x,y)) -> -Close(x,y))", "score": 0}
{"id": "folio_train_2142", "prediction": "Philip closed his bank account.", "score": -1}
{"id": "folio_train_2143", "prediction": "Philip got SchengenVisa.", "score": -1}
{"id": "folio_train_2144", "prediction": "all x.(Pianist(x) -> (AppliedForSchengenVisa(x) & GotVisa(x)))", "score": 0}
{"id": "folio_train_2145", "prediction": "all x.((Pilot(x) & -RequiresDocumentsFromBank(x) & -GetsSchengenVisa(x)) -> -AppliesForSchengenVisa(x))", "score": 0}
{"id": "folio_train_2146", "prediction": "exists x.(Fear(x) & LeadsToAngry(x))", "score": 0}
{"id": "folio_train_2147", "prediction": "exists x.(Anxiety(x) & LeadsToTerror(x))", "score": 0}
{"id": "folio_train_2148", "prediction": "-exists x.(Fear(x) & LeadsToTerror(x))", "score": 0}
{"id": "folio_train_2149", "prediction": "(GreatLake(GreatLake) -> (LakeSuperior(GreatLake) | LakeMichigan(GreatLake) | LakeHuron(GreatLake) | LakeErie(GreatLake) | LakeOntario(GreatLake)))", "score": 0}
{"id": "folio_train_2150", "prediction": "exists x.(Standard(x) & LakeErie(x) & (NewYork(y) | PA(y) | Ohio(y) | MI(y)))", "score": 0}
{"id": "folio_train_2151", "prediction": "(State(NY) | State(PA) | State(OH) | State(MI)))", "score": -1}
{"id": "folio_train_2152", "prediction": "all x.(Ontario(x) -> StateOfCanada(x))", "score": 0}
{"id": "folio_train_2153", "prediction": "exists x.(Standard(x) & LakeHuron(x) & InOntario(x))", "score": 0}
{"id": "folio_train_2154", "prediction": "all x.(State(x) -> InCountry(x))", "score": 0}
{"id": "folio_train_2155", "prediction": "all x.(US(x) -> NorthAmerica(x))", "score": 0}
{"id": "folio_train_2156", "prediction": "all x.(GreatLake(x) -> (EndOfLastGlacialPeriod(x) & FormsAt(x,y)))", "score": 0}
{"id": "folio_train_2157", "prediction": "all x.(LakeErie(x) -> MajorStandard(x))", "score": 0}
{"id": "folio_train_2158", "prediction": "exists x.(GreatLake(x) & -FormedAtEndOfLastGlacialPeriod(x))", "score": 0}
{"id": "folio_train_2159", "prediction": "all x.((StephenCurry(x) & -NBAPlayer(x)) -> (-NBAPlayer(x) | SoccerPlayer(x)))", "score": 0}
{"id": "folio_train_2160", "prediction": "all x.((StephenCurry(x) & ProfessionalBasketballPlayer(x)) -> Professional(x))", "score": 0}
{"id": "folio_train_2161", "prediction": "(-Centerback(StephenCurry))", "score": 0}
{"id": "folio_train_2162", "prediction": "all x y.((NaiveCynicism(x) & JustinKruger(y)) -> ProposedBy(y,x))", "score": 0}
{"id": "folio_train_2163", "prediction": "(Colleague(ThomasGilovich) & JustinKruger(Thomas))", "score": 0}
{"id": "folio_train_2164", "prediction": "all x.(NaiveCynicism(x) -> PhilosophyOfMind(x))", "score": 0}
{"id": "folio_train_2165", "prediction": "Thomas Gilovich proposedNaiveCynicism(Thomas)", "score": -1}
{"id": "folio_train_2166", "prediction": "all x.((JustinKruger(x) & PhilosophyOfMind(x)) -> Proposes(x,y))", "score": 0}
{"id": "folio_train_2167", "prediction": "all x.((ThomasGilovich(x) & PhiliophiesOfMind(x)) -> WorkedOn(x,PhiliophiesOfMind))", "score": 0}
{"id": "folio_train_2168", "prediction": "(AwardedToDuncanKnuth(Turing) & AwardedToMarvinMinsky(Turing) & AwardedToRichardHamming(Turing) & AwardedToJohnMcCarthy(Turing))", "score": 0}
{"id": "folio_train_2169", "prediction": "Donald Knuth made major contributions to the analysis of algorithms.", "score": -1}
{"id": "folio_train_2170", "prediction": "all x.((MarvinMinsky(x) & ContributionsToArtificialIntelligence(x)) -> Recognized(x))", "score": 0}
{"id": "folio_train_2171", "prediction": "all x.((RichardHamming(x) & NumericalMethods(x)) -> DidResearch(x))", "score": 0}
{"id": "folio_train_2172", "prediction": "all x.((JohnMcCarthy(x) & ArtificialIntelligence(x)) -> CentralRole(x))", "score": 0}
{"id": "folio_train_2173", "prediction": "-exists x.(Winner(x) & TuringAward(x) & ContributesToNumericalMethods(x))", "score": 0}
{"id": "folio_train_2174", "prediction": "-exists x.(EasyLeetcodeProblem(x) & LowACRate(x,20))", "score": 0}
{"id": "folio_train_2175", "prediction": "all x.(LeetcodeProblem(x) -> Easy(x))", "score": 0}
{"id": "folio_train_2176", "prediction": "all x.(LeetcodeProblem(x) -> ((HasACRateLowerThan(x,20) | StartedByMoreThan(x,1000))))", "score": 0}
{"id": "folio_train_2177", "prediction": "all x.(HardLeetcodeProblem(x) -> StartedByMoreThan1000Users(x))", "score": 0}
{"id": "folio_train_2178", "prediction": "all x.((LeetcodeProblem(x) & PublishedAfter2022(x)) -> StartedByMoreThan1000Users(x))", "score": 0}
{"id": "folio_train_2179", "prediction": "2Sum is not recommended to novices and hard.", "score": -1}
{"id": "folio_train_2180", "prediction": "all x.((Sum(x) & StartedByMoreThan(x,y) & PublishedAfter(y,z)) | (-StartedByMoreThan(x,z) & -PublishedAfter(x,z))))", "score": -1}
{"id": "folio_train_2181", "prediction": "2Sum is anEasyLeetcodeProblem(x)", "score": -1}
{"id": "folio_train_2182", "prediction": "2Sum is notEasyLeetcodeProblem(x)", "score": -1}
{"id": "folio_train_2183", "prediction": "all x.((LeetcodeProblem(x) & (Novell(x) | Hard(x))) -> 4Sum(x))", "score": 0}
{"id": "folio_train_2184", "prediction": "all x.((LeetcodeProblem(x) & -(LeetcodeProblem(x) & RecommendedToNovee(x)) | LeetcodeProblem(x) & Hard(x))) -> 4Sum(x))", "score": -1}
{"id": "folio_train_2185", "prediction": "ShowYourLove(Song) -> RecordedBySouth KoreanBandBtoB4u(Song))", "score": -1}
{"id": "folio_train_2186", "prediction": "All x.((LeadSingle(x) & ExtendedPlayInside(x)) -> ShowYourLove(x))", "score": -1}
{"id": "folio_train_2187", "prediction": "ShowYourLove(x) ContainsHopefulMessage(x))", "score": -1}
{"id": "folio_train_2188", "prediction": "Hyunsik, BtoB4u member, wrote ShowYourLove.", "score": -1}
{"id": "folio_train_2189", "prediction": "exists x.(MusicVideo(x) & ShowYourLove(x))", "score": 0}
{"id": "folio_train_2190", "prediction": "all x.((Love(x) & -BirdBand(x)) -> ShowsLove(x))", "score": 0}
{"id": "folio_train_2191", "prediction": "all x.(LeadSingle(x) -> InsideContainsHopefulMessage(x))", "score": 0}
{"id": "folio_train_2192", "prediction": "Hyunsik is Korean.", "score": -1}
{"id": "folio_train_2193", "prediction": "all x.(Table(x) -> Round(x))", "score": 1}
{"id": "folio_train_2194", "prediction": "exists x.(Furniture(x) & Table(x))", "score": 1}
{"id": "folio_train_2195", "prediction": "exists x.(Furniture(x) & Round(x))", "score": 1}
{"id": "folio_train_2196", "prediction": "all x.(JuvenileDelinquent(x) -> MaladjustedIndividual(x))", "score": 1}
{"id": "folio_train_2197", "prediction": "exists x.(JuvenileDelinquent(x) & BrokenHome(x))", "score": 1}
{"id": "folio_train_2198", "prediction": "exists x.(MaladjustedIndividual(x) & BrokenHome(x))", "score": 1}
{"id": "folio_train_2199", "prediction": "(BirdReading(b) | BrainDecoding(c))", "score": 0}
{"id": "folio_train_2200", "prediction": "all x.(BrainDecoding(x) -> ExtractsInformationFromBOLDSignals(x))", "score": 0}
{"id": "folio_train_2201", "prediction": "all x.((ExtractingInformationFromBOLDSignals(x) & -StatisticalPatternAnalysis(x)) -> -ExtractsInformationFromBOLDSignals(x))", "score": 0}
{"id": "folio_train_2202", "prediction": "all x.(Novel(x) -> -StatisticalPatternAnalysis(x))", "score": 0}
{"id": "folio_train_2203", "prediction": "all x.((Multivoxel(x) & -StatisticalPatternAnalysis(x) & BrainReading(x)) -> -StatisticalPatternAnalysis(x) & BrainDecoding(x))", "score": 0}
{"id": "folio_train_2204", "prediction": "all x.(Multivoxel(x) -> (BirdDecoding(x) & BrainDecoding(x)))", "score": 0}
{"id": "folio_train_2205", "prediction": "all x.(Multivoxel(x) -> (WritingNovel(x) & Pattern(x)))", "score": 0}
{"id": "folio_train_2206", "prediction": "all x.(Multivoxel(x) -> (-StatisticalPatternAnalysis(x) & -WritingNovel(x)))", "score": 0}
{"id": "folio_train_2207", "prediction": "all x.(Multivoxel(x) -> (-StatisticalPatternAnalysis(x) | WritingNovel(x)))", "score": 0}
{"id": "folio_train_2208", "prediction": "all x.(Multivoxel(x) -> ((WithoutStatisticalPatternAnalysis(x) | WritingNovel(x))))", "score": 0}
{"id": "folio_train_2209", "prediction": "all x.((Multivoxel(x) & PatternAnalysis(x) & Novel(x)) -> -(-StatisticalPatternAnalysis(x) | NovelWriting(x))))", "score": -1}
{"id": "folio_train_2210", "prediction": "all x.((RoomForDessert(x) & RoomForBroccoli(x)) -> HasRoomForDessert(x))", "score": 0}
{"id": "folio_train_2211", "prediction": "all x.((Luis(x) & DinnerParty(x)) -> HasRoomForDessert(x))", "score": 0}
{"id": "folio_train_2212", "prediction": "Mauricia - HasRoomForBroccoli(Mauricia))", "score": -1}
{"id": "folio_train_2213", "prediction": "all x.((DinnerParty(x) & AllisonAttended(x)) -> LuisDinnerParty(x))", "score": 0}
{"id": "folio_train_2214", "prediction": "(HasRoom(Gustave,Broccoli) & HasRoom(Gustave,Asparagus))", "score": 0}
{"id": "folio_train_2215", "prediction": "all x.((Broccoli(x) | Asparagus(x)) -> Vegetable(x))", "score": 0}
{"id": "folio_train_2216", "prediction": "all x.(Allison(x) -> HasRoomForButterfly(x))", "score": 0}
{"id": "folio_train_2217", "prediction": "Mauricia is at Luis's DinnerParty(Mauricia)", "score": -1}
{"id": "folio_train_2218", "prediction": "all x.(Gustavs(x) -> HasRoomForDessert(x))", "score": 0}
{"id": "folio_train_2219", "prediction": "ImagineDragons(x) -> (PopRockBand(x) & AmericanPopRockBand(x)))", "score": -1}
{"id": "folio_train_2220", "prediction": "(LeadSinger(IceDragons) -> Dan(Dan))", "score": 0}
{"id": "folio_train_2221", "prediction": "(Songwriter(Dan) & Writer(Dan))", "score": 0}
{"id": "folio_train_2222", "prediction": "all x.(LeadSinger(x) -> Singer(x))", "score": 0}
{"id": "folio_train_2223", "prediction": "all x.(Singer(x) -> Musician(x))", "score": 0}
{"id": "folio_train_2224", "prediction": "(PopularSingle(Demons) & ImagineDragons(ImagineDragons))", "score": 0}
{"id": "folio_train_2225", "prediction": "exists x.(ImagineDragonsSingle(x) & BillboardHot100(x))", "score": 0}
{"id": "folio_train_2226", "prediction": "exists x.(RockBandLeadSinger(x) & Songwriter(x))", "score": 0}
{"id": "folio_train_2227", "prediction": "(-Musician(Dan))", "score": 0}
{"id": "folio_train_2228", "prediction": "(BillboardHot100) & Demons(Demons))", "score": -1}
{"id": "folio_train_2229", "prediction": "all x.(Bread(x) -> Food(x))", "score": 0}
{"id": "folio_train_2230", "prediction": "exists x.(Sandwich(x) & Bread(x))", "score": 0}
{"id": "folio_train_2231", "prediction": "all x.(Food(x) -> Edible(x))", "score": 0}
{"id": "folio_train_2232", "prediction": "-exists x.(Edible(x) & Poisonous(x))", "score": 0}
{"id": "folio_train_2233", "prediction": "all x.(Deodorant(x) -> Poisonous(x))", "score": 0}
{"id": "folio_train_2234", "prediction": "all x.(Deodorant(x) -> Sandwich(x))", "score": 0}
{"id": "folio_train_2235", "prediction": "all x.(Deodorant(x) -> (Sandwich(x) & Bread(x)))", "score": 0}
{"id": "folio_train_2236", "prediction": "all x.((Deodorant(x) & LoafOfBread(x)) -> -Sandwich(x))", "score": 0}
{"id": "folio_train_2237", "prediction": "all x.(CommonUtility(x) -> (Water(x) | Electricity(x) | Gas(x) | Heating(x) | Sewer(x) | Trash(x) | Recycling(x)))", "score": 0}
{"id": "folio_train_2238", "prediction": "all x.(ApartmentRent(x) -> (CoversWater(x) & CoversElectricity(x)))", "score": 0}
{"id": "folio_train_2239", "prediction": "all x y.((Apartment(x) & Apartment(y) & RentCoversUtility(x,y)) -> SusanLiving(x,y))", "score": 0}
{"id": "folio_train_2240", "prediction": "all x.((Apartment(x) & AvaLivesIn(x)) -> -CoversUtilityExpenses(x))", "score": 0}
{"id": "folio_train_2241", "prediction": "all x y.((Apartment(x) & Apartment(y) & -CoversHeating(y)) -> LivesIn(x,y))", "score": 0}
{"id": "folio_train_2242", "prediction": "all x.((Utility(x) & Covered(x)) -> -NeedsPayment(x))", "score": 0}
{"id": "folio_train_2243", "prediction": "all x.(Noah(x) -> NeedsToPayWaterBill(x))", "score": 0}
{"id": "folio_train_2244", "prediction": "all x.((Noah(x) & Ava(x)) -> NeedsToPayHeatingBill(x))", "score": 0}
{"id": "folio_train_2245", "prediction": "all x.((Susan(x) & WaterBill(y)) -> -Pays(x,y))", "score": 0}
{"id": "folio_train_2246", "prediction": "all x.(Clothing(x) -> Product(x))", "score": 0}
{"id": "folio_train_2247", "prediction": "-exists x.(Product(x) & Perfect(x))", "score": 0}
{"id": "folio_train_2248", "prediction": "all x.(Rose(x) -> Clothing(x))", "score": 0}
{"id": "folio_train_2249", "prediction": "all x.(Skirt(x) -> Dress(x))", "score": 0}
{"id": "folio_train_2250", "prediction": "all x.((Nike(x) & Clothing(x)) -> (Perfect(x) & Dress(x)))", "score": 0}
{"id": "folio_train_2251", "prediction": "Nike is perfect.", "score": -1}
{"id": "folio_train_2252", "prediction": "all x.(Nike(x) -> Skirt(x))", "score": 0}
{"id": "folio_train_2253", "prediction": "all x.(Nike(x) -> -Skirt(x))", "score": 0}
{"id": "folio_train_2254", "prediction": "all x.(Pet(x) -> Animal(x))", "score": 0}
{"id": "folio_train_2255", "prediction": "all x.(Pet(x) -> (Dog(x) | Cat(x)))", "score": 0}
{"id": "folio_train_2256", "prediction": "all x.(HasPet(x) -> CaresForPet(x))", "score": 0}
{"id": "folio_train_2257", "prediction": "all x.((Dog(x) | Cat(x)) -> Naughty(x))", "score": 0}
{"id": "folio_train_2258", "prediction": "all x.((Pet(x) & Naughty(x)) -> -Likely(x))", "score": 0}
{"id": "folio_train_2259", "prediction": "all x.(Charlie(x) -> HasNaughtyPetDog(x,Leo))", "score": 0}
{"id": "folio_train_2260", "prediction": "Leo is Animal(leo)", "score": -1}
{"id": "folio_train_2261", "prediction": "(-Likes(Charlie,Leo) & -CaresFor(Charlie,Leo))", "score": 0}
{"id": "folio_train_2262", "prediction": "all x.(Dog(x) -> -Naughty(x))", "score": 0}
{"id": "folio_train_2263", "prediction": "all x.(Surprise(x) -> (Fun(x) | Dreadful(x)))", "score": 0}
{"id": "folio_train_2264", "prediction": "all x.(Scare(x) -> Surprise(x))", "score": 0}
{"id": "folio_train_2265", "prediction": "all x.(Scare(x) -> Fun(x))", "score": 0}
{"id": "folio_train_2266", "prediction": "all x.((Book(x) & WrittenByCixinLiu(x)) -> SoldMoreThan(x,million))", "score": 0}
{"id": "folio_train_2267", "prediction": "exists x.(Book(x) & WonHugoAward(x) & WrittenByCixinLiu(x))", "score": 0}
{"id": "folio_train_2268", "prediction": "all x.(Book(x) -> InfluencedByIsaacAsimov(x))", "score": 0}
{"id": "folio_train_2269", "prediction": "The ThreeBodyProblem(x) & SoldMoreThanOneMillionCopies(x))", "score": -1}
{"id": "folio_train_2270", "prediction": "All x.(ThreeBodyProblem(x) -> AboutFuture(x))", "score": -1}
{"id": "folio_train_2271", "prediction": "The ThreeBodyProblemWonHugoAward(x)", "score": -1}
{"id": "folio_train_2272", "prediction": "The ThreeBodyProblem(x) influencedByIsaacAsimov(x))", "score": -1}
{"id": "folio_train_2273", "prediction": "The ThreeBodyProblem(x) -> WrittenByCixinLiu(x))", "score": -1}
{"id": "folio_train_2274", "prediction": "exists x.(Student(x) & MajorsInComputerScience(x) & GetsUpEarly(x))", "score": 0}
{"id": "folio_train_2275", "prediction": "all x.((Student(x) & GetsUpEarly(x)) -> StudiesInMorning(x))", "score": 0}
{"id": "folio_train_2276", "prediction": "all x.((Student(x) & StudyingInMorning(x)) -> GoodAtTimeManagement(x))", "score": 0}
{"id": "folio_train_2277", "prediction": "all x.((Student(x) & GoodAtTimeManagement(x)) -> PopularAmongStudents(x))", "score": 0}
{"id": "folio_train_2278", "prediction": "(-PopularAmongStudents(James)", "score": -1}
{"id": "folio_train_2279", "prediction": "all x.(James(x) -> MajorsInComputerScience(x))", "score": 0}
{"id": "folio_train_2280", "prediction": "all x.(James(x) -> (MajorsInComputerScience(x) & GetsUpEarly(x)))", "score": 0}
{"id": "folio_train_2281", "prediction": "all x.((James(x) & GetsUpEarly(x)) -> MajorsInComputerScience(x))", "score": 0}
{"id": "folio_train_2282", "prediction": "-DogOnRoof(x)", "score": 0}
{"id": "folio_train_2283", "prediction": "all x.(Dog(x) -> GoesSinceRoof(x))", "score": 0}
{"id": "folio_train_2284", "prediction": "-GoesSince(-)", "score": -1}
{"id": "folio_train_2285", "prediction": "all x.(Elephantopus(x) -> (GenusOfPerennialPlants(x) & InDaisyFamily(x)))", "score": 0}
{"id": "folio_train_2286", "prediction": "all x.(Elephantopus(x) -> (WidespreadOverAfrica(x) & WidespreadOverSouthAsia(x) & WidespreadOverAustralia(x) & WidespreadOverAmericas(x)))", "score": 0}
{"id": "folio_train_2287", "prediction": "exists x.(Elephantopus(x) & NativeToSoutheasternUnitedStates(x))", "score": 1}
{"id": "folio_train_2288", "prediction": "all x.(ElephantopusScaber(x) -> TraditionalMedicine(x))", "score": 0}
{"id": "folio_train_2289", "prediction": "all x.(Elephantopus(x) -> (WidespreadOver(x,Australia) & WidespreadOver(x,SouthernAsia)))", "score": 0}
{"id": "folio_train_2290", "prediction": "-exists x.(Elephantopus(x) & NativeToSoutheasternUnitedStates(x))", "score": 1}
{"id": "folio_train_2291", "prediction": "all x.(Elephantopus(x) -> TraditionalMedicine(x))", "score": 0}
{"id": "folio_train_2292", "prediction": "all x.(YaleDomestic(x) -> LocatedOnYorkStreet(x))", "score": 0}
{"id": "folio_train_2293", "prediction": "all x.((Building(x) & ManagedByYaleHousing(x)) -> Dormitory(x))", "score": 0}
{"id": "folio_train_2294", "prediction": "all x.((Building(x) & OperatedByYaleHousingStaff(x)) -> ManagedByYaleHousing(x))", "score": 0}
{"id": "folio_train_2295", "prediction": "all x.((Building(x) & OpenToStudents(x)) -> -EstablishedAfter1800(x))", "score": 0}
{"id": "folio_train_2296", "prediction": "all x.((Building(x) & LocatedOnYorkStreet(x)) -> OpenToStudents(x))", "score": 0}
{"id": "folio_train_2297", "prediction": "all x.(Harkness(x) -> (OperatedByYaleHousingStaff(x) | LocatedOnYorkStreet(x)))", "score": 0}
{"id": "folio_train_2298", "prediction": "Harkness is YaleDomby(x)", "score": -1}
{"id": "folio_train_2299", "prediction": "Harkness is not YaleDorm(Harkness)", "score": -1}
{"id": "folio_train_2300", "prediction": "Harkness establishedafter1800.", "score": -1}
{"id": "folio_train_2301", "prediction": "all x.(Harkness(x) -> EstablishedBefore1700(x))", "score": 0}
{"id": "folio_train_2302", "prediction": "-exists x.(MansionHouse(x) & UrbanArea(x))", "score": 0}
{"id": "folio_train_2303", "prediction": "all x.(Skyscraper(x) -> ResidesInUrbanArea(x))", "score": 0}
{"id": "folio_train_2304", "prediction": "all x.(CrookyHauntedHouse(x) -> InMansionHouse(x))", "score": 0}
{"id": "folio_train_2305", "prediction": "all x.(ThreateningHalloweenScare(x) -> ComesFromCrookyHauntedHouse(x))", "score": 0}
{"id": "folio_train_2306", "prediction": "all x.(Scream(x) -> (CruellyHuntedHouse(x) | ScaryHalloweenScare(x)))", "score": 0}
{"id": "folio_train_2307", "prediction": "The Scream is a Skyscraper.", "score": -1}
{"id": "folio_train_2308", "prediction": "The Scream is not a Skyscraper.", "score": -1}
{"id": "folio_train_2309", "prediction": "(ThreesomeHalloweenScare(Scream) & HalloweenScare(Scream))", "score": 0}
{"id": "folio_train_2310", "prediction": "all x.(Scream(x) -> (Skyscraper(x) | MansionHouse(x)))", "score": 0}
{"id": "folio_train_2311", "prediction": "all x.(Scream(x) -> (Skyscraper(x) | UrbanArea(x)))", "score": 0}
{"id": "folio_train_2312", "prediction": "all x.(Scream(x) -> (Skyscraper(x) | CryptyHuntedHouse(x)))", "score": 0}
{"id": "folio_train_2313", "prediction": "all x.((Scream(x) & -MansionInUrbanArea(x)) -> (Skyscraper(x) | UrbanArea(x)))", "score": 0}
{"id": "folio_train_2314", "prediction": "all x.((Skyscraper(x) | MansionHouse(x)) -> UrbanArea(x))", "score": 0}
{"id": "folio_train_2315", "prediction": "all x.((Skyscraper(x) | MansionHouse(x)) -> (-CreekHuntedHouse(x) & -ThrillingHalloweenScare(x)))", "score": 0}
{"id": "folio_train_2316", "prediction": "all x.((Scream(x) & (Skyscraper(x) | CryptyHuntedHouse(x))) -> -MansionHouse(x))", "score": 0}
{"id": "folio_train_2317", "prediction": "all x.(PhuocBinhNationalPark(x) -> NationalParkInVietnam(x))", "score": 0}
{"id": "folio_train_2318", "prediction": "all x.((NationalPark(x) & Vietnam(x)) -> NatureReserve(x))", "score": 0}
{"id": "folio_train_2319", "prediction": "exists x.(NationalPark(x) & InVietnam(x) & WorldHeritageSite(x))", "score": 0}
{"id": "folio_train_2320", "prediction": "all x.(NationalPark(x) -> (ManagedBy(x,MinisterOfAgriculture) | ManagedBy(x,PeoplesCommittee)))", "score": 0}
{"id": "folio_train_2321", "prediction": "Phuoc Binh - ManagedByMinisterOfAgriculture(PhuocBinh)", "score": -1}
{"id": "folio_train_2322", "prediction": "exists x.(NatureReserve(x) & InVietnam(x))", "score": 0}
{"id": "folio_train_2323", "prediction": "PhuocBinh (UNESCO HeritageSite)", "score": -1}
{"id": "folio_train_2324", "prediction": "Phuoc Binh is managed by PeoplesCommittee(PhuocBinh)", "score": -1}
{"id": "folio_train_2325", "prediction": "all x.(GreyhoundRacing(x) -> (CompetitiveSport(x) & spectatorsBetOnGreyhounds(x)))", "score": 1}
{"id": "folio_train_2326", "prediction": "all x.(Courses(x) -> GreyhoundRacing(x))", "score": 0}
{"id": "folio_train_2327", "prediction": "exists x.(CompetitiveSport(x) & WhereScientistsBetOnThings(x))", "score": 0}
{"id": "folio_train_2328", "prediction": "all x y.((Courses(x) & Watcher(y)) -> BetsOnHare(y,x))", "score": 0}
{"id": "folio_train_2329", "prediction": "all x.(Hare(x) -> SmallGame(x))", "score": 0}
{"id": "folio_train_2330", "prediction": "all x.((CompetitiveSport(x) & InvolvesStakeholdersBetweenSmallGame(x)) -> Ban(x))", "score": 0}
{"id": "folio_train_2331", "prediction": "-BanishesCoursing(x)", "score": 0}
{"id": "folio_train_2332", "prediction": "all x.(GreyhoundRacing(x) -> CompetitiveSport(x))", "score": 1}
{"id": "folio_train_2333", "prediction": "all x y.((SoccerPlayer(x) & YellowCard(y) & ReceivesInOneGame(x,y)) -> EjectedFromGame(x))", "score": 0}
{"id": "folio_train_2334", "prediction": "all x y.((SoccerPlayer(x) & RedCard(y) & ReceivesInOneGame(x,y)) -> EjectedFromRestOfGame(x))", "score": 0}
{"id": "folio_train_2335", "prediction": "Henry is soccer player.", "score": -1}
{"id": "folio_train_2336", "prediction": "all x y.((Game(x) & Henry(y)) -> (ReceivesYellowCard(y,x) & ReceivesRedCard(y,x)))", "score": 0}
{"id": "folio_train_2337", "prediction": "all x.(Henry(x) -> EjectedFromGame(x))", "score": 0}
{"id": "folio_train_2338", "prediction": "all x.(Henry(x) -> -EjectedFromGame(x))", "score": 0}
{"id": "folio_train_2339", "prediction": "all x.(Tree(x) -> Plant(x))", "score": 1}
{"id": "folio_train_2340", "prediction": "exists x.(LivingThing(x) & Tree(x))", "score": 1}
{"id": "folio_train_2341", "prediction": "exists x.(LivingThing(x) & Plant(x))", "score": 1}
{"id": "folio_train_2342", "prediction": "all x.(Dagfinn(x) -> GivenName(x))", "score": 0}
{"id": "folio_train_2343", "prediction": "(NotablePeopleWithGivenName(DagfinnAarskog) & NotablePeopleWithGivenName(DagfinnBakke) & NotablePeopleWithGivenName(DagfinnDalm))", "score": 0}
{"id": "folio_train_2344", "prediction": "Dagfinn Aarskog (NorwegianPharmacist)", "score": -1}
{"id": "folio_train_2345", "prediction": "Dagfinn Dahl (NorwegianBarrister)", "score": -1}
{"id": "folio_train_2346", "prediction": "DagfinnAarskog is a notablePerson(x)", "score": -1}
{"id": "folio_train_2347", "prediction": "Dagfinn is DagfinnAarskog's GivenName(Dagfinn)", "score": -1}
{"id": "folio_train_2348", "prediction": "Dagfinn Dahl (NorwegianPharmacist)", "score": -1}
{"id": "folio_train_2349", "prediction": "all x.((Entertainment(x) & Interesting(x)) -> Popular(x))", "score": 0}
{"id": "folio_train_2350", "prediction": "all x.(PopularThing(x) -> WellKnown(x))", "score": 0}
{"id": "folio_train_2351", "prediction": "all x.((Entertainment(x) & Interesting(x)) -> WellKnown(x))", "score": 0}
{"id": "folio_train_2352", "prediction": "exists x.(LanguageModel(x) & -GoodPerformance(x))", "score": 0}
{"id": "folio_train_2353", "prediction": "all x.((LanguageModel(x) & GoodPerformance(x)) -> UsedByResearchers(x))", "score": 0}
{"id": "folio_train_2354", "prediction": "all x.((LanguageModel(x) & UsedByResearchers(x)) -> Popular(x))", "score": 0}
{"id": "folio_train_2355", "prediction": "all x.((BERT(x) & GiantLanguageModel(x)) -> GiantLanguageModel(x))", "score": 0}
{"id": "folio_train_2356", "prediction": "all x.(BERT(x) -> GiantLanguageModel(x))", "score": 0}
{"id": "folio_train_2357", "prediction": "(Popular(GPT3))", "score": 0}
{"id": "folio_train_2358", "prediction": "all x.(StJohnstone(x) -> ScottishTeam(x))", "score": 0}
{"id": "folio_train_2359", "prediction": "StJohnstone is part of ScottishPremiership(StJohnstone)", "score": -1}
{"id": "folio_train_2360", "prediction": "all x.((Team(x) & PartOfLiga(x)) -> JoinedLiga(x))", "score": 0}
{"id": "folio_train_2361", "prediction": "(DifferentTeam(StJohnstone,StJohnstone) & DifferentTeam(Minsk,StJohnstone))", "score": 0}
{"id": "folio_train_2362", "prediction": "all x y.((Team(x) & Team(y)) -> (Wins(x,y) | Wins(y,x)))", "score": 0}
{"id": "folio_train_2363", "prediction": "all x y.((Minsk(x) & StJohnstone(y)) -> Wins(x,y))", "score": 0}
{"id": "folio_train_2364", "prediction": "all x.(ScottishTeam(x) -> JoinedScottishPrimaryship(x))", "score": 0}
{"id": "folio_train_2365", "prediction": "StJohnstoneWonAgainstMinsk(StJohnstone)", "score": 0}
{"id": "folio_train_2366", "prediction": "Minsk joined ScottishPremiership(Minsk)", "score": -1}
{"id": "folio_train_2367", "prediction": "-exists x.(Boeing737(x) & Seats(x,300))", "score": 0}
{"id": "folio_train_2368", "prediction": "all x.(Delta(x) -> Boeing737(x))", "score": 0}
{"id": "folio_train_2369", "prediction": "all x.(Plane(x) -> (EquivalentToMoreThan300Seats(x) | CapacityTo100Passengers(x)))", "score": 0}
{"id": "folio_train_2370", "prediction": "all x.((Plane(x) & CapacityOf100Passengers(x)) -> ScheduledForShortDistanceFlight(x))", "score": 0}
{"id": "folio_train_2371", "prediction": "all x.((Plane(x) & Capacity(x,100)) -> ProducedBefore2010(x))", "score": 0}
{"id": "folio_train_2372", "prediction": "all x.(Jake32(x) -> (Boeing737Plane(x) | DeltaPlane(x)))", "score": 0}
{"id": "folio_train_2373", "prediction": "(Boeing737Plane(T10) | DeltaPlane(T10)))", "score": -1}
{"id": "folio_train_2374", "prediction": "all x.(Jake32(x) -> (ProducedBefore2010(x) & ScheduledForShortDistanceFlight(x)))", "score": 0}
{"id": "folio_train_2375", "prediction": "all x.(Jake32(x) -> (-ProducedBefore2010(x) & -ScheduledForShortDistanceFlight(x)))", "score": 0}
{"id": "folio_train_2376", "prediction": "all x.(Jake32(x) -> (ProducedBefore2010(x) | ScheduledForShortDistanceFlight(x)))", "score": 0}
{"id": "folio_train_2377", "prediction": "all x.(Jake32(x) -> (-ProducedBefore2010(x) & -ScheduledForShortDistanceFlight(x)))", "score": 0}
{"id": "folio_train_2378", "prediction": "all x.(SATTest(x) -> (OwnedByCollegeBoard(x) & DevelopedByCollegeBoard(x)))", "score": 0}
{"id": "folio_train_2379", "prediction": "all x.(SATTest(x) -> AssessesStudentRequirementForCollege(x))", "score": 0}
{"id": "folio_train_2380", "prediction": "all x.(SAT(x) -> -AlignedWithHighSchoolCurricula(x))", "score": 0}
{"id": "folio_train_2381", "prediction": "all x y.((SAT(x) & Version(y) & IntroducedIn2016(y)) -> ReflectsFacilyOnWhatStudentsLearnInHighSchool(x,y))", "score": 0}
{"id": "folio_train_2382", "prediction": "all x.((SAT(x) & AlignedWithHighSchoolCurricula(x)) -> BetterAligned(x))", "score": 0}
{"id": "folio_train_2383", "prediction": "all x.(SATTest(x) -> (OwnedByCollegeBoard(x) & OwnedByMultipleThirdParties(x)))", "score": 0}
{"id": "folio_train_2384", "prediction": "all x.(SATTest(x) -> AssessesMathSkills(x))", "score": 0}
{"id": "folio_train_2385", "prediction": "Rafa Nadal was born in Mallorca.", "score": -1}
{"id": "folio_train_2386", "prediction": "Rafa Nadal is a professional tennis player.", "score": -1}
{"id": "folio_train_2387", "prediction": "Nadal's WinRatioHigherThan80%(Nadal)", "score": -1}
{"id": "folio_train_2388", "prediction": "all x.(Big3(x) -> (Professional(x) & HighWinRatio(x)))", "score": 0}
{"id": "folio_train_2389", "prediction": "Nadal n'est pas born in Mallorca.", "score": -1}
{"id": "folio_train_2390", "prediction": "Nadal is in Big3.", "score": -1}
{"id": "folio_train_2391", "prediction": "Nadal is the greatestPlayerOfAllTime(Nadal,SixThan(Nadal))", "score": -1}
{"id": "folio_train_2392", "prediction": "-exists x.(Cookie(x) & Healthy(x))", "score": 0}
{"id": "folio_train_2393", "prediction": "all x.(Oreo(x) -> Cookies(x))", "score": 0}
{"id": "folio_train_2394", "prediction": "all x.(Cookie(x) -> Delicious(x))", "score": 0}
{"id": "folio_train_2395", "prediction": "-exists x.(Animal(x) & Plant(x))", "score": 3}
{"id": "folio_train_2396", "prediction": "all x.(Human(x) -> Animal(x))", "score": 3}
{"id": "folio_train_2397", "prediction": "all x.(Pupil(x) -> Human(x))", "score": 2}
{"id": "folio_train_2398", "prediction": "all x.((Human(x) | Flower(x)) -> (Human(x) & Flower(x)))", "score": 3}
{"id": "folio_train_2399", "prediction": "(Pupil(Jack))", "score": 1}
{"id": "folio_train_2400", "prediction": "(-Pupil(Jack))", "score": 1}
{"id": "folio_train_2401", "prediction": "all x.(Jack(x) -> Plant(x))", "score": 0}
{"id": "folio_train_2402", "prediction": "all x.(Human(x) -> -Pupil(x))", "score": 1}
{"id": "folio_train_2403", "prediction": "-exists x.(Shoe(x) & Food(x))", "score": 0}
{"id": "folio_train_2404", "prediction": "all x.(Slipper(x) -> Shoes(x))", "score": 0}
{"id": "folio_train_2405", "prediction": "all x.(Thing(x) -> (Food(x) | Clothing(x)))", "score": 0}
{"id": "folio_train_2406", "prediction": "-exists x.(WearableThing(x) & Airtight(x))", "score": 0}
{"id": "folio_train_2407", "prediction": "all x.(Clothing(x) -> Wearable(x))", "score": 0}
{"id": "folio_train_2408", "prediction": "all x.((Watch(x) & -Airtight(x) & -Clothes(x)) -> (Airtight(x) & -Clothes(x)))", "score": 0}
{"id": "folio_train_2409", "prediction": "all x.(Watch(x) -> Wearable(x))", "score": 0}
{"id": "folio_train_2410", "prediction": "all x.(Watch(x) -> Slipper(x))", "score": 0}
{"id": "folio_train_2411", "prediction": "all x.(Watch(x) -> (-Airtight(x) | Slipper(x)))", "score": 0}
{"id": "folio_train_2412", "prediction": "all x.(Olympian(x) -> (TrainsForOlympicSport(x) & GoesToOlympics(x)))", "score": 0}
{"id": "folio_train_2413", "prediction": "all x.((CarlosReyes(x) & OlympicSport(y)) -> TrainsFor(x,y))", "score": 0}
{"id": "folio_train_2414", "prediction": "all x.((CarlosReyes(x) & GoesToOlympics(x)) -> GoesToOlympics(x))", "score": 0}
{"id": "folio_train_2415", "prediction": "all x.((CarlosReyes(x) & Welterweight(x)) -> Is(x,y))", "score": 0}
{"id": "folio_train_2416", "prediction": "all x.(HeavyWeight(x) -> -Welderweight(x))", "score": 0}
{"id": "folio_train_2417", "prediction": "Carlos Reyes is Olympian(x)", "score": -1}
{"id": "folio_train_2418", "prediction": "all x.(CarlosReyes(x) -> HeavyWeight(x))", "score": 0}
{"id": "folio_train_2419", "prediction": "Carlos Reyes wonsOlympicMedal(x)", "score": -1}
{"id": "folio_train_2420", "prediction": "all x.((Person(x) & LotsOfDecorationsInRoom(x)) -> -(PackInRoom(x) & MoveOutRoom(x)))", "score": 0}
{"id": "folio_train_2421", "prediction": "all x.((HighAmbitions(x) & FutureCareerGoals(x)) -> PackAndMoveOut(x))", "score": 0}
{"id": "folio_train_2422", "prediction": "all x.((PopBand(x) & Singer(x)) -> LotsOfDecorationsInRoom(x))", "score": 0}
{"id": "folio_train_2423", "prediction": "all x.((YoungTenureGirl(x) & AttendsCollege(x)) -> (BigFanOfPopBands(x) & BigFanOfSingers(x)))", "score": 0}
{"id": "folio_train_2424", "prediction": "all x.((HighAmbitions(x) & FutureCareerGoals(x)) -> BigFanOfPopBandsAndSingers(x))", "score": 0}
{"id": "folio_train_2425", "prediction": "all x.((Sam(x) & Teenager(x)) -> AttendsCollege(x))", "score": 0}
{"id": "folio_train_2426", "prediction": "all x.((Sam(x) & -YoungTeenager(x) & AttendsCollege(x)) -> -Sam(x))", "score": 0}
{"id": "folio_train_2427", "prediction": "all x.((Sam(x) & PopBand(x) & Singer(x)) -> BigFan(x))", "score": 0}
{"id": "folio_train_2428", "prediction": "(-(HighAmbitions(Sam) & FutureCareerGoals(Sam)) | (YoungTenure(Sam) & AttendsCollege(Sam))))", "score": -1}
{"id": "folio_train_2429", "prediction": "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> Teenager(x))", "score": 0}
{"id": "folio_train_2430", "prediction": "all x.((YoungTeenager(x) & AttendsCollege(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x)) | BigFanOfPopBandsAndSingers(x)))", "score": -1}
{"id": "folio_train_2431", "prediction": "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x) & YoungDaughter(x) & AttendsCollege(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x)) | -AttendsCollege(x)))", "score": -1}
{"id": "folio_train_2432", "prediction": "all x.((HighAmbitions(x) & FutureCareerGoals(x)) -> Teenager(x))", "score": 0}
{"id": "folio_train_2433", "prediction": "all x.((Student(x) & LovesShredding(x)) -> Punished(x))", "score": 0}
{"id": "folio_train_2434", "prediction": "all x.(Swears(x) -> Student(x))", "score": 0}
{"id": "folio_train_2435", "prediction": "all x.(Teacher(x) -> BobTalksTo(x,y))", "score": 0}
{"id": "folio_train_2436", "prediction": "all x.(Gentlemen(x) -> InSuite(x))", "score": 0}
{"id": "folio_train_2437", "prediction": "all x.(Teacher(x) -> Men(x))", "score": 0}
{"id": "folio_train_2438", "prediction": "exists x.(Teacher(x) & Teacher(x))", "score": 0}
{"id": "folio_train_2439", "prediction": "all x.((Person(x) & -Gentlemen(x)) -> -Nice(x))", "score": 0}
{"id": "folio_train_2440", "prediction": "Willy is nice.", "score": -1}
{"id": "folio_train_2441", "prediction": "all x.((Bob(x) & Shredding(x) & Swearing(x)) -> Loves(x))", "score": 0}
{"id": "folio_train_2442", "prediction": "Willy is in a suit.", "score": -1}
{"id": "folio_train_2443", "prediction": "all x.(Bob(x) -> -Punished(x))", "score": 0}
{"id": "folio_train_2444", "prediction": "exists x.(Man(x) & BobTalksTo(x))", "score": 0}
{"id": "folio_train_2445", "prediction": "Quincy McDuffie (AmericanProfessionalWideReceiver(Quincy) & InCanadianFootball(Quincy))", "score": -1}
{"id": "folio_train_2446", "prediction": "all x.((Person(x) & CanCatchBalls(x)) -> GoodWideReceiver(x))", "score": 0}
{"id": "folio_train_2447", "prediction": "Quincy McDuffie can catch many footballs easily.", "score": -1}
{"id": "folio_train_2448", "prediction": "all x.(GoodWideReceiver(x) -> PlaysProfessionally(x))", "score": 0}
{"id": "folio_train_2449", "prediction": "all x.((WideReceiver(x) & LeftHand(x) & RightHand(x)) -> CanCatch(x))", "score": 0}
{"id": "folio_train_2450", "prediction": "all x.(Football(x) -> Ball(x))", "score": 0}
{"id": "folio_train_2451", "prediction": "Quincy McDuffie is a good wide receiver.", "score": -1}
{"id": "folio_train_2452", "prediction": "Quincy McDuffie canCatchEveryBall(QuincyMcDuffie)", "score": -1}
{"id": "folio_train_2453", "prediction": "all x.(ProfessionalWideReceiver(x) -> GoodAtCatchingBalls(x))", "score": 0}
{"id": "folio_train_2454", "prediction": "all x.(Boves(x) -> RailwayStation(x))", "score": 0}
{"id": "folio_train_2455", "prediction": "(PassendingStation(Boves) -> Longueau(Boves))", "score": 0}
{"id": "folio_train_2456", "prediction": "(PassendingStationOfDommartin(Dommartin) -> Boves(Dommartin))", "score": 0}
{"id": "folio_train_2457", "prediction": "all x.(France(x) -> EuropeanCountry(x))", "score": 0}
{"id": "folio_train_2458", "prediction": "(SituatedOnRailway(Dommartin) & ParisLille(Dommartin))", "score": 0}
{"id": "folio_train_2459", "prediction": "all x.((ContiguousStation(x) & ContiguousStation(x)) -> OnSameRailway(x))", "score": 0}
{"id": "folio_train_2460", "prediction": "all x.(Boves(x) -> ServedByRegionalTERTrains(x,HautsDeFrance))", "score": 0}
{"id": "folio_train_2461", "prediction": "all x.((LocatedIn(x,B) & LocatedIn(x,C)) -> LocatedIn(x,C))", "score": 0}
{"id": "folio_train_2462", "prediction": "all x.((Preceeds(x,B) & Preceeds(x,C)) -> Preceeds(x,C))", "score": 0}
{"id": "folio_train_2463", "prediction": "Boves is not inEurope.", "score": -1}
{"id": "folio_train_2464", "prediction": "all x.(Longueau(x) -> ServedByRegionalTERTrains(x,HautsDeFrance))", "score": 0}
{"id": "folio_train_2465", "prediction": "Edwin Smith (NZRower(n) & FromAuckland(n))", "score": -1}
{"id": "folio_train_2466", "prediction": "EdwinSmith(e) & TedSmith(e))", "score": -1}
{"id": "folio_train_2467", "prediction": "EdwinSmith went to RoseRoadPrimarySchool(e) & LocatedInGreyLynn(e))", "score": -1}
{"id": "folio_train_2468", "prediction": "Edwin Smith (Sgtalion(s) & New Zealand24thBattalion(s) & In(s,italy,egypt))", "score": -1}
{"id": "folio_train_2469", "prediction": "all x.((BroadwaySheets(x) & RunByEdwinSmith(x) & SheetmetalWorker(x)) -> SheetmetalBailey(x))", "score": 0}
{"id": "folio_train_2470", "prediction": "(Sergeant(TedSmith)", "score": -1}
{"id": "folio_train_2471", "prediction": "-exists x.(Rower(x) & OwnsBaisness(x))", "score": 0}
{"id": "folio_train_2472", "prediction": "-exists x.(Sergeant(x) & FromAuckland(x))", "score": 0}
{"id": "folio_train_2473", "prediction": "-exists x.(BaisnessOwner(x) & ServesInEgypt(x))", "score": 0}
{"id": "folio_train_2474", "prediction": "all x.(Worshipwolf(x) -> (Human(x) & CanTurnIntoWolf(x)))", "score": 0}
{"id": "folio_train_2475", "prediction": "all x.(Worshipwolf(x) -> (Scratched(x) | Bited(x)))", "score": 0}
{"id": "folio_train_2476", "prediction": "all x.((Scraped(x) | Bited(x)) -> Attacked(x))", "score": 0}
{"id": "folio_train_2477", "prediction": "all x.(Human(x) -> Werewolf(x))", "score": 0}
{"id": "folio_train_2478", "prediction": "all x.(Worshipwolf(x) -> Wolf(x))", "score": 0}
{"id": "folio_train_2479", "prediction": "all x y.((Worshipwolf(x) & Person(y)) -> Scratched(x,y))", "score": 0}
{"id": "folio_train_2480", "prediction": "all x.((UFCFightNight(x) & MixedMartialArtsEvent(x) & HeldInSweden(x)) -> HeldIn(x,Sweden))", "score": 0}
{"id": "folio_train_2481", "prediction": "all x.((Sadollah(x) & UFCFightNight(x)) -> ScheduledToFightMusoke(x))", "score": 0}
{"id": "folio_train_2482", "prediction": "Sadollah fought Akiyama at UFCFightNight(Sadollah,FightNight)", "score": -1}
{"id": "folio_train_2483", "prediction": "(FightNight(Musoke,Yakovlev) & UFC(Musoke,Yakovlev))", "score": 0}
{"id": "folio_train_2484", "prediction": "Jung was injured at UFCFightNight(Jung)", "score": -1}
{"id": "folio_train_2485", "prediction": "all x.(Injured(x) -> -FightsAtUFFC(x))", "score": 0}
{"id": "folio_train_2486", "prediction": "(FightedSadollah(Jung) & Sadollah(Jung))", "score": 0}
{"id": "folio_train_2487", "prediction": "Jung -FightsAtUFFC(Jung))", "score": -1}
{"id": "folio_train_2488", "prediction": "Sadollah fought Musoke.", "score": -1}
{"id": "folio_train_2489", "prediction": "Nelson fought Story at UFCFightNight(Nelson,FightNight)", "score": -1}
{"id": "folio_train_2490", "prediction": "all x.(Drink(x) -> Edible(x))", "score": 0}
{"id": "folio_train_2491", "prediction": "all x.(Juice(x) -> Drink(x))", "score": 0}
{"id": "folio_train_2492", "prediction": "all x.(OrangeJuice(x) -> Juice(x))", "score": 0}
{"id": "folio_train_2493", "prediction": "all x.(Juice(x) -> (OrangeJuice(x) | AppleJuice(x)))", "score": 0}
{"id": "folio_train_2494", "prediction": "all x.(AppleJuice(x) -> Sweet(x))", "score": 0}
{"id": "folio_train_2495", "prediction": "all x.((Coke(x) & AppleJuice(x)) -> Drink(x))", "score": 0}
{"id": "folio_train_2496", "prediction": "all x.((Coke(x) & -AppleJuice(x)) -> -Edible(x))", "score": 0}
{"id": "folio_train_2497", "prediction": "all x.(Coke(x) -> OrangeJuice(x))", "score": 0}
{"id": "folio_train_2498", "prediction": "all x.(Coke(x) -> (Edible(x) & Sweet(x)))", "score": 0}
{"id": "folio_train_2499", "prediction": "all x.(Coke(x) -> (-Edible(x) & Sweet(x)))", "score": 0}
{"id": "folio_train_2500", "prediction": "all x.((FedericoGarciaLorca(x) & TalentedSpanishPoet(x) & SupportedPopularFront(x)) -> Talented(x))", "score": 0}
{"id": "folio_train_2501", "prediction": "all x y.((SpanishNationalist(x) & SupportsPopularFront(y)) -> Opposed(x,y))", "score": 0}
{"id": "folio_train_2502", "prediction": "all x.(TalentedPoet(x) -> Popular(x))", "score": 0}
{"id": "folio_train_2503", "prediction": "all x.((SpanishNationalist(x) & Opposed(x) & Popular(x)) -> Killed(x))", "score": 0}
{"id": "folio_train_2504", "prediction": "(SupportsPopularFront(Daniel) & -Popular(Daniel))", "score": 0}
{"id": "folio_train_2505", "prediction": "Daniel ne sabotaged(n) bySpanishNationalists(n))", "score": -1}
{"id": "folio_train_2506", "prediction": "Lorca was killed bySpanishNationalists.", "score": -1}
{"id": "folio_train_2507", "prediction": "all x.((Person(x) & (DrinksKombucha(x) | DrinksCokeCola(x) | DrinksPepsi(x))) -> DrinksKombuchaEveryDay(x))", "score": 0}
{"id": "folio_train_2508", "prediction": "all x.((Person(x) & DrinksCokeColaOrPepsiProductsEveryDay(x)) -> (ExtremelyBusyParents(x) & -HasTimeToPackLunch(x)))", "score": 0}
{"id": "folio_train_2509", "prediction": "all x.((DrinksCokeColaOrPepsiProductsEveryDay(x)) -> VisitsDentistFrequently(x))", "score": 0}
{"id": "folio_train_2510", "prediction": "all x.((Person(x) & GrownUpWithExtremelyBusyParents(x) & -HasTimeToPackLunch(x)) -> EraticAndDiverseEatingHabits(x))", "score": 0}
{"id": "folio_train_2511", "prediction": "all x.((People(x) & EratricEatingHabits(x) & DiverseEatingHabits(x)) -> (-ConsistentEverydayRoutines(x) & StickToSolidSchedule(x)))", "score": 0}
{"id": "folio_train_2512", "prediction": "(all x.(Franny(x) -> ((ExtremelyBusyParents(x) & -HasTimeToPackLunch(x) & ConsistentEverydayRules(x) & SticksToSchedule(x)) | (-BusyParents(x) & -HasTimeToPackLunch(x) & ConsistentEverydayRules(x) & SticksToSchedule(x))))", "score": -1}
{"id": "folio_train_2513", "prediction": "all x.(Franny(x) -> VisitsDentistFrequently(x))", "score": 0}
{"id": "folio_train_2514", "prediction": "all x.((Franny(x) & ((ExtremelyBusyParents(x) & -PackLunch(x) & DrinkKombucha(x)) | (-PackLunch(x) & DrinkKombucha(x))))) -> (-VisitsDentistFrequently(x) & -DrinksCocaCola(x) & -DrinksPepsiProducts(x))))", "score": -1}
{"id": "folio_train_2515", "prediction": "all x.((Franny(x) & (VisitsDentistFrequently(x) | DrinksKombuchaEveryDay(x))) -> (VisitsDentistFrequently(x) & DrinksCokeColaOrPepsiProductsEveryDay(x)))", "score": 0}
{"id": "folio_train_2516", "prediction": "all x.(SubscribesToAMCAList(x) -> CanWatchMoviesEveryWeek(x))", "score": 0}
{"id": "folio_train_2517", "prediction": "exists x.(Customer(x) & GoesToCinema(x))", "score": 0}
{"id": "folio_train_2518", "prediction": "all x.((Customer(x) & PrefersTVSeries(x)) -> -WatchesTVSeriesInCinemas(x))", "score": 0}
{"id": "folio_train_2519", "prediction": "James subscribes to AMCAList.", "score": -1}
{"id": "folio_train_2520", "prediction": "Peter prefersTVSeries(Peter)", "score": -1}
{"id": "folio_train_2521", "prediction": "all x.((James(x) & WatchesMovies(x,3)) -> -CanWatchMoviesWithoutAdditionalFees(x))", "score": 0}
{"id": "folio_train_2522", "prediction": "all x.((Peter(x) & -WatchesTVSeriesInCinemas(x)) -> -WatchesTVSeriesInCinemas(x))", "score": 0}
{"id": "folio_train_2523", "prediction": "all x.(BulbophyllumAttenuatum(x) -> InGenusBulbophyllum(x))", "score": 0}
{"id": "folio_train_2524", "prediction": "all x.(Bulbophyllum(x) -> Orchid(x))", "score": 0}
{"id": "folio_train_2525", "prediction": "all x.(BulbophyllumAttenuatum(x) -> -Orchid(x))", "score": 0}
{"id": "folio_train_2526", "prediction": "all x.((Region(x) & Central(x) & Northwestern(x) & Southern(x) & NorthCaucassian(x) & Volga(x) & Ural(x) & Siberian(x) & FarEastern(x)) -> Federal(x))", "score": 0}
{"id": "folio_train_2527", "prediction": "all x.(CentralFederalDistrict(x) -> LargestPopulation(x))", "score": 0}
{"id": "folio_train_2528", "prediction": "all x.(Moscow(x) -> AdministrativeCenter(x))", "score": 0}
{"id": "folio_train_2529", "prediction": "(AdministrativeCenter(Yekaterinburg) & UralFederalDistrict(Yekaterinburg))", "score": 0}
{"id": "folio_train_2530", "prediction": "Vladivostok (AdministrativeCenter(Vladivostok) & FarEasternFederalDistrict(Vladivostok))", "score": -1}
{"id": "folio_train_2531", "prediction": "all x.(FarEastFederalDistrict(x) -> LargestArea(x))", "score": 0}
{"id": "folio_train_2532", "prediction": "exists x.(FederalDistrict(x) & EstablishedIn(x,2000))", "score": 0}
{"id": "folio_train_2533", "prediction": "all x.((AdministrativeCenter(x) & FederalDistrict(x) & LargestArea(x)) -> Vladivostok(x))", "score": 0}
{"id": "folio_train_2534", "prediction": "all x.(Moscow(x) -> (AdministrativeCenter(x) & FederalDistrict(x) & LargestPopulation(x)))", "score": 0}
{"id": "folio_train_2535", "prediction": "(NordwesternFederalDistrict(n) & EstablishedIn2000(n))", "score": 0}
{"id": "folio_train_2536", "prediction": "all x.(Cancer(x) -> MalignantTumor(x))", "score": 0}
{"id": "folio_train_2537", "prediction": "-exists x.(MalignantTumor(x) & TreatableAtHome(x))", "score": 0}
{"id": "folio_train_2538", "prediction": "all x.(ColoredCancer(x) -> Cancer(x))", "score": 0}
{"id": "folio_train_2539", "prediction": "all x.(Cold(x) -> TreatableAtHome(x))", "score": 0}
{"id": "folio_train_2540", "prediction": "all x.(BreastCancer(x) -> ((NegativeCold(x) | MalignantTumor(x)) & -(Cold(x) & Malignant(x)))))", "score": -1}
{"id": "folio_train_2541", "prediction": "all x.(BreastCancer(x) -> CanBeTreatedAtHome(x))", "score": 0}
{"id": "folio_train_2542", "prediction": "all x.(BreastCancer(x) -> ColorectalCancer(x))", "score": 0}
{"id": "folio_train_2543", "prediction": "all x.(BreastCancer(x) -> -ColorectalCancer(x))", "score": 0}
{"id": "folio_train_2544", "prediction": "all x.(BreastCancer(x) -> (ColorectalCancer(x) | MalignantTumor(x)))", "score": 0}
{"id": "folio_train_2545", "prediction": "all x.(BreastCancer(x) -> (ColorectalCancer(x) & Cancer(x)))", "score": 0}
{"id": "folio_train_2546", "prediction": "all x.((BreastCancer(x) & -ColorectalCancer(x)) -> MalignantTumor(x))", "score": 0}
{"id": "folio_train_2547", "prediction": "all x.((IsOutsideControl(x) & -IsOutsideControl(x)) -> -IsControl(x))", "score": 0}
{"id": "folio_train_2548", "prediction": "all x.(Traffic(x) -> OutsideOfControl(x))", "score": 0}
{"id": "folio_train_2549", "prediction": "all x.(Traffic(x) -> -Worry(x))", "score": 0}
{"id": "folio_train_2550", "prediction": "(ItalianSurname(Rossi) & ItalianSurname(Rossi))", "score": 0}
{"id": "folio_train_2551", "prediction": "all x.(AlbaRoversi(x) -> UsesRoversiAsSurname(x))", "score": 0}
{"id": "folio_train_2552", "prediction": "all x.(Rossi(x) -> UsesRossiAsSurname(x))", "score": 0}
{"id": "folio_train_2553", "prediction": "all x.(Rogersi(x) -> UsesRogersiAsSurname(x))", "score": 0}
{"id": "folio_train_2554", "prediction": "Paolo Roversi is a photographer.", "score": -1}
{"id": "folio_train_2555", "prediction": "all x.(Photographer(x) -> (Professional(x) | Amateur(x)))", "score": 0}
{"id": "folio_train_2556", "prediction": "all x.(AlbaRoversi(x) -> UsesItalianSurname(x))", "score": 0}
{"id": "folio_train_2557", "prediction": "-exists x.(Photographer(x) & UsesItalianSurname(x))", "score": 0}
{"id": "folio_train_2558", "prediction": "Paolo is amateurPhotographer.", "score": -1}
{"id": "folio_train_2559", "prediction": "(BritishIraqiArchitect(ZahaHadid) & BritishIraqiArtist(ZahaHadid) & Designer(ZahaHadid))", "score": 0}
{"id": "folio_train_2560", "prediction": "Zaha Hadid was born on 31October50(ZahaHadid) & BornInBaghdad(ZahaHadid)", "score": -1}
{"id": "folio_train_2561", "prediction": "Hadid was visitingProfessorOfArchitecturalDesign(Hadid,YaleSchoolOfArchitecture)", "score": -1}
{"id": "folio_train_2562", "prediction": "(AspiringArchitectureStudent(Max) & PlansToApplyToYaleSchoolOfArchitecture(Max))", "score": 0}
{"id": "folio_train_2563", "prediction": "(BirthInIraq(Hadid) & UKCitizen(Hadid))", "score": 0}
{"id": "folio_train_2564", "prediction": "Hadid did some work in interior design.", "score": -1}
{"id": "folio_train_2565", "prediction": "Hadid was born in 1982.", "score": -1}
{"id": "folio_train_2566", "prediction": "(Awesome(Max,ZahaHadid))", "score": 0}
{"id": "folio_train_2567", "prediction": "all x.((InvasiveNeuroimagingTechnique(x) | NoninvasiveNeuroimagingTechnique(x)) -> (InvasiveNeuroimagingTechnique(x) | NoninvasiveNeuroimagingTechnique(x)))", "score": 0}
{"id": "folio_train_2568", "prediction": "all x.(NoninvasiveNeuroimagingTechnique(x) -> ProvidesSpatialResolutionOfBrains(x))", "score": 0}
{"id": "folio_train_2569", "prediction": "all x.((Technique(x) & ProvidesSpatialResolutionOfBrains(x)) -> MeasurementOfBrainActivity(x))", "score": 0}
{"id": "folio_train_2570", "prediction": "all x.(MeasurementsOfBrainActivity(x) -> UsedByNeurologyResearchers(x))", "score": 0}
{"id": "folio_train_2571", "prediction": "all x.(FMRI(x) -> (MeasuresBrainActivity(x) | NoninvasiveNeuroimagingTechnique(x)))", "score": 0}
{"id": "folio_train_2572", "prediction": "all x.(FMRI(x) -> ProvidesSpatialResolutionOfBrains(x))", "score": 0}
{"id": "folio_train_2573", "prediction": "all x.(FMRI(x) -> (InvasiveNeuroimagingTechnique(x) & UsedByNeurologyResearchers(x)))", "score": 0}
{"id": "folio_train_2574", "prediction": "all x.(FMRI(x) -> (InvasiveNeuroimagingTechnique(x) | UsedByNeurologyResearchers(x)))", "score": 0}
{"id": "folio_train_2575", "prediction": "all x.((FMRI(x) & -InvasiveNeuroimagingTechnique(x) & UsedByNeurologyResearchers(x)) -> (-NoninvasiveNeuroimagingTechnique(x) & -SpatialResolutionOfBrains(x)))", "score": 0}
{"id": "folio_train_2576", "prediction": "all x y.((Conference(x) & PresentWork(x,y)) | ProvideTutorial(x,y))", "score": 0}
{"id": "folio_train_2577", "prediction": "all x.((PresentsWork(x) & AtConference(x)) -> AttendsInPerson(x))", "score": 0}
{"id": "folio_train_2578", "prediction": "all x.((ProvidesTutorial(x) & Conference(x)) -> InvitedToJoinClub(x))", "score": 0}
{"id": "folio_train_2579", "prediction": "all x.((AttendsConferenceInPerson(x) & ProvidesSouvenirs(x)) -> Provided(x))", "score": 0}
{"id": "folio_train_2580", "prediction": "all x.((InvitedToJoinClub(x) & ProvidedWithDeliciousMeals(x)) -> JoinClub(x))", "score": 0}
{"id": "folio_train_2581", "prediction": "all x.((ProvenedWithDeliciousMeals(x) & HappyToCommunicate(x)) -> Dinner(x))", "score": 0}
{"id": "folio_train_2582", "prediction": "all x.((ProvenedWithDeliciousMeals(x) & InvitedToTakePhotoWithAudience(x)) -> TakesPhotoWithAudience(x))", "score": 0}
{"id": "folio_train_2583", "prediction": "(-AttendsInPerson(James) & -ProvidesSouvenirs(James))", "score": 0}
{"id": "folio_train_2584", "prediction": "all x.(James(x) -> ProvidedWithSouvenirs(x))", "score": 0}
{"id": "folio_train_2585", "prediction": "James is not provided with Souvenirs.", "score": -1}
{"id": "folio_train_2586", "prediction": "all x y.((James(x) & Audience(y)) -> (InvitedToTakePhoto(x,y) & HappyToCommunicate(x,y)))", "score": 0}
{"id": "folio_train_2587", "prediction": "all x y.((James(x) & Audience(y)) -> (InvitedToTakePhoto(x,y) | HappyToCommunicate(x,y)))", "score": 0}
{"id": "folio_train_2588", "prediction": "all x y.((James(x) & Audience(y)) -> (InvitedToTakePhoto(x,y) | HappyToCommunicate(x,y)))", "score": 0}
{"id": "folio_train_2589", "prediction": "all x.((USS Salem(x) & HeavyCruiser(x) & BuiltForNatal(x)) -> BuiltForNatal(x))", "score": -1}
{"id": "folio_train_2590", "prediction": "all x.((HeavyCruiser(x) & EntersService(x)) -> USSSalem(x))", "score": 0}
{"id": "folio_train_2591", "prediction": "all x.((USS Salem(x) & MuseumShip(x)) -> Ship(x))", "score": -1}
{"id": "folio_train_2592", "prediction": "all x.(MuseumShip(x) -> OpenToPublic(x))", "score": 0}
{"id": "folio_train_2593", "prediction": "(ServedInAtlantic(USS Salem) & ServedInMediterranean(USS Salem))", "score": -1}
{"id": "folio_train_2594", "prediction": "all x.(USSSalem(x) -> OpenToPublic(x))", "score": 0}
{"id": "folio_train_2595", "prediction": "exists x.(MuseumShip(x) & OpenToPublic(x) & ServesInMediterranean(x))", "score": 0}
{"id": "folio_train_2596", "prediction": "-LongestHorseCruiserToEnterService(USSSalem)", "score": 0}
{"id": "folio_train_2597", "prediction": "all x.(TSLeda(x) -> (GoodPassengerVessel(x) & GoodCargoVessel(x)))", "score": 0}
{"id": "folio_train_2598", "prediction": "TS Leda was the first Norweigian vessel that was builtWithStabilizers.", "score": -1}
{"id": "folio_train_2599", "prediction": "all x.(Stabilizer(x) -> (MechanicalDevice(x) & OnlyOnShipsWithPowerfulSteamTurbineEngines(x)))", "score": 0}
{"id": "folio_train_2600", "prediction": "all x.((Ship(x) & Quiet(x) & GoodAtSea(x)) -> GoodPassengerAndCargoVessel(x))", "score": 0}
{"id": "folio_train_2601", "prediction": "exists x.(Ship(x) & Quiet(x) & GoodAtSea(x) & HasPowerfulSteamTurbineEngines(x))", "score": 0}
{"id": "folio_train_2602", "prediction": "all x.(TSLeda(x) -> (Quiet(x) & GoodAtSea(x)))", "score": 0}
{"id": "folio_train_2603", "prediction": "exists x.(Ship(x) & ArFeQuiet(x) & GoodAtSea(x) & HasPowerfulSteamTurbineEngines(x))", "score": 0}
{"id": "folio_train_2604", "prediction": "all x.(TSLeda(x) -> PowerfulSteamTurbineEngines(x))", "score": 0}
{"id": "folio_train_2605", "prediction": "TS Leda - NorweigianVessel(TSLeda))", "score": -1}
{"id": "folio_train_2606", "prediction": "Rosa was born in Santiago.", "score": -1}
{"id": "folio_train_2607", "prediction": "Santiago (Capital(x) & LargestCity(x))", "score": -1}
{"id": "folio_train_2608", "prediction": "(DaughterOfCatalanBuildingContractor(Rosa) & DaughterOfJose(Rosa))", "score": 0}
{"id": "folio_train_2609", "prediction": "all x.(Jose(x) -> ChileanWife(x,Carmen))", "score": 0}
{"id": "folio_train_2610", "prediction": "all x y.((Daughter(x) & Person(y)) -> DaughterOf(x,y))", "score": 0}
{"id": "folio_train_2611", "prediction": "all x y.((BuildingConstructionConsultant(x) & ConstructionSite(y)) -> OverseesDayToDay(x,y))", "score": 0}
{"id": "folio_train_2612", "prediction": "Rosa was born in the largest city of Chile.", "score": -1}
{"id": "folio_train_2613", "prediction": "-(RosasParent(Rosa) & Chilean(Rosa))", "score": 0}
{"id": "folio_train_2614", "prediction": "all x.(Rosa(x) -> (DaughterOf(x,y) & ResponsibleForConstructionSite(y)))", "score": 0}
{"id": "folio_train_2615", "prediction": "Tyga is rapper.", "score": -1}
{"id": "folio_train_2616", "prediction": "all x.(Rapper(x) -> ReleasesRapAlbums(x))", "score": 0}
{"id": "folio_train_2617", "prediction": "Tyga released WellDone3(x)", "score": -1}
{"id": "folio_train_2618", "prediction": "all x.(Rapper(x) -> -OperaSinger(x))", "score": 0}
{"id": "folio_train_2619", "prediction": "WellDone3 is a RapAlbum(x)", "score": -1}
{"id": "folio_train_2620", "prediction": "Tyga is an opera singer.", "score": -1}
{"id": "folio_train_2621", "prediction": "WellDone3 is WorthListening(x)", "score": -1}
{"id": "folio_train_2622", "prediction": "DeborahWallace (ScottishBirthActress(Scottish) & Playwright(Scottish) & Producer(Scottish))", "score": -1}
{"id": "folio_train_2623", "prediction": "Psyche is based on the life of James Miranda Barry.", "score": -1}
{"id": "folio_train_2624", "prediction": "(Play(Homesick) | Play(Psyche) | Play(TheVoice)) & DeborahWallace(DeborahWallace))", "score": -1}
{"id": "folio_train_2625", "prediction": "DeborahWallaceCoproducedGasland.", "score": -1}
{"id": "folio_train_2626", "prediction": "all x.(Gasland(x) -> CoproducedByHomesick(x))", "score": 0}
{"id": "folio_train_2627", "prediction": "exists x.(Play(x) & -BasedOnLifeOf(x,JimmyMariaBarry))", "score": 0}
{"id": "folio_train_2628", "prediction": "(Play(Gasland) & Play(Gasland))", "score": 0}
{"id": "folio_train_2629", "prediction": "all x.((Animal(x) & NeedsLargeTerritory(x)) -> TravelsFar(x))", "score": 0}
{"id": "folio_train_2630", "prediction": "all x.((EatsLot(x) & LargeTerritory(x)) -> Needs(x))", "score": 0}
{"id": "folio_train_2631", "prediction": "all x.((BigAnimal(x) & EatsLot(x)) -> EatsLot(x))", "score": 0}
{"id": "folio_train_2632", "prediction": "all x.(Bear(x) -> BigAnimal(x))", "score": 0}
{"id": "folio_train_2633", "prediction": "Larry is bigAnimal(Larry)", "score": -1}
{"id": "folio_train_2634", "prediction": "Larry is Bear(Larry)", "score": -1}
{"id": "folio_train_2635", "prediction": "Larry & -(Bear(Larry) | TravelsFar(Larry)))", "score": -1}
{"id": "folio_train_2636", "prediction": "all x.((Larry(x) & (TravelsFar(x) | NeedsLargeTerritory(x))) -> Bear(x))", "score": 0}
{"id": "folio_train_2637", "prediction": "-exists x.(Criminal(x) & Kind(x))", "score": 0}
{"id": "folio_train_2638", "prediction": "all x.(BreaksLaw(x) -> Criminal(x))", "score": 0}
{"id": "folio_train_2639", "prediction": "all x.(Person(x) -> (Kind(x) | Evil(x)))", "score": 0}
{"id": "folio_train_2640", "prediction": "all x.(Evil(x) -> Ugly(x))", "score": 0}
{"id": "folio_train_2641", "prediction": "all x.((Evil(x) & ColdBloode(x)) -> ColdBloode(x))", "score": 0}
{"id": "folio_train_2642", "prediction": "all x.((Garry(x) & (Evil(x) | Ugly(x))) | -Evil(x) | -Ugly(x)))", "score": -1}
{"id": "folio_train_2643", "prediction": "Garry isUgly(Garry)", "score": -1}
{"id": "folio_train_2644", "prediction": "all x.(Garry(x) -> (ColdBlooded(x) & BreaksLaw(x)))", "score": 0}
{"id": "folio_train_2645", "prediction": "all x.((Garry(x) & (Evil(x) | BreaksLaw(x))) -> -(Criminal(x) & BreakingLaw(x))))", "score": -1}
{"id": "folio_train_2646", "prediction": "all x.(PhoneixMusic(x) -> IndiePop(x))", "score": 0}
{"id": "folio_train_2647", "prediction": "(FrenchBand(Pheonix) & From(Pheonix(Pheonix))", "score": -1}
{"id": "folio_train_2648", "prediction": "all x.(FrenchBand(x) -> (WritesSongsInFrench(x) | WritesSongsInEnglish(x)))", "score": 0}
{"id": "folio_train_2649", "prediction": "(exists x.(IndiePop(x) & PopRock(x) & SynthPop(x)))", "score": 0}
{"id": "folio_train_2650", "prediction": "Phoneix - exists x.(Song(x) & -French(x))", "score": -1}
{"id": "folio_train_2651", "prediction": "all x.(Phoenix(x) -> MakesPopRockMusic(x))", "score": 0}
{"id": "folio_train_2652", "prediction": "all x.(Phoenix(x) -> HasSongsInFrench(x))", "score": 0}
