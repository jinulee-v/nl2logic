{"id": "entailmentbank_train_0", "nl": "leo is a kind of constellation.", "fol": "", "prediction": ["all x.(Leo(x) -> Constellation(x))"]}
{"id": "entailmentbank_train_1", "nl": "a constellation contains stars.", "fol": "", "prediction": ["all x.(Constellation(x) -> ContainsStars(x))"]}
{"id": "entailmentbank_train_2", "nl": "leo is a constellation containing stars.", "fol": "", "prediction": ["all x.(Leo(x) -> Constellation(x))"]}
{"id": "entailmentbank_train_3", "nl": "the earth revolving around the sun causes stars to appear in different areas in the sky at different times of year.", "fol": "", "prediction": ["all x y z.((Earth(x) & Sun(y) & Earth(z) & RevolvingAround(x,y)) -> CausesStarsAppearsInSkyAreasAtDifferentTimesOfYear(x,y,z))"]}
{"id": "entailmentbank_train_4", "nl": "the earth revolving around the sun causes leo to appear in different areas in the sky at different times of year.", "fol": "", "prediction": ["all x y.((Earth(x) & Sun(y) & RevolvingAround(x,y)) -> CausesLeoAppearsInSkyAreas(x,y))"]}
{"id": "entailmentbank_train_5", "nl": "a star is a kind of celestial object / celestial body.", "fol": "", "prediction": ["all x.(Star(x) -> (CelestialObject(x) & CelestialBody(x)))"]}
{"id": "entailmentbank_train_6", "nl": "apparent motion is when an object appears to move relative to another object's position.", "fol": "", "prediction": ["all x y.((Object(x) & Position(y)) -> AppearsToMoveRelativeTo(x,y))"]}
{"id": "entailmentbank_train_7", "nl": "earth is a kind of celestial object.", "fol": "", "prediction": ["all x.(Earth(x) -> CelestialObject(x))"]}
{"id": "entailmentbank_train_8", "nl": "apparent motion of stars is when stars appear to move relative to earth's position.", "fol": "", "prediction": ["all x.((Star(x) & AppearsToMoveRelativeToEarth(x)) -> ApparentMotion(x))"]}
{"id": "entailmentbank_train_9", "nl": "the earth rotating on its axis causes stars to appear to move across the sky at night.", "fol": "", "prediction": ["all x y.((Earth(x) & Earth(y) & RotatingOnAxis(x,y)) -> CausesStarsToAppearAtNight(x,y))"]}
{"id": "entailmentbank_train_10", "nl": "the earth rotating on its axis causes apparent motion of stars.", "fol": "", "prediction": ["all x.((Earth(x) & RotatingOnAxis(x)) -> CausesAppearanceMotionOfStars(x))"]}
{"id": "entailmentbank_train_11", "nl": "stars appear to move relative to the horizon during the night.", "fol": "", "prediction": ["all x y.((Star(x) & Horizon(y)) -> MovesRelativeTo(x,y))"]}
{"id": "entailmentbank_train_12", "nl": "the earth rotating on its axis causes stars to move relative to the horizon during the night.", "fol": "", "prediction": ["all x y.((Earth(x) & Earth(y) & RotatingOnAxis(x,y)) -> CausesStarsToMoveRelativeToHornor(x,y))"]}
{"id": "entailmentbank_train_13", "nl": "diurnal motion is when objects in the sky appear to move due to earth's rotation on its axis.", "fol": "", "prediction": ["all x.(DiurnalMotion(x) -> (ObjectsInSkyAppearToMoveDueToEarthRotation(x)))"]}
{"id": "entailmentbank_train_14", "nl": "stars apearing to move relative to the horizon during the night is an example of diurnal motion.", "fol": "", "prediction": ["all x.((Star(x) & ApearedToMoveRelativeToHornith(x)) -> DiurnalMotion(x))"]}
{"id": "entailmentbank_train_15", "nl": "the earth rotating on its axis causes stars / the moon to appear to move across the sky at night.", "fol": "", "prediction": ["all x y.((Earth(x) & Earth(y) & RotatingOnAxis(x,y)) -> (CausesStars(x) & CausesMoon(x) & AppearsToMoveAcrossSky(x)))"]}
{"id": "entailmentbank_train_16", "nl": "the earth rotating on its axis causes stars to appear to move relative to the horizon during the night.", "fol": "", "prediction": ["all x y.((Earth(x) & Earth(y) & RotatingOnAxis(x,y)) -> AppearsToMoveRelativeToHornor(x,y))"]}
{"id": "entailmentbank_train_17", "nl": "a source of something produces that something.", "fol": "", "prediction": ["all x y.((Source(x) & Something(y)) -> Produces(x,y))"]}
{"id": "entailmentbank_train_18", "nl": "a star produces light.", "fol": "", "prediction": ["all x.(Star(x) -> ProducesLight(x))"]}
{"id": "entailmentbank_train_19", "nl": "stars are a source of light.", "fol": "", "prediction": ["all x.(Star(x) -> SourceOfLight(x))"]}
{"id": "entailmentbank_train_20", "nl": "as a source of light becomes closer, the light will appear brighter.", "fol": "", "prediction": ["all x.((SourceOfLight(x) & Closer(x)) -> LightAppearsBrighter(x))"]}
{"id": "entailmentbank_train_21", "nl": "as the stars become closer, the light of the stars will appear brighter.", "fol": "", "prediction": ["all x.((Star(x) & Closer(x)) -> LightAppearsBrighter(x))"]}
{"id": "entailmentbank_train_22", "nl": "the sun is the star that is closest to earth.", "fol": "", "prediction": ["all x.(Sun(x) -> ClosestToEarth(x))"]}
{"id": "entailmentbank_train_23", "nl": "the sun will be the star that appears the brightest to the earth.", "fol": "", "prediction": ["all x.(Sun(x) -> AppearsBrightestToEarth(x))"]}
{"id": "entailmentbank_train_24", "nl": "as the stars becomes closer, the light of the stars will appear brighter.", "fol": "", "prediction": ["all x.((Stars(x) & Closer(x)) -> LightAppearsBrighter(x))"]}
{"id": "entailmentbank_train_25", "nl": "the stars in the night sky are very far away from the earth.", "fol": "", "prediction": ["all x.(StarsInNightSky(x) -> FarAwayFromEarth(x))"]}
{"id": "entailmentbank_train_26", "nl": "the sun is closer to earth than other stars to earth.", "fol": "", "prediction": ["all x y.((Sun(x) & Earth(y)) -> CloserTo(x,y))"]}
{"id": "entailmentbank_train_27", "nl": "the sun is brighter than other stars because the sun is closer to earth than other stars.", "fol": "", "prediction": ["all x y.((Sun(x) & Star(y)) -> (Brighter(x,y) & CloserToEarth(x,y)))"]}
{"id": "entailmentbank_train_28", "nl": "more light gets reflected on highly reflective things.", "fol": "", "prediction": ["all x.((Light(x) & ReflectedOnHighlyReflectiveThings(x)) -> MoreLight(x))"]}
{"id": "entailmentbank_train_29", "nl": "venus is covered in highly reflective clouds.", "fol": "", "prediction": ["all x.(Venus(x) -> CoveredInHighlyReflectiveClouds(x))"]}
{"id": "entailmentbank_train_30", "nl": "venus reflects more sunlight toward earth than other planets.", "fol": "", "prediction": ["all x y.((Venus(x) & Planet(y)) -> ReflectsMoreSunlightTowardsEarth(x,y))"]}
{"id": "entailmentbank_train_31", "nl": "as the light reflected off of an object increases, the object will appear to be brighter.", "fol": "", "prediction": ["all x y.((Object(x) & LightReflectedOff(x,y)) -> AppearsBrighter(x))"]}
{"id": "entailmentbank_train_32", "nl": "venus reflecting more sunlight than other planets make it brighter than other planets.", "fol": "", "prediction": ["all x y.((Venus(x) & Planet(y)) -> ReflectsMoreSunlight(x,y))"]}
{"id": "entailmentbank_train_33", "nl": "june is during the summer in the northern hemisphere.", "fol": "", "prediction": ["all x.(June(x) -> SummerInNorthernHemisphere(x))"]}
{"id": "entailmentbank_train_34", "nl": "new york state is located in the northern hemisphere.", "fol": "", "prediction": ["all x.(NewYorkState(x) -> LocatedInNorthernHemisphere(x))"]}
{"id": "entailmentbank_train_35", "nl": "june is during the summer for new york state.", "fol": "", "prediction": ["all x.(June(x) -> SummerForNewYorkState(x))"]}
{"id": "entailmentbank_train_36", "nl": "the amount of daylight is greatest in the summer.", "fol": "", "prediction": ["all x.((Summer(x) & -Summer(x)) -> -Summer(x))"]}
{"id": "entailmentbank_train_37", "nl": "new york state has the greatest sunlight during june.", "fol": "", "prediction": ["all x.((NewYorkState(x) & Sunlight(y)) -> GreatestDuringJune(x,y))"]}
{"id": "entailmentbank_train_38", "nl": "earth's tilt on its rotating axis causes seasons to change / to occur.", "fol": "", "prediction": ["all x.((EarthsTiltOnRotatingAxis(x) & CausesSeasonsToChange(x)) -> CausesSeasonsToOccur(x))"]}
{"id": "entailmentbank_train_39", "nl": "when the season changes, the amount of daylight will change.", "fol": "", "prediction": ["all x.((SeasonChange(x) & SeasonChange(x)) -> ChangesAmountOfDarkness(x))"]}
{"id": "entailmentbank_train_40", "nl": "earth's tilt on its rotating axis causes the amout of daylight to change.", "fol": "", "prediction": ["all x.((EarthTiltOnRotatingAxis(x) & CausesAmoutChange(x)) -> Changes(x))"]}
{"id": "entailmentbank_train_41", "nl": "united states is located in the northern hemisphere.", "fol": "", "prediction": ["all x.(UnitedStates(x) -> LocatedInNorthernHemisphere(x))"]}
{"id": "entailmentbank_train_42", "nl": "alaska is a state located in the united states of america.", "fol": "", "prediction": ["all x.(Alaska(x) -> (State(x) & UnitedStatesOfAmerica(x)))"]}
{"id": "entailmentbank_train_43", "nl": "alaska is located in the northern hemisphere.", "fol": "", "prediction": ["all x.(Alaska(x) -> LocatedInNorthernHemisphere(x))"]}
{"id": "entailmentbank_train_44", "nl": "alaska is in winter season.", "fol": "", "prediction": ["all x.(Alaska(x) -> WinterSeason(x))"]}
{"id": "entailmentbank_train_45", "nl": "winter is when a hemisphere is tilted away from the sun.", "fol": "", "prediction": ["all x.(Winter(x) -> (HemisphereTiltedAwayFromSun(x)))"]}
{"id": "entailmentbank_train_46", "nl": "the northern hemisphere is tilted away from the sun when alaska is in winter.", "fol": "", "prediction": ["all x.((NorthernHemisphere(x) & Winter(x)) -> TiltedAwayFromSun(x))"]}
{"id": "entailmentbank_train_47", "nl": "when a hemisphere is tilted away from the sun, that hemisphere receives less direct sunlight.", "fol": "", "prediction": ["all x y.((Hemisphere(x) & TiltedAwayFromSun(x)) -> ReceivesLessDirectSunlight(x,y))"]}
{"id": "entailmentbank_train_48", "nl": "a hemisphere tilting away from the sun causes the hemisphere to receive less direct sunlight.", "fol": "", "prediction": ["all x y.((Hemisphere(x) & Sun(y) & TiltingAway(x,y)) -> ReceivesLessDirectSunlight(x,y))"]}
{"id": "entailmentbank_train_49", "nl": "the northern hemisphere being tilted away from the sun causes alaska to receive less direct sunlight.", "fol": "", "prediction": ["all x.(TiltedAwayFromSun(x) -> AlaskaReceivesLessDirectSunlight(x))"]}
{"id": "entailmentbank_train_50", "nl": "earth is a planet that rotates on its tilted axis.", "fol": "", "prediction": ["all x.(Earth(x) -> (Planet(x) & RotatesOnTiltedAxis(x)))"]}
{"id": "entailmentbank_train_51", "nl": "a planet rotating causes cycles of day and night on that planet.", "fol": "", "prediction": ["all x y.((Planet(x) & Rotating(x)) -> CausesCyclesOfDayAndNight(x,y))"]}
{"id": "entailmentbank_train_52", "nl": "earth rotating on its axis causes cycles of day and night on earth.", "fol": "", "prediction": ["all x.((Earth(x) & RotatingOnAxis(x)) -> (CausesCycles(x,Day) & CausesCycles(x,Night)))"]}
{"id": "entailmentbank_train_53", "nl": "a complete rotation of the earth on earth's axis / itself takes 1 / one day.", "fol": "", "prediction": ["all x y.((Earth(x) & EarthAxis(y) & CompleteRotation(x,y)) -> TakesOneDay(x,y))"]}
{"id": "entailmentbank_train_54", "nl": "1 day is equal to 24 hours.", "fol": "", "prediction": ["all x.(Day(x) -> 24Hours(x))"]}
{"id": "entailmentbank_train_55", "nl": "a complete rotation of the earth takes 24 hours.", "fol": "", "prediction": ["all x.((Earth(x) & CompleteRotation(x)) -> Takes24Hours(x))"]}
{"id": "entailmentbank_train_56", "nl": "new york state is a state located in the united states of america.", "fol": "", "prediction": ["all x.(NewYorkState(x) -> (LocatedInUnitedStatesOfAmerica(x) & LocatedIn(x,UnitedStatesOfAmerica)))"]}
{"id": "entailmentbank_train_57", "nl": "when the season changes, the amount of daylight in new york state will change.", "fol": "", "prediction": ["all x y.((SeasonChange(x) & Season(y)) -> ChangesAmountOfDarkness(x,y))"]}
{"id": "entailmentbank_train_58", "nl": "the south pole is tilted toward the sun.", "fol": "", "prediction": ["all x.(SouthPole(x) -> TiltedTowardsSun(x))"]}
{"id": "entailmentbank_train_59", "nl": "summer is when a hemisphere is tilted towards the sun.", "fol": "", "prediction": ["all x.(Summer(x) -> TiltedTowardsSun(x))"]}
{"id": "entailmentbank_train_60", "nl": "it is summer in south pole.", "fol": "", "prediction": ["all x.(Summer(x) -> SouthPole(x))"]}
{"id": "entailmentbank_train_61", "nl": "the south pole is located in the southern hemisphere.", "fol": "", "prediction": ["all x.(SouthPole(x) -> LocatedInSouthernHemisphere(x))"]}
{"id": "entailmentbank_train_62", "nl": "it is summer in southern hemisphere.", "fol": "", "prediction": ["all x.(Summer(x) -> SouthernHemisphere(x))"]}
{"id": "entailmentbank_train_63", "nl": "the winter in the northern hemisphere is during the summer in the southern hemisphere.", "fol": "", "prediction": ["all x y.((Winter(x) & NorthernHemisphere(y)) -> Summer(x,y))"]}
{"id": "entailmentbank_train_64", "nl": "it is winter in the northern hemisphere.", "fol": "", "prediction": ["all x.((NorthernHemisphere(x) & Winter(x)) -> Winter(x))"]}
{"id": "entailmentbank_train_65", "nl": "florida is a state located in the united states of america.", "fol": "", "prediction": ["all x.(Florida(x) -> (State(x) & UnitedStatesOfAmerica(x)))"]}
{"id": "entailmentbank_train_66", "nl": "florida is located in the northern hemisphere.", "fol": "", "prediction": ["all x.(Florida(x) -> LocatedInNorthernHemisphere(x))"]}
{"id": "entailmentbank_train_67", "nl": "it is winter in florida.", "fol": "", "prediction": ["all x.(Winter(x) -> InFlorida(x))"]}
{"id": "entailmentbank_train_68", "nl": "a complete revolution of earth around the sun takes an earth year.", "fol": "", "prediction": ["all x y.((Revolution(x) & Earth(y) & Sun(z)) -> TakesEarthYear(x,y,z))"]}
{"id": "entailmentbank_train_69", "nl": "1 year is equal to 365 days.", "fol": "", "prediction": ["all x.(Year(x) -> Days(x,365))"]}
{"id": "entailmentbank_train_70", "nl": "a complete revolution of earth around the sun takes 365 days.", "fol": "", "prediction": ["all x.((RevolutionOfEarth(x) & Sun(x)) -> Takes365Days(x))"]}
{"id": "entailmentbank_train_71", "nl": "the earth rotating on its tilted axis causes the cycles of day and night on earth.", "fol": "", "prediction": ["all x y.((Earth(x) & TiltedAxis(y)) -> CausesCyclesOfDayAndNight(x,y))"]}
{"id": "entailmentbank_train_72", "nl": "the cycles of day and night is when the sun rises during the day and the sun sets at night.", "fol": "", "prediction": ["all x y.((Cycle(x) & Sun(y) & RisesDuringDay(y,x) & SetsAtNight(y,x)) -> Cycle(x,y))"]}
{"id": "entailmentbank_train_73", "nl": "the earth rotating on its tilted axis causes the sun to set.", "fol": "", "prediction": ["all x y.((Earth(x) & Earth(y) & TiltedAxis(x,y)) -> SunSet(x))"]}
{"id": "entailmentbank_train_74", "nl": "neptune is a kind of planet in the solar system.", "fol": "", "prediction": ["all x.(Neptune(x) -> PlanetInSolarSystem(x))"]}
{"id": "entailmentbank_train_75", "nl": "planets in the solar system orbit the sun.", "fol": "", "prediction": ["all x.((Planet(x) & SolarSystem(x)) -> OrbitsSun(x))"]}
{"id": "entailmentbank_train_76", "nl": "neptune orbits the sun in the solar system.", "fol": "", "prediction": ["all x y.((Neptune(x) & Sun(y)) -> OrbitsInSolarSystem(x,y))"]}
{"id": "entailmentbank_train_77", "nl": "furthest / farthest means greatest / most / highest in distance.", "fol": "", "prediction": ["all x.((Furthest(x) & Farthest(x)) -> (Greatest(x) & Most(x) & Highest(x)))"]}
{"id": "entailmentbank_train_78", "nl": "neptune is the planet that is furthest to the sun in the solar system.", "fol": "", "prediction": ["all x.(Neptune(x) -> FurthestToSun(x))"]}
{"id": "entailmentbank_train_79", "nl": "the distance between neptune and the sun it orbits is the greatest in the solar system.", "fol": "", "prediction": ["all x y.((Neptune(x) & Sun(y)) -> GreatestDistanceInSolarSystem(x,y))"]}
{"id": "entailmentbank_train_80", "nl": "as the distance of a planet from the star it orbits increases, the length of a planetary year on that planet will increase.", "fol": "", "prediction": ["all x y.((Planet(x) & Star(y) & IncreasesDistance(x,y)) -> IncreasesLengthOfPlanetaryYear(x,y))"]}
{"id": "entailmentbank_train_81", "nl": "neptune has the longest solar year / planetary year in the solar system.", "fol": "", "prediction": ["all x.(Neptune(x) -> (LongestSolarYear(x) & LongestPlanetaryYear(x)))"]}
{"id": "entailmentbank_train_82", "nl": "the north pole is located in the northern hemisphere.", "fol": "", "prediction": ["all x.(NorthPole(x) -> LocatedInNorthernHemisphere(x))"]}
{"id": "entailmentbank_train_83", "nl": "december is during the winter in the northern hemisphere.", "fol": "", "prediction": ["all x.(December(x) -> WinterInNorthernHemisphere(x))"]}
{"id": "entailmentbank_train_84", "nl": "the north pole will be in winter during decemeber.", "fol": "", "prediction": ["all x.(NorthPole(x) -> WinterDecember(x))"]}
{"id": "entailmentbank_train_85", "nl": "it is december 22.", "fol": "", "prediction": ["(December22(x) -> -December22(x))"]}
{"id": "entailmentbank_train_86", "nl": "it is winter in north pole on december 22.", "fol": "", "prediction": ["all x.(NorthPole(x) -> Winter(x,December22))"]}
{"id": "entailmentbank_train_87", "nl": "as the distance of a location from the north pole becomes smaller / closer, the amount of daylight received by that location will decrease during the winter.", "fol": "", "prediction": ["all x y.((Location(x) & NorthPole(y) & SmallerDistance(x,y)) -> DecreasedDaylight(x))"]}
{"id": "entailmentbank_train_88", "nl": "the north pole will receive the least daylight during winter on december 22.", "fol": "", "prediction": ["all x.(NorthPole(x) -> ReceivesLeastDarknessDuringWinter(x,December22))"]}
{"id": "entailmentbank_train_89", "nl": "new york state is on earth.", "fol": "", "prediction": ["all x.(NewYorkState(x) -> OnEarth(x))"]}
{"id": "entailmentbank_train_90", "nl": "the sun rises in the east for people on earth.", "fol": "", "prediction": ["all x y.((Sun(x) & Person(y)) -> RisesInEast(x,y))"]}
{"id": "entailmentbank_train_91", "nl": "people from new york state will see the sun rise in the east.", "fol": "", "prediction": ["all x.((NewYorkState(x) & SunRise(x,East)) -> SunRise(x,East))"]}
{"id": "entailmentbank_train_92", "nl": "if a place is on earth, then that place will experience seasons.", "fol": "", "prediction": ["all x.((Place(x) & OnEarth(x)) -> ExperienceSeasons(x))"]}
{"id": "entailmentbank_train_93", "nl": "new york state experiences seasons on earth.", "fol": "", "prediction": ["all x.(NewYorkState(x) -> ExperiencesSeasonsOnEarth(x))"]}
{"id": "entailmentbank_train_94", "nl": "earth's tilt on its rotating axis causes seasons to occur.", "fol": "", "prediction": ["all x.((EarthTiltOnRotatingAxis(x) & CausesSeasons(x)) -> SeasonsOccur(x))"]}
{"id": "entailmentbank_train_95", "nl": "earth's tilt on its rotating axis causes seasons to occur in new york state.", "fol": "", "prediction": ["all x y.((EarthTiltOnRotatingAxis(x) & NewYorkState(y)) -> CausesSeasons(x,y))"]}
{"id": "entailmentbank_train_96", "nl": "a complete rotation of earth takes 24 hours.", "fol": "", "prediction": ["all x.((EarthRotation(x) & Complete(x)) -> Takes24Hours(x))"]}
{"id": "entailmentbank_train_97", "nl": "a complete rotation of earth takes 24 hours and causes day and night.", "fol": "", "prediction": ["all x.((CompleteRotationOfEarth(x) & Takes24Hours(x)) -> CausesDayAndNight(x))"]}
{"id": "entailmentbank_train_98", "nl": "the northern hemisphere is a kind of hemisphere of earth.", "fol": "", "prediction": ["all x.(NorthernHemisphere(x) -> HemisphereOfEarth(x))"]}
{"id": "entailmentbank_train_99", "nl": "northern hemisphere tilts towards the sun in summer.", "fol": "", "prediction": ["all x.((NorthernHemisphere(x) & Sun(y)) -> TiltsTowards(x,y))"]}
{"id": "entailmentbank_train_100", "nl": "when a hemisphere is tilted towards the sun, that hemisphere receives more direct sunlight.", "fol": "", "prediction": ["all x y.((Hemisphere(x) & TiltedTowardsSun(x)) -> ReceivesMoreDirectSunlight(x,y))"]}
{"id": "entailmentbank_train_101", "nl": "northern hemisphere will receive more direct sunlight in summer.", "fol": "", "prediction": ["all x.((NorthernHemisphere(x) & Summer(x)) -> MoreDirectSunlight(x))"]}
{"id": "entailmentbank_train_102", "nl": "northern hemisphere tilts away the sun in winter.", "fol": "", "prediction": ["all x.(NorthernHemisphere(x) -> TiltsAwaySunInWinter(x))"]}
{"id": "entailmentbank_train_103", "nl": "northern hemisphere will receive less direct sunlight in winter.", "fol": "", "prediction": ["all x.(NorthernHemisphere(x) -> LessDirectSunlightInWinter(x))"]}
{"id": "entailmentbank_train_104", "nl": "northern hemisphere receives more direct sunlight in summer than in winter.", "fol": "", "prediction": ["all x y.((NorthernHemisphere(x) & Summer(y)) -> MoreDirectSunlight(x,y))"]}
{"id": "entailmentbank_train_105", "nl": "receiving direct sunlight causes objects to become warm.", "fol": "", "prediction": ["all x.((ReceivesDirectSunlight(x) & Object(y)) -> Warm(y))"]}
{"id": "entailmentbank_train_106", "nl": "northern hemisphere will be warmer in summer than in winter.", "fol": "", "prediction": ["all x y.((NorthernHemisphere(x) & Summer(y)) -> WarmerIn(x,y))"]}
{"id": "entailmentbank_train_107", "nl": "a complete revolution / orbit of the moon around the earth takes 1 / one month.", "fol": "", "prediction": ["all x y.((Revolution(x) & Orbit(y) & Moon(x) & Earth(y)) -> TakesOneMonth(x,y))"]}
{"id": "entailmentbank_train_108", "nl": "1 month is equal to 27-31 days.", "fol": "", "prediction": ["all x.(Month(x) -> (27Days(x) | 31Days(x)))"]}
{"id": "entailmentbank_train_109", "nl": "a complete revolution of the moon around the earth takes around 27 to 31 days.", "fol": "", "prediction": ["all x y.((Moon(x) & Earth(y)) -> TakesAbout27To31Days(x,y))"]}
{"id": "entailmentbank_train_110", "nl": "a complete rotation of the moon takes 1 / one month.", "fol": "", "prediction": ["all x.((Moon(x) & CompleteRotation(x)) -> TakesOneMonth(x))"]}
{"id": "entailmentbank_train_111", "nl": "rotation is the circular movement of an object around a center / axis.", "fol": "", "prediction": ["all x y.((Rotation(x) & Object(y)) -> CircularMovementAroundCenterAxis(x,y))"]}
{"id": "entailmentbank_train_112", "nl": "a complete rotation of the moon around its axis takes one month.", "fol": "", "prediction": ["all x.((Moon(x) & CompleteRotation(x)) -> TakesOneMonth(x))"]}
{"id": "entailmentbank_train_113", "nl": "the northern hemisphere is tilted toward the sun.", "fol": "", "prediction": ["all x.(NorthernHemisphereTiltedTowardsSun(x) -> TiltedTowardsSun(x))"]}
{"id": "entailmentbank_train_114", "nl": "the northern hemisphere is in summer.", "fol": "", "prediction": ["all x.(NorthernHemisphere(x) -> Summer(x))"]}
{"id": "entailmentbank_train_115", "nl": "the winter in the southern hemisphere is during the summer in the northern hemisphere.", "fol": "", "prediction": ["all x y.((Winter(x) & SouthernHemisphere(y)) -> Summer(x,y))"]}
{"id": "entailmentbank_train_116", "nl": "the southern hemisphere is in winter.", "fol": "", "prediction": ["all x.(SouthHemisphericHemispheric(x) -> Winter(x))"]}
{"id": "entailmentbank_train_117", "nl": "australia is located in the southern hemisphere.", "fol": "", "prediction": ["all x.(Australia(x) -> SouthernHemisphere(x))"]}
{"id": "entailmentbank_train_118", "nl": "australia is in winter.", "fol": "", "prediction": ["all x.(Australia(x) -> Winter(x))"]}
{"id": "entailmentbank_train_119", "nl": "a complete revolution / orbit of the earth around the sun takes 1 / one year / solar year / earth year.", "fol": "", "prediction": ["all x y.((CompleteRevolution(x) & OrbitOfEarth(x) & Sun(y)) -> TakesOneYear(x,y))"]}
{"id": "entailmentbank_train_120", "nl": "1 year is equal to 12 months.", "fol": "", "prediction": ["all x.(Year(x) -> Months(y))"]}
{"id": "entailmentbank_train_121", "nl": "a complete revolution of earth around the sun takes 12 months.", "fol": "", "prediction": ["all x.((RevolutionOfEarth(x) & Sun(x)) -> Takes12Months(x))"]}
{"id": "entailmentbank_train_122", "nl": "the moon will have 12 complete revolutions around the earth after a complete revolution of earth around the sun.", "fol": "", "prediction": ["all x y.((Moon(x) & Earth(y) & CompleteRevolution(x,y)) -> Has12RevolutionsAround(x,y))"]}
{"id": "entailmentbank_train_123", "nl": "the moon rotates on its axis.", "fol": "", "prediction": ["all x.(Moon(x) -> RotatesOnAxis(x))"]}
{"id": "entailmentbank_train_124", "nl": "a complete rotation of the moon on its axis takes one month.", "fol": "", "prediction": ["all x.((Moon(x) & CompleteRotation(x)) -> TakesOneMonth(x))"]}
{"id": "entailmentbank_train_125", "nl": "the northern hemisphere will experience summer when it is tilted towards the sun.", "fol": "", "prediction": ["all x.((NorthernHemisphere(x) & TiltedTowardsSun(x)) -> ExperiencesSummer(x))"]}
{"id": "entailmentbank_train_126", "nl": "a complete revolution / orbit of the earth around the sun takes one year.", "fol": "", "prediction": ["all x.((Revolution(x) & Orbit(x) & EarthAroundSun(x)) -> TakesOneYear(x))"]}
{"id": "entailmentbank_train_127", "nl": "a complete revolution of the earth around the sun takes 365 days.", "fol": "", "prediction": ["all x y.((Revolution(x) & Earth(y) & Sun(z)) -> Takes365Days(x,y,z))"]}
{"id": "entailmentbank_train_128", "nl": "the earth will complete 365 times of rotation after a complete revolution of the earth around the sun.", "fol": "", "prediction": ["all x y.((Earth(x) & Earth(y) & CompletesRotation(x,y)) -> CompletesRotation(x,y))"]}
{"id": "entailmentbank_train_129", "nl": "the moon is the celestial object that is closest to the earth.", "fol": "", "prediction": ["all x.(Moon(x) -> (CelestialObject(x) & ClosestToEarth(x)))"]}
{"id": "entailmentbank_train_130", "nl": "the solar system contains the moon.", "fol": "", "prediction": ["all x.(SolarSystem(x) -> ContainsMoon(x))"]}
{"id": "entailmentbank_train_131", "nl": "the moon is the celestial object that is closest to the earth in the solar system.", "fol": "", "prediction": ["all x.(Moon(x) -> (CelestialObject(x) & ClosestToEarth(x) & SolarSystem(x)))"]}
{"id": "entailmentbank_train_132", "nl": "as distance to an object increases, that object will appear smaller.", "fol": "", "prediction": ["all x y.((Object(x) & Distance(y) & Increases(x,y)) -> AppearsSmaller(x,y))"]}
{"id": "entailmentbank_train_133", "nl": "because the stars are very far away from the earth, they will appear a lot smaller on earth.", "fol": "", "prediction": ["all x.((Star(x) & FarFromEarth(x)) -> AppearsLargerOnEarth(x))"]}
{"id": "entailmentbank_train_134", "nl": "earth is a kind of planet.", "fol": "", "prediction": ["all x.(Earth(x) -> Planet(x))"]}
{"id": "entailmentbank_train_135", "nl": "a planet is a kind of celestial object / body.", "fol": "", "prediction": ["all x.(Planet(x) -> (CelestialObject(x) & CelestialBody(x)))"]}
{"id": "entailmentbank_train_136", "nl": "as distance from an object decreases, that object will appear larger.", "fol": "", "prediction": ["all x y.((Object(x) & DistanceDecrease(x,y)) -> AppearLarger(x,y))"]}
{"id": "entailmentbank_train_137", "nl": "as the distance from a star to earth decreases, the star will appear larger.", "fol": "", "prediction": ["all x y.((Star(x) & Earth(y) & DistanceDecreases(x,y)) -> StarAppearsLarger(x))"]}
{"id": "entailmentbank_train_138", "nl": "the sun will appear larger than other stars because it is the closest star to earth.", "fol": "", "prediction": ["all x y.((Sun(x) & Star(y) & ClosestToEarth(x,y)) -> AppearsLarger(x,y))"]}
{"id": "entailmentbank_train_139", "nl": "as the size of a light source increases, that light will appear brighter.", "fol": "", "prediction": ["all x.((LightSource(x) & IncreasedSize(x)) -> AppearsBrighter(x))"]}
{"id": "entailmentbank_train_140", "nl": "a star is a source of light.", "fol": "", "prediction": ["all x.(Star(x) -> SourceOfLight(x))"]}
{"id": "entailmentbank_train_141", "nl": "as the size of the star increases, the light will appear brighter.", "fol": "", "prediction": ["all x.((Star(x) & SizeIncreases(x)) -> LightAppearsBrighter(x))"]}
{"id": "entailmentbank_train_142", "nl": "stars are located light years apart from each other.", "fol": "", "prediction": ["all x.(Star(x) -> LightYearsAbove(x))"]}
{"id": "entailmentbank_train_143", "nl": "light year is a measure of the distance light travels in one year.", "fol": "", "prediction": ["all x.(LightYear(x) -> MeasuresDistanceLightTravelsInYear(x))"]}
{"id": "entailmentbank_train_144", "nl": "the distance between stars are measured in light years.", "fol": "", "prediction": ["all x.((Star(x) & Distance(x,y)) -> MeasuredInLightYears(x))"]}
{"id": "entailmentbank_train_145", "nl": "proxima centauri is a kind of star.", "fol": "", "prediction": ["all x.(ProximaCentauri(x) -> Star(x))"]}
{"id": "entailmentbank_train_146", "nl": "the sun is a kind of star.", "fol": "", "prediction": ["all x.(Sun(x) -> Star(x))"]}
{"id": "entailmentbank_train_147", "nl": "the distance between the sun and proxima centauri is measured in light years.", "fol": "", "prediction": ["all x.((Distance(x) & Sun(x) & ProximaCentauri(x)) -> MeasuredInLightYears(x))"]}
{"id": "entailmentbank_train_148", "nl": "light years ly are an astronomy unit used for measuring length / distance generally used for values between 1 and 27000000000.", "fol": "", "prediction": ["all x.(LightYears(x) -> (AstronomyUnit(x) & MeasuresLength(x) & MeasuresDistance(x) & UsedForValuesBetween(x,1) & UsedForValuesBetween(x,27000000000)))"]}
{"id": "entailmentbank_train_149", "nl": "light year is used to measure the distance between stars.", "fol": "", "prediction": ["all x.(LightYear(x) -> MeasuresDistanceBetweenStars(x))"]}
{"id": "entailmentbank_train_150", "nl": "an object is 10 light years from earth.", "fol": "", "prediction": ["all x.((Object(x) & LightYearsFromEarth(x)) -> 10(x))"]}
{"id": "entailmentbank_train_151", "nl": "the distance between the object and the earth is equal to the distance light can travel in 10 years.", "fol": "", "prediction": ["all x y.((Object(x) & Earth(y) & Distance(x,y)) -> EqualToDistanceLightCanTravel(x,y))"]}
{"id": "entailmentbank_train_152", "nl": "the full moon is when the earth is in between the sun and the moon.", "fol": "", "prediction": ["all x.(FullMoon(x) -> EarthInBetweenSunAndMoon(x))"]}
{"id": "entailmentbank_train_153", "nl": "if the earth is in between the sun and the moon, then the earth can block the light on the moon.", "fol": "", "prediction": ["all x y.((Earth(x) & Sun(y) & Moon(z) & InBetween(x,y,z)) -> BlocksLightOnMoon(x,y,z))"]}
{"id": "entailmentbank_train_154", "nl": "the full moon is when the earth can block the light on the moon.", "fol": "", "prediction": ["all x.((Earth(x) & BlocksLight(x)) -> FullMoon(x))"]}
{"id": "entailmentbank_train_155", "nl": "an object blocking light causes a shadow.", "fol": "", "prediction": ["all x.((Object(x) & BlocksLight(x)) -> CausesShadow(x))"]}
{"id": "entailmentbank_train_156", "nl": "the full moon is when the earth can cause a shadown on the moon.", "fol": "", "prediction": ["all x.((Earth(x) & CausesShadownOnMoon(x)) -> FullMoon(x))"]}
{"id": "entailmentbank_train_157", "nl": "a lunar eclipse is formed by earth's shadow falling on the moon.", "fol": "", "prediction": ["all x.(LunarEclipse(x) -> (EarthShadowFallsOnMoon(x)))"]}
{"id": "entailmentbank_train_158", "nl": "the full moon is when a lunar eclipase can happen.", "fol": "", "prediction": ["all x.((LunarEclipase(x) & FullMoon(x)) -> CanOccur(x))"]}
{"id": "entailmentbank_train_159", "nl": "a galaxy is held together by gravity.", "fol": "", "prediction": ["all x.(Galaxy(x) -> HeldTogetherByGravity(x))"]}
{"id": "entailmentbank_train_160", "nl": "a galaxy is made of stars.", "fol": "", "prediction": ["all x.(Galaxy(x) -> MadeOfStars(x))"]}
{"id": "entailmentbank_train_161", "nl": "a galaxy is made of stars that is helt together by gravity.", "fol": "", "prediction": ["all x.(Galaxy(x) -> (MadeOfStars(x) & HeltTogetherByGravity(x)))"]}
{"id": "entailmentbank_train_162", "nl": "a galaxy is a kind of very large system of stars.", "fol": "", "prediction": ["all x.(Galaxy(x) -> VeryLargeStarSystem(x))"]}
{"id": "entailmentbank_train_163", "nl": "a galaxy is a large system of stars that is held together by gravity.", "fol": "", "prediction": ["all x.(Galaxy(x) -> (LargeSystemOfStars(x) & HeldTogetherByGravity(x)))"]}
{"id": "entailmentbank_train_164", "nl": "galaxies are usually thousands of light years in diameter.", "fol": "", "prediction": ["all x.(Galaxie(x) -> (ThousandsOfLightYears(x) & InDiameter(x)))"]}
{"id": "entailmentbank_train_165", "nl": "galaxies often contain hundreds of billions of stars.", "fol": "", "prediction": ["all x.(Galaxie(x) -> ContainsBillionsOfStars(x))"]}
{"id": "entailmentbank_train_166", "nl": "galaxies are located millions of light years from earth.", "fol": "", "prediction": ["all x.(Galaxies(x) -> LocatedMillionsOfLightYearsFromEarth(x))"]}
{"id": "entailmentbank_train_167", "nl": "galaxies often contains billions of stars, and are located millions of light years from earth, and are thousands of light years in diameter.", "fol": "", "prediction": ["all x.(Galaxies(x) -> (ContainsBillionsOfStars(x) & LocatesMillionsOfLightYearsFromEarth(x) & ThousandsOfLightYearsInDiameter(x)))"]}
{"id": "entailmentbank_train_168", "nl": "a galaxy is a kind of celestial body / celestial object.", "fol": "", "prediction": ["all x.(Galaxy(x) -> (CelestialBody(x) | CelestialObject(x)))"]}
{"id": "entailmentbank_train_169", "nl": "a celestial object has 200 billion stars, 30 million light years from earth, and 500 light years in diameter.", "fol": "", "prediction": ["all x.(CelestialObject(x) -> (HasBillionStars(x) & Has30MLightYearsFromEarth(x) & Has500LightYearsInDiameter(x)))"]}
{"id": "entailmentbank_train_170", "nl": "the objects the students try to describe are galaxies.", "fol": "", "prediction": ["all x.((Object(x) & Student(x)) -> Galaxies(x))"]}
{"id": "entailmentbank_train_171", "nl": "galaxies can be classified by shape.", "fol": "", "prediction": ["all x.(Galaxie(x) -> ClassifiedByShape(x))"]}
{"id": "entailmentbank_train_172", "nl": "spiral is a kind of shape.", "fol": "", "prediction": ["all x.(Spiral(x) -> Shape(x))"]}
{"id": "entailmentbank_train_173", "nl": "spiral galaxy is a type of galaxy.", "fol": "", "prediction": ["all x.(SpiralGalaxy(x) -> Galaxy(x))"]}
{"id": "entailmentbank_train_174", "nl": "the milky way is a kind of galaxy.", "fol": "", "prediction": ["all x.(MilkyWay(x) -> Galaxy(x))"]}
{"id": "entailmentbank_train_175", "nl": "the milky way is spiral in shape.", "fol": "", "prediction": ["all x.(MilkyWeave(x) -> SpiralShape(x))"]}
{"id": "entailmentbank_train_176", "nl": "the milky way is a kind of spiral galaxy.", "fol": "", "prediction": ["all x.(MilkyWay(x) -> SpiralGalaxia(x))"]}
{"id": "entailmentbank_train_177", "nl": "a galaxy contains dusts / stars / planets.", "fol": "", "prediction": ["all x.(Galaxy(x) -> (ContainsDusts(x) & ContainsStars(x) & ContainsPlanets(x)))"]}
{"id": "entailmentbank_train_178", "nl": "a galaxy is a group of dusts, stars, and planets held together by gravity.", "fol": "", "prediction": ["all x.(Galaxy(x) -> (GroupOfDustsStarsPlanets(x) & HeldTogetherByGravity(x)))"]}
{"id": "entailmentbank_train_179", "nl": "a space telescope captured images of star clusters that contains billions of stars.", "fol": "", "prediction": ["all x y.((SpaceTelescope(x) & StarCluster(y) & ContainsBillionsOfStars(x,y)) -> CapturedImages(x,y))"]}
{"id": "entailmentbank_train_180", "nl": "the star cluster that captured by the space telescope is a galaxy.", "fol": "", "prediction": ["all x.((StarCluster(x) & CapturedBySpaceTelescope(x)) -> Galaxy(x))"]}
{"id": "entailmentbank_train_181", "nl": "a halo is a part of a galaxy.", "fol": "", "prediction": ["all x.(Halo(x) -> PartOfGalaxie(x))"]}
{"id": "entailmentbank_train_182", "nl": "a halo is part of the milky way.", "fol": "", "prediction": ["all x.(Halo(x) -> MilkyWay(x))"]}
{"id": "entailmentbank_train_183", "nl": "a halo contains mostly old stars.", "fol": "", "prediction": ["all x.(Halo(x) -> ContainsOldStars(x))"]}
{"id": "entailmentbank_train_184", "nl": "the halo in the milky way contains mostly old stars.", "fol": "", "prediction": ["all x.(Halo(x) -> MilkyWay(x))"]}
{"id": "entailmentbank_train_185", "nl": "a galaxy is a kind of structure.", "fol": "", "prediction": ["all x.(Galaxy(x) -> Structure(x))"]}
{"id": "entailmentbank_train_186", "nl": "the milky way is a kind of strucutre.", "fol": "", "prediction": ["all x.(MilkyWay(x) -> Structural(x))"]}
{"id": "entailmentbank_train_187", "nl": "the sun is located near the edge of the milky way galaxy.", "fol": "", "prediction": ["all x.(Sun(x) -> NearEdgeOfMilkyWayGalaxy(x))"]}
{"id": "entailmentbank_train_188", "nl": "the sun is located in the structure called milky way galaxy.", "fol": "", "prediction": ["all x.(Sun(x) -> MilkyWayGalaxy(x))"]}
{"id": "entailmentbank_train_189", "nl": "galaxies are the structure that contain hundreds of billions of stars.", "fol": "", "prediction": ["all x.(Galaxies(x) -> ContainsBillionsOfStars(x))"]}
{"id": "entailmentbank_train_190", "nl": "a moon is a kind of celestial object / celestial body.", "fol": "", "prediction": ["all x.(Moon(x) -> (CelestialObject(x) & CelestialBody(x)))"]}
{"id": "entailmentbank_train_191", "nl": "if an object reflects light toward the eye then that object can be seen.", "fol": "", "prediction": ["all x.((Object(x) & ReflectsLightTowardsEye(x)) -> CanBeSeen(x))"]}
{"id": "entailmentbank_train_192", "nl": "if the moon reflects light toward the eye then the moon can be seen.", "fol": "", "prediction": ["all x.((Moon(x) & ReflectsLightTowardsEye(x)) -> CanBeSeen(x))"]}
{"id": "entailmentbank_train_193", "nl": "there are people on earth.", "fol": "", "prediction": ["exists x.(Person(x) & OnEarth(x))"]}
{"id": "entailmentbank_train_194", "nl": "the moon reflects sunlight towards the earth.", "fol": "", "prediction": ["all x y.((Moon(x) & Earth(y)) -> ReflectsSunlightTowards(x,y))"]}
{"id": "entailmentbank_train_195", "nl": "the moon can be seen by the people on earth.", "fol": "", "prediction": ["all x y.((Moon(x) & Person(y)) -> CanBeSeenBy(x,y))"]}
{"id": "entailmentbank_train_196", "nl": "the moon orbits the earth.", "fol": "", "prediction": ["all x y.((Moon(x) & Earth(y)) -> Orbits(x,y))"]}
{"id": "entailmentbank_train_197", "nl": "the moon reflects sunlight towards the earth and it orbits the earth.", "fol": "", "prediction": ["all x y.((Moon(x) & Earth(y)) -> (ReflectsSunlight(x,y) & Orbits(x,y)))"]}
{"id": "entailmentbank_train_198", "nl": "a moon is a kind of satellite.", "fol": "", "prediction": ["all x.(Moon(x) -> Satellite(x))"]}
{"id": "entailmentbank_train_199", "nl": "the moon is a satellite that reflects sunlight towards the earth and orbits the earth.", "fol": "", "prediction": ["all x.(Moon(x) -> (Satellite(x) & ReflectsSunlightTowardsEarth(x) & OrbitsEarth(x)))"]}
{"id": "entailmentbank_train_200", "nl": "the moon is the satellite in the solar system that reflects sunlight towards the earth and orbits the earth.", "fol": "", "prediction": ["all x y.((Moon(x) & SolarSystem(y)) -> (Satellite(x,y) & ReflectsSunlightTowardsEarth(x) & OrbitsEarth(x)))"]}
{"id": "entailmentbank_train_201", "nl": "the moon's surface contains flat areas.", "fol": "", "prediction": ["all x.(MoonSurface(x) -> ContainsFlatAreas(x))"]}
{"id": "entailmentbank_train_202", "nl": "the lunar / moon's surface contains many craters.", "fol": "", "prediction": ["all x.((Lunar(x) | MoonSurface(x)) -> ContainsCraters(x))"]}
{"id": "entailmentbank_train_203", "nl": "the moon's surface contains highlands.", "fol": "", "prediction": ["all x.(MoonSurface(x) -> ContainsHighlands(x))"]}
{"id": "entailmentbank_train_204", "nl": "the surface of the moon contains flat areas, highlands, and craters.", "fol": "", "prediction": ["all x.(MoonSurface(x) -> (ContainsFlatAreas(x) & ContainsHighlands(x) & ContainsCraters(x)))"]}
{"id": "entailmentbank_train_205", "nl": "the earth's surface contains many craters.", "fol": "", "prediction": ["all x.(EarthSurface(x) -> ContainsCraters(x))"]}
{"id": "entailmentbank_train_206", "nl": "both the moon's surface and the earth's surface contain many craters.", "fol": "", "prediction": ["all x y.((MoonSurface(x) & EarthSurface(y)) -> ContainsCraters(x,y))"]}
{"id": "entailmentbank_train_207", "nl": "the moon has less water / air than the earth.", "fol": "", "prediction": ["all x y.((Moon(x) & Earth(y)) -> LessWater(x,y))"]}
{"id": "entailmentbank_train_208", "nl": "drier means lower in amount of water / wetness / moisture.", "fol": "", "prediction": ["all x.(Drier(x) -> (LowerWaterAmount(x) & LowerWetnessAmount(x) & LowerMoistureAmount(x)))"]}
{"id": "entailmentbank_train_209", "nl": "the moon is drier than the earth.", "fol": "", "prediction": ["all x y.((Moon(x) & Earth(y)) -> Drier(x,y))"]}
{"id": "entailmentbank_train_210", "nl": "the moon has no air on it.", "fol": "", "prediction": ["all x.(Moon(x) -> -AirOn(x))"]}
{"id": "entailmentbank_train_211", "nl": "earth has air.", "fol": "", "prediction": ["all x.(Earth(x) -> HasAir(x))"]}
{"id": "entailmentbank_train_212", "nl": "the difference between the earth and the moon is that the moon has no air on it.", "fol": "", "prediction": ["all x y.((Earth(x) & Moon(y)) -> (-HasAirOn(y,x)))"]}
{"id": "entailmentbank_train_213", "nl": "phobos orbits mars.", "fol": "", "prediction": ["all x.(Phobos(x) -> OrbitsMars(x))"]}
{"id": "entailmentbank_train_214", "nl": "mars is a kind of planet.", "fol": "", "prediction": ["all x.(Mars(x) -> Planet(x))"]}
{"id": "entailmentbank_train_215", "nl": "phobos orbits the planet mars.", "fol": "", "prediction": ["all x.(Phobos(x) -> OrbitsPlanetMars(x))"]}
{"id": "entailmentbank_train_216", "nl": "moons orbit planets.", "fol": "", "prediction": ["all x.(Moon(x) -> OrbitsPlanet(x))"]}
{"id": "entailmentbank_train_217", "nl": "phobos is a kind of moon.", "fol": "", "prediction": ["all x.(Phobos(x) -> Moon(x))"]}
{"id": "entailmentbank_train_218", "nl": "light reflecting off of an object causes that object to be visible to the observer.", "fol": "", "prediction": ["all x y.((LightReflectingOff(x) & Object(y)) -> VisibleToObserver(x,y))"]}
{"id": "entailmentbank_train_219", "nl": "the moon reflecting sunlight towards the earth cause the moon to be visible to the observer.", "fol": "", "prediction": ["all x y.((Moon(x) & Sunlight(y) & ReflectsTowardsEarth(x,y)) -> MoonVisibleToObserver(x))"]}
{"id": "entailmentbank_train_220", "nl": "a dwarf planet usually is much smaller in size / in mass than other planets.", "fol": "", "prediction": ["all x y.((DwarfPlanet(x) & Planet(y)) -> (SmallerInSize(x,y) & SmallerInMass(x,y)))"]}
{"id": "entailmentbank_train_221", "nl": "pluto is a kind of dwarf planet.", "fol": "", "prediction": ["all x.(Pluto(x) -> DwarfPlanet(x))"]}
{"id": "entailmentbank_train_222", "nl": "pluto is a dwarf planet that has much smaller mass than other planets.", "fol": "", "prediction": ["all x.(Pluto(x) -> (DwarfPlanet(x) & SmallerMass(x)))"]}
{"id": "entailmentbank_train_223", "nl": "a dwarf planet is a kind of celestial object.", "fol": "", "prediction": ["all x.(DwarfPlanet(x) -> CelestialObject(x))"]}
{"id": "entailmentbank_train_224", "nl": "pluto is a celestial object that  has much smaller mass than other planets.", "fol": "", "prediction": ["all x.(Pluto(x) -> (CelestialObject(x) & SmallerMass(x)))"]}
{"id": "entailmentbank_train_225", "nl": "as the mass of a celestial object decreases, the surface gravity of that celestial object weakens.", "fol": "", "prediction": ["all x y.((CelestialObject(x) & MassDecrease(x)) -> SurfaceGravityWeakens(x,y))"]}
{"id": "entailmentbank_train_226", "nl": "pluto will have much less gravity than other planets.", "fol": "", "prediction": ["all x.(Pluto(x) -> MuchLessGravity(x))"]}
{"id": "entailmentbank_train_227", "nl": "our sun is located at the center of our solar system.", "fol": "", "prediction": ["all x.(Sun(x) -> LocatedAtCenterOfSolarSystem(x))"]}
{"id": "entailmentbank_train_228", "nl": "solar system is located at the edge of the milky way galaxy.", "fol": "", "prediction": ["all x.(SolarSystem(x) -> MilkyWayGalaxy(x))"]}
{"id": "entailmentbank_train_229", "nl": "our sun is located at the center of a solar system that is at the edge of the milky way galaxy.", "fol": "", "prediction": ["all x y.((Sun(x) & SolarSystem(y)) -> (LocatedAtCenter(x,y) & AtEdgeOfMilkyWayGalaxy(x)))"]}
{"id": "entailmentbank_train_230", "nl": "a star produces light and heat.", "fol": "", "prediction": ["all x.(Star(x) -> (ProducesLight(x) & ProducesHeat(x)))"]}
{"id": "entailmentbank_train_231", "nl": "a star is a celestial object that produces light and heat.", "fol": "", "prediction": ["all x.(Star(x) -> (CelestialObject(x) & ProducesLight(x) & ProducesHeat(x)))"]}
{"id": "entailmentbank_train_232", "nl": "the sun is the celestial object that produces light and heat and is closest to earth.", "fol": "", "prediction": ["all x.(Sun(x) -> (CelestialObject(x) & ProducesLight(x) & ProducesHeat(x) & ClosestToEarth(x)))"]}
{"id": "entailmentbank_train_233", "nl": "a source of something emits / produces / generates / provides that something.", "fol": "", "prediction": ["all x.(SourceOf(x,y) -> (EmitsProducesGeneratesProvides(x,y)))"]}
{"id": "entailmentbank_train_234", "nl": "a candle is a source of light when it is burned.", "fol": "", "prediction": ["all x.((Candle(x) & Burned(x)) -> SourceOfLight(x))"]}
{"id": "entailmentbank_train_235", "nl": "a candle produces light when it is burned.", "fol": "", "prediction": ["all x.((Candle(x) & Burned(x)) -> ProducesLight(x))"]}
{"id": "entailmentbank_train_236", "nl": "both candles and stars produce light.", "fol": "", "prediction": ["all x.((Candle(x) & Star(x)) -> ProducesLight(x))"]}
{"id": "entailmentbank_train_237", "nl": "electrons are pulled away from atoms in a star by high temeprature.", "fol": "", "prediction": ["all x y.((Electron(x) & Atom(y) & Star(z)) -> PulledAwayByHighEmporiation(x,y,z))"]}
{"id": "entailmentbank_train_238", "nl": "plasma is formed by electrons separating from atoms in stars.", "fol": "", "prediction": ["all x y.((Plasma(x) & Electron(y)) -> FormedBy(x,y))"]}
{"id": "entailmentbank_train_239", "nl": "plasma will be formed by high temperature pulling electrons away from atoms.", "fol": "", "prediction": ["all x.((Plasma(x) & HighTemperature(x)) -> PullsElectronsAwayFromAtoms(x))"]}
{"id": "entailmentbank_train_240", "nl": "plasma is a kind of state of matter.", "fol": "", "prediction": ["all x.(Plasma(x) -> StateOfMatter(x))"]}
{"id": "entailmentbank_train_241", "nl": "plasma is the state of matter that is formed by high temperature pulling electrons away from atoms.", "fol": "", "prediction": ["all x.(Plasma(x) -> (HighTemperatureFormation(x) & PullsElectronsAway(x)))"]}
{"id": "entailmentbank_train_242", "nl": "the sun is average in size for a star in our galaxy.", "fol": "", "prediction": ["all x.(Sun(x) -> AverageSize(x))"]}
{"id": "entailmentbank_train_243", "nl": "the sun is an average sized star located near the edge of the milky way galaxy.", "fol": "", "prediction": ["all x.(Sun(x) -> (AverageSizedStar(x) & LocatedNearEdgeOfMilkyWayGalaxy(x)))"]}
{"id": "entailmentbank_train_244", "nl": "average is similar to medium.", "fol": "", "prediction": ["all x.(Average(x) -> SimilarToMedium(x))"]}
{"id": "entailmentbank_train_245", "nl": "the sun is an medium sized star located near the edge of the milky way galaxy.", "fol": "", "prediction": ["all x.(Sun(x) -> (MediumSizedStar(x) & LocatedNearEdgeOfMilkyWayGalaxy(x)))"]}
{"id": "entailmentbank_train_246", "nl": "a star is a source of light / light energy through nuclear reactions.", "fol": "", "prediction": ["all x.(Star(x) -> (SourceOfLight(x) & SourceOfLightEnergy(x) & NuclearReactions(x)))"]}
{"id": "entailmentbank_train_247", "nl": "a star emits light through nuclear reactions.", "fol": "", "prediction": ["all x.(Star(x) -> EmitsLightThroughNuclearReactions(x))"]}
{"id": "entailmentbank_train_248", "nl": "a star is a celestial body that emits light through nuclear reactions.", "fol": "", "prediction": ["all x.(Star(x) -> (CelestialBody(x) & EmitsLightThroughNuclearReactions(x)))"]}
{"id": "entailmentbank_train_249", "nl": "astronomical is similar to celestial.", "fol": "", "prediction": ["all x.(Astronomical(x) -> SimilarToCelestial(x))"]}
{"id": "entailmentbank_train_250", "nl": "a star is an astronomical body that emits light through nuclear reactions.", "fol": "", "prediction": ["all x.(Star(x) -> (AstronomicalBody(x) & EmitsLightThroughNuclearReactions(x)))"]}
{"id": "entailmentbank_train_251", "nl": "nuclear fusion causes star formation.", "fol": "", "prediction": ["all x.(NuclearFusion(x) -> CausesStarFormation(x))"]}
{"id": "entailmentbank_train_252", "nl": "if something causes a process then that something is required for that process.", "fol": "", "prediction": ["all x y.((CausesProcess(x) & Process(y)) -> Requires(x,y))"]}
{"id": "entailmentbank_train_253", "nl": "nuclear fusion is required for star formation.", "fol": "", "prediction": ["all x.(NuclearFusion(x) -> RequiredForStarFormation(x))"]}
{"id": "entailmentbank_train_254", "nl": "if something requires something else then that something else is important to that something.", "fol": "", "prediction": ["all x y.((Requires(x,y) & Requires(x,y)) -> ImportantTo(x,y))"]}
{"id": "entailmentbank_train_255", "nl": "nuclear fusion is important to star formation.", "fol": "", "prediction": ["all x.(NuclearFusion(x) -> ImportantToStarFormation(x))"]}
{"id": "entailmentbank_train_256", "nl": "a yellow dwarf is a kind of main-sequence star.", "fol": "", "prediction": ["all x.(YellowDwarf(x) -> MainSequenceStar(x))"]}
{"id": "entailmentbank_train_257", "nl": "the sun is a kind of yellow dwarf.", "fol": "", "prediction": ["all x.(Sun(x) -> YellowDwarf(x))"]}
{"id": "entailmentbank_train_258", "nl": "the sun is a kind of main-sequence star.", "fol": "", "prediction": ["all x.(Sun(x) -> MainSequenceStar(x))"]}
{"id": "entailmentbank_train_259", "nl": "alpha mensae is a kind of main sequence star.", "fol": "", "prediction": ["all x.(AlphaMensae(x) -> MainSequenceStar(x))"]}
{"id": "entailmentbank_train_260", "nl": "the sun and alpha mensae are both main sequence star.", "fol": "", "prediction": ["(MainSequenceStar(sun) & MainSequenceStar(alphamensae))"]}
{"id": "entailmentbank_train_261", "nl": "red giant stars are greater in volume than main sequence stars.", "fol": "", "prediction": ["all x y.((RedGiantStar(x) & MainSequenceStar(y)) -> GreaterVolume(x,y))"]}
{"id": "entailmentbank_train_262", "nl": "red giant stars are greater in volume than the sun.", "fol": "", "prediction": ["all x y.((RedGiantStar(x) & Sun(y)) -> GreaterVolumeThan(x,y))"]}
{"id": "entailmentbank_train_263", "nl": "stars are mostly made of hydrogen and helium.", "fol": "", "prediction": ["all x.(Star(x) -> (MadeOfHydrogen(x) & MadeOfHelium(x)))"]}
{"id": "entailmentbank_train_264", "nl": "stars generally have the same chemical composition.", "fol": "", "prediction": ["all x.(Star(x) -> SameChemicalComposition(x))"]}
{"id": "entailmentbank_train_265", "nl": "stars generally have the same chemical composition of hydrogen and helium.", "fol": "", "prediction": ["all x.(Star(x) -> (HasHydrogen(x) & HasHelium(x)))"]}
{"id": "entailmentbank_train_266", "nl": "hydrogen is the most common element in stars.", "fol": "", "prediction": ["all x.(Hydrogen(x) -> MostCommonElementInStars(x))"]}
{"id": "entailmentbank_train_267", "nl": "hydrogen is the most common element in the sun.", "fol": "", "prediction": ["all x.(Hydrogen(x) -> MostCommonElementInSun(x))"]}
{"id": "entailmentbank_train_268", "nl": "nuclear fusion is a kind of process.", "fol": "", "prediction": ["all x.(NuclearFusion(x) -> Process(x))"]}
{"id": "entailmentbank_train_269", "nl": "nuclear fusion in a star's core generates energy for stars to burn / shine.", "fol": "", "prediction": ["all x y.((Star(x) & NuclearFusion(x) & Core(y)) -> GeneratesEnergyForStars(x,y))"]}
{"id": "entailmentbank_train_270", "nl": "nuclear fusion is the process in a star's core that generates energy for the star.", "fol": "", "prediction": ["all x y.((NuclearFusion(x) & Star(y)) -> (GeneratesEnergy(x,y) & InCore(x,y)))"]}
{"id": "entailmentbank_train_271", "nl": "nuclear fusion is the process in a star's core that generates energy for the sun.", "fol": "", "prediction": ["all x y.((NuclearFusion(x) & Star(y)) -> GeneratesEnergyForSun(x,y))"]}
{"id": "entailmentbank_train_272", "nl": "classifying is when one sorts something by kind / type.", "fol": "", "prediction": ["all x.(Classifying(x) -> SortsByType(x))"]}
{"id": "entailmentbank_train_273", "nl": "stars can be classified by temperature, color, and brightness.", "fol": "", "prediction": ["all x.(Star(x) -> (ClassifiedByTemperature(x) | ClassifiedByColor(x) | ClassifiedByBrightness(x)))"]}
{"id": "entailmentbank_train_274", "nl": "stars with different temperature, color, brightness will be classified into different types.", "fol": "", "prediction": ["all x.((Star(x) & DifferentTemperature(x) & DifferentColor(x) & DifferentBrightness(x)) -> DifferentType(x))"]}
{"id": "entailmentbank_train_275", "nl": "stars change type during their life cycles.", "fol": "", "prediction": ["all x.(Star(x) -> ChangesType(x))"]}
{"id": "entailmentbank_train_276", "nl": "stars will change in temperature, color, and brightness during their life cycles.", "fol": "", "prediction": ["all x.(Star(x) -> (ChangesTemperature(x) & ChangesColor(x) & ChangesBrightness(x)))"]}
{"id": "entailmentbank_train_277", "nl": "nuclear fusion in the core of the sun generates energy for the sun.", "fol": "", "prediction": ["all x y.((NuclearFusion(x) & Sun(y) & CoreOf(x,y)) -> GeneratesEnergyForSun(x,y))"]}
{"id": "entailmentbank_train_278", "nl": "nuclear fusion converts hydrogen into helium.", "fol": "", "prediction": ["all x y.((NuclearFusion(x) & Hydrogen(y)) -> ConvertsToHelium(x,y))"]}
{"id": "entailmentbank_train_279", "nl": "the nuclear fusion in the core of the sun converts hydrogen into helium.", "fol": "", "prediction": ["all x y.((NuclearFusion(x) & SunCore(y)) -> ConvertsHydrogenToHelium(x,y))"]}
{"id": "entailmentbank_train_280", "nl": "nuclear fusion happens in the core of a star.", "fol": "", "prediction": ["all x y.((NuclearFusion(x) & Star(y)) -> HappensInCore(x,y))"]}
{"id": "entailmentbank_train_281", "nl": "nuclear fusion happens in the core of the sun.", "fol": "", "prediction": ["all x y.((NuclearFusion(x) & Sun(y)) -> HappensInCore(x,y))"]}
{"id": "entailmentbank_train_282", "nl": "the core is a kind of layer of the sun.", "fol": "", "prediction": ["all x.(Core(x) -> LayerOfSun(x))"]}
{"id": "entailmentbank_train_283", "nl": "nuclear fusion happens in the core layer of the sun.", "fol": "", "prediction": ["all x y.((NuclearFusion(x) & Sun(y)) -> HappensInCoreLayer(x,y))"]}
{"id": "entailmentbank_train_284", "nl": "blue stars are the hottest in temperature.", "fol": "", "prediction": ["all x.(BlueStar(x) -> HottestInTemperature(x))"]}
{"id": "entailmentbank_train_285", "nl": "blue is a kind of color.", "fol": "", "prediction": ["all x.(Blue(x) -> Color(x))"]}
{"id": "entailmentbank_train_286", "nl": "stars that are blue in color are hottest in temperature.", "fol": "", "prediction": ["all x.((Star(x) & BlueColor(x)) -> HottestInTemperature(x))"]}
{"id": "entailmentbank_train_287", "nl": "earth is a celestial object.", "fol": "", "prediction": ["all x.(Earth(x) -> CelestialObject(x))"]}
{"id": "entailmentbank_train_288", "nl": "the moon is a kind of moon.", "fol": "", "prediction": ["all x.(Moon(x) -> Moon(x))"]}
{"id": "entailmentbank_train_289", "nl": "a moon is a kind of celestial object / body.", "fol": "", "prediction": ["all x.(Moon(x) -> (CelestialObject(x) & CelestialBody(x)))"]}
{"id": "entailmentbank_train_290", "nl": "the moon is a celestial object.", "fol": "", "prediction": ["all x.(Moon(x) -> CelestialObject(x))"]}
{"id": "entailmentbank_train_291", "nl": "earth and the moon are celestial objects.", "fol": "", "prediction": ["all x.((Earth(x) | Moon(x)) -> CelestialObject(x))"]}
{"id": "entailmentbank_train_292", "nl": "the earth has more mass than the moon.", "fol": "", "prediction": ["all x y.((Earth(x) & Moon(y)) -> MoreMass(x,y))"]}
{"id": "entailmentbank_train_293", "nl": "the surface gravity on the moon will be less than the surface gravity on earth.", "fol": "", "prediction": ["all x y.((Moon(x) & Earth(y)) -> SurfaceGravityLessThan(x,y))"]}
{"id": "entailmentbank_train_294", "nl": "as the force of gravity decreases, the weight of the object will decrease.", "fol": "", "prediction": ["all x.((ForceOfGravity(x) & Decreases(x)) -> WeightDecreases(x))"]}
{"id": "entailmentbank_train_295", "nl": "the weight of an object on moon will be less than the weight of an object on earth.", "fol": "", "prediction": ["all x y.((Object(x) & Moon(y) & Earth(y)) -> WeightLessThan(x,y))"]}
{"id": "entailmentbank_train_296", "nl": "a golf ball is a kind of object.", "fol": "", "prediction": ["all x.(GolfBall(x) -> Object(x))"]}
{"id": "entailmentbank_train_297", "nl": "the weight of a gold ball will be less on the moon than on earth.", "fol": "", "prediction": ["all x y.((GoldBall(x) & Moon(y)) -> LessWeightOn(x,y))"]}
{"id": "entailmentbank_train_298", "nl": "the mass of a planet causes the pull of gravity on that planet.", "fol": "", "prediction": ["all x y.((Planet(x) & Planet(y)) -> CausesPullOfGravity(x,y))"]}
{"id": "entailmentbank_train_299", "nl": "the mass of the earth causes the pull of gravity on earth.", "fol": "", "prediction": ["all x y.((MassOfEarth(x) & Earth(y)) -> CausesPullOfGravity(x,y))"]}
{"id": "entailmentbank_train_300", "nl": "as the force of gravity changes, the weight of the object will change.", "fol": "", "prediction": ["all x y.((ForceOfGravity(x) & Object(y)) -> ChangesWeight(x,y))"]}
{"id": "entailmentbank_train_301", "nl": "weight is the force of gravity acting on an object.", "fol": "", "prediction": ["all x.(Weight(x) -> ForceOfGravity(x))"]}
{"id": "entailmentbank_train_302", "nl": "if the force of gravity changes, then the weight of the object will chagne.", "fol": "", "prediction": ["all x.((ForceOfGravity(x) & ChangesForceOfGravity(x)) -> WeightChagne(x))"]}
{"id": "entailmentbank_train_303", "nl": "a solid object is taken from earth into space.", "fol": "", "prediction": ["all x y.((SolidObject(x) & Earth(y)) -> TakenFromIntoSpace(x,y))"]}
{"id": "entailmentbank_train_304", "nl": "the force of gravity is different in space from the force of gravity on earth.", "fol": "", "prediction": ["all x y.((ForceOfGravity(x) & Space(y)) -> DifferentFromForceOfGravity(x,y))"]}
{"id": "entailmentbank_train_305", "nl": "the force of gravity on the solid object will change.", "fol": "", "prediction": ["all x.((ForceOfGravity(x) & SolidObject(x)) -> Changes(x))"]}
{"id": "entailmentbank_train_306", "nl": "the weight of the solid object will change.", "fol": "", "prediction": ["all x.(SolidObject(x) -> WeightChange(x))"]}
{"id": "entailmentbank_train_307", "nl": "a hammer is a kind of object.", "fol": "", "prediction": ["all x.(Hammer(x) -> Object(x))"]}
{"id": "entailmentbank_train_308", "nl": "an object will weigh less on the moon than on the earth because the moon has less mass than the earth.", "fol": "", "prediction": ["all x y.((Object(x) & Moon(y) & Earth(y)) -> WeighsLess(x,y))"]}
{"id": "entailmentbank_train_309", "nl": "a hammer will weigh less on the moon than on earth becasue the moon has less mass than the earth.", "fol": "", "prediction": ["all x y.((Hammer(x) & Moon(y) & Earth(y)) -> WeighsLess(x,y))"]}
{"id": "entailmentbank_train_310", "nl": "a rocket is a kind of object.", "fol": "", "prediction": ["all x.(Rocket(x) -> Object(x))"]}
{"id": "entailmentbank_train_311", "nl": "the rocket escapes the gravitational pull of earth.", "fol": "", "prediction": ["all x.(Rakete(x) -> EscapesGravitationalPullOfEarth(x))"]}
{"id": "entailmentbank_train_312", "nl": "the rocket escaping the gravitational pull of earth is an example of an object escapes the gravitational pull of a planet.", "fol": "", "prediction": ["all x y.((Rocket(x) & Earth(y) & EscapesGravitationalPull(x,y)) -> EscapesGravitationalPull(x,y))"]}
{"id": "entailmentbank_train_313", "nl": "if an object escapes the gravitational pull of a planet, then the force of gravity on that object will change.", "fol": "", "prediction": ["all x y.((Object(x) & Planet(y) & EscapesGravitationalPull(x,y)) -> ForceOfGravityChange(x,y))"]}
{"id": "entailmentbank_train_314", "nl": "the force of gravity on the rocket changes when it escapes the gravitational pull of earth.", "fol": "", "prediction": ["all x y.((Rocket(x) & GravitationalPull(y) & Escapes(x,y)) -> ChangesForce(x,y))"]}
{"id": "entailmentbank_train_315", "nl": "as the force of gravity changes, the mass of the object will stay the same.", "fol": "", "prediction": ["all x y.((ForceOfGravity(x) & Object(y)) -> MassSame(y))"]}
{"id": "entailmentbank_train_316", "nl": "the mass of the rocket will stay the same after the rocket escapes the gravitational pull of earth.", "fol": "", "prediction": ["all x y.((Rocket(x) & GravitationalPull(y) & Escapes(x,y)) -> SameMass(x,y))"]}
{"id": "entailmentbank_train_317", "nl": "the weight of the rocket will change after the rocket escapes the gravitational pull of earth.", "fol": "", "prediction": ["all x y.((Rocket(x) & GravitationalPull(y) & Escapes(x,y)) -> WeightChange(x,y))"]}
{"id": "entailmentbank_train_318", "nl": "the mass of the rocket will stay the same and the weight of the rocket will change after the rocket escapes the gravitational pull of earth.", "fol": "", "prediction": ["all x y.((Rocket(x) & GravitationalPull(y)) -> (MassSame(x) & WeightChange(x,y)))"]}
{"id": "entailmentbank_train_319", "nl": "earth is greater in mass than mars.", "fol": "", "prediction": ["all x y.((Earth(x) & Mars(y)) -> GreaterMass(x,y))"]}
{"id": "entailmentbank_train_320", "nl": "earth is a planet that has a greater mass than the planet mars.", "fol": "", "prediction": ["all x y.((Planet(x) & Mars(y)) -> GreaterMassThan(x,y))"]}
{"id": "entailmentbank_train_321", "nl": "as mass of a planet / of a celestial body increases, the force of gravity on that planet will increase.", "fol": "", "prediction": ["all x y.((Planet(x) & CelestialBody(y) & MassIncreases(x,y)) -> GravityForceIncreases(x,y))"]}
{"id": "entailmentbank_train_322", "nl": "the force of gravity on earth will be greater than on mars.", "fol": "", "prediction": ["all x y.((Earth(x) & Mars(y)) -> GravityForceGreater(x,y))"]}
{"id": "entailmentbank_train_323", "nl": "as the force of gravity increases, the weight of objects will increase.", "fol": "", "prediction": ["all x.((Gravity(x) & IncreasesForce(x)) -> IncreasesWeightOfObjects(x))"]}
{"id": "entailmentbank_train_324", "nl": "objects will weigh more on earth than on mars because the force of gravity is greater on earth than on mars.", "fol": "", "prediction": ["all x y.((Object(x) & Earth(y) & Mars(z)) -> WeighsMore(x,y,z))"]}
{"id": "entailmentbank_train_325", "nl": "objects will weigh less on mars than on earth because the force of gravity is less on mars.", "fol": "", "prediction": ["all x y.((Object(x) & Mars(y) & Earth(z)) -> WeighsLess(x,y,z))"]}
{"id": "entailmentbank_train_326", "nl": "the gravitational force of a planet does not change the mass of an object on that planet or celestial body.", "fol": "", "prediction": ["all x y.((GravitationalForce(x) & Planet(y)) -> -ChangesMassOfObject(x,y))"]}
{"id": "entailmentbank_train_327", "nl": "objects will have the same mass on earth and on mars.", "fol": "", "prediction": ["all x y.((Object(x) & Earth(y) & Mars(y)) -> SameMass(x,y))"]}
{"id": "entailmentbank_train_328", "nl": "objects will weigh less and have the same mass on mars than on earth.", "fol": "", "prediction": ["all x y.((Object(x) & Mars(y)) -> WeighsLessAndSameMass(x,y))"]}
{"id": "entailmentbank_train_329", "nl": "the mars rover is a kind of vehicle.", "fol": "", "prediction": ["all x.(MarsRover(x) -> Vehicle(x))"]}
{"id": "entailmentbank_train_330", "nl": "a vehicle is a kind of object.", "fol": "", "prediction": ["all x.(Vehicle(x) -> Object(x))"]}
{"id": "entailmentbank_train_331", "nl": "the mars rover is a kind of object.", "fol": "", "prediction": ["all x.(MarsRover(x) -> Object(x))"]}
{"id": "entailmentbank_train_332", "nl": "the mars rover will weigh less and have the same mass on mars than on earth.", "fol": "", "prediction": ["all x y.((MarsRover(x) & Earth(y)) -> (WeighsLess(x,y) & SameMassOnMars(x,y)))"]}
{"id": "entailmentbank_train_333", "nl": "the gravitational force of a celestial object does not change the mass of an object on that planet or celestial body.", "fol": "", "prediction": ["all x y.((GravitationalForce(x) & CelestialObject(y)) -> -ChangesMass(x,y))"]}
{"id": "entailmentbank_train_334", "nl": "as the mass of celestial object decreases, the mass of the object on the celestial object will stay the same.", "fol": "", "prediction": ["all x y.((CelestialObject(x) & MassDecrease(x)) -> MassStaysSame(y))"]}
{"id": "entailmentbank_train_335", "nl": "an object will weigh less but have the same mass on the moon than on earth.", "fol": "", "prediction": ["all x y.((Object(x) & Moon(y)) -> WeighsLess(x,y))"]}
{"id": "entailmentbank_train_336", "nl": "the rocket will weigh less but have the same mass on the moon than on earth.", "fol": "", "prediction": ["all x y.((Rocket(x) & Moon(y)) -> WeighsLess(x,y))"]}
{"id": "entailmentbank_train_337", "nl": "a robot is a kind of object.", "fol": "", "prediction": ["all x.(Robot(x) -> Object(x))"]}
{"id": "entailmentbank_train_338", "nl": "the robot will weigh less on mars than earth but will have the same mass.", "fol": "", "prediction": ["all x y.((Robot(x) & Earth(y)) -> (WeighsLessOnMars(x,y) & SameMass(x,y)))"]}
{"id": "entailmentbank_train_339", "nl": "getting information sometimes requires observing / observation.", "fol": "", "prediction": ["all x.((GetInformation(x) & SometimesRequiresObservation(x)) -> RequiresObservation(x))"]}
{"id": "entailmentbank_train_340", "nl": "a telescope is used for observing stars by astronomers.", "fol": "", "prediction": ["all x y.((Telescope(x) & Astronomer(y)) -> UsedForObservingStars(x,y))"]}
{"id": "entailmentbank_train_341", "nl": "getting information about stars requires using a telescope.", "fol": "", "prediction": ["all x.((Star(x) & Telescope(x)) -> Requires(x,y))"]}
{"id": "entailmentbank_train_342", "nl": "a computer is used for communication / finding information.", "fol": "", "prediction": ["all x.(Computer(x) -> (UsedForCommunication(x) & UsedForFindingInformation(x)))"]}
{"id": "entailmentbank_train_343", "nl": "a telescope and a computer can be used to getting information about stars and communicate the information to other people.", "fol": "", "prediction": ["all x y.((Telescope(x) & Computer(y)) -> (GetsInformationAboutStars(x) & CommunicatesInformationToOthers(x)))"]}
{"id": "entailmentbank_train_344", "nl": "detailed observation of celestial objects requires a telescope.", "fol": "", "prediction": ["all x.(DetailedObservationOfCelestialObjects(x) -> RequiresTelescope(x))"]}
{"id": "entailmentbank_train_345", "nl": "a planet is a kind of celestial object / celestial body.", "fol": "", "prediction": ["all x.(Planet(x) -> (CelestialObject(x) & CelestialBody(x)))"]}
{"id": "entailmentbank_train_346", "nl": "detailed observation of planets, stars, and moons requires a telescope.", "fol": "", "prediction": ["all x.((Planet(x) | Star(x) | Moon(x)) -> RequiresTelescope(x))"]}
{"id": "entailmentbank_train_347", "nl": "as distance to a city decreases, the amount of light pollution will increase.", "fol": "", "prediction": ["all x y.((Distance(x) & City(y) & Decreases(x,y)) -> IncreasesLightPollution(x))"]}
{"id": "entailmentbank_train_348", "nl": "as light pollution increases, seeing the stars will be harder.", "fol": "", "prediction": ["all x.((LightPollution(x) & Increases(x)) -> SeesStarsHarsh(x))"]}
{"id": "entailmentbank_train_349", "nl": "light pollution caused by city make seeing the stars harder.", "fol": "", "prediction": ["all x y.((LightPollution(x) & City(y) & CausedBy(x,y)) -> MakesSeeingStarsHarsh(x))"]}
{"id": "entailmentbank_train_350", "nl": "a telescope is used for observing stars.", "fol": "", "prediction": ["all x.(Telescope(x) -> UsedForObservingStars(x))"]}
{"id": "entailmentbank_train_351", "nl": "being away from the light pollution caused by city can help using telescope to see stars.", "fol": "", "prediction": ["all x.((AwayFromLightPollution(x) & City(x)) -> HelpsSeeStars(x))"]}
{"id": "entailmentbank_train_352", "nl": "a telescope is used for observing the sky by astronomers.", "fol": "", "prediction": ["all x y.((Telescope(x) & Astronomer(y)) -> UsedForObservingSky(x,y))"]}
{"id": "entailmentbank_train_353", "nl": "making discoveries requires observing.", "fol": "", "prediction": ["all x.(Discovery(x) -> RequiresObservation(x))"]}
{"id": "entailmentbank_train_354", "nl": "observing the sky with a telescope help making descoveries.", "fol": "", "prediction": ["all x.(ObservesSkyWithTelescope(x) -> MakesDescoveries(x))"]}
{"id": "entailmentbank_train_355", "nl": "jupiter is a kind of planet.", "fol": "", "prediction": ["all x.(Jupiter(x) -> Planet(x))"]}
{"id": "entailmentbank_train_356", "nl": "moons will orbit around jupiter.", "fol": "", "prediction": ["all x.(Moon(x) -> OrbitsAroundJupiter(x))"]}
{"id": "entailmentbank_train_357", "nl": "a telescope is used for observing moons and planets by astronomers.", "fol": "", "prediction": ["all x y.((Telescope(x) & Astronomer(y)) -> (ObservesMoons(x,y) | ObservesPlanets(x,y)))"]}
{"id": "entailmentbank_train_358", "nl": "a telescope can be used to observe the moons around jupiter.", "fol": "", "prediction": ["all x y.((Telescope(x) & Moon(y)) -> ObservesAroundJupiter(x,y))"]}
{"id": "entailmentbank_train_359", "nl": "a reflecting telescope is a kind of telescope.", "fol": "", "prediction": ["all x.(ReflectingTelescope(x) -> Telescope(x))"]}
{"id": "entailmentbank_train_360", "nl": "a reflecting telescope can be used to observe the moons around jupiter.", "fol": "", "prediction": ["all x y.((ReflectingTelescope(x) & Moon(y)) -> ObservesAroundJupiter(x,y))"]}
{"id": "entailmentbank_train_361", "nl": "a telescope is used for observing planets.", "fol": "", "prediction": ["all x.(Telescope(x) -> UsedForObservingPlanets(x))"]}
{"id": "entailmentbank_train_362", "nl": "venus is a kind of planet.", "fol": "", "prediction": ["all x.(Venus(x) -> Planet(x))"]}
{"id": "entailmentbank_train_363", "nl": "a telescope can be used for observing venus.", "fol": "", "prediction": ["all x.(Telescope(x) -> ObservesVenus(x))"]}
{"id": "entailmentbank_train_364", "nl": "venus has moon-like phases.", "fol": "", "prediction": ["all x.(Venus(x) -> MoonLikePhases(x))"]}
{"id": "entailmentbank_train_365", "nl": "a telescope can be used to observe the moon-like phases of venus.", "fol": "", "prediction": ["all x y.((Telescope(x) & Moon(y)) -> Observes(x,y))"]}
{"id": "entailmentbank_train_366", "nl": "recording something requires observing it first.", "fol": "", "prediction": ["all x.(Recording(x) -> RequiresObserving(x))"]}
{"id": "entailmentbank_train_367", "nl": "the scientists want to record the passing of a distant comet.", "fol": "", "prediction": ["all x y.((Scientist(x) & Comet(y)) -> WantsToRecordPassage(x,y))"]}
{"id": "entailmentbank_train_368", "nl": "the scientists need to observe the comet in order to record the passing of it.", "fol": "", "prediction": ["all x y.((Scientist(x) & Comet(y)) -> NeedsObservation(x,y))"]}
{"id": "entailmentbank_train_369", "nl": "a comet is a kind of celestial object.", "fol": "", "prediction": ["all x.(Comet(x) -> CelestialObject(x))"]}
{"id": "entailmentbank_train_370", "nl": "a telescope is used for observing celestial objects.", "fol": "", "prediction": ["all x.(Telescope(x) -> UsedForObservingCelestialObjects(x))"]}
{"id": "entailmentbank_train_371", "nl": "a telescope can be used to observe the comet to record the passing of it.", "fol": "", "prediction": ["all x y.((Telescope(x) & Comet(y)) -> CanObserveToRecordPassage(x,y))"]}
{"id": "entailmentbank_train_372", "nl": "a camera is used for recording images.", "fol": "", "prediction": ["all x.(Camera(x) -> UsedForRecordingImages(x))"]}
{"id": "entailmentbank_train_373", "nl": "a telescope can be used to observe the comet and a camera can be used to record the passing of it.", "fol": "", "prediction": ["all x y.((Telescope(x) & Camera(y)) -> (ObservesComet(x) & RecordsPassage(y)))"]}
{"id": "entailmentbank_train_374", "nl": "an optical telescope requires visible light for human to use.", "fol": "", "prediction": ["all x.(OpticalTelescope(x) -> RequiresVisibleLight(x))"]}
{"id": "entailmentbank_train_375", "nl": "clouds / dusts block visible light.", "fol": "", "prediction": ["all x.(Cloud(x) | Dust(x)) -> BlocksVisibleLight(x))"]}
{"id": "entailmentbank_train_376", "nl": "if there is clouds or dusts, then the optical telescope cannot be used.", "fol": "", "prediction": ["all x.((Clouds(x) | Dusts(x)) -> -OpticalTelescope(x))"]}
{"id": "entailmentbank_train_377", "nl": "radio telescopes can see through clouds and dust.", "fol": "", "prediction": ["all x.(RadioTelescope(x) -> (SeesThroughClouds(x) & SeesThroughDust(x)))"]}
{"id": "entailmentbank_train_378", "nl": "the advantage of using radio telescopes is that the radio telescopes can still be used when there is clouds or dusts.", "fol": "", "prediction": ["all x.((RadioTelescope(x) & (Clouds(x) | Dusts(x))) -> CanBeUsed(x))"]}
{"id": "entailmentbank_train_379", "nl": "a moon phase occurs 28 days after the last time it occurred.", "fol": "", "prediction": ["all x.(MoonPhase(x) -> OccursAfterLastTime(x,28))"]}
{"id": "entailmentbank_train_380", "nl": "a full moon is a kind of phase of the moon.", "fol": "", "prediction": ["all x.(FullMoon(x) -> PhaseOfMoon(x))"]}
{"id": "entailmentbank_train_381", "nl": "a full moon will occur 28 days after the last time it occurs.", "fol": "", "prediction": ["all x.(FullMoon(x) -> Occurs28DaysAfterLastOccurs(x))"]}
{"id": "entailmentbank_train_382", "nl": "1 month is equal to 28-31 days.", "fol": "", "prediction": ["all x.(Month(x) -> (Equals(x,28) | Equals(x,31)))"]}
{"id": "entailmentbank_train_383", "nl": "a full moon will occur after a month it occurs.", "fol": "", "prediction": ["all x.(FullMoon(x) -> OccursAfterMonth(x))"]}
{"id": "entailmentbank_train_384", "nl": "a new moon is a kind of phase of the moon.", "fol": "", "prediction": ["all x.(NewMoon(x) -> PhaseOfMoon(x))"]}
{"id": "entailmentbank_train_385", "nl": "a new moon will occur 28 days after the last time it occurs.", "fol": "", "prediction": ["all x.(NewMoon(x) -> Occurs28DaysAfterLastOccurs(x))"]}
{"id": "entailmentbank_train_386", "nl": "a new moon occurred on june 2.", "fol": "", "prediction": ["all x y.((NewMoon(x) & June2(y)) -> OccursOn(x,y))"]}
{"id": "entailmentbank_train_387", "nl": "the next new moon will occur 28 days after june 2.", "fol": "", "prediction": ["all x y.((NewMoon(x) & June2(y)) -> Occurs28DaysAfter(x,y))"]}
{"id": "entailmentbank_train_388", "nl": "2 plus 28 equals 30.", "fol": "", "prediction": ["all x.((2+28(x) & 30(x)) -> Equals(x,2))"]}
{"id": "entailmentbank_train_389", "nl": "the next new moon will occur on june 30.", "fol": "", "prediction": ["all x.(NewMoon(x) -> OccursOnJune30(x))"]}
{"id": "entailmentbank_train_390", "nl": "the new moon is when the dark half of the moon faces the earth.", "fol": "", "prediction": ["all x.(NewMoon(x) -> (DarkHalfOfMoon(x) & FacesEarth(x)))"]}
{"id": "entailmentbank_train_391", "nl": "the new moon is when the lighted half of the moon faces the sun.", "fol": "", "prediction": ["all x.(NewMoon(x) -> (LightedHalfOfMoon(x) & FacesSun(x)))"]}
{"id": "entailmentbank_train_392", "nl": "the moon phase where the lighted half of the moon faces the sun and dark half of the moon faces the earth is called new moon.", "fol": "", "prediction": ["all x.((MoonPhase(x) & LightedHalfOfMoon(x) & DarkHalfOfMoon(x) & FacesEarth(x)) -> NewMoon(x))"]}
{"id": "entailmentbank_train_393", "nl": "each of the moon's phases occurs once per month.", "fol": "", "prediction": ["all x.(MoonPhase(x) -> OccursOncePerMonth(x))"]}
{"id": "entailmentbank_train_394", "nl": "a full moon occurs once per month.", "fol": "", "prediction": ["all x.(FullMoon(x) -> OccursOncePerMonth(x))"]}
{"id": "entailmentbank_train_395", "nl": "the dark half of the moon is not visible.", "fol": "", "prediction": ["all x.(DarkHalfOfMoon(x) -> -Visible(x))"]}
{"id": "entailmentbank_train_396", "nl": "new moon is when the moon cannot be seen in a clear night sky.", "fol": "", "prediction": ["all x.((Moon(x) & -CanBeSeenInClearNightSky(x)) -> NewMoon(x))"]}
{"id": "entailmentbank_train_397", "nl": "a student cannot observe the moon in the clear night sky on feburary 21.", "fol": "", "prediction": ["all x y.((Student(x) & Moon(y) & ClearNightSky(x,y)) -> -Observes(x,y))"]}
{"id": "entailmentbank_train_398", "nl": "the student observes a new moon phase on feburary 21.", "fol": "", "prediction": ["all x y.((Student(x) & Feburary21(y)) -> ObservesNewMoonPhase(x,y))"]}
{"id": "entailmentbank_train_399", "nl": "the next new moon will occur 28 days after feburary 21.", "fol": "", "prediction": ["all x.(NewMoon(x) -> OccursAfterFeburary(x,28))"]}
{"id": "entailmentbank_train_400", "nl": "28 days after feburary 21 is march 21.", "fol": "", "prediction": ["all x.((Feburary(x) & March(x)) -> 28DaysAfter(x,Feburary21))"]}
{"id": "entailmentbank_train_401", "nl": "the next new moon will occur on march 21.", "fol": "", "prediction": ["all x.(NewMoon(x) -> OccursOnMars21(x))"]}
{"id": "entailmentbank_train_402", "nl": "the moon revolving around / orbiting the earth causes the phases of the moon.", "fol": "", "prediction": ["all x y.((Moon(x) & Earth(y) & RevolvingAround(x,y)) -> Orbiting(x,y))"]}
{"id": "entailmentbank_train_403", "nl": "the moon orbiting the earth occurs once per month.", "fol": "", "prediction": ["all x y.((Moon(x) & Earth(y)) -> Orbits(x,y))"]}
{"id": "entailmentbank_train_404", "nl": "a revolution occurs when something revolves around something else.", "fol": "", "prediction": ["all x y.((Revolution(x) & Something(y) & RevolvesAround(x,y)) -> Occurs(x))"]}
{"id": "entailmentbank_train_405", "nl": "the earth revolves around the sun.", "fol": "", "prediction": ["all x y.((Earth(x) & Sun(y)) -> RevolvesAround(x,y))"]}
{"id": "entailmentbank_train_406", "nl": "revolution can be used to describe the earth revolving around the sun.", "fol": "", "prediction": ["all x y.((Revolution(x) & Earth(y)) -> Description(x,y))"]}
{"id": "entailmentbank_train_407", "nl": "gravity causes orbits.", "fol": "", "prediction": ["all x.(Gravity(x) -> CausesOrbits(x))"]}
{"id": "entailmentbank_train_408", "nl": "gravity causes the planets in the solar system to orbit the sun.", "fol": "", "prediction": ["all x y.((Planet(x) & SolarSystem(y)) -> CausesOrbit(x,y))"]}
{"id": "entailmentbank_train_409", "nl": "mars is located in the solar system.", "fol": "", "prediction": ["all x.(Mars(x) -> LocatedInSolarSystem(x))"]}
{"id": "entailmentbank_train_410", "nl": "mars is a planet in the solar system.", "fol": "", "prediction": ["all x.(Mars(x) -> PlanetInSolarSystem(x))"]}
{"id": "entailmentbank_train_411", "nl": "gravity causes mars to orbit around the sun.", "fol": "", "prediction": ["all x y.((Gravity(x) & Mars(y)) -> OrbitsAroundSun(y,x))"]}
{"id": "entailmentbank_train_412", "nl": "gravity causes planets in the solar system to orbit the sun.", "fol": "", "prediction": ["all x y.((Planet(x) & SolarSystem(y)) -> CausesOrbit(x,y))"]}
{"id": "entailmentbank_train_413", "nl": "the sun is the celestial object that has the greatest gravity in the solar system.", "fol": "", "prediction": ["all x.(Sun(x) -> (CelestialObject(x) & GreatestGravity(x)))"]}
{"id": "entailmentbank_train_414", "nl": "the gravity of the sun causes the planets in the solar system to orbit the sun.", "fol": "", "prediction": ["all x y.((Sun(x) & Planet(y)) -> CausesOrbit(x,y))"]}
{"id": "entailmentbank_train_415", "nl": "uranus is a kind of planet.", "fol": "", "prediction": ["all x.(Uranus(x) -> Planet(x))"]}
{"id": "entailmentbank_train_416", "nl": "uranus is located in the solar system.", "fol": "", "prediction": ["all x.(Uranus(x) -> LocatedInSolarSystem(x))"]}
{"id": "entailmentbank_train_417", "nl": "uranus is a planet located in the solar system.", "fol": "", "prediction": ["all x.(Uranus(x) -> Planet(x))"]}
{"id": "entailmentbank_train_418", "nl": "uranus is a planet in the solar system that orbits around the sun.", "fol": "", "prediction": ["all x.(Uranus(x) -> (PlanetInSolarSystem(x) & OrbitsAroundSun(x)))"]}
{"id": "entailmentbank_train_419", "nl": "gravity causes uranus to orbit around the sun.", "fol": "", "prediction": ["all x y.((Gravity(x) & Uranus(y)) -> OrbitsAroundSun(y,x))"]}
{"id": "entailmentbank_train_420", "nl": "the moon's orbit is elliptical.", "fol": "", "prediction": ["all x.(Moon(x) -> EllipticalOrbit(x))"]}
{"id": "entailmentbank_train_421", "nl": "the moon orbits the earth in an elliptical orbit once per month.", "fol": "", "prediction": ["all x y.((Moon(x) & Earth(y)) -> OrbitsInEllipticalOrbit(x,y))"]}
{"id": "entailmentbank_train_422", "nl": "planetary orbits are mostly elliptical.", "fol": "", "prediction": ["all x.(PlanetaryOrbit(x) -> Elliptical(x))"]}
{"id": "entailmentbank_train_423", "nl": "planets in the solar system orbit the sun in an elliptical orbit.", "fol": "", "prediction": ["all x y.((Planet(x) & SolarSystem(y)) -> OrbitsInEllipticalOrbit(x,y))"]}
{"id": "entailmentbank_train_424", "nl": "astronauts require preserved food for extended flights.", "fol": "", "prediction": ["all x.(Astronaut(x) -> RequiresPreservedFood(x))"]}
{"id": "entailmentbank_train_425", "nl": "dehydrating food is used for preserving food.", "fol": "", "prediction": ["all x.(DehydratingFood(x) -> UsedForPreservingFood(x))"]}
{"id": "entailmentbank_train_426", "nl": "dehydrating food can be used for preserving food for extended flights.", "fol": "", "prediction": ["all x.(DehydratingFood(x) -> (PreservesFood(x) & ExtendedFlights(x)))"]}
{"id": "entailmentbank_train_427", "nl": "a space probe can orbit / land on other planets.", "fol": "", "prediction": ["all x y.((SpaceProbe(x) & Planet(y)) -> (Orbits(x,y) | LandsOn(x,y)))"]}
{"id": "entailmentbank_train_428", "nl": "a space probe can land on mars.", "fol": "", "prediction": ["all x.(SpaceProbe(x) -> CanLandOnMars(x))"]}
{"id": "entailmentbank_train_429", "nl": "a space probe is used for collecting / analyzing materials / samples / information.", "fol": "", "prediction": ["all x.(SpaceProbe(x) -> (Collects(x) & Analyzes(x) & Materials(x) & Samples(x) & Information(x)))"]}
{"id": "entailmentbank_train_430", "nl": "a space probe can land on mars and collect and analyze samples.", "fol": "", "prediction": ["all x.(SpaceProbe(x) -> (LandsOnMars(x) & CollectsAndAnalyzesSamples(x)))"]}
{"id": "entailmentbank_train_431", "nl": "the viking i lander was sent to mars and analyze atmospheric gases and soil samples.", "fol": "", "prediction": ["all x.(VikingILanding(x) -> (SentToMars(x) & AnalyzesAtmosphericGases(x) & AnalyzesSoilSamples(x)))"]}
{"id": "entailmentbank_train_432", "nl": "the viking i lander is a kind of space probe.", "fol": "", "prediction": ["all x.(VikingILanding(x) -> SpaceProbe(x))"]}
{"id": "entailmentbank_train_433", "nl": "low tide is a stage in the tide cycle process.", "fol": "", "prediction": ["all x.(LowTide(x) -> StageInTidalCycle(x))"]}
{"id": "entailmentbank_train_434", "nl": "the tide cycle occurs regularly twice per day.", "fol": "", "prediction": ["all x.(TideCycle(x) -> OccursRegularly(x,2))"]}
{"id": "entailmentbank_train_435", "nl": "high tide is a stage in the tide cycle process.", "fol": "", "prediction": ["all x.(HighTide(x) -> StageInTidalCycle(x))"]}
{"id": "entailmentbank_train_436", "nl": "high tide and low tide in the tide cycle occur twice per day.", "fol": "", "prediction": ["all x.((TideCycle(x) & HighTidal(x) & LowTidal(x)) -> OccursTwoTimesPerDay(x))"]}
{"id": "entailmentbank_train_437", "nl": "a tide is a kind of natural event.", "fol": "", "prediction": ["all x.(Tide(x) -> NaturalEvent(x))"]}
{"id": "entailmentbank_train_438", "nl": "high tide and low tide in the tidy cycle are the natural event that occur twice per day.", "fol": "", "prediction": ["all x.((HighTidal(x) & LowTidal(x)) -> NaturalEvent(x))"]}
{"id": "entailmentbank_train_439", "nl": "the tide is when ocean levels periodically rise / fall.", "fol": "", "prediction": ["all x.(Tide(x) -> (OceanLevelsRise(x) & OceanLevelsFall(x)))"]}
{"id": "entailmentbank_train_440", "nl": "the gravitational pull of the moon on earth's oceans causes the tides.", "fol": "", "prediction": ["all x y z.((Moon(x) & EarthsOceans(y) & GravitationalPull(x,y) & EarthsOceans(z)) -> CausesTides(x))"]}
{"id": "entailmentbank_train_441", "nl": "the gravitational pull causes the ocean levels on earth to rise and fall periodically.", "fol": "", "prediction": ["all x y.((GravitationalPull(x) & OceanLevel(y)) -> (CausesRise(y,x) & CausesFall(y,x)))"]}
{"id": "entailmentbank_train_442", "nl": "moving away from the source increases the distance.", "fol": "", "prediction": ["all x.((Source(x) & MovingAway(x)) -> IncreasesDistance(x))"]}
{"id": "entailmentbank_train_443", "nl": "the moon moves away from earth.", "fol": "", "prediction": ["all x y.((Moon(x) & Earth(y)) -> MovesAway(x,y))"]}
{"id": "entailmentbank_train_444", "nl": "the moon moving away from earth increases the distance between the moon and the earth.", "fol": "", "prediction": ["all x y.((Moon(x) & Earth(y)) -> IncreasesDistance(x,y))"]}
{"id": "entailmentbank_train_445", "nl": "as the distance from an object increases, the force of gravity on that object will decrease.", "fol": "", "prediction": ["all x y.((Distance(x) & Object(y) & IncreasedDistance(x,y)) -> ForceOfGravityDecreased(x,y))"]}
{"id": "entailmentbank_train_446", "nl": "the moon moving away from earth causes the force of gravity of moon on earth decreases.", "fol": "", "prediction": ["all x y.((Moon(x) & Earth(y) & MovingAwayFrom(x,y)) -> ForceOfGravityDecreases(x,y))"]}
{"id": "entailmentbank_train_447", "nl": "as the gravitational pull of the moon decreases, the height of ocean tides will decrease.", "fol": "", "prediction": ["all x y.((GravitationalPull(x) & Moon(y) & Decreases(x,y)) -> HeightDecreases(x,y))"]}
{"id": "entailmentbank_train_448", "nl": "the moon moving away from earth causes the height of ocean tides on earth to decrease.", "fol": "", "prediction": ["all x y.((Moon(x) & Earth(y) & MovingAwayFrom(x,y)) -> CausesDecreasedHeightOfOceanTides(x,y))"]}
{"id": "entailmentbank_train_449", "nl": "the sun is a source of light / light energy called sunlight.", "fol": "", "prediction": ["all x.(Sun(x) -> (SourceOfLight(x) & SourceOfLightEnergy(x)))"]}
{"id": "entailmentbank_train_450", "nl": "as a source of light moves directly overhead of an object, the size of the shadow of that object will decrease.", "fol": "", "prediction": ["all x y.((SourceOfLight(x) & Object(y) & MovesOverhead(x,y)) -> ShadowSizeDecreases(x,y))"]}
{"id": "entailmentbank_train_451", "nl": "when the sun moves directly overhead of an object, the size of the shadow of that object will be the smallest.", "fol": "", "prediction": ["all x y.((Sun(x) & Object(y) & MovesOverhead(x,y)) -> ShadowSizeSiest(x,y))"]}
{"id": "entailmentbank_train_452", "nl": "the sun is located directly overhead at noon.", "fol": "", "prediction": ["all x.(Sun(x) -> (LocatedOverheadAt(x,Moon)))"]}
{"id": "entailmentbank_train_453", "nl": "the shadows of an object at noon will be the smallest.", "fol": "", "prediction": ["all x.((Shadow(x) & AtMeal(x)) -> Smallest(x))"]}
{"id": "entailmentbank_train_454", "nl": "a flagpole is a kind of object.", "fol": "", "prediction": ["all x.(Flagpole(x) -> Object(x))"]}
{"id": "entailmentbank_train_455", "nl": "the shadow of a flagpole will be the smallest at noon.", "fol": "", "prediction": ["all x.((Shadow(x) & Flagpole(x)) -> SmallestAtMeal(x))"]}
{"id": "entailmentbank_train_456", "nl": "new land can be formed by lava cooling after an volcano eruption.", "fol": "", "prediction": ["all x.((Land(x) & LavaCooling(x)) -> Forms(x))"]}
{"id": "entailmentbank_train_457", "nl": "volcano eruption is when volcano deposits lava to the earth's surface.", "fol": "", "prediction": ["all x.(VolcanoEruption(x) -> DepositsLavaToEarthSurface(x))"]}
{"id": "entailmentbank_train_458", "nl": "volcano eruption can form a new land.", "fol": "", "prediction": ["all x.(VolcanoEruption(x) -> CanFormNewLand(x))"]}
{"id": "entailmentbank_train_459", "nl": "a volcanic eruption is a kind of quick process.", "fol": "", "prediction": ["all x.(VolcanicEruption(x) -> QuickProcess(x))"]}
{"id": "entailmentbank_train_460", "nl": "volcano eruption is a quick process to form land.", "fol": "", "prediction": ["all x.(VolcanoEruption(x) -> QuickProcessToFormLand(x))"]}
{"id": "entailmentbank_train_461", "nl": "most canyons are formed by flowing rivers.", "fol": "", "prediction": ["all x.(Cannon(x) -> FormedByFlowingRivers(x))"]}
{"id": "entailmentbank_train_462", "nl": "a valley is formed by a river flowing.", "fol": "", "prediction": ["all x y.((Valley(x) & River(y)) -> FormedBy(x,y))"]}
{"id": "entailmentbank_train_463", "nl": "canyons and valleys are formed by flowing rivers.", "fol": "", "prediction": ["all x y.((Cannon(x) & Valley(y)) -> (FormedByFloatingRiver(x,y) & FormedBy(x,y)))"]}
{"id": "entailmentbank_train_464", "nl": "sometimes piles of rocks are formed by melting glaciers depositing rocks.", "fol": "", "prediction": ["exists x.(PilkOfRocks(x) & MeltingGlacier(x) & DepositsRocks(x))"]}
{"id": "entailmentbank_train_465", "nl": "deposition is a kind of constructive force.", "fol": "", "prediction": ["all x.(Deposition(x) -> ConstructiveForce(x))"]}
{"id": "entailmentbank_train_466", "nl": "piles of rocks are formed by the constructive forc of glaciers.", "fol": "", "prediction": ["all x y.((Pile(x) & Rock(y)) -> FormedByConstructiveForcOfGlaciers(x,y))"]}
{"id": "entailmentbank_train_467", "nl": "water deposits the leaves at the foot of the hill and fans out.", "fol": "", "prediction": ["all x y.((Water(x) & Hill(y)) -> (DepositsLeavesAtFoot(x,y) & FansOut(x,y)))"]}
{"id": "entailmentbank_train_468", "nl": "a delta is a kind of geologic structure.", "fol": "", "prediction": ["all x.(Delta(x) -> GeologicStructure(x))"]}
{"id": "entailmentbank_train_469", "nl": "a delta is formed by sediment depositing at the mouth of a river by water fanning out.", "fol": "", "prediction": ["all x y.((Delta(x) & River(y)) -> FormedBySedimentDepositing(x,y))"]}
{"id": "entailmentbank_train_470", "nl": "water depositing leaves at the foot of the hill is similar to water foarming a delta.", "fol": "", "prediction": ["all x y.((Water(x) & Hill(y) & DepositsLeaves(x,y)) -> SimilarTo(x,y))"]}
{"id": "entailmentbank_train_471", "nl": "a river is a kind of moving body of water.", "fol": "", "prediction": ["all x.(River(x) -> MovingBodyOfWater(x))"]}
{"id": "entailmentbank_train_472", "nl": "most canyons are formed by flowing rivers through erosion over long periods of time.", "fol": "", "prediction": ["all x.(Cylinder(x) -> (FormedByFlowingRiver(x) & Erosion(x) & LongPeriodsOfTime(x)))"]}
{"id": "entailmentbank_train_473", "nl": "canyons are formed by moving body of water through erosion over long periods of time.", "fol": "", "prediction": ["all x.(Canyon(x) -> (FormedByMovingBodyOfWater(x) & ThroughErosion(x) & OverLongPeriodsOfTime(x)))"]}
{"id": "entailmentbank_train_474", "nl": "a river is a kind of flowing body of water.", "fol": "", "prediction": ["all x.(River(x) -> FlowingBodyOfWater(x))"]}
{"id": "entailmentbank_train_475", "nl": "the colorado river is a kind of river.", "fol": "", "prediction": ["all x.(ColoradoRiver(x) -> River(x))"]}
{"id": "entailmentbank_train_476", "nl": "the colorado river is a kind of flowing body of water.", "fol": "", "prediction": ["all x.(ColoradoRiver(x) -> FlowingBodyOfWater(x))"]}
{"id": "entailmentbank_train_477", "nl": "the grand canyon was formed by the colorado river flowing over long periods of time.", "fol": "", "prediction": ["all x.(GrandCanyon(x) -> (FormedByColoradoRiver(x) & FlowsOverLongPeriods(x)))"]}
{"id": "entailmentbank_train_478", "nl": "a flowing body of water is important for forming the grand canyon.", "fol": "", "prediction": ["all x.(FlowingBodyOfWater(x) -> ImportantForGrandCanyon(x))"]}
{"id": "entailmentbank_train_479", "nl": "a dinosaur is a kind of extinct animal.", "fol": "", "prediction": ["all x.(Dinosaur(x) -> ExtinctAnimal(x))"]}
{"id": "entailmentbank_train_480", "nl": "an example of a fossil is the bones of an extinct animal.", "fol": "", "prediction": ["all x.(Fossil(x) -> (BonesOfExtinctAnimal(x)))"]}
{"id": "entailmentbank_train_481", "nl": "a bone is a part of some animals.", "fol": "", "prediction": ["all x.(Bone(x) -> PartOfAnimals(x))"]}
{"id": "entailmentbank_train_482", "nl": "the bones of dinosaurs are an example of fossils.", "fol": "", "prediction": ["all x.((DinosaurBone(x) & Bone(x)) -> Fossil(x))"]}
{"id": "entailmentbank_train_483", "nl": "index fossils can be used to determine the approximate age of other fossils in that area.", "fol": "", "prediction": ["all x y.((IndexFossil(x) & Area(y)) -> DeterminesApproximateAgeOfFossil(x,y))"]}
{"id": "entailmentbank_train_484", "nl": "index fossils can be used to determine the approximate age of the fossils of the bones of dinosaurs.", "fol": "", "prediction": ["all x.(IndexFossil(x) -> DeterminesApproximateAgeOfFossil(x))"]}
{"id": "entailmentbank_train_485", "nl": "if a species existed for a relatively short time then that species is now extinct.", "fol": "", "prediction": ["all x.((Species(x) & ExistedForRelativelyShortTime(x)) -> Extinct(x))"]}
{"id": "entailmentbank_train_486", "nl": "index fossils are formed from species that existed for a relatively short time.", "fol": "", "prediction": ["all x.(IndexFossil(x) -> (FormedFromSpecies(x) & ExistedForRelativelyShortTime(x)))"]}
{"id": "entailmentbank_train_487", "nl": "the species that form the index fossils are now extinct.", "fol": "", "prediction": ["all x.((Species(x) & FormsIndexFossil(x)) -> Extinct(x))"]}
{"id": "entailmentbank_train_488", "nl": "ocean animals are a kind of water animals living in oceans.", "fol": "", "prediction": ["all x.(OceanAnimal(x) -> (WaterAnimal(x) & LivesInOceans(x)))"]}
{"id": "entailmentbank_train_489", "nl": "fossils of ocean animals were found at the grand canyon.", "fol": "", "prediction": ["all x y.((OceanAnimal(x) & GrandCanyon(y)) -> FoundFossil(x,y))"]}
{"id": "entailmentbank_train_490", "nl": "fossils of water animals that lived in oceans were found at the grand canyon.", "fol": "", "prediction": ["all x y.((Fossil(x) & WaterAnimal(y) & LivedInOcean(y)) -> GrandCanyon(x))"]}
{"id": "entailmentbank_train_491", "nl": "if fossils of a water animal or plant are found in a place then that place used to be covered by water in the past.", "fol": "", "prediction": ["all x y.((Fossil(x) & WaterAnimalOrPlant(y) & FoundInPlace(x,y)) -> UsedToBeCoveredByWater(x,y))"]}
{"id": "entailmentbank_train_492", "nl": "the grand canyon used to be covered by oceans in the past.", "fol": "", "prediction": ["all x.(GrandCanyon(x) -> UsedToBeCoveredByOceans(x))"]}
{"id": "entailmentbank_train_493", "nl": "an ocean plant is a kind of water plant.", "fol": "", "prediction": ["all x.(OceanPlant(x) -> WaterPlant(x))"]}
{"id": "entailmentbank_train_494", "nl": "a fossil of an ocean plant is found in the desert.", "fol": "", "prediction": ["all x y.((Fossil(x) & OceanPlant(y) & FoundInDesert(x)) -> FoundInDesert(x,y))"]}
{"id": "entailmentbank_train_495", "nl": "the desert used to be covered by water in the past.", "fol": "", "prediction": ["all x.(Desert(x) -> UsedToBeCoveredByWater(x))"]}
{"id": "entailmentbank_train_496", "nl": "shell is a part of a mussel.", "fol": "", "prediction": ["all x.(Shell(x) -> PartOfMusel(x))"]}
{"id": "entailmentbank_train_497", "nl": "a freshwater mussel is a kind of mussel.", "fol": "", "prediction": ["all x.(FreshwaterMushel(x) -> Muschel(x))"]}
{"id": "entailmentbank_train_498", "nl": "shell  is a part of a freshwater mussel.", "fol": "", "prediction": ["all x.(Shell(x) -> FreshwaterMusel(x))"]}
{"id": "entailmentbank_train_499", "nl": "fossils of shells of freshwater mussels are found in a mountain range.", "fol": "", "prediction": ["all x y.((Fossil(x) & Shell(y) & FreshwaterMushels(y)) -> FoundInMountainRange(x,y))"]}
{"id": "entailmentbank_train_500", "nl": "fossils of freshwater mussels are found in the mountain range.", "fol": "", "prediction": ["all x.(Fossil(x) -> (FreshwaterMushels(x) & FoundInMountainRange(x)))"]}
{"id": "entailmentbank_train_501", "nl": "if fossils of a water animal or plant are found in a place then that animal or plant used to live in that place.", "fol": "", "prediction": ["all x y.((Fossil(x) & WaterAnimalOrPlant(y) & FoundInPlace(x,y)) -> UsedToLiveInPlace(x,y))"]}
{"id": "entailmentbank_train_502", "nl": "the freshwater mussels used to live in the place where the mountain range is located.", "fol": "", "prediction": ["all x y.((FreshwaterMushels(x) & MountainRange(y)) -> LivesIn(x,y))"]}
{"id": "entailmentbank_train_503", "nl": "a freshwater mussel is a mussel lives in freshwater.", "fol": "", "prediction": ["all x.(FreshwaterMushel(x) -> LivesInFreshwater(x))"]}
{"id": "entailmentbank_train_504", "nl": "a mussel is a kind of water animal.", "fol": "", "prediction": ["all x.(Muschel(x) -> WaterAnimal(x))"]}
{"id": "entailmentbank_train_505", "nl": "a freshwater mussel is a kind of water animal that lives in freshwater.", "fol": "", "prediction": ["all x.(FreshwaterMusel(x) -> (WaterAnimal(x) & LivesInFreshwater(x)))"]}
{"id": "entailmentbank_train_506", "nl": "the place of the mountain range used to be covered by freshwater.", "fol": "", "prediction": ["all x.(MountainRange(x) -> UsedToBeCoveredByFreshwater(x))"]}
{"id": "entailmentbank_train_507", "nl": "a river usually contains freshwater.", "fol": "", "prediction": ["all x.(River(x) -> ContainsFreshwater(x))"]}
{"id": "entailmentbank_train_508", "nl": "the place of the mountain range was likely to be covered by a river in the past.", "fol": "", "prediction": ["all x y.((MountainRange(x) & River(y)) -> CoveredBy(x,y))"]}
{"id": "entailmentbank_train_509", "nl": "a tropical environment usually has warm temperatures.", "fol": "", "prediction": ["all x.(TropicalEnvironment(x) -> WarmTemperatures(x))"]}
{"id": "entailmentbank_train_510", "nl": "coral lives in tropical oceans.", "fol": "", "prediction": ["all x.(Coral(x) -> LivesInTropicalOceans(x))"]}
{"id": "entailmentbank_train_511", "nl": "coral lives in warm oceans.", "fol": "", "prediction": ["all x.(Coral(x) -> LivesInWarmOceans(x))"]}
{"id": "entailmentbank_train_512", "nl": "coral is a kind of aquatic animal.", "fol": "", "prediction": ["all x.(Coral(x) -> AquaticAnimal(x))"]}
{"id": "entailmentbank_train_513", "nl": "if fossils of an aquatic animal or plant are found in a place then that place used to be covered by water in the past.", "fol": "", "prediction": ["all x y.((Fossil(x) & AquaticAnimalOrPlant(y) & FoundInPlace(x,y)) -> UsedToBeCoveredByWater(x,y))"]}
{"id": "entailmentbank_train_514", "nl": "fossils of corals are found in ohio.", "fol": "", "prediction": ["all x.(Fossil(x) -> FoundInOhio(x))"]}
{"id": "entailmentbank_train_515", "nl": "ohio used to be covered in warm oceans.", "fol": "", "prediction": ["all x.(Ohio(x) -> CoveredInWarmOceans(x))"]}
{"id": "entailmentbank_train_516", "nl": "fossils of seashells are found in a wooded area.", "fol": "", "prediction": ["all x.((Fossil(x) & Seashell(x)) -> FoundInWoodedArea(x))"]}
{"id": "entailmentbank_train_517", "nl": "the wooded area used to be covered by water in the past.", "fol": "", "prediction": ["all x.(WoodedArea(x) -> UsedToBeCoveredByWater(x))"]}
{"id": "entailmentbank_train_518", "nl": "if something used to be in the past then that something has changed.", "fol": "", "prediction": ["all x.((Past(x) & UsedToBe(x)) -> Changed(x))"]}
{"id": "entailmentbank_train_519", "nl": "the place has changed from being covered by water to a wooded area.", "fol": "", "prediction": ["all x.((Place(x) & CoveredByWater(x)) -> WoodedArea(x))"]}
{"id": "entailmentbank_train_520", "nl": "fossils of dinosaurs are found in antarctica.", "fol": "", "prediction": ["all x.(DinosaurFossil(x) -> FoundInAntarctica(x))"]}
{"id": "entailmentbank_train_521", "nl": "if fossils of an animal or plant are found in a place then that animal or plant used to live in that place.", "fol": "", "prediction": ["all x y.((AnimalOrPlant(x) & FoundInPlace(x,y)) -> UsedToLiveInPlace(x,y))"]}
{"id": "entailmentbank_train_522", "nl": "dinosaurs used to live in antarctica.", "fol": "", "prediction": ["all x.(Dinosaur(x) -> LivesInAntarctica(x))"]}
{"id": "entailmentbank_train_523", "nl": "a dinosaur is a kind of reptile.", "fol": "", "prediction": ["all x.(Dinosaur(x) -> Reptile(x))"]}
{"id": "entailmentbank_train_524", "nl": "a reptile is cold-blooded.", "fol": "", "prediction": ["all x.(Reptile(x) -> ColdBlooded(x))"]}
{"id": "entailmentbank_train_525", "nl": "dinosaurs are cold-blooded.", "fol": "", "prediction": ["all x.(Dinosaur(x) -> ColdBlooded(x))"]}
{"id": "entailmentbank_train_526", "nl": "cold-blooded animals cannot live in cold environments.", "fol": "", "prediction": ["all x.(ColdBloodedAnimal(x) -> -LivesInColdEnvironments(x))"]}
{"id": "entailmentbank_train_527", "nl": "dinosaurs cannot live in cold environments.", "fol": "", "prediction": ["all x.(Dinosaur(x) -> -LivesInColdEnvironments(x))"]}
{"id": "entailmentbank_train_528", "nl": "antarctica was not a cold environment when dinosaurs were alive.", "fol": "", "prediction": ["all x.((Antarctica(x) & Dinosaur(x)) -> -ColdEnvironment(x))"]}
{"id": "entailmentbank_train_529", "nl": "a shark is a kind of fish.", "fol": "", "prediction": ["all x.(Shark(x) -> Fish(x))"]}
{"id": "entailmentbank_train_530", "nl": "a fish is a kind of aquatic animal.", "fol": "", "prediction": ["all x.(Fish(x) -> AquaticAnimal(x))"]}
{"id": "entailmentbank_train_531", "nl": "a shark is a kind of aquatic animal.", "fol": "", "prediction": ["all x.(Shark(x) -> AquaticAnimal(x))"]}
{"id": "entailmentbank_train_532", "nl": "fossils of sharks are found on top of a mountain.", "fol": "", "prediction": ["all x y.((Shark(x) & Mountain(y)) -> FoundOnTopOf(x,y))"]}
{"id": "entailmentbank_train_533", "nl": "the mountain used to be covered by water and there were sharks living in there.", "fol": "", "prediction": ["all x.(Mountain(x) -> (CoveredByWater(x) & SharksLivingIn(x)))"]}
{"id": "entailmentbank_train_534", "nl": "sharks live in oceans.", "fol": "", "prediction": ["all x.(Shark(x) -> LivesInOcean(x))"]}
{"id": "entailmentbank_train_535", "nl": "the mountain used to be covered by oceans.", "fol": "", "prediction": ["all x.(Mountain(x) -> CoveredByOceans(x))"]}
{"id": "entailmentbank_train_536", "nl": "limestone is a kind of sedimentary rock.", "fol": "", "prediction": ["all x.(Limestone(x) -> SedimentaryRock(x))"]}
{"id": "entailmentbank_train_537", "nl": "shale is a kind of sedimentary rock.", "fol": "", "prediction": ["all x.(Shale(x) -> SedimentaryRock(x))"]}
{"id": "entailmentbank_train_538", "nl": "shale and limestone are different kinds of sedimentary rock.", "fol": "", "prediction": ["all x.((Shale(x) | Limestone(x)) -> SedimentaryRock(x))"]}
{"id": "entailmentbank_train_539", "nl": "environments changing can cause layers of rock that are on top of each other to be of different kind.", "fol": "", "prediction": ["all x y.((Environment(x) & LayersOfRock(y) & OnTopOf(y,x)) -> DifferentType(y,x))"]}
{"id": "entailmentbank_train_540", "nl": "a layer of shale is on top of a layer of limestone.", "fol": "", "prediction": ["all x y.((LayerOfShale(x) & LayerOfLimestone(y)) -> OnTopOf(x,y))"]}
{"id": "entailmentbank_train_541", "nl": "environments changing causes the shale and limestone to be on top of each other.", "fol": "", "prediction": ["all x y.((Environment(x) & Shale(y) & Limestone(y)) -> OnTopOf(x,y))"]}
{"id": "entailmentbank_train_542", "nl": "a plant is a kind of organism.", "fol": "", "prediction": ["all x.(Plant(x) -> Organism(x))"]}
{"id": "entailmentbank_train_543", "nl": "an animal is a kind of organism.", "fol": "", "prediction": ["all x.(Animal(x) -> Organism(x))"]}
{"id": "entailmentbank_train_544", "nl": "fossils are formed when layers of sediment cover the remains of organisms over time.", "fol": "", "prediction": ["all x y.((Fossil(x) & Sediment(y) & CoversRemains(x,y)) -> Formed(x))"]}
{"id": "entailmentbank_train_545", "nl": "fossils are formed when layers of sediment cover the remains of plants and animals over time.", "fol": "", "prediction": ["all x y.((Fossil(x) & Sediment(y) & CoversRemains(y,x)) -> Formed(x))"]}
{"id": "entailmentbank_train_546", "nl": "bones are part of some animals.", "fol": "", "prediction": ["exists x.(Animal(x) & BonesPartOf(x,y))"]}
{"id": "entailmentbank_train_547", "nl": "animals are a kind of organism.", "fol": "", "prediction": ["all x.(Animal(x) -> Organism(x))"]}
{"id": "entailmentbank_train_548", "nl": "bones are part of organisms.", "fol": "", "prediction": ["all x.(Bone(x) -> PartOfOrganism(x))"]}
{"id": "entailmentbank_train_549", "nl": "a shell is a part of some animals.", "fol": "", "prediction": ["all x.(Shell(x) -> PartOfAnimals(x))"]}
{"id": "entailmentbank_train_550", "nl": "shells are part of organisms.", "fol": "", "prediction": ["all x.(Shell(x) -> PartOfOrganism(x))"]}
{"id": "entailmentbank_train_551", "nl": "plants are a kind of organism.", "fol": "", "prediction": ["all x.(Plant(x) -> Organism(x))"]}
{"id": "entailmentbank_train_552", "nl": "fossils are the remains of organisms or part of organisms.", "fol": "", "prediction": ["all x.(Fossil(x) -> (Organism(x) | OrganismPartOfOrganism(x)))"]}
{"id": "entailmentbank_train_553", "nl": "bones remains, shells remians, and plants remains are fossils.", "fol": "", "prediction": ["all x y z.((BonesRemains(x) & ShellsRemians(y) & PlantsRemains(z)) -> Fossil(x))"]}
{"id": "entailmentbank_train_554", "nl": "containing fossils is a kind of characteristic of sedimentary rock.", "fol": "", "prediction": ["all x.((Fossil(x) & Contains(x,y)) -> SedimentaryRock(x))"]}
{"id": "entailmentbank_train_555", "nl": "if a rock contains bones remains, shells remians, or plants remains, then the rock is a sedimentary rock.", "fol": "", "prediction": ["all x.((Rock(x) & (ContainsBonesRemains(x) | ContainsShellsRemians(x) | ContainsPlantsRemains(x))) -> SedimentaryRock(x))"]}
{"id": "entailmentbank_train_556", "nl": "nearly all fossils are found in sedimentary rock.", "fol": "", "prediction": ["all x.(Fossil(x) -> FoundInSedimentaryRock(x))"]}
{"id": "entailmentbank_train_557", "nl": "fossils can be found in limestones.", "fol": "", "prediction": ["all x.(Fossil(x) -> FoundInLimestones(x))"]}
{"id": "entailmentbank_train_558", "nl": "a fossil seashell is a kind of fossil.", "fol": "", "prediction": ["all x.(FossilSeashell(x) -> Fossil(x))"]}
{"id": "entailmentbank_train_559", "nl": "a fossil seashell can be found in a limestone.", "fol": "", "prediction": ["all x y.((FossilSeashell(x) & Limestone(y)) -> FoundIn(x,y))"]}
{"id": "entailmentbank_train_560", "nl": "if something is found in something else, then that something else contains that something.", "fol": "", "prediction": ["all x y.(((FoundIn(x,y) & FoundIn(x,y)) -> Contains(x,y))"]}
{"id": "entailmentbank_train_561", "nl": "sedimentary rocks contain nearly all fossils.", "fol": "", "prediction": ["all x.(SedimentaryRock(x) -> ContainsNearlyAllFossil(x))"]}
{"id": "entailmentbank_train_562", "nl": "fossils can be used to study the history of organisms and environments on earth.", "fol": "", "prediction": ["all x y.((Fossil(x) & Organism(y)) -> (StudiesHistory(x,y) & StudiesEnvironment(x,y)))"]}
{"id": "entailmentbank_train_563", "nl": "fossils can be used to study the history of animals and environments on earth.", "fol": "", "prediction": ["all x.(Fossil(x) -> (StudiesHistoryOfAnimalsAndEnvironments(x) & OnEarth(x)))"]}
{"id": "entailmentbank_train_564", "nl": "fossils can be used to study the history of dinosaurs and environments on earth.", "fol": "", "prediction": ["all x.(Fossil(x) -> (StudiesHistoryOfDinosaurs(x) & StudiesEnvironmentsOnEarth(x)))"]}
{"id": "entailmentbank_train_565", "nl": "a horse is a kind of animal.", "fol": "", "prediction": ["all x.(Horse(x) -> Animal(x))"]}
{"id": "entailmentbank_train_566", "nl": "a horse is a kind of organism.", "fol": "", "prediction": ["all x.(Horse(x) -> Organism(x))"]}
{"id": "entailmentbank_train_567", "nl": "if fossils of an organism change depending on the level in which they were found then that species of organism changed over time.", "fol": "", "prediction": ["all x y.((Organism(x) & Fossil(y) & ChangesDependingOnLevel(y,x)) -> ChangesOverTime(x,y))"]}
{"id": "entailmentbank_train_568", "nl": "if fossils of horses change depending on the level in which they were found, then the horses has changed over time.", "fol": "", "prediction": ["all x y.((Fossil(x) & Horse(y) & ChangesDependingOnLevel(x,y)) -> ChangedOverTime(x))"]}
{"id": "entailmentbank_train_569", "nl": "the fossils of horse has shorter bones in lower levels and the fossils of horse has longer bones in the upper level.", "fol": "", "prediction": ["all x y.((Fossil(x) & Horse(y)) -> (ShorterBonesInLowerLevels(x) & LongerBonesInUpperLevel(y)))"]}
{"id": "entailmentbank_train_570", "nl": "younger layer of rocks are on top of the older layer of rocks according to superposition.", "fol": "", "prediction": ["all x y.((Rock(x) & YoungerLayer(x) & OlderLayer(y)) -> Superposition(x,y))"]}
{"id": "entailmentbank_train_571", "nl": "the younger fossils of horse has longer bones than the older fossils of horse.", "fol": "", "prediction": ["all x y.((Fossil(x) & Horse(y) & Younger(x,y)) -> LongerBones(x,y))"]}
{"id": "entailmentbank_train_572", "nl": "horse species have changed from smaller to larger over time.", "fol": "", "prediction": ["all x.(HorseSpecies(x) -> ChangedFromSmallerToLargerOverTime(x))"]}
{"id": "entailmentbank_train_573", "nl": "a bird is a kind of animal.", "fol": "", "prediction": ["all x.(Bird(x) -> Animal(x))"]}
{"id": "entailmentbank_train_574", "nl": "a bird is a kind of organism.", "fol": "", "prediction": ["all x.(Bird(x) -> Organism(x))"]}
{"id": "entailmentbank_train_575", "nl": "if a fossil is of an organism that cannot be identified then that organism is probably extinct.", "fol": "", "prediction": ["all x.((Fossil(x) & Organism(x) & -Identifiable(x)) -> ProbabillyExtinct(x))"]}
{"id": "entailmentbank_train_576", "nl": "if a fossil of a bird cannot be identified then that kind of bird is probably extinct.", "fol": "", "prediction": ["all x.((Bird(x) & -IdentifiableFossil(x)) -> ProbabillyExtinct(x))"]}
{"id": "entailmentbank_train_577", "nl": "an elephant is a kind of animal species.", "fol": "", "prediction": ["all x.(Elephant(x) -> AnimalSpecies(x))"]}
{"id": "entailmentbank_train_578", "nl": "the fossil of the elephant in african savanna is different from the elephant species presently in that area.", "fol": "", "prediction": ["all x y.((Fossil(x) & Elephant(y) & AfricanSavanna(y)) -> DifferentFromElephantSpecies(x,y))"]}
{"id": "entailmentbank_train_579", "nl": "if the fossils of a species are different from the existing species, then the species has changed over time.", "fol": "", "prediction": ["all x y.((Species(x) & Fossil(y) & DifferentFromExistingSpecies(y)) -> ChangedOverTime(x,y))"]}
{"id": "entailmentbank_train_580", "nl": "the elephant in african savanna has changed over time.", "fol": "", "prediction": ["all x y.((Elephant(x) & AfricanSavanna(y)) -> ChangedOverTime(x,y))"]}
{"id": "entailmentbank_train_581", "nl": "a mineral usually has a crystal structure.", "fol": "", "prediction": ["all x.(Mineral(x) -> HasCrystalStructure(x))"]}
{"id": "entailmentbank_train_582", "nl": "a mineral is a kind of solid natural material.", "fol": "", "prediction": ["all x.(Mineral(x) -> SolidNaturalMaterial(x))"]}
{"id": "entailmentbank_train_583", "nl": "a mineral is a solid natural material with a crystal structure.", "fol": "", "prediction": ["all x.(Mineral(x) -> (SolidNaturalMaterial(x) & CrystalStructure(x)))"]}
{"id": "entailmentbank_train_584", "nl": "rock is made of minerals.", "fol": "", "prediction": ["all x.(Rock(x) -> MadeOfMinerals(x))"]}
{"id": "entailmentbank_train_585", "nl": "a mineral is a solid natural material that makes up rocks.", "fol": "", "prediction": ["all x.(Mineral(x) -> (SolidNaturalMaterial(x) & MakesUpRocks(x)))"]}
{"id": "entailmentbank_train_586", "nl": "a diamond is made of face-centered cubic crystals.", "fol": "", "prediction": ["all x.(Diamond(x) -> MadeOfFacesCircularCrystals(x))"]}
{"id": "entailmentbank_train_587", "nl": "diamond is a kind of mineral.", "fol": "", "prediction": ["all x.(Diamond(x) -> Mineral(x))"]}
{"id": "entailmentbank_train_588", "nl": "quartz is a kind of mineral.", "fol": "", "prediction": ["all x.(Quarz(x) -> Mineral(x))"]}
{"id": "entailmentbank_train_589", "nl": "feldspar is a kind of minerals.", "fol": "", "prediction": ["all x.(Feltspar(x) -> Mineral(x))"]}
{"id": "entailmentbank_train_590", "nl": "sometimes rocks are formed by quartz and feldspar mixed together.", "fol": "", "prediction": ["exists x.(Rock(x) & FormedByQuarz(x) & FormedByFelspar(x))"]}
{"id": "entailmentbank_train_591", "nl": "minerals are formed by magma cooling.", "fol": "", "prediction": ["all x.(Mineral(x) -> FormedByMagmaCooling(x))"]}
{"id": "entailmentbank_train_592", "nl": "a volcano is a source of magma / lava.", "fol": "", "prediction": ["all x.(Volcano(x) -> SourceOfMagma(x))"]}
{"id": "entailmentbank_train_593", "nl": "minerals are formed by magma from a volcano cooling.", "fol": "", "prediction": ["all x y.((Mineral(x) & Volcano(y)) -> FormedByMagma(x,y))"]}
{"id": "entailmentbank_train_594", "nl": "halite is a kind of mineral.", "fol": "", "prediction": ["all x.(Halite(x) -> Mineral(x))"]}
{"id": "entailmentbank_train_595", "nl": "halite is formed by a body of salt water evaporating.", "fol": "", "prediction": ["all x.(Halite(x) -> FormedBySaltWaterEvaporating(x))"]}
{"id": "entailmentbank_train_596", "nl": "seawater is a kind of salt water.", "fol": "", "prediction": ["all x.(Seawater(x) -> SaltWater(x))"]}
{"id": "entailmentbank_train_597", "nl": "the mineral halite is formed by a body of seawater evaporating.", "fol": "", "prediction": ["all x.(MineralHalite(x) -> FormedByEvaporatingSeawater(x))"]}
{"id": "entailmentbank_train_598", "nl": "the formation of diamonds requires intense pressure.", "fol": "", "prediction": ["all x.(DiamondFormation(x) -> RequiresIntensePressure(x))"]}
{"id": "entailmentbank_train_599", "nl": "the pressure is intense deep below earth's crust.", "fol": "", "prediction": ["all x.(Pressure(x) -> DeepBelowEarthCrust(x))"]}
{"id": "entailmentbank_train_600", "nl": "the formation of diamonds occurs deep below the crust of the earth by carbon being heated and pressurized.", "fol": "", "prediction": ["all x y.((Diamond(x) & EarthCrust(y) & CarbonHeated(x) & Pressurized(x)) -> FormationOf(x,y))"]}
{"id": "entailmentbank_train_601", "nl": "hardness is a property of a material / an object and includes ordered values of malleable / rigid.", "fol": "", "prediction": ["all x.(Hardness(x) -> (PropertyOfMaterial(x) & PropertyOfObject(x) & IncludesOrderedValues(x,Malloceable) & IncludesOrderedValues(x,Rigid)))"]}
{"id": "entailmentbank_train_602", "nl": "a mineral is a kind of solid / natural material.", "fol": "", "prediction": ["all x.(Mineral(x) -> (SolidMaterial(x) | NaturalMaterial(x)))"]}
{"id": "entailmentbank_train_603", "nl": "hardness is a property of minerals.", "fol": "", "prediction": ["all x.(Hardness(x) -> PropertyOfMinerals(x))"]}
{"id": "entailmentbank_train_604", "nl": "the properties of something can be used to identify that something.", "fol": "", "prediction": ["all x y.((Properties(x) & Something(y)) -> Identifies(x,y))"]}
{"id": "entailmentbank_train_605", "nl": "hardness can be used to identify minerals.", "fol": "", "prediction": ["all x.(Hardness(x) -> IdentifiesMinerals(x))"]}
{"id": "entailmentbank_train_606", "nl": "if an object is made of a material then that object has the properties of that material.", "fol": "", "prediction": ["all x y.((Object(x) & Material(y) & MadeOf(x,y)) -> HasPropertiesOf(x,y))"]}
{"id": "entailmentbank_train_607", "nl": "a rock is a kind of object.", "fol": "", "prediction": ["all x.(Rock(x) -> Object(x))"]}
{"id": "entailmentbank_train_608", "nl": "rocks will have the properties of the minerals that make up themselves.", "fol": "", "prediction": ["all x y.((Rock(x) & Mineral(y)) -> HasPropertiesOfMakeUp(x,y))"]}
{"id": "entailmentbank_train_609", "nl": "the property of something is the same for the things of same kind.", "fol": "", "prediction": ["all x y.((Property(x) & Property(y) & SameType(x,y)) -> SameFor(x,y))"]}
{"id": "entailmentbank_train_610", "nl": "color is a property of a material.", "fol": "", "prediction": ["all x.(Color(x) -> PropertyOfMaterial(x))"]}
{"id": "entailmentbank_train_611", "nl": "the color property of the same material will be the same.", "fol": "", "prediction": ["all x.((Material(x) & ColorProperty(x)) -> Same(x))"]}
{"id": "entailmentbank_train_612", "nl": "the color property of the same minerals will be the same.", "fol": "", "prediction": ["all x.((Mineral(x) & ColorProperty(x)) -> Same(x))"]}
{"id": "entailmentbank_train_613", "nl": "rocks that are made up by the same minerals will have the same color property.", "fol": "", "prediction": ["all x.((Rock(x) & MadeUpByMinerals(x)) -> SameColorProperty(x))"]}
{"id": "entailmentbank_train_614", "nl": "a material that is soft can be broken down by a material that is hard.", "fol": "", "prediction": ["all x y.((Material(x) & Soft(x)) -> BreakedDownBy(x,y))"]}
{"id": "entailmentbank_train_615", "nl": "an example of breaking something down is scratching something.", "fol": "", "prediction": ["all x.((BreaksDown(x) & Scratches(x)) -> BreaksDown(x))"]}
{"id": "entailmentbank_train_616", "nl": "a material that is soft can be scratched by a material that is hard.", "fol": "", "prediction": ["all x y.((Material(x) & Soft(x) & Material(y) & Hard(y)) -> ScratchedBy(x,y))"]}
{"id": "entailmentbank_train_617", "nl": "a mineral is a kind of material.", "fol": "", "prediction": ["all x.(Mineral(x) -> Material(x))"]}
{"id": "entailmentbank_train_618", "nl": "a mineral that is soft can be scratched by a mineral that is hard.", "fol": "", "prediction": ["all x y.((Mineral(x) & Soft(x)) -> CanBeScrapedBy(x,y))"]}
{"id": "entailmentbank_train_619", "nl": "if one mineral can scratch another mineral then that other mineral is softer than that one mineral.", "fol": "", "prediction": ["all x y.((Mineral(x) & Mineral(y) & CanScratch(x,y)) -> Softer(y))"]}
{"id": "entailmentbank_train_620", "nl": "hardness is a measure of a mineral's ability to resist scratching.", "fol": "", "prediction": ["all x.(Hardness(x) -> (MeasuresResistance(x) & Mineral(x)))"]}
{"id": "entailmentbank_train_621", "nl": "measuring the hardness of minerals requires scratching those materials.", "fol": "", "prediction": ["all x.((Mineral(x) & Hardness(x)) -> RequiresCratching(x))"]}
{"id": "entailmentbank_train_622", "nl": "quartz scratches glass easily.", "fol": "", "prediction": ["all x.(Quarz(x) -> ScrashesGlassEasily(x))"]}
{"id": "entailmentbank_train_623", "nl": "a quartz is made of six-sided transparent crystals.", "fol": "", "prediction": ["all x.(Quarz(x) -> MadeOfSixSidedTransparentCrystals(x))"]}
{"id": "entailmentbank_train_624", "nl": "quartz is the mineral that has six-sided transparent crystals and can scratch glass easily.", "fol": "", "prediction": ["all x.(Quarz(x) -> (Mineral(x) & SixSidedTransparentCrystals(x) & CanScratchGlassEasily(x)))"]}
{"id": "entailmentbank_train_625", "nl": "if a mineral can be scratched by a fingernail then that mineral is soft.", "fol": "", "prediction": ["all x y.((Mineral(x) & Fingernail(y) & ScrubbedBy(x,y)) -> Soft(x))"]}
{"id": "entailmentbank_train_626", "nl": "a mineral can be scratched by a fingernail.", "fol": "", "prediction": ["all x y.((Mineral(x) & Fingernail(y)) -> CanBeScrapedBy(x,y))"]}
{"id": "entailmentbank_train_627", "nl": "a mineral is soft.", "fol": "", "prediction": ["all x.(Mineral(x) -> Soft(x))"]}
{"id": "entailmentbank_train_628", "nl": "if a mineral is black in color.", "fol": "", "prediction": ["all x.((Mineral(x) & BlackColor(x)) -> BlackColor(x))"]}
{"id": "entailmentbank_train_629", "nl": "a mineral has a nonmetallic luster.", "fol": "", "prediction": ["all x.(Mineral(x) -> NonmetallicLuster(x))"]}
{"id": "entailmentbank_train_630", "nl": "that mineral is black, has a nonmetallic luster, and is soft.", "fol": "", "prediction": ["all x.(Mineral(x) -> (Black(x) & NonmetallicLuster(x) & Soft(x)))"]}
{"id": "entailmentbank_train_631", "nl": "mica has a nonmetallic luster.", "fol": "", "prediction": ["all x.(Micro(x) -> NonMetallicLuster(x))"]}
{"id": "entailmentbank_train_632", "nl": "mica is black in color.", "fol": "", "prediction": ["all x.(Microsoft(x) -> BlackColor(x))"]}
{"id": "entailmentbank_train_633", "nl": "mica is soft.", "fol": "", "prediction": ["all x.(Microsoft(x) -> Mica(x))"]}
{"id": "entailmentbank_train_634", "nl": "mica is a kind of mineral.", "fol": "", "prediction": ["all x.(Micro(x) -> Mineral(x))"]}
{"id": "entailmentbank_train_635", "nl": "mica is a mineral that is black, has a nonmetallic luster, and is soft.", "fol": "", "prediction": ["all x.(Micro(x) -> (Black(x) & NonmetallicLuster(x) & Soft(x)))"]}
{"id": "entailmentbank_train_636", "nl": "that mineral is mica.", "fol": "", "prediction": ["all x.(Mineral(x) -> Mica(x))"]}
{"id": "entailmentbank_train_637", "nl": "samples of a single type of mineral usually have the same properties.", "fol": "", "prediction": ["all x.((Mineral(x) & SingleType(x)) -> SameProperties(x))"]}
{"id": "entailmentbank_train_638", "nl": "different materials usually have different properties.", "fol": "", "prediction": ["all x.(Material(x) -> DifferentProperties(x))"]}
{"id": "entailmentbank_train_639", "nl": "the properties of a mineral can be used to identify those minerals.", "fol": "", "prediction": ["all x y.((Mineral(x) & Mineral(y)) -> CanIdentify(x,y))"]}
{"id": "entailmentbank_train_640", "nl": "iron is a kind of metal.", "fol": "", "prediction": ["all x.(Iron(x) -> Metal(x))"]}
{"id": "entailmentbank_train_641", "nl": "aluminum is a kind of metal.", "fol": "", "prediction": ["all x.(Aluminum(x) -> Metal(x))"]}
{"id": "entailmentbank_train_642", "nl": "iron and aluminum are kinds of metal.", "fol": "", "prediction": ["all x.((Iron(x) | Aluminum(x)) -> Metal(x))"]}
{"id": "entailmentbank_train_643", "nl": "rocks often contain large amounts of metal.", "fol": "", "prediction": ["all x.(Rock(x) -> ContainsLargeAmountsOfMetal(x))"]}
{"id": "entailmentbank_train_644", "nl": "rocks may contain large amounts of iron and aluminum.", "fol": "", "prediction": ["all x.(Rock(x) -> (ContainsLargeAmountsOfIron(x) & ContainsLargeAmountsOfAluminum(x)))"]}
{"id": "entailmentbank_train_645", "nl": "metamorphic rock is a kind of rock.", "fol": "", "prediction": ["all x.(MetamorphicRock(x) -> Rock(x))"]}
{"id": "entailmentbank_train_646", "nl": "two rocks are different classes.", "fol": "", "prediction": ["all x.(Rock(x) -> DifferentClass(x))"]}
{"id": "entailmentbank_train_647", "nl": "metamorphic rocks are formed by rocks being exposed to extreme heat and pressure.", "fol": "", "prediction": ["all x.(MetamorphicRock(x) -> (FormedByExposedRocksToExtremeHeat(x) & ExposedToExtremePressure(x)))"]}
{"id": "entailmentbank_train_648", "nl": "sedimentary rocks are formed by deposition / cementation.", "fol": "", "prediction": ["all x.(SedimentaryRock(x) -> (FormedByDeposition(x) | FormedByCementation(x)))"]}
{"id": "entailmentbank_train_649", "nl": "different classes of rocks are formed by different methods.", "fol": "", "prediction": ["all x y.((Rock(x) & Class(y)) -> FormedBy(x,y))"]}
{"id": "entailmentbank_train_650", "nl": "two rocks are formed by different methods.", "fol": "", "prediction": ["all x.(Rock(x) -> FormedByDifferentMethods(x))"]}
{"id": "entailmentbank_train_651", "nl": "granite contains feldspar.", "fol": "", "prediction": ["all x.(Granite(x) -> ContainsFelspar(x))"]}
{"id": "entailmentbank_train_652", "nl": "granite contains mica.", "fol": "", "prediction": ["all x.(Granite(x) -> ContainsMicro(x))"]}
{"id": "entailmentbank_train_653", "nl": "granite contains quartz.", "fol": "", "prediction": ["all x.(Granite(x) -> ContainsQuarry(x))"]}
{"id": "entailmentbank_train_654", "nl": "granite is made of quartz, feldspar, and mica.", "fol": "", "prediction": ["all x.(Granite(x) -> (MadeOfQuarz(x) & MadeOfFelspar(x) & MadeOfMicrocrystalline(x)))"]}
{"id": "entailmentbank_train_655", "nl": "feldspar is a kind of mineral.", "fol": "", "prediction": ["all x.(Feltspar(x) -> Mineral(x))"]}
{"id": "entailmentbank_train_656", "nl": "quartz, feldspar, and mica are minerals.", "fol": "", "prediction": ["all x.(Mineral(x) -> (Quarz(x) | Feldspar(x) | Mica(x)))"]}
{"id": "entailmentbank_train_657", "nl": "granite is made of minerals.", "fol": "", "prediction": ["all x.(Granite(x) -> MadeOfMinerals(x))"]}
{"id": "entailmentbank_train_658", "nl": "granite is a kind of rock.", "fol": "", "prediction": ["all x.(Granite(x) -> Rock(x))"]}
{"id": "entailmentbank_train_659", "nl": "calculating the age of rocks requires investigating the original amount of the elemental isotopes of the parent isotopes.", "fol": "", "prediction": ["all x y.((Rock(x) & ElementalIsotopes(y) & ParentIsotopes(x,y)) -> InvestigatesAmount(x,y))"]}
{"id": "entailmentbank_train_660", "nl": "radiometric dating is a kind of method to determine the absolute age of the rock.", "fol": "", "prediction": ["all x.(RadiometricDating(x) -> DeterminesAge(x,Rock))"]}
{"id": "entailmentbank_train_661", "nl": "radiometric dating is used to identify / determine the absolute age of the rock.", "fol": "", "prediction": ["all x y.((RadiometricDating(x) & Rock(y)) -> (IdentifiesAge(x,y) | DeterminesAge(x,y)))"]}
{"id": "entailmentbank_train_662", "nl": "radiometric dating requires the radioactive isotope content of a rock.", "fol": "", "prediction": ["all x y.((Rock(x) & RadiometricDating(y)) -> RequiresRadioactiveIsotopeContent(y,x))"]}
{"id": "entailmentbank_train_663", "nl": "the radioactive isotope content of a rock can be used to identify the absolute age of the rock.", "fol": "", "prediction": ["all x y.((Rock(x) & RadioactiveIsotopeContent(x,y)) -> IdentifiesAge(x,y))"]}
{"id": "entailmentbank_train_664", "nl": "the absolute age of a rock is the amount of time passed since a rock was formed.", "fol": "", "prediction": ["all x.((Rock(x) & AbsoluteAge(x)) -> TimePassed(x))"]}
{"id": "entailmentbank_train_665", "nl": "the radioactive isotope content of a rock can be used to identify the amount of time passed since a rock was formed.", "fol": "", "prediction": ["all x y.((Rock(x) & RadioactiveIsotopeContent(x) & Rock(y)) -> IdentifiesTimePassed(x,y))"]}
{"id": "entailmentbank_train_666", "nl": "most means over 50% of something.", "fol": "", "prediction": ["all x.(MeansOver50%(x) -> MostMeansOver50%(x))"]}
{"id": "entailmentbank_train_667", "nl": "the surface of the earth is made of 70% ocean.", "fol": "", "prediction": ["all x.(EarthSurface(x) -> MadeOf(x,70))"]}
{"id": "entailmentbank_train_668", "nl": "most of earth's surface is made of oceans.", "fol": "", "prediction": ["all x.(EarthSurface(x) -> MadeOfOceans(x))"]}
{"id": "entailmentbank_train_669", "nl": "the hydrosphere is a thin layer of water covering the earth's surface.", "fol": "", "prediction": ["all x.(Hydrosphere(x) -> (ThinLayerOfWater(x) & CoversEarthSurface(x)))"]}
{"id": "entailmentbank_train_670", "nl": "most of the hydroshpere is made of oceans.", "fol": "", "prediction": ["all x.(Hydroshpere(x) -> MadeOfOceans(x))"]}
{"id": "entailmentbank_train_671", "nl": "the formation of organic rocks is usually found in the ocean.", "fol": "", "prediction": ["all x.(OrganicRock(x) -> FoundInOcean(x))"]}
{"id": "entailmentbank_train_672", "nl": "most of the formation of organic rocks in the hydroshpere occurs in the oceans.", "fol": "", "prediction": ["all x y.((Hydroshpere(x) & Ocean(y)) -> FormsOrganicRocks(x,y))"]}
{"id": "entailmentbank_train_673", "nl": "the rock cycle is a cyclical process, with stages of formation, weathering, erosion.", "fol": "", "prediction": ["all x.(RockCycle(x) -> (CyclicProcess(x) & StagesOfFormation(x) & StagesOfWeathering(x) & StagesOfErosion(x)))"]}
{"id": "entailmentbank_train_674", "nl": "a cyclical process repeats itself in a consistent order.", "fol": "", "prediction": ["all x.(CyclicProcess(x) -> RepeatsInConsistentOrder(x))"]}
{"id": "entailmentbank_train_675", "nl": "in the rock cycle, erosion follows weathering.", "fol": "", "prediction": ["all x.((RockCycle(x) & Erosion(x)) -> FollowsWeathering(x))"]}
{"id": "entailmentbank_train_676", "nl": "if a step follows another step, then that step will be the next step.", "fol": "", "prediction": ["all x y.((Step(x) & Step(y) & Follows(x,y)) -> NextStep(x))"]}
{"id": "entailmentbank_train_677", "nl": "after weathering, erosion will be the next step in the rock cycle.", "fol": "", "prediction": ["all x.((Weathering(x) & Erosion(x)) -> NextStepInRockCycle(x))"]}
{"id": "entailmentbank_train_678", "nl": "if granite is broken down into sediment.", "fol": "", "prediction": ["all x.((Granite(x) & BrokenDownIntoSediment(x)) -> BrokenDownIntoSediment(x))"]}
{"id": "entailmentbank_train_679", "nl": "the sediment from the granite is buried and compacted.", "fol": "", "prediction": ["all x.((Sediment(x) & Granite(x)) -> BuriedAndCompacted(x))"]}
{"id": "entailmentbank_train_680", "nl": "granite is broken down into sediment that is buried and compacted.", "fol": "", "prediction": ["all x.(Granite(x) -> (BreaksDownIntoSediment(x) & BuriedAndCompacted(x)))"]}
{"id": "entailmentbank_train_681", "nl": "formation in the rock cycle means an old class of rocks changes into a new class of rocks.", "fol": "", "prediction": ["all x y.((RockCycle(x) & OldClassOfRocks(y)) -> ChangesIntoNewClassOfRocks(y))"]}
{"id": "entailmentbank_train_682", "nl": "the formation of sedimentary rock is a sequential process, with stages of weathering, erosion, deposition,burying, compaction.", "fol": "", "prediction": ["all x.(SedimentaryRock(x) -> (SequentProcess(x) & Weathering(x) & Erosion(x) & Deposition(x) & Burrowing(x) & Compaction(x)))"]}
{"id": "entailmentbank_train_683", "nl": "forming sedimentary rocks requires compacting the materials.", "fol": "", "prediction": ["all x.(SedimentaryRock(x) -> RequiresCompacting(x))"]}
{"id": "entailmentbank_train_684", "nl": "in the rock cycle, old rocks are broken down into sediment.", "fol": "", "prediction": ["all x y.((RockCycle(x) & OldRock(y)) -> BrokenDownIntoSediment(y,x))"]}
{"id": "entailmentbank_train_685", "nl": "in the rock cycle, new rocks can be formed by sediment being buried and compacted.", "fol": "", "prediction": ["all x y.((RockCycle(x) & Sediment(y) & Buried(y) & Compacted(y)) -> NewRock(x))"]}
{"id": "entailmentbank_train_686", "nl": "the granite will become a new rock.", "fol": "", "prediction": ["all x.(Granite(x) -> NewRock(x))"]}
{"id": "entailmentbank_train_687", "nl": "magma is extremely high in temperature.", "fol": "", "prediction": ["all x.(Magma(x) -> ExtremelyHighTemperature(x))"]}
{"id": "entailmentbank_train_688", "nl": "heat from magma can change another class of rock into metamorphic rock.", "fol": "", "prediction": ["all x y.((MagmaHeat(x) & Rock(y)) -> ChangesClass(x,y))"]}
{"id": "entailmentbank_train_689", "nl": "a beach is a kind of environment.", "fol": "", "prediction": ["all x.(Beach(x) -> Environment(x))"]}
{"id": "entailmentbank_train_690", "nl": "humans moving in an environment usually causes native species to lose their habitats.", "fol": "", "prediction": ["all x y.((Human(x) & Environment(y) & MovingIn(x,y)) -> CausesNativeSpeciesToLoseHabitats(x,y))"]}
{"id": "entailmentbank_train_691", "nl": "humans moving to beach usually causes native species to lose their habitats.", "fol": "", "prediction": ["all x y.((Human(x) & Beach(y)) -> CausesNativeSpeciesToLoseHabitats(x,y))"]}
{"id": "entailmentbank_train_692", "nl": "sea turtle is a native species to the beach.", "fol": "", "prediction": ["all x.(SeaTurtle(x) -> NativeSpeciesToBeach(x))"]}
{"id": "entailmentbank_train_693", "nl": "humans moving to beach usually causes sea turtles to lose their habitats.", "fol": "", "prediction": ["all x y.((Human(x) & SeaTurtle(y)) -> MovesToBeach(x,y))"]}
{"id": "entailmentbank_train_694", "nl": "a sea turtle is a kind of animal.", "fol": "", "prediction": ["all x.(SeaTurtle(x) -> Animal(x))"]}
{"id": "entailmentbank_train_695", "nl": "an animal requires a habitat for survival.", "fol": "", "prediction": ["all x.(Animal(x) -> RequiresHabitat(x))"]}
{"id": "entailmentbank_train_696", "nl": "a sea turtle requires a habitat for survival.", "fol": "", "prediction": ["all x.(SeaTurtle(x) -> RequiresHabitat(x))"]}
{"id": "entailmentbank_train_697", "nl": "humans moving to beach causes sea tutles to lose habitats required by the sea turtles to survive.", "fol": "", "prediction": ["all x y.((Human(x) & SeaTulip(y) & MovingToBeach(x)) -> LosesHabitat(y,x))"]}
{"id": "entailmentbank_train_698", "nl": "if animals lose the thing they require to survive, their population will decrease.", "fol": "", "prediction": ["all x.((Animal(x) & LosesRequirement(x)) -> PopulationDecrease(x))"]}
{"id": "entailmentbank_train_699", "nl": "humans moving to beach causes the population of sea turtles to decrease through habitats loss.", "fol": "", "prediction": ["all x y.((Human(x) & SeaTurtle(y) & MovingToBeach(x,y)) -> PopulationDecrease(y))"]}
{"id": "entailmentbank_train_700", "nl": "if the habitat of an animal is replaced, then that animal will not be found in that place.", "fol": "", "prediction": ["all x y.((Animal(x) & Habitat(y) & Replaced(x,y)) -> -FindableInPlace(x,y))"]}
{"id": "entailmentbank_train_701", "nl": "building housing developments usually requires replacing animal habitats.", "fol": "", "prediction": ["all x.(BuildingHousingDevelopments(x) -> RequiresReplacingAnimalHabitats(x))"]}
{"id": "entailmentbank_train_702", "nl": "building housing developments will cause the animal lives in that habitat no longer to be found.", "fol": "", "prediction": ["all x y.((BuildingHousingDevelopments(x) & Animal(y)) -> -LivesInHabitat(y,x))"]}
{"id": "entailmentbank_train_703", "nl": "a snowshoe hare is a kind of animal.", "fol": "", "prediction": ["all x.(SnowshoeHare(x) -> Animal(x))"]}
{"id": "entailmentbank_train_704", "nl": "snowshoe hare lives in the field.", "fol": "", "prediction": ["all x.(SnowshoeHare(x) -> LivesInField(x))"]}
{"id": "entailmentbank_train_705", "nl": "snowshoe hare is a kind of animal lives in the field.", "fol": "", "prediction": ["all x.(SnowshoeHare(x) -> LivesInField(x))"]}
{"id": "entailmentbank_train_706", "nl": "housing developments are build in a field.", "fol": "", "prediction": ["all x.(HousingDevelopment(x) -> BuildInField(x))"]}
{"id": "entailmentbank_train_707", "nl": "building house developments causes the snowshoe hare no longer to be found in the field.", "fol": "", "prediction": ["all x.((BuildingHouseDevelopments(x) & SnowshoeHare(x)) -> -FindableInField(x))"]}
{"id": "entailmentbank_train_708", "nl": "pesticides can cause pollution.", "fol": "", "prediction": ["all x.(Pesticide(x) -> CanCausePollution(x))"]}
{"id": "entailmentbank_train_709", "nl": "fertilizers are a source of pollution.", "fol": "", "prediction": ["all x.(Fertilizer(x) -> SourceOfPollution(x))"]}
{"id": "entailmentbank_train_710", "nl": "pesticides and fertilizers are sourc of pollution.", "fol": "", "prediction": ["all x.((Pesticide(x) | Fertilizer(x)) -> SourcOfPollution(x))"]}
{"id": "entailmentbank_train_711", "nl": "electricity causes less pollution than gasoline.", "fol": "", "prediction": ["all x y.((Electricity(x) & Gasoline(y)) -> CausesLessPollution(x,y))"]}
{"id": "entailmentbank_train_712", "nl": "regular cars use gasoline as an energy source.", "fol": "", "prediction": ["all x.(RegularCar(x) -> UsesGasolineAsEnergySource(x))"]}
{"id": "entailmentbank_train_713", "nl": "electric cars use electricity as the main energy source.", "fol": "", "prediction": ["all x.(ElectricCar(x) -> UsesElectricityAsMainEnergySource(x))"]}
{"id": "entailmentbank_train_714", "nl": "electric cars will cause less pollution than regular cars.", "fol": "", "prediction": ["all x y.((ElectricCar(x) & RegularCar(y)) -> CausesLessPollution(x,y))"]}
{"id": "entailmentbank_train_715", "nl": "many vehicles emit pollution into the air.", "fol": "", "prediction": ["all x.(Vehicle(x) -> EmitsPollutionIntoAir(x))"]}
{"id": "entailmentbank_train_716", "nl": "a pollutions standard is a kind of standard for reducing pollutants emitted by vehicles.", "fol": "", "prediction": ["all x.(PollutionsStandard(x) -> (ReducesPollutants(x) & EmittedByVehicles(x)))"]}
{"id": "entailmentbank_train_717", "nl": "a pollution standard can help reduce pollutants emitted by vehicles.", "fol": "", "prediction": ["all x.(PollutionStandard(x) -> ReducesPollutants(x))"]}
{"id": "entailmentbank_train_718", "nl": "a vehicle inspection is when a person examines a vehicle for pollution standards.", "fol": "", "prediction": ["all x y.((VehicleInspection(x) & Person(y)) -> ExaminesForPollutionStandards(y,x))"]}
{"id": "entailmentbank_train_719", "nl": "the insepction of vehicles to meet pollution standards can help reduce pollutants emitted by vehicles.", "fol": "", "prediction": ["all x y.((Vehicle(x) & Vehicle(y) & MeetsPollutionStandards(x,y)) -> ReducesPollutants(x,y))"]}
{"id": "entailmentbank_train_720", "nl": "as the use of public transportation increases, the use of automobiles decreases.", "fol": "", "prediction": ["all x y.((UseOfPublicTransportation(x) & UseOfAutomobiles(y)) -> Increases(x))"]}
{"id": "entailmentbank_train_721", "nl": "bus is a kind of public transportation.", "fol": "", "prediction": ["all x.(Bus(x) -> PublicTransportation(x))"]}
{"id": "entailmentbank_train_722", "nl": "as the use of buses increases, the use of automobiles decreases.", "fol": "", "prediction": ["all x y.((Bus(x) & Automobile(y)) -> IncreasesUse(x,y))"]}
{"id": "entailmentbank_train_723", "nl": "the use of automobiles causes pollution to the environment.", "fol": "", "prediction": ["all x.((UseOfAutomobiles(x) & CausesPollution(x)) -> Environment(x))"]}
{"id": "entailmentbank_train_724", "nl": "as the use of buses increases, the pollution caused by using automobiles will decrease.", "fol": "", "prediction": ["all x.((BusUse(x) & Increases(x)) -> PollutionDecreases(x))"]}
{"id": "entailmentbank_train_725", "nl": "burning fossil fuels releases sulfur dioxide into the atmosphere.", "fol": "", "prediction": ["all x.((BoilingFossilFuels(x) & ReleasesSulfurDioxide(x)) -> ReleasesIntoAtmosphere(x))"]}
{"id": "entailmentbank_train_726", "nl": "oil is a kind of fossil fuel.", "fol": "", "prediction": ["all x.(Oil(x) -> FossilFuel(x))"]}
{"id": "entailmentbank_train_727", "nl": "coal is a kind of fossil fuel.", "fol": "", "prediction": ["all x.(Coal(x) -> FossilFuel(x))"]}
{"id": "entailmentbank_train_728", "nl": "burning coal and oil releases sulfur dioxide into the atmosphere.", "fol": "", "prediction": ["all x y.((BoilingCoal(x) & BurningOil(x)) -> ReleasesSulfurDioxide(y))"]}
{"id": "entailmentbank_train_729", "nl": "sulfur dioxide is a kind of gas.", "fol": "", "prediction": ["all x.(SulfurDioxide(x) -> Gas(x))"]}
{"id": "entailmentbank_train_730", "nl": "sulfur dioxide dissolving in water causes acid rain.", "fol": "", "prediction": ["all x.((SulfurDioxide(x) & DissolvesInWater(x)) -> CausesAcidRain(x))"]}
{"id": "entailmentbank_train_731", "nl": "gases from burning coal and oil dissolving in water in the atmosphere causes acid rain.", "fol": "", "prediction": ["all x.((Gases(x) & BurningCoal(x) & Oil(x) & DissolvingInWater(x)) -> CausesAcidRain(x))"]}
{"id": "entailmentbank_train_732", "nl": "gas-efficient engines uses less gasoline.", "fol": "", "prediction": ["all x.(GasEfficientEngine(x) -> UsesLessGasoline(x))"]}
{"id": "entailmentbank_train_733", "nl": "using gasoline requires burning gasoline.", "fol": "", "prediction": ["all x.((Gasoline(x) & BurnsGasoline(x)) -> Requires(x,gasoline))"]}
{"id": "entailmentbank_train_734", "nl": "gas-efficient engines will burn less gasoline.", "fol": "", "prediction": ["all x.((Engine(x) & GasEfficient(x)) -> BurnsLessGasoline(x))"]}
{"id": "entailmentbank_train_735", "nl": "burning gasoline is a source of air pollution.", "fol": "", "prediction": ["all x.((BurningGasoline(x) & SourceOfAirPollution(x)) -> SourceOfAirPollution(x))"]}
{"id": "entailmentbank_train_736", "nl": "gas-efficient engines will cause less air pollution.", "fol": "", "prediction": ["all x.((GasEfficientEngine(x) & CausesLessAirPollution(x)) -> GasEfficientEngine(x))"]}
{"id": "entailmentbank_train_737", "nl": "an engine is a part of an automobile.", "fol": "", "prediction": ["all x.(Engine(x) -> PartOfAutomobile(x))"]}
{"id": "entailmentbank_train_738", "nl": "using a gas-efficient engine in automobiles will cause less air pollution.", "fol": "", "prediction": ["all x.((GasEfficientEngine(x) & InAutomobiles(x)) -> CausesLessAirPollution(x))"]}
{"id": "entailmentbank_train_739", "nl": "emitting sulfur dioxide causes acid rain.", "fol": "", "prediction": ["all x.((EmittingSulfurDioxide(x) & AcidRain(x)) -> Causes(x,acid))"]}
{"id": "entailmentbank_train_740", "nl": "sulfur scrubbers can reduce the emission of sulfur dioxide.", "fol": "", "prediction": ["all x.(SulfurScrubber(x) -> ReducesEmissionOfSulfurDioxide(x))"]}
{"id": "entailmentbank_train_741", "nl": "sulfur scrubbers can reduce the cause of acid rain.", "fol": "", "prediction": ["all x.(SulfurScrubber(x) -> ReducesAcidRainCause(x))"]}
{"id": "entailmentbank_train_742", "nl": "if something emits something else then that something increases the amount of that something else.", "fol": "", "prediction": ["all x y.((Emits(x,y) & Emits(x,y)) -> IncreasesAmountOf(x,y))"]}
{"id": "entailmentbank_train_743", "nl": "many vehicles increase the amount of pollution in air.", "fol": "", "prediction": ["all x.(Vehicle(x) -> IncreasesAirPollution(x))"]}
{"id": "entailmentbank_train_744", "nl": "an automobile is a kind of vehicle.", "fol": "", "prediction": ["all x.(Automobile(x) -> Vehicle(x))"]}
{"id": "entailmentbank_train_745", "nl": "automobiles increase the pollution in the air.", "fol": "", "prediction": ["all x.(Automobile(x) -> IncreasesPollutionInAir(x))"]}
{"id": "entailmentbank_train_746", "nl": "humans discarding waste in an environment causes harm to that environment.", "fol": "", "prediction": ["all x y.((Human(x) & Environment(y) & DisposesWaste(x,y)) -> CausesHarm(x,y))"]}
{"id": "entailmentbank_train_747", "nl": "garbage means waste.", "fol": "", "prediction": ["all x.(Garbage(x) -> Waste(x))"]}
{"id": "entailmentbank_train_748", "nl": "discarding is similar to throwing.", "fol": "", "prediction": ["all x.(Removal(x) -> SimilarToTowing(x))"]}
{"id": "entailmentbank_train_749", "nl": "humans throwing garbage in an environment causes harm to that environment.", "fol": "", "prediction": ["all x y.((Human(x) & Environment(y) & ThrowsGarbage(x,y)) -> CausesHarm(x,y))"]}
{"id": "entailmentbank_train_750", "nl": "a stream is a kind of moving body of water.", "fol": "", "prediction": ["all x.(Stream(x) -> MovingBodyOfWater(x))"]}
{"id": "entailmentbank_train_751", "nl": "a body of water is a kind of environment.", "fol": "", "prediction": ["all x.(BodyOfWater(x) -> Environment(x))"]}
{"id": "entailmentbank_train_752", "nl": "a stream is a kind of environment.", "fol": "", "prediction": ["all x.(Stream(x) -> Environment(x))"]}
{"id": "entailmentbank_train_753", "nl": "humans throwing garbage into a stream causes harm to the stream.", "fol": "", "prediction": ["all x y.((Human(x) & Stream(y) & ThrowsGarbageInto(x,y)) -> CausesHarm(x,y))"]}
{"id": "entailmentbank_train_754", "nl": "a frog is a kind of aquatic animal.", "fol": "", "prediction": ["all x.(Frog(x) -> AquaticAnimal(x))"]}
{"id": "entailmentbank_train_755", "nl": "a mountain chorus frog is a kind of frog.", "fol": "", "prediction": ["all x.(MountainChoirFrog(x) -> Frog(x))"]}
{"id": "entailmentbank_train_756", "nl": "a mountain chorus frog is a kind of aquatic animal.", "fol": "", "prediction": ["all x.(MountainChoirFrog(x) -> AquaticAnimal(x))"]}
{"id": "entailmentbank_train_757", "nl": "bodies of water are the habitats for aquatic animals.", "fol": "", "prediction": ["all x.(BodyOfWater(x) -> HabitatForAquaticAnimals(x))"]}
{"id": "entailmentbank_train_758", "nl": "bodies of water are the habitats for mountain chorus frogs.", "fol": "", "prediction": ["all x.((BodyOfWater(x) & MountainChoirFrog(x)) -> Habitat(x))"]}
{"id": "entailmentbank_train_759", "nl": "a mountain chorus frog is a kind of animal.", "fol": "", "prediction": ["all x.(MountainChoirFrog(x) -> Animal(x))"]}
{"id": "entailmentbank_train_760", "nl": "pollutions in animals habitat can cause the population of animals to decrease.", "fol": "", "prediction": ["all x y.((Pollution(x) & AnimalHabitat(y)) -> CanCauseDecreasedPopulation(x,y))"]}
{"id": "entailmentbank_train_761", "nl": "water pollution in bodies of water can cause the population of mountain chorus frogs to decrease.", "fol": "", "prediction": ["all x.((WaterPollution(x) & BodyOfWater(x)) -> MountainChoirFrogsDecrease(x))"]}
{"id": "entailmentbank_train_762", "nl": "polluting means something poisonous is added to an environment.", "fol": "", "prediction": ["all x y.((Polluting(x) & Environment(y)) -> AddsPoisonous(x,y))"]}
{"id": "entailmentbank_train_763", "nl": "poisonous things added in water can cause the population of mountain chorus frogs to decrease.", "fol": "", "prediction": ["all x.((PoisonousThings(x) & AddedInWater(x)) -> MountainChoirFrogsDecrease(x))"]}
{"id": "entailmentbank_train_764", "nl": "oil is a kind of pollutant.", "fol": "", "prediction": ["all x.(Oil(x) -> Pollutant(x))"]}
{"id": "entailmentbank_train_765", "nl": "water pollution is when humans pollute the environment with pollutants.", "fol": "", "prediction": ["all x y.((Human(x) & Environment(y) & PollutesWithPollutants(x,y)) -> WaterPollution(x))"]}
{"id": "entailmentbank_train_766", "nl": "an example of water pollution is when humans pollute the environment with oil.", "fol": "", "prediction": ["all x.((Human(x) & PollutesEnvironmentWithOil(x)) -> WaterPollution(x))"]}
{"id": "entailmentbank_train_767", "nl": "offshore oil platforms might cause oil to leak into the water.", "fol": "", "prediction": ["all x.(OffshoreOilPlatform(x) -> CouldCauseOilLeakIntoWater(x))"]}
{"id": "entailmentbank_train_768", "nl": "water is a part of an environment.", "fol": "", "prediction": ["all x.(Water(x) -> PartOfEnvironment(x))"]}
{"id": "entailmentbank_train_769", "nl": "offshore oil platforms might cause water pollution by leaking oil into the water.", "fol": "", "prediction": ["all x.(OffshoreOilPlatform(x) -> (CausesWaterPollution(x) & LeaksOilIntoWater(x)))"]}
{"id": "entailmentbank_train_770", "nl": "a lawn is a piece of land covered with grass.", "fol": "", "prediction": ["all x.(Lawn(x) -> (LandCoveredWithGrass(x)))"]}
{"id": "entailmentbank_train_771", "nl": "if fertilizer is used on a land, then the runoff from that land will contain fertilizer.", "fol": "", "prediction": ["all x y.((Fertilizer(x) & Land(y) & UsedOn(x,y)) -> ContainsFertilizer(x,y))"]}
{"id": "entailmentbank_train_772", "nl": "lori uses fertilizer on her lawn.", "fol": "", "prediction": ["all x y.((Lori(x) & Lawn(y)) -> UsesFertilizer(x,y))"]}
{"id": "entailmentbank_train_773", "nl": "the runoff from the lawn will contain fertilizer.", "fol": "", "prediction": ["all x y.((Runoff(x) & Lawn(y)) -> ContainsFertilizer(x,y))"]}
{"id": "entailmentbank_train_774", "nl": "a lake is a kind of body of water.", "fol": "", "prediction": ["all x.(Lake(x) -> BodyOfWater(x))"]}
{"id": "entailmentbank_train_775", "nl": "runoff flows across land and ends in bodies of water.", "fol": "", "prediction": ["all x.(Runoff(x) -> (FlowsAcrossLand(x) & EndsInBodyOfWater(x)))"]}
{"id": "entailmentbank_train_776", "nl": "the runoff from the lawn containing fertilizer can flow and end in the lake.", "fol": "", "prediction": ["all x y.((Landscaping(x) & Lake(y)) -> (RunoffFromLandscaping(x,y) & ContainsFertilizer(x)))"]}
{"id": "entailmentbank_train_777", "nl": "algae is found in bodies of water.", "fol": "", "prediction": ["all x.(Algae(x) -> FoundInBodyOfWater(x))"]}
{"id": "entailmentbank_train_778", "nl": "algae can be found in lake.", "fol": "", "prediction": ["all x.(Algae(x) -> FoundInLake(x))"]}
{"id": "entailmentbank_train_779", "nl": "fertilizers have a positive impact on algae growth.", "fol": "", "prediction": ["all x.(Fertilizer(x) -> PositiveImpactOnAlgaeGrowth(x))"]}
{"id": "entailmentbank_train_780", "nl": "the population of algae in the lake will increase because of the fertilizer in the runoff.", "fol": "", "prediction": ["all x y.((AlgaePopulation(x) & Lake(y) & FertilizerInRunoff(x,y)) -> Increases(x,y))"]}
{"id": "entailmentbank_train_781", "nl": "phytoplankton is a kind of plant.", "fol": "", "prediction": ["all x.(Plant(x) -> Plant(x))"]}
{"id": "entailmentbank_train_782", "nl": "phytoplanktons are found in bodies of water.", "fol": "", "prediction": ["all x.(Phytoplankton(x) -> FoundInBodyOfWater(x))"]}
{"id": "entailmentbank_train_783", "nl": "an ocean is a kind of body of water.", "fol": "", "prediction": ["all x.(Ocean(x) -> BodyOfWater(x))"]}
{"id": "entailmentbank_train_784", "nl": "phytoplanktons are plants that can be found in the ocean.", "fol": "", "prediction": ["all x.(Phytoplankton(x) -> (Plant(x) & FoundInOcean(x)))"]}
{"id": "entailmentbank_train_785", "nl": "algae is a kind of plant.", "fol": "", "prediction": ["all x.(Algae(x) -> Plant(x))"]}
{"id": "entailmentbank_train_786", "nl": "algae is a plant that can be found in the ocean.", "fol": "", "prediction": ["all x.(Algae(x) -> (Plant(x) & FoundInOcean(x)))"]}
{"id": "entailmentbank_train_787", "nl": "phytoplanktons and algae are plants that can be found in the ocean.", "fol": "", "prediction": ["all x.((Plant(x) & (Phytoplankton(x) | Algae(x))) -> FoundInOcean(x))"]}
{"id": "entailmentbank_train_788", "nl": "plants are a source of oxygen through photosynthesis.", "fol": "", "prediction": ["all x.(Plant(x) -> SourceOfOxygenThroughPhotosynthesis(x))"]}
{"id": "entailmentbank_train_789", "nl": "phytoplanktons and algae are source of oxygen in the ocean.", "fol": "", "prediction": ["all x y.((Phytoplankton(x) & Algae(y)) -> SourceOfOxygenInOcean(x,y))"]}
{"id": "entailmentbank_train_790", "nl": "ocean pollution can decrease the number of phytoplanktons and algae.", "fol": "", "prediction": ["all x.(OceanPollution(x) -> (DecreasesNumberOfPhytoplanktons(x) & ReducesNumberOfAlgae(x)))"]}
{"id": "entailmentbank_train_791", "nl": "ocean pollution can decrease the source of oxygen in the ocean.", "fol": "", "prediction": ["all x.(OceanPollution(x) -> DecreasesOxygenSource(x))"]}
{"id": "entailmentbank_train_792", "nl": "as the amount of a source of something decreases, the amount of that something will decrease.", "fol": "", "prediction": ["all x y.((Source(x) & Source(y) & DecreasesAmount(x,y)) -> DecreasesAmount(x,y))"]}
{"id": "entailmentbank_train_793", "nl": "ocean pollution can cause the amount of oxygen to decrease in the ocean.", "fol": "", "prediction": ["all x.(OceanPollution(x) -> DecreasesOxygenAmount(x))"]}
{"id": "entailmentbank_train_794", "nl": "a rhinoceros is a kind of animal.", "fol": "", "prediction": ["all x.(Rhinoceros(x) -> Animal(x))"]}
{"id": "entailmentbank_train_795", "nl": "overhunting decreases animal populations.", "fol": "", "prediction": ["all x.(Overhunting(x) -> DecreasesAnimalPopulations(x))"]}
{"id": "entailmentbank_train_796", "nl": "overhunting can decrease rhinoceros populations.", "fol": "", "prediction": ["all x.(Overhunting(x) -> DecreasesRhinocerosPopulations(x))"]}
{"id": "entailmentbank_train_797", "nl": "decreasing in population will cause the population to be low.", "fol": "", "prediction": ["all x.(DecrementingPopulation(x) -> LowPopulation(x))"]}
{"id": "entailmentbank_train_798", "nl": "endangered means low in population.", "fol": "", "prediction": ["all x.(Endangered(x) -> LowPopulation(x))"]}
{"id": "entailmentbank_train_799", "nl": "overhunting can cause the rhinoceros to be endangered.", "fol": "", "prediction": ["all x.(Overhunting(x) -> CanCauseRhinocerosToBeEndangered(x))"]}
{"id": "entailmentbank_train_800", "nl": "an animal is a kind of living thing.", "fol": "", "prediction": ["all x.(Animal(x) -> LivingThing(x))"]}
{"id": "entailmentbank_train_801", "nl": "hunting is when a human kills an animal for food / recreation in the wild.", "fol": "", "prediction": ["all x y.((Human(x) & Animal(y) & KillsForFoodRecreation(x,y)) -> Hunting(x))"]}
{"id": "entailmentbank_train_802", "nl": "killing a living thing decreases the population of that living thing.", "fol": "", "prediction": ["all x y.((LivingThing(x) & Killing(x,y)) -> DecreasesPopulation(x,y))"]}
{"id": "entailmentbank_train_803", "nl": "hunting / overhunting decreases animal populations.", "fol": "", "prediction": ["all x.(Hunting(x) -> DecreasesAnimalPopulations(x))"]}
{"id": "entailmentbank_train_804", "nl": "if a population decreases to zero then that organism is extinct.", "fol": "", "prediction": ["all x.((PopulationDecreasesToZero(x)) -> Extinct(x))"]}
{"id": "entailmentbank_train_805", "nl": "if hunting decreases the animal population to zero, then that animal is extinct.", "fol": "", "prediction": ["all x.((HuntingDecreasesAnimalPopulationToZero(x)) -> Extinct(x))"]}
{"id": "entailmentbank_train_806", "nl": "some animals eat fish for food.", "fol": "", "prediction": ["exists x.(Animal(x) & EatsFish(x))"]}
{"id": "entailmentbank_train_807", "nl": "too much fishing causes the fish population to decrease in an area.", "fol": "", "prediction": ["all x y.((Fishing(x) & Area(y)) -> DecreasedPopulation(x,y))"]}
{"id": "entailmentbank_train_808", "nl": "too much fishing can cause some animals that eat fish to lack food.", "fol": "", "prediction": ["all x.((Animal(x) & EatsFish(x)) -> LacksFood(x))"]}
{"id": "entailmentbank_train_809", "nl": "lack of food causes starvation.", "fol": "", "prediction": ["all x.(LackOfFood(x) -> CausesStarvation(x))"]}
{"id": "entailmentbank_train_810", "nl": "too much fishing can cause starvation for some animals that eat fish.", "fol": "", "prediction": ["all x.((Animal(x) & EatsFish(x)) -> CanCauseStarvation(x))"]}
{"id": "entailmentbank_train_811", "nl": "starvation can decrease animal population.", "fol": "", "prediction": ["all x.(Starvation(x) -> DecreasesAnimalPopulation(x))"]}
{"id": "entailmentbank_train_812", "nl": "starvation can decrease the population of animals that eat fish.", "fol": "", "prediction": ["all x.(Starvation(x) -> DecreasesPopulationOfAnimals(x))"]}
{"id": "entailmentbank_train_813", "nl": "decreasing in population can cause the population to be low.", "fol": "", "prediction": ["all x.(DecrementingPopulation(x) -> LowPopulation(x))"]}
{"id": "entailmentbank_train_814", "nl": "starvation of the animals that eat fish can endanger those animals.", "fol": "", "prediction": ["all x.((Animal(x) & EatsFish(x)) -> Endangered(x))"]}
{"id": "entailmentbank_train_815", "nl": "paper is recyclable.", "fol": "", "prediction": ["all x.(Paper(x) -> Recyclable(x))"]}
{"id": "entailmentbank_train_816", "nl": "notebook paper is a kind of paper.", "fol": "", "prediction": ["all x.(NotebookPaper(x) -> Paper(x))"]}
{"id": "entailmentbank_train_817", "nl": "notebook paper is recyclable.", "fol": "", "prediction": ["all x.(NotebookPaper(x) -> Recyclable(x))"]}
{"id": "entailmentbank_train_818", "nl": "recyclable means a material can be recycled / reused many times.", "fol": "", "prediction": ["all x.(Recyclable(x) -> (Material(x) & Recycled(x) & Reused(x)))"]}
{"id": "entailmentbank_train_819", "nl": "notebook paper canbe recycled many times.", "fol": "", "prediction": ["all x.(NotebookPaper(x) -> CanBeRecycledManyTimes(x))"]}
{"id": "entailmentbank_train_820", "nl": "aluminum is recyclable.", "fol": "", "prediction": ["all x.(Aluminum(x) -> Recyclable(x))"]}
{"id": "entailmentbank_train_821", "nl": "aluminum can be recycled.", "fol": "", "prediction": ["all x.(Aluminum(x) -> CanBeRecycled(x))"]}
{"id": "entailmentbank_train_822", "nl": "recycling decreases the amount of waste sent to landfills.", "fol": "", "prediction": ["all x y.((Recycling(x) & Waste(y)) -> DecreasesAmount(x,y))"]}
{"id": "entailmentbank_train_823", "nl": "recycling aluminum can decrease the amount of waste sent to landfills.", "fol": "", "prediction": ["all x.(RecyclingAluminum(x) -> DecreasesWasteToLandfills(x))"]}
{"id": "entailmentbank_train_824", "nl": "aluminum cans are made of aluminum.", "fol": "", "prediction": ["all x.(AluminumCan(x) -> MadeOfAluminum(x))"]}
{"id": "entailmentbank_train_825", "nl": "aluminum cans are recyclable.", "fol": "", "prediction": ["all x.(AluminumCan(x) -> Recyclable(x))"]}
{"id": "entailmentbank_train_826", "nl": "aluminum cans can be recyled many times.", "fol": "", "prediction": ["all x.(AluminumCan(x) -> CanBeRecyledManyTimes(x))"]}
{"id": "entailmentbank_train_827", "nl": "an example of recycling is using an object to make a new object.", "fol": "", "prediction": ["all x.(Recycling(x) -> (UsesObject(x) & MakesNewObject(x)))"]}
{"id": "entailmentbank_train_828", "nl": "an aluminum can is a kind of object.", "fol": "", "prediction": ["all x.(AluminumCan(x) -> Object(x))"]}
{"id": "entailmentbank_train_829", "nl": "using aluminum cans to make a new object is an example of recycling.", "fol": "", "prediction": ["all x.((AluminumCan(x) & MakesNewObject(x)) -> Recycling(x))"]}
{"id": "entailmentbank_train_830", "nl": "an aluminum can is made of aluminum.", "fol": "", "prediction": ["all x.(AluminumCan(x) -> MadeOfAluminum(x))"]}
{"id": "entailmentbank_train_831", "nl": "an aluminum can is recyclable.", "fol": "", "prediction": ["all x.(AluminumCan(x) -> Recyclable(x))"]}
{"id": "entailmentbank_train_832", "nl": "metal is a kind of natural resource.", "fol": "", "prediction": ["all x.(Metal(x) -> NaturalResource(x))"]}
{"id": "entailmentbank_train_833", "nl": "aluminum is a kind of natural resource.", "fol": "", "prediction": ["all x.(Aluminum(x) -> NaturalResource(x))"]}
{"id": "entailmentbank_train_834", "nl": "aluminum cans are made of a natural resource.", "fol": "", "prediction": ["all x.(AluminumCan(x) -> MadeOfNaturalResource(x))"]}
{"id": "entailmentbank_train_835", "nl": "recycling resources has a positive impact on the conservation of those resources.", "fol": "", "prediction": ["all x y.((RecyclingResource(x) & Resource(y)) -> PositiveImpactOnConservation(x,y))"]}
{"id": "entailmentbank_train_836", "nl": "recycling aluminum cans has a positive impact on the conservation of those resources.", "fol": "", "prediction": ["all x.(RecyclingAluminumCans(x) -> PositiveImpactOnConservationOfResources(x))"]}
{"id": "entailmentbank_train_837", "nl": "trash is similar to waste.", "fol": "", "prediction": ["all x.(Trash(x) -> SimilarToWaste(x))"]}
{"id": "entailmentbank_train_838", "nl": "recycling decreases the amount of trash sent to landfills.", "fol": "", "prediction": ["all x y.((Recycling(x) & Waste(y)) -> DecreasesAmount(x,y))"]}
{"id": "entailmentbank_train_839", "nl": "recyclable means a material can be recycled many times.", "fol": "", "prediction": ["all x.(Recyclable(x) -> CanBeRecycledManyTimes(x))"]}
{"id": "entailmentbank_train_840", "nl": "aluminum can be recycled many times.", "fol": "", "prediction": ["all x.(Aluminum(x) -> CanBeRecycledManyTimes(x))"]}
{"id": "entailmentbank_train_841", "nl": "aluminum is a nonrenewable resource.", "fol": "", "prediction": ["all x.(Aluminum(x) -> NonRenewableResource(x))"]}
{"id": "entailmentbank_train_842", "nl": "aluminum is a nonrenewable resource that can be recycled many times.", "fol": "", "prediction": ["all x.(Aluminum(x) -> (NonRenewableResource(x) & CanBeRecycled(x)))"]}
{"id": "entailmentbank_train_843", "nl": "recycling nonrenewable resources has a positive impact on the environment.", "fol": "", "prediction": ["all x.(RecyclingNonRenewableResources(x) -> PositiveImpactOnEnvironment(x))"]}
{"id": "entailmentbank_train_844", "nl": "recycling aluminum has a positive impact on the environment.", "fol": "", "prediction": ["all x.(RecyclingAluminum(x) -> PositiveImpactOnEnvironment(x))"]}
{"id": "entailmentbank_train_845", "nl": "recycling is a kind of method of disposal.", "fol": "", "prediction": ["all x.(Recycling(x) -> DisposalMethod(x))"]}
{"id": "entailmentbank_train_846", "nl": "recycling aluminum is the best way to dispose aluminum.", "fol": "", "prediction": ["all x.(RecyclingAluminum(x) -> BestMethodToDisposeAluminum(x))"]}
{"id": "entailmentbank_train_847", "nl": "glass is recyclable.", "fol": "", "prediction": ["all x.(Glass(x) -> Recyclable(x))"]}
{"id": "entailmentbank_train_848", "nl": "glass bottles are made of glass.", "fol": "", "prediction": ["all x.(GlassBottle(x) -> MadeOfGlass(x))"]}
{"id": "entailmentbank_train_849", "nl": "glass is a kind of material.", "fol": "", "prediction": ["all x.(Glass(x) -> Material(x))"]}
{"id": "entailmentbank_train_850", "nl": "glass bottles are made of recyclable material.", "fol": "", "prediction": ["all x.(GlassBottle(x) -> MadeOfRecyclableMaterial(x))"]}
{"id": "entailmentbank_train_851", "nl": "glass bottles can be reused many times.", "fol": "", "prediction": ["all x.(GlassBall(x) -> CanBeReusedManyTimes(x))"]}
{"id": "entailmentbank_train_852", "nl": "cardboard is biodegradable.", "fol": "", "prediction": ["all x.(Cartoon(x) -> Biodegradable(x))"]}
{"id": "entailmentbank_train_853", "nl": "cardboard is a kind of material.", "fol": "", "prediction": ["all x.(Cartoon(x) -> Material(x))"]}
{"id": "entailmentbank_train_854", "nl": "cardboard is inexpensive in cost.", "fol": "", "prediction": ["all x.(Cartoon(x) -> InexpensiveCost(x))"]}
{"id": "entailmentbank_train_855", "nl": "cardboard is recyclable.", "fol": "", "prediction": ["all x.(Cartoon(x) -> Recyclable(x))"]}
{"id": "entailmentbank_train_856", "nl": "cardboard is a material that is recyclable, biodegradable, and inexpensive in cost.", "fol": "", "prediction": ["all x.(Cartoon(x) -> (Recyclable(x) & Biodegradable(x) & Inexpensive(x)))"]}
{"id": "entailmentbank_train_857", "nl": "the inner core is located in the center of the earth.", "fol": "", "prediction": ["all x.(InnerCore(x) -> LocatedInCenterOfEarth(x))"]}
{"id": "entailmentbank_train_858", "nl": "the pressure at the center of the earth is extremely high.", "fol": "", "prediction": ["all x.((EarthCenter(x) & PressureExtremelyHigh(x)) -> PressureExtremelyHigh(x))"]}
{"id": "entailmentbank_train_859", "nl": "the inner core of the earth is under extremely high pressure.", "fol": "", "prediction": ["all x.((Earth(x) & InnerCore(x)) -> ExtremelyHighPressure(x))"]}
{"id": "entailmentbank_train_860", "nl": "extreme high pressure causes the inner core of earth to be in solid state.", "fol": "", "prediction": ["all x.(ExtremeHighPressure(x) -> InnerCoreInSolidState(x))"]}
{"id": "entailmentbank_train_861", "nl": "the inner core of earth is solid.", "fol": "", "prediction": ["all x.((Earth(x) & InnerCore(x)) -> Solid(x))"]}
{"id": "entailmentbank_train_862", "nl": "the oceanic crust mainly is made of basalt.", "fol": "", "prediction": ["all x.(OceanCrust(x) -> MadeOfBasalt(x))"]}
{"id": "entailmentbank_train_863", "nl": "the continental crust mainly is made of granite.", "fol": "", "prediction": ["all x.(ContinentalCrust(x) -> MadeOfGranite(x))"]}
{"id": "entailmentbank_train_864", "nl": "basalt is more dense than granite.", "fol": "", "prediction": ["all x.(Basalt(x) -> MoreDenseThanGranite(x))"]}
{"id": "entailmentbank_train_865", "nl": "the oceanic crust is more dense than the continental crust.", "fol": "", "prediction": ["all x y.((OceanCrust(x) & ContinentalCrust(y)) -> MoreDense(x,y))"]}
{"id": "entailmentbank_train_866", "nl": "the mantle is located between the crust and the outer core.", "fol": "", "prediction": ["all x.(Mantle(x) -> (LocatedBetweenCrustAndOuterCore(x)))"]}
{"id": "entailmentbank_train_867", "nl": "the mantle is the largest layer of the earth.", "fol": "", "prediction": ["all x.(Mantle(x) -> LargestLayerOfEarth(x))"]}
{"id": "entailmentbank_train_868", "nl": "the mantle is the largest layer of the earth located between the crust and the outer core.", "fol": "", "prediction": ["all x.(Mantle(x) -> (LargestLayerOfEarth(x) & BetweenCrustAndOuterCore(x)))"]}
{"id": "entailmentbank_train_869", "nl": "earthquakes causes older rock to be on top of younger rock.", "fol": "", "prediction": ["all x y.((Earthquake(x) & OlderRock(y)) -> OnTopOfYoungerRock(y,x))"]}
{"id": "entailmentbank_train_870", "nl": "earthquakes cause rock layers to fold on top of each other.", "fol": "", "prediction": ["all x y.((Earthquake(x) & RockLayer(y)) -> FoldsOnTopOf(y,x))"]}
{"id": "entailmentbank_train_871", "nl": "earthquakes causes older rock layers to be on top of younger rock layers by folding the rock layers.", "fol": "", "prediction": ["all x y.((Earthquake(x) & RockLayer(y)) -> (OlderRockLayer(x,y) & FoldsRockLayer(x,y)))"]}
{"id": "entailmentbank_train_872", "nl": "10 to 30 seconds is a short amount of time.", "fol": "", "prediction": ["all x.(ShortTime(x) -> (Time(x,10) & Time(x,30)))"]}
{"id": "entailmentbank_train_873", "nl": "an earthquake usually occurs over a period of 10 to 30 seconds.", "fol": "", "prediction": ["all x.(Earthquake(x) -> OccursOverPeriod(x,10) & OccursOverPeriod(x,30)))"]}
{"id": "entailmentbank_train_874", "nl": "an earthquake usually occurs in a short amount of time.", "fol": "", "prediction": ["all x.(Earthquake(x) -> OccursInShortAmountOfTime(x))"]}
{"id": "entailmentbank_train_875", "nl": "shaking the ground of the earth can change earth's surface.", "fol": "", "prediction": ["all x.(ShakingGroundOfEarth(x) -> ChangesEarthSurface(x))"]}
{"id": "entailmentbank_train_876", "nl": "an earthquake causes the ground to shake.", "fol": "", "prediction": ["all x.(Earthquake(x) -> CausesGroundToShake(x))"]}
{"id": "entailmentbank_train_877", "nl": "an earthquake can change earth's surface by shaking the ground.", "fol": "", "prediction": ["all x.(Earthquake(x) -> ChangesEarthSurfaceByShakingGround(x))"]}
{"id": "entailmentbank_train_878", "nl": "an earthquake can change earth's surface in a short amount of time.", "fol": "", "prediction": ["all x.(Earthquake(x) -> CanChangeEarthSurfaceInShortAmountOfTime(x))"]}
{"id": "entailmentbank_train_879", "nl": "in a short amount of time is similar to quickly.", "fol": "", "prediction": ["all x.((ShortAmountOfTime(x) & QuickTime(x)) -> SimilarToQuickTime(x))"]}
{"id": "entailmentbank_train_880", "nl": "an earthquake changes earth's surface quickly.", "fol": "", "prediction": ["all x.(Earthquake(x) -> ChangesSurfaceQuickly(x))"]}
{"id": "entailmentbank_train_881", "nl": "the mantle of the earth is mainly made of silicate.", "fol": "", "prediction": ["all x.(EarthMantle(x) -> MadeOfSilicate(x))"]}
{"id": "entailmentbank_train_882", "nl": "different media are made of different materials.", "fol": "", "prediction": ["all x.(Media(x) -> MadeOfDifferentMaterials(x))"]}
{"id": "entailmentbank_train_883", "nl": "the crust of the earth is made of basalt or granite.", "fol": "", "prediction": ["all x.(CrustOfEarth(x) -> (MadeOfBasalt(x) | MadeOfGranite(x)))"]}
{"id": "entailmentbank_train_884", "nl": "the mantle and the crust are different media.", "fol": "", "prediction": ["all x.((Mantle(x) & Crust(x)) -> DifferentMedia(x))"]}
{"id": "entailmentbank_train_885", "nl": "waves travel at different speed in different medium.", "fol": "", "prediction": ["all x y.((Waves(x) & Medium(y)) -> TravelsAtDifferentSpeed(x,y))"]}
{"id": "entailmentbank_train_886", "nl": "waves will travel at different speed in the mantle and the crust.", "fol": "", "prediction": ["all x.(Waves(x) -> (TravelsAtDifferentSpeed(x) & Mantle(x) & Crust(x)))"]}
{"id": "entailmentbank_train_887", "nl": "an earthquake wave is a kind of wave.", "fol": "", "prediction": ["all x.(EarthquakeWave(x) -> Wave(x))"]}
{"id": "entailmentbank_train_888", "nl": "earthquake waves will travel at different speed in the mantle and the crust.", "fol": "", "prediction": ["all x.(EarthquakeWaves(x) -> (TravelsAtDifferentSpeed(x,Mantle) & TravelsAtDifferentSpeed(x,Crust)))"]}
{"id": "entailmentbank_train_889", "nl": "earthquakes are most common along tectonic plate boundaries.", "fol": "", "prediction": ["all x.(Earthquake(x) -> MostCommonAlongTectonicPlateBoundaries(x))"]}
{"id": "entailmentbank_train_890", "nl": "active volcanoes are most common along tectonic plate boundaries.", "fol": "", "prediction": ["all x.(ActiveVolcano(x) -> MostCommonAlongTectonicPlateBoundaries(x))"]}
{"id": "entailmentbank_train_891", "nl": "active volcanoes and earthquakes are most common along tectonic plate boundaries.", "fol": "", "prediction": ["all x.((ActiveVolcano(x) | Earthquake(x)) -> MostCommonAlongTectonicPlateBoundaries(x))"]}
{"id": "entailmentbank_train_892", "nl": "all waves transmit energy from one place to another.", "fol": "", "prediction": ["all x y.((Waves(x) & Place(y)) -> TransmitsEnergy(x,y))"]}
{"id": "entailmentbank_train_893", "nl": "earthquake waves transmit energy from one place to another.", "fol": "", "prediction": ["all x y.((EarthquakeWaves(x) & Place(y)) -> TransmitsEnergy(x,y))"]}
{"id": "entailmentbank_train_894", "nl": "the appalachian mountains are a kind of mountain.", "fol": "", "prediction": ["all x.(AppalachianMountain(x) -> Mountain(x))"]}
{"id": "entailmentbank_train_895", "nl": "mountains are formed by plate tectonics.", "fol": "", "prediction": ["all x.(Mountain(x) -> FormedByPlateTectonics(x))"]}
{"id": "entailmentbank_train_896", "nl": "the appalachian mountains are formed by plate tectonics.", "fol": "", "prediction": ["all x.(AppalachianMountain(x) -> FormedByPlateTectonics(x))"]}
{"id": "entailmentbank_train_897", "nl": "the collision of the boundaries causes rocks to fold.", "fol": "", "prediction": ["all x.((CollusionOfBoundaries(x) & CausesRocksToFold(x)) -> CausesRocksToFold(x))"]}
{"id": "entailmentbank_train_898", "nl": "the collision of tectonic plates are found at the convergent boundaries.", "fol": "", "prediction": ["all x.((CollisionOfTectonicPlates(x) & ConvergentBoundaries(x)) -> FoundAt(x,y))"]}
{"id": "entailmentbank_train_899", "nl": "the collision of the tectonic plates causes rocks to fold at the convergent boundaries.", "fol": "", "prediction": ["all x y.((CollisionOfTectonicPlates(x) & Rock(y)) -> FoldAtConvergentBoundaries(y,x))"]}
{"id": "entailmentbank_train_900", "nl": "a mountain range is formed by rocks folding upon one another.", "fol": "", "prediction": ["all x.(MountainRange(x) -> FormedByRocksFoldingOnOneAnother(x))"]}
{"id": "entailmentbank_train_901", "nl": "mountains will form at the convergent boundaries by the collision of the tectonic plates.", "fol": "", "prediction": ["all x y.((Mountain(x) & ConvergentBoundaries(y) & CollisionOfTectonicPlates(x,y)) -> FormsAt(x,y))"]}
{"id": "entailmentbank_train_902", "nl": "the appalanchian mountains are formed at the convergent boundaries by the collision of the tectonice plates.", "fol": "", "prediction": ["all x.(AppalanchianMountain(x) -> FormedAtConvergentBoundariesByCollisionOfTectonicePlates(x))"]}
{"id": "entailmentbank_train_903", "nl": "new land can be formed by volcanoes erupting by lava cooling.", "fol": "", "prediction": ["all x y.((Volcano(x) & LavaCooling(y)) -> FormedBy(x,y))"]}
{"id": "entailmentbank_train_904", "nl": "volcano eruption can quickly form a new land when lava cools down.", "fol": "", "prediction": ["all x y.((VolcanoEruption(x) & Lava(y)) -> (CoolsDown(x,y) & FormsNewLand(x,y)))"]}
{"id": "entailmentbank_train_905", "nl": "the intensity of sunlight is a kind of seasonal weather pattern.", "fol": "", "prediction": ["all x.((IntensityOfSunlight(x) & SeasonalWeatherPattern(x)) -> IntensityOfSunlight(x))"]}
{"id": "entailmentbank_train_906", "nl": "the amount of sunlight usually is the same at the locations with same latitude.", "fol": "", "prediction": ["all x.((Sunlight(x) & Location(x) & SameLatitude(x)) -> SameAmount(x))"]}
{"id": "entailmentbank_train_907", "nl": "locations with same latitude has the same seasonal weather pattern of sunlight intensity.", "fol": "", "prediction": ["all x.((Location(x) & SameLatitude(x)) -> SameSeasonalWeatherPattern(x))"]}
{"id": "entailmentbank_train_908", "nl": "nitrogen is a kind of element.", "fol": "", "prediction": ["all x.(Nitrogen(x) -> Element(x))"]}
{"id": "entailmentbank_train_909", "nl": "the earth's atmosphere is made of 78 percent nitrogen by mass.", "fol": "", "prediction": ["all x.(EarthsAtmosphere(x) -> (MadeOf(x,78) & NitrogenByMass(x)))"]}
{"id": "entailmentbank_train_910", "nl": "element nitrogen makes up most of the earth's atmosphere.", "fol": "", "prediction": ["all x.(Element(x) -> MakesUpMostOfEarthsAtmosphere(x))"]}
{"id": "entailmentbank_train_911", "nl": "nitrogen is a kind of gas.", "fol": "", "prediction": ["all x.(Nitrogen(x) -> Gas(x))"]}
{"id": "entailmentbank_train_912", "nl": "nitrogen gas makes up most of the earth's atmosphere.", "fol": "", "prediction": ["all x.(NitrogenGas(x) -> MakesUpMostOfEarthsAtmosphere(x))"]}
{"id": "entailmentbank_train_913", "nl": "the earth's atmosphere is made of 78 percent nitrogen by volume.", "fol": "", "prediction": ["all x.(EarthsAtmosphere(x) -> MadeOf(x,78))"]}
{"id": "entailmentbank_train_914", "nl": "the earth's atmosphere is made of 21 percent oxygen by volume.", "fol": "", "prediction": ["all x.((EarthsAtmosphere(x) & MadeOf(x,21)) -> OxygenByVolume(x))"]}
{"id": "entailmentbank_train_915", "nl": "nitrogen and oxygen make up 99% of the earth's atmosphere.", "fol": "", "prediction": ["all x.((Nitrogen(x) & Oxygen(x)) -> MakesUp99%OfAtmosphere(x))"]}
{"id": "entailmentbank_train_916", "nl": "nitrogen and oxygen make up most of the earth's atmosphere.", "fol": "", "prediction": ["all x.((Nitrogen(x) & Oxygen(x)) -> MakesUpMostOfAtmosphere(x))"]}
{"id": "entailmentbank_train_917", "nl": "the earth's atmosphere is made of 036 percent carbon dioxide by volume.", "fol": "", "prediction": ["all x.((EarthsAtmosphere(x) & CarbonDioxide(x)) -> MadeOf(x,036))"]}
{"id": "entailmentbank_train_918", "nl": "the earth's atmosphere is made of 04% to 1% of water vapor by volume.", "fol": "", "prediction": ["all x.(EarthsAtmosphere(x) -> (OfWaterVapor(x,04) | OfWaterVapor(x,1%)))"]}
{"id": "entailmentbank_train_919", "nl": "earth's atmosphere is made of nitrogen, oxygen, water vapor, and carbon dioxide.", "fol": "", "prediction": ["all x.((EarthsAtmosphere(x) & MadeOfNitrogen(x) & MadeOfOxygen(x) & MadeOfWaterVapor(x) & MadeOfCarbonDioxide(x)) -> MadeOf(x,Nitrogen,Oxygen,WaterVapor,CarbonDioxide))"]}
{"id": "entailmentbank_train_920", "nl": "an increase is the opposite of a decrease.", "fol": "", "prediction": ["all x.((Increase(x) & Decrease(x)) -> OppositeOf(x,Decrease))"]}
{"id": "entailmentbank_train_921", "nl": "as altitude increases, the temperature of the air will decrease in the troposphere.", "fol": "", "prediction": ["all x.((Altitude(x) & Increases(x)) -> TemperatureDecreasesInTroposphere(x))"]}
{"id": "entailmentbank_train_922", "nl": "as the altitude increases, the temperature of the air will increase in the stratosphere.", "fol": "", "prediction": ["all x y.((Altitude(x) & Temperature(y)) -> IncreasesInStratosphere(y))"]}
{"id": "entailmentbank_train_923", "nl": "as the altitude increases, the change of air temperature are opposite in stratosphere and troposphere.", "fol": "", "prediction": ["all x.((Altitude(x) & AltitudeIncrease(x)) -> (ChangeOfAirTemperature(x) & OppositeInStratosphere(x) & OppositeInTroposphere(x)))"]}
{"id": "entailmentbank_train_924", "nl": "water vapor is a kind of greenhouse gas.", "fol": "", "prediction": ["all x.(WaterVapor(x) -> GreenhouseGas(x))"]}
{"id": "entailmentbank_train_925", "nl": "the earth's atmosphere is made of 04 to 1 percent water vapor by volume.", "fol": "", "prediction": ["all x.(EarthsAtmosphere(x) -> (Color(x,04) & PercentWaterVapor(x,1)))"]}
{"id": "entailmentbank_train_926", "nl": "water vapor is a greenhouse gas accounting for 04 to 1 percent of the earth's atmosphere.", "fol": "", "prediction": ["all x.(WaterVapor(x) -> (GreenhouseGas(x) & AccountsForAtmosphere(x,04) & AccountsForAtmosphere(x,1)))"]}
{"id": "entailmentbank_train_927", "nl": "carbon dioxide is a kind of greenhouse gas.", "fol": "", "prediction": ["all x.(CarbonDioxide(x) -> GreenhouseGas(x))"]}
{"id": "entailmentbank_train_928", "nl": "carbon dioxide is a greehouse gas accounting for 0036 percent of the earth's atmosphere.", "fol": "", "prediction": ["all x.(CarbonDioxide(x) -> (GreehouseGas(x) & AccountsFor(x,0036)))"]}
{"id": "entailmentbank_train_929", "nl": "04 is bigger than 0036.", "fol": "", "prediction": ["all x.((04(x) & BiggerThan(x,0036)) -> BiggerThan(x,0036))"]}
{"id": "entailmentbank_train_930", "nl": "water vapor is the largest amount of greenhouse gas in the atmosphere.", "fol": "", "prediction": ["all x.(WaterVapor(x) -> LargestAmountOfGreenhouseGas(x))"]}
{"id": "entailmentbank_train_931", "nl": "an aurora is created by charged particles interact with magnetosphere.", "fol": "", "prediction": ["all x.(Aurora(x) -> (CreatedByChargedParticles(x) & InteractWithMagnetosphere(x)))"]}
{"id": "entailmentbank_train_932", "nl": "aurora is a kind of atmospheric phenomena.", "fol": "", "prediction": ["all x.(Aurora(x) -> AtmosphericPhenomenon(x))"]}
{"id": "entailmentbank_train_933", "nl": "an aurora is an atmospheric phenomena that is created by charged particles interact with magnetosphere.", "fol": "", "prediction": ["all x.(Aurora(x) -> (AtmosphericPhenomenon(x) & CreatedByChargedParticles(x) & InteractsWithMagnetosphere(x)))"]}
{"id": "entailmentbank_train_934", "nl": "a source of something increases the amount of that something.", "fol": "", "prediction": ["all x y.((Source(x) & Something(y)) -> IncreasesAmount(x,y))"]}
{"id": "entailmentbank_train_935", "nl": "photosynthesis is a source of oxygen.", "fol": "", "prediction": ["all x.(Photosynthesis(x) -> SourceOfOxygen(x))"]}
{"id": "entailmentbank_train_936", "nl": "photosynthesis increases the amount of oxygen in the atmosphere.", "fol": "", "prediction": ["all x.(Photosynthesis(x) -> IncreasesOxygenInAtmosphere(x))"]}
{"id": "entailmentbank_train_937", "nl": "the photosynthetic life performs photosynthesis.", "fol": "", "prediction": ["all x.(PhotosyntheticLife(x) -> PerformsPhotosynthesis(x))"]}
{"id": "entailmentbank_train_938", "nl": "early photosynthetic life increases the oxygen level in earth's atmosphere.", "fol": "", "prediction": ["all x.((EarlyPhotosyntheticLife(x) & IncreasesOxygenLevel(x)) -> IncreasesOxygenLevel(x))"]}
{"id": "entailmentbank_train_939", "nl": "ice caps and glaciers contain 69% of the freshwater on earth.", "fol": "", "prediction": ["all x.((IceCap(x) | Glacier(x)) -> ContainsFreshwater(x,69%))"]}
{"id": "entailmentbank_train_940", "nl": "earth contains glaciers / ice caps.", "fol": "", "prediction": ["all x.(Earth(x) -> (ContainsGlaciers(x) | ContainsIceCaps(x)))"]}
{"id": "entailmentbank_train_941", "nl": "the majority of freshwater is found in ice caps and glaciers on earth.", "fol": "", "prediction": ["all x y.((Freshwater(x) & IceCap(y) & Glacier(y)) -> FoundIn(x,y))"]}
{"id": "entailmentbank_train_942", "nl": "ice caps and glaciers contain 69% of freshwater on earth.", "fol": "", "prediction": ["all x.((IceCap(x) | Glacier(x)) -> ContainsFreshwater(x,69%))"]}
{"id": "entailmentbank_train_943", "nl": "ice caps and glaciers contain most of the freshwater on earth.", "fol": "", "prediction": ["all x y.((IceCap(x) & Glacier(y)) -> (ContainsFreshwater(x,y) & OnEarth(y)))"]}
{"id": "entailmentbank_train_944", "nl": "glaciers are a kind of major reservoir.", "fol": "", "prediction": ["all x.(Glacier(x) -> MajorReservoir(x))"]}
{"id": "entailmentbank_train_945", "nl": "glaciers are the major reservoir that contains most of freshwater on earth.", "fol": "", "prediction": ["all x.(Glacier(x) -> (MainReservoir(x) & ContainsFreshwater(x)))"]}
{"id": "entailmentbank_train_946", "nl": "ice sheet is a kind of glacier.", "fol": "", "prediction": ["all x.(IceShape(x) -> Glacier(x))"]}
{"id": "entailmentbank_train_947", "nl": "ice sheet is the major reservoir that contains most of freshwater on earth.", "fol": "", "prediction": ["all x.(IceShape(x) -> (MainReservoir(x) & ContainsMostOfFreshwater(x)))"]}
{"id": "entailmentbank_train_948", "nl": "deflection is when an object changes its moving direction.", "fol": "", "prediction": ["all x.(Deflection(x) -> ChangesMovingDirection(x))"]}
{"id": "entailmentbank_train_949", "nl": "the drag of wind causes the surface of the water to change its direction toward the direction of the wind.", "fol": "", "prediction": ["all x y.((DragOfWind(x) & SurfaceOfWater(y)) -> ChangesDirectionTowardsWind(y))"]}
{"id": "entailmentbank_train_950", "nl": "the drag of wind causes the water to deflect toward the direction of the wind.", "fol": "", "prediction": ["all x y.((DragOfWind(x) & Water(y)) -> DeflectsTowardsWindDirection(y,x))"]}
{"id": "entailmentbank_train_951", "nl": "petroleum is a kind of fossil fuel.", "fol": "", "prediction": ["all x.(Petroleum(x) -> FossilFuel(x))"]}
{"id": "entailmentbank_train_952", "nl": "forming fossil fuels requires deposition and burial of decaying vegetation.", "fol": "", "prediction": ["all x.(FossilFuels(x) -> (RequiresDeposition(x) & RequiresBoiling(x)))"]}
{"id": "entailmentbank_train_953", "nl": "forming petroleum requires deposition and burial of decaying begetation.", "fol": "", "prediction": ["all x.(FormingPetroleum(x) -> (RequiresDeposition(x) & RequiresBirth(x)))"]}
{"id": "entailmentbank_train_954", "nl": "vegetation is a part of the biosphere.", "fol": "", "prediction": ["all x.(Vegetation(x) -> Biosphere(x))"]}
{"id": "entailmentbank_train_955", "nl": "fossil fuel is a part of the lithosphere.", "fol": "", "prediction": ["all x.(FossilFuel(x) -> PartOfLithosphere(x))"]}
{"id": "entailmentbank_train_956", "nl": "the formation of petroleum cycles from biosphere to lithospehre.", "fol": "", "prediction": ["all x y.((PetroleumCycle(x) & Biosphere(y) & Lithospehre(y)) -> Formation(x,y))"]}
{"id": "entailmentbank_train_957", "nl": "soil contains weathered rocks and organic matter.", "fol": "", "prediction": ["all x.(Soil(x) -> (ContainsWeatheredRocks(x) & ContainsOrganicMatter(x)))"]}
{"id": "entailmentbank_train_958", "nl": "an mixture is formed by two or more substances combined together physically.", "fol": "", "prediction": ["all x.(Mixture(x) -> (FormedBySubstances(x) & PhysicallyCombined(x)))"]}
{"id": "entailmentbank_train_959", "nl": "soil is a mixture containing weathered rocks and organic matter.", "fol": "", "prediction": ["all x.(Soil(x) -> (WeatheredRocks(x) & OrganicMatter(x)))"]}
{"id": "entailmentbank_train_960", "nl": "tunnels in soil loosen that soil.", "fol": "", "prediction": ["all x y.((Tunnel(x) & Soil(y)) -> Loosens(x,y))"]}
{"id": "entailmentbank_train_961", "nl": "earthworms create tunnels in soil.", "fol": "", "prediction": ["all x y.((Earthworm(x) & Soil(y)) -> CreatesTunnels(x,y))"]}
{"id": "entailmentbank_train_962", "nl": "earthworms can loosen the soil.", "fol": "", "prediction": ["all x.(Earthworm(x) -> CanLoosenSoil(x))"]}
{"id": "entailmentbank_train_963", "nl": "the looseness of soil increases the amount of oxygen in that soil.", "fol": "", "prediction": ["all x.(LoosenessOfSoil(x) -> IncreasesOxygenInSoil(x))"]}
{"id": "entailmentbank_train_964", "nl": "the looseness of soil increases the ability of water to enter the soil.", "fol": "", "prediction": ["all x.(LoosenessOfSoil(x) -> IncreasesWaterEntry(x))"]}
{"id": "entailmentbank_train_965", "nl": "earthworms can help increase the amount of water and oxygen in the soil.", "fol": "", "prediction": ["all x.(Earthworm(x) -> (IncreasesWater(x) & IncreasesOxygen(x)))"]}
{"id": "entailmentbank_train_966", "nl": "sand drains water quickly.", "fol": "", "prediction": ["all x.(Sand(x) -> DrainsWaterQuickly(x))"]}
{"id": "entailmentbank_train_967", "nl": "if something drains water quickly, then that something will have little capacity to hold water.", "fol": "", "prediction": ["all x.((DrainsWaterQuickly(x) & HasLittleCapacityToHoldWater(x)) -> DrainsWaterQuickly(x))"]}
{"id": "entailmentbank_train_968", "nl": "sand has little capacity to hold water.", "fol": "", "prediction": ["all x.(Sand(x) -> LittleCapacityToHoldWater(x))"]}
{"id": "entailmentbank_train_969", "nl": "humus is a source of nutrients in soil.", "fol": "", "prediction": ["all x.(Humus(x) -> SourceOfNutrientsInSoil(x))"]}
{"id": "entailmentbank_train_970", "nl": "high humus content causes the soil to be brown.", "fol": "", "prediction": ["all x.(HighHumusContent(x) -> BrownSoil(x))"]}
{"id": "entailmentbank_train_971", "nl": "soil with high nutrients content will be brown.", "fol": "", "prediction": ["all x.((Soil(x) & HighNutrientsContent(x)) -> Brown(x))"]}
{"id": "entailmentbank_train_972", "nl": "color of the soil can be used to indicate the soil component.", "fol": "", "prediction": ["all x.((Soil(x) & ColorOfSoil(x)) -> IndicatesSoilComponent(x))"]}
{"id": "entailmentbank_train_973", "nl": "brown color can be used to indicate the soil is high in nutrients.", "fol": "", "prediction": ["all x.((Soil(x) & BrownColor(x)) -> HighNutrients(x))"]}
{"id": "entailmentbank_train_974", "nl": "a plant requires nutrients to grow.", "fol": "", "prediction": ["all x.((Plant(x) & RequiresNutrients(x)) -> Grows(x))"]}
{"id": "entailmentbank_train_975", "nl": "soil contains nutrients for plants.", "fol": "", "prediction": ["all x.(Soil(x) -> ContainsNutrientsForPlants(x))"]}
{"id": "entailmentbank_train_976", "nl": "plants use the nutrients in soil to grow.", "fol": "", "prediction": ["all x y.((Plant(x) & Soil(y)) -> UsesNutrientsToGrow(x,y))"]}
{"id": "entailmentbank_train_977", "nl": "using resources decreases those resources.", "fol": "", "prediction": ["all x.((Resource(x) & Uses(x,y)) -> Decreases(x,y))"]}
{"id": "entailmentbank_train_978", "nl": "plants can decrese the nutrients in soil.", "fol": "", "prediction": ["all x y.((Plant(x) & Soil(y)) -> CanDecreseNutrients(x,y))"]}
{"id": "entailmentbank_train_979", "nl": "a rainforest is a kind of forest.", "fol": "", "prediction": ["all x.(Rainforest(x) -> Forest(x))"]}
{"id": "entailmentbank_train_980", "nl": "a forest contains lots of plants / trees.", "fol": "", "prediction": ["all x.(Forest(x) -> ContainsLotsOfPlants(x))"]}
{"id": "entailmentbank_train_981", "nl": "a rainforest contains lots of plants.", "fol": "", "prediction": ["all x.(Rainforest(x) -> ContainsLotsOfPlants(x))"]}
{"id": "entailmentbank_train_982", "nl": "the soil in a rainforest can be low in nutrients.", "fol": "", "prediction": ["all x y.((Rainforest(x) & Soil(y)) -> LowNutrients(y))"]}
{"id": "entailmentbank_train_983", "nl": "decomposition increases the amount of nutrients / nitrogen in the soil.", "fol": "", "prediction": ["all x y.((Decomposition(x) & Soil(y)) -> IncreasesNutrientsAndNitrogen(x,y))"]}
{"id": "entailmentbank_train_984", "nl": "decomposition is when a decomposer recycles nutrients from dead organisms to the soil by eating those dead organisms.", "fol": "", "prediction": ["all x y z.((Decomposer(x) & DeadOrganism(y) & Soil(z)) -> RecyclesNutrients(x,y,z))"]}
{"id": "entailmentbank_train_985", "nl": "decomposers in the soil can increase the amount of nutrients in the soil.", "fol": "", "prediction": ["all x y.((Decomposer(x) & Soil(y)) -> IncreasesNutrients(x,y))"]}
{"id": "entailmentbank_train_986", "nl": "topsoil is a kind of soil.", "fol": "", "prediction": ["all x.(Topsoil(x) -> Soil(x))"]}
{"id": "entailmentbank_train_987", "nl": "an earthworm is a kind of decomposer.", "fol": "", "prediction": ["all x.(Earthworm(x) -> Decomposer(x))"]}
{"id": "entailmentbank_train_988", "nl": "earthworms can increase the amount of nutrients in the topsoil.", "fol": "", "prediction": ["all x.(Earthworm(x) -> IncreasesNutrientsInTopsoil(x))"]}
{"id": "entailmentbank_train_989", "nl": "wildfire removes the nutrients in soil sometimes.", "fol": "", "prediction": ["all x y.((Wildfire(x) & Soil(y)) -> RemovesNutrients(x,y))"]}
{"id": "entailmentbank_train_990", "nl": "phosphorus is a kind of nutrient for plant growth.", "fol": "", "prediction": ["all x.(Phosphorus(x) -> NutrientForPlantGrowth(x))"]}
{"id": "entailmentbank_train_991", "nl": "potassium is a kind of nutrient for plant growth.", "fol": "", "prediction": ["all x.(Kalyum(x) -> NutrientForPlantGrowth(x))"]}
{"id": "entailmentbank_train_992", "nl": "nitrogen is a kind of nutrient for plant growth.", "fol": "", "prediction": ["all x.(Nitrogen(x) -> NutrientForPlantGrowth(x))"]}
{"id": "entailmentbank_train_993", "nl": "wildfire can remove the soil nutrients such as phosphorus, nitrogen, and potassium from soil.", "fol": "", "prediction": ["all x y z.((Wildfire(x) & SoilNutrient(y) & Soil(z)) -> (Removes(x,y,z) & (Phosphorus(y) | Nitrogen(y) | Potassium(y))))"]}
{"id": "entailmentbank_train_994", "nl": "if the nutrients in soil is removed, then the carrying capacity of soil for plant will be reduced.", "fol": "", "prediction": ["all x.((NutrientsInSoil(x) & Removed(x)) -> ReducedCarryingCapacity(x))"]}
{"id": "entailmentbank_train_995", "nl": "wildfire can cause the carrying capacity of soil for plant to be reduced.", "fol": "", "prediction": ["all x y.((Wildfire(x) & Soil(y)) -> ReducedCarryingCapacity(x,y))"]}
{"id": "entailmentbank_train_996", "nl": "acid can cause rocks to weather by chemical reaction.", "fol": "", "prediction": ["all x.(Acid(x) -> CausesRocksToWeatherByChemicalReaction(x))"]}
{"id": "entailmentbank_train_997", "nl": "lichens can produce acid to break down rocks.", "fol": "", "prediction": ["all x.(Lichen(x) -> (ProducesAcid(x) & BreaksDownRocks(x)))"]}
{"id": "entailmentbank_train_998", "nl": "lichens can cause rocks to break down by chemical weathering.", "fol": "", "prediction": ["all x.(Lichen(x) -> BreaksDownByChemicalWeathering(x))"]}
{"id": "entailmentbank_train_999", "nl": "soil is formed by weathering.", "fol": "", "prediction": ["all x.(Soil(x) -> Weathered(x))"]}
{"id": "entailmentbank_train_1000", "nl": "lichens breaking down rocks can form soil.", "fol": "", "prediction": ["all x.(Lichen(x) -> BreaksDownRocks(x))"]}
{"id": "entailmentbank_train_1001", "nl": "organic matter is a source of nutrients in soil.", "fol": "", "prediction": ["all x.(OrganicMatter(x) -> SourceOfNutrientsInSoil(x))"]}
{"id": "entailmentbank_train_1002", "nl": "decaying plant is a kind of organic matter.", "fol": "", "prediction": ["all x.(DecayingPlant(x) -> OrganicMatter(x))"]}
{"id": "entailmentbank_train_1003", "nl": "decaying plant is a source of nutrients in soil.", "fol": "", "prediction": ["all x.(DecayingPlant(x) -> SourceOfNutrientsInSoil(x))"]}
{"id": "entailmentbank_train_1004", "nl": "fertile soil has a high number of nutrients.", "fol": "", "prediction": ["all x.(FertileSoil(x) -> HighNutrients(x))"]}
{"id": "entailmentbank_train_1005", "nl": "decaying plant can make the soil fertile.", "fol": "", "prediction": ["all x.(DecayingPlant(x) -> CanMakeSoilFertile(x))"]}
{"id": "entailmentbank_train_1006", "nl": "rain is a kind of precipitation.", "fol": "", "prediction": ["all x.(Rain(x) -> Precipitation(x))"]}
{"id": "entailmentbank_train_1007", "nl": "a storm is a source of precipitation.", "fol": "", "prediction": ["all x.(Storm(x) -> SourceOfPrecipitation(x))"]}
{"id": "entailmentbank_train_1008", "nl": "a storm can be a source of rain.", "fol": "", "prediction": ["all x.(Storm(x) -> SourceOfRain(x))"]}
{"id": "entailmentbank_train_1009", "nl": "a thunderstorm is a kind of storm.", "fol": "", "prediction": ["all x.(Thunderstorm(x) -> Storm(x))"]}
{"id": "entailmentbank_train_1010", "nl": "a thunderstorm is a source of rain.", "fol": "", "prediction": ["all x.(Thunderstorm(x) -> SourceOfRain(x))"]}
{"id": "entailmentbank_train_1011", "nl": "cold fronts cause thunderstorms as they pass by.", "fol": "", "prediction": ["all x.((ColdFront(x) & PassesBy(x)) -> CausesThunderstorms(x))"]}
{"id": "entailmentbank_train_1012", "nl": "cold fronts can cause thudnerstorms of rain as they pass by.", "fol": "", "prediction": ["all x.((ColdFront(x) & PassesBy(x)) -> CausesThudnerstormsOfRain(x))"]}
{"id": "entailmentbank_train_1013", "nl": "united states are located in the middle latitudes between 30 and 60 degrees latitude.", "fol": "", "prediction": ["all x.((UnitedStates(x) & MidLatitude(x,30) & MidLatitude(x,60)) -> LocatedIn(x,30))"]}
{"id": "entailmentbank_train_1014", "nl": "prevailing westerlies are prevailing winds from the west toward the east in the middle latitudes between 30 and 60 degrees latitude.", "fol": "", "prediction": ["all x.((Westerly(x) & WestTowardsEast(x)) -> PrevalenceWinds(x,30,60))"]}
{"id": "entailmentbank_train_1015", "nl": "prevailing westerlies are prevailing winds that move from west to east across the united states.", "fol": "", "prediction": ["all x.((Westerly(x) & PrevalenceWind(x)) -> (MovesFromWestToEast(x) & UnitedStates(x)))"]}
{"id": "entailmentbank_train_1016", "nl": "wind can make air masses to move in the same direction.", "fol": "", "prediction": ["all x y.((Wind(x) & AirMass(y)) -> MakesMovement(x,y))"]}
{"id": "entailmentbank_train_1017", "nl": "the prevailing westerlies move air masses from west to east across the united states.", "fol": "", "prediction": ["all x y.((Westerly(x) & UnitedStates(y)) -> MovesAirMassesFromWestToEast(x,y))"]}
{"id": "entailmentbank_train_1018", "nl": "jet streams may deflect the air masses moved by the prevailing westerlies.", "fol": "", "prediction": ["all x y.((JetStream(x) & AirMass(y) & FlowingWesterlies(x)) -> Deflects(x,y))"]}
{"id": "entailmentbank_train_1019", "nl": "the prevailing westerlies move air masses from west to east accross the united states but maybe deflected by the jet streams.", "fol": "", "prediction": ["all x y.((Westerly(x) & UnitedStates(y)) -> (MovesAirMasses(x,y) & DeflectedByJetStreams(x)))"]}
{"id": "entailmentbank_train_1020", "nl": "snow is a kind of precipitation.", "fol": "", "prediction": ["all x.(Snow(x) -> Precipitation(x))"]}
{"id": "entailmentbank_train_1021", "nl": "a storm is a source of rain or snow.", "fol": "", "prediction": ["all x.(Storm(x) -> (SourceOfRain(x) | SourceOfSnow(x)))"]}
{"id": "entailmentbank_train_1022", "nl": "a thunderstorm is a source of rain or snow.", "fol": "", "prediction": ["all x.(Thunderstorm(x) -> (SourceOfRain(x) | SourceOfSnow(x)))"]}
{"id": "entailmentbank_train_1023", "nl": "cold fronts will cause rain or snow as they pass by.", "fol": "", "prediction": ["all x.(ColdFront(x) -> (CausesRain(x) | CausesSnow(x)))"]}
{"id": "entailmentbank_train_1024", "nl": "solar energy can warm up the air.", "fol": "", "prediction": ["all x.(SolarEnergy(x) -> WarmsUpAir(x))"]}
{"id": "entailmentbank_train_1025", "nl": "the ground radiates solar energy into air.", "fol": "", "prediction": ["all x y.((Ground(x) & Air(y)) -> RadiatesSolarEnergy(x,y))"]}
{"id": "entailmentbank_train_1026", "nl": "the solar energy radiated by the ground can warm up air.", "fol": "", "prediction": ["all x y.((SolarEnergy(x) & Ground(y) & RadiatedBy(x,y)) -> WarmsUpAir(x))"]}
{"id": "entailmentbank_train_1027", "nl": "if gas is heated then that gas will rise.", "fol": "", "prediction": ["all x.(HeatedGas(x) -> RisesGas(x))"]}
{"id": "entailmentbank_train_1028", "nl": "air is a kind of gas.", "fol": "", "prediction": ["all x.(Air(x) -> Gas(x))"]}
{"id": "entailmentbank_train_1029", "nl": "if air is heated then air will rise.", "fol": "", "prediction": ["all x.(HeatedAir(x) -> RisesAir(x))"]}
{"id": "entailmentbank_train_1030", "nl": "the solar energy radiated by the ground can cause the air to rise.", "fol": "", "prediction": ["all x y.((SolarEnergy(x) & Ground(y) & RadiatedBy(x,y)) -> CausesAirToRise(x))"]}
{"id": "entailmentbank_train_1031", "nl": "travelling up a mountain side is a kind of rising.", "fol": "", "prediction": ["all x.((TravelsUpMountainSide(x) & MountainSide(x)) -> Rising(x))"]}
{"id": "entailmentbank_train_1032", "nl": "the solar energy radiated by the ground can cause the air to travel up a mountain side.", "fol": "", "prediction": ["all x y.((SolarEnergy(x) & Ground(y) & RadiatedBy(x,y)) -> CanCauseAirToTravelUpMountainSide(x,y))"]}
{"id": "entailmentbank_train_1033", "nl": "the air mass formed close to the ocean is humid in moisture.", "fol": "", "prediction": ["all x.((AirMassFormedCloseToOcean(x) & HumidInMoisture(x)) -> FormsCloseToOcean(x))"]}
{"id": "entailmentbank_train_1034", "nl": "the air mass over the ocean is warm.", "fol": "", "prediction": ["all x.((AirMass(x) & OverOcean(x)) -> Warm(x))"]}
{"id": "entailmentbank_train_1035", "nl": "the air mass over the ocean is warm and humid.", "fol": "", "prediction": ["all x.(AirMass(x) -> (Warm(x) & Humid(x)))"]}
{"id": "entailmentbank_train_1036", "nl": "unstable air mass can cause a thunderstorm.", "fol": "", "prediction": ["all x.(InstabileAirMass(x) -> CanCauseThunderstorm(x))"]}
{"id": "entailmentbank_train_1037", "nl": "warm and humid air masses are usually unstable.", "fol": "", "prediction": ["all x.((Warm(x) & Humid(x)) -> Instabil(x))"]}
{"id": "entailmentbank_train_1038", "nl": "warm and humid air masses can cause thunderstorms.", "fol": "", "prediction": ["all x.((WarmAirMass(x) & HumidAirMass(x)) -> CanCauseThunderstorms(x))"]}
{"id": "entailmentbank_train_1039", "nl": "the warm and humid air mass over the ocean can cause thunderstorms.", "fol": "", "prediction": ["all x.((WarmAndHumidAirMass(x) & OverOcean(x)) -> CanCauseThunderstorms(x))"]}
{"id": "entailmentbank_train_1040", "nl": "thunderstorms are a source of rainfall.", "fol": "", "prediction": ["all x.(Thunderstorm(x) -> SourceOfRainfall(x))"]}
{"id": "entailmentbank_train_1041", "nl": "the warm and humid air mass over the ocean can cause rainfall.", "fol": "", "prediction": ["all x.((WarmAndHumidAirMass(x) & OverOcean(x)) -> CanCauseRainfall(x))"]}
{"id": "entailmentbank_train_1042", "nl": "a fly is a kind of insect.", "fol": "", "prediction": ["all x.(Fly(x) -> Insect(x))"]}
{"id": "entailmentbank_train_1043", "nl": "a moose is a kind of animal.", "fol": "", "prediction": ["all x.(Moose(x) -> Animal(x))"]}
{"id": "entailmentbank_train_1044", "nl": "rolling in mud can be used to avoid insect bites by an animal.", "fol": "", "prediction": ["all x y.((RollingInMush(x) & Animal(y)) -> CanAvoidInsectBits(x,y))"]}
{"id": "entailmentbank_train_1045", "nl": "rolling in mud can be used to avoid fly bites by a moose.", "fol": "", "prediction": ["all x y.((RollingInMush(x) & Moose(y)) -> AvoidsFlyBits(x,y))"]}
{"id": "entailmentbank_train_1046", "nl": "rolling in mud is a learned behavior.", "fol": "", "prediction": ["all x.(RollingInMush(x) -> LearnedBehavior(x))"]}
{"id": "entailmentbank_train_1047", "nl": "a moose rolling in mud to avoid fly bites is a kind of learned behavior.", "fol": "", "prediction": ["all x.((Moose(x) & RollsInMush(x) & AvoidsFlyBits(x)) -> LearnedBehavior(x))"]}
{"id": "entailmentbank_train_1048", "nl": "the sierra nevada is a kind of mountain range.", "fol": "", "prediction": ["all x.(SerraNevada(x) -> MountainRange(x))"]}
{"id": "entailmentbank_train_1049", "nl": "a mountain range contains mountains.", "fol": "", "prediction": ["all x.(MountainRange(x) -> ContainsMountains(x))"]}
{"id": "entailmentbank_train_1050", "nl": "sierra nevada contains mountains.", "fol": "", "prediction": ["all x.(SerraNevada(x) -> ContainsMountains(x))"]}
{"id": "entailmentbank_train_1051", "nl": "mountains can limit the water vapor reaching a location.", "fol": "", "prediction": ["all x y.((Mountain(x) & Location(y)) -> LimitsWaterVapor(x,y))"]}
{"id": "entailmentbank_train_1052", "nl": "sierra nevada mountains can limit the water vapor reaching a location.", "fol": "", "prediction": ["all x.(SerraNevadaMountain(x) -> LimitsWaterVapor(x))"]}
{"id": "entailmentbank_train_1053", "nl": "sierra nevada mountains are located in nevada.", "fol": "", "prediction": ["all x.(SerraNevadaMountain(x) -> LocatedInNevada(x))"]}
{"id": "entailmentbank_train_1054", "nl": "sierra nevada mountains can limit the water vapor reaching nevada.", "fol": "", "prediction": ["all x y.((SierraNevadaMountain(x) & Nevada(y)) -> LimitsWaterVapor(x,y))"]}
{"id": "entailmentbank_train_1055", "nl": "sierra nevada mountains are located in west of nevada.", "fol": "", "prediction": ["all x.(SerraNevadaMountain(x) -> LocatedInWestOfNevada(x))"]}
{"id": "entailmentbank_train_1056", "nl": "if water vapor is limited to reach a location, then that location will be dry.", "fol": "", "prediction": ["all x.((WaterVapor(x) & LimitedToReachLocation(x)) -> DryLocation(x))"]}
{"id": "entailmentbank_train_1057", "nl": "sierra nevada mountains causes the climate in nevada to be dry.", "fol": "", "prediction": ["all x y.((SierraNevadaMountains(x) & NevadaClimate(y)) -> Dry(y))"]}
{"id": "entailmentbank_train_1058", "nl": "grey clouds are a source of precipitation.", "fol": "", "prediction": ["all x.(GrayCloud(x) -> SourceOfPrecipitation(x))"]}
{"id": "entailmentbank_train_1059", "nl": "grey clouds can be a source of snow.", "fol": "", "prediction": ["all x.(GrayCloud(x) -> SourceOfSnow(x))"]}
{"id": "entailmentbank_train_1060", "nl": "a warm front is when warm air mass passes over a cold air mass.", "fol": "", "prediction": ["all x.(WarmFront(x) -> (WarmAirMass(x) & PassesOverColdAirMass(x)))"]}
{"id": "entailmentbank_train_1061", "nl": "when warm air mass passes over cold air mass, the water vapor in the warm air mass will condense.", "fol": "", "prediction": ["all x y.((WarmAirMass(x) & ColdAirMass(y)) -> CondensesWaterVapor(x,y))"]}
{"id": "entailmentbank_train_1062", "nl": "a warm front will cause the water vapor to condense.", "fol": "", "prediction": ["all x.(WarmFront(x) -> WaterVaporCondense(x))"]}
{"id": "entailmentbank_train_1063", "nl": "clouds are formed by water vapor condensing.", "fol": "", "prediction": ["all x.(Cloud(x) -> FormedByWaterVaporCondensing(x))"]}
{"id": "entailmentbank_train_1064", "nl": "a warm front causes clouds to form.", "fol": "", "prediction": ["all x.(WarmFront(x) -> CausesCloudsToForm(x))"]}
{"id": "entailmentbank_train_1065", "nl": "clouds produce precipitation.", "fol": "", "prediction": ["all x.(Cloud(x) -> ProducesPrecipitation(x))"]}
{"id": "entailmentbank_train_1066", "nl": "a warm front causes cloudy and rainy weather.", "fol": "", "prediction": ["all x.(WarmFront(x) -> (CausesCloudyWeather(x) & CausesRainyWeather(x)))"]}
{"id": "entailmentbank_train_1067", "nl": "clouds are formed by water vapor rising into colder regions of the atmosphere and condensing.", "fol": "", "prediction": ["all x.(Cloud(x) -> (WaterVapor(x) & RisesIntoColderRegions(x) & Condenses(x)))"]}
{"id": "entailmentbank_train_1068", "nl": "water vapor is a kind of gas.", "fol": "", "prediction": ["all x.(WaterVapor(x) -> Gas(x))"]}
{"id": "entailmentbank_train_1069", "nl": "the condensation of water vapor causes cloud to form.", "fol": "", "prediction": ["all x.(CondensationOfWaterVapor(x) -> CloudForm(x))"]}
{"id": "entailmentbank_train_1070", "nl": "temperature is a measure of heat energy.", "fol": "", "prediction": ["all x.(Temperature(x) -> HeatEnergy(x))"]}
{"id": "entailmentbank_train_1071", "nl": "condensing means a substance changes from a gas into a liquid by decreasing heat energy.", "fol": "", "prediction": ["all x y.((Substance(x) & Gas(y) & Liquid(y)) -> Condensing(x,y))"]}
{"id": "entailmentbank_train_1072", "nl": "decreased temperature will casue a substance condense from gas state to liquid state.", "fol": "", "prediction": ["all x.(DecreasedTemperature(x) -> CondensesFromGasToLiquidState(x))"]}
{"id": "entailmentbank_train_1073", "nl": "water vapor is water in gas state.", "fol": "", "prediction": ["all x.(WaterVapor(x) -> WaterInGasState(x))"]}
{"id": "entailmentbank_train_1074", "nl": "water droplets are water in liquid state.", "fol": "", "prediction": ["all x.(WaterDroplet(x) -> WaterInLiquidState(x))"]}
{"id": "entailmentbank_train_1075", "nl": "decreased temperature will cause water vapor to condense to water droplets.", "fol": "", "prediction": ["all x.(DecreasedTemperature(x) -> WaterVaporCondensesToWaterDroplets(x))"]}
{"id": "entailmentbank_train_1076", "nl": "the properties of something are used for describing that something.", "fol": "", "prediction": ["all x y.((Properties(x) & Something(y)) -> UsedForDescription(x,y))"]}
{"id": "entailmentbank_train_1077", "nl": "temperature is a property of weather.", "fol": "", "prediction": ["all x.(Temperature(x) -> WeatherProperty(x))"]}
{"id": "entailmentbank_train_1078", "nl": "sky conditions are a property of weather.", "fol": "", "prediction": ["all x.(SkyCondition(x) -> WeatherProperty(x))"]}
{"id": "entailmentbank_train_1079", "nl": "sky and temperature are used to describe weather.", "fol": "", "prediction": ["all x.((Sky(x) & Temperature(x)) -> Weather(x))"]}
{"id": "entailmentbank_train_1080", "nl": "solar energy causes the weather patterns.", "fol": "", "prediction": ["all x.(SolarEnergy(x) -> CausesWeatherPatterns(x))"]}
{"id": "entailmentbank_train_1081", "nl": "the sun is the source of solar energy called sunlight.", "fol": "", "prediction": ["all x.(Sun(x) -> SourceOfSolarEnergy(x))"]}
{"id": "entailmentbank_train_1082", "nl": "the sun causes the weather patterns.", "fol": "", "prediction": ["all x.(Sun(x) -> CausesWeatherPatterns(x))"]}
{"id": "entailmentbank_train_1083", "nl": "when a river floods, that river deposits soil in flood plains.", "fol": "", "prediction": ["all x y.((River(x) & Floods(x)) -> DepositsSoilInFloodPlains(x,y))"]}
{"id": "entailmentbank_train_1084", "nl": "soil and sediment deposited by a river are usually high / rich in nutrients.", "fol": "", "prediction": ["all x.((Soil(x) & Sediment(x) & DeposedByRiver(x)) -> (HighInNutrients(x) | RichInNutrients(x)))"]}
{"id": "entailmentbank_train_1085", "nl": "the soil deposited by a river in flood plains are rich in nutrients.", "fol": "", "prediction": ["all x y.((Soil(x) & River(y) & DepositedBy(x,y)) -> RichInNutrients(x))"]}
{"id": "entailmentbank_train_1086", "nl": "sand is a kind of sediment.", "fol": "", "prediction": ["all x.(Sand(x) -> Sediment(x))"]}
{"id": "entailmentbank_train_1087", "nl": "erosion is when wind transports sediments from one place to another place for a long distance.", "fol": "", "prediction": ["all x y z.((Erosion(x) & Wind(y) & Place(z)) -> TransportsSedimentsForLongDistance(y,z))"]}
{"id": "entailmentbank_train_1088", "nl": "deposition is when wind deposits sediment from one location to a different location.", "fol": "", "prediction": ["all x y.((Wind(x) & Location(y) & DepositsSediment(x,y)) -> Deposition(x,y))"]}
{"id": "entailmentbank_train_1089", "nl": "wind erosion and deposition can transport and deposit sand from one location to other location.", "fol": "", "prediction": ["all x y.((WindErosion(x) & Deposition(y)) -> (TransportsAndDepositsSand(x,y) & FromLocationToLocation(x,y)))"]}
{"id": "entailmentbank_train_1090", "nl": "sand dunes are formed by the wind transporting and depositing sand.", "fol": "", "prediction": ["all x.(SandDune(x) -> (FormedByWind(x) & TransportsAndDepositsSand(x)))"]}
{"id": "entailmentbank_train_1091", "nl": "sand dunes are formed by wind erosion and deposition.", "fol": "", "prediction": ["all x.(SandDune(x) -> (FormedByWindErosion(x) & FormedByDeposition(x)))"]}
{"id": "entailmentbank_train_1092", "nl": "a mountain is made of rocks / soil.", "fol": "", "prediction": ["all x.(Mountain(x) -> (MadeOfRocks(x) & MadeOfSoil(x)))"]}
{"id": "entailmentbank_train_1093", "nl": "a landslide is when water rapidly moves rocks downhill especially after a rain storm.", "fol": "", "prediction": ["all x.(Landslide(x) -> (WaterRapidlyMovesRocksDownhill(x) & RainStorm(x)))"]}
{"id": "entailmentbank_train_1094", "nl": "landslides often occur on mountains.", "fol": "", "prediction": ["all x.(Landslide(x) -> OccursOnMountains(x))"]}
{"id": "entailmentbank_train_1095", "nl": "a landslide after a rainstorm can move rocks downhill from the mountain.", "fol": "", "prediction": ["all x y.((Landslide(x) & Rainstorm(y)) -> MovesRocksDownhill(x,y))"]}
{"id": "entailmentbank_train_1096", "nl": "pouring water onto soil causes that soil to wash away.", "fol": "", "prediction": ["all x y.((PoutingWater(x) & Soil(y)) -> CausesSoilToWashAway(x,y))"]}
{"id": "entailmentbank_train_1097", "nl": "soil erosion is when moving water moves soil from fields / environments.", "fol": "", "prediction": ["all x.(SoilErosion(x) -> MovesWater(x))"]}
{"id": "entailmentbank_train_1098", "nl": "pouring water onto soil is caused by soil erosion.", "fol": "", "prediction": ["all x.((PouringWater(x) & OntoSoil(x)) -> CausedBySoilErosion(x))"]}
{"id": "entailmentbank_train_1099", "nl": "pouring water onto soil is similar to the erosion on the canyon formation.", "fol": "", "prediction": ["all x y.((PouringWater(x) & Soil(y)) -> SimilarToErosion(x,y))"]}
{"id": "entailmentbank_train_1100", "nl": "erosion / storms can cause a landslide.", "fol": "", "prediction": ["all x.((Erosion(x) & Storm(x)) -> CanCauseLandslide(x))"]}
{"id": "entailmentbank_train_1101", "nl": "a landslide is when water / gravity rapidly moves rocks / soil downhill especially after a rain storm.", "fol": "", "prediction": ["all x.(Landslide(x) -> (WaterGerminationMovesRocksSoil(x) & RainStorm(x)))"]}
{"id": "entailmentbank_train_1102", "nl": "erosion causes rocks and soil to move downhill.", "fol": "", "prediction": ["all x.(Erosion(x) -> (CausesRocks(x) & CausesSoil(x) & MovesDownhill(x)))"]}
{"id": "entailmentbank_train_1103", "nl": "erosion can cause the rocks and soil on a mountain to move downhill.", "fol": "", "prediction": ["all x y.((Mountain(x) & Erosion(y)) -> (MovesRocksAndSoil(x,y)))"]}
{"id": "entailmentbank_train_1104", "nl": "erosion is when moving water transports sediments from one place to another place for a long distance.", "fol": "", "prediction": ["all x y z.((Erosion(x) & MovingWater(y) & Sediment(z) & Transports(y,z)) -> LongDistance(x))"]}
{"id": "entailmentbank_train_1105", "nl": "flowing water is a kind of moving water.", "fol": "", "prediction": ["all x.(FlowingWater(x) -> MovingWater(x))"]}
{"id": "entailmentbank_train_1106", "nl": "flowing water can cause erosion.", "fol": "", "prediction": ["all x.(FlowingWater(x) -> CausesErosion(x))"]}
{"id": "entailmentbank_train_1107", "nl": "flood is the water that overflows the river bank.", "fol": "", "prediction": ["all x.(Flood(x) -> OverflowsRiverBank(x))"]}
{"id": "entailmentbank_train_1108", "nl": "a riverbank is made of soil.", "fol": "", "prediction": ["all x.(Riverbank(x) -> MadeOfSoil(x))"]}
{"id": "entailmentbank_train_1109", "nl": "when it floods, water will overflow the soil on the river bank.", "fol": "", "prediction": ["all x y.((Flood(x) & Water(y)) -> OverflowSoil(y,x))"]}
{"id": "entailmentbank_train_1110", "nl": "a flood is a kind of moving water.", "fol": "", "prediction": ["all x.(Flood(x) -> MovingWater(x))"]}
{"id": "entailmentbank_train_1111", "nl": "a flood overflowing the riverbank will cause soil erosion.", "fol": "", "prediction": ["all x y.((Flood(x) & Riverbank(y) & Overflows(x,y)) -> CausesSoilErosion(x))"]}
{"id": "entailmentbank_train_1112", "nl": "weather is a source of wind and water for the weathering process.", "fol": "", "prediction": ["all x.(Weather(x) -> (SourceOfWind(x) & SourceOfWater(x) & WeatheringProcess(x)))"]}
{"id": "entailmentbank_train_1113", "nl": "sometimes weathering smooths / rounds rocks.", "fol": "", "prediction": ["exists x.(Weathering(x) & Smooths(x) & RoundsRock(x))"]}
{"id": "entailmentbank_train_1114", "nl": "weathering by wind and water sometimes smooths rocks.", "fol": "", "prediction": ["all x y.((Weathering(x) & Wind(y) & Water(z)) -> SmoothsRocks(x))"]}
{"id": "entailmentbank_train_1115", "nl": "erosion is when wind / moving water transports sediments from one place to another place for a long distance.", "fol": "", "prediction": ["all x y z.((Erosion(x) & Wind(y) & MovingWater(z)) -> TransportsSediments(x,y,z))"]}
{"id": "entailmentbank_train_1116", "nl": "sand is a kidn of sediments.", "fol": "", "prediction": ["all x.(Sand(x) -> KidnOfSediments(x))"]}
{"id": "entailmentbank_train_1117", "nl": "erosion can transports sand from one place to another place.", "fol": "", "prediction": ["all x y.((Erosion(x) & Sand(y)) -> TransportsFromPlaceToPlace(x,y))"]}
{"id": "entailmentbank_train_1118", "nl": "new sand is brought from other areas and spread on the beaches.", "fol": "", "prediction": ["all x y.((Sand(x) & Area(y)) -> (BroughtFrom(x,y) & SpreadsOnBeaches(x)))"]}
{"id": "entailmentbank_train_1119", "nl": "new sand is brought to the beach by erosion.", "fol": "", "prediction": ["all x y.((Sand(x) & Beach(y)) -> BringsByErosion(x,y))"]}
{"id": "entailmentbank_train_1120", "nl": "erosion usually occurs over a period of many years which is considered a long time.", "fol": "", "prediction": ["all x.(Erosion(x) -> (OccursOverManyYears(x) & LongTime(x)))"]}
{"id": "entailmentbank_train_1121", "nl": "water causes soil and rock erosion.", "fol": "", "prediction": ["all x.(Water(x) -> (CausesSoil(x) & CausesRockErosion(x)))"]}
{"id": "entailmentbank_train_1122", "nl": "water will cause erosion to the rock over a long period of time.", "fol": "", "prediction": ["all x y.((Water(x) & Rock(y)) -> CausesErosion(x,y))"]}
{"id": "entailmentbank_train_1123", "nl": "grass is a kind of plant.", "fol": "", "prediction": ["all x.(Grass(x) -> Plant(x))"]}
{"id": "entailmentbank_train_1124", "nl": "the grasses are removed from the land.", "fol": "", "prediction": ["all x y.((Grass(x) & Land(y)) -> RemovedFrom(x,y))"]}
{"id": "entailmentbank_train_1125", "nl": "in the erosion process roots of plants are an inhibitor.", "fol": "", "prediction": ["all x.((Plant(x) & ErosionProcess(x)) -> Inhibitor(x))"]}
{"id": "entailmentbank_train_1126", "nl": "the inhibitor of the erosion process is removed.", "fol": "", "prediction": ["all x.((InhibitorOfErosionProcess(x) & Removed(x)) -> Removed(x))"]}
{"id": "entailmentbank_train_1127", "nl": "removing an inhibitor of a process causes that process.", "fol": "", "prediction": ["all x y.((Process(x) & Inhibitor(y)) -> Causes(x,y))"]}
{"id": "entailmentbank_train_1128", "nl": "removal of grasses from the land will cause erosion.", "fol": "", "prediction": ["all x.(RemovalOfGrasses(x) -> CausesErosion(x))"]}
{"id": "entailmentbank_train_1129", "nl": "wind and rain cause erosion.", "fol": "", "prediction": ["all x y.((Wind(x) & Rain(y)) -> CausesErosion(x,y))"]}
{"id": "entailmentbank_train_1130", "nl": "soil erosion is when wind and moving water moves soil from fields / environments.", "fol": "", "prediction": ["all x y.((SoilErosion(x) & Wind(y) & MovingWater(y)) -> MovesSoilFromFieldsOrEnvironments(x,y))"]}
{"id": "entailmentbank_train_1131", "nl": "wind and rain can cause soil erosion.", "fol": "", "prediction": ["all x.((Wind(x) | Rain(x)) -> CausesSoilErosion(x))"]}
{"id": "entailmentbank_train_1132", "nl": "removal of grasses from the land will cause wind and rain to erode the soil.", "fol": "", "prediction": ["all x y.((Grass(x) & Land(y)) -> (RemovalOf(x,y) & WindAndRain(x) & ErosionSoil(x)))"]}
{"id": "entailmentbank_train_1133", "nl": "soil loss causes grooves in soil.", "fol": "", "prediction": ["all x.(SoilLoss(x) -> CausesRopesInSoil(x))"]}
{"id": "entailmentbank_train_1134", "nl": "soil erosion means soil loss through wind / water / animals.", "fol": "", "prediction": ["all x.(SoilErosion(x) -> (SoilLoss(x) & (Wind(x) | Water(x) | Animals(x))))"]}
{"id": "entailmentbank_train_1135", "nl": "soil erosion caused by water will cause grooves in soil.", "fol": "", "prediction": ["all x y.((SoilErosion(x) & Water(y)) -> CausesRopesInSoil(x,y))"]}
{"id": "entailmentbank_train_1136", "nl": "rainwater is a kind of water.", "fol": "", "prediction": ["all x.(Rainwater(x) -> Water(x))"]}
{"id": "entailmentbank_train_1137", "nl": "rainwater can cause grooves in soil.", "fol": "", "prediction": ["all x y.((Rainwater(x) & Soil(y)) -> CausesRotations(x,y))"]}
{"id": "entailmentbank_train_1138", "nl": "rainwater can cause grooves in a riverbank.", "fol": "", "prediction": ["all x y.((Rainwater(x) & Riverbank(y)) -> CausesRopes(x,y))"]}
{"id": "entailmentbank_train_1139", "nl": "sometimes weathering smooths rocks.", "fol": "", "prediction": ["exists x.(Weathering(x) & SmoothsRocks(x))"]}
{"id": "entailmentbank_train_1140", "nl": "rocks interacting with moving water over long periods of time causes weathering.", "fol": "", "prediction": ["all x.((Rock(x) & InteractsWithMovingWater(x) & LongPeriodsOfTime(x)) -> CausesWeathering(x))"]}
{"id": "entailmentbank_train_1141", "nl": "rocks interacting with moving water would smooth the rocks.", "fol": "", "prediction": ["all x.((Rock(x) & InteractsWithMovingWater(x)) -> SmoothsRocks(x))"]}
{"id": "entailmentbank_train_1142", "nl": "waves are made of moving water.", "fol": "", "prediction": ["all x.(Waves(x) -> MadeOfMovingWater(x))"]}
{"id": "entailmentbank_train_1143", "nl": "waves interacting with rocks can smooth rocks.", "fol": "", "prediction": ["all x.((Waves(x) & InteractWithRocks(x)) -> SmoothRocks(x))"]}
{"id": "entailmentbank_train_1144", "nl": "a pebble is a kind of small rock.", "fol": "", "prediction": ["all x.(Pebble(x) -> SmallRock(x))"]}
{"id": "entailmentbank_train_1145", "nl": "waves interacting with pebbles can smooth pebbles.", "fol": "", "prediction": ["all x.((Waves(x) & InteractWithPebbles(x)) -> SmoothPebbles(x))"]}
{"id": "entailmentbank_train_1146", "nl": "rain is a kind of natural process.", "fol": "", "prediction": ["all x.(Rain(x) -> NaturalProcess(x))"]}
{"id": "entailmentbank_train_1147", "nl": "rain can decrease the amount of nutrients in soil.", "fol": "", "prediction": ["all x y.((Rain(x) & Soil(y)) -> DecreasesNutrients(x,y))"]}
{"id": "entailmentbank_train_1148", "nl": "rain decreasing the amount of nutrients in soil is caused by a natural process.", "fol": "", "prediction": ["all x y.((Rain(x) & Soil(y) & DecreasesNutrients(x,y)) -> NaturalProcess(x))"]}
{"id": "entailmentbank_train_1149", "nl": "abrasion changes rocks from rough into smooth and round.", "fol": "", "prediction": ["all x.(Abrasion(x) -> (ChangesRocksFromRough(x) & ChangesRocksIntoSmoothAndRound(x)))"]}
{"id": "entailmentbank_train_1150", "nl": "abrasion is a kind of weathering.", "fol": "", "prediction": ["all x.(Abrasion(x) -> Weathering(x))"]}
{"id": "entailmentbank_train_1151", "nl": "abrasion is the kind of weathering that would change the rocks from rough into smooth and rough.", "fol": "", "prediction": ["all x.(Abrasion(x) -> (Weathering(x) & ChangesRocksFromRoughToSmoothAndRough(x)))"]}
{"id": "entailmentbank_train_1152", "nl": "a mountain is made of rocks.", "fol": "", "prediction": ["all x.(Mountain(x) -> MadeOfRocks(x))"]}
{"id": "entailmentbank_train_1153", "nl": "a mountain range contains mountains made of rocks.", "fol": "", "prediction": ["all x.(MountainRange(x) -> ContainsMountainsMadeOfRocks(x))"]}
{"id": "entailmentbank_train_1154", "nl": "sometimes weathering rounds rocks.", "fol": "", "prediction": ["exists x.(Weathering(x) & RoundsRock(x))"]}
{"id": "entailmentbank_train_1155", "nl": "weathering can round the rocks in the mountain range.", "fol": "", "prediction": ["all x y.((Weathering(x) & Rock(y)) -> RoundsInMountainRange(x,y))"]}
{"id": "entailmentbank_train_1156", "nl": "if soil is held in place, then soil erosion can be prevented.", "fol": "", "prediction": ["all x.((Soil(x) & HeldInPlace(x)) -> CanPreventSoilErosion(x))"]}
{"id": "entailmentbank_train_1157", "nl": "roots hold soil in place.", "fol": "", "prediction": ["all x.(Root(x) -> HoldsSoilInPlace(x))"]}
{"id": "entailmentbank_train_1158", "nl": "roots help prevent soil erosion by holding soil in place.", "fol": "", "prediction": ["all x.(Roots(x) -> (HelpsPreventSoilErosion(x) & HoldsSoilInPlace(x)))"]}
{"id": "entailmentbank_train_1159", "nl": "removing trees will decrease the roots in the soil.", "fol": "", "prediction": ["all x.(RemovingTrees(x) -> DecreasesRootsInSoil(x))"]}
{"id": "entailmentbank_train_1160", "nl": "removing trees will increase soil erosion by decreasing the roots holding the soil in place.", "fol": "", "prediction": ["all x.(RemovingTrees(x) -> (IncreaseSoilErosion(x) & DecreaseRoots(x)))"]}
{"id": "entailmentbank_train_1161", "nl": "when water freezes, that water expands.", "fol": "", "prediction": ["all x.((Water(x) & Freezes(x)) -> Expands(x))"]}
{"id": "entailmentbank_train_1162", "nl": "if there is a crack in a rock, then water can get into the crack.", "fol": "", "prediction": ["all x y.((Crack(x) & Rock(y)) -> CanGetInto(x,y))"]}
{"id": "entailmentbank_train_1163", "nl": "if water freezes in the crack of the rock, then water will expand in the crack.", "fol": "", "prediction": ["all x y.((Water(x) & Crack(y) & FreezesIn(x,y)) -> ExpandsIn(x,y))"]}
{"id": "entailmentbank_train_1164", "nl": "if water expands in a crack in a rock, then the rock will break apart.", "fol": "", "prediction": ["all x y.((WaterExpandsInCrack(x) & Rock(y)) -> BreaksApart(y))"]}
{"id": "entailmentbank_train_1165", "nl": "if water freezes in the crack of the rock, then the rock will break apart by water expanding when it freezes.", "fol": "", "prediction": ["all x y.((Rock(x) & Water(y) & FreezesInCrack(y,x)) -> BreaksApartByWaterExpanding(x))"]}
{"id": "entailmentbank_train_1166", "nl": "weathering means breaking down rocks from a larger whole into smaller pieces.", "fol": "", "prediction": ["all x y.((Weathering(x) & Rock(y)) -> BreaksDownFromLargerToSmallerPieces(x,y))"]}
{"id": "entailmentbank_train_1167", "nl": "soil is formed by breaking down rocks from a larger whole into smaller pieces.", "fol": "", "prediction": ["all x y.((Soil(x) & Rock(y)) -> (FormedByBreachingDown(x,y) & FromLargerWholeIntoSmallerPieces(x)))"]}
{"id": "entailmentbank_train_1168", "nl": "scraping an object may cause small particles to break off of that object.", "fol": "", "prediction": ["all x y.((Scraping(x) & Object(y)) -> (CausesSmallParticles(x,y) & BreakOffOf(x,y)))"]}
{"id": "entailmentbank_train_1169", "nl": "scraping a rock may cause small particles to break off the whole rock.", "fol": "", "prediction": ["all x y.((Rock(x) & Scraping(x,y)) -> (CausesSmallParticles(x,y) & BreaksOffRock(y)))"]}
{"id": "entailmentbank_train_1170", "nl": "glacier may scrape rocks when it moves.", "fol": "", "prediction": ["all x.((Glacier(x) & Moves(x)) -> ScrapesRocks(x))"]}
{"id": "entailmentbank_train_1171", "nl": "glacier can scrape a rock and cause small particles to break off the whole rock.", "fol": "", "prediction": ["all x y.((Glacier(x) & Rock(y)) -> ScrapesAndBreaksOff(x,y))"]}
{"id": "entailmentbank_train_1172", "nl": "soil is made of very small rocks / minerals.", "fol": "", "prediction": ["all x.(Soil(x) -> (MadeOfSmallRocks(x) & MadeOfMinerals(x)))"]}
{"id": "entailmentbank_train_1173", "nl": "the small particles of a rock scraped by the glacier can make up soil.", "fol": "", "prediction": ["all x y.((Rock(x) & Glacier(y) & ScrapedBy(x,y)) -> CanMakeUpSoil(x))"]}
{"id": "entailmentbank_train_1174", "nl": "rocks interacting with wind and moving water over long periods of time causes weathering.", "fol": "", "prediction": ["all x.((Rock(x) & InteractsWithWind(x) & MovesWater(x) & LongPeriodsOfTime(x)) -> CausesWeathering(x))"]}
{"id": "entailmentbank_train_1175", "nl": "weathering means breaking down rocks from a larger whole into smaller pieces by weather / mechanical means.", "fol": "", "prediction": ["all x y.((WeatheringMeasure(x) & Rock(y)) -> BreaksDownByWeatherOrMechanicalMeasures(x,y))"]}
{"id": "entailmentbank_train_1176", "nl": "interacting with wind and moving water causes the rocks to be broken down from a larger whole into smaller pieces.", "fol": "", "prediction": ["all x y.((Interaction(x) & Wind(x) & MovingWater(x)) -> BreaksRocksDownFromLargerWholeIntoSmallerPieces(y))"]}
{"id": "entailmentbank_train_1177", "nl": "a boulder is a kind of rock.", "fol": "", "prediction": ["all x.(Blood(x) -> Rock(x))"]}
{"id": "entailmentbank_train_1178", "nl": "weathering means breaking down rocks from a larger whole into smaller pieces by mechanical means.", "fol": "", "prediction": ["all x y.((WeatheringMeasure(x) & Rock(y)) -> BreaksDownByMechanicalMeasures(x,y))"]}
{"id": "entailmentbank_train_1179", "nl": "breaking down a boulder from a larger whole into smaller pieces is an example of weathering.", "fol": "", "prediction": ["all x y.((Bolt(x) & LargerWhole(y) & SmallerPieces(x)) -> Weathering(x))"]}
{"id": "entailmentbank_train_1180", "nl": "a crack is formed by breaking the whole.", "fol": "", "prediction": ["all x.(Crack(x) -> FormedByBreakingWhole(x))"]}
{"id": "entailmentbank_train_1181", "nl": "cracks will be formed by the weathering of a boulder.", "fol": "", "prediction": ["all x y.((Crack(x) & Boulder(y)) -> Weathered(x,y))"]}
{"id": "entailmentbank_train_1182", "nl": "cycles of freezing and thawing water cause ice wedging.", "fol": "", "prediction": ["all x.((Cycle(x) & FreezingWater(x) & ThawingWater(x)) -> IceWedging(x))"]}
{"id": "entailmentbank_train_1183", "nl": "ice wedging is a kind of mechanical weathering.", "fol": "", "prediction": ["all x.(IceWedging(x) -> MechanicalWeathering(x))"]}
{"id": "entailmentbank_train_1184", "nl": "cycles of freezing and thawing water cause mechanical weathering.", "fol": "", "prediction": ["all x.((Cycle(x) & FreezingWater(x) & ThawingWater(x)) -> MechanicalWeathering(x))"]}
{"id": "entailmentbank_train_1185", "nl": "mechanical weathering means breaking down rocks from a larger whole into smaller pieces by mechanical means.", "fol": "", "prediction": ["all x y.((MechanicalWeathering(x) & Rock(y)) -> BreaksDownByMechanicalMeasures(x,y))"]}
{"id": "entailmentbank_train_1186", "nl": "rocks will be broken down from a larger whole into smaller pieces by cycles of freezing and thawing water.", "fol": "", "prediction": ["all x y.((Rock(x) & LargerWhole(y) & SmallerPieces(x)) -> BreakedDownByCyclesOfFreezingAndThawingWater(x,y))"]}
{"id": "entailmentbank_train_1187", "nl": "water is a kind of substance.", "fol": "", "prediction": ["all x.(Water(x) -> Substance(x))"]}
{"id": "entailmentbank_train_1188", "nl": "freezing means a substance changes from a liquid into a solid by decreasing heat energy.", "fol": "", "prediction": ["all x y.((Substance(x) & Liquid(y) & Solid(y)) -> ChangesByDecreasingHeatEnergy(x,y))"]}
{"id": "entailmentbank_train_1189", "nl": "water freezing means water changes from a liquid into a solid.", "fol": "", "prediction": ["all x.(WaterFreezing(x) -> WaterChangesFromLiquidToSolid(x))"]}
{"id": "entailmentbank_train_1190", "nl": "water is in the solid state, called ice.", "fol": "", "prediction": ["all x.(Water(x) -> SolidState(x))"]}
{"id": "entailmentbank_train_1191", "nl": "water freezing means water changes from a liquid to ice.", "fol": "", "prediction": ["all x.(WaterFreezing(x) -> ChangesLiquidToIce(x))"]}
{"id": "entailmentbank_train_1192", "nl": "ice wedging is when ice causes rocks to crack by expanding in openings.", "fol": "", "prediction": ["all x.(IceWedging(x) -> CausesRocksToCrackByExpandingInOpenings(x))"]}
{"id": "entailmentbank_train_1193", "nl": "the ice formed by water freezing causes rocks to crack by expanding in openings.", "fol": "", "prediction": ["all x y.((Ice(x) & WaterFreezing(y)) -> CausesRocksToCrack(x,y))"]}
{"id": "entailmentbank_train_1194", "nl": "cycles of freezing and thawing water will break down rocks from larger whole into smaller pieces.", "fol": "", "prediction": ["all x y.((Cycle(x) & Rock(y) & FreezingAndThawingWater(x)) -> BreaksDownFromLargerToSmallerPieces(x,y))"]}
{"id": "entailmentbank_train_1195", "nl": "cycles of freezing and thawing water cause the rocks to break into smaller pieces.", "fol": "", "prediction": ["all x y.((Cycle(x) & Rock(y) & FreezingAndThawingWater(x)) -> BreaksIntoSmallerPieces(y))"]}
{"id": "entailmentbank_train_1196", "nl": "oxidation of iron will change the iron to yellow, red, or orange color.", "fol": "", "prediction": ["all x.(OxidationOfIron(x) -> (ChangesColor(x,y) | ChangesColor(x,z) | ChangesColor(x,z)))"]}
{"id": "entailmentbank_train_1197", "nl": "rocks sometimes contain iron.", "fol": "", "prediction": ["exists x.(Rock(x) & ContainsIron(x))"]}
{"id": "entailmentbank_train_1198", "nl": "chemical weathering causes iron in rock to oxidize.", "fol": "", "prediction": ["all x y.((ChemicalWeathering(x) & IronInRock(y)) -> CausesOxidation(x,y))"]}
{"id": "entailmentbank_train_1199", "nl": "chemical weathering can cause iron in rock to oxidize and change the color of the rock to yellow, red, or orange.", "fol": "", "prediction": ["all x y.((ChemicalWeathering(x) & IronInRock(y)) -> (Oxidizes(y,x) & ChangesColor(y,x)))"]}
{"id": "entailmentbank_train_1200", "nl": "a plant's roots slowly break down rocks as the roots grow.", "fol": "", "prediction": ["all x y.((Plant(x) & Roots(y)) -> BreaksDownRocks(x,y))"]}
{"id": "entailmentbank_train_1201", "nl": "a plant's roots can cause weathering on rocks.", "fol": "", "prediction": ["all x.((Plant(x) & RootsCauseWeathering(x)) -> CanCauseWeatheringOnRocks(x))"]}
{"id": "entailmentbank_train_1202", "nl": "a plant is a kind of living thing.", "fol": "", "prediction": ["all x.(Plant(x) -> LivingThing(x))"]}
{"id": "entailmentbank_train_1203", "nl": "a plant's roots causing weathering is an example of a living thing causing weathering.", "fol": "", "prediction": ["all x.((Plant(x) & CausesWeathering(x)) -> LivingThing(x))"]}
{"id": "entailmentbank_train_1204", "nl": "mosses produces acid from their roots.", "fol": "", "prediction": ["all x.(Moss(x) -> ProducesAcidFromRoots(x))"]}
{"id": "entailmentbank_train_1205", "nl": "mosses can cause chemical weathering by producing acid from their roots.", "fol": "", "prediction": ["all x.(Moss(x) -> (ChemicalWeathering(x) & ProducesAcidFromRoots(x)))"]}
{"id": "entailmentbank_train_1206", "nl": "glaciers moving cause scratches in rocks.", "fol": "", "prediction": ["all x y.((Glacier(x) & Rock(y)) -> CausesCrashes(x,y))"]}
{"id": "entailmentbank_train_1207", "nl": "glacial movement often causes bedrock to appear polished.", "fol": "", "prediction": ["all x.(GlacialMovement(x) -> BedrockAppearsPolished(x))"]}
{"id": "entailmentbank_train_1208", "nl": "glacial movement often causes bedrock to appear polished and leaves scratches in rocks.", "fol": "", "prediction": ["all x y.((GlacialMovement(x) & Bedrock(y)) -> (CausesBedrockToAppearPolished(x,y) & LeavesScratchesInRocks(x,y)))"]}
{"id": "entailmentbank_train_1209", "nl": "an example of weathering is a plant root growing into a crack in rock.", "fol": "", "prediction": ["all x.(Weathering(x) -> (PlantRoot(x) & GrowsIntoCrackInRock(x)))"]}
{"id": "entailmentbank_train_1210", "nl": "a tree is a kind of plant.", "fol": "", "prediction": ["all x.(Tree(x) -> Plant(x))"]}
{"id": "entailmentbank_train_1211", "nl": "a tree's root growing into a crack in rock is an example of weathering.", "fol": "", "prediction": ["all x.((TreeRoot(x) & GrowingIntoCrackInRock(x)) -> Weathering(x))"]}
{"id": "entailmentbank_train_1212", "nl": "a tree is a kind of organism.", "fol": "", "prediction": ["all x.(Tree(x) -> Organism(x))"]}
{"id": "entailmentbank_train_1213", "nl": "a tree's root growing into a crack in rock is an example of organism causing the weathering.", "fol": "", "prediction": ["all x y.((Tree(x) & Root(y) & CrackInRock(y)) -> Weathering(x))"]}
{"id": "entailmentbank_train_1214", "nl": "organic weathering means organisms cause the weathering of rocks.", "fol": "", "prediction": ["all x y.((OrganicWeathering(x) & Rock(y)) -> CausesWeathering(x,y))"]}
{"id": "entailmentbank_train_1215", "nl": "a tree's root growing into a crack in rock is an example of organic weathering.", "fol": "", "prediction": ["all x.((TreeRoot(x) & GrowingIntoCrackInRock(x)) -> OrganicWeathering(x))"]}
{"id": "entailmentbank_train_1216", "nl": "chemical weathering means chemical reaction causes the weathering of rocks.", "fol": "", "prediction": ["all x.(ChemicalWeathering(x) -> CausesWeatheringOfRocks(x))"]}
{"id": "entailmentbank_train_1217", "nl": "warm and moist can accelerate chemical reactions.", "fol": "", "prediction": ["all x.((Warm(x) & Moist(x)) -> AcceleratesChemicalReactions(x))"]}
{"id": "entailmentbank_train_1218", "nl": "warm and moist environment can accelerate the rate of chemical weathering on rocks.", "fol": "", "prediction": ["all x.((WarmAndMoistEnvironment(x) & Rock(y)) -> AcceleratesChemicalWeathering(x,y))"]}
{"id": "entailmentbank_train_1219", "nl": "a boulder is a kind of large rock.", "fol": "", "prediction": ["all x.(Blood(x) -> LargeRock(x))"]}
{"id": "entailmentbank_train_1220", "nl": "a tree's root growing in a crack in a boulder is an example of weathering.", "fol": "", "prediction": ["all x y.((Tree(x) & Root(y) & CrackInBlaster(y)) -> Weathering(x))"]}
{"id": "entailmentbank_train_1221", "nl": "a change in soil chemistry is a kind of chemical weathering.", "fol": "", "prediction": ["all x.(ChangeInSoilChemistry(x) -> ChemicalWeathering(x))"]}
{"id": "entailmentbank_train_1222", "nl": "acid produced by some trees can change the soil chemistry.", "fol": "", "prediction": ["all x.((Acid(x) & ProducedByTrees(x)) -> ChangesSoilChemistry(x))"]}
{"id": "entailmentbank_train_1223", "nl": "some trees producing acid is an example of chemical weathering.", "fol": "", "prediction": ["exists x.(Tree(x) & ProducesAcid(x))"]}
{"id": "entailmentbank_train_1224", "nl": "soil is formed by rocks weathering.", "fol": "", "prediction": ["all x.(Soil(x) -> FormedByRocksWeathering(x))"]}
{"id": "entailmentbank_train_1225", "nl": "acid can form soil by weathering rocks.", "fol": "", "prediction": ["all x.(Acid(x) -> FormsSoilByWeatheringRocks(x))"]}
{"id": "entailmentbank_train_1226", "nl": "plants can produce acid.", "fol": "", "prediction": ["all x.(Plant(x) -> CanProduceAcid(x))"]}
{"id": "entailmentbank_train_1227", "nl": "plants can form soil by producing acid to weather rocks.", "fol": "", "prediction": ["all x.(Plant(x) -> (FormSoil(x) & ProducesAcidToWeatherRocks(x)))"]}
{"id": "entailmentbank_train_1228", "nl": "acid weathering rocks is a kind of chemical weathering.", "fol": "", "prediction": ["all x.((AcidWeatheringRocks(x) & ChemicalWeathering(x)) -> Weathering(x))"]}
{"id": "entailmentbank_train_1229", "nl": "lichens producing acid to break down rocks is an example of chemical weathering.", "fol": "", "prediction": ["all x.((Lichen(x) & ProducesAcid(x) & BreaksDownRocks(x)) -> ChemicalWeathering(x))"]}
{"id": "entailmentbank_train_1230", "nl": "a drought occurs over a period of months / years.", "fol": "", "prediction": ["all x.(Drought(x) -> OccursOverMonthsYears(x))"]}
{"id": "entailmentbank_train_1231", "nl": "a drought is a kind of slow environmental change.", "fol": "", "prediction": ["all x.(Drought(x) -> SlowEnvironmentalChange(x))"]}
{"id": "entailmentbank_train_1232", "nl": "a drought is an environmental change that occurs over a period of months or years.", "fol": "", "prediction": ["all x.(Drought(x) -> (EnvironmentalChange(x) & OccursOverMonthsOrYears(x)))"]}
{"id": "entailmentbank_train_1233", "nl": "a tornado has high wind speeds.", "fol": "", "prediction": ["all x.(Tornado(x) -> HighWindSpeed(x))"]}
{"id": "entailmentbank_train_1234", "nl": "a hurricane has high wind speeds.", "fol": "", "prediction": ["all x.(Hurricane(x) -> HighWindSpeed(x))"]}
{"id": "entailmentbank_train_1235", "nl": "high winds are winds with high wind speed.", "fol": "", "prediction": ["all x.(HighWind(x) -> HighWindSpeed(x))"]}
{"id": "entailmentbank_train_1236", "nl": "both hurricanes and tornadoes have high winds.", "fol": "", "prediction": ["all x.(Hurricane(x) & Tornado(x)) -> HighWinds(x))"]}
{"id": "entailmentbank_train_1237", "nl": "low means low in elevation / height / altitude.", "fol": "", "prediction": ["all x.(Low(x) -> (LowElevation(x) & LowHeight(x) & LowAltitude(x)))"]}
{"id": "entailmentbank_train_1238", "nl": "area means a place.", "fol": "", "prediction": ["all x.(Area(x) -> MeansPlace(x))"]}
{"id": "entailmentbank_train_1239", "nl": "low areas means places with low elevation.", "fol": "", "prediction": ["all x.(LowArea(x) -> LowElevation(x))"]}
{"id": "entailmentbank_train_1240", "nl": "as elevation of a place decreases, how much a flood will affect that place will increases.", "fol": "", "prediction": ["all x y.((Flood(x) & Place(y) & ElevationDecreases(x,y)) -> Affects(x,y))"]}
{"id": "entailmentbank_train_1241", "nl": "a flood will affect low areas more than higher areas.", "fol": "", "prediction": ["all x y.((Flood(x) & LowArea(y)) -> AffectsMore(x,y))"]}
{"id": "entailmentbank_train_1242", "nl": "drought is when available water decreases in an environment.", "fol": "", "prediction": ["all x.(Drought(x) -> (DecreasesWater(x) & Environment(x)))"]}
{"id": "entailmentbank_train_1243", "nl": "plants require water to survive.", "fol": "", "prediction": ["all x.(Plant(x) -> RequiresWaterToSurvive(x))"]}
{"id": "entailmentbank_train_1244", "nl": "drought will decrease the water plants need to survive.", "fol": "", "prediction": ["all x.(Drought(x) -> DecreasesWaterPlants(x))"]}
{"id": "entailmentbank_train_1245", "nl": "plants drying out means plants do not have enough water to survive.", "fol": "", "prediction": ["all x.((Plant(x) & DryingOut(x)) -> -HasEnoughWaterToSurvive(x))"]}
{"id": "entailmentbank_train_1246", "nl": "drought can cause plants to dry out.", "fol": "", "prediction": ["all x.(Drought(x) -> CausesPlantsToDryOut(x))"]}
{"id": "entailmentbank_train_1247", "nl": "drought may cause wildfires.", "fol": "", "prediction": ["all x.(Drought(x) -> MayCauseWildfires(x))"]}
{"id": "entailmentbank_train_1248", "nl": "drought can cause plants to dry out and cause wildfires.", "fol": "", "prediction": ["all x.(Drought(x) -> (CausesPlantsToDryOut(x) & CausesWildfires(x)))"]}
{"id": "entailmentbank_train_1249", "nl": "a hurricane has large amount of rain.", "fol": "", "prediction": ["all x.(Hurricane(x) -> LargeAmountOfRain(x))"]}
{"id": "entailmentbank_train_1250", "nl": "a hurricane has high wind speed.", "fol": "", "prediction": ["all x.(Hurricane(x) -> HighWindSpeed(x))"]}
{"id": "entailmentbank_train_1251", "nl": "a hurricane has high wind speed and large amount of rain.", "fol": "", "prediction": ["all x.(Hurricane(x) -> (HighWindSpeed(x) & LargeAmountOfRain(x)))"]}
{"id": "entailmentbank_train_1252", "nl": "wind causes erosion.", "fol": "", "prediction": ["all x.(Wind(x) -> CausesErosion(x))"]}
{"id": "entailmentbank_train_1253", "nl": "rain causes erosion.", "fol": "", "prediction": ["all x.(Rain(x) -> CausesErosion(x))"]}
{"id": "entailmentbank_train_1254", "nl": "wind and rain / storms cause erosion.", "fol": "", "prediction": ["all x.((Wind(x) | Rain(x) | Storm(x)) -> CausesErosion(x))"]}
{"id": "entailmentbank_train_1255", "nl": "a hurricane can cause erosion.", "fol": "", "prediction": ["all x.(Hurricane(x) -> CanCauseErosion(x))"]}
{"id": "entailmentbank_train_1256", "nl": "moisture and warm temperature is the source of energy in hurricanes.", "fol": "", "prediction": ["all x.(Hurricane(x) -> (SourceOfEnergy(x,Moisture) & SourceOfEnergy(x,WarmTemperature)))"]}
{"id": "entailmentbank_train_1257", "nl": "the temperautre on lands is usually colder and less humid in mositure.", "fol": "", "prediction": ["all x.(Temperature(x) -> (OnLands(x) & Colder(x) & LessHumid(x)))"]}
{"id": "entailmentbank_train_1258", "nl": "when a hurricane moves over land, that hurricane will decrease in strength.", "fol": "", "prediction": ["all x y.((Hurricane(x) & MovesOverLand(x)) -> DecreasesStrength(y))"]}
{"id": "entailmentbank_train_1259", "nl": "a continent is a kind of large land mass.", "fol": "", "prediction": ["all x.(Continent(x) -> LargeLandMass(x))"]}
{"id": "entailmentbank_train_1260", "nl": "when a hurricane moves over a continent, that hurricane will decrease in strength.", "fol": "", "prediction": ["all x y.((Hurricane(x) & MovesOverContinent(x,y)) -> DecreasesStrength(x,y))"]}
{"id": "entailmentbank_train_1261", "nl": "smoke from volcanic eruptions can disrupt sunlight from reaching earth's surface.", "fol": "", "prediction": ["all x y.((Smoke(x) & VolcanicEruption(y)) -> DisruptsSunlight(x,y))"]}
{"id": "entailmentbank_train_1262", "nl": "disrupting something from reaching something else decreases the availability of that something.", "fol": "", "prediction": ["all x y.((Disrupting(x) & Something(y) & Reaching(x,y)) -> DecreasesAvailability(x,y))"]}
{"id": "entailmentbank_train_1263", "nl": "smoke from volcanic eruptions can decrease the availability of sunlight.", "fol": "", "prediction": ["all x.((Smoke(x) & VolcanicEruption(x)) -> DecreasesSunlightAvailability(x))"]}
{"id": "entailmentbank_train_1264", "nl": "as the availability of sunlight decreases, the ability of producers to produce food decrease.", "fol": "", "prediction": ["all x y.((Producer(x) & Sunlight(y) & DecreasesAvailability(x,y)) -> DecreasesProduction(x,y))"]}
{"id": "entailmentbank_train_1265", "nl": "smoke from volcanic eruptions can decrease the food produced by the producers.", "fol": "", "prediction": ["all x y.((Smoke(x) & VolcanicEruption(y)) -> DecreasesFoodProducedByProducers(x,y))"]}
{"id": "entailmentbank_train_1266", "nl": "food is a kind of resource.", "fol": "", "prediction": ["all x.(Food(x) -> Resource(x))"]}
{"id": "entailmentbank_train_1267", "nl": "smoke from vocanic eruptions can decrease food resource in an area.", "fol": "", "prediction": ["all x.((Smoke(x) & VocanicEruption(x)) -> DecreasesFoodResource(x))"]}
{"id": "entailmentbank_train_1268", "nl": "heat and moisture over ocean cause the formation of a hurricane.", "fol": "", "prediction": ["all x y.((Horizon(x) & Heat(y) & Moisture(y)) -> CausesFormationOf(x,y))"]}
{"id": "entailmentbank_train_1269", "nl": "air is above the ocean.", "fol": "", "prediction": ["all x.(Air(x) -> AboveOcean(x))"]}
{"id": "entailmentbank_train_1270", "nl": "air with heat and moisture above ocean can cause the formation of a hurricane.", "fol": "", "prediction": ["all x.((Air(x) & Heat(x) & Moisture(x)) -> CausesHurricaneFormation(x))"]}
{"id": "entailmentbank_train_1271", "nl": "warm means medium heat energy / temperature.", "fol": "", "prediction": ["all x.(Warm(x) -> (MediumHeatEnergy(x) & MediumHeatTemperature(x)))"]}
{"id": "entailmentbank_train_1272", "nl": "warm and moisture air above ocean can cause the formation of a hurricane.", "fol": "", "prediction": ["all x.((WarmAndMoistureAir(x) & AboveOcean(x)) -> CanCauseFormationOfHurricane(x))"]}
{"id": "entailmentbank_train_1273", "nl": "a living thing requires food for survival.", "fol": "", "prediction": ["all x.(LivingThing(x) -> RequiresFoodForSurvival(x))"]}
{"id": "entailmentbank_train_1274", "nl": "flooding decreases the availability of food.", "fol": "", "prediction": ["all x.(Flooding(x) -> DecreasesFoodAvailability(x))"]}
{"id": "entailmentbank_train_1275", "nl": "flooding can decrease the availability of food required by living things for survival.", "fol": "", "prediction": ["all x y.((Flooding(x) & LivingThing(y)) -> DecreasesFoodAvailability(x,y))"]}
{"id": "entailmentbank_train_1276", "nl": "a parrot is a kind of living thing.", "fol": "", "prediction": ["all x.(Parrot(x) -> LivingThing(x))"]}
{"id": "entailmentbank_train_1277", "nl": "flooding can decrease the availability of food required by parrots for survival.", "fol": "", "prediction": ["all x y.((Flooding(x) & Parrot(y)) -> DecreasesFoodAvailability(x,y))"]}
{"id": "entailmentbank_train_1278", "nl": "the decrease of something required by an organism has a negative impact on that organism's survival.", "fol": "", "prediction": ["all x y.((Decrease(x) & Organism(y) & Requires(x,y)) -> NegativeImpactOnSurvival(x,y))"]}
{"id": "entailmentbank_train_1279", "nl": "flooding decreasing food availability has a negative impact on parrots survival.", "fol": "", "prediction": ["all x.(Flooding(x) -> (DecreasedFoodAvailability(x) & NegativeImpactOnParrotSurvival(x)))"]}
{"id": "entailmentbank_train_1280", "nl": "humidity is a property of weather and include ordered values of dry / humid.", "fol": "", "prediction": ["all x.(Humidity(x) -> (PropertyOfWeather(x) & IncludesOrderedValuesOfDryHumid(x)))"]}
{"id": "entailmentbank_train_1281", "nl": "a weather report describes weather.", "fol": "", "prediction": ["all x.(WeatherReport(x) -> DefinesWeather(x))"]}
{"id": "entailmentbank_train_1282", "nl": "a weather report will describe the humidity of weather.", "fol": "", "prediction": ["all x.(WeatherReport(x) -> DefinesHumidityOfWeather(x))"]}
{"id": "entailmentbank_train_1283", "nl": "humidity is the amount of moisture in the air.", "fol": "", "prediction": ["all x.(Humidity(x) -> MoistureInAir(x))"]}
{"id": "entailmentbank_train_1284", "nl": "the weather report will decribe the amount of moisture in the air.", "fol": "", "prediction": ["all x.(WeatherReport(x) -> DecribesMoistureInAir(x))"]}
{"id": "entailmentbank_train_1285", "nl": "boston is a city that is near to the coast of the atlantic ocean.", "fol": "", "prediction": ["all x.(Boston(x) -> NearToCoastOfAtlanticOcean(x))"]}
{"id": "entailmentbank_train_1286", "nl": "the air mass in boston will be humid in moisture.", "fol": "", "prediction": ["all x.((AirMass(x) & InBoston(x)) -> HumidInMoisture(x))"]}
{"id": "entailmentbank_train_1287", "nl": "the equator receives the most amount of direct sunlight throughout the year.", "fol": "", "prediction": ["all x.(Equator(x) -> ReceivesMostDirectSunlight(x))"]}
{"id": "entailmentbank_train_1288", "nl": "the poles receives the least amount of direct sunlight throughout the year.", "fol": "", "prediction": ["all x.(Pole(x) -> ReceivesLeastDirectSunlight(x))"]}
{"id": "entailmentbank_train_1289", "nl": "the equator receives more direct sunlight than the poles on earth.", "fol": "", "prediction": ["all x y.((Equator(x) & Pole(y)) -> ReceivesMoreDirectSunlight(x,y))"]}
{"id": "entailmentbank_train_1290", "nl": "there is ocean found at the equator and the poles area.", "fol": "", "prediction": ["exists x.(Ocean(x) & FoundAtEquatorAndPolesArea(x))"]}
{"id": "entailmentbank_train_1291", "nl": "the ocean at the equator will receive more direct sunlight than the ocean at the poles.", "fol": "", "prediction": ["all x y.((Ocean(x) & Ocean(y) & AtEquator(x) & AtPoles(y)) -> ReceivesMoreDirectSunlight(x,y))"]}
{"id": "entailmentbank_train_1292", "nl": "if something receives sunlight, it will absorb the sunlight.", "fol": "", "prediction": ["all x.((ReceivesSunlight(x) & AbsorbsSunlight(x)) -> ReceivesSunlight(x))"]}
{"id": "entailmentbank_train_1293", "nl": "the ocean at the equator will abosrb more direct sunlight than the ocean at the poles.", "fol": "", "prediction": ["all x y.((Ocean(x) & Ocean(y) & AtEquator(x) & AtPoles(y)) -> AbosrbsDirectSunlight(x,y))"]}
{"id": "entailmentbank_train_1294", "nl": "the equator will abosrb more direct sunlight than the poles on earth.", "fol": "", "prediction": ["all x y.((Equator(x) & Pole(y)) -> (AbosrbsDirectSunlight(x,y) & MorePolar(x,y)))"]}
{"id": "entailmentbank_train_1295", "nl": "if an object / a substance / a location absorbs solar energy then that object / that substance will increase in temperature.", "fol": "", "prediction": ["all x y.((Object(x) & Substance(y) & Location(x) & AbsorbsSolarEnergy(x,y)) -> IncreasesTemperature(x,y))"]}
{"id": "entailmentbank_train_1296", "nl": "the equator will have higher temperature than the poles on earth.", "fol": "", "prediction": ["all x y.((Equator(x) & Pole(y)) -> HigherTemperature(x,y))"]}
{"id": "entailmentbank_train_1297", "nl": "lack of moisture in the air causes low amounts of rainfall.", "fol": "", "prediction": ["all x.(LackOfMoistureInAir(x) -> LowRainfall(x))"]}
{"id": "entailmentbank_train_1298", "nl": "the climate is low in humidity in nevada.", "fol": "", "prediction": ["all x.(Nevada(x) -> LowHumidity(x))"]}
{"id": "entailmentbank_train_1299", "nl": "the low humidity in nevada causes the low amounts of rainfall.", "fol": "", "prediction": ["all x.((LowHumidity(x) & Nevada(x)) -> LowRainfall(x))"]}
{"id": "entailmentbank_train_1300", "nl": "rainy is a kind of weather.", "fol": "", "prediction": ["all x.(Rainy(x) -> Weather(x))"]}
{"id": "entailmentbank_train_1301", "nl": "cold is a kind of weather.", "fol": "", "prediction": ["all x.(Cold(x) -> Weather(x))"]}
{"id": "entailmentbank_train_1302", "nl": "cloudy is a kind of weather.", "fol": "", "prediction": ["all x.(Cloudy(x) -> Weather(x))"]}
{"id": "entailmentbank_train_1303", "nl": "windy is a kind of weather.", "fol": "", "prediction": ["all x.(Windy(x) -> Weather(x))"]}
{"id": "entailmentbank_train_1304", "nl": "windy, cloudy, rainy, and cold are all kinds of weather.", "fol": "", "prediction": ["all x.((Weather(x) & (Windy(x) | Cloudy(x) | Rainy(x) | Cold(x))) -> Weather(x))"]}
{"id": "entailmentbank_train_1305", "nl": "air pressure is a property of air.", "fol": "", "prediction": ["all x.(AirPressure(x) -> PropertyOfAir(x))"]}
{"id": "entailmentbank_train_1306", "nl": "a barometer is used to measure air pressure.", "fol": "", "prediction": ["all x.(Barometer(x) -> MeasuresAirPressure(x))"]}
{"id": "entailmentbank_train_1307", "nl": "a barometer is used to meausre the air pressure property.", "fol": "", "prediction": ["all x.(Barometer(x) -> UsedToMeausreAirPressure(x))"]}
{"id": "entailmentbank_train_1308", "nl": "a large cold front is moving past the school.", "fol": "", "prediction": ["all x y.((LargeColdFront(x) & School(y)) -> MovingPast(x,y))"]}
{"id": "entailmentbank_train_1309", "nl": "the large cold front passing the school will cause thunderstorms.", "fol": "", "prediction": ["all x.((LargeColdFront(x) & PassingSchool(x)) -> CausesThunderstorms(x))"]}
{"id": "entailmentbank_train_1310", "nl": "the weather at school is hot and humid.", "fol": "", "prediction": ["all x.((SchoolWeather(x) & Hot(x) & Humid(x)) -> Hot(x))"]}
{"id": "entailmentbank_train_1311", "nl": "the weather will change from hot and humid to having thunderstorms at the school.", "fol": "", "prediction": ["all x y.((Weather(x) & School(y)) -> (HotAndHumid(x) & Thunderstorms(y)))"]}
{"id": "entailmentbank_train_1312", "nl": "a cycle is a kind of process.", "fol": "", "prediction": ["all x.(Cycle(x) -> Process(x))"]}
{"id": "entailmentbank_train_1313", "nl": "investigating a process requires investigating every stage of the process.", "fol": "", "prediction": ["all x y.((Process(x) & Process(y)) -> RequiresInvestigation(x,y))"]}
{"id": "entailmentbank_train_1314", "nl": "scientists want to investigate the water cycle.", "fol": "", "prediction": ["all x y.((Scientist(x) & WaterCycle(y)) -> WantsToInvestigate(x,y))"]}
{"id": "entailmentbank_train_1315", "nl": "scientists have to investigate every stage of the water cycle.", "fol": "", "prediction": ["all x y.((Scientist(x) & WaterCycle(y)) -> Investigates(x,y))"]}
{"id": "entailmentbank_train_1316", "nl": "precipitation is a stage in the water cycle process.", "fol": "", "prediction": ["all x.(Precipitation(x) -> WaterCycleProcess(x))"]}
{"id": "entailmentbank_train_1317", "nl": "scientists have to investigate precipitation in the water cycle.", "fol": "", "prediction": ["all x y.((Scientist(x) & WaterCycle(y)) -> InvestigatesPrecipitation(x,y))"]}
{"id": "entailmentbank_train_1318", "nl": "investigating something requires investigating the properties of something.", "fol": "", "prediction": ["all x y.((Investigating(x) & Something(y)) -> RequiresInvestigatingProperties(x,y))"]}
{"id": "entailmentbank_train_1319", "nl": "scientists have to investigate the properties of percipitation.", "fol": "", "prediction": ["all x y.((Scientist(x) & Percipitation(y)) -> InvestigatesProperties(x,y))"]}
{"id": "entailmentbank_train_1320", "nl": "investigating sometimes requires measuring.", "fol": "", "prediction": ["all x.(Investigating(x) -> SometimesRequiresMeasuring(x))"]}
{"id": "entailmentbank_train_1321", "nl": "the amount of precipitation is a property of precipitation.", "fol": "", "prediction": ["all x.((AmountOfPrecipitation(x) & PropertyOfPrecipitation(x)) -> Precipitation(x))"]}
{"id": "entailmentbank_train_1322", "nl": "scientists have to meausre the amount of precipitation.", "fol": "", "prediction": ["all x.(Scientist(x) -> MeausresPrecipitation(x))"]}
{"id": "entailmentbank_train_1323", "nl": "an anemometer is used to measure wind speed.", "fol": "", "prediction": ["all x.(Anemometer(x) -> MeasuresWindSpeed(x))"]}
{"id": "entailmentbank_train_1324", "nl": "an anemometer is a kind of instrument.", "fol": "", "prediction": ["all x.(Anemometer(x) -> Instrument(x))"]}
{"id": "entailmentbank_train_1325", "nl": "an anemometer is an instrument used to measure wind speed.", "fol": "", "prediction": ["all x.(Anemometer(x) -> MeasuresWindSpeed(x))"]}
{"id": "entailmentbank_train_1326", "nl": "high pressure systems cause clear weather.", "fol": "", "prediction": ["all x.(HighPressureSystem(x) -> CausesClearWeather(x))"]}
{"id": "entailmentbank_train_1327", "nl": "clear weather means sunny / not cloudy / not rainy weather.", "fol": "", "prediction": ["all x.(ClearWeather(x) -> (Sunny(x) & -Cloudy(x) & -Rainy(x)))"]}
{"id": "entailmentbank_train_1328", "nl": "high pressure systems can cause sunny weather.", "fol": "", "prediction": ["all x.(HighPressureSystem(x) -> CanCauseSunnyWeather(x))"]}
{"id": "entailmentbank_train_1329", "nl": "a weather map is a map showing the weather for an area.", "fol": "", "prediction": ["all x.(WeatherMap(x) -> ShowsWeather(x))"]}
{"id": "entailmentbank_train_1330", "nl": "hurricane is a kind of severe weather.", "fol": "", "prediction": ["all x.(Hurricane(x) -> SevereWeather(x))"]}
{"id": "entailmentbank_train_1331", "nl": "a hurricane will be shown on a weather map.", "fol": "", "prediction": ["all x.(Hurricane(x) -> ShownOnWeatherMap(x))"]}
{"id": "entailmentbank_train_1332", "nl": "transpiration is a stage in the water cycle process.", "fol": "", "prediction": ["all x.(StageInWaterCycleProcess(x) -> transpiration(x))"]}
{"id": "entailmentbank_train_1333", "nl": "transpiration is when water vapor moves from plants into the atmosphere.", "fol": "", "prediction": ["all x y.((WaterVapor(x) & Plant(y)) -> MovesIntoAtmosphere(x,y))"]}
{"id": "entailmentbank_train_1334", "nl": "transpiration of plants is a stage in the water cycle process by moving water vapor from plants to atmosphere.", "fol": "", "prediction": ["all x.((Plant(x) & WaterCycleProcess(x) & MovesWaterVapor(x)) -> transpiration(x))"]}
{"id": "entailmentbank_train_1335", "nl": "water condensing means water changes from a gas to a liquid by decreasing heat energy.", "fol": "", "prediction": ["all x.(WaterCondensing(x) -> (WaterChangesFromGasToLiquid(x) & DecreasesHeatEnergy(x)))"]}
{"id": "entailmentbank_train_1336", "nl": "water is in the liquid state, called liquid water.", "fol": "", "prediction": ["all x.(Water(x) -> LiquidState(x))"]}
{"id": "entailmentbank_train_1337", "nl": "water is in the gas state, called water vapor.", "fol": "", "prediction": ["all x.(Water(x) -> GasState(x))"]}
{"id": "entailmentbank_train_1338", "nl": "water condensing means water changes from water vapor to liquid water by decreasing heat energy.", "fol": "", "prediction": ["all x.(WaterCondensing(x) -> (WaterVapor(x) & WaterVapor(x) & WaterVapor(x) & WaterVapor(x) & WaterVapor(x) & HeatEnergy(x)))"]}
{"id": "entailmentbank_train_1339", "nl": "cooling means temperature decreases.", "fol": "", "prediction": ["all x.(Cooling(x) -> TemperatureDecreases(x))"]}
{"id": "entailmentbank_train_1340", "nl": "cooling means decreasing in heat energy.", "fol": "", "prediction": ["all x.(Cooling(x) -> DecreasesHeatEnergy(x))"]}
{"id": "entailmentbank_train_1341", "nl": "water vapor is rapidly cooled.", "fol": "", "prediction": ["all x.(WaterVapor(x) -> RapidlyCooled(x))"]}
{"id": "entailmentbank_train_1342", "nl": "water vapor cooling causes that water vapor to condense into liquid water.", "fol": "", "prediction": ["all x.(WaterVaporCooling(x) -> CausesWaterVaporCondensation(x))"]}
{"id": "entailmentbank_train_1343", "nl": "colder means lower in temperature.", "fol": "", "prediction": ["all x.(Colder(x) -> LowerTemperature(x))"]}
{"id": "entailmentbank_train_1344", "nl": "lower is similar to decreasing.", "fol": "", "prediction": ["all x.(Lower(x) -> SimilarToDecreasing(x))"]}
{"id": "entailmentbank_train_1345", "nl": "colder means a decrease in heat energy.", "fol": "", "prediction": ["all x.(Colder(x) -> DecreaseInHeatEnergy(x))"]}
{"id": "entailmentbank_train_1346", "nl": "air is rising to a colder region.", "fol": "", "prediction": ["all x.((Air(x) & ColderRegion(x)) -> RisingTo(x,y))"]}
{"id": "entailmentbank_train_1347", "nl": "the heat energy of the air will decrease when air is rising to a colder region.", "fol": "", "prediction": ["all x y.((Air(x) & ColderRegion(y)) -> HeatEnergyDecrease(x,y))"]}
{"id": "entailmentbank_train_1348", "nl": "atmosphere means air.", "fol": "", "prediction": ["all x.(Atmosphere(x) -> MeansAir(x))"]}
{"id": "entailmentbank_train_1349", "nl": "water vapor is found in the atmosphere.", "fol": "", "prediction": ["all x.(WaterVapor(x) -> FoundInAtmosphere(x))"]}
{"id": "entailmentbank_train_1350", "nl": "air contains water vapor.", "fol": "", "prediction": ["all x.(Air(x) -> ContainsWaterVapor(x))"]}
{"id": "entailmentbank_train_1351", "nl": "the water vapor in air will decrease in heat energy when air is rising to a colder region.", "fol": "", "prediction": ["all x y.((WaterVapor(x) & Air(y) & RisesToColderRegion(x,y)) -> DecreasesHeatEnergy(x,y))"]}
{"id": "entailmentbank_train_1352", "nl": "water condensing is when water changing from a gas into a liquid by decreasing heat energy.", "fol": "", "prediction": ["all x.(WaterCondensing(x) -> (WaterChangesFromGasToLiquid(x) & DecreasesHeatEnergy(x)))"]}
{"id": "entailmentbank_train_1353", "nl": "water condensing is when water changing from water vapor into liquid water by decreasing heat energy.", "fol": "", "prediction": ["all x.(WaterCondensing(x) -> (WaterChangesFromWaterVaporToLiquidWater(x) & DecreasesHeatEnergy(x)))"]}
{"id": "entailmentbank_train_1354", "nl": "air rising into a colder region will cause the water vapor in air to condense.", "fol": "", "prediction": ["all x y.((Air(x) & ColderRegion(y) & RisingInto(x,y)) -> WaterVaporCondense(x))"]}
{"id": "entailmentbank_train_1355", "nl": "clouds are formed by water vapor rising into colder regions of the atmosphere and condensing into rain droplets.", "fol": "", "prediction": ["all x.(Cloud(x) -> (WaterVapor(x) & RisesIntoColderRegions(x) & CondensesIntoRainDroplets(x)))"]}
{"id": "entailmentbank_train_1356", "nl": "air rising into a colder region will cause the water vapor to condense into rain droplets.", "fol": "", "prediction": ["all x y.((Air(x) & ColderRegion(y) & RisingInto(x,y)) -> WaterVaporCondensation(x))"]}
{"id": "entailmentbank_train_1357", "nl": "in the water cycle, evaporation always follows collection in bodies of water.", "fol": "", "prediction": ["all x y.((WaterCycle(x) & BodyOfWater(y)) -> EvaporationSuesCollection(x,y))"]}
{"id": "entailmentbank_train_1358", "nl": "evaporation is when water is drawn back up into the air in the water cycle.", "fol": "", "prediction": ["all x.(Evaporation(x) -> WaterDrawnBackIntoAir(x))"]}
{"id": "entailmentbank_train_1359", "nl": "bodies of water are located on the surface of the earth.", "fol": "", "prediction": ["all x.(BodyOfWater(x) -> LocatedOnEarthSurface(x))"]}
{"id": "entailmentbank_train_1360", "nl": "evaporation will transfer the water in bodies of water on the surface of earth back into the air.", "fol": "", "prediction": ["all x y.((Evaporation(x) & BodyOfWater(y) & EarthSurface(y)) -> TransfersWaterIntoAir(x,y))"]}
{"id": "entailmentbank_train_1361", "nl": "clouds are made of water vapor.", "fol": "", "prediction": ["all x.(Cloud(x) -> MadeOfWaterVapor(x))"]}
{"id": "entailmentbank_train_1362", "nl": "transpiration transfers the water vapor making up clouds from plants into atmosphere.", "fol": "", "prediction": ["all x y z.((Transpiration(x) & WaterVapor(y) & Cloud(z)) -> TransfersToAtmosphere(x,y,z))"]}
{"id": "entailmentbank_train_1363", "nl": "transpiration is a stage in the water cycle that transfers the water vapor making up clouds from plants into atmosphere.", "fol": "", "prediction": ["all x y.((WaterCycle(x) & WaterVapor(y)) -> TransfersWaterVapor(x,y))"]}
{"id": "entailmentbank_train_1364", "nl": "in the water cycle, runoff can follow precipitation.", "fol": "", "prediction": ["all x.(WaterCycle(x) -> RunoffCanFollowPrecipitation(x))"]}
{"id": "entailmentbank_train_1365", "nl": "in the water cycle, collection in bodies of water can follow runoff.", "fol": "", "prediction": ["all x y.((WaterCycle(x) & BodyOfWater(y)) -> FollowsRunoff(x,y))"]}
{"id": "entailmentbank_train_1366", "nl": "collection in bodies of water happens after precipitation and runoff.", "fol": "", "prediction": ["all x.(CollectionInBodyOfWater(x) -> (Precipitation(x) & Runoff(x)))"]}
{"id": "entailmentbank_train_1367", "nl": "collection in water cycle is when precipitation is collected in bodies of water.", "fol": "", "prediction": ["all x.(CollectionInWaterCycle(x) -> PrecipitationCollectedInWaterBodys(x))"]}
{"id": "entailmentbank_train_1368", "nl": "precipitation will be collected in bodies of water after precipitation and runoff.", "fol": "", "prediction": ["all x y.((Precipitation(x) & BodyOfWater(y)) -> (CollectsAfterPrecipitation(x,y) & Runoff(x,y)))"]}
{"id": "entailmentbank_train_1369", "nl": "lakes are formed by precipitation and runoff.", "fol": "", "prediction": ["all x.(Lake(x) -> (FormedByPrecipitation(x) & FormedByRunoff(x)))"]}
{"id": "entailmentbank_train_1370", "nl": "a storm is a source of heavy rain.", "fol": "", "prediction": ["all x.(Storm(x) -> SourceOfHeavyRain(x))"]}
{"id": "entailmentbank_train_1371", "nl": "a thunderstorm is a source of heavy rain.", "fol": "", "prediction": ["all x.(Thunderstorm(x) -> SourceOfHeavyRain(x))"]}
{"id": "entailmentbank_train_1372", "nl": "rain causes bodies of water to increase amount of water they contain.", "fol": "", "prediction": ["all x y.((Rain(x) & BodyOfWater(y)) -> IncreasesWaterContent(y,x))"]}
{"id": "entailmentbank_train_1373", "nl": "a thunderstorm can cause bodies of water to increase amount of water they contain.", "fol": "", "prediction": ["all x.(Thunderstorm(x) -> CausesIncreasedWater(x))"]}
{"id": "entailmentbank_train_1374", "nl": "when a body of water receives more water than it can hold, a flood occurs.", "fol": "", "prediction": ["all x.((BodyOfWater(x) & ReceivesMoreWater(x) & CanHoldMoreWater(x)) -> FloodOccurs(x))"]}
{"id": "entailmentbank_train_1375", "nl": "a thunderstorm can cause bodies of water to flood.", "fol": "", "prediction": ["all x.(Thunderstorm(x) -> CausesBodyOfWaterToFlood(x))"]}
{"id": "entailmentbank_train_1376", "nl": "a thunderstorm can cause a stream to flood.", "fol": "", "prediction": ["all x y.((Thunderstorm(x) & Stream(y)) -> CanFlood(x,y))"]}
{"id": "entailmentbank_train_1377", "nl": "sleet is a kind of precipitation.", "fol": "", "prediction": ["all x.(Sleet(x) -> Precipitation(x))"]}
{"id": "entailmentbank_train_1378", "nl": "hail is a kind of precipitation.", "fol": "", "prediction": ["all x.(Hail(x) -> Precipitation(x))"]}
{"id": "entailmentbank_train_1379", "nl": "hail, snow, sleet, and rain are different kinds of precipitation.", "fol": "", "prediction": ["all x.((Hail(x) | Snow(x) | Sleet(x) | Rain(x)) -> Precipitation(x))"]}
{"id": "entailmentbank_train_1380", "nl": "water vapor condensing in clouds causes rain.", "fol": "", "prediction": ["all x y.((WaterVaporCondensing(x) & Cloud(y)) -> CausesRain(x,y))"]}
{"id": "entailmentbank_train_1381", "nl": "water vapor has to condense in clouds before clouds producing precipitation.", "fol": "", "prediction": ["all x y.((WaterVapor(x) & Cloud(y)) -> CondensesIn(x,y))"]}
{"id": "entailmentbank_train_1382", "nl": "when water falls from the sky, that water usually returns to the soil.", "fol": "", "prediction": ["all x y.((Water(x) & FallsFromSky(x)) -> ReturnsToSoil(y))"]}
{"id": "entailmentbank_train_1383", "nl": "precipitation is when water falls from the sky.", "fol": "", "prediction": ["all x.(Precipitation(x) -> WaterFallsFromSky(x))"]}
{"id": "entailmentbank_train_1384", "nl": "when precipitation happens, water usually returns to the soil.", "fol": "", "prediction": ["all x y.((Precipitation(x) & Water(y)) -> ReturnsToSoil(y,x))"]}
{"id": "entailmentbank_train_1385", "nl": "precipitation is a stage in water cycle where the water will return to the soil.", "fol": "", "prediction": ["all x y.((Precipitation(x) & WaterCycle(y)) -> WaterReturnsToSoil(x,y))"]}
{"id": "entailmentbank_train_1386", "nl": "sleet is when raindrops freeze as they fall.", "fol": "", "prediction": ["all x.(Sleet(x) -> (RaindropsFreeze(x) & Fall(x)))"]}
{"id": "entailmentbank_train_1387", "nl": "sleet is the precipitation when raindrops freeze as they fall.", "fol": "", "prediction": ["all x.(Sleet(x) -> (Precipitation(x) & RaindropsFreeze(x)))"]}
{"id": "entailmentbank_train_1388", "nl": "the temperature is below freezing.", "fol": "", "prediction": ["all x.(Temperature(x) -> BelowFreezing(x))"]}
{"id": "entailmentbank_train_1389", "nl": "freezing is usually used to refer the freezing point of water in real life.", "fol": "", "prediction": ["all x.(Freezing(x) -> RefersFreezingPoint(x))"]}
{"id": "entailmentbank_train_1390", "nl": "the freezing point of water is 32f / 0c / 273k.", "fol": "", "prediction": ["all x.(FreezingPoint(x) -> (32f(x) | 0c(x) | 273k(x)))"]}
{"id": "entailmentbank_train_1391", "nl": "the temperature is below 0 c.", "fol": "", "prediction": ["all x.(Temperature(x) -> Below0C(x))"]}
{"id": "entailmentbank_train_1392", "nl": "water is in the solid state, called ice, for temperatures between 0 / -459 / -273 and 273 / 32 / 0 k / f / c.", "fol": "", "prediction": ["all x.((Water(x) & SolidState(x) & TemperaturesBetween(x,0,459,273) & TemperaturesBetween(x,273,32,0)) -> Ice(x))"]}
{"id": "entailmentbank_train_1393", "nl": "the precipitation of water will be in ice form when temperature is below 0 c.", "fol": "", "prediction": ["all x.((PrecipitationOfWater(x) & TemperatureBelow0C(x)) -> IceForm(x))"]}
{"id": "entailmentbank_train_1394", "nl": "snow is a kind of ice.", "fol": "", "prediction": ["all x.(Snow(x) -> Ice(x))"]}
{"id": "entailmentbank_train_1395", "nl": "snow is precipitation in ice form.", "fol": "", "prediction": ["all x.(Snow(x) -> PrecipitationInIceForm(x))"]}
{"id": "entailmentbank_train_1396", "nl": "the precipitation will be in snow form when the temperature is below 0c.", "fol": "", "prediction": ["all x.((Precipitation(x) & TemperatureBelow0c(x)) -> SnowForm(x))"]}
{"id": "entailmentbank_train_1397", "nl": "if a substance absorbs solar energy then that substance will increase in temperature.", "fol": "", "prediction": ["all x.((Substance(x) & AbsorbsSolarEnergy(x)) -> IncreasesTemperature(x))"]}
{"id": "entailmentbank_train_1398", "nl": "water absorbs solar energy in the water cycle.", "fol": "", "prediction": ["all x.(Water(x) -> AbsorbsSolarEnergy(x))"]}
{"id": "entailmentbank_train_1399", "nl": "water absorbing solar energy will increase in temperature.", "fol": "", "prediction": ["all x.((Water(x) & AbsorbsSolarEnergy(x)) -> IncreasesTemperature(x))"]}
{"id": "entailmentbank_train_1400", "nl": "water absorbing solar energy will increase in heat energy.", "fol": "", "prediction": ["all x.((Water(x) & AbsorbsSolarEnergy(x)) -> IncreasesHeatEnergy(x))"]}
{"id": "entailmentbank_train_1401", "nl": "evaporation means a substance changes from a liquid into a gas by increasing heat energy.", "fol": "", "prediction": ["all x y.((Substance(x) & Liquid(y) & Gas(y)) -> ChangesFromTo(x,y))"]}
{"id": "entailmentbank_train_1402", "nl": "evaporation of water is when water changes from a liquid into a gas by increasing heat energy.", "fol": "", "prediction": ["all x.(EvaporationOfWater(x) -> (WaterChangesFromLiquidToGas(x) & IncreasesHeatEnergy(x)))"]}
{"id": "entailmentbank_train_1403", "nl": "water absorbing solar energy will cause the evaporation of water.", "fol": "", "prediction": ["all x.((Water(x) & AbsorbsSolarEnergy(x)) -> CausesEvaporationOfWater(x))"]}
{"id": "entailmentbank_train_1404", "nl": "the sun is a source of solar energy called sunlight.", "fol": "", "prediction": ["all x.(Sun(x) -> SourceOfSolarEnergy(x))"]}
{"id": "entailmentbank_train_1405", "nl": "in the water cycle the sun has the role of causing evaporation.", "fol": "", "prediction": ["all x.(Sun(x) -> CausesEvaporation(x))"]}
{"id": "entailmentbank_train_1406", "nl": "water absorbing solar energy will change water into gas state.", "fol": "", "prediction": ["all x.((Water(x) & AbsorbsSolarEnergy(x)) -> ChangesWaterIntoGasState(x))"]}
{"id": "entailmentbank_train_1407", "nl": "water absorbing solar energy will change water into water vapor.", "fol": "", "prediction": ["all x.((Water(x) & AbsorbsSolarEnergy(x)) -> ChangesWaterIntoWaterVapor(x))"]}
{"id": "entailmentbank_train_1408", "nl": "sun radiation is similar to solar energy.", "fol": "", "prediction": ["all x.(SunRadiation(x) -> SimilarToSolarEnergy(x))"]}
{"id": "entailmentbank_train_1409", "nl": "water absorbing sun radiation will change water into water vapor.", "fol": "", "prediction": ["all x.((Water(x) & AbsorbsSunRadiation(x)) -> ChangesWaterIntoWaterVapor(x))"]}
{"id": "entailmentbank_train_1410", "nl": "an example of a physical cycle is the water cycle.", "fol": "", "prediction": ["all x.((WaterCycle(x) & PhysicalCycle(x)) -> WaterCycle(x))"]}
{"id": "entailmentbank_train_1411", "nl": "the sun is the source of energy for physical cycles on earth.", "fol": "", "prediction": ["all x y.((Sun(x) & PhysicalCycle(y)) -> SourceOfEnergy(x,y))"]}
{"id": "entailmentbank_train_1412", "nl": "the sun is the source of energy for water cycle on earth.", "fol": "", "prediction": ["all x y.((Sun(x) & WaterCycle(y)) -> SourceOfEnergy(x,y))"]}
{"id": "entailmentbank_train_1413", "nl": "the sun is the source of energy for evaporation in the water cycle on earth.", "fol": "", "prediction": ["all x y.((Sun(x) & WaterCycle(y)) -> SourceOfEnergyForEvaporation(x,y))"]}
{"id": "entailmentbank_train_1414", "nl": "evaporation is a stage in the water cycle process.", "fol": "", "prediction": ["all x.(Evaporation(x) -> WaterCycleProcess(x))"]}
{"id": "entailmentbank_train_1415", "nl": "the sun is the source of energy for evaporation and precipitation in the water cycle on earth.", "fol": "", "prediction": ["all x y.((Sun(x) & Earth(y)) -> (SourceOfEnergy(x,y) & ForEvaporationAndPrecipitation(x,y)))"]}
{"id": "entailmentbank_train_1416", "nl": "the sun transfers light and heat energy from itself to the planets through sunlight.", "fol": "", "prediction": ["all x y z.((Sun(x) & Light(y) & HeatEnergy(z)) -> TransfersToPlanets(x,y,z))"]}
{"id": "entailmentbank_train_1417", "nl": "the sun transfer light and heat energy from itself to the earth through sunlight.", "fol": "", "prediction": ["all x y.((Sun(x) & Earth(y)) -> TransfersLightAndHeatEnergy(x,y))"]}
{"id": "entailmentbank_train_1418", "nl": "a human is a kind of animal.", "fol": "", "prediction": ["all x.(Human(x) -> Animal(x))"]}
{"id": "entailmentbank_train_1419", "nl": "when an animal moves, chemical energy is converted to mechanical energy.", "fol": "", "prediction": ["all x y.((Animal(x) & Moves(x)) -> ConvertsChemicalEnergyToMechanicalEnergy(y))"]}
{"id": "entailmentbank_train_1420", "nl": "when a human moves, chemical energy is converted to mechanical energy.", "fol": "", "prediction": ["all x y.((Human(x) & Moves(x)) -> ConvertedToMechanicalEnergy(y))"]}
{"id": "entailmentbank_train_1421", "nl": "chemical energy is a kind of energy.", "fol": "", "prediction": ["all x.(ChemicalEnergy(x) -> Energy(x))"]}
{"id": "entailmentbank_train_1422", "nl": "mechanical energy is a kind of energy.", "fol": "", "prediction": ["all x.(MechanicalEnergy(x) -> Energy(x))"]}
{"id": "entailmentbank_train_1423", "nl": "when one kind of energy changes into another kind of energy, the total amount of energy is constant.", "fol": "", "prediction": ["all x y.((Energy(x) & Energy(y) & ChangesInto(x,y)) -> TotalAmountOfEnergyConstant(x))"]}
{"id": "entailmentbank_train_1424", "nl": "when a human moves, the total amount of energy is constant.", "fol": "", "prediction": ["all x.(HumanMovement(x) -> TotalEnergyConstant(x))"]}
{"id": "entailmentbank_train_1425", "nl": "sound is a kind of mechanical energy.", "fol": "", "prediction": ["all x.(Sound(x) -> MechanicalEnergy(x))"]}
{"id": "entailmentbank_train_1426", "nl": "a car engine started and converted gasoine into heat and sound energy.", "fol": "", "prediction": ["all x.(CarEngine(x) -> (Started(x) & ConvertedGasoine(x) & HeatAndSoundEnergy(x)))"]}
{"id": "entailmentbank_train_1427", "nl": "gasoline is a source of chemical energy.", "fol": "", "prediction": ["all x.(Gasoline(x) -> SourceOfChemicalEnergy(x))"]}
{"id": "entailmentbank_train_1428", "nl": "a car engine usually converts chemical energy into mechanical energy and heat energy through combustion.", "fol": "", "prediction": ["all x.(CarEngine(x) -> (ConvertsChemicalEnergy(x) & ToMechanicalEnergy(x) & ToHeatEnergy(x) & ThroughCombustion(x)))"]}
{"id": "entailmentbank_train_1429", "nl": "when the car engined started the total amound of energy is constant.", "fol": "", "prediction": ["all x.(EnginedStarted(x) -> TotalEnergyConstant(x))"]}
{"id": "entailmentbank_train_1430", "nl": "a person is a kind of animal.", "fol": "", "prediction": ["all x.(Person(x) -> Animal(x))"]}
{"id": "entailmentbank_train_1431", "nl": "when a person moves, chemical energy is converted to mechanical energy.", "fol": "", "prediction": ["all x y.((Person(x) & Moves(x)) -> ConvertedToMechanicalEnergy(y))"]}
{"id": "entailmentbank_train_1432", "nl": "shivering is a kind of shaking.", "fol": "", "prediction": ["all x.(Shivering(x) -> Shaking(x))"]}
{"id": "entailmentbank_train_1433", "nl": "shaking is a kind of moving.", "fol": "", "prediction": ["all x.(Shaking(x) -> Moving(x))"]}
{"id": "entailmentbank_train_1434", "nl": "shivering is a kind of moving.", "fol": "", "prediction": ["all x.(Shivering(x) -> Moving(x))"]}
{"id": "entailmentbank_train_1435", "nl": "a person shivers.", "fol": "", "prediction": ["all x.(Shivers(x) -> Person(x))"]}
{"id": "entailmentbank_train_1436", "nl": "the person moves when he is shivering.", "fol": "", "prediction": ["all x.((Person(x) & Shivering(x)) -> Moves(x))"]}
{"id": "entailmentbank_train_1437", "nl": "when a person shivers, chemical energy is converted to mechanical energy.", "fol": "", "prediction": ["all x.(Shivers(x) -> ConvertedToMechanicalEnergy(x))"]}
{"id": "entailmentbank_train_1438", "nl": "a gasoline engine is a kind of internal combustion engine.", "fol": "", "prediction": ["all x.(GasolineEngine(x) -> InternalCombustionEngine(x))"]}
{"id": "entailmentbank_train_1439", "nl": "a gasoline engine is a part of gasoline lawn mower.", "fol": "", "prediction": ["all x.(GasolineEngine(x) -> PartOfGasolineLawnMower(x))"]}
{"id": "entailmentbank_train_1440", "nl": "an internal combustion engine is a part of gasoline lawn mower.", "fol": "", "prediction": ["all x.(InternalCombustionEngine(x) -> PartOfGasolineLawnMower(x))"]}
{"id": "entailmentbank_train_1441", "nl": "an internal combustion engine usually converts fuel / chemical energy into mechanical energy and heat energy through combustion.", "fol": "", "prediction": ["all x.(InternalCombustionEngine(x) -> (ConvertsFuel(x) & ConvertsChemicalEnergy(x) & ConvertsMechanicalEnergy(x) & ConvertsHeatEnergy(x)))"]}
{"id": "entailmentbank_train_1442", "nl": "using the gasoline lawn mower converts chemical energy into mechanical energy.", "fol": "", "prediction": ["all x.((GasolineLawnMower(x) & ChemicalEnergy(x)) -> MechanicalEnergy(x))"]}
{"id": "entailmentbank_train_1443", "nl": "the encoders in the telephone convert sound energy into electrical energy.", "fol": "", "prediction": ["all x y.((Encoder(x) & Telephone(y)) -> ConvertsSoundEnergyToElectricalEnergy(x,y))"]}
{"id": "entailmentbank_train_1444", "nl": "when a person speaks into a telephone, the sound energy is taken in by the encoder.", "fol": "", "prediction": ["all x y.((Person(x) & Telephone(y) & SpeaksInto(x,y)) -> TakenInByEncoder(x,y))"]}
{"id": "entailmentbank_train_1445", "nl": "when a person speaks into a telephone, the sound energy is converted into electrical energy by the encoder.", "fol": "", "prediction": ["all x y.((Person(x) & SpeaksIntoTelephone(x)) -> ConvertsSoundEnergyToElectricalEnergy(x,y))"]}
{"id": "entailmentbank_train_1446", "nl": "electrical devices convert from electrical energy into other forms of energy.", "fol": "", "prediction": ["all x.(ElectricalDevice(x) -> ConvertsFromElectricalEnergyToOtherFormsOfEnergy(x))"]}
{"id": "entailmentbank_train_1447", "nl": "a hand dryer is a kind of electrical device for drying hair.", "fol": "", "prediction": ["all x.(HandDryer(x) -> (ElectricalDevice(x) & ForDryingHair(x)))"]}
{"id": "entailmentbank_train_1448", "nl": "a hand dryer converts electrical energy into other forms of energy.", "fol": "", "prediction": ["all x.(HandDrier(x) -> ConvertsElectricalEnergy(x))"]}
{"id": "entailmentbank_train_1449", "nl": "a hand dryer produces heat.", "fol": "", "prediction": ["all x.(HandDryer(x) -> ProducesHeat(x))"]}
{"id": "entailmentbank_train_1450", "nl": "a hand dryer converts electrical energy into heat energy.", "fol": "", "prediction": ["all x.(HandDrier(x) -> ConvertsElectricalEnergyToHeatEnergy(x))"]}
{"id": "entailmentbank_train_1451", "nl": "electrical devices convert from electrical energy  into other forms of energy.", "fol": "", "prediction": ["all x.(ElectricalDevice(x) -> ConvertsFromElectricalEnergyToOtherFormsOfEnergy(x))"]}
{"id": "entailmentbank_train_1452", "nl": "a flashlight is a kind of electrical device.", "fol": "", "prediction": ["all x.(Flashlight(x) -> ElectricalDevice(x))"]}
{"id": "entailmentbank_train_1453", "nl": "a flashlight converts electrical energy into other forms of energy.", "fol": "", "prediction": ["all x.(Flashlight(x) -> ConvertsElectricalEnergy(x))"]}
{"id": "entailmentbank_train_1454", "nl": "a flashlight emits light.", "fol": "", "prediction": ["all x.(Flashlight(x) -> EmitsLight(x))"]}
{"id": "entailmentbank_train_1455", "nl": "light is a kind of energy.", "fol": "", "prediction": ["all x.(Light(x) -> Energy(x))"]}
{"id": "entailmentbank_train_1456", "nl": "a flashlight converts electrical energy into light energy.", "fol": "", "prediction": ["all x.(Flashlight(x) -> ConvertsElectricalEnergyToLightEnergy(x))"]}
{"id": "entailmentbank_train_1457", "nl": "a light bulb converts electrical energy / electricity into light energy / light energy and heat energy.", "fol": "", "prediction": ["all x.(LightBulb(x) -> (ConvertsElectricalEnergy(x) & ConvertsElectricity(x) & ConvertsElectricalEnergy(x) & ConvertsElectricalEnergy(x) & ConvertsElectricalEnergy(x) & ConvertsElectricalEnergy(x)))"]}
{"id": "entailmentbank_train_1458", "nl": "a light bulb is a part of a lamp.", "fol": "", "prediction": ["all x.(LightBulb(x) -> PartOfLamp(x))"]}
{"id": "entailmentbank_train_1459", "nl": "a lamp converts electrical energy to light and heat energy.", "fol": "", "prediction": ["all x.(Lamp(x) -> (ConvertsElectricalEnergy(x) & ToLight(x) & ToHeat(x)))"]}
{"id": "entailmentbank_train_1460", "nl": "closing an electric circuit causes an electrical device to function.", "fol": "", "prediction": ["all x y.((ElectricalDevice(x) & ElectricCircuit(y)) -> ClosesCausesToFunction(x,y))"]}
{"id": "entailmentbank_train_1461", "nl": "a doorbell is a kind of electric device.", "fol": "", "prediction": ["all x.(Doorbell(x) -> ElectricDevice(x))"]}
{"id": "entailmentbank_train_1462", "nl": "an electric circuit can cause a doorbell to function.", "fol": "", "prediction": ["all x.((ElectricCircuit(x) & Doorbell(y)) -> CanFunction(x,y))"]}
{"id": "entailmentbank_train_1463", "nl": "a doorbell converts electrical energy / electricity into sound energy.", "fol": "", "prediction": ["all x.(Doorbell(x) -> ConvertsElectricalEnergyToSoundEnergy(x))"]}
{"id": "entailmentbank_train_1464", "nl": "converting is a kind of function.", "fol": "", "prediction": ["all x.(Converting(x) -> Function(x))"]}
{"id": "entailmentbank_train_1465", "nl": "an electric circuit can cause the doorbell to convert the electrical energy into sound energy.", "fol": "", "prediction": ["all x.(ElectricCircuit(x) -> ConvertsElectricalEnergyToSoundEnergy(x))"]}
{"id": "entailmentbank_train_1466", "nl": "a heat engine converts heat energy into mechanical energy.", "fol": "", "prediction": ["all x.(HeatEngine(x) -> ConvertsHeatEnergyToMechanicalEnergy(x))"]}
{"id": "entailmentbank_train_1467", "nl": "a hurricane is a kind of heat engine.", "fol": "", "prediction": ["all x.(Hurricane(x) -> HeatEngine(x))"]}
{"id": "entailmentbank_train_1468", "nl": "a hurricane converts heat energy into mechanical energy.", "fol": "", "prediction": ["all x.(Hurricane(x) -> ConvertsHeatEnergyToMechanicalEnergy(x))"]}
{"id": "entailmentbank_train_1469", "nl": "a redwood tree is a kind of tree.", "fol": "", "prediction": ["all x.(RedwoodTree(x) -> Tree(x))"]}
{"id": "entailmentbank_train_1470", "nl": "giant redwood is a kind of plant.", "fol": "", "prediction": ["all x.(GiantRedwood(x) -> Plant(x))"]}
{"id": "entailmentbank_train_1471", "nl": "green plants perform photosynthesis to get food.", "fol": "", "prediction": ["all x.(GreenPlant(x) -> PerformsPhotosynthesisToGetFood(x))"]}
{"id": "entailmentbank_train_1472", "nl": "the giant redwood would perform photosynthesis to get food.", "fol": "", "prediction": ["all x.((GiantRedwood(x) & PerformsPhotosynthesis(x)) -> GetsFood(x))"]}
{"id": "entailmentbank_train_1473", "nl": "photosynthesis means green plants convert from solar energy to food.", "fol": "", "prediction": ["all x.(GreenPlant(x) -> (ConvertsFromSolarEnergyToFood(x)))"]}
{"id": "entailmentbank_train_1474", "nl": "the giant redwood would perform photosynthesis to get food by converting solar energy to food.", "fol": "", "prediction": ["all x.((GiantRedwood(x) & PerformsPhotosynthesis(x) & ConvertsSolarEnergyToFood(x)) -> PhotosynthesisToGetFood(x))"]}
{"id": "entailmentbank_train_1475", "nl": "food is a kind of chemical energy.", "fol": "", "prediction": ["all x.(Food(x) -> ChemicalEnergy(x))"]}
{"id": "entailmentbank_train_1476", "nl": "the giant redwood would perform photosynthesis to get food by converting solar energy to chemical energy.", "fol": "", "prediction": ["all x.((GiantRedwood(x) & PerformsPhotosynthesis(x)) -> ConvertsSolarEnergyToChemicalEnergy(x))"]}
{"id": "entailmentbank_train_1477", "nl": "burning is similar to combustion.", "fol": "", "prediction": ["all x.(Burning(x) -> SimilarToCombustion(x))"]}
{"id": "entailmentbank_train_1478", "nl": "lighting a candle causes that candle to burn.", "fol": "", "prediction": ["all x y.((Candle(x) & Candle(y)) -> CausesBurn(x,y))"]}
{"id": "entailmentbank_train_1479", "nl": "lighting a candle causes the candle to go through combustion.", "fol": "", "prediction": ["all x y.((Candle(x) & Candle(y)) -> GoesThroughCombustion(y,x))"]}
{"id": "entailmentbank_train_1480", "nl": "a candle is made of wax.", "fol": "", "prediction": ["all x.(Candle(x) -> MadeOfWax(x))"]}
{"id": "entailmentbank_train_1481", "nl": "lighting a candle cuases the wax in candle to go through combustion.", "fol": "", "prediction": ["all x y.((Candle(x) & Candle(y)) -> CuasesWaxInCandle(x,y))"]}
{"id": "entailmentbank_train_1482", "nl": "combustion means fire converts chemical energy into light energy and heat energy.", "fol": "", "prediction": ["all x.(Combustion(x) -> (ConvertsChemicalEnergy(x) & LightEnergy(x) & HeatEnergy(x)))"]}
{"id": "entailmentbank_train_1483", "nl": "wax contains chemical energy.", "fol": "", "prediction": ["all x.(Wax(x) -> ContainsChemicalEnergy(x))"]}
{"id": "entailmentbank_train_1484", "nl": "combustion converts the chemical energy in wax into light and heat energy.", "fol": "", "prediction": ["all x y.((Combustion(x) & ChemicalEnergy(y) & Wax(y)) -> ConvertsToLightAndHeatEnergy(x,y))"]}
{"id": "entailmentbank_train_1485", "nl": "energy transformation means one kind of energy changes into another kind of energy.", "fol": "", "prediction": ["all x y.((EnergyTransformation(x) & Energy(y)) -> ChangesInto(x,y))"]}
{"id": "entailmentbank_train_1486", "nl": "the energy transformation in wax is from chemical energy to light and heat energy.", "fol": "", "prediction": ["all x.(Wax(x) -> (EnergyTransformation(x) & ChemicalEnergy(x) & LightEnergy(x) & HeatEnergy(x)))"]}
{"id": "entailmentbank_train_1487", "nl": "fuel is a source of mechanical energy for cars to move.", "fol": "", "prediction": ["all x.(Fuel(x) -> (MechanicalEnergySource(x) & CarsMove(x)))"]}
{"id": "entailmentbank_train_1488", "nl": "the car runs out of fuel.", "fol": "", "prediction": ["all x.(Car(x) -> RunsOutOfFuel(x))"]}
{"id": "entailmentbank_train_1489", "nl": "the car does not have a source of mechanical energy to move.", "fol": "", "prediction": ["all x.(Car(x) -> -MechanicalEnergySource(x))"]}
{"id": "entailmentbank_train_1490", "nl": "a car is moving on a level road.", "fol": "", "prediction": ["all x.(Car(x) -> MovingOnLevelRoad(x))"]}
{"id": "entailmentbank_train_1491", "nl": "if one surface is moving on another surface then those surfaces are touching.", "fol": "", "prediction": ["all x y.((Surface(x) & Surface(y) & MovingOn(x,y)) -> Touching(x))"]}
{"id": "entailmentbank_train_1492", "nl": "the moving car and the road are touching on their surfaces.", "fol": "", "prediction": ["all x y.((MovingCar(x) & Road(y)) -> TouchingOnSurface(x,y))"]}
{"id": "entailmentbank_train_1493", "nl": "friction acts to counter the motion of two objects when their surfaces are touching.", "fol": "", "prediction": ["all x y.((Friction(x) & Surface(y) & Touching(y)) -> CountersMotion(x,y))"]}
{"id": "entailmentbank_train_1494", "nl": "friction will counter the motion of the moving car.", "fol": "", "prediction": ["all x.(Friction(x) -> CounterMotionOfMovingCar(x))"]}
{"id": "entailmentbank_train_1495", "nl": "counter the motion of an moving object means decreasing the mechanical energy of the moving object.", "fol": "", "prediction": ["all x y.((MovingObject(x) & MovingObject(y)) -> CounterMotionDecreasesMechanicalEnergy(x,y))"]}
{"id": "entailmentbank_train_1496", "nl": "friction will decrease the mechanical energy of the moving car.", "fol": "", "prediction": ["all x.(Friction(x) -> DecreasesMechanicalEnergy(x))"]}
{"id": "entailmentbank_train_1497", "nl": "the mechanical energy of the moving car will be decreased to 0.", "fol": "", "prediction": ["all x y.((MovingCar(x) & MechanicalEnergy(y)) -> MechanicalEnergyDecreasedTo0(x,y))"]}
{"id": "entailmentbank_train_1498", "nl": "if an object has 0 mechanical energy, then the object will stop moving.", "fol": "", "prediction": ["all x.((Object(x) & Has0MechanicalEnergy(x)) -> StopsMoving(x))"]}
{"id": "entailmentbank_train_1499", "nl": "the car will stop when the mechanical energy in it is decreased by friction to 0.", "fol": "", "prediction": ["all x y.((Car(x) & MechanicalEnergy(y) & DecreasedByFrictionTo0(y,x)) -> Stops(x))"]}
{"id": "entailmentbank_train_1500", "nl": "sonar usually is used for locating objects underwater.", "fol": "", "prediction": ["all x.(Sonar(x) -> UsedForLocatingObjectsUnderwater(x))"]}
{"id": "entailmentbank_train_1501", "nl": "sonar is used to find the location of an object by sound waves.", "fol": "", "prediction": ["all x y.((Sonar(x) & Object(y)) -> FindsLocationBySoundWaves(x,y))"]}
{"id": "entailmentbank_train_1502", "nl": "sonar uses sound waves to locate objects underwater.", "fol": "", "prediction": ["all x.(Sonar(x) -> UsesSoundWavesToLocateObjectsUnderwater(x))"]}
{"id": "entailmentbank_train_1503", "nl": "the wire's ends were connected to a battery.", "fol": "", "prediction": ["all x y.((Wire(x) & Battery(y)) -> ConnectedTo(x,y))"]}
{"id": "entailmentbank_train_1504", "nl": "creating a simple circuit requires a wire / battery.", "fol": "", "prediction": ["all x.((Circuit(x) & Wire(x) & Battery(x)) -> Simple(x))"]}
{"id": "entailmentbank_train_1505", "nl": "the wire's ends were connected to a simple circuit.", "fol": "", "prediction": ["all x y.((Wire(x) & Ends(y)) -> ConnectedToSimpleCircuit(x,y))"]}
{"id": "entailmentbank_train_1506", "nl": "wire was looped several times around an iron nail.", "fol": "", "prediction": ["all x y.((Wire(x) & IronNail(y)) -> LoopedAround(x,y))"]}
{"id": "entailmentbank_train_1507", "nl": "the wire is looped several times around an iron nail and is connected to a circuit.", "fol": "", "prediction": ["all x y.((Wire(x) & IronNail(y)) -> (LoopedAround(x,y) & ConnectedToCircuit(x)))"]}
{"id": "entailmentbank_train_1508", "nl": "a electromagnet is formed by attaching an iron nail wrapped in a copper wire to a circuit.", "fol": "", "prediction": ["all x y.((Electromagnet(x) & IronNail(y) & WrappedInCopperWire(y)) -> FormedByAttachingToCircuit(x,y))"]}
{"id": "entailmentbank_train_1509", "nl": "an electromaget is formed when a wire is looped around an iron nail and is connceted to a circuit.", "fol": "", "prediction": ["all x y.((Electromaget(x) & Wire(y) & LoopedAroundIronNail(y,x) & ConncetedToCircuit(x)) -> Formed(x))"]}
{"id": "entailmentbank_train_1510", "nl": "electromagnets generate magnetic fields.", "fol": "", "prediction": ["all x.(Electromagnet(x) -> GeneratesMagneticFields(x))"]}
{"id": "entailmentbank_train_1511", "nl": "a magnetic field will be generated when a wire is looped around an iron nail and is connected to a circuit.", "fol": "", "prediction": ["all x y.((Wire(x) & IronNail(y) & LoopedAround(x,y) & ConnectedToCircuit(x)) -> MagneticFieldGeneration(x))"]}
{"id": "entailmentbank_train_1512", "nl": "moving a coil of wire in the magnetic field generates electrical current.", "fol": "", "prediction": ["all x y.((CoilOfWire(x) & MagneticField(y) & MovingInMagneticField(x,y)) -> GeneratesElectricalCurrent(x))"]}
{"id": "entailmentbank_train_1513", "nl": "a metal loop is similar to a coil of wire.", "fol": "", "prediction": ["all x.(MetalLoop(x) -> SimilarToCoilOfWire(x))"]}
{"id": "entailmentbank_train_1514", "nl": "moving a metal loop in the magnetic field generates electrical current.", "fol": "", "prediction": ["all x y.((MetalLoop(x) & MagneticField(y) & MovingInMagneticField(x,y)) -> GeneratesElectricalCurrent(x))"]}
{"id": "entailmentbank_train_1515", "nl": "a battery converts chemical energy into electrical energy for powering electrical devices.", "fol": "", "prediction": ["all x y.((Battery(x) & ChemicalEnergy(y)) -> ConvertsToElectricalEnergy(x,y))"]}
{"id": "entailmentbank_train_1516", "nl": "a radio is a kind of electrical device.", "fol": "", "prediction": ["all x.(Radio(x) -> ElectricalDevice(x))"]}
{"id": "entailmentbank_train_1517", "nl": "the battery converts chemical energy into electrical energy to power a radio.", "fol": "", "prediction": ["all x y.((Battery(x) & ChemicalEnergy(y)) -> ConvertsToElectricalEnergy(x,y))"]}
{"id": "entailmentbank_train_1518", "nl": "a flashlight is a kind of battery-operated device.", "fol": "", "prediction": ["all x.(Flashlight(x) -> BatteryOperatedDevice(x))"]}
{"id": "entailmentbank_train_1519", "nl": "battery is the source of electrical energy for battery-operated device.", "fol": "", "prediction": ["all x.(Battery(x) -> (SourceOfElectricalEnergy(x) & BatteryOperatedDevice(x)))"]}
{"id": "entailmentbank_train_1520", "nl": "battery is the source of electrical energy for a flashlight.", "fol": "", "prediction": ["all x.((Battery(x) & Flashlight(x)) -> SourceOfElectricalEnergy(x))"]}
{"id": "entailmentbank_train_1521", "nl": "a flashlight converts electrical energy from the battery into light energy.", "fol": "", "prediction": ["all x.(Flashlight(x) -> ConvertsElectricalEnergyFromBatteryToLightEnergy(x))"]}
{"id": "entailmentbank_train_1522", "nl": "batteries convert chemical energy to electrical energy.", "fol": "", "prediction": ["all x.(Battery(x) -> ConvertsChemicalEnergyToElectricalEnergy(x))"]}
{"id": "entailmentbank_train_1523", "nl": "when a flashlight is used, the energy is changed from chemical energy into electrical energy and then into light energy.", "fol": "", "prediction": ["all x.((Flashlight(x) & Used(x)) -> (ChangesEnergy(x,ChemicalEnergy) & ChangesEnergy(x,ElectricalEnergy) & ChangesEnergy(x,LightEnergy)))"]}
{"id": "entailmentbank_train_1524", "nl": "a wind turbine converts wind energy into mechanical energy for a generator.", "fol": "", "prediction": ["all x y.((WindTurbine(x) & WindEnergy(y)) -> ConvertsToMechanicalEnergy(x,y))"]}
{"id": "entailmentbank_train_1525", "nl": "a generator converts mechanical energy to electrical energy.", "fol": "", "prediction": ["all x.(Generator(x) -> ConvertsMechanicalEnergyToElectricalEnergy(x))"]}
{"id": "entailmentbank_train_1526", "nl": "a windmill converts wind energy into electrical energy primarily by using mechanical energy.", "fol": "", "prediction": ["all x.(Windmill(x) -> (ConvertsWindEnergyToElectricalEnergy(x) & UsesMechanicalEnergy(x)))"]}
{"id": "entailmentbank_train_1527", "nl": "hammering an object requires movement.", "fol": "", "prediction": ["all x y.((Hammering(x) & Object(y)) -> RequiresMovement(x,y))"]}
{"id": "entailmentbank_train_1528", "nl": "a nail is a kind of object.", "fol": "", "prediction": ["all x.(Nail(x) -> Object(x))"]}
{"id": "entailmentbank_train_1529", "nl": "hammering a nail requires movement.", "fol": "", "prediction": ["all x y.((HammeringNail(x) & Nail(y)) -> RequiresMovement(x,y))"]}
{"id": "entailmentbank_train_1530", "nl": "an example of mechanical energy is an object in motion.", "fol": "", "prediction": ["all x.(MechanicalEnergy(x) -> ObjectInMotion(x))"]}
{"id": "entailmentbank_train_1531", "nl": "hammering a nail is an example of mechanical energy.", "fol": "", "prediction": ["all x y.((HammeringNail(x) & Nail(y)) -> MechanicalEnergy(x))"]}
{"id": "entailmentbank_train_1532", "nl": "electrical current is made of electrons flowing in one direction.", "fol": "", "prediction": ["all x.(ElectricalCurrent(x) -> (ElectronsFlowingInOneDirection(x)))"]}
{"id": "entailmentbank_train_1533", "nl": "when an electrical circuit is working properly, electrical current runs through the wires.", "fol": "", "prediction": ["all x.((ElectricalCircuit(x) & WorkingProperly(x)) -> ElectricalCurrentRunsThroughWires(x))"]}
{"id": "entailmentbank_train_1534", "nl": "electrons flows in one direction in the wires when an electrical circuit is working properly.", "fol": "", "prediction": ["all x y.((Electron(x) & ElectricalCircuit(y) & WorkingProperly(y)) -> FlowsInOneDirectionInWires(x,y))"]}
{"id": "entailmentbank_train_1535", "nl": "a wire is made of atoms.", "fol": "", "prediction": ["all x.(Wire(x) -> MadeOfAtoms(x))"]}
{"id": "entailmentbank_train_1536", "nl": "electrons will collide with the atoms in wires when flowing in one direction.", "fol": "", "prediction": ["all x y.((Electron(x) & Atom(y) & FlowsInOneDirection(x)) -> Collide(x,y))"]}
{"id": "entailmentbank_train_1537", "nl": "atoms colliding increases the kinetic energy.", "fol": "", "prediction": ["all x.((Atom(x) & Colliding(x)) -> IncreasesKineticEnergy(x))"]}
{"id": "entailmentbank_train_1538", "nl": "electrons flowing in wires increases the kinetic energy of the wires.", "fol": "", "prediction": ["all x y.((Electron(x) & Wire(y) & FlowingIn(x,y)) -> IncreasesKineticEnergy(x,y))"]}
{"id": "entailmentbank_train_1539", "nl": "temperature is a measure of the total kinetic energy of an object.", "fol": "", "prediction": ["all x.(Temperature(x) -> MeasuresTotalKineticEnergy(x))"]}
{"id": "entailmentbank_train_1540", "nl": "electrical current running through a wire causes that wire to become warm.", "fol": "", "prediction": ["all x y.((ElectricalCurrent(x) & Wire(y) & RunningThrough(x,y)) -> WarmWire(y))"]}
{"id": "entailmentbank_train_1541", "nl": "a light bulb is a kind of electrical device.", "fol": "", "prediction": ["all x.(LightBulb(x) -> ElectricalDevice(x))"]}
{"id": "entailmentbank_train_1542", "nl": "an electrical device requires electricity to turn on.", "fol": "", "prediction": ["all x.(ElectricalDevice(x) -> RequiresElectricityToTurnOn(x))"]}
{"id": "entailmentbank_train_1543", "nl": "a light bulb requires electricity to turn on.", "fol": "", "prediction": ["all x.(LightBulb(x) -> RequiresElectricityToTurnOn(x))"]}
{"id": "entailmentbank_train_1544", "nl": "when a switch in a simple series circuit is closed, electricity will flow through the circuit.", "fol": "", "prediction": ["all x y.((Switch(x) & SimpleSeriesCircuit(y) & Closed(x,y)) -> ElectricityFlowsThrough(x,y))"]}
{"id": "entailmentbank_train_1545", "nl": "an electric circuit is a vehicle for moving electrical energy from the source to the electrical device.", "fol": "", "prediction": ["all x.(ElectricCircuit(x) -> (VehicleForMovingElectricalEnergy(x) & FromSourceToDevice(x)))"]}
{"id": "entailmentbank_train_1546", "nl": "when a switch is closed, the electrical energy will flow from the source to the electrical device.", "fol": "", "prediction": ["all x y.((Switch(x) & Closed(x)) -> ElectricalEnergyFlow(y))"]}
{"id": "entailmentbank_train_1547", "nl": "when a switched is closed, the electrical energy will flow to the light bulb.", "fol": "", "prediction": ["all x.((Switched(x) & Closed(x)) -> ElectricalEnergyFlowsToLightBulb(x))"]}
{"id": "entailmentbank_train_1548", "nl": "when electricity flows to a light bulb, the light bulb will turn on / come on.", "fol": "", "prediction": ["all x y.((ElectricityFlowsToLightBulb(x) & LightBulb(y)) -> (TurnsOn(y) | ComesOn(y)))"]}
{"id": "entailmentbank_train_1549", "nl": "plastic is an electrical insulator.", "fol": "", "prediction": ["all x.(Plastic(x) -> ElectricalInsulator(x))"]}
{"id": "entailmentbank_train_1550", "nl": "plastic tape is made of plastic.", "fol": "", "prediction": ["all x.(PlasticTape(x) -> MadeOfPlastic(x))"]}
{"id": "entailmentbank_train_1551", "nl": "plastic tape is an electrical insulator.", "fol": "", "prediction": ["all x.(PlasticTape(x) -> ElectricalInsulator(x))"]}
{"id": "entailmentbank_train_1552", "nl": "an electrical insulator slows / prevents the transfer of / flow of electricity.", "fol": "", "prediction": ["all x.(ElectricalInsulator(x) -> SlowsOrPreventsTransferOfElectricity(x))"]}
{"id": "entailmentbank_train_1553", "nl": "plastic tape will prevent the flow of electricity.", "fol": "", "prediction": ["all x.(PlasticTape(x) -> PreventsFlowOfElectricity(x))"]}
{"id": "entailmentbank_train_1554", "nl": "a larger power source provide more current an electromagnet.", "fol": "", "prediction": ["all x.((LargerPowerSource(x) & ProvidesMoreCurrent(x)) -> Electromagnet(x))"]}
{"id": "entailmentbank_train_1555", "nl": "as the current supplied to an electromagnet increases, the strength of the electromagnet will increase.", "fol": "", "prediction": ["all x y.((Electromagnet(x) & Current(y) & Increases(y,x)) -> StrengthIncreases(x,y))"]}
{"id": "entailmentbank_train_1556", "nl": "a larger power source will increase the strength of the electromagnet.", "fol": "", "prediction": ["all x.((LargerPowerSource(x) & IncreasesStrengthOfElectromagnet(x)) -> IncreasesStrengthOfElectromagnet(x))"]}
{"id": "entailmentbank_train_1557", "nl": "sound is a kind of energy.", "fol": "", "prediction": ["all x.(Sound(x) -> Energy(x))"]}
{"id": "entailmentbank_train_1558", "nl": "heat is a kind of energy.", "fol": "", "prediction": ["all x.(Heat(x) -> Energy(x))"]}
{"id": "entailmentbank_train_1559", "nl": "heat, light, and sound are all different forms of energy.", "fol": "", "prediction": ["all x.((Heat(x) | Light(x) | Sound(x)) -> DifferentEnergy(x))"]}
{"id": "entailmentbank_train_1560", "nl": "a firecracker converts chemical energy into sound energy and light energy and heat energy.", "fol": "", "prediction": ["all x.(Firecracker(x) -> (ConvertsChemicalEnergy(x) & SoundEnergy(x) & LightEnergy(x) & HeatEnergy(x)))"]}
{"id": "entailmentbank_train_1561", "nl": "if something converts one kind of energy into other kinds of energy then that something originally stores that energy as the first kind of energy.", "fol": "", "prediction": ["all x y.((ConvertsEnergy(x) & Energy(y) & ConvertsEnergy(x,y)) -> StoresEnergyAsFirstEnergy(x,y))"]}
{"id": "entailmentbank_train_1562", "nl": "the firecracker stores chemical energy as its original energy.", "fol": "", "prediction": ["all x.(Firecracker(x) -> StoresChemicalEnergyAsOriginalEnergy(x))"]}
{"id": "entailmentbank_train_1563", "nl": "liquid is a kind of state of matter.", "fol": "", "prediction": ["all x.(Liquid(x) -> StateOfMatter(x))"]}
{"id": "entailmentbank_train_1564", "nl": "gas is a kind of state of matter.", "fol": "", "prediction": ["all x.(Gas(x) -> StateOfMatter(x))"]}
{"id": "entailmentbank_train_1565", "nl": "heat energy can change the state of matter.", "fol": "", "prediction": ["all x.(HeatEnergy(x) -> ChangesStateOfMatter(x))"]}
{"id": "entailmentbank_train_1566", "nl": "heat energy can change a substance from a liquid to a gas.", "fol": "", "prediction": ["all x y.((Substance(x) & HeatEnergy(x)) -> CanChangeFromLiquidToGas(x,y))"]}
{"id": "entailmentbank_train_1567", "nl": "heat energy ccan change water from a liquid to a gas.", "fol": "", "prediction": ["all x.(HeatEnergy(x) -> ChangesWaterFromLiquidToGas(x))"]}
{"id": "entailmentbank_train_1568", "nl": "heat can cause a solid substance to melt.", "fol": "", "prediction": ["all x y.((SolidSubstance(x) & Heat(y)) -> Melts(x,y))"]}
{"id": "entailmentbank_train_1569", "nl": "an ice cube is a kind of solid.", "fol": "", "prediction": ["all x.(IceCube(x) -> Solid(x))"]}
{"id": "entailmentbank_train_1570", "nl": "heat can cause the ice cube to melt.", "fol": "", "prediction": ["all x.(Heat(x) -> CanCauseIceCubeToMelt(x))"]}
{"id": "entailmentbank_train_1571", "nl": "heat can cause ice to melt.", "fol": "", "prediction": ["all x.(Heat(x) -> CausesIceToMelt(x))"]}
{"id": "entailmentbank_train_1572", "nl": "a car engine is a source of heat.", "fol": "", "prediction": ["all x.(CarEngine(x) -> SourceOfHeat(x))"]}
{"id": "entailmentbank_train_1573", "nl": "the heat from a car engine can cause ice to melt.", "fol": "", "prediction": ["all x y.((CarEngine(x) & Heat(y)) -> CanCauseIceToMelt(x,y))"]}
{"id": "entailmentbank_train_1574", "nl": "an x ray is a kind of electromagnetic wave.", "fol": "", "prediction": ["all x.(XRay(x) -> ElectromagneticWave(x))"]}
{"id": "entailmentbank_train_1575", "nl": "electromagnetic energy travels as electromagnetic waves.", "fol": "", "prediction": ["all x.(ElectromagneticEnergy(x) -> TravelsAsElectromagneticWaves(x))"]}
{"id": "entailmentbank_train_1576", "nl": "x-rays are a kind of electromagnetic energy.", "fol": "", "prediction": ["all x.(X-Ray(x) -> ElectromagneticEnergy(x))"]}
{"id": "entailmentbank_train_1577", "nl": "ultraviolet light is a kind of electromagnetic energy.", "fol": "", "prediction": ["all x.(UVLight(x) -> ElectromagneticEnergy(x))"]}
{"id": "entailmentbank_train_1578", "nl": "x-rays and ultraviolet light are both electromagnetic energy.", "fol": "", "prediction": ["all x.((X-Ray(x) & UVLight(x)) -> ElectromagneticEnergy(x))"]}
{"id": "entailmentbank_train_1579", "nl": "a block is a kind of object.", "fol": "", "prediction": ["all x.(Block(x) -> Object(x))"]}
{"id": "entailmentbank_train_1580", "nl": "mechanical energy exerted by an object can be used to push or pull another object.", "fol": "", "prediction": ["all x y.((MechanicalEnergy(x) & Object(y)) -> (UsedToPush(x,y) | UsedToPull(x,y)))"]}
{"id": "entailmentbank_train_1581", "nl": "mechanical energy exerted by an object can be used to push a block.", "fol": "", "prediction": ["all x y.((MechanicalEnergy(x) & Object(y)) -> CanBeUsedToPush(x,y))"]}
{"id": "entailmentbank_train_1582", "nl": "a person is a kind of object.", "fol": "", "prediction": ["all x.(Person(x) -> Object(x))"]}
{"id": "entailmentbank_train_1583", "nl": "a person can exert mechanical energy to push a block.", "fol": "", "prediction": ["all x y.((Person(x) & MechanicalEnergy(y)) -> CanPressBlock(x,y))"]}
{"id": "entailmentbank_train_1584", "nl": "pedals are a kind of object.", "fol": "", "prediction": ["all x.(Pedals(x) -> Object(x))"]}
{"id": "entailmentbank_train_1585", "nl": "mechanical energy can cause objects to move.", "fol": "", "prediction": ["all x.(MechanicalEnergy(x) -> CausesObjectsToMove(x))"]}
{"id": "entailmentbank_train_1586", "nl": "pedalling a bicycle requires moving the pedals in a circular motion.", "fol": "", "prediction": ["all x y.((Bicycle(x) & Bicycle(y)) -> (MovesPedalsInCircularMotion(x,y)))"]}
{"id": "entailmentbank_train_1587", "nl": "mechanical energy can be used to pedal a bicycle.", "fol": "", "prediction": ["all x y.((MechanicalEnergy(x) & Bicycle(y)) -> CanPedal(x,y))"]}
{"id": "entailmentbank_train_1588", "nl": "a car is a kind of object.", "fol": "", "prediction": ["all x.(Car(x) -> Object(x))"]}
{"id": "entailmentbank_train_1589", "nl": "the car engine in cars converts chemical energy from gasoline into mechanical energy.", "fol": "", "prediction": ["all x y.((CarEngine(x) & Car(y)) -> ConvertsChemicalEnergyFromGasolineToMechanicalEnergy(x,y))"]}
{"id": "entailmentbank_train_1590", "nl": "the mechanical energy converted by the car engine causes the car to move.", "fol": "", "prediction": ["all x y.((CarEngine(x) & MechanicalEnergyConversion(x,y)) -> CausesCarToMove(x,y))"]}
{"id": "entailmentbank_train_1591", "nl": "if a spoon is used to stir a liquid then that spoon is touching that liquid.", "fol": "", "prediction": ["all x y.((Spoon(x) & UsedToS stirLiquid(x)) -> TouchingLiquid(x,y))"]}
{"id": "entailmentbank_train_1592", "nl": "if an object touches something then one is exposed to that something.", "fol": "", "prediction": ["all x y.((Object(x) & Touches(x,y)) -> ExposedTo(x,y))"]}
{"id": "entailmentbank_train_1593", "nl": "if a spoon is used to stir a liquid, then the spoon is exposed to the soup.", "fol": "", "prediction": ["all x y.((Spoon(x) & UsedToS stirLiquid(x)) -> ExposedToSoup(y))"]}
{"id": "entailmentbank_train_1594", "nl": "a metal spoon is used to stir the soup.", "fol": "", "prediction": ["all x.(MetalSpoon(x) -> StirsSoup(x))"]}
{"id": "entailmentbank_train_1595", "nl": "the metal spoon is exposed to the soup.", "fol": "", "prediction": ["all x.(MetalSpoon(x) -> ExposedToSoup(x))"]}
{"id": "entailmentbank_train_1596", "nl": "metal is a thermal / thermal energy conductor.", "fol": "", "prediction": ["all x.(Metal(x) -> ThermalEnergyConductor(x))"]}
{"id": "entailmentbank_train_1597", "nl": "the metal spoon being exposed to the soup is an example of a thermal conductor being exposed to the soup.", "fol": "", "prediction": ["all x y.((MetalSpoon(x) & ThermalConductor(y) & ExposedToSoup(x,y)) -> ExposedToSoup(x,y))"]}
{"id": "entailmentbank_train_1598", "nl": "a pan of soup is heated on a stove.", "fol": "", "prediction": ["all x y.((PanOfSoup(x) & Stove(y)) -> HeatsOn(x,y))"]}
{"id": "entailmentbank_train_1599", "nl": "if something is heated on a stove, that thing will become hot.", "fol": "", "prediction": ["all x y.((HeatedOnStove(x) & Stove(y)) -> Hot(y))"]}
{"id": "entailmentbank_train_1600", "nl": "the pan of soup will become hot.", "fol": "", "prediction": ["all x.(PanOfSoup(x) -> Hot(x))"]}
{"id": "entailmentbank_train_1601", "nl": "a hot substance is a source of heat.", "fol": "", "prediction": ["all x.(HotSubstance(x) -> SourceOfHeat(x))"]}
{"id": "entailmentbank_train_1602", "nl": "soup is a kind of substance.", "fol": "", "prediction": ["all x.(Soup(x) -> Substance(x))"]}
{"id": "entailmentbank_train_1603", "nl": "the pan of soup will become a source of heat.", "fol": "", "prediction": ["all x.((PanOfSoup(x) & SourceOfHeat(x)) -> HeatSource(x))"]}
{"id": "entailmentbank_train_1604", "nl": "if a thermal conductor is exposed to a source of heat then that conductor may become hot / warm.", "fol": "", "prediction": ["all x y.((ThermalConductor(x) & ExposedToHeat(x)) -> (BecomesHot(x) | Warm(x)))"]}
{"id": "entailmentbank_train_1605", "nl": "the metal spoon in the soup will become hot.", "fol": "", "prediction": ["all x.((MetalSpoon(x) & Soup(x)) -> Hot(x))"]}
{"id": "entailmentbank_train_1606", "nl": "if heat is transferred to an object, then the object will get hot.", "fol": "", "prediction": ["all x y.((HeatTransfer(x) & Object(y)) -> GetsHot(y))"]}
{"id": "entailmentbank_train_1607", "nl": "heat in the soup transferring to the metal spoon causes the spoon to become hot.", "fol": "", "prediction": ["all x y.((Soup(x) & Soup(y) & TransfersHeatToMetalSpoon(x,y)) -> HotSpoon(x))"]}
{"id": "entailmentbank_train_1608", "nl": "ice is a kind of object.", "fol": "", "prediction": ["all x.(Ice(x) -> Object(x))"]}
{"id": "entailmentbank_train_1609", "nl": "ice is cold in temperature.", "fol": "", "prediction": ["all x.(Ice(x) -> ColdTemperature(x))"]}
{"id": "entailmentbank_train_1610", "nl": "ice is a kind of cold object.", "fol": "", "prediction": ["all x.(Ice(x) -> ColdObject(x))"]}
{"id": "entailmentbank_train_1611", "nl": "a block of ice is placed on a hot sidewalk.", "fol": "", "prediction": ["all x y.((BlockOfIce(x) & HotStandard(y)) -> PlacedOn(x,y))"]}
{"id": "entailmentbank_train_1612", "nl": "the sidewalk is a kind of object.", "fol": "", "prediction": ["all x.(Standard(x) -> Object(x))"]}
{"id": "entailmentbank_train_1613", "nl": "a block of ice on a hot sidewalk is an example of cold object touching warmer object.", "fol": "", "prediction": ["all x.((BlockOfIce(x) & HotStandard(x)) -> ColdObjectCausingWarmerObject(x))"]}
{"id": "entailmentbank_train_1614", "nl": "when a cooler object touches a warmer object, thermal conduction occurs.", "fol": "", "prediction": ["all x y.((Cooler(x) & Warmer(y)) -> ThermalConductionOccurs(x,y))"]}
{"id": "entailmentbank_train_1615", "nl": "thermal conduction is when heat flows from warmer object to cooler object.", "fol": "", "prediction": ["all x.(ThermalConduction(x) -> HeatFlowsFromWarmerObjectToCoolerObject(x))"]}
{"id": "entailmentbank_train_1616", "nl": "when a cooler object touches a warmer object, heat will flow from the warmer object to the cooler object.", "fol": "", "prediction": ["all x y.((Cooler(x) & Warmer(y)) -> Touches(x,y))"]}
{"id": "entailmentbank_train_1617", "nl": "heat will flow from the hot sidewalk to the block of ice.", "fol": "", "prediction": ["all x y z.((HotStandard(x) & IceBlock(y) & HotStandard(z)) -> HeatFlowsTo(x,y,z))"]}
{"id": "entailmentbank_train_1618", "nl": "if heat is flow to a substance, then the heat energy in that substance will increase.", "fol": "", "prediction": ["all x y.((HeatFlow(x) & Substance(y)) -> IncreasesHeatEnergy(x,y))"]}
{"id": "entailmentbank_train_1619", "nl": "the hot sidewalk increase the heat energy in the block of ice.", "fol": "", "prediction": ["all x y.((HotStandard(x) & BlockOfIce(y)) -> IncreasesHeatEnergy(x,y))"]}
{"id": "entailmentbank_train_1620", "nl": "melting means substance changes from a solid into a liquid by increasing heat energy.", "fol": "", "prediction": ["all x y.((Melting(x) & Solid(y)) -> ChangesToLiquid(x,y))"]}
{"id": "entailmentbank_train_1621", "nl": "the block of ice will melt.", "fol": "", "prediction": ["all x.((BlockOfIce(x) & Melts(x)) -> BlockOfIce(x))"]}
{"id": "entailmentbank_train_1622", "nl": "a glass contains water.", "fol": "", "prediction": ["all x.(Glass(x) -> ContainsWater(x))"]}
{"id": "entailmentbank_train_1623", "nl": "a glass of water is a kind of object.", "fol": "", "prediction": ["all x.(GlassOfWater(x) -> Object(x))"]}
{"id": "entailmentbank_train_1624", "nl": "if an object / something is in the sunlight then that object / that something will absorb solar energy.", "fol": "", "prediction": ["all x.((Object(x) & Something(x) & InSunlight(x)) -> AbsorbsSolarEnergy(x))"]}
{"id": "entailmentbank_train_1625", "nl": "a glass of water is in the sunlight.", "fol": "", "prediction": ["all x.(GlassOfWater(x) -> InSunlight(x))"]}
{"id": "entailmentbank_train_1626", "nl": "the glass of water will absorb solar energy.", "fol": "", "prediction": ["all x.((GlassOfWater(x) & AbsorbsSolarEnergy(x)) -> AbsorbsSolarEnergy(x))"]}
{"id": "entailmentbank_train_1627", "nl": "absorbing sunlight causes objects to heat.", "fol": "", "prediction": ["all x.(AbsorbingSunlight(x) -> CausesHeat(x))"]}
{"id": "entailmentbank_train_1628", "nl": "the glass of water will heat.", "fol": "", "prediction": ["all x.((GlassOfWater(x) & Heat(x)) -> Heats(x))"]}
{"id": "entailmentbank_train_1629", "nl": "a sheet of construction paper is a kind of object.", "fol": "", "prediction": ["all x.((SheetOfConstructionPaper(x) & Object(x)) -> Object(x))"]}
{"id": "entailmentbank_train_1630", "nl": "black objects absorb the most amount of sunlight.", "fol": "", "prediction": ["all x.(BlackObject(x) -> AbsorbsMostSunlight(x))"]}
{"id": "entailmentbank_train_1631", "nl": "a black sheet of construction paper will absorb the most amount of sunlight.", "fol": "", "prediction": ["all x.(BlackSheetOfConstructionPaper(x) -> AbsorbsMostSunlight(x))"]}
{"id": "entailmentbank_train_1632", "nl": "an article of clothing is a kind of object.", "fol": "", "prediction": ["all x.((ClothingArticle(x) & Object(x)) -> Object(x))"]}
{"id": "entailmentbank_train_1633", "nl": "a sweater is a kind of article of clothing.", "fol": "", "prediction": ["all x.(Sweetshirt(x) -> ClothingArticle(x))"]}
{"id": "entailmentbank_train_1634", "nl": "a sweater is a kind of object.", "fol": "", "prediction": ["all x.(Sweetshirt(x) -> Object(x))"]}
{"id": "entailmentbank_train_1635", "nl": "if an object is black then that object absorbs all visible light / heat.", "fol": "", "prediction": ["all x.((Object(x) & Black(x)) -> AbsorbsVisibleLight(x) & AbsorbsVisibleHeat(x))"]}
{"id": "entailmentbank_train_1636", "nl": "a black sweater will absorb all visible light.", "fol": "", "prediction": ["all x.(BlackSweater(x) -> AbsorbsVisibleLight(x))"]}
{"id": "entailmentbank_train_1637", "nl": "dark means dark in color.", "fol": "", "prediction": ["all x.(Dark(x) -> DarkColor(x))"]}
{"id": "entailmentbank_train_1638", "nl": "dark blue is dark in color.", "fol": "", "prediction": ["all x.(DarkBlue(x) -> DarkColor(x))"]}
{"id": "entailmentbank_train_1639", "nl": "white is light in color.", "fol": "", "prediction": ["all x.(White(x) -> LightColor(x))"]}
{"id": "entailmentbank_train_1640", "nl": "as lightness in color of an object increases, the ability of that object to reflect light will increase.", "fol": "", "prediction": ["all x y.((Object(x) & LightnessInColor(x,y) & Increases(x,y)) -> ReflectsLight(x))"]}
{"id": "entailmentbank_train_1641", "nl": "white colored object will reflect more light than the dark blue object.", "fol": "", "prediction": ["all x y.((WhiteColoredObject(x) & DarkBlueObject(y)) -> ReflectsMoreLight(x,y))"]}
{"id": "entailmentbank_train_1642", "nl": "t-shirt is a kind of object.", "fol": "", "prediction": ["all x.(T-Shirt(x) -> Object(x))"]}
{"id": "entailmentbank_train_1643", "nl": "there is a white t-shirt.", "fol": "", "prediction": ["exists x.(WhiteT-Shirt(x) & T-Shirt(x))"]}
{"id": "entailmentbank_train_1644", "nl": "there is a dark blue t-shirt.", "fol": "", "prediction": ["exists x.(T-Shirt(x) & DarkBlue(x))"]}
{"id": "entailmentbank_train_1645", "nl": "the white t-shirt will reflect more light than the dark blue t-shirt.", "fol": "", "prediction": ["all x y.((WhiteT-Shirt(x) & DarkBlueT-Shirt(y)) -> ReflectsMoreLight(x,y))"]}
{"id": "entailmentbank_train_1646", "nl": "if an object reflects more sunlight, than the object is more likely to stay cool.", "fol": "", "prediction": ["all x.((Object(x) & ReflectsMoreSunlight(x)) -> MoreLikelyToStayCool(x))"]}
{"id": "entailmentbank_train_1647", "nl": "the white t-shirt is likely to be cooler than dark blue t-shirt.", "fol": "", "prediction": ["all x y.((WhiteT-Shirt(x) & DarkBlueT-Shirt(y)) -> Cooler(x,y))"]}
{"id": "entailmentbank_train_1648", "nl": "a leaf is often green in color.", "fol": "", "prediction": ["all x.(Leaf(x) -> GreenColor(x))"]}
{"id": "entailmentbank_train_1649", "nl": "a leaf is a kind of object.", "fol": "", "prediction": ["all x.(Leaf(x) -> Object(x))"]}
{"id": "entailmentbank_train_1650", "nl": "a leaf is a green object.", "fol": "", "prediction": ["all x.(Leaf(x) -> GreenObject(x))"]}
{"id": "entailmentbank_train_1651", "nl": "if an object reflects a light of a certain color then the object appears to be that color.", "fol": "", "prediction": ["all x y.((Object(x) & ReflectsLight(x,y) & Color(y)) -> AppearsToBeColor(x,y))"]}
{"id": "entailmentbank_train_1652", "nl": "leaves reflect green color.", "fol": "", "prediction": ["all x.(Leaves(x) -> ReflectGreenColor(x))"]}
{"id": "entailmentbank_train_1653", "nl": "a blue block is a kind of object.", "fol": "", "prediction": ["all x.(BlueBlock(x) -> Object(x))"]}
{"id": "entailmentbank_train_1654", "nl": "a blue block is an object with blue color.", "fol": "", "prediction": ["all x.(BlueBlock(x) -> BlueColor(x))"]}
{"id": "entailmentbank_train_1655", "nl": "the blue block reflects blue light.", "fol": "", "prediction": ["all x.(BlueBlock(x) -> ReflectsBlueLight(x))"]}
{"id": "entailmentbank_train_1656", "nl": "ultraviolet radiation is ionizing.", "fol": "", "prediction": ["all x.(UVRadiation(x) -> Ionizing(x))"]}
{"id": "entailmentbank_train_1657", "nl": "ionizing radiation is harmful to human skin.", "fol": "", "prediction": ["all x.(IonizingRadiation(x) -> HarmfulToHumanSkin(x))"]}
{"id": "entailmentbank_train_1658", "nl": "ultraviolet radiation is harmful to human skin.", "fol": "", "prediction": ["all x.(UVRadiation(x) -> HarmfulToHumanSkin(x))"]}
{"id": "entailmentbank_train_1659", "nl": "light is a kind of electromagnetic radiation.", "fol": "", "prediction": ["all x.(Light(x) -> ElectromagneticRadiation(x))"]}
{"id": "entailmentbank_train_1660", "nl": "electromagnetic radiation is arranged in the electromagnetic spectrum by wavelength / frequency.", "fol": "", "prediction": ["all x y.((ElectromagneticRadiation(x) & Wavelength(y) & Frequency(y)) -> ArrangedInElectromagneticSpectrum(x,y))"]}
{"id": "entailmentbank_train_1661", "nl": "light is arranged in the electromagnetic spectrum by wavelength and frequency.", "fol": "", "prediction": ["all x.((Light(x) & Wavelength(x) & Frequency(x)) -> ArrangedInElectromagneticSpectrum(x))"]}
{"id": "entailmentbank_train_1662", "nl": "visible light is a kind of light.", "fol": "", "prediction": ["all x.(VisibleLight(x) -> Light(x))"]}
{"id": "entailmentbank_train_1663", "nl": "light is a kind of electromagnetic wave.", "fol": "", "prediction": ["all x.(Light(x) -> ElectromagneticWave(x))"]}
{"id": "entailmentbank_train_1664", "nl": "visible light is a kind of electromagnetic wave.", "fol": "", "prediction": ["all x.(VisibleLight(x) -> ElectromagneticWave(x))"]}
{"id": "entailmentbank_train_1665", "nl": "visible light is a part of the electromagnetic spectrum.", "fol": "", "prediction": ["all x.(VisibleLight(x) -> PartOfElectromagneticSpectrum(x))"]}
{"id": "entailmentbank_train_1666", "nl": "visible light can be seen without using equipment.", "fol": "", "prediction": ["all x.((VisibleLight(x) & -UsesEquipment(x)) -> CanBeSeenWithoutEquipment(x))"]}
{"id": "entailmentbank_train_1667", "nl": "visible light is the part of electromagnetic spectrum that can be seen without using equipment.", "fol": "", "prediction": ["all x.(VisibleLight(x) -> (ElectromagneticSpectrum(x) & CanBeSeenWithoutEquipment(x)))"]}
{"id": "entailmentbank_train_1668", "nl": "all ranges of frequencies of radiant energy is called electromagnetic spectrum.", "fol": "", "prediction": ["all x.((RangeOfFrequency(x) & RadiantEnergy(x)) -> ElectromagneticSpectrum(x))"]}
{"id": "entailmentbank_train_1669", "nl": "light is a kind of radiant energy.", "fol": "", "prediction": ["all x.(Light(x) -> RadiantEnergy(x))"]}
{"id": "entailmentbank_train_1670", "nl": "write-in.", "fol": "", "prediction": ["all x.(WriteIn(x) -> -WriteIn(x))"]}
{"id": "entailmentbank_train_1671", "nl": "light is a kind of wave.", "fol": "", "prediction": ["all x.(Light(x) -> Wave(x))"]}
{"id": "entailmentbank_train_1672", "nl": "speed is a property of a wave or an object.", "fol": "", "prediction": ["all x.(Speed(x) -> (PropertyOfWave(x) | PropertyOfObject(x)))"]}
{"id": "entailmentbank_train_1673", "nl": "a particle of light is a kind of object.", "fol": "", "prediction": ["all x.((ParticleOfLight(x) & Object(x)) -> Object(x))"]}
{"id": "entailmentbank_train_1674", "nl": "speed is a property of the light wave and a particle of light.", "fol": "", "prediction": ["all x.(Speed(x) -> (PropertyOfLightWave(x) & ParticleOfLight(x)))"]}
{"id": "entailmentbank_train_1675", "nl": "frequency is a property of a wave / a particel of light / an event.", "fol": "", "prediction": ["all x.(Frequency(x) -> (PropertyOfWave(x) & PropertyOfPartcelOfLight(x) & PropertyOfEvent(x)))"]}
{"id": "entailmentbank_train_1676", "nl": "frequency is a property of the light wave and a particle of light.", "fol": "", "prediction": ["all x.(Frequency(x) -> (PropertyOfLightWave(x) & ParticleOfLight(x)))"]}
{"id": "entailmentbank_train_1677", "nl": "speed and frequency can be used to describe the properties of a light wave and a particle of light.", "fol": "", "prediction": ["all x y.((LightWave(x) & LightParticle(y)) -> (SpeedAndFrequency(x) & DefinesProperties(x,y)))"]}
{"id": "entailmentbank_train_1678", "nl": "a girl shines a flashlight on a mirror.", "fol": "", "prediction": ["all x y.((Girl(x) & Flashlight(y)) -> ShinesOnMirror(x,y))"]}
{"id": "entailmentbank_train_1679", "nl": "light will shine on the mirror.", "fol": "", "prediction": ["all x.(Light(x) -> ShinesOnMirror(x))"]}
{"id": "entailmentbank_train_1680", "nl": "a mirror reflects light.", "fol": "", "prediction": ["all x.(Mirror(x) -> ReflectsLight(x))"]}
{"id": "entailmentbank_train_1681", "nl": "the light will be reflected by the mirror.", "fol": "", "prediction": ["all x y.((Light(x) & Mirror(y)) -> ReflectedBy(x,y))"]}
{"id": "entailmentbank_train_1682", "nl": "if the mirror reflects light toward another girl's eye, then the other girl will see the light.", "fol": "", "prediction": ["all x y.((Mirror(x) & Girl(y) & ReflectsLightTowardsEye(x,y)) -> SeesLight(y,x))"]}
{"id": "entailmentbank_train_1683", "nl": "white is a kind of color.", "fol": "", "prediction": ["all x.(White(x) -> Color(x))"]}
{"id": "entailmentbank_train_1684", "nl": "a shirt is a kind of object.", "fol": "", "prediction": ["all x.(Shirt(x) -> Object(x))"]}
{"id": "entailmentbank_train_1685", "nl": "a white shirt is white in color.", "fol": "", "prediction": ["all x.(WhiteShirt(x) -> WhiteColor(x))"]}
{"id": "entailmentbank_train_1686", "nl": "if an object is white then that object reflects all visible light.", "fol": "", "prediction": ["all x.(White(x) -> ReflectsVisibleLight(x))"]}
{"id": "entailmentbank_train_1687", "nl": "a white colored shirt will reflect all visible light.", "fol": "", "prediction": ["all x.(WhiteColoredShirt(x) -> ReflectsVisibleLight(x))"]}
{"id": "entailmentbank_train_1688", "nl": "a reflector is used to reflect light especially on vehicles.", "fol": "", "prediction": ["all x.(Reflector(x) -> UsedToReflectLight(x))"]}
{"id": "entailmentbank_train_1689", "nl": "light shines on a bicycle's reflector.", "fol": "", "prediction": ["all x y.((Bicycle(x) & Light(y)) -> ShinesOnReflector(y,x))"]}
{"id": "entailmentbank_train_1690", "nl": "the light will be reflected from the reflector.", "fol": "", "prediction": ["all x y.((Light(x) & Reflector(y)) -> ReflectedFrom(x,y))"]}
{"id": "entailmentbank_train_1691", "nl": "if the reflector reflects the light toward the eye, then the reflector can be seen.", "fol": "", "prediction": ["all x.((Reflector(x) & ReflectsLightTowardsEye(x)) -> CanBeSeen(x))"]}
{"id": "entailmentbank_train_1692", "nl": "an image in a mirror is formed by reflecting light.", "fol": "", "prediction": ["all x y.((Image(x) & Mirror(y)) -> FormedByReflectingLight(x,y))"]}
{"id": "entailmentbank_train_1693", "nl": "someone is looking into a mirror.", "fol": "", "prediction": ["all x.(LookingIntoMirror(x) -> LooksIntoMirror(x))"]}
{"id": "entailmentbank_train_1694", "nl": "looking at an image in a mirror is an example of light being reflected by a mirror.", "fol": "", "prediction": ["all x y.((Image(x) & Mirror(y) & LookingIn(x,y)) -> ReflectedLight(x,y))"]}
{"id": "entailmentbank_train_1695", "nl": "when light hits a reflective object, that light bounces off that object.", "fol": "", "prediction": ["all x y.((Light(x) & ReflectiveObject(y) & Hits(x,y)) -> BouncesOff(x,y))"]}
{"id": "entailmentbank_train_1696", "nl": "when light wave hits a reflective object, the light wave bounces off that object.", "fol": "", "prediction": ["all x y.((LightWave(x) & ReflectiveObject(y) & Hits(x,y)) -> BouncesOff(x,y))"]}
{"id": "entailmentbank_train_1697", "nl": "reflection is when a wave bounces off a surface and travels in the opposite direction relative to the angle of incidence.", "fol": "", "prediction": ["all x y.((Wave(x) & Surface(y) & BouncesOff(x,y) & TravelsInOppositeDirection(x,y)) -> Reflection(x))"]}
{"id": "entailmentbank_train_1698", "nl": "when light wave hits a reflective object, the light wave is reflected.", "fol": "", "prediction": ["all x y.((LightWave(x) & ReflectiveObject(y) & Hits(x,y)) -> Reflected(x))"]}
{"id": "entailmentbank_train_1699", "nl": "a mirror is a kind of reflective object.", "fol": "", "prediction": ["all x.(Mirror(x) -> ReflectiveObject(x))"]}
{"id": "entailmentbank_train_1700", "nl": "when light wave hits a mirror, the light wave will be reflected.", "fol": "", "prediction": ["all x y.((LightWave(x) & Mirror(y) & Hits(x,y)) -> Reflected(x))"]}
{"id": "entailmentbank_train_1701", "nl": "if something is outside during the day then that something will receive sunlight.", "fol": "", "prediction": ["all x.((OutsideDuringDay(x) & OutsideDuringDay(x)) -> ReceivesSunlight(x))"]}
{"id": "entailmentbank_train_1702", "nl": "if something is outside during the day then that something will be heated by absorbing sunlight.", "fol": "", "prediction": ["all x.((OutsideDuringDay(x) & HeatsByAbsorbingSunlight(x)) -> HeatsOutsideDuringDay(x))"]}
{"id": "entailmentbank_train_1703", "nl": "cars are parked outside during the day.", "fol": "", "prediction": ["all x.(Car(x) -> ParkedOutside(x))"]}
{"id": "entailmentbank_train_1704", "nl": "cars parked outside will be heated by absorbing sunlight.", "fol": "", "prediction": ["all x.((Car(x) & ParkedOutside(x)) -> HeatsByAbsorbingSunlight(x))"]}
{"id": "entailmentbank_train_1705", "nl": "shiny things reflect light.", "fol": "", "prediction": ["all x.(ShinyThing(x) -> ReflectsLight(x))"]}
{"id": "entailmentbank_train_1706", "nl": "a shiny aluminum screen is placed on the car.", "fol": "", "prediction": ["all x y.((ShinyAluminumScreen(x) & Car(y)) -> PlacedOn(x,y))"]}
{"id": "entailmentbank_train_1707", "nl": "the shiny aluminum screen will reflect light away from the car.", "fol": "", "prediction": ["all x.(ShinyAluminumScreen(x) -> ReflectsLightAwayFromCar(x))"]}
{"id": "entailmentbank_train_1708", "nl": "if light is reflected, then the light is not absorbed.", "fol": "", "prediction": ["all x.((Light(x) & Reflected(x)) -> -Absorbed(x))"]}
{"id": "entailmentbank_train_1709", "nl": "cars with a shiny aluminum screen will reflect the sunlight and not absorb the sunlight.", "fol": "", "prediction": ["all x.((Car(x) & ShinyAluminumScreen(x)) -> (ReflectsSunlight(x) & -AbsorbsSunlight(x)))"]}
{"id": "entailmentbank_train_1710", "nl": "if an object does not absorb the sunlight, then the object can stay cool.", "fol": "", "prediction": ["all x.((Object(x) & -AbsorbsSunlight(x)) -> CanStayCool(x))"]}
{"id": "entailmentbank_train_1711", "nl": "cars with a shiny aluminum screen can stay cool by reflecting the sunlight.", "fol": "", "prediction": ["all x.((Car(x) & ShinyAluminumScreen(x)) -> StaysCoolByReflectingSunlight(x))"]}
{"id": "entailmentbank_train_1712", "nl": "seeing requires light.", "fol": "", "prediction": ["all x.(Seeing(x) -> RequiresLight(x))"]}
{"id": "entailmentbank_train_1713", "nl": "seeing requires light energy.", "fol": "", "prediction": ["all x.(Seeing(x) -> RequiresLightEnergy(x))"]}
{"id": "entailmentbank_train_1714", "nl": "if something is required for something else then that something allows that something else.", "fol": "", "prediction": ["all x y.((RequiredFor(x,y) & Other(y)) -> Allows(x,y))"]}
{"id": "entailmentbank_train_1715", "nl": "light energy allows things to be seen.", "fol": "", "prediction": ["all x.(LightEnergy(x) -> AllowsSeeding(x))"]}
{"id": "entailmentbank_train_1716", "nl": "a student can see the specimen through a microscope.", "fol": "", "prediction": ["all x y.((Student(x) & Specimen(y)) -> CanSeeThroughMicroscope(x,y))"]}
{"id": "entailmentbank_train_1717", "nl": "the light energy allows the student to see the specimen through the microscope.", "fol": "", "prediction": ["all x y.((Student(x) & LightEnergy(y)) -> AllowsSeeSpecimenThroughMicroscope(x,y))"]}
{"id": "entailmentbank_train_1718", "nl": "reflection is when particles bounce off a surface.", "fol": "", "prediction": ["all x.(Reflection(x) -> (BouncesOffSurface(x) & ParticlesBounceOffSurface(x)))"]}
{"id": "entailmentbank_train_1719", "nl": "both particles and waves have the property of reflection.", "fol": "", "prediction": ["all x.((Particle(x) & Wave(x)) -> Reflection(x))"]}
{"id": "entailmentbank_train_1720", "nl": "reflection is a property of light.", "fol": "", "prediction": ["all x.(Reflection(x) -> PropertyOfLight(x))"]}
{"id": "entailmentbank_train_1721", "nl": "light can be seen as both particles and waves.", "fol": "", "prediction": ["all x.(Light(x) -> (SeedAsParticles(x) & SeedAsWaves(x)))"]}
{"id": "entailmentbank_train_1722", "nl": "if an object reflects more light then that object is more easily seen.", "fol": "", "prediction": ["all x.((Object(x) & ReflectsMoreLight(x)) -> MoreEasilySeen(x))"]}
{"id": "entailmentbank_train_1723", "nl": "the object will be seen easier if it reflects more light.", "fol": "", "prediction": ["all x.((Object(x) & ReflectsMoreLight(x)) -> SeemsEasier(x))"]}
{"id": "entailmentbank_train_1724", "nl": "a ballon has a shiny metallic appearance.", "fol": "", "prediction": ["all x.(Ballon(x) -> ShinyMetallicAppearance(x))"]}
{"id": "entailmentbank_train_1725", "nl": "a balloon is a kind of object.", "fol": "", "prediction": ["all x.(Balloon(x) -> Object(x))"]}
{"id": "entailmentbank_train_1726", "nl": "a shiny metallic balloon is a kind of object.", "fol": "", "prediction": ["all x.(ShinyMetallicBalloon(x) -> Object(x))"]}
{"id": "entailmentbank_train_1727", "nl": "shiny objects reflect light.", "fol": "", "prediction": ["all x.(ShinyObject(x) -> ReflectsLight(x))"]}
{"id": "entailmentbank_train_1728", "nl": "the shiny metallic balloon reflects light.", "fol": "", "prediction": ["all x.(ShinyMetallicBalloon(x) -> ReflectsLight(x))"]}
{"id": "entailmentbank_train_1729", "nl": "the shiny metallic balloon is visible because it reflects light.", "fol": "", "prediction": ["all x.((ShinyMetallicBalloon(x) & ReflectsLight(x)) -> Visible(x))"]}
{"id": "entailmentbank_train_1730", "nl": "light refracts when it passes through water droplets.", "fol": "", "prediction": ["all x.((Light(x) & PassesThroughWaterDroplets(x)) -> Refracts(x))"]}
{"id": "entailmentbank_train_1731", "nl": "more water droplets are present in the air after the rain.", "fol": "", "prediction": ["all x y.((WaterDroplet(x) & Rain(y)) -> PresentInAir(x,y))"]}
{"id": "entailmentbank_train_1732", "nl": "light is more easily to be refracted after the rain.", "fol": "", "prediction": ["all x.((Light(x) & Rain(x)) -> MoreEasilyRefractedAfter(x,y))"]}
{"id": "entailmentbank_train_1733", "nl": "refracting light causes light to split into different colors.", "fol": "", "prediction": ["all x.(RefractingLight(x) -> CausesLightToSplitIntoDifferentColors(x))"]}
{"id": "entailmentbank_train_1734", "nl": "light is more easily to be split into different colors after the rain.", "fol": "", "prediction": ["all x.((Light(x) & Rain(x)) -> MoreEasilySplitIntoDifferentColors(x))"]}
{"id": "entailmentbank_train_1735", "nl": "a rainbow is formed by refraction of light by splitting light into all different colors.", "fol": "", "prediction": ["all x.(Rainbow(x) -> (FormedByRefractionOfLight(x) & SplitsLightIntoAllColors(x)))"]}
{"id": "entailmentbank_train_1736", "nl": "a rainbow is more easily to be formed after the rain through light refraction.", "fol": "", "prediction": ["all x.(Rainbow(x) -> MoreEasilyFormedAfterRainThroughLightRefraction(x))"]}
{"id": "entailmentbank_train_1737", "nl": "sunlight is a kind of light.", "fol": "", "prediction": ["all x.(Sunlight(x) -> Light(x))"]}
{"id": "entailmentbank_train_1738", "nl": "sunlight and rain can cause a rainbow.", "fol": "", "prediction": ["all x.((Sunlight(x) & Rain(x)) -> CanCauseRainbow(x))"]}
{"id": "entailmentbank_train_1739", "nl": "refraction of light can split light into lights of different color.", "fol": "", "prediction": ["all x y.((RefractionOfLight(x) & Light(y)) -> SplitsIntoLightsOfDifferentColor(x,y))"]}
{"id": "entailmentbank_train_1740", "nl": "refraction is when light bends.", "fol": "", "prediction": ["all x.(Refraction(x) -> LightBends(x))"]}
{"id": "entailmentbank_train_1741", "nl": "refraction is when light bends and is split into lights of different color.", "fol": "", "prediction": ["all x.(Refraction(x) -> (LightBends(x) & SplitsIntoLightsOfDifferentColor(x)))"]}
{"id": "entailmentbank_train_1742", "nl": "the rainbow is made of all different colors in visible light.", "fol": "", "prediction": ["all x.(Rainbow(x) -> MadeOfAllColors(x))"]}
{"id": "entailmentbank_train_1743", "nl": "sunlight is made of all colors in the rainbow.", "fol": "", "prediction": ["all x.(Sunlight(x) -> MadeOfAllColors(x))"]}
{"id": "entailmentbank_train_1744", "nl": "a rainbow is formed by refraction of light by separating light / splitting light into all different colors.", "fol": "", "prediction": ["all x.(Rainbow(x) -> (FormedByRefractionOfLight(x) & SeparatesLight(x) & SplitsLightIntoAllColors(x)))"]}
{"id": "entailmentbank_train_1745", "nl": "the refraction of sunlight into all different colors forms a rainbow.", "fol": "", "prediction": ["all x.((RefractionOfSunlight(x) & Color(x)) -> Rainbow(x))"]}
{"id": "entailmentbank_train_1746", "nl": "a prism refracts light.", "fol": "", "prediction": ["all x.(Prism(x) -> RefractsLight(x))"]}
{"id": "entailmentbank_train_1747", "nl": "a prism refracts light and splits light into lights of different color.", "fol": "", "prediction": ["all x.(Prism(x) -> (RefractsLight(x) & SplitsLightIntoLightsOfDifferentColor(x)))"]}
{"id": "entailmentbank_train_1748", "nl": "if a medium is denser, then the medium will be another medium.", "fol": "", "prediction": ["all x.((Medium(x) & Denser(x)) -> Medium(x))"]}
{"id": "entailmentbank_train_1749", "nl": "a light wave enters a denser medium.", "fol": "", "prediction": ["all x y.((LightWave(x) & DenserMedium(y)) -> Enters(x,y))"]}
{"id": "entailmentbank_train_1750", "nl": "the light wave enters another densesr medium.", "fol": "", "prediction": ["all x y.((LightWave(x) & DensesrMedium(y)) -> Enters(x,y))"]}
{"id": "entailmentbank_train_1751", "nl": "refraction is when light passes from one medium to another medium.", "fol": "", "prediction": ["all x y.((Light(x) & Medium(y)) -> PassesFromTo(x,y))"]}
{"id": "entailmentbank_train_1752", "nl": "the light is refracted when it enters another denser medium.", "fol": "", "prediction": ["all x y.((Light(x) & DenserMedium(y)) -> Refracted(x,y))"]}
{"id": "entailmentbank_train_1753", "nl": "a prism is made of glass.", "fol": "", "prediction": ["all x.(Prism(x) -> MadeOfGlass(x))"]}
{"id": "entailmentbank_train_1754", "nl": "a glass prism refracts light.", "fol": "", "prediction": ["all x.(GlassPrism(x) -> RefractsLight(x))"]}
{"id": "entailmentbank_train_1755", "nl": "scattering light decreases visibility.", "fol": "", "prediction": ["all x.(ScatteringLight(x) -> DecreasesVisibility(x))"]}
{"id": "entailmentbank_train_1756", "nl": "water droplets scatter light.", "fol": "", "prediction": ["all x.(WaterDroplet(x) -> ScattersLight(x))"]}
{"id": "entailmentbank_train_1757", "nl": "water droplets scattering light decreases the visibility.", "fol": "", "prediction": ["all x.(WaterDroplet(x) -> (ScattersLight(x) & DecreasesVisibility(x)))"]}
{"id": "entailmentbank_train_1758", "nl": "clouds are made of water vapor / rain droplets.", "fol": "", "prediction": ["all x.(Cloud(x) -> (MadeOfWaterVapor(x) & MadeOfRainDroplets(x)))"]}
{"id": "entailmentbank_train_1759", "nl": "fog is a kind of stratus cloud on the ground.", "fol": "", "prediction": ["all x.(Fog(x) -> (StratusCloud(x) & OnGround(x)))"]}
{"id": "entailmentbank_train_1760", "nl": "fog is made of rain droplets.", "fol": "", "prediction": ["all x.(Fog(x) -> RainDroplets(x))"]}
{"id": "entailmentbank_train_1761", "nl": "rain droplets are a kind of water droplets.", "fol": "", "prediction": ["all x.(RainDroplet(x) -> WaterDroplet(x))"]}
{"id": "entailmentbank_train_1762", "nl": "fog is made of water droplets.", "fol": "", "prediction": ["all x.(Fog(x) -> MadeOfWaterDroplets(x))"]}
{"id": "entailmentbank_train_1763", "nl": "water droplets in the fog scattering light decreases the visibility.", "fol": "", "prediction": ["all x y.((WaterDroplet(x) & Fog(y) & ScatteringLight(x,y)) -> DecreasesVisibility(x))"]}
{"id": "entailmentbank_train_1764", "nl": "x-rays can pass through some parts of the body.", "fol": "", "prediction": ["all x.(X-Ray(x) -> CanPassThroughPartsOfBody(x))"]}
{"id": "entailmentbank_train_1765", "nl": "doctors sometimes need an image of inside the body to diagnose.", "fol": "", "prediction": ["all x y.((Doctor(x) & Body(y)) -> NeedsImageToDiagnosis(x,y))"]}
{"id": "entailmentbank_train_1766", "nl": "x-rays can be used by the doctors to see inside of the body.", "fol": "", "prediction": ["all x y.((Doctor(x) & Doctor(y)) -> CanUseXRaysToSeeInsideOfBody(x,y))"]}
{"id": "entailmentbank_train_1767", "nl": "doctors belong to the medical industry.", "fol": "", "prediction": ["all x.(Doctor(x) -> BelongsToMedicalIndustry(x))"]}
{"id": "entailmentbank_train_1768", "nl": "x-rays are used in medical technology.", "fol": "", "prediction": ["all x.(X-Ray(x) -> UsedInMedicalTechnology(x))"]}
{"id": "entailmentbank_train_1769", "nl": "mechanical energy is used to move something by animals.", "fol": "", "prediction": ["all x y.((Animal(x) & MechanicalEnergy(y)) -> Moves(x,y))"]}
{"id": "entailmentbank_train_1770", "nl": "joules j are an si unit used for measuring mechanical energy.", "fol": "", "prediction": ["all x.(Jules(x) -> (SiUnit(x) & MeasuresMechanicalEnergy(x)))"]}
{"id": "entailmentbank_train_1771", "nl": "the mechanical energy used to move something by animals is measured in joules.", "fol": "", "prediction": ["all x.((MechanicalEnergy(x) & Moves(x) & Animal(x)) -> MeasuredInJules(x))"]}
{"id": "entailmentbank_train_1772", "nl": "rolling is a kind of motion.", "fol": "", "prediction": ["all x.(Rolling(x) -> Motion(x))"]}
{"id": "entailmentbank_train_1773", "nl": "a ball is a kind of object.", "fol": "", "prediction": ["all x.(Ball(x) -> Object(x))"]}
{"id": "entailmentbank_train_1774", "nl": "a ball rolling is an example of object in motion.", "fol": "", "prediction": ["all x.((BallRolling(x) & ObjectInMotion(x)) -> Example(x))"]}
{"id": "entailmentbank_train_1775", "nl": "an example of an object with kinetic energy is an object in motion.", "fol": "", "prediction": ["all x.((Object(x) & KineticEnergy(x)) -> ObjectInMotion(x))"]}
{"id": "entailmentbank_train_1776", "nl": "a ball rolling is an example of kinetic energy.", "fol": "", "prediction": ["all x.((BallRolling(x) & KineticEnergy(x)) -> ExamplesOf(x,y))"]}
{"id": "entailmentbank_train_1777", "nl": "a ball rolling is an example of an object moving.", "fol": "", "prediction": ["all x.((BallRolling(x) & ObjectMoving(x)) -> ExampleOf(x,y))"]}
{"id": "entailmentbank_train_1778", "nl": "moving changes potential energy into kinetic energy and heat energy.", "fol": "", "prediction": ["all x.(MovingChange(x) -> (ChangesPotentialEnergy(x) & (KineticEnergy(x) | HeatEnergy(x))))"]}
{"id": "entailmentbank_train_1779", "nl": "a ball rolling will change the potential energy of the ball into kinetic energy and heat energy.", "fol": "", "prediction": ["all x.(Rolling(x) -> ChangesPotentialEnergy(x))"]}
{"id": "entailmentbank_train_1780", "nl": "down the hill is a kind of direction.", "fol": "", "prediction": ["all x.(Hill(x) -> Direction(x))"]}
{"id": "entailmentbank_train_1781", "nl": "a metal ball is a kind of ball.", "fol": "", "prediction": ["all x.(MetalBall(x) -> Ball(x))"]}
{"id": "entailmentbank_train_1782", "nl": "a metal ball rolling down the hill will change the potential energy into kinetic energy and heat energy.", "fol": "", "prediction": ["all x.(RollingDownHill(x) -> (MetalBall(x) & ChangesPotentialEnergy(x) & KineticEnergy(x) & HeatEnergy(x)))"]}
{"id": "entailmentbank_train_1783", "nl": "a roller coaster is a kind of object.", "fol": "", "prediction": ["all x.(RollerCoaster(x) -> Object(x))"]}
{"id": "entailmentbank_train_1784", "nl": "potential energy of an object is determined by the mass and the height of the object.", "fol": "", "prediction": ["all x y.((Object(x) & Mass(y) & Height(y)) -> PotentialEnergyDeterminedBy(x,y))"]}
{"id": "entailmentbank_train_1785", "nl": "potential energy of the roller coaster is determined by its mass and its height.", "fol": "", "prediction": ["all x.(RollerCoaster(x) -> (DatesMass(x) & DeterminesHeight(x)))"]}
{"id": "entailmentbank_train_1786", "nl": "the height of a roller coaster car is known.", "fol": "", "prediction": ["all x.(RollerCoasterCar(x) -> HeightKnown(x))"]}
{"id": "entailmentbank_train_1787", "nl": "if we know the mass of the rollar coaster, then we can determine the potential energy of the rollar coaster.", "fol": "", "prediction": ["all x.((KnowsMassOfRollarCoaster(x) & DeterminesPotentialEnergyOfRollarCoaster(x)) -> CanDetermineEnergy(x))"]}
{"id": "entailmentbank_train_1788", "nl": "going upwards means increasing the altitude.", "fol": "", "prediction": ["all x.(GoingUpwards(x) -> IncreasesAltitude(x))"]}
{"id": "entailmentbank_train_1789", "nl": "a soccer ball is going upward after being kicked.", "fol": "", "prediction": ["all x.((SoccerBall(x) & Kicked(x)) -> GoingUpward(x))"]}
{"id": "entailmentbank_train_1790", "nl": "the altitude of the soccer ball is increasing.", "fol": "", "prediction": ["all x.((SoccerBall(x) & AltitudeIncreasing(x)) -> Increased(x))"]}
{"id": "entailmentbank_train_1791", "nl": "a soccer ball is a kind of ball.", "fol": "", "prediction": ["all x.(SoccerBall(x) -> Ball(x))"]}
{"id": "entailmentbank_train_1792", "nl": "a soccer ball is a kind of object.", "fol": "", "prediction": ["all x.(SoccerBall(x) -> Object(x))"]}
{"id": "entailmentbank_train_1793", "nl": "as the altitude of an object increases, the potential energy of the object will increase.", "fol": "", "prediction": ["all x y.((Object(x) & Altitude(y) & Increases(x,y)) -> PotentialEnergyIncrease(x,y))"]}
{"id": "entailmentbank_train_1794", "nl": "the potential energy of the soccer ball will increase.", "fol": "", "prediction": ["all x.((SoccerBall(x) & PotentialEnergy(x)) -> Increases(x))"]}
{"id": "entailmentbank_train_1795", "nl": "substances are made of molecules.", "fol": "", "prediction": ["all x.(Substance(x) -> MadeOfMolecules(x))"]}
{"id": "entailmentbank_train_1796", "nl": "water is made of molecules.", "fol": "", "prediction": ["all x.(Water(x) -> MadeOfMolecules(x))"]}
{"id": "entailmentbank_train_1797", "nl": "temperature is a measure of kinetic energy of molecules.", "fol": "", "prediction": ["all x.(Temperature(x) -> MeasuresKineticEnergyOfMolecules(x))"]}
{"id": "entailmentbank_train_1798", "nl": "the temperature of the water is a measure of the kinetic energy of molecules.", "fol": "", "prediction": ["all x y.((WaterTemperature(x) & Molecule(y)) -> MeasuresKineticEnergy(x,y))"]}
{"id": "entailmentbank_train_1799", "nl": "as a string of a musical instrument is plucked harder, the string will vibrate harder / faster.", "fol": "", "prediction": ["all x y.((String(x) & MusicalInstrument(y) & PluckedHarsher(x,y)) -> VibrateHarsh(x,y))"]}
{"id": "entailmentbank_train_1800", "nl": "a string is a kind of object made from matter.", "fol": "", "prediction": ["all x.(String(x) -> MadeFromMatter(x))"]}
{"id": "entailmentbank_train_1801", "nl": "as matter vibrates harder / faster, the volume of the sound produced will increase.", "fol": "", "prediction": ["all x.((Matter(x) & VibratesHarsh(x) & VibratesFaster(x)) -> VolumeIncrease(x))"]}
{"id": "entailmentbank_train_1802", "nl": "as a string of a musical instrument is plucked harder, the volume of the sound will increase.", "fol": "", "prediction": ["all x y.((String(x) & MusicalInstrument(y) & PluckedHarsher(x,y)) -> VolumeIncrease(x))"]}
{"id": "entailmentbank_train_1803", "nl": "as a string of a musical instrument is plucked harder, the pitch produced will not change.", "fol": "", "prediction": ["all x y.((String(x) & MusicalInstrument(y) & PluckedHarsher(x,y)) -> -ChangePitch(x))"]}
{"id": "entailmentbank_train_1804", "nl": "as the string of a musical instrument is plucked harder, the pitch will stay the same and the volume of the sound will increase.", "fol": "", "prediction": ["all x y.((String(x) & MusicalInstrument(y) & PluckedHarsher(x,y)) -> (PitchSame(x) & VolumeIncreased(x)))"]}
{"id": "entailmentbank_train_1805", "nl": "a guitar is a kind of musical instrument.", "fol": "", "prediction": ["all x.(Guitar(x) -> MusicalInstrument(x))"]}
{"id": "entailmentbank_train_1806", "nl": "as the string of a guitar is plucked harder, the pitch will stay the same and the volume of the sound will increase.", "fol": "", "prediction": ["all x y.((Guitar(x) & StringPluckedHarder(x)) -> (PitchSame(y) & VolumeIncreased(y)))"]}
{"id": "entailmentbank_train_1807", "nl": "as the amplitude of a sound wave increases, the volume of that sound wave will increase.", "fol": "", "prediction": ["all x y.((SoundWave(x) & Amplifier(x) & Volume(y)) -> Increases(x,y))"]}
{"id": "entailmentbank_train_1808", "nl": "there is a sound wave with small amplitude.", "fol": "", "prediction": ["exists x.(SoundWave(x) & SmallAmplitude(x))"]}
{"id": "entailmentbank_train_1809", "nl": "there is a sound wave with large amplitude.", "fol": "", "prediction": ["exists x.(SoundWave(x) & LargeAmplitude(x))"]}
{"id": "entailmentbank_train_1810", "nl": "the sound wave with large amplitude would have a bigger volume than the sound wave with small amplitude.", "fol": "", "prediction": ["all x y.((SoundWave(x) & SoundWave(y) & LargeAmplifier(x) & SmallAmplifier(y)) -> BiggerVolume(x,y))"]}
{"id": "entailmentbank_train_1811", "nl": "volume is a property of sound / sound energy and includes ordered values of quiet / normal / loud.", "fol": "", "prediction": ["all x.(Volume(x) -> (PropertyOfSound(x) & SoundEnergy(x) & IncludesOrderedValues(x,Quiet,Normal,Loud)))"]}
{"id": "entailmentbank_train_1812", "nl": "the sound wave with large amplitude would be louder than the sound wave with small amplitude.", "fol": "", "prediction": ["all x y.((SoundWave(x) & SoundWave(y) & LargeAmplifier(x) & SmallAmplifier(y)) -> Louder(x,y))"]}
{"id": "entailmentbank_train_1813", "nl": "as the amplitude of a sound wave increases, the amount of energy in that sound wave will increase.", "fol": "", "prediction": ["all x y.((SoundWave(x) & Amplifier(x) & SoundWave(y)) -> EnergyIncrease(x,y))"]}
{"id": "entailmentbank_train_1814", "nl": "the sound wave with large amplitude would have more energy than the sound wave with small amplitude.", "fol": "", "prediction": ["all x y.((SoundWave(x) & SoundWave(y) & LargeAmplitude(x) & SmallAmplitude(y)) -> MoreEnergy(x,y))"]}
{"id": "entailmentbank_train_1815", "nl": "the sound wave with large amplite would be louder and have more energy than the sound wave with small amplitude.", "fol": "", "prediction": ["all x y.((SoundWave(x) & SoundWave(y) & LargeAmplite(x) & SmallAmplify(y)) -> (Louder(x) & MoreEnergy(x)))"]}
{"id": "entailmentbank_train_1816", "nl": "echo is when sound reflects off of a surface.", "fol": "", "prediction": ["all x.(Echo(x) -> ReflectsSoundOffSurface(x))"]}
{"id": "entailmentbank_train_1817", "nl": "a canyon wall is a kind of surface.", "fol": "", "prediction": ["all x.(CanyonWall(x) -> Surface(x))"]}
{"id": "entailmentbank_train_1818", "nl": "sound can reflect off the canyon wall and produce an echo.", "fol": "", "prediction": ["all x.((Sound(x) & ReflectsOffCanyonWall(x)) -> ProducesEcho(x))"]}
{"id": "entailmentbank_train_1819", "nl": "a person speaking is a source of sound.", "fol": "", "prediction": ["all x.(Speaking(x) -> SourceOfSound(x))"]}
{"id": "entailmentbank_train_1820", "nl": "the sound of a person speaking can reflect off of a surface and produce echo.", "fol": "", "prediction": ["all x y.((Person(x) & Speaker(y)) -> (ReflectsOffSurface(x,y) & ProducesEcho(x,y)))"]}
{"id": "entailmentbank_train_1821", "nl": "cave walls are a kind of surface.", "fol": "", "prediction": ["all x.(CaveWall(x) -> Surface(x))"]}
{"id": "entailmentbank_train_1822", "nl": "if a person makes sound in the cave, then the sound will reflect off from the cave wall and produce echo.", "fol": "", "prediction": ["all x y.((Person(x) & Cave(y) & MakesSoundIn(x,y)) -> ReflectsOffFromWallAndProducesEcho(x,y))"]}
{"id": "entailmentbank_train_1823", "nl": "a rubber band is a kind of object.", "fol": "", "prediction": ["all x.(RubberBand(x) -> Object(x))"]}
{"id": "entailmentbank_train_1824", "nl": "objects are made of matter.", "fol": "", "prediction": ["all x.(Object(x) -> MadeOfMatter(x))"]}
{"id": "entailmentbank_train_1825", "nl": "a rubber band is made of matter.", "fol": "", "prediction": ["all x.(RubberBand(x) -> MadeOfMatter(x))"]}
{"id": "entailmentbank_train_1826", "nl": "vibrating matter can produce sound.", "fol": "", "prediction": ["all x.(VibratingMatter(x) -> ProducesSound(x))"]}
{"id": "entailmentbank_train_1827", "nl": "vibrating the matter in the rubber band can produce sound.", "fol": "", "prediction": ["all x y.((RubberBand(x) & Material(y)) -> VibratesCanProduceSound(x,y))"]}
{"id": "entailmentbank_train_1828", "nl": "snapping a rubber band can cause the matter in the rubber band to vibrate.", "fol": "", "prediction": ["all x y.((Snapping(x) & RubberBand(y)) -> CausesMatterToVibrate(x,y))"]}
{"id": "entailmentbank_train_1829", "nl": "snapping a rubber band will produce sound.", "fol": "", "prediction": ["all x.((SnappingRubberBand(x) & ProducesSound(x)) -> ProducesSound(x))"]}
{"id": "entailmentbank_train_1830", "nl": "vibrations are a source of sound.", "fol": "", "prediction": ["all x.(Vibration(x) -> SourceOfSound(x))"]}
{"id": "entailmentbank_train_1831", "nl": "plucking a string can cause that string to vibrate.", "fol": "", "prediction": ["all x y.((String(x) & Plucking(x,y)) -> Vibrate(y))"]}
{"id": "entailmentbank_train_1832", "nl": "plucking a string can be a source of sound through vibrations.", "fol": "", "prediction": ["all x y.((String(x) & Plucking(x,y)) -> SourceOfSoundThroughVibrations(x))"]}
{"id": "entailmentbank_train_1833", "nl": "plucking a string can produce sound through vibrations.", "fol": "", "prediction": ["all x y.((String(x) & Plucking(x,y)) -> ProducesSoundThroughVibrations(x))"]}
{"id": "entailmentbank_train_1834", "nl": "glass is a kind of object.", "fol": "", "prediction": ["all x.(Glass(x) -> Object(x))"]}
{"id": "entailmentbank_train_1835", "nl": "tapping two objects together causes the particles in those objects to vibrate.", "fol": "", "prediction": ["all x y.((TappingObject(x) & Object(y)) -> CausesParticlesToVibrate(x,y))"]}
{"id": "entailmentbank_train_1836", "nl": "a fork is a kind of object.", "fol": "", "prediction": ["all x.(Fork(x) -> Object(x))"]}
{"id": "entailmentbank_train_1837", "nl": "tapping a fork against a glass causes the particles in the objects to vibrate.", "fol": "", "prediction": ["all x y z.((TappingFork(x) & Glass(y) & Glass(z)) -> CausesParticlesToVibrate(x,y,z))"]}
{"id": "entailmentbank_train_1838", "nl": "the vibration of the particles caused by tapping the fork on a glass is a source of sound.", "fol": "", "prediction": ["all x y.((Vibration(x) & Particles(y) & CausedByTappingForkOnGlass(x,y)) -> SourceOfSound(x))"]}
{"id": "entailmentbank_train_1839", "nl": "the vibration of the particles caused by tapping the fork on a glass produces sound.", "fol": "", "prediction": ["all x y.((Vibration(x) & Particles(y) & TapesForkOnGlass(x,y)) -> ProducesSound(x))"]}
{"id": "entailmentbank_train_1840", "nl": "molecules vibrating can cause sound.", "fol": "", "prediction": ["all x.(Molecule(x) -> VibratingCausesSound(x))"]}
{"id": "entailmentbank_train_1841", "nl": "the molecules in the wood begin to vibrate from the force of the book.", "fol": "", "prediction": ["all x y.((Molecule(x) & Wood(y)) -> VibrateFromForce(x,y))"]}
{"id": "entailmentbank_train_1842", "nl": "the vibration of molecules can cause sound.", "fol": "", "prediction": ["all x.(Molecule(x) -> CausesSound(x))"]}
{"id": "entailmentbank_train_1843", "nl": "sound is made of sound waves.", "fol": "", "prediction": ["all x.(Sound(x) -> MadeOfSoundWaves(x))"]}
{"id": "entailmentbank_train_1844", "nl": "the vibration of molecules can cause sound wave.", "fol": "", "prediction": ["all x.((Molecule(x) & Vibration(x)) -> CanCauseSoundWave(x))"]}
{"id": "entailmentbank_train_1845", "nl": "sound energy is transferred by vibrational waves.", "fol": "", "prediction": ["all x.((SoundEnergy(x) & VibrationalWaves(x)) -> TransferredBy(x,y))"]}
{"id": "entailmentbank_train_1846", "nl": "intense sound energy can move objects.", "fol": "", "prediction": ["all x.(IntenseSoundEnergy(x) -> CanMoveObjects(x))"]}
{"id": "entailmentbank_train_1847", "nl": "insense sound energy can move objects by making them vibrate.", "fol": "", "prediction": ["all x.(InsenseSoundEnergy(x) -> MovesObjectsByVibrating(x))"]}
{"id": "entailmentbank_train_1848", "nl": "a thunder has intense sound energy.", "fol": "", "prediction": ["all x.(Thunder(x) -> IntenseSoundEnergy(x))"]}
{"id": "entailmentbank_train_1849", "nl": "a thunder can move objects by making them vibrate through intense sound energy.", "fol": "", "prediction": ["all x.(Thunder(x) -> (MovesObjects(x) & VibratesThroughIntenseSoundEnergy(x)))"]}
{"id": "entailmentbank_train_1850", "nl": "a window is a kind of object.", "fol": "", "prediction": ["all x.(Window(x) -> Object(x))"]}
{"id": "entailmentbank_train_1851", "nl": "a thunder can move a window by making them vibrate through intense sound energy.", "fol": "", "prediction": ["all x y.((Thunder(x) & Window(y)) -> (Moves(x,y) & VibratesThroughIntenseSoundEnergy(x)))"]}
{"id": "entailmentbank_train_1852", "nl": "a rattle is a kind of vibration.", "fol": "", "prediction": ["all x.(Rattle(x) -> Vibration(x))"]}
{"id": "entailmentbank_train_1853", "nl": "a thunder can make a window rattle through intense sound energy.", "fol": "", "prediction": ["all x y.((Thunder(x) & Window(y)) -> MakesRattleThroughIntenseSoundEnergy(x,y))"]}
{"id": "entailmentbank_train_1854", "nl": "matter is made of particles.", "fol": "", "prediction": ["all x.(Matter(x) -> MadeOfParticles(x))"]}
{"id": "entailmentbank_train_1855", "nl": "air is a kind of matter.", "fol": "", "prediction": ["all x.(Air(x) -> Matter(x))"]}
{"id": "entailmentbank_train_1856", "nl": "air is a matter made of air particles.", "fol": "", "prediction": ["all x.(Air(x) -> MadeOfAirParticles(x))"]}
{"id": "entailmentbank_train_1857", "nl": "sound requires matter to travel.", "fol": "", "prediction": ["all x.(Sound(x) -> RequiresMatterToTravel(x))"]}
{"id": "entailmentbank_train_1858", "nl": "sound can travel through air by vibrating air.", "fol": "", "prediction": ["all x.(Sound(x) -> (VibratesAir(x) & TravelsThroughAir(x)))"]}
{"id": "entailmentbank_train_1859", "nl": "someone plays the flute.", "fol": "", "prediction": ["exists x.(Flute(x) & Plays(x,Flute))"]}
{"id": "entailmentbank_train_1860", "nl": "if a flute is played, then the air in the flute will vibrate.", "fol": "", "prediction": ["all x.((Flute(x) & Played(x)) -> AirVibrates(x))"]}
{"id": "entailmentbank_train_1861", "nl": "the air in the flute will vibrate when the flute is played.", "fol": "", "prediction": ["all x y.((Flute(x) & Played(y)) -> VibrateAir(x,y))"]}
{"id": "entailmentbank_train_1862", "nl": "the vibrations of air in the flute are a source of sound when the flute is played.", "fol": "", "prediction": ["all x y.((Flute(x) & VibrationsOfAir(x,y) & Played(y)) -> SourceOfSound(x,y))"]}
{"id": "entailmentbank_train_1863", "nl": "sound wave is a kind of wave.", "fol": "", "prediction": ["all x.(SoundWave(x) -> Wave(x))"]}
{"id": "entailmentbank_train_1864", "nl": "a wave is formed by the vibration of the source spreading around from the source.", "fol": "", "prediction": ["all x y.((Wave(x) & Source(y)) -> FormedByVibrationSpreadingAround(x,y))"]}
{"id": "entailmentbank_train_1865", "nl": "sound wave is formed by the vibration of the source spreding around from the source.", "fol": "", "prediction": ["all x y.((SoundWave(x) & Source(y)) -> FormedByVibration(x,y))"]}
{"id": "entailmentbank_train_1866", "nl": "spreading around is similar to spreading in all directions.", "fol": "", "prediction": ["all x.(SpreadingAround(x) -> SimilarToSpreadingInAllDirections(x))"]}
{"id": "entailmentbank_train_1867", "nl": "sound waves spread in all directions away from their source.", "fol": "", "prediction": ["all x.(SoundWaves(x) -> SpreadsInAllDirections(x))"]}
{"id": "entailmentbank_train_1868", "nl": "blowing air into a whistle causes air to vibrate inside the whistle.", "fol": "", "prediction": ["all x y.((BlowingAirIntoWhistle(x) & Whistle(y)) -> CausesAirToVibrateInside(x,y))"]}
{"id": "entailmentbank_train_1869", "nl": "the air vibrations inside the whistle are a source of sound.", "fol": "", "prediction": ["all x.((AirVibrationsInsideWhistle(x) & InsideWhistle(x)) -> SourceOfSound(x))"]}
{"id": "entailmentbank_train_1870", "nl": "the air vibration inside the whistle causes the sound waves to spread in all directions.", "fol": "", "prediction": ["all x y.((AirVibrationInsideWhistle(x) & Whistle(y)) -> CausesSoundWavesToSpread(x,y))"]}
{"id": "entailmentbank_train_1871", "nl": "particles in solid are closest to each other among gas, liquid, and solid state of matter.", "fol": "", "prediction": ["all x.((Particle(x) & Solid(x) & Gas(x) & Liquid(x) & SolidStateOfMatter(x)) -> ClosestToEachOther(x))"]}
{"id": "entailmentbank_train_1872", "nl": "if the particles are closer to each other, then the vibrations of particles will spread faster.", "fol": "", "prediction": ["all x.((Particles(x) & CloserToEachOther(x)) -> VibrationsSpreadFaster(x))"]}
{"id": "entailmentbank_train_1873", "nl": "vibrations of particles will travel the fastest in solid state of matter.", "fol": "", "prediction": ["all x.((VibrationsOfParticles(x) & SolidStateOfMatter(x)) -> TravelsFastIn(x,y))"]}
{"id": "entailmentbank_train_1874", "nl": "sound travels through vibrations of particles.", "fol": "", "prediction": ["all x.(Sound(x) -> TravelsThroughVibrationsOfParticles(x))"]}
{"id": "entailmentbank_train_1875", "nl": "sound travels fastest through solid.", "fol": "", "prediction": ["all x.(Sound(x) -> TravelsFastThroughSolid(x))"]}
{"id": "entailmentbank_train_1876", "nl": "particles in gas are the farthest away from each other among gas, liquid, and solid state of matter.", "fol": "", "prediction": ["all x.((Particle(x) & Gas(x)) -> FarthestAwayFrom(x,gas,liquid,solid))"]}
{"id": "entailmentbank_train_1877", "nl": "if the particles are farther away from each other, then the vibrations of particles will spread slower.", "fol": "", "prediction": ["all x.((Particles(x) & FarFarFromEachOther(x)) -> VibrationsSpreadSlowly(x))"]}
{"id": "entailmentbank_train_1878", "nl": "vibrations of particles will travel the slowest in gas state of matter.", "fol": "", "prediction": ["all x.((VibrationsOfParticles(x) & SlowestInGasStateOfMatter(x)) -> TravelsSlowestInGasStateOfMatter(x))"]}
{"id": "entailmentbank_train_1879", "nl": "sound travels slowest through gas.", "fol": "", "prediction": ["all x.(Sound(x) -> TravelsSlowestThroughGas(x))"]}
{"id": "entailmentbank_train_1880", "nl": "sound travels fastest through solid and slowest through gas.", "fol": "", "prediction": ["all x y.((Sound(x) & Solid(y)) -> TravelsFast(x,y)) & ((Sound(x) & Gas(y)) -> TravelsSlowest(x,y)))"]}
{"id": "entailmentbank_train_1881", "nl": "iron is a kind of solid.", "fol": "", "prediction": ["all x.(Iron(x) -> Solid(x))"]}
{"id": "entailmentbank_train_1882", "nl": "sound will travel fastest in iron.", "fol": "", "prediction": ["all x.((Sound(x) & Iron(x)) -> TravelsFast(x))"]}
{"id": "entailmentbank_train_1883", "nl": "a rock is usually a solid.", "fol": "", "prediction": ["all x.(Rock(x) -> Solid(x))"]}
{"id": "entailmentbank_train_1884", "nl": "sound travels fastest in a rock.", "fol": "", "prediction": ["all x y.((Sound(x) & Rock(y)) -> TravelsFastIn(x,y))"]}
{"id": "entailmentbank_train_1885", "nl": "removing hot objects from a heat source requires thermal insulators.", "fol": "", "prediction": ["all x y.((RemovesHotObjects(x) & HeatSource(y)) -> RequiresThermalInsulators(x,y))"]}
{"id": "entailmentbank_train_1886", "nl": "an oven is a source of heat.", "fol": "", "prediction": ["all x.(Oven(x) -> SourceOfHeat(x))"]}
{"id": "entailmentbank_train_1887", "nl": "a pan is a kind of object.", "fol": "", "prediction": ["all x.(Pan(x) -> Object(x))"]}
{"id": "entailmentbank_train_1888", "nl": "removing a hot pan from an oven requires a thermal insulator.", "fol": "", "prediction": ["all x y.((Oven(x) & HotPan(y) & RemovedFrom(x,y)) -> ThermalInsulator(x))"]}
{"id": "entailmentbank_train_1889", "nl": "potholders are used to remove hot pans from an oven.", "fol": "", "prediction": ["all x y.((Potholder(x) & Oven(y)) -> RemovesHotPan(x,y))"]}
{"id": "entailmentbank_train_1890", "nl": "potholders are used as a thermal insulator to remove a hot pan from an oven.", "fol": "", "prediction": ["all x y.((Potholder(x) & Oven(y)) -> RemovesHotPan(x,y))"]}
{"id": "entailmentbank_train_1891", "nl": "steam is hot in temperature.", "fol": "", "prediction": ["all x.(Steam(x) -> HotInTemperature(x))"]}
{"id": "entailmentbank_train_1892", "nl": "steam can be a source of heat.", "fol": "", "prediction": ["all x.(Steam(x) -> SourceOfHeat(x))"]}
{"id": "entailmentbank_train_1893", "nl": "a source of heat can be used to heat something.", "fol": "", "prediction": ["all x y.((SourceOfHeat(x) & Something(y)) -> Heats(x,y))"]}
{"id": "entailmentbank_train_1894", "nl": "cooking food requires adding heat energy to the food.", "fol": "", "prediction": ["all x y.((CookingFood(x) & Food(y)) -> AddsHeatEnergy(x,y))"]}
{"id": "entailmentbank_train_1895", "nl": "a source of heat can be used to cook food by adding heat energy to the food.", "fol": "", "prediction": ["all x y.((SourceOfHeat(x) & Food(y)) -> CooksByAdditionOfHeatEnergy(x,y))"]}
{"id": "entailmentbank_train_1896", "nl": "steam can be used to cook food by adding heat to the food.", "fol": "", "prediction": ["all x y.((Steam(x) & Food(y)) -> CooksByAddition(x,y))"]}
{"id": "entailmentbank_train_1897", "nl": "adding heat to something means trasferring heat to that something.", "fol": "", "prediction": ["all x y.((AdditionTo(x,y) & Something(y)) -> TransfersHeat(x,y))"]}
{"id": "entailmentbank_train_1898", "nl": "steam can be used to cook food by transferring heat to the food.", "fol": "", "prediction": ["all x y.((Steam(x) & Food(y)) -> CooksByTransferringHeat(x,y))"]}
{"id": "entailmentbank_train_1899", "nl": "a cup of cold water is a kind of cold substance.", "fol": "", "prediction": ["all x.(ColdWater(x) -> ColdSubstance(x))"]}
{"id": "entailmentbank_train_1900", "nl": "a hot boiled egg is put into a cup of cold water.", "fol": "", "prediction": ["all x y.((HotBoiltEgg(x) & ColdWater(y)) -> PutIntoCup(x,y))"]}
{"id": "entailmentbank_train_1901", "nl": "a hot boiled egg is a kind of hot object.", "fol": "", "prediction": ["all x.(HotBoiltEgg(x) -> HotObject(x))"]}
{"id": "entailmentbank_train_1902", "nl": "a hot boiled egg in cold water is an example of hot object in a colder substance.", "fol": "", "prediction": ["all x y.((HotBoiltEgg(x) & ColdWater(y)) -> HotObject(x,y))"]}
{"id": "entailmentbank_train_1903", "nl": "thermal conduction will occur between the hot egg and the cold water.", "fol": "", "prediction": ["all x y.((HotEgg(x) & ColdWater(y)) -> ThermalConduction(x,y))"]}
{"id": "entailmentbank_train_1904", "nl": "thermal conduction is when heat is transfer from a warmer object to a colder object.", "fol": "", "prediction": ["all x y.((ThermalConduction(x) & WarmerObject(y)) -> TransfersHeat(x,y))"]}
{"id": "entailmentbank_train_1905", "nl": "the heat will transfer from the hot egg to the cold water.", "fol": "", "prediction": ["all x y.((HotEgg(x) & ColdWater(y)) -> HeatTransfer(x,y))"]}
{"id": "entailmentbank_train_1906", "nl": "transferring heat from a hot object will cause the hot object to decrease in temperature.", "fol": "", "prediction": ["all x y.((TransfersHeat(x) & HotObject(y)) -> DecreasesTemperature(y,x))"]}
{"id": "entailmentbank_train_1907", "nl": "the hot egg will decrease in temperature.", "fol": "", "prediction": ["all x.(HotEgg(x) -> DecreasesTemperature(x))"]}
{"id": "entailmentbank_train_1908", "nl": "receiving heat from a hot object will cause the cold object to decrease in heat.", "fol": "", "prediction": ["all x y.((HotObject(x) & ColdObject(y)) -> DecreasesHeat(y,x))"]}
{"id": "entailmentbank_train_1909", "nl": "the cold water will increase in temperature.", "fol": "", "prediction": ["all x.(ColdWater(x) -> IncreasesTemperature(x))"]}
{"id": "entailmentbank_train_1910", "nl": "the water will increase in temperature and the egg will decrease in temperature.", "fol": "", "prediction": ["all x y.((Water(x) & Egg(y)) -> (IncreasesTemperature(x) & DecreasesTemperature(y)))"]}
{"id": "entailmentbank_train_1911", "nl": "pot is made of metal for cooking.", "fol": "", "prediction": ["all x.(Pot(x) -> MadeOfMetal(x))"]}
{"id": "entailmentbank_train_1912", "nl": "pot is a kind of thermal conductor.", "fol": "", "prediction": ["all x.(Pot(x) -> ThermalConductor(x))"]}
{"id": "entailmentbank_train_1913", "nl": "if a pot is exposed to a source of heat, then the pot will become hot.", "fol": "", "prediction": ["all x.((Pot(x) & ExposedToHeatSource(x)) -> Hot(x))"]}
{"id": "entailmentbank_train_1914", "nl": "a stove generates heat for cooking usually.", "fol": "", "prediction": ["all x.(Stove(x) -> GeneratesHeatForCooking(x))"]}
{"id": "entailmentbank_train_1915", "nl": "a source of something generates that something.", "fol": "", "prediction": ["all x y.((Source(x) & Something(y)) -> Generates(x,y))"]}
{"id": "entailmentbank_train_1916", "nl": "a stove is a source of heat for cooking.", "fol": "", "prediction": ["all x.(Stove(x) -> SourceOfHeatForCooking(x))"]}
{"id": "entailmentbank_train_1917", "nl": "if a pot is exposed to a stove, then the pot will become hot.", "fol": "", "prediction": ["all x y.((Pot(x) & ExposedToStove(x)) -> Hot(y))"]}
{"id": "entailmentbank_train_1918", "nl": "a handle is a part of an object for holding that object.", "fol": "", "prediction": ["all x y.((Handle(x) & Object(y)) -> PartOf(x,y))"]}
{"id": "entailmentbank_train_1919", "nl": "if a pot become hot, then the handle of the pot will become hot.", "fol": "", "prediction": ["all x.((Pot(x) & Hot(x)) -> HotHandle(x))"]}
{"id": "entailmentbank_train_1920", "nl": "a metal spoon is touching the pan.", "fol": "", "prediction": ["all x.(MetalSpoon(x) -> TouchingPan(x))"]}
{"id": "entailmentbank_train_1921", "nl": "if one object touches something then one is exposed to that something.", "fol": "", "prediction": ["all x y.((Object(x) & Touches(x,y)) -> ExposedTo(x,y))"]}
{"id": "entailmentbank_train_1922", "nl": "the metal spoon is exposed to the pan.", "fol": "", "prediction": ["all x y.((MetalSpoon(x) & Pan(y)) -> ExposedTo(x,y))"]}
{"id": "entailmentbank_train_1923", "nl": "the pan is a source of heat.", "fol": "", "prediction": ["all x.(Pan(x) -> SourceOfHeat(x))"]}
{"id": "entailmentbank_train_1924", "nl": "the metal spoon is exposed to a source of heat.", "fol": "", "prediction": ["all x.(MetalSpoon(x) -> ExposedToHeatSource(x))"]}
{"id": "entailmentbank_train_1925", "nl": "a spoon sometimes is made of metal.", "fol": "", "prediction": ["exists x.(Spoon(x) & MadeOfMetal(x))"]}
{"id": "entailmentbank_train_1926", "nl": "metal is a thermal conductor.", "fol": "", "prediction": ["all x.(Metal(x) -> ThermalConductor(x))"]}
{"id": "entailmentbank_train_1927", "nl": "a spoon is a kind of thermal conductor.", "fol": "", "prediction": ["all x.(Spoon(x) -> ThermalConductor(x))"]}
{"id": "entailmentbank_train_1928", "nl": "if a spoon is exposed to a source of heat, then the conductor may become hot.", "fol": "", "prediction": ["all x.((Spoon(x) & ExposedToHeatSource(x)) -> MayBecomeHot(x))"]}
{"id": "entailmentbank_train_1929", "nl": "the metal spoon will become home.", "fol": "", "prediction": ["all x.(MetalSpoon(x) -> Home(x))"]}
{"id": "entailmentbank_train_1930", "nl": "heat flows from warmer object to cooler object through thermal conduction when two objects are touching.", "fol": "", "prediction": ["all x y.((Object(x) & Warmer(x) & Cooler(y)) -> ThermalConduction(x,y))"]}
{"id": "entailmentbank_train_1931", "nl": "a burner is a part of a stove.", "fol": "", "prediction": ["all x.(Burner(x) -> PartOfStove(x))"]}
{"id": "entailmentbank_train_1932", "nl": "a burner of a stove generates heat for cooking usually.", "fol": "", "prediction": ["all x y.((Burner(x) & Stove(y)) -> GeneratesHeatForCooking(x,y))"]}
{"id": "entailmentbank_train_1933", "nl": "if something generates heat, then that something will be hot in temperature.", "fol": "", "prediction": ["all x.((GeneratesHeat(x) & HotTemperature(x)) -> Heat(x))"]}
{"id": "entailmentbank_train_1934", "nl": "a burner of a stove will be hot in temperature.", "fol": "", "prediction": ["all x y.((Burner(x) & Stove(y)) -> HotTemperature(x,y))"]}
{"id": "entailmentbank_train_1935", "nl": "a frying pan is room temperature when it is not exposed to a heat source.", "fol": "", "prediction": ["all x.((FryingPan(x) & -ExposedToHeatSource(x)) -> RoomTemperature(x))"]}
{"id": "entailmentbank_train_1936", "nl": "a frying pan is put on the stove.", "fol": "", "prediction": ["all x.(FryingPan(x) -> PutOnStove(x))"]}
{"id": "entailmentbank_train_1937", "nl": "a frying pan on the burner of the stove is an example of cooler object touching hot object.", "fol": "", "prediction": ["all x.((FryingPan(x) & BurnerOfStove(x)) -> CoolerObject(x))"]}
{"id": "entailmentbank_train_1938", "nl": "thermal conduction will occur between the frying pan and the burner.", "fol": "", "prediction": ["all x y.((FryingPan(x) & Burner(y)) -> ThermalConduction(x,y))"]}
{"id": "entailmentbank_train_1939", "nl": "thermal conduction causes the heat flows from the burner to the frying pan.", "fol": "", "prediction": ["all x y z.((ThermalConduction(x) & Burner(y) & FryingPan(z)) -> HeatFlowsFromTo(x,y,z))"]}
{"id": "entailmentbank_train_1940", "nl": "radiation is a kind of process.", "fol": "", "prediction": ["all x.(Radiation(x) -> Process(x))"]}
{"id": "entailmentbank_train_1941", "nl": "radiation is when heat is transferred through waves / particles.", "fol": "", "prediction": ["all x.(Radiation(x) -> HeatTransfer(x))"]}
{"id": "entailmentbank_train_1942", "nl": "fire transfers heat through radiation.", "fol": "", "prediction": ["all x.(Fire(x) -> TransfersHeatThroughRadiation(x))"]}
{"id": "entailmentbank_train_1943", "nl": "fire transfers heat through waves in the process of radiation.", "fol": "", "prediction": ["all x y.((Fire(x) & Wave(y)) -> TransfersHeat(x,y))"]}
{"id": "entailmentbank_train_1944", "nl": "a campfire is a kind of fire.", "fol": "", "prediction": ["all x.(Campfire(x) -> Fire(x))"]}
{"id": "entailmentbank_train_1945", "nl": "the campfire transfers heat through waves in the process of radiation.", "fol": "", "prediction": ["all x.(Campfire(x) -> TransfersHeatThroughWaves(x))"]}
{"id": "entailmentbank_train_1946", "nl": "the sun is the source of energy for life on earth.", "fol": "", "prediction": ["all x y.((Sun(x) & Earth(y)) -> SourceOfEnergy(x,y))"]}
{"id": "entailmentbank_train_1947", "nl": "the sun transfers heat energy from itself to the planets / earth through sunlight.", "fol": "", "prediction": ["all x y z.((Sun(x) & HeatEnergy(y) & Planet(z)) -> TransfersThroughSunlight(x,y,z))"]}
{"id": "entailmentbank_train_1948", "nl": "the source of heat energy on earth is transferred from the sun to earth.", "fol": "", "prediction": ["all x y z.((SourceOfHeatEnergy(x) & Earth(y) & Sun(z)) -> TransferredFromTo(x,y,z))"]}
{"id": "entailmentbank_train_1949", "nl": "sunlight is a kind of electromagnetic radiation.", "fol": "", "prediction": ["all x.(Sunlight(x) -> ElectromagneticRadiation(x))"]}
{"id": "entailmentbank_train_1950", "nl": "sunlight can shine through a window.", "fol": "", "prediction": ["all x y.((Sunlight(x) & Window(y)) -> CanShine(x,y))"]}
{"id": "entailmentbank_train_1951", "nl": "sunlight is a kind of electromagnetic radiation that can shine through a window.", "fol": "", "prediction": ["all x.(Sunlight(x) -> (MagneticRadiation(x) & CanShineThroughWindow(x)))"]}
{"id": "entailmentbank_train_1952", "nl": "radiation is when electromagnetic waves transfers heat and light energy.", "fol": "", "prediction": ["all x.((ElectromagneticWaves(x) & TransfersHeatAndLightEnergy(x)) -> Radiation(x))"]}
{"id": "entailmentbank_train_1953", "nl": "sunlight can transfer heat and light energy through a window by radiation.", "fol": "", "prediction": ["all x y.((Sunlight(x) & Window(y)) -> TransfersHeatAndLightEnergy(x,y))"]}
{"id": "entailmentbank_train_1954", "nl": "sunlight passes the windows of a car and heat up the car seat.", "fol": "", "prediction": ["all x y.((Sunlight(x) & Car(y)) -> (PassesWindows(x,y) & HeatsUpSeat(x,y)))"]}
{"id": "entailmentbank_train_1955", "nl": "the car seat is heated by the sunlight by radiation.", "fol": "", "prediction": ["all x.(CarSeat(x) -> HeatsBySunlightByRadiation(x))"]}
{"id": "entailmentbank_train_1956", "nl": "sunlight is a kind of electromagnetic wave.", "fol": "", "prediction": ["all x.(Sunlight(x) -> ElectromagneticWave(x))"]}
{"id": "entailmentbank_train_1957", "nl": "sunlight transfers heat and light energy through radiation.", "fol": "", "prediction": ["all x.(Sunlight(x) -> TransfersHeatAndLightEnergy(x))"]}
{"id": "entailmentbank_train_1958", "nl": "the sun transmits light to earth through space.", "fol": "", "prediction": ["all x y.((Sun(x) & Earth(y)) -> TransmitsLightThroughSpace(x,y))"]}
{"id": "entailmentbank_train_1959", "nl": "the sun transfers heat and light energy to earth through space by radiation.", "fol": "", "prediction": ["all x y.((Sun(x) & Earth(y)) -> TransfersHeatAndLightEnergy(x,y))"]}
{"id": "entailmentbank_train_1960", "nl": "lightning produces electromagnetic radiation of a wide range.", "fol": "", "prediction": ["all x.(Lightning(x) -> ProducesElectromagneticRadiation(x))"]}
{"id": "entailmentbank_train_1961", "nl": "lightning occurs during lightning storms / thunderstorms.", "fol": "", "prediction": ["all x y.((Lightning(x) & LightningStorm(y)) -> OccursDuring(x,y))"]}
{"id": "entailmentbank_train_1962", "nl": "the lightning in the thunderstorms produces eletromagnetic radiation fo a wide range.", "fol": "", "prediction": ["all x y.((Lightning(x) & Thunderstorm(y)) -> ProducesElectromagneticRadiation(x,y))"]}
{"id": "entailmentbank_train_1963", "nl": "electromagnetic radiation distorts the frequency of the radio waves.", "fol": "", "prediction": ["all x y.((ElectromagneticRadiation(x) & RadioWaves(y)) -> DistortsFrequency(x,y))"]}
{"id": "entailmentbank_train_1964", "nl": "the lightnings in the thunderstorm will distort the frequency of the radio waves.", "fol": "", "prediction": ["all x y.((Lightning(x) & Thunderstorm(y)) -> DistortsRadioWavesFrequency(x,y))"]}
{"id": "entailmentbank_train_1965", "nl": "tossing a ball in the air cannot form a source of vibration.", "fol": "", "prediction": ["all x y.((TossingBall(x) & Air(y)) -> -FormsVibrationSource(x,y))"]}
{"id": "entailmentbank_train_1966", "nl": "tossing a ball in the air cannot form a wave.", "fol": "", "prediction": ["all x y.((TossingBall(x) & BallInAir(y)) -> -FormsWave(x,y))"]}
{"id": "entailmentbank_train_1967", "nl": "interruption of a radio signal causes a buzzing sound.", "fol": "", "prediction": ["all x.((RadioSignal(x) & Interrupted(x)) -> BuzzingSound(x))"]}
{"id": "entailmentbank_train_1968", "nl": "interruption of a radio signal is similar to distortion of a radio signal.", "fol": "", "prediction": ["all x y.((RadioSignal(x) & RadioSignal(y)) -> (Interrupts(x,y) & Distorts(x,y)))"]}
{"id": "entailmentbank_train_1969", "nl": "distortion of a radio signal causes a buzzing sound.", "fol": "", "prediction": ["all x.((RadioSignal(x) & DistortionOf(x,y)) -> CausesBumpingSound(x))"]}
{"id": "entailmentbank_train_1970", "nl": "radio signal is a kind of radio wave.", "fol": "", "prediction": ["all x.(RadioSignal(x) -> RadioWave(x))"]}
{"id": "entailmentbank_train_1971", "nl": "distortion of the radio waves causes a buzzing sound.", "fol": "", "prediction": ["all x.((RadioWaves(x) & DistortionOfWaves(x)) -> BuzzingSound(x))"]}
{"id": "entailmentbank_train_1972", "nl": "electromagnetic radiation causes a buzzing sound by distorting the frequency of the radio waves.", "fol": "", "prediction": ["all x.((ElectromagneticRadiation(x) & DistortsRadioWavesFrequency(x)) -> CausesBushingSound(x))"]}
{"id": "entailmentbank_train_1973", "nl": "electromagnetic radiation is made of electromagnetic waves.", "fol": "", "prediction": ["all x.(ElectromagneticRadiation(x) -> MadeOfElectromagneticWaves(x))"]}
{"id": "entailmentbank_train_1974", "nl": "electromagnetic waves cause a buzzing sound by distorting the frequency of the radio waves.", "fol": "", "prediction": ["all x.((ElectromagneticWaves(x) & DistortsRadioWavesFrequency(x)) -> CausesBushingSound(x))"]}
{"id": "entailmentbank_train_1975", "nl": "a surface is a kind of object.", "fol": "", "prediction": ["all x.(Surface(x) -> Object(x))"]}
{"id": "entailmentbank_train_1976", "nl": "edge of a pond is a kind of surface.", "fol": "", "prediction": ["all x.((EdgeOfPond(x) & Pond(y)) -> Surface(x))"]}
{"id": "entailmentbank_train_1977", "nl": "edge of a pond is a kind of object.", "fol": "", "prediction": ["all x.((EdgeOfPond(x) & Object(x)) -> Object(x))"]}
{"id": "entailmentbank_train_1978", "nl": "the waves in the pond strike the edge of the pond.", "fol": "", "prediction": ["all x y.((Wave(x) & Pond(y)) -> StrikesEdge(x,y))"]}
{"id": "entailmentbank_train_1979", "nl": "if something strikes an object then that something may bounce off of that object.", "fol": "", "prediction": ["all x y.((Strikes(x,y) & Object(y)) -> MayBounceOff(x,y))"]}
{"id": "entailmentbank_train_1980", "nl": "the waves in the pond may bounce off the edge of the pond when they strike it.", "fol": "", "prediction": ["all x y.((Wave(x) & Pond(y) & Strike(x,y)) -> BounceOffEdge(x,y))"]}
{"id": "entailmentbank_train_1981", "nl": "reflection of the waves will happen when the waves strike the edge of the pond.", "fol": "", "prediction": ["all x y.((Waves(x) & Waves(y) & StrikeEdgeOfPond(x,y)) -> ReflectionOfWaves(x,y))"]}
{"id": "entailmentbank_train_1982", "nl": "x-rays transfer energy.", "fol": "", "prediction": ["all x.(XRay(x) -> TransfersEnergy(x))"]}
{"id": "entailmentbank_train_1983", "nl": "sound waves transfer energy.", "fol": "", "prediction": ["all x.(SoundWaves(x) -> TransfersEnergy(x))"]}
{"id": "entailmentbank_train_1984", "nl": "both sound waves and x-rays transfer energy.", "fol": "", "prediction": ["all x.((SoundWaves(x) & XRays(x)) -> TransfersEnergy(x))"]}
{"id": "entailmentbank_train_1985", "nl": "a particle is a kind of object.", "fol": "", "prediction": ["all x.(Particle(x) -> Object(x))"]}
{"id": "entailmentbank_train_1986", "nl": "transverse waves cause object to move perpendicular to the direction of the wave.", "fol": "", "prediction": ["all x y.((TransverseWaves(x) & Object(y)) -> MovesPerpendicularToDirection(y,x))"]}
{"id": "entailmentbank_train_1987", "nl": "transverse waves cause particles to move perpendicular to the direction of the wave.", "fol": "", "prediction": ["all x y.((TransverseWaves(x) & Particle(y)) -> MovesPerpendicularToDirection(y,x))"]}
{"id": "entailmentbank_train_1988", "nl": "if two balanced forces act on an object in opposite directions then that object will remain stationary.", "fol": "", "prediction": ["all x y.((BalancedForces(x) & BalancedForces(y) & Object(z) & ActsOn(x,z) & OppositeDirections(x,z)) -> Stationary(x))"]}
{"id": "entailmentbank_train_1989", "nl": "if vehicle is parked then that vehicle is stationary.", "fol": "", "prediction": ["all x.(Parked(x) -> Stationary(x))"]}
{"id": "entailmentbank_train_1990", "nl": "a parked vehicle is an example of two balanced forces acting on the vehicle.", "fol": "", "prediction": ["all x.(ParkedVehicle(x) -> BalancedForces(x))"]}
{"id": "entailmentbank_train_1991", "nl": "a bus is a kind of vehicle.", "fol": "", "prediction": ["all x.(Bus(x) -> Vehicle(x))"]}
{"id": "entailmentbank_train_1992", "nl": "a parked bus is an example of two balanced forces acting on the bus.", "fol": "", "prediction": ["all x.(ParkedBus(x) -> BalancedForces(x))"]}
{"id": "entailmentbank_train_1993", "nl": "wheels are a part of roller skates.", "fol": "", "prediction": ["all x.(Wheels(x) -> RollerSkates(x))"]}
{"id": "entailmentbank_train_1994", "nl": "a roller skate is a kind of vehicle.", "fol": "", "prediction": ["all x.(RollerSkate(x) -> Vehicle(x))"]}
{"id": "entailmentbank_train_1995", "nl": "a roller skate is a kind of wheeled vehicle.", "fol": "", "prediction": ["all x.(RollerSkate(x) -> WheeledVehicle(x))"]}
{"id": "entailmentbank_train_1996", "nl": "a wheeled vehicle requires smooth surfaces.", "fol": "", "prediction": ["all x.(WheeledVehicle(x) -> RequiresSmoothSurfaces(x))"]}
{"id": "entailmentbank_train_1997", "nl": "a roller skate requires smooth surfaces.", "fol": "", "prediction": ["all x.(RollerSkate(x) -> RequiresSmoothSurfaces(x))"]}
{"id": "entailmentbank_train_1998", "nl": "asphalt has a smooth surface.", "fol": "", "prediction": ["all x.(Asphalt(x) -> SmoothSurface(x))"]}
{"id": "entailmentbank_train_1999", "nl": "blacktop is made of asphalt concrete.", "fol": "", "prediction": ["all x.(Blacktop(x) -> MadeOfAsphaltConcrete(x))"]}
{"id": "entailmentbank_train_2000", "nl": "a blacktop has a smooth surface.", "fol": "", "prediction": ["all x.(Blacktop(x) -> SmoothSurface(x))"]}
{"id": "entailmentbank_train_2001", "nl": "a roller skate can be used on a blacktop surface.", "fol": "", "prediction": ["all x.(RollerSkate(x) -> CanBeUsedOnBlacktopSurface(x))"]}
{"id": "entailmentbank_train_2002", "nl": "friction occurs when two object's surfaces move against each other.", "fol": "", "prediction": ["all x y.((Object(x) & Surface(y) & MoveAgainst(x,y)) -> FrictionOccurs(x))"]}
{"id": "entailmentbank_train_2003", "nl": "when the soccer ball is rolling, it is moving against the ground.", "fol": "", "prediction": ["all x.((SoccerBall(x) & Rolling(x)) -> MovingAgainstGround(x))"]}
{"id": "entailmentbank_train_2004", "nl": "friction will occur between the rolling soccer ball and the ground.", "fol": "", "prediction": ["all x y.((RollingSoccerBall(x) & Ground(y)) -> FrictionOccurrsBetween(x,y))"]}
{"id": "entailmentbank_train_2005", "nl": "friction causes the speed of an object to decrease.", "fol": "", "prediction": ["all x y.((Friction(x) & Object(y)) -> SpeedDecrease(x,y))"]}
{"id": "entailmentbank_train_2006", "nl": "friction will cause the speed of the rolling soccer ball to decrease.", "fol": "", "prediction": ["all x.((RollingSoccerBall(x) & Friction(x)) -> SpeedDecrease(x))"]}
{"id": "entailmentbank_train_2007", "nl": "as roughness of a surface increases, friction will increase.", "fol": "", "prediction": ["all x y.((Roughness(x) & Surface(y) & Increases(x,y)) -> IncreasesFriction(x))"]}
{"id": "entailmentbank_train_2008", "nl": "as the roughness of a surface increases, friction on the moving object will increase.", "fol": "", "prediction": ["all x y.((Surface(x) & Surface(y) & IncreasesRoughness(x,y)) -> IncreasesFriction(x,y))"]}
{"id": "entailmentbank_train_2009", "nl": "carpet has a rough surface.", "fol": "", "prediction": ["all x.(Carpet(x) -> RoughSurface(x))"]}
{"id": "entailmentbank_train_2010", "nl": "wood has a smooth surface.", "fol": "", "prediction": ["all x.(Wood(x) -> SmoothSurface(x))"]}
{"id": "entailmentbank_train_2011", "nl": "friction on the moving object increases when it is moving on the carpet surface.", "fol": "", "prediction": ["all x y.((MovingObject(x) & CarpetSurface(y)) -> IncreasesFriction(x,y))"]}
{"id": "entailmentbank_train_2012", "nl": "as the friction increases, friction will decrease the speed of the object more.", "fol": "", "prediction": ["all x y.((Friction(x) & Object(y)) -> (Increases(x,y) & DecreasesSpeed(x,y)))"]}
{"id": "entailmentbank_train_2013", "nl": "the speed of the moving object on the carpet will be decreased more than the moving objects on the wood surface.", "fol": "", "prediction": ["all x y.((MovingObject(x) & Carpet(y) & WoodSurface(y)) -> SpeedDecreasedMore(x,y))"]}
{"id": "entailmentbank_train_2014", "nl": "when the wagon is moving down the hill, it is moving against the ground.", "fol": "", "prediction": ["all x.((Wagon(x) & MovingDownHill(x)) -> MovingAgainstGround(x))"]}
{"id": "entailmentbank_train_2015", "nl": "friction occurs between the wagon and the ground.", "fol": "", "prediction": ["all x y.((Wagon(x) & Ground(y)) -> FrictionOccursBetween(x,y))"]}
{"id": "entailmentbank_train_2016", "nl": "a wagon is a kind of object.", "fol": "", "prediction": ["all x.(Wagon(x) -> Object(x))"]}
{"id": "entailmentbank_train_2017", "nl": "friction causes the speed of the wagon to decrease.", "fol": "", "prediction": ["all x.((Wagon(x) & Friction(x)) -> SpeedDecrease(x))"]}
{"id": "entailmentbank_train_2018", "nl": "if the speed of an object keeps decreasing, the object will come to stop.", "fol": "", "prediction": ["all x.((Object(x) & KeepsDecreasingSpeed(x)) -> ComesToStop(x))"]}
{"id": "entailmentbank_train_2019", "nl": "friction causes the wagon to stop.", "fol": "", "prediction": ["all x.((Wagon(x) & Friction(x)) -> Stops(x))"]}
{"id": "entailmentbank_train_2020", "nl": "sliding is a kind of moving.", "fol": "", "prediction": ["all x.(Sliding(x) -> Moving(x))"]}
{"id": "entailmentbank_train_2021", "nl": "a block is sliding down a ramp.", "fol": "", "prediction": ["all x y.((Block(x) & Ramp(y)) -> SlidingDown(x,y))"]}
{"id": "entailmentbank_train_2022", "nl": "friction occurs between the block and the ramp.", "fol": "", "prediction": ["all x y.((Block(x) & Ramp(y)) -> FrictionOccursBetween(x,y))"]}
{"id": "entailmentbank_train_2023", "nl": "friction causes the speed of the block to decrease.", "fol": "", "prediction": ["all x y.((Block(x) & Friction(y)) -> SpeedDecrease(x,y))"]}
{"id": "entailmentbank_train_2024", "nl": "grease is used to make an object's surface more smooth.", "fol": "", "prediction": ["all x y.((Germ(x) & Object(y)) -> MadeMoreSmooth(x,y))"]}
{"id": "entailmentbank_train_2025", "nl": "as the smoothness of something increases, the friction of that something will decrease.", "fol": "", "prediction": ["all x y.((Smoothness(x) & Smoothness(y)) -> ReducesFriction(x,y))"]}
{"id": "entailmentbank_train_2026", "nl": "grease is used to decrease the friction among objects.", "fol": "", "prediction": ["all x.(Gerase(x) -> DecreasesFriction(x))"]}
{"id": "entailmentbank_train_2027", "nl": "a wheel is a kind of object.", "fol": "", "prediction": ["all x.(Wheel(x) -> Object(x))"]}
{"id": "entailmentbank_train_2028", "nl": "a gear is a kind of object.", "fol": "", "prediction": ["all x.(Gear(x) -> Object(x))"]}
{"id": "entailmentbank_train_2029", "nl": "wheels / gears usually move against other surfaces.", "fol": "", "prediction": ["all x y.((Wheels(x) & Gears(y)) -> MoveAgainstSurface(x,y))"]}
{"id": "entailmentbank_train_2030", "nl": "when wheels and gears move against other surfaces, frictions will occur.", "fol": "", "prediction": ["all x y.((WheelsAndGears(x) & Surface(y) & MoveAgainst(x,y)) -> FrictionsOccur(x))"]}
{"id": "entailmentbank_train_2031", "nl": "grease is used to decrease the friction on the wheels and gears moving on other surfaces.", "fol": "", "prediction": ["all x y.((Gasoline(x) & Wheels(y) & Gears(z)) -> DecreasesFriction(x,y,z))"]}
{"id": "entailmentbank_train_2032", "nl": "pool balls are moving on the surface of the felt of the pool table.", "fol": "", "prediction": ["all x y.((PoolBall(x) & Feeling(y)) -> MovingOnSurface(x,y))"]}
{"id": "entailmentbank_train_2033", "nl": "friction will occur between the pool ball and the felt of the pool table.", "fol": "", "prediction": ["all x y.((PoolBall(x) & Feeling(y)) -> FrictionOccurs(x,y))"]}
{"id": "entailmentbank_train_2034", "nl": "a pool ball is a kind of object.", "fol": "", "prediction": ["all x.(PoolBall(x) -> Object(x))"]}
{"id": "entailmentbank_train_2035", "nl": "friction will cause the speed of the pool balls to decrease.", "fol": "", "prediction": ["all x.((Flour(x) & PoolBallSpeed(x)) -> Decreases(x))"]}
{"id": "entailmentbank_train_2036", "nl": "friction causes the temperature of an object to increase.", "fol": "", "prediction": ["all x y.((Friction(x) & Object(y)) -> CausesTemperatureToIncrease(x,y))"]}
{"id": "entailmentbank_train_2037", "nl": "oil is used to decrease the friction among parts in the car engine.", "fol": "", "prediction": ["all x y.((Oil(x) & CarEngine(y)) -> DecreasesFriction(x,y))"]}
{"id": "entailmentbank_train_2038", "nl": "oil can be used to decrease the heat among parts in the car engine produced by friction.", "fol": "", "prediction": ["all x y.((Oil(x) & CarEngine(y) & ProducedByFriction(y)) -> DecreasesHeat(x,y))"]}
{"id": "entailmentbank_train_2039", "nl": "ramp is a kind of surface.", "fol": "", "prediction": ["all x.(Ramp(x) -> Surface(x))"]}
{"id": "entailmentbank_train_2040", "nl": "as roughness of the ramp increases, friction will increase.", "fol": "", "prediction": ["all x.((Roughness(x) & Ramp(x)) -> FrictionIncrease(x))"]}
{"id": "entailmentbank_train_2041", "nl": "putting a rough paper on the ramp will increase the roughness of the ramp.", "fol": "", "prediction": ["all x.((RoughPaper(x) & OnRamp(x)) -> IncreasesRoughness(x))"]}
{"id": "entailmentbank_train_2042", "nl": "putting a rough paper on the ramp will increase the friciton of the ramp.", "fol": "", "prediction": ["all x.((RoughPaper(x) & OnRamp(x)) -> IncreasesFrictionOfRamp(x))"]}
{"id": "entailmentbank_train_2043", "nl": "gravity pulls objects towards planets.", "fol": "", "prediction": ["all x y.((Gravity(x) & Planet(y)) -> PullsToward(x,y))"]}
{"id": "entailmentbank_train_2044", "nl": "gravity is a kind of force.", "fol": "", "prediction": ["all x.(Gravity(x) -> Force(x))"]}
{"id": "entailmentbank_train_2045", "nl": "gravity is the force that pulls the ball towards the planet.", "fol": "", "prediction": ["all x y.((Gravity(x) & Ball(y)) -> PullsTowardsPlanet(x,y))"]}
{"id": "entailmentbank_train_2046", "nl": "marble is a kind of object / material.", "fol": "", "prediction": ["all x.(Marble(x) -> (Object(x) & Material(x)))"]}
{"id": "entailmentbank_train_2047", "nl": "gravity causes objects that have mass / substances to be pulled down / to fall on a planet.", "fol": "", "prediction": ["all x y.((Gravity(x) & Object(y) & HasMass(y) & HasSubstances(y)) -> (PulledDown(x,y) & FallOnPlanet(x,y)))"]}
{"id": "entailmentbank_train_2048", "nl": "gravity is the force that causes the marble to be pulled down on a planet.", "fol": "", "prediction": ["all x y.((Gravity(x) & Planet(y)) -> CausesMarbleToBePulledDown(x,y))"]}
{"id": "entailmentbank_train_2049", "nl": "gravity is the force that causes rocks to be pulled down on the planet.", "fol": "", "prediction": ["all x y.((Gravity(x) & Rock(y)) -> CausesPulledDownOnPlanet(x,y))"]}
{"id": "entailmentbank_train_2050", "nl": "sinking means moving down.", "fol": "", "prediction": ["all x.(Sinking(x) -> MovesDown(x))"]}
{"id": "entailmentbank_train_2051", "nl": "gravity is the force that causes the marble to sink.", "fol": "", "prediction": ["all x.(Gravity(x) -> CausesMarbleToSink(x))"]}
{"id": "entailmentbank_train_2052", "nl": "a pencil is a kind of object.", "fol": "", "prediction": ["all x.(Pencil(x) -> Object(x))"]}
{"id": "entailmentbank_train_2053", "nl": "gravity is the force that causes the pencial to be pulled down on a planet.", "fol": "", "prediction": ["all x y.((Gravity(x) & Planet(y)) -> CausesPencialToBePulledDown(x,y))"]}
{"id": "entailmentbank_train_2054", "nl": "the mass of earth causes the pull of gravity on earth.", "fol": "", "prediction": ["all x.((MassOfEarth(x) & CausesPullOfGravity(x)) -> Earth(x))"]}
{"id": "entailmentbank_train_2055", "nl": "a decrease is a kind of change.", "fol": "", "prediction": ["all x.(Decrease(x) -> Change(x))"]}
{"id": "entailmentbank_train_2056", "nl": "as the mass of an object decreases, the force of gravity on that object will decrease.", "fol": "", "prediction": ["all x y.((Object(x) & MassDecrease(x)) -> ForceOfGravityDecrease(y))"]}
{"id": "entailmentbank_train_2057", "nl": "as the mass of an object changes, the force of gravity on that object will change.", "fol": "", "prediction": ["all x y.((Object(x) & MassChange(x) & GravityChange(y)) -> ChangesForce(x,y))"]}
{"id": "entailmentbank_train_2058", "nl": "if something changes when something else changes, then that something depends on that something else.", "fol": "", "prediction": ["all x y.((Change(x) & Change(y)) -> DependsOn(x,y))"]}
{"id": "entailmentbank_train_2059", "nl": "the force of gravity depends on the mass of an object.", "fol": "", "prediction": ["all x y.((ForceOfGravity(x) & Object(y)) -> DependsOnMass(x,y))"]}
{"id": "entailmentbank_train_2060", "nl": "the mass of an object causes the gravitational force exerted by that object.", "fol": "", "prediction": ["all x y.((Object(x) & Mass(x,y)) -> CausesGravitationalForce(x,y))"]}
{"id": "entailmentbank_train_2061", "nl": "if something causes something else then that something else depends on that something.", "fol": "", "prediction": ["all x y.((Causes(x,y) & Causes(x,y)) -> DependsOn(x,y))"]}
{"id": "entailmentbank_train_2062", "nl": "the gravitational force on an object depends on the mass of the object.", "fol": "", "prediction": ["all x y.((GravitationalForce(x) & Object(y)) -> DependsOnMass(x,y))"]}
{"id": "entailmentbank_train_2063", "nl": "there is a negatively-charged plastic strip.", "fol": "", "prediction": ["exists x.(NegativelyCharged(x) & PlasticStrip(x))"]}
{"id": "entailmentbank_train_2064", "nl": "there is a negatively-charged piece of cloth.", "fol": "", "prediction": ["exists x.(NegativelyChargedClothing(x))"]}
{"id": "entailmentbank_train_2065", "nl": "charge is a property of an object and includes ordered values of negatively-charged / neutral / positively-charged.", "fol": "", "prediction": ["all x y.((Charge(x) & Object(y)) -> (PropertyOf(x,y) & IncludesOrderedValues(x,y)))"]}
{"id": "entailmentbank_train_2066", "nl": "the piece of cloth and plastic strip have the same charge of negative charge.", "fol": "", "prediction": ["all x.((Clothing(x) & PlasticStrip(x)) -> SameNegativeCharge(x))"]}
{"id": "entailmentbank_train_2067", "nl": "if two objects have the same electrical charge then those two objects will repel each other when they are close to each other.", "fol": "", "prediction": ["all x y.((Object(x) & ElectricCharge(y) & Same(x,y)) -> Repels(x,y))"]}
{"id": "entailmentbank_train_2068", "nl": "the negatively-charged plastic strip and negatively-charged piece of cloth will repel each other.", "fol": "", "prediction": ["all x y.((PlasticStrip(x) & Cloth(y) & NegativelyCharged(x)) -> Repel(x,y))"]}
{"id": "entailmentbank_train_2069", "nl": "if battery in an electromagnet is active then the nail in the electromagnet will become magnetic.", "fol": "", "prediction": ["all x.((BatteryInElectromagnet(x) & Active(x)) -> NailInElectromagnet(x))"]}
{"id": "entailmentbank_train_2070", "nl": "the student connects the wire wrapping an iron nail to a battery.", "fol": "", "prediction": ["all x y z.((Student(x) & WireWrapping(y) & IronNail(z) & Battery(z)) -> ConnectsTo(x,y,z))"]}
{"id": "entailmentbank_train_2071", "nl": "the iron nail will become magnetic.", "fol": "", "prediction": ["all x.(IronNail(x) -> Magnetic(x))"]}
{"id": "entailmentbank_train_2072", "nl": "magnetic attraction pulls two objects together.", "fol": "", "prediction": ["all x y.((MagneticAttraction(x) & Object(y)) -> PullsTogether(x,y))"]}
{"id": "entailmentbank_train_2073", "nl": "the iron nail will attract another iron nail because the iron nail is magnetic.", "fol": "", "prediction": ["all x y.((IronNail(x) & IronNail(y) & Magnetic(y)) -> Attracts(x,y))"]}
{"id": "entailmentbank_train_2074", "nl": "a soccer player kicks a soccer ball.", "fol": "", "prediction": ["all x y.((SoccerPlayer(x) & SoccerBall(y)) -> Kicks(x,y))"]}
{"id": "entailmentbank_train_2075", "nl": "if an object is kicked then force is exerted on that object.", "fol": "", "prediction": ["all x.((Object(x) & Kicked(x)) -> ForceExertedOn(x,y))"]}
{"id": "entailmentbank_train_2076", "nl": "a force is exerted on the soccer ball through the kick.", "fol": "", "prediction": ["all x y.((SoccerBall(x) & Kick(y)) -> ExertedForce(x,y))"]}
{"id": "entailmentbank_train_2077", "nl": "as force exerted on an object increases, distance travelled will increase.", "fol": "", "prediction": ["all x y.((ForceExerceeds(x) & Object(y)) -> DistanceThrought(x,y))"]}
{"id": "entailmentbank_train_2078", "nl": "the force of the kick can affect the distance travelled by the soccer ball.", "fol": "", "prediction": ["all x y.((Kick(x) & SoccerBall(y)) -> CanAffectDistance(x,y))"]}
{"id": "entailmentbank_train_2079", "nl": "a lever is used for lifting / moving heavy objects.", "fol": "", "prediction": ["all x.(Lever(x) -> (UsedForLifting(x) & UsedForMovingHeavyObjects(x)))"]}
{"id": "entailmentbank_train_2080", "nl": "a lever can be used for lifting a heavy rock.", "fol": "", "prediction": ["all x y.((Lever(x) & HeavyRock(y)) -> CanBeUsedForLifting(x,y))"]}
{"id": "entailmentbank_train_2081", "nl": "a pulley is a kind of simple machine.", "fol": "", "prediction": ["all x.(Pulley(x) -> SimpleMachine(x))"]}
{"id": "entailmentbank_train_2082", "nl": "a pulley is used to lift a flag on a flagpole.", "fol": "", "prediction": ["all x y.((Pulley(x) & Flag(y)) -> LiftsOnFlagpole(x,y))"]}
{"id": "entailmentbank_train_2083", "nl": "a pulley is a kind of simple machine that can be used to lift a flag on a flagpole.", "fol": "", "prediction": ["all x.(Pulley(x) -> (SimpleMachine(x) & LiftsFlag(x) & OnFlagpole(x)))"]}
{"id": "entailmentbank_train_2084", "nl": "an inclined plane decreases the force required to move an object to a different altitude.", "fol": "", "prediction": ["all x y.((Individual(x) & Plane(y)) -> DecreasesForceRequiredToMove(x,y))"]}
{"id": "entailmentbank_train_2085", "nl": "an inclined plane increases the distance over which an object travels.", "fol": "", "prediction": ["all x y.((IndividualPlanet(x) & Object(y)) -> IncreasesDistanceOver(x,y))"]}
{"id": "entailmentbank_train_2086", "nl": "an inclined plane increases the distance the object travels and decrease the force needed to move the object.", "fol": "", "prediction": ["all x.(Individual(x) -> (IncreasesDistance(x) & DecreasesForce(x)))"]}
{"id": "entailmentbank_train_2087", "nl": "race is when vehicles / humans compete in speed.", "fol": "", "prediction": ["all x.(Race(x) -> (CompeteInSpeed(x) & Vehicles(x) & Humans(x)))"]}
{"id": "entailmentbank_train_2088", "nl": "speed is a measure of distance travelled by an object divided by time.", "fol": "", "prediction": ["all x.(Speed(x) -> (MeasuresDistance(x) & Object(x) & DividedByTime(x)))"]}
{"id": "entailmentbank_train_2089", "nl": "the speed of the race is measured by dividing the distance travelled by time.", "fol": "", "prediction": ["all x y.((Race(x) & Distance(y) & Time(y)) -> MeasuredSpeed(x,y))"]}
{"id": "entailmentbank_train_2090", "nl": "unbalanced force causes objects to move.", "fol": "", "prediction": ["all x.(UnbalancedForce(x) -> CausesObjectsToMove(x))"]}
{"id": "entailmentbank_train_2091", "nl": "a book on the table starts to move horizontally.", "fol": "", "prediction": ["all x.((Book(x) & OnTable(x)) -> MovesHorizonally(x))"]}
{"id": "entailmentbank_train_2092", "nl": "an unbalanced force is applied on the book.", "fol": "", "prediction": ["all x y.((Book(x) & UnbalancedForce(y)) -> AppliesOn(x,y))"]}
{"id": "entailmentbank_train_2093", "nl": "insects have been on earth for 400000000 years.", "fol": "", "prediction": ["all x.(Insect(x) -> OnEarthFor400000000Years(x))"]}
{"id": "entailmentbank_train_2094", "nl": "humans have been on earth for 300000 years.", "fol": "", "prediction": ["all x.(Human(x) -> OnEarthFor300000Years(x))"]}
{"id": "entailmentbank_train_2095", "nl": "fish have been on earth for 419000000 years.", "fol": "", "prediction": ["all x.(Fish(x) -> OnEarthFor419000000Years(x))"]}
{"id": "entailmentbank_train_2096", "nl": "reptiles have been on earth for 370000000 years.", "fol": "", "prediction": ["all x.(Reptile(x) -> OnEarthFor370000000Years(x))"]}
{"id": "entailmentbank_train_2097", "nl": "humans have been on earth for the shortest amount of time among insects, reptiles, and fish.", "fol": "", "prediction": ["all x.(Human(x) -> (ShortestTimeOnEarth(x) & InsectsReptilesFish(x)))"]}
{"id": "entailmentbank_train_2098", "nl": "mammals give birth to live young.", "fol": "", "prediction": ["all x.(Mammal(x) -> GivesBirthToLiveYoung(x))"]}
{"id": "entailmentbank_train_2099", "nl": "monkeys give birth to live young.", "fol": "", "prediction": ["all x.(Mammal(x) -> GivesBirthToLiveYoung(x))"]}
{"id": "entailmentbank_train_2100", "nl": "a monkey is a kind of mammal.", "fol": "", "prediction": ["all x.(Monkey(x) -> Mammal(x))"]}
{"id": "entailmentbank_train_2101", "nl": "bats give birth to live young.", "fol": "", "prediction": ["all x.(Bat(x) -> GivesBirthToLiveYoung(x))"]}
{"id": "entailmentbank_train_2102", "nl": "a bat is a kind of mammal.", "fol": "", "prediction": ["all x.(Bat(x) -> Mammal(x))"]}
{"id": "entailmentbank_train_2103", "nl": "mice give birth to live young.", "fol": "", "prediction": ["all x.(Mouse(x) -> GivesBirthToLiveYoung(x))"]}
{"id": "entailmentbank_train_2104", "nl": "a mouse is a kind of mammal.", "fol": "", "prediction": ["all x.(Mouse(x) -> Mammal(x))"]}
{"id": "entailmentbank_train_2105", "nl": "mouse, monkey, and bat are all mammals.", "fol": "", "prediction": ["(Mammal(mouse) & Mammal(mouse) & Mammal(mouse) & Mammal(mouse) & Mammal(mouse) & Mammal(mouse) & Mammal(mouse) & Mammal(mouse) & Mammal(mouse) & Mammal(mouse) & Mammal(mouse) & Mammal(mouse(mouse(mouse(mouse(mouse(mouse(mouse(mouse(mouse(mouse(mouse(mouse(mouse(mouse(mouse(mouse(mouse(mouse(mouse(mouse(mouse(mouse(mouse(mouse(mouse(mouse(mouse(mouse(mouse(mouse(mouse(mouse) & mouse) & mouse) & mouse) & mouse) & mouse) & mouse) & mouse) & mouse) & mouse) & mouse) & mouse) & mouse) & mouse) & mouse)"]}
{"id": "entailmentbank_train_2106", "nl": "trout is a kind of fish.", "fol": "", "prediction": ["all x.(Trout(x) -> Fish(x))"]}
{"id": "entailmentbank_train_2107", "nl": "gills are a part of trout.", "fol": "", "prediction": ["all x.(Gills(x) -> TroutPart(x))"]}
{"id": "entailmentbank_train_2108", "nl": "gills are a part of a fish.", "fol": "", "prediction": ["all x.(Gills(x) -> PartOfFish(x))"]}
{"id": "entailmentbank_train_2109", "nl": "different kinds of trees keep or lose their leaves at different rates.", "fol": "", "prediction": ["all x.(Tree(x) -> (KeepsLeaves(x) | LosesLeaves(x)))"]}
{"id": "entailmentbank_train_2110", "nl": "the rate at which trees keep or lose their leaves is a characteristic of trees.", "fol": "", "prediction": ["all x.((Tree(x) & (KeepsLeaves(x) | LosesLeaves(x))) -> CharacteristicOfTrees(x))"]}
{"id": "entailmentbank_train_2111", "nl": "the rate at which trees keep or lose their leaves is a characteristic of trees that is different for different kinds of trees.", "fol": "", "prediction": ["all x.((Tree(x) & (KeepsLeaves(x) | LosesLeaves(x))) -> DifferentForDifferentTrees(x))"]}
{"id": "entailmentbank_train_2112", "nl": "a characteristic of something that is different for different kinds of that something is a distinct characteristic of that something.", "fol": "", "prediction": ["all x y.((Characteristic(x) & Something(y) & DifferentForDifferentTypes(x,y)) -> DistinctCharacteristic(x,y))"]}
{"id": "entailmentbank_train_2113", "nl": "that rate at which a kind of tree keeps or loses its leaves is a distinct characteristic of that kind of tree.", "fol": "", "prediction": ["all x.((RateAt(x) & Tree(x) & KeepsLeaves(x) & Tree(x) & Tree(x) & Tree(x)) -> DistinctCharacteristic(x))"]}
{"id": "entailmentbank_train_2114", "nl": "the rate at which a tree loses its leaves is used to catergorize trees.", "fol": "", "prediction": ["all x.((Tree(x) & LosesLeaves(x)) -> CatergorizesTrees(x))"]}
{"id": "entailmentbank_train_2115", "nl": "distinct characteristics of trees are used to catergorize trees.", "fol": "", "prediction": ["all x.(Tree(x) -> Catergorizes(x))"]}
{"id": "entailmentbank_train_2116", "nl": "the kind of fruit produced by trees is a chracteristic of trees.", "fol": "", "prediction": ["all x.((Fruit(x) & ProducedByTrees(x)) -> ChracteristicOfTrees(x))"]}
{"id": "entailmentbank_train_2117", "nl": "different kinds of trees produce different types of fruit.", "fol": "", "prediction": ["all x.(Tree(x) -> ProducesDifferentFruit(x))"]}
{"id": "entailmentbank_train_2118", "nl": "the type of fruit a kind of tree produces is a distinct characteristic of that kind of tree.", "fol": "", "prediction": ["all x.((Fruit(x) & Tree(x)) -> DistinctCharacteristicOf(x,y))"]}
{"id": "entailmentbank_train_2119", "nl": "the type of fruit a tree produces can be used to catergorize trees.", "fol": "", "prediction": ["all x.((Tree(x) & ProducesFruit(x)) -> CatergorizesTrees(x))"]}
{"id": "entailmentbank_train_2120", "nl": "fungi have no chlorophyll.", "fol": "", "prediction": ["all x.(Fungus(x) -> -Chlorophyll(x))"]}
{"id": "entailmentbank_train_2121", "nl": "fungi can be multicellular.", "fol": "", "prediction": ["all x.(Fungus(x) -> Multicellular(x))"]}
{"id": "entailmentbank_train_2122", "nl": "fungi have no chlorophyll and fungi can be multicellular.", "fol": "", "prediction": ["all x.(Fungus(x) -> (-Chlorophyll(x) & Multicellular(x)))"]}
{"id": "entailmentbank_train_2123", "nl": "fungi absorb nutrients from decaying tissue.", "fol": "", "prediction": ["all x.(Fungus(x) -> AbsorbNutrientsFromDecayingTissue(x))"]}
{"id": "entailmentbank_train_2124", "nl": "fungi have no chlorophyll and fungi can be multicellular and fungi absorb nutrients from decaying tissue.", "fol": "", "prediction": ["all x y.((Fungus(x) & -Chlorophyll(x)) -> (Multicellular(x) & AbsorbNutrientsFromDecayingTissue(y)))"]}
{"id": "entailmentbank_train_2125", "nl": "a fungus is a kind of organism.", "fol": "", "prediction": ["all x.(Fungus(x) -> Organism(x))"]}
{"id": "entailmentbank_train_2126", "nl": "fungi are organisms that have no chlorophyll, can be multicellular, and absorb nutrients from decaying tissue.", "fol": "", "prediction": ["all x.(Fungus(x) -> (Organism(x) & -Chlorophyll(x) & Multicellular(x) & AbsorbNutrientsFromDecayingTissue(x)))"]}
{"id": "entailmentbank_train_2127", "nl": "fungi are part of the biological kingdom fungi.", "fol": "", "prediction": ["all x.(Fungus(x) -> PartOfBiologicalKingdom(x))"]}
{"id": "entailmentbank_train_2128", "nl": "the biological kingdom fungi contains organisms that have no chlorophyll, can be multicellular, and absorb nutrients from decaying tissue.", "fol": "", "prediction": ["all x.(Fungus(x) -> (ContainsOrganisms(x) & -HasChlorophyll(x) & Multicellular(x) & AbsorbNutrientsFromDecayingTissue(x)))"]}
{"id": "entailmentbank_train_2129", "nl": "a whale is a kind of mammal.", "fol": "", "prediction": ["all x.(Whale(x) -> Mammal(x))"]}
{"id": "entailmentbank_train_2130", "nl": "a cat is a kind of mammal.", "fol": "", "prediction": ["all x.(Cat(x) -> Mammal(x))"]}
{"id": "entailmentbank_train_2131", "nl": "a cat and a whale are both mammals.", "fol": "", "prediction": ["all x.((Cat(x) & Whale(x)) -> Mammal(x))"]}
{"id": "entailmentbank_train_2132", "nl": "mammal is a kind of class of animal.", "fol": "", "prediction": ["all x.(Mammal(x) -> Animal(x))"]}
{"id": "entailmentbank_train_2133", "nl": "a cat and a whale are part of the same class of animals.", "fol": "", "prediction": ["all x y.((Cat(x) & Whale(y)) -> SameClassOfAnimals(x,y))"]}
{"id": "entailmentbank_train_2134", "nl": "living things in the same class are more closely related than living things in different classes.", "fol": "", "prediction": ["all x y.((LivingThing(x) & Class(y) & Class(y)) -> MoreNeighborlyRelated(x,y))"]}
{"id": "entailmentbank_train_2135", "nl": "a cat is more closely related to a whale than to animals of a different class.", "fol": "", "prediction": ["all x y.((Cat(x) & Whale(y)) -> (FruitlyRelatedTo(x,y) & -RelatedTo(x,y)))"]}
{"id": "entailmentbank_train_2136", "nl": "if two things have the same features then those two things are alike.", "fol": "", "prediction": ["all x.((TwoThings(x) & SameFeatures(x)) -> Similar(x))"]}
{"id": "entailmentbank_train_2137", "nl": "the opposite of same / alike is different.", "fol": "", "prediction": ["all x.((OppositeOfSame(x) & OppositeOfAsymetric(x)) -> Different(x))"]}
{"id": "entailmentbank_train_2138", "nl": "if two things have different features then those two things are different.", "fol": "", "prediction": ["all x.((TwoThings(x) & DifferentFeatures(x)) -> DifferentFeatures(x))"]}
{"id": "entailmentbank_train_2139", "nl": "if things can be identified as different because of something then they are distinguishable by that something.", "fol": "", "prediction": ["all x.((Thing(x) & Different(x)) -> DistinctableBy(x,y))"]}
{"id": "entailmentbank_train_2140", "nl": "things are distinguishable by their features.", "fol": "", "prediction": ["all x.((Thing(x) & DistinctByFeatures(x)) -> Distinct(x))"]}
{"id": "entailmentbank_train_2141", "nl": "a mammal is a kind of animal.", "fol": "", "prediction": ["all x.(Mammal(x) -> Animal(x))"]}
{"id": "entailmentbank_train_2142", "nl": "a bird and a mammal are both kinds of animals.", "fol": "", "prediction": ["all x.((Bird(x) & Mammal(x)) -> Animal(x))"]}
{"id": "entailmentbank_train_2143", "nl": "a bird and a mammal are both kinds of things.", "fol": "", "prediction": ["all x.((Bird(x) & Mammal(x)) -> (BothTypesOfThings(x) & -BothTypesOfThings(x)))"]}
{"id": "entailmentbank_train_2144", "nl": "mammals and birds are distinguishable by their features.", "fol": "", "prediction": ["all x.((Mammal(x) | Bird(x)) -> DistinctByFeatures(x))"]}
{"id": "entailmentbank_train_2145", "nl": "fur is usually part of a mammal.", "fol": "", "prediction": ["all x.(Fur(x) -> PartOfMammal(x))"]}
{"id": "entailmentbank_train_2146", "nl": "feathers are a part of a bird.", "fol": "", "prediction": ["all x.(Feather(x) -> PartOfBird(x))"]}
{"id": "entailmentbank_train_2147", "nl": "fur is a part of mammals and feathers are a part of birds.", "fol": "", "prediction": ["all x y.((Fur(x) & Feather(y)) -> (PartOfMammals(x) & PartOfBirds(y)))"]}
{"id": "entailmentbank_train_2148", "nl": "the parts of an object are features of that object.", "fol": "", "prediction": ["all x y.((Part(x) & Object(y)) -> FeaturesOf(x,y))"]}
{"id": "entailmentbank_train_2149", "nl": "fur is a feature of mammals and feathers are a feature of birds.", "fol": "", "prediction": ["all x y.((Fur(x) & Bird(y)) -> (FeatureOfMammals(x) & FeaturesOfFeathers(x)))"]}
{"id": "entailmentbank_train_2150", "nl": "fur can be used to distinguish mammals from birds.", "fol": "", "prediction": ["all x y.((Fur(x) & Mammal(y)) -> DistinctFromBird(x,y))"]}
{"id": "entailmentbank_train_2151", "nl": "a plant cell contains a nucleus.", "fol": "", "prediction": ["all x.(PlantCell(x) -> ContainsNucleus(x))"]}
{"id": "entailmentbank_train_2152", "nl": "a plant cell contains chloroplasts.", "fol": "", "prediction": ["all x.((PlantCell(x) & ContainsChlorophylls(x)) -> ContainsClorophylls(x))"]}
{"id": "entailmentbank_train_2153", "nl": "plant cells contain a nucleus and chloroplasts.", "fol": "", "prediction": ["all x.(PlantCell(x) -> (ContainsNucleus(x) & ContainsChlorophylls(x)))"]}
{"id": "entailmentbank_train_2154", "nl": "a cell wall is the outermost structure of a plant cell.", "fol": "", "prediction": ["all x y.((CellWall(x) & PlantCell(y)) -> OutermostStructure(x,y))"]}
{"id": "entailmentbank_train_2155", "nl": "plant cells contain a nucleus and chloroplasts and a cell wall.", "fol": "", "prediction": ["all x.(PlantCell(x) -> (ContainsNucleus(x) & ContainsChlorophylls(x) & ContainsCellWall(x)))"]}
{"id": "entailmentbank_train_2156", "nl": "plants are made up of plant cells.", "fol": "", "prediction": ["all x.(Plant(x) -> MadeUpOfPlantCells(x))"]}
{"id": "entailmentbank_train_2157", "nl": "plants are made up of cells that contain a nucleus and chloroplasts and a cell wall.", "fol": "", "prediction": ["all x.(Plant(x) -> (ContainsNucleus(x) & ContainsChlorophylls(x) & ContainsCellWall(x)))"]}
{"id": "entailmentbank_train_2158", "nl": "plants are part of the bilogical kingdom plantae.", "fol": "", "prediction": ["all x.(Plant(x) -> PartOfBilogicalKingdomPlantae(x))"]}
{"id": "entailmentbank_train_2159", "nl": "organisms in the biological kingdom plantae are made up of cells that contain a nucleus and chloroplasts and a cell wall.", "fol": "", "prediction": ["all x.((Organism(x) & InBiologicalKingdomPlantae(x)) -> (ContainsNucleus(x) & ContainsChlorophylls(x) & ContainsCellWall(x)))"]}
{"id": "entailmentbank_train_2160", "nl": "if an organism is made up of cells that contain a nucleus, chloroplasts, and a cell wall.", "fol": "", "prediction": ["all x.((Organism(x) & MadeUpOfCells(x) & Nucleus(x) & Chlorophylls(x) & CellWall(x)) -> MadeUpOfCells(x))"]}
{"id": "entailmentbank_train_2161", "nl": "that organism is a part of the biological kingdom plantae.", "fol": "", "prediction": ["all x.(Organism(x) -> PartOfBiologicalKingdomPlantae(x))"]}
{"id": "entailmentbank_train_2162", "nl": "a fungus is a kind of eukaryote.", "fol": "", "prediction": ["all x.(Fungus(x) -> Eukaryote(x))"]}
{"id": "entailmentbank_train_2163", "nl": "fungi are eukaryotes that obtain nutrients by absorption.", "fol": "", "prediction": ["all x.(Fungus(x) -> (Eukaryote(x) & ObtainsNutrientsByAbsorption(x)))"]}
{"id": "entailmentbank_train_2164", "nl": "plants are a kind of eukaryote.", "fol": "", "prediction": ["all x.(Plant(x) -> Eukaryote(x))"]}
{"id": "entailmentbank_train_2165", "nl": "animals are a kind of eukaryote.", "fol": "", "prediction": ["all x.(Animal(x) -> Eukaryote(x))"]}
{"id": "entailmentbank_train_2166", "nl": "plants and animals are both eukaryotes.", "fol": "", "prediction": ["all x.((Plant(x) | Animal(x)) -> Eukaryote(x))"]}
{"id": "entailmentbank_train_2167", "nl": "if two things are both something else, then they are different kinds of that something else.", "fol": "", "prediction": ["all x.((TwoThings(x) & SomethingOther(x)) -> DifferentTypesOf(x,y))"]}
{"id": "entailmentbank_train_2168", "nl": "plants and animals are different kinds of eukaryotes.", "fol": "", "prediction": ["all x.((Plant(x) | Animal(x)) -> Eukaryote(x))"]}
{"id": "entailmentbank_train_2169", "nl": "animals obtain nutrients through the method of consumption.", "fol": "", "prediction": ["all x.(Animal(x) -> (ObtainsNutrients(x) & Consumes(x)))"]}
{"id": "entailmentbank_train_2170", "nl": "plants obtain nutrients through the method of photosynthesis.", "fol": "", "prediction": ["all x.(Plant(x) -> (ObtainsNutrients(x) & Photosynthesis(x)))"]}
{"id": "entailmentbank_train_2171", "nl": "plants and animals use different methods to obtain nutrients.", "fol": "", "prediction": ["all x y.((Plant(x) & Animal(y)) -> (UsesMethod(x,y) & UsesMethod(x,y)))"]}
{"id": "entailmentbank_train_2172", "nl": "different kinds of eukaryotes use different methods for obtaining nutrients.", "fol": "", "prediction": ["all x.(Eukaryote(x) -> UsesDifferentMethodsForNutrients(x))"]}
{"id": "entailmentbank_train_2173", "nl": "different kinds of eukaryotes are distinguishable by how they obtain nutrients.", "fol": "", "prediction": ["all x.(Eukaryote(x) -> DistinctByNutrients(x))"]}
{"id": "entailmentbank_train_2174", "nl": "fungi are distinguishable from other eukaryotes because they obtain nutrients by absorption.", "fol": "", "prediction": ["all x y.((Fungus(x) & Eukaryote(y)) -> Distinct(x,y))"]}
{"id": "entailmentbank_train_2175", "nl": "organisms from the biological kingdom fungi are distinguishable from othr eukaryotes because they obtain nutrients through absorption.", "fol": "", "prediction": ["all x y.((Organism(x) & Fungus(y) & OthrEukaryote(x)) -> DistinctFrom(x,y))"]}
{"id": "entailmentbank_train_2176", "nl": "an invertebrate organism does not have an internal skeleton.", "fol": "", "prediction": ["all x.(InvertebrateOrganism(x) -> -HasInternalSkeleton(x))"]}
{"id": "entailmentbank_train_2177", "nl": "an earthworm does not have an internal skeleton.", "fol": "", "prediction": ["all x.(Earthworm(x) -> -InternalSkeleton(x))"]}
{"id": "entailmentbank_train_2178", "nl": "an earthworm is a kind of invertebrate organism.", "fol": "", "prediction": ["all x.(Earthworm(x) -> InvertebrateOrganism(x))"]}
{"id": "entailmentbank_train_2179", "nl": "non-mammals do not nurse their offspring.", "fol": "", "prediction": ["all x.(NonMammal(x) -> -NurseOffspring(x))"]}
{"id": "entailmentbank_train_2180", "nl": "a mammal usually nurses its offspring.", "fol": "", "prediction": ["all x.(Mammal(x) -> NursesOffspring(x))"]}
{"id": "entailmentbank_train_2181", "nl": "only mammals nurse their offspring.", "fol": "", "prediction": ["all x.(Mammal(x) -> NursesOffspring(x))"]}
{"id": "entailmentbank_train_2182", "nl": "milk is generally only used for nursing offspring.", "fol": "", "prediction": ["all x.(Milk(x) -> NursingOffspring(x))"]}
{"id": "entailmentbank_train_2183", "nl": "glands that make milk are only used for making milk.", "fol": "", "prediction": ["all x.((Glands(x) & MakesMilk(x)) -> MadeForMilk(x))"]}
{"id": "entailmentbank_train_2184", "nl": "glands that make milk are only useful for nursing offspring.", "fol": "", "prediction": ["all x.((Glands(x) & MakesMilk(x)) -> NursingOffspring(x))"]}
{"id": "entailmentbank_train_2185", "nl": "glands that make milk are parts of only a mammal.", "fol": "", "prediction": ["all x.((Glands(x) & MakesMilk(x)) -> PartOfMammal(x))"]}
{"id": "entailmentbank_train_2186", "nl": "an animal is a kind of eukaryote.", "fol": "", "prediction": ["all x.(Animal(x) -> Eukaryote(x))"]}
{"id": "entailmentbank_train_2187", "nl": "animals are a part of the biological kingdom animalia.", "fol": "", "prediction": ["all x.(Animal(x) -> PartOfBiologicalKingdom(x,animal))"]}
{"id": "entailmentbank_train_2188", "nl": "the organisms in the kingdom animalia are eukaryotes.", "fol": "", "prediction": ["all x.((Organism(x) & KingdomAnimalia(x)) -> Eukaryote(x))"]}
{"id": "entailmentbank_train_2189", "nl": "eukaryotes are a part of the biological domain eukaryota.", "fol": "", "prediction": ["all x.(Eukaryote(x) -> PartOfBiologicalDomainEukaryota(x))"]}
{"id": "entailmentbank_train_2190", "nl": "the organisms in the kingdom animalia belong to the domain eukaryota.", "fol": "", "prediction": ["all x.((Organism(x) & KingdomAnimalia(x)) -> BelongsToDomainEukaryota(x))"]}
{"id": "entailmentbank_train_2191", "nl": "an odd number of toes is a property of rhinoceroses.", "fol": "", "prediction": ["all x.(OddToes(x) -> Rhinocerose(x))"]}
{"id": "entailmentbank_train_2192", "nl": "an odd number of toes is a property of horses.", "fol": "", "prediction": ["all x.(OddToes(x) -> HorseProperty(x))"]}
{"id": "entailmentbank_train_2193", "nl": "horses and rhinoceroses both have an odd number of toes.", "fol": "", "prediction": ["all x y.((Horse(x) & Rhinocerose(y)) -> OddToeNumber(x,y))"]}
{"id": "entailmentbank_train_2194", "nl": "number of toes is a property of bone structure.", "fol": "", "prediction": ["all x.(ToeNumber(x) -> BoneStructure(x))"]}
{"id": "entailmentbank_train_2195", "nl": "rhinoceroses and horses have a similar bone structure.", "fol": "", "prediction": ["all x y.((Rhinocerose(x) & Horse(y)) -> SimilarBoneStructure(x,y))"]}
{"id": "entailmentbank_train_2196", "nl": "if two species of animal have a similar bone structure then those two species probably evolved from a common ancestor in recent geological history.", "fol": "", "prediction": ["all x y.((AnimalSpecies(x) & AnimalSpecies(y) & SimilarBoneStructure(x,y)) -> EvolvedFromCommonAncestor(x,y))"]}
{"id": "entailmentbank_train_2197", "nl": "the bone structure of rhinoceroses and horses indicate that they might have evolved from a common ancestor.", "fol": "", "prediction": ["all x y.((Rhinocerose(x) & Horse(y)) -> (EvolvedFromCommonAncestor(x,y)))"]}
{"id": "entailmentbank_train_2198", "nl": "rhinoceroses and horses have similar digestive systems.", "fol": "", "prediction": ["all x y.((Rhinocerose(x) & Horse(y)) -> SimilarDigestiveSystem(x,y))"]}
{"id": "entailmentbank_train_2199", "nl": "type of digestive system is a kind of characteristic.", "fol": "", "prediction": ["all x.(DigestiveSystem(x) -> Characteristic(x))"]}
{"id": "entailmentbank_train_2200", "nl": "rhinoceroses and horses have  similar characteristics.", "fol": "", "prediction": ["all x y.((Rhinocerose(x) & Horse(y)) -> SimilarCharacteristics(x,y))"]}
{"id": "entailmentbank_train_2201", "nl": "if two or more organisms have similar characteristics then those organisms might share a common ancestor.", "fol": "", "prediction": ["all x.((Organism(x) & SimilarCharacteristics(x)) -> MightShareAncestor(x))"]}
{"id": "entailmentbank_train_2202", "nl": "the characteristics of rhinoceroses and horses indicate that they might share a common ancestor.", "fol": "", "prediction": ["all x y.((Rhinocerose(x) & Horse(y)) -> (IndicatesAncestor(x,y) & MightShareAncestor(x,y)))"]}
{"id": "entailmentbank_train_2203", "nl": "rhinoceroses and horses might share a common ancestor.", "fol": "", "prediction": ["all x y.((Rhinocerose(x) & Horse(y)) -> (ShareAncestor(x,y) | ShareAncestor(x,y)))"]}
{"id": "entailmentbank_train_2204", "nl": "young amphibians undergo metamorphosis.", "fol": "", "prediction": ["all x.((YearAmphibian(x) & UndergoesMetamorphosis(x)) -> Young(x))"]}
{"id": "entailmentbank_train_2205", "nl": "a frog is a kind of amphibian.", "fol": "", "prediction": ["all x.(Frog(x) -> Amphibian(x))"]}
{"id": "entailmentbank_train_2206", "nl": "frogs undergo metamorphosis.", "fol": "", "prediction": ["all x.(Frog(x) -> UndergoesMetamorphosis(x))"]}
{"id": "entailmentbank_train_2207", "nl": "birds sit in nests.", "fol": "", "prediction": ["all x.(Bird(x) -> SitsInNest(x))"]}
{"id": "entailmentbank_train_2208", "nl": "a nest contains eggs.", "fol": "", "prediction": ["all x.(Nest(x) -> ContainsEggs(x))"]}
{"id": "entailmentbank_train_2209", "nl": "birds sit on eggs.", "fol": "", "prediction": ["all x.(Bird(x) -> SitsOnEggs(x))"]}
{"id": "entailmentbank_train_2210", "nl": "sitting on something provides warmth to that something.", "fol": "", "prediction": ["all x y.((SittingOn(x,y) & Something(y)) -> ProvidesWarmth(x,y))"]}
{"id": "entailmentbank_train_2211", "nl": "a bird sitting on an egg provides warmth to that egg.", "fol": "", "prediction": ["all x y.((Bird(x) & Egg(y) & SitsOn(x,y)) -> ProvidesWarmth(x,y))"]}
{"id": "entailmentbank_train_2212", "nl": "an egg may contain a young animal.", "fol": "", "prediction": ["all x.(Egg(x) -> MayContainYoungAnimal(x))"]}
{"id": "entailmentbank_train_2213", "nl": "an animal requires warmth for survival.", "fol": "", "prediction": ["all x.(Animal(x) -> RequiresWarmthForSurvival(x))"]}
{"id": "entailmentbank_train_2214", "nl": "an egg requires warmth to survive.", "fol": "", "prediction": ["all x.(Egg(x) -> RequiresWarmth(x))"]}
{"id": "entailmentbank_train_2215", "nl": "a bird sits on an egg to provide it with warmth for survival.", "fol": "", "prediction": ["all x y.((Bird(x) & Egg(y)) -> SitsOnToProvidesWarmthForSurvival(x,y))"]}
{"id": "entailmentbank_train_2216", "nl": "an insect changed from an immature form to an adult form.", "fol": "", "prediction": ["all x.(Insect(x) -> (ChangedFromImmatureToAdult(x)))"]}
{"id": "entailmentbank_train_2217", "nl": "an insect is never a pupa.", "fol": "", "prediction": ["all x.(Insect(x) -> -Pupa(x))"]}
{"id": "entailmentbank_train_2218", "nl": "an insect has changed from an immature form to an adult form without being a pupa.", "fol": "", "prediction": ["all x.(Insect(x) -> (ChangedFromImmatureToAdult(x) & -Pupa(x)))"]}
{"id": "entailmentbank_train_2219", "nl": "metamorphosis is when an insect changes from an immature form to an adult form.", "fol": "", "prediction": ["all x.(Metamorphosis(x) -> (InsectChangesFromImmatureToAdult(x)))"]}
{"id": "entailmentbank_train_2220", "nl": "the pupa stage is a stage in the metamorphosis process of some animals.", "fol": "", "prediction": ["all x.(PupaStage(x) -> (MetamorphosisProcess(x) & exists y.(Animal(y) & MetamorphosisProcess(x,y))))"]}
{"id": "entailmentbank_train_2221", "nl": "incomplete metamorphosis is when an insect reaches the adult stage without being a pupa.", "fol": "", "prediction": ["all x.((Insect(x) & AdultStage(x) & -Pupa(x)) -> IncompleteMetamorphosis(x))"]}
{"id": "entailmentbank_train_2222", "nl": "the insect has undergone incomplete metamorphosis.", "fol": "", "prediction": ["all x.(Insect(x) -> IncompleteMetamorphosis(x))"]}
{"id": "entailmentbank_train_2223", "nl": "a caterpillar is kind of a young butterfly.", "fol": "", "prediction": ["all x.(Caterpillar(x) -> YoungButterfly(x))"]}
{"id": "entailmentbank_train_2224", "nl": "a butterfly is a kind of insect.", "fol": "", "prediction": ["all x.(Butterfly(x) -> Insect(x))"]}
{"id": "entailmentbank_train_2225", "nl": "a caterpillar is a kind of insect.", "fol": "", "prediction": ["all x.(Caterpillar(x) -> Insect(x))"]}
{"id": "entailmentbank_train_2226", "nl": "an example of metamorphosis is when a caterpillar changes from an immature form to an adult form.", "fol": "", "prediction": ["all x.(Metamorphosis(x) -> (CaterpillarChangesFromImmatureToAdult(x)))"]}
{"id": "entailmentbank_train_2227", "nl": "the adult form of a caterpillar is called a butterfly.", "fol": "", "prediction": ["all x.((Adult(x) & Caterpillar(x)) -> Butterfly(x))"]}
{"id": "entailmentbank_train_2228", "nl": "the immature form of a butterfly is called a caterpillar.", "fol": "", "prediction": ["all x.((Butterfly(x) & ImmatureForm(x)) -> Caterpillar(x))"]}
{"id": "entailmentbank_train_2229", "nl": "a caterpillar is the immature form of a butterfly and a butterfly is the adult form of a caterpillar.", "fol": "", "prediction": ["all x y.((Caterpillar(x) & Butterfly(y)) -> (ImmatureForm(x,y) & AdultForm(y,x)))"]}
{"id": "entailmentbank_train_2230", "nl": "an example of metamorphosis is a caterpillar cchanges from a caterpillar into a butterfly.", "fol": "", "prediction": ["all x y.((Caterpillar(x) & Butterfly(y)) -> CchangesFromCaterpillarToButterfly(x,y))"]}
{"id": "entailmentbank_train_2231", "nl": "metamorphosis is when a butterfly changes from an immature form to an adult form.", "fol": "", "prediction": ["all x.(Metamorphosis(x) -> (ButterflyChangesFromImmatureToAdult(x)))"]}
{"id": "entailmentbank_train_2232", "nl": "the adult form of a caterpillar is a butterfly and the immature form of a butterfly is a caterpillar.", "fol": "", "prediction": ["all x y.((Adult(x) & Immature(y)) -> (Caterpillar(x) & Butterfly(y)))"]}
{"id": "entailmentbank_train_2233", "nl": "metamorphosis is when a butterfly changes from caterpillar to a butterfly.", "fol": "", "prediction": ["all x.(Metamorphosis(x) -> (ButterflyChangesFromCaterpillarToButterfly(x)))"]}
{"id": "entailmentbank_train_2234", "nl": "larger means increased size.", "fol": "", "prediction": ["all x.(LargerMeansIncreasedSize(x) -> IncreasedSize(x))"]}
{"id": "entailmentbank_train_2235", "nl": "growth means size increases.", "fol": "", "prediction": ["all x.(Growth(x) -> SizeIncrease(x))"]}
{"id": "entailmentbank_train_2236", "nl": "things that grow become larger.", "fol": "", "prediction": ["all x.((Grows(x) & Things(x)) -> Larger(x))"]}
{"id": "entailmentbank_train_2237", "nl": "leaves undergo growth.", "fol": "", "prediction": ["all x.(Leaves(x) -> UndergoesGrowth(x))"]}
{"id": "entailmentbank_train_2238", "nl": "growth causes leaves to become larger.", "fol": "", "prediction": ["all x.(Growth(x) -> CausesLeavesToBecomeLarger(x))"]}
{"id": "entailmentbank_train_2239", "nl": "a human is a kind of organism.", "fol": "", "prediction": ["all x.(Human(x) -> Organism(x))"]}
{"id": "entailmentbank_train_2240", "nl": "an organism requires energy for growth and repair.", "fol": "", "prediction": ["all x.(Organism(x) -> RequiresEnergyForGrowthAndRepair(x))"]}
{"id": "entailmentbank_train_2241", "nl": "a human requires energy for growth and repair.", "fol": "", "prediction": ["all x.(Human(x) -> RequiresEnergyForGrowthAndRepair(x))"]}
{"id": "entailmentbank_train_2242", "nl": "food contains nutrients.", "fol": "", "prediction": ["all x.(Food(x) -> ContainsNutrients(x))"]}
{"id": "entailmentbank_train_2243", "nl": "nutrients are a source of energy for living things.", "fol": "", "prediction": ["all x.(Nutrient(x) -> SourceOfEnergyForLivingThings(x))"]}
{"id": "entailmentbank_train_2244", "nl": "food is a source of energy for living things.", "fol": "", "prediction": ["all x.(Food(x) -> SourceOfEnergyForLivingThings(x))"]}
{"id": "entailmentbank_train_2245", "nl": "a human is a kind of living thing.", "fol": "", "prediction": ["all x.(Human(x) -> LivingThing(x))"]}
{"id": "entailmentbank_train_2246", "nl": "food is a source of energy for humans.", "fol": "", "prediction": ["all x.(Food(x) -> SourceOfEnergy(x))"]}
{"id": "entailmentbank_train_2247", "nl": "humans require energy from food for growth and repair.", "fol": "", "prediction": ["all x.(Human(x) -> (RequiresEnergyFromFood(x) & ForGrowthAndRepair(x)))"]}
{"id": "entailmentbank_train_2248", "nl": "food contains nutrients for living things.", "fol": "", "prediction": ["all x.(Food(x) -> ContainsNutrientsForLivingThings(x))"]}
{"id": "entailmentbank_train_2249", "nl": "a living thing requires energy to grow and heal.", "fol": "", "prediction": ["all x.(LivingThing(x) -> RequiresEnergyToGrowAndHeal(x))"]}
{"id": "entailmentbank_train_2250", "nl": "a living thing requires food to get energy to grow and heal.", "fol": "", "prediction": ["all x.(LivingThing(x) -> RequiresFood(x))"]}
{"id": "entailmentbank_train_2251", "nl": "living things eat their food source.", "fol": "", "prediction": ["all x.(LivingThing(x) -> EatsFoodSource(x))"]}
{"id": "entailmentbank_train_2252", "nl": "eating food is used to get energy by living things.", "fol": "", "prediction": ["all x y.((EatingFood(x) & LivingThing(y)) -> GetsEnergy(x,y))"]}
{"id": "entailmentbank_train_2253", "nl": "the cones of a jack pine tree are serotinous cones.", "fol": "", "prediction": ["all x.((Cone(x) & JackPineTree(x)) -> SerotinousCone(x))"]}
{"id": "entailmentbank_train_2254", "nl": "serotinous cones require heat for seed dispersal.", "fol": "", "prediction": ["all x.(SerotinousCone(x) -> RequiresHeatForSeedDispersal(x))"]}
{"id": "entailmentbank_train_2255", "nl": "the cones of a jack pine tree require heat for seed dispersal.", "fol": "", "prediction": ["all x y.((Cone(x) & JackPineTree(y)) -> RequiresHeatForSeedDispersal(x,y))"]}
{"id": "entailmentbank_train_2256", "nl": "burning trees is used to produce heat.", "fol": "", "prediction": ["all x.(BoilingTrees(x) -> ProducesHeat(x))"]}
{"id": "entailmentbank_train_2257", "nl": "a forest contains many trees.", "fol": "", "prediction": ["all x.(Forest(x) -> ContainsManyTrees(x))"]}
{"id": "entailmentbank_train_2258", "nl": "burning a forest can produce great amounts of heat.", "fol": "", "prediction": ["all x y.((Field(x) & Burning(x,y)) -> ProducesGreatAmountsOfHeat(x))"]}
{"id": "entailmentbank_train_2259", "nl": "wildfire is when a forest catches fire.", "fol": "", "prediction": ["all x.(Wildfire(x) -> (ForestCatchFire(x)))"]}
{"id": "entailmentbank_train_2260", "nl": "a wildfire produces great amounts of heat.", "fol": "", "prediction": ["all x.(Wildfire(x) -> ProducesGreatAmountsOfHeat(x))"]}
{"id": "entailmentbank_train_2261", "nl": "a jack pine tree will disperse seeds after a wildfire.", "fol": "", "prediction": ["all x.((JackPineTree(x) & Wildfire(x)) -> DispersesSeeds(x))"]}
{"id": "entailmentbank_train_2262", "nl": "food is a source of energy for animals.", "fol": "", "prediction": ["all x.(Food(x) -> SourceOfEnergy(x))"]}
{"id": "entailmentbank_train_2263", "nl": "if something causes something else then the result of that something else indicate the properties of that something.", "fol": "", "prediction": ["all x y.((Causes(x,y) & Causes(x,y)) -> IndicatesProperties(x,y))"]}
{"id": "entailmentbank_train_2264", "nl": "as the amount of available water decreases, tree-growth rings will become narrower.", "fol": "", "prediction": ["all x.((AmountOfWaterDecreases(x) & TreeGrowthRingsNarrower(x)) -> AvailableWaterDecreases(x))"]}
{"id": "entailmentbank_train_2265", "nl": "the width of a tree-growth ring indicates the amount of available water.", "fol": "", "prediction": ["all x.((TreeGrowthRing(x) & Width(x)) -> IndicatesAmountOfWater(x))"]}
{"id": "entailmentbank_train_2266", "nl": "a tree growing a tree-growth ring occurs once per year.", "fol": "", "prediction": ["all x y.((Tree(x) & TreeGrowthRing(y)) -> OccursOncePerYear(x,y))"]}
{"id": "entailmentbank_train_2267", "nl": "the width of tree-growth rings indicate the amount of water available during the year they were formed.", "fol": "", "prediction": ["all x.((TreeGrowthRings(x) & Width(x)) -> WaterAvailableDuringYear(x))"]}
{"id": "entailmentbank_train_2268", "nl": "dry environments result in narrow tree-growth rings.", "fol": "", "prediction": ["all x.(DryEnvironment(x) -> NarrowTreeGrowthRings(x))"]}
{"id": "entailmentbank_train_2269", "nl": "a narrow tree-growth ring indicates a dry year.", "fol": "", "prediction": ["all x.((NarrowTreeGrowthRing(x) & DryYear(x)) -> Indicates(x))"]}
{"id": "entailmentbank_train_2270", "nl": "water is a kind of natural resource.", "fol": "", "prediction": ["all x.(Water(x) -> NaturalResource(x))"]}
{"id": "entailmentbank_train_2271", "nl": "living things require water for survival.", "fol": "", "prediction": ["all x.(LivingThing(x) -> RequiresWaterForSurvival(x))"]}
{"id": "entailmentbank_train_2272", "nl": "water is a kind of resource that living things require for survival.", "fol": "", "prediction": ["all x.(Water(x) -> RequiresForSurvival(x))"]}
{"id": "entailmentbank_train_2273", "nl": "when available resources decrease in an environment, organisms have to conserve those resources.", "fol": "", "prediction": ["all x y.((Organism(x) & Environment(y) & AvailableResourcesDecrease(x,y)) -> ConservesResources(x,y))"]}
{"id": "entailmentbank_train_2274", "nl": "when the availability of water decreases in an environment, living things in that environment must conserve water to survive.", "fol": "", "prediction": ["all x y.((WaterAvailabilityDecreases(x) & Environment(y)) -> MustConserveWater(x,y))"]}
{"id": "entailmentbank_train_2275", "nl": "a desert environment is a dry environment.", "fol": "", "prediction": ["all x.(DesertEnvironment(x) -> DryEnvironment(x))"]}
{"id": "entailmentbank_train_2276", "nl": "a dry environment is low in availability of water.", "fol": "", "prediction": ["all x.(DryEnvironment(x) -> LowWaterAvailability(x))"]}
{"id": "entailmentbank_train_2277", "nl": "a desert environment is low in availability of water.", "fol": "", "prediction": ["all x.(DesertEnvironment(x) -> LowAvailabilityOfWater(x))"]}
{"id": "entailmentbank_train_2278", "nl": "living things in a desert environment must conserve water to survive.", "fol": "", "prediction": ["all x.((LivingThing(x) & DesertEnvironment(x)) -> MustConserveWaterToSurvive(x))"]}
{"id": "entailmentbank_train_2279", "nl": "an animal being born when temperatures are warm has a positive impact on that animal's survival.", "fol": "", "prediction": ["all x.((Animal(x) & BornWhenTemperaturesWarm(x)) -> PositiveImpactOnSurvival(x))"]}
{"id": "entailmentbank_train_2280", "nl": "an animal being born when food is available has a positive impact on that animal's survival.", "fol": "", "prediction": ["all x y.((Animal(x) & BornWhenFoodIsAvailable(x) & FoodImpact(y)) -> PositiveImpactOnSurvival(x,y))"]}
{"id": "entailmentbank_train_2281", "nl": "an animal being born when food is available and temperatures are warm has a positive impact on that animal's survival.", "fol": "", "prediction": ["all x y.((Animal(x) & FoodAvailable(x) & TemperaturesWarm(x)) -> PositiveImpactOnSurvival(y))"]}
{"id": "entailmentbank_train_2282", "nl": "spring increases the amount of available food in an environment.", "fol": "", "prediction": ["all x y.((Spring(x) & Environment(y)) -> IncreasesAmountOfFood(x,y))"]}
{"id": "entailmentbank_train_2283", "nl": "spring has warm temperatures / weather.", "fol": "", "prediction": ["all x.(Spring(x) -> (WarmTemperatures(x) & WarmWeather(x)))"]}
{"id": "entailmentbank_train_2284", "nl": "spring has warm temperatures and an increased availability of food in an environment.", "fol": "", "prediction": ["all x.(Spring(x) -> (WarmTemperatures(x) & IncreasedFoodAvailability(x)))"]}
{"id": "entailmentbank_train_2285", "nl": "being born in the spring has a positive impact on an animal's survival.", "fol": "", "prediction": ["all x.((BirthInSpring(x) & PositiveImpactOnSurvival(x)) -> Animal(x))"]}
{"id": "entailmentbank_train_2286", "nl": "offspring are a kind of group of organisms.", "fol": "", "prediction": ["all x.(Offspring(x) -> Organism(x))"]}
{"id": "entailmentbank_train_2287", "nl": "as number of organisms in a group increases, the chance of survival of each organism will increase.", "fol": "", "prediction": ["all x y.((Organism(x) & Organism(y) & Increases(x,y)) -> ChanceOfSurvivalInGroup(x,y))"]}
{"id": "entailmentbank_train_2288", "nl": "as the number of offspring an animal has increases, the number of offspring surviving will increase.", "fol": "", "prediction": ["all x.((Animal(x) & NumberOfOffspring(x)) -> NumberOfOffspring(x))"]}
{"id": "entailmentbank_train_2289", "nl": "some animals have offspring by laying eggs.", "fol": "", "prediction": ["exists x.(Animal(x) & LaysEggs(x))"]}
{"id": "entailmentbank_train_2290", "nl": "as the number of eggs laid by an animal increases, the number of eggs that will hatch will increase.", "fol": "", "prediction": ["all x y.((Animal(x) & Egg(y) & IncreasedNumberOf(x,y)) -> IncreasedNumberOf(x,y))"]}
{"id": "entailmentbank_train_2291", "nl": "howling is a kind of sound.", "fol": "", "prediction": ["all x.(Howling(x) -> Sound(x))"]}
{"id": "entailmentbank_train_2292", "nl": "sound can be used for communication by animals.", "fol": "", "prediction": ["all x y.((Sound(x) & Animal(y)) -> CanBeUsedForCommunication(x,y))"]}
{"id": "entailmentbank_train_2293", "nl": "howling is used for communication by animals.", "fol": "", "prediction": ["all x.(Howling(x) -> UsedForCommunication(x))"]}
{"id": "entailmentbank_train_2294", "nl": "a wolf is a kind of animal.", "fol": "", "prediction": ["all x.(Wolf(x) -> Animal(x))"]}
{"id": "entailmentbank_train_2295", "nl": "howling can be used for communication by wolves.", "fol": "", "prediction": ["all x y.((Wolf(x) & Howling(y)) -> UsedForCommunication(x,y))"]}
{"id": "entailmentbank_train_2296", "nl": "warning is a kind of communication.", "fol": "", "prediction": ["all x.(Warning(x) -> Communication(x))"]}
{"id": "entailmentbank_train_2297", "nl": "howling is used to warn other wolves by wolves.", "fol": "", "prediction": ["all x y.((Wolf(x) & Wolf(y)) -> HowlsToWarn(x,y))"]}
{"id": "entailmentbank_train_2298", "nl": "animals usually keep away from danger or problems.", "fol": "", "prediction": ["all x.(Animal(x) -> (KeepsAwayFromDanger(x) | KeepsAwayFromProblems(x)))"]}
{"id": "entailmentbank_train_2299", "nl": "warning can be used to indicate danger or problems.", "fol": "", "prediction": ["all x.(Warning(x) -> (IndicatesDanger(x) | IndicatesProblems(x)))"]}
{"id": "entailmentbank_train_2300", "nl": "warning can be used to keep animals away.", "fol": "", "prediction": ["all x.(Warning(x) -> KeepsAnimalsAway(x))"]}
{"id": "entailmentbank_train_2301", "nl": "howling is used by wolves to keep other wolves away.", "fol": "", "prediction": ["all x y.((Wolf(x) & Wolf(y)) -> Howling(x,y))"]}
{"id": "entailmentbank_train_2302", "nl": "establishing a territory requires keeping other animals away.", "fol": "", "prediction": ["all x.((Territory(x) & KeepsAnimalsAway(x)) -> Establishes(x))"]}
{"id": "entailmentbank_train_2303", "nl": "howling is used by wolves to establish a territory.", "fol": "", "prediction": ["all x y.((Wolf(x) & Howling(y)) -> EstablishesTerritory(x,y))"]}
{"id": "entailmentbank_train_2304", "nl": "winter means environmental temperature decreases.", "fol": "", "prediction": ["all x.(Winter(x) -> EnvironmentalTemperatureDecreases(x))"]}
{"id": "entailmentbank_train_2305", "nl": "animals must move to a warmer environment in the winter.", "fol": "", "prediction": ["all x.((Animal(x) & Winter(x)) -> MovesToWarmerEnvironment(x))"]}
{"id": "entailmentbank_train_2306", "nl": "temperature is a property of the environment.", "fol": "", "prediction": ["all x.(Temperature(x) -> PropertyOfEnvironment(x))"]}
{"id": "entailmentbank_train_2307", "nl": "winter has cold temperatures.", "fol": "", "prediction": ["all x.(Winter(x) -> ColdTemperatures(x))"]}
{"id": "entailmentbank_train_2308", "nl": "winter means cold environmental temperature.", "fol": "", "prediction": ["all x.(Winter(x) -> ColdEnvironmentalTemperature(x))"]}
{"id": "entailmentbank_train_2309", "nl": "animals must move to a warmer environment during the winter.", "fol": "", "prediction": ["all x.((Animal(x) & WarmerEnvironment(x)) -> MovesDuringWinter(x))"]}
{"id": "entailmentbank_train_2310", "nl": "an instinctive behavior is a kind of behavioral adaptation.", "fol": "", "prediction": ["all x.(InstinctiveBehavior(x) -> BehavioralAdaptation(x))"]}
{"id": "entailmentbank_train_2311", "nl": "migrating is an instinctive behavior.", "fol": "", "prediction": ["all x.(Migrating(x) -> InstinctiveBehavior(x))"]}
{"id": "entailmentbank_train_2312", "nl": "migration is a kind of behavioral adaptation.", "fol": "", "prediction": ["all x.(Migration(x) -> BehavioralAdaptation(x))"]}
{"id": "entailmentbank_train_2313", "nl": "an environment is cold in the winter.", "fol": "", "prediction": ["all x.((Environment(x) & ColdInWinter(x)) -> ColdInWinter(x))"]}
{"id": "entailmentbank_train_2314", "nl": "cold environments usually have little food for animals.", "fol": "", "prediction": ["all x.(ColdEnvironment(x) -> HasLittleFood(x))"]}
{"id": "entailmentbank_train_2315", "nl": "an environment usually has little food for animals in the winter.", "fol": "", "prediction": ["all x.(Environment(x) -> (LittleFood(x) & ForAnimalsInWinter(x)))"]}
{"id": "entailmentbank_train_2316", "nl": "animals require food to survive.", "fol": "", "prediction": ["all x.(Animal(x) -> RequiresFood(x))"]}
{"id": "entailmentbank_train_2317", "nl": "animals must move to an environment with more food in the winter.", "fol": "", "prediction": ["all x.(Animal(x) -> MovesToEnvironmentWithMoreFoodInWinter(x))"]}
{"id": "entailmentbank_train_2318", "nl": "a warm environment usually has more food than a cold environment.", "fol": "", "prediction": ["all x y.((WarmEnvironment(x) & ColdEnvironment(y)) -> HasMoreFood(x,y))"]}
{"id": "entailmentbank_train_2319", "nl": "animals must move to a warmer environment during the winter to find food.", "fol": "", "prediction": ["all x y.((Animal(x) & Winter(y)) -> MovesToWarmerEnvironment(x,y))"]}
{"id": "entailmentbank_train_2320", "nl": "nest building is a kind of adaptation.", "fol": "", "prediction": ["all x.(NestBuilding(x) -> Adaptation(x))"]}
{"id": "entailmentbank_train_2321", "nl": "adaptation has a positive impact on the survival of a species.", "fol": "", "prediction": ["all x y.((Adaptation(x) & Species(y)) -> PositiveImpactOnSurvival(x,y))"]}
{"id": "entailmentbank_train_2322", "nl": "nest building has a positive impact on the survival of a species.", "fol": "", "prediction": ["all x y.((NestBuilding(x) & Species(y)) -> PositiveImpactOnSurvival(x,y))"]}
{"id": "entailmentbank_train_2323", "nl": "a nest is a kind of resource for a bird.", "fol": "", "prediction": ["all x y.((Nest(x) & Bird(y)) -> Resource(x,y))"]}
{"id": "entailmentbank_train_2324", "nl": "nest building has a positive impact on the survival of birds.", "fol": "", "prediction": ["all x.(NestBuilding(x) -> PositiveImpactOnSurvivalOfBirds(x))"]}
{"id": "entailmentbank_train_2325", "nl": "young animals are born as a result of reproduction.", "fol": "", "prediction": ["all x.((YoungAnimal(x) & Reproduction(x)) -> Born(x))"]}
{"id": "entailmentbank_train_2326", "nl": "many birds reproduce during spring.", "fol": "", "prediction": ["all x.(Bird(x) -> ReproducesDuringSpring(x))"]}
{"id": "entailmentbank_train_2327", "nl": "many young birds are born during spring.", "fol": "", "prediction": ["all x.((Bird(x) & BornDuringSpring(x)) -> Young(x))"]}
{"id": "entailmentbank_train_2328", "nl": "birds build nests in the spring.", "fol": "", "prediction": ["all x.(Bird(x) -> BuildsNestsInSpring(x))"]}
{"id": "entailmentbank_train_2329", "nl": "birds build nests when many young birds are born.", "fol": "", "prediction": ["all x.((Bird(x) & ManyYoungBirds(x)) -> BuildsNests(x))"]}
{"id": "entailmentbank_train_2330", "nl": "a nest is used for protecting young by birds.", "fol": "", "prediction": ["all x y.((Nest(x) & Bird(y)) -> ProtectsYoung(x,y))"]}
{"id": "entailmentbank_train_2331", "nl": "birds build nests to protect young birds.", "fol": "", "prediction": ["all x y.((Bird(x) & Nest(y)) -> BuildsToProtectYoungBirds(x,y))"]}
{"id": "entailmentbank_train_2332", "nl": "nest building has a positive impact on the survival of birds by protecting young birds.", "fol": "", "prediction": ["all x.(NestBuilding(x) -> (ProtectsYoungBirds(x) & PositiveImpactOnSurvival(x)))"]}
{"id": "entailmentbank_train_2333", "nl": "an instinctive behavior is a kind of inherited characteristic.", "fol": "", "prediction": ["all x.(InstinctiveBehavior(x) -> ErasedCharacteristic(x))"]}
{"id": "entailmentbank_train_2334", "nl": "a behavior is a kind of characteristic.", "fol": "", "prediction": ["all x.(Behavior(x) -> Characteristic(x))"]}
{"id": "entailmentbank_train_2335", "nl": "an instinctive behavior is a kind of inherited behavior.", "fol": "", "prediction": ["all x.(InstinctiveBehavior(x) -> ErasedBehavior(x))"]}
{"id": "entailmentbank_train_2336", "nl": "an example of an inherited behavior is a bird building a nest.", "fol": "", "prediction": ["all x.((Bird(x) & BuildingNest(x)) -> ErasedBehavior(x))"]}
{"id": "entailmentbank_train_2337", "nl": "an example of an instinctive behavior is a bird building a nest.", "fol": "", "prediction": ["all x.(InstinctiveBehavior(x) -> (BirdBuildingNest(x)))"]}
{"id": "entailmentbank_train_2338", "nl": "an example of an behavioral adaptation is a bird building a nest.", "fol": "", "prediction": ["all x.(BehavioralAdaptation(x) -> (BirdBuildingNest(x)))"]}
{"id": "entailmentbank_train_2339", "nl": "a volcano changes the environment around it by covering the environment in ash.", "fol": "", "prediction": ["all x.(Volcano(x) -> (ChangesEnvironmentAround(x) & CoversEnvironmentInAsh(x)))"]}
{"id": "entailmentbank_train_2340", "nl": "ash from a volcano is warm in temperature.", "fol": "", "prediction": ["all x.((Ash(x) & Volcano(x)) -> WarmTemperature(x))"]}
{"id": "entailmentbank_train_2341", "nl": "a volcano changes the environment around it by covering the environment in warm ash.", "fol": "", "prediction": ["all x.(Volcano(x) -> ChangesEnvironmentAround(x))"]}
{"id": "entailmentbank_train_2342", "nl": "something that animals require has a positive impact on that animal's survival.", "fol": "", "prediction": ["all x.((Animal(x) & Requires(x)) -> PositiveImpactOnSurvival(x))"]}
{"id": "entailmentbank_train_2343", "nl": "animals require warmth for survival.", "fol": "", "prediction": ["all x.(Animal(x) -> RequiresWarmthForSurvival(x))"]}
{"id": "entailmentbank_train_2344", "nl": "warmth has a positive impact on an animal's survival.", "fol": "", "prediction": ["all x y.((Animal(x) & Warmth(y)) -> PositiveImpactOnSurvival(x,y))"]}
{"id": "entailmentbank_train_2345", "nl": "living in the warm ash from a volcano can have a positive impact on an animal's survival.", "fol": "", "prediction": ["all x y.((WarmAsh(x) & Volcano(y)) -> PositiveImpactOnSurvival(x,y))"]}
{"id": "entailmentbank_train_2346", "nl": "behavioral adaptation has a positive impact on the population / the survival / the reproduction of a species / of individual organisms.", "fol": "", "prediction": ["all x y.((BehavioralAdaptation(x) & Population(y) & Survival(y) & Reproduction(y)) -> PositiveImpact(x,y))"]}
{"id": "entailmentbank_train_2347", "nl": "an example of a behavioral adaptation is living in the warm ash from a volcano.", "fol": "", "prediction": ["all x y.((BehavioralAdaptation(x) & Volcano(y)) -> LivingInWarmAsh(x,y))"]}
{"id": "entailmentbank_train_2348", "nl": "an example of a behavioral adaptation is a bird building a nest in the warm ash from a volcano.", "fol": "", "prediction": ["all x y.((Bird(x) & Volcano(y) & BuildsNestInWarmAsh(x,y)) -> BehavioralAdaptation(x))"]}
{"id": "entailmentbank_train_2349", "nl": "an animal needs to attract a mate to reproduce.", "fol": "", "prediction": ["all x.((Animal(x) & NeedsToAttractMate(x)) -> Reproduce(x))"]}
{"id": "entailmentbank_train_2350", "nl": "in order to attract a mate, an animal must let other animal know that it is a potential mate.", "fol": "", "prediction": ["all x y.((Animal(x) & Animal(y)) -> AttractsMate(x,y))"]}
{"id": "entailmentbank_train_2351", "nl": "an animal needs to let other animals know that it is a potential mate to reproduce.", "fol": "", "prediction": ["all x y.((Animal(x) & Animal(y)) -> NeedsToLetAnimalsKnow(x,y))"]}
{"id": "entailmentbank_train_2352", "nl": "communication can be used to let other animals know things.", "fol": "", "prediction": ["all x y.((Animal(x) & Animal(y)) -> LetsKnow(x,y))"]}
{"id": "entailmentbank_train_2353", "nl": "communication can be used by animals to let other animals know that it is a potential mate.", "fol": "", "prediction": ["all x y.((Animal(x) & Animal(y)) -> LetsKnow(x,y))"]}
{"id": "entailmentbank_train_2354", "nl": "coloration can be used for communication by animals.", "fol": "", "prediction": ["all x.(Coloration(x) -> UsedForCommunication(x))"]}
{"id": "entailmentbank_train_2355", "nl": "coloration can be used to let other animals know that an animal is a potential mate.", "fol": "", "prediction": ["all x y.((Animal(x) & Animal(y)) -> PotentialMate(x,y))"]}
{"id": "entailmentbank_train_2356", "nl": "letting other animals know that an animal is a potential mate has a positive impact on that animal's ability to attract a mate / reproduce.", "fol": "", "prediction": ["all x y.((Animal(x) & Animal(y) & PotentialMate(x,y)) -> PositiveImpactOnAttractMate(x,y))"]}
{"id": "entailmentbank_train_2357", "nl": "coloration has a positive impact on an animal's ability to attract a mate / reproduce.", "fol": "", "prediction": ["all x y.((Animal(x) & Coloration(y)) -> (PositiveImpactOnAttract(x,y) & PositiveImpactOnReproducibility(x,y)))"]}
{"id": "entailmentbank_train_2358", "nl": "an adaptation has a positive impact on an animal's ability to reproduce.", "fol": "", "prediction": ["all x y.((Adaptation(x) & Animal(y)) -> PositiveImpactOnReproduction(x,y))"]}
{"id": "entailmentbank_train_2359", "nl": "coloration is a kind of adaptation for attracting a mate / reproduction.", "fol": "", "prediction": ["all x.(Coloration(x) -> (AdaptationForAttractingMate(x) & AttractsReproduction(x)))"]}
{"id": "entailmentbank_train_2360", "nl": "a shell is a covering around the body of a shelled animal.", "fol": "", "prediction": ["all x y.((Shell(x) & ShelledAnimal(y)) -> CoveringAroundBody(x,y))"]}
{"id": "entailmentbank_train_2361", "nl": "covering something is a kind of protection.", "fol": "", "prediction": ["all x.(Covering(x) -> Protection(x))"]}
{"id": "entailmentbank_train_2362", "nl": "a shell is a kind of protection for some animals.", "fol": "", "prediction": ["all x.(Shell(x) -> ProtectionForAnimals(x))"]}
{"id": "entailmentbank_train_2363", "nl": "a shell is usually hard.", "fol": "", "prediction": ["all x.(Shell(x) -> Hard(x))"]}
{"id": "entailmentbank_train_2364", "nl": "something hard can be used for protection.", "fol": "", "prediction": ["all x.((Hard(x) & UsedForProtection(x)) -> CanBeUsedForProtection(x))"]}
{"id": "entailmentbank_train_2365", "nl": "an animal's shell is usually hard for protection.", "fol": "", "prediction": ["all x.(Animal(x) -> HardForProtection(x))"]}
{"id": "entailmentbank_train_2366", "nl": "the shell of an animal is used to protect the animal.", "fol": "", "prediction": ["all x y.((Animal(x) & Shell(y)) -> Protects(x,y))"]}
{"id": "entailmentbank_train_2367", "nl": "snow is white in color.", "fol": "", "prediction": ["all x.(Snow(x) -> WhiteColor(x))"]}
{"id": "entailmentbank_train_2368", "nl": "white fur is white in color.", "fol": "", "prediction": ["all x.(WhiteFur(x) -> WhiteColor(x))"]}
{"id": "entailmentbank_train_2369", "nl": "white fur and snow are the same color.", "fol": "", "prediction": ["all x.(WhiteFur(x) & Snow(x))"]}
{"id": "entailmentbank_train_2370", "nl": "an example of camouflage is organism having the same color as its environment.", "fol": "", "prediction": ["all x.(Camouflage(x) -> (Organism(x) & SameColorAsEnvironment(x)))"]}
{"id": "entailmentbank_train_2371", "nl": "an example of camouflage is an animal with white fur in the snow.", "fol": "", "prediction": ["all x.(Camouflage(x) -> (Animal(x) & WhiteFur(x) & InSnow(x)))"]}
{"id": "entailmentbank_train_2372", "nl": "camouflage is used for protection by animals against predators.", "fol": "", "prediction": ["all x.(Camouflage(x) -> UsedForProtection(x))"]}
{"id": "entailmentbank_train_2373", "nl": "white fur is used for protection by animals against predators in the snow.", "fol": "", "prediction": ["all x y.((WhiteFur(x) & Animal(y)) -> UsedForProtection(x,y))"]}
{"id": "entailmentbank_train_2374", "nl": "something that is protected against something else is safe from that something else.", "fol": "", "prediction": ["all x.((ProtectedAgainst(x) & SomethingOther(x)) -> SafeFrom(x,y))"]}
{"id": "entailmentbank_train_2375", "nl": "animals with white fur are safe from predators in the snow.", "fol": "", "prediction": ["all x.((Animal(x) & WhiteFur(x)) -> SafeFromPredatorsInSnow(x))"]}
{"id": "entailmentbank_train_2376", "nl": "an example of camouflage is an animal having white fur in the snow.", "fol": "", "prediction": ["all x.(Camouflage(x) -> (WhiteFur(x) & InSnow(x)))"]}
{"id": "entailmentbank_train_2377", "nl": "camouflage is a kind of protection against predators.", "fol": "", "prediction": ["all x.(Camouflage(x) -> ProtectsAgainstPredators(x))"]}
{"id": "entailmentbank_train_2378", "nl": "white fur is a kind of protection against predators in the snow.", "fol": "", "prediction": ["all x.(WhiteFur(x) -> ProtectsAgainstPredatorsInSnow(x))"]}
{"id": "entailmentbank_train_2379", "nl": "snowy means a large amount of snow.", "fol": "", "prediction": ["all x.(Snowy(x) -> LargeAmountOfSnow(x))"]}
{"id": "entailmentbank_train_2380", "nl": "white fur is a kind of protection against predators in a snowy environment.", "fol": "", "prediction": ["all x.(WhiteFur(x) -> (ProtectionAgainstPredators(x) & SnowyEnvironment(x)))"]}
{"id": "entailmentbank_train_2381", "nl": "a green tree frog is green in color.", "fol": "", "prediction": ["all x.(GreenTreeFrog(x) -> GreenColor(x))"]}
{"id": "entailmentbank_train_2382", "nl": "a green tree frog and a leaf are the same color.", "fol": "", "prediction": ["all x y.((GreenTreeFrog(x) & Leaf(y)) -> SameColor(x,y))"]}
{"id": "entailmentbank_train_2383", "nl": "an example of camouflage is an organism looking like leaves.", "fol": "", "prediction": ["all x.(Camouflage(x) -> (OrganismLookingAlikeLeaves(x)))"]}
{"id": "entailmentbank_train_2384", "nl": "hiding means ability to be seen decreases.", "fol": "", "prediction": ["all x.(Hunting(x) -> DecreasesAbilityToBeSeen(x))"]}
{"id": "entailmentbank_train_2385", "nl": "camouflage is a kind of adaptation for hiding in an environment.", "fol": "", "prediction": ["all x.(Camouflage(x) -> (AdaptationForHiding(x) & InEnvironment(x)))"]}
{"id": "entailmentbank_train_2386", "nl": "camouflage is a kind of adaptation for decreasing something's ability to be seen in an environment.", "fol": "", "prediction": ["all x.(Camouflage(x) -> (Adaptation(x) & DecreasesAbilityToBeSeenInEnvironment(x)))"]}
{"id": "entailmentbank_train_2387", "nl": "looking like leaves can decrease an organism's ability to be seen in an environment.", "fol": "", "prediction": ["all x.(LookingAlikeLeaves(x) -> DecreasesAbilityToBeSeenInEnvironment(x))"]}
{"id": "entailmentbank_train_2388", "nl": "a forest contains lots of  trees.", "fol": "", "prediction": ["all x.(Forest(x) -> ContainsLotsOfTrees(x))"]}
{"id": "entailmentbank_train_2389", "nl": "a leaf is a part of a tree.", "fol": "", "prediction": ["all x.(Leaf(x) -> PartOfTree(x))"]}
{"id": "entailmentbank_train_2390", "nl": "forest environmnet contains lots of leaves.", "fol": "", "prediction": ["all x.(ForestEnvironment(x) -> ContainsLotsOfLeaves(x))"]}
{"id": "entailmentbank_train_2391", "nl": "looking like leaves can decrease an animal's ability to bee seen in a forest environment.", "fol": "", "prediction": ["all x.(LookingAlikeLeaves(x) -> DecreasesBeeSeedInForestEnvironment(x))"]}
{"id": "entailmentbank_train_2392", "nl": "hiding can be used for avoiding predators.", "fol": "", "prediction": ["all x.(Hunting(x) -> AvoidsPredators(x))"]}
{"id": "entailmentbank_train_2393", "nl": "avoiding predators has a positive impact on an organism's survival.", "fol": "", "prediction": ["all x.((AvoidsPredators(x) & PositiveImpactOnSurvival(x)) -> Predator(x))"]}
{"id": "entailmentbank_train_2394", "nl": "hiding has a positive impact on an organism's survival.", "fol": "", "prediction": ["all x.(Hunting(x) -> PositiveImpactOnSurvival(x))"]}
{"id": "entailmentbank_train_2395", "nl": "camouflage has a positive impact on an organism's survival.", "fol": "", "prediction": ["all x.(Camouflage(x) -> PositiveImpactOnSurvival(x))"]}
{"id": "entailmentbank_train_2396", "nl": "some environments change color.", "fol": "", "prediction": ["exists x.(Environment(x) & ChangeColor(x))"]}
{"id": "entailmentbank_train_2397", "nl": "an example of camouflage is organism changing into the color of the environment.", "fol": "", "prediction": ["all x.(Camouflage(x) -> (OrganismChangesIntoColor(x) & Environment(x)))"]}
{"id": "entailmentbank_train_2398", "nl": "if an animal's fur is a color then that animal is that color.", "fol": "", "prediction": ["all x.((Animal(x) & FurColor(x)) -> Color(x))"]}
{"id": "entailmentbank_train_2399", "nl": "an example of camouflage is an animal's fur changing into the color of the environment.", "fol": "", "prediction": ["all x.(Camouflage(x) -> (AnimalFurChangesIntoColor(x)))"]}
{"id": "entailmentbank_train_2400", "nl": "changing fur color to the environment's color has a positive impact on an organism's survival.", "fol": "", "prediction": ["all x y.((FurColor(x) & EnvironmentColor(y)) -> PositiveImpactOnSurvival(x,y))"]}
{"id": "entailmentbank_train_2401", "nl": "the arctic is a kind of environment.", "fol": "", "prediction": ["all x.(Arctic(x) -> Environment(x))"]}
{"id": "entailmentbank_train_2402", "nl": "the arctic is white in color.", "fol": "", "prediction": ["all x.(Arctic(x) -> WhiteColor(x))"]}
{"id": "entailmentbank_train_2403", "nl": "the arctic is an environment that is white in color.", "fol": "", "prediction": ["all x.(Arctic(x) -> WhiteColorEnvironment(x))"]}
{"id": "entailmentbank_train_2404", "nl": "changing fur color to white has a positive impact on an organism's survival in the arctic.", "fol": "", "prediction": ["all x.(ChangeFurColorToWhite(x) -> PositiveImpactOnArcticSurvival(x))"]}
{"id": "entailmentbank_train_2405", "nl": "a bear is dark in color.", "fol": "", "prediction": ["all x.(Bear(x) -> DarkColor(x))"]}
{"id": "entailmentbank_train_2406", "nl": "a bear's fur is dark in color.", "fol": "", "prediction": ["all x.(Bear(x) -> DarkFur(x))"]}
{"id": "entailmentbank_train_2407", "nl": "a forest is dark in color.", "fol": "", "prediction": ["all x.(Forest(x) -> DarkColor(x))"]}
{"id": "entailmentbank_train_2408", "nl": "a bear's fur and a forest are both dark in color.", "fol": "", "prediction": ["all x y.((Bear(x) & Forest(y)) -> (DarkColor(x) & DarkColor(y)))"]}
{"id": "entailmentbank_train_2409", "nl": "an example of camouflage is a bear's fur being the same color as a forest.", "fol": "", "prediction": ["all x y.((Bear(x) & Forest(y)) -> SameColorFur(x,y))"]}
{"id": "entailmentbank_train_2410", "nl": "a bear having dark fur is a kind of adaptation for hiding in a forest.", "fol": "", "prediction": ["all x.((Bear(x) & DarkFur(x)) -> AdaptationForHuntingInForest(x))"]}
{"id": "entailmentbank_train_2411", "nl": "protecting a living thing has a positive impact on that living thing's survival / health.", "fol": "", "prediction": ["all x y.((ProtectingLivingThing(x) & LivingThing(y)) -> PositiveImpactOnSurvival(x,y))"]}
{"id": "entailmentbank_train_2412", "nl": "hiding is a kind of protection against predators / from predators.", "fol": "", "prediction": ["all x.(Hunting(x) -> (ProtectionAgainstPredators(x) & ProtectionFromPredators(x)))"]}
{"id": "entailmentbank_train_2413", "nl": "hiding can have a positive impact on an animal's survival.", "fol": "", "prediction": ["all x.(Hunting(x) -> PositiveImpactOnSurvival(x))"]}
{"id": "entailmentbank_train_2414", "nl": "having dark fur has a positive impact on an animal's survival in a forest.", "fol": "", "prediction": ["all x.(DarkFur(x) -> PositiveImpactOnSurvivalInForest(x))"]}
{"id": "entailmentbank_train_2415", "nl": "an arctic fox turns from brown to white for the winter.", "fol": "", "prediction": ["all x.(ArcticFox(x) -> TurnsFromBrownToWhite(x))"]}
{"id": "entailmentbank_train_2416", "nl": "an arctic fox's fur turns from brown to white for the winter.", "fol": "", "prediction": ["all x.((ArcticFox(x) & FurTurnsFromBrownToWhite(x)) -> WinterFur(x))"]}
{"id": "entailmentbank_train_2417", "nl": "when snow falls in an environment, that environment will become white.", "fol": "", "prediction": ["all x y.((SnowFallsInEnvironment(x) & Environment(y)) -> White(y))"]}
{"id": "entailmentbank_train_2418", "nl": "snow falls during the winter in the arctic environment.", "fol": "", "prediction": ["all x y.((SnowFall(x) & ArcticEnvironment(y)) -> Winter(x,y))"]}
{"id": "entailmentbank_train_2419", "nl": "an arctic environment becomes white during the winter.", "fol": "", "prediction": ["all x.(ArcticEnvironment(x) -> WhiteDuringWinter(x))"]}
{"id": "entailmentbank_train_2420", "nl": "a arctic fox's fur and an arctic environment both become white in the winter.", "fol": "", "prediction": ["all x y.((ArcticFur(x) & ArcticEnvironment(y)) -> WhiteInWinter(x))"]}
{"id": "entailmentbank_train_2421", "nl": "an example of camouflage is an arctic fox's fur becoming white in the winter in an arctic environment.", "fol": "", "prediction": ["all x y.((Camouflage(x) & ArcticFur(y) & ArcticEnvironment(y)) -> WhiteInWinter(y))"]}
{"id": "entailmentbank_train_2422", "nl": "snow melts in the summer in an arctic environment.", "fol": "", "prediction": ["all x y.((Snow(x) & Summer(y) & ArcticEnvironment(z)) -> MeltsIn(x,y,z))"]}
{"id": "entailmentbank_train_2423", "nl": "when the snow in an environment melts, that environment will become brown.", "fol": "", "prediction": ["all x y.((Snow(x) & Environment(y) & Melts(x,y)) -> Brown(y))"]}
{"id": "entailmentbank_train_2424", "nl": "an arctic environment becomes brown in the summer.", "fol": "", "prediction": ["all x.((ArcticEnvironment(x) & Summer(x)) -> Brown(x))"]}
{"id": "entailmentbank_train_2425", "nl": "when snow falls in an environment in an environment, that environment will become white.", "fol": "", "prediction": ["all x y.((SnowFallsInEnvironment(x) & Environment(y) & InEnvironment(x,y)) -> White(y))"]}
{"id": "entailmentbank_train_2426", "nl": "the arctic environment becomes white in the winter.", "fol": "", "prediction": ["all x.((ArcticEnvironment(x) & Winter(x)) -> White(x))"]}
{"id": "entailmentbank_train_2427", "nl": "the color of an arctic environment becomes brown in the summer and white in the winter.", "fol": "", "prediction": ["all x y.((ArcticEnvironment(x) & Summer(y)) -> (Brown(x,y) & White(x,y)))"]}
{"id": "entailmentbank_train_2428", "nl": "the fur color of the arctic hare changes from brown in the summer to white in the winter.", "fol": "", "prediction": ["all x.((ArcticHare(x) & FurColor(x,Brown)) -> ChangesFrom(x,Brown))"]}
{"id": "entailmentbank_train_2429", "nl": "a hare and an arctic environment change to the same color during the summer and winter.", "fol": "", "prediction": ["all x y.((Hare(x) & ArcticEnvironment(y)) -> ChangesColor(x,y))"]}
{"id": "entailmentbank_train_2430", "nl": "an example of camouflage is a hare's fur changing to the color of an arctic environment.", "fol": "", "prediction": ["all x y.((Hare(x) & Fur(y) & ChangesColor(x,y)) -> Camouflage(x))"]}
{"id": "entailmentbank_train_2431", "nl": "some environments can change color.", "fol": "", "prediction": ["exists x.(Environment(x) & CanChangeColor(x))"]}
{"id": "entailmentbank_train_2432", "nl": "some speciallized cells cause an animal to change color rapidly.", "fol": "", "prediction": ["exists x.(SpecializedCell(x) & CausesAnimalToChangeColorRapidly(x))"]}
{"id": "entailmentbank_train_2433", "nl": "a certain animal has specialized cells.", "fol": "", "prediction": ["exists x.(Animal(x) & HasSpecializedCells(x))"]}
{"id": "entailmentbank_train_2434", "nl": "a certain animal is able to change color rapidly.", "fol": "", "prediction": ["all x.((Animal(x) & CanChangeColorRapidly(x)) -> CanChangeColorRapidly(x))"]}
{"id": "entailmentbank_train_2435", "nl": "an example of camouflage is an animal rapidly changing into the color of the environment.", "fol": "", "prediction": ["all x.(Camouflage(x) -> (Animal(x) & RapidlyChangesIntoColor(x)))"]}
{"id": "entailmentbank_train_2436", "nl": "camouflage is used for hiding by animals from predators.", "fol": "", "prediction": ["all x y.((Camouflage(x) & Animal(y)) -> UsedForHunting(x,y))"]}
{"id": "entailmentbank_train_2437", "nl": "rapidly changing into the color of the environment is used by animals to hide from predators.", "fol": "", "prediction": ["all x y.((Animal(x) & Predator(y)) -> RapidlyChangesIntoColorOfEnvironment(x,y))"]}
{"id": "entailmentbank_train_2438", "nl": "an adaptation has a positive impact on an animal's survival.", "fol": "", "prediction": ["all x y.((Adaptation(x) & Animal(y)) -> PositiveImpactOnSurvival(x,y))"]}
{"id": "entailmentbank_train_2439", "nl": "camouflage has a positive impact on an animal's survival.", "fol": "", "prediction": ["all x.(Camouflage(x) -> PositiveImpactOnSurvival(x))"]}
{"id": "entailmentbank_train_2440", "nl": "a forest environment contains many trees.", "fol": "", "prediction": ["all x.(ForestEnvironment(x) -> ContainsManyTrees(x))"]}
{"id": "entailmentbank_train_2441", "nl": "leaves are a part of trees.", "fol": "", "prediction": ["all x.(Leaves(x) -> PartOfTrees(x))"]}
{"id": "entailmentbank_train_2442", "nl": "a forest environment contains many leaves.", "fol": "", "prediction": ["all x.(ForestEnvironment(x) -> ContainsManyLeaves(x))"]}
{"id": "entailmentbank_train_2443", "nl": "an environment looks like the things it contains.", "fol": "", "prediction": ["all x.(Environment(x) -> LooksAlikeContents(x))"]}
{"id": "entailmentbank_train_2444", "nl": "a forest environment looks like leaves.", "fol": "", "prediction": ["all x.(ForestEnvironment(x) -> LooksAlikeLeaves(x))"]}
{"id": "entailmentbank_train_2445", "nl": "an example of camouflage is an organism looking like its environment.", "fol": "", "prediction": ["all x.(Camouflage(x) -> (OrganismLookingAlikeEnvironment(x)))"]}
{"id": "entailmentbank_train_2446", "nl": "an example of camouflage is an animal looking like leaves.", "fol": "", "prediction": ["all x.(Camouflage(x) -> (AnimalLookingAlikeLeaves(x)))"]}
{"id": "entailmentbank_train_2447", "nl": "looking like leaves can have a positive impact on an animal's survival.", "fol": "", "prediction": ["all x.(LookingAlikeLeaves(x) -> PositiveImpactOnSurvival(x))"]}
{"id": "entailmentbank_train_2448", "nl": "when snow falls in an environment, the environment becomes white in color.", "fol": "", "prediction": ["all x y.((SnowFallsInEnvironment(x) & Environment(y)) -> WhiteColor(y))"]}
{"id": "entailmentbank_train_2449", "nl": "snow falls during the winter in some environments.", "fol": "", "prediction": ["exists x.(Environment(x) & SnowFallsDuringWinter(x))"]}
{"id": "entailmentbank_train_2450", "nl": "a winter environment may be white in color.", "fol": "", "prediction": ["all x.(WinterEnvironment(x) -> WhiteColor(x))"]}
{"id": "entailmentbank_train_2451", "nl": "a rabbit can be white in color.", "fol": "", "prediction": ["all x.(Rabbit(x) -> WhiteColor(x))"]}
{"id": "entailmentbank_train_2452", "nl": "a white rabbit and a winter environment may have the same color.", "fol": "", "prediction": ["all x y.((WhiteRabbit(x) & WinterEnvironment(y)) -> HasSameColor(x,y))"]}
{"id": "entailmentbank_train_2453", "nl": "an example of camouflage is a rabbit being white in color in a winter environment.", "fol": "", "prediction": ["all x.((Rabbit(x) & WhiteColor(x) & WinterEnvironment(x)) -> Camouflage(x))"]}
{"id": "entailmentbank_train_2454", "nl": "protecting a living thing has a positive impact on that living thing's survival.", "fol": "", "prediction": ["all x y.((ProtectingLivingThing(x) & LivingThing(y)) -> PositiveImpactOnSurvival(x,y))"]}
{"id": "entailmentbank_train_2455", "nl": "camouflage has a positive impact on a rabbit's survival in a winter environment.", "fol": "", "prediction": ["all x y.((Camouflage(x) & Rabbit(y) & WinterEnvironment(y)) -> PositiveImpactOnSurvival(x,y))"]}
{"id": "entailmentbank_train_2456", "nl": "a chameleon can change colors.", "fol": "", "prediction": ["all x.(Chameleon(x) -> CanChangeColors(x))"]}
{"id": "entailmentbank_train_2457", "nl": "some environments change colors.", "fol": "", "prediction": ["exists x.(Environment(x) & ChangeColor(x))"]}
{"id": "entailmentbank_train_2458", "nl": "a chameleon and its environment can change colors.", "fol": "", "prediction": ["all x.((Chameleon(x) & Environment(x)) -> CanChangeColors(x))"]}
{"id": "entailmentbank_train_2459", "nl": "changing colors can be used by animals to hide from predators.", "fol": "", "prediction": ["all x y.((Animal(x) & ColorChange(x)) -> CanHuntFromPredators(x,y))"]}
{"id": "entailmentbank_train_2460", "nl": "hiding can be used to avoid something.", "fol": "", "prediction": ["all x.(Hunting(x) -> CanBeUsedToAvoid(x))"]}
{"id": "entailmentbank_train_2461", "nl": "changing colors can be used by animals to avoid predators.", "fol": "", "prediction": ["all x y.((Animal(x) & Color(y)) -> CanAvoidPredators(x,y))"]}
{"id": "entailmentbank_train_2462", "nl": "changing colors can have a positive impact on an animal's survival.", "fol": "", "prediction": ["all x y.((ChangesColors(x) & Animal(y)) -> PositiveImpactOnSurvival(x,y))"]}
{"id": "entailmentbank_train_2463", "nl": "an arctic fox's fur is dark gray or brown in the summer.", "fol": "", "prediction": ["all x.(ArcticFish(x) -> (Fur(x,DarkGray) | Fur(x,Brown)))"]}
{"id": "entailmentbank_train_2464", "nl": "an arctic fox's fur is white in the winter.", "fol": "", "prediction": ["all x.(ArcticFish(x) -> WhiteFurInWinter(x))"]}
{"id": "entailmentbank_train_2465", "nl": "an arctic fox's fur is dark grey or brown in the summer and white in the winter.", "fol": "", "prediction": ["all x.(ArcticFish(x) -> (Fur(x,DarkGray) | Fur(x,Brown)) & Fur(x,White)))"]}
{"id": "entailmentbank_train_2466", "nl": "an arctic fox is dark grey or brown in the summer and white in the winter.", "fol": "", "prediction": ["all x.(ArcticFox(x) -> ((DarkGrey(x) | Brown(x)) & White(x)))"]}
{"id": "entailmentbank_train_2467", "nl": "when snow in an environment melts, that environment will become dark gray or brown.", "fol": "", "prediction": ["all x y.((Snow(x) & Environment(y) & Melts(x,y)) -> (DarkGray(y) | Brown(y)))"]}
{"id": "entailmentbank_train_2468", "nl": "snow melts during the summer in an arctic environment.", "fol": "", "prediction": ["all x y.((Snow(x) & Summer(y) & ArcticEnvironment(z)) -> MeltsIn(x,y,z))"]}
{"id": "entailmentbank_train_2469", "nl": "an arctic environment is dark gray or brown in the summer.", "fol": "", "prediction": ["all x.(ArcticEnvironment(x) -> (DarkGray(x) | Brown(x)))"]}
{"id": "entailmentbank_train_2470", "nl": "an arctic environment is white in the winter.", "fol": "", "prediction": ["all x.(ArcticEnvironment(x) -> WhiteInWinter(x))"]}
{"id": "entailmentbank_train_2471", "nl": "an arctic environment ais dark gray or brown in the summer and white in the winter.", "fol": "", "prediction": ["all x.(ArcticEnvironment(x) -> ((DarkGray(x) | Brown(x)) & (White(x)) & Summer(x))))"]}
{"id": "entailmentbank_train_2472", "nl": "an arctic fox and arctic environment are both dark gray or brown in the summer and white in the winter.", "fol": "", "prediction": ["all x y.((ArcticFox(x) & ArcticEnvironment(y)) -> (DarkGrayOrBrown(x) & White(x)))"]}
{"id": "entailmentbank_train_2473", "nl": "if something is one color during one time and another color during another time, then at something changes color.", "fol": "", "prediction": ["all x y.((Color(x) & Time(y) & Color(x,y)) -> ChangesColor(x,y))"]}
{"id": "entailmentbank_train_2474", "nl": "an arctic fox and arctic environment are both change color to dark gray or brown in the summer and white in the winter.", "fol": "", "prediction": ["all x y.((ArcticFox(x) & ArcticEnvironment(y)) -> (ChangeColor(x,y) & (DarkGray(x) | Brown(x)) & ChangeColor(x,y)))"]}
{"id": "entailmentbank_train_2475", "nl": "an example of camouflage is an arctic fox changing into the color of an arctic environment in the summer and winter.", "fol": "", "prediction": ["all x y.((Camouflage(x) & ArcticFox(y) & ChangesColor(x,y)) -> ChangesColor(y,x))"]}
{"id": "entailmentbank_train_2476", "nl": "camouflage is used for protection / hiding by prey / animals against predators / from predators.", "fol": "", "prediction": ["all x.(Camouflage(x) -> (Protection(x) & HiddenByPrey(x) & AnimalsAgainstPredators(x)))"]}
{"id": "entailmentbank_train_2477", "nl": "changing into the color of an arctic environment in the summer and winter is used for hiding by arctic foxes.", "fol": "", "prediction": ["all x y.((Fox(x) & ArcticEnvironment(y) & Summer(x) & Winter(x)) -> ChangesColorToColor(x,y))"]}
{"id": "entailmentbank_train_2478", "nl": "to blend into something means to be less able to see in something.", "fol": "", "prediction": ["all x.(BlendedInto(x) -> LessAbleToSeeIn(x))"]}
{"id": "entailmentbank_train_2479", "nl": "hiding means ability to be seen decreases for camouflage.", "fol": "", "prediction": ["all x.(HuntingMeasures(x) -> DecreasesAbilityToBeSeen(x))"]}
{"id": "entailmentbank_train_2480", "nl": "to hide in something can mean to blend in with something.", "fol": "", "prediction": ["all x.((HideIn(x) & BlendIn(x)) -> CanBeBlendedIn(x))"]}
{"id": "entailmentbank_train_2481", "nl": "changing into the color of an arctic environment in the summer and winter is used for blending in with an environment by arctic foxes.", "fol": "", "prediction": ["all x y.((Fox(x) & ArcticEnvironment(y) & Summer(y) & Winter(y)) -> BlendsInWithEnvironment(x,y))"]}
{"id": "entailmentbank_train_2482", "nl": "an arctic hare's fur turns white in the winter.", "fol": "", "prediction": ["all x.((ArcticHare(x) & Fur(x)) -> TurnsWhiteInWinter(x))"]}
{"id": "entailmentbank_train_2483", "nl": "an arctic hare turns white in the winter.", "fol": "", "prediction": ["all x.(ArcticHare(x) -> TurnsWhiteInWinter(x))"]}
{"id": "entailmentbank_train_2484", "nl": "an arctic environment becomes white in the winter.", "fol": "", "prediction": ["all x.(ArcticEnvironment(x) -> WhiteInWinter(x))"]}
{"id": "entailmentbank_train_2485", "nl": "an arctic hare and an arctic environment both change color to white in the winter.", "fol": "", "prediction": ["all x y.((ArcticHare(x) & ArcticEnvironment(y)) -> ChangesColorToWhite(x,y))"]}
{"id": "entailmentbank_train_2486", "nl": "an example of camouflage is an arctic hare changing into the color of an arctic environment in the winter.", "fol": "", "prediction": ["all x y.((Camouflage(x) & ArcticHare(y) & ChangesColorInWinter(y,x)) -> Camouflage(x))"]}
{"id": "entailmentbank_train_2487", "nl": "changing into the color of an arctic environment is used for hiding from predators by an arctic hare.", "fol": "", "prediction": ["all x y.((ArcticHare(x) & ChangesColor(x,y)) -> UsedForHuntingFromPredators(x,y))"]}
{"id": "entailmentbank_train_2488", "nl": "the colors of parts of an animals are inherited characteristics.", "fol": "", "prediction": ["all x.((AnimalPart(x) & Colors(x)) -> ErasedCharacteristics(x))"]}
{"id": "entailmentbank_train_2489", "nl": "an adaptation is a kind of inherited charactersitic that helps an animal survive / reproduce.", "fol": "", "prediction": ["all x.(Adaptation(x) -> (EarnedCharacteristics(x) & HelpsAnimalSurvive(x) & HelpsAnimalReproduce(x)))"]}
{"id": "entailmentbank_train_2490", "nl": "coloration is a kind of adaptation for hiding.", "fol": "", "prediction": ["all x.(Coloration(x) -> AdaptationForHunting(x))"]}
{"id": "entailmentbank_train_2491", "nl": "animals adapt to their environment.", "fol": "", "prediction": ["all x.(Animal(x) -> AdaptsToEnvironment(x))"]}
{"id": "entailmentbank_train_2492", "nl": "coloration is a kind of adaptation for hiding in an environment.", "fol": "", "prediction": ["all x.(Coloration(x) -> (AdaptationForHidingInEnvironment(x)))"]}
{"id": "entailmentbank_train_2493", "nl": "being protected from predators has a positive impact on an animal's survival.", "fol": "", "prediction": ["all x y.((Animal(x) & Predator(y)) -> PositiveImpactOnSurvival(x,y))"]}
{"id": "entailmentbank_train_2494", "nl": "an organism having the same color as its environment has a positive impact on that organism's survival.", "fol": "", "prediction": ["all x y.((Organism(x) & SameColor(x,y) & Environment(y)) -> PositiveImpactOnSurvival(x,y))"]}
{"id": "entailmentbank_train_2495", "nl": "if something has a positive impact on an animal's survival then that animal will likely do that something.", "fol": "", "prediction": ["all x y.((Animal(x) & PositiveImpact(x,y) & Animal(y)) -> WillDo(x,y))"]}
{"id": "entailmentbank_train_2496", "nl": "animals are likely to have the same color as their environment.", "fol": "", "prediction": ["all x.(Animal(x) -> HasSameColor(x))"]}
{"id": "entailmentbank_train_2497", "nl": "a rat snake is gray.", "fol": "", "prediction": ["all x.(RatSnake(x) -> Gray(x))"]}
{"id": "entailmentbank_train_2498", "nl": "a gray rat snake is likely to be in a gray environment.", "fol": "", "prediction": ["all x.(TanRatSnake(x) -> GrayEnvironment(x))"]}
{"id": "entailmentbank_train_2499", "nl": "gravel is usually gray in color.", "fol": "", "prediction": ["all x.(Gravel(x) -> GrayColor(x))"]}
{"id": "entailmentbank_train_2500", "nl": "a gravel pit contains gravel.", "fol": "", "prediction": ["all x.(GravelPit(x) -> ContainsGravel(x))"]}
{"id": "entailmentbank_train_2501", "nl": "a gravel pit is usually gray in color.", "fol": "", "prediction": ["all x.(GravelPit(x) -> GrayColor(x))"]}
{"id": "entailmentbank_train_2502", "nl": "a gray rat snake is likely to be in a gravel pit.", "fol": "", "prediction": ["all x.(GrayRatSnake(x) -> InGravelPit(x))"]}
{"id": "entailmentbank_train_2503", "nl": "an organism having the same color as its environment is a kind of adaptation for hiding in that environment.", "fol": "", "prediction": ["all x.((Organism(x) & SameColorAsEnvironment(x)) -> AdaptationForHidingInEnvironment(x))"]}
{"id": "entailmentbank_train_2504", "nl": "an organism having white fur is an adaptation for hiding in white environments.", "fol": "", "prediction": ["all x.(WhiteFurOrganism(x) -> AdaptationForHuntingInWhiteEnvironments(x))"]}
{"id": "entailmentbank_train_2505", "nl": "the arctic environment is white in color from being covered in snow.", "fol": "", "prediction": ["all x.(ArcticEnvironment(x) -> WhiteColor(x))"]}
{"id": "entailmentbank_train_2506", "nl": "an organism having white fur is an adaptation for hiding in arctic environments.", "fol": "", "prediction": ["all x.(WhiteFurOrganism(x) -> AdaptationForHidingInArcticEnvironments(x))"]}
{"id": "entailmentbank_train_2507", "nl": "adaptation has a positive impact on the survival of individual organisms.", "fol": "", "prediction": ["all x.(Adaptation(x) -> PositiveImpactOnSurvivalOfOrganisms(x))"]}
{"id": "entailmentbank_train_2508", "nl": "an organism having white fur has a positive impact on that organism's survival in arctic environments.", "fol": "", "prediction": ["all x.(WhiteFurOrganism(x) -> PositiveImpactOnSurvivalInArcticEnvironments(x))"]}
{"id": "entailmentbank_train_2509", "nl": "living underground can be used for hiding from predators.", "fol": "", "prediction": ["all x.((LivingUnderground(x) & Predator(x)) -> CanBeUsedForHiding(x))"]}
{"id": "entailmentbank_train_2510", "nl": "living underground can be used for avoiding predators.", "fol": "", "prediction": ["all x.((LivingUnderground(x) & AvoidsPredators(x)) -> CanBeUsedFor(x))"]}
{"id": "entailmentbank_train_2511", "nl": "a predator eats other animals for food.", "fol": "", "prediction": ["all x y.((Predator(x) & Animal(y)) -> EatsForFood(x,y))"]}
{"id": "entailmentbank_train_2512", "nl": "living underground can be used for avoiding being eaten by predators.", "fol": "", "prediction": ["all x.((LivingUnderground(x) & Predator(x)) -> AvoidsEating(x))"]}
{"id": "entailmentbank_train_2513", "nl": "a hawk is a kind of predator.", "fol": "", "prediction": ["all x.(Hawk(x) -> Predator(x))"]}
{"id": "entailmentbank_train_2514", "nl": "an owl is a kind of predator.", "fol": "", "prediction": ["all x.(Owl(x) -> Predator(x))"]}
{"id": "entailmentbank_train_2515", "nl": "hawks and owls are kinds of predators.", "fol": "", "prediction": ["all x.((Hawk(x) | Owl(x)) -> Predator(x))"]}
{"id": "entailmentbank_train_2516", "nl": "living underground can be used for avoiding being eaten by hawks and owls.", "fol": "", "prediction": ["all x.((LivingUnderground(x) & AvoidsEating(x,hawks,owls)) -> AvoidsEating(x,owls))"]}
{"id": "entailmentbank_train_2517", "nl": "a predator is a kind of animal.", "fol": "", "prediction": ["all x.(Predator(x) -> Animal(x))"]}
{"id": "entailmentbank_train_2518", "nl": "most animals avoid bad odors.", "fol": "", "prediction": ["all x.(Animal(x) -> AvoidsBadOdors(x))"]}
{"id": "entailmentbank_train_2519", "nl": "a predator may avoid bad odors.", "fol": "", "prediction": ["all x.(Predator(x) -> MayAvoidBadOdors(x))"]}
{"id": "entailmentbank_train_2520", "nl": "some animals produce bad odors.", "fol": "", "prediction": ["exists x.(Animal(x) & ProducesBadOdors(x))"]}
{"id": "entailmentbank_train_2521", "nl": "predators may avoid animals that produce bad odors.", "fol": "", "prediction": ["all x y.((Predator(x) & Animal(y) & BadOdor(y)) -> MayAvoid(x,y))"]}
{"id": "entailmentbank_train_2522", "nl": "causing predators to avoid you is a kind of method for avoiding predators.", "fol": "", "prediction": ["all x.((CausesPredatorsToAvoid(x) & Predator(x)) -> Avoids(x))"]}
{"id": "entailmentbank_train_2523", "nl": "producing a bad odor is a kind of method for avoiding predators.", "fol": "", "prediction": ["all x.(BadOdor(x) -> AvoidsPredators(x))"]}
{"id": "entailmentbank_train_2524", "nl": "avoiding is a kind of defense.", "fol": "", "prediction": ["all x.((Avoids(x) & Defense(x)) -> -Avoids(x))"]}
{"id": "entailmentbank_train_2525", "nl": "producing bad odors is a kind of defense against predators.", "fol": "", "prediction": ["all x.(BadOdors(x) -> DefenseAgainstPredators(x))"]}
{"id": "entailmentbank_train_2526", "nl": "a skunk produces a bad odor.", "fol": "", "prediction": ["all x.(Skunk(x) -> ProducesBadOdor(x))"]}
{"id": "entailmentbank_train_2527", "nl": "a skunk produces a bad ordor as a defense against predators.", "fol": "", "prediction": ["all x.(Skunk(x) -> (ProducesBadOrdor(x) & DefenseAgainstPredators(x)))"]}
{"id": "entailmentbank_train_2528", "nl": "a shell is a part of a turtle.", "fol": "", "prediction": ["all x.(Shell(x) -> PartOfTurtle(x))"]}
{"id": "entailmentbank_train_2529", "nl": "a shell is a part of a turtle for protecting the turtle.", "fol": "", "prediction": ["all x y.((Shell(x) & Turtle(y)) -> PartOf(x,y))"]}
{"id": "entailmentbank_train_2530", "nl": "black ink in water causes animals to have difficulty seeing.", "fol": "", "prediction": ["all x.(BlackInkInWater(x) -> AnimalsDifficultySeeing(x))"]}
{"id": "entailmentbank_train_2531", "nl": "black ink in water causes predators to have difficulty seeing.", "fol": "", "prediction": ["all x.(BlackInkInWater(x) -> PredatorDifficultySeeing(x))"]}
{"id": "entailmentbank_train_2532", "nl": "octopuses release black ink into water.", "fol": "", "prediction": ["all x.(Octopuse(x) -> ReleasesBlackInkIntoWater(x))"]}
{"id": "entailmentbank_train_2533", "nl": "octopuses releasing ink into the water causes predators to have difficulty seeing the octopus.", "fol": "", "prediction": ["all x y.((Octopus(x) & ReleasesInkIntoWater(x)) -> PredatorDifficultySeeing(y))"]}
{"id": "entailmentbank_train_2534", "nl": "ink is used for hiding from predators by octopuses.", "fol": "", "prediction": ["all x y.((Octopuse(x) & Ink(y)) -> UsedForHuntingFromPredators(x,y))"]}
{"id": "entailmentbank_train_2535", "nl": "some animals move quickly to escape predators.", "fol": "", "prediction": ["exists x.(Animal(x) & MovesQuicklyToEscapePredators(x))"]}
{"id": "entailmentbank_train_2536", "nl": "predators usually need to be as fast as their prey to catch their prey.", "fol": "", "prediction": ["all x y.((Predator(x) & Prey(y)) -> NeedsFastToCatch(x,y))"]}
{"id": "entailmentbank_train_2537", "nl": "animals that can move quickly will be able to escape a predator.", "fol": "", "prediction": ["all x.((Animal(x) & MovesQuickly(x)) -> EscapesPredator(x))"]}
{"id": "entailmentbank_train_2538", "nl": "prarie dogs can run very quickly.", "fol": "", "prediction": ["all x.(ParieDog(x) -> CanRunSlowly(x))"]}
{"id": "entailmentbank_train_2539", "nl": "running very quickly helps a prarie dog be able to escape a predator.", "fol": "", "prediction": ["all x y.((ParieDog(x) & Predator(y)) -> RunsSlowly(x,y))"]}
{"id": "entailmentbank_train_2540", "nl": "predators threaten the existance of other animals.", "fol": "", "prediction": ["all x y.((Predator(x) & Animal(y)) -> ThreatensExistance(x,y))"]}
{"id": "entailmentbank_train_2541", "nl": "threatening the existence of an animal has a negative impact on that animal.", "fol": "", "prediction": ["all x y.((Animal(x) & Threatens(x,y)) -> NegativeImpact(x,y))"]}
{"id": "entailmentbank_train_2542", "nl": "predators have a negative impact on an animal's survival.", "fol": "", "prediction": ["all x y.((Predator(x) & Animal(y)) -> NegativeImpactOnSurvival(x,y))"]}
{"id": "entailmentbank_train_2543", "nl": "avoiding something with a negative impact has a positive impact.", "fol": "", "prediction": ["all x.((Avoids(x,y) & NegativeImpact(y)) -> PositiveImpact(x))"]}
{"id": "entailmentbank_train_2544", "nl": "defenses can help animals avoid predators.", "fol": "", "prediction": ["all x.(Defense(x) -> HelpsAnimalsAvoidPredators(x))"]}
{"id": "entailmentbank_train_2545", "nl": "organisms will use defenses as a reseponse to predators.", "fol": "", "prediction": ["all x.(Organism(x) -> UsesDefensesAsResponseToPredators(x))"]}
{"id": "entailmentbank_train_2546", "nl": "quills are part of a porcupine.", "fol": "", "prediction": ["all x.(Quill(x) -> PartOfPupin(x))"]}
{"id": "entailmentbank_train_2547", "nl": "quills are a kind of defense mechanism.", "fol": "", "prediction": ["all x.(Quill(x) -> DefenseMechanism(x))"]}
{"id": "entailmentbank_train_2548", "nl": "quills are part of a porcupine used for defense.", "fol": "", "prediction": ["all x.(Quill(x) -> PartOfPorcupine(x))"]}
{"id": "entailmentbank_train_2549", "nl": "a porcupine will use quills as a response to predators.", "fol": "", "prediction": ["all x.(Porcupine(x) -> UsesQuillsAsResponseToPredators(x))"]}
{"id": "entailmentbank_train_2550", "nl": "to blend into something means to be difficult to see in something.", "fol": "", "prediction": ["all x.(BlendedInto(x) -> DifficultToSeeIn(x))"]}
{"id": "entailmentbank_train_2551", "nl": "things that are the same coloration blend into each other.", "fol": "", "prediction": ["all x.((Thing(x) & SameColoration(x)) -> BlendsInto(x))"]}
{"id": "entailmentbank_train_2552", "nl": "coloration can make an something diffucult to see.", "fol": "", "prediction": ["all x.(Coloration(x) -> MakesDifficultToSee(x))"]}
{"id": "entailmentbank_train_2553", "nl": "to hide means ability to be seen decreases.", "fol": "", "prediction": ["all x.(HuntsMeans(x) -> AbilityDecreases(x))"]}
{"id": "entailmentbank_train_2554", "nl": "coloration is a kind of adaptation for hiding / camouflage.", "fol": "", "prediction": ["all x.(Coloration(x) -> (AdaptationForHiding(x) & AdaptationForCamouflage(x)))"]}
{"id": "entailmentbank_train_2555", "nl": "hiding is a kind of protection against predators.", "fol": "", "prediction": ["all x.(Hunting(x) -> ProtectionAgainstPredators(x))"]}
{"id": "entailmentbank_train_2556", "nl": "coloration is a kind of protection against predators.", "fol": "", "prediction": ["all x.(Coloration(x) -> ProtectsAgainstPredators(x))"]}
{"id": "entailmentbank_train_2557", "nl": "spotted is a kind of coloration.", "fol": "", "prediction": ["all x.(Spotted(x) -> Coloration(x))"]}
{"id": "entailmentbank_train_2558", "nl": "spots are a kind of protection against predators.", "fol": "", "prediction": ["all x.(Spot(x) -> ProtectionAgainstPredators(x))"]}
{"id": "entailmentbank_train_2559", "nl": "sensing is performed by specialized body parts.", "fol": "", "prediction": ["all x y.((Sensing(x) & BodyPart(y)) -> PerformedBy(x,y))"]}
{"id": "entailmentbank_train_2560", "nl": "radial symmetry means an animal has similar body parts dispersed in all directions around a central axis.", "fol": "", "prediction": ["all x.(RadialSymmetry(x) -> (Animal(x) & SimilarBodyParts(x) & DispersedInAllDirections(x)))"]}
{"id": "entailmentbank_train_2561", "nl": "an animal with radial symmetry has specialized body parts for sensing dispersed in all directions aroung a central axis.", "fol": "", "prediction": ["all x.((Animal(x) & RadialSymmetry(x)) -> (SpecializedBodyParts(x) & Sensing(x) & DispersedInAllDirections(x) & CentralAxis(x)))"]}
{"id": "entailmentbank_train_2562", "nl": "an animal can sense things in the direction that their specialized body parts for sensing are facing.", "fol": "", "prediction": ["all x y.((Animal(x) & BodyPart(y) & Sensing(y)) -> CanSenseInDirectionFacing(x,y))"]}
{"id": "entailmentbank_train_2563", "nl": "an animal with radial symmetry can sense predators / food from all directions.", "fol": "", "prediction": ["all x.((Animal(x) & RadialSymmetry(x)) -> (SensesPredators(x) & SensesesFood(x)))"]}
{"id": "entailmentbank_train_2564", "nl": "avoiding something requires sensing that something.", "fol": "", "prediction": ["all x y.((Avoids(x,y) & Something(y)) -> RequiresSense(x,y))"]}
{"id": "entailmentbank_train_2565", "nl": "sensing predators has a positive impact on an animal's survival.", "fol": "", "prediction": ["all x y.((Animal(x) & Predator(y)) -> PositiveImpactOnSurvival(x,y))"]}
{"id": "entailmentbank_train_2566", "nl": "an animal needs to eat food for nutrients.", "fol": "", "prediction": ["all x.(Animal(x) -> NeedsToEatFoodForNutrients(x))"]}
{"id": "entailmentbank_train_2567", "nl": "sensing food has a positive impact on finding food.", "fol": "", "prediction": ["all x.(SensingFood(x) -> PositiveImpactOnFindingFood(x))"]}
{"id": "entailmentbank_train_2568", "nl": "sensing food has a positive impact on an animal's survival.", "fol": "", "prediction": ["all x y.((SensesFood(x) & Animal(y)) -> PositiveImpactOnSurvival(x,y))"]}
{"id": "entailmentbank_train_2569", "nl": "better senses have a positive impact on an animal's survival.", "fol": "", "prediction": ["all x.(BetterSenses(x) -> PositiveImpactOnSurvival(x))"]}
{"id": "entailmentbank_train_2570", "nl": "being able to sense things from all directions improves something's senses.", "fol": "", "prediction": ["all x.((SensesFromAllDirections(x) & ImprovesSenses(x)) -> ImprovesSenses(x))"]}
{"id": "entailmentbank_train_2571", "nl": "being able to sense things from all directions has a positive impact on an animal's survival.", "fol": "", "prediction": ["all x.((Animal(x) & SenseThingsFromAllDirections(x)) -> PositiveImpactOnSurvival(x))"]}
{"id": "entailmentbank_train_2572", "nl": "radial symmetry has a positive impact on an animal's survival by allowing it to sense predators / food from all directions.", "fol": "", "prediction": ["all x.(RadialSymmetry(x) -> (PositiveImpactOnSurvival(x) & AllowsSensePredators(x) & AllowsSenseFood(x)))"]}
{"id": "entailmentbank_train_2573", "nl": "an animal can survive in an environment with little food by storing fat.", "fol": "", "prediction": ["all x y.((Animal(x) & Environment(y) & LittleFood(y)) -> CanSurvive(x,y))"]}
{"id": "entailmentbank_train_2574", "nl": "an animal can survive in a cold environment by storing fat.", "fol": "", "prediction": ["all x.((Animal(x) & ColdEnvironment(x) & StoresFat(x)) -> CanSurvive(x))"]}
{"id": "entailmentbank_train_2575", "nl": "if the environmental temperature / air temperature is too cold then an animal / a living thing in that environment may become cold.", "fol": "", "prediction": ["all x.((EnvironmentalTemperature(x) & TooCold(x)) -> (Animal(x) | LivingThing(x)))"]}
{"id": "entailmentbank_train_2576", "nl": "an animal requires warmth for survival in a cold environment.", "fol": "", "prediction": ["all x.((Animal(x) & ColdEnvironment(x)) -> RequiresWarmthForSurvival(x))"]}
{"id": "entailmentbank_train_2577", "nl": "fat is used to keep animals warm.", "fol": "", "prediction": ["all x.(Fat(x) -> KeepsAnimalsWarm(x))"]}
{"id": "entailmentbank_train_2578", "nl": "fat is used by animals to survive in a cold environment by keeping warm.", "fol": "", "prediction": ["all x y.((Animal(x) & Fat(y)) -> SurvivesInColdEnvironment(x,y))"]}
{"id": "entailmentbank_train_2579", "nl": "fat is used by animals to survive in a cold environment.", "fol": "", "prediction": ["all x y.((Animal(x) & Fat(y)) -> SurvivesInColdEnvironment(x,y))"]}
{"id": "entailmentbank_train_2580", "nl": "traits that help animals survive in a certain kind of environment are often found in animals in that environment.", "fol": "", "prediction": ["all x y.((Talent(x) & Animal(y) & HelpsSurviveInEnvironment(x,y)) -> FoundInEnvironment(x,y))"]}
{"id": "entailmentbank_train_2581", "nl": "layers of fat are often a part of animals that live in cold climates.", "fol": "", "prediction": ["all x.((Animal(x) & ColdClimate(x)) -> LayersOfFat(x))"]}
{"id": "entailmentbank_train_2582", "nl": "an animal requires warmth for survival in cold environments.", "fol": "", "prediction": ["all x.((Animal(x) & ColdEnvironment(x)) -> RequiresWarmthForSurvival(x))"]}
{"id": "entailmentbank_train_2583", "nl": "fat is used by animals to survive in cold environments by keeping warm.", "fol": "", "prediction": ["all x y.((Animal(x) & Fat(y)) -> SurvivesInColdEnvironments(x,y))"]}
{"id": "entailmentbank_train_2584", "nl": "blubber is a kind of fat.", "fol": "", "prediction": ["all x.(Bloober(x) -> Fat(x))"]}
{"id": "entailmentbank_train_2585", "nl": "blubber is often a part of animals that live in cold climates.", "fol": "", "prediction": ["all x.(Bloodber(x) -> (PartOfColdClimates(x) & Animal(x)))"]}
{"id": "entailmentbank_train_2586", "nl": "animals require warmth for survival in cold environments.", "fol": "", "prediction": ["all x.((Animal(x) & ColdEnvironment(x)) -> RequiresWarmthForSurvival(x))"]}
{"id": "entailmentbank_train_2587", "nl": "blubber is used to keep animals warm.", "fol": "", "prediction": ["all x.(Bloober(x) -> KeepsAnimalsWarm(x))"]}
{"id": "entailmentbank_train_2588", "nl": "fur is a part of skin for keeping warm.", "fol": "", "prediction": ["all x.(Fur(x) -> PartOfSkin(x))"]}
{"id": "entailmentbank_train_2589", "nl": "blubber and fur are used by animals for keeping warm.", "fol": "", "prediction": ["all x y.((Animal(x) & Bluebber(y) & Fur(y)) -> KeepsWarm(x,y))"]}
{"id": "entailmentbank_train_2590", "nl": "blubber and fur are used for survival in cold environments.", "fol": "", "prediction": ["all x.((Bloodber(x) | Fur(x)) -> UsedForSurvivalInColdEnvironments(x))"]}
{"id": "entailmentbank_train_2591", "nl": "antarctica is extremely cold in temperature.", "fol": "", "prediction": ["all x.(Antarctica(x) -> ExtremelyCold(x))"]}
{"id": "entailmentbank_train_2592", "nl": "blubber and fur are used for survival in antarctica.", "fol": "", "prediction": ["all x.((Bloodber(x) | Fur(x)) -> UsedForSurvivalInAntarctica(x))"]}
{"id": "entailmentbank_train_2593", "nl": "seals are able to live off the coast of antarctica while frogs, snakes, and pathers are not.", "fol": "", "prediction": ["all x y.((Seal(x) & Frog(y) & Snake(y) & Pather(y)) -> (LivesOffAntarctica(x) & -LivesOffAntarctica(y)))"]}
{"id": "entailmentbank_train_2594", "nl": "seals are able to live off the coast of antarctica because they have fur and blubber.", "fol": "", "prediction": ["all x.((Seal(x) & LivesOffAntarctica(x)) -> (HasFur(x) & HasBlumber(x)))"]}
{"id": "entailmentbank_train_2595", "nl": "if the environmental temperature is too cold then an animal in that environment may become cold.", "fol": "", "prediction": ["all x.((Environment(x) & TooCold(x)) -> MayBecomeCold(x))"]}
{"id": "entailmentbank_train_2596", "nl": "an animal requires warmth for survival in cold temperatures.", "fol": "", "prediction": ["all x.((Animal(x) & ColdTemperatures(x)) -> RequiresWarmthForSurvival(x))"]}
{"id": "entailmentbank_train_2597", "nl": "thick fur can be used for keeping warm.", "fol": "", "prediction": ["all x.(ThickFur(x) -> CanBeUsedForWarming(x))"]}
{"id": "entailmentbank_train_2598", "nl": "thick fur can be used for survival in cold temperatures by keeping warm.", "fol": "", "prediction": ["all x.(ThickFur(x) -> (UsedForSurvival(x) & ColdTemperatures(x) & KeepsWarm(x)))"]}
{"id": "entailmentbank_train_2599", "nl": "thick fur can be used for survival in winter by keeping warm.", "fol": "", "prediction": ["all x.(ThickFur(x) -> (UsedForSurvival(x) & KeepsWarm(x)))"]}
{"id": "entailmentbank_train_2600", "nl": "when fur grows it becomes thicker.", "fol": "", "prediction": ["all x.((FurGrows(x) & Thicker(x)) -> Grows(x))"]}
{"id": "entailmentbank_train_2601", "nl": "some animals' fur grows thicker for staying warm in the winter.", "fol": "", "prediction": ["exists x.(Animal(x) & FurGrowsThicker(x) & StaysWarmInWinter(x))"]}
{"id": "entailmentbank_train_2602", "nl": "a rabbit is a kind of animal.", "fol": "", "prediction": ["all x.(Rabbit(x) -> Animal(x))"]}
{"id": "entailmentbank_train_2603", "nl": "a rabbit's fur grows thicker in the winter.", "fol": "", "prediction": ["all x.(Rabbit(x) -> GrowsThickerInWinter(x))"]}
{"id": "entailmentbank_train_2604", "nl": "thickness is a property of fur that contains the ordered values thin / medium / thick.", "fol": "", "prediction": ["all x.(Thickness(x) -> (PropertyOfFur(x) & ContainsOrderedValues(x,Thick)))"]}
{"id": "entailmentbank_train_2605", "nl": "thick fur is used by animals for keeping warm in cold temperatures.", "fol": "", "prediction": ["all x.(ThickFur(x) -> UsedByAnimalsForWarmTemperatures(x))"]}
{"id": "entailmentbank_train_2606", "nl": "thick fur is used by animals for keeping warm in winter.", "fol": "", "prediction": ["all x.(ThickFur(x) -> UsedByAnimalsForWarmInWinter(x))"]}
{"id": "entailmentbank_train_2607", "nl": "weather changes from seasons to seasons.", "fol": "", "prediction": ["all x y.((Weather(x) & Season(y)) -> ChangesFromTo(x,y))"]}
{"id": "entailmentbank_train_2608", "nl": "temperature changes from seasons to seasons.", "fol": "", "prediction": ["all x y.((Season(x) & Season(y)) -> TemperatureChange(x,y))"]}
{"id": "entailmentbank_train_2609", "nl": "winter is a kind of season.", "fol": "", "prediction": ["all x.(Winter(x) -> Season(x))"]}
{"id": "entailmentbank_train_2610", "nl": "temperature changes from another season to winter.", "fol": "", "prediction": ["all x y.((Season(x) & Winter(y)) -> TemperatureChange(x,y))"]}
{"id": "entailmentbank_train_2611", "nl": "temperatures become cold as the season changes to winter.", "fol": "", "prediction": ["all x.((Temperature(x) & SeasonChange(x)) -> Cold(x))"]}
{"id": "entailmentbank_train_2612", "nl": "an animal requires warmth for survival as the season changes to winter.", "fol": "", "prediction": ["all x.((Animal(x) & SeasonChange(x,Winter)) -> RequiresWarmthForSurvival(x))"]}
{"id": "entailmentbank_train_2613", "nl": "thick fur can be used for keeping warm as the season changes to winter.", "fol": "", "prediction": ["all x.(ThickFur(x) -> KeepsWarm(x))"]}
{"id": "entailmentbank_train_2614", "nl": "some animals' fur grows thicker for staying warm as the season changes to winter.", "fol": "", "prediction": ["exists x.(Animal(x) & FurGrowsThicker(x) & StaysWarm(x) & SeasonChangesToWinter(x))"]}
{"id": "entailmentbank_train_2615", "nl": "a fox grows thick fur as the seasons change.", "fol": "", "prediction": ["all x.(Fox(x) -> GrowsThickFur(x))"]}
{"id": "entailmentbank_train_2616", "nl": "a fox grows thick fur to keep warm as the season changes to winter.", "fol": "", "prediction": ["all x.(Fox(x) -> GrowsThickFur(x))"]}
{"id": "entailmentbank_train_2617", "nl": "fur is a covering around the body of an animal.", "fol": "", "prediction": ["all x y.((Fur(x) & Animal(y)) -> CoversAboutBody(x,y))"]}
{"id": "entailmentbank_train_2618", "nl": "a covering can be used as a kind of protection against cold weather.", "fol": "", "prediction": ["all x.(Covering(x) -> CanBeUsedAsProtectionAgainstColdWeather(x))"]}
{"id": "entailmentbank_train_2619", "nl": "thick fur is used for survival in a cold environment by keeping warm.", "fol": "", "prediction": ["all x.(ThickFur(x) -> (UsedForSurvival(x) & ColdEnvironment(x) & KeepsWarm(x)))"]}
{"id": "entailmentbank_train_2620", "nl": "the arctic environment usually is cold in temperature from being at a northern lattitude.", "fol": "", "prediction": ["all x.(ArcticEnvironment(x) -> ColdTemperature(x))"]}
{"id": "entailmentbank_train_2621", "nl": "thick fur is used for survival in an arctic environment by keeping warm.", "fol": "", "prediction": ["all x.(ThickFur(x) -> (UsedForSurvival(x) & KeepsWarm(x)))"]}
{"id": "entailmentbank_train_2622", "nl": "a covering can be used as protection against cold weather.", "fol": "", "prediction": ["all x.(Covering(x) -> ProtectsAgainstColdWeather(x))"]}
{"id": "entailmentbank_train_2623", "nl": "thick fur can be used for survival in a cold environment by keeping warm.", "fol": "", "prediction": ["all x.(ThickFur(x) -> (UsedForSurvival(x) & ColdEnvironment(x) & KeepsWarm(x)))"]}
{"id": "entailmentbank_train_2624", "nl": "snow is cold.", "fol": "", "prediction": ["all x.(Snow(x) -> Cold(x))"]}
{"id": "entailmentbank_train_2625", "nl": "a snowy environment is a cold environment.", "fol": "", "prediction": ["all x.(SnowyEnvironment(x) -> ColdEnvironment(x))"]}
{"id": "entailmentbank_train_2626", "nl": "thick fur can be used for survival in a snowy environment by keeping warm.", "fol": "", "prediction": ["all x.((ThickFur(x) & SnowyEnvironment(x) & KeepsWarm(x)) -> SurvivesIn(x,y))"]}
{"id": "entailmentbank_train_2627", "nl": "something that is used for survival has a positive impact on survival.", "fol": "", "prediction": ["all x.((UsedForSurvival(x) & PositiveImpactOnSurvival(x)) -> PositiveImpactOnSurvival(x))"]}
{"id": "entailmentbank_train_2628", "nl": "thick fur has a positive impact on an animal's survival in a snowy environment.", "fol": "", "prediction": ["all x y.((ThickFur(x) & Animal(y) & SnowyEnvironment(y)) -> PositiveImpactOnSurvival(x,y))"]}
{"id": "entailmentbank_train_2629", "nl": "different birds have different shaped beaks.", "fol": "", "prediction": ["all x.(Bird(x) -> DifferentShapeBeak(x))"]}
{"id": "entailmentbank_train_2630", "nl": "a beak is used for catching food by some birds.", "fol": "", "prediction": ["exists x.(Beak(x) & UsedForCatchingFood(x))"]}
{"id": "entailmentbank_train_2631", "nl": "birds with beaks of different shapes eat different foods.", "fol": "", "prediction": ["all x.((Bird(x) & HasBeak(x,y) & DifferentShapes(y)) -> EatsDifferentFoods(x))"]}
{"id": "entailmentbank_train_2632", "nl": "smaller means less / lower in size.", "fol": "", "prediction": ["all x.(Smaller(x) -> (LessSize(x) | LowerSize(x)))"]}
{"id": "entailmentbank_train_2633", "nl": "skinny means small in size.", "fol": "", "prediction": ["all x.(Skinny(x) -> SmallSize(x))"]}
{"id": "entailmentbank_train_2634", "nl": "small and skinny describe similar sizes.", "fol": "", "prediction": ["all x.((Small(x) & Skinny(x)) -> SimilarSizes(x))"]}
{"id": "entailmentbank_train_2635", "nl": "in order to go inside place, something must be smaller than or similar in size to that place.", "fol": "", "prediction": ["all x.((Place(x) & SmallerThanOrSameSize(x)) -> InsidePlace(x))"]}
{"id": "entailmentbank_train_2636", "nl": "something that is skinny can go in something that is small.", "fol": "", "prediction": ["all x.((Skinny(x) & Small(x)) -> CanGoIn(x))"]}
{"id": "entailmentbank_train_2637", "nl": "in order to obtain something from a place, you must be able to go inside of that place.", "fol": "", "prediction": ["all x y.((Place(x) & Place(y)) -> CanGoInside(x,y))"]}
{"id": "entailmentbank_train_2638", "nl": "something skinny can obtain something from a small place.", "fol": "", "prediction": ["all x y.((Skinny(x) & SmallPlace(y)) -> CanObtain(x,y))"]}
{"id": "entailmentbank_train_2639", "nl": "a skinny beak is used for obtaining food by a bird from small spaces.", "fol": "", "prediction": ["all x y.((SkinnyBeak(x) & Bird(y)) -> UsedForObstainingFood(x,y))"]}
{"id": "entailmentbank_train_2640", "nl": "prey is a kind of food for predators.", "fol": "", "prediction": ["all x.(Prey(x) -> FoodForPredators(x))"]}
{"id": "entailmentbank_train_2641", "nl": "claws are used to catch prey by some predators.", "fol": "", "prediction": ["all x y.((Claw(x) & Predator(y)) -> UsedToCatch(x,y))"]}
{"id": "entailmentbank_train_2642", "nl": "claws are used by some predators to catch food.", "fol": "", "prediction": ["exists x.(Predator(x) & UsesClawsToCatchFood(x))"]}
{"id": "entailmentbank_train_2643", "nl": "birds sometimes eat other animals.", "fol": "", "prediction": ["exists x.(Bird(x) & Animal(y) & Eats(x,y))"]}
{"id": "entailmentbank_train_2644", "nl": "some birds are predators.", "fol": "", "prediction": ["exists x.(Bird(x) & Predator(x))"]}
{"id": "entailmentbank_train_2645", "nl": "claws are used by some birds to catch food.", "fol": "", "prediction": ["exists x.(Bird(x) & UsesClaws(x))"]}
{"id": "entailmentbank_train_2646", "nl": "frogs catch flying insects with their tongues.", "fol": "", "prediction": ["all x y.((Frog(x) & FlyingInsect(y)) -> CatchesWithTongue(x,y))"]}
{"id": "entailmentbank_train_2647", "nl": "salamanders catch flying insects with their tongues.", "fol": "", "prediction": ["all x.(Salamander(x) -> (CatchFlyingInsects(x) & WithTongue(x)))"]}
{"id": "entailmentbank_train_2648", "nl": "frogs and salamanders catch flying insects with their tongues.", "fol": "", "prediction": ["all x y.((Frog(x) & Salamander(y)) -> (CatchFlyingInsects(x,y) & WithTongue(y)))"]}
{"id": "entailmentbank_train_2649", "nl": "if somthing is sticky then other things will become stuck to it.", "fol": "", "prediction": ["all x.((Stick(x) & Somthing(x)) -> OtherThingsBecomeStickedTo(x))"]}
{"id": "entailmentbank_train_2650", "nl": "if something is stuck then it can be caught more easily.", "fol": "", "prediction": ["all x.((Stuck(x) & CanBeCaughtMoreEasily(x)) -> CanBeCaughtMoreEasily(x))"]}
{"id": "entailmentbank_train_2651", "nl": "stickyness can be used for catching things.", "fol": "", "prediction": ["all x.(Smoothness(x) -> CanBeUsedForCatchingThings(x))"]}
{"id": "entailmentbank_train_2652", "nl": "predators eat prey.", "fol": "", "prediction": ["all x y.((Predator(x) & Prey(y)) -> Eats(x,y))"]}
{"id": "entailmentbank_train_2653", "nl": "eating prey requires catching prey.", "fol": "", "prediction": ["all x.(EatingPrey(x) -> RequiresCatchingPrey(x))"]}
{"id": "entailmentbank_train_2654", "nl": "predators must catch prey to eat prey.", "fol": "", "prediction": ["all x y.((Predator(x) & Prey(y)) -> Catch(x,y))"]}
{"id": "entailmentbank_train_2655", "nl": "some animals must catch prey to eat.", "fol": "", "prediction": ["exists x.(Animal(x) & CatchPrey(x))"]}
{"id": "entailmentbank_train_2656", "nl": "animals must eat to survive.", "fol": "", "prediction": ["all x.(Animal(x) -> MustEatToSurvive(x))"]}
{"id": "entailmentbank_train_2657", "nl": "some animals must catch prey to survive.", "fol": "", "prediction": ["exists x.(Animal(x) & CatchPrey(x))"]}
{"id": "entailmentbank_train_2658", "nl": "stickyness can be used for survival by catching things.", "fol": "", "prediction": ["all x.(Smoothness(x) -> CanBeUsedForSurvival(x))"]}
{"id": "entailmentbank_train_2659", "nl": "adaptations are used for survival.", "fol": "", "prediction": ["all x.(Adaptation(x) -> UsedForSurvival(x))"]}
{"id": "entailmentbank_train_2660", "nl": "stickyness is a kind of adaptation for catching things.", "fol": "", "prediction": ["all x.(Smoothness(x) -> AdaptationForCatchingThings(x))"]}
{"id": "entailmentbank_train_2661", "nl": "a sticky tongue is a kind of adaptation for catching flying insects.", "fol": "", "prediction": ["all x.(SmoothTongue(x) -> AdaptationForFlyingInsects(x))"]}
{"id": "entailmentbank_train_2662", "nl": "in order to eat food an animal must find food.", "fol": "", "prediction": ["all x.((Animal(x) & FindsFood(x)) -> EatsFood(x))"]}
{"id": "entailmentbank_train_2663", "nl": "eating food is used to get nutrients / energy by  animals.", "fol": "", "prediction": ["all x y.((EatingFood(x) & Animal(y)) -> GetsNutrients(x,y))"]}
{"id": "entailmentbank_train_2664", "nl": "animals must find food to get nutrients / energy.", "fol": "", "prediction": ["all x.(Animal(x) -> (FindsFood(x) & GetsNutrients(x) & GetsEnergy(x)))"]}
{"id": "entailmentbank_train_2665", "nl": "finding something requires sensing that something.", "fol": "", "prediction": ["all x y.((Finding(x) & Something(y)) -> RequiresSensing(x,y))"]}
{"id": "entailmentbank_train_2666", "nl": "animals must sense food to find food.", "fol": "", "prediction": ["all x.(Animal(x) -> MustSenseFoodToFindFood(x))"]}
{"id": "entailmentbank_train_2667", "nl": "feeling is when an living thing senses through touch.", "fol": "", "prediction": ["all x.(LivingThing(x) -> Feeling(x))"]}
{"id": "entailmentbank_train_2668", "nl": "feeling can be used for finding food.", "fol": "", "prediction": ["all x.(Feeling(x) -> CanBeUsedForFindingFood(x))"]}
{"id": "entailmentbank_train_2669", "nl": "whiskers are a part of some fish for feeling.", "fol": "", "prediction": ["all x.(Whiskers(x) -> PartOfFish(x))"]}
{"id": "entailmentbank_train_2670", "nl": "whiskers are part of a fish used for finding food.", "fol": "", "prediction": ["all x.(Whiskers(x) -> Fish(x))"]}
{"id": "entailmentbank_train_2671", "nl": "an animal / living thing requires nutrients for survival.", "fol": "", "prediction": ["all x.((Animal(x) & LivingThing(x)) -> RequiresNutrientsForSurvival(x))"]}
{"id": "entailmentbank_train_2672", "nl": "an animal requires food for survival.", "fol": "", "prediction": ["all x.(Animal(x) -> RequiresFoodForSurvival(x))"]}
{"id": "entailmentbank_train_2673", "nl": "a resource is something that is required for survival.", "fol": "", "prediction": ["all x.(Resource(x) -> RequiresSurvival(x))"]}
{"id": "entailmentbank_train_2674", "nl": "food is a resource for animals.", "fol": "", "prediction": ["all x.(Food(x) -> ResourceForAnimals(x))"]}
{"id": "entailmentbank_train_2675", "nl": "the ability to find resources has a positive impact on an animal's survival.", "fol": "", "prediction": ["all x.((FindResources(x) & PositiveImpactOnSurvival(x)) -> Animal(x))"]}
{"id": "entailmentbank_train_2676", "nl": "the ability to find food has a positive impact on an animal's survival.", "fol": "", "prediction": ["all x.((FindFood(x) & PositiveImpactOnSurvival(x)) -> Animal(x))"]}
{"id": "entailmentbank_train_2677", "nl": "whiskers have a positive impact on a fish's survival by helping it find food.", "fol": "", "prediction": ["all x y.((Whiskers(x) & Fish(y)) -> (PositiveImpactOnSurvival(x,y) & HelpsFindFood(x,y)))"]}
{"id": "entailmentbank_train_2678", "nl": "a something becomes larger it is able to act upon more of something else.", "fol": "", "prediction": ["all x.((MakingLarger(x) & ActsOnMoreOfOther(x)) -> ActsOnMoreOfOther(x))"]}
{"id": "entailmentbank_train_2679", "nl": "fins move animals through water by pushing against water.", "fol": "", "prediction": ["all x y.((Fin(x) & Animal(y)) -> MovesThroughWater(x,y))"]}
{"id": "entailmentbank_train_2680", "nl": "the larger and animal's fin is, the more water it can push against.", "fol": "", "prediction": ["all x.((LargerFin(x) & Animal(x)) -> MoreWaterPush(x))"]}
{"id": "entailmentbank_train_2681", "nl": "the more water an animal's fin pushes against, the faster that animal will move through water.", "fol": "", "prediction": ["all x y.((Animal(x) & Water(y) & PushesAgainst(x,y)) -> FasterWaterMovement(x))"]}
{"id": "entailmentbank_train_2682", "nl": "the larger an animal's fin is, the faster it can move through water.", "fol": "", "prediction": ["all x.((Animal(x) & LargerFin(x)) -> FasterMovement(x))"]}
{"id": "entailmentbank_train_2683", "nl": "fins are a part of aquatic animals used for moving through water.", "fol": "", "prediction": ["all x.(Fin(x) -> (AquaticAnimal(x) & UsedForMovingThroughWater(x)))"]}
{"id": "entailmentbank_train_2684", "nl": "large fins can be used to move quickly through water.", "fol": "", "prediction": ["all x.(LargeFin(x) -> MovesQuickly(x))"]}
{"id": "entailmentbank_train_2685", "nl": "if an organism's prey moves quickly then that organism may need to move quickly to catch its prey.", "fol": "", "prediction": ["all x y.((Organism(x) & Prey(y) & MovesQuickly(x,y)) -> MayNeedToMoveQuickly(x,y))"]}
{"id": "entailmentbank_train_2686", "nl": "some predators move quickly to catch prey.", "fol": "", "prediction": ["exists x.(Predator(x) & MovesQuicklyToCatchPrey(x))"]}
{"id": "entailmentbank_train_2687", "nl": "large fins can be used to move quickly through water in order to catch prey.", "fol": "", "prediction": ["all x.(LargeFin(x) -> (MovesQuickly(x) & CatchesPrey(x)))"]}
{"id": "entailmentbank_train_2688", "nl": "food can be a source of an odor.", "fol": "", "prediction": ["all x.(Food(x) -> SourceOfOdor(x))"]}
{"id": "entailmentbank_train_2689", "nl": "smell is used for detecting odor.", "fol": "", "prediction": ["all x.(Smell(x) -> UsedForDetectingOdor(x))"]}
{"id": "entailmentbank_train_2690", "nl": "smell can be used to detect food odors.", "fol": "", "prediction": ["all x.(Smell(x) -> CanDetectFoodOdors(x))"]}
{"id": "entailmentbank_train_2691", "nl": "sense is a kind of characteristic of an animal.", "fol": "", "prediction": ["all x.(Sense(x) -> CharacteristicOfAnimal(x))"]}
{"id": "entailmentbank_train_2692", "nl": "smell is a kind of sense.", "fol": "", "prediction": ["all x.(Smell(x) -> KindOfSense(x))"]}
{"id": "entailmentbank_train_2693", "nl": "smell is a kind of characteristic of some animals.", "fol": "", "prediction": ["all x.(Smell(x) -> CharacteristicOfAnimals(x))"]}
{"id": "entailmentbank_train_2694", "nl": "smell is used for finding food by some animals.", "fol": "", "prediction": ["exists x.(Animal(x) & Smell(x) & UsedForFindingFood(x))"]}
{"id": "entailmentbank_train_2695", "nl": "a fox is a kind of animal.", "fol": "", "prediction": ["all x.(Fox(x) -> Animal(x))"]}
{"id": "entailmentbank_train_2696", "nl": "smell is used for finding food by foxes.", "fol": "", "prediction": ["all x y.((Fox(x) & Fox(y)) -> Smell(x,y))"]}
{"id": "entailmentbank_train_2697", "nl": "a sound must first be emitted before it can reflect off of a surface.", "fol": "", "prediction": ["all x.(Sound(x) -> MustBeEmittedBeforeReflectingOffSurface(x))"]}
{"id": "entailmentbank_train_2698", "nl": "a sound must be emitted for an echo to occur.", "fol": "", "prediction": ["all x.(Echo(x) -> SoundEmitted(x))"]}
{"id": "entailmentbank_train_2699", "nl": "an echo must occur in order to be heard.", "fol": "", "prediction": ["all x.(Echo(x) -> MustOccur(x))"]}
{"id": "entailmentbank_train_2700", "nl": "echolocation is when some animals detect objects by hearing echoes by emitting sound.", "fol": "", "prediction": ["all x.(Echolocation(x) -> (DetectsObjectsByHearingEchoes(x) & EmitsSound(x)))"]}
{"id": "entailmentbank_train_2701", "nl": "echolocation requires echos to occur.", "fol": "", "prediction": ["all x.(Echolocation(x) -> RequiresEchos(x))"]}
{"id": "entailmentbank_train_2702", "nl": "a sound must be emitted in order for an animal to echolocate.", "fol": "", "prediction": ["all x y.((Animal(x) & Sound(y) & Emitted(y)) -> Echolocates(x,y))"]}
{"id": "entailmentbank_train_2703", "nl": "bats find their prey by sensing echos.", "fol": "", "prediction": ["all x.(Bat(x) -> (FindsPrey(x) & SensingEchos(x)))"]}
{"id": "entailmentbank_train_2704", "nl": "bats find their prey by using echolocation.", "fol": "", "prediction": ["all x.(Bat(x) -> (FindsPrey(x) & UsesEcholocation(x)))"]}
{"id": "entailmentbank_train_2705", "nl": "bats must emit sound in order to echolocate.", "fol": "", "prediction": ["all x.(Bat(x) -> EmitsSound(x))"]}
{"id": "entailmentbank_train_2706", "nl": "hearing is a kind of sense.", "fol": "", "prediction": ["all x.(Hearing(x) -> KindOfSense(x))"]}
{"id": "entailmentbank_train_2707", "nl": "hunting requires sensing prey.", "fol": "", "prediction": ["all x.(Hunting(x) -> RequiresSensingPrey(x))"]}
{"id": "entailmentbank_train_2708", "nl": "hearing can be used for hunting prey.", "fol": "", "prediction": ["all x.(Hearing(x) -> HuntingPrey(x))"]}
{"id": "entailmentbank_train_2709", "nl": "hearing is used for sensing sound by animals.", "fol": "", "prediction": ["all x y.((Hearing(x) & Animal(y)) -> SensingSound(x,y))"]}
{"id": "entailmentbank_train_2710", "nl": "sensing sound can be used for hunting prey.", "fol": "", "prediction": ["all x.(SensingSound(x) -> HuntingPrey(x))"]}
{"id": "entailmentbank_train_2711", "nl": "an echo is a kind of sound.", "fol": "", "prediction": ["all x.(Echo(x) -> Sound(x))"]}
{"id": "entailmentbank_train_2712", "nl": "sensing echos can be used for hunting prey.", "fol": "", "prediction": ["all x.(SensingEchos(x) -> HuntingPrey(x))"]}
{"id": "entailmentbank_train_2713", "nl": "echolocation can be used for hunting prey.", "fol": "", "prediction": ["all x.(Echolocation(x) -> HuntingPrey(x))"]}
{"id": "entailmentbank_train_2714", "nl": "bats must emit sound in order to hunt their prey.", "fol": "", "prediction": ["all x.(Bat(x) -> (EmitsSound(x) & HuntsPrey(x)))"]}
{"id": "entailmentbank_train_2715", "nl": "large canopies / trees block sunlight from reaching the ground.", "fol": "", "prediction": ["all x.(LargeCanopies(x) -> BlocksSunlight(x))"]}
{"id": "entailmentbank_train_2716", "nl": "tropical rainforests contain many large trees.", "fol": "", "prediction": ["all x.(TropicalRainforest(x) -> ContainsManyLargeTrees(x))"]}
{"id": "entailmentbank_train_2717", "nl": "sunlight is blocked by large canopies / trees in rainforests.", "fol": "", "prediction": ["all x y.((Sunlight(x) & LargeCanopies(y) & LargeTrees(y)) -> Blocks(x,y))"]}
{"id": "entailmentbank_train_2718", "nl": "forest canopies blocking sunlight decreases the availability of sunlight on the forest floor.", "fol": "", "prediction": ["all x y.((ForestCanopies(x) & BlocksSunlight(x)) -> DecreasesSunlightAvailability(y))"]}
{"id": "entailmentbank_train_2719", "nl": "tropical rainforest floors are low in availability of sunlight.", "fol": "", "prediction": ["all x.(TropicalRainforestFloor(x) -> LowAvailabilityOfSunlight(x))"]}
{"id": "entailmentbank_train_2720", "nl": "a required resource being low in availability has a negative impact on the something that requires that resource.", "fol": "", "prediction": ["all x.((RequiredResource(x) & LowAvailability(x)) -> NegativeImpactOnRequiredResource(x))"]}
{"id": "entailmentbank_train_2721", "nl": "a plant requires sunlight for photosynthesis.", "fol": "", "prediction": ["all x.((Plant(x) & RequiresSunlight(x)) -> Photosynthesis(x))"]}
{"id": "entailmentbank_train_2722", "nl": "a low availability of sunlight has a negative impact on plants.", "fol": "", "prediction": ["all x.(LowAvailabilityOfSunlight(x) -> NegativeImpactOnPlants(x))"]}
{"id": "entailmentbank_train_2723", "nl": "low availability of sunlight has a negative impact on plants in tropical rainforest floors.", "fol": "", "prediction": ["all x.(LowAvailabilityOfSunlight(x) -> NegativeImpactOnPlantsInTropicalRainforestFloors(x))"]}
{"id": "entailmentbank_train_2724", "nl": "when a plant grows, the size of / number of the leaves of that plant may increase.", "fol": "", "prediction": ["all x y.((Plant(x) & Grows(x)) -> (SizeOfLeaves(y) | NumberOfLeaves(y)))"]}
{"id": "entailmentbank_train_2725", "nl": "as the size of a leaf increases, the amount of sunlight absorbed by that leaf will increase.", "fol": "", "prediction": ["all x y.((Leaf(x) & Leaf(y) & IncreasesSize(x,y)) -> IncreasesSunlightAbsorption(x,y))"]}
{"id": "entailmentbank_train_2726", "nl": "large leaves are a kind of adaptation for absorbing sunlight.", "fol": "", "prediction": ["all x.(LargeLeaves(x) -> AdaptationForSunlight(x))"]}
{"id": "entailmentbank_train_2727", "nl": "plants on tropical rainforest floors grow large leaves due to the low availability of sunlight.", "fol": "", "prediction": ["all x.((Plant(x) & TropicalRainforestFloors(x) & LowSunlightAvailability(x)) -> GrowsLargeLeaves(x))"]}
{"id": "entailmentbank_train_2728", "nl": "if something increases something else then that something has a positive impact on that something else.", "fol": "", "prediction": ["all x y.((Increases(x,y) & Something(y)) -> PositiveImpact(x,y))"]}
{"id": "entailmentbank_train_2729", "nl": "increasing the size of a leaf has a positive impact on that leaf's ability to absorb sunlight.", "fol": "", "prediction": ["all x y.((Leaf(x) & Leaf(y) & IncreasesSize(x,y)) -> PositiveImpactOnAbsorbingSunlight(x,y))"]}
{"id": "entailmentbank_train_2730", "nl": "a leaf is a part of a plant used for absorbing sunlight to perform photosynthesis.", "fol": "", "prediction": ["all x.(Leaf(x) -> (PartOfPlant(x) & AbsorbsSunlight(x) & PerformsPhotosynthesis(x)))"]}
{"id": "entailmentbank_train_2731", "nl": "increasing the size of a plant' leaves has a positive impact on a plant's ability to perform photosynthesis.", "fol": "", "prediction": ["all x y.((Plant(x) & Plant(y) & IncreasesSizeOfLeaves(x,y)) -> PositiveImpactOnPhotosynthesis(x,y))"]}
{"id": "entailmentbank_train_2732", "nl": "a plant requires photosynthesis to survive.", "fol": "", "prediction": ["all x.((Plant(x) & RequiresPhotosynthesis(x)) -> Survives(x))"]}
{"id": "entailmentbank_train_2733", "nl": "increasing the size of a plant's leaves have a positive impact on that plant's survival.", "fol": "", "prediction": ["all x y.((Plant(x) & Plant(y) & IncreasesSizeOfLeaves(x,y)) -> PositiveImpactOnSurvival(x,y))"]}
{"id": "entailmentbank_train_2734", "nl": "faster means an increase in speed.", "fol": "", "prediction": ["all x.(Faster(x) -> IncreaseInSpeed(x))"]}
{"id": "entailmentbank_train_2735", "nl": "growth occurs at a rate ranging from slow to fast.", "fol": "", "prediction": ["all x.((Growth(x) & Rate(x,Slow) & Rate(x,Fast)) -> Occurs(x))"]}
{"id": "entailmentbank_train_2736", "nl": "fast growth increases the speed of growth.", "fol": "", "prediction": ["all x.(FastGrowth(x) -> IncreasesSpeedOfGrowth(x))"]}
{"id": "entailmentbank_train_2737", "nl": "when a plant grows, the size of the leaves of that plant may increase.", "fol": "", "prediction": ["all x y.((Plant(x) & Grows(x)) -> SizeOfLeavesMayIncrease(y))"]}
{"id": "entailmentbank_train_2738", "nl": "fast growth causes the leaves of a plant to increase in size more quickly.", "fol": "", "prediction": ["all x y.((FastGrowth(x) & Plant(y)) -> IncreasesSize(x,y))"]}
{"id": "entailmentbank_train_2739", "nl": "fast leaf growth has a positive impact on a plant's survival.", "fol": "", "prediction": ["all x y.((FastLeafGrowth(x) & Plant(y)) -> PositiveImpactOnSurvival(x,y))"]}
{"id": "entailmentbank_train_2740", "nl": "is something has a positive impact on something else, then the opposite of that something will have a negative impact on that something else.", "fol": "", "prediction": ["all x y.((PositiveImpact(x) & PositiveImpact(x) & NegativeImpact(y)) -> OppositeOf(x,y))"]}
{"id": "entailmentbank_train_2741", "nl": "fast is the opposite of slow.", "fol": "", "prediction": ["all x.(Fast(x) -> Slow(x))"]}
{"id": "entailmentbank_train_2742", "nl": "if being fast has a positive impact on something, then being slow will have a negative impact on that something.", "fol": "", "prediction": ["all x.((Fast(x) & PositiveImpact(x)) -> NegativeImpact(x))"]}
{"id": "entailmentbank_train_2743", "nl": "slow leaf growth has a negative impact on a plant's survival.", "fol": "", "prediction": ["all x y.((SlowLeafGrowth(x) & Plant(y)) -> NegativeImpactOnSurvival(x,y))"]}
{"id": "entailmentbank_train_2744", "nl": "eating something has a negative impact on that something.", "fol": "", "prediction": ["all x y.((Eats(x,y) & Something(y)) -> NegativeImpact(x,y))"]}
{"id": "entailmentbank_train_2745", "nl": "animals eat cacti.", "fol": "", "prediction": ["all x.(Animal(x) -> EatsCactus(x))"]}
{"id": "entailmentbank_train_2746", "nl": "animals have a negative impact on cacti.", "fol": "", "prediction": ["all x y.((Animal(x) & Cactus(y)) -> NegativeImpact(x,y))"]}
{"id": "entailmentbank_train_2747", "nl": "if something has a negative impact on an organism then that organism must protect itself from that something.", "fol": "", "prediction": ["all x y.((Organism(x) & NegativeImpact(x) & Organism(y)) -> ProtectsFrom(x,y))"]}
{"id": "entailmentbank_train_2748", "nl": "a cactus must protect itself from animals.", "fol": "", "prediction": ["all x.(Cactus(x) -> ProtectsFromAnimals(x))"]}
{"id": "entailmentbank_train_2749", "nl": "a spine is a part of a cactus that is hard and located on the outside of the cactus.", "fol": "", "prediction": ["all x y.((Spine(x) & Cactus(y) & Hard(x) & OutsideOfCactus(x,y)) -> PartOf(x,y))"]}
{"id": "entailmentbank_train_2750", "nl": "something hard / something strong can be used for protection.", "fol": "", "prediction": ["all x.((Hard(x) | Strong(x)) -> CanBeUsedForProtection(x))"]}
{"id": "entailmentbank_train_2751", "nl": "a spine is a part of a cactus used for protection.", "fol": "", "prediction": ["all x y.((Spine(x) & Cactus(y)) -> PartOf(x,y))"]}
{"id": "entailmentbank_train_2752", "nl": "a cactus spine is a part of a cactus for protecting the cactus from animals.", "fol": "", "prediction": ["all x y.((CactusSpine(x) & Cactus(y)) -> PartOfCactus(x,y))"]}
{"id": "entailmentbank_train_2753", "nl": "a cactus spine has a positive impact on a cactus's survival by protecting the cactus from animals.", "fol": "", "prediction": ["all x y.((CactusSpine(x) & Cactus(y)) -> (PositiveImpactOnSurvival(x,y) & ProtectsFromAnimals(x,y)))"]}
{"id": "entailmentbank_train_2754", "nl": "as the thickness of something increases, the resistance  of that something to damage will increase.", "fol": "", "prediction": ["all x y.((Thickness(x) & Thickness(y) & Increases(x,y)) -> ResistanceToDamage(x,y))"]}
{"id": "entailmentbank_train_2755", "nl": "bark is a protective covering around the trunk of / branches of a tree.", "fol": "", "prediction": ["all x.(Bark(x) -> (ProtectiveCovering(x) & CoversTreeTrunk(x) & CoversBranches(x)))"]}
{"id": "entailmentbank_train_2756", "nl": "thick bark protects a tree from damage.", "fol": "", "prediction": ["all x y.((ThickBark(x) & Tree(y)) -> ProtectsFromDamage(x,y))"]}
{"id": "entailmentbank_train_2757", "nl": "burning a living thing usually causes harm to that living thing.", "fol": "", "prediction": ["all x y.((Burning(x) & LivingThing(y)) -> CausesHarm(x,y))"]}
{"id": "entailmentbank_train_2758", "nl": "fire causes burning.", "fol": "", "prediction": ["all x.(Fire(x) -> CausesBurning(x))"]}
{"id": "entailmentbank_train_2759", "nl": "fire causes harm to living things.", "fol": "", "prediction": ["all x y.((Fire(x) & LivingThing(y)) -> CausesHarm(x,y))"]}
{"id": "entailmentbank_train_2760", "nl": "thick bark protects a tree from damage caused by fire.", "fol": "", "prediction": ["all x y.((ThickBark(x) & Tree(y)) -> ProtectsFromFireDamage(x,y))"]}
{"id": "entailmentbank_train_2761", "nl": "thick bark has a positive impact on a tree's survival in a fire.", "fol": "", "prediction": ["all x y.((ThickBark(x) & Tree(y)) -> PositiveImpactOnSurvivalInFire(x,y))"]}
{"id": "entailmentbank_train_2762", "nl": "fragrance means smell.", "fol": "", "prediction": ["all x.(Fragrance(x) -> MeansSmell(x))"]}
{"id": "entailmentbank_train_2763", "nl": "flowers often have a sweet smell to attract pollinators.", "fol": "", "prediction": ["all x.(Flower(x) -> (SweetSmell(x) & AttractsPollinators(x)))"]}
{"id": "entailmentbank_train_2764", "nl": "flowers use fragrance to attract pollinators.", "fol": "", "prediction": ["all x.(Flower(x) -> UsesFragranceToAttractPollinators(x))"]}
{"id": "entailmentbank_train_2765", "nl": "increasing the amount of something used by an organism to perform a process increases that organism's ability to perform that process.", "fol": "", "prediction": ["all x y.((Organism(x) & Organism(y) & IncreasesAptitudeToPerformProcess(x,y)) -> IncreasesAptitudeToPerformProcess(x,y))"]}
{"id": "entailmentbank_train_2766", "nl": "as the amount of fragrance of a flower increases, the number of pollinators it will attract increases.", "fol": "", "prediction": ["all x y.((Flower(x) & Fragrances(y) & Increases(x,y)) -> NumberOfPollinators(x))"]}
{"id": "entailmentbank_train_2767", "nl": "as the size of a flower increases, the number of pollinators it will attract increases.", "fol": "", "prediction": ["all x y.((Flower(x) & Size(x,y) & Increases(x,y)) -> IncreasesNumberOfPollinators(x))"]}
{"id": "entailmentbank_train_2768", "nl": "as the size and amount of fragrance of a flower increases, the number of pollinators it will attract increases.", "fol": "", "prediction": ["all x y.((Flower(x) & Size(y) & Fragrances(y)) -> AttractsPollinators(x,y))"]}
{"id": "entailmentbank_train_2769", "nl": "plant reproduction requires pollination.", "fol": "", "prediction": ["all x.(PlantReproduction(x) -> RequiresPollination(x))"]}
{"id": "entailmentbank_train_2770", "nl": "pollination requires pollinators.", "fol": "", "prediction": ["all x.(PollinationRequiresPollinators(x) -> PollinationRequiresPollinators(x))"]}
{"id": "entailmentbank_train_2771", "nl": "plant reproduction requires pollinators.", "fol": "", "prediction": ["all x.(PlantReproduction(x) -> RequiresPollinators(x))"]}
{"id": "entailmentbank_train_2772", "nl": "as the number of pollinators attracted to  a plant increases, the ability of that plant to reproduce will increase.", "fol": "", "prediction": ["all x y.((Plant(x) & NumberOfPollinators(x,y) & Increases(x,y)) -> AbilityToReproduce(x,y))"]}
{"id": "entailmentbank_train_2773", "nl": "increasing an organism's ability to reproduce has a positive impact on that organism.", "fol": "", "prediction": ["all x y.((Organism(x) & Organism(y) & IncreasesAbilityToReproduce(x,y)) -> PositiveImpact(x,y))"]}
{"id": "entailmentbank_train_2774", "nl": "increasing the number of pollinators attracted to a plant has a positive impact on that plant.", "fol": "", "prediction": ["all x y.((Pollinators(x) & Plant(y) & AttractedTo(x,y)) -> PositiveImpact(x,y))"]}
{"id": "entailmentbank_train_2775", "nl": "increasing the size and amount of fragrance of a flower has a positive impact on that flower by increasing the number of pollinators it will attract.", "fol": "", "prediction": ["all x y.((Flower(x) & Flower(y) & IncreasesSizeAndAmountOfFragrance(x,y)) -> PositiveImpact(x,y))"]}
{"id": "entailmentbank_train_2776", "nl": "a bee is a pollinating animal.", "fol": "", "prediction": ["all x.(Bee(x) -> PollinatingAnimal(x))"]}
{"id": "entailmentbank_train_2777", "nl": "increasing the size and amount of fragrance of a flower has a positive impact on that flower by increasing the number of bees it will attract.", "fol": "", "prediction": ["all x y.((Flower(x) & Flower(y) & IncreasesSizeAndAmountOfFragrance(x,y)) -> PositiveImpact(x,y))"]}
{"id": "entailmentbank_train_2778", "nl": "starlings take nests from other birds.", "fol": "", "prediction": ["all x y.((Starling(x) & Bird(y)) -> TakesNest(x,y))"]}
{"id": "entailmentbank_train_2779", "nl": "starlings take resources from other birds by taking nests from other birds.", "fol": "", "prediction": ["all x y.((Starling(x) & Bird(y)) -> TakesResourcesFrom(x,y))"]}
{"id": "entailmentbank_train_2780", "nl": "if an animal takes a resource from another animal then that animal competes for resources successfully.", "fol": "", "prediction": ["all x y.((Animal(x) & Animal(y) & TakesResource(x,y)) -> CompetesForResources(x,y))"]}
{"id": "entailmentbank_train_2781", "nl": "starlings successfully compete for resources by taking over the nests of other birds.", "fol": "", "prediction": ["all x y.((Starling(x) & Bird(y)) -> (SuccessfullyCompeteForResources(x,y) & TakeOverNests(x,y)))"]}
{"id": "entailmentbank_train_2782", "nl": "if an organism can compete for resources then more resources will become available to that organism.", "fol": "", "prediction": ["all x y.((Organism(x) & CompetesForResources(x)) -> MoreResourcesAvailable(y))"]}
{"id": "entailmentbank_train_2783", "nl": "more resources become available to starlings as they sucessfully compete for resources.", "fol": "", "prediction": ["all x y.((Starling(x) & Starling(y) & CompetesForResources(x,y)) -> MoreResourcesAvailable(x,y))"]}
{"id": "entailmentbank_train_2784", "nl": "as available resources increases, the population of an organism using those resources will increase.", "fol": "", "prediction": ["all x y.((Organism(x) & AvailableResources(y) & Increases(x,y)) -> PopulationIncreases(x))"]}
{"id": "entailmentbank_train_2785", "nl": "as starlings sucessfully compete for resources, the population of starlings increases.", "fol": "", "prediction": ["all x.((Starling(x) & SuccessfullyCompeteForResources(x)) -> PopulationIncreases(x))"]}
{"id": "entailmentbank_train_2786", "nl": "competition may cause animals to fight / to make threatening sounds / to act aggressively towards members of their own species.", "fol": "", "prediction": ["all x y.((Competition(x) & Animal(y)) -> (Fights(y) & MakesThreatingSounds(y) & AggressivelyAttaining(y,x)))"]}
{"id": "entailmentbank_train_2787", "nl": "if two animals have the same food source then those two animals compete for food.", "fol": "", "prediction": ["all x y.((Animal(x) & Animal(y) & SameFoodSource(x,y)) -> CompetesForFood(x,y))"]}
{"id": "entailmentbank_train_2788", "nl": "competition for food may cause animals to display threatening behavior towards each other.", "fol": "", "prediction": ["all x y.((CompetitionForFood(x) & Animal(y)) -> (DisplaysThreatingBehaviorTowards(y,x)))"]}
{"id": "entailmentbank_train_2789", "nl": "threatening behavior causes a fight-or-flight response in animals.", "fol": "", "prediction": ["all x.((TornantBehavior(x) & Animal(y)) -> CausesFightOrFlightResponse(x,y))"]}
{"id": "entailmentbank_train_2790", "nl": "competition for food may cause a fight-or-flight response in animals.", "fol": "", "prediction": ["all x.(CompetitionForFood(x) -> (CausesFightOrFlightResponse(x) & InAnimals(x)))"]}
{"id": "entailmentbank_train_2791", "nl": "if an organism survives competition for resources then this organism will survive / reproduce for natural selection.", "fol": "", "prediction": ["all x.((Organism(x) & SurvivesCompetitionForResources(x)) -> SurvivesForNaturalSelection(x))"]}
{"id": "entailmentbank_train_2792", "nl": "beneficial traits allow organisms to survive competition for resources.", "fol": "", "prediction": ["all x.(BeneficialTreatment(x) -> AllowsOrganismsToSurviveCompetitionForResources(x))"]}
{"id": "entailmentbank_train_2793", "nl": "natural selection is when organisms with beneficial traits survive competition to reproduce and pass their beneficial traits onto their offispring.", "fol": "", "prediction": ["all x.((Organism(x) & BeneficialTreatments(x) & SurvivesCompetition(x) & ReproducesAndPassesBeneficialTreatments(x)) -> NaturalSelection(x))"]}
{"id": "entailmentbank_train_2794", "nl": "a generation is a group of organisms who are born and live at relatively the same time.", "fol": "", "prediction": ["all x.(Generation(x) -> (Birth(x) & LivesAtRelativelySameTime(x)))"]}
{"id": "entailmentbank_train_2795", "nl": "an organism and it's offspring are born and live at relatively different times.", "fol": "", "prediction": ["all x y.((Organism(x) & Offspring(y)) -> (Birth(x,y) & LivesAtRelativelyDifferentTimes(x,y)))"]}
{"id": "entailmentbank_train_2796", "nl": "an organism and its offspring are part of different generations.", "fol": "", "prediction": ["all x y.((Organism(x) & Offspring(y)) -> DifferentGenerations(x,y))"]}
{"id": "entailmentbank_train_2797", "nl": "processes that involve organisms from different generations take place over a period of at least 1 to many generations.", "fol": "", "prediction": ["all x y.((Process(x) & Organism(y) & InvolvesGenerations(x,y)) -> TakesPlaceOverPeriod(x,y))"]}
{"id": "entailmentbank_train_2798", "nl": "the process of passing traits to offspring occurs over a period of at least 1 generation to many generations.", "fol": "", "prediction": ["all x y.((Process(x) & Offspring(y)) -> PassesTraits(x,y))"]}
{"id": "entailmentbank_train_2799", "nl": "natural selection occurs over a period of 1 to many generations.", "fol": "", "prediction": ["all x.(NaturalSelection(x) -> OccursOverPeriod(x,1 toManyGenerations))"]}
{"id": "entailmentbank_train_2800", "nl": "to a human a time period of 1 generation to many generations is considered very long.", "fol": "", "prediction": ["all x.((Human(x) & TimePeriod(x,1) & ManyGenerations(x)) -> VeryLong(x))"]}
{"id": "entailmentbank_train_2801", "nl": "natural selection occurs over a period of 1 to many generations which is considered a very long time to a human.", "fol": "", "prediction": ["all x y.((NaturalSelection(x) & Human(y)) -> OccursOverPeriod(x,y))"]}
{"id": "entailmentbank_train_2802", "nl": "reproduction increases the number of a living thing.", "fol": "", "prediction": ["all x y.((Reproduction(x) & LivingThing(y)) -> IncreasesNumber(x,y))"]}
{"id": "entailmentbank_train_2803", "nl": "as the ability of a living thing to survive / to reproduce increases, the likelihood of passing on its traits to its decendents will increase.", "fol": "", "prediction": ["all x y.((LivingThing(x) & AbilityToSurvive(x) & AbilityToReproduce(x)) -> ProbabilityOfPassingOnTraitsToDecendents(y))"]}
{"id": "entailmentbank_train_2804", "nl": "if living things with one trait outnumber those living things with a different trait in a population then the living things with that one trait probably have a better chance of surviving and reproducing.", "fol": "", "prediction": ["all x y.((LivingThing(x) & LivingThing(y) & HasTrait(x,y) & Outnumbers(x,y)) -> BetterChanceOfSurvivingAndReproducing(x))"]}
{"id": "entailmentbank_train_2805", "nl": "sheep with light wool outnumber sheep with dark wool in the sheep population on hirta.", "fol": "", "prediction": ["all x y.((Shoe(x) & Sheep(y) & LightWool(x)) -> OutnumbersSheep(y,x))"]}
{"id": "entailmentbank_train_2806", "nl": "sheep with light wool have a better chance of surviving and reproducing than sheep with black wool on hirta.", "fol": "", "prediction": ["all x y.((Shoe(x) & LightWool(x) & Sheep(y) & BlackWool(y)) -> BetterChanceOfSurvivingAndReproducing(x,y))"]}
{"id": "entailmentbank_train_2807", "nl": "an animal requires a mate to fertilize an egg.", "fol": "", "prediction": ["all x y.((Animal(x) & Mate(y)) -> RequiresToFertilize(x,y))"]}
{"id": "entailmentbank_train_2808", "nl": "coloration is used to find a mate by some animals.", "fol": "", "prediction": ["exists x.(Animal(x) & Coloration(x) & FindsMate(x))"]}
{"id": "entailmentbank_train_2809", "nl": "coloration can can be used by an animal find a mate to fertilize an egg.", "fol": "", "prediction": ["all x y.((Animal(x) & Animal(y) & FindsMate(x,y)) -> FertilizesEgg(x,y))"]}
{"id": "entailmentbank_train_2810", "nl": "if something can be used for a process then that something can have a positive impact on that process.", "fol": "", "prediction": ["all x y.((CanBeUsedForProcess(x) & Process(y)) -> PositiveImpact(x,y))"]}
{"id": "entailmentbank_train_2811", "nl": "coloration can have a positive impact on an animal's ability to fertilize an egg.", "fol": "", "prediction": ["all x y.((Animal(x) & Coloration(y)) -> PositiveImpactOnFertilization(x,y))"]}
{"id": "entailmentbank_train_2812", "nl": "animals require fertilization to reproduce.", "fol": "", "prediction": ["all x.(Animal(x) -> RequiresFertilization(x))"]}
{"id": "entailmentbank_train_2813", "nl": "coloration can have a positive impact on an animal's ability to reproduce.", "fol": "", "prediction": ["all x.(Coloration(x) -> PositiveImpactOnReproduction(x))"]}
{"id": "entailmentbank_train_2814", "nl": "coloration is an adaptation for reproduction for some animals.", "fol": "", "prediction": ["all x.(Coloration(x) -> (AdaptationForReproduction(x) & ForAnimals(x)))"]}
{"id": "entailmentbank_train_2815", "nl": "having an orange belly is a kind of coloration.", "fol": "", "prediction": ["all x.(OrangeBody(x) -> Coloration(x))"]}
{"id": "entailmentbank_train_2816", "nl": "brook trout have bright orange bellies.", "fol": "", "prediction": ["all x.(BrookTrout(x) -> BrightOrangeBellies(x))"]}
{"id": "entailmentbank_train_2817", "nl": "brook trout have a bright orange coloration on their bellies.", "fol": "", "prediction": ["all x.(BrookTrout(x) -> BrightOrangeColoration(x))"]}
{"id": "entailmentbank_train_2818", "nl": "bright orange bellies are an adaptation for reproduction for brook trout.", "fol": "", "prediction": ["all x.(BrightOrangeBellies(x) -> (AdaptationForReproduction(x) & ForBrookTrout(x)))"]}
{"id": "entailmentbank_train_2819", "nl": "adaptation is when an organism develops a trait over time for survival.", "fol": "", "prediction": ["all x y.((Organism(x) & Trait(y) & DevelopsOverTime(x,y)) -> Adaptation(x))"]}
{"id": "entailmentbank_train_2820", "nl": "brook trout developed bright orange bellies over time to help them reproduce.", "fol": "", "prediction": ["all x.(BrookTrout(x) -> (DevelopedBrightOrangeBellies(x) & HelpedReproduce(x)))"]}
{"id": "entailmentbank_train_2821", "nl": "to do something forcibly can mean to do something rapidly.", "fol": "", "prediction": ["all x.(ForciblyDoes(x) -> RapidDoing(x))"]}
{"id": "entailmentbank_train_2822", "nl": "a disruption of an ecosystem can cause an extinction.", "fol": "", "prediction": ["all x y.((DisruptionOfEcosystem(x) & Ecosystem(y)) -> CanCauseExtinction(x,y))"]}
{"id": "entailmentbank_train_2823", "nl": "a forcible disruption of an ecosystem can cause a rapid extinction.", "fol": "", "prediction": ["all x y.((ForcibleDisruptionOfEcosystem(x) & Ecosystem(y)) -> CausesRapidExtinction(x,y))"]}
{"id": "entailmentbank_train_2824", "nl": "an impact can mean the result of two objects forcibly colliding.", "fol": "", "prediction": ["all x.(Impact(x) -> ForciblyColliding(x))"]}
{"id": "entailmentbank_train_2825", "nl": "an asteroid impact is a kind of event.", "fol": "", "prediction": ["all x.(AsteroidImpact(x) -> Event(x))"]}
{"id": "entailmentbank_train_2826", "nl": "an asteroid impact is a kind of event where an asteriod forcibly collides with another object.", "fol": "", "prediction": ["all x y.((AsteroidImpact(x) & Asteriod(y)) -> ForciblyCollides(x,y))"]}
{"id": "entailmentbank_train_2827", "nl": "an ecosystem is a kind of object.", "fol": "", "prediction": ["all x.(Ecosystem(x) -> Object(x))"]}
{"id": "entailmentbank_train_2828", "nl": "an asteriod impact can be a kind of event where an asteroid forcibly collides with an ecosystem.", "fol": "", "prediction": ["all x y.((AsteroidImpact(x) & Ecosystem(y)) -> ForciblyCollides(x,y))"]}
{"id": "entailmentbank_train_2829", "nl": "a disruption is a kind of change.", "fol": "", "prediction": ["all x.(Disruption(x) -> Change(x))"]}
{"id": "entailmentbank_train_2830", "nl": "objects colliding can cause changes to those objects.", "fol": "", "prediction": ["all x.(CollidingObjects(x) -> CausesChange(x))"]}
{"id": "entailmentbank_train_2831", "nl": "objects colliding can disrupt those objects.", "fol": "", "prediction": ["all x.((Object(x) & Colliding(x)) -> Disrupts(x,y))"]}
{"id": "entailmentbank_train_2832", "nl": "an asteriod impact can be a kind of event where an asteroid forcibly disrupts an ecosystem.", "fol": "", "prediction": ["all x.(AsteriodImpact(x) -> (ForcibleDisruption(x) & Asteroid(x)))"]}
{"id": "entailmentbank_train_2833", "nl": "an ecosystem contains large numbers of living organisms.", "fol": "", "prediction": ["all x.(Ecosystem(x) -> ContainsLargeNumbersOfLivingOrganisms(x))"]}
{"id": "entailmentbank_train_2834", "nl": "an asteroid impact can be a kind of event where an asteroid forcibly disrupts an ecosystem and the organisms in it.", "fol": "", "prediction": ["all x y.((AsteroidImpact(x) & Asteroid(y)) -> (ForciblyDisruptsEcosystem(y,x) & DisruptsOrganisms(y,x)))"]}
{"id": "entailmentbank_train_2835", "nl": "an asteroid impact would cause a rapid extinction of organisms.", "fol": "", "prediction": ["all x.(AsteroidImpact(x) -> RapidExtinctionOfOrganisms(x))"]}
{"id": "entailmentbank_train_2836", "nl": "if an animal's habitat no longer exists then that animal will die.", "fol": "", "prediction": ["all x.((Animal(x) & -existsHabitat(x)) -> Dies(x))"]}
{"id": "entailmentbank_train_2837", "nl": "if the state of a habitat causes animals in that habitat to die then that habitat can not support animals.", "fol": "", "prediction": ["all x y.((Habitat(x) & StateCausesAnimalsToDie(x,y)) -> -SupportsAnimals(x,y))"]}
{"id": "entailmentbank_train_2838", "nl": "if an animal's habitat no longer exists then that habitat can not support that animal.", "fol": "", "prediction": ["all x.((Animal(x) & -exists & Habitat(x)) -> -Supports(x,animal))"]}
{"id": "entailmentbank_train_2839", "nl": "if something is destroyed then that something no longer exists.", "fol": "", "prediction": ["all x.((Destroyed(x) & -exists(x)) -> -exists(x))"]}
{"id": "entailmentbank_train_2840", "nl": "if a habitat is destroyed then that habitat can not support animals.", "fol": "", "prediction": ["all x.((Habitat(x) & Destroyed(x)) -> -SupportsAnimals(x))"]}
{"id": "entailmentbank_train_2841", "nl": "if a habitat can no longer support animals then those animals will move to another area.", "fol": "", "prediction": ["all x.((Habitat(x) & -SupportsAnimals(x)) -> MovesToAnotherArea(x))"]}
{"id": "entailmentbank_train_2842", "nl": "habitat destruction causes animals to move to find shelter in another habitat.", "fol": "", "prediction": ["all x y.((HabitatDestruction(x) & Animal(y)) -> MovesToFindShelter(y,x))"]}
{"id": "entailmentbank_train_2843", "nl": "cutting down trees in a forest causes the number of trees to decrease in that forest.", "fol": "", "prediction": ["all x y.((CivilizingDownTrees(x) & Forest(y)) -> DecreasesNumberOfTrees(x,y))"]}
{"id": "entailmentbank_train_2844", "nl": "cutting down a forest means cutting down trees in a forest.", "fol": "", "prediction": ["all x y.((Forest(x) & Forest(y)) -> (CuttingDown(x,y) & CutsDownTrees(x,y)))"]}
{"id": "entailmentbank_train_2845", "nl": "cutting down a forest causes the number of trees to decrease in that forest.", "fol": "", "prediction": ["all x y.((Forest(x) & Forest(y) & CutsDown(x,y)) -> DecreasesNumberOfTrees(x,y))"]}
{"id": "entailmentbank_train_2846", "nl": "decreasing the number of trees in a forest is a kind of method for removing a forest.", "fol": "", "prediction": ["all x y.((DeclinedTrees(x) & Forest(y)) -> RemovesForest(x,y))"]}
{"id": "entailmentbank_train_2847", "nl": "cutting down a forest is a kind of method for removing a forest.", "fol": "", "prediction": ["all x y.((Forest(x) & Forest(y)) -> (CuttingDown(x,y) & RemovesForest(x,y)))"]}
{"id": "entailmentbank_train_2848", "nl": "if a habitat is removed then that habitat is destroyed.", "fol": "", "prediction": ["all x.((Habitat(x) & Removed(x)) -> Destroyed(x))"]}
{"id": "entailmentbank_train_2849", "nl": "cutting down a forest will destroy a forest.", "fol": "", "prediction": ["all x y.((Forest(x) & Forest(y)) -> CutsDown(x,y))"]}
{"id": "entailmentbank_train_2850", "nl": "cutting down a forest causes animals that live in that forest to move to find shelter in another habitat.", "fol": "", "prediction": ["all x y.((CivilizingDownForest(x) & Animal(y) & LivesInForest(y,x)) -> MovesToFindShelterInAnotherHabitat(y,x))"]}
{"id": "entailmentbank_train_2851", "nl": "a deer is a kind of animal.", "fol": "", "prediction": ["all x.(Deer(x) -> Animal(x))"]}
{"id": "entailmentbank_train_2852", "nl": "a deer lives in a forest.", "fol": "", "prediction": ["all x.(Deer(x) -> LivesInForest(x))"]}
{"id": "entailmentbank_train_2853", "nl": "deer are a kind of animal that live in a forest.", "fol": "", "prediction": ["all x.(Deer(x) -> LivesInForest(x))"]}
{"id": "entailmentbank_train_2854", "nl": "cutting down a forest causes deer to move to find shelter in another habitat.", "fol": "", "prediction": ["all x y.((Forest(x) & Forest(y) & CuttingDown(x,y)) -> CausesDeerToMoveToFindShelter(x,y))"]}
{"id": "entailmentbank_train_2855", "nl": "an aquatic animal requires great amounts of water to thrive.", "fol": "", "prediction": ["all x.(AquaticAnimal(x) -> RequiresGreatAmountsOfWater(x))"]}
{"id": "entailmentbank_train_2856", "nl": "if an organism requires something to perform a process, then increasing that something increases that organism's ability to perform that process.", "fol": "", "prediction": ["all x y.((Organism(x) & Requires(x,y) & Process(y)) -> IncreasesAbility(x,y))"]}
{"id": "entailmentbank_train_2857", "nl": "increasing the amount of water in an environment increases aquatic animals' ability to thrive in that environment.", "fol": "", "prediction": ["all x y.((Environment(x) & AquaticAnimal(y)) -> IncreasesAbilityToThrive(y,x))"]}
{"id": "entailmentbank_train_2858", "nl": "as water increases in an environment, the population of aquatic animals will increase.", "fol": "", "prediction": ["all x y.((Water(x) & Environment(y) & Increases(x,y)) -> PopulationIncreases(x,y))"]}
{"id": "entailmentbank_train_2859", "nl": "an otter is a kind of aquatic animal.", "fol": "", "prediction": ["all x.(Otter(x) -> AquaticAnimal(x))"]}
{"id": "entailmentbank_train_2860", "nl": "as water increases in an environment, the population of otters may increase.", "fol": "", "prediction": ["all x.((WaterInEnvironment(x) & IncreasesInEnvironment(x)) -> PopulationIncreases(x))"]}
{"id": "entailmentbank_train_2861", "nl": "as the amount of rainfall increases in an area, the amount of available water in that area will increase.", "fol": "", "prediction": ["all x y.((Area(x) & Area(y) & IncreasesRainfall(x,y)) -> IncreasesAmountOfWater(x,y))"]}
{"id": "entailmentbank_train_2862", "nl": "heavy rains cause flooding.", "fol": "", "prediction": ["all x.(HeavyRain(x) -> CausesFlooding(x))"]}
{"id": "entailmentbank_train_2863", "nl": "floods are a source of water.", "fol": "", "prediction": ["all x.(Flood(x) -> SourceOfWater(x))"]}
{"id": "entailmentbank_train_2864", "nl": "flooding increases the amount of water in an environment.", "fol": "", "prediction": ["all x y.((Flooding(x) & Environment(y)) -> IncreasesWaterAmount(x,y))"]}
{"id": "entailmentbank_train_2865", "nl": "a flood may cause the population of otters to increase in an environment.", "fol": "", "prediction": ["all x y.((Flood(x) & Otter(y)) -> MayIncreasePopulation(y,x))"]}
{"id": "entailmentbank_train_2866", "nl": "fire causes harm to organisms.", "fol": "", "prediction": ["all x y.((Fire(x) & Organism(y)) -> CausesHarm(x,y))"]}
{"id": "entailmentbank_train_2867", "nl": "harming an organism can cause that organism to die.", "fol": "", "prediction": ["all x y.((Organism(x) & Organism(y) & Harms(x,y)) -> CausesDeath(x,y))"]}
{"id": "entailmentbank_train_2868", "nl": "fire can cause organisms to die.", "fol": "", "prediction": ["all x y.((Fire(x) & Organism(y)) -> CanCause(x,y))"]}
{"id": "entailmentbank_train_2869", "nl": "a wildfire can cause organisms to die.", "fol": "", "prediction": ["all x.(Wildfire(x) -> CanCauseOrganismsToDie(x))"]}
{"id": "entailmentbank_train_2870", "nl": "a wildfire can cause an animal to die.", "fol": "", "prediction": ["all x y.((Wildfire(x) & Animal(y)) -> CanCauseDeath(x,y))"]}
{"id": "entailmentbank_train_2871", "nl": "a wildfire is a kind of natural disaster.", "fol": "", "prediction": ["all x.(Wildfire(x) -> NaturalDisaster(x))"]}
{"id": "entailmentbank_train_2872", "nl": "natural disasters can cause animals to leave an environment.", "fol": "", "prediction": ["all x y.((NaturalDisaster(x) & Animal(y)) -> CanCauseToLeaveEnvironment(x,y))"]}
{"id": "entailmentbank_train_2873", "nl": "a wildfire can cause an animal to leave their environment.", "fol": "", "prediction": ["all x y.((Wildfire(x) & Animal(y)) -> CanCauseToLeaveEnvironment(x,y))"]}
{"id": "entailmentbank_train_2874", "nl": "a wildfire can cause an animal to die or leave their environment.", "fol": "", "prediction": ["all x y.((Wildfire(x) & Animal(y)) -> (CausesToDie(y,x) | CausesLeaveEnvironment(y,x)))"]}
{"id": "entailmentbank_train_2875", "nl": "a wildfire can mean a forest fire.", "fol": "", "prediction": ["all x.(Wildfire(x) -> ForestFire(x))"]}
{"id": "entailmentbank_train_2876", "nl": "a forest fire can cause an animal to die or leave their environment.", "fol": "", "prediction": ["all x y.((ForestFire(x) & Animal(y)) -> (CausesToDie(y,x) | CausesLeave(y,x)))"]}
{"id": "entailmentbank_train_2877", "nl": "drier means lower in amount of water.", "fol": "", "prediction": ["all x.(Drier(x) -> LowerWaterAmount(x))"]}
{"id": "entailmentbank_train_2878", "nl": "as dryness increases in an environment, the available water in that environment will decrease.", "fol": "", "prediction": ["all x y.((Environment(x) & Environment(y) & IncreasedDryness(x,y)) -> DecreasedWater(x,y))"]}
{"id": "entailmentbank_train_2879", "nl": "as dryness in an environment increases, the ability of living things to survive in that environment decreases due to a lack of available water.", "fol": "", "prediction": ["all x y.((Dryness(x) & Environment(y) & Increases(x,y)) -> DecreasesAbilityToSurvive(x,y))"]}
{"id": "entailmentbank_train_2880", "nl": "storing water increases the water available to organisms in a dry environment.", "fol": "", "prediction": ["all x y.((StoresWater(x) & Organism(y)) -> IncreasesWaterAvailableInDryEnvironment(x,y))"]}
{"id": "entailmentbank_train_2881", "nl": "as a living thing's ability to store water increases, that living thing's ability to survive in a dry environment increases.", "fol": "", "prediction": ["all x y.((LivingThing(x) & Water(y) & Increases(x,y)) -> IncreasesAbilityToSurviveInDryEnvironment(x))"]}
{"id": "entailmentbank_train_2882", "nl": "ability to store water has a positive impact on an living thing's survival in a dry environment.", "fol": "", "prediction": ["all x.(StoreWater(x) -> PositiveImpactOnSurvivalInDryEnvironment(x))"]}
{"id": "entailmentbank_train_2883", "nl": "an adaptation has a positive impact on a living thing's survival.", "fol": "", "prediction": ["all x y.((Adaptation(x) & LivingThing(y)) -> PositiveImpactOnSurvival(x,y))"]}
{"id": "entailmentbank_train_2884", "nl": "ability to store water is a kind of adaptation to a dry environment.", "fol": "", "prediction": ["all x.(StoreWater(x) -> AdaptationToDryEnvironment(x))"]}
{"id": "entailmentbank_train_2885", "nl": "a pond is a kind of body of water.", "fol": "", "prediction": ["all x.(Pool(x) -> BodyOfWater(x))"]}
{"id": "entailmentbank_train_2886", "nl": "if a body of water loses all water then that body of water does not exist any more.", "fol": "", "prediction": ["all x.((BodyOfWater(x) & LosesAllWater(x)) -> -exists(x))"]}
{"id": "entailmentbank_train_2887", "nl": "if a pond loses all water then that pond does not exist any more.", "fol": "", "prediction": ["all x.((Pool(x) & LosesAllWater(x)) -> -existsmore(x))"]}
{"id": "entailmentbank_train_2888", "nl": "a drought can cause a pond to no longer exist.", "fol": "", "prediction": ["all x y.((Drought(x) & Pond(y)) -> CanNoLimit(x,y))"]}
{"id": "entailmentbank_train_2889", "nl": "a drought can cause animals that live in ponds to die.", "fol": "", "prediction": ["all x y.((Drought(x) & Animal(y) & LivesInPond(y)) -> CanCauseToDie(x,y))"]}
{"id": "entailmentbank_train_2890", "nl": "aquatic animals live in bodies of water.", "fol": "", "prediction": ["all x.(AquaticAnimal(x) -> LivesInBodyOfWater(x))"]}
{"id": "entailmentbank_train_2891", "nl": "some aquatic animals live in ponds.", "fol": "", "prediction": ["exists x.(AquaticAnimal(x) & LivesInPond(x))"]}
{"id": "entailmentbank_train_2892", "nl": "some frogs live in ponds.", "fol": "", "prediction": ["exists x.(Frog(x) & LivesInPond(x))"]}
{"id": "entailmentbank_train_2893", "nl": "a drought can cause frogs to die.", "fol": "", "prediction": ["all x.(Drought(x) -> CanCauseFrogsToDie(x))"]}
{"id": "entailmentbank_train_2894", "nl": "causing an animal to die has a negative effect on that animal.", "fol": "", "prediction": ["all x y.((Animal(x) & Animal(y)) -> CausesToDie(x,y))"]}
{"id": "entailmentbank_train_2895", "nl": "droughts have a negative effect on frogs.", "fol": "", "prediction": ["all x.(Drought(x) -> NegativeEffectOnFrogs(x))"]}
{"id": "entailmentbank_train_2896", "nl": "organisms are biotic factors of an environment.", "fol": "", "prediction": ["all x.(Organism(x) -> BioticFactorOfEnvironment(x))"]}
{"id": "entailmentbank_train_2897", "nl": "natural resources can be abiotic factors of an environment.", "fol": "", "prediction": ["all x.(NaturalResources(x) -> AbioticFactorOfEnvironment(x))"]}
{"id": "entailmentbank_train_2898", "nl": "resources are generally abiotic factors of an environment and organisms are biotic features of an environment.", "fol": "", "prediction": ["all x y.((Resource(x) & Organism(y)) -> (AbioticFactor(x) & BioticFeature(y)))"]}
{"id": "entailmentbank_train_2899", "nl": "changes to abiotic factors in an environment affect biotic factors in that environment.", "fol": "", "prediction": ["all x y.((ChangeToAbioticFactors(x) & Environment(y)) -> AffectsBiologicFactors(x,y))"]}
{"id": "entailmentbank_train_2900", "nl": "changes to resources in an environment affect organsims in that environment.", "fol": "", "prediction": ["all x y.((Resource(x) & Environment(y) & ChangesTo(x,y)) -> AffectsOrgansims(x,y))"]}
{"id": "entailmentbank_train_2901", "nl": "a decrease in resources in an environment affects organisms in that environment.", "fol": "", "prediction": ["all x y.((DecreaseInResources(x) & Environment(y)) -> AffectsOrganisms(x,y))"]}
{"id": "entailmentbank_train_2902", "nl": "organisms compete for resources in an environment.", "fol": "", "prediction": ["all x y.((Organism(x) & Environment(y)) -> CompetesForResources(x,y))"]}
{"id": "entailmentbank_train_2903", "nl": "as a resource required by an organism decreases, the competition among organisms that require that resource will increase.", "fol": "", "prediction": ["all x y.((Resource(x) & Organism(y) & Requires(x,y)) -> IncreasesCompetition(x,y))"]}
{"id": "entailmentbank_train_2904", "nl": "water is a kind of resource that is required by living things.", "fol": "", "prediction": ["all x.(Water(x) -> RequiresByLivingThings(x))"]}
{"id": "entailmentbank_train_2905", "nl": "as water in an evironment decreases, the competition among living things increases.", "fol": "", "prediction": ["all x y.((Water(x) & Environment(y)) -> (Decreases(x,y) & IncreasesCompetition(x,y)))"]}
{"id": "entailmentbank_train_2906", "nl": "a consumer is a kind of living thing.", "fol": "", "prediction": ["all x.(Consumer(x) -> LivingThing(x))"]}
{"id": "entailmentbank_train_2907", "nl": "as water in an evironment decreases, the competition among consumers increases.", "fol": "", "prediction": ["all x y.((Water(x) & Environment(y) & Decreases(x,y)) -> IncreasesCompetitiveness(x,y))"]}
{"id": "entailmentbank_train_2908", "nl": "a drought causes competition among consumers to increase.", "fol": "", "prediction": ["all x.(Drought(x) -> IncreasedCompetitions(x))"]}
{"id": "entailmentbank_train_2909", "nl": "temperature is a property of substances and includes ordered values of cold / cool / warm / hot.", "fol": "", "prediction": ["all x.(Temperature(x) -> (PropertyOfSubstances(x) & IncludesOrderedValues(x,cold,cool,warm,hot)))"]}
{"id": "entailmentbank_train_2910", "nl": "warm water contains less dissolved oxygen than cold water.", "fol": "", "prediction": ["all x y.((WarmWater(x) & ColdWater(y)) -> ContainsLessDissolvedOxygen(x,y))"]}
{"id": "entailmentbank_train_2911", "nl": "as the temperature of water increases, the amount of dissolved oxygen in the water decreases.", "fol": "", "prediction": ["all x y.((WaterTemperature(x) & Water(y)) -> (Increases(x,y) & Decreases(x,y)))"]}
{"id": "entailmentbank_train_2912", "nl": "the increase of water tempreature has a negative impact on the survival of organisms in the water that require oxygen.", "fol": "", "prediction": ["all x.((WaterTemperature(x) & Increased(x)) -> NegativeImpactOnSurvivalOfOrganisms(x))"]}
{"id": "entailmentbank_train_2913", "nl": "a fish is a kind of animal.", "fol": "", "prediction": ["all x.(Fish(x) -> Animal(x))"]}
{"id": "entailmentbank_train_2914", "nl": "an animal requires oxygen for survival.", "fol": "", "prediction": ["all x.(Animal(x) -> RequiresOxygenForSurvival(x))"]}
{"id": "entailmentbank_train_2915", "nl": "a fish requires oxygen to survive.", "fol": "", "prediction": ["all x.(Fish(x) -> RequiresOxygen(x))"]}
{"id": "entailmentbank_train_2916", "nl": "a fish lives in water.", "fol": "", "prediction": ["all x.(Fish(x) -> LivesInWater(x))"]}
{"id": "entailmentbank_train_2917", "nl": "a fish requires oxygen to survive and lives in water.", "fol": "", "prediction": ["all x.(Fish(x) -> (RequiresOxygen(x) & SurvivesInWater(x) & LivesInWater(x)))"]}
{"id": "entailmentbank_train_2918", "nl": "the increase of water tempreature has a negative impact on the survival of fish.", "fol": "", "prediction": ["all x.((WaterTemperature(x) & Increased(x)) -> NegativeImpactOnSurvivalOfFish(x))"]}
{"id": "entailmentbank_train_2919", "nl": "hot means high in temperature.", "fol": "", "prediction": ["all x.(Hot(x) -> HighTemperature(x))"]}
{"id": "entailmentbank_train_2920", "nl": "hot weather means high temperatures.", "fol": "", "prediction": ["all x.(HotWeather(x) -> HighTemperatures(x))"]}
{"id": "entailmentbank_train_2921", "nl": "as the temperature of an environment increases, the temperature of the water in that environment increases.", "fol": "", "prediction": ["all x y.((Environment(x) & Environment(y) & IncreasesTemperature(x,y)) -> IncreasesTemperature(x,y))"]}
{"id": "entailmentbank_train_2922", "nl": "hot weather causes the temperature of water in an environment to increase.", "fol": "", "prediction": ["all x y.((HotWeather(x) & Environment(y)) -> IncreasesTemperature(x,y))"]}
{"id": "entailmentbank_train_2923", "nl": "hot weather has a negative impact on the survival of fish.", "fol": "", "prediction": ["all x.(HotWeather(x) -> NegativeImpactOnSurvivalOfFish(x))"]}
{"id": "entailmentbank_train_2924", "nl": "rainfall is the amount of rain an area receives.", "fol": "", "prediction": ["all x.(Rainfall(x) -> (AmountOfRain(x) & Area(x)))"]}
{"id": "entailmentbank_train_2925", "nl": "rain is a source of water.", "fol": "", "prediction": ["all x.(Rain(x) -> SourceOfWater(x))"]}
{"id": "entailmentbank_train_2926", "nl": "as the available water in an environment increases, the populations of organisms in that environment will increase.", "fol": "", "prediction": ["all x y.((Environment(x) & AvailableWater(x) & Environment(y)) -> PopulationIncrease(x,y))"]}
{"id": "entailmentbank_train_2927", "nl": "as the amount of rainfall in an environment increases, the populations of organisms in that environment will increase.", "fol": "", "prediction": ["all x y.((Environment(x) & Environment(y) & IncreasedRainfall(x,y)) -> PopulationIncrease(x,y))"]}
{"id": "entailmentbank_train_2928", "nl": "as the amount of rainfall in an environment increases, the populations of plants in that environment will increase.", "fol": "", "prediction": ["all x y.((Environment(x) & Environment(y) & IncreasedRainfall(x,y)) -> PopulationIncrease(x,y))"]}
{"id": "entailmentbank_train_2929", "nl": "an organism's environment affects that organism's acquired characteristics.", "fol": "", "prediction": ["all x y.((Organism(x) & Environment(y)) -> AffectsAcquiredCharacteristics(x,y))"]}
{"id": "entailmentbank_train_2930", "nl": "inherited characteristics are the opposite of acquired characteristics.", "fol": "", "prediction": ["all x.(EarnedCharacteristics(x) -> OppositeOfAcquiredCharacteristics(x))"]}
{"id": "entailmentbank_train_2931", "nl": "an organism's environment does not affect that organism's inherited characteristics.", "fol": "", "prediction": ["all x y.((Organism(x) & Environment(y)) -> -AffectsEarnedCharacteristics(x,y))"]}
{"id": "entailmentbank_train_2932", "nl": "an plant's environment does not affect that plant's inherited characteristics.", "fol": "", "prediction": ["all x y.((Plant(x) & Environment(y)) -> -AffectsEarnedCharacteristics(x,y))"]}
{"id": "entailmentbank_train_2933", "nl": "plants of the same species have the same type of seed.", "fol": "", "prediction": ["all x.((Plant(x) & SameSpecies(x)) -> SameTypeOfSeed(x))"]}
{"id": "entailmentbank_train_2934", "nl": "species is an inherited characteristic.", "fol": "", "prediction": ["all x.(Species(x) -> ErasedCharacteristic(x))"]}
{"id": "entailmentbank_train_2935", "nl": "the type of seed of a plant is an inherited characteristic.", "fol": "", "prediction": ["all x y.((Plant(x) & Seed(y)) -> ErasedCharacteristic(x,y))"]}
{"id": "entailmentbank_train_2936", "nl": "a plant's environment does not affect that plant's seed type.", "fol": "", "prediction": ["all x y.((Plant(x) & Environment(y)) -> -AffectsSeedType(x,y))"]}
{"id": "entailmentbank_train_2937", "nl": "a lack of something that a living thing requires prevents the survival of that living thing.", "fol": "", "prediction": ["all x y.((LackOf(x,y) & LivingThing(x)) -> PreventsSurvival(x,y))"]}
{"id": "entailmentbank_train_2938", "nl": "plants require water for survival.", "fol": "", "prediction": ["all x.(Plant(x) -> RequiresWaterForSurvival(x))"]}
{"id": "entailmentbank_train_2939", "nl": "a lack of water prevents the survival of plants.", "fol": "", "prediction": ["all x.(LackOfWater(x) -> PreventsSurvivalOfPlants(x))"]}
{"id": "entailmentbank_train_2940", "nl": "a lack of moisture prevents the survival of plants in the desert.", "fol": "", "prediction": ["all x y.((LackOfMoisture(x) & Plant(y)) -> PreventsSurvivalInDesert(x,y))"]}
{"id": "entailmentbank_train_2941", "nl": "soil provides nutrients for plants.", "fol": "", "prediction": ["all x y.((Soil(x) & Plant(y)) -> ProvidesNutrients(x,y))"]}
{"id": "entailmentbank_train_2942", "nl": "a plant requires nutrients in soil for growth.", "fol": "", "prediction": ["all x.((Plant(x) & RequiresNutrientsInSoil(x)) -> GrowthRequirement(x))"]}
{"id": "entailmentbank_train_2943", "nl": "if something is required for a process then that something positively impacts that process.", "fol": "", "prediction": ["all x y.((RequiredForProcess(x) & Process(y)) -> PositivelyImpacts(x,y))"]}
{"id": "entailmentbank_train_2944", "nl": "nutrients in soil positively impacts the plant growth process.", "fol": "", "prediction": ["all x y.((NutrientsInSoil(x) & Plant(y)) -> PositivelyImpactsGrowthProcess(x,y))"]}
{"id": "entailmentbank_train_2945", "nl": "high quality / rich / good soil has a high number of nutrients.", "fol": "", "prediction": ["all x.((Soil(x) & HighQuality(x) & Rich(x) & Good(x)) -> HighNutrients(x))"]}
{"id": "entailmentbank_train_2946", "nl": "different types of soil contain different amounts of nutrients.", "fol": "", "prediction": ["all x.(Soil(x) -> DifferentTypesOfSoil(x))"]}
{"id": "entailmentbank_train_2947", "nl": "different amounts of nutrients in different types of soil impact plant growth.", "fol": "", "prediction": ["all x y.((SoilType(x) & SoilType(y)) -> DifferentNutrients(x,y))"]}
{"id": "entailmentbank_train_2948", "nl": "a plant requires water to grow.", "fol": "", "prediction": ["all x.((Plant(x) & RequiresWater(x)) -> Grows(x))"]}
{"id": "entailmentbank_train_2949", "nl": "plant uptake is when plants absorb water from soil into themselves through their roots.", "fol": "", "prediction": ["all x.((PlantUptake(x) & PlantsAbsorbWaterFromSoil(x) & RootsIntoSoil(x)) -> Uptake(x))"]}
{"id": "entailmentbank_train_2950", "nl": "a plant requires water absorbed from soil to grow.", "fol": "", "prediction": ["all x.((Plant(x) & RequiresWater(x) & AbsorbsFromSoil(x)) -> Grows(x))"]}
{"id": "entailmentbank_train_2951", "nl": "water absorbed from soil positively impacts plant growth.", "fol": "", "prediction": ["all x y.((Water(x) & Soil(y)) -> PositivelyImpactsPlantGrowth(x,y))"]}
{"id": "entailmentbank_train_2952", "nl": "sandy soil holds less moisture than heavy soil.", "fol": "", "prediction": ["all x y.((SandySoil(x) & HeavySoil(y)) -> HoldsLessMoisture(x,y))"]}
{"id": "entailmentbank_train_2953", "nl": "the amount of moisture soil can hold determines the availability of water in that soil.", "fol": "", "prediction": ["all x.((MoistureSoil(x) & Holds(x,y)) -> DeterminesWaterAvailability(x))"]}
{"id": "entailmentbank_train_2954", "nl": "different types of soil have different availability of water.", "fol": "", "prediction": ["all x.(Soil(x) -> DifferentAvailabilityOfWater(x))"]}
{"id": "entailmentbank_train_2955", "nl": "different availabilty of water in different types of soil impact plant growth.", "fol": "", "prediction": ["all x y.((SoilType(x) & SoilType(y)) -> DifferentWaterAvailabilty(x,y))"]}
{"id": "entailmentbank_train_2956", "nl": "type of soil impacts plant growth through amount of nutrients and availability of water.", "fol": "", "prediction": ["all x.(Soil(x) -> (InfluencesPlantGrowth(x) & Nutrients(x) & WaterAvailability(x)))"]}
{"id": "entailmentbank_train_2957", "nl": "if something impacts multiple parts of a process then that something may have the greatest impact on that process.", "fol": "", "prediction": ["all x y.((InfluencesMultipleParts(x) & Process(y)) -> MayHaveGreatestImpact(x,y))"]}
{"id": "entailmentbank_train_2958", "nl": "the type of soil has the greatest impact on plant growth.", "fol": "", "prediction": ["all x.(SoilType(x) -> HasGreatestImpactOnPlantGrowth(x))"]}
{"id": "entailmentbank_train_2959", "nl": "precipitation is a property of weather.", "fol": "", "prediction": ["all x.(Precipitation(x) -> WeatherProperty(x))"]}
{"id": "entailmentbank_train_2960", "nl": "temperature and precipitation are properties of weather.", "fol": "", "prediction": ["all x.((Temperature(x) & Precipitation(x)) -> WeatherProperties(x))"]}
{"id": "entailmentbank_train_2961", "nl": "if something is a property of something else then that something else determines that something.", "fol": "", "prediction": ["all x y.((Property(x) & PropertyOf(x,y)) -> Determines(x,y))"]}
{"id": "entailmentbank_train_2962", "nl": "weather determines temperature and precipitation.", "fol": "", "prediction": ["all x.(Weather(x) -> (DeterminesTemperature(x) & DeterminesPrecipitation(x)))"]}
{"id": "entailmentbank_train_2963", "nl": "climate is the usual kind of weather in a location over a period of time.", "fol": "", "prediction": ["all x y.((Climate(x) & Location(y)) -> WeatherInPerson(x,y))"]}
{"id": "entailmentbank_train_2964", "nl": "an environment's climate determines the temperature and precipitation of a location.", "fol": "", "prediction": ["all x y.((Environment(x) & Environment(y)) -> DeterminesTemperatureAndPrecipitation(x,y))"]}
{"id": "entailmentbank_train_2965", "nl": "precipitation is water that falls to the ground from clouds.", "fol": "", "prediction": ["all x.(Precipitation(x) -> (Water(x) & FallsToGroundFromClouds(x)))"]}
{"id": "entailmentbank_train_2966", "nl": "clouds can block sunlight.", "fol": "", "prediction": ["all x.(Cloud(x) -> BlocksSunlight(x))"]}
{"id": "entailmentbank_train_2967", "nl": "precipitation can affect the amount of water and sunlight in an environment.", "fol": "", "prediction": ["all x y.((Precipitation(x) & Environment(y)) -> (AffectsWater(x,y) & AffectsSunlight(x,y)))"]}
{"id": "entailmentbank_train_2968", "nl": "an environment's climate determines the temperature and amount of water and sunlight in a location.", "fol": "", "prediction": ["all x y.((Environment(x) & Environment(y)) -> (DeterminesTemperature(x,y) & DeterminesAmountOfWaterAndSunlight(x,y)))"]}
{"id": "entailmentbank_train_2969", "nl": "a plant requires sunlight to perform photosynthesis.", "fol": "", "prediction": ["all x.((Plant(x) & RequiresSunlight(x)) -> PerformsPhotosynthesis(x))"]}
{"id": "entailmentbank_train_2970", "nl": "a plant requires photosynthesis to grow / survive.", "fol": "", "prediction": ["all x.((Plant(x) & RequiresPhotosynthesis(x)) -> GrowsSurvives(x))"]}
{"id": "entailmentbank_train_2971", "nl": "a plant requires sunlight to grow / survive.", "fol": "", "prediction": ["all x.((Plant(x) & RequiresSunlight(x)) -> GrowsSurvive(x))"]}
{"id": "entailmentbank_train_2972", "nl": "a plants require water for survival / to grow.", "fol": "", "prediction": ["all x.((Plant(x) & RequiresWater(x)) -> (Survival(x) | Grow(x)))"]}
{"id": "entailmentbank_train_2973", "nl": "plants require water and sunlight to grow / survive.", "fol": "", "prediction": ["all x.(Plant(x) -> (RequiresWater(x) & RequiresSunlight(x)))"]}
{"id": "entailmentbank_train_2974", "nl": "if an organism requires something then that something is a resource for that organism.", "fol": "", "prediction": ["all x y.((Organism(x) & Requires(x,y)) -> ResourceForOrganism(x))"]}
{"id": "entailmentbank_train_2975", "nl": "water and sunlight are resources for plants.", "fol": "", "prediction": ["all x.((Water(x) | Sunlight(x)) -> ResourcesForPlants(x))"]}
{"id": "entailmentbank_train_2976", "nl": "different plants require different amounts of certain resources to grow / survive.", "fol": "", "prediction": ["all x y.((Plant(x) & Plant(y)) -> RequiresDifferentResources(x,y))"]}
{"id": "entailmentbank_train_2977", "nl": "different plants require different amounts of water and sunlight to grow / survive.", "fol": "", "prediction": ["all x.((Plant(x) & RequiresDifferentWater(x) & RequiresDifferentSunlight(x)) -> GrowsSurvives(x))"]}
{"id": "entailmentbank_train_2978", "nl": "a plant requires a specific climate to grow and survive.", "fol": "", "prediction": ["all x.((Plant(x) & Climate(x)) -> Requires(x,y))"]}
{"id": "entailmentbank_train_2979", "nl": "a tree falling in a forest creates a hole in a forest canopy.", "fol": "", "prediction": ["all x y.((Tree(x) & FallingInForest(x,y)) -> CreatesHoleInForestCanopy(x,y))"]}
{"id": "entailmentbank_train_2980", "nl": "a tree falling in a forest allows sunlight to reach the ground in some areas.", "fol": "", "prediction": ["all x y.((Tree(x) & FallsInForest(x,y)) -> AllowsSunlightToReachGround(x))"]}
{"id": "entailmentbank_train_2981", "nl": "if a living thing dies then the resources used by that living thing will become available.", "fol": "", "prediction": ["all x.((LivingThing(x) & Dies(x)) -> ResourcesBecomeAvailable(x))"]}
{"id": "entailmentbank_train_2982", "nl": "if a tree falls then that tree is dead.", "fol": "", "prediction": ["all x.((Tree(x) & Falls(x)) -> Dead(x))"]}
{"id": "entailmentbank_train_2983", "nl": "if a tree falls then the resources used by that tree will become available.", "fol": "", "prediction": ["all x.((Tree(x) & Falls(x)) -> ResourcesBecomeAvailable(x))"]}
{"id": "entailmentbank_train_2984", "nl": "a tree requires sunlight to grow.", "fol": "", "prediction": ["all x.(Tree(x) -> RequiresSunlight(x))"]}
{"id": "entailmentbank_train_2985", "nl": "if a tree falls then the sunlight that was used by that tree will become available.", "fol": "", "prediction": ["all x y.((Tree(x) & Falls(x)) -> Sunlight(y))"]}
{"id": "entailmentbank_train_2986", "nl": "if a tree falls then sunlight becomes available to the surrounding plants.", "fol": "", "prediction": ["all x y.((Tree(x) & Falls(x)) -> SunlightAvailableToSurroundingPlants(y))"]}
{"id": "entailmentbank_train_2987", "nl": "if an organism is restricted to an area then that organism can only live in that area.", "fol": "", "prediction": ["all x y.((Organism(x) & RestrictedToArea(x,y)) -> CanLiveInArea(x,y))"]}
{"id": "entailmentbank_train_2988", "nl": "algae are often restricted to the top 100 meters of the ocean.", "fol": "", "prediction": ["all x.(Algae(x) -> (RestrictedToTop100MetersOfOcean(x)))"]}
{"id": "entailmentbank_train_2989", "nl": "algae often can only live in the top 100 meters of the ocean.", "fol": "", "prediction": ["all x.(Algae(x) -> CanLiveInTop100MetersOfOcean(x))"]}
{"id": "entailmentbank_train_2990", "nl": "sunlight can be found in the top 100 meters of the ocean.", "fol": "", "prediction": ["all x.(Sunlight(x) -> CanBeFoundInTop100MetersOfOcean(x))"]}
{"id": "entailmentbank_train_2991", "nl": "algae an sunlight often can only be found in the top 100 meters of the ocean.", "fol": "", "prediction": ["all x.((Algae(x) & Sunlight(x)) -> CanBeFoundInTop100MetersOfOcean(x))"]}
{"id": "entailmentbank_train_2992", "nl": "solar energy is a kind of light.", "fol": "", "prediction": ["all x.(SolarEnergy(x) -> Light(x))"]}
{"id": "entailmentbank_train_2993", "nl": "sunlight is a kind of solar energy.", "fol": "", "prediction": ["all x.(Sunlight(x) -> SolarEnergy(x))"]}
{"id": "entailmentbank_train_2994", "nl": "photosynthesis means producers / green plants convert from carbon dioxide and water and solar energy into carbohydrates and food and oxygen for themselves.", "fol": "", "prediction": ["all x y z.((Producer(x) & GreenPlant(y) & CarbonDioxide(z) & Water(z)) -> ConvertsFrom(x,y,z))"]}
{"id": "entailmentbank_train_2995", "nl": "algae requires sunlight for photosynthesis.", "fol": "", "prediction": ["all x.(Algae(x) -> RequiresSunlightForPhotosynthesis(x))"]}
{"id": "entailmentbank_train_2996", "nl": "algae often can only be found in the top 100 meters of the ocean because they require sunlight.", "fol": "", "prediction": ["all x.(Algae(x) -> (CanBeFoundInTop100Meters(x) & RequiresSunlight(x)))"]}
{"id": "entailmentbank_train_2997", "nl": "precipitation is a kind of weather.", "fol": "", "prediction": ["all x.(Precipitation(x) -> Weather(x))"]}
{"id": "entailmentbank_train_2998", "nl": "rain is a kind of weather.", "fol": "", "prediction": ["all x.(Rain(x) -> Weather(x))"]}
{"id": "entailmentbank_train_2999", "nl": "shelter can protect animals from weather.", "fol": "", "prediction": ["all x.(Shelter(x) -> ProtectsAnimalsFromWeather(x))"]}
{"id": "entailmentbank_train_3000", "nl": "shelter can protect animals from rain.", "fol": "", "prediction": ["all x.(Shelter(x) -> ProtectsAnimalsFromRain(x))"]}
{"id": "entailmentbank_train_3001", "nl": "an animal needs to move to find shelter.", "fol": "", "prediction": ["all x.(Animal(x) -> NeedsMovementToFindShelter(x))"]}
{"id": "entailmentbank_train_3002", "nl": "moving to find shelter can protect an animal from rain.", "fol": "", "prediction": ["all x.((Animal(x) & MovingToFindShelter(x)) -> ProtectsFromRain(x))"]}
{"id": "entailmentbank_train_3003", "nl": "protecting an animal has a positive impact on that animal.", "fol": "", "prediction": ["all x y.((Animal(x) & Animal(y)) -> ProtectsPositiveImpact(x,y))"]}
{"id": "entailmentbank_train_3004", "nl": "moving to find shelter can have a positive impact on an animal in the rain.", "fol": "", "prediction": ["all x y.((MovingToFindShelter(x) & Animal(y) & Rain(x)) -> PositiveImpact(x,y))"]}
{"id": "entailmentbank_train_3005", "nl": "if performing an action has a positive impact on an animal, then that animal will likely perform that action.", "fol": "", "prediction": ["all x y.((Animal(x) & PerformsAction(x,y) & PositiveImpact(y)) -> PerformsAction(x,y))"]}
{"id": "entailmentbank_train_3006", "nl": "some animals will likely move to find shelter in the rain.", "fol": "", "prediction": ["exists x.(Animal(x) & MovesToFindShelterInRain(x))"]}
{"id": "entailmentbank_train_3007", "nl": "as temperature in the environment increases, the body temperature of a reptile in that environment will increase.", "fol": "", "prediction": ["all x y.((Reptile(x) & Environment(y) & IncreasesTemperature(x,y)) -> IncreasesBodyTemperature(x,y))"]}
{"id": "entailmentbank_train_3008", "nl": "as temperature during the day increases, the temperature in an environment will increase.", "fol": "", "prediction": ["all x y.((Temperature(x) & Environment(y)) -> Increases(x,y))"]}
{"id": "entailmentbank_train_3009", "nl": "as the temperature during the day increases, the body temperature of a reptile in a given environment will increase.", "fol": "", "prediction": ["all x y.((Reptile(x) & Environment(y)) -> IncreasedTemperature(x,y))"]}
{"id": "entailmentbank_train_3010", "nl": "warmer means greater / higher in temperature.", "fol": "", "prediction": ["all x.(Warmer(x) -> (GreaterTemperature(x) | HigherTemperature(x)))"]}
{"id": "entailmentbank_train_3011", "nl": "warmer temperatures means greater heat energy.", "fol": "", "prediction": ["all x.(WarmerTemperatures(x) -> GreaterHeatEnergy(x))"]}
{"id": "entailmentbank_train_3012", "nl": "being active requires energy.", "fol": "", "prediction": ["all x.(Active(x) -> RequiresEnergy(x))"]}
{"id": "entailmentbank_train_3013", "nl": "being active requires a warmer temperature.", "fol": "", "prediction": ["all x.(Active(x) -> WarmerTemperature(x))"]}
{"id": "entailmentbank_train_3014", "nl": "reptiles become more active as the day gets warmer.", "fol": "", "prediction": ["all x.((Reptile(x) & DayWarmer(x)) -> MoreActive(x))"]}
{"id": "entailmentbank_train_3015", "nl": "warmer temperatures cause reptiles to become more active.", "fol": "", "prediction": ["all x.(WarmerTemperatures(x) -> CausesReptilesToBecomeMoreActive(x))"]}
{"id": "entailmentbank_train_3016", "nl": "reptiles become more active on warmer days because their body temperature increases along with the temperature of their environment.", "fol": "", "prediction": ["all x.((Reptile(x) & WarmerDays(x) & BodyTemperatureIncreases(x)) -> MoreActive(x))"]}
{"id": "entailmentbank_train_3017", "nl": "a cat is startled by a loud noise.", "fol": "", "prediction": ["all x.((Cat(x) & LoudNoise(x)) -> Startled(x))"]}
{"id": "entailmentbank_train_3018", "nl": "a cat is a kind of animal.", "fol": "", "prediction": ["all x.(Cat(x) -> Animal(x))"]}
{"id": "entailmentbank_train_3019", "nl": "loud noises can cause animals to startle.", "fol": "", "prediction": ["all x.(LoudNoise(x) -> CanCauseAnimalsToStartle(x))"]}
{"id": "entailmentbank_train_3020", "nl": "objects in an environment are a part of that environment.", "fol": "", "prediction": ["all x y.((Object(x) & Environment(y)) -> PartOfEnvironment(x,y))"]}
{"id": "entailmentbank_train_3021", "nl": "objects in an environment may produce loud noises.", "fol": "", "prediction": ["all x.((Object(x) & Environment(x)) -> MayProduceLoudNoise(x))"]}
{"id": "entailmentbank_train_3022", "nl": "an environment may produce loud noises.", "fol": "", "prediction": ["all x.(Environment(x) -> MayProduceLoudNoise(x))"]}
{"id": "entailmentbank_train_3023", "nl": "an environment may cause animals to startle.", "fol": "", "prediction": ["all x.(Environment(x) -> MayCauseAnimalsToStartle(x))"]}
{"id": "entailmentbank_train_3024", "nl": "a cat jumps when startled.", "fol": "", "prediction": ["all x.((Cat(x) & Startled(x)) -> Jumps(x))"]}
{"id": "entailmentbank_train_3025", "nl": "some animals jump when startled.", "fol": "", "prediction": ["exists x.(Animal(x) & JumpsWhenStarled(x))"]}
{"id": "entailmentbank_train_3026", "nl": "an environment may cause animals to startle and jump.", "fol": "", "prediction": ["all x.(Environment(x) -> (CausesStarting(x) & CausesJumping(x)))"]}
{"id": "entailmentbank_train_3027", "nl": "if something causes something else, then that something else is a response to that something.", "fol": "", "prediction": ["all x y.((Causes(x,y) & Causes(y,x)) -> ResponseTo(x,y))"]}
{"id": "entailmentbank_train_3028", "nl": "an example of an organism responding to its external environment is an animal jumping when startled.", "fol": "", "prediction": ["all x.((Organism(x) & RespondsToExternalEnvironment(x)) -> JumpingWhenStarled(x))"]}
{"id": "entailmentbank_train_3029", "nl": "heart pumps blood to the rest of the body.", "fol": "", "prediction": ["all x y.((Heart(x) & Body(y)) -> PumpsBloodTo(x,y))"]}
{"id": "entailmentbank_train_3030", "nl": "blood is a vehicle for carrying oxygen from the lungs to the rest of the body.", "fol": "", "prediction": ["all x y.((Blood(x) & Lungs(y)) -> CarriesOxygen(x,y))"]}
{"id": "entailmentbank_train_3031", "nl": "the heart pumping blood transports oxygen to the rest of the body.", "fol": "", "prediction": ["all x y.((Heart(x) & PumpingBlood(x) & Body(y)) -> TransportsOxygen(x,y))"]}
{"id": "entailmentbank_train_3032", "nl": "if something is transported to something else then that something else receives that something.", "fol": "", "prediction": ["all x y.((Transportation(x) & TransportedTo(x,y)) -> Receives(x,y))"]}
{"id": "entailmentbank_train_3033", "nl": "the heart pumping blood causes the rest of the body to recive oxygen.", "fol": "", "prediction": ["all x y.((Heart(x) & PumpingBlood(x) & RestOfBody(y)) -> RecivesOxygen(y))"]}
{"id": "entailmentbank_train_3034", "nl": "as the rate of a heart beating increases, the rate of the blood traveling to the rest of the body will increase.", "fol": "", "prediction": ["all x y.((HeartBreathingRate(x) & BloodTravel(y)) -> Increases(x,y))"]}
{"id": "entailmentbank_train_3035", "nl": "as the rate of heart beating increases, the amount of oxygen being recived by the rest of the body increases.", "fol": "", "prediction": ["all x y.((RateOfHeartBreaking(x) & HeartBreaking(y)) -> IncreasesAmountOfOxygen(x,y))"]}
{"id": "entailmentbank_train_3036", "nl": "muscels are a part of the body.", "fol": "", "prediction": ["all x.(Muscel(x) -> PartOfBody(x))"]}
{"id": "entailmentbank_train_3037", "nl": "muscle cells are a part of muscles.", "fol": "", "prediction": ["all x.(MuscleCell(x) -> PartOfMuscles(x))"]}
{"id": "entailmentbank_train_3038", "nl": "muscle cells are a part of the body.", "fol": "", "prediction": ["all x.(MuscleCell(x) -> PartOfBody(x))"]}
{"id": "entailmentbank_train_3039", "nl": "as the rate of heart beating increases, the amount of oxygen being recived by muscle cells increases.", "fol": "", "prediction": ["all x y.((RateOfHeartBreaking(x) & MuscleCells(y)) -> IncreasesAmountOfOxygen(x,y))"]}
{"id": "entailmentbank_train_3040", "nl": "heat means temperature increases.", "fol": "", "prediction": ["all x.(Heat(x) -> TemperatureIncrease(x))"]}
{"id": "entailmentbank_train_3041", "nl": "sweat is used for adjusting to hot temperatures by some animals.", "fol": "", "prediction": ["exists x.(Animal(x) & Sweat(x) & AdjustsToHotTemperatures(x))"]}
{"id": "entailmentbank_train_3042", "nl": "when the body is hot, sweat is produced to cool the body.", "fol": "", "prediction": ["all x.((Body(x) & Hot(x)) -> ProducesSweat(x))"]}
{"id": "entailmentbank_train_3043", "nl": "to sweat means to discharge sweat from the skin.", "fol": "", "prediction": ["all x.(Sweat(x) -> DischargesSweatFromSkin(x))"]}
{"id": "entailmentbank_train_3044", "nl": "sweat is a kind of liquid.", "fol": "", "prediction": ["all x.(Sweat(x) -> Liquid(x))"]}
{"id": "entailmentbank_train_3045", "nl": "to sweat means to discharge liquid from the skin.", "fol": "", "prediction": ["all x.(Sweat(x) -> DischargesLiquidFromSkin(x))"]}
{"id": "entailmentbank_train_3046", "nl": "water is a kind of liquid at room temperature.", "fol": "", "prediction": ["all x.(Water(x) -> RoomTemperatureLiquid(x))"]}
{"id": "entailmentbank_train_3047", "nl": "sweat is a discharge of water from the skin.", "fol": "", "prediction": ["all x.(Sweat(x) -> DischargeOfWaterFromSkin(x))"]}
{"id": "entailmentbank_train_3048", "nl": "when the body is hot, water is discharged from the skin to cool the body.", "fol": "", "prediction": ["all x.((Body(x) & Hot(x)) -> WaterDischargedToCool(x))"]}
{"id": "entailmentbank_train_3049", "nl": "special molecules carry messages from the cell membrane to the cell nucleus.", "fol": "", "prediction": ["all x y z.((SpecialMolecule(x) & CellMembrane(y) & CellNucleus(z)) -> CarriesMessages(x,y,z))"]}
{"id": "entailmentbank_train_3050", "nl": "the cell nucleus controls many of the functions of the cell.", "fol": "", "prediction": ["all x y.((CellNucleus(x) & Cell(y)) -> ControlsFunctions(x,y))"]}
{"id": "entailmentbank_train_3051", "nl": "special molecules carry messages from the rest of the cell to the organelle that controls the cell.", "fol": "", "prediction": ["all x y z.((SpecialMolecule(x) & Cell(y) & Organelle(z)) -> CarriesMessages(x,y,z))"]}
{"id": "entailmentbank_train_3052", "nl": "an animal's brain controls that animal.", "fol": "", "prediction": ["all x y.((Animal(x) & Brain(y)) -> Controls(x,y))"]}
{"id": "entailmentbank_train_3053", "nl": "the endocrine system carries messages from the body to the brain.", "fol": "", "prediction": ["all x y.((EndocrineSystem(x) & Body(y)) -> CarriesMessages(x,y))"]}
{"id": "entailmentbank_train_3054", "nl": "the endocrine system carries messages from the body to the organ that controls the body.", "fol": "", "prediction": ["all x y z.((EndocrineSystem(x) & Body(y) & Organ(z)) -> CarriesMessages(x,y,z))"]}
{"id": "entailmentbank_train_3055", "nl": "special molecules in cells and the endocrine system both carry messages through parts of an organism to the structure that controls that part of the organism.", "fol": "", "prediction": ["all x y.((SpecialMolecules(x) & Cell(y) & EndocrineSystem(x)) -> (CarriesMessages(x,y) & ControlsPartOfOrganism(x,y)))"]}
{"id": "entailmentbank_train_3056", "nl": "if two things perform the same function then those two things are similar.", "fol": "", "prediction": ["all x.((TwoThings(x) & PerformSameFunction(x)) -> Similar(x))"]}
{"id": "entailmentbank_train_3057", "nl": "the endocrine system is similar to special molecules in the cells.", "fol": "", "prediction": ["all x y.((EndocrineSystem(x) & SpecialMolecule(y)) -> SimilarTo(x,y))"]}
{"id": "entailmentbank_train_3058", "nl": "gills are used for breathing water by aquatic animals.", "fol": "", "prediction": ["all x y.((Gills(x) & AquaticAnimal(y)) -> UsedForBreathingWater(x,y))"]}
{"id": "entailmentbank_train_3059", "nl": "gills are a part of a fish used for breathing water.", "fol": "", "prediction": ["all x.(Gills(x) -> (PartOfFish(x) & UsedForBreathingWater(x)))"]}
{"id": "entailmentbank_train_3060", "nl": "water contains dissolved oxygen.", "fol": "", "prediction": ["all x.(Water(x) -> ContainsDissolvedOxygen(x))"]}
{"id": "entailmentbank_train_3061", "nl": "water is a part of an environment that contains dissolved oxygen.", "fol": "", "prediction": ["all x.(Water(x) -> (PartOfEnvironment(x) & ContainsDissolvedOxygen(x)))"]}
{"id": "entailmentbank_train_3062", "nl": "breathing is when an animal converts oxygen in their environment into oxygen in blood.", "fol": "", "prediction": ["all x y.((Animal(x) & Oxygen(y) & Environment(y)) -> ConvertsToOxygen(x,y))"]}
{"id": "entailmentbank_train_3063", "nl": "breathing is when an animal converts oxygen in water into oxygen in blood.", "fol": "", "prediction": ["all x.(Breathing(x) -> (AnimalConvertsOxygenInWater(x) & OxygenInBlood(x)))"]}
{"id": "entailmentbank_train_3064", "nl": "breathing is when a gill converts from oxygen in water into oxygen in blood.", "fol": "", "prediction": ["all x y.((Gill(x) & OxygenInWater(y) & OxygenInBlood(x)) -> ConvertsTo(x,y))"]}
{"id": "entailmentbank_train_3065", "nl": "in order to convert oxygen in water into oxygen in blood, fish must take in oxygen from water.", "fol": "", "prediction": ["all x y.((Fish(x) & OxygenInWater(x) & OxygenInBlood(y)) -> TakesInOxygenFromWater(x,y))"]}
{"id": "entailmentbank_train_3066", "nl": "fish use gills to take in oxygen that is dissolved in water.", "fol": "", "prediction": ["all x.(Fish(x) -> UsesGillsToTakeInOxygen(x))"]}
{"id": "entailmentbank_train_3067", "nl": "gills are a part of a fish used for breathing oxygen in water.", "fol": "", "prediction": ["all x y.((Fish(x) & Gills(y)) -> UsedForBreathingOxygenInWater(x,y))"]}
{"id": "entailmentbank_train_3068", "nl": "an example of an adaptation is something that is used for getting oxygen.", "fol": "", "prediction": ["all x.(Adaptation(x) -> (UsedForOxygen(x)))"]}
{"id": "entailmentbank_train_3069", "nl": "gills are a kind of adaptation for getting oxygen underwater.", "fol": "", "prediction": ["all x.(Gills(x) -> AdaptationForOxygenUnderwater(x))"]}
{"id": "entailmentbank_train_3070", "nl": "in order to breath air you must take in air.", "fol": "", "prediction": ["all x.(BreathesAir(x) -> TakesInAir(x))"]}
{"id": "entailmentbank_train_3071", "nl": "a lung is a kind of organ for breathing air.", "fol": "", "prediction": ["all x.(Lung(x) -> BreathesAir(x))"]}
{"id": "entailmentbank_train_3072", "nl": "a lung is a kind of organ for taking in air.", "fol": "", "prediction": ["all x.(Lung(x) -> OrganForAir(x))"]}
{"id": "entailmentbank_train_3073", "nl": "the lungs are a part of the respiratory system.", "fol": "", "prediction": ["all x.(Lungs(x) -> PartOfRespiratorySystem(x))"]}
{"id": "entailmentbank_train_3074", "nl": "the respiratory system takes in oxygen from the air.", "fol": "", "prediction": ["all x y.((RespiratorySystem(x) & Air(y)) -> TakesInOxygen(x,y))"]}
{"id": "entailmentbank_train_3075", "nl": "converting oxygen from air into oxygen from blood means absorbing oxygen from air into the blood.", "fol": "", "prediction": ["all x y.((ConvertsOxygenFromAirToOxygenFromBlood(x) & OxygenFromAirToBlood(y)) -> AbsorbsOxygenFromAirIntoBlood(x,y))"]}
{"id": "entailmentbank_train_3076", "nl": "breathing is when a lung converts from oxygen in air into oxygen in blood.", "fol": "", "prediction": ["all x.(Breathing(x) -> (ConvertsOxygenInAir(x) & OxygenInBlood(x)))"]}
{"id": "entailmentbank_train_3077", "nl": "blood absorbs oxygen in the lungs.", "fol": "", "prediction": ["all x.(BloodAbsorbsOxygenInLungs(x) -> InLungs(x))"]}
{"id": "entailmentbank_train_3078", "nl": "if something is absorbed by something else, then that something is transferred to that something else.", "fol": "", "prediction": ["all x y.((AbsorbedBy(x,y) & SomethingOther(y)) -> TransferredTo(x,y))"]}
{"id": "entailmentbank_train_3079", "nl": "the lungs transfer oxygen to the blood.", "fol": "", "prediction": ["all x.(LungsTransferOxygenToBlood(x) -> TransfersOxygenToBlood(x))"]}
{"id": "entailmentbank_train_3080", "nl": "the respiratory system transfers oxygen to the blood.", "fol": "", "prediction": ["all x y.((RespiratorySystem(x) & Blood(y)) -> TransfersOxygenTo(x,y))"]}
{"id": "entailmentbank_train_3081", "nl": "blood is a part of the circulatory system.", "fol": "", "prediction": ["all x.(Blood(x) -> PartOfCirculatorySystem(x))"]}
{"id": "entailmentbank_train_3082", "nl": "the respiratory system transfers oxygen to the circulatory system.", "fol": "", "prediction": ["all x y.((RespiratorySystem(x) & CirculatorySystem(y)) -> TransfersOxygen(x,y))"]}
{"id": "entailmentbank_train_3083", "nl": "the respiratory system takes in oxygen from the air to be moved by the circulatory system.", "fol": "", "prediction": ["all x y z.((RespiratorySystem(x) & Oxygen(y) & CirculatorySystem(z)) -> TakesInFromAirToBeMoved(x,y,z))"]}
{"id": "entailmentbank_train_3084", "nl": "an example of taking something in is an animal inhaling something.", "fol": "", "prediction": ["all x.((Animal(x) & Inhaling(x)) -> TakesIn(x))"]}
{"id": "entailmentbank_train_3085", "nl": "something exchanging things with something else means that something taking one kind of thing from that something else and giving off another kind of thing to that something else.", "fol": "", "prediction": ["all x y z.((ExchangingThings(x) & SomethingOther(y) & SomethingOther(z)) -> (TakesOneTypeOfThing(x,y) & GivesOffAnotherTypeOfThing(x,z)))"]}
{"id": "entailmentbank_train_3086", "nl": "an example of an animal exchanging things with something else is that animal inhaling one kind of thing from that something else and giving off another kind of thing to that something else.", "fol": "", "prediction": ["all x y.((Animal(x) & Animal(y)) -> (ExchangingThingsWith(x,y) & Inhaling(x,y) & GivingOff(x,y)))"]}
{"id": "entailmentbank_train_3087", "nl": "an example of giving something off is an animal exhaling.", "fol": "", "prediction": ["all x.((Animal(x) & Exhaling(x)) -> GivesOff(x))"]}
{"id": "entailmentbank_train_3088", "nl": "an example of an animal exchanging things with something else is that animal inhaling one kind of thing from that something else and exhaling another kind of thing to that something else.", "fol": "", "prediction": ["all x y.((Animal(x) & Animal(y) & ExchangingThings(x,y)) -> (InhalingOneTypeOfThing(x,y) & ExhalingAnotherTypeOfThing(x,y)))"]}
{"id": "entailmentbank_train_3089", "nl": "breathing in is when animals inhale air into their lungs.", "fol": "", "prediction": ["all x.(BreathingIn(x) -> InhalesAirIntoLungs(x))"]}
{"id": "entailmentbank_train_3090", "nl": "breathing out is when animals exhale / expel carbon dioxide from their lungs into the air.", "fol": "", "prediction": ["all x.(BreathingOut(x) -> (ExhalesCarbonDioxide(x) & ExpelsCarbonDioxide(x)))"]}
{"id": "entailmentbank_train_3091", "nl": "breathing is when animals inhale air and exhale carbon dioxide into the air.", "fol": "", "prediction": ["all x.(Breathing(x) -> (InhalesAir(x) & ExhalesCarbonDioxide(x)))"]}
{"id": "entailmentbank_train_3092", "nl": "air is a part of the environment.", "fol": "", "prediction": ["all x.(Air(x) -> PartOfEnvironment(x))"]}
{"id": "entailmentbank_train_3093", "nl": "breathing is when animals inhale air from the environment and exhale carbon dioxide into the environment.", "fol": "", "prediction": ["all x y z.((Animal(x) & Air(y) & Environment(z) & Inhales(x,y) & Exhales(x,z)) -> Breathing(x))"]}
{"id": "entailmentbank_train_3094", "nl": "carbon dioxide is a kind of gas.", "fol": "", "prediction": ["all x.(CarbonDioxide(x) -> Gas(x))"]}
{"id": "entailmentbank_train_3095", "nl": "air and carbon dioxide are both kinds of gasses.", "fol": "", "prediction": ["all x.((Air(x) | CarbonDioxide(x)) -> Gasses(x))"]}
{"id": "entailmentbank_train_3096", "nl": "breathing is when an animal inhales one kind of gas from the environment and exhales another kind of gas into the environment.", "fol": "", "prediction": ["all x y z.((Animal(x) & Gas(y) & Environment(z) & Inhales(x,y) & Exhales(x,z)) -> Breathing(x))"]}
{"id": "entailmentbank_train_3097", "nl": "and example of an animal exchanging gasses with the environment is an animal breathing.", "fol": "", "prediction": ["all x.((Animal(x) & ExchangingGasesWithEnvironment(x)) -> AnimalBreathing(x))"]}
{"id": "entailmentbank_train_3098", "nl": "a lung is a kind of organ for exchanging gasses with the environment.", "fol": "", "prediction": ["all x.(Lung(x) -> (Organ(x) & ExchangingGasesWithEnvironment(x)))"]}
{"id": "entailmentbank_train_3099", "nl": "the respiratory system is used for exchanging gasses with the environment.", "fol": "", "prediction": ["all x y.((RespiratorySystem(x) & Environment(y)) -> ExchangingGasesWith(x,y))"]}
{"id": "entailmentbank_train_3100", "nl": "lungs are used for breathing air by birds.", "fol": "", "prediction": ["all x y.((Lung(x) & Bird(y)) -> UsedForBreathingAir(x,y))"]}
{"id": "entailmentbank_train_3101", "nl": "breathing is a kind of function.", "fol": "", "prediction": ["all x.(Breathing(x) -> Function(x))"]}
{"id": "entailmentbank_train_3102", "nl": "lungs perform the function of breathing in birds.", "fol": "", "prediction": ["all x y.((Lung(x) & Bird(y)) -> PerformsBreathingFunction(x,y))"]}
{"id": "entailmentbank_train_3103", "nl": "skin is used for breathing air by frogs.", "fol": "", "prediction": ["all x y.((Skin(x) & Frog(y)) -> UsedForBreathingAir(x,y))"]}
{"id": "entailmentbank_train_3104", "nl": "skin performs the function of breathing in frogs.", "fol": "", "prediction": ["all x y.((Skin(x) & Frog(y)) -> PerformsBreathingFunction(x,y))"]}
{"id": "entailmentbank_train_3105", "nl": "lungs in birds and skin on frogs both perform the function of breathing.", "fol": "", "prediction": ["all x y.((Lungs(x) & Skin(y) & Frog(z)) -> (PerformsBreathing(x,y) & InBird(x) & InFrog(y,z)))"]}
{"id": "entailmentbank_train_3106", "nl": "the function of skin on frogs is similar to the function of lungs in birds.", "fol": "", "prediction": ["all x y.((FunctionOfSkinOnFrogs(x) & FunctionOfLungs(y)) -> SimilarToFunctionOfLungsInBirds(x))"]}
{"id": "entailmentbank_train_3107", "nl": "the respiratory system is a part of the body.", "fol": "", "prediction": ["all x.(RespiratorySystem(x) -> PartOfBody(x))"]}
{"id": "entailmentbank_train_3108", "nl": "the respiratory system takes oxygen from the air into the body.", "fol": "", "prediction": ["all x y.((RespiratorySystem(x) & Air(y)) -> TakesOxygenIntoBody(x,y))"]}
{"id": "entailmentbank_train_3109", "nl": "the respiratory system takes oxygen from the environment into the body.", "fol": "", "prediction": ["all x y.((RespiratorySystem(x) & Environment(y)) -> TakesOxygen(x,y))"]}
{"id": "entailmentbank_train_3110", "nl": "the lungs are a part of the body of an animal used for breathing air.", "fol": "", "prediction": ["all x y.((Lungs(x) & Animal(y)) -> UsedForBreathingAir(x,y))"]}
{"id": "entailmentbank_train_3111", "nl": "the respiratory system is used for breathing.", "fol": "", "prediction": ["all x.(RespiratorySystem(x) -> UsedForBreathing(x))"]}
{"id": "entailmentbank_train_3112", "nl": "breathing is when animals convert oxygen into carbon dioxide.", "fol": "", "prediction": ["all x.(Breathing(x) -> (AnimalConvertsOxygenToCarbonDioxide(x)))"]}
{"id": "entailmentbank_train_3113", "nl": "the respiratory system is used for converting oxygen into carbon dioxide by breathing.", "fol": "", "prediction": ["all x.(RespiratorySystem(x) -> ConvertsOxygenToCarbonDioxideByBreathing(x))"]}
{"id": "entailmentbank_train_3114", "nl": "the respiratory system takes oxygen from the environment into the body and converts it to carbon dioxide by breathing.", "fol": "", "prediction": ["all x y z.((RespiratorySystem(x) & Oxygen(y) & Environment(z)) -> (TakesFromEnvironmentIntoBody(x,y,z) & ConvertsToCarbonDioxide(x,y)))"]}
{"id": "entailmentbank_train_3115", "nl": "breathing out is when animals expel carbon dioxide from their lungs into the environment.", "fol": "", "prediction": ["all x y.((Animal(x) & Air(y) & ExpelsCarbonDioxide(x,y)) -> BreathesOut(x))"]}
{"id": "entailmentbank_train_3116", "nl": "lungs are a part of the body.", "fol": "", "prediction": ["all x.(Lung(x) -> PartOfBody(x))"]}
{"id": "entailmentbank_train_3117", "nl": "breathing out is when animals expel carbon dioxide from their body into the environment.", "fol": "", "prediction": ["all x.(BreathingOut(x) -> ExpelsCarbonDioxide(x))"]}
{"id": "entailmentbank_train_3118", "nl": "the respiratory system takes oxygen from the environment into the body and expels carbon dioxide from the body into the environment by breathing.", "fol": "", "prediction": ["all x y z.((RespiratorySystem(x) & Oxygen(y) & Body(z)) -> (TakesFromEnvironmentInto(x,y,z) & ExelsCarbonDioxide(x,y,z)))"]}
{"id": "entailmentbank_train_3119", "nl": "to exchange things between something and something else means that something takes in one kind of thing from that something else and expels another kind of thing into that something else.", "fol": "", "prediction": ["all x y.((ExchangeThings(x) & SomethingOther(y)) -> (TakesInOneThan(x,y) & ExelsAnotherThan(x,y)))"]}
{"id": "entailmentbank_train_3120", "nl": "the respiratory system is used for exchanging oxygen and carbon dioxide between the body and the environment.", "fol": "", "prediction": ["all x y.((RespiratorySystem(x) & Body(y)) -> ExchangesOxygenAndCarbonDioxide(x,y))"]}
{"id": "entailmentbank_train_3121", "nl": "animals require respiration to survive / use energy.", "fol": "", "prediction": ["all x.(Animal(x) -> RequiresRespirationToSurvive(x))"]}
{"id": "entailmentbank_train_3122", "nl": "breathing is a process in animal respiration.", "fol": "", "prediction": ["all x.(Breathing(x) -> AnimalRespiration(x))"]}
{"id": "entailmentbank_train_3123", "nl": "animals must breath to survive.", "fol": "", "prediction": ["all x.(Animal(x) -> MustBreathe(x))"]}
{"id": "entailmentbank_train_3124", "nl": "an animal requires oxygen for survival / to breathe.", "fol": "", "prediction": ["all x.((Animal(x) & RequiresOxygen(x)) -> (Survival(x) | Breathe(x)))"]}
{"id": "entailmentbank_train_3125", "nl": "if something is required by something else then that something must be provided to that somethign else.", "fol": "", "prediction": ["all x y.((RequiredBy(x,y) & Other(y)) -> ProvidedTo(x,y))"]}
{"id": "entailmentbank_train_3126", "nl": "oxygen must be provided to animals in order for them to breathe / survive.", "fol": "", "prediction": ["all x y.((Animal(x) & Oxygen(y)) -> BreathesSurvives(x,y))"]}
{"id": "entailmentbank_train_3127", "nl": "breathing out is when animals expel carbon dioxide from their lungs into the air.", "fol": "", "prediction": ["all x.(BreathingOut(x) -> (ExpelsCarbonDioxide(x) & FromLungsIntoAir(x)))"]}
{"id": "entailmentbank_train_3128", "nl": "if something is expelled in a process, then that something is a waste product of that process.", "fol": "", "prediction": ["all x y.((ExpelledInProcess(x) & WasteProduct(y)) -> WasteProduct(y))"]}
{"id": "entailmentbank_train_3129", "nl": "carbon dioxide is a waste product of the breathing process.", "fol": "", "prediction": ["all x.(CarbonDioxide(x) -> WasteProductOfBreathingProcess(x))"]}
{"id": "entailmentbank_train_3130", "nl": "in the animal respiration process carbon dioxide is a waste product.", "fol": "", "prediction": ["all x.((AnimalRespirationProcess(x) & CarbonDioxide(x)) -> WasteProduct(x))"]}
{"id": "entailmentbank_train_3131", "nl": "waste must be removed.", "fol": "", "prediction": ["all x.(Waste(x) -> MustBeRemoved(x))"]}
{"id": "entailmentbank_train_3132", "nl": "carbon dioxide must be removed from an environment where animals are performing respiration.", "fol": "", "prediction": ["all x y.((Environment(x) & Animal(y) & PerformsRespiration(y)) -> CarbonDioxideRemoved(x,y))"]}
{"id": "entailmentbank_train_3133", "nl": "in an environment where animals are breathing / performing respiration, oxygen must be provided and carbon dioxide must be removed.", "fol": "", "prediction": ["all x.((Environment(x) & AnimalsBreathing(x) & PerformsRespiration(x)) -> (OxygenProvened(x) & CarbonDioxideRemoved(x)))"]}
{"id": "entailmentbank_train_3134", "nl": "the absorption of oxygen through the blood occurs in the lungs.", "fol": "", "prediction": ["all x y.((AbsorptionOfOxygenThroughBlood(x) & Blood(y)) -> OccursInLungs(x,y))"]}
{"id": "entailmentbank_train_3135", "nl": "the lungs take in oxygen from the air.", "fol": "", "prediction": ["all x y.((Lung(x) & Air(y)) -> TakesInOxygen(x,y))"]}
{"id": "entailmentbank_train_3136", "nl": "the respiratory system takes in oxygen from the air to the lungs.", "fol": "", "prediction": ["all x y z.((RespiratorySystem(x) & Air(y) & Lungs(z)) -> TakesInOxygen(x,y,z))"]}
{"id": "entailmentbank_train_3137", "nl": "the respiratory system brings oxygen from the air to the circulatory system.", "fol": "", "prediction": ["all x y z.((RespiratorySystem(x) & Air(y) & CirculatorySystem(z)) -> BringsOxygen(x,y,z))"]}
{"id": "entailmentbank_train_3138", "nl": "circulation the circulatory system transports blood throughout the body.", "fol": "", "prediction": ["all x y.((CirculatorySystem(x) & Blood(y)) -> TransportsThroughoutBody(x,y))"]}
{"id": "entailmentbank_train_3139", "nl": "the circulatory system brings oxygen from the lungs to the rest of the body.", "fol": "", "prediction": ["all x y.((CirculatorySystem(x) & Breath(y)) -> BringsOxygen(x,y))"]}
{"id": "entailmentbank_train_3140", "nl": "the respiratory system and the circulatory system both work to bring oxygen from the air to the rest of the body.", "fol": "", "prediction": ["all x y.((RespiratorySystem(x) & CirculatorySystem(y)) -> (BringsOxygen(x,y) & FromAirToBody(x)))"]}
{"id": "entailmentbank_train_3141", "nl": "the respiratory system and circulatory system are similar because they bring oxygen to the body.", "fol": "", "prediction": ["all x y.((RespiratorySystem(x) & CirculatorySystem(y)) -> BringsOxygenToBody(x,y))"]}
{"id": "entailmentbank_train_3142", "nl": "the respiratory system transports oxygen from the air to the circulatory system.", "fol": "", "prediction": ["all x y z.((RespiratorySystem(x) & Air(y) & CirculatorySystem(z)) -> TransportsOxygen(x,y,z))"]}
{"id": "entailmentbank_train_3143", "nl": "the respiratory system and circulatory system bring oxygen from the air to the rest of the body.", "fol": "", "prediction": ["all x y.((RespiratorySystem(x) & CirculatorySystem(y)) -> BringsOxygen(x,y))"]}
{"id": "entailmentbank_train_3144", "nl": "cells are a part of the body.", "fol": "", "prediction": ["all x.(Cell(x) -> PartOfBody(x))"]}
{"id": "entailmentbank_train_3145", "nl": "the respiratory system and circulatory system bring oxygen from the air to the cells of a body.", "fol": "", "prediction": ["all x y z.((RespiratorySystem(x) & CirculatorySystem(y) & Body(z)) -> BringsOxygenFromAirToCells(x,y,z))"]}
{"id": "entailmentbank_train_3146", "nl": "the respiratory system performs respiration.", "fol": "", "prediction": ["all x.(RespiratorySystem(x) -> PerformsRespiration(x))"]}
{"id": "entailmentbank_train_3147", "nl": "maintaining homeostasis requires respiration.", "fol": "", "prediction": ["all x.(Homeostasis(x) -> RequiresRespiration(x))"]}
{"id": "entailmentbank_train_3148", "nl": "respiration performed by the respiratory system is required for maintaining homeostasis.", "fol": "", "prediction": ["all x.(RespirationPerformedByRespiratorySystem(x) -> RequiresHomeostasis(x))"]}
{"id": "entailmentbank_train_3149", "nl": "the respiratory system is used for breathing air.", "fol": "", "prediction": ["all x.(RespiratorySystem(x) -> UsedForBreathingAir(x))"]}
{"id": "entailmentbank_train_3150", "nl": "breathing air performed by the respiratory system is required for maintaining homeostasis.", "fol": "", "prediction": ["all x.((BreathingAir(x) & RespiratorySystem(x)) -> RequiresHomeostasis(x))"]}
{"id": "entailmentbank_train_3151", "nl": "breathing out is when animals exhale carbon dioxide from their lungs into the air.", "fol": "", "prediction": ["all x.(BreathingOut(x) -> (ExhalesCarbonDioxide(x) & FromLungsIntoAir(x)))"]}
{"id": "entailmentbank_train_3152", "nl": "tightening muscles in the chest can be used to exhale.", "fol": "", "prediction": ["all x.((TighteningMuscles(x) & InChest(x)) -> Exhale(x))"]}
{"id": "entailmentbank_train_3153", "nl": "tightening of the muscles of the chest is used for exhaling carbon dioxide out of the lungs when breathing.", "fol": "", "prediction": ["all x y.((TighteningMuscles(x) & Chest(y) & Breathing(x)) -> ExhalesCarbonDioxide(x,y))"]}
{"id": "entailmentbank_train_3154", "nl": "the muscular system contains muscles.", "fol": "", "prediction": ["all x.(MuscleSystem(x) -> ContainsMuscles(x))"]}
{"id": "entailmentbank_train_3155", "nl": "tightening of the muscles of the chest performed by the muscular system is used for exhaling carbon dioxide out of the lungs when breathing.", "fol": "", "prediction": ["all x y.((TighteningMuscles(x) & MusclesOfChest(y) & PerformedByMuscularSystem(x,y)) -> ExhalesCarbonDioxideOutOfLungs(x))"]}
{"id": "entailmentbank_train_3156", "nl": "the muscular system tightens the muscles of the chest to help the respiratory system exhale carbon dioxide out of the lungs when breathing in order to maintain homeostasis.", "fol": "", "prediction": ["all x y z.((MuscleSystem(x) & Chest(y) & RespiratorySystem(z)) -> (TightensMuscles(x,y) & HelpsExhaleCarbonDioxide(x,z) & MaintainsHomeostasis(x)))"]}
{"id": "entailmentbank_train_3157", "nl": "smoking is a kind of method for inhaling smoke.", "fol": "", "prediction": ["all x.(Smoking(x) -> InhalesSmoke(x))"]}
{"id": "entailmentbank_train_3158", "nl": "smoking harms the body.", "fol": "", "prediction": ["all x.(Smoking(x) -> HarmsBody(x))"]}
{"id": "entailmentbank_train_3159", "nl": "inhaling smoke by smoking harms the body.", "fol": "", "prediction": ["all x.((Smoking(x) & InhalingSmoke(x)) -> HarmsBody(x))"]}
{"id": "entailmentbank_train_3160", "nl": "when a lung breathes in air the air goes directly to the lungs.", "fol": "", "prediction": ["all x y.((Lung(x) & BreathesInAir(x)) -> AirGoesToLungs(y))"]}
{"id": "entailmentbank_train_3161", "nl": "a lung is a kind of organ for directly breathing in air.", "fol": "", "prediction": ["all x.(Lung(x) -> (Organ(x) & BreathesInAir(x)))"]}
{"id": "entailmentbank_train_3162", "nl": "air contains gasses.", "fol": "", "prediction": ["all x.(Air(x) -> ContainsGases(x))"]}
{"id": "entailmentbank_train_3163", "nl": "a lung is a kind of organ for directly breathing in gasses.", "fol": "", "prediction": ["all x.(Lung(x) -> (Organ(x) & ForBreathingInGases(x)))"]}
{"id": "entailmentbank_train_3164", "nl": "smoke is a kind of gas.", "fol": "", "prediction": ["all x.(Smoke(x) -> Gas(x))"]}
{"id": "entailmentbank_train_3165", "nl": "lungs can be used for directly breathing in smoke.", "fol": "", "prediction": ["all x.(Lung(x) -> (BreathesInSmoke(x) & Directly(x)))"]}
{"id": "entailmentbank_train_3166", "nl": "smoking causes direct damage to the lungs.", "fol": "", "prediction": ["all x.(Smoking(x) -> CausesDirectDamageToLungs(x))"]}
{"id": "entailmentbank_train_3167", "nl": "blood is made up of blood cells.", "fol": "", "prediction": ["all x.(Blood(x) -> MadeUpOfBloodCells(x))"]}
{"id": "entailmentbank_train_3168", "nl": "blood cells carry oxygen to the body.", "fol": "", "prediction": ["all x.(BloodCell(x) -> CarriesOxygenToBody(x))"]}
{"id": "entailmentbank_train_3169", "nl": "red blood cells contain hemoglobin.", "fol": "", "prediction": ["all x.(RedBloodCell(x) -> ContainsHydrogen(x))"]}
{"id": "entailmentbank_train_3170", "nl": "red blood cells are a kind of blood cell.", "fol": "", "prediction": ["all x.(RedBloodCell(x) -> BloodCell(x))"]}
{"id": "entailmentbank_train_3171", "nl": "red blood cells are a kind of blood cell that contain hemoglobin.", "fol": "", "prediction": ["all x.(RedBloodCell(x) -> (BloodCell(x) & ContainsHydrogen(x)))"]}
{"id": "entailmentbank_train_3172", "nl": "hemoglobin is a kind of protein that carries oxygen.", "fol": "", "prediction": ["all x.(Hydrogen(x) -> CarriesOxygen(x))"]}
{"id": "entailmentbank_train_3173", "nl": "red blood cells are a kind of blood cell that contain a protein that carries oxygen.", "fol": "", "prediction": ["all x.(RedBloodCell(x) -> (BloodCell(x) & ContainsProtein(x) & CarriesOxygen(x)))"]}
{"id": "entailmentbank_train_3174", "nl": "red blood cells carry oxygen throughout the body.", "fol": "", "prediction": ["all x.(RedBloodCell(x) -> CarriesOxygen(x))"]}
{"id": "entailmentbank_train_3175", "nl": "red blood cells carry oxygen.", "fol": "", "prediction": ["all x.(RedBloodCell(x) -> CarriesOxygen(x))"]}
{"id": "entailmentbank_train_3176", "nl": "transporting is a kind of function.", "fol": "", "prediction": ["all x.(Transporting(x) -> Function(x))"]}
{"id": "entailmentbank_train_3177", "nl": "the function of red blood cells is to carry oxygen.", "fol": "", "prediction": ["all x.(RedBloodCell(x) -> CarriesOxygen(x))"]}
{"id": "entailmentbank_train_3178", "nl": "the circulatory system carries food from the digestive systems to the rest of the body.", "fol": "", "prediction": ["all x y.((CirculatorySystem(x) & DigestiveSystem(y)) -> CarriesFood(x,y))"]}
{"id": "entailmentbank_train_3179", "nl": "the circulatory system carries nutrients from the digestive systems to the rest of the body.", "fol": "", "prediction": ["all x y.((CirculatorySystem(x) & DigestiveSystem(y)) -> CarriesNutrients(x,y))"]}
{"id": "entailmentbank_train_3180", "nl": "veins carry blood from the body to the heart.", "fol": "", "prediction": ["all x y.((Vine(x) & Body(y)) -> CarriesBloodToHeart(x,y))"]}
{"id": "entailmentbank_train_3181", "nl": "arteries carry blood from the heart to the body.", "fol": "", "prediction": ["all x y.((Artery(x) & Heart(y)) -> CarriesBlood(x,y))"]}
{"id": "entailmentbank_train_3182", "nl": "veins and arteries carry blood throughtout the body.", "fol": "", "prediction": ["all x.((Vine(x) | Artery(x)) -> CarriesBlood(x))"]}
{"id": "entailmentbank_train_3183", "nl": "veins / arteries are a part of the circulatory system.", "fol": "", "prediction": ["all x.(Vibrations(x) -> CirculatorySystem(x))"]}
{"id": "entailmentbank_train_3184", "nl": "arteries / veins transport nutrients to the whole body.", "fol": "", "prediction": ["all x y.((Arteries(x) & Veins(y)) -> TransportsNutrientsToWholeBody(x,y))"]}
{"id": "entailmentbank_train_3185", "nl": "digestion is when food is absorbed into the blood stream.", "fol": "", "prediction": ["all x.(Digestion(x) -> FoodAbsorbedIntoBloodStream(x))"]}
{"id": "entailmentbank_train_3186", "nl": "food is absorbed into the circulatory system through the blood.", "fol": "", "prediction": ["all x y.((Food(x) & Blood(y)) -> AbsorbedIntoCirculatorySystem(x,y))"]}
{"id": "entailmentbank_train_3187", "nl": "the circulatory system carries  food from the digestive systems to the rest of the body.", "fol": "", "prediction": ["all x y.((CirculatorySystem(x) & DigestiveSystem(y)) -> CarriesFood(x,y))"]}
{"id": "entailmentbank_train_3188", "nl": "the circulatory system carries nutrients from the digestive system to the body's cells.", "fol": "", "prediction": ["all x y z.((CirculatorySystem(x) & DigestiveSystem(y) & Cells(z)) -> CarriesNutrients(x,y,z))"]}
{"id": "entailmentbank_train_3189", "nl": "the digestive system digests food for the body.", "fol": "", "prediction": ["all x y.((DigestiveSystem(x) & Body(y)) -> DigestsFoodFor(x,y))"]}
{"id": "entailmentbank_train_3190", "nl": "the digestive system absorbs food into the blood stream.", "fol": "", "prediction": ["all x y.((DigestiveSystem(x) & Food(y)) -> AbsorbsIntoBloodStream(x,y))"]}
{"id": "entailmentbank_train_3191", "nl": "food is absorbed into the circulatory system through blood.", "fol": "", "prediction": ["all x y.((Food(x) & CirculatorySystem(y)) -> AbsorbedThroughBlood(x,y))"]}
{"id": "entailmentbank_train_3192", "nl": "the circulatory system carries food from the digestive systems to the rest of the body using blood.", "fol": "", "prediction": ["all x y z.((CirculatorySystem(x) & DigestiveSystem(y) & RestOfBody(z)) -> CarriesFoodUsingBlood(x,y,z))"]}
{"id": "entailmentbank_train_3193", "nl": "the circulatory system carries nutrients from the digestive system to the rest of the body using blood.", "fol": "", "prediction": ["all x y z.((CirculatorySystem(x) & DigestiveSystem(y) & RestOfBody(z)) -> CarriesNutrientsUsingBlood(x,y,z))"]}
{"id": "entailmentbank_train_3194", "nl": "blood is a vehicle for carrying substances.", "fol": "", "prediction": ["all x.(Blood(x) -> CarriesSubstances(x))"]}
{"id": "entailmentbank_train_3195", "nl": "blood is a vehicle for carrying food.", "fol": "", "prediction": ["all x.(Blood(x) -> CarriesFood(x))"]}
{"id": "entailmentbank_train_3196", "nl": "the digestive system breaks down food into nutrients for the body.", "fol": "", "prediction": ["all x y.((DigestiveSystem(x) & Food(y)) -> BreaksDownIntoNutrients(x,y))"]}
{"id": "entailmentbank_train_3197", "nl": "the digestive system and the circulatory system help to break down food and carry it throughout the body.", "fol": "", "prediction": ["all x y.((DigestiveSystem(x) & CirculatorySystem(y)) -> (BreaksDownFood(x) & CarriesThroughoutBody(x)))"]}
{"id": "entailmentbank_train_3198", "nl": "the digestive system and the circulatory system help to break down food and carry it to the body's cells.", "fol": "", "prediction": ["all x y.((DigestiveSystem(x) & CirculatorySystem(y)) -> (BreaksDownFood(x) & CarriesToCells(x)))"]}
{"id": "entailmentbank_train_3199", "nl": "the digestive system absorbs food into the circulatory system through the blood stream.", "fol": "", "prediction": ["all x y z.((DigestiveSystem(x) & Food(y) & CirculatorySystem(z)) -> AbsorbsThroughBloodStream(x,y,z))"]}
{"id": "entailmentbank_train_3200", "nl": "the circulatory system absorbs / carries food from the digestive systems to the rest of the body.", "fol": "", "prediction": ["all x y.((CirculatorySystem(x) & DigestiveSystem(y)) -> AbsorbsCarriesFood(x,y))"]}
{"id": "entailmentbank_train_3201", "nl": "the digestive system breaks down food into nutrients which are absorbed into and carried through the body by the circulatory system.", "fol": "", "prediction": ["all x y z.((DigestiveSystem(x) & Nutrients(y) & CirculatorySystem(z)) -> BreaksDownInto(x,y,z))"]}
{"id": "entailmentbank_train_3202", "nl": "arteries / veins transport nutrients / water / minerals to the whole body.", "fol": "", "prediction": ["all x y.((Arthritis(x) & Veins(y)) -> TransportsNutrientsWaterMineralsToWholeBody(x,y))"]}
{"id": "entailmentbank_train_3203", "nl": "the body of an animal contains arteries / veins.", "fol": "", "prediction": ["all x.(Animal(x) -> ContainsArteries(x))"]}
{"id": "entailmentbank_train_3204", "nl": "arteries and veins in animals transport nutrients / water / minerals to the whole body.", "fol": "", "prediction": ["all x y.((Animal(x) & Animal(y)) -> (TransportsNutrients(x,y) & TransportsWater(x,y) & TransportsMinerals(x,y)))"]}
{"id": "entailmentbank_train_3205", "nl": "special tissues in plants transport food / water / minerals throughout the plant.", "fol": "", "prediction": ["all x y.((SpecialTissues(x) & Plant(y)) -> TransportsFoodWaterMinerals(x,y))"]}
{"id": "entailmentbank_train_3206", "nl": "arteries and veins in animals and special tissues in plants both transport food / water / minerals trhoughout the body / plant.", "fol": "", "prediction": ["all x y.((Arthritis(x) & Veins(y) & Animal(x) & SpecialTissues(y)) -> TransportsFoodWaterMinerals(x))"]}
{"id": "entailmentbank_train_3207", "nl": "transporting nutrients, water, and minerals is a kind of function.", "fol": "", "prediction": ["all x.(TransportsNutrientsWaterMinerals(x) -> Function(x))"]}
{"id": "entailmentbank_train_3208", "nl": "arteries and veins in animals and special tissues in plants both perform the function of transporting food / water / minerals trhoughout the body / plant.", "fol": "", "prediction": ["all x y.((Arthritis(x) & Veins(y) & Animal(x) & SpecialTissues(y)) -> (TransportsFoodWaterMinerals(x) & TransportsBodyMinerals(y)))"]}
{"id": "entailmentbank_train_3209", "nl": "special tissues in plants are similar to arteries and veins in animals.", "fol": "", "prediction": ["all x y.((SpecialTissues(x) & Plant(y)) -> (SameAderns(x,y) & SimilarVines(x,y)))"]}
{"id": "entailmentbank_train_3210", "nl": "a stem is often a part of plant.", "fol": "", "prediction": ["all x.(Stem(x) -> PartOfPlant(x))"]}
{"id": "entailmentbank_train_3211", "nl": "a plant stem contains a system of tubes for transporting water and nutrients to other parts of the plant.", "fol": "", "prediction": ["all x y.((PlantStem(x) & Tube(y)) -> ContainsForTransportingWaterAndNutrients(x,y))"]}
{"id": "entailmentbank_train_3212", "nl": "some plants use a system of tubes for transporting water and nutrients to other parts of the plant.", "fol": "", "prediction": ["exists x.(Plant(x) & UsesTubeSystem(x) & TransportsWaterAndNutrients(x))"]}
{"id": "entailmentbank_train_3213", "nl": "plants use special tissues or a system of tubes to transport nutrients / water / minerals to the rest of the plant.", "fol": "", "prediction": ["all x y.((Plant(x) & SpecialTissuesOrTubes(y)) -> TransportsNutrientsWaterMinerals(x,y))"]}
{"id": "entailmentbank_train_3214", "nl": "an animal contains a part that transports nutrients / water / minerals to the whole body.", "fol": "", "prediction": ["all x.(Animal(x) -> ContainsPart(x))"]}
{"id": "entailmentbank_train_3215", "nl": "plants and animals both contain parts that transport nutrients throughtout the plant / body.", "fol": "", "prediction": ["all x y.((Plant(x) & Animal(y)) -> (ContainsParts(x,y) & TransportsNutrients(x,y)))"]}
{"id": "entailmentbank_train_3216", "nl": "a plant / living thing requires nutrients to grow.", "fol": "", "prediction": ["all x.((Plant(x) & LivingThing(x)) -> RequiresNutrientsToGrow(x))"]}
{"id": "entailmentbank_train_3217", "nl": "all plants and animals require nutrients to survive / grow.", "fol": "", "prediction": ["all x.((Plant(x) | Animal(x)) -> RequiresNutrients(x))"]}
{"id": "entailmentbank_train_3218", "nl": "all plants and animals contain parts that transport nutrients throughtout the plant / body.", "fol": "", "prediction": ["all x.((Plant(x) | Animal(x)) -> ContainsParts(x))"]}
{"id": "entailmentbank_train_3219", "nl": "nutrients are a kind of substance.", "fol": "", "prediction": ["all x.(Nutrient(x) -> Substance(x))"]}
{"id": "entailmentbank_train_3220", "nl": "nutrients are simpler than food.", "fol": "", "prediction": ["all x.(Nutrient(x) -> SimplerThanFood(x))"]}
{"id": "entailmentbank_train_3221", "nl": "nutrients are a kind of simple substance.", "fol": "", "prediction": ["all x.(Nutrient(x) -> SimpleSubstance(x))"]}
{"id": "entailmentbank_train_3222", "nl": "the breaking down of food into simple substances occurs in the digestive system.", "fol": "", "prediction": ["all x y.((Food(x) & DigestiveSystem(y)) -> BreaksDownIntoSimpleSubstances(x,y))"]}
{"id": "entailmentbank_train_3223", "nl": "eating food is used to get nutrients by animals.", "fol": "", "prediction": ["all x y.((EatingFood(x) & Animal(y)) -> GetsNutrients(x,y))"]}
{"id": "entailmentbank_train_3224", "nl": "digestion is when an organism takes in nutrients from food into itself by eating.", "fol": "", "prediction": ["all x y.((Organism(x) & Food(y) & TakesInNutrients(x,y)) -> Eats(x))"]}
{"id": "entailmentbank_train_3225", "nl": "an animal eating food causes the food to be digested.", "fol": "", "prediction": ["all x y.((Animal(x) & Food(y)) -> CausesDigestion(x,y))"]}
{"id": "entailmentbank_train_3226", "nl": "if something causes something else, then that something else occurs after that something.", "fol": "", "prediction": ["all x.((Causes(x,y) & Causes(x,y)) -> OccursAfter(x,y))"]}
{"id": "entailmentbank_train_3227", "nl": "after food is eaten is it digested.", "fol": "", "prediction": ["all x.((Food(x) & Eaten(x)) -> Digestible(x))"]}
{"id": "entailmentbank_train_3228", "nl": "if something contains something else then that something can be broken down into that something else.", "fol": "", "prediction": ["all x.((Contents(x) & Contains(x,y)) -> CanBeBreakdownInto(x,y))"]}
{"id": "entailmentbank_train_3229", "nl": "digestion is when stomach acid breaks down food.", "fol": "", "prediction": ["all x.(Digestion(x) -> BreaksDownFood(x))"]}
{"id": "entailmentbank_train_3230", "nl": "when food is digested it is broken down into the things it contains.", "fol": "", "prediction": ["all x.((Food(x) & Digested(x)) -> BrokenDownIntoThings(x))"]}
{"id": "entailmentbank_train_3231", "nl": "when food is digested it is broken down into nutrients.", "fol": "", "prediction": ["all x.((Food(x) & Digestible(x)) -> BrokenDownIntoNutrients(x))"]}
{"id": "entailmentbank_train_3232", "nl": "when food is digested it is broken down into simple substances.", "fol": "", "prediction": ["all x.((Food(x) & Digested(x)) -> BrokenDownIntoSimpleSubstances(x))"]}
{"id": "entailmentbank_train_3233", "nl": "after food is eaten is it digested into simple substances.", "fol": "", "prediction": ["all x.((Food(x) & Eaten(x)) -> DigestibleIntoSimpleSubstances(x))"]}
{"id": "entailmentbank_train_3234", "nl": "a protein is a kind of nutrient.", "fol": "", "prediction": ["all x.(Protein(x) -> Nutrient(x))"]}
{"id": "entailmentbank_train_3235", "nl": "food contains proteins.", "fol": "", "prediction": ["all x.(Food(x) -> ContainsProteins(x))"]}
{"id": "entailmentbank_train_3236", "nl": "the digestive system digests proteins for the body.", "fol": "", "prediction": ["all x y.((DigestiveSystem(x) & Protein(y)) -> DigestsForBody(x,y))"]}
{"id": "entailmentbank_train_3237", "nl": "the small intestine is a part of the digestive system.", "fol": "", "prediction": ["all x.(SmallIntestine(x) -> PartOfDigestiveSystem(x))"]}
{"id": "entailmentbank_train_3238", "nl": "a small intestine is a part of a human's digestive system for the digestion of proteins.", "fol": "", "prediction": ["all x y.((SmallIntestine(x) & Human(y)) -> DigestiveSystemPartOf(x,y))"]}
{"id": "entailmentbank_train_3239", "nl": "the stomach is a part of the digestive system.", "fol": "", "prediction": ["all x.(Stomach(x) -> PartOfDigestiveSystem(x))"]}
{"id": "entailmentbank_train_3240", "nl": "a stomach is a part of a human's digestive system for the digestion of proteins.", "fol": "", "prediction": ["all x y.((Stomach(x) & Human(y)) -> PartOfDigestiveSystem(x,y))"]}
{"id": "entailmentbank_train_3241", "nl": "digestion of proteins occurs in the stomach / small intestine.", "fol": "", "prediction": ["all x y.((Protein(x) & Digestive(y)) -> OccursInStomach(x,y))"]}
{"id": "entailmentbank_train_3242", "nl": "digestion of food occurs in the small intestine.", "fol": "", "prediction": ["all x y.((SmallIntestine(x) & Food(y)) -> DigestiveOf(x,y))"]}
{"id": "entailmentbank_train_3243", "nl": "some foods contain proteins.", "fol": "", "prediction": ["exists x.(Food(x) & ContainsProteins(x))"]}
{"id": "entailmentbank_train_3244", "nl": "digestion of proteins occurs in the small intestine.", "fol": "", "prediction": ["all x y.((Protein(x) & SmallIntestine(y)) -> DigestsIn(x,y))"]}
{"id": "entailmentbank_train_3245", "nl": "digestion of nutrients occurs in the small intestine.", "fol": "", "prediction": ["all x y.((SmallIntestine(x) & Digestive(y)) -> OccursIn(x,y))"]}
{"id": "entailmentbank_train_3246", "nl": "to take something in can mean to absorb something.", "fol": "", "prediction": ["all x.(TakeIn(x) -> Absorb(x))"]}
{"id": "entailmentbank_train_3247", "nl": "digestion is when an organism absorbs nutrients from food into itself.", "fol": "", "prediction": ["all x y.((Organism(x) & Food(y) & AbsorbsNutrients(x,y)) -> Digestive(x))"]}
{"id": "entailmentbank_train_3248", "nl": "nutrients are absorbed from food in the small intestine.", "fol": "", "prediction": ["all x y.((Nutrients(x) & Food(y)) -> AbsorbedInSmallintestine(x,y))"]}
{"id": "entailmentbank_train_3249", "nl": "if something undergoes a physical change then the physical properties of that something will change.", "fol": "", "prediction": ["all x y.((SubjectsPhysicalChange(x) & PhysicalProperties(y)) -> Change(x,y))"]}
{"id": "entailmentbank_train_3250", "nl": "shape is a kind of physical property.", "fol": "", "prediction": ["all x.(Shape(x) -> PhysicalProperty(x))"]}
{"id": "entailmentbank_train_3251", "nl": "an example of a physical change is changing something's shape.", "fol": "", "prediction": ["all x.(PhysicalChange(x) -> ChangesShape(x))"]}
{"id": "entailmentbank_train_3252", "nl": "squeezing an object can cause that object's shape to change.", "fol": "", "prediction": ["all x y.((Object(x) & Squeezing(x,y)) -> CausesShapeChange(x,y))"]}
{"id": "entailmentbank_train_3253", "nl": "an example of a physical change is squeezing something.", "fol": "", "prediction": ["all x.((PhysicalChange(x) & Squeezing(x)) -> PhysicalChange(x))"]}
{"id": "entailmentbank_train_3254", "nl": "the intestines are a part of the digestive system.", "fol": "", "prediction": ["all x.(Intestine(x) -> PartOfDigestiveSystem(x))"]}
{"id": "entailmentbank_train_3255", "nl": "the intestines are a part of an animal's digestive systemfor digesting food.", "fol": "", "prediction": ["all x y.((Intestine(x) & Animal(y)) -> DigestiveSystem(x,y))"]}
{"id": "entailmentbank_train_3256", "nl": "if an organ digests food then the food must pass through that organ.", "fol": "", "prediction": ["all x y.((Organ(x) & DigestsFood(x)) -> FoodPassesThrough(y,x))"]}
{"id": "entailmentbank_train_3257", "nl": "during digestion, food passes through the intestines.", "fol": "", "prediction": ["all x y.((Digestment(x) & Food(y)) -> PassesThroughIntestine(y,x))"]}
{"id": "entailmentbank_train_3258", "nl": "something can be squeezed through something else in order to help it pass through that something else.", "fol": "", "prediction": ["all x y.((SqueezedThrough(x,y) & SomethingOther(y)) -> HelpsPassThrough(x,y))"]}
{"id": "entailmentbank_train_3259", "nl": "during digestion, food is squeezed through the intestines.", "fol": "", "prediction": ["all x y.((Digestment(x) & Food(y)) -> SqueezedThroughIntestine(x,y))"]}
{"id": "entailmentbank_train_3260", "nl": "an example of a physical change is squeezing food through intestines during digestion.", "fol": "", "prediction": ["all x.((ExempleOfPhysicalChange(x) & SqueezingFood(x) & DigestiveDigestion(x)) -> DigestiveDigestion(x))"]}
{"id": "entailmentbank_train_3261", "nl": "regulation is when an organism maintains a stable internal environment.", "fol": "", "prediction": ["all x.((Organism(x) & StableInternalEnvironment(x)) -> Regulates(x))"]}
{"id": "entailmentbank_train_3262", "nl": "the amount of sugar in blood is a part of an animal's internal environment.", "fol": "", "prediction": ["all x.((SugarInBlood(x) & InternalEnvironment(x)) -> PartOfAnimal(x))"]}
{"id": "entailmentbank_train_3263", "nl": "an example of regulation is controlling the amount of sugar in an animal's blood.", "fol": "", "prediction": ["all x y.((Animal(x) & Animal(y)) -> ControlsSugarInBlood(x,y))"]}
{"id": "entailmentbank_train_3264", "nl": "the endocrine system is a source of hormones.", "fol": "", "prediction": ["all x.(EndocrineSystem(x) -> SourceOfHormones(x))"]}
{"id": "entailmentbank_train_3265", "nl": "if something releases something else then that something is the source of that something else.", "fol": "", "prediction": ["all x y.((Releases(x,y) & Something(y)) -> SourceOf(x,y))"]}
{"id": "entailmentbank_train_3266", "nl": "the endocrine system releases hormones.", "fol": "", "prediction": ["all x.(EndocrineSystem(x) -> ReleasesHormones(x))"]}
{"id": "entailmentbank_train_3267", "nl": "hormones regulate body functions.", "fol": "", "prediction": ["all x.(Hormone(x) -> RegulatesBodyFunctions(x))"]}
{"id": "entailmentbank_train_3268", "nl": "hormones are released to regulate body functions.", "fol": "", "prediction": ["all x.(Hormone(x) -> ReleasedToRegulateBodyFunctions(x))"]}
{"id": "entailmentbank_train_3269", "nl": "insulin is a kind of hormone.", "fol": "", "prediction": ["all x.(Indulgin(x) -> Hormone(x))"]}
{"id": "entailmentbank_train_3270", "nl": "insulin can be released to regulate body functions.", "fol": "", "prediction": ["all x.(Indulgin(x) -> CanBeReleasedToRegulateBodyFunctions(x))"]}
{"id": "entailmentbank_train_3271", "nl": "an example of regulation is insulin being released to control the amount of sugar in blood.", "fol": "", "prediction": ["all x.((Insulin(x) & ReleasedToControlSugar(x)) -> Regulation(x))"]}
{"id": "entailmentbank_train_3272", "nl": "the excretory system performs excretion.", "fol": "", "prediction": ["all x.(ExcretorySystem(x) -> PerformsExcretion(x))"]}
{"id": "entailmentbank_train_3273", "nl": "excretion is when the excretory system removes waste from the body.", "fol": "", "prediction": ["all x y.((Excretion(x) & ExcretorySystem(y)) -> RemovesWasteFromBody(x,y))"]}
{"id": "entailmentbank_train_3274", "nl": "the excretory system removes waste from the body.", "fol": "", "prediction": ["all x y.((ExcretorySystem(x) & Body(y)) -> RemovesWaste(x,y))"]}
{"id": "entailmentbank_train_3275", "nl": "removing waste is a kind of function.", "fol": "", "prediction": ["all x.(RemovingWaste(x) -> Function(x))"]}
{"id": "entailmentbank_train_3276", "nl": "a function of the excretory system is removing waste from the body.", "fol": "", "prediction": ["all x y.((ExcretorySystem(x) & Body(y)) -> RemovesWaste(x,y))"]}
{"id": "entailmentbank_train_3277", "nl": "waste must be eliminated from the body.", "fol": "", "prediction": ["all x.(Waste(x) -> EliminatedFromBody(x))"]}
{"id": "entailmentbank_train_3278", "nl": "something must be eliminated from the parts of something else before it can be eliminated from the entirety something else.", "fol": "", "prediction": ["all x y.((Element(x) & PartsOf(x,y)) -> EliminatedFrom(x,y))"]}
{"id": "entailmentbank_train_3279", "nl": "waste must be eliminated from the parts of the body before it can be eliminated from the entirety of the body.", "fol": "", "prediction": ["all x y.((Waste(x) & BodyParts(y)) -> Eliminates(x,y))"]}
{"id": "entailmentbank_train_3280", "nl": "blood is a part of the body.", "fol": "", "prediction": ["all x.(Blood(x) -> PartOfBody(x))"]}
{"id": "entailmentbank_train_3281", "nl": "waste must be eliminated from the blood before it can be eliminated from the body.", "fol": "", "prediction": ["all x y.((Waste(x) & Blood(y)) -> MustBeEliminated(x,y))"]}
{"id": "entailmentbank_train_3282", "nl": "if an action must be done before a process can be done, that action is a step in that process.", "fol": "", "prediction": ["all x y.((Action(x) & Process(y) & MustBeDone(x,y)) -> StepInProcess(x,y))"]}
{"id": "entailmentbank_train_3283", "nl": "removing waste from blood is a step in removing waste from the body.", "fol": "", "prediction": ["all x.((RemovesWasteFromBlood(x) & RemovesWasteFromBody(x)) -> RemovesWasteFromBody(x))"]}
{"id": "entailmentbank_train_3284", "nl": "kidney is a vehicle for removing bodily waste / cell waste / byproducts from the blood.", "fol": "", "prediction": ["all x.(Knee(x) -> (RemovesBodylyWaste(x) & RemovesCellWaste(x) & RemovesByproducts(x)))"]}
{"id": "entailmentbank_train_3285", "nl": "the kidneys perform a step in removing waste from the body.", "fol": "", "prediction": ["all x y.((Knee(x) & Kidney(y)) -> PerformsStepInRemovingWaste(x,y))"]}
{"id": "entailmentbank_train_3286", "nl": "if an action is a step in a process, then that action helps in the performance of that process.", "fol": "", "prediction": ["all x y.((Action(x) & StepInProcess(x)) -> HelpsPerformance(x,y))"]}
{"id": "entailmentbank_train_3287", "nl": "the kidneys help remove waste from the body.", "fol": "", "prediction": ["all x y.((Knee(x) & Kidney(y)) -> RemovesWasteFromBody(x,y))"]}
{"id": "entailmentbank_train_3288", "nl": "scales are used for protection by scaled animals.", "fol": "", "prediction": ["all x.(Scales(x) -> UsedForProtection(x))"]}
{"id": "entailmentbank_train_3289", "nl": "a fish is a kind of scaled animal.", "fol": "", "prediction": ["all x.(Fish(x) -> ScaledAnimal(x))"]}
{"id": "entailmentbank_train_3290", "nl": "protecting is a kind of function.", "fol": "", "prediction": ["all x.(Protecting(x) -> Function(x))"]}
{"id": "entailmentbank_train_3291", "nl": "the function of the scales of fish is to protect fish.", "fol": "", "prediction": ["all x.(ScalesOfFish(x) -> ProtectsFish(x))"]}
{"id": "entailmentbank_train_3292", "nl": "western coral snakes have a striped color pattern.", "fol": "", "prediction": ["all x.((WildwestCoralSnake(x) & StripedColorPattern(x)) -> Has(x,y))"]}
{"id": "entailmentbank_train_3293", "nl": "a western coral snake is poisonous.", "fol": "", "prediction": ["all x.((WesternCoralSnake(x) & Poisonous(x)) -> Snake(x))"]}
{"id": "entailmentbank_train_3294", "nl": "western coral snakes have a striped color pattern and are poisonous.", "fol": "", "prediction": ["all x.((WildwesternCoralSnake(x) & StripedColorPattern(x) & Poisonous(x)) -> Has(x,y))"]}
{"id": "entailmentbank_train_3295", "nl": "a poisonous animal is dangerous.", "fol": "", "prediction": ["all x.(PoisonousAnimal(x) -> Dangerous(x))"]}
{"id": "entailmentbank_train_3296", "nl": "western coral snakes are dangerous animal with striped color and are poisonous.", "fol": "", "prediction": ["all x.((WesternCoralSnake(x) & Dangerous(x) & StripedColor(x) & Poisonous(x)) -> WesternCoralSnake(x))"]}
{"id": "entailmentbank_train_3297", "nl": "arizona mountain king snakes have a striped color pattern.", "fol": "", "prediction": ["all x.(ArizonaMountainKingSnake(x) -> StripedColorPattern(x))"]}
{"id": "entailmentbank_train_3298", "nl": "arizona mountain king snakes are not poisonous.", "fol": "", "prediction": ["all x.(ArizonaMountainKingSnake(x) -> -Poisonous(x))"]}
{"id": "entailmentbank_train_3299", "nl": "arizona mountain king snakes have a striped color pattern and are not poisonous.", "fol": "", "prediction": ["all x.((ArizonaMountainKingSnake(x) & StripedColorPattern(x) & -Poisonous(x)) -> Snake(x))"]}
{"id": "entailmentbank_train_3300", "nl": "arizona mountain king snakes have a similar color pattern to a dangerous animal.", "fol": "", "prediction": ["all x y.((ArizonaMountainKingSnake(x) & DangerousAnimal(y)) -> SimilarColorPattern(x,y))"]}
{"id": "entailmentbank_train_3301", "nl": "arizona mountain king snakes camouflage themselves as a dangerous animal.", "fol": "", "prediction": ["all x.(ArizonaMountainKingSnake(x) -> CamouflagesAsDangerousAnimal(x))"]}
{"id": "entailmentbank_train_3302", "nl": "mimicry is used for avoiding predators by animals by camouflaging as a dangerous animal.", "fol": "", "prediction": ["all x y.((Mimicry(x) & Animal(y)) -> AvoidsPredatorsByCamouflagingAsDangerousAnimal(x,y))"]}
{"id": "entailmentbank_train_3303", "nl": "arizona mountain king snakes camouflaging themselves is an example of mimicry.", "fol": "", "prediction": ["all x.((ArizonaMountainKingSnake(x) & Camouflage(x)) -> Mimicry(x))"]}
{"id": "entailmentbank_train_3304", "nl": "skin is a kind of organ.", "fol": "", "prediction": ["all x.(Skin(x) -> Organ(x))"]}
{"id": "entailmentbank_train_3305", "nl": "skin is used for protecting the body from harmful substances.", "fol": "", "prediction": ["all x y.((Skin(x) & Body(y)) -> ProtectsFromHarmfulSubstances(x,y))"]}
{"id": "entailmentbank_train_3306", "nl": "skin is the organ that protects the body from harmful substances.", "fol": "", "prediction": ["all x.(Skin(x) -> ProtectsFromHarmfulSubstances(x))"]}
{"id": "entailmentbank_train_3307", "nl": "harmful substances can cause disease in human.", "fol": "", "prediction": ["all x.(HarmfulSubstance(x) -> CausesDiseaseInHuman(x))"]}
{"id": "entailmentbank_train_3308", "nl": "skin is the organ that can protect the body from disease caused by harmful substances.", "fol": "", "prediction": ["all x.(Skin(x) -> (ProtectsFromDisease(x) & CausedByHarmfulSubstances(x)))"]}
{"id": "entailmentbank_train_3309", "nl": "organs are made of different types of cellular tissues.", "fol": "", "prediction": ["all x.(Organ(x) -> exists y.(CellularTissue(y) & MadeOf(x,y)))"]}
{"id": "entailmentbank_train_3310", "nl": "skin is made of skin tissues.", "fol": "", "prediction": ["all x.(Skin(x) -> MadeOfSkinTissues(x))"]}
{"id": "entailmentbank_train_3311", "nl": "cellular respiration is when a cell converts from oxygen and carbohydrates into carbon dioxide, water, and energy.", "fol": "", "prediction": ["all x.(CellularRespiration(x) -> (ConvertsOxygenAndCarbohydrates(x) & CarbonDioxideWaterEnergy(x)))"]}
{"id": "entailmentbank_train_3312", "nl": "carbohydrates are made of sugars.", "fol": "", "prediction": ["all x.(Carbohydrate(x) -> MadeOfSugars(x))"]}
{"id": "entailmentbank_train_3313", "nl": "cellular respiration is when a cell converts from oxygen and sugar into carbon dioxide, water, and energy.", "fol": "", "prediction": ["all x.(CellularRespiration(x) -> (ConvertsOxygenAndSugar(x) & CarbonDioxideWaterEnergy(x)))"]}
{"id": "entailmentbank_train_3314", "nl": "in the cellular respiration / animal respiration process carbon dioxide is a waste product.", "fol": "", "prediction": ["all x.((CellularRespiration(x) & AnimalRespiration(x)) -> WasteProduct(x))"]}
{"id": "entailmentbank_train_3315", "nl": "carbon dioxide is produced as wasted when sugar is processed by cell respiration.", "fol": "", "prediction": ["all x.((Sugar(x) & CellRespiration(x)) -> CarbonDioxideProducedAsWaste(x))"]}
{"id": "entailmentbank_train_3316", "nl": "a human cell is a kind of cell.", "fol": "", "prediction": ["all x.(HumanCell(x) -> Cell(x))"]}
{"id": "entailmentbank_train_3317", "nl": "all cells take in energy.", "fol": "", "prediction": ["all x.(Cell(x) -> TakesInEnergy(x))"]}
{"id": "entailmentbank_train_3318", "nl": "all human cells take in energy.", "fol": "", "prediction": ["all x.(HumanCell(x) -> TakesInEnergy(x))"]}
{"id": "entailmentbank_train_3319", "nl": "plant cells can perform photosynthesis.", "fol": "", "prediction": ["all x.(PlantCell(x) -> CanPerformPhotosynthesis(x))"]}
{"id": "entailmentbank_train_3320", "nl": "animal cells cannot perform photosynthesis.", "fol": "", "prediction": ["all x.(AnimalCell(x) -> -PerformsPhotosynthesis(x))"]}
{"id": "entailmentbank_train_3321", "nl": "the ability to perform photosynthesis makes plant cells different from animal cells.", "fol": "", "prediction": ["all x y.((PlantCell(x) & AnimalCell(y)) -> DifferentFrom(x,y))"]}
{"id": "entailmentbank_train_3322", "nl": "carbohydrates contain chemical energy.", "fol": "", "prediction": ["all x.(Carbohydrate(x) -> ContainsChemicalEnergy(x))"]}
{"id": "entailmentbank_train_3323", "nl": "photosynthesis is a source of energy for the plant by converting carbon dioxide, water, and sunlight into carbohydrates.", "fol": "", "prediction": ["all x.(Photosynthesis(x) -> (SourceOfEnergy(x) & ConvertsCarbonDioxideWaterSunlightToCarbohydrates(x)))"]}
{"id": "entailmentbank_train_3324", "nl": "photosynthesis converts sunlight into chemical energy.", "fol": "", "prediction": ["all x.(Photosynthesis(x) -> ConvertsSunlightToChemicalEnergy(x))"]}
{"id": "entailmentbank_train_3325", "nl": "the ability to convert sunlight into chemical energy makes plant cells different from animal cells.", "fol": "", "prediction": ["all x y.((PlantCell(x) & AnimalCell(y)) -> (ConvertsSunlightToChemicalEnergy(x,y) & DifferentFrom(x,y)))"]}
{"id": "entailmentbank_train_3326", "nl": "a goldfish is a kind of fish.", "fol": "", "prediction": ["all x.(Goldfish(x) -> Fish(x))"]}
{"id": "entailmentbank_train_3327", "nl": "a fish is a kind of living thing.", "fol": "", "prediction": ["all x.(Fish(x) -> LivingThing(x))"]}
{"id": "entailmentbank_train_3328", "nl": "a goldfish is a kind of living thing.", "fol": "", "prediction": ["all x.(Goldfish(x) -> LivingThing(x))"]}
{"id": "entailmentbank_train_3329", "nl": "all living things are made of cells according to the cell theory.", "fol": "", "prediction": ["all x.(LivingThing(x) -> MadeOfCells(x))"]}
{"id": "entailmentbank_train_3330", "nl": "both the goldfish and the plant are made of cells.", "fol": "", "prediction": ["all x.(Goldfish(x) & Plant(x)) -> MadeOfCells(x))"]}
{"id": "entailmentbank_train_3331", "nl": "what something is made of is a property of that something.", "fol": "", "prediction": ["all x.((MadeOf(x,y) & Something(y)) -> PropertyOf(x,y))"]}
{"id": "entailmentbank_train_3332", "nl": "a property that all living things has is that they are all made of cells.", "fol": "", "prediction": ["all x.((Property(x) & LivingThings(x)) -> MadeOfCells(x))"]}
{"id": "entailmentbank_train_3333", "nl": "if something is made of something else, then that something else can be found in that something.", "fol": "", "prediction": ["all x.((MadeOf(x,y) & MadeOf(y,z)) -> CanBeFoundIn(x,z))"]}
{"id": "entailmentbank_train_3334", "nl": "cells can be found in all living things.", "fol": "", "prediction": ["all x.(Cell(x) -> exists y.(LivingThing(y) & FoundIn(x,y)))"]}
{"id": "entailmentbank_train_3335", "nl": "baby elephant will grow into adult elephant.", "fol": "", "prediction": ["all x.(BabyElephant(x) -> GrowsIntoAdult(x))"]}
{"id": "entailmentbank_train_3336", "nl": "cell division often causes growth / healing.", "fol": "", "prediction": ["all x.(CellDividend(x) -> (CausesGrowth(x) | CausesHealing(x)))"]}
{"id": "entailmentbank_train_3337", "nl": "cell division causes the baby elephant to grow into adult elephant.", "fol": "", "prediction": ["all x y.((BabyElephant(x) & CellDividection(y)) -> GrowsIntoAdult(x,y))"]}
{"id": "entailmentbank_train_3338", "nl": "cell division increases the number of cells in the body.", "fol": "", "prediction": ["all x y.((CellDividend(x) & Body(y)) -> IncreasesCellNumber(x,y))"]}
{"id": "entailmentbank_train_3339", "nl": "the number of cells in the adult elephant will be more than the number of cells in the baby elephant.", "fol": "", "prediction": ["all x y.((AdultElephant(x) & BabyElephant(y)) -> MoreCells(x,y))"]}
{"id": "entailmentbank_train_3340", "nl": "all living things are organisms.", "fol": "", "prediction": ["all x.(LivingThing(x) -> Organism(x))"]}
{"id": "entailmentbank_train_3341", "nl": "organisms are made of cells according to the cell theory.", "fol": "", "prediction": ["all x.(Organism(x) -> MadeOfCells(x))"]}
{"id": "entailmentbank_train_3342", "nl": "if something is made of something else, then that something contains at least one of that something else.", "fol": "", "prediction": ["all x.((MadeOf(x,y) & MadeOf(x,y)) -> ContainsAtLeastOneOf(x,y))"]}
{"id": "entailmentbank_train_3343", "nl": "all living things contain at least one cell.", "fol": "", "prediction": ["all x.(LivingThing(x) -> exists y.(Cell(y) & Contains(x,y))))"]}
{"id": "entailmentbank_train_3344", "nl": "an organism has a size of an average human hand.", "fol": "", "prediction": ["all x.(Organism(x) -> HasSizeOfAverageHumanHand(x))"]}
{"id": "entailmentbank_train_3345", "nl": "a human hand is large enough in size to be visible.", "fol": "", "prediction": ["all x.(HumanHand(x) -> LargeSize(x))"]}
{"id": "entailmentbank_train_3346", "nl": "the organism is large enough to be visible.", "fol": "", "prediction": ["all x.((Organism(x) & LargeEnoughForVisibility(x)) -> Visible(x))"]}
{"id": "entailmentbank_train_3347", "nl": "a multicellular organism is large enough to be visible.", "fol": "", "prediction": ["all x.(MulticellularOrganism(x) -> LargeEnoughToBeVisible(x))"]}
{"id": "entailmentbank_train_3348", "nl": "the organism may be a multicellular organism.", "fol": "", "prediction": ["all x.(Organism(x) -> MulticellularOrganism(x))"]}
{"id": "entailmentbank_train_3349", "nl": "a multicellular organism is made of many cells.", "fol": "", "prediction": ["all x.(MulticellularOrganism(x) -> MadeOfManyCells(x))"]}
{"id": "entailmentbank_train_3350", "nl": "the organism may be made of many cells.", "fol": "", "prediction": ["all x.(Organism(x) -> exists y.(Cell(y) & MadeOf(x,y))))"]}
{"id": "entailmentbank_train_3351", "nl": "cellular respiration is a source of energy for cell activities.", "fol": "", "prediction": ["all x.(CellularRespiration(x) -> SourceOfEnergyForCellActivities(x))"]}
{"id": "entailmentbank_train_3352", "nl": "cellular respiration is when cells extract energy from food to produce energy.", "fol": "", "prediction": ["all x.(CellularRespiration(x) -> ExtractsEnergyFromFoodToProduceEnergy(x))"]}
{"id": "entailmentbank_train_3353", "nl": "cellular repiration produces energy by extracting energy from food.", "fol": "", "prediction": ["all x.(CellularRepiration(x) -> (ProducesEnergy(x) & ExtractsEnergyFromFood(x)))"]}
{"id": "entailmentbank_train_3354", "nl": "all cells perform cellular respiration.", "fol": "", "prediction": ["all x.(Cell(x) -> PerformsCellularRespiration(x))"]}
{"id": "entailmentbank_train_3355", "nl": "all cells produce energy by extracting energy from food.", "fol": "", "prediction": ["all x.(Cell(x) -> ExtractsEnergyFromFood(x))"]}
{"id": "entailmentbank_train_3356", "nl": "a gorilla is a kind of animal.", "fol": "", "prediction": ["all x.(Gorilla(x) -> Animal(x))"]}
{"id": "entailmentbank_train_3357", "nl": "baby animals become adult animals.", "fol": "", "prediction": ["all x.(BabyAnimal(x) -> AdultAnimal(x))"]}
{"id": "entailmentbank_train_3358", "nl": "a baby gorilla become adult gorilla.", "fol": "", "prediction": ["all x.((BabyGorilla(x) & AdultGorilla(x)) -> Grows(x))"]}
{"id": "entailmentbank_train_3359", "nl": "cell division causes the baby gorilla to become adult gorilla.", "fol": "", "prediction": ["all x.((BabyGorilla(x) & CellDividection(x)) -> AdultGorilla(x))"]}
{"id": "entailmentbank_train_3360", "nl": "the number of cells in the adult gorilla is more than the number of cells in the baby gorilla.", "fol": "", "prediction": ["all x y.((AdultGorilla(x) & BabyGorilla(y)) -> MoreCells(x,y))"]}
{"id": "entailmentbank_train_3361", "nl": "a student observes cells in an object.", "fol": "", "prediction": ["all x y.((Student(x) & Object(y)) -> ObservesCellsIn(x,y))"]}
{"id": "entailmentbank_train_3362", "nl": "the student is observing a living thing.", "fol": "", "prediction": ["all x y.((Student(x) & LivingThing(y)) -> Observing(x,y))"]}
{"id": "entailmentbank_train_3363", "nl": "cells copy dna.", "fol": "", "prediction": ["all x.(Cell(x) -> CopyDna(x))"]}
{"id": "entailmentbank_train_3364", "nl": "cells are the part of body that copies dna.", "fol": "", "prediction": ["all x.(Cell(x) -> CopyDna(x))"]}
{"id": "entailmentbank_train_3365", "nl": "meiosis produces cells that are different from the parent cell.", "fol": "", "prediction": ["all x.(Meiosis(x) -> ProducesCells(x))"]}
{"id": "entailmentbank_train_3366", "nl": "mitosis produces cells that are identical to the parent cell.", "fol": "", "prediction": ["all x.(Mitosis(x) -> ProducesCellsIdenticalToParentCell(x))"]}
{"id": "entailmentbank_train_3367", "nl": "mitosis produces cells that are identical to the parent cell and meiosis produces cells that are different from the parent cell.", "fol": "", "prediction": ["all x y.((Mitosis(x) & Meiosis(y)) -> (ProducesCells(x,y) & IdenticalToParentCell(x) & ProducesCells(y,x) & DifferentFromParentCell(y)))"]}
{"id": "entailmentbank_train_3368", "nl": "23 is one half of 46.", "fol": "", "prediction": ["all x.((23(x) & HalfOf(x,46)) -> HalfOf(x,46))"]}
{"id": "entailmentbank_train_3369", "nl": "a sex cell of a human contains 23 chromosomes.", "fol": "", "prediction": ["all x y.((SexCell(x) & Human(y)) -> ContainsChromosomes(x,y))"]}
{"id": "entailmentbank_train_3370", "nl": "a human body cell contains 46 chromosomes.", "fol": "", "prediction": ["all x.(HumanBodyCell(x) -> ContainsChromosomes(x,46))"]}
{"id": "entailmentbank_train_3371", "nl": "a human sex cell contains one half of the chromosomes of a human body cell.", "fol": "", "prediction": ["all x y.((HumanSexCell(x) & HumanBodyCell(y)) -> ContainsHalfOfChromosomes(x,y))"]}
{"id": "entailmentbank_train_3372", "nl": "a cell nucleus is a part of a cell.", "fol": "", "prediction": ["all x y.((CellNucleus(x) & Cell(y)) -> PartOf(x,y))"]}
{"id": "entailmentbank_train_3373", "nl": "mitosis is a source of two identical nuclei.", "fol": "", "prediction": ["all x.(Mitosis(x) -> SourceOfTwoIdenticalNuclei(x))"]}
{"id": "entailmentbank_train_3374", "nl": "a chromosome is a part of a cell.", "fol": "", "prediction": ["all x.(Chromosome(x) -> PartOfCell(x))"]}
{"id": "entailmentbank_train_3375", "nl": "mitosis produces two cells with the same number of chromosomes as the parent cell.", "fol": "", "prediction": ["all x y.((Mitosis(x) & Cell(y)) -> ProducesSameChromosomes(x,y))"]}
{"id": "entailmentbank_train_3376", "nl": "different cellular tissues are made of different types of somatic cells.", "fol": "", "prediction": ["all x y.((CellularTissue(x) & SomaticCell(y)) -> MadeOf(x,y))"]}
{"id": "entailmentbank_train_3377", "nl": "an organ is made of different types of cellular tissues that are made of different types of somatic cells.", "fol": "", "prediction": ["all x y.((Organ(x) & CellularTissue(y) & SomaticCell(y)) -> MadeOf(x,y))"]}
{"id": "entailmentbank_train_3378", "nl": "a heart is a kind of organ.", "fol": "", "prediction": ["all x.(Heart(x) -> Organ(x))"]}
{"id": "entailmentbank_train_3379", "nl": "a heart is made of different types of cellular tissues that are made of different types of somatic cells.", "fol": "", "prediction": ["all x y.((Heart(x) & CellularTissue(y) & SomaticCell(y)) -> MadeOf(x,y))"]}
{"id": "entailmentbank_train_3380", "nl": "a bladder is a kind of organ.", "fol": "", "prediction": ["all x.(B bladder(x) -> Organ(x))"]}
{"id": "entailmentbank_train_3381", "nl": "blood vessels are a kind of organ.", "fol": "", "prediction": ["all x.(BloodVessel(x) -> Organ(x))"]}
{"id": "entailmentbank_train_3382", "nl": "the heart, blood vessels, kidneys, and bladder working together.", "fol": "", "prediction": ["all x y z.((Heart(x) & BloodVessels(y) & Kidneys(z) & Bladder(x)) -> WorkingTogether(x,y,z))"]}
{"id": "entailmentbank_train_3383", "nl": "a kidney is a kind of organ in an animal.", "fol": "", "prediction": ["all x.(Knee(x) -> OrganInAnimal(x))"]}
{"id": "entailmentbank_train_3384", "nl": "the heart, blood vessels, kidneys, and bladder working together is an example of different parts of body working together.", "fol": "", "prediction": ["all x.((Heart(x) & BloodVessels(x) & Kidneys(x) & Bladder(x)) -> WorkingTogether(x))"]}
{"id": "entailmentbank_train_3385", "nl": "an organ system is made of different parts of the body working together.", "fol": "", "prediction": ["all x.(OrganSystem(x) -> exists y.(PartOfBody(y) & WorksTogether(x,y)))"]}
{"id": "entailmentbank_train_3386", "nl": "the heart, blood vessels, kidneys, and bladder working together makes them a organ system.", "fol": "", "prediction": ["all x.((Heart(x) & BloodVessels(x) & Kidneys(x) & Bladder(x)) -> OrganSystem(x))"]}
{"id": "entailmentbank_train_3387", "nl": "an onion is a kind of vegetable.", "fol": "", "prediction": ["all x.(Oil(x) -> Vegetable(x))"]}
{"id": "entailmentbank_train_3388", "nl": "a vegetable is a kind of plant.", "fol": "", "prediction": ["all x.(Vegetable(x) -> Plant(x))"]}
{"id": "entailmentbank_train_3389", "nl": "an onion is a kind of plant.", "fol": "", "prediction": ["all x.(Oil(x) -> Plant(x))"]}
{"id": "entailmentbank_train_3390", "nl": "a plant cell is box-like in shape.", "fol": "", "prediction": ["all x.(PlantCell(x) -> BoxLikeShape(x))"]}
{"id": "entailmentbank_train_3391", "nl": "a plant is made of plant cells.", "fol": "", "prediction": ["all x.(Plant(x) -> MadeOfPlantCells(x))"]}
{"id": "entailmentbank_train_3392", "nl": "a plant is made of box-like plant cells.", "fol": "", "prediction": ["all x.(Plant(x) -> MadeOfBoxLikePlantCells(x))"]}
{"id": "entailmentbank_train_3393", "nl": "an onion is made of box-like onion cells.", "fol": "", "prediction": ["all x.(Oil(x) -> MadeOfBoxLikeOnionCells(x))"]}
{"id": "entailmentbank_train_3394", "nl": "a lots of box-like objects are seen under a microscope on a slice of onion.", "fol": "", "prediction": ["all x y z.((BoxLikeObject(x) & Microscope(y) & SliceOfOnion(z)) -> SeeingUnder(y,z))"]}
{"id": "entailmentbank_train_3395", "nl": "the objects seen under the microscop are onion cells.", "fol": "", "prediction": ["all x.((Object(x) & VisibleUnderMicroscop(x)) -> OnionCells(x))"]}
{"id": "entailmentbank_train_3396", "nl": "a cell wall is a part of a plant cell for supporting and protecting the cell membrane.", "fol": "", "prediction": ["all x y.((CellWall(x) & PlantCell(y)) -> (PartOf(x,y) & SupportsAndProtectsCellMembrane(x)))"]}
{"id": "entailmentbank_train_3397", "nl": "plant cells have cell wall to support and protect the cell membrane.", "fol": "", "prediction": ["all x.(PlantCell(x) -> (HasCellWall(x) & SupportsCellMembrane(x) & ProtectsCellMembrane(x)))"]}
{"id": "entailmentbank_train_3398", "nl": "a pine tree is a kind of tree.", "fol": "", "prediction": ["all x.(PineTree(x) -> Tree(x))"]}
{"id": "entailmentbank_train_3399", "nl": "a pine tree is a kind of plant.", "fol": "", "prediction": ["all x.(PineTree(x) -> Plant(x))"]}
{"id": "entailmentbank_train_3400", "nl": "a pine tree is made of plant cells.", "fol": "", "prediction": ["all x.(PineTree(x) -> MadeOfPlantCells(x))"]}
{"id": "entailmentbank_train_3401", "nl": "a pine tree is the organism that is made of cells with cell wall.", "fol": "", "prediction": ["all x.(PineTree(x) -> (Organism(x) & MadeOfCellWall(x)))"]}
{"id": "entailmentbank_train_3402", "nl": "if something is a part of something then that something can be found in that something.", "fol": "", "prediction": ["all x y.((PartOf(x,y) & PartOf(x,y)) -> CanBeFoundIn(x,y))"]}
{"id": "entailmentbank_train_3403", "nl": "chloroplast is a part of a plant cell.", "fol": "", "prediction": ["all x.(Chlorophyll(x) -> PartOfPlantCell(x))"]}
{"id": "entailmentbank_train_3404", "nl": "chloroplast can be found in a plant cell.", "fol": "", "prediction": ["all x.(Chlorophyll(x) -> FoundInPlantCell(x))"]}
{"id": "entailmentbank_train_3405", "nl": "only plant cells have chloroplast.", "fol": "", "prediction": ["all x.(PlantCell(x) -> HasChlorophyll(x))"]}
{"id": "entailmentbank_train_3406", "nl": "chloroplast can only be found in a plant cell.", "fol": "", "prediction": ["all x.(Chlorophyll(x) -> CanBeFoundInPlantCell(x))"]}
{"id": "entailmentbank_train_3407", "nl": "meat is made of amino acids.", "fol": "", "prediction": ["all x.(Meat(x) -> MadeOfAminoAcids(x))"]}
{"id": "entailmentbank_train_3408", "nl": "if something is made of something else then that something can be broken down into that something else.", "fol": "", "prediction": ["all x.((MadeOf(x,y) & MadeOf(y,z)) -> CanBeBreakdownInto(x,z))"]}
{"id": "entailmentbank_train_3409", "nl": "meat can be broken down into amino acids.", "fol": "", "prediction": ["all x.(Meat(x) -> BreaksDownIntoAminoAcids(x))"]}
{"id": "entailmentbank_train_3410", "nl": "a hamburger patty is a kind of meat.", "fol": "", "prediction": ["all x.(HandtburgerPatty(x) -> Meat(x))"]}
{"id": "entailmentbank_train_3411", "nl": "a hamburger patty can be broken down into amino acids.", "fol": "", "prediction": ["all x.((HandtburgerPatty(x) & BrokenDownIntoAminoAcids(x)) -> CanBeBreakdown(x))"]}
{"id": "entailmentbank_train_3412", "nl": "healing is a kind of biological process.", "fol": "", "prediction": ["all x.(Healing(x) -> BiochemicalProcess(x))"]}
{"id": "entailmentbank_train_3413", "nl": "cell division often causes the biological process of healing.", "fol": "", "prediction": ["all x.(CellDividend(x) -> CausesBiologicalProcessOfHealing(x))"]}
{"id": "entailmentbank_train_3414", "nl": "growth means size / number / value / strength increases.", "fol": "", "prediction": ["all x.(Growth(x) -> (Size(x) & Number(x) & Value(x) & Strength(x)))"]}
{"id": "entailmentbank_train_3415", "nl": "cell division causes growth in size.", "fol": "", "prediction": ["all x.(CellDividend(x) -> CausesGrowthInSize(x))"]}
{"id": "entailmentbank_train_3416", "nl": "cell division produces more cells for multicellular organisms.", "fol": "", "prediction": ["all x y.((CellDividend(x) & MulticellularOrganism(y)) -> ProducesMoreCells(x,y))"]}
{"id": "entailmentbank_train_3417", "nl": "cell division causes growth in size by producing more cells for multicellular organisms.", "fol": "", "prediction": ["all x.(CellDividend(x) -> (CausesGrowthInSize(x) & ProducesMoreCells(x)))"]}
{"id": "entailmentbank_train_3418", "nl": "there is a cut on the skin tissue.", "fol": "", "prediction": ["all x.((SkinTissue(x) & CutOn(x)) -> CutOn(x))"]}
{"id": "entailmentbank_train_3419", "nl": "cell division can heal the cut on the skin tissue.", "fol": "", "prediction": ["all x.(CellDivision(x) -> HealsCutOnSkinTissue(x))"]}
{"id": "entailmentbank_train_3420", "nl": "cell division is a kind of way for cells to reproduce.", "fol": "", "prediction": ["all x.(CellDividend(x) -> ReproducesCells(x))"]}
{"id": "entailmentbank_train_3421", "nl": "the reproduction of skin cells can heal the cut on the skin tissue.", "fol": "", "prediction": ["all x.(ReproductionOfSkinCells(x) -> HealsCutOnSkinTissue(x))"]}
{"id": "entailmentbank_train_3422", "nl": "bacteria can show significant trait changes in the shortest period of time.", "fol": "", "prediction": ["all x.(Bacteria(x) -> ShowsSignificantTraitChanges(x))"]}
{"id": "entailmentbank_train_3423", "nl": "evolution causes significant trait changes in a species.", "fol": "", "prediction": ["all x y.((Evolution(x) & Species(y)) -> CausesSignificantTraitChanges(x,y))"]}
{"id": "entailmentbank_train_3424", "nl": "evolution of bacteria happens in the shrotest period of time.", "fol": "", "prediction": ["all x.(Bacteria(x) -> EvolutionOf(x,ShrotestPeriod))"]}
{"id": "entailmentbank_train_3425", "nl": "eukaryotic cells are more complex in cell structures than prokaryotic cells.", "fol": "", "prediction": ["all x y.((EukaryoticCell(x) & ProkaryoticCell(y)) -> MoreComplexInCellStructures(x,y))"]}
{"id": "entailmentbank_train_3426", "nl": "as the structural complexity of a cell increases, the speed of the cell dividing into more cells decreases.", "fol": "", "prediction": ["all x y.((Cell(x) & Cell(y) & IncreasesStructuralComplexity(x,y)) -> DecreasesSpeedOfDivision(x,y))"]}
{"id": "entailmentbank_train_3427", "nl": "the cell division of eukaryotic cells is slower than the cell division of prokaryotic cells.", "fol": "", "prediction": ["all x y.((EukaryoticCell(x) & ProkaryoticCell(y)) -> SlowerCellDividection(x,y))"]}
{"id": "entailmentbank_train_3428", "nl": "paramecia will conjugate to increase genetic variation under harsh environment.", "fol": "", "prediction": ["all x.(Paramecia(x) -> ConjugatesToIncreaseGeneticVariation(x))"]}
{"id": "entailmentbank_train_3429", "nl": "conjugation is a kind of bacterial reproduction.", "fol": "", "prediction": ["all x.(Conjugation(x) -> BacterialReproduction(x))"]}
{"id": "entailmentbank_train_3430", "nl": "a paramecium can conjugate.", "fol": "", "prediction": ["all x.(Paramecium(x) -> CanConjugate(x))"]}
{"id": "entailmentbank_train_3431", "nl": "amoebas reproduce asexually through fission.", "fol": "", "prediction": ["all x.(Amoeba(x) -> ReproducesAsexuallyThroughFission(x))"]}
{"id": "entailmentbank_train_3432", "nl": "an amoeba cannot conjugate.", "fol": "", "prediction": ["all x.(Amoeba(x) -> -Conjugate(x))"]}
{"id": "entailmentbank_train_3433", "nl": "a paramecium can conjugate but an amoeba cannot conjugate.", "fol": "", "prediction": ["all x y.((Paramecium(x) & Amoeba(y)) -> (CanConjugate(x) & -CanConjugate(y)))"]}
{"id": "entailmentbank_train_3434", "nl": "conjugation causes two genetically identical cells.", "fol": "", "prediction": ["all x.(Conjugation(x) -> CausesTwoGeneticallyIdenticalCells(x))"]}
{"id": "entailmentbank_train_3435", "nl": "a paramecium conjugating causes two genetically identical cells.", "fol": "", "prediction": ["all x.(ParameciumConjugating(x) -> CausesGeneticallyIdenticalCells(x,2))"]}
{"id": "entailmentbank_train_3436", "nl": "volvox reproducing sexually causes different cells to form.", "fol": "", "prediction": ["all x.(Volvox(x) -> (ReproducesSexually(x) & CausesDifferentCells(x)))"]}
{"id": "entailmentbank_train_3437", "nl": "the difference between the reproduction of paramecia and volvox is conjugation causes two genetically identical cells to form.", "fol": "", "prediction": ["all x y.((Difference(x) & Paramecia(y) & Volvox(y)) -> Conjugation(x,y))"]}
{"id": "entailmentbank_train_3438", "nl": "cellular respiration is when cells break down / extract energy from food to produce energy.", "fol": "", "prediction": ["all x.(CellularRespiration(x) -> (CellsBreakDown(x) & ExtractEnergyFromFood(x) & ProduceEnergy(x)))"]}
{"id": "entailmentbank_train_3439", "nl": "cellular repiration produces energy for cell activites by extracting energy from food.", "fol": "", "prediction": ["all x y.((CellularRepiration(x) & CellActivite(y)) -> ProducesEnergy(x,y))"]}
{"id": "entailmentbank_train_3440", "nl": "cellular respiration produces energy for cell activities by extracting energy from food.", "fol": "", "prediction": ["all x.(CellularRespiration(x) -> (ProducesEnergyForCellActivities(x) & ExtractsEnergyFromFood(x)))"]}
{"id": "entailmentbank_train_3441", "nl": "cellular respiration converts from oxygen and sugars into carbon dioxide, water, and energy.", "fol": "", "prediction": ["all x.(CellularRespiration(x) -> (ConvertsOxygenAndSugars(x) & CarbonDioxideWaterEnergy(x)))"]}
{"id": "entailmentbank_train_3442", "nl": "cellular respiration produces energy by converting sugars and oxygen into carbon dioxide, water, and energy.", "fol": "", "prediction": ["all x.(CellularRespiration(x) -> (ProducesEnergy(x) & ConvertsSugarsAndOxygenToCarbonDioxideWaterAndEnergy(x)))"]}
{"id": "entailmentbank_train_3443", "nl": "a cell membrane is a kind of cell structure.", "fol": "", "prediction": ["all x.(CellMembrane(x) -> CellStructure(x))"]}
{"id": "entailmentbank_train_3444", "nl": "the cell membrane provides support / protection for a cell.", "fol": "", "prediction": ["all x y.((CellMembrane(x) & Cell(y)) -> ProvidesSupport(x,y))"]}
{"id": "entailmentbank_train_3445", "nl": "the cell membrane is the cell structure that provides protection for a cell.", "fol": "", "prediction": ["all x.(CellMembrane(x) -> ProvidesProtectionForCell(x))"]}
{"id": "entailmentbank_train_3446", "nl": "an animal cell is a kind of cell.", "fol": "", "prediction": ["all x.(AnimalCell(x) -> Cell(x))"]}
{"id": "entailmentbank_train_3447", "nl": "the cell membrane is the cell structure that provides protection for an animal cell.", "fol": "", "prediction": ["all x.(CellMembrane(x) -> ProvidesProtectionForAnimalCell(x))"]}
{"id": "entailmentbank_train_3448", "nl": "nutrients are a kind of material.", "fol": "", "prediction": ["all x.(Nutrient(x) -> Material(x))"]}
{"id": "entailmentbank_train_3449", "nl": "the cell membrane allows materials to enter and leave the cell.", "fol": "", "prediction": ["all x y.((CellMembrane(x) & Cell(y)) -> AllowsMaterialsToEnterAndLeave(x,y))"]}
{"id": "entailmentbank_train_3450", "nl": "the cell membrane allows nutrients to enter and leave the cell.", "fol": "", "prediction": ["all x y.((CellMembrane(x) & Nutrient(y)) -> AllowsEntryAndLeave(x,y))"]}
{"id": "entailmentbank_train_3451", "nl": "providing support is a kind of function.", "fol": "", "prediction": ["all x.(ProvidesSupport(x) -> Function(x))"]}
{"id": "entailmentbank_train_3452", "nl": "a cell wall provides support / protection / shape / structure for a plant cell.", "fol": "", "prediction": ["all x y.((CellWall(x) & PlantCell(y)) -> ProvidesSupportProtectionShapeStructure(x,y))"]}
{"id": "entailmentbank_train_3453", "nl": "the main function of a cell wall is to provide support for a plant cell.", "fol": "", "prediction": ["all x y.((CellWall(x) & PlantCell(y)) -> ProvidesSupport(x,y))"]}
{"id": "entailmentbank_train_3454", "nl": "bark is used to protect the tree.", "fol": "", "prediction": ["all x.(Bark(x) -> ProtectsTree(x))"]}
{"id": "entailmentbank_train_3455", "nl": "a cell wall is used to protect a plant cell.", "fol": "", "prediction": ["all x y.((CellWall(x) & PlantCell(y)) -> Protects(x,y))"]}
{"id": "entailmentbank_train_3456", "nl": "a cell wall has a similar function to the bark of a tree.", "fol": "", "prediction": ["all x y.((CellWall(x) & Tree(y)) -> SimilarFunctionToBark(x,y))"]}
{"id": "entailmentbank_train_3457", "nl": "plants are made of plant cells.", "fol": "", "prediction": ["all x.(Plant(x) -> MadeOfPlantCells(x))"]}
{"id": "entailmentbank_train_3458", "nl": "green plants are a kind of producer.", "fol": "", "prediction": ["all x.(GreenPlant(x) -> Producer(x))"]}
{"id": "entailmentbank_train_3459", "nl": "green plants as producers are made of plant cells.", "fol": "", "prediction": ["all x.(Producer(x) -> MadeOfPlantCells(x))"]}
{"id": "entailmentbank_train_3460", "nl": "a chloroplast is a kind of plant cell structure.", "fol": "", "prediction": ["all x.(Chlorophyll(x) -> PlantCellStructure(x))"]}
{"id": "entailmentbank_train_3461", "nl": "a plant cell contains a strucutre called chloroplast.", "fol": "", "prediction": ["all x.((PlantCell(x) & ContainsStructural(x,chloplast)) -> Contains(x,chloplast))"]}
{"id": "entailmentbank_train_3462", "nl": "chloroplasts are the structure that is in the cells of producers.", "fol": "", "prediction": ["all x.(Chlorophyll(x) -> InProducersCells(x))"]}
{"id": "entailmentbank_train_3463", "nl": "a scientist is comparing two body cells of a multicellular organism.", "fol": "", "prediction": ["all x y z.((Scientist(x) & BodyCell(y) & MulticellularOrganism(z)) -> Comparing(x,y,z))"]}
{"id": "entailmentbank_train_3464", "nl": "somatic cells are body cells excluding the sex cells.", "fol": "", "prediction": ["all x.(SomaticCell(x) -> BodyCell(x))"]}
{"id": "entailmentbank_train_3465", "nl": "the scientist is comparing two somatic cells of a multicellular organism.", "fol": "", "prediction": ["all x y z.((Scientist(x) & SomaticCell(y) & MulticellularOrganism(z)) -> Comparing(x,y,z))"]}
{"id": "entailmentbank_train_3466", "nl": "two somatic cells from the same multicellular organism will have the same number of chromosomes.", "fol": "", "prediction": ["all x y.((SomaticCell(x) & SomaticCell(y) & MulticellularOrganism(x) & SameChromosomes(x,y)) -> SameChromosomes(x,y))"]}
{"id": "entailmentbank_train_3467", "nl": "the number of chromosomes of two somatic cells will most likely be the same.", "fol": "", "prediction": ["all x y.((SomaticCell(x) & SomaticCell(y)) -> SameChromosomes(x,y))"]}
{"id": "entailmentbank_train_3468", "nl": "genes contains genetic information.", "fol": "", "prediction": ["all x.(Gene(x) -> ContainsGeneticInformation(x))"]}
{"id": "entailmentbank_train_3469", "nl": "genetic information contains instructions for the passage of traits from one generation to the next.", "fol": "", "prediction": ["all x y.((GeneticInformation(x) & Generation(y)) -> ContainsInstructionsForPassage(x,y))"]}
{"id": "entailmentbank_train_3470", "nl": "genes contains instructions for the passage of traits from one generation to the next.", "fol": "", "prediction": ["all x y.((Gene(x) & Generation(y)) -> ContainsInstructionsForTraitsPassage(x,y))"]}
{"id": "entailmentbank_train_3471", "nl": "a chromosome contains genes.", "fol": "", "prediction": ["all x.(Chromosome(x) -> ContainsGenes(x))"]}
{"id": "entailmentbank_train_3472", "nl": "the chromosome contains instructions for the passage of traits from one generation to the next.", "fol": "", "prediction": ["all x y.((Chromosome(x) & Traits(y)) -> ContainsInstructionsForPassage(x,y))"]}
{"id": "entailmentbank_train_3473", "nl": "the chromosome is the part of the cell that contains instructions for the passage of traits from one generation to the next.", "fol": "", "prediction": ["all x.(Chromosome(x) -> (ContainsInstructionsForTraits(x) & PassesFromGenerationToGeneration(x)))"]}
{"id": "entailmentbank_train_3474", "nl": "a somatic cell of a human contains 23 pairs of / 46 chromosomes.", "fol": "", "prediction": ["all x y.((SomaticCell(x) & Human(y)) -> ContainsTwoPairsOfChromosomes(x,y))"]}
{"id": "entailmentbank_train_3475", "nl": "a liver cell is a kind of somatic cell.", "fol": "", "prediction": ["all x.(LiverCell(x) -> SomaticCell(x))"]}
{"id": "entailmentbank_train_3476", "nl": "a liver cell of a human contains 23 pairs of chromosomes.", "fol": "", "prediction": ["all x y.((LiverCell(x) & Human(y)) -> ContainsChromosomePairs(x,y))"]}
{"id": "entailmentbank_train_3477", "nl": "a fertilized egg cell is a kind of somatic cell.", "fol": "", "prediction": ["all x.(FertileEggCell(x) -> SomaticCell(x))"]}
{"id": "entailmentbank_train_3478", "nl": "a somatic cell of a fruit fly usually has 8 chromosomes.", "fol": "", "prediction": ["all x.((SomaticCell(x) & FruitFly(x)) -> HasChromosomes(x,8))"]}
{"id": "entailmentbank_train_3479", "nl": "a fertilized egg cell of a fruit fly will have 8 chromosomes.", "fol": "", "prediction": ["all x.((FertilizedEggCell(x) & FruitFly(x)) -> HasChromosomes(x,8))"]}
{"id": "entailmentbank_train_3480", "nl": "a fertilized egg is formed by a sperm and an egg cell fusing together.", "fol": "", "prediction": ["all x y z.((FertileEgg(x) & Sperm(y) & EggCell(z)) -> FormedBy(x,y,z))"]}
{"id": "entailmentbank_train_3481", "nl": "an egg cell is a kind of sex cell.", "fol": "", "prediction": ["all x.(EggCell(x) -> SexualCell(x))"]}
{"id": "entailmentbank_train_3482", "nl": "a sperm cell is a kind of sex cell.", "fol": "", "prediction": ["all x.(SpermCell(x) -> SexCell(x))"]}
{"id": "entailmentbank_train_3483", "nl": "a fertilized egg is formed by the fusion of two kinds of sex cells, a sperm and an egg cell.", "fol": "", "prediction": ["all x.(FertileEgg(x) -> (FormedByFusionOfSexCells(x) & exists y.(Spore(y) & FormedBy(x,y)))))"]}
{"id": "entailmentbank_train_3484", "nl": "each sex cell provides half the number of chromosomes in a fertilized egg through sexual reproduction.", "fol": "", "prediction": ["all x y.((SexCell(x) & FertileEgg(y)) -> ProvidesHalfChromosomes(x,y))"]}
{"id": "entailmentbank_train_3485", "nl": "the sperm and the egg cell will each provide half of the number of chromosomes in a fertilized egg.", "fol": "", "prediction": ["all x y.((Ssperm(x) & EggCell(y)) -> ProvidesHalfOfChromosomes(x,y))"]}
{"id": "entailmentbank_train_3486", "nl": "4 is half of 8.", "fol": "", "prediction": ["all x.((HalfOf(x,8)) -> HalfOf(x,8))"]}
{"id": "entailmentbank_train_3487", "nl": "the sperm and the egg cell each provides 4 chromosomes for the fertilized fruit fly egg.", "fol": "", "prediction": ["all x y.((Ssperm(x) & EggCell(y)) -> ProvidesChromosomes(x,y))"]}
{"id": "entailmentbank_train_3488", "nl": "mitochondrion provides energy to cells using oxygen and glucose.", "fol": "", "prediction": ["all x.(Mitochondrion(x) -> ProvidesEnergyToCells(x))"]}
{"id": "entailmentbank_train_3489", "nl": "a mitochondrion is a kind of cellular organelle.", "fol": "", "prediction": ["all x.(Mitochondrion(x) -> CellularOrganelle(x))"]}
{"id": "entailmentbank_train_3490", "nl": "mitochondrion is the cellular organelle that provides energy to cells using oxygen and glucose.", "fol": "", "prediction": ["all x.(Mitochondrion(x) -> (CellularOrganelle(x) & ProvidesEnergyToCells(x) & UsesOxygen(x) & UsesGlucose(x)))"]}
{"id": "entailmentbank_train_3491", "nl": "the cell nucleus is part of the cell that controls many of the functions of the cell.", "fol": "", "prediction": ["all x.(CellNucleus(x) -> ControlsFunctions(x))"]}
{"id": "entailmentbank_train_3492", "nl": "the nucleus is a kind of cell organelle.", "fol": "", "prediction": ["all x.(Nucleus(x) -> CellOrganelle(x))"]}
{"id": "entailmentbank_train_3493", "nl": "the nucleus contains genetic material for reproduction.", "fol": "", "prediction": ["all x.(Nucleus(x) -> ContainsGeneticMaterial(x))"]}
{"id": "entailmentbank_train_3494", "nl": "the nucleus is the cell organelle that contains genetic material for reproduction.", "fol": "", "prediction": ["all x.(Nucleus(x) -> (CellOrganelle(x) & ContainsGeneticMaterial(x)))"]}
{"id": "entailmentbank_train_3495", "nl": "nulear fusion releases a large amount of energy.", "fol": "", "prediction": ["all x.(NulearFusion(x) -> ReleasesLargeAmountOfEnergy(x))"]}
{"id": "entailmentbank_train_3496", "nl": "nuclear fusion increases the mass through fusing two nuclei together into one.", "fol": "", "prediction": ["all x y.((NuclearFusion(x) & Nucleus(y) & NuclearFusion(x,y)) -> IncreasesMassThroughFusing(x,y))"]}
{"id": "entailmentbank_train_3497", "nl": "nulcear fusion is a process that fuses two nuclei into one and releases large amount of energy.", "fol": "", "prediction": ["all x y.((NulcearFusion(x) & Nucleus(y)) -> (Fuses(x,y) & ReleasesLargeEnergy(x)))"]}
{"id": "entailmentbank_train_3498", "nl": "a process combines two nuclei into one and releases a large amount of energy.", "fol": "", "prediction": ["all x y z.((Process(x) & Nucleus(y) & Nucleus(z) & Combines(x,y,z)) -> ReleasesLargeAmountOfEnergy(x))"]}
{"id": "entailmentbank_train_3499", "nl": "the process is nulcear fusion.", "fol": "", "prediction": ["all x.(NulcearFusion(x) -> Process(x))"]}
{"id": "entailmentbank_train_3500", "nl": "a potato is a kind of plant.", "fol": "", "prediction": ["all x.(Potato(x) -> Plant(x))"]}
{"id": "entailmentbank_train_3501", "nl": "a potato is made of potato cells.", "fol": "", "prediction": ["all x.(Potato(x) -> MadeOfPotatoCells(x))"]}
{"id": "entailmentbank_train_3502", "nl": "vacuoles are used for storing water / food by cells.", "fol": "", "prediction": ["all x.(Vakuole(x) -> StoresWater(x))"]}
{"id": "entailmentbank_train_3503", "nl": "a vacuole is a kind of organelle.", "fol": "", "prediction": ["all x.(Vakuole(x) -> Organelle(x))"]}
{"id": "entailmentbank_train_3504", "nl": "vacuoles are the organelles that are used for storing water and food for cells.", "fol": "", "prediction": ["all x.(Vacuole(x) -> (Organelle(x) & StoresWater(x) & StoresFood(x)))"]}
{"id": "entailmentbank_train_3505", "nl": "vacuoles are the organelles that store water and food for potato cells.", "fol": "", "prediction": ["all x.(Vakuole(x) -> (Organelle(x) & StoresWater(x) & StoresFood(x) & ForPotatoCells(x)))"]}
{"id": "entailmentbank_train_3506", "nl": "starch is a kind of food.", "fol": "", "prediction": ["all x.(Starch(x) -> Food(x))"]}
{"id": "entailmentbank_train_3507", "nl": "vacuoles are the organelles that store water and starch for potato cells.", "fol": "", "prediction": ["all x.(Vacuole(x) -> (Organelle(x) & StoresWater(x) & StoresStarch(x) & ForPotatoCells(x)))"]}
{"id": "entailmentbank_train_3508", "nl": "a single-cell organism can survive without the help of other cells.", "fol": "", "prediction": ["all x.(SingleCellOrganism(x) -> SurvivesWithoutCellHelp(x))"]}
{"id": "entailmentbank_train_3509", "nl": "a yeast cell is a kind of single cell organism.", "fol": "", "prediction": ["all x.(YeastCell(x) -> SingleCellOrganism(x))"]}
{"id": "entailmentbank_train_3510", "nl": "a yeast cell can survive without the help of other cells.", "fol": "", "prediction": ["all x.(YeastCell(x) -> SurvivesWithoutHelpOfOtherCells(x))"]}
{"id": "entailmentbank_train_3511", "nl": "a single-celled organism is a kind of living thing.", "fol": "", "prediction": ["all x.(SingleCelledOrganism(x) -> LivingThing(x))"]}
{"id": "entailmentbank_train_3512", "nl": "all living things eliminate waste.", "fol": "", "prediction": ["all x.(LivingThing(x) -> EliminatesWaste(x))"]}
{"id": "entailmentbank_train_3513", "nl": "a multicellular organism is a kind of living thing.", "fol": "", "prediction": ["all x.(MulticellularOrganism(x) -> LivingThing(x))"]}
{"id": "entailmentbank_train_3514", "nl": "both multicelluar organism and singe-cell organism eliminate waste.", "fol": "", "prediction": ["all x.((MulticelluarOrganism(x) & SingeCellOrganism(x)) -> EliminatesWaste(x))"]}
{"id": "entailmentbank_train_3515", "nl": "eliminating waste means getting rid of waste materials.", "fol": "", "prediction": ["all x.((EliminatesWaste(x) & GetsRiseOfWasteMaterials(x)) -> WasteMaterials(x))"]}
{"id": "entailmentbank_train_3516", "nl": "both multicelluar organism and singe-cell organism can get rid of waste materials.", "fol": "", "prediction": ["all x.((MulticelluarOrganism(x) & SingeCellOrganism(x)) -> CanGetRiseOfWasteMaterials(x))"]}
{"id": "entailmentbank_train_3517", "nl": "paramecium has an organelle for movement.", "fol": "", "prediction": ["all x.(Paramecium(x) -> HasOrganelleForMovement(x))"]}
{"id": "entailmentbank_train_3518", "nl": "volvox has an organelle for movement.", "fol": "", "prediction": ["all x.(Volvox(x) -> HasOrganelleForMovement(x))"]}
{"id": "entailmentbank_train_3519", "nl": "both volvox and paramecium have organelle for movement.", "fol": "", "prediction": ["all x.(Volvox(x) & Paramecium(x)) -> HasOrganelleForMovement(x))"]}
{"id": "entailmentbank_train_3520", "nl": "fertilization is a stage in the sexual reproduction process.", "fol": "", "prediction": ["all x.(Fertilization(x) -> StageInSexualReproductionProcess(x))"]}
{"id": "entailmentbank_train_3521", "nl": "a zygote is formed immediately after fertilization.", "fol": "", "prediction": ["all x.(Zygote(x) -> FormedImmediatelyAfterFertilization(x))"]}
{"id": "entailmentbank_train_3522", "nl": "if a zygote is formed then a sexual reproduction process has happened.", "fol": "", "prediction": ["all x.((Zygote(x) & Formed(x)) -> SexualReproductionProcess(x))"]}
{"id": "entailmentbank_train_3523", "nl": "a student observes the formation of zygotes by one of the protists.", "fol": "", "prediction": ["all x y.((Student(x) & Protist(y)) -> ObservesZygotesFormation(x,y))"]}
{"id": "entailmentbank_train_3524", "nl": "a sexual reproduction process has happened in the protists that the student observed.", "fol": "", "prediction": ["all x y.((Student(x) & Student(y)) -> SexualReproductionProcessOccurs(x,y))"]}
{"id": "entailmentbank_train_3525", "nl": "volvox is a kind of protist.", "fol": "", "prediction": ["all x.(Volvox(x) -> Protist(x))"]}
{"id": "entailmentbank_train_3526", "nl": "volvox reproduces sexually.", "fol": "", "prediction": ["all x.(Volvox(x) -> ReproducesSexually(x))"]}
{"id": "entailmentbank_train_3527", "nl": "volvox is a kind of protist that reproduces sexually.", "fol": "", "prediction": ["all x.(Volvox(x) -> (Protist(x) & ReproducesSexually(x)))"]}
{"id": "entailmentbank_train_3528", "nl": "the protist may be volvox.", "fol": "", "prediction": ["all x.(Protist(x) -> (Volvox(x) | -Volvox(x)))"]}
{"id": "entailmentbank_train_3529", "nl": "volvox is a bi-flagellate autotroph.", "fol": "", "prediction": ["all x.(Volvox(x) -> BiFlagellateAutotroph(x))"]}
{"id": "entailmentbank_train_3530", "nl": "volvox is a protist that is a bi-flagellate autotroph.", "fol": "", "prediction": ["all x.(Volvox(x) -> (Protist(x) & BiFlagellateAutotroph(x)))"]}
{"id": "entailmentbank_train_3531", "nl": "an amoeba can change its shape.", "fol": "", "prediction": ["all x.(Amoeba(x) -> CanChangeShape(x))"]}
{"id": "entailmentbank_train_3532", "nl": "a paramecium cannot change its shape.", "fol": "", "prediction": ["all x.(Paramecium(x) -> -ChangeShape(x))"]}
{"id": "entailmentbank_train_3533", "nl": "an amoeba can change its shape but a paramecium cannot change its shape.", "fol": "", "prediction": ["all x y.((Amoeba(x) & Paramecium(y)) -> (CanChangeShape(x) | -CanChangeShape(y)))"]}
{"id": "entailmentbank_train_3534", "nl": "a green plant is a kind of organism.", "fol": "", "prediction": ["all x.(GreenPlant(x) -> Organism(x))"]}
{"id": "entailmentbank_train_3535", "nl": "if leaves fall out from a green plant, then those leaves are dead.", "fol": "", "prediction": ["all x y.((Leaves(x) & GreenPlant(y) & FallOut(x,y)) -> DeadLeaves(x))"]}
{"id": "entailmentbank_train_3536", "nl": "a leaf is a part of a green plant.", "fol": "", "prediction": ["all x.(Leaf(x) -> PartOfGreenPlant(x))"]}
{"id": "entailmentbank_train_3537", "nl": "fallen leaves are dead organisms.", "fol": "", "prediction": ["all x.(FallenLeaves(x) -> DeadOrganism(x))"]}
{"id": "entailmentbank_train_3538", "nl": "decomposition is when a decomposer returns nutrients from dead organisms to the soil by eating those dead organisms.", "fol": "", "prediction": ["all x y z.((Decomposer(x) & DeadOrganism(y) & Soil(z)) -> ReturnsNutrients(x,y,z))"]}
{"id": "entailmentbank_train_3539", "nl": "fallen leaves can be break down and become nutrients through decomposition.", "fol": "", "prediction": ["all x.(FallenLeaves(x) -> (BreakDown(x) & Decompose(x)))"]}
{"id": "entailmentbank_train_3540", "nl": "photosynthesis makes food for the plant by converting carbon dioxide, water, and sunlight into carbohydrates.", "fol": "", "prediction": ["all x y z.((Photosynthesis(x) & Plant(y) & CarbonDioxide(z) & Water(z) & Sunlight(z)) -> MakesFood(x,y,z))"]}
{"id": "entailmentbank_train_3541", "nl": "a leaf performs photosynthesis / gas exchange.", "fol": "", "prediction": ["all x.(Leaf(x) -> PerformsPhotosynthesis(x))"]}
{"id": "entailmentbank_train_3542", "nl": "the leaf part of a plant makes food by photosynthesis.", "fol": "", "prediction": ["all x y.((LeafPart(x) & Plant(y)) -> MakesFoodByPhotosynthesis(x,y))"]}
{"id": "entailmentbank_train_3543", "nl": "the leaf part of a pine tree makes food by photosynthesis.", "fol": "", "prediction": ["all x.((LeafPartOfPineTree(x) & MakesFoodByPhotosynthesis(x)) -> MakesFoodByPhotosynthesis(x))"]}
{"id": "entailmentbank_train_3544", "nl": "a needle is the leaf of a pine tree.", "fol": "", "prediction": ["all x y.((Needle(x) & PineTree(y)) -> Leaf(x,y))"]}
{"id": "entailmentbank_train_3545", "nl": "a needle is a part of a pine tree.", "fol": "", "prediction": ["all x.(Needle(x) -> PartOfPineTree(x))"]}
{"id": "entailmentbank_train_3546", "nl": "a needle is the leaf part of a pine tree.", "fol": "", "prediction": ["all x y.((Needle(x) & PineTree(y)) -> LeafPart(x,y))"]}
{"id": "entailmentbank_train_3547", "nl": "the needle of a pine tree makes food for pine trees by photosynthesis.", "fol": "", "prediction": ["all x y.((Needle(x) & PineTree(y)) -> MakesFood(x,y))"]}
{"id": "entailmentbank_train_3548", "nl": "shape of the parts of something is a property of that something.", "fol": "", "prediction": ["all x y.((Shape(x) & Parts(y) & Something(z)) -> PropertyOf(x,y,z))"]}
{"id": "entailmentbank_train_3549", "nl": "an oak is a kind of tree.", "fol": "", "prediction": ["all x.(Oak(x) -> Tree(x))"]}
{"id": "entailmentbank_train_3550", "nl": "the shape of oak trees leaves is a property of oak trees.", "fol": "", "prediction": ["all x.((OakTree(x) & OakTree(x)) -> PropertyOf(x,oakTrees))"]}
{"id": "entailmentbank_train_3551", "nl": "a maple tree is a kind of tree.", "fol": "", "prediction": ["all x.(MapleTree(x) -> Tree(x))"]}
{"id": "entailmentbank_train_3552", "nl": "the shape of maple trees leaves is a property of maple trees.", "fol": "", "prediction": ["all x.((ShapeOfMapleTreesLeaves(x) & MapleTree(x)) -> PropertyOfMapleTrees(x))"]}
{"id": "entailmentbank_train_3553", "nl": "trees of different species have differently shaped leaves.", "fol": "", "prediction": ["all x.((Tree(x) & DifferentSpecies(x)) -> DifferentlyShapedLeaves(x))"]}
{"id": "entailmentbank_train_3554", "nl": "oak trees and maple trees have leaves of different shapes properties.", "fol": "", "prediction": ["all x y.((OakTree(x) & MapleTree(y)) -> (HasLeaves(x,y) & HasLeaves(y,x)))"]}
{"id": "entailmentbank_train_3555", "nl": "classifying means grouping objects / materials by their properties.", "fol": "", "prediction": ["all x y.((ClassifyingMeasures(x) & Objects(y) & Material(y)) -> GroupsByProperties(x,y))"]}
{"id": "entailmentbank_train_3556", "nl": "oak trees and maple trees can be classified by the shape of their leaves.", "fol": "", "prediction": ["all x.((OakTree(x) | MapleTree(x)) -> (ClassifiedByShapeOfLeaves(x)))"]}
{"id": "entailmentbank_train_3557", "nl": "classifying is similar to telling the difference.", "fol": "", "prediction": ["all x.(Classifying(x) -> TellsDifference(x))"]}
{"id": "entailmentbank_train_3558", "nl": "we can tell the difference of oak trees and maple trees by the shape of their leaves.", "fol": "", "prediction": ["all x y.((OakTree(x) & MapleTree(y)) -> (ShapeOfLeaves(x,y) & TellsDifference(x,y)))"]}
{"id": "entailmentbank_train_3559", "nl": "a leaf performs photosynthesis.", "fol": "", "prediction": ["all x.(Leaf(x) -> PerformsPhotosynthesis(x))"]}
{"id": "entailmentbank_train_3560", "nl": "leaves of plant make food by performing photosynthesis.", "fol": "", "prediction": ["all x.((LeavesOfPlant(x) & MakeFood(x)) -> Photosynthesis(x))"]}
{"id": "entailmentbank_train_3561", "nl": "a plant is missing leaves.", "fol": "", "prediction": ["all x.((Plant(x) & MissingLeaves(x)) -> MissingLeaves(x))"]}
{"id": "entailmentbank_train_3562", "nl": "the plant will make less food.", "fol": "", "prediction": ["all x.(Plant(x) -> MakesLessFood(x))"]}
{"id": "entailmentbank_train_3563", "nl": "a plant / living thing requires food for survival.", "fol": "", "prediction": ["all x.((Plant(x) & LivingThing(x)) -> RequiresFoodForSurvival(x))"]}
{"id": "entailmentbank_train_3564", "nl": "the food the plant requires to survive will be less.", "fol": "", "prediction": ["all x.((Plant(x) & RequiresFood(x)) -> Less(x))"]}
{"id": "entailmentbank_train_3565", "nl": "the decrease of something required by an organism has a negative impact on the survival of the organism.", "fol": "", "prediction": ["all x y.((Decrease(x) & Organism(y) & Requires(x,y)) -> NegativeImpactOnSurvival(x,y))"]}
{"id": "entailmentbank_train_3566", "nl": "making less food has a negative impact on the plant.", "fol": "", "prediction": ["all x.(LessFood(x) -> NegativeImpactOnPlant(x))"]}
{"id": "entailmentbank_train_3567", "nl": "photosynthesis means green plants convert from solar energy into carbohydrates and food and oxygen.", "fol": "", "prediction": ["all x.(Photosynthesis(x) -> (GreenPlantsConvertFromSolarEnergyToCarbohydrates(x) & ToFoodAndOxygen(x)))"]}
{"id": "entailmentbank_train_3568", "nl": "food contains chemical energy.", "fol": "", "prediction": ["all x.(Food(x) -> ContainsChemicalEnergy(x))"]}
{"id": "entailmentbank_train_3569", "nl": "photosynthesis converts solar energy into chemical energy.", "fol": "", "prediction": ["all x.(Photosynthesis(x) -> ConvertsSolarEnergyToChemicalEnergy(x))"]}
{"id": "entailmentbank_train_3570", "nl": "a leaf converts solar energy into chemical energy.", "fol": "", "prediction": ["all x.(Leaf(x) -> ConvertsSolarEnergyToChemicalEnergy(x))"]}
{"id": "entailmentbank_train_3571", "nl": "solar cells convert solar energy into electrical energy.", "fol": "", "prediction": ["all x.(SolarCell(x) -> ConvertsSolarEnergyToElectricalEnergy(x))"]}
{"id": "entailmentbank_train_3572", "nl": "both a leaf and solar cell convert solar energy to another form of energy.", "fol": "", "prediction": ["all x y.((Leaf(x) & SolarCell(y)) -> ConvertsSolarEnergyToAnotherEnergy(x,y))"]}
{"id": "entailmentbank_train_3573", "nl": "photosynthesis converts sunlight into sugar.", "fol": "", "prediction": ["all x.(Photosynthesis(x) -> ConvertsSunlightToSugar(x))"]}
{"id": "entailmentbank_train_3574", "nl": "photosynthesis converts solar energy into sugar.", "fol": "", "prediction": ["all x.(Photosynthesis(x) -> ConvertsSolarEnergyToSugar(x))"]}
{"id": "entailmentbank_train_3575", "nl": "a leaf converts solar energy into sugar.", "fol": "", "prediction": ["all x.(Leaf(x) -> ConvertsSolarEnergyToSugar(x))"]}
{"id": "entailmentbank_train_3576", "nl": "photosynthesis makes food for the plant by converting sunlight into carbohydrates.", "fol": "", "prediction": ["all x y.((Photosynthesis(x) & Plant(y)) -> (MakesFood(x,y) & ConvertsSunlightToCarbohydrates(x)))"]}
{"id": "entailmentbank_train_3577", "nl": "a leaf makes food for the plant by converting sunlight into carbohydrates.", "fol": "", "prediction": ["all x y.((Leaf(x) & Plant(y) & ConvertsSunlightToCarbohydrates(x,y)) -> MakesFoodFor(x,y))"]}
{"id": "entailmentbank_train_3578", "nl": "a leaf absorbs sunlight to perform photosynthesis.", "fol": "", "prediction": ["all x.(Leaf(x) -> AbsorbsSunlightToPerformPhotosynthesis(x))"]}
{"id": "entailmentbank_train_3579", "nl": "a leaf is part of a plant that absorbs sunlight to perform photosynthesis.", "fol": "", "prediction": ["all x y.((Leaf(x) & Plant(y) & AbsorbsSunlight(x,y)) -> PerformsPhotosynthesis(x))"]}
{"id": "entailmentbank_train_3580", "nl": "a leaf requires sunlight to perform photosynthesis.", "fol": "", "prediction": ["all x.(Leaf(x) -> RequiresSunlight(x))"]}
{"id": "entailmentbank_train_3581", "nl": "absorbing something is a kind of method for obtaining something.", "fol": "", "prediction": ["all x.(Absorbing(x) -> Obtaining(x))"]}
{"id": "entailmentbank_train_3582", "nl": "if something is required to perform a process then that something must be obtained to perform that process.", "fol": "", "prediction": ["all x y.((Process(x) & Requires(x,y)) -> MustObtain(x,y))"]}
{"id": "entailmentbank_train_3583", "nl": "if something is required to perform a process then that something can be absorbed to perform that process.", "fol": "", "prediction": ["all x y.((RequiredToPerformProcess(x) & Process(y)) -> CanBeAbsorbedToPerformProcess(x,y))"]}
{"id": "entailmentbank_train_3584", "nl": "a leaf absorbs sunlight to make food.", "fol": "", "prediction": ["all x.(Leaf(x) -> AbsorbsSunlightToMakeFood(x))"]}
{"id": "entailmentbank_train_3585", "nl": "if a process converts something into something else, then that something is a raw material in that process.", "fol": "", "prediction": ["all x y.((Process(x) & ConvertsInto(x,y)) -> RawMaterial(x))"]}
{"id": "entailmentbank_train_3586", "nl": "photosynthesis means green plants convert from carbon dioxide and water and sunlight into carbohydrates and food and oxygen for themselves.", "fol": "", "prediction": ["all x.(Photosynthesis(x) -> (GreenPlantsConvertFromCarbonDioxideAndWaterAndSunlight(x) & CarbohydratesAndFoodAndOxygen(x)))"]}
{"id": "entailmentbank_train_3587", "nl": "in the photosynthesis process sunlight has the role of raw material.", "fol": "", "prediction": ["all x.((Sunlight(x) & PhotosynthesisProcess(x)) -> RawMaterial(x))"]}
{"id": "entailmentbank_train_3588", "nl": "if something has the role of raw material in a process then that something is required for that process.", "fol": "", "prediction": ["all x y.((RoleOfRawMaterial(x) & Process(y)) -> RequiresForProcess(x,y))"]}
{"id": "entailmentbank_train_3589", "nl": "if something is required for a process then that something must be obtained for that process.", "fol": "", "prediction": ["all x y.((RequiredForProcess(x) & Process(y)) -> MustObtainedForProcess(x,y))"]}
{"id": "entailmentbank_train_3590", "nl": "if something is required for a process then that something can be absorbed for that process.", "fol": "", "prediction": ["all x y.((RequiredForProcess(x) & Process(y)) -> CanBeAbsorbedForProcess(x,y))"]}
{"id": "entailmentbank_train_3591", "nl": "a producer is a source of sugar in an ecosystem.", "fol": "", "prediction": ["all x y.((Producer(x) & Ecosystem(y)) -> SourceOfSugar(x,y))"]}
{"id": "entailmentbank_train_3592", "nl": "plants are a source of sugar in an ecosystem.", "fol": "", "prediction": ["all x y.((Plant(x) & Ecosystem(y)) -> SourceOfSugar(x,y))"]}
{"id": "entailmentbank_train_3593", "nl": "plants produce sugar in an ecosystem.", "fol": "", "prediction": ["all x y.((Plant(x) & Ecosystem(y)) -> ProducesSugar(x,y))"]}
{"id": "entailmentbank_train_3594", "nl": "sugar is a kind of food.", "fol": "", "prediction": ["all x.(Sugar(x) -> Food(x))"]}
{"id": "entailmentbank_train_3595", "nl": "photosynthesis makes sugar for plants.", "fol": "", "prediction": ["all x.(Photosynthesis(x) -> MakesSugarForPlants(x))"]}
{"id": "entailmentbank_train_3596", "nl": "plants produce sugar during photosynthesis.", "fol": "", "prediction": ["all x.(Plant(x) -> ProducesSugarDuringPhotosynthesis(x))"]}
{"id": "entailmentbank_train_3597", "nl": "plants convert sunlight into food using photosynthesis.", "fol": "", "prediction": ["all x.(Plant(x) -> (ConvertsSunlightToFood(x) & Photosynthesis(x)))"]}
{"id": "entailmentbank_train_3598", "nl": "sunlight is a kind of light energy.", "fol": "", "prediction": ["all x.(Sunlight(x) -> LightEnergy(x))"]}
{"id": "entailmentbank_train_3599", "nl": "plants convert light energy to food using photosynthesis.", "fol": "", "prediction": ["all x.(Plant(x) -> (ConvertsLightEnergyToFood(x) & Photosynthesis(x)))"]}
{"id": "entailmentbank_train_3600", "nl": "food is a source of energy for animals / plants.", "fol": "", "prediction": ["all x y.((Food(x) & Animal(y) & Plant(y)) -> SourceOfEnergy(x,y))"]}
{"id": "entailmentbank_train_3601", "nl": "plants convert light energy into food energy during photosynthesis.", "fol": "", "prediction": ["all x.((Plant(x) & Photosynthesis(x)) -> ConvertsLightEnergyToFoodEnergy(x))"]}
{"id": "entailmentbank_train_3602", "nl": "photosynthesis means green plants convert from carbon dioxide and water and solar energy into carbohydrates and food and oxygen for themselves.", "fol": "", "prediction": ["all x.(Photosynthesis(x) -> (GreenPlantsConvertFromCarbonDioxideAndWaterAndSolarEnergy(x) & CarbohydratesAndFoodAndOxygen(x)))"]}
{"id": "entailmentbank_train_3603", "nl": "photosynthesis means plants convert carbon dioxide and water into sugars and oxygen.", "fol": "", "prediction": ["all x.(Photosynthesis(x) -> (ConvertsCarbonDioxideAndWater(x) & ProducesSugarsAndOxygen(x)))"]}
{"id": "entailmentbank_train_3604", "nl": "photosynthesis is a kind of chemical process.", "fol": "", "prediction": ["all x.(Photosynthesis(x) -> ChemicalProcess(x))"]}
{"id": "entailmentbank_train_3605", "nl": "photosynthesis is a kind of process that converts carbon dioxide and water into sugars and oxygen.", "fol": "", "prediction": ["all x.(Photosynthesis(x) -> (ConvertsCarbonDioxideAndWaterToSugarsAndOxygen(x)))"]}
{"id": "entailmentbank_train_3606", "nl": "if a process converts something into something else, then that process is a source of that something else.", "fol": "", "prediction": ["all x y.((Process(x) & ConvertsInto(x,y)) -> SourceOf(x,y))"]}
{"id": "entailmentbank_train_3607", "nl": "plants perform photosynthesis.", "fol": "", "prediction": ["all x.(Plant(x) -> PerformsPhotosynthesis(x))"]}
{"id": "entailmentbank_train_3608", "nl": "plants produce oxygen through photosynthesis.", "fol": "", "prediction": ["all x.(Plant(x) -> ProducesOxygenThroughPhotosynthesis(x))"]}
{"id": "entailmentbank_train_3609", "nl": "if something is given off of something, then something is the product of something.", "fol": "", "prediction": ["all x y.((GiftOff(x) & GivenOff(x)) -> ProductOf(y,x))"]}
{"id": "entailmentbank_train_3610", "nl": "plants give off oxygen through photosynthesis.", "fol": "", "prediction": ["all x.(Plant(x) -> GivesOxygenThroughPhotosynthesis(x))"]}
{"id": "entailmentbank_train_3611", "nl": "if a process converts something to something else, then that process is a source of that something else.", "fol": "", "prediction": ["all x y.((Process(x) & ConvertsTo(x,y)) -> SourceOf(x,y))"]}
{"id": "entailmentbank_train_3612", "nl": "plants release oxygen through photosynthesis.", "fol": "", "prediction": ["all x.(Plant(x) -> ReleasesOxygenThroughPhotosynthesis(x))"]}
{"id": "entailmentbank_train_3613", "nl": "trees release oxygen through photosynthesis.", "fol": "", "prediction": ["all x.(Tree(x) -> ReleasesOxygenThroughPhotosynthesis(x))"]}
{"id": "entailmentbank_train_3614", "nl": "photosynthesis means plants convert carbon dioxide and water and sunlight into carbohydrates and food and oxygen.", "fol": "", "prediction": ["all x.(Photosynthesis(x) -> (ConvertsCarbonDioxideAndWaterAndSunlight(x) & CarbohydratesAndFoodAndOxygen(x)))"]}
{"id": "entailmentbank_train_3615", "nl": "if an organism performs a process that converts something into something else, then that organism requires that something for that process.", "fol": "", "prediction": ["all x y.((Organism(x) & Process(y) & Performs(x,y)) -> Requires(x,y))"]}
{"id": "entailmentbank_train_3616", "nl": "photosynthesis requires light.", "fol": "", "prediction": ["all x.(Photosynthesis(x) -> RequiresLight(x))"]}
{"id": "entailmentbank_train_3617", "nl": "dark means a low amount of light.", "fol": "", "prediction": ["all x.(Dark(x) -> LowLight(x))"]}
{"id": "entailmentbank_train_3618", "nl": "darkness has a negative impact on photosynthesis.", "fol": "", "prediction": ["all x.(Darkness(x) -> NegativeImpactOnPhotosynthesis(x))"]}
{"id": "entailmentbank_train_3619", "nl": "solar energy is a kind of energy.", "fol": "", "prediction": ["all x.(SolarEnergy(x) -> Energy(x))"]}
{"id": "entailmentbank_train_3620", "nl": "sunlight is a kind of energy.", "fol": "", "prediction": ["all x.(Sunlight(x) -> Energy(x))"]}
{"id": "entailmentbank_train_3621", "nl": "a plant requires energy to perform photosynthesis.", "fol": "", "prediction": ["all x.((Plant(x) & RequiresEnergy(x)) -> Photosynthesis(x))"]}
{"id": "entailmentbank_train_3622", "nl": "a plant can use sunlight to perform photosynthesis.", "fol": "", "prediction": ["all x.((Plant(x) & UsesSunlight(x)) -> PerformsPhotosynthesis(x))"]}
{"id": "entailmentbank_train_3623", "nl": "plants release oxygen during photosynthesis.", "fol": "", "prediction": ["all x.((Plant(x) & Photosynthesis(x)) -> ReleasesOxygen(x))"]}
{"id": "entailmentbank_train_3624", "nl": "to absorb something can mean to take something in.", "fol": "", "prediction": ["all x.(Absorb(x) -> TakeIn(x))"]}
{"id": "entailmentbank_train_3625", "nl": "a plant absorbs carbon dioxide from the air to perform photosynthesis.", "fol": "", "prediction": ["all x y.((Plant(x) & CarbonDioxide(y)) -> AbsorbsToPerformPhotosynthesis(x,y))"]}
{"id": "entailmentbank_train_3626", "nl": "a plant takes in carbon dioxide to perform photosynthesis.", "fol": "", "prediction": ["all x.(Plant(x) -> TakesInCarbonDioxide(x))"]}
{"id": "entailmentbank_train_3627", "nl": "plants take in carbon dioxide and release oxygen during photosynthesis.", "fol": "", "prediction": ["all x.(Plant(x) -> (TakesInCarbonDioxide(x) & ReleasesOxygen(x)))"]}
{"id": "entailmentbank_train_3628", "nl": "if a process converts something to something else, then that something has the role of raw material in that process.", "fol": "", "prediction": ["all x y.((Process(x) & ConvertsTo(x,y)) -> HasRoleOfRawMaterial(x,y))"]}
{"id": "entailmentbank_train_3629", "nl": "in the photosynthesis process carbon dioxide has the role of raw material.", "fol": "", "prediction": ["all x.((CarbonDioxide(x) & PhotosynthesisProcess(x)) -> RawMaterial(x))"]}
{"id": "entailmentbank_train_3630", "nl": "if something is a raw material in a process then that something is required for that process.", "fol": "", "prediction": ["all x y.((RawMaterial(x) & Process(y)) -> Requires(x,y))"]}
{"id": "entailmentbank_train_3631", "nl": "carbon dioxide is required for photosynthesis.", "fol": "", "prediction": ["all x.(CarbonDioxide(x) -> PhotosynthesisRequired(x))"]}
{"id": "entailmentbank_train_3632", "nl": "if something is required for a process then that something is used in that process.", "fol": "", "prediction": ["all x y.((RequiredForProcess(x) & Process(y)) -> UsedInProcess(x,y))"]}
{"id": "entailmentbank_train_3633", "nl": "carbon dioxide is used in photosynthesis.", "fol": "", "prediction": ["all x.(CarbonDioxide(x) -> UsedInPhotosynthesis(x))"]}
{"id": "entailmentbank_train_3634", "nl": "an animal requires oxygen for to breathe.", "fol": "", "prediction": ["all x.(Animal(x) -> RequiresOxygenForBreathing(x))"]}
{"id": "entailmentbank_train_3635", "nl": "oxygen can be found in air.", "fol": "", "prediction": ["all x.(Oxygen(x) -> FoundInAir(x))"]}
{"id": "entailmentbank_train_3636", "nl": "an animal requires oxygen in air to breathe.", "fol": "", "prediction": ["all x.((Animal(x) & RequiresOxygen(x)) -> Breathes(x))"]}
{"id": "entailmentbank_train_3637", "nl": "air quality is a measure of how breathable air is.", "fol": "", "prediction": ["all x.(AirQuality(x) -> MeasuresBreathableAir(x))"]}
{"id": "entailmentbank_train_3638", "nl": "oxygen has a positive impact on air quality.", "fol": "", "prediction": ["all x.(Oxygen(x) -> PositiveImpactOnAirQuality(x))"]}
{"id": "entailmentbank_train_3639", "nl": "plants have a positive impact on air quality by producing oxygen through photosynthesis.", "fol": "", "prediction": ["all x.(Plant(x) -> (PositiveImpactOnAirQuality(x) & ProducesOxygenThroughPhotosynthesis(x)))"]}
{"id": "entailmentbank_train_3640", "nl": "if an organism uses a process to convert something to something else, then that something is required by that organism for that process.", "fol": "", "prediction": ["all x y.((Organism(x) & Process(y) & Uses(x,y)) -> RequiresForProcess(x,y))"]}
{"id": "entailmentbank_train_3641", "nl": "if something is required for a process, then that something must be obtained for that process.", "fol": "", "prediction": ["all x y.((RequiredForProcess(x) & Process(y)) -> MustObtainedForProcess(x,y))"]}
{"id": "entailmentbank_train_3642", "nl": "if something is required for a process, then that something can be absorbed for that process.", "fol": "", "prediction": ["all x y.((RequiredForProcess(x) & Process(y)) -> CanBeAbsorbedForProcess(x,y))"]}
{"id": "entailmentbank_train_3643", "nl": "a plant absorbs sunlight for photosynthesis.", "fol": "", "prediction": ["all x.((Plant(x) & AbsorbsSunlight(x)) -> Photosynthesis(x))"]}
{"id": "entailmentbank_train_3644", "nl": "a plant absorbs energy for photosynthesis.", "fol": "", "prediction": ["all x.(Plant(x) -> AbsorbsEnergyForPhotosynthesis(x))"]}
{"id": "entailmentbank_train_3645", "nl": "if an organism uses a process to convert something into something else, then that organism is a source of that something else through that process.", "fol": "", "prediction": ["all x y.((Organism(x) & Process(y) & ConvertsInto(x,y)) -> SourceOf(x,y))"]}
{"id": "entailmentbank_train_3646", "nl": "plants are a source of carbohydrates through photosynthesis.", "fol": "", "prediction": ["all x.(Plant(x) -> SourceOfCarbohydratesThroughPhotosynthesis(x))"]}
{"id": "entailmentbank_train_3647", "nl": "plants are a source of sugar through photosynthesis.", "fol": "", "prediction": ["all x.(Plant(x) -> SourceOfSugarThroughPhotosynthesis(x))"]}
{"id": "entailmentbank_train_3648", "nl": "plants are a source of oxygen and sugar through photosynthesis.", "fol": "", "prediction": ["all x.(Plant(x) -> (SourceOfOxygen(x) & SourceOfSugar(x) & Photosynthesis(x)))"]}
{"id": "entailmentbank_train_3649", "nl": "plants produce oxygen and sugar through photosynthesis.", "fol": "", "prediction": ["all x.(Plant(x) -> (ProducesOxygen(x) & ProducesSugar(x) & Photosynthesis(x)))"]}
{"id": "entailmentbank_train_3650", "nl": "when something is absorbed from a place that something is removed from that place.", "fol": "", "prediction": ["all x y.((Absorbed(x) & Place(y)) -> Removed(x,y))"]}
{"id": "entailmentbank_train_3651", "nl": "plant uptake is when plants remove water from the soil with their roots.", "fol": "", "prediction": ["all x.((PlantUptake(x) & PlantsRemoveWaterWithRoots(x)) -> RemovesWaterFromSoil(x))"]}
{"id": "entailmentbank_train_3652", "nl": "plants perform plant uptake.", "fol": "", "prediction": ["all x.(Plant(x) -> PerformsPlantUptake(x))"]}
{"id": "entailmentbank_train_3653", "nl": "plants remove water from the soil through plant uptake.", "fol": "", "prediction": ["all x y.((Plant(x) & Soil(y)) -> RemovesWaterThroughUptake(x,y))"]}
{"id": "entailmentbank_train_3654", "nl": "when something moves from an object to the atmosphere that something is released.", "fol": "", "prediction": ["all x y.((Object(x) & Atmosphere(y) & MovesFromTo(x,y)) -> Released(x))"]}
{"id": "entailmentbank_train_3655", "nl": "transpiration is when water is released from plants to the atmosphere as water vapor.", "fol": "", "prediction": ["all x y.((Water(x) & Plant(y) & ReleasedFromToAtmosphere(x,y)) -> WaterVapor(x))"]}
{"id": "entailmentbank_train_3656", "nl": "transpiration occurs in plants.", "fol": "", "prediction": ["all x y.((Plant(x) & Plant(y)) -> transpirationOccursIn(x,y))"]}
{"id": "entailmentbank_train_3657", "nl": "plants can release water to the atmosphere as water vapor through transpiration.", "fol": "", "prediction": ["all x y.((Plant(x) & Atmosphere(y)) -> ReleasesWater(x,y))"]}
{"id": "entailmentbank_train_3658", "nl": "plants can remove water from the soil and release water to the atmosphere.", "fol": "", "prediction": ["all x y.((Plant(x) & Soil(y)) -> (RemovesWater(x,y) & ReleasesWater(x,y)))"]}
{"id": "entailmentbank_train_3659", "nl": "trees can remove water from the soil and release water to the atmosphere.", "fol": "", "prediction": ["all x.(Tree(x) -> (RemovesWaterFromSoil(x) & ReleasesWaterToAtmosphere(x)))"]}
{"id": "entailmentbank_train_3660", "nl": "carbohydrates store chemical energy.", "fol": "", "prediction": ["all x.(Carbohydrate(x) -> StoresChemicalEnergy(x))"]}
{"id": "entailmentbank_train_3661", "nl": "a carbohydrate is a kind of compound.", "fol": "", "prediction": ["all x.(Carbohydrate(x) -> Compound(x))"]}
{"id": "entailmentbank_train_3662", "nl": "carbohydrates are a kind of compound that store chemical energy.", "fol": "", "prediction": ["all x.(Carbohydrate(x) -> StoresChemicalEnergy(x))"]}
{"id": "entailmentbank_train_3663", "nl": "photosynthesis means green plants convert carbon dioxide and water and sunlight energy into carbohydrates and food and oxygen for themselves.", "fol": "", "prediction": ["all x.(Photosynthesis(x) -> (GreenPlantsConvertCarbonDioxideWaterSunlightEnergy(x) & CarbohydratesFoodOxygenForSelf(x)))"]}
{"id": "entailmentbank_train_3664", "nl": "photosynthesis converts sunlight energy into a compound that stores chemical energy.", "fol": "", "prediction": ["all x y.((Photosynthesis(x) & SunlightEnergy(y)) -> ConvertsToCompound(x,y))"]}
{"id": "entailmentbank_train_3665", "nl": "if an organism uses a process to convert something to something else, then that organism is a source of that something else through that process.", "fol": "", "prediction": ["all x y.((Organism(x) & Process(y) & ConvertsTo(x,y)) -> SourceOf(x,y))"]}
{"id": "entailmentbank_train_3666", "nl": "plants increase the amount of oxygen.", "fol": "", "prediction": ["all x.(Plant(x) -> IncreasesOxygen(x))"]}
{"id": "entailmentbank_train_3667", "nl": "a rose is a kind of plant.", "fol": "", "prediction": ["all x.(Rose(x) -> Plant(x))"]}
{"id": "entailmentbank_train_3668", "nl": "a rose requires nutrients to grow.", "fol": "", "prediction": ["all x.(Rose(x) -> RequiresNutrients(x))"]}
{"id": "entailmentbank_train_3669", "nl": "weeds use up nutrients.", "fol": "", "prediction": ["all x.(Weed(x) -> UsesNutrients(x))"]}
{"id": "entailmentbank_train_3670", "nl": "if weeds use up the nutrients, then the rose will not have nutrients to grow.", "fol": "", "prediction": ["all x.((WeedsUseUpNutrients(x) & Rose(x)) -> -HasNutrientsToGrow(x))"]}
{"id": "entailmentbank_train_3671", "nl": "the student wants to grow roses.", "fol": "", "prediction": ["all x.((Student(x) & WantsToGrowRose(x)) -> GrowRose(x))"]}
{"id": "entailmentbank_train_3672", "nl": "the student has to kill the weeds so that the rose gets nutrients to grow.", "fol": "", "prediction": ["all x y.((Student(x) & Weeds(y) & Kills(x,y)) -> GetsNutrientsToGrow(x,y))"]}
{"id": "entailmentbank_train_3673", "nl": "a robin eats a cricket.", "fol": "", "prediction": ["all x y.((Robin(x) & Cricket(y)) -> Eats(x,y))"]}
{"id": "entailmentbank_train_3674", "nl": "if an animal eats other animals for food, then the animal will be the predator.", "fol": "", "prediction": ["all x y.((Animal(x) & Animal(y) & EatsForFood(x,y)) -> Predator(x))"]}
{"id": "entailmentbank_train_3675", "nl": "a robin is a predator to the cricket.", "fol": "", "prediction": ["all x.(Robin(x) -> PredatorToCricket(x))"]}
{"id": "entailmentbank_train_3676", "nl": "if an animal is eaten by other animals, then the animal will be the prey.", "fol": "", "prediction": ["all x y.((Animal(x) & Animal(y) & EatenBy(x,y)) -> Prey(x))"]}
{"id": "entailmentbank_train_3677", "nl": "the cricket is a prey to the robin.", "fol": "", "prediction": ["all x.(Cricket(x) -> PreyToRobin(x))"]}
{"id": "entailmentbank_train_3678", "nl": "the robin is the predator and the cricket is the prey.", "fol": "", "prediction": ["(all x.(Robin(x) -> Predator(x)) & all y.(Cricket(y) -> Prey(y)))"]}
{"id": "entailmentbank_train_3679", "nl": "earthworms creating tunnels in soil can loosen the soil.", "fol": "", "prediction": ["all x y.((Earthworm(x) & Tunnel(y) & CreatesInSoil(x,y)) -> LoosensSoil(x))"]}
{"id": "entailmentbank_train_3680", "nl": "the looseness of soil has a positive impact on a plant's roots' growth in that soil.", "fol": "", "prediction": ["all x y.((Soil(x) & Looseness(x)) -> PositiveImpactOnRootsGrowth(y))"]}
{"id": "entailmentbank_train_3681", "nl": "earthworms creating tunnels has a positive impact on the growth of plant roots by loosening the soil.", "fol": "", "prediction": ["all x y.((Earthworm(x) & Tunnel(y) & Creates(x,y)) -> PositiveImpactOnPlantRoots(x))"]}
{"id": "entailmentbank_train_3682", "nl": "an animal requires food.", "fol": "", "prediction": ["all x.(Animal(x) -> RequiresFood(x))"]}
{"id": "entailmentbank_train_3683", "nl": "if a living thing requires something then that something has a positive impact on that living thing.", "fol": "", "prediction": ["all x y.((LivingThing(x) & Requires(x,y)) -> PositiveImpact(x,y))"]}
{"id": "entailmentbank_train_3684", "nl": "an animal requires shelter.", "fol": "", "prediction": ["all x.(Animal(x) -> RequiresShelter(x))"]}
{"id": "entailmentbank_train_3685", "nl": "shelter and food have positive impact on animals.", "fol": "", "prediction": ["all x.((Shelter(x) & Food(x)) -> PositiveImpactOnAnimals(x))"]}
{"id": "entailmentbank_train_3686", "nl": "ants are a kind of animal.", "fol": "", "prediction": ["all x.(Ant(x) -> Animal(x))"]}
{"id": "entailmentbank_train_3687", "nl": "shelter and food have positive impact on ants.", "fol": "", "prediction": ["all x y.((Shelter(x) & Food(y)) -> PositiveImpactOnAnts(x,y))"]}
{"id": "entailmentbank_train_3688", "nl": "the acacia provides shelter and food for ants.", "fol": "", "prediction": ["all x.(Acacia(x) -> (ProvidesShelter(x) & ProvidesFood(x)))"]}
{"id": "entailmentbank_train_3689", "nl": "the acacia providing shelter and food has a positive impact on ants.", "fol": "", "prediction": ["all x.((Acacia(x) & ProvidesShelter(x) & ProvidesFood(x)) -> PositiveImpactOnAnts(x))"]}
{"id": "entailmentbank_train_3690", "nl": "the ants protect the acacia by removing other insects and vines that might harm it.", "fol": "", "prediction": ["all x y.((Ant(x) & Acacia(y)) -> ProtectsByRemovingInsectsAndVines(x,y))"]}
{"id": "entailmentbank_train_3691", "nl": "the ants protecting the acacia has a positive impact on the acacia.", "fol": "", "prediction": ["all x y.((Ant(x) & Acacia(y) & Protects(x,y)) -> PositiveImpactOn(x,y))"]}
{"id": "entailmentbank_train_3692", "nl": "mutualism has a positive impact on both organisms in the relationship.", "fol": "", "prediction": ["all x.(Mutualism(x) -> PositiveImpactOnBothOrganisms(x))"]}
{"id": "entailmentbank_train_3693", "nl": "the relationship between the acacia and ants is mutualism.", "fol": "", "prediction": ["all x y.((Acacia(x) & Ant(y)) -> Mutualism(x,y))"]}
{"id": "entailmentbank_train_3694", "nl": "if two or more carnivores share the same ecosystem then those carnivores may share the same food source.", "fol": "", "prediction": ["all x.((Carnivore(x) & SharesEcosystem(x)) -> MayShareSameFoodSource(x))"]}
{"id": "entailmentbank_train_3695", "nl": "carnivores are a kind of animal.", "fol": "", "prediction": ["all x.(Carnivore(x) -> Animal(x))"]}
{"id": "entailmentbank_train_3696", "nl": "if carnivores share the same ecosystem, then those carnivores may compete for food.", "fol": "", "prediction": ["all x.((Carnivore(x) & ShareEcosystem(x)) -> MayCompeteForFood(x))"]}
{"id": "entailmentbank_train_3697", "nl": "an ecosystem is a kind of habitat.", "fol": "", "prediction": ["all x.(Ecosystem(x) -> Habitat(x))"]}
{"id": "entailmentbank_train_3698", "nl": "if carnivores share the same habitat, then those carnivores may compete for food.", "fol": "", "prediction": ["all x.((Carnivore(x) & SharesSameHabitat(x)) -> MayCompeteForFood(x))"]}
{"id": "entailmentbank_train_3699", "nl": "wolves eat elk.", "fol": "", "prediction": ["all x.(Wolf(x) -> EatsElk(x))"]}
{"id": "entailmentbank_train_3700", "nl": "an elk is a kind of animal.", "fol": "", "prediction": ["all x.(Elk(x) -> Animal(x))"]}
{"id": "entailmentbank_train_3701", "nl": "wolves are predators to elk.", "fol": "", "prediction": ["all x y.((Wolf(x) & Elk(y)) -> Predator(x,y))"]}
{"id": "entailmentbank_train_3702", "nl": "cactus wrens build their nests in cholla cacti to avoid predators.", "fol": "", "prediction": ["all x y.((CactusWren(x) & ChollaCactus(y)) -> BuildsNestsInToAvoidPredators(x,y))"]}
{"id": "entailmentbank_train_3703", "nl": "avoiding predators has a positive impact on the organism.", "fol": "", "prediction": ["all x.((AvoidsPredators(x) & PositiveImpactOnOrganism(x)) -> AvoidsPredators(x))"]}
{"id": "entailmentbank_train_3704", "nl": "cactus wrens building their nests in cholla cacti has a positive impact on themselves.", "fol": "", "prediction": ["all x y.((CactusWren(x) & ChollaCactus(y)) -> PositiveImpactOnself(x,y))"]}
{"id": "entailmentbank_train_3705", "nl": "commensalism is a relationship between two organisms in which one benefits while not harming the other one.", "fol": "", "prediction": ["all x y.((Organism(x) & Organism(y) & Benefits(x,y) & -Harms(x,y)) -> Commensalism(x))"]}
{"id": "entailmentbank_train_3706", "nl": "cactus wrens building nests in cholla cacti does not harm the cholla cacti.", "fol": "", "prediction": ["all x y.((CactusWren(x) & ChollaCactus(y)) -> -Harms(x,y))"]}
{"id": "entailmentbank_train_3707", "nl": "the relationship between cactus wrens and cholla cacti is commensalism.", "fol": "", "prediction": ["all x y.((CactusWren(x) & ChollaCactus(y)) -> Commensalism(x))"]}
{"id": "entailmentbank_train_3708", "nl": "light is a kind of nonliving thing.", "fol": "", "prediction": ["all x.(Light(x) -> NonlivingThing(x))"]}
{"id": "entailmentbank_train_3709", "nl": "sunlight is a nonliving thing.", "fol": "", "prediction": ["all x.(Sunlight(x) -> NonLivingThing(x))"]}
{"id": "entailmentbank_train_3710", "nl": "water is a kind of nonliving thing.", "fol": "", "prediction": ["all x.(Water(x) -> NonlivingThing(x))"]}
{"id": "entailmentbank_train_3711", "nl": "rock is a kind of nonliving thing.", "fol": "", "prediction": ["all x.(Rock(x) -> NonlivingThing(x))"]}
{"id": "entailmentbank_train_3712", "nl": "water and rock and sunlight are nonliving things.", "fol": "", "prediction": ["all x.((Water(x) | Rock(x) | Sunlight(x)) -> NonlivingThing(x))"]}
{"id": "entailmentbank_train_3713", "nl": "a bird and a rabbit are living things.", "fol": "", "prediction": ["all x y.((Bird(x) & Rabbit(y)) -> LivingThing(x))"]}
{"id": "entailmentbank_train_3714", "nl": "a seed is a kind of young plant.", "fol": "", "prediction": ["all x.(Seed(x) -> YoungPlant(x))"]}
{"id": "entailmentbank_train_3715", "nl": "a seed is a kind of living thing.", "fol": "", "prediction": ["all x.(Seed(x) -> LivingThing(x))"]}
{"id": "entailmentbank_train_3716", "nl": "a bird, a rabbit, and a seed are living things.", "fol": "", "prediction": ["all x.((Bird(x) | Rabbit(x) | Seed(x)) -> LivingThing(x))"]}
{"id": "entailmentbank_train_3717", "nl": "nonliving things are not made of cells.", "fol": "", "prediction": ["all x.(Nonliving(x) -> -MadeOfCells(x))"]}
{"id": "entailmentbank_train_3718", "nl": "the difference of living things and nonliving things is that living things are made of cells.", "fol": "", "prediction": ["all x.((LivingThing(x) & NonlivingThing(x)) -> MadeOfCells(x))"]}
{"id": "entailmentbank_train_3719", "nl": "a plant cell is a kind of cell.", "fol": "", "prediction": ["all x.(PlantCell(x) -> Cell(x))"]}
{"id": "entailmentbank_train_3720", "nl": "a cell is very small.", "fol": "", "prediction": ["all x.(Cell(x) -> VerySmall(x))"]}
{"id": "entailmentbank_train_3721", "nl": "a cell is a kind of object.", "fol": "", "prediction": ["all x.(Cell(x) -> Object(x))"]}
{"id": "entailmentbank_train_3722", "nl": "a plant cell is a very small object.", "fol": "", "prediction": ["all x.(PlantCell(x) -> VerySmallObject(x))"]}
{"id": "entailmentbank_train_3723", "nl": "a part of an object is smaller in size than the whole object.", "fol": "", "prediction": ["all x y.((PartOf(x,y) & WholeObject(y)) -> SmallerSize(x,y))"]}
{"id": "entailmentbank_train_3724", "nl": "a part of the plant cell will be smaller than a plant cell.", "fol": "", "prediction": ["all x y.((PlantCell(x) & PlantCell(y)) -> Smaller(x,y))"]}
{"id": "entailmentbank_train_3725", "nl": "a microscope is used to see small things by scientists by making them appear bigger.", "fol": "", "prediction": ["all x y.((Microscope(x) & Scientist(y)) -> (SeesSmallThings(x,y) & MakesAppearBigger(y,x)))"]}
{"id": "entailmentbank_train_3726", "nl": "a microscope can be used to see parts of the plant cell.", "fol": "", "prediction": ["all x.(Microscope(x) -> CanSeePartsOfPlantCell(x))"]}
{"id": "entailmentbank_train_3727", "nl": "as the size of an object appears larger, that object will be seen more easily.", "fol": "", "prediction": ["all x y.((Object(x) & Size(y) & AppearsLarger(x,y)) -> MoreEasilySeen(x,y))"]}
{"id": "entailmentbank_train_3728", "nl": "a microscope can be help make small things easier to see.", "fol": "", "prediction": ["all x.(Microscope(x) -> MakesSmallThingsEasierToSee(x))"]}
{"id": "entailmentbank_train_3729", "nl": "an atom is exceptionally small in size.", "fol": "", "prediction": ["all x.(Atom(x) -> ExceptionallySmallSize(x))"]}
{"id": "entailmentbank_train_3730", "nl": "an electron microscope is used for seeing very small objects by making them appear bigger.", "fol": "", "prediction": ["all x.(ElectronMicroscope(x) -> (SeesSmallObjects(x) & MakesAppearBigger(x)))"]}
{"id": "entailmentbank_train_3731", "nl": "a molecule is exceptionally small in size.", "fol": "", "prediction": ["all x.((Molecule(x) & ExceptionallySmallSize(x)) -> ExceptionallySmallSize(x))"]}
{"id": "entailmentbank_train_3732", "nl": "an electron microscope can be used to see atoms and molecules by making them appear bigger.", "fol": "", "prediction": ["all x.(ElectronMicroscope(x) -> (SeesAtoms(x) & SeesMolecules(x) & MakesAtomsBigger(x)))"]}
{"id": "entailmentbank_train_3733", "nl": "bacteria is small / microscopic in size.", "fol": "", "prediction": ["all x.(Bacteria(x) -> (SmallSize(x) | MicroscopicSize(x)))"]}
{"id": "entailmentbank_train_3734", "nl": "a microscope is used to see microscope things by scientists by making them appear bigger.", "fol": "", "prediction": ["all x y.((Microscope(x) & Scientist(y)) -> (SeesMicroscopeThings(x,y) & MakesMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMakingMaking"]}
{"id": "entailmentbank_train_3735", "nl": "a microscope can be used to see bacteria by making them appear bigger.", "fol": "", "prediction": ["all x.(Microscope(x) -> (SeesBacteria(x) & MakesBacteriaAppearBigger(x)))"]}
{"id": "entailmentbank_train_3736", "nl": "amphibian anatomy is a kind of anatomy.", "fol": "", "prediction": ["all x.(AmphibianAnatomy(x) -> Anatomy(x))"]}
{"id": "entailmentbank_train_3737", "nl": "a dissecting kit is a kind of instrument.", "fol": "", "prediction": ["all x.(DissectingKit(x) -> Instrument(x))"]}
{"id": "entailmentbank_train_3738", "nl": "a dissecting kit is used to study anatomy.", "fol": "", "prediction": ["all x.(DissectingKit(x) -> UsedToStudyAnatomy(x))"]}
{"id": "entailmentbank_train_3739", "nl": "a dissecting kit can be used to study amphibian anatomy.", "fol": "", "prediction": ["all x.((DissectingKit(x) & AmphibianAnatomy(x)) -> CanBeUsedToStudy(x))"]}
{"id": "entailmentbank_train_3740", "nl": "growing bacteria in the lab is used to study the bacteria.", "fol": "", "prediction": ["all x y.((GrowingBacteria(x) & Lab(y)) -> UsedToStudyBacteria(x,y))"]}
{"id": "entailmentbank_train_3741", "nl": "a petri dish in a lab is used to grow bacteria in a controlled setting.", "fol": "", "prediction": ["all x y.((PetriDish(x) & Lab(y) & InLab(x,y)) -> GrowsBacteriaInControlledSetting(x))"]}
{"id": "entailmentbank_train_3742", "nl": "a petri dish can be used to grow and study the bacteria in a controlled setting.", "fol": "", "prediction": ["all x y.((PetriDish(x) & Bacteria(y)) -> GrowAndStudyInControlledSetting(x,y))"]}
{"id": "entailmentbank_train_3743", "nl": "decomposers are a kind of organism.", "fol": "", "prediction": ["all x.(Decomposer(x) -> Organism(x))"]}
{"id": "entailmentbank_train_3744", "nl": "an organism is made of organic matter.", "fol": "", "prediction": ["all x.(Organism(x) -> MadeOfOrganicMatter(x))"]}
{"id": "entailmentbank_train_3745", "nl": "decomposers are made of organic matter.", "fol": "", "prediction": ["all x.(Decomposer(x) -> MadeOfOrganicMatter(x))"]}
{"id": "entailmentbank_train_3746", "nl": "decomposition is when organic matter recycles nutrients from dead organisms to the soil.", "fol": "", "prediction": ["all x y.((OrganicMatter(x) & DeadOrganism(y) & Soil(z)) -> RecyclesNutrients(x,y,z))"]}
{"id": "entailmentbank_train_3747", "nl": "decomposition is a stage in the nutrient recycling process.", "fol": "", "prediction": ["all x.(Decomposition(x) -> NutrientRecycling(x))"]}
{"id": "entailmentbank_train_3748", "nl": "decompostition is a stage where the nutrients are recycled from dead organisms to the soil.", "fol": "", "prediction": ["all x y.((Decompostition(x) & DeadOrganism(y)) -> RecycledNutrientsToSoil(x,y))"]}
{"id": "entailmentbank_train_3749", "nl": "using tools is a learned characteristic.", "fol": "", "prediction": ["all x.((Tools(x) & LearnedCharacteristic(x)) -> LearnedCharacteristic(x))"]}
{"id": "entailmentbank_train_3750", "nl": "an example of using tools is a chimpanzee digging for insects with a stick.", "fol": "", "prediction": ["all x.((Champanzee(x) & DigsWithStick(x)) -> UsesTools(x))"]}
{"id": "entailmentbank_train_3751", "nl": "a chimpanzee digging for insects with a stick is a kind of learned behavior.", "fol": "", "prediction": ["all x.((Chimpanzee(x) & DigsWithStick(x)) -> LearnedBehavior(x))"]}
{"id": "entailmentbank_train_3752", "nl": "skills are learned characteristics / behaviors.", "fol": "", "prediction": ["all x.(Skill(x) -> (LecturedCharacteristics(x) | LearnedBehaviors(x)))"]}
{"id": "entailmentbank_train_3753", "nl": "being able to read is a kind of skill.", "fol": "", "prediction": ["all x.(Read(x) -> Skill(x))"]}
{"id": "entailmentbank_train_3754", "nl": "being able to read is a kind of learned characteristics.", "fol": "", "prediction": ["all x.(Reading(x) -> LearnedCharacteristics(x))"]}
{"id": "entailmentbank_train_3755", "nl": "driving is a kind of skill for operating a vehicle.", "fol": "", "prediction": ["all x.(Driving(x) -> OperatesVehicle(x))"]}
{"id": "entailmentbank_train_3756", "nl": "driving is a kind of learned behaviors.", "fol": "", "prediction": ["all x.(Driving(x) -> LearnedBehavior(x))"]}
{"id": "entailmentbank_train_3757", "nl": "cooking is a kind of skill for preparing food.", "fol": "", "prediction": ["all x.(Cooking(x) -> (Skill(x) & ForPreparingFood(x)))"]}
{"id": "entailmentbank_train_3758", "nl": "cooking is a kind of learned bahaviors.", "fol": "", "prediction": ["all x.(Kitchen(x) -> LearnedBahaavior(x))"]}
{"id": "entailmentbank_train_3759", "nl": "the condition of parts of an organism are acquired characteristics.", "fol": "", "prediction": ["all x.((Condition(x) & PartsOfOrganism(x)) -> AcquiredCharacteristics(x))"]}
{"id": "entailmentbank_train_3760", "nl": "an organism's environment affects the condition of parts of an organism.", "fol": "", "prediction": ["all x y.((Organism(x) & Environment(y)) -> AffectsConditionOfParts(x,y))"]}
{"id": "entailmentbank_train_3761", "nl": "fur is often part of an animal.", "fol": "", "prediction": ["all x.(Fur(x) -> PartOfAnimal(x))"]}
{"id": "entailmentbank_train_3762", "nl": "fur is often a part of a wolf.", "fol": "", "prediction": ["all x.(Fur(x) -> PartOfWolf(x))"]}
{"id": "entailmentbank_train_3763", "nl": "a wolf is a kind of organism.", "fol": "", "prediction": ["all x.(Wolf(x) -> Organism(x))"]}
{"id": "entailmentbank_train_3764", "nl": "the environment of a wolf affects the condition of the fur of the wolf.", "fol": "", "prediction": ["all x y.((Wolf(x) & Environment(y)) -> AffectsConditionOfFur(x,y))"]}
{"id": "entailmentbank_train_3765", "nl": "an example of playing with toys is jumping to catch a ball.", "fol": "", "prediction": ["all x.(PlayingWithToys(x) -> JumpingToCatchBall(x))"]}
{"id": "entailmentbank_train_3766", "nl": "playing with toys is a learned characteristic.", "fol": "", "prediction": ["all x.((Toy(x) & PlayingWith(x,y)) -> LearnedCharacteristic(x))"]}
{"id": "entailmentbank_train_3767", "nl": "jumping to catch a ball is a kind of learned characteristic.", "fol": "", "prediction": ["all x.((JumpingToCatchBall(x) & LearnedCharacteristic(x)) -> LearnedCharacteristic(x))"]}
{"id": "entailmentbank_train_3768", "nl": "some dogs are trained to scratch at the door when they want to go outside.", "fol": "", "prediction": ["exists x.(Dog(x) & TrainedToScratchAtDoor(x))"]}
{"id": "entailmentbank_train_3769", "nl": "if an animal is trained to do something then that something is a learned behavior.", "fol": "", "prediction": ["all x.((Animal(x) & TrainedToDo(x)) -> LearnedBehavior(x))"]}
{"id": "entailmentbank_train_3770", "nl": "a dog scratching at a door to go out is a learned behavior.", "fol": "", "prediction": ["all x y.((Dog(x) & Door(y) & ScratchesAt(x,y)) -> LearnedBehavior(x))"]}
{"id": "entailmentbank_train_3771", "nl": "a utensil is a kind of tool for eating.", "fol": "", "prediction": ["all x.(Utensil(x) -> ToolForEating(x))"]}
{"id": "entailmentbank_train_3772", "nl": "a fork is a kind of utensil.", "fol": "", "prediction": ["all x.(Fork(x) -> Utensil(x))"]}
{"id": "entailmentbank_train_3773", "nl": "a fork is a kind of tool for eating.", "fol": "", "prediction": ["all x.(Fork(x) -> (ToolForEating(x)))"]}
{"id": "entailmentbank_train_3774", "nl": "using a fork to eat is a kind of learned characteristic.", "fol": "", "prediction": ["all x.((Fork(x) & Eats(x)) -> LearnedCharacteristic(x))"]}
{"id": "entailmentbank_train_3775", "nl": "animals laying down on command is an example of animals following order.", "fol": "", "prediction": ["all x.((Animal(x) & LaysDownOnCommand(x)) -> FollowingOrder(x))"]}
{"id": "entailmentbank_train_3776", "nl": "a dog is a kind of animal.", "fol": "", "prediction": ["all x.(Dog(x) -> Animal(x))"]}
{"id": "entailmentbank_train_3777", "nl": "a dog laying down on command is an example of dog following order.", "fol": "", "prediction": ["all x.((Dog(x) & LaysDownOnCommand(x)) -> DogFollowingOrder(x))"]}
{"id": "entailmentbank_train_3778", "nl": "following orders is a learned characteristic.", "fol": "", "prediction": ["all x.((Order(x) & FollowingOrder(x)) -> LearnedCharacteristic(x))"]}
{"id": "entailmentbank_train_3779", "nl": "a dog laying down on command is a learned characteristic.", "fol": "", "prediction": ["all x.((Dog(x) & LaysDownOnCommand(x)) -> LearnedCharacteristic(x))"]}
{"id": "entailmentbank_train_3780", "nl": "animals sitting on command is an example of animals following order.", "fol": "", "prediction": ["all x.((Animal(x) & SittingOnCommand(x)) -> FollowingOrder(x))"]}
{"id": "entailmentbank_train_3781", "nl": "a dog sitting on command is an example of a dog following order.", "fol": "", "prediction": ["all x.((Dog(x) & SittingOnCommand(x)) -> DogFollowingOrder(x))"]}
{"id": "entailmentbank_train_3782", "nl": "a dog sitting on command is a learned characteristic.", "fol": "", "prediction": ["all x.((Dog(x) & SittingOnCommand(x)) -> LearnedCharacteristic(x))"]}
{"id": "entailmentbank_train_3783", "nl": "inherited characteristics are the opposite of learned characteristics / acquired characteristics.", "fol": "", "prediction": ["all x.(EarnedCharacteristics(x) -> (OppositeOfLevedCharacteristics(x) & OppositeOfAcquiredCharacteristics(x)))"]}
{"id": "entailmentbank_train_3784", "nl": "an instinctive behavior is a kind of inherited characteristic / behavioral adaptation.", "fol": "", "prediction": ["all x.(InstinctiveBehavior(x) -> (HasHerrorizedCharacteristic(x) & HasBehavioralAdaptation(x)))"]}
{"id": "entailmentbank_train_3785", "nl": "instinctive behaviors are opposite to learned characteristics.", "fol": "", "prediction": ["all x.(InstinctiveBehavior(x) -> OppositeToLevedCharacteristics(x))"]}
{"id": "entailmentbank_train_3786", "nl": "hunting is a kind of learned behaviors.", "fol": "", "prediction": ["all x.(Hunting(x) -> LearnedBehavior(x))"]}
{"id": "entailmentbank_train_3787", "nl": "hunting is not an instinctive behavior.", "fol": "", "prediction": ["all x.(Hunting(x) -> -InstinctiveBehavior(x))"]}
{"id": "entailmentbank_train_3788", "nl": "inheriting is when an inherited characteristic is passed from parent to offspring by genetics / dna.", "fol": "", "prediction": ["all x y z.((Ethering(x) & Parent(y) & Offspring(z)) -> (PassedByGenetics(x,y,z) & PassedByDna(x,y)))"]}
{"id": "entailmentbank_train_3789", "nl": "acquired characteristics are not inherited from parents.", "fol": "", "prediction": ["all x.(AcquiredCharacteristics(x) -> -HasParents(x))"]}
{"id": "entailmentbank_train_3790", "nl": "personality is an acquired characteristic.", "fol": "", "prediction": ["all x.(Personalist(x) -> AcquiredCharacteristic(x))"]}
{"id": "entailmentbank_train_3791", "nl": "personality is an acquired characteristic that is not inherited from parents.", "fol": "", "prediction": ["all x.(Personalist(x) -> (AcquiredCharacteristic(x) & -HasParents(x)))"]}
{"id": "entailmentbank_train_3792", "nl": "genes are able to determine the inherited characteristics of a living thing.", "fol": "", "prediction": ["all x y.((Gene(x) & LivingThing(y)) -> DeterminesEarnedCharacteristics(x,y))"]}
{"id": "entailmentbank_train_3793", "nl": "genes are unable to determine the acquired characteristics of a living thing.", "fol": "", "prediction": ["all x y.((Gene(x) & LivingThing(y)) -> -DeterminesAcquiredCharacteristics(x,y))"]}
{"id": "entailmentbank_train_3794", "nl": "atheletic ability is a kind of acquired characteristics.", "fol": "", "prediction": ["all x.(AtheleticAbility(x) -> AcquiredCharacteristics(x))"]}
{"id": "entailmentbank_train_3795", "nl": "a person is a kind of living thing.", "fol": "", "prediction": ["all x.(Person(x) -> LivingThing(x))"]}
{"id": "entailmentbank_train_3796", "nl": "genes are unable to determind the atheletic ability of a person.", "fol": "", "prediction": ["all x y.((Gene(x) & Person(y)) -> -DeterminesAtheleticAbility(x,y))"]}
{"id": "entailmentbank_train_3797", "nl": "birds eat butterflies.", "fol": "", "prediction": ["all x y.((Bird(x) & Butterfly(y)) -> Eats(x,y))"]}
{"id": "entailmentbank_train_3798", "nl": "birds are predator to butterflies.", "fol": "", "prediction": ["all x y.((Bird(x) & Butterfly(y)) -> Predator(x,y))"]}
{"id": "entailmentbank_train_3799", "nl": "butterflies are prey to birds.", "fol": "", "prediction": ["all x y.((Butterfly(x) & Bird(y)) -> Prey(x,y))"]}
{"id": "entailmentbank_train_3800", "nl": "birds avoid a specific kind of butterfly.", "fol": "", "prediction": ["all x y.((Bird(x) & Butterfly(y)) -> Avoids(x,y))"]}
{"id": "entailmentbank_train_3801", "nl": "birds avoiding a specific kind of butterfly is an example of a predator avoiding some types of prey.", "fol": "", "prediction": ["all x y.((Bird(x) & Butterfly(y) & Avoids(x,y)) -> Predator(x))"]}
{"id": "entailmentbank_train_3802", "nl": "a predator avoiding some types of prey is a learned behavior.", "fol": "", "prediction": ["all x.((Predator(x) & AvoidsPrey(x)) -> LearnedBehavior(x))"]}
{"id": "entailmentbank_train_3803", "nl": "birds avoiding a specific kind of butterfly is a learned behavior.", "fol": "", "prediction": ["all x.((Bird(x) & AvoidsSpecificButterfly(x)) -> LearnedBehavior(x))"]}
{"id": "entailmentbank_train_3804", "nl": "learned behaviors are learned over the lifetime of the animal.", "fol": "", "prediction": ["all x.(LearnedBehaviors(x) -> LearnedOverLifetime(x))"]}
{"id": "entailmentbank_train_3805", "nl": "birds learn to avoid a specific kind of butterfly over their lifetime.", "fol": "", "prediction": ["all x y.((Bird(x) & Butterfly(y)) -> LearnsToAvoid(x,y))"]}
{"id": "entailmentbank_train_3806", "nl": "inherited characteristics are a kind of hereditary information.", "fol": "", "prediction": ["all x.(EarnedCharacteristics(x) -> HereditaryInformation(x))"]}
{"id": "entailmentbank_train_3807", "nl": "genes is a vehicle for passing inherited characteristics from parent to offspring.", "fol": "", "prediction": ["all x.(Genes(x) -> (PassesEarnedCharacteristics(x) & FromParentToOffspring(x)))"]}
{"id": "entailmentbank_train_3808", "nl": "hereditary information is passed from parents to offspring through genes.", "fol": "", "prediction": ["all x y z.((HereditaryInformation(x) & Parent(y) & Offspring(z)) -> PassedThroughGenes(x,y,z))"]}
{"id": "entailmentbank_train_3809", "nl": "offspring receive genes from their parents through dna.", "fol": "", "prediction": ["all x y.((Offspring(x) & Parent(y)) -> ReceivesGenesThroughDna(x,y))"]}
{"id": "entailmentbank_train_3810", "nl": "inheriting is when an inherited characteristic is passed from parent to offspring by dna.", "fol": "", "prediction": ["all x y z.((Earning(x) & Parent(y) & Offspring(z)) -> (PassedByDna(x,y,z)))"]}
{"id": "entailmentbank_train_3811", "nl": "offspring will have similar dna to their parents.", "fol": "", "prediction": ["all x y.((Offspring(x) & Parent(y)) -> SimilarDna(x,y))"]}
{"id": "entailmentbank_train_3812", "nl": "resemble means similar characteristics.", "fol": "", "prediction": ["all x.(ReresemblesMeansSimilarCharacteristics(x) -> SimilarCharacteristics(x))"]}
{"id": "entailmentbank_train_3813", "nl": "if two organisms share similar dna, then those two organisms will have similar characteristics.", "fol": "", "prediction": ["all x y.((Organism(x) & Organism(y) & SharesSameDna(x,y)) -> SimilarCharacteristics(x,y))"]}
{"id": "entailmentbank_train_3814", "nl": "if two organisms share similar dna, then those two organisms will resemble each other.", "fol": "", "prediction": ["all x y.((Organism(x) & Organism(y) & SharesSameDna(x,y)) -> Reresembles(x,y))"]}
{"id": "entailmentbank_train_3815", "nl": "childern is similar to offspring.", "fol": "", "prediction": ["all x.(Childern(x) -> SimilarToOffspring(x))"]}
{"id": "entailmentbank_train_3816", "nl": "children usually resemble parents.", "fol": "", "prediction": ["all x.(Child(x) -> RemindsParent(x))"]}
{"id": "entailmentbank_train_3817", "nl": "traits can be determined by one pair / many pairs of genes in an organism.", "fol": "", "prediction": ["all x y.((Trait(x) & Gene(y)) -> (DeterminedBy(x,y) & InOrganism(x)))"]}
{"id": "entailmentbank_train_3818", "nl": "humans are a kind of organism.", "fol": "", "prediction": ["all x.(Human(x) -> Organism(x))"]}
{"id": "entailmentbank_train_3819", "nl": "traits can be determined by one or many pairs of genes in human.", "fol": "", "prediction": ["all x.(Trait(x) -> (DeterminedByGenes(x) | DeterminedByGenes(x)))"]}
{"id": "entailmentbank_train_3820", "nl": "different species of organisms have different inherited characteristics.", "fol": "", "prediction": ["all x.(Organism(x) -> DifferentEarnedCharacteristics(x))"]}
{"id": "entailmentbank_train_3821", "nl": "the size of an organism is an inherited characteristic.", "fol": "", "prediction": ["all x.((Organism(x) & Size(x)) -> ErasedCharacteristic(x))"]}
{"id": "entailmentbank_train_3822", "nl": "different species of organisms will have different inherited characteristics in size.", "fol": "", "prediction": ["all x.(Organism(x) -> DifferentEarnedCharacteristics(x))"]}
{"id": "entailmentbank_train_3823", "nl": "different species of organisms have different genes determining the size.", "fol": "", "prediction": ["all x.(Organism(x) -> DifferentGenes(x))"]}
{"id": "entailmentbank_train_3824", "nl": "tigers and household cats are different species.", "fol": "", "prediction": ["all x.(Tiger(x) -> (HouseholdCat(x) & DifferentSpecies(x)))"]}
{"id": "entailmentbank_train_3825", "nl": "genetic difference in tigers and cats determines the difference in size.", "fol": "", "prediction": ["all x y.((Tiger(x) & Cat(y)) -> GeneticDifference(x,y))"]}
{"id": "entailmentbank_train_3826", "nl": "genes are able to determine the species of a living thing.", "fol": "", "prediction": ["all x y.((Gene(x) & LivingThing(y)) -> DeterminesSpecies(x,y))"]}
{"id": "entailmentbank_train_3827", "nl": "toad is a kind of animal.", "fol": "", "prediction": ["all x.(Toad(x) -> Animal(x))"]}
{"id": "entailmentbank_train_3828", "nl": "a snake is a kind of animal.", "fol": "", "prediction": ["all x.(Snake(x) -> Animal(x))"]}
{"id": "entailmentbank_train_3829", "nl": "a lizard is a kind of animal.", "fol": "", "prediction": ["all x.(Lizard(x) -> Animal(x))"]}
{"id": "entailmentbank_train_3830", "nl": "toad, snake, and lizard are different species.", "fol": "", "prediction": ["all x.((Toad(x) | Snake(x) | Lizard(x)) -> DifferentSpecies(x))"]}
{"id": "entailmentbank_train_3831", "nl": "the genes of toad, snake, and lizard determine their species.", "fol": "", "prediction": ["all x.(Genes(x) -> (DeterminesSpecies(x,toad) | DeterminesSpecies(x,snake) | DeterminesSpecies(x,lizard)))"]}
{"id": "entailmentbank_train_3832", "nl": "alleles can determine the inherited characteristics of animals.", "fol": "", "prediction": ["all x.(Allele(x) -> DeterminesEarnedCharacteristics(x))"]}
{"id": "entailmentbank_train_3833", "nl": "alleles can determine the inherited characteristics of human.", "fol": "", "prediction": ["all x.(Allele(x) -> DeterminesEarnedCharacteristics(x))"]}
{"id": "entailmentbank_train_3834", "nl": "blood type is an inherited characteristic.", "fol": "", "prediction": ["all x.(BloodType(x) -> ErasedCharacteristic(x))"]}
{"id": "entailmentbank_train_3835", "nl": "alleles can determine the blood type of human.", "fol": "", "prediction": ["all x.(Allele(x) -> DeterminesBloodType(x))"]}
{"id": "entailmentbank_train_3836", "nl": "translation is when genetic information flows from rna to proteins.", "fol": "", "prediction": ["all x y.((GeneticInformation(x) & Rna(y)) -> FlowsToProteins(x,y))"]}
{"id": "entailmentbank_train_3837", "nl": "transcription is when genetic information flows from dna to rna.", "fol": "", "prediction": ["all x y.((GeneticInformation(x) & Dna(y)) -> FlowsFromToRna(x,y))"]}
{"id": "entailmentbank_train_3838", "nl": "in the central dogma of molecular biology, translation follows transcription.", "fol": "", "prediction": ["all x.((Dogma(x) & CentralDogma(x) & MolecularBiology(x)) -> TranslationFollowsTranslation(x))"]}
{"id": "entailmentbank_train_3839", "nl": "genetic information flows from dna to rna to proteins in central dogma of molecular biology.", "fol": "", "prediction": ["all x y z.((GeneticInformation(x) & Dna(y) & Rna(z)) -> (FlowsFromToProteins(x,y,z) & CentralDogmaOfMolecularBiology(x)))"]}
{"id": "entailmentbank_train_3840", "nl": "a nucleotide contains one nitrogenous base.", "fol": "", "prediction": ["all x.(Nucleotide(x) -> ContainsNitrogenousBase(x))"]}
{"id": "entailmentbank_train_3841", "nl": "a nucleotide is a kind of basic unit of genetic information.", "fol": "", "prediction": ["all x.(Nucleotide(x) -> BasicGeneticInformation(x))"]}
{"id": "entailmentbank_train_3842", "nl": "a basic unit of genetic information can be found in the nitrogenous base.", "fol": "", "prediction": ["all x.((BasicUnitOfGeneticInformation(x) & NitrogenousBase(x)) -> FoundIn(x))"]}
{"id": "entailmentbank_train_3843", "nl": "guanine is a kind of nitrogenous base in dna / rna.", "fol": "", "prediction": ["all x.(Guanine(x) -> NitrogenousBaseInDna(x))"]}
{"id": "entailmentbank_train_3844", "nl": "a basic unit of genetic information can be found in guanine in dna.", "fol": "", "prediction": ["all x y.((Gain(x) & Dna(y)) -> FoundIn(x,y))"]}
{"id": "entailmentbank_train_3845", "nl": "nucleotide is a kind of repeating unit in dna.", "fol": "", "prediction": ["all x.(Nucleotide(x) -> RepeatingUnitInDna(x))"]}
{"id": "entailmentbank_train_3846", "nl": "nucleotide is a kind of monomer.", "fol": "", "prediction": ["all x.(Nucleotide(x) -> Monomer(x))"]}
{"id": "entailmentbank_train_3847", "nl": "a nucleotide is a repeating monomer in dna.", "fol": "", "prediction": ["all x.(Nucleotide(x) -> RepeatingMonomer(x))"]}
{"id": "entailmentbank_train_3848", "nl": "dna is a kind of molecule.", "fol": "", "prediction": ["all x.(Dna(x) -> Molecule(x))"]}
{"id": "entailmentbank_train_3849", "nl": "a nucleotide is a repeating monomer in dna molecule.", "fol": "", "prediction": ["all x.(Nucleotide(x) -> RepeatingMonomer(x))"]}
{"id": "entailmentbank_train_3850", "nl": "rna often are made of one sequence of nucleotides.", "fol": "", "prediction": ["all x.(Rna(x) -> exists y.(NucleotideSequence(y) & MadeOf(x,y)))"]}
{"id": "entailmentbank_train_3851", "nl": "dna are made of two sequences of nucleotides linked together.", "fol": "", "prediction": ["all x.(Dna(x) -> (HasTwoSequencesOfNucleotides(x) & LinkedTogether(x)))"]}
{"id": "entailmentbank_train_3852", "nl": "dna and rna are both made of nucleotides.", "fol": "", "prediction": ["(MadeOfNucleotides(dna) & MadeOfNucleotides(rna))"]}
{"id": "entailmentbank_train_3853", "nl": "nucleotide is a kind of repeating unit in dna and rna.", "fol": "", "prediction": ["all x.(Nucleotide(x) -> (RepeatingUnit(x) & InDna(x) & InRna(x)))"]}
{"id": "entailmentbank_train_3854", "nl": "nucleotides are the repeating subunits of dna and rna.", "fol": "", "prediction": ["all x.(Nucleotide(x) -> (RepeatingSubunit(x,dna) & RepeatingSubunit(x,rna)))"]}
{"id": "entailmentbank_train_3855", "nl": "tall height is a dominant trait in pea plants.", "fol": "", "prediction": ["all x.(TallHeight(x) -> DominantTraitInPeaPlants(x))"]}
{"id": "entailmentbank_train_3856", "nl": "crossing a pure dominant organism with a pure recessive organism causes all their offspring to be heterozygous dominant.", "fol": "", "prediction": ["all x y.((Crossing(x,y) & PureDominantOrganism(y) & PureRecessiveOrganism(y)) -> HeterozygousDominantOffspring(x))"]}
{"id": "entailmentbank_train_3857", "nl": "short height is a recessive trait in pea plants.", "fol": "", "prediction": ["all x.(ShortHeight(x) -> RecessiveTrait(x))"]}
{"id": "entailmentbank_train_3858", "nl": "crossing a pure tall pea plant with a pure short pea plant causes their offspring to be tall pea plants.", "fol": "", "prediction": ["all x y.((Crossing(x,y) & PureTallPeaPlant(x) & PureShortPeaPlant(y)) -> OffspringTallPeaPlant(x))"]}
{"id": "entailmentbank_train_3859", "nl": "red is a kind of color.", "fol": "", "prediction": ["all x.(Red(x) -> Color(x))"]}
{"id": "entailmentbank_train_3860", "nl": "the colors of parts of an organism are inherited characteristics.", "fol": "", "prediction": ["all x.((Color(x) & PartOfOrganism(x)) -> ErasedCharacteristics(x))"]}
{"id": "entailmentbank_train_3861", "nl": "parent plants have red flower and white flower.", "fol": "", "prediction": ["all x.(ParentPlant(x) -> (HasRedFlower(x) & HasWhiteFlower(x)))"]}
{"id": "entailmentbank_train_3862", "nl": "red colored flowers and white colored flowers are different inherited characteristics of the plant.", "fol": "", "prediction": ["all x y.((RedColoredFlower(x) & WhiteColoredFlower(y)) -> DifferentEarnedCharacteristics(x,y))"]}
{"id": "entailmentbank_train_3863", "nl": "offspring plants have pink flowers.", "fol": "", "prediction": ["all x.(OffspringPlant(x) -> PinkFlowers(x))"]}
{"id": "entailmentbank_train_3864", "nl": "pink is a combination of red and white.", "fol": "", "prediction": ["all x.(Pink(x) -> (Red(x) & White(x)))"]}
{"id": "entailmentbank_train_3865", "nl": "the offspring exhibit a combination of the characteristics of the parent plants.", "fol": "", "prediction": ["all x y.((Offspring(x) & ParentPlant(y)) -> ExhibitsCombinationOfCharacteristics(x,y))"]}
{"id": "entailmentbank_train_3866", "nl": "incomplete dominance is when offspring exhibit a combination of a property caused by the genes of its parents.", "fol": "", "prediction": ["all x y.((Offspring(x) & Genes(y) & CausedBy(x,y)) -> IncompleteDominance(x))"]}
{"id": "entailmentbank_train_3867", "nl": "the offspring plant having pink flowers is an example of incomplete dominance.", "fol": "", "prediction": ["all x.((OffspringPlant(x) & PinkFlowers(x)) -> IncompleteDominance(x))"]}
{"id": "entailmentbank_train_3868", "nl": "pea plants are a kind of living thing.", "fol": "", "prediction": ["all x.(PeaPlant(x) -> LivingThing(x))"]}
{"id": "entailmentbank_train_3869", "nl": "crossing two living things with recessive traits causes their offspring to have that recessive trait.", "fol": "", "prediction": ["all x y.((LivingThing(x) & LivingThing(y) & HasRecessiveTreatment(x,y)) -> HasRecessiveTreatment(x,y))"]}
{"id": "entailmentbank_train_3870", "nl": "crossing two short pea plants causes their offspring to be short plants.", "fol": "", "prediction": ["all x y.((ShortPeaPlant(x) & ShortPeaPlant(y)) -> ShortPlant(x,y))"]}
{"id": "entailmentbank_train_3871", "nl": "the growth of antler is an inherited characteristic.", "fol": "", "prediction": ["all x.((Antler(x) & Growth(x)) -> ErasedCharacteristic(x))"]}
{"id": "entailmentbank_train_3872", "nl": "antler growth is dtermined by the genes of a living thing.", "fol": "", "prediction": ["all x y.((Antler(x) & LivingThing(y)) -> DterminedByGenes(x,y))"]}
{"id": "entailmentbank_train_3873", "nl": "white tailed deer is a kind of living thing.", "fol": "", "prediction": ["all x.(WhiteTailedDeer(x) -> LivingThing(x))"]}
{"id": "entailmentbank_train_3874", "nl": "antler growth of white tailed deer is determined by the genes.", "fol": "", "prediction": ["all x.(WhiteTailedDeer(x) -> DeterminedByGenes(x))"]}
{"id": "entailmentbank_train_3875", "nl": "a heterozygous organism contains both dominant and recessive genes.", "fol": "", "prediction": ["all x.(HeterozygousOrganism(x) -> (ContainsDominantGenes(x) & ContainsRecessiveGenes(x)))"]}
{"id": "entailmentbank_train_3876", "nl": "a tay-sachs disease carrier have one recessive tay-sachs gene.", "fol": "", "prediction": ["all x.(TaySachsDiseaseCarrier(x) -> HasRecessiveTaySachsGene(x))"]}
{"id": "entailmentbank_train_3877", "nl": "a tay-sachs disease carrier is heterozygous.", "fol": "", "prediction": ["all x.(TaySachsDiseaseCarrier(x) -> Heterozygous(x))"]}
{"id": "entailmentbank_train_3878", "nl": "crossing two heterozygous dominant organisms causes their offspring to be homozygous recessive of 25% probability.", "fol": "", "prediction": ["all x y.((Crossing(x,y) & HeterozygousDominantOrganism(y)) -> CausesHomozygousRecessive(x,y))"]}
{"id": "entailmentbank_train_3879", "nl": "the offspring of two tay-sachs carriers will have 25% probability to be homozygous recessive in tay-sachs disease.", "fol": "", "prediction": ["all x y.((Offspring(x) & TaySachsCarrier(y) & TaySachsDisease(y)) -> Has25PercentProbabilityToBeHomozygousRecessive(x,y))"]}
{"id": "entailmentbank_train_3880", "nl": "if both recessive genes are present, then the recessive trait will be visible / expressed.", "fol": "", "prediction": ["all x.((RecessiveGene(x) & Present(x)) -> VisibleTrait(x))"]}
{"id": "entailmentbank_train_3881", "nl": "tay-sachs disease is a recessive trait in human.", "fol": "", "prediction": ["all x.(TaySachsDisease(x) -> RecessiveTraitInHuman(x))"]}
{"id": "entailmentbank_train_3882", "nl": "a human with tay-sachs disease will be homozygous recessive.", "fol": "", "prediction": ["all x.((Human(x) & HasTaySachsDisease(x)) -> HomozygousRecessive(x))"]}
{"id": "entailmentbank_train_3883", "nl": "the offspring of two tay-sachs carriers will have 25% probability to have the tay-sachs disease.", "fol": "", "prediction": ["all x y.((Offspring(x) & TaySachsCarrier(y) & Offspring(x,y)) -> 25%ProbabilityToHaveTaySachsDisease(x))"]}
{"id": "entailmentbank_train_3884", "nl": "the other parent is homozygous recessive in earlobe.", "fol": "", "prediction": ["all x.((Parent(x) & HomozygousRecessive(x)) -> Earlobe(x))"]}
{"id": "entailmentbank_train_3885", "nl": "crossing a heterozygous dominant organism with a homozygous recessive organism causes their offspring to be homozygous recessive of 50% probability.", "fol": "", "prediction": ["all x y.((Crossing(x,y) & HeterozygousDominantOrganism(x) & HomozygousRecessiveOrganism(y)) -> CausesHomozygousRecessiveOffspring(x,y))"]}
{"id": "entailmentbank_train_3886", "nl": "one parent is heterozygous dominant in earlobe.", "fol": "", "prediction": ["all x.(HysterozygousDominantInEarlobe(x) -> Parent(x))"]}
{"id": "entailmentbank_train_3887", "nl": "the offspring will have a 50% probability to be homozygous recessive.", "fol": "", "prediction": ["all x.((Offspring(x) & 50%ProbabilityToBeHomozygousRecessive(x)) -> OffspringHas(x,y))"]}
{"id": "entailmentbank_train_3888", "nl": "an attached earlobe is a recessive trait in human.", "fol": "", "prediction": ["all x.((AttachedEarlobe(x) & Human(x)) -> RecessiveTrait(x))"]}
{"id": "entailmentbank_train_3889", "nl": "to have an attached earlobe requires the human to have both recessive genes.", "fol": "", "prediction": ["all x.((Human(x) & AttachedEarlobe(x)) -> RequiresRecessiveGenes(x))"]}
{"id": "entailmentbank_train_3890", "nl": "a homozygous recessive organism contains only recessive genes.", "fol": "", "prediction": ["all x.(HomozygousRecessiveOrganism(x) -> ContainsRecessiveGenes(x))"]}
{"id": "entailmentbank_train_3891", "nl": "to have an attached earlobe requires the human to be homozygous recessive.", "fol": "", "prediction": ["all x.((Human(x) & AttachedEarlobe(x)) -> HomozygousRecessive(x))"]}
{"id": "entailmentbank_train_3892", "nl": "the offspring will have a 50% probability to have an attached earlobe.", "fol": "", "prediction": ["all x.((Offspring(x) & 50%ProbabilityToHaveAttachedEarlobe(x)) -> AttachedEarlobe(x))"]}
{"id": "entailmentbank_train_3893", "nl": "if a heterozygous dominant organism is crossed homozygous dominant organism, then the offspring will have a 0% probability of having recessive trait.", "fol": "", "prediction": ["all x.((HeterozygousDominantOrganism(x) & CrossedHomozygousDominantOrganism(x)) -> 0%ProbabilityOfRecessiveTrait(x))"]}
{"id": "entailmentbank_train_3894", "nl": "a heterozygous black mouse is crossed with homozygous black mouse.", "fol": "", "prediction": ["all x y.((HydrogousBlackMouse(x) & HomozygousBlackMouse(y)) -> Crossed(x,y))"]}
{"id": "entailmentbank_train_3895", "nl": "black fur is a dominant trait in mouse.", "fol": "", "prediction": ["all x.(BlackFur(x) -> DominantTraitInMouse(x))"]}
{"id": "entailmentbank_train_3896", "nl": "the offspring of the mice will have a 0% probability to express recessive trait.", "fol": "", "prediction": ["all x.((Mouse(x) & Offspring(x)) -> 0%ProbabilityToExpressRecessiveTrait(x))"]}
{"id": "entailmentbank_train_3897", "nl": "brown fur is a recessive trait in mouse.", "fol": "", "prediction": ["all x.(BrownFur(x) -> RecessiveTrait(x))"]}
{"id": "entailmentbank_train_3898", "nl": "the offspring of the mice will have a 0% probability to be brown.", "fol": "", "prediction": ["all x.((Mouse(x) & Offspring(x,x)) -> Brown(x))"]}
{"id": "entailmentbank_train_3899", "nl": "short height is usually a recessive trait in plants.", "fol": "", "prediction": ["all x.(ShortHeight(x) -> RecessiveTraitInPlants(x))"]}
{"id": "entailmentbank_train_3900", "nl": "two short plants are crossed.", "fol": "", "prediction": ["all x.(ShortPlant(x) -> Crossed(x))"]}
{"id": "entailmentbank_train_3901", "nl": "two plants with recessive trait of short height are crossed.", "fol": "", "prediction": ["all x.((Plant(x) & RecessiveTrait(x,shortHeight)) -> Crossed(x))"]}
{"id": "entailmentbank_train_3902", "nl": "the offspring of two short plants will all be short plants.", "fol": "", "prediction": ["all x.((Offspring(x) & ShortPlant(x)) -> ShortPlant(x))"]}
{"id": "entailmentbank_train_3903", "nl": "white flower is a recessive trait in snapdragon plant.", "fol": "", "prediction": ["all x.(WhiteFlower(x) -> RecessiveTraitInSnapdragonPlant(x))"]}
{"id": "entailmentbank_train_3904", "nl": "crossing two snapdragon plants with white flower will cause the offspring to have white flowers.", "fol": "", "prediction": ["all x y.((SnapdragonPlant(x) & SnapdragonPlant(y) & WhiteFlower(y)) -> WhiteFlowers(x,y))"]}
{"id": "entailmentbank_train_3905", "nl": "rr means the plant has pure dominant trait.", "fol": "", "prediction": ["all x.(Rr(x) -> PureDominantTrait(x))"]}
{"id": "entailmentbank_train_3906", "nl": "rr means the plant has pure recessive trait.", "fol": "", "prediction": ["all x.(Rr(x) -> PureRecessiveTrait(x))"]}
{"id": "entailmentbank_train_3907", "nl": "a red flowered plant (rr) is crossed with a white flowered plant (rr).", "fol": "", "prediction": ["all x y.((RedFloweredPlant(x) & WhiteFloweredPlant(y)) -> Crossed(x,y))"]}
{"id": "entailmentbank_train_3908", "nl": "a pure dominant red flowered plant is crossed with a pure recessive white flowered plant.", "fol": "", "prediction": ["all x y.((PureDisruptiveRedFloweredPlant(x) & PureRecessiveWhiteFloweredPlant(y)) -> Crossed(x,y))"]}
{"id": "entailmentbank_train_3909", "nl": "if pure dominant organism is crossed a pure recessive organism, then the offspring will have a 100% probability of being heterozygous dominant.", "fol": "", "prediction": ["all x y.((PureDominantOrganism(x) & Crossed(x,y) & PureRecessiveOrganism(y)) -> 100%ProbabilityOfHeterozygousDominantOffspring(x))"]}
{"id": "entailmentbank_train_3910", "nl": "the offspring of the red flowered plant and white flowered plant will 100% be heterozygous dominant.", "fol": "", "prediction": ["all x y.((Offspring(x) & RedFloweredPlant(y) & WhiteFloweredPlant(y)) -> HeterozygousDominant(x,y))"]}
{"id": "entailmentbank_train_3911", "nl": "red flower is a dominant trait in some plant.", "fol": "", "prediction": ["all x.((RedFlower(x) & Plant(y)) -> DominantTrait(x,y))"]}
{"id": "entailmentbank_train_3912", "nl": "a heterozyous dominant organism will express the dominant trait.", "fol": "", "prediction": ["all x.(HeterozyousDominantOrganism(x) -> ExpressesDominantTrait(x))"]}
{"id": "entailmentbank_train_3913", "nl": "the offspring of the red flowered plant and white flowered plant will 100% be red.", "fol": "", "prediction": ["all x y.((Offspring(x) & RedFloweredPlant(y) & WhiteFloweredPlant(y)) -> 100%Red(x))"]}
{"id": "entailmentbank_train_3914", "nl": "a dominant red eye male fruit fly is crossed with a recessive sepia eye female.", "fol": "", "prediction": ["all x y.((FruitFly(x) & RedEye(x) & Female(y)) -> Crossed(x,y))"]}
{"id": "entailmentbank_train_3915", "nl": "the offspring has recessive sepia eyes.", "fol": "", "prediction": ["all x.(Offspring(x) -> HasRecessiveSepiaEyes(x))"]}
{"id": "entailmentbank_train_3916", "nl": "if an offspring has a recessive trait, then each parent has at least one recessive gene.", "fol": "", "prediction": ["all x.((Offspring(x) & HasRecessiveTrait(x)) -> HasRecessiveGene(x))"]}
{"id": "entailmentbank_train_3917", "nl": "each parent fruit fly will have at least one recessive gene.", "fol": "", "prediction": ["all x.(ParentFruitFly(x) -> HasRecessiveGene(x))"]}
{"id": "entailmentbank_train_3918", "nl": "the male fruit fly has dominant red eyes.", "fol": "", "prediction": ["all x.(MaleFruitFly(x) -> HasDominantRedEyes(x))"]}
{"id": "entailmentbank_train_3919", "nl": "if both a dominant and recessive gene are present, the dominant trait will be visible / expressed.", "fol": "", "prediction": ["all x.((DominantGene(x) & RecessiveGene(x)) -> Visible(x))"]}
{"id": "entailmentbank_train_3920", "nl": "the male fruit fly has both dominant and recessive genes.", "fol": "", "prediction": ["all x.(MaleFruitFly(x) -> (DominantGenes(x) & RecessiveGenes(x)))"]}
{"id": "entailmentbank_train_3921", "nl": "the male fruit fly is heterozygous dominant for the trait.", "fol": "", "prediction": ["all x.((MaleFruitFly(x) & Heterozygous(x)) -> DistinctForTrait(x))"]}
{"id": "entailmentbank_train_3922", "nl": "the female fruit fly has recessive sepia eyes.", "fol": "", "prediction": ["all x.(FemaleFruitFly(x) -> HasRecessiveSepiaEyes(x))"]}
{"id": "entailmentbank_train_3923", "nl": "the female fruit fly is homozygous recessive for the trait.", "fol": "", "prediction": ["all x.(FemaleFruitFly(x) -> HomozygousRecessiveForTrait(x))"]}
{"id": "entailmentbank_train_3924", "nl": "the male fruit fly is heterozygous dominant and the female fruit fly is homozygous recessive.", "fol": "", "prediction": ["(all x.(MaleFruitFly(x) -> HeterozygousDisruptive(x)) & all y.(FemaleFruitFly(y) -> HomozygousRecessive(y)))"]}
{"id": "entailmentbank_train_3925", "nl": "inheriting is when an inherited characteristic is copied / is passed from parent to offspring by genetics / dna.", "fol": "", "prediction": ["all x y z.((Earning(x) & Parent(y) & Offspring(z)) -> (CopiesCharacteristic(x,y) & PassesBy(x,z)))"]}
{"id": "entailmentbank_train_3926", "nl": "the color of / coloration of fur is an inherited characteristic.", "fol": "", "prediction": ["all x.((FurColor(x) & Coloration(x)) -> ErasedCharacteristic(x))"]}
{"id": "entailmentbank_train_3927", "nl": "offspring will inherit the color of fur from parents.", "fol": "", "prediction": ["all x y.((Offspring(x) & Parent(y)) -> HeirloomsFurColor(x,y))"]}
{"id": "entailmentbank_train_3928", "nl": "a tiger is a kind of animal.", "fol": "", "prediction": ["all x.(Tiger(x) -> Animal(x))"]}
{"id": "entailmentbank_train_3929", "nl": "striped is a kind of color pattern.", "fol": "", "prediction": ["all x.(Striped(x) -> ColorPattern(x))"]}
{"id": "entailmentbank_train_3930", "nl": "a tiger will inherit striped color pattern of its fur from its parents.", "fol": "", "prediction": ["all x y.((Tiger(x) & Parent(y)) -> InheritsStripedColorPattern(x,y))"]}
{"id": "entailmentbank_train_3931", "nl": "an eagle is a kind of animal.", "fol": "", "prediction": ["all x.(Eagle(x) -> Animal(x))"]}
{"id": "entailmentbank_train_3932", "nl": "eyes are usually part of an animal for seeing.", "fol": "", "prediction": ["all x y.((Animal(x) & Eye(y)) -> PartOf(y,x))"]}
{"id": "entailmentbank_train_3933", "nl": "eyes are part of an eagle for seeing.", "fol": "", "prediction": ["all x.(Eagle(x) -> EyesPartOf(x,Eagle))"]}
{"id": "entailmentbank_train_3934", "nl": "eye color is an inherited characteristic.", "fol": "", "prediction": ["all x.(EarnedCharacteristic(x) -> EyeColor(x))"]}
{"id": "entailmentbank_train_3935", "nl": "the eye color of an eagle is inherited from its parents.", "fol": "", "prediction": ["all x y.((Eagle(x) & EyeColor(y)) -> HeardFromParents(x,y))"]}
{"id": "entailmentbank_train_3936", "nl": "a child is a kind of young human.", "fol": "", "prediction": ["all x.(Child(x) -> YoungHuman(x))"]}
{"id": "entailmentbank_train_3937", "nl": "eyes are a part of a human for seeing.", "fol": "", "prediction": ["all x.(Eyes(x) -> PartOfHuman(x))"]}
{"id": "entailmentbank_train_3938", "nl": "eyes are part of a child for seeing.", "fol": "", "prediction": ["all x y.((Eye(x) & Child(y)) -> PartOf(x,y))"]}
{"id": "entailmentbank_train_3939", "nl": "having blue eyes is an inherited characteristic.", "fol": "", "prediction": ["all x.(BlueEyes(x) -> ErasedCharacteristic(x))"]}
{"id": "entailmentbank_train_3940", "nl": "blue eyes are inherited characteristic.", "fol": "", "prediction": ["all x.(BlueEye(x) -> ErasedCharacteristic(x))"]}
{"id": "entailmentbank_train_3941", "nl": "human is a kind of organism.", "fol": "", "prediction": ["all x.(Human(x) -> Organism(x))"]}
{"id": "entailmentbank_train_3942", "nl": "a human offspring can inherit blue eyes from his parents.", "fol": "", "prediction": ["all x y.((HumanOffspring(x) & Parent(y)) -> CanEmbearBlueEyes(x,y))"]}
{"id": "entailmentbank_train_3943", "nl": "spotted is a kind of color pattern.", "fol": "", "prediction": ["all x.(Spotted(x) -> ColorPattern(x))"]}
{"id": "entailmentbank_train_3944", "nl": "a dog will inherit spotted fur from its parents.", "fol": "", "prediction": ["all x y.((Dog(x) & SpottedFur(y)) -> WillEmbear(x,y))"]}
{"id": "entailmentbank_train_3945", "nl": "an example of a reproductive behavior is salmon returning to their birthplace to lay their eggs.", "fol": "", "prediction": ["all x.((Salmon(x) & ReturnsToBirthplace(x) & LaysEggs(x)) -> ReproductiveBehavior(x))"]}
{"id": "entailmentbank_train_3946", "nl": "reproductive behavior is a kind of instinct.", "fol": "", "prediction": ["all x.(ReproductiveBehavior(x) -> Instinct(x))"]}
{"id": "entailmentbank_train_3947", "nl": "salmon returning to their birthplace to lay their eggs is a kind of instinct.", "fol": "", "prediction": ["all x.((Salmon(x) & ReturnsToBirthplace(x) & LaysEggs(x)) -> Instinct(x))"]}
{"id": "entailmentbank_train_3948", "nl": "the shape of body parts is an inherited characteristic.", "fol": "", "prediction": ["all x.((BodyParts(x) & Shape(x)) -> ErasedCharacteristic(x))"]}
{"id": "entailmentbank_train_3949", "nl": "an earlobe is a kind of body part.", "fol": "", "prediction": ["all x.(Earlobe(x) -> BodyPart(x))"]}
{"id": "entailmentbank_train_3950", "nl": "the shape of the earlobe is an inherited characteristic.", "fol": "", "prediction": ["all x.(EarlobeShape(x) -> ErasedCharacteristic(x))"]}
{"id": "entailmentbank_train_3951", "nl": "children will inheirt the shape of the earlobe from his their parents.", "fol": "", "prediction": ["all x y.((Child(x) & Parent(y)) -> InheirtsEarlobeShape(x,y))"]}
{"id": "entailmentbank_train_3952", "nl": "an animal knows how to do instinctive behaviors when it is born.", "fol": "", "prediction": ["all x.((Animal(x) & Born(x)) -> KnowsHowToDoInstinctiveBehaviors(x))"]}
{"id": "entailmentbank_train_3953", "nl": "a newborn kangaroo knows how to crawl into its mother's pouch to drink milk.", "fol": "", "prediction": ["all x.((NatureKangaroo(x) & CrawlsIntoMotherPouch(x)) -> DrinksMilk(x))"]}
{"id": "entailmentbank_train_3954", "nl": "an example of an instinct is the kangaroo's ability to crawl into its mother's pouch to drink milk.", "fol": "", "prediction": ["all x.(Instinct(x) -> (Kangaroo(x) & CrawlsIntoMothersPouch(x) & DrinksMilk(x)))"]}
{"id": "entailmentbank_train_3955", "nl": "green sea turtles migrate to reproduce.", "fol": "", "prediction": ["all x.(GreenSeaTurtle(x) -> MigratesToReproduce(x))"]}
{"id": "entailmentbank_train_3956", "nl": "green sea turtles migrating to reproduce is an instinctive behavior.", "fol": "", "prediction": ["all x.((GreenSeaTurtle(x) & MigratesToReproduce(x)) -> InstinctiveBehavior(x))"]}
{"id": "entailmentbank_train_3957", "nl": "height is an inherited characteristic.", "fol": "", "prediction": ["all x.(Height(x) -> ErasedCharacteristic(x))"]}
{"id": "entailmentbank_train_3958", "nl": "offspring can inherit height from their parents.", "fol": "", "prediction": ["all x y.((Offspring(x) & Parent(y)) -> CanHead(x,y))"]}
{"id": "entailmentbank_train_3959", "nl": "the length of the hair of an animal is an acquired characteristic.", "fol": "", "prediction": ["all x.((Animal(x) & HairLength(x)) -> AcquiredCharacteristic(x))"]}
{"id": "entailmentbank_train_3960", "nl": "the hair length of a human is an acquired characteristic.", "fol": "", "prediction": ["all x.(HairLength(x) -> AcquiredCharacteristic(x))"]}
{"id": "entailmentbank_train_3961", "nl": "a nose is a part of a body.", "fol": "", "prediction": ["all x.(Nase(x) -> PartOfBody(x))"]}
{"id": "entailmentbank_train_3962", "nl": "nose shape is a kind of inherited characteristic.", "fol": "", "prediction": ["all x.(NasalShape(x) -> ErasedCharacteristic(x))"]}
{"id": "entailmentbank_train_3963", "nl": "a robin is a kind of bird.", "fol": "", "prediction": ["all x.(Robin(x) -> Bird(x))"]}
{"id": "entailmentbank_train_3964", "nl": "a robin building a nest is an example of an inherited behavior.", "fol": "", "prediction": ["all x y.((Robin(x) & Nest(y) & Building(x,y)) -> ErasedBehavior(x))"]}
{"id": "entailmentbank_train_3965", "nl": "animals produce offspring.", "fol": "", "prediction": ["all x.(Animal(x) -> ProducesOffspring(x))"]}
{"id": "entailmentbank_train_3966", "nl": "inheriting is when an inherited characteristic is passed from parent to offspring.", "fol": "", "prediction": ["all x y.((Earning(x) & Parent(y)) -> PassedCharacteristic(x,y))"]}
{"id": "entailmentbank_train_3967", "nl": "dogs will inherit inherited characteristics from their parents.", "fol": "", "prediction": ["all x y.((Dog(x) & Parent(y)) -> HeirloomsCharacteristics(x,y))"]}
{"id": "entailmentbank_train_3968", "nl": "dogs will have the same coloration of fur as their parents.", "fol": "", "prediction": ["all x y.((Dog(x) & Parent(y)) -> SameColorationOfFur(x,y))"]}
{"id": "entailmentbank_train_3969", "nl": "coloration means color and pattern.", "fol": "", "prediction": ["all x.(Coloration(x) -> (Color(x) & Pattern(x)))"]}
{"id": "entailmentbank_train_3970", "nl": "dogs will inherit the color and patter of their parents' fur.", "fol": "", "prediction": ["all x y.((Dog(x) & Parent(y)) -> (InheritColor(x,y) & InheritPatter(x,y)))"]}
{"id": "entailmentbank_train_3971", "nl": "a chimpanzee is a kind of animal.", "fol": "", "prediction": ["all x.(Chimpanzee(x) -> Animal(x))"]}
{"id": "entailmentbank_train_3972", "nl": "chimpanzees will inherit inherited characteristics from their parents.", "fol": "", "prediction": ["all x.(Chimpanzee(x) -> inheritsEarnedCharacteristics(x))"]}
{"id": "entailmentbank_train_3973", "nl": "fur color is a kind of inherited characteristic.", "fol": "", "prediction": ["all x.(FurColor(x) -> ErasedCharacteristic(x))"]}
{"id": "entailmentbank_train_3974", "nl": "a baby chimpanzee will inherit fur color from its parents.", "fol": "", "prediction": ["all x.(Champanzee(x) -> (Baby(x) & HasFurColor(x)))"]}
{"id": "entailmentbank_train_3975", "nl": "lion eat zebras.", "fol": "", "prediction": ["all x y.((Lion(x) & Zebra(y)) -> Eats(x,y))"]}
{"id": "entailmentbank_train_3976", "nl": "if an animal eats another animal, then the animal that is eaten is on the other animal's diet.", "fol": "", "prediction": ["all x y.((Animal(x) & Animal(y) & Eats(x,y)) -> OnDiet(y,z))"]}
{"id": "entailmentbank_train_3977", "nl": "zebras are on lions' diet.", "fol": "", "prediction": ["all x.(Zebra(x) -> OnLionsDiet(x))"]}
{"id": "entailmentbank_train_3978", "nl": "the diet of an animal is an inherited characteristic.", "fol": "", "prediction": ["all x.((Animal(x) & Diet(x)) -> ErasedCharacteristic(x))"]}
{"id": "entailmentbank_train_3979", "nl": "lions eating zebras is an example of inherited trait.", "fol": "", "prediction": ["all x y.((Lion(x) & Zebra(y) & Eats(x,y)) -> ErasedTrait(x))"]}
{"id": "entailmentbank_train_3980", "nl": "the shape of a plant's leaves is an inherited characteristic.", "fol": "", "prediction": ["all x.((Plant(x) & LeavesShape(x)) -> ErasedCharacteristic(x))"]}
{"id": "entailmentbank_train_3981", "nl": "skin is usually a part of an organism.", "fol": "", "prediction": ["all x.(Skin(x) -> PartOfOrganism(x))"]}
{"id": "entailmentbank_train_3982", "nl": "the color of the skin of an organism is inherited characteristics.", "fol": "", "prediction": ["all x.((Skin(x) & Organism(x)) -> HasEarnedCharacteristics(x))"]}
{"id": "entailmentbank_train_3983", "nl": "a tomato plant is a kind of plant.", "fol": "", "prediction": ["all x.(TomatoPlant(x) -> Plant(x))"]}
{"id": "entailmentbank_train_3984", "nl": "a tomato is a kind of organism.", "fol": "", "prediction": ["all x.(Tomato(x) -> Organism(x))"]}
{"id": "entailmentbank_train_3985", "nl": "the color of the skin of a tomato is an inherited characteristics.", "fol": "", "prediction": ["all x.((SkinColor(x) & Tomato(x)) -> ErasedCharacteristics(x))"]}
{"id": "entailmentbank_train_3986", "nl": "inherited characteristics can change over several generations.", "fol": "", "prediction": ["all x.(EarnedCharacteristicsChange(x) -> CanChangeOverGenerations(x))"]}
{"id": "entailmentbank_train_3987", "nl": "the color of the skin of a tomato can change over several generations.", "fol": "", "prediction": ["all x y.((Tomato(x) & Skin(y)) -> CanChangeOverGenerations(x,y))"]}
{"id": "entailmentbank_train_3988", "nl": "inherited trait is similar to inherited characteristic.", "fol": "", "prediction": ["all x.(EarnedTrait(x) -> SimilarToEarnedCharacteristic(x))"]}
{"id": "entailmentbank_train_3989", "nl": "being deciduous is an inherited trait.", "fol": "", "prediction": ["all x.(Deciduous(x) -> ErasedTrait(x))"]}
{"id": "entailmentbank_train_3990", "nl": "offspring will inherit the inherited trait of being deciduous from their parents.", "fol": "", "prediction": ["all x.(Offspring(x) -> (DeciduousFromParents(x) & HasEarnedTrait(x)))"]}
{"id": "entailmentbank_train_3991", "nl": "a buckeye tree is a kind of deciduous tree.", "fol": "", "prediction": ["all x.(BuckeyeTree(x) -> DeciduousTree(x))"]}
{"id": "entailmentbank_train_3992", "nl": "the offspring of the buckeye tree will inherit the inherited trait of being deciduous from their parents.", "fol": "", "prediction": ["all x y.((Offspring(x) & BuckeyeTree(y)) -> (EmbeddedTrait(x,y) & DeciduousFromParents(x,y)))"]}
{"id": "entailmentbank_train_3993", "nl": "a deciduous tree's leaves usually change color in the autumn season.", "fol": "", "prediction": ["all x.(DeciduousTree(x) -> ChangesLeavesColorInAutumn(x))"]}
{"id": "entailmentbank_train_3994", "nl": "the offspring of the buckeye trees will inherit the trait of changing color in the autumn season.", "fol": "", "prediction": ["all x.((Offspring(x) & BuckeyeTree(x)) -> ChangesColorInAutumn(x))"]}
{"id": "entailmentbank_train_3995", "nl": "sound of voice is an inherited characteristic.", "fol": "", "prediction": ["all x.((SoundOfVoice(x) & ErasedCharacteristic(x)) -> HasSonOfVoice(x))"]}
{"id": "entailmentbank_train_3996", "nl": "inheriting is when an inherited characteristic from parent to offspring.", "fol": "", "prediction": ["all x.((Parent(x) & Offspring(x)) -> HearkensCharacteristic(x))"]}
{"id": "entailmentbank_train_3997", "nl": "offspring can inherit the sound of voice from their parents.", "fol": "", "prediction": ["all x y.((Offspring(x) & Parent(y)) -> CanHearSoundOfVoice(x,y))"]}
{"id": "entailmentbank_train_3998", "nl": "the offspring of a human can inherit the sound of voice from their parents.", "fol": "", "prediction": ["all x y.((Offspring(x) & Human(y)) -> CanHearSoundOfVoice(x,y))"]}
{"id": "entailmentbank_train_3999", "nl": "a son is a kind of male offspring.", "fol": "", "prediction": ["all x.(Son(x) -> MaleOffspring(x))"]}
{"id": "entailmentbank_train_4000", "nl": "a father is a kind of male parent.", "fol": "", "prediction": ["all x.(Parent(x) -> Male(x))"]}
{"id": "entailmentbank_train_4001", "nl": "a son can inherit the sound of voice from his father.", "fol": "", "prediction": ["all x y.((Son(x) & Father(y)) -> CanEarnSoundOfVoice(x,y))"]}
{"id": "entailmentbank_train_4002", "nl": "offspring receive genes from their parents through sexual reproduction.", "fol": "", "prediction": ["all x y.((Offspring(x) & Parent(y)) -> ReceivesGenesThroughSexualReproduction(x,y))"]}
{"id": "entailmentbank_train_4003", "nl": "offspring receive genes for inherited characteristics from parents through sexual reproduction.", "fol": "", "prediction": ["all x y.((Offspring(x) & Parent(y)) -> ReceivesGenesForEarnedCharacteristics(x,y))"]}
{"id": "entailmentbank_train_4004", "nl": "ear is a kind of body part.", "fol": "", "prediction": ["all x.(Ear(x) -> BodyPart(x))"]}
{"id": "entailmentbank_train_4005", "nl": "ear shape is a kind of inherited characteristic.", "fol": "", "prediction": ["all x.(EarShape(x) -> ErasedCharacteristic(x))"]}
{"id": "entailmentbank_train_4006", "nl": "nose is a kind of body part.", "fol": "", "prediction": ["all x.(Nase(x) -> BodyPart(x))"]}
{"id": "entailmentbank_train_4007", "nl": "hair is usually a part of animals.", "fol": "", "prediction": ["all x.(Hair(x) -> PartOfAnimals(x))"]}
{"id": "entailmentbank_train_4008", "nl": "animals are organisms.", "fol": "", "prediction": ["all x.(Animal(x) -> Organism(x))"]}
{"id": "entailmentbank_train_4009", "nl": "hair color is a kind of inherited characteristics.", "fol": "", "prediction": ["all x.(HairColor(x) -> HasEarnedCharacteristics(x))"]}
{"id": "entailmentbank_train_4010", "nl": "offspring can receive the ear shape, nose shape, and hair color from parents through sexaul reproduction.", "fol": "", "prediction": ["all x y.((Offspring(x) & Parent(y)) -> (ReceivesEarShape(x,y) & ReceivesNasalShape(x,y) & ReceivesHairColor(x,y)))"]}
{"id": "entailmentbank_train_4011", "nl": "cow is a kind of organism.", "fol": "", "prediction": ["all x.(Cow(x) -> Organism(x))"]}
{"id": "entailmentbank_train_4012", "nl": "information in an organism's chromosomes cause genetic traits to be passed down to that organism's offspring.", "fol": "", "prediction": ["all x y.((Organism(x) & Organism(y)) -> (InformationInChromosomes(x,y) & GeneticTreatmentsPassedToOffspring(x,y)))"]}
{"id": "entailmentbank_train_4013", "nl": "information in a cow's chromosomes cause genetic traits to be passed down to the offspring.", "fol": "", "prediction": ["all x y.((Cow(x) & ChromosomeInformation(y)) -> GeneticTreatmentsPassedDownToOffspring(x,y))"]}
{"id": "entailmentbank_train_4014", "nl": "producing large quantities of milk is an inherited trait for cows.", "fol": "", "prediction": ["all x.((Cow(x) & ProducesLargeMilk(x)) -> ErasedTrait(x))"]}
{"id": "entailmentbank_train_4015", "nl": "inherited trait is a kind of genetic trait.", "fol": "", "prediction": ["all x.(EarnedTrait(x) -> GeneticTrait(x))"]}
{"id": "entailmentbank_train_4016", "nl": "producing large quantities of milk in a genetic trait for cows.", "fol": "", "prediction": ["all x y.((Cow(x) & Milk(y)) -> ProducesLargeQuantities(x,y))"]}
{"id": "entailmentbank_train_4017", "nl": "the trait of producing large quantities of milk is passed down through the information in the cow's chromosomes.", "fol": "", "prediction": ["all x y.((Cow(x) & Chromosome(y)) -> ProducesLargeQuantitiesOfMilk(x,y))"]}
{"id": "entailmentbank_train_4018", "nl": "siberian tigers only have female tigers in the species.", "fol": "", "prediction": ["all x.(SiberianTiger(x) -> (HasFemaleTiger(x) & InSpecies(x)))"]}
{"id": "entailmentbank_train_4019", "nl": "two females cannot usually reproduce with each other.", "fol": "", "prediction": ["all x.(Female(x) -> -Reproduce(x))"]}
{"id": "entailmentbank_train_4020", "nl": "all the siberian tigers in the species cannot reproduce.", "fol": "", "prediction": ["all x.(SiberianTiger(x) -> -Reproduce(x))"]}
{"id": "entailmentbank_train_4021", "nl": "if all members of a species cannot produce offspring then that species will likely become extinct.", "fol": "", "prediction": ["all x.((Species(x) & -ProducesOffspring(x)) -> LikelyExtinct(x))"]}
{"id": "entailmentbank_train_4022", "nl": "siberian tigers are likely to go extinct.", "fol": "", "prediction": ["all x.(SiberianTiger(x) -> LikelyToGoExtinct(x))"]}
{"id": "entailmentbank_train_4023", "nl": "genetic variation in offspring has a positive impact on an offspring's survival.", "fol": "", "prediction": ["all x y.((Offspring(x) & Offspring(y)) -> PositiveImpactOnSurvival(x,y))"]}
{"id": "entailmentbank_train_4024", "nl": "sexual reproduction is a source of genetic variatio in offspring.", "fol": "", "prediction": ["all x.((SexualReproduction(x) & GeneticVariation(x)) -> InOffspring(x))"]}
{"id": "entailmentbank_train_4025", "nl": "asexual reproduction is not a source of genetic variation in offspring.", "fol": "", "prediction": ["all x.(AsexualReproduction(x) -> -GeneticVariationSource(x))"]}
{"id": "entailmentbank_train_4026", "nl": "sexual reproduction has a positive impact on the genetic variation in offspring comparing to asexual reproduction.", "fol": "", "prediction": ["all x y.((SexualReproduction(x) & AsexualReproduction(y)) -> PositiveImpactOnGeneticVariation(x,y))"]}
{"id": "entailmentbank_train_4027", "nl": "sexual reproduction is a kind of reproduction.", "fol": "", "prediction": ["all x.(SexualReproduction(x) -> Reproduction(x))"]}
{"id": "entailmentbank_train_4028", "nl": "reproduction produces / produce offspring.", "fol": "", "prediction": ["all x.(ReproductionProducesOffspring(x) -> ProducesOffspring(x))"]}
{"id": "entailmentbank_train_4029", "nl": "sexual reproduction produces offspring.", "fol": "", "prediction": ["all x.(SexualReproduction(x) -> ProducesOffspring(x))"]}
{"id": "entailmentbank_train_4030", "nl": "genes are a kind of genetic material.", "fol": "", "prediction": ["all x.(Gene(x) -> GeneticMaterial(x))"]}
{"id": "entailmentbank_train_4031", "nl": "sexual reproduction produces offspring with genetic material from both parents.", "fol": "", "prediction": ["all x y.((SexualReproduction(x) & Offspring(y) & GeneticMaterial(y)) -> Produces(x,y))"]}
{"id": "entailmentbank_train_4032", "nl": "pollination is the fertilization stage in plants reproduction.", "fol": "", "prediction": ["all x.(Pollination(x) -> FertilizationStage(x))"]}
{"id": "entailmentbank_train_4033", "nl": "pollination is a stage in the sexual reproduction process of plants.", "fol": "", "prediction": ["all x.(Pollination(x) -> (StageInSexualReproduction(x) & Plant(x)))"]}
{"id": "entailmentbank_train_4034", "nl": "seeds are produced in the stage of pollination in plants reproduction.", "fol": "", "prediction": ["all x y.((Seed(x) & PlantReproduction(y)) -> ProducedInStageOfPollination(x,y))"]}
{"id": "entailmentbank_train_4035", "nl": "seeds are produced in the sexual reproduction process of plants.", "fol": "", "prediction": ["all x y.((Seed(x) & Plant(y)) -> ProducedInSexualReproduction(x,y))"]}
{"id": "entailmentbank_train_4036", "nl": "a flower produces seeds.", "fol": "", "prediction": ["all x.(Flower(x) -> ProducesSeeds(x))"]}
{"id": "entailmentbank_train_4037", "nl": "a flower producing seeds is a stage in the sexual reproduction process of plants.", "fol": "", "prediction": ["all x y.((Flower(x) & Plant(y) & ProducesSeeds(x,y)) -> StageInSexualReproduction(x,y))"]}
{"id": "entailmentbank_train_4038", "nl": "a mother is a kind of female parent.", "fol": "", "prediction": ["all x.(Mother(x) -> FemaleParent(x))"]}
{"id": "entailmentbank_train_4039", "nl": "offspring receives half of the genes from each parent.", "fol": "", "prediction": ["all x y.((Offspring(x) & Parent(y)) -> ReceivesHalfOfGenes(x,y))"]}
{"id": "entailmentbank_train_4040", "nl": "a son will receive half of the genes from his mother and his father.", "fol": "", "prediction": ["all x y.((Son(x) & Mother(y) & Father(z)) -> ReceivesHalfGenes(x,y,z))"]}
{"id": "entailmentbank_train_4041", "nl": "a son will receive traits determined by the genes of his mother and the genes of his father.", "fol": "", "prediction": ["all x y.((Son(x) & Son(y)) -> (ReceivesTraits(x,y) & DeterminedByGenes(x,y)))"]}
{"id": "entailmentbank_train_4042", "nl": "the candle is burning.", "fol": "", "prediction": ["all x.(Candle(x) -> Burning(x))"]}
{"id": "entailmentbank_train_4043", "nl": "fire causes the candle to burn.", "fol": "", "prediction": ["all x y.((Fire(x) & Candle(y)) -> CausesToBurn(x,y))"]}
{"id": "entailmentbank_train_4044", "nl": "fire is a kind of chemical reaction.", "fol": "", "prediction": ["all x.(Fire(x) -> ChemicalReaction(x))"]}
{"id": "entailmentbank_train_4045", "nl": "the candle is undergoing a chemical reaction.", "fol": "", "prediction": ["all x.(Candle(x) -> UndergoesChemicalReaction(x))"]}
{"id": "entailmentbank_train_4046", "nl": "chemical reactions cause new substances to form.", "fol": "", "prediction": ["all x.(ChemicalReaction(x) -> CausesNewSubstances(x))"]}
{"id": "entailmentbank_train_4047", "nl": "a new substance is being formed in this process.", "fol": "", "prediction": ["all x y.((Substance(x) & Process(y)) -> FormsIn(x,y))"]}
{"id": "entailmentbank_train_4048", "nl": "popping popcorns requires adding heat to the corns.", "fol": "", "prediction": ["all x.(PoppingPopcorns(x) -> AddsHeatToCorns(x))"]}
{"id": "entailmentbank_train_4049", "nl": "adding heat to an object sometimes causes chemical reactions.", "fol": "", "prediction": ["all x y.((Addition(x,y) & Heat(y)) -> CausesChemicalReactions(x,y))"]}
{"id": "entailmentbank_train_4050", "nl": "popping popcorn will cause chemical reactions to the corns.", "fol": "", "prediction": ["all x y.((PoppingPopcorn(x) & Corn(y)) -> CausesChemicalReactions(x,y))"]}
{"id": "entailmentbank_train_4051", "nl": "chemical reactions cause different substances to form.", "fol": "", "prediction": ["all x y.((ChemicalReaction(x) & Substance(y)) -> CausesFormation(x,y))"]}
{"id": "entailmentbank_train_4052", "nl": "popping popcorn will cause a different substance to form.", "fol": "", "prediction": ["all x.(PoppingPopcorn(x) -> CausesDifferentSubstanceToForm(x))"]}
{"id": "entailmentbank_train_4053", "nl": "different substances have different chemical properties.", "fol": "", "prediction": ["all x.(Substance(x) -> DifferentChemicalProperties(x))"]}
{"id": "entailmentbank_train_4054", "nl": "popping popcorn will cause a different substance with different chemical properties to form.", "fol": "", "prediction": ["all x y.((PoppingPopcorn(x) & Substance(y) & DifferentChemicalProperties(y)) -> CausesFormation(x,y))"]}
{"id": "entailmentbank_train_4055", "nl": "lighting a candle is using fire to cause the candle to burn.", "fol": "", "prediction": ["all x y.((Candle(x) & Candle(y)) -> UsesFireToCauseBurn(x,y))"]}
{"id": "entailmentbank_train_4056", "nl": "lighting a candle causes the candle to undergo chemical reaction.", "fol": "", "prediction": ["all x y.((Candle(x) & Candle(y)) -> UndergoesChemicalReaction(y,x))"]}
{"id": "entailmentbank_train_4057", "nl": "chemical change is a kind of chemical reaction.", "fol": "", "prediction": ["all x.(ChemicalChange(x) -> ChemicalReaction(x))"]}
{"id": "entailmentbank_train_4058", "nl": "lighting a candle causes the candle to undergo chemical change.", "fol": "", "prediction": ["all x y.((Candle(x) & Candle(y)) -> UndergoesChemicalChange(y,x))"]}
{"id": "entailmentbank_train_4059", "nl": "fire causes burning on objects.", "fol": "", "prediction": ["all x y.((Fire(x) & Object(y)) -> CausesBurning(x,y))"]}
{"id": "entailmentbank_train_4060", "nl": "fire can cause a leaf to burn.", "fol": "", "prediction": ["all x y.((Fire(x) & Leaf(y)) -> CanCauseBurn(x,y))"]}
{"id": "entailmentbank_train_4061", "nl": "burning a leaf with fire is a kind of chemical reaction.", "fol": "", "prediction": ["all x y.((BurningLeavesWithFire(x) & Leaf(y)) -> ChemicalReaction(x))"]}
{"id": "entailmentbank_train_4062", "nl": "chemical reactions cause chemical change.", "fol": "", "prediction": ["all x.(ChemicalReaction(x) -> CausesChemicalChange(x))"]}
{"id": "entailmentbank_train_4063", "nl": "burning a leaf with fire causes a chemical change.", "fol": "", "prediction": ["all x y.((BurningLeavesWithFire(x) & Leaf(y)) -> ChemicalChange(x,y))"]}
{"id": "entailmentbank_train_4064", "nl": "adding heat to food usually causes chemical change.", "fol": "", "prediction": ["all x.(AdditionOfHeat(x) -> CausesChemicalChange(x))"]}
{"id": "entailmentbank_train_4065", "nl": "cooking causes a chemical reaction.", "fol": "", "prediction": ["all x.(Cooking(x) -> CausesChemicalReaction(x))"]}
{"id": "entailmentbank_train_4066", "nl": "baking is a kind of cooking.", "fol": "", "prediction": ["all x.(Baking(x) -> Cooking(x))"]}
{"id": "entailmentbank_train_4067", "nl": "baking causes a chemical reaction.", "fol": "", "prediction": ["all x.(Baking(x) -> CausesChemicalReaction(x))"]}
{"id": "entailmentbank_train_4068", "nl": "the dough is baked to form the crust of a pizza.", "fol": "", "prediction": ["all x y.((Dough(x) & Pizza(y)) -> BakedToFormCrust(x,y))"]}
{"id": "entailmentbank_train_4069", "nl": "baking the dough to form the crust causes a chemical reaction.", "fol": "", "prediction": ["all x y.((BakingDough(x) & FormingCrust(y)) -> ChemicalReaction(x))"]}
{"id": "entailmentbank_train_4070", "nl": "baking the dough to form the crust causes a chemical change.", "fol": "", "prediction": ["all x y.((BakingDough(x) & FormingCrust(y)) -> ChemicalChange(x))"]}
{"id": "entailmentbank_train_4071", "nl": "a car fender is sometimes made of metal.", "fol": "", "prediction": ["all x.(CarFender(x) -> MadeOfMetal(x))"]}
{"id": "entailmentbank_train_4072", "nl": "metal rusts.", "fol": "", "prediction": ["all x.(MetalRust(x) -> Rusts(x))"]}
{"id": "entailmentbank_train_4073", "nl": "a car fender might rust.", "fol": "", "prediction": ["all x.(CarFender(x) -> MightRose(x))"]}
{"id": "entailmentbank_train_4074", "nl": "rust forming is a kind of chemical change.", "fol": "", "prediction": ["all x.(RustForming(x) -> ChemicalChange(x))"]}
{"id": "entailmentbank_train_4075", "nl": "a rusting car fender is an example of chemical change.", "fol": "", "prediction": ["all x.((RostingCarFender(x) & ChemicalChange(x)) -> ChemicalChange(x))"]}
{"id": "entailmentbank_train_4076", "nl": "the metal on the roof of a car is exposed to air.", "fol": "", "prediction": ["all x y.((Metal(x) & Car(y)) -> ExposedToAir(x,y))"]}
{"id": "entailmentbank_train_4077", "nl": "if something is exposed to air, then that something is in contact with air.", "fol": "", "prediction": ["all x.((ExposedToAir(x) & InContactWithAir(x)) -> ExposedToAir(x))"]}
{"id": "entailmentbank_train_4078", "nl": "the metal on the roof of a car is in contact with air.", "fol": "", "prediction": ["all x y.((Metal(x) & Car(y) & OnRoaf(x,y)) -> InContactWithAir(x))"]}
{"id": "entailmentbank_train_4079", "nl": "air contains oxygen and water vapor.", "fol": "", "prediction": ["all x.(Air(x) -> (ContainsOxygen(x) & ContainsWaterVapor(x)))"]}
{"id": "entailmentbank_train_4080", "nl": "the metal on the roof of a car is in contact with oxygen and water vapor.", "fol": "", "prediction": ["all x y.((Metal(x) & Car(y)) -> (InContactWithOxygen(x,y) & InContactWithWaterVapor(x,y)))"]}
{"id": "entailmentbank_train_4081", "nl": "metal in contact with water and oxygen will rust.", "fol": "", "prediction": ["all x.((Metal(x) & InContactWithWater(x) & InContactWithOxygen(x)) -> Rust(x))"]}
{"id": "entailmentbank_train_4082", "nl": "the metal on the roof of a car rusts.", "fol": "", "prediction": ["all x y.((Metal(x) & Car(y)) -> Rusts(x,y))"]}
{"id": "entailmentbank_train_4083", "nl": "hydrogen is a kind of element.", "fol": "", "prediction": ["all x.(Hydrogen(x) -> Element(x))"]}
{"id": "entailmentbank_train_4084", "nl": "oxygen is a kind of element.", "fol": "", "prediction": ["all x.(Oxygen(x) -> Element(x))"]}
{"id": "entailmentbank_train_4085", "nl": "hydrogen and oxygen are two elements.", "fol": "", "prediction": ["all x.((Hydrogen(x) & Oxygen(x)) -> TwoElements(x))"]}
{"id": "entailmentbank_train_4086", "nl": "water is made of hydrogen and oxygen.", "fol": "", "prediction": ["all x.(Water(x) -> (MadeOfHydrogen(x) & MadeOfOxygen(x)))"]}
{"id": "entailmentbank_train_4087", "nl": "water is made of hydrogen and oxygen two elements.", "fol": "", "prediction": ["all x.(Water(x) -> (Hydrogen(x) & Oxygen(x)))"]}
{"id": "entailmentbank_train_4088", "nl": "a compound is made of two or more elements chemically combined.", "fol": "", "prediction": ["all x.(Compound(x) -> (MadeOfTwoOrMoreElements(x) & ChemicallyCombined(x)))"]}
{"id": "entailmentbank_train_4089", "nl": "water is a kind of compound.", "fol": "", "prediction": ["all x.(Water(x) -> Compound(x))"]}
{"id": "entailmentbank_train_4090", "nl": "the new substance cannot be physically separated.", "fol": "", "prediction": ["all x.(NewSubstance(x) -> -PhysicallySeparated(x))"]}
{"id": "entailmentbank_train_4091", "nl": "when two substances together form a compound then those substances cannot be physically separated.", "fol": "", "prediction": ["all x y.((Substance(x) & Substance(y) & TogetherFormCompound(x,y)) -> -PhysicallySeparated(x,y))"]}
{"id": "entailmentbank_train_4092", "nl": "the new substance is a compound.", "fol": "", "prediction": ["all x.((Substance(x) & Compound(x)) -> NewSubstance(x))"]}
{"id": "entailmentbank_train_4093", "nl": "a new substance glycogen is produced in the conversion.", "fol": "", "prediction": ["all x y.((Substance(x) & Substance(y) & ProducedInConversion(x,y)) -> Glycogen(x))"]}
{"id": "entailmentbank_train_4094", "nl": "a chemical reaction causes the new substance glycogen to form in the conversion.", "fol": "", "prediction": ["all x y.((ChemicalReaction(x) & NewSubstance(y) & CausesGlycogenFormation(x,y)) -> FormsInConversion(x,y))"]}
{"id": "entailmentbank_train_4095", "nl": "batter and cake are different substances.", "fol": "", "prediction": ["all x.((Batter(x) & Cake(x)) -> DifferentSubstances(x))"]}
{"id": "entailmentbank_train_4096", "nl": "baking will turn batter into cakes.", "fol": "", "prediction": ["all x.(Baking(x) -> TurnsBatteryIntoCakes(x))"]}
{"id": "entailmentbank_train_4097", "nl": "baking a cake produces a new substance.", "fol": "", "prediction": ["all x y.((BakingCake(x) & Cake(y)) -> ProducesNewSubstance(x,y))"]}
{"id": "entailmentbank_train_4098", "nl": "lighting a match causes that match to burn.", "fol": "", "prediction": ["all x y.((Lighting(x) & Match(y)) -> CausesBurn(x,y))"]}
{"id": "entailmentbank_train_4099", "nl": "burning a match will produce ashes.", "fol": "", "prediction": ["all x y.((Burning(x) & Match(y)) -> ProducesAsh(x,y))"]}
{"id": "entailmentbank_train_4100", "nl": "lighting a match produces new substances such as ashes.", "fol": "", "prediction": ["all x y.((Lighting(x) & Match(y)) -> (ProducesNewSubstances(x,y) & Asche(y)))"]}
{"id": "entailmentbank_train_4101", "nl": "baking a cake and lighting a match both produces new substances.", "fol": "", "prediction": ["all x y.((BakingCake(x) & LightingMatch(y)) -> (ProducesNewSubstances(x) & ProducesNewSubstances(y)))"]}
{"id": "entailmentbank_train_4102", "nl": "lighting a match and baking a cake are both chemical reactions.", "fol": "", "prediction": ["all x y.((LightingMatch(x) & BakingCake(y)) -> ChemicalReaction(x))"]}
{"id": "entailmentbank_train_4103", "nl": "lighting a match and baking a cake are both chemical changes.", "fol": "", "prediction": ["all x y.((LightingMatch(x) & BakingCake(y)) -> ChemicalChange(x))"]}
{"id": "entailmentbank_train_4104", "nl": "nails are often made of iron.", "fol": "", "prediction": ["all x.(Nail(x) -> MadeOfIron(x))"]}
{"id": "entailmentbank_train_4105", "nl": "nails are made of metal.", "fol": "", "prediction": ["all x.(Nail(x) -> MadeOfMetal(x))"]}
{"id": "entailmentbank_train_4106", "nl": "metals in contact with water and oxygen will rust.", "fol": "", "prediction": ["all x.((Metal(x) & InContactWithWater(x) & InContactWithOxygen(x)) -> Rust(x))"]}
{"id": "entailmentbank_train_4107", "nl": "nails in contact with water and oxygen will rust.", "fol": "", "prediction": ["all x.((Nail(x) & InContactWithWater(x) & InContactWithOxygen(x)) -> Rust(x))"]}
{"id": "entailmentbank_train_4108", "nl": "nails rusting in water is a kind of chemical change.", "fol": "", "prediction": ["all x.((Nails(x) & RustsInWater(x)) -> ChemicalChange(x))"]}
{"id": "entailmentbank_train_4109", "nl": "chlorine is a kind of element.", "fol": "", "prediction": ["all x.(Chlorine(x) -> Element(x))"]}
{"id": "entailmentbank_train_4110", "nl": "sodium is a kind of element.", "fol": "", "prediction": ["all x.(Sodium(x) -> Element(x))"]}
{"id": "entailmentbank_train_4111", "nl": "sodium and chlorine are two elements.", "fol": "", "prediction": ["all x.((Sodium(x) & Chlorine(x)) -> Element(x))"]}
{"id": "entailmentbank_train_4112", "nl": "sodium chloride is always made of chemically combined chlorine and sodium.", "fol": "", "prediction": ["all x.(SodiumChloride(x) -> MadeOfChemicallyCombinedChlorineAndSodium(x))"]}
{"id": "entailmentbank_train_4113", "nl": "sodium chloride is made of two elements chemically combined.", "fol": "", "prediction": ["all x.(SodiumChloride(x) -> MadeOfTwoElements(x))"]}
{"id": "entailmentbank_train_4114", "nl": "sodium chloride is a kind of chemical compound.", "fol": "", "prediction": ["all x.(SodiumChloride(x) -> ChemicalCompound(x))"]}
{"id": "entailmentbank_train_4115", "nl": "wood chips are made of wood.", "fol": "", "prediction": ["all x.(WoodChips(x) -> MadeOfWood(x))"]}
{"id": "entailmentbank_train_4116", "nl": "wood burns.", "fol": "", "prediction": ["all x.(WoodBurns(x) -> Burns(x))"]}
{"id": "entailmentbank_train_4117", "nl": "wood chips burn.", "fol": "", "prediction": ["all x.(WoodChips(x) -> Burns(x))"]}
{"id": "entailmentbank_train_4118", "nl": "fire causes wood chips to burn.", "fol": "", "prediction": ["all x.(Fire(x) -> CausesWoodChipsToBurn(x))"]}
{"id": "entailmentbank_train_4119", "nl": "fire will cause chemical reaction to wood chips.", "fol": "", "prediction": ["all x y.((Fire(x) & WoodChips(y)) -> CausesChemicalReaction(x,y))"]}
{"id": "entailmentbank_train_4120", "nl": "a burning wood chips producint ashes is undergoing a chemical reaction.", "fol": "", "prediction": ["all x.((BoilingWoodChips(x) & ProducesAsh(x)) -> ChemicalReaction(x))"]}
{"id": "entailmentbank_train_4121", "nl": "paper burns.", "fol": "", "prediction": ["all x.(PaperBurns(x) -> Burns(x))"]}
{"id": "entailmentbank_train_4122", "nl": "fire causes paper to burn.", "fol": "", "prediction": ["all x.(Fire(x) -> CausesPaperToBurn(x))"]}
{"id": "entailmentbank_train_4123", "nl": "burning paper with fire is a kind of chemical reaction.", "fol": "", "prediction": ["all x.((BoilingPaperWithFire(x) & ChemicalReaction(x)) -> ChemicalReaction(x))"]}
{"id": "entailmentbank_train_4124", "nl": "burning paper with fire causes chemical change.", "fol": "", "prediction": ["all x.((BoilingPaper(x) & Fire(x)) -> ChemicalChange(x))"]}
{"id": "entailmentbank_train_4125", "nl": "magnesium is a kind of substance.", "fol": "", "prediction": ["all x.(Magnesium(x) -> Substance(x))"]}
{"id": "entailmentbank_train_4126", "nl": "magnesium is flammable.", "fol": "", "prediction": ["all x.(Magnesium(x) -> Flammable(x))"]}
{"id": "entailmentbank_train_4127", "nl": "magnesium is a flammable substance.", "fol": "", "prediction": ["all x.(Magnesium(x) -> FlammableSubstance(x))"]}
{"id": "entailmentbank_train_4128", "nl": "flammability is a property of substance and includes values of flammable / inflammable.", "fol": "", "prediction": ["all x.(Flammability(x) -> (PropertyOfSubstance(x) & IncludesValuesOfFlammable(x) & IncludesValuesOfInflammable(x)))"]}
{"id": "entailmentbank_train_4129", "nl": "magnesium is a substance that is flammable in flammability.", "fol": "", "prediction": ["all x.(Magnesium(x) -> FlammableInFlammability(x))"]}
{"id": "entailmentbank_train_4130", "nl": "if a substance is flammable, it can burn.", "fol": "", "prediction": ["all x.((Substance(x) & Flammable(x)) -> CanBurn(x))"]}
{"id": "entailmentbank_train_4131", "nl": "magnesium can burn.", "fol": "", "prediction": ["all x.(Magnesium(x) -> CanBurn(x))"]}
{"id": "entailmentbank_train_4132", "nl": "a compound can be chemically separated into the elements that it is made of.", "fol": "", "prediction": ["all x.(Compound(x) -> CanBeChemicallySeparatedIntoElements(x))"]}
{"id": "entailmentbank_train_4133", "nl": "a compound being broken down is a kind of chemical change.", "fol": "", "prediction": ["all x.((Compound(x) & BrokenDown(x)) -> ChemicalChange(x))"]}
{"id": "entailmentbank_train_4134", "nl": "a compound can only be separated into the elements by chemical change.", "fol": "", "prediction": ["all x.(Compound(x) -> SeparatedByChemicalChange(x))"]}
{"id": "entailmentbank_train_4135", "nl": "a compound can only be broken down in chemical change but not physcial changes.", "fol": "", "prediction": ["all x.(Compound(x) -> (BreaksDownInChemicalChange(x) & -BreaksDownInPhyscialChange(x)))"]}
{"id": "entailmentbank_train_4136", "nl": "gold is a pure substance.", "fol": "", "prediction": ["all x.(Gold(x) -> PureSubstance(x))"]}
{"id": "entailmentbank_train_4137", "nl": "a pure substance is made up of only one kind of atom.", "fol": "", "prediction": ["all x.((Substance(x) & Pure(x)) -> exists y.(Atom(y) & MadeUpOf(x,y))))"]}
{"id": "entailmentbank_train_4138", "nl": "gold is only made of gold atoms.", "fol": "", "prediction": ["all x.(Gold(x) -> MadeOfGoldAtoms(x))"]}
{"id": "entailmentbank_train_4139", "nl": "fire causes the match to burn.", "fol": "", "prediction": ["all x.(Fire(x) -> CausesMatchToBurn(x))"]}
{"id": "entailmentbank_train_4140", "nl": "fire causes chemical change.", "fol": "", "prediction": ["all x.(Fire(x) -> CausesChemicalChange(x))"]}
{"id": "entailmentbank_train_4141", "nl": "lighting a match with is an example of chemical change.", "fol": "", "prediction": ["all x.((LightingMatch(x) & ChemicalChange(x)) -> ChemicalChange(x))"]}
{"id": "entailmentbank_train_4142", "nl": "hydrogen and oxygen are different elements.", "fol": "", "prediction": ["all x.((Hydrogen(x) & Oxygen(x)) -> DifferentElements(x))"]}
{"id": "entailmentbank_train_4143", "nl": "an element is a kind of substance.", "fol": "", "prediction": ["all x.(Element(x) -> Substance(x))"]}
{"id": "entailmentbank_train_4144", "nl": "hydrogen and oxygen are different substances.", "fol": "", "prediction": ["all x.((Hydrogen(x) & Oxygen(x)) -> DifferentSubstances(x))"]}
{"id": "entailmentbank_train_4145", "nl": "hydrogen, oxygen, and water are different substances.", "fol": "", "prediction": ["all x.((Hydrogen(x) | Oxygen(x) | Water(x)) -> DifferentSubstances(x))"]}
{"id": "entailmentbank_train_4146", "nl": "hydrogen is produced when electrical energy is added to water.", "fol": "", "prediction": ["all x.((ElectricalEnergy(x) & AdditionToWater(x)) -> HydrogenProduced(x))"]}
{"id": "entailmentbank_train_4147", "nl": "electrical energy is added to water.", "fol": "", "prediction": ["all x y.((ElectricalEnergy(x) & Water(y)) -> AddedTo(x,y))"]}
{"id": "entailmentbank_train_4148", "nl": "electrical energy causes hydrogen to form from water.", "fol": "", "prediction": ["all x y.((ElectricalEnergy(x) & Water(y)) -> CausesHydrogenToForm(x,y))"]}
{"id": "entailmentbank_train_4149", "nl": "oxygen is produced when electrical energy is added to water.", "fol": "", "prediction": ["all x.((ElectricalEnergy(x) & AdditionToWater(x)) -> OxygenProduced(x))"]}
{"id": "entailmentbank_train_4150", "nl": "electrical energy causes oxygen to form from water.", "fol": "", "prediction": ["all x y.((ElectricalEnergy(x) & Water(y)) -> CausesOxygenFormation(x,y))"]}
{"id": "entailmentbank_train_4151", "nl": "electrical energy causes hydrogen and oxygen to form from water.", "fol": "", "prediction": ["all x y.((ElectricalEnergy(x) & Hydrogen(y) & Oxygen(y)) -> FormsFromWater(x,y))"]}
{"id": "entailmentbank_train_4152", "nl": "electrical energy causes different substances to form from water.", "fol": "", "prediction": ["all x y.((ElectricalEnergy(x) & Substance(y)) -> CausesFormationFromWater(x,y))"]}
{"id": "entailmentbank_train_4153", "nl": "chemical changes cause different substances to form.", "fol": "", "prediction": ["all x y.((ChemicalChange(x) & Substance(y)) -> CausesFormation(x,y))"]}
{"id": "entailmentbank_train_4154", "nl": "electrical energy causes chemical change to the water.", "fol": "", "prediction": ["all x y.((ElectricalEnergy(x) & Water(y)) -> CausesChemicalChange(x,y))"]}
{"id": "entailmentbank_train_4155", "nl": "lemon juice contains acid.", "fol": "", "prediction": ["all x.(LemonJuice(x) -> ContainsAcid(x))"]}
{"id": "entailmentbank_train_4156", "nl": "milk contains proteins.", "fol": "", "prediction": ["all x.(Milk(x) -> ContainsProteins(x))"]}
{"id": "entailmentbank_train_4157", "nl": "adding lemon juice to milk is similar to combining acid and protein together.", "fol": "", "prediction": ["all x y.((Addition(x,y) & LemonJuice(x) & Milk(y)) -> SimilarTo(x,y))"]}
{"id": "entailmentbank_train_4158", "nl": "combining acid and protein can cause chemical change.", "fol": "", "prediction": ["all x.((CombiningAcid(x) & CombiningProtein(x)) -> CausesChemicalChange(x))"]}
{"id": "entailmentbank_train_4159", "nl": "adding lemon juice to milk can cause chemical change.", "fol": "", "prediction": ["all x.((AdditionOfLemonJuice(x) & Milk(x)) -> CanCauseChemicalChange(x))"]}
{"id": "entailmentbank_train_4160", "nl": "baking soda is a kind of substance.", "fol": "", "prediction": ["all x.(BakingSoda(x) -> Substance(x))"]}
{"id": "entailmentbank_train_4161", "nl": "vinegar is a kind of substance.", "fol": "", "prediction": ["all x.(Vinaigrette(x) -> Substance(x))"]}
{"id": "entailmentbank_train_4162", "nl": "combining baking soda and vinegar is combining two substance together.", "fol": "", "prediction": ["all x y.((BakingSoda(x) & Vinegar(y)) -> CombinesSubstance(x,y))"]}
{"id": "entailmentbank_train_4163", "nl": "combining / mixing two substances chemically causes chemical reactions.", "fol": "", "prediction": ["all x y.((Substance(x) & Substance(y) & Combines(x,y)) -> MixesChemicalReactions(x,y))"]}
{"id": "entailmentbank_train_4164", "nl": "baking soda can react chemically with vinegar.", "fol": "", "prediction": ["all x.(BakingSoda(x) -> CanReactChemicallyWithVinaigine(x))"]}
{"id": "entailmentbank_train_4165", "nl": "combining baking soda and vinegar can cause chemical reactions.", "fol": "", "prediction": ["all x.((BakingSoda(x) & Vinegar(x)) -> CanCauseChemicalReactions(x))"]}
{"id": "entailmentbank_train_4166", "nl": "flammability is a kind of chemical property.", "fol": "", "prediction": ["all x.(Flammability(x) -> ChemicalProperty(x))"]}
{"id": "entailmentbank_train_4167", "nl": "flammability is a property of matter.", "fol": "", "prediction": ["all x.(Flammability(x) -> PropertyOfMatter(x))"]}
{"id": "entailmentbank_train_4168", "nl": "flammability is a chemical property of matter.", "fol": "", "prediction": ["all x.(Flammability(x) -> ChemicalPropertyOfMatter(x))"]}
{"id": "entailmentbank_train_4169", "nl": "a beach ball is flexible.", "fol": "", "prediction": ["all x.(BeachBall(x) -> Flexible(x))"]}
{"id": "entailmentbank_train_4170", "nl": "if a flexible container is pushed on then that container will change shape.", "fol": "", "prediction": ["all x.((FlexibleContainer(x) & PushedOn(x)) -> ChangesShape(x))"]}
{"id": "entailmentbank_train_4171", "nl": "a beach ball is a kind of container.", "fol": "", "prediction": ["all x.(BeachBall(x) -> Container(x))"]}
{"id": "entailmentbank_train_4172", "nl": "if a beach ball is pushed on, then the shape of the beach ball will change.", "fol": "", "prediction": ["all x.((BeachBall(x) & PushedOn(x)) -> ShapeChange(x))"]}
{"id": "entailmentbank_train_4173", "nl": "the beach ball is pushed on the middle.", "fol": "", "prediction": ["all x.(BeachBall(x) -> PushedOnMiddle(x))"]}
{"id": "entailmentbank_train_4174", "nl": "the shape of the beach ball will change.", "fol": "", "prediction": ["all x.(BeachBall(x) -> ChangesShape(x))"]}
{"id": "entailmentbank_train_4175", "nl": "matter in the gas phase has variable shape.", "fol": "", "prediction": ["all x.((Matter(x) & GasPhase(x)) -> VariableShape(x))"]}
{"id": "entailmentbank_train_4176", "nl": "air has variable shape.", "fol": "", "prediction": ["all x.(Air(x) -> VariableShape(x))"]}
{"id": "entailmentbank_train_4177", "nl": "matter with variable volume and shape takes the shape and size of its entire container.", "fol": "", "prediction": ["all x.((Matter(x) & VariableVolume(x) & VariableShape(x)) -> TakesShapeAndSizeOfContainer(x))"]}
{"id": "entailmentbank_train_4178", "nl": "air takes the shape of its container.", "fol": "", "prediction": ["all x.(Air(x) -> TakesShapeOfContainer(x))"]}
{"id": "entailmentbank_train_4179", "nl": "the beach ball is filled with air.", "fol": "", "prediction": ["all x.(BeachBall(x) -> FilledWithAir(x))"]}
{"id": "entailmentbank_train_4180", "nl": "air takes the shape of the beach ball.", "fol": "", "prediction": ["all x.(Air(x) -> TakesShapeOfBeachBall(x))"]}
{"id": "entailmentbank_train_4181", "nl": "the shape of the air in the beach ball will change with the shape of the beach ball.", "fol": "", "prediction": ["all x y.((Air(x) & BeachBall(y)) -> ChangesShapeWithShape(x,y))"]}
{"id": "entailmentbank_train_4182", "nl": "iron nails are made of iron.", "fol": "", "prediction": ["all x.(IronNail(x) -> MadeOfIron(x))"]}
{"id": "entailmentbank_train_4183", "nl": "iron nails are solid.", "fol": "", "prediction": ["all x.(IronNail(x) -> Solid(x))"]}
{"id": "entailmentbank_train_4184", "nl": "state of matter is a property of substance includes values of solid / liquid / gas.", "fol": "", "prediction": ["all x.((StateOfMatter(x) & Substance(x)) -> (IncludesValuesOfSolid(x) | IncludesValuesOfLiquid(x) | IncludesValuesOfGas(x)))"]}
{"id": "entailmentbank_train_4185", "nl": "iron nails are solid in state of matter.", "fol": "", "prediction": ["all x.((IronNail(x) & SolidStateOfMatter(x)) -> Solid(x))"]}
{"id": "entailmentbank_train_4186", "nl": "iron nails are made of metal.", "fol": "", "prediction": ["all x.(IronNail(x) -> MadeOfMetal(x))"]}
{"id": "entailmentbank_train_4187", "nl": "a thermal energy conductor conducts heat.", "fol": "", "prediction": ["all x.(ThermalEnergyConductor(x) -> ConductsHeat(x))"]}
{"id": "entailmentbank_train_4188", "nl": "metal is a thermal energy conductor.", "fol": "", "prediction": ["all x.(Metal(x) -> ThermalEnergyConductor(x))"]}
{"id": "entailmentbank_train_4189", "nl": "iron nails can conduct heat.", "fol": "", "prediction": ["all x.((Nail(x) & Iron(x)) -> ConductsHeat(x))"]}
{"id": "entailmentbank_train_4190", "nl": "iron is always magnetic.", "fol": "", "prediction": ["all x.(Iron(x) -> Magnetic(x))"]}
{"id": "entailmentbank_train_4191", "nl": "iron nails are magnetic.", "fol": "", "prediction": ["all x.(IronNail(x) -> Magnetic(x))"]}
{"id": "entailmentbank_train_4192", "nl": "iron nails can conduct heat and are magnetic and are solid.", "fol": "", "prediction": ["all x.((Nail(x) & Iron(x)) -> (ConductsHeat(x) & Magnetic(x) & Solid(x)))"]}
{"id": "entailmentbank_train_4193", "nl": "water changes into a phase where the molecules cannot move easily past each other.", "fol": "", "prediction": ["all x y.((Water(x) & Molecule(y)) -> (ChangesIntoPhase(x,y) & -MovesEasily(y,x)))"]}
{"id": "entailmentbank_train_4194", "nl": "the molecules of a substance cannot move easily past each other in solid state.", "fol": "", "prediction": ["all x y.((Molecule(x) & Substance(y)) -> -MovesEasilyInSolidState(x,y))"]}
{"id": "entailmentbank_train_4195", "nl": "water changes into solid state.", "fol": "", "prediction": ["all x.(Water(x) -> SolidState(x))"]}
{"id": "entailmentbank_train_4196", "nl": "solid is a kind of state of matter.", "fol": "", "prediction": ["all x.(Solid(x) -> StateOfMatter(x))"]}
{"id": "entailmentbank_train_4197", "nl": "a phase change is when a substance changes from one state of matter into another state of matter.", "fol": "", "prediction": ["all x y.((Substance(x) & StateOfMatter(y)) -> ChangesFromTo(x,y))"]}
{"id": "entailmentbank_train_4198", "nl": "water undergoes a phase change into solid state.", "fol": "", "prediction": ["all x.(Water(x) -> UndergoesPhaseChangeIntoSolidState(x))"]}
{"id": "entailmentbank_train_4199", "nl": "an example of a physical change is a phase change.", "fol": "", "prediction": ["all x.((PhysicalChange(x) & PhaseChange(x)) -> PhysicalChange(x))"]}
{"id": "entailmentbank_train_4200", "nl": "water undergoing a phase change is an example of physical change.", "fol": "", "prediction": ["all x.((Water(x) & UndergoesPhaseChange(x)) -> PhysicalChange(x))"]}
{"id": "entailmentbank_train_4201", "nl": "if something undergoes physical change then the chemical properties of that something will remain unchanged.", "fol": "", "prediction": ["all x.((UndergoesPhysicalChange(x) & ChemicalPropertiesRemainUnchanged(x)) -> UndergoesPhysicalChange(x))"]}
{"id": "entailmentbank_train_4202", "nl": "the chemical properties of water will remain unchanged.", "fol": "", "prediction": ["all x.((Water(x) & ChemicalProperties(x)) -> Unchanged(x))"]}
{"id": "entailmentbank_train_4203", "nl": "being a compound or an element is a chemical property of substances.", "fol": "", "prediction": ["all x.((Compound(x) | Element(x)) -> ChemicalPropertyOfSubstances(x))"]}
{"id": "entailmentbank_train_4204", "nl": "water being a compound or an element will remain unchanged.", "fol": "", "prediction": ["all x.((Water(x) & (Compound(x) | Element(x))) -> Unchanged(x))"]}
{"id": "entailmentbank_train_4205", "nl": "water being a compound will remain unchanged.", "fol": "", "prediction": ["all x.(Compound(x) -> WaterRemainsUnchanged(x))"]}
{"id": "entailmentbank_train_4206", "nl": "freezing is a kind of phase change.", "fol": "", "prediction": ["all x.(Freezing(x) -> PhaseChange(x))"]}
{"id": "entailmentbank_train_4207", "nl": "the water pipe freezes.", "fol": "", "prediction": ["all x.(WaterPipe(x) -> Freezes(x))"]}
{"id": "entailmentbank_train_4208", "nl": "the water pipe undergoes a phase change.", "fol": "", "prediction": ["all x.(WaterPipe(x) -> UndergoesPhaseChange(x))"]}
{"id": "entailmentbank_train_4209", "nl": "a phase change is a kind of physical change.", "fol": "", "prediction": ["all x.(PhaseChange(x) -> PhysicalChange(x))"]}
{"id": "entailmentbank_train_4210", "nl": "the water pipe undergoes a physical change when it freezes.", "fol": "", "prediction": ["all x.((WaterPipe(x) & Freezes(x)) -> UndergoesPhysicalChange(x))"]}
{"id": "entailmentbank_train_4211", "nl": "cracking is a kind of breaking.", "fol": "", "prediction": ["all x.(Crising(x) -> Breaking(x))"]}
{"id": "entailmentbank_train_4212", "nl": "an example of a physical change is breaking an object.", "fol": "", "prediction": ["all x.((PhysicalChange(x) & BreaksObject(x)) -> PhysicalChange(x))"]}
{"id": "entailmentbank_train_4213", "nl": "an object cracking is a kind of physical change.", "fol": "", "prediction": ["all x.(Cracking(x) -> PhysicalChange(x))"]}
{"id": "entailmentbank_train_4214", "nl": "a water pipe is a kind of object.", "fol": "", "prediction": ["all x.(WaterPipe(x) -> Object(x))"]}
{"id": "entailmentbank_train_4215", "nl": "the water pipe cracking is a kind of physical change.", "fol": "", "prediction": ["all x.(WaterPipeCracking(x) -> PhysicalChange(x))"]}
{"id": "entailmentbank_train_4216", "nl": "a water pipe freezes and cracks on a cold night.", "fol": "", "prediction": ["all x.((WaterPipe(x) & ColdNight(x)) -> FreezesAndCracks(x))"]}
{"id": "entailmentbank_train_4217", "nl": "the water pipe freezing and cracking is an example of physical change.", "fol": "", "prediction": ["all x.((WaterPipe(x) & Freezing(x) & Cracking(x)) -> PhysicalChange(x))"]}
{"id": "entailmentbank_train_4218", "nl": "chemical change is the opposite of physical change.", "fol": "", "prediction": ["all x.(ChemicalChange(x) -> OppositeOfPhysicalChange(x))"]}
{"id": "entailmentbank_train_4219", "nl": "the water pipe freezing and cracking is an example of physical change but not a chemical change.", "fol": "", "prediction": ["all x.((WaterPipe(x) & FreezingAndCracking(x)) -> (PhysicalChange(x) & -ChemicalChange(x)))"]}
{"id": "entailmentbank_train_4220", "nl": "breaking down an object changes that object's shape.", "fol": "", "prediction": ["all x y.((Object(x) & BreakingDown(x,y)) -> ChangesShape(x,y))"]}
{"id": "entailmentbank_train_4221", "nl": "breaking a glass changes the shape of the glass.", "fol": "", "prediction": ["all x y.((Glass(x) & Glass(y)) -> BreaksChangeShape(x,y))"]}
{"id": "entailmentbank_train_4222", "nl": "breaking a glass changes the physical property of the glass.", "fol": "", "prediction": ["all x y.((Glass(x) & Breaking(x,y)) -> ChangesPhysicalProperty(x,y))"]}
{"id": "entailmentbank_train_4223", "nl": "breaking a glass is an example of a glass undergoing a physical change.", "fol": "", "prediction": ["all x.((Glass(x) & Breaking(x)) -> PhysicalChange(x))"]}
{"id": "entailmentbank_train_4224", "nl": "gold is a kind of solid.", "fol": "", "prediction": ["all x.(Gold(x) -> Solid(x))"]}
{"id": "entailmentbank_train_4225", "nl": "gold is solid in state of matter.", "fol": "", "prediction": ["all x.(Gold(x) -> SolidInStateOfMatter(x))"]}
{"id": "entailmentbank_train_4226", "nl": "mercury is liquid at room temperature.", "fol": "", "prediction": ["all x.(Mercury(x) -> LiquidAtRoomTemperature(x))"]}
{"id": "entailmentbank_train_4227", "nl": "mercury is liquid in state of matter.", "fol": "", "prediction": ["all x.(Mercury(x) -> LiquidInStateOfMatter(x))"]}
{"id": "entailmentbank_train_4228", "nl": "gold and mercury are different in state of matter.", "fol": "", "prediction": ["all x.((Gold(x) & Mercury(x)) -> DifferentStateOfMatter(x))"]}
{"id": "entailmentbank_train_4229", "nl": "state of matter is a kind of physical property.", "fol": "", "prediction": ["all x.(StateOfMatter(x) -> PhysicalProperty(x))"]}
{"id": "entailmentbank_train_4230", "nl": "gold and mercury are different in a physical property.", "fol": "", "prediction": ["all x.((Gold(x) & Mercury(x)) -> DifferentPhysicalProperty(x))"]}
{"id": "entailmentbank_train_4231", "nl": "breaking a bottle changes the shape of the bottle.", "fol": "", "prediction": ["all x y.((BreaksBoutle(x) & Bottle(y)) -> ChangesShape(x,y))"]}
{"id": "entailmentbank_train_4232", "nl": "breaking a bottle changes the physical property of the bottle.", "fol": "", "prediction": ["all x y.((BreaksBoutle(x) & Bottle(y)) -> ChangesPhysicalProperty(x,y))"]}
{"id": "entailmentbank_train_4233", "nl": "if a thing's physical properties change then it has undergone a physical change.", "fol": "", "prediction": ["all x.((Thing(x) & PhysicalPropertiesChange(x)) -> PhysicalChange(x))"]}
{"id": "entailmentbank_train_4234", "nl": "the bottle undergoes a physical change.", "fol": "", "prediction": ["all x.(Boutique(x) -> UndergoesPhysicalChange(x))"]}
{"id": "entailmentbank_train_4235", "nl": "phase changes are a kind of physical change.", "fol": "", "prediction": ["all x.(PhaseChange(x) -> PhysicalChange(x))"]}
{"id": "entailmentbank_train_4236", "nl": "melting is a kind of phase change.", "fol": "", "prediction": ["all x.(Melting(x) -> PhaseChange(x))"]}
{"id": "entailmentbank_train_4237", "nl": "ice melting is a kind of physical change.", "fol": "", "prediction": ["all x.(IceMelting(x) -> PhysicalChange(x))"]}
{"id": "entailmentbank_train_4238", "nl": "crumpling is a kind of change of shape action.", "fol": "", "prediction": ["all x.(Crumpling(x) -> ChangeOfShape(x))"]}
{"id": "entailmentbank_train_4239", "nl": "change of shape actions change the shape of an object.", "fol": "", "prediction": ["all x y.((ChangeOfShape(x) & Object(y)) -> ChangesShape(x,y))"]}
{"id": "entailmentbank_train_4240", "nl": "crumpling changes the shape of an object.", "fol": "", "prediction": ["all x y.((Cramping(x) & Object(y)) -> ChangesShape(x,y))"]}
{"id": "entailmentbank_train_4241", "nl": "a sheet of paper is a kind of object.", "fol": "", "prediction": ["all x.((SheetOfPaper(x) & Object(x)) -> Object(x))"]}
{"id": "entailmentbank_train_4242", "nl": "crumpling changes the shape of a sheet of paper.", "fol": "", "prediction": ["all x y.((Cramping(x) & SheetOfPaper(y)) -> ChangesShape(x,y))"]}
{"id": "entailmentbank_train_4243", "nl": "solid is a kind of physical property.", "fol": "", "prediction": ["all x.(Solid(x) -> PhysicalProperty(x))"]}
{"id": "entailmentbank_train_4244", "nl": "a mineral is a kind of solid material.", "fol": "", "prediction": ["all x.(Mineral(x) -> SolidMaterial(x))"]}
{"id": "entailmentbank_train_4245", "nl": "being solid is a physical property of a mineral.", "fol": "", "prediction": ["all x.(Solid(x) -> PhysicalPropertyOfMineral(x))"]}
{"id": "entailmentbank_train_4246", "nl": "an acid changes the color of litmus paper from blue to red.", "fol": "", "prediction": ["all x y.((Acid(x) & LitmusPaper(y)) -> ChangesColorFromBlueToRed(x,y))"]}
{"id": "entailmentbank_train_4247", "nl": "an acid is corrosive.", "fol": "", "prediction": ["all x.(Acid(x) -> Corrosive(x))"]}
{"id": "entailmentbank_train_4248", "nl": "an acid is corrosive and can change the color of litmus paper from blue to red.", "fol": "", "prediction": ["all x.(Acid(x) -> (Corrosive(x) & ChangesColorOfLitmusPaper(x,blue,red)))"]}
{"id": "entailmentbank_train_4249", "nl": "lemon juice is corrosive.", "fol": "", "prediction": ["all x.(LemonJuice(x) -> Corrosive(x))"]}
{"id": "entailmentbank_train_4250", "nl": "lemon juice changes the color of litmus paper from blue to red.", "fol": "", "prediction": ["all x y.((LemonJuice(x) & LitmusPaper(y)) -> ChangesColor(x,y))"]}
{"id": "entailmentbank_train_4251", "nl": "lemon juice is corrosive and can change the color of litmus paper from blue to red.", "fol": "", "prediction": ["all x.(LemonJuice(x) -> (Corrosive(x) & CanChangeColor(x,blue,red)))"]}
{"id": "entailmentbank_train_4252", "nl": "lemon juice is a kind of acid.", "fol": "", "prediction": ["all x.(LemonJuice(x) -> Acid(x))"]}
{"id": "entailmentbank_train_4253", "nl": "an acid is often sour in taste.", "fol": "", "prediction": ["all x.(Acid(x) -> SourTaste(x))"]}
{"id": "entailmentbank_train_4254", "nl": "lemon juice is sour in taste.", "fol": "", "prediction": ["all x.(LemonJuice(x) -> SourTaste(x))"]}
{"id": "entailmentbank_train_4255", "nl": "neutralization is when an acid reacts with a base.", "fol": "", "prediction": ["all x y.((Acid(x) & Base(y)) -> Neutralize(x,y))"]}
{"id": "entailmentbank_train_4256", "nl": "neutralization produces water and salt.", "fol": "", "prediction": ["all x.(Neutralization(x) -> (ProducesWater(x) & ProducesSalt(x)))"]}
{"id": "entailmentbank_train_4257", "nl": "neutralization is when an acid reacts with a base and produces water and salt.", "fol": "", "prediction": ["all x y.((Acid(x) & Base(y) & ReactsWith(x,y)) -> (ProducesWater(x) & ProducesSalt(x)))"]}
{"id": "entailmentbank_train_4258", "nl": "matter is made of atoms.", "fol": "", "prediction": ["all x.(Matter(x) -> MadeOfAtoms(x))"]}
{"id": "entailmentbank_train_4259", "nl": "an atom is a kind of particle.", "fol": "", "prediction": ["all x.(Atom(x) -> Particle(x))"]}
{"id": "entailmentbank_train_4260", "nl": "matter is made of particles called atoms.", "fol": "", "prediction": ["all x.(Matter(x) -> MadeOfAtoms(x))"]}
{"id": "entailmentbank_train_4261", "nl": "the nucleus is the core of an atom.", "fol": "", "prediction": ["all x y.((Nucleus(x) & Atom(y)) -> CoreOf(x,y))"]}
{"id": "entailmentbank_train_4262", "nl": "the nucleus of an atom is usually made of both protons and neutrons.", "fol": "", "prediction": ["all x y.((Atom(x) & Nucleus(y)) -> (MadeOfProtons(x,y) & MadeOfNeutrons(x,y)))"]}
{"id": "entailmentbank_train_4263", "nl": "the core of an atom is made of protons and neutrons.", "fol": "", "prediction": ["all x y.((Atom(x) & Protons(y) & Neutrons(y)) -> MadeOfCore(x,y))"]}
{"id": "entailmentbank_train_4264", "nl": "electrons surround the nucleus of an atom.", "fol": "", "prediction": ["all x y.((Electron(x) & Atom(y)) -> SurroundsNucleus(x,y))"]}
{"id": "entailmentbank_train_4265", "nl": "electrons surround the core of an atom.", "fol": "", "prediction": ["all x y.((Electron(x) & Atom(y)) -> SurroundsCore(x,y))"]}
{"id": "entailmentbank_train_4266", "nl": "an atom is made of a core of protons and neutrons surrounded by electrons.", "fol": "", "prediction": ["all x.(Atom(x) -> (MadeOfProtons(x) & MadeOfNeutrons(x) & SurroundedByElectrons(x)))"]}
{"id": "entailmentbank_train_4267", "nl": "a electron has a negative -1 electric charge.", "fol": "", "prediction": ["all x.(Electron(x) -> NegativeElectricCharge(x,1))"]}
{"id": "entailmentbank_train_4268", "nl": "electrons are a part of an atom.", "fol": "", "prediction": ["all x.(Electron(x) -> PartOfAtom(x))"]}
{"id": "entailmentbank_train_4269", "nl": "electrons are part of an atom that has negative charge.", "fol": "", "prediction": ["all x y.((Electron(x) & Atom(y) & NegativeCharge(y)) -> PartOf(x,y))"]}
{"id": "entailmentbank_train_4270", "nl": "the nucleus of an atom is made of protons and neutrons.", "fol": "", "prediction": ["all x y.((Atom(x) & Nucleus(y)) -> (MadeOfProtons(x,y) & MadeOfNeutrons(x,y)))"]}
{"id": "entailmentbank_train_4271", "nl": "the mass of the atom is determined by protons and neutrons.", "fol": "", "prediction": ["all x y.((Atom(x) & Protons(y) & Neutrons(y)) -> DeterminesMass(x,y))"]}
{"id": "entailmentbank_train_4272", "nl": "most of the mass of an atom is located in the nucleus.", "fol": "", "prediction": ["all x.((Atom(x) & Mass(x)) -> LocatedInNucleus(x))"]}
{"id": "entailmentbank_train_4273", "nl": "atom is a kind of particle.", "fol": "", "prediction": ["all x.(Atom(x) -> Particle(x))"]}
{"id": "entailmentbank_train_4274", "nl": "mercury is made of mercury atoms.", "fol": "", "prediction": ["all x.(Mercury(x) -> MadeOfMercuryAtoms(x))"]}
{"id": "entailmentbank_train_4275", "nl": "mercury is made of atom particles.", "fol": "", "prediction": ["all x.(Mercury(x) -> MadeOfAtomParticles(x))"]}
{"id": "entailmentbank_train_4276", "nl": "particles in a solid are closer together than particles in a liquid.", "fol": "", "prediction": ["all x y.((Solid(x) & Liquid(y)) -> CloserTogether(x,y))"]}
{"id": "entailmentbank_train_4277", "nl": "mercury changes from liquid state to solid state.", "fol": "", "prediction": ["all x.(Mercury(x) -> (ChangesFromLiquidStateToSolidState(x)))"]}
{"id": "entailmentbank_train_4278", "nl": "mercury atoms move closer together.", "fol": "", "prediction": ["all x.((Movement(x) & MercuryAtoms(x)) -> MovesCloserTogether(x))"]}
{"id": "entailmentbank_train_4279", "nl": "particles in a liquid have more kinetic energy than particles in a solid.", "fol": "", "prediction": ["all x y.((Liquid(x) & Solid(y)) -> MoreKineticEnergy(x,y))"]}
{"id": "entailmentbank_train_4280", "nl": "mercury atoms have less kinetic energy.", "fol": "", "prediction": ["all x.(M mercuryAtom(x) -> LessKineticEnergy(x))"]}
{"id": "entailmentbank_train_4281", "nl": "mercury atoms have less kinetic energy and move closer together.", "fol": "", "prediction": ["all x.(M mercuryAtom(x) -> (LessKineticEnergy(x) & MovesCloserTogether(x)))"]}
{"id": "entailmentbank_train_4282", "nl": "atomic number is determined by the proton number of an atom.", "fol": "", "prediction": ["all x y.((AtomicNumber(x) & Atom(y)) -> DeterminedByProtonNumber(x,y))"]}
{"id": "entailmentbank_train_4283", "nl": "adding one proton to an atom changes the proton number of the atom.", "fol": "", "prediction": ["all x y.((Addition(x,y) & Atom(y)) -> ChangesProtonNumber(x,y))"]}
{"id": "entailmentbank_train_4284", "nl": "the atomic number of the atom will change.", "fol": "", "prediction": ["all x.(Atom(x) -> ChangesAtomNumber(x))"]}
{"id": "entailmentbank_train_4285", "nl": "an atom is a kind of object.", "fol": "", "prediction": ["all x.(Atom(x) -> Object(x))"]}
{"id": "entailmentbank_train_4286", "nl": "losing / gaining electrons causes the electrical charge of an object to be unbalanced.", "fol": "", "prediction": ["all x.((LosingElectrons(x) & GainingElectrons(x)) -> UnbalancedElectricalCharge(x))"]}
{"id": "entailmentbank_train_4287", "nl": "losing or gaining electrons causes the electrical charge of an atom to be unbalanced.", "fol": "", "prediction": ["all x.((LosingOrGainingElectrons(x) & Atom(x)) -> UnbalancedElectricalCharge(x))"]}
{"id": "entailmentbank_train_4288", "nl": "one proton has one atomic mass unit.", "fol": "", "prediction": ["all x.(Proton(x) -> HasAtomicMassUnit(x))"]}
{"id": "entailmentbank_train_4289", "nl": "one neutron has one atomic mass unit.", "fol": "", "prediction": ["all x.(Neutron(x) -> HasOneAtomicMassUnit(x))"]}
{"id": "entailmentbank_train_4290", "nl": "electrons have 0 in mass in the current atom model.", "fol": "", "prediction": ["all x.(Electron(x) -> HasMass(x,0))"]}
{"id": "entailmentbank_train_4291", "nl": "only protons and neutrons add mass to the atom.", "fol": "", "prediction": ["all x y.((Proton(x) & Neutron(y)) -> AddsMassToAtom(x,y))"]}
{"id": "entailmentbank_train_4292", "nl": "a proton has a positive 1 electric charge.", "fol": "", "prediction": ["all x.(Proton(x) -> PositiveElectricCharge(x,1))"]}
{"id": "entailmentbank_train_4293", "nl": "protons are found in the nucleus of an atom.", "fol": "", "prediction": ["all x y.((Proton(x) & Atom(y)) -> FoundInNucleus(x,y))"]}
{"id": "entailmentbank_train_4294", "nl": "protons are found in the nucleus of an atom and are positvely charged.", "fol": "", "prediction": ["all x.(Proton(x) -> (FindsInNucleus(x) & PositivelyCharged(x)))"]}
{"id": "entailmentbank_train_4295", "nl": "atoms with one or two valence electrons tend to lose those electrons.", "fol": "", "prediction": ["all x.((Atom(x) & HasValenceElectrons(x,1) | HasValenceElectrons(x,2))) -> LosesElectrons(x))"]}
{"id": "entailmentbank_train_4296", "nl": "metal atoms usually have one or two valence electrons.", "fol": "", "prediction": ["all x.(MetalAtom(x) -> (HasValenceElectrons(x) | HasValenceElectrons(x)))"]}
{"id": "entailmentbank_train_4297", "nl": "metal atoms tend to lose electrons.", "fol": "", "prediction": ["all x.(MetalAtom(x) -> LosesElectrons(x))"]}
{"id": "entailmentbank_train_4298", "nl": "an ion with positive charge is formed by atom losing electrons.", "fol": "", "prediction": ["all x.((Ion(x) & PositiveCharge(x)) -> FormedByAtomLosingElectrons(x))"]}
{"id": "entailmentbank_train_4299", "nl": "metal atoms losing electrons will form ions with positive charge.", "fol": "", "prediction": ["all x.((MetalAtom(x) & LosingElectrons(x)) -> FormsIonsWithPositiveCharge(x))"]}
{"id": "entailmentbank_train_4300", "nl": "neutrons add mass to the nucleus.", "fol": "", "prediction": ["all x.(Neutron(x) -> AddMassToNucleus(x))"]}
{"id": "entailmentbank_train_4301", "nl": "a neutron has a neutral electric charge.", "fol": "", "prediction": ["all x.(Neutron(x) -> HasNeutralElectricCharge(x))"]}
{"id": "entailmentbank_train_4302", "nl": "protons and neutrons together will be positive in charge.", "fol": "", "prediction": ["all x.((Proton(x) & Neutron(x)) -> PositiveInCharge(x))"]}
{"id": "entailmentbank_train_4303", "nl": "the nucleus of an atom is positive in charge.", "fol": "", "prediction": ["all x.((Nucleus(x) & Atom(x)) -> PositiveInCharge(x))"]}
{"id": "entailmentbank_train_4304", "nl": "an atom has a positve charged core.", "fol": "", "prediction": ["all x.(Atom(x) -> PositveChargedCore(x))"]}
{"id": "entailmentbank_train_4305", "nl": "the nucleus of an atom is surrounded by  almost empty space.", "fol": "", "prediction": ["all x y.((Nucleus(x) & Atom(y)) -> SurroundedByEmptySpace(x,y))"]}
{"id": "entailmentbank_train_4306", "nl": "the core of an atom is surrounded by almost empty space.", "fol": "", "prediction": ["all x y.((Atom(x) & Core(y)) -> SurroundedByEmptySpace(x,y))"]}
{"id": "entailmentbank_train_4307", "nl": "an atom has a positive core surrounded by mostly empty space.", "fol": "", "prediction": ["all x.(Atom(x) -> (PositiveCore(x) & SurroundedByEmptySpace(x)))"]}
{"id": "entailmentbank_train_4308", "nl": "nucleus is a part of an atom.", "fol": "", "prediction": ["all x.(Nucleus(x) -> PartOfAtom(x))"]}
{"id": "entailmentbank_train_4309", "nl": "if something is part of another thing, then another thing consist of that something.", "fol": "", "prediction": ["all x y.((Thing(x) & PartOf(x,y)) -> ConsistsOf(x,y))"]}
{"id": "entailmentbank_train_4310", "nl": "an atom consists of a nucleus.", "fol": "", "prediction": ["all x.(Atom(x) -> ConsistsOfNucleus(x))"]}
{"id": "entailmentbank_train_4311", "nl": "electrons surround / orbit the nucleus of an atom.", "fol": "", "prediction": ["all x y.((Electron(x) & Atom(y)) -> SurroundsOrOrbits(x,y))"]}
{"id": "entailmentbank_train_4312", "nl": "an atom consists of a nucleus surrounded by electrons.", "fol": "", "prediction": ["all x.(Atom(x) -> exists y.(Nucleus(y) & SurroundedByElectrons(x,y)))"]}
{"id": "entailmentbank_train_4313", "nl": "an electron is a kind of charged particle.", "fol": "", "prediction": ["all x.(Electron(x) -> ChargedParticle(x))"]}
{"id": "entailmentbank_train_4314", "nl": "an electron is a kind of negtively charged particle.", "fol": "", "prediction": ["all x.(Electron(x) -> NegtivelyChargedParticle(x))"]}
{"id": "entailmentbank_train_4315", "nl": "electron is the smallest particle in an atom.", "fol": "", "prediction": ["all x.(Electron(x) -> SmallestParticleInAtom(x))"]}
{"id": "entailmentbank_train_4316", "nl": "electron is the smallest, negtively-charged particle in an atom.", "fol": "", "prediction": ["all x.(Electron(x) -> (Smallest(x) & NegtivelyCharged(x)))"]}
{"id": "entailmentbank_train_4317", "nl": "electrons orbit the nucleus of an atom.", "fol": "", "prediction": ["all x y.((Electron(x) & Atom(y)) -> OrbitsNucleus(x,y))"]}
{"id": "entailmentbank_train_4318", "nl": "the smallest, negatively-charged particles in the atom orbit the nucleus of the atom.", "fol": "", "prediction": ["all x y.((Smallest(x) & NegativelyCharged(x) & Atom(y)) -> OrbitsNucleus(x,y))"]}
{"id": "entailmentbank_train_4319", "nl": "electrons take up the majority of the volume of an atom.", "fol": "", "prediction": ["all x y.((Electron(x) & Atom(y)) -> TakesUpMajorityOfVolume(x,y))"]}
{"id": "entailmentbank_train_4320", "nl": "electrons are part of an atom that take up the majority of the volume in an atom.", "fol": "", "prediction": ["all x y.((Electron(x) & Atom(y)) -> (PartOf(x,y) & TakesUpMajorityOfVolume(x,y)))"]}
{"id": "entailmentbank_train_4321", "nl": "the nucleus is the center of an atom.", "fol": "", "prediction": ["all x y.((Nucleus(x) & Atom(y)) -> CenterOf(x,y))"]}
{"id": "entailmentbank_train_4322", "nl": "electrons orbit the center of an atom.", "fol": "", "prediction": ["all x y.((Electron(x) & Atom(y)) -> OrbitsCenter(x,y))"]}
{"id": "entailmentbank_train_4323", "nl": "electrons are part of an atom that orbit the center of an atom.", "fol": "", "prediction": ["all x y.((Electron(x) & Atom(y)) -> (PartOf(x,y) & OrbitCenterOf(x,y)))"]}
{"id": "entailmentbank_train_4324", "nl": "a neutron is neutral in electric charge and has one atomic mass unit.", "fol": "", "prediction": ["all x.(Neutron(x) -> (NeutralInElectricCharge(x) & HasOneAtomicMassUnit(x)))"]}
{"id": "entailmentbank_train_4325", "nl": "neutrons are a kind of subatomic particle.", "fol": "", "prediction": ["all x.(Neutron(x) -> SubatomicParticle(x))"]}
{"id": "entailmentbank_train_4326", "nl": "a neutron is a particle that is neutral in electric charge and has one atomic mass unit.", "fol": "", "prediction": ["all x.(Neutron(x) -> (NeutralElectricCharge(x) & HasOneAtomicMassUnit(x)))"]}
{"id": "entailmentbank_train_4327", "nl": "if a neutral atom loses an electron then an atom with a positive charge will be formed.", "fol": "", "prediction": ["all x y.((NeutralAtom(x) & LosesElectron(x)) -> PositiveCharge(y))"]}
{"id": "entailmentbank_train_4328", "nl": "an atom is positive 1 in electric charge.", "fol": "", "prediction": ["all x.((Atom(x) & PositiveInElectricCharge(x)) -> PositiveInElectricCharge(x))"]}
{"id": "entailmentbank_train_4329", "nl": "the atom loses an electron.", "fol": "", "prediction": ["all x.(Atom(x) -> LosesElectron(x))"]}
{"id": "entailmentbank_train_4330", "nl": "a neutron has a neutral 0 electric charge.", "fol": "", "prediction": ["all x.(Neutron(x) -> Neutral0ElectricCharge(x))"]}
{"id": "entailmentbank_train_4331", "nl": "protons and neutrons together will be positive in electric charge.", "fol": "", "prediction": ["all x.((Proton(x) & Neutron(x)) -> PositiveInElectricCharge(x))"]}
{"id": "entailmentbank_train_4332", "nl": "the nucleus of an atom is positve in electric charge.", "fol": "", "prediction": ["all x.((Nucleus(x) & Atom(x)) -> PositveInElectricCharge(x))"]}
{"id": "entailmentbank_train_4333", "nl": "the positive charge is concentrated in the center of an atom.", "fol": "", "prediction": ["all x y.((PositiveCharge(x) & Atom(y)) -> ConcentratedInCenter(x,y))"]}
{"id": "entailmentbank_train_4334", "nl": "atomic mass is determined by the number of protons and neutrons.", "fol": "", "prediction": ["all x.(AtomicMass(x) -> (DeterminedByProtons(x) & DeterminedByNeutrons(x)))"]}
{"id": "entailmentbank_train_4335", "nl": "atomic number is only determined by the number of proton of an element.", "fol": "", "prediction": ["all x y.((AtomicNumber(x) & Element(y)) -> DeterminedByProton(x,y))"]}
{"id": "entailmentbank_train_4336", "nl": "the difference between atomic mass and atomic number is the number of the neutrons in an element.", "fol": "", "prediction": ["all x y.((Difference(x,y) & AtomicMass(y) & AtomicNumber(y)) -> NumberOfNeutronsInElement(x,y))"]}
{"id": "entailmentbank_train_4337", "nl": "an electron is a kind of negatively-charged particle.", "fol": "", "prediction": ["all x.(Electron(x) -> NegativelyChargedParticle(x))"]}
{"id": "entailmentbank_train_4338", "nl": "electrons are part of an atom that is negatively-charged.", "fol": "", "prediction": ["all x y.((Electron(x) & Atom(y) & NegativelyCharged(y)) -> PartOf(x,y))"]}
{"id": "entailmentbank_train_4339", "nl": "electrons are involved in chemical reactions.", "fol": "", "prediction": ["all x.(Electron(x) -> ChemicalReaction(x))"]}
{"id": "entailmentbank_train_4340", "nl": "negatively charged particles are involved in chemical reactions.", "fol": "", "prediction": ["all x.(NegativelyChargedParticles(x) -> InvolvedInChemicalReactions(x))"]}
{"id": "entailmentbank_train_4341", "nl": "a point is small in size.", "fol": "", "prediction": ["all x.(Point(x) -> SmallSize(x))"]}
{"id": "entailmentbank_train_4342", "nl": "atoms are similar in size with points.", "fol": "", "prediction": ["all x.(Atom(x) -> SimilarSizeWithPoints(x))"]}
{"id": "entailmentbank_train_4343", "nl": "angstrom unit is used to measure the distance between two points.", "fol": "", "prediction": ["all x.(AngstromUnit(x) -> MeasuresDistanceBetweenPoints(x))"]}
{"id": "entailmentbank_train_4344", "nl": "angstrom units can be used to measure the distance between atoms.", "fol": "", "prediction": ["all x.(AngstromUnit(x) -> MeasuresDistance(x))"]}
{"id": "entailmentbank_train_4345", "nl": "atoms in a gas move independently of one another.", "fol": "", "prediction": ["all x y.((Atom(x) & Gas(y)) -> MoveIndependentlyOf(x,y))"]}
{"id": "entailmentbank_train_4346", "nl": "atoms in a gas collide frequently.", "fol": "", "prediction": ["all x y.((Atom(x) & Gas(y)) -> CollideFrequently(x,y))"]}
{"id": "entailmentbank_train_4347", "nl": "the substance is likely a gas.", "fol": "", "prediction": ["all x.((Substance(x) & Gas(x)) -> Likely(x))"]}
{"id": "entailmentbank_train_4348", "nl": "particles in a liquid are closer together than particles in a gas.", "fol": "", "prediction": ["all x y.((Liquid(x) & Gas(y)) -> CloserTogether(x,y))"]}
{"id": "entailmentbank_train_4349", "nl": "particles in a liquid are slower than particles in a gas.", "fol": "", "prediction": ["all x y.((Liquid(x) & Gas(y)) -> SlowerParticles(x,y))"]}
{"id": "entailmentbank_train_4350", "nl": "particles in a liquid are closer together and slower than particles in a gas.", "fol": "", "prediction": ["all x y.((Liquid(x) & Gas(y)) -> (CloserTogether(x,y) & Slower(x,y)))"]}
{"id": "entailmentbank_train_4351", "nl": "baking is when a human makes food by adding heat.", "fol": "", "prediction": ["all x.(Baking(x) -> (Human(x) & MakesFoodByAdditingHeat(x)))"]}
{"id": "entailmentbank_train_4352", "nl": "a cake is a kind of food.", "fol": "", "prediction": ["all x.(Cake(x) -> Food(x))"]}
{"id": "entailmentbank_train_4353", "nl": "baking cake is adding heat to the cake.", "fol": "", "prediction": ["all x.(BakingCake(x) -> AddsHeatToCake(x))"]}
{"id": "entailmentbank_train_4354", "nl": "adding heat to an object causes chemical reactions.", "fol": "", "prediction": ["all x y.((Addition(x,y) & Heat(y)) -> CausesChemicalReactions(x,y))"]}
{"id": "entailmentbank_train_4355", "nl": "baking a cake can cause a chemical reaction to the cake.", "fol": "", "prediction": ["all x y.((BakingCake(x) & Cake(y)) -> CanCauseChemicalReaction(x,y))"]}
{"id": "entailmentbank_train_4356", "nl": "a fire requires oxygen to burn.", "fol": "", "prediction": ["all x.(Fire(x) -> RequiresOxygen(x))"]}
{"id": "entailmentbank_train_4357", "nl": "placing a blanket on fire cuts off the oxygen.", "fol": "", "prediction": ["all x y.((Blanket(x) & Fire(y)) -> CutsOffOxygen(x,y))"]}
{"id": "entailmentbank_train_4358", "nl": "placing a blanket cuts off requirement for fire to burn.", "fol": "", "prediction": ["all x.((Blanket(x) & Places(x,y)) -> CutsOffRequirementForFire(x))"]}
{"id": "entailmentbank_train_4359", "nl": "if something is required for a process then keeping that something from reaching that process can stop that process.", "fol": "", "prediction": ["all x y.((RequiredForProcess(x) & Process(y)) -> CanStop(x,y))"]}
{"id": "entailmentbank_train_4360", "nl": "placing a blanket will stop the fire from burning.", "fol": "", "prediction": ["all x.((Blanket(x) & Places(x,y)) -> StopsFireFromBurning(x))"]}
{"id": "entailmentbank_train_4361", "nl": "a drain cleaner consists of sodium hydroxide and aluminum.", "fol": "", "prediction": ["all x.(DrainCleaner(x) -> (SodiumHydrogen(x) & Aluminum(x)))"]}
{"id": "entailmentbank_train_4362", "nl": "the drain cleaner is added into water.", "fol": "", "prediction": ["all x.(DrainCleaner(x) -> AddedIntoWater(x))"]}
{"id": "entailmentbank_train_4363", "nl": "sodium hydroxide, aluminum, and water are combined.", "fol": "", "prediction": ["all x.((SodiumHydrogen(x) & Aluminum(x) & Water(x)) -> Combined(x))"]}
{"id": "entailmentbank_train_4364", "nl": "hydrogen is produced.", "fol": "", "prediction": ["all x.(Hydrogen(x) -> Produced(x))"]}
{"id": "entailmentbank_train_4365", "nl": "hydrogen is produced when sodium, aluminum, and water are combined.", "fol": "", "prediction": ["all x.((Sodium(x) & Aluminum(x) & Water(x)) -> HydrogenProduced(x))"]}
{"id": "entailmentbank_train_4366", "nl": "the solution becomes really hot.", "fol": "", "prediction": ["all x.((Solution(x) & ReallyHot(x)) -> ReallyHot(x))"]}
{"id": "entailmentbank_train_4367", "nl": "heat energy is released when sodium hydroxide, aluminum, and water are combined.", "fol": "", "prediction": ["all x.((SodiumHydrogen(x) & Aluminum(x) & Water(x)) -> ReleasesHeatEnergy(x))"]}
{"id": "entailmentbank_train_4368", "nl": "a chemical reaction happened when sodium hydroxide, aluminum, and water are combined.", "fol": "", "prediction": ["all x y z.((ChemicalReaction(x) & NatriumHydroxy(y) & Aluminum(z) & Water(w)) -> Combines(x,y,z,w))"]}
{"id": "entailmentbank_train_4369", "nl": "nails rusting is a kind of chemical change.", "fol": "", "prediction": ["all x.(RustingNails(x) -> ChemicalChange(x))"]}
{"id": "entailmentbank_train_4370", "nl": "nails rusting is a kind of chemical reaction.", "fol": "", "prediction": ["all x.(RustingNails(x) -> ChemicalReaction(x))"]}
{"id": "entailmentbank_train_4371", "nl": "baking soda can react chemically with vinegar producing carbon dioxide.", "fol": "", "prediction": ["all x.(BakingSoda(x) -> (ReactsChemicallyWithVinaigar(x) & ProducesCarbonDioxide(x)))"]}
{"id": "entailmentbank_train_4372", "nl": "baking soda can react chemically with vinegar producing a gas.", "fol": "", "prediction": ["all x.(BakingSoda(x) -> (ReactsChemicallyWithVinaigore(x) & ProducesGas(x)))"]}
{"id": "entailmentbank_train_4373", "nl": "vinegar is added into baking soda.", "fol": "", "prediction": ["all x.(Vinadine(x) -> AddedIntoBakingSoda(x))"]}
{"id": "entailmentbank_train_4374", "nl": "vinegar being added into baking soda will cause chemical reactions.", "fol": "", "prediction": ["all x.((Vinadine(x) & AddedIntoBakingSoda(x)) -> CausesChemicalReactions(x))"]}
{"id": "entailmentbank_train_4375", "nl": "sodium chloride is a compound.", "fol": "", "prediction": ["all x.(SodiumChloride(x) -> Compound(x))"]}
{"id": "entailmentbank_train_4376", "nl": "sodium and chlorine reacting forms sodium chloride.", "fol": "", "prediction": ["all x.((Sodium(x) & Chlorine(x)) -> FormsSodiumChloride(x))"]}
{"id": "entailmentbank_train_4377", "nl": "sodium and chlorine reacting forms a compound.", "fol": "", "prediction": ["all x.((Sodium(x) & Chlorine(x)) -> Compound(x))"]}
{"id": "entailmentbank_train_4378", "nl": "the total number of atoms stay the same in chemical reaction.", "fol": "", "prediction": ["all x.((Atoms(x) & ChemicalReaction(x)) -> StaysSame(x))"]}
{"id": "entailmentbank_train_4379", "nl": "photosynthesis is a kind of chemical reaction.", "fol": "", "prediction": ["all x.(Photosynthesis(x) -> ChemicalReaction(x))"]}
{"id": "entailmentbank_train_4380", "nl": "the total number of atoms stay the same in photosynthesis.", "fol": "", "prediction": ["all x.((Atoms(x) & Photosynthesis(x)) -> Same(x))"]}
{"id": "entailmentbank_train_4381", "nl": "6 atoms of carbon involves in photosynthesis.", "fol": "", "prediction": ["all x.((Atom(x) & Carbon(x)) -> InvolvesInPhotosynthesis(x))"]}
{"id": "entailmentbank_train_4382", "nl": "6 atoms of carbon will stay the same in photosynthesis.", "fol": "", "prediction": ["all x.((Atom(x) & Carbon(x)) -> StaysSameInPhotosynthesis(x))"]}
{"id": "entailmentbank_train_4383", "nl": "a piece of wood is a kind of object.", "fol": "", "prediction": ["all x.((PieceOfWood(x) & Object(x)) -> Object(x))"]}
{"id": "entailmentbank_train_4384", "nl": "objects contain chemical energy.", "fol": "", "prediction": ["all x.(Object(x) -> ContainsChemicalEnergy(x))"]}
{"id": "entailmentbank_train_4385", "nl": "a piece of wood contains chemical energy.", "fol": "", "prediction": ["all x.((Wood(x) & ContainsChemicalEnergy(x)) -> ContainsChemicalEnergy(x))"]}
{"id": "entailmentbank_train_4386", "nl": "burning converts chemical energy into thermal energy.", "fol": "", "prediction": ["all x.(Burning(x) -> ConvertsChemicalEnergyToThermalEnergy(x))"]}
{"id": "entailmentbank_train_4387", "nl": "the chemical energy in wood is transformed into thermal energy.", "fol": "", "prediction": ["all x y.((ChemicalEnergy(x) & Wood(y)) -> TransformedIntoThermalEnergy(x,y))"]}
{"id": "entailmentbank_train_4388", "nl": "iron in contact with water and oxygen is a chemical change.", "fol": "", "prediction": ["all x.((Iron(x) & InContactWithWater(x) & InContactWithOxygen(x)) -> ChemicalChange(x))"]}
{"id": "entailmentbank_train_4389", "nl": "iron in contact with water and oxygen is a chemical reaction.", "fol": "", "prediction": ["all x.((Iron(x) & InContactWithWater(x) & InContactWithOxygen(x)) -> ChemicalReaction(x))"]}
{"id": "entailmentbank_train_4390", "nl": "iron in contact with water and oxygen will form new substance.", "fol": "", "prediction": ["all x.((Iron(x) & InContactWithWater(x) & InContactWithOxygen(x)) -> FormsNewSubstance(x))"]}
{"id": "entailmentbank_train_4391", "nl": "hydrochloric acid is combined with a piece of zinc.", "fol": "", "prediction": ["all x y.((HydrochloricAcid(x) & Zinc(y)) -> Combines(x,y))"]}
{"id": "entailmentbank_train_4392", "nl": "zinc chloride is formed.", "fol": "", "prediction": ["all x.(ZincChloride(x) -> Formed(x))"]}
{"id": "entailmentbank_train_4393", "nl": "hydrochloric acid combing with zinc forms zinc chloride.", "fol": "", "prediction": ["all x.((HydrochloricAcid(x) & CombiningZinc(x)) -> FormsZincChloride(x))"]}
{"id": "entailmentbank_train_4394", "nl": "hydrogen gas is formed.", "fol": "", "prediction": ["all x.(HydrogenGas(x) -> Formed(x))"]}
{"id": "entailmentbank_train_4395", "nl": "hydrochloric acid combing with zinc forms hydrogen gas.", "fol": "", "prediction": ["all x.((HydrochloricAcid(x) & Zinc(x)) -> FormsHydrogenGas(x))"]}
{"id": "entailmentbank_train_4396", "nl": "hydrochloric acid combing with zinc forms new substances.", "fol": "", "prediction": ["all x y.((HydrochloricAcid(x) & Zinc(y)) -> FormsNewSubstances(x,y))"]}
{"id": "entailmentbank_train_4397", "nl": "hydrochloric acid combining with zinc is an example of chemical reaction.", "fol": "", "prediction": ["all x.((HydrochloricAcid(x) & Zinc(x)) -> ChemicalReaction(x))"]}
{"id": "entailmentbank_train_4398", "nl": "100 grams vinegar and 5 grams baking soda are combined in a container.", "fol": "", "prediction": ["all x y.((Container(x) & Container(y)) -> (100gVinegar(x) & 5gBakingSoda(x)))"]}
{"id": "entailmentbank_train_4399", "nl": "a chemical reaction happens between baking soda and vinegar.", "fol": "", "prediction": ["all x y.((BakingSoda(x) & Vinegar(y)) -> ChemicalReaction(x,y))"]}
{"id": "entailmentbank_train_4400", "nl": "the mass of the reactants of a chemical reaction equals to the products of the chemical reaction.", "fol": "", "prediction": ["all x y.((Reactants(x) & ChemicalReaction(y)) -> MassEqualsProducts(x,y))"]}
{"id": "entailmentbank_train_4401", "nl": "the mass of baking soda and vinegar equal to the product of the chemical reaction.", "fol": "", "prediction": ["all x y.((BakingSoda(x) & Vinegar(y)) -> MassEqual(x,y))"]}
{"id": "entailmentbank_train_4402", "nl": "gas is trapped in the container.", "fol": "", "prediction": ["all x y.((Gas(x) & Container(y)) -> CapturedIn(x,y))"]}
{"id": "entailmentbank_train_4403", "nl": "gas is produced in the chemical reaction between baking soda and vinegar.", "fol": "", "prediction": ["all x y z.((BakingSoda(x) & Vinegar(y) & ChemicalReaction(z)) -> ProducesGas(x,y,z))"]}
{"id": "entailmentbank_train_4404", "nl": "the mass of the final product of the baking soda and vinegar will not be less.", "fol": "", "prediction": ["all x.((BakingSoda(x) & Vinegar(x)) -> -LessMass(x))"]}
{"id": "entailmentbank_train_4405", "nl": "the mass of the final product of the baking soda and vinegar will be the same as that of baking soda and vinegar.", "fol": "", "prediction": ["all x y.((BakingSoda(x) & Vinegar(y)) -> SameMass(x,y))"]}
{"id": "entailmentbank_train_4406", "nl": "baking soda is 5 grams.", "fol": "", "prediction": ["all x.(BakingSoda(x) -> (Ground(x,5)))"]}
{"id": "entailmentbank_train_4407", "nl": "vinegar is 100 grams.", "fol": "", "prediction": ["all x.(Vinaigrette(x) -> 100G.(Vinaigrette(x)))"]}
{"id": "entailmentbank_train_4408", "nl": "the mass of vinegar and baking soda is 105 grams.", "fol": "", "prediction": ["all x.((Vinaigrette(x) & BakingSoda(x)) -> Mass(x,105))"]}
{"id": "entailmentbank_train_4409", "nl": "the product of the chemical reaction will be 105 grams.", "fol": "", "prediction": ["all x.(ChemicalReaction(x) -> Product(x,105))"]}
{"id": "entailmentbank_train_4410", "nl": "water is a liquid compound at room temperature.", "fol": "", "prediction": ["all x.(Water(x) -> LiquidCompoundAtRoomTemperature(x))"]}
{"id": "entailmentbank_train_4411", "nl": "hydrogen is a kind of gas at room temperature.", "fol": "", "prediction": ["all x.(Hydrogen(x) -> RoomTemperatureGas(x))"]}
{"id": "entailmentbank_train_4412", "nl": "oxygen is a kind of gas at room temperature.", "fol": "", "prediction": ["all x.(Oxygen(x) -> RoomTemperatureGas(x))"]}
{"id": "entailmentbank_train_4413", "nl": "water can be made by two gases hydrogen and oxygen.", "fol": "", "prediction": ["all x.(Water(x) -> (Gas(x,hydrogen) & Gas(x,oxygen)))"]}
{"id": "entailmentbank_train_4414", "nl": "water is the liquid compound that can be made by two gases hydrogen and oxygen.", "fol": "", "prediction": ["all x.(Water(x) -> (LiquidCompound(x) & MadeByGases(x,hydrogen,oxygen)))"]}
{"id": "entailmentbank_train_4415", "nl": "liquid state is a kind of nongaseous state.", "fol": "", "prediction": ["all x.(LiquidState(x) -> NongaseousState(x))"]}
{"id": "entailmentbank_train_4416", "nl": "water is teh nongaseous compound that can be made by two gases.", "fol": "", "prediction": ["all x.(Water(x) -> (NongaseousCompound(x) & MadeByTwoGases(x)))"]}
{"id": "entailmentbank_train_4417", "nl": "substance y and substance z cannot be broken into simpler particles.", "fol": "", "prediction": ["all x y.((Substance(x) & Substance(y)) -> -BreakableIntoSimplerParticles(x,y))"]}
{"id": "entailmentbank_train_4418", "nl": "an element cannot be decomposed into two or more different substances by simple chemical methods.", "fol": "", "prediction": ["all x.(Element(x) -> -DecomposedBySimpleChemicalMethods(x))"]}
{"id": "entailmentbank_train_4419", "nl": "substance y and substance z are elements.", "fol": "", "prediction": ["all x.((Substance(x) & Substance(x)) -> (Element(x) & Element(x)))"]}
{"id": "entailmentbank_train_4420", "nl": "a balloon is a kind of container.", "fol": "", "prediction": ["all x.(Balloon(x) -> Container(x))"]}
{"id": "entailmentbank_train_4421", "nl": "a balloon filled with helium.", "fol": "", "prediction": ["all x.(Balloon(x) -> FilledWithHelium(x))"]}
{"id": "entailmentbank_train_4422", "nl": "a balloon filled with helium is an example of a container filled with helium.", "fol": "", "prediction": ["all x.((Balloon(x) & FilledWithHelium(x)) -> ContainerFilledWithHelium(x))"]}
{"id": "entailmentbank_train_4423", "nl": "elements are pure substances.", "fol": "", "prediction": ["all x.(Element(x) -> PureSubstance(x))"]}
{"id": "entailmentbank_train_4424", "nl": "helium is a kind of element.", "fol": "", "prediction": ["all x.(Helium(x) -> Element(x))"]}
{"id": "entailmentbank_train_4425", "nl": "helium is a pure substance.", "fol": "", "prediction": ["all x.(Helium(x) -> PureSubstance(x))"]}
{"id": "entailmentbank_train_4426", "nl": "a balloon filled with helium is an example of a container filled with a pure substance.", "fol": "", "prediction": ["all x.((Balloon(x) & FilledWithHelium(x)) -> ContainerFilledWithPureSubstance(x))"]}
{"id": "entailmentbank_train_4427", "nl": "iron is a kind of element.", "fol": "", "prediction": ["all x.(Iron(x) -> Element(x))"]}
{"id": "entailmentbank_train_4428", "nl": "rust is made of iron and oxygen.", "fol": "", "prediction": ["all x.(Rust(x) -> (MadeOfIron(x) & MadeOfOxygen(x)))"]}
{"id": "entailmentbank_train_4429", "nl": "rust is made of iron and oxygen elements.", "fol": "", "prediction": ["all x.(Rust(x) -> (MadeOfIron(x) & MadeOfOxygen(x)))"]}
{"id": "entailmentbank_train_4430", "nl": "table salt is sodum chloride.", "fol": "", "prediction": ["all x.(TableSalt(x) -> SodumChloride(x))"]}
{"id": "entailmentbank_train_4431", "nl": "table salt is the product of sodium and chloride chemically combined.", "fol": "", "prediction": ["all x.(TableSalt(x) -> (ProductOfSodium(x) & ProductOfChloride(x) & ChemicallyCombined(x)))"]}
{"id": "entailmentbank_train_4432", "nl": "oxygen combines with hydrogen.", "fol": "", "prediction": ["all x.(Oxygen(x) -> CombinesWithHydrogen(x))"]}
{"id": "entailmentbank_train_4433", "nl": "oxygen combining with hydrogen will form water.", "fol": "", "prediction": ["all x.((Oxygen(x) & Hydrogen(x)) -> FormsWater(x))"]}
{"id": "entailmentbank_train_4434", "nl": "the chemical formula of water is h2o.", "fol": "", "prediction": ["all x.((ChemicalFormation(x) & Water(x)) -> H2o(x))"]}
{"id": "entailmentbank_train_4435", "nl": "the number in chemical formula shows the number of atoms of each element in a molecule.", "fol": "", "prediction": ["all x y.((NumberInChemicalFormation(x) & Atoms(y)) -> ShowsNumberInMolecule(x,y))"]}
{"id": "entailmentbank_train_4436", "nl": "the number in chemical formula of water shows the number of atoms of each element in a water molecule.", "fol": "", "prediction": ["all x y.((NumberInChemicalFormationOfWater(x) & Atoms(y)) -> ShowsNumberInWaterMolecule(x,y))"]}
{"id": "entailmentbank_train_4437", "nl": "the number in chemical formula of water shows the number of hygrogen and oxygen in a water molecule.", "fol": "", "prediction": ["all x y.((ChemicalFormation(x) & Water(y)) -> ShowsHygrogenAndOxygenInWaterMolecule(x,y))"]}
{"id": "entailmentbank_train_4438", "nl": "a molecule of water is made of 2 hydrogen atoms and 1 oxygen atom.", "fol": "", "prediction": ["all x.(MoleculeOfWater(x) -> (HasHydrogenAtoms(x,2) & HasOxygenAtoms(x,1)))"]}
{"id": "entailmentbank_train_4439", "nl": "oxygen reacts with iron to produce rust.", "fol": "", "prediction": ["all x y.((Oxygen(x) & Iron(y)) -> ReactsToProduceRust(x,y))"]}
{"id": "entailmentbank_train_4440", "nl": "iron and oxygen elements stay the same after the reaction.", "fol": "", "prediction": ["all x.((Iron(x) & Oxygen(x)) -> StaysSameAfterReaction(x))"]}
{"id": "entailmentbank_train_4441", "nl": "oxygen reacts with hydrogen to produce water.", "fol": "", "prediction": ["all x y.((Oxygen(x) & Hydrogen(y)) -> ReactsToProduceWater(x,y))"]}
{"id": "entailmentbank_train_4442", "nl": "oxygen and hyrdrogen elements stay the same after the reaction.", "fol": "", "prediction": ["all x y.((Oxygen(x) & Hyrdrogen(y)) -> StaysSameAfterReaction(x,y))"]}
{"id": "entailmentbank_train_4443", "nl": "the elements of two reactions stay the same.", "fol": "", "prediction": ["all x.(Reaction(x) -> SameElements(x))"]}
{"id": "entailmentbank_train_4444", "nl": "carbon is a kind of element.", "fol": "", "prediction": ["all x.(Carbon(x) -> Element(x))"]}
{"id": "entailmentbank_train_4445", "nl": "sugar is made of carbon, hydrogen, oxygen.", "fol": "", "prediction": ["all x.(Sugar(x) -> (MadeOfCarbon(x) & MadeOfHydrogen(x) & MadeOfOxygen(x)))"]}
{"id": "entailmentbank_train_4446", "nl": "sugar is made of at least three different elements.", "fol": "", "prediction": ["all x.(Sugar(x) -> exists y.(Element(y) & MadeOf(x,y))))"]}
{"id": "entailmentbank_train_4447", "nl": "sugar is a kind of compound.", "fol": "", "prediction": ["all x.(Sugar(x) -> Compound(x))"]}
{"id": "entailmentbank_train_4448", "nl": "organic compounds mainly are made of carbon / hydrogen / oxygen / nitrogen.", "fol": "", "prediction": ["all x.(OrganicCompound(x) -> (MadeOfCarbon(x) & MadeOfHydrogen(x) & MadeOfOxygen(x) & MadeOfNitrogen(x)))"]}
{"id": "entailmentbank_train_4449", "nl": "hydrogen can be found in organic compounds.", "fol": "", "prediction": ["all x.(Hydrogen(x) -> FoundInOrganicCompounds(x))"]}
{"id": "entailmentbank_train_4450", "nl": "first-aid instant cold pack is a kind of cold pack.", "fol": "", "prediction": ["all x.(FirstAidInstantColdPack(x) -> ColdPack(x))"]}
{"id": "entailmentbank_train_4451", "nl": "cold pack reaction is a kind of endothermic reaction.", "fol": "", "prediction": ["all x.(ColdPackReaction(x) -> EndothermicReaction(x))"]}
{"id": "entailmentbank_train_4452", "nl": "first-aid instant cold pack is a kind of endothermic reaction.", "fol": "", "prediction": ["all x.(FirstAidInstantColdPack(x) -> EndothermicReaction(x))"]}
{"id": "entailmentbank_train_4453", "nl": "structure is a property of an object.", "fol": "", "prediction": ["all x y.((Structure(x) & Object(y)) -> PropertyOf(x,y))"]}
{"id": "entailmentbank_train_4454", "nl": "structure of an atom is a property of the atom.", "fol": "", "prediction": ["all x y.((Atom(x) & Atom(y)) -> PropertyOf(x,y))"]}
{"id": "entailmentbank_train_4455", "nl": "organizing is sorting things in order by their properties.", "fol": "", "prediction": ["all x y.((Organizing(x) & Things(y)) -> SortsInOrderByProperties(x,y))"]}
{"id": "entailmentbank_train_4456", "nl": "structure of atoms can be used to organize atoms in order.", "fol": "", "prediction": ["all x.((AtomStructure(x) & OrganizedInOrder(x)) -> CanOrganize(x,Atoms))"]}
{"id": "entailmentbank_train_4457", "nl": "atoms of different elements have different structures.", "fol": "", "prediction": ["all x.((Atom(x) & Element(x)) -> DifferentStructure(x))"]}
{"id": "entailmentbank_train_4458", "nl": "structure of atoms of different elements can be used to organize atoms of different elements.", "fol": "", "prediction": ["all x y.((Atom(x) & Atom(y) & DifferentElements(x,y)) -> CanOrganize(x,y))"]}
{"id": "entailmentbank_train_4459", "nl": "magnesium and fluorine react chemically producing magnesium fluoride.", "fol": "", "prediction": ["all x y.((Magnesium(x) & Fluorine(y)) -> ReactsChemically(x,y))"]}
{"id": "entailmentbank_train_4460", "nl": "magnesium is a kind of alkaline earth metal.", "fol": "", "prediction": ["all x.(Magnesium(x) -> AlkalineEarthMetal(x))"]}
{"id": "entailmentbank_train_4461", "nl": "fluorine is a kind of gas.", "fol": "", "prediction": ["all x.(Fluorine(x) -> Gas(x))"]}
{"id": "entailmentbank_train_4462", "nl": "magnesium fluoride is a new substance produced by magnesium and fluorine reacting chemically.", "fol": "", "prediction": ["all x.(MagnesiumFluoride(x) -> (NewSubstance(x) & ProducedByMagnesiumAndFluidineReactingChemically(x)))"]}
{"id": "entailmentbank_train_4463", "nl": "a chemical reaction happened between magnesium and fluorine.", "fol": "", "prediction": ["all x y.((ChemicalReaction(x) & Magnesium(y) & Fluorine(y)) -> Happened(x,y))"]}
{"id": "entailmentbank_train_4464", "nl": "combining two substances chemically causes chemical reactions.", "fol": "", "prediction": ["all x y.((Substance(x) & Substance(y)) -> ChemicalReaction(x,y))"]}
{"id": "entailmentbank_train_4465", "nl": "a chemical reaction is caused by magnesium and fluorine are combined chemically.", "fol": "", "prediction": ["all x y.((ChemicalReaction(x) & Magnesium(y) & Fluorine(z)) -> ChemicallyCombined(x,y,z))"]}
{"id": "entailmentbank_train_4466", "nl": "iron oxide / rust / fe2o3 is made of iron and oxygen.", "fol": "", "prediction": ["all x.((IronOxygen(x) & Rust(x) & Fe2o3(x)) -> MadeOfIronAndOxygen(x))"]}
{"id": "entailmentbank_train_4467", "nl": "the chemical symbol for iron is fe.", "fol": "", "prediction": ["all x.((ChemicalSymbol(x) & Iron(x)) -> Fe(x))"]}
{"id": "entailmentbank_train_4468", "nl": "the chemical symbol for oxygen is o.", "fol": "", "prediction": ["all x.((ChemicalSymbol(x) & Oxygen(x)) -> O(x))"]}
{"id": "entailmentbank_train_4469", "nl": "the chemical symbols for the elements found in iron oxide is fe and o.", "fol": "", "prediction": ["all x.((ChemicalSymbol(x) & Element(x) & FoundInIronOxide(x)) -> (Fe(x) | O(x)))"]}
{"id": "entailmentbank_train_4470", "nl": "the atom is the smallest particle that has the properties of an element.", "fol": "", "prediction": ["all x.(Atom(x) -> (SmallestParticle(x) & HasPropertiesOfElement(x)))"]}
{"id": "entailmentbank_train_4471", "nl": "gold is a kind of element.", "fol": "", "prediction": ["all x.(Gold(x) -> Element(x))"]}
{"id": "entailmentbank_train_4472", "nl": "gold atom is the smallest particle that can be classified as gold.", "fol": "", "prediction": ["all x.(GoldAtom(x) -> (SmallestParticle(x) & CanBeClassifiedAsGold(x)))"]}
{"id": "entailmentbank_train_4473", "nl": "chemical reactivity is a property of elements and includes ordered values of reactive / unreactive.", "fol": "", "prediction": ["all x.(ChemicalReactivity(x) -> (PropertyOfElements(x) & IncludesOrderedValues(x,Reactive) & IncludesOrderedValues(x,Unreactive)))"]}
{"id": "entailmentbank_train_4474", "nl": "elements in the same group on the periodic table of elements have similar properties.", "fol": "", "prediction": ["all x.((Element(x) & SameGroup(x) & PeriodicTableOfElements(x)) -> SimilarProperties(x))"]}
{"id": "entailmentbank_train_4475", "nl": "elements from the same group on the periodic table are similar in chemical reactivity.", "fol": "", "prediction": ["all x.((Elements(x) & SameGroup(x) & PeriodicTable(x)) -> SimilarChemicalReactivity(x))"]}
{"id": "entailmentbank_train_4476", "nl": "if something is made of something else, then that something else will be the component of that something.", "fol": "", "prediction": ["all x.((MadeOf(x,y) & MadeOf(y,z)) -> ComponentOf(z,y))"]}
{"id": "entailmentbank_train_4477", "nl": "oxygen is a component of organic compounds.", "fol": "", "prediction": ["all x.(Oxygen(x) -> ComponentOfOrganicCompounds(x))"]}
{"id": "entailmentbank_train_4478", "nl": "a component of something means a part of something.", "fol": "", "prediction": ["all x y.((Component(x) & Something(y)) -> MeansPartOf(x,y))"]}
{"id": "entailmentbank_train_4479", "nl": "oxygen is a part of many organic molecules.", "fol": "", "prediction": ["all x.(Oxygen(x) -> PartOfOrganicMolecules(x))"]}
{"id": "entailmentbank_train_4480", "nl": "state of matter is a property of matter and includes ordered values of solid / liquid / gas.", "fol": "", "prediction": ["all x.(StateOfMatter(x) -> (PropertyOfMatter(x) & IncludesOrderedValues(x,Solid,Liquid,Gas)))"]}
{"id": "entailmentbank_train_4481", "nl": "hydrogen is gas in state of matter.", "fol": "", "prediction": ["all x.(Hydrogen(x) -> GasInStateOfMatter(x))"]}
{"id": "entailmentbank_train_4482", "nl": "being a gas is a physical property of hydrogen.", "fol": "", "prediction": ["all x.(Gas(x) -> PhysicalPropertyOfHydrogen(x))"]}
{"id": "entailmentbank_train_4483", "nl": "a periodic table is a kind of scientific model.", "fol": "", "prediction": ["all x.(PeriodicTable(x) -> ScientificModel(x))"]}
{"id": "entailmentbank_train_4484", "nl": "the periodic table of elements can be used for predicting the properties of an element.", "fol": "", "prediction": ["all x y.((PeriodicTableOfElements(x) & Element(y)) -> CanPredictProperties(x,y))"]}
{"id": "entailmentbank_train_4485", "nl": "a periodic table is the scientific model that can be used to predict the properties of an element.", "fol": "", "prediction": ["all x.(PeriodicTable(x) -> (ScientificModel(x) & CanPredictProperties(x)))"]}
{"id": "entailmentbank_train_4486", "nl": "proton is a kind of subatomic particles.", "fol": "", "prediction": ["all x.(Proton(x) -> SubatomicParticle(x))"]}
{"id": "entailmentbank_train_4487", "nl": "an element is identified by its number of protons.", "fol": "", "prediction": ["all x.((Element(x) & NumberOfProtons(x)) -> IdentifiedBy(x,y))"]}
{"id": "entailmentbank_train_4488", "nl": "an element is identified by the number of subatomic particles proton.", "fol": "", "prediction": ["all x.((Element(x) & NumberOfSubatomicParticles(x)) -> IdentifiedBy(x,y))"]}
{"id": "entailmentbank_train_4489", "nl": "gold element can be identified by its number of subatomic particles proton.", "fol": "", "prediction": ["all x.(GoldElement(x) -> NumberOfSubatomicParticles(x))"]}
{"id": "entailmentbank_train_4490", "nl": "calcium / berylliu belongs to alkaline earth metal family, group 2 on the periodic table.", "fol": "", "prediction": ["all x.((Calcium(x) | Berylliu(x)) -> (AlkalineEarthMetal(x) & Group2OnPeriodicTable(x)))"]}
{"id": "entailmentbank_train_4491", "nl": "beryllium has the most similar chemical properties to calcium.", "fol": "", "prediction": ["all x.(Beryllium(x) -> SimilarChemicalPropertiesToCalcium(x))"]}
{"id": "entailmentbank_train_4492", "nl": "an element is made of one kind of atoms.", "fol": "", "prediction": ["all x.(Element(x) -> MadeOfAtoms(x))"]}
{"id": "entailmentbank_train_4493", "nl": "aluminum is a kind of element.", "fol": "", "prediction": ["all x.(Aluminum(x) -> Element(x))"]}
{"id": "entailmentbank_train_4494", "nl": "aluminum is made of aluminum atoms.", "fol": "", "prediction": ["all x.(Aluminum(x) -> MadeOfAluminumAtoms(x))"]}
{"id": "entailmentbank_train_4495", "nl": "the atom is the smallest unit / particle that has the properties of an element.", "fol": "", "prediction": ["all x.(Atom(x) -> (SmallestUnit(x) & SmallestParticle(x) & HasPropertiesOfElement(x)))"]}
{"id": "entailmentbank_train_4496", "nl": "aluminum atom is the smallest particle that has the properties of aluminum.", "fol": "", "prediction": ["all x.(AluminumAtom(x) -> (SmallerParticle(x) & HasPropertiesOfAluminum(x)))"]}
{"id": "entailmentbank_train_4497", "nl": "elements from the same group in the periodic table are chemically reactive in a similar way.", "fol": "", "prediction": ["all x y.((Element(x) & Element(y) & SameGroup(x,y)) -> ChemicallyReactive(x))"]}
{"id": "entailmentbank_train_4498", "nl": "elements are all from the first groupd of the periodic table.", "fol": "", "prediction": ["all x.(Element(x) -> FirstGroupdOfPeriodicTable(x))"]}
{"id": "entailmentbank_train_4499", "nl": "elements from the first group are chemically reactive in a similar way.", "fol": "", "prediction": ["all x.((Elements(x) & FirstGroup(x)) -> ChemicallyReactive(x))"]}
{"id": "entailmentbank_train_4500", "nl": "if the elements have similar chemical reactivity, then the elements will react with other elements in a similar way.", "fol": "", "prediction": ["all x y.((Element(x) & Element(y) & SimilarChemicalReactivity(x,y)) -> ReactsWithElementsInSameManner(x,y))"]}
{"id": "entailmentbank_train_4501", "nl": "elements from the first group will react with other elements in a similar way.", "fol": "", "prediction": ["all x y.((Element(x) & Element(y)) -> ReactsInSameAnalyticalManner(x,y))"]}
{"id": "entailmentbank_train_4502", "nl": "elements from the first group will react with oxygen in a similar way.", "fol": "", "prediction": ["all x.((Elements(x) & FirstGroup(x)) -> ReactsWithOxygenInSameManner(x))"]}
{"id": "entailmentbank_train_4503", "nl": "strontium, barium, and radium have similar electrom configurations.", "fol": "", "prediction": ["all x.((Strontium(x) | Barium(x) | Radium(x)) -> SimilarElectrom(x))"]}
{"id": "entailmentbank_train_4504", "nl": "if the elements have similar electron configurations, then the elements will be grouped into same family / group on the periodic table of elements.", "fol": "", "prediction": ["all x.((Elements(x) & SimilarElectronConfigurations(x)) -> GroupedIntoSameFamily(x))"]}
{"id": "entailmentbank_train_4505", "nl": "strontium, barium, and radium are grouped together on the periodic table.", "fol": "", "prediction": ["all x y z.((Strontium(x) & Barium(y) & Radium(z)) -> GroupedOnPeriodicTable(x,y,z))"]}
{"id": "entailmentbank_train_4506", "nl": "a physical property is a kind of property.", "fol": "", "prediction": ["all x.(PhysicalProperty(x) -> Property(x))"]}
{"id": "entailmentbank_train_4507", "nl": "elements in the same group in the periodic table will have similar physical properties.", "fol": "", "prediction": ["all x.((Element(x) & SameGroup(x) & PeriodicTable(x)) -> SimilarPhysicalProperties(x))"]}
{"id": "entailmentbank_train_4508", "nl": "nitrogen and phosphorus belongs to nitrogen family, group 15 on the periodic table.", "fol": "", "prediction": ["all x.((Nitrogen(x) & Phosphorus(x)) -> (NitrogenFamily(x) & Group15(x)))"]}
{"id": "entailmentbank_train_4509", "nl": "nitrogen and phosphorus will have similar properties.", "fol": "", "prediction": ["all x.((Nitrogen(x) & Phosphorus(x)) -> SimilarProperties(x))"]}
{"id": "entailmentbank_train_4510", "nl": "the chemical symbol for phosphorus is p.", "fol": "", "prediction": ["all x.(Phosphorus(x) -> ChemicalSymbol(x))"]}
{"id": "entailmentbank_train_4511", "nl": "the chemical symbol for nitrogen is n.", "fol": "", "prediction": ["all x.(ChemicalSymbol(x) -> Nitrogen(x))"]}
{"id": "entailmentbank_train_4512", "nl": "n and p will have similar properties.", "fol": "", "prediction": ["all x y.((N(x) & p(y)) -> SimilarProperties(x,y))"]}
{"id": "entailmentbank_train_4513", "nl": "elements in group 18 have full / complete outer electron shells on the periodic table of elements.", "fol": "", "prediction": ["all x.((Element(x) & Group18(x)) -> (FullOuterElectronShells(x) & CompleteOuterElectronShells(x)))"]}
{"id": "entailmentbank_train_4514", "nl": "the outer electron shell is a part of the electron configuration.", "fol": "", "prediction": ["all x.(OuterElectronShell(x) -> PartOfElectronConfiguration(x))"]}
{"id": "entailmentbank_train_4515", "nl": "elements in group 18 have similar electron configuration.", "fol": "", "prediction": ["all x.((Element(x) & Group18(x)) -> SimilarElectronConfiguration(x))"]}
{"id": "entailmentbank_train_4516", "nl": "elements in group 18 are grouped together because they have similar electron configuration.", "fol": "", "prediction": ["all x.((ElementsInGroup18(x) & SimilarElectronConfiguration(x)) -> GroupedTogether(x))"]}
{"id": "entailmentbank_train_4517", "nl": "if the elements are in the same family, then the elements will share the same number of valence electrons.", "fol": "", "prediction": ["all x.((ElementsInSameFamily(x) & SameValenceElectrons(x)) -> SameValenceElectrons(x))"]}
{"id": "entailmentbank_train_4518", "nl": "elements in carbon family have four valence electrons.", "fol": "", "prediction": ["all x.((Element(x) & CarbonFamily(x)) -> HasValenceElectrons(x,4))"]}
{"id": "entailmentbank_train_4519", "nl": "elements in the carbon family share the same number of valence electrons.", "fol": "", "prediction": ["all x.((Element(x) & CarbonFamily(x)) -> SameValenceElectrons(x))"]}
{"id": "entailmentbank_train_4520", "nl": "the chemical symbol for sodium is na.", "fol": "", "prediction": ["all x.((ChemicalSymbol(x) & ForSodium(x)) -> Na(x))"]}
{"id": "entailmentbank_train_4521", "nl": "sodium and potassium  belong to alkali metals, group 1 on the periodic table.", "fol": "", "prediction": ["all x.((Sodium(x) | Potassium(x)) -> AlkaliMetal(x))"]}
{"id": "entailmentbank_train_4522", "nl": "the chemical symbol for potassium is k.", "fol": "", "prediction": ["all x.((ChemicalSymbol(x) & Potassium(x)) -> k(x))"]}
{"id": "entailmentbank_train_4523", "nl": "na and k are in the same group.", "fol": "", "prediction": ["all x y.((Na(x) & K(y)) -> InSameGroup(x,y))"]}
{"id": "entailmentbank_train_4524", "nl": "mercury is a kind of metal.", "fol": "", "prediction": ["all x.(Quecksilber(x) -> Metal(x))"]}
{"id": "entailmentbank_train_4525", "nl": "mercury is a metal that is liquid at room temperature.", "fol": "", "prediction": ["all x.(Mercury(x) -> (Metal(x) & LiquidAtRoomTemperature(x)))"]}
{"id": "entailmentbank_train_4526", "nl": "metals are usually solid at room temperature.", "fol": "", "prediction": ["all x.(Metal(x) -> SolidAtRoomTemperature(x))"]}
{"id": "entailmentbank_train_4527", "nl": "mercury is different from other metals.", "fol": "", "prediction": ["all x.(Melt(x) -> DifferentFrom(x,y))"]}
{"id": "entailmentbank_train_4528", "nl": "argon is a kind of nonmetal.", "fol": "", "prediction": ["all x.(Argon(x) -> Nonmetal(x))"]}
{"id": "entailmentbank_train_4529", "nl": "nonmetals usually have lower conductivity.", "fol": "", "prediction": ["all x.(Nonmetal(x) -> LowerConductivity(x))"]}
{"id": "entailmentbank_train_4530", "nl": "argon is the less conductive nonmetal.", "fol": "", "prediction": ["all x.(Argon(x) -> (LessConductive(x) & NonMetal(x)))"]}
{"id": "entailmentbank_train_4531", "nl": "argon is a kind of element.", "fol": "", "prediction": ["all x.(Argon(x) -> Element(x))"]}
{"id": "entailmentbank_train_4532", "nl": "argon is the less conductive element.", "fol": "", "prediction": ["all x.(Argon(x) -> LessConductiveElement(x))"]}
{"id": "entailmentbank_train_4533", "nl": "the periodic table of elements can be used for predicting / determining the properties of an element.", "fol": "", "prediction": ["all x y.((PeriodicTableOfElements(x) & Element(y)) -> (PredictsProperties(x,y) | DeterminesProperties(x,y)))"]}
{"id": "entailmentbank_train_4534", "nl": "the periodic table of elements is the model that can be used to determine the properties of elements.", "fol": "", "prediction": ["all x.(PeriodicTableOfElements(x) -> ModelForDeterminingPropertiesOfElements(x))"]}
{"id": "entailmentbank_train_4535", "nl": "water is a kind of liquid.", "fol": "", "prediction": ["all x.(Water(x) -> Liquid(x))"]}
{"id": "entailmentbank_train_4536", "nl": "the highest temperature a liquid can reach is it's boiling point.", "fol": "", "prediction": ["all x.((Liquid(x) & BoilingPoint(x)) -> HighestTemperature(x))"]}
{"id": "entailmentbank_train_4537", "nl": "the highest temperature water can reach is it's boiling point.", "fol": "", "prediction": ["all x.((Water(x) & BoilingPoint(x)) -> HighestTemperature(x))"]}
{"id": "entailmentbank_train_4538", "nl": "the boiling point of water is 100c.", "fol": "", "prediction": ["all x.(BoilingPoint(x) -> 100c(x))"]}
{"id": "entailmentbank_train_4539", "nl": "the highest temperature water can reach is 100c.", "fol": "", "prediction": ["all x.((Water(x) & HighestTemperature(x,100)) -> HighestTemperature(x,100))"]}
{"id": "entailmentbank_train_4540", "nl": "a pot is a kind of container.", "fol": "", "prediction": ["all x.(Pot(x) -> Container(x))"]}
{"id": "entailmentbank_train_4541", "nl": "if a container contains something then that container touches that something.", "fol": "", "prediction": ["all x y.((Container(x) & Contains(x,y)) -> Touches(x,y))"]}
{"id": "entailmentbank_train_4542", "nl": "if a pot contains something then that pot touches that something.", "fol": "", "prediction": ["all x.((Pot(x) & Contains(x,y)) -> Touches(x,y))"]}
{"id": "entailmentbank_train_4543", "nl": "a pot contains water.", "fol": "", "prediction": ["all x.(Pot(x) -> ContainsWater(x))"]}
{"id": "entailmentbank_train_4544", "nl": "the pot is touching the water.", "fol": "", "prediction": ["all x.(Pot(x) -> TouchingWater(x))"]}
{"id": "entailmentbank_train_4545", "nl": "a pot is made of metal for cooking.", "fol": "", "prediction": ["all x.(Pot(x) -> MadeOfMetal(x))"]}
{"id": "entailmentbank_train_4546", "nl": "a pot is a thermal energy conductor.", "fol": "", "prediction": ["all x.(Pot(x) -> ThermalEnergyConductor(x))"]}
{"id": "entailmentbank_train_4547", "nl": "a stove is a source of heat.", "fol": "", "prediction": ["all x.(Stove(x) -> SourceOfHeat(x))"]}
{"id": "entailmentbank_train_4548", "nl": "if a thermal conductor is exposed to a source of heat then that conductor may become hot.", "fol": "", "prediction": ["all x y.((ThermalConductor(x) & ExposedToHeat(x)) -> MayBecomeHot(x))"]}
{"id": "entailmentbank_train_4549", "nl": "if a thermal conductor is exposed to a stove then that conductor may become hot.", "fol": "", "prediction": ["all x y.((ThermalConductor(x) & ExposedToStove(x)) -> MayBecomeHot(y))"]}
{"id": "entailmentbank_train_4550", "nl": "if a pot is exposed to a stove then that pot may become hot.", "fol": "", "prediction": ["all x y.((Pot(x) & ExposedToStove(x)) -> MayBecomeHot(x))"]}
{"id": "entailmentbank_train_4551", "nl": "the pot is exposed to a stove.", "fol": "", "prediction": ["all x y.((Pot(x) & Stove(y)) -> ExposedTo(x,y))"]}
{"id": "entailmentbank_train_4552", "nl": "the pot will become hot.", "fol": "", "prediction": ["all x.(Pot(x) -> Hot(x))"]}
{"id": "entailmentbank_train_4553", "nl": "the hot pot is touching the water.", "fol": "", "prediction": ["all x.(HotPot(x) -> TouchingWater(x))"]}
{"id": "entailmentbank_train_4554", "nl": "if an object is hot and it touches something, that something will increase temperature by absorbing heat energy from the object.", "fol": "", "prediction": ["all x y.((Hot(x) & Touches(x)) -> IncreasesTemperatureByAbsorbingHeatEnergy(y))"]}
{"id": "entailmentbank_train_4555", "nl": "the water will increase temperature by absorbing heat energy from the pot.", "fol": "", "prediction": ["all x y.((Water(x) & Pot(y)) -> IncreasesTemperatureByAbsorbingHeatEnergy(x,y))"]}
{"id": "entailmentbank_train_4556", "nl": "heating means adding heat.", "fol": "", "prediction": ["all x.(Heating(x) -> AddsHeat(x))"]}
{"id": "entailmentbank_train_4557", "nl": "boiling happens when liquids are heated above their boiling point.", "fol": "", "prediction": ["all x.((LiquidsHeatedAboveBoilingPoint(x)) -> Boiling(x))"]}
{"id": "entailmentbank_train_4558", "nl": "boiling happens when liquids increase heat energy above their boiling point.", "fol": "", "prediction": ["all x.((Liquid(x) & IncreasesHeatEnergyAboveBoilingPoint(x)) -> Boiling(x))"]}
{"id": "entailmentbank_train_4559", "nl": "boiling happens when water increases heat energy above its boiling point.", "fol": "", "prediction": ["all x.((Water(x) & IncreasesHeatEnergyAboveBoilingPoint(x)) -> Boiling(x))"]}
{"id": "entailmentbank_train_4560", "nl": "the water will boil if heat energy absorbed from the pot is increased past the boiling point.", "fol": "", "prediction": ["all x.((Water(x) & HeatEnergyIncreased(x) & PastBoilingPoint(x)) -> Boil(x))"]}
{"id": "entailmentbank_train_4561", "nl": "water is in a boiling process.", "fol": "", "prediction": ["all x.(Water(x) -> BoilingProcess(x))"]}
{"id": "entailmentbank_train_4562", "nl": "boiling means matter / a substance changes from a liquid into a gas by increasing heat energy.", "fol": "", "prediction": ["all x y.((Boiling(x) & Substance(y)) -> (ChangesFromLiquidToGas(y) & IncreasesHeatEnergy(y)))"]}
{"id": "entailmentbank_train_4563", "nl": "the heat energy of water is increasing.", "fol": "", "prediction": ["all x.(HeatEnergy(x) -> Increased(x))"]}
{"id": "entailmentbank_train_4564", "nl": "the temperature of water is increasing.", "fol": "", "prediction": ["all x.(WaterTemperature(x) -> Increases(x))"]}
{"id": "entailmentbank_train_4565", "nl": "as the temperature of a substance increases, the molecules in that substance will move faster and farther apart.", "fol": "", "prediction": ["all x y.((Substance(x) & Temperature(y) & Increases(y)) -> Mobilization(x,y))"]}
{"id": "entailmentbank_train_4566", "nl": "the water molecules will move faster and farther apart.", "fol": "", "prediction": ["all x.(WaterMolecule(x) -> (MovesFaster(x) & MovesFarFarFarApart(x)))"]}
{"id": "entailmentbank_train_4567", "nl": "boiling is a kind of phase change.", "fol": "", "prediction": ["all x.(Boiling(x) -> PhaseChange(x))"]}
{"id": "entailmentbank_train_4568", "nl": "phase changes happen at phase transition points.", "fol": "", "prediction": ["all x.(PhaseChange(x) -> HappensAtPhaseTransitionPoint(x))"]}
{"id": "entailmentbank_train_4569", "nl": "boiling means a substance changes from a liquid into a gas by increasing heat energy.", "fol": "", "prediction": ["all x y.((Substance(x) & Liquid(y) & Gas(y)) -> ChangesByIncreasedHeatEnergy(x,y))"]}
{"id": "entailmentbank_train_4570", "nl": "the substance will change from liquid to gas when it is heated over its boiling point.", "fol": "", "prediction": ["all x.((Substance(x) & HeatedOverBoilingPoint(x)) -> ChangesFromLiquidToGas(x))"]}
{"id": "entailmentbank_train_4571", "nl": "evaporating is a kind of phase change.", "fol": "", "prediction": ["all x.(Evaporating(x) -> PhaseChange(x))"]}
{"id": "entailmentbank_train_4572", "nl": "condensing is a kind of phase change.", "fol": "", "prediction": ["all x.(Condensing(x) -> PhaseChange(x))"]}
{"id": "entailmentbank_train_4573", "nl": "evaporating and condensing are both phase change.", "fol": "", "prediction": ["all x.((Evaporating(x) & Condensing(x)) -> PhaseChange(x))"]}
{"id": "entailmentbank_train_4574", "nl": "temperature changing can cause phase changes.", "fol": "", "prediction": ["all x.(TemperatureChange(x) -> CausesPhaseChange(x))"]}
{"id": "entailmentbank_train_4575", "nl": "evaporating and condensing can both be caused by temperature changing.", "fol": "", "prediction": ["all x.((Evaporating(x) & Condensing(x)) -> CausedByTemperatureChange(x))"]}
{"id": "entailmentbank_train_4576", "nl": "evaporating and condensing can both be caused by the change of heat energy.", "fol": "", "prediction": ["all x.((Evaporating(x) | Condensing(x)) -> CausedByChangeOfHeatEnergy(x))"]}
{"id": "entailmentbank_train_4577", "nl": "condensing means matter / a substance changes from a gas into a liquid by decreasing heat energy.", "fol": "", "prediction": ["all x y.((CondensingMatter(x) & Substance(y)) -> (ChangesFromGasToLiquid(x,y) & DecreasesHeatEnergy(x,y)))"]}
{"id": "entailmentbank_train_4578", "nl": "water is in the gas state, called water vapor / steam.", "fol": "", "prediction": ["all x.(Water(x) -> (GasState(x) & WaterVapor(x) & WaterSteam(x)))"]}
{"id": "entailmentbank_train_4579", "nl": "water condensing is when water changes from water vapor to liquid water.", "fol": "", "prediction": ["all x.(WaterCondensing(x) -> WaterChangesFromWaterVaporToLiquidWater(x))"]}
{"id": "entailmentbank_train_4580", "nl": "condensation is a kind of process.", "fol": "", "prediction": ["all x.(Condensation(x) -> Process(x))"]}
{"id": "entailmentbank_train_4581", "nl": "water will change from water vapor to liquid water in the process of condensing.", "fol": "", "prediction": ["all x y.((Water(x) & WaterVapor(y)) -> ChangesFromToLiquidWater(x,y))"]}
{"id": "entailmentbank_train_4582", "nl": "the water changes from steam to liquid.", "fol": "", "prediction": ["all x.(Water(x) -> (ChangesFromSteamToLiquid(x)))"]}
{"id": "entailmentbank_train_4583", "nl": "condensation is when matter / a substance changes from a gas into a liquid by decreasing heat energy.", "fol": "", "prediction": ["all x y.((Condensation(x) & Matter(y) & Substance(z)) -> ChangesFromGasToLiquid(x,y,z))"]}
{"id": "entailmentbank_train_4584", "nl": "water has condensed in this example.", "fol": "", "prediction": ["all x.((Water(x) & CondensedInExample(x)) -> Condensed(x))"]}
{"id": "entailmentbank_train_4585", "nl": "the water decreased heat energy.", "fol": "", "prediction": ["all x.(Water(x) -> DecreasedHeatEnergy(x))"]}
{"id": "entailmentbank_train_4586", "nl": "as the temperature of a substance / an object decreases, the molecules in that substance will move slower and closer together.", "fol": "", "prediction": ["all x y.((Substance(x) & Object(y) & DecreasesTemperature(x,y)) -> MovesSlowerAndCruegerTogether(x,y))"]}
{"id": "entailmentbank_train_4587", "nl": "the molecules of water will move slower and closer together.", "fol": "", "prediction": ["all x.(Molecule(x) -> (MovementSlower(x) & MovesCloser(x)))"]}
{"id": "entailmentbank_train_4588", "nl": "the water is absorbing sunlight.", "fol": "", "prediction": ["all x.(Water(x) -> AbsorbsSunlight(x))"]}
{"id": "entailmentbank_train_4589", "nl": "the water will increase in temperature.", "fol": "", "prediction": ["all x.(Water(x) -> IncreasesTemperature(x))"]}
{"id": "entailmentbank_train_4590", "nl": "the water will increase in heat energy.", "fol": "", "prediction": ["all x.(Water(x) -> IncreasesHeatEnergy(x))"]}
{"id": "entailmentbank_train_4591", "nl": "boiling / evaporation means matter / a substance changes from a liquid into a gas by increasing heat energy.", "fol": "", "prediction": ["all x y.((Boiling(x) & Evaporation(x)) -> (Matter(y) & Substance(x) & ChangesFromLiquidToGas(x) & IncreasesHeatEnergy(x)))"]}
{"id": "entailmentbank_train_4592", "nl": "the water will evaporate.", "fol": "", "prediction": ["all x.(Water(x) -> Evaporates(x))"]}
{"id": "entailmentbank_train_4593", "nl": "the water was boiled.", "fol": "", "prediction": ["all x.(Water(x) -> Boilt(x))"]}
{"id": "entailmentbank_train_4594", "nl": "boiling causes the volume of a liquid to decrease.", "fol": "", "prediction": ["all x y.((Liquid(x) & Boiling(y)) -> VolumeDecrease(x,y))"]}
{"id": "entailmentbank_train_4595", "nl": "the volume of water decreased.", "fol": "", "prediction": ["all x.(WaterVolume(x) -> Decreased(x))"]}
{"id": "entailmentbank_train_4596", "nl": "the kinetic energy of water molecules are increasing.", "fol": "", "prediction": ["all x.((WaterMolecule(x) & KineticEnergy(x)) -> Increased(x))"]}
{"id": "entailmentbank_train_4597", "nl": "as the amount of heat energy of a substance increases, the amount of kinetic energy will increase.", "fol": "", "prediction": ["all x y.((Substance(x) & HeatEnergy(y) & Increases(x,y)) -> KineticEnergy(x,y))"]}
{"id": "entailmentbank_train_4598", "nl": "the amount of heat energy of water is increasing.", "fol": "", "prediction": ["all x.((Water(x) & HeatEnergy(x)) -> Increases(x))"]}
{"id": "entailmentbank_train_4599", "nl": "water will change from a liquid into gas.", "fol": "", "prediction": ["all x.(Water(x) -> ChangesFromLiquidToGas(x))"]}
{"id": "entailmentbank_train_4600", "nl": "a wet towel exists.", "fol": "", "prediction": ["exists x.(WetTowel(x) & WetTowel(x))"]}
{"id": "entailmentbank_train_4601", "nl": "a wet object contains water.", "fol": "", "prediction": ["all x.(WetObject(x) -> ContainsWater(x))"]}
{"id": "entailmentbank_train_4602", "nl": "a wet towel contains water.", "fol": "", "prediction": ["all x.(WetTowel(x) -> ContainsWater(x))"]}
{"id": "entailmentbank_train_4603", "nl": "the wet towel is in the sun.", "fol": "", "prediction": ["all x.(WetTowel(x) -> InSun(x))"]}
{"id": "entailmentbank_train_4604", "nl": "if an object is in the sunlight then that object will absorb solar energy.", "fol": "", "prediction": ["all x.((Object(x) & InSunlight(x)) -> AbsorbsSolarEnergy(x))"]}
{"id": "entailmentbank_train_4605", "nl": "the wet towel will absorb solar energy.", "fol": "", "prediction": ["all x.(WetTowel(x) -> AbsorbsSolarEnergy(x))"]}
{"id": "entailmentbank_train_4606", "nl": "the wet towel will heat.", "fol": "", "prediction": ["all x.(WetTowel(x) -> Heats(x))"]}
{"id": "entailmentbank_train_4607", "nl": "heating the wet towel will also heat the things it contains.", "fol": "", "prediction": ["all x.(HeatingWetTowel(x) -> HeatsThings(x))"]}
{"id": "entailmentbank_train_4608", "nl": "the water will heat.", "fol": "", "prediction": ["all x.(Water(x) -> Heats(x))"]}
{"id": "entailmentbank_train_4609", "nl": "heating means increasing heat energy.", "fol": "", "prediction": ["all x.(Heating(x) -> IncreasesHeatEnergy(x))"]}
{"id": "entailmentbank_train_4610", "nl": "the water will increase heat energy.", "fol": "", "prediction": ["all x.(Water(x) -> IncreasesHeatEnergy(x))"]}
{"id": "entailmentbank_train_4611", "nl": "evaporation causes amount of liquid to decrease.", "fol": "", "prediction": ["all x.(Evaporation(x) -> DecreasesLiquidAmount(x))"]}
{"id": "entailmentbank_train_4612", "nl": "drying means the amount of liquid decreases.", "fol": "", "prediction": ["all x.(Drying(x) -> DecreasesLiquidAmount(x))"]}
{"id": "entailmentbank_train_4613", "nl": "evaporation causes liquids to dry.", "fol": "", "prediction": ["all x.(Evaporation(x) -> CausesLiquidsToDry(x))"]}
{"id": "entailmentbank_train_4614", "nl": "the wet towel will dry because the water in the towel evaporates.", "fol": "", "prediction": ["all x.((WetTowel(x) & WaterEvaporates(x)) -> Dry(x))"]}
{"id": "entailmentbank_train_4615", "nl": "if water absorbs solar energy then water will increase in temperature.", "fol": "", "prediction": ["all x.((Water(x) & AbsorbsSolarEnergy(x)) -> IncreasesTemperature(x))"]}
{"id": "entailmentbank_train_4616", "nl": "puddles of water are outside during the day.", "fol": "", "prediction": ["all x.(PuddleOfWater(x) -> OutsideDuringDay(x))"]}
{"id": "entailmentbank_train_4617", "nl": "puddles of water are outside in the sunlight.", "fol": "", "prediction": ["all x.(PuddleOfWater(x) -> OutsideInSunlight(x))"]}
{"id": "entailmentbank_train_4618", "nl": "if something is in the sunlight then that something will absorb solar energy.", "fol": "", "prediction": ["all x.((Sunlight(x) & InSunlight(x)) -> AbsorbsSolarEnergy(x))"]}
{"id": "entailmentbank_train_4619", "nl": "puddles of water will absorb solar energy.", "fol": "", "prediction": ["all x.(PuddleOfWater(x) -> AbsorbsSolarEnergy(x))"]}
{"id": "entailmentbank_train_4620", "nl": "the puddles of water will increase in temperature.", "fol": "", "prediction": ["all x.((Puddle(x) & Water(y)) -> IncreasesTemperature(x,y))"]}
{"id": "entailmentbank_train_4621", "nl": "the puddles of water will increase in heat energy.", "fol": "", "prediction": ["all x.((Puddle(x) & Water(y)) -> IncreasesHeatEnergy(x,y))"]}
{"id": "entailmentbank_train_4622", "nl": "the puddles of water will evaporate.", "fol": "", "prediction": ["all x.(PuddleOfWater(x) -> Evaporate(x))"]}
{"id": "entailmentbank_train_4623", "nl": "water evaporating means water changes from a liquid into a gas by increasing heat energy.", "fol": "", "prediction": ["all x.((WaterEvaporating(x) & Liquid(x) & Gas(x)) -> ChangesByIncreasedHeatEnergy(x))"]}
{"id": "entailmentbank_train_4624", "nl": "a puddle is a kind of body of water.", "fol": "", "prediction": ["all x.(Puddle(x) -> BodyOfWater(x))"]}
{"id": "entailmentbank_train_4625", "nl": "the water in the puddles changes from a liquid to gas when evaporating.", "fol": "", "prediction": ["all x y.((Puddle(x) & Water(y) & Evaporates(x,y)) -> ChangesFromLiquidToGas(y))"]}
{"id": "entailmentbank_train_4626", "nl": "the water in the puddles changes from a state of matter to another state of matter when evaporating.", "fol": "", "prediction": ["all x y.((Puddle(x) & Water(y) & Evaporating(x)) -> ChangesFromStateOfMatterToStateOfMatter(y))"]}
{"id": "entailmentbank_train_4627", "nl": "a pan is made of metal for cooking.", "fol": "", "prediction": ["all x.(Pan(x) -> MadeOfMetal(x))"]}
{"id": "entailmentbank_train_4628", "nl": "a pan is a thermal conductor.", "fol": "", "prediction": ["all x.(Pan(x) -> ThermalConductor(x))"]}
{"id": "entailmentbank_train_4629", "nl": "a flame are a part of a fire.", "fol": "", "prediction": ["all x.(Flame(x) -> PartOfFire(x))"]}
{"id": "entailmentbank_train_4630", "nl": "fire gives off light / heat / smoke.", "fol": "", "prediction": ["all x.(Fire(x) -> (GivesOffLight(x) & GivesOffHeat(x) & GivesOffSmoke(x)))"]}
{"id": "entailmentbank_train_4631", "nl": "the flame gives off heat.", "fol": "", "prediction": ["all x.(Flame(x) -> GivesOffHeat(x))"]}
{"id": "entailmentbank_train_4632", "nl": "the flame is a source of heat.", "fol": "", "prediction": ["all x.(Flame(x) -> SourceOfHeat(x))"]}
{"id": "entailmentbank_train_4633", "nl": "a pan is put on an open flame.", "fol": "", "prediction": ["all x.(Pan(x) -> PutOnOpenFlame(x))"]}
{"id": "entailmentbank_train_4634", "nl": "if something is places over a heat source then that something is exposed to that heat source.", "fol": "", "prediction": ["all x y.((PlacesOverHeatSource(x) & HeatSource(y)) -> ExposedToHeatSource(x,y))"]}
{"id": "entailmentbank_train_4635", "nl": "the pan is exposed to a source of heat.", "fol": "", "prediction": ["all x.(Pan(x) -> ExposedToHeatSource(x))"]}
{"id": "entailmentbank_train_4636", "nl": "if thermal conductor is exposed to a source of heat then that conductor may become hot / warm.", "fol": "", "prediction": ["all x y.((ThermalConductor(x) & ExposedToHeat(x)) -> (BecomesHot(x) | Warm(x)))"]}
{"id": "entailmentbank_train_4637", "nl": "the pan will become hot.", "fol": "", "prediction": ["all x.(Pan(x) -> Hot(x))"]}
{"id": "entailmentbank_train_4638", "nl": "the pan will become a source of heat.", "fol": "", "prediction": ["all x.(Pan(x) -> SourceOfHeat(x))"]}
{"id": "entailmentbank_train_4639", "nl": "an ice cube is placed in the pan.", "fol": "", "prediction": ["all x.(IceCube(x) -> PlacedInPan(x))"]}
{"id": "entailmentbank_train_4640", "nl": "the ice cube is exposed to a source of heat.", "fol": "", "prediction": ["all x.(IceCube(x) -> ExposedToHeatSource(x))"]}
{"id": "entailmentbank_train_4641", "nl": "if a thermal conductor / an object is exposed to a source of heat then that conductor / that object may become hot / warm.", "fol": "", "prediction": ["all x y.((ThermalConductor(x) & ThermalObject(y) & ExposedToHeat(x,y)) -> (BecomesHot(x) | Warm(x)))"]}
{"id": "entailmentbank_train_4642", "nl": "the ice cube will become hot.", "fol": "", "prediction": ["all x.(IceCube(x) -> Hot(x))"]}
{"id": "entailmentbank_train_4643", "nl": "melting means a substance changes from a solid into a liquid by increasing heat energy.", "fol": "", "prediction": ["all x y.((Substance(x) & Solid(y) & Liquid(y)) -> ChangesByIncreasedHeatEnergy(x,y))"]}
{"id": "entailmentbank_train_4644", "nl": "the ice cube will melt and change into water exposed to a source of heat.", "fol": "", "prediction": ["all x.(IceCube(x) -> (Melts(x) & ChangesIntoWater(x) & ExposedToHeatSource(x)))"]}
{"id": "entailmentbank_train_4645", "nl": "if a substance is exposed to a source of heat then that substance may become hot / warm.", "fol": "", "prediction": ["all x.((Substance(x) & ExposedToHeatSource(x)) -> MayBecomeHot(x))"]}
{"id": "entailmentbank_train_4646", "nl": "the water from the melted ice cube will become hot.", "fol": "", "prediction": ["all x.((Water(x) & MeltedIceCube(x)) -> Hot(x))"]}
{"id": "entailmentbank_train_4647", "nl": "the water from the melted ice cube will then evaporate.", "fol": "", "prediction": ["all x y.((Water(x) & MeltedIceCube(y)) -> Evaporates(x,y))"]}
{"id": "entailmentbank_train_4648", "nl": "the temperature is 120 c.", "fol": "", "prediction": ["all x.(Temperature(x,120))"]}
{"id": "entailmentbank_train_4649", "nl": "the boiling point of water is 212f / 100c / 373k.", "fol": "", "prediction": ["all x.(BoilingPoint(x) -> (212f(x) | 100c(x) | 373k(x)))"]}
{"id": "entailmentbank_train_4650", "nl": "the temperature of 120 c is above 100 c.", "fol": "", "prediction": ["all x.((Temperature(x,120) & Above(x,100)) -> Above(x,120))"]}
{"id": "entailmentbank_train_4651", "nl": "water is in the gas state, called water vapor, for temperatures above 100 c.", "fol": "", "prediction": ["all x.((Water(x) & GasState(x) & TemperatureAbove100C(x)) -> WaterVapor(x))"]}
{"id": "entailmentbank_train_4652", "nl": "the water will be water vapor when the temperature is 120 c.", "fol": "", "prediction": ["all x.((Water(x) & Temperature(x,120)) -> WaterVapor(x))"]}
{"id": "entailmentbank_train_4653", "nl": "salt water is placed in sunlight for a day.", "fol": "", "prediction": ["all x.(SaltWater(x) -> PlacedInSunlight(x))"]}
{"id": "entailmentbank_train_4654", "nl": "the salt water will absorb solar energy.", "fol": "", "prediction": ["all x.(SaltWater(x) -> AbsorbsSolarEnergy(x))"]}
{"id": "entailmentbank_train_4655", "nl": "in the solution salt water, the solvent is water.", "fol": "", "prediction": ["all x.(Solvent(x) -> (SaltWater(x) & Water(x)))"]}
{"id": "entailmentbank_train_4656", "nl": "the water in the salt water will absorb solar energy.", "fol": "", "prediction": ["all x.((Water(x) & SaltWater(x)) -> AbsorbsSolarEnergy(x))"]}
{"id": "entailmentbank_train_4657", "nl": "the water in the salt water will increase in temperature.", "fol": "", "prediction": ["all x.((Water(x) & SaltWater(x)) -> IncreasesTemperature(x))"]}
{"id": "entailmentbank_train_4658", "nl": "the water in the salt water will increase in heat energy.", "fol": "", "prediction": ["all x.((Water(x) & SaltWater(x)) -> IncreasesHeatEnergy(x))"]}
{"id": "entailmentbank_train_4659", "nl": "the water in the salt water will evaporate.", "fol": "", "prediction": ["all x.((Water(x) & SaltWater(x)) -> Evaporates(x))"]}
{"id": "entailmentbank_train_4660", "nl": "if the solvent of a solution evaporate, then the solute of the solution will remain.", "fol": "", "prediction": ["all x y.((Solvent(x) & Solution(y) & Evaporates(x,y)) -> SoluteRemains(x,y))"]}
{"id": "entailmentbank_train_4661", "nl": "the solute of the salt water will remain after water evaporates.", "fol": "", "prediction": ["all x.((SaltWater(x) & Solute(x)) -> RemainsAfterWaterEvaporation(x))"]}
{"id": "entailmentbank_train_4662", "nl": "in the solution salt water, the solute is salt.", "fol": "", "prediction": ["all x.(Solute(x) -> SaltWater(x))"]}
{"id": "entailmentbank_train_4663", "nl": "the salt in the salt water will remain after the water evaporates.", "fol": "", "prediction": ["all x y.((Salt(x) & SaltWater(y) & Evaporates(y)) -> SaltRemainsAfter(x,y))"]}
{"id": "entailmentbank_train_4664", "nl": "water freezing is when water changing from a liquid to a solid.", "fol": "", "prediction": ["all x.(WaterFreezing(x) -> (WaterChangesFromLiquidToSolid(x)))"]}
{"id": "entailmentbank_train_4665", "nl": "there is moisture on the surface of the airplane.", "fol": "", "prediction": ["all x.(Moisture(x) -> AirplaneSurface(x))"]}
{"id": "entailmentbank_train_4666", "nl": "moisture is water in liquid form.", "fol": "", "prediction": ["all x.(Moisture(x) -> WaterInLiquidForm(x))"]}
{"id": "entailmentbank_train_4667", "nl": "there is water on the surface of the airplane.", "fol": "", "prediction": ["all x.(WaterOnSurface(x) -> Airplane(x))"]}
{"id": "entailmentbank_train_4668", "nl": "climbing increases altitude.", "fol": "", "prediction": ["all x.(Climbing(x) -> IncreasesAltitude(x))"]}
{"id": "entailmentbank_train_4669", "nl": "an airplane is climbing in the sky.", "fol": "", "prediction": ["all x.(Airplane(x) -> ClimbingInSky(x))"]}
{"id": "entailmentbank_train_4670", "nl": "the airplane is increasing in altitude.", "fol": "", "prediction": ["all x.(Airplane(x) -> IncreasedAltitude(x))"]}
{"id": "entailmentbank_train_4671", "nl": "the temperature of the air decreases when the altitude of the airplane increases.", "fol": "", "prediction": ["all x y.((Airplane(x) & Altitude(y) & Increases(x,y)) -> TemperatureDecreases(x,y))"]}
{"id": "entailmentbank_train_4672", "nl": "the water on the surface of the airplane will decrease in temperature.", "fol": "", "prediction": ["all x.((Water(x) & SurfaceOfAirplane(x)) -> DecreasesTemperature(x))"]}
{"id": "entailmentbank_train_4673", "nl": "the water on the surface of the airplane will freeze into ice.", "fol": "", "prediction": ["all x y.((Water(x) & Airplane(y) & Surface(x,y)) -> FreezesIntoIce(x))"]}
{"id": "entailmentbank_train_4674", "nl": "a freezer is used for cooling things.", "fol": "", "prediction": ["all x.(Freezer(x) -> UsedForCoolingThings(x))"]}
{"id": "entailmentbank_train_4675", "nl": "water is put in the freezer.", "fol": "", "prediction": ["all x.(Water(x) -> PutsInFreezer(x))"]}
{"id": "entailmentbank_train_4676", "nl": "the water will be cooled in the freezer.", "fol": "", "prediction": ["all x.(Water(x) -> CooledInFreezer(x))"]}
{"id": "entailmentbank_train_4677", "nl": "cooling / colder means removing / reducing / decreasing heat / temperature.", "fol": "", "prediction": ["all x.((Cooling(x) & Colder(x)) -> (RemovesHeat(x) & ReducesHeat(x) & DecreasesHeat(x)))"]}
{"id": "entailmentbank_train_4678", "nl": "cooling water will remove the heat from water.", "fol": "", "prediction": ["all x.(CoolingWater(x) -> RemovesHeatFromWater(x))"]}
{"id": "entailmentbank_train_4679", "nl": "removing heat will decrease the heat energy in the water.", "fol": "", "prediction": ["all x.(RemovingHeat(x) -> DecreasesHeatEnergyInWater(x))"]}
{"id": "entailmentbank_train_4680", "nl": "freezing means matter / a substance changes from a liquid into a solid by decreasing heat energy.", "fol": "", "prediction": ["all x y.((Freezing(x) & Substance(y)) -> (ChangesFromLiquidToSolid(y) & DecreasesHeatEnergy(y)))"]}
{"id": "entailmentbank_train_4681", "nl": "removing heat from the water will cause water to change from a liquid to a solid.", "fol": "", "prediction": ["all x.(RemovingHeatFromWater(x) -> WaterChange(x))"]}
{"id": "entailmentbank_train_4682", "nl": "removing heat from water will cause water to change from liquid water to ice.", "fol": "", "prediction": ["all x.(RemovingHeatFromWater(x) -> ChangesLiquidWaterToIce(x))"]}
{"id": "entailmentbank_train_4683", "nl": "water turns into ice.", "fol": "", "prediction": ["all x.(Water(x) -> TurnsIntoIce(x))"]}
{"id": "entailmentbank_train_4684", "nl": "water changes from a liquid to a solid.", "fol": "", "prediction": ["all x.(Water(x) -> (Liquid(x) & Solid(x)))"]}
{"id": "entailmentbank_train_4685", "nl": "the water freezes.", "fol": "", "prediction": ["all x.(WaterFreezes(x) -> WaterFreezes(x))"]}
{"id": "entailmentbank_train_4686", "nl": "water undergoes a phase change.", "fol": "", "prediction": ["all x.(Water(x) -> UndergoesPhaseChange(x))"]}
{"id": "entailmentbank_train_4687", "nl": "phase changes change the arrangement of molecules in a substance / in a sample.", "fol": "", "prediction": ["all x y.((PhaseChange(x) & Molecule(y)) -> ChangesArrangement(x,y))"]}
{"id": "entailmentbank_train_4688", "nl": "the arrangement of molecules in water is changed by a phase change.", "fol": "", "prediction": ["all x y.((Molecule(x) & Water(y)) -> ChangedByPhaseChange(x,y))"]}
{"id": "entailmentbank_train_4689", "nl": "milliliters ml is a metric unit used for measuring volume generally used for values between 1 and 1000.", "fol": "", "prediction": ["all x.(MillilitersMl(x) -> (MetalUnit(x) & MeasuresVolume(x) & UsedForValuesBetween(x,1) & UsedForValuesBetween(x,1000)))"]}
{"id": "entailmentbank_train_4690", "nl": "there is a 100 ml water.", "fol": "", "prediction": ["exists x.(Water(x,100))"]}
{"id": "entailmentbank_train_4691", "nl": "there is a 150 ml water.", "fol": "", "prediction": ["exists x.(Water(x,150))"]}
{"id": "entailmentbank_train_4692", "nl": "the 100 ml water and the 150 ml water have different volume.", "fol": "", "prediction": ["(DifferentVolume(100MlWater) & DifferentVolume(150MlWater))"]}
{"id": "entailmentbank_train_4693", "nl": "volume has no impact on boiling / melting / freezing point.", "fol": "", "prediction": ["all x.(Volume(x) -> (-InfluenceOnBoiling(x) & -InfluenceOnMelting(x) & -InfluenceOnFreezing(x)))"]}
{"id": "entailmentbank_train_4694", "nl": "different volumes have no impact on the freezing point of the 100ml water and 150 ml water.", "fol": "", "prediction": ["all x y.((Volume(x) & Volume(y)) -> (-ImpactsFreezingPoint(x,100) & -ImpactsFreezingPoint(y,150)))"]}
{"id": "entailmentbank_train_4695", "nl": "the freezing point of water is 0 c.", "fol": "", "prediction": ["all x.(FreezingPoint(x) -> 0C(x))"]}
{"id": "entailmentbank_train_4696", "nl": "the 150 ml water will have a freezing point of 0 c.", "fol": "", "prediction": ["all x.((Water(x) & 150Ml(x)) -> FreezingPoint(x,0))"]}
{"id": "entailmentbank_train_4697", "nl": "freezing will change the liquid water into solid.", "fol": "", "prediction": ["all x.(Freezing(x) -> ChangesLiquidWaterIntoSolid(x))"]}
{"id": "entailmentbank_train_4698", "nl": "particles in a solid have an orderly fixed position.", "fol": "", "prediction": ["all x.((Particle(x) & Solid(x)) -> OrderlyFixedPosition(x))"]}
{"id": "entailmentbank_train_4699", "nl": "freezing can change the particles in water to an orderly fixed position.", "fol": "", "prediction": ["all x y.((Freezing(x) & Water(y)) -> ChangesParticlesToOrderlyFixedPosition(x,y))"]}
{"id": "entailmentbank_train_4700", "nl": "ice cubes does not exist naturally at room temperature.", "fol": "", "prediction": ["all x.(IceCube(x) -> -existsNaturallyAtRoomTemperature(x))"]}
{"id": "entailmentbank_train_4701", "nl": "ice cubes have to be made from liquid water.", "fol": "", "prediction": ["all x.(IceCube(x) -> MadeFromLiquidWater(x))"]}
{"id": "entailmentbank_train_4702", "nl": "ice cubes have to be made by changing liquid water to solid ice.", "fol": "", "prediction": ["all x.(IceCube(x) -> (ChangesLiquidWaterToSolidIce(x)))"]}
{"id": "entailmentbank_train_4703", "nl": "ice cubes have to be made by freezing the liquid water.", "fol": "", "prediction": ["all x.(IceCube(x) -> MadeByFreezingLiquidWater(x))"]}
{"id": "entailmentbank_train_4704", "nl": "freezing is a kind of exothermic process.", "fol": "", "prediction": ["all x.(Freezing(x) -> ExothermicProcess(x))"]}
{"id": "entailmentbank_train_4705", "nl": "making ice cubes is a kind of exothermic process.", "fol": "", "prediction": ["all x.(IceCube(x) -> ExothermicProcess(x))"]}
{"id": "entailmentbank_train_4706", "nl": "water is put into the freezer.", "fol": "", "prediction": ["all x.(Water(x) -> PutsIntoFreezer(x))"]}
{"id": "entailmentbank_train_4707", "nl": "the water will cool in the freezer.", "fol": "", "prediction": ["all x.(Water(x) -> CoolsInFreezer(x))"]}
{"id": "entailmentbank_train_4708", "nl": "liquid water cooling causes that liquid water to freeze.", "fol": "", "prediction": ["all x.(LiquidWaterCooling(x) -> CausesLiquidWaterToFreeze(x))"]}
{"id": "entailmentbank_train_4709", "nl": "the water will freeze in the freezer.", "fol": "", "prediction": ["all x.(Water(x) -> FreezesInFreezer(x))"]}
{"id": "entailmentbank_train_4710", "nl": "freezing means a substance changes from a liquid to a solid.", "fol": "", "prediction": ["all x.(Freezing(x) -> ChangesFromLiquidToSolid(x))"]}
{"id": "entailmentbank_train_4711", "nl": "the water will change to a solid in the freezer.", "fol": "", "prediction": ["all x.((Water(x) & SolidInFreezer(x)) -> ChangesTo(x,y))"]}
{"id": "entailmentbank_train_4712", "nl": "matter in the solid phase has definite shape.", "fol": "", "prediction": ["all x.((Matter(x) & SolidPhase(x)) -> HasDefinedShape(x))"]}
{"id": "entailmentbank_train_4713", "nl": "the water will have definite shape after it freezes into a solid.", "fol": "", "prediction": ["all x.((Water(x) & FreezesIntoSolid(x)) -> DefiniteShape(x))"]}
{"id": "entailmentbank_train_4714", "nl": "ice is a kind of solid.", "fol": "", "prediction": ["all x.(Ice(x) -> Solid(x))"]}
{"id": "entailmentbank_train_4715", "nl": "ice cube is made of ice.", "fol": "", "prediction": ["all x.(IceCube(x) -> MadeOfIce(x))"]}
{"id": "entailmentbank_train_4716", "nl": "melting means matter / a substance changes from a solid into a liquid by increasing heat energy.", "fol": "", "prediction": ["all x y.((MeltingMatter(x) & Substance(y)) -> (ChangesFromSolidToLiquid(x,y) & IncreasesHeatEnergy(x,y)))"]}
{"id": "entailmentbank_train_4717", "nl": "an ice cube melts.", "fol": "", "prediction": ["all x.(IceCube(x) -> Melts(x))"]}
{"id": "entailmentbank_train_4718", "nl": "when an ice cube melts, it changes from a solid to a liquid.", "fol": "", "prediction": ["all x.((IceCube(x) & Melts(x)) -> ChangesFromSolidToLiquid(x))"]}
{"id": "entailmentbank_train_4719", "nl": "0 c is lower than 1538 c.", "fol": "", "prediction": ["all x.((C(x) & LowerThan(x,1538)) -> LowerThan(x,1538))"]}
{"id": "entailmentbank_train_4720", "nl": "the melting point of iron is 2800f / 1538c / 1811k.", "fol": "", "prediction": ["all x.(MeltingPoint(x) -> (Iron(x) & 2800f(x) & 1538c(x) & 1811k(x)))"]}
{"id": "entailmentbank_train_4721", "nl": "the freezing point of water / melting point of water is 32f / 0c / 273k.", "fol": "", "prediction": ["all x.((FreezingPoint(x) & MeltingPoint(x)) -> (32f(x) | 0c(x) | 273k(x)))"]}
{"id": "entailmentbank_train_4722", "nl": "the melting point of water is lower than the melting point of iron.", "fol": "", "prediction": ["all x y.((Water(x) & Iron(y)) -> LowerMeltingPoint(x,y))"]}
{"id": "entailmentbank_train_4723", "nl": "-2188 c is lower than 0 c.", "fol": "", "prediction": ["all x.((C(x) & -2188(x)) -> LowerThan(x,0))"]}
{"id": "entailmentbank_train_4724", "nl": "the melting point of oxygen is -3618f / -2188c / 544k.", "fol": "", "prediction": ["all x.(MeltingPointOfOxygen(x) -> ((3618f) & -2188c) & -5444k)))"]}
{"id": "entailmentbank_train_4725", "nl": "the melting point of oxygen is lower than the melting point of water.", "fol": "", "prediction": ["all x y.((Oxygen(x) & Water(y)) -> LowerMeltingPoint(x,y))"]}
{"id": "entailmentbank_train_4726", "nl": "the melting point of oxygen is lower than water and the melting point of water is lower than iron.", "fol": "", "prediction": ["(all x.(Oxygen(x) -> LowerThanWater(x)) & all y.(Water(y) -> LowerThanIron(y)))"]}
{"id": "entailmentbank_train_4727", "nl": "ice melts.", "fol": "", "prediction": ["all x.(Ice(x) -> Melts(x))"]}
{"id": "entailmentbank_train_4728", "nl": "ice will change into a liquid when it melts.", "fol": "", "prediction": ["all x.((Ice(x) & Melts(x)) -> ChangesIntoLiquid(x))"]}
{"id": "entailmentbank_train_4729", "nl": "the wax from a candle drips.", "fol": "", "prediction": ["all x y.((Candle(x) & Wax(y)) -> Drips(x,y))"]}
{"id": "entailmentbank_train_4730", "nl": "matter in the liquid state drips.", "fol": "", "prediction": ["all x.((Matter(x) & LiquidState(x)) -> Drips(x))"]}
{"id": "entailmentbank_train_4731", "nl": "wax is a kind of matter.", "fol": "", "prediction": ["all x.(Wax(x) -> Matter(x))"]}
{"id": "entailmentbank_train_4732", "nl": "the dripping wax is in liquid state.", "fol": "", "prediction": ["all x.(DrippingWax(x) -> LiquidState(x))"]}
{"id": "entailmentbank_train_4733", "nl": "the wax from candle is usually in solid state.", "fol": "", "prediction": ["all x.((Wax(x) & Candle(x)) -> SolidState(x))"]}
{"id": "entailmentbank_train_4734", "nl": "the wax has changed from a solid state to a liquid state.", "fol": "", "prediction": ["all x.(Wax(x) -> (SolidState(x) & LiquidState(x)))"]}
{"id": "entailmentbank_train_4735", "nl": "the wax from the candle melted.", "fol": "", "prediction": ["all x.((Wax(x) & Candle(y)) -> Melted(x,y))"]}
{"id": "entailmentbank_train_4736", "nl": "melting is when solids are heated above their melting point.", "fol": "", "prediction": ["all x.(Melting(x) -> (SolidsHeatedAboveMeltingPoint(x)))"]}
{"id": "entailmentbank_train_4737", "nl": "the melting wax has been heated above its melting point.", "fol": "", "prediction": ["all x.(MeltingWax(x) -> HeatedAboveMeltingPoint(x))"]}
{"id": "entailmentbank_train_4738", "nl": "if something is taken out of a freezer then it's moved to a warmer place.", "fol": "", "prediction": ["all x y.((Frozen(x) & TakenOutOf(x,y)) -> MovedToWarmerPlace(x))"]}
{"id": "entailmentbank_train_4739", "nl": "ice cream is left out of a freezer.", "fol": "", "prediction": ["all x.(IceCream(x) -> LeftOutOfFreezer(x))"]}
{"id": "entailmentbank_train_4740", "nl": "a freezer / refrigerator is cool / cold in temperature.", "fol": "", "prediction": ["all x.((Freezer(x) | Refrigerator(x)) -> (Cool(x) & Cold(x)))"]}
{"id": "entailmentbank_train_4741", "nl": "the ice cream is moved to a warmer place.", "fol": "", "prediction": ["all x.(IceCream(x) -> MovedToWarmerPlace(x))"]}
{"id": "entailmentbank_train_4742", "nl": "moving an object from a cool place to a warm place causes the object's temperature to increase.", "fol": "", "prediction": ["all x y.((Object(x) & CoolPlace(y) & WarmPlace(y)) -> IncreasesTemperature(x,y))"]}
{"id": "entailmentbank_train_4743", "nl": "the ice cream will increase in temperature.", "fol": "", "prediction": ["all x.(IceCream(x) -> IncreasesTemperature(x))"]}
{"id": "entailmentbank_train_4744", "nl": "the ice cream will increase in heat energy.", "fol": "", "prediction": ["all x.(IceCream(x) -> IncreasesHeatEnergy(x))"]}
{"id": "entailmentbank_train_4745", "nl": "ice cream is a kind of solid.", "fol": "", "prediction": ["all x.(IceCream(x) -> Solid(x))"]}
{"id": "entailmentbank_train_4746", "nl": "the ice cream will melt and change from a solid to a liquid.", "fol": "", "prediction": ["all x.(IceCream(x) -> (Melts(x) & ChangesFromSolidToLiquid(x)))"]}
{"id": "entailmentbank_train_4747", "nl": "a solid object is heated.", "fol": "", "prediction": ["all x.((SolidObject(x) & Heats(x)) -> Heats(x))"]}
{"id": "entailmentbank_train_4748", "nl": "heat energy is adding to the solid object.", "fol": "", "prediction": ["all x.(HeatEnergy(x) -> AddsToSolidObject(x))"]}
{"id": "entailmentbank_train_4749", "nl": "the solid object will melt when added heat energy.", "fol": "", "prediction": ["all x.((SolidObject(x) & HeatEnergy(x)) -> Melts(x))"]}
{"id": "entailmentbank_train_4750", "nl": "a solid is a kind of substance.", "fol": "", "prediction": ["all x.(Solid(x) -> Substance(x))"]}
{"id": "entailmentbank_train_4751", "nl": "ice cream is a solid substance.", "fol": "", "prediction": ["all x.(IceCream(x) -> SolidSubstance(x))"]}
{"id": "entailmentbank_train_4752", "nl": "ice cream changes from solid to liquid.", "fol": "", "prediction": ["all x.(IceCream(x) -> ChangesFromSolidToLiquid(x))"]}
{"id": "entailmentbank_train_4753", "nl": "ice cream melts by increasing heat energy.", "fol": "", "prediction": ["all x.(IceCream(x) -> MeltsByIncreasingHeatEnergy(x))"]}
{"id": "entailmentbank_train_4754", "nl": "a glacier is made of ice.", "fol": "", "prediction": ["all x.(Glacier(x) -> MadeOfIce(x))"]}
{"id": "entailmentbank_train_4755", "nl": "a waterfall contains water.", "fol": "", "prediction": ["all x.(Waterfall(x) -> ContainsWater(x))"]}
{"id": "entailmentbank_train_4756", "nl": "ice is colder in temperature than water.", "fol": "", "prediction": ["all x y.((Ice(x) & Water(y)) -> ColderTemperature(x,y))"]}
{"id": "entailmentbank_train_4757", "nl": "the glacier has the colder water.", "fol": "", "prediction": ["all x.(Glacier(x) -> ColderWater(x))"]}
{"id": "entailmentbank_train_4758", "nl": "water will change from a liquid to a solid by decreasing heat energy.", "fol": "", "prediction": ["all x.((Water(x) & Liquid(x) & Solid(x)) -> DecreasedHeatEnergy(x))"]}
{"id": "entailmentbank_train_4759", "nl": "water will change from a liquid to a solid by decreasing the temperature.", "fol": "", "prediction": ["all x y.((Water(x) & Liquid(y) & Solid(y)) -> ChangesTemperature(x,y))"]}
{"id": "entailmentbank_train_4760", "nl": "water is boiling in the pot.", "fol": "", "prediction": ["all x.(Water(x) -> BoilingInPot(x))"]}
{"id": "entailmentbank_train_4761", "nl": "water changes from a liquid to a gas when it is boiling.", "fol": "", "prediction": ["all x.((Water(x) & Boiling(x)) -> ChangesFromLiquidToGas(x))"]}
{"id": "entailmentbank_train_4762", "nl": "decreasing the heat energy of water will change water from a liquid into a solid.", "fol": "", "prediction": ["all x.((Water(x) & DecreasesHeatEnergy(x)) -> ChangesFromLiquidToSolid(x))"]}
{"id": "entailmentbank_train_4763", "nl": "heat is taken away from a container fo water.", "fol": "", "prediction": ["all x y.((Container(x) & Water(y)) -> TakesAwayHeat(x,y))"]}
{"id": "entailmentbank_train_4764", "nl": "taking heat away from water means decreasing heat energy of the water.", "fol": "", "prediction": ["all x y.((Water(x) & Heat(y)) -> DecreasesHeatEnergy(x,y))"]}
{"id": "entailmentbank_train_4765", "nl": "the heat energy of the water in the container is decreasing.", "fol": "", "prediction": ["all x y.((Container(x) & HeatEnergy(y)) -> Decreases(x,y))"]}
{"id": "entailmentbank_train_4766", "nl": "the water in the container will be changed from a liquid to a solid by decreasing heat energy.", "fol": "", "prediction": ["all x y.((Container(x) & Water(y)) -> (ChangesFromLiquidToSolid(x,y) & DecreasesHeatEnergy(x,y)))"]}
{"id": "entailmentbank_train_4767", "nl": "temperature changing can cause a substance to change from one state of matter into another state of matter.", "fol": "", "prediction": ["all x y.((Substance(x) & StateOfMatter(y)) -> Changes(x,y))"]}
{"id": "entailmentbank_train_4768", "nl": "air temperature is a kind of temperature.", "fol": "", "prediction": ["all x.(AirTemperature(x) -> Temperature(x))"]}
{"id": "entailmentbank_train_4769", "nl": "a change in air temperature can cause a substance to change from one state of matter into another state of matter.", "fol": "", "prediction": ["all x y.((ChangeInAirTemperature(x) & Substance(y)) -> CanChangeFromOneStateOfMatterToAnotherStateOfMatter(y))"]}
{"id": "entailmentbank_train_4770", "nl": "a change in air temperature can cause water to change from one state of matter into another state of matter.", "fol": "", "prediction": ["all x y.((ChangeInAirTemperature(x) & Water(y)) -> ChangesFromOneStateOfMatterToAnotherStateOfMatter(y))"]}
{"id": "entailmentbank_train_4771", "nl": "copper is a kind of metal.", "fol": "", "prediction": ["all x.(Cuivre(x) -> Metal(x))"]}
{"id": "entailmentbank_train_4772", "nl": "a metal is usually a solid at room temperature.", "fol": "", "prediction": ["all x.(Metal(x) -> SolidAtRoomTemperature(x))"]}
{"id": "entailmentbank_train_4773", "nl": "copper is a solid at room temperature.", "fol": "", "prediction": ["all x.(Cuivre(x) -> SolidAtRoomTemperature(x))"]}
{"id": "entailmentbank_train_4774", "nl": "the state of matter of copper is solid.", "fol": "", "prediction": ["all x.((StateOfMatter(x) & Copper(x)) -> Solid(x))"]}
{"id": "entailmentbank_train_4775", "nl": "if something is left out in the open then that something is exposed to oxygen.", "fol": "", "prediction": ["all x.((LeavedOutInOpen(x) & ExposedToOxygen(x)) -> ExposedToOxygen(x))"]}
{"id": "entailmentbank_train_4776", "nl": "a lit candle is left out in the open.", "fol": "", "prediction": ["all x.(LitCandle(x) -> LeftOutInOpen(x))"]}
{"id": "entailmentbank_train_4777", "nl": "the lit candle left out in the open is exposed to oxygen.", "fol": "", "prediction": ["all x.((LitCandle(x) & LeftOutInOpen(x)) -> ExposedToOxygen(x))"]}
{"id": "entailmentbank_train_4778", "nl": "the candle that is left out in the open will keep burning.", "fol": "", "prediction": ["all x.((Candle(x) & LeftOutInOpen(x)) -> KeepsBurning(x))"]}
{"id": "entailmentbank_train_4779", "nl": "if something is covered in a close space, then it is exposed to limited oxygen.", "fol": "", "prediction": ["all x.((CloseSpace(x) & CoveredIn(x,CloseSpace)) -> ExposedToLimitedOxygen(x))"]}
{"id": "entailmentbank_train_4780", "nl": "a lit candle is covered in a large jar.", "fol": "", "prediction": ["all x.(LitCandle(x) -> CoveredInLargeJar(x))"]}
{"id": "entailmentbank_train_4781", "nl": "the lit candle covered in a large jar is exposed to a limited amount of oxygen.", "fol": "", "prediction": ["all x y.((LitCandle(x) & LargeJar(y) & CoveredIn(x,y)) -> ExposedToLimitedOxygen(x))"]}
{"id": "entailmentbank_train_4782", "nl": "the candle that is covered in a large jar will burn for a limited amount of time.", "fol": "", "prediction": ["all x.((Candle(x) & CoveredInLargeJar(x)) -> BurnsForLimitedTime(x))"]}
{"id": "entailmentbank_train_4783", "nl": "a lit candle is covered in a small jar.", "fol": "", "prediction": ["all x.(LitCandle(x) -> CoveredInSmallJar(x))"]}
{"id": "entailmentbank_train_4784", "nl": "the lit candle covered in a small jar is exposed to a limited amount of oxygen.", "fol": "", "prediction": ["all x y.((LitCandle(x) & SmallJar(y) & CoveredIn(x,y)) -> ExposedToLimitedOxygen(x))"]}
{"id": "entailmentbank_train_4785", "nl": "the candle that is covered in a small jar will burn for a limited amount of time.", "fol": "", "prediction": ["all x.((Candle(x) & CoveredInSmallJar(x)) -> BurnsForLimitedTime(x))"]}
{"id": "entailmentbank_train_4786", "nl": "oxygen is a kind of matter.", "fol": "", "prediction": ["all x.(Oxygen(x) -> Matter(x))"]}
{"id": "entailmentbank_train_4787", "nl": "a vacuum has no matter in it.", "fol": "", "prediction": ["all x.(Vacuum(x) -> NoMatterInVacuum(x))"]}
{"id": "entailmentbank_train_4788", "nl": "a vaccum has no oxygen in it.", "fol": "", "prediction": ["all x.(Vaccum(x) -> -OxygenInVaccum(x))"]}
{"id": "entailmentbank_train_4789", "nl": "a fire cannot burn in a vaccum.", "fol": "", "prediction": ["all x.(Fire(x) -> -BurnsInVaccum(x))"]}
{"id": "entailmentbank_train_4790", "nl": "the fourth lit candle is placed in a vaccum.", "fol": "", "prediction": ["all x.(LitCandle(x) -> PlacedInVaccum(x))"]}
{"id": "entailmentbank_train_4791", "nl": "the fourth candle will stop burning when it's placed in the vaccum.", "fol": "", "prediction": ["all x.((Candle(x) & PlacedInVaccum(x)) -> StopsBurning(x))"]}
{"id": "entailmentbank_train_4792", "nl": "the candle left out in the open stay burning the longest.", "fol": "", "prediction": ["all x.((Candle(x) & LeftOutInOpen(x)) -> BurnsLongest(x))"]}
{"id": "entailmentbank_train_4793", "nl": "if an object is in the light then that object is blocking the light.", "fol": "", "prediction": ["all x.((Object(x) & InLight(x)) -> BlocksLight(x))"]}
{"id": "entailmentbank_train_4794", "nl": "if an object is in the light then the object will cause a shadow.", "fol": "", "prediction": ["all x.((Object(x) & InLight(x)) -> CausesShadow(x))"]}
{"id": "entailmentbank_train_4795", "nl": "if an object is in the sunlight then the object will cause a shadow.", "fol": "", "prediction": ["all x.((Object(x) & InSunlight(x)) -> CausesShadow(x))"]}
{"id": "entailmentbank_train_4796", "nl": "a boy is a kind of object.", "fol": "", "prediction": ["all x.(Boy(x) -> Object(x))"]}
{"id": "entailmentbank_train_4797", "nl": "if a boy is in the sunlight then the boy will cause a shadow.", "fol": "", "prediction": ["all x.((Bird(x) & InSunlight(x)) -> CausesShadow(x))"]}
{"id": "entailmentbank_train_4798", "nl": "a boy stands in the sunlight.", "fol": "", "prediction": ["all x.(Bird(x) -> StandsInSunlight(x))"]}
{"id": "entailmentbank_train_4799", "nl": "the boy in the sunlight will cause a shadow.", "fol": "", "prediction": ["all x.((Boy(x) & InSunlight(x)) -> CausesShadow(x))"]}
{"id": "entailmentbank_train_4800", "nl": "shadow of an object can be seen by eyes.", "fol": "", "prediction": ["all x y.((Shadow(x) & Object(y)) -> CanBeSeenByEyes(x,y))"]}
{"id": "entailmentbank_train_4801", "nl": "the boy can see his shadow in the sunlight.", "fol": "", "prediction": ["all x.(Boy(x) -> CanSeeShadowInSunlight(x))"]}
{"id": "entailmentbank_train_4802", "nl": "as the temperature of an environment increase, the objects in the environment will increase in temperature.", "fol": "", "prediction": ["all x y.((Environment(x) & Temperature(y) & Increase(x,y)) -> Increase(x,y))"]}
{"id": "entailmentbank_train_4803", "nl": "as the temperautre of the day increases, the objects in the environment will increase in temperature.", "fol": "", "prediction": ["all x y.((Temperature(x) & Day(y) & Increases(x,y)) -> IncreasesTemperature(x,y))"]}
{"id": "entailmentbank_train_4804", "nl": "as the temperature of an object increases, the size of that object will increase.", "fol": "", "prediction": ["all x y.((Object(x) & Temperature(y) & Increases(x,y)) -> IncreasesSize(x,y))"]}
{"id": "entailmentbank_train_4805", "nl": "as the temperature of the day increases, the size of the objects in the environment will increase.", "fol": "", "prediction": ["all x y.((Temperature(x) & Day(y) & Increases(x,y)) -> IncreasesSizeOfObjects(x,y))"]}
{"id": "entailmentbank_train_4806", "nl": "the metal railroad tracks are out during the day.", "fol": "", "prediction": ["all x.(MetalRailwayTracksOut(x) -> Day(x))"]}
{"id": "entailmentbank_train_4807", "nl": "temperature increases during the day.", "fol": "", "prediction": ["all x.(Temperature(x) -> IncreasesDuringDay(x))"]}
{"id": "entailmentbank_train_4808", "nl": "the size of the metal railroad tracks will increase during the day.", "fol": "", "prediction": ["all x.((MetalTrainingTracks(x) & IncreasedSize(x)) -> IncreasedSize(x))"]}
{"id": "entailmentbank_train_4809", "nl": "length is a part of size.", "fol": "", "prediction": ["all x.(Length(x) -> PartOfSize(x))"]}
{"id": "entailmentbank_train_4810", "nl": "the length of the metal railroad tracks will also increase during the day.", "fol": "", "prediction": ["all x.((MetalRailwayTracks(x) & IncreasedLength(x)) -> IncreasedLength(x))"]}
{"id": "entailmentbank_train_4811", "nl": "if gas is heated then that gas will expand / rise.", "fol": "", "prediction": ["all x.(Heated(x) -> GasExpandsRise(x))"]}
{"id": "entailmentbank_train_4812", "nl": "if air is heated then air will expand and rise.", "fol": "", "prediction": ["all x.(HeatedAir(x) -> (AirExpands(x) & AirRises(x)))"]}
{"id": "entailmentbank_train_4813", "nl": "a hot / warm something is a source of heat.", "fol": "", "prediction": ["all x.((Hot(x) | Warm(x)) -> SourceOfHeat(x))"]}
{"id": "entailmentbank_train_4814", "nl": "the water is warm.", "fol": "", "prediction": ["all x.(Water(x) -> Warm(x))"]}
{"id": "entailmentbank_train_4815", "nl": "the warm water is a source of heat.", "fol": "", "prediction": ["all x.(WarmWater(x) -> SourceOfHeat(x))"]}
{"id": "entailmentbank_train_4816", "nl": "a metal lid is put under warm water.", "fol": "", "prediction": ["all x.(MetalLid(x) -> PutUnderWarmWater(x))"]}
{"id": "entailmentbank_train_4817", "nl": "the metal lid is put under a source of heat.", "fol": "", "prediction": ["all x.(MetalLid(x) -> PutUnderHeatSource(x))"]}
{"id": "entailmentbank_train_4818", "nl": "the metal lid will become hot under the warm water.", "fol": "", "prediction": ["all x.((MetalLid(x) & WarmWater(x)) -> Hot(x))"]}
{"id": "entailmentbank_train_4819", "nl": "if a material is heated, then the material will expand.", "fol": "", "prediction": ["all x.(Heated(x) -> Expands(x))"]}
{"id": "entailmentbank_train_4820", "nl": "metal is a kind of material.", "fol": "", "prediction": ["all x.(Metal(x) -> Material(x))"]}
{"id": "entailmentbank_train_4821", "nl": "the metal lid will expand under the warm water.", "fol": "", "prediction": ["all x.((MetalLid(x) & WarmWater(x)) -> ExpandsUnder(x))"]}
{"id": "entailmentbank_train_4822", "nl": "if the lid of a container expands then that container will be easier to open.", "fol": "", "prediction": ["all x y.((Container(x) & Container(y) & ExpandsLid(x,y)) -> EasierToOpen(y))"]}
{"id": "entailmentbank_train_4823", "nl": "the lid is easier to open because the metal lid expands under the warm water.", "fol": "", "prediction": ["all x.((MetalLid(x) & ExpandsUnderWarmWater(x)) -> EasierToOpen(x))"]}
{"id": "entailmentbank_train_4824", "nl": "a glass thermometer is made of colored alcohol in a tube.", "fol": "", "prediction": ["all x.(GlassThermometer(x) -> MadeOfColoredAlcohol(x))"]}
{"id": "entailmentbank_train_4825", "nl": "alcohol is a kind of liquid.", "fol": "", "prediction": ["all x.(Alcohol(x) -> Liquid(x))"]}
{"id": "entailmentbank_train_4826", "nl": "a glass thermometer is made of alcohol liquid in a tube.", "fol": "", "prediction": ["all x.(GlassThermometer(x) -> MadeOfAlcoholLiquidInTube(x))"]}
{"id": "entailmentbank_train_4827", "nl": "as the liquid in a tube expands, the height of the liquid in that tube will increase.", "fol": "", "prediction": ["all x y.((Liquid(x) & Tube(y) & Expands(x,y)) -> HeightInTube(x,y))"]}
{"id": "entailmentbank_train_4828", "nl": "if the alcohol liquid in the tube expands, then the height of the alcohol liquid will increase.", "fol": "", "prediction": ["all x.((AlcoholLiquid(x) & Expands(x)) -> HeightIncreases(x))"]}
{"id": "entailmentbank_train_4829", "nl": "the height of the alcohol liquid changes because alcohol is heated.", "fol": "", "prediction": ["all x.((AlcoholLiquid(x) & Heated(x)) -> HeightChanges(x))"]}
{"id": "entailmentbank_train_4830", "nl": "a copper wire is a kind of matter.", "fol": "", "prediction": ["all x.(CuirconWire(x) -> Matter(x))"]}
{"id": "entailmentbank_train_4831", "nl": "as the temperature increases, the particles in the matter will move faster and farther apart.", "fol": "", "prediction": ["all x.(TemperatureIncrease(x) -> MovesFasterAndFartherApart(x))"]}
{"id": "entailmentbank_train_4832", "nl": "as the temperature of the copper wire increases, the particles in the matter will move faster and farther apart.", "fol": "", "prediction": ["all x y.((CuirdWire(x) & Temperature(y) & Increases(y)) -> MovesFasterAndFartherApart(x,y))"]}
{"id": "entailmentbank_train_4833", "nl": "increasing heat causes thermal expansion.", "fol": "", "prediction": ["all x.(IncreasingHeat(x) -> ThermalExpansion(x))"]}
{"id": "entailmentbank_train_4834", "nl": "as the heat of an object increases, the mass of the object will stay the same.", "fol": "", "prediction": ["all x y.((Object(x) & Heat(y) & Increases(x,y)) -> MassStaysSame(x,y))"]}
{"id": "entailmentbank_train_4835", "nl": "the mass of object will stay the same during thermal expansion caused by increasing heat.", "fol": "", "prediction": ["all x y.((MassOfObject(x) & ThermalExpansion(y) & IncreasedHeat(y)) -> StaysSame(x,y))"]}
{"id": "entailmentbank_train_4836", "nl": "objects are made of substances.", "fol": "", "prediction": ["all x.(Object(x) -> MadeOfSubstances(x))"]}
{"id": "entailmentbank_train_4837", "nl": "the mass of substance will stay the same during thermal expansion caused by increasing heat.", "fol": "", "prediction": ["all x y.((MassOfSubstance(x) & ThermalExpansion(y) & IncreasedHeat(y)) -> StaysSame(x,y))"]}
{"id": "entailmentbank_train_4838", "nl": "water is a kind of object.", "fol": "", "prediction": ["all x.(Water(x) -> Object(x))"]}
{"id": "entailmentbank_train_4839", "nl": "water is made of matter.", "fol": "", "prediction": ["all x.(Water(x) -> MadeOfMatter(x))"]}
{"id": "entailmentbank_train_4840", "nl": "mass is a property of matter.", "fol": "", "prediction": ["all x.(Mass(x) -> PropertyOfMatter(x))"]}
{"id": "entailmentbank_train_4841", "nl": "volume is a property of matter.", "fol": "", "prediction": ["all x.(Volume(x) -> PropertyOfMatter(x))"]}
{"id": "entailmentbank_train_4842", "nl": "matter has mass and volume.", "fol": "", "prediction": ["all x.(Matter(x) -> (HasMass(x) & HasVolume(x)))"]}
{"id": "entailmentbank_train_4843", "nl": "matters are made of atoms.", "fol": "", "prediction": ["all x.(Matter(x) -> MadeOfAtoms(x))"]}
{"id": "entailmentbank_train_4844", "nl": "objects are made of atoms.", "fol": "", "prediction": ["all x.(Object(x) -> MadeOfAtoms(x))"]}
{"id": "entailmentbank_train_4845", "nl": "a redwood tree is a kind of object.", "fol": "", "prediction": ["all x.(RedwoodTree(x) -> Object(x))"]}
{"id": "entailmentbank_train_4846", "nl": "a valley quail is a kind of object.", "fol": "", "prediction": ["all x.(ValleyQuail(x) -> Object(x))"]}
{"id": "entailmentbank_train_4847", "nl": "aluminum is a kind of object.", "fol": "", "prediction": ["all x.(Aluminum(x) -> Object(x))"]}
{"id": "entailmentbank_train_4848", "nl": "water, redwood trees, aluminum, and valley quails are all made of atoms.", "fol": "", "prediction": ["all x.((Water(x) | RedwoodTree(x) | Aluminum(x) | ValleyQuail(x)) -> MadeOfAtoms(x))"]}
{"id": "entailmentbank_train_4849", "nl": "a protractor is used for measuring the angles of a triangular object.", "fol": "", "prediction": ["all x y.((Protractor(x) & TriangularObject(y)) -> MeasuresAngles(x,y))"]}
{"id": "entailmentbank_train_4850", "nl": "a protractor is a kind of tool.", "fol": "", "prediction": ["all x.(Protractor(x) -> Tool(x))"]}
{"id": "entailmentbank_train_4851", "nl": "a protractor is the best tool to measure the angles of a triangular object.", "fol": "", "prediction": ["all x y.((Protractor(x) & TriangularObject(y)) -> MeasureAngles(x,y))"]}
{"id": "entailmentbank_train_4852", "nl": "a balance is used for measuring mass of a substance.", "fol": "", "prediction": ["all x y.((Balance(x) & Substance(y)) -> MeasuresMass(x,y))"]}
{"id": "entailmentbank_train_4853", "nl": "a balance is a kind of instrument.", "fol": "", "prediction": ["all x.(Balance(x) -> Instrument(x))"]}
{"id": "entailmentbank_train_4854", "nl": "a balance is an instrument used to measure the mass of a substance.", "fol": "", "prediction": ["all x.(Balance(x) -> MeasuresMassOfSubstance(x))"]}
{"id": "entailmentbank_train_4855", "nl": "frosting is a kind of substance.", "fol": "", "prediction": ["all x.(Frosting(x) -> Substance(x))"]}
{"id": "entailmentbank_train_4856", "nl": "a balance can be used to measure the mass of the frosting.", "fol": "", "prediction": ["all x.(Balance(x) -> MeasuresMassOfFrosting(x))"]}
{"id": "entailmentbank_train_4857", "nl": "a balance is a kind of tool.", "fol": "", "prediction": ["all x.(Balance(x) -> Tool(x))"]}
{"id": "entailmentbank_train_4858", "nl": "a balance is used for measuring the mass of an object.", "fol": "", "prediction": ["all x y.((Balance(x) & Object(y)) -> MeasuresMass(x,y))"]}
{"id": "entailmentbank_train_4859", "nl": "a balance is a kind of tool used for measuring the mass of an object.", "fol": "", "prediction": ["all x.(Balance(x) -> MeasuresMassOfObject(x))"]}
{"id": "entailmentbank_train_4860", "nl": "a scale is used for measuring weight.", "fol": "", "prediction": ["all x.(Scales(x) -> MeasuresWeight(x))"]}
{"id": "entailmentbank_train_4861", "nl": "a scale is used for measuring the force of gravity acting on an object.", "fol": "", "prediction": ["all x y.((Scales(x) & Object(y)) -> MeasuresForceOfGravity(x,y))"]}
{"id": "entailmentbank_train_4862", "nl": "a student is a kind of object.", "fol": "", "prediction": ["all x.(Student(x) -> Object(x))"]}
{"id": "entailmentbank_train_4863", "nl": "a scale is used for measuring the force of gravity acting on the student.", "fol": "", "prediction": ["all x y.((Scales(x) & Student(y)) -> MeasuresForceOfGravity(x,y))"]}
{"id": "entailmentbank_train_4864", "nl": "the density of a liquid can be calculated by dividing the mass over volume.", "fol": "", "prediction": ["all x y.((Liquid(x) & Mass(y)) -> CalculatedDensity(x,y))"]}
{"id": "entailmentbank_train_4865", "nl": "a graduated cylinder can measure a liquid's volume.", "fol": "", "prediction": ["all x y.((GraduatedCylinder(x) & Liquid(y)) -> MeasuresVolume(x,y))"]}
{"id": "entailmentbank_train_4866", "nl": "a balance can measure a liquid's mass.", "fol": "", "prediction": ["all x y.((Balance(x) & Liquid(y)) -> MeasuresMass(x,y))"]}
{"id": "entailmentbank_train_4867", "nl": "density can be measured using a graduated cylinder and a balance.", "fol": "", "prediction": ["all x.((Density(x) & GraduatedCylinder(x) & Balance(x)) -> Measured(x))"]}
{"id": "entailmentbank_train_4868", "nl": "density can be used to predict whether a liquid will float on water or sink under water.", "fol": "", "prediction": ["all x.((Liquid(x) & (FloatsOnWater(x) | SinksUnderWater(x))) -> CanPredict(x,y))"]}
{"id": "entailmentbank_train_4869", "nl": "a graduated cylinder and balance can be used to predict whether a liquid will float on water or sink on water.", "fol": "", "prediction": ["all x.((GraduatedCylinder(x) & GradientBalance(x)) -> (PredictsFloatOnWater(x) | PredictsSinkOnWater(x)))"]}
{"id": "entailmentbank_train_4870", "nl": "the density of an object can be measured using a graduated cylinder and a balance.", "fol": "", "prediction": ["all x y.((Object(x) & GradientCylinder(y) & Balance(y)) -> MeasuresDensity(x,y))"]}
{"id": "entailmentbank_train_4871", "nl": "a rock sample is a kind of object.", "fol": "", "prediction": ["all x.(RockSample(x) -> Object(x))"]}
{"id": "entailmentbank_train_4872", "nl": "the density of a rock sample can be measured using a graduated cylinder and a balance.", "fol": "", "prediction": ["all x y.((RockSample(x) & GradientCylinder(y) & Balance(y)) -> MeasuresDensity(x,y))"]}
{"id": "entailmentbank_train_4873", "nl": "how long something takes to happen is a kind of measurement of time.", "fol": "", "prediction": ["all x.((Time(x) & TakesToOccur(x)) -> MeasurementOfTime(x))"]}
{"id": "entailmentbank_train_4874", "nl": "a stopwatch is used to measure time.", "fol": "", "prediction": ["all x.(Stopwatch(x) -> MeasuresTime(x))"]}
{"id": "entailmentbank_train_4875", "nl": "a stopwatch can be used to measure how long something takes to happen.", "fol": "", "prediction": ["all x.(Stopwatch(x) -> MeasuresLengthOfSignificance(x))"]}
{"id": "entailmentbank_train_4876", "nl": "a process takes time to happen.", "fol": "", "prediction": ["all x.(Process(x) -> TakesTimeToOccur(x))"]}
{"id": "entailmentbank_train_4877", "nl": "a stopwatch can be used to measure how long a process takes to happen.", "fol": "", "prediction": ["all x.(Stopwatch(x) -> MeasuresLongProcess(x))"]}
{"id": "entailmentbank_train_4878", "nl": "melting is a kind of process.", "fol": "", "prediction": ["all x.(Melting(x) -> Process(x))"]}
{"id": "entailmentbank_train_4879", "nl": "a stopwatch can be used to measure how long it takes for melting to happen.", "fol": "", "prediction": ["all x.(Stopwatch(x) -> MeasuresMeltingTime(x))"]}
{"id": "entailmentbank_train_4880", "nl": "a meter stick is used to measure distance.", "fol": "", "prediction": ["all x.(MeterStick(x) -> MeasuresDistance(x))"]}
{"id": "entailmentbank_train_4881", "nl": "the speed of an object can be measured using a meter stick and a stopwatch.", "fol": "", "prediction": ["all x y.((Object(x) & MeterStick(y) & Stopwatch(y)) -> MeasuresSpeed(x,y))"]}
{"id": "entailmentbank_train_4882", "nl": "a turtle is a kind of object.", "fol": "", "prediction": ["all x.(Turtle(x) -> Object(x))"]}
{"id": "entailmentbank_train_4883", "nl": "the speed of a turtle can be measured using a meter stick and a stopwatch.", "fol": "", "prediction": ["all x.(Turtle(x) -> (MeasuresSpeed(x,MeterStick) & MeasuresSpeed(x,Stopwatch)))"]}
{"id": "entailmentbank_train_4884", "nl": "a stopwatch is used for measuring time.", "fol": "", "prediction": ["all x.(Stopwatch(x) -> UsedForMeasuringTime(x))"]}
{"id": "entailmentbank_train_4885", "nl": "speed can be determined by measuring the distance with a meter stick and dividing that by the measurement of time from the stopwatch.", "fol": "", "prediction": ["all x y.((Speed(x) & MeterStick(y) & MeasuresDistance(x,y) & DividesDistanceByTime(x,y)) -> DeterminesSpeed(x))"]}
{"id": "entailmentbank_train_4886", "nl": "a calculator is used for dividing.", "fol": "", "prediction": ["all x.(Calculator(x) -> UsedForDividing(x))"]}
{"id": "entailmentbank_train_4887", "nl": "the speed of an object can be measured using a meter stick, stopwatch, and calculator.", "fol": "", "prediction": ["all x.((Object(x) & MeasureSpeed(x)) -> (MeterStick(x) | Stopwatch(x) | Calculator(x)))"]}
{"id": "entailmentbank_train_4888", "nl": "a toy car is a kind of object.", "fol": "", "prediction": ["all x.(ToyCar(x) -> Object(x))"]}
{"id": "entailmentbank_train_4889", "nl": "the speed of a car can be measured using a meter stick, stopwatch, and calculator.", "fol": "", "prediction": ["all x.((Car(x) & MeasureSpeed(x)) -> (MeterStick(x) | Stopwatch(x) | Calculator(x)))"]}
{"id": "entailmentbank_train_4890", "nl": "a bicycle is a kind of object.", "fol": "", "prediction": ["all x.(Bicycle(x) -> Object(x))"]}
{"id": "entailmentbank_train_4891", "nl": "the speed of a bicycle can be measured using a meter stick and a stopwatch.", "fol": "", "prediction": ["all x.((Bicycle(x) & MeterStick(x) & Stopwatch(x)) -> MeasureSpeed(x))"]}
{"id": "entailmentbank_train_4892", "nl": "if a person is lost, then they need to travel to a location.", "fol": "", "prediction": ["all x.((Person(x) & Lost(x)) -> NeedsToTravel(x))"]}
{"id": "entailmentbank_train_4893", "nl": "being lost at sea is a kind of being lost.", "fol": "", "prediction": ["all x.((LoseAtSea(x) & LostAtSea(x)) -> Lost(x))"]}
{"id": "entailmentbank_train_4894", "nl": "if a person is lost at sea, then they need to travel to a location.", "fol": "", "prediction": ["all x.((Person(x) & LostAtSea(x)) -> NeedsToTravel(x))"]}
{"id": "entailmentbank_train_4895", "nl": "if a person needs to travel to a location, they need to direct themselves to that location.", "fol": "", "prediction": ["all x y.((Person(x) & Location(y) & NeedsToTravel(x,y)) -> NeedsToDirectTo(x,y))"]}
{"id": "entailmentbank_train_4896", "nl": "if a person is lost at sea, they need to direct themselves to a location.", "fol": "", "prediction": ["all x.((Person(x) & LostAtSea(x)) -> NeedsDirectionToLocation(x))"]}
{"id": "entailmentbank_train_4897", "nl": "the shore is a kind of location.", "fol": "", "prediction": ["all x.(Surface(x) -> Location(x))"]}
{"id": "entailmentbank_train_4898", "nl": "if a person is lost at sea, they need to direct themselves to the shore.", "fol": "", "prediction": ["all x.((Person(x) & LostAtSea(x)) -> NeedsDirectionToShore(x))"]}
{"id": "entailmentbank_train_4899", "nl": "if a person knows the cardinal direction of a location, and their own cardinal direction, then they can direct themselves to that location.", "fol": "", "prediction": ["all x y.((Person(x) & Location(y) & KnowsCardinalDirection(x,y) & KnowsCardinalDirection(x,y)) -> DirectsTo(x,y))"]}
{"id": "entailmentbank_train_4900", "nl": "if a person knows the cardinal direction of the shore, and their own cardinal direction, then they can direct themselves to the shore.", "fol": "", "prediction": ["all x.((Person(x) & KnowsCardinalDirection(x) & KnowsCardinalDirection(x)) -> DirectsToShore(x))"]}
{"id": "entailmentbank_train_4901", "nl": "a compass is used for determining a person's cardinal direction.", "fol": "", "prediction": ["all x y.((Compass(x) & Person(y)) -> DeterminesCardinalDirection(x,y))"]}
{"id": "entailmentbank_train_4902", "nl": "if a person knows the cardinal direction of the shore, and uses a compass to determine their cardinal direction, then they can direct themselves to the shore.", "fol": "", "prediction": ["all x y.((Person(x) & KnowsCardinalDirection(x,y) & Shore(y) & UsesCompass(x,y)) -> DirectsToSurface(x))"]}
{"id": "entailmentbank_train_4903", "nl": "a magnetic compass is a kind of compass.", "fol": "", "prediction": ["all x.(MagneticCompass(x) -> Compass(x))"]}
{"id": "entailmentbank_train_4904", "nl": "if a person knows the cardinal direction of the shore, and uses a magnetic compass to determine their cardinal direction, then they can direct themselves to the shore.", "fol": "", "prediction": ["all x y.((Person(x) & KnowsCardinalDirection(x,y) & UsesMagneticCompass(x) & DeterminesCardinalDirection(x,y)) -> CanDirectToShore(x))"]}
{"id": "entailmentbank_train_4905", "nl": "if a person is lost at sea, and shows the cardinal direction of the shore, then they can use a magnetic compass to direct themselves to the shore.", "fol": "", "prediction": ["all x y.((Person(x) & LostAtSea(x) & ShowsCardinalDirection(x,y)) -> CanDirectToSurface(x,y))"]}
{"id": "entailmentbank_train_4906", "nl": "a graduated cylinder is used to measure the volume of a liquid.", "fol": "", "prediction": ["all x y.((GraduatedCylinder(x) & Liquid(y)) -> MeasuresVolume(x,y))"]}
{"id": "entailmentbank_train_4907", "nl": "a graduated cylinder can be used to measure the volume of water.", "fol": "", "prediction": ["all x.((Cylinder(x) & Graduated(x)) -> MeasuresWaterVolume(x))"]}
{"id": "entailmentbank_train_4908", "nl": "a graduated cylinder can be used to measure the volume of liquid water.", "fol": "", "prediction": ["all x.((Cylinder(x) & Graduated(x)) -> MeasuresVolumeOfLiquidWater(x))"]}
{"id": "entailmentbank_train_4909", "nl": "water is in the liquid state, called liquid water, for temperatures between 0 and 100 c.", "fol": "", "prediction": ["all x.((Water(x) & LiquidState(x)) -> TemperaturesBetween(x,0,100))"]}
{"id": "entailmentbank_train_4910", "nl": "water is in the solid state, called ice, for temperatures between -273 and 0 c.", "fol": "", "prediction": ["all x.((Water(x) & SolidState(x) & Temperature(x,273) & Temperature(x,0)) -> Ice(x))"]}
{"id": "entailmentbank_train_4911", "nl": "freezing means changing water from liquid water to solid water ice by decreasing heat energy.", "fol": "", "prediction": ["all x.(Freezing(x) -> (ChangesWater(x) & FromLiquidWaterToSolidWaterIce(x) & DecreasesHeatEnergy(x)))"]}
{"id": "entailmentbank_train_4912", "nl": "a graduated cylinder can be used to measure volume of a solid.", "fol": "", "prediction": ["all x.((Cylinder(x) & Graduated(x)) -> MeasuresVolumeOfSolid(x))"]}
{"id": "entailmentbank_train_4913", "nl": "a graduated cylinder can be used to measure the volume of solid water ice.", "fol": "", "prediction": ["all x.((Cylinder(x) & Gradient(x)) -> MeasuresVolumeOfSolidWaterIce(x))"]}
{"id": "entailmentbank_train_4914", "nl": "a graduated cylinder can be used to measure the volume of liquid water and solid water ice.", "fol": "", "prediction": ["all x.((Cylinder(x) & Gradient(x)) -> MeasuresVolumeOfLiquidWaterAndSolidWaterIce(x))"]}
{"id": "entailmentbank_train_4915", "nl": "a graduated cylinder is used to measure volume of an object.", "fol": "", "prediction": ["all x y.((GraduatedCylinder(x) & Object(y)) -> MeasuresVolume(x,y))"]}
{"id": "entailmentbank_train_4916", "nl": "a piece of granite is a kind of object.", "fol": "", "prediction": ["all x.((PieceOfGranite(x) & Object(x)) -> Object(x))"]}
{"id": "entailmentbank_train_4917", "nl": "a graduated cylinder can be used to measure volume of a piece of granite.", "fol": "", "prediction": ["all x y.((GraduatedCylinder(x) & Granite(y)) -> MeasuresVolume(x,y))"]}
{"id": "entailmentbank_train_4918", "nl": "to observe an object of small size requires the use of magnifying glass.", "fol": "", "prediction": ["all x.((Object(x) & SmallSize(x)) -> RequiresMagnifyingGlass(x))"]}
{"id": "entailmentbank_train_4919", "nl": "the eyes of insects are very small in size.", "fol": "", "prediction": ["all x.(Insect(x) -> SmallEyes(x))"]}
{"id": "entailmentbank_train_4920", "nl": "to observe the type of eyes insects have requires using a magnifying glass.", "fol": "", "prediction": ["all x.((Insect(x) & Eyes(x)) -> RequiresMagnifyingGlass(x))"]}
{"id": "entailmentbank_train_4921", "nl": "seeing small things is difficult.", "fol": "", "prediction": ["all x.(SmallThing(x) -> DifficultToSee(x))"]}
{"id": "entailmentbank_train_4922", "nl": "the insect is small in size.", "fol": "", "prediction": ["all x.(Insect(x) -> SmallSize(x))"]}
{"id": "entailmentbank_train_4923", "nl": "seeing insect is difficult.", "fol": "", "prediction": ["all x.(Insect(x) -> DifficultToSee(x))"]}
{"id": "entailmentbank_train_4924", "nl": "magnifying glass is used to see small things by making objects appear bigger.", "fol": "", "prediction": ["all x.(MagnifyingGlass(x) -> (SeesSmallThings(x) & MakesObjectsAppearBigger(x)))"]}
{"id": "entailmentbank_train_4925", "nl": "magnify glass can be used to see insects by making insects appear bigger.", "fol": "", "prediction": ["all x.(MagnifyGlass(x) -> (SeesInsects(x) & MakesInsectsAppearBigger(x)))"]}
{"id": "entailmentbank_train_4926", "nl": "a living thing is a kind of object.", "fol": "", "prediction": ["all x.(LivingThing(x) -> Object(x))"]}
{"id": "entailmentbank_train_4927", "nl": "a bird is a kind of object.", "fol": "", "prediction": ["all x.(Bird(x) -> Object(x))"]}
{"id": "entailmentbank_train_4928", "nl": "animals usually distance themselves from humans.", "fol": "", "prediction": ["all x y.((Animal(x) & Human(y)) -> Distinction(x,y))"]}
{"id": "entailmentbank_train_4929", "nl": "birds usually distance themselves from human.", "fol": "", "prediction": ["all x.(Bird(x) -> Distinction(x,Human))"]}
{"id": "entailmentbank_train_4930", "nl": "birds are distant objects.", "fol": "", "prediction": ["all x.(Bird(x) -> DistantObject(x))"]}
{"id": "entailmentbank_train_4931", "nl": "binoculars can be used to observe distant objects.", "fol": "", "prediction": ["all x.(Binoculars(x) -> ObserveDistantObjects(x))"]}
{"id": "entailmentbank_train_4932", "nl": "binoculars can be used to observe birds.", "fol": "", "prediction": ["all x.(Binoculars(x) -> ObserveBirds(x))"]}
{"id": "entailmentbank_train_4933", "nl": "a fingerprint is small in size.", "fol": "", "prediction": ["all x.(Fingerprint(x) -> SmallSize(x))"]}
{"id": "entailmentbank_train_4934", "nl": "seeing a fingerprint is difficult.", "fol": "", "prediction": ["all x.(Fingerprint(x) -> DifficultToSee(x))"]}
{"id": "entailmentbank_train_4935", "nl": "magnifying makes seeing small things easier through using a magnifying glass.", "fol": "", "prediction": ["all x.(Magnifying(x) -> (MakesSayingSmallThingsEasier(x) & UsesMagnifyingGlass(x)))"]}
{"id": "entailmentbank_train_4936", "nl": "using a magnifying glass can help make seeing a fingerprint easier.", "fol": "", "prediction": ["all x.((MagnifyingGlass(x) & Fingerprint(y)) -> MakesSeeingEasier(x,y))"]}
{"id": "entailmentbank_train_4937", "nl": "a hand lens is a kind of magnifying glass.", "fol": "", "prediction": ["all x.(HandLens(x) -> MagnifyingGlass(x))"]}
{"id": "entailmentbank_train_4938", "nl": "a hand lens can be used to see a fingerprint.", "fol": "", "prediction": ["all x.(HandLens(x) -> CanSeeFingerprint(x))"]}
{"id": "entailmentbank_train_4939", "nl": "an insect usually has a small size.", "fol": "", "prediction": ["all x.(Insect(x) -> SmallSize(x))"]}
{"id": "entailmentbank_train_4940", "nl": "a ladybug is a kind of insect.", "fol": "", "prediction": ["all x.(Ladybug(x) -> Insect(x))"]}
{"id": "entailmentbank_train_4941", "nl": "a ladybug is small in size.", "fol": "", "prediction": ["all x.(Ladybug(x) -> SmallSize(x))"]}
{"id": "entailmentbank_train_4942", "nl": "seeing small things with bare eyes is difficult.", "fol": "", "prediction": ["all x.((SmallThing(x) & BareEyes(x)) -> DifficultToSee(x))"]}
{"id": "entailmentbank_train_4943", "nl": "seeing a ladybug with bare eyes is difficult.", "fol": "", "prediction": ["all x.((Ladybug(x) & BareEyes(x)) -> DifficultToSee(x))"]}
{"id": "entailmentbank_train_4944", "nl": "magnifying glass can be used to see a ladybug by making it appear bigger.", "fol": "", "prediction": ["all x y.((MagnifyingGlass(x) & Ladybug(y)) -> CanSeeByAppearingBigger(y,x))"]}
{"id": "entailmentbank_train_4945", "nl": "a hand lens can help seeing the ladybug by magnifying the ladybug.", "fol": "", "prediction": ["all x.(HandLens(x) -> (HelpsSeeLadybug(x) & MagnifiesLadybug(x)))"]}
{"id": "entailmentbank_train_4946", "nl": "counting something usually requires seeing that something.", "fol": "", "prediction": ["all x.(Counting(x) -> RequiresSeeing(x))"]}
{"id": "entailmentbank_train_4947", "nl": "a hand lens can help count the ladybugs.", "fol": "", "prediction": ["all x.(HandLens(x) -> HelpsCountLadybugs(x))"]}
{"id": "entailmentbank_train_4948", "nl": "a field is a kind of environment.", "fol": "", "prediction": ["all x.(Field(x) -> Environment(x))"]}
{"id": "entailmentbank_train_4949", "nl": "an insect in a field is an example of a small thing in an environment.", "fol": "", "prediction": ["all x y.((Insect(x) & Field(y) & InEnvironment(x,y)) -> SmallThing(x))"]}
{"id": "entailmentbank_train_4950", "nl": "observing small things in an environment is difficult.", "fol": "", "prediction": ["all x.(ObservesSmallThings(x) -> Difficult(x))"]}
{"id": "entailmentbank_train_4951", "nl": "observing an insect in a field is difficult.", "fol": "", "prediction": ["all x y.((Insect(x) & Field(y)) -> DifficultToObserve(x,y))"]}
{"id": "entailmentbank_train_4952", "nl": "we need a tool to count the legs of an ant.", "fol": "", "prediction": ["all x y.((Ant(x) & Tool(y)) -> NeedsToCountLegs(y,x))"]}
{"id": "entailmentbank_train_4953", "nl": "to count the legs of an ant requires seeing the ant.", "fol": "", "prediction": ["all x y.((Ant(x) & Ant(y)) -> RequiresSeeing(x,y))"]}
{"id": "entailmentbank_train_4954", "nl": "an ant is a kind of insect.", "fol": "", "prediction": ["all x.(Ant(x) -> Insect(x))"]}
{"id": "entailmentbank_train_4955", "nl": "an ant is small in size.", "fol": "", "prediction": ["all x.(Ant(x) -> SmallSize(x))"]}
{"id": "entailmentbank_train_4956", "nl": "seeing an ant is difficult because an ant is small in size.", "fol": "", "prediction": ["all x.((Ant(x) & SmallSize(x)) -> DifficultToSee(x))"]}
{"id": "entailmentbank_train_4957", "nl": "magnifying glass can be used to see an ant by making it appear bigger.", "fol": "", "prediction": ["all x y.((MagnifyingGlass(x) & Ant(y)) -> CanBeUsedToSee(x,y))"]}
{"id": "entailmentbank_train_4958", "nl": "magnifying glass can be used to count the leg of an ant by making the ant appear bigger.", "fol": "", "prediction": ["all x y.((MagnifyingGlass(x) & Ant(y)) -> CanCountLeg(x,y))"]}
{"id": "entailmentbank_train_4959", "nl": "a hand lens can be used to count the leg of an ant.", "fol": "", "prediction": ["all x y.((HandLens(x) & Ant(y)) -> CanCountLeg(x,y))"]}
{"id": "entailmentbank_train_4960", "nl": "a leaf is small in size.", "fol": "", "prediction": ["all x.(Leaf(x) -> SmallSize(x))"]}
{"id": "entailmentbank_train_4961", "nl": "seeing a leaf with bare eyes is difficult.", "fol": "", "prediction": ["all x.((Leaf(x) & BareEyes(x)) -> DifficultToSee(x))"]}
{"id": "entailmentbank_train_4962", "nl": "magnifying glass can be used to see a leaf by making it appear bigger.", "fol": "", "prediction": ["all x y.((MagnifyingGlass(x) & Leaf(y)) -> CanSeeByAppearingBigger(x,y))"]}
{"id": "entailmentbank_train_4963", "nl": "a hand lens can help seeing the leaf by magnifying the leaf.", "fol": "", "prediction": ["all x y.((HandLens(x) & Leaf(y)) -> HelpsSee(x,y))"]}
{"id": "entailmentbank_train_4964", "nl": "a door is a kind of object.", "fol": "", "prediction": ["all x.(Door(x) -> Object(x))"]}
{"id": "entailmentbank_train_4965", "nl": "height is a measure of length from the top of an object to the bottom of an object.", "fol": "", "prediction": ["all x.(Height(x) -> MeasuresLengthFromTopToBottom(x))"]}
{"id": "entailmentbank_train_4966", "nl": "the height of a door is a measure of length from the top of the door to the bottom of the door.", "fol": "", "prediction": ["all x y.((Door(x) & Door(y)) -> MeasuresLengthFromTopToBottom(x,y))"]}
{"id": "entailmentbank_train_4967", "nl": "a meter stick is a kind of tool for measuring length.", "fol": "", "prediction": ["all x.(MeterStick(x) -> MeasuresLength(x))"]}
{"id": "entailmentbank_train_4968", "nl": "a meter stick can be used to measure the height of the door.", "fol": "", "prediction": ["all x.(MeterStick(x) -> MeasuresHeightOfDoor(x))"]}
{"id": "entailmentbank_train_4969", "nl": "length is a measure of distance from one end of an object to the other end of that object.", "fol": "", "prediction": ["all x.(Length(x) -> MeasuresDistance(x))"]}
{"id": "entailmentbank_train_4970", "nl": "a branch is a kind of object.", "fol": "", "prediction": ["all x.(Branche(x) -> Object(x))"]}
{"id": "entailmentbank_train_4971", "nl": "the length of a branch is a measure of distance from one end of the branch to the other end.", "fol": "", "prediction": ["all x y.((Branched(x) & Branch(y)) -> MeasuresDistance(x,y))"]}
{"id": "entailmentbank_train_4972", "nl": "a meter stick can be used to measure the length.", "fol": "", "prediction": ["all x.(MeterStick(x) -> MeasuresLength(x))"]}
{"id": "entailmentbank_train_4973", "nl": "a meter stick can be used to measure the length of a branch.", "fol": "", "prediction": ["all x y.((MeterStick(x) & Branch(y)) -> MeasuresLength(x,y))"]}
{"id": "entailmentbank_train_4974", "nl": "a dime is circle in shape.", "fol": "", "prediction": ["all x.(Dime(x) -> CircleShape(x))"]}
{"id": "entailmentbank_train_4975", "nl": "diameter is a measure of length through the center of a circle.", "fol": "", "prediction": ["all x.(Diameter(x) -> MeasuresLengthThroughCenterOfCircle(x))"]}
{"id": "entailmentbank_train_4976", "nl": "the diameter of a dime is a measure of length through the center of the dime.", "fol": "", "prediction": ["all x y.((Dimensional(x) & Dime(y)) -> MeasuresLengthThroughCenter(x,y))"]}
{"id": "entailmentbank_train_4977", "nl": "a ruler is a kind of tool for measuring length.", "fol": "", "prediction": ["all x.(Ruler(x) -> MeasuresLength(x))"]}
{"id": "entailmentbank_train_4978", "nl": "a ruler can be used to measure the diameter of a dime.", "fol": "", "prediction": ["all x y.((Ruler(x) & Dime(y)) -> MeasuresDiameter(x,y))"]}
{"id": "entailmentbank_train_4979", "nl": "a butterfly is a kind of object.", "fol": "", "prediction": ["all x.(Butterfly(x) -> Object(x))"]}
{"id": "entailmentbank_train_4980", "nl": "a ruler is used for measuring the length of an object.", "fol": "", "prediction": ["all x y.((Ruler(x) & Object(y)) -> MeasuresLength(x,y))"]}
{"id": "entailmentbank_train_4981", "nl": "a ruler can be used to measure the length of a butterfly.", "fol": "", "prediction": ["all x y.((Ruler(x) & Butterfly(y)) -> MeasuresLength(x,y))"]}
{"id": "entailmentbank_train_4982", "nl": "a metric ruler is a ruler with metric units.", "fol": "", "prediction": ["all x.(MetalRuler(x) -> HasMetalUnits(x))"]}
{"id": "entailmentbank_train_4983", "nl": "a metric ruler can be used to measure the length of a butterfly.", "fol": "", "prediction": ["all x y.((MetalRuler(x) & Butterfly(y)) -> MeasuresLength(x,y))"]}
{"id": "entailmentbank_train_4984", "nl": "miles mi are a imperial unit used for measuring length.", "fol": "", "prediction": ["all x.(MilesMi(x) -> ImperialUnit(x))"]}
{"id": "entailmentbank_train_4985", "nl": "yards yd are a imperial unit used for measuring length.", "fol": "", "prediction": ["all x.((Yd(x) & ImperialUnit(x)) -> MeasuresLength(x))"]}
{"id": "entailmentbank_train_4986", "nl": "feet (ft) are an imperial unit used for measuring length.", "fol": "", "prediction": ["all x.(Feet(x) -> MeasuresLength(x))"]}
{"id": "entailmentbank_train_4987", "nl": "ft, yd, and mi are imperial units used for measuring length.", "fol": "", "prediction": ["all x.((Ft(x) | Yd(x) | Mi(x)) -> MeasuresLength(x))"]}
{"id": "entailmentbank_train_4988", "nl": "imperial units are not metric units.", "fol": "", "prediction": ["all x.(ImperialUnit(x) -> -MetalUnit(x))"]}
{"id": "entailmentbank_train_4989", "nl": "ft, yd, and mi are not metric units.", "fol": "", "prediction": ["(MetricUnit(ft) & MetricUnit(yd) & MetricUnit(mi))"]}
{"id": "entailmentbank_train_4990", "nl": "a desk is usually short in length.", "fol": "", "prediction": ["all x.(Desk(x) -> ShortLength(x))"]}
{"id": "entailmentbank_train_4991", "nl": "centimeter is usually used to measure short length.", "fol": "", "prediction": ["all x.(Centimeter(x) -> UsedToMeasureShortLength(x))"]}
{"id": "entailmentbank_train_4992", "nl": "centimeter can be used to measure the length of a desk.", "fol": "", "prediction": ["all x.(Centimeter(x) -> MeasuresDeskLength(x))"]}
{"id": "entailmentbank_train_4993", "nl": "measuring is used for describing an object.", "fol": "", "prediction": ["all x y.((Measuring(x) & Object(y)) -> UsedForDescription(x,y))"]}
{"id": "entailmentbank_train_4994", "nl": "centimeter can be used to describe the length of a desk.", "fol": "", "prediction": ["all x.(Centimeter(x) -> DefinesDeskLength(x))"]}
{"id": "entailmentbank_train_4995", "nl": "a centimeter is used for measuring short lengths / short distances.", "fol": "", "prediction": ["all x.(Centimeter(x) -> MeasuresShortLengths(x))"]}
{"id": "entailmentbank_train_4996", "nl": "centimeters cm are a metric unit used for measuring length.", "fol": "", "prediction": ["all x.(Centimeter(x) -> MetricUnit(x))"]}
{"id": "entailmentbank_train_4997", "nl": "centimeter is a metric unit used to measure the length.", "fol": "", "prediction": ["all x.(Centimeter(x) -> MeasuresLength(x))"]}
{"id": "entailmentbank_train_4998", "nl": "centimeter is a metric unit used to describe the length of an object.", "fol": "", "prediction": ["all x.(Centimeter(x) -> (MetalUnit(x) & DefinesLengthOfObject(x)))"]}
{"id": "entailmentbank_train_4999", "nl": "meters m are a metric / si unit used for measuring length.", "fol": "", "prediction": ["all x.(Measurement(x) -> (MetalUnit(x) & SiUnit(x) & UsedForMeasuringLength(x)))"]}
{"id": "entailmentbank_train_5000", "nl": "meter is a unit used to describe the length of an object.", "fol": "", "prediction": ["all x.(Meter(x) -> (DepictsLengthOfObject(x) & UsedToDepict(x)))"]}
{"id": "entailmentbank_train_5001", "nl": "a classroom is usually measured in meter.", "fol": "", "prediction": ["all x.(Classroom(x) -> MeasuredInMeter(x))"]}
{"id": "entailmentbank_train_5002", "nl": "meter is the si unit that can be used to measure a classroom.", "fol": "", "prediction": ["all x.(Measurement(x) -> (SiUnit(x) & MeasuresClassroom(x)))"]}
{"id": "entailmentbank_train_5003", "nl": "grams g are a metric unit used for measuring mass.", "fol": "", "prediction": ["all x.(Gasonomy(x) -> (MetalUnit(x) & MeasuresMass(x)))"]}
{"id": "entailmentbank_train_5004", "nl": "an object is 35 gram.", "fol": "", "prediction": ["all x.((Object(x) & -35Gram(x)) -> Object(x))"]}
{"id": "entailmentbank_train_5005", "nl": "35 gram is the mass of that object.", "fol": "", "prediction": ["all x.((Object(x) & Mass(x,35)) -> Mass(x,35))"]}
{"id": "entailmentbank_train_5006", "nl": "the scale reads 2 kilograms for the basket.", "fol": "", "prediction": ["all x.(Scale(x) -> Reads2Kg(x))"]}
{"id": "entailmentbank_train_5007", "nl": "kilograms kg are a metric / si unit used for measuring weight.", "fol": "", "prediction": ["all x.(Kg(x) -> (Metal(x) | SiUnit(x)))"]}
{"id": "entailmentbank_train_5008", "nl": "the person is measuring the weight of the basket.", "fol": "", "prediction": ["all x.(MeasuresWeightOfBall(x) -> PersonMeasuresWeightOfBall(x))"]}
{"id": "entailmentbank_train_5009", "nl": "a large rock is usually heavy in weight.", "fol": "", "prediction": ["all x.(LargeRock(x) -> HeavyInWeight(x))"]}
{"id": "entailmentbank_train_5010", "nl": "kilogram is usually used to measure heavy objects.", "fol": "", "prediction": ["all x.(Kilogram(x) -> MeasuresHeavyObjects(x))"]}
{"id": "entailmentbank_train_5011", "nl": "kilogram can be used to measure the large rock.", "fol": "", "prediction": ["all x.(Kilogram(x) -> MeasuresLargeRock(x))"]}
{"id": "entailmentbank_train_5012", "nl": "gram is usually used to measure light weight object.", "fol": "", "prediction": ["all x.(Gram(x) -> MeasuresLightWeightObject(x))"]}
{"id": "entailmentbank_train_5013", "nl": "fish is usually light in weight.", "fol": "", "prediction": ["all x.(Fish(x) -> LightInWeight(x))"]}
{"id": "entailmentbank_train_5014", "nl": "gram can be used to measure the mass of the fish.", "fol": "", "prediction": ["all x.(Grogram(x) -> MeasuresMassOfFish(x))"]}
{"id": "entailmentbank_train_5015", "nl": "the lower the ph level of a substance, the stronger acid the substance is.", "fol": "", "prediction": ["all x y.((Substance(x) & LowerPhLevel(x,y)) -> StrongerAcid(x))"]}
{"id": "entailmentbank_train_5016", "nl": "acid is 0 to 6 in ph level which makes it acidic.", "fol": "", "prediction": ["all x.(Acid(x) -> (Acidic(x) & 0To6(x)))"]}
{"id": "entailmentbank_train_5017", "nl": "3 is the strongest acid among the answers.", "fol": "", "prediction": ["3 is the StrongestAcidAmongAlcoholicAcids(x)"]}
{"id": "entailmentbank_train_5018", "nl": "degrees celsius is a unit for measuring temperature.", "fol": "", "prediction": ["all x.(DegreesCelsius(x) -> MeasuresTemperature(x))"]}
{"id": "entailmentbank_train_5019", "nl": "degrees celsius should be used to record the air temperature.", "fol": "", "prediction": ["all x.((DegreesCelsius(x) & RecordAirTemperature(x)) -> ShouldBeUsed(x))"]}
{"id": "entailmentbank_train_5020", "nl": "second is used to meausre a short amount of time.", "fol": "", "prediction": ["all x.(Second(x) -> UsedToMeausreShortAmountOfTime(x))"]}
{"id": "entailmentbank_train_5021", "nl": "a toy car rolling down a hill is a short process.", "fol": "", "prediction": ["all x y.((ToyCar(x) & Hill(y)) -> RollsDown(x,y))"]}
{"id": "entailmentbank_train_5022", "nl": "second should be used to measure the time of a toy car rolling down a hill.", "fol": "", "prediction": ["all x y.((ToyCar(x) & Hill(y)) -> MeasuresTime(x,y))"]}
{"id": "entailmentbank_train_5023", "nl": "melted marshmallow is a kind of substance.", "fol": "", "prediction": ["all x.(MoltedMarshmallow(x) -> Substance(x))"]}
{"id": "entailmentbank_train_5024", "nl": "rice cereal is a kind of substance.", "fol": "", "prediction": ["all x.(RiceCereal(x) -> Substance(x))"]}
{"id": "entailmentbank_train_5025", "nl": "rice cereal and marshmallows are two substances.", "fol": "", "prediction": ["(Substance(riceCereal) & Substance(marshmallows))"]}
{"id": "entailmentbank_train_5026", "nl": "a student combined rice cereal and marshmallows together.", "fol": "", "prediction": ["all x y.((Student(x) & RiceCereal(y) & Marshmallows(y)) -> Combines(x,y))"]}
{"id": "entailmentbank_train_5027", "nl": "a student combined two substances together.", "fol": "", "prediction": ["all x y.((Student(x) & Substance(y)) -> Combines(x,y))"]}
{"id": "entailmentbank_train_5028", "nl": "a mixture is made of two or more substances combined together.", "fol": "", "prediction": ["all x.(Mixture(x) -> (MadeOfSubstances(x,2) & MadeOfSubstances(x,3)))"]}
{"id": "entailmentbank_train_5029", "nl": "the student made a mixture by combining two substances together.", "fol": "", "prediction": ["all x y.((Student(x) & Substance(y) & MadeMixture(x,y)) -> Combines(x,y))"]}
{"id": "entailmentbank_train_5030", "nl": "sugar is a kind of pure substance.", "fol": "", "prediction": ["all x.(Sugar(x) -> PureSubstance(x))"]}
{"id": "entailmentbank_train_5031", "nl": "lemon juice is a kind of substance.", "fol": "", "prediction": ["all x.(LemonJuice(x) -> Substance(x))"]}
{"id": "entailmentbank_train_5032", "nl": "water, lemon juice, sugar are three substances.", "fol": "", "prediction": ["all x.((Substance(x) & (Water(x) | LemonJuice(x) | Sugar(x))) -> ThreeSubstances(x))"]}
{"id": "entailmentbank_train_5033", "nl": "lemonade is made of water, lemon juice, and sugar.", "fol": "", "prediction": ["all x.(Lilacade(x) -> (MadeOfWater(x) & MadeOfLemonJuice(x) & MadeOfSugar(x)))"]}
{"id": "entailmentbank_train_5034", "nl": "lemonade is made of at least three substances.", "fol": "", "prediction": ["all x.(Limonade(x) -> MadeOfAtLeastThreeSubstances(x))"]}
{"id": "entailmentbank_train_5035", "nl": "lemonade is a kind of mixture.", "fol": "", "prediction": ["all x.(Limonade(x) -> Mixture(x))"]}
{"id": "entailmentbank_train_5036", "nl": "a carbonated beverage contains water and dissolved carbon dioxide.", "fol": "", "prediction": ["all x.(CarbonatedBeverage(x) -> (ContainsWater(x) & DissolvedCarbonDioxide(x)))"]}
{"id": "entailmentbank_train_5037", "nl": "carbon dioxide is a kind of substance.", "fol": "", "prediction": ["all x.(CarbonDioxide(x) -> Substance(x))"]}
{"id": "entailmentbank_train_5038", "nl": "a carbondated beverage contains one substance dissolved in another substance.", "fol": "", "prediction": ["all x y.((Beverage(x) & Carbondated(x)) -> ContainsSubstance(x,y))"]}
{"id": "entailmentbank_train_5039", "nl": "a solution is formed by one substance being dissolved in another substance.", "fol": "", "prediction": ["all x y.((Solution(x) & Substance(y) & DissolvedIn(x,y)) -> FormedBy(x,y))"]}
{"id": "entailmentbank_train_5040", "nl": "a carbonated beverage is a kind of solution.", "fol": "", "prediction": ["all x.(CarbonatedBeverage(x) -> Solution(x))"]}
{"id": "entailmentbank_train_5041", "nl": "a solution is a mixture.", "fol": "", "prediction": ["all x.(Solution(x) -> Mixture(x))"]}
{"id": "entailmentbank_train_5042", "nl": "carbonated beverage is a kind of mixture.", "fol": "", "prediction": ["all x.(CarbonatedBeverage(x) -> Mixture(x))"]}
{"id": "entailmentbank_train_5043", "nl": "soda water is a kind of carbonated beverage.", "fol": "", "prediction": ["all x.(SodaWater(x) -> CarbonatedBeverage(x))"]}
{"id": "entailmentbank_train_5044", "nl": "soda water is a kind of mixture.", "fol": "", "prediction": ["all x.(SodaWater(x) -> Mixture(x))"]}
{"id": "entailmentbank_train_5045", "nl": "salt is a kind of pure substance.", "fol": "", "prediction": ["all x.(Salt(x) -> PureSubstance(x))"]}
{"id": "entailmentbank_train_5046", "nl": "salt and water are two substances.", "fol": "", "prediction": ["all x.((Salt(x) & Water(x)) -> Substance(x))"]}
{"id": "entailmentbank_train_5047", "nl": "salt dissolves in water when they are combined.", "fol": "", "prediction": ["all x.((Salt(x) & Water(y) & Combines(x,y)) -> DissolvesIn(x,y))"]}
{"id": "entailmentbank_train_5048", "nl": "salt dissolving in water is an example of one substance being dissolved in another substance.", "fol": "", "prediction": ["all x y.((Salt(x) & Water(y) & DissolvedIn(x,y)) -> DissolvedIn(x,y))"]}
{"id": "entailmentbank_train_5049", "nl": "salt dissolving in water will form a salt water solution.", "fol": "", "prediction": ["all x.((Salt(x) & DissolvesInWater(x)) -> SaltWaterSolution(x))"]}
{"id": "entailmentbank_train_5050", "nl": "dissolving is an example of two substances being combined physically.", "fol": "", "prediction": ["all x.((Substance(x) & Dissolving(x)) -> CombinedPhysically(x))"]}
{"id": "entailmentbank_train_5051", "nl": "salt dissolving in water is an example of two substances being combined physically.", "fol": "", "prediction": ["all x.((Salt(x) & DissolvesInWater(x)) -> PhysicallyCombined(x))"]}
{"id": "entailmentbank_train_5052", "nl": "salt water is a kind of mixture.", "fol": "", "prediction": ["all x.(SaltWater(x) -> Mixture(x))"]}
{"id": "entailmentbank_train_5053", "nl": "computer chips often are made of silicon.", "fol": "", "prediction": ["all x.(ComputerChips(x) -> MadeOfSilicon(x))"]}
{"id": "entailmentbank_train_5054", "nl": "solar cells often are made of silicon.", "fol": "", "prediction": ["all x.(SolarCell(x) -> MadeOfSilicon(x))"]}
{"id": "entailmentbank_train_5055", "nl": "solar cells and computer chips are made of silicon.", "fol": "", "prediction": ["all x.((SolarCell(x) | ComputerChips(x)) -> MadeOfSilicon(x))"]}
{"id": "entailmentbank_train_5056", "nl": "sugar dissolves in water when they are combined.", "fol": "", "prediction": ["all x.((Sugar(x) & Water(x)) -> DissolvesIn(x,Water))"]}
{"id": "entailmentbank_train_5057", "nl": "sugar dissolves in water is an example of one substance dissolving in another substance.", "fol": "", "prediction": ["all x y.((Sugar(x) & Water(y)) -> DissolvesIn(x,y))"]}
{"id": "entailmentbank_train_5058", "nl": "sugar dissolving in water will form a solution.", "fol": "", "prediction": ["all x.((Sugar(x) & DissolvesInWater(x)) -> FormsSolution(x))"]}
{"id": "entailmentbank_train_5059", "nl": "sodum chloride is made of two elements chemically combined.", "fol": "", "prediction": ["all x.(SodumChloride(x) -> MadeOfTwoElements(x))"]}
{"id": "entailmentbank_train_5060", "nl": "sugar dissolving in water is an example of one substance dissolving in another substance.", "fol": "", "prediction": ["all x y.((Sugar(x) & Water(y) & DissolvingIn(x,y)) -> DissolvingIn(x,y))"]}
{"id": "entailmentbank_train_5061", "nl": "sugar will form a solution when it dissolves in water.", "fol": "", "prediction": ["all x.((Sugar(x) & DissolvesInWater(x)) -> FormsSolution(x))"]}
{"id": "entailmentbank_train_5062", "nl": "when one substance is dissolved in another substance then the molecules of that other substance exist in solution.", "fol": "", "prediction": ["all x y.((Substance(x) & Substance(y) & DissolvedIn(x,y)) -> MoleculesOf(x,y))"]}
{"id": "entailmentbank_train_5063", "nl": "sugar molecules exist in solution when it forms solution with water.", "fol": "", "prediction": ["all x.((SugarMolecule(x) & FormsSolutionWithWater(x)) -> ExistsInSolution(x))"]}
{"id": "entailmentbank_train_5064", "nl": "sugar water is a kind of solution.", "fol": "", "prediction": ["all x.(SugarWater(x) -> Solution(x))"]}
{"id": "entailmentbank_train_5065", "nl": "sugar water is a mixture.", "fol": "", "prediction": ["all x.(SugarWater(x) -> Mixture(x))"]}
{"id": "entailmentbank_train_5066", "nl": "iron sulfide is made of iron and sulfur.", "fol": "", "prediction": ["all x.(IronSulfide(x) -> (MadeOfIron(x) & MadeOfSulfur(x)))"]}
{"id": "entailmentbank_train_5067", "nl": "iron sulfide can be formed by heating a mixture of powdered iron and sulfur.", "fol": "", "prediction": ["all x.(IronSulfide(x) -> (FormedByHeating(x) & PowderedIron(x) & Sulfur(x)))"]}
{"id": "entailmentbank_train_5068", "nl": "iron sulfide is made of a mixture of iron and sulfur being heated.", "fol": "", "prediction": ["all x.(IronSulfide(x) -> (MixtureOfIronAndSulfurHeated(x)))"]}
{"id": "entailmentbank_train_5069", "nl": "sulfur is a kind of element.", "fol": "", "prediction": ["all x.(Sulfur(x) -> Element(x))"]}
{"id": "entailmentbank_train_5070", "nl": "iron and sulfur are two elements.", "fol": "", "prediction": ["(Element(iron) & Element(sulfur))"]}
{"id": "entailmentbank_train_5071", "nl": "iron sulfide is made of two elements.", "fol": "", "prediction": ["all x.(IronSulfide(x) -> MadeOfTwoElements(x))"]}
{"id": "entailmentbank_train_5072", "nl": "iron sulfide is a compound.", "fol": "", "prediction": ["all x.(IronSulfide(x) -> Compound(x))"]}
{"id": "entailmentbank_train_5073", "nl": "if two substances together form a mixture then those substances can be separated from one another by physical changes.", "fol": "", "prediction": ["all x y.((Substance(x) & Substance(y) & FormsMixture(x,y)) -> SeparatedByPhysicalChanges(x,y))"]}
{"id": "entailmentbank_train_5074", "nl": "air is made of nitrogen, oxygen, carbon dioxide, water vapor, and argon.", "fol": "", "prediction": ["all x.(Air(x) -> (MadeOfNitrogen(x) & MadeOfOxygen(x) & MadeOfCarbonDioxide(x) & MadeOfWaterVapor(x) & MadeOfArgon(x)))"]}
{"id": "entailmentbank_train_5075", "nl": "air is a mixture.", "fol": "", "prediction": ["all x.(Air(x) -> Mixture(x))"]}
{"id": "entailmentbank_train_5076", "nl": "juice is a kind of solution.", "fol": "", "prediction": ["all x.(Juice(x) -> Solution(x))"]}
{"id": "entailmentbank_train_5077", "nl": "a bottle contains juice.", "fol": "", "prediction": ["all x.(Bloot(x) -> ContainsJuice(x))"]}
{"id": "entailmentbank_train_5078", "nl": "the bottle contains a solution.", "fol": "", "prediction": ["all x.(Bloot(x) -> ContainsSolution(x))"]}
{"id": "entailmentbank_train_5079", "nl": "salt is soluble in water.", "fol": "", "prediction": ["all x.(Salt(x) -> SolubleInWater(x))"]}
{"id": "entailmentbank_train_5080", "nl": "if something is soluble in something, then that something can be dissolved in something forming a solution.", "fol": "", "prediction": ["all x.((SolubleIn(x) & InSolvent(x)) -> CanBeDissolvedInSolvent(x))"]}
{"id": "entailmentbank_train_5081", "nl": "salt will dissolve in water and form a solution.", "fol": "", "prediction": ["all x.(Salt(x) -> (DissolvesInWater(x) & FormsSolution(x)))"]}
{"id": "entailmentbank_train_5082", "nl": "the student mixed salt with water.", "fol": "", "prediction": ["all x y.((Student(x) & Salt(y)) -> MixedWithWater(x,y))"]}
{"id": "entailmentbank_train_5083", "nl": "salt and water will form a solution.", "fol": "", "prediction": ["all x.((Salt(x) & Water(x)) -> FormsSolution(x))"]}
{"id": "entailmentbank_train_5084", "nl": "sugar is soluble in water.", "fol": "", "prediction": ["all x.(Sugar(x) -> SolubleInWater(x))"]}
{"id": "entailmentbank_train_5085", "nl": "sugar will dissolve in water and form a solution.", "fol": "", "prediction": ["all x.(Sugar(x) -> (DissolvesInWater(x) & FormsSolution(x)))"]}
{"id": "entailmentbank_train_5086", "nl": "salt is a kind of solid.", "fol": "", "prediction": ["all x.(Salt(x) -> Solid(x))"]}
{"id": "entailmentbank_train_5087", "nl": "sugar is a kind of solid.", "fol": "", "prediction": ["all x.(Sugar(x) -> Solid(x))"]}
{"id": "entailmentbank_train_5088", "nl": "sugar and salt are solids.", "fol": "", "prediction": ["all x.((Sugar(x) | Salt(x)) -> Solid(x))"]}
{"id": "entailmentbank_train_5089", "nl": "if solids are combined physically, then the physical properties of the solids will stay the same.", "fol": "", "prediction": ["all x.((Solids(x) & PhysicallyCombined(x)) -> PhysicalPropertiesSame(x))"]}
{"id": "entailmentbank_train_5090", "nl": "if sugar and salt are combined physically, then the physical properties of the sugar and salt will stay the same.", "fol": "", "prediction": ["all x.((Sugar(x) & Salt(x)) -> PhysicalPropertiesSame(x))"]}
{"id": "entailmentbank_train_5091", "nl": "a student mixed sugar and salt.", "fol": "", "prediction": ["all x.(Student(x) -> (MixedSugar(x) & MixedSalt(x)))"]}
{"id": "entailmentbank_train_5092", "nl": "the physical properties of sugar and salt will stay the same.", "fol": "", "prediction": ["all x.((Sugar(x) & Salt(x)) -> PhysicalPropertiesSame(x))"]}
{"id": "entailmentbank_train_5093", "nl": "different solids are combined physically.", "fol": "", "prediction": ["all x.(Solid(x) -> CombinedPhysically(x))"]}
{"id": "entailmentbank_train_5094", "nl": "different solids will have the same physical properties.", "fol": "", "prediction": ["all x.(Solid(x) -> SamePhysicalProperties(x))"]}
{"id": "entailmentbank_train_5095", "nl": "different solids that are combined will become a mixture.", "fol": "", "prediction": ["all x.((Solid(x) & Combined(x)) -> Mixture(x))"]}
{"id": "entailmentbank_train_5096", "nl": "a speck is a kind of solid object.", "fol": "", "prediction": ["all x.(Speck(x) -> SolidObject(x))"]}
{"id": "entailmentbank_train_5097", "nl": "color is a kind of physical / visual property.", "fol": "", "prediction": ["all x.(Color(x) -> (PhysicalProperty(x) | VisualProperty(x)))"]}
{"id": "entailmentbank_train_5098", "nl": "specks of different colors are different substances.", "fol": "", "prediction": ["all x.(Speck(x) -> DifferentColor(x))"]}
{"id": "entailmentbank_train_5099", "nl": "a powder is made up of white specks and black specks.", "fol": "", "prediction": ["all x.(Powder(x) -> (WhiteSpecks(x) | BlackSpecks(x)))"]}
{"id": "entailmentbank_train_5100", "nl": "the powder is made up two different substances.", "fol": "", "prediction": ["all x.(Powder(x) -> MadeUpOfSubstances(x,2))"]}
{"id": "entailmentbank_train_5101", "nl": "the powder is a mixture.", "fol": "", "prediction": ["all x.(Powder(x) -> Mixture(x))"]}
{"id": "entailmentbank_train_5102", "nl": "pepper is a kind of substance.", "fol": "", "prediction": ["all x.(Pepper(x) -> Substance(x))"]}
{"id": "entailmentbank_train_5103", "nl": "salt and pepper are two substances.", "fol": "", "prediction": ["(Substance(salt) & Substance(pheromone))"]}
{"id": "entailmentbank_train_5104", "nl": "salt and pepper are mixed in a container.", "fol": "", "prediction": ["all x y.((Salt(x) & Pepper(y)) -> MixedInContainer(x,y))"]}
{"id": "entailmentbank_train_5105", "nl": "salt and pepper are two substances mixed in a container.", "fol": "", "prediction": ["all x.((Substance(x) & MixedInContainer(x)) -> (Salt(x) & Pepper(x)))"]}
{"id": "entailmentbank_train_5106", "nl": "salt and pepper mixed together will form a mixture.", "fol": "", "prediction": ["all x.((Salt(x) & Pepper(x) & MixedTogether(x)) -> Mixture(x))"]}
{"id": "entailmentbank_train_5107", "nl": "a student mixed peanut, sugar, spice, and salt togher in a bowl.", "fol": "", "prediction": ["all x y z.((Student(x) & Peanut(y) & Sugar(z) & Spice(x) & Salt(x)) -> MixedInBowl(x,y,z))"]}
{"id": "entailmentbank_train_5108", "nl": "a student made a mixture.", "fol": "", "prediction": ["all x.(Student(x) -> MadeMixture(x))"]}
{"id": "entailmentbank_train_5109", "nl": "fruit salad is a kind of salad.", "fol": "", "prediction": ["all x.(FruitSalad(x) -> Salad(x))"]}
{"id": "entailmentbank_train_5110", "nl": "salad is a mixture.", "fol": "", "prediction": ["all x.(Salad(x) -> Mixture(x))"]}
{"id": "entailmentbank_train_5111", "nl": "fruit salad is a kind of mixture.", "fol": "", "prediction": ["all x.(FruitSalad(x) -> Mixture(x))"]}
{"id": "entailmentbank_train_5112", "nl": "fruit salad often is made of fruit.", "fol": "", "prediction": ["all x.(FruitSalad(x) -> MadeOfFruit(x))"]}
{"id": "entailmentbank_train_5113", "nl": "fruit is usually a solid.", "fol": "", "prediction": ["all x.(Fruit(x) -> Solid(x))"]}
{"id": "entailmentbank_train_5114", "nl": "fruit salad is made of solids.", "fol": "", "prediction": ["all x.(FruitSalad(x) -> MadeOfSolids(x))"]}
{"id": "entailmentbank_train_5115", "nl": "fruit salad is a mixture of solids.", "fol": "", "prediction": ["all x.(FruitSalad(x) -> MixtureOfSolids(x))"]}
{"id": "entailmentbank_train_5116", "nl": "a mixture of solids can be separated easily.", "fol": "", "prediction": ["all x.((MixtureOfSolids(x) & SeparatedEasily(x)) -> CanBeSeparatedEasily(x))"]}
{"id": "entailmentbank_train_5117", "nl": "fruit salad can be easily separated.", "fol": "", "prediction": ["all x.(FruitSalad(x) -> CanEasilySeparate(x))"]}
{"id": "entailmentbank_train_5118", "nl": "if something is insoluble in something, then they will remain separated.", "fol": "", "prediction": ["all x.((InsolubleIn(x) & InsolubleIn(x)) -> RemainsSeparated(x))"]}
{"id": "entailmentbank_train_5119", "nl": "oil is insoluble in water.", "fol": "", "prediction": ["all x.(Oil(x) -> InsolubleInWater(x))"]}
{"id": "entailmentbank_train_5120", "nl": "oil will remain separated in water.", "fol": "", "prediction": ["all x.(Oil(x) -> SeparatedInWater(x))"]}
{"id": "entailmentbank_train_5121", "nl": "water is the solvent.", "fol": "", "prediction": ["all x.(Water(x) -> Solvent(x))"]}
{"id": "entailmentbank_train_5122", "nl": "evaporation can be used to separate a colution by allowing the solvent to evaporate.", "fol": "", "prediction": ["all x y.((Evaporation(x) & Colution(y)) -> SeparatesByEvaporating(x,y))"]}
{"id": "entailmentbank_train_5123", "nl": "the solute water will evaporate from the solution.", "fol": "", "prediction": ["all x.(SoluteWater(x) -> EvaporatesFromSolution(x))"]}
{"id": "entailmentbank_train_5124", "nl": "if the solvent evaporates, the solute will be separated from the solution.", "fol": "", "prediction": ["all x.((Solvent(x) & Evaporates(x)) -> SeparateSoluteFromSolution(x))"]}
{"id": "entailmentbank_train_5125", "nl": "the solute will be separated from the solution.", "fol": "", "prediction": ["all x y.((Solute(x) & Solution(y)) -> SeparatedFrom(x,y))"]}
{"id": "entailmentbank_train_5126", "nl": "sugar is the solute.", "fol": "", "prediction": ["all x.(Sugar(x) -> Solute(x))"]}
{"id": "entailmentbank_train_5127", "nl": "sugar will be separated from the solution.", "fol": "", "prediction": ["all x y.((Sugar(x) & Solution(y)) -> SeparatedFrom(x,y))"]}
{"id": "entailmentbank_train_5128", "nl": "salt is the solute.", "fol": "", "prediction": ["all x.(Salt(x) -> Solute(x))"]}
{"id": "entailmentbank_train_5129", "nl": "salt will be separated from the solution.", "fol": "", "prediction": ["all x y.((Salt(x) & Solution(y)) -> SeparatedFrom(x,y))"]}
{"id": "entailmentbank_train_5130", "nl": "soil is made of solid particles.", "fol": "", "prediction": ["all x.(Soil(x) -> MadeOfSolidParticles(x))"]}
{"id": "entailmentbank_train_5131", "nl": "a mixture of water and soil is a mixture of liquid and solid.", "fol": "", "prediction": ["all x.((MixtureOfWaterAndSoil(x)) -> (MixtureOfLiquidAndSolid(x)))"]}
{"id": "entailmentbank_train_5132", "nl": "a filter is used for separating liquid from solid particles.", "fol": "", "prediction": ["all x.(Filter(x) -> SeparatesLiquidFromSolidParticles(x))"]}
{"id": "entailmentbank_train_5133", "nl": "a filter can be used to separate soil from water.", "fol": "", "prediction": ["all x.(Filter(x) -> SeparatesSoilFromWater(x))"]}
{"id": "entailmentbank_train_5134", "nl": "iron filings are made of small pieces of iron.", "fol": "", "prediction": ["all x.(IronFiling(x) -> MadeOfSmallPiecesOfIron(x))"]}
{"id": "entailmentbank_train_5135", "nl": "iron fillings are always magnetic.", "fol": "", "prediction": ["all x.(IronFilling(x) -> Magnetic(x))"]}
{"id": "entailmentbank_train_5136", "nl": "sand is always nonmagnetic.", "fol": "", "prediction": ["all x.(Sand(x) -> NonMagnetic(x))"]}
{"id": "entailmentbank_train_5137", "nl": "a mixture of iron fillings and sand is a mixture of magnetic and nonmagnetic material.", "fol": "", "prediction": ["all x.((MixtureOfIronFillingsAndSand(x)) -> (MagneticMaterial(x) & NonMagneticMaterial(x)))"]}
{"id": "entailmentbank_train_5138", "nl": "magnet can be used for separating a magnetic material from a mixture of a magnetic and nonmagnetic material.", "fol": "", "prediction": ["all x y.((Magnet(x) & MagneticMaterial(y) & MagneticMaterial(y)) -> SeparatesFromMixture(x,y))"]}
{"id": "entailmentbank_train_5139", "nl": "a magnet can be used to separate iron fillings from sand.", "fol": "", "prediction": ["all x y.((Magnet(x) & IronFilling(y)) -> SeparatesFromSand(x,y))"]}
{"id": "entailmentbank_train_5140", "nl": "steel is always magnetic.", "fol": "", "prediction": ["all x.(Steel(x) -> Magnetic(x))"]}
{"id": "entailmentbank_train_5141", "nl": "steel cans are made of steels.", "fol": "", "prediction": ["all x.(SteelCan(x) -> MadeOfSteels(x))"]}
{"id": "entailmentbank_train_5142", "nl": "steel cans are magnetic.", "fol": "", "prediction": ["all x.(SteelCan(x) -> Magnetic(x))"]}
{"id": "entailmentbank_train_5143", "nl": "aluminum cans are made of aluminums.", "fol": "", "prediction": ["all x.(AluminumCan(x) -> MadeOfAluminums(x))"]}
{"id": "entailmentbank_train_5144", "nl": "aluminum is always nonmagnetic.", "fol": "", "prediction": ["all x.(Aluminum(x) -> NonMagnetic(x))"]}
{"id": "entailmentbank_train_5145", "nl": "aluminum cans are nonmagnetic.", "fol": "", "prediction": ["all x.(AluminumCan(x) -> NonMagnetic(x))"]}
{"id": "entailmentbank_train_5146", "nl": "a mixture of steel cans and aluminum cans is an example of a mixture of magetic and nonmagnetic material.", "fol": "", "prediction": ["all x.((Mixture(x) & SteelCans(x) & AluminumCans(x)) -> (MageticMaterial(x) & NonmagneticMaterial(x)))"]}
{"id": "entailmentbank_train_5147", "nl": "a magnet can be used to separate steel cans and aluminum cans.", "fol": "", "prediction": ["all x.(Magnet(x) -> (SeparateStructure(x,SteelCans) & SeparateSeparateSeparateSeparateSeparateSeparateSeparateSeparateSeparateSeparateSeparateSeparateSeparateSeparateSeparateSeparateSeparateSeparateSeparateSeparateSeparateSeparateSeparateSeparateSeparateSeparateSeparateSeparateSeparateSepar"]}
{"id": "entailmentbank_train_5148", "nl": "sand is insoluble in water.", "fol": "", "prediction": ["all x.(Sand(x) -> InsolubleInWater(x))"]}
{"id": "entailmentbank_train_5149", "nl": "sand will remain as solid particles in water.", "fol": "", "prediction": ["all x.(Sand(x) -> SolidParticlesInWater(x))"]}
{"id": "entailmentbank_train_5150", "nl": "salt will dissolve in water.", "fol": "", "prediction": ["all x.(Salt(x) -> DissolvesInWater(x))"]}
{"id": "entailmentbank_train_5151", "nl": "adding water to salt and sand will produce a mixture of liquid and solid particles.", "fol": "", "prediction": ["all x y.((Addition(x,y) & Salt(y) & Sand(y)) -> (ProducesMixtureOfLiquidAndSolidParticles(x)))"]}
{"id": "entailmentbank_train_5152", "nl": "a filter can separate sand from salt water.", "fol": "", "prediction": ["all x.(Filter(x) -> SeparatesSandFromSaltWater(x))"]}
{"id": "entailmentbank_train_5153", "nl": "a mixture of iron and sand is a mixture of magnetic and nonmagnetic material.", "fol": "", "prediction": ["all x.((MixtureOfIronAndSand(x) & MagneticMaterial(x) & NonmagneticMaterial(x)) -> MixtureOfMaterial(x))"]}
{"id": "entailmentbank_train_5154", "nl": "a magnet can be used to separate iron from sand.", "fol": "", "prediction": ["all x y.((Magnet(x) & Iron(y)) -> SeparatesFromSand(x,y))"]}
{"id": "entailmentbank_train_5155", "nl": "black pepper is always nonmagnetic.", "fol": "", "prediction": ["all x.(BlackPepper(x) -> NonMagnetic(x))"]}
{"id": "entailmentbank_train_5156", "nl": "the mixture of iron fillings and black pepper is a mixture of magnetic and nonmagnetic material.", "fol": "", "prediction": ["all x.((Mixture(x) & IronFillings(x) & BlackPepper(x)) -> (MagneticMaterial(x) & NonMagneticMaterial(x)))"]}
{"id": "entailmentbank_train_5157", "nl": "magnet can be used to separate a mixture of iron fillings and black pepper.", "fol": "", "prediction": ["all x.(Magnet(x) -> (SeparateMixture(x,ironFillings) & SeparateMixture(x,blackPepper)))"]}
{"id": "entailmentbank_train_5158", "nl": "sand will remain separated from water.", "fol": "", "prediction": ["all x.(Sand(x) -> SeparatedFromWater(x))"]}
{"id": "entailmentbank_train_5159", "nl": "denser particles in liquids settle below liquids that are less dense.", "fol": "", "prediction": ["all x y.((Liquid(x) & DenserParticles(y) & Liquid(y)) -> SitsBelowLiquids(x,y))"]}
{"id": "entailmentbank_train_5160", "nl": "sand is denser than water.", "fol": "", "prediction": ["all x.(Sand(x) -> DenserThanWater(x))"]}
{"id": "entailmentbank_train_5161", "nl": "sand in water settles to the bottom of water.", "fol": "", "prediction": ["all x y.((Sand(x) & Water(y)) -> SitsToBottom(x,y))"]}
{"id": "entailmentbank_train_5162", "nl": "glass is always nonmagnetic.", "fol": "", "prediction": ["all x.(Glass(x) -> NonMagnetic(x))"]}
{"id": "entailmentbank_train_5163", "nl": "plastic is always nonmagnetic.", "fol": "", "prediction": ["all x.(Plastic(x) -> NonMagnetic(x))"]}
{"id": "entailmentbank_train_5164", "nl": "a mixture of iron, plastic, glass, and aluminum is a mixture of magnetic and nonmagnetic material.", "fol": "", "prediction": ["all x.((Mixture(x) & Iron(x) & Plastic(x) & Glass(x) & Aluminum(x)) -> (MagneticMaterial(x) & NonMagneticMaterial(x)))"]}
{"id": "entailmentbank_train_5165", "nl": "a magnet can separate iron from plastic, glass, and aluminum.", "fol": "", "prediction": ["all x.(Magnet(x) -> (SeparatesIronFromPlastic(x) & SeparatesIronFromGlass(x) & SeparatesIronFromAluminum(x)))"]}
{"id": "entailmentbank_train_5166", "nl": "plastic is durable.", "fol": "", "prediction": ["all x.(Plastic(x) -> Durable(x))"]}
{"id": "entailmentbank_train_5167", "nl": "if an object is durable, then that object will not break easily.", "fol": "", "prediction": ["all x.((Object(x) & Durable(x)) -> -BreaksEasily(x))"]}
{"id": "entailmentbank_train_5168", "nl": "plastic does not break easily.", "fol": "", "prediction": ["all x.(Plastic(x) -> -BreaksEasily(x))"]}
{"id": "entailmentbank_train_5169", "nl": "airtight is when air cannot pass through something.", "fol": "", "prediction": ["all x.(Airtight(x) -> (AirCannotPassThrough(x)))"]}
{"id": "entailmentbank_train_5170", "nl": "air cannot pass through plastic.", "fol": "", "prediction": ["all x.(Air(x) -> -PassesThroughPlastic(x))"]}
{"id": "entailmentbank_train_5171", "nl": "plastic is airtight.", "fol": "", "prediction": ["all x.(Plastic(x) -> Airtight(x))"]}
{"id": "entailmentbank_train_5172", "nl": "plastic is microwave-safe.", "fol": "", "prediction": ["all x.(Plastic(x) -> MicrowaveSafe(x))"]}
{"id": "entailmentbank_train_5173", "nl": "plastic is cheap.", "fol": "", "prediction": ["all x.(Plastic(x) -> Cheap(x))"]}
{"id": "entailmentbank_train_5174", "nl": "plastic is cheap, microwave-save, airtight, and does not break easily.", "fol": "", "prediction": ["all x.(Plastic(x) -> (Luxe(x) & MicrowaveSave(x) & Airtight(x) & -BreaksEasily(x)))"]}
{"id": "entailmentbank_train_5175", "nl": "leather is resistant to water.", "fol": "", "prediction": ["all x.(Leather(x) -> ResistantToWater(x))"]}
{"id": "entailmentbank_train_5176", "nl": "leather is a kind of material.", "fol": "", "prediction": ["all x.(Leather(x) -> Material(x))"]}
{"id": "entailmentbank_train_5177", "nl": "leather is a kind of water-resistant material.", "fol": "", "prediction": ["all x.(Leather(x) -> WaterResistantMaterial(x))"]}
{"id": "entailmentbank_train_5178", "nl": "if shoes are made of leather, then those shoes would be water-resistant.", "fol": "", "prediction": ["all x.((Shoes(x) & MadeOfLeather(x)) -> WaterResistant(x))"]}
{"id": "entailmentbank_train_5179", "nl": "plastic is a kind of material.", "fol": "", "prediction": ["all x.(Plastic(x) -> Material(x))"]}
{"id": "entailmentbank_train_5180", "nl": "glass and plastic are two materials.", "fol": "", "prediction": ["all x.((Material(x) & Material(x)) -> (Glass(x) & Plastic(x)))"]}
{"id": "entailmentbank_train_5181", "nl": "fiberglass is made of glass and plastic.", "fol": "", "prediction": ["all x.(Foilglass(x) -> (MadeOf(x,glass) & MadeOf(x,plastic)))"]}
{"id": "entailmentbank_train_5182", "nl": "fiberglass is made of at least two materials.", "fol": "", "prediction": ["all x.(FastFiber(x) -> exists y.(Material(y) & MadeOf(x,y))))"]}
{"id": "entailmentbank_train_5183", "nl": "composite materials are made of two more more materials.", "fol": "", "prediction": ["all x.(CompositeMaterial(x) -> MadeOfTwoMoreMaterials(x))"]}
{"id": "entailmentbank_train_5184", "nl": "fiberglass is a kind fo composite materials.", "fol": "", "prediction": ["all x.(FoilAs(x,Fiber) -> CompositeMaterial(x))"]}
{"id": "entailmentbank_train_5185", "nl": "metals usually have greater conductivity than nonmetals.", "fol": "", "prediction": ["all x y.((Metal(x) & Nonmetal(y)) -> GreaterConductivity(x,y))"]}
{"id": "entailmentbank_train_5186", "nl": "metals usually have higher melting points than nonmetals.", "fol": "", "prediction": ["all x y.((Metal(x) & Nonmetal(y)) -> HigherMeltingPoints(x,y))"]}
{"id": "entailmentbank_train_5187", "nl": "metals usually have higher melting points and greater conductivity than nonmetals.", "fol": "", "prediction": ["all x y.((Metal(x) & Nonmetal(y)) -> (HigherMeltingPoints(x,y) & GreaterConductivity(x,y)))"]}
{"id": "entailmentbank_train_5188", "nl": "color is a property of an object.", "fol": "", "prediction": ["all x.(Color(x) -> PropertyOfObject(x))"]}
{"id": "entailmentbank_train_5189", "nl": "color is a kind of physical property.", "fol": "", "prediction": ["all x.(Color(x) -> PhysicalProperty(x))"]}
{"id": "entailmentbank_train_5190", "nl": "color is a physical property of an object.", "fol": "", "prediction": ["all x.(Color(x) -> PhysicalPropertyOfObject(x))"]}
{"id": "entailmentbank_train_5191", "nl": "an apple is a kind of object.", "fol": "", "prediction": ["all x.(Apple(x) -> Object(x))"]}
{"id": "entailmentbank_train_5192", "nl": "color is a physical property of an apple.", "fol": "", "prediction": ["all x.(Color(x) -> PhysicalPropertyOfApple(x))"]}
{"id": "entailmentbank_train_5193", "nl": "color is a property of a substance.", "fol": "", "prediction": ["all x.(Color(x) -> PropertyOfSubstance(x))"]}
{"id": "entailmentbank_train_5194", "nl": "color is a kind of property of carbon dioxide.", "fol": "", "prediction": ["all x.(Color(x) -> CarbonDioxideProperty(x))"]}
{"id": "entailmentbank_train_5195", "nl": "carbon dioxide is colorless.", "fol": "", "prediction": ["all x.(CarbonDioxide(x) -> Colorless(x))"]}
{"id": "entailmentbank_train_5196", "nl": "colorless is a kind of color.", "fol": "", "prediction": ["all x.(Colorless(x) -> Color(x))"]}
{"id": "entailmentbank_train_5197", "nl": "carbon dioxide is colorless in color.", "fol": "", "prediction": ["all x.(CarbonDioxide(x) -> Colorless(x))"]}
{"id": "entailmentbank_train_5198", "nl": "being colorless is a property of carbon dioxide.", "fol": "", "prediction": ["all x.(Colorless(x) -> CarbonDioxide(x))"]}
{"id": "entailmentbank_train_5199", "nl": "a ratio is a measure of one value divided by another value.", "fol": "", "prediction": ["all x y.((Ratio(x) & Value(y)) -> Measures(x,y))"]}
{"id": "entailmentbank_train_5200", "nl": "the ratio of an object's mass to volume is a measure of its mass divided by its volume.", "fol": "", "prediction": ["all x y.((Object(x) & Mass(y) & Volume(y)) -> MeasuresMassDividedByVolume(x,y))"]}
{"id": "entailmentbank_train_5201", "nl": "density is a measure of mass of an object divided by volume.", "fol": "", "prediction": ["all x.(Density(x) -> (MeasuresMass(x) & Object(x) & DividedByVolume(x)))"]}
{"id": "entailmentbank_train_5202", "nl": "the ratio of an object's mass to its volume is a measure of the object's density.", "fol": "", "prediction": ["all x y.((Object(x) & Mass(y) & Volume(y)) -> DensityMeasure(x,y))"]}
{"id": "entailmentbank_train_5203", "nl": "silt particles are floating in water.", "fol": "", "prediction": ["all x.(SiltParticle(x) -> FloatingInWater(x))"]}
{"id": "entailmentbank_train_5204", "nl": "less dense particles in liquids float on liquids that are more dense.", "fol": "", "prediction": ["all x y.((Liquid(x) & Liquid(y) & LessDenseParticles(x,y)) -> FloatsOn(x,y))"]}
{"id": "entailmentbank_train_5205", "nl": "silt particles are less dense than other particles in water.", "fol": "", "prediction": ["all x.(SiltParticle(x) -> LessDenseThanWaterParticles(x))"]}
{"id": "entailmentbank_train_5206", "nl": "less dense liquids float on liquids that are more dense.", "fol": "", "prediction": ["all x y.((Liquid(x) & Liquid(y) & LessDense(x)) -> FloatsOn(x,y))"]}
{"id": "entailmentbank_train_5207", "nl": "water is more dense than oil.", "fol": "", "prediction": ["all x y.((Water(x) & Oil(y)) -> MoreDense(x,y))"]}
{"id": "entailmentbank_train_5208", "nl": "oil will float on water.", "fol": "", "prediction": ["all x.(Oil(x) -> FloatsOnWater(x))"]}
{"id": "entailmentbank_train_5209", "nl": "the intensive properties of a substance will stay the same.", "fol": "", "prediction": ["all x y.((Substance(x) & IntensiveProperties(y)) -> StaysSame(x,y))"]}
{"id": "entailmentbank_train_5210", "nl": "two samples are the same substance.", "fol": "", "prediction": ["all x.(SameSubstance(x) -> SameSubstance(x))"]}
{"id": "entailmentbank_train_5211", "nl": "the intensive properties of two samples are the same.", "fol": "", "prediction": ["all x y.((Sample(x) & Sample(y)) -> SameIntenseProperties(x,y))"]}
{"id": "entailmentbank_train_5212", "nl": "density is an intensive property of substance.", "fol": "", "prediction": ["all x.(Density(x) -> IntensePropertyOfSubstance(x))"]}
{"id": "entailmentbank_train_5213", "nl": "two samples will have the same density.", "fol": "", "prediction": ["all x.(Sample(x) -> SameDensity(x))"]}
{"id": "entailmentbank_train_5214", "nl": "wood is a kind of natural material.", "fol": "", "prediction": ["all x.(Wood(x) -> NaturalMaterial(x))"]}
{"id": "entailmentbank_train_5215", "nl": "wood is usually sturdy.", "fol": "", "prediction": ["all x.(Wood(x) -> Sturdy(x))"]}
{"id": "entailmentbank_train_5216", "nl": "wood is a sturdy natural material.", "fol": "", "prediction": ["all x.(Wood(x) -> SturdyNaturalMaterial(x))"]}
{"id": "entailmentbank_train_5217", "nl": "a table is a kind of furniture.", "fol": "", "prediction": ["all x.(Table(x) -> Furniture(x))"]}
{"id": "entailmentbank_train_5218", "nl": "making furniture requires sturdy materials.", "fol": "", "prediction": ["all x.(Furniture(x) -> RequiresSturdyMaterials(x))"]}
{"id": "entailmentbank_train_5219", "nl": "making a table requires sturdy materials.", "fol": "", "prediction": ["all x.(Table(x) -> RequiresSturdyMaterials(x))"]}
{"id": "entailmentbank_train_5220", "nl": "wood would be the best for make a table.", "fol": "", "prediction": ["all x.((Wood(x) & Table(y)) -> BestFor(x,y))"]}
{"id": "entailmentbank_train_5221", "nl": "as the thickness of an object increases, the resistance of that object to tearing will increase.", "fol": "", "prediction": ["all x y.((Object(x) & Thickness(x,y) & Increases(x,y)) -> ResistanceToTorn(x,y))"]}
{"id": "entailmentbank_train_5222", "nl": "paper is a kind of object.", "fol": "", "prediction": ["all x.(Paper(x) -> Object(x))"]}
{"id": "entailmentbank_train_5223", "nl": "as the thickness of paper increases, the resistance of the object to tear will increase.", "fol": "", "prediction": ["all x.((Thickness(x) & Increases(x)) -> IncreasesResistanceToTear(x))"]}
{"id": "entailmentbank_train_5224", "nl": "a greeting card requires paper that does not tear easily.", "fol": "", "prediction": ["all x.(GreetingCard(x) -> (RequiresPaper(x) & -TearsEasily(x)))"]}
{"id": "entailmentbank_train_5225", "nl": "the thickness of paper should be considered when making a greeting card.", "fol": "", "prediction": ["all x.((PaperThickness(x) & MakingGreetingCard(x)) -> ShouldBeConscious(x))"]}
{"id": "entailmentbank_train_5226", "nl": "the new material will last longer.", "fol": "", "prediction": ["all x.((NewMaterial(x) & LastsLonger(x)) -> Longer(x))"]}
{"id": "entailmentbank_train_5227", "nl": "if something lasts longer then that something will not have to be replaced for a long time.", "fol": "", "prediction": ["all x.((PerformsLonger(x) & -ReplacedForLongTime(x)) -> LongerLasting(x))"]}
{"id": "entailmentbank_train_5228", "nl": "using new materials requires less replacements.", "fol": "", "prediction": ["all x.((NewMaterial(x) & RequiresLessReplacements(x)) -> RequiresLessReplacements(x))"]}
{"id": "entailmentbank_train_5229", "nl": "replacement of materials requires using money to buy new materials.", "fol": "", "prediction": ["all x.((Material(x) & Material(y)) -> RequiresMoney(x,y))"]}
{"id": "entailmentbank_train_5230", "nl": "using new material will use less money on replacement.", "fol": "", "prediction": ["all x.((NewMaterial(x) & UsesLessMoneyOnReplacement(x)) -> UsesLessMoneyOnReplacement(x))"]}
{"id": "entailmentbank_train_5231", "nl": "metals usually have higher conductivity than nonmetals.", "fol": "", "prediction": ["all x y.((Metal(x) & Nonmetal(y)) -> HigherConductivity(x,y))"]}
{"id": "entailmentbank_train_5232", "nl": "metal is an electrical conductor.", "fol": "", "prediction": ["all x.(Metal(x) -> ElectricalConductor(x))"]}
{"id": "entailmentbank_train_5233", "nl": "metal is the material that has a higher conductivity than other materials.", "fol": "", "prediction": ["all x.(Metal(x) -> HigherConductivityThanOtherMaterials(x))"]}
{"id": "entailmentbank_train_5234", "nl": "metal fork is made of metal.", "fol": "", "prediction": ["all x.(MetalFork(x) -> MadeOfMetal(x))"]}
{"id": "entailmentbank_train_5235", "nl": "metal fork is the best conductor of electricity in this example.", "fol": "", "prediction": ["all x.(MetalFork(x) -> BestConductorOfElectricity(x))"]}
{"id": "entailmentbank_train_5236", "nl": "an iron nail is the best conductor of electricity in this example.", "fol": "", "prediction": ["all x.((IronNail(x) & ConductsElectricity(x)) -> BestConductor(x))"]}
{"id": "entailmentbank_train_5237", "nl": "conductivity is a kind of physical property.", "fol": "", "prediction": ["all x.(Conductivity(x) -> PhysicalProperty(x))"]}
{"id": "entailmentbank_train_5238", "nl": "conductivity is a property of a material.", "fol": "", "prediction": ["all x.(Conductivity(x) -> PropertyOfMaterial(x))"]}
{"id": "entailmentbank_train_5239", "nl": "conductivity is a physical property of a material.", "fol": "", "prediction": ["all x.(Conductivity(x) -> PhysicalPropertyOfMaterial(x))"]}
{"id": "entailmentbank_train_5240", "nl": "copper is a kind of material.", "fol": "", "prediction": ["all x.(Cuivre(x) -> Material(x))"]}
{"id": "entailmentbank_train_5241", "nl": "conductivity is a physical property of copper.", "fol": "", "prediction": ["all x.(Conductivity(x) -> PhysicalPropertyOfCuid(x))"]}
{"id": "entailmentbank_train_5242", "nl": "metal is an electrical / electrical energy conductor.", "fol": "", "prediction": ["all x.(Metal(x) -> ElectricalEnergyConductor(x))"]}
{"id": "entailmentbank_train_5243", "nl": "coppor is an electrical conductor.", "fol": "", "prediction": ["all x.(Copor(x) -> ElectricalConductor(x))"]}
{"id": "entailmentbank_train_5244", "nl": "the ability to conduct electricity is a property of copper.", "fol": "", "prediction": ["all x.((Capabilities(x) & ConductsElectricity(x)) -> CopperProperty(x))"]}
{"id": "entailmentbank_train_5245", "nl": "a conducting wire can cause death to the user.", "fol": "", "prediction": ["all x y.((ConductingWire(x) & User(y)) -> CanCauseDeath(x,y))"]}
{"id": "entailmentbank_train_5246", "nl": "electrical insulation on a conducting wire can protect the user.", "fol": "", "prediction": ["all x y.((ElectricalInsulation(x) & ConductingWire(y)) -> CanProtectUser(x,y))"]}
{"id": "entailmentbank_train_5247", "nl": "electrical insulation over a conducting wire is required to protect the user.", "fol": "", "prediction": ["all x y.((ElectricalInsulation(x) & ConductingWire(y)) -> ProtectsUser(x,y))"]}
{"id": "entailmentbank_train_5248", "nl": "a conducting wire is a conductor.", "fol": "", "prediction": ["all x.(ConductingWire(x) -> Conductor(x))"]}
{"id": "entailmentbank_train_5249", "nl": "electrical insulation requires wrapping a conductor in an insulator.", "fol": "", "prediction": ["all x y.((ElectricalInsulation(x) & Conductor(y)) -> WrapsInInsulator(x,y))"]}
{"id": "entailmentbank_train_5250", "nl": "wrapping the conducting wire in an insulator can achieve electrical insulation.", "fol": "", "prediction": ["all x y.((WrappingConductingWire(x) & Insulator(y)) -> CanAchieveElectricalInsulation(x))"]}
{"id": "entailmentbank_train_5251", "nl": "plastic is usually an electrical insulator.", "fol": "", "prediction": ["all x.(Plastic(x) -> ElectricalInsulator(x))"]}
{"id": "entailmentbank_train_5252", "nl": "wrapping the conducting wire in plastic can achieve electrical insulation.", "fol": "", "prediction": ["all x y.((WrappingConductingWire(x) & Plastic(y)) -> CanAchieveElectricalInsulation(x))"]}
{"id": "entailmentbank_train_5253", "nl": "wrapping the conducting wire with plastic can protect the user.", "fol": "", "prediction": ["all x y.((WrappingConductingWire(x) & Plastic(y)) -> ProtectsUser(x,y))"]}
{"id": "entailmentbank_train_5254", "nl": "coppor is the material that best conducts electricity in this example.", "fol": "", "prediction": ["all x.((Material(x) & ConductsElectricity(x)) -> Coppor(x))"]}
{"id": "entailmentbank_train_5255", "nl": "copper is an electrical conductor.", "fol": "", "prediction": ["all x.(Cuirconductor(x) -> ElectricalConductor(x))"]}
{"id": "entailmentbank_train_5256", "nl": "wiring requires an electrical conductor.", "fol": "", "prediction": ["all x.(Wiring(x) -> RequiresElectricalConductor(x))"]}
{"id": "entailmentbank_train_5257", "nl": "copper can be used in wiring.", "fol": "", "prediction": ["all x.(Cuircon(x) -> CanBeUsedInWiring(x))"]}
{"id": "entailmentbank_train_5258", "nl": "metals usually have higher / greater conductivity than nonmetals.", "fol": "", "prediction": ["all x y.((Metal(x) & Nonmetal(y)) -> HigherConductivity(x,y))"]}
{"id": "entailmentbank_train_5259", "nl": "metal is an electrical  conductor.", "fol": "", "prediction": ["all x.(Metal(x) -> ElectricalConductor(x))"]}
{"id": "entailmentbank_train_5260", "nl": "conductivity can be used to identify metals.", "fol": "", "prediction": ["all x.(Conductivity(x) -> IdentifiesMetals(x))"]}
{"id": "entailmentbank_train_5261", "nl": "an element is a kind of material.", "fol": "", "prediction": ["all x.(Element(x) -> Material(x))"]}
{"id": "entailmentbank_train_5262", "nl": "conductivity is a property of an element.", "fol": "", "prediction": ["all x.(Conductivity(x) -> PropertyOfElement(x))"]}
{"id": "entailmentbank_train_5263", "nl": "an electrol conductor is conductive in conductivity.", "fol": "", "prediction": ["all x.(ElectrololConductor(x) -> Conductive(x))"]}
{"id": "entailmentbank_train_5264", "nl": "an electrol conductor is an element that is conductive in conductivity.", "fol": "", "prediction": ["all x.(Electrol Conductor(x) -> ConductiveElement(x))"]}
{"id": "entailmentbank_train_5265", "nl": "wiring requires an element that is conductive in conductivity.", "fol": "", "prediction": ["all x.(Wiring(x) -> (Conductive(x) & Conductive(x)))"]}
{"id": "entailmentbank_train_5266", "nl": "feathers are usually soft in sensation.", "fol": "", "prediction": ["all x.(Feather(x) -> SoftInSensation(x))"]}
{"id": "entailmentbank_train_5267", "nl": "soft is a kind of touch sensation.", "fol": "", "prediction": ["all x.(Soft(x) -> TouchSensation(x))"]}
{"id": "entailmentbank_train_5268", "nl": "a feather feels soft.", "fol": "", "prediction": ["all x.(Feather(x) -> FeelsSoft(x))"]}
{"id": "entailmentbank_train_5269", "nl": "the intensive property of something is the same for the things of same kind.", "fol": "", "prediction": ["all x y.((IntenseProperty(x) & Thing(y) & SameType(x,y)) -> SameFor(x,y))"]}
{"id": "entailmentbank_train_5270", "nl": "hardness is an intensive property.", "fol": "", "prediction": ["all x.(Hardness(x) -> IntenseProperty(x))"]}
{"id": "entailmentbank_train_5271", "nl": "hardness of a something is the same for the things of same kind.", "fol": "", "prediction": ["all x y.((Thing(x) & Thing(y) & SameType(x,y)) -> HardnessSameFor(x,y))"]}
{"id": "entailmentbank_train_5272", "nl": "the statue is made of a kind of marble.", "fol": "", "prediction": ["all x.(Statue(x) -> MadeOfMarble(x))"]}
{"id": "entailmentbank_train_5273", "nl": "the table is made of the same kind of marble.", "fol": "", "prediction": ["all x.(Table(x) -> SameMarble(x))"]}
{"id": "entailmentbank_train_5274", "nl": "the statue and the table is made the same kind of marble.", "fol": "", "prediction": ["all x y.((Statue(x) & Table(y)) -> SameMarble(x,y))"]}
{"id": "entailmentbank_train_5275", "nl": "the hardness of the statue and the table is the same.", "fol": "", "prediction": ["all x y.((Statue(x) & Table(y)) -> SameHardness(x,y))"]}
{"id": "entailmentbank_train_5276", "nl": "comparing requires measuring.", "fol": "", "prediction": ["all x.(Compare(x) -> RequiresMeasuring(x))"]}
{"id": "entailmentbank_train_5277", "nl": "to compare the hardness of minerals requires scratching those materials.", "fol": "", "prediction": ["all x.((Mineral(x) & Hardness(x)) -> Scratches(x))"]}
{"id": "entailmentbank_train_5278", "nl": "a mineral is a kind of object.", "fol": "", "prediction": ["all x.(Mineral(x) -> Object(x))"]}
{"id": "entailmentbank_train_5279", "nl": "the luster of an object can be determined by looking at that object.", "fol": "", "prediction": ["all x y.((Object(x) & Object(y)) -> DeterminesLuster(x,y))"]}
{"id": "entailmentbank_train_5280", "nl": "the luster of a mineral can be determined by looking at it.", "fol": "", "prediction": ["all x y.((Mineral(x) & Mineral(y)) -> DeterminesLuster(x,y))"]}
{"id": "entailmentbank_train_5281", "nl": "nails are usually made of metal.", "fol": "", "prediction": ["all x.(Nail(x) -> MadeOfMetal(x))"]}
{"id": "entailmentbank_train_5282", "nl": "metal is sometimes magnetic.", "fol": "", "prediction": ["exists x.(Metal(x) & Magnetic(x))"]}
{"id": "entailmentbank_train_5283", "nl": "metal nails are sometimes magnetic.", "fol": "", "prediction": ["all x.(MetalNail(x) -> Magnetic(x))"]}
{"id": "entailmentbank_train_5284", "nl": "a magnet attracts magnetic metals.", "fol": "", "prediction": ["all x.(Magnet(x) -> AttractsMagneticMetals(x))"]}
{"id": "entailmentbank_train_5285", "nl": "a metal nail will most likely be attracted to a magnet.", "fol": "", "prediction": ["all x.(MetalNail(x) -> AttractedToMagnet(x))"]}
{"id": "entailmentbank_train_5286", "nl": "a magnet attracts magnetic metals / ferromagnetic metals through magnetism.", "fol": "", "prediction": ["all x y.((Magnet(x) & Magnet(y)) -> AttractsMagneticMetals(x,y))"]}
{"id": "entailmentbank_train_5287", "nl": "an object is attracted to a magnet.", "fol": "", "prediction": ["all x y.((Object(x) & Magnet(y)) -> AttractedTo(x,y))"]}
{"id": "entailmentbank_train_5288", "nl": "the object is made of a magnetic material.", "fol": "", "prediction": ["all x.(MagneticMaterial(x) -> MadeOf(x,MagneticMaterial))"]}
{"id": "entailmentbank_train_5289", "nl": "the object is likely made of metal.", "fol": "", "prediction": ["all x.((Object(x) & MadeOfMetal(x)) -> LikelyMadeOfMetal(x))"]}
{"id": "entailmentbank_train_5290", "nl": "a magnet will attract an iron nail.", "fol": "", "prediction": ["all x.(Magnet(x) -> AttractsIronNail(x))"]}
{"id": "entailmentbank_train_5291", "nl": "a refrigerator door contains iron.", "fol": "", "prediction": ["all x.(RefrigeratorDoor(x) -> ContainsIron(x))"]}
{"id": "entailmentbank_train_5292", "nl": "a refrigerator door is magnetic.", "fol": "", "prediction": ["all x.(RefrigeratorDoor(x) -> Magnetic(x))"]}
{"id": "entailmentbank_train_5293", "nl": "a magnet can attract to a refrigerator door.", "fol": "", "prediction": ["all x y.((Magnet(x) & RefrigeratorDoor(y)) -> AttractsTo(x,y))"]}
{"id": "entailmentbank_train_5294", "nl": "a paper clip is often made of magnetic metals.", "fol": "", "prediction": ["all x.(PaperClip(x) -> MadeOfMagneticMetals(x))"]}
{"id": "entailmentbank_train_5295", "nl": "a magnet can attract a paper clip.", "fol": "", "prediction": ["all x y.((Magnet(x) & PaperClip(y)) -> Attracts(x,y))"]}
{"id": "entailmentbank_train_5296", "nl": "an unknown object can attract a paper clip.", "fol": "", "prediction": ["all x.((UnknownObject(x) & AttractsPaperClip(x)) -> CanAttract(x,paperclip))"]}
{"id": "entailmentbank_train_5297", "nl": "the unknown object has the same property as a magnet.", "fol": "", "prediction": ["all x.(UnknownObject(x) -> SamePropertyAsMagnet(x))"]}
{"id": "entailmentbank_train_5298", "nl": "a magnet is magnetc.", "fol": "", "prediction": ["all x.(Magnet(x) -> Magnetc(x))"]}
{"id": "entailmentbank_train_5299", "nl": "the unknown object is magnetic.", "fol": "", "prediction": ["all x.(UnknownObject(x) -> Magnetic(x))"]}
{"id": "entailmentbank_train_5300", "nl": "a magnet attracts magnetic metals through magnetism.", "fol": "", "prediction": ["all x.(Magnet(x) -> AttractsMagneticMetalsThroughMagnetism(x))"]}
{"id": "entailmentbank_train_5301", "nl": "a magnet will attract iron.", "fol": "", "prediction": ["all x.(Magnet(x) -> AttractsIron(x))"]}
{"id": "entailmentbank_train_5302", "nl": "a magnet will not attract nonmagnetic materials.", "fol": "", "prediction": ["all x.(Magnet(x) -> -AttractsNonMagneticMaterials(x))"]}
{"id": "entailmentbank_train_5303", "nl": "a magnet will not attract sand.", "fol": "", "prediction": ["all x.(Magnet(x) -> -AttractsSand(x))"]}
{"id": "entailmentbank_train_5304", "nl": "the mixture is made of an unknown particles and sand.", "fol": "", "prediction": ["all x.(Mixture(x) -> (UnknownParticles(x) & Sand(x)))"]}
{"id": "entailmentbank_train_5305", "nl": "iron is likely the element attracted by the magnet.", "fol": "", "prediction": ["all x.(Iron(x) -> AttractedByMagnet(x))"]}
{"id": "entailmentbank_train_5306", "nl": "the mixture is made of iron nails and aluminum nails.", "fol": "", "prediction": ["all x.(Mixture(x) -> (MadeOf(x,ironNails) & MadeOf(x,aluminumNails)))"]}
{"id": "entailmentbank_train_5307", "nl": "a magnet will attract the iron nails in the mixture.", "fol": "", "prediction": ["all x y.((Magnet(x) & IronNail(y)) -> AttractsInMixture(x,y))"]}
{"id": "entailmentbank_train_5308", "nl": "a magnet will not attract nonmagnetic metals.", "fol": "", "prediction": ["all x.(Magnet(x) -> -AttractsNonMagneticMetals(x))"]}
{"id": "entailmentbank_train_5309", "nl": "a magnet will not attract aluminum.", "fol": "", "prediction": ["all x.(Magnet(x) -> -AttractsAluminum(x))"]}
{"id": "entailmentbank_train_5310", "nl": "a magnet will not attract the aluminum nails in the mixture.", "fol": "", "prediction": ["all x.(Magnet(x) -> -AttractsAluminumNails(x))"]}
{"id": "entailmentbank_train_5311", "nl": "a magnet can separate the mixutre of iron nails and aluminum nails.", "fol": "", "prediction": ["all x.(Magnet(x) -> SeparatesMixutre(x,ironNails,aluminumNails))"]}
{"id": "entailmentbank_train_5312", "nl": "a sugar cube is made of sugar.", "fol": "", "prediction": ["all x.(SugarCube(x) -> MadeOfSugar(x))"]}
{"id": "entailmentbank_train_5313", "nl": "sugar cubes will dissolve in water when they are combined.", "fol": "", "prediction": ["all x.((SugarCube(x) & Combine(x)) -> DissolvesInWater(x))"]}
{"id": "entailmentbank_train_5314", "nl": "a solution is made of one substance dissolved in another substance.", "fol": "", "prediction": ["all x y.((Solution(x) & Substance(y) & DissolvedIn(x,y)) -> MadeOf(x,y))"]}
{"id": "entailmentbank_train_5315", "nl": "sugar causes food to taste sweet.", "fol": "", "prediction": ["all x.(Sugar(x) -> CausesFoodToTasteSweet(x))"]}
{"id": "entailmentbank_train_5316", "nl": "tea tastes bitter.", "fol": "", "prediction": ["all x.(Tea(x) -> TastesBitter(x))"]}
{"id": "entailmentbank_train_5317", "nl": "sugar can cause tea to taste sweet.", "fol": "", "prediction": ["all x.(Sugar(x) -> CanCauseTeaToTasteSweet(x))"]}
{"id": "entailmentbank_train_5318", "nl": "taste can be used to distinguish food.", "fol": "", "prediction": ["all x.(Taste(x) -> DistinctsFood(x))"]}
{"id": "entailmentbank_train_5319", "nl": "if the tea tastes sweet, then there is sugar in the tea.", "fol": "", "prediction": ["all x.((Tea(x) & TastesSweet(x)) -> SugarInTea(x))"]}
{"id": "entailmentbank_train_5320", "nl": "a thermal insulator slows the transfer of heat.", "fol": "", "prediction": ["all x.(ThermalInsulator(x) -> SlowsTransferOfHeat(x))"]}
{"id": "entailmentbank_train_5321", "nl": "wood is an thermal insulator.", "fol": "", "prediction": ["all x.(Wood(x) -> ThermalInsulator(x))"]}
{"id": "entailmentbank_train_5322", "nl": "wood can slow the transfer of heat.", "fol": "", "prediction": ["all x.(Wood(x) -> SlowsTransferOfHeat(x))"]}
{"id": "entailmentbank_train_5323", "nl": "the spoon is used to stir soup.", "fol": "", "prediction": ["all x.(Spoon(x) -> StirSoup(x))"]}
{"id": "entailmentbank_train_5324", "nl": "the spoon is touching the soup.", "fol": "", "prediction": ["all x.(Spoon(x) -> TouchingSoup(x))"]}
{"id": "entailmentbank_train_5325", "nl": "the soup is cooking on the stove.", "fol": "", "prediction": ["all x.(Soup(x) -> CookingOnStove(x))"]}
{"id": "entailmentbank_train_5326", "nl": "heat energy is added to the soup.", "fol": "", "prediction": ["all x.((Soup(x) & HeatEnergy(x)) -> AddedTo(x,Soup))"]}
{"id": "entailmentbank_train_5327", "nl": "heat energy is transferring from the soup to the spoon.", "fol": "", "prediction": ["all x y.((Soup(x) & Spoon(y)) -> TransfersHeatEnergy(x,y))"]}
{"id": "entailmentbank_train_5328", "nl": "the spoon in the example is made of wood.", "fol": "", "prediction": ["all x.(Spoon(x) -> MadeOfWood(x))"]}
{"id": "entailmentbank_train_5329", "nl": "heat energy is transferring from the soup to wood.", "fol": "", "prediction": ["all x y.((Soup(x) & Wood(y)) -> TransfersHeatEnergy(x,y))"]}
{"id": "entailmentbank_train_5330", "nl": "wood can slow the transferring of the heat.", "fol": "", "prediction": ["all x.(Wood(x) -> SlowsTransferOfHeat(x))"]}
{"id": "entailmentbank_train_5331", "nl": "the transferring of heat energy from soup to wood is slowed down.", "fol": "", "prediction": ["all x y.((Soup(x) & Wood(y)) -> SlowedDownTransfer(x,y))"]}
{"id": "entailmentbank_train_5332", "nl": "transferring of heat causes the object to increase in temperature.", "fol": "", "prediction": ["all x.(TransferringHeat(x) -> IncreasesTemperature(x))"]}
{"id": "entailmentbank_train_5333", "nl": "the wood will increase temperature the slowest.", "fol": "", "prediction": ["all x.((Wood(x) & Slowest(x)) -> IncreasesTemperature(x))"]}
{"id": "entailmentbank_train_5334", "nl": "insulated material can be used for keeping warm.", "fol": "", "prediction": ["all x.((InsulatedMaterial(x) & KeepsWarm(x)) -> CanBeUsedFor(x))"]}
{"id": "entailmentbank_train_5335", "nl": "sleeping bags are designed to keep people warm.", "fol": "", "prediction": ["all x.(SleepingBag(x) -> KeepsPeopleWarm(x))"]}
{"id": "entailmentbank_train_5336", "nl": "sleeping bags usually are made of insulated materials.", "fol": "", "prediction": ["all x.(SleepingBag(x) -> MadeOfInsulatedMaterials(x))"]}
{"id": "entailmentbank_train_5337", "nl": "down feathers are a thermal insulator.", "fol": "", "prediction": ["all x.(DownFeather(x) -> ThermalInsulator(x))"]}
{"id": "entailmentbank_train_5338", "nl": "down feathers can be used to make sleeping bags.", "fol": "", "prediction": ["all x.(DownFeathers(x) -> CanBeUsedToMakeSleepingBags(x))"]}
{"id": "entailmentbank_train_5339", "nl": "cookware is used for cooking.", "fol": "", "prediction": ["all x.(Cookware(x) -> UsedForCooking(x))"]}
{"id": "entailmentbank_train_5340", "nl": "cooking food requires adding heat energy to the food through cookware.", "fol": "", "prediction": ["all x y.((CookingFood(x) & Cookware(y)) -> AddsHeatEnergy(x,y))"]}
{"id": "entailmentbank_train_5341", "nl": "cooking food requires cookware to be able to transfer heat.", "fol": "", "prediction": ["all x.(CookingFood(x) -> RequiresCookwareToTransferHeat(x))"]}
{"id": "entailmentbank_train_5342", "nl": "a thermal energy conductor transfers heat.", "fol": "", "prediction": ["all x.(ThermalEnergyConductor(x) -> TransfersHeat(x))"]}
{"id": "entailmentbank_train_5343", "nl": "cooking requires the cookware to be a thermal conductor.", "fol": "", "prediction": ["all x.(Cooking(x) -> ThermalConductor(x))"]}
{"id": "entailmentbank_train_5344", "nl": "taste is a property of an object.", "fol": "", "prediction": ["all x.(Taste(x) -> PropertyOfObject(x))"]}
{"id": "entailmentbank_train_5345", "nl": "hardness is a property of a an object.", "fol": "", "prediction": ["all x.(Hardness(x) -> PropertyOfObject(x))"]}
{"id": "entailmentbank_train_5346", "nl": "texture is a property of objects.", "fol": "", "prediction": ["all x.(Texture(x) -> PropertyOfObjects(x))"]}
{"id": "entailmentbank_train_5347", "nl": "hardness, taste, and texture are properties of an object.", "fol": "", "prediction": ["all x.((Object(x) & Hardness(x) & Taste(x) & Texture(x)) -> PropertiesOf(x,y))"]}
{"id": "entailmentbank_train_5348", "nl": "shape is a property of an object.", "fol": "", "prediction": ["all x.(Shape(x) -> PropertyOfObject(x))"]}
{"id": "entailmentbank_train_5349", "nl": "shape is a property of a leaf.", "fol": "", "prediction": ["all x.(Shape(x) -> LeafProperty(x))"]}
{"id": "entailmentbank_train_5350", "nl": "students group leaves by shape.", "fol": "", "prediction": ["all x y.((Student(x) & Leaf(y)) -> GroupsByShape(x,y))"]}
{"id": "entailmentbank_train_5351", "nl": "students are grouping leaves by their properties.", "fol": "", "prediction": ["all x y.((Student(x) & Leave(y)) -> GroupsByProperties(x,y))"]}
{"id": "entailmentbank_train_5352", "nl": "classifying means grouping objects by their properties.", "fol": "", "prediction": ["all x y.((ClassifyingMeans(x) & Object(y)) -> GroupsByProperties(x,y))"]}
{"id": "entailmentbank_train_5353", "nl": "students are classifying the leaves by their properties.", "fol": "", "prediction": ["all x y.((Student(x) & Leave(y)) -> ClassifiesByProperties(x,y))"]}
{"id": "entailmentbank_train_5354", "nl": "an object has a small volume and large mass.", "fol": "", "prediction": ["all x.(Object(x) -> (SmallVolume(x) & LargeMass(x)))"]}
{"id": "entailmentbank_train_5355", "nl": "that object will likely have a high density.", "fol": "", "prediction": ["all x.((Object(x) & HighDensity(x)) -> LikelyHas(x,y))"]}
{"id": "entailmentbank_train_5356", "nl": "the rock has the greatest mass among four collected rocks.", "fol": "", "prediction": ["all x.(Rock(x) -> GreatestMassAmongCollectedRocks(x))"]}
{"id": "entailmentbank_train_5357", "nl": "as the mass of an object increases, the weight of that object will increase.", "fol": "", "prediction": ["all x y.((Object(x) & Mass(y) & Increases(x,y)) -> WeightIncreases(x,y))"]}
{"id": "entailmentbank_train_5358", "nl": "the rock has the greatest mass has the greatest weight.", "fol": "", "prediction": ["all x.(Rock(x) -> (HasGreatestMass(x) & HasGreatestWeight(x)))"]}
{"id": "entailmentbank_train_5359", "nl": "heaviest means greatest mass / weight.", "fol": "", "prediction": ["all x.(Heaviest(x) -> (GreatestMass(x) & GreatestWeight(x)))"]}
{"id": "entailmentbank_train_5360", "nl": "the rock with greatest weight feels the heaviest.", "fol": "", "prediction": ["all x.((Rock(x) & GreatestWeight(x)) -> FeelsHeaviest(x))"]}
{"id": "entailmentbank_train_5361", "nl": "mass is a measure of the amount of matter in an object.", "fol": "", "prediction": ["all x.(Mass(x) -> MeasuresAmountOfMatter(x))"]}
{"id": "entailmentbank_train_5362", "nl": "all objects have mass.", "fol": "", "prediction": ["all x.(Object(x) -> HasMass(x))"]}
{"id": "entailmentbank_train_5363", "nl": "gold melts.", "fol": "", "prediction": ["all x.(GoldMelts(x) -> Gold(x))"]}
{"id": "entailmentbank_train_5364", "nl": "gold changes from solid state to liquid state.", "fol": "", "prediction": ["all x.(Gold(x) -> (SolidState(x) | LiquidState(x)))"]}
{"id": "entailmentbank_train_5365", "nl": "as state of matter changes, mass will not change.", "fol": "", "prediction": ["all x.((StateOfMatter(x) & Changes(x)) -> Mass(x))"]}
{"id": "entailmentbank_train_5366", "nl": "the mass of gold will not change.", "fol": "", "prediction": ["all x.(GoldMass(x) -> -Change(x))"]}
{"id": "entailmentbank_train_5367", "nl": "sandstone is a kind of sedimentary rock.", "fol": "", "prediction": ["all x.(Sandstone(x) -> SedimentaryRock(x))"]}
{"id": "entailmentbank_train_5368", "nl": "a quartzite is a kind of metamorphic rock.", "fol": "", "prediction": ["all x.(Quarzonia(x) -> MetamorphicRock(x))"]}
{"id": "entailmentbank_train_5369", "nl": "the rock changes class from sedimentary rock to metamorphic rock.", "fol": "", "prediction": ["all x.(Rock(x) -> (ClassChange(x,SedimentaryRock) & ClassChange(x,MetamorphicRock)))"]}
{"id": "entailmentbank_train_5370", "nl": "as the class of a rock changes, the mass of the rock will stay the same.", "fol": "", "prediction": ["all x y.((Rock(x) & ClassChange(x) & Rock(y)) -> MassSame(x,y))"]}
{"id": "entailmentbank_train_5371", "nl": "the mass of the rock will remain the same.", "fol": "", "prediction": ["all x.(Rock(x) -> MassSame(x))"]}
{"id": "entailmentbank_train_5372", "nl": "definite shape means the shape of an object stays the same when moved to different spot.", "fol": "", "prediction": ["all x y.((DefiniteShape(x) & Object(y) & MovedToDifferentSpot(y)) -> StaysSame(y))"]}
{"id": "entailmentbank_train_5373", "nl": "solid object will have the same shape when moved to a different spot.", "fol": "", "prediction": ["all x.((SolidObject(x) & MovedToDifferentSpot(x)) -> SameShape(x))"]}
{"id": "entailmentbank_train_5374", "nl": "an eraser is a kind of solid.", "fol": "", "prediction": ["all x.(Eraser(x) -> Solid(x))"]}
{"id": "entailmentbank_train_5375", "nl": "an eraser will have the same shape when moved to a different spot.", "fol": "", "prediction": ["all x.((Eraser(x) & MovedToDifferentSpot(x)) -> SameShape(x))"]}
{"id": "entailmentbank_train_5376", "nl": "ripping means tearing.", "fol": "", "prediction": ["all x.(Ripping(x) -> Tears(x))"]}
{"id": "entailmentbank_train_5377", "nl": "tearing means changing a whole into pieces.", "fol": "", "prediction": ["all x y.((Torn(x) & Whole(y)) -> ChangesIntoPieces(x,y))"]}
{"id": "entailmentbank_train_5378", "nl": "a paper bag is ripped into pieces.", "fol": "", "prediction": ["all x.(PaperBag(x) -> RiptIntoPieces(x))"]}
{"id": "entailmentbank_train_5379", "nl": "the paper bag has changed from a whole into pieces of paper.", "fol": "", "prediction": ["all x.(PaperBag(x) -> ChangedFromWholeIntoPiecesOfPaper(x))"]}
{"id": "entailmentbank_train_5380", "nl": "a piece of an object is smaller in size than the entire object / whole object.", "fol": "", "prediction": ["all x y.((PieceOfObject(x) & WholeObject(y)) -> SmallerSize(x,y))"]}
{"id": "entailmentbank_train_5381", "nl": "pieces of the paper bag are smaller than the whole bag.", "fol": "", "prediction": ["all x.(PaperBag(x) -> SmallerThanWholeBag(x))"]}
{"id": "entailmentbank_train_5382", "nl": "hair is thin.", "fol": "", "prediction": ["all x.(Hair(x) -> Thin(x))"]}
{"id": "entailmentbank_train_5383", "nl": "seeing small things with bare eye is difficult.", "fol": "", "prediction": ["all x.((SmallThing(x) & BareEye(x)) -> DifficultToSee(x))"]}
{"id": "entailmentbank_train_5384", "nl": "seeing a hair with bare eye is difficult.", "fol": "", "prediction": ["all x.((Hair(x) & BareEye(x)) -> DifficultToSee(x))"]}
{"id": "entailmentbank_train_5385", "nl": "texture of an object can sometimes be told by looking at the object.", "fol": "", "prediction": ["all x y.((Object(x) & Texture(y)) -> CanBeToldByLookingAt(x,y))"]}
{"id": "entailmentbank_train_5386", "nl": "seeing the texture of a hair with bare eye is difficult.", "fol": "", "prediction": ["all x.((Hair(x) & BareEye(x)) -> DifficultToSee(x))"]}
{"id": "entailmentbank_train_5387", "nl": "magnifying makes seeing small things easier.", "fol": "", "prediction": ["all x.(Magnifying(x) -> MakesSavingSmallThingsEasier(x))"]}
{"id": "entailmentbank_train_5388", "nl": "magnifying can help study the texture of a hair.", "fol": "", "prediction": ["all x y.((Magnifying(x) & Hair(y)) -> CanStudyTexture(x,y))"]}
{"id": "entailmentbank_train_5389", "nl": "a wooden block is pushed across a sheet of sandpaper.", "fol": "", "prediction": ["all x y.((WoodenBlock(x) & Sandpaper(y)) -> PushedAcross(x,y))"]}
{"id": "entailmentbank_train_5390", "nl": "an object being pushed across another object causes their surfaces to move against each other.", "fol": "", "prediction": ["all x y.((Object(x) & Object(y) & PushedAcross(x,y)) -> SurfaceMovement(x,y))"]}
{"id": "entailmentbank_train_5391", "nl": "the surfaces of a wooden block and sandpaper are moving against each other.", "fol": "", "prediction": ["all x y.((WoodenBlock(x) & Sandpaper(y)) -> MovingAgainst(x,y))"]}
{"id": "entailmentbank_train_5392", "nl": "friction occurs when the wooden block is moving against the sandpaper.", "fol": "", "prediction": ["all x y.((WoodenBlock(x) & Sandpaper(y)) -> MovesAgainst(x,y))"]}
{"id": "entailmentbank_train_5393", "nl": "friction will cause the temperature of the wooden block to increase.", "fol": "", "prediction": ["all x.(Friction(x) -> IncreasesTemperatureOfWoodenBlock(x))"]}
{"id": "entailmentbank_train_5394", "nl": "smooth is a kind of texture.", "fol": "", "prediction": ["all x.(Smooth(x) -> Texture(x))"]}
{"id": "entailmentbank_train_5395", "nl": "texture is a property of objects and includes ordered values of smooth or rough.", "fol": "", "prediction": ["all x.(Texture(x) -> (PropertyOfObjects(x) & (OrdersSmoothValues(x) | OrdersRoughValues(x))))"]}
{"id": "entailmentbank_train_5396", "nl": "smooth can be used to describe the texture of an object.", "fol": "", "prediction": ["all x y.((Smooth(x) & Object(y)) -> DescriptionOfTexture(x,y))"]}
{"id": "entailmentbank_train_5397", "nl": "matter in the solid phase has definite volume.", "fol": "", "prediction": ["all x.((Matter(x) & SolidPhase(x)) -> DefiniteVolume(x))"]}
{"id": "entailmentbank_train_5398", "nl": "one sample is a solid sample of aluminum.", "fol": "", "prediction": ["all x.(Sample(x) -> SolidSampleOfAluminum(x))"]}
{"id": "entailmentbank_train_5399", "nl": "the solid aluminum has definite volume.", "fol": "", "prediction": ["all x.(SolidAluminum(x) -> HasDefiniteVolume(x))"]}
{"id": "entailmentbank_train_5400", "nl": "one sample is a liquid sample of aluminum.", "fol": "", "prediction": ["all x.(Sample(x) -> LiquidSampleOfAluminum(x))"]}
{"id": "entailmentbank_train_5401", "nl": "matter in the liquid phase has definite volume.", "fol": "", "prediction": ["all x.((Matter(x) & LiquidPhase(x)) -> DefiniteVolume(x))"]}
{"id": "entailmentbank_train_5402", "nl": "the liquid aluminum has definite volume.", "fol": "", "prediction": ["all x.(LiquidAluminum(x) -> HasDefinedVolume(x))"]}
{"id": "entailmentbank_train_5403", "nl": "both samples have definite volume.", "fol": "", "prediction": ["all x.(Sample(x) -> DefiniteVolume(x))"]}
{"id": "entailmentbank_train_5404", "nl": "the oceans are located on earth.", "fol": "", "prediction": ["all x.(Ocean(x) -> LocatedOnEarth(x))"]}
{"id": "entailmentbank_train_5405", "nl": "the oceans contain liquid water.", "fol": "", "prediction": ["all x.(Ocean(x) -> ContainsLiquidWater(x))"]}
{"id": "entailmentbank_train_5406", "nl": "liquid water is located on earth.", "fol": "", "prediction": ["all x.(LiquidWater(x) -> LocatedOnEarth(x))"]}
{"id": "entailmentbank_train_5407", "nl": "water is in the liquid state, called liquid water, for temperatures between 273 / 32 / 0 and 373 / 212 / 100 k / f / c.", "fol": "", "prediction": ["all x.((Water(x) & LiquidState(x)) -> (Temperature(x,273) & Temperature(x,32) & Temperature(x,373) & Temperature(x,212) & Temperature(x,100)))"]}
{"id": "entailmentbank_train_5408", "nl": "water in the liquid state is located on earth.", "fol": "", "prediction": ["all x.((Water(x) & LiquidState(x)) -> LocatedOnEarth(x))"]}
{"id": "entailmentbank_train_5409", "nl": "arctic environments are located on earth.", "fol": "", "prediction": ["all x.(ArcticEnvironment(x) -> LocatedOnEarth(x))"]}
{"id": "entailmentbank_train_5410", "nl": "arctic environments contain ice.", "fol": "", "prediction": ["all x.(ArcticEnvironment(x) -> ContainsIce(x))"]}
{"id": "entailmentbank_train_5411", "nl": "ice is located on earth.", "fol": "", "prediction": ["all x.(Ice(x) -> LocatedOnEarth(x))"]}
{"id": "entailmentbank_train_5412", "nl": "water in the solid state is located on earth.", "fol": "", "prediction": ["all x.((Water(x) & SolidState(x)) -> LocatedOnEarth(x))"]}
{"id": "entailmentbank_train_5413", "nl": "earth's atmosphere is located on earth.", "fol": "", "prediction": ["all x.(Earth(x) -> AtmosphereLocatedOn(x,Earth))"]}
{"id": "entailmentbank_train_5414", "nl": "earth's atmosphere contains water vapor.", "fol": "", "prediction": ["all x.(EarthsAtmosphere(x) -> ContainsWaterVapor(x))"]}
{"id": "entailmentbank_train_5415", "nl": "water vapor is located on earth.", "fol": "", "prediction": ["all x.(WaterVapor(x) -> LocatedOnEarth(x))"]}
{"id": "entailmentbank_train_5416", "nl": "water is in the gas state, called water vapor / steam, for temperatures between 373 / 212 / 100 and 100000000000 k / f / c.", "fol": "", "prediction": ["all x.((Water(x) & WaterVapor(x) & WaterSteam(x)) -> (Temperature(x,373) & Temperature(x,212) & Temperature(x,100) & Temperature(x,100000000000)))"]}
{"id": "entailmentbank_train_5417", "nl": "water in the gas state is located on earth.", "fol": "", "prediction": ["all x.((Water(x) & GasState(x)) -> LocatedOnEarth(x))"]}
{"id": "entailmentbank_train_5418", "nl": "water in the liquid, solid, and gas state is located on earth.", "fol": "", "prediction": ["all x.((Water(x) & Liquid(x) & Solid(x) & Gas(x)) -> LocatedOnEarth(x))"]}
{"id": "entailmentbank_train_5419", "nl": "matter in gas phase takes the shape of the entire container.", "fol": "", "prediction": ["all x y.((Matter(x) & GasPhase(y)) -> TakesShapeOfContainer(x,y))"]}
{"id": "entailmentbank_train_5420", "nl": "the item takes the shape of the entire container.", "fol": "", "prediction": ["all x.(Item(x) -> TakesShapeOfEntireContainer(x))"]}
{"id": "entailmentbank_train_5421", "nl": "the item is a kind of matter in the gas phase.", "fol": "", "prediction": ["all x.(Item(x) -> GasPhaseMatter(x))"]}
{"id": "entailmentbank_train_5422", "nl": "the item is most likely air.", "fol": "", "prediction": ["all x.(Air(x) -> MostLikely(x))"]}
{"id": "entailmentbank_train_5423", "nl": "matter in the gas phase has variable volume.", "fol": "", "prediction": ["all x.((Matter(x) & GasPhase(x)) -> VariableVolume(x))"]}
{"id": "entailmentbank_train_5424", "nl": "matter in gas phase has variable volume and shape.", "fol": "", "prediction": ["all x.((Matter(x) & GasPhase(x)) -> (VariableVolume(x) & VariableShape(x)))"]}
{"id": "entailmentbank_train_5425", "nl": "matter with variable volume and shape expands to fill the shape and size of its entire container.", "fol": "", "prediction": ["all x.((Matter(x) & VariableVolume(x) & VariableShape(x)) -> FillsShapeAndSizeOfContainer(x))"]}
{"id": "entailmentbank_train_5426", "nl": "gas will expand to fill the shape of the container.", "fol": "", "prediction": ["all x y.((Gas(x) & Container(y)) -> ExpandsToFillShape(x,y))"]}
{"id": "entailmentbank_train_5427", "nl": "air will expand to fill the shape of the container.", "fol": "", "prediction": ["all x y.((Air(x) & Container(y)) -> ExpandsToFillShape(x,y))"]}
{"id": "entailmentbank_train_5428", "nl": "if something has a definite volume, then its volume will not change when transferred into a different container.", "fol": "", "prediction": ["all x.((DefiniteVolume(x) & TransferredIntoDifferentContainer(x)) -> -VolumeChange(x))"]}
{"id": "entailmentbank_train_5429", "nl": "liquid sample will retain its volume when transferredn to a different container.", "fol": "", "prediction": ["all x y.((LiquidSample(x) & Container(y)) -> RetainsVolume(x,y))"]}
{"id": "entailmentbank_train_5430", "nl": "particles in a liquid flows past each other.", "fol": "", "prediction": ["all x y.((Liquid(x) & Particle(y)) -> FlowsPast(x,y))"]}
{"id": "entailmentbank_train_5431", "nl": "particles in a liquid are close to each other.", "fol": "", "prediction": ["all x y.((Liquid(x) & Particle(y)) -> CloseTo(y,x))"]}
{"id": "entailmentbank_train_5432", "nl": "particles in a liquid are close and can flow past each other.", "fol": "", "prediction": ["all x y.((Liquid(x) & Particle(y)) -> (Close(y) & CanFlowPast(y)))"]}
{"id": "entailmentbank_train_5433", "nl": "the particles in the substance are close and able to flow past each other.", "fol": "", "prediction": ["all x.((Substance(x) & Close(x) & FlowPast(x)) -> Close(x))"]}
{"id": "entailmentbank_train_5434", "nl": "the substance could be in liquid phase.", "fol": "", "prediction": ["all x.(Substance(x) -> LiquidPhase(x))"]}
{"id": "entailmentbank_train_5435", "nl": "matter in the liquid phase has variable shape.", "fol": "", "prediction": ["all x.((Matter(x) & LiquidPhase(x)) -> VariableShape(x))"]}
{"id": "entailmentbank_train_5436", "nl": "the substance has a variable shape.", "fol": "", "prediction": ["all x.(Substance(x) -> VariableShape(x))"]}
{"id": "entailmentbank_train_5437", "nl": "the substance could be in liquid phase or gas phase.", "fol": "", "prediction": ["all x.(Substance(x) -> (LiquidPhase(x) | GasPhase(x)))"]}
{"id": "entailmentbank_train_5438", "nl": "the substance can only be in liquid phase.", "fol": "", "prediction": ["all x.(Substance(x) -> CanBeInLiquidPhase(x))"]}
{"id": "entailmentbank_train_5439", "nl": "aluminum is usually solid at room temperature.", "fol": "", "prediction": ["all x.(Aluminum(x) -> SolidAtRoomTemperature(x))"]}
{"id": "entailmentbank_train_5440", "nl": "ice, a rock, and a piece of aluminum are all solids.", "fol": "", "prediction": ["all x.((Ice(x) | Rock(x) | Aluminum(x)) -> Solid(x))"]}
{"id": "entailmentbank_train_5441", "nl": "reading requires seeing.", "fol": "", "prediction": ["all x.(Reading(x) -> RequiresSeeing(x))"]}
{"id": "entailmentbank_train_5442", "nl": "reading requires light.", "fol": "", "prediction": ["all x.(Reading(x) -> RequiresLight(x))"]}
{"id": "entailmentbank_train_5443", "nl": "a light bulb generates visible light when it is turned on.", "fol": "", "prediction": ["all x.((LightBulb(x) & TurnedOn(x)) -> GeneratesVisibleLight(x))"]}
{"id": "entailmentbank_train_5444", "nl": "a light bulb can help generate light for reading.", "fol": "", "prediction": ["all x.(LightBulb(x) -> GeneratesLightForReading(x))"]}
{"id": "entailmentbank_train_5445", "nl": "trees are a source of paper.", "fol": "", "prediction": ["all x.(Tree(x) -> SourceOfPaper(x))"]}
{"id": "entailmentbank_train_5446", "nl": "plant is a source of paper.", "fol": "", "prediction": ["all x.(Plant(x) -> SourceOfPaper(x))"]}
{"id": "entailmentbank_train_5447", "nl": "plants are a source of fibers.", "fol": "", "prediction": ["all x.(Plant(x) -> SourceOfFibers(x))"]}
{"id": "entailmentbank_train_5448", "nl": "plants are a source of spices.", "fol": "", "prediction": ["all x.(Plant(x) -> SourceOfSpices(x))"]}
{"id": "entailmentbank_train_5449", "nl": "paper, spices, and fibers are products of plants.", "fol": "", "prediction": ["all x.((Paper(x) | Spices(x) | Fibers(x)) -> PlantProduct(x))"]}
{"id": "entailmentbank_train_5450", "nl": "a ship is used for moving products across bodies of water.", "fol": "", "prediction": ["all x y.((Ship(x) & Product(y)) -> UsedForMovingAcrossBodyOfWater(x,y))"]}
{"id": "entailmentbank_train_5451", "nl": "a airplane is used for moving products across bodies of water.", "fol": "", "prediction": ["all x.(Airplane(x) -> UsedForMovingProductsAcrossBodyOfWater(x))"]}
{"id": "entailmentbank_train_5452", "nl": "ship or airplane can move products across bodies of water.", "fol": "", "prediction": ["all x.((Ship(x) | Airplane(x)) -> MovesProductsAcrossBodyOfWater(x))"]}
{"id": "entailmentbank_train_5453", "nl": "ship or airplane can move products across ocean.", "fol": "", "prediction": ["all x.((Ship(x) | Airplane(x)) -> MovesAcrossOcean(x))"]}
{"id": "entailmentbank_train_5454", "nl": "a simple machine requires mechanical energy to function.", "fol": "", "prediction": ["all x.((Machine(x) & Simple(x)) -> RequiresMechanicalEnergy(x))"]}
{"id": "entailmentbank_train_5455", "nl": "a relationship occurs when two or more things interact with one another.", "fol": "", "prediction": ["all x y.((Relationship(x) & Interaction(y) & Interacts(x,y)) -> Interacts(x,y))"]}
{"id": "entailmentbank_train_5456", "nl": "a relationship exists between simple machines and energy.", "fol": "", "prediction": ["exists x.(Relationship(x) & SimpleMachines(x) & Energy(x))"]}
{"id": "entailmentbank_train_5457", "nl": "a physicist studies energy.", "fol": "", "prediction": ["all x.(Physicist(x) -> StudiesEnergy(x))"]}
{"id": "entailmentbank_train_5458", "nl": "a physicist studies energy and its relationship to simple machines.", "fol": "", "prediction": ["all x.(Physicist(x) -> (StudiesEnergy(x) & StudiesRelationshipToSimpleMachines(x)))"]}
{"id": "entailmentbank_train_5459", "nl": "a physicist is a kind of scientist.", "fol": "", "prediction": ["all x.(Physicist(x) -> Scientist(x))"]}
{"id": "entailmentbank_train_5460", "nl": "a physicist is the scietist who study the relationship between simple machines and energy.", "fol": "", "prediction": ["all x.(Physicist(x) -> (Scietist(x) & StudiesRelationship(x,simpleMachines,Energy)))"]}
{"id": "entailmentbank_train_5461", "nl": "companies irradiate some fruits and vegetables.", "fol": "", "prediction": ["exists x.(Company(x) & Irradiates(x,fruits) & Irradiates(x,vegetables))"]}
{"id": "entailmentbank_train_5462", "nl": "irradiating food can be used to kill existing microorganisms in the food.", "fol": "", "prediction": ["all x y.((IrradiatingFood(x) & Microorganism(y)) -> Kills(x,y))"]}
{"id": "entailmentbank_train_5463", "nl": "companies irradiate some fruits and vegetables to kill existing microorganisms in the food.", "fol": "", "prediction": ["all x y.((Company(x) & Fruit(y) & Vegetable(y)) -> IrradiatesToKillMicroorganisms(x,y))"]}
{"id": "entailmentbank_train_5464", "nl": "killing microorganisms in food can be used to extend the shelf life of that food.", "fol": "", "prediction": ["all x y.((KillingMicroorganisms(x) & Food(y)) -> ExtendedShelfLife(x,y))"]}
{"id": "entailmentbank_train_5465", "nl": "companies irradiate some fruit and vegetables to extend the shelf life of that food.", "fol": "", "prediction": ["all x y.((Company(x) & Fruit(y) & Vegetable(y)) -> IrradiatesToExtendShelfLife(x,y))"]}
{"id": "entailmentbank_train_5466", "nl": "a mass production manufacturing system makes products more cheaply than a custom manufacturing system.", "fol": "", "prediction": ["all x y.((MassProductionManufacturingSystem(x) & CustomManufacturingSystem(y)) -> MakesProductsMoreCostly(x,y))"]}
{"id": "entailmentbank_train_5467", "nl": "making products for cheaper has a positive impact on manufacturing.", "fol": "", "prediction": ["all x.((Product(x) & Cheaper(x)) -> PositiveImpactOnManufacturing(x))"]}
{"id": "entailmentbank_train_5468", "nl": "a mass production has a positve impact on manufacturing by making products for cheaper.", "fol": "", "prediction": ["all x.(MassProduction(x) -> (PotentialImpact(x) & MakesProductsFaster(x)))"]}
{"id": "entailmentbank_train_5469", "nl": "cheap means low in cost.", "fol": "", "prediction": ["all x.((LowCost(x) & Cheap(x)) -> LowCost(x))"]}
{"id": "entailmentbank_train_5470", "nl": "a mass production has  a positive impact on manufacturing by making products at a low cost.", "fol": "", "prediction": ["all x.(MassProduction(x) -> (PositiveImpactOnManufacturing(x) & MakesProductsAtLowCost(x)))"]}
{"id": "entailmentbank_train_5471", "nl": "a airplane is used for moving people / products across bodies of water / to far away places.", "fol": "", "prediction": ["all x.(Airplane(x) -> (MovesPeople(x) & MovesProducts(x) & BetweenBodyOfWater(x) & ToFarAwayPlaces(x)))"]}
{"id": "entailmentbank_train_5472", "nl": "an airplane is fast in speed.", "fol": "", "prediction": ["all x.(Airplane(x) -> FastSpeed(x))"]}
{"id": "entailmentbank_train_5473", "nl": "an airplane moves people fast.", "fol": "", "prediction": ["all x.(Airplane(x) -> MovesPeopleFast(x))"]}
{"id": "entailmentbank_train_5474", "nl": "moving fast is similar to travelling quickly.", "fol": "", "prediction": ["all x.(MovingFast(x) -> SimilarToTravelingQuickly(x))"]}
{"id": "entailmentbank_train_5475", "nl": "an airplane can help people travel quickly.", "fol": "", "prediction": ["all x.(Airplane(x) -> HelpsPeopleTravelQuickly(x))"]}
{"id": "entailmentbank_train_5476", "nl": "a radio is used for communication.", "fol": "", "prediction": ["all x.(Radio(x) -> UsedForCommunication(x))"]}
{"id": "entailmentbank_train_5477", "nl": "something that is used for communication increases communication.", "fol": "", "prediction": ["all x.((UsedForCommunication(x) & IncreasesCommunication(x)) -> IncreasesCommunication(x))"]}
{"id": "entailmentbank_train_5478", "nl": "a computer and a radio increase communication.", "fol": "", "prediction": ["all x y.((Computer(x) & Radio(y)) -> IncreasesCommunication(x,y))"]}
{"id": "entailmentbank_train_5479", "nl": "communication is used to share information.", "fol": "", "prediction": ["all x.(Communication(x) -> ShareInformation(x))"]}
{"id": "entailmentbank_train_5480", "nl": "radios and computers increase the sharing of information.", "fol": "", "prediction": ["all x.((Radio(x) | Computer(x)) -> IncreasesSharingOfInformation(x))"]}
{"id": "entailmentbank_train_5481", "nl": "a weather report is a kind of information.", "fol": "", "prediction": ["all x.(WeatherReport(x) -> Information(x))"]}
{"id": "entailmentbank_train_5482", "nl": "radios and computers increase the sharing of weather report.", "fol": "", "prediction": ["all x y.((Radio(x) & Computer(y)) -> IncreasesWeatherReportSharing(x,y))"]}
{"id": "entailmentbank_train_5483", "nl": "sandpaper is used to smooth the surface objects.", "fol": "", "prediction": ["all x.(Sandpaper(x) -> SmoothSurfaceObjects(x))"]}
{"id": "entailmentbank_train_5484", "nl": "sandpaper is a kind of tool for smoothing objects.", "fol": "", "prediction": ["all x.(Sandpaper(x) -> SmoothingObjects(x))"]}
{"id": "entailmentbank_train_5485", "nl": "sandpaper is a tool for smoothing the surface objects.", "fol": "", "prediction": ["all x.(Sandpaper(x) -> SmoothsSurfaceObjects(x))"]}
{"id": "entailmentbank_train_5486", "nl": "an engineer constructs a prototype from wood.", "fol": "", "prediction": ["all x y.((Engineer(x) & Prototype(y)) -> ConstructsFromWood(x,y))"]}
{"id": "entailmentbank_train_5487", "nl": "a prototype is a kind of object.", "fol": "", "prediction": ["all x.(Prototype(x) -> Object(x))"]}
{"id": "entailmentbank_train_5488", "nl": "the wooden prototype is a kind of object.", "fol": "", "prediction": ["all x.(WoodenPrototype(x) -> Object(x))"]}
{"id": "entailmentbank_train_5489", "nl": "sandpaper can be used to smooth the surface of the wooden prototype.", "fol": "", "prediction": ["all x.(Sandpaper(x) -> SmoothSurfaceOfWoodenPrototype(x))"]}
{"id": "entailmentbank_train_5490", "nl": "the engineer needs a tool to smooth the surface of the wooden prototype.", "fol": "", "prediction": ["all x y.((Engineer(x) & WoodenPrototype(y)) -> NeedsToolToSmoothSurface(x,y))"]}
{"id": "entailmentbank_train_5491", "nl": "the engineer can use sandpaper to smooth the surface of the wooden prototype.", "fol": "", "prediction": ["all x y.((Engineer(x) & WoodenPrototype(y)) -> CanSandpaper(x,y))"]}
{"id": "entailmentbank_train_5492", "nl": "computers are usually designed with weight restriction.", "fol": "", "prediction": ["all x.(Computer(x) -> WeightRestriction(x))"]}
{"id": "entailmentbank_train_5493", "nl": "a restriction can be used to limit something / keep something low.", "fol": "", "prediction": ["all x.(Restriction(x) -> (Limits(x) | KeepsLow(x)))"]}
{"id": "entailmentbank_train_5494", "nl": "a weight restriction on computers can keep the weight of the computer low.", "fol": "", "prediction": ["all x.((Computer(x) & WeightRestrictions(x)) -> KeepsLowWeight(x))"]}
{"id": "entailmentbank_train_5495", "nl": "as the weight of an object decreases, the object will be transported more easily.", "fol": "", "prediction": ["all x y.((Object(x) & WeightDecrease(x)) -> TransportedMoreEasily(x,y))"]}
{"id": "entailmentbank_train_5496", "nl": "a computer is a kind of object.", "fol": "", "prediction": ["all x.(Computer(x) -> Object(x))"]}
{"id": "entailmentbank_train_5497", "nl": "if the computer is low in weight, then the computer can be transported easily.", "fol": "", "prediction": ["all x.((Computer(x) & LowWeight(x)) -> Transportable(x))"]}
{"id": "entailmentbank_train_5498", "nl": "scientists make observations.", "fol": "", "prediction": ["all x.(Scientist(x) -> MakesObservations(x))"]}
{"id": "entailmentbank_train_5499", "nl": "lightning is a kind of weather phenomenon.", "fol": "", "prediction": ["all x.(Lightning(x) -> WeatherPhenomenon(x))"]}
{"id": "entailmentbank_train_5500", "nl": "weather phenomenon can be observed.", "fol": "", "prediction": ["all x.(WeatherPhenomenon(x) -> CanBeObserved(x))"]}
{"id": "entailmentbank_train_5501", "nl": "scientists make observations on lightnings.", "fol": "", "prediction": ["all x y.((Scientist(x) & Lightning(y)) -> MakesObservationsOn(x,y))"]}
{"id": "entailmentbank_train_5502", "nl": "lightning is a kind of electrical discharge.", "fol": "", "prediction": ["all x.(Lightning(x) -> ElectricalDischarge(x))"]}
{"id": "entailmentbank_train_5503", "nl": "scientists make observations on electrical discharge in the form of lightning.", "fol": "", "prediction": ["all x y.((Scientist(x) & ElectricalDischarge(y)) -> MakesObservationsInLightning(x,y))"]}
{"id": "entailmentbank_train_5504", "nl": "planets orbit stars.", "fol": "", "prediction": ["all x.(Planet(x) -> OrbitsStar(x))"]}
{"id": "entailmentbank_train_5505", "nl": "gravity causes planets to orbit stars.", "fol": "", "prediction": ["all x y.((Planet(x) & Gravity(y)) -> CausesToOrbitStars(x,y))"]}
{"id": "entailmentbank_train_5506", "nl": "gravity causes the planets in solar system to orbit the sun.", "fol": "", "prediction": ["all x y.((Planet(x) & SolarSystem(y)) -> CausesOrbit(x,y))"]}
{"id": "entailmentbank_train_5507", "nl": "isaac newton discovered the theory of gravity.", "fol": "", "prediction": ["isaac newton discovered the theory of gravity."]}
{"id": "entailmentbank_train_5508", "nl": "isaac newton discovered that gravity causes the planets in the solar system to orbit the sun.", "fol": "", "prediction": ["all x y.((IsaacNewton(x) & Planet(y)) -> CausesOrbit(x,y))"]}
{"id": "entailmentbank_train_5509", "nl": "a computer can increase communication.", "fol": "", "prediction": ["all x.(Computer(x) -> IncreasesCommunication(x))"]}
{"id": "entailmentbank_train_5510", "nl": "exercise is a kind of physical activity.", "fol": "", "prediction": ["all x.(Exercise(x) -> PhysicalActivity(x))"]}
{"id": "entailmentbank_train_5511", "nl": "some types of new technology cause physical activity to decrease.", "fol": "", "prediction": ["exists x.(NewTechnology(x) & CausesDecreasedPhysicalActivity(x))"]}
{"id": "entailmentbank_train_5512", "nl": "some types of new technology cause exercise to decrease.", "fol": "", "prediction": ["exists x.(NewTechnology(x) & CausesDecrease(x))"]}
{"id": "entailmentbank_train_5513", "nl": "decreasing something positive has a negative impact on a thing.", "fol": "", "prediction": ["all x y.((Positive(x) & Positive(y)) -> NegativeImpact(x,y))"]}
{"id": "entailmentbank_train_5514", "nl": "exercise has a positive impact on a human's health.", "fol": "", "prediction": ["all x.(Exercise(x) -> PositiveImpactOnHumanHealth(x))"]}
{"id": "entailmentbank_train_5515", "nl": "decreasing exercise has a negative impact on a human's health.", "fol": "", "prediction": ["all x.(DecreasingExercise(x) -> NegativeImpactOnHumanHealth(x))"]}
{"id": "entailmentbank_train_5516", "nl": "some types of new technology cause a negative impact on a human's health.", "fol": "", "prediction": ["exists x.(NewTechnology(x) & CausesNegativeImpactOnHumanHealth(x))"]}
{"id": "entailmentbank_train_5517", "nl": "food is a kind of substance.", "fol": "", "prediction": ["all x.(Food(x) -> Substance(x))"]}
{"id": "entailmentbank_train_5518", "nl": "louis pasteur discovered that heating the substance for a short time can kill the bacteria inside.", "fol": "", "prediction": ["all x y.((LouisPasteur(x) & Substance(y)) -> (HeatsForShortTime(x,y) & KillsBacteria(x,y)))"]}
{"id": "entailmentbank_train_5519", "nl": "heating food for a short time can kill the bacteria inside.", "fol": "", "prediction": ["all x.((HeatingFood(x) & ShortTime(x)) -> KillsBacteriaInside(x))"]}
{"id": "entailmentbank_train_5520", "nl": "if the bacteria in food are killed, then the food will be stored longer.", "fol": "", "prediction": ["all x.((Bacteria(x) & Killed(x)) -> StoredLonger(x))"]}
{"id": "entailmentbank_train_5521", "nl": "heating food for a short time can help store foods for longer.", "fol": "", "prediction": ["all x.((HeatingFood(x) & ShortTime(x)) -> StoresFoodForLonger(x))"]}
{"id": "entailmentbank_train_5522", "nl": "farming is a kind of process.", "fol": "", "prediction": ["all x.(Farming(x) -> Process(x))"]}
{"id": "entailmentbank_train_5523", "nl": "farming produces food.", "fol": "", "prediction": ["all x.(Farming(x) -> ProducesFood(x))"]}
{"id": "entailmentbank_train_5524", "nl": "farming is a process of producing food.", "fol": "", "prediction": ["all x.(Farming(x) -> ProducesFood(x))"]}
{"id": "entailmentbank_train_5525", "nl": "farming technology is used on farming.", "fol": "", "prediction": ["all x.(FarmingTechnology(x) -> UsedOnFarming(x))"]}
{"id": "entailmentbank_train_5526", "nl": "farming technology is used on the process of producing food.", "fol": "", "prediction": ["all x.(FarmingTechnology(x) -> ProducesFood(x))"]}
{"id": "entailmentbank_train_5527", "nl": "if technology used for a process is improved then the product produced by that process will increase.", "fol": "", "prediction": ["all x y.((Technology(x) & Process(y) & Improved(x,y)) -> ProductIncrease(x,y))"]}
{"id": "entailmentbank_train_5528", "nl": "if farming technology is improved then the food produced by farming will increase.", "fol": "", "prediction": ["all x.((FarmingTechnologyImproved(x) & Improved(x)) -> IncreasedFoodProducedByFarming(x))"]}
{"id": "entailmentbank_train_5529", "nl": "farming technology is improved.", "fol": "", "prediction": ["all x.(FarmingTechnology(x) -> Improved(x))"]}
{"id": "entailmentbank_train_5530", "nl": "the food produced by farming will increase.", "fol": "", "prediction": ["all x.((Food(x) & ProducedByFarming(x)) -> Increased(x))"]}
{"id": "entailmentbank_train_5531", "nl": "chemical splashing sometimes occurs during experiments.", "fol": "", "prediction": ["exists x.(ChemicalSplashing(x) & DuringExperiments(x))"]}
{"id": "entailmentbank_train_5532", "nl": "chemical splashing can cause harm to humans / to the eyes.", "fol": "", "prediction": ["all x.(ChemicalSplashing(x) -> (CausesHarmToHumans(x) | CausesHarmToEyes(x)))"]}
{"id": "entailmentbank_train_5533", "nl": "chemical splashing during experiments can cause harm to the eyes.", "fol": "", "prediction": ["all x.((ChemicalSplashing(x) & Experiment(x)) -> CausesHarmToEyes(x))"]}
{"id": "entailmentbank_train_5534", "nl": "safety goggles are used for protecting the eyes during experiments.", "fol": "", "prediction": ["all x.(SafetyGoggles(x) -> ProtectsEyes(x))"]}
{"id": "entailmentbank_train_5535", "nl": "safety goggles can be used for protecting the eyes from chemical splashing.", "fol": "", "prediction": ["all x.(SafetyGoggles(x) -> ProtectsEyesFromChemicalSplashing(x))"]}
{"id": "entailmentbank_train_5536", "nl": "acids are corrosive.", "fol": "", "prediction": ["all x.(Acid(x) -> Corrosive(x))"]}
{"id": "entailmentbank_train_5537", "nl": "corrosive substance can cause harm to the eyes.", "fol": "", "prediction": ["all x.(CorrosiveSubstance(x) -> CausesHarmToEyes(x))"]}
{"id": "entailmentbank_train_5538", "nl": "a base is corrosive.", "fol": "", "prediction": ["all x.(Base(x) -> Corrosive(x))"]}
{"id": "entailmentbank_train_5539", "nl": "acids and bases can cause harm to the eyes.", "fol": "", "prediction": ["all x.((Acids(x) | Bases(x)) -> CausesHarmToEyes(x))"]}
{"id": "entailmentbank_train_5540", "nl": "students have to work with acids and bases for experiments.", "fol": "", "prediction": ["all x.(Student(x) -> (WorksWithAcids(x) & WorksWithBases(x)))"]}
{"id": "entailmentbank_train_5541", "nl": "acids and bases may cause harm to students' eyes during experiments.", "fol": "", "prediction": ["all x y.((Acids(x) & Bases(y)) -> MayCauseHarmToStudentsEyes(x,y))"]}
{"id": "entailmentbank_train_5542", "nl": "safety goggles can be used to protect students' eyes from acids and bases.", "fol": "", "prediction": ["all x.(SafetyGoggles(x) -> (ProtectsEyesFromAcids(x) & ProtectsEyesFromBases(x)))"]}
{"id": "entailmentbank_train_5543", "nl": "water usage is a kind of data.", "fol": "", "prediction": ["all x.(WaterUsage(x) -> Data(x))"]}
{"id": "entailmentbank_train_5544", "nl": "yearly means every year.", "fol": "", "prediction": ["all x.(Annual(x) -> EveryYear(x))"]}
{"id": "entailmentbank_train_5545", "nl": "yearly water usage in the usa is collected and needed to be presented.", "fol": "", "prediction": ["all x y.((WaterUsage(x) & Annual(y)) -> (Collects(x,y) & NeededToBePresented(x)))"]}
{"id": "entailmentbank_train_5546", "nl": "yearly water usage in the usa is a kind of data over time.", "fol": "", "prediction": ["all x.((AnnualWaterUsage(x) & InUsa(x)) -> DataOverTime(x))"]}
{"id": "entailmentbank_train_5547", "nl": "a line graph is used for showing change / data over time.", "fol": "", "prediction": ["all x.(LineGraph(x) -> ShowsChange(x))"]}
{"id": "entailmentbank_train_5548", "nl": "a line graph can be used to show yearly water usage in the usa.", "fol": "", "prediction": ["all x y.((LineGraph(x) & WaterUsage(y)) -> ShowsInUsa(x,y))"]}
{"id": "entailmentbank_train_5549", "nl": "the percent of various materials in solid waste needs to be presented in a type of graph.", "fol": "", "prediction": ["all x.((PercentInSolidWaste(x) & Material(x)) -> NeedsGraph(x))"]}
{"id": "entailmentbank_train_5550", "nl": "a circle graph / pie graph can be used to display percents / ratios.", "fol": "", "prediction": ["all x.((CircleGraph(x) | PieGraph(x)) -> DisplaysPercentsOrRatios(x))"]}
{"id": "entailmentbank_train_5551", "nl": "the percent of various materials in solid waste can be presented in a circle graph.", "fol": "", "prediction": ["all x.((Materials(x) & SolidWaste(x)) -> CanBePresentedInCircleGraph(x))"]}
{"id": "entailmentbank_train_5552", "nl": "a line graph is a kind of graph of connected data points.", "fol": "", "prediction": ["all x.(LineGraph(x) -> ConnectedDataPoints(x))"]}
{"id": "entailmentbank_train_5553", "nl": "a line graph is used for showing change over time through connected data points.", "fol": "", "prediction": ["all x.(LineGraph(x) -> ShowsChangeOverTimeThroughConnectedDataPoints(x))"]}
{"id": "entailmentbank_train_5554", "nl": "the change in squirrels' population over time needs to be shown in a graph.", "fol": "", "prediction": ["all x.(SquirrelPopulation(x) -> NeedsGraph(x))"]}
{"id": "entailmentbank_train_5555", "nl": "the change in squirrels' population over time can be shown using a line graph through connected data points.", "fol": "", "prediction": ["all x.(SquirrelPopulation(x) -> ShownUsingLineGraph(x))"]}
{"id": "entailmentbank_train_5556", "nl": "the percentages of the plant types in the deer diet need to be shown in a graph.", "fol": "", "prediction": ["all x.((PlantType(x) & DeerDiet(x)) -> NeedsGraph(x))"]}
{"id": "entailmentbank_train_5557", "nl": "a pie chart is a kind of graph.", "fol": "", "prediction": ["all x.(PieChart(x) -> Graph(x))"]}
{"id": "entailmentbank_train_5558", "nl": "a pie chart is used for showing percentages.", "fol": "", "prediction": ["all x.(PieChart(x) -> ShowsPercentages(x))"]}
{"id": "entailmentbank_train_5559", "nl": "the percentages of the plant types in the deer diet can be shown in a pie chart.", "fol": "", "prediction": ["all x y.((PlantType(x) & DeerDiet(y)) -> CanBeShownInPieChart(x,y))"]}
{"id": "entailmentbank_train_5560", "nl": "plant is a kind of oragnism.", "fol": "", "prediction": ["all x.(Plant(x) -> Oragnism(x))"]}
{"id": "entailmentbank_train_5561", "nl": "a lemon tree is a kind of plant.", "fol": "", "prediction": ["all x.(LemonTree(x) -> Plant(x))"]}
{"id": "entailmentbank_train_5562", "nl": "a lemon tree is a kind of organism.", "fol": "", "prediction": ["all x.(LemonTree(x) -> Organism(x))"]}
{"id": "entailmentbank_train_5563", "nl": "cold temperatures usually have a negative impact on organisms.", "fol": "", "prediction": ["all x.(ColdTemperature(x) -> NegativeImpactOnOrganisms(x))"]}
{"id": "entailmentbank_train_5564", "nl": "cold temperatures have a negative impact on the lemon trees.", "fol": "", "prediction": ["all x.(ColdTemperatures(x) -> NegativeImpactOnLemonTrees(x))"]}
{"id": "entailmentbank_train_5565", "nl": "a greenhouse is used to protect plants by keeping them warm.", "fol": "", "prediction": ["all x y.((Greenhouse(x) & Plant(y)) -> ProtectsByWarming(x,y))"]}
{"id": "entailmentbank_train_5566", "nl": "a greenhouse can be used to protect the lemon trees by keeping them warm.", "fol": "", "prediction": ["all x y.((Greenhouse(x) & LemonTree(y)) -> ProtectsByWarming(x,y))"]}
{"id": "entailmentbank_train_5567", "nl": "soil is a kind of material.", "fol": "", "prediction": ["all x.(Soil(x) -> Material(x))"]}
{"id": "entailmentbank_train_5568", "nl": "texture is a property of surfaces / materials / objects and includes ordered values of smooth / rough.", "fol": "", "prediction": ["all x.(Texture(x) -> (PropertyOfSurfacesMaterialsObjects(x) & IncludesOrderedValuesOfSmoothRough(x)))"]}
{"id": "entailmentbank_train_5569", "nl": "texture is a property of soil.", "fol": "", "prediction": ["all x.(Texture(x) -> PropertyOfSoil(x))"]}
{"id": "entailmentbank_train_5570", "nl": "the properties of something can be used to identify / used to describe that something.", "fol": "", "prediction": ["all x y.((Properties(x) & Something(y)) -> (Identifies(x,y) | Defines(x,y)))"]}
{"id": "entailmentbank_train_5571", "nl": "texture can be used to identify soil.", "fol": "", "prediction": ["all x.(Texture(x) -> IdentifiesSoil(x))"]}
{"id": "entailmentbank_train_5572", "nl": "touch can be used for detecting texture.", "fol": "", "prediction": ["all x.(Touch(x) -> DetectsTexture(x))"]}
{"id": "entailmentbank_train_5573", "nl": "touching the soil can be used to identify the soil by detecting its texture.", "fol": "", "prediction": ["all x y.((Soil(x) & Touching(x,y)) -> Identifies(x,y))"]}
