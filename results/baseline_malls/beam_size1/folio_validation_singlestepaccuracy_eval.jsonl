{"id": "folio_validation_0", "prediction": "all x.((PerformsInSchoolTalentShows(x) & Often(x)) -> (Attends(x) & EngagedWithSchoolEvents(x)))", "score": 0}
{"id": "folio_validation_1", "prediction": "all x.(Person(x) -> (PerformsInSchoolTalentShows(x) | InactiveAndDisinterestedMember(x)))", "score": 0}
{"id": "folio_validation_2", "prediction": "all x.(ChaperonesHighSchoolDances(x) -> -StudentsAttendingSchool(x))", "score": 0}
{"id": "folio_validation_3", "prediction": "all x.((Person(x) & Inactive(x) & Disinterested(x)) -> ChaperoneHighSchoolDance(x))", "score": 0}
{"id": "folio_validation_4", "prediction": "all x.((YoungChild(x) & YoungTeen(x) & WishesToFinishAcademicCareers(x) & WishesToFinishEducationalOpportunities(x)) -> AttendsSchool(x))", "score": 0}
{"id": "folio_validation_5", "prediction": "((Bonnie(Bonnie) & VeryEngagedWithSchoolEvents(Bonnie)) | (-Bonnie(Bonnie) & VeryEngagedWithSchoolEvents(Bonnie))))", "score": -1}
{"id": "folio_validation_6", "prediction": "all x.(Bonnie(x) -> PerformsInSchoolTalentShows(x))", "score": 0}
{"id": "folio_validation_7", "prediction": "all x.((YoungChild(x) | Teenager(x)) & (WantsToFinishAcademicCareerAndEducationalOpportunities(x) & ChaperonesHighSchoolDances(x)) | (-WantsToFinishAcademicCareerAndEducationalOpportunities(x) & AttendsSchool(x)) | (-WantsToFinishAcademicCareerAndEducationalOpportunities(x) & DisinterestedMember(x))))", "score": -1}
{"id": "folio_validation_8", "prediction": "all x.((CameronesHighSchoolDances(x) | PerformsInSchoolTalentShowsOften(x)) -> (YoungChild(x) | YoungTeenager(x)) & -InactiveAndDisinterestedMemberOfCommunity(x)))", "score": -1}
{"id": "folio_validation_9", "prediction": "all x.((Employee(x) & SchedulesMeeting(x) & Customer(x)) -> AppearsInCompany(x))", "score": 0}
{"id": "folio_validation_10", "prediction": "all x.((HasLunch(x) & Company(x)) -> SchedulesMeetingsWithCustomers(x))", "score": 0}
{"id": "folio_validation_11", "prediction": "all x.(Employee(x) -> (HasLunchInCompany(x) | HasLunchAtHome(x)))", "score": 0}
{"id": "folio_validation_12", "prediction": "all x.((Employee(x) & HasLunchAtHome(x)) -> WorkingRemotelyFromHome(x))", "score": 0}
{"id": "folio_validation_13", "prediction": "all x.((Employee(x) & InOtherCountries(x)) -> WorksRemotelyFromHome(x))", "score": 0}
{"id": "folio_validation_14", "prediction": "-exists x.(Manager(x) & WorksRemotely(x))", "score": 0}
{"id": "folio_validation_15", "prediction": "all x.(James(x) -> ((Manager(x) & AfpearsInCompany(x)) | (-Manager(x) & AfpearsInCompany(x)))))", "score": -1}
{"id": "folio_validation_16", "prediction": "all x.(James(x) -> HasLunch(x))", "score": 0}
{"id": "folio_validation_17", "prediction": "(-HasLunch(James))", "score": 0}
{"id": "folio_validation_18", "prediction": "all x.(Monkeypox(x) -> (InfectiousDisease(x) & CausedByMammalpoxVirus(x)))", "score": 0}
{"id": "folio_validation_19", "prediction": "all x y.((MonkeypoxVirus(x) & Animal(y)) -> CanOccur(x,y))", "score": 0}
{"id": "folio_validation_20", "prediction": "all x.(Human(x) -> Mammal(x))", "score": 0}
{"id": "folio_validation_21", "prediction": "all x.(Mammal(x) -> Animal(x))", "score": 0}
{"id": "folio_validation_22", "prediction": "all x.((SymptonsOfMonkeypox(x) & Fever(x) & Headache(x) & MusclePains(x) & FeelingTense(x)) -> Monkeypox(x))", "score": 0}
{"id": "folio_validation_23", "prediction": "all x.((Person(x) & GetsGlu(x)) -> FeelsStorm(x))", "score": 0}
{"id": "folio_validation_24", "prediction": "exists x.(Animal(x) & Animal(x))", "score": 0}
{"id": "folio_validation_25", "prediction": "all x.((Manager(x) | InOtherCountries(x)) -> (HasLunchAtHome(x) | WorksRemotelyFromHome(x)))", "score": 0}
{"id": "folio_validation_26", "prediction": "-exists x.(Flu(x) & -Gives(x,flu))", "score": 0}
{"id": "folio_validation_27", "prediction": "all x.((Sympton(x) & Monkeypox(x)) -> IncludesCoughing(x))", "score": 0}
{"id": "folio_validation_28", "prediction": "all x.((WildTurkey(x) & WildTurkey(x)) -> (Eastern(x) | Osceola(x) | Gould(x) | Merriam(x)))", "score": 0}
{"id": "folio_validation_29", "prediction": "(all x.(Rio GrandeWildTurkey(x) -> WildTurkey(x)) & all y.(OcellatedWildTurkey(y) -> WildTurkey(y)))", "score": -1}
{"id": "folio_validation_30", "prediction": "Tom is not EasternWildTurkey(Tom)", "score": -1}
{"id": "folio_validation_31", "prediction": "Tom is not OsceolawildTurkey(Tom)", "score": -1}
{"id": "folio_validation_32", "prediction": "(-(GouldsWildTurkey(Tom) | MerriamsWildTurkey(Tom)) | RioGrandwildTurkey(Tom)))", "score": -1}
{"id": "folio_validation_33", "prediction": "Tom is OcellatedWildTurkey(Tom)", "score": -1}
{"id": "folio_validation_34", "prediction": "Tom is EasternWildTurkey(Tom)", "score": -1}
{"id": "folio_validation_35", "prediction": "(WildTurkey(Joey) & Wild(Joey))", "score": 0}
{"id": "folio_validation_36", "prediction": "all x y.((JapaneseGameCompany(x) & LegendOfZelda(y)) -> CreatedBy(x,y))", "score": 0}
{"id": "folio_validation_37", "prediction": "all x.(Top10(x) -> MadeByJapaneseGameCompanies(x))", "score": 0}
{"id": "folio_validation_38", "prediction": "all x.((Game(x) & SellsMoreThanOneMillionCopies(x)) -> Top10List(x))", "score": 0}
{"id": "folio_validation_39", "prediction": "The LegendOfZeldaSoldMoreThanOneMillionCopies(LetterOfZelda)", "score": -1}
{"id": "folio_validation_40", "prediction": "The LegendOfZelda(x) -> Top10List(x))", "score": -1}
{"id": "folio_validation_41", "prediction": "all x.(FoxFox22(x) -> MadeByJapaneseVideoGameCompany(x))", "score": 0}
{"id": "folio_validation_42", "prediction": "The LegendOfZelda - Top10List(x)", "score": -1}
{"id": "folio_validation_43", "prediction": "all x.(Square(x) -> HasFourSides(x))", "score": 0}
{"id": "folio_validation_44", "prediction": "all x.(FourSidedThing(x) -> Shape(x))", "score": 0}
{"id": "folio_validation_45", "prediction": "all x.(Square(x) -> Shape(x))", "score": 0}
{"id": "folio_validation_46", "prediction": "all x.(Rabbit(x) -> Cute(x))", "score": 0}
{"id": "folio_validation_47", "prediction": "exists x.(Turtle(x) & Turtle(x))", "score": 0}
{"id": "folio_validation_48", "prediction": "all x.(Animal(x) -> (Rabbit(x) | Squirrel(x)))", "score": 0}
{"id": "folio_validation_49", "prediction": "all x.(Skittish(x) -> -Still(x))", "score": 0}
{"id": "folio_validation_50", "prediction": "all x.(Squirrel(x) -> Skittish(x))", "score": 0}
{"id": "folio_validation_51", "prediction": "Rock is still.", "score": -1}
{"id": "folio_validation_52", "prediction": "Rock is turtle.", "score": -1}
{"id": "folio_validation_53", "prediction": "Rock is not turtle.", "score": -1}
{"id": "folio_validation_54", "prediction": "all x.(Rock(x) -> (Turtle(x) | Cute(x)))", "score": 0}
{"id": "folio_validation_55", "prediction": "all x.((Rock(x) & -(Turtle(x) & Squirrel(x))) -> (Cute(x) | Skittish(x)))", "score": 0}
{"id": "folio_validation_56", "prediction": "all x.((Rock(x) & Cute(x) & Still(x)) -> (Turtle(x) & Skittish(x)))", "score": 0}
{"id": "folio_validation_57", "prediction": "\"StrangerThings\" is a popular NetflixShow(x))", "score": -1}
{"id": "folio_validation_58", "prediction": "all x.((Fan(x) & Popular(x)) -> BingeWatch(x))", "score": 0}
{"id": "folio_validation_59", "prediction": "all x.((Karen(x) & BingeWatches(x,Netflix)) -> Downloads(x))", "score": 0}
{"id": "folio_validation_60", "prediction": "Karen does not download \"BlackMirror\"", "score": -1}
{"id": "folio_validation_61", "prediction": "\"BlackMirror\" is NetflixShow(x))", "score": -1}
{"id": "folio_validation_62", "prediction": "all x y.((Karen(x) & NetflixShow(y) & BingeWatches(x,y)) -> SharesTo(x,y))", "score": 0}
{"id": "folio_validation_63", "prediction": "all x y.((Karen(x) & Lisa(y)) -> SharesStrangerThings(x,y))", "score": 0}
{"id": "folio_validation_64", "prediction": "\"BlackMirror\" is popular.", "score": -1}
{"id": "folio_validation_65", "prediction": "(ShareBlackMirror(Karen,Lisa))", "score": 0}
{"id": "folio_validation_66", "prediction": "(Capital(Beijing) & PeoplesRepublicOfChina(Beijing))", "score": 0}
{"id": "folio_validation_67", "prediction": "all x.((Beijing(x) & PopulousNationalCapitalCity(x)) -> Populous(x))", "score": 0}
{"id": "folio_validation_68", "prediction": "all x.(Beijing(x) -> NorthernChina(x))", "score": 0}
{"id": "folio_validation_69", "prediction": "(HostsSummerOlympics(Beijing) & HostsSummerParalympics(Beijing))", "score": 0}
{"id": "folio_validation_70", "prediction": "(HostsSummerOlympics(Beijing) & HostsWinterOlympics(Beijing) & HostsSummerParalympics(Beijing) & HostsWinterParalympics(Beijing))", "score": 0}
{"id": "folio_validation_71", "prediction": "all x.((University(x) & Beijing(x)) -> (BestInAsiaPacific(x) & BestInWorld(x)))", "score": 0}
{"id": "folio_validation_72", "prediction": "all x.((Beijing(x) & SummerOlympics(x) & WinterOlympics(x)) -> Hosts(x,y))", "score": 0}
{"id": "folio_validation_73", "prediction": "all x.(Beijing(x) -> LocatedInSouthChina(x))", "score": 0}
{"id": "folio_validation_74", "prediction": "(SecondLargestCity(Beijing) & UrbanPopulation(Beijing))", "score": 0}
{"id": "folio_validation_75", "prediction": "all x.(Alien(x) -> Extraterrestrial(x))", "score": 0}
{"id": "folio_validation_76", "prediction": "all x.((Alien(x) & FromMars(x)) -> Alien(x))", "score": 0}
{"id": "folio_validation_77", "prediction": "-exists x.(Extraterrestrial(x) & Human(x))", "score": 0}
{"id": "folio_validation_78", "prediction": "all x.((Earth(x) & Human(x)) -> Human(x))", "score": 0}
{"id": "folio_validation_79", "prediction": "(-(Marvin(Mars) & Earth(Mars)))", "score": 0}
{"id": "folio_validation_80", "prediction": "all x.((Marvin(x) & -FromEarth(x)) -> Extraterrestrial(x))", "score": 0}
{"id": "folio_validation_81", "prediction": "Marvin is alien(Marvin)", "score": -1}
{"id": "folio_validation_82", "prediction": "(-Human(Marvin) & -Mars(Marvin))", "score": 0}
{"id": "folio_validation_83", "prediction": "all x.((Marvin(x) & -Mars(x)) -> Human(x))", "score": 0}
{"id": "folio_validation_84", "prediction": "all x.(Person(x) -> (GrandSlamChampion(x) | OscarnominatedActor(x)))", "score": 0}
{"id": "folio_validation_85", "prediction": "all x.(GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))", "score": 0}
{"id": "folio_validation_86", "prediction": "all x.(OscarnominatedActor(x) -> Celebrity(x))", "score": 0}
{"id": "folio_validation_87", "prediction": "all x.(ProfessionalTennisPlayer(x) -> Athlete(x))", "score": 0}
{"id": "folio_validation_88", "prediction": "all x.(Celebrity(x) -> WellPaid(x))", "score": 0}
{"id": "folio_validation_89", "prediction": "all x.(Athlete(x) -> Famous(x))", "score": 0}
{"id": "folio_validation_90", "prediction": "all x.(WellPaid(x) -> LivesInTaxHaven(x))", "score": 0}
{"id": "folio_validation_91", "prediction": "all x.((Djokovic(x) & Famous(x) & Athlete(x)) -> WellPayed(x))", "score": 0}
{"id": "folio_validation_92", "prediction": "(GrandSlamChampion(Djokovic))", "score": 0}
{"id": "folio_validation_93", "prediction": "all x.(Djokovic(x) -> LivesInTaxHaven(x))", "score": 0}
{"id": "folio_validation_94", "prediction": "Djokovic - exists x.(TaxHaven(x) & -LivesIn(x,Djokovic))", "score": -1}
{"id": "folio_validation_95", "prediction": "all x.(DiamondMine(x) -> (ProfessionalWrestlingStable(x) & FormedInWrestling(x)))", "score": 0}
{"id": "folio_validation_96", "prediction": "Roderick Strong leads DiamondMine(Roderick)", "score": -1}
{"id": "folio_validation_97", "prediction": "(CreedBrothers(diamondmine) & IvyNile(diamondmine))", "score": 0}
{"id": "folio_validation_98", "prediction": "all x.(Imperium(x) -> FeudWithDiamondMine(x))", "score": 0}
{"id": "folio_validation_99", "prediction": "all x.((Roderick(x) & StrongLeadsProfessionalWrestlingStable(x)) -> ProfessionalWrestlingStable(x))", "score": 0}
{"id": "folio_validation_100", "prediction": "Roderick StrongLeadsCreedBrothers(roderick,creed)", "score": -1}
{"id": "folio_validation_101", "prediction": "all x.(Imperium(x) -> -FudWithProfessionalWrestlingStable(x))", "score": 0}
{"id": "folio_validation_102", "prediction": "Symphony No.9 is MusicPiece(Symphony)", "score": -1}
{"id": "folio_validation_103", "prediction": "all x.(Composer(x) -> WritesMusicPiece(x))", "score": 0}
{"id": "folio_validation_104", "prediction": "all x y z.((Boboss(x) & SymphonyNo.9(y) & Symphony(z)) -> WrittenBy(x,y,z))", "score": -1}
{"id": "folio_validation_105", "prediction": "(ViennaMusicSymphonySocietyPremieredSymphonyNo.9))", "score": -1}
{"id": "folio_validation_106", "prediction": "all x.(ViennaMusicSymposia(x) -> Orchestra(x))", "score": 0}
{"id": "folio_validation_107", "prediction": "all x.((Boboss(x) & ViennaMusicScientific(x)) -> Leads(x,y))", "score": 0}
{"id": "folio_validation_108", "prediction": "all x.(Orchestra(x) -> LeadByConductor(x))", "score": 0}
{"id": "folio_validation_109", "prediction": "all x.((Bobop Beethoven(x) & Composer(x)) -> Composer(x))", "score": -1}
{"id": "folio_validation_110", "prediction": "exists x.(Orchestra(x) & PremieredMusicPieces(x))", "score": 0}
{"id": "folio_validation_111", "prediction": "(-Conductor(Benjamin))", "score": 0}
{"id": "folio_validation_112", "prediction": "all x.(ZahaHadid(x) -> TimelessDesignStyle(x))", "score": 0}
{"id": "folio_validation_113", "prediction": "-exists x.(MassProductDesign(x) & Timeless(x))", "score": 0}
{"id": "folio_validation_114", "prediction": "((ZahaHadidDesignStyle(z) | KellyWearstlerDesignStyle(z)))", "score": 0}
{"id": "folio_validation_115", "prediction": "all x.((DesignStyle(x) & KellyWearstler(x)) -> Evocative(x))", "score": 0}
{"id": "folio_validation_116", "prediction": "all x.((DesignStyle(x) & KellyWearstler(x)) -> Dreamy(x))", "score": 0}
{"id": "folio_validation_117", "prediction": "all x.((Design(x) & Timeless(x)) -> (MassProductDesign(x) & Evocative(x)))", "score": 0}
{"id": "folio_validation_118", "prediction": "all x.((Design(x) & Max(x)) -> MassProductDesign(x))", "score": 0}
{"id": "folio_validation_119", "prediction": "all x.((Design(x) & Max(x)) -> (Evocative(x) & Dreamy(x)))", "score": 0}
{"id": "folio_validation_120", "prediction": "all x.(Design(x) -> (Evocative(x) | Dreamy(x)))", "score": 0}
{"id": "folio_validation_121", "prediction": "all x.((Player(x) & HighlyRankedByWomensTennisAssociation(x)) -> ActivePlayerInMajorTennis(x))", "score": 0}
{"id": "folio_validation_122", "prediction": "all x.((LoseToIgaSwiatek(x)) -> HighlyRankedByWomensTennisAssociation(x))", "score": 0}
{"id": "folio_validation_123", "prediction": "all x.((FemaleTennisPlayer(x) & RolandGarros2022(x)) -> LostToIgaSwiatek(x))", "score": 0}
{"id": "folio_validation_124", "prediction": "(exists x.(FemaleTennisPlayer(x) & RolandGarros(x)) | exists y.(MaleTennisPlayer(y) & RolandGarros(y))))", "score": -1}
{"id": "folio_validation_125", "prediction": "all x.((Male(x) & RolandGarros(x) & RolandGarros(x)) -> LostToRafaelNadal(x))", "score": 0}
{"id": "folio_validation_126", "prediction": "all x.((Player(x) & (RatedHighlyByWomensTennisAssociation(x) | LostToRafaelNadal(x))) -> -MaleTennisPlayer(x))", "score": 0}
{"id": "folio_validation_127", "prediction": "CocoGauff is amongstMostActivePlayersInMajorTennis(coco)", "score": -1}
{"id": "folio_validation_128", "prediction": "(Loss(CocoonGauff) -> RafaelNadal(CocoonGauff))", "score": 0}
{"id": "folio_validation_129", "prediction": "(-(Player(CocoonGauff) & LostToIgaSwiatek(CocoonGauff)) | (Player(CocoonGauff) & -LostToIgaSwiatek(CocoonGauff))))", "score": -1}
{"id": "folio_validation_130", "prediction": "all x.(Cat(x) -> Mammal(x))", "score": 0}
{"id": "folio_validation_131", "prediction": "exists x.(Pet(x) & -Mammal(x))", "score": 0}
{"id": "folio_validation_132", "prediction": "-exists x.(Pet(x) & Cat(x))", "score": 0}
{"id": "folio_validation_133", "prediction": "-exists x.(FavoriteSeason(x) & Summer(x) & Fall(x))", "score": 0}
{"id": "folio_validation_134", "prediction": "all x.((Student(x) & LongVacation(x)) -> LovesSummer(x))", "score": 0}
{"id": "folio_validation_135", "prediction": "(FavoriteSeason(Emma) & Summer(Emma))", "score": 0}
{"id": "folio_validation_136", "prediction": "(FavoriteSeason(Mia,Emma) & -FavoriteSeason(Mia,Emma))", "score": 1}
{"id": "folio_validation_137", "prediction": "all x.((James(x) & LongVacation(x)) -> Wants(x,y))", "score": 0}
{"id": "folio_validation_138", "prediction": "(FavoriteSeason(James) -> Summer(James))", "score": 1}
{"id": "folio_validation_139", "prediction": "(FavoriteSeason(James) -> Fall(James))", "score": 0}
{"id": "folio_validation_140", "prediction": "(FavoriteSeason(Mia,Spring))", "score": 0}
{"id": "folio_validation_141", "prediction": "-exists x.(DigitalMedia(x) & Analog(x))", "score": 0}
{"id": "folio_validation_142", "prediction": "all x.(PrintedText(x) -> Analog(x))", "score": 0}
{"id": "folio_validation_143", "prediction": "all x.(StreamingService(x) -> Digital(x))", "score": 0}
{"id": "folio_validation_144", "prediction": "all x.((Object(x) & HardcoverBook(x)) -> PrintText(x))", "score": 0}
{"id": "folio_validation_145", "prediction": "all x.((StreamingService(x) & 1984(x)) -> HardcoverBook(x))", "score": 0}
{"id": "folio_validation_146", "prediction": "1984 is printedText(84)", "score": -1}
{"id": "folio_validation_147", "prediction": "1984 is streamingService(x)", "score": -1}
{"id": "folio_validation_148", "prediction": "1984 -StreamingService(84))", "score": -1}
{"id": "folio_validation_149", "prediction": "all x.(RomanceLanguage(x) -> IndoEuropeanLanguage(x))", "score": 0}
{"id": "folio_validation_150", "prediction": "all x.(RomanceLanguage(x) -> LanguageFamily(x))", "score": 0}
{"id": "folio_validation_151", "prediction": "all x.(Language(x) -> Relationship(x))", "score": 0}
{"id": "folio_validation_152", "prediction": "(RomanceLanguage(French) & RomanceLanguage(Spanish))", "score": 0}
{"id": "folio_validation_153", "prediction": "all x.(German(x) -> RelatedToSpanish(x))", "score": 0}
{"id": "folio_validation_154", "prediction": "all x.(Basque(x) -> -RelatedToOtherLanguage(x))", "score": 0}
{"id": "folio_validation_155", "prediction": "all x.(Basque(x) -> RomanceLanguage(x))", "score": 0}
{"id": "folio_validation_156", "prediction": "all x.(German(x) -> RomanceLanguage(x))", "score": 0}
{"id": "folio_validation_157", "prediction": "all x.(French(x) -> IndoEuropeanLanguage(x))", "score": 0}
{"id": "folio_validation_158", "prediction": "(Striker(RobertLewandowski)", "score": -1}
{"id": "folio_validation_159", "prediction": "all x.(Striker(x) -> SoccerPlayer(x))", "score": 0}
{"id": "folio_validation_160", "prediction": "Robert Lewandowski left Bayern Munchen.", "score": -1}
{"id": "folio_validation_161", "prediction": "all x y.((Player(x) & Team(y) & Left(x,y)) -> -PlayFor(x,y))", "score": 0}
{"id": "folio_validation_162", "prediction": "Robert Lewandowski (SoccerPlayer)", "score": -1}
{"id": "folio_validation_163", "prediction": "Robert Lewandowski plays for Bayern Munchen.", "score": -1}
{"id": "folio_validation_164", "prediction": "all x.((RobertLewandowski(x) & Star(x)) -> Star(x))", "score": 0}
{"id": "folio_validation_165", "prediction": "(City(Billings) & InMontana(Billings))", "score": 0}
{"id": "folio_validation_166", "prediction": "(InMontana(Montana) -> (City(Montana) & Butte(Montana) & City(Montana) & City(Montana) & City(Montana)))", "score": 0}
{"id": "folio_validation_167", "prediction": "(SameState(WhiteSulphurSprings) & SameState(Butte))", "score": 0}
{"id": "folio_validation_168", "prediction": "(-Malloyd(City) & City(Pierre))", "score": 0}
{"id": "folio_validation_169", "prediction": "all x.((City(x) & Butte(x)) -> -Pierre(x))", "score": 0}
{"id": "folio_validation_170", "prediction": "(SameState(Butte,Pierce) & SameState(Butte,Pierce))", "score": 0}
{"id": "folio_validation_171", "prediction": "(SameState(Pierre) & SameState(Bismarck))", "score": 0}
{"id": "folio_validation_172", "prediction": "(HomeToMissoula(Montana) & HomeToMissoula(Montana))", "score": 0}
{"id": "folio_validation_173", "prediction": "all x.((InternationalStudent(x) & InUS(x)) -> (HasF1Visa(x) | HasJ1Visa(x)))", "score": 0}
{"id": "folio_validation_174", "prediction": "all x.((InternationalStudent(x) & InUS(x) & HasF1Visa(x)) -> (ApplicationForCPT(x) | ApplicationForOPT(x)))", "score": 0}
{"id": "folio_validation_175", "prediction": "Mike is InternationalStudent(Mike)", "score": -1}
{"id": "folio_validation_176", "prediction": "all x.((Mike(x) & WantsToWorkInUS(x)) -> NeedsCPT(x))", "score": 0}
{"id": "folio_validation_177", "prediction": "Mike has a F1Visa(Mike)", "score": -1}
{"id": "folio_validation_178", "prediction": "all x.(Mike(x) -> HasJ1Visa(x))", "score": 0}
{"id": "folio_validation_179", "prediction": "all x.(Cow(x) -> Bovine(x))", "score": 0}
{"id": "folio_validation_180", "prediction": "exists x.(Pet(x) & Cow(x))", "score": 0}
{"id": "folio_validation_181", "prediction": "all x.(Bovine(x) -> Domesticated(x))", "score": 0}
{"id": "folio_validation_182", "prediction": "all x.(DomesticatedAnimal(x) -> -Alligator(x))", "score": 0}
{"id": "folio_validation_183", "prediction": "(Aligator(Ted)", "score": -1}
{"id": "folio_validation_184", "prediction": "(Pet(Ted) & Pet(Ted))", "score": 0}
{"id": "folio_validation_185", "prediction": "(Pet(Ted) & Cow(Ted))", "score": 0}
{"id": "folio_validation_186", "prediction": "all x.((Ted(x) & Cow(x)) -> -Pet(x))", "score": 0}
{"id": "folio_validation_187", "prediction": "all x.(Badults(x) -> (BritishSitcomSeries(x) & StarsPappys(x)))", "score": 0}
{"id": "folio_validation_188", "prediction": "all x.(Badult(x) -> PilotedOnBroadcastThree(x))", "score": 0}
{"id": "folio_validation_189", "prediction": "(WorkingTitle(WorkingTitle) & SecretDudeScientific(WorkingTitle))", "score": 0}
{"id": "folio_validation_190", "prediction": "Andrew Collins was the scripteditor for Badults.com.", "score": -1}
{"id": "folio_validation_191", "prediction": "Andrew Collins was the scripteditor for a series with the working title \"The SecretDudeScientific(x)\"", "score": -1}
{"id": "folio_validation_192", "prediction": "-exists x.(Pappys(x) & (StartedForShow(x,Broadcast2) | StartedForShow(x,Broadcast3))))", "score": -1}
{"id": "folio_validation_193", "prediction": "all x.(GrowthCompany(x) -> VolatileStock(x))", "score": 0}
{"id": "folio_validation_194", "prediction": "all x.((StockPrice(x) & Volatile(x)) -> -SuitableForRetirementFund(x))", "score": 0}
{"id": "folio_validation_195", "prediction": "exists x.(Company(x) & GrowthCompany(x))", "score": 0}
{"id": "folio_validation_196", "prediction": "all x.(MatureCompanyStock(x) -> SuitableForRetirementFund(x))", "score": 0}
{"id": "folio_validation_197", "prediction": "all x.(Kos(x) -> MatureCompanyStock(x))", "score": 0}
{"id": "folio_validation_198", "prediction": "all x.(Kos(x) -> CompanyStock(x))", "score": 0}
{"id": "folio_validation_199", "prediction": "all x.(Kos(x) -> (CompanyStock(x) & GrowthStock(x)))", "score": 0}
{"id": "folio_validation_200", "prediction": "all x.((Korea(x) & GrowthCompanyStock(x)) | PriceVolatile(x))", "score": 0}
{"id": "folio_validation_201", "prediction": "all x.((VehicleRegistrationPlate(x) & InIstanbul(x)) -> Number34(x))", "score": 0}
{"id": "folio_validation_202", "prediction": "all x.((Plate(x) & -EndsWith34(x)) -> -Istanbul(x))", "score": 0}
{"id": "folio_validation_203", "prediction": "(VehicleRegistrationPlate(Joe) & FromIstanbul(Joe))", "score": 0}
{"id": "folio_validation_204", "prediction": "all x.((Tom(x) & LicensePlate(x,35)) -> StartsWith(x,35))", "score": 0}
{"id": "folio_validation_205", "prediction": "all x.((LicensePlate(x) & Number35(x)) -> -Number34(x))", "score": 0}
{"id": "folio_validation_206", "prediction": "all x.(Joe'sLicensePlate(x) -> Number34(x))", "score": 0}
{"id": "folio_validation_207", "prediction": "Tom's license plate is from Istanbul.", "score": -1}
{"id": "folio_validation_208", "prediction": "all x.(WorksInStudentJobsOnCampus(x) -> NeedsToEarnMoney(x))", "score": 0}
{"id": "folio_validation_209", "prediction": "all x.((Person(x) & OrdersTakeoutFrequently(x)) -> WorksInStudentJobs(x))", "score": 0}
{"id": "folio_validation_210", "prediction": "all x.((Person(x) & (OrdersTakeoutFrequently(x) | EnjoysDiningHallMeals(x))) -> (College(x) | College(x)))", "score": 0}
{"id": "folio_validation_211", "prediction": "all x.((People(x) & EnjoysDiningHallMeals(x) & EnjoysRecipes(x)) -> -PickyEather(x))", "score": 0}
{"id": "folio_validation_212", "prediction": "all x.((People(x) & EnjoysDiningHallMeals(x) & EnjoysDiningHallRecipes(x)) -> SpendsLittleTimeEatingAndCatchingUpWithFriends(x))", "score": 0}
{"id": "folio_validation_213", "prediction": "all x.((Mary(x) & WorksInStudentJobs(x) & NeedsEarnMoney(x) & CollegeTuition(x)) -> (-Picky(x) & -NeedsEarnMoney(x)))", "score": 0}
{"id": "folio_validation_214", "prediction": "all x.((Mary(x) & CollegeTuition(x)) -> NeedsEarnMoney(x))", "score": 0}
{"id": "folio_validation_215", "prediction": "all x.((Maria(x) & -pickyEather(x)) -> (SpoisesTimeEating(x) & SpendsTimeCatchingUpWithFriends(x)))", "score": 0}
{"id": "folio_validation_216", "prediction": "all x.((Mary(x) & -pickyEather(x)) | (-pickyEater(x) & SpendsLittleTimeEatingAndCatchingUpWithFriends(x))))", "score": -1}
{"id": "folio_validation_217", "prediction": "-exists x.(Bakery(x) & Spicy(x))", "score": 0}
{"id": "folio_validation_218", "prediction": "all x.(Cupcake(x) -> Bakeries(x))", "score": 0}
{"id": "folio_validation_219", "prediction": "all x.(Hotpot(x) -> Spicy(x))", "score": 0}
{"id": "folio_validation_220", "prediction": "all x.((Product(x) & BakedByMelissa(x)) -> Cupcake(x))", "score": 0}
{"id": "folio_validation_221", "prediction": "all x.((DriedThaiChili(x) & (Spicy(x) | Bakery(x))) -> (Hotpot(x) | Spicy(x)))", "score": 0}
{"id": "folio_validation_222", "prediction": "all x.((ThaiChili(x) & BakedByMelissa(x)) -> Dried(x))", "score": 0}
{"id": "folio_validation_223", "prediction": "all x.((DriedThaiChili(x) & -BakedByMelissa(x)) -> -Product(x))", "score": 0}
{"id": "folio_validation_224", "prediction": "all x.((DriedThaiChili(x) & Hotpot(x)) -> Hotpot(x))", "score": 0}
{"id": "folio_validation_225", "prediction": "all x.(DriedThaiChili(x) -> (-BakedByMelissa(x) & -Bakery(x)))", "score": 0}
{"id": "folio_validation_226", "prediction": "all x.(DriedThaiChili(x) -> (Cupcake(x) & BakedByMelissa(x)))", "score": 0}
{"id": "folio_validation_227", "prediction": "all x.((Restaurant(x) & YelpRecommendations(x)) -> -NegativeReviews(x))", "score": 0}
{"id": "folio_validation_228", "prediction": "all x.((Restaurant(x) & RatingGreaterThan(x,9)) -> ListedInYelpRecommendations(x))", "score": 0}
{"id": "folio_validation_229", "prediction": "exists x.(Restaurant(x) & -ProvidesTakeOutService(x))", "score": 0}
{"id": "folio_validation_230", "prediction": "all x.((Restaurant(x) & PopularAmongLocalResidents(x)) -> RatingGreaterThan(x,9))", "score": 0}
{"id": "folio_validation_231", "prediction": "all x.(Subway(x) -> (RatingGreaterThan(x,9) | PopularAmongLocalResidents(x,10)))", "score": 0}
{"id": "folio_validation_232", "prediction": "all x.((Subway(x) & ProvidesTakeOutService(x) & ManyNegativeReviews(x)) -> (RatingGreaterThan(x,9) & -ProvidesTakeOutService(x)))", "score": 0}
{"id": "folio_validation_233", "prediction": "all x.(Subway(x) -> (ProvidesTakeOutService(x) & -ReceivesNegativeReviews(x)))", "score": 0}
{"id": "folio_validation_234", "prediction": "all x.(Subway(x) -> -ProvidesTakeOutService(x))", "score": 0}
{"id": "folio_validation_235", "prediction": "all x.((SuperheroMovie(x) & GoodGuy(x)) -> Wins(x))", "score": 0}
{"id": "folio_validation_236", "prediction": "The SurprisingAdventuresOfSirDigglyChickenCaesar(x) -> SuperheroMovie(x))", "score": -1}
{"id": "folio_validation_237", "prediction": "all x y.((GoodGuy(x) & BadGuy(y)) -> (Fights(x,y) & Via(x,y)))", "score": 0}
{"id": "folio_validation_238", "prediction": "Sir Digby fightsNemesis(SirDiggs)", "score": -1}
{"id": "folio_validation_239", "prediction": "all x.((SuperheroMovie(x) & NamedAfterCharacter(x)) -> GoodGuy(x))", "score": 0}
{"id": "folio_validation_240", "prediction": "The SurprisingAdventuresOfSirDigglyChickenCaesar(x) -> NamedAfterSirDiggly(x))", "score": -1}
{"id": "folio_validation_241", "prediction": "all x y.((WinsFight(x) & Person(y)) -> LosesFight(y))", "score": 0}
{"id": "folio_validation_242", "prediction": "all x.(SirDiggsNemesis(x) -> Loses(x))", "score": 0}
{"id": "folio_validation_243", "prediction": "all x.(Book(x) -> ContainsTooOfKnowledge(x))", "score": 0}
{"id": "folio_validation_244", "prediction": "all x y.((Person(x) & Book(y) & Reads(x,y)) -> GainsKnowledge(x,y))", "score": 0}
{"id": "folio_validation_245", "prediction": "all x.(GainKnowledge(x) -> Smarter(x))", "score": 0}
{"id": "folio_validation_246", "prediction": "(Reads(Harry,Henry Thoreau) & \"Walden(Harry,Henry)))", "score": -1}
{"id": "folio_validation_247", "prediction": "all x.(Wilden(x) -> ContainsKnowledge(x))", "score": 0}
{"id": "folio_validation_248", "prediction": "Harry is smarter than Before.", "score": -1}
{"id": "folio_validation_249", "prediction": "all x.(Smarter(x) -> GainedKnowledge(x))", "score": 0}
{"id": "folio_validation_250", "prediction": "all x.(NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))", "score": 0}
{"id": "folio_validation_251", "prediction": "all x.((OutputOfNaturalLanguageProcessingTask(x) & TextSequence(x)) -> LanguageGenerationTask(x))", "score": 0}
{"id": "folio_validation_252", "prediction": "all x.(MachineTranslation(x) -> NaturalLanguageProcessingTask(x))", "score": 0}
{"id": "folio_validation_253", "prediction": "all x.(MachineTranslation(x) -> TextSequence(x))", "score": 0}
{"id": "folio_validation_254", "prediction": "all x.(MachineTranslation(x) -> LanguageGenerationTask(x))", "score": 0}
{"id": "folio_validation_255", "prediction": "all x.(MachineTranslation(x) -> LanguageUnderstandingTask(x))", "score": 0}
{"id": "folio_validation_256", "prediction": "exists x.(ManagedBuilding(x) & AllowsPets(x))", "score": 0}
{"id": "folio_validation_257", "prediction": "all x y.((Apartment(x) & ManagedBuilding(y)) -> RequiresDeposit(x,y))", "score": 0}
{"id": "folio_validation_258", "prediction": "all x.(SecurityDeposit(x) -> (EqualToMonthsRent(x) | More(x)))", "score": 0}
{"id": "folio_validation_259", "prediction": "Fluffy is Tom's cat.", "score": -1}
{"id": "folio_validation_260", "prediction": "all x.(Cat(x) -> Pet(x))", "score": 0}
{"id": "folio_validation_261", "prediction": "all x.(OliveGarden(x) -> ManagedBuilding(x))", "score": 0}
{"id": "folio_validation_262", "prediction": "all x.((MonthlyRent(x) & OliveGarden(x)) -> $2000(x))", "score": 0}
{"id": "folio_validation_263", "prediction": "all x y.((Tom(x) & ManagedBuilding(y) & MovesInWithFluffy(x,y) & SecurityDeposit(x,y)) -> RentsApartment(x,y))", "score": 0}
{"id": "folio_validation_264", "prediction": "(MoreThan(2000$) -> MoreThan(2000$))", "score": 0}
{"id": "folio_validation_265", "prediction": "all x y.((Tom(x) & Apartment(y)) -> RentsInOliveGarden(x,y))", "score": 0}
{"id": "folio_validation_266", "prediction": "all x y.((Tom(x) & Apartment(y) & OliveGarden(y)) -> MovesIn(x,y))", "score": 0}
{"id": "folio_validation_267", "prediction": "all x.((SecurityDeposit(x) & OliveGarden(x)) -> (StockageDeposit(x,2000) | SecurityDeposit(x,2000)))", "score": 0}
{"id": "folio_validation_268", "prediction": "all x.((Animal(x) & LovedByTourists(x)) -> FavoriteAnimal(x))", "score": 0}
{"id": "folio_validation_269", "prediction": "all x.((Animal(x) & FromAustralia(x)) -> LovedByTourists(x))", "score": 0}
{"id": "folio_validation_270", "prediction": "all x.(Quokka(x) -> Animal(x))", "score": 0}
{"id": "folio_validation_271", "prediction": "all x.(FavoriteAnimal(x) -> VeryFluffy(x))", "score": 0}
{"id": "folio_validation_272", "prediction": "all x.(FavoriteAnimal(x) -> LovesToSleep(x))", "score": 0}
{"id": "folio_validation_273", "prediction": "all x.((Koala(x) & VeryFluffy(x)) -> -Quokka(x))", "score": 0}
{"id": "folio_validation_274", "prediction": "all x.(Koala(x) -> LovesToSleep(x))", "score": 0}
{"id": "folio_validation_275", "prediction": "all x.(Koala(x) -> (LovesSleeping(x) & Quokka(x)))", "score": 0}
{"id": "folio_validation_276", "prediction": "all x.(Quokka(x) -> ((Koala(x) & LovesSleep(x)) | (-LovesSleep(x) & Fluffy(x))))", "score": 0}
{"id": "folio_validation_277", "prediction": "all x.(Man(x) -> (Kind(x) | Evil(x)))", "score": 0}
{"id": "folio_validation_278", "prediction": "-exists x.(UglyPerson(x) & Beautiful(x))", "score": 0}
{"id": "folio_validation_279", "prediction": "all x.(EvilPerson(x) -> Ugly(x))", "score": 0}
{"id": "folio_validation_280", "prediction": "all x.(Gentleman(x) -> Beautiful(x))", "score": 0}
{"id": "folio_validation_281", "prediction": "all x.(CEO(x) -> Gentlemen(x))", "score": 0}
{"id": "folio_validation_282", "prediction": "all x.(Harry(x) -> Gentleman(x))", "score": 0}
{"id": "folio_validation_283", "prediction": "Harry is CEO.", "score": -1}
{"id": "folio_validation_284", "prediction": "all x.(Harry(x) -> (Kind(x) | CEO(x)))", "score": 0}
{"id": "folio_validation_285", "prediction": "all x.((Harry(x) & (Evil(x) | Ugly(x))) | (-Evil(x) & Ugly(x))))", "score": -1}
{"id": "folio_validation_286", "prediction": "all x.((Twin(x) | Triplet(x)) -> SpendsLittleTimeHangingOutWithAndPlayingWithSiblings(x))", "score": 0}
{"id": "folio_validation_287", "prediction": "all x.((Sibling(x) & SameAge(x)) -> (Twins(x) | Triplets(x)))", "score": 0}
{"id": "folio_validation_288", "prediction": "all x.((People(x) & ComplainsOfEnormousSiblings(x)) -> SiblingsSameAge(x))", "score": 0}
{"id": "folio_validation_289", "prediction": "all x.((Person(x) & -LivesAtHomeRegularly(x)) -> -DevelopsStrongBondsWithFamily(x))", "score": 0}
{"id": "folio_validation_290", "prediction": "all x.((People(x) & SpendsLotOfTimeHangingOutWithSiblings(x) & PlayingWithSiblings(x)) -> OftenDoesNotLiveAtHomeRegularly(x))", "score": 0}
{"id": "folio_validation_291", "prediction": "all x.(Luke(x) -> ((Twin(x) | Triplet(x)) & StrongBonds(x)) | (-Twin(x) & Triplet(x)) & -StrongBonds(x))))", "score": -1}
{"id": "folio_validation_292", "prediction": "all x.(Luke(x) -> (HangsOut(x) & PlaysWithSiblings(x)))", "score": 0}
{"id": "folio_validation_293", "prediction": "Luke complains often about annoyingSiblings.", "score": -1}
{"id": "folio_validation_294", "prediction": "(-(Twin(Luke) | Triplet(Luke))) & -(Luke(Luke) & -(Luke(Luke) & -(Luke) & -(Luke)) | Luke(Luke)))))", "score": -1}
{"id": "folio_validation_295", "prediction": "all x.((GRETest(x) & Costs(x,US) & -Costs(x,US)) -> Costs(x,US))", "score": 0}
{"id": "folio_validation_296", "prediction": "all x.((GREApplication(x) & EconomicHardness(x)) -> ProvidesFinancialAid(x))", "score": 0}
{"id": "folio_validation_297", "prediction": "all x.((EconomicHardship(x) & (LittleMoney(x) | FewResources(x))) -> Difficulty(x))", "score": 0}
{"id": "folio_validation_298", "prediction": "all x.((Tom(x) & SingleParentFamily(x)) -> LivesIn(x,Tom))", "score": 0}
{"id": "folio_validation_299", "prediction": "all x.(Dad(x) -> OutOfWorkForMoreThanYear(x))", "score": 0}
{"id": "folio_validation_300", "prediction": "all x y.((Tom(x) & ETS(y)) -> CanApplicationForFinancialAid(x,y))", "score": 0}
{"id": "folio_validation_301", "prediction": "all x.((GRETest(x) & CostBelowUS300(x)) -> CostsAboveUS300(x))", "score": 0}
{"id": "folio_validation_302", "prediction": "-exists x.(FinancialAid(x) & AvailableForGRETest(x))", "score": 0}
{"id": "folio_validation_303", "prediction": "all x.(SpreadsLotsOfFoodOnClothing(x) -> (-StylishSpacesConsistently(x) & EnjoyCleaning(x)))", "score": 0}
{"id": "folio_validation_304", "prediction": "all x.((Foodie(x) & GoesOutFrequently(x) & FindsNewFoodRestaurants(x)) -> SpillsLotsOfFoodOnClothing(x))", "score": 0}
{"id": "folio_validation_305", "prediction": "all x.((People(x) & GrownUpAsOnlyChildren(x) & NoSiblings(x)) -> (TidySpacesConsistently(x) & EnjoyCleaning(x)))", "score": 0}
{"id": "folio_validation_306", "prediction": "all x.((Person(x) & Parents(x) & VeryBusyWithRegularJobs(x)) -> GrownUpAsOnlyChildrenWithNoSiblings(x))", "score": 0}
{"id": "folio_validation_307", "prediction": "all x.((Household(x) & HighNetIncome(x)) -> (HasParents(x) & BusyWithRegularJobs(x)))", "score": 0}
{"id": "folio_validation_308", "prediction": "all x.(Peter(x) -> ((Person(x) & SpillsLotOfFoodOnClothing(x) & GrownUpAsOnlyChild(x) & -GrownUpAsOnlyChild(x))))", "score": 0}
{"id": "folio_validation_309", "prediction": "all x.((Peter(x) & Space(y)) -> (TidiesConsistently(x,y) & EnjoysCleaning(x,y)))", "score": 0}
{"id": "folio_validation_310", "prediction": "all x.((Foodie(x) & GoesOutFrequently(x) & FindsNewFoodRestaurants(x)) | HighNetIncome(x))", "score": 0}
{"id": "folio_validation_311", "prediction": "all x y.((Foodie(x) & Foodie(y) & GoesOutFrequently(x) & FindsNewFoodRestaurants(x) & HighNetIncome(x)) | (Foodie(y) & -FindsNewFoodRestaurants(y) & HighNetIncome(y))))", "score": -1}
{"id": "folio_validation_312", "prediction": "all x.(FfirTree(x) -> Evergreen(x))", "score": 0}
{"id": "folio_validation_313", "prediction": "exists x.(ObjectOfWorship(x) & FirTree(x))", "score": 0}
{"id": "folio_validation_314", "prediction": "exists x.(Evergreen(x) & -ObjectOfWorship(x))", "score": 0}
{"id": "folio_validation_315", "prediction": "all x.(PicurisMountain(x) -> (MountainRange(x) & (NewMexico(x) | Texas(x))))", "score": 0}
{"id": "folio_validation_316", "prediction": "Juan de Onate visited PicurisMountains.", "score": -1}
{"id": "folio_validation_317", "prediction": "(HardingPegmatiteMine(x) & LocatedInPicurisMountains(x))", "score": 0}
{"id": "folio_validation_318", "prediction": "-exists x.(MountainRange(x) & -HasMines(x) & Donated(x))", "score": 0}
{"id": "folio_validation_319", "prediction": "Juan de Onate visited a mountain range in New Mexico.", "score": -1}
{"id": "folio_validation_320", "prediction": "all x y.((JuanDeOnate(x) & MountainRange(y)) -> Visited(x,y))", "score": 0}
{"id": "folio_validation_321", "prediction": "all x.(HardingPegmatiteMine(x) -> -MountainRangeInNewMexico(x))", "score": 0}
{"id": "folio_validation_322", "prediction": "all x y.((Man(x) & Man(y) & Taller(x,y)) -> BlocksShooting(x,y))", "score": 0}
{"id": "folio_validation_323", "prediction": "all x.(Michael(x) -> TallerThanEveryone(x))", "score": 0}
{"id": "folio_validation_324", "prediction": "all x y z.((Person(x) & Person(y) & Person(z) & TallerThan(x,y) & TallerThan(y,z)) -> TallerThan(x,z))", "score": 0}
{"id": "folio_validation_325", "prediction": "all x.((Man(x) & TallerThan(x,Michael)) -> Peter(x))", "score": 0}
{"id": "folio_validation_326", "prediction": "all x y.((Person(x) & Person(y) & -JumpWhenShooting(y)) -> CanBlockShooting(x,y))", "score": 0}
{"id": "folio_validation_327", "prediction": "Michael -CanBlockWindysShooting(Michael)", "score": -1}
{"id": "folio_validation_328", "prediction": "all x.((Shooter(x) & CanJumpWhenShooting(x)) -> GreatShooter(x))", "score": 0}
{"id": "folio_validation_329", "prediction": "all x y.((Peter(x) & Man(y)) -> ShorterThan(x,y))", "score": 0}
{"id": "folio_validation_330", "prediction": "(GreatShooter(Windy) & GreatShotter(Windy))", "score": 0}
{"id": "folio_validation_331", "prediction": "all x.((Peter(x) & Windy(x)) -> BlocksShooting(x))", "score": 0}
{"id": "folio_validation_332", "prediction": "BarutinCove is named after the BulgarianStandard(Barutin)", "score": -1}
{"id": "folio_validation_333", "prediction": "BarutinCove is onSnowIsland(BarutinCove,SouthwestCoast)", "score": -1}
{"id": "folio_validation_334", "prediction": "(SouthShetlandIsland(SnowIsland) & GreenwichIsland(SnowIsland) & DeceptionIsland(SnowIsland))", "score": 0}
{"id": "folio_validation_335", "prediction": "all x.(SouthShetlandIslands(x) -> PartOfAntarctica(x))", "score": 0}
{"id": "folio_validation_336", "prediction": "all x.((LocatedIn(x,B) & LocatedIn(x,C)) -> LocatedIn(x,C))", "score": 0}
{"id": "folio_validation_337", "prediction": "all x.(Barutin(x) -> NamedAfterAllIslands(x))", "score": 0}
{"id": "folio_validation_338", "prediction": "exists x.(Cove(x) & InAntarctica(x) & NamedAfterPlace(x))", "score": 0}
{"id": "folio_validation_339", "prediction": "Barutin is not located in Antarctica.", "score": -1}
{"id": "folio_validation_340", "prediction": "exists x.(Affection(x) & Love(x))", "score": 0}
{"id": "folio_validation_341", "prediction": "exists x.(Love(x) & Positive(x))", "score": 0}
{"id": "folio_validation_342", "prediction": "exists x.(Affection(x) & Positive(x))", "score": 0}
{"id": "folio_validation_343", "prediction": "all x.((TransportsMultiplePassengers(x) & -Empty(x)) -> CanTransportMultiplePassengers(x))", "score": 0}
{"id": "folio_validation_344", "prediction": "all x.(Airline(x) -> TransportsMultiplePassengers(x))", "score": 0}
{"id": "folio_validation_345", "prediction": "all x.(Plane(x) -> Empty(x))", "score": 0}
{"id": "folio_validation_346", "prediction": "all x.(Boeing707(x) -> Plane(x))", "score": 0}
{"id": "folio_validation_347", "prediction": "all x.((Greyhound(x) & -Airline(x)) -> -GreyhoundPlane(x))", "score": 0}
{"id": "folio_validation_348", "prediction": "all x.(Greyhound(x) -> Airline(x))", "score": 0}
{"id": "folio_validation_349", "prediction": "all x.(Greyhound(x) -> Boeing707.", "score": -1}
{"id": "folio_validation_350", "prediction": "all x.(Greyhound(x) -> -Boeing707.(x))", "score": -1}
{"id": "folio_validation_351", "prediction": "all x.(Mammal(x) -> Animal(x))", "score": 0}
{"id": "folio_validation_352", "prediction": "all x.(Monkey(x) -> Mammal(x))", "score": 0}
{"id": "folio_validation_353", "prediction": "all x.(Animal(x) -> (Monkey(x) | Bird(x)))", "score": 0}
{"id": "folio_validation_354", "prediction": "all x.(Bird(x) -> Fly(x))", "score": 0}
{"id": "folio_validation_355", "prediction": "all x.(Animal(x) -> Breathes(x))", "score": 0}
{"id": "folio_validation_356", "prediction": "all x.((CanFly(x) & HasWings(x)) -> CanFly(x))", "score": 0}
{"id": "folio_validation_357", "prediction": "all x.((Rock(x) & -Fly(x) & -Bird(x)) -> (-Flies(x) & -Breathes(x)))", "score": 0}
{"id": "folio_validation_358", "prediction": "Rock is monkey.", "score": -1}
{"id": "folio_validation_359", "prediction": "all x.(Rock(x) -> HasWings(x))", "score": 0}
{"id": "folio_validation_360", "prediction": "(-HasWings(Rock))", "score": 0}
{"id": "folio_validation_361", "prediction": "all x.((Person(x) & HasWedding(x)) -> HasAtLeastOneChild(x))", "score": 0}
{"id": "folio_validation_362", "prediction": "all x.((Person(x) & TravelsToParis(x)) -> HasWedding(x))", "score": 0}
{"id": "folio_validation_363", "prediction": "all x.((Wedding(x) & OccursInJuly(x)) -> TravelsToParisForHoneymoon(x))", "score": 0}
{"id": "folio_validation_364", "prediction": "exists x.(Wedding(x) & InJuly(x) & WellAttended(x))", "score": 0}
{"id": "folio_validation_365", "prediction": "all x.((John(x) & HasAtLeastOneChild(x)) -> (-TravelsToParis(x) & -HasWedding(x)))", "score": 0}
{"id": "folio_validation_366", "prediction": "all x.((John(x) & WellAttendedWedding(x)) -> (WeddingInJuly(x) | (WeddingInJuly(x) & -WeddingInJuly(x)))))", "score": -1}
{"id": "folio_validation_367", "prediction": "all x.((John(x) & Wedding(x)) -> WellAttended(x))", "score": 0}
{"id": "folio_validation_368", "prediction": "(-WellAttendedWedding(John))", "score": 0}
{"id": "folio_validation_369", "prediction": "(HasChild(John) & HasChild(John))", "score": 0}
{"id": "folio_validation_370", "prediction": "(-(WellAttendedWedding(John) & -TravelToParis(John)) -> -WellAttendedWedding(John))", "score": 0}
{"id": "folio_validation_371", "prediction": "exists x.(Mammal(x) & HasTeeth(x))", "score": 0}
{"id": "folio_validation_372", "prediction": "all x.(Plasticus(x) -> -HasTeeth(x))", "score": 0}
{"id": "folio_validation_373", "prediction": "all x.(Pluto(x) -> Mammal(x))", "score": 0}
{"id": "folio_validation_374", "prediction": "all x.(Human(x) -> HasTeeth(x))", "score": 0}
{"id": "folio_validation_375", "prediction": "all x.(Plasticus(x) -> (Mammal(x) & -HasTeeth(x)))", "score": 0}
{"id": "folio_validation_376", "prediction": "all x.(Pluto(x) -> Reptile(x))", "score": 0}
{"id": "folio_validation_377", "prediction": "all x.(Plunger(x) -> Suck(x))", "score": 0}
{"id": "folio_validation_378", "prediction": "all x.(Vacuum(x) -> Suck(x))", "score": 0}
{"id": "folio_validation_379", "prediction": "all x.(Vampire(x) -> Suck(x))", "score": 0}
{"id": "folio_validation_380", "prediction": "all x.(Space(x) -> Vacuum(x))", "score": 0}
{"id": "folio_validation_381", "prediction": "all x.(Duster(x) -> (HouseholdAppliance(x) & -Sucks(x)))", "score": 0}
{"id": "folio_validation_382", "prediction": "all x.(Space(x) -> Suckles(x))", "score": 0}
{"id": "folio_validation_383", "prediction": "all x.(Space(x) -> Vampiric(x))", "score": 0}
{"id": "folio_validation_384", "prediction": "all x.((HausletAppliance(x) & HouseholdAppliance(x)) -> Sucks(x))", "score": 0}
{"id": "folio_validation_385", "prediction": "all x.(MachineLearningAlgorithm(x) -> (SupervisedLearning(x) | UnsupervisedLearning(x) | ReinforcementLearning(x)))", "score": 0}
{"id": "folio_validation_386", "prediction": "all x.(UnsupervisedLearning(x) -> -RequiresLabeledData(x))", "score": 0}
{"id": "folio_validation_387", "prediction": "all x.((StateOfTheArtTextSummarizationModel(x) & BART(x)) -> SummarizationModel(x))", "score": 0}
{"id": "folio_validation_388", "prediction": "all x.((TextSummarizationModel(x) & MachineLearningAlgorithms(x)) -> TrainedWith(x))", "score": 0}
{"id": "folio_validation_389", "prediction": "all x.((ReinforcementLearning(x) & -TrainStateOfTheArtTextSummarizationModel(x)) -> -Trains(x,StateOfTheArtTextSummarizationModel))", "score": 0}
{"id": "folio_validation_390", "prediction": "all x.((MachineLearningAlgorithm(x) & TrainingTextSummarizationModel(x)) -> RequiresLabeledData(x))", "score": 0}
{"id": "folio_validation_391", "prediction": "all x.(SupervisedLearning(x) -> TrainsStateOfTheArtTextSummarizationModel(x))", "score": 0}
{"id": "folio_validation_392", "prediction": "all x.(UnsupervisedLearning(x) -> TrainsStateOfTheArtTextSummarizationModel(x))", "score": 0}
{"id": "folio_validation_393", "prediction": "all x.((CartoonCharacter(x) & Funny(x)) -> Popular(x))", "score": 0}
{"id": "folio_validation_394", "prediction": "all x.((CartoonCharacter(x) & Ugly(x)) -> -Popular(x))", "score": 0}
{"id": "folio_validation_395", "prediction": "all x.((CartoonCharacter(x) & LovedByChildren(x)) -> Funny(x))", "score": 0}
{"id": "folio_validation_396", "prediction": "all x.((CartoonCharacter(x) & Simpsons(x)) -> LovedByChildren(x))", "score": 0}
{"id": "folio_validation_397", "prediction": "all x.((CartoonCharacter(x) & Yellow(x)) -> Simpsons(x))", "score": 0}
{"id": "folio_validation_398", "prediction": "((Ben(Ben) | Funny(Ben)))", "score": 0}
{"id": "folio_validation_399", "prediction": "all x.(Ben(x) -> LovedByChildren(x))", "score": 0}
{"id": "folio_validation_400", "prediction": "all x.(Ben(x) -> (Ugly(x) | Yellow(x)))", "score": 0}
{"id": "folio_validation_401", "prediction": "all x.(Ben(x) -> ((Yellow(x) & Ugly(x)) | -Yellow(x) & Ugly(x))))", "score": -1}
{"id": "folio_validation_402", "prediction": "all x.(BreedingBack(x) -> (ArtificialSelection(x) & DeliberateSelectiveBreeding(x) & DomesticAnimals(x)))", "score": 0}
{"id": "folio_validation_403", "prediction": "all x.(Heck(x) -> (BredBack(x,20) & RemindsAurochs(x)))", "score": 0}
{"id": "folio_validation_404", "prediction": "[BG] HeckCattle(x) -> Animal(x))", "score": -1}
{"id": "folio_validation_405", "prediction": "all x.(Auroch(x) -> Animal(x))", "score": 0}
{"id": "folio_validation_406", "prediction": "exists x.(Animal(x) & BredBack(x) & RemindsExtinctAnimals(x))", "score": 0}
{"id": "folio_validation_407", "prediction": "exists x.(HeckCattle(x) & ArtificiallySelected(x))", "score": 0}
{"id": "folio_validation_408", "prediction": "all x.(Auroch(x) -> Extinct(x))", "score": 0}
{"id": "folio_validation_409", "prediction": "all x.(Student(x) -> Human(x))", "score": 0}
{"id": "folio_validation_410", "prediction": "all x.(Studies(x) -> Student(x))", "score": 0}
{"id": "folio_validation_411", "prediction": "all x.(Person(x) -> (Studies(x) | Teaches(x)))", "score": 0}
{"id": "folio_validation_412", "prediction": "-exists x.(YoungPerson(x) & Teaches(x))", "score": 0}
{"id": "folio_validation_413", "prediction": "(-(Jerry(Jerry) | Manager(Jerry)))", "score": 0}
{"id": "folio_validation_414", "prediction": "all x.(Rose(x) -> (Young(x) | Student(x)))", "score": 0}
{"id": "folio_validation_415", "prediction": "Jerry is young.", "score": -1}
{"id": "folio_validation_416", "prediction": "Jerry is notyoung(Jerry)", "score": -1}
{"id": "folio_validation_417", "prediction": "all x.(Rose(x) -> (Human(x) | Manager(x)))", "score": 0}
{"id": "folio_validation_418", "prediction": "(all x.(Rose(x) -> Human(x)) | (Jerry(x) -> Manager(x))))", "score": -1}
{"id": "folio_validation_419", "prediction": "(-(Rose(Rose) & Jerry(Rose)) -> Student(Rose)) & Jerry(Rose) -> Human(Rose))", "score": -1}
{"id": "folio_validation_420", "prediction": "all x.(NewVesselPress(x) -> (PublishingHouse(x) & SpecializesInTranslatingFrenchLiterature(x) & SpecializesInTranslatingEnglish(x)))", "score": 0}
{"id": "folio_validation_421", "prediction": "all x.(PublishedBook(x) -> NewVesselPress(x))", "score": 0}
{"id": "folio_validation_422", "prediction": "NeapolitanChronicles(n) & PublishedByNewVesselPress(n) & PublishedByNewVesselPress(n))", "score": -1}
{"id": "folio_validation_423", "prediction": "all x.(NeapolitanChronicles(x) -> TranslatedFromItalian(x))", "score": 0}
{"id": "folio_validation_424", "prediction": "all x.(PalaceOfFlies(x) -> PublishedByNewVesselPress(x))", "score": 0}
{"id": "folio_validation_425", "prediction": "NeapolitanChronicles(x) & EnglishBook(x))", "score": -1}
{"id": "folio_validation_426", "prediction": "Harry Potter was published by NewVesselPress.", "score": -1}
{"id": "folio_validation_427", "prediction": "(TranslatedFromItalian(PalaceOfFlies))", "score": 0}
{"id": "folio_validation_428", "prediction": "all x.((Person(x) & LargeDesktopMonitor(x)) -> (WorkRegularly(x) & WorkOftenAtHome(x)))", "score": 0}
{"id": "folio_validation_429", "prediction": "all x.((Person(x) & FullyStockedHomeOffice(x) & ImpressiveHomeOffice(x)) -> OwnsLargeDesktopMonitor(x))", "score": 0}
{"id": "folio_validation_430", "prediction": "all x.((WorksRegularly(x) & OftenAtHome(x)) -> SpendsFreeTimeTidyingAndOrganizingSpaces(x))", "score": 0}
{"id": "folio_validation_431", "prediction": "all x.((WorksRegularly(x) & OftenAtHome(x)) -> VisitsOfficeSupplyStoreRegularly(x))", "score": 0}
{"id": "folio_validation_432", "prediction": "all x.((Person(x) & SpendsFreeTimeTidyingAndOrganizingSpaces(x)) -> -(GoesToBedLast(x) & WakesUpAfterMorning(x)))", "score": 0}
{"id": "folio_validation_433", "prediction": "(all x.(Remy(x) -> (GoesToBedLast(x) & WakesUpAfterMorning(x) & SpendsFreeTimeTidyingAndOrganizingSpaces(x))) | (-GoesToBedLast(x) & WakesUpAfterMorning(x) & -SpoilsFreeTimeTidyingAndOrganizingSpaces(x))))", "score": -1}
{"id": "folio_validation_434", "prediction": "Remy visits the office supply store regularly.", "score": -1}
{"id": "folio_validation_435", "prediction": "(FullyStayedAndImpressiveHomeOffice(Remy) & VisitsOfficeSupplyStore(Remy))", "score": 0}
{"id": "folio_validation_436", "prediction": "all x.((Remy(x) & (GoesToBedLast(x) | WakesUpAfterMorning(x)) | VisitsOfficeSupplyStore(x))) -> (-SpoilsFreeTimeTidyingAndOrganizingSpaces(x) & -FullyStockedAndImpressiveHomeOffice(x)))", "score": -1}
{"id": "folio_validation_437", "prediction": "all x.(Human(x) -> Mortal(x))", "score": 0}
{"id": "folio_validation_438", "prediction": "all x.(Greek(x) -> Human(x))", "score": 0}
{"id": "folio_validation_439", "prediction": "exists x.(Greek(x) & Mortal(x))", "score": 0}
{"id": "folio_validation_440", "prediction": "all x.((Student(x) & WorksInLibrary(x)) -> -ComputerScienceDepartment(x))", "score": 0}
{"id": "folio_validation_441", "prediction": "all x.((Student(x) & PartTimeJob(x) & OfferedByUniversity(x)) -> WorksInLibrary(x))", "score": 0}
{"id": "folio_validation_442", "prediction": "all x.(TakesDatabaseCourse(x) -> ComputerScienceDepartment(x))", "score": 0}
{"id": "folio_validation_443", "prediction": "all x.((Student(x) & InstructedByProfessorDavid(x)) -> TakesDatabaseCourse(x))", "score": 0}
{"id": "folio_validation_444", "prediction": "all x.((Student(x) & WorkingInLab(x)) -> InstructedByProfessorDavid(x))", "score": 0}
{"id": "folio_validation_445", "prediction": "all x.((Student(x) & WorkingInLab(x)) -> James(x))", "score": 0}
{"id": "folio_validation_446", "prediction": "-(PartTimeJob(Jack) & -WorksInLab(Jack))", "score": 0}
{"id": "folio_validation_447", "prediction": "all x.((Job(x) & PartTime(x)) -> OfferedByUniversity(x))", "score": 0}
{"id": "folio_validation_448", "prediction": "all x.((James(x) & -PartTimeJobOfferedByUniversity(x)) -> -PartTimeJobOfferedByUniversity(x))", "score": 0}
{"id": "folio_validation_449", "prediction": "all x.(James(x) -> (TakesDatabaseCourse(x) | HasPartTimeJob(x)))", "score": 0}
{"id": "folio_validation_450", "prediction": "(TakesDatabaseCourse(Jack))", "score": 0}
{"id": "folio_validation_451", "prediction": "all x.((George(x) & LikesMusic(x)) -> WantsToCompose(x))", "score": 0}
{"id": "folio_validation_452", "prediction": "all x.((George(x) & AccessToProgram(x)) -> CanCompose(x))", "score": 0}
{"id": "folio_validation_453", "prediction": "all x.((George(x) & CanCompose(x) & WantsToCompose(x)) -> WillCompose(x))", "score": 0}
{"id": "folio_validation_454", "prediction": "all x.((George(x) & LikesMusic(x) & AccessToProgram(x)) -> Compose(x))", "score": 0}
{"id": "folio_validation_455", "prediction": "all x.((George(x) & -Compose(x)) -> -Compose(x))", "score": 0}
{"id": "folio_validation_456", "prediction": "all x.(Hawk(x) -> -Lands(x))", "score": 1}
{"id": "folio_validation_457", "prediction": "exists x.(Bird(x) & Hawk(x))", "score": 1}
{"id": "folio_validation_458", "prediction": "all x.(Bird(x) -> Lands(x))", "score": 1}
{"id": "folio_validation_459", "prediction": "all x.((Monday(x) & 8pm(x)) -> RosesGiftedOnTV(x))", "score": 0}
{"id": "folio_validation_460", "prediction": "all x.(Rose(x) -> Bachelor(x))", "score": 0}
{"id": "folio_validation_461", "prediction": "all x.(Bachelor(x) -> (PortraysLivesOfRealPeople(x)))", "score": 0}
{"id": "folio_validation_462", "prediction": "all x.((Show(x) & RealPeople(x)) -> RealityTVShow(x))", "score": 0}
{"id": "folio_validation_463", "prediction": "-RealityTVShow(BreakingBad)", "score": 0}
{"id": "folio_validation_464", "prediction": "BreakingBad(x) -> (OnMondayAt8pm(x)))", "score": -1}
{"id": "folio_validation_465", "prediction": "all x.((TelevisionShow(x) & RosesGivenOut(x,Monday,8pm)) -> BreakingBad(x))", "score": 0}
{"id": "folio_validation_466", "prediction": "all x.((Rose(x) & BreakingBad(x)) -> MondayAt8pm(x))", "score": 0}
{"id": "folio_validation_467", "prediction": "Heinrich Scmidt (nastGermanPolitician)", "score": -1}
{"id": "folio_validation_468", "prediction": "Heeinrich Scmidt (*) & MemberOfPrussianStateParliament(x) & MemberOfNaziRangestag(x))", "score": -1}
{"id": "folio_validation_469", "prediction": "Heinrich Schmidt (German(hereinafter) | Russian(hereinafter))", "score": -1}
{"id": "folio_validation_470", "prediction": "exists x.(NaziGermanPolitician(x) & PartOfPrussianStateParliament(x) & PartOfNaziRangestag(x))", "score": 0}
{"id": "folio_validation_471", "prediction": "-exists x.(Politican(x) & PartOfNaziRangestag(x))", "score": 0}
{"id": "folio_validation_472", "prediction": "all x.((Disease(x) & Lethal(x)) -> LowSurvivalRate(x))", "score": 0}
{"id": "folio_validation_473", "prediction": "all x.(SevereCancer(x) -> LethalDisease(x))", "score": 0}
{"id": "folio_validation_474", "prediction": "all x.(BileDuitCancer(x) -> SevereCancer(x))", "score": 0}
{"id": "folio_validation_475", "prediction": "all x.(Cholangiocarcinoma(x) -> BileDuctCancer(x))", "score": 0}
{"id": "folio_validation_476", "prediction": "all x.((MildFlu(x) & -LowSurvivalRate(x)) -> -LowSurvivalRate(x))", "score": 0}
{"id": "folio_validation_477", "prediction": "all x.((ColoredCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x))", "score": 0}
{"id": "folio_validation_478", "prediction": "all x.(ColoredCancer(x) -> (SevereCancer(x) & SevereCancer(x) & ColorectalCancer(x)))", "score": 0}
{"id": "folio_validation_479", "prediction": "all x.((ColonialCancer(x) & (BileDuctCancer(x) | Cholangiocarcinoma(x))) -> (BileDuctCancer(x) & MildFlu(x)))", "score": 0}
{"id": "folio_validation_480", "prediction": "all x.((ColonialCancer(x) & -MildFlu(x) & Cholangiocarcinoma(x)) -> (BileDuctCancer(x) | Cholangiocarcinoma(x)))", "score": 0}
{"id": "folio_validation_481", "prediction": "all x.((Person(x) & EatsSaladsRegularly(x)) -> VeryConsciousAboutHealthAndEatingHabits(x))", "score": 0}
{"id": "folio_validation_482", "prediction": "all x.((Person(x) & GrownUpInHealthConsciousChildrenHomes(x)) -> EatsSaladsRegularly(x))", "score": 0}
{"id": "folio_validation_483", "prediction": "all x.((Person(x) & FulfillsNutritionalDailyIntakes(x)) -> GrownUpInHealthConsciousChildrenHomes(x))", "score": 0}
{"id": "folio_validation_484", "prediction": "all x.((Person(x) & GoodRelationshipsWithParents(x)) -> FulfillsNutritionalDailyIntakes(x))", "score": 0}
{"id": "folio_validation_485", "prediction": "all x.((Person(x) & GoodRelationshipsWithParents(x)) -> -EatsSaladsRegularly(x))", "score": 0}
{"id": "folio_validation_486", "prediction": "all x.((Person(x) & VisitsGym(x) & AtLeastOneDay(x)) -> FulfillsDailyNutritionalIntakes(x))", "score": 0}
{"id": "folio_validation_487", "prediction": "Taylor eatsSaladsRegularly.", "score": -1}
{"id": "folio_validation_488", "prediction": "all x.(Taylor(x) -> VisitsGym(x))", "score": 0}
{"id": "folio_validation_489", "prediction": "(-(GrowthConsciousChildrenHome(Taylor) & -VisitsGym(Taylor)) | (-GrowsUpIn(Taylor,Health) & VisitsGym(Taylor,AtLeastOneDay))))", "score": -1}
{"id": "folio_validation_490", "prediction": "[BG] The OlympicGames(Olympics) is a sportingEvent(Olympics)", "score": -1}
{"id": "folio_validation_491", "prediction": "all x.(OlympicGames(x) -> InTokyo(x))", "score": 0}
{"id": "folio_validation_492", "prediction": "all x y.((UnitedStates(x) & Tokyo(y)) -> WonMostMedals(x,y))", "score": 0}
{"id": "folio_validation_493", "prediction": "all x.(WorldChampionship(x) -> SportingEvent(x))", "score": 0}
{"id": "folio_validation_494", "prediction": "all x.(OlympicGames(x) -> -Tokyo(x))", "score": 0}
{"id": "folio_validation_495", "prediction": "all x y.((UnitedStates(x) & OlympicGames(y)) -> WonMostMedals(x,y))", "score": 0}
{"id": "folio_validation_496", "prediction": "all x.(Horse(x) -> HasHooves(x))", "score": 1}
{"id": "folio_validation_497", "prediction": "-exists x.(Human(x) & HasHooves(x))", "score": 1}
{"id": "folio_validation_498", "prediction": "exists x.(Human(x) & Horse(x))", "score": 1}
{"id": "folio_validation_499", "prediction": "all x.(FliesTo(x,LGA) -> Susan(x))", "score": 0}
{"id": "folio_validation_500", "prediction": "all x.((Airport(x) & Airport(x)) -> -(Departure(x) & Arrival(x))))", "score": -1}
{"id": "folio_validation_501", "prediction": "John flies from LGA airport.", "score": -1}
{"id": "folio_validation_502", "prediction": "all x.(FliesFrom(x,LGAAirport) -> SusanFlies(x))", "score": 0}
{"id": "folio_validation_503", "prediction": "John flies to LGA airport.", "score": -1}
{"id": "folio_validation_504", "prediction": "all x.(NiceToAnimals(x) -> MeanToAnimals(x))", "score": 0}
{"id": "folio_validation_505", "prediction": "exists x.(Gumpy(x) & MeanToAnimals(x))", "score": 0}
{"id": "folio_validation_506", "prediction": "all x.(AnimalLover(x) -> NiceToAnimals(x))", "score": 0}
{"id": "folio_validation_507", "prediction": "all x.(OwnsPet(x) -> LoveAnimals(x))", "score": 0}
{"id": "folio_validation_508", "prediction": "(PetOwner(Tom) & PetOwner(Tom))", "score": 0}
{"id": "folio_validation_509", "prediction": "all x.((Tom(x) & Grumpy(x)) -> Person(x))", "score": 0}
{"id": "folio_validation_510", "prediction": "all x.(Tom(x) -> (-grumpy(x) & MeanToAnimals(x)))", "score": 0}
{"id": "folio_validation_511", "prediction": "all x.((Tam(x) & -GumpyPerson(x) & MeanToAnimals(x)) -> (-GumpyPerson(x) & -AnimalLover(x)))", "score": 0}
{"id": "folio_validation_512", "prediction": "all x.(Podcast(x) -> -Novel(x))", "score": 0}
{"id": "folio_validation_513", "prediction": "all x.((BirthInAmericanCity(x) & BornInAmericanCity(x)) -> American(x))", "score": 0}
{"id": "folio_validation_514", "prediction": "all x.((Book(x) & Novel(x) & WrittenBy(x,Person)) -> NovelWriter(x))", "score": 0}
{"id": "folio_validation_515", "prediction": "Dani Shapiro (AmericanWriter)", "score": -1}
{"id": "folio_validation_516", "prediction": "(FamilyHistory(Family) & WrittenByDaniShakero(Family))", "score": 0}
{"id": "folio_validation_517", "prediction": "all x.(FamilyHistory(x) -> WrittenIn2003(x))", "score": 0}
{"id": "folio_validation_518", "prediction": "Dani Shapiro created a podcast called FamilySecrets.", "score": -1}
{"id": "folio_validation_519", "prediction": "[BG] Boston is an AmericanCity.", "score": -1}
{"id": "folio_validation_520", "prediction": "Dani Shapiro is a novel writer.", "score": -1}
{"id": "folio_validation_521", "prediction": "all x.(FamilySecrets(x) -> Novel(x))", "score": 0}
{"id": "folio_validation_522", "prediction": "Dani Shapiro was born in Boston.", "score": -1}
{"id": "folio_validation_523", "prediction": "exists x.(BasketballPlayer(x) & -American(x))", "score": 0}
{"id": "folio_validation_524", "prediction": "all x.(BasketballPlayer(x) -> Tall(x))", "score": 0}
{"id": "folio_validation_525", "prediction": "all x.(Tall(x) -> WearLargeShoes(x))", "score": 0}
{"id": "folio_validation_526", "prediction": "all x.((WornsLargeShoes(x) & WearsLargeSizedClothes(x)) -> WearsLargeSizedClothes(x))", "score": 0}
{"id": "folio_validation_527", "prediction": "Yuri -WearsLargeSizeClothes(y))", "score": -1}
{"id": "folio_validation_528", "prediction": "Yuri is American(y)", "score": -1}
{"id": "folio_validation_529", "prediction": "Yuri n'est pas AmericanBasketballPlayer(y)", "score": -1}
{"id": "folio_validation_530", "prediction": "Yuri is a basketball player from America.", "score": -1}
{"id": "folio_validation_531", "prediction": "all x.((Yuri(x) & -WearLargeShoes(x)) -> AmericanBasketballPlayer(x))", "score": 0}
{"id": "folio_validation_532", "prediction": "all x.((Yuri(x) & -AmericanBasketballPlayer(x)) -> BasketballPlayer(x))", "score": 0}
{"id": "folio_validation_533", "prediction": "all x.(Event(x) -> (Happy(x) | Sad(x)))", "score": 0}
{"id": "folio_validation_534", "prediction": "all x.(Event(x) -> Happy(x))", "score": 0}
{"id": "folio_validation_535", "prediction": "all x.(Event(x) -> Sad(x))", "score": 0}
{"id": "folio_validation_536", "prediction": "(Winner(x,92) & DuMaurierClassic(x)) -> Steinhauer(x))", "score": -1}
{"id": "folio_validation_537", "prediction": "Steinhauer a participate in du MaurierClassic(92)", "score": -1}
{"id": "folio_validation_538", "prediction": "all x y.((Person(x) & SixWayTie(x) & Leaderboard(y)) -> (Belgium(x) & Person(x,y)))", "score": 0}
{"id": "folio_validation_539", "prediction": "Descampe is from Belgium and onLeaderboardOfDuMaurierClassic(Descampe,92))", "score": -1}
{"id": "folio_validation_540", "prediction": "all x.((Person(x) & Leaderboard(x,92)) -> ParticipatedIn(x,92))", "score": 0}
{"id": "folio_validation_541", "prediction": "-(Steinhauer(Steinhauer) & Du MaurierClassic(Boston, 1992))", "score": -1}
{"id": "folio_validation_542", "prediction": "Descampe is in the SixWayTie(Descampe,92) & LeaderboardOfDuMaurierClassic(Descampe,92))", "score": -1}
{"id": "folio_validation_543", "prediction": "all x.(Barks(x) -> JaneDoesNotLike(x))", "score": 0}
{"id": "folio_validation_544", "prediction": "all x.(Dog(x) -> Barks(x))", "score": 0}
{"id": "folio_validation_545", "prediction": "all x.(Jumps(x) -> Likes(x,Jane))", "score": 0}
{"id": "folio_validation_546", "prediction": "all x.(HasLegs(x) -> Jumps(x))", "score": 0}
{"id": "folio_validation_547", "prediction": "all x.(Terricolous(x) -> HasLegs(x))", "score": 0}
{"id": "folio_validation_548", "prediction": "all x.((KiKi(x) & -Jumps(x) & -HasLegs(x)) -> (Terricolous(x) | HasLegs(x)))", "score": 0}
{"id": "folio_validation_549", "prediction": "KiKi is Terricolous.", "score": -1}
{"id": "folio_validation_550", "prediction": "all x.(KiKi(x) -> (Barks(x) & Dog(x)))", "score": 0}
{"id": "folio_validation_551", "prediction": "(-Barks(KiKi) & -Dog(KiKi))", "score": 0}
{"id": "folio_validation_552", "prediction": "Ailton Silva (bornIn95) & CommonlyKnownAsAilton(x))", "score": -1}
{"id": "folio_validation_553", "prediction": "Ailton is a football player who was loaned out to Braga.", "score": -1}
{"id": "folio_validation_554", "prediction": "AiltonSilva(a) & BrazillianFootballer(b) & PlaysForNautico(a))", "score": -1}
{"id": "folio_validation_555", "prediction": "Nautico (FootballClub) & Braga(FootballClub))", "score": -1}
{"id": "folio_validation_556", "prediction": "(Fluminense(f) & FootballClub(f))", "score": 0}
{"id": "folio_validation_557", "prediction": "-exists x.(PlayingForNautico(x) & Brazilian(x))", "score": 0}
{"id": "folio_validation_558", "prediction": "all x.(AiltonSilva(x) -> -PlaysForFootballClub(x))", "score": 0}
{"id": "folio_validation_559", "prediction": "Ailton n'admittedly(a) (FootballClub(a) & -LoanedOut(a)))", "score": -1}
{"id": "folio_validation_560", "prediction": "AiltonSilva played for Fluminense.", "score": -1}
{"id": "folio_validation_561", "prediction": "all x y.((AiltonSilva(x) & FootballClub(y)) -> LoanedOutTo(x,y))", "score": 0}
