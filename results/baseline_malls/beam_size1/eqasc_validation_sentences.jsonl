{"id": "eqasc_validation_0", "nl": "Climate is generally described in terms of temperature and moisture.", "fol": "", "prediction": ["all x.(Climate(x) -> (TermsOfTemperature(x) & TermsOfMoisture(x)))"]}
{"id": "eqasc_validation_1", "nl": "Fire behavior is driven by local weather conditions such as winds, temperature and moisture.", "fol": "", "prediction": ["all x.(FireBehavior(x) -> (DrivenByLocalWeatherConditions(x) & WindsTemperatureMoisture(x)))"]}
{"id": "eqasc_validation_2", "nl": "Climate is generally described in terms of local weather conditions", "fol": "", "prediction": ["all x.(Climate(x) -> (TermsOfLocalWeatherConditions(x) & LocalWeatherConditions(x)))"]}
{"id": "eqasc_validation_3", "nl": "Instructions Climate Climate varies according to altitude.", "fol": "", "prediction": ["Instructions ClimateClimate(c) & Altitude(c) & Variable(c))"]}
{"id": "eqasc_validation_4", "nl": "temperature and moisture varies by alltitude", "fol": "", "prediction": ["all x.((Temperature(x) & Moisture(x)) -> VariatesByAlltitude(x))"]}
{"id": "eqasc_validation_5", "nl": "Climate change is a global problem.", "fol": "", "prediction": ["all x.(ClimateChange(x) -> GlobalProblem(x))"]}
{"id": "eqasc_validation_6", "nl": "temperature and moisture is changing globally", "fol": "", "prediction": ["all x.((Temperature(x) & Moisture(x)) -> ChangesGlobally(x))"]}
{"id": "eqasc_validation_7", "nl": "Introduction to Climate Introduction Climate is the average weather conditions.", "fol": "", "prediction": ["IntroductionToClimateIntroduction(climate)"]}
{"id": "eqasc_validation_8", "nl": "average weather conditions are generally described in terms of temperature and moisture", "fol": "", "prediction": ["all x.(AverageWeatherConditions(x) -> (TermsOfTemperature(x) & TermsOfMoisture(x)))"]}
{"id": "eqasc_validation_9", "nl": "Clouds are made of moisture and the moisture is from the water evaporating.", "fol": "", "prediction": ["all x.(Cloud(x) -> (MadeOfMoisture(x) & WaterEvaporating(x)))"]}
{"id": "eqasc_validation_10", "nl": "Climate is usually described in terms of temperature and water in the air.", "fol": "", "prediction": ["all x.(Climate(x) -> (TermsOfTemperature(x) & TermsOfWater(x)))"]}
{"id": "eqasc_validation_11", "nl": "Climate refers to weather over a long period of time.", "fol": "", "prediction": ["all x.(Climate(x) -> Weather(x))"]}
{"id": "eqasc_validation_12", "nl": "weather is generally described in terms of temperature and moisture", "fol": "", "prediction": ["all x.(Weather(x) -> (TermsOfTemperature(x) & TermsOfMoisture(x)))"]}
{"id": "eqasc_validation_13", "nl": "Humidity is moisture in the air.", "fol": "", "prediction": ["all x.(Humidity(x) -> MoistureInAir(x))"]}
{"id": "eqasc_validation_14", "nl": "Climate is generally described in terms of temperature and humidity.", "fol": "", "prediction": ["all x.(Climate(x) -> (TermsOfTemperature(x) & TermsOfHumidity(x)))"]}
{"id": "eqasc_validation_15", "nl": "Humidity is a measure of moisture content of air.", "fol": "", "prediction": ["all x.(Humidity(x) -> MeasuresMoistureContentOfAir(x))"]}
{"id": "eqasc_validation_16", "nl": "a vehicle is used for transportation", "fol": "", "prediction": ["all x y.((Vehicle(x) & Transportation(y)) -> UsedFor(x,y))"]}
{"id": "eqasc_validation_17", "nl": "Transportation moves people and goods from one place to another.", "fol": "", "prediction": ["all x y z.((Transportation(x) & Person(y) & Good(z)) -> MovesFromPlaceToPlace(x,y,z))"]}
{"id": "eqasc_validation_18", "nl": "Vehicles are used to move people and goods.", "fol": "", "prediction": ["all x.(Vehicle(x) -> (MovesPeople(x) & MovesGoods(x)))"]}
{"id": "eqasc_validation_19", "nl": "Passenger vehicles are the primary mode of transportation.", "fol": "", "prediction": ["all x.(PassengerVehicle(x) -> PrimaryModeOfTransportation(x))"]}
{"id": "eqasc_validation_20", "nl": "passenger cars are used for transportation", "fol": "", "prediction": ["all x.(PassengerCar(x) -> UsedForTransportation(x))"]}
{"id": "eqasc_validation_21", "nl": "Trailers and boats are counted as a private vehicles.", "fol": "", "prediction": ["all x.((Trailer(x) | Boat(x)) -> PrivateVehicle(x))"]}
{"id": "eqasc_validation_22", "nl": "Trailers and boats are used for transportation.", "fol": "", "prediction": ["all x.((Trailer(x) | Boat(x)) -> UsedForTransportation(x))"]}
{"id": "eqasc_validation_23", "nl": "Cars and busses are both examples of vehicles.", "fol": "", "prediction": ["all x.((Car(x) | Bus(x)) -> Vehicle(x))"]}
{"id": "eqasc_validation_24", "nl": "Cars and busses are used for transportation", "fol": "", "prediction": ["all x y.((Car(x) & Bus(y)) -> (UsedForTransportation(x,y) & UsedForTransportation(y)))"]}
{"id": "eqasc_validation_25", "nl": "Boats are used for transportation. ", "fol": "", "prediction": ["all x.(Boat(x) -> UsedForTransportation(x))"]}
{"id": "eqasc_validation_26", "nl": "Most bigger cities require efficient and adequate public transport systems.", "fol": "", "prediction": ["all x.((City(x) & Bigger(x)) -> RequiresEfficientPublicTransport(x))"]}
{"id": "eqasc_validation_27", "nl": "most bigger cities require vehicles", "fol": "", "prediction": ["all x.((City(x) & Larger(x)) -> RequiresVehicles(x))"]}
{"id": "eqasc_validation_28", "nl": "All traffic vehicles are Air Planes.", "fol": "", "prediction": ["all x.(TrafficVehicle(x) -> AirPlane(x))"]}
{"id": "eqasc_validation_29", "nl": "a plane is used for transportation", "fol": "", "prediction": ["all x y.((Plane(x) & Transportation(y)) -> UsedFor(x,y))"]}
{"id": "eqasc_validation_30", "nl": "Cars are vehicles and trucks are vehicles.", "fol": "", "prediction": ["all x y.((Car(x) & Truck(y)) -> (Vehicle(x) & Vehicle(y)))"]}
{"id": "eqasc_validation_31", "nl": "trucks are used for transportation", "fol": "", "prediction": ["all x.(Truck(x) -> UsedForTransportation(x))"]}
{"id": "eqasc_validation_32", "nl": "A car is used for transportation.", "fol": "", "prediction": ["all x.(Car(x) -> UsedForTransportation(x))"]}
{"id": "eqasc_validation_33", "nl": "Motorcycles are, for the most part, single occupant vehicles.", "fol": "", "prediction": ["all x.(Motorcycle(x) -> SingleOccupantVehicle(x))"]}
{"id": "eqasc_validation_34", "nl": "motorcycles are used for transportation", "fol": "", "prediction": ["all x.(Motorcycle(x) -> UsedForTransportation(x))"]}
{"id": "eqasc_validation_35", "nl": "If in a moving car, pull over and stop as quickly as safety permits, but stay in the vehicle.", "fol": "", "prediction": ["all x.((MovingCar(x) & PullOver(x) & StopAsQuicklyAsSafetyPermits(x) & StayInVehicle(x)) -> SafetyPermits(x))"]}
{"id": "eqasc_validation_36", "nl": "Moving cars are used for transportation", "fol": "", "prediction": ["all x y.((MovingCar(x) & Transportation(y)) -> UsedFor(x,y))"]}
{"id": "eqasc_validation_37", "nl": "Transportation causes most of the air pollution in and around Vancouver.", "fol": "", "prediction": ["all x y.((Transportation(x) & Vancouver(y)) -> CausesAirPollution(x,y))"]}
{"id": "eqasc_validation_38", "nl": "a vehicle causes  air pollution", "fol": "", "prediction": ["all x.((Vehicle(x) & CausesAirPollution(x)) -> CausesAirPollution(x))"]}
{"id": "eqasc_validation_39", "nl": "Collar cells have tiny hairs that trap the particles.", "fol": "", "prediction": ["all x.(CollarCell(x) -> (TinyHairs(x) & TrapsParticles(x)))"]}
{"id": "eqasc_validation_40", "nl": "Collar cells or choanocytes are the work horses.", "fol": "", "prediction": ["all x.(WorkHorse(x) -> (CollarCells(x) | Choanocytes(x)))"]}
{"id": "eqasc_validation_41", "nl": "Choanocytes have tiny hairs that trap the particles.", "fol": "", "prediction": ["all x.(Choanocyte(x) -> (HasTinyHairs(x) & TrapsParticles(x)))"]}
{"id": "eqasc_validation_42", "nl": "Particles A particle is simply a very tiny piece of matter.", "fol": "", "prediction": ["all x.(Particle(x) -> (TinyPieceOfMatter(x) & VeryTinyPieceOfMatter(x)))"]}
{"id": "eqasc_validation_43", "nl": "Collar cells have tiny hairs that trap very tiny pieces of matter", "fol": "", "prediction": ["all x.(CollarCell(x) -> (TinyHairs(x) & TrapsTinyMatter(x)))"]}
{"id": "eqasc_validation_44", "nl": "Some cells have tiny hair-like fibers that are called flagella.", "fol": "", "prediction": ["exists x.(Cell(x) & TinyHairLikeFibers(x) & Flagella(x))"]}
{"id": "eqasc_validation_45", "nl": "Collar cells have flagella that trap the particles.", "fol": "", "prediction": ["all x.(CollarCell(x) -> HasFlagella(x))"]}
{"id": "eqasc_validation_46", "nl": "Collar cells line the interior chambers.", "fol": "", "prediction": ["all x y.((CollarCell(x) & InteriorChamber(y)) -> Lines(x,y))"]}
{"id": "eqasc_validation_47", "nl": "The interior chambers have tiny hairs that trap the particles", "fol": "", "prediction": ["all x y.((InteriorChamber(x) & TinyHairs(y)) -> TrapsParticles(x,y))"]}
{"id": "eqasc_validation_48", "nl": "Collar cells are the work horses of the sponge.", "fol": "", "prediction": ["all x.(CollarCell(x) -> WorkHorseOfSponge(x))"]}
{"id": "eqasc_validation_49", "nl": "sponges have tiny hairs that trap particles", "fol": "", "prediction": ["all x.(Sponge(x) -> (TinyHairs(x) & TrapsParticles(x)))"]}
{"id": "eqasc_validation_50", "nl": "sponges trap particles", "fol": "", "prediction": ["all x.(Sponge(x) -> (TrapsParticles(x) & Particles(x)))"]}
{"id": "eqasc_validation_51", "nl": "Collar cells each have a flagellum.", "fol": "", "prediction": ["all x.(CollarCell(x) -> HasFlagellum(x))"]}
{"id": "eqasc_validation_52", "nl": "flagellum are tiny hairs that trap particles", "fol": "", "prediction": ["all x.(Flagellum(x) -> (TinyHairs(x) & TrapsParticles(x)))"]}
{"id": "eqasc_validation_53", "nl": "the work horses of the sponge have tiny hairs that trap the particles", "fol": "", "prediction": ["all x y.((WorkHorse(x) & Sponge(y)) -> (TinyHairs(x) & TrapsParticles(x,y)))"]}
{"id": "eqasc_validation_54", "nl": "All cnidarians are aquatic.", "fol": "", "prediction": ["all x.(Cnidarian(x) -> Aquatic(x))"]}
{"id": "eqasc_validation_55", "nl": "Cnidarians include jellyfish and anemones.", "fol": "", "prediction": ["all x.(Cnidarian(x) -> (Jerkyfish(x) | Anemones(x)))"]}
{"id": "eqasc_validation_56", "nl": "All jellyfish are aquatic animals", "fol": "", "prediction": ["all x.(Jellyfish(x) -> AquaticAnimal(x))"]}
{"id": "eqasc_validation_57", "nl": "Aquatic creatures live in the water, for example.", "fol": "", "prediction": ["all x.(AquaticCreature(x) -> LivesInWater(x))"]}
{"id": "eqasc_validation_58", "nl": "All cnidarians live in water", "fol": "", "prediction": ["all x.(Cnidarian(x) -> LivesInWater(x))"]}
{"id": "eqasc_validation_59", "nl": "Cnidarian tentacles serve to capture prey.", "fol": "", "prediction": ["all x.(CnidarianTentacle(x) -> CapturesPrey(x))"]}
{"id": "eqasc_validation_60", "nl": "All aquatic tentacles serve to capture prey", "fol": "", "prediction": ["all x.(AquaticTentacle(x) -> CapturesPrey(x))"]}
{"id": "eqasc_validation_61", "nl": "all cnidarians live in the water", "fol": "", "prediction": ["all x.(Cnidarian(x) -> LivesInWater(x))"]}
{"id": "eqasc_validation_62", "nl": "all jellyfish are aquatic", "fol": "", "prediction": ["all x.(Jellyfish(x) -> Aquatic(x))"]}
{"id": "eqasc_validation_63", "nl": "jellyfish are aquatic", "fol": "", "prediction": ["all x.(Jellyfish(x) -> Aquatic(x))"]}
{"id": "eqasc_validation_64", "nl": "anemones are aquatic", "fol": "", "prediction": ["all x.(Anemone(x) -> Aquatic(x))"]}
{"id": "eqasc_validation_65", "nl": "All jellyfish are aquatic.", "fol": "", "prediction": ["all x.(Jellyfish(x) -> Aquatic(x))"]}
{"id": "eqasc_validation_66", "nl": "Jellyfish and anemones are aquatic.", "fol": "", "prediction": ["all x.((Jellyfish(x) | Anemone(x)) -> Aquatic(x))"]}
{"id": "eqasc_validation_67", "nl": "Cnidarians are also called coelenterates.", "fol": "", "prediction": ["all x.(Cnidarian(x) -> Coelenterates(x))"]}
{"id": "eqasc_validation_68", "nl": "coelenterates are aquatic", "fol": "", "prediction": ["all x.(Coelenterate(x) -> Aquatic(x))"]}
{"id": "eqasc_validation_69", "nl": "All coelenterates are aquatic.", "fol": "", "prediction": ["all x.(Coelenterate(x) -> Aquatic(x))"]}
{"id": "eqasc_validation_70", "nl": "Aquatic animals moving through water are also subject to the principles of aerodynamics.", "fol": "", "prediction": ["all x.((AquaticAnimal(x) & MovingThroughWater(x)) -> Aerodynamics(x))"]}
{"id": "eqasc_validation_71", "nl": "All cnidarians move through the water.", "fol": "", "prediction": ["all x.(Cnidarian(x) -> MovesThroughWater(x))"]}
{"id": "eqasc_validation_72", "nl": "Scyphozoans are the next group of Cnidarians, and they are the familiar jellyfish.", "fol": "", "prediction": ["all x.(Scyphozoan(x) -> (NextCnidarian(x) & Jellyfish(x)))"]}
{"id": "eqasc_validation_73", "nl": "Scyphozoans are aquatic organisms.", "fol": "", "prediction": ["all x.(Scyphozoan(x) -> AquaticOrganism(x))"]}
{"id": "eqasc_validation_74", "nl": "Cnidarians have a hydrostatic skeleton.", "fol": "", "prediction": ["all x.(Cnidarian(x) -> HydrostaticSkeleton(x))"]}
{"id": "eqasc_validation_75", "nl": "Some aquatic animals have hydrostatic skeletons.", "fol": "", "prediction": ["exists x.(AquaticAnimal(x) & HydrostaticSkeleton(x))"]}
{"id": "eqasc_validation_76", "nl": "predicting weather requires studying weater", "fol": "", "prediction": ["all x.(PredictingWeather(x) -> RequiresStudyingWeater(x))"]}
{"id": "eqasc_validation_77", "nl": "Meteorologists try to predict the weather.", "fol": "", "prediction": ["all x.(Meteorologist(x) -> PredictsWeather(x))"]}
{"id": "eqasc_validation_78", "nl": "Being a meteorologist requires studying weather.", "fol": "", "prediction": ["all x.(Meteorologist(x) -> RequiresStudyingWeather(x))"]}
{"id": "eqasc_validation_79", "nl": "Meteorologists study the weather.", "fol": "", "prediction": ["all x.(Meteorologist(x) -> StudiesWeather(x))"]}
{"id": "eqasc_validation_80", "nl": "Meteorologists study weather", "fol": "", "prediction": ["all x y z.((Meteorologist(x) & Weather(y) & Weather(z)) -> Studies(x,y,z))"]}
{"id": "eqasc_validation_81", "nl": "Meteorologist Meteorologist A meteorologist is a person who studies or predicts the weather.", "fol": "", "prediction": ["all x.(Meteorologist(x) -> (StudiesWeather(x) | PredictsWeather(x)))"]}
{"id": "eqasc_validation_82", "nl": "meteorology requires studying weather", "fol": "", "prediction": ["all x.(Meteorology(x) -> RequiresStudyingWeather(x))"]}
{"id": "eqasc_validation_83", "nl": "meteorologists require studying weather", "fol": "", "prediction": ["all x y.((Meteorologist(x) & Weather(y)) -> RequiresStudying(x,y))"]}
{"id": "eqasc_validation_84", "nl": "Meteorologists study weather conditions and prepare current and long range weather forecasts.", "fol": "", "prediction": ["all x.(Meteorologist(x) -> (StudiesWeatherConditions(x) & PreparesWeatherPredictions(x)))"]}
{"id": "eqasc_validation_85", "nl": "Predicting weather requires preparing current and long range weather forecasts.", "fol": "", "prediction": ["all x.(PredictingWeather(x) -> (PreparesCurrentAndLongRangeWeatherPredictions(x)))"]}
{"id": "eqasc_validation_86", "nl": "Introduction to the Weather Introduction to Weather Meteorology is the study of weather.", "fol": "", "prediction": ["all x.(IntroductionToWeather(x) -> (StudyOfWeather(x) & Weather(x)))"]}
{"id": "eqasc_validation_87", "nl": "predicting weather requires meteorology", "fol": "", "prediction": ["all x.(PredictingWeather(x) -> RequiresMeteorology(x))"]}
{"id": "eqasc_validation_88", "nl": "Meteorologists are scientists who study the weather.", "fol": "", "prediction": ["all x.(Meteorologist(x) -> (StudiesWeather(x) & StudiesWeather(x)))"]}
{"id": "eqasc_validation_89", "nl": "predicting weather requires meteorologists", "fol": "", "prediction": ["all x y.((Weather(x) & Meteorologist(y)) -> Predicts(y,x))"]}
{"id": "eqasc_validation_90", "nl": "knowledge of the stars can be used to navigate", "fol": "", "prediction": ["all x y.((KnowledgeOfStars(x) & Navigate(y)) -> CanBeUsedToNavigate(x,y))"]}
{"id": "eqasc_validation_91", "nl": "Astronomy is the study of the planets, stars, and universe.", "fol": "", "prediction": ["all x.(Astronomy(x) -> (StudiesPlanets(x) & StudiesStars(x) & StudiesUniverse(x)))"]}
{"id": "eqasc_validation_92", "nl": "Astronomy can be used to navigate", "fol": "", "prediction": ["all x.(Astronomy(x) -> Navigates(x))"]}
{"id": "eqasc_validation_93", "nl": "Maps and Navigation Good maps are essential to travelling, both on and off-road.", "fol": "", "prediction": ["all x.(Map(x) -> (GoodMap(x) & EssentialToTravel(x)))"]}
{"id": "eqasc_validation_94", "nl": "knowledge of stars can replace maps while traveling on or off road", "fol": "", "prediction": ["all x.((KnowledgeOfStars(x) & TravelingOnRoad(x)) -> ReplacesMaps(x))"]}
{"id": "eqasc_validation_95", "nl": "And every star there ever was is in a constellation.", "fol": "", "prediction": ["all x.(Star(x) -> InConstellation(x))"]}
{"id": "eqasc_validation_96", "nl": "knowledge of constellations can be used to navigate", "fol": "", "prediction": ["all x.((KnowledgeOfConstellations(x) & Navigates(x)) -> CanBeUsedToNavigate(x))"]}
{"id": "eqasc_validation_97", "nl": "Explorers have used the North Star for navigational purposes for centuries.", "fol": "", "prediction": ["all x y.((Explorer(x) & NorthStar(y)) -> UsedForNavigation(x,y))"]}
{"id": "eqasc_validation_98", "nl": "You can use the north star for directions if you have the knowledge ", "fol": "", "prediction": ["all x.((NorthStar(x) & Knowledge(x)) -> CanUseForDirections(x))"]}
{"id": "eqasc_validation_99", "nl": "Knowledge of the stars can be used to orient explorers", "fol": "", "prediction": ["all x y.((KnowledgeOfStars(x) & Explorer(y)) -> Orients(x,y))"]}
{"id": "eqasc_validation_100", "nl": "Star Star Generally speaking, the star is a symbol of hope and guidance in the midst of uncertainty.", "fol": "", "prediction": ["all x.(StarStar(x) -> (SymbolOfHope(x) & SymbolOfGuidance(x) & InUncertainty(x)))"]}
{"id": "eqasc_validation_101", "nl": "Uncertainty can be overcome by navigation. ", "fol": "", "prediction": ["all x.(Uncertainty(x) -> CanBeOvercomeByNavigation(x))"]}
{"id": "eqasc_validation_102", "nl": "Navigation is a key element of space travel.", "fol": "", "prediction": ["all x.(Navigation(x) -> SpaceTravelElement(x))"]}
{"id": "eqasc_validation_103", "nl": "Knowledge of the stars can be used to travel.", "fol": "", "prediction": ["all x.(KnowledgeOfStars(x) -> CanBeUsedToTravel(x))"]}
{"id": "eqasc_validation_104", "nl": "Of course, astronomers also study stars.", "fol": "", "prediction": ["all x.(Astronomer(x) -> StudiesStars(x))"]}
{"id": "eqasc_validation_105", "nl": "astronomy can be used to navigate", "fol": "", "prediction": ["all x.(Astronomy(x) -> Navigates(x))"]}
{"id": "eqasc_validation_106", "nl": "friction is used for stopping a vehicle by brakes", "fol": "", "prediction": ["all x y.((Vehicle(x) & Brake(y)) -> StopsBy(x,y))"]}
{"id": "eqasc_validation_107", "nl": "Brakes are also involved when the vehicle is on an incline.", "fol": "", "prediction": ["all x.((Vehicle(x) & OnIncline(x)) -> BrakesInvolved(x))"]}
{"id": "eqasc_validation_108", "nl": "friction is used to stop a vehicle on an incline", "fol": "", "prediction": ["all x y.((Vehicle(x) & Inincline(y)) -> UsedToStopOn(x,y))"]}
{"id": "eqasc_validation_109", "nl": "Fishtailing or severe braking at high speed can cause jackknifing and rollover.", "fol": "", "prediction": ["all x.((Fishtailing(x) | SevereBrakingAtHighSpeed(x)) -> (CausesJackknifing(x) & CausesRollover(x)))"]}
{"id": "eqasc_validation_110", "nl": "Friction can cause jackknifing and rollover in a vehicle.", "fol": "", "prediction": ["all x.(Friction(x) -> (CausesJackknifing(x) & CausesRollover(x)))"]}
{"id": "eqasc_validation_111", "nl": "Brake dust is produced during the friction of braking.", "fol": "", "prediction": ["all x.(BrakeDust(x) -> ProducedDuringFrictionOfBraking(x))"]}
{"id": "eqasc_validation_112", "nl": "Stopping a vehicle produces brake dust.", "fol": "", "prediction": ["all x.((Vehicle(x) & Stops(x)) -> ProducesBrakeDust(x))"]}
{"id": "eqasc_validation_113", "nl": "Brakes are applied to the rear wheels on No. 2 truck.", "fol": "", "prediction": ["all x.((Truck(x) & No.2(x)) -> BrakesApplicationToRearWheels(x))"]}
{"id": "eqasc_validation_114", "nl": "friction is used for stopping trucks", "fol": "", "prediction": ["all x y.((Friction(x) & Truck(y)) -> Stops(x,y))"]}
{"id": "eqasc_validation_115", "nl": "Friction is a Force that opposes motion.", "fol": "", "prediction": ["all x.(Friction(x) -> OpposesMotion(x))"]}
{"id": "eqasc_validation_116", "nl": "A force that opposes motion is used for stopping vehicles by brakes.", "fol": "", "prediction": ["all x.((Force(x) & OpposesMotion(x)) -> UsedForStoppingVehiclesByBrakes(x))"]}
{"id": "eqasc_validation_117", "nl": "Typically the smoother the surface is the less friction.", "fol": "", "prediction": ["all x.(SmootherSurface(x) -> LessFriction(x))"]}
{"id": "eqasc_validation_118", "nl": "Brakes are less effective at stopping vehicles on smooth surfaces", "fol": "", "prediction": ["all x y.((Brake(x) & Vehicle(y)) -> (StopsOnSmoothSurfaces(x,y) & LessEffectiveAtStopsOnSmoothSurfaces(x,y)))"]}
{"id": "eqasc_validation_119", "nl": "friction is used for stopping a car by brakes", "fol": "", "prediction": ["all x y.((Car(x) & Car(y)) -> (UsedForStopping(x,y) & Brakes(x)))"]}
{"id": "eqasc_validation_120", "nl": "Friction produces heat.", "fol": "", "prediction": ["all x.(Friction(x) -> ProducesHeat(x))"]}
{"id": "eqasc_validation_121", "nl": "Stopping a vehicle with brakes will generate heat", "fol": "", "prediction": ["all x y.((Vehicle(x) & Brakes(y) & StopsWith(x,y)) -> GeneratesHeat(x))"]}
{"id": "eqasc_validation_122", "nl": "Trucks and cars are vehicles.", "fol": "", "prediction": ["all x.((Truck(x) | Car(x)) -> Vehicle(x))"]}
{"id": "eqasc_validation_123", "nl": "friction is used for stopping by trucks and cars using brakes", "fol": "", "prediction": ["all x y z.((Friction(x) & Truck(y) & Car(z) & Brakes(y)) -> StopsUsing(x,y,z))"]}
{"id": "eqasc_validation_124", "nl": "Flowers form on the dominant sporophyte plant.", "fol": "", "prediction": ["all x y.((Flower(x) & SporophytePlant(y)) -> FormsOn(x,y))"]}
{"id": "eqasc_validation_125", "nl": "Sporophyte possesses stoma.", "fol": "", "prediction": ["all x.(Spotrophyte(x) -> PossessesStoma(x))"]}
{"id": "eqasc_validation_126", "nl": "Flowers form on a plant possessing stoma", "fol": "", "prediction": ["all x y z.((Flower(x) & Plant(y) & Plant(z) & PossessesStoma(y,z)) -> FormsOn(x,y,z))"]}
{"id": "eqasc_validation_127", "nl": "Sporophytes appear early in the spring, as soon as the snow melts.", "fol": "", "prediction": ["all x.(Sporophyte(x) -> (AppearsEarlyInSpring(x) & As SoonAsSnowMelts(x)))"]}
{"id": "eqasc_validation_128", "nl": "Flowers form after the snow melts", "fol": "", "prediction": ["all x y.((Flower(x) & Snow(y)) -> Melts(x,y))"]}
{"id": "eqasc_validation_129", "nl": "Flowers form on the plant with stoma", "fol": "", "prediction": ["all x y.((Flower(x) & Plant(y)) -> FormsOn(x,y))"]}
{"id": "eqasc_validation_130", "nl": "Angiosperm sporophyte is dominant.", "fol": "", "prediction": ["all x.(AngiospermSporophyte(x) -> Dominant(x))"]}
{"id": "eqasc_validation_131", "nl": "Flowers form on angiosperms.", "fol": "", "prediction": ["all x.(Flower(x) -> FormsOnAngiosperm(x))"]}
{"id": "eqasc_validation_132", "nl": "flowers form on angiosperms", "fol": "", "prediction": ["all x y.((Flower(x) & Angiosperm(y)) -> FormsOn(x,y))"]}
{"id": "eqasc_validation_133", "nl": "Skin color is another polygenic trait.", "fol": "", "prediction": ["all x.(SkinColor(x) -> PolygenicTrait(x))"]}
{"id": "eqasc_validation_134", "nl": "Melanin is the skin pigment that gives the skin a tan color.", "fol": "", "prediction": ["all x.(Melanin(x) -> GivesTanColor(x))"]}
{"id": "eqasc_validation_135", "nl": "Melanin amount is a polygenic trait", "fol": "", "prediction": ["all x.(MelaninAmount(x) -> PolygenicTrait(x))"]}
{"id": "eqasc_validation_136", "nl": "Human skin and hair color are polygenic traits.", "fol": "", "prediction": ["all x.((HumanSkin(x) & HairColor(x)) -> PolygenicTreatment(x))"]}
{"id": "eqasc_validation_137", "nl": "hair color is polygenic", "fol": "", "prediction": ["all x.(HairColor(x) -> Polygenic(x))"]}
{"id": "eqasc_validation_138", "nl": "Skin color is determined by the melanin pigment in the skin cells.", "fol": "", "prediction": ["all x y.((SkinColor(x) & MelaninPigment(y)) -> DeterminedBy(x,y))"]}
{"id": "eqasc_validation_139", "nl": "Melanin pigment is determined by a polygenic trait.", "fol": "", "prediction": ["all x.(MelaninPigment(x) -> DeterminedByPolygenicTrait(x))"]}
{"id": "eqasc_validation_140", "nl": "Polygenic inheritance Polygenic traits are controlled by an unknown number of genes.", "fol": "", "prediction": ["all x.(PolygenicInheritance(x) -> (ControlledByUnknownGenes(x) & PolygenicTreatment(x)))"]}
{"id": "eqasc_validation_141", "nl": "Skin color is controlled by an unknown number of genes.", "fol": "", "prediction": ["all x.(SkinColor(x) -> ControlledByUnknownGenes(x))"]}
{"id": "eqasc_validation_142", "nl": "Most dental variations are polygenic, that is controlled by several genes.", "fol": "", "prediction": ["all x.(DentalVariation(x) -> (Polygenic(x) & ControlledByGenes(x)))"]}
{"id": "eqasc_validation_143", "nl": "Skin color is a trait controlled by several genes.", "fol": "", "prediction": ["all x.(SkinColor(x) -> (ControlledByGenes(x) & Genes(x)))"]}
{"id": "eqasc_validation_144", "nl": "Tourette syndrome a polygenic disorder .", "fol": "", "prediction": ["all x.(TouretteSyndrom(x) -> PolygenicDisorder(x))"]}
{"id": "eqasc_validation_145", "nl": "tourette syndrome is a trait", "fol": "", "prediction": ["all x.(TouretteSyndrom(x) -> Trait(x))"]}
{"id": "eqasc_validation_146", "nl": "Phenotypic expression of polygenic traits varies over a wide range.", "fol": "", "prediction": ["all x.((PhenotypicExpression(x) & PolygenicTreatment(x)) -> VariatesOverWideRange(x))"]}
{"id": "eqasc_validation_147", "nl": "Skin color is a phenotypic expression.", "fol": "", "prediction": ["all x.(SkinColor(x) -> PhenotypicExpression(x))"]}
{"id": "eqasc_validation_148", "nl": "Polygenic traits are controled by two or more genes.", "fol": "", "prediction": ["all x.(PolygenicTreatment(x) -> (ControledByGenes(x,2) | ControledByGenes(x,3)))"]}
{"id": "eqasc_validation_149", "nl": "skin color is controlled by two or more genes", "fol": "", "prediction": ["all x.(SkinColor(x) -> (ControlledByGenes(x,2) | ControlledByGenes(x,3)))"]}
{"id": "eqasc_validation_150", "nl": "Rather, such complex characteristics are polygenic, i.e., they are influenced by multiple genes.", "fol": "", "prediction": ["all x.((ComplexCharacteristics(x) & Polygenic(x)) -> InfluencedByMultipleGenes(x))"]}
{"id": "eqasc_validation_151", "nl": "Skin color is influenced by multiple genes.", "fol": "", "prediction": ["all x.(SkinColor(x) -> InfluencedByGenes(x))"]}
{"id": "eqasc_validation_152", "nl": "Pigment cells are what give color or tint to the skin.", "fol": "", "prediction": ["all x.(PigmentCell(x) -> (GivesColor(x) | GivesTongue(x)))"]}
{"id": "eqasc_validation_153", "nl": "Pigment is another polygenic trait.", "fol": "", "prediction": ["all x.(Pigment(x) -> PolygenicTrait(x))"]}
{"id": "eqasc_validation_154", "nl": "Color depends on melanin content in skin.", "fol": "", "prediction": ["all x.(Color(x) -> DependsOnMelaninContent(x))"]}
{"id": "eqasc_validation_155", "nl": "melanin content is a polygenic trait", "fol": "", "prediction": ["all x.(MelaninContent(x) -> PolygenicTrait(x))"]}
{"id": "eqasc_validation_156", "nl": "Phenotypic expression of skin color varies over a wide range", "fol": "", "prediction": ["all x.((SkinColor(x) & PhenotypicExpression(x)) -> VariatesOverWideRange(x))"]}
{"id": "eqasc_validation_157", "nl": "Reptile parents provide little if any care to their young.", "fol": "", "prediction": ["all x.(ReptileParent(x) -> ProvidesLittleCareToYoung(x))"]}
{"id": "eqasc_validation_158", "nl": "Crocodilian mothers provide the most parental care compared to any other reptiles.", "fol": "", "prediction": ["all x y.((CrocodilianMother(x) & Reptile(y)) -> ProvidesMostParentalCare(x,y))"]}
{"id": "eqasc_validation_159", "nl": "Crocodilian mothers are the most attentive reptile parents.", "fol": "", "prediction": ["all x.((Mother(x) & Crocodilian(x)) -> AttentiveReptileParent(x))"]}
{"id": "eqasc_validation_160", "nl": "Iguanas are good reptiles for experienced reptile caretakers.", "fol": "", "prediction": ["all x.(Iguana(x) -> (GoodReptile(x) & ExperiencedCaregivers(x)))"]}
{"id": "eqasc_validation_161", "nl": "iguana parents provide little care to their young", "fol": "", "prediction": ["all x y.((IguanaParent(x) & Young(y)) -> ProvidesLittleCare(x,y))"]}
{"id": "eqasc_validation_162", "nl": "After spawning, they abandon their eggs and provide no parental care.", "fol": "", "prediction": ["all x.((Sparrowing(x) & AbandonEggs(x) & ProvideNoParentalCare(x)) -> ParentalCare(x))"]}
{"id": "eqasc_validation_163", "nl": "Reptile parents abandon their eggs", "fol": "", "prediction": ["all x y.((ReptileParent(x) & Egg(y)) -> Abandons(x,y))"]}
{"id": "eqasc_validation_164", "nl": "Alligators and crocodiles are the largest living reptiles.", "fol": "", "prediction": ["all x.((Alligator(x) | Crocodile(x)) -> LargestLivingReptile(x))"]}
{"id": "eqasc_validation_165", "nl": "Alligator and crocodile parents provide little care to their young", "fol": "", "prediction": ["all x y.((Alligator(x) | Crocodile(y)) & Young(y)) -> ProvidesLittleCare(x,y))"]}
{"id": "eqasc_validation_166", "nl": "All lizards are reptiles.", "fol": "", "prediction": ["all x.(Lizard(x) -> Reptile(x))"]}
{"id": "eqasc_validation_167", "nl": "lizard parents provide little if any care to their young", "fol": "", "prediction": ["all x y.((LizardParent(x) & Young(y)) -> ProvidesLittleCare(x,y))"]}
{"id": "eqasc_validation_168", "nl": "Crocodilian mothers provide care to their young", "fol": "", "prediction": ["all x y.((Mother(x) & Crocodilian(y)) -> ProvidesCareToYoung(x,y))"]}
{"id": "eqasc_validation_169", "nl": "Geckos are, in fact, reptiles.", "fol": "", "prediction": ["all x.(Geckos(x) -> Reptile(x))"]}
{"id": "eqasc_validation_170", "nl": "gecko parents provide little if any care to their young", "fol": "", "prediction": ["all x y.((GeckoParent(x) & Young(y)) -> ProvidesLittleCare(x,y))"]}
{"id": "eqasc_validation_171", "nl": "All reptiles are cold-blooded.", "fol": "", "prediction": ["all x.(Reptile(x) -> ColdBlooded(x))"]}
{"id": "eqasc_validation_172", "nl": "cold-blooded parents provide little if any care to their young.", "fol": "", "prediction": ["all x.(ColdBloodedParent(x) -> ProvidesLittleCareToYoung(x))"]}
{"id": "eqasc_validation_173", "nl": "Ground tissue makes up most of the interior of a plant.", "fol": "", "prediction": ["all x y.((GroundTissue(x) & Plant(y)) -> MakesUpInterior(x,y))"]}
{"id": "eqasc_validation_174", "nl": "Oaks are the most commonly attacked plants.", "fol": "", "prediction": ["all x.(Oak(x) -> MostCommonlyAttackedPlant(x))"]}
{"id": "eqasc_validation_175", "nl": "Ground tissue makes up most of the interior of an oak", "fol": "", "prediction": ["all x y.((GroundTissue(x) & Oak(y)) -> MakesUpInterior(x,y))"]}
{"id": "eqasc_validation_176", "nl": "Vascular tissue and the roots involved can draw water into the plant from the ground.", "fol": "", "prediction": ["all x y.((VascularTissue(x) & Roots(y)) -> DrawsWaterIntoPlantFromGround(x,y))"]}
{"id": "eqasc_validation_177", "nl": "Vascular tissue and roots make up the interior of a plant.", "fol": "", "prediction": ["all x y.((VascularTissue(x) & Roots(y)) -> MakesUpInteriorOfPlant(x,y))"]}
{"id": "eqasc_validation_178", "nl": "Ferns are one type of seedless plant.", "fol": "", "prediction": ["all x.(Fern(x) -> SeedlessPlant(x))"]}
{"id": "eqasc_validation_179", "nl": "ground tissue makes up most of the interior of ferns", "fol": "", "prediction": ["all x y.((GroundTissue(x) & Fern(y)) -> MakesUpInterior(x,y))"]}
{"id": "eqasc_validation_180", "nl": "Plants hold nutrients in tissue.", "fol": "", "prediction": ["all x.(Plant(x) -> HoldsNutrientsInTissue(x))"]}
{"id": "eqasc_validation_181", "nl": "nutrients are held in tissue", "fol": "", "prediction": ["all x y.((Nutrient(x) & Tissue(y)) -> HeldIn(x,y))"]}
{"id": "eqasc_validation_182", "nl": "when a gas in an open container evaporates , that gas spreads out into the air", "fol": "", "prediction": ["all x y z.((Gas(x) & OpenContainer(y) & Gas(z) & Evaporates(x,y)) -> SpreadsOutIntoAir(z,y))"]}
{"id": "eqasc_validation_183", "nl": "Fumes during the evaporation present a danger.", "fol": "", "prediction": ["all x.((Fume(x) & Evaporation(x)) -> PresentsDanger(x))"]}
{"id": "eqasc_validation_184", "nl": "When a gas in an open container spreads out, fumes present a danger", "fol": "", "prediction": ["all x y.((Gas(x) & OpenContainer(y) & SpreadsOut(x,y)) -> FumesPresentDanger(x))"]}
{"id": "eqasc_validation_185", "nl": "Gases as well as vapours can contaminate the workplace air.", "fol": "", "prediction": ["all x.((Gases(x) & Vapours(x)) -> CanContaminateWorkplaceAir(x))"]}
{"id": "eqasc_validation_186", "nl": "When dangerous gas from an open container evaporates, it can contaminate a workplace.", "fol": "", "prediction": ["all x y.((DangerousGas(x) & OpenContainer(y) & Evaporates(x,y)) -> CanContaminateWorkplace(x))"]}
{"id": "eqasc_validation_187", "nl": "Gas is usually oxygen.", "fol": "", "prediction": ["all x.(Gas(x) -> Oxygen(x))"]}
{"id": "eqasc_validation_188", "nl": "when oxygen in an open container evaporates , oxygen spreads out into the air", "fol": "", "prediction": ["all x y z.((Oxygen(x) & OpenContainer(y) & Evaporates(x,y)) -> (OxygenSpreadsOutIntoAir(x)))"]}
{"id": "eqasc_validation_189", "nl": "Evaporation is when a liquid turns into a gas.", "fol": "", "prediction": ["all x.(Evaporation(x) -> (Liquid(x) & TurnsIntoGas(x)))"]}
{"id": "eqasc_validation_190", "nl": "When a liquid turns into a gas in an open container, it spreads out into the air.", "fol": "", "prediction": ["all x y.((Liquid(x) & OpenContainer(y) & TurnsIntoGas(x,y)) -> SpreadsOutIntoAir(x))"]}
{"id": "eqasc_validation_191", "nl": "Similarly, hydrogen is an explosive gas.", "fol": "", "prediction": ["all x.(Hydrogen(x) -> ExplosiveGas(x))"]}
{"id": "eqasc_validation_192", "nl": "when hydrogen evaporates from an open container, it spreads out into the air", "fol": "", "prediction": ["all x y.((HydrogenEvaporates(x) & OpenContainer(y)) -> SpreadsOutIntoAir(x,y))"]}
{"id": "eqasc_validation_193", "nl": "Water vapor is a gas in the air.", "fol": "", "prediction": ["all x.(WaterVapor(x) -> GasInAir(x))"]}
{"id": "eqasc_validation_194", "nl": "when water vapor in an open container evaporates , water vapor spreads out into the air", "fol": "", "prediction": ["all x y z.((WaterVapor(x) & OpenContainer(y) & OpenContainer(z) & Evaporates(x,y)) -> SpreadsOutIntoAir(x,z))"]}
{"id": "eqasc_validation_195", "nl": "Kids lunch boxes are marvellous containers.", "fol": "", "prediction": ["all x.(KidsLunchBox(x) -> MarvellousContainer(x))"]}
{"id": "eqasc_validation_196", "nl": "If you place gas in an open box it will evaporate and spread out into the air.", "fol": "", "prediction": ["all x.((GasInOpenBox(x) & PlacesInOpenBox(x)) -> (Evaporates(x) & SpreadsOutIntoAir(x)))"]}
{"id": "eqasc_validation_197", "nl": "Deadly carbon monoxide gas from the generator s exhaust can spread throughout enclosed spaces.", "fol": "", "prediction": ["all x y.((Generator(x) & GeneratorExhaust(y)) -> DeadlyCarbonMonoxideGas(x,y))"]}
{"id": "eqasc_validation_198", "nl": "carbon monoxide gas from a generator's exhaust has been evaporated", "fol": "", "prediction": ["all x y.((Generator(x) & GeneratorExhaust(y)) -> Evaporated(x,y))"]}
{"id": "eqasc_validation_199", "nl": "Bone is less flexible than cartilage but stronger.", "fol": "", "prediction": ["all x.(Bone(x) -> (LessFlexible(x) & Stronger(x)))"]}
{"id": "eqasc_validation_200", "nl": "Sharks have a cartilage skeleton.", "fol": "", "prediction": ["all x.(Shark(x) -> HasCartillageSkeleton(x))"]}
{"id": "eqasc_validation_201", "nl": "regular skeletons are less flexible than shark skeletons but stronger.", "fol": "", "prediction": ["all x.(RegularSkeleton(x) -> (LessFlexible(x) & Stronger(x)))"]}
{"id": "eqasc_validation_202", "nl": "People's ears and bones are made of cartilage.", "fol": "", "prediction": ["all x.((Ears(x) & Bones(x)) -> MadeOfCartilization(x))"]}
{"id": "eqasc_validation_203", "nl": "ears made of cartilage", "fol": "", "prediction": ["all x.(Ears(x) -> MadeOfCartilagin(x))"]}
{"id": "eqasc_validation_204", "nl": "Most fish have bony skeletons, but sharks have skeletons made of cartilage .", "fol": "", "prediction": ["all x y.((Fish(x) & Shark(y)) -> (HasBonySkeleton(x) & HasSkeleton(y) & MadeOfCartillage(y)))"]}
{"id": "eqasc_validation_205", "nl": "most fish have less flexible but stronger skeletons compared to sharks", "fol": "", "prediction": ["all x y.((Fish(x) & Shark(y)) -> (LessFlexibleSkeletons(x) & StrongerSkeletons(x)))"]}
{"id": "eqasc_validation_206", "nl": "Articular cartilage is the cartilage that covers the bone and the joint areas.", "fol": "", "prediction": ["all x.(ArticularCartilagin(x) -> (Cartilagin(x) & CoversBoneAndJoinAreas(x)))"]}
{"id": "eqasc_validation_207", "nl": "bone is  less flexible but stronger than the material that covers it", "fol": "", "prediction": ["all x y.((Bone(x) & Material(y) & Covers(x,y)) -> (LessFlexible(x) & Stronger(x,y)))"]}
{"id": "eqasc_validation_208", "nl": "Tissues include bone and cartilage, bone marrow and corneas.", "fol": "", "prediction": ["all x.(Tissue(x) -> (Bone(x) & Carbohydrate(x) & BoneMarrow(x) & Corneas(x)))"]}
{"id": "eqasc_validation_209", "nl": "Some bodily tissues are flexible, while others are strong.", "fol": "", "prediction": ["exists x.(BodylyTissue(x) & Flexible(x) & Strong(x))"]}
{"id": "eqasc_validation_210", "nl": "Cartilage is more flexible and lighter in weight than bone.", "fol": "", "prediction": ["all x.(Cartilage(x) -> (MoreFlexible(x) & LighterInWeight(x)))"]}
{"id": "eqasc_validation_211", "nl": "Bone is stronger and more rigid than cartilage", "fol": "", "prediction": ["all x y.((Bone(x) & Carbolage(y)) -> (Stronger(x,y) & MoreRigid(x,y)))"]}
{"id": "eqasc_validation_212", "nl": "bone skeletons are less flexible than shark skeletons but stronger", "fol": "", "prediction": ["all x y.((BoneSkeleton(x) & SharkSkeleton(y)) -> (LessFlexible(x,y) & Stronger(x,y)))"]}
{"id": "eqasc_validation_213", "nl": "Cartilage is strong, flexible, and lightweight.", "fol": "", "prediction": ["all x.(Cartilage(x) -> (Strong(x) & Flexible(x) & Lightweight(x)))"]}
{"id": "eqasc_validation_214", "nl": "Bone is less lightweight than cartilage but stronger.", "fol": "", "prediction": ["all x.(Bone(x) -> (LessLightweight(x) & Stronger(x)))"]}
{"id": "eqasc_validation_215", "nl": "Grossly, cartilage is a semi-translucent tissue, firm, but more flexible than bone.", "fol": "", "prediction": ["all x.(Cartilage(x) -> (SemiTranslucentTissue(x) & Firm(x) & MoreFlexibleThanBone(x)))"]}
{"id": "eqasc_validation_216", "nl": "bone is less flexible than a semi-translucent tissue", "fol": "", "prediction": ["all x y.((Bone(x) & SemiTranslucentTissue(y)) -> LessFlexibleThan(x,y))"]}
{"id": "eqasc_validation_217", "nl": "bad weather decreases visibility while driving", "fol": "", "prediction": ["all x.((BadWeather(x) & BadWeather(x)) -> DecreasesVisibility(x))"]}
{"id": "eqasc_validation_218", "nl": "More visibility means safe operation.", "fol": "", "prediction": ["all x.(MoreVisibility(x) -> SafeOperation(x))"]}
{"id": "eqasc_validation_219", "nl": "Bad weather decreases safe operation while driving", "fol": "", "prediction": ["all x.((BadWeather(x) & SafeOperation(x) & Driving(x)) -> Decreases(x))"]}
{"id": "eqasc_validation_220", "nl": "Good visibility is essential for safe driving.", "fol": "", "prediction": ["all x.(GoodVisibility(x) -> SafeDriving(x))"]}
{"id": "eqasc_validation_221", "nl": "Bad weather causes unsafe driving conditions. ", "fol": "", "prediction": ["all x.(BadWeather(x) -> UnsafeDrivingConditions(x))"]}
{"id": "eqasc_validation_222", "nl": "Another dangerous weather phenomena that thunderstorms produce is hail.", "fol": "", "prediction": ["all x.((Thunderstorm(x) & Hail(x)) -> DangerousWeatherPhenomenon(x))"]}
{"id": "eqasc_validation_223", "nl": "hail decreases visibility while driving", "fol": "", "prediction": ["all x.(Hail(x) -> DecreasesVisibility(x))"]}
{"id": "eqasc_validation_224", "nl": "While driving to the Small Boat Harbor tournament site, the fog had taken visibility to near zero.", "fol": "", "prediction": ["all x y.((Fog(x) & SmallBoatHarborTournamentSite(y)) -> VisibilityNearZero(x,y))"]}
{"id": "eqasc_validation_225", "nl": "Bad weather takes visibility to near zero.", "fol": "", "prediction": ["all x.(BadWeather(x) -> TakesVisibilityToNearZero(x))"]}
{"id": "eqasc_validation_226", "nl": "Secondary accidents are a major problem under driving conditions of reduced visibility.", "fol": "", "prediction": ["all x.((SecondaryAccident(x) & DrivingConditionsReducedVisibility(x)) -> MajorProblem(x))"]}
{"id": "eqasc_validation_227", "nl": "Bad weather increases the risk of car accidents.", "fol": "", "prediction": ["all x.(BadWeather(x) -> IncreasesRiskOfCarAccidents(x))"]}
{"id": "eqasc_validation_228", "nl": "Collisions are more likely when visibility is poor.", "fol": "", "prediction": ["all x.((Collisions(x) & PoorVisibility(x)) -> MoreLikely(x))"]}
{"id": "eqasc_validation_229", "nl": "Bad weather makes collisions more likely while driving.", "fol": "", "prediction": ["all x.((BadWeather(x) & Driving(y)) -> MoreLikelyCollisions(x,y))"]}
{"id": "eqasc_validation_230", "nl": "For example, lack of visibility is a major cause of many accidents.", "fol": "", "prediction": ["all x.((LackOfVisibility(x) & ManyAccidents(x)) -> MajorCause(x))"]}
{"id": "eqasc_validation_231", "nl": "bad weather causes car accidents", "fol": "", "prediction": ["all x.(BadWeather(x) -> CausesCarAccidents(x))"]}
{"id": "eqasc_validation_232", "nl": "bad weather impairs safe driving", "fol": "", "prediction": ["all x.((BadWeather(x) & ImpairsSafeDriving(x)) -> ImpairsSafeDriving(x))"]}
{"id": "eqasc_validation_233", "nl": "RNA is a small molecule that can squeeze through pores in the nuclear membrane.", "fol": "", "prediction": ["all x.(RNA(x) -> (SmallMolecule(x) & CanSqueezeThroughPossies(x) & InNuclearMembrane(x)))"]}
{"id": "eqasc_validation_234", "nl": "Like proteins, DNA and RNA are polymers of various small chemically related molecules.", "fol": "", "prediction": ["all x.((DNA(x) | RNA(x)) -> Polymer(x))"]}
{"id": "eqasc_validation_235", "nl": "polymers of various small chemically related molecules can squeeze through pores in the nuclear membrane", "fol": "", "prediction": ["all x y.((Polymer(x) & SmallChemicallyRelatedMolecule(y) & SmallChemicallyRelatedMolecule(x)) -> SqueezesThroughPorousPenetrationsInNuclearMembrane(x,y))"]}
{"id": "eqasc_validation_236", "nl": "Cells with a nuclear membrane are called eukaryotic .", "fol": "", "prediction": ["all x.((Cell(x) & NuclearMembrane(x)) -> Eukaryotic(x))"]}
{"id": "eqasc_validation_237", "nl": "RNA is a small molecule that can squeeze through pores in eukaryotic cells ", "fol": "", "prediction": ["all x.(RNA(x) -> (SmallMolecule(x) & CanSqueezeThroughPpores(x) & InEukaryoticCells(x)))"]}
{"id": "eqasc_validation_238", "nl": "RNA is ribonucleic acid Like DNA, it is a nucleic acid.", "fol": "", "prediction": ["all x.(RibonucleicAcid(x) -> (DNA(x) & NucleicAcid(x)))"]}
{"id": "eqasc_validation_239", "nl": "Ribonucleic acid is a small molecule that can squeeze through pores in the nuclear membrane.", "fol": "", "prediction": ["all x.(RibonucleicAcid(x) -> (SmallMolecule(x) & CanSqueezeThroughPossies(x) & InNuclearMembrane(x)))"]}
{"id": "eqasc_validation_240", "nl": "For example, the nuclear membrane keeps the DNA inside of the nucleus.", "fol": "", "prediction": ["all x y.((NuclearMembrane(x) & Nucleus(y)) -> KeepsDNAInside(x,y))"]}
{"id": "eqasc_validation_241", "nl": "RNA is a small molecule that can squeeze through pores of the nucleus that holds DNA", "fol": "", "prediction": ["all x.(RNA(x) -> (SmallMolecule(x) & CanSqueezeThroughPossures(x) & HoldsDNA(x)))"]}
{"id": "eqasc_validation_242", "nl": "Nuclear membranes are thickened, rounded and slightly irregular.", "fol": "", "prediction": ["all x.(NuclearMembrane(x) -> (Thickened(x) & Rounded(x) & -Irregular(x)))"]}
{"id": "eqasc_validation_243", "nl": "RNA is a small molecule that can squeeze through thickened, rounded and slightly irregular pores", "fol": "", "prediction": ["all x.(RNA(x) -> (SmallMolecule(x) & SqueezesThroughThickenedRoundedAndIrregularPpores(x)))"]}
{"id": "eqasc_validation_244", "nl": "RNA is a small molecule that can squeeze through the pores of a eukaryotic cell", "fol": "", "prediction": ["all x.(RNA(x) -> (SmallMolecule(x) & CanSqueezeThroughPpores(x) & EukaryoticCell(x)))"]}
{"id": "eqasc_validation_245", "nl": "poisonous darts are used for defense by sea anemones", "fol": "", "prediction": ["all x y.((PoisonousDart(x) & SeaAnemone(y)) -> UsedForDefense(x,y))"]}
{"id": "eqasc_validation_246", "nl": "To protect themselves corals have evolved a variety of defenses.", "fol": "", "prediction": ["all x.(Coral(x) -> (EvolvedDefenses(x) & Protects(x)))"]}
{"id": "eqasc_validation_247", "nl": "Poisonus darts are used by sea anemones for protection.", "fol": "", "prediction": ["all x y.((PoisonusDart(x) & SeaAnemone(y)) -> UsedForProtection(x,y))"]}
{"id": "eqasc_validation_248", "nl": "Poison dart frogs are the source of a toxin used by natives on their poison darts.", "fol": "", "prediction": ["all x y.((PoisonDartFrog(x) & Native(y)) -> SourceOfToxin(x,y))"]}
{"id": "eqasc_validation_249", "nl": "a toxin is used for defense by sea anemones", "fol": "", "prediction": ["all x y.((Toxin(x) & SeaAnemone(y)) -> UsedForDefense(x,y))"]}
{"id": "eqasc_validation_250", "nl": "Another reef inhabitant is the anemone.", "fol": "", "prediction": ["all x.(ReefInhabitant(x) -> Anemone(x))"]}
{"id": "eqasc_validation_251", "nl": "sea creatures live in reefs", "fol": "", "prediction": ["all x y.((SeaCreature(x) & Reef(y)) -> LivesIn(x,y))"]}
{"id": "eqasc_validation_252", "nl": "Venomous creatures can often use their poison as a weapon.", "fol": "", "prediction": ["all x.(VenomousCreature(x) -> UsesPoisonAsWaffen(x))"]}
{"id": "eqasc_validation_253", "nl": "sea anemones are venomous", "fol": "", "prediction": ["all x.(SeaAnemone(x) -> Venomous(x))"]}
{"id": "eqasc_validation_254", "nl": "Sea anemones are close relatives of corals .", "fol": "", "prediction": ["all x.(SeaAnemone(x) -> CloseRelativeOfCorals(x))"]}
{"id": "eqasc_validation_255", "nl": "poisonous darts are used for defense by close relatives of coral", "fol": "", "prediction": ["all x y.((PoisonousDart(x) & CloseRelative(y)) -> UsedForDefense(x,y))"]}
{"id": "eqasc_validation_256", "nl": "close relatives of coral use poisonous darts for defense", "fol": "", "prediction": ["all x y.((CloseRelative(x) & Coral(y)) -> UsesPoisonousDartsForDefense(x,y))"]}
{"id": "eqasc_validation_257", "nl": "Protection at the gateway is the best defense.", "fol": "", "prediction": ["all x.((ProtectAtGateway(x) & BestDefense(x)) -> BestDefense(x))"]}
{"id": "eqasc_validation_258", "nl": "Poisonous darts are used as protection by sea anemones.", "fol": "", "prediction": ["all x.(PoisonousDart(x) -> UsedAsProtectionBySeaAnemones(x))"]}
{"id": "eqasc_validation_259", "nl": "Anthozoans are the familiar anemones and corals.", "fol": "", "prediction": ["all x.(Anthozoan(x) -> (FamiliarAnemone(x) & FamiliarCoral(x)))"]}
{"id": "eqasc_validation_260", "nl": "Poisonous darts are used for defense by Anthozoans.", "fol": "", "prediction": ["all x.(PoisonousDart(x) -> UsedForDefense(x))"]}
{"id": "eqasc_validation_261", "nl": "Sea anemones are related to jellyfish and coral.", "fol": "", "prediction": ["all x.(SeaAnemone(x) -> (RelatedToJellyfish(x) & RelatedToCoral(x)))"]}
{"id": "eqasc_validation_262", "nl": "poisonous darts are used for defense by an organism related to jellyfish and coral", "fol": "", "prediction": ["all x y z.((PoisonousDart(x) & Organism(y) & Jellyfish(z) & Coral(z)) -> UsedForDefense(x,y,z))"]}
{"id": "eqasc_validation_263", "nl": "Lymph is a fluid that leaks out of capillaries into spaces between cells.", "fol": "", "prediction": ["all x.(Lymph(x) -> (LeaksOutOfCapillaries(x) & EntersSpacesBetweenCells(x)))"]}
{"id": "eqasc_validation_264", "nl": "Small lymph capillaries collect lymph.", "fol": "", "prediction": ["all x.(SmallLymphCapillary(x) -> CollectsLymph(x))"]}
{"id": "eqasc_validation_265", "nl": "small capillaries collect fluid", "fol": "", "prediction": ["all x.(SmallCapillary(x) -> CollectsFluid(x))"]}
{"id": "eqasc_validation_266", "nl": "Lymph vessels carry lymph, a colorless, watery fluid that contains lymphocytes.", "fol": "", "prediction": ["all x.(LymphVessel(x) -> (CarriesLymph(x) & ColorlessWateryFluid(x) & ContainsLymphocytes(x)))"]}
{"id": "eqasc_validation_267", "nl": "fluid that leaks out of capillaries into spaces between cells contains lymphocytes", "fol": "", "prediction": ["all x y.((Fluid(x) & LeaksOutOfCapillaries(x) & SpacesBetweenCells(y)) -> ContainsLymphocytes(x))"]}
{"id": "eqasc_validation_268", "nl": "Capillary walls are quite permeable.", "fol": "", "prediction": ["all x.(CapillaryWall(x) -> Permeable(x))"]}
{"id": "eqasc_validation_269", "nl": "lymph is the fluid that leaks from permeable walls into spaces between cells", "fol": "", "prediction": ["all x.(Lymph(x) -> LeaksFromPermeableWallsIntoSpacesBetweenCells(x))"]}
{"id": "eqasc_validation_270", "nl": "System consists of lymph capillaries, lymph veins and lymph nodes.", "fol": "", "prediction": ["all x.(System(x) -> (LymphCapillaries(x) & LymphVines(x) & LymphNodes(x)))"]}
{"id": "eqasc_validation_271", "nl": "lymph is in nodes", "fol": "", "prediction": ["all x.(Lymph(x) -> InNodes(x))"]}
{"id": "eqasc_validation_272", "nl": "Lymph fluid is rich in protein.", "fol": "", "prediction": ["all x.(LymphFluid(x) -> RichInProtein(x))"]}
{"id": "eqasc_validation_273", "nl": "A protein-rich fluid leaks into spaces between cells", "fol": "", "prediction": ["all x y.((ProteinRichFluid(x) & Space(y)) -> LeaksInto(x,y))"]}
{"id": "eqasc_validation_274", "nl": "Humans are made up of trillions of cells.", "fol": "", "prediction": ["all x.(Human(x) -> MadeUpOfTwelveStationsOfCells(x))"]}
{"id": "eqasc_validation_275", "nl": "humans contain lymph", "fol": "", "prediction": ["all x.(Human(x) -> ContainsLymph(x))"]}
{"id": "eqasc_validation_276", "nl": "Capillaries are microscopic vessels.", "fol": "", "prediction": ["all x.(Capillary(x) -> MicroscopicVessel(x))"]}
{"id": "eqasc_validation_277", "nl": "Lymph is a fluid that leaks out of microscopic vessels into spaces between cells.", "fol": "", "prediction": ["all x.(Lymph(x) -> (Liquid(x) & LeaksOutOfMicroscopicVessels(x) & LeaksIntoSpacesBetweenCells(x)))"]}
{"id": "eqasc_validation_278", "nl": "Bacteria invade lymph nodes, which swell, creating the buboes.", "fol": "", "prediction": ["all x y.((Bacteria(x) & LymphNode(y)) -> InvadesAndSwells(x,y))"]}
{"id": "eqasc_validation_279", "nl": "Swelling nodes leak fluid out of capillaries into spaces between cells", "fol": "", "prediction": ["all x y z.((SwellingNode(x) & Capillary(y) & Space(z)) -> LeaksFluidOutInto(x,y,z))"]}
{"id": "eqasc_validation_280", "nl": "Lymph nodes, or glands, filter the lymph fluid.", "fol": "", "prediction": ["all x.((LymphNode(x) | Glands(x)) -> FiltersLymphFluid(x))"]}
{"id": "eqasc_validation_281", "nl": "lymph is filtered by nodes", "fol": "", "prediction": ["all x y.((Lymph(x) & Node(y)) -> FilteredBy(x,y))"]}
{"id": "eqasc_validation_282", "nl": "Capillaries Capillaries are tiny, thin walled blood vessels.", "fol": "", "prediction": ["all x.(Capillary(x) -> (Tiny(x) & ThinWalledBloodedVessel(x)))"]}
{"id": "eqasc_validation_283", "nl": "Lymph fluid leaks out of blood vessels into spaces between cells", "fol": "", "prediction": ["all x y z.((LymphFluid(x) & BloodVessel(y) & Space(z)) -> LeaksOutInto(x,y,z))"]}
{"id": "eqasc_validation_284", "nl": "Lymph, a fluid rich in white blood cells, flows through the lymphatic vessels.", "fol": "", "prediction": ["all x.(Lymph(x) -> (RichInWhiteBloodCells(x) & FlowsThroughLymphaticVessels(x)))"]}
{"id": "eqasc_validation_285", "nl": "a fluid that leaks out of capillaries into spaces between cells is rich in white blood cells", "fol": "", "prediction": ["all x.((Fluid(x) & LeaksOutOfCapillaries(x) & SpacesBetweenCells(x)) -> RichInWhiteBloodCells(x))"]}
{"id": "eqasc_validation_286", "nl": "A fluid rich in protein leaks out of capillaries into spaces between cells", "fol": "", "prediction": ["all x y z.((Fluid(x) & RichInProtein(x) & Capillary(y) & SpaceBetweenCells(z)) -> LeaksOutInto(x,y,z))"]}
{"id": "eqasc_validation_287", "nl": "Capillaries connect arteries to veins .", "fol": "", "prediction": ["all x y z.((Capillary(x) & Artery(y) & Vein(z)) -> ConnectsTo(x,y,z))"]}
{"id": "eqasc_validation_288", "nl": "Lymph is a fluid that leaks out of the connection of arteries to veins ", "fol": "", "prediction": ["all x.(Lymph(x) -> LeaksOutOfConnectionOfArteriesToVines(x))"]}
{"id": "eqasc_validation_289", "nl": "Any antigen that causes an allergy is called an allergen.", "fol": "", "prediction": ["all x.((Antigen(x) & CausesAllergy(x)) -> Allergic(x))"]}
{"id": "eqasc_validation_290", "nl": "Antigens are proteins foreign to the body.", "fol": "", "prediction": ["all x.(Antigen(x) -> (Protein(x) & ForeignToBody(x)))"]}
{"id": "eqasc_validation_291", "nl": "Any foreign protein that causes an allergic reaction is called an allergen.", "fol": "", "prediction": ["all x.((FrenchProtein(x) & CausesAllergy(x)) -> Allergen(x))"]}
{"id": "eqasc_validation_292", "nl": "Asthma attacks are caused by allergies.", "fol": "", "prediction": ["all x.(AsthmaAttack(x) -> CausedByAllergies(x))"]}
{"id": "eqasc_validation_293", "nl": "Allergens can trigger asthma attacks", "fol": "", "prediction": ["all x.(Allergen(x) -> TriggersAsthmaAttacks(x))"]}
{"id": "eqasc_validation_294", "nl": "Antibodies are produced to fight antigens.", "fol": "", "prediction": ["all x.(Antibody(x) -> ProducedToFightAntigens(x))"]}
{"id": "eqasc_validation_295", "nl": "Antibodies are produced to fight an allergens ", "fol": "", "prediction": ["all x y.((Antibody(x) & Allergen(y)) -> ProducedToFight(x,y))"]}
{"id": "eqasc_validation_296", "nl": "Many of the common allergens are pollens and dusts.", "fol": "", "prediction": ["all x.((Allergen(x) & Pollen(x) & Dust(x)) -> Common(x))"]}
{"id": "eqasc_validation_297", "nl": "pollens are antigens that can cause an allergy", "fol": "", "prediction": ["all x.(Pollen(x) -> (Antigen(x) & CausesAllergy(x)))"]}
{"id": "eqasc_validation_298", "nl": "Many allergens can cause anaphylaxis.", "fol": "", "prediction": ["all x.(Allergen(x) -> CanCauseAnaphylaxis(x))"]}
{"id": "eqasc_validation_299", "nl": "many antigens cause cause anaphyaxis", "fol": "", "prediction": ["all x y.((Antigen(x) & CausesCauseAnaphyaxis(x,y)) -> CausesCauseAnaphyaxis(x,y))"]}
{"id": "eqasc_validation_300", "nl": "Proteins foreign to the body that cause allergies are called allergens.", "fol": "", "prediction": ["all x.((Protein(x) & ForeignToBody(x) & CausesAllergies(x)) -> Allergic(x))"]}
{"id": "eqasc_validation_301", "nl": "pasteurization reduces the amount of bacteria in milk", "fol": "", "prediction": ["all x y.((Pasteurization(x) & Milk(y)) -> ReducesBacteriaAmount(x,y))"]}
{"id": "eqasc_validation_302", "nl": "Milk products are made into ice cream, cheese cake, and puddings.", "fol": "", "prediction": ["all x.(MilkProduct(x) -> (MadeIntoIceCream(x) | MadeIntoCheeseCake(x) | MadeIntoPuddings(x)))"]}
{"id": "eqasc_validation_303", "nl": "Pasteurization reduces the amount of bacteria in something that pudding is made from", "fol": "", "prediction": ["all x y.((Pasteurization(x) & Bacteria(y)) -> ReducesAmountInPudding(x,y))"]}
{"id": "eqasc_validation_304", "nl": "Pasteurization was discovered by the French scientist, Louis Pasteur.", "fol": "", "prediction": ["(FrenchScientist(Pasteur) & DiscoveredBy(Pasteur))"]}
{"id": "eqasc_validation_305", "nl": "A French scientist discovered how to reduce the amount of bacteria in milk", "fol": "", "prediction": ["all x y.((FrenchScientist(x) & Milk(y)) -> ReducesBacteriaInMilk(x,y))"]}
{"id": "eqasc_validation_306", "nl": "Bacteria are unicellular organisms.", "fol": "", "prediction": ["all x.(Bacteria(x) -> UnicellularOrganism(x))"]}
{"id": "eqasc_validation_307", "nl": "Pasteurization reduces the amount of unicellular organisms in milk.", "fol": "", "prediction": ["all x y.((Pasteurization(x) & Milk(y)) -> ReducesUnicellularOrganisms(x,y))"]}
{"id": "eqasc_validation_308", "nl": "Pasteurization destroys the bacteria in milk that cause tuberculosis.", "fol": "", "prediction": ["all x y.((Pasteurization(x) & Bacteria(y) & Milk(z) & CausesTuberculosis(y,z)) -> Disrupts(x,y,z))"]}
{"id": "eqasc_validation_309", "nl": "Pasteurization reduces the cause of tuberculosis in milk", "fol": "", "prediction": ["all x y.((Pasteurization(x) & Milk(y)) -> ReducesCauseOfTuberculosis(x,y))"]}
{"id": "eqasc_validation_310", "nl": "Pasteurization, the killing of germs by heating, was developed by Louis Pasteur .", "fol": "", "prediction": ["all x y.((Pasteurization(x) & Germ(y)) -> (DevelopedBy(x,y) & LouisPasteur(x)))"]}
{"id": "eqasc_validation_311", "nl": "heating milk reduces the amount of bacteria", "fol": "", "prediction": ["all x y.((Milk(x) & Heating(y)) -> ReducesBacteriaAmount(x,y))"]}
{"id": "eqasc_validation_312", "nl": "Cows produce milk.", "fol": "", "prediction": ["all x.(Cow(x) -> ProducesMilk(x))"]}
{"id": "eqasc_validation_313", "nl": "pasteurization reduces the amount of bacteria in something cows produce", "fol": "", "prediction": ["all x y.((Pasteurization(x) & Cow(y)) -> ReducesBacteriaIn(x,y))"]}
{"id": "eqasc_validation_314", "nl": "Pasteurization is a mild heating process that kills pathogenic micro-organisms in milk.", "fol": "", "prediction": ["all x.(Pasteurization(x) -> (MildHeatingProcess(x) & KillsPathogenicMicroorganisms(x) & InMilk(x)))"]}
{"id": "eqasc_validation_315", "nl": "A mild heating process reduces bacteria in milk. ", "fol": "", "prediction": ["all x.(MildHeatingProcess(x) -> ReducesBacteriaInMilk(x))"]}
{"id": "eqasc_validation_316", "nl": "Bacteria and blue-green bacteria are prokaryotic cells.", "fol": "", "prediction": ["all x.((Bacteria(x) | BlueGreenBacteria(x)) -> ProkaryoticCell(x))"]}
{"id": "eqasc_validation_317", "nl": "pasteurization reduces the amount of prokaryotic cells in milk", "fol": "", "prediction": ["all x y.((Pasteurization(x) & Milk(y)) -> ReducesProkaryoticCellsInMilk(x,y))"]}
{"id": "eqasc_validation_318", "nl": "Heat, including pasteurization, reduces vitamin content.", "fol": "", "prediction": ["all x.((Heat(x) & Pasteurization(x)) -> ReducesVitaminContent(x))"]}
{"id": "eqasc_validation_319", "nl": "Heating milk in order to reduce the amount of bacteria also reduces vitamin content.", "fol": "", "prediction": ["all x.((HeatingMilk(x) & ReducesBacteriaAmount(x)) -> ReducesVitaminContent(x))"]}
{"id": "eqasc_validation_320", "nl": "Growth is faster during infancy than it is during puberty.", "fol": "", "prediction": ["all x y.((Growth(x) & Infancy(y) & Puberty(y)) -> Faster(x,y))"]}
{"id": "eqasc_validation_321", "nl": "Physiological stresses can relate to changes in growth size, for example.", "fol": "", "prediction": ["all x.(PhysiologicalStress(x) -> (RelatedToChangeInGrowthSize(x) & For example(x)))"]}
{"id": "eqasc_validation_322", "nl": "Changes in size are faster during infancy than during puberty", "fol": "", "prediction": ["all x y.((ChangeInSize(x) & Infancy(y) & Puberty(y)) -> FasterChangeInSize(x,y))"]}
{"id": "eqasc_validation_323", "nl": "Humans experience their fastest growth rate during fetal development and early infancy.", "fol": "", "prediction": ["all x.(Human(x) -> (FetalDevelopment(x) & EarlyInfancy(x)))"]}
{"id": "eqasc_validation_324", "nl": "Growth is faster during fetal development than it is during puberty.", "fol": "", "prediction": ["all x y.((FetalDevelopment(x) & Puberty(y)) -> FasterGrowth(x,y))"]}
{"id": "eqasc_validation_325", "nl": "For many, adolescence is synonymous with puberty.", "fol": "", "prediction": ["all x.(Adolescence(x) -> Puberty(x))"]}
{"id": "eqasc_validation_326", "nl": "growth is faster during infancy than adolescence", "fol": "", "prediction": ["all x y.((Infancy(x) & Adolescence(y)) -> FasterGrowth(x,y))"]}
{"id": "eqasc_validation_327", "nl": "During infancy, babies learn whether to trust the world.", "fol": "", "prediction": ["all x.((Baby(x) & Infancy(x)) -> LearnsToTrustWorld(x))"]}
{"id": "eqasc_validation_328", "nl": "babies grow faster than they do later during puberty", "fol": "", "prediction": ["all x y.((Baby(x) & Puberty(y)) -> GrowsFasterThan(x,y))"]}
{"id": "eqasc_validation_329", "nl": "Infancy ends with weaning, usually around year 3.", "fol": "", "prediction": ["all x.(InfancyEndsWithWeaning(x) -> (AroundYear3(x) & UsuallyAroundYear3(x)))"]}
{"id": "eqasc_validation_330", "nl": "Growth is faster from ages 0 to 3 than it is during puberty", "fol": "", "prediction": ["all x y.((Growth(x) & Age(y) & Age(y) & Age(y)) -> FasterFrom0To3(x,y))"]}
{"id": "eqasc_validation_331", "nl": "Patients frequently die in the neonatal period or in early infancy.", "fol": "", "prediction": ["all x.(Patient(x) -> (NeonatalPeriod(x) | EarlyInfancy(x)))"]}
{"id": "eqasc_validation_332", "nl": "Growth is faster during the neonatal period than it is during puberty", "fol": "", "prediction": ["all x y.((NeonatalPeriod(x) & Puberty(y)) -> FasterGrowth(x,y))"]}
{"id": "eqasc_validation_333", "nl": "Breasts develop during puberty .", "fol": "", "prediction": ["all x.(Breast(x) -> DevelopsDuringPuberty(x))"]}
{"id": "eqasc_validation_334", "nl": "Growth is faster in infancy than it is in the time when breasts grow.", "fol": "", "prediction": ["all x y.((Infancy(x) & BreastGrowth(y)) -> FasterGrowth(x,y))"]}
{"id": "eqasc_validation_335", "nl": "Adolescence begins with puberty.", "fol": "", "prediction": ["all x.(Adolescence(x) -> Puberty(x))"]}
{"id": "eqasc_validation_336", "nl": "Growth is faster in infancy than in adolescence.", "fol": "", "prediction": ["all x y.((Infancy(x) & Adolescence(y)) -> FasterGrowth(x,y))"]}
{"id": "eqasc_validation_337", "nl": "a seismometer is used to measure the strength or magnitude of an earthquake", "fol": "", "prediction": ["all x y.((Seismometer(x) & Earthquake(y)) -> MeasuresStrengthOrMagnitude(x,y))"]}
{"id": "eqasc_validation_338", "nl": "The seismometer will check for seismic activity.", "fol": "", "prediction": ["all x.(Seismometer(x) -> ChecksSeismicActivity(x))"]}
{"id": "eqasc_validation_339", "nl": "Seismic activity tells us the strength or magnitude of an earthquake. ", "fol": "", "prediction": ["all x y.((SeismicActivity(x) & Earthquake(y)) -> (Storm(x,y) | Magnitude(x,y)))"]}
{"id": "eqasc_validation_340", "nl": "Seismometer Calibration : Instructions on how to calibrate a homemade seismometer.", "fol": "", "prediction": ["all x.((Seismometer(x) & Calibration(x)) -> InstructionsOnCalculating(x,HomemadeSeismometer))"]}
{"id": "eqasc_validation_341", "nl": "Instruments must be calibrated before they can measure the magnitude of an earthquake.", "fol": "", "prediction": ["all x.((Instrument(x) & Calibred(x)) -> MeasuresMagnitudeOfEarthquake(x))"]}
{"id": "eqasc_validation_342", "nl": "Earthquakes are measured on a scale of 1 to 10.", "fol": "", "prediction": ["all x.(Earthquake(x) -> MeasuredOnScale(x,1) & MeasuredOnScale(x,10)))"]}
{"id": "eqasc_validation_343", "nl": "seismometers go up to 10", "fol": "", "prediction": ["all x.(Seismometer(x) -> GoesUpTo10(x))"]}
{"id": "eqasc_validation_344", "nl": "Earthquakes are caused by fault movement.", "fol": "", "prediction": ["all x.(Earthquake(x) -> CausedByFaultMovement(x))"]}
{"id": "eqasc_validation_345", "nl": "a seismometer is used to measure the strength or magnitude of something caused by fault movement", "fol": "", "prediction": ["all x y.((Seismometer(x) & (FaultMovement(y) | FaultMovement(y))) -> MeasuresStrengthOrMagnitudeOf(x,y))"]}
{"id": "eqasc_validation_346", "nl": "The Richter scale, developed in 1935, measures the earthquake by using a standard seismometer to measure the maximum amplitude of shaking.", "fol": "", "prediction": ["all x.((RiverScale(x) & DevelopedIn1935(x)) -> MeasuresEarthquake(x))"]}
{"id": "eqasc_validation_347", "nl": "The strength of an earthquake refers to the maximum amplitude of the shaking", "fol": "", "prediction": ["all x y.((Earthquake(x) & MaximumAmplitude(y)) -> StrengthRefersTo(x,y))"]}
{"id": "eqasc_validation_348", "nl": "The Richter scale provides information on the magnitude or inherent strength of the earthquake.", "fol": "", "prediction": ["all x.(RiverScale(x) -> (ProvidesInformationOnMagnitude(x) | InherentStrength(x)))"]}
{"id": "eqasc_validation_349", "nl": "The Richter scale uses readings from seismometers", "fol": "", "prediction": ["all x y.((RiverScale(x) & Seismometer(y)) -> UsesReadingsFrom(x,y))"]}
{"id": "eqasc_validation_350", "nl": "a seismometer is used to measure the strength or magnitude of fault movement.", "fol": "", "prediction": ["all x.(Seismometer(x) -> (MeasuresStrengthOrMagnitudeOfFaultMovement(x)))"]}
{"id": "eqasc_validation_351", "nl": "a seismometer is used to measure the richter scale", "fol": "", "prediction": ["all x y.((Seismometer(x) & RichterScene(y)) -> Measures(x,y))"]}
{"id": "eqasc_validation_352", "nl": "Intensity is a measure of the strength of shaking experienced in an earthquake.", "fol": "", "prediction": ["all x.(Intensity(x) -> (MeasuresStrengthOfShaking(x) & ExperiencedInEarthquake(x)))"]}
{"id": "eqasc_validation_353", "nl": "A seismometer measures the intensity of the shaking of earthquakes.", "fol": "", "prediction": ["all x.(Seismometer(x) -> MeasuresIntensityOfShakingOfEarthquakes(x))"]}
{"id": "eqasc_validation_354", "nl": "Seismic waves are produced by earthquakes.", "fol": "", "prediction": ["all x y.((SeismicWaves(x) & Earthquake(y)) -> ProducedBy(x,y))"]}
{"id": "eqasc_validation_355", "nl": "a seismometer is used to measure seismic waves", "fol": "", "prediction": ["all x y.((Seismometer(x) & SeismicWaves(y)) -> Measures(x,y))"]}
{"id": "eqasc_validation_356", "nl": "Scientists use seismometers to determine the location and strength of earthquakes.", "fol": "", "prediction": ["all x y.((Scientist(x) & Seismometer(y)) -> (DeterminesLocation(x,y) & DeterminesStrength(x,y)))"]}
{"id": "eqasc_validation_357", "nl": "a seismometer is used to measure strength", "fol": "", "prediction": ["all x y.((Seismometer(x) & Strength(y)) -> Measures(x,y))"]}
{"id": "eqasc_validation_358", "nl": "The magnitude of an earthquake is its strength, or the amount of shaking.", "fol": "", "prediction": ["all x.(Earthquake(x) -> (Strength(x) | ShakingAmount(x)))"]}
{"id": "eqasc_validation_359", "nl": "A seismometer is used to measure the amount of shaking of an earthquake ", "fol": "", "prediction": ["all x y.((Seismometer(x) & Earthquake(y)) -> MeasuresShakingAmount(x,y))"]}
{"id": "eqasc_validation_360", "nl": "Seismograph: A seismograph is a device that records earthquake waves.", "fol": "", "prediction": ["all x.(Seismograph(x) -> (RecordsEarthquakeWaves(x) & -RecordsEarthquakeWaves(x)))"]}
{"id": "eqasc_validation_361", "nl": "seismographs measure strength", "fol": "", "prediction": ["all x.(Seismograph(x) -> MeasuresStrength(x))"]}
{"id": "eqasc_validation_362", "nl": "a thermometer is used to measure temperature", "fol": "", "prediction": ["all x y.((Thermometer(x) & Temperature(y)) -> Measures(x,y))"]}
{"id": "eqasc_validation_363", "nl": "Temperature Temperature is an measurement of the amount of heat.", "fol": "", "prediction": ["all x.(Temperature(x) -> MeasuresHeat(x))"]}
{"id": "eqasc_validation_364", "nl": "A thermometer is used to measure the amount of heat.", "fol": "", "prediction": ["all x.(Thermometer(x) -> MeasuresHeat(x))"]}
{"id": "eqasc_validation_365", "nl": "Fever is measured using a thermometer.", "fol": "", "prediction": ["all x.(Fever(x) -> MeasuredUsingThermometer(x))"]}
{"id": "eqasc_validation_366", "nl": "a fever can be measured with a thermometer", "fol": "", "prediction": ["all x y.((Fever(x) & Thermometer(y)) -> CanBeMeasuredWith(x,y))"]}
{"id": "eqasc_validation_367", "nl": "a thermometer is used to measure the amount of heat", "fol": "", "prediction": ["all x y.((Thermometer(x) & Heat(y)) -> MeasuresAmountOfHeat(x,y))"]}
{"id": "eqasc_validation_368", "nl": "Heat and temperature are the same.", "fol": "", "prediction": ["all x.(Heat(x) -> Temperature(x))"]}
{"id": "eqasc_validation_369", "nl": "a thermometer is used to measure heat", "fol": "", "prediction": ["all x y.((Thermometer(x) & Heat(y)) -> Measures(x,y))"]}
{"id": "eqasc_validation_370", "nl": "If the weather is warm, their temperature rises.", "fol": "", "prediction": ["all x.((Weather(x) & Warm(x)) -> TemperatureRise(x))"]}
{"id": "eqasc_validation_371", "nl": "A thermometer is used to measure if the weather will be warm.", "fol": "", "prediction": ["all x.(Thermometer(x) -> MeasuresWarmWeather(x))"]}
{"id": "eqasc_validation_372", "nl": "a fever can be diagnosed with a thermometer", "fol": "", "prediction": ["all x y.((Fever(x) & Thermometer(y)) -> DiagnosedWith(x,y))"]}
{"id": "eqasc_validation_373", "nl": "Temperature is a measure of the amount of heat.", "fol": "", "prediction": ["all x.(Temperature(x) -> MeasuresHeat(x))"]}
{"id": "eqasc_validation_374", "nl": "A thermometer can measure heat", "fol": "", "prediction": ["all x.(Thermometer(x) -> MeasuresHeat(x))"]}
{"id": "eqasc_validation_375", "nl": "When the temperature rises, the mercury expands and rises in the thermometer tube.", "fol": "", "prediction": ["all x y.((Temperature(x) & TemperatureRise(x)) -> (Expansion(x,y) & RisesInThermometerTube(x,y)))"]}
{"id": "eqasc_validation_376", "nl": "Mercury expanding and rising in a tube is used to measure temperature", "fol": "", "prediction": ["all x y.((Mercury(x) & Tube(y) & ExpandingAndRising(x,y)) -> MeasuresTemperature(x,y))"]}
{"id": "eqasc_validation_377", "nl": "An obvious replacement for the standard mercury thermometer is the alcohol thermometer.", "fol": "", "prediction": ["all x.((ObviousReplacement(x) & StandardMercuryThermometer(x)) -> AlcoholThermometer(x))"]}
{"id": "eqasc_validation_378", "nl": "A mercury or alcohol containing device is used to measure temperature.", "fol": "", "prediction": ["all x.((Device(x) & (Mercury(x) | Alcohol(x))) -> MeasuresTemperature(x))"]}
{"id": "eqasc_validation_379", "nl": "a vehicle is used for travel", "fol": "", "prediction": ["all x y.((Vehicle(x) & Vehicle(y)) -> UsedForTravel(x,y))"]}
{"id": "eqasc_validation_380", "nl": "trucks and cars are used for travel", "fol": "", "prediction": ["all x y.((LKW(x) & Car(y)) -> (UsedForTravel(x,y) & UsedForTravel(x,y)))"]}
{"id": "eqasc_validation_381", "nl": "Vehicle emissions are a major cause of air pollution.", "fol": "", "prediction": ["all x.(VehicleEmissions(x) -> MajorCauseOfAirPollution(x))"]}
{"id": "eqasc_validation_382", "nl": "Traveling is a cause of air pollution.", "fol": "", "prediction": ["all x.(Travels(x) -> CauseOfAirPollution(x))"]}
{"id": "eqasc_validation_383", "nl": "Motorcycles are considered additional vehicles.", "fol": "", "prediction": ["all x.(Motorcycle(x) -> AdditionalVehicle(x))"]}
{"id": "eqasc_validation_384", "nl": "motorcycles are used for travel", "fol": "", "prediction": ["all x.(Motorcycle(x) -> UsedForTravel(x))"]}
{"id": "eqasc_validation_385", "nl": "Trucks and cars are used for travel", "fol": "", "prediction": ["all x y.((Truck(x) & Car(y)) -> (UsedForTravel(x,y) & UsedForTravel(x,y)))"]}
{"id": "eqasc_validation_386", "nl": "trucks are used for travel", "fol": "", "prediction": ["all x.(Truck(x) -> UsedForTravel(x))"]}
{"id": "eqasc_validation_387", "nl": " A car is used for travel.", "fol": "", "prediction": ["all x.(Car(x) -> UsedForTravel(x))"]}
{"id": "eqasc_validation_388", "nl": "Cars and trucks are used for travel.", "fol": "", "prediction": ["all x.((Car(x) | Truck(x)) -> UsedForTravel(x))"]}
{"id": "eqasc_validation_389", "nl": "An airplane is a vehicle that is capable of leaving the ground and flying through the air.", "fol": "", "prediction": ["all x.(Airplane(x) -> (Vehicle(x) & LeavesGround(x) & FliesThroughAir(x)))"]}
{"id": "eqasc_validation_390", "nl": "An airplane can be used to travel high above the ground.", "fol": "", "prediction": ["all x.(Airplane(x) -> TravelsHighAboveGround(x))"]}
{"id": "eqasc_validation_391", "nl": "All travel requires navigation in some form or another.", "fol": "", "prediction": ["all x.(Travel(x) -> RequiresNavigation(x))"]}
{"id": "eqasc_validation_392", "nl": "A vehicle in use requires navigation", "fol": "", "prediction": ["all x.((Vehicle(x) & InUse(x)) -> RequiresNavigation(x))"]}
{"id": "eqasc_validation_393", "nl": "if weather is stormy then there is a greater chance of rain", "fol": "", "prediction": ["all x.((Weather(x) & Stormy(x)) -> GreaterChanceOfRain(x))"]}
{"id": "eqasc_validation_394", "nl": "For example, in the sentence The rain destroyed the crops , The rain is the subject.", "fol": "", "prediction": ["all x y.((Punch(x) & Rain(y) & DestroyedCrops(y)) -> RainSubject(x,y))"]}
{"id": "eqasc_validation_395", "nl": "If weather is stormy then there is a chance of destroyed crops", "fol": "", "prediction": ["all x.((Weather(x) & Stormy(x)) -> ChanceOfDisruptedCrops(x))"]}
{"id": "eqasc_validation_396", "nl": "Spring days can be stormy.", "fol": "", "prediction": ["all x.(SpringDay(x) -> Stormy(x))"]}
{"id": "eqasc_validation_397", "nl": "Spring days can see rain weather", "fol": "", "prediction": ["all x.(SpringDay(x) -> CanSeeRainWeather(x))"]}
{"id": "eqasc_validation_398", "nl": "Low pressure is generally associated with cloudy or stormy weather.", "fol": "", "prediction": ["all x.(LowPressure(x) -> (CloudyWeather(x) | StormyWeather(x)))"]}
{"id": "eqasc_validation_399", "nl": "low pressure causes a greater chance of rain", "fol": "", "prediction": ["all x.(LowPressure(x) -> GreaterChanceOfRain(x))"]}
{"id": "eqasc_validation_400", "nl": "Rapid warming thus increases global storminess, creating perfect conditions for hurricanes.", "fol": "", "prediction": ["all x.(RapidWarming(x) -> (IncreasesGlobalStorminess(x) & CreatesPerfectConditionsForHurricane(x)))"]}
{"id": "eqasc_validation_401", "nl": "hurricanes cause a greater chance of rain", "fol": "", "prediction": ["all x.(Hurricane(x) -> CausesGreaterChanceOfRain(x))"]}
{"id": "eqasc_validation_402", "nl": "Rain is a wonderful thing, it helps plants grow.", "fol": "", "prediction": ["all x.(Rain(x) -> (WonderfulThing(x) & HelpsPlantsGrow(x)))"]}
{"id": "eqasc_validation_403", "nl": "stormy weather helps plants grow", "fol": "", "prediction": ["all x y.((StormyWeather(x) & Plant(y)) -> HelpsGrow(x,y))"]}
{"id": "eqasc_validation_404", "nl": "Rain is also known as precipitation.", "fol": "", "prediction": ["all x.(Rain(x) -> Precipitation(x))"]}
{"id": "eqasc_validation_405", "nl": "if weather is stormy then there is a greater chance of precipitation", "fol": "", "prediction": ["all x.((Weather(x) & Stormy(x)) -> GreaterChanceOfPrecipitation(x))"]}
{"id": "eqasc_validation_406", "nl": "Unsettled, stormy weather with frequent rain is common, even during the summer.", "fol": "", "prediction": ["all x.((Unsettled(x) & StormyWeather(x) & FrequentRain(x)) -> Common(x))"]}
{"id": "eqasc_validation_407", "nl": "summer brings storms", "fol": "", "prediction": ["all x.(Summer(x) -> BringsStorms(x))"]}
{"id": "eqasc_validation_408", "nl": "Weather is the state of the atmosphere at any particular moment in time.", "fol": "", "prediction": ["all x.(Weather(x) -> AtmosphereState(x))"]}
{"id": "eqasc_validation_409", "nl": "If the state of the atmosphere is stormy then there is a greater chance of rain", "fol": "", "prediction": ["all x.((StatusOfAtmosphere(x) & Stormy(x)) -> GreaterChanceOfRain(x))"]}
{"id": "eqasc_validation_410", "nl": "Rain is our usual form of precipitation.", "fol": "", "prediction": ["all x.(Rain(x) -> Precipitation(x))"]}
{"id": "eqasc_validation_411", "nl": "If weather is stormy then there is a greater chance of precipitation.", "fol": "", "prediction": ["all x.((Weather(x) & Stormy(x)) -> GreaterChanceOfPrecipitation(x))"]}
{"id": "eqasc_validation_412", "nl": "After a heavy rain, they can absorb a large amount of water for the plant.", "fol": "", "prediction": ["all x y.((HeavyRain(x) & Plant(y)) -> AbsorbsLargeAmountOfWater(x,y))"]}
{"id": "eqasc_validation_413", "nl": "if weather is stormy then plants will absorb water", "fol": "", "prediction": ["all x.((Weather(x) & Stormy(x)) -> PlantsAbsorbWater(x))"]}
{"id": "eqasc_validation_414", "nl": "if weather is stormy then there is a greater chance of precipitation.", "fol": "", "prediction": ["all x.((Weather(x) & Stormy(x)) -> GreaterChanceOfPrecipitation(x))"]}
{"id": "eqasc_validation_415", "nl": "Rain is good, but lots of rain causes destructive flooding.", "fol": "", "prediction": ["(all x.(Rain(x) -> Good(x)) & all y.(Rain(y) -> DestructiveFlooding(y))))"]}
{"id": "eqasc_validation_416", "nl": "Stormy weather increases the chances of flooding", "fol": "", "prediction": ["all x y.((StormyWeather(x) & FloodingChance(y)) -> Increases(x,y))"]}
{"id": "eqasc_validation_417", "nl": "Erosion is loss of soil caused by rain and wind.", "fol": "", "prediction": ["all x.(Erosion(x) -> (LossOfSoil(x) & CausedByRain(x) & CausedByWind(x)))"]}
{"id": "eqasc_validation_418", "nl": "if weather is stormy then there is a greater chance of Erosion. ", "fol": "", "prediction": ["all x.((Weather(x) & Stormy(x)) -> GreaterChanceOfErosion(x))"]}
{"id": "eqasc_validation_419", "nl": "Rain Rain reduces visibility and makes pavement dangerous.", "fol": "", "prediction": ["all x.(Rain(x) -> (ReducesVisibility(x) & MakesPacewayDangerous(x)))"]}
{"id": "eqasc_validation_420", "nl": "if weather is stormy then there is a greater chance of reduced visibility", "fol": "", "prediction": ["all x.((Weather(x) & Stormy(x)) -> GreaterChanceOfReducedVisibility(x))"]}
{"id": "eqasc_validation_421", "nl": "Protozoa make humans sick when they become human parasites.", "fol": "", "prediction": ["all x y.((Protozoa(x) & HumanParasite(y)) -> MakesHumansSick(x,y))"]}
{"id": "eqasc_validation_422", "nl": "Intestinal parasites and malaria are endemic.", "fol": "", "prediction": ["all x.((IntestinalParasite(x) & Malaria(x)) -> Endemic(x))"]}
{"id": "eqasc_validation_423", "nl": "intestinal Protozoa make humans sick", "fol": "", "prediction": ["all x y.((IntestinalProtozoa(x) & Human(y)) -> MakesSick(x,y))"]}
{"id": "eqasc_validation_424", "nl": "Illness-causing parasites include the protozoa Cyclospora and Toxoplasma gondii .", "fol": "", "prediction": ["all x.(IllnessCausingParasite(x) -> (Protozoa(x) & Cyclospora(x) & Toxoplasmagondii(x)))"]}
{"id": "eqasc_validation_425", "nl": "Toxoplasma gondii make humans sick", "fol": "", "prediction": ["all x.(ToxoplasmaGondii(x) -> MakesHumansSick(x))"]}
{"id": "eqasc_validation_426", "nl": "Bacteria, viruses, fungi, or protozoa are organisms that can cause infection in the lung.", "fol": "", "prediction": ["all x.((Organism(x) & (Bacteria(x) | Viral(x) | Fungi(x) | Protozoa(x))) -> CausesInfectionInLung(x))"]}
{"id": "eqasc_validation_427", "nl": "organisms that can cause infection make humans sick", "fol": "", "prediction": ["all x.((Organism(x) & CausesInfection(x)) -> MakesHumansSick(x))"]}
{"id": "eqasc_validation_428", "nl": "Protozoa Toxoplasma gondii Muscles Nematode Trichinella spiralis Protozoa Sarcocystis sp.", "fol": "", "prediction": ["all x.(Protozoa(x) -> (ToxoplasmagondiiMuscles(x) & NematodeTrichinellaSpiralis(x) & SarcocystisSp(x)))"]}
{"id": "eqasc_validation_429", "nl": "Species of Sarcocystis can parasitize humans and make them sick.", "fol": "", "prediction": ["all x.(Sarcocystis(x) -> (ParasitesHumans(x) & MakesSick(x)))"]}
{"id": "eqasc_validation_430", "nl": "Exhibit One-celled animals are called protozoa .", "fol": "", "prediction": ["all x.(Exhibit(x) -> (OneCelledAnimal(x) & Protozoa(x)))"]}
{"id": "eqasc_validation_431", "nl": "one-celled animals make humans sick when they become parasites", "fol": "", "prediction": ["all x y.((OneCelledAnimal(x) & Human(y) & Parasite(y)) -> MakesSick(x,y))"]}
{"id": "eqasc_validation_432", "nl": "Malaria parasites are transmitted by mosquitos.", "fol": "", "prediction": ["all x.(MalariaParasite(x) -> TransmittedByMouses(x))"]}
{"id": "eqasc_validation_433", "nl": "Malaria is a protozoa that make humans sick ", "fol": "", "prediction": ["all x.(Malaria(x) -> (Protozoa(x) & MakesHumansSick(x)))"]}
{"id": "eqasc_validation_434", "nl": "natural magnetism is used for pointing north by a compass", "fol": "", "prediction": ["all x y.((NaturalMagnetism(x) & Compass(y)) -> PointsNorth(x,y))"]}
{"id": "eqasc_validation_435", "nl": "Magnets, compasses and even the earth have magnetic energy.", "fol": "", "prediction": ["all x.((Magnet(x) | Compasse(x) | Earth(x)) -> HasMagneticEnergy(x))"]}
{"id": "eqasc_validation_436", "nl": "magnetic energy is used to find north", "fol": "", "prediction": ["all x y.((MagneticEnergy(x) & North(y)) -> UsedToFind(x,y))"]}
{"id": "eqasc_validation_437", "nl": "Additionally, a surveyor s compass was used.", "fol": "", "prediction": ["all x y.((SurveyorsCompass(x) & SurveyorsCompass(y)) -> Used(x))"]}
{"id": "eqasc_validation_438", "nl": "Natural magnetism is used for pointing north in a surveying tool.", "fol": "", "prediction": ["all x y.((NaturalMagnetism(x) & SurveyingTool(y)) -> PointsNorth(x,y))"]}
{"id": "eqasc_validation_439", "nl": "To find direction, students magnetize needles and locate North.", "fol": "", "prediction": ["all x y.((Student(x) & Student(y)) -> (MagnetizesNeedles(x,y) & LocatesNorth(y,x)))"]}
{"id": "eqasc_validation_440", "nl": "Finding directions can be done by using a compass that points North.", "fol": "", "prediction": ["all x.((Compass(x) & PointsNorth(x)) -> FindDirections(x))"]}
{"id": "eqasc_validation_441", "nl": "For the ordinary compass, align to the North direction.", "fol": "", "prediction": ["all x.((Compass(x) & Ordinary(x)) -> AlignsToNorthDirection(x))"]}
{"id": "eqasc_validation_442", "nl": "compasses use magnetism", "fol": "", "prediction": ["all x.(Compasse(x) -> UsesMagnetism(x))"]}
{"id": "eqasc_validation_443", "nl": "Teens learn how to navigate terrain and use a compass.", "fol": "", "prediction": ["all x.(Teen(x) -> (LearnsHowToNavigateTerrain(x) & UsesCompass(x)))"]}
{"id": "eqasc_validation_444", "nl": "natural magnetism points north for navigation", "fol": "", "prediction": ["all x y.((NaturalMagnetism(x) & Navigation(y)) -> PointsNorthForNavigation(x,y))"]}
{"id": "eqasc_validation_445", "nl": "Compasses point to the Magnetic Poles.", "fol": "", "prediction": ["all x.(Compass(x) -> PointsToMagneticPoles(x))"]}
{"id": "eqasc_validation_446", "nl": "poles are used to point with a compass", "fol": "", "prediction": ["all x y.((Pole(x) & Compass(y)) -> PointsWith(x,y))"]}
{"id": "eqasc_validation_447", "nl": "Natural magnetism is used to point to the magnetic poles.", "fol": "", "prediction": ["all x y.((NaturalMagnetism(x) & MagneticPole(y)) -> PointsTo(x,y))"]}
{"id": "eqasc_validation_448", "nl": "Natural magnets are permanent magnets that never lose their magnetism.", "fol": "", "prediction": ["all x.(NaturalMagnet(x) -> (PermanentMagnet(x) & -LosesMagnetism(x)))"]}
{"id": "eqasc_validation_449", "nl": "Permanent magnets are used for compasses pointing North.", "fol": "", "prediction": ["all x.(PermanentMagnet(x) -> (UsedForCompasses(x) & PointsNorth(x)))"]}
{"id": "eqasc_validation_450", "nl": "Nonmetal elements are far fewer in number.", "fol": "", "prediction": ["all x.((NonmetalElement(x) & FarFarLiderInNumber(x)) -> -(NonmetalElement(x) & FarFarLiderInNumber(x)))"]}
{"id": "eqasc_validation_451", "nl": "Titanium is a lustrous white metallic element.", "fol": "", "prediction": ["all x.(Titanium(x) -> (LuxuriousWhiteMetallicElement(x) & MetallicElement(x)))"]}
{"id": "eqasc_validation_452", "nl": "Titanium is not a non metal", "fol": "", "prediction": ["all x.(Titanium(x) -> -NonMetal(x))"]}
{"id": "eqasc_validation_453", "nl": "Nonmetals are the 17 elements in the upper right hand corner of the periodic table.", "fol": "", "prediction": ["all x.(Nonmetal(x) -> (ElementsInUpperRightHandCrown(x) & ElementsInUpperRightHandCrown(x)))"]}
{"id": "eqasc_validation_454", "nl": "The periodic table has far fewer of the elements listed in the right hand corner.", "fol": "", "prediction": ["all x.(PeriodicTable(x) -> FarFarFarFarFarFarFarFarFarElements(x))"]}
{"id": "eqasc_validation_455", "nl": "Elements Elements are composed of atoms.", "fol": "", "prediction": ["all x.(Element(x) -> ComposedOfAtoms(x))"]}
{"id": "eqasc_validation_456", "nl": "Nonmetal atomic material is far fewer in number.", "fol": "", "prediction": ["all x.((NonmetalAtomicMaterial(x) & FarFarLiderInNumber(x)) -> -(NonmetalAtomicMaterial(x) & FarFarLiderInNumber(x)))"]}
{"id": "eqasc_validation_457", "nl": "Elements are grouped into the Periodic Table .", "fol": "", "prediction": ["all x.(Element(x) -> PeriodicTable(x))"]}
{"id": "eqasc_validation_458", "nl": "nonmetal periodic table groups are far fewer in number", "fol": "", "prediction": ["all x.((NonMetalPeriodicTableGroup(x) & FarLessInNumber(x)) -> FarLessInNumber(x))"]}
{"id": "eqasc_validation_459", "nl": "Each element is either a metal, nonmetal, or metalloid.", "fol": "", "prediction": ["all x.(Element(x) -> (Metal(x) | Nonmetal(x) | Metalloid(x)))"]}
{"id": "eqasc_validation_460", "nl": "elements that are not metal or metalloid are far fewer in number", "fol": "", "prediction": ["all x.((Element(x) & -Metal(x) & -Metalloid(x)) -> FarLergerInNumber(x))"]}
{"id": "eqasc_validation_461", "nl": "There are 17 nonmetals on the periodic table", "fol": "", "prediction": ["all x.((Nonmetal(x) & PeriodicTable(x)) -> ThereAre17(x,nonmetal))"]}
{"id": "eqasc_validation_462", "nl": "Elements to the right of the semiconductors are Nonmetals.", "fol": "", "prediction": ["all x.((Element(x) & ToRightOfSemiconductors(x)) -> Nonmetals(x))"]}
{"id": "eqasc_validation_463", "nl": "Elements to the right of the semiconductors are far fewer in number", "fol": "", "prediction": ["all x.((Element(x) & RightOfSemiconductors(x)) -> FarLergerInNumber(x))"]}
{"id": "eqasc_validation_464", "nl": "Blood type is important for medical reasons.", "fol": "", "prediction": ["all x.(BloodType(x) -> ImportantForMedicalCauses(x))"]}
{"id": "eqasc_validation_465", "nl": "If there was a serious emergency, the team knows who has compatible blood types.", "fol": "", "prediction": ["all x.((SeriousEmergency(x) & Team(x)) -> KnowsCompatibleBloodTypes(x))"]}
{"id": "eqasc_validation_466", "nl": "Knowing who has compatible blood is important for medical reasons", "fol": "", "prediction": ["all x.((CompatibleBlood(x) & Knows(x)) -> ImportantForMedicalRates(x))"]}
{"id": "eqasc_validation_467", "nl": "Medical treatment is overseen by medical personnel.", "fol": "", "prediction": ["all x y.((MedicalTreatment(x) & MedicalPersonnel(y)) -> Oversees(x,y))"]}
{"id": "eqasc_validation_468", "nl": "Hospital personnel may want to know your blood type.", "fol": "", "prediction": ["all x.(HospitalPersonnel(x) -> (WantToKnowBloodType(x) | WantToKnowBloodType(x)))"]}
{"id": "eqasc_validation_469", "nl": "Treatment Treatment of cirrhosis is medical.", "fol": "", "prediction": ["all x.(Cirrhosis(x) -> Medical(x))"]}
{"id": "eqasc_validation_470", "nl": "Blood type is important for some treatments.", "fol": "", "prediction": ["exists x.(BloodType(x) & ImportantForTreatments(x))"]}
{"id": "eqasc_validation_471", "nl": "Each of the four blood types, O, A, B and AB play an important role in patient care.", "fol": "", "prediction": ["all x.((BloodType(x) & O(x) | A(x) | B(x) | AB(x))) -> ImportantRoleInPatientCare(x))"]}
{"id": "eqasc_validation_472", "nl": "being type O A B or AB is important for medical reasons", "fol": "", "prediction": ["all x.((B(x) | AB(x)) -> ImportantForMedicalRates(x))"]}
{"id": "eqasc_validation_473", "nl": "Blood type is determined by inherited antigens and antibodies.", "fol": "", "prediction": ["all x.(BloodType(x) -> (DeterminedByEarnedAntigens(x) & DeterminedByAntibodies(x)))"]}
{"id": "eqasc_validation_474", "nl": "inherited antigens and antibodies are important for medical reasons", "fol": "", "prediction": ["all x.((EarnedAntigens(x) & Antibodies(x)) -> ImportantForMedicalCauses(x))"]}
{"id": "eqasc_validation_475", "nl": "Of course, medical interventions go way beyond pills, bandages, and surgery.", "fol": "", "prediction": ["all x.(MedicalIntervention(x) -> (GoesBeyondPills(x) & GoesBeyondBandages(x) & GoesBeyondSurgery(x)))"]}
{"id": "eqasc_validation_476", "nl": "Blood type is important to know prior to surgery.", "fol": "", "prediction": ["all x.(BloodType(x) -> ImportantToKnow(x))"]}
{"id": "eqasc_validation_477", "nl": "Transplants are medical miracles.", "fol": "", "prediction": ["all x.(Transplant(x) -> MedicalMajority(x))"]}
{"id": "eqasc_validation_478", "nl": "Blood type is important for Transplants ", "fol": "", "prediction": ["all x.(Transplant(x) -> ImportantBloodType(x))"]}
{"id": "eqasc_validation_479", "nl": "For medical advice, consult a doctor .", "fol": "", "prediction": ["all x y.((Doctor(x) & Doctor(y)) -> Consults(x,y))"]}
{"id": "eqasc_validation_480", "nl": "Blood type is something that is important for a doctor to know.", "fol": "", "prediction": ["all x.((BloodType(x) & ImportantForDoctor(x)) -> ImportantForDoctor(x))"]}
{"id": "eqasc_validation_481", "nl": "Scientists still know relatively little about Archaea.", "fol": "", "prediction": ["all x.(Scientist(x) -> (KnowsLittleAboutArchaea(x) & -KnowsLittleAboutArchaea(x)))"]}
{"id": "eqasc_validation_482", "nl": "Scientist do research every year.", "fol": "", "prediction": ["all x.(Scientist(x) -> DosResearchEveryYear(x))"]}
{"id": "eqasc_validation_483", "nl": "People that do research still know relatively little about Archaea.", "fol": "", "prediction": ["all x.((DoesResearch(x) & KnowsLittleAboutArchaea(x)) -> -(DoesResearch(x) & KnowsLittleAboutArchaea(x)))"]}
{"id": "eqasc_validation_484", "nl": "Skin color is a polygenic trait.", "fol": "", "prediction": ["all x.(SkinColor(x) -> PolygenicTrait(x))"]}
{"id": "eqasc_validation_485", "nl": "Some traits are inherited.", "fol": "", "prediction": ["exists x.(Treatment(x) & Erased(x))"]}
{"id": "eqasc_validation_486", "nl": "skin color is inherited", "fol": "", "prediction": ["all x.(SkinColor(x) -> Erased(x))"]}
{"id": "eqasc_validation_487", "nl": "Polygenic traits are the result of the interaction of several genes.", "fol": "", "prediction": ["all x.(PolygenicTreatment(x) -> InteractionOfGenes(x))"]}
{"id": "eqasc_validation_488", "nl": "skin color is the result of the interaction of several genes", "fol": "", "prediction": ["all x.(SkinColor(x) -> InteractionOfGenes(x))"]}
{"id": "eqasc_validation_489", "nl": "Skin color is controlled by two or more genes.", "fol": "", "prediction": ["all x.(SkinColor(x) -> (ControlledByGenes(x) & ControlledByGenes(x)))"]}
{"id": "eqasc_validation_490", "nl": "Polygenic inheritance occurs when one trait is governed by two or more sets of alleles.", "fol": "", "prediction": ["all x.((Trait(x) & GovernedByTwoOrMoreSetsOfAlleles(x)) -> PolygenicInheritance(x))"]}
{"id": "eqasc_validation_491", "nl": "Skin color is governed by two or more sets of alleles", "fol": "", "prediction": ["all x.(SkinColor(x) -> exists y.(SetOfAlleles(y) & Regime(x,y)))"]}
{"id": "eqasc_validation_492", "nl": "Skin color is inherited from a number of genes.", "fol": "", "prediction": ["all x.(SkinColor(x) -> ErasedFromGenes(x))"]}
{"id": "eqasc_validation_493", "nl": "Melanin is responsible for skin color.", "fol": "", "prediction": ["all x.(Melanin(x) -> ResponsibleForSkinColor(x))"]}
{"id": "eqasc_validation_494", "nl": "Skin color varies from grey to brown.", "fol": "", "prediction": ["all x.(SkinColor(x) -> (Grey(x) | Brown(x)))"]}
{"id": "eqasc_validation_495", "nl": "No matter if you are white or brown, this comes from a polygenic trait.", "fol": "", "prediction": ["all x.((White(x) | Brown(x)) -> PolygenicTrait(x))"]}
{"id": "eqasc_validation_496", "nl": "Chapter 5 discusses polygenic inheritance and intelligence.", "fol": "", "prediction": ["all x.(Chapter5(x) -> (PolygenicInheritance(x) & Intelligence(x)))"]}
{"id": "eqasc_validation_497", "nl": "intelligence is an inherited trait", "fol": "", "prediction": ["all x.(Intelligence(x) -> (HasTrait(x) & HasTrait(x)))"]}
{"id": "eqasc_validation_498", "nl": "The amount of melanin pigment in skin is a polygenic trait", "fol": "", "prediction": ["all x.((MelaninPigmentInSkin(x) & PolygenicTrait(x)) -> PolygenicTrait(x))"]}
{"id": "eqasc_validation_499", "nl": "Pregnancy is the carrying of one or more offspring from fertilization until birth.", "fol": "", "prediction": ["all x.(Pregnancy(x) -> (CarriesOffspring(x) & FromFertilizationToBirth(x)))"]}
{"id": "eqasc_validation_500", "nl": "Pregnancy begins with a fertilized egg.", "fol": "", "prediction": ["all x.(Pregnancy(x) -> FertileEgg(x))"]}
{"id": "eqasc_validation_501", "nl": "A fertilized egg can create an offspring if it's carried until birth", "fol": "", "prediction": ["all x.((FertilizedEgg(x) & CarriedUntilBirth(x)) -> CanCreateOffspring(x))"]}
{"id": "eqasc_validation_502", "nl": "Births are the main component of population growth.", "fol": "", "prediction": ["all x.(Birth(x) -> MainComponentOfPopulationGrowth(x))"]}
{"id": "eqasc_validation_503", "nl": "Pregnancy leads to population growth", "fol": "", "prediction": ["all x.(PregnancyLeadsToPopulationGrowth(x) -> PopulationGrowth(x))"]}
{"id": "eqasc_validation_504", "nl": "Mothers choose to have sex, which leads to pregnancy.", "fol": "", "prediction": ["all x.(Mother(x) -> (ChoosesSex(x) & LeadsToPregnancy(x)))"]}
{"id": "eqasc_validation_505", "nl": "Mothers carry offspring from fertilization until birth", "fol": "", "prediction": ["all x y z.((Mother(x) & Offspring(y) & Fertilization(z) & CarryFromToBirth(x,y,z)) -> CarryFromFertilizationToBirth(x,y,z))"]}
{"id": "eqasc_validation_506", "nl": "Human Embryonic Development Follows human development from fertilization through birth.", "fol": "", "prediction": ["all x.(HumanEmbryonicDevelopment(x) -> FollowsHumanDevelopment(x))"]}
{"id": "eqasc_validation_507", "nl": "Pregnancy is  embryonic development", "fol": "", "prediction": ["all x.(Pregnancy(x) -> EmbryonicDevelopment(x))"]}
{"id": "eqasc_validation_508", "nl": "An offspring is defined as something, or someone that comes into existence as a result of pregnancy.", "fol": "", "prediction": ["all x.(Offspring(x) -> (((ProceedsIn(x) & (ComesIntoInexistenceAsResultOfPregnancy(x))) | ComesIntoInexistenceAsResultOfPregnancy(x))))"]}
{"id": "eqasc_validation_509", "nl": "pregnancy results from fertilization", "fol": "", "prediction": ["all x.((PregnancyResultsFromFertilization(x)) -> Fertilization(x))"]}
{"id": "eqasc_validation_510", "nl": "Infertility is also the inability to carry a pregnancy to full term.", "fol": "", "prediction": ["all x.(Infertility(x) -> (InabilityToCarry(x,pregnancy) & FullTerm(x)))"]}
{"id": "eqasc_validation_511", "nl": "Carrying offspring to full term is from fertilization until birth", "fol": "", "prediction": ["all x y.((Offspring(x) & Fertilization(y) & Birth(y)) -> CarryingToFullTerm(x,y))"]}
{"id": "eqasc_validation_512", "nl": "Pregnancy is another word for gestation.", "fol": "", "prediction": ["all x.(Pregnancy(x) -> Gestation(x))"]}
{"id": "eqasc_validation_513", "nl": "Gestation is the carrying of one or more offspring from fertilization until birth.", "fol": "", "prediction": ["all x.(Gestation(x) -> (CarriesOffspringFromFertilization(x) & Birth(x)))"]}
{"id": "eqasc_validation_514", "nl": "Most pregnancies end happily with the birth of a healthy baby.", "fol": "", "prediction": ["all x.((Pregnancies(x) & HealthyBaby(x)) -> HappyEnd(x))"]}
{"id": "eqasc_validation_515", "nl": "carrying offspring from fertilization until birth results in a baby", "fol": "", "prediction": ["all x y.((Offspring(x) & Fertilization(y) & BirthResult(x,y)) -> CarryingFromToBirth(x,y))"]}
{"id": "eqasc_validation_516", "nl": "An elephant pregnancy lasts about 22 months.", "fol": "", "prediction": ["all x.(Elephant(x) -> LastsAbout22Months(x))"]}
{"id": "eqasc_validation_517", "nl": "An elephant carries their offspring from fertilization until birth, 22 months later.", "fol": "", "prediction": ["all x.(Elephant(x) -> (CarriesOffspringFromFertilization(x) & Birth(x) & 22MonthsAfter(x)))"]}
{"id": "eqasc_validation_518", "nl": "boulders are formed by glaciers melting sometimes", "fol": "", "prediction": ["all x y.((Bolt(x) & Glacier(y)) -> FormedByMelting(x,y))"]}
{"id": "eqasc_validation_519", "nl": "Most of the crags are boulders.", "fol": "", "prediction": ["all x.(Crag(x) -> Boulder(x))"]}
{"id": "eqasc_validation_520", "nl": "most crags are formed by melting glaciers", "fol": "", "prediction": ["all x.(Crag(x) -> FormedByMeltingGlaciers(x))"]}
{"id": "eqasc_validation_521", "nl": "Alpine glaciers form in the mountains.", "fol": "", "prediction": ["all x y.((AlpineGlacier(x) & Mountain(y)) -> FormsIn(x,y))"]}
{"id": "eqasc_validation_522", "nl": "Boulders are formed in the mountains.", "fol": "", "prediction": ["all x.(Boulder(x) -> FormedInMountains(x))"]}
{"id": "eqasc_validation_523", "nl": "Erratics are boulders that are deposited by glaciers as part of moraines.", "fol": "", "prediction": ["all x.(Erratic(x) -> (Bolt(x) & DepositedByGlaciers(x) & PartOfMoraines(x)))"]}
{"id": "eqasc_validation_524", "nl": "erratics are formed by glaciers melting", "fol": "", "prediction": ["all x y.((Eratoid(x) & Glacier(y)) -> FormedByMelting(x,y))"]}
{"id": "eqasc_validation_525", "nl": "Glaciers are made of snow, ice and rock.", "fol": "", "prediction": ["all x.(Glacier(x) -> (MadeOfSnow(x) & MadeOfIce(x) & MadeOfRock(x)))"]}
{"id": "eqasc_validation_526", "nl": "boulders are formed by snow, ice, and rock melting sometimes", "fol": "", "prediction": ["all x.(Bolt(x) -> (FormedBySnow(x) | FormedByIce(x) | FormedByRockMelting(x)))"]}
{"id": "eqasc_validation_527", "nl": "Some pelycosaurs gave rise to a group of animals called therapsids.", "fol": "", "prediction": ["all x.(Pelycosaur(x) -> GivesRiseToTherapsids(x))"]}
{"id": "eqasc_validation_528", "nl": "Pelycosaurs are an important lineage preserved in the fossil record.", "fol": "", "prediction": ["all x.(Pelycosaur(x) -> ImportantLineagePreservedInFossilRecord(x))"]}
{"id": "eqasc_validation_529", "nl": "The fossil record shows the lineage of therapsids.", "fol": "", "prediction": ["all x.(FossilRecord(x) -> ShowsLineageOfTherapsids(x))"]}
{"id": "eqasc_validation_530", "nl": "Pelycosaurs and therapsids are theropsids.", "fol": "", "prediction": ["all x.((Pelycosaur(x) | Therapsid(x)) -> Theropsid(x))"]}
{"id": "eqasc_validation_531", "nl": "therapsids are animals", "fol": "", "prediction": ["all x.(Therapsid(x) -> Animal(x))"]}
{"id": "eqasc_validation_532", "nl": "Tetraceratops is the oldest known therapsid.", "fol": "", "prediction": ["Tetraceratops (Tetraceratops) - Thermosexual(t))"]}
{"id": "eqasc_validation_533", "nl": "Tetraceratops are pelycosaurs. ", "fol": "", "prediction": ["all x.(Tetraceratop(x) -> Pelycosaur(x))"]}
{"id": "eqasc_validation_534", "nl": "Therapsids are reptiles ancestral to mammals.", "fol": "", "prediction": ["all x.(Therapsid(x) -> (Reptile(x) & AscendedToMammals(x)))"]}
{"id": "eqasc_validation_535", "nl": "Some pelycosaurs gave rise to a group of reptiles ancestral to mammals", "fol": "", "prediction": ["all x y.((Pelycosaur(x) & Reptile(y)) -> (GaveRiver(x,y) & AncientToMammals(y)))"]}
{"id": "eqasc_validation_536", "nl": "Some pelycosaurs gave rise to  reptile ancestral to mammals.", "fol": "", "prediction": ["exists x.(Pelycosaur(x) & Reptile(x) & AncientToMammals(x))"]}
{"id": "eqasc_validation_537", "nl": "howling is used to warn other wolves by wolves", "fol": "", "prediction": ["all x y.((Wolf(x) & Wolf(y)) -> HowlingWarns(x,y))"]}
{"id": "eqasc_validation_538", "nl": "And somewhere a beagle howls a most pitiful sound.", "fol": "", "prediction": ["all x y.((Beagle(x) & PitifulSound(y)) -> Howls(x,y))"]}
{"id": "eqasc_validation_539", "nl": "wolves use sound to warn other wolves", "fol": "", "prediction": ["all x y.((Wolf(x) & Wolf(y)) -> UsesSoundToWarn(x,y))"]}
{"id": "eqasc_validation_540", "nl": "Groups of indris communicate with mournful and distinctive howls.", "fol": "", "prediction": ["all x.(Indris(x) -> CommunicatesWithMelancholyAndDistinctiveHowls(x))"]}
{"id": "eqasc_validation_541", "nl": "Wolves use distinct forms of communication.", "fol": "", "prediction": ["all x.(Wolf(x) -> UsesDistinctFormsOfCommunication(x))"]}
{"id": "eqasc_validation_542", "nl": "Soon a chorus of howling coyotes join in and the whole area reverberates with noise.", "fol": "", "prediction": ["all x y z.((Coyote(x) & Howling(y) & Area(z)) -> (JoinsIn(x,y) & ReverberatesWithNoise(z,x)))"]}
{"id": "eqasc_validation_543", "nl": "reverberating noise is used to warn other wolves by wolves", "fol": "", "prediction": ["all x y.((ReverberatingNoise(x) & Wolf(y)) -> Warns(x,y))"]}
{"id": "eqasc_validation_544", "nl": "Gray wolves are the largest members of the canine family.", "fol": "", "prediction": ["all x.(GrayWolf(x) -> LargestMemberOfCanineFamily(x))"]}
{"id": "eqasc_validation_545", "nl": "howling is used by canines to warn others", "fol": "", "prediction": ["all x y.((Canine(x) & Howling(y)) -> WarnsOthers(x,y))"]}
{"id": "eqasc_validation_546", "nl": "Warnings and cautions are there for a good reason.", "fol": "", "prediction": ["all x.(Warning(x) & Warning(x) & GoodRight(x))"]}
{"id": "eqasc_validation_547", "nl": "Howling is used to caution other wolves by wolves.", "fol": "", "prediction": ["all x y.((Howling(x) & Wolf(y)) -> UsedToConstrain(x,y))"]}
{"id": "eqasc_validation_548", "nl": "Canis lupus is the same species that includes grey wolves.", "fol": "", "prediction": ["all x.(CanisLupus(x) -> GreyWolf(x))"]}
{"id": "eqasc_validation_549", "nl": "Howling is used by members of the species Canis Lupus to warn other members.", "fol": "", "prediction": ["all x y.((Howling(x) & Member(y) & CanisLupus(y)) -> Warns(x,y))"]}
{"id": "eqasc_validation_550", "nl": "Wolves communicate with each other using the different pitches of their howl.", "fol": "", "prediction": ["all x y.((Wolf(x) & Howl(y)) -> CommunicatesUsingPitches(x,y))"]}
{"id": "eqasc_validation_551", "nl": "wolves warn other wolves by using different pitches", "fol": "", "prediction": ["all x y.((Wolf(x) & Wolf(y)) -> WarnsByUsingDifferentPitches(x,y))"]}
{"id": "eqasc_validation_552", "nl": "canis lupus howl", "fol": "", "prediction": ["all x.(CanisLupusHowl(x) -> CanisLupusHowl(x))"]}
{"id": "eqasc_validation_553", "nl": "Wolves are distinguished from other wild canines by their size.", "fol": "", "prediction": ["all x.(Wolf(x) -> (DistinctFromWildCanines(x) & Size(x)))"]}
{"id": "eqasc_validation_554", "nl": "wild canines use howling to warn others", "fol": "", "prediction": ["all x.(WildCanine(x) -> UsesHowlingToWarn(x))"]}
{"id": "eqasc_validation_555", "nl": "Warning Warning means danger.", "fol": "", "prediction": ["Warning Warning means danger."]}
{"id": "eqasc_validation_556", "nl": "wolves howl when there is danger", "fol": "", "prediction": ["all x y.((Wolf(x) & Danger(y)) -> Howls(x,y))"]}
{"id": "eqasc_validation_557", "nl": "Like people, wolves are social.", "fol": "", "prediction": ["all x.(Wolf(x) -> Social(x))"]}
{"id": "eqasc_validation_558", "nl": "howling is used to warn other social animals", "fol": "", "prediction": ["all x y.((Howling(x) & SocialAnimal(y)) -> UsedToWarn(x,y))"]}
{"id": "eqasc_validation_559", "nl": "sandpaper is used to smooth wooden objects", "fol": "", "prediction": ["all x.(Sandpaper(x) -> SmoothWoodenObjects(x))"]}
{"id": "eqasc_validation_560", "nl": "Dirt is an abrasive like sandpaper.", "fol": "", "prediction": ["all x.(Dirt(x) -> (Abrasive(x) & Sandpaper(x)))"]}
{"id": "eqasc_validation_561", "nl": "Abrasives are used to smooth wooden objects.", "fol": "", "prediction": ["all x.(Abrasive(x) -> SmoothWoodenObjects(x))"]}
{"id": "eqasc_validation_562", "nl": "Pavement smoothness is a lack of roughness.", "fol": "", "prediction": ["all x.(PavementSmoothness(x) -> LackOfRoughness(x))"]}
{"id": "eqasc_validation_563", "nl": "sandpaper is used to remove roughness", "fol": "", "prediction": ["all x.(Sandpaper(x) -> RemovesRoughness(x))"]}
{"id": "eqasc_validation_564", "nl": "For the casual look, try using a wooden picnic table.", "fol": "", "prediction": ["all x.((PicnicTable(x) & CasualLook(x)) -> UsesWooden(x))"]}
{"id": "eqasc_validation_565", "nl": "Sandpaper can be used to smooth tables.", "fol": "", "prediction": ["all x.(Sandpaper(x) -> SmoothTables(x))"]}
{"id": "eqasc_validation_566", "nl": "To remove paint, use sandpaper.", "fol": "", "prediction": ["all x.((Paint(x) & Sandpaper(x)) -> Removes(x))"]}
{"id": "eqasc_validation_567", "nl": "sandpaper removes paint", "fol": "", "prediction": ["all x.(Sandpaper(x) -> RemovesPaint(x))"]}
{"id": "eqasc_validation_568", "nl": "All objects, even wooden tables, are made up of molecules which vibrate to create their mass.", "fol": "", "prediction": ["all x.((Object(x) & WoodenTable(x)) -> MadeUpOfMolecules(x))"]}
{"id": "eqasc_validation_569", "nl": "Sand paper is used to smooth a table", "fol": "", "prediction": ["all x y.((SandPaper(x) & Table(y)) -> Smoothed(x,y))"]}
{"id": "eqasc_validation_570", "nl": "Scrap wood can be used for cheap wooden bins.", "fol": "", "prediction": ["all x.(ScrapWood(x) -> UsedForBuyWoodens(x))"]}
{"id": "eqasc_validation_571", "nl": "Sandpaper is used to smooth objects made of wood.", "fol": "", "prediction": ["all x.(Sandpaper(x) -> SmoothsWood(x))"]}
{"id": "eqasc_validation_572", "nl": "Drum sticks are of wooden cane.", "fol": "", "prediction": ["all x.(DrumStick(x) -> WoodenCane(x))"]}
{"id": "eqasc_validation_573", "nl": "sandpaper is used to smooth drum sticks", "fol": "", "prediction": ["all x y.((Sandpaper(x) & DrumStick(y)) -> Smooth(x,y))"]}
{"id": "eqasc_validation_574", "nl": "Coarse grit sandpaper works well.", "fol": "", "prediction": ["all x.(CoarseGritSandpaper(x) -> WorksWell(x))"]}
{"id": "eqasc_validation_575", "nl": "coarse grit is used to smooth wooden objects", "fol": "", "prediction": ["all x y.((Grain(x) & WoodenObject(y)) -> Smooth(x,y))"]}
{"id": "eqasc_validation_576", "nl": "Children can easily make log cabins and other structures from the tiny wooden logs.", "fol": "", "prediction": ["all x y.((Child(x) & TinyWoodenLog(y)) -> (MakesLogCabins(x,y) & MakesStructures(x,y)))"]}
{"id": "eqasc_validation_577", "nl": "Sandpaper is used to smooth log cabins.", "fol": "", "prediction": ["all x.(Sandpaper(x) -> SmoothLogCabins(x))"]}
{"id": "eqasc_validation_578", "nl": "Traditionally, wooden objects are used in decoupage.", "fol": "", "prediction": ["all x.((WoodenObject(x) & Decoupage(x)) -> UsedIn(x,y))"]}
{"id": "eqasc_validation_579", "nl": "sandpaper is used to smooth decoupage", "fol": "", "prediction": ["all x.(Sandpaper(x) -> SmoothDecoupage(x))"]}
{"id": "eqasc_validation_580", "nl": "propulsion is used for flying by a spacecraft", "fol": "", "prediction": ["all x y z.((Spacecraft(x) & Spacecraft(y) & Propulsion(z)) -> UsedForFlying(z,x))"]}
{"id": "eqasc_validation_581", "nl": "Propulsion means to push forward or drive an object forward.", "fol": "", "prediction": ["all x.(Propulsion(x) -> (PushForward(x) | DriveForward(x)))"]}
{"id": "eqasc_validation_582", "nl": "A push forward is used for flying by a spacecraft.", "fol": "", "prediction": ["all x y.((PushForward(x) & Spacecraft(y)) -> UsedForFlying(x,y))"]}
{"id": "eqasc_validation_583", "nl": "Earth-orbiting spacecraft are called satellites.", "fol": "", "prediction": ["all x.((EarthOrbitingSpacecraft(x) & Satellite(x)) -> Orbiting(x))"]}
{"id": "eqasc_validation_584", "nl": "Propulsion is used for flying satellites.", "fol": "", "prediction": ["all x.(Propulsion(x) -> UsedForFlyingSatellites(x))"]}
{"id": "eqasc_validation_585", "nl": "And thrust is generated by the propulsion system of the aircraft.", "fol": "", "prediction": ["(all x.(Thrust(x) -> GeneratesByPropulsionSystem(x)))"]}
{"id": "eqasc_validation_586", "nl": "A thrusting energy is used for flying", "fol": "", "prediction": ["all x.(ThrustingEnergy(x) -> UsedForFlying(x))"]}
{"id": "eqasc_validation_587", "nl": "Apollo 13 spacecraft is launched.", "fol": "", "prediction": ["all x.((Spacecraft(x) & Apollo13(x)) -> Launched(x))"]}
{"id": "eqasc_validation_588", "nl": "propulsion is used for flying by Apollo 13", "fol": "", "prediction": ["all x y.((Propulsion(x) & Apollo13(y)) -> UsedForFlying(x,y))"]}
{"id": "eqasc_validation_589", "nl": "All rockets operate on the same basic principles of propulsion.", "fol": "", "prediction": ["all x.(Raket(x) -> OperatesOnBasicPropulsionPrinciples(x))"]}
{"id": "eqasc_validation_590", "nl": "spacecrafts can fly with rockets", "fol": "", "prediction": ["all x.(Spacecraft(x) -> CanFlyWithRockets(x))"]}
{"id": "eqasc_validation_591", "nl": "When Apollo 12 took off, the spacecraft was hit by lightning.", "fol": "", "prediction": ["all x.((Apollo12(x) & TakesOff(x)) -> HitByLightning(x))"]}
{"id": "eqasc_validation_592", "nl": "propulsion is used for flying by Apollo 12", "fol": "", "prediction": ["all x y.((Propulsion(x) & Apollo12(y)) -> UsedForFlying(x,y))"]}
{"id": "eqasc_validation_593", "nl": "Propulsion was used for flying Apollo 13.", "fol": "", "prediction": ["all x.(Propulsion(x) -> UsedForFlyingApollo13(x))"]}
{"id": "eqasc_validation_594", "nl": "Butter is a fat that is a solid at room temperature.", "fol": "", "prediction": ["all x.(Butter(x) -> (Fat(x) & SolidAtRoomTemperature(x)))"]}
{"id": "eqasc_validation_595", "nl": "Some fats are more likely to cause heart disease.", "fol": "", "prediction": ["exists x.(Fat(x) & MoreLikelyToCauseHeartDisease(x))"]}
{"id": "eqasc_validation_596", "nl": "butter can lead to heart disease", "fol": "", "prediction": ["all x.(Butter(x) -> HeartDisease(x))"]}
{"id": "eqasc_validation_597", "nl": "Eggs, butter or margarine keep in the cooler as they do in the refrigerator.", "fol": "", "prediction": ["all x y.((Egg(x) | Butter(x) | Margarine(x)) -> KeepsInCooler(x,y))"]}
{"id": "eqasc_validation_598", "nl": "fat that is a solid at room temperature can be kept in the cooler", "fol": "", "prediction": ["all x.((Fat(x) & SolidAtRoomTemperature(x)) -> CanBeKeptInCooler(x))"]}
{"id": "eqasc_validation_599", "nl": "Butter contains saturated fats.", "fol": "", "prediction": ["all x.(Butter(x) -> ContainsSaturatedFats(x))"]}
{"id": "eqasc_validation_600", "nl": "saturated fat is solid at room temperature", "fol": "", "prediction": ["all x.(SaturatedFat(x) -> SolidAtRoomTemperature(x))"]}
{"id": "eqasc_validation_601", "nl": "Saturated fats are solid at room temperature.", "fol": "", "prediction": ["all x.(SaturatedFat(x) -> SolidAtRoomTemperature(x))"]}
{"id": "eqasc_validation_602", "nl": "Butter is a saturated fat", "fol": "", "prediction": ["all x.(Butter(x) -> (SaturatedFat(x) & SaturatedFat(x)))"]}
{"id": "eqasc_validation_603", "nl": "Saturated fats make butter solid at ambient temperatures", "fol": "", "prediction": ["all x.((SaturatedFat(x) & Butter(y) & AmbientTemperature(z)) -> MakesSolid(x,y,z))"]}
{"id": "eqasc_validation_604", "nl": "Room temperatures, 70-75 degrees Fahrenheit or so, seem acceptable to most species.", "fol": "", "prediction": ["all x.((RoomTemperature(x) & Temperature(x,70) & Temperature(x,75)) -> AcceptableToMostSpecies(x))"]}
{"id": "eqasc_validation_605", "nl": "butter is a fat that is solid at 70-75 degrees Fahrenheit", "fol": "", "prediction": ["all x.(Butter(x) -> (Fat(x) & SolidAt7075Federnheit(x)))"]}
{"id": "eqasc_validation_606", "nl": "Room temperatures between 40 and 80 Fahrenheit, or 5 and 27 Celsius, are best for storage.", "fol": "", "prediction": ["all x.((RoomTemperature(x) & (40Federnheit(x) | 80Federnheit(x) | 5Federnitia(x) | 27Celsius(x))) -> BestForStorage(x))"]}
{"id": "eqasc_validation_607", "nl": "Butter is a fat that is a solid between 5 and 27 degrees Celsius.", "fol": "", "prediction": ["all x.(Butter(x) -> (Fat(x) & SolidBetween(x,5) & SolidBetween(x,27)))"]}
{"id": "eqasc_validation_608", "nl": "For example, butter is solid at room temperature, therefore it is mainly saturated.", "fol": "", "prediction": ["all x.((Butter(x) & SolidAtRoomTemperature(x)) -> Saturated(x))"]}
{"id": "eqasc_validation_609", "nl": "Solids are composed of closely packed molecules.", "fol": "", "prediction": ["all x.(Solid(x) -> (ComposedOfNearlyPackedMolecules(x)))"]}
{"id": "eqasc_validation_610", "nl": "Butter is a fat that is composed of closely packed molecules at room temperature", "fol": "", "prediction": ["all x.(Butter(x) -> (Fat(x) & ComposedOfNearlyPackedMolecules(x) & RoomTemperature(x)))"]}
{"id": "eqasc_validation_611", "nl": "Bile reduces the acidity of food entering from the highly acidic stomach.", "fol": "", "prediction": ["all x y.((Bile(x) & Food(y) & EntersFromHighlyAcidStomach(x,y)) -> ReducesAcidity(x,y))"]}
{"id": "eqasc_validation_612", "nl": "After a meal, the gallbladder releases the bile through a passageway called the bile duct.", "fol": "", "prediction": ["all x y.((Gallbladder(x) & Meal(y)) -> ReleasesBile(x,y))"]}
{"id": "eqasc_validation_613", "nl": "One function of the gallbladder is to reduce the acidity of food. ", "fol": "", "prediction": ["all x.(Gallbladder(x) -> ReducesAcidityOfFood(x))"]}
{"id": "eqasc_validation_614", "nl": "Bile, a fluid made by the liver, is stored in the gallbladder.", "fol": "", "prediction": ["all x.((Fluid(x) & MadeByLiver(x)) -> StoredInGallbladder(x))"]}
{"id": "eqasc_validation_615", "nl": "The gallbladder stores a fluid that reduces the acidity of food", "fol": "", "prediction": ["all x y.((Gallbladder(x) & Food(y)) -> StoresFluid(x,y))"]}
{"id": "eqasc_validation_616", "nl": "Bile exits gallbladder by common bile duct.", "fol": "", "prediction": ["all x.(Bile(x) -> ExitsGalbladderByCommonBileDuct(x))"]}
{"id": "eqasc_validation_617", "nl": "the gallbladder reduces the acidity of food entering from the highly acidic stomach.", "fol": "", "prediction": ["all x y.((Gallbladder(x) & Food(y) & EntersFromHighlyAcidStomach(x,y)) -> ReducesAcidity(x,y))"]}
{"id": "eqasc_validation_618", "nl": "Bile, produced by the liver, helps fat digestion and absorption.", "fol": "", "prediction": ["all x.((Bile(x) & ProducedByLiver(x)) -> (HelpsFatDigestion(x) & HelpsAbsorption(x)))"]}
{"id": "eqasc_validation_619", "nl": "the liver helps reduce acidity of food", "fol": "", "prediction": ["all x y.((Liver(x) & Food(y)) -> ReducesAcidity(x,y))"]}
{"id": "eqasc_validation_620", "nl": "Bile acid is used by the body to digest fats.", "fol": "", "prediction": ["all x.(BileAcid(x) -> UsedByBodyToDigestFats(x))"]}
{"id": "eqasc_validation_621", "nl": "the stomach acidity helps digest fats", "fol": "", "prediction": ["all x.(StomachAcidity(x) -> DigestsFats(x))"]}
{"id": "eqasc_validation_622", "nl": "Bile , synthesized by the liver, contains HCO3-, bile salts and bile pigments.", "fol": "", "prediction": ["all x.(Bile(x) -> (SynthesizedByLiver(x) & ContainsHCO3Salts(x) & ContainsBilePigments(x)))"]}
{"id": "eqasc_validation_623", "nl": "The liver reduces the acidity of food entering from the highly acidic stomach.", "fol": "", "prediction": ["all x y.((Liver(x) & Food(y) & EntersFromHighlyAcidStomach(x,y)) -> ReducesAcidity(x,y))"]}
{"id": "eqasc_validation_624", "nl": "Normally, bile acid pours into the stomach to help absorb fats from foods.", "fol": "", "prediction": ["all x y.((BileAcid(x) & Food(y)) -> PoursIntoStomach(x,y))"]}
{"id": "eqasc_validation_625", "nl": "Bile reduces acidity and helps to absorb fats from foods.", "fol": "", "prediction": ["all x.(Bile(x) -> (ReducesAcidity(x) & HelpsAbsorbFats(x)))"]}
{"id": "eqasc_validation_626", "nl": "the liver plays a role in reducing the acidity of food entering from the highly acidic stomach", "fol": "", "prediction": ["all x y.((Liver(x) & Food(y) & EntersFromHighlyAcidStomach(x,y)) -> ReducesAcidity(x,y))"]}
{"id": "eqasc_validation_627", "nl": "bile absorbs fats", "fol": "", "prediction": ["all x.(Bile(x) -> AbsorbsFats(x))"]}
{"id": "eqasc_validation_628", "nl": "Bile from the liver contains bile salts and many organic substances but no enzymes.", "fol": "", "prediction": ["all x.(Bile(x) -> (Liver(x) & ContainsBileSalts(x) & ContainsOtherOrganicSubstances(x) & -ContainsEnzymes(x)))"]}
{"id": "eqasc_validation_629", "nl": "the liver helps reduce acidity of food entering from the highly acidic stomach", "fol": "", "prediction": ["all x y.((Liver(x) & Food(y) & EntersFromAcidStomach(x,y)) -> HelpsReduceAcidity(x,y))"]}
{"id": "eqasc_validation_630", "nl": "Most hormones are regulated by feedback mechanisms.", "fol": "", "prediction": ["all x.(Hormone(x) -> RegulatesByFeedbackMechanisms(x))"]}
{"id": "eqasc_validation_631", "nl": "Hormones act as chemical messengers.", "fol": "", "prediction": ["all x.(Hormone(x) -> ChemicalMessenger(x))"]}
{"id": "eqasc_validation_632", "nl": "most chemical messengers are regulated by feedback mechanisms", "fol": "", "prediction": ["all x.(ChemicalMessenger(x) -> RegulatedByFeedbackMechanisms(x))"]}
{"id": "eqasc_validation_633", "nl": "Hormonal production is regulated by enzymes.", "fol": "", "prediction": ["all x.(HormonalProduction(x) -> RegulatesByEnzymes(x))"]}
{"id": "eqasc_validation_634", "nl": "enzymes control hormones", "fol": "", "prediction": ["all x.(Enzyme(x) -> ControlsHormones(x))"]}
{"id": "eqasc_validation_635", "nl": "Hormones are chemical messengers in the body.", "fol": "", "prediction": ["all x.(Hormone(x) -> ChemicalMessenger(x))"]}
{"id": "eqasc_validation_636", "nl": "Most chemical messengers in the body are regulated by feedback mechanisms.", "fol": "", "prediction": ["all x.(ChemicalMessenger(x) -> RegulatedByFeedbackMechanisms(x))"]}
{"id": "eqasc_validation_637", "nl": "Chemical messengers in the body are regulated by feedback mechanisms.", "fol": "", "prediction": ["all x y.((ChemicalMessenger(x) & Body(y)) -> RegulatesByFeedbackMechanisms(x,y))"]}
{"id": "eqasc_validation_638", "nl": "Hormones help the body manage stress.", "fol": "", "prediction": ["all x.(Hormone(x) -> HelpsBodyManageStress(x))"]}
{"id": "eqasc_validation_639", "nl": "Managing the body's stress is regulated by feedback mechanisms", "fol": "", "prediction": ["all x y.((Body(x) & Body(y)) -> ManagesStress(x,y))"]}
{"id": "eqasc_validation_640", "nl": "Female hormone is estrogen.", "fol": "", "prediction": ["all x.(FemaleHormone(x) -> Estrogen(x))"]}
{"id": "eqasc_validation_641", "nl": "estrogen is regulated by feedback mechanisms.", "fol": "", "prediction": ["all x.(Estrogen(x) -> RegulatesByFeedbackMechanisms(x))"]}
{"id": "eqasc_validation_642", "nl": "Feedback mechanisms are necessary to control uncertainty.", "fol": "", "prediction": ["all x.(FeedbackMechanism(x) -> ControlsIncertitude(x))"]}
{"id": "eqasc_validation_643", "nl": "Most hormones are regulated by necessarily controlling uncertainty", "fol": "", "prediction": ["all x.(Hormone(x) -> (RegulatedByControllingIncertitude(x) & ControlsIncertitude(x)))"]}
{"id": "eqasc_validation_644", "nl": "Hormones regulate pancreatic secretions.", "fol": "", "prediction": ["all x.(Hormone(x) -> RegulatesPancreaticSections(x))"]}
{"id": "eqasc_validation_645", "nl": "Feedback mechanisms regulate pancreatic secretions", "fol": "", "prediction": ["all x y.((FeedbackMechanism(x) & PancreaticSectiions(y)) -> Regulates(x,y))"]}
{"id": "eqasc_validation_646", "nl": "Homeostasis involves negative feedback mechanisms.", "fol": "", "prediction": ["all x.(Homeostasis(x) -> InvolvesNegativeFeedbackMechanisms(x))"]}
{"id": "eqasc_validation_647", "nl": "hormones are regulated by homeostasis", "fol": "", "prediction": ["all x.(Hormone(x) -> RegulatesByHomeostasis(x))"]}
{"id": "eqasc_validation_648", "nl": "Much hormonal regulation depends on feedback loops to maintain balance and homeostasis.", "fol": "", "prediction": ["all x.((HydrogenolaryRegulation(x) & FeedbackLoops(x)) -> (MaintainsBalance(x) & MaintainsHomeostasis(x)))"]}
{"id": "eqasc_validation_649", "nl": "Hormones maintain balance with feedback loops", "fol": "", "prediction": ["all x.(Hormone(x) -> MaintainsBalanceWithFeedbackLoops(x))"]}
{"id": "eqasc_validation_650", "nl": "Absorption of nutrients occurs mainly in the small intestine.", "fol": "", "prediction": ["all x.(AbsorptionOfNutrients(x) -> OccursInSmallintestine(x))"]}
{"id": "eqasc_validation_651", "nl": "Nutrients are elements needed for growth in all living plants and animals.", "fol": "", "prediction": ["all x.(Nutrient(x) -> (NeedsForGrowth(x) & InLivingPlantsAndAnimals(x)))"]}
{"id": "eqasc_validation_652", "nl": "the small intestine is needed for humans to grow and live", "fol": "", "prediction": ["all x y.((SmallIntestine(x) & Human(y)) -> NeededForGrowthAndLive(x,y))"]}
{"id": "eqasc_validation_653", "nl": "Small Intestine Structurally, the small intestine is a tubular organ.", "fol": "", "prediction": ["all x.(SmallIntestine(x) -> TubularOrgan(x))"]}
{"id": "eqasc_validation_654", "nl": "Absorption of nutrients occurs mainly in a tubular organ.", "fol": "", "prediction": ["all x y.((AbsorptionOfNutrients(x) & TubularOrgan(y)) -> OccursIn(x,y))"]}
{"id": "eqasc_validation_655", "nl": "Gastrointestinal GI dysfunction can inhibit Mg absorption from the small intestine.", "fol": "", "prediction": ["all x.(GastrointestinalGIDisfunction(x) -> InhibitsMgAbsorptionFromSmallintestine(x))"]}
{"id": "eqasc_validation_656", "nl": "Absorption of magnesium occurs in the GI tract.", "fol": "", "prediction": ["all x.(MagnesiumAbsorption(x) -> OccursInGITract(x))"]}
{"id": "eqasc_validation_657", "nl": "Diarrhea reduces the absorption of all nutrients.", "fol": "", "prediction": ["all x.(Diarrhea(x) -> ReducesAbsorptionOfNutrients(x))"]}
{"id": "eqasc_validation_658", "nl": "Diarrhea reduces funtcion that occurs mainly in the small intestine.", "fol": "", "prediction": ["all x.(Diarrhea(x) -> (ReducesFuntcion(x) & OccursInSmallintestine(x)))"]}
{"id": "eqasc_validation_659", "nl": "Absorption takes place in the small intestine.", "fol": "", "prediction": ["all x.(Absorption(x) -> TakesPlaceInSmallIntestine(x))"]}
{"id": "eqasc_validation_660", "nl": "nutrients are absorbed in the small intestine", "fol": "", "prediction": ["all x y.((Nutrients(x) & SmallIntestine(y)) -> AbsorbedIn(x,y))"]}
{"id": "eqasc_validation_661", "nl": "Food is the best source of nutrients for the body.", "fol": "", "prediction": ["all x.(Food(x) -> BestNutrientSource(x))"]}
{"id": "eqasc_validation_662", "nl": "The small intestine is the main place where food absorption occurs.", "fol": "", "prediction": ["all x.(SmallIntestine(x) -> FoodAbsorptionOfPlace(x))"]}
{"id": "eqasc_validation_663", "nl": "Most foods contain several nutrients.", "fol": "", "prediction": ["all x.(Food(x) -> ContainsSeveralNutrients(x))"]}
{"id": "eqasc_validation_664", "nl": "absorption of food occurs mainly in the small intestine", "fol": "", "prediction": ["all x y.((AbsorptionOfFood(x) & SmallIntestine(y)) -> OccursInSmallIntestine(x,y))"]}
{"id": "eqasc_validation_665", "nl": "Dozens of drugs inhibit nutrient absorption or deplete nutrients.", "fol": "", "prediction": ["all x.(Drug(x) -> (InhibitsNutrientAbsorption(x) | DepletesNutrients(x)))"]}
{"id": "eqasc_validation_666", "nl": "Many drugs can inhibit the actions of the small intestine.", "fol": "", "prediction": ["all x.(Drug(x) -> InhibitsSmallIntestineActions(x))"]}
{"id": "eqasc_validation_667", "nl": "Food and minerals are both nutrients.", "fol": "", "prediction": ["all x.((Food(x) & Mineral(x)) -> Nutrient(x))"]}
{"id": "eqasc_validation_668", "nl": "Absorption of minerals occurs mainly in the small intestine.", "fol": "", "prediction": ["all x.(MineralAbsorption(x) -> OccursInSmallIntestine(x))"]}
{"id": "eqasc_validation_669", "nl": "Fat, like protein, is a nutrient.", "fol": "", "prediction": ["all x.((Fat(x) & Protein(x)) -> Nutrient(x))"]}
{"id": "eqasc_validation_670", "nl": "Absorption of fat and protein occurs mainly in the small intestine.", "fol": "", "prediction": ["all x.(AbsorptionOfFatAndProtein(x) -> OccursInSmallintestine(x))"]}
{"id": "eqasc_validation_671", "nl": "Sperm are deposited in the vagina during sexual intercourse.", "fol": "", "prediction": ["all x y.((Ssperm(x) & Vagina(y)) -> DepositedIn(x,y))"]}
{"id": "eqasc_validation_672", "nl": "What semen is, is a carrier for the sperm contained in it.", "fol": "", "prediction": ["all x.(Semen(x) -> CarrierForSperm(x))"]}
{"id": "eqasc_validation_673", "nl": "Semen is deposited in the vagina during sexual intercourse.", "fol": "", "prediction": ["all x y.((Semen(x) & Vagina(y)) -> DepositedIn(x,y))"]}
{"id": "eqasc_validation_674", "nl": "Erection is necessary to carry the ejaculate containing the sperm into the vagina.", "fol": "", "prediction": ["all x.(Erection(x) -> CarriesEjaculate(x))"]}
{"id": "eqasc_validation_675", "nl": "Sperm is deposited after ejaculate is carried during sexual intercourse", "fol": "", "prediction": ["all x y.((Ssperm(x) & Ejaculate(y) & CarriedDuringSexualIntercourse(x,y)) -> DepositedAfterEjaculate(x,y))"]}
{"id": "eqasc_validation_676", "nl": "During intercourse several hundred million sperm are released inside the vagina.", "fol": "", "prediction": ["all x y.((Intercourse(x) & Sperm(y)) -> ReleasedInVagina(x,y))"]}
{"id": "eqasc_validation_677", "nl": "millions of sperm are deposited during sexual intercourse", "fol": "", "prediction": ["all x y.((SexualIntercourse(x) & SexualIntercourse(y)) -> DepositsMillionsOfSsperm(x,y))"]}
{"id": "eqasc_validation_678", "nl": "Several hundred million sperms are released during sexual intercourse", "fol": "", "prediction": ["During sexual intercourse, sperms are released during several hundred million times."]}
{"id": "eqasc_validation_679", "nl": "Once sperm is deposited in the vagina , it travels through the cervix and into the Fallopian tubes.", "fol": "", "prediction": ["all x y.((Ssperm(x) & Vagina(y)) -> (DepositsIn(x,y) & TravelsThroughCervix(x) & FallsopianTubes(x)))"]}
{"id": "eqasc_validation_680", "nl": "Sperm travels through the cervix and into the Fallopian tubes after sexual intercourse", "fol": "", "prediction": ["all x y z.((Ssperm(x) & Cervix(y) & FallopianTubes(z)) -> (TravelsThrough(x,y) & Through(x,z)))"]}
{"id": "eqasc_validation_681", "nl": "Male sperm are made in a man's testes.", "fol": "", "prediction": ["all x y.((MaleSpore(x) & Man(y)) -> MadeInTestes(x,y))"]}
{"id": "eqasc_validation_682", "nl": "Something made in the testes is deposited in the vagina during sexual intercourse", "fol": "", "prediction": ["all x y.((MadeInTestes(x) & DeposesInVagina(x,y)) -> SexualIntercourse(y))"]}
{"id": "eqasc_validation_683", "nl": "Male gametes are called sperm.", "fol": "", "prediction": ["all x.(MaleGamete(x) -> Sperm(x))"]}
{"id": "eqasc_validation_684", "nl": "Male gametes are deposited in the vagina during sexual intercourse.", "fol": "", "prediction": ["all x.(MaleGamete(x) -> DepositedInVagina(x))"]}
{"id": "eqasc_validation_685", "nl": "male gametes are deposited in the vagina during sexual intercourse", "fol": "", "prediction": ["all x y.((MaleGamete(x) & Vagina(y) & SexualIntercourse(x)) -> DepositedIn(x,y))"]}
{"id": "eqasc_validation_686", "nl": "Pregnancy is evidence of sexual intercourse.", "fol": "", "prediction": ["all x.(Pregnancy(x) -> SexualIntercourse(x))"]}
{"id": "eqasc_validation_687", "nl": "Sperm is deposited in the vagina sometimes causing pregnancy", "fol": "", "prediction": ["all x y.((Ssperm(x) & Vagina(y)) -> DepositedIn(x,y))"]}
{"id": "eqasc_validation_688", "nl": "Women have a vagina.", "fol": "", "prediction": ["all x.(Woman(x) -> HasVagina(x))"]}
{"id": "eqasc_validation_689", "nl": "During sex, sperm is deposited into the woman's reproductive organ.", "fol": "", "prediction": ["all x y.((Sex(x) & Sperm(y)) -> DepositedIntoReproductiveOrgan(y,x))"]}
{"id": "eqasc_validation_690", "nl": "Sexual union is for pleasure and closeness and for procreation.", "fol": "", "prediction": ["all x.(SexualUnion(x) -> (ForPlenish(x) & ForCloseness(x) & ForProcreation(x)))"]}
{"id": "eqasc_validation_691", "nl": "Sperm are deposited in the vagina during procreation", "fol": "", "prediction": ["all x y.((Ssperm(x) & Vagina(y) & Procreation(z)) -> DepositedIn(x,y,z))"]}
{"id": "eqasc_validation_692", "nl": "Male gametes are sperm.", "fol": "", "prediction": ["all x.(MaleGamete(x) -> Sperm(x))"]}
{"id": "eqasc_validation_693", "nl": "male gametes are deposited in the vagina during sexual intercourse.", "fol": "", "prediction": ["all x.(MaleGamete(x) -> DepositedInVagina(x))"]}
{"id": "eqasc_validation_694", "nl": "Sperm are released into the surrounding water through the osculum.", "fol": "", "prediction": ["all x y.((Ssperm(x) & Osculum(y)) -> ReleasedIntoWater(x,y))"]}
{"id": "eqasc_validation_695", "nl": "male gametes are released into the surrounding water through the osculum", "fol": "", "prediction": ["all x y.((MaleGamete(x) & Osculum(y)) -> ReleasedIntoSurroundingWater(x,y))"]}
{"id": "eqasc_validation_696", "nl": "male gametes are released into the surrounding water through the osculum.", "fol": "", "prediction": ["all x.(MaleGamete(x) -> ReleasedIntoWaterThroughOsculum(x))"]}
{"id": "eqasc_validation_697", "nl": "lightning can cause a forest fire", "fol": "", "prediction": ["all x y.((Lightning(x) & ForestFire(y)) -> Causes(x,y))"]}
{"id": "eqasc_validation_698", "nl": "Bush and forest fires cause enormous damage to vegetation and wildlife.", "fol": "", "prediction": ["all x y.((Bust(x) & ForestFire(y)) -> (CausesEmbarrassmentToVegetation(x) & CausesEmbarrassmentToWildlife(x)))"]}
{"id": "eqasc_validation_699", "nl": "Lightning can cause damage to vegetation and wildlife.", "fol": "", "prediction": ["all x.(Lightning(x) -> (CausesDamage(x,Vegetation) & CausesDamage(x,Wildlife)))"]}
{"id": "eqasc_validation_700", "nl": "Forest fires are bad for the environment.", "fol": "", "prediction": ["all x.(ForestFire(x) -> BadForEnvironment(x))"]}
{"id": "eqasc_validation_701", "nl": "Lightning can be bad for the environment.", "fol": "", "prediction": ["all x.(Lightning(x) -> BadForEnvironment(x))"]}
{"id": "eqasc_validation_702", "nl": "All thunderstorms contain lightning.", "fol": "", "prediction": ["all x.(Thunderstorm(x) -> ContainsLightning(x))"]}
{"id": "eqasc_validation_703", "nl": "thunderstorms can cause forest fires", "fol": "", "prediction": ["all x y.((Thunderstorm(x) & ForestFire(y)) -> Causes(x,y))"]}
{"id": "eqasc_validation_704", "nl": "Like fire cleaning out a forest, it leads to new growth and revitalization.", "fol": "", "prediction": ["all x y.((Fire(x) & Forest(y) & CleansOut(x,y)) -> (LeadsToNewGrowth(x) & Revitalizes(x)))"]}
{"id": "eqasc_validation_705", "nl": "Lightning can cause new growth and revitalization in a forest. ", "fol": "", "prediction": ["all x y.((Lightning(x) & Forest(y)) -> (CausesNewGrowth(x,y) & Revitalizes(x,y)))"]}
{"id": "eqasc_validation_706", "nl": "Lightning is very common during storms.", "fol": "", "prediction": ["all x.(Lightning(x) -> VeryCommonDuringStorms(x))"]}
{"id": "eqasc_validation_707", "nl": "forest fires can be caused by thunder storms ", "fol": "", "prediction": ["all x y.((ForestFire(x) & ThunderStorm(y)) -> CausedBy(x,y))"]}
{"id": "eqasc_validation_708", "nl": "Lightning, overall, is a major cause of fires.", "fol": "", "prediction": ["all x.((Lightning(x) & MajorCauseOfFires(x)) -> MajorCauseOfFires(x))"]}
{"id": "eqasc_validation_709", "nl": "lightning ignites fires", "fol": "", "prediction": ["all x y.((Lightning(x) & Fire(y)) -> Ignites(x,y))"]}
{"id": "eqasc_validation_710", "nl": "Forest fires are examples of wildfires.", "fol": "", "prediction": ["all x.(ForestFire(x) -> Wildfire(x))"]}
{"id": "eqasc_validation_711", "nl": "Wildfires are caused by lightning", "fol": "", "prediction": ["all x.(Wildfire(x) -> (CausedByLightning(x) & CausedByLightning(x)))"]}
{"id": "eqasc_validation_712", "nl": "Lightning can cause a wildfire.", "fol": "", "prediction": ["all x.(Lightning(x) -> CanCauseWildfire(x))"]}
{"id": "eqasc_validation_713", "nl": "Until the town was destroyed by the forest fire.", "fol": "", "prediction": ["Until the town was destroyed by the forest fire."]}
{"id": "eqasc_validation_714", "nl": "Lightning can destroy towns", "fol": "", "prediction": ["all x y.((Lightning(x) & Town(y)) -> CanDestroy(x,y))"]}
{"id": "eqasc_validation_715", "nl": "Summer storms kick up huge clouds of dust and lightning ignites brush fires.", "fol": "", "prediction": ["all x y.((SummerStorm(x) & Lightning(y)) -> (KicksUp(x,y) & IgnitesBrushFires(y)))"]}
{"id": "eqasc_validation_716", "nl": "storms cause fires in the woods", "fol": "", "prediction": ["all x y z.((Storm(x) & Woods(y) & Fire(z)) -> CausesIn(x,y,z))"]}
{"id": "eqasc_validation_717", "nl": "Static electricity is the cause of lightning.", "fol": "", "prediction": ["all x.(StaticElectricity(x) -> CauseOfLightning(x))"]}
{"id": "eqasc_validation_718", "nl": "Static electricity can cause a forest fire.", "fol": "", "prediction": ["all x.(StaticElectricity(x) -> CausesForestFire(x))"]}
{"id": "eqasc_validation_719", "nl": "Forests are often at risk of being destroyed by forest fires.", "fol": "", "prediction": ["all x.(Forest(x) -> (AtRiskOfFeuers(x) & DestroyedByForestFires(x)))"]}
{"id": "eqasc_validation_720", "nl": "lightning can cause forests to be destroyed", "fol": "", "prediction": ["all x y.((Lightning(x) & Forest(y)) -> CausesToBeDismantled(x,y))"]}
{"id": "eqasc_validation_721", "nl": "the type of material through which sound passes changes the speed at which sound travels", "fol": "", "prediction": ["all x y.((Material(x) & SoundPasses(x) & MaterialType(y)) -> ChangesSpeedAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWay"]}
{"id": "eqasc_validation_722", "nl": "Hearing is the act of perceiving sound.", "fol": "", "prediction": ["all x.(Hearing(x) -> PerceivesSound(x))"]}
{"id": "eqasc_validation_723", "nl": "the speed of hearing changes depending on the material passed through", "fol": "", "prediction": ["all x y.((Material(x) & MaterialPassedThrough(y)) -> SpeedOfHearingChanges(x,y))"]}
{"id": "eqasc_validation_724", "nl": "Sound vibrations travel at different speeds through different materials.", "fol": "", "prediction": ["all x y.((SoundVibration(x) & Material(y)) -> TravelsAtDifferentSpeeds(x,y))"]}
{"id": "eqasc_validation_725", "nl": "the type of material through which sound passes changes the sound vibrations", "fol": "", "prediction": ["all x y.((Material(x) & SoundPasses(x)) -> ChangesSoundVibrations(x,y))"]}
{"id": "eqasc_validation_726", "nl": "Sound Sound waves are mechanical waves.", "fol": "", "prediction": ["all x.(SoundWaves(x) -> MechanicalWaves(x))"]}
{"id": "eqasc_validation_727", "nl": "the type of material through which mechanical waves pass change the speed at which they travel", "fol": "", "prediction": ["all x y.((MaterialType(x) & MechanicalWaves(y) & PassThrough(x,y)) -> ChangesSpeedAtTravel(x,y))"]}
{"id": "eqasc_validation_728", "nl": "Sound moves through different materials at different rates ", "fol": "", "prediction": ["all x y z.((Sound(x) & Material(y) & Material(z)) -> MovesAtDifferentRate(x,y,z))"]}
{"id": "eqasc_validation_729", "nl": "Refraction is the effect on a wave when there are changes in a medium.", "fol": "", "prediction": ["all x y.((Refraction(x) & Wave(y) & Medium(z) & ChangesIn(x,y,z)) -> EffectOn(x,y,z))"]}
{"id": "eqasc_validation_730", "nl": "Differences in the speed of sound cause sound waves to be refracted when passing between different media", "fol": "", "prediction": ["all x y.((DifferencesInSpeedOfSound(x) & Media(y)) -> CausesRefractionOfSoundWaves(x,y))"]}
{"id": "eqasc_validation_731", "nl": "On a molecular level, a fibrous material can also slow the speed of transmission of sound.", "fol": "", "prediction": ["all x.((FiberousMaterial(x) & MolecularLevel(x)) -> SlowsTransmissionOfSound(x))"]}
{"id": "eqasc_validation_732", "nl": "Sound passing through a fibrous material will slow down", "fol": "", "prediction": ["all x y.((Sound(x) & FibrousMaterial(y) & PassesThrough(x,y)) -> SlowsDown(x))"]}
{"id": "eqasc_validation_733", "nl": "Sound, a type of energy, is produced by vibrations and travels in waves.", "fol": "", "prediction": ["all x.((Energy(x) & Sound(x)) -> (ProducedByVibrations(x) & TravelsInWaves(x)))"]}
{"id": "eqasc_validation_734", "nl": "the type of material through which waves passes changes the speed at which waves move", "fol": "", "prediction": ["all x y.((Material(x) & Waves(y) & PassesThrough(x,y)) -> ChangesSpeedAtWavesMovement(x,y))"]}
{"id": "eqasc_validation_735", "nl": "Negative feedback controls insulin secretion by the pancreas.", "fol": "", "prediction": ["all x.(NegativeFeedback(x) -> ControlsInsulinSecr\u00e9tionByPancreas(x))"]}
{"id": "eqasc_validation_736", "nl": "Glucose stimulates the pancreas to secrete insulin through negative feedback.", "fol": "", "prediction": ["all x y.((Glucose(x) & Pancreas(y)) -> StimulatesSectitol(x,y))"]}
{"id": "eqasc_validation_737", "nl": "Glucose makes the pancreas secrete insulin.", "fol": "", "prediction": ["all x.(Glucose(x) -> MakesPancreasSectIndividual(x))"]}
{"id": "eqasc_validation_738", "nl": "Feedback inhibition is an example of common biological control mechanism called negative feedback.", "fol": "", "prediction": ["all x.(FeedbackInhibition(x) -> (CommonBiologicalControlMechanism(x) & NegativeFeedback(x)))"]}
{"id": "eqasc_validation_739", "nl": "Feedback  inhibition controls insulin secretion by the pancreas.", "fol": "", "prediction": ["all x.(FeedbackInhibition(x) -> ControlsInsulinSecr\u00e9tionByPancreas(x))"]}
{"id": "eqasc_validation_740", "nl": "Islet cells are located in the pancreas.", "fol": "", "prediction": ["all x.(IsletCell(x) -> LocatedInPancreas(x))"]}
{"id": "eqasc_validation_741", "nl": "islet cells are located where insulin secretion happens", "fol": "", "prediction": ["all x.(IsletCell(x) -> (LocatedWhereInsulinSecr\u00e9tionOccurs(x) & InsulinSecr\u00e9tionOccurs(x)))"]}
{"id": "eqasc_validation_742", "nl": "Sponges are filter feeders.", "fol": "", "prediction": ["all x.(Spot(x) -> FilterFeeder(x))"]}
{"id": "eqasc_validation_743", "nl": "Diet Filter feeders, they eat krill and plankton.", "fol": "", "prediction": ["all x.(DietFilterFilter(x) -> (EatsKrill(x) & EatsPlankton(x)))"]}
{"id": "eqasc_validation_744", "nl": "Sponges eat  plankton.", "fol": "", "prediction": ["all x.(Spot(x) -> EatsPlankton(x))"]}
{"id": "eqasc_validation_745", "nl": "Bottom dwelling organisms such as coral, urchins, and sponges provide a colorful backdrop.", "fol": "", "prediction": ["all x.((BottomDwellingOrganism(x) & (Coral(x) | Urchin(x) | Sponge(x))) -> ColorfulBackground(x))"]}
{"id": "eqasc_validation_746", "nl": "bottom dwelling organisms can be filter feeders", "fol": "", "prediction": ["all x.(BottomDwellingOrganism(x) -> FilterFeeder(x))"]}
{"id": "eqasc_validation_747", "nl": "sponges eat krill and plankton", "fol": "", "prediction": ["all x.(Sponge(x) -> (EatsKrill(x) & EatsPlankton(x)))"]}
{"id": "eqasc_validation_748", "nl": "Clams are filter feeders and thus trap and filter out their food as the water passes by.", "fol": "", "prediction": ["all x.(Clam(x) -> (FilterFeeder(x) & TrapsAndFiltersFood(x) & WaterPassesBy(x)))"]}
{"id": "eqasc_validation_749", "nl": "Sponges trap and filter out food as water passes by", "fol": "", "prediction": ["all x y.((Spot(x) & Water(y)) -> (Traps(x,y) & FiltersOutFood(x,y)))"]}
{"id": "eqasc_validation_750", "nl": "Since mussels are filter-feeders, they clean water as they feed.", "fol": "", "prediction": ["all x.(Mushels(x) -> (FilterFeeder(x) & CleanWater(x)))"]}
{"id": "eqasc_validation_751", "nl": "sponges clean the water", "fol": "", "prediction": ["all x.(Sponge(x) -> CleansWater(x))"]}
{"id": "eqasc_validation_752", "nl": "sponges clean the water as they feed", "fol": "", "prediction": ["all x.(Sponge(x) -> (CleansWater(x) & Feeds(x)))"]}
{"id": "eqasc_validation_753", "nl": "Sponges trap and filter out their food as the water passes by.", "fol": "", "prediction": ["all x.(Spot(x) -> (Traps(x) & FiltersOutFood(x) & WaterPassesBy(x)))"]}
{"id": "eqasc_validation_754", "nl": "Sponges eat krill and plankton", "fol": "", "prediction": ["all x y z.((Spot(x) & Krill(y) & Plankton(z)) -> (Eats(x,y) & Eats(x,z)))"]}
{"id": "eqasc_validation_755", "nl": "sponges clean water", "fol": "", "prediction": ["all x.(Sponge(x) -> CleanWater(x))"]}
{"id": "eqasc_validation_756", "nl": "Baleen whales are filter feeders.", "fol": "", "prediction": ["all x.(BaleenWhale(x) -> FilterFeeder(x))"]}
{"id": "eqasc_validation_757", "nl": "Baleen whales and sponges eat in similar ways.", "fol": "", "prediction": ["all x y.((BaleenWhale(x) & Sponge(y)) -> EatsInSameWay(x,y))"]}
{"id": "eqasc_validation_758", "nl": "Mutualism is a symbiotic relationship in which both species benefit.", "fol": "", "prediction": ["all x.(Mutualism(x) -> (SymbioticRelationship(x) & BenefitsBothSpecies(x)))"]}
{"id": "eqasc_validation_759", "nl": "Dogs and humans are symbiotic species.", "fol": "", "prediction": ["all x.((Dog(x) | Human(x)) -> SymbioticSpecies(x))"]}
{"id": "eqasc_validation_760", "nl": "mutualism exists between dogs and humans", "fol": "", "prediction": ["all x y z.((Dog(x) & Human(y) & Dog(z)) -> Mutualism(x,y,z))"]}
{"id": "eqasc_validation_761", "nl": "Domestication of animals is an example of a symbiotic relationship.", "fol": "", "prediction": ["all x.(DomesticationOfAnimals(x) -> SymbioticRelationship(x))"]}
{"id": "eqasc_validation_762", "nl": "Domestication of animals is an example of Mutualism", "fol": "", "prediction": ["all x.(DomesticationOfAnimals(x) -> Mutualism(x))"]}
{"id": "eqasc_validation_763", "nl": "Domestication of animals is an example of mutualism ", "fol": "", "prediction": ["all x.(DomesticationOfAnimals(x) -> Mutualism(x))"]}
{"id": "eqasc_validation_764", "nl": "Coral and alga have a symbiotic relationship.", "fol": "", "prediction": ["all x.((Coral(x) & Alga(x)) -> SymbioticRelationship(x))"]}
{"id": "eqasc_validation_765", "nl": "The interaction between coral and alga is an example of mutualism.", "fol": "", "prediction": ["all x.((Interaction(x) & Coral(x) & Alga(x)) -> Mutualism(x))"]}
{"id": "eqasc_validation_766", "nl": "Mutualism is an association between two different species which benefits each species.", "fol": "", "prediction": ["all x y.((Mutualism(x) & DifferentSpecies(y)) -> Benefits(x,y))"]}
{"id": "eqasc_validation_767", "nl": "a symbiotic relationship is an association between two different species which benefits each species", "fol": "", "prediction": ["all x y z.((SymbioticRelationship(x) & Species(y) & Species(z)) -> (Association(x,y,z) & BenefitsSpecies(y,z)))"]}
{"id": "eqasc_validation_768", "nl": "Out of the 8,400,000 different species of living beings, there are 400,000 human species.", "fol": "", "prediction": ["all x.((LivingSpecies(x) & HumanSpecies(x)) -> OutOf(x,80000000))"]}
{"id": "eqasc_validation_769", "nl": "Mutualism is a symbiotic relationship in which both living beings benefit.", "fol": "", "prediction": ["all x.(Mutualism(x) -> (SymbioticRelationship(x) & LivingBeing(x) & Benefits(x)))"]}
{"id": "eqasc_validation_770", "nl": "Symbiotic microbes live in the mussels' gills.", "fol": "", "prediction": ["all x.(SymbioticMicrobe(x) -> LivesInMushelsGills(x))"]}
{"id": "eqasc_validation_771", "nl": "Mutualism is a relationship like that of microbes and mussels in which both species benefit.", "fol": "", "prediction": ["all x.(Mutualism(x) -> (Relationship(x,y) & Microbes(y) & Mussels(y) & BenefitsBothSpecies(x,y)))"]}
{"id": "eqasc_validation_772", "nl": "coral and alga both benefit from mutualism", "fol": "", "prediction": ["(BenefitsFromMutualism(Coral) & BenefitsFromMutualism(Alga))"]}
{"id": "eqasc_validation_773", "nl": "Symbiotic relationships are common and add to the complexity of species interactions.", "fol": "", "prediction": ["all x.(SymbioticRelationship(x) -> (Common(x) & AddsComplexity(x)))"]}
{"id": "eqasc_validation_774", "nl": "Mutualism adds to the complexity of species interactions.", "fol": "", "prediction": ["all x.(Mutualism(x) -> AddsToComplexityOfSpeciesInteractions(x))"]}
{"id": "eqasc_validation_775", "nl": "Males have individual territories Has mutually beneficial symbiotic relationship with oxpecker bird.", "fol": "", "prediction": ["all x.(Male(x) -> (HasIndividualTerritories(x) & MutuallyBeneficialSymbioticRelationship(x) & OxpeckerBird(x)))"]}
{"id": "eqasc_validation_776", "nl": "oxpecker birds help other species benefit", "fol": "", "prediction": ["all x y.((OxpeckerBird(x) & Bird(y)) -> HelpsBenefitSpecies(x,y))"]}
{"id": "eqasc_validation_777", "nl": "Another symbiotic relationship is found with cucumbers and corn.", "fol": "", "prediction": ["all x.(SymbioticRelationship(x) -> (Cucumbers(x) & Corn(x)))"]}
{"id": "eqasc_validation_778", "nl": "cucumbers and corn possess a mutualism in which both species benefit.", "fol": "", "prediction": ["all x y.((Cucumber(x) & Corn(y)) -> (HasMutualism(x,y) & Benefits(y,x)))"]}
{"id": "eqasc_validation_779", "nl": "Adolescence is the last stage of life before adulthood.", "fol": "", "prediction": ["all x.(Adolescence(x) -> LastStageOfLifeBeforeAdulthood(x))"]}
{"id": "eqasc_validation_780", "nl": "Adolescence Moving into adolescence, rapid changes occur.", "fol": "", "prediction": ["all x.(Adolescence(x) -> RapidChangesOccur(x))"]}
{"id": "eqasc_validation_781", "nl": "rapid changes occur in the last stage of life before adulthood", "fol": "", "prediction": ["all x y.((RapidChange(x) & StageOfLife(y) & Adulthood(y)) -> OccursInLastStageOfLife(x,y))"]}
{"id": "eqasc_validation_782", "nl": "the last stage of life before adulthood begins with puberty.", "fol": "", "prediction": ["all x.((StageOfLife(x) & Adulthood(x)) -> Puberty(x))"]}
{"id": "eqasc_validation_783", "nl": "Life is very complex for the adolescent.", "fol": "", "prediction": ["all x.(Adolescent(x) -> ComplexLife(x))"]}
{"id": "eqasc_validation_784", "nl": "the last stage of life before adulthood is very complex", "fol": "", "prediction": ["all x.((LeastStageOfLife(x) & BeforeAdulthood(x)) -> VeryComplex(x))"]}
{"id": "eqasc_validation_785", "nl": "Soon after puberty, the adult life stage begins.", "fol": "", "prediction": ["all x.((Pupil(x) & AdultLifeStage(x)) -> Starts(x))"]}
{"id": "eqasc_validation_786", "nl": "Puberty begins the last stage of life before adulthood.", "fol": "", "prediction": ["all x.(Puperty(x) -> EndsStageOfLife(x))"]}
{"id": "eqasc_validation_787", "nl": "the last stage of life before adulthood begins with puberty", "fol": "", "prediction": ["all x.((LeastStageOfLife(x) & Adulthood(x)) -> Puberty(x))"]}
{"id": "eqasc_validation_788", "nl": "Adolescence is a pivotal stage of human development.", "fol": "", "prediction": ["all x.(Adolescence(x) -> PivotalStageOfHumanDevelopment(x))"]}
{"id": "eqasc_validation_789", "nl": "the last stage before adulthood is a pivotal later stage of human development.", "fol": "", "prediction": ["all x.((LeastStageBeforeAdulthood(x) & HumanDevelopment(x)) -> PivotalLaterStage(x))"]}
{"id": "eqasc_validation_790", "nl": "Adolescence is a fascinating and crazy time of life.", "fol": "", "prediction": ["all x.(Adolescence(x) -> (FunnyTimeOfLife(x) & CrazyTimeOfLife(x)))"]}
{"id": "eqasc_validation_791", "nl": "Adolescence is a crazy time before adulthood", "fol": "", "prediction": ["all x.(Adolescence(x) -> (RainfulTime(x) & BeforeAdulthood(x)))"]}
{"id": "eqasc_validation_792", "nl": "Phylogeny is the evolutionary history of a group of related organisms.", "fol": "", "prediction": ["all x y.((Phylogeny(x) & Organism(y)) -> EvolutionaryHistory(x,y))"]}
{"id": "eqasc_validation_793", "nl": "Classification can be based on phylogeny.", "fol": "", "prediction": ["all x.(Classification(x) -> BasedOnPhylogeny(x))"]}
{"id": "eqasc_validation_794", "nl": "classification can be based in the evolutionary history of a group of related organisms", "fol": "", "prediction": ["all x y.((Organism(x) & RelatedOrganism(y)) -> EvolutionaryHistory(x,y))"]}
{"id": "eqasc_validation_795", "nl": "Much of evolutionary biology involves the history of organic diversity.", "fol": "", "prediction": ["all x.(EvolutionaryBiology(x) -> InvolvesHistoryOfOrganicDiversity(x))"]}
{"id": "eqasc_validation_796", "nl": "Phylogeny is the history and organic diversity of related organisms", "fol": "", "prediction": ["all x y.((Phylogeny(x) & Organism(y)) -> (History(x,y) & OrganicDiversity(x,y)))"]}
{"id": "eqasc_validation_797", "nl": "Metazoan phylogeny Phylogeny of phyla is poorly understood.", "fol": "", "prediction": ["all x.(MetazoanPhylogeny(x) -> PoorlyUnderstood(x))"]}
{"id": "eqasc_validation_798", "nl": "The evolutionary history of metazoas is poorly understood.", "fol": "", "prediction": ["all x.(Metazoa(x) -> PoorlyUnderstoodEvolutionaryHistory(x))"]}
{"id": "eqasc_validation_799", "nl": "An organism's behavior is related to the organism's environment.", "fol": "", "prediction": ["all x y.((Organism(x) & Environment(y)) -> BehaviorRelated(x,y))"]}
{"id": "eqasc_validation_800", "nl": "Phylogeny may explain the evolutionary part of organism's environment.", "fol": "", "prediction": ["all x y.((Phylogeny(x) & Organism(y)) -> ExplainsEvolution(x,y))"]}
{"id": "eqasc_validation_801", "nl": "a group of related organisms is a phyla", "fol": "", "prediction": ["all x.((GroupOfRelatedOrganisms(x) & RelatedOrganisms(x)) -> Phyla(x))"]}
{"id": "eqasc_validation_802", "nl": "a speedometer is used for giving a driver feedback on the speed of their vehicle", "fol": "", "prediction": ["all x y.((Speedometer(x) & Driver(y)) -> GivesFeedbackOnSpeed(x,y))"]}
{"id": "eqasc_validation_803", "nl": "Speed is in miles per hour and distance is in miles with yards as a sub-measure.", "fol": "", "prediction": ["all x y.((Speed(x) & Distance(y)) -> (InMilesPerHour(x) & InMiles(y) & Withyards(y)))"]}
{"id": "eqasc_validation_804", "nl": "Speedometers are used to give a driver feedback on how many miles per hour their vehicle goes.", "fol": "", "prediction": ["all x y.((Speedometer(x) & Driver(y)) -> GivesFeedbackOnMilesPerHour(x,y))"]}
{"id": "eqasc_validation_805", "nl": "Odometers and speedometers measure distance and speed.", "fol": "", "prediction": ["all x.((Odometer(x) | Speedometer(x)) -> (MeasuresDistance(x) & MeasuresSpeed(x)))"]}
{"id": "eqasc_validation_806", "nl": "a speedometer measures the rate of travel", "fol": "", "prediction": ["all x.(Speedometer(x) -> MeasuresRateOfTravel(x))"]}
{"id": "eqasc_validation_807", "nl": "Speed is the measure of motion.", "fol": "", "prediction": ["all x.(Speed(x) -> MeasureOfMotion(x))"]}
{"id": "eqasc_validation_808", "nl": "a speedometer is used for giving a driver feedback on the measure of motion of their vehicle", "fol": "", "prediction": ["all x y.((Speedometer(x) & Driver(y)) -> GivesFeedbackOnMotion(x,y))"]}
{"id": "eqasc_validation_809", "nl": "Speedometer now shows maximum speed of 90 mph.", "fol": "", "prediction": ["all x.(Speedometer(x) -> ShowsMaxSpeedOf90(x))"]}
{"id": "eqasc_validation_810", "nl": "speedometer shows the driver the vehicle's MPH", "fol": "", "prediction": ["all x y.((Speedometer(x) & Driver(y)) -> ShowsMPH(x,y))"]}
{"id": "eqasc_validation_811", "nl": "Vehicles reduce speed at road bends.", "fol": "", "prediction": ["all x.(Vehicle(x) -> ReducesSpeedAtRoadBends(x))"]}
{"id": "eqasc_validation_812", "nl": "a speedometer can help a driver navigate road bends", "fol": "", "prediction": ["all x y.((Speedometer(x) & Driver(y)) -> NavigatesRoadBends(x,y))"]}
{"id": "eqasc_validation_813", "nl": "Speed is the magnitude of velocity.", "fol": "", "prediction": ["all x.(Speed(x) -> MagnitudeOfVelocity(x))"]}
{"id": "eqasc_validation_814", "nl": "A speedometer is used for giving feedback on the velocity of a vehicle.", "fol": "", "prediction": ["all x y.((Speedometer(x) & Vehicle(y)) -> GivesFeedbackOnVelocity(x,y))"]}
{"id": "eqasc_validation_815", "nl": "Vehicle speed is checked by radar.", "fol": "", "prediction": ["all x.(VehicleSpeedCheckedByRadar(x) -> CheckedBy(x))"]}
{"id": "eqasc_validation_816", "nl": "A speedometer should give the same reading as radar.", "fol": "", "prediction": ["all x y.((Speedometer(x) & Radar(y)) -> GivesSameReading(x,y))"]}
{"id": "eqasc_validation_817", "nl": "an odometer is used to measures distances ", "fol": "", "prediction": ["all x y.((Odometer(x) & Distance(y)) -> Measures(x,y))"]}
{"id": "eqasc_validation_818", "nl": "Average vehicle speed rises by only 0.3 miles per hour.", "fol": "", "prediction": ["all x.((VehicleSpeed(x) & Average(x,0.3)) -> Rises(x))"]}
{"id": "eqasc_validation_819", "nl": "a speedometer measures miles per hour", "fol": "", "prediction": ["all x.(Speedometer(x) -> MeasuresMilesPerHour(x))"]}
{"id": "eqasc_validation_820", "nl": "A driver feeds feedback on the speed of their car with a speedometer.", "fol": "", "prediction": ["all x y.((Driver(x) & Car(y)) -> FeedsFeedbackOnSpeedWithSpeedometer(x,y))"]}
{"id": "eqasc_validation_821", "nl": "A speedometer tells the driver how fast the vehicle is going ", "fol": "", "prediction": ["all x y.((Speedometer(x) & Driver(y)) -> TellsHowFastVehicleGoing(x,y))"]}
{"id": "eqasc_validation_822", "nl": "Certainly, no driver wants to get a speeding ticket.", "fol": "", "prediction": ["all x.((Driver(x) & -WantsSpeedingTicket(x)) -> -WantsSpeedingTicket(x))"]}
{"id": "eqasc_validation_823", "nl": "A driver uses a speedometer to avoid getting a ticket.", "fol": "", "prediction": ["all x y.((Driver(x) & Speedometer(y)) -> UsesToAvoidTicket(x,y))"]}
{"id": "eqasc_validation_824", "nl": "Excessive speed is a factor in many accidents.", "fol": "", "prediction": ["all x.(ExcessiveSpeed(x) -> FactorInManyAccidents(x))"]}
{"id": "eqasc_validation_825", "nl": "A speedometer can help prevent accidents. ", "fol": "", "prediction": ["all x.(Speedometer(x) -> HelpsPreventAccidents(x))"]}
{"id": "eqasc_validation_826", "nl": "a speedometer is used for giving a driver feedback on the speed of their truck", "fol": "", "prediction": ["all x y.((Speedometer(x) & Driver(y)) -> GivesFeedbackOnSpeed(x,y))"]}
{"id": "eqasc_validation_827", "nl": "a polar bear requires a cold environment", "fol": "", "prediction": ["all x.(PolarBear(x) -> RequiresColdEnvironment(x))"]}
{"id": "eqasc_validation_828", "nl": "Polar bears grow fur to survive in the cold.", "fol": "", "prediction": ["all x.(PolarBear(x) -> GrowsFurToSurviveInCold(x))"]}
{"id": "eqasc_validation_829", "nl": "A polar bear grows fur to survive in its environment", "fol": "", "prediction": ["all x.(PolarBear(x) -> GrowsFurToSurvive(x))"]}
{"id": "eqasc_validation_830", "nl": "Polar bears primarily eat seals.", "fol": "", "prediction": ["all x.(PolarBear(x) -> EatsSeals(x))"]}
{"id": "eqasc_validation_831", "nl": "Seals live in a cold environment.", "fol": "", "prediction": ["all x.(Seal(x) -> LivesInColdEnvironment(x))"]}
{"id": "eqasc_validation_832", "nl": "Polar bears have two layers of fur for further protection from the cold.", "fol": "", "prediction": ["all x.(PolarBear(x) -> HasTwoLayersOfFur(x))"]}
{"id": "eqasc_validation_833", "nl": "Polar bears have two layers of fur to live in their environment", "fol": "", "prediction": ["all x.(PolarBear(x) -> (HasTwoLayersOfFur(x) & LivesInEnvironment(x)))"]}
{"id": "eqasc_validation_834", "nl": "Polar bears live in the Arctic.", "fol": "", "prediction": ["all x.(PolarBear(x) -> LivesInArctic(x))"]}
{"id": "eqasc_validation_835", "nl": "The Arctic is a cold environment.", "fol": "", "prediction": ["all x.(Arctic(x) -> ColdEnvironment(x))"]}
{"id": "eqasc_validation_836", "nl": "Cold weather, it is winter and it is snowing.", "fol": "", "prediction": ["all x.(ColdWeather(x) -> (IsWinter(x) & Snowing(x)))"]}
{"id": "eqasc_validation_837", "nl": "Polar bears require a winter environment with snow.", "fol": "", "prediction": ["all x.(PolarBear(x) -> RequiresWinterEnvironmentWithSnow(x))"]}
{"id": "eqasc_validation_838", "nl": "Lynx live in cold, snowy environments.", "fol": "", "prediction": ["all x.(Lynx(x) -> LivesInColdSnowyEnvironments(x))"]}
{"id": "eqasc_validation_839", "nl": "Lynx and polar bears have similar climate requirements.", "fol": "", "prediction": ["all x y.((Lynx(x) & PolarBear(y)) -> SimilarClimateRequirements(x,y))"]}
{"id": "eqasc_validation_840", "nl": "Arctic air masses are exceedingly cold, with the Arctic Ocean as their source region.", "fol": "", "prediction": ["all x.(ArcticAirMass(x) -> (ExtremelyCold(x) & SourceRegionArcticOcean(x)))"]}
{"id": "eqasc_validation_841", "nl": "a polar bear can live in the Arctic", "fol": "", "prediction": ["all x.(PolarBear(x) -> CanLiveInArctic(x))"]}
{"id": "eqasc_validation_842", "nl": "when a hurricane moves over land , that hurricane will decrease in strength", "fol": "", "prediction": ["all x y z.((Hurricane(x) & Land(y) & Land(z)) -> (MovesOver(x,y) & DecreasesStrength(x,z)))"]}
{"id": "eqasc_validation_843", "nl": "When a hurricane hits land, it loses heat and moisture and weakens.", "fol": "", "prediction": ["all x.(Hurricane(x) -> (LosesHeat(x) & LosesMoisture(x) & Weakens(x)))"]}
{"id": "eqasc_validation_844", "nl": "As a hurricane decreases in strength, it loses heat and moisture.", "fol": "", "prediction": ["all x.((Hurricane(x) & DecreasesStrength(x)) -> (LosesHeat(x) & LosesMoisture(x)))"]}
{"id": "eqasc_validation_845", "nl": "Large bodies of land are called continents.", "fol": "", "prediction": ["all x.(LargeBodyOfLand(x) -> Continent(x))"]}
{"id": "eqasc_validation_846", "nl": "When hurricanes move over continents, their strength decreases.", "fol": "", "prediction": ["all x y.((Hurricane(x) & continent(y)) -> MovesOver(x,y))"]}
{"id": "eqasc_validation_847", "nl": "Hurricanes grow strength from warm waters.", "fol": "", "prediction": ["all x.(Hurricane(x) -> GrowsStrengthFromWarmWaters(x))"]}
{"id": "eqasc_validation_848", "nl": "Hurricanes are worse over warm water and weaker over land", "fol": "", "prediction": ["all x.(Hurricane(x) -> (WorseOverWarmWater(x) & WeakerOverLand(x)))"]}
{"id": "eqasc_validation_849", "nl": "Hurricanes are divided into five categories of strength based on the Saffir-Simpson scale .", "fol": "", "prediction": ["all x.(Hurricane(x) -> (SaffirSimpsonScale(x) & Strength(x,5)))"]}
{"id": "eqasc_validation_850", "nl": "When a hurricane moves over land it drops on the Saffir-Simpson scale.", "fol": "", "prediction": ["all x.((Hurricane(x) & MovesOverLand(x)) -> DropsOnSaffirSimpsonScale(x))"]}
{"id": "eqasc_validation_851", "nl": "Hurricanes are extremely dangerous storms.", "fol": "", "prediction": ["all x.(Hurricane(x) -> ExtremelyDangerousStorm(x))"]}
{"id": "eqasc_validation_852", "nl": "when extremely dangerous storms move over land, they decrease in strength", "fol": "", "prediction": ["all x y.((Storm(x) & ExtremelyDangerous(x) & MovesOverLand(x)) -> DecreasesStrength(y))"]}
{"id": "eqasc_validation_853", "nl": "Hurricanes form over the warm tropical water in ocean and die down when they move over land.", "fol": "", "prediction": ["all x.(Hurricane(x) -> (FormsOverWarmTropicalWater(x) & DiesDown(x)))"]}
{"id": "eqasc_validation_854", "nl": "hurricanes form over the warm tropical water in ocean decrease strength on ground", "fol": "", "prediction": ["all x y.((Hurricane(x) & WarmTropicalWater(y)) -> FormsOver(x,y))"]}
{"id": "eqasc_validation_855", "nl": "Hurricanes A hurricane is a type of tropical cyclone.", "fol": "", "prediction": ["all x.(Hurricane(x) -> TropicalCyclone(x))"]}
{"id": "eqasc_validation_856", "nl": "when a tropical cyclone moves over land, it will decrease in strength", "fol": "", "prediction": ["all x y.((TropicalCyclone(x) & MovesOverLand(x)) -> DecreasesStrength(y))"]}
{"id": "eqasc_validation_857", "nl": "Blood is a fluid connective tissue.", "fol": "", "prediction": ["all x.(Blood(x) -> FluidConnectiveTissue(x))"]}
{"id": "eqasc_validation_858", "nl": "Blood is a connective tissue and it carries and delivers oxygen and nutrient to tissues.", "fol": "", "prediction": ["all x.(Blood(x) -> (ConnectiveTissue(x) & CarriesOxygen(x) & DeliversNutrient(x)))"]}
{"id": "eqasc_validation_859", "nl": "Blood is a fluid tissue that delivers oxygen and nutrients to other tissues", "fol": "", "prediction": ["all x.(Blood(x) -> (FluidTissue(x) & DeliversOxygen(x) & DeliversNutrients(x)))"]}
{"id": "eqasc_validation_860", "nl": "Connective tissue is classed as visco-elastic.", "fol": "", "prediction": ["all x.(ConnectiveTissue(x) -> ViscoElastic(x))"]}
{"id": "eqasc_validation_861", "nl": "Blood is classed as visco-elastic.", "fol": "", "prediction": ["all x.(Blood(x) -> ViscoElastic(x))"]}
{"id": "eqasc_validation_862", "nl": "Blood is pulsed through the body.", "fol": "", "prediction": ["all x.(Blood(x) -> PulsedThroughBody(x))"]}
{"id": "eqasc_validation_863", "nl": "fluid connective tissue is pulsed through the body", "fol": "", "prediction": ["all x y.((FluidConnectiveTissue(x) & Body(y)) -> PulsedThrough(x,y))"]}
{"id": "eqasc_validation_864", "nl": "All tissues and fluids in our body contain minerals.", "fol": "", "prediction": ["all x.((Tissues(x) & Fluids(x)) -> ContainsMinerals(x))"]}
{"id": "eqasc_validation_865", "nl": "Blood in our body contains minerals", "fol": "", "prediction": ["all x.((Blood(x) & InBody(x)) -> ContainsMinerals(x))"]}
{"id": "eqasc_validation_866", "nl": "Liquids A fluid is any substance that flows, and liquids are examples of fluids.", "fol": "", "prediction": ["all x.(Liquid(x) -> (Fluid(x) & Flows(x) & Liquids(x)))"]}
{"id": "eqasc_validation_867", "nl": "blood is a liquid connective tissue", "fol": "", "prediction": ["all x.(Blood(x) -> LiquidConnectiveTissue(x))"]}
{"id": "eqasc_validation_868", "nl": "Blood carries oxygen to the brain.", "fol": "", "prediction": ["all x.(Blood(x) -> CarriesOxygenToBrain(x))"]}
{"id": "eqasc_validation_869", "nl": "A fluid connective tissue carries oxygen to the brain", "fol": "", "prediction": ["all x y.((FluidConnectiveTissue(x) & Brain(y)) -> CarriesOxygenTo(x,y))"]}
{"id": "eqasc_validation_870", "nl": "Connective tissue cancers are rare.", "fol": "", "prediction": ["all x.(ConnectiveTissueCancer(x) -> Rare(x))"]}
{"id": "eqasc_validation_871", "nl": "Blood cancers are rare.", "fol": "", "prediction": ["all x.(BloodCancer(x) -> Rare(x))"]}
{"id": "eqasc_validation_872", "nl": "a compass is used to navigate oceans", "fol": "", "prediction": ["all x y.((Compass(x) & Ocean(y)) -> Navigates(x,y))"]}
{"id": "eqasc_validation_873", "nl": "Ocean waves travel on the surface of the water.", "fol": "", "prediction": ["all x y.((OceanWaves(x) & Water(y)) -> TravelsOnSurface(x,y))"]}
{"id": "eqasc_validation_874", "nl": "A compass is used to travel on the surface of the water.", "fol": "", "prediction": ["all x.(Compass(x) -> TravelsOnWaterSurface(x))"]}
{"id": "eqasc_validation_875", "nl": "Magnets are used in compasses.", "fol": "", "prediction": ["all x.(Magnet(x) -> UsedInCompass(x))"]}
{"id": "eqasc_validation_876", "nl": "magnets are used to navigate oceans", "fol": "", "prediction": ["all x y.((Magnet(x) & Ocean(y)) -> Navigates(x,y))"]}
{"id": "eqasc_validation_877", "nl": "Largest of the oceans on Earth is the Pacific Ocean .", "fol": "", "prediction": ["(LargestOcean(x) & OnEarth(x))"]}
{"id": "eqasc_validation_878", "nl": "a compass is used to navigate the Pacific", "fol": "", "prediction": ["all x y.((Compass(x) & Pacific(y)) -> Navigates(x,y))"]}
{"id": "eqasc_validation_879", "nl": "On moonless nights they navigate solely with the geomagnetic compass.", "fol": "", "prediction": ["all x.(MoonlessNight(x) -> NavigatesWithCompass(x))"]}
{"id": "eqasc_validation_880", "nl": "oceans can be navigated even on moonless nights", "fol": "", "prediction": ["all x.((Ocean(x) & MoonlessNight(x)) -> NavigatesOn(x,y))"]}
{"id": "eqasc_validation_881", "nl": "And to the east is the Atlantic Ocean.", "fol": "", "prediction": ["(East is AtlanticOcean(x) & ToEast(x))"]}
{"id": "eqasc_validation_882", "nl": "a compass is used to navigate the Atlantic", "fol": "", "prediction": ["all x y.((Compass(x) & AtlanticAtlantic(y)) -> Navigates(x,y))"]}
{"id": "eqasc_validation_883", "nl": "Navigation by compass is especially difficult during a magnetic storm.", "fol": "", "prediction": ["all x.((Compass(x) & MagneticStorm(x)) -> DifficultNavigation(x))"]}
{"id": "eqasc_validation_884", "nl": "Navigating the oceans can be more difficult during a magnetic storm", "fol": "", "prediction": ["all x y.((MagneticStorm(x) & Ocean(y)) -> MoreDifficultToNavigate(x,y))"]}
{"id": "eqasc_validation_885", "nl": "Map navigators tend to use Grid North, or Magnetic north as as default.", "fol": "", "prediction": ["all x.(MapNavigator(x) -> (UsesGridNorth(x) | UsesMagneticNorth(x)))"]}
{"id": "eqasc_validation_886", "nl": "A compass is used to find magnetic north.", "fol": "", "prediction": ["all x.(Compass(x) -> FindsMagneticNorth(x))"]}
{"id": "eqasc_validation_887", "nl": "Magnets are used to navigate oceans", "fol": "", "prediction": ["all x y.((Magnet(x) & Ocean(y)) -> Navigates(x,y))"]}
{"id": "eqasc_validation_888", "nl": "You can navigate through the Pacific with a compass.", "fol": "", "prediction": ["all x.((Compass(x) & NavigatesPacific(x)) -> CanBeHas(x,Compass))"]}
{"id": "eqasc_validation_889", "nl": "Nautical charts are used by mariners and boaters to safely navigate on the ocean.", "fol": "", "prediction": ["all x y.((NauticalChart(x) & Mariner(y) & Boater(y)) -> SafeNavigate(x,y))"]}
{"id": "eqasc_validation_890", "nl": "Mariners use the compass to travel the ocean", "fol": "", "prediction": ["all x y.((Mariner(x) & Compass(y)) -> TravelsOcean(x,y))"]}
{"id": "eqasc_validation_891", "nl": "Direction is in degrees from north as measured by a compass.", "fol": "", "prediction": ["all x.(Direction(x) -> (DegreesFromNorth(x) & MeasuredByCompass(x)))"]}
{"id": "eqasc_validation_892", "nl": "direction in degrees is used to navigate oceans", "fol": "", "prediction": ["all x y.((Direction(x) & Degrees(y)) -> NavigatesOceans(x,y))"]}
{"id": "eqasc_validation_893", "nl": "Magnetism is that thing that happens with magnets and compasses and the earth.", "fol": "", "prediction": ["all x.(Magnetism(x) -> (HasMagnets(x) & HasCompasses(x) & HasEarth(x)))"]}
{"id": "eqasc_validation_894", "nl": "magnetism is used to navigate oceans", "fol": "", "prediction": ["all x y.((Magnetism(x) & Ocean(y)) -> Navigates(x,y))"]}
{"id": "eqasc_validation_895", "nl": "Large ocean-going vessels use a gyrocompass as their steering compass.", "fol": "", "prediction": ["all x.((OceanGoingVessel(x) & UsesGyrocompass(x)) -> SteeringCompass(x))"]}
{"id": "eqasc_validation_896", "nl": "compasses are used for steering", "fol": "", "prediction": ["all x.(Compass(x) -> UsedForSteering(x))"]}
{"id": "eqasc_validation_897", "nl": "Precipitation increases moisture.", "fol": "", "prediction": ["all x.(Precipitation(x) -> IncreasesMoisture(x))"]}
{"id": "eqasc_validation_898", "nl": "And precipitation amounts depend on the rate at which moisture condenses.", "fol": "", "prediction": ["(all x.(MoistureCondensation(x) -> DependsOnRate(x)))"]}
{"id": "eqasc_validation_899", "nl": "the amount of precipitation depends on condensation", "fol": "", "prediction": ["all x.(Precipitation(x) -> DependsOnCondensation(x))"]}
{"id": "eqasc_validation_900", "nl": "Rain increases moisture.", "fol": "", "prediction": ["all x.(Rain(x) -> IncreasesMoisture(x))"]}
{"id": "eqasc_validation_901", "nl": "Rain is liquid precipitation.", "fol": "", "prediction": ["all x.(Rain(x) -> LiquidPrecipitation(x))"]}
{"id": "eqasc_validation_902", "nl": "rain increases moisture", "fol": "", "prediction": ["all x.(Rain(x) -> IncreasesMoisture(x))"]}
{"id": "eqasc_validation_903", "nl": "Local precipitation increases sharply with altitude.", "fol": "", "prediction": ["all x.((LocalPrecipitation(x) & Altitude(x)) -> IncreasesSharply(x))"]}
{"id": "eqasc_validation_904", "nl": "moisture increases sharply with altitude", "fol": "", "prediction": ["all x.((Moisture(x) & Altitude(x)) -> IncreasesSharplyWithAltitude(x))"]}
{"id": "eqasc_validation_905", "nl": "Moisture conditions range from damp to dry.", "fol": "", "prediction": ["all x.(MoistureCondition(x) -> (Damp(x) | Dry(x)))"]}
{"id": "eqasc_validation_906", "nl": "Precipitation increases conditions from dry to damp", "fol": "", "prediction": ["all x y.((Precipitation(x) & DryCondition(y) & DampCondition(y)) -> IncreasesConditions(x,y))"]}
{"id": "eqasc_validation_907", "nl": "Moisture is a necessary ingredient for the production of clouds and precipitation.", "fol": "", "prediction": ["all x.(Moisture(x) -> (NecessaryIngredient(x) & ProducesClouds(x) & ProducesPrecipitation(x)))"]}
{"id": "eqasc_validation_908", "nl": "clouds are necessary for precipitation", "fol": "", "prediction": ["all x.(Cloud(x) -> NecessaryForPrecipitation(x))"]}
{"id": "eqasc_validation_909", "nl": "Most precipitation occurs as rainfall.", "fol": "", "prediction": ["all x.(Precipitation(x) -> Rainfall(x))"]}
{"id": "eqasc_validation_910", "nl": "Rainfall increases moisture.", "fol": "", "prediction": ["all x.(Rainfall(x) -> IncreasesMoisture(x))"]}
{"id": "eqasc_validation_911", "nl": "All precipitation amounts are in inches.", "fol": "", "prediction": ["all x.(PrecipitationAmount(x) -> InInches(x))"]}
{"id": "eqasc_validation_912", "nl": "moisture is measured in inches ", "fol": "", "prediction": ["all x.(MeasuresMoistureInInches(x) -> MoistureMeasuredInInches(x))"]}
{"id": "eqasc_validation_913", "nl": "Moisture is related to the electrical conductivity, which increases with increasing moisture levels.", "fol": "", "prediction": ["all x.(Moisture(x) -> (RelatedToElectricalConductivity(x) & IncreasesWithIncreasedMoistureLevels(x)))"]}
{"id": "eqasc_validation_914", "nl": "The electrical conductivity of wood increases after precipitation falls on it", "fol": "", "prediction": ["all x y.((Wood(x) & Precipitation(y) & FallsOn(x,y)) -> IncreasesElectricalConductivity(x))"]}
{"id": "eqasc_validation_915", "nl": "a spider web is used to capture food by spiders", "fol": "", "prediction": ["all x y z.((SpiderWeb(x) & Spider(y) & Food(z)) -> CapturesBy(x,y,z))"]}
{"id": "eqasc_validation_916", "nl": "Black widow spiders construct funnel-shaped webs.", "fol": "", "prediction": ["all x.(BlackWifeSpider(x) -> ConstructsFunnelShapedWebs(x))"]}
{"id": "eqasc_validation_917", "nl": "black widows use webs to capture food", "fol": "", "prediction": ["all x.(BlackWife(x) -> UsesWebsToCaptureFood(x))"]}
{"id": "eqasc_validation_918", "nl": "Spiders inject venom into the body of a captured insect to paralyze it.", "fol": "", "prediction": ["all x y.((Spider(x) & CapturedInsect(y)) -> InjectsVenom(x,y))"]}
{"id": "eqasc_validation_919", "nl": "Eight legged arachnid capture food with a web and inject venom to paralyze it to eat", "fol": "", "prediction": ["all x y z.((Arachnid(x) & EightLegged(x) & Food(y) & Web(z)) -> (Captures(x,y) & InjectsVenom(x,z) & Paralyzes(x,y)))"]}
{"id": "eqasc_validation_920", "nl": "Crab spiders spin no webs.", "fol": "", "prediction": ["all x.(CrabSpider(x) -> SpinsNoWebs(x))"]}
{"id": "eqasc_validation_921", "nl": "a web is a tool to capture food", "fol": "", "prediction": ["all x.(Web(x) -> CapturesFood(x))"]}
{"id": "eqasc_validation_922", "nl": "Spiders usually eat insects.", "fol": "", "prediction": ["all x.(Spider(x) -> EatsInsects(x))"]}
{"id": "eqasc_validation_923", "nl": "webs capture insects.", "fol": "", "prediction": ["all x.(Web(x) -> CapturesInsects(x))"]}
{"id": "eqasc_validation_924", "nl": "Web spinning spiders spin webs to catch insects.", "fol": "", "prediction": ["all x y.((WebSpinningSpider(x) & Web(y)) -> SpinsToCatchInsects(x,y))"]}
{"id": "eqasc_validation_925", "nl": "spiders catch insects by spinning", "fol": "", "prediction": ["all x y.((Spider(x) & Insect(y)) -> (Catch(x,y) & Spin(x,y)))"]}
{"id": "eqasc_validation_926", "nl": "Spider Spiders have eight legs.", "fol": "", "prediction": ["all x.(Spider(x) -> HasEightLegs(x))"]}
{"id": "eqasc_validation_927", "nl": "Webs are built to capture food by eight legged creatures.", "fol": "", "prediction": ["all x.(Web(x) -> (CapturesFood(x) & ByEightLeggedCreatures(x)))"]}
{"id": "eqasc_validation_928", "nl": "Spider webs are interesting traps.", "fol": "", "prediction": ["all x.(SpiderWeb(x) -> InterestingTrap(x))"]}
{"id": "eqasc_validation_929", "nl": "a spider uses traps to capture food", "fol": "", "prediction": ["all x y z.((Spider(x) & Trap(y) & Food(z)) -> UsesToCapture(x,y,z))"]}
{"id": "eqasc_validation_930", "nl": "Spiders are also arachnids.", "fol": "", "prediction": ["all x.(Spider(x) -> Arachnid(x))"]}
{"id": "eqasc_validation_931", "nl": "A web is used to capture food by arachnids.", "fol": "", "prediction": ["all x y.((Web(x) & Arachnid(y)) -> CapturesFood(x,y))"]}
{"id": "eqasc_validation_932", "nl": "Cobweb spiders construct webs in corners and areas of little traffic such as basements.", "fol": "", "prediction": ["all x y.((CobwebSpider(x) & Corner(y) & LittleTraffic(y)) -> ConstructsWebsIn(x,y))"]}
{"id": "eqasc_validation_933", "nl": "A cobweb is used to capture food", "fol": "", "prediction": ["all x.(Cobweb(x) -> CapturesFood(x))"]}
{"id": "eqasc_validation_934", "nl": "Larger numbers of spiders and spider webs means there are many insects available for food.", "fol": "", "prediction": ["all x.((Spider(x) & SpiderWeb(x)) -> exists y.(Insect(y) & AvailableForFood(y)))"]}
{"id": "eqasc_validation_935", "nl": "a spider web is used to capture insects by spiders", "fol": "", "prediction": ["all x y z.((SpiderWeb(x) & Spider(y) & Insect(z)) -> CapturesBy(x,y,z))"]}
{"id": "eqasc_validation_936", "nl": "Spiders are the largest group of arachnids.", "fol": "", "prediction": ["all x.(Spider(x) -> Arachnid(x))"]}
{"id": "eqasc_validation_937", "nl": "Some arachnids capture food with a web.", "fol": "", "prediction": ["exists x.(Arachnid(x) & CapturesFoodWithWeb(x))"]}
{"id": "eqasc_validation_938", "nl": "Spiders build webs from silk produced in their abdomen.", "fol": "", "prediction": ["all x y.((Spider(x) & Silk(y)) -> BuildsWebsFrom(x,y))"]}
{"id": "eqasc_validation_939", "nl": "spiders use silk to capture food", "fol": "", "prediction": ["all x y.((Spider(x) & Silk(y)) -> UsesToCaptureFood(x,y))"]}
{"id": "eqasc_validation_940", "nl": "Protozoa can be classified on the basis of how they move.", "fol": "", "prediction": ["all x.(Protozoa(x) -> CanBeClassifiedOnMovement(x))"]}
{"id": "eqasc_validation_941", "nl": "Flagellates are the smallest of the protozoa and use a few whip like flagella to move.", "fol": "", "prediction": ["all x.(Flagellate(x) -> (SmallestOfProtozoa(x) & UsesFlagella(x)))"]}
{"id": "eqasc_validation_942", "nl": "flagellates are small protozoa ", "fol": "", "prediction": ["all x.(Flagellate(x) -> (SmallProtozoa(x) & SmallProtozoa(x)))"]}
{"id": "eqasc_validation_943", "nl": "For ease of identification, cotton seedlings are classified into the following three categories.", "fol": "", "prediction": ["all x.((CottonSeedling(x) & ClassifiedInto(x,3)) -> EasyOfIdentification(x))"]}
{"id": "eqasc_validation_944", "nl": "Protozoa can be identified by how they move.", "fol": "", "prediction": ["all x.(Protozoa(x) -> Moves(x))"]}
{"id": "eqasc_validation_945", "nl": "Cilia wave in a coordinated way to move the protozoa in one direction.", "fol": "", "prediction": ["all x y.((Cilia(x) & Protozoa(y)) -> (CoordinatedWave(x,y) & MovesInOneDirection(x,y)))"]}
{"id": "eqasc_validation_946", "nl": "cilia wave to move", "fol": "", "prediction": ["all x y.((CiliaWave(x) & CiliaWave(y)) -> Moves(x,y))"]}
{"id": "eqasc_validation_947", "nl": "Paramecium are protozoa, single celled animals.", "fol": "", "prediction": ["all x.(Paramecium(x) -> (Protozoa(x) & SingleLeaved(x)))"]}
{"id": "eqasc_validation_948", "nl": "paramecium can be classified on how they move", "fol": "", "prediction": ["all x.(Paramecium(x) -> (Movement(x) & Moves(x) & ClassifiedOn(x)))"]}
{"id": "eqasc_validation_949", "nl": "single celled animals can be classified on the basis of how they move", "fol": "", "prediction": ["all x.(SingleLeavedAnimal(x) -> CanBeClassifiedOnBaseOnMovement(x))"]}
{"id": "eqasc_validation_950", "nl": "Cryptosporidium parvum is the hardest protozoa to kill.", "fol": "", "prediction": ["all x.(CryptosporidiumParvum(x) -> HardestProtozoaToKill(x))"]}
{"id": "eqasc_validation_951", "nl": "Animals like cyptosporidium are often classified on how they move.", "fol": "", "prediction": ["all x.((Animal(x) & Cyptosporidium(x)) -> ClassifiedOnMovement(x))"]}
{"id": "eqasc_validation_952", "nl": "Ciliates are ciliated protozoa.", "fol": "", "prediction": ["all x.(Ciliate(x) -> CiliatedProtozoa(x))"]}
{"id": "eqasc_validation_953", "nl": "Ciliates can be classified on the basis of how they move.", "fol": "", "prediction": ["all x.(Ciliate(x) -> CanBeClassifiedOnMovement(x))"]}
{"id": "eqasc_validation_954", "nl": "Chromoplasts make and store pigments.", "fol": "", "prediction": ["all x.(Chromoplast(x) -> (MakesPigments(x) & StoresPigments(x)))"]}
{"id": "eqasc_validation_955", "nl": "Chromoplasts contain red or yellow xanthophyll pigments in large amounts.", "fol": "", "prediction": ["all x.(Chromoplast(x) -> (ContainsRedOrYellowXanthophyllPigments(x) & LargeAmounts(x)))"]}
{"id": "eqasc_validation_956", "nl": "Chromoplasts make and store red or yellow colors in large amounts", "fol": "", "prediction": ["all x.(Chromoplast(x) -> (MakesAndStoresRedOrYellowColors(x) & InLargeAmounts(x)))"]}
{"id": "eqasc_validation_957", "nl": "Pigments Pigments give color to paint.", "fol": "", "prediction": ["all x.(Pigment(x) -> GivesColorToPaint(x))"]}
{"id": "eqasc_validation_958", "nl": "chromoplasts give color to paint", "fol": "", "prediction": ["all x.(Chromoplast(x) -> GivesColorToPaint(x))"]}
{"id": "eqasc_validation_959", "nl": "Chromoplasts are red, yellow or orange in hue due to the cartenoid pigments they contain.", "fol": "", "prediction": ["all x.(Chromoplast(x) -> (Red(x) | Yellow(x) | Orange(x)))"]}
{"id": "eqasc_validation_960", "nl": "Chromoplasts are red, yellow or orange in hue and make and store colors.", "fol": "", "prediction": ["all x.(Chromoplast(x) -> ((Red(x) | Yellow(x) | Orange(x)) & MakesColors(x) & StoresColors(x)))"]}
{"id": "eqasc_validation_961", "nl": "Chromoplasts are found in many flower petals and fruits.", "fol": "", "prediction": ["all x.(Chromoplast(x) -> (FoundIn(x,flowerPetals) & FoundIn(x,fruits)))"]}
{"id": "eqasc_validation_962", "nl": "Flower petals and fruits make and store pigments.", "fol": "", "prediction": ["all x y.((FlowerPetal(x) & Fruit(y)) -> (MakesPigments(x) & StoresPigments(x)))"]}
{"id": "eqasc_validation_963", "nl": "flowers contain pigments", "fol": "", "prediction": ["all x.(Flower(x) -> ContainsPigments(x))"]}
{"id": "eqasc_validation_964", "nl": "chromoplasts make and store the same thing that gives color to paint.", "fol": "", "prediction": ["all x.(Chromoplast(x) -> (MakesAndStoresSameThing(x) & GivesColorToPaint(x)))"]}
{"id": "eqasc_validation_965", "nl": "Photosynthesis Pigments Pigments are substances that absorb visible light.", "fol": "", "prediction": ["all x.(PhotosynthesisPigments(x) -> (AbsorbsVisibleLight(x) & Pigments(x)))"]}
{"id": "eqasc_validation_966", "nl": "Chromoplasts store substances that absorb visible light", "fol": "", "prediction": ["all x.(Chromoplast(x) -> StoresSubstances(x))"]}
{"id": "eqasc_validation_967", "nl": "chromoplasts are hued", "fol": "", "prediction": ["all x.(Chromoplast(x) -> Hushed(x))"]}
{"id": "eqasc_validation_968", "nl": "Photosynthetic Pigments Photosynthetic Pigments Pigments are colorful compounds.", "fol": "", "prediction": ["all x.(PhotosyntheticPigment(x) -> ColorfulCompound(x))"]}
{"id": "eqasc_validation_969", "nl": "Chromoplasts make and store colorful compounds", "fol": "", "prediction": ["all x y.((Chromoplast(x) & ColorfulCompound(y)) -> (Makes(x,y) & Stores(x,y)))"]}
{"id": "eqasc_validation_970", "nl": "Chromoplasts make red coloring", "fol": "", "prediction": ["all x.(Chromoplast(x) -> MakesRedColoring(x))"]}
{"id": "eqasc_validation_971", "nl": "bees convert nectar into honey", "fol": "", "prediction": ["all x y.((Bee(x) & Nectar(y)) -> ConvertsToHoney(x,y))"]}
{"id": "eqasc_validation_972", "nl": "Honey bees are very social in that they all live together in home, or apiary.", "fol": "", "prediction": ["all x.(HoneyBee(x) -> (LivesInHome(x) | LivesInAapiary(x)))"]}
{"id": "eqasc_validation_973", "nl": "Nectar is converted into honey in an apiary", "fol": "", "prediction": ["all x y z.((Nectar(x) & Honey(y) & Apiary(z)) -> ConvertedTo(x,y,z))"]}
{"id": "eqasc_validation_974", "nl": "Butterflies feed on nectar produced by flowers.", "fol": "", "prediction": ["all x.(Butterfly(x) -> FeedsOnNectar(x))"]}
{"id": "eqasc_validation_975", "nl": "Bees need flowers to make honey.", "fol": "", "prediction": ["all x.(Bee(x) -> NeedsFlowers(x))"]}
{"id": "eqasc_validation_976", "nl": "Bees change nectar in the beehive.", "fol": "", "prediction": ["all x y.((Bee(x) & Beehive(y)) -> ChangesNectar(x,y))"]}
{"id": "eqasc_validation_977", "nl": "honey is changed in the beehive", "fol": "", "prediction": ["all x y.((Honey(x) & Beehive(y)) -> ChangedIn(x,y))"]}
{"id": "eqasc_validation_978", "nl": "Flowers are the source of nectar for a preferred honey.", "fol": "", "prediction": ["all x y.((Flower(x) & Honey(y)) -> SourceOfNectar(x,y))"]}
{"id": "eqasc_validation_979", "nl": "Bees get nectar from flowers", "fol": "", "prediction": ["all x y z.((Bee(x) & Flower(y) & Flower(z)) -> GetsNectarFrom(x,y,z))"]}
{"id": "eqasc_validation_980", "nl": "Flowers secrete nectar.", "fol": "", "prediction": ["all x.(Flower(x) -> SecretesNectar(x))"]}
{"id": "eqasc_validation_981", "nl": "bees convert flower secretion into honey", "fol": "", "prediction": ["all x y.((Bee(x) & FlowerSecr\u00e9tion(y)) -> ConvertsToHoney(x,y))"]}
{"id": "eqasc_validation_982", "nl": "Tea with honey is good.", "fol": "", "prediction": ["all x.((Tea(x) & Honey(x)) -> Good(x))"]}
{"id": "eqasc_validation_983", "nl": "bees convert nectar into something for tea", "fol": "", "prediction": ["all x y.((Bee(x) & Nectar(y)) -> ConvertsToTea(x,y))"]}
{"id": "eqasc_validation_984", "nl": "Bees move from flower to flower, gathering nectar.", "fol": "", "prediction": ["all x y.((Bee(x) & Flower(y)) -> MovesFromTo(x,y))"]}
{"id": "eqasc_validation_985", "nl": "Bees make honey from what they gather from flowers", "fol": "", "prediction": ["all x y z.((Bee(x) & Flower(y) & Flower(z)) -> (MakesHoneyFrom(x,y) & GathersFrom(x,z)))"]}
{"id": "eqasc_validation_986", "nl": "Nectar is in flowers, trees and hummingbird feeders.", "fol": "", "prediction": ["all x.(Nectar(x) -> (InFlowers(x) | InTrees(x) | InHummingbirdFeeders(x)))"]}
{"id": "eqasc_validation_987", "nl": "Bees gather material to make honey from flowers and trees.", "fol": "", "prediction": ["all x y z.((Bee(x) & Material(y) & Honey(z)) -> GathersForMaking(x,y,z))"]}
{"id": "eqasc_validation_988", "nl": "Hagfish are noted for secreting large amounts of thick, slimy mucus.", "fol": "", "prediction": ["all x.(Haggfish(x) -> (SectsLargeAmountsOfThickSlimyMucus(x)))"]}
{"id": "eqasc_validation_989", "nl": "Today, jawless fish include the lampreys and hagfishes.", "fol": "", "prediction": ["all x.(JawlessFish(x) -> (Lamprey(x) | Hagfish(x)))"]}
{"id": "eqasc_validation_990", "nl": "Some jawless fish secrete large amounts of thick, slimy mucus.", "fol": "", "prediction": ["exists x.(JawlessFish(x) & SecretesLargeAmountsOfThickSlimyMucus(x))"]}
{"id": "eqasc_validation_991", "nl": "some jawless fish secrete large amounts of thick, slimy mucus.", "fol": "", "prediction": ["exists x.(JawlessFish(x) & SecretesLargeAmountsOfThickSlimyMucus(x))"]}
{"id": "eqasc_validation_992", "nl": "Hagfishes are entirely marine, very slimy, and feed on carrion and injured fishes.", "fol": "", "prediction": ["all x.(Haggfish(x) -> (Marine(x) & Slimy(x) & FeedsOnCarrionAndInjuredFishes(x)))"]}
{"id": "eqasc_validation_993", "nl": "Hagfish secrete large amounts of mucus.", "fol": "", "prediction": ["all x.(Haggfish(x) -> SecretesLargeAmountsOfMucus(x))"]}
{"id": "eqasc_validation_994", "nl": "marine environments have thick, slimy mucus", "fol": "", "prediction": ["all x.(MarineEnvironment(x) -> HasThickSlimyMucus(x))"]}
{"id": "eqasc_validation_995", "nl": "Some living jawless fish are noted for secreting large amounts of thick, slimy mucus.", "fol": "", "prediction": ["exists x.(JawlessFish(x) & SpontaneousMucus(x) & ThickSlimyMucus(x))"]}
{"id": "eqasc_validation_996", "nl": "Hagfish and lampreys have no internal hard tissues at all.", "fol": "", "prediction": ["all x.((Haggfish(x) | Lamprey(x)) -> -HasHardTissues(x))"]}
{"id": "eqasc_validation_997", "nl": "Creatures that have no internal hard tissues at all are noted for secreting large amounts of thick, slimy mucus.", "fol": "", "prediction": ["all x.((Creature(x) & -HasHardTissues(x)) -> SecretesLargeAmountsOfThickSlimyMucus(x))"]}
{"id": "eqasc_validation_998", "nl": "mountains are formed by earthquakes", "fol": "", "prediction": ["all x y.((Mountain(x) & Earthquake(y)) -> FormedBy(x,y))"]}
{"id": "eqasc_validation_999", "nl": "Earthquakes are caused by movement of the tectonic plates.", "fol": "", "prediction": ["all x.(Earthquake(x) -> CausedByTectonicPlateMovement(x))"]}
{"id": "eqasc_validation_1000", "nl": "Mountains are formed by movement of the tectonic plates.", "fol": "", "prediction": ["all x.(Mountain(x) -> FormedByMovementOfTectonicPlates(x))"]}
{"id": "eqasc_validation_1001", "nl": "Earthquakes Earthquakes are the results of moving plates.", "fol": "", "prediction": ["all x.(Earthquake(x) -> (MovingPlate(x) & ResultsOf(x,y)))"]}
{"id": "eqasc_validation_1002", "nl": "mountains are formed by moving plates", "fol": "", "prediction": ["all x.(Mountain(x) -> (FormedByMovingPlates(x) & FormedByMovingPlates(x)))"]}
{"id": "eqasc_validation_1003", "nl": "For big mountain background, check out the Himalayas .", "fol": "", "prediction": ["all x.((BigMountainBackground(x) & Himalayas(x)) -> Check(x))"]}
{"id": "eqasc_validation_1004", "nl": "the Himalayas are formed by earthquakes", "fol": "", "prediction": ["all x.(Himalaya(x) -> FormedByEarthquakes(x))"]}
{"id": "eqasc_validation_1005", "nl": "Mountains are formed by moving plates.", "fol": "", "prediction": ["all x.(Mountain(x) -> FormedByMovingPlates(x))"]}
{"id": "eqasc_validation_1006", "nl": "Many mountains are formed through uplifting.", "fol": "", "prediction": ["exists x.(Mountain(x) & FormedByUplifting(x))"]}
{"id": "eqasc_validation_1007", "nl": "Earthquakes can cause uplifting to occur.", "fol": "", "prediction": ["all x.(Earthquake(x) -> CausesUplifting(x))"]}
{"id": "eqasc_validation_1008", "nl": "For mountains one goes to the Alps.", "fol": "", "prediction": ["all x.(Mountain(x) -> GoesToAlps(x))"]}
{"id": "eqasc_validation_1009", "nl": "The Alps were formed by earthquakes", "fol": "", "prediction": ["all x.(Alps(x) -> FormedByEarthquakes(x))"]}
{"id": "eqasc_validation_1010", "nl": "Here the rocks have been uplifted along earthquake faults to make a mountain.", "fol": "", "prediction": ["all x y.((Rock(x) & EarthquakeFault(y)) -> UpliftedAlong(x,y))"]}
{"id": "eqasc_validation_1011", "nl": "rocks lift to make mountains", "fol": "", "prediction": ["all x y.((Rocks(x) & Mountain(y)) -> LiftsToMake(x,y))"]}
{"id": "eqasc_validation_1012", "nl": "Earthquakes Earthquakes Japan is an earthquake-prone country.", "fol": "", "prediction": ["all x.(Earthquake(x) -> EarthquakeProne(x))"]}
{"id": "eqasc_validation_1013", "nl": "Japan has a lot of mountains. ", "fol": "", "prediction": ["all x.(Japan(x) -> HasMountains(x))"]}
{"id": "eqasc_validation_1014", "nl": "Chemical digestion occurs mainly in the small intestine.", "fol": "", "prediction": ["all x.(ChemicalDigestion(x) -> OccursInSmallintestine(x))"]}
{"id": "eqasc_validation_1015", "nl": "Enzymes are chemicals involved in digestion.", "fol": "", "prediction": ["all x.(Enzyme(x) -> (InvolvedInDigestion(x) & Chemical(x)))"]}
{"id": "eqasc_validation_1016", "nl": "enzymes are in the small intestine", "fol": "", "prediction": ["all x y.((Enzyme(x) & SmallIntestine(y)) -> InSmallIntestine(x,y))"]}
{"id": "eqasc_validation_1017", "nl": "Celiac disease damages the small intestine and interferes with nutrient absorption.", "fol": "", "prediction": ["all x.(CeliacDisease(x) -> (DamagesSmallIntestine(x) & InterferesWithNutrientAbsorption(x)))"]}
{"id": "eqasc_validation_1018", "nl": "Celiac disease interferes with chemical digestion", "fol": "", "prediction": ["all x.(CeliacDisease(x) -> InterferesWithChemicalDigestion(x))"]}
{"id": "eqasc_validation_1019", "nl": "Chemical digestion and absorption of food occurs in the small intestine.", "fol": "", "prediction": ["all x.(SmallIntestine(x) -> (ChemicalDigestion(x) & AbsorptionOfFood(x)))"]}
{"id": "eqasc_validation_1020", "nl": "chemical absorption happens in the small intestine", "fol": "", "prediction": ["all x y.((ChemicalAbsorption(x) & SmallIntestine(y)) -> HappensIn(x,y))"]}
{"id": "eqasc_validation_1021", "nl": "Chemical digestion breaks complex chemicals into simple ones.", "fol": "", "prediction": ["all x y.((ChemicalDigestion(x) & ComplexChemicals(y)) -> BreaksIntoSimpleChemicals(x,y))"]}
{"id": "eqasc_validation_1022", "nl": "Breaking complex chemicals into simple ones occurs mainly in the small intestine.", "fol": "", "prediction": ["all x.((ComplexChemicals(x) & SimpleChemicals(x)) -> OccursInSmallIntestine(x))"]}
{"id": "eqasc_validation_1023", "nl": "Enzymes involved in digestion occur mainly in the small intestine", "fol": "", "prediction": ["all x.(Enzyme(x) -> (InterestsInDigestion(x) & OccursInSmallIntestine(x)))"]}
{"id": "eqasc_validation_1024", "nl": "Lactobacillus is present in the small intestine.", "fol": "", "prediction": ["all x.(Lactobacillus(x) -> PresentInSmallintestine(x))"]}
{"id": "eqasc_validation_1025", "nl": "lactobacillus aids chemical digestion", "fol": "", "prediction": ["all x.(Lactobacillus(x) -> AidsChemicalDigestion(x))"]}
{"id": "eqasc_validation_1026", "nl": "Physicians often call the intestines the bowels.", "fol": "", "prediction": ["all x.(Pharmacist(x) -> (CallingIntestines(x) | CallingBowels(x)))"]}
{"id": "eqasc_validation_1027", "nl": "Chemical digestion occurs mainly in the small bowel.", "fol": "", "prediction": ["all x.(ChemicalDigestion(x) -> OccursInSmallBody(x))"]}
{"id": "eqasc_validation_1028", "nl": "enzymes are located in the small intestine", "fol": "", "prediction": ["all x y.((Enzyme(x) & SmallIntestine(y)) -> LocatedIn(x,y))"]}
{"id": "eqasc_validation_1029", "nl": "Complex chemicals break down into simple ones mainly in the small intestine.", "fol": "", "prediction": ["all x y.((ComplexChemical(x) & SmallIntestine(y)) -> BreaksDownIntoSimpleChemicals(x,y))"]}
{"id": "eqasc_validation_1030", "nl": "seconds are used to measure time", "fol": "", "prediction": ["all x.(Second(x) -> MeasuresTime(x))"]}
{"id": "eqasc_validation_1031", "nl": "CPU time is measured in seconds.", "fol": "", "prediction": ["all x.(CPUTime(x) -> MeasuredInSeconds(x))"]}
{"id": "eqasc_validation_1032", "nl": "CPU time can be used as a clock", "fol": "", "prediction": ["all x.(CPUTime(x) -> CanBeUsedAsClock(x))"]}
{"id": "eqasc_validation_1033", "nl": "An accounting period is simply a period of time.", "fol": "", "prediction": ["all x.(AccountingPeriod(x) -> PeriodOfTime(x))"]}
{"id": "eqasc_validation_1034", "nl": "seconds are used to measure a period", "fol": "", "prediction": ["all x y.((Second(x) & Period(y)) -> Measures(x,y))"]}
{"id": "eqasc_validation_1035", "nl": "Stopwatch was used to measure time.", "fol": "", "prediction": ["all x.(Stopwatch(x) -> MeasuresTime(x))"]}
{"id": "eqasc_validation_1036", "nl": "A stopwatch is used to measure seconds", "fol": "", "prediction": ["all x.(Stopwatch(x) -> MeasuresSeconds(x))"]}
{"id": "eqasc_validation_1037", "nl": "Speed is measured by the distance covered divided by the elapsed time.", "fol": "", "prediction": ["all x.(Speed(x) -> MeasuredByDistance(x))"]}
{"id": "eqasc_validation_1038", "nl": "seconds can be used to measure Speed", "fol": "", "prediction": ["all x.(Seconds(x) -> MeasureSpeed(x))"]}
{"id": "eqasc_validation_1039", "nl": "whiskers are used for feeling by animals", "fol": "", "prediction": ["all x y.((Whiskers(x) & Animal(y)) -> UsedForFeeling(x,y))"]}
{"id": "eqasc_validation_1040", "nl": "Whiskers Whiskers are the stiff hairs on the dog's face.", "fol": "", "prediction": ["all x.(Whiskers(x) -> (StiffHairs(x) & OnDogsFace(x)))"]}
{"id": "eqasc_validation_1041", "nl": "Stiff hairs on the face are used for feeling by animals.", "fol": "", "prediction": ["all x y.((StiffHair(x) & Face(y)) -> UsedForFeeling(x,y))"]}
{"id": "eqasc_validation_1042", "nl": "Stiff hairs on the dog's face are used for feeling.", "fol": "", "prediction": ["all x.((Dog(x) & StiffHairsOnFace(x)) -> UsedForFeeling(x))"]}
{"id": "eqasc_validation_1043", "nl": "All cats are animals.", "fol": "", "prediction": ["all x.(Cat(x) -> Animal(x))"]}
{"id": "eqasc_validation_1044", "nl": "Cats use specialized long hair on their faces to feel with.", "fol": "", "prediction": ["all x.(Cat(x) -> (UsesSpecializedLongHair(x) & FeelsWith(x)))"]}
{"id": "eqasc_validation_1045", "nl": "Another name for it is cat's whiskers.", "fol": "", "prediction": ["all x.(Cat(x) -> Whiskers(x))"]}
{"id": "eqasc_validation_1046", "nl": "cats have body parts for feeling", "fol": "", "prediction": ["all x.(Cat(x) -> HasBodyPartsForFeeling(x))"]}
{"id": "eqasc_validation_1047", "nl": "whiskers are used for feeling by cats", "fol": "", "prediction": ["all x y.((Whiskers(x) & Cat(y)) -> UsedForFeeling(x,y))"]}
{"id": "eqasc_validation_1048", "nl": "Hair, whiskers, claws, and hooves are also made of keratin.", "fol": "", "prediction": ["all x.((Hair(x) | Whiskers(x) | Claws(x) | Hooves(x)) -> MadeOfKeratin(x))"]}
{"id": "eqasc_validation_1049", "nl": "tissue made of keratin is used for feeling by animals", "fol": "", "prediction": ["all x y.((Tissue(x) & Keratin(y)) -> UsedForFeelingByAnimals(x,y))"]}
{"id": "eqasc_validation_1050", "nl": "a watch is used for measuring time", "fol": "", "prediction": ["all x.(Watch(x) -> MeasuresTime(x))"]}
{"id": "eqasc_validation_1051", "nl": "Times are measured in seconds.", "fol": "", "prediction": ["all x.(Time(x) -> MeasuredInSeconds(x))"]}
{"id": "eqasc_validation_1052", "nl": "A watch can be used to measure seconds.", "fol": "", "prediction": ["all x.(Watch(x) -> MeasuresSeconds(x))"]}
{"id": "eqasc_validation_1053", "nl": "All times are measured in seconds.", "fol": "", "prediction": ["all x.(Time(x) -> MeasuredInSeconds(x))"]}
{"id": "eqasc_validation_1054", "nl": "a watch is used for measuring seconds", "fol": "", "prediction": ["all x.(Watch(x) -> MeasuresSeconds(x))"]}
{"id": "eqasc_validation_1055", "nl": "Today's Rolex is tomorrow's cheap gold watch.", "fol": "", "prediction": ["all x.((Rolex(x) & Today(x)) -> TomorrowsLittleGoldWatch(x))"]}
{"id": "eqasc_validation_1056", "nl": "a Rolex is used for measuring time", "fol": "", "prediction": ["all x.(Rolex(x) -> UsedForMeasuringTime(x))"]}
{"id": "eqasc_validation_1057", "nl": "Time is measured using hours, seconds, and minutes.", "fol": "", "prediction": ["all x.(Time(x) -> (MeasuredUsing(x,hours) & MeasuredUsing(x,seconds) & MeasuredUsing(x,minutes)))"]}
{"id": "eqasc_validation_1058", "nl": "A watch measures hours, seconds, and minutes", "fol": "", "prediction": ["all x.(Watch(x) -> (MeasuresHours(x) & MeasuresSeconds(x) & MeasuresMinutes(x)))"]}
{"id": "eqasc_validation_1059", "nl": "Time management is the science of how to use the hours in a day more efficiently.", "fol": "", "prediction": ["all x.(TimeManagement(x) -> (UsesHoursEfficiently(x) & UsesHoursEfficiently(x)))"]}
{"id": "eqasc_validation_1060", "nl": "a watch is needed for scientific research", "fol": "", "prediction": ["all x.(Watch(x) -> NeededForScientificResearch(x))"]}
{"id": "eqasc_validation_1061", "nl": "Time is measured in minutes.", "fol": "", "prediction": ["all x.(Time(x) -> MeasuredInMinutes(x))"]}
{"id": "eqasc_validation_1062", "nl": "A watch is used for measuring minutes.", "fol": "", "prediction": ["all x.(Watch(x) -> MeasuresMinutes(x))"]}
{"id": "eqasc_validation_1063", "nl": "Watches must keep track of seconds. ", "fol": "", "prediction": ["all x.(Watch(x) -> KeepsTrackOfSeconds(x))"]}
{"id": "eqasc_validation_1064", "nl": "Probably the easiest way to see time is to watch the ticking hands of a clock.", "fol": "", "prediction": ["all x.((TickingHandsOfClock(x) & ProbablyEasiestToSeeTime(x)) -> Watch(x))"]}
{"id": "eqasc_validation_1065", "nl": "ticking hands are used for measuring time.", "fol": "", "prediction": ["all x.(TickingHand(x) -> UsedForMeasuringTime(x))"]}
{"id": "eqasc_validation_1066", "nl": "Time refers to the speed of movements.", "fol": "", "prediction": ["all x.(Time(x) -> SpeedOfMovements(x))"]}
{"id": "eqasc_validation_1067", "nl": "A watch can be used  for measuring speed of movements.", "fol": "", "prediction": ["all x.(Watch(x) -> MeasuresSpeedOfMovements(x))"]}
{"id": "eqasc_validation_1068", "nl": "Any surface that has not been sterilized is likely to be covered with bacteria.", "fol": "", "prediction": ["all x.((Surface(x) & -Sterilized(x)) -> CoveredWithBacteria(x))"]}
{"id": "eqasc_validation_1069", "nl": "Bacteria and viruses are microbes.", "fol": "", "prediction": ["all x.((Bacteria(x) | Viral(x)) -> Microbe(x))"]}
{"id": "eqasc_validation_1070", "nl": "Any surface that has not been sterilized is likely to be covered with live microbes.", "fol": "", "prediction": ["all x.((Surface(x) & -Sterilized(x)) -> CoveredWithLiveMicrobes(x))"]}
{"id": "eqasc_validation_1071", "nl": "Bacteria eat and bacteria digest foods.", "fol": "", "prediction": ["all x y.((Bacteria(x) & Bacteria(y)) -> (Eats(x) & DigestsFoods(y)))"]}
{"id": "eqasc_validation_1072", "nl": "a surface not sterilized is likely to be covered with something that eats and digests foods", "fol": "", "prediction": ["all x.((Surface(x) & -Sterilized(x)) -> CoveredWith(x,eats,digests,foods))"]}
{"id": "eqasc_validation_1073", "nl": "Bacteria and viruses that make people sick can be passed on our hands.", "fol": "", "prediction": ["all x.((Bacteria(x) & Viruses(x) & MakesPeopleSick(x)) -> PassedOnHands(x))"]}
{"id": "eqasc_validation_1074", "nl": "any surface that has not been sterilized can make people sick", "fol": "", "prediction": ["all x.((Surface(x) & -Sterilized(x)) -> CanMakePeopleSick(x))"]}
{"id": "eqasc_validation_1075", "nl": "Bacteria are single cell microorganism.", "fol": "", "prediction": ["all x.(Bacteria(x) -> SingleCellMicroorganism(x))"]}
{"id": "eqasc_validation_1076", "nl": "Any surface that has not been sterilized is likely to be covered with single cell microorganisms.", "fol": "", "prediction": ["all x.((Surface(x) & -Sterilized(x)) -> CoveredWithSingleCellMicroorganisms(x))"]}
{"id": "eqasc_validation_1077", "nl": "Surfaces can be steamed cleaned and sterilized.", "fol": "", "prediction": ["all x.(Surface(x) -> (SteamedClean(x) & Sterilized(x)))"]}
{"id": "eqasc_validation_1078", "nl": "Any surface that has not been cleaned is likely to be covered with bacteria.", "fol": "", "prediction": ["all x.((Surface(x) & -Cleaned(x)) -> CoveredWithBacteria(x))"]}
{"id": "eqasc_validation_1079", "nl": "Raw meat is loaded with harmful bacteria.", "fol": "", "prediction": ["all x.(RawMeat(x) -> LoadedWithHarmfulBacteria(x))"]}
{"id": "eqasc_validation_1080", "nl": "Surfaces where raw meat has been should be sterilized.", "fol": "", "prediction": ["all x.((Surface(x) & RawMeat(x)) -> ShouldBeSterilized(x))"]}
{"id": "eqasc_validation_1081", "nl": "All countertop surfaces are natural stone.", "fol": "", "prediction": ["all x.(CookerSurface(x) -> NaturalStone(x))"]}
{"id": "eqasc_validation_1082", "nl": "any countertop that has not been sterilized is likely to be covered with bacteria", "fol": "", "prediction": ["all x.((CoveredCoveredCovered(x) & -Sterilized(x)) -> CoveredWithBacteria(x))"]}
{"id": "eqasc_validation_1083", "nl": "Every surface was scrubbed with bleach.", "fol": "", "prediction": ["all x.(Surface(x) -> ScrubbedWithBleach(x))"]}
{"id": "eqasc_validation_1084", "nl": "Any area that has not been scrubbed with bleach is likely to be covered with bacteria", "fol": "", "prediction": ["all x.((Area(x) & -ScrubbedWithBleach(x)) -> CoveredWithBacteria(x))"]}
{"id": "eqasc_validation_1085", "nl": "Bacteria can cause infection.", "fol": "", "prediction": ["all x.(Bacteria(x) -> CanCauseInfection(x))"]}
{"id": "eqasc_validation_1086", "nl": "Any surface that has not been sterilized could result in infection.", "fol": "", "prediction": ["all x.((Surface(x) & -Sterilized(x)) -> CouldResultInInfection(x))"]}
{"id": "eqasc_validation_1087", "nl": "Bacteria are the smallest of microscopic organisms.", "fol": "", "prediction": ["all x.(Bacteria(x) -> SmallestOfMicroscopicOrganisms(x))"]}
{"id": "eqasc_validation_1088", "nl": "Any surface that has not been sterilized is likely to be covered with microscopic organisms", "fol": "", "prediction": ["all x.((Surface(x) & -Sterilized(x)) -> CoveredWithMicroscopicOrganisms(x))"]}
{"id": "eqasc_validation_1089", "nl": "Clean, sterilized contacts are less likely to breed bacteria.", "fol": "", "prediction": ["all x.((Clean(x) & Sterilized(x)) -> LessLikelyToBreedBacteria(x))"]}
{"id": "eqasc_validation_1090", "nl": "sterilizing a surface reduces bacteria", "fol": "", "prediction": ["all x y.((SterilizingSurface(x) & Bacteria(y)) -> Reduces(x,y))"]}
{"id": "eqasc_validation_1091", "nl": "Potent liquid sterilant kills AIDS and other viruses on surfaces.", "fol": "", "prediction": ["all x.((PotentLiquidSterilant(x) & KillsAIDSAndViruses(x)) -> KillsOnSurfaces(x))"]}
{"id": "eqasc_validation_1092", "nl": "Use sterilant in order to sterilize a table.", "fol": "", "prediction": ["all x.((Table(x) & UsesSterilent(x)) -> Sterilizes(x))"]}
{"id": "eqasc_validation_1093", "nl": "fluoride decreases tooth decay", "fol": "", "prediction": ["all x.(Fluoride(x) -> DecreasesToothDecay(x))"]}
{"id": "eqasc_validation_1094", "nl": "Tooth decay is a destruction of the tooth enamel.", "fol": "", "prediction": ["all x.(ToothDecay(x) -> (DestructionOfEnamel(x) & Teeth(x)))"]}
{"id": "eqasc_validation_1095", "nl": "Fluoride decreases the destruction of the enamel.", "fol": "", "prediction": ["all x.(Fluid(x) -> DecreasesDestructionOfEmail(x))"]}
{"id": "eqasc_validation_1096", "nl": "Tooth decay can be very painful, and can make teeth unsightly.", "fol": "", "prediction": ["all x.(ToothDecay(x) -> (Poisonous(x) & MakesTeethUnsightly(x)))"]}
{"id": "eqasc_validation_1097", "nl": "fluoride decreases the potential for tooth pain", "fol": "", "prediction": ["all x.(Fluoride(x) -> DecreasesPotentialForToothPain(x))"]}
{"id": "eqasc_validation_1098", "nl": "fluoride prevents destruction of tooth enamel.", "fol": "", "prediction": ["all x.(Fluoride(x) -> PreventsDestructionOfToothEmilen(x))"]}
{"id": "eqasc_validation_1099", "nl": "Flouride prevents the destruction of tooth enamel. ", "fol": "", "prediction": ["all x.(Flouride(x) -> PreventsDestructionOfToothEmilen(x))"]}
{"id": "eqasc_validation_1100", "nl": "Cavities are also known as carries and tooth decay.", "fol": "", "prediction": ["all x.(Cavity(x) -> (Carries(x) | TeethDecay(x)))"]}
{"id": "eqasc_validation_1101", "nl": "Fluoride reduces cavity formation.", "fol": "", "prediction": ["all x.(Fluid(x) -> ReducesCavityFormation(x))"]}
{"id": "eqasc_validation_1102", "nl": "Fluorides Fluorides are the salts of hydrofluoric acid.", "fol": "", "prediction": ["all x.(Fluoride(x) -> (HydrofluoricAcid(x) & Salt(x)))"]}
{"id": "eqasc_validation_1103", "nl": "the salts of hydrofluoric acid decrease tooth decay", "fol": "", "prediction": ["all x y.((Salt(x) & HydrofluoricAcid(y)) -> DecreasesToothDecay(x,y))"]}
{"id": "eqasc_validation_1104", "nl": "Virtually all water contains fluoride.", "fol": "", "prediction": ["all x.(Water(x) -> ContainsFluid(x))"]}
{"id": "eqasc_validation_1105", "nl": "Water decreases tooth decay.", "fol": "", "prediction": ["all x.(Water(x) -> DecreasesToothDecay(x))"]}
{"id": "eqasc_validation_1106", "nl": "Humans get most of their fluoride in drinking water.", "fol": "", "prediction": ["all x.(Human(x) -> GetsFluorideInDrinkingWater(x))"]}
{"id": "eqasc_validation_1107", "nl": "Drinking water decreases tooth decay.", "fol": "", "prediction": ["all x.(DrinkingWater(x) -> DecreasesToothDecay(x))"]}
{"id": "eqasc_validation_1108", "nl": "Differentiation is the process by which unspecialized cells become specialized.", "fol": "", "prediction": ["all x.(Differentiation(x) -> (UnspecializedCells(x) & SpecializedCells(x)))"]}
{"id": "eqasc_validation_1109", "nl": "Differentiation is the specialization of a cell line.", "fol": "", "prediction": ["all x y.((CellLine(x) & CellLine(y)) -> Specialization(x,y))"]}
{"id": "eqasc_validation_1110", "nl": "specializing occurs with differentiation ", "fol": "", "prediction": ["all x.(Specialization(x) -> Distinctive(x))"]}
{"id": "eqasc_validation_1111", "nl": "Neurons are specialized cells.", "fol": "", "prediction": ["all x.(Neuron(x) -> SpecializedCell(x))"]}
{"id": "eqasc_validation_1112", "nl": "Differentiation is the process by which neurons are created", "fol": "", "prediction": ["all x y.((Differentiation(x) & Neuron(y)) -> CreatedBy(x,y))"]}
{"id": "eqasc_validation_1113", "nl": "How plant cells become specialized during development.", "fol": "", "prediction": ["all x.((PlantCell(x) & SpecializedDuringDevelopment(x)) -> SpecializedDuringDevelopment(x))"]}
{"id": "eqasc_validation_1114", "nl": "Differentiation is how plants become specialized during development", "fol": "", "prediction": ["all x y.((Plant(x) & Development(y)) -> SpecializedDuring(x,y))"]}
{"id": "eqasc_validation_1115", "nl": "All hair cells require Brn3.1 for differentiation.", "fol": "", "prediction": ["all x.(HairCell(x) -> RequiresBrn3.1(x))"]}
{"id": "eqasc_validation_1116", "nl": "Hair becomes specialized through differentiation", "fol": "", "prediction": ["all x.(Hair(x) -> SpecializedThroughDifference(x))"]}
{"id": "eqasc_validation_1117", "nl": "Cells are the basic unit of life .", "fol": "", "prediction": ["all x.(Cell(x) -> BasicUnitOfLife(x))"]}
{"id": "eqasc_validation_1118", "nl": "Differentiation is the process by which unspecialized basic units of life become specialized.", "fol": "", "prediction": ["all x.(Differentiation(x) -> (UnspecializedBasicUnitsOfLife(x) & BecomesSpecialized(x)))"]}
{"id": "eqasc_validation_1119", "nl": "Nerve cells are large, complicated, highly specialized cells.", "fol": "", "prediction": ["all x.(NerveCell(x) -> (Large(x) & Complicated(x) & HighlySpecialized(x)))"]}
{"id": "eqasc_validation_1120", "nl": "Differentiation is essential to nerve cell development", "fol": "", "prediction": ["all x.(Differential(x) -> NerveCellDevelopment(x))"]}
{"id": "eqasc_validation_1121", "nl": "Neurones are highly specialized cells.", "fol": "", "prediction": ["all x.(Neuron(x) -> HighlySpecializedCell(x))"]}
{"id": "eqasc_validation_1122", "nl": "Differentiation is the process by which neurones are created", "fol": "", "prediction": ["all x y.((Differentiation(x) & Neuron(y)) -> CreatedBy(x,y))"]}
{"id": "eqasc_validation_1123", "nl": "T helper cells differentiate to Memory cells and effector cells.", "fol": "", "prediction": ["all x.(THelperCell(x) -> (DifferentToMemoryCells(x) & DifferentToEffectorCells(x)))"]}
{"id": "eqasc_validation_1124", "nl": "T helper cells are more specialized as Memory cells and effector cells", "fol": "", "prediction": ["all x.(THelperCell(x) -> (MemoryCell(x) | EffectorCell(x)))"]}
{"id": "eqasc_validation_1125", "nl": "Methods and processes are activities.", "fol": "", "prediction": ["all x.((Method(x) | Process(x)) -> Activities(x))"]}
{"id": "eqasc_validation_1126", "nl": "Differentiation is the method by which unspecialized cells become specialized.", "fol": "", "prediction": ["all x.(Differentiation(x) -> (UnspecializedCells(x) & SpecializedCells(x)))"]}
{"id": "eqasc_validation_1127", "nl": "Ancestors of hagfish are thought to have been the earliest vertebrates.", "fol": "", "prediction": ["all x.(HagfishAncestors(x) -> earliestVertebrate(x))"]}
{"id": "eqasc_validation_1128", "nl": "Animals with backbones are called vertebrates.", "fol": "", "prediction": ["all x.((Animal(x) & HasBackbone(x)) -> Vertebrate(x))"]}
{"id": "eqasc_validation_1129", "nl": "Ancestors of hagfish are thought to have been the earliest Animals with backbones", "fol": "", "prediction": ["all x.((AncestorsOfHagfish(x) & Animal(x) & HasBackbone(x)) -> earliest(x))"]}
{"id": "eqasc_validation_1130", "nl": "Descendants of the early jawless fish are present today in the lampreys and hagfishes.", "fol": "", "prediction": ["all x.((Descendant(x) & EarlyJawlessFish(x)) -> (presentInLampreys(x) | PresentInHagfishes(x)))"]}
{"id": "eqasc_validation_1131", "nl": "The earliest vertebrates were jawless fish", "fol": "", "prediction": ["all x.((Vertebrate(x) & JawlessFish(x)) -> Early(x))"]}
{"id": "eqasc_validation_1132", "nl": "Vertebrates are animals that have a backbone.", "fol": "", "prediction": ["all x.(Vertebrates(x) -> HasBackbone(x))"]}
{"id": "eqasc_validation_1133", "nl": "ancestors of hagfish probably had backbones", "fol": "", "prediction": ["all x.((Ancient(x) & Hagfish(x)) -> HadBackbones(x))"]}
{"id": "eqasc_validation_1134", "nl": "Hagfish and sharks are both isosmotic with their saline environments.", "fol": "", "prediction": ["all x y.((Haggfish(x) & Shark(y)) -> (Isosmotic(x) & SalineEnvironment(y)))"]}
{"id": "eqasc_validation_1135", "nl": "sharks are vertebrates", "fol": "", "prediction": ["all x.(Shark(x) -> (Vertebrate(x) & Vertebrate(x)))"]}
{"id": "eqasc_validation_1136", "nl": "Vertebrates are animals with backbones, such as horses.", "fol": "", "prediction": ["all x.(Vertebrates(x) -> (Animal(x) & HasBackbone(x) & Horse(x)))"]}
{"id": "eqasc_validation_1137", "nl": "Ancestors of hagfish are thought to have been the earliest animals with backbones", "fol": "", "prediction": ["all x.(Hagfish(x) -> (Ancestors(x,hagfish) & earliestAnimal(x) & HasBackbone(x)))"]}
{"id": "eqasc_validation_1138", "nl": "Bone is found only in vertebrates .", "fol": "", "prediction": ["all x y.((Bone(x) & Vertebrate(y)) -> FoundIn(x,y))"]}
{"id": "eqasc_validation_1139", "nl": "Ancestors of hagfish are thought to have the earliest bones.", "fol": "", "prediction": ["all x.(HasEarlyBones(x) -> AncestorsOfHagfish(x))"]}
{"id": "eqasc_validation_1140", "nl": "Ancestors of hagfish are thought to have been the earliest creatures with bones", "fol": "", "prediction": ["all x.(AncestorsOfHagfish(x) -> (EarlyCreatureWithBones(x) & HasBones(x)))"]}
{"id": "eqasc_validation_1141", "nl": "Vertebrates are animals with backbones.", "fol": "", "prediction": ["all x.(Vertebrates(x) -> HasBackbone(x))"]}
{"id": "eqasc_validation_1142", "nl": "Ancestors of hagfish are thought to have been the earliest animals with backbones.", "fol": "", "prediction": ["all x.(Hagfish(x) -> (Ancestors(x,Hagfish) & EarlyAnimal(x) & HasBackbone(x)))"]}
{"id": "eqasc_validation_1143", "nl": "Property of ancestors and forefathers can only be legally inherited by sons.", "fol": "", "prediction": ["all x y.((Ancestors(x) & Forefathers(y)) -> CanLegallyEarnedBySons(x,y))"]}
{"id": "eqasc_validation_1144", "nl": "The forefathers of hagfish are thought to have been the earliest vertebrates.", "fol": "", "prediction": ["all x.(HagfishForefather(x) -> earliestVertebrate(x))"]}
{"id": "eqasc_validation_1145", "nl": "Hagfishes are a type of jawless fish which are the only parasitic vertebrates.", "fol": "", "prediction": ["all x.(Haggfish(x) -> (JawlessFish(x) & ParasiticVertebrate(x)))"]}
{"id": "eqasc_validation_1146", "nl": "Ancestors of a type of jawless fish which is parasitic are thought to have been the earliest vertebrates", "fol": "", "prediction": ["all x y.((Acestors(x) & JawlessFish(y) & Parasitic(y)) -> EarlyVertebrate(x))"]}
{"id": "eqasc_validation_1147", "nl": "If animals have backbones, they are called a Vertebrate.", "fol": "", "prediction": ["all x.(HasBackbones(x) -> Vertebrate(x))"]}
{"id": "eqasc_validation_1148", "nl": "hagfish have a backbone", "fol": "", "prediction": ["all x.(Hagfish(x) -> HasBackbone(x))"]}
{"id": "eqasc_validation_1149", "nl": "Most aquatic organisms do not have to deal with extremes of temperature or moisture.", "fol": "", "prediction": ["all x.(AquaticOrganism(x) -> (-ExtremeTemperature(x) | ExtremeMoisture(x)))"]}
{"id": "eqasc_validation_1150", "nl": "Fish Fish are the ultimate aquatic organism.", "fol": "", "prediction": ["all x.(Fish(x) -> UltimateAquaticOrganism(x))"]}
{"id": "eqasc_validation_1151", "nl": "most fish do not have to deal with extremes of temperature or moisture", "fol": "", "prediction": ["all x.(Fish(x) -> (-ExtremeTemperature(x) | ExtremeMoisture(x)))"]}
{"id": "eqasc_validation_1152", "nl": "Most fish do not have to deal with extremes of temperature or moisture.", "fol": "", "prediction": ["all x.(Fish(x) -> (-ExtremeTemperature(x) | ExtremeMoisture(x)))"]}
{"id": "eqasc_validation_1153", "nl": "Effects on Aquatic Organisms Triallate is highly toxic to fish and other aquatic organisms.", "fol": "", "prediction": ["all x.(Triallate(x) -> (ToxicToFish(x) & ToOtherAquaticOrganisms(x)))"]}
{"id": "eqasc_validation_1154", "nl": "Moisturizing Secondly, moisturizing the skin is extremely important.", "fol": "", "prediction": ["(MoisturizingSkin) & MoisturizingSkin(MoisturizingSkin) & -MoisturizingSkin(MoisturizingSkin))"]}
{"id": "eqasc_validation_1155", "nl": "Most aquatic organisms do not have to moisturize their skin", "fol": "", "prediction": ["all x.(AquaticOrganism(x) -> -MoisturizeSkin(x))"]}
{"id": "eqasc_validation_1156", "nl": "Fish and other aquatic creatures are no exception.", "fol": "", "prediction": ["all x.((Fish(x) | AquaticCreature(x)) -> -Exception(x))"]}
{"id": "eqasc_validation_1157", "nl": "most fish do not have to deal with temperature or moisture extremes", "fol": "", "prediction": ["all x.(Fish(x) -> (-(TemperatureExtreme(x) | MoistureExtreme(x))))"]}
{"id": "eqasc_validation_1158", "nl": "Most fish do not have to deal with extremes of temperature or moisture", "fol": "", "prediction": ["all x.(Fish(x) -> (-ExtremeTemperature(x) | ExtremeMoisture(x)))"]}
{"id": "eqasc_validation_1159", "nl": "Wetting provides moisture to make brine.", "fol": "", "prediction": ["all x.(Wetting(x) -> ProvidesMoisture(x))"]}
{"id": "eqasc_validation_1160", "nl": "Most aquatic organisms do not have to deal with extremes of temperature or wetness.", "fol": "", "prediction": ["all x.(AquaticOrganism(x) -> -(ExtremeTemperature(x) | ExtremeWetness(x)))"]}
{"id": "eqasc_validation_1161", "nl": "when a metal rusts , that metal becomes orange on the surface", "fol": "", "prediction": ["all x y z.((Metal(x) & Rusts(x) & Metal(y) & Surface(z) & Orange(y)) -> OrangeOnSurface(y,z))"]}
{"id": "eqasc_validation_1162", "nl": "When iron oxidizes, it rusts.", "fol": "", "prediction": ["all x.((Iron(x) & Oxidizes(x)) -> Rusts(x))"]}
{"id": "eqasc_validation_1163", "nl": "When iron oxidizes, that metal becomes orange on the surface.", "fol": "", "prediction": ["all x.((IronOxidizes(x) & Metal(x)) -> OrangeOnSurface(x))"]}
{"id": "eqasc_validation_1164", "nl": "Moisture can damage metal causing rusting and corrosion.", "fol": "", "prediction": ["all x.(Moisture(x) -> (DamageMetal(x) & CausesRusting(x) & CausesCorrosion(x)))"]}
{"id": "eqasc_validation_1165", "nl": "Moisture can cause metal to become orange on the surface.", "fol": "", "prediction": ["all x.(Moisture(x) -> CausesMetalToBecomeOrange(x))"]}
{"id": "eqasc_validation_1166", "nl": "Iron rusts in the presence of oxygen and water.", "fol": "", "prediction": ["all x.(Iron(x) -> (RosesInPresenceOfOxygen(x) & RuinsInPresenceOfWater(x)))"]}
{"id": "eqasc_validation_1167", "nl": "oxygen and water will cause metal to turn orange", "fol": "", "prediction": ["all x y.((Oxygen(x) & Water(y)) -> MetalToTurnOrange(x))"]}
{"id": "eqasc_validation_1168", "nl": "Rust stains are the result of oxidation.", "fol": "", "prediction": ["all x.(RustStain(x) -> Oxidation(x))"]}
{"id": "eqasc_validation_1169", "nl": "metal becomes orange on the surface as a  result of oxidation.", "fol": "", "prediction": ["all x.((Metal(x) & Oxidation(x)) -> OrangeOnSurface(x))"]}
{"id": "eqasc_validation_1170", "nl": "Moisture is the main cause of rust.", "fol": "", "prediction": ["all x.(Moisture(x) -> MainCauseOfRust(x))"]}
{"id": "eqasc_validation_1171", "nl": "Moisture can turn metal orange on the surface", "fol": "", "prediction": ["all x.(Moisture(x) -> TurnsMetalOrange(x))"]}
{"id": "eqasc_validation_1172", "nl": "Chemically, iron is an active metal.", "fol": "", "prediction": ["all x.(Iron(x) -> ActiveMetal(x))"]}
{"id": "eqasc_validation_1173", "nl": "when iron rusts , iron becomes orange on the surface", "fol": "", "prediction": ["all x y z.((Iron(x) & Rusts(x) & Iron(y) & Surface(z)) -> Orange(y))"]}
{"id": "eqasc_validation_1174", "nl": "Iron oxide is rust .", "fol": "", "prediction": ["all x.(IronOxygen(x) -> Rust(x))"]}
{"id": "eqasc_validation_1175", "nl": "when a metal contains iron oxide, it becomes orange on the surface", "fol": "", "prediction": ["all x.((Metal(x) & ContainsIronOxide(x)) -> OrangeOnSurface(x))"]}
{"id": "eqasc_validation_1176", "nl": "In the presence of oxygen and water, iron will become orange on the surface", "fol": "", "prediction": ["all x.((PresenceOfOxygen(x) & PresenceOfWater(x)) -> IronBecomesOrangeOnSurface(x))"]}
{"id": "eqasc_validation_1177", "nl": "Metal turns to rust via oxidation.", "fol": "", "prediction": ["all x.(Metal(x) -> TurnsToRose(x))"]}
{"id": "eqasc_validation_1178", "nl": "oxidation makes metal orange", "fol": "", "prediction": ["all x.(Oxidation(x) -> MakesMetalOrange(x))"]}
{"id": "eqasc_validation_1179", "nl": "when iron rusts it becomes orange on the surface", "fol": "", "prediction": ["all x y.((IronRushes(x) & Iron(y)) -> OrangeOnSurface(x))"]}
{"id": "eqasc_validation_1180", "nl": "Steel is the most useful of metals.", "fol": "", "prediction": ["all x.(Steel(x) -> MostUsefulMetal(x))"]}
{"id": "eqasc_validation_1181", "nl": "When steel rusts it becomes orange.", "fol": "", "prediction": ["all x.((Steel(x) & Rusts(x)) -> Orange(x))"]}
{"id": "eqasc_validation_1182", "nl": "Cast-iron and steel surfaces are susceptible to corrosion in the form of rust.", "fol": "", "prediction": ["all x.((Surface(x) & CastIron(x) & Steel(x)) -> SusceptibleToCorrosion(x))"]}
{"id": "eqasc_validation_1183", "nl": "Cast-iron and steel surfaces are susceptible to becoming orange on the surface", "fol": "", "prediction": ["all x.((Surface(x) & CastIron(x) & Steel(x)) -> (SusceptibleToOrange(x)))"]}
{"id": "eqasc_validation_1184", "nl": "Yin metal is small metal, jewelery metal and decorative metal.", "fol": "", "prediction": ["all x.(YinMetal(x) -> (SmallMetal(x) & JeweleryMetal(x) & DecorativeMetal(x)))"]}
{"id": "eqasc_validation_1185", "nl": "When jewelry rusts it may become orange on the surface.", "fol": "", "prediction": ["all x.((Jewelry(x) & Rusts(x)) -> MayBecomeOrange(x))"]}
{"id": "eqasc_validation_1186", "nl": "Water cause parts to rust, and even a very small amount of rust can damage injectors.", "fol": "", "prediction": ["all x.((Water(x) & CausesPartsToRust(x)) -> DamagesInjectors(x))"]}
{"id": "eqasc_validation_1187", "nl": "water causes metal surface to become orange", "fol": "", "prediction": ["all x y.((Water(x) & MetalSurface(y)) -> OrangeSurface(x,y))"]}
{"id": "eqasc_validation_1188", "nl": "when sound reaches the ear , that sound can be heard", "fol": "", "prediction": ["all x y z.((Sound(x) & Ear(y) & Sound(z) & Reaches(x,y)) -> CanBeHeard(x,z))"]}
{"id": "eqasc_validation_1189", "nl": "Sound waves cause the eardrum to vibrate.", "fol": "", "prediction": ["all x.(SoundWaves(x) -> CausesEardrumVibration(x))"]}
{"id": "eqasc_validation_1190", "nl": "One can hear when sonic waves cause the eardrum to vibrate. ", "fol": "", "prediction": ["all x y.((SonicWaves(x) & Eardrum(y)) -> Vibrate(x,y))"]}
{"id": "eqasc_validation_1191", "nl": "Nevertheless, the sharpest sounds are perceived in the brain.", "fol": "", "prediction": ["all x.(SharpestSound(x) -> PerceivedInBrain(x))"]}
{"id": "eqasc_validation_1192", "nl": "noise is processed when it reaches the brain", "fol": "", "prediction": ["all x.((Noise(x) & ReachesBrain(x)) -> Processed(x))"]}
{"id": "eqasc_validation_1193", "nl": "For sound, the sense of hearing is used.", "fol": "", "prediction": ["all x.(Sound(x) -> UsesSenseOfHearing(x))"]}
{"id": "eqasc_validation_1194", "nl": "ears are used for hearing", "fol": "", "prediction": ["all x.(Ears(x) -> UsedForHearing(x))"]}
{"id": "eqasc_validation_1195", "nl": "Sound waves make the ear drum vibrate.", "fol": "", "prediction": ["all x.(SoundWaves(x) -> MakesEarDrumVibrate(x))"]}
{"id": "eqasc_validation_1196", "nl": "When a wave reaches your ear, your ear drum vibrates and you can hear it", "fol": "", "prediction": ["all x y z.((Wave(x) & Ear(y) & EarDrum(z)) -> (Reaches(x,y) & Vibrates(z,y) & CanHear(x,z)))"]}
{"id": "eqasc_validation_1197", "nl": "Music is sound, sound is energy.", "fol": "", "prediction": ["all x.(Music(x) -> (Sound(x) | Energy(x)))"]}
{"id": "eqasc_validation_1198", "nl": "when music reaches the ear that music can be heard", "fol": "", "prediction": ["all x y.((Music(x) & ReachesEar(x)) -> MusicCanBeHeard(y))"]}
{"id": "eqasc_validation_1199", "nl": "when music reaches the ear, it can be heard", "fol": "", "prediction": ["all x.((MusicReachesEar(x) & ReachesEar(x)) -> CanBeHeard(x))"]}
{"id": "eqasc_validation_1200", "nl": "Music is basically sound produced by vibrations.", "fol": "", "prediction": ["all x.(Music(x) -> (ProducedByVibrations(x) & Sound(x)))"]}
{"id": "eqasc_validation_1201", "nl": "When vibrations reach the ear, music can be heard.", "fol": "", "prediction": ["all x.((VibrationsReachEar(x)) -> MusicCanBeHeard(x))"]}
{"id": "eqasc_validation_1202", "nl": "Otoacoustic emissions are sounds the ear generates.", "fol": "", "prediction": ["all x.(OtoacousticEmissions(x) -> GeneratesSounds(x))"]}
{"id": "eqasc_validation_1203", "nl": "The vibrations that reach the ear to make noise are Otoacoustic", "fol": "", "prediction": ["all x.((Vibration(x) & ReachesEar(x) & MakesNoise(x)) -> Otoacoustic(x))"]}
{"id": "eqasc_validation_1204", "nl": "When the vibrations reach our ears, they are changed into sounds.", "fol": "", "prediction": ["all x.((Vibrations(x) & ReachEars(x)) -> ChangedIntoSounds(x))"]}
{"id": "eqasc_validation_1205", "nl": "When vibrations reach our ears, they can be heard.", "fol": "", "prediction": ["all x.((Vibrations(x) & ReachEars(x)) -> CanBeHeard(x))"]}
{"id": "eqasc_validation_1206", "nl": "measuring the hardness of minerals requires scratching those materials", "fol": "", "prediction": ["all x y.((Mineral(x) & Mineral(y)) -> MeasuresHardnessRequiresScraping(x,y))"]}
{"id": "eqasc_validation_1207", "nl": "For ranking the hardness of minerals, the Mohs scale is generally used.", "fol": "", "prediction": ["all x.((MohsScale(x) & Mineral(y)) -> UsedForRankingHardness(x,y))"]}
{"id": "eqasc_validation_1208", "nl": "Scratching a mineral  allows one to determine the ranking on the Mohs scale", "fol": "", "prediction": ["all x y.((Mineral(x) & Scratching(x,y)) -> DeterminesRankingOnMohsScale(x))"]}
{"id": "eqasc_validation_1209", "nl": "Most gem stones are hard minerals.", "fol": "", "prediction": ["all x.(GemStone(x) -> HardMinerals(x))"]}
{"id": "eqasc_validation_1210", "nl": "You can measure the hardness of a gem stone by scratching it", "fol": "", "prediction": ["all x y.((GemStone(x) & GemStone(y)) -> MeasuresHardnessByCrushing(x,y))"]}
{"id": "eqasc_validation_1211", "nl": "Minerals are classified by their hardness.", "fol": "", "prediction": ["all x.(Mineral(x) -> ClassifiedByHardness(x))"]}
{"id": "eqasc_validation_1212", "nl": "Classifying minerals requires scratching those materials.", "fol": "", "prediction": ["all x.((Mineral(x) & Scratching(x)) -> Classifies(x,y))"]}
{"id": "eqasc_validation_1213", "nl": "Diamonds are so hard because of the shape of a diamond's structure.", "fol": "", "prediction": ["all x.((Diamond(x) & ShapeOfDiamondStructure(x)) -> SoHard(x))"]}
{"id": "eqasc_validation_1214", "nl": "measuring diamonds requires scratching them", "fol": "", "prediction": ["all x.(Diamond(x) -> (Measures(x,Diamonds) & Scratches(x,Diamonds)))"]}
{"id": "eqasc_validation_1215", "nl": "measuring gem hardness requires scratching them", "fol": "", "prediction": ["all x.((MeasuresGemHardness(x) & ScratchesGems(x)) -> RequiresCratching(x))"]}
{"id": "eqasc_validation_1216", "nl": "To rank a mineral on the Mohs scale, one must scratch it.", "fol": "", "prediction": ["all x.((Mineral(x) & MohsScale(x)) -> Scratch(x))"]}
{"id": "eqasc_validation_1217", "nl": "Calcite is a very common mineral.", "fol": "", "prediction": ["all x.(Calcite(x) -> VeryCommonMineral(x))"]}
{"id": "eqasc_validation_1218", "nl": "Measuring the hardness of calcite requires scratching those materials", "fol": "", "prediction": ["all x y.((MeasuringHardnessOfCalcite(x) & Calcite(y)) -> Scratches(x,y))"]}
{"id": "eqasc_validation_1219", "nl": "Carbonate minerals, such as malachite, pearl, and rhodochrosite, are damaged by chemical attack.", "fol": "", "prediction": ["all x.((CarbonateMineral(x) & Malachite(x) & Pearl(x) & Rhodochrosite(x)) -> DamagedByChemicalAttack(x))"]}
{"id": "eqasc_validation_1220", "nl": "measuring the hardness of a pearl requires scratching it", "fol": "", "prediction": ["all x y.((Pearl(x) & Pearl(y)) -> MeasuresHardness(x,y))"]}
{"id": "eqasc_validation_1221", "nl": "Although a diamond is the hardest substance known to man, it can be chipped or scratched.", "fol": "", "prediction": ["all x.(Diamond(x) -> (HarstSubstanceKnownToMan(x) & (Chipped(x) | Scrubbed(x))))"]}
{"id": "eqasc_validation_1222", "nl": "measuring the hardness of minerals requires chipping those materials", "fol": "", "prediction": ["all x y.((Mineral(x) & Mineral(y)) -> MeasuresHardnessRequiresChips(x,y))"]}
{"id": "eqasc_validation_1223", "nl": "Travel is required as necessary.", "fol": "", "prediction": ["all x.(Travel(x) -> Necessary(x))"]}
{"id": "eqasc_validation_1224", "nl": "To measure the hardness of materials, scratching those materials is necessary.", "fol": "", "prediction": ["all x.((MeasuresHardness(x) & Scratches(x)) -> Necessary(x))"]}
{"id": "eqasc_validation_1225", "nl": "Harder minerals can scratch softer minerals.", "fol": "", "prediction": ["all x y.((HarderMineral(x) & SofterMineral(y)) -> CanScratch(x,y))"]}
{"id": "eqasc_validation_1226", "nl": "Measuring hardness of minerals requires a harder mineral.", "fol": "", "prediction": ["all x.(MeasuringHardnessOfMinerals(x) -> RequiresHarshMineral(x))"]}
{"id": "eqasc_validation_1227", "nl": "Moh's scale is used to describe a mineral's hardness.", "fol": "", "prediction": ["all x y.((MohScale(x) & Mineral(y)) -> DefinesHardness(x,y))"]}
{"id": "eqasc_validation_1228", "nl": "Getting a measurement on the Moh's scale requires scratching", "fol": "", "prediction": ["all x y.((MohScale(x) & MohScale(y)) -> RequiresScraping(x,y))"]}
{"id": "eqasc_validation_1229", "nl": "Another type of damage is a scratch.", "fol": "", "prediction": ["all x.(Damage(x) -> Scratch(x))"]}
{"id": "eqasc_validation_1230", "nl": "measuring the hardness of minerals requires damaging them", "fol": "", "prediction": ["all x.((MineralHardness(x) & DamagesMinerals(x)) -> MeasuresHardness(x))"]}
{"id": "eqasc_validation_1231", "nl": "Scratching a mineral is required to determine its place on Moh's scale", "fol": "", "prediction": ["all x y.((Mineral(x) & Scratching(x,y)) -> DeterminesPlaceOnMohsScale(x,y))"]}
{"id": "eqasc_validation_1232", "nl": "To figure out the hardness of a mineral, the Moh's scale of hardness is used.", "fol": "", "prediction": ["all x y.((Mineral(x) & MohsScaleOfHardness(y)) -> FiguredOut(x,y))"]}
{"id": "eqasc_validation_1233", "nl": "the Moh's scale of hardness is used by scratching the materials", "fol": "", "prediction": ["all x.(MohsScaleOfHardness(x) -> ScratchesMaterials(x))"]}
{"id": "eqasc_validation_1234", "nl": "satellites are used to take images from space", "fol": "", "prediction": ["all x y.((Satellite(x) & Space(y)) -> TakesImagesFrom(x,y))"]}
{"id": "eqasc_validation_1235", "nl": "Images include satellite and infrared pictures.", "fol": "", "prediction": ["all x.(Image(x) -> (Satellite(x) | Infrared(x)))"]}
{"id": "eqasc_validation_1236", "nl": "Satellites are used to take infrared pictures from space.", "fol": "", "prediction": ["all x y.((Satellite(x) & Space(y)) -> TakesInfraredPictures(x,y))"]}
{"id": "eqasc_validation_1237", "nl": "Meteorologists employ images from satellites to help forecast the weather.", "fol": "", "prediction": ["all x y.((Meteorologist(x) & Satellite(y)) -> EmploysImagesToPredictWeather(x,y))"]}
{"id": "eqasc_validation_1238", "nl": "Satellites can help forecast the weather", "fol": "", "prediction": ["all x y.((Satellite(x) & Weather(y)) -> CanHelpPredict(x,y))"]}
{"id": "eqasc_validation_1239", "nl": "Images of Earth taken from space.", "fol": "", "prediction": ["all x.(Image(x) -> TakenFromSpace(x))"]}
{"id": "eqasc_validation_1240", "nl": "satellites are used to take images of Earth", "fol": "", "prediction": ["all x y.((Satellite(x) & Earth(y)) -> TakesImagesOf(x,y))"]}
{"id": "eqasc_validation_1241", "nl": "Satellite imagery gives a global perspective on the ozone hole.", "fol": "", "prediction": ["all x.(SatelliteImagery(x) -> GlobalPerspectiveOnOzoneHole(x))"]}
{"id": "eqasc_validation_1242", "nl": "Images from space are used to study the ozone hole", "fol": "", "prediction": ["all x y.((Image(x) & Space(y)) -> UsedToStudyOzoneHole(x,y))"]}
{"id": "eqasc_validation_1243", "nl": "All photos are digital images.", "fol": "", "prediction": ["all x.(Photo(x) -> DigitalImage(x))"]}
{"id": "eqasc_validation_1244", "nl": "satellites are used to take photos from space", "fol": "", "prediction": ["all x y.((Satellite(x) & Space(y)) -> TakesPhotosFrom(x,y))"]}
{"id": "eqasc_validation_1245", "nl": "satellites are used to take pictures of Earth from space", "fol": "", "prediction": ["all x y.((Satellite(x) & Earth(y)) -> TakesPicturesFromSpace(x,y))"]}
{"id": "eqasc_validation_1246", "nl": "Meteorologists rely on weather images from space.", "fol": "", "prediction": ["all x y.((Meteorologist(x) & WeatherImage(y)) -> ReliesOn(x,y))"]}
{"id": "eqasc_validation_1247", "nl": "Meteorologists rely on satellites for data.", "fol": "", "prediction": ["all x y.((Meteorologist(x) & Satellite(y)) -> ReliesOnForData(x,y))"]}
{"id": "eqasc_validation_1248", "nl": "Satellite images are digital photographs.", "fol": "", "prediction": ["all x.(SatelliteImage(x) -> DigitalPhotograph(x))"]}
{"id": "eqasc_validation_1249", "nl": "Satellites are used to take digital photographs from space.", "fol": "", "prediction": ["all x y.((Satellite(x) & DigitalPhotograph(y)) -> TakesFromSpace(x,y))"]}
{"id": "eqasc_validation_1250", "nl": "seat belts are used for preventing injuries to passengers in cars", "fol": "", "prediction": ["all x y.((SeatBelt(x) & Car(y)) -> PreventsInjuries(x,y))"]}
{"id": "eqasc_validation_1251", "nl": "Children are passengers too.", "fol": "", "prediction": ["all x.(Child(x) -> Passenger(x))"]}
{"id": "eqasc_validation_1252", "nl": "seat belts prevent injuries to children", "fol": "", "prediction": ["all x y.((SeatBelt(x) & Child(y)) -> PreventsInjuries(x,y))"]}
{"id": "eqasc_validation_1253", "nl": "Seat belts save lives .", "fol": "", "prediction": ["all x.(SeatBelt(x) -> SavesLives(x))"]}
{"id": "eqasc_validation_1254", "nl": "Preventing injuries to passengers in cars saves lives.", "fol": "", "prediction": ["all x y.((Car(x) & Passenger(y)) -> PreventsInjuries(x,y))"]}
{"id": "eqasc_validation_1255", "nl": "Car accidents are a leading cause of death for children today.", "fol": "", "prediction": ["all x.(CarAccident(x) -> LeadingCauseOfDeath(x))"]}
{"id": "eqasc_validation_1256", "nl": "seat belts can help prevent death", "fol": "", "prediction": ["all x.(SeatBelt(x) -> HelpsPreventDeath(x))"]}
{"id": "eqasc_validation_1257", "nl": "Many injuries in crashes are caused by unbelted passengers colliding with other people in the car.", "fol": "", "prediction": ["all x y.((Crash(x) & UnbeltedPassenger(y) & Colliding(y,x)) -> Injured(x,y))"]}
{"id": "eqasc_validation_1258", "nl": "Seat belts are used for avoiding injuries in crashes for passengers", "fol": "", "prediction": ["all x y.((SeatBelt(x) & Passenger(y)) -> (UsedForEvitingInjuries(x,y) & InCrashes(x,y)))"]}
{"id": "eqasc_validation_1259", "nl": "Helmets prevent injuries and death.", "fol": "", "prediction": ["all x.(Helmet(x) -> (PreventsInjuries(x) & PreventsDeath(x)))"]}
{"id": "eqasc_validation_1260", "nl": "Seat belts and helmets protect passengers", "fol": "", "prediction": ["all x y.((SeatBelt(x) & Helmet(y)) -> ProtectsPassengers(x,y))"]}
{"id": "eqasc_validation_1261", "nl": "An injury is caused by an accident.", "fol": "", "prediction": ["all x.(Injury(x) -> CausedByAccident(x))"]}
{"id": "eqasc_validation_1262", "nl": "Seat belts are important in the case of an accident.", "fol": "", "prediction": ["all x.((SeatBelt(x) & Accident(x)) -> Important(x))"]}
{"id": "eqasc_validation_1263", "nl": "Seat Belts Seat belts provide primary protection in all types of crashes.", "fol": "", "prediction": ["all x.(SeatBelt(x) -> ProvidesPrimaryProtection(x))"]}
{"id": "eqasc_validation_1264", "nl": "car crashes can injure passengers", "fol": "", "prediction": ["all x y.((CarCrashes(x) & Passenger(y)) -> CanInjure(x,y))"]}
{"id": "eqasc_validation_1265", "nl": "Whiplash injuries are soft tissue injuries.", "fol": "", "prediction": ["all x.(WhiplashInjuries(x) -> SoftTissueInjuries(x))"]}
{"id": "eqasc_validation_1266", "nl": "Seat belts can prevent whiplash in cars.", "fol": "", "prediction": ["all x.(SeatBelt(x) -> PreventsWhiplash(x))"]}
{"id": "eqasc_validation_1267", "nl": "seat belts are used for preventing injuries to passengers in vehicles", "fol": "", "prediction": ["all x y.((SeatBelt(x) & Vehicle(y)) -> PreventsInjuries(x,y))"]}
{"id": "eqasc_validation_1268", "nl": "Injuries to drivers and passengers increase when the vehicle swerves.", "fol": "", "prediction": ["all x y.((Vehicle(x) & Swerves(x)) -> (InjuriesToDrivers(x) & InjuriesToPassengers(x)))"]}
{"id": "eqasc_validation_1269", "nl": "Seatbelts can prevent injuries while swerving.", "fol": "", "prediction": ["all x.(Seatbelt(x) -> PreventsInjuries(x))"]}
{"id": "eqasc_validation_1270", "nl": "Waldron buckles with lead foil made up the seat belts.", "fol": "", "prediction": ["all x y.((WaldronBolt(x) & LeadFoil(y)) -> MadeUpSeatbelts(x,y))"]}
{"id": "eqasc_validation_1271", "nl": "Waldron buckles with lead are used to prevent injuries to passengers in cars", "fol": "", "prediction": ["all x y.((WaldronBolt(x) & Car(y)) -> (BladesWithLead(x) & PreventsInjuries(x,y)))"]}
{"id": "eqasc_validation_1272", "nl": "a wildfire changes an ecosystem drastically", "fol": "", "prediction": ["all x y.((Wildfire(x) & Ecosystem(y)) -> ChangesDirriously(x,y))"]}
{"id": "eqasc_validation_1273", "nl": "An ecosystem is like a neighborhood in nature.", "fol": "", "prediction": ["all x.(Ecosystem(x) -> (Neighborhood(x) & InNature(x)))"]}
{"id": "eqasc_validation_1274", "nl": "A wildfire changes a neighborhood in nature drastically.", "fol": "", "prediction": ["all x y.((Wildfire(x) & Neighborhood(y)) -> ChangesDirtuallyInNature(x,y))"]}
{"id": "eqasc_validation_1275", "nl": "Humans start most wildfires.", "fol": "", "prediction": ["all x.(Human(x) -> StartsWildfire(x))"]}
{"id": "eqasc_validation_1276", "nl": "humans can change ecosystems drastically", "fol": "", "prediction": ["all x y.((Human(x) & Ecosystem(y)) -> CanChangeDramaticly(x,y))"]}
{"id": "eqasc_validation_1277", "nl": "Fire is a natural part forest ecosystems.", "fol": "", "prediction": ["all x.(Fire(x) -> NaturalPartForestEcosystem(x))"]}
{"id": "eqasc_validation_1278", "nl": "a wildfire changes forests", "fol": "", "prediction": ["all x y.((Wildfire(x) & Forest(y)) -> Changes(x,y))"]}
{"id": "eqasc_validation_1279", "nl": "An ecosystem is a community of species in a specific area.", "fol": "", "prediction": ["all x.(Ecosystem(x) -> exists y.(Species(y) & Community(x,y)) & exists z.(Area(z) & InArea(x,z))))"]}
{"id": "eqasc_validation_1280", "nl": "A wildfire changes a community of species in a specific area drastically.", "fol": "", "prediction": ["all x y z.((Wildfire(x) & CommunityOfSpecies(y) & Area(z)) -> ChangesDramaticly(x,y,z))"]}
{"id": "eqasc_validation_1281", "nl": "Weather and wildfire are two of the forces that act within ecosystems.", "fol": "", "prediction": ["all x y.((Weather(x) & Wildfire(y)) -> ActsInEcosystems(x,y))"]}
{"id": "eqasc_validation_1282", "nl": "Weather is a force that changes an ecosystem drastically", "fol": "", "prediction": ["all x y.((Weather(x) & Ecosystem(y)) -> ChangesDramaticly(x,y))"]}
{"id": "eqasc_validation_1283", "nl": "a forest fire can change an ecosystem", "fol": "", "prediction": ["all x y.((ForestFire(x) & Ecosystem(y)) -> CanChange(x,y))"]}
{"id": "eqasc_validation_1284", "nl": "Very large ecosystems are known as biomes .", "fol": "", "prediction": ["all x.((LargeEcosystem(x) & Biome(x)) -> KnownAs(x))"]}
{"id": "eqasc_validation_1285", "nl": "A wildfire changes a biome drastically", "fol": "", "prediction": ["all x y.((Wildfire(x) & Biome(y)) -> ChangesDramaticly(x,y))"]}
{"id": "eqasc_validation_1286", "nl": "Forest ecosystems are dynamic and ever changing.", "fol": "", "prediction": ["all x.(ForestEcosystem(x) -> (Dynamic(x) & EverChange(x)))"]}
{"id": "eqasc_validation_1287", "nl": "a wildfire changes a forest drastically", "fol": "", "prediction": ["all x y.((Wildfire(x) & Forest(y)) -> ChangesDirriously(x,y))"]}
{"id": "eqasc_validation_1288", "nl": "Forest fires change an ecosystem drastically", "fol": "", "prediction": ["all x y z.((ForestFire(x) & Ecosystem(y) & Ecosystem(z)) -> ChangesDirriously(x,y,z))"]}
{"id": "eqasc_validation_1289", "nl": "Wildfires burn uncontrollably across Mexico, destroying rare plants and animals.", "fol": "", "prediction": ["all x.(Wildfire(x) -> (BurnsUncontrollablyAcrossMexico(x) & DestroysRarePlantsAndAnimals(x)))"]}
{"id": "eqasc_validation_1290", "nl": "uncontrollable burning changes an ecosystem drastically", "fol": "", "prediction": ["all x y.((UncontrollableBurning(x) & Ecosystem(y)) -> ChangesDramaticly(x,y))"]}
{"id": "eqasc_validation_1291", "nl": "Biomes are global ecosystems.", "fol": "", "prediction": ["all x.(Biome(x) -> GlobalEcosystem(x))"]}
{"id": "eqasc_validation_1292", "nl": "A wildfire can drastically change a biome.", "fol": "", "prediction": ["all x y.((Wildfire(x) & Biome(y)) -> CanCruciallyChange(x,y))"]}
{"id": "eqasc_validation_1293", "nl": "Wildfires scorch the West.", "fol": "", "prediction": ["all x.(Wildfire(x) -> ScorchesWest(x))"]}
{"id": "eqasc_validation_1294", "nl": "The West experiences drastic changes to its ecosystem", "fol": "", "prediction": ["all x y.((West(x) & Ecosystem(y)) -> ExperiencesDrasticChanges(x,y))"]}
{"id": "eqasc_validation_1295", "nl": "seeing requires light", "fol": "", "prediction": ["all x.(Seeing(x) -> RequiresLight(x))"]}
{"id": "eqasc_validation_1296", "nl": "When people look around everyday, they see color.", "fol": "", "prediction": ["all x.(LooksAroundEveryDay(x) -> SeesColor(x))"]}
{"id": "eqasc_validation_1297", "nl": "When people look around everyday, they require light.", "fol": "", "prediction": ["all x.(LooksAroundEveryDay(x) -> RequiresLight(x))"]}
{"id": "eqasc_validation_1298", "nl": "Light is essential to vision.", "fol": "", "prediction": ["all x.(Light(x) -> EssentialToVision(x))"]}
{"id": "eqasc_validation_1299", "nl": "seeing and vision are the same", "fol": "", "prediction": ["all x y.((Seen(x) & Vision(y)) -> Same(x,y))"]}
{"id": "eqasc_validation_1300", "nl": "Light is simply the one form of radiation our eyes can see.", "fol": "", "prediction": ["all x.(Light(x) -> exists y.(Rayon(y) & EyesCanSee(x,y)))"]}
{"id": "eqasc_validation_1301", "nl": "eyes require light", "fol": "", "prediction": ["all x.(Eyes(x) -> RequiresLight(x))"]}
{"id": "eqasc_validation_1302", "nl": "Sight is the mere ability to see, and the eye's responses to light shining into it.", "fol": "", "prediction": ["all x.(Sight(x) -> (Sees(x) & EyeResponsesToLight(x)))"]}
{"id": "eqasc_validation_1303", "nl": "Eyes require light shining into it", "fol": "", "prediction": ["all x.(Eyes(x) -> RequiresLightShiningInto(x,y))"]}
{"id": "eqasc_validation_1304", "nl": "Humans see with our eyes.", "fol": "", "prediction": ["all x.(Human(x) -> SeesWithEyes(x))"]}
{"id": "eqasc_validation_1305", "nl": "Vision is our ability to see.", "fol": "", "prediction": ["all x.(Vision(x) -> CanSee(x))"]}
{"id": "eqasc_validation_1306", "nl": "light is required for vision", "fol": "", "prediction": ["all x.((Light(x) & Vision(x)) -> Requires(x,Light))"]}
{"id": "eqasc_validation_1307", "nl": "Light comes through the pupil.", "fol": "", "prediction": ["all x y.((Pupil(x) & Light(y)) -> ComesThrough(x,y))"]}
{"id": "eqasc_validation_1308", "nl": "seeing requires pupils", "fol": "", "prediction": ["all x y.((Seen(x) & Pupil(y)) -> Requires(x,y))"]}
{"id": "eqasc_validation_1309", "nl": "a meter stick is used to measure distance", "fol": "", "prediction": ["all x y.((MeterStick(x) & MeasureDistance(y)) -> UsedToMeasureDistance(x,y))"]}
{"id": "eqasc_validation_1310", "nl": "Spacings are on center measurements, or the distance between each plant.", "fol": "", "prediction": ["all x.(Spacing(x) -> (CenterMeasurements(x) | DistanceBetweenPlants(x)))"]}
{"id": "eqasc_validation_1311", "nl": "A meter stick is used to measure the space between.", "fol": "", "prediction": ["all x.(MeterStick(x) -> MeasuresSpaceBetween(x))"]}
{"id": "eqasc_validation_1312", "nl": "Depths and distances are represented in meters.", "fol": "", "prediction": ["all x.((Depth(x) | Distance(x)) -> RepresentedInMeters(x))"]}
{"id": "eqasc_validation_1313", "nl": "a meter stick is used to measure meters", "fol": "", "prediction": ["all x y.((MeterStick(x) & Meter(y)) -> MeasuresMeters(x,y))"]}
{"id": "eqasc_validation_1314", "nl": "Measure distances using a measuring device.", "fol": "", "prediction": ["all x y.((MeasuresDistances(x) & MeasuresDevice(y)) -> MeasuresDistances(x,y))"]}
{"id": "eqasc_validation_1315", "nl": "a meter stick is a measuring device", "fol": "", "prediction": ["all x.(MeterStick(x) -> MeasurementDevice(x))"]}
{"id": "eqasc_validation_1316", "nl": "Boat brokerages and dealerships are located within walking distance.", "fol": "", "prediction": ["all x.(BoatBrokerage(x) & BoatDepot(x)) -> WithinWalkingDistance(x))"]}
{"id": "eqasc_validation_1317", "nl": "The path between the boat brokerages and dealership locations is measured by a meter stick", "fol": "", "prediction": ["all x y z.((BoatBrokers(x) & BoatDemandator(y) & MeterStick(z)) -> MeasuresPath(x,y,z))"]}
{"id": "eqasc_validation_1318", "nl": "Meter sticks have units called centimeters and millimeters.", "fol": "", "prediction": ["all x.(MeterStick(x) -> (HasCentimeter(x) | HasMillimeter(x)))"]}
{"id": "eqasc_validation_1319", "nl": "Centimeters and millimeters are units of distance.", "fol": "", "prediction": ["all x.((Centimeter(x) | Millimeter(x)) -> DistanceUnit(x))"]}
{"id": "eqasc_validation_1320", "nl": "All distances are in meters , by the way.", "fol": "", "prediction": ["all x.(Distance(x) -> (InMeters(x) & ByTheWay(x)))"]}
{"id": "eqasc_validation_1321", "nl": "a meter stick measures meters", "fol": "", "prediction": ["all x.(MeterStick(x) -> MeasuresMeters(x))"]}
{"id": "eqasc_validation_1322", "nl": "Each person is placed at a different distance from the object.", "fol": "", "prediction": ["all x y.((Person(x) & Object(y)) -> DifferentDistance(x,y))"]}
{"id": "eqasc_validation_1323", "nl": "a meter stick is used to measure between a person and an object", "fol": "", "prediction": ["all x y z.((MeterStick(x) & Person(y) & Object(z)) -> MeasuresBetween(x,y,z))"]}
{"id": "eqasc_validation_1324", "nl": "Meter stick is 100 cm.", "fol": "", "prediction": ["all x.(MeterStick(x) -> 100Cm(x))"]}
{"id": "eqasc_validation_1325", "nl": "100 cm is a meter", "fol": "", "prediction": ["all x.((100Cm(x) & Meter(x)) -> Meter(x))"]}
{"id": "eqasc_validation_1326", "nl": "A 100 cm stick is used to measure distance.", "fol": "", "prediction": ["all x.((Stick(x) & 100Cm(x)) -> MeasuresDistance(x))"]}
{"id": "eqasc_validation_1327", "nl": "Space is a distance between.", "fol": "", "prediction": ["all x.(Space(x) -> DistanceBetween(x))"]}
{"id": "eqasc_validation_1328", "nl": "a meter stick is used to measure space between things", "fol": "", "prediction": ["all x y.((MeterStick(x) & Things(y)) -> MeasuresSpaceBetween(x,y))"]}
{"id": "eqasc_validation_1329", "nl": "Length refers to both the time of the ride and the distances available.", "fol": "", "prediction": ["all x.(Length(x) -> (TimeOfRide(x) & DistancesAvailable(x)))"]}
{"id": "eqasc_validation_1330", "nl": "A meter stick is used to measure length.", "fol": "", "prediction": ["all x.(MeterStick(x) -> MeasuresLength(x))"]}
{"id": "eqasc_validation_1331", "nl": "All distances are in feet.", "fol": "", "prediction": ["all x.(Distance(x) -> InFeet(x))"]}
{"id": "eqasc_validation_1332", "nl": "a meter stick can be used to measure feet", "fol": "", "prediction": ["all x.(MeterStick(x) -> MeasuresFeet(x))"]}
{"id": "eqasc_validation_1333", "nl": "How transaction measurements are calculated.", "fol": "", "prediction": ["all x.(TransactionMeasurement(x) -> Calculated(x))"]}
{"id": "eqasc_validation_1334", "nl": "a meter stick is used to calculate distance", "fol": "", "prediction": ["all x y.((MeterStick(x) & Distance(y)) -> Calculates(x,y))"]}
{"id": "eqasc_validation_1335", "nl": "Loss of ozone has created an ozone hole over Antarctica.", "fol": "", "prediction": ["all x y.((LossOfOzone(x) & Antarctica(y)) -> CreatedOzoneHole(x,y))"]}
{"id": "eqasc_validation_1336", "nl": "Scientists know that ozone-destroying industrial chemicals are the major cause of ozone loss.", "fol": "", "prediction": ["all x y.((Scientist(x) & OzoneDisruptingIndustrialChemicals(y)) -> MajorCauseOfOzoneLoss(x,y))"]}
{"id": "eqasc_validation_1337", "nl": "Chemicals created a hole in the ozone over Antarctica ", "fol": "", "prediction": ["all x y z.((Chemicals(x) & Ozone(y) & Antarctica(z)) -> CreatedHoleInOzone(x,y,z))"]}
{"id": "eqasc_validation_1338", "nl": "Antarctica's ozone layer is threatened by depletion.", "fol": "", "prediction": ["all x.(Antarctica(x) -> ThreatenedByDepletion(x))"]}
{"id": "eqasc_validation_1339", "nl": "loss of ozone can mean an ozone hole", "fol": "", "prediction": ["all x.(LossOfOzone(x) -> OzoneHole(x))"]}
{"id": "eqasc_validation_1340", "nl": "Another sign of global warming is a hole in the ozone layer over Antarctica.", "fol": "", "prediction": ["all x.(GlobalWarming(x) -> HoleInOzoneLayerOverAntarctica(x))"]}
{"id": "eqasc_validation_1341", "nl": "Global warming has created an ozone hole", "fol": "", "prediction": ["all x y.((GlobalWarming(x) & OzoneHole(y)) -> Created(x,y))"]}
{"id": "eqasc_validation_1342", "nl": "Ozone depletion causes global warming.", "fol": "", "prediction": ["all x.(OzoneDepletion(x) -> CausesGlobalWarming(x))"]}
{"id": "eqasc_validation_1343", "nl": "a hole over antarctica causes global warming", "fol": "", "prediction": ["all x y.((HoleOverAntarctica(x) & Antarctica(y)) -> CausesGlobalWarming(x,y))"]}
{"id": "eqasc_validation_1344", "nl": "Ozone Ozone is a natural component of the atmosphere.", "fol": "", "prediction": ["all x.(Ozone(x) -> NaturalComponentOfAtmosphere(x))"]}
{"id": "eqasc_validation_1345", "nl": "loss of a natural component of the atmosphere has created a hole over Antarctica", "fol": "", "prediction": ["all x y.((LossOfNaturalComponentOfAtmosphere(x) & NaturalComponentOfAtmosphere(y)) -> CreatedHoleOverAntarctica(x))"]}
{"id": "eqasc_validation_1346", "nl": "Ozone Loss Ozone is produced by intense ultraviolet radiation in the upper stratosphere.", "fol": "", "prediction": ["all x.(OzoneLoss(x) -> (IntenseUltravioletRadiation(x) & UpperStratosphere(x)))"]}
{"id": "eqasc_validation_1347", "nl": "intense ultraviolet radiation in the upper stratosphere has created an ozone hole over Antarctica", "fol": "", "prediction": ["all x y.((IntenseUltravioletRadiation(x) & UpperStratosphere(y)) -> CreatedOzoneHoleOverAntarctica(x))"]}
{"id": "eqasc_validation_1348", "nl": "Ozone loss is rapid.", "fol": "", "prediction": ["all x.(OzoneLoss(x) -> Rapid(x))"]}
{"id": "eqasc_validation_1349", "nl": "ozone is disappearing rapidly", "fol": "", "prediction": ["all x.(Ozone(x) -> DisappearingRapidly(x))"]}
{"id": "eqasc_validation_1350", "nl": "Ozone depletion allows more ultraviolet radiation, which causes skin cancer.", "fol": "", "prediction": ["all x.(OzoneDepletion(x) -> (AllowsMoreUltravioletRadiation(x) & CausesSkinCancer(x)))"]}
{"id": "eqasc_validation_1351", "nl": "People living near Antartica now face an elevated skin cancer risk due to increased ultraviolet radiation", "fol": "", "prediction": ["all x y.((Person(x) & LivingNearAntartica(x)) -> (ElevatedSkinCancerRisk(x) & IncreasedUltravioletRadiation(y)))"]}
{"id": "eqasc_validation_1352", "nl": "Ozone is a key atmospheric chemical and protective ultraviolet shield.", "fol": "", "prediction": ["all x.(Ozone(x) -> (AtmosphericChemical(x) & ProtectiveUVShield(x)))"]}
{"id": "eqasc_validation_1353", "nl": "the hole over antarctica reduces ultraviolet shielding", "fol": "", "prediction": ["all x y.((HoleOverAntarctica(x) & Antarctica(y)) -> ReducesUVShielding(x,y))"]}
{"id": "eqasc_validation_1354", "nl": "An annual ozone hole over Antarctica has been observed since the 1980s.", "fol": "", "prediction": ["all x y.((AnnualOzoneHole(x) & Antarctica(y)) -> ObservedFromThe80s(x,y))"]}
{"id": "eqasc_validation_1355", "nl": "Loss of ozone has created a hole over the south pole", "fol": "", "prediction": ["all x y.((LossOzone(x) & SouthPole(y)) -> CreatedHoleOver(x,y))"]}
{"id": "eqasc_validation_1356", "nl": "Ozone is triatomic oxygen, O3.", "fol": "", "prediction": ["all x.(Ozone(x) -> (TriatomicOxygen(x) & O3.(Ozone))))"]}
{"id": "eqasc_validation_1357", "nl": "Loss of triatomic oxygen has created a triatomic oxygen hole over Antarctica.", "fol": "", "prediction": ["all x y.((LossOfTriatomicOxygen(x) & Antarctica(y)) -> CreatedTriatomicOxygenHole(x,y))"]}
{"id": "eqasc_validation_1358", "nl": "high mountains with well-rounded peaks can be formed by collision of crustal plates", "fol": "", "prediction": ["all x y.((HighMountain(x) & WellRoundedPeak(x) & CrasstalPlate(y)) -> FormedByCollision(x,y))"]}
{"id": "eqasc_validation_1359", "nl": "When plates collide, the earthquake is the result from the collision.", "fol": "", "prediction": ["all x.((PlatesCollide(x) & Earthquake(x)) -> CollisionResult(x))"]}
{"id": "eqasc_validation_1360", "nl": "earthquakes can result in formation of high mountains with well-rounded peaks", "fol": "", "prediction": ["all x y.((Earthquake(x) & HighMountain(y) & WellRoundedPeak(y)) -> CanResultInFormation(x,y))"]}
{"id": "eqasc_validation_1361", "nl": "Many earthquakes occur when the earth's crustal plates grind and shift along one another.", "fol": "", "prediction": ["all x y.((Earthquake(x) & EarthsCrustalPlates(y) & GrindAndShiftAlong(y,x)) -> Occurs(x))"]}
{"id": "eqasc_validation_1362", "nl": "earthquakes can occur in areas with high mountains with well-rounded peaks ", "fol": "", "prediction": ["all x y.((Earthquake(x) & Area(y) & HighMountains(y) & WellRoundedPeaks(y)) -> CanOccur(x,y))"]}
{"id": "eqasc_validation_1363", "nl": "Plate tectonics is the gradual movement of crustal plates on the surface of the earth.", "fol": "", "prediction": ["all x.(PlateTectonics(x) -> (MovementOfCrustalPlates(x) & OnSurfaceOfEarth(x)))"]}
{"id": "eqasc_validation_1364", "nl": "Plate tectonics can form high mountains with well-rounded peaks.", "fol": "", "prediction": ["all x.(PlateTectonics(x) -> (FormsHighMountains(x) & WellRoundedPeaks(x)))"]}
{"id": "eqasc_validation_1365", "nl": "Plate Tectonics is the study of crustal plates and their boundaries.", "fol": "", "prediction": ["all x.(PlateTectonics(x) -> (StudiesCrustalPlates(x) & StudiesCrustalPlateBoundaries(x)))"]}
{"id": "eqasc_validation_1366", "nl": "The formation of high mountains can be explained by the study of plate tectonics.", "fol": "", "prediction": ["all x.((HighMountain(x) & PlateTectonics(x)) -> CanExplainFormation(x))"]}
{"id": "eqasc_validation_1367", "nl": "Another phenomena associated with collision and subduction of the plates is earthquakes .", "fol": "", "prediction": ["all x.((Phenomenon(x) & Collision(x) & Subduction(x)) -> Earthquakes(x))"]}
{"id": "eqasc_validation_1368", "nl": "earthquakes form in the same way as high mountains", "fol": "", "prediction": ["all x y.((Earthquake(x) & HighMountain(y)) -> FormsInSameManner(x,y))"]}
{"id": "eqasc_validation_1369", "nl": "The Himalayas can be formed by collision of crustal plates", "fol": "", "prediction": ["all x.(Himalaya(x) -> (FormedByCrisisalPlateCollusion(x) & CrustalPlateCollusion(x)))"]}
{"id": "eqasc_validation_1370", "nl": "On Earth, volcanoes are found mainly along the colliding boundaries of great crustal plates.", "fol": "", "prediction": ["all x.(Volcano(x) -> (OnEarth(x) & CollidingBoundariesOfGrandeCrustalPlates(x)))"]}
{"id": "eqasc_validation_1371", "nl": "Volcanoes are likely to be found near high mountains.", "fol": "", "prediction": ["all x.(Volcano(x) -> (LikelyToBeFoundNearHighMountains(x)))"]}
{"id": "eqasc_validation_1372", "nl": "high mountains with well-rounded peaks can be formed by collision of something studied by plate tectonics", "fol": "", "prediction": ["all x y.((HighMountain(x) & WellRoundedPeaks(x) & PlateTectonics(y)) -> FormedByCollusion(x,y))"]}
{"id": "eqasc_validation_1373", "nl": "high mountains with well-rounded peaks can be formed by collision of plate tectonics", "fol": "", "prediction": ["all x y.((HighMountain(x) & WellRoundedPeak(x) & PlateTectonics(y) & CollisionOfPlateTectonics(x,y)) -> FormedBy(x,y))"]}
{"id": "eqasc_validation_1374", "nl": "Infancy is the period of most rapid growth after birth.", "fol": "", "prediction": ["all x.(Infancy(x) -> (RapidGrowthAfterBirth(x)))"]}
{"id": "eqasc_validation_1375", "nl": "Babies learn most during their rapid growth period.", "fol": "", "prediction": ["all x.((Baby(x) & RapidGrowthPeriod(x)) -> LearnsMost(x))"]}
{"id": "eqasc_validation_1376", "nl": "Many babies are born with low birth weight.", "fol": "", "prediction": ["all x.(Baby(x) -> BornWithLowBirthWeight(x))"]}
{"id": "eqasc_validation_1377", "nl": "infancy is the period of most rapid growth after being born", "fol": "", "prediction": ["all x.(Infancy(x) -> (RapidGrowthAfterBirth(x) & Born(x)))"]}
{"id": "eqasc_validation_1378", "nl": "Learning begins in infancy.", "fol": "", "prediction": ["all x.(Learning(x) -> Infancy(x))"]}
{"id": "eqasc_validation_1379", "nl": "After birth, learning begins.", "fol": "", "prediction": ["all x.((Birth(x) & Learning(x)) -> Starts(x))"]}
{"id": "eqasc_validation_1380", "nl": "While a baby is very young, during infancy, co-sleeping is very convenient for feeding schedules.", "fol": "", "prediction": ["all x.((Baby(x) & VeryYoung(x)) -> (CoSleeping(x) & Infancy(x)))"]}
{"id": "eqasc_validation_1381", "nl": "Very young babies have the period of most rapid growth after birth", "fol": "", "prediction": ["all x.((Baby(x) & VeryYoung(x)) -> MostRapidGrowthAfterBirth(x))"]}
{"id": "eqasc_validation_1382", "nl": "babies are in the period of most rapid growth after birth", "fol": "", "prediction": ["all x.(Baby(x) -> (RapidGrowthAfterBirth(x) & MostRapidGrowthAfterBirth(x)))"]}
{"id": "eqasc_validation_1383", "nl": "the period of most rapid growth after birth is when they are a baby", "fol": "", "prediction": ["all x.((Baby(x) & Baby(x)) -> MostRapidGrowthAfterBirth(x))"]}
{"id": "eqasc_validation_1384", "nl": "Infancy has three stages.", "fol": "", "prediction": ["all x.(Infancy(x) -> HasThreeStages(x))"]}
{"id": "eqasc_validation_1385", "nl": "The three stages after birth are the period of most rapid growth in life.", "fol": "", "prediction": ["all x.((Stage(x) & AfterBirth(x)) -> MostRapidGrowthInLife(x))"]}
{"id": "eqasc_validation_1386", "nl": "Infancy and early childhood are times of rapid growth and development.", "fol": "", "prediction": ["all x.((Infancy(x) | EarlyChildhood(x)) -> (RapidGrowth(x) & RapidDevelopment(x)))"]}
{"id": "eqasc_validation_1387", "nl": "development is rapid in childhood", "fol": "", "prediction": ["all x.((Crowd(x) & Childhood(x)) -> RapidDevelopment(x))"]}
{"id": "eqasc_validation_1388", "nl": "Development means to get better, growth means to get bigger.", "fol": "", "prediction": ["all x y.((Development(x) & Growth(y)) -> (GetBetter(x) & GetBigger(y)))"]}
{"id": "eqasc_validation_1389", "nl": "Infancy is the period of most rapidly getting bigger after birth", "fol": "", "prediction": ["all x.(Infancy(x) -> (RapidlyGrowingBiggerAfterBirth(x) & AfterBirth(x)))"]}
{"id": "eqasc_validation_1390", "nl": "Infants are birth to one year.", "fol": "", "prediction": ["all x.(Infant(x) -> BirthToOneYear(x))"]}
{"id": "eqasc_validation_1391", "nl": "the period of most rapid growth is the first year", "fol": "", "prediction": ["all x.(RapidGrowthPeriod(x) -> FirstYear(x))"]}
{"id": "eqasc_validation_1392", "nl": "Infants, children, and teens have relatively high nutrition needs to fuel their rapid growth.", "fol": "", "prediction": ["all x.((Infant(x) | Child(x) | Teen(x)) -> HighNutritionNeeds(x))"]}
{"id": "eqasc_validation_1393", "nl": "High nutrition is needed to fuel an infant's growth.", "fol": "", "prediction": ["all x.((Infant(x) & HighNutrition(x)) -> FuelsGrowth(x))"]}
{"id": "eqasc_validation_1394", "nl": "When a person is born, a birth certificate is written up to record their birth.", "fol": "", "prediction": ["all x.(Birth(x) -> WrittenUpBirthCertificate(x))"]}
{"id": "eqasc_validation_1395", "nl": "Infancy is the period of most rapid growth after being born.", "fol": "", "prediction": ["all x.(Infancy(x) -> (RapidGrowthAfterBirth(x) & Born(x)))"]}
{"id": "eqasc_validation_1396", "nl": "Communication begins in infancy.", "fol": "", "prediction": ["all x.(Communication(x) -> InFancy(x))"]}
{"id": "eqasc_validation_1397", "nl": "Communication begins in the period of most rapid growth after birth", "fol": "", "prediction": ["all x y.((Communication(x) & Birth(y)) -> MostRapidGrowthAfterBirth(x,y))"]}
{"id": "eqasc_validation_1398", "nl": "Rapid growth means rapid advancement.", "fol": "", "prediction": ["all x.(RapidGrowth(x) -> RapidAdvancement(x))"]}
{"id": "eqasc_validation_1399", "nl": "Infancy is the period of most rapid advancement", "fol": "", "prediction": ["all x.(Infancy(x) -> (RapidAdvancement(x) & MostRapidAdvancement(x)))"]}
{"id": "eqasc_validation_1400", "nl": "Food is easier to chew because it is moistened by saliva from the salivary glands.", "fol": "", "prediction": ["all x.((Food(x) & MoistenedBySaline(x)) -> EasierToCheek(x))"]}
{"id": "eqasc_validation_1401", "nl": "Salivary Gland Cancer Salivary glands are located throughout the oral cavity.", "fol": "", "prediction": ["all x.(SalivaryGlandCancer(x) -> SalivaryGland(x))"]}
{"id": "eqasc_validation_1402", "nl": "Food is easier to chew because it is moistened by saliva from throughout the oral cavity", "fol": "", "prediction": ["all x y.((Food(x) & OralCavity(y) & MoistenedBySaline(x,y)) -> EasierToCheek(x))"]}
{"id": "eqasc_validation_1403", "nl": "Favorite food is steak.", "fol": "", "prediction": ["all x.(FavoriteFood(x) -> Steak(x))"]}
{"id": "eqasc_validation_1404", "nl": "steak is easier to chew because it is moistened by saliva from the salivary glands", "fol": "", "prediction": ["all x.((Steak(x) & MoistenedBySaline(x)) -> EasierToCheek(x))"]}
{"id": "eqasc_validation_1405", "nl": "Food enters the mouth and is partially broken down by chewing and by enzymes in saliva.", "fol": "", "prediction": ["all x y.((Food(x) & Mouth(y)) -> (Enters(x,y) & PartiallyBreakdown(x,y)))"]}
{"id": "eqasc_validation_1406", "nl": "Food is easier to chew because of enzymes in the mouth", "fol": "", "prediction": ["all x y.((Food(x) & Enzyme(y) & InMouth(x,y)) -> EasierToCheek(x))"]}
{"id": "eqasc_validation_1407", "nl": "Besides, saliva contains digestive enzymes .", "fol": "", "prediction": ["all x.(Saline(x) -> ContainsDigestiveEnzymes(x))"]}
{"id": "eqasc_validation_1408", "nl": "Food is easier to chew due to digestive enzymes", "fol": "", "prediction": ["all x.((Food(x) & DigestiveEnzymes(x)) -> EasierToCheek(x))"]}
{"id": "eqasc_validation_1409", "nl": "Salivary glands are found in the mouth.", "fol": "", "prediction": ["all x.(SalivaryGlands(x) -> FoundInMouth(x))"]}
{"id": "eqasc_validation_1410", "nl": "Food is easier to chew because it is moistened by saliva from glands found in the mouth", "fol": "", "prediction": ["all x y.((Food(x) & Gliom(y) & MoisturedBySulfur(x,y)) -> EasierToCheek(x))"]}
{"id": "eqasc_validation_1411", "nl": "Brain food Bagels are brain food.", "fol": "", "prediction": ["all x.(BirdFood(x) -> BrainFood(x))"]}
{"id": "eqasc_validation_1412", "nl": "Bagels get easier to chew by being moistened by saliva from the salivary glands.", "fol": "", "prediction": ["all x.(Bagel(x) -> (MoistenedBySaline(x) & BagelsEasierToCheek(x)))"]}
{"id": "eqasc_validation_1413", "nl": "Feeds are mixed with saliva in the mouth to make a moist bolus that can be easily swallowed.", "fol": "", "prediction": ["all x y.((Feed(x) & Saliva(y)) -> (MixedWith(x,y) & MoistBbolus(x) & CanBeEasilySneaked(x)))"]}
{"id": "eqasc_validation_1414", "nl": "a bolus is moistened food", "fol": "", "prediction": ["all x.(Bulus(x) -> MoistenedFood(x))"]}
{"id": "eqasc_validation_1415", "nl": "Saliva contributes more than 70 percent of the liquid in the rumen.", "fol": "", "prediction": ["all x.(Saliva(x) -> ContributesMoreThan70PercentLiquid(x))"]}
{"id": "eqasc_validation_1416", "nl": "Food is easier to chew because it is moistened by liquid", "fol": "", "prediction": ["all x y.((Food(x) & Liquid(y)) -> EasierToCheek(x))"]}
{"id": "eqasc_validation_1417", "nl": "Milk is a nutritious fluid.", "fol": "", "prediction": ["all x.(Milk(x) -> NutritiousFluid(x))"]}
{"id": "eqasc_validation_1418", "nl": "Cow's Milk Cow's milk is designed for baby cows.", "fol": "", "prediction": ["all x.(CowsMilk(x) -> DesignedForBabyCows(x))"]}
{"id": "eqasc_validation_1419", "nl": "cows make nutritious fluid", "fol": "", "prediction": ["all x.(Cow(x) -> MakesNutritiousFluid(x))"]}
{"id": "eqasc_validation_1420", "nl": "Fluids to prevent dehydration and a nutritious diet are also important.", "fol": "", "prediction": ["all x.((Fluids(x) & PreventsDehydration(x) & NutritiousDiet(x)) -> Important(x))"]}
{"id": "eqasc_validation_1421", "nl": "Milk is nutritious and prevents dehydration.", "fol": "", "prediction": ["all x.(Milk(x) -> (Nutritious(x) & PreventsDehydration(x)))"]}
{"id": "eqasc_validation_1422", "nl": "Fluid milk is fortified with vitamin D and rich in calcium.", "fol": "", "prediction": ["all x.(FluidMilk(x) -> (FortifiedWithVitaminD(x) & RichInCalcium(x)))"]}
{"id": "eqasc_validation_1423", "nl": "Milk is nutritious because it has vitamin D and calcium", "fol": "", "prediction": ["all x.((Milk(x) & VitaminD(x) & Calcium(x)) -> Nutritious(x))"]}
{"id": "eqasc_validation_1424", "nl": "Breast milk is the ideal nutrition for a newborn.", "fol": "", "prediction": ["all x.(BreastMilk(x) -> IdealNutritionForNewborn(x))"]}
{"id": "eqasc_validation_1425", "nl": "newborns get nutrition from breasts", "fol": "", "prediction": ["all x.(Newborn(x) -> GetsNutritionFromBreasts(x))"]}
{"id": "eqasc_validation_1426", "nl": "Milk comes from Cows.", "fol": "", "prediction": ["all x.(Milk(x) -> ComesFrom(x,Cows))"]}
{"id": "eqasc_validation_1427", "nl": "Milk shakes have milk.", "fol": "", "prediction": ["all x.(MilkShake(x) -> HasMilk(x))"]}
{"id": "eqasc_validation_1428", "nl": "milkshakes are a nutritious fluid", "fol": "", "prediction": ["all x.(Milkshake(x) -> NutritiousFluid(x))"]}
{"id": "eqasc_validation_1429", "nl": "cows produce nutritious fluid", "fol": "", "prediction": ["all x.(Cow(x) -> ProducesNutritiousFluid(x))"]}
{"id": "eqasc_validation_1430", "nl": "Milk prevents dehydration.", "fol": "", "prediction": ["all x.(Milk(x) -> PreventsDehydration(x))"]}
{"id": "eqasc_validation_1431", "nl": "Birth may be followed by a period of parental care of the offspring.", "fol": "", "prediction": ["all x y.((Birth(x) & Offspring(y)) -> FollowedByParentalCare(x,y))"]}
{"id": "eqasc_validation_1432", "nl": "Parents take care of children.", "fol": "", "prediction": ["all x y.((Parent(x) & Child(y)) -> TakesCareOf(x,y))"]}
{"id": "eqasc_validation_1433", "nl": "Birth may be followed by parental nurturing", "fol": "", "prediction": ["all x y.((Birth(x) & ParentalNourishment(y)) -> FollowedBy(x,y))"]}
{"id": "eqasc_validation_1434", "nl": "Among monogamous species of birds and mammals, both parents often care for their offspring.", "fol": "", "prediction": ["all x y.((MonogamousSpecies(x) & MonogamousSpecies(y)) -> (Parent(x,y) & Offspring(x)))"]}
{"id": "eqasc_validation_1435", "nl": "The period of parental care after birth for manogamous species are handled by both parents", "fol": "", "prediction": ["all x y.((ParentalCareAfterBirth(x) & ManogamousSpecies(y)) -> HandledBy(x,y))"]}
{"id": "eqasc_validation_1436", "nl": "Child' is ambiguous between 'offspring' and 'immature offspring'.", "fol": "", "prediction": ["all x.((Child(x) & Offspring(x) & ImmatureOffspring(x)) -> Ambiguous(x))"]}
{"id": "eqasc_validation_1437", "nl": "Birth may be followed by a period of parental care of the child.", "fol": "", "prediction": ["all x y.((Birth(x) & ParentalCare(y)) -> FollowedBy(x,y))"]}
{"id": "eqasc_validation_1438", "nl": "Human birth is the rarest of all births.", "fol": "", "prediction": ["all x.(HumanBirth(x) -> RarestOfAllBirths(x))"]}
{"id": "eqasc_validation_1439", "nl": "humans have a period of parental care of their offspring", "fol": "", "prediction": ["all x y.((Human(x) & Offspring(y)) -> HasParentalCare(x,y))"]}
{"id": "eqasc_validation_1440", "nl": "Females give birth to a single baby.", "fol": "", "prediction": ["all x.(Female(x) -> GivesBirthToSingleBaby(x))"]}
{"id": "eqasc_validation_1441", "nl": "babies are offspring that most likely have parental care", "fol": "", "prediction": ["all x.(Baby(x) -> (Offspring(x) & Most likelyHasParentalCare(x)))"]}
{"id": "eqasc_validation_1442", "nl": "Each birth is as unique as the child that is born.", "fol": "", "prediction": ["all x.(Birth(x) -> Unique(x))"]}
{"id": "eqasc_validation_1443", "nl": "When a child is born, parents often take care of them.", "fol": "", "prediction": ["all x y.((Child(x) & Born(x)) -> ParentsTakeCareOf(y,x))"]}
{"id": "eqasc_validation_1444", "nl": "a child being born may be followed by a period of parental care of the offspring", "fol": "", "prediction": ["all x y.((Child(x) & Born(x)) -> (ParentalCare(y) & Offspring(x,y)))"]}
{"id": "eqasc_validation_1445", "nl": "a scale is used for measuring weight", "fol": "", "prediction": ["all x y.((Scale(x) & Weight(y)) -> Measures(x,y))"]}
{"id": "eqasc_validation_1446", "nl": "Results are measured in pounds.", "fol": "", "prediction": ["all x.(Result(x) -> MeasuredInPounds(x))"]}
{"id": "eqasc_validation_1447", "nl": "Scales are used to determine weight in pounds", "fol": "", "prediction": ["all x y.((Scale(x) & Weight(y)) -> DeterminesInPounds(x,y))"]}
{"id": "eqasc_validation_1448", "nl": "Dimensions are in inches, weights in pounds.", "fol": "", "prediction": ["all x y.((Dimension(x) & Weight(y)) -> (InInches(x) & InPounds(y)))"]}
{"id": "eqasc_validation_1449", "nl": "a scale measures pounds", "fol": "", "prediction": ["all x.(Scale(x) -> MeasuresPounds(x))"]}
{"id": "eqasc_validation_1450", "nl": "Weight Weaning weight is expressed in pounds.", "fol": "", "prediction": ["WeaningWeight(w) -> (ExpressedInPounds(w) & WeaningWeight(w)))"]}
{"id": "eqasc_validation_1451", "nl": "A scale is used for measuring pounds.", "fol": "", "prediction": ["all x.(Scale(x) -> MeasuresPounds(x))"]}
{"id": "eqasc_validation_1452", "nl": "All weights are in grams.", "fol": "", "prediction": ["all x.(Weight(x) -> InGas(x))"]}
{"id": "eqasc_validation_1453", "nl": "a scale is used for measuring grams", "fol": "", "prediction": ["all x y.((Scale(x) & Grams(y)) -> Measures(x,y))"]}
{"id": "eqasc_validation_1454", "nl": "An object's weight is the force of gravity on that object.", "fol": "", "prediction": ["all x.(Object(x) -> Weight(x))"]}
{"id": "eqasc_validation_1455", "nl": "a scale is used for measuring the force of gravity", "fol": "", "prediction": ["all x y.((Scales(x) & MeasuresForceOfGravity(x,y)) -> UsedForMeasuringForceOfGravity(x,y))"]}
{"id": "eqasc_validation_1456", "nl": "All weights are in kilograms.", "fol": "", "prediction": ["all x.(Weight(x) -> InKg(x))"]}
{"id": "eqasc_validation_1457", "nl": "a scale can measure kilograms", "fol": "", "prediction": ["all x.(Scales(x) -> MeasuresKg(x))"]}
{"id": "eqasc_validation_1458", "nl": "All weight is in pounds.", "fol": "", "prediction": ["all x.(Weight(x) -> InPounds(x))"]}
{"id": "eqasc_validation_1459", "nl": "a scale is used for measuring pounds", "fol": "", "prediction": ["all x y.((Scale(x) & Pound(y)) -> MeasuresPounds(x,y))"]}
{"id": "eqasc_validation_1460", "nl": "Measure objects weight in grams.", "fol": "", "prediction": ["all x.(MeasuresObjectsWeightInGrams(x) -> MeasuresWeightInGrams(x))"]}
{"id": "eqasc_validation_1461", "nl": "Lancelet larvae are free-swimming.", "fol": "", "prediction": ["all x.(LanceletLarvae(x) -> FreeSwimming(x))"]}
{"id": "eqasc_validation_1462", "nl": "Lancelets are small fishlike animals with tapered bodies.", "fol": "", "prediction": ["all x.(Lancelet(x) -> (SmallFishlikeAnimal(x) & TaperedBody(x)))"]}
{"id": "eqasc_validation_1463", "nl": "larvae of small fishlike animals with tapered bodies are free-swimming", "fol": "", "prediction": ["all x.((Larvae(x) & SmallFishlikeAnimal(x) & TaperedBody(x)) -> FreeSwimming(x))"]}
{"id": "eqasc_validation_1464", "nl": "Once the water flows, dive in and swim through.", "fol": "", "prediction": ["all x.((Water(x) & Flows(x)) -> (DiveIn(x) & SwimThrough(x)))"]}
{"id": "eqasc_validation_1465", "nl": "lancelet larvae live in water", "fol": "", "prediction": ["all x.(LanceletLarvae(x) -> LivesInWater(x))"]}
{"id": "eqasc_validation_1466", "nl": "small fishlike animals with tapered bodies are free-swimming", "fol": "", "prediction": ["all x.((SmallFishlikeAnimal(x) & TaperedBody(x)) -> FreeSwimming(x))"]}
{"id": "eqasc_validation_1467", "nl": "After eggs are fertilized, free-swimming larvae develop.", "fol": "", "prediction": ["all x.((EggsFertilized(x) & Larvae(x)) -> FreeSwimming(x))"]}
{"id": "eqasc_validation_1468", "nl": "After lancelet eggs are fertilized, they develop so that they can navigate in the water themselves.", "fol": "", "prediction": ["all x.((LanceletEggs(x) & Fertilized(x)) -> DevelopsSoCanNavigateInWater(x))"]}
{"id": "eqasc_validation_1469", "nl": "Puberty is the period during which humans become sexually mature.", "fol": "", "prediction": ["all x.(Puperty(x) -> (BecomesSexuallyMature(x) & Human(x)))"]}
{"id": "eqasc_validation_1470", "nl": "Boys enter puberty at about 12 years of age.", "fol": "", "prediction": ["all x.(Boy(x) -> EntersPupilhoodAt(x,12))"]}
{"id": "eqasc_validation_1471", "nl": "12 years of age is when boys become sexually mature", "fol": "", "prediction": ["all x.((Boy(x) & Age(x,12)) -> SexuallyMature(x))"]}
{"id": "eqasc_validation_1472", "nl": "Wet dreams are a sign of puberty.", "fol": "", "prediction": ["all x.(WetDream(x) -> SignOfPupilhood(x))"]}
{"id": "eqasc_validation_1473", "nl": "Wet dreams are a sign of sexually maturity", "fol": "", "prediction": ["all x.(WetDream(x) -> SexualMaturity(x))"]}
{"id": "eqasc_validation_1474", "nl": "humans become sexually mature during adolescence", "fol": "", "prediction": ["all x.((Human(x) & Adolescence(x)) -> SexuallyMature(x))"]}
{"id": "eqasc_validation_1475", "nl": "Growth usually ceases with puberty.", "fol": "", "prediction": ["all x.((Growth(x) & Puberty(x)) -> UsuallyStops(x))"]}
{"id": "eqasc_validation_1476", "nl": "Growth usually ceases when humans become sexually mature.", "fol": "", "prediction": ["all x.((Human(x) & SexuallyMature(x)) -> GrowthChance(x))"]}
{"id": "eqasc_validation_1477", "nl": "The breasts develop during the period when humans become sexually mature", "fol": "", "prediction": ["all x y.((Breast(x) & Human(y) & SexuallyMature(x,y)) -> DevelopsDuring(x,y))"]}
{"id": "eqasc_validation_1478", "nl": "Breasts develop when humans become sexually mature.", "fol": "", "prediction": ["all x.((Breast(x) & Human(y) & SexuallyMature(y)) -> Develops(x,y))"]}
{"id": "eqasc_validation_1479", "nl": "Before puberty, adolescents experience their highest nutritional demand since infancy.", "fol": "", "prediction": ["all x.((Adolescent(x) & BeforePuberty(x)) -> HighestNutritionalDemand(x))"]}
{"id": "eqasc_validation_1480", "nl": "Before beginning sexual maturity, adolescents experience their highest nutritional demand since infancy", "fol": "", "prediction": ["all x y.((Adolescent(x) & SexualMaturity(y)) -> HighestNutritionalDemand(x,y))"]}
{"id": "eqasc_validation_1481", "nl": "a circle graph can be used to display percents", "fol": "", "prediction": ["all x.(CircleGraph(x) -> DisplaysPercents(x))"]}
{"id": "eqasc_validation_1482", "nl": "Fractions are sometimes expressed as a percent .", "fol": "", "prediction": ["all x.(Fraction(x) -> (ExpressedAsPercent(x) | ExpressedAsPercent(x)))"]}
{"id": "eqasc_validation_1483", "nl": "a circle graph can be used to display Fractions", "fol": "", "prediction": ["all x y.((CircleGraph(x) & Fraction(y)) -> CanDisplay(x,y))"]}
{"id": "eqasc_validation_1484", "nl": "Pie Charts Pie charts are used predominantly to show percentages or parts of a whole.", "fol": "", "prediction": ["all x.(PieChart(x) -> (ShowsPercentageOrPartsOfWhole(x) & UsedForPartsOfWhole(x)))"]}
{"id": "eqasc_validation_1485", "nl": "pie charts are circle graphs", "fol": "", "prediction": ["all x.(PieChart(x) -> (CircleGraph(x) & CircleGraph(x)))"]}
{"id": "eqasc_validation_1486", "nl": "Percents are decimal fractions.", "fol": "", "prediction": ["all x.(Percent(x) -> DecimalFraction(x))"]}
{"id": "eqasc_validation_1487", "nl": "Circle graphs can be used to show decimal fractions", "fol": "", "prediction": ["all x y.((CircleGraph(x) & DecimalFraction(y)) -> Shows(x,y))"]}
{"id": "eqasc_validation_1488", "nl": "Data values can also be converted to percent values.", "fol": "", "prediction": ["all x.(DataValue(x) -> ConvertedToPercentValue(x))"]}
{"id": "eqasc_validation_1489", "nl": "A circle graph can be used to display data values.", "fol": "", "prediction": ["all x.(CircleGraph(x) -> DisplaysDataValues(x))"]}
{"id": "eqasc_validation_1490", "nl": "Circle Graphs A circle graph or pie graph uses a circle divided into sections to show data.", "fol": "", "prediction": ["all x.(CircleGraph(x) -> (UsesCircle(x) | UsesPieGraph(x)) & DividedIntoSections(x)))"]}
{"id": "eqasc_validation_1491", "nl": "percentages can be used to show data", "fol": "", "prediction": ["all x.(Percentage(x) -> ShowData(x))"]}
{"id": "eqasc_validation_1492", "nl": "Description Makes a circle graph, also known as a pie chart, of data in a list.", "fol": "", "prediction": ["all x.((CircleGraph(x) & PieChart(x)) -> MakesDataInList(x))"]}
{"id": "eqasc_validation_1493", "nl": "a pie chart can be used to display percents", "fol": "", "prediction": ["all x.(PieChart(x) -> DisplaysPercents(x))"]}
{"id": "eqasc_validation_1494", "nl": "A circle graph can be used to display decimal fractions", "fol": "", "prediction": ["all x.(CircleGraph(x) -> DisplaysDecimalFractions(x))"]}
{"id": "eqasc_validation_1495", "nl": "a circle graph can be used to display decimal fractions", "fol": "", "prediction": ["all x y.((CircleGraph(x) & DecimalFraction(y)) -> Displays(x,y))"]}
{"id": "eqasc_validation_1496", "nl": "Line, Bar, Circle, Pictorial graphs are all good answers.", "fol": "", "prediction": ["all x.((Line(x) | Bar(x) | Circle(x) | PictorialGraph(x)) -> GoodApplication(x))"]}
{"id": "eqasc_validation_1497", "nl": "a bar is a type of graph", "fol": "", "prediction": ["all x.(Bar(x) -> (Graph(x) & Graph(x)))"]}
{"id": "eqasc_validation_1498", "nl": "Seventeen percent of residents are black, four percent are Asian, and three percent are Latino.", "fol": "", "prediction": ["(Residents(x) & (Black(x) | Asian(x))) & (Latino(x) | Latino(x)))"]}
{"id": "eqasc_validation_1499", "nl": "a circle graph can be used to display the number of residents that are black, Asian, and Latino", "fol": "", "prediction": ["all x.(CircleGraph(x) -> (DisplaysBlackResidents(x) & DisplaysAsianResidents(x) & DisplaysLatinoResidents(x)))"]}
{"id": "eqasc_validation_1500", "nl": "All percents can be written as fractions.", "fol": "", "prediction": ["all x.(Percent(x) -> CanBeWrittenAsFractions(x))"]}
{"id": "eqasc_validation_1501", "nl": "a circle graph can be used to display fractions", "fol": "", "prediction": ["all x y.((CircleGraph(x) & Fraction(y)) -> CanDisplay(x,y))"]}
{"id": "eqasc_validation_1502", "nl": "Percent is parts per hundred.", "fol": "", "prediction": ["all x.(Percent(x) -> PartsPerSixty(x))"]}
{"id": "eqasc_validation_1503", "nl": "a circle graph can be used to display parts per hundred", "fol": "", "prediction": ["all x.(CircleGraph(x) -> DisplaysPartsPerSixty(x))"]}
{"id": "eqasc_validation_1504", "nl": "Display screen shows it all.", "fol": "", "prediction": ["all x.(DisplayScreen(x) -> ShowsAll(x))"]}
{"id": "eqasc_validation_1505", "nl": "a circle graph can be used to show percents", "fol": "", "prediction": ["all x y.((CircleGraph(x) & Percent(y)) -> Shows(x,y))"]}
{"id": "eqasc_validation_1506", "nl": "a compass is used for determining direction", "fol": "", "prediction": ["all x y.((Compass(x) & Direction(y)) -> DeterminesDirection(x,y))"]}
{"id": "eqasc_validation_1507", "nl": "Compass needles line up with magnetic fields.", "fol": "", "prediction": ["all x.(CompassNeedle(x) -> LineUpWithMagneticFields(x))"]}
{"id": "eqasc_validation_1508", "nl": "Magnetic fields are used for determining direction.", "fol": "", "prediction": ["all x.(MagneticField(x) -> DeterminesDirection(x))"]}
{"id": "eqasc_validation_1509", "nl": "magnets can be used to determine direction", "fol": "", "prediction": ["all x.(Magnet(x) -> DetermineDirection(x))"]}
{"id": "eqasc_validation_1510", "nl": "Distance and direction are the foundation of GPS-based navigation.", "fol": "", "prediction": ["all x.((Distance(x) & Direction(x)) -> GPSBasedNavigation(x))"]}
{"id": "eqasc_validation_1511", "nl": "a compass is used for navigation", "fol": "", "prediction": ["all x y.((Compass(x) & Navigation(y)) -> UsedFor(x,y))"]}
{"id": "eqasc_validation_1512", "nl": "Direction is given on a 16 point compass scale.", "fol": "", "prediction": ["all x.(Direction(x) -> 16PointCompassScale(x))"]}
{"id": "eqasc_validation_1513", "nl": "A compass can determine 16 different points.", "fol": "", "prediction": ["all x.(Compass(x) -> DeterminesSixDifferentPoints(x))"]}
{"id": "eqasc_validation_1514", "nl": "Navigation is done by compass only.", "fol": "", "prediction": ["all x.(Navigation(x) -> (Compass(x) & -Compass(x)))"]}
{"id": "eqasc_validation_1515", "nl": "navigation is used for determining direction", "fol": "", "prediction": ["all x y.((Navigation(x) & Direction(y)) -> Determines(x,y))"]}
{"id": "eqasc_validation_1516", "nl": "satellite technology is used for predicting the weather", "fol": "", "prediction": ["all x y.((SatelliteTechnology(x) & Weather(y)) -> Predicts(x,y))"]}
{"id": "eqasc_validation_1517", "nl": "Meteorologists use satellite technology", "fol": "", "prediction": ["all x y.((Meteorologist(x) & SatelliteTechnology(y)) -> Uses(x,y))"]}
{"id": "eqasc_validation_1518", "nl": "Meteorologists use satellite technology.", "fol": "", "prediction": ["all x.(Meteorologist(x) -> UsesSatelliteTechnology(x))"]}
{"id": "eqasc_validation_1519", "nl": "Satellite technology can be used by meteologists.", "fol": "", "prediction": ["all x.(SatelliteTechnology(x) -> UsedByMeteologists(x))"]}
{"id": "eqasc_validation_1520", "nl": "meteorologists use satellite technology", "fol": "", "prediction": ["all x y.((Meteorologist(x) & SatelliteTechnology(y)) -> Uses(x,y))"]}
{"id": "eqasc_validation_1521", "nl": "Rain or Shine, there is always weather.", "fol": "", "prediction": ["all x.((Rain(x) | Shine(x)) -> Weather(x))"]}
{"id": "eqasc_validation_1522", "nl": "satellite technology is used for predicting rain or shine", "fol": "", "prediction": ["all x.(SatelliteTechnology(x) -> (PredictsRainOrShine(x) & PredictsRainOrShine(x)))"]}
{"id": "eqasc_validation_1523", "nl": "Weather is what it's like outside each day.", "fol": "", "prediction": ["all x.(Weather(x) -> OutsideDay(x))"]}
{"id": "eqasc_validation_1524", "nl": "satellite technology is used for predicting what it's like outside each day", "fol": "", "prediction": ["all x y.((SatelliteTechnology(x) & OutsideDay(y)) -> Predicts(x,y))"]}
{"id": "eqasc_validation_1525", "nl": "Today, technology has helped meteorologists to detect tornadoes.", "fol": "", "prediction": ["all x y.((Technology(x) & Meteorologist(y)) -> HelpsDetectTornadoes(x,y))"]}
{"id": "eqasc_validation_1526", "nl": "Meteorologists use satellites to detect tornadoes", "fol": "", "prediction": ["all x y z.((Meteorologist(x) & Satellite(y) & Tornado(z)) -> UsesToDetect(x,y,z))"]}
{"id": "eqasc_validation_1527", "nl": "a barometer is used to measure air pressure", "fol": "", "prediction": ["all x y.((Barometer(x) & AirPressure(y)) -> Measures(x,y))"]}
{"id": "eqasc_validation_1528", "nl": "Air pressure Pressure is the force acting on a unit area.", "fol": "", "prediction": ["all x.(AirPressurePressure(x) -> ActsOnUnitArea(x))"]}
{"id": "eqasc_validation_1529", "nl": "A barometer is used to measure the force acting on a unit area.", "fol": "", "prediction": ["all x y.((Barometer(x) & UnitArea(y)) -> MeasuresForce(x,y))"]}
{"id": "eqasc_validation_1530", "nl": "Air pressure is a measure of the weight of the air.", "fol": "", "prediction": ["all x.(AirPressure(x) -> MeasuresWeightOfAir(x))"]}
{"id": "eqasc_validation_1531", "nl": "A barometer measures the weight of the air.", "fol": "", "prediction": ["all x.(Barometer(x) -> MeasuresWeightOfAir(x))"]}
{"id": "eqasc_validation_1532", "nl": "Atmospheric pressure is measured by a barometer.", "fol": "", "prediction": ["all x.(AtmosphericPressure(x) -> MeasuredByBarometer(x))"]}
{"id": "eqasc_validation_1533", "nl": "a barometer gauges atmospheric pressure", "fol": "", "prediction": ["all x.(Barometer(x) -> GaugesAtmosphericPressure(x))"]}
{"id": "eqasc_validation_1534", "nl": "The weight of the air can be determined with a barometer.", "fol": "", "prediction": ["all x.((Air(x) & Barometer(x)) -> DeterminesWeight(x))"]}
{"id": "eqasc_validation_1535", "nl": "Air Pressure -A barometer measures the weight of the air.", "fol": "", "prediction": ["all x.(Barometer(x) -> MeasuresAirPressure(x))"]}
{"id": "eqasc_validation_1536", "nl": "a barometer is used to measure weight of the air", "fol": "", "prediction": ["all x y.((Barometer(x) & Air(y)) -> MeasuresWeight(x,y))"]}
{"id": "eqasc_validation_1537", "nl": "Air pressure is the force of air against a unit of area.", "fol": "", "prediction": ["all x y.((AirPressure(x) & AirUnit(y)) -> ForceAgainst(x,y))"]}
{"id": "eqasc_validation_1538", "nl": "A barometer measures the force of air against a unit of area", "fol": "", "prediction": ["all x y z.((Barometer(x) & Air(y) & Area(z)) -> MeasuresForceAgainstUnitOfArea(x,y,z))"]}
{"id": "eqasc_validation_1539", "nl": "A barometer is used to measure the weight of the air.", "fol": "", "prediction": ["all x.(Barometer(x) -> MeasuresAirWeight(x))"]}
{"id": "eqasc_validation_1540", "nl": "Uses Elemental mercury is used in thermometers, barometers, and pressure-sensing devices.", "fol": "", "prediction": ["all x.((Uses(x) & ElementalMercury(x)) -> (UsedInThermometers(x) | UsedInBarometers(x) | UsedInPressureSensingDevices(x)))"]}
{"id": "eqasc_validation_1541", "nl": "Elemental mercury helps measure air pressure", "fol": "", "prediction": ["all x.(ElementaryMercury(x) -> MeasuresAirPressure(x))"]}
{"id": "eqasc_validation_1542", "nl": "safety goggles are used for protecting the eyes during experiments", "fol": "", "prediction": ["all x y.((SafetyGoggles(x) & Experiment(y)) -> ProtectsEyes(x,y))"]}
{"id": "eqasc_validation_1543", "nl": "If the product is an eye irritant, wear goggles.", "fol": "", "prediction": ["all x.((Product(x) & EyeIrritating(x)) -> WearGoggles(x))"]}
{"id": "eqasc_validation_1544", "nl": "goggles can protect against irritants", "fol": "", "prediction": ["all x.(Goggles(x) -> ProtectsAgainstIrritatings(x))"]}
{"id": "eqasc_validation_1545", "nl": "Inside the eye, at the back, is the retina.", "fol": "", "prediction": ["all x.((Eye(x) & Eye(x) & Eye(x) & Eye(x) & Eye(x) & Eye(x) & Eye(x) & Eye(x)) -> Retina(x))"]}
{"id": "eqasc_validation_1546", "nl": "safety goggles are used for protecting the retina during experiments", "fol": "", "prediction": ["all x y.((SafetyGoggles(x) & Experiment(y)) -> ProtectsRetina(x,y))"]}
{"id": "eqasc_validation_1547", "nl": "Firm plastic eyeglasses or goggles are better.", "fol": "", "prediction": ["all x.((Flexible(x) & (Early(x) | Goggles(x))) -> Better(x))"]}
{"id": "eqasc_validation_1548", "nl": "plastic protects the eyes during experiements", "fol": "", "prediction": ["all x y.((Plastic(x) & Experiment(y)) -> ProtectsEyes(x,y))"]}
{"id": "eqasc_validation_1549", "nl": "For concentrated acids and alkalis, a face shield is needed in addition to goggles.", "fol": "", "prediction": ["all x.((ConcentratedAcids(x) & ConcentratedAlkalis(x)) -> NeededInAdditionToGggles(x))"]}
{"id": "eqasc_validation_1550", "nl": "acids can harm the eyes during experiments", "fol": "", "prediction": ["all x y.((Acid(x) & Experiment(y)) -> CanHarmEyes(x,y))"]}
{"id": "eqasc_validation_1551", "nl": "Lab experiments are group projects.", "fol": "", "prediction": ["all x.(LabExperiment(x) -> GroupProject(x))"]}
{"id": "eqasc_validation_1552", "nl": "Safety goggles are used to protect the eyes in the lab.", "fol": "", "prediction": ["all x.(SafetyGoggles(x) -> ProtectsEyesInLab(x))"]}
{"id": "eqasc_validation_1553", "nl": "Goggles or safety glasses with sideshields are recommended.", "fol": "", "prediction": ["all x.((Goggles(x) | SafetyGlasses(x) & Sideshields(x)) -> Recommended(x))"]}
{"id": "eqasc_validation_1554", "nl": "glasses with sideshields are recommended for protecting the eyes during experiments", "fol": "", "prediction": ["all x.((Glasses(x) & HasSideshields(x)) -> RecommendedForProtectingEyes(x))"]}
{"id": "eqasc_validation_1555", "nl": "Safety goggles are mandatory in the laboratory.", "fol": "", "prediction": ["all x.(SafetyGoggles(x) -> MandatoryInLaboratory(x))"]}
{"id": "eqasc_validation_1556", "nl": "Experiments are performed in the laboratory.", "fol": "", "prediction": ["all x.(Experiment(x) -> PerformedInLaboratory(x))"]}
{"id": "eqasc_validation_1557", "nl": "Home Protective Equipment Eyes Safety Goggles are recommended.", "fol": "", "prediction": ["all x.(HomeProtectiveEquipment(x) -> EyesSafetyGoggles(x))"]}
{"id": "eqasc_validation_1558", "nl": "Protective equipment is used for protecting the eyes during experiements", "fol": "", "prediction": ["all x y.((ProtectiveEquipment(x) & Experiment(y)) -> ProtectsEyes(x,y))"]}
{"id": "eqasc_validation_1559", "nl": "Protection is simple, safe, and inexpensive.", "fol": "", "prediction": ["all x.(Protection(x) -> (Simple(x) & Safe(x) & Inexpensive(x)))"]}
{"id": "eqasc_validation_1560", "nl": "Safety goggles are used to keep the eyes safe during experiments.", "fol": "", "prediction": ["all x.(SafetyGoggles(x) -> KeepsEyesSafe(x))"]}
{"id": "eqasc_validation_1561", "nl": "Eyes Eyes Eyes are probably the most important symbolic sensory organ.", "fol": "", "prediction": ["all x.(Eyes(x) -> (Eyes(x) & ProbablyMostImportantSymbolicalOrgan(x)))"]}
{"id": "eqasc_validation_1562", "nl": "Sensory organs can be protected by safety goggles during experiments", "fol": "", "prediction": ["all x y.((SensoryOrgan(x) & Experiment(y)) -> (ProtectsBySafetyGoggles(x,y) & DuringExperiment(x,y)))"]}
{"id": "eqasc_validation_1563", "nl": "Protection for the eyes is mandatory in the laboratory.", "fol": "", "prediction": ["all x.((Laboratory(x) & ProtectsEyes(x)) -> Mandatory(x))"]}
{"id": "eqasc_validation_1564", "nl": "Sometimes science experiments can be dangerous.", "fol": "", "prediction": ["exists x.(ScienceExperiment(x) & Dangerous(x))"]}
{"id": "eqasc_validation_1565", "nl": "safety goggles are used to protect the eyes from dangerous things", "fol": "", "prediction": ["all x y.((SafetyGoggles(x) & Eyes(y)) -> ProtectsFromDangerousThings(x,y))"]}
{"id": "eqasc_validation_1566", "nl": "Safety glasses and goggles protect the eyes.", "fol": "", "prediction": ["all x.((SafetyGlasses(x) & Goggles(x)) -> ProtectsEyes(x))"]}
{"id": "eqasc_validation_1567", "nl": "safety glasses are used for protecting the eyes during experiments", "fol": "", "prediction": ["all x y.((SafetyGlasses(x) & Eyes(y)) -> ProtectsDuringExperiments(x,y))"]}
{"id": "eqasc_validation_1568", "nl": "Larger pupil and larger corneas permit more light to enter the eye.", "fol": "", "prediction": ["all x.((LargerPupil(x) & LargerCorea(x)) -> PermitsMoreLight(x))"]}
{"id": "eqasc_validation_1569", "nl": "safety goggles are used for protecting the pupils during experiments", "fol": "", "prediction": ["all x y.((SafetyGoggles(x) & Pupils(y) & Experiment(z)) -> ProtectsDuring(x,y,z))"]}
{"id": "eqasc_validation_1570", "nl": "Goggles are worn to protect eyes.", "fol": "", "prediction": ["all x.(Goggles(x) -> WornToProtectEyes(x))"]}
{"id": "eqasc_validation_1571", "nl": "goggles are for protection", "fol": "", "prediction": ["all x.(Goggles(x) -> ForProtection(x))"]}
{"id": "eqasc_validation_1572", "nl": "Cnidarians are invertebrates such as jellyfish and corals.", "fol": "", "prediction": ["all x.(Cnidarian(x) -> (Invertebrate(x) & (Jellyfish(x) | Coral(x))))"]}
{"id": "eqasc_validation_1573", "nl": "Cnidarians are entirely aquatic animals.", "fol": "", "prediction": ["all x.(Cnidarian(x) -> AquaticAnimal(x))"]}
{"id": "eqasc_validation_1574", "nl": "Jellyfish are an aquatic invertebrate.", "fol": "", "prediction": ["all x.(Jellyfish(x) -> AquaticInvertebrate(x))"]}
{"id": "eqasc_validation_1575", "nl": "Coelenterates are invertebrates such as jellyfish and corals.", "fol": "", "prediction": ["all x.(Coelenterate(x) -> (Invertebrate(x) & (Jellyfish(x) | Coral(x))))"]}
{"id": "eqasc_validation_1576", "nl": "Invertebrates have no vertebrae or backbone.", "fol": "", "prediction": ["all x.(Invertebrate(x) -> (-Vertebrae(x) | -Backbone(x)))"]}
{"id": "eqasc_validation_1577", "nl": "Jellyfish and corals have no vertebrae or backbone", "fol": "", "prediction": ["all x.((Jellyfish(x) | Coral(x)) -> (-Vertebrae(x) & -Backbone(x)))"]}
{"id": "eqasc_validation_1578", "nl": "Invertebrates are animals without backbones.", "fol": "", "prediction": ["all x.(Invertebrate(x) -> Animal(x) & -Backbone(x))"]}
{"id": "eqasc_validation_1579", "nl": "cnidarians are without backbones", "fol": "", "prediction": ["all x.(Cnidarian(x) -> (-Backbone(x) & Cnidarian(x)))"]}
{"id": "eqasc_validation_1580", "nl": "Jellyfish have a hydrostatic skeleton", "fol": "", "prediction": ["all x.(Jellyfish(x) -> HydrostaticSkeleton(x))"]}
{"id": "eqasc_validation_1581", "nl": "Cnidarians are radial, tentacled animals that live mostly in the seas.", "fol": "", "prediction": ["all x.(Cnidarian(x) -> (Radial(x) & Tentacled(x) & LivesInSeas(x)))"]}
{"id": "eqasc_validation_1582", "nl": "Jellyfish and corals are radial, tentacled animals that live mostly in the seas.", "fol": "", "prediction": ["all x.((Jellyfish(x) | Coral(x)) -> (RadialTentacledAnimal(x) & LivesInSeas(x)))"]}
{"id": "eqasc_validation_1583", "nl": "jellyfish are entirely aquatic", "fol": "", "prediction": ["all x.(Jellyfish(x) -> (Aquatic(x) & Aquatic(x)))"]}
{"id": "eqasc_validation_1584", "nl": "An invertebrate is an animal that has no spine, or backbone.", "fol": "", "prediction": ["all x.(Invertebrate(x) -> (Animal(x) & -Spine(x) & -Backbone(x)))"]}
{"id": "eqasc_validation_1585", "nl": "cnidarians such as jellyfish and corals have no backbone", "fol": "", "prediction": ["all x.(Cnidarian(x) -> (Jellyfish(x) | Coral(x)) & -HasBackbone(x)))"]}
{"id": "eqasc_validation_1586", "nl": "coelenterates are invertebrates such as jellyfish and corals", "fol": "", "prediction": ["all x.(Coelenterate(x) -> (Invertebrate(x) & (Jellyfish(x) | Coral(x))))"]}
{"id": "eqasc_validation_1587", "nl": "Anenomes and coral are invertebrates.", "fol": "", "prediction": ["all x.((Anenome(x) | Coral(x)) -> Invertebrate(x))"]}
{"id": "eqasc_validation_1588", "nl": "an anemometer is used to measure wind speed", "fol": "", "prediction": ["all x y.((Anemometer(x) & WindSpeed(y)) -> Measures(x,y))"]}
{"id": "eqasc_validation_1589", "nl": "If wind speeds exceeded 73 mph, the storm is upgraded to a hurricane.", "fol": "", "prediction": ["all x.((WindSpeedExceeds73(x)) -> Hurricane(x))"]}
{"id": "eqasc_validation_1590", "nl": "A hurricane occurs when anemometer shows a reading above 73 mph", "fol": "", "prediction": ["all x y.((Hurricane(x) & Anemometer(y) & ReadingAbove73mph(y)) -> Occurs(x))"]}
{"id": "eqasc_validation_1591", "nl": "Wind speed is gauged with an anemometer.", "fol": "", "prediction": ["all x.(WindSpeed(x) -> GaugedWithAnemometer(x))"]}
{"id": "eqasc_validation_1592", "nl": "anemometers gauge wind ", "fol": "", "prediction": ["all x.(Anemometer(x) -> (GainWind(x) & GaugeWind(x)))"]}
{"id": "eqasc_validation_1593", "nl": "Wind speed and severity of tornadoes is estimated by the damage caused.", "fol": "", "prediction": ["all x.((WindSpeed(x) & TornadoSeverity(x)) -> EstimatedByDamage(x))"]}
{"id": "eqasc_validation_1594", "nl": "An anemometer is used to estimate the damage caused by wind.", "fol": "", "prediction": ["all x.(Anemometer(x) -> EstimatesWindDamage(x))"]}
{"id": "eqasc_validation_1595", "nl": "Hurricanes have wind speeds of at least 74 mph.", "fol": "", "prediction": ["all x.(Hurricane(x) -> WindSpeed(x,y))"]}
{"id": "eqasc_validation_1596", "nl": "anemometers can measure hurricanes", "fol": "", "prediction": ["all x.(Anemometer(x) -> MeasuresHurricane(x))"]}
{"id": "eqasc_validation_1597", "nl": "An anemometer is a device that measures the force of the wind.", "fol": "", "prediction": ["all x.(Anemometer(x) -> MeasuresWindForce(x))"]}
{"id": "eqasc_validation_1598", "nl": "The force of the wind can be used to measure its speed", "fol": "", "prediction": ["all x y.((Wind(x) & WindForce(y)) -> MeasureSpeed(x,y))"]}
{"id": "eqasc_validation_1599", "nl": "an anemometer is used to measure hurricanes", "fol": "", "prediction": ["all x y.((Anemometer(x) & Hurricane(y)) -> Measures(x,y))"]}
{"id": "eqasc_validation_1600", "nl": "An anemometer and vane are at the top of the station.", "fol": "", "prediction": ["all x.((Anemometer(x) & Vane(x)) -> TopOfStation(x))"]}
{"id": "eqasc_validation_1601", "nl": "A device to measure wind is placed at the top of a station", "fol": "", "prediction": ["all x y.((Device(x) & Station(y) & MeasuresWind(x,y)) -> PlacedAtTopOf(x,y))"]}
{"id": "eqasc_validation_1602", "nl": "Hurricanes have five categories depending on wind speeds.", "fol": "", "prediction": ["all x.(Hurricane(x) -> (HasCategory(x,5) & DependsOnWindSpeed(x)))"]}
{"id": "eqasc_validation_1603", "nl": "An anemometer can be used to determine hurricane category", "fol": "", "prediction": ["all x.(Anemometer(x) -> DeterminesHurricaneCategory(x))"]}
{"id": "eqasc_validation_1604", "nl": "Bacteria are the most diverse and abundant group of organisms on Earth.", "fol": "", "prediction": ["all x.(Bacteria(x) -> (DiverseAndAbundantOrganisms(x) & OnEarth(x)))"]}
{"id": "eqasc_validation_1605", "nl": "An organization is a life form.", "fol": "", "prediction": ["all x.(Organization(x) -> LifeForm(x))"]}
{"id": "eqasc_validation_1606", "nl": "Bacteria are the most diverse and abundant group of life form on Earth.", "fol": "", "prediction": ["all x.(Bacteria(x) -> (Diverse(x) & Abundant(x) & LifeForm(x)))"]}
{"id": "eqasc_validation_1607", "nl": "Earth is our planet.", "fol": "", "prediction": ["all x.(Earth(x) -> Planet(x))"]}
{"id": "eqasc_validation_1608", "nl": "bacteria are the most diverse and abundant group of organisms on our planet", "fol": "", "prediction": ["all x.(Bacteria(x) -> (DiverseAndAbundantOrganisms(x) & OnPlanet(x)))"]}
{"id": "eqasc_validation_1609", "nl": "Earth is a world of water.", "fol": "", "prediction": ["all x.(Earth(x) -> WorldOfWater(x))"]}
{"id": "eqasc_validation_1610", "nl": "Bacteria is the most diverse and abundant group of organisms in the world.", "fol": "", "prediction": ["all x.(Bacteria(x) -> (DiverseAndAbundantOrganisms(x) & InWorld(x)))"]}
{"id": "eqasc_validation_1611", "nl": "prokaryotic cells are the most diverse and abundant group of organisms on Earth", "fol": "", "prediction": ["all x.(ProkaryoticCell(x) -> (DiverseAndAbundantOrganisms(x) & OnEarth(x)))"]}
{"id": "eqasc_validation_1612", "nl": "Hermit crabs use the shells of dead snails for homes.", "fol": "", "prediction": ["all x y.((HermitCrab(x) & DeadSnail(y)) -> UsesShellForHome(x,y))"]}
{"id": "eqasc_validation_1613", "nl": "Students live at home or in group homes.", "fol": "", "prediction": ["all x.(Student(x) -> (LivesAtHome(x) | LivesInGroupHome(x)))"]}
{"id": "eqasc_validation_1614", "nl": "Hermits crabs use dead snails shells as their place to live.", "fol": "", "prediction": ["all x.(HermitCrab(x) -> UsesDeadSnailShells(x))"]}
{"id": "eqasc_validation_1615", "nl": "Most crabs are scavengers, such as the typical hermit crab .", "fol": "", "prediction": ["all x.(Crab(x) -> Scavenger(x))"]}
{"id": "eqasc_validation_1616", "nl": "some scavengers use the shells of dead snails for homes", "fol": "", "prediction": ["exists x y.(Scavenger(x) & Shell(y) & DeadSnail(z) & UsesForHome(x,y,z))"]}
{"id": "eqasc_validation_1617", "nl": "Gastropods are snails and slugs.", "fol": "", "prediction": ["all x.(Gastropod(x) -> (Snake(x) | Slug(x)))"]}
{"id": "eqasc_validation_1618", "nl": "Hermit crabs use shells of gastropods for homes.", "fol": "", "prediction": ["all x y.((HermitCrab(x) & Gastropod(y)) -> UsesShellForHomes(x,y))"]}
{"id": "eqasc_validation_1619", "nl": "crabs use shells of dead snails for homes and are scavengers ", "fol": "", "prediction": ["all x y z.((Crab(x) & Shell(y) & DeadSnail(z)) -> (UsesForHome(x,y,z) & Scavenger(x)))"]}
{"id": "eqasc_validation_1620", "nl": "Hermit crabs find shells.", "fol": "", "prediction": ["all x.(HermitCrab(x) -> FindsShells(x))"]}
{"id": "eqasc_validation_1621", "nl": "hermit crabs find dead snails to use as homes", "fol": "", "prediction": ["all x y z.((HermitCrab(x) & DeadSnail(y) & DeadSnail(z)) -> FindsToUseAsHome(x,y,z))"]}
{"id": "eqasc_validation_1622", "nl": "Hermit crabs have unusual homes.", "fol": "", "prediction": ["all x.(HermitCrab(x) -> UnusualHome(x))"]}
{"id": "eqasc_validation_1623", "nl": "dead snail shells are unusual homes", "fol": "", "prediction": ["all x.((DeadSnailShell(x) & UnusuallyHome(x)) -> UnusualHome(x))"]}
{"id": "eqasc_validation_1624", "nl": "Hermit crabs live in shells and are scavengers.", "fol": "", "prediction": ["all x.(HermitCrab(x) -> (LivesInShell(x) & Scavenger(x)))"]}
{"id": "eqasc_validation_1625", "nl": "Hermit crabs are scavengers for dead snails", "fol": "", "prediction": ["all x.(HermitCrab(x) -> (ScavengerForDeadSnails(x) & ScavengerForDeadSnails(x)))"]}
{"id": "eqasc_validation_1626", "nl": "volcanic ash in the atmosphere decreases the temperature by blocking the sun", "fol": "", "prediction": ["all x y.((VolcanicAsh(x) & Atmosphere(y)) -> (DecreasesTemperature(x,y) & BlocksSun(x,y)))"]}
{"id": "eqasc_validation_1627", "nl": "Examples of such aerosols include dust, volcanic ash, and smoke.", "fol": "", "prediction": ["all x.(Aerosol(x) -> (Dust(x) | VolcanicAsh(x) | Smoke(x)))"]}
{"id": "eqasc_validation_1628", "nl": "some aerosols can decrease temperatures by blocking the sun", "fol": "", "prediction": ["exists x.(Aerosol(x) & CanDecreaseTemperaturesByBlockingSun(x))"]}
{"id": "eqasc_validation_1629", "nl": "Eruptive products of Hawaiian volcanoes span a wide range of temperatures.", "fol": "", "prediction": ["all x.((EruptiveProduct(x) & HawaiianVolcano(x)) -> SpreadsWideRangeOfTemperatures(x))"]}
{"id": "eqasc_validation_1630", "nl": "eruptive products block the sun", "fol": "", "prediction": ["all x.(EruptiveProduct(x) -> BlocksSun(x))"]}
{"id": "eqasc_validation_1631", "nl": "With increasing cloud blocking the sun, temperatures drop considerably.", "fol": "", "prediction": ["all x.((CloudBlocksSun(x) & Increases(x)) -> TemperaturesDrop(x))"]}
{"id": "eqasc_validation_1632", "nl": "Volcanic ash in the atmosphere increases clouds which block the sun.", "fol": "", "prediction": ["all x y.((VolcanicAsh(x) & Atmosphere(y)) -> IncreasesClouds(x,y))"]}
{"id": "eqasc_validation_1633", "nl": "Volcanic ash spewed into the atmosphere can block part of the sun's radiation, cooling the air.", "fol": "", "prediction": ["all x.((VolcanicAsh(x) & SpewedIntoAtmosphere(x)) -> BlocksSunRadiation(x))"]}
{"id": "eqasc_validation_1634", "nl": "Volcanic ash blocks the sun and cools the air", "fol": "", "prediction": ["all x y.((VolcanicAsh(x) & Sun(y)) -> (Blocks(x,y) & CoolsAir(x)))"]}
{"id": "eqasc_validation_1635", "nl": "Most volcanic ash consists of fine, dusty particles.", "fol": "", "prediction": ["all x.(VolcanicAsh(x) -> (FineDustyParticles(x) & Contains(x,y)))"]}
{"id": "eqasc_validation_1636", "nl": "Fine, dusty particles in the atmosphere decreases the temperature by blocking the sun", "fol": "", "prediction": ["all x y.((FineDustyParticles(x) & Atmosphere(y)) -> (DecreasesTemperature(x,y) & BlocksSun(x,y)))"]}
{"id": "eqasc_validation_1637", "nl": "Atmosphere is the air around an object in space.", "fol": "", "prediction": ["all x.(Atmosphere(x) -> AirAroundObject(x))"]}
{"id": "eqasc_validation_1638", "nl": "volcanic ash in the air around the earth decreases the temperature by blocking the sun", "fol": "", "prediction": ["all x y.((VolcanicAsh(x) & AirAroundEarth(y)) -> (DecreasesTemperatureByBlockingSunlight(x,y)))"]}
{"id": "eqasc_validation_1639", "nl": "Small temperature variations can have major effects on natural ecosystems.", "fol": "", "prediction": ["all x.(SmallTemperatureVariations(x) -> HasMajorEffectsOnNaturalEcosystems(x))"]}
{"id": "eqasc_validation_1640", "nl": "volcanic ash in the atmosphere can have major effects on natural ecosystems", "fol": "", "prediction": ["all x y.((VolcanicAsh(x) & Atmosphere(y)) -> CanHaveMajorEffectsOnNaturalEcosystems(x,y))"]}
{"id": "eqasc_validation_1641", "nl": "Supersaturation is inferred to be a common state for atmospheric haze particles.", "fol": "", "prediction": ["all x.(Supersaturation(x) -> CommonStateForAtmosphericHazeParticles(x))"]}
{"id": "eqasc_validation_1642", "nl": "haze decreases the temperature by blocking the sun", "fol": "", "prediction": ["all x.(Haze(x) -> (DecreasesTemperature(x) & BlocksSun(x)))"]}
{"id": "eqasc_validation_1643", "nl": "Ash clouds are a particular problem for aircraft.", "fol": "", "prediction": ["all x.(AshCloud(x) -> ParticularProblemForAircraft(x))"]}
{"id": "eqasc_validation_1644", "nl": "Volcanic clouds in the atmosphere is a particular problem for aircraft.", "fol": "", "prediction": ["all x.(VolcanicClouds(x) -> ParticularProblemForAircraft(x))"]}
{"id": "eqasc_validation_1645", "nl": "Cone volcanoes are associated with thick lava and much ash.", "fol": "", "prediction": ["all x.(ConeVolcano(x) -> (ThickLava(x) & MuchAsh(x)))"]}
{"id": "eqasc_validation_1646", "nl": "Cone volcanoes can lower the temperature of the earth", "fol": "", "prediction": ["all x.(ConeVolcano(x) -> LowersTemperature(x))"]}
{"id": "eqasc_validation_1647", "nl": "Or a veil of tiny particles from a volcanic eruption can block the sun.", "fol": "", "prediction": ["all x.((Vulel(x) & TinyParticles(x) & VolcanicEruption(x)) -> BlocksSun(x))"]}
{"id": "eqasc_validation_1648", "nl": "volcanoes can block the sun", "fol": "", "prediction": ["all x y.((Volcano(x) & Sun(y)) -> Blocks(x,y))"]}
{"id": "eqasc_validation_1649", "nl": "Black sand is volcanic ash.", "fol": "", "prediction": ["all x.(BlackSand(x) -> VolcanicAsh(x))"]}
{"id": "eqasc_validation_1650", "nl": "Black sand can block out the sun", "fol": "", "prediction": ["all x.(BlackSand(x) -> BlocksOutSun(x))"]}
{"id": "eqasc_validation_1651", "nl": "Fine, dusty particles erupted from volcanos decrease the temperature by blocking the sun", "fol": "", "prediction": ["all x y.((FineDustyParticles(x) & EruptedFromVolcanoes(x) & Volcano(y)) -> (DecreasesTemperatureByBlockingSunlight(x)))"]}
{"id": "eqasc_validation_1652", "nl": "a seismograph is used for measuring the size of an earthquake", "fol": "", "prediction": ["all x y.((Seismograph(x) & Earthquake(y)) -> MeasuresSize(x,y))"]}
{"id": "eqasc_validation_1653", "nl": "A seismograph will detect fault movements.", "fol": "", "prediction": ["all x.(Seismograph(x) -> DetectsFaultMovements(x))"]}
{"id": "eqasc_validation_1654", "nl": "Magnitude a measure of earthquake size.", "fol": "", "prediction": ["all x.(Magnitude(x) -> MeasuresEarthquakeSize(x))"]}
{"id": "eqasc_validation_1655", "nl": "A seismograph measures the magnitude of earthquakes", "fol": "", "prediction": ["all x y.((Seismograph(x) & Earthquake(y)) -> MeasuresMagnitude(x,y))"]}
{"id": "eqasc_validation_1656", "nl": "Earthquakes are commonly measured by the Richter magnitude scale, which measures the size of earthquakes.", "fol": "", "prediction": ["all x.(Earthquake(x) -> (MeasuredByRiverMagnitudeScale(x) & MeasuresSizeOfEarthquakes(x)))"]}
{"id": "eqasc_validation_1657", "nl": "a seismograph is used for measuring the Richter magnitude scale", "fol": "", "prediction": ["all x y.((Seismograph(x) & RichterMagnitudeScale(y)) -> Measures(x,y))"]}
{"id": "eqasc_validation_1658", "nl": "When earthquakes occur near cities of any size, the potential for damage is great.", "fol": "", "prediction": ["all x.((Earthquake(x) & NearCity(x) & AnySize(x)) -> PotentialForDamageGreat(x))"]}
{"id": "eqasc_validation_1659", "nl": "A seismograph is used for measuring the size of the damage done by an occurrence.", "fol": "", "prediction": ["all x y.((Seismograph(x) & Damage(y)) -> MeasuresSize(x,y))"]}
{"id": "eqasc_validation_1660", "nl": "Damage caused by earthquakes is emmense.", "fol": "", "prediction": ["all x.((EarthquakeDamage(x) & CausedBy(x,Earthquake)) -> Emense(x))"]}
{"id": "eqasc_validation_1661", "nl": "a seismograph can prevent damage", "fol": "", "prediction": ["all x.(Seismograph(x) -> PreventsDamage(x))"]}
{"id": "eqasc_validation_1662", "nl": "Richter magnitude is a measure of the size of the earthquake.", "fol": "", "prediction": ["all x.(J\u00fcrgenMagnitude(x) -> MeasuresSizeOfEarthquake(x))"]}
{"id": "eqasc_validation_1663", "nl": "a seismograph is used for measuring Richter magnitude", "fol": "", "prediction": ["all x.(Seismograph(x) -> MeasuresRiberMagnitude(x))"]}
{"id": "eqasc_validation_1664", "nl": "Most earthquakes are minor tremors.", "fol": "", "prediction": ["all x.(Earthquake(x) -> MinorTermor(x))"]}
{"id": "eqasc_validation_1665", "nl": "a seismograph is used for measuring the size of tremors", "fol": "", "prediction": ["all x y.((Seismograph(x) & Tremor(y)) -> MeasuresSize(x,y))"]}
{"id": "eqasc_validation_1666", "nl": "These are the waves that do the damage during earthquakes.", "fol": "", "prediction": ["all x.((Waves(x) & Earthquake(x)) -> DoDamage(x))"]}
{"id": "eqasc_validation_1667", "nl": "a seismograph measures waves that do damage.", "fol": "", "prediction": ["all x.(Seismograph(x) -> MeasuresWaves(x))"]}
{"id": "eqasc_validation_1668", "nl": "Sponges have specialized cells called collar cells.", "fol": "", "prediction": ["all x.(Spot(x) -> HasCollarCells(x))"]}
{"id": "eqasc_validation_1669", "nl": "Special cells called collar cells pick up the planktonic food and start the digestive process.", "fol": "", "prediction": ["all x.(CollarCell(x) -> (PicksUpPlanktonicFood(x) & StartsDigestiveProcess(x)))"]}
{"id": "eqasc_validation_1670", "nl": "Sponges have specialized cells to pick up planktonic food to digest", "fol": "", "prediction": ["all x y.((Spot(x) & PlanktonicFood(y)) -> HasSpecializedCells(x,y))"]}
{"id": "eqasc_validation_1671", "nl": "Sponges trap and digest food with specialized cells", "fol": "", "prediction": ["all x y z.((Sponges(x) & Food(y) & SpecializedCells(z)) -> (Traps(x,y) & Digests(x,y)))"]}
{"id": "eqasc_validation_1672", "nl": "Spicules, amoeboid cells, and collar cells are characteristic of sea anemones.", "fol": "", "prediction": ["all x.((Spicule(x) | AmoeboidCell(x) | CollarCell(x)) -> SeaAnemone(x))"]}
{"id": "eqasc_validation_1673", "nl": "Sponges and sea anemones have similar types of specialized cells.", "fol": "", "prediction": ["all x y.((Spot(x) & SeaAnemone(y)) -> SimilarSpecializedCells(x,y))"]}
{"id": "eqasc_validation_1674", "nl": "Flagellum of collar cell cause current to pass over collar and food is collected.", "fol": "", "prediction": ["all x y.((Flagellum(x) & CollarCell(y)) -> (CurrentPassesOver(x,y) & FoodCollected(x)))"]}
{"id": "eqasc_validation_1675", "nl": "Sponges use specialized cells with flagellum to collect food.", "fol": "", "prediction": ["all x.(Sponges(x) -> (UsesSpecializedCells(x) & HasFlagellum(x) & CollectsFood(x)))"]}
{"id": "eqasc_validation_1676", "nl": "Sponges are asymetrical and have many special types of cells.", "fol": "", "prediction": ["all x.(Spot(x) -> (Asymetrical(x) & HasSpecialCells(x)))"]}
{"id": "eqasc_validation_1677", "nl": "Sponges are asymmetrical and have collar cells", "fol": "", "prediction": ["all x.(Sponges(x) -> (Asymmetrical(x) & HasCollarCells(x)))"]}
{"id": "eqasc_validation_1678", "nl": "Collar cells produce a constant flow of water into the sponge.", "fol": "", "prediction": ["all x y.((CollarCell(x) & Sponge(y)) -> ProducesConstantFlowOfWater(x,y))"]}
{"id": "eqasc_validation_1679", "nl": "sponges have specialized work horses that produce constant flow of water to the sponge.", "fol": "", "prediction": ["all x.(Sponge(x) -> (SpecializedWorkHorse(x) & ProducesConstantFlowOfWater(x)))"]}
{"id": "eqasc_validation_1680", "nl": "medicine is used for curing people when they are sick", "fol": "", "prediction": ["all x y.((Medicine(x) & Person(y) & Sick(y)) -> UsedForCuring(x,y))"]}
{"id": "eqasc_validation_1681", "nl": "Herbs are medicines and aids.", "fol": "", "prediction": ["all x.(Herb(x) -> (Medicine(x) & Aid(x)))"]}
{"id": "eqasc_validation_1682", "nl": "herbs are used for curing people when they are sick", "fol": "", "prediction": ["all x y.((Herb(x) & Person(y) & Sick(y)) -> UsedForCuring(x,y))"]}
{"id": "eqasc_validation_1683", "nl": "Drugs are small medicine.", "fol": "", "prediction": ["all x.(Drug(x) -> SmallMedicine(x))"]}
{"id": "eqasc_validation_1684", "nl": "drugs can cure people when they are sick", "fol": "", "prediction": ["all x y.((Drug(x) & Person(y) & Sick(y)) -> CanCure(x,y))"]}
{"id": "eqasc_validation_1685", "nl": "If the patient looks sick, then the patient is sick.", "fol": "", "prediction": ["all x.(LooksSick(x) -> Sick(x))"]}
{"id": "eqasc_validation_1686", "nl": "Medicine is used for curing patients.", "fol": "", "prediction": ["all x y.((Medicine(x) & Patient(y)) -> UsedForCuring(x,y))"]}
{"id": "eqasc_validation_1687", "nl": "If the medicine is in the form of a pill, swallow the pill whole.", "fol": "", "prediction": ["all x.((Medicine(x) & Pill(x)) -> SwallowPillWhole(x))"]}
{"id": "eqasc_validation_1688", "nl": "swallowing pills whole is used for curing people when they are sick", "fol": "", "prediction": ["all x y.((Pill(x) & Person(y) & Sick(y)) -> UsedForCuring(x,y))"]}
{"id": "eqasc_validation_1689", "nl": "Prescription and non-prescription medicines and supplies ordered by a physician.", "fol": "", "prediction": ["all x y.((Prescription(x) & NonPrescription(x)) -> OrderedBy(x,y))"]}
{"id": "eqasc_validation_1690", "nl": "Physicians write prescriptions when people are sick.", "fol": "", "prediction": ["all x y.((Pharmacist(x) & Person(y) & Sick(y)) -> WritesPrescription(x,y))"]}
{"id": "eqasc_validation_1691", "nl": "People get sick but they get better.", "fol": "", "prediction": ["all x.(Person(x) -> (GetsSick(x) & GetsBetter(x)))"]}
{"id": "eqasc_validation_1692", "nl": "medicine is used for getting people better.", "fol": "", "prediction": ["all x.(Medicine(x) -> (GetsPeopleBetter(x)))"]}
{"id": "eqasc_validation_1693", "nl": "When a child is hungry or sick, food and medicine are needed.", "fol": "", "prediction": ["all x.((Child(x) & (Hungry(x) | Sick(x))) -> (NeedsFood(x) & NeedsMedication(x)))"]}
{"id": "eqasc_validation_1694", "nl": "a sick child needs food", "fol": "", "prediction": ["all x.((Child(x) & Sick(x)) -> NeedsFood(x))"]}
{"id": "eqasc_validation_1695", "nl": "Botanical Medicine Many plant substances are powerful medicines.", "fol": "", "prediction": ["all x.(BotanicalMedicine(x) -> (ManyPlantSubstances(x) & PowerfulMedication(x)))"]}
{"id": "eqasc_validation_1696", "nl": "Many plant substances are powerful cures for people when they are sick", "fol": "", "prediction": ["all x y.((PlantSubstance(x) & Person(y) & Sick(y)) -> PowerfulCures(x,y))"]}
{"id": "eqasc_validation_1697", "nl": "Babies are the MOST inquisitive of people.", "fol": "", "prediction": ["all x.(Baby(x) -> MOSTInquisitiveOfPeople(x))"]}
{"id": "eqasc_validation_1698", "nl": "Medicine is used for curing babies when they are sick", "fol": "", "prediction": ["all x y.((Medicine(x) & Baby(y) & Sick(y)) -> UsedForCuring(x,y))"]}
{"id": "eqasc_validation_1699", "nl": "Antibiotics are powerful medicines used to treat bacterial infections.", "fol": "", "prediction": ["all x.(Antibiotic(x) -> (PowerfulMedicine(x) & TreatsBacterialInfections(x)))"]}
{"id": "eqasc_validation_1700", "nl": "Antibiotics can cure people sick with bacterial infections", "fol": "", "prediction": ["all x y.((Antibiotic(x) & Person(y) & SickWithBacteriaInfections(y)) -> CanCure(x,y))"]}
{"id": "eqasc_validation_1701", "nl": "All people belong to the human family.", "fol": "", "prediction": ["all x.(Person(x) -> HumanFamily(x))"]}
{"id": "eqasc_validation_1702", "nl": "medicine is used for curing humans when they are sick", "fol": "", "prediction": ["all x y.((Medicine(x) & Human(y) & Sick(y)) -> UsedForCuring(x,y))"]}
{"id": "eqasc_validation_1703", "nl": "Medicines, such is ibuprofen, can calm inflammation and ease pain.", "fol": "", "prediction": ["all x.((Medicine(x) & Ibuprofen(x)) -> (CalmsInflammation(x) & EasesPain(x)))"]}
{"id": "eqasc_validation_1704", "nl": "ibuprofen is used for curing people when they are sick", "fol": "", "prediction": ["all x y.((Ibuprofen(x) & Person(y) & Sick(y)) -> UsedForCuring(x,y))"]}
{"id": "eqasc_validation_1705", "nl": "People get sick and die.", "fol": "", "prediction": ["all x.(Person(x) -> (GetsSick(x) & Dies(x)))"]}
{"id": "eqasc_validation_1706", "nl": "medicine can prevent people from dying", "fol": "", "prediction": ["all x y.((Medicine(x) & Person(y)) -> PreventsDeath(x,y))"]}
{"id": "eqasc_validation_1707", "nl": "Fingernails prevent injury by forming protective plates over the ends of the fingers.", "fol": "", "prediction": ["all x.(Fingernail(x) -> (PreventsInjury(x) & FormsProtectivePlates(x)))"]}
{"id": "eqasc_validation_1708", "nl": "Fingernails are also made of keratin.", "fol": "", "prediction": ["all x.(Fingernail(x) -> MadeOfKeratin(x))"]}
{"id": "eqasc_validation_1709", "nl": "keratin prevents injury by forming protecting plates over the ends of the fingers", "fol": "", "prediction": ["all x y.((Keratin(x) & Finger(y)) -> PreventsInjury(x,y))"]}
{"id": "eqasc_validation_1710", "nl": "Something made of keratin prevents injury by forming protective plates", "fol": "", "prediction": ["all x.((MadeOfKeratin(x) & PreventsInjury(x)) -> FormsProtectivePlates(x))"]}
{"id": "eqasc_validation_1711", "nl": "Keratin forming over the ends of fingers prevents injury", "fol": "", "prediction": ["all x y.((Keratin(x) & FingerEnds(y)) -> PreventsInjury(x,y))"]}
{"id": "eqasc_validation_1712", "nl": "People have fingernails.", "fol": "", "prediction": ["all x.(Person(x) -> HasFingersnails(x))"]}
{"id": "eqasc_validation_1713", "nl": "people prevent injury by forming protective plates over the ends of the fingers", "fol": "", "prediction": ["all x y.((Person(x) & Finger(y)) -> PreventsInjury(x,y))"]}
{"id": "eqasc_validation_1714", "nl": "Fingernail Examination Healthy fingernails are smooth and well shaped.", "fol": "", "prediction": ["all x.((FingernailExamination(x) & Smooth(x) & WellShaped(x)) -> Healthy(x))"]}
{"id": "eqasc_validation_1715", "nl": "Protective plates over the ends of the fingers should be smooth and well shaped.", "fol": "", "prediction": ["all x.(ProtectivePlate(x) -> (Smooth(x) & WellShaped(x)))"]}
{"id": "eqasc_validation_1716", "nl": "keratin prevents injury by forming protective plates over the ends of the fingers.", "fol": "", "prediction": ["all x.(Keratin(x) -> (PreventsInjury(x) & FormsProtectivePlates(x)))"]}
{"id": "eqasc_validation_1717", "nl": "Keratin prevents injury by forming protective plates over the ends of the fingers.", "fol": "", "prediction": ["all x.(Keratin(x) -> (PreventsInjury(x) & FormsProtectivePlates(x)))"]}
{"id": "eqasc_validation_1718", "nl": "Fingernails become more brittle with age.", "fol": "", "prediction": ["all x.(Fingernail(x) -> BrittleWithAge(x))"]}
{"id": "eqasc_validation_1719", "nl": "protective plates over the ends of the fingers become more brittle with age", "fol": "", "prediction": ["all x y.((ProtectivePlate(x) & FingerEnds(y) & Age(x)) -> BrittleWithAge(x,y))"]}
{"id": "eqasc_validation_1720", "nl": "protective plates over the ends of the fingers are made of keratin", "fol": "", "prediction": ["all x.(ProtectivePlates(x) -> (MadeOfKeratin(x) & OverFingersEnds(x)))"]}
{"id": "eqasc_validation_1721", "nl": "a stopwatch is used to measure time", "fol": "", "prediction": ["all x y.((Stopwatch(x) & Time(y)) -> Measures(x,y))"]}
{"id": "eqasc_validation_1722", "nl": "Stopwatches are used to measure seconds.", "fol": "", "prediction": ["all x.(Stopwatch(x) -> MeasuresSeconds(x))"]}
{"id": "eqasc_validation_1723", "nl": "Reaction time was measured with a stopwatch in minutes and seconds.", "fol": "", "prediction": ["all x.(ReactionTime(x) -> (MeasuredWithStopwatch(x) & InMinutesAndSeconds(x)))"]}
{"id": "eqasc_validation_1724", "nl": "a stopwatch can measure minutes", "fol": "", "prediction": ["all x.(Stopwatch(x) -> MeasuresMinutes(x))"]}
{"id": "eqasc_validation_1725", "nl": "Stopwatches are used to measure minutes and seconds", "fol": "", "prediction": ["all x.(Stopwatch(x) -> (MeasuresMinutes(x) & MeasuresSeconds(x)))"]}
{"id": "eqasc_validation_1726", "nl": "A stopwatch is used to measure seconds.", "fol": "", "prediction": ["all x.(Stopwatch(x) -> MeasuresSeconds(x))"]}
{"id": "eqasc_validation_1727", "nl": "Time in seconds is available with times or itimes .", "fol": "", "prediction": ["all x.(Time(x) -> (Time(x) | Itimes(x)))"]}
{"id": "eqasc_validation_1728", "nl": "a stopwatch is used to measure seconds", "fol": "", "prediction": ["all x y.((Stopwatch(x) & Seconds(y)) -> Measures(x,y))"]}
{"id": "eqasc_validation_1729", "nl": "Time can be measured with a clock or watch.", "fol": "", "prediction": ["all x.(Time(x) -> (MeasuredWithClock(x) | MeasuredWithWatch(x)))"]}
{"id": "eqasc_validation_1730", "nl": "time is kept with a watch", "fol": "", "prediction": ["all x y.((Time(x) & Watch(y)) -> KeepsWith(x,y))"]}
{"id": "eqasc_validation_1731", "nl": "Timing is the essence of punctuality.", "fol": "", "prediction": ["all x.(Timing(x) -> Punctuality(x))"]}
{"id": "eqasc_validation_1732", "nl": "a stopwatch is used to help people be punctual", "fol": "", "prediction": ["all x y.((Stopwatch(x) & Person(y)) -> HelpsBePunctual(x,y))"]}
{"id": "eqasc_validation_1733", "nl": "Kidney failure may be treated with dialysis.", "fol": "", "prediction": ["all x.(KinneyFailure(x) -> MayBeTreatedWithDialysis(x))"]}
{"id": "eqasc_validation_1734", "nl": "Dialysis Dialysis is a way of cleaning the blood with an artificial kidney.", "fol": "", "prediction": ["all x.(Dialysis(x) -> (CleaningBloodWithArtificialKneel(x)))"]}
{"id": "eqasc_validation_1735", "nl": "Kidney failure may be treated by cleaning the blood with an artificial kidney", "fol": "", "prediction": ["all x.(KinneyFailure(x) -> (CleaningBloodWithArtificialKneep(x) & KidneyFailure(x)))"]}
{"id": "eqasc_validation_1736", "nl": "kidney failure may be treated with a way of cleaning blood", "fol": "", "prediction": ["all x.(KneeFailure(x) -> (CleaningBlood(x) & MayBeTreatedWith(x,y)))"]}
{"id": "eqasc_validation_1737", "nl": "Dialysis is a procedure to filter the blood.", "fol": "", "prediction": ["all x.(Dialysis(x) -> FiltersBlood(x))"]}
{"id": "eqasc_validation_1738", "nl": "Kidney failure may be treated with a procedure to filter the blood.", "fol": "", "prediction": ["all x.(KinneyFailure(x) -> (Treatment(x,y) & FilterBlood(y)))"]}
{"id": "eqasc_validation_1739", "nl": "Kidney, or renal, failure is an inability of the kidneys to do their job.", "fol": "", "prediction": ["all x.(Kinney(x) -> (InabilityToDoJob(x) & Kidney(x)))"]}
{"id": "eqasc_validation_1740", "nl": "Dialysis is used to treat patients with renal failure.", "fol": "", "prediction": ["all x.(Dialysis(x) -> TreatsRenalFailure(x))"]}
{"id": "eqasc_validation_1741", "nl": "Kidney failure may be treated with a procedure to filter the blood", "fol": "", "prediction": ["all x.(KinneyFailure(x) -> (TreatmentWithProcedure(x) & FiltersBlood(x)))"]}
{"id": "eqasc_validation_1742", "nl": "Dialysis may be necessary to filter blood", "fol": "", "prediction": ["all x.(Dialysis(x) -> (NecessaryToFilterBlood(x) & FiltersBlood(x)))"]}
{"id": "eqasc_validation_1743", "nl": "kidney failure may be treated with a procedure to filter the blood", "fol": "", "prediction": ["all x.(KneeFailure(x) -> (Treatment(x) & FilterBlood(x)))"]}
{"id": "eqasc_validation_1744", "nl": "Dialysis is the mechanical process of cleaning the blood.", "fol": "", "prediction": ["all x.(Dialysis(x) -> CleansBlood(x))"]}
{"id": "eqasc_validation_1745", "nl": "Kidney failure may be treated by the mechanical process of cleaning the blood", "fol": "", "prediction": ["all x.(KinneyFailure(x) -> (MechanicalProcessOfCleaningBlood(x) & MayBeTreatedBy(x)))"]}
{"id": "eqasc_validation_1746", "nl": "Diabetic kidney disease, kidney failure and other diabetes related kidney problems.", "fol": "", "prediction": ["all x.(DiabeticKneelDisease(x) & KidneyFailure(x) & DiabetesRelatedKneelProblems(x))"]}
{"id": "eqasc_validation_1747", "nl": "One effect of diabetes can be treated with dialysis.", "fol": "", "prediction": ["all x.(DiabeticEffect(x) -> CanBeTreatedWithDialysis(x))"]}
{"id": "eqasc_validation_1748", "nl": "Kidney failure is a death sentence.", "fol": "", "prediction": ["all x.(KinneyFailure(x) -> DeathSentence(x))"]}
{"id": "eqasc_validation_1749", "nl": "A lack of dialysis may lead to death.", "fol": "", "prediction": ["all x.(LackOfDialysis(x) -> MayLeadToDeath(x))"]}
{"id": "eqasc_validation_1750", "nl": "Kidney failure may be treated by cleaning the blood with an artificial kidney.", "fol": "", "prediction": ["all x.(KinneyFailure(x) -> (CleaningBloodWithArtificialKneel(x)))"]}
{"id": "eqasc_validation_1751", "nl": "Renal failure means kidney failure.", "fol": "", "prediction": ["all x.(RenalFailure(x) -> KidneyFailure(x))"]}
{"id": "eqasc_validation_1752", "nl": "Renal failure may be treated with dialysis", "fol": "", "prediction": ["all x.(RenalFailure(x) -> (TreatmentWithDialysis(x) | TreatmentWithDialysis(x)))"]}
