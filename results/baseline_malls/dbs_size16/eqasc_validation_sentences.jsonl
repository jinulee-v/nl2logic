{"id": "eqasc_validation_0", "nl": "Climate is generally described in terms of temperature and moisture.", "fol": "", "prediction": ["all x.(Climate(x) -> (TermsOfTemperature(x) & TermsOfMoisture(x)))", "all x y.((Climate(x) & Temperature(y) & Moisture(y)) -> DescribedInTerms(x,y))", "all x.(Climate(x) -> (Terms(x,Temperature) & Terms(x,Moisture)))", "(all x.(Climate(x) -> (Temperature(x) | Moisture(x))))", "all x.(Climate(x) -> (TermsOfTemperature(x) & TermsOfMoisture(x)))", "all x y.((Climate(x) & Temperature(y) & Moisture(z)) -> DescribedInTerms(x,y,z))", "all x.(Climate(x) -> (TermsOfTemperature(x) & TermsOfMoisture(x)))", "(all x.(Climate(x) -> (Temperature(x) | Moisture(x))))", "all x.(Climate(x) -> (TerminatedInTermin(x,Temperature) & DescribedInTerminumicum(x,Moisture)))", "all x.(Climate(x) -> (Terms(x,Temperature) & Terms(x,Moisture)))", "all x y.((Climate(x) & Temperature(y) & Moisture(y)) -> GeneralDescription(x,y))", "all x.(Climate(x) -> (DescribedInTermsOfTemperature(x) & DescribedInTermsOfMoisture(x)))", "(all x.(Climate(x) -> (Temperature(x) | Moisture(x))))", "all x.(Climate(x) -> (Terms(x,Temperature) & Terms(x,Moisture)))", "all x y.((Climate(x) & Temperature(y) & Moisture(z)) -> DescribedInTerms(x,y,z))", "all x.(Climate(x) -> (TermsOfTemperature(x) & TermsOfMoisture(x)))"]}
{"id": "eqasc_validation_1", "nl": "Fire behavior is driven by local weather conditions such as winds, temperature and moisture.", "fol": "", "prediction": ["all x.(FireBehavior(x) -> (DrivenByLocalWeatherConditions(x) & WindsTemperatureMoisture(x)))", "all x y.((FireBehavior(x) & LocalWeatherConditions(y)) -> (DrivenBy(x,y) & Winds(y) & Temperature(y) & Moisture(y)))", "all x y z.((FireBehavior(x) & LocalWeatherCondition(y) & WindsTemperatureMoisture(z)) -> DrivenBy(x,y,z))", "(DrivenBy(FireBehavior(Fire) & LocalWeatherConditions(Fire,Winds) & LocalWeatherConditions(Fire,Temperature) & LocalWeatherConditions(Fire,Moisture))", "all x.(FireBehavior(x) -> (DrivenByLocalWeatherConditions(x) & (Winds(x) | Temperature(x) | Moisture(x))))", "(DrivenByLocalWeatherConditions(firebehavior) & (Winds(fire) | Temperature(fire) | Moisture(fire)))", "all x y.((FireBehavior(x) & LocalWeatherCondition(y)) -> (DrivenBy(x,y) & (Winds(y) | Temperature(y) | Moisture(y))))", "all x.(FireBehavior(x) -> (DrivenByLocalWeatherConditions(x) & WindsTemperatureMoistureMoisture(x)))", "(DrivenByLocalWeatherConditions(FireBehavior) & (Winds(W) | Temperature(W) | Moisture(W)))", "all x.(FireBehavior(x) -> (DrivenByLocalWeatherConditions(x) & WindConditions(x) & TemperatureConditions(x) & MoistureConditions(x)))", "all x y.((FireBehavior(x) & LocalWeatherCondition(y)) -> (DrivenByWinds(x,y) & DrivenByTemperature(x,y) & DrivenByMoisture(x,y)))", "all x y z.((FireBehavior(x) & LocalWeatherCondition(y) & WindsTemperatureMoisture(z)) -> DrivenBy(x,y,z))", "all x.(FireBody(x) -> (DrivenByLocalWeatherConditions(x) & WindsTemperatureMoisture(x)))", "all x.(FireBehavior(x) -> (DrivenBy(x,winds) & DrivenBy(x,temperature) & DrivenBy(x,moisture)))", "exists x.(FireBehavior(x) & LocalWeatherConditions(x) & (Winds(x) | Temperature(x) | Moisture(x)))", "all x y z.((FireBehavior(x) & LocalWeatherCondition(y) & WindsTemperatureMoisture(z)) -> DrivenBy(x,y,z))"]}
{"id": "eqasc_validation_2", "nl": "Climate is generally described in terms of local weather conditions", "fol": "", "prediction": ["all x.(Climate(x) -> (TermsOfLocalWeatherConditions(x) & LocalWeatherConditions(x)))", "all x y.((Climate(x) & LocalWeatherConditions(y)) -> GenerallyDescribedInTerms(x,y))", "(all x.(Climate(x) -> LocalWeatherConditions(x)))", "all x.(Climate(x) -> (TermsOfLocalWeatherConditions(x) & DescribedInTermsOfWeatherConditions(x)))", "all x y z.((Climate(x) & LocalWeatherConditions(y) & LocalWeatherConditions(z)) -> (DescribedInTerms(x,y,z) & LocalWeatherConditions(x)))", "all x.(Climate(x) -> (TermsOfLocalWeatherConditions(x) & LocalWeatherConditions(x)))", "all x.(Climate(x) -> LocalWeatherConditions(x))", "all x y.((Climate(x) & LocalWeatherConditions(y)) -> GenerallyDescribedInTerms(x,y))", "(all x.(Climate(x) -> LocalWeatherConditions(x)))", "all x y z.((Climate(x) & LocalWeatherConditions(y) & WeatherConditions(z)) -> LocalWeatherConditions(x,y,z))", "all x y.((Climate(x) & LocalWeatherConditions(y)) -> DescribedInTerms(x,y))", "all x.(Climate(x) -> (LocalWeatherConditions(x) & LocalWeatherConditions(x)))", "all x.(Climate(x) -> (LocalWeatherConditions(x) & LocalWeatherConditions(x)))", "(all x.(Climate(x) -> LocalWeatherConditions(x)))", "all x y.((Climate(x) & LocalWeatherCondition(y)) -> DescribedInTerms(x,y))", "all x.(Climate(x) -> LocalWeatherConditions(x))"]}
{"id": "eqasc_validation_3", "nl": "Instructions Climate Climate varies according to altitude.", "fol": "", "prediction": ["All x.((Instructions(x) & Altitude(y)) -> VariableClimate(x,y))", "Instructions ClimateClimate(c) & Altitude(c) & Variable(c))", "Instructions ClimateClimate(Climate) VariatesAlongAltitude(Climate)", "Instructions Climate(c) & Altitude(c) & VariatesAt(c,c,c))", "All x.(Instructions(x) -> ClimateClimate(x))", "Instructions ClimateClimateVariatesAlongAltitude(c)", "All x.((Instructions(x) & Altitude(x)) -> ClimateClimate(x))", "Instructions ClimateClimate(x) & Altitude(x))", "(Altitude(c) & Altitude(c)) -> Variates(c))", "Instructions ClimateClimate(c) varies according to altitude(c))", "Instructions ClimateClimateVariatesAlongAltitude(c)", "(InstructionsClimate(Climate) -> VarysAlongAltitude(Climate))", "Instructions Climate Climate VariatesAlongAltitude(c)", "all x.((Instructions(x) & Altitude(y)) -> Variates(x,y))", "Instructions ClimateClimatevariesAlongAltitude(c)", "Instructions Climate(c) & Altitude(c) & Variable(c))"]}
{"id": "eqasc_validation_4", "nl": "temperature and moisture varies by alltitude", "fol": "", "prediction": ["all x.((Temperature(x) & Moisture(x)) -> VariatesByAlltitude(x))", "all x y.((Temperature(x) & Moisture(y)) -> VariatesByAlltitude(x,y))", "(VariatesAlltitude(Temperature(Moisture) & VariatesAlltitude(Moisture))", "all x.((Temperature(x) & Moisture(x)) -> VariatesByAlltitude(x))", "all.((Temperature(x) & Moisture(x)) -> VariatesByAlltitude(x))", "(all x.(Temperature(x) -> VariatesWithAlltitude(x)) & all y.(Temperature(y) -> VariatesWithAlltitude(y))) & all z.(Moisture(z) -> VariatesWithAlltitude(z)))", "all x.((Temperature(x) | Moisture(x)) -> VariatesByAlltitude(x))", "all x.(Temperature(x) & Moisture(x) & VariatesByAlltitude(x))", "all x y.((Temperature(x) & Moisture(y)) -> VariatesByAlltitude(x,y))", "all x.(TemperatureAndMoisture(x) -> VariatesByAlltitude(x))", "all x.((Temperature(x) & Moisture(x)) -> VariatesByAlltitude(x))", "all.((Temperature(x) & Moisture(x)) -> VariatesByAlltitude(x))", "all x y.((Temperature(x) & Moisture(y)) -> VariatesByAlltitude(x,y))", "all x.((Temperature(x) & Moisture(x)) -> Variable(x))", "(all x.(Temperature(x) | Moisture(x))) & VaryByAlltitude(x))", "(all x.(Temperature(x) | Moisture(x)) -> VariatesByAlltitude(x))"]}
{"id": "eqasc_validation_5", "nl": "Climate change is a global problem.", "fol": "", "prediction": ["all x.(ClimateChange(x) -> GlobalProblem(x))", "all x y.((ClimateChange(x) & GlobalProblem(y)) -> GlobalProblem(x,y))", "(GlobalProblem(climate) & GlobalProblem(climate))", "all x.(ClimateChange(x) -> GlobalProblem(x))", "(GlobalProblem(climate) & GlobalProblem(climate))", "all x y.((ClimateChange(x) & GlobalProblem(y)) -> Global(x))", "all x.(ClimateChange(x) -> GlobalProblem(x))", "(GlobalProblem(climatechange) & GlobalProblem(climatechange))", "all x.((ClimateChange(x) & GlobalProblem(x)) -> GlobalProblem(x))", "all x y.((ClimateChange(x) & GlobalProblem(y)) -> GlobalProblem(x,y))", "all x.(ClimateChange(x) -> GlobalProblem(x))", "all x.(ClimateChange(x) -> GlobalProblem(x))", "all x.(ClimateChange(x) -> GlobalProblem(x))", "all x.(ClimateChange(x) -> GlobalProblem(x))", "all x.(ClimateChange(x) -> GlobalProblem(x))", "all x.(ClimateChange(x) -> GlobalProblem(x))"]}
{"id": "eqasc_validation_6", "nl": "temperature and moisture is changing globally", "fol": "", "prediction": ["all x.((Temperature(x) & Moisture(x)) -> ChangesGlobally(x))", "all x y.((Temperature(x) & Moisture(y)) -> (ChangingGlobally(x,y) & Globally(x)))", "all x.((Temperature(x) | Moisture(x)) -> ChangesGlobally(x))", "all x y z.((Temperature(x) & Moisture(y) & Globally(z)) -> (ChangesGlobally(x,y,z) & Globally(x)))", "all x y.((Temperature(x) & Moisture(y)) -> (ChangesGlobally(x,y) & Globally(x,y)))", "(GloballyChangesTemperatureAndMoisture(x) & GloballyChangesMoisture(x))", "(ChangingGlobally(Temperature(Moisture) & Globally(Moisture))", "(Globally, TemperatureAndMoistureChange(x) & Globally(x))", "(GloballyChangesThermodynamicsAndMoisture(x) & GloballyChangesThermodynamicsAndMoisture(x))", "all x.((Temperature(x) & Moisture(x)) -> GloballyChanges(x))", "all x y z.((Temperature(x) & Moisture(y) & GloballyChanged(z)) -> (TemperatureAndMoisture(x,y) & GloballyChanged(z)))", "all x y.((Temperature(x) & Moisture(y)) -> GloballyChanges(x,y))", "all x.((Temperature(x) | Moisture(x)) -> GloballyChanges(x))", "(ChangingGlobally(TemperatureAndMoisture))", "all x.((Temperature(x) & Moisture(x)) -> ChangesGlobally(x))", "all x.((Temperature(x) | Moisture(x)) -> ChangesGlobally(x))"]}
{"id": "eqasc_validation_7", "nl": "Introduction to Climate Introduction Climate is the average weather conditions.", "fol": "", "prediction": ["all x.((Introduction(x) & ClimateIntroduction(x)) -> AverageWeatherConditions(x))", "IntroductionToClimateIntroduction(climate)", "(IntroductionToClimateIntroduction(climate) -> AverageWeatherConditions(climate))", "All x.((Introduction(x) & Climate(x)) -> AverageWeatherConditions(x))", "all x y.((Introduction(x) & Climate(y)) -> AverageWeatherConditions(x,y))", "All x.(ClimateIntroduction(x) -> AverageWeatherConditions(x))", "all x y.((Introduction(x) & ClimateIntroduction(y)) -> (AverageWeatherConditions(x) & AverageWeatherConditions(x)))", "IntroductionToClimateIntroduction(climate)", "(IntroductionToClimateIntroduction(climate) -> AverageWeatherConditions(climate))", "IntroductionToClimateIntroductionToClimateIntroduction(climate)", "IntroductionToClimateIntroduction(climate) -> AverageWeatherConditions(climate))", "all x.(IntroductionToClimate(x) -> ClimateIntroduction(x))", "IntroductionToClimateIntroduction(Climate)", "All x.((Introduction(x) & Climate(x)) -> AverageWeatherConditions(x))", "IntroductionToClimateIntroduction(c) -> AverageWeatherConditions(c))", "IntroductionToClimate Introduction(climate)"]}
{"id": "eqasc_validation_8", "nl": "average weather conditions are generally described in terms of temperature and moisture", "fol": "", "prediction": ["all x.(AverageWeatherConditions(x) -> (TermsOfTemperature(x) & TermsOfMoisture(x)))", "all x y.((AverageWeatherCondition(x) & Temperature(y) & Moisture(y)) -> DescribedInTerms(x,y))", "all x.(AverageWeatherCondition(x) -> (TermsOfTemperature(x) & TermsOfMoisture(x)))", "all x.(AverageWeatherConditions(x) -> (DescribedInTermsOfTemperature(x) & DescribedInTermsOfMoisture(x)))", "all x y z.((AverageWeatherCondition(x) & Temperature(y) & Moisture(z)) -> (DescribedInTerms(x,y,z) & DescribedInTerms(x,y,z)))", "all x.((WeatherCondition(x) & Temperature(x) & Moisture(x)) -> Average(x))", "all x.(AverageWeatherCondition(x) -> (DescribedInTermsOfTemperature(x) & DescribedInTermsOfMoisture(x)))", "all x y.((AverageWeatherCondition(x) & Temperature(y) & Moisture(y)) -> DescribedInTerms(x,y))", "(all x.(AverageWeatherCondition(x) -> (Temperature(x) | Moisture(x))))", "all x.(WeatherCondition(x) -> (TermsOfTemperature(x) & TermsOfMoisture(x)))", "all x y z.((AverageWeatherCondition(x) & Temperature(y) & Moisture(z)) -> (DescribedInTermsOf(x,y,z) & DescribedInTermsOf(x,z)))", "(all x.(AverageWeatherCondition(x) -> (TermsOfTemperature(x) & TermsOfMoisture(x))))", "all x y.((AverageWeatherCondition(x) & Temperature(y) & Moisture(z)) -> (DescribedInTermsOf(x,y,z) & DescribedInTermsOf(x,y,z)))", "(all x.(AverageWeatherConditions(x) -> (Temperature(x) | Moisture(x))))", "all x.((WeatherCondition(x) & Temperature(x) & Moisture(x)) -> Average(x))", "all x.(AverageWeatherConditions(x) -> (TermsOfTemperature(x) & TermsOfMoisture(x)))"]}
{"id": "eqasc_validation_9", "nl": "Clouds are made of moisture and the moisture is from the water evaporating.", "fol": "", "prediction": ["all x.(Cloud(x) -> (MadeOfMoisture(x) & WaterEvaporating(x)))", "all x y.((Cloud(x) & Water(y)) -> (MadeOfMoisture(x,y) & WaterEvaporating(x,y)))", "all x y.((Cloud(x) & Moisture(y)) -> (MadeOf(x,y) & WaterEvaporating(y)))", "all x y z.((Cloud(x) & Moisture(y) & Water(z)) -> (MadeOf(x,y) & Evaporating(z)))", "(all x.(Cloud(x) -> MadeOfMoisture(x)) & all y.(Cloud(y) -> EvaporatingWater(y)))", "all x.(Cloud(x) -> (MadeOfMoisture(x) & WaterEvaporating(x)))", "all x y z.(Cloud(x) -> (MadeOfMoisture(x) & Moisture(y) & WaterEvaporating(z) & MadeOf(x,y)))", "all x.(Cloud(x) -> (MadeOfMoisture(x) & MoistureFromWaterEvaporating(x)))", "all x y.((Cloud(x) & Water(y)) -> (MadeOfMoisture(x,y) & Evaporating(y)))", "(all x.(Cloud(x) -> MadeOfMoisture(x)) & all y.(Cloud(y) -> EvaporatingWater(y)))", "all x y.((Cloud(x) & Moisture(y)) -> (MadeOf(x,y) & WaterEvaporating(x)))", "exists x.(Cloud(x) & MadeOfMoisture(x) & WaterEvaporating(x))", "(all x.(Cloud(x) -> MadeOfMoisture(x)) & all y.(Cloud(y) -> WaterEvaporating(y)))", "all x.(Cloud(x) -> (MadeOfMoisture(x) & WaterEvaporating(x)))", "all x.(Cloud(x) -> (MadeOfMoisture(x) & MoistureFromWaterEvaporating(x)))", "all x.(Cloud(x) -> (MadeOfMoisture(x) & WaterEvaporating(x)))"]}
{"id": "eqasc_validation_10", "nl": "Climate is usually described in terms of temperature and water in the air.", "fol": "", "prediction": ["all x.(Climate(x) -> (TermsOfTemperature(x) & TermsOfWater(x)))", "all x y.((Climate(x) & Temperature(y) & Water(y)) -> DescribedIn(x,y))", "all x.(Climate(x) -> (Terms(x,Temperature) & Water(x)))", "(Terms(Climate) & Temperature(Climate) & Water(Climate))", "(all x.(Climate(x) -> (Temperature(x) | Water(x))))", "all x y z.((Climate(x) & Temperature(y) & Water(z)) -> (DescribedIn(x,y,z) & In(x,y)))", "all x y.((Climate(x) & Temperature(y) & Water(y)) -> DescribedInTerms(x,y))", "all x.(Climate(x) -> (TermsOfTemperature(x) & TermsOfWater(x)))", "all x.(Climate(x) -> (TermsOfTemperature(x) & TermsOfWater(x)))", "all x.(Climate(x) -> (Terms(x,Temperature) & Terms(x,Water)))", "all x y.((Climate(x) & Temperature(y) & Water(y)) -> DefinedInAir(x,y))", "all x.(Climate(x) -> (DescribedInTermsOfTemperature(x) & DescribedInTermsOfWater(x)))", "(all x.(Climate(x) -> (Temperature(x) | Water(x))))", "all x y.((Climate(x) & Temperature(y) & Water(z)) -> (DescribedIn(x,y) & In(x,z)))", "all x.(Climate(x) -> (Terms(x,Temperature) & Water(x)))", "all x.(Climate(x) -> (Temperature(x) & Water(x) & InAir(x)))"]}
{"id": "eqasc_validation_11", "nl": "Climate refers to weather over a long period of time.", "fol": "", "prediction": ["all x.(Climate(x) -> Weather(x))", "all x y.((Climate(x) & Weather(y)) -> LongPeriodOfTime(x,y))", "all x.(Climate(x) -> WeatherOverLongPeriod(x))", "(all x.(Climate(x) -> WeatherOverLongPeriod(x)))", "all x y z.((Climate(x) & Weather(y) & LongPeriodOfTime(z)) -> RefersTo(x,y,z))", "all x y.((Climate(x) & Weather(y)) -> LongPeriodOfTime(x,y))", "all x.(Climate(x) -> Weather(x))", "all x.(Climate(x) -> WeatherOverLongPeriod(x))", "all x y.((Climate(x) & Weather(y)) -> LongPeriodOfTime(x))", "all x.(Climate(x) -> (Weather(x) & LongPeriodOfTime(x)))", "(all x.(Climate(x) -> Weather(x)))", "all x y.((Climate(x) & Weather(y) & LongPeriodOfTime(x)) -> Weather(x,y))", "all x.(Climate(x) -> Weather(x))", "all x y.((Climate(x) & Weather(y)) -> LongPeriodOfTime(x,y))", "all x.(Climate(x) -> Weather(x))", "all x.(Climate(x) -> Weather(x))"]}
{"id": "eqasc_validation_12", "nl": "weather is generally described in terms of temperature and moisture", "fol": "", "prediction": ["all x.(Weather(x) -> (TermsOfTemperature(x) & TermsOfMoisture(x)))", "all x.(Weather(x) -> (TerminatedInTerminsOfTemperature(x) & DescribedInTerminsOfMoisture(x)))", "all x y.((Weather(x) & Temperature(y) & Moisture(y)) -> (TerminallyDescribedInTerminum(x,y) & DescribedInTerminum(x,y)))", "all x y z.((Weather(x) & Temperature(y) & Moisture(z)) -> (Terms(x,y) & DescribedInTerms(x,z)))", "(all x.(Weather(x) -> (Temperature(x) | Moisture(x))))", "all x y.((Weather(x) & Temperature(y) & Moisture(y)) -> GenerallyDescribedInTerms(x,y))", "all x.(Weather(x) -> (TermsOfTemperature(x) & TermsOfMoisture(x)))", "all x y z.((Weather(x) & Temperature(y) & Moisture(z)) -> (DescribedInTerms(x,y,z) & DescribedInTerms(x,y,z)))", "all x y.((Weather(x) & Temperature(y) & Moisture(z)) -> (DescribedInTerms(x,y,z) & DescribedInTerms(x,y,z)))", "all x.(Weather(x) -> (TermsOfTemperature(x) & TermsOfMoisture(x)))", "(all x.(Weather(x) -> (Temperature(x) | Moisture(x))))", "all x.(Weather(x) -> (DescribedInTermsOfTemperature(x) & DescribedInTermsOfMoisture(x)))", "all x.(Weather(x) -> (TerminatedInTerminsOfTemperature(x) & DescribedInTerminsOfMoisture(x)))", "(all x y.(Weather(x) -> (Temperature(y) | Moisture(y))))", "all x.(Weather(x) -> (TerminatedInTerminsOfTemperature(x) & DescribedInTerminsOfMoisture(x)))", "(all x.(Weather(x) -> (Temperature(x) | Moisture(x))))"]}
{"id": "eqasc_validation_13", "nl": "Humidity is moisture in the air.", "fol": "", "prediction": ["all x.(Humidity(x) -> MoistureInAir(x))", "all x y.((Humidity(x) & Air(y)) -> Moisture(x,y))", "all x.(Humidity(x) -> MoistureInAir(x))", "(MoistureInAir(Humidity))", "(Moisture(Humidity) & InAir(Humidity))", "all x.(Humidity(x) -> MoistureInAir(x))", "all x.(Humidity(x) -> MoistureInAir(x))", "all x y.((Humidity(x) & Air(y)) -> Moisture(x,y))", "(MoistureInAir(Humidity))", "all x y.((Humidity(x) & Air(y)) -> MoistureIn(x,y))", "(MoistureInAir(Humidity))", "all x.(Humidity(x) -> MoistureInAir(x))", "all x.(Humidity(x) -> MoistureInAir(x))", "all x.(Humidity(x) -> MoistureInAir(x))", "all x.(Humidity(x) -> MoistureInAir(x))", "all x.(Humidity(x) -> MoistureInAir(x))"]}
{"id": "eqasc_validation_14", "nl": "Climate is generally described in terms of temperature and humidity.", "fol": "", "prediction": ["all x.(Climate(x) -> (TermsOfTemperature(x) & TermsOfHumidity(x)))", "all x y.((Climate(x) & Temperature(y) & Humidity(z)) -> DescribedInTerms(x,y,z))", "all x.(Climate(x) -> (Terms(x,Temperature) & Terms(x,Humidity)))", "(all x.(Climate(x) -> (Temperature(x) | Humidity(x))))", "all x.(Climate(x) -> (TerminatedInTermin(x,Temperature) & DescribedInTerminumicum(x,Humidity)))", "all x y.((Climate(x) & Temperature(y) & Humidity(y)) -> GeneralDescription(x,y))", "all x.(Climate(x) -> (TermsOfTemperature(x) & TermsOfHumidity(x)))", "all x.(Climate(x) -> (TermsOfTemperature(x) & TermsOfHumidity(x)))", "(all x.(Climate(x) -> (Temperature(x) | Humidity(x))))", "all x y.((Climate(x) & Temperature(y) & Humidity(z)) -> DescribedInTerms(x,y,z))", "all x.(Climate(x) -> (DescribedInTermsOfTemperature(x) & DescribedInTermsOfHumidity(x)))", "(all x.(Climate(x) -> (Temperature(x) | Humidity(x))))", "all x.(Climate(x) -> (Terms(x,Temperature) & Terms(x,Humidity)))", "all x.(Climate(x) -> (Terms(x,Temperature) & Terms(x,Humidity)))", "all x y.((Climate(x) & Temperature(y) & Humidity(y)) -> GenerallyDescribedInTerms(x,y))", "all x.(Climate(x) -> (TermsOfTemperature(x) & TermsOfHumidity(x)))"]}
{"id": "eqasc_validation_15", "nl": "Humidity is a measure of moisture content of air.", "fol": "", "prediction": ["all x.(Humidity(x) -> MeasuresMoistureContentOfAir(x))", "(MeasuresMoistureContent(Humidity) & Air(Air))", "all x y.((Humidity(x) & Air(y)) -> MeasuresMoistureContent(x,y))", "all x.(Humidity(x) -> MeasuresMoistureContentOfAir(x))", "all x.(Humidity(x) -> MeasuresMoistureContentOfAir(x))", "(MeasuresMoistureContent(Humidity) & Air(Air))", "all x y.((Humidity(x) & Air(y)) -> MeasuresMoistureContent(x,y))", "all x.(Humidity(x) -> MeasuresMoistureContent(x))", "all x.(Humidity(x) -> MeasuresMoistureContentOfAir(x))", "(MeasuresHumidity(Humidity) & MoistureContent(Air))", "(MeasuresMoistureContentOfAir(Humidity))", "all x.(Humidity(x) -> MoistureContentOfAir(x))", "all x.(Humidity(x) -> MeasuresMoistureContentOfAir(x))", "all x y.((Humidity(x) & Air(y)) -> MeasuresMoistureContent(x,y))", "all x.(Humidity(x) -> MeasuresMoistureContentOfAir(x))", "all x.(Humidity(x) -> MeasuresMoistureContent(x))"]}
{"id": "eqasc_validation_16", "nl": "a vehicle is used for transportation", "fol": "", "prediction": ["all x y.((Vehicle(x) & Transportation(y)) -> UsedFor(x,y))", "all x.(Vehicle(x) -> UsedForTransportation(x))", "all x.((Vehicle(x) & UsedForTransportation(x)) -> UsedForTransportation(x))", "all x y z.((Vehicle(x) & Transportation(y) & Transportation(z)) -> UsedFor(x,y,z))", "all x y.((Vehicle(x) & Transportation(y)) -> UsedFor(x,y))", "all x.(Vehicle(x) -> UsedForTransportation(x))", "all x.((Vehicle(x) & UsedForTransportation(x)) -> UsedForTransportation(x))", "all x y z.((Vehicle(x) & Transportation(y) & Transportation(z)) -> UsedFor(x,y,z))", "all x y.((Vehicle(x) & Transportation(y)) -> UsedForTransportation(x,y))", "all x y.((Vehicle(x) & UsedForTransportation(x)) -> UsedForTransportation(y))", "all x y.((Vehicle(x) & Transport(y) & UsedFor(x,y)) -> UsedFor(x,y))", "all x y z.((Vehicle(x) & Transportation(y) & Transportation(z)) -> UsedFor(x,y,z))", "all x.(Vehicle(x) -> UsedForTransportation(x))", "exists x.(Vehicle(x) & UsedForTransportation(x))", "exists x.(Vehicle(x) & UsedForTransportation(x))", "exists x.(Vehicle(x) & UsedForTransportation(x))"]}
{"id": "eqasc_validation_17", "nl": "Transportation moves people and goods from one place to another.", "fol": "", "prediction": ["all x y z.((Transportation(x) & Person(y) & Good(z)) -> MovesFromPlaceToPlace(x,y,z))", "all x y.((Transportation(x) & Place(y)) -> MovesPeopleAndGoods(x,y))", "all x y.((Transportation(x) & Person(y) & Good(y)) -> MovesFromPlaceToPlace(x,y))", "all x y z.((Transportation(x) & Person(y) & Good(z)) -> MovesFromOnePlaceToAnother(x,y,z))", "all x.(Transportation(x) -> MovesPeopleAndGoods(x))", "all x.(Transportation(x) -> (MovesPeopleAndGoods(x) & FromOnePlaceToAnother(x)))", "all x y z.((Transportation(x) & Person(y) & Good(z)) -> MovesFromPlaceToPlace(x,y,z))", "all x.(Transportation(x) -> MovesPeopleAndGoodsFromOnePlaceToAnother(x))", "all x.(Transportation(x) -> MovesPeopleAndGoods(x))", "(MovesPeopleAndGoods(Transportation))", "all x y.((Transportation(x) & Place(y)) -> MovesPeopleAndGoods(x,y))", "all x y z.((Transportation(x) & Person(y) & Good(z) & Place(w)) -> MovesFromTo(x,y,z,w))", "all x y.((Transportation(x) & Person(y) & Good(y)) -> MovesFromPlaceToPlace(x,y))", "(MovesPeopleAndGoods(Transportation))", "all x.(Transportation(x) -> MovesPeopleAndGoodsFromOnePlaceToAnother(x))", "all x y z.((Transportation(x) & Person(y) & Good(z)) -> MovesFromOnePlaceToAnother(x,y,z))"]}
{"id": "eqasc_validation_18", "nl": "Vehicles are used to move people and goods.", "fol": "", "prediction": ["all x.(Vehicle(x) -> (MovesPeople(x) & MovesGoods(x)))", "all x y.((Vehicle(x) & Person(y) & Good(y)) -> Moves(x,y))", "all x.(Vehicle(x) -> (MovesPeople(x) & MovesGoods(x)))", "all x y z.((Vehicle(x) & Person(y) & Good(z)) -> Moves(x,y,z))", "all x y.((Vehicle(x) & Person(y)) -> MovesGoods(x,y))", "all x.(Vehicle(x) -> (UsedToMove(x) & MovesPeopleAndGoods(x)))", "all x y.((Vehicle(x) & Person(y) & Good(y)) -> UsedToMove(x,y))", "all x.(Vehicle(x) -> (MovesPeople(x) & MovesGoods(x)))", "all x y z.((Vehicle(x) & Person(y) & Good(z)) -> UsedToMove(x,y,z))", "all x.(Vehicle(x) -> (Movement(x) & MovesPeople(x) & MovesGoods(x)))", "all x.(Vehicle(x) -> (UsedToMove(x) & MovesPeopleAndGoods(x)))", "all x y.((Vehicle(x) & Person(y) & Good(y)) -> Moves(x,y))", "all x.(Vehicle(x) -> (MovesPeople(x) & MovesGoods(x)))", "exists x.(Vehicle(x) & MovesPeople(x) & MovesGoods(x))", "exists x.(Vehicle(x) & UsedToMove(x,people,goods))", "all x.(Vehicle(x) -> MovesPeopleAndGoods(x))"]}
{"id": "eqasc_validation_19", "nl": "Passenger vehicles are the primary mode of transportation.", "fol": "", "prediction": ["all x.(PassengerVehicle(x) -> PrimaryModeOfTransportation(x))", "all x y.((PassengerVehicle(x) & PrimaryModeOfTransportation(y)) -> PrimaryModeOfTransportation(x,y))", "(PrimaryModeOfTransportation(passengerVehicle)", "all x.(PassengerVehicle(x) -> PrimaryModeOfTransportation(x))", "all x y.((PassengerVehicle(x) & Car(y)) -> PrimaryModeOfTransportation(x,y))", "(PrimaryModeOfTransportation(passengerVehicle)", "all x.(PassengerVehicle(x) -> PrimaryModeOfTransportation(x))", "all x y.((PassengerVehicle(x) & PrimaryModeOfTransportation(y)) -> PrimaryModeOfTransportation(x,y))", "all x y.((PassengerVehicle(x) & TransportMode(y)) -> PrimaryModeOfTransportation(x,y))", "all x y.((PassengerVehicle(x) & ModeOfTransportation(y)) -> PrimaryModeOfTransportation(x,y))", "all x.(PassengerVehicle(x) -> PrimaryModeOfTransportation(x))", "all x.(PassengerVehicle(x) -> PrimaryModeOfTransportation(x))", "all x.(PassengerVehicle(x) -> PrimaryTransportation(x))", "all x.(PassengerVehicle(x) -> PrimaryModeOfTransportation(x))", "all x.(PassengerVehicle(x) -> PrimaryTransportation(x))", "all x.(PassengerVehicle(x) -> PrimaryModeOfTransportation(x))"]}
{"id": "eqasc_validation_20", "nl": "passenger cars are used for transportation", "fol": "", "prediction": ["all x.(PassengerCar(x) -> UsedForTransportation(x))", "all x y.((PassengerCar(x) & Transportation(y)) -> UsedFor(x,y))", "all x y z.((PassengerCar(x) & Car(y) & Transportation(z)) -> UsedFor(x,y,z))", "all x.(PassengerCar(x) -> UsedForTransportation(x))", "(all x.(PassengerCar(x) -> UsedForTransportation(x)))", "all x y.((PassengerCar(x) & Transportation(y)) -> UsedFor(x,y))", "all x y z.((PassengerCar(x) & Car(y) & Transportation(z)) -> UsedFor(x,y,z))", "all x y.((PassengerCar(x) & Transportation(y)) -> UsedForTransportation(x,y))", "all x y.((PassengerCar(x) & Car(y) & UsedForTransportation(x,y)) -> UsedForTransportation(x,y))", "all x.(PassengerCar(x) -> UsedForTransportation(x))", "all x.(PassengerCar(x) -> (UsedForTransportation(x) & UsedForTransportation(x)))", "all x y z.((PassengerCar(x) & Transportation(y) & Transportation(z)) -> UsedFor(x,y,z))", "all x.(PassengerCar(x) -> UsedForTransportation(x))", "all x.(PassengerCar(x) -> (UsedForTransportation(x) & Transported(x)))", "all x.(PassengerCar(x) -> UsedForTransportation(x))", "all x.(PassengerCar(x) -> UsedForTransportation(x))"]}
{"id": "eqasc_validation_21", "nl": "Trailers and boats are counted as a private vehicles.", "fol": "", "prediction": ["all x.((Trailer(x) | Boat(x)) -> PrivateVehicle(x))", "all x y.((Trailer(x) & Boat(y)) -> PrivateVehicle(x))", "all x.((Trailer(x) | Boat(x)) -> PrivateVehicle(x))", "(privateVehicle(trailers,trailers) & privateVehicle(boats,trailers))", "all x.((Tower(x) | Boat(x)) -> PrivateVehicle(x))", "all x y.((Trailer(x) & Boat(y)) -> PrivateVehicle(x))", "all x.((Trailer(x) | Boat(x)) -> PrivateVehicle(x))", "all x.(PrivateVehicle(x) -> (Trailers(x) | Boats(x)))", "all x y.((Trailer(x) & Boat(y)) -> PrivateVehicle(x))", "all x.((Trailer(x) | Boat(x)) -> PrivateVehicle(x))", "all x.((Trailer(x) & Boat(x)) -> PrivateVehicle(x))", "all x.((Trailer(x) | Boat(x)) -> PrivateVehicle(x))", "all x y.((Trailer(x) & Boat(y)) -> PrivateVehicle(x))", "all x.((Towable(x) & Boat(x)) -> PrivateVehicle(x))", "all x y.((Towable(x) & Boat(y)) -> PrivateVehicle(x,y))", "all x.((Trailer(x) | Boat(x)) -> PrivateVehicle(x))"]}
{"id": "eqasc_validation_22", "nl": "Trailers and boats are used for transportation.", "fol": "", "prediction": ["all x.((Trailer(x) | Boat(x)) -> UsedForTransportation(x))", "all x y.((Trailer(x) & Boat(y)) -> UsedForTransportation(x))", "(UsedForTransportation(trailers,trailers) & UsedForTransportation(boats,trailers))", "all x.((Trailer(x) | Boat(x)) -> UsedForTransportation(x))", "(all x.(Trailer(x) -> UsedForTransportation(x)) & all y.(Boat(y) -> UsedForTransportation(y)))", "all x y.((Trailer(x) & Boat(y)) -> UsedForTransportation(x,y))", "all x y z.((Trailer(x) & Boat(y) & Trailer(z)) -> UsedForTransportation(x,y,z))", "(UsedForTransportation(trailers,trailers) & UsedForTransportation(boats,trailers))", "all x.((Trailer(x) | Boat(x)) -> UsedForTransportation(x))", "all x y.((Trailer(x) & Boat(y)) -> UsedForTransportation(x))", "(UsedForTransportation(trailers,trailers) & UsedForTransportation(boats,trailers))", "exists x.(Trailer(x) & Boat(x) & UsedForTransportation(x))", "all x.((Trailer(x) | Boat(x)) -> UsedForTransportation(x))", "all x y.((Trailer(x) & Boat(y)) -> UsedForTransportation(x,y))", "all x.(Trailer(x) & Boat(x))", "all x.((Trailer(x) | Boat(x)) -> UsedForTransportation(x))"]}
{"id": "eqasc_validation_23", "nl": "Cars and busses are both examples of vehicles.", "fol": "", "prediction": ["all x.((Car(x) | Bus(x)) -> Vehicle(x))", "all x y.((Car(x) & Bus(y)) -> (Vehicle(x) & Vehicle(y)))", "all x.(Vehicle(x) -> (Car(x) | Bus(x)))", "(ExampleOfVehicle(car) & ExampleOfVehicle(bus))", "(Vehicle(car) & Vehicle(bus))", "all x.((Car(x) | Bus(x)) -> Vehicle(x))", "((Car(x) | Bus(x))) & Vehicle(x))", "all x y.((Car(x) & Bus(y)) -> Vehicle(x))", "(Vehicle(car) & Vehicle(bus))", "all x.(Vehicle(x) -> (Car(x) | Bus(x)))", "all x y.((Car(x) & Bus(y)) -> (Vehicle(x) | Vehicle(y)))", "all x.((Car(x) | Bus(x)) -> Vehicle(x))", "(Vehicle(car) & Vehicle(buss))", "(Vehicle(car) | Vehicle(bus))", "all x.((Car(x) | Buss(x)) -> Vehicle(x))", "exists x.(Car(x) & Bus(x) & Vehicle(x))"]}
{"id": "eqasc_validation_24", "nl": "Cars and busses are used for transportation", "fol": "", "prediction": ["all x y.((Car(x) & Bus(y)) -> (UsedForTransportation(x,y) & UsedForTransportation(y)))", "all x y z.((Car(x) & Bus(y) & Transportation(z)) -> (UsedForTransportation(x,y,z) & UsedForTransportation(y,z)))", "all x.((Car(x) | Bus(x)) -> UsedForTransportation(x))", "all x y.((Car(x) & Bus(y)) -> UsedForTransportation(x,y))", "all x y z.((Car(x) | Bus(y) & Car(z)) -> UsedForTransportation(x,y,z))", "all x.((Car(x) | Bus(x)) -> UsedForTransportation(x))", "all x y.((Car(x) | Bus(y)) -> UsedForTransportation(x,y))", "(all x.(Car(x) -> UsedForTransportation(x)) & all y.(Bus(y) -> UsedForTransportation(y)))", "(Transportation(cars) & Transportation(busses))", "all x y z.((Car(x) & Bus(y) & Transportation(z)) -> (UsedForTransportation(x,z) | UsedForTransportation(y,z)))", "(Transportation(Cars) & Transportation(Busses))", "all x.((Car(x) | Bus(x)) -> UsedForTransportation(x))", "all x y.((Car(x) & Bus(y)) -> (UsedForTransportation(x,y) & UsedForTransportation(y)))", "all x.((Car(x) | Bus(x)) -> UsedForTransportation(x))", "all x.((Car(x) | Bus(x)) -> UsedForTransportation(x))", "all x.((Car(x) | Bus(x)) -> UsedForTransportation(x))"]}
{"id": "eqasc_validation_25", "nl": "Boats are used for transportation. ", "fol": "", "prediction": ["all x.(Boat(x) -> UsedForTransportation(x))", "all x y.((Boat(x) & Transportation(y)) -> UsedFor(x,y))", "all x.(Boat(x) -> UsedForTransportation(x))", "all x y.((Boat(x) & Transportation(y)) -> UsedFor(x,y))", "all x.(Boat(x) -> UsedForTransportation(x))", "all x y z.((Boat(x) & Transportation(y) & Transportation(z)) -> UsedFor(x,y,z))", "all x y.((Boat(x) & Transporter(y)) -> UsedFor(x,y))", "all x.(Boat(x) -> UsedForTransportation(x))", "all x y.((Boat(x) & Transportation(y)) -> UsedFor(x,y))", "all x.(Boat(x) -> UsedForTransportation(x))", "exists x.(Bus(x) & UsedForTransportation(x))", "all x y.((Boat(x) & Transporter(y)) -> UsedFor(x,y))", "all x.(Boat(x) -> UsedForTransportation(x))", "all x.(Boat(x) -> UsedForTransportation(x))", "exists x.(Boat(x) & Transport(x))", "all x.(Boat(x) -> UsedForTransportation(x))"]}
{"id": "eqasc_validation_26", "nl": "Most bigger cities require efficient and adequate public transport systems.", "fol": "", "prediction": ["all x.((City(x) & Bigger(x)) -> RequiresEfficientPublicTransport(x))", "(MoreLargerCity(x) -> RequiresEfficientPublicTransport(x))", "all x.(LargerCity(x) -> (RequiresEfficientPublicTransport(x) & AdequatePublicTransport(x)))", "all x y.((MajorCity(x) & BiggerCity(y)) -> RequiresEfficientPublicTransport(x,y))", "(all x.(LargerCity(x) -> RequiresEfficientPublicTransport(x)))", "(MoreLargerCitiesRequiresEfficientPublicTransportation(Mountains) & AdequatePublicTransportation(Mountains))", "all x.(MoreBiggerCity(x) -> (RequiresEfficientPublicTransport(x) & AdequatePublicTransport(x)))", "all x.((City(x) & Bigger(x)) -> RequiresEfficientPublicTransport(x))", "-all x.(LargerCity(x) -> RequiresEfficientPublicTransport(x))", "all x y.((LargerCity(x) & City(y)) -> RequiresEfficientPublicTransport(x,y))", "all x y.((MajorCity(x) & BiggerCity(y)) -> (RequiresEfficientPublicTransport(x,y) & AdequatePublicTransport(x,y)))", "all x.(BiggerCity(x) -> (RequiresEfficientPublicTransport(x) & AdequatePublicTransport(x)))", "all x.((City(x) & Larger(x)) -> (RequiresEfficientPublicTransport(x) & AdequatePublicTransport(x)))", "(all x.(BiggerCity(x) -> RequiresEfficientPublicTransport(x)))", "all x.((City(x) & Bigger(x)) -> RequiresEfficientPublicTransport(x) & AdequatePublicTransport(x))", "all x.(LargerCity(x) -> (RequiresEfficientPublicTransport(x) & RequiresAdequatePublicTransport(x)))"]}
{"id": "eqasc_validation_27", "nl": "most bigger cities require vehicles", "fol": "", "prediction": ["all x.((City(x) & Larger(x)) -> RequiresVehicles(x))", "all x y.((City(x) & Bigger(y)) -> RequiresVehicles(x,y))", "(MoreLargerCity(x) -> RequiresVehicles(x))", "-all x.(LargerCity(x) -> RequiresVehicles(x))", "all x y.((LargerCity(x) & LargerCity(y)) -> RequiresVehicles(x,y))", "most of the biggerCity(s) & RequiresVehicles(s))", "all x.((City(x) & Bigger(x)) -> RequiresVehicles(x))", "(MostLargerCitiesRequiresVehicles(MostLargerCities)", "all x.(LargerCity(x) -> RequiresVehicles(x))", "all x y.((City(x) & Larger(y)) -> RequiresVehicles(x,y))", "all x.(MoreLargerCity(x) -> RequiresVehicles(x))", "(MostLargerCitiesRequiresVehicles(x) & LargerCitiesRequiresVehicles(x))", "(MoreLargerCity(x) & RequiresVehicles(x))", "most of the largerCityRequiresVehicles(cities,y)", "all x.((City(x) & Larger(x)) -> RequiresVehicles(x))", "all x.((City(x) & Bigger(x)) -> RequiresVehicles(x))"]}
{"id": "eqasc_validation_28", "nl": "All traffic vehicles are Air Planes.", "fol": "", "prediction": ["all x.(TrafficVehicle(x) -> AirPlane(x))", "all x.(TrafficVehicle(x) -> AirPlane(x))", "(all x.(TrafficVehicle(x) -> AirPlane(x))", "all x y.((TrafficVehicle(x) & AirPlane(y)) -> AirPlane(x))", "all x.(TrafficVehicle(x) -> AirPlane(x))", "all x y.((TrafficVehicle(x) & AirPlane(y)) -> AirPlane(x))", "all x.(TrafficVehicle(x) -> AirPlane(x))", "(AirPlanes(trafficvehicle)", "all x.(TrafficVehicle(x) -> AirPlane(x))", "all x.(TrafficVehicle(x) -> AirPlane(x))", "all x.(TrafficVehicle(x) -> AirPlane(x))", "all x.(TrafficVehicle(x) -> AirPlane(x))", "all x.(TrafficVehicle(x) -> AirPlane(x))", "all x.(TrafficVehicle(x) -> AirPlane(x))", "all x.(TrafficVehicle(x) -> AirPlane(x))", "All x.(TrafficVehicle(x) -> Airplane(x))"]}
{"id": "eqasc_validation_29", "nl": "a plane is used for transportation", "fol": "", "prediction": ["all x y.((Plane(x) & Transportation(y)) -> UsedFor(x,y))", "all x.(Plane(x) -> UsedForTransportation(x))", "all x y z.((Plane(x) & Transportation(y) & Transportation(z)) -> UsedFor(x,y,z))", "all x.((Plane(x) & UsedForTransportation(x)) -> UsedForTransportation(x))", "all x y.((Plane(x) & Transportation(y)) -> UsedFor(x,y))", "all x.(Plane(x) -> UsedForTransportation(x))", "all x y z.((Plane(x) & Transportation(y) & Transportation(z)) -> UsedFor(x,y,z))", "all x y.((Plane(x) & Transportation(y)) -> UsedForTransportation(x,y))", "all x.(Plane(x) -> UsedForTransportation(x))", "all x y z.((Plane(x) & Transportation(y) & Transportation(z)) -> UsedFor(x,y,z))", "all x y.((Plane(x) & Transporter(y)) -> UsedFor(x,y))", "all x y.((Plane(x) & Transportation(y) & UsedFor(x,y)) -> UsedFor(x,y))", "all x.(Plane(x) -> UsedForTransportation(x))", "exists x.(Plane(x) & UsedForTransportation(x))", "exists x.(Plane(x) & UsedForTransportation(x))", "exists x.(Plane(x) & UsedForTransportation(x))"]}
{"id": "eqasc_validation_30", "nl": "Cars are vehicles and trucks are vehicles.", "fol": "", "prediction": ["all x y.((Car(x) & Truck(y)) -> (Vehicle(x) & Vehicle(y)))", "(all x.(Car(x) -> Vehicle(x)) & all y.(Truck(y) -> Vehicle(y)))", "all x.(Car(x) -> Vehicle(x) & Truck(x) -> Vehicle(x))", "(all x y.((Car(x) & Truck(y)) -> Vehicle(x)) & ((Car(x) & Truck(y)) -> Vehicle(y)))", "all x y.((Car(x) & Truck(y)) -> (Vehicle(x) & Vehicle(y)))", "(all x.(Car(x) -> Vehicle(x)) & all y.(Truck(y) -> Vehicle(y)))", "(all x y.((Car(x) & Truck(y)) -> Vehicle(x)) & all z w.((Car(z) & Truck(w)) -> Vehicle(w)))", "all x.(Car(x) -> Vehicle(x) & Truck(x) -> Vehicle(x))", "all x y.((Car(x) & Truck(y)) -> (Vehicle(x) & Vehicle(y)))", "(all x.(Car(x) -> Vehicle(x)) & all y.(Truck(y) -> Vehicle(y)))", "all x y.(Car(x) & Truck(y)) -> (Vehicle(x) | Vehicle(y)))", "all x.(Car(x) -> Vehicle(x) & Truck(x) -> Vehicle(x))", "all x y.((Car(x) & Truck(y)) -> (Vehicle(x) | Vehicle(y)))", "(all x.(Car(x) -> Vehicle(x)) & all y.(Truck(y) -> Vehicle(y)))", "all x y.((Car(x) & Truck(y)) -> (Vehicle(x) & Vehicle(y)))", "(all x.(Car(x) -> Vehicle(x)) & all y.(Truck(y) -> Vehicle(y)))"]}
{"id": "eqasc_validation_31", "nl": "trucks are used for transportation", "fol": "", "prediction": ["all x.(Truck(x) -> UsedForTransportation(x))", "all x y.((Truck(x) & Truck(y)) -> UsedForTransportation(x,y))", "all x.(Truck(x) -> UsedForTransportation(x))", "all x y z.((Truck(x) & Truck(y) & Transportation(z)) -> UsedFor(x,y,z))", "all x y.((Truck(x) & Truck(y)) -> UsedForTransportation(x,y))", "(all x.(Truck(x) -> UsedForTransportation(x)))", "all x.(Lift(x) -> UsedForTransportation(x))", "all x.(Truck(x) -> UsedForTransportation(x))", "all x y z.((Truck(x) & Truck(y) & Transportation(z)) -> UsedFor(x,y,z))", "all x y.((Truck(x) & Truck(y)) -> UsedForTransportation(x,y))", "(all x.(Truck(x) -> UsedForTransportation(x)))", "all x.(Truck(x) -> (UsedForTransportation(x) & UsedForTransportation(x)))", "all x.(Truck(x) -> UsedForTransportation(x))", "all x y.((Truck(x) & Truck(y)) -> UsedForTransportation(x,y))", "all x.(Truck(x) -> UsedForTransportation(x))", "all x.(LKW(x) -> UsedForTransportation(x))"]}
{"id": "eqasc_validation_32", "nl": "A car is used for transportation.", "fol": "", "prediction": ["all x.(Car(x) -> UsedForTransportation(x))", "all x.(Car(x) -> UsedForTransportation(x))", "all x y.((Car(x) & Transportation(y)) -> UsedFor(x,y))", "all x.(Car(x) -> UsedForTransportation(x))", "all x y.((Car(x) & Transportation(y) & UsedFor(x,y)) -> UsedFor(x,y))", "all x y.((Car(x) & Transportation(y)) -> UsedFor(x,y))", "all x.(Car(x) -> UsedForTransportation(x))", "all x y.((Car(x) & Transportation(y) & UsedFor(x,y)) -> UsedFor(x,y))", "all x.(Car(x) -> UsedForTransportation(x))", "all x.(Car(x) -> UsedForTransportation(x))", "all x y.((Car(x) & Transporter(y)) -> UsedFor(x,y))", "all x.(Car(x) -> UsedForTransportation(x))", "exists x.(Car(x) & UsedForTransportation(x))", "exists x.(Car(x) & Transport(x))", "exists x.(Car(x) & UsedForTransportation(x))", "exists x.(Car(x) & UsedForTransportation(x))"]}
{"id": "eqasc_validation_33", "nl": "Motorcycles are, for the most part, single occupant vehicles.", "fol": "", "prediction": ["all x.(Motorcycle(x) -> SingleOccupantVehicle(x))", "(SingleOccupant(motocycle) -> ForMostPart(motocycle))", "all x.(Motorcycle(x) -> (SingleOccupant(x) & -SingleOccupant(x)))", "all x.(Motorcycle(x) -> SingleOccupantVehicle(x))", "(SingleOccupant(Motorcycle) & ForMostPart(Motorcycle))", "all x y.((Motorcycle(x) & SingleOccupant(y)) -> SingleOccupant(x))", "(SingleOccupant(motocycle) & SingleOccupant(motocycle))", "(SingleOccupant(Motorcycle) -> SingleOccupant(Motorcycle))", "all x.(Motorcycle(x) -> (SingleOccupantVehicle(x) & ForMostPart(x)))", "all x.(Motorcycle(x) -> SingleOccupant(x))", "all x y.((Motorcycle(x) & SingleOccupant(y)) -> Vehicle(x))", "all x.(Motorcycle(x) -> (SingleOccupant(x) & ForMostPart(x)))", "all x.(Motorcycle(x) -> SingleOccupantVehicle(x))", "all x.(Motorcycle(x) -> SingleOccupantVehicle(x))", "all x.(Motorcycle(x) -> SingleOccupantVehicle(x))", "all x.(Motorcycle(x) -> SingleOccupant(x))"]}
{"id": "eqasc_validation_34", "nl": "motorcycles are used for transportation", "fol": "", "prediction": ["all x.(Motorcycle(x) -> UsedForTransportation(x))", "all x y.((Motorcycle(x) & Transportation(y)) -> UsedFor(x,y))", "all x y z.((Motorcycle(x) & Transportation(y) & Transportation(z)) -> UsedFor(x,y,z))", "(all x.(Motorcycle(x) -> UsedForTransportation(x)))", "all x.(Motorcycle(x) -> UsedForTransportation(x))", "all x y.((Motorcycle(x) & Transportation(y)) -> UsedFor(x,y))", "(all x.(Motorcycle(x) -> UsedForTransportation(x)))", "all x y z.((Motorcycle(x) & Transportation(y) & Transportation(z)) -> UsedFor(x,y,z))", "all x.(Motorcycle(x) -> UsedForTransportation(x))", "all x y.((Motorcycle(x) & Transportation(y)) -> UsedFor(x,y))", "all x y.((Motorcycle(x) & Transporter(y)) -> UsedFor(x,y))", "all x y.((Motorcycle(x) & Transportation(y) & UsedFor(x,y)) -> UsedFor(x,y))", "all x.(Motorcycle(x) -> UsedForTransportation(x))", "all x.(Motorcycle(x) -> UsedForTransportation(x))", "all x.(Motorcycle(x) -> UsedForTransportation(x))", "all x.(Motorcycle(x) -> UsedForTransportation(x))"]}
{"id": "eqasc_validation_35", "nl": "If in a moving car, pull over and stop as quickly as safety permits, but stay in the vehicle.", "fol": "", "prediction": ["all x.((MovingCar(x) & PullOver(x) & StopAsQuicklyAsSafetyPermits(x) & StayInVehicle(x)) -> SafetyPermits(x))", "all x y.((MovingCar(x) & PullOver(x,y) & StopAsQuicklyAsSafetyPermits(x)) -> StayInVehicle(y))", "all x.(MovingCar(x) -> (PutOver(x) & StopAsQuicklyAsSafetyPermits(x) & StayInVehicle(x)))", "(MovingCar(x) & PullOverAndStop(x) & SafetyPermits(x) & StayInVehicle(x))", "all x y.((MovingCar(x) & PullOver(y) & Stop(y)) -> (StayInVehicle(y) & StayInVehicle(y)))", "all x.((MovingCar(x) & PullOver(x) & StopAsQuicklyAsSafetyPermits(x) & StayInVehicle(x)) -> -StayInVehicle(x))", "all x y z.((MovingCar(x) & PullOver(y) & Stop(z)) -> (Stops(y,z) & SafetyPermits(y,z) & StaysInVehicle(z)))", "all x y.((MovingCar(x) & PullOver(x,y) & Stop(x,y)) -> (StayInVehicle(x) & StayInVehicle(y)))", "(MovingCar(x) & PullOver(x) & StopAsQuicklyAsSafetyPermits(x) & StayInVehicle(x))", "exists x.(MovingCar(x) & PullOver(x) & StopAsQuicklyAsSafetyPermits(x) & StayInVehicle(x))", "all x.(MovingCar(x) -> (PullOver(x) & StopAsQuicklyAsSafetyPermits(x) & StayInVehicle(x)))", "all x.((MovingCar(x) & PullOver(x) & StopAsQuicklyAsSafetyPermits(x) & StayInVehicle(x)) -> StopAsQuicklyAsSafetyPermits(x))", "all x.(MovingCar(x) -> (PutsOver(x) & StopsQuickly(x) & StaysInVehicle(x)))", "all x y z.((MovingCar(x) & PullOver(x,y) & Stop(y,z)) -> (StayInVehicle(z) & SafetyPermits(x,z)))", "all x y.((MovingCar(x) & PullOver(y) & Stop(y) & AsSafetyPermits(x,y)) -> StayInVehicle(x,y))", "all x.((MovingCar(x) & PullOver(x) & StopQuickly(x) & StayInVehicle(x)) -> SafetyPermits(x))"]}
{"id": "eqasc_validation_36", "nl": "Moving cars are used for transportation", "fol": "", "prediction": ["all x y.((MovingCar(x) & Transportation(y)) -> UsedFor(x,y))", "all x.(MovingCar(x) -> UsedForTransportation(x))", "all x y z.((Car(x) & MovingCar(y) & Transportation(z)) -> UsedFor(x,y,z))", "all x y.((MovingCar(x) & Transportation(y)) -> UsedFor(x,y))", "all x.(MovingCar(x) -> UsedForTransportation(x))", "all x y z.((MovingCar(x) & Car(y) & Transportation(z)) -> UsedFor(x,y,z))", "(all x.(MovingCar(x) -> UsedForTransportation(x)))", "all x.((MovingCar(x) & Transportation(x)) -> UsedFor(x,y))", "all x y z.((Car(x) & Moving(y) & Car(z)) -> UsedForTransportation(x,y,z))", "all x.(MovingCar(x) -> UsedForTransportation(x))", "all x y.((MovingCar(x) & Transportation(y)) -> UsedFor(x,y))", "all x y.((MovingCar(x) & Car(y)) -> UsedForTransportation(x,y))", "all x y.((MovingCar(x) & TransportingCar(y)) -> UsedFor(x,y))", "all x.(MovingCar(x) -> UsedForTransportation(x))", "all x.(MovingCar(x) -> UsedForTransportation(x))", "all x.(MovingCar(x) -> UsedForTransportation(x))"]}
{"id": "eqasc_validation_37", "nl": "Transportation causes most of the air pollution in and around Vancouver.", "fol": "", "prediction": ["all x y.((Transportation(x) & Vancouver(y)) -> CausesAirPollution(x,y))", "all x.(Transportation(x) -> CausesAirPollution(x))", "all x y z.((Transportation(x) & AirPollution(y) & Vancouver(z)) -> CausesInAndAround(x,y,z))", "(CausesAirPollutionInVancouver(Transportation) & CausesAirPollutionAroundVancouver(Transportation))", "(CausesAirPollution(Transportation) & InAndAroundVancouver(Transportation))", "all x.((Transportation(x) & AirPollution(x)) -> CausesInAndAroundVancouver(x))", "(AirPollutionInVancouver(Transportation) & CausesMost(Transportation))", "all x y.((Transportation(x) & Vancouver(y)) -> CausesAirPollution(x,y))", "all x.(Transportation(x) -> CausesAirPollution(x))", "(CausesAirPollutionInVancouver(Transportation) & CausesAirPollutionAroundVancouver(Transportation))", "all x y z.((Transportation(x) & AirPollution(y) & Vancouver(z)) -> Causes(x,y,z))", "all x.((Transportation(x) & CausesAirPollution(x)) -> InAndAroundVancouver(x))", "all x.(Transportation(x) -> CausesAirPollution(x,Vancouver))", "all x.(Transportation(x) -> (CausesAirPollution(x) & InAndAroundVancouver(x)))", "all x y.((Transportation(x) & Vancouver(y)) -> CausesAirPollution(x,y))", "all x y.((Transportation(x) & Vancouver(y)) -> CausesAirPollution(x,y))"]}
{"id": "eqasc_validation_38", "nl": "a vehicle causes  air pollution", "fol": "", "prediction": ["all x.((Vehicle(x) & CausesAirPollution(x)) -> CausesAirPollution(x))", "all x y.((Vehicle(x) & AirPollution(y)) -> Causes(x,y))", "all x.(Vehicle(x) -> CausesAirPollution(x))", "all x y z.((Vehicle(x) & AirPollution(y) & AirPollution(z)) -> Causes(x,y,z))", "all x y.((Vehicle(x) & AirPollution(y)) -> Causes(x,y))", "all x y z.((Vehicle(x) & AirPollution(y) & AirPollution(z) & Causes(x,y,z)) -> Causes(x,y))", "exists an air pollution (air pollution) & causes(vehicle) & causes(vehicle,air))", "all x y.((Vehicle(x) & AirPollution(y) & Causes(x,y)) -> Causes(x,y))", "all x.((Vehicle(x) & CausesAirPollution(x)) -> AirPollution(x))", "all x.(Vehicle(x) -> CausesAirPollution(x))", "all x y.((Vehicle(x) & AirPollution(y) & Causes(x,y)) -> Causes(x,y))", "all x.((Vehicle(x) & CausesAirPollution(x)) -> AirPollution(x))", "all x.(Vehicle(x) -> CausesAirPollution(x))", "all x.((Vehicle(x) & CausesAirPollution(x)) -> CausesAirPollution(x))", "all x y.((Vehicle(x) & AirPollution(y) & Causes(x,y)) -> Causes(x,y))", "all x.(Vehicle(x) -> CausesAirPollution(x))"]}
{"id": "eqasc_validation_39", "nl": "Collar cells have tiny hairs that trap the particles.", "fol": "", "prediction": ["all x.(CollarCell(x) -> (TinyHairs(x) & TrapsParticles(x)))", "all x y.((CollarCell(x) & TinyHairs(y)) -> TrapsParticles(x,y))", "all x.(CollarCell(x) -> (HasTinyHairs(x) & TrapsParticles(x)))", "all x y z.((CollarCell(x) & TinyHair(y) & Particle(z)) -> Traps(x,y,z))", "all x.(CollarCell(x) -> (TinyHairs(x) & TrapsParticles(x)))", "all x y.((CollarCell(x) & TinyHairs(y)) -> TrapsParticles(x,y))", "all x.(CollarCell(x) -> (HasTinyHairs(x) & TrapsParticles(x)))", "exists x.(ColarCell(x) & TinyHairs(x) & TrapsParticles(x))", "all x y z.((CollarCell(x) & TinyHair(y) & Particle(z)) -> Traps(x,y,z))", "all x y.((CollarCell(x) & TinyHairs(y)) -> TrapsParticles(x,y))", "all x y.((CollarCell(x) & TinyHairs(y)) -> TrapsParticles(x,y))", "all x.(CollarCell(x) -> HasTinyHairs(x))", "all x.(CollarCell(x) -> (HasTinyHairs(x) & TrapsParticles(x)))", "all x y.((CollarCell(x) & TinyHairs(y)) -> TrapsParticles(x,y))", "all x.(CollarCell(x) -> HasTinyHairs(x))", "all x.(CollarCell(x) -> (HasTinyHairs(x) & TrapsParticles(x)))"]}
{"id": "eqasc_validation_40", "nl": "Collar cells or choanocytes are the work horses.", "fol": "", "prediction": ["all x.(WorkHorse(x) -> (CollarCells(x) | Choanocytes(x)))", "all x.((CollarCell(x) | Choanocyte(x)) -> WorkHorse(x))", "(WorkHorse(collarCells) & WorkHorse(choanocytes))", "all x y.((CollarCell(x) | Choanocyte(x)) -> WorkHorse(y))", "all x.(WorkHorse(x) -> (CollarCells(x) | Choanocytes(x)))", "all x.(WorkHorse(x) -> (CollarCells(x) | Choanocytes(x)))", "all x.((CollarCell(x) | Choanocyte(x)) -> WorkHorse(x))", "(WorkHorse(collarCells) & WorkHorse(choanocytes))", "all x y.((CollarCell(x) | Choanocyte(x)) -> WorkHorse(y))", "(WorkHorse(collarCells) | WorkHorse(choanocytes))", "all x.(WorkHop(x) -> (CollarCells(x) | Choanocytes(x)))", "all x y.((CollarCell(x) | Choanocyte(y)) -> WorkHorse(x,y))", "all x.((CollarCell(x) | Choanocyte(x)) -> WorkHorse(x))", "all x.(WorkHorse(x) -> (CollarCells(x) | Choanocytes(x)))", "all x y.((CollarCell(x) | Choanocyte(y)) -> WorkHorse(x,y))", "all x.((CollarCells(x) | Choanocytes(x)) -> WorkHorse(x))"]}
{"id": "eqasc_validation_41", "nl": "Choanocytes have tiny hairs that trap the particles.", "fol": "", "prediction": ["all x.(Choanocyte(x) -> (HasTinyHairs(x) & TrapsParticles(x)))", "all x.(Choanocyte(x) -> (TinyHairs(x) & TrapsParticles(x)))", "all x y.((Choanocyte(x) & TinyHairs(y)) -> TrapsParticles(x,y))", "(TinyHairs(choanocytes) & TrapsParticles(choanocytes))", "all x.(Choanocyte(x) -> (HasTinyHairs(x) & TrapsParticles(x)))", "all x y z.((Choanocyte(x) & TinyHair(y) & Particle(z)) -> Traps(x,y,z))", "all x.(Choanocyte(x) -> (TinyHairs(x) & TrapsParticles(x)))", "all x y.((Choanocyte(x) & TinyHairs(y)) -> TrapsParticles(x,y))", "all x y.((Choanocyte(x) & TinyHairs(y)) -> TrapsParticles(x,y))", "all x y z.((Choanocyte(x) & TinyHair(y) & Particle(z)) -> Traps(x,y,z))", "all x.(Choanocyte(x) -> (HasTinyHairs(x) & TrapsParticles(x)))", "all x.(Chocytic(x) -> (TinyHairs(x) & TrapsParticles(x)))", "all x.(Chocytic(x) -> (TinyHairs(x) & TrapsParticles(x)))", "all x y.((Choanocyte(x) & ToughHairs(y)) -> TrapsParticles(x,y))", "all x.(Choanocyte(x) -> HasTinyHairs(x))", "all x.(Choanocyte(x) -> (HasTinyHairs(x) & TrapsParticles(x)))"]}
{"id": "eqasc_validation_42", "nl": "Particles A particle is simply a very tiny piece of matter.", "fol": "", "prediction": ["all x.(Particle(x) -> (TinyPieceOfMatter(x) & VeryTinyPieceOfMatter(x)))", "(TinyPieceOfMatter(Particles) & VeryTinyPieceOfMatter(Particles))", "all x.(Particle(x) -> (TinyPieceOfMatter(x) & VeryTinyPieceOfMatter(x)))", "(Particle(particle) & VeryTiny(particle))", "all x.(Particle(x) -> (TinyMatter(x) & VeryTiny(x)))", "all x y.((Particle(x) & Particle(y)) -> (TinyPieceOfMatter(x,y)))", "all x.((Particle(x) & VeryTinyPieceOfMatter(x)) -> Particle(x))", "all x.(Particle(x) -> (TinyPieceOfMatter(x) & VeryTinyPieceOfMatter(x)))", "all x y.((Particle(x) & Particle(y)) -> (TinyPieceOfMatter(x) & VeryTiny(y)))", "all x.(Particle(x) -> VeryTinyPieceOfMatter(x))", "all x y.(Particle(x) -> (Particle(y) & VeryTiny(y)))", "all x.(Particle(x) -> (TinyMatter(x) & VeryTiny(x)))", "All x.((Particle(x) & TinyPieceOfMatter(x)) -> Particle(x))", "all x.((Particle(x) & VeryTinyPieceOfMatter(x)) -> Particle(x))", "All x.(Particle(x) -> (Particle(x) & VeryTinyPieceOfMatter(x)))", "all x.(Particle(x) -> VeryTinyPieceOfMatter(x))"]}
{"id": "eqasc_validation_43", "nl": "Collar cells have tiny hairs that trap very tiny pieces of matter", "fol": "", "prediction": ["all x.(CollarCell(x) -> (TinyHairs(x) & TrapsTinyMatter(x)))", "all x y.((CollarCell(x) & TinyHairs(y)) -> TrapsTinyMatter(x,y))", "all x y z.((CollarCell(x) & TinyHairs(y) & TinyMatter(z)) -> TrapsTinyPiecesOfMatter(x,y,z))", "all x.(CollarCell(x) -> (HasTinyHairs(x) & TrapsTinyMatter(x)))", "all x y.((CollarCell(x) & TinyHairs(y)) -> TrapsTinyPiecesOfMatter(x,y))", "all x.(CollarCell(x) -> (TinyHairs(x) & TrapsTinyMatter(x)))", "all x.(CollarCell(x) -> (TinyHairs(x) & TrapsTinyPiecesOfMatter(x)))", "all x y z.((CollarCell(x) & TinyHairs(y) & TinyMatter(z)) -> TrapsTinyPiecesOfMatter(x,y,z))", "all x y z.((CollarCell(x) & TinyHairs(y) & TinyMatter(z)) -> TrapsTogether(x,y,z))", "all x y.((CollarCell(x) & TinyHairs(y)) -> TrapsTinyMatter(x,y))", "all x.(CollarCell(x) -> (HasTinyHairs(x) & TrapsTinyPiecesOfMatter(x)))", "all x y.((CollarCell(x) & TinyHairs(y)) -> TrapsTinyMatter(x,y))", "all x.(CollarCell(x) -> (TinyHairs(x) & TrapsTinyMatter(x)))", "all x.(CollarCell(x) -> (TinyHairs(x) & TrapsTinyMatter(x)))", "all x.(CollarCell(x) -> (HasTinyHairs(x) & TrapsTinyPiecesOfMatter(x)))", "all x.(CellularCell(x) -> (TinyHairs(x) & TrapsTinyPiecesOfMatter(x)))"]}
{"id": "eqasc_validation_44", "nl": "Some cells have tiny hair-like fibers that are called flagella.", "fol": "", "prediction": ["exists x.(Cell(x) & TinyHairLikeFibers(x) & Flagella(x))", "exists x.(Cell(x) & TinyHairLikeFibers(x) & Flagella(x))", "exists x.(Cell(x) & TickyHairLikeFilms(x) & Flagella(x))", "exists x.(Cell(x) & TinyHairLikeFilms(x) & Flagella(x))", "all x y.((Cell(x) & TinyHairLikeFibers(x)) -> Flagella(y))", "exists x.(Cell(x) & HasTinyHairLikeFibers(x) & Flagella(x))", "exists x.(Cell(x) & TickyHairLikeFilms(x) & Flagella(x))", "exists x y.(Cell(x) & TinyHairLikeFibers(y) & Flagella(x))", "exists x y.(Cell(x) & TinyHairLikeFilms(y) & Flagella(x))", "exists x.(Cell(x) & TinyHairLikeFibers(x) & Flagella(x))", "exists x.(Cell(x) & TinyHairLikeFibers(x) & Flagella(x))", "exists x.(Cell(x) & HasTinyHairLikeFerms(x) & Flagella(x))", "exists x.(Cell(x) & TickyHairLikeFerms(x) & Flagella(x))", "exists x.(Cell(x) & TinyHairLikeFerms(x) & Flagella(x))", "exists x.(Cell(x) & TweenHairLikeFibers(x) & Flagella(x))", "exists x.(Cell(x) & HasTinyHairLikeFibers(x) & Flagella(x))"]}
{"id": "eqasc_validation_45", "nl": "Collar cells have flagella that trap the particles.", "fol": "", "prediction": ["all x.(CollarCell(x) -> HasFlagella(x))", "all x.(CollarCell(x) -> (HasFlagella(x) & TrapsParticles(x)))", "all x y.((CollarCell(x) & Particle(y)) -> HasFlagella(x,y))", "all x y z.((CollarCell(x) & Flagella(y) & Particle(z)) -> Traps(y,z))", "all x.(CollarCell(x) -> HasFlagella(x))", "all x y.((CollarCell(x) & Particle(y)) -> HasFlagella(x,y))", "all x.(CollarCell(x) -> (HasFlagella(x) & TrapsParticles(x)))", "all x y.((CollarCell(x) & Particle(y)) -> HasFlagella(x,y))", "all x y.((CollarCell(x) & Flagella(y)) -> TrapsParticles(x,y))", "all x.(CollarCell(x) -> exists y.(Flagella(y) & Traps(x,y)))", "all x.(Cell(x) -> HasFlagella(x))", "all x.(CollarCell(x) -> (HasFlagella(x) & TrapsParticles(x)))", "all x.(CollarCell(x) -> HasFlagella(x))", "exists x.(CollaredCell(x) & Flagella(x) & TrapsParticles(x))", "all x y.((CollarCell(x) & Particle(y)) -> Flagella(x,y))", "all x.(CollarCell(x) -> HasFlagella(x))"]}
{"id": "eqasc_validation_46", "nl": "Collar cells line the interior chambers.", "fol": "", "prediction": ["all x y.((CollarCell(x) & InteriorChamber(y)) -> Lines(x,y))", "all x.(CollarCell(x) -> LinesInteriorChambers(x))", "all x y z.((CollarCell(x) & InteriorChamber(y) & InteriorChamber(z)) -> Lines(x,y,z))", "all x y.((CollarCell(x) & InteriorChamber(y)) -> Lines(x,y))", "all x.(CollarCell(x) -> LinesInteriorChambers(x))", "all x y z.((CollarCell(x) & InteriorChamber(y) & InteriorChamber(z)) -> Lines(x,y,z))", "all x y.((CollarCell(x) & InteriorChamber(y)) -> Lines(x,y))", "all x.(CollarCell(x) -> LinesInteriorChambers(x))", "all x y z.((CollarCell(x) & InteriorChamber(y) & InteriorChamber(z)) -> Lines(x,y,z))", "all x.(CollarCell(x) -> LinesInteriorChambers(x))", "all x y.((CollarCell(x) & InteriorChamber(y)) -> Lines(x,y))", "exists x.(CollarCell(x) & InteriorChamber(x) & Lines(x,y))", "all x.(CollarCell(x) -> LinesInteriorChambers(x))", "all x.(CollarCell(x) -> LineInteriorChambers(x))", "all x y.((CollarCell(x) & InteriorChamber(y)) -> Lines(x,y))", "all x.(CollarCell(x) -> LinesInteriorChambers(x))"]}
{"id": "eqasc_validation_47", "nl": "The interior chambers have tiny hairs that trap the particles", "fol": "", "prediction": ["all x y.((InteriorChamber(x) & TinyHairs(y)) -> TrapsParticles(x,y))", "all x.(InteriorChamber(x) -> (TinyHairs(x) & TrapsParticles(x)))", "all x y z.((InteriorChamber(x) & TinyHairs(y) & Particle(z)) -> Traps(x,y,z))", "(InteriorChambers(inner) & TinyHairs(inner) & TrapsParticles(inner))", "(InteriorChambers(x) & TinyHairs(x) & TrapsParticles(x))", "all x.(InteriorChamber(x) -> (TinyHairs(x) & TrapsParticles(x)))", "all x.((InteriorChamber(x) & TinyHairs(x) & TrapsParticles(x)) -> InteriorChamber(x))", "all x y.((InteriorChamber(x) & TinyHairs(y)) -> TrapsParticles(x,y))", "all x.(InteriorChamber(x) -> (HasTinyHairs(x) & TrapsParticles(x)))", "all x y z.((InteriorChamber(x) & TinyHairs(y) & Particle(z)) -> Traps(y,z))", "all x y z.((InteriorChamber(x) & TinyHairs(y) & Particle(z) & Traps(y,z)) -> InteriorChamber(x))", "all x y.((InteriorChamber(x) & TinyHairs(y) & TrapsParticles(x,y)) -> InteriorChamber(x))", "all x y.((InteriorChamber(x) & TinyHairs(y)) -> TrapsParticles(x,y))", "all x.((InteriorChamber(x) & TinyHairs(x) & TrapsParticles(x)) -> InteriorChamber(x))", "all x.(InteriorChamber(x) -> (TinyHairs(x) & TrapsParticles(x)))", "all x.(InteriorChamber(x) -> HasTinyHairs(x))"]}
{"id": "eqasc_validation_48", "nl": "Collar cells are the work horses of the sponge.", "fol": "", "prediction": ["all x.(CollarCell(x) -> WorkHorseOfSponge(x))", "all x y.((CollarCell(x) & Sponge(y)) -> WorkHorse(x,y))", "all x.(CollarCell(x) -> WorkHorse(x))", "all x y z.((CollarCell(x) & Sponge(y) & WorkHorse(z)) -> WorkHorse(x,y,z))", "all x y.((CollarCell(x) & Sponge(y)) -> WorkHorse(x,y))", "(WorkHorse(collarCells) & Sponge(sponge))", "all x.(CollarCell(x) -> WorkHorseOfSponge(x))", "all x y.((CollarCell(x) & Sponge(y)) -> WorkHorse(x,y))", "All x.(ColarCell(x) -> WorkHorseOfSponge(x))", "all x.(CollarCell(x) -> WorkHorse(x))", "all x.(CollarCell(x) -> WorkHorseOfSponge(x))", "all x y.((CollarCell(x) & Sponge(y)) -> WorkHorse(x,y))", "all x.(CollaredCell(x) -> WorkHorseOfSponge(x))", "all x.(CollarCell(x) -> WorkPheel(x))", "all x y.((CollarCell(x) & Sponge(y)) -> WorkHorse(x,y))", "all x.(CollarCell(x) -> WorkHorseOfSponge(x))"]}
{"id": "eqasc_validation_49", "nl": "sponges have tiny hairs that trap particles", "fol": "", "prediction": ["all x.(Sponge(x) -> (TinyHairs(x) & TrapsParticles(x)))", "all x y.((Sponge(x) & TinyHairs(y)) -> TrapsParticles(x,y))", "all x y z.((Sponge(x) & TinyHairs(y) & Particle(z)) -> Traps(x,y,z))", "all x.(Sponge(x) -> (HasTinyHairs(x) & TrapsParticles(x)))", "all x.(Sponge(x) -> (TinyHairs(x) & TrapsParticles(x)))", "all x y.((Sponge(x) & TinyHairs(y)) -> TrapsParticles(x,y))", "(TinyHairs(spray) & TrapsParticles(sponge))", "(TinyHairs(sponge) & TrapsParticles(sponge,sponge))", "all x y.((Sponge(x) & TinyHairs(y) & TrapsParticles(x,y)) -> Has(x,y))", "all x.((Sponge(x) & TinyHairs(x) & TrapsParticles(x)) -> HasSponge(x))", "all x y z.((Sponge(x) & TinyHairs(y) & Particle(z) & Traps(x,z)) -> Has(x,y))", "all x.(Sponge(x) -> (TinyHairs(x) & TrapsParticles(x)))", "all x.(Sponge(x) -> (HasTinyHairs(x) & TrapsParticles(x)))", "all x.(Sponge(x) -> (TinyHairs(x) & TrapsParticles(x)))", "all x y.((Sponge(x) & TinyHairs(y)) -> TrapsParticles(x,y))", "all x.(Sponge(x) -> (TinyHairs(x) & TrapsParticles(x)))"]}
{"id": "eqasc_validation_50", "nl": "sponges trap particles", "fol": "", "prediction": ["all x.(Sponge(x) -> (TrapsParticles(x) & Particles(x)))", "all x y.((Sponge(x) & Particle(y)) -> Traps(x,y))", "all x.(Sponge(x) -> TrapsParticles(x))", "all x y z.((Sponge(x) & Particle(y) & Particle(z)) -> Traps(x,y,z))", "all x.(Sponge(x) -> (TrapsParticles(x) & Particles(x) & InSponge(x)))", "all x y.((Sponge(x) & Particle(y)) -> Traps(x,y))", "all x.((Sponge(x) & Sponge(x)) -> TrapsParticles(x))", "all x y z.((Sponge(x) & Particles(y) & Particles(z) & Traps(x,y,z)) -> Sponge(x))", "(all x.(Sponge(x) -> TrapsParticles(x)))", "all x y z.((Sponge(x) & Particle(y) & Particle(z)) -> Traps(x,y,z))", "all x.(Sponge(x) -> TrapsParticles(x))", "all x y.((Sponge(x) & Particle(y) & Traps(x,y)) -> Traps(x,y))", "all x y.((Sponge(x) & Particle(y)) -> Traps(x,y))", "all x.(Sponge(x) -> (TrapsParticles(x) & ContainsParticles(x)))", "all x.(Sponge(x) -> TrapsParticles(x))", "all x.(Sponge(x) -> (TrapsParticles(x) & Sponge(x)))"]}
{"id": "eqasc_validation_51", "nl": "Collar cells each have a flagellum.", "fol": "", "prediction": ["all x.(CollarCell(x) -> HasFlagellum(x))", "all x y.((CollarCell(x) & Flagellum(y)) -> Has(x,y))", "all x.(CollarCell(x) -> HasFlagellum(x))", "(all x.(CollarCell(x) -> HasFlagellum(x)))", "all x.(CollarCell(x) -> HasFlagellum(x))", "all x y.((CollarCell(x) & Flagellum(y)) -> Has(x,y))", "(all x.(CollarCell(x) -> HasFlagellum(x)))", "all x.(CollarCell(x) -> HasFlagellum(x))", "exists x.(Cell(x) & Flagellum(x))", "all x y.((CollarCell(x) & Flagellum(y)) -> Has(x,y))", "exists x.(Cell(x) & HasFlagellum(x))", "all x.(CollarCell(x) -> HasFlagellum(x))", "all x y.((CollarCell(x) & Flagellum(y)) -> Has(x,y))", "all x.(CollarCell(x) -> HasFlagellum(x))", "all x.(CollarCell(x) -> HasFlagellum(x))", "all x.(CollarCell(x) -> HasFlagellum(x))"]}
{"id": "eqasc_validation_52", "nl": "flagellum are tiny hairs that trap particles", "fol": "", "prediction": ["all x.(Flagellum(x) -> (TinyHairs(x) & TrapsParticles(x)))", "all x y.((Flagellum(x) & TinyHairs(y)) -> TrapsParticles(x,y))", "all x.(Flagellum(x) -> (TinyHairs(x) & TrapsParticles(x)))", "(TinyHairs(flagellum) & TrapsParticles(flagellum))", "all x y z.((Flagellum(x) & TinyHair(y) & Particle(z)) -> Traps(y,z))", "all x y.((Flagellum(x) & TinyHair(y)) -> TrapsParticles(x,y))", "flagellum (TinyHairs(x) & TrapsParticles(x))", "all x.(Flagellum(x) -> (TinyHair(x) & TrapsParticles(x)))", "all x.(Flagellum(x) -> (TinyHairs(x) & TrapsParticles(x)))", "all x.(Flagellum(x) -> (TinyHairs(x) & TrapsParticles(x)))", "all x y.((Flagellum(x) & TinyHairs(y)) -> TrapsParticles(x,y))", "(TinyHairs(flagellum) & TrapsParticles(flagellum))", "flagellum (TinyHairs(x) & TrapsParticles(x))", "all x.(Flagellum(x) -> (TinyHairs(x) & TrapsParticles(x)))", "all x.(Flagellum(x) -> (TinyHairs(x) & TrapsParticles(x)))", "all x.(Flagellum(x) -> (TinyHair(x) & TrapsParticles(x)))"]}
{"id": "eqasc_validation_53", "nl": "the work horses of the sponge have tiny hairs that trap the particles", "fol": "", "prediction": ["all x y.((WorkHorse(x) & Sponge(y)) -> (TinyHairs(x) & TrapsParticles(x,y)))", "all x y z.((WorkHorse(x) & Sponge(y) & WorkHorse(z)) -> (TinyHairs(x,y) & TrapsParticles(x,z)))", "all x.(WorkHorse(x) -> (WorkHorse(x) & HasTinyHairs(x) & TrapsParticles(x)))", "all x.((WorkHorse(x) & Sponge(x)) -> HasTinyHairs(x))", "all x y.((WorkHorse(x) & Sponge(y)) -> (TinyHairs(x,y) & TrapsParticles(x,y)))", "all x y z.((WorkHorse(x) & Sponge(y) & WorkHorse(z)) -> (TinyHairs(y) & TrapsParticles(z)))", "(WorkHorse(sponge) -> HasTinyHairs(sponge))", "(WorkHorse(workhorse) & WorkParticle(sponge) & TinyHairs(workhorse) & TrapsParticles(workhorse))", "all x.((WorkHorse(x) & Sponge(x)) -> (TinyHairs(x) & TrapsParticles(x)))", "all x y z.((WorkHorse(x) & Sponge(y) & Hair(z)) -> (TinyHairs(x,z) & TrapsParticles(x)))", "(WorkHorse(sponge) & HasTinyHairs(sponge) & TrapsParticles(sponge))", "all x.(WorkHorse(x) -> (SpongeWorkHorse(x) & TinyHairs(x) & TrapsParticles(x)))", "all x.(WorkHorse(x) -> (WorkHorse(x) & HasTinyHairs(x) & TrapsParticles(x)))", "all x y.((WorkHorse(x) & Sponge(y)) -> (HasTinyHairs(x,y) & TrapsParticles(x,y)))", "all x y.((WorkHorse(x) & Sponge(y)) -> HasTinyHairs(x,y))", "all x y z.((WorkHorse(x) & Sponge(y) & WorkParticle(z)) -> (TinyHairs(y,z) & TrapsParticles(y,z)))"]}
{"id": "eqasc_validation_54", "nl": "All cnidarians are aquatic.", "fol": "", "prediction": ["all x.(Cnidarian(x) -> Aquatic(x))", "all x.(Cnidarian(x) -> Aquatic(x))", "all x y.((Cnidarian(x) & Aquatic(y)) -> Cnidarian(x))", "(all x.(Cnidarian(x) -> Aquatic(x)))", "(All cnidarians(c) -> Aquatic(c))", "all x.(Cnidarian(x) -> Aquatic(x))", "(all x.(Cnidarian(x) -> Aquatic(x))", "all x.(Cnidarian(x) -> Aquatic(x))", "all x.(Cnidarian(x) -> Aquatic(x))", "all x.(Cnidarian(x) -> Aquatic(x))", "all x.(Cnidarian(x) -> Aquatic(x))", "all x.(Cnidarian(x) -> Aquatic(x))", "all x.(Cnidarian(x) -> Aquatic(x))", "all x.(Cnidarian(x) -> Aquatic(x))", "all x.(Cnidarian(x) -> Aquatic(x))", "all x.(Cnidarian(x) -> Aquatic(x))"]}
{"id": "eqasc_validation_55", "nl": "Cnidarians include jellyfish and anemones.", "fol": "", "prediction": ["all x.(Cnidarian(x) -> (Jerkyfish(x) | Anemones(x)))", "all x.(Cnidarian(x) -> (IncludesJellyfish(x) | IncludesAnemones(x)))", "all x y.((Cnidarian(x) & Jellyfish(y) & Anemone(y)) -> Includes(x,y))", "(all x.(Cnidarian(x) -> Jellyfish(x)) & all y.(Cnidarian(y) -> Anemone(y)))", "all x.(Cnidarian(x) -> (Jerkfish(x) | Anemone(x)))", "all x.(Cnidarian(x) -> (Jellyfish(x) | Anemone(x)))", "(all x.(Cnidarian(x) -> (Jellyfish(x) | Anemone(x))))", "all x y.((Cnidarian(x) & Jellyfish(y) & Anemone(y)) -> Includes(x,y))", "all x.(Cnidarian(x) -> (IncludesJellyfish(x) | IncludesAnemones(x)))", "all x.(Cnidarian(x) -> (Jerkyfish(x) | Anemones(x)))", "(all x.(Cnidarian(x) -> (Jellyfish(x) | Anemone(x))))", "all x y.((Cnidarian(x) & (Jellyfish(y) | Anemone(y))) -> Includes(x,y))", "exists x.(Cnidarian(x) & Includes(x,jellyfish) & Includes(x,anemones))", "all x.(Cnidarian(x) -> (Jerkyfish(x) | Anemones(x)))", "all x.(Cnidarian(x) -> (Jerkfish(x) | Anemone(x)))", "exists x.(Cnidarian(x) & (Jellyfish(x) | Anemone(x)))"]}
{"id": "eqasc_validation_56", "nl": "All jellyfish are aquatic animals", "fol": "", "prediction": ["all x.(Jellyfish(x) -> AquaticAnimal(x))", "all x.(Jellyfish(x) -> AquaticAnimal(x))", "all x y.((Jellyfish(x) & AquaticAnimal(y)) -> AquaticAnimal(x))", "ALL TEETHFISHESAquaticAnimal(jellyfish) -> AquaticAnimal(jellyfish))", "all x.(Jellyfish(x) -> AquaticAnimal(x))", "all x.(Jerkyfish(x) -> AquaticAnimal(x))", "all x y.((Jellyfish(x) & AquaticAnimal(y)) -> AquaticAnimal(x,y))", "(all x.(Jellyfish(x) -> AquaticAnimal(x)))", "all x.(Jellyfish(x) -> AquaticAnimal(x))", "all x.(Jerkyfish(x) -> AquaticAnimal(x))", "(All x.(Jellyfish(x) -> AquaticAnimal(x)))", "all x.(Jellyfish(x) -> AquaticAnimal(x))", "all x.(Jellyfish(x) -> AquaticAnimal(x))", "All x.(Jerkfish(x) -> AquaticAnimal(x))", "all x.(Jellyfish(x) -> AquaticAnimal(x))", "all x.(Jellyfish(x) -> AquaticAnimal(x))"]}
{"id": "eqasc_validation_57", "nl": "Aquatic creatures live in the water, for example.", "fol": "", "prediction": ["all x.(AquaticCreature(x) -> LivesInWater(x))", "all x y.((AquaticCreature(x) & Water(y)) -> LivesIn(x,y))", "(LivesInWater(aquaticCreature) & LivesInWater(aquaticCreature))", "all x y z.((AquaticCreature(x) & Water(y) & Water(z)) -> LivesIn(x,y,z))", "all x.(AquaticCreature(x) -> LivesInWater(x))", "(LivesInWater(aquaticCreature) & AquaticCreatureInWater(aquaticCreature))", "all x y.((AquaticCreature(x) & Water(y)) -> LivesIn(x,y))", "all x y z.((AquaticCreature(x) & Water(y) & Water(z)) -> LivesIn(x,y))", "all x.(AquaticCreature(x) -> LivesInWater(x))", "all x y.((AquaticCreature(x) & Water(y)) -> LivesIn(x,y))", "all x.(AquaticCreature(x) -> (LivesInWater(x) | LivesInWater(x)))", "all x y.((AquaticCreature(x) & Water(y) & LivesIn(x,y)) -> LivesIn(x,y))", "all x.(AquaticCreature(x) -> LivesInWater(x))", "exists x.(AquaticCreature(x) & LivesInWater(x))", "exists x.(AquaticCreature(x) & LivesInWater(x))", "exists x.(AquaticCreature(x) & LivesInWater(x))"]}
{"id": "eqasc_validation_58", "nl": "All cnidarians live in water", "fol": "", "prediction": ["all x.(Cnidarian(x) -> LivesInWater(x))", "(all x.(Cnidarian(x) -> LivesInWater(x)))", "all x.(Cnidarian(x) -> LivesInWater(x))", "all x y.((Cnidarian(x) & Water(y)) -> LivesIn(x,y))", "all x.(Cnidarian(x) -> LivesInWater(x))", "all x y.((Cnidarian(x) & Water(y) & LivesIn(x,y)) -> Cnidarian(x))", "(all x.(Cnidarian(x) -> LivesInWater(x)))", "all x y.((Cnidarian(x) & Water(y)) -> LivesIn(x,y))", "all x.(Cnidarian(x) -> LivesInWater(x))", "(all x.(Cnidarian(x) -> LivesInWater(x)))", "all x y.((Cnidarian(x) & Water(y) & LivesIn(x,y)) -> Cnidarian(x))", "all x.(Cnidarian(x) -> LivesInWater(x))", "all x.(Cnidarian(x) -> LivesInWater(x))", "all x.(Cnidarian(x) -> LivesInWater(x))", "all x.(Cnidarian(x) -> LivesInWater(x))", "all x.(Cnidarian(x) -> LivesInWater(x))"]}
{"id": "eqasc_validation_59", "nl": "Cnidarian tentacles serve to capture prey.", "fol": "", "prediction": ["all x.(CnidarianTentacle(x) -> CapturesPrey(x))", "all x y.((CnidarianTentacle(x) & Prey(y)) -> Captures(x,y))", "all x.(CnidarianTentacle(x) -> CapturesPrey(x))", "all x y z.((CnidarianTentacle(x) & Prey(y) & Prey(z)) -> Captures(x,y,z))", "all x y.((CnidarianTentacle(x) & Prey(y)) -> Captures(x,y))", "all x.(CnidarianTentacle(x) -> CapturesPrey(x))", "all x.((CnidarianTentacle(x) & Prey(y)) -> Captures(x,y))", "all x y.((CnidarianTentacle(x) & Prey(y)) -> Captures(x,y))", "all x.(CnidarianTentacle(x) -> ServesToCapturePrey(x))", "all x.(CnidarianTentacle(x) -> CapturesPrey(x))", "all x y.((CnidarianTentacle(x) & Prey(y)) -> Captures(x,y))", "all x.(CnidarianTentacle(x) -> ServesToCapturePrey(x))", "all x.(CnidarianTentacle(x) -> CapturesPrey(x))", "all x y.((CnidarianTentacle(x) & Prey(y)) -> Captures(x,y))", "all x.(CnidarianTentacle(x) -> ServesToCapturePrey(x))", "all x.(CnidarianTentacle(x) -> CapturesPrey(x))"]}
{"id": "eqasc_validation_60", "nl": "All aquatic tentacles serve to capture prey", "fol": "", "prediction": ["all x.(AquaticTentacle(x) -> CapturesPrey(x))", "all x y.((AquaticTentacle(x) & Prey(y)) -> Captures(x,y))", "all x.(AquaticTentacle(x) -> CapturesPrey(x))", "all x y z.((AquaticTentacle(x) & Prey(y) & Prey(z)) -> Captures(x,y,z))", "all x y.((AquaticTentacle(x) & Prey(y)) -> Captures(x,y))", "all x y z.((AquaticTentacle(x) & Prey(y) & Prey(z) & Captures(x,y,z)) -> Captures(x,y,z))", "all x.(AquaticTentacle(x) -> CapturesPrey(x))", "all x.((AquaticTentacle(x) & CapturesPrey(x)) -> ServesToCapturePrey(x))", "all x.((AquaticTentacle(x) & ServesToCapturePrey(x)) -> CapturesPrey(x))", "all x.(AquaticTentacle(x) -> ServesToCapturePrey(x))", "all x y.((AquaticTentacle(x) & Prey(y)) -> Captures(x,y))", "all x.(AquaticTentacle(x) -> CapturesPrey(x))", "all x.(AquaticTenacle(x) -> (CapturesPrey(x,y) & ServesToCapturePrey(x,z)))", "all x y.((AquaticTentacle(x) & Prey(y)) -> Captures(x,y))", "all x.(AquaticTentacle(x) -> ServesToCapturePrey(x))", "all x.(AquaticTenacle(x) -> CapturesPrey(x))"]}
{"id": "eqasc_validation_61", "nl": "all cnidarians live in the water", "fol": "", "prediction": ["all x.(Cnidarian(x) -> LivesInWater(x))", "(all x.(Cnidarian(x) -> LivesInWater(x)))", "all x y.((Cnidarian(x) & Water(y)) -> LivesIn(x,y))", "all x.(Cnidarian(x) -> LivesInWater(x))", "all x y z.((Cnidarian(x) & Water(y) & Water(z)) -> LivesIn(x,y,z))", "(all x.(Cnidarian(x) -> LivesInWater(x)))", "all x.(Cnidarian(x) -> LivesInWater(x))", "all x y.((Cnidarian(x) & Water(y)) -> LivesIn(x,y))", "all x y.((Cnidarian(x) & Water(y) & LivesIn(x,y)) -> Cnidarian(x))", "(all x.(Cnidarian(x) -> LivesInWater(x)))", "all x.(Cnidarian(x) -> LivesInWater(x))", "all x y.((Cnidarian(x) & Water(y)) -> LivesIn(x,y))", "all x.(Cnidarian(x) -> LivesInWater(x))", "all x.(Cnidarian(x) -> LivesInWater(x))", "all x.(Cnidarian(x) -> LiveInWater(x))", "all x.(Cnidarian(x) -> LivesInWater(x))"]}
{"id": "eqasc_validation_62", "nl": "all jellyfish are aquatic", "fol": "", "prediction": ["all x.(Jellyfish(x) -> Aquatic(x))", "all x y.((Jellyfish(x) & Aquatic(y)) -> Aquatic(x))", "all x.(Jellyfish(x) -> Aquatic(x))", "(all x.(Jellyfish(x) -> Aquatic(x)))", "all x y.((Jellyfish(x) & Aquatic(y)) -> Aquatic(x))", "all x.(Jellyfish(x) -> Aquatic(x))", "(all x.(Jellyfish(x) -> Aquatic(x)))", "all x y.((Jellyfish(x) & Aquatic(y)) -> Aquatic(x,y))", "all x.(Jerkyfish(x) -> Aquatic(x))", "all x.(Jellyfish(x) -> Aquatic(x))", "(all x.(Jellyfish(x) -> Aquatic(x)))", "all x.(Jellyfish(x) -> Aquatic(x))", "all x y.((Jellyfish(x) & Aquatic(y)) -> Aquatic(x))", "all x.(Jellyfish(x) -> Aquatic(x))", "all x.(Jellyfish(x) -> Aquatic(x))", "all x.(Jellyfish(x) -> Aquatic(x))"]}
{"id": "eqasc_validation_63", "nl": "jellyfish are aquatic", "fol": "", "prediction": ["all x.(Jellyfish(x) -> Aquatic(x))", "all x y.((Jellyfish(x) & Aquatic(y)) -> Aquatic(x))", "all x.(Jellyfish(x) -> Aquatic(x))", "(AquaticWater(jellyfish) & AquaticWater(jellyfish))", "(AquaticWater(Jellyfish) & AquaticWater(Jellyfish) & AquaticWater(Jellyfish))", "all x.(Jellyfish(x) -> Aquatic(x))", "all x y.((Jellyfish(x) & Aquatic(y)) -> Aquatic(x))", "all x.(Jerkyfish(x) -> Aquatic(x))", "all x y.((Jellyfish(x) & Aquatic(y)) -> Aquatic(x,y))", "all x.(Jellyfish(x) -> Aquatic(x))", "all x.(Jellyfish(x) -> AquaticAquatic(x))", "all x.(Jerkyfish(x) -> Aquatic(x))", "all x.(Jellyfish(x) -> Aquatic(x))", "all x y.((Jellyfish(x) & Aquatic(y)) -> Aquatic(x))", "all x.(Jellyfish(x) -> Aquatic(x))", "all x.(Jellyfish(x) -> AquaticAquatic(x))"]}
{"id": "eqasc_validation_64", "nl": "anemones are aquatic", "fol": "", "prediction": ["all x.(Anemone(x) -> Aquatic(x))", "all x.(Anemone(x) -> Aquatic(x))", "all x y.((Anemone(x) & Aquatic(y)) -> Aquatic(x))", "(AquaticAquaticAnemone(anemone) & AquaticAnemone(anemone))", "all x.(Anemone(x) -> Aquatic(x))", "all x y.((Anemone(x) & Aquatic(y)) -> Aquatic(x))", "all x.(Anemone(x) -> Aquatic(x))", "all x y.((Anemone(x) & Aquatic(y)) -> Aquatic(x))", "all x y z.((Anemone(x) & Aquatic(y) & Aquatic(z)) -> Aquatic(x))", "all x.(Anemone(x) -> Aquatic(x))", "all x.(Anemone(x) -> AquaticAquatic(x))", "all x.(Earthene(x) -> Aquatic(x))", "all x.(Anemone(x) -> AquaticAquatic(x))", "all x y.((Anemone(x) & Aquatic(y)) -> Aquatic(x))", "all x.(Elemone(x) -> Aquatic(x))", "all x.(Anemone(x) -> Aquatic(x))"]}
{"id": "eqasc_validation_65", "nl": "All jellyfish are aquatic.", "fol": "", "prediction": ["all x.(Jellyfish(x) -> Aquatic(x))", "all x.(Jellyfish(x) -> Aquatic(x))", "all x y.((Jellyfish(x) & Aquatic(y)) -> Aquatic(x))", "all x.(Jellyfish(x) -> Aquatic(x))", "all x.(Jerkyfish(x) -> Aquatic(x))", "all x.(Jellyfish(x) -> Aquatic(x))", "all x.(Jerkyfish(x) -> Aquatic(x))", "(all x.(Jellyfish(x) -> Aquatic(x)))", "all x.(Jellyfish(x) -> Aquatic(x))", "all x.(Jerryfish(x) -> Aquatic(x))", "(all x.(Jellyfish(x) -> Aquatic(x))", "all x.(Jellyfish(x) -> Aquatic(x))", "all x.(Jerkfish(x) -> Aquatic(x))", "all x.(Jellyfish(x) -> Aquatic(x))", "all x.(Jellyfish(x) -> Aquatic(x))", "all x.(Jellyfish(x) -> Aquatic(x))"]}
{"id": "eqasc_validation_66", "nl": "Jellyfish and anemones are aquatic.", "fol": "", "prediction": ["all x.((Jellyfish(x) | Anemone(x)) -> Aquatic(x))", "all x y.((Jellyfish(x) & Anemone(y)) -> Aquatic(x))", "(Aquatic(Jellyfish) & Aquatic(Anemone))", "all x.((Jellyfish(x) | Anemone(x)) -> Aquatic(x))", "(all x.(Jellyfish(x) -> Aquatic(x)) & all y.(Anemone(y) -> Aquatic(y)))", "all x y.((Jellyfish(x) & Anemone(y)) -> Aquatic(x))", "(Aquatic(Jellyfish) & Aquatic(Anemones))", "(all x.(Jellowfish(x) -> Aquatic(x)) & all y.(Anemone(y) -> Aquatic(y)))", "all x.((Jellyfish(x) | Anemone(x)) -> Aquatic(x))", "all x y.((Jellyfish(x) | Anemone(y)) -> Aquatic(x))", "(Aquatic(jellyfish) & Aquatic(anemones))", "all x.((Jellyfish(x) | Anemone(x)) -> Aquatic(x))", "all x y.((Jellyfish(x) & Anemone(y)) -> Aquatic(x))", "(Aquatic(Jellyfish) & Aquatic(Anemones))", "all x.((Jellyfish(x) | Anemone(x)) -> Aquatic(x))", "all x.((Jellyfish(x) | Anemone(x)) -> Aquatic(x))"]}
{"id": "eqasc_validation_67", "nl": "Cnidarians are also called coelenterates.", "fol": "", "prediction": ["all x.(Cnidarian(x) -> Coelenterates(x))", "(Cnidarian(c) & Coelenterate(c))", "all x.(Cnidarian(x) -> Coelenterate(x))", "all x.(Cnidarian(x) -> (Coelenterate(x) | Coelenterate(x)))", "all x y.((Cnidarian(x) & Cnidarian(y)) -> Coelenterate(x))", "(all x.(Cnidarian(x) -> Coelenterates(x)))", "all x.(Cnidarian(x) -> (Coelenterate(x) | Coelenterate(x)))", "all x.(Cnidarian(x) -> Coelenterates(x))", "(all x.(Cnidarian(x) -> Coelenterates(x)))", "all x.(Cnidarian(x) -> (Coelenterates(x) & Cnidarian(x)))", "all x.(Cnidarian(x) -> (Coelenterate(x) | Coelenterate(x)))", "all x.(Cnidarian(x) -> Coelenterate(x))", "all x.(Cnidarian(x) -> (Coelenterate(x) | Cnidarian(x)))", "all x.(Cnidarian(x) -> (Coelenterate(x) | Coelenterate(x)))", "all x.(Cnidarian(x) -> Coelenterates(x))", "exists x.(Cnidarian(x) & Coelenterate(x))"]}
{"id": "eqasc_validation_68", "nl": "coelenterates are aquatic", "fol": "", "prediction": ["all x.(Coelenterate(x) -> Aquatic(x))", "(AquaticAquaticCoelenterates(coelenterates) & AquaticAquatic(coelenterates))", "all x y.((Coelenterate(x) & Aquatic(y)) -> Aquatic(x))", "all x.(Coelenterate(x) -> Aquatic(x))", "(AquaticAquaticCoelenterates(coelenterates) & AquaticAquaticAquatic(coelenterates))", "all x.(Coelenterates(x) -> AquaticAquatic(x))", "all x.((Coelenterate(x) & Aquatic(x)) -> Aquatic(x))", "all x y.((Coelenterate(x) & Aquatic(y)) -> Aquatic(x))", "all x.(Coelenterate(x) -> Aquatic(x))", "all x.(Coelenterates(x) -> AquaticAquatic(x))", "all x y.((Coelenterate(x) & Aquatic(y)) -> Aquatic(x))", "all x y.((Coelenterate(x) & Aquatic(y)) -> Aquatic(x))", "all x.(Coelenterate(x) -> Aquatic(x))", "all x.(Coelenterates(x) -> AquaticAquatic(x))", "all x.(Coelenterates(x) -> AquaticAquatic(x))", "all x.(Colelenterate(x) -> Aquatic(x))"]}
{"id": "eqasc_validation_69", "nl": "All coelenterates are aquatic.", "fol": "", "prediction": ["all x.(Coelenterate(x) -> Aquatic(x))", "all x.(Coelenterate(x) -> Aquatic(x))", "all x y.((Coelenterate(x) & Aquatic(y)) -> Aquatic(x))", "(all x.(Coelenterate(x) -> Aquatic(x))", "all x.(Coelenterate(x) -> Aquatic(x))", "(all x.(Coelenterate(x) -> Aquatic(x))", "all x y.((Coelenterate(x) & Aquatic(y)) -> Aquatic(x))", "all x.(Coelenterate(x) -> Aquatic(x))", "all x.(Coelenterate(x) -> Aquatic(x))", "all x.(Celebrate(x) -> Aquatic(x))", "all x.(Coelenterate(x) -> Aquatic(x))", "all x.(Coelenterate(x) -> Aquatic(x))", "all x.(Colelenterates(x) -> Aquatic(x))", "all x.(Coelenterate(x) -> Aquatic(x))", "all x.(Coelenterate(x) -> Aquatic(x))", "all x.(Colelenterates(x) -> Aquatic(x))"]}
{"id": "eqasc_validation_70", "nl": "Aquatic animals moving through water are also subject to the principles of aerodynamics.", "fol": "", "prediction": ["all x.((AquaticAnimal(x) & MovingThroughWater(x)) -> Aerodynamics(x))", "all x.(AquaticAnimal(x) -> (MovingThroughWater(x) & Aerodynamics(x)))", "all x y.((AquaticAnimal(x) & Water(y) & MovesThrough(x,y)) -> Aerodynamics(x))", "all x.((AquaticAnimal(x) & MovesThroughWater(x)) -> AerodynamicsPrinciples(x))", "all x y.((AquaticAnimal(x) & Water(y) & MovesThrough(x,y)) -> AerodynamicsPrinciples(x))", "all x.(AquaticAnimal(x) -> (MovingThroughWater(x) & Aerodynamics(x)))", "all x y z.((AquaticAnimal(x) & Water(y) & Airdynamics(z) & MovesThrough(x,y)) -> SubjectTo(x,z))", "all x.((AquaticAnimal(x) & MovingThroughWater(x)) -> AerodynamicsPrinciples(x))", "all x y.((AquaticAnimal(x) & Water(y) & MovingThrough(x,y)) -> Aerodynamics(x))", "all x y.((AquaticAnimal(x) & Water(y)) -> (MovingThrough(x,y) & Aerodynamics(x)))", "all x.(AquaticAnimal(x) -> (MovingThroughWater(x) & Aerodynamics(x)))", "all x.((AquaticAnimal(x) & MovesThroughWater(x)) -> AerodynamicPrinciples(x))", "(all x.(AquaticAnimal(x) -> MovesThroughWater(x)))", "all x y.((AquaticAnimal(x) & Water(y) & MovesThrough(x,y)) -> AerodynamicPrinciples(x))", "all x.(AquaticAnimal(x) -> MovesThroughWater(x))", "all x.((AquaticAnimal(x) & MovingThroughWater(x)) -> AerodynamicPrinciples(x))"]}
{"id": "eqasc_validation_71", "nl": "All cnidarians move through the water.", "fol": "", "prediction": ["all x.(Cnidarian(x) -> MovesThroughWater(x))", "all x.(Cnidarian(x) -> MovesThroughWater(x))", "all x y.((Cnidarian(x) & Water(y)) -> MovesThrough(x,y))", "(all x.(Cnidarian(x) -> MovesThroughWater(x)))", "all x.(Cnidarian(x) -> MovesThroughWater(x))", "all x y.((Cnidarian(x) & Water(y) & MovesThrough(x,y)) -> MovesThrough(x,y))", "all x y.((Cnidarian(x) & Water(y)) -> MovesThrough(x,y))", "(all x.(Cnidarian(x) -> MovesThroughWater(x)))", "all x.(Cnidarian(x) -> MovesThroughWater(x))", "all x.(Cnidarian(x) -> MovesThroughWater(x))", "all x.(Cnidarian(x) -> MovesThroughWater(x))", "all x.(Cnidarian(x) -> MovesThroughWater(x))", "all x.(Cnidarian(x) -> MovesThroughWater(x))", "all x.(Cnidarian(x) -> MovesThroughWater(x))", "all x.(Cnidarian(x) -> MovesThroughWater(x))", "all x.(Cnidarian(x) -> MovesThroughWater(x))"]}
{"id": "eqasc_validation_72", "nl": "Scyphozoans are the next group of Cnidarians, and they are the familiar jellyfish.", "fol": "", "prediction": ["all x.(Scyphozoan(x) -> (NextCnidarian(x) & Jellyfish(x)))", "(NextCnidarian(Scyphozoan) & Jellyfish(Scyphozoan))", "all x.(Scyphozoan(x) -> (NextCnidarian(x) & Jellyfish(x)))", "all x y.((Scyphozoan(x) & Cnidarian(y)) -> (NextGroup(x,y) & Jellyfish(x)))", "(NextGroupOfCnidarians(Scyphozoans) & Jellyfish(Symbiotic(Scyphozoan))", "(NextGroupOfCnidarians(Scyphozoans) & Jellyfish(Symbiotics))", "(NextCnidarian(Scyphozoan) & Cnidarian(Scyphozoan) & Jellyfish(Scyphozoan))", "all x.(Cnidarian(x) -> (Scyphozoan(x) & Jellyfish(x)))", "all x.((Scyphozoan(x) & Cnidarian(x)) -> (FamiliarJellyfish(x) & NextGroup(x)))", "all x.(Scyphozoan(x) -> (NextCnidarian(x) & Jellyfish(x)))", "all x.(Scyphozoan(x) -> (Cnidarian(x) & Jellyfish(x)))", "(NextCnidarianGroup(Scyphozoans) & Jellyfish(Symbiotic(Scyphozoan))", "(NextGroupOfCnidarians(Scyphozoans) & Jellyfish(Scyphozoans))", "all x y.((Scyphozoan(x) & Cnidarian(y)) -> (NextGroup(x,y) & Jellyfish(x)))", "all x.(Scyphozoan(x) -> (NextGroupOfCnidarians(x) & Jellyfish(x)))", "all x y.((Scyphozoan(x) & Cnidarian(y)) -> (NextGroup(x,y) & Jellyfish(x)))"]}
{"id": "eqasc_validation_73", "nl": "Scyphozoans are aquatic organisms.", "fol": "", "prediction": ["all x.(Scyphozoan(x) -> AquaticOrganism(x))", "(AquaticOrganism(Scyphozoan)", "all x y.((Scyphozoan(x) & AquaticOrganism(y)) -> AquaticOrganism(x))", "all x.(Scyphozoan(x) -> AquaticOrganism(x))", "(AquaticOrganism(scyphozoan)", "all x y.((Scyphozoan(x) & AquaticOrganism(y)) -> AquaticOrganism(x))", "all x.(Scyphozoan(x) -> AquaticOrganism(x))", "(AquaticOrganism(Scyphozoan)", "all x.(Scyphozoan(x) -> AquaticOrganism(x))", "All x.(Synopsis(x) -> AquaticOrganism(x))", "all x.(Scyphozoan(x) -> AquaticOrganism(x))", "all x.(Scyphozoan(x) -> AquaticOrganism(x))", "all x.(Scyphozoax(x) -> AquaticOrganism(x))", "all x.(Scyphozoan(x) -> AquaticOrganism(x))", "all x.(Scyphozoan(x) -> AquaticOrganism(x))", "all x.(Symphozoan(x) -> AquaticOrganism(x))"]}
{"id": "eqasc_validation_74", "nl": "Cnidarians have a hydrostatic skeleton.", "fol": "", "prediction": ["all x.(Cnidarian(x) -> HydrostaticSkeleton(x))", "(HasHydrostaticSkeleton(Cnidarian) & HasHydrostaticSkeleton(Cnidarian))", "all x y.((Cnidarian(x) & HydrostaticSkeleton(y)) -> Has(x,y))", "all x.(Cnidarian(x) -> HydrostaticSkeleton(x))", "all x.(Cnidarian(x) -> HasHydrostaticSkeleton(x))", "(HasHydrostaticSkeleton(cnidarian)", "all x.(Cnidarian(x) -> HydrostaticSkeleton(x))", "all x y.((Cnidarian(x) & HydrostaticSkeleton(y)) -> Has(x,y))", "all x y.((Cnidarian(x) & Cnidarian(y)) -> HydrostaticSkeleton(x,y))", "all x.(Cnidarian(x) -> HasHydrostaticSkeleton(x))", "all x.(Cnidarian(x) -> HydrostaticSkeleton(x))", "all x.(Cnidarian(x) -> HasHydrostaticSkeleton(x))", "all x.(Cnidarian(x) -> HydrostaticSkeleton(x))", "all x.(Cnidarian(x) -> HydrostaticSkeleton(x))", "all x.(Cnidarian(x) -> HydrostaticSkeleton(x))", "all x.(Cnidarian(x) -> HydrostaticSkeleton(x))"]}
{"id": "eqasc_validation_75", "nl": "Some aquatic animals have hydrostatic skeletons.", "fol": "", "prediction": ["exists x.(AquaticAnimal(x) & HydrostaticSkeleton(x))", "exists x.(AquaticAnimal(x) & HasHydrostaticSkeleton(x))", "exists x.(AquaticAnimal(x) & HydrostaticSkeleton(x))", "exists x.(AquaticAnimal(x) & HasHydrostaticSkeleton(x))", "all x y.((AquaticAnimal(x) & AquaticAnimal(y)) -> HasHydrostaticSkeleton(x,y))", "exists x.(AquaticAnimal(x) & HydrostaticSkeleton(x))", "exists x y.(AquaticAnimal(x) & HydrostaticSkeleton(y))", "exists x.(AquaticAnimal(x) & HasHydrostaticSkeleton(x))", "exists x.(Animal(x) & Aquatic(x) & HydrostaticSkeleton(x))", "exists x.(AquaticAnimal(x) & HydrostaticSkeleton(x))", "exists x.(AquaticAnimal(x) & HasHydrostaticSkeleton(x))", "exists x.(AquaticAnimal(x) & HydrostaticSkeleton(x))", "exists x.(AquaticAnimal(x) & HasHydrostaticSkeleton(x))", "exists x.(AquaticAnimal(x) & HydrostaticSkeleton(x))", "exists x.(AquaticAnimal(x) & HasHydrostaticSkeleton(x))", "exists x.(AquaticAnimal(x) & HydrostaticSkeleton(x))"]}
{"id": "eqasc_validation_76", "nl": "predicting weather requires studying weater", "fol": "", "prediction": ["all x.(PredictingWeather(x) -> RequiresStudyingWeater(x))", "all x y.((Weather(x) & Weater(y)) -> Predicts(x,y))", "all x y z.((Weather(x) & Weater(y) & Weather(z)) -> PredictsRequiresStudying(x,y,z))", "all x y.((PredictingWeather(x) & Weater(y)) -> RequiresStudying(x,y))", "(PredictingWeather(x) & Weater(x))", "-PredictingWeather(x) & RequiresStudyingWeater(x))", "all x.(PredictingWeather(x) -> RequiresStudyingWeater(x))", "all x y.((Weather(x) & Weater(y)) -> Predicts(x,y))", "all x y z.((Weather(x) & Weater(y) & Weather(z) & Predicts(x,z)) -> RequiresStudying(x,y,z))", "(PredictingWeather(x) -> RequiresStudyingWeater(x))", "all x.(PredictionOfWeather(x) -> RequiresStudyingWeater(x))", "all x.((WeatherPrediction(x) & WeaterStudy(x)) -> RequiresStudying(x))", "all x y.((PredictingWeather(x) & Weater(y)) -> RequiresStudying(x,y))", "(PredictingWeather(x) & Weater(x))", "all x.(PredictingWeather(x) -> (StudiesWeater(x) & Weater(x)))", "all x.(PredictingWeather(x) -> RequiresStudyingWeater(x))"]}
{"id": "eqasc_validation_77", "nl": "Meteorologists try to predict the weather.", "fol": "", "prediction": ["all x.(Meteorologist(x) -> PredictsWeather(x))", "all x y.((Meteorologist(x) & Weather(y)) -> Predicts(x,y))", "all x y z.((Meteorologist(x) & Weather(y) & Weather(z)) -> Predicts(x,y,z))", "(all x.(Meteorologist(x) -> PredictsWeather(x)))", "all x.(Meteorologist(x) -> (TryToPredictWeather(x) | PredictWeather(x)))", "all x.(Meteorologist(x) -> PredictsWeather(x))", "all x y.((Meteorologist(x) & Weather(y)) -> Predicts(x,y))", "all x y.((Meteorologist(x) & Weather(y)) -> TrysToPredict(x,y))", "(all x.(Meteorologist(x) -> PredictsWeather(x)))", "all x.(Meteorologist(x) -> (PredictsWeather(x) & -PredictsWeather(x)))", "all x y z.((Meteorologist(x) & Weather(y) & Weather(z)) -> Predicts(x,y,z))", "all x.(Meteorologist(x) -> PredictsWeather(x))", "all x y.((Meteorologist(x) & Weather(y)) -> Predicts(x,y))", "all x.(Meteorologist(x) -> TrysToPredictWeather(x))", "all x y.((Meteorologist(x) & Weather(y)) -> TrysToPredict(x,y))", "all x.(Meteorologist(x) -> PredictsWeather(x))"]}
{"id": "eqasc_validation_78", "nl": "Being a meteorologist requires studying weather.", "fol": "", "prediction": ["all x.(Meteorologist(x) -> RequiresStudyingWeather(x))", "(BeingMeteorologistRequiresStudyingWeather(Meteorologist)", "all x.(Meteorologist(x) -> RequiresStudyingWeather(x))", "all x y.((Meteorologist(x) & Weather(y)) -> RequiresStudying(x,y))", "all x.(Meteorologist(x) -> RequiresStudyingWeather(x))", "all x.(Meteorologist(x) -> StudiesWeather(x))", "all x.(Meteorolist(x) -> RequiresStudyingWeather(x))", "all x.(Meteorologist(x) -> RequiresStudyingWeather(x))", "all x y.((Meteorologist(x) & Weather(y)) -> RequiresStudying(x,y))", "all x y.((Meteorologist(x) & Weather(y)) -> RequiresStudying(x,y))", "all x.(Meteorologist(x) -> RequiresStudyingWeather(x))", "all x.(Meteorologue(x) -> RequiresStudyingWeather(x))", "all x.(Meteorologist(x) -> StudiesWeather(x))", "exists x.(M\u00e9t\u00e9ologist(x) & StudiesWeather(x))", "all x.(Meteorologist(x) -> RequiresStudyingWeather(x))", "exists x.(Meteorologist(x) & StudiesWeather(x))"]}
{"id": "eqasc_validation_79", "nl": "Meteorologists study the weather.", "fol": "", "prediction": ["all x.(Meteorologist(x) -> StudiesWeather(x))", "all x y.((Meteorologist(x) & Weather(y)) -> Studies(x,y))", "all x y z.((Meteorologist(x) & Weather(y) & Weather(z)) -> Studies(x,y,z))", "(StudiesWeather(meteorologist,weather) & -StudiesWeather(meteorologist,weather))", "all x.(Meteorologist(x) -> StudiesWeather(x))", "all x y.((Meteorologist(x) & Weather(y)) -> Studies(x,y))", "(StudiesWeather(Meteorologist,weather) & Weather(Meteorologist,weather))", "all x y z.((Meteorologist(x) & Weather(y) & Weather(z)) -> Studies(x,y,z))", "all x.(Meteorologist(x) -> StudiesWeather(x))", "all x y.((Meteorologist(x) & Weather(y)) -> Studies(x,y))", "all x.(Meteorologist(x) -> StudiesWeather(x))", "all x y.((Meteorologist(x) & Weather(y)) -> Studies(x,y))", "all x y.((Meteorologist(x) & Weather(y) & Studies(x,y)) -> Study(x,y))", "all x.(Meteorologist(x) -> StudiesWeather(x))", "all x.(Meteorologist(x) -> StudiesWeather(x))", "all x.(Meteorologist(x) -> StudiesWeather(x))"]}
{"id": "eqasc_validation_80", "nl": "Meteorologists study weather", "fol": "", "prediction": ["all x y z.((Meteorologist(x) & Weather(y) & Weather(z)) -> Studies(x,y,z))", "all x y.((Meteorologist(x) & Weather(y)) -> Studies(x,y))", "all x.(Meteorologist(x) -> StudiesWeather(x))", "(StudiesWeather(meteorologist,weather) & Meteorologist(meteorologist,weather))", "all x y z.((Meteorologist(x) & Weather(y) & Weather(z)) -> Studies(x,y,z))", "(StudiesWeather(meteorologist,weather) & MeteorologistsStudyWeather(meteorologist,weather))", "all x y.((Meteorologist(x) & Weather(y)) -> Studies(x,y))", "all x.(Meteorologist(x) -> StudiesWeather(x))", "all x y z.((Meteorologist(x) & Weather(y) & Weather(z)) -> Studies(x,y))", "all x y z.((Meteorologist(x) & Weather(y) & Weather(z) & Studies(x,y)) -> Studies(x,z))", "all x.(Meteorologist(x) -> StudiesWeather(x))", "all x y.((Meteorologist(x) & Weather(y)) -> Studies(x,y))", "all x.(Meteorologist(x) -> (StudiesWeather(x) & StudiesWeather(x)))", "all x y.((Meteorologist(x) & Weather(y) & Studies(x,y)) -> Studies(x))", "all x.(Meteorologist(x) -> StudiesWeather(x))", "all x.(Meteorologist(x) -> StudiesWeather(x))"]}
{"id": "eqasc_validation_81", "nl": "Meteorologist Meteorologist A meteorologist is a person who studies or predicts the weather.", "fol": "", "prediction": ["all x.(Meteorologist(x) -> (StudiesWeather(x) | PredictsWeather(x)))", "(StudiesWeatherOrPredictsWeather(Meteorologist) -> Meteorologist(Meteorologist))", "all x y.((Meteorologist(x) & Meteorologist(y)) -> (StudiesWeather(x,y) | PredictsWeather(x,y)))", "all x y.((Meteorologist(x) & Person(y)) -> (StudiesWeather(y) | PredictsWeather(y)))", "all x.(Meteorologist(x) -> (StudiesWeather(x) | PredictsWeather(x)))", "all x y z.((Meteorologist(x) & Meteorologist(y) & Weather(z) & StudiesOrPredicts(x,y,z)) -> Meteorologist(x))", "all x.(Meteorologist(x) -> (StudiesWeather(x) | PredictsWeather(x)))", "all x.(Meteorologist(x) -> (StudiesWeather(x) | PredictsWeather(x)))", "all x y.((Meteorologist(x) & Person(y)) -> (StudiesWeather(y,x) | PredictsWeather(y,x)))", "all x y.((Meteorologist(x) & Meteorologist(y)) -> (StudiesWeather(x,y) | PredictsWeather(x,y)))", "all x.(Meteorologist(x) -> (StudiesWeather(x) | PredictsWeather(x)))", "all x.(Meteorologist(x) -> (StudiesWeather(x) | PredictsWeather(x)))", "all x.(Meteorologist(x) -> (StudiesOrPredictsWeather(x)))", "all x.(Meteorologist(x) -> (StudiesWeather(x) | PredictsWeather(x)))", "all x.(Meteorologist(x) -> (StudiesWeather(x) | PredictsWeather(x)))", "exists x.(Meteorologist(x) & StudiesOrPredictsWeather(x))"]}
{"id": "eqasc_validation_82", "nl": "meteorology requires studying weather", "fol": "", "prediction": ["all x.(Meteorology(x) -> RequiresStudyingWeather(x))", "all x y.((Meteorology(x) & Weather(y)) -> RequiresStudying(x,y))", "all x y z.((Meteorology(x) & Weather(y) & Weather(z)) -> RequiresStudying(x,y,z))", "all x.(MeteorologyRequiresStudyingWeather(x) -> MeteorologyRequiresStudyingWeather(x))", "(RequiresStudyingWeather(meteorology) & Weather(weather))", "(RequiresStudyingWeather(meteorology) -> MeteorologyRequiresStudyingWeather(meteorology))", "all x.(Meteorology(x) -> RequiresStudyingWeather(x))", "all x y.((Meteorology(x) & Weather(y)) -> RequiresStudying(x,y))", "(all x.(Meteorology(x) -> RequiresStudyingWeather(x)))", "all x.(Meteodology(x) -> RequiresStudyingWeather(x))", "all x.(MeteorologyRequiresStudyingWeather(x) -> MeteorologyRequiresStudyingWeather(x))", "all x y z.((Meteorology(x) & Weather(y) & Weather(z)) -> RequiresStudying(x,y,z))", "all x y.((Meteorology(x) & Weather(y) & RequiresStudying(x,y)) -> RequiresStudying(x,y))", "(RequiresStudyingWeather(Meteorology) & Weather(Meteorology))", "all x y.((Meteorology(x) & Weather(y)) -> RequiresStudying(x,y))", "all x.(MeteorologyRequiresStudyingWeather(x) -> MeteorologyRequiresStudyingWeather(x))"]}
{"id": "eqasc_validation_83", "nl": "meteorologists require studying weather", "fol": "", "prediction": ["all x y.((Meteorologist(x) & Weather(y)) -> RequiresStudying(x,y))", "all x.(Meteorologist(x) -> RequiresStudyingWeather(x))", "all x y z.((Meteorologist(x) & Weather(y) & Weather(z)) -> RequiresStudying(x,y,z))", "(all x.(Meteorologist(x) -> RequiresStudyingWeather(x)))", "all x y.((Meteorologist(x) & Weather(y)) -> RequiresStudying(x,y))", "(RequiresStudyingWeather(meteorologist) & Weather(meteorologist))", "(RequiresStudyingWeather(meteorologist) | RequiresStudyingWeather(meteorologist)))", "all x.(Meteorologist(x) -> RequiresStudyingWeather(x))", "all x y z.((Meteorologist(x) & Weather(y) & Weather(z)) -> RequiresStudying(x,y,z))", "all x y.((Meteorologist(x) & Weather(y)) -> RequiresStudying(x,y))", "all x.(Meteorologist(x) -> RequiresStudyingWeather(x))", "all x.(Meteorologist(x) -> (RequiresStudyingWeather(x) & Weather(y) & Weather(z) & Weather(w) & Weather(w)))", "all x y z.((Meteorologist(x) & Weather(y) & Weather(z)) -> RequiresStudying(x,y,z))", "all x y.((Meteorologist(x) & Weather(y)) -> RequiresStudying(x,y))", "all x.(Meteorologist(x) -> RequiresStudyingWeather(x))", "all x.(Meteorologist(x) -> RequiresStudyingWeather(x))"]}
{"id": "eqasc_validation_84", "nl": "Meteorologists study weather conditions and prepare current and long range weather forecasts.", "fol": "", "prediction": ["all x.(Meteorologist(x) -> (StudiesWeatherConditions(x) & PreparesWeatherPredictions(x)))", "all x y.((Meteorologist(x) & WeatherCondition(y)) -> (Studies(x,y) & Prepares(x,y)))", "all x y z.((Meteorologist(x) & WeatherCondition(y) & Weather(z)) -> (Studies(x,y) & Prepares(x,z)))", "all x.(Meteorologist(x) -> (StudiesWeatherConditions(x) & PreparesWeatherPredictions(x)))", "(StudiesWeatherConditionsAndPreparesWeatherPredictions(meteorologists,current,longRange))", "all x y.((Meteorologist(x) & WeatherCondition(y)) -> (Studies(x,y) & Prepares(x,y)))", "all x y z.((Meteorologist(x) & WeatherCondition(y) & WeatherPrediction(z)) -> (Studies(x,y) & Prepares(x,z)))", "(StudiesWeatherConditions(meteorologist) & PreparesWeatherPredictions(meteorologist))", "all x y z.((Meteorologist(x) & WeatherCondition(y) & CurrentAndLongRange(z)) -> (Studies(x,y) & Prepares(x,z)))", "all x.(Meteorologist(x) -> (StudiesWeatherConditions(x) & PreparesWeatherPredictions(x)))", "all x y.((Meteorologist(x) & WeatherCondition(y)) -> (Studies(x,y) & Prepares(x,y)))", "all x y.((Meteorologist(x) & WeatherConditions(y)) -> (Studies(x,y) & Prepares(x,y)))", "all x.(Meteorologist(x) -> (StudiesWeatherConditions(x) & PreparesLongRangeWeatherPredictions(x)))", "all x.(Meteorologist(x) -> (StudiesWeatherConditions(x) & PreparesWeatherPredictions(x)))", "all x.(Meteorologist(x) -> (StudiesWeatherConditions(x) & PreparesWeatherPredictions(x) & CurrentAndLongRange(x)))", "all x.(Meteorologist(x) -> (StudiesWeatherConditions(x) & PreparesLongRangeWeatherPredictions(x)))"]}
{"id": "eqasc_validation_85", "nl": "Predicting weather requires preparing current and long range weather forecasts.", "fol": "", "prediction": ["all x.(PredictingWeather(x) -> (PreparesCurrentAndLongRangeWeatherPredictions(x)))", "all x y.((PredictingWeather(x) & Weather(y)) -> (PreparesCurrentAndLongRangePredictions(x,y) & PreparesLongRangePredictions(x,y)))", "(PredictingWeather(prediction) -> (PreparesCurrentAndLongRangeWeatherPredictions(prediction)))", "all x y.((PredictingWeather(x) & CurrentAndLongRangeWeatherPredictions(y)) -> Prepares(x,y))", "all x.(PredictsWeather(x) -> (PreparesWeatherPredictions(x) & PreparesWeatherPredictions(x)))", "all x.(PredictingWeather(x) -> (PreparesCurrentAndLongRangeWeatherPredictions(x)))", "all x y z.((PredictingWeather(x) & CurrentWeather(y) & LongRangeWeather(z)) -> Prepares(x,y,z))", "all x.((Weather(x) & Predicts(x)) -> (Prepares(x,current) & Prepares(x,LongRange)))", "all x.((PredictingWeather(x) & PreparingWeather(x)) -> (PreparesCurrentAndLongRangeWeatherPredictions(x)))", "all x.(PredictingWeather(x) -> PreparesCurrentAndLongRangeWeatherPredictions(x))", "(PredictingWeather(predictsweather) -> PreparesCurrentAndLongRangeWeatherPredictions(predictsweather))", "all x y.((PredictingWeather(x) & Weather(y)) -> Prepares(x,y))", "all x.(PredictsWeather(x) -> (PreparesCurrentAndLongRangeWeatherPredictions(x) & PreparesLongRangeWeatherPredictions(x)))", "all x y.((PredictsWeather(x) & Weather(y)) -> (PreparesCurrentAndLongRangePredictions(x,y) & PreparesLongRangePredictions(x,y)))", "all x.(PredictingWeather(x) -> PreparesWeatherPredictions(x))", "exists x.(PredictingWeather(x) & PreparingWeatherPredictions(x))"]}
{"id": "eqasc_validation_86", "nl": "Introduction to the Weather Introduction to Weather Meteorology is the study of weather.", "fol": "", "prediction": ["(IntroductionToWeather(IntroductionToWeatherMeteorology) -> StudiesWeather(IntroductionToWeather(IntroductionToWeather(IntroductionToWeather(IntroductionToWeather(IntroductionToWeather(IntroductionToWeather(IntroductionToWeather(IntroductionToWeather(IntroWeweather(IntroWeather(IntroWeather(IntroWeather(IntroWeather(IntroWeather(IntroWeather(IntroWeather)))))", "all x.(IntroductionToWeather(x) -> (StudyOfWeather(x) & Weather(x)))", "all x.((IntroductionToWeather(x) & Meteorology(x)) -> StudiesWeather(x))", "IntroductionToWeather(IntroductionToWeatherMeteorology(IntroductionToWeather(IntroductionToWeather(IntroductionToWeather(IntroductionToWeather(IntroductionToWeather(IntroductionToWeather(IntroductionToWeather(IntroductionToWeather(IntroductionToWeather(IntroWewetter(IntroWeather(IntroWeather(IntroWeather(IntroWeather(IntroWeather))))", "all x y.((IntroductionToWeather(x) & WeatherMeteorology(y)) -> StudiesWeather(x,y))", "IntroductionToWeather(introductiontoweather) -> StudiesWeather(introductiontoweather))", "all x.(IntroductionToWeather(x) -> StudiesWeather(x))", "all x.((IntroductionToWeather(x) & WeatherMeteorology(x)) -> StudiesWeather(x))", "(IntroductionToWeather(IntroductionToWeatherMeteorology) -> StudiesWeather(IntroductionToWeather(IntroductionToWeather(IntroductionToWeather(IntroductionToWeather(IntroductionToWeather(IntroductionToWeather(IntroductionToWeather(IntroductionToWeather(IntroWeWeather(IntroWeather(IntroWeather(IntroWeather(Intro))))", "IntroductionToWeather(introductiontoweather) -> StudiesWeather(introductiontoweather(introductiontoweather))", "all x y.((IntroductionToWeather(x) & WeatherMeteorology(y)) -> StudiesWeather(x,y))", "all x.(WeatherMeteorology(x) -> StudiesWeather(x))", "all x.(IntroductionToWeather(x) -> (StudyOfWeather(x) | StudyOfWeather(x)))", "All x y.((IntroductionToWeather(x) & WeatherMeteorology(y)) -> StudiesWeather(x))", "all x.(IntroductionToWeather(x) -> StudiesWeather(x))", "All x y.((IntroductionToWeather(x) & WeatherMeteorology(y)) -> StudiesWeather(x))"]}
{"id": "eqasc_validation_87", "nl": "predicting weather requires meteorology", "fol": "", "prediction": ["all x.(PredictingWeather(x) -> RequiresMeteorology(x))", "all x y.((Weather(x) & Meteorology(y)) -> Predicts(x,y))", "all x y z.((Weather(x) & Meteorology(y) & Weather(z)) -> PredictsRequires(x,y,z))", "all x y.((PredictingWeather(x) & Meteorology(y)) -> Requires(x,y))", "(PredictingWeather(x) & RequiresMeteorology(x))", "(all x.(PredictingWeather(x) -> Meteorology(x)))", "all x.((Weather(x) & Meteorology(x)) -> Predicts(x,Weather))", "all x.(PredictingWeather(x) -> RequiresMeteorology(x))", "all x y.((Weather(x) & Meteorology(y)) -> Requires(x,y))", "all x y z.((Weather(x) & Meteorology(y) & Weather(z)) -> Requires(x,y,z))", "all x y.((Prediction(x) & Weather(y)) -> RequiresMeteorology(x,y))", "all x.(PredictionOfWeather(x) -> RequiresMeteorology(x))", "(PredictingWeather(x) -> RequiresMeteorology(x))", "all x.(PredictingWeather(x) -> RequiresMeteorology(x))", "all x.(PredictsWeather(x) -> RequiresMeteorology(x))", "all x.(PredictingWeather(x) -> RequiresMeteorology(x))"]}
{"id": "eqasc_validation_88", "nl": "Meteorologists are scientists who study the weather.", "fol": "", "prediction": ["all x.(Meteorologist(x) -> (StudiesWeather(x) & StudiesWeather(x)))", "all x y.((Meteorologist(x) & Weather(y)) -> Studies(x,y))", "all x.(Meteorologist(x) -> StudiesWeather(x))", "all x.(Meteorologist(x) -> (StudiesWeather(x) & StudiesWeather(x)))", "(StudiesWeather(meteorologist,weather) & StudiesWeather(meteorologist,weather))", "all x y.((Meteorologist(x) & Weather(y)) -> Studies(x,y))", "all x y z.((Meteorologist(x) & Weather(y) & Weather(z)) -> Studies(x,y,z))", "all x.(Meteorologist(x) -> (StudiesWeather(x) & StudiesWeather(x)))", "all x.(Meteorologist(x) -> StudiesWeather(x))", "(StudiesWeather(meteorologist,weather) & StudiesWeather(meteorologist,weather))", "all x y.((Meteorologist(x) & Weather(y)) -> Studies(x,y))", "all x.(Meteorologist(x) -> (StudiesWeather(x) & StudiesWeather(x)))", "all x.(Meteorologist(x) -> exists y.(Weather(y) & Studies(x,y))))", "all x.(Meteorologist(x) -> StudiesWeather(x))", "all x y.((Meteorologist(x) & Weather(y)) -> Studies(x,y))", "all x.(Meteorologist(x) -> StudiesWeather(x))"]}
{"id": "eqasc_validation_89", "nl": "predicting weather requires meteorologists", "fol": "", "prediction": ["all x y.((Weather(x) & Meteorologist(y)) -> Predicts(y,x))", "all x y z.((Weather(x) & Meteorologist(y) & Weather(z)) -> Predicts(y,z))", "all x y.((PredictingWeather(x) & Meteorologist(y)) -> Requires(y,x))", "all x y.((Weather(x) & Meteorologist(y)) -> Requires(y,x))", "all x.(PredictingWeather(x) -> RequiresMeteorologists(x))", "all x.((PredictingWeather(x) & Meteorologist(x)) -> Requires(x,Meteorologists))", "(PredictingWeather(x) & RequiresMeteorologists(x))", "all x y z.((Weather(x) & Meteorologist(y) & Weather(z)) -> Requires(y,z))", "(all x.(PredictingWeather(x) -> Meteorologist(x)))", "(all x y.((Weather(x) & Meteorologist(y)) -> Predicts(y,x)))", "all x.(PredictingWeather(x) -> RequiresMeteorologists(x))", "all x y.((PredictsWeather(x) & Meteorologist(y)) -> Requires(y,x))", "all x y.((Meteorologist(x) & Weather(y) & Predicts(x,y)) -> Requires(x,y))", "all x y z.((Weather(x) & Meteorologist(y) & Weather(z)) -> Predicts(x,y,z))", "all x.(PredictingWeather(x) -> RequiresMeteorologists(x))", "all x.(PredictsWeather(x) -> RequiresMeteorologists(x))"]}
{"id": "eqasc_validation_90", "nl": "knowledge of the stars can be used to navigate", "fol": "", "prediction": ["all x y.((KnowledgeOfStars(x) & Navigate(y)) -> CanBeUsedToNavigate(x,y))", "all x.((KnowledgeOfStars(x) & NavigatesStars(x)) -> CanBeUsedToNavigateStars(x))", "all x.(KnowledgeOfStars(x) -> NavigatesStars(x))", "all x y z.((KnowledgeOfStars(x) & Stars(y) & Stars(z)) -> Navigates(x,y,z))", "all x y.((Knowledge(x) & Stars(y)) -> Navigates(x,y))", "(KnowledgeOfStars(x) & NavigatesStars(x))", "all x y.((KnowledgeOfStars(x) & Navigate(y)) -> CanBeUsedToNavigate(x,y))", "all x y z.((KnowledgeOfStars(x) & Navigates(y) & Stars(z)) -> CanBeUsedToNavigate(x,y,z))", "all x.((KnowledgeOfStars(x) & NavigatesStars(x)) -> CanBeUsedToNavigateStars(x))", "all x y.((Star(x) & KnowledgeOf(y,x)) -> Navigates(x,y))", "all x.((KnowledgeOfStars(x) & Navigate(x)) -> CanBeUsedToNavigate(x))", "(KnowledgeOfStars(x) -> NavigatesStars(x))", "all x.(KnowledgeOfStars(x) -> NavigatesStars(x))", "all x y.((KnowledgeOfStars(x) & NavigateStars(y)) -> CanBeUsedToNavigateStars(x,y))", "all x.(KnowledgeOfStars(x) -> NavigatesStars(x))", "exists x.(KnowledgeOfStars(x) & Navigate(x))"]}
{"id": "eqasc_validation_91", "nl": "Astronomy is the study of the planets, stars, and universe.", "fol": "", "prediction": ["all x.(Astronomy(x) -> (StudiesPlanets(x) & StudiesStars(x) & StudiesUniverse(x)))", "all x y z.((Astronomy(x) & Planet(y) & Star(z)) -> (Studies(x,y,z) & Studies(x,y)))", "(StudyOfPlanets(astronomy) & StudyOfStars(astronomy) & StudyOfUniverse(astronomy))", "(StudiesPlanetsStarsAndUniverse(astronomy) & StudiesPlanetsStarsAndUniverse(astronomy))", "all x y.((Astronomy(x) & Planet(y) & Star(y) & Universe(y)) -> Studies(x,y))", "all x.(Astronomy(x) -> (StudiesPlanets(x) & StudiesStars(x) & StudiesUniverse(x)))", "all x y z.((Astronomy(x) & Planet(y) & Star(z) & Universe(x)) -> Studies(x,y,z))", "(StudyOfPlanets(astronomy) & StudyOfStars(astronomy) & StudyOfUniverse(astronomy,astronomy))", "all x y.((Astronomy(x) & Planet(y) & Star(y)) -> Studies(x,y))", "all x.(Astronomy(x) -> (StudiesPlanets(x) & StudiesStars(x) & StudiesUniverse(x)))", "all x.((Astronomy(x) & Planet(x) & Star(x) & Universe(x)) -> StudyOf(x,Planets,Stars,Universe))", "all x.(Astronomy(x) -> (StudyOfPlanets(x) & StudyOfStars(x) & StudyOfUniverse(x)))", "all x.(Astronomy(x) -> (StudiesPlanets(x) & StudiesStars(x) & StudiesUniverse(x)))", "all x y z.((Astronomy(x) & Planet(y) & Star(z)) -> (Studies(x,y,z) & Studies(x,y) & Studies(x,y)))", "all x.(Astronomy(x) -> (StudiesPlanets(x) & StudiesStars(x) & StudiesUniverse(x)))", "all x.(Astronomy(x) -> (StudiesPlanets(x) & StudiesStars(x) & StudiesUniverse(x)))"]}
{"id": "eqasc_validation_92", "nl": "Astronomy can be used to navigate", "fol": "", "prediction": ["all x.(Astronomy(x) -> Navigates(x))", "all x y.((Astronomy(x) & Navigate(y)) -> CanBeUsedToNavigate(x,y))", "all x.(Astronomy(x) -> (CanBeUsedToNavigate(x) & Navigate(x)))", "(Navigation(astronomy) -> CanBeUsedToNavigate(astronomy))", "all x y z.((Astronomy(x) & Navigate(y) & Navigation(z)) -> CanBeUsedTo(x,y,z))", "all x y.((Astronomy(x) & Navigate(y)) -> CanBeUsedToNavigate(x,y))", "all x y.((Astronomy(x) & Navigates(y)) -> CanBeUsedToNavigate(x,y))", "all x.((Astronomy(x) & Navigates(x)) -> CanBeUsedToNavigate(x))", "all x y z.((Astronomy(x) & Navigating(y) & Navigation(z)) -> CanBeUsedTo(x,y,z))", "(Navigation(astronomy) -> CanBeUsedToNavigate(astronomy))", "all x.(Astronomy(x) -> Navigates(x))", "all x.(Astronomy(x) -> (CanBeUsedToNavigate(x) & Navigate(x)))", "all x y.((Astronomy(x) & Navigating(y)) -> CanBeUsedTo(x,y))", "all x.(Astronomy(x) -> CanBeUsedToNavigate(x))", "all x y.((Astronomy(x) & Navigation(y)) -> CanBeUsedToNavigate(x,y))", "exists x.(Astronomy(x) & Navigate(x))"]}
{"id": "eqasc_validation_93", "nl": "Maps and Navigation Good maps are essential to travelling, both on and off-road.", "fol": "", "prediction": ["all x.(Map(x) -> (GoodMap(x) & EssentialToTravel(x)))", "all x.(Map(x) & Navigation(x)) -> (EssentialToTravel(x) & OnRoad(x) & OffRoad(x)))", "all x.(Maps(x) & Navigation(x) & EssentialToTravel(x) & OnRoad(x) & OffRoad(x))", "all x y.((Map(x) & Navigation(y)) -> (EssentialToTravel(x,y) & OnRoad(x) & OffRoad(x)))", "all x.((Map(x) & Navigation(x)) -> (EssentialToTravel(x) & OnRoad(x) & OffRoad(x)))", "(GoodMaps(map) & GoodNavigationMaps(map))", "all x.((Maps(x) & Navigation(x)) -> (EssentialToTravel(x) & OnRoad(x) & OffRoad(x)))", "(GoodMaps(Maps) & GoodNavigationMaps(Maps))", "((Map(x) & Navigation(x)) -> EssentialToTravel(x))", "((Map(x) | Navigation(x))) -> (EssentialToTravel(x) & OnRoad(x) & OffRoad(x)))", "all x y.((Map(x) & Navigation(y)) -> (GoodMap(x) & EssentialToTravel(x,y) & OnRoad(x) & OffRoad(x)))", "all x y.((Map(x) & Navigation(y)) -> (EssentialToTravel(x,y) & OnRoad(y) & OffRoad(y)))", "all x.(GoodMaps(x) -> (OnRoad(x) | OffRoad(x)))", "all x.(Map(x) -> (GoodMap(x) & EssentialToTravel(x)))", "(GoodMapsAndNavigation(Maps) & EssentialToTravel(Maps))", "(GoodMaps(map) & GoodNavigationMaps(map))"]}
{"id": "eqasc_validation_94", "nl": "knowledge of stars can replace maps while traveling on or off road", "fol": "", "prediction": ["all x.((KnowledgeOfStars(x) & TravelingOnRoad(x)) -> ReplacesMaps(x))", "all x y.((KnowledgeOfStars(x) & TravelingOnRoad(y)) -> ReplacesMaps(x,y))", "all x y z.((KnowledgeOfStars(x) & Map(y) & (OnRoad(z) | OffRoad(z))) -> Replaces(x,y,z))", "all x.((KnowledgeOfStars(x) & (TravelsOnRoad(x) | TravelsOffRoad(x))) -> ReplacesMaps(x))", "(all x.((KnowledgeOfStars(x) & (TravelsOnRoad(x) | TravelsOffRoad(x))) -> ReplacesMaps(x))", "all x y.((KnowledgeOfStars(x) & TravelingOnOrOffRoad(y)) -> ReplacesMaps(x,y))", "all x y.((KnowledgeOfStars(x) & (TravelsOnRoad(y) | TravelsOffRoad(y))) -> ReplacesMaps(x,y))", "all x y.((KnowledgeOfStars(x) & Travel(y) & (OnRoad(y) | OffRoad(y))) -> ReplacesMaps(x,y))", "all x.((KnowledgeOfStars(x) & TravelsOnOrOffRoad(x)) -> ReplacesMaps(x))", "(all x.((KnowledgeOfStars(x) & (TravelsOnRoad(x) | TravelsOffRoad(x))) -> ReplacesMaps(x))", "all x y z.((KnowledgeOfStars(x) & Map(y) & (OnRoad(z) | OffRoad(z))) -> Replaces(x,y,z))", "(ReplacesMapsWithKnowledgeOfStars(x) -> (TravelsOnRoad(x) | TravelsOffRoad(x))))", "all x.((KnowledgeOfStars(x) & (TravelsOnRoad(x) | TravelsOffRoad(x))) -> ReplacesMaps(x))", "all x.(KnowledgeOfStars(x) -> ReplacesMaps(x))", "all x.((KnowledgeOfStars(x) & (TravelOnRoad(x) | TravelOffRoad(x))) -> ReplacesMaps(x))", "all x.((KnowledgeOfStars(x) & TravelingOnRoad(x)) -> ReplacesMaps(x))"]}
{"id": "eqasc_validation_95", "nl": "And every star there ever was is in a constellation.", "fol": "", "prediction": ["all x.(Star(x) -> InConstellation(x))", "all x.((Star(x) & WasInConstellation(x)) -> InConstellation(x))", "(exists x.(Star(x) & InConstellation(x)))", "& all x.exists y.(Star(x) & Constellation(y) & In(x,y))", "all x.(Star(x) -> InConstellation(x))", "-exists x.(Star(x) & InConstellation(x))", "all x y.((Star(x) & Constellation(y)) -> InConstellation(x,y))", "all x.(Star(x) -> Constellation(x))", "all x.((Star(x) & EverBeen(x)) -> InConstellation(x))", "(all x.(Star(x) & EverBeen(x)) -> InConstellation(x))", "(all x.(Star(x) & ThereEverBeen(x)) -> InConstellation(x))", "(exists x.(Star(x) & InConstellation(x)))", "all x.(Star(x) -> InConstellation(x))", "all x.(Star(x) -> Constellation(x))", "all x.(Star(x) & EverBeenInConstellation(x))", "all x.(Star(x) -> InConstellation(x))"]}
{"id": "eqasc_validation_96", "nl": "knowledge of constellations can be used to navigate", "fol": "", "prediction": ["all x.((KnowledgeOfConstellations(x) & Navigates(x)) -> CanBeUsedToNavigate(x))", "all x y.((KnowledgeOfConstellations(x) & Navigate(y)) -> CanBeUsedToNavigate(x,y))", "all x.(ConstellationKnowledge(x) -> Navigates(x))", "(KnowledgeOfConstellations(KnowledgeOfConstellations) -> NavigatesConstellations(KnowledgeOfConstellations(KnowledgeOfConstellations))", "all x y z.((KnowledgeOfConstellations(x) & KnowledgeOfConstellations(y) & Navigation(z)) -> CanBeUsedToNavigate(x,y,z))", "all x.((KnowledgeOfConstellations(x) & Navigate(x)) -> CanBeUsedToNavigate(x))", "all x y.((KnowledgeOfConstellations(x) & Navigates(y)) -> CanBeUsedToNavigate(x,y))", "all x.(KnowledgeOfConstellations(x) -> NavigatesConstellations(x))", "(all x.(ConstellationKnowledge(x) -> Navigates(x)))", "all x y.((Constellation(x) & KnowledgeOf(y,x)) -> Navigates(x))", "all x.(ConstellationKnowledge(x) -> Navigates(x))", "all x.((KnowledgeOfConstellations(x) & NavigatesConstellations(x)) -> CanBeUsedToNavigate(x))", "all x y z.((Constellation(x) & KnowledgeOf(y,z)) -> CanNavigate(x,y,z))", "all x y.((KnowledgeOfConstellations(x) & Navigation(y)) -> CanBeUsedToNavigate(x,y))", "exists x.(KnowledgeOfConstellations(x) & Navigates(x))", "all x.(ConstellationKnowledge(x) -> Navigates(x))"]}
{"id": "eqasc_validation_97", "nl": "Explorers have used the North Star for navigational purposes for centuries.", "fol": "", "prediction": ["all x y.((Explorer(x) & NorthStar(y)) -> UsedForNavigation(x,y))", "all x.((Explorer(x) & NorthStar(y)) -> UsedForNavigation(x,y))", "all x y z.((Explorer(x) & NorthStar(y) & NavigationalPurpose(z)) -> UsedFor(x,y,z))", "all x.(Explorer(x) -> (UsedNorthStarForNavigation(x) & ForCentury(x)))", "all x y.((Explorer(x) & NorthStar(y)) -> UsedForNavigation(x,y))", "(UsedForNavigationalPurposes(explorers,NorthStar) & ForCentury(explorers,Century(explorers))", "all x.((Explorer(x) & NorthStar(x)) -> UsedForNavigation(x))", "(all x.(NorthStar(x) -> NavigationalPurpose(x)))", "all x y z.((Explorer(x) & NorthStar(y) & NavigationalPurpose(z) & UsedFor(x,y,z)) -> UsesFor(x,y,z))", "all x y.((Explorer(x) & NorthStar(y)) -> UsedForNavigation(x,y))", "all x.(Explorer(x) -> (UsedNorthStarForNavigation(x) & ForCentury(x)))", "(all x.(NorthStar(x) -> NavigationalPurpose(x)))", "all x.((Explorer(x) & NorthStar(y)) -> UsedForNavigation(x,y))", "all x y.((Explorer(x) & NorthStar(y)) -> UsesForNavigation(x,y))", "all x.(Explorer(x) -> UsedNorthStarForNavigation(x))", "all x y.((Explorer(x) & NorthStar(y)) -> UsedForNavigation(x,y))"]}
{"id": "eqasc_validation_98", "nl": "You can use the north star for directions if you have the knowledge ", "fol": "", "prediction": ["all x.((NorthStar(x) & Knowledge(x)) -> CanUseForDirections(x))", "all x y.((NorthStar(x) & Knowledge(y) & UsesForDirections(x,y)) -> HasKnowledge(x,y))", "all x.((NorthStar(x) & Knowledge(x)) -> CanUseForDirections(x))", "(UseNorthStarForDirections(x) -> HasKnowledge(x))", "all x y z.((NorthStar(x) & Knowledge(y) & Knowledge(z) & UsesForDirections(x,y,z)) -> HasKnowledge(x,y,z))", "all x y.((NorthStar(x) & Knowledge(x) & Uses(x,y)) -> Directions(y))", "(all x.((NorthStar(x) & Knowledge(x)) -> CanUseForDirections(x)))", "all x.((NorthStar(x) & Knowledge(x)) -> CanUseForDirections(x))", "all x.((NorthStar(x) & Knowledge(x)) -> CanSurveyDirections(x))", "exists x.(NorthStar(x) & Knowledge(x) & UsesNorthStar(x))", "all x.((NorthStar(x) & Knowledge(x)) -> UsesForDirections(x))", "all x y.((NorthStar(x) & Knowledge(y) & UsesForDirections(x,y)) -> HasKnowledge(x))", "all x.((NorthStar(x) & KnowledgeOf(x)) -> CanUseForDirections(x))", "all x y.((NorthStar(x) & Knowledge(y)) -> CanUseForDirections(x,y))", "exists x.(NorthStar(x) & UsesForDirections(x) & KnowledgeOf(x,y))", "all x.((NorthStar(x) & Knowledge(x)) -> CanDirections(x))"]}
{"id": "eqasc_validation_99", "nl": "Knowledge of the stars can be used to orient explorers", "fol": "", "prediction": ["all x y.((KnowledgeOfStars(x) & Explorer(y)) -> Orients(x,y))", "all x y z.((KnowledgeOfStars(x) & Explorer(y) & Explorer(z)) -> Orients(x,y,z))", "all x.(KnowledgeOfStars(x) -> OrientExplorers(x))", "all x.((KnowledgeOfStars(x) & OrientExplorers(x)) -> CanBeUsedToOrient(x))", "(KnowledgeOfStars(KnowledgeOfStars) & OrientExplorers(KnowledgeOfStars(KnowledgeOfStars))", "(KnowledgeOfStars(k) & OrientExplorers(k))", "all x y.((KnowledgeOfStars(x) & Explorer(y)) -> Orients(x,y))", "all x y z.((KnowledgeOfStars(x) & Explorer(y) & Explorer(z)) -> Orients(x,y,z))", "all x.(KnowledgeOfStars(x) -> OrientsExplorers(x))", "all x.((KnowledgeOfStars(x) & OrientExplorers(x)) -> CanBeUsedToOrient(x,explorers))", "all x y.((Knowledge(x) & Stars(y)) -> OrientsExplorers(x,y))", "all x y.((KnowledgeOfStars(x) & Explorer(y)) -> CanOrient(x,y))", "all x y z.((KnowledgeOfStars(x) & Explorer(y) & Explorer(z)) -> CanOrient(x,y,z))", "all x.(KnowledgeOfStars(x) -> OrientExplorers(x))", "all x.((KnowledgeOfStars(x) & OrientExplorers(x)) -> CanBeUsedToOrient(x))", "all x y.((KnowledgeOfStars(x) & Explorer(y)) -> CanOrient(x,y))"]}
{"id": "eqasc_validation_100", "nl": "Star Star Generally speaking, the star is a symbol of hope and guidance in the midst of uncertainty.", "fol": "", "prediction": ["all x.(StarStar(x) -> (SymbolOfHope(x) & SymbolOfGuidance(x) & InUncertainty(x)))", "all x y.((StarStar(x) & Uncertainty(y)) -> (SymbolOfHopeAndGuidance(x,y)))", "(SymbolOfHopeAndGuidance(StarStar) & InUncertainty(StarStar))", "(SymbolOfHopeAndGuidance(StarStar) & InUncertainty(StarStar))", "all x.(StarStar(x) -> (SymbolOfHope(x) & SymbolOfGuidance(x) & InUncertainty(x)))", "all x.(StarStar(x) -> (SymbolOfHopeAndGuidance(x) & InUncertainty(x)))", "all x.(StarStar(x) -> (SymbolOfHope(x) & SymbolOfGuidance(x) & InUncertainty(x)))", "all x y.(StarStar(x) -> (SymbolOfHope(x) & SymbolOfGuidance(x) & InUncertainty(y)))", "all x y.((StarStar(x) & Uncertainty(y)) -> (SymbolOfHopeAndGuidance(x,y)))", "all x y z.((StarStar(x) & Hope(y) & Guidance(z)) -> SymbolOf(x,y,z))", "all x y.(StarStar(x) -> (SymbolOfHopeAndGuidance(x) & InUncertainty(y)))", "all x.(StarStar(x) -> (SymbolOfHopeAndGuidance(x) & InUncertainty(x)))", "all x.(StarStar(x) -> (SymbolOfHope(x) & SymbolOfGuidance(x) & Uncertainty(x)))", "all x.(StarStar(x) -> (SymbolOfHope(x) & SymbolOfGuidance(x) & InUncertainty(x)))", "all x.(StarStar(x) -> (SymbolOfHope(x) & SymbolOfGuidance(x) & InUncertainty(x)))", "All x.(StarStar(x) -> (SymbolOfHopeAndGuidance(x) & InUncertainty(x)))"]}
{"id": "eqasc_validation_101", "nl": "Uncertainty can be overcome by navigation. ", "fol": "", "prediction": ["all x.(Uncertainty(x) -> CanBeOvercomeByNavigation(x))", "all x.(Uncertainty(x) -> OvercomeByNavigation(x))", "(OvercomeUncertainty(Uncertainty) & Navigation(Uncertainty))", "all x y.((Uncertainty(x) & Navigation(y)) -> Overcome(x,y))", "(OvercomeUncertaintyByNavigation(uncertainty))", "all x y.((Uncertainty(x) & Navigation(y)) -> CanBeOvercome(x,y))", "all x.(Uncertainty(x) -> CanBeOvercomeByNavigation(x))", "all x.(Uncertainty(x) -> OvercomeByNavigation(x))", "all x.(Uncertainty(x) -> CanBeOverwhelmedByNavigation(x))", "all x y.((Uncertainty(x) & Navigation(y)) -> Overcomes(x,y))", "all x y.((Uncertainty(x) & Navigation(y)) -> CanBeOvercome(x,y))", "all x.(Uncertainty(x) -> OvercomeByNavigation(x))", "all x.(Uncertainty(x) -> CanBeOvercomeByNavigation(x))", "all x.(Uncertainty(x) -> OverwhelmedByNavigation(x))", "exists x.(Uncertainty(x) & OvercomeByNavigation(x))", "exists x.(Uncertainty(x) & Overcome(x,Navigation))"]}
{"id": "eqasc_validation_102", "nl": "Navigation is a key element of space travel.", "fol": "", "prediction": ["all x.(Navigation(x) -> SpaceTravelElement(x))", "all x y.((Navigation(x) & SpaceTravel(y)) -> KeyElement(x,y))", "all x.(Navigation(x) -> SpaceTravelKeyElement(x))", "all x y.((SpaceTravel(x) & Navigation(y)) -> KeyElement(x,y))", "(KeyElementOfSpaceTravel(navigation)", "all x.(Navigation(x) -> KeyElementOfSpaceTravel(x))", "all x.(Navigation(x) -> SpaceTravelElement(x))", "all x.(SpaceTravel(x) -> KeyElement(x))", "all x y.((Navigation(x) & SpaceTravel(y)) -> KeyElement(x,y))", "(KeyElementOfSpaceTravel(navigation)", "all x y.((SpaceTravel(x) & Navigation(y)) -> KeyElement(y,x))", "exists x.(Navigator(x) & SpaceTravel(x) & KeyElement(x))", "all x.(Navigate(x) -> SpaceTravelElement(x))", "(KeyElementOfSpaceTravel(navigation)", "all x.(Navigation(x) -> SpaceTravel(x))", "all x.(Navigation(x) -> KeyElementOfSpaceTravel(x))"]}
{"id": "eqasc_validation_103", "nl": "Knowledge of the stars can be used to travel.", "fol": "", "prediction": ["all x.(KnowledgeOfStars(x) -> CanBeUsedToTravel(x))", "all x.((KnowledgeOfStars(x) & Travel(x)) -> CanBeUsedTo(x))", "all x y.((Star(x) & Knowledge(y)) -> CanBeUsedToTravel(x,y))", "all x.(KnowledgeOfStars(x) -> CanBeUsedToTravel(x))", "all x y.((Knowledge(x) & Star(y)) -> CanBeUsedToTravel(x,y))", "all x y.((Star(x) & Knowledge(y)) -> CanBeUsedToTravel(x))", "all x y z.((KnowledgeOfStars(x) & Travel(y) & Star(z)) -> CanBeUsedTo(x,y,z))", "all x.((KnowledgeOfStars(x) & Travel(x)) -> CanBeUsed(x))", "all x.(KnowledgeOfStars(x) -> CanBeUsedToTravel(x))", "all x y.((Star(x) & KnowledgeOf(y,x)) -> CanBeUsedToTravel(x,y))", "all x y.((Knowledge(x) & Star(y)) -> CanBeUsedToTravel(x,y))", "exists x.(StarKnowledge(x) & CanBeUsedToTravel(x))", "exists x.(StarKnowledge(x) & UsedToTravel(x))", "exists x.(Star(x) & KnowledgeOf(x,y))", "all x.(KnowledgeOfStars(x) -> Travel(x))", "all x y.((Star(x) & Knowledge(y)) -> CanBeUsedToTravel(x,y))"]}
{"id": "eqasc_validation_104", "nl": "Of course, astronomers also study stars.", "fol": "", "prediction": ["all x.(Astronomer(x) -> StudiesStars(x))", "all x y.((Astronomer(x) & Star(y)) -> Studies(x,y))", "(StudiesStars(astronomer) | StudiesStars(astronomer))", "all x.(Astronomer(x) -> StudiesStars(x))", "(all x.(Astronomer(x) -> StudiesStars(x)))", "all x y.((Astronomer(x) & Star(y)) -> Studies(x,y))", "all x y z.((Astronomer(x) & Star(y) & Star(z)) -> Studies(x,y,z))", "(all x.(Astronomer(x) -> StudiesStars(x)))", "all x.(Astronomer(x) -> StudiesStars(x))", "all x y.((Astronomer(x) & Star(y)) -> Studies(x,y))", "all x.(Astronomer(x) -> StudiesStars(x))", "exists x.(Astronomer(x) & StudiesStar(x))", "all x y.((Astronomer(x) & Star(y)) -> Studies(x,y))", "all x y.((Astronomer(x) & Star(y)) -> Studies(x,y))", "exists x.(Astronomer(x) & StudyStars(x))", "exists x.(Astronomer(x) & StudiesStar(x))"]}
{"id": "eqasc_validation_105", "nl": "astronomy can be used to navigate", "fol": "", "prediction": ["all x.(Astronomy(x) -> Navigates(x))", "all x y.((Astronomy(x) & Navigate(y)) -> CanBeUsedToNavigate(x,y))", "all x y z.((Astronomy(x) & Navigation(y) & Navigation(z)) -> CanBeUsedToNavigate(x,y,z))", "all x.(Astronomy(x) -> Navigates(x))", "(Navigation(astronomy) -> CanBeUsedToNavigate(astronomy,n))", "all x y.((Astronomy(x) & Navigate(y)) -> CanBeUsedToNavigate(x,y))", "all x y.((Astronomy(x) & Navigation(y)) -> CanBeUsedToNavigate(x,y))", "all x y z.((Astronomy(x) & Navigate(y) & Navigation(z)) -> CanBeUsedTo(x,y,z))", "all x.(Astronomy(x) -> Navigate(x))", "all x.(Astronomy(x) -> CanBeUsedToNavigate(x))", "all x y.((Astronomy(x) & Navigates(y)) -> CanBeUsedToNavigate(x,y))", "all x.(Astronomy(x) -> (CanBeUsedToNavigate(x) & Navigate(x)))", "all x y.((Astronomy(x) & Navigation(y)) -> CanBeUsedToNavigate(x,y))", "all x.(Astronomy(x) -> Navigates(x))", "all x.(Astronomy(x) -> CanNavigate(x))", "exists x.(Astronomy(x) & Navigate(x))"]}
{"id": "eqasc_validation_106", "nl": "friction is used for stopping a vehicle by brakes", "fol": "", "prediction": ["all x y.((Vehicle(x) & Brake(y)) -> StopsBy(x,y))", "all x y z.((Vehicle(x) & Brake(y) & Friction(z)) -> StopsBy(x,y,z))", "all x.(Friction(x) -> UsedForStoppingVehicleByBrakes(x))", "(StopsVehicleByBrakes(friction) -> UsedForStoppingVehicleByBrakes(friction))", "all x y.((Vehicle(x) & Brake(y)) -> UsedForStopping(x,y))", "all x.((Vehicle(x) & Brakes(x)) -> StopsBy(x,y))", "all x y.((Vehicle(x) & Vehicle(y) & Brakes(x,y)) -> FrictionStopsBy(x,y))", "all x y z.((Vehicle(x) & Brake(y) & Friction(z)) -> Stops(x,y,z))", "(StopsVehicleByBrakes(friction,friction) & UsesForBreaking(friction,friction))", "all x.((Friction(x) & Brakes(x)) -> StopsVehicle(x))", "all x.(Friction(x) -> UsedForStoppingVehicleByBrakes(x))", "all x y z.((Vehicle(x) & Brake(y) & Friction(z)) -> UsedForStopping(x,y,z))", "all x y z.((Vehicle(x) & Vehicle(y) & Brake(z) & UsedForStopping(x,y,z)) -> Brakes(x,y,z))", "all x.(Friction(x) -> StopsVehicleByBrakes(x))", "all x y.((Vehicle(x) & Vehicle(y) & Brakes(z)) -> StopsBy(x,y,z))", "all x y.((Vehicle(x) & Brake(y)) -> StopsBy(x,y))"]}
{"id": "eqasc_validation_107", "nl": "Brakes are also involved when the vehicle is on an incline.", "fol": "", "prediction": ["all x.((Vehicle(x) & OnIncline(x)) -> BrakesInvolved(x))", "all x y.((Vehicle(x) & Inincline(y)) -> BrakesInvolved(x,y))", "all x.((Vehicle(x) & OnIncline(x)) -> BrakesInvolved(x))", "all x y z.((Vehicle(x) & Inincline(y) & Brake(z)) -> Involved(x,y,z))", "all x y.((Vehicle(x) & Inincline(y)) -> BrakesInvolved(x,y))", "all x y.((Vehicle(x) & Incline(y) & On(x,y)) -> BrakesInvolved(x))", "exists x.(Vehicle(x) & OnIncline(x)) -> BrakesInvolved(x))", "(all x.((Vehicle(x) & OnIncline(x)) -> BrakesInvolved(x))", "all x.((Vehicle(x) & OnIncline(x)) -> BrakesInvolved(x))", "all x y.((Vehicle(x) & Inincline(y)) -> BrakesInvolved(x,y))", "all x.((Vehicle(x) & Inincline(x)) -> BrakesInvolved(x))", "exists x.(Vehicle(x) & OnIncline(x)) -> BrakesInvolved(x))", "exists x.(Vehicle(x) & OnIndice(x) & BrakesInvolved(x))", "all x.((Vehicle(x) & OnIndice(x)) -> BrakesInvolved(x))", "all x y.((Vehicle(x) & Inincline(y)) -> Brake(x,y))", "all x y.((Vehicle(x) & Incline(y)) -> Brake(x,y))"]}
{"id": "eqasc_validation_108", "nl": "friction is used to stop a vehicle on an incline", "fol": "", "prediction": ["all x y.((Vehicle(x) & Inincline(y)) -> UsedToStopOn(x,y))", "all x y z.((Vehicle(x) & Indice(y) & Friction(z)) -> StopsOn(x,y,z))", "all x.((Vehicle(x) & Inincline(x)) -> UsedToStopOn(x,y))", "(StopsVehicleOnIncline(friction,incline) -> UsedToStopVehicle(friction,incline))", "all x y.((Vehicle(x) & Incline(y)) -> UsedForStop(x,y))", "all x.(Friction(x) -> StopsVehicleOnIncline(x))", "all x y.((Vehicle(x) & Vehicle(y) & Inincline(y)) -> UsedToStopOn(x,y))", "all x y z.((Vehicle(x) & Incline(y) & Friction(z)) -> StopsOn(x,y,z))", "(all x y.((Vehicle(x) & Inincline(y)) -> StopsOn(x,y)))", "all x y z.((Vehicle(x) & Inincline(y) & Friction(z) & StopsOn(x,y,z)) -> UsedToStopOn(x,y,z))", "all x y z.((Vehicle(x) & Incline(y) & Friction(z) & StopsOn(x,y,z)) -> UsedToStopOn(x,y,z))", "all x.((Vehicle(x) & Incline(x)) -> UsedForStop(x,y))", "all x.(Friction(x) -> StopsVehicleOnIndice(x))", "all x y.((Vehicle(x) & Indice(y)) -> FrictionStopsOn(x,y))", "all x y.((Vehicle(x) & Vehicle(y) & Inincline(x,y)) -> UsedForStopOn(x,y))", "all x.((Vehicle(x) & Inincline(x)) -> UsedToStopOnIncline(x))"]}
{"id": "eqasc_validation_109", "nl": "Fishtailing or severe braking at high speed can cause jackknifing and rollover.", "fol": "", "prediction": ["all x.((Fishtailing(x) | SevereBrakingAtHighSpeed(x)) -> (CausesJackknifing(x) & CausesRollover(x)))", "all x y.((Fishtailing(x) | SevereBrakingAtHighSpeed(x)) -> (CausesJackknifing(y) & CausesRollover(y)))", "all x.((Fishtailing(x) | SevereBraking(x)) -> (CausesJackknifing(x) & CausesRollover(x)))", "all x y.((Fishtailing(x) | SevereBraking(x) & HighSpeed(y)) -> (CausesJackknifing(x) & CausesRollover(x)))", "(CausesJackknifing(fishtailing) & CausesRollover(fishtailing))", "all x y z.((Fishtailing(x) | SevereBrakingAtHighSpeed(x) & HighSpeed(y) & HighSpeed(z)) -> (CausesJackknifing(x) & CausesRollover(x)))", "all x.((Fishtailing(x) | SevereBreakout(x)) -> (CausesJackknifing(x) & CausesRollover(x)))", "all x.((Fishtailing(x) | SevereBrakingAtHighSpeed(x)) -> (CausesJackknifing(x) & CausesRollover(x)))", "all x.((Fishing(x) | SevereBrakingAtHighSpeed(x)) -> (CausesJackknifing(x) & CausesRollover(x)))", "(all x.((Fishtailing(x) | SevereBraking(x)) & HighSpeed(x)) -> CausesJackknifingAndRollover(x))", "all x.((Fishing(x) | SevereBraking(x)) -> (CausesJackknifing(x) & CausesRollover(x)))", "(all x.((Fishtailing(x) | SevereBrakingAtHighSpeed(x)) -> CausesJackknifingAndRollover(x)))", "all x y.((Fishtailing(x) | SevereBreakout(x) & HighSpeed(y)) -> (CausesJackknifing(x) & CausesRollover(x)))", "all x y.((Fishtailing(x) | SevereBrakingAtHighSpeed(x)) -> (CausesJackknifing(y) & CausesRollover(y)))", "all x.((Fishtailing(x) | SevereBraking(x)) -> (CausesJackknifing(x) & CausesRollover(x)))", "all x.((Fishtailing(x) | SevereBreathingAtHighSpeed(x)) -> (CausesJackknifing(x) & CausesRollover(x)))"]}
{"id": "eqasc_validation_110", "nl": "Friction can cause jackknifing and rollover in a vehicle.", "fol": "", "prediction": ["all x.(Friction(x) -> (CausesJackknifing(x) & CausesRollover(x)))", "all x y.((Friction(x) & Vehicle(y)) -> (CausesJackknifing(x,y) & CausesRollover(x,y)))", "all x y z.((Friction(x) & Vehicle(y) & Vehicle(z)) -> (CausesJackknifing(x,y) & CausesRollover(x,z)))", "all x.((Friction(x) & Vehicle(y)) -> (CausesJackknifing(x) & CausesRollover(x)))", "all x.(Friction(x) -> (CausesJackknifing(x) & CausesRollover(x)))", "all x y.((Friction(x) & Vehicle(y)) -> (CausesJackknifing(x,y) & CausesRollover(x,y)))", "(all x.(Friction(x) -> (CausesJackknifing(x) & CausesRollover(x))))", "all x y z.((Friction(x) & Vehicle(y) & Vehicle(z)) -> (CausesJackknifing(x,y) & CausesRollover(x,z)))", "all x.(Friction(x) -> (CausesJackknifing(x) & CausesRollover(x)))", "all x y.((Friction(x) & Vehicle(y)) -> (CausesJackknifing(x,y) & CausesRollover(x,y)))", "(all x.(Friction(x) -> (CausesJackknifing(x) & CausesRollover(x)))", "all x.(Friction(x) -> (CausesJackknifing(x) & CausesRollover(x)))", "all x y.((Friction(x) & Vehicle(y)) -> (CausesJackknifing(x,y) & CausesRollover(x,y)))", "all x y.((Friction(x) & Vehicle(y)) -> (CausesJackknifing(x,y) | CausesRollover(x,y)))", "all x.(Friction(x) -> (CausesJackknifing(x) & CausesRollover(x)))", "all x.(Friction(x) -> (CausesJackknifing(x) & CausesRollover(x)))"]}
{"id": "eqasc_validation_111", "nl": "Brake dust is produced during the friction of braking.", "fol": "", "prediction": ["all x.(BrakeDust(x) -> ProducedDuringFrictionOfBraking(x))", "all x y.((BrakeDust(x) & Braking(y)) -> ProducedDuringFriction(x,y))", "(ProducedBreakfastDust(brake) & FrictionOfBraking(brake))", "all x y z.((BrakeDust(x) & Friction(y) & Braking(z)) -> ProducedDuring(x,y,z))", "all x y.((BrakeDust(x) & FrictionOfBreathing(y)) -> ProducedDuring(x,y))", "all x.(BrakeDust(x) -> ProducedDuringFrictionOfBraking(x))", "(FrictionOfBraking(brakeDust) -> ProducedDuring(brakeDust))", "all x y.((BrakeDust(x) & BrakeFriction(y)) -> ProducedDuring(x,y))", "(ProducedBreakfastDust(brake) & FrictionOfBreaching(brake))", "all x.(BrakeDust(x) -> ProducedDuringFrictionOfBreathing(x))", "all x y.((BrakeDust(x) & FrictionOfBraking(y)) -> ProducedDuring(x,y))", "all x.(BrakeDust(x) -> ProducedByFrictionOfBraking(x))", "all x y.((BrakeDust(x) & Braking(y)) -> ProducedDuringFrictionOf(x,y))", "all x.(BrakeDust(x) -> ProducedDuringFrictionOfBraking(x))", "all x.(BrakeDust(x) -> ProducedDuringFrictionOfBraking(x))", "all x.(BrakeDust(x) -> ProducedByFloidOfBreathing(x))"]}
{"id": "eqasc_validation_112", "nl": "Stopping a vehicle produces brake dust.", "fol": "", "prediction": ["all x.((Vehicle(x) & Stops(x)) -> ProducesBrakeDust(x))", "all x y.((Vehicle(x) & Stopping(x,y)) -> ProducesBrakeDust(x))", "all x y z.((Vehicle(x) & Stopping(x,y) & BrakeDust(z)) -> Produces(x,z))", "all x.((Vehicle(x) & Stops(x)) -> ProducesBrakeDust(x))", "all x.(StoppingVehicle(x) -> ProducesBrakeDust(x))", "all x y.((Vehicle(x) & Stops(x,y)) -> ProducesBrakeDust(x))", "all x y.((Vehicle(x) & Vehicle(y)) -> StopsProducesBrakeDust(x,y))", "all x y z.((Vehicle(x) & Stopping(x,y) & BrakeDust(z)) -> Produces(x,z))", "all x.((Vehicle(x) & Stops(x)) -> ProducesBrakeDust(x))", "all x.(Stopping(x) -> ProducesBrakeDust(x))", "all x.((Vehicle(x) & Stops(x,y)) -> ProducesBrakeDust(x,y))", "all x y.((Vehicle(x) & Stopping(x,y)) -> ProducesBrakeDust(x))", "all x.(StopsVehicle(x) -> ProducesBrakeDust(x))", "all x y.((Vehicle(x) & Vehicle(y)) -> StopsProducesBrakeDust(x,y))", "all x.((Vehicle(x) & Stops(x)) -> ProducesBrakeDust(x))", "All x y.((Vehicle(x) & Stops(x,y)) -> ProducesBrakeDust(x,y))"]}
{"id": "eqasc_validation_113", "nl": "Brakes are applied to the rear wheels on No. 2 truck.", "fol": "", "prediction": ["all x.((Truck(x) & No.2(x)) -> BrakesApplicationToRearWheels(x))", "all x y.((Truck(x) & Truck(y)) -> BrakesApplication(x,y))", "all x.((Truck(x) & No.2Truck(x)) -> BrakesApplicationToRearWheels(x))", "(AppliesBrakesToRearWheels(Brakes) & No.2Truck(Truck))", "all x y.((Truck(x) & Truck(y)) -> AppliesBrakesToRearWheels(x,y))", "all x y z.((Truck(x) & Brake(y) & Wheels(z) & No.2(x,y,z)) -> AppliesTo(y,z))", "all x.((Truck(x) & No2(x)) -> BrakesApplication(x))", "all x y z.((Truck(x) & Truck(y) & Brake(z) & AppliesToRearWheels(x,y,z)) -> No.2(x))", "(AppliesBrakesToRearWheels(Brakes,No.2) Truck(Brakes,No.2))", "(all x.(Brake(x) -> AppliesToRearWheels(x)))", "all x.((Truck(x) & No.2Truck(x)) -> AppliesBrakesToRearWheels(x))", "all x.(BrakesApplicationToRearWheelsOnNo.2Truck(x) -> Truck(x))", "all x y.((Truck(x) & Truck(y)) -> BrakesAppliedToRearWheels(x,y))", "all x y.((Truck(x) & Truck(y)) -> (AppliesBrakesToRearWheels(x,y) & No.2Truck(x)))", "All x.(Brake(x) -> AppliesToRearWheels(x))", "all x.((Truck(x) & No2(x)) -> AppliesBrakesToRearWheels(x))"]}
{"id": "eqasc_validation_114", "nl": "friction is used for stopping trucks", "fol": "", "prediction": ["all x y.((Friction(x) & Truck(y)) -> Stops(x,y))", "all x.(Friction(x) -> UsedForStoppingTrucks(x))", "all x y.((Truck(x) & Truck(y)) -> (UsedForStopping(x,y) & UsedForStopping(x,y)))", "all x y z.((Truck(x) & Truck(y) & Truck(z)) -> (UsedForStopping(x,y,z) & UsedForStopping(x,y)))", "all x.((Friction(x) & Truck(y)) -> Stops(x,y))", "(StopsTrucksWithFriction(friction) & StopsTrucksWithFriction(friction))", "all x.(Friction(x) -> StopsTrucks(x))", "all x y.((Friction(x) & Truck(y)) -> Stops(x,y))", "all x y z.((Friction(x) & Truck(y) & Truck(z)) -> Stops(x,y,z))", "(all x.(Friction(x) -> StopsTrucks(x)))", "(StopsTrucksWithFriction(friction) & StopsTrucksWithFriction(friction))", "(StopsTrucks(friction) & UsedForStoppingTrucks(friction))", "all x y.((Truck(x) & Truck(y)) -> Stops(x,y))", "all x.(Friction(x) -> UsedForStoppingTrucks(x))", "all x.((Friction(x) & Truck(y)) -> Stops(x,y))", "all x.(Friction(x) -> StopsTrucks(x))"]}
{"id": "eqasc_validation_115", "nl": "Friction is a Force that opposes motion.", "fol": "", "prediction": ["all x.(Friction(x) -> OpposesMotion(x))", "all x y.((Friction(x) & Motion(y)) -> Opposes(x,y))", "all x.(Friction(x) -> OpposesMotion(x))", "(OpposesMotion(Friction) -> Force(Friction))", "(OpposesMotion(Friction) | OpposesMotion(Friction))", "all x y.((Friction(x) & Motion(y)) -> Opposes(x,y))", "all x.(Friction(x) -> OpposesMotion(x))", "all x.(Friction(x) -> OpposesMotion(x))", "all x.(Friction(x) -> OpposesMotion(x))", "exists x.(Friction(x) & Force(x) & OpposesMotion(x))", "all x.(Friction(x) -> OpposesMotion(x))", "all x y.((Friction(x) & Motion(y)) -> Opposes(x,y))", "(OpposesMotion(Friction) -> Force(Friction))", "all x.((Friction(x) & OpposesMotion(x)) -> Force(x))", "all x.(Friction(x) -> OpposesMotion(x))", "all x.(Friction(x) -> OpposesMotion(x))"]}
{"id": "eqasc_validation_116", "nl": "A force that opposes motion is used for stopping vehicles by brakes.", "fol": "", "prediction": ["all x.((Force(x) & OpposesMotion(x)) -> UsedForStoppingVehiclesByBrakes(x))", "all x y.((Force(x) & OpposesMotion(x)) -> UsedForStoppingVehiclesByBrakes(x))", "all x y.((Force(x) & Motion(y) & Opposes(x,y)) -> UsedForStopByBrakes(x))", "all x.((Force(x) & OpposesMotion(x)) -> UsedForStoppingVehiclesByBrakes(x))", "all x.(OpposesMotion(x) -> StopsVehiclesByBrakes(x))", "all x y z.((Force(x) & Motion(y) & Brakes(z) & Opposes(x,y)) -> StopsVehicles(x,z))", "all x.((Force(x) & OpposesMotion(x)) -> StopsVehiclesByBrakes(x))", "all x y.((Force(x) & OpposesMotion(x) & Vehicle(y)) -> UsedForStopByBrakes(x,y))", "all x.(OpposesMotion(x) -> UsedForStoppingVehiclesByBrakes(x))", "all x y.((Force(x) & ForceOpposesMotion(x) & Vehicle(y)) -> UsedForStoppingByBrakes(x,y))", "all x y.((Force(x) & Motion(y) & Opposes(x,y)) -> StopsVehiclesByBrakes(x))", "all x.(OpposesMotionForce(x) -> UsedForStoppingVehiclesByBrakes(x))", "all x.((Force(x) & OpposesMotion(x)) -> UsedForStopByBrakes(x))", "all x.((Force(x) & OpposesMotion(x)) -> StopsVehiclesByBrakes(x))", "all x y.((Force(x) & OpposesMotion(x)) -> StopsVehiclesByBrakes(x,y))", "all x.((Force(x) & OpposesMotion(x)) -> UsedForStopVehiclesByBrakes(x))"]}
{"id": "eqasc_validation_117", "nl": "Typically the smoother the surface is the less friction.", "fol": "", "prediction": ["all x.(SmootherSurface(x) -> LessFriction(x))", "all x.((SmootherSurface(x) & LessFriction(x)) -> Smoother(x))", "all x y.((SmootherSurface(x) & SmootherSurface(y)) -> LessFriction(x))", "(SmootherSurface(x) & LessFriction(x))", "Typically, the smoothertheSurface(x) the lessFriction(x))", "the smoothertheSurface(x) -> LessFriction(x))", "all x.(SmootherSurface(x) -> LessFriction(x))", "all x y.((SmootherSurface(x) & SmootherSurface(y)) -> LessFriction(x,y))", "all x.((SmootherSurface(x) & LessFriction(x)) -> Smoother(x))", "(SmootherSurface(x) -> LessFriction(x))", "all x.(SmootherSurface(x) -> LessFriction(x))", "all x.(ShaferSurface(x) -> LessFriction(x))", "all x y.((SmootherSurface(x) & SmootherSurface(y)) -> LessFriction(x))", "all x.((SmootherSurface(x) & LessFriction(x)) -> SmootherSurface(x))", "all x y.((SmootherSurface(x) & SmootherSurface(y)) -> LessFriction(y))", "all x.(SmootherSurface(x) -> LessFriction(x))"]}
{"id": "eqasc_validation_118", "nl": "Brakes are less effective at stopping vehicles on smooth surfaces", "fol": "", "prediction": ["all x y.((Brake(x) & Vehicle(y)) -> (StopsOnSmoothSurfaces(x,y) & LessEffectiveAtStopsOnSmoothSurfaces(x,y)))", "all x.(Brake(x) -> (LikelerEffectiveAtStoppingVehicles(x) & SmoothSurface(x)))", "all x y z.((Brake(x) & Vehicle(y) & SmoothSurface(z)) -> LessEffectiveAtStop(x,y,z))", "all x.(Brake(x) -> (StopsVehiclesOnSmoothSurfaces(x) & LessEffectiveAtStopsVehiclesOnSmoothSurfaces(x)))", "all x y.((Brake(x) & Vehicle(y)) -> (Likelimer(x,y) & StopsOnSmoothSurfaces(x,y)))", "(-EffectiveBreaksAtStoppingVehicles(Brakes) & SmoothSurfaces(Brakes))", "all x y.((Brake(x) & Vehicle(y) & SmoothSurface(y)) -> LessEffectiveAtStop(x,y))", "(all x.(Brake(x) -> LessEffectiveAtStoppingVehicles(x)))", "all x.(Brake(x) -> (LowerEffectiveAtStoppingVehicles(x) & SmoothSurface(x)))", "all x y z.((Brake(x) & Vehicle(y) & SmoothSurface(z)) -> (LikellyEffective(x,y,z) & StopsOn(x,y,z)))", "all x.(Brake(x) -> (StopsVehiclesOnSmoothSurfaces(x) & LessEffectiveAtStopsVehiclesOnSmoothSurfaces(x)))", "all x.(Brake(x) -> LessEffectiveAtStoppingVehiclesOnSmoothSurfaces(x))", "all x.(Brake(x) -> (LessEffectiveAtStoppingVehiclesOnSmoothSurfaces(x) & OnSmoothSurfaces(x)))", "all x y.((Brake(x) & Vehicle(y)) -> LessEffectiveAtStopping(x,y))", "all x y z.((Brake(x) & Vehicle(y) & SmoothSurface(z)) -> LessEffectiveAtStopping(x,y,z))", "all x y.((Brake(x) & Vehicle(y) & SmoothSurface(y)) -> LessEffectiveAtStopping(x,y))"]}
{"id": "eqasc_validation_119", "nl": "friction is used for stopping a car by brakes", "fol": "", "prediction": ["all x y.((Car(x) & Car(y)) -> (UsedForStopping(x,y) & Brakes(x)))", "all x y z.((Car(x) & Car(y) & Brake(z)) -> (UsedForStopping(x,y,z) & UsedForStopping(x,y)))", "all x y.((Car(x) & Car(y)) -> (StopsByBrakes(x,y) & UsesFriction(x,y)))", "all x.(Friction(x) -> UsedForStoppingCarByBrakes(x))", "(all x.(FrictionOfCar(x) -> UsedForStopping(x)) & all y.(Breaks(y) -> UsedForStopping(x,y)))", "all x y z.((Car(x) & Car(y) & Brake(z)) -> (Friction(x,y,z) & StopsBy(x,y,z)))", "all x y.((Car(x) & Car(y)) -> (Friction(x,y) & Brakes(x,y)))", "all x.((Car(x) & Brakes(x)) -> FrictionStops(x))", "all x.(Friction(x) -> StopsCarByBrakes(x))", "all x y z.((Car(x) & Brake(y) & Friction(z)) -> StopsBy(x,y,z))", "all x.((Car(x) & Brakes(x)) -> StopsBy(x,car,brakes))", "all x y z.((Car(x) & Car(y) & Brakes(z) & Friction(x,y)) -> StopsBy(x,y,z))", "all x y.((Car(x) & Car(y)) -> StopsByBrakes(x,y))", "all x.(Friction(x) -> UsedForStoppingCar(x))", "all x y.((Car(x) & Brake(y)) -> StopsBy(x,y))", "all x.(Friction(x) -> StopsCarByBrakes(x))"]}
{"id": "eqasc_validation_120", "nl": "Friction produces heat.", "fol": "", "prediction": ["all x.(Friction(x) -> ProducesHeat(x))", "all x y.((Friction(x) & Heat(y)) -> Produces(x,y))", "all x.(Friction(x) -> ProducesHeat(x))", "(ProducesHeat(Friction)", "all x y.((Friction(x) & Heat(y)) -> Produces(x,y))", "(ProducesHeat(friction,friction))", "all x.(Friction(x) -> ProducesHeat(x))", "all x.(Fruit(x) -> ProducesHeat(x))", "all x.(Friction(x) -> ProducesHeat(x))", "all x y.((Friction(x) & Heat(y)) -> Produces(x,y))", "(ProducesHeat(Friction)", "All x.(Fruit(x) -> ProducesHeat(x))", "all x.(Friction(x) -> ProducesHeat(x))", "all x y.((Friction(x) & Heat(y)) -> Produces(x,y))", "all x.(Friction(x) -> ProducesHeat(x))", "all x.(Friction(x) -> ProducesHeat(x))"]}
{"id": "eqasc_validation_121", "nl": "Stopping a vehicle with brakes will generate heat", "fol": "", "prediction": ["all x y.((Vehicle(x) & Brakes(y) & StopsWith(x,y)) -> GeneratesHeat(x))", "all x y z.((Vehicle(x) & Brakes(y) & StopsWith(x,y)) -> GeneratesHeat(x,z))", "all x.((Vehicle(x) & StopsWithBrakes(x)) -> GeneratesHeat(x))", "all x y.((Vehicle(x) & Vehicle(y) & Brakes(x)) -> HeatGenerates(x,y))", "all x y z.((Vehicle(x) & Brake(y) & Brake(z) & StopsWith(x,y,z)) -> HeatGenerates(x))", "all x.((Vehicle(x) & Brakes(x)) -> HeatGenerates(x))", "all x y.((Vehicle(x) & Brake(y) & StopsWith(x,y)) -> GeneratesHeat(x))", "all x.((Vehicle(x) & Brakes(x) & StopsWith(x,y)) -> GeneratesHeat(x))", "all x.((Vehicle(x) & StopsWithBrakes(x)) -> GeneratesHeat(x))", "all x y z.((Vehicle(x) & Brakes(y) & Stopping(x,y)) -> HeatGenerates(x,z))", "all x y.((Vehicle(x) & Vehicle(y) & Brakes(y)) -> StopsWithHeat(x,y))", "all x y z.((Vehicle(x) & Brake(y) & Brake(z) & StopsWith(x,y,z)) -> GeneratesHeat(x))", "all x.((Vehicle(x) & HasBrakes(x)) -> GeneratesHeat(x))", "all x y.((Vehicle(x) & Brakes(y) & StopsWith(x,y)) -> HeatGenerates(x,y))", "all x.(StopsWithBrakes(x) -> GeneratesHeat(x))", "all x.((Vehicle(x) & StopsWithBrakes(x)) -> GeneratesHeat(x))"]}
{"id": "eqasc_validation_122", "nl": "Trucks and cars are vehicles.", "fol": "", "prediction": ["all x.((Truck(x) | Car(x)) -> Vehicle(x))", "(Vehicle(truck) | Vehicle(car))", "all x y.((Truck(x) & Car(y)) -> Vehicle(x))", "all x.((Truck(x) | Car(x)) -> Vehicle(x))", "all x y.((Truck(x) | Car(y)) -> Vehicle(x))", "(Vehicle(truck) | Vehicle(car))", "all x.((Truck(x) | Car(x)) -> Vehicle(x))", "(Vehicle(truck) & Vehicle(car))", "all x y.((Truck(x) & Car(y)) -> Vehicle(x))", "exists x.(Truck(x) & Vehicle(x) & Vehicle(x) & Vehicle(x))", "all x.((Truck(x) | Car(x)) -> Vehicle(x))", "all x y.((Truck(x) | Car(y)) -> Vehicle(x))", "(Vehicle(truck,car,car))", "all x.((Truck(x) | Car(x)) -> Vehicle(x))", "all x.((Taxi(x) | Car(x)) -> Vehicle(x))", "all x.((Truck(x) | Car(x)) -> Vehicle(x))"]}
{"id": "eqasc_validation_123", "nl": "friction is used for stopping by trucks and cars using brakes", "fol": "", "prediction": ["all x y z.((Friction(x) & Truck(y) & Car(z) & Brakes(y)) -> StopsUsing(x,y,z))", "all x y.((Friction(x) & Truck(y) & Car(y) & UsesBrakes(x,y)) -> Stops(x,y))", "all x.(Friction(x) -> UsedForStopping(x))", "(all x.(Friction(x) -> UsedForStopping(x,Trucks,Cars) & UsesBrakes(x,Trucks,Cars)))", "all x y z.((Friction(x) & Truck(y) & Car(z) & Brake(w)) -> Stops(x,y,z,w))", "all x.((Friction(x) & Stops(x,Trucks,Cars) & UsesBrakes(x,Breaks)) -> UsedForStopping(x,Trucks,Cars))", "all x y.((Friction(x) & Truck(y) & Car(y)) -> StopsUsingBrakes(x,y))", "(StopsLiftsAndCarsUsingBrakes(friction) & UsedForStops(friction,friction))", "(all x y.((Friction(x) & Truck(y) & Car(y)) -> StopsUsingBreaks(x,y)))", "all x y z.((Truck(x) & Car(y) & Brake(z)) -> (UsedForStopping(x,y,z) & UsesForStopping(y,z)))", "all x.(Friction(x) -> UsedForStopping(x))", "all x.(Friction(x) -> (StopsLifts(x) & StopsCars(x) & UsesBrakes(x)))", "all x y.((Friction(x) & Truck(y) & Car(y)) -> StopsUsingBreaks(x,y))", "all x.(Friction(x) -> Stops(x,Trucks,Cars,Brewers))", "all x y z.((Friction(x) & Truck(y) & Car(z) & Brakes(y)) -> StopsUsing(x,y,z))", "all x y.((Friction(x) & Truck(y) & Car(y) & Brakes(y)) -> StopsUsing(x,y))"]}
{"id": "eqasc_validation_124", "nl": "Flowers form on the dominant sporophyte plant.", "fol": "", "prediction": ["all x y.((Flower(x) & SporophytePlant(y)) -> FormsOn(x,y))", "all x.(Flower(x) -> FormsOnDominantSporophytePlant(x))", "all x y z.((Flower(x) & SporophytePlant(y) & Sporophyte(z)) -> FormsOn(x,y,z))", "(DominantSporophytePlant(Flower) & FormsOn(Flower,Sporophyte))", "all x y.((Flower(x) & SporophytePlant(y)) -> FormsOn(x,y))", "all x.(Flower(x) -> FormsOnDominantSporophytePlant(x))", "all x y.((Flower(x) & Sporophyte(y)) -> FormsOn(x,y))", "all x y z.((Flower(x) & SporophytePlant(y) & SporophytePlant(z)) -> FormsOn(x,y,z))", "all x.(Flower(x) -> (FormsOnDominantSporophytePlant(x) & Species(x)))", "all x.((Flower(x) & SporophytePlant(x)) -> FormsOn(x,dominant))", "all x.(Flower(x) -> FormsOnDistantSporophytePlant(x))", "all x y.((FloweringFlower(x) & SporophytePlant(y)) -> FormsOn(x,y))", "all x.((Flower(x) & SporophytePlant(x)) -> FormsOn(x,dominant))", "all x y.((Flower(x) & SporophytePlant(y)) -> FormsOn(x,y))", "exists x.(Flower(x) & SporophytePlant(x) & FormsOn(x,dominant))", "all x.(Flower(x) -> FormsOnDominantSporophytePlant(x))"]}
{"id": "eqasc_validation_125", "nl": "Sporophyte possesses stoma.", "fol": "", "prediction": ["all x.(Spotrophyte(x) -> PossessesStoma(x))", "all x.(Sporophyte(x) -> PossessesStoma(x))", "all x y.((Sporophyte(x) & Stoma(y)) -> Possesses(x,y))", "(PossibleStoma(sporophyte)", "all x y.((Spotrophyte(x) & Stoma(y)) -> Possesses(x,y))", "all x.(Spotrophyte(x) -> PossessesStoma(x))", "(PossibleStoma(Sporophyte)", "all x.(Sporophyte(x) -> PossessesStoma(x))", "all x y.((Sporophyte(x) & Stoma(y)) -> Possesses(x,y))", "all x.(Spotrophyte(x) -> PossessesStoma(x))", "all x y.((Spotrophyte(x) & Stoma(y)) -> Possesses(x,y))", "(PossibleStoma(sporophyte)", "all x.(Sporophyte(x) -> PossessesStoma(x))", "all x.(Spotrophyte(x) -> PossessesStoma(x))", "exists x.(Sporophyte(x) & PossessesStoma(x))", "exists x.(Spotrophyte(x) & Possesses(x,stoma))"]}
{"id": "eqasc_validation_126", "nl": "Flowers form on a plant possessing stoma", "fol": "", "prediction": ["all x y z.((Flower(x) & Plant(y) & Plant(z) & PossessesStoma(y,z)) -> FormsOn(x,y,z))", "all x y.((Flower(x) & Plant(y) & PossessesStoma(y)) -> FormsOn(x,y))", "all x y z.((Flower(x) & Plant(y) & Stoma(z) & Possesses(y,z)) -> FormsOn(x,y))", "all x y.((Flower(x) & Plant(y) & PossessesStoma(y,x)) -> FormsOn(x,y))", "all x.((Flower(x) & Plant(x) & PossessesStoma(x)) -> FormsOn(x,y))", "all x y z.((Flower(x) & Plant(y) & Stoma(z) & Possesses(y,z)) -> FormsOn(x,y,z))", "all x.(Flower(x) -> (FormsOn(x,y) & Plant(y) & PossessesStoma(y)))", "all x.(FlowerFormsOn(x,y) -> (Plant(x) & PossessesStoma(y)))", "all x y.((Flower(x) & Plant(y) & PossessesStoma(x,y)) -> FormsOn(x,y))", "all x y z.((Flower(x) & Plant(y) & Plant(z) & PossessesStoma(x,y,z)) -> FormsOn(x,y,z))", "all x.((Flower(x) & Plant(y) & PossessesStoma(y,x)) -> FormsOn(x,y))", "all x.((Flower(x) & Plant(x) & HasStoma(x)) -> FormsOn(x,y))", "all x y z.((Flower(x) & Plant(y) & Stoma(z) & Possesses(x,y,z)) -> FormsOn(x,y))", "all x y.((Flower(x) & Plant(y) & PossessesStoma(y)) -> FormsOn(x,y))", "all x y.((Flower(x) & Plant(y) & HasStoma(y,x)) -> FormsOn(x,y))", "all x y z.((Flower(x) & Plant(y) & Stoma(z) & Possesses(y,z)) -> FormsOn(x,y,z))"]}
{"id": "eqasc_validation_127", "nl": "Sporophytes appear early in the spring, as soon as the snow melts.", "fol": "", "prediction": ["all x.(Sporophyte(x) -> (AppearsEarlyInSpring(x) & As SoonAsSnowMelts(x)))", "all x y.((Sporophyte(x) & Spring(y) & SnowMelts(x,y)) -> AppearsEarly(x,y))", "all x.(Spotrophyte(x) -> (AppearsEarlyInSpring(x) & As SoonAsSnowMelts(x)))", "all x y z.((Sporophyte(x) & Spring(y) & Snow(z)) -> AppearsEarly(x,y,z))", "(AppearsEarlyInSpring(sporophytes) & As SoonAsSnowMelts(sporophytes))", "all x y.((Sporophyte(x) & Spring(y)) -> AppearsEarly(x,y))", "all x.(Sporophyte(x) -> (AppearsEarlyInSpring(x) & SnowMelts(x)))", "all x y.((Spotrophyte(x) & Spring(y) & SnowMelts(x,y)) -> AppearsEarly(x,y))", "all x.((Sporophyte(x) & SnowMelts(x)) -> AppearsEarlyInSpring(x))", "all x.(Spoke(x) -> (AppearsEarlyInSpring(x) & As SoonAsSnowMelts(x)))", "all x.(Spotrophyte(x) -> (AppearsEarlyInSpring(x) & SnowMelts(x)))", "all x y z.((Sporophyte(x) & Spring(y) & Snow(z)) -> AppearsEarly(x,y,z))", "all x y.((Sporophyte(x) & Spring(y) & SnowMelts(x,y)) -> AppearsEarly(x,y))", "all x.(Sporophyte(x) -> (AppearsEarlyInSpring(x) & As SoonAsSnowMelts(x)))", "all x y z.((Sporophyte(x) & Spring(y) & Snow(z) & Melts(z)) -> AppearsEarly(x,y))", "all x.(Spotrophyte(x) -> (AppearsEarlyInSpring(x) & As SoonAsSnowMelts(x)))"]}
{"id": "eqasc_validation_128", "nl": "Flowers form after the snow melts", "fol": "", "prediction": ["all x y.((Flower(x) & Snow(y)) -> Melts(x,y))", "all x.((Flower(x) & SnowMelts(x)) -> Forms(x))", "all x y z.((Flower(x) & Snow(y) & Snow(z)) -> Melts(x,y,z))", "all x y.((Flower(x) & Snow(y)) -> Melts(x,y))", "all x y.((Flower(x) & SnowMelts(y)) -> Forms(x,y))", "(all x.((Flower(x) & SnowMelts(x)) -> Forms(x,y)))", "all x.((Flower(x) & SnowMelts(x)) -> Forms(x))", "all x.((Flower(x) & MeltsSnow(x)) -> Forms(x))", "all x y z.((Flower(x) & Snow(y) & Snow(z)) -> Melts(x,y,z))", "all x y z.((Flower(x) & SnowMelt(y) & Snow(z) & Melts(x,z)) -> Forms(x,y))", "all x.(Flower(x) -> MeltsSnow(x))", "all x.(Flower(x) -> (SnowMelts(x) & FormsAfter(x,y)))", "all x y.((Flower(x) & Snow(y) & Melts(y,z)) -> FormsAfter(x,y))", "all x.(Flower(x) -> (MeltsSnow(x) & FlowersForm(x)))", "all x.((Flower(x) & SnowMelts(x)) -> Forms(x))", "all x y.((Flower(x) & Snow(y)) -> Melts(x,y))"]}
{"id": "eqasc_validation_129", "nl": "Flowers form on the plant with stoma", "fol": "", "prediction": ["all x y.((Flower(x) & Plant(y)) -> FormsOn(x,y))", "all x y z.((Flower(x) & Plant(y) & Stomatosis(z)) -> FormsOn(x,y,z))", "all x y.((Flower(x) & Plant(y) & FormsOn(x,y)) -> Stoma(x))", "all x.((Flower(x) & Plant(y)) -> FormsOn(x,y))", "all x y z.((Flower(x) & Plant(y) & Stoma(z)) -> FormsOn(x,y,z))", "(FormsOnPlantWithStoma(Flower) & OnPlant(Flower))", "all x.(Flower(x) -> (FormsOnPlant(x) & HasStoma(x)))", "all x.((Flower(x) & FormsOnPlant(x,stoma)) -> Plant(x))", "all x y z.((Flower(x) & Plant(y) & Spoma(z) & FormsOn(x,y,z)) -> Stomatose(x))", "all x.((Flower(x) & Plant(y) & FormsOn(x,y)) -> Stoma(x))", "(FormsOnPlantWithStoma(Flower) & OnPlantWithStoma(Flower))", "all x y.((Flower(x) & Plant(y)) -> FormsOn(x,y))", "all x.(Flower(x) -> (FormsOnPlant(x) & HasStoma(x)))", "all x y.((Flower(x) & Plant(y) & FormsOn(x,y)) -> Stoma(x))", "all x y z.((Flower(x) & Plant(y) & Stoma(z)) -> FormsOn(x,y,z))", "all x y.((Flower(x) & Plant(y)) -> (FormsOn(x,y) & HasStoma(x)))"]}
{"id": "eqasc_validation_130", "nl": "Angiosperm sporophyte is dominant.", "fol": "", "prediction": ["all x.(AngiospermSporophyte(x) -> Dominant(x))", "all x.((Angiosperm(x) & Sporophyte(x)) -> Dominant(x))", "AngiospermSporophyte(x) -> Dominant(x))", "all x y.((Agiosperm(x) & Sporophyte(y)) -> Dominant(x,y))", "Angiospermsporophyte (dominant)", "AngiospermSporophyte(Angiosperm) & Dominant(Angiosperm)", "(Dominant(AgiospermSporophyte)", "all x y.((Angiosperm(x) & Sporophyte(y)) -> Dominant(x,y))", "all x.((AngiospermSporophyte(x) & Dominant(x)) -> Species(x))", "all x.(AngiospermSporophyte(x) -> Dominant(x))", "All x.(AngiospermSprophyte(x) -> Dominant(x))", "(Dominant(Angiosperm) & Sporophyte(Angiosperm))", "All x.((Angiosperm(x) & Sporophyte(x)) -> Dominant(x))", "Angiospermsporophyte is dominant.", "(dominant)", "All x.(AngiospermSporophyte(x) -> Dominant(x))"]}
{"id": "eqasc_validation_131", "nl": "Flowers form on angiosperms.", "fol": "", "prediction": ["all x.(Flower(x) -> FormsOnAngiosperm(x))", "all x y.((Flower(x) & Angiosperm(y)) -> FormsOn(x,y))", "all x y z.((Flower(x) & Angiosperm(y) & Angiosperm(z)) -> FormsOn(x,y,z))", "all x.(Flower(x) -> FormsOnAngiosperm(x))", "all x y.((Flower(x) & Angiosperm(y)) -> FormsOn(x,y))", "all x.(Flower(x) -> (FormsOnAngiosperm(x) & OnAngiosperm(x)))", "all x y z.((Flower(x) & Angiosperm(y) & Angiosperm(z)) -> FormsOn(x,y,z))", "all x y.((Flower(x) & Angiosperm(y)) -> FormsOn(x,y))", "all x.(Flower(x) -> FormsOnAngiosperm(x))", "all x y z.((Flower(x) & Angiosperm(y) & Angiosperm(z) & FormsOn(x,y,z)) -> FlowersForm(x,y))", "all x.(Flower(x) -> FormedOnAngiosperms(x))", "all x y.((Flower(x) & Angiosperm(y)) -> FormsOn(x,y))", "exists x.(Flower(x) & On(x,angiosperm))", "exists x.(Flower(x) & FormedOn(x,angiosperms))", "all x.(Flower(x) -> FormsOnAngiosperm(x))", "all x y.((Flower(x) & Angiosperm(y)) -> FormsOn(x,y))"]}
{"id": "eqasc_validation_132", "nl": "flowers form on angiosperms", "fol": "", "prediction": ["all x y.((Flower(x) & Angiosperm(y)) -> FormsOn(x,y))", "all x y z.((Flower(x) & Angiosperm(y) & Angiosperm(z)) -> FormsOn(x,y,z))", "all x.(Flower(x) -> FormsOnAngiosperm(x))", "all x.(Flower(x) -> (FormsOnAngiosperms(x) & OnAngiosperms(x)))", "all x.((Flower(x) & Angiosperm(x)) -> FormsOn(x,y))", "all x y.((Flower(x) & Angiosperm(y)) -> FormsOn(x,y))", "all x y z.((Flower(x) & Angiosperm(y) & Angiosperm(z)) -> FormsOn(x,y,z))", "all x.(Flower(x) -> FormsOnAngiosperm(x))", "all x y z.((Flower(x) & Angiosperm(y) & Angiosperm(z) & FormsOn(x,y,z)) -> FlowersFormOn(x,y,z))", "all x.(FlowerFormsOnAngiosperms(x) -> FlowersFormOnAngiosperms(x))", "all x.((Flower(x) & Angiosperm(x)) -> FormsOn(x,y))", "all x y.((Flower(x) & Angiosperm(y)) -> FormsOn(x,y))", "all x y z.((Flower(x) & Angiosperm(y) & Angiosperm(z) & FormsOn(x,y,z)) -> FlowersFormOn(x,y))", "all x.(Flower(x) -> FormsOnAngiosperms(x))", "all x y.((Flower(x) & Angiosperm(y) & FormsOn(x,y)) -> FlowersFormOn(x,y))", "all x y.((Flower(x) & Angiosperm(y)) -> FormsOn(x,y))"]}
{"id": "eqasc_validation_133", "nl": "Skin color is another polygenic trait.", "fol": "", "prediction": ["all x.(SkinColor(x) -> PolygenicTrait(x))", "(PolygenicTrait(skincolor) & PolygenicTrait(skin))", "(PolygenicTrait(skin) & Color(skin))", "all x.(SkinColor(x) -> PolygenicTrait(x))", "-PolygenicTrait(skincolor)", "(PolygenicTreatment(skincolor)", "-PolygenicTreatment(skincolor)", "(PolygenicTrait(skin) & PolygenicTrait(skin))", "all x.((SkinColor(x) & PolygenicTrait(x)) -> AnotherTrait(x))", "all x.(SkinColor(x) -> PolygenicTrait(x))", "(PolygenicTrait(skincolor) & PolygenicTrait(skincolor))", "all x.(SkinColor(x) -> PolygenicTrait(x))", "all x.(SkinColor(x) -> PolygenicTreatment(x))", "exists x.(SkinColor(x) & PolygenicTreatment(x))", "all x.(SkinColor(x) -> PolygenicTrait(x))", "exists x.(SkinColor(x) & PolygenicTrait(x))"]}
{"id": "eqasc_validation_134", "nl": "Melanin is the skin pigment that gives the skin a tan color.", "fol": "", "prediction": ["all x.(Melanin(x) -> GivesTanColor(x))", "all x y.((SkinPigment(x) & Skin(y) & Melanin(x)) -> GivesTanColor(x,y))", "all x.(Melanin(x) -> SkinPigment(x))", "all x.(Melanin(x) -> (SkinPigment(x) & GivesTanColor(x)))", "all x y.((SkinPigment(x) & Melanin(y)) -> GivesTanColor(x,y))", "(SkinPigment(melanin,skin) & GivesTanColor(melanin,skin))", "(SkinPigment(melanin,y) & GivesTanColor(melanin,y))", "all x y z.((SkinPigment(x) & Melanin(y) & Skin(z)) -> GivesTanColor(x,z))", "all x y.((Melanin(x) & Skin(y)) -> GivesTanColor(x,y))", "all x y.((SkinPigment(x) & Skin(y) & Melanin(x)) -> GivesTanColor(x,y))", "all x.(Melanin(x) -> SkinPigment(x) & GivesTanColor(x))", "all x.(Melanin(x) -> GivesTanColor(x))", "all x.((SkinPigment(x) & Melanin(x)) -> GivesTanColor(x))", "all x.(Melanin(x) -> (SkinPigment(x) & GivesTanColor(x)))", "All x.(Melanin(x) -> (SkinPigment(x) & GivesTanColor(x)))", "exists x.(Melanin(x) & SkinPigment(x) & GivesTanColor(x))"]}
{"id": "eqasc_validation_135", "nl": "Melanin amount is a polygenic trait", "fol": "", "prediction": ["all x.(MelaninAmount(x) -> PolygenicTrait(x))", "all x y.((MelaninAmount(x) & PolygenicTrait(y)) -> PolygenicTrait(x,y))", "(PolygenicTrait(melanin) & PolygenicTrait(melanin))", "all x.(MelaninAmount(x) -> PolygenicTrait(x))", "all x.((MelaninAmount(x) & PolygenicTrait(x)) -> PolygenicTrait(x))", "(PolygenicTrait(melanin) & PolygenicTrait(melanin) & PolygenicTrait(melanin))", "all x y.((MelaninAmount(x) & PolygenicTrait(y)) -> PolygenicTrait(x,y))", "(PlasticTrait(melaninAmount) & PolygenicTrait(melaninAmount))", "all x.(MelaninAmount(x) -> PolygenicTrait(x))", "all x.((MelaninAmount(x) & PolygenicTrait(x)) -> PolygenicTrait(x))", "(PolygenicTrait(melanin) & PolygenicTrait(melanin))", "all x.(MelaninAmount(x) -> PolygenicTrait(x))", "all x y.((MelaninAmount(x) & PolygenicTrait(y)) -> PolygenicTrait(x,y))", "all x.(MelaninAmount(x) -> PolygenicTrait(x))", "all x.(MelaninAmount(x) -> PolygenicTrait(x))", "all x.(MelaninAmount(x) -> PolygenicTrait(x))"]}
{"id": "eqasc_validation_136", "nl": "Human skin and hair color are polygenic traits.", "fol": "", "prediction": ["all x.((HumanSkin(x) & HairColor(x)) -> PolygenicTreatment(x))", "all x.(HumanSkin(x) & HumanHairColor(x)) -> PolygenicTreatment(x))", "all x.((HumanSkin(x) | HairColor(x)) -> PolygenicTreatment(x))", "(PolygenicTreatment(HumanSkin,Hair) & PolygenicTreatment(HumanHair))", "(PolygenicTreatment(HumanSkin) & PolygenicTreatment(HumanHair))", "all x y.((HumanSkin(x) & HairColor(y)) -> PolygenicTreatment(x,y))", "(PolygenicTrait(HumanSkin,PositiveTreatment) & PolygenicTreatment(HumanHair,PositiveTreatment))", "(PolygenicTreatment(humanSkin,Hair) & PolygenicTreatment(human))", "all x.(HumanSkin(x) & HumanHairColor(x)) -> PolygenicTreatment(x))", "all x.((HumanSkin(x) & HairColor(x)) -> PolygenicTreatment(x))", "all x.((HumanSkin(x) | HairColor(x)) -> PolygenicTreatment(x))", "all x y.((HumanSkin(x) & HairColor(y)) -> PolygenicTrait(x,y))", "all x.((HumanSkin(x) & HumanHairColor(x)) -> PolygenicTreatment(x))", "all x.(HumanSkin(x) & HumanHairColor(x)) -> PolygenicTreatment(x))", "all x y.((HumanSkin(x) & HairColor(y)) -> PolygenicTreatment(x,y))", "all x.(HumanSkin(x) & HairColor(x)) -> PolygenicTreatment(x))"]}
{"id": "eqasc_validation_137", "nl": "hair color is polygenic", "fol": "", "prediction": ["all x.(HairColor(x) -> Polygenic(x))", "(PolygenicHairColor(HairColor) -> Polygenic(HairColor))", "all x y.((HairColor(x) & HairColor(y)) -> Polygenic(x))", "all x.((HairColor(x) & Polygenic(x)) -> Polygenic(x))", "all x.(HairColor(x) -> Polygenic(x))", "(PolygenicHairColor(HairColor) & PolygenicHairColor(HairColor))", "all x y.((HairColor(x) & HairColor(y) & Polygenic(x)) -> Polygenic(y))", "(PolygenicColor(hair) & Polygenic(hair))", "all x.(HairColor(x) -> Polygenic(x))", "all x.((HairColor(x) & Polygenic(x)) -> Polygenic(x))", "all x y.((HairColor(x) & HairColor(y) & Polygenic(x,y)) -> Polygenic(x))", "(PolygenicHairColor(HairColor) -> Polygenic(HairColor))", "all x.(HairColor(x) -> Polygenic(x))", "all x y.((HairColor(x) & Polygenic(y)) -> Polygenic(y))", "All x.(HairColor(x) -> Polygenic(x))", "All x.(HairColor(x) -> Polygenic(x))"]}
{"id": "eqasc_validation_138", "nl": "Skin color is determined by the melanin pigment in the skin cells.", "fol": "", "prediction": ["all x y.((SkinColor(x) & MelaninPigment(y)) -> DeterminedBy(x,y))", "all x.(SkinColor(x) -> DeterminedByMelaninPigment(x))", "all x y z.((SkinColor(x) & MelaninPigment(y) & SkinCells(z)) -> DeterminedBy(x,y,z))", "(DeterminedByMelaninPigment(skinCells) & SkinColor(skin))", "all x.(SkinColor(x) -> DeterminedByMelaninPigment(x))", "all x y.((SkinCell(x) & MelaninPigment(y)) -> DeterminesColor(x,y))", "all x y.((SkinColor(x) & MelaninPigment(y) & SkinCells(x)) -> DeterminedBy(x,y))", "all x.(SkinColor(x) -> DeterminedByMelaninPigmentInSkinCells(x))", "all x y z.(SkinColor(x) -> (DeterminedByMelaninPigment(y) & SkinCells(z)))", "(DeterminedByMelaninPigment(skinCells) & SkinColor(skin))", "all x y z.((SkinColor(x) & MelaninPigment(y) & SkinCells(z)) -> DeterminedBy(x,y,z))", "(DeterminedByMelaninPigmentInSkinCells(SkinCells))", "all x.(SkinColor(x) -> DeterminedByMelaninPigmentInSkinCells(x))", "all x.(SkinColor(x) -> DeterminedByMelaninPigment(x))", "all x y.((SkinCell(x) & MelaninPigment(y)) -> DeterminedBy(x,y))", "all x.(SkinColor(x) -> DeterminedByMelaninPigmentInSkinCells(x))"]}
{"id": "eqasc_validation_139", "nl": "Melanin pigment is determined by a polygenic trait.", "fol": "", "prediction": ["all x.(MelaninPigment(x) -> DeterminedByPolygenicTrait(x))", "all x y.((MelaninPigment(x) & PolygenicTrait(y)) -> DeterminedBy(x,y))", "(PolygenicTrait(melanin) & DeterminedBy(melanin))", "all x.(MelaninPigment(x) -> DeterminedByPolygenicTrait(x))", "all x y z.((MelaninPigment(x) & PolygenicTrait(y) & PolygenicTrait(z)) -> DeterminedBy(x,y,z))", "all x y.((MelaninPigment(x) & PolygenicTrait(y)) -> DeterminedBy(x,y))", "all x.(MelaninPigment(x) -> (PolygenicTrait(x) & DeterminedBy(x,y)))", "all x.((MelaninPigment(x) & PolygenicTrait(x)) -> DeterminedBy(x,y))", "all x.(MelaninPigment(x) -> DeterminedByPolygenicTrait(x))", "all x.(MelaninPigment(x) -> DeterminedByPolygenicTrait(x))", "all x y.((MelaninPigment(x) & PolygenicTrait(y)) -> DeterminedBy(x,y))", "all x.(MelaninPigment(x) -> DeterminedByPolygenicTrait(x))", "all x y.((MelaninPigment(x) & PolygenicTrait(y)) -> DeterminedBy(x,y))", "all x.(MelaninPigment(x) -> DeterminedByPolygenicTrait(x))", "exists x.(MelaninPigment(x) & PolygenicTrait(x))", "exists x.(MelaninPigment(x) & PolygenicTrait(x))"]}
{"id": "eqasc_validation_140", "nl": "Polygenic inheritance Polygenic traits are controlled by an unknown number of genes.", "fol": "", "prediction": ["all x.(PolygenicInheritance(x) -> (ControlledByUnknownGenes(x) & PolygenicTreatment(x)))", "all x y.((PolygenicInheritance(x) & Gene(y)) -> Controls(x,y))", "all x.(PolygenicInheritance(x) -> ControlledByUnknownGenes(x))", "all x.((PolygenicInheritance(x) & UnknownGenes(x)) -> Controls(x,y))", "all x y z.((PolygenicInheritance(x) & PolygenicTreatment(y) & Gene(z)) -> ControlledBy(y,z))", "(PolygenicInheritance(polygenic) -> ControlledByUnknownGenes(polygenic))", "all x y.((PolygenicInheritance(x) & PolygenicTreatment(y)) -> ControlledByUnknownGenes(y,x))", "all x.(PolygenicHeritage(x) -> ControlledByUnknownGenes(x))", "all x y.((PolygenicHeritage(x) & Gene(y)) -> Controls(x,y))", "all x.(PolygenicInheritance(x) -> (ControlledByUnknownGenes(x) & PolygenicTraits(x)))", "all x.((PolygenicInheritance(x) & UnknownGene(x)) -> Controls(x,y))", "all x y z.((PolygenicInheritance(x) & Gene(y) & Gene(z)) -> Controls(x,y,z))", "all x.(PolygenicHeritage(x) -> (ControlledByUnknownGenes(x) & PolygenicTreatment(x)))", "all x y.((PolygenicInheritance(x) & Gene(y)) -> Controls(x,y))", "exists x.(PolygenicInheritance(x) & PolygenicTreatment(x) & ControlledByUnknownGenes(x))", "all x.(PolygenicInheritance(x) -> ControlledByUnknownGenes(x))"]}
{"id": "eqasc_validation_141", "nl": "Skin color is controlled by an unknown number of genes.", "fol": "", "prediction": ["all x.(SkinColor(x) -> ControlledByUnknownGenes(x))", "all x y.((SkinColor(x) & Gene(y)) -> Controls(x,y))", "all x y.((SkinColor(x) & UnknownGene(y)) -> Controls(x,y))", "(UnknownGenes(skin) & ControlsColor(skin))", "all x.(SkinColor(x) -> ControlledByUnknownGenes(x))", "all x y z.((SkinColor(x) & Gene(y) & Gene(z)) -> Controls(x,y,z))", "(unknownGene(skin) & Controls(skincolor))", "all x.(SkinColor(x) -> UnknownGenes(x))", "all x y.((SkinColor(x) & Gene(y)) -> ControlledBy(x,y))", "exists x.(Gene(x) & SkinColor(x) & Controls(x,unknown))", "all x y z.((SkinColor(x) & Gene(y) & Gene(z)) -> Controls(x,y,z))", "all x.(SkinColor(x) -> ControlledByUnknownGenes(x))", "all x y.((SkinColor(x) & UnknownGene(y)) -> Controls(x,y))", "exists x.(SkinColor(x) & ControledByUnknownGenes(x))", "all x.(SkinColor(x) -> UnknownGenes(x))", "exists x.(SkinColor(x) & ControlsUnknownGenes(x))"]}
{"id": "eqasc_validation_142", "nl": "Most dental variations are polygenic, that is controlled by several genes.", "fol": "", "prediction": ["all x.(DentalVariation(x) -> (Polygenic(x) & ControlledByGenes(x)))", "all x.(DentalVariation(x) -> (Polygenic(x) & ControlledByGenes(x)))", "all x.((DentalVariation(x) & Polygenic(x) & ControlledByGenes(x)) -> DentalVariation(x))", "all x y.((DentalVariation(x) & Gene(y)) -> Polygenic(x))", "(PolygenicVariations(dental) & ControlledByGenes(dental))", "(all x.(DentalVariation(x) -> Polygenic(x)))", "all x y.((DentalVariation(x) & Gene(y)) -> (Polygenic(x) & ControlledBy(x,y)))", "all x.(DentalVariations(x) -> (Polygenic(x) & ControlledByGenes(x)))", "(all x.(DentalVariation(x) -> Polygenic(x)) & exists y.(Gene(y) & Controls(x,y))))", "all x.(DentalVariation(x) -> (Polygenic(x) & ControlledByGenes(x)))", "exists x.(DentalVariation(x) & Polygenic(x) & ControlledByGenes(x))", "all x.(DentalVariations(x) -> (Polygenic(x) & ControledByGenes(x)))", "all x y.((DentalVariation(x) & Gene(y)) -> Polygenic(x))", "all x.(DentalVariation(x) -> (Polygenic(x) & ContainsGenes(x)))", "exists x.(DentalVariations(x) & Polygenic(x) & ControlledByGenes(x))", "exists x.(DentalVariation(x) & Polygenic(x) & ControlledByGenes(x))"]}
{"id": "eqasc_validation_143", "nl": "Skin color is a trait controlled by several genes.", "fol": "", "prediction": ["all x.(SkinColor(x) -> (ControlledByGenes(x) & Genes(x)))", "all x y.((SkinColor(x) & Gene(y)) -> ControlledBy(x,y))", "all x.(SkinColor(x) -> (ControlledByGenes(x) & SeveralGenes(x)))", "all x.(SkinColor(x) -> exists y.(Gene(y) & Controls(x,y)))", "(ControlledByGenes(skincolor) & Genes(skincolor))", "all x y.((SkinColor(x) & Gene(y)) -> Controls(x,y))", "all x y z.((SkinColor(x) & Gene(y) & Gene(z)) -> Controls(x,y,z))", "(ControlledByGenes(skincolor) & Genes(skincolor,s))", "all x.(SkinColor(x) -> (ControlledByGenes(x) & Genes(x) & Genes(x)))", "all x.(SkinColor(x) -> (ControlledByGenes(x) & Genes(x)))", "all x y.((SkinColor(x) & Gene(y)) -> ControlledBy(x,y))", "all x.(SkinColor(x) -> exists y.(Gene(y) & Controls(x,y)))", "exists x.(SkinColor(x) & Gene(x) & ControlledBy(x,y))", "all x y.((SkinColor(x) & Gene(y)) -> Controls(x,y))", "exists x.(SkinColor(x) & Gene(x) & Controls(x,y))", "all x y.((SkinColor(x) & Gene(y)) -> ControlledBy(x,y))"]}
{"id": "eqasc_validation_144", "nl": "Tourette syndrome a polygenic disorder .", "fol": "", "prediction": ["all x.(TouretteSyndrom(x) -> PolygenicDisorder(x))", "all x y.((TouretteSyndrom(x) & PolygenicDisorder(y)) -> Disorder(x,y))", "all x.(TouretteSyndrom(x) -> (PolygenicDisorder(x) & -PolygenicDisorder(x)))", "all x.(Tourette(x) -> (PolygenicDisorder(x) & -PolygenicDisorder(x)))", "(PolygenicDisorder(TouretteSyndrom))", "all x y.((TouretteSyndrom(x) & PolygenicDisorder(y)) -> Disorder(x,y))", "all x y.((Tourette(x) & PolygenicDisorder(y)) -> Disorder(x,y))", "all x.(TouretteSyndrom(x) -> PolygenicDisorder(x))", "all x.(TouretteSyndrom(x) -> (PolygenicDisorder(x) & -PolygenicDisorder(x)))", "(PolygenicDisorder(Tourette))", "all x.(Tourette(x) -> (PolygenicDisorder(x) & Disorder(x)))", "(PolygenicDisorder(tourette) & Disorder(tourette))", "all x y.((Tourette(x) & PolygenicDisorder(y)) -> Disorder(x,y))", "(PlasticDisorder(tourette) & Polygenic(tourette))", "(PolygenicDisorder(TouretteSyndrom))", "all x.(TouretteSyndrom(x) -> PolygenicDisorder(x))"]}
{"id": "eqasc_validation_145", "nl": "tourette syndrome is a trait", "fol": "", "prediction": ["all x.(TouretteSyndrom(x) -> Trait(x))", "all x y.((TouretteSyndrom(x) & Trait(y)) -> Trait(x,y))", "(Trait(touretteSyndrom) & Trait(touretteSyndrom))", "all x.(TouretteSyndrom(x) -> Trait(x))", "all x y z.((TouretteSyndrom(x) & Trait(y) & Trait(z)) -> Trait(x,y,z))", "(Trait(touretteSyndrom) & Trait(tourette) & Trait(tourette))", "all x y.((TouretteSyndrom(x) & Trait(y)) -> Trait(x,y))", "all x.(TouretteSyndrom(x) -> Trait(x))", "(Trait(touretteSyndrom) & Trait(touretteSyndrom))", "all x y.((TouretteSyndrom(x) & Trait(y)) -> Trait(x,y))", "all x.(TouretteSyndrom(x) -> Trait(x))", "all x.(Trait(x) -> TouretteSyndrom(x))", "all x.(TouretteSyndrom(x) -> Trait(x))", "all x.(TouretteSyndrom(x) -> Trait(x))", "all x.(TouretteSyndrome(x) -> Trait(x))", "all x.(TouretteSyndrom(x) -> Trait(x))"]}
{"id": "eqasc_validation_146", "nl": "Phenotypic expression of polygenic traits varies over a wide range.", "fol": "", "prediction": ["all x.((PhenotypicExpression(x) & PolygenicTreatment(x)) -> VariatesOverWideRange(x))", "all x y.((PhenotypicExpression(x) & PolygenicTreatment(y)) -> VariatesOverWideRange(x,y))", "all x.((PhenotypicExpression(x) & PolygenicTreatment(x)) -> VariatesOverWideRange(x))", "all x y.((PhenotypicExpression(x) & PolygenicTreatment(y)) -> VariatesOverWideRange(x,y))", "(variates(phenotypicExpression(phenotypicTreatment) & WideRange(phenotypicExpression))", "all x.((PolygenicTreatment(x) & PhenotypicExpression(x)) -> VariatesOverWideRange(x))", "all x y z.((PhenotypicExpression(x) & PolygenicTreatment(y) & WideRange(z)) -> VariatesOver(x,y,z))", "all x.(PhenotypicExpression(x) -> VariatesOverWideRange(x))", "(VibrationsOverWideRange(phenotypicExpression(phenotypicTreatments) & PolygenicTreatments(phenotypicExpression))", "all x.(PhenotypicExpressionOfPolygenicTreatments(x) -> VariatesOverWideRange(x))", "all x y.((PhenotypicExpression(x) & PolygenicTreatment(y)) -> VariatesOverWideRange(x,y))", "all x y.((PolygenicTreatment(x) & PhenotypicExpression(x,y)) -> VariatesOverWideRange(x,y))", "all x y.((PhenotypicExpression(x) & PolygenicTreatment(y)) -> VariatesOverWideRange(x,y))", "all x.((PhenotypicExpression(x) & PolygenicTreatment(x)) -> VariatesOverWideRange(x))", "all x.(PolygenicTreatment(x) -> VariatesOverWideRange(x))", "all x.((PolygenicTreatment(x) & PhenotypicExpression(x,y)) -> VariableOverWideRange(x))"]}
{"id": "eqasc_validation_147", "nl": "Skin color is a phenotypic expression.", "fol": "", "prediction": ["all x.(SkinColor(x) -> PhenotypicExpression(x))", "all x y.((SkinColor(x) & PhenotypicExpression(y)) -> PhenotypicExpression(x))", "all x.(SkinColor(x) -> PhenotypicExpression(x))", "(PhenotypicExpression(SkinColor))", "(PhenomenotypicExpression(skincolor))", "(PhenotypicExpression(skincolor) & ExpressedBy(skin) & ExpressedBy(skin))", "all x y.((SkinColor(x) & PhenotypicExpression(y)) -> Phenomenal(x))", "all x.(SkinColor(x) -> PhenotypicExpression(x))", "all x.(SkinColor(x) -> PhenomenotypicExpression(x))", "all x y.((SkinColor(x) & PhenotypicExpression(y)) -> PhenotypicExpression(x))", "all x.(SkinColor(x) -> PhenotypicExpression(x))", "all x.(SkinColor(x) -> PhenomenotypicExpression(x))", "all x.(SkinColour(x) -> PhenotypicExpression(x))", "all x.(SkinColor(x) -> PhenotypicExpression(x))", "all x.(SkinColour(x) -> PhenotypicExpression(x))", "all x.(SkinColor(x) -> PhenotypicExpression(x))"]}
{"id": "eqasc_validation_148", "nl": "Polygenic traits are controled by two or more genes.", "fol": "", "prediction": ["all x.(PolygenicTreatment(x) -> (ControledByGenes(x,2) | ControledByGenes(x,3)))", "all x y.((PolygenicTreatment(x) & Gene(y)) -> ControledBy(x,y))", "all x.(PolygenicTreatment(x) -> (ControledByGene(x,2) | ControledByGene(x,3)))", "all x.(PolygenicTrait(x) -> (ControledByGenes(x,2) | ControledByGenes(x,3)))", "all x y z.((PolygenicTreatment(x) & Gene(y) & Gene(z)) -> ControledBy(x,y,z))", "(ControledByGenes(polygenicTreatment) -> (Treatment(polygenic) & (Treatment(polygenic) | Trait(polygenic))))", "all x y.((PolygenicTreatment(x) & Gene(y)) -> ControlledBy(x,y))", "all x y.((PolygenicTrait(x) & Gene(y)) -> ControledBy(x,y))", "all x.(PolygenicTraits(x) -> (ControledByGenes(x,2) | ControledByGenes(x,3)))", "all x.(PolygenicTreatment(x) -> ControledByTwoOrMoreGenes(x))", "all x.(PolygenicTrait(x) -> ControledByTwoOrMoreGenes(x))", "all x.(PolygenicTrait(x) -> exists y.(Gene(y) & Controls(x,y)))", "all x.(PolygenicTraits(x) -> (ControledByGenes(x,2) | ControledByGenes(x,3)))", "all x y.((PolygenicTrait(x) & Gene(y)) -> ControlledBy(x,y))", "exists x.(PolygenicTrait(x) & ControledBy(x,2) & ControledBy(x,3))", "exists x.(PolygenicTreatment(x) & ControledByGenes(x))"]}
{"id": "eqasc_validation_149", "nl": "skin color is controlled by two or more genes", "fol": "", "prediction": ["all x.(SkinColor(x) -> (ControlledByGenes(x,2) | ControlledByGenes(x,3)))", "all x y.((SkinColor(x) & Gene(y)) -> Controls(x,y))", "all x.((SkinColor(x) & Gene(x,2) | Gene(x,3))) -> Controls(x,2))", "all x y z.((SkinColor(x) & Gene(y) & Gene(z)) -> (Controls(x,y,z) & Controls(x,y,z)))", "all x y.((SkinColor(x) & Gene(y)) -> (ControlledBy(x,y) & ControlledBy(x,y)))", "all x.(SkinColor(x) -> (ControlledByGenes(x) & exists y.(Gene(y) & ControlledByGenes(x,y))))", "all x y z.((SkinColor(x) & Gene(y) & Gene(z)) -> (ControlledBy(x,y,z) & ControlledBy(x,y,z)))", "all x.((SkinColor(x) & ControledByGenes(x,2) | ControledByGenes(x,3))) -> SkinColorControlsGenes(x,2))", "all x.(SkinColor(x) -> (ContainedByGenes(x,2) | ControlledByGenes(x,3)))", "(ControlledByGenes(skincolor,2) | ControlledByGenes(skincolor,skincolor)))", "all x.((SkinColor(x) & Gene(x)) -> Controls(x,y))", "exists x,y,z,w.(Gene(x) & SkinColor(y) & Gene(z) & Controls(x,z,w))", "all x y.((SkinColor(x) & Gene(y)) -> ControlledBy(x,y))", "all x y.((SkinColor(x) & Gene(y) & Controls(x,y)) -> (exists z.(Gene(z) & Controls(x,z)))))", "exists x,y,z.(Gene(x) & SkinColor(y) & Gene(z) & Controls(x,z))", "all x.(SkinColor(x) -> exists y.(Gene(y) & Controls(x,y)))"]}
{"id": "eqasc_validation_150", "nl": "Rather, such complex characteristics are polygenic, i.e., they are influenced by multiple genes.", "fol": "", "prediction": ["all x.((ComplexCharacteristics(x) & Polygenic(x)) -> InfluencedByMultipleGenes(x))", "Rather, such complex characteristics are polygenic, i.e., influencesmultipleGenes(i))", "all x y.((ComplexCharacteristics(x) & Gene(y)) -> (Polygenic(x) & InfluencedByMultipleGenes(x)))", "Rather, such complexCharacteristics(x) -> (Polygenic(x) & InfluencedByMultipleGenes(x)))", "all x.((ComplexCharacteristics(x) & Polygenic(x)) -> InfluencedByMultipleGenes(x))", "all x.(ComplexCharacteristics(x) -> (Polygenic(x) & InfluencedByMultipleGenes(x)))", "Rather, such complex characteristics are polygenic (involvesmultipleGenes))", "all x.(ComplexCharacteristics(x) -> (Polygenic(x) & InfluencedByMultipleGenes(x)))", "(all x.((ComplexCharacteristics(x) & Polygenic(x)) -> InfluencedByMultipleGenes(x)))", "all x.((ComplexCharacteristics(x) & Polygenic(x) & InfluencedByMultipleGenes(x)) -> ComplexCharacteristics(x))", "all x y.((ComplexCharacteristics(x) & Genes(y)) -> Polygenic(x))", "all x.((ComplexCharacteristics(x) & Polygenic(x)) -> InfluencedByGenes(x))", "all x.(ComplexCharacteristics(x) -> (Polygenic(x) & Influential(x) & MultipleGenes(x)))", "(all x.(ComplexCharacteristics(x) -> Polygenic(x)))", "all x.(ComplexCharacteristics(x) -> (Polygenic(x) & InfluencedByMultipleGenes(x)))", "(all x.(ComplexCharacteristics(x) -> Polygenic(x)))"]}
{"id": "eqasc_validation_151", "nl": "Skin color is influenced by multiple genes.", "fol": "", "prediction": ["all x.(SkinColor(x) -> InfluencedByGenes(x))", "all x y.((SkinColor(x) & Gene(y)) -> InfluencedBy(x,y))", "(InfluencedByGenes(skincolor,s) & MultipleGenes(skincolor,skin))", "all x.(SkinColor(x) -> InfluencedByGenes(x))", "all x y z.((SkinColor(x) & Gene(y) & Gene(z)) -> InfluencedBy(x,y,z))", "all x y.((SkinColor(x) & Gene(y)) -> InfluencedBy(x,y))", "(InfluencedByGenes(skin) & MultipleGenes(genes))", "exists x.(Gene(x) & InfluencedBy(x,y))", "all x.(SkinColor(x) -> InfluencedByGenes(x))", "all x.(SkinColor(x) -> InfluencedByMultipleGenes(x))", "all x y.((SkinColor(x) & Gene(y)) -> InfluencedBy(x,y))", "exists x.(Gene(x) & InfluencedBy(x,y))", "all x y.((SkinColor(x) & Gene(y)) -> InfluencedBy(x,y))", "exists x.(Gene(x) & InfluencedBy(x,y))", "all x.(SkinColor(x) -> InfluencedByGenes(x))", "all x y.((SkinColor(x) & Gene(y)) -> InfluencedBy(x,y))"]}
{"id": "eqasc_validation_152", "nl": "Pigment cells are what give color or tint to the skin.", "fol": "", "prediction": ["all x.(PigmentCell(x) -> (GivesColor(x) | GivesTongue(x)))", "all x y.((PigmentCell(x) & Skin(y)) -> (GivesColor(x,y) | GivesTongue(x,y)))", "all x.(PigmentCell(x) -> (GivesColor(x) | GivesTint(x)))", "(GiveColor(pigmentCell) | GiveTongue(pigmentCell))", "all x y.((PigmentCell(x) & Skin(y)) -> (GivesColor(x,y) | GivesTint(x,y)))", "all x y.((PigmentCell(x) & Skin(y) & (GivesColor(x,y) | GivesTongue(x,y))) -> GivesColor(x,y))", "all x y z.((PigmentCell(x) & Skin(y) & Color(z)) | Tint(z))", "all x.((PigmentCell(x) & GivesColorOrTongue(x)) -> GivesTongueToSkin(x))", "all x.(PigmentCell(x) -> (GivesColor(x) | GivesTinte(x)))", "all x.(PigmentCell(x) -> (GivesColor(x) | GivesTongue(x)))", "all x.(PigmentCell(x) -> GivesColorOrTongueToSkin(x))", "all x y.((PigmentCell(x) & Skin(y) & (GivesColor(x,y) | GivesTint(x,y))) -> GivesColor(x,y))", "all x y.((PigmentCell(x) & Skin(y)) -> (GivesColor(x,y) | GivesTongue(x,y)))", "all x.(PigmentCell(x) -> (GivesColor(x) | GivesTint(x)))", "exists x.(PigmentCell(x) & GivesColorOrTongue(x))", "all x.(PigmentCell(x) -> (GivesColor(x) | GivesTinte(x)))"]}
{"id": "eqasc_validation_153", "nl": "Pigment is another polygenic trait.", "fol": "", "prediction": ["all x.(Pigment(x) -> PolygenicTrait(x))", "(PolygenicTrait(pigment) & PolygenicTrait(pigment))", "all x.(Pigment(x) -> PolygenicTrait(x))", "-PolygenicTrait(pigment)", "(PolygenicTrait(pigment) & PolygenicTrait(pigment))", "all x.(Pigment(x) -> PolygenicTrait(x))", "(PolygenicTrait(pigment)", "(PolygenicTrait(pigment) & PolygenicTrait(pigment))", "all x.(Pigment(x) -> PolygenicTrait(x))", "exists x.(Pigement(x) & PolygenicTrait(x))", "all x.(Pigment(x) -> PolygenicTrait(x))", "(PolygenicTrait(pigment)", "all x.(Pigment(x) -> PolygenicTrait(x))", "(PolygenicTrait(pigmented)", "exists x.(Pigment(x) & PolygenicTrait(x))", "all x.(Pigment(x) -> PolygenicTrait(x))"]}
{"id": "eqasc_validation_154", "nl": "Color depends on melanin content in skin.", "fol": "", "prediction": ["all x.(Color(x) -> DependsOnMelaninContent(x))", "all x y.((Color(x) & Skin(y)) -> DependsOnMelaninContent(x,y))", "(DependsOnMelaninContent(Color) & InSkin(Color,Skin))", "all x.(Color(x) -> DependsOnMelaninContentInSkin(x))", "(all x.(Color(x) -> DependsOnMelaninContent(x)))", "all x y z.((Color(x) & Skin(y) & MelaninContent(z)) -> DependsOn(x,y,z))", "(depends on MelaninContent(Color,Skin))", "(DependsOnMelaninContent(Color) & Skin(Skin))", "all x y.((Color(x) & Skin(y)) -> DependsOnMelaninContent(x,y))", "all x.(Color(x) -> DependsOnMelaninContent(x))", "all x y.((Color(x) & Skin(y)) -> DependsOnMelaninContent(x,y))", "all x.(Color(x) -> DependsOnMelaninContentInSkin(x))", "all x.(Color(x) -> DependsOnMelaninInSkin(x))", "all x y.((Color(x) & Skin(y)) -> DependsOnMelaninContent(x,y))", "all x.(Color(x) -> DependsOnMelaninContentInSkin(x))", "All x.(Colour(x) -> DependsOnMelaninInSkin(x))"]}
{"id": "eqasc_validation_155", "nl": "melanin content is a polygenic trait", "fol": "", "prediction": ["all x.(MelaninContent(x) -> PolygenicTrait(x))", "all x.((MelaninContent(x) & PolygenicTrait(x)) -> PolygenicTrait(x))", "all x y.((MelaninContent(x) & PolygenicTrait(y)) -> PolygenicTrait(x,y))", "(PolygenicTrait(melanin) & PolygenicTrait(melanin))", "all x.(MelaninContent(x) -> PolygenicTrait(x))", "all x.((MelaninContent(x) & PolygenicTrait(x)) -> PolygenicTrait(x))", "all x y.((MelaninContent(x) & PolygenicTrait(y)) -> PolygenicTrait(x,y))", "(PolygenicTrait(melanin) & PolygenicTrait(melanin))", "(PolygenicTrait(melanin) & PolygenicTrait(melanin) & PolygenicTrait(melanin))", "all x.(MelaninContent(x) -> PolygenicTrait(x))", "all x y.((MelaninContent(x) & PolygenicTrait(y)) -> PolygenicTrait(x,y))", "all x.((MelaninContent(x) & PolygenicTrait(x)) -> PolygenicTrait(x))", "all x y.((MelaninContent(x) & PolygenicTrait(y)) -> PolygenicTrait(x,y))", "all x.(MelaninContent(x) -> PolygenicTrait(x))", "(PolygenicTrait(melanin) & PolygenicTrait(melanin))", "all x.((MelaninContent(x) & PolygenicTrait(x)) -> PolygenicTrait(x))"]}
{"id": "eqasc_validation_156", "nl": "Phenotypic expression of skin color varies over a wide range", "fol": "", "prediction": ["all x.((SkinColor(x) & PhenotypicExpression(x)) -> VariatesOverWideRange(x))", "all x y.((PhenotypicExpression(x) & SkinColor(y)) -> VariatesOverWideRange(x,y))", "all x.((PhenotypicExpression(x) & SkinColor(x)) -> VariatesOverWideRange(x))", "all x y.((PhenotypicExpression(x) & SkinColor(y)) -> VariatesOverWideRange(x,y))", "all x.(PhenotypicExpressionOfSkinColor(x) -> VariatesOverWideRange(x))", "all x y z.((PhenotypicExpression(x) & SkinColor(y) & WideRange(z)) -> Variable(x,y,z))", "(variates(phenotypicExpressionOfSkinColor) & WideRange(phenotypicExpressionOfSkinColor))", "(VibrationsOverWideRange(phenotypicExpressionOfSkinColor) & WideRange(phenotypicExpressionOfSkinColor))", "all x y z.((PhenotypicExpression(x) & SkinColor(y) & WideRange(z)) -> VariatesOverWideRange(x,y,z))", "all x y.((PhenotypicExpression(x) & SkinColor(y)) -> VariatesOverWideRange(x,y))", "all x.((SkinColor(x) & PhenotypicExpression(x)) -> VariableOverWideRange(x))", "all x.(PhenotypicExpressionOfSkinColor(x) -> VariatesOverWideRange(x))", "all x.((PhenotypicExpression(x) & SkinColor(x)) -> VariatesOverWideRange(x))", "all x y.((PhenotypicExpression(x) & SkinColor(y)) -> VariatesOverWideRange(x,y))", "all x y z.((PhenotypicExpression(x) & SkinColor(y) & WideRange(z)) -> VariatesOver(x,y,z))", "all x.(PhenotypicExpression(x) -> SkinColor(x))"]}
{"id": "eqasc_validation_157", "nl": "Reptile parents provide little if any care to their young.", "fol": "", "prediction": ["all x.(ReptileParent(x) -> ProvidesLittleCareToYoung(x))", "all x y.((ReptileParent(x) & Young(y)) -> ProvidesLittleCare(x,y))", "all x.(ReptileParent(x) -> ProvidesLittleCare(x))", "all x y z.((ReptileParent(x) & Young(y) & Young(z)) -> ProvidesLittleCare(x,y,z))", "all x y.((ReptileParent(x) & Young(y)) -> ProvidesLittleCare(x,y))", "(LittleCareToYoung(reptileParents) & ReptileParents(reptiles))", "all x.(ReptileParent(x) -> ProvidesLittleCareToYoung(x))", "all x y.((ReptileParent(x) & Young(y)) -> ProvidesLittleCare(x,y))", "all x.(ReptileParent(x) -> (ProvidesLittleCare(x) & Young(x)))", "all x.(ReptileParent(x) -> ProvidesLittleCare(x))", "all x y.((ReptileParent(x) & Young(y)) -> ProvidesLittleCare(x,y))", "all x.(ReptileParent(x) -> (ProvidesLittleCare(x) | ProvidesLittleCare(x)))", "all x y.((ReptileParent(x) & Young(y)) -> ProvidesLittleCare(x,y))", "all x.(ReptileParent(x) -> ProvidesLittleCareToYoung(x))", "exists x.(ReptileParent(x) & LittleCare(x) & Young(x))", "all x y.((ReptileParent(x) & Young(y)) -> ProvidesLittleCare(x,y))"]}
{"id": "eqasc_validation_158", "nl": "Crocodilian mothers provide the most parental care compared to any other reptiles.", "fol": "", "prediction": ["all x y.((CrocodilianMother(x) & Reptile(y)) -> ProvidesMostParentalCare(x,y))", "all x.((Mother(x) & Crocodilian(x)) -> ProvidesMostParentalCare(x))", "all x y.((Mother(x) & Reptile(y) & Crocodilian(x)) -> ProvidesMostParentalCare(x,y))", "all x.((CrocodilianMother(x) & Reptile(y)) -> ProvidesMostParentalCare(x,y))", "(Mother(crocodilian) & ProvidesMostParentalCare(crocodilian) & -Reptile(crocodilian))", "all x.((Mother(x) & Crocodilian(x)) -> ProvidesMostParentalCare(x))", "(MothersOfCrocodilians(Crocodilian) & ProvidesMostParentalCare(Crocodilian) & -Reptile(Crocodilian))", "all x.(CrocodilianMother(x) -> ProvidesMostParentalCare(x))", "(MothersOfCrocodilians(c) & ProvidesMostParentalCare(c,y) & Reptile(y))", "all x y z.((CrocodilianMother(x) & Reptile(y) & Reptile(z)) -> ProvidesMostParentalCare(x,y,z))", "all x y.((CrocodilianMother(x) & Reptile(y)) -> ProvidesMostParentalCare(x,y))", "all x y.((Mother(x) & Reptile(y) & Crocodilian(x)) -> ProvidesMostParentalCare(x,y))", "all x y.((Mother(x) & Crocodilian(y)) -> ProvidesMostParentalCare(x,y))", "all x y.((CrocodynilianMother(x) & Reptile(y)) -> ProvidesMostParentalCare(x,y))", "all x.((Mother(x) & Crocodilian(x)) -> ProvidesMostParentalCare(x))", "all x.(CrocodilianMother(x) -> ProvidesMostParentalCare(x))"]}
{"id": "eqasc_validation_159", "nl": "Crocodilian mothers are the most attentive reptile parents.", "fol": "", "prediction": ["all x.((Mother(x) & Crocodilian(x)) -> AttentiveReptileParent(x))", "all x.(CrocodilianMother(x) -> AttentiveReptileParent(x))", "all x y.((Mother(x) & Crocodilian(y)) -> AttentiveReptileParent(x,y))", "(AttentiveMother(crocodilianMother(crocodilianMother) & ReptileParent(crocodilianMother(crocodilian))", "(AttentiveReptileParent(crocodilianMothers) & MostAttentive(crocodilianMothers))", "all x.((Mother(x) & Crocodilian(x)) -> AttentiveReptileParent(x))", "all x.(CrocodilianMother(x) -> AttentiveReptileParent(x))", "all x y.((CrocodilianMother(x) & ReptileParent(y)) -> Attentive(x,y))", "all x y.((Mother(x) & Crocodilian(y)) -> AttentiveReptileParent(x,y))", "all x.((Mother(x) & Crocodilian(x)) -> AttentiveReptile(x))", "all x.(CrocodynilianMother(x) -> AttentiveReptileParent(x))", "all x.((Mother(x) & Crocodilian(x)) -> MostAttentiveReptileParent(x))", "all x y.((Mother(x) & Crocodilian(y)) -> AttentiveReptileParent(x,y))", "all x.(CrocodillianMother(x) -> AttentiveReptileParent(x))", "all x.(CrocodynilianMother(x) -> AwareReptileParent(x))", "all x.((Mother(x) & Crocodilian(x)) -> AttentiveReptileParent(x))"]}
{"id": "eqasc_validation_160", "nl": "Iguanas are good reptiles for experienced reptile caretakers.", "fol": "", "prediction": ["all x.(Iguana(x) -> (GoodReptile(x) & ExperiencedCaregivers(x)))", "all x y.((Iguana(x) & Caretakers(y)) -> GoodReptile(x,y))", "all x.(Iguana(x) -> (GoodReptile(x) & ExperiencedCaregivers(x)))", "(GoodReptile(iguana) & ExperiencedCaregivers(iguana,i))", "all x.(Iguana(x) -> GoodReptile(x))", "all x y.((Iguana(x) & ReptileCaregivers(y)) -> GoodFor(x,y))", "all x.(Iguana(x) -> (GoodReptile(x) & ForExperiencedCaregivers(x)))", "all x y.((Iguana(x) & Caretaker(y)) -> GoodReptile(x,y))", "all x.(Iguana(x) -> (GoodReptile(x) & GoodReptile(x) & ExperiencedCaregivers(x)))", "all x.((Iguana(x) & ExperiencedCaregivers(x)) -> GoodReptile(x))", "all x.(Iguana(x) -> (GoodReptile(x) & ExperiencedCaregivers(x)))", "all x y.((Iguana(x) & Caretakers(y) & Experienced(x,y)) -> GoodReptile(x))", "all x.(Iguana(x) -> GoodReptile(x))", "all x y.((Iguana(x) & ReptileCaregivers(y)) -> GoodFor(x,y))", "all x.(Iguana(x) -> (GoodReptile(x) & ForExperiencedCaregivers(x)))", "all x.(Iguana(x) -> GoodReptile(x))"]}
{"id": "eqasc_validation_161", "nl": "iguana parents provide little care to their young", "fol": "", "prediction": ["all x y.((IguanaParent(x) & Young(y)) -> ProvidesLittleCare(x,y))", "all x.(IguanaParent(x) -> ProvidesLittleCareToYoung(x))", "all x y z.((IguanaParent(x) & Young(y) & Iguana(z)) -> ProvidesLittleCare(x,y,z))", "all x y.((IguanaParent(x) & Young(y)) -> ProvidesLittleCareTo(x,y))", "all x.(IguanaParent(x) -> ProvidesLittleCareToYoung(x))", "all x y z.((IguanaParent(x) & Young(y) & Iguana(z)) -> ProvidesLittleCareTo(x,y,z))", "all x.((IguanaParent(x) & Young(y)) -> ProvidesLittleCareTo(x,y))", "all x y.((IguanaParent(x) & Young(y)) -> ProvidesLittleCare(x,y))", "all x.(IguanaParent(x) -> ProvidesLittleCareToYoung(x))", "all x y z.((IguanaParent(x) & Young(y) & Iguana(z)) -> ProvidesLittleCare(x,y,z))", "all x y.((IguanaParent(x) & YoungIguana(y)) -> ProvidesLittleCare(x,y))", "all x y.((IguanaParent(x) & Young(y)) -> ProvidesLittleCareTo(x,y))", "all x.(IguanaParent(x) -> ProvidesLittleCareToYoung(x))", "all x y z.((IguanaParent(x) & Young(y) & Iguana(z)) -> ProvidesLittleCareTo(x,y,z))", "all x.(IguanaParent(x) -> ProvidesLittleCare(x))", "all x.(IguanaParent(x) -> ProvidesLittleCareToYoung(x))"]}
{"id": "eqasc_validation_162", "nl": "After spawning, they abandon their eggs and provide no parental care.", "fol": "", "prediction": ["all x.((Sparrowing(x) & AbandonEggs(x) & ProvideNoParentalCare(x)) -> ParentalCare(x))", "all x.(Sparrowing(x) -> (AbandonsEggs(x) & ProvidesNoParentalCare(x)))", "all x y.((Sparrow(x) & Egg(y)) -> (Abandons(x,y) & ProvidesNoParentalCare(x,y)))", "all x y.((Sparrowing(x) & Egg(y)) -> (Abandons(x,y) & ProvidesNoParentalCare(x,y)))", "all x.((Sparrowing(x) & AbandonEggs(x) & -ProvidesParentalCare(x)) -> -SpreadsEggs(x))", "all x y z.((Sparrowing(x) & Egg(y) & ParentalCare(z)) -> (Abandons(x,y) & -Provides(x,z)))", "all x.(Sparrowing(x) -> (AbandonesEggs(x) & -ProvidesParentalCare(x)))", "(all x.(Sparrowing(x) -> (AbandonsEggs(x) & -ProvidesParentalCare(x))))", "all x y.((Sparrow(x) & Egg(y)) -> (Abandon(x,y) & NoParentalCare(x,y)))", "(AllowsEggs(spawns) & ProvidesNoParentalCare(spawns))", "all x y.((Egg(x) & Egg(y) & ParentalCare(x)) -> (Abandons(x,y) & -Provides(x,y)))", "(all x.((Eggs(x) & Spawning(x)) -> Abandon(x,Eggs)) & -ProvidesParentalCare(x))", "all x.((Sparrowing(x) & AbandonEggs(x) & ProvideNoParentalCare(x)) -> -SpreadsEggs(x))", "all x.(Sparrowing(x) -> (AbandonesEggs(x) & ProvidesNoParentalCare(x)))", "all x.(Sparrow(x) -> (AbandonsEggs(x) & NoParentalCare(x)))", "(all x.(Sparrowing(x) -> AbandoneEggs(x)) & -ProvidesParentalCare(x))"]}
{"id": "eqasc_validation_163", "nl": "Reptile parents abandon their eggs", "fol": "", "prediction": ["all x y.((ReptileParent(x) & Egg(y)) -> Abandons(x,y))", "all x y z.((ReptileParent(x) & Egg(y) & Egg(z)) -> Abandons(x,y,z))", "all x.(ReptileParent(x) -> (AbandonsEggs(x) | ReptileParentsAbandonEggs(x)))", "all x y.((ReptileParent(x) & Reptile(y)) -> AdoptsEggs(x,y))", "all x.(ReptileParent(x) -> AbandonsEggs(x))", "(all x.(ReptileParent(x) -> AbandonEggs(x)))", "all x y z.((ReptileParent(x) & Egg(y) & Reptile(z)) -> Abandons(x,y,z))", "all x y.((ReptileParent(x) & Egg(y)) -> Adopts(x,y))", "(all x y.((ReptileParent(x) & Egg(y)) -> Abandon(x,y)))", "all x.(ReptileParent(x) -> AdoptsEggs(x))", "all x.(ReptileParent(x) -> (AbandonsEggs(x) | AbandonsEggs(x)))", "all x y.((ReptileParent(x) & Reptile(y)) -> AbandonsEggs(x,y))", "all x y z.((ReptileParent(x) & Egg(y) & Egg(z)) -> Adopts(x,y,z))", "all x y.((ReptileParent(x) & Egg(y) & Abandons(x,y)) -> ReptileParent(x))", "all x.(ReptileParent(x) -> AbandonsEggs(x))", "all x.(ReptileParent(x) -> AdoptsEggs(x))"]}
{"id": "eqasc_validation_164", "nl": "Alligators and crocodiles are the largest living reptiles.", "fol": "", "prediction": ["all x.((Alligator(x) | Crocodile(x)) -> LargestLivingReptile(x))", "all x y.((Alligator(x) & Crocodile(y)) -> LargestLivingReptile(x))", "all x.((Alligator(x) | Crocodile(x)) -> LargestReptile(x))", "all x.((Reptile(x) & (Alligator(x) | Crocodile(x))) -> Largest(x))", "all x y.((Alligator(x) | Crocodile(y)) -> LargestReptile(x))", "(LargestReptile(all x y.((Alligator(x) & LargestReptile(y)) & LargestReptile(y)) -> (Crocodile(x) & LargestReptile(y)))", "(LargestReptile(all x.(Alligator(x) | LargestReptile(x)))", "(LargestLivingReptile(all x.(Alligator(x) | LargestLivingReptile(x)))", "(LargestLivingReptile(alligators) & LargestLivingReptile(crocodiles))", "all x.(LargestLivingReptile(x) -> (Alligator(x) | Crocodile(x)))", "all x.((Alligator(x) | Crocodile(x)) -> LargestLivingReptile(x))", "all x y.((Alligator(x) & Crocodile(y)) -> LargestLivingReptile(x,y))", "(LargestLivingReptile(all x.(Alligator(x) | LargestLivingReptile(x)))", "all x y.((Alligator(x) | Crocodile(y)) -> LargestLivingReptile(x,y))", "all x.((Reptile(x) & (Alligator(x) | Crocodile(x))) -> Largest(x))", "all x.((Alligator(x) | Crocodile(x)) -> LargestReptile(x))"]}
{"id": "eqasc_validation_165", "nl": "Alligator and crocodile parents provide little care to their young", "fol": "", "prediction": ["all x y.((Alligator(x) | Crocodile(y)) & Young(y)) -> ProvidesLittleCare(x,y))", "all x y z.((Alligator(x) & CrocodileParent(y) & Crocodile(z)) -> ProvidesLittleCareToYoung(x,y,z))", "all x y.((Alligator(x) & CrocodileParent(y)) -> ProvidesLittleCareToYoung(x,y))", "all x.((Alligator(x) | Crocodile(x)) -> ProvidesLittleCareToYoung(x))", "all x y z.((Alligator(x) | Crocodile(y) & Parent(z)) -> ProvidesLittleCareToYoung(z))", "alligators and crocodiles parents(all x) -> ProvidesLittleCareToYoung(x))", "all x y.((Alligator(x) | Crocodile(x)) & Young(y)) -> ProvidesLittleCareTo(x,y))", "all x.((AlligatorParent(x) | CrocodileParent(x)) -> ProvidesLittleCareToYoung(x))", "all x.((Alligator(x) | Crocodile(x)) -> ProvidesLittleCareToYoung(x))", "all x.((Parent(x) & Alligator(x) & Crocodile(x)) -> ProvidesLittleCareToYoung(x))", "all x y z.((Alligator(x) & CrocodileParent(y) & Young(z)) -> ProvidesLittleCareTo(x,y,z))", "all x y.((Alligator(x) & Crocodile(y)) -> ProvidesLittleCareToYoung(x,y))", "all x y.((AlligatorParent(x) & CrocodileParent(y)) -> ProvidesLittleCareToYoung(x,y))", "all x.((Alligator(x) | Crocodile(x)) -> ProvidesLittleCareToYoung(x))", "all x.((AlligatorParent(x) | CrocodileParent(x)) -> ProvidesLittleCareToYoung(x))", "(all x.(AlligatorParent(x) | CrocodileParent(x))) & LittleCare(x))"]}
{"id": "eqasc_validation_166", "nl": "All lizards are reptiles.", "fol": "", "prediction": ["all x.(Lizard(x) -> Reptile(x))", "all x.(Lizard(x) -> Reptile(x))", "(all x.(Lizard(x) -> Reptile(x)))", "all x y.((Lizard(x) & Reptile(y)) -> Reptile(x))", "all x.(Lizard(x) -> Reptile(x))", "(all x.(Lizard(x) -> Reptile(x))", "all x y.((Lizard(x) & Reptile(y)) -> Reptile(x))", "all x.(lizard(x) -> Reptile(x))", "all x.(Lizard(x) -> Reptile(x))", "all x.(Lizard(x) -> Reptile(x))", "all x.(lizard(x) -> Reptile(x))", "all x.(Lizard(x) -> Reptile(x))", "all x.(Lizard(x) -> Reptile(x))", "all x.(Lizard(x) -> Reptile(x))", "all x.(Lizard(x) -> Reptile(x))", "all x.(Lizard(x) -> Reptile(x))"]}
{"id": "eqasc_validation_167", "nl": "lizard parents provide little if any care to their young", "fol": "", "prediction": ["all x y.((LizardParent(x) & Young(y)) -> ProvidesLittleCare(x,y))", "all x.(LizardParent(x) -> ProvidesLittleCareToYoung(x))", "all x y z.((LizardParent(x) & Young(y) & Lizard(z)) -> ProvidesLittleCare(x,y,z))", "all x y.((LizardParent(x) & Young(y)) -> ProvidesLittleCare(x,y))", "(LizardParents(lizard) & LittleCare(lizard))", "all x.(LizardParent(x) -> ProvidesLittleCare(x))", "all x y z.((LizardParent(x) & Young(y) & Lizard(z)) -> ProvidesLittleCare(x,y,z))", "all x.((LizardParent(x) & Young(y)) -> ProvidesLittleCare(x,y))", "all x.(LizardParent(x) -> (ProvidesLittleCare(x) & Young(x)))", "all x y z.((LizardParent(x) & Young(y) & Young(z)) -> ProvidesLittleCare(x,y,z))", "all x.(LizardParent(x) -> ProvidesLittleCareToYoung(x))", "all x y.((LizardParent(x) & Young(y)) -> ProvidesLittleCare(x,y))", "all x y.((LizardParent(x) & Young(y)) -> ProvidesLittleCareTo(x,y))", "all x.(LizardParent(x) -> ProvidesLittleIfAnyCareToYoung(x))", "all x.(LizardParent(x) -> (ProvidesLittleCare(x) & Young(x)))", "all x y.((LizardParent(x) & Young(y)) -> ProvidesLittleIfAnyCare(x,y))"]}
{"id": "eqasc_validation_168", "nl": "Crocodilian mothers provide care to their young", "fol": "", "prediction": ["all x y.((Mother(x) & Crocodilian(y)) -> ProvidesCareToYoung(x,y))", "all x y z.((Mother(x) & Crocodilian(y) & Young(z)) -> ProvidesCareTo(x,y,z))", "all x.(CrocodilianMother(x) -> ProvidesCareToYoung(x))", "all x.((Mother(x) & Crocodilian(x)) -> ProvidesCareToYoung(x))", "all x.(CrocodylianMother(x) -> ProvidesCareToYoung(x))", "all x y z.((CrocodilianMother(x) & Young(y) & CrocodilianMother(z)) -> ProvidesCareTo(x,y,z))", "all x y.((Mother(x) & Crocodilian(y)) -> ProvidesCareToYoung(x,y))", "all x y.((CrocodilianMother(x) & Young(y)) -> ProvidesCareTo(x,y))", "all x y.((Mother(x) & Crocodilian(y) & Young(y)) -> ProvidesCareTo(x,y))", "all x.(CrocodillianMother(x) -> ProvidesCareToYoung(x))", "all x y z.((Mother(x) & Crocodilian(y) & Young(z)) -> ProvidesCareTo(x,y,z))", "all x.((Mother(x) & Crocodilian(x)) -> ProvidesCareToYoung(x))", "all x y z.((CrocodynilianMother(x) & Young(y) & Young(z)) -> ProvidesCareTo(x,y,z))", "all x y.((CrocodynilianMother(x) & Young(y)) -> ProvidesCareTo(x,y))", "all x.(CrocodynilianMother(x) -> ProvidesCareToYoung(x))", "all x.((Mother(x) & Crocodilian(x)) -> ProvidesCareToYoung(x))"]}
{"id": "eqasc_validation_169", "nl": "Geckos are, in fact, reptiles.", "fol": "", "prediction": ["all x.(Geckos(x) -> Reptile(x))", "all x.(Geckos(x) -> Reptile(x))", "(Reptile(geckos) & InFactReptile(geckos))", "all x y.((Geckos(x) & Reptile(y)) -> Reptile(x))", "(Reptile(geckos) & Reptile(geckos))", "all x.(Geckos(x) -> Reptile(x))", "all x y.((Geckos(x) & Reptile(y)) -> Reptile(x))", "(Reptiles(geckos) & InFact(geckos,x))", "(Reptiles(geckos) & InFactReptiles(geckos))", "all x.(Geckos(x) -> Reptile(x))", "all x.(Geckos(x) -> Reptile(x))", "all x.(Geckos(x) -> Reptile(x))", "all x.(Geckos(x) -> Reptile(x))", "all x.(Geckos(x) -> Reptile(x))", "all x.(Geckos(x) -> Reptile(x))", "exists x.(Geckos(x) & Reptile(x))"]}
{"id": "eqasc_validation_170", "nl": "gecko parents provide little if any care to their young", "fol": "", "prediction": ["all x y.((GeckoParent(x) & Young(y)) -> ProvidesLittleCare(x,y))", "all x.(GeckoParent(x) -> ProvidesLittleCareToYoung(x))", "all x y z.((GeckoParent(x) & Young(y) & Young(z)) -> ProvidesLittleCare(x,y,z))", "all x y.((GeckoParent(x) & Young(y)) -> ProvidesLittleCare(x,y))", "all x.(GeckoParent(x) -> ProvidesLittleCareToYoung(x))", "(LittleCareToYoung(geckoParents) & LittleCareToYoung(geckoParents))", "all x.((GeckoParent(x) & Young(y)) -> ProvidesLittleCare(x,y))", "(LittleCareToYoung(GeckoParents) -> ProvidesToYoung(GeckoParents))", "all x.(GeckoParent(x) -> (ProvidesLittleCare(x) & Young(x)))", "all x y z.((GeckoParent(x) & Young(y) & Young(z)) -> ProvidesLittleCare(x,y,z))", "all x y.((GeckoParent(x) & Young(y)) -> ProvidesLittleCare(x,y))", "all x.(GeckoParent(x) -> ProvidesLittleCare(x))", "all x.(GeckoParent(x) -> ProvidesLittleCareToYoung(x))", "all x y.((GeckoParent(x) & Young(y)) -> ProvidesLittleCareTo(x,y))", "all x.(GeckoParent(x) -> ProvidesLittleIfAnyCareToYoung(x))", "all x y.((GeckoParent(x) & Young(y)) -> ProvidesLittleCare(x,y))"]}
{"id": "eqasc_validation_171", "nl": "All reptiles are cold-blooded.", "fol": "", "prediction": ["all x.(Reptile(x) -> ColdBlooded(x))", "all x.(Reptile(x) -> ColdBlooded(x))", "all x y.((Reptile(x) & ColdBlooded(x)) -> ColdBlooded(x))", "all x.(Reptile(x) -> ColdBlooded(x))", "(all x.(Reptile(x) -> ColdBlooded(x)))", "all x.(Reptile(x) -> ColdBlooded(x))", "all x.(Riptile(x) -> ColdBlooded(x))", "(all x.(Reptile(x) -> ColdBlooded(x))", "all x.(Reptile(x) -> ColdBlooded(x))", "all x.(Reptile(x) -> ColdBlooded(x))", "all x.(Reptile(x) -> ColdBlooded(x))", "all x.(Reptile(x) -> ColdBlooded(x))", "all x.(Reptile(x) -> ColdBlooded(x))", "all x.(Reptile(x) -> ColdBlooded(x))", "all x.(Reptile(x) -> ColdBlooded(x))", "all x.(Rope(x) -> ColdBlooded(x))"]}
{"id": "eqasc_validation_172", "nl": "cold-blooded parents provide little if any care to their young.", "fol": "", "prediction": ["all x.(ColdBloodedParent(x) -> ProvidesLittleCareToYoung(x))", "all x y.((ColdBloodedParent(x) & Young(y)) -> ProvidesLittleCare(x,y))", "all x.((Parent(x) & ColdBlooded(x)) -> ProvidesLittleCareToYoung(x))", "all x y z.((ColdBloodedParent(x) & Young(y) & ColdBlooded(z) & ProvidesLittleCare(x,y)) -> ProvidesLittleCare(x,z))", "all x.(ColdBloodedParent(x) -> ProvidesLittleCare(x))", "all x y.((ColdBloodedParent(x) & Young(y)) -> ProvidesLittleCare(x,y))", "all x y.((ColdBlooded(x) & Young(y)) -> ProvidesLittleCare(x,y))", "all x.((ColdBloodedParent(x) & Young(y)) -> ProvidesLittleCare(x,y))", "all x.(ColdBloodedParent(x) -> ProvidesLittleCareToYoung(x))", "all x y z.((ColdBloodedParent(x) & Young(y) & Child(z)) -> ProvidesLittleCare(x,y,z))", "all x y.((ColdBloodedParent(x) & Young(y)) -> ProvidesLittleCare(x,y))", "all x.((Parent(x) & ColdBlooded(x)) -> ProvidesLittleCare(x))", "all x.(ColdBloodedParent(x) -> ProvidesLittleCare(x))", "all x y.((ColdBloodedParent(x) & Young(y)) -> ProvidesLittleCare(x,y))", "all x.(ColdBloodedParent(x) -> ProvidesLittleCareToYoung(x))", "all x y.((ColdBloodedParent(x) & Young(y)) -> ProvidesLittleCare(x,y))"]}
{"id": "eqasc_validation_173", "nl": "Ground tissue makes up most of the interior of a plant.", "fol": "", "prediction": ["all x y.((GroundTissue(x) & Plant(y)) -> MakesUpInterior(x,y))", "all x.(GroundTissue(x) -> MakesUpInteriorOfPlant(x))", "all x y z.((GroundTissue(x) & Plant(y) & Interior(z)) -> MakesUp(x,y,z))", "all x y.((GroundTissue(x) & Plant(y)) -> MakesUpInterior(x,y))", "all x.(GroundTissue(x) -> MakesUpInteriorOfPlant(x))", "all x y z.((GroundTissue(x) & Plant(y) & Interior(z)) -> MakesUpMost(x,y,z))", "all x y.((GroundTissue(x) & Plant(y)) -> MakesUpInterior(x,y))", "all x.(GroundTissue(x) -> MakesUpInteriorOfPlant(x))", "exists x.(GroundTissue(x) & Plant(x) & MakesUpInterior(x,y))", "all x y z.((GroundTissue(x) & Plant(y) & Interior(z)) -> MakesUp(x,y,z))", "all x y.((GroundTissue(x) & Plant(y)) -> MakesUpInterior(x,y))", "all x.(GroundTissue(x) -> MakesUpInteriorOfPlant(x))", "exists x.(GroundTissue(x) & Plant(x) & MakesUpInteriorOf(x,y))", "all x y.((GroundTissue(x) & Plant(y)) -> MakesUpInterior(x,y))", "all x.(GroundTissue(x) -> MakesUpInteriorOfPlant(x))", "exists x.(GroundTissue(x) & InteriorOfPlant(x))"]}
{"id": "eqasc_validation_174", "nl": "Oaks are the most commonly attacked plants.", "fol": "", "prediction": ["all x.(Oak(x) -> MostCommonlyAttackedPlant(x))", "all x.(Oak(x) -> MostFrequentlyAttackedPlant(x))", "(AttackedPlant(Oaks) & MostCommonlyAttackedPlant(Oak))", "all x y.((Oak(x) & Plant(y)) -> MostFrequentlyAttacked(x,y))", "(AttackedPlant(Oaks) & OftenAttackedPlant(Oaks))", "all x.(Oak(x) -> MostCommonlyAttachedPlant(x))", "all x y.((Oak(x) & Plant(y)) -> MostCommonlyAttacked(x,y))", "all x.(Oak(x) -> AttackedPlant(x))", "all x y.((Oak(x) & Plant(y) & MostFrequentlyAttacked(x,y)) -> MostAttacked(x,y))", "all x.(Oak(x) -> MostFrequentlyAttachedPlant(x))", "all x y.((Oak(x) & Plant(y)) -> MostFrequentlyAttached(x,y))", "all x.(Oak(x) -> OftenAttackedPlant(x))", "all x.(Oak(x) -> MostCommonlyAttackedPlant(x))", "all x.(Oak(x) -> AfflictedPlant(x))", "All x.(Oaks(x) -> MostFrequentlyAssaultedPlant(x))", "All x.(Oak(x) -> AttackedPlant(x))"]}
{"id": "eqasc_validation_175", "nl": "Ground tissue makes up most of the interior of an oak", "fol": "", "prediction": ["all x y.((GroundTissue(x) & Oak(y)) -> MakesUpInterior(x,y))", "all x y z.((GroundTissue(x) & Oak(y) & Oak(z)) -> MakesUpInterior(x,y,z))", "all x.((GroundTissue(x) & Oak(x)) -> MakesUpInterior(x,y))", "all x y.((GroundTissue(x) & Oak(y)) -> MakesUpInterior(x,y))", "all x.(OakOak(x) -> MakesUpInteriorWithGroundTissue(x))", "(MostInsideOfOak(groundTissue) -> MakesUpInteriorOfOak(groundTissue))", "all x y z.((GroundTissue(x) & Oak(y) & Oak(z)) -> MakesUpInterior(x,y,z))", "all x.((GroundTissue(x) & Oak(x)) -> MakesUpInterior(x))", "all x y.((GroundTissue(x) & Oak(y)) -> MakesUpInterior(x,y))", "all x y.((Oak(x) & GroundTissue(y)) -> (MakesUpInterior(y,x) & MostOfInterior(y,x)))", "all x y z.((GroundTissue(x) & Oak(y) & Oak(z)) -> MakesUpInterior(x,y,z))", "all x.(OakOak(x) -> GroundTissue(x))", "all x.((GroundTissue(x) & Oak(y)) -> MakesUpInterior(x,y))", "exists x.(GroundTissue(x) & InteriorOfOak(x))", "all x y.((GroundTissue(x) & Oak(y)) -> MakesUpInterior(x,y))", "all x y z.((GroundTissue(x) & Oak(y) & Oak(z)) -> MakesUpInteriorOf(x,y,z))"]}
{"id": "eqasc_validation_176", "nl": "Vascular tissue and the roots involved can draw water into the plant from the ground.", "fol": "", "prediction": ["all x y.((VascularTissue(x) & Roots(y)) -> DrawsWaterIntoPlantFromGround(x,y))", "all x y z.((VascularTissue(x) & Roots(y) & Plant(z)) -> DrawsWaterFromGround(x,z))", "all x.((VascularTissue(x) & RootsInvolved(x)) -> DrawsWaterIntoPlantFromGround(x))", "all x y.((VascularTissue(x) & Roots(y)) -> DrawsWaterIntoPlantFromGround(x,y))", "all x y z.((VascularTissue(x) & Roots(y) & Plant(z) & Involves(x,y,z)) -> DrawsWaterInto(x,z))", "(DrawsWaterIntoPlantFromGround(vascularTissue,Ground) & VascularTissue(roots))", "all x.((VascularTissue(x) & RootsInvolved(x)) -> DrawsWaterIntoPlantFromGround(x))", "all x.((VascularTissue(x) & RootsInvoked(x)) -> DrawsWaterIntoPlantFromGround(x))", "all x y.((VascularTissue(x) & Roots(y)) -> DrawsWaterIntoPlant(x,y))", "all x y.((VascularTissue(x) & RootsInvoked(x)) -> DrawsWaterIntoPlantFromGround(x,y))", "all x.((VascularTissue(x) & Roots(x)) -> DrawsWaterIntoPlantFromGround(x))", "all x y z.((VascularTissue(x) & RootsInvoked(y) & Plant(z)) -> DrawsWaterFromGround(x,z))", "all x y z.((VascularTissue(x) & Roots(y) & Plant(z)) -> DrawsWaterFromGround(x,z))", "all x y.((VascularTissue(x) & Roots(y) & Plant(z)) -> DrawsWaterInto(x,z))", "all x.((VascularTissue(x) & Roots(x)) -> DrawsWaterIntoPlantFromGround(x))", "all x.((VascularTissue(x) & RootsInvolved(x)) -> DrawsWaterIntoPlantFromGround(x))"]}
{"id": "eqasc_validation_177", "nl": "Vascular tissue and roots make up the interior of a plant.", "fol": "", "prediction": ["all x y.((VascularTissue(x) & Roots(y)) -> MakesUpInteriorOfPlant(x,y))", "all x.((VascularTissue(x) & Roots(x)) -> InteriorOfPlant(x))", "all x y z.((VascularTissue(x) & Roots(y) & Plant(z)) -> MakesUpInterior(x,y,z))", "all x.((VascularTissue(x) & Roots(x)) -> MakesUpInteriorOfPlant(x))", "all x y.((VascularTissue(x) & Roots(y)) -> MakesUpInteriorOfPlant(x,y))", "exists x.(VascularTissue(x) & Roots(x) & MakesUpInteriorOfPlant(x))", "all x y z.((VascularTissue(x) & Roots(y) & Plant(z)) -> MakesUpInterior(x,y,z))", "all x y.((VascularTissue(x) & Roots(y)) -> MakesUpInterior(x,y))", "all x.((VascularTissue(x) & Roots(x)) -> InteriorOfPlant(x))", "all x.(Plant(x) -> (VascularTissue(x) & Roots(x) & Interior(x)))", "all x.((VascularTissue(x) & Roots(x)) -> MakesUpInteriorOfPlant(x))", "all x y z.((VascularTissue(x) & Roots(y) & Plant(z)) -> MakesUpInterior(x,y,z))", "all x y.((VascularTissue(x) & Roots(y)) -> MakesUpInteriorOfPlant(x,y))", "all x y.((VascularTissue(x) & Roots(y)) -> InteriorOfPlant(x,y))", "all x.((VascularTissue(x) & Roots(x)) -> InteriorOfPlant(x))", "all x.((VascularTissue(x) & Roots(x)) -> MakesUpInteriorOfPlant(x))"]}
{"id": "eqasc_validation_178", "nl": "Ferns are one type of seedless plant.", "fol": "", "prediction": ["all x.(Fern(x) -> SeedlessPlant(x))", "all x y.((Fern(x) & SeedlessPlant(y)) -> SeedlessPlant(x))", "all x.(Fern(x) -> SeedlessPlant(x))", "all x y.((Fern(x) & SeedlessPlant(y)) -> SeedlessPlant(x,y))", "(SeedlessPlant(fern))", "all x.(Fern(x) -> SeedlessPlant(x))", "all x.(Fern(x) -> SeedlessPlant(x))", "all x y.((Fern(x) & SeedlessPlant(y)) -> SeedlessPlant(x))", "all x y.((Fern(x) & SeedlessPlant(y)) -> SeedlessPlant(x,y))", "all x.(Fern(x) -> SeedlessPlant(x))", "all x.(Fern(x) -> SeedlessPlant(x))", "all x.(Fern(x) -> SeedlessPlant(x))", "all x.(Fern(x) -> SeedlessPlant(x))", "exists x.(Fern(x) & Seedless(x))", "all x.(Fern(x) -> SeedlessPlant(x))", "exists x.(Fern(x) & Seedless(x))"]}
{"id": "eqasc_validation_179", "nl": "ground tissue makes up most of the interior of ferns", "fol": "", "prediction": ["all x y.((GroundTissue(x) & Fern(y)) -> MakesUpInterior(x,y))", "all x.(GroundTissue(x) -> MakesUpInteriorOfFerns(x))", "all x y z.((GroundTissue(x) & Fern(y) & Interior(z)) -> MakesUpInterior(x,y,z))", "all x.((GroundTissue(x) & InteriorOfFerns(x)) -> MakesUpMostOfInteriorOfFerns(x))", "(MostInteriorOfFerns(GroundTissue) -> MakesUpInteriorOfFerns(GroundTissue))", "(MostInsideOfFerns(GroundTissue(GroundTissue) & InteriorOfFerns(GroundTissue))", "all x y.((GroundTissue(x) & Fern(y)) -> MakesUpInterior(x,y))", "all x.(GroundTissue(x) -> MakesUpInteriorOfFerns(x))", "all x y z.((GroundTissue(x) & Fern(y) & Interior(z)) -> MakesUpInterior(x,y,z))", "exists x,y,z w.(GroundTissue(x) & Fern(y) & Interior(z) & MakesUp(x,z)))", "all x.((GroundTissue(x) & InteriorOfFerns(x)) -> MakesUpMostOfInteriorOfFerns(x))", "all x y z.((GroundTissue(x) & Fern(y) & Interior(z) & MakesUpInterior(x,y,z)) -> Interior(x,y,z))", "all x y.((GroundTissue(x) & Fern(y)) -> MakesUpInterior(x,y))", "all x.(Ferns(x) & GroundTissue(x))", "all x.(GroundTissue(x) -> MakesUpInteriorOfFerns(x))", "all x y.((GroundTissue(x) & Fern(y)) -> MakesUpInterior(x,y))"]}
{"id": "eqasc_validation_180", "nl": "Plants hold nutrients in tissue.", "fol": "", "prediction": ["all x.(Plant(x) -> HoldsNutrientsInTissue(x))", "all x y.((Plant(x) & Tissue(y)) -> HoldsNutrients(x,y))", "all x y z.((Plant(x) & Nutrient(y) & Tissue(z)) -> HoldsIn(x,y,z))", "all x.(Plant(x) -> HoldsNutrientsInTissue(x))", "(HoldsNutrientsInTissue(Plant))", "all x y.((Plant(x) & Tissue(y)) -> HoldsNutrientsIn(x,y))", "all x y z.((Plant(x) & Tissue(y) & Nutrient(z)) -> HoldsIn(x,y,z))", "all x.(Plant(x) -> HoldsNutrientsInTissue(x))", "all x y.((Plant(x) & Tissue(y)) -> HoldsNutrients(x,y))", "all x.(Plant(x) -> HoldsNutrientsInTissue(x))", "all x y.((Plant(x) & Tissue(y)) -> HoldsNutrientsIn(x,y))", "all x.(Plant(x) -> HoldsNutrientsInTissue(x))", "all x y.((Plant(x) & Tissue(y)) -> HoldsNutrients(x,y))", "all x.(Plant(x) -> HoldsNutrientsInTissue(x))", "all x.(Plant(x) -> HoldsNutrients(x,Tissue))", "exists x.(Plant(x) & HoldsNutrients(x,Tissue))"]}
{"id": "eqasc_validation_181", "nl": "nutrients are held in tissue", "fol": "", "prediction": ["all x y.((Nutrient(x) & Tissue(y)) -> HeldIn(x,y))", "all x y z.((Nutrient(x) & Tissue(y) & Tissue(z)) -> HeldIn(x,y,z))", "all x.(Nutrients(x) -> HeldInTissue(x))", "all x y.((Nutrient(x) & Tissue(y)) -> HeldIn(x,y))", "all x y z.((Nutrients(x) & Tissue(y) & Tissue(z)) -> HeldIn(x,y,z))", "(all x.(Nutrients(x) -> HeldInTissue(x)))", "all x y.((Nutrients(x) & Tissue(y)) -> HeldIn(x,y))", "all x.(Nutrients(x) -> HeldInTissue(x))", "(all x y.((Nutrient(x) & Tissue(y)) -> HeldIn(x,y)))", "all x.(NutrientsHoldInTissue(x) -> HoldedInTissue(x))", "all x.(Nutrients(x) -> HoldenInTissue(x))", "all x y.((Nutrient(x) & Tissue(y) & HeldIn(x,y)) -> HoldsIn(x,y))", "all x y z.((Nutrient(x) & Tissue(y) & Tissue(z)) -> HeldIn(x,y,z))", "exists x.(Nutrient(x) & HeldInTissue(x))", "all x.(Nutrients(x) -> HeldInTissue(x))", "all x y.((Nutrients(x) & Tissue(y)) -> HeldIn(x,y))"]}
{"id": "eqasc_validation_182", "nl": "when a gas in an open container evaporates , that gas spreads out into the air", "fol": "", "prediction": ["all x y z.((Gas(x) & OpenContainer(y) & Gas(z) & Evaporates(x,y)) -> SpreadsOutIntoAir(z,y))", "all x y.((Gas(x) & OpenContainer(y) & Evaporates(x,y)) -> SpreadsOutIntoAir(x,y))", "all x y z.((GasInOpenContainer(x) & GasInOpenContainer(y) & GasInOpenContainer(z) & Evaporates(x,y)) -> SpreadsOutIntoAir(x,z))", "all x y z w.((Gas(x) & OpenContainer(y) & Gas(z) & Evaporates(x,y)) -> SpreadsOutIntoAir(z,w))", "all x.((GasInOpenContainer(x) & Evaporates(x)) -> SpreadsOutIntoAir(x))", "all x y z.((Gas(x) & OpenContainer(y) & Gas(z) & Evaporates(x,y)) -> SpreadsOutIntoAir(z))", "all x y.((GasInOpenContainer(x) & Evaporates(x)) -> SpreadsOutIntoAir(y))", "all x y z.((Gas(x) & OpenContainer(y) & Evaporates(x,y)) -> SpreadsOutIntoAir(x,z))", "all x.((GasInOpenContainer(x) & Evaporates(x)) -> GasSpreadsOutIntoAir(x))", "all x y z.((Gas(x) & OpenContainer(y) & OpenContainer(z) & Evaporates(x,y)) -> SpreadsOutIntoAir(x,z))", "all x y.((Gas(x) & OpenContainer(y) & Evaporates(x,y)) -> SpreadsOutIntoAir(x,y))", "all x y z w.((Gas(x) & OpenContainer(y) & Gas(z) & Evaporates(x,y)) -> SpreadsOutIntoAir(z,w))", "all x.(EvaporatesGasInOpenContainer(x) -> SpreadsOutIntoAir(x))", "all x.((GasInOpenContainer(x) & Evaporates(x)) -> SpreadsOutIntoAir(x))", "all x y.((GasInOpenContainer(x) & Evaporates(x)) -> SpreadsOutIntoAir(y))", "all x.((GasInOpenContainer(x) & Evaporates(x)) -> GasSpreadsOutIntoAir(x))"]}
{"id": "eqasc_validation_183", "nl": "Fumes during the evaporation present a danger.", "fol": "", "prediction": ["all x.((Fume(x) & Evaporation(x)) -> PresentsDanger(x))", "all x y.((Fume(x) & Evaporation(y)) -> PresentsDanger(x,y))", "all x.((Fume(x) & Evaporation(x)) -> PresentsDanger(x))", "all x y.((Fume(x) & Evaporation(y)) -> PresentsDanger(x,y))", "all x y z.((Fume(x) & Evaporation(y) & Evaporation(z) & Evaporation(z)) -> PresentsDanger(x,y,z))", "all x.(Fume(x) -> PresentsDanger(x))", "all x.(Fume(x) & Evaporation(x) -> PresentsDanger(x))", "all x.((Fume(x) & Evaporation(x)) -> PresentsDanger(x))", "all x y.((Fume(x) & Evaporation(y) & Evaporation(z) & PresentsDanger(x,y,z)) -> PresentsDanger(x,y,z))", "all x y.((Fume(x) & Evaporation(y)) -> PresentsDanger(x,y))", "all x.((Fume(x) & Evaporation(x)) -> PresentsDanger(x))", "exists x.(Fume(x) & Evaporation(x) & PresentsDanger(x))", "all x y.((Fume(x) & Evaporation(y)) -> PresentsDanger(x,y))", "all x.((Fume(x) & Evaporation(x)) -> PresentsDangerous(x))", "all x.(Evaporation(x) -> PresentsDanger(x))", "all x.((Fume(x) & Evaporation(x)) -> PresentsDanger(x))"]}
{"id": "eqasc_validation_184", "nl": "When a gas in an open container spreads out, fumes present a danger", "fol": "", "prediction": ["all x y.((Gas(x) & OpenContainer(y) & SpreadsOut(x,y)) -> FumesPresentDanger(x))", "all x y z.((Gas(x) & OpenContainer(y) & SpreadsOut(x,y)) -> FumesPresentDanger(x))", "all x.((GasInOpenContainer(x) & SpreadsOut(x)) -> FumesPresentDanger(x))", "all x y z.((Gas(x) & OpenContainer(y) & OpenContainer(z) & SpreadsOut(x,y)) -> FumesPresentDanger(x))", "all x y.((GasInOpenContainer(x) & SpreadsOut(x)) -> FumesPresentDanger(y))", "all x y.((Gas(x) & OpenContainer(y) & SpreadsOut(x,y)) -> FumesPresentDanger(x))", "all x.((GasInOpenContainer(x) & SpreadsOut(x)) -> FumesPresentDanger(x))", "all x y z.((GasInOpenContainer(x) & OpenContainer(y) & Fumes(z) & SpreadsOut(x,y)) -> PresentsDanger(z,y))", "all x.((Gas(x) & OpenContainer(x)) -> SpreadsOutFumes(x))", "all x y z.((Gas(x) & OpenContainer(y) & SpreadsOut(x,y)) -> FumesPresentDanger(x,z))", "all x.((GasInOpenContainer(x) & SpreadsOut(x)) -> FumesPresentDanger(x))", "all x y.((GasInOpenContainer(x) & SpreadsOut(x,y)) -> FumesPresentDanger(x))", "all x y.((Gas(x) & OpenContainer(y) & SpreadsOut(x,y)) -> FumesPresentDanger(x))", "all x y z.((Gas(x) & OpenContainer(y) & OpenContainer(z) & SpreadsOut(x,y)) -> FumesPresentDanger(x,z))", "all x.((GasInOpenContainer(x) & SpreadsOut(x)) -> FumesPresentDanger(x))", "all x.((GasInOpenContainer(x) & SpreadsOut(x)) -> FumesPresentDanger(x))"]}
{"id": "eqasc_validation_185", "nl": "Gases as well as vapours can contaminate the workplace air.", "fol": "", "prediction": ["all x.((Gases(x) & Vapours(x)) -> CanContaminateWorkplaceAir(x))", "all x y.((Gas(x) & Vapour(y)) -> CanContaminateWorkplaceAir(x,y))", "all x.((Gases(x) | Vapours(x)) -> CanContaminateWorkplaceAir(x))", "(ContaminatesWorkplaceAir(Gases) & ContaminatesWorkplaceAir(Vapors))", "(all x.(Gase(x) -> CanContaminateWorkplaceAir(x)) & all y.(Vapor(y) -> CanContaminateWorkplaceAir(y)))", "all x y.((Gase(x) & Vapour(y)) -> CanContaminateWorkplaceAir(x,y))", "all x y.((Gas(x) & Vapour(y)) -> CanContaminateWorkplaceAir(x,y))", "(ContaminatesWorkplaceAir(gases,air) & ContaminatesWorkplaceAir(vapours,air))", "all x.((Gase(x) & Vapour(x)) -> CanContaminateWorkplaceAir(x))", "(ContaminatesWorkplaceAir(Gases) & ContaminatesWorkplaceAir(Vapors))", "(ContaminateWorkplaceAir(Gases,Vapors) & ContaminateWorkplaceAir(Vapors,Air))", "all x y.((Gas(x) & Vapour(y)) -> (ContaminatesWorkplaceAir(x,y) | ContaminatesWorkplaceAir(y)))", "all x.((Gase(x) | Vapour(x)) -> CanContaminateWorkplaceAir(x))", "all x.((Gases(x) & Vapours(x)) -> CanContaminateWorkplaceAir(x))", "all x y.((Gases(x) & Vapours(y)) -> CanContaminateWorkplaceAir(x,y))", "all x.((Gases(x) | Vapours(x)) -> CanContaminateWorkplaceAir(x))"]}
{"id": "eqasc_validation_186", "nl": "When dangerous gas from an open container evaporates, it can contaminate a workplace.", "fol": "", "prediction": ["all x y.((DangerousGas(x) & OpenContainer(y) & Evaporates(x,y)) -> CanContaminateWorkplace(x))", "all x.((DangerousGas(x) & OpenContainer(x)) -> CanContaminateWorkplace(x))", "all x y z.((DangerousGas(x) & OpenContainer(y) & Workplace(z) & Evaporates(x,y)) -> CanContaminate(x,z))", "all x.((DangerousGasEvaporates(x) & OpenContainer(x)) -> CanContaminateWorkplace(x))", "all x y.((DangerousGas(x) & OpenContainer(y) & Evaporates(x,y)) -> CanContaminateWorkplace(x))", "all x.((DangerousGas(x) & OpenContainer(x)) -> CanContaminateWorkplace(x))", "all x y.((DangerousGasEvaporates(x) & OpenContainer(y)) -> CanContaminateWorkplace(x,y))", "all x y z.((DangerousGas(x) & OpenContainer(y) & Workplace(z) & Evaporates(x,y)) -> CanContaminate(x,z))", "all x y.((DangerousGas(x) & OpenContainer(y) & Evaporates(x,y)) -> CanContaminateWorkplace(x))", "all x.((DangerousGasEvaporates(x) & OpenContainer(x)) -> CanContaminateWorkplace(x))", "all x.((DangerousGas(x) & OpenContainer(x)) -> CanContaminateWorkplace(x))", "all x y.((DangerousGas(x) & OpenContainer(y) & Evaporates(x)) -> CanContaminateWorkplace(x))", "all x y.((DangerousGasEvaporates(x) & OpenContainer(y)) -> CanContaminateWorkplace(x,y))", "all x.(Evaporates(x) -> CanContaminateWorkplace(x))", "all x.((DangerousGas(x) & OpenContainerEvaporates(x)) -> CanContaminateWorkplace(x))", "all x.((DangerousGasEvaporates(x) & OpenContainer(x)) -> CanContaminateWorkplace(x))"]}
{"id": "eqasc_validation_187", "nl": "Gas is usually oxygen.", "fol": "", "prediction": ["all x.(Gas(x) -> Oxygen(x))", "all x.(Gas(x) -> UsuallyOxygen(x))", "(all x.(Gas(x) -> Oxygen(x)))", "all x.(Gas(x) -> (Oxygen(x) & Usually(x)))", "(Oxygen(Gas) & Usually(Gas))", "all x y.((Gas(x) & Oxygen(y)) -> Usually(x,y))", "all x.(Gas(x) -> Oxygen(x))", "(Oxygen(gas) -> Usually(gas))", "all x.(Gas(x) -> UsuallyOxygen(x))", "all x y.((Gas(x) & Oxygen(y)) -> Usually(x,y))", "all x.(Gas(x) -> (Oxygen(x) | Gas(x)))", "all x.(Gas(x) -> Oxygen(x))", "all x.(Gas(x) -> UsuallyOxygen(x))", "all x.(Gas(x) -> Oxygen(x))", "all x.(Gas(x) -> Oxygen(x))", "exists x.(Gas(x) & Oxygen(x))"]}
{"id": "eqasc_validation_188", "nl": "when oxygen in an open container evaporates , oxygen spreads out into the air", "fol": "", "prediction": ["all x y z.((Oxygen(x) & OpenContainer(y) & Evaporates(x,y)) -> (OxygenSpreadsOutIntoAir(x)))", "all x y z w.((Oxygen(x) & OpenContainer(y) & OpenContainer(z) & Evaporates(x,y)) -> OxygenSpreadsOutIntoAir(x,z))", "all x y z.((Oxygen(x) & OpenContainer(y) & OpenContainer(z) & Evaporates(x,y)) -> SpreadsOutIntoAir(x,z))", "(EvaporatesOxygenInOpenContainer(x) & OxygenSpreadsOutIntoAir(x))", "all x y.((Oxygen(x) & OpenContainer(y) & Evaporates(x,y)) -> SpreadsOutIntoAir(x))", "all x.((OxygenInOpenContainer(x) & Evaporates(x)) -> OxygenSpreadsOutIntoAir(x))", "all x y z.((OxygenInOpenContainer(x) & OpenContainer(y) & Evaporates(x,y)) -> OxygenSpreadsOutIntoAir(x,z))", "all x.((Oxygen(x) & OpenContainer(x)) -> (Evaporates(x) & SpreadsOutIntoAir(x)))", "all x y z.((EvaporatesOxygen(x) & OpenContainer(y) & OpenContainer(z) & Evaporates(x,y)) -> OxygenSpreadsOutIntoAir(x,z))", "all x y z.((Oxygen(x) & OpenContainer(y) & Evaporates(x,y)) -> (OxygenSpreadsOutIntoAir(x)))", "all x y z w.((Oxygen(x) & OpenContainer(y) & OpenContainer(z) & Evaporates(x,z) & Air(w)) -> SpreadsOut(x,w))", "all x y.((Oxygen(x) & OpenContainer(y) & Evaporates(x,y)) -> SpreadsOutIntoAir(x,y))", "all x y.((EvaporatesOxygenInOpenContainer(x) & OpenContainer(y)) -> SpreadsOutIntoAir(x,y))", "(EvaporatesOxygenInOpenContainer(x) & SpreadsOutIntoAir(x))", "all x.((OxygenInOpenContainer(x) & Evaporates(x)) -> OxygenSpreadsIntoAir(x))", "all x.((OxygenInOpenContainer(x) & Evaporates(x)) -> SpreadsOutIntoAir(x))"]}
{"id": "eqasc_validation_189", "nl": "Evaporation is when a liquid turns into a gas.", "fol": "", "prediction": ["all x.(Evaporation(x) -> (Liquid(x) & TurnsIntoGas(x)))", "all x y.((Liquid(x) & Gas(y)) -> Evaporation(x))", "all x y z.((Liquid(x) & Gas(y) & Liquid(z) & TurnsInto(x,y,z)) -> Evaporation(x))", "all x.(Evaporation(x) -> (Liquid(x) & TurnsIntoGas(x)))", "all x.(Evaporation(x) -> (Liquid(x) & TurnsIntoGas(x)))", "all x.((Liquid(x) & Gas(x)) -> Evaporation(x))", "all x y.((Liquid(x) & Gas(y)) -> Evaporation(x))", "(all x.(Evaporation(x) -> Liquid(x)))", "all x.(Evaporation(x) -> TurnsIntoGas(x))", "all x.(Evaporation(x) -> (LiquidTurnsIntoGas(x)))", "all x y.((Liquid(x) & Gas(y)) -> Evaporation(x))", "all x.((Liquid(x) & Gas(x)) -> Evaporation(x))", "exists x.(Liquid(x) & TurnsIntoGas(x))", "all x y.((Liquid(x) & Gas(y)) -> TurnsInto(x,y))", "all x.(Evaporation(x) -> (LiquidTurnsIntoGas(x)))", "all x y.((Liquid(x) & Gas(y)) -> Evaporation(x,y))"]}
{"id": "eqasc_validation_190", "nl": "When a liquid turns into a gas in an open container, it spreads out into the air.", "fol": "", "prediction": ["all x y.((Liquid(x) & OpenContainer(y) & TurnsIntoGas(x,y)) -> SpreadsOutIntoAir(x))", "all x y z.((Liquid(x) & Gas(y) & OpenContainer(z) & TurnsInto(x,y)) -> SpreadsOutIntoAir(x))", "all x.((Liquid(x) & TurnsIntoGas(x) & OpenContainer(x)) -> SpreadsOutIntoAir(x))", "all x y z.((Liquid(x) & Gas(y) & OpenContainer(z) & TurnsInto(x,y,z)) -> SpreadsOutIntoAir(x))", "all x.((Liquid(x) & TurnsIntoGas(x)) -> SpreadsOutIntoAir(x))", "all x y.((Liquid(x) & OpenContainer(y) & TurnsIntoGas(x,y)) -> SpreadsOutIntoAir(x))", "all x y.((Liquid(x) & Gas(y) & OpenContainer(x)) -> SpreadsOutIntoAir(x))", "all x.((Liquid(x) & OpenContainer(x)) -> TurnsIntoGas(x))", "all x.((Liquid(x) & TurnsIntoGasInOpenContainer(x)) -> SpreadsOutIntoAir(x))", "all x y z.((Liquid(x) & Gas(y) & OpenContainer(z) & TurnsInto(x,y,z)) -> SpreadsOutIntoAir(x))", "all x.((Liquid(x) & OpenContainer(x) & TurnsIntoGas(x)) -> SpreadsOutIntoAir(x))", "all x y z.((Liquid(x) & Gas(y) & OpenContainer(z) & TurnsIntoIn(x,y,z)) -> SpreadsOutIntoAir(x))", "all x y.((Liquid(x) & OpenContainer(y) & TurnsIntoGas(x,y)) -> SpreadsIntoAir(x))", "all x.((Liquid(x) & TurnsIntoGasInOpenContainer(x)) -> SpreadsIntoAir(x))", "all x y.((Liquid(x) & Gas(y) & OpenContainer(x)) -> SpreadsOutIntoAir(x,y))", "all x.((Liquid(x) & OpenContainer(x) & TurnsIntoGas(x)) -> SpreadsIntoAir(x))"]}
{"id": "eqasc_validation_191", "nl": "Similarly, hydrogen is an explosive gas.", "fol": "", "prediction": ["all x.(Hydrogen(x) -> ExplosiveGas(x))", "(Element(hydrogen) & ExplosiveGas(hydrogen))", "all x y.((Hydrogen(x) & ExplosiveGas(y)) -> ExplosiveGas(x))", "Similarly, hydrogen is anexplosiveGas(x)", "(Element(Hydrogen) & ExplosiveGas(Hydrogen))", "all x.(Hydrogen(x) -> ExplosiveGas(x))", "(ExcitingGas(hydrogen))", "(Element(hydrogen) & ExplosiveGas(hydrogen))", "(Element(hydrogen) & ExplosiveGas(hydrogen))", "all x.((Hydrogen(x) & ExplosiveGas(x)) -> ExplosiveGas(x))", "Similarly, hydrogen is anexplosiveGas(x)", "(ExcimerousGas(hydrogen))", "all x.(Hydrogen(x) -> ExplosiveGas(x))", "all x.(Hydrogen(x) -> ExplosiveGas(x))", "all x.(Hydrogen(x) -> ExplosiveGas(x))", "all x.(Hydrogen(x) -> ExplosiveGas(x))"]}
{"id": "eqasc_validation_192", "nl": "when hydrogen evaporates from an open container, it spreads out into the air", "fol": "", "prediction": ["all x y.((HydrogenEvaporates(x) & OpenContainer(y)) -> SpreadsOutIntoAir(x,y))", "all x y z.((Hydrogen(x) & OpenContainer(y) & OpenContainer(z) & EvaporatesFrom(x,y)) -> SpreadsOutIntoAir(x))", "all x y.((Hydrogen(x) & OpenContainer(y) & EvaporatesFrom(x,y)) -> SpreadsOutIntoAir(x))", "all x.((HydrogenEvaporates(x) & OpenContainer(x)) -> SpreadsOutIntoAir(x))", "all x y z.((HydrogenEvaporates(x) & OpenContainer(y) & OpenContainer(z) & EvaporatesFrom(x,y,z)) -> SpreadsOutIntoAir(x))", "(all x y.((HydrogenEvaporates(x) & OpenContainer(y)) -> SpreadsOutIntoAir(x,y)))", "all x.((HydrogenEvaporatesFromOpenContainer(x) & SpreadsOutIntoAir(x)) -> EvaporatesIntoAir(x))", "all x y.((HydrogenEvaporates(x) & OpenContainer(y) & SpreadsOutIntoAir(x,y)) -> EvaporatesFrom(x,y))", "all x y z.((Hydrogen(x) & OpenContainer(y) & OpenContainer(z) & EvaporatesFrom(x,y,z)) -> SpreadsOutIntoAir(x))", "all x.((HydrogenEvaporates(x) & OpenContainer(x)) -> SpreadsOutIntoAir(x))", "all x y z.((HydrogenEvaporatesFromOpenContainer(x) & OpenContainer(y) & Air(z)) -> SpreadsOutInto(x,z))", "all x y.((Hydrogen(x) & OpenContainer(y) & EvaporatesFrom(x,y)) -> SpreadsOutIntoAir(x))", "all x y.((HydrogenEvaporatesFromOpenContainer(x) & OpenContainer(y)) -> SpreadsOutIntoAir(x,y))", "all x.(EvaporatesHydrogenFromOpenContainer(x) -> SpreadsOutIntoAir(x))", "all x.((Hydrogen(x) & EvaporatesFromOpenContainer(x)) -> SpreadsOutIntoAir(x))", "all x.((HydrogenEvaporates(x) & OpenContainer(x)) -> SpreadsOutIntoAir(x))"]}
{"id": "eqasc_validation_193", "nl": "Water vapor is a gas in the air.", "fol": "", "prediction": ["all x.(WaterVapor(x) -> GasInAir(x))", "all x y.((WaterVapor(x) & Air(y)) -> GasIn(x,y))", "all x.(WaterVapor(x) -> GasInAir(x))", "(GasInAir(waterVapor(water))", "all x y z.((WaterVapor(x) & Air(y) & Gas(z)) -> GasIn(x,y,z))", "all x y.((WaterVapor(x) & Air(y)) -> Gas(x,y))", "all x.(WaterVapor(x) -> GasInAir(x))", "(GasInAir(WaterVapor,Gas))", "all x y.((WaterVapor(x) & Air(y)) -> GasIn(x,y))", "all x.(WaterVapor(x) -> GasInAir(x))", "(GasInAir(waterVapor(water))", "all x y.((WaterVapor(x) & Air(y)) -> Gas(x,y))", "all x.(WaterVapor(x) -> GasInAir(x))", "all x.(WaterVapor(x) -> GasInAir(x))", "all x.(WaterVapor(x) -> GasInAir(x))", "all x.(WaterVapor(x) -> GasInAir(x))"]}
{"id": "eqasc_validation_194", "nl": "when water vapor in an open container evaporates , water vapor spreads out into the air", "fol": "", "prediction": ["all x y z.((WaterVapor(x) & OpenContainer(y) & OpenContainer(z) & Evaporates(x,y)) -> SpreadsOutIntoAir(x,z))", "(all x y z.((WaterVaporInOpenContainer(x) & OpenContainer(y) & OpenContainer(z)) -> Evaporates(x,y)) & all z w.((WaterVapor(w) & Air(w)) -> SpreadsOutInto(w,w)))", "(EvaporatesWaterVaporInOpenContainer(x) & SpreadsWaterVaporIntoAir(x))", "all x y z w.((WaterVapor(x) & OpenContainer(y) & OpenContainer(z) & Evaporates(x,y)) -> SpreadsOutIntoAir(x,z))", "all x y z.((WaterVapor(x) & OpenContainer(y) & WaterVapor(z)) -> (Evaporates(x,y) & SpreadsOutIntoAir(z,y)))", "all x y.((WaterVapor(x) & OpenContainer(y) & Evaporates(x,y)) -> SpreadsOutIntoAir(x))", "all x.((WaterVaporInOpenContainer(x) & Evaporates(x)) -> WaterVaporSpreadsOutIntoAir(x))", "all x.((WaterVapor(x) & OpenContainer(x)) -> (Evaporates(x) & SpreadsOutIntoAir(x)))", "all x y z.((WaterVapor(x) & OpenContainer(y) & OpenContainer(z) & Evaporates(x,y)) -> SpreadsOutIntoAir(x,z))", "all x y.((WaterVapor(x) & OpenContainer(y)) -> (Evaporates(x,y) & SpreadsOutIntoAir(x,y)))", "all x y.((WaterVapor(x) & OpenContainer(y) & Evaporates(x,y)) -> SpreadsOutIntoAir(x,y))", "all x y.((WaterVaporInOpenContainer(x) & OpenContainer(y) & Evaporates(x,y)) -> SpreadsOutIntoAir(x))", "all x y z w.((WaterVapor(x) & OpenContainer(y) & OpenContainer(z) & Evaporates(x,z)) -> SpreadsOutIntoAir(x,w))", "all x y z.((WaterVaporInOpenContainer(x) & OpenContainer(y) & Air(z)) -> (Evaporates(x,y) & SpreadsOutInto(x,z)))", "all x y z.((WaterVapor(x) & OpenContainer(y) & WaterVapor(z)) -> (Evaporates(z) & SpreadsOutIntoAir(z)))", "all x.((WaterVaporInOpenContainer(x) & Evaporates(x)) -> SpreadsOutIntoAir(x))"]}
{"id": "eqasc_validation_195", "nl": "Kids lunch boxes are marvellous containers.", "fol": "", "prediction": ["all x.(KidsLunchBox(x) -> MarvellousContainer(x))", "all x y.((Kids(x) & LunchBox(y)) -> MarvellousContainer(x,y))", "all x.((KidsLunchBox(x) & Container(y)) -> Marvellous(x))", "all x.(KidsLunchBox(x) -> MarvellousContainer(x))", "all x y.((KidsLunchBox(x) & Container(y)) -> Marvellous(x,y))", "all x.((KidsLunchBox(x) & MarvellousContainer(x)) -> -(LunchBox(x) & LunchBox(x)))", "(FantasticContainer(kidsLunchBox)", "all x.(KidsLunchBox(x) -> MarvellousContainer(x))", "all x y.((Kids(x) & LunchBox(y)) -> MarvellousContainer(x,y))", "all x.(Child(x) -> LunchBox(x))", "exists x.(Child(x) & LunchBox(x) & MarvellousContainer(x))", "(FantasticContainer(kidsLunchBox)", "all x y.((KidsLunchBox(x) & Container(y)) -> Marvellous(x))", "all x.(KidsLunchBox(x) -> MarvellousContainer(x))", "all x.(Kids(x) -> LunchBox(x))", "all x.(KidsLunchBox(x) -> MarvellousContainer(x))"]}
{"id": "eqasc_validation_196", "nl": "If you place gas in an open box it will evaporate and spread out into the air.", "fol": "", "prediction": ["all x.((GasInOpenBox(x) & PlacesInOpenBox(x)) -> (Evaporates(x) & SpreadsOutIntoAir(x)))", "all x.((Gas(x) & OpenBox(x)) -> (Evaporates(x) & SpreadsOutIntoAir(x)))", "all x y.((Gas(x) & OpenBox(y)) -> (Evaporates(x) & SpreadsOutIntoAir(x)))", "all x.((GasInOpenBox(x)) -> (Evaporates(x) & SpreadsOutIntoAir(x)))", "all x y.((OpenBox(x) & Gas(y) & PlacesIn(x,y)) -> (Evaporates(y) & SpreadsOutIntoAir(y)))", "all x y.((Gas(x) & OpenBox(y)) -> (Evaporates(x,y) & SpreadsOutIntoAir(x,y)))", "all x.((OpenBox(x) & PlacesGasIn(x)) -> (Evaporates(x) & SpreadsOutIntoAir(x)))", "all x.((PlaceGasInOpenBox(x)) -> (Evaporates(x) & SpreadsOutIntoAir(x)))", "all x y z.((Gas(x) & OpenBox(y) & OpenBox(z)) -> (Evaporates(x,y) & SpreadsOutIntoAir(x,z)))", "all x.((Gas(x) & OpenBox(x)) -> (Evaporates(x) & SpreadsOutIntoAir(x)))", "all x y.((Gas(x) & OpenBox(y) & PlacesIn(x,y)) -> (Evaporates(x) & SpreadsOutIntoAir(x)))", "all x y.((OpenBox(x) & Gas(y)) -> (Evaporates(y,x) & SpreadsOutIntoAir(y,x)))", "all x.(PlacesGasInOpenBox(x) -> (Evaporates(x) & SpreadsOutIntoAir(x)))", "all x.((GasInOpenBox(x) & PlacesIn(x,y)) -> (Evaporates(y) & SpreadsOutIntoAir(y)))", "all x y z.((Gas(x) & OpenBox(y) & Gas(z)) -> (Evaporates(y,z) & SpreadsOutIntoAir(y,z)))", "all x.(OpenBox(x) -> (Evaporates(x) & SpreadsOutIntoAir(x)))"]}
{"id": "eqasc_validation_197", "nl": "Deadly carbon monoxide gas from the generator s exhaust can spread throughout enclosed spaces.", "fol": "", "prediction": ["all x.((GeneratorExhaust(x) & DeadlyCarbonMonoxideGas(x)) -> SpreadsThroughoutEnclosedSpaces(x))", "all x y.((Generator(x) & GeneratorExhaust(y)) -> DeadlyCarbonMonoxideGas(x,y))", "all x.((Generator(x) & Exhaust(x)) -> DeadlyCarbonMonoxideGas(x))", "all x y z.((DeadlyCarbonMonoxideGas(x) & GeneratorsExhaust(y) & EnclosedSpaces(z)) -> CanSpread(x,y,z))", "all x y.((DeadlyCarbonMonoxideGas(x) & GeneratorExhaust(y)) -> SpreadsThroughoutEnclosedSpaces(x,y))", "(DawlyCarbonMonoxideGas(x) & GeneratorsExhaust(x))", "all x y.((Generator(x) & GeneratorExhaust(y)) -> SpreadsThroughoutEnclosedSpaces(x,y))", "all x.(DeadlyCarbonMonoxideGas(x) -> (GeneratorExhaust(x) & SpreadsThroughoutEnclosedSpaces(x)))", "all x y.((Generator(x) & Exhaust(y) & DeadlyCarbonMonoxideGas(x,y)) -> SpreadsThroughoutEnclosedSpaces(x))", "all x y z.((DeadlyCarbonMonoxideGas(x) & GeneratorExhaust(y) & EnclosedSpace(z)) -> CanSpreadThroughout(x,y,z))", "(DeadlyCarbonMonoxideGasFromGeneratorExhaust(GM) & SpreadsThroughoutEnclosedSpaces(GM))", "all x.((GeneratorExhaust(x) & DeadlyCarbonMonoxideGas(x)) -> SpreadsThroughoutEnclosedSpaces(x))", "all x.((DeadlyCarbonMonoxideGas(x) & GeneratorsExhaust(x)) -> SpreadsThroughoutEnclosedSpaces(x))", "all x.(DeadlyCarbonMonoxideGasFromGeneratorExhaust(x) -> SpreadsThroughoutEnclosedSpaces(x))", "all x y.((DeadlyCarbonMonoxideGas(x) & Generator(y) & Exhaust(y)) -> SpreadsThroughoutEnclosedSpaces(x,y))", "(DawlyCarbonMonoxideGas(x) & GeneratorExhaust(x))"]}
{"id": "eqasc_validation_198", "nl": "carbon monoxide gas from a generator's exhaust has been evaporated", "fol": "", "prediction": ["all x y.((Generator(x) & GeneratorExhaust(y)) -> Evaporated(x,y))", "all x.((CarbonMonoxideGas(x) & GeneratorExhaust(x)) -> Evaporated(x))", "all x y z.((CarbonMonoxideGas(x) & GeneratorExhaust(y) & GeneratorExhaust(z)) -> Evaporated(x,y,z))", "all x y.((Generator(x) & GeneratorExhaust(y)) -> EvaporatedCarbonMonoxideGas(x,y))", "(EvaporatedCarbonMonoxideGasFromGeneratorExhaust(CO2 & FromGeneratorExhaust(CO2)))", "all x y z.((Generator(x) & CarbonMonoxideGas(y) & GeneratorExhaust(z)) -> Evaporated(y,z))", "all x y.((GeneratorExhaust(x) & CarbonMonoxideGas(y)) -> Evaporated(x,y))", "all x.((CarbonMonoxideGas(x) & GeneratorExhaust(x)) -> Evaporated(x))", "(EvaporatedCarbonMonoxideGas(CO2 & GeneratorExhaust(CO2))", "all x.(EvaporatedCarbonMonoxideGas(x) -> (GeneratorExhaust(x) & EvaporatedFromExhaust(x)))", "all x y.((Gas(x) & Generator(y) & FromExhaust(x,y)) -> Evaporated(x))", "all x.((CarbonMonoxideGas(x) & GeneratorExhaust(x)) -> Evaporated(x))", "all x y z.((Gas(x) & Generator(y) & GeneratorExhaust(z)) -> Evaporated(x,y,z))", "(EvaporatedCarbonMonoxideGasFromGeneratorExhaust(CO2))", "all x.((CarbonMonoxideGasFromGeneratorExhaust(x)) -> Evaporated(x))", "all x.((CarbonMonoxideGas(x) & GeneratorExhaust(x)) -> Evaporated(x))"]}
{"id": "eqasc_validation_199", "nl": "Bone is less flexible than cartilage but stronger.", "fol": "", "prediction": ["all x.(Bone(x) -> (LessFlexible(x) & Stronger(x)))", "all x y.((Bone(x) & Carboil(y)) -> (LessFlexible(x,y) & Stronger(x,y)))", "(LessFlexible(bone) & Stronger(bone))", "-(LessFlexibleBody(bone) & StrongerBody(bone))", "all x y.((Bone(x) & Cartilage(y)) -> (LessFlexible(x,y) & Stronger(x,y)))", "all x.(Bone(x) -> (LessFlexible(x) & Stronger(x)))", "(LessFlexible(bone) & Stronger(bone))", "all x y.((Bone(x) & Carboil(y)) -> (LessFlexible(x,y) & Stronger(x,y)))", "(LittleFlexible(Bone) & Stronger(Bone))", "(LessFlexibleThanCartillage(bone) & StrongerThanCartillage(bone))", "(LessFlexible(bone) & Stronger(bone))", "all x.(Bone(x) -> (LessFlexible(x) & Stronger(x)))", "All x.(Bone(x) -> (LessFlexibleThanCartilagin(x) & StrongerThanCartilagin(x)))", "all x y.((Bone(x) & Carboil(y)) -> (LessFlexible(x,y) & Stronger(x,y)))", "(LessFlexible(bone) & Stronger(bone))", "all x.(Bone(x) -> (LessFlexible(x) & Stronger(x)))"]}
{"id": "eqasc_validation_200", "nl": "Sharks have a cartilage skeleton.", "fol": "", "prediction": ["all x.(Shark(x) -> HasCartillageSkeleton(x))", "(HasCartilaginousSkeleton(Shark))", "all x.(Shark(x) -> HasCartillageSkeleton(x))", "all x y.((Shark(x) & Carboil(y)) -> Has(x,y))", "all x.(Shark(x) -> HasCartilaginousSkeleton(x))", "(HasCartilaginationSkeleton(Shark))", "all x y.(Shark(x) -> HasCartillageSkeleton(x,y))", "(all x.(Shark(x) -> HasCartillageSkeleton(x)))", "all x.(Shark(x) -> HasCartillageSkeleton(x))", "all x.(Shark(x) -> HasCartilaginousSkeleton(x))", "all x y.(Shark(x) -> HasCartillageSkeleton(x,y))", "all x.(Shark(x) -> (HasCartilaginousSkeleton(x)))", "all x.(Shark(x) -> HasCartilageSkeleton(x))", "all x.(Shark(x) -> HasCartilaginousSkeleton(x))", "all x.(Shark(x) -> HasCartillageSkeleton(x))", "all x.(Shark(x) -> HasCartilageSkeleton(x))"]}
{"id": "eqasc_validation_201", "nl": "regular skeletons are less flexible than shark skeletons but stronger.", "fol": "", "prediction": ["all x.(RegularSkeleton(x) -> (LessFlexible(x) & Stronger(x)))", "all x y.((RegularSkeleton(x) & SharkSkeleton(y)) -> (LessFlexible(x,y) & Stronger(x,y)))", "all x y.((Skeleton(x) & Shark(y)) -> (LessFlexible(x,y) & Stronger(x,y)))", "all x.((Skeleton(x) & Shark(x)) -> (LessFlexible(x) & Stronger(x)))", "all x.(RegularSkeleton(x) -> (LessFlexible(x) & Stronger(x)))", "(all x.(RegularSkeleton(x) -> LessFlexibleThanSharkSkeleton(x)) & StrongerThanSharkSkeleton(x))", "all x y.((RegularSkeleton(x) & SharkSkeleton(y)) -> (LessFlexible(x,y) & Stronger(x,y)))", "(all x.(RegularSkeleton(x) -> LessFlexible(x)) & all y.(SharkSkeleton(y) -> Stronger(y)))", "all x y.((Skeleton(x) & Shark(y)) -> (LessFlexible(x,y) & Stronger(x,y)))", "all x.(Skeleton(x) -> (LessFlexible(x) & Stronger(x)))", "all x.(RegularSkeleton(x) -> (LessFlexible(x) & Stronger(x)))", "(all x.(RegularSkeleton(x) -> LessFlexibleThanSharkSkeleton(x)) & StrongerThanSkeleton(x))", "all x y.((RegularSkeleton(x) & Shark(y)) -> (LessFlexible(x,y) & Stronger(x,y)))", "all x.(RegularSkeleton(x) -> (LittleRapid(x) & SharkSkeleton(x) & Stronger(x)))", "all x y.((RegularSkeleton(x) & SharkSkeleton(y)) -> (LessFlexible(x,y) & Stronger(x,y)))", "all x.(Skeleton(x) -> (LittleFlexible(x) & Stronger(x)))"]}
{"id": "eqasc_validation_202", "nl": "People's ears and bones are made of cartilage.", "fol": "", "prediction": ["all x.((Ears(x) & Bones(x)) -> MadeOfCartilization(x))", "all x y.((Popular(x) & Ears(y) & Bones(y)) -> MadeOfCartilization(x,y))", "all x.(EarsAndBones(x) -> MadeOfCartilization(x))", "all x y.((Ears(x) & Bones(y)) -> MadeOfCartilization(x,y))", "(MadeOfCartilagin(People) & MadeOfCartilagin(People))", "all x.((Ears(x) & Bones(x)) -> MadeOfCartilization(x))", "all x.((Ears(x) | Bones(x)) -> MadeOfCartilization(x))", "all x.(Ears(x) & Bones(x) -> MadeOfCartilization(x))", "all x y.((PopularEars(x) & Bones(y)) -> MadeOfCartilization(x,y))", "(MadeOfCartilization(People) -> (Ears(People) & Bones(People)))", "(MadeOfCartilagin (ears, cartilage) & MadeOfBones(bones,cartilagin))", "all x.(PopularEarsAndBones(x) -> MadeOfCartilization(x))", "all x y.((Person(x) & Ears(y) & Bones(y)) -> MadeOfCartilization(x,y))", "all x.((PopularEars(x) & Bones(x)) -> MadeOfCartilization(x))", "All x.(EarsAndBones(x) -> MadeOfCartilization(x))", "all x y.((Person(x) & Ears(y) & Bones(z)) -> MadeOfCartilization(x,y,z))"]}
{"id": "eqasc_validation_203", "nl": "ears made of cartilage", "fol": "", "prediction": ["all x.(Ears(x) -> MadeOfCartilagin(x))", "all x y.((Ear(x) & Carbohydrate(y)) -> MadeOf(x,y))", "all x.((Ears(x) & MadeOfCartilagin(x)) -> MadeOfCartilagin(x))", "(MadeOfCartilagin(Ears) & MadeOfCartilagin(Ears))", "Ohren MadeOfCartilagin (EarsMadeOfCartilagin(Ears))", "all x y.((Ear(x) & Ear(y)) -> MadeOfCartilagin(x,y))", "all x.(Ears(x) -> MadeOfCartilization(x))", "all x y z.((Ear(x) & Carbohydrate(y) & Ear(z)) -> MadeOf(x,y,z))", "all x y.((Ears(x) & Carbohydrate(y)) -> MadeOf(x,y))", "(MadeOfCartillage(ears) -> MadeOfCartillage(ears))", "all x.((Ears(x) & MadeOfCartilagin(x)) -> MadeOfCartilagin(x))", "all x y z.((Ear(x) & Carboillage(y) & Ear(z)) -> MadeOf(x,y,z))", "all x.(Ears(x) -> MadeOfCartillage(x))", "all x.((Ears(x) & MadeOfCartillage(x)) -> MadeOfCartillage(x))", "all x y.((Ear(x) & Carbohydrate(y)) -> MadeOf(x,y))", "all x.(Ears(x) -> MadeOfCartilagin(x))"]}
{"id": "eqasc_validation_204", "nl": "Most fish have bony skeletons, but sharks have skeletons made of cartilage .", "fol": "", "prediction": ["all x y.((Fish(x) & Shark(y)) -> (HasBonySkeleton(x) & HasSkeleton(y) & MadeOfCartillage(y)))", "(all x.(Fish(x) -> BonySkeleton(x)) & all y.(Shark(y) -> HasSkeleton(y)))", "(all x y.((Fish(x) & BonySkeleton(x)) -> Has(x,y)) & ((Shark(y) & Skeleton(y)) -> Has(y,Cartillage)))", "all x.(Fish(x) -> (HasBonySkeleton(x) | HasSkeleton(x) & MadeOfCartillage(x)))", "all x y.((Fish(x) & Shark(y)) -> (HasBonySkeleton(x) | HasSkeleton(y) & MadeOfCartillage(y)))", "(all x.(Fish(x) -> BonySkeleton(x)) & all y.(Shark(y) -> HasSkeleton(y,Cartillage))))", "all x y z.((Fish(x) & Shark(y) & BonySkeleton(x)) -> (Has(y,x) & Has(y,x) & MadeOfCartillage(y)))", "(all x y.((Fish(x) & BonySkeleton(x)) -> Has(x,y)) & all z w.((Shark(z) & Skeleton(w)) -> Has(z,w))))", "all x y.((Fish(x) & Shark(y)) -> (BonySkeleton(x) | Skeleton(y) & MadeOfCartillage(y)))", "all x y.((Fish(x) & Shark(y)) -> (HasBonySkeleton(x) & HasCartilagin(y)))", "(all x.(Fish(x) -> BonySkeletons(x)) & all y.(Shark(y) -> HasSkeletonsMadeOfCartillage(y)))", "(all x.(Fish(x) -> BonySkeleton(x)) & all y.(Shark(y) -> HasSkeletonMadeOfCartillage(y))))", "(all x y.(Fish(x) -> BonySkeleton(x)) & (Shark(y) -> HasSkeleton(y)))", "all x.(Shark(x) -> (HasBonySkeleton(x) | HasSkeleton(x) & MadeOfCartillage(x)))", "(all x.(Fish(x) -> BonySkeletons(x)) & all y.(Shark(y) -> HasSkeletonsMadeOfCartillage(y)))", "all x y.((Fish(x) & Shark(y)) -> (HasBonySkeletons(x) & HasSkeletonMadeOfCartilagin(y)))"]}
{"id": "eqasc_validation_205", "nl": "most fish have less flexible but stronger skeletons compared to sharks", "fol": "", "prediction": ["all x y.((Fish(x) & Shark(y)) -> (LessFlexibleSkeletons(x) & StrongerSkeletons(x)))", "all x y z.((Fish(x) & Shark(y) & Skeleton(z)) -> (LessFlexible(x,z) & Stronger(x,z)))", "(LossFlexibleSkeletons(fish) & StrongerSkeletons(fish) & Sharks(fish))", "all x y.((Fish(x) & Shark(y)) -> (LessFlexibleSkeletons(x,y) & StrongerSkeletons(x,y)))", "(all x y.((Fish(x) & Shark(y)) -> LessFlexibleSkeletons(x,y)) & ((Fish(x) & Shark(y)) -> StrongerSkeletons(x,y)))", "all x.((Fish(x) & Shark(x)) -> (LessFlexibleSkeletons(x) & StrongerSkeletons(x)))", "(all x.(Fish(x) -> LessFlexibleSkeleton(x)) & StrongerSkeleton(x)) & all y.(Shark(y) -> LessFlexibleSkeleton(y)))", "all x y.((Fish(x) & Shark(y)) -> (LessFlexibleSkeleton(x) & StrongerSkeleton(x)))", "all x.((Fish(x) & Shark(x)) -> (LessFlexibleSkeleton(x) & StrongerSkeleton(x)))", "all x y z.((Fish(x) & Shark(y) & Skeleton(z)) -> (LessFlexible(x,z) & Stronger(x,z)))", "all x y.((Fish(x) & Shark(y)) -> LessFlexibleSkeletons(x,y) & StrongerSkeletons(x,y))", "all x.((Fish(x) & Shark(x)) -> LessFlexibleSkeletons(x) & StrongerSkeletons(x))", "(LossFlexibleSkeletons(fish) & StrongerSkeletons(fish) & Sharks(fish))", "(exists x) y.(Fish(x) & Shark(y)) & LessFlexibleSkeletons(x,y) & StrongerSkeletons(x,y))", "all x.((Fish(x) & Shark(x)) -> (LessFlexibleSkeletons(x) & StrongerSkeletons(x)))", "all x y.((Fish(x) & Shark(y)) -> (LessFlexibleSkeletons(x,y) & StrongerSkeletons(x,y)))"]}
{"id": "eqasc_validation_206", "nl": "Articular cartilage is the cartilage that covers the bone and the joint areas.", "fol": "", "prediction": ["all x.(ArticularCartilagin(x) -> (Cartilagin(x) & CoversBoneAndJoinAreas(x)))", "all x y.((ArticularCartilagin(x) & Bone(y) & JointArea(z)) -> Covers(x,y,z))", "all x.(ArticularCartillage(x) -> (CartilizesBone(x) & CoversJoinAreas(x)))", "all x.(ArticularCartilagin(x) -> (Cartilagin(x) & CoversBone(x) & CoversJoin(x)))", "(ArticularCartilagin(ArticularCartilagin) -> CoversBoneAndJoinAreas(ArticularCartilagin))", "(CoversBoneAndJoinAreas(ArticularCartilagin) & CoversBoneAndJoinAreas(ArticularCartilagin))", "all x y.((ArticularCartillage(x) & Bone(y) & JointArea(z)) -> Covers(x,y,z))", "all x y z.((ArticularCartilagin(x) & Bone(y) & JointArea(z)) -> Covers(x,y,z))", "all x.(ArticularCartilagin(x) -> (CoversBone(x) & CoversJoin(x)))", "all x.(ArticularCartillolage(x) -> CoversBoneAndJoinAreas(x))", "all x.(ArticularCartillage(x) -> (Cartillage(x) & CoversBoneAndJoinAreas(x)))", "all x y.((ArticularCartilagin(x) & Bone(y) & JointArea(z)) -> Covers(x,y,z))", "all x.(ArticularCartillolage(x) -> (CartilizesBone(x) & CoversJoin(x)))", "all x.(ArticularCartilage(x) -> (CoversBone(x) & CoversJoinAreas(x)))", "all x y.((ArticularCartillo(x) & Bone(y) & JointArea(z)) -> Covers(x,y,z))", "All x.(ArticularCardilage(x) -> CoversBoneAndJoinAreas(x))"]}
{"id": "eqasc_validation_207", "nl": "bone is  less flexible but stronger than the material that covers it", "fol": "", "prediction": ["all x y.((Bone(x) & Material(y) & Covers(x,y)) -> (LessFlexible(x) & Stronger(x,y)))", "all x.((Bone(x) & LessFlexible(x) & Stronger(x)) -> Covers(x,y))", "all x y z.((Bone(x) & Material(y) & Material(z) & Covers(x,y)) -> (LessFlexible(x) & Stronger(x,z)))", "all x.(Bone(x) -> (LessFlexible(x) & Stronger(x)))", "(LessFlexible(bone) & Stronger(bone) -> (Material(bone) & Covers(bone)))", "all x y.((Bone(x) & Material(y) & Covers(x,y)) -> (LessFlexible(x) & Stronger(x)))", "all x y.((Bone(x) & Material(y)) -> (LessFlexible(x) & Stronger(x,y)))", "(-Flexible(bone) & Stronger(bone))", "(LessFlexibleButStrongerThanMaterial(bone) & Covers(bone,bone,material))", "all x.((Bone(x) & LessFlexible(x) & Stronger(x)) -> (Material(x) & Covers(x)))", "all x y z.((Bone(x) & Material(y) & Material(z) & Covers(x,y,z)) -> (LessFlexible(x) & Stronger(x,y)))", "(LessFlexibleButStrongerThanMaterial(bone) & CoversMaterial(bone,bone))", "all x.(Bone(x) -> (LessFlexible(x) & Stronger(x)))", "exists x.(Bone(x) & LessFlexible(x) & Stronger(x) & MaterialCovers(x))", "all x y.((Bone(x) & Material(y) & Covers(x,y)) -> (LessFlexible(x) & Stronger(x,y)))", "all x.((Bone(x) & LessFlexible(x) & Stronger(x)) -> CoveredMaterial(x))"]}
{"id": "eqasc_validation_208", "nl": "Tissues include bone and cartilage, bone marrow and corneas.", "fol": "", "prediction": ["all x.(Tissue(x) -> (Bone(x) & Carbohydrate(x) & BoneMarrow(x) & Corneas(x)))", "all x.(Tissue(x) -> (IncludesBone(x) & IncludesCartillage(x) & IncludesBoneMarrow(x) & IncludesCorneas(x)))", "(Bone(x) & Cartilage(x) & BoneMarrow(x) & Corneas(x))", "(all x.(Tissue(x) -> (Bone(x) | Cartilage(x))) & (BoneMarrow(x) | Corneas(x))))", "(IncludesBone(x) & IncludesCartilagin(x) & IncludesBoneMarrow(x) & IncludesCorneas(x))", "all x.(Tissue(x) -> (Bone(x) | Carbohydrate(x) | BoneMarrow(x) | Corneas(x)))", "all x y.((Tissue(x) & (Bone(y) | Carbohydrate(y))) | (BoneMarrow(y) | Corneas(y))))", "(all x.(Tissue(x) -> (Bone(x) | Carbohydrate(x))) & (BoneMarrow(x) | Corneas(x))))", "all x y z.((Tissue(x) & Bone(y) & Carbohydrate(z)) -> (Includes(x,y) & Includes(x,z)))", "(exists x.(Tissue(x) & (Bone(x) | Carbohydrate(x))) & exists y.(BoneMarrow(y) & Cornea(y))))", "all x.(Tissue(x) -> (IncludesBone(x) & IncludesCartilagin(x) & IncludesBoneMarrow(x) & IncludesCorneas(x)))", "all x.(Tissue(x) -> (Bone(x) & Cartilage(x) & BoneMarrow(x) & Corneas(x)))", "all x.(Tissue(x) -> (IncludesBone(x) & IncludesCartilagin(x) & IncludesBoneMarrow(x) & IncludesCorneas(x)))", "all x.(Tissue(x) -> (IncludesBone(x) & IncludesCartilization(x) & IncludesBoneMarrow(x) & IncludesCorneas(x)))", "exists x.(Tissue(x) & Includes(x,bone,cartilage) & Includes(x,boneMarrow) & Includes(x,corneas))", "all x.(Tissue(x) -> (Bone(x) | Cartilage(x) | BoneMarrow(x) | Corneas(x)))"]}
{"id": "eqasc_validation_209", "nl": "Some bodily tissues are flexible, while others are strong.", "fol": "", "prediction": ["exists x.(BodylyTissue(x) & Flexible(x) & Strong(x))", "exists x y.(BodylyTissue(x) & BodyTissue(y) & Flexible(x) & Strong(y))", "(exists x.(BodylyTissue(x) & Flexible(x)) & exists y.(BodylyTissue(y) & Strong(y)))", "exists x.(BodylyTissue(x) & Flexible(x) & Strong(x))", "exists x y.(BodylyTissue(x) & BodyTissue(y) & Flexible(x) & Strong(y))", "all x y.((BodylyTissue(x) & BodyTissue(y)) -> (Flexible(x) | Strong(y)))", "exists x.(BodylyTissue(x) & Flexible(x)) & exists y.(BodylyTissue(y) & Strong(y)))", "(exists x.(BodylyTissue(x) & Flexible(x)) & exists y.(BodylyTissue(y) & Strong(y)))", "exists x.(BodylyTissue(x) & Flexible(x) & Strong(x))", "exists x.(BodylyTissue(x) & (Flexible(x) | Strong(x)))", "(exists x.(BodylyTissue(x) & Flexible(x)) | exists y.(BodylyTissue(y) & Strong(y))))", "(exists x.(BodylyTissue(x) & Flexible(x)) & exists y.(BodylyTissue(y) & Strong(y)))", "exists x.(BodylyTissue(x) & Flexible(x) & Strong(x))", "exists x.(BodylyTissue(x) & (Flexible(x) | Strong(x)))", "exists x.(BodylyTissue(x) & Flexible(x) & Strong(x))", "exists x.(BodylyTissue(x) & Flexible(x) & Strong(x))"]}
{"id": "eqasc_validation_210", "nl": "Cartilage is more flexible and lighter in weight than bone.", "fol": "", "prediction": ["all x.(Cartilage(x) -> (MoreFlexible(x) & LighterInWeight(x)))", "all x y.((Cartilage(x) & Bone(y)) -> (MoreFlexible(x,y) & LighterInWeight(x,y)))", "(Flexible(cartilage) & LighterInWeight(cartilage))", "(MoreFlexible(cartilage) & LighterInWeight(cartilage))", "all x y.((Cartilage(x) & Bone(y)) -> (MoreFlexible(x,y) & Lighter(x,y)))", "all x.(Cartilage(x) -> (MoreFlexible(x) & LighterInWeight(x)))", "(Flexible(cartilage) & LighterInWeight(cartilage))", "all x.(Cartilage(x) -> (Flexible(x) & LighterInWeight(x)))", "all x y.((Cartilage(x) & Bone(y)) -> (MoreFlexible(x,y) & LighterInWeight(x,y)))", "all x.(Cartilage(x) -> (MoreFlexible(x) & LighterInWeight(x)))", "(Flexible(cartilage) & LighterInWeight(cartilage))", "all x y.((Cartilage(x) & Bone(y)) -> (Flexible(x) & LighterInWeight(x,y)))", "all x y.((Cartilage(x) & Bone(y)) -> (MoreFlexible(x,y) & Lighter(x,y)))", "all x.(Cartilage(x) -> (MoreFlexible(x) & LighterInWeight(x) & Bone(x)))", "all x.(Cartilage(x) -> (Flexible(x) & LighterInWeight(x)))", "all x y.((Cartilage(x) & Bone(y)) -> (MoreFlexible(x) & LighterInWeight(x,y)))"]}
{"id": "eqasc_validation_211", "nl": "Bone is stronger and more rigid than cartilage", "fol": "", "prediction": ["all x y.((Bone(x) & Carbolage(y)) -> (Stronger(x,y) & MoreRigid(x,y)))", "all x.(Bone(x) -> (Stronger(x) & MoreRigid(x)))", "all x y.((Bone(x) & Carboillage(y)) -> (Stronger(x,y) & MoreRigid(x,y)))", "(StrongerBone(bone) & MoreRigid(bone) vs.Cartilagin(bone))", "all x y z.((Bone(x) & Carbolage(y) & Bone(z)) -> (Stronger(x,z) & MoreRigid(x,z)))", "all x.((Bone(x) & Stronger(x) & MoreRigid(x)) -> MoreRigid(x))", "all x y.((Bone(x) & Carbolage(y)) -> (Stronger(x) & MoreRigid(x,y)))", "all x.(Bone(x) -> (Stronger(x) & MoreRigid(x) & Carboillage(x)))", "all x y.((Bone(x) & Cartilage(y)) -> (Stronger(x,y) & MoreRigid(x,y)))", "(StrengthierBone(bone) & MoreRigid(bone) & Carboillage(carboil))", "(StrongerAndRigidBone(bone,cartilage) & MoreRigidBone(bone,cartilage))", "(StrongerBone(bone) & MoreRigid(bone))", "(StrongerBone(bone) & MoreRigid(bone))", "all x y.((Bone(x) & Carbilage(y)) -> (Stronger(x,y) & MoreRigid(x,y)))", "all x.(Bone(x) -> (Stronger(x) & MoreRigid(x)))", "All x.(Bone(x) -> (Stronger(x) & MoreRigid(x)))"]}
{"id": "eqasc_validation_212", "nl": "bone skeletons are less flexible than shark skeletons but stronger", "fol": "", "prediction": ["all x y.((BoneSkeleton(x) & SharkSkeleton(y)) -> (LessFlexible(x,y) & Stronger(x,y)))", "all x.((BoneSkeleton(x) & SharkSkeleton(x)) -> (LessFlexible(x) & Stronger(x)))", "all x y.((BoneSkeleton(x) & Shark(y)) -> (LessFlexible(x,y) & Stronger(x,y)))", "all x y z.((BoneSkeleton(x) & Shark(y) & Shark(z)) -> (LessFlexible(x,y) & Stronger(x,z)))", "(all x y.((BoneSkeleton(x) & SharkSkeleton(y)) -> LessFlexible(x,y)) & ((BoneSkeleton(x) & SharkSkeleton(x)) -> Stronger(x)))", "(LessFlexible(boneSkeletons) & LessFlexible(boneSkeletons) & Stronger(boneSkeletons))", "all x y z.((BoneSkeleton(x) & SharkSkeleton(y) & SharkSkeleton(z)) -> (LessFlexible(x,y) & Stronger(x,z)))", "(LessFlexibleThanSharkSkeletons(boneSkeleton) & StrongerThanSharkSkeletons(boneSkeleton))", "(all x.(BoneSkeleton(x) -> LessFlexibleThanSharkSkeleton(x)) & (SharkSkeleton(x) -> StrongerThanSkeleton(x)))", "all x.(BoneSkeleton(x) -> (LessFlexibleThanSharkSkeleton(x) & StrongerThanSharkSkeleton(x)))", "all x y.((BoneSkeleton(x) & SharkSkeleton(y)) -> (LessFlexible(x,y) & Stronger(x,y)))", "all x.((BoneSkeleton(x) & SharkSkeleton(x)) -> (LessFlexible(x) & Stronger(x)))", "all x y.((BoneSkeleton(x) & Shark(y)) -> (LessFlexible(x,y) & Stronger(x,y)))", "all x.(BoneSkeleton(x) -> (LessFlexibleThanSharkSkeleton(x) & StrongerThanSharkSkeleton(x)))", "all x.((BoneSkeleton(x) & SharkSkeleton(x)) -> (LessFlexible(x) & Stronger(x)))", "all x y.((BoneSkeleton(x) & SharkSkeleton(y)) -> (LessFlexible(x,y) & Stronger(x,y)))"]}
{"id": "eqasc_validation_213", "nl": "Cartilage is strong, flexible, and lightweight.", "fol": "", "prediction": ["all x.(Cartilage(x) -> (Strong(x) & Flexible(x) & Lightweight(x)))", "(Strong(cartilage) & Flexible(cartilage) & Lightweight(cartilage))", "all x.(Cartilage(x) -> (Strong(x) & Flexible(x) & Lightweight(x)))", "(Strong(cartilage) & Flexible(cartilage) & Lightweight(cartilage))", "all x.(Cartilage(x) -> (Strong(x) & Flexible(x) & Lightweight(x)))", "all x y.((Cartilage(x) & Strong(y) & Flexible(y) & Lightweight(y)) -> Cartilage(x))", "(Strong(Cartilage) & Flexible(Cartilage) & Lightweight(Cartilage))", "all x.(Cartilage(x) -> (Strong(x) & Flexible(x) & Lightweight(x)))", "all x.(Cartilage(x) -> (Strong(x) & Flexible(x) & Lightweight(x)))", "all x.(Cartilage(x) -> (Strong(x) & Flexible(x) & Lightweight(x)))", "all x y.((Cartilage(x) & Strong(y) & Flexible(y) & Lightweight(y)) -> Cartilage(x))", "all x.(Cartilage(x) -> (Strong(x) & Flexible(x) & Lightweight(x)))", "exists x.(Cartilage(x) & Strong(x) & Flexible(x) & Lightweight(x))", "all x.(Cartilage(x) -> (Strong(x) & Flexible(x) & Lightweight(x)))", "all x.(Cartilage(x) -> (Strong(x) & Flexible(x) & Lightweight(x)))", "all x.(Cartilage(x) -> (Strong(x) & Flexible(x) & Lightweight(x)))"]}
{"id": "eqasc_validation_214", "nl": "Bone is less lightweight than cartilage but stronger.", "fol": "", "prediction": ["all x.(Bone(x) -> (LessLightweight(x) & Stronger(x)))", "all x y.((Bone(x) & Carboil(y)) -> (LessLightweight(x,y) & Stronger(x,y)))", "(Lightweight(bone) & Stronger(bone))", "(LessLightweight(bone) & Stronger(bone))", "(LessLightweightThanCartilagin(bone) & StrongerThanCartilagin(bone))", "all x.(Bone(x) -> (LessLightweight(x) & Stronger(x)))", "all x y.((Bone(x) & Carboil(y)) -> (Lightweight(x,y) & Stronger(x,y)))", "all x.(Bone(x) -> (Lightweight(x) & Stronger(x)))", "(LightweightBone(bone) & StrongerBone(bone))", "all x y.((Bone(x) & Cartilage(y)) -> (LessLightweight(x,y) & Stronger(x,y)))", "(LessLightweightThanCartillage(bone) & StrongerThanCartillage(bone))", "All x.(Bone(x) -> (LessLightweightThanCartilagin(x) & StrongerThanCartilagin(x)))", "all x y.((Bone(x) & Carboil(y)) -> (LessLightweight(x,y) & Stronger(x,y)))", "all x.(Bone(x) -> (LessLightweight(x) & Stronger(x)))", "all x.(Bone(x) -> (Lightweight(x) & Stronger(x)))", "All x.(Bone(x) -> (Lightweight(x) & Stronger(x)))"]}
{"id": "eqasc_validation_215", "nl": "Grossly, cartilage is a semi-translucent tissue, firm, but more flexible than bone.", "fol": "", "prediction": ["all x.(Cartilage(x) -> (SemiTranslucentTissue(x) & Firm(x) & MoreFlexibleThanBone(x)))", "all x y.((Cartilage(x) & Bone(y)) -> (SemiTranslucentTissue(x) & Firm(x) & MoreFlexible(x,y)))", "(SemitranslucentTissue(cartilage) & Firm(cartilage) & FlexibleThanBone(cartilage))", "all x.(Cartilage(x) -> (SemiTranslucentTissue(x) & Firm(x) & FlexibleThanBone(x)))", "(SemitranslucentTissue(Cartilage) & Firm(Cartilage) & MoreFlexibleThanBone(Cartilage))", "all x y z.((Cartilage(x) & SemiTranslucentTissue(y) & Firm(z)) -> (SemiTranslucent(x,y) & MoreFlexibleThanBone(x,z)))", "all x.(Cartilagin(x) -> (SemiTranslucentTissue(x) & Firm(x) & FlexibleThanBone(x)))", "all x.((Cartilage(x) & SemiTranslucentTissue(x) & Firm(x) & FlexibleThanBone(x)) -> Grossly(x))", "(Granularly, cartilage is semitranslucentTissue(cartilage) & Firm(cartilage) & MoreFlexibleThanBone(cartilage))", "all x y.((Cartilage(x) & Bone(y)) -> (SemiTranslucentTissue(x) & Firm(x) & MoreFlexibleThan(x,y)))", "(Groovy(cartilage) & SemiTranslucentTissue(cartilage) & Firm(cartilage) & Flexible(cartilage))", "all x.(Cartilage(x) -> (SemitranslucentTissue(x) & Firm(x) & MoreFlexibleThanBone(x)))", "(SemitranslucentTissue(cartilage) & Firm(cartilage) & FlexibleThanBone(cartilage))", "all x y.((Cartilage(x) & Bone(y)) -> (SemitranslucentTissue(x) & Firm(x) & Flexible(x)))", "all x.(Cartilage(x) -> (SemitranslucentTissue(x) & Firm(x) & MoreFlexibleThanBone(x)))", "all x.(Cartilage(x) -> (SemiTranslucentTissue(x) & Firm(x) & FlexibleThanBone(x)))"]}
{"id": "eqasc_validation_216", "nl": "bone is less flexible than a semi-translucent tissue", "fol": "", "prediction": ["all x y.((Bone(x) & SemiTranslucentTissue(y)) -> LessFlexibleThan(x,y))", "all x.((Bone(x) & SemiTranslucentTissue(x)) -> LessFlexible(x))", "all x y z.((Bone(x) & SemiTranslucentTissue(y) & Tissue(z)) -> LessFlexibleThan(x,y,z))", "all x y.((Bone(x) & SemiTranslucentTissue(y)) -> LessFlexible(x,y))", "(-FlexibleBone(bone,semitranslucentTissue) & LessFlexibleBone(bone,semitranslucentTissue))", "(LessFlexibleBoneTissue(bone) vs.SemiTranslucentTissue(bone))", "all x.((Bone(x) & SemiTranslucentTissue(x)) -> LessFlexibleThan(x))", "all x y z.((Bone(x) & SemiTranslucentTissue(y) & SemiTranslucentTissue(z)) -> LessFlexible(x,y,z))", "(all x.(Bone(x) -> LessFlexible(x))) & (SemiTranslucentTissue(x) -> LessFlexible(x)))", "all x y.((Bone(x) & SemiTranslucentTissue(y)) -> LessFlexibleThan(x,y))", "all x.((Bone(x) & SemiTranslucentTissue(x)) -> LessFlexible(x))", "all x y.((Bone(x) & SemiTranslucentTissue(y)) -> LessFlexible(x,y))", "all x.((Bone(x) & SemiTranslucentTissue(x)) -> LessFlexibleThan(x))", "all x y.((Bone(x) & SemiTranslucentTissue(y)) -> LessFlexibleThan(x,y))", "all x.((Bone(x) & SemiTranslucentTissue(x)) -> LessFlexibleThan(x))", "all x y.((Bone(x) & SemiTranslucentTissue(y)) -> LessFlexibleThan(x,y))"]}
{"id": "eqasc_validation_217", "nl": "bad weather decreases visibility while driving", "fol": "", "prediction": ["all x.((BadWeather(x) & BadWeather(x)) -> DecreasesVisibility(x))", "all x y.((BadWeather(x) & BadWeather(y)) -> DecreasesVisibility(x,y))", "all x.(BadWeather(x) -> DecreasesVisibility(x))", "badWeatherDecreasesVisibility(x) & Driving(x))", "all x y z.((BadWeather(x) & BadWeather(y) & Driving(z)) -> DecreasesVisibility(x,y,z))", "badWeatherDecreasesVisibilityWhileDriving(x) -> DecreasesVisibility(x))", "badWeatherDecreasesVisibility(badWeather(badWeather) & Driving(badWeather(badWeather))", "all x.((BadWeather(x) & DecreasesVisibility(x)) -> DecreasesVisibility(x))", "all x y.((BadWeather(x) & BadWeather(y)) -> DecreasesVisibilityWhileDriving(x,y))", "all x y.((BadWeather(x) & Driving(y)) -> DecreasesVisibility(x,y))", "all x.(BadWeather(x) -> DecreasesVisibility(x))", "all x.((BadWeather(x) & BadWeather(x)) -> DecreasesVisibilityWhileDriving(x))", "badWeatherDecreasesVisibilityWhileDriving(battleWeather(c) & BadWeather(c))", "all x.(BadWeather(x) -> DecreasesVisibilityWhileDriving(x))", "badWeatherDecreasesVisibility(x) & Driving(x))", "badWeatherDecreasesVisibilityWhenDriving."]}
{"id": "eqasc_validation_218", "nl": "More visibility means safe operation.", "fol": "", "prediction": ["all x.(MoreVisibility(x) -> SafeOperation(x))", "MehrVisibilitySecureOperation(MoreVisibility(MoreVisibility(MoreVisibility(MoreVisibility(MoreVisibility(MoreVisibility(MoreVisibility(MoreVisibility(MoreVisibility(MoreVisibility(MoreVisibility(MoreVisibility(MoreVisibility(MoreVisibility(More(More(More(More(More(More(More(More(More(More)))))", "(MoreVisibility(x) -> SafeOperation(x))", "all x.((Visibility(x) & SafeOperation(x)) -> MoreVisibility(x))", "all x.(MoreVisibility(x) -> SafeOperation(x))", "all x y.((MoreVisibility(x) & Operation(y)) -> Safe(x,y))", "(MoreVisibility(x) -> SafeOperation(x))", "all x.(MoreVisibility(x) -> SafeOperation(x))", "all x y.((MoreVisibility(x) & Operation(y)) -> Safe(x,y))", "All x.((Visibility(x) & SafeOperation(x)) -> MoreVisibility(x))", "all x.(MoreVisibility(x) -> SafeOperation(x))", "all x y.((MoreVisibility(x) & Operation(y)) -> Safe(x,y))", "All x.(MoreVisibility(x) -> SafeOperation(x))", "all x y.((MoreVisibility(x) & Operation(y)) -> Safe(x,y))", "All x.(MoreVisibility(x) -> SafeOperation(x))", "All x.(MoreVisibility(x) -> SafeOperation(x))"]}
{"id": "eqasc_validation_219", "nl": "Bad weather decreases safe operation while driving", "fol": "", "prediction": ["all x.((BadWeather(x) & SafeOperation(x) & Driving(x)) -> Decreases(x))", "BadWeatherDecreasesSafeOperationWhileDriving(BadWeather(BadWeather(BadWeather(BadWeather(BadWeather(BadWeather(BadWeather(BadWeather(BadWeather(BadWeather(BadWeather(BadWeather(BadWeather(BadWeather(BadWeather(BadWeather(BadWeather(BadWeather(BadWeather(Bad)))))", "all x y.((BadWeather(x) & Driving(y)) -> DecreasesSafeOperation(x,y))", "all x.(BadWeather(x) -> DecreasesSafeOperation(x))", "(DecreasesSafeOperation(badWeather(badWeather) & Driving(badWeather))", "all x.((BadWeather(x) & SafeOperation(x)) -> Decreases(x))", "all x y z.((BadWeather(x) & SafeOperation(y) & Driving(z)) -> Decreases(x,y,z))", "badWeatherDecreasesSafeOperation(badWeather(badWeather) & Driving(badWeather(badWeather))", "(DamageWeatherDecreasesSafeOperation(badWeather) & Driving(badWeather))", "all x y.((BadWeather(x) & Driving(y)) -> DecreasesSafeOperation(x,y))", "all x y.((BadWeather(x) & BadWeather(y)) -> DecreasesSafeOperation(x,y))", "all x.((BadWeather(x) & DecreasesSafeOperation(x)) -> DrivingDamage(x))", "all x.(BadWeather(x) -> DecreasesSafeOperation(x))", "all x.(BadWeatherDecreasesSafeOperation(x) & Driving(x))", "all x.((BadWeather(x) & SafeOperation(x)) -> Decreases(x))", "all x y.((BadWeather(x) & Driving(y)) -> DecreasesSafeOperation(x,y))"]}
{"id": "eqasc_validation_220", "nl": "Good visibility is essential for safe driving.", "fol": "", "prediction": ["all x.(GoodVisibility(x) -> SafeDriving(x))", "all x.((GoodVisibility(x) & SafeDriving(x)) -> EssentialFor(x,y))", "all x y.((GoodVisibility(x) & SafeDriving(y)) -> EssentialFor(x,y))", "all x.(GoodVisibility(x) -> SafeDriving(x))", "all x.((GoodVisibility(x) & SafeDriving(x)) -> EssentialForSafeDriving(x))", "all x.(GoodVisibility(x) -> SafeDriving(x))", "all x y.((GoodVisibility(x) & SafeDriving(y)) -> EssentialFor(x,y))", "all x.(GoodVisibility(x) -> EssentialForSafeDriving(x))", "all x.((GoodVisibility(x) & SafeDriving(x)) -> EssentialFor(x,y))", "all x y.((GoodVisibility(x) & SafeDriving(y)) -> EssentialFor(x,y))", "all x.(GoodVisibility(x) -> SafeDriving(x))", "all x y.((GoodVisibility(x) & SafeDriving(y)) -> EssentialFor(x,y))", "All x.((GoodVisibility(x) & SafeDriving(x)) -> EssentialForSafeDriving(x))", "all x.(GoodVisibility(x) -> EssentialForSafeDriving(x))", "exists x.(GoodVisibility(x) & EssentialForSafeDriving(x))", "exists x.(GoodVisibility(x) & EssentialForSafeDriving(x))"]}
{"id": "eqasc_validation_221", "nl": "Bad weather causes unsafe driving conditions. ", "fol": "", "prediction": ["all x.(BadWeather(x) -> UnsafeDrivingConditions(x))", "badWeatherCausesUnsafeDrivingConditions(BadWeather)", "all x y.((BadWeather(x) & DrivingCondition(y)) -> Unsafe(x,y))", "all x.((BadWeather(x) & UnsafeDrivingConditions(x)) -> BadWeather(x))", "all x.(BadWeather(x) -> UnsafeDrivingConditions(x))", "all x y.((BadWeather(x) & BadConditions(y)) -> UnsafeDriving(x,y))", "badWeatherCausesUnsafeDrivingConditions(BadWeather)", "(UnsafeDrivingConditions(badWeather))", "all x y.((BadWeather(x) & UnsafeDrivingConditions(y)) -> Causes(x,y))", "all x.((BadWeather(x) & UnsafeDrivingConditions(x)) -> BadWeather(x))", "all x.(BadWeather(x) -> UnsafeDrivingConditions(x))", "all x.((BadWeather(x) & UnsafeDrivingConditions(x)) -> Causes(x,y))", "all x y.((BadWeather(x) & DrivingCondition(y)) -> Unsafe(x,y))", "all x.(BadWeather(x) -> UnsafeDrivingConditions(x))", "all x.(BadWeather(x) -> UnsafeDrivingConditions(x))", "all x.(BadWeather(x) -> UnsafeDrivingConditions(x))"]}
{"id": "eqasc_validation_222", "nl": "Another dangerous weather phenomena that thunderstorms produce is hail.", "fol": "", "prediction": ["all x.((Thunderstorm(x) & Hail(x)) -> DangerousWeatherPhenomenon(x))", "all x y.((Thunderstorm(x) & Hail(y)) -> DangerousWeatherPhenomenon(x,y))", "(DangerousWeatherPhenomenon(Thunderstorms) & Hail(Hail))", "all x.((Thunderstorm(x) & Hail(x)) -> DangerousWeatherPhenomenon(x))", "(DangerousWeatherPhenomenon(tornadoes) & Produces(tornadoes))", "all x.((Thunderstorm(x) & HazardousWeatherPhenomenon(x)) -> Hail(x))", "all x.(DangerousWeatherPhenomenon(x) & ProducedByThunderstorms(x) -> Hail(x))", "(DangerousWeatherPhenomenon(Thunderstorms) & Produces(Thunderstorms) & Hail(Hail))", "all x y.((Thunderstorm(x) & Hail(y)) -> DangerousWeatherPhenomenon(x,y))", "all x.((Thunderstorm(x) & Hail(x)) -> DangerousWeatherPhenomenon(x))", "(DangerousWeatherPhenomenon(tornadoes) & Produces(tornadoes) & Hail(tornadoes))", "all x y.((Thunderstorm(x) & WeatherPhenomenon(y)) -> Hail(y))", "all x y.((Thunderstorm(x) & Hail(y)) -> DangerousWeatherPhenomenon(x,y))", "exists x.(DangerousWeatherPhenomenon(x) & StormsProduce(x))", "all x.((Thunderstorm(x) & HazardousWeatherPhenomenon(x)) -> Hail(x))", "all x.((Thunderstorm(x) & Hail(x)) -> DangerousWeatherPhenomenon(x))"]}
{"id": "eqasc_validation_223", "nl": "hail decreases visibility while driving", "fol": "", "prediction": ["all x.(Hail(x) -> DecreasesVisibility(x))", "all x y.((Hail(x) & Driving(y)) -> DecreasesVisibility(x,y))", "all x y z.((Hail(x) & Driving(y) & Hail(z)) -> DecreasesVisibility(x,y,z))", "(HailDecreasesVisibility(Hail) & Driving(Hail))", "all x.(Hail(x) -> DecreasesVisibility(x))", "all x y.((Hail(x) & Driving(y)) -> DecreasesVisibility(x,y))", "(DecreasesVisibilityWhenDriving(Hail(Hail) & Driving(Hail))", "(-HailDecreasesVisibilityWhileDriving(horse))", "all x y z.((Hail(x) & Driving(y) & Driving(z)) -> (DecreasesVisibility(x,y) & -DecreasesVisibility(x,z)))", "all x.(Hail(x) -> (DecreasesVisibility(x) & Driving(x)))", "all x y.((Hail(x) & Driving(y)) -> (DecreasesVisibility(x,y) & Drives(x,y)))", "all x y.((Hail(x) & Driving(y)) -> DecreasesVisibility(x,y))", "all x.(HailDecreasesVisibility(x) & Driving(x))", "all x.(Hail(x) -> DecreasesVisibility(x))", "all x.(HailDiscriminatesVisibility(x) & Driving(x))", "all x.(HailDecreasesVisibility(x) & Driving(x))"]}
{"id": "eqasc_validation_224", "nl": "While driving to the Small Boat Harbor tournament site, the fog had taken visibility to near zero.", "fol": "", "prediction": ["all x y.((Fog(x) & SmallBoatHarborTournamentSite(y)) -> VisibilityNearZero(x,y))", "all x.((Fog(x) & DrivingToSmallBoatHarborTournamentSite(x)) -> VisibilityNearZero(x))", "(DrivesToSmallBoatHarborTournamentSite(Fog) & VisibilityNearZero(Fog))", "(FogTakesVisibilityToNearZero(Fog) & DrivingToSmallBoatHarborTournamentSite(Fog))", "During the driving to SmallBoatHarborTournamentSite, FogTakesVisibilityToNearZero(Fog))", "the fog had taken visibility to near zero while driving to SmallBoatHarborTournamentSite.", "all x y.((Fog(x) & SmallBoatHarborTournamentSite(y)) -> TakesVisibilityToNearZero(x,y))", "During driving to SmallBoatHarborTournamentSite, FogTakesVisibilityToNearZero(Fog))", "the fog took visibility to near zero while driving to SmallBoatHarborTournamentSite(f)", "(FogDriveToSmallBoatHarborTournamentSite(f) & VisibilityNearZero(f))", "all x y.((Fog(x) & SmallBoatHarborTournamentSite(y) & DrivingTo(x,y)) -> VisibilityNearZero(x))", "all x y z.((Fog(x) & SmallBoatHarborTournamentSite(y) & Fog(z)) -> VisibilityNearZero(z))", "all x.((Fog(x) & DrivingToSmallBoatHarborTournamentSite(x)) -> VisibilityNearZero(x))", "all x.((Fog(x) & DrivingToSmallBoatHarbor(x)) -> VisibilityNearZero(x))", "all x y.((Fog(x) & SmallBoatHarbor(y)) -> VisibilityNearZero(x,y))", "all x.((Fog(x) & DrivingToSmallBoatHarborTournamentSite(x)) -> VisibilityNearZero(x))"]}
{"id": "eqasc_validation_225", "nl": "Bad weather takes visibility to near zero.", "fol": "", "prediction": ["all x.(BadWeather(x) -> TakesVisibilityToNearZero(x))", "all x y.((BadWeather(x) & Visibility(y)) -> NearNull(x))", "all x.(BadWeather(x) -> NearNullVisibility(x))", "badWeatherTakesVisibilityToNearZero(x))", "all x.((BadWeather(x) & NearZeroVisibility(x)) -> TakesTo(x,y))", "all x y.((BadWeather(x) & Visibility(y)) -> NearZero(x,y))", "all x.(BadWeather(x) -> TakesVisibilityToNearZero(x))", "(NearZeroVisibility(BadWeather)", "BadWeatherTakesVisibilityToNearZero(x)", "all x.((BadWeather(x) & NearNullVisibility(x)) -> TakesTo(x,y))", "all x.(BadWeather(x) -> NearZeroVisibility(x))", "all x y.((BadWeather(x) & Visibility(y)) -> TakesToNearZero(x,y))", "All x.((BadWeather(x) & NearZeroVisibility(x)) -> TakesTo(x,y))", "all x y.((BadWeather(x) & Visibility(y)) -> NearNull(x,y))", "all x.(BadWeather(x) -> TakesVisibilityToNearZero(x))", "all x.(BadWeather(x) -> VisibilityNearZero(x))"]}
{"id": "eqasc_validation_226", "nl": "Secondary accidents are a major problem under driving conditions of reduced visibility.", "fol": "", "prediction": ["all x.((SecondaryAccident(x) & DrivingConditionsReducedVisibility(x)) -> MajorProblem(x))", "all x y.((SecondaryAccident(x) & DrivingCondition(y) & ReducedVisibility(y)) -> MajorProblem(x,y))", "all x.((SecondaryAccident(x) & ReducedVisibility(x)) -> MajorProblem(x))", "(MajorProblem(secondaryAccidents) & DrivingConditionsReducedVisibility(secondaryAccidents))", "all x.((SecondaryAccident(x) & ReducedVisibility(x)) -> MajorProblem(x))", "all x y.((SecondaryAccident(x) & DrivingCondition(y) & ReducedVisibility(x,y)) -> MajorProblem(x))", "all x y z.((SecondaryAccident(x) & DrivingCondition(y) & ReducedVisibility(z)) -> MajorProblem(x,y,z))", "all x.((SecondaryAccident(x) & DrivingConditions(x) & ReducedVisibility(x)) -> MajorProblem(x))", "all x.(SecondaryAccident(x) -> MajorProblem(x))", "all x y.((SecondaryAccident(x) & DrivingConditions(y) & ReducedVisibility(x,y)) -> MajorProblem(x))", "all x.(SecondaryAccident(x) -> (MajorProblem(x) & DrivingConditionsReducedVisibility(x)))", "exists x.(SecondaryAccident(x) & DrivingConditions(x,ReducedVisibility))", "all x y.((SecondaryAccident(x) & DrivingConditions(y) & ReducedVisibility(x,y)) -> MajorProblem(x))", "all x.((SecondaryAccident(x) & ReducedVisibility(x)) -> MajorProblem(x))", "all x y.((SecondaryAccident(x) & DrivingCondition(y) & ReducedVisibility(y)) -> MajorProblem(x,y))", "all x.((SecondaryAccident(x) & ReducedVisibility(x)) -> MajorProblem(x))"]}
{"id": "eqasc_validation_227", "nl": "Bad weather increases the risk of car accidents.", "fol": "", "prediction": ["all x.(BadWeather(x) -> IncreasesRiskOfCarAccidents(x))", "all x y.((BadWeather(x) & CarAccident(y)) -> IncreasesRisk(x,y))", "all x.((BadWeather(x) & CarAccident(y)) -> IncreasesRisk(x,y))", "all x.(BadWeather(x) -> IncreasesRiskOfCarAccidents(x))", "(IncreasesRiskOfCarAccidents(badWeather))", "all x y z.((BadWeather(x) & CarAccident(y) & Car(z)) -> IncreasesRisk(x,y,z))", "all x y.((BadWeather(x) & CarAccident(y)) -> IncreasesRisk(x,y))", "all x.((BadWeather(x) & CarAccident(x)) -> IncreasesRisk(x))", "all x.(BadWeather(x) -> IncreasesRiskOfCarAccidents(x))", "all x y.((BadWeather(x) & CarAccident(y)) -> IncreasesRisk(x,y))", "all x.((BadWeather(x) & IncreasesRiskOfCarAccidents(x)) -> BadWeather(x))", "all x.((BadWeather(x) & CarAccident(y)) -> IncreasesRisk(x,y))", "all x.(BadWeather(x) -> IncreasesCarAccidentRisk(x))", "all x y.((BadWeather(x) & CarAccident(y)) -> IncreasesRisk(x,y))", "all x.(BadWeather(x) -> IncreasesRiskOfCarAccidents(x))", "all x y.((BadWeather(x) & CarAccident(y)) -> IncreasedRisk(x,y))"]}
{"id": "eqasc_validation_228", "nl": "Collisions are more likely when visibility is poor.", "fol": "", "prediction": ["all x.((Collisions(x) & PoorVisibility(x)) -> MoreLikely(x))", "all x y.((Collisions(x) & PoorVisibility(y)) -> MoreLikely(x,y))", "all x.((Collisions(x) & PoorVisibility(x)) -> MoreLikely(x))", "all x.((Collision(x) & PoorVisibility(x)) -> MoreLikely(x))", "all x y.((Collisions(x) & PoorVisibility(y)) -> MoreLikely(x,y))", "all x.((Collisions(x) & PoorVisibility(x)) -> MoreLikely(x))", "all x.((VisibilityPoor(x) & Collisions(x)) -> MoreLikely(x))", "all x.((Collision(x) & PoorVisibility(x)) -> MoreLikely(x))", "all x y.((Collisions(x) & PoorVisibility(y)) -> MoreLikely(x,y))", "all x y.((Collision(x) & PoorVisibility(y)) -> MoreLikely(x,y))", "all x.((Collisions(x) & PoorVisibility(x)) -> MoreLikely(x))", "exists x.(Collisions(x) & PoorVisibility(x))", "all x y.((Collisions(x) & PoorVisibility(y)) -> MoreLikely(x,y))", "all x.((Collisions(x) & PoorVisibility(x)) -> MoreLikely(x))", "exists x.(Collisions(x) & VisibilityPoor(x))", "all x y.((Collisions(x) & PoorVisibility(y)) -> MoreLikely(x,y))"]}
{"id": "eqasc_validation_229", "nl": "Bad weather makes collisions more likely while driving.", "fol": "", "prediction": ["all x.((BadWeather(x) & Driving(y)) -> MoreLikelyCollisions(x,y))", "all x.(BadWeather(x) -> MoreLikelyCollisions(x))", "all x y.((BadWeather(x) & Driving(y)) -> MoreLikelyCollisions(x,y))", "all x.((BadWeather(x) & Collision(x)) -> MoreLikely(x))", "all x y.((BadWeather(x) & Driving(y)) -> MakesCollisionsMoreLikely(x,y))", "(MoreLikelyCollisionsWithDriving(BadWeather))", "all x y z.((BadWeather(x) & Collision(y) & Driving(z)) -> MoreLikely(x,y,z))", "all x.(BadWeather(x) -> MoreLikelyCollisions(x))", "all x y.((BadWeather(x) & Collision(y)) -> MoreLikely(x,y))", "all x.(BadWeather(x) -> MakesCollisionsMoreLikely(x))", "all x.((BadWeather(x) & Driving(x)) -> MoreLikelyCollisions(x))", "all x.((BadWeather(x) & Collisions(x)) -> MoreLikely(x))", "all x y.((BadWeather(x) & Driving(y)) -> MoreLikelyCollisions(x,y))", "all x y.((BadWeather(x) & Driver(y)) -> MakesCollisionsMoreLikely(x,y))", "exists x.(BadWeather(x) & MakesCollisionsMoreLikely(x))", "all x.(BadWeather(x) -> MoreLikelyCollisions(x))"]}
{"id": "eqasc_validation_230", "nl": "For example, lack of visibility is a major cause of many accidents.", "fol": "", "prediction": ["all x.((LackOfVisibility(x) & ManyAccidents(x)) -> MajorCause(x))", "all x y.((LackOfVisibility(x) & Accident(y)) -> MajorCause(x,y))", "(MajorCauseOfManyAccidents(lackOfVisibility)", "exists x.(LackOfVisibility(x) & MajorCauseOfManyAccidents(x))", "all x.((LackOfVisibility(x) & MajorCauseOfManyAccidents(x)) -> MajorCauseOf(x,y))", "all x.((LackOfVisibility(x) & ManyAccidents(x)) -> MajorCause(x))", "all x y z.((LackOfVisibility(x) & Accident(y) & Accident(z)) -> MajorCause(x,y,z))", "all x y.((LackOfVisibility(x) & Accident(y)) -> MajorCause(x,y))", "(MajorCauseOfManyAccidents(LackOfVisibility)", "exists x.(LackOfVisibility(x) & MajorCauseOfManyAccidents(x))", "(ManyAccidents(lackOfVisibility) -> MajorCauseOf(lackOfVisibility))", "(MajorCauseOfAccidents(lackOfVisibility))", "all x y.((LackOfVisibility(x) & Accident(y)) -> MajorCause(x,y))", "exists x.(LackOfVisibility(x) & MajorCauseOfManyAccidents(x))", "exists x.(LackOfVisibility(x) & CauseOfManyAccidents(x))", "all x y.((LackOfVisibility(x) & Accident(y)) -> MajorCauseOf(x,y))"]}
{"id": "eqasc_validation_231", "nl": "bad weather causes car accidents", "fol": "", "prediction": ["all x.(BadWeather(x) -> CausesCarAccidents(x))", "all x y.((BadWeather(x) & CarAccident(y)) -> Causes(x,y))", "all x.((BadWeather(x) & CarAccident(x)) -> BadWeatherCauses(x,caraccidents))", "badWeatherCausesCarAccidents(badWeather(badWeather) -> CarAccidents(badWeather))", "all x y z.((BadWeather(x) & CarAccident(y) & BadWeather(z)) -> Causes(x,y,z))", "all x y.((BadWeather(x) & CarAccident(y)) -> Causes(x,y))", "badWeatherCausesCarAccidents(BadWeather(BadWeather) -> CarAccidents(BadWeather))", "(CausesCarAccidents(badWeather) -> BadWeather(badWeather))", "all x.((BadWeather(x) & CarAccident(x)) -> Causes(x,caraccidents,car accidents))", "badWeatherCausesCarAccidents(badWeather(badWeather) -> CarAccidents(badWeather))", "all x.(BadWeather(x) -> CausesCarAccidents(x))", "badWeatherCausesCarAccidents(b))", "all x y.((BadWeather(x) & CarAccident(y)) -> Causes(x,y))", "all x.(BadWeather(x) -> CausesCarAccidents(x))", "badWeatherCausesCarAccidents(badWeather)", "all x y.((BadWeather(x) & CarAccident(y)) -> Causes(x,y))"]}
{"id": "eqasc_validation_232", "nl": "bad weather impairs safe driving", "fol": "", "prediction": ["all x.((BadWeather(x) & ImpairsSafeDriving(x)) -> ImpairsSafeDriving(x))", "all x.(BadWeatherImpairsSafeDriving(x) -> ImpairsSafeDriving(x))", "all x y.((BadWeather(x) & BadWeather(y)) -> ImpairsSafeDriving(x,y))", "badWeatherImpairsSafeDriving(x) -> BadWeatherImpairsSafeDriving(x))", "badWeatherImprovesSafeDriving(x) -> BadWeatherImpairsSafeDriving(x))", "all x y z.((BadWeather(x) & BadWeather(y) & SafeDriving(z)) -> Impairs(x,y,z))", "all x.((BadWeather(x) & ImproperWeather(x)) -> ImpairsSafeDriving(x))", "all x.(BadWeatherImpairsSafeDriving(x) -> ImposesBadWeather(x))", "badWeatherImprovesSafeDriving(x) & BadWeatherImpairsSafeDriving(x))", "all x y.((BadWeather(x) & BadWeather(y)) -> ImpairsSafeDriving(x,y))", "badWeatherImpairsSafeDriving(b))", "all x.((BadWeather(x) & ImpairsSafeDriving(x)) -> ImpairsSafeDriving(x))", "all x.(BadWeather(x) -> ImpairsSafeDriving(x))", "all x y.((BadWeather(x) & BadWeather(y)) -> ImpairsSafeDriving(x,y))", "badWeatherImpairsSafeDriving(b))", "badWeatherImprovesSafeDriving(x)"]}
{"id": "eqasc_validation_233", "nl": "RNA is a small molecule that can squeeze through pores in the nuclear membrane.", "fol": "", "prediction": ["all x.(RNA(x) -> (SmallMolecule(x) & CanSqueezeThroughPossies(x) & InNuclearMembrane(x)))", "all x.(RNA(x) -> (SmallMolecule(x) & CanSqueezeThroughPpores(x) & InNuclearMembrane(x)))", "all x.(Radna(x) -> (SmallMolecule(x) & CanSqueezeThroughPossibles(x)))", "(SmallMolecule(RNA) & CanSqueezeThroughPoors(RNA,NuclearMembrane))", "all x y.((RNA(x) & SmallMolecule(y)) -> (SqueezesThroughPossibles(x,y) & NuclearMembrane(x,y)))", "all x y z.((RNA(x) & SmallMolecule(y) & NuclearMembrane(z)) -> (SqueezesThroughPpores(y,z) & InMembrane(y,z)))", "all x.(RNA(x) -> (SmallMolecule(x) & SqueezesThroughPoors(x) & NuclearMembrane(x)))", "all x.(RadNaNovel(x) -> (SmallMolecule(x) & CanSqueezeThroughPossibles(x) & InNuclearMembrane(x)))", "all x.(Radius(x) -> (SmallMolecule(x) & CanSqueezeThroughPpores(x) & InNuclearMembrane(x)))", "all x y.((RNA(x) & SmallMolecule(y)) -> (SqueezesThroughPpores(x,y) & NuclearMembrane(x,y)))", "(SmallMolecule(RNA) & SqueezesThroughPpores(RNA))", "all x.(RNA(x) -> (SmallMolecule(x) & CanSqueezeThroughPropores(x) & NuclearMembrane(x)))", "all x.(RNA(x) -> (SmallMolecule(x) & CanSqueezeThroughPpores(x) & InNuclearMembrane(x)))", "all x y.((RNA(x) & SmallMolecule(y)) -> CanSqueezeThroughPoorsInNuclearMembrane(x,y))", "all x y.((RNA(x) & SmallMolecule(x) & NuclearMembrane(y)) -> CanSqueezeThroughPpores(x,y))", "all x.(RNA(x) -> (SmallMolecule(x) & SqueezesPosesInNuclearMembrane(x)))"]}
{"id": "eqasc_validation_234", "nl": "Like proteins, DNA and RNA are polymers of various small chemically related molecules.", "fol": "", "prediction": ["all x.((DNA(x) | RNA(x)) -> Polymer(x))", "(all x.(Protein(x) -> Polymer(x)) & exists y.(SmallChemicalRelatedMolecule(y) & Polymer(x,y))))", "all x y.((Protein(x) & DNA(y) & RNA(y)) -> Polymer(x,y))", "(LikeProteins(DNA) & LikeRNA(RNA)) -> PolymerOfSmallChemicallyRelatedMolecules(DNA,RNA))", "(all x y.((Protein(x) & Protein(y)) -> Polymer(x,y)) & ((DNA(x) | RNA(x)) -> Polymer(x,y)))", "(all x.(Protein(x) -> Polymer(x)) & all y.(DNA(y) & RNA(y)) -> SmallChemicallyRelatedMolecule(x)))", "all x.((DNA(x) | RNA(x)) -> PolymerOfSmallChemicalRelatedMolecules(x))", "(SameProteins(DNA) | SAMRNA(RNA)) & PolymersOfSmallChemicallyRelatedMolecules(DNA,RNA))", "all x y z.((Protein(x) & DNA(y) & RNA(z)) -> (Polymer(x,y,z) & SmallChemicallyRelatedMolecule(x)))", "(all x.(Protein(x) -> Polymer(x)) & (DNA(x) | RNA(x)) -> SmallChemicallyRelatedMolecule(x)))", "(LikeProteins,DNAAndRNAPolymers(x) | SmallChemicallyRelatedMolecules(x)))", "all x y.((Protein(x) & DNA(y) & RNA(y)) -> (Polymer(x,y) & SmallChemicallyRelatedMolecule(x)))", "all x.((DNA(x) | RNA(x)) -> (Polymer(x) & SmallChemicallyRelatedMolecule(x)))", "all x y.((Protein(x) & DNA(y) & RNA(y)) -> Polymer(x,y))", "all x.((DNA(x) | RNA(x)) -> Polymer(x))", "(all x.(Protein(x) -> Polymer(x,y)))"]}
{"id": "eqasc_validation_235", "nl": "polymers of various small chemically related molecules can squeeze through pores in the nuclear membrane", "fol": "", "prediction": ["all x y.((Polymer(x) & SmallChemicallyRelatedMolecule(y) & SmallChemicallyRelatedMolecule(x)) -> SqueezesThroughPorousPenetrationsInNuclearMembrane(x,y))", "all x.((Polymer(x) & SmallChemicallyRelatedMolecules(x) & SqueezesThroughPossies(x)) -> NuclearMembraneMembraneMembraneMembraneMembraneMembraneMembraneMembraneMembraneMembraneMembraneMembraneMembraneMembraneMembraneMembraneMembraneMembraneMembraneMembraneMembraneMembraneMembrane", "all x y z.((Polymer(x) & SmallChemicallyRelatedMolecule(y) & NuclearMembrane(z) & SmallChemicallyRelatedMolecule(x,y)) -> CanSqueezeThroughPoses(x,z))", "(SqueezesThroughPossiblesInNuclearMembrane(polymers) & SmallChemicallyRelatedMolecules(polymers) & SmallChemicallyRelatedMolecules(polymers))", "all x y.((Polymer(x) & SmallChemicallyRelatedMolecule(y)) -> (SqueezesThroughPorousPoors(x,y) & InNuclearMembrane(x,y)))", "all x y z.((Polymer(x) & SmallChemicallyRelatedMolecule(y) & NuclearMembrane(z)) -> (SqueezesThroughPorouses(x,y,z) & InNuclearMembrane(x,z)))", "all x.((Polymer(x) & SmallChemicallyRelatedMolecule(x)) -> CanSqueezeThroughPorousesInNuclearMembrane(x))", "all x y z.((Polymer(x) & SmallChemicallyRelatedMolecule(y) & SmallChemicallyRelatedMolecule(z)) -> (SqueezesThroughPossies(x,y,z) & InNuclearMembrane(x)))", "all x y.((Polymer(x) & SmallChemicallyRelatedMolecule(y) & SmallChemicallyRelatedMolecule(x)) -> CanSqueezeThroughPossiesInNuclearMembrane(x,y))", "all x.((Polymer(x) & SmallChemicallyRelatedMolecules(x)) -> SqueezesThroughPorousPenetrating(x,nuclearMembrane))", "all x.((Polymer(x) & SmallChemicallyRelatedMolecule(x) & SqueezesThroughPorousPoors(x)) -> SqueezesThroughNuclearMembrane(x))", "all x.((Polymer(x) & SmallChemicallyRelatedMolecules(x) & SqueezesThroughPossiblesInNuclearMembrane(x)) -> SqueezesThroughPossiblesInNuclearMembrane(x))", "all x y.((Polymer(x) & SmallChemicallyRelatedMolecule(y)) -> (SqueezesThroughPpores(x,y) & InNuclearMembrane(x,y)))", "all x y z.((Polymer(x) & SmallChemicallyRelatedMolecule(y) & NuclearMembrane(z) & SmallChemicallyRelatedMolecule(y)) -> CanSqueezeThroughPossies(x,y,z))", "all x y.((Polymer(x) & SmallChemicallyRelatedMolecule(x) & SmallMolecularMolecule(y)) -> SqueezesThroughPorousPorous(x,y))", "all x.((Polymer(x) & SmallChemicallyRelatedMolecule(x) & SmallChemicallyRelatedMolecule(x)) -> CanSqueezeThroughPorousPorous(x))"]}
{"id": "eqasc_validation_236", "nl": "Cells with a nuclear membrane are called eukaryotic .", "fol": "", "prediction": ["all x.((Cell(x) & NuclearMembrane(x)) -> Eukaryotic(x))", "all x y.((Cell(x) & NuclearMembrane(y) & Has(x,y)) -> Eukaryotic(x))", "all x.((Cell(x) & NuclearMembrane(x)) -> Eukaryotic(x))", "all x.((Cell(x) & HasNuclearMembrane(x)) -> Eukaryotic(x))", "(all x.((Cell(x) & NuclearMembrane(x)) -> Eukaryotic(x))", "all x.((Cell(x) & NuclearMembrane(x)) -> Eukaryotic(x))", "all x y.((Cell(x) & NuclearMembrane(y) & Has(x,y)) -> Eukaryotic(x))", "all x.((Cell(x) & NuclearMembrane(x)) -> Eukaryotic(x))", "all x.((Cell(x) & HasNuclearMembrane(x)) -> Eukaryotic(x))", "all x y.((Cell(x) & NuclearMembrane(y) & Has(x,y)) -> Eukaryotic(x))", "all x y.((Cell(x) & NuclearMembrane(x) & Has(x,y)) -> Eukaryotic(x))", "all x.((Cell(x) & NuclearMembrane(x)) -> Eukaryotic(x))", "all x.((Cell(x) & HasNuclearMembrane(x)) -> Eukaryotic(x))", "all x.((Cell(x) & NuclearMembrane(x)) -> Eukaryotic(x))", "all x.((Cell(x) & HasNuclearMembrane(x)) -> Eukaryotic(x))", "all x.((Cell(x) & NuclearMembrane(x)) -> Eukaryotic(x))"]}
{"id": "eqasc_validation_237", "nl": "RNA is a small molecule that can squeeze through pores in eukaryotic cells ", "fol": "", "prediction": ["all x.(RNA(x) -> (SmallMolecule(x) & CanSqueezeThroughPpores(x) & InEukaryoticCells(x)))", "all x y z.((RNA(x) & SmallMolecule(x) & EukaryoticCell(y) & Pores(z)) -> CanSqueezeThrough(x,y,z))", "all x y.((RNA(x) & EukaryoticCell(y)) -> (SmallMolecule(x) & CanSqueezeThroughPpores(x,y)))", "all x y.((RNA(x) & SmallMolecule(x) & EukaryoticCell(y)) -> CanSqueezeThroughPpores(x,y))", "all x.(Radn(x) -> (SmallMolecule(x) & CanSqueezeThroughPpores(x) & InEukaryoticCells(x)))", "(SmallMolecule(RNA) & SqueezesThroughPpores(RNA) & InEukaryoticCells(RNA))", "all x.(RNA(x) -> (SmallMolecule(x) & SqueezesThroughPpores(x) & InEukaryoticCells(x)))", "all x.(Radna(x) -> (SmallMolecule(x) & CanSqueezeThroughPpores(x) & InEukaryoticCells(x)))", "all x y.((RNAMolecule(x) & EukaryoticCell(y)) -> (SqueezesThroughPpores(x,y) & InEukaryoticCells(x,y)))", "RNA is smallmolecule that squeezes through pores in eukaryotic cells.", "all x y z.((RNA(x) & SmallMolecule(y) & EukaryoticCell(z)) -> (SqueezesThroughPpores(x,y,z) & InEukaryoticCell(x,z)))", "(SmallMolecule(RNA) & CanSqueezeThroughPpores(RNA,EukaryoticCells))", "all x.(RNA(x) -> (SmallMolecule(x) & CanSqueezeThroughPpores(x) & InEukaryoticCells(x)))", "all x.(RNA(x) -> (SmallMolecule(x) & SqueezesThroughPores(x) & InEukaryoticCells(x)))", "all x y.((RNA(x) & SmallMolecule(x) & EukaryoticCell(y)) -> SqueezesThroughPpores(x,y))", "all x.(RNA(x) -> (SmallMolecule(x) & CanSqueezeThroughPoors(x) & InEukaryoticCells(x)))"]}
{"id": "eqasc_validation_238", "nl": "RNA is ribonucleic acid Like DNA, it is a nucleic acid.", "fol": "", "prediction": ["all x.(RibonucleicAcid(x) -> (DNA(x) & NucleicAcid(x)))", "all x.(RNA(x) -> (RibonucleicAcid(x) & LikeDNA(x) & NucleicAcid(x)))", "all x y.((RNA(x) & DNA(y)) -> RibonucleicAcid(x))", "(RibonucleicAcid(RNA) & NucleicAcid(RNA))", "(RribonucleicAcid(RNA) & NucleicAcid(RNA))", "all x.(RNA(x) -> (RribonucleicAcid(x) & LikeDNA(x) & NucleicAcid(x)))", "(RibonucleicAcid(RNA) & LikeDNA(RNA) & NucleicAcid(RNA))", "all x.(RibonucleicAcid(x) -> (DNA(x) | NucleicAcid(x)))", "all x y.((RNA(x) & DNA(y)) -> (RibonucleicAcid(x) & NucleicAcid(x)))", "(RribonucleicAcid(RNA) & LikeDNA(RNA) & NucleicAcid(RNA))", "all x.(RribonucleicAcid(x) -> (DNA(x) | NucleicAcid(x)))", "(all x.(RNA(x) -> RibonucleicAcid(x)))", "all x.(RNA(x) -> (RibonucleicAcid(x) & LikeDNA(x) & NucleicAcid(x)))", "(all x.(RNA(x) -> RibonucleicAcid(x)))", "all x y.((RNA(x) & DNA(y)) -> RibonucleicAcid(x,y))", "All x.(RNA(x) -> (RribonucleicAcid(x) & LikeDNA(x) & NucleicAcid(x)))"]}
{"id": "eqasc_validation_239", "nl": "Ribonucleic acid is a small molecule that can squeeze through pores in the nuclear membrane.", "fol": "", "prediction": ["all x.(RibonucleicAcid(x) -> (SmallMolecule(x) & CanSqueezeThroughPossies(x) & InNuclearMembrane(x)))", "(SmallMolecule(ribonucleicAcid) & CanSqueezeThroughPoors(ribonucleicAcid))", "all x.(RibonucleicAcid(x) -> (SmallMolecule(x) & CanSqueezeThroughPpores(x) & NuclearMembrane(x)))", "all x y z.((RibonucleicAcid(x) & SmallMolecule(y) & NuclearMembrane(z)) -> (SqueezesThroughPpores(y,z) & InMembrane(y,z)))", "all x y.((RibonucleicAcid(x) & SmallMolecule(y)) -> (SqueezesThroughPossibles(x,y) & NuclearMembrane(x,y)))", "(SmallMolecule(ribonucleicAcid) & SqueezesThroughPpores(ribonucleicAcid))", "all x.((SmallMolecule(x) & CanSqueezeThroughPossies(x)) -> RibonucleicAcid(x))", "(SmallMolecule(ribonucleicAcid) & CanSqueezeThroughPoors(ribonucleicAcid))", "all x.(RibonucleicAcid(x) -> (SmallMolecule(x) & SqueezesThroughPoors(x) & NuclearMembrane(x)))", "all x.((SmallMolecule(x) & SqueezesThroughPpores(x,NuclearMembrane)) -> RibonucleicAcid(x))", "all x y.((RibonucleicAcid(x) & SmallMolecule(y)) -> (SqueezesThroughPpores(x,y) & NuclearMembrane(x,y)))", "all x.(RibonucleicAcid(x) -> (SmallMolecule(x) & CanSqueezeThroughPoors(x) & NuclearMembrane(x)))", "all x.(RibonucleicAcid(x) -> (SmallMolecule(x) & CanSqueezeThroughPropores(x) & InNuclearMembrane(x)))", "all x.(RibonucleicAcid(x) -> (SmallMolecule(x) & SqueezesPosesInNuclearMembrane(x)))", "all x y.((RibonucleicAcid(x) & SmallMolecule(y)) -> (SqueezesThroughPoors(x,y) & NuclearMembrane(y)))", "all x.(RibonucleicAcid(x) -> (SmallMolecular(x) & CanSqueezeThroughPose(x) & InNuclearMembrane(x)))"]}
{"id": "eqasc_validation_240", "nl": "For example, the nuclear membrane keeps the DNA inside of the nucleus.", "fol": "", "prediction": ["all x y.((NuclearMembrane(x) & Nucleus(y)) -> KeepsDNAInside(x,y))", "all x y z.((NuclearMembrane(x) & DNA(y) & Nucleus(z)) -> KeepsInside(x,y,z))", "all x.(NuclearMembrane(x) -> KeepsDNAInsideNucleus(x))", "all x.((NuclearMembrane(x) & KeepsDNAInsideNucleus(x)) -> KeepsDNAInsideNucleus(x))", "(KeepsDNAInsideNucleus(nucleus) -> NuclearMembrane(nucleus))", "(NatalMembraneKeepsDNAInsideNucleus(nucleus) & For example, NuclearMembrane(nucleus))", "all x y.((NuclearMembrane(x) & Nucleus(y)) -> KeepsDNAInside(x,y))", "(KeepsDNAInside(nucleus) -> NuclearMembrane(nucleus))", "all x y z.((NuclearMembrane(x) & DNA(y) & Nucleus(z)) -> KeepsInside(x,y,z))", "all x.(NuclearMembrane(x) -> KeepsDNAInsideNucleus(x))", "all x.((NuclearMembrane(x) & KeepsDNAInsideNucleus(x)) -> KeepsDNAInsideNucleus(x))", "all x y.((NuclearMembrane(x) & Nucleus(y)) -> KeepsDNAInside(x,y))", "all x y.((NuclearMembrane(x) & NuclearMembrane(y)) -> KeepsDNAInside(x,y))", "exists x.(NuclearMembrane(x) & KeepsDNAInside(x))", "all x y z.((NuclearMembrane(x) & DNA(y) & Nucleus(z)) -> KeepsInside(x,y,z))", "exists x.(NucleusMembrane(x) & KeepsDNAInside(x))"]}
{"id": "eqasc_validation_241", "nl": "RNA is a small molecule that can squeeze through pores of the nucleus that holds DNA", "fol": "", "prediction": ["all x.(RNA(x) -> (SmallMolecule(x) & CanSqueezeThroughPossures(x) & HoldsDNA(x)))", "all x y z.((RNA(x) & SmallMolecule(x) & Nucleus(y) & Nucleus(z)) -> (SqueezesThroughPossures(x,y,z) & HoldsDNA(x)))", "all x.(RNA(x) -> (SmallMolecule(x) & CanSqueezeThroughPoors(x) & HoldsDNA(x)))", "RNA is smallmolecule that squeezes throughpores of nucleus that holdsDNA(RNA) & HoldsDNA(RNA))", "(SmallMolecule(RNA) & CanSqueezeThroughPossures(RNA) & HoldsDNA(RNA))", "all x.(Radna(x) -> (SmallMolecule(x) & CanSqueezeThroughPossures(x) & HoldsDNA(x)))", "all x y.((RNA(x) & SmallMolecule(x) & Nucleus(y) & SqueezesThroughPoseways(x,y)) -> HoldsDNA(x))", "all x y.((RNA(x) & SmallMolecule(y)) -> (SqueezesThroughPossures(x,y) & HoldsDNA(x)))", "all x y z.((RNA(x) & SmallMolecule(y) & Nucleus(z)) -> (SqueezesThroughPoors(y,z) & HoldsDNA(z)))", "all x.(RNA(x) -> (SmallMolecule(x) & SqueezesThroughPossures(x) & HoldsDNA(x)))", "(SmallMolecule(RNA) & SqueezesThroughPoors(RNA,Nucleus) & HoldsDNA(RNA,DNA))", "all x.(RNA(x) -> (SmallMolecule(x) & CanSqueezeThroughPoors(x) & NucleusHoldsDNA(x)))", "all x.(RadNum(x) -> (SmallMolecule(x) & SqueezesThroughPoors(x) & HoldsDNA(x)))", "all x.(RNA(x) -> (SmallMolecular(x) & CanSqueezeThroughPossures(x) & HoldsDNA(x)))", "all x y.((RNA(x) & SmallMolecule(y)) -> (SqueezesThroughPoors(x,y) & HoldsDNA(x,y)))", "all x.(RNA(x) -> (SmallMolecule(x) & CanSqueezeThroughPoors(x) & HoldsDNA(x)))"]}
{"id": "eqasc_validation_242", "nl": "Nuclear membranes are thickened, rounded and slightly irregular.", "fol": "", "prediction": ["all x.(NuclearMembrane(x) -> (Thickened(x) & Rounded(x) & -Irregular(x)))", "(ThickenedMembrane(nuclearMembrane) & RoundedMembrane(nuclearMembrane) & -IrregularMembrane(nuclearMembrane))", "all x.(NuclearMembrane(x) -> (Thickened(x) & Rounded(x) & EtwasIrregular(x)))", "all x y.((NuclearMembrane(x) & Thickened(x) & Rounded(x) & -Irregular(y)) -> Thickened(x))", "all x.(NuclearMembrane(x) -> (Thickened(x) & Rounded(x) & -Irregular(x)))", "(ThickenedMembrane(nuclearMembrane) & RoundedMembrane(nuclearMembrane) & -IrregularMembrane(nuclearMembrane))", "all x y.((NuclearMembrane(x) & Thickened(x) & Rounded(x) & MildlyIrregular(y)) -> Thickened(x))", "all x.(NuclearMembrane(x) -> (Thickened(x) & Rounded(x) & EtwasIrregular(x)))", "all x.(NuclearMembrane(x) -> (Thickened(x) & Rounded(x) & -Irregular(x)))", "all x y.((NuclearMembrane(x) & Thickened(x) & Round(y) & MildlyIrregular(x,y)) -> NuclearMembrane(x))", "all x.(NuclearMembrane(x) -> (Thickened(x) & Rounded(x) & MildlyIrregular(x)))", "all x.(NuclearMembrane(x) -> (Thickened(x) & Round(x) & -Irregular(x)))", "all x.(NuclearMembrane(x) -> (Thickened(x) & Rounded(x) & Irregular(x)))", "all x.(NaturalMembrane(x) -> (Thickened(x) & Rounded(x) & -Regular(x)))", "all x.(NuclearMembrane(x) -> (Thickened(x) & Round(x) & MildlyIrregular(x)))", "all x.(NuclearMembrane(x) -> (Thickened(x) & Rounded(x) & UnusuallyRegular(x)))"]}
{"id": "eqasc_validation_243", "nl": "RNA is a small molecule that can squeeze through thickened, rounded and slightly irregular pores", "fol": "", "prediction": ["all x.(RNA(x) -> (SmallMolecule(x) & SqueezesThroughThickenedRoundedAndIrregularPpores(x)))", "all x y z.((RNA(x) & SmallMolecule(y) & Pore(z)) -> (SqueezesThroughThickenedRoundedAndIrregularPpores(x,y,z) & SqueezesThroughThickenedRoundAndIrregularPpores(x)))", "(SmallMolecule(RNA) & SqueezesThroughThickenedRoundedAndIrregularPpores(RNA))", "all x.(RadNa(x) -> (SmallMolecule(x) & SqueezesThroughThickenedRoundedAndIrregularPpores(x)))", "all x.(RNA(x) -> (SmallMolecule(x) & CanSqueezeThroughThickenedRoundedAndIrregularPpores(x)))", "all x y.((RNA(x) & SmallMolecule(y)) -> (SqueezesThroughThickenedRoundedAndIrregularPpores(x,y) & ThroughThickenedPpores(x,y)))", "all x y z.((RNA(x) & SmallMolecule(x) & ThickenedPoetry(y) & RoundedPoetry(z) & -RoundedPoetry(z)) -> CanSqueezeThrough(x,y,z))", "(SmallMolecule(RNA) -> (SqueezesThroughThickenedRoundedAndIrregularPpores(RNA)))", "all x y.((RNA(x) & SmallMolecule(y)) -> (SqueezesThroughThickenedRoundedAndIrregularPpores(x,y) & SqueezesThroughThickenedRoundAndIrregularPpores(x,y)))", "(SmallMolecule(RNA) & CanSqueezeThroughThickenedRoundedAndIrregularPpores(RNA))", "all x.(RNA(x) -> (SmallMolecule(x) & SqueezesThroughThickenedRoundedAndIrregularPoors(x)))", "all x.(Radna(x) -> (SmallMolecule(x) & CanSqueezeThroughThickenedRoundedAndIrregularPpores(x)))", "all x.(RNA(x) -> (SmallMolecule(x) & SqueezesThroughThickenedRoundedAndIrregularPpores(x)))", "all x y.((RNA(x) & SmallMolecule(y)) -> (SqueezesThroughThickenedRoundedAndIrregularPoors(x,y) & SqueezesThroughThickenedRoundAndIrregularPoors(x,y)))", "all x.(RNA(x) -> (SmallMolecule(x) & CanSqueezeThroughThickenedRoundedAndUnderlyingPpores(x)))", "all x.(RNA(x) -> (SmallMolecule(x) & SqueezesThroughThickenedRoundAndIrregularPpores(x)))"]}
{"id": "eqasc_validation_244", "nl": "RNA is a small molecule that can squeeze through the pores of a eukaryotic cell", "fol": "", "prediction": ["all x.(RNA(x) -> (SmallMolecule(x) & CanSqueezeThroughPpores(x) & EukaryoticCell(x)))", "all x y.((RNA(x) & EukaryoticCell(y)) -> (SmallMolecule(x) & CanSqueezeThroughPpores(x,y)))", "all x y z.((RNA(x) & SmallMolecule(x) & EukaryoticCell(y) & Pores(z)) -> CanSqueezeThrough(x,y,z))", "(SmallMolecule(RNA) & CanSqueezeThroughPpores(RNA) & EukaryoticCell(EukaryoticCell(EukaryoticCell(EukaryoticCell(EukaryoticCell))", "all x.(Radna(x) -> (SmallMolecule(x) & CanSqueezeThroughPpores(x) & EukaryoticCell(x)))", "all x y.((RNA(x) & SmallMolecule(x) & EukaryoticCell(y)) -> CanSqueezeThroughPpores(x,y))", "all x.(RNA(x) -> (SmallMolecule(x) & SqueezesThroughPpores(x) & EukaryoticCell(x)))", "all x y z.((RNA(x) & SmallMolecule(y) & EukaryoticCell(z) & SqueezesThroughPpores(x,y,z)) -> (SqueezesThroughPpores(y,z) & EukaryoticCell(z)))", "(SmallMolecule(RNA) & SqueezesThroughPpores(RNA) & EukaryoticCell(EukaryoticCell(EukaryoticCell(EukaryoticCell))", "all x y.((RNA(x) & EukaryoticCell(y)) -> (SmallMolecule(x) & SqueezesThroughPpores(x,y)))", "all x.(Radna(x) -> (SmallMolecule(x) & SqueezesThroughPpores(x) & EukaryoticCell(x)))", "all x y z.((RNA(x) & SmallMolecule(x) & EukaryoticCell(y) & Pore(z)) -> CanSqueezeThrough(x,y,z))", "all x.(RNA(x) -> (SmallMolecule(x) & CanSqueezeThroughPpores(x) & EukaryoticCell(x)))", "all x y.((RNA(x) & SmallMolecule(x) & EukaryoticCell(y)) -> SqueezesThroughPpores(x,y))", "all x.(RNA(x) -> (SmallMolecule(x) & SqueezesThroughPpores(x) & EukaryoticCell(x)))", "all x.(RNA(x) -> (SmallMolecule(x) & CanSqueezeThroughPores(x) & EukaryoticCell(x)))"]}
{"id": "eqasc_validation_245", "nl": "poisonous darts are used for defense by sea anemones", "fol": "", "prediction": ["all x y.((PoisonousDart(x) & SeaAnemone(y)) -> UsedForDefense(x,y))", "all x y z.((PoisonousDart(x) & SeaAnemone(y) & SeaAnemone(z)) -> UsedForDefense(x,y,z))", "all x.(PoisonousDart(x) -> UsedForDefenseBySeaAnemones(x))", "(all x.(PoisonousDart(x) -> UsedForDefense(x)) & SeaAnemone(x))", "all x y.((PoisonousDart(x) & SeaAnemone(y)) -> UsedForDefense(x,y))", "all x.(PoisonousDart(x) -> (UsedForDefenseBySeaAnemones(x) & SeaAnemones(x)))", "all x y z.((PoisonousDart(x) & SeaAnemone(y) & SeaAnemone(z)) -> UsedForDefense(x,y,z))", "all x y z.((PoisonousDart(x) & SeaAnemone(y) & SeaAnemone(z)) -> UsedForDefense(x,y,z))", "all x.(PoisonousDart(x) -> UsedForDefenseBySeaAnemones(x))", "all x y.((PoisonousDart(x) & SeaAnemone(y)) -> UsedForDefense(x,y))", "all x.(PoisonousDart(x) -> (UsedForDefense(x) & SeaAnemones(x)))", "all x y z.((PoisonousDart(x) & SeaAnemone(y) & SeaAnemone(z)) -> UsedForDefenseBy(x,y,z))", "all x y.((PoisonousDart(x) & SeaAnemone(y)) -> UsedForDefenseBy(x,y))", "all x.(PoisonousDart(x) -> UsedForDefense(x))", "all x y.((PoisonousDart(x) & SeaAnemone(y)) -> UsedForDefenseBy(x,y))", "all x.(PoisonousDart(x) -> UsedForDefenseBySeaAnemones(x))"]}
{"id": "eqasc_validation_246", "nl": "To protect themselves corals have evolved a variety of defenses.", "fol": "", "prediction": ["all x.(Coral(x) -> (EvolvedDefenses(x) & Protects(x)))", "all x y.((Coral(x) & Coral(y)) -> EvolutionOfDefenses(x,y))", "all x.(Coral(x) -> DevelopedDefenses(x))", "all x.(Coral(x) -> EvolutionOfDefenses(x))", "all x y.((Coral(x) & Coral(y)) -> HasEvolvedDefenses(x,y))", "all x y z.((Coral(x) & Defense(y) & Defense(z)) -> Evolutionary(x,y,z))", "all x y.((Coral(x) & Protects(x,y)) -> EvolutionOfDefenses(x,y))", "all x.(Coral(x) -> (EvolvedDefenses(x) & Protects(x)))", "(ProtectsCoralsWithDefenses(Coral))", "all x.(Corals(x) -> EvolutionOfDefenses(x))", "(ProtectCoral(Coral) & VarietyOfDefenses(Coral))", "all x.((Coral(x) & Protects(x)) -> EvolutionOfDefenses(x))", "all x y.((Coral(x) & Coral(y)) -> DevelopedDefenses(x,y))", "all x.(Coral(x) -> DevelopedDefenses(x))", "all x.(Coral(x) -> HasEvolvedDefenses(x))", "all x y.((Coral(x) & Defense(y)) -> Evolutionary(x,y))"]}
{"id": "eqasc_validation_247", "nl": "Poisonus darts are used by sea anemones for protection.", "fol": "", "prediction": ["all x y.((PoisonusDart(x) & SeaAnemone(y)) -> UsedForProtection(x,y))", "all x.(PoisonusDart(x) -> UsedBySeaAnemonesForProtection(x))", "all x y z.((PoisonusDart(x) & SeaAnemone(y) & SeaAnemone(z)) -> UsedForProtection(x,y,z))", "all x.((Dart(x) & Poisonus(x)) -> UsedBySeaAnemonesForProtection(x))", "all x y.((Dart(x) & SeaAnemone(y)) -> UsedForProtection(x,y))", "all x y.((PoisonusDart(x) & SeaAnemone(y)) -> UsedForProtection(x,y))", "all x.(PoisonusDart(x) -> UsedBySeaAnemonesForProtection(x))", "(UsedBySeaAnemonesForProtection(PoisonusDarts)", "all x y z.((PoisonusDart(x) & SeaAnemone(y) & SeaAnemone(z)) -> UsedForProtection(x,y,z))", "all x.(Dart(x) -> (Poisonus(x) & SeaAnemone(x) & UsedForProtection(x)))", "all x.(PoisonusDart(x) -> UsedBySeaAnemones(x))", "all x y.((Dart(x) & SeaAnemone(y)) -> UsedBy(x,y))", "all x.((Dart(x) & Poisonus(x)) -> UsedBySeaAnemones(x))", "all x y.((PoisonusDart(x) & SeaAnemone(y)) -> UsedForProtection(x,y))", "all x y z.((PoisonusDart(x) & SeaAnemone(y) & SeaAnemone(z)) -> UsedForProtection(x,y,z))", "all x.(PoisonusDart(x) -> UsedBySeaAnemonesForProtection(x))"]}
{"id": "eqasc_validation_248", "nl": "Poison dart frogs are the source of a toxin used by natives on their poison darts.", "fol": "", "prediction": ["all x y.((PoisonDartFrog(x) & Native(y)) -> SourceOfToxin(x,y))", "all x.(PoisonDartFrog(x) -> SourceOfToxin(x))", "all x y z.((PoisonDartFrog(x) & Native(y) & Toxin(z)) -> SourceOf(x,z))", "all x.(PoisonDartFrog(x) -> (SourceOfToxin(x) & NativesUseOnPoisonDarts(x)))", "all x.((PoisonDartFrog(x) & Native(x)) -> ToxinSource(x))", "all x y.((PoisonDartFrog(x) & Native(y)) -> SourceOfToxin(x,y))", "all x y z.((PoisonDartFrog(x) & Native(y) & Toxin(z)) -> SourceOf(x,y,z))", "(SourceOfToxin(poisonDartFrogs) & NativesOnPoisonDarts(poisonDarts))", "all x.((PoisonDartFrog(x) & NativeToxin(x)) -> SourceOfToxin(x))", "all x y.((PoisonDartFrog(x) & Native(y)) -> ToxinSource(x,y))", "all x.(PoisonDartFrog(x) -> (SourceOfToxin(x) & NativeOnPoisonDarts(x)))", "all x.(PoisonDartFrog(x) -> SourceOfToxin(x))", "all x y.((PoisonDartFrog(x) & Native(y) & UsesToxinOnPoisonDarts(x,y)) -> SourceOfToxin(x,y))", "all x.((PoisonDartFrog(x) & Native(y)) -> SourceOfToxin(x,y))", "all x y z.((PoisonDartFrog(x) & Native(y) & Toxin(z)) -> SourceOf(x,z))", "all x y.((PoisonDartFrog(x) & Native(y)) -> SourceOfToxin(x,y))"]}
{"id": "eqasc_validation_249", "nl": "a toxin is used for defense by sea anemones", "fol": "", "prediction": ["all x y.((Toxin(x) & SeaAnemone(y)) -> UsedForDefense(x,y))", "all x y z.((Toxin(x) & SeaAnemone(y) & SeaAnemone(z)) -> UsedForDefense(x,y,z))", "all x y z.((Toxin(x) & SeaAnemone(y) & SeaAnemone(z)) -> UsedForDefense(x,y,z))", "all x y.((Toxin(x) & SeaAnemone(y)) -> UsedForDefense(x,y))", "all x.(Toxin(x) -> UsedForDefense(x))", "all x.(Toxin(x) -> UsedForDefenseBySeaAnemones(x))", "all x.((Toxin(x) & SeaAnemone(x)) -> UsedForDefense(x))", "all x y.((Toxin(x) & SeaAnemone(y)) -> UsedForDefense(x,y))", "all x y z.((Toxin(x) & SeaAnemone(y) & SeaAnemone(z)) -> UsedForDefense(x,y,z))", "all x y z.((Toxin(x) & SeaAnemone(y) & SeaAnemone(z)) -> UsedForDefense(x,y,z))", "all x y.((Toxin(x) & SeaAnemone(y)) -> UsedForDefense(x,y))", "all x.(Toxin(x) -> UsedForDefense(x))", "exists x.(Toxin(x) & SeaAnemone(x) & UsedForDefense(x))", "all x y z.((Toxin(x) & SeaAnemone(y) & SeaAnemone(z)) -> UsedForDefenseBy(x,y,z))", "all x.(Toxin(x) -> UsedForDefenseBySeaAnemones(x))", "all x y.((Toxin(x) & SeaAnemone(y)) -> UsedForDefenseBy(x,y))"]}
{"id": "eqasc_validation_250", "nl": "Another reef inhabitant is the anemone.", "fol": "", "prediction": ["all x.(ReefInhabitant(x) -> Anemone(x))", "(ReefInhabitant(x) & Anemone(x))", "all x y.((ReefInhabitant(x) & Anemone(y)) -> Inhabits(x,y))", "(exists x.(ReefInhabitant(x) & Anemone(x)))", "all x.(ReefInhabitant(x) -> Anemone(x))", "(ReefInhabitant(x) & Anemone(x))", "all x.(RiffInhabitant(x) -> Anemone(x))", "(ReefInhabitant(reef) & Anemone(reef))", "exists x.(ReefInhabitant(x) & Anemone(x))", "(ReefInhabitant(x) & Anemone(x))", "all x.(ReefInhabitant(x) -> Anemone(x))", "all x.(RiffInhabitant(x) -> Anemone(x))", "exists x.(ReefInhabitant(x) & Anemone(x))", "exists x.(ReefInhabitant(x) & Anemone(x))", "exists x.(ReefInhabitant(x) & Anemone(x))", "exists x.(ReefInhabitant(x) & Anemone(x))"]}
{"id": "eqasc_validation_251", "nl": "sea creatures live in reefs", "fol": "", "prediction": ["all x y.((SeaCreature(x) & Reef(y)) -> LivesIn(x,y))", "all x.(SeaCreature(x) -> LivesInReef(x))", "all x y z.((SeaCreature(x) & Reef(y) & Reef(z)) -> LivesIn(x,y,z))", "all x y.((SeaCreature(x) & Reef(y)) -> LivesIn(x,y))", "all x.(SeaCreature(x) -> LivesInReefs(x))", "all x y z.((SeaCreature(x) & Reef(y) & Reef(z)) -> LivesIn(x,y,z))", "all x y.((SeaCreature(x) & Reef(y)) -> LivesIn(x,y))", "all x.(SeaCreature(x) -> LivesInReef(x))", "all x y z.((SeaCreature(x) & Reef(y) & Reef(z)) -> LivesIn(x,y,z))", "all x.(SeaCreature(x) -> LivesInReefs(x))", "all x y.((SeaCreature(x) & Reef(y)) -> LivesIn(x,y))", "exists x.(SeaCreature(x) & Reef(y) & LivesIn(x,y))", "all x y z.((SeaCreature(x) & Reef(y) & Reef(z)) -> LivesIn(x,y,z))", "all x.(SeaCreature(x) -> LivesInReefs(x))", "all x y.((SeaCreature(x) & Reef(y)) -> LivesIn(x,y))", "all x.(SeaCreature(x) -> LivesInReefs(x))"]}
{"id": "eqasc_validation_252", "nl": "Venomous creatures can often use their poison as a weapon.", "fol": "", "prediction": ["all x.(VenomousCreature(x) -> UsesPoisonAsWaffen(x))", "all x y.((VenomousCreature(x) & Poison(y)) -> UsesAsWaffen(x,y))", "all x.(VenomousCreature(x) -> (UsesPoisonAsWaffen(x) | UsesPoisonAsWaffen(x)))", "all x.((VenomousCreature(x) & UsesPoison(x)) -> Weapon(x))", "all x.(VenomousCreature(x) -> UsePoisonAsWaffen(x))", "all x y.((VenomousCreature(x) & Poison(y)) -> UsesAsWaffen(x,y))", "all x y z.((VenomousCreature(x) & Poison(y) & Weapon(z)) -> Uses(x,y,z))", "all x.((VenomousCreature(x) & UsePoisonAsWaffen(x)) -> UsePoisonAsWaffen(x))", "all x y.((VenominousCreature(x) & Poison(y)) -> UsesAsWaffen(x,y))", "all x.((VenomousCreature(x) & UsesPoisonAsWaffen(x)) -> UsesPoisonAsWaffen(x))", "all x y.((VenomousCreature(x) & Poison(y)) -> UsesAsWaffen(x,y))", "all x.(VenomousCreature(x) -> (UsesPoisonAsWaffen(x)))", "all x y.((VenomousCreature(x) & Poison(y)) -> CanUseAsWaffen(x,y))", "all x y.((VenomousCreature(x) & Poison(y) & UsesAsWaffen(x,y)) -> UsesAsWaffen(x,y))", "all x.(VenomousCreature(x) -> UsesPoisonAsWaffen(x))", "exists x.(VenomousCreature(x) & UsesPoisonAsWaffen(x))"]}
{"id": "eqasc_validation_253", "nl": "sea anemones are venomous", "fol": "", "prediction": ["all x.(SeaAnemone(x) -> Venomous(x))", "all x y.((SeaAnemone(x) & SeaAnemone(y)) -> (Venomous(x) & Venomous(y)))", "all x.(SeaAnemone(x) -> Venomous(x))", "all x y.((SeaAnemone(x) & SeaAnemone(y)) -> (Venomous(x) & Venomous(y)))", "all x.(SeaAnemone(x) -> (Venomous(x) & Venomous(x)))", "(Venomous(seaanemones) & Venomous(seaanemones))", "all x.(SeaAnemone(x) -> (Venomous(x) & Venomous(x)))", "all x y z.((SeaAnemone(x) & SeaAnemone(y) & Venomous(z)) -> Venomous(x,y,z))", "all x y.((SeaAnemone(x) & SeaAnemone(y)) -> Venomous(x))", "all x y.((SeaAnemone(x) & SeaAnemone(y)) -> Venomous(x,y))", "all x.((SeaAnemone(x) & Venomous(x)) -> Venomous(x))", "all x.(SeaAnemone(x) -> Venomous(x))", "all x y.((SeaAnemone(x) & SeaAnemone(y)) -> (Venomous(x) | Venomous(y)))", "all x.(SeaAnemone(x) -> Venomous(x))", "all x.(SeaAnemone(x) -> (Venomous(x) & Venomous(x)))", "all x.(SeaAnemone(x) -> (Venomous(x) & Venomous(x)))"]}
{"id": "eqasc_validation_254", "nl": "Sea anemones are close relatives of corals .", "fol": "", "prediction": ["all x.(SeaAnemone(x) -> CloseRelativeOfCorals(x))", "all x y.((SeaAnemone(x) & Coral(y)) -> CloseRelative(x,y))", "all x y.((SeaAnemone(x) & Coral(y)) -> CloseRelative(x,y))", "all x.(SeaAnemone(x) -> CloseRelativeOfCorals(x))", "all x y z.((SeaAnemone(x) & Coral(y) & Coral(z)) -> CloseRelative(x,y,z))", "all x.(SeaAnemone(x) -> (CoralRelative(x) & CloseRelative(x)))", "(CloseRelativeOfCorals(seaAnemones))", "(CloseRelativeToCorals(seaanemones))", "all x y z.((SeaAnemone(x) & Coral(y) & Coral(z)) -> CloseRelative(x,y,z))", "all x y.((SeaAnemone(x) & Coral(y)) -> CloseRelative(x,y))", "all x.(SeaAnemone(x) -> (CoralRelative(x) & CloseRelative(x)))", "all x y.((SeaAnemone(x) & Coral(y)) -> CloseRelative(x,y))", "all x.(SeaAnemone(x) -> CloseRelativeToCorals(x))", "all x.(SeaAnemone(x) -> CloseRelativeToCorals(x))", "all x.(SeaAnemone(x) -> (CloseRelativeToCorals(x)))", "all x y.((SeaAnemone(x) & Coral(y)) -> CloseRelative(x,y))"]}
{"id": "eqasc_validation_255", "nl": "poisonous darts are used for defense by close relatives of coral", "fol": "", "prediction": ["all x y.((PoisonousDart(x) & CloseRelative(y)) -> UsedForDefense(x,y))", "all x y z.((PoisonousDart(x) & Coral(y) & CloseRelative(z)) -> UsedForDefense(x,y,z))", "all x.(PoisonousDart(x) -> UsedForDefenseByCoralCoralRelatives(x))", "all x y.((PoisonousDart(x) & Coral(y)) -> UsedForDefense(x,y))", "(all x.(PoisonousDart(x) -> UsedForDefense(x)) & exists y.(CoralCoralRelative(y) & CloseRelative(x,y))))", "all x.(PoisonousDart(x) -> (UsedForDefense(x) & CloseRelativesOfCoral(x)))", "all x y z.((PoisonousDart(x) & Coral(y) & CloseRelative(z)) -> UsedForDefense(x,y,z))", "all x y.((PoisonousDart(x) & CloseRelative(y) & Coral(y)) -> UsedForDefense(x,y))", "all x y z.((PoisonousDart(x) & CloseRelative(y) & Coral(z) & UsedForDefense(x,y,z)) -> (PoisonousDart(x) & CloseRelative(y,z)))", "all x.(PoisonousDart(x) -> (UsedForDefenseByCloseRelativesOfCoral(x) & Coral(x)))", "all x y.((PoisonousDart(x) & CoralCoralRelative(y)) -> UsedForDefense(x,y))", "all x.(PoisonousDart(x) -> UsedForDefense(x))", "all x y z.((PoisonousDart(x) & Coral(y) & CloseRelative(z)) -> UsedForDefense(x,y,z))", "all x.(PoisonousDart(x) -> (UsedForDefense(x) & CloseRelativesOfCoral(x)))", "all x.(PoisonousDart(x) -> UsedForDefenseByCloseRelativesOfCoral(x))", "all x y.((PoisonousDart(x) & CloseRelative(y)) -> UsedForDefense(x,y))"]}
{"id": "eqasc_validation_256", "nl": "close relatives of coral use poisonous darts for defense", "fol": "", "prediction": ["all x y.((CloseRelative(x) & Coral(y)) -> UsesPoisonousDartsForDefense(x,y))", "all x.((CloseRelative(x) & Coral(x)) -> UsesPoisonousDartsForDefense(x))", "all x y z.((CloseRelative(x) & Coral(y) & PoisonousDart(z)) -> UsesForDefense(x,y,z))", "all x.(CloseRelativesOfCoral(x) -> UsePoisonousDartsForDefense(x))", "all x y.((CoralCoral(x) & CloseRelative(y)) -> UsesPoisonousDartsForDefense(y,x))", "all x y.((CloseRelative(x) & Coral(y)) -> UsesPoisonousDartsForDefense(x,y))", "(CloseRelativesOfCoral(CoralCoral) UsePoisonousDartsForDefense(CoralCoral))", "close relatives of coral use poisonous darts for defense.", "all x y z.((CloseRelative(x,y) & Coral(z) & UsesPoisonousDartsForDefense(x,z)) -> UsesPoisonousDartsForDefense(x,z))", "all x.((CloseRelativesOfCoral(x) & UsePoisonousDarts(x)) -> Defense(x))", "(CloseRelativesOfCoral(c) & UsePoisonousDartsForDefense(darts))", "all x.((CloseRelative(x) & Coral(x)) -> UsesPoisonousDartsForDefense(x))", "all x y z.((CloseRelative(x) & Coral(y) & PoisonousDart(z)) -> UsesForDefense(x,y,z))", "all x.(CloseRelative(x) -> UsesPoisonousDartsForDefense(x))", "all x.(CloseRelativesOfCoral(x) -> UsePoisonousDartsForDefense(x))", "all x y.((CloseRelative(x) & Coral(y)) -> UsesPoisonousDartsForDefense(x,y))"]}
{"id": "eqasc_validation_257", "nl": "Protection at the gateway is the best defense.", "fol": "", "prediction": ["all x.((ProtectAtGateway(x) & BestDefense(x)) -> BestDefense(x))", "all x y.((Gateway(x) & Gateway(y)) -> BestDefense(x,y))", "all x.((ProtectionAtGateway(x) & BestDefense(x)) -> BestDefense(x))", "all x.(ProtectAtGateway(x) -> BestDefense(x))", "all x.((ProtectAtGateway(x) & BestDefense(x)) -> ProtectionAtGateway(x))", "all x.((Protect(x) & Gateway(x)) -> BestDefense(x))", "all x y.((Gateway(x) & Gateway(y)) -> BestDefense(x,y))", "(BetterDefenseAtGateway(Protection))", "all x.((Gateway(x) & ProtectionAt(x,y)) -> BestDefense(x))", "all x.(ProtectAtGateway(x) -> BestDefense(x))", "all x y.((ProtectAtGateway(x) & Gateway(y)) -> BestDefense(x,y))", "all x y.((Gateway(x) & Gateway(y)) -> BestDefense(x))", "All x.((GatewayProtection(x) & GatewayProtection(x)) -> BestDefense(x))", "All x.(ProtectionAtGateway(x) -> BestDefense(x))", "all x y.((Gateway(x) & Gateway(y)) -> BestDefense(x,y))", "All x.(ProtectionAtGateway(x) -> BestDefense(x))"]}
{"id": "eqasc_validation_258", "nl": "Poisonous darts are used as protection by sea anemones.", "fol": "", "prediction": ["all x.(PoisonousDart(x) -> UsedAsProtectionBySeaAnemones(x))", "all x y.((PoisonousDart(x) & SeaAnemone(y)) -> UsedAsProtection(x,y))", "all x y.((Dart(x) & Poisonous(x)) -> UsedAsProtection(x,y))", "all x y z.((PoisonousDart(x) & SeaAnemone(y) & SeaAnemone(z)) -> UsedAsProtection(x,y,z))", "all x.((Dart(x) & Poisonous(x)) -> UsedAsProtectionBySeaAnemones(x))", "all x.(PoisonousDart(x) -> UsedAsProtectionBySeaAnemones(x))", "all x y.((PoisonousDart(x) & SeaAnemone(y)) -> UsedAsProtection(x,y))", "all x.(PoisonousDart(x) -> UsedAsProtection(x,SeaAnemones))", "all x y.((Dart(x) & Poisonous(x)) -> UsedAsProtectionBySeaAnemones(y))", "all x.((Dart(x) & Poisonous(x)) -> UsedAsProtection(x,SeaAnemones))", "all x y z.((PoisonousDart(x) & SeaAnemone(y) & SeaAnemone(z)) -> UsedAsProtection(x,y,z))", "all x y z.((PoisonousDart(x) & SeaAnemone(y) & SeaAnemone(z)) -> UsedAsProtection(x,y,z))", "all x.((Dart(x) & Poisonous(x)) -> UsedAsProtectionBySeaAnemones(x))", "all x.(PoisonousDart(x) -> UsedAsProtectionBySeaAnemones(x))", "all x y.((PoisonousDart(x) & SeaAnemone(y)) -> UsedAsProtection(x,y))", "all x.(PoisonousDart(x) -> UsedAsProtectionBySeaAnemones(x))"]}
{"id": "eqasc_validation_259", "nl": "Anthozoans are the familiar anemones and corals.", "fol": "", "prediction": ["all x.(Anthozoan(x) -> (FamiliarAnemone(x) & FamiliarCoral(x)))", "(Familiar(anemone) & Familiar(anemone) & Familiar(anemone) & Familiar(anemone) & Familiar(anemone) & Familiar(anemone) & Familiar(anemone) & Familiar(anemone) & Familiar(anemone) & Familiar(anemone) & Famili", "all x y.((Anthozoan(x) & Anemone(y) & Coral(y)) -> (Familiar(x,y) & Familiar(x,y)))", "all x.(Anthozoan(x) -> (FamiliarAnemone(x) & FamiliarCoral(x)))", "(Familiar(Anemone) & Familiar(Coral))", "(FamousAnemone(an) & FamousCoral(an))", "all x y z.((Anthozoan(x) & Anemone(y) & Coral(z)) -> (Familiar(x,y) & Familiar(x,z)))", "all x y.((Anthozoan(x) & Anemone(y) & Coral(y)) -> (Familiar(x,y) & Familiar(x,y)))", "all x.(Anthozoan(x) -> (FamiliarAnemone(x) & FamiliarCoral(x)))", "all x.(Angeosaur(x) -> (FamiliarAnemone(x) & FamiliarCoral(x)))", "all x.(Anthozoan(x) -> (FamousAnemone(x) & FamiliarCoral(x)))", "all x.(Anthozoan(x) -> (FamiliarAnemone(x) & FamiliarCoral(x)))", "all x y.((Anthozoan(x) & Anemone(y) & Coral(y)) -> (Familiar(x,y) & Famous(x,y)))", "all x.(Anthozoan(x) -> (FamiliarAnemone(x) & FamiliarCoral(x)))", "all x.(Anthozoan(x) -> (FamiliarAnemone(x) & FamiliarCoral(x)))", "all x.(Anthozoan(x) -> (FamiliarAnemone(x) & FamiliarCoral(x)))"]}
{"id": "eqasc_validation_260", "nl": "Poisonous darts are used for defense by Anthozoans.", "fol": "", "prediction": ["all x.(PoisonousDart(x) -> UsedForDefense(x))", "all x y.((PoisonousDart(x) & Anthozoan(y)) -> UsedForDefense(x,y))", "all x.((Dart(x) & Poisonous(x)) -> UsedForDefense(x))", "all x y.((Dart(x) & Anthozoan(y)) -> UsedForDefense(x,y))", "all x y z.((PoisonousDart(x) & Anthozoan(y) & Anthozoan(z)) -> UsedForDefense(x,y,z))", "(UsedForDefenseByAnthozoans(PoisonousDarts))", "all x y.((PoisonousDart(x) & Anthozoan(y)) -> UsedForDefense(x,y))", "all x.(PoisonousDart(x) -> UsedForDefense(x))", "all x.((PoisonousDart(x) & Anthozoan(x)) -> UsedForDefense(x))", "(UsedForDefenseByAnthozoans(poisonousDarts) & Anthozoan(darts))", "all x.(PoisonousDart(x) -> UsedForDefenseByAnthozoans(x))", "all x.((Dart(x) & Poisonous(x)) -> UsedForDefense(x))", "all x y z.((PoisonousDart(x) & Anthozoan(y) & Anthozoan(z)) -> UsedForDefense(x,y,z))", "all x y.((Dart(x) & Anthozoan(y)) -> UsedForDefense(x,y))", "all x y.((PoisonousDart(x) & Anthozoan(y)) -> UsedForDefense(x,y))", "all x.(PoisonousDart(x) -> UsedForDefense(x,Anthozoans))"]}
{"id": "eqasc_validation_261", "nl": "Sea anemones are related to jellyfish and coral.", "fol": "", "prediction": ["all x.(SeaAnemone(x) -> (RelatedToJellyfish(x) & RelatedToCoral(x)))", "all x.(SeaAnemone(x) -> (RelatedToJellyfish(x) & RelatedToCoral(x)))", "all x y.((SeaAnemone(x) & Jellyfish(y) & Coral(y)) -> RelatedTo(x,y))", "all x y.((SeaAnemone(x) & Jellyfish(y) & Coral(y)) -> RelatedTo(x,y))", "all x y z.((SeaAnemone(x) & Jellyfish(y) & Coral(z)) -> (RelatedTo(x,y) & RelatedTo(x,z)))", "(all x.(SeaAnemone(x) -> (Jellyfish(x) | Coral(x))))", "all x.(SeaAnemone(x) -> (RelatedToJellyfish(x) & RelatedToCoral(x)))", "all x.(SeaAnemone(x) -> (RelatedToJellyfish(x) | RelatedToCoral(x)))", "all x y z.((SeaAnemone(x) & Jellyfish(y) & Coral(z)) -> (RelatedTo(x,y) & RelatedTo(x,z)))", "(all x.(SeaAnemone(x) -> (RelatedToJellyfish(x) | RelatedToCoral(x))))", "all x.(SeaAnemone(x) -> (RelatedTo(x,Jellyfish) & RelatedTo(x,Coral)))", "all x y.((SeaAnemone(x) & Jellyfish(y) & Coral(y)) -> RelatedTo(x,y))", "all x.(SeaAnemone(x) -> (RelatedTo(x,Jellyfish) & RelatedTo(x,Coral)))", "all x.((SeaAnemone(x) & Jellyfish(x) & Coral(x)) -> Relative(x,y))", "all x.(SeaAnemone(x) -> (RelatedToJellyfish(x) | RelatedToCoral(x)))", "exists x.(SeaAnemone(x) & Jellyfish(x) & Coral(x))"]}
{"id": "eqasc_validation_262", "nl": "poisonous darts are used for defense by an organism related to jellyfish and coral", "fol": "", "prediction": ["all x y z.((PoisonousDart(x) & Organism(y) & Jellyfish(z) & Coral(z)) -> UsedForDefense(x,y,z))", "all x y.((PoisonousDart(x) & Organism(y) & Jellyfish(y) & Coral(y)) -> UsedForDefense(x,y))", "all x.(PoisonousDart(x) -> (UsedForDefense(x) & OrganismRelatedToJellyfishAndCoral(x)))", "all x.(PoisonousDart(x) -> (UsedForDefenseByOrganism(x) & RelatedToJellyfishAndCoral(x)))", "all x y z.((PoisonousDart(x) & Organism(y) & Jellyfish(z) & Coral(z)) -> UsedForDefenseBy(x,y,z))", "all x y.((PoisonousDart(x) & Organism(y) & RelatedToJellyfishAndCoral(y)) -> UsedForDefense(x,y))", "all x.((PoisonousDart(x) & Organism(x) & Jellyfish(x) & Coral(x)) -> UsedForDefense(x))", "all x.(PoisonousDart(x) -> (UsedForDefense(x) & OrganismRelatedToJellyfishAndCoral(x)))", "all x y.((PoisonousDart(x) & Organism(y) & Jellyfish(y) & Coral(y)) -> UsedForDefense(x,y))", "all x.(PoisonousDart(x) -> UsedForDefenseByOrganism(x))", "all x y z.((PoisonousDart(x) & Organism(y) & Jellyfish(z) & Coral(z)) -> UsedForDefense(x,y,z))", "all x y.((PoisonousDart(x) & Organism(y)) -> (UsedForDefense(x,y) & RelatedToJellyfishAndCoral(y)))", "all x.(PoisonousDart(x) -> (UsedForDefenseByOrganism(x) & RelatedToJellyfishAndCoral(x)))", "all x y z.((PoisonousDart(x) & Organism(y) & Jellyfish(z)) -> UsedForDefenseBy(x,y,z))", "all x.(PoisonousDart(x) -> UsedForDefense(x)) Organism(x) & (RelatedToJellyfish(x) | RelatedToCoral(x)))", "all x y z.((PoisonousDart(x) & Organism(y) & (Jellyfish(z) | Coral(z))) -> UsedForDefense(x,y,z))"]}
{"id": "eqasc_validation_263", "nl": "Lymph is a fluid that leaks out of capillaries into spaces between cells.", "fol": "", "prediction": ["all x.(Lymph(x) -> (LeaksOutOfCapillaries(x) & EntersSpacesBetweenCells(x)))", "all x y.((Lymph(x) & Capillary(y)) -> LeaksOutIntoSpacesBetweenCells(x,y))", "all x.(Lymph(x) -> LeaksOutOfCapillariesIntoSpacesBetweenCells(x))", "all x.(Lymph(x) -> (Liquid(x) & LeaksOutOfCapillariesIntoSpacesBetweenCells(x)))", "(Lymph(lymph) & LeaksOutOfCapillariesIntoSpacesBetweenCells(lymph))", "all x y z.((Lymph(x) & Capillary(y) & Space(z)) -> LeaksOutInto(x,y,z))", "all x.(Lymph(x) -> (Fluid(x) & LeaksOutOfCapillaries(x) & LeaksIntoSpacesBetweenCells(x)))", "all x y.((Lymph(x) & Capillary(y)) -> LeaksOutIntoSpacesBetweenCells(x,y))", "all x.(Lymph(x) -> (Fluid(x) & LeaksOutOfCapillaries(x) & LeaksIntoSpacesBetweenCells(x)))", "all x y z.((Lymph(x) & Capillary(y) & Space(z)) -> LeaksOutInto(x,y,z))", "all x.(Lymph(x) -> LeaksOutOfCapillariesIntoSpacesBetweenCells(x))", "all x.(Lymph(x) -> LeaksOutOfCapillariesIntoSpacesBetweenCells(x))", "all x.(Lymph(x) -> (Liquid(x) & LeaksOutOfCapillariesIntoSpacesBetweenCells(x)))", "all x y.((Lymph(x) & Capillary(y)) -> LeaksOutIntoSpacesBetweenCells(x,y))", "all x y.((Lymph(x) & Capillary(y)) -> LeaksIntoSpacesBetweenCells(x,y))", "exists x.(Lymph(x) & LeaksOutOfCapillaries(x) & EntersSpacesBetweenCells(x))"]}
{"id": "eqasc_validation_264", "nl": "Small lymph capillaries collect lymph.", "fol": "", "prediction": ["all x.(SmallLymphCapillary(x) -> CollectsLymph(x))", "all x.(LymphCapillary(x) -> CollectsLymph(x))", "all x y.((SmallLymphCapillary(x) & Lymph(y)) -> Collects(x,y))", "all x.(SmallLymphCapillary(x) -> CollectsLymph(x))", "all x y z.((SmallLymphCapillary(x) & Lymph(y) & Lymph(z)) -> Collects(x,y,z))", "all x.(LymphCapillary(x) -> CollectsLymph(x))", "all x y.((SmallLymphCapillary(x) & Lymph(y)) -> Collects(x,y))", "all x.(SmallLymphCapillary(x) -> CollectsLymph(x))", "all x y.((SmallLymphCapillary(x) & Lymph(y)) -> Collects(x,y))", "exists x.(LymphCapillary(x) & Small(x) & CollectsLymph(x))", "all x y.((LymphCapillary(x) & Small(x)) -> CollectsLymph(x,y))", "all x.(LymphCapillary(x) -> CollectsLymph(x))", "all x.(SmallLymphCapillary(x) -> CollectsLymph(x))", "all x y.((SmallLymphCapillary(x) & Lymph(y)) -> Collects(x,y))", "exists x.(LymphCapillary(x) & Small(x))", "exists x.(SmallLymphCapillary(x) & CollectsLymph(x))"]}
{"id": "eqasc_validation_265", "nl": "small capillaries collect fluid", "fol": "", "prediction": ["all x.(SmallCapillary(x) -> CollectsFluid(x))", "all x y.((SmallCapillary(x) & SmallCapillary(y)) -> CollectsFluid(x,y))", "all x y z.((SmallCapillary(x) & FluidCollects(x,y) & FluidCollects(y)) -> Collects(x,z))", "all x y.((SmallCapillary(x) & FluidCollects(x,y)) -> Collects(x,y))", "all x.(SmallCapillary(x) -> CollectsFluid(x))", "all x.(SmallCapillariesCollectFluid(x) -> SmallCapillariesCollectFluid(x))", "all x y z.((SmallCapillary(x) & Fluid(y) & Fluid(z)) -> Collects(x,y,z))", "exists zoosphericcapillaries (small(z) & CollectsFluid(z) & CollectsFluid(z))", "all x y.((SmallCapillary(x) & SmallCapillary(y)) -> CollectsFluid(x,y))", "all x.(SmallCapillary(x) -> CollectsFluid(x))", "exists x.(Capillary(x) & CollectsFluid(x))", "all x y z.((SmallCapillary(x) & FluidCollecting(y) & FluidCollecting(z)) -> Collects(x,y,z))", "all x y.((SmallCapillary(x) & Fluid(y)) -> Collects(x,y))", "all x.(SmallCapillariesCollectFluid(x) -> CollectFluid(x))", "exists x.(Capillary(x) & CollectsFluid(x))", "all x.(SmallCapillary(x) -> CollectsFlourish(x))"]}
{"id": "eqasc_validation_266", "nl": "Lymph vessels carry lymph, a colorless, watery fluid that contains lymphocytes.", "fol": "", "prediction": ["all x.(LymphVessel(x) -> (CarriesLymph(x) & ColorlessWateryFluid(x) & ContainsLymphocytes(x)))", "all x y.((LymphVessel(x) & Lymph(y)) -> (CarriesLymph(x,y) & ColorlessWateryFluid(x) & ContainsLymphocytes(x)))", "all x.(LymphVessel(x) -> (CarriesLymph(x) & ColorlessWateryFluid(x) & ContainsLymphocytes(x)))", "all x.((LymphVessel(x) & Lymph(x)) -> (CarriesLymph(x) & ColorlessWateryFluid(x) & ContainsLymphocytes(x)))", "all x y z.((LymphVessel(x) & Lymph(y) & ColorlessWateryFluid(z)) -> Carries(x,y,z))", "(CarriesLymphVessels(lymph,colorless,watery) & ContainsLymphocytes(lymph))", "all x y.((LymphVessel(x) & Lymph(y)) -> (CarriesLymph(x,y) & ColorlessWateryFluid(x) & ContainsLymphocytes(x)))", "all x y.((LymphVessel(x) & Lymph(y) & ColorlessWateryFluid(x) & ContainsLymphocytes(x)) -> Carrys(x,y))", "all x.(LymphVessel(x) -> (CarriesLymph(x) & ColorlessWateryFluid(x) & ContainsLymphocytes(x)))", "all x y.((LymphVessel(x) & Lymph(y) & ColorlessWateryFluid(x) & ContainsLymphocytes(x)) -> Carries(x,y))", "all x y z.((LymphVessel(x) & Lymph(y) & ColorlessWateryFluid(z)) -> Carries(x,y,z))", "all x.(LymphVessel(x) -> (CarriesLymph(x) & ColorlessWateryFluid(x) & ContainsLymphocytes(x)))", "all x y.((LymphVessel(x) & Lymph(y) & ColorlessWateryFluid(y) & ContainsLymphocytes(y)) -> CarryLymph(x,y))", "all x.(LymphVessel(x) -> (CarriesLymph(x) & ColorlessWateryFluid(x) & ContainsLymphocytes(x)))", "all x.(LymphVessel(x) -> (CarriesLymph(x) & ColorlessWateryFluid(x) & ContainsLymphocytes(x)))", "all x.(LymphVessel(x) -> CarriesLymph(x))"]}
{"id": "eqasc_validation_267", "nl": "fluid that leaks out of capillaries into spaces between cells contains lymphocytes", "fol": "", "prediction": ["all x y.((Fluid(x) & LeaksOutOfCapillaries(x) & SpacesBetweenCells(y)) -> ContainsLymphocytes(x))", "all x.((Fluid(x) & LeaksOutOfCapillaries(x) & SpacesBetweenCells(x)) -> ContainsLymphocytes(x))", "all x y z.((Fluid(x) & LeaksOutOfCapillaries(x) & SpacesBetweenCells(y) & LeaksInto(x,y)) -> ContainsLymphocytes(x))", "all x.((Fluid(x) & LeaksOutOfCapillariesIntoSpacesBetweenCells(x)) -> ContainsLymphocytes(x))", "all x.(LeaksOutOfCapillariesIntoSpacesBetweenCells(x) -> ContainsLymphocytes(x))", "all x y z.((Fluid(x) & LeaksOutOfCapillariesIntoSpacesBetweenCells(x) & Lymphocytes(y) & LeaksInto(x,y,z)) -> ContainsLymphocytes(z))", "all x y.((Fluid(x) & LeaksOutOfCapillaries(x) & SpacesBetweenCells(y)) -> ContainsLymphocytes(x,y))", "all x y.((Fluid(x) & LeaksOutOfCatheteriesIntoSpacesBetweenCells(x)) -> ContainsLymphocytes(x))", "all x.(LeaksOutCapillariesIntoSpacesBetweenCells(x) -> ContainsLymphocytes(x))", "all x y z.((Fluid(x) & Capillary(y) & SpacesBetweenCells(z) & LeaksOut(x,y) & LeaksInto(x,z)) -> ContainsLymphocytes(x))", "all x.((Fluid(x) & LeaksOutOfCapillaries(x) & SpacesBetweenCells(x)) -> ContainsLymphocytes(x))", "all x y z.((Fluid(x) & LeaksOutOfCapillaries(x) & SpacesBetweenCells(y) & LeaksInto(x,y)) -> ContainsLymphocytes(x))", "all x.((Fluid(x) & LeaksOutOfCapillariesIntoSpacesBetweenCells(x)) -> ContainsLymphocytes(x))", "all x.(LeaksOutOfCapillariesIntoSpacesBetweenCells(x) -> ContainsLymphocytes(x))", "all x y.((Fluid(x) & LeaksOutOfCapillaries(x) & SpacesBetweenCells(x)) -> ContainsLymphocytes(x))", "all x.((Fluid(x) & LeaksOutOfCatheteries(x) & SpacesBetweenCells(x)) -> ContainsLymphocytes(x))"]}
{"id": "eqasc_validation_268", "nl": "Capillary walls are quite permeable.", "fol": "", "prediction": ["all x.(CapillaryWall(x) -> Permeable(x))", "all x.(CapillaryWall(x) -> Permeable(x))", "all x y.((CapillaryWall(x) & Wall(y)) -> Permeable(x))", "all x y.((CapillaryWall(x) & CapillaryWall(y)) -> Permeable(x))", "(PermeableCapillaryWalls)", "all x.(CapillaryWall(x) -> Permeable(x))", "all x.(CapillaryWall(x) -> Permeable(x))", "all x.(CapillaryWall(x) -> Permeable(x))", "all x.(CardiolusWall(x) -> Permeable(x))", "all x y.((CapillaryWall(x) & Wall(y)) -> Permeable(x))", "all x.(CapillaryWall(x) -> Permeable(x))", "all x.(CapillaryWall(x) -> Permeable(x))", "all x.(CapillaryWall(x) -> Permeable(x))", "all x.(CapillaryWall(x) -> Permeable(x))", "exists x.(CartilizedWall(x) & Permeable(x))", "exists x.(CapillaryWall(x) & Permeable(x))"]}
{"id": "eqasc_validation_269", "nl": "lymph is the fluid that leaks from permeable walls into spaces between cells", "fol": "", "prediction": ["all x.(Lymph(x) -> LeaksFromPermeableWallsIntoSpacesBetweenCells(x))", "all x y.((Lymph(x) & PermeableWalls(y)) -> LeaksIntoSpacesBetweenCells(x,y))", "all x y z.((Lymph(x) & PermeableWalls(y) & SpacesBetweenCells(z)) -> LeaksFromInto(x,y,z))", "all x y.((Lymph(x) & PermeableWalls(y) & SpacesBetweenCells(x)) -> LeaksFromInto(x,y))", "(Lymph(lymph) -> LeaksFromPermeableWallsIntoSpacesBetweenCells(lymph))", "(LeaksFromPermeableWallsIntoSpacesBetweenCells(Lymph))", "all x.(Lymph(x) -> LeaksFromPermeableWallsIntoSpacesBetweenCells(x))", "all x.(Lymph(x) -> (LeaksFromPermeableWallsIntoSpacesBetweenCells(x) & FromPermeableWallsIntoSpacesBetweenCells(x)))", "all x y z.((Lymph(x) & PermeableWalls(y) & SpacesBetweenCells(z)) -> LeaksFromInto(x,y,z))", "all x.(Lymph(x) -> LeaksFromPermeableWallsIntoSpacesBetweenCells(x))", "all x y.((Lymph(x) & PermeableWalls(y)) -> LeaksIntoSpacesBetweenCells(x,y))", "all x y z.((Lymph(x) & PermeableWall(y) & Space(z)) -> LeaksFromInto(x,y,z))", "all x.(Lymph(x) -> LeaksFromPermeableWallsIntoSpacesBetweenCells(x))", "all x y.((Lymph(x) & PermeableWalls(y) & SpacesBetweenCells(x,y)) -> LeaksInto(x,y))", "all x.(Lymph(x) -> LeaksFromPermeableWallsIntoSpacesBetweenCells(x))", "all x.(Lymph(x) -> LeaksFromPermeableWallsIntoSpacesBetweenCells(x))"]}
{"id": "eqasc_validation_270", "nl": "System consists of lymph capillaries, lymph veins and lymph nodes.", "fol": "", "prediction": ["all x.(System(x) -> (LymphCapillaries(x) & LymphVines(x) & LymphNodes(x)))", "all x y z.((System(x) & LymphCapillaries(y) & LymphVines(z)) -> (ConsistsOf(x,y,z) & ConsistsOf(x,y)))", "all x.(System(x) -> (LymphCapillaries(x) & LymphVins(x) & LymphNodes(x)))", "(all x.(LymphCapillary(x) -> ConsistsOf(x,LymphVines,LymphNodes))", "all x y z.((System(x) & LymphCapillaries(y) & LymphVins(z)) -> (ConsistsOf(x,y,z) & ConsistsOf(x,y)))", "all x.(System(x) -> (exists y.(LymphCapillary(y) & ConsistsOf(x,y)) & exists z.(LymphVin(z) & ConsistsOf(x,z)))))", "(System(LymphCapillaries) & System(LymphVines) & System(LymphNodes))", "all x y.((System(x) & LymphCapillaries(y) & LymphVins(y) & LymphNodes(x)) -> ConsistsOf(x,y))", "(all x.(LymphCapillary(x) -> ConsistsOf(x,y)) & (LymphVines(y) | LymphNodes(y)))", "all x.(System(x) -> (LymphCapillaries(x) & LymphVines(x) & LymphNodes(x)))", "all x y z.((System(x) & LymphCapillaries(y) & LymphVins(z)) -> (ConsistsOf(x,y) & ConsistsOf(x,z)))", "all x.(System(x) -> (LymphCapillaries(x) & LymphVines(x) & LymphNodes(x)))", "exists x.(LymphCapillary(x) & LymphVins(x) & LymphNodes(x))", "all x.(System(x) -> (LymphCapillaries(x) & LymphVins(x) & LymphNodes(x)))", "all x.(System(x) -> (LymphCapillaries(x) & LymphVins(x) & LymphNodes(x)))", "all x.(System(x) -> (LymphCardioces(x) & LymphVines(x) & LymphNodes(x)))"]}
{"id": "eqasc_validation_271", "nl": "lymph is in nodes", "fol": "", "prediction": ["all x.(Lymph(x) -> InNodes(x))", "all x y.((Lymph(x) & Node(y)) -> InNode(x,y))", "all x y z.((Lymph(x) & Node(y) & Node(z)) -> LymphIn(x,y,z))", "all x y.((Lymph(x) & Node(y)) -> In(x,y))", "all x.(Lymph(x) -> InNode(x))", "all x y z.((Lymph(x) & Node(y) & Node(z)) -> InNode(x,y,z))", "all x.(Lymph(x) -> InNodes(x))", "all x y.((Lymph(x) & Node(y)) -> InNodes(x,y))", "all x.(Lymph(x) -> Node(x))", "all x y z.((Lymph(x) & Node(y) & Node(z)) -> LymphInNode(x,y,z))", "all x.(LymphNode(x) -> InNodes(x))", "exists x.(Lymph(x) & Node(x) & InNode(x))", "exists x.(LymphNode(x) & LymphInNode(x))", "all x y.((Lymph(x) & Node(y)) -> In(x,y))", "exists x.(LymphNode(x) & LymphIsInNode(x))", "all x.(Lymph(x) -> InNode(x))"]}
{"id": "eqasc_validation_272", "nl": "Lymph fluid is rich in protein.", "fol": "", "prediction": ["all x.(LymphFluid(x) -> RichInProtein(x))", "all x.(LymphFluid(x) -> RichInProtein(x))", "all x y.((LymphFluid(x) & Protein(y)) -> RichIn(x,y))", "(RichInProtein(lymphFluid,Lymph))", "all x y.((LymphFluid(x) & Protein(y) & RichIn(x,y)) -> RichIn(x,y))", "all x.(LymphFlour(x) -> RichInProtein(x))", "all x.(LymphFluid(x) -> RichInProtein(x))", "all x y.((LymphFluid(x) & Protein(y) & RichIn(x,y)) -> RichIn(x,y))", "all x y.((LymphFlour(x) & Protein(y)) -> RichIn(x,y))", "all x.(LymphFluid(x) -> RichInProtein(x))", "all x.(LymphFlour(x) -> RichInProtein(x))", "all x.(LymphFluid(x) -> RichInProtein(x))", "exists x.(LymphFlour(x) & RichInProtein(x))", "exists x.(LymphFloid(x) & RichInProtein(x))", "exists x.(LymphFluid(x) & RichInProtein(x))", "exists x.(LymphFluid(x) & RichInProtein(x))"]}
{"id": "eqasc_validation_273", "nl": "A protein-rich fluid leaks into spaces between cells", "fol": "", "prediction": ["all x y.((ProteinRichFluid(x) & Space(y)) -> LeaksInto(x,y))", "all x y z.((ProteinRichFluid(x) & Space(y) & Cell(z)) -> LeaksInto(x,y,z))", "all x.((ProteinRichFluid(x) & LeaksIntoSpacesBetweenCells(x)) -> ProteinRichFluid(x))", "all x.(ProteinRichFluid(x) -> LeaksIntoSpacesBetweenCells(x))", "all x.((Fluid(x) & ProteinRich(x)) -> LeaksIntoSpacesBetweenCells(x))", "all x y.((ProteinRichFluid(x) & Cell(y)) -> LeaksIntoSpacesBetween(x,y))", "all x y z.((ProteinRichFluid(x) & Space(y) & Cell(z)) -> LeaksInto(x,y,z))", "all x.((ProteinRichFluid(x) & LeaksIntoSpacesBetweenCells(x)) -> LeaksIntoSpacesBetweenCells(x))", "all x y z.((ProteinRichFluid(x) & Space(y) & Cell(z) & LeaksInto(x,y,z)) -> LeaksInto(x,y,z))", "all x.(ProteinRichFluid(x) -> LeaksIntoSpacesBetweenCells(x))", "all x y.((ProteinRichFluid(x) & SpacesBetweenCells(y)) -> LeaksInto(x,y))", "all x y.((Fluid(x) & ProteinRich(x)) -> LeaksIntoSpacesBetweenCells(x))", "all x y z.((ProteinRichFluid(x) & Space(y) & Cell(z) & LeaksInto(x,y,z)) -> ProteinRichFluid(x))", "all x y.((ProteinRichFluid(x) & Cell(y)) -> LeaksIntoSpacesBetween(x,y))", "all x.(ProteinRichFluid(x) -> LeaksIntoSpacesBetweenCells(x))", "exists x.(ProteinRichFluid(x) & LeaksIntoSpacesBetweenCells(x))"]}
{"id": "eqasc_validation_274", "nl": "Humans are made up of trillions of cells.", "fol": "", "prediction": ["all x.(Human(x) -> MadeUpOfTwelveStationsOfCells(x))", "all x.(Human(x) -> exists y.(TwelveTreeKilobytes(y) & Cells(x,y))))", "all x y.((Human(x) & Cell(y)) -> MillionsOf(x,y))", "(MadeUpOfTwelveTreeKilobytes(Humans))", "all x.(Human(x) -> MillionsOfCells(x))", "all x.(Human(x) -> (MadeUpOfTwelveCells(x)))", "all x y.((Human(x) & Cell(y)) -> MadeUpOfTwelve(x,y))", "trillionsOfCells.", "(MadeUpOfTwelveTrillionsOfCells(Humans))", "all x y.(Human(x) -> (MadeUpOfTwelve(y) & Cells(y)))", "all x.(Human(x) -> exists y.(TrillionsOfCells(y) & MadeUpOf(x,y)))", "all x.(Human(x) -> MadeUpOfTwelveCells(x))", "trillionsOfCells (Humans)", "all x.(Human(x) -> exists y.(TwelveTreeKilobytes(y) & Cells(x,y))))", "all x y.((Human(x) & Cell(y)) -> MillionsOf(x,y))", "all x.(Human(x) -> MillionsOfCells(x))"]}
{"id": "eqasc_validation_275", "nl": "humans contain lymph", "fol": "", "prediction": ["all x.(Human(x) -> ContainsLymph(x))", "all x y.((Human(x) & Lymph(y)) -> Contains(x,y))", "(all x.(Human(x) -> LymphContainment(x)))", "all x.(Human(x) -> ContainsLymph(x))", "all x y z.((Human(x) & Lymph(y) & Lymph(z)) -> Contains(x,y,z))", "all x y.((Human(x) & Human(y)) -> ContainsLymph(x,y))", "exists x,y,z w.(Human(x) & Lymph(y) & Lymph(z) & Contains(x,w))", "all x y z.((Human(x) & Lymph(y) & Lymph(z)) -> Contains(x,y,z))", "all x.(Human(x) -> ContainsLymph(x))", "all x y.((Human(x) & Human(y) & Lymph(z)) -> Contains(x,z))", "all x y.((Human(x) & Lymph(y)) -> Contains(x,y))", "all x.(Human(x) -> LymphContainment(x))", "all x.(Human(x) -> (HasLymphContainment(x) | HasLymphContainment(x)))", "exists x.(Human(x) & Lymph(x) & Contains(x,y))", "all x.(Human(x) -> ContainsLymph(x))", "all x.(Human(x) -> ContainsLymph(x))"]}
{"id": "eqasc_validation_276", "nl": "Capillaries are microscopic vessels.", "fol": "", "prediction": ["all x.(Capillary(x) -> MicroscopicVessel(x))", "all x y.((Capillary(x) & MicroscopicalVessel(y)) -> MicroscopicalVessel(x))", "all x.(Capillary(x) -> MicroscopicVessel(x))", "(MicroscopicalVessel(capillary) & MicroscopicalVessel(capillary))", "all x y.((Capillary(x) & MicroscopicVessel(y)) -> Capillary(x))", "all x.(Capillary(x) -> MicroscopicVessel(x))", "all x.(Capillary(x) -> MicroscopicalVessel(x))", "all x y.((Capillary(x) & MicroscopeVessel(y)) -> MicroscopeVessel(x))", "all x.(Capsule(x) -> MicroscopicalVessel(x))", "exists x.(Cardiocy(x) & MicroscopicVessel(x))", "all x.(Capillary(x) -> MicroscopicVessel(x))", "all x.(Capsules(x) -> MicroscopicVessel(x))", "all x.(Capsule(x) -> MicroscopicalVessel(x))", "all x.(Capillary(x) -> MicroscopicVessel(x))", "all x.(Capillary(x) -> MicroscopicVessel(x))", "exists x.(Capillary(x) & MicroscopicVessel(x))"]}
{"id": "eqasc_validation_277", "nl": "Lymph is a fluid that leaks out of microscopic vessels into spaces between cells.", "fol": "", "prediction": ["all x.(Lymph(x) -> (Liquid(x) & LeaksOutOfMicroscopicVessels(x) & LeaksIntoSpacesBetweenCells(x)))", "all x y.((Lymph(x) & MicroscopicVessel(y)) -> LeaksOutIntoSpacesBetweenCells(x,y))", "all x.(Lymph(x) -> (Fluid(x) & LeaksOutOfMicroscopicVessels(x) & LeaksIntoSpacesBetweenCells(x)))", "all x.(Lymph(x) -> LeaksOutOfMicroscopicVesselsIntoSpacesBetweenCells(x))", "all x y z.((Lymph(x) & MicroscopicVessel(y) & Space(z)) -> LeaksOutInto(x,y,z))", "all x.(Lymph(x) -> (Fluid(x) & LeaksOutOfMicroscopicalVessels(x) & LeaksIntoSpacesBetweenCells(x)))", "all x y.((Lymph(x) & MicroscopicVessel(y)) -> LeaksOutIntoSpacesBetweenCells(x,y))", "all x y.((Lymph(x) & MicroscopicalVessel(y)) -> LeaksOutIntoSpacesBetweenCells(x,y))", "all x.(Lymph(x) -> LeaksOutOfMicroscopicVesselsIntoSpacesBetweenCells(x))", "all x.(Lymph(x) -> (Liquid(x) & LeaksOutOfMicroscopicVesselsIntoSpacesBetweenCells(x)))", "all x y z.((Lymph(x) & MicroscopicVessel(y) & Space(z)) -> LeaksOutInto(x,y,z))", "all x.(Lymph(x) -> (Liquid(x) & LeaksOutOfMicroscopicVesselsIntoSpacesBetweenCells(x)))", "all x y.((Lymph(x) & MicroscopicVessel(y) & LeaksOut(x,y)) -> SpacesBetweenCells(x))", "all x.(Lymph(x) -> LeaksOutOfMicroscopicalVesselsIntoSpacesBetweenCells(x))", "exists x.(Lymph(x) & LeaksOutOfMicroscopicVessels(x) & EntersSpacesBetweenCells(x))", "exists x.(Lymph(x) & LeaksOutOfMicroscopicalVessels(x) & EntersSpacesBetweenCells(x))"]}
{"id": "eqasc_validation_278", "nl": "Bacteria invade lymph nodes, which swell, creating the buboes.", "fol": "", "prediction": ["all x y.((Bacteria(x) & LymphNode(y)) -> InvadesAndSwells(x,y))", "all x.(Bacteria(x) -> (InvadesLymphNodes(x) & Swells(x) & CreatesBubboes(x)))", "all x y z.((Bacteria(x) & LymphNode(y) & Buboe(z)) -> InvadesAndSwells(x,y,z))", "all x y.((Bacteria(x) & LymphNode(y)) -> (Invades(x,y) & Swells(x,y) & CreatesBubioes(x)))", "(InvadesLymphNodes(bacteria,Lymph) & Swells(bacteria,Bubboes))", "all x.(Bacteria(x) -> (InvadesLymphNodes(x) & Swells(x) & CreatesBubioes(x)))", "all x y z.((Bacteria(x) & LymphNode(y) & Buboe(z)) -> (Invades(x,y) & Swells(y)))", "all x.(Bacteria(x) -> InvadesLymphNodes(x) & Swells(x) & CreatesBubboes(x))", "all x y.((Bacteria(x) & LymphNode(y) & Invades(x,y)) -> (Swells(y) & CreatesBubioes(x)))", "all x y.((Bacteria(x) & LymphNode(y)) -> InvadesAndSwells(x,y))", "all x.(Bacteria(x) -> (InvadesLymphNodes(x) & Swells(x) & CreatesBubboes(x)))", "(all x.(Bacteria(x) -> InvadesLymphNodes(x)) & swells(x))", "all x y z.((Bacteria(x) & LymphNode(y) & Buboe(z)) -> InvadesAndSwells(x,y,z))", "all x.(Bacteria(x) -> (InvadesLymphNodes(x) & Swells(x) & CreatesBubias(x)))", "all x.(Bacteria(x) -> InvadesLymphNodes(x) & Swells(x) & CreatesBubioes(x))", "all x.(Bacteria(x) -> (InvadesLymphNodes(x) & Swells(x) & CreatesBuboes(x)))"]}
{"id": "eqasc_validation_279", "nl": "Swelling nodes leak fluid out of capillaries into spaces between cells", "fol": "", "prediction": ["all x y z.((SwellingNode(x) & Capillary(y) & Space(z)) -> LeaksFluidOutInto(x,y,z))", "all x y.((SwellingNode(x) & Capillary(y)) -> LeaksFluidOutIntoSpacesBetweenCells(x,y))", "all x.(SwellingNode(x) -> LeaksFluidOutOfCapillariesIntoSpacesBetweenCells(x))", "all x y z.((SwellingNode(x) & Capillary(y) & Capillary(z)) -> LeaksFluidOutIntoSpacesBetweenCells(x,y,z))", "all x.(SwellingNode(x) -> LeaksFluidOutOfCapillariesIntoSpacesBetweenCells(x))", "all x y.((SwellingNode(x) & Capillary(y)) -> LeaksFluidOutIntoSpacesBetweenCells(x,y))", "all x y z.((SwellingNode(x) & Capillary(y) & Space(z)) -> LeaksFluidOut(x,y))", "all x y.((SwellingNode(x) & Capillary(y)) -> LeaksFluidIntoSpacesBetweenCells(x,y))", "all x y z.((SwellingNode(x) & Capillaries(y) & SpacesBetweenCells(z)) -> LeaksFluidOutOf(x,y,z))", "all x.(SwellingNode(x) -> LeaksFluidOutOfCapillariesIntoSpacesBetweenCells(x))", "all x y z.((SwellingNode(x) & Capillaries(y) & SpacesBetweenCells(z)) -> LeaksFluidOutOfCapillariesIntoSpacesBetweenCells(x,y,z))", "all x.(SwellingNode(x) -> LeaksFloidOutOfCathetersIntoSpacesBetweenCells(x))", "all x.(SwellingNode(x) -> LeaksFluidOutOfCapillariesIntoSpacesBetweenCells(x))", "all x y.((SwellingNode(x) & Capillary(y)) -> LeaksFluidOut(x,y))", "all x.(SwellingNode(x) -> LeaksFloidOutOfCathedralsIntoSpacesBetweenCells(x))", "all x.(SwellingNode(x) -> LeaksFluidOutOfCapillariesIntoSpacesBetweenCells(x))"]}
{"id": "eqasc_validation_280", "nl": "Lymph nodes, or glands, filter the lymph fluid.", "fol": "", "prediction": ["all x.((LymphNode(x) | Glands(x)) -> FiltersLymphFluid(x))", "all x y.((LymphNode(x) | Glands(x)) -> FiltersLymphFluid(y))", "all x y.((LymphNode(x) & Glands(y)) -> FiltersLymphFluid(x,y))", "all x.((LymphNode(x) | Glands(x)) -> FiltersLymphFluid(x))", "all x.(LymphNode(x) -> (Glands(x) & FiltersLymphFluid(x)))", "all x y z.((LymphNode(x) | Glands(x)) -> FiltersLymphFluid(x,y,z))", "all x.(LymphNode(x) -> FiltersLymphFluid(x))", "(FilterLymphNode(x) | FilterGlands(x)))", "(FilterLymphNodeOrGlands(LymphFluid))", "all x y.((LymphNode(x) | Glands(x)) -> FiltersLymphFluid(x,y))", "all x y.((LymphNode(x) & Glands(y)) -> FiltersLymphFluid(x,y))", "exists x.(LymphNode(x) | Glands(x)) & FiltersLymphFluid(x))", "all x.((LymphNode(x) | Glands(x)) -> FiltersLymphFluid(x))", "all x.((LymphNode(x) | Glands(x)) -> FiltersLymphFloid(x))", "all x y.((LymphNode(x) | Glands(x)) -> FiltersLymphFluid(y))", "all x.(LymphNode(x) -> (Glands(x) & FiltersLymphFluid(x)))"]}
{"id": "eqasc_validation_281", "nl": "lymph is filtered by nodes", "fol": "", "prediction": ["all x y.((Lymph(x) & Node(y)) -> FilteredBy(x,y))", "all x y z.((Lymph(x) & Node(y) & Node(z)) -> FilteredBy(x,y,z))", "all x.(Lymph(x) -> FilteredByNodes(x))", "all x y.((Lymph(x) & Node(y)) -> FilteredBy(x,y))", "all x y z.((Lymph(x) & Node(y) & Node(z)) -> FilteredBy(x,y,z))", "(FilledByNodes) & FilteredByNodes(Lymph(Lymph))", "all x.(Lymph(x) -> FilteredByNodes(x))", "all x y.((Lymph(x) & Node(y)) -> FilteredBy(x,y))", "all x y z.((Lymph(x) & Node(y) & Node(z)) -> FilteredBy(x,y,z))", "all x.(Lymph(x) -> FilteredByNodes(x))", "all x y.((Lymph(x) & Node(y) & FilteredBy(x,y)) -> FilteredBy(x,y))", "all x y.((Lymph(x) & Node(y)) -> FilteredBy(x,y))", "all x y z.((Lymph(x) & Node(y) & Node(z)) -> FilteredBy(x,y,z))", "all x.(Lymph(x) -> FilteredByNodes(x))", "all x.(Lymph(x) -> FilteredByNodes(x))", "all x.(Lymph(x) -> FilteredByNodes(x))"]}
{"id": "eqasc_validation_282", "nl": "Capillaries Capillaries are tiny, thin walled blood vessels.", "fol": "", "prediction": ["all x.(Capillary(x) -> (Tiny(x) & ThinWalledBloodedVessel(x)))", "all x.(Capillary(x) -> (TinyThinWalledBloodedVessel(x) & -TinyWalledVessel(x)))", "all x y.((Capillary(x) & Tiny(y) & ThinWalled(y)) -> BloodVessel(x,y))", "(TinyThinWalledBloodVessel(Capillary))", "all x.(Capillary(x) -> (Tiny(x) & ThinWalled(x) & BloodVessel(x)))", "all x.(Capsules(x) -> (Tiny(x) & ThinWalledBloodedVessel(x)))", "(TinyThinWalledBloodedVessel(Capillary))", "all x y.((Capillary(x) & Tiny(y) & ThinWalledBloodedVessel(x)) -> Capillaries(x))", "all x.(Capillary(x) -> (TinyThinWalledBloodedVessel(x) & Ticky(x)))", "all x y.((Capillary(x) & Tiny(y) & ThinWalled(y)) -> BloodVessel(x,y))", "all x.(Capillaries(x) -> (TinyThinWalledBloodedVessel(x) & -TinyWalledVessel(x)))", "all x.(Cardiox(x) -> (TinyThinWalledBloodedVessel(x) & Capillaries(x)))", "all x.(Capillary(x) -> (TinyThinWalledBloodedVessel(x) & -TinyWalledBloodedVessel(x)))", "all x.(Capillaries(x) -> (Tiny(x) & ThinWalledBloodedVessels(x)))", "all x y.((Capillary(x) & Ticky(y) & ThinWalled(y)) -> BloodVessel(x,y))", "exists x.(Capillary(x) & TinyThinWalledBloodedVessel(x))"]}
{"id": "eqasc_validation_283", "nl": "Lymph fluid leaks out of blood vessels into spaces between cells", "fol": "", "prediction": ["all x y z.((LymphFluid(x) & BloodVessel(y) & Space(z)) -> LeaksOutInto(x,y,z))", "all x y.((LymphFluid(x) & BloodVessel(y)) -> LeaksOutIntoSpacesBetweenCells(x,y))", "all x.(LymphFluidLeaksOutOfBloodVesselsIntoSpacesBetweenCells(x) -> LeaksIntoSpacesBetweenCells(x))", "all x.(LymphFluid(x) -> LeaksOutOfBloodVesselsIntoSpacesBetweenCells(x))", "all x y z.((LymphFluid(x) & BloodVessel(y) & SpaceBetweenCells(z)) -> LeaksOutInto(x,y,z))", "all x y.((LymphFluid(x) & BloodVessel(y)) -> LeaksOutIntoSpacesBetweenCells(x,y))", "all x.(LymphFluidLeaksOutOfBloodVesselsIntoSpacesBetweenCells(x) -> LeaksIntoSpacesBetweenCells(x))", "all x.(LymphFluid(x) -> LeaksOutOfBloodVesselsIntoSpacesBetweenCells(x))", "all x y z.((LymphFluid(x) & BloodVessel(y) & Space(z)) -> LeaksOutInto(x,y,z))", "all x y.((LymphFluid(x) & BloodVessel(y)) -> LeaksOutIntoSpacesBetweenCells(x,y))", "all x y.((LymphFluid(x) & BloodVessel(y) & Space(z)) -> LeaksOutInto(x,y,z))", "all x y z.((LymphFluid(x) & BloodVessel(y) & SpaceBetweenCells(z)) -> LeaksOutInto(x,y,z))", "all x.(LymphFloidLeaksOutOfBloodVesselsIntoSpacesBetweenCells(x) -> LeaksIntoSpacesBetweenCells(x))", "all x.(LymphFluid(x) -> LeaksOutOfBloodVesselsIntoSpacesBetweenCells(x))", "all x y z.((LymphFloid(x) & BloodVessel(y) & Space(z)) -> LeaksOutIntoInto(x,y,z))", "all x.(LymphFloidLeaksOutOfBloodVesselsIntoSpacesBetweenCells(x) -> LeaksIntoSpacesBetweenCells(x))"]}
{"id": "eqasc_validation_284", "nl": "Lymph, a fluid rich in white blood cells, flows through the lymphatic vessels.", "fol": "", "prediction": ["all x.(Lymph(x) -> (RichInWhiteBloodCells(x) & FlowsThroughLymphaticVessels(x)))", "all x y.((Lymph(x) & WhiteBloodCell(y)) -> FlowsThroughLymphaticVessels(x,y))", "(RichInWhiteBloodCells(Lymph) & FlowsThroughLymphaticVessels(Lymph))", "all x.(Lymph(x) -> (FluidRichInWhiteBloodCells(x) & FlowsThroughLymphaticVessels(x)))", "(RichInWhiteBloodCells(lymph) & FlowsThroughLymphaticVessels(lymph))", "all x y.((Lymph(x) & WhiteBloodCell(y)) -> (RichIn(x,y) & FlowsThroughLymphaticVessels(x)))", "all x y z.((Lymph(x) & WhiteBloodCell(y) & LymphaticVessel(z)) -> (RichIn(x,y) & FlowsThrough(x,z)))", "all x.(Lymph(x) -> (RichInWhiteBloodCells(x) & FlowsThroughLymphaticVessels(x)))", "all x.(Lymph(x) -> (FluidRichInWhiteBloodCells(x) & FlowsThroughLymphaticVessels(x)))", "all x y.((Lymph(x) & WhiteBlueBloodCell(y)) -> (RichIn(x,y) & FlowsThroughLymphaticVessels(x)))", "all x y z.((Lymph(x) & WhiteBloodCells(y) & LymphaticVessel(z)) -> (RichIn(x,y) & FlowsThrough(x,z)))", "all x.((Lymph(x) & RichInWhiteBloodCells(x)) -> FlowsThroughLymphaticVessels(x))", "all x y.((Lymph(x) & WhiteBlueBlueCell(y)) -> FlowsThroughLymphaticVessels(x,y))", "exists x.(Lymph(x) & RichInWhiteBloodCells(x) & FlowsThroughLymphaticVessels(x))", "all x.((Lymph(x) & RichInWhiteBloodCells(x)) -> FlowsThroughLymphaticVessels(x))", "all x.(Lymph(x) -> (RichInWhiteBloodCells(x) & FlowsThroughLymphaticVessels(x)))"]}
{"id": "eqasc_validation_285", "nl": "a fluid that leaks out of capillaries into spaces between cells is rich in white blood cells", "fol": "", "prediction": ["all x.((Fluid(x) & LeaksOutOfCapillaries(x) & SpacesBetweenCells(x)) -> RichInWhiteBloodCells(x))", "all x y.((Fluid(x) & LeaksOutOfCapillaries(x) & SpacesBetweenCells(y)) -> RichInWhiteBloodCells(x))", "all x y z.((Fluid(x) & LeaksOutOfCapillaries(x) & SpacesBetweenCells(y) & LeaksInto(x,y)) -> RichInWhiteBloodCells(x))", "all x.((Fluid(x) & LeaksOutOfCapillariesIntoSpacesBetweenCells(x)) -> RichInWhiteBloodCells(x))", "all x y z.((Fluid(x) & LeaksOutOfCapillariesIntoSpacesBetweenCells(x) & Capillaries(y) & SpacesBetweenCells(z)) -> RichInWhiteBloodCells(x))", "all x y.((Fluid(x) & LeaksOutOfCapillariesIntoSpacesBetweenCells(x) & LeaksIntoCells(x)) -> RichInWhiteBloodCells(y))", "all x y.((Fluid(x) & LeaksOutOfCapillaries(x) & SpacesBetweenCells(y)) -> RichInWhiteBloodCells(x))", "all x.((Fluid(x) & LeaksOutOfCapillaries(x) & SpacesBetweenCells(x)) -> RichInWhiteBloodCells(x))", "all x.((Fluid(x) & LeaksOutCapillariesIntoSpacesBetweenCells(x)) -> RichInWhiteBloodCells(x))", "all x y.((Fluid(x) & LeaksOutOfCathetersIntoSpacesBetweenCells(x) & LeaksIntoCells(x)) -> RichInWhiteBloodCells(y))", "all x y z.((Fluid(x) & LeaksOutOfCapillaries(x) & SpacesBetweenCells(y) & LeaksInto(x,y)) -> RichInWhiteBloodCells(x))", "all x.((Fluid(x) & LeaksOutOfCapillariesIntoSpacesBetweenCells(x)) -> RichInWhiteBloodCells(x))", "exists x.(Fluid(x) & LeaksOutOfCapillariesIntoSpacesBetweenCells(x) & RichInWhiteBloodCells(x))", "all x.((Fluid(x) & LeaksOutOfCathetersIntoSpacesBetweenCells(x)) -> RichInWhiteBloodCells(x))", "all x.((Fluid(x) & LeaksOutCapillaries(x) & SpacesBetweenCells(x)) -> RichInWhiteBloodCells(x))", "all x.((Floid(x) & LeaksOutCapillariesIntoSpacesBetweenCells(x)) -> RichInWhiteBloodCells(x))"]}
{"id": "eqasc_validation_286", "nl": "A fluid rich in protein leaks out of capillaries into spaces between cells", "fol": "", "prediction": ["all x y z.((Fluid(x) & RichInProtein(x) & Capillary(y) & SpaceBetweenCells(z)) -> LeaksOutInto(x,y,z))", "all x.((Fluid(x) & RichInProtein(x)) -> LeaksOutOfCapillariesIntoSpacesBetweenCells(x))", "all x y.((Fluid(x) & RichInProtein(x) & Capillaries(y)) -> LeaksOutIntoSpacesBetweenCells(x,y))", "all x y.((Fluid(x) & RichInProtein(x)) -> LeaksOutOfCapillariesIntoSpacesBetweenCells(x,y))", "all x y z.((Fluid(x) & RichInProtein(x) & Capillaries(y) & SpacesBetweenCells(z)) -> LeaksOutInto(x,y,z))", "all x.((Fluid(x) & RichInProtein(x)) -> LeaksOutOfCapillariesIntoSpacesBetweenCells(x))", "all x y.((Fluid(x) & RichInProtein(x) & Capillaries(y)) -> LeaksOutIntoSpacesBetweenCells(x,y))", "all x y z.((Fluid(x) & RichInProtein(x) & Capillaries(y) & SpacesBetweenCells(z)) -> LeaksOutInto(x,y,z))", "all x.((Fluid(x) & RichInProtein(x)) -> LeaksOutOfCapillariesIntoSpacesBetweenCells(x))", "all x y.((Fluid(x) & RichInProtein(x)) -> LeaksOutOfCapillariesIntoSpacesBetweenCells(x,y))", "all x y z.((Fluid(x) & RichInProtein(x) & Capillaries(y) & Space(z)) -> LeaksOutInto(x,y,z))", "all x y z.((Fluid(x) & RichInProtein(x) & Capillary(y) & Capillary(z)) -> LeaksOutIntoSpacesBetweenCells(x,y,z))", "all x.((Fluid(x) & RichInProteins(x)) -> LeaksOutOfCapillariesIntoSpacesBetweenCells(x))", "all x.((Fluid(x) & RichInProtein(x)) -> LeaksOutOfCapillariesIntoSpacesBetweenCells(x))", "all x.((Fluid(x) & RichInProtein(x)) -> LeaksOutOfCathetersIntoSpacesBetweenCells(x))", "all x.((Fluid(x) & RichInProtein(x)) -> LeaksOutOfCapillariesIntoSpacesBetweenCells(x))"]}
{"id": "eqasc_validation_287", "nl": "Capillaries connect arteries to veins .", "fol": "", "prediction": ["all x y z.((Capillary(x) & Artery(y) & Vein(z)) -> ConnectsTo(x,y,z))", "all x y.((Capillary(x) & Artery(y)) -> ConnectsToVines(x,y))", "all x.(Capillary(x) -> ConnectsArteriesToVines(x))", "all x y z.((Capillary(x) & Artery(y) & Vein(z)) -> Connects(x,y,z))", "all x y.((Capillary(x) & Artery(y)) -> ConnectsToVines(x,y))", "(all x y.((Capillary(x) & Artery(y)) -> ConnectsToVines(x,y)))", "all x.(Capillary(x) -> ConnectsArteriesToVines(x))", "all x y z.((Capillary(x) & Artery(y) & Vein(z)) -> ConnectsTo(x,y,z))", "all x y.((Capillary(x) & Artery(y)) -> ConnectsToVins(x,y))", "all x y z.((Capillary(x) & Arterie(y) & Venes(z)) -> ConnectsTo(x,y,z))", "exists x.(Cardiox(x) & ConnectsArteriesToVines(x))", "all x.(Capillary(x) -> (ConnectsArteries(x,Vins) & -ConnectsArteries(x,Vins)))", "all x.(Capillary(x) -> ConnectsArteriesToVines(x))", "all x y.((Capillary(x) & Arterie(y)) -> ConnectsToVines(x,y))", "all x.(Capillary(x) -> ConnectsArteriesToVins(x))", "all x y z.((Capillary(x) & Artery(y) & Vein(z)) -> Connects(x,y,z))"]}
{"id": "eqasc_validation_288", "nl": "Lymph is a fluid that leaks out of the connection of arteries to veins ", "fol": "", "prediction": ["all x.(Lymph(x) -> LeaksOutOfConnectionOfArteriesToVines(x))", "all x y.((Lymph(x) & ArteryConnection(y)) -> LeaksOutOfConnection(x,y))", "all x y z.((Lymph(x) & ArteryConnection(y) & VeinConnection(z)) -> LeaksOut(x,y,z))", "all x.(Lymph(x) -> (Liquid(x) & LeaksOutOfConnectionOfArteriesToVines(x)))", "(Lymph(lymph) & LeaksOutOfConnectionOfArteriesToVines(lymph))", "(LeaksOutOfConnectionOfArteriesToVines(Lymph) & LeaksOutOfVins(Lymph))", "all x y.((Lymph(x) & ArteryConnection(y)) -> LeaksOut(x,y))", "all x.(Lymph(x) -> (Fluid(x) & LeaksOutOfConnectionOfArteriesToVines(x)))", "all x.(Lymph(x) -> LeaksOutOfArcticConnectionToVines(x))", "all x y z.((Lymph(x) & ArteryConnection(y) & VeinConnection(z)) -> LeaksOutOf(x,y,z))", "all x y z.((Lymph(x) & Artery(y) & Vein(z)) -> LeaksOutOfConnection(x,y,z))", "all x.(Lymph(x) -> LeaksOutOfArboidConnectionToVines(x))", "all x y.((Lymph(x) & Arteries(y)) -> LeaksOutOfConnection(x,y))", "all x y.((Lymph(x) & ArteryConnection(y)) -> LeaksOut(x,y))", "all x.(Lymph(x) -> LeaksOutOfConnectionOfArteriesToVines(x))", "all x.(Lymph(x) -> LeaksOutOfArcticConnection(x))"]}
{"id": "eqasc_validation_289", "nl": "Any antigen that causes an allergy is called an allergen.", "fol": "", "prediction": ["all x.((Antigen(x) & CausesAllergy(x)) -> Allergic(x))", "all x.((Antigen(x) & CausesAllergy(x)) -> Allergic(x))", "all x.(CausesAllergy(x) -> Allergic(x))", "all x y.((Antigen(x) & CausesAllergy(x) & Allergen(y)) -> Allergen(x))", "all x.((Antigen(x) & CausesAllergy(x)) -> Allergen(x))", "all x.(CausesAllergy(x) -> Allergen(x))", "all x y.((Antigen(x) & CausesAllergy(x,y)) -> Allergic(x))", "all x.((Antigen(x) & CausesAllergy(x)) -> Allergic(x))", "all x.((Antigen(x) & CausesAllergy(x)) -> Allergen(x))", "all x.(CausesAllergy(x) -> Allergic(x))", "all x.(Allergy(x) -> CausesAllergy(x))", "all x.((Antigen(x) & CausesAllergie(x)) -> Allergic(x))", "all x.(CausesAllergy(x) -> Allergen(x))", "all x.((Antigen(x) & CausesAllergy(x)) -> Allergic(x))", "all x.((Antigen(x) & CausesAllergy(x)) -> Allergen(x))", "all x.((Antigen(x) & CausesAllergie(x)) -> Allergen(x))"]}
{"id": "eqasc_validation_290", "nl": "Antigens are proteins foreign to the body.", "fol": "", "prediction": ["all x.(Antigen(x) -> (Protein(x) & ForeignToBody(x)))", "all x.(Antigen(x) -> (Protein(x) & ForeignToBody(x)))", "all x y.((Antigen(x) & Body(y)) -> ForeignProtein(x,y))", "all x.(Antigen(x) -> (ProteinForeignToBody(x)))", "(FreshToBody(antigen) -> Protein(antigen,y))", "all x y z.((Antigen(x) & Protein(y) & Body(z)) -> ForeignTo(x,y,z))", "all x y.((Antigen(x) & Protein(y)) -> ForeignToBody(x,y))", "all x.(Antigen(x) -> ForeignToBodyProtein(x))", "(FreshToBody(antigen) -> Protein(antigen,protein))", "all x.(Antigen(x) -> (Protein(x) & ForeignToBody(x)))", "all x y.((Antigen(x) & Body(y)) -> ForeignProtein(x,y))", "all x.(Antigen(x) -> (ProteinFrequentToBody(x)))", "all x.(Antigen(x) -> (Protein(x) & ForeignToBody(x)))", "all x.(Antigen(x) -> ForeignToBodyProtein(x))", "all x y.((Antigen(x) & Protein(y)) -> ForeignToBody(x,y))", "all x.(Antigen(x) -> (ProteinForeignToBody(x)))"]}
{"id": "eqasc_validation_291", "nl": "Any foreign protein that causes an allergic reaction is called an allergen.", "fol": "", "prediction": ["all x.((FrenchProtein(x) & CausesAllergy(x)) -> Allergen(x))", "all x.((FreshProtein(x) & CausesAllergy(x)) -> Allergen(x))", "all x.((FrenchProtein(x) & CausesAllergy(x)) -> Allergic(x))", "all x y.((FrenchProtein(x) & CausesAllergy(x,y)) -> Allergen(x))", "all x.((FreshProtein(x) & CausesAllergy(x)) -> Allergic(x))", "all x.((ForeignProtein(x) & CausesAllergy(x)) -> Allergen(x))", "all x.(Allergen(x) -> CausesAllergy(x))", "all x y.((FrenchProtein(x) & CausesAllergy(x,y)) -> Allergic(x))", "all x.(FrenchProtein(x) -> Allergen(x))", "all x.(Allergen(x) -> (FreshProtein(x) & CausesAllergy(x)))", "all x.((ForeignProtein(x) & CausesAllergy(x)) -> Allergic(x))", "all x.((FrenchProtein(x) & CausesAllergyReaction(x)) -> Allergic(x))", "all x.((FreshProtein(x) & CausesAllergy(x)) -> Allergen(x))", "all x.((ForeignProtein(x) & CausesAllergy(x)) -> Allergen(x))", "all x.((ForeignProtein(x) & CausesAllergyReaction(x)) -> Allergen(x))", "all x.(FreshProtein(x) -> Allergen(x))"]}
{"id": "eqasc_validation_292", "nl": "Asthma attacks are caused by allergies.", "fol": "", "prediction": ["all x.(AsthmaAttack(x) -> CausedByAllergies(x))", "all x.(Asthma(x) -> CausedByAllergies(x))", "all x y.((Asthma(x) & Allergie(y)) -> CausedBy(x,y))", "AllergiesCauseAsthma(x)", "all x y.((Asthma(x) & Allergy(y)) -> CausedBy(x,y))", "all x.(AsthmaAttack(x) -> CausedByAllergies(x))", "all x y z.((Asthma(x) & Allergies(y) & Allergies(z)) -> CausedBy(x,y,z))", "all x.(Asthma(x) -> CausedByAllergies(x))", "AllergiesCauseAsthma(x)", "all x y.((Asthma(x) & Allergie(y)) -> CausedBy(x,y))", "all x.(AsthmaAttack(x) -> CausedByAllergies(x))", "AllergiesCauseAsthma(x)", "all x y.((Asthma(x) & Allergy(y)) -> CausedBy(x,y))", "all x.(Asthma(x) -> CausedByAllergies(x))", "all x.(AsthmaAttack(x) -> CausedByAllergies(x))", "all x.(Asthma(x) -> CausedByAllergies(x))"]}
{"id": "eqasc_validation_293", "nl": "Allergens can trigger asthma attacks", "fol": "", "prediction": ["all x.(Allergen(x) -> TriggersAsthmaAttacks(x))", "all x y.((Allergen(x) & AsthmaAttack(y)) -> Triggers(x,y))", "AllergensTriggerAsthmaAttacks(Allergens)", "all x.(Allergen(x) -> TriggersAsthmaAttacks(x))", "all x y z.((Allergen(x) & AsthmaAttack(y) & AsthmaAttack(z)) -> Triggers(x,y,z))", "all x.(Allergen(x) -> TriggerAsthmaAttacks(x))", "all x y.((Allergen(x) & AsthmaAttack(y)) -> TriggersAsthma(x,y))", "AllergensTriggerAsthmaAttacks(Allergens)", "all x y z.((Allergen(x) & AsthmaAttack(y) & Allergen(z)) -> TriggersAttacks(x,y,z))", "all x y.((Allergen(x) & AsthmaAttack(y)) -> Triggers(x,y))", "all x.(Allergen(x) -> TriggersAsthmaAttacks(x))", "all x y.((Allergen(x) & AsthmaAttack(y)) -> TriggersAsthmaAttacks(x,y))", "all x.(Allergen(x) -> CanTriggerAsthmaAttacks(x))", "all x.(Allergen(x) -> TriggerAsthmaAttacks(x))", "all x.(Allergen(x) -> CanTriggerAsthma(x))", "all x.(Allergen(x) -> TriggersAsthmaActions(x))"]}
{"id": "eqasc_validation_294", "nl": "Antibodies are produced to fight antigens.", "fol": "", "prediction": ["all x.(Antibody(x) -> ProducedToFightAntigens(x))", "all x y.((Antibody(x) & Antigen(y)) -> ProducedToFight(x,y))", "all x.(Antibody(x) -> (ProducedToFightAntigens(x)))", "all x y z.((Antibody(x) & Antigen(y) & Antigen(z)) -> ProducedToFight(x,y,z))", "all x y.((Antibody(x) & Antigen(y)) -> ProducedToFight(x,y))", "(all x.(Antibody(x) -> ProducedToFightAntigens(x)))", "all x.(Antibody(x) -> ProducedToFightAntigens(x))", "all x y z.((Antibody(x) & Antigen(y) & Antigen(z)) -> ProducedToFight(x,y,z))", "all x.(Antibody(x) -> (ProducedToFightAntigens(x)))", "all x y.((Antibody(x) & Antigen(y)) -> ProducedToFight(x,y))", "exists x.(Antibody(x) & ProducedToFightAntigens(x))", "all x.(Antibody(x) -> ProducedToFightAntigens(x))", "all x y.((Antibody(x) & Antigen(y)) -> ProducedToFight(x,y))", "all x.(Antibodies(x) -> ProducedToFightAntigens(x))", "all x y.((Antibody(x) & Antigen(y)) -> ProducedToFight(x,y))", "exists x.(Antibody(x) & ProducedToFightAntigens(x))"]}
{"id": "eqasc_validation_295", "nl": "Antibodies are produced to fight an allergens ", "fol": "", "prediction": ["all x y.((Antibody(x) & Allergen(y)) -> ProducedToFight(x,y))", "all x y z.((Antibody(x) & Allergen(y) & Allergen(z)) -> (ProducedToFight(x,y,z)))", "all x.(Antibody(x) -> (ProducedToFightAllergens(x) & Allergens(x)))", "all x y.((Antibody(x) & Allergen(y)) -> (ProducedToFight(x,y) & Allergen(y)))", "all x y z.((Antibody(x) & Allergen(y) & Allergen(z)) -> ProducedToFight(x,y,z))", "Allergens(antibodies) -> (ProducedToFight(antibodies,allergens)))", "all x.(Antibody(x) -> (ProducedToFightAllergens(x) & Allergens(x)))", "all x y z.((Antibody(x) & Allergen(y) & Allergen(z)) -> (ProducedToFight(x,y,z) & Allergen(y)))", "all x y.((Antibody(x) & Allergen(y)) -> ProducedToFight(x,y))", "all x y z.((Antibody(x) & allergen(y) & Allergen(z)) -> (ProducedToFight(x,y,z) & Allergen(y)))", "all x y.((Antibody(x) & allergen(y)) -> ProducedToFight(x,y))", "all x.(Antibody(x) -> (ProducedToFightAllergens(x) & Allergens(x)))", "all x.(Antibodies(x) -> (ProducedToFightAllergens(x) & Allergens(x) & Allergens(x)))", "all x y.((Antibody(x) & Allergen(y)) -> (ProducedToFight(x,y) & Allergen(z)))", "all x.(Antibody(x) -> (ProducedToFightAllergens(x) & Allergen(x) & Allergen(x)))", "all x.(Antibody(x) -> exists y.(Allergen(y) & ProducedToFight(x,y)))"]}
{"id": "eqasc_validation_296", "nl": "Many of the common allergens are pollens and dusts.", "fol": "", "prediction": ["all x.((Allergen(x) & Pollen(x) & Dust(x)) -> Common(x))", "many of the commonallergens are pollens and dusts.", "all x.((Allergen(x) & Pollen(x) & Dust(x)) -> Common(x))", "all x.(CommonAllergen(x) -> (Pollen(x) | Dust(x)))", "all x y.((Allergen(x) & Pollen(y) & Dust(y)) -> Common(x,y))", "all x.(Allergen(x) -> (Pollen(x) | Dust(x)))", "exists x.(Allergen(x) & Pollen(x) & Dust(x))", "(all x.((Allergen(x) & Pollen(x)) | Dust(x)))", "all x y.((CommonAllergen(x) & Pollen(y) & Dust(y)) -> Allergen(x,y))", "all x.((Allergen(x) & Pollen(x) & Dust(x)) -> Allergen(x))", "all x y.((Allergen(x) & Common(y)) -> (Pollen(x) | Dust(x)))", "(all x.((Allergen(x) & Pollen(x)) | Dust(x)))", "exists x.(Allergen(x) & Pollen(x) & Dust(x))", "all x.((Allergen(x) & Pollen(x) & Dust(x)) -> CommonAllergen(x))", "exists x.(Allergen(x) & Pollen(x) & Dust(x))", "exists x.(Allergen(x) & Pollen(x) & Dust(x))"]}
{"id": "eqasc_validation_297", "nl": "pollens are antigens that can cause an allergy", "fol": "", "prediction": ["all x.(Pollen(x) -> (Antigen(x) & CausesAllergy(x)))", "all x y.((Pollen(x) & Allergy(y)) -> Antigen(x,y))", "all x.(Pollen(x) -> (Antigen(x) & CanCauseAllergy(x)))", "all x y.((Pollen(x) & Allergy(y)) -> (Antigen(x,y) & CausesAllergy(x,y)))", "all x y z.((Pollen(x) & Antigen(y) & Allergy(z) & Causes(x,y,z)) -> Antigen(x))", "all x y.((Pollen(x) & Antigen(y)) -> CausesAllergy(x,y))", "all x.(Pollen(x) -> (Antigen(x) & CausesAllergy(x)))", "(all x.(Pollen(x) -> Antigen(x)))", "all x.(Pollen(x) -> (Antigen(x) & CanCauseAllergy(x)))", "all x y z.((Pollen(x) & Antigen(y) & Allergy(z) & Causes(x,z)) -> Antigen(x,y,z))", "all x.(Pollens(x) -> (Antigen(x) & CausesAllergy(x)))", "all x.(Pollen(x) -> (Antigen(x) & CausesAllergy(x)))", "all x y.((Pollen(x) & Allergy(y)) -> Antigen(x,y))", "all x.(Pollen(x) -> Antigen(x) & CausesAllergy(x))", "all x.(Pollens(x) -> (Antigen(x) & CanCauseAllergy(x)))", "all x.(Pollen(x) -> (Antigen(x) & CanCauseAllergy(x)))"]}
{"id": "eqasc_validation_298", "nl": "Many allergens can cause anaphylaxis.", "fol": "", "prediction": ["all x.(Allergen(x) -> CanCauseAnaphylaxis(x))", "all x.(Allergen(x) -> CausesAnaphylaxis(x))", "all x y.((Allergen(x) & Allergen(y)) -> CanCauseAnaphylaxis(x,y))", "many allergens can cause anaphylaxis.", "all x y.((Allergen(x) & Allergy(y)) -> CanCauseAnaphylaxis(x,y))", "all x.(Allergen(x) -> CanCauseAnaphylaxis(x))", "all x y.((Allergen(x) & Allergen(y)) -> CausesAnaphylaxis(x,y))", "all x.(Allergen(x) -> CausesAnaphylaxis(x))", "all x y.((Allergen(x) & Allergy(y)) -> CausesAnaphylaxis(x,y))", "exists x.(Allergen(x) & CanCauseAnaphylaxis(x))", "all x.(Allergen(x) -> CausesAnaphylaxis(x))", "exists x.(Allergen(x) & CanCauseAnaphylaxis(x))", "exists x.(Allergen(x) & CanCauseAnaphylaxis(x))", "exists x.(Allergen(x) & CausesAnaphylaxis(x))", "exists x.(Allergen(x) & CanCauseAnaphylaxis(x))", "exists x.(Allergen(x) & CausesAnaphylaxis(x))"]}
{"id": "eqasc_validation_299", "nl": "many antigens cause cause anaphyaxis", "fol": "", "prediction": ["all x y.((Antigen(x) & CausesCauseAnaphyaxis(x,y)) -> CausesCauseAnaphyaxis(x,y))", "all x.(Antigen(x) -> CausesCausesAnaphyaxis(x))", "all x y z.((Antigen(x) & CausesCauseAnaphyaxis(y) & Antigen(z)) -> CausesCauseAnaphyaxis(x,y,z))", "many antigens cause cause cause cause anaphyaxis(x)", "all x y.((Antigen(x) & CausesCausesAnaphyaxis(x)) -> CausesCausesAnaphyaxis(y))", "all x.(Antigen(x) -> CausesCauseAnaphyaxis(x))", "all x y z.((Antigen(x) & CausesCause(y,z) & CausesAnaphyaxis(z)) -> CausesCausesAnaphyaxis(x,y,z))", "many antigens cause cause cause anaphyaxis.", "all x y.((Antigen(x) & CauseCauseAnaphyaxis(y)) -> CausesCauseAnaphyaxis(x,y))", "(exists x.(Antigen(x) & CausesCausesAnaphyaxis(x)))", "all x.(AntigensCauseCauseAnaphyaxis(x) -> ManyAntigensCauseAnaphyaxis(x))", "(exists x.(Antigen(x) & CausesCauseAnaphyaxis(x)))", "exists x.(Antigen(x) & CausesCauseAnaphyaxis(x))", "many antigens cause cause cause cause anaphyaxis(x)", "exists x.(Antigen(x) & CausesCausesAnaphyaxis(x))", "exists x.(Antigen(x) & CausesCauseAnaphyaxis(x))"]}
{"id": "eqasc_validation_300", "nl": "Proteins foreign to the body that cause allergies are called allergens.", "fol": "", "prediction": ["all x.((Protein(x) & ForeignToBody(x) & CausesAllergies(x)) -> Allergic(x))", "all x.((Protein(x) & ForeignToBody(x) & CausesAllergies(x)) -> Allergen(x))", "all x y.((Protein(x) & ForeignToBody(x) & CausesAllergies(x)) -> Allergic(y))", "all x.((Protein(x) & ForeignToBody(x) & CausesAllergies(x)) -> Allergic(x))", "all x.((Proteins(x) & ForeignToBody(x) & CausesAllergies(x)) -> Allergics(x))", "all x y.((Protein(x) & ForeignToBody(x) & CausesAllergies(x)) -> Allergic(y))", "all x.((Protein(x) & ForeignToBody(x) & CausesAllergies(x)) -> Allergen(x))", "(all x.((Protein(x) & ForeignToBody(x) & CausesAllergies(x)) -> Allergic(x))", "all x y.((Protein(x) & ForeignToBody(x) & CausesAllergies(y)) -> Allergen(x))", "all x.((Proteins(x) & ForeignToBody(x) & CausesAllergies(x)) -> Allergens(x))", "all x.(Protein(x) -> Allergen(x))", "all x.((Protein(x) & ForeignToBody(x) & CausesAllergies(x)) -> Allergic(x))", "all x.((Protein(x) & ForeignToBody(x) & CausesAllergies(x)) -> Allergen(x))", "all x.((Protein(x) & ForeignToBody(x) & CausesAllergy(x)) -> Allergic(x))", "all x.((Protein(x) & ForeignToBody(x) & CauseAllergies(x)) -> Allergic(x))", "all x.((Protein(x) & ForeignToBody(x) & CausesAllergies(x)) -> Allergen(x))"]}
{"id": "eqasc_validation_301", "nl": "pasteurization reduces the amount of bacteria in milk", "fol": "", "prediction": ["all x y.((Pasteurization(x) & Milk(y)) -> ReducesBacteriaAmount(x,y))", "all x.(Pasteurization(x) -> ReducesBacteriaInMilk(x))", "all x y z.((Pasteurization(x) & Bacteria(y) & Milk(z)) -> ReducesAmount(x,y,z))", "(all x y.((Pasteurization(x) & Milk(y)) -> ReducesBacteriaAmount(x,y)))", "all x.(Pasteurization(x) -> ReducesBacteriaAmountInMilk(x))", "all x y.((Pasteurization(x) & Milk(y)) -> ReducesBacteriaAmount(x,y))", "all x.((Pasteurization(x) & ReducesBacteriaInMilk(x)) -> ReducesBacteriaInMilk(x))", "all x y z.((Pasteurization(x) & Bacteria(y) & Milk(z)) -> ReducesAmountInMilk(x,y,z))", "(all x.(Pasteurization(x) -> ReducesBacteriaInMilk(x)))", "all x.(Pasteurization(x) -> ReducesBacteriaInMilk(x))", "all x y.((Pasteurization(x) & Milk(y)) -> ReducesBacteriaAmount(x,y))", "all x y z.((Pasteurization(x) & Bacteria(y) & Milk(z)) -> ReducesAmount(x,y,z))", "all x.(Pasteurization(x) -> ReducesBacteriaAmount(x))", "all x y.((Pasteurization(x) & Milk(y)) -> ReducesBacteriaAmount(x,y))", "all x.(Pasteurization(x) -> ReducesAmountOfBacteriaInMilk(x))", "all x.(Pasteurization(x) -> ReducesBacteriaInMilk(x))"]}
{"id": "eqasc_validation_302", "nl": "Milk products are made into ice cream, cheese cake, and puddings.", "fol": "", "prediction": ["all x.(MilkProduct(x) -> (MadeIntoIceCream(x) | MadeIntoCheeseCake(x) | MadeIntoPuddings(x)))", "(MilkProducts(Milk) & (IceCream(M) | CheeseCake(M) | Pudding(M)))", "all x y z.((MilkProduct(x) & IceCream(y) & CheeseCake(z)) -> (MadeInto(x,y) | MadeInto(x,z)) | MadeInto(x,z)))", "(all x.(MilkProduct(x) -> (IceCream(x) | CheeseCake(x) | Pudding(x)))", "(MilkProducts(milk) & (IceCream(milk) | CheeseCake(milk) | Pudding(milk)))", "all x y.((MilkProduct(x) & IceCream(y) & CheeseCake(y)) -> Pudding(x))", "all x.(Milk(x) -> (MadeIntoIceCream(x) | MadeIntoCheeseCake(x) | MadeIntoPuddings(x)))", "all x.(MilkProduct(x) -> (MadeIntoIceCream(x) | MadeIntoCheeseCake(x) | MadeIntoPuddings(x)))", "all x y z.((MilkProduct(x) & IceCream(y) & CheeseCake(z) & Pudding(x)) -> (MadeInto(x,y) | MadeInto(x,z)))", "(MilkProducts(milk) & (IceCream(milk) | CheeseCake(milk) | Puddings(milk)))", "all x y.((MilkProduct(x) & IceCream(y) & CheeseCake(y) & Pudding(y)) -> MadeInto(x,y))", "all x.(MilkProduct(x) -> (MadeIntoIceCream(x) | MadeIntoCheeseCake(x) | MadeIntoPuddings(x)))", "exists x.(MilkProduct(x) & MadeInto(x,iceCream) & MadeInto(x,CheeseCake) & MadeInto(x,Puddings))", "all x.(MilkProduct(x) -> (MadeIntoIceCream(x) | MadeIntoCheeseCake(x) | MadeIntoPudding(x)))", "exists x.(MilkProduct(x) & MadeInto(x,iceCream,CheeseCake,Puddings))", "all x.(MilkProduct(x) -> (MadeIntoIceCream(x) | MadeIntoCheeseCake(x) | MadeIntoPuddings(x)))"]}
{"id": "eqasc_validation_303", "nl": "Pasteurization reduces the amount of bacteria in something that pudding is made from", "fol": "", "prediction": ["all x y.((Pasteurization(x) & Bacteria(y)) -> ReducesAmountInPudding(x,y))", "all x y z.((Pasteurization(x) & Bacteria(y) & Pudding(z)) -> ReducesAmountIn(x,y,z))", "all x.(Pasteurization(x) -> ReducesBacteriaInPudding(x))", "all x y.((Pasteurization(x) & Pudding(y)) -> ReducesBacteriaAmount(x,y))", "all x y z.((Pasteurization(x) & Bacteria(y) & Pudding(z)) -> ReducesAmount(x,y,z))", "all x.((Pasteurization(x) & ReducesBacteriaInPudding(x)) -> MadeFrom(x))", "(all x.(Pasteurization(x) -> ReducesBacteriaInPudding(x)))", "all x.(Pasteurization(x) -> ReducesBacteriaInPudding(x))", "all x y.((Pasteurization(x) & Bacteria(y)) -> ReducesAmount(x,y))", "(ReducesBacteriaInPudding(pasteurization) -> MadeFromPudding(pasteurization,pudding))", "all x y z.((Pasteurization(x) & Bacteria(y) & Pudding(z) & MadeFrom(x,z)) -> ReducesAmount(x,y))", "all x y.((Pastaurization(x) & Bacteria(y) & Pudding(z)) -> ReducesAmountInPudding(x,y))", "all x.(Pasteurization(x) -> ReducesBacteriaAmount(x))", "all x y.((Pasteurization(x) & Pudding(y)) -> ReducesBacteriaAmount(x,y))", "all x.(Pastaurization(x) -> ReducesBacteriaInPudding(x))", "all x.(Pasteurization(x) -> ReducesBacteriaInPudding(x))"]}
{"id": "eqasc_validation_304", "nl": "Pasteurization was discovered by the French scientist, Louis Pasteur.", "fol": "", "prediction": ["all x y.((Pasteurization(x) & FrenchScientist(y) & LouisPasteur(y)) -> Discovered(x,y))", "all x.(Pasteurization(x) -> DiscoveredByFrenchScientist(x))", "(FrenchScientist(Pasteur) & DiscoveredBy(Pasteur))", "(DiscoveredByLouisPasteur(Pasteurization) & FrenchScientist(Pasteur))", "all x.(Pasteurization(x) -> (DiscoveredBy(x,LouisPasteur) & FrenchScientist(x)))", "(DiscoversPasteurization(Pasteur) & LouisPasteur(Pasteur))", "-(FrenchScientist(Pasteur) & DiscoveredBy(Pasteur))", "all x.((Pasteurization(x) & LouisPasteur(x)) -> DiscoveredBy(x,y))", "(Lapeurization(Pasteur) & DiscoveredBy(Pasteur,FrenchScientist))", "all x y.((FrenchScientist(x) & LouisPasteur(y)) -> Pasteurization(x,y))", "Louis Pasteur, a Frenchscientist, discovered Pasteurization.", "(FrenchScientistLouisPasteur(Pasteurization) & DiscoveredBy(Pasteurization))", "(FrenchScientist(Pasteur) & DiscoveredBy(Pasteur))", "all x y.((Pasteurization(x) & FrenchScientist(y) & LouisPasteur(y)) -> DiscoveredBy(x,y))", "-(FrenchScientist(Pasteur) & LouisPasteur(Pasteur))", "All x.(Pasteurization(x) -> DiscoveredBy(x,LouisPasteur))"]}
{"id": "eqasc_validation_305", "nl": "A French scientist discovered how to reduce the amount of bacteria in milk", "fol": "", "prediction": ["all x y.((FrenchScientist(x) & Milk(y)) -> ReducesBacteriaInMilk(x,y))", "all x y z.((FrenchScientist(x) & Bacteria(y) & Milk(z)) -> ReducesAmount(x,y,z))", "all x.((FrenchScientist(x) & DiscoveredHowToReduceBacteriaInMilk(x)) -> ReducesBacteriaInMilk(x))", "(FrenchScientist(French) & DiscoveredHowToReduceBacteriaInMilk(French) & InMilk(French))", "(ReducesBacteriaInMilk(FrenchScientist(FrenchScientist,Milk) & InMilk(FrenchScientist,Milk))", "(FrenchScientist(French) & DiscoveredReducesBacteriaInMilk(French) & InMilk(French))", "all x y.((FrenchScientist(x) & Milk(y)) -> ReducesBacteriaAmount(x,y))", "all x y z.((FrenchScientist(x) & Bacteria(y) & Milk(z)) -> ReducesAmountInMilk(x,y,z))", "all x.((FrenchScientist(x) & ReducesBacteriaInMilk(x)) -> Discovered(x))", "all x y.((FrenchScientist(x) & FrenchMilk(y)) -> ReducesBacteriaInMilk(x,y))", "(FrenchScientist(fr) & DiscoveredHowToReduceBacteriaInMilk(f))", "all x y.((FrenchScientist(x) & Milk(y)) -> (ReducesBacteriaInMilk(x,y) | ReducesBacteriaInMilk(x,y)))", "all x.((FrenchScientist(x) & DiscoveredReducesBacteriaInMilk(x)) -> ReducesBacteriaInMilk(x))", "all x y z.((FrenchScientist(x) & Bacteria(y) & Milk(z)) -> ReducedInMilk(x,y,z))", "all x y z.((FrenchScientist(x) & Bacteria(y) & Milk(z) & ReducedAmountInMilk(x,y,z)) -> Discovered(x))", "all x.((FrenchScientist(x) & ReducesBacteriaInMilk(x)) -> Discovered(x))"]}
{"id": "eqasc_validation_306", "nl": "Bacteria are unicellular organisms.", "fol": "", "prediction": ["all x.(Bacteria(x) -> UnicellularOrganism(x))", "all x.(Bacteria(x) -> UnicellularOrganism(x))", "all x y.((Bacteria(x) & Organism(y)) -> Unicellular(x))", "all x.(Bacteria(x) -> UnicellularOrganism(x))", "(UnicellularOrganism(bacteria)", "(UnicellularOrganisms(bacteria)", "all x y.((Bacteria(x) & Organism(y)) -> Unicellular(x))", "all x.(Bacteria(x) -> UnicellularOrganism(x))", "all x.(Bacteria(x) -> UnicellularOrganism(x))", "all x y.((Bacteria(x) & Organism(y)) -> Unicellular(x,y))", "(UnicellularOrganism(bacteria)", "all x.(Bacteria(x) -> UnicellularOrganism(x))", "all x.(Bacteria(x) -> UnicellularOrganism(x))", "all x.(Bacteria(x) -> UnicellularOrganism(x))", "all x.(Bacteria(x) -> UnicellularOrganism(x))", "all x.(Bacteria(x) -> UnicellularOrganism(x))"]}
{"id": "eqasc_validation_307", "nl": "Pasteurization reduces the amount of unicellular organisms in milk.", "fol": "", "prediction": ["all x y.((Pasteurization(x) & Milk(y)) -> ReducesUnicellularOrganisms(x,y))", "all x.(Pasteurization(x) -> ReducesUnicellularOrganisms(x))", "all x y z.((Pasteurization(x) & Milk(y) & UnicellularOrganism(z)) -> ReducesAmount(x,y,z))", "all x.(Pasteurization(x) -> ReducesUnicellularOrganismsInMilk(x))", "(ReducesUnicellularOrganisms(pasteurization) & InMilk(pasteurization,milk))", "all x y.((Pasteurization(x) & Milk(y)) -> ReducesUnicellularOrganisms(x,y))", "all x y z.((Pasteurization(x) & Milk(y) & UnicellularOrganism(z)) -> ReducesAmount(x,y,z))", "all x y.((Pasteurization(x) & Milk(y)) -> ReducesUnicellularOrganisms(x,y))", "all x.(Pasteurization(x) -> ReducesUnicellularOrganisms(x))", "all x.(Pastorization(x) -> ReducesUnicellularOrganisms(x))", "all x.(Pastaurization(x) -> ReducesUnicellularOrganismsInMilk(x))", "all x.(Pasteurization(x) -> ReducesUnicellularOrganismsInMilk(x))", "all x y z.((Pasteurization(x) & Milk(y) & UnicellularOrganism(z)) -> ReducesAmount(x,y,z))", "all x y.((Pasteurization(x) & Milk(y)) -> ReducesUnicellularOrganisms(x,y))", "all x.(Pasteurization(x) -> ReducesUnicellularOrganisms(x))", "all x y.((Pasteurization(x) & Milk(y)) -> ReducesUnicellularOrganisms(x,y))"]}
{"id": "eqasc_validation_308", "nl": "Pasteurization destroys the bacteria in milk that cause tuberculosis.", "fol": "", "prediction": ["all x y.((Pasteurization(x) & Bacteria(y) & Milk(z) & CausesTuberculosis(y,z)) -> Disrupts(x,y,z))", "all x.(Pasteurization(x) -> (DestroysBacteriaInMilk(x) & CausesTuberculosis(x)))", "all x y z.((Pasteurization(x) & Bacteria(y) & Milk(z) & CausesTuberculosis(y,z)) -> Disrupts(x,y,z))", "all x.(Pasteurization(x) -> (DestroysBacteria(x) & CausesTuberculosis(x)))", "all x y.((Pasteurization(x) & Bacteria(y) & Milk(y)) -> (Destroys(x,y) & CausesTuberculosis(x)))", "all x y.((Pasteurization(x) & Bacteria(y) & CausesTuberculosis(y)) -> Disrupts(x,y))", "all x.((Pasteurization(x) & BacteriaInMilk(x) & CausesTuberculosis(x)) -> Disrupts(x,y))", "all x y.((Pasteurization(x) & BacteriaInMilk(y) & CausesTuberculosis(y)) -> Disrupts(x,y))", "(all x.(Pasteurization(x) -> DisruptsBacteria(x)))", "all x.((Pasteurization(x) & Bacteria(y) & Milk(z) & CausesTuberculosis(y,z)) -> Disrupts(x,y,z))", "all x y z.((Pasteurization(x) & Bacteria(y) & Milk(z) & CausesTuberculosis(y,z)) -> Disrupts(x,y,z))", "all x.(Pasteurization(x) -> (DestroysBacteriaInMilk(x) & CausesTuberculosis(x)))", "all x y z.((Pasteurization(x) & Bacteria(y) & Milk(z)) -> (DestroysBacteria(x,y,z) & CausesTuberculosis(x)))", "all x y.((Pasteurization(x) & Bacteria(y)) -> (Destroys(x,y) & CausesTuberculosis(y)))", "all x.(Pasteurization(x) -> (DestroysBacteriaInMilk(x) & CausesTuberculosis(x)))", "all x.(Pasteurization(x) -> (DestroysBacteriaInMilk(x) & CausesTuberculosis(x)))"]}
{"id": "eqasc_validation_309", "nl": "Pasteurization reduces the cause of tuberculosis in milk", "fol": "", "prediction": ["all x y.((Pasteurization(x) & Milk(y)) -> ReducesCauseOfTuberculosis(x,y))", "all x.(Pasteurization(x) -> ReducesCauseOfTuberculosisInMilk(x))", "all x y z.((Pasteurization(x) & Tuberculosis(y) & Milk(z)) -> ReducesCause(x,y,z))", "all x y.((Pasteurization(x) & Milk(y)) -> ReducesTuberculosisCause(x,y))", "(ReducesTuberculosisCauseInMilk(pasteurization) & InMilk(pasteurization))", "all x.(Pasteurization(x) -> ReducesTuberculosisCause(x))", "(all x.(Pasteurization(x) -> ReducesCauseOfTuberculosis(x)))", "all x.((Pasteurization(x) & ReducesTuberculosis(x)) -> InMilk(x))", "all x y z.((Pasteurization(x) & Tuberculosis(y) & Milk(z)) -> ReducesCause(x,y,z))", "all x y.((Pasteurization(x) & Milk(y)) -> ReducesCauseOfTuberculosis(x,y))", "all x.(Pasteurization(x) -> ReducesCauseOfTuberculosisInMilk(x))", "all x.(Pasteurization(x) -> ReducesTuberculosisCauseInMilk(x))", "all x y z.((Pasteurization(x) & Tuberculosis(y) & Milk(z)) -> ReducesCauseIn(x,y,z))", "all x y.((Pasteurization(x) & Milk(y)) -> ReducesTuberculosisCause(x,y))", "all x y.((Pasteurization(x) & Milk(y)) -> ReducesCauseOfTuberculosisInMilk(x,y))", "all x.(Pasteurization(x) -> ReducesCauseOfTuberculosis(x))"]}
{"id": "eqasc_validation_310", "nl": "Pasteurization, the killing of germs by heating, was developed by Louis Pasteur .", "fol": "", "prediction": ["all x y.((Pasteurization(x) & Germ(y)) -> (DevelopedBy(x,y) & LouisPasteur(x)))", "all x y z.((Pasteurization(x) & Germ(y) & Heat(z)) -> (DevelopedBy(x,y) & LouisPasteur(x)))", "all x.((Pasteurization(x) & KillingGermsByHeating(x)) -> LouisPasteur(x))", "(DevelopmentOfPasteurization(Pasteurization) & KillingGermsByHeating(Pasteur))", "(DevelopedByLouisPasteur(Pasteurization) & KillingGermsByHeating(Pasteur))", "all x y.((Pasteurization(x) & Germ(y)) -> (KillsByHeating(x,y) & LouisPasteur(x)))", "((Pasteurization(x) & KillingGermsByHeating(x)) -> LouisPastre(x))", "all x y z.((Pasteurization(x) & Germ(y) & Heater(z)) -> (DevelopedBy(x,y) & LouisPasteur(x)))", "all x.((Pasteurization(x) & KillingGermsByHeating(x)) -> LouisPasteur(x))", "all x y z.((Pastaurization(x) & Germ(y) & Heat(z)) -> (DevelopedByLouisPastre(x) & KillsByHeating(x,y,z)))", "all x y.((Pasteurization(x) & Germ(y)) -> (DevelopedByLouisPasteur(x) & KillsByHeating(x,y)))", "(DevelopedByLouisPasteur(Pasteurization) & KillsGermsByHeating(Pasteur))", "(DevelopedByLouisPasteur(p) & KillsGermsByHeating(p))", "all x.((Pasteurization(x) & KillingGermsByHeating(x)) -> LouisPaseur(x))", "(DevelopedByLouisPasteur(Pasteurization,Heating))", "all x.((Pasteurization(x) & KillingGermsByHeating(x)) -> LouisPastre(x))"]}
{"id": "eqasc_validation_311", "nl": "heating milk reduces the amount of bacteria", "fol": "", "prediction": ["all x y.((Milk(x) & Heating(y)) -> ReducesBacteriaAmount(x,y))", "all x.((HeatingMilk(x) & ReducesBacteriaAmount(x)) -> ReducesBacteriaAmount(x))", "all x.((Milk(x) & Heating(x)) -> ReducesBacteriaAmount(x))", "all x y z.((Milk(x) & Milk(y) & Bacteria(z) & Heating(x,y)) -> ReducesAmountOfBacteria(x,z))", "all x.(HeatingMilk(x) -> ReducesBacteriaAmount(x))", "(HeatingMilkReducesBacteriaAmount(milk) & BacteriaAmount(milk))", "all x y.((Milk(x) & Heating(y)) -> ReducesAmountOfBacteria(x,y))", "all x y.((Milk(x) & Heats(x,y)) -> ReducesBacteriaAmount(y))", "(HeatingMilkReducesBacteriaAmount(milk,bacteria) & BacteriaAmount(milk,bacteria))", "all x y.((HeatingMilk(x) & Bacteria(y)) -> ReducesAmount(x,y))", "all x y z.((Milk(x) & Milk(y) & Bacteria(z)) -> ReducesAmount(x,y,z))", "all x.((Milk(x) & Heating(x)) -> ReducesAmountOfBacteria(x))", "all x.(HeatingMilk(x) -> ReducesBacteriaAmount(x))", "all x.((HeatingMilk(x) & ReducesBacteriaAmount(x)) -> ReducesBacteriaAmount(x))", "All x.(HeatingMilk(x) -> ReducesAmountOfBacteria(x))", "all x y.((Milk(x) & Heating(x,y)) -> ReducesAmountOfBacteria(x,y))"]}
{"id": "eqasc_validation_312", "nl": "Cows produce milk.", "fol": "", "prediction": ["all x.(Cow(x) -> ProducesMilk(x))", "all x y.((Cow(x) & Milk(y)) -> Produces(x,y))", "all x.(Cow(x) -> ProducesMilk(x))", "(ProducesMilk(cow) & Cow(cow))", "all x.(Cow(x) -> ProducesMilk(x))", "all x y.((Cow(x) & Milk(y)) -> Produces(x,y))", "all x y.(Cow(x) -> ProducesMilk(x,y))", "all x.(Cow(x) -> ProducesMilk(x))", "all x y.((Cow(x) & Milk(y)) -> Produces(x,y))", "all x.(Cow(x) -> ProducesMilk(x))", "exists x.(Cow(x) & Milk(y) & Produces(x,y))", "all x.(Cow(x) -> ProducesMilk(x))", "exists x.(Cow(x) & Milk(y) & Produces(x,y))", "all x.(Cow(x) -> ProduceMilk(x))", "all x.(Cow(x) -> ProducesMilk(x))", "exists x.(Cow(x) & Produces(x,milk))"]}
{"id": "eqasc_validation_313", "nl": "pasteurization reduces the amount of bacteria in something cows produce", "fol": "", "prediction": ["all x y.((Pasteurization(x) & Cow(y)) -> ReducesBacteriaIn(x,y))", "all x y z.((Pasteurization(x) & Bacteria(y) & Cow(z)) -> ReducesAmountIn(x,y,z))", "all x.((Pasteurization(x) & ReducesBacteriaIn(x)) -> CowProduces(x))", "all x.(Pasteurization(x) -> ReducesBacteriaInCowsProduce(x))", "all x y.((Pasteurization(x) & Cow(y)) -> ReducesBacteriaAmount(x,y))", "all x.((Cow(x) & Pasteurization(x)) -> ReducesBacteriaIn(x,y))", "all x y z.((Pasteurization(x) & Bacteria(y) & Cow(z)) -> ReducesAmount(x,y,z))", "all x y.((Cow(x) & Pasteurization(y)) -> ReducesBacteriaIn(y,x))", "all x y z.((Cow(x) & Pasteurization(y) & Bacteria(z) & Produces(x,y)) -> ReducesAmount(y,z))", "all x.((Pasteurization(x) & ReducesBacteriaIn(x) & CowProduces(x)) -> ReducesBacteriaIn(x,y))", "(all x.(Pasteurization(x) -> ReducesBacteriaInCow(x)))", "all x.(Pasteurization(x) -> ReducesBacteriaIn(x,CowsProduce))", "all x y z.((Pasteurization(x) & Bacteria(y) & Cow(z)) -> ReducesAmountIn(x,y,z))", "all x y.((Pasteurization(x) & Cow(y)) -> ReducesBacteriaIn(x,y))", "all x y.((Cow(x) & Pasteurization(y)) -> ReducesBacteriaAmountIn(y,x))", "all x.(Pasteurization(x) -> ReducesBacteriaAmountInCow(x))"]}
{"id": "eqasc_validation_314", "nl": "Pasteurization is a mild heating process that kills pathogenic micro-organisms in milk.", "fol": "", "prediction": ["all x.(Pasteurization(x) -> (MildHeatingProcess(x) & KillsPathogenicMicroorganisms(x) & InMilk(x)))", "all x y.((Pasteurization(x) & Milk(y)) -> (MildHeatingProcess(x) & KillsPathogenicMicroorganisms(x,y)))", "all x y z.((Pasteurization(x) & MildHeatingProcess(y) & PathogenicMicroorganism(z)) -> KillsInMilk(x,z))", "(MildHeatingProcess(pasteurization) & KillsPathogenicMicroorganismsInMilk(pasteurization))", "all x y.((Pasteurization(x) & Milk(y)) -> KillsPathogenicMicroorganisms(x,y))", "all x.(Pasteurization(x) -> (MildHeating(x) & KillsPathogenicMicroorganisms(x) & InMilk(x)))", "all x.(Pasteurization(x) -> (MildHeatingProcess(x) & KillsPathogenicMicroorganisms(x) & InMilk(x)))", "all x.(Pastorization(x) -> (MildHeatingProcess(x) & KillsPathogenicMicroorganisms(x) & InMilk(x)))", "all x y z.((Pasteurization(x) & MildHeatingProcess(y) & PathogenicMicroorganism(z) & KillsInMilk(x,z)) -> Pasteurization(x))", "all x.(Pasteurization(x) -> (MildHeatingProcess(x) & KillsPathogenicMicroorganisms(x) & InMilk(x)))", "all x y.((Pasteurization(x) & Milk(y)) -> (MildHeatingProcess(x) & KillsPathogenicMicroorganisms(x,y)))", "all x.(Pastaurization(x) -> (MildHeatingProcess(x) & KillsPathogenicMicroorganisms(x) & InMilk(x)))", "all x.(Pasteurization(x) -> (MildHeatingProcess(x) & KillsPathogenicMicroorganismsInMilk(x)))", "all x.(Pastaurization(x) -> (MildHeating(x) & KillsPathogenicMicroorganisms(x) & InMilk(x)))", "all x y.((Pasteurization(x) & MildHeatingProcess(x) & PathogenicMicroorganisms(y)) -> KillsInMilk(x,y))", "all x y z.((Pasteurization(x) & MildHeatingProcess(y) & PathogenicMicroorganism(z) & InMilk(x,z)) -> Kills(x,z))"]}
{"id": "eqasc_validation_315", "nl": "A mild heating process reduces bacteria in milk. ", "fol": "", "prediction": ["all x.(MildHeatingProcess(x) -> ReducesBacteriaInMilk(x))", "all x y.((MildHeatingProcess(x) & Milk(y)) -> ReducesBacteria(x,y))", "all x.((HeatingProcess(x) & Mild(x)) -> ReducesBacteriaInMilk(x))", "all x.(MildHeatingProcess(x) -> ReducesBacteriaInMilk(x))", "all x y z.((MildHeatingProcess(x) & Bacteria(y) & Milk(z)) -> Reduces(x,y,z))", "all x y.((MildHeatingProcess(x) & Milk(y)) -> ReducesBacteria(x,y))", "all x.((HeatingProcess(x) & Mild(x)) -> ReducesBacteriaInMilk(x))", "all x y.((MildHeatingProcess(x) & Bacteria(y)) -> ReducesInMilk(x,y))", "all x.(MildHeatingProcess(x) -> ReducesBacteriaInMilk(x))", "all x y z.((MildHeatingProcess(x) & Bacteria(y) & Milk(z)) -> Reduces(x,y,z))", "all x y.((MildHeatingProcess(x) & Milk(y)) -> ReducesBacteria(x,y))", "all x.(MildHeating(x) -> ReducesBacteriaInMilk(x))", "all x.((HeatingProcess(x) & Mild(x)) -> ReducesBacteriaInMilk(x))", "all x.(MildHeatingProcess(x) -> ReducesBacteria(x))", "all x y.((MildHeatingProcess(x) & Milk(y)) -> ReducesBacteriaIn(x,y))", "all x.((HeatingProcess(x) & Mild(x)) -> ReducesBacteria(x))"]}
{"id": "eqasc_validation_316", "nl": "Bacteria and blue-green bacteria are prokaryotic cells.", "fol": "", "prediction": ["all x.((Bacteria(x) | BlueGreenBacteria(x)) -> ProkaryoticCell(x))", "all x y.((Bacteria(x) & BlueGreenBacteria(y)) -> ProkaryoticCell(x))", "(ProkaryoticCell(bacteria,bluegreen) & ProkaryoticCell(bacteria,bluegreen))", "(all x.((Bacteria(x) | BlueGreen(x)) & Bacteria(x)) -> ProkaryoticCell(x))", "all x.((Bacteria(x) | BlueGreenBacteria(x)) -> ProkaryoticCell(x))", "(ProkaryoticCell(bacteria) & ProkaryoticCell(blueGreenBacteria))", "all x y.((Bacteria(x) & BlueGreenBacteria(y)) -> ProkaryoticCell(x))", "all x.((Bacteria(x) & BlueGreenBacteria(x)) -> ProkaryoticCell(x))", "all x.((Bacteria(x) | BlueGreenBacteria(x)) -> ProkaryoticCell(x))", "all x.(ProkaryoticCell(x) -> (Bacteria(x) | BlueGreenBacteria(x)))", "(ProkaryoticCell(bacteria,bluegreen) & ProkaryoticCell(bacteria,bluegreen))", "all x y.((Bacteria(x) & BlueGreenBacteria(y)) -> (ProkaryoticCell(x) & ProkaryoticCell(y)))", "all x y.((Bacteria(x) & BlueGreenBacteria(y)) -> ProkaryoticCell(x))", "all x.((Bacteria(x) | BlueGreenBacteria(x)) -> ProkaryoticCell(x))", "(ProkaryoticCell(bacteria,bluegreen) & ProkaryoticCell(bacteria,bluegreen))", "all x.((Bacteria(x) | BlueGreenBacteria(x)) -> ProkaryoticCell(x))"]}
{"id": "eqasc_validation_317", "nl": "pasteurization reduces the amount of prokaryotic cells in milk", "fol": "", "prediction": ["all x y.((Pasteurization(x) & Milk(y)) -> ReducesProkaryoticCellsInMilk(x,y))", "all x.(Pasteurization(x) -> ReducesProkaryoticCellsInMilk(x))", "all x y z.((Pasteurization(x) & Milk(y) & Milk(z)) -> ReducesProkaryoticCellsInMilk(x,y,z))", "all x y.((Pasteurization(x) & Milk(y)) -> ReducesProkaryoticCells(x,y))", "all x.((Pasteurization(x) & ReducesProkaryoticCells(x)) -> MilkMilk(x))", "all x.(Pasteurization(x) -> ReducesProkaryoticCellsInMilk(x))", "all x y z.((Pasteurization(x) & Milk(y) & Milk(z)) -> ReducesProkaryoticCells(x,y,z))", "(all x.(Pasteurization(x) -> ReducesProkaryoticCellsInMilk(x)))", "all x y z.((Pasteurization(x) & Milk(y) & ProkaryoticCells(z)) -> ReducesAmountInMilk(x,y,z))", "all x y.((Pasteurization(x) & Milk(y)) -> ReducesProkaryoticCellsInMilk(x,y))", "all x.(Pasteurization(x) -> ReducesProkaryoticCellsInMilk(x))", "all x.((Pasteurization(x) & ReducesProkaryoticCells(x)) -> MilkMilk(x))", "all x.(Pasteurization(x) -> ReducesProkaryoticCells(x))", "all x y.((Pasteurization(x) & Milk(y)) -> ReducesProkaryoticCells(x,y))", "all x y.((Pasteurization(x) & Milk(y)) -> ReducesProkaryoticCellsInMilk(x,y))", "all x.(Pasteurization(x) -> ReducesProkaryoticCellsInMilk(x))"]}
{"id": "eqasc_validation_318", "nl": "Heat, including pasteurization, reduces vitamin content.", "fol": "", "prediction": ["all x.((Heat(x) & Pasteurization(x)) -> ReducesVitaminContent(x))", "all x y.((Heat(x) & Pasteurization(y)) -> ReducesVitaminContent(x,y))", "all x.((Heat(x) & Pasteurization(x)) -> ReducesVitaminContent(x))", "(all x.(HasHeat(x) -> Pasteurization(x)))", "all x y z.((Heat(x) & Pasteurization(y) & VitaminContent(z)) -> Reduces(x,y,z))", "all x y.((Heat(x) & Pasteurization(y)) -> ReducesVitaminContent(x,y))", "all x.((Heat(x) & Pasteurization(x)) -> ReducesVitaminContent(x))", "all x y.((Heat(x) & Pasteurization(y)) -> ReducesVitaminContent(x,y))", "all x.(Heat(x) -> ReducesVitaminContent(x))", "(all x.(Heat(x) -> ReducesVitaminContent(x)))", "all x.((Heat(x) & Pasteurization(x)) -> ReducesVitaminContent(x))", "(all x.(Hexagon(x) -> Pasteurization(x)))", "all x y.((Heat(x) & Pasteurization(y)) -> ReducesVitaminContent(x,y))", "all x.((Heat(x) & Pasteurization(x)) -> ReducesVitaminContent(x))", "all x.((Heat(x) & Pasteurization(x)) -> ReducesVitaminContent(x))", "all x.((Heat(x) & Pasteurization(x)) -> ReducesVitaminContent(x))"]}
{"id": "eqasc_validation_319", "nl": "Heating milk in order to reduce the amount of bacteria also reduces vitamin content.", "fol": "", "prediction": ["all x.((HeatingMilk(x) & ReducesBacteriaAmount(x)) -> ReducesVitaminContent(x))", "all x y.((HeatingMilk(x) & ReducesBacteriaAmount(x)) -> ReducesVitaminContent(y))", "all x y.((HeatingMilk(x) & Bacteria(y) & ReducesAmount(x,y)) -> ReducesVitaminContent(x))", "all x.((HeatingMilk(x) & ReducesAmountOfBacteria(x)) -> ReducesVitaminContent(x))", "(all x.((Milk(x) & ReducesBacteria(x)) -> ReducesVitaminContent(x)))", "all x y z.((HeatingMilk(x) & Bacteria(y) & Bacteria(z) & ReducesAmount(x,y,z)) -> ReducesVitaminContent(x))", "all x y.((HotsMilk(x) & ReducesBacteriaAmount(x,y)) -> ReducesVitaminContent(x,y))", "all x y.((HeatingMilk(x) & ReducesAmountOfBacteria(x)) -> ReducesVitaminContent(y))", "(HeatingMilkToReduceBacteria(x) -> ReducesVitaminContent(x))", "all x.((HeatingMilk(x) & ReducesBacteriaAmount(x)) -> ReducesVitaminContent(x))", "all x.((HeatsMilk(x) & ReducesBacteriaAmount(x)) -> ReducesVitaminContent(x))", "all x y.((WarmingMilk(x) & Bacteria(y) & ReducesAmount(x,y)) -> ReducesVitaminContent(x))", "all x.((WarmingMilk(x) & ReducesAmountOfBacteria(x)) -> ReducesVitaminContent(x))", "all x y.((HeatingMilk(x) & Bacteria(y) & ReducesAmount(x,y)) -> ReducesVitaminContent(x))", "all x.((HeatingMilk(x) & ReducesAmountOfBacteria(x)) -> ReducesVitaminContent(x))", "all x.((HeatingMilk(x) & ReducesBacteriaAmount(x)) -> ReducesVitaminContent(x))"]}
{"id": "eqasc_validation_320", "nl": "Growth is faster during infancy than it is during puberty.", "fol": "", "prediction": ["all x y.((Growth(x) & Infancy(y) & Puberty(y)) -> Faster(x,y))", "all x.((Growth(x) & Infancy(x)) -> Faster(x,Pupilhood))", "all x.((Growth(x) & Infancy(x) & Puberty(x)) -> Faster(x))", "(FasterGrowthDuringInfancy(GrowthDuringPupilhood(Growth))", "all x y.((Growth(x) & Infancy(y) & Puberty(z)) -> Faster(x,y,z))", "(FasterGrowthDuringInfancy (GrowthDuringPupilhood) & FasterGrowthDuringPupilhood(GrowthDuringPupilhood))", "(FasterGrowthDuringInfancy(Growth) & FasterDuringPupilhood(GrowthDuringPupilhood(GrowthDuringInfancy))", "(FasterGrowthDuringInfancy (GrowthDuringPuberty) & FasterDuringPuberty(GrowthDuringInfancy))", "all x y z.((Growth(x) & Infancy(y) & Puberty(z)) -> Faster(x,y,z))", "all x y.((Growth(x) & Infancy(y) & Puberty(y)) -> Faster(x,y))", "all x.((Growth(x) & Infancy(x)) -> Faster(x,Pupidy))", "all x y.((Infancy(x) & Puberty(y)) -> FasterGrowth(x,y))", "all x y.((Growth(x) & Infancy(y)) -> Faster(x,y))", "all x.((Growth(x) & Infancy(x) & Puberty(x)) -> Faster(x,Infancy))", "all x y.((Growth(x) & Infancy(x,y) & Puberty(y)) -> Faster(x,y))", "all x.((Growth(x) & InFancy(x) & Puberty(x)) -> Faster(x))"]}
{"id": "eqasc_validation_321", "nl": "Physiological stresses can relate to changes in growth size, for example.", "fol": "", "prediction": ["all x.(PhysiologicalStress(x) -> (RelatedToChangeInGrowthSize(x) & For example(x)))", "all x y.((PhysiologicalStress(x) & GrowthSize(y)) -> RelatesTo(x,y))", "all x.(PhysiologicalStress(x) -> (RelatedToChangesInGrowthSize(x) & For example(x)))", "(all x.(PhysiologicalStress(x) -> ChangesInGrowthSize(x)))", "all x y z.((PhysiologicalStress(x) & GrowthSize(y) & GrowthSize(z)) -> Relationship(x,y,z))", "all x y.((PhysiologicalStress(x) & GrowthSize(y)) -> Relational(x,y))", "all x.((PhysiologicalStress(x) & GrowthSize(x)) -> Relational(x))", "all x.(PhysiologicalStress(x) -> (RelatesToChangesInGrowthSize(x) & For example(x)))", "(all x.(PhysiologicalStress(x) -> ChangesInGrowthSize(x)))", "all x.(PhysiologicalStress(x) -> (RelatedToChangeInGrowthSize(x) & ForGrowthSize(x)))", "all x y z.((PhysiologicalStress(x) & GrowthSize(y) & GrowthSize(z)) -> RelatesTo(x,y,z))", "all x y.((PhysiologicalStress(x) & GrowthSize(y)) -> RelatesTo(x,y))", "all x.(PhysiologicalStress(x) -> (RelatesToGrowthSize(x) & ForGrowthSizeChange(x)))", "all x y.((PhysiologicalStress(x) & GrowthSize(y)) -> Relationship(x,y))", "exists x.(PhysiologicalStress(x) & ChangesInGrowthSize(x))", "all x.(PhysiologicalStress(x) -> (RelatesToChangesInGrowthSize(x)))"]}
{"id": "eqasc_validation_322", "nl": "Changes in size are faster during infancy than during puberty", "fol": "", "prediction": ["all x y.((ChangeInSize(x) & Infancy(y) & Puberty(y)) -> FasterChangeInSize(x,y))", "all x y.((SizeChange(x) & Infancy(y) & Puberty(y)) -> FasterChangeInSize(x,y))", "all x.((SizeChange(x) & Infancy(x) & Puberty(x)) -> FasterChangeInSize(x))", "(ChangesInSizeFasterDuringInfancy(x) & FasterDuringPupitery(x))", "all x y z.((SizeChange(x) & Infancy(y) & Puberty(z)) -> FasterChangeInSize(x,y,z))", "all x.((ChangeInSize(x) & InFancy(x) & Puberty(x)) -> FasterChangeInSize(x,Infancy,Puberty))", "all x y.((ChangeInSize(x) & Infancy(y) & Puberty(z)) -> FasterChangeInSize(x,y,z))", "(SizeChangesFasterDuringInfancy(x) & FasterDuringPupitery(x))", "(FasterSizeChangesDuringInfancy(x) & FasterSizeChangesDuringPupitery(x))", "all x y.((SizeChange(x) & Infancy(y) & Puberty(z)) -> FasterChangeInSize(x,y,z))", "(fasterSizeChangesDuringInfancy(x) & FasterSizeChangesDuringPupitery(x))", "all x.((SizeChange(x) & Infancy(x) & Puberty(x)) -> FasterChangeInSize(x))", "(ChangesInSizeFasterDuringInfancy(x) & FasterDuringPupilhood(x))", "all x y.((SizeChange(x) & Infancy(y) & Puberty(y)) -> FasterChange(x,y))", "all x.((SizeChange(x) & Infancy(x) & Puberty(x)) -> FasterChangeInSize(x,Infancy))", "all x y.((SizeChange(x) & Infancy(y) & Puberty(z)) -> Faster(x,y,z))"]}
{"id": "eqasc_validation_323", "nl": "Humans experience their fastest growth rate during fetal development and early infancy.", "fol": "", "prediction": ["all x.(Human(x) -> (FetalDevelopment(x) & EarlyInfancy(x)))", "all x y.((Human(x) & FetalDevelopment(y) & EarlyInfancy(x,y)) -> FastestGrowthRate(x,y))", "(FetalDevelopment(Human) & EarlyInfancy(Human) -> FastestGrowthRate(Human,Fetal))", "all x.(Human(x) -> (FetalDevelopment(x) & EarlyInfancy(x)))", "all x.((Human(x) & FetalDevelopment(x) & EarlyInfancy(x)) -> FastestGrowthRate(x))", "all x.(Human(x) -> (ExperiencesFastGrowthRate(x) & DuringFetalDevelopment(x) & DuringEarlyInfancy(x)))", "all x y.((Human(x) & FetalDevelopment(y) & EarlyInfancy(x,y)) -> FastestGrowthRate(x,y))", "(FetalDevelopment(Human) & EarlyInfancy(Human) -> FastestGrowthRate(Human,Fetal))", "all x y z.((Human(x) & FetalDevelopment(y) & EarlyInfancy(z)) -> FastestGrowthRate(x,y,z))", "all x.(Human(x) -> (FetalDevelopment(x) & EarlyInfancy(x)))", "all x y.((Human(x) & FetalDevelopment(y) & EarlyInfancy(y)) -> FastestGrowthRate(x,y))", "all x.(Human(x) -> (FetalDevelopment(x) & EarlyInfancy(x)))", "all x.(Human(x) & FastestGrowthRate(x,fetalDevelopment,EarlyInfancy))", "all x y.((Human(x) & FetalDevelopment(y) & EarlyInfancy(z)) -> FastestGrowthRate(x,y,z))", "all x.(Human(x) -> (FetalDevelopment(x) & EarlyInfancy(x)))", "all x.(Human(x) -> (FetalDevelopment(x) & EarlyInfancy(x)))"]}
{"id": "eqasc_validation_324", "nl": "Growth is faster during fetal development than it is during puberty.", "fol": "", "prediction": ["all x y.((FetalDevelopment(x) & Puberty(y)) -> FasterGrowth(x,y))", "all x.((FetalDevelopment(x) & Puberty(x)) -> FasterGrowth(x))", "(FetalDevelopment(x) & Puberty(x))", "(FetalDevelopment(Growth) & Puberty(Growth))", "all x y.((FetalDevelopment(x) & Puberty(y)) -> FasterGrowth(x,y))", "all x.((Growth(x) & FetalDevelopment(x) & Puberty(x)) -> Faster(x,FetalDevelopment))", "all x.((FetalDevelopment(x) & Puberty(x)) -> FasterGrowth(x))", "all x y z.((FetalDevelopment(x) & Puberty(y) & FetalDevelopment(z) & Faster(x,z)) -> Faster(x,y,z))", "(FetalDevelopment(x) & Puberty(x))", "all x y.((FetalDevelopment(x) & Puberty(y)) -> FasterGrowth(x,y))", "all x.((FetalDevelopment(x) & Puberty(x)) -> FasterGrowth(x))", "(FetalDevelopment(Growth) & Puberty(Growth))", "all x y.((FetalDevelopment(x) & Puberty(y)) -> FasterGrowth(x,y))", "all x.((FetalDevelopment(x) & Puberty(x)) -> FasterGrowth(x))", "all x y.((FetalDevelopment(x) & Puberty(y)) -> FasterGrowth(x,y))", "all x y.((FetalDevelopment(x) & Puberty(y)) -> FasterGrowth(x,y))"]}
{"id": "eqasc_validation_325", "nl": "For many, adolescence is synonymous with puberty.", "fol": "", "prediction": ["all x.(Adolescence(x) -> Puberty(x))", "all x y.((Adolescence(x) & Puberty(y)) -> Synonym(x,y))", "all x.((Adolescence(x) & Puberty(x)) -> Synonym(x))", "for many, adolescence is synonymous with puberty.", "all x.(Adolescence(x) -> Puberty(x))", "(all x.(Adolescence(x) -> Puberty(x)))", "all x y.((Adolescence(x) & Puberty(y)) -> Synonym(x,y))", "(all x.(Adolescence(x) -> Puberty(x)))", "all x.(Adolescence(x) -> Puberty(x))", "all x y.((Adolescence(x) & Puberty(y)) -> Synonym(x,y))", "exists x.(Adolescence(x) & ForMany(x) & Synonym(x,puberty))", "(all x.(Adolescence(x) -> Puberty(x)))", "all x.(Adolescence(x) -> Puberty(x))", "exists x.(Adolescence(x) & ForMany(x) & Synonym(x,puberty))", "(all x.(Adolescence(x) -> Puberty(x)))", "exists x.(Adolescence(x) & Synonym(x,puberty))"]}
{"id": "eqasc_validation_326", "nl": "growth is faster during infancy than adolescence", "fol": "", "prediction": ["all x y.((Infancy(x) & Adolescence(y)) -> FasterGrowth(x,y))", "all x y z.((Infancy(x) & Adolescence(y) & Infancy(z)) -> FasterGrowth(x,y,z))", "all x.((Growth(x) & Infancy(x) & Adolescence(x)) -> FasterGrowth(x))", "all x y.((Infancy(x) & Adolescence(y)) -> FasterGrowth(x,y))", "all x.((GrowthFasterDuringInfancy(x) & FasterDuringAdolescence(x)) -> FasterDuringInfancy(x))", "(FasterGrowthDuringInfancy(GrowthDuringAdolescence(GrowthDuringInfancy) & FasterDuringAdolescence(GrowthDuringAdolescence(GrowthDuringAdolescence))", "all x y z.((Infancy(x) & Adolescence(y) & Growth(z)) -> FasterGrowth(x,z))", "(FasterGrowthDuringInfancy(infancy) & FasterGrowthDuringAdolescence(infancy))", "all x.((Growth(x) & Infancy(x) & Adolescence(x)) -> FasterGrowth(x))", "(FasterGrowthDuringInfancyThanAdolescence(GrowthDuringInfancy))", "all x.((Infancy(x) & Adolescence(x)) -> FasterGrowth(x))", "all x y.((Infancy(x) & Adolescence(y)) -> FasterGrowth(x,y))", "all x.((GrowthDuringInfancy(x) & GrowthDuringAdolescence(x)) -> Faster(x,Infancy,Adolescence))", "all x y z.((Infancy(x) & Adolescence(y) & Infancy(z)) -> FasterGrowthThanAdolescence(x,y,z))", "all x y.((Infancy(x) & Adolescence(y)) -> FasterGrowthDuring(x,y))", "all x y.((Infancy(x) & Adolescence(y)) -> FastGrowth(x,y))"]}
{"id": "eqasc_validation_327", "nl": "During infancy, babies learn whether to trust the world.", "fol": "", "prediction": ["all x.((Baby(x) & Infancy(x)) -> LearnsToTrustWorld(x))", "all x y.((Baby(x) & Infancy(y)) -> LearnsToTrust(x,y))", "all x.(Infancy(x) -> (Baby(x) & LearnsToTrustWorld(x)))", "all x.((Baby(x) & Infancy(x)) -> LearnsToTrustWorld(x))", "all x y z.((Baby(x) & Infancy(y) & World(z)) -> LearnsToTrust(x,y,z))", "all x y.((Baby(x) & Infancy(y)) -> LearnsToTrustWorld(x,y))", "all x y.((Baby(x) & Infancy(y)) -> (LearnsToTrust(x,y) | LearnsToTrust(x,y)))", "all x y.((Bird(x) & Infancy(y)) -> LearnsToTrustWorld(x,y))", "(all x.(Infancy(x) -> LearnsToTrustWorld(x)))", "all x.(Infancy(x) -> LearnsToTrustWorld(x))", "all x.((Baby(x) & Infancy(x)) -> LearnsWhetherToTrustWorld(x))", "all x.(Infancy(x) -> (BabyLearnsToTrustWorld(x)))", "(all x.(Infancy(x) -> LearnsToTrustWorld(x)))", "all x y.((Baby(x) & Infancy(y) & LearnsToTrust(x,y)) -> TrustsWorld(x))", "all x.((Baby(x) & Infancy(x)) -> LearnsToTrustWorld(x))", "all x.(Infancy(x) -> LearnsToTrustWorld(x))"]}
{"id": "eqasc_validation_328", "nl": "babies grow faster than they do later during puberty", "fol": "", "prediction": ["all x y.((Baby(x) & Puberty(y)) -> GrowsFasterThan(x,y))", "all x.((Baby(x) & Puberty(y)) -> GrowsFasterThan(x,y))", "all x y z.((Baby(x) & Puberty(y) & Puberty(z)) -> GrowsFasterThan(x,y,z))", "all x.(Baby(x) -> (GrowsFaster(x) & GrowsFaster(x) & Puberty(x)))", "all x y.((Baby(x) & Puberty(y)) -> GrowFasterThan(x,y))", "all x.((Baby(x) & Puberty(x)) -> GrowFasterThan(x,Puberty))", "(GrowFasterThanPupberty(baby) & LaterDuringPupberty(baby))", "(GrowFaster(baby) & GrowFaster(baby,puberty))", "all x y.((Bird(x) & Puberty(y)) -> GrowsFasterThan(x,y))", "all x y z.((Baby(x) & Puberty(y) & Puberty(z)) -> GrowsFasterThan(x,y,z))", "all x.(Baby(x) -> GrowsFasterThanPuberty(x))", "all x y z.((Baby(x) & Puberty(y) & Puberty(z)) -> (GrowsFaster(x,y) & GrowsFaster(x,z)))", "all x.((Baby(x) & Puberty(x)) -> GrowsFaster(x))", "all x y.((Baby(x) & Puberty(y)) -> GrowFasterThan(x,y))", "all x.(Baby(x) & GrowFasterThanPuberty(x))", "all x.((Baby(x) & Puberty(x)) -> GrowFaster(x))"]}
{"id": "eqasc_validation_329", "nl": "Infancy ends with weaning, usually around year 3.", "fol": "", "prediction": ["all x.(InfancyEndsWithWeaning(x) -> (AroundYear3(x) & UsuallyAroundYear3(x)))", "all x y.((Infancy(x) & Weaning(y)) -> EndsWith(x,y))", "all x.(Infancy(x) -> Weaning(x))", "all x y z.((Infancy(x) & Weaning(y) & Year3(z)) -> EndsWith(x,y,z))", "all x.(InfancyEndsWithWeaning(x) -> (InfancyEndsWithWeaning(x) & UsuallyAroundYear3(x)))", "(EndsWithWeaning(infancy) & UsuallyAroundYear3(infancy))", "(EndsInfancyWithWeaning(infancy) & Year3(infancy))", "(EndsInfancy(infancy) & Weaning(infancy) & UsuallyAroundYear3(infancy))", "all x.((Infancy(x) & Weaning(x)) -> EndsWith(x,y))", "all x y z.((Infancy(x) & Weaning(y) & Year(z)) -> EndsWith(x,y,z))", "all x y.((Infancy(x) & Weaning(y)) -> EndsWith(x,y))", "(EndsWithWeaning(Infancy) & UsuallyAroundYear3(Infancy))", "all x.(Infancy(x) -> Weaning(x))", "all x.(InfancyEndsWithWeaning(x) -> Year3(x))", "all x y.((Infancy(x) & Weaning(y)) -> EndsWith(x,y))", "all x.(InfancyEndsWithWeaning(x) -> (Year3) | Year3(x)))"]}
{"id": "eqasc_validation_330", "nl": "Growth is faster from ages 0 to 3 than it is during puberty", "fol": "", "prediction": ["all x y.((Growth(x) & Age(y) & Age(y) & Age(y)) -> FasterFrom0To3(x,y))", "(GrowthFasterFrom0To3ThanPupberty(GrowthDuringPupberty(GrowthDuringPupberty(GrowthDuringPupberty(GrowthDuringPupberty(GrowthDuringPupberty(GrowthDuringPupberty(GrowthDuringPupberty(GrowthDuringPupberty(GrowthDuringPupberty(GrowthDuringPupberty(GrowthDuringPupberty(GrowthDuringPupberty(GrowthDuringPupberty(GrowthDuringPupberty(GrowthDuringPupberty(GrowthDuringPupberty(GrowthFromPupberty(GrowthFromPupberty)))))", "all x y z.((Growth(x) & Age(y) & Age(z) & Age(z) & Age(y,z)) -> FasterFrom0To3(x,y,z))", "all x.((Growth(x) & Ages0To3(x)) -> FasterThanPuberty(x))", "all x y.((Growth(x) & Age(y) & Age(y)) -> FasterFrom0To3(x,y))", "(GrowthFasterFromAge(x,0,3) & FasterDuringPupilhood(x,3))", "(FasterGrowthFromAge0To3(Growth) & FasterDuringPupilhood(Growth))", "all x y.((Growth(x) & Age(y) & Age(z) & 0To3(y)) -> FasterFromTo(x,y,z))", "all x.((GrowthFasterFromAge(x,0,3) & Puberty(x)) -> FasterFromAgeToGrowth(x,0,3))", "all x y z.((Growth(x) & Age(y) & Age(z) & Age(z) & Age(z) & Age(y,z)) -> FasterFrom0To3(x,y,z))", "all x.((Growth(x) & Ages0To3(x)) -> FasterDuringPupilhood(x))", "(GrowthFasterFromAge(x,0,3) & FasterDuringPupilhood(x,0,3))", "all x y.((Growth(x) & Age(y) & Age(y,0,3)) -> FasterFromTo(x,y))", "all x y.((Growth(x) & Ages(y) & Age(z) & 0To3(x,y)) -> FasterDuringPupilhood(x,z))", "(GrowthFasterFrom0To3ThanPupery(Growth(Growth))", "all x.((GrowthFasterFromAge(x,0,3) & Puberty(x)) -> FasterFromAgeToGrowth(x,0,3))"]}
{"id": "eqasc_validation_331", "nl": "Patients frequently die in the neonatal period or in early infancy.", "fol": "", "prediction": ["all x.(Patient(x) -> (NeonatalPeriod(x) | EarlyInfancy(x)))", "all x y.((Patient(x) & (NeonatalPeriod(y) | EarlyInfancy(y))) -> DiesIn(x,y))", "all x.(Patient(x) -> (DiesInNeonatalPeriod(x) | DiesInEarlyInfancy(x)))", "all x.((Patient(x) & (NeonatalPeriod(x) | EarlyInfancy(x))) -> DiesIn(x,neonatal))", "(exists x.(Patient(x) & (NeonatalPeriod(x) | EarlyInfancy(x))) & DiesIn(x,neonatal))", "all x.(Patient(x) -> (NeonatalPeriod(x) | EarlyInfancy(x)))", "all x.(Patient(x) -> (FrequentDeath(x,NeonatalPeriod) | EarlyInfancy(x)))", "all x.(Patient(x) -> (DeathsInNeonatalPeriod(x) | DeathsInEarlyInfancy(x)))", "(exists x.(Patient(x) & (NeonatalPeriod(x) | EarlyInfancy(x))) -> DiesIn(x,NeonatalPeriod))", "all x y.((Patient(x) & (NeonatalPeriod(y) | EarlyInfancy(y))) -> DiesIn(x,y))", "all x.((Patient(x) & (NeonatalPeriod(x) | EarlyInfancy(x))) -> DiesIn(x,neonatal))", "all x y.((Patient(x) & (NeonatalPeriod(y) | EarlyInfancy(y))) -> DiesIn(x,y))", "all x.((Patient(x) & (NeonatalPeriod(x) | EarlyInfancy(x))) -> DiesIn(x,NeonatalPeriod))", "all x.(Patient(x) -> (NeonatalPeriod(x) | EarlyInfancy(x)))", "all x y.((Patient(x) & (NeonatalPeriod(y) | EarlyInfancy(y))) -> DiesIn(x,y))", "all x.(Patient(x) -> (DiesInNeonatalPeriod(x) | DiesInEarlyInfancy(x)))"]}
{"id": "eqasc_validation_332", "nl": "Growth is faster during the neonatal period than it is during puberty", "fol": "", "prediction": ["all x y.((NeonatalPeriod(x) & Puberty(y)) -> FasterGrowth(x,y))", "(fasterGrowthDuringNeonatalPeriod(x) & FasterGrowthDuringPuperhood(x))", "all x y.((Growth(x) & NeonatalPeriod(y) & Puberty(y)) -> Faster(x,y))", "all x y z.((NeonatalPeriod(x) & Puberty(y) & Growth(z)) -> FasterGrowth(x,z))", "all x.((Growth(x) & NeonatalPeriod(x) & Puberty(x)) -> FasterGrowth(x,neonatal))", "all x y.((NeonatalPeriod(x) & Puberty(y)) -> FasterGrowth(x,y))", "(FasterGrowthDuringNeonatalPeriod(neonatal) & FasterGrowthDuringPupery(neonatal))", "all x y.((Growth(x) & NeonatalPeriod(y) & Puberty(y)) -> Faster(x,y))", "all x.((NeonatalPeriod(x) & Puberty(x)) -> FasterGrowth(x))", "all x.((GrowthFasterDuringNeonatalPeriod(x) & FasterDuringPupilhood(x)) -> FasterDuringPupilhood(x))", "(FasterGrowthDuringNeonatalPeriod(neonatal) & FasterGrowthDuringPupihood(neonatal))", "(fasterGrowthDuringNeonatalPeriod(x) & FasterGrowthDuringPuperhood(x))", "(GrowthFasterDuringNeonatalPeriod (NeonatalPeriod) & FasterDuringPuperhood(NeonatalPeriod))", "all x y z.((NeonatalPeriod(x) & Puberty(y) & Growth(z)) -> FasterGrowth(x,y,z))", "(FasterGrowthDuringNeonatalPeriod(neonatal) & FasterGrowthDuringPuperhood(neonatal))", "all x y.((NeonatalPeriod(x) & Puberty(y)) -> FasterGrowth(x,y))"]}
{"id": "eqasc_validation_333", "nl": "Breasts develop during puberty .", "fol": "", "prediction": ["all x.(Breast(x) -> DevelopsDuringPuberty(x))", "all x y.((Breast(x) & Puberty(y)) -> DevelopsDuring(x,y))", "(all x.(Breast(x) -> Puberty(x)))", "all x.(Breast(x) -> DevelopsDuringPupilhood(x))", "all x y z.((Breast(x) & Puberty(y) & Puberty(z)) -> DevelopsDuring(x,y,z))", "all x.(Break(x) -> (DevelopsDuringPupilhood(x) & Breasts(x)))", "all x y.((Breast(x) & Puberty(y)) -> DevelopsDuring(x,y))", "(all x.(Breast(x) -> Puberty(x)))", "all x y.((Breast(x) & Puberty(y)) -> DevelopsDuring(x,y))", "all x y z.((Breast(x) & Puberty(y) & Puberty(z)) -> DevelopsDuring(x,y,z))", "all x.(Break(x) -> (DevelopsDuringPuberty(x) & Breasts(x)))", "all x.(Breast(x) -> DevelopsDuringPuberty(x))", "(all x.(Breast(x) -> Puberty(x)))", "all x y.((Break(x) & Puberty(y)) -> DevelopsDuring(x,y))", "exists x.(Breast(x) & Puberty(x))", "all x.(Breast(x) -> DevelopsDuringPupilhood(x))"]}
{"id": "eqasc_validation_334", "nl": "Growth is faster in infancy than it is in the time when breasts grow.", "fol": "", "prediction": ["all x y.((Infancy(x) & BreastGrowth(y)) -> FasterGrowth(x,y))", "all x.((Growth(x) & Infancy(x) & BreastGrowth(x)) -> Faster(x))", "all x y.((Infancy(x) & Breasts(y)) -> FasterGrowth(x,y))", "all x.((Growth(x) & InInfancy(x) & BreastGrowth(x)) -> Faster(x))", "all x y.((Growth(x) & Infancy(y) & BreastGrowth(y)) -> Faster(x,y))", "all x.((GrowthInInfancy(x) & GrowthInBreasts(x)) -> Faster(x))", "(FasterGrowthInInfancy(GrowthInBreasts) -> FasterGrowthInInfancy(GrowthInBreasts))", "(FasterInInfancy(Growth) & FasterInBreasts(Growth))", "all x.((Growth(x) & InFancy(x) & InBreastGrowth(x)) -> Faster(x))", "all x y z.((Growth(x) & Infancy(y) & Breasts(z)) -> Faster(x,y,z))", "all x.((GrowthInInfancy(x) & BreastGrowthInfancy(x)) -> Faster(x))", "all x y.((Infancy(x) & BreastGrowth(y)) -> FasterGrowth(x,y))", "(FasterGrowthInInfancy(Growth(Infancy) & FasterGrowthInBreasts(Infancy))", "all x y.((Growth(x) & Infancy(y) & Breasts(z)) -> Faster(x,y,z))", "(FasterGrowthInInfancy(GrowthInBreasts))", "all x.((Infancy(x) & BreastGrowth(x)) -> FasterGrowth(x))"]}
{"id": "eqasc_validation_335", "nl": "Adolescence begins with puberty.", "fol": "", "prediction": ["all x.(Adolescence(x) -> Puberty(x))", "all x y.((Adolescence(x) & Puberty(y)) -> StartsWith(x,y))", "(EndsWithPuberty(adolescence) -> StartsWithPuberty(adolescence))", "-(Adolescence(a) & Puberty(b))", "all x.(Adolescence(x) -> Puberty(x))", "(Adolescence(a) & Puberty(b))", "all x.((Adolescence(x) & Puberty(x)) -> StartsWith(x,Puberty))", "all x y.((Adolescence(x) & Puberty(y)) -> BeginsWith(x,y))", "all x.(Adolescence(x) -> StartsWithPuberty(x))", "all x.(Adolescence(x) -> Puberty(x))", "all x.((Adolescence(x) & Puberty(x)) -> StartsWith(x,y))", "all x y.((Adolescence(x) & Puberty(y)) -> StartsWith(x,y))", "all x y.((Adolescence(x) & Puberty(y)) -> BeginsWith(x,y))", "all x.(Adolescence(x) -> Puberty(x))", "all x.(Adolescence(x) -> StartsWithPupilhood(x))", "all x.(Adolescent(x) -> StartsWithPuberty(x))"]}
{"id": "eqasc_validation_336", "nl": "Growth is faster in infancy than in adolescence.", "fol": "", "prediction": ["all x y.((Infancy(x) & Adolescence(y)) -> FasterGrowth(x,y))", "all x.((Growth(x) & InInfancy(x)) -> FasterInAdolescence(x))", "(FasterGrowthInInfancy(GrowthInAdolescence(GrowthInInfancy) & FasterGrowthInAdolescence(GrowthInAdolescence))", "all x.((Infancy(x) & Adolescence(x)) -> FasterGrowth(x))", "all x y.((Infancy(x) & Adolescence(y)) -> FasterGrowth(x,y))", "all x.((Growth(x) & Infancy(x) & Adolescence(x)) -> Faster(x,Infancy))", "(FasterGrowthInFancy(x) & FasterGrowthInAdolescence(x))", "all x y z.((Infancy(x) & Adolescence(y) & Infancy(z)) -> FasterGrowth(x,y,z))", "all x.((GrowthInInfancy(x) & GrowthInAdolescence(x)) -> Faster(x,Infancy))", "(FasterGrowthInInfancy (infancy) & FasterGrowthInAdolescence(adolescence))", "all x y.((Infancy(x) & Adolescence(y)) -> FasterGrowth(x,y))", "(FasterGrowthInInfancy(GrowthInAdolescence(GrowthInInfancy) & FasterGrowthInAdolescence(GrowthInAdolescence))", "all x.((Infancy(x) & Adolescence(x)) -> FasterGrowth(x))", "all x y.((Infancy(x) & Adolescence(y)) -> FasterGrowth(x,y))", "all x y.((Infancy(x) & Adolescence(y)) -> FasterGrowth(x,y))", "all x y.((Infancy(x) & Adolescence(y)) -> FasterGrowth(x,y))"]}
{"id": "eqasc_validation_337", "nl": "a seismometer is used to measure the strength or magnitude of an earthquake", "fol": "", "prediction": ["all x y.((Seismometer(x) & Earthquake(y)) -> MeasuresStrengthOrMagnitude(x,y))", "all x.(Seismometer(x) -> (MeasuresStrengthOrMagnitudeOfEarthquake(x) | MeasuresMagnitudeOfEarthquake(x)))", "all x y z.((Seismometer(x) & Earthquake(y) & (Strength(z) | Magnitude(z))) -> Measures(x,y,z))", "all x.(Seismometer(x) -> MeasuresStrengthOrMagnitudeOfEarthquake(x))", "all x y.((Seismometer(x) & Earthquake(y)) -> MeasuresStrengthOrMagnitude(x,y))", "all x y.((Seismometer(x) & Earthquake(y)) -> (MeasuresStrengthOrMagnitude(x,y) | MeasuresMagnitude(x,y)))", "all x.(Seismometer(x) -> (MeasuresStrengthOrMagnitudeOfEarthquake(x) | MeasuresMagnitudeOfEarthquake(x)))", "all x y z.((Seismometer(x) & Earthquake(y) & (Strength(z) | Magnitude(z))) -> Measures(x,y,z))", "all x y z.((Seismometer(x) & Earthquake(y) & Strength(z)) | Magnitude(z)) -> Measures(x,y,z))", "all x.(Seismometer(x) -> MeasuresStrengthOrMagnitudeOfEarthquake(x))", "all x.(Seismometer(x) -> (MeasuresStrengthOrMagnitude(x) & Earthquake(x)))", "all x.(Seismometer(x) -> MeasuresStrengthOrMagnitudeOfEarthquake(x))", "all x y z.((Seismometer(x) & Earthquake(y) & (Strength(z) | Magnitude(z))) -> Measures(x,y,z))", "all x y.((Seismometer(x) & Earthquake(y)) -> MeasuresStrengthOrMagnitude(x,y))", "all x.(Seismometer(x) -> MeasuresStrengthOrMagnitudeOfEarthquake(x))", "exists x.(Seismometer(x) & MeasuresStrengthOrMagnitude(x) & Earthquake(x))"]}
{"id": "eqasc_validation_338", "nl": "The seismometer will check for seismic activity.", "fol": "", "prediction": ["all x.(Seismometer(x) -> ChecksSeismicActivity(x))", "(ChecksSeismicActivity(seismometer)", "all x.(Seismometer(x) -> ChecksSeismicActivity(x))", "all x y.((Seismometer(x) & SeismicActivity(y)) -> Checks(x,y))", "all x.(Seismometer(x) -> ChecksForSeismicActivity(x))", "(CheckSeismometer(seismicActivity) & Seismometer(seismicActivity))", "(ChecksSeismometer(seismosphere,SeismicActivity))", "all x y.((Seismometer(x) & SeismicActivity(y)) -> Checks(x,y))", "all x.(Seismometer(x) -> ChecksSeismicActivity(x))", "all x.(Seismometer(x) -> ChecksForSeismicActivity(x))", "All x y.((Seismometer(x) & SeismicActivity(y)) -> ChecksFor(x,y))", "All x y.((Seismometer(x) & SeismologicalActivity(y)) -> ChecksFor(x,y))", "all x.(Seismometer(x) -> ChecksSeismicActivity(x))", "all x.(Seismometer(x) -> ChecksForSeismicActivity(x))", "all x.(Seismometer(x) -> CheckSeismicActivity(x))", "all x.(Seismometer(x) -> ChecksSeismicActivity(x))"]}
{"id": "eqasc_validation_339", "nl": "Seismic activity tells us the strength or magnitude of an earthquake. ", "fol": "", "prediction": ["all x y.((SeismicActivity(x) & Earthquake(y)) -> (Storm(x,y) | Magnitude(x,y)))", "all x.(SeismicActivity(x) -> (TellsStrength(x) | TellsMagnitude(x)))", "all x y z.((SeismicActivity(x) & Earthquake(y) & (Strength(z) | Magnitude(z))) -> Tells(x,y))", "all x y.((SeismicActivity(x) & Earthquake(y)) -> (TellsStrength(x,y) | TellsMagnitude(x,y)))", "all x.(SeismicActivity(x) -> (Storm(x) | Magnitude(x)))", "(SeismicActivity(s) & (Storm(s) | Magnitude(s)))", "(SeismicActivity(s) -> (TellsStrength(s) | TellsMagnitude(s))))", "all x y z.((SeismicActivity(x) & Earthquake(y) & (Strength(z) | Magnitude(z))) -> Tells(x,y,z))", "all x y.((SeismicActivity(x) & Earthquake(y)) -> (Storm(x,y) | Magnitude(x,y)))", "all x.(SeismicActivity(x) -> (TellsStrength(x) | TellsMagnitude(x)))", "all x y.((SeismicActivity(x) & Earthquake(y)) -> (TellsStrength(x,y) | TellsMagnitude(x,y)))", "all x.(SeismicActivity(x) -> (Storm(x) | Magnitude(x)))", "all x y.((SeismicActivity(x) & Earthquake(y) & (Strength(x,y) | Magnitude(x,y))) -> Tells(x,y))", "all x.(SeismicActivity(x) -> (TellsStrength(x) | TellsMagnitude(x)))", "exists x.(SeismicActivity(x) & TellsStormOrMagnitude(x))", "all x.(SeismicActivity(x) -> (Storm(x) | Magnitude(x)))"]}
{"id": "eqasc_validation_340", "nl": "Seismometer Calibration : Instructions on how to calibrate a homemade seismometer.", "fol": "", "prediction": ["all x.((Seismometer(x) & Calibration(x)) -> InstructionsOnCalculating(x,HomemadeSeismometer))", "(InstructionsOnCalculatingHomemadeSeismometer(x))", "all x y.((Seismometer(x) & Homemade(y)) -> Calibration(x,y))", "all x.(SeismometerCalibration(x) -> (InstructionsOnCalculatingHomemadeSeismometer(x)))", "all x.((SeismometerCalibration(x) & Homemade(x)) -> InstructionsOnCalculating(x,y))", "all x y.((HomemadeSeismometer(x) & HomemadeSeismometer(y)) -> CalibrationInstructions(x,y))", "-(HomemadeSeismometer(x) & Calibration(x)))", "(HomemadeSeismometer(x) & Calibration(x))", "(CalculateHomemadeSeismometer(x) & InstructionsOnCalculatingHomemadeSeismometer(x))", "all x.((HomemadeSeismometer(x) & Calibration(x)) -> InstructionsOnCalculating(x,y))", "(InstructionsOnCalculatingHomemadeSeismometer(x))", "All x y.((HomemadeSeismometer(x) & Seismometer(y)) -> CalibrationInstructions(x,y))", "(Calibration(seismometer) & InstructionsOnCalculating(seismometer))", "all x.(HomemadeSeismometer(x) -> Calibration(x))", "Instructions on Calibration(Seismometer)", "(InstructionsOnCalculatingHomemadeSeismometer(x))"]}
{"id": "eqasc_validation_341", "nl": "Instruments must be calibrated before they can measure the magnitude of an earthquake.", "fol": "", "prediction": ["all x.((Instrument(x) & Calibred(x)) -> MeasuresMagnitudeOfEarthquake(x))", "all x y.((Instrument(x) & Earthquake(y)) -> Calibrated(x,y))", "all x y.((Instrument(x) & Earthquake(y)) -> CanMeasureMagnitude(x,y))", "all x.((Instrument(x) & Calibrated(x)) -> MeasuresMagnitudeOfEarthquake(x))", "all x.((Instrument(x) & Calibred(x)) -> MeasuresMagnitudeOfEarthquake(x))", "all x y z.((Instrument(x) & Earthquake(y) & Calibred(x,y)) -> MeasuresMagnitude(x,z))", "all x y z.((Instrument(x) & Earthquake(y) & Calibrated(x)) -> MeasuresMagnitude(x,y))", "all x.((Instrument(x) & Calibred(x)) -> MeasuresMagnitudeOfEarthquake(x))", "all x y.((Instrument(x) & Earthquake(y)) -> Calibrated(x,y))", "all x.((Instrument(x) & CanMeasureMagnitude(x)) -> Calibrated(x))", "all x y.((Instrument(x) & Earthquake(y)) -> Calibred(x,y))", "all x.((Instrument(x) & Calibrated(x)) -> MeasuresMagnitudeOfEarthquake(x))", "all x.((Instrument(x) & Calculated(x)) -> MeasuresMagnitudeOfEarthquake(x))", "all x.((Instrument(x) & MeasuresMagnitudeOfEarthquake(x)) -> Calibrated(x))", "all x y.((Instrument(x) & Earthquake(y)) -> CanMeasureMagnitude(x,y))", "all x y.((Instrument(x) & Earthquake(y)) -> Calibrated(x))"]}
{"id": "eqasc_validation_342", "nl": "Earthquakes are measured on a scale of 1 to 10.", "fol": "", "prediction": ["all x.(Earthquake(x) -> MeasuredOnScale(x,1) & MeasuredOnScale(x,10)))", "all x y.((Earthquake(x) & Scale(y)) -> MeasuredOn(x,y))", "all x y z.((Earthquake(x) & Scale(y) & Scale(z)) -> MeasuredOn(x,y,z))", "all x.(Earthquake(x) -> MeasuredOnScale(x,1) & MeasuredOnScale(x,10)))", "(MeasuredOnScale(earthquake,s) & ScaleOf(earthquake,s))", "(MeasuredOnScale(earthquake) -> (Earthquake(e) & ScaleOf(earthquake) & ScaleOf(earthquake) & ScaleOf(earthquake)))", "all x y.((Earthquake(x) & Scale(y)) -> MeasuredOn(x,y))", "all x y z.((Earthquake(x) & Scale(y) & Scale(z)) -> MeasuredOn(x,y,z))", "(MeasuredOnScale(earthquake,Scale1),Scale10))", "all x y z.((Earthquake(x) & Scale(y) & Scale(z) & MeasuredOn(x,y,z)) -> (MeasuredOn(x,y,z) & Scale(y,z)))", "all x.(Earthquake(x) -> MeasuredOnScale(x,1-10))", "all x.(Earthquake(x) -> MeasuredOnScale(x,1 & MeasuredOnScale(x,10)))", "all x y.((Earthquake(x) & Scale(y)) -> MeasuredOnScale(x,y))", "all x.(Earthquake(x) -> MeasuredOnScale(x,1) & MeasuredOnScale(x,10)))", "all x.(EarthquakeScale(x) -> MeasuredOnScale(x,1))", "all x.(Earthquake(x) -> MeasuredOnScale(x,1,10))"]}
{"id": "eqasc_validation_343", "nl": "seismometers go up to 10", "fol": "", "prediction": ["all x.(Seismometer(x) -> GoesUpTo10(x))", "all x.(Seismometer(x) -> (GoesUpTo10(x) & Seismometer(x)))", "all x y.((Seismometer(x) & Seismometer(y)) -> GoesUpTo(x,y))", "all x y z.((Seismometer(x) & Seismometer(y) & Seismometer(z) & GoesUpTo(x,y,z)) -> GoesUpTo(y,z))", "all x.(Seismometer(x) -> GoesUpTo(x,10))", "(all x.(Seismometer(x) -> GoesUpTo(x,10)))", "all x.(Seismometer(x) -> (GoesUpTo(x,10) & GoesUpTo(x,10)))", "all x y.((Seismometer(x) & Seismometer(y)) -> GoesUpTo(x,y))", "all x y.((Seismometer(x) & Seismometer(y)) -> (GoesUpTo(x,y) & UpTo(y,10)))", "all x y.((Seismometer(x) & Seismometer(y)) -> GoesUpTo(x,y))", "all x.(Seismometer(x) -> (GoesUpTo10(x) | GoesTo10(x)))", "all x.(Seismometer(x) -> GoesUpTo10(x))", "all x y.((Seismometer(x) & Seismometer(y) & GoesUpTo(x,y)) -> GoesUpTo(x,y))", "all x.(Seismometer(x) -> (GoesUpTo10(x) | GoesUpTo10(x)))", "all x.(Seismometer(x) -> GoesUpTo(x,10))", "All x.(Seismometer(x) -> GoesUpTo(x,10))"]}
{"id": "eqasc_validation_344", "nl": "Earthquakes are caused by fault movement.", "fol": "", "prediction": ["all x.(Earthquake(x) -> CausedByFaultMovement(x))", "all x y.((Earthquake(x) & FaultMovement(y)) -> CausedBy(x,y))", "all x.(Earthquake(x) -> CausedByFaultMovement(x))", "(FaultMovementCausesEarthquakes(Earthquake))", "all x y.((Earthquake(x) & FaultMovement(y)) -> CausedBy(x,y))", "(all x.(Earthquake(x) -> CausedByFaultMovement(x)))", "all x y z.((Earthquake(x) & FaultMovement(y) & FaultMovement(z)) -> CausedBy(x,y,z))", "all x.(Earthquake(x) -> CausedByFaultMovement(x))", "all x y.((Earthquake(x) & FaultMovement(y)) -> CausedBy(x,y))", "all x.(Earthquake(x) -> CausedByFaultMovement(x))", "all x.(Earthquake(x) -> CausedByFaultMovement(x))", "all x y.((Earthquake(x) & FaultMovement(y)) -> CausedBy(x,y))", "all x.(Earthquake(x) -> CausedByFaultMovement(x))", "all x.(Earthquake(x) -> CausedByFaultMovement(x))", "all x.(Earthquake(x) -> CausedByFaultMovement(x))", "all x.(Earthquake(x) -> CausedByFaultMovement(x))"]}
{"id": "eqasc_validation_345", "nl": "a seismometer is used to measure the strength or magnitude of something caused by fault movement", "fol": "", "prediction": ["all x y.((Seismometer(x) & (FaultMovement(y) | FaultMovement(y))) -> MeasuresStrengthOrMagnitudeOf(x,y))", "all x y z.((Seismometer(x) & (FaultMovement(y) | FaultMovement(z))) -> MeasuresStrengthOrMagnitudeOf(x,y,z))", "all x.(Seismometer(x) -> (MeasuresStrengthOrMagnitudeOfFaultMovement(x) & CausedByFaultMovement(x)))", "all x y.((Seismometer(x) & FaultMovement(y)) -> MeasuresStrengthOrMagnitudeOf(x,y))", "all x.(Seismometer(x) -> MeasuresStrengthOrMagnitudeOfFaultMovement(x))", "all x y z.((Seismometer(x) & (FaultMovement(y) | FaultMovement(z))) -> MeasuresStrengthOrMagnitudeOf(x,y,z))", "all x.(Seismometer(x) -> (MeasuresStrengthOrMagnitudeOfFaultMovement(x) & CausesFaultMovement(x)))", "all x y.((Seismometer(x) & (FaultMovement(y) | FaultMovement(y))) -> MeasuresStrengthOrMagnitudeOf(x,y))", "all x y.((Seismometer(x) & CausedByFaultMovement(y)) -> MeasuresStrengthOrMagnitudeOf(x,y))", "all x.(Seismometer(x) -> MeasuresStrengthOrMagnitudeOfFaultMovement(x))", "all x.(Seismometer(x) -> (MeasuresStrengthOrMagnitude(x) & CausedByFaultMovement(x)))", "all x y z.((Seismometer(x) & (FaultMovement(y) | FaultMovement(z))) -> MeasuresStrengthOrMagnitudeOf(x,y,z))", "all x y.((Seismometer(x) & MeasuresStrengthOrMagnitudeOfFault(x,y)) -> CausedByFaultMovement(y))", "all x.(Seismometer(x) -> MeasuresStrengthOrMagnitudeOfFaultMovement(x))", "all x y z.((Seismometer(x) & (FaultMovement(y) | FaultMovement(z))) -> MeasuresStrengthOrMagnitude(x,y,z))", "all x.(Seismometer(x) -> MeasuresStrengthOrMagnitudeOfFaultMovement(x))"]}
{"id": "eqasc_validation_346", "nl": "The Richter scale, developed in 1935, measures the earthquake by using a standard seismometer to measure the maximum amplitude of shaking.", "fol": "", "prediction": ["all x.((RiverScale(x) & DevelopedIn1935(x)) -> MeasuresEarthquake(x))", "all x y.((RiverScale(x) & DevelopedIn1935(x)) -> MeasuresEarthquake(x,y))", "(DevelopedIn(RiverScale, 1935) & MeasuresEarthquake(RiverScale,Seismometer) & MeasuresMaxAmplitudeOfShaking(RiverScale,Shaking))", "(DevelopedIn 1935, RichterScale) & MeasuresEarthquake(RiverScale) & UsesSeismometer(RiverScale) & MeasuresMaxAmplitude(RiverShaking))", "all x y z.((RiverScale(x) & DevelopedIn1935(x) & Earthquake(y) & StandardSeismometer(z)) -> MeasuresMaxAmplitude(x,y,z))", "(DevelopedIn1935, RichterScale) & MeasuresEarthquake(RiverScale) & UsesSeismometer(RiverScale) & MeasuresMaxAmplitude(RiverShaking))", "the RichterScale, developed in 1935, measures earthquakes by usingSeismometersToMeasureMaxAmplitude(RiverSquaring)", "all x.((RiverScale(x) & DevelopedIn 1935(x)) -> MeasuresEarthquake(x))", "all x y.((RiverScale(x) & DevelopedIn(x,y) & 1935) -> MeasuresEarthquake(x,y))", "(DevelopedIn 1935, RichterScale) & MeasuresEarthquake(RiverScale,Seismometer) & MeasuresMaxAmplitudeOfShaking(RiverScale,Shaking))", "all x.(RiverScale(x) -> (DevelopedIn1935(x) & MeasuresEarthquake(x) & UsesSeismometer(x) & MeasuresMaxAmplitudeOfShaking(x)))", "(DevelopedIn(RichardScale, 1935) & MeasuresEarthquake(RichardScale,Seismometer) & MeasuresMaxAmplitude(RichardScale,Shaking))", "(DevelopedIn1935, RichterScale) & MeasuresEarthquake(RiverScale,Seismometer) & MeasuresMaxAmplitudeOfShaking(RiverScale,Shaking))", "all x.((RiverScale(x) & DevelopedIn1935)) -> MeasuresEarthquake(x))", "all x y.((RiverScale(x) & DevelopedIn 1935(x)) -> MeasuresEarthquake(x,y))", "all x.((RichterScale(x) & DevelopedIn(x, 1935)) -> MeasuresEarthquake(x))"]}
{"id": "eqasc_validation_347", "nl": "The strength of an earthquake refers to the maximum amplitude of the shaking", "fol": "", "prediction": ["all x y.((Earthquake(x) & MaximumAmplitude(y)) -> StrengthRefersTo(x,y))", "all x y z.((Earthquake(x) & Strength(y) & Shaking(z)) -> MaximumAmplitude(y,z))", "all x.(Earthquake(x) -> MaximumAmplitude(x,shaking))", "(EarthquakeStrength(Earthquake) -> MaximumAmplitudeOfShaking(Earthquake))", "all x y z.((Earthquake(x) & MaximumAmplitude(y) & Shaking(z)) -> StrengthRefersTo(x,y,z))", "all x y.((Earthquake(x) & MaximumAmplitude(y)) -> StrengthRefersTo(x,y))", "(MaxAmplitude(earthquake) & MaximumAmplitude(earthquake))", "all x.((Earthquake(x) & MaximumAmplitude(x)) -> StrengthRefersTo(x,maximumAmplitude))", "all x.(EarthquakeStrength(x) -> MaximumAmplitudeOfShaking(x))", "all x y.((Earthquake(x) & Strength(y)) -> MaximumAmplitude(x,y))", "(TheStrengthOfEarthquake(x) -> MaximumAmplifierOfShaking(x))", "all x y z.((Earthquake(x) & Strength(y) & Shaking(z) & MaximumAmplitude(z)) -> StrengthRefersTo(x,y,z))", "all x.(EarthquakeStrength(x) -> MaximumAmplifierOfShaking(x))", "all x y.((Earthquake(x) & Shaking(y)) -> MaximumAmplitude(x,y))", "All x.(Earthquake(x) -> MaximumAmplitudeOfShaking(x))", "all x.(EarthquakeStrength(x) -> MaximumAmplitudeOfShaking(x))"]}
{"id": "eqasc_validation_348", "nl": "The Richter scale provides information on the magnitude or inherent strength of the earthquake.", "fol": "", "prediction": ["all x.(RiverScale(x) -> (ProvidesInformationOnMagnitude(x) | InherentStrength(x)))", "all x y.((RiverScale(x) & Earthquake(y)) -> (ProvidesInformationOnMajority(x,y) | InherentStrength(x,y)))", "(InformationOnMagnitudeOrInherentStrengthOfEarthquake(RiverScale))", "(InformationOnMajority(RiverScale) | InformationOnInherentStrength(RiverScale))", "all x.(RiverScale(x) -> (ProvidesInformationOnMagnitudeOrInherentStrength(x) & Earthquake(x)))", "(ProvidesInformationOnMagnitudeOrInherentStrength(RiverScale))", "All x y z.((RiverScale(x) & Earthquake(y) & (Magnitude(z) | InherentStrength(z))) -> ProvidesInformation(x,y,z))", "all x y.((RiverScale(x) & Earthquake(y)) -> (ProvidesInformationOnMagnitude(x,y) | InherentStrength(x,y)))", "the RichterScale(RiverScale) - (InformationOnMagnitude(River) | InformationOnInherentStrength(River)))", "(exists x.(RiverScale(x) & ProvidesInformationOnMajorityOrInherentStrength(x)))", "all x.(RiverScale(x) -> (ProvidesInformationOnMajority(x) | InherentStrength(x)))", "all x.(J\u00fcrgensScale(x) -> (ProvidesInformationOnMagnitude(x) | ProvidesInherentStrength(x)))", "all x y.((RiverScale(x) & Earthquake(y)) -> (ProvidesInformationOnMajority(x,y) | ProvidesInherentStrength(x,y)))", "all x.(RiverScale(x) -> (ProvidesInformationOnMagnitude(x) | ProvidesInherentStrength(x)))", "all x.(RiverScale(x) -> (InformationOnMagnitude(x) | InherentStrength(x)))", "all x.(RichardScale(x) -> (ProvidesInformationOnMagnitudeOrInherentStrengthOfEarthquake(x)))"]}
{"id": "eqasc_validation_349", "nl": "The Richter scale uses readings from seismometers", "fol": "", "prediction": ["all x y.((RiverScale(x) & Seismometer(y)) -> UsesReadingsFrom(x,y))", "all x.(RiverScale(x) -> UsesReadingsFromSeismometers(x))", "(UsesReadingsFromSeismometers(RiverScale) & UsesReadingsFromSeismometers(RiverScale))", "all x y z.((RiverScale(x) & Seismometer(y) & Reading(z)) -> Uses(x,y,z))", "(all x.(RiverScale(x) -> UsesReadingsFromSeismometers(x)))", "(RiverScale(Riders Scale) & UsesReadingsFromSeismometers(RidersScale))", "all x y z.((RiverScale(x) & Reading(y) & Seismometer(z)) -> UsesFrom(x,y,z))", "all x.(RiverScale(x) -> UsesReadingsFromSeismometers(x))", "all x y.((RiverScale(x) & Seismometer(y)) -> UsesReadingsFrom(x,y))", "(UsesReadingsFromSeismometers(RiverScale) & UsesReadingsFromSeismometers(RiverScale))", "all x.(RiverScale(x) -> (UsesReadingsFromSeismometers(x) & UsesReadingsFromSeismometers(x)))", "(RiverScale(Rider) & UsesReadingsFromSeismometers(RiderScale))", "(all x.(RiverScale(x) -> UsesReadingsFromSeismometers(x)))", "all x y.((RiverScale(x) & Seismometer(y)) -> UsesReadingsFrom(x,y))", "all x.(RiverScale(x) -> UsesReadingsFromSeismometers(x))", "All x.(RiverScale(x) -> UsesReadingsFromSeismometers(x))"]}
{"id": "eqasc_validation_350", "nl": "a seismometer is used to measure the strength or magnitude of fault movement.", "fol": "", "prediction": ["all x.(Seismometer(x) -> (MeasuresStrengthOrMagnitudeOfFaultMovement(x)))", "all x y.((Seismometer(x) & FaultMovement(y)) -> MeasuresStrengthOrMagnitude(x,y))", "all x.(Seismometer(x) -> MeasuresStrengthOrMagnitudeOfFaultMovement(x))", "all x.(Seismometer(x) -> (MeasuresStrengthOrMagnitudeOfFaultMovement(x)))", "all x y z.((Seismometer(x) & (FaultMovement(y) | FaultMovement(z))) -> MeasuresStrengthOrMagnitude(x,y,z))", "all x.((Seismometer(x) & MeasuresStrengthOrMagnitudeOfFaultMovement(x)) -> MeasuresFaultMovement(x))", "all x y.((Seismometer(x) & FaultMovement(y)) -> MeasuresStrengthOrMagnitude(x,y))", "all x y.((Seismometer(x) & FaultMovement(y)) -> (MeasuresStrengthOrMagnitude(x,y)))", "all x.(Seismometer(x) -> (MeasuresStrengthOrMagnitudeOfFaultMovement(x)))", "all x.(Seismometer(x) -> MeasuresStrengthOrMagnitudeOfFaultMovement(x))", "all x y.((Seismometer(x) & FaultMovement(y)) -> MeasuresStrengthOrMagnitude(x,y))", "all x y.((Seismometer(x) & FaultMovement(y)) -> (MeasuresStrengthOrMagnitude(x,y)))", "all x.(Seismometer(x) -> (MeasuresStrengthOrMagnitudeOfFaultMovement(x)))", "all x.(Seismometer(x) -> MeasuresStrengthOrMagnitudeOfFaultMovement(x))", "exists x.(Seismometer(x) & MeasuresStrengthOrMagnitudeOfFaultMovement(x))", "exists x.(Seismometer(x) & MeasuresStrengthOrMagnitudeOfFaultMovement(x))"]}
{"id": "eqasc_validation_351", "nl": "a seismometer is used to measure the richter scale", "fol": "", "prediction": ["all x y.((Seismometer(x) & RichterScene(y)) -> Measures(x,y))", "all x y z.((Seismometer(x) & RichterScene(y) & Scale(z)) -> Measures(x,y,z))", "all x y.((Seismometer(x) & RichterScale(y)) -> Measures(x,y))", "all x.(Seismometer(x) -> MeasuresRichterScales(x))", "all x y z.((Seismometer(x) & RichterScale(y) & Scale(z)) -> Measures(x,y,z))", "all x.((Seismometer(x) & MeasuresRichterScales(x)) -> UsedToMeasureRichterScales(x))", "all x.(Seismometer(x) -> MeasuresRichterScales(x))", "all x y.((Seismometer(x) & RichterScale(y)) -> Measures(x,y))", "all x y z.((Seismometer(x) & RichterScene(y) & Scale(z)) -> Measures(x,y,z))", "all x y z.((Seismometer(x) & RichterScale(y) & Scale(z) & Measures(x,y,z)) -> Measures(x,y,z))", "all x y.((Seismometer(x) & RichterScale(y)) -> MeasuresRichterScale(x,y))", "all x.(Seismometer(x) -> MeasuresRichterScales(x))", "all x y.((Seismometer(x) & RichterScale(y) & Measures(x,y)) -> UsedToMeasure(x,y))", "all x.(Seismometer(x) -> MeasuresRichterScales(x))", "exists x.(Seismometer(x) & MeasuresRichterScale(x) & MeasuresRichterScale(x))", "exists x.(Seismometer(x) & MeasuresRichterScales(x))"]}
{"id": "eqasc_validation_352", "nl": "Intensity is a measure of the strength of shaking experienced in an earthquake.", "fol": "", "prediction": ["all x.(Intensity(x) -> (MeasuresStrengthOfShaking(x) & ExperiencedInEarthquake(x)))", "all x y.((Intensity(x) & Earthquake(y)) -> MeasuresStrengthOfShaking(x,y))", "all x y z.((Intensity(x) & Earthquake(y) & Shaking(z)) -> MeasuresStrengthOf(x,y,z))", "(MeasuresStrengthOfShakingInEarthquake(Intensity) -> ExperiencedInEarthquake(Intensity))", "(MeasuresIntensity(in earthquake) -> StrengthOfShaking(inEarthquake))", "(Intensity(x) -> MeasuresStrengthOfShaking(x))", "all x.(Intensity(x) -> (MeasuresStrengthOfShaking(x) & ExperiencedInEarthquake(x)))", "all x y.((Intensity(x) & Earthquake(y)) -> MeasuresStrengthOfShaking(x,y))", "all x.(Intensity(x) -> (MeasuresStrengthOfShaking(x) & ExperiencedInEarthquake(x)))", "all x.(Intensity(x) -> MeasuresStrengthOfShaking(x))", "all x y.((Intensity(x) & Earthquake(y)) -> MeasuresStrengthOfShaking(x,y))", "all x.(Intensity(x) -> (MeasuresShakingStrength(x) & ExperiencedInEarthquake(x)))", "all x y z.((Intensity(x) & Earthquake(y) & Shaking(z)) -> MeasuresStrength(x,y,z))", "all x y.((Intensity(x) & Earthquake(y)) -> StrengthOfShaking(x,y))", "all x.(Intensity(x) -> (MeasuresStrengthOfShaking(x) & ExperiencedInEarthquake(x)))", "All x.(Intensity(x) -> MeasuresStrengthOfShaking(x))"]}
{"id": "eqasc_validation_353", "nl": "A seismometer measures the intensity of the shaking of earthquakes.", "fol": "", "prediction": ["all x.(Seismometer(x) -> MeasuresIntensityOfShakingOfEarthquakes(x))", "all x y.((Seismometer(x) & Earthquake(y)) -> MeasuresIntensityOfShaking(x,y))", "all x y z.((Seismometer(x) & Earthquake(y) & Shaking(z)) -> MeasuresIntensity(x,y,z))", "all x.(Seismometer(x) -> MeasuresIntensityOfShakingOfEarthquakes(x))", "all x y.((Seismometer(x) & Earthquake(y)) -> MeasuresIntensityOfShaking(x,y))", "all x y z.((Seismometer(x) & Earthquake(y) & Shaking(z)) -> MeasuresIntensity(x,y,z))", "all x.(Seismometer(x) -> MeasuresIntensityOfShakingOfEarthquakes(x))", "all x y.((Seismometer(x) & Earthquake(y)) -> MeasuresIntensityOfShaking(x,y))", "all x.(Seismometer(x) -> MeasuresIntensityOfShaking(x))", "all x y.((Seismometer(x) & Earthquake(y)) -> MeasuresIntensityOfShaking(x,y))", "all x.(Seismometer(x) -> MeasuresShakingIntensity(x))", "all x.(Seismometer(x) -> MeasuresIntensityOfShakingOfEarthquakes(x))", "all x y.((Seismometer(x) & Earthquake(y)) -> MeasuresIntensityOfShaking(x,y))", "all x.(Seismometer(x) -> MeasuresIntensityOfShaking(x))", "all x.(Seismometer(x) -> MeasuresShakingIntensity(x))", "exists x.(Seismometer(x) & MeasuresIntensityOfShaking(x))"]}
{"id": "eqasc_validation_354", "nl": "Seismic waves are produced by earthquakes.", "fol": "", "prediction": ["all x y.((SeismicWaves(x) & Earthquake(y)) -> ProducedBy(x,y))", "all x.(SeismicWaves(x) -> ProducedByEarthquakes(x))", "all x y z.((SeismicWaves(x) & Earthquake(y) & Earthquake(z)) -> ProducedBy(x,y,z))", "(all x.(SeismicWaves(x) -> ProducedByEarthquakes(x)))", "all x y.((SeismicWaves(x) & Earthquake(y)) -> ProducedBy(x,y))", "all x.(SeismicWaves(x) -> ProducedByEarthquakes(x))", "all x y z.((SeismicWaves(x) & Earthquake(y) & Earthquake(z)) -> ProducedBy(x,y,z))", "(all x.(SeismicWaves(x) -> ProducedByEarthquakes(x)))", "all x y.((SeismicWaves(x) & Earthquake(y)) -> ProducedBy(x,y))", "all x.(SeismicWaves(x) -> ProducedByEarthquakes(x))", "all x.(SeismicWaves(x) -> (ProducedByEarthquakes(x)))", "all x y.((Earthquake(x) & SeismicWaves(y)) -> ProducedBy(y,x))", "all x.(SeismicWaves(x) -> ProducedByEarthquakes(x))", "all x y.((SeismicWaves(x) & Earthquake(y)) -> ProducedBy(x,y))", "exists x.(SeismicWaves(x) & Earthquake(x))", "all x.(SeismicWaves(x) -> ProducedByEarthquakes(x))"]}
{"id": "eqasc_validation_355", "nl": "a seismometer is used to measure seismic waves", "fol": "", "prediction": ["all x y.((Seismometer(x) & SeismicWaves(y)) -> Measures(x,y))", "all x.(Seismometer(x) -> MeasuresSeismicWaves(x))", "all x y z.((Seismometer(x) & SeismicWaves(y) & Waves(z)) -> Measures(x,y,z))", "all x y.((Seismometer(x) & SeismicWaves(y)) -> Measures(x,y))", "all x y.((Seismometer(x) & Seismometer(y)) -> MeasuresSeismicWaves(x,y))", "all x.(Seismometer(x) -> MeasuresSeismicWaves(x))", "all x y z.((Seismometer(x) & SeismicWaves(y) & Waves(z)) -> Measures(x,y,z))", "all x.((Seismometer(x) & MeasuresSeismicWaves(x)) -> Seismometer(x))", "all x y.((Seismometer(x) & Seismometer(y) & MeasuresSeismicWaves(x,y)) -> UsedToMeasure(x,y))", "all x.(Seismometer(x) -> MeasuresSeismicWaves(x))", "all x y z.((Seismometer(x) & SeismicWaves(y) & Waves(z)) -> Measures(x,y,z))", "all x.(Seismometer(x) -> UsedToMeasureSeismicWaves(x))", "all x y.((Seismometer(x) & Seismometer(y) & MeasuresSeismicWaves(x,y)) -> UsedToMeasure(x,y))", "all x.(Seismometer(x) -> MeasuresSeismicWaves(x))", "exists x.(Seismometer(x) & MeasuresSeismicWaves(x) & MeasuresSeismicWaves(x))", "all x.(Seismometer(x) -> MeasuresSeismicWaves(x))"]}
{"id": "eqasc_validation_356", "nl": "Scientists use seismometers to determine the location and strength of earthquakes.", "fol": "", "prediction": ["all x y.((Scientist(x) & Seismometer(y)) -> (DeterminesLocation(x,y) & DeterminesStrength(x,y)))", "all x y z.((Scientist(x) & Seismometer(y) & Earthquake(z)) -> (Uses(x,y) & DeterminesLocation(x,z) & DeterminesStrength(x,z)))", "all x.(Scientist(x) -> (UsesSeismometer(x) & DeterminesLocation(x) & DeterminesStrength(x)))", "all x y.((Scientist(x) & Seismometer(y)) -> DeterminesLocationAndStrengthOfEarthquakes(x,y))", "all x.((Scientist(x) & Seismometer(y)) -> DeterminesLocationAndStrengthOfEarthquakes(x,y))", "all x y z.((Scientist(x) & Seismometer(y) & Earthquake(z)) -> (Uses(x,y) & DeterminesLocation(x,z) & DeterminesStrength(x,z)))", "all x.(Scientist(x) -> UsesSeismometersToDetermineLocationAndStrengthOfEarthquakes(x))", "all x.(Scientist(x) -> (UsesSeismometer(x) & DeterminesLocation(x) & DeterminesStrength(x)))", "all x y.((Scientist(x) & Seismometer(y)) -> (DeterminesLocation(x,y) & DeterminesStrength(x,y)))", "(all x.(Scientist(x) -> UsesSeismometer(x)))", "all x y z.((Scientist(x) & Seismometer(y) & Earthquake(z)) -> DeterminesLocationAndStrength(x,y,z))", "all x y.((Scientist(x) & Seismometer(y) & Earthquake(z)) -> DeterminesLocationAndStrength(x,y,z))", "all x.(Scientist(x) -> (UsesSeismometers(x) & DeterminesLocation(x) & DeterminesStrength(x)))", "all x y.((Scientist(x) & Earthquake(y)) -> UsesSeismometersToDetermineLocationAndStrength(x,y))", "all x y z.((Scientist(x) & Seismometer(y) & Earthquake(z)) -> (DeterminesLocation(x,y) & DeterminesStrength(x,z)))", "all x.(Scientist(x) -> UsesSeismometersToDetermineLocationAndStrengthOfEarthquakes(x))"]}
{"id": "eqasc_validation_357", "nl": "a seismometer is used to measure strength", "fol": "", "prediction": ["all x y.((Seismometer(x) & Strength(y)) -> Measures(x,y))", "all x.(Seismometer(x) -> MeasuresStrength(x))", "all x y z.((Seismometer(x) & Strength(y) & Strength(z)) -> Measures(x,y,z))", "all x y.((Seismometer(x) & Strength(y)) -> Measures(x,y))", "all x.(Seismometer(x) -> MeasuresStrength(x))", "all x y.((Seismometer(x) & Seismometer(y)) -> MeasuresStrength(x,y))", "all x y z.((Seismometer(x) & Strength(y) & Strength(z)) -> Measures(x,y,z))", "all x.((Seismometer(x) & MeasuresStrength(x)) -> Seismometer(x))", "all x y.((Seismometer(x) & Strength(y) & Measures(x,y)) -> UsedToMeasure(x,y))", "all x.(Seismometer(x) -> MeasuresStrength(x))", "all x.(Seismometer(x) -> UsedToMeasureStrength(x))", "all x y z.((Seismometer(x) & Strength(y) & Strength(z)) -> Measures(x,y,z))", "all x y.((Seismometer(x) & Seismometer(y)) -> MeasuresStrength(x,y))", "all x.(Seismometer(x) -> MeasuresStrength(x))", "exists x.(Seismometer(x) & MeasuresStrength(x) & MeasuresStrength(x))", "all x.(Seismometer(x) -> MeasuresStrength(x))"]}
{"id": "eqasc_validation_358", "nl": "The magnitude of an earthquake is its strength, or the amount of shaking.", "fol": "", "prediction": ["all x.(Earthquake(x) -> (Strength(x) | ShakingAmount(x)))", "all x y.((Earthquake(x) & Strength(y)) | ShakingAmount(y)) -> Magnitude(x,y))", "all x.(Earthquake(x) -> (Strength(x) | ShakingAmount(x)))", "(all x.(Earthquake(x) -> Strength(x)) & all y.(Earthquake(y) -> ShakingAmount(y))))", "all x.((Earthquake(x) & (Strength(x) | ShakingAmount(x))) -> Magnitude(x))", "(MajorityOfEarthquake(x) -> (Strength(x) | ShakingAmount(x)))", "all x y.((Earthquake(x) & Strength(y)) -> ShakingAmount(x,y))", "(Majority(earthquake) -> (Strength(earthquake) | ShakingAmount(earthquake)))", "all x y.((Earthquake(x) & Magnitude(x,y)) -> (Strength(y) | ShakingAmount(y)))", "All x y z.((Earthquake(x) & Strength(y) & ShakingAmount(z)) -> Magnitude(x,y,z))", "all x.(Earthquake(x) -> (Strength(x) | ShakingAmount(x)))", "all x y.((Earthquake(x) & Strength(y)) -> ShakingAmount(x,y))", "all x.(Earthquake(x) -> (Strength(x) | ShakingAmount(x)))", "all x.(Earthquake(x) -> (Strength(x) | ShakingAmount(x)))", "exists x.(EarthquakeMagnitude(x) & (Strength(x) | ShakingAmount(x)))", "all x.(Earthquake(x) -> (Strength(x) | ShakingAmount(x)))"]}
{"id": "eqasc_validation_359", "nl": "A seismometer is used to measure the amount of shaking of an earthquake ", "fol": "", "prediction": ["all x y.((Seismometer(x) & Earthquake(y)) -> MeasuresShakingAmount(x,y))", "all x.(Seismometer(x) -> MeasuresShakingAmountOfEarthquake(x))", "all x y z.((Seismometer(x) & Earthquake(y) & Shaking(z)) -> MeasuresAmountOfShaking(x,y,z))", "(MeasuresShakingOfEarthquake(Seismometer) -> MeasuresShakingOfEarthquake(Seismometer))", "all x y.((Seismometer(x) & Earthquake(y)) -> MeasuresShakingAmount(x,y))", "all x y z.((Seismometer(x) & Earthquake(y) & Earthquake(z)) -> MeasuresShakingAmount(x,y,z))", "all x.(Seismometer(x) -> MeasuresShaking(x))", "all x y.((Seismometer(x) & Earthquake(y)) -> MeasuresAmountOfShaking(x,y))", "all x.(Seismometer(x) -> MeasuresAmountOfShakingOfEarthquake(x))", "all x.(Seismometer(x) -> MeasuresShakingAmount(x))", "all x y z.((Seismometer(x) & Earthquake(y) & Shaking(z)) -> MeasuresAmountOfShaking(x,y,z))", "all x.(Seismometer(x) -> MeasuresShakingAmountOfEarthquake(x))", "all x.(Seismometer(x) -> MeasuresShakingOfEarthquake(x))", "all x y.((Seismometer(x) & Earthquake(y)) -> MeasuresShakingAmount(x,y))", "all x y.((Seismometer(x) & Earthquake(y)) -> MeasuresAmountOfShaking(x,y))", "all x.(Seismometer(x) -> MeasuresAmountOfShakingOfEarthquake(x))"]}
{"id": "eqasc_validation_360", "nl": "Seismograph: A seismograph is a device that records earthquake waves.", "fol": "", "prediction": ["all x.(Seismograph(x) -> (RecordsEarthquakeWaves(x) & -RecordsEarthquakeWaves(x)))", "all x.(Seismograph(x) -> RecordsEarthquakeWaves(x))", "(RecordsEarthquakeWaves(Seismograph) & -RecordsEarthquakeWaves(Seismograph))", "all x y.((Seismograph(x) & EarthquakeWaves(y)) -> Records(x,y))", "all x.(Seismograph(x) -> RecordesEarthquakeWaves(x))", "(Seismograph(Seismometer,EarthquakeWaves))", "all x.(Seismograph(x) -> (RecordsEarthquakeWaves(x) & RecordsEarthquakeWaves(x)))", "(RecordsEarthquakeWaves(seismograph) & Seismograph(seismograph))", "all x y.((Seismograph(x) & EarthquakeWaves(y)) -> Records(x,y))", "all x y.((Seismograph(x) & EarthquakeWaves(y)) -> RecordedBy(x,y))", "all x.(Seismograph(x) -> RecordsEarthquakeWaves(x))", "all x.(Seismograph(x) -> RecordsEarthquakeWaves(x))", "all x y.((Seismograph(x) & Earthquake(y)) -> Records(x,y))", "all x.(Seismograph(x) -> RecordesEarthquakeWaves(x))", "all x.(Seismograph(x) -> RecordesEarthquakeWaves(x))", "exists x.(Seismograph(x) & RecordEarthquakeWaves(x))"]}
{"id": "eqasc_validation_361", "nl": "seismographs measure strength", "fol": "", "prediction": ["all x.(Seismograph(x) -> MeasuresStrength(x))", "all x y.((Seismograph(x) & Strength(y)) -> Measures(x,y))", "all x.(Seismograph(x) -> MeasuresStrength(x))", "all x y z.((Seismograph(x) & Strength(y) & Strength(z)) -> Measures(x,y,z))", "all x y.((Seismograph(x) & Seismometer(y)) -> MeasuresStrength(x,y))", "all x y.((Seismograph(x) & Strength(y)) -> Measures(x,y))", "all x.(Seismograph(x) -> MeasuresStrength(x))", "all x y z.((Seismograph(x) & Strength(y) & Strength(z)) -> Measures(x,y,z))", "all x y.((Seismograph(x) & Strength(y) & Measures(x,y)) -> Measures(x,y))", "all x.(Seismograph(x) -> MeasuresStrength(x))", "all x.(Seismograph(x) -> (MeasuresStrength(x) & MeasuresStrength(x)))", "all x y.((Seismograph(x) & Seismograph(y)) -> MeasuresStrength(x,y))", "all x.(Seismograph(x) -> MeasuresStrength(x))", "all x.(Seismograph(x) -> MeasuresStrength(x))", "all x.(Seismograph(x) -> MeasuresStrength(x))", "all x.(Seismograph(x) -> MeasuresStrength(x))"]}
{"id": "eqasc_validation_362", "nl": "a thermometer is used to measure temperature", "fol": "", "prediction": ["all x y.((Thermometer(x) & Temperature(y)) -> Measures(x,y))", "all x y z.((Thermometer(x) & Temperature(y) & Temperature(z)) -> Measures(x,y,z))", "all x.(Thermometer(x) -> MeasuresTemperature(x))", "all x y.((Thermometer(x) & Temperature(y)) -> Measures(x,y))", "all x y.((Thermometer(x) & TemperatureMeasurement(y)) -> Measures(x,y))", "all x.(Thermometer(x) -> MeasuresTemperature(x))", "all x y z.((Thermometer(x) & Temperature(y) & Temperature(z)) -> Measures(x,y,z))", "all x y z.(Thermometer(x) -> MeasuresTemperature(x,y,z))", "all x y.((Thermometer(x) & TemperatureMeasure(y)) -> Measures(x,y))", "all x.(Thermometer(x) -> MeasuresTemperature(x))", "all x y.((Thermometer(x) & TemperatureMeter(y)) -> MeasuresTemperature(x,y))", "all x.(Thermometer(x) -> MeasuresTemperature(x))", "exists x.(Thermometer(x) & UsedToMeasureTemperature(x))", "exists x.(Thermometer(x) & MeasuresTemperature(x) & MeasuresTemperature(x))", "all x.(Thermometer(x) -> MeasuresTemperature(x))", "exists x.(Thermometer(x) & MeasuresTemperature(x))"]}
{"id": "eqasc_validation_363", "nl": "Temperature Temperature is an measurement of the amount of heat.", "fol": "", "prediction": ["all x.(Temperature(x) -> MeasuresHeat(x))", "(MeasuresHeatAmount(Temperature) & MeasuresHeatAmount(Temperature))", "all x.(Temperature(x) -> MeasuresHeatAmount(x))", "(MeasuresHeat(Temperature) & Heat(Heat))", "Temperature (MeasuresHeat(Temperature))", "all x y.((Temperature(x) & Heat(y)) -> Measures(x,y))", "Temperature (Temperature) -> MeasuresHeat(Temperature))", "Temperature (MeasurementOfHeat(Temperature) & Heat(Heat))", "(MeasuresHeatAmount(Temperature) & MeasuresHeatAmount(Temperature))", "all x.(Temperature(x) -> MeasuresHeat(x))", "(MeasurementOfHeat(Temperature))", "Temperature (Temperature) -> MeasuresHeat(Temperature))", "all x.(Temperature(x) -> MeasuresHeatAmount(x))", "all x.(Temperature(x) -> MeasurementOfHeat(x))", "all x.(Temperature(x) -> MeasuresHeatAmount(x))", "All x.(Temperature(x) -> MeasuresHeatAmount(x))"]}
{"id": "eqasc_validation_364", "nl": "A thermometer is used to measure the amount of heat.", "fol": "", "prediction": ["all x.(Thermometer(x) -> MeasuresHeat(x))", "all x y.((Thermometer(x) & Heat(y)) -> Measures(x,y))", "all x.(Thermometer(x) -> MeasuresHeat(x))", "all x.(Thermometer(x) -> MeasuresHeatAmount(x))", "all x y.((Thermometer(x) & Heat(y)) -> Measures(x,y))", "all x y z.((Thermometer(x) & Heat(y) & Heat(z)) -> Measures(x,y,z))", "all x.(Thermometer(x) -> MeasuresHeatAmount(x))", "all x y.((Thermometer(x) & Heat(y)) -> Measures(x,y))", "all x y.((Thermometer(x) & Heat(y)) -> MeasuresAmount(x,y))", "all x.(Thermometer(x) -> MeasuresHeatAmount(x))", "exists x.(Thermometer(x) & MeasuresHeatAmount(x))", "all x y.((Thermometer(x) & Heat(y)) -> MeasuresAmount(x,y))", "all x.(Thermometer(x) -> MeasuresHeatAmount(x))", "all x.(Thermometer(x) -> MeasuresHeatAmount(x))", "exists x.(Thermometer(x) & MeasuresHeatAmount(x))", "exists x.(Thermometer(x) & MeasuresHeat(x))"]}
{"id": "eqasc_validation_365", "nl": "Fever is measured using a thermometer.", "fol": "", "prediction": ["all x.(Fever(x) -> MeasuredUsingThermometer(x))", "(MeasuresFeverUsingThermometer(fever) & UsesThermometer(fever))", "all x y.((Fever(x) & Thermometer(y)) -> MeasuredUsing(x,y))", "all x.(Fever(x) -> MeasuredWithThermometer(x))", "all x y z.((Fever(x) & Thermometer(y) & Temperature(z)) -> MeasuredUsing(x,y,z))", "all x y.((Fever(x) & Thermometer(y)) -> MeasuredUsing(x,y))", "(MeasuresFeverWithThermometer(Fever))", "all x.(Fever(x) -> MeasuredUsingThermometer(x))", "all x.(Fever(x) -> MeasuredUsingThermometer(x))", "all x.(FeverMethod(x) -> MeasuredUsingThermometer(x))", "all x y.((Fever(x) & Thermometer(y)) -> MeasuredWith(x,y))", "all x y.(Fever(x) -> MeasuredWithThermometer(x,y))", "all x.(Fever(x) -> MeasuredUsingThermometer(x))", "all x y.((Fever(x) & Thermometer(y)) -> MeasuredWith(x,y))", "all x.(Fever(x) -> MeasuredWithThermometer(x))", "all x.(Fever(x) -> MeasuredUsingThermometer(x))"]}
{"id": "eqasc_validation_366", "nl": "a fever can be measured with a thermometer", "fol": "", "prediction": ["all x y.((Fever(x) & Thermometer(y)) -> CanBeMeasuredWith(x,y))", "all x y z.((Fever(x) & Thermometer(y) & Thermometer(z)) -> CanBeMeasuredWith(x,y,z))", "all x.(Fever(x) -> MeasuresWithThermometer(x))", "all x.(Fever(x) -> CanBeMeasuredWithThermometer(x))", "all x y.((Fever(x) & Thermometer(y)) -> MeasuresWith(x,y))", "all x.((Fever(x) & Thermometer(x)) -> MeasuresWith(x,Thermometer))", "all x y z.((Fever(x) & Thermometer(y) & Thermometer(z)) -> MeasuresWith(x,y,z))", "all x.((Fever(x) & Thermometer(x)) -> CanBeMeasuredWith(x,Thermometer))", "all x.(FeverMeasuredWithThermometer(x) -> CanBeMeasuredWithThermometer(x))", "all x y.((Fever(x) & Thermometer(y)) -> CanBeMeasuredWith(x,y))", "all x.(FeverMeter(x) -> MeasuresWithThermometer(x))", "all x.(Fever(x) -> MeasuredWithThermometer(x))", "all x y z.((Fever(x) & Thermometer(y) & Thermometer(z)) -> CanMeasure(x,y,z))", "exists x.(FeverMeter(x) & MeasuresFeverWithThermometer(x))", "all x y.((Fever(x) & Thermometer(y)) -> MeasuresWith(x,y))", "all x y.((Fever(x) & Thermometer(y)) -> CanBeMeasuredWith(x,y))"]}
{"id": "eqasc_validation_367", "nl": "a thermometer is used to measure the amount of heat", "fol": "", "prediction": ["all x y.((Thermometer(x) & Heat(y)) -> MeasuresAmountOfHeat(x,y))", "all x.(Thermometer(x) -> MeasuresHeatAmount(x))", "all x y z.((Thermometer(x) & Heat(y) & Heat(z)) -> MeasuresAmountOfHeat(x,y,z))", "all x y.((Thermometer(x) & Heat(y)) -> MeasuresHeat(x,y))", "all x.(Thermometer(x) -> MeasuresHeatAmount(x))", "all x y z.((Thermometer(x) & Heat(y) & Heat(z)) -> Measures(x,y,z))", "all x y.((Thermometer(x) & Heat(y)) -> MeasuresAmountOfHeat(x,y))", "all x y z.(Thermometer(x) -> MeasuresHeat(x,y))", "all x.(Thermometer(x) -> MeasuresHeatAmount(x))", "all x y.((Thermometer(x) & Heat(y)) -> MeasuresHeatAmount(x,y))", "all x.(Thermometer(x) -> MeasuresHeatAddition(x))", "all x y.((Thermometer(x) & Heat(y)) -> MeasuresAmountOfHeat(x,y))", "all x.(Thermometer(x) -> MeasuresHeatAmount(x))", "all x.(Thermometer(x) -> MeasuresHeatAddition(x,HeatAddition))", "exists x.(Thermometer(x) & MeasuresHeat(x) & Heat(x) & Heat(x))", "exists x.(Thermometer(x) & MeasuresHeat(x))"]}
{"id": "eqasc_validation_368", "nl": "Heat and temperature are the same.", "fol": "", "prediction": ["all x.(Heat(x) -> Temperature(x))", "(SameHeat(x) & SameTemperature(x))", "all x y.((Heat(x) & Temperature(y)) -> Same(x,y))", "(SameHeat(Heat) & SameTemperature(Heat))", "(Heat(heat) & Temperature(heat))", "-(Heat(x) & Temperature(x))", "all x.(Heat(x) -> Temperature(x))", "all x.((Heat(x) & Temperature(x)) -> Same(x))", "(SameHeat(heat) & SameTemperature(heat))", "all x y.((Heat(x) & Temperature(y)) -> Same(x,y))", "(EqualHeat(heat) & EqualTemperature(heat))", "(SameHeat(x) & SameTemperature(x))", "all x.(Heat(x) -> Temperature(x))", "All x.(Heat(x) -> Heat(x) & Temperature(x))", "(SameHeat(Heat) & SameTemperature(Heat))", "all x.(Heat(x) -> Temperature(x))"]}
{"id": "eqasc_validation_369", "nl": "a thermometer is used to measure heat", "fol": "", "prediction": ["all x y.((Thermometer(x) & Heat(y)) -> Measures(x,y))", "all x y z.((Thermometer(x) & Heat(y) & Heat(z)) -> Measures(x,y,z))", "all x.(Thermometer(x) -> MeasuresHeat(x))", "all x y.((Thermometer(x) & Heat(y)) -> Measures(x,y))", "all x y z.((Thermometer(x) & Heat(y) & Heat(z)) -> Measures(x,y,z))", "all x.(Thermometer(x) -> MeasuresHeat(x))", "all x y.((Thermometer(x) & Heat(y)) -> MeasuresHeat(x,y))", "all x y.((Thermometer(x) & Heat(y) & Measures(x,y)) -> UsedToMeasure(x,y))", "all x.(Thermometer(x) -> MeasuresHeat(x))", "all x y z.((Thermometer(x) & Heat(y) & Heat(z)) -> Measures(x,y,z))", "all x y z.(Thermometer(x) -> MeasuresHeat(x,y))", "all x y.((Thermometer(x) & HeatMeasure(y)) -> MeasuresHeat(x,y))", "exists x.(Thermometer(x) & UsedToMeasureHeat(x))", "all x.(Thermometer(x) -> MeasuresHeat(x))", "exists x.(Thermometer(x) & MeasuresHeat(x) & Uses(x,Thermometer))", "all x.(Thermometer(x) -> MeasuresHeat(x))"]}
{"id": "eqasc_validation_370", "nl": "If the weather is warm, their temperature rises.", "fol": "", "prediction": ["all x.((Weather(x) & Warm(x)) -> TemperatureRise(x))", "all x.(WarmWeather(x) -> TemperatureRise(x))", "all x.((Weather(x) & Warm(x)) -> RisesTemperature(x))", "all x y.((Weather(x) & Warm(x)) -> TemperatureRise(y))", "(WarmWeather(x) -> TemperatureRise(x))", "all x.(WarmWeather(x) -> RisesTemperature(x))", "all x.((Weather(x) & Warm(x)) -> TemperatureRise(x))", "(WarmWeather(w) -> RisesTemperature(w))", "(WarmWeather(weather) -> RisesTemperature(weather))", "all x y.((Weather(x) & Warm(x)) -> RisesTemperature(y))", "all x.((Weather(x) & Warm(x)) -> RisesTemperature(x))", "all x.(WarmWeather(x) -> TemperatureRise(x))", "all x y.((Weather(x) & Warm(x)) -> TemperatureRise(y))", "all x.((Weather(x) & Warm(x)) -> TemperatureRises(x))", "all x.(WarmWeather(x) -> RisesTemperature(x))", "all x.((Weather(x) & Warm(x)) -> RisesTemperature(x))"]}
{"id": "eqasc_validation_371", "nl": "A thermometer is used to measure if the weather will be warm.", "fol": "", "prediction": ["all x.(Thermometer(x) -> MeasuresWarmWeather(x))", "all x y.((Thermometer(x) & Weather(y)) -> MeasuresWarm(x,y))", "all x.(Thermometer(x) -> MeasuresWarmWeather(x))", "all x y.((Thermometer(x) & Weather(y)) -> Measures(x,y))", "all x y z.((Thermometer(x) & Weather(y) & Temperature(z)) -> Measures(x,y,z))", "all x.(Thermometer(x) -> MeasuresWarmWeather(x))", "all x.(Thermometer(x) -> (MeasuresWarmWeather(x) & WarmWeather(x)))", "all x y.((Thermometer(x) & Weather(y)) -> MeasuresWarm(x,y))", "all x y.((Thermometer(x) & Weather(y) & Warm(y)) -> Measures(x,y))", "all x.(Thermometer(x) -> MeasuresWarmWeather(x))", "all x y.((Thermometer(x) & Weather(y) & Warm(y)) -> Measures(x,y))", "exists x.(Thermometer(x) & Temperature(x) & Measures(x,warm))", "all x.(Thermometer(x) -> MeasuresWarmWeather(x))", "all x.(Thermometer(x) -> MeasuresWeather(x))", "exists x.(Thermometer(x) & Temperature(x) & Measures(x,warm))", "exists x.(Thermometer(x) & MeasuresWeather(x))"]}
{"id": "eqasc_validation_372", "nl": "a fever can be diagnosed with a thermometer", "fol": "", "prediction": ["all x y.((Fever(x) & Thermometer(y)) -> DiagnosedWith(x,y))", "all x.(Fever(x) -> CanBeDiagnosedWithThermometer(x))", "all x y z.((Fever(x) & Thermometer(y) & Thermometer(z)) -> CanDiagnosis(x,y,z))", "all x.((Fever(x) & Thermometer(x)) -> DiagnosedWith(x,Thermometer))", "all x y.((Fever(x) & Thermometer(y)) -> CanBeDiagnosedWith(x,y))", "all x.(FeverDiagnosis(x) -> CanBeDiagnosedWithThermometer(x))", "all x.(Fever(x) -> DiagnosedWithThermometer(x))", "all x y z.((Fever(x) & Thermometer(y) & Thermometer(z)) -> DiagnosedWith(x,y,z))", "all x y.((Fever(x) & Thermometer(y)) -> DiagnosedWith(x,y))", "all x.((Fever(x) & Thermometer(x)) -> DiagnosedWith(x,Thermometer))", "all x y z.((Fever(x) & Thermometer(y) & TemperatureMeter(z) & DiagnosedWith(x,y,z)) -> CanBeDiagnosedWith(x,y,z))", "all x.(FeverDiagnosis(x) -> (Thermometer(x) | Thermometer(x)))", "all x.((Fever(x) & Thermometer(x)) -> CanBeDiagnosedWith(x,Thermometer))", "all x y.((Fever(x) & Thermometer(y)) -> CanBeDiagnosedWith(x,y))", "exists x.(FeverDiagnosis(x) & Thermometer(x))", "all x y.((Fever(x) & Thermometer(y)) -> DiagnosedWith(x,y))"]}
{"id": "eqasc_validation_373", "nl": "Temperature is a measure of the amount of heat.", "fol": "", "prediction": ["all x.(Temperature(x) -> MeasuresHeat(x))", "(MeasuresHeatAmount(Temperature) & HeatAmount(Temperature))", "all x.(Temperature(x) -> MeasuresHeatAmount(x))", "all x y.((Temperature(x) & Heat(y)) -> Measures(x,y))", "(MeasuresHeatAmount(Temperature) & HeatAmount(Temperature))", "all x.(Temperature(x) -> MeasuresHeat(x))", "all x y.((Temperature(x) & Heat(y)) -> Measures(x,y))", "all x.(Temperature(x) -> MeasuresHeatAmount(x))", "(MeasuresHeatAmount(Temperature))", "(MeasuresHeatAmount(Temperature) & HeatAmount(Temperature))", "all x.(Temperature(x) -> MeasuresHeat(x))", "all x y.((Temperature(x) & Heat(y)) -> Measures(x,y))", "all x.(Temperature(x) -> MeasuresHeat(x))", "exists x.(Temperature(x) & Heat(x) & Measures(x,Heat))", "all x.(Temperature(x) -> MeasuresHeatAmount(x))", "all x.(Temperature(x) -> MeasuresHeat(x))"]}
{"id": "eqasc_validation_374", "nl": "A thermometer can measure heat", "fol": "", "prediction": ["all x.(Thermometer(x) -> MeasuresHeat(x))", "all x.(Thermometer(x) -> MeasuresHeat(x))", "all x y.((Thermometer(x) & Heat(y)) -> Measures(x,y))", "all x y z.(Thermometer(x) -> (MeasuresHeat(x) & MeasuresHeat(y) & Heat(z) & Heat(z)))", "all x.(Thermometer(x) -> (MeasuresHeat(x) & MeasuresHeat(x)))", "all x.(Thermometer(x) -> MeasuresHeat(x))", "all x y.((Thermometer(x) & Heat(y)) -> Measures(x,y))", "all x y.((Thermometer(x) & Heat(y) & Measures(x,y)) -> CanMeasure(x,y))", "all x.(Thermometer(x) -> MeasuresHeat(x))", "all x y.((Thermometer(x) & Heat(y)) -> Measures(x,y))", "all x.(Thermometer(x) -> (MeasuresHeat(x) & MeasuresHeat(x)))", "all x.(Thermometer(x) -> CanMeasureHeat(x))", "all x.(Thermometer(x) -> MeasuresHeat(x))", "all x.(Thermometer(x) -> MeasuresHeat(x,Heat,Heat))", "exists x.(Thermometer(x) & MeasuresHeat(x,Heat))", "all x.(Thermometer(x) -> MeasuresHeat(x))"]}
{"id": "eqasc_validation_375", "nl": "When the temperature rises, the mercury expands and rises in the thermometer tube.", "fol": "", "prediction": ["all x y.((Temperature(x) & TemperatureRise(x)) -> (Expansion(x,y) & RisesInThermometerTube(x,y)))", "all x.((TemperatureRise(x) & MercuryExpands(x) & RisesInThermometerTube(x)) -> Heater(x))", "all x y z.((Temperature(x) & Mercury(y) & Thermometer(z)) -> (Expands(y,z) & RisesIn(y,z)))", "(RisesTemperature(x) -> ExpandsAndRisesInThermometerTube(x))", "all x.((TemperatureRises(x) & MercuryExpandsAndRisesInThermometerTube(x)) -> TemperatureRises(x))", "all x y.((TemperatureRise(x) & Mercury(y)) -> (Expands(y,x) & RisesInThermometerTube(y)))", "all x y.((Temperature(x) & TemperatureRise(x)) -> (Expansion(y) & RisesInThermometer(y)))", "all x y z.((Temperature(x) & TemperatureRise(y) & Thermometer(z)) -> (Expansion(x,z) & RisesIn(x,z)))", "all x.((TemperatureRise(x) & Expands(x) & RisesInThermometerTube(x)) -> Mercury(x))", "(RisesTemperature(x) -> ExpandsAndRisesInThermometerTube(x))", "all x.(RisesTemperature(x) -> ExpandsAndRisesInThermometerTube(x))", "all x.((TemperatureRises(x) & MercuryExpandsAndRises(x)) -> ThermometerTube(x))", "all x y z.((Temperature(x) & Mercury(y) & ThermometerTube(z)) -> (Expands(y,z) & RisesIn(y,z)))", "all x y.((TemperatureRises(x) & Mercury(y)) -> ExpandsAndRisesInThermometerTube(y,x))", "all x.(RisesTemperature(x) -> (Expansion(x) & RisesInThermometerTube(x)))", "all x.((TemperatureRise(x) & Expands(x) & RisesInThermometerTube(x)) -> Mercury(x))"]}
{"id": "eqasc_validation_376", "nl": "Mercury expanding and rising in a tube is used to measure temperature", "fol": "", "prediction": ["all x y.((Mercury(x) & Tube(y) & ExpandingAndRising(x,y)) -> MeasuresTemperature(x,y))", "all x y z.((Mercury(x) & Tube(y) & Tube(z) & ExpandingAndRising(x,y) & In(x,z)) -> MeasuresTemperature(x))", "all x.((Mercury(x) & ExpandingAndRisingInTube(x)) -> MeasuresTemperature(x))", "all x y.((Mercury(x) & Tube(y) & ExpandingAndRisingIn(x,y)) -> MeasuresTemperature(x))", "all x y z.((Mercury(x) & Tube(y) & Tube(z)) -> (ExpandingAndRising(x,y) & MeasuresTemperature(x,z)))", "all x y.((Mercury(x) & Tube(y)) -> (ExpandingAndRisingIn(x,y) & MeasuresTemperature(x)))", "(all x.(Mercury(x) -> ExpandsAndRisingInTube(x)))", "all x.((Mercury(x) & Expanding(x) & Rising(x) & Tube(x)) -> MeasuresTemperature(x))", "all x.((Mercury(x) & ExpandingAndRisingInTube(x)) -> MeasuresTemperature(x))", "all x y z.((Mercury(x) & Tube(y) & Tube(z) & ExpandsAndRising(x,y) & MeasuresTemperature(x,z)) -> UsedToMeasureTemperature(x))", "all x y z.((Mercury(x) & Tube(y) & Tube(z) & ExpandingAndRisingIn(x,y) & MeasuresTemperature(x,z)) -> UsedToMeasureTemperature(x,y,z))", "all x y.((Mercury(x) & Tube(y)) -> (ExpandingAndRisingIn(x,y) & MeasuresTemperature(x,y)))", "all x.((Mercury(x) & Expanding(x) & RisingInTube(x)) -> MeasuresTemperature(x))", "all x y.((Mercury(x) & Tube(y) & ExpandsAndRising(x,y)) -> MeasuresTemperature(x,y))", "all x.((Mercury(x) & ExpandsInTube(x) & RisesInTube(x)) -> MeasuresTemperature(x))", "all x.((Mercury(x) & ExpandsAndRisingInTube(x)) -> MeasuresTemperature(x))"]}
{"id": "eqasc_validation_377", "nl": "An obvious replacement for the standard mercury thermometer is the alcohol thermometer.", "fol": "", "prediction": ["all x.((ObviousReplacement(x) & StandardMercuryThermometer(x)) -> AlcoholThermometer(x))", "all x.(ObviousReplacement(x) -> AlcoholThermometer(x))", "(ObviousReplacementForMercuryThermometer(a) & StandardMeltzerThermometer(b) & AlcoholThermometer(a))", "all x.((AlcoholicThermometer(x) & StandardMercuryThermometer(x)) -> ObscissiveReplacement(x))", "all x y.((ObviousReplacement(x) & StandardMercuryThermometer(y)) -> AlcoholThermometer(x))", "all x.(ObviousReplacementForMercuryThermometer(x) -> AlcoholThermometer(x))", "all x y.((StandardMercuryThermometer(x) & AlcoholThermometer(y)) -> ObscissiveReplacement(x,y))", "(ObviousReplacementForMeltzerMeltzer(a) & StandardMeltzerMeltzer(b) & AlcoholMeltzer(a))", "all x.((ObviousReplacement(x) & StandardMercuryThermometer(x)) -> AlcoholThermometer(x))", "(ObviousReplacementForMercuryThermometer(AlcoholThermometer))", "all x.((ObscuredReplacement(x) & StandardMercuryThermometer(x)) -> AlcoholThermometer(x))", "all x y.((AlcoholicThermometer(x) & StandardMercuryThermometer(y)) -> ObscillatingReplacement(x,y))", "exists x.(AlcoholicThermometer(x) & ReplacesStandardMercuryThermometer(x))", "all x y.((ExclusiveReplacement(x) & StandardMercuryThermometer(y)) -> AlcoholThermometer(x))", "(ObviousReplacementForMercuryThermometer(a) & AlcoholThermometer(b))", "all x.(ObviousReplacement(x) -> AlcoholThermometer(x))"]}
{"id": "eqasc_validation_378", "nl": "A mercury or alcohol containing device is used to measure temperature.", "fol": "", "prediction": ["all x.((Device(x) & (Mercury(x) | Alcohol(x))) -> MeasuresTemperature(x))", "all x y.((Device(x) & (Mercury(x) | Alcohol(x))) -> MeasuresTemperature(x,y))", "all x.((Device(x) & MeasuresTemperature(x)) -> (Mercury(x) | Alcohol(x)))", "all x.((MercuryDevice(x) | AlcoholContentingDevice(x)) -> MeasuresTemperature(x))", "all x.((Device(x) & (Mercury(x) | Alcohol(x))) -> MeasuresTemperature(x))", "all x y.((Device(x) & (Mercury(y) | Alcohol(y))) -> MeasuresTemperature(x,y))", "all x.(MeasuresTemperature(x) -> (MercuryDevice(x) | AlcoholContentingDevice(x)))", "exists x.(Device(x) & MeasuresTemperature(x) & (Mercury(x) | Alcohol(x)))", "all x.((MercuryDevice(x) | AlcoholContentingDevice(x)) -> MeasuresTemperature(x))", "all x y.((Device(x) & (MeasuresTemperature(x,y) | MeasuresTemperature(x,y))) -> MercuryOrAlcoholContent(x))", "exists x.(Device(x) & (Mercury(x) | Alcohol(x)) & MeasuresTemperature(x))", "all x y.((Device(x) & (Mercury(x) | Alcohol(x))) -> MeasuresTemperature(x,y))", "all x.((Device(x) & (Mercury(x) | Alcohol(x))) -> MeasuresTemperature(x))", "all x y.((Device(x) & Temperature(y)) -> (Mercury(x) | Alcohol(x)))", "all x.((Device(x) & MeasuresTemperature(x)) -> (Mercury(x) | Alcohol(x)))", "exists x.(Mercury(x) | AlcoholContentingDevice(x))"]}
{"id": "eqasc_validation_379", "nl": "a vehicle is used for travel", "fol": "", "prediction": ["all x y.((Vehicle(x) & Vehicle(y)) -> UsedForTravel(x,y))", "all x.(Vehicle(x) -> UsedForTravel(x))", "all x.((Vehicle(x) & UsedForTravel(x)) -> UsedForTravel(x))", "all x y z.((Vehicle(x) & Travel(y) & Travel(z)) -> UsedFor(x,y,z))", "all x y.((Vehicle(x) & Travel(y)) -> UsedFor(x,y))", "all x y.((Vehicle(x) & Vehicle(y) & UsedForTravel(x,y)) -> UsedForTravel(x,y))", "all x y z.((Vehicle(x) & Travel(y) & Travel(z)) -> UsedFor(x,y,z))", "all x.(Vehicle(x) -> UsedForTravel(x))", "all x.((Vehicle(x) & UsedForTravel(x)) -> UsedForTravel(x))", "all x y z.((Vehicle(x) & Travel(y) & Vehicle(z) & UsedFor(x,y)) -> UsedFor(x,z))", "all x y.((Vehicle(x) & UsedForTravel(x)) -> UsedForTravel(y))", "all x y.((Vehicle(x) & TravelVehicle(y)) -> UsedForTravel(x,y))", "all x.(Vehicle(x) -> UsedForTravel(x))", "exists x.(Vehicle(x) & UsedForTravel(x))", "exists x.(Vehicle(x) & UsedForTravel(x))", "exists x.(Vehicle(x) & UsedForTravel(x))"]}
{"id": "eqasc_validation_380", "nl": "trucks and cars are used for travel", "fol": "", "prediction": ["all x y.((LKW(x) & Car(y)) -> (UsedForTravel(x,y) & UsedForTravel(x,y)))", "all x.((LKW(x) | Car(x)) -> UsedForTravel(x))", "all x y z.((Truck(x) & Car(y) & Truck(z)) -> UsedForTravel(x,y,z))", "all x y z.((LKW(x) & Car(y) & Truck(z)) -> (UsedForTravel(x,y,z) & UsedForTravel(y,z)))", "all x.((Truck(x) | Car(x)) -> UsedForTravel(x))", "all x y.((Truck(x) & Car(y)) -> (UsedForTravel(x,y) & UsedForTravel(x,y)))", "(UsedForTravel(trucks) & UsedForTravel(cars))", "(Travel(LKW) & Travel(Car))", "(all x.((LKW(x) | Car(x)) & UsedForTravel(x)) -> Travel(x))", "all x.((LKWs(x) | Cars(x)) -> UsedForTravel(x))", "(Travel(trucks) & Travel(cars))", "all x y.((LKW(x) & Car(y)) -> UsedForTravel(x,y))", "all x.((LKW(x) | Car(x)) -> UsedForTravel(x))", "all x y z.((Truck(x) & Car(y) & Truck(z)) -> UsedForTravel(x,z))", "all x.((Truck(x) | Car(x)) -> UsedForTravel(x))", "all x.((Truck(x) | Car(x)) -> UsedForTravel(x))"]}
{"id": "eqasc_validation_381", "nl": "Vehicle emissions are a major cause of air pollution.", "fol": "", "prediction": ["all x.(VehicleEmissions(x) -> MajorCauseOfAirPollution(x))", "all x y.((VehicleEmission(x) & AirPollution(y)) -> MajorCause(x,y))", "all x.(VehicleEmissions(x) -> MajorCauseOfAirPollution(x))", "all x.((VehicleEmissions(x) & MajorCauseOfAirPollution(x)) -> MajorCauseOfAirPollution(x))", "all x y z.((VehicleEmission(x) & AirPollution(y) & AirPollution(z)) -> MajorCause(x,y,z))", "(MajorCauseOfAirPollution(vehicleEmissions) & Vehicle(vehicle))", "all x y.((VehicleEmissions(x) & AirPollution(y)) -> MajorCause(x,y))", "all x y.((VehicleEmission(x) & AirPollution(y)) -> MajorCause(x,y))", "all x.(VehicleEmissions(x) -> MajorCauseOfAirPollution(x))", "all x.((VehicleEmissions(x) & AirPollution(x)) -> MajorCause(x))", "all x.(VehicleEmission(x) -> MajorCauseOfAirPollution(x))", "all x.(VehicleEmissions(x) -> MajorAirPollutionCause(x))", "all x.(VehicleEmissions(x) -> MajorCauseOfAirPollution(x))", "all x y.((VehicleEmission(x) & AirPollution(y)) -> MajorCause(x,y))", "all x y.((VehicleEmissions(x) & AirPollution(y)) -> MajorCause(x,y))", "all x.(VehicleEmissions(x) -> MajorCauseOfAirPollution(x))"]}
{"id": "eqasc_validation_382", "nl": "Traveling is a cause of air pollution.", "fol": "", "prediction": ["all x.(Travels(x) -> CauseOfAirPollution(x))", "all x.(Travel(x) -> CauseOfAirPollution(x))", "all x y.((Travel(x) & AirPollution(y)) -> Cause(x,y))", "all x.(Travels(x) -> CauseOfAirPollution(x))", "all x.(Travel(x) -> CauseOfAirPollution(x))", "all x y.((Travel(x) & AirPollution(y) & Cause(x,y)) -> Cause(x,y))", "all x y.((Travel(x) & AirPollution(y)) -> Cause(x,y))", "all x.(Traveling(x) -> CauseOfAirPollution(x))", "all x y.((Traveling(x) & AirPollution(y)) -> Cause(x,y))", "all x.(Travels(x) -> CauseOfAirPollution(x))", "all x y.((Travel(x) & AirPollution(y) & Cause(x,y)) -> Cause(x,y))", "all x.(Traveling(x) -> CauseOfAirPollution(x))", "all x.(Traveling(x) -> AirPollution(x))", "exists x.(Traveling(x) & AirPollution(x))", "all x.(Traveling(x) -> CauseOfAirPollution(x))", "exists x.(Traveling(x) & AirPollution(x))"]}
{"id": "eqasc_validation_383", "nl": "Motorcycles are considered additional vehicles.", "fol": "", "prediction": ["all x.(Motorcycle(x) -> AdditionalVehicle(x))", "all x.(Motorcycle(x) -> AdditionalVehicle(x))", "all x y.((Motorcycle(x) & Vehicle(y)) -> Additional(x,y))", "(AdditionalVehicle(motocycle,x))", "all x.((Motorcycle(x) & Vehicle(y)) -> Additional(x,y))", "all x.(Motorcycle(x) -> AdditionalVehicle(x))", "(AdditionalVehicle(motocycle)", "all x y.((Motorcycle(x) & Vehicle(y)) -> Additional(x,y))", "all x.(Motorcycle(x) -> AdditionalVehicle(x))", "all x.(Motorcycle(x) -> AdditionalVehicle(x))", "all x.((Motorcycle(x) & Vehicle(x)) -> Additional(x))", "all x y.((Motorcycle(x) & Vehicle(y)) -> Additional(x,y))", "all x.(Motorcycle(x) -> AdditionalVehicle(x))", "all x.(Motorcycle(x) -> AdditionalVehicle(x))", "all x.(Motorcycle(x) -> AdditionalVehicle(x))", "all x.(Motorcycle(x) -> ExtraVehicle(x))"]}
{"id": "eqasc_validation_384", "nl": "motorcycles are used for travel", "fol": "", "prediction": ["all x.(Motorcycle(x) -> UsedForTravel(x))", "all x y.((Motorcycle(x) & Travel(y)) -> UsedFor(x,y))", "all x y z.((Motorcycle(x) & Travel(y) & Travel(z)) -> UsedFor(x,y,z))", "all x.(Motorcycle(x) -> UsedForTravel(x))", "all x y.((Motorcycle(x) & Traveler(y)) -> UsedFor(x,y))", "(all x.(Motorcycle(x) -> UsedForTravel(x)))", "all x y.((Motorcycle(x) & Motorcycle(y)) -> UsedForTravel(x,y))", "all x.(Motorcycle(x) -> UsedForTravel(x))", "(all x.(Motorcycle(x) -> UsedForTravel(x,Motorcycle)))", "all x y z.((Motorcycle(x) & Travel(y) & Travel(z)) -> UsedFor(x,y,z))", "all x.((Motorcycle(x) & UsedForTravel(x)) -> UsedForTravel(x))", "all x y.((Motorcycle(x) & Traveler(y)) -> UsedFor(x,y))", "all x.(Motorcycle(x) -> UsedForTravel(x))", "all x.(Motorcycle(x) -> UsedForTravel(x))", "all x.(Motorcycle(x) -> UsedForTravel(x))", "all x.(Motorcycle(x) -> UsedForTravel(x))"]}
{"id": "eqasc_validation_385", "nl": "Trucks and cars are used for travel", "fol": "", "prediction": ["all x y.((Truck(x) & Car(y)) -> (UsedForTravel(x,y) & UsedForTravel(x,y)))", "all x y z.((Truck(x) & Car(y) & Truck(z)) -> UsedForTravel(x,y,z))", "all x.((Truck(x) | Car(x)) -> UsedForTravel(x))", "all x y z.((Truck(x) & Car(y) & Truck(z)) -> (UsedForTravel(x,y,z) & UsedForTravel(y,z)))", "all x y.((Truck(x) & Car(y)) -> (UsedForTravel(x,y) & UsedForTravel(x,y)))", "(UsedForTravel(Trucks,Travel) & UsedForTravel(Cars,Travel))", "(Travel(truck) & Travel(car))", "all x.((Truck(x) | Car(x)) -> UsedForTravel(x))", "(Travel(Trucks) & Travel(Cars))", "(Travel(trucks) & Travel(cars))", "all x y.((Truck(x) & Car(y)) -> UsedForTravel(x,y))", "all x y z.((Truck(x) & Car(y) & Travel(z)) -> (UsedFor(x,z) & UsedFor(y,z)))", "all x y.((Truck(x) | Car(y)) -> UsedForTravel(x,y))", "all x.((Truck(x) | Car(x)) -> UsedForTravel(x))", "all x.((Truck(x) | Car(x)) -> UsedForTravel(x))", "all x.((Truck(x) | Car(x)) -> UsedForTravel(x))"]}
{"id": "eqasc_validation_386", "nl": "trucks are used for travel", "fol": "", "prediction": ["all x.(Truck(x) -> UsedForTravel(x))", "all x y.((Truck(x) & Travel(y)) -> UsedFor(x,y))", "all x.(Truck(x) -> UsedForTravel(x))", "all x y z.((Truck(x) & Truck(y) & Travel(z)) -> UsedFor(x,y,z))", "all x y.((Truck(x) & Truck(y)) -> UsedForTravel(x,y))", "all x.(Truck(x) -> (UsedForTravel(x) & Travel(x)))", "(all x.(Truck(x) -> UsedForTravel(x)))", "all x.(Truck(x) -> UsedForTravel(x))", "all x y.((Truck(x) & Traveler(y)) -> UsedFor(x,y))", "all x y z.((Truck(x) & Travel(y) & Truck(z)) -> UsedFor(x,y,z))", "(all x.(Truck(x) -> UsedForTravel(x)))", "all x.(Lift(x) -> UsedForTravel(x))", "all x.(Truck(x) -> (UsedForTravel(x) & Travels(x)))", "all x y.((Truck(x) & Truck(y)) -> UsedForTravel(x,y))", "all x.(LKW(x) -> UsedForTravel(x))", "all x.(Truck(x) -> UsedForTravel(x))"]}
{"id": "eqasc_validation_387", "nl": " A car is used for travel.", "fol": "", "prediction": ["all x.(Car(x) -> UsedForTravel(x))", "all x.(Car(x) -> UsedForTravel(x))", "all x y.((Car(x) & Traveler(y)) -> UsedFor(x,y))", "all x.(Car(x) -> UsedForTravel(x))", "all x y.((Car(x) & Traveler(y)) -> UsedFor(x,y))", "all x.(Car(x) -> UsedForTravel(x))", "all x y.((Car(x) & Traveler(y)) -> UsedFor(x,y))", "all x.(Car(x) -> UsedForTravel(x))", "all x y.((Car(x) & Travels(y,x)) -> UsedFor(x,y))", "all x y.((Car(x) & Traveler(y)) -> UsedFor(x,y))", "all x.(Car(x) -> UsedForTravel(x))", "exists x.(Car(x) & UsedForTravel(x))", "exists x.(Car(x) & UsedForTravel(x))", "exists x.(Car(x) & UsedFor(x,Travel,Travel))", "exists x.(Car(x) & UsedForTravel(x))", "exists x.(Car(x) & UsedForTravel(x))"]}
{"id": "eqasc_validation_388", "nl": "Cars and trucks are used for travel.", "fol": "", "prediction": ["all x.((Car(x) | Truck(x)) -> UsedForTravel(x))", "all x y.((Car(x) | Truck(y)) -> UsedForTravel(x))", "all x y.((Car(x) & Truck(y)) -> UsedForTravel(x,y))", "all x.((Car(x) | Truck(x)) -> UsedForTravel(x))", "(Travel(car) | Travel(truck))", "(UsedForTravel(cars,travel) & UsedForTravel(trucks,travel))", "all x.(Car(x) | Truck(x)) -> UsedForTravel(x))", "all x y z.((Car(x) | Truck(y)) -> UsedForTravel(x,y,z))", "all x y.((Car(x) | Truck(y)) -> UsedForTravel(x,y))", "all x.((Car(x) | Truck(x)) -> UsedForTravel(x))", "(all x.(Car(x) & All(x)) -> UsedForTravel(x))", "all x y.((Car(x) & Truck(y)) -> UsedForTravel(x,y))", "all x.((Car(x) | Truck(x)) -> UsedForTravel(x))", "exists x.(Car(x) & Truck(x) & UsedForTravel(x))", "all x y.((Car(x) | Truck(y)) -> UsedForTravel(x,y))", "all x.((Car(x) | Truck(x)) -> UsedForTravel(x))"]}
{"id": "eqasc_validation_389", "nl": "An airplane is a vehicle that is capable of leaving the ground and flying through the air.", "fol": "", "prediction": ["all x.(Airplane(x) -> (Vehicle(x) & LeavesGround(x) & FliesThroughAir(x)))", "all x.(Airplane(x) -> (Vehicle(x) & LeavesGround(x) & FliesThroughAir(x)))", "all x.(Airplane(x) -> (Vehicle(x) & LeavesGround(x) & FliesThroughAir(x)))", "all x y.((Airplane(x) & Ground(y)) -> (Leaves(x,y) & FliesThroughAir(x)))", "all x y.((Airplane(x) & Ground(y)) -> (Leaving(x,y) & FlyingThroughAir(x)))", "all x.(Airplane(x) -> (LeavesGround(x) & FliesThroughAir(x)))", "all x.(Airplane(x) -> (Vehicle(x) & LeavesGround(x) & FliesThroughAir(x)))", "all x.(Airplane(x) -> (Vehicle(x) & LeavesGround(x) & FliesThroughAir(x)))", "all x y.((Airplane(x) & Ground(y)) -> (Leaves(x,y) & FliesThroughAir(x,y)))", "all x.(Airplane(x) -> (LeavingGround(x) & FlyingThroughAir(x)))", "all x y.((Airplane(x) & Ground(y)) -> (Leaving(x,y) & Flying(x,y)))", "exists x.(Airplane(x) & Vehicle(x) & LeavesGround(x) & FliesThroughAir(x))", "all x.(Airplane(x) -> (Vehicle(x) & LeavesGround(x) & FliesThroughAir(x)))", "exists x.(Airplane(x) & Vehicle(x) & LeavesGround(x) & FliesThroughAir(x))", "all x.(Airplane(x) -> (Vehicle(x) & LeavesGround(x) & FlysThroughAir(x)))", "all x.(Airplane(x) -> (Vehicle(x) & LeavesGround(x) & FlysThroughAir(x)))"]}
{"id": "eqasc_validation_390", "nl": "An airplane can be used to travel high above the ground.", "fol": "", "prediction": ["all x.(Airplane(x) -> TravelsHighAboveGround(x))", "all x y.((Airplane(x) & Ground(y)) -> TravelsHighAbove(x,y))", "all x.(Airplane(x) -> TravelsHighAboveGround(x))", "all x y z.((Airplane(x) & Ground(y) & Ground(z)) -> TravelsHighAbove(x,y,z))", "all x y.((Airplane(x) & Ground(y)) -> TravelsHighAbove(x,y))", "all x.(Airplane(x) -> CanTravelHighAboveGround(x))", "all x.(Airplane(x) -> TravelsHighAboveGround(x))", "all x y.((Airplane(x) & Ground(y)) -> CanTravelHighAbove(x,y))", "all x.(Airplane(x) -> CanTravelHighAboveGround(x))", "all x y.((Airplane(x) & Ground(y)) -> TravelsHighAbove(x,y))", "all x.(Airplane(x) -> TravelsHighAboveGround(x))", "all x.(Airplane(x) -> HighAboveGround(x))", "exists x.(Airplane(x) & HighAboveGround(x))", "exists x.(Airplane(x) & HighAboveGround(x))", "exists x.(Airplane(x) & HighAboveGround(x))", "exists x.(Airplane(x) & HighAboveGround(x))"]}
{"id": "eqasc_validation_391", "nl": "All travel requires navigation in some form or another.", "fol": "", "prediction": ["all x.(Travel(x) -> RequiresNavigation(x))", "all x.(Travel(x) -> (RequiresNavigation(x) & InSomeFormOrAnother(x)))", "all x.(Travel(x) -> RequiresNavigation(x))", "all x y.((Travel(x) & Form(y)) -> RequiresNavigation(x,y))", "all x y.((Travel(x) & FormOrForm(y)) -> RequiresNavigation(x,y))", "(all x.(Travel(x) -> RequiresNavigation(x)))", "all x y.(Travel(x) -> RequiresNavigation(x,y))", "all x.(Travel(x) -> (RequiresNavigation(x) & InSomeFormOrAnother(x)))", "all x.(Travel(x) -> exists y.(Navigation(y) & Requires(x,y))))", "all x y.(Travel(x) & FormOrForm(y)) -> RequiresNavigation(x,y))", "all x.(Travel(x) -> RequiresNavigation(x))", "(all x.(Travel(x) -> RequiresNavigation(x,y)))", "all x.(Travel(x) -> (RequiresNavigation(x) & InSomeFormOrAnother(x)))", "all x.(Travel(x) -> RequiresNavigation(x))", "all x.(Travel(x) -> exists y.(Navigation(y) & Requires(x,y)))", "exists x.(Travel(x) & RequiresNavigation(x))"]}
{"id": "eqasc_validation_392", "nl": "A vehicle in use requires navigation", "fol": "", "prediction": ["all x.((Vehicle(x) & InUse(x)) -> RequiresNavigation(x))", "all x y.((Vehicle(x) & InUse(x)) -> RequiresNavigation(x,y))", "all x.((Vehicle(x) & InUse(x)) -> RequiresNavigation(x))", "all x y z.((Vehicle(x) & InUse(x) & Navigation(y) & Navigation(z)) -> Requires(x,y,z))", "all x y.((Vehicle(x) & InUse(x) & RequiresNavigation(x,y)) -> RequiresNavigation(x,y))", "all x y.((Vehicle(x) & InUse(x)) -> RequiresNavigation(x,y))", "all x.((VehicleInUse(x) & RequiresNavigation(x)) -> RequiresNavigation(x))", "all x.(Vehicle(x) & InUse(x) -> RequiresNavigation(x))", "all x.((Vehicle(x) & InUse(x)) -> RequiresNavigation(x))", "all x.(Vehicle(x) -> (InUse(x) & RequiresNavigation(x)))", "all x.((Vehicle(x) & InUse(x)) -> RequiresNavigation(x))", "all x y.((Vehicle(x) & InUse(x) & RequiresNavigation(y)) -> RequiresNavigation(x,y))", "all x y.((Vehicle(x) & InUse(x)) -> RequiresNavigation(x,y))", "all x.((Vehicle(x) & InUse(x)) -> RequiresNavigation(x))", "all x.((Vehicle(x) & InUse(x)) -> RequiresNavigation(x))", "all x.((Vehicle(x) & InUse(x)) -> RequiresNaviation(x))"]}
{"id": "eqasc_validation_393", "nl": "if weather is stormy then there is a greater chance of rain", "fol": "", "prediction": ["all x.((Weather(x) & Stormy(x)) -> GreaterChanceOfRain(x))", "all x y.((Weather(x) & Stormy(x)) -> GreaterChanceOfRain(y))", "all x.(StormyWeather(x) -> GreaterChanceOfRain(x))", "all x.((Weather(x) & Stormy(x)) -> GreaterChanceOfRain(x))", "all x.(StormyWeather(x) -> GreaterChanceOfRain(x))", "exists x,y,z.(StormyWeather(x) & Rain(y) & GreaterChanceOf(z,y))", "all x y.((Weather(x) & Stormy(x)) -> GreaterChanceOfRain(y))", "(StormyWeather(storm) -> GreaterChanceOfRain(storm))", "all x.((Weather(x) & Stormy(x)) -> GreaterChanceOfRain(x))", "all x y z.((Weather(x) & Stormy(x) & Rain(y) & Rain(z)) -> GreaterChanceOf(x,y,z))", "exists x.(StormyWeather(x) & GreaterChanceOfRain(x))", "all x y.((Weather(x) & Stormy(x)) -> GreaterChanceOfRain(y))", "exists x,y,z.(StormyWeather(x) & Rain(y) & GreaterChanceOf(x,z))", "all x.((Weather(x) & Stormy(x)) -> GreaterChanceOfRain(x))", "all x y.((Weather(x) & Stormy(x)) -> GreaterChanceOfRain(y))", "all x.((Weather(x) & Stormy(x)) -> GreaterChanceOfRain(x))"]}
{"id": "eqasc_validation_394", "nl": "For example, in the sentence The rain destroyed the crops , The rain is the subject.", "fol": "", "prediction": ["all x y.((Punch(x) & Rain(y) & DestroyedCrops(y)) -> RainSubject(x,y))", "all x y z.((Punch(x) & Rain(y) & Crops(z) & DestroyedBy(y,z)) -> Subject(x))", "(See sentence The RainDisruptedCrops(Rain) & RainSubject(Rain))", "all x.((Putin(x) & Rain(x) & DestroyedCrops(x)) -> RainSubject(x))", "(For example, in the sentence The RainDestroyedCrops(x) & Rain(x))", "(See sentence The RainDestroyedCrops(Rain) & RainSubject(Rain))", "all x.((Pension(x) & RainDisturbedCrops(x)) -> RainSubject(x))", "all x y.((Pension(x) & Rain(y) & DestroyedCrops(x,y)) -> RainSubject(x,y))", "((Putiny(Rain) & DestroyedCrops(Rain)) -> Subject(Rain))", "-(RainDisruptedCrops(x) & RainSubject(x))", "(Example: In sentence The RainDisruptedCrops(x) & RainSubject(x))", "all x y.((Putin(x) & Rain(y) & DestroyedCrops(y,x)) -> Subject(x,y))", "all x.((Parent(x) & RainDisturbedCrops(x)) -> RainSubject(x))", "all x y z.((Pension(x) & Rain(y) & Crops(z) & Destroyed(y,z)) -> Subject(x))", "(See Example(RainDisruptedCrops(Rain) & RainSubject(Rain))", "(For example, in the sentence The RainDestroyedCrops(x) & Rain(x))"]}
{"id": "eqasc_validation_395", "nl": "If weather is stormy then there is a chance of destroyed crops", "fol": "", "prediction": ["all x.((Weather(x) & Stormy(x)) -> ChanceOfDisruptedCrops(x))", "all x.(StormyWeather(x) -> ChanceOfDisruptedCrops(x))", "all x y.((Weather(x) & Stormy(x)) -> ChanceOfDisruptedCrops(y))", "all x.((Weather(x) & Stormy(x)) -> ChanceOfDestroyingCrops(x))", "all x.((WeatherStormy(x) & ChanceOfDestroyingCrops(x)) -> Stormy(x))", "all x.(StormyWeather(x) -> ChanceOfDamagedCrops(x))", "all x y.((Weather(x) & Stormy(x)) -> ChanceOfDestroyingCrops(y))", "all x.(StormyWeather(x) -> ChanceOfDisruptedCrops(x))", "(StormyWeather(storm) -> ChanceOfDestroyingCrops(s))", "all x y.((StormyWeather(x) & Stormy(x)) -> ChanceOfDisruptedCrops(y))", "all x.((WeatherStormy(x) & ChanceOfDisruptedCrops(x)) -> Stormy(x))", "all x.((Weather(x) & Stormy(x)) -> ChanceOfDestroyedCrops(x))", "(StormyWeather(storm) -> ChanceOfDamagedCrops(s))", "all x y.((Weather(x) & Stormy(x)) -> ChanceOfDestroyedCrops(y))", "exists x.(StormyWeather(x) & ChanceOfDestroyingCrops(x))", "all x y.((Weather(x) & Stormy(x)) -> ChanceOfDamagedCrops(y))"]}
{"id": "eqasc_validation_396", "nl": "Spring days can be stormy.", "fol": "", "prediction": ["all x.(SpringDay(x) -> Stormy(x))", "all x.(SpringDay(x) -> Stormy(x))", "(Stormy(SpringDays))", "all x y.((SpringDay(x) & Stormy(y)) -> CanBe(x,y))", "all x.((SpringDay(x) & Stormy(x)) -> CanBe(x))", "all x.(SpringDay(x) -> Stormy(x))", "(Stormy(SpringDays) | Stormy(SpringDays)))", "(Stormy(SpringDays))", "all x y.((SpringDay(x) & Stormy(y)) -> CanBe(x,y))", "all x.(SpringDay(x) -> CanBeStormy(x))", "all x.((SpringDay(x) & Stormy(x)) -> CanBe(x))", "all x.(SpringDay(x) -> Stormy(x))", "all x y.((SpringDay(x) & SpringDay(y)) -> Stormy(x))", "all x.(SpringDay(x) -> Stormy(x))", "exists x.(Snowy(x) & SpringDay(x))", "exists x.(SpringDay(x) & Stormy(x))"]}
{"id": "eqasc_validation_397", "nl": "Spring days can see rain weather", "fol": "", "prediction": ["all x.(SpringDay(x) -> CanSeeRainWeather(x))", "all x y.((SpringDay(x) & RainWeather(y)) -> CanSee(x,y))", "all x.((SpringDay(x) & RainWeather(x)) -> CanSee(x,y))", "(SeesRainWeather(SpringDays) & SpringDays(SpringDays))", "all x.(SpringDay(x) -> CanSeeRainWeather(x))", "(all x.(SpringDay(x) -> CanSeeRainWeather(x)))", "all x.(SpringDay(x) -> (SeesRainWeather(x) & SpringDay(x)))", "(SeesRainWeather(SpringDays) & SpringDaysCanSeeRainWeather(SpringDays))", "all x y.((SpringDay(x) & RainWeather(y)) -> CanSee(x,y))", "all x y.((SpringDay(x) & SpringDay(y)) -> CanSeeRainWeather(x,y))", "all x y z.((SpringDay(x) & RainWeather(y) & SpringDay(z)) -> CanSee(x,y,z))", "(all x.(SpringDay(x) -> SeesRainWeather(x)))", "all x.(SpringDay(x) -> RainWeather(x))", "all x y.((SpringDay(x) & RainWeather(y)) -> CanSee(x,y))", "all x.(SpringDay(x) -> CanSeeRainWeather(x))", "all x.(SpringDays(x) -> CanSeeRainWeather(x))"]}
{"id": "eqasc_validation_398", "nl": "Low pressure is generally associated with cloudy or stormy weather.", "fol": "", "prediction": ["all x.(LowPressure(x) -> (CloudyWeather(x) | StormyWeather(x)))", "all x y.((LowPressure(x) & (CloudyWeather(y) | StormyWeather(y))) -> AssociatedWith(x,y))", "all x.((LowPressure(x) & (CloudyWeather(x) | StormyWeather(x))) -> Associates(x,y))", "all x.(LowPressure(x) -> (CloudyWeather(x) | StormyWeather(x)))", "all x y.((LowPressure(x) & Weather(y)) -> (Cloudy(y) | Stormy(y)))", "(all x.(LowPressure(x) -> CloudyOrStormyWeather(x)))", "all x.((LowPressure(x) & (CloudyWeather(x) | StormyWeather(x))) -> AssociatedWith(x,y))", "all x.(LowPressure(x) -> (CloudyWeather(x) | StormyWeather(x)))", "all x y.((LowPressure(x) & (CloudyWeather(y) | StormyWeather(y))) -> Associates(x,y))", "(all x.(LowPressure(x) -> CloudyOrStormyWeather(x)))", "all x.(LowPressure(x) -> (CloudyWeather(x) | StormyWeather(x)))", "all x.((LowPressure(x) & (CloudyWeather(x) | StormyWeather(x))) -> Assocated(x))", "all x y.((LowPressure(x) & Weather(y)) -> (Cloudy(x) | Stormy(x)))", "all x.(LowPressure(x) -> (CloudyWeather(x) | StormyWeather(x)))", "all x.(LowPressure(x) -> (CloudyWeather(x) | StormyWeather(x)))", "all x.(LowPressure(x) -> (CloudyWeather(x) | StormyWeather(x)))"]}
{"id": "eqasc_validation_399", "nl": "low pressure causes a greater chance of rain", "fol": "", "prediction": ["all x.(LowPressure(x) -> GreaterChanceOfRain(x))", "all x y.((LowPressure(x) & Rain(y)) -> GreaterChanceOf(x,y))", "all x.((LowPressure(x) & GreaterChanceOfRain(x)) -> CausesLowPressure(x))", "(LowPressureCausesGreaterChanceOfRain(LowPressure) & CausesGreaterChanceOfRain(LowPressure))", "all x.(LowPressure(x) -> GreaterChanceOfRain(x))", "all x y z.((LowPressure(x) & Rain(y) & ChanceOf(z,y)) -> CausesGreaterChanceOf(x,y))", "all x y.((LowPressure(x) & Rain(y)) -> GreaterChanceOf(x,y))", "all x y.((LowPressure(x) & RainChance(y)) -> CausesGreaterChanceOf(x,y))", "all x.((LowPressure(x) & GreaterChanceOfRain(x)) -> CausesLowPressure(x))", "all x y z.((LowPressure(x) & Rain(y) & Rain(z)) -> GreaterChanceOf(x,y,z))", "all x.(LowPressure(x) -> GreaterChanceOfRain(x))", "all x y.((LowPressure(x) & Rain(y)) -> CausesGreaterChanceOf(x,y))", "all x.((LowPressure(x) & GreaterChanceOfRain(x)) -> CausesLowPressure(x))", "all x.(LowPressureCausesGreaterChanceOfRain(x) -> GreaterChanceOfRain(x))", "all x.((LowPressure(x) & GreaterChanceOfRain(x)) -> LowerPressureCauses(x,Rain))", "all x.(LowPressure(x) -> GreaterChanceOfRain(x))"]}
{"id": "eqasc_validation_400", "nl": "Rapid warming thus increases global storminess, creating perfect conditions for hurricanes.", "fol": "", "prediction": ["all x.(RapidWarming(x) -> (IncreasesGlobalStorminess(x) & CreatesPerfectConditionsForHurricane(x)))", "all x y.((RapidWarming(x) & Hurricane(y)) -> (IncreasesGlobalStorminess(x) & CreatesPerfectConditions(x,y)))", "all x y z.((RapidWarming(x) & GlobalStorminess(y) & Hurricane(z)) -> (Increases(x,y) & CreatesPerfectConditions(x,z)))", "all x y.((RapidWarming(x) & Hurricane(y)) -> (IncreasesGlobalStorminess(x,y) & CreatesPerfectConditions(x,y)))", "all x.(RapidWarming(x) -> (IncreasesGlobalStorminess(x) & CreatesPerfectConditionsForHurricans(x)))", "(GlobalStorminess(r) & PerfectConditionsForHurricane(r))", "all x.((RapidWarming(x) & IncreasesGlobalStorminess(x) & CreatesPerfectConditionsForHurricanes(x)) -> IncreasesGlobalStorminess(x))", "all x y.((RapidWarming(x) & GlobalStorminess(y)) -> IncreasesAndCreatesPerfectConditionsForHurricane(x,y))", "all x y z.((RapidWarming(x) & GlobalStorminess(y) & Hurricane(z)) -> IncreasesAndCreatesPerfectConditions(x,y,z))", "all x.((RapidWarming(x) & IncreasesGlobalStorminess(x) & CreatesPerfectConditionsForHurricans(x)) -> IncreasesGlobalStorminess(x))", "all x.(RapidWarming(x) -> (IncreasesGlobalStorminess(x) & CreatesPerfectConditionsForHurricane(x)))", "all x.(RapidWarming(x) -> IncreasesGlobalStorminess(x))", "All x y z.((RapidWarming(x) & GlobalStorminess(y) & Hurricane(z)) -> (Increases(x,y) & CreatesPerfectConditions(x,z)))", "all x y.((RapidWarming(x) & Hurricane(y)) -> IncreasesGlobalStorminess(x,y))", "all x.(RapidWarming(x) -> IncreasesGlobalStorminess(x) & CreatesPerfectConditionsForHurricane(x))", "all x.(RapidWarming(x) -> (IncreasesGlobalStorminess(x) & CreatesPerfectConditions(x)))"]}
{"id": "eqasc_validation_401", "nl": "hurricanes cause a greater chance of rain", "fol": "", "prediction": ["all x.(Hurricane(x) -> CausesGreaterChanceOfRain(x))", "all x y.((Hurricane(x) & Hurricane(y)) -> CausesGreaterChanceOfRain(x,y))", "all x y z.((Hurricane(x) & Rain(y) & ChanceOfRain(z)) -> CausesGreaterChanceOfRain(x,y,z))", "all x.(Hurricane(x) -> CausesGreaterChanceOfRain(x))", "all x y.((Hurricane(x) & Hurricane(y)) -> CausesGreaterChanceOfRain(x,y))", "all x.(Hurricane(x) -> GreaterChanceOfRain(x))", "all x y.((Hurricane(x) & Hurricane(y)) -> GreaterChanceOfRain(x,y))", "all x y z.((Hurricane(x) & Rain(y) & ChanceOfRain(z)) -> CausesGreaterChanceOf(x,y,z))", "all x.(Hurricane(x) -> CausesGreaterChanceOfRain(x))", "all x y z.((Hurricane(x) & Rain(y) & ChanceOfRain(z)) -> CausesGreaterChanceOfRain(x,y,z))", "all x.(Hurricane(x) -> GreaterChanceOfRain(x))", "all x y.((Hurricane(x) & Rain(y)) -> CausesGreaterChanceOfRain(x,y))", "all x y.((Hurricane(x) & Hurricane(y)) -> GreaterChanceOfRain(x,y))", "all x.(Hurricane(x) -> CausesGreaterChanceOfRain(x))", "all x.(Hurricane(x) -> GreaterChanceOfRain(x))", "all x.(Hurricane(x) -> CausesGreaterChanceOfRain(x))"]}
{"id": "eqasc_validation_402", "nl": "Rain is a wonderful thing, it helps plants grow.", "fol": "", "prediction": ["all x.(Rain(x) -> (WonderfulThing(x) & HelpsPlantsGrow(x)))", "all x y.((Rain(x) & Plant(y)) -> (WonderfulThing(x) & HelpsGrow(x,y)))", "(WonderfulThing(Rain) & HelpsPlantsGrow(Rain))", "all x.(Rain(x) -> (WonderfulThing(x) & HelpsPlantsGrow(x)))", "all x y.((Rain(x) & Plant(y)) -> (WonderfulThing(x) & HelpsGrow(x,y)))", "(WonderfulThing(Rain) & HelpsPlantsGrow(Rain))", "all x.(Rain(x) -> (WonderfulThing(x) & HelpsPlantsGrow(x)))", "all x y.((Rain(x) & Plant(y)) -> HelpsGrow(x,y))", "all x.((Rain(x) & WonderfulThing(x)) -> HelpsPlantsGrow(x))", "exists x.(Rain(x) & WonderfulThing(x) & HelpsPlantsGrow(x))", "(WonderfulThing(Rain) & HelpsPlantsGrow(Rain))", "all x.(Rain(x) -> (WonderfulThing(x) & HelpsPlantsGrow(x)))", "all x y.((Rain(x) & Plant(y)) -> (WonderfulThing(x) & HelpsGrow(x,y)))", "all x y.((Rain(x) & Plant(y)) -> (WonderfulThing(x,y) & HelpsGrow(x,y)))", "all x.(Rain(x) -> (WonderfulThing(x) & HelpsPlantsGrow(x)))", "all x.(Rain(x) -> (WonderfulThing(x) & HelpsPlantsGrow(x)))"]}
{"id": "eqasc_validation_403", "nl": "stormy weather helps plants grow", "fol": "", "prediction": ["all x y.((StormyWeather(x) & Plant(y)) -> HelpsGrow(x,y))", "all x.(StormyWeather(x) -> HelpsPlantsGrow(x))", "all x y z.((StormyWeather(x) & Plant(y) & Plant(z)) -> HelpsGrow(x,y,z))", "all x.((StormyWeather(x) & Plant(y)) -> HelpsGrow(x,y))", "(StormyWeatherHelpsPlantsGrow(storm) & PlantsGrow(storm))", "all x y.((StormyWeather(x) & Plant(y)) -> HelpsGrow(x,y))", "all x y.((StormyWeather(x) & Plant(y)) -> HelpsGrow(x,y))", "stormyWeatherHelpsPlantsGrow(x) & PlantsGrow(x))", "all x.(StormyWeather(x) -> HelpsPlantsGrow(x))", "all x y z.((StormyWeather(x) & Plant(y) & Plant(z)) -> HelpsGrow(x,y,z))", "all x.(StormyWeather(x) -> HelpsPlantsGrow(x))", "all x y z.((StormyWeather(x) & Plant(y) & Plant(z)) -> HelpsGrow(x,y,z))", "all x.((StormyWeather(x) & Plant(y)) -> HelpsGrow(x,y))", "all x y.((StormyWeather(x) & Plant(y)) -> HelpsGrow(x,y))", "all x y.((StormyWeather(x) & Plant(y)) -> HelpsGrow(x,y))", "all x.(StormyWeather(x) -> HelpsPlantsGrow(x))"]}
{"id": "eqasc_validation_404", "nl": "Rain is also known as precipitation.", "fol": "", "prediction": ["all x.(Rain(x) -> Precipitation(x))", "(all x.(Rain(x) -> Precipitation(x)))", "all x.(Rain(x) -> Precipitation(x))", "all x y.((Rain(x) & Precipitation(y)) -> Rain(x))", "all x.(Rain(x) -> Precipitation(x))", "(all x.(Rain(x) -> Precipitation(x)))", "(Precipitation(road,r) & Rain(r))", "all x y.((Rain(x) & Precipitation(y)) -> Rain(x))", "all x.(Rain(x) -> Precipitation(x))", "(all x.(Rain(x) -> Precipitation(x)))", "all x.(Rain(x) -> (Precipitation(x) | Rain(x)))", "all x.(Rain(x) -> Precipitation(x))", "all x.(Rain(x) -> (Precipitation(x) & Rain(x)))", "all x.(Rain(x) -> Precipitation(x))", "exists x.(Rain(x) & Rain(x))", "all x.(Rain(x) -> Precipitation(x))"]}
{"id": "eqasc_validation_405", "nl": "if weather is stormy then there is a greater chance of precipitation", "fol": "", "prediction": ["all x.((Weather(x) & Stormy(x)) -> GreaterChanceOfPrecipitation(x))", "all x y.((Weather(x) & Stormy(x)) -> GreaterChanceOfPrecipitation(y))", "all x.(StormyWeather(x) -> GreaterChanceOfPrecipitation(x))", "all x.((Weather(x) & Stormy(x)) -> GreaterChanceOfPrecipitation(x))", "all x y.((Weather(x) & Stormy(x)) -> GreaterChanceOfPrecipitation(y))", "(StormyWeather(storm) -> GreaterChanceOfPrecipitation(stormy))", "all x.(StormyWeather(x) -> GreaterChanceOfPrecipitation(x))", "all x.((Weather(x) & Stormy(x)) -> GreaterChanceOfPrecipitation(x))", "exists x,y,z.(StormyWeather(x) & ChanceOfPrecipitation(y) & GreaterChanceOfPrecipitation(z))", "all x y z.((Weather(x) & Stormy(x) & ChanceOfPrecipitation(y,z)) -> GreaterChanceOfPrecipitation(z))", "all x.(StormyWeather(x) -> GreaterChanceOfPrecipitation(x))", "exists x,y,z.(StormyWeather(x) & GreaterCauseOfPrecipitation(y))", "all x y.((Weather(x) & Stormy(x)) -> GreaterChanceOfPrecipitation(y))", "all x.((Weather(x) & Stormy(x)) -> GreaterChanceOfPrecipitation(x))", "all x y.((Weather(x) & Stormy(x)) -> GreaterChanceOfPrecipitation(y))", "all x.((Weather(x) & Stormy(x)) -> GreaterChanceOfPrecipitation(x))"]}
{"id": "eqasc_validation_406", "nl": "Unsettled, stormy weather with frequent rain is common, even during the summer.", "fol": "", "prediction": ["all x.((Unsettled(x) & StormyWeather(x) & FrequentRain(x)) -> Common(x))", "all x.((UnsettledStormyWeather(x) & FrequentRain(x)) -> Common(x))", "(UnsettledStormyWeather(unsettled) & FrequentRain(unsettled) & CommonDuringSummer(unsettled,unsettled,unsettled) & CommonDuringSummer(unsettled,unsettled,unsettled) & CommonDuringSummer(unsettled,unsettled,unsettled,unsettled) & CommonDuringSummer(unset", "all x.((StormyWeather(x) & Unsettled(x) & FrequentRain(x)) -> Common(x))", "all x y.((Unsettled(x) & StormyWeather(y) & FrequentRain(y)) -> Common(x,y))", "(UnsettledStormyWeather(s) & FrequentRain(s) & Summer(s) & Common(s))", "all x y.((UnsettledStormyWeather(x) & FrequentRain(y) & Summer(x)) -> Common(x))", "all x.((Unsettled(x) & StormyWeather(x) & FrequentRain(x)) -> Common(x))", "all x.((UnsettledStormyWeather(x) & FrequentRain(x)) -> Common(x))", "(UnsettledStormyWeather(x) & FrequentRain(x))", "all x y.((StormyWeather(x) & Unsettled(x) & Stormy(x) & FrequentRain(x)) -> Common(y))", "all x.((Weather(x) & Unsettled(x) & Stormy(x) & FrequentRain(x)) -> Common(x))", "all x y.((Unsettled(x) & StormyWeather(x) & FrequentRain(x) & Summer(y)) -> Common(x))", "all x.((Unsettled(x) & Stormy(x) & FrequentRain(x)) -> Common(x))", "all x.((StormyWeather(x) & Unsettled(x) & FrequentRain(x)) -> Common(x))", "all x y.((UnsettledStormyWeather(x) & FrequentRain(y)) -> Common(x,y))"]}
{"id": "eqasc_validation_407", "nl": "summer brings storms", "fol": "", "prediction": ["all x.(Summer(x) -> BringsStorms(x))", "all x y.((Summer(x) & Storm(y)) -> Brings(x,y))", "(BringsStorms(summer) & BringsStorms(summer))", "all x y z.((Summer(x) & Storm(y) & Storm(z)) -> Brings(x,y,z))", "all x.(Summer(x) -> BringsStorms(x))", "all x y.((Summer(x) & Storm(y)) -> Brings(x,y))", "(BringsStorms(summer) & BringsStorms(summer))", "summer bringsstorms.", "(BringsStorms(summer,snow) -> BringsStorms(summer,snow))", "all x.(Summer(x) -> BringsStorms(x))", "all x y.((Summer(x) & Storm(y)) -> Brings(x,y))", "summer brings storms and bringsssts(summer)", "summer bringsstorms(summer)", "summer bringsstorms.", "all x.(Summer(x) -> BringsStorms(x))", "all x.(Summer(x) -> BringsStorms(x))"]}
{"id": "eqasc_validation_408", "nl": "Weather is the state of the atmosphere at any particular moment in time.", "fol": "", "prediction": ["all x.(Weather(x) -> AtmosphereState(x))", "all x y.((Weather(x) & MomentInTime(y)) -> StateOfAtmosphere(x,y))", "all x.(Weather(x) -> (AtmosphereState(x) & AtMomentInTime(x)))", "all x y z.((Weather(x) & MomentInTime(y) & MomentInTime(z)) -> StateOfAtmosphere(x,y,z))", "(StateOfAtmosphere(weather) & AtMomentInTime(weather))", "all x.(Weather(x) -> exists y.(MomentInTime(y) & Atmosphere(x,y)))", "all x y.((Weather(x) & MomentInTime(y)) -> StateOfAtmosphere(x,y))", "(StateOfAtmosphere(weather) & SpecificMomentInTime(weather))", "all x.(Weather(x) -> Atmosphere(x))", "all x y z.((Weather(x) & MomentInTime(y) & MomentInTime(z)) -> AtmosphereState(x,y,z))", "all x.(Weather(x) -> (StateOfAtmosphere(x) & ParticularMomentInTime(x)))", "all x y.((Weather(x) & MomentInTime(y)) -> StateOfAtmosphere(x,y))", "all x.(Weather(x) -> (AtmosphereState(x) & MomentInTime(x)))", "all x.(Weather(x) -> Atmosphere(x))", "all x y.((Weather(x) & MomentInTime(y)) -> AtmosphereState(x,y))", "exists x.(Weather(x) & Atmosphere(x) & MomentInTime(x))"]}
{"id": "eqasc_validation_409", "nl": "If the state of the atmosphere is stormy then there is a greater chance of rain", "fol": "", "prediction": ["all x.((StatusOfAtmosphere(x) & Stormy(x)) -> GreaterChanceOfRain(x))", "all x.(StormyAtmosphere(x) -> GreaterChanceOfRain(x))", "all x.((StatusOfAtmosphereStormy(x) & GreaterChanceOfRain(x)) -> GreaterChanceOfRain(x))", "all x y.((StatusOfAtmosphere(x) & Stormy(x)) -> GreaterChanceOfRain(y))", "all x.(StormyAtmosphere(x) -> GreaterChanceOfRain(x))", "all x.((StormyAtmosphere(x) & GreaterChanceOfRain(x)) -> StormyAtmosphere(x))", "all x y.((Status(x) & Stormy(x)) -> GreaterChanceOfRain(y))", "all x.((StatusOfAtmosphere(x) & Stormy(x)) -> GreaterChanceOfRain(x))", "exists x.(StatusOfAtmosphere(x) & Stormy(x)) -> GreaterChanceOfRain(x))", "all x.(StormyAtmosphere(x) -> GreaterChanceOfRain(x))", "all x y.((StatusOfAtmosphere(x) & Stormy(x)) -> GreaterChanceOfRain(y))", "all x y.((Statuation(x) & Stormy(x)) -> GreaterChanceOfRain(y))", "all x.(StormyAtmosphere(x) -> GreaterChanceOfRain(x))", "all x y.((Status(x) & Stormy(x)) -> GreaterChanceOfRain(y))", "exists x.(StatusOfAtmosphere(x) & Stormy(x)) -> GreaterChanceOfRain(x))", "exists x.(StatusOfAtmosphereStormy(x) & GreaterChanceOfRain(x))"]}
{"id": "eqasc_validation_410", "nl": "Rain is our usual form of precipitation.", "fol": "", "prediction": ["all x.(Rain(x) -> Precipitation(x))", "(StandardPrecipitation(Rain) & -StandardPrecipitation(Rain))", "all x y.((Rain(x) & Precipitation(y)) -> UsualForm(x,y))", "(SeasonOfPrecipitation(Rain) -> NormalFormOfPrecipitation(Rain))", "all x.(Rain(x) -> Precipitation(x))", "(StandardPrecipitation(Rain) -> NormalForm(Rain))", "all x y.((Rain(x) & Precipitation(y)) -> NormalForm(x,y))", "(All x.(Rain(x) -> Precipitation(x)))", "all x.(Rain(x) -> Precipitation(x))", "all x.(Rain(x) -> NormalPrecipitation(x))", "all x y.((Rain(x) & Precipitation(y)) -> UsualForm(x,y))", "all x.(Rain(x) -> Precipitation(x))", "all x.(Rain(x) -> NormalPrecipitation(x))", "all x.(Rain(x) -> Precipitation(x))", "All x.(Rain(x) -> Precipitation(x))", "All x.(Rain(x) -> Precipitation(x))"]}
{"id": "eqasc_validation_411", "nl": "If weather is stormy then there is a greater chance of precipitation.", "fol": "", "prediction": ["all x.((Weather(x) & Stormy(x)) -> GreaterChanceOfPrecipitation(x))", "all x.(StormyWeather(x) -> GreaterChanceOfPrecipitation(x))", "all x.((Weather(x) & Stormy(x)) -> GreaterChanceOfPrecipitation(x))", "all x y.((Weather(x) & Stormy(x)) -> GreaterChanceOfPrecipitation(y))", "all x.(StormyWeather(x) -> GreaterChanceOfPrecipitation(x))", "all x.(StormyWeather(x) -> GreaterChanceOfPrecipitation(x))", "all x y.((Weather(x) & Stormy(x)) -> GreaterChanceOfPrecipitation(y))", "all x.((Weather(x) & Stormy(x)) -> GreaterChanceOfPrecipitation(x))", "all x.(StormyWeather(x) -> GreaterChanceOfPrecipitation(x))", "exists x.(Stormy(x) & GreaterChanceOfPrecipitation(x))", "all x y.((Weather(x) & Stormy(x)) -> GreaterChanceOfPrecipitation(y))", "all x.((Weather(x) & Stormy(x)) -> GreaterChanceOfPrecipitation(x))", "exists x.(StormyWeather(x) & GreaterChanceOfPrecipitation(x))", "exists x.(StormyWeather(x) & GreaterChanceOfPrecipitation(x))", "all x y.((Weather(x) & Stormy(x)) -> GreaterChanceOfPrecipitation(y))", "all x.((Weather(x) & Stormy(x)) -> GreaterChanceOfPrecipitation(x))"]}
{"id": "eqasc_validation_412", "nl": "After a heavy rain, they can absorb a large amount of water for the plant.", "fol": "", "prediction": ["all x y.((HeavyRain(x) & Plant(y)) -> AbsorbsLargeAmountOfWater(x,y))", "all x.(HeavyRain(x) -> AbsorbsLargeAmountOfWater(x))", "all x y z.((HeavyRain(x) & Plant(y) & Water(z)) -> AbsorbsLargeAmount(x,y,z))", "(HeavyRain(x) -> AbsorbsLargeAmountOfWater(x))", "all x y.((HeavyRain(x) & Plant(y)) -> AbsorbsLargeAmountOfWater(x,y))", "all x.((HeavyRain(x) & AbsorbsLargeAmountOfWater(x)) -> Plant(x))", "all x.(HeavyRain(x) -> AbsorbsLargeAmountOfWater(x))", "all x y z.((HeavyRain(x) & Plant(y) & Water(z) & Absorbs(x,z)) -> LargeAmountOfWater(x,y,z))", "all x y.((HeavyRain(x) & Plant(y) & AbsorbsLargeAmountOfWater(x,y)) -> CanPlant(x,y))", "all x y z.((HeavyRain(x) & HeavyRain(y) & Plant(z)) -> AbsorbsLargeAmountOfWater(x,z))", "(HeavyRain(x) -> AbsorbsLargeAmountOfWater(x))", "all x y.((HeavyRain(x) & Plant(y)) -> AbsorbsLargeAmountOfWater(x,y))", "all x.((HeavyRain(x) & AbsorbsLargeAmountOfWater(x,y)) -> Plant(y))", "all x.(HeavyRain(x) -> AbsorbLargeAmountOfWater(x))", "all x.(HeavyRain(x) -> CanAbsorbLargeAmountOfWater(x))", "all x y.((HeavyRain(x) & Plant(y)) -> CanAbsorbLargeAmountOfWater(x,y))"]}
{"id": "eqasc_validation_413", "nl": "if weather is stormy then plants will absorb water", "fol": "", "prediction": ["all x.((Weather(x) & Stormy(x)) -> PlantsAbsorbWater(x))", "all x y.((Weather(x) & Stormy(x)) -> PlantsAbsorbWater(y))", "all x.((WeatherStormy(x) & PlantsAbsorbWater(x)) -> AbsorbWater(x))", "all x.(StormyWeather(x) -> PlantsAbsorbWater(x))", "all x y z.((Weather(x) & Stormy(x) & Plant(y) & Water(z)) -> Absorbs(y,z))", "all x y.((Weather(x) & Stormy(x)) -> PlantsAbsorbWater(y))", "all x.((Weather(x) & Stormy(x)) -> PlantsAbsorbWater(x))", "-(StormyWeather(s) & PlantsAbsorbWater(s)) -> AbsorbWater(s))", "(StormyWeather(storm) -> AbsorbsWater(plants))", "all x.((WeatherStormy(x) & PlantsAbsorbWater(x)) -> AbsorbWater(x))", "all x y.((Weather(x) & Stormy(x)) -> AbsorbsWater(y))", "(StormyWeather(x) -> AbsorbsWater(x))", "all x.(StormyWeather(x) -> AbsorbsWater(x))", "all x y.((Weather(x) & Stormy(x) & Plants(y)) -> AbsorbsWater(y,x))", "all x y.((Weather(x) & Stormy(x)) -> PlantsAbsorbWater(y))", "all x.((WeatherStormy(x) & PlantsAbsorbWater(x)) -> AbsorbsWater(x))"]}
{"id": "eqasc_validation_414", "nl": "if weather is stormy then there is a greater chance of precipitation.", "fol": "", "prediction": ["all x.((Weather(x) & Stormy(x)) -> GreaterChanceOfPrecipitation(x))", "all x.(StormyWeather(x) -> GreaterChanceOfPrecipitation(x))", "all x y.((Weather(x) & Stormy(x)) -> GreaterChanceOfPrecipitation(y))", "all x.((Weather(x) & Stormy(x)) -> GreaterChanceOfPrecipitation(x))", "all x.(StormyWeather(x) -> GreaterChanceOfPrecipitation(x))", "all x y.((Weather(x) & Stormy(x)) -> GreaterChanceOfPrecipitation(y))", "all x.((Weather(x) & Stormy(x)) -> GreaterChanceOfPrecipitation(x))", "exists x.(StormyWeather(x) & GreaterChanceOfPrecipitation(x))", "all x.(StormyWeather(x) -> GreaterChanceOfPrecipitation(x))", "all x y.((Weather(x) & Stormy(x)) -> GreaterChanceOfPrecipitation(y))", "all x.((Weather(x) & Stormy(x)) -> GreaterChanceOfPrecipitation(x))", "exists x.(StormyWeather(x) & GreaterChanceOfPrecipitation(x))", "exists x.(StormyWeather(x) & GreaterChanceOfPrecipitation(x))", "exists x.(StormyWeather(x) & GreaterCauseOfPrecipitation(x))", "all x y.((Weather(x) & Stormy(x)) -> GreaterChanceOfPrecipitation(y))", "all x.((Weather(x) & Stormy(x)) -> GreaterChanceOfPrecipitation(x))"]}
{"id": "eqasc_validation_415", "nl": "Rain is good, but lots of rain causes destructive flooding.", "fol": "", "prediction": ["(all x.(Rain(x) -> Good(x)) & all y.(Rain(y) -> DestructiveFlooding(y))))", "all x.(Rain(x) -> (Good(x) & LotsOfRain(x) & CausesDestructiveFlooding(x)))", "all x y.((Rain(x) & Rain(y)) -> (Good(x) & DestructiveFlooding(y)))", "(all x y.(Rain(x) -> Good(x)) & (LotsOfRain(y) -> DestructiveFlooding(y)))", "(all x.(Rain(x) -> Good(x)) & all y.(Rain(y) -> DestructiveFlooding(y))))", "all x.(Rain(x) -> (Good(x) & LotsOfRain(x) & CausesDestructiveFlooding(x)))", "exists x.(Rain(x) & Good(x) & LotsOfRain(x) & CausesDestructiveFlooding(x))", "all x.(Rain(x) -> (Good(x) & CausesDestructiveFlooding(x)))", "all x y.((Rain(x) & Rain(y)) -> (Good(x) & DestructiveFlooding(y)))", "(all x.(Rain(x) -> Good(x)) & all y.(Rain(y) -> DestructiveFlooding(y))))", "(all x.(Rain(x) -> Good(x)) & (LotsOfRain(x) -> DestructiveFlooding(x)))", "all x.(Rain(x) -> (GoodRain(x) & LotsOfRainCausesDestructiveFlooding(x)))", "all x y.((Rain(x) & Rain(y)) -> (Good(x) | DestructiveFlooding(y)))", "exists x.(Rain(x) & Good(x) & LotsOfRain(x) & CausesDestructiveFlooding(x))", "(all x.(Rain(x) -> Good(x)) & all y.(Rain(y) -> DestructiveFlooding(y)))", "(all x.(Rain(x) -> Good(x)) & all y.(Rain(y) -> DestructiveFlooding(y)))"]}
{"id": "eqasc_validation_416", "nl": "Stormy weather increases the chances of flooding", "fol": "", "prediction": ["all x y.((StormyWeather(x) & FloodingChance(y)) -> Increases(x,y))", "all x.(StormyWeather(x) -> IncreasesChancesOfFlooding(x))", "all x y z.((StormyWeather(x) & FloodingChance(y) & StormyWeather(z)) -> IncreasesChances(x,y,z))", "all x.((StormyWeather(x) & IncreasesChancesOfFlooding(x)) -> IncreasesChancesOfFlooding(x))", "(IncreasesChancesOfFlooding(stormyWeather(s) & StormyWeather(s))", "all x y.((StormyWeather(x) & FloodingChance(y)) -> Increases(x,y))", "all x.(StormyWeather(x) -> IncreasesChancesOfFlooding(x))", "all x y.((StormyWeather(x) & Flooding(y)) -> IncreasesChances(x,y))", "all x y z.((StormyWeather(x) & FloodingChance(y) & FloodingChance(z)) -> Increases(x,y,z))", "all x y.((StormyWeather(x) & FloodingChance(y)) -> Increases(x,y))", "all x.((StormyWeather(x) & IncreasesChancesOfFlooding(x)) -> IncreasesChancesOfFlooding(x))", "(all x.(StormyWeather(x) -> IncreasesChancesOfFlooding(x)))", "all x.(StormyWeather(x) -> IncreasesChancesOfFlooding(x))", "all x.(StormyWeather(x) -> IncreasesChancesOfFlooding(x))", "all x y.((StormyWeather(x) & FloodingChance(y)) -> Increases(x,y))", "all x.(StormyWeather(x) -> IncreasesChancesOfFlooding(x))"]}
{"id": "eqasc_validation_417", "nl": "Erosion is loss of soil caused by rain and wind.", "fol": "", "prediction": ["all x.(Erosion(x) -> (LossOfSoil(x) & CausedByRain(x) & CausedByWind(x)))", "all x y.((Erosion(x) & Soil(y)) -> (LossOf(x,y) & CausedBy(x,y)))", "all x.(Erosion(x) -> (LossOfSoil(x) & CausedByRain(x) & CausedByWind(x)))", "all x.(Erosion(x) -> (LossOfSoil(x) & CausedByRainAndWind(x)))", "(LossOfSoil(erosion) -> (CausedByRain(er) & CausedByWind(er)))", "(LossOfSoil(Erosion) -> CausedByRainAndWind(Erosion))", "all x y.((Erosion(x) & Rain(y) & Wind(y)) -> LossOfSoil(x,y))", "(LossOfSoil(erosion) -> (CausedByRain(er) & CausedByWind(er)))", "all x y z.((Erosion(x) & Rain(y) & Wind(z)) -> LossOfSoil(x,y,z))", "all x y.((Erosion(x) & Soil(y)) -> (LossOf(x,y) & CausedByRainAndWind(x)))", "all x.(Erosion(x) -> (LossOfSoil(x) & CausedByRainAndWind(x)))", "all x.(Erosion(x) -> (LossOfSoil(x) & CausedByRain(x) & CausedByWind(x)))", "All x y.((Erosion(x) & Rain(y) & Wind(y)) -> LossOfSoil(x,y))", "all x.(Erosion(x) -> (LossOfSoil(x) & CausedByRainAndWind(x)))", "all x.(Erosion(x) -> (LossOfSoil(x) & CausedByRainAndWind(x)))", "all x.(Erosion(x) -> (LossOfSoil(x) & CausedByRain(x) & CausedByWind(x)))"]}
{"id": "eqasc_validation_418", "nl": "if weather is stormy then there is a greater chance of Erosion. ", "fol": "", "prediction": ["all x.((Weather(x) & Stormy(x)) -> GreaterChanceOfErosion(x))", "all x.(StormyWeather(x) -> GreaterChanceOfErosion(x))", "all x y.((Weather(x) & Stormy(x)) -> GreaterChanceOfErosion(y))", "all x.((Weather(x) & Stormy(x)) -> GreaterChanceOfErosion(x))", "all x.((WeatherStormy(x) & GreaterChanceOfErosion(x)) -> Stormy(x))", "all x.(StormyWeather(x) -> GreaterChanceOfErosion(x))", "all x y.((Weather(x) & Stormy(x)) -> GreaterChanceOfErosion(y))", "all x.((Weather(x) & Stormy(x)) -> GreaterChanceOfErosion(x))", "(StormyWeather(storm) -> GreaterChanceOfErosion(s))", "exists x.(Stormy(x) & GreaterChanceOfErosion(x))", "exists x.(StormyWeather(x) & GreaterChanceOfErosion(x))", "all x.((Weather(x) & Stormy(x)) -> GreaterChanceOfErosion(x))", "all x y.((Weather(x) & Stormy(x)) -> GreaterChanceOfErosion(y))", "exists x.(StormyWeather(x) & GreaterChanceOfErosion(x))", "all x y.((Weather(x) & Stormy(x)) -> GreaterChanceOfErosion(y))", "all x.((Weather(x) & Stormy(x)) -> GreaterChanceOfErosion(x))"]}
{"id": "eqasc_validation_419", "nl": "Rain Rain reduces visibility and makes pavement dangerous.", "fol": "", "prediction": ["all x.(Rain(x) -> (ReducesVisibility(x) & MakesPacewayDangerous(x)))", "Rain Rain ReducesVisibilityAndMakesPacewayDangerous(Rain)", "(ReducesVisibility(Rain) & MakesPacewayDangerous(Rain))", "all x y.((Rain(x) & Pavement(y)) -> (ReducesVisibility(x,y) & MakesDangerous(x,y)))", "all x.(Rain(x) -> (ReducesVisibility(x) & MakesPavementDangerous(x)))", "Rain Rain ReducesVisibilityAndMakesPavementDangerous(Rain)", "Rain RainReducesVisibilityAndMakesPacewayDangerous(Rain)", "(ReducesVisibility(Rain) & MakesPavementDangerous(Rain))", "(all x.(Rain(x) -> ReducesVisibility(x)) & makesPavementDangerous(x))", "all x y.((Rain(x) & Pavement(y)) -> (ReducesVisibility(x) & MakesDangerous(x,y)))", "all x.(Rain(x) -> (ReducesVisibility(x) & MakesPacewayDangerous(x)))", "Rain Rain ReducesVisibilityAndMakesPacewayDangerous(Rain)", "Rain Rain ReducesVisibilityAndMakesPatioceanDangerous(Rain)", "(ReducesVisibility(Rain) & MakesPacewayDangerous(Rain))", "all x.(Rain(x) -> (ReducesVisibility(x) & MakesPavementDangerous(x)))", "All x.(Rain(x) -> (ReducesVisibility(x) & MakesPacewayDangerous(x)))"]}
{"id": "eqasc_validation_420", "nl": "if weather is stormy then there is a greater chance of reduced visibility", "fol": "", "prediction": ["all x.((Weather(x) & Stormy(x)) -> GreaterChanceOfReducedVisibility(x))", "all x.(StormyWeather(x) -> GreaterChanceOfReducedVisibility(x))", "all x y.((Weather(x) & Stormy(x)) -> GreaterChanceOfReducedVisibility(y))", "(Stormy(weather) -> GreaterChanceOfReducedVisibility(weather))", "all x.((Weather(x) & Stormy(x)) -> GreaterChanceOfReducedVisibility(x))", "all x y.((Weather(x) & Stormy(x)) -> GreaterChanceOfReducedVisibility(y))", "all x.(StormyWeather(x) -> GreaterChanceOfReducedVisibility(x))", "all x.((Weather(x) & Stormy(x)) -> GreaterChanceOfReducedVisibility(x))", "all x y.((Weather(x) & Stormy(x)) -> GreaterChanceOfReducedVisibility(y))", "all x.(StormyWeather(x) -> GreaterChanceOfReducedVisibility(x))", "exists x,y,z.(StormyWeather(x) & GreaterChanceOfReducedVisibility(y))", "all x.((Weather(x) & Stormy(x)) -> GreaterChanceOfReducedVisibility(x))", "all x y.((Weather(x) & Stormy(x)) -> GreaterChanceOfReducedVisibility(y))", "exists x,y,z.(StormyWeather(x) & GreaterChanceOfReducedVisibility(y,z))", "all x y.((Weather(x) & Stormy(x)) -> GreaterChanceOfReducedVisibility(x,y))", "all x.((Weather(x) & Stormy(x)) -> GreaterChanceOfReducedVisibility(x))"]}
{"id": "eqasc_validation_421", "nl": "Protozoa make humans sick when they become human parasites.", "fol": "", "prediction": ["all x y.((Protozoa(x) & HumanParasite(y)) -> MakesHumansSick(x,y))", "all x.((Protozoa(x) & HumanParasite(x)) -> MakesHumansSick(x))", "all x y z.((Protozoa(x) & HumanParasite(y) & Parasite(z)) -> MakesSick(x,y,z))", "all x y.((Protozoa(x) & HumanParasite(y)) -> MakesHumansSick(x,y))", "all x.((Protozoa(x) & HumanParasite(x)) -> MakesHumansSick(x))", "all x y z.((Protozoa(x) & HumanParasite(y) & Human(z)) -> MakesSick(x,y,z))", "all x.(Protozoa(x) -> MakesHumansSick(x))", "all x y.((Protozoa(x) & HumanParasite(y)) -> MakesHumansSick(x,y))", "all x.((Protozoa(x) & HumanParasite(x)) -> MakesHumansSick(x))", "all x.(Protozoa(x) -> (MakesHumansSick(x) & HumanParasite(x)))", "all x y.((Protozoa(x) & HumanParasite(y)) -> MakesSick(x,y))", "(all x.(Protozoa(x) -> MakesHumansSick(x)))", "all x.((Protozoa(x) & HumanParasite(x)) -> MakesHumansSick(x))", "all x y.((Protozoa(x) & HumanParasite(y)) -> MakesHumanSick(x,y))", "all x.((Protozoa(x) & HumanParasite(y)) -> MakesHumansSick(x,y))", "all x y.((Protozoa(x) & HumanParasite(y)) -> MakesSick(x,y))"]}
{"id": "eqasc_validation_422", "nl": "Intestinal parasites and malaria are endemic.", "fol": "", "prediction": ["all x.((IntestinalParasite(x) & Malaria(x)) -> Endemic(x))", "all x y.((IntestinalParasite(x) & Malaria(y)) -> Endemic(x,y))", "all x.((IntestinalParasite(x) & Malaria(x)) -> Endemistic(x))", "(End\u00e9mic) -> (IntestinalParasite(x) | Malaria(x)))", "all x.(IntestinalParasite(x) & Malaria(x)) -> Endemistic(x))", "all x y.((IntestinalParasite(x) & Malaria(y)) -> Endemistic(x))", "(Endemisma(intestinalParasites) & Endemisma(malaria))", "all x.(IntestinalParasite(x) -> (IntestinalParasite(x) & Malaria(x)))", "all x.((IntestinalParasite(x) | Malaria(x)) -> Endemic(x))", "(Endangemic(intestinalParasites) & Endangemic(malaria))", "all x.((IntestinalParasite(x) & Malaria(x)) -> Endemical(x))", "(Endangemic(intestinalParasites(intestinal) & Endangemic(intestinal))", "all x y.((IntestinalParasite(x) & Malaria(y)) -> Endemic(x))", "all x y.((IntestinalParasite(x) & Malaria(y)) -> (End\u00e9mic(x,y) & End\u00e9mic(x,y)))", "all x.(IntestinalParasite(x) -> (IntestinalParasite(x) | Malaria(x)))", "(Endangemic(intestinalParasites) & Endangemic(malaria))"]}
{"id": "eqasc_validation_423", "nl": "intestinal Protozoa make humans sick", "fol": "", "prediction": ["all x y.((IntestinalProtozoa(x) & Human(y)) -> MakesSick(x,y))", "all x.(IntestinalProtozoa(x) -> MakesHumansSick(x))", "all x y z.((IntestinalProtozoa(x) & Human(y) & IntestinalProtozoa(z)) -> MakesSick(x,y,z))", "all x y.((IntestinalProtozoa(x) & Human(y)) -> MakesSick(x,y))", "all x.(IntestinalProtozoa(x) -> MakesHumansSick(x))", "all x y z.((IntestinalProtozoa(x) & Human(y) & IntestinalProtozoa(z)) -> MakesSick(x,y))", "all x y.((IntestinalProtozoa(x) & Human(y)) -> MakesSick(x,y))", "all x y z.((IntestinalProtozoa(x) & Human(y) & Human(z)) -> MakesSick(x,y,z))", "all x.(IntestinalProtozoa(x) -> MakesHumansSick(x))", "All x.(IndividualProtozoa(x) -> MakesHumansSick(x))", "all x y.((IntestinalProtozoa(x) & Human(y)) -> MakesSick(x,y))", "all x.(IntestinalProtozoa(x) -> MakesHumansSick(x))", "all x.(IntestinalProtozoa(x) -> MakeHumansSick(x))", "all x y.((IntestinalProtozoa(x) & Human(y)) -> MakesSick(x,y))", "All x.(IntestinalProtozoa(x) -> MakesHumansSick(x))", "All x.(IntestinalProtozoa(x) -> MakeHumansSick(x))"]}
{"id": "eqasc_validation_424", "nl": "Illness-causing parasites include the protozoa Cyclospora and Toxoplasma gondii .", "fol": "", "prediction": ["all x.(IllnessCausingParasite(x) -> (Protozoa(x) & Cyclospora(x) & Toxoplasmagondii(x)))", "all x y.((Protozoa(x) & Cyclospora(y) & Toxoplasmagondii(x)) -> IllnessCausingParasite(x,y))", "(all x.(IllnessCausingParasite(x) -> Cyclospora(x)) & all y.(ToxoplasmaGondii(y) -> ToxoplasmaGondii(y)))", "(all x y.((Protozoa(x) & Cyclospora(y)) -> IllnessCausingParasite(x)) & ((Protozoa(x,y) & Toxoplasma(x,y)) -> IllnessCausingParasite(x)))", "all x y.((IllnessCausingParasite(x) & (Cyclospora(y) | Toxoplasmagondii(y))) -> Causes(x,y))", "(all x.(IllnessCausingParasite(x) -> (Cyclospora(x) | ToxoplasmaGondii(x))))", "all x y.((Protozoa(x) & Parasite(y) & Cyclospora(x) & Toxoplasmagondii(x)) -> IllnessCausing(x,y))", "all x.(IllnessCausingParasite(x) -> (Protozoa(x) & Cyclospora(x) & ToxoplasmaGondii(x)))", "all x.(IllnessCausingParasite(x) -> (ProtozoaCyclospora(x) | ToxoplasmaGondii(x)))", "(all x y.((Protozoa(x) & Cyclospora(y)) -> CausesIllness(x,y)) & ((Protozoa(x) & Toxoplasma(x)) -> CausesIllness(x,y)))", "all x y z.((IllnessCausingParasite(x) & Cyclospora(y) & Toxoplasma(z)) -> (Protozoa(x,y) | Toxoplasma(x,z)))", "(all x.(IllnessCausingParasite(x) -> Cyclospora(x)) & (ToxoplasmaGondii(x) -> ToxoplasmaGondii(x)))", "all x y.((IllnessCausingParasite(x) & (Protozoa(y) | Toxoplasma(y))) -> (Cyclospora(y) | Toxoplasmagondii(y)))", "all x.(IllnessCausingParasite(x) -> (Protozoa(x) & Cyclospora(x) & Toxoplasmagondii(x)))", "(all x.(IllnessCausingParasite(x) -> Cyclospora(x)) & all y.(ToxoplasmaGondii(y) -> ToxoplasmaGondii(y)))", "all x.(IllnessCausingParasite(x) -> (ProtozoaCyclospora(x) | ToxoplasmaGondii(x)))"]}
{"id": "eqasc_validation_425", "nl": "Toxoplasma gondii make humans sick", "fol": "", "prediction": ["all x.(ToxoplasmaGondii(x) -> MakesHumansSick(x))", "all x y.((ToxoplasmaGondii(x) & Human(y)) -> MakesSick(x,y))", "Toxoplasma gondii makes humans sick.", "All x y z.((Toxoplasma(x) & Gondii(y) & Human(z)) -> MakesSick(x,y,z))", "(MadeHumansSick(ToxoplasmaGondii) -> MakesHumansSick(ToxoplasmaGondii))", "all x.(ToxoplasmaGondii(x) -> MakesHumansSick(x))", "All x y.((ToxoplasmaGondii(x) & Human(y)) -> MakesSick(x,y))", "All x y.((Toxoplasma(x) & Gondii(y)) -> MakesHumansSick(x,y))", "(MadeHumansSick(ToxoplasmaGondii) | MakesHumansSick(ToxoplasmaGondii)))", "Toxoplasma gondii makes humans sick.", "Toxoplasma gondii (Toxoplasma) -> MakesHumansSick(Toxoplasma))", "all x.((ToxoplasmaGondii(x) & Human(y)) -> MakesSick(x,y))", "All x y z.((Toxoplasmagondii(x) & Human(y) & Human(z)) -> MakesSick(x,y,z))", "all x.(ToxoplasmaGondii(x) -> MakesHumansSick(x))", "all x.(Toxoplasmagondii(x) -> MakesHumansSick(x))", "all x.(ToxoplasmaGondii(x) -> MakesHumansSick(x))"]}
{"id": "eqasc_validation_426", "nl": "Bacteria, viruses, fungi, or protozoa are organisms that can cause infection in the lung.", "fol": "", "prediction": ["all x.((Organism(x) & (Bacteria(x) | Viral(x) | Fungi(x) | Protozoa(x))) -> CausesInfectionInLung(x))", "all x y.((Bacteria(x) | Viral(x) | Fungi(x) | Protozoa(x)) -> CausesInfectionInLung(x))", "all x.((Bacteria(x) | Viral(x) | Fungi(x) | Protozoa(x)) -> CausesInfectionInLung(x))", "all x y z.((Bacteria(x) | Viral(x) | Fungi(x) | Protozoa(x)) -> CausesInfectionInLung(x))", "(CanCauseInfectionInLung(bacteria,Lung) & (Virus(bacteria) | Fungus(bacteria) | Fungus(bacteria) | Protozoa(bacteria)))", "all x.((Organism(x) & (Bacteria(x) | Viral(x) | Fungi(x) | Protozoa(x))) -> CausesInfectionInLung(x))", "(CausesInfectionInLung(bacteria,Lung) & CausesInfectionInLung(virus,fungus,protozoa))", "all x y z.((Bacteria(x) & Viral(y) & Fungi(z)) -> (CanCauseInfection(x,y) | CanCauseInfection(x,z)))", "all x.(Bacteria(x) | Viral(x) | Fungi(x) | Protozoa(x)) -> CausesInfectionInLung(x))", "all x.((Bacteria(x) | Virals(x) | Fungi(x) | Protozoa(x)) -> CausesInfectionInLung(x))", "all x.((Organism(x) & CausesInfectionInLung(x)) -> (Bacteria(x) | Viral(x) | Fungi(x) | Protozoa(x)))", "(CanCauseInfectionInLung(bacteria,Lung) & CanCauseInfectionInLung(virus,fungi,protozoa))", "all x y.((Bacteria(x) | Viral(x) | Fungi(x) | Protozoa(x)) -> CausesInfection(x,y))", "all x y.((Bacteria(x) & (Virus(x) | Fungi(x) | Protozoa(x))) -> CausesInfectionInLung(x,y))", "(CausesInfectionInLung(bacteria,lunge) & (Virus(bacteria) | Fungus(bacteria) | Protozoa(bacteria)))", "all x.((Organism(x) & (Bacteria(x) | Viral(x) | Fungi(x) | Protozoa(x))) -> CausesInfectionInLung(x))"]}
{"id": "eqasc_validation_427", "nl": "organisms that can cause infection make humans sick", "fol": "", "prediction": ["all x.((Organism(x) & CausesInfection(x)) -> MakesHumansSick(x))", "all x y.((Organism(x) & Organism(y) & CausesInfection(x,y)) -> MakesHumansSick(x))", "all x y.((Organism(x) & CausesInfection(x) & Human(y)) -> MakesSick(x,y))", "all x y z.((Organism(x) & Organism(y) & Infection(z) & Causes(x,y,z)) -> MakesHumansSick(x))", "all x.((Organism(x) & CausesInfection(x)) -> MakesHumansSick(x))", "all x.((Organism(x) & CanCauseInfection(x)) -> MakesHumansSick(x))", "all x y.((Organism(x) & Organism(y) & CausesInfection(x,y)) -> MakesHumansSick(x))", "all x y.((Organism(x) & InfectionCause(x,y)) -> MakesHumansSick(x))", "all x y z.((Organism(x) & Infection(y) & Organism(z) & Causes(x,z)) -> MakesHumansSick(x))", "all x.((Organism(x) & CausesInfection(x)) -> MakesHumansSick(x))", "all x.((Organisms(x) & CausesInfection(x)) -> MakesHumansSick(x))", "all x y.((Organism(x) & CausesInfection(x,y)) -> MakesHumansSick(x))", "all x.((Organism(x) & CanCauseInfection(x)) -> MakesHumansSick(x))", "all x.((Organism(x) & CausesInfection(x)) -> MakesHumansSick(x))", "all x.((Organism(x) & CauseInfection(x)) -> MakesHumansSick(x))", "all x y.((Organism(x) & Organism(y) & CausesInfection(x,y)) -> MakesHumansSick(x))"]}
{"id": "eqasc_validation_428", "nl": "Protozoa Toxoplasma gondii Muscles Nematode Trichinella spiralis Protozoa Sarcocystis sp.", "fol": "", "prediction": ["all x.(Protozoa(x) -> (ToxoplasmagondiiMuscles(x) & NematodeTrichinellaSpiralis(x) & SarcocystisSp(x)))", "all x y.((Protozoa(x) & Toxoplasmagondii(x) & Muscles(y)) -> (NematodeTrichinellaSpiralis(x) & SarcocystisSp(x)))", "(Protozoa(x) & ToxoplasmagondiiMuscles(x)) & NematodeTrichinellaSpiralis(x) & SarcocystisSp.(Protozoa(x)))", "all x y z.((Protozoa(x) & ToxoplasmaGondiiMuscles(y) & NematodeTrichinellaSpiralis(z)) -> SarcocystisSp(x))", "all x.((Protozoa(x) & ToxoplasmaGondii(x)) -> MusclesNematodeTrichinellaSpiralis(x))", "all x y.((Protozoa(x) & ToxoplasmaGondiiMuscles(x) & NematodeTrichinellaSpiralis(y)) -> SarcocystisSp(x))", "(ProtozoaToxoplasmagondii Muscles NematodeTrichinellaSpiralisProtozoaSarcocystisssp.)", "(Protozoa(Protozoa) & ToxoplasmagondiiMuscles(Protozoa) & TrichinellaSpiralis(Protozoa) & Sarcocystiss(Sp))", "All x.(ProtozoaToxoplasmaGondiiMusclesNematodeTrichinellaSpiralisProtozoaSarcocystisSp.(ProtozoaSarcocystisSp.(Protozoa) & ToxoplasmaGondiiMusclesNematodeTrichinellaSpiralisProtozoaSarcocystisSp.(ProtozoaSarcocystisSp.(ProtozoaSarcocystisSp.(ProtozoaSarcocystisSp.(ProtozoaSarcocystisSp.(SarcocystisSp.))", "all x.(Protozoa(x) -> (ToxoplasmagondiiMuscles(x) & NematodeTrichinellaSpiralis(x) & SarcocystisSp.(Protozoa(x))))", "All x.(Protozoa(x) -> ToxoplasmaGondiiMusclesNematodeTrichinellaSpiralisProtozoaSarcocystisSp.(Protozoa(x) & SarcocystisSp.(Protozoa(x)))", "(all x.(Protozoa(x) -> ToxoplasmaGondii(x)) & Muscles(x)) & NematodeTrichinellaSpiralis(x) & SarcocystisSp(x))", "all x y z.((Protozoa(x) & ToxoplasmagondiiMuscles(y) & NematodeTrichinellaSpiralis(z)) -> SarcocystisSp(x))", "all x y.((Protozoa(x) & ToxoplasmagondiiMuscles(x) & NematodeTrichinellaSpiralis(y)) -> SarcocystisSp(x))", "All x.(Protozoa(x) -> ToxoplasmagondiiMusclesNematodeTrichinellaSpiralisProtozoaSarcocystisSp.(Protozoa(x)))", "all x.(Protozoa(x) -> (ToxoplasmagondiiMuscles(x) & NematodeTrichinellaSpiralis(x) & SarcocystisSp(x)))"]}
{"id": "eqasc_validation_429", "nl": "Species of Sarcocystis can parasitize humans and make them sick.", "fol": "", "prediction": ["all x.(Sarcocystis(x) -> (ParasitesHumans(x) & MakesSick(x)))", "all x.(SarcocystisSpecies(x) -> (ParasitesHumans(x) & MakesHumansSick(x)))", "all x y.((Species(x) & Sarcocystis(y)) -> (Parasites(x,y) & MakesSick(x,y)))", "all x y.((SpeciesOfSarcocystis(x) & Human(y)) -> (Parasites(x,y) & MakesSick(x,y)))", "all x.(SpeciesOfSarcocystis(x) -> (ParasitesHumans(x) & MakesHumansSick(x)))", "all x.(Sarcocystis(x) -> (ParasitesHumans(x) & MakesHumansSick(x)))", "all x.(SarcocystisSpecies(x) -> (ParasitesHumans(x) & MakesSick(x)))", "all x y.((Species(x) & Sarcocystis(y)) -> (ParasitesHumans(x,y) & MakesSick(x,y)))", "all x y z.((SpeciesOfSarcocystis(x) & Human(y) & Parasite(z)) -> (Parasite(x,y) & MakesSick(x,z)))", "exists x.(SpeciesOfSarcocystis(x) & Parasite(x) & MakesHumansSick(x))", "all x y.((SpeciesOfSarcocystis(x) & Human(y)) -> (Parasites(x,y) & MakesSick(x,y)))", "all x.(Sarcocystis(x) -> (Parasites(x) & MakesSick(x)))", "exists x.(SpeciesOfSarcocystis(x) & ParasitizesHumans(x) & MakesSick(x))", "all x.(SarcocystisSpecies(x) -> (ParasitesHumans(x) & MakesHumansSick(x)))", "all x y.((Species(x) & Sarcocystis(y)) -> (ParatizesHumans(x,y) & MakesSick(x,y)))", "exists x.(SpeciesOfSarcocystis(x) & ParasitesHumans(x) & MakesSick(x))"]}
{"id": "eqasc_validation_430", "nl": "Exhibit One-celled animals are called protozoa .", "fol": "", "prediction": ["all x.(Exhibit(x) -> (OneCelledAnimal(x) & Protozoa(x)))", "all x.((Exhibit(x) & OneCellledAnimal(x)) -> Protozoa(x))", "all x.(ExhibitOneCellledAnimals(x) -> Protozoa(x))", "all x y.((Exhibit(x) & OneCelledAnimal(y)) -> Protozoa(x))", "(ExhibitOneCellledAnimals(x) & Protozoa(x))", "all x.((ExhibitOneCellledAnimal(x) & Protozoa(x)) -> Animated(x))", "all x.(Exhibit(x) -> (OneCelled(x) & Protozoa(x)))", "all x y.((Exhibit(x) & OneCellledAnimal(y)) -> Protozoa(x))", "all x y z.((Exhibit(x) & OneCellledAnimal(y) & Animal(z)) -> Protozoa(x))", "(ExhibitOneCelledAnimals(x) & Protozoa(x))", "all x.((Exhibit(x) & OneCellledAnimal(x)) -> Protozoa(x))", "all x.(OneCellledAnimal(x) -> Protozoa(x))", "all x.(ExhibitOneCelledAnimal(x) -> Protozoa(x))", "all x y.((Exhibit(x) & OneCellledAnimal(x) & Animal(y)) -> Protozoa(x))", "all x y.((Exhibit(x) & OneCelledAnimal(y)) -> Protozoa(x))", "All x.(ExhibitOneCelledAnimal(x) -> Protozoa(x))"]}
{"id": "eqasc_validation_431", "nl": "one-celled animals make humans sick when they become parasites", "fol": "", "prediction": ["all x y.((OneCelledAnimal(x) & Human(y) & Parasite(y)) -> MakesSick(x,y))", "all x.((OneCelledAnimal(x) & Parasite(x)) -> MakesHumansSick(x))", "all x y z.((OneCelledAnimal(x) & Human(y) & Parasite(z)) -> MakesSick(x,y,z))", "all x.((Animal(x) & OneCelled(x)) -> MakesHumansSick(x))", "all x y.((OneCelledAnimal(x) & Human(y) & Parasite(z)) -> MakesSick(x,y,z))", "all x y.((Animal(x) & OneCelled(x) & Human(y) & Parasite(y)) -> MakesSick(x,y))", "all x y z.((OneCelledAnimal(x) & Human(y) & Parasite(z) & MakesSick(x,y,z)) -> Parasite(x,y))", "all x.((OneCelledAnimal(x) & Parasite(x)) -> MakesHumansSick(x))", "all x y.((OneCelledAnimal(x) & Human(y) & Parasite(y)) -> MakesSick(x,y))", "all x.((Animal(x) & OneCelled(x)) -> MakesHumansSick(x))", "all x y.((Animal(x) & OneCelled(x) & Human(y) & Parasite(z) & MakesSick(x,y,z)) -> Parasite(x,y,z))", "all x y z.((OneCelledAnimal(x) & Human(y) & Parasite(z) & Has(x,y)) -> MakesSick(x,y))", "all x y.((OneCelledAnimal(x) & Human(y)) -> MakesSickWhenParasited(x,y))", "all x.((OneCelledAnimal(x) & Parasite(x)) -> MakesHumansSick(x))", "all x.((Animal(x) & OneCelled(x)) -> MakesHumansSick(x))", "all x.((OneCelledAnimal(x) & Parasite(x)) -> MakesHumansSick(x))"]}
{"id": "eqasc_validation_432", "nl": "Malaria parasites are transmitted by mosquitos.", "fol": "", "prediction": ["all x.(MalariaParasite(x) -> TransmittedByMouses(x))", "all x y.((MalariaParasite(x) & Mosquito(y)) -> TransmittedBy(x,y))", "all x y z.((MalariaParasite(x) & Mosquito(y) & Mosquito(z)) -> TransmittedBy(x,y,z))", "all x.(MalariaParasite(x) -> TransmittedByMouses(x))", "all x y.((MalariaParasite(x) & Mosquito(y)) -> TransmittedBy(x,y))", "(TransmittedBy(MalariaParasites,Mosquitos))", "all x.(MalariaParasite(x) -> (TransmittedByMouses(x) | TransmittedByMouses(x)))", "all x.(MalariaParasite(x) -> TransmittedByMouse(x))", "all x.((MalariaParasite(x) & Mosquito(y)) -> TransmittedBy(x,y))", "all x y z.((MalariaParasite(x) & Mosquito(y) & Mosquito(z)) -> TransmittedBy(x,y,z))", "(TransmittedByMosquitos(malaria) & MalariaParasites(malaria))", "all x y.((MalariaParasite(x) & Mosquito(y)) -> TransmittedBy(x,y))", "all x.(MalariaParasite(x) -> TransmittedByMouses(x))", "all x.(MalariaParasite(x) -> (TransmittedByMouses(x) & MalariaParasite(x)))", "all x y.((MalariaParasite(x) & Mosquito(y)) -> TransmittedBy(x,y))", "all x.(MalariaParasite(x) -> TransmittedByMouse(x))"]}
{"id": "eqasc_validation_433", "nl": "Malaria is a protozoa that make humans sick ", "fol": "", "prediction": ["all x.(Malaria(x) -> (Protozoa(x) & MakesHumansSick(x)))", "all x y.((Malaria(x) & Protozoa(y)) -> MakesHumansSick(x,y))", "all x y z.((Malaria(x) & Protozoa(y) & Human(z)) -> MakesSick(x,y,z))", "all x y.((Malaria(x) & Human(y)) -> (Protozoa(x) & MakesSick(x,y)))", "all x.(Malaria(x) -> (Protozoa(x) & MakesHumansSick(x)))", "all x.(Malaria(x) -> (Protozoa(x) & MakesHumansSick(x)))", "(Protozoa(Malaria) & MakesHumansSick(Malaria))", "(Protozoa(malaria) & MakesHumansSick(malaria))", "(Protozoa(Malaria) & MakesHumansSick(Malaria))", "all x y z.((Malaria(x) & Protozoa(y) & Human(z)) -> MakesSick(x,y,z))", "all x y.((Malaria(x) & Protozoa(y)) -> MakesHumansSick(x,y))", "all x.(Malaria(x) -> (Protozoa(x) & MakesHumansSick(x)))", "all x.(Malaria(x) -> (Protozoa(x) & MakesHumansSick(x)))", "all x.((Malaria(x) & Protozoa(x)) -> MakesHumansSick(x))", "all x.(Malaria(x) -> (Protozoa(x) & MakesHumansSick(x)))", "all x.(Malaria(x) -> (Protozoa(x) & MakesHumansSick(x)))"]}
{"id": "eqasc_validation_434", "nl": "natural magnetism is used for pointing north by a compass", "fol": "", "prediction": ["all x y.((NaturalMagnetism(x) & Compass(y)) -> PointsNorth(x,y))", "all x y z.((NaturalMagnetism(x) & Compass(y) & PointsNorth(x,y)) -> UsedForPointingNorth(x,y))", "all x.(NaturalMagnetism(x) -> PointsNorthByCompass(x))", "(NaturalMagnetism(NaturalMagnetism) & PointsNorthByCompass(NaturalMagnetism))", "all x y z.((NaturalMagnetism(x) & Compass(y) & North(z)) -> Points(x,y,z))", "all x y.((NaturalMagnetism(x) & Compass(y)) -> PointsNorth(x,y))", "all x.((NaturalMagnetism(x) & PointsNorth(x) & Compass(x)) -> PointsNorth(x))", "all x.(NaturalMagnetism(x) -> PointsNorth(x))", "(NaturalMagnetism(n) & PointsNorth(n) & Compass(n))", "all x y z.((NaturalMagnetism(x) & Compass(y) & Compass(z)) -> PointsNorth(x,y,z))", "all x y.((NaturalMagnetism(x) & Compass(y)) -> PointsNorth(x,y))", "all x.(NaturalMagnetism(x) -> PointsNorthByCompass(x))", "all x y z.((NaturalMagnetism(x) & Compass(y) & PointsNorth(x,y,z)) -> PointsNorth(z,y))", "all x y.((NaturalMagnetism(x) & Compass(y)) -> PointsNorthBy(x,y))", "all x.(NaturalMagnetism(x) -> PointsNorth(x))", "all x.(NaturalMagnetism(x) -> PointsNorthByCompass(x))"]}
{"id": "eqasc_validation_435", "nl": "Magnets, compasses and even the earth have magnetic energy.", "fol": "", "prediction": ["all x.((Magnet(x) | Compasse(x) | Earth(x)) -> HasMagneticEnergy(x))", "all x y z.((Magnet(x) | Compasse(y) | Earth(z)) -> HasMagneticEnergy(x))", "all x y.((Magnet(x) | Compasse(x) | Earth(y)) -> HasMagneticEnergy(x))", "(all x.(MagneticEnergy(x) -> HasMagneticEnergy(x)) & exists y.(Compass(y) & HasMagneticEnergy(x)))", "all x.(Magnet(x) | Compasse(x) | Earth(x)) -> HasMagneticEnergy(x))", "all x.((Magnet(x) | Compasse(x) | Earth(x)) -> HasMagneticEnergy(x))", "all x y z.((Magnet(x) & Compasse(y) & Earth(z)) -> HasMagneticEnergy(x,y,z))", "(Magnet(x) | Compasse(x) | Earth(x)))", "(all x.(Magnet(x) -> HasMagneticEnergy(x)) & all y.(Compass(y) -> HasMagneticEnergy(y)))", "(Magnet(x) | Compasse(x) | Earth(x)) & HasMagneticEnergy(x))", "exists x.(MagneticEnergy(x) & exists y.(Compass(y) & HasMagneticEnergy(x,y)))", "all x y.((Magnet(x) | Compasse(y) | Earth(y)) -> HasMagneticEnergy(x,y))", "all x.(Magnet(x) -> (Compass(x) | Earth(x)))", "all x.((Magnet(x) | Compasse(x) | Earth(x)) -> HasMagneticEnergy(x))", "all x.(Magnet(x) | Compasse(x) | Earth(x)) -> HasMagneticEnergy(x))", "(Magnet(s) | Compasse(s) | Earth(s)))"]}
{"id": "eqasc_validation_436", "nl": "magnetic energy is used to find north", "fol": "", "prediction": ["all x y.((MagneticEnergy(x) & North(y)) -> UsedToFind(x,y))", "all x.(MagneticEnergy(x) -> UsedToFindNorthern(x))", "all x y z.((MagneticEnergy(x) & North(y) & MagneticEnergy(z) & FoundIn(x,y,z)) -> UsedToFind(x,y,z))", "all x.((MagneticEnergy(x) & NorthNorth(x)) -> UsedToFind(x,NorthNorth))", "(NorthernNorthernNorthern(MagneticEnergy) & UsedToFindNorthernNorthern(MagneticEnergy))", "(NorthernNorthernNorthernNorthernNorthern(MagneticEnergy) & UsedToFindNorthernNorthernNorthern(MagneticEnergy))", "all x y.((MagneticEnergy(x) & North(y)) -> UsedToFind(x,y))", "all x y z.((MagneticEnergy(x) & North(y) & North(z)) -> UsedToFind(x,y,z))", "all x.(MagneticEnergy(x) -> UsedToFindNorthern(x))", "all x.((MagneticEnergy(x) & NorthNorth(x)) -> UsedToFind(x,NorthNorth,NorthNorth))", "all x y z.((MagneticEnergy(x) & North(y) & MagneticEnergy(z) & North(y)) -> UsedToFind(x,z))", "(all x.(MagneticEnergy(x) -> FindNorthern(x)))", "all x y.((MagneticEnergy(x) & North(y)) -> UsedToFind(x,y))", "all x.(MagneticEnergy(x) -> FoundNorthern(x))", "all x.((MagneticEnergy(x) & NorthNorth(x)) -> UsedToFind(x,NorthNorth(x))", "all x y.((MagneticEnergy(x) & North(y)) -> UsedToFollow(x,y))"]}
{"id": "eqasc_validation_437", "nl": "Additionally, a surveyor s compass was used.", "fol": "", "prediction": ["all x y.((SurveyorsCompass(x) & SurveyorsCompass(y)) -> Used(x))", "all x.((SurveyorsCompass(x) & Used(x)) -> Used(x))", "all x.((SurveillanceCompass(x) & Used(x)) -> SurveyorsCompass(x))", "all x y z.((SurveyorsCompass(x) & SurveyorsCompass(y) & Compass(z)) -> Used(x))", "-exists x.(Compass(x) & Surveyor(x) & Used(x))", "(UsedAlongsideCompass(Surveyor) & UsedAlongsideCompass(Surveyor))", "Added to this, a surveyor s Compass was used.", "all x y.((SurveillanceCompass(x) & Surveyor(y)) -> Used(x,y))", "all x y.((SurveyorsCompass(x) & SurveyorsCompass(y)) -> Used(x))", "(all x.(SurveyorsCompass(x) -> Used(x)))", "all x.(SurveyorsCompass(x) -> Used(x))", "(exists x.(SurveyorsCompass(x) & Used(x)))", "(UsedInAdditionalCompass(Surveyor))", "all x.(Compass(x) -> SurveyorUsed(x))", "(all x.(SurveyorsCompass(x) -> Used(x)))", "all x y.((SurveyorsCompass(x) & SurveyorsCompass(y)) -> Used(x,y))"]}
{"id": "eqasc_validation_438", "nl": "Natural magnetism is used for pointing north in a surveying tool.", "fol": "", "prediction": ["all x y.((NaturalMagnetism(x) & SurveyingTool(y)) -> PointsNorth(x,y))", "all x.(NaturalMagnetism(x) -> PointsNorth(x))", "all x y z.((NaturalMagnetism(x) & SurveyingTool(y) & SurveyingTool(z)) -> PointsNorth(x,y,z))", "(NaturalMagnetism(n) & PointsNorth(n) & SurveyingTool(n))", "all x.(NaturalMagnetism(x) -> PointsNorthInSurveyingTool(x))", "all x y.((NaturalMagnetism(x) & SurveyingTool(y)) -> PointsNorth(x,y))", "(NaturalMagnetism(NaturalMagneticSignificance) -> PointsNorthInSurveyingTool(NaturalMagneticSignificance))", "all x.((NaturalMagnetism(x) & SurveyingTool(x)) -> PointsNorth(x))", "all x y z.((NaturalMagnetism(x) & SurveyingTool(y) & SurveyingTool(z)) -> PointsNorth(x,y,z))", "all x y.((NaturalMagnetism(x) & SurveyingTool(y)) -> PointsNorth(x,y))", "all x.(NaturalMagnetism(x) -> PointsNorth(x))", "all x.((NaturalMagnetism(x) & SurveyingTool(x)) -> PointsNorth(x))", "all x.(NaturalMagnetism(x) -> PointsNorthInSurveyingTool(x))", "all x y.((NaturalMagnetism(x) & SurveyingTool(y)) -> PointsNorth(x,y))", "all x y.((NaturalMagnetism(x) & SurveyingTool(y)) -> UsedForPointingNorth(x,y))", "all x.(NaturalMagnetism(x) -> PointsNorth(x))"]}
{"id": "eqasc_validation_439", "nl": "To find direction, students magnetize needles and locate North.", "fol": "", "prediction": ["all x y.((Student(x) & Student(y)) -> (MagnetizesNeedles(x,y) & LocatesNorth(y,x)))", "all x.((Student(x) & MagnetizesNeedles(x) & LocatesNorth(x)) -> FindsDirection(x))", "all x y.((Student(x) & MagnetizesNeedles(x,y) & LocatesNorth(x,y)) -> FindsDirection(x,y))", "all x y z.((Student(x) & Needle(y) & North(z)) -> MagnetizesAndLocates(x,y,z))", "(MagnetizesNeedlesToFindDirection(Students) & LocatesNorth(Students))", "all x.((Student(x) & MagnetizesNeedles(x) & LocatesNorth(x)) -> FindDirection(x))", "all x y.((Student(x) & Nead(y)) -> MagnetizesAndLocatesNorth(x,y))", "all x.((Student(x) & MagnetizeNeedles(x) & LocateNorth(x)) -> FindDirection(x))", "(all x.(NeedleMagnetizes(x) -> LocateNorth(x)))", "all x y z.((Student(x) & Nead(y) & North(z)) -> MagnetizesAndLocates(x,y,z))", "(all x.(NeedleMagnetizes(x) -> LocatesNorth(x)))", "all x y.((Student(x) & Student(y)) -> (MagnetizeNeedles(x,y) & LocateNorth(y,x)))", "all x y.((Student(x) & Needle(y)) -> MagnetizesAndLocates(x,y))", "all x.((Student(x) & MagnetizesNeedles(x) & LocatesNorth(x)) -> FindsDirection(x))", "all x.((Student(x) & MagnetizeNeedles(x) & LocateNorth(x)) -> FindDirection(x))", "all x.((Student(x) & MagnetizesNeedles(x) & LocatesNorth(x)) -> FindDirection(x))"]}
{"id": "eqasc_validation_440", "nl": "Finding directions can be done by using a compass that points North.", "fol": "", "prediction": ["all x.((Compass(x) & PointsNorth(x)) -> FindDirections(x))", "all x y.((Compass(x) & Directions(y)) -> PointsNorth(x,y))", "all x.((Compass(x) & PointsNorth(x)) -> FindsDirections(x))", "(FindDirections(x) & UsesCompass(x) & PointsNorth(x))", "all x y.((Compass(x) & Compass(y)) -> FindsDirections(x,y))", "all x.(FindDirections(x) -> (UsesCompass(x) & PointsNorth(x)))", "all x y z.((Compass(x) & Direction(y) & North(z)) -> Finds(x,y,z))", "all x.((Compass(x) & PointsNorth(x)) -> FindDirections(x))", "all x y.((Compass(x) & CompassPointsNorth(y)) -> FindDirections(x,y))", "exists x.(DirectionFindingCompass(x) & PointsNorth(x))", "all x y.((Compass(x) & Directions(y)) -> PointsNorth(x,y))", "all x.(FindingDirections(x) -> (UsesCompass(x) & PointsNorth(x)))", "exists x.(Directions(x) & Compass(x) & PointsNorth(x))", "all x.((Compass(x) & PointsNorth(x)) -> FindingDirections(x))", "all x.((Compass(x) & PointsNorth(x)) -> FindsDirections(x))", "all x y.((Compass(x) & Directions(y)) -> PointsNorth(x,y))"]}
{"id": "eqasc_validation_441", "nl": "For the ordinary compass, align to the North direction.", "fol": "", "prediction": ["all x.((Compass(x) & Ordinary(x)) -> AlignsToNorthDirection(x))", "(OrdinaryCompass(compass) -> AlignsToNorthDirection(compass))", "all x y.((Compass(x) & Ordinary(x)) -> AlignsToNorthDirection(y))", "(AllowsNorthDirection(compass) -> Ordinary(compass))", "all x.((Compass(x) & Ordinary(x)) -> AlignToNorthDirection(x))", "(AlignToNorthDirection(compass,OtherDirection) | ForOtherCompass(compass,OtherDirection)))", "(OrdinaryCompass: AlignToNorthDirection(compass,NorthDirection))", "all x.(OrdinaryCompass(x) -> AlignsToNorthDirection(x))", "All x y.((Compass(x) & Ordinary(y)) -> AlignsToNorthDirection(x,y))", "all x.((Compass(x) & Ordinary(x)) -> AlignsToNorthDirection(x))", "(AllowsNorthDirection(compass) -> Ordinary(compass))", "all x.(Compass(x) -> AlignToNorthDirection(x))", "all x.((Compass(x) & Ordinary(x)) -> AlignToNorthDirection(x))", "All x y.((Compass(x) & Ordinary(x)) -> AlignToNorthDirection(y))", "All x y.((Compass(x) & Ordinary(y)) -> AlignsToNorthDirection(x,y))", "all x.((Compass(x) & Ordinary(x)) -> AlignsToNorthDirection(x))"]}
{"id": "eqasc_validation_442", "nl": "compasses use magnetism", "fol": "", "prediction": ["all x.(Compasse(x) -> UsesMagnetism(x))", "all x.(Compass(x) -> UsesMagnetism(x))", "all x y.((Compasse(x) & Magnetism(y)) -> Uses(x,y))", "all x y z.((Compasse(x) & Magnetism(y) & Magnetism(z)) -> Uses(x,y,z))", "all x y.((Compass(x) & Magnetism(y)) -> Uses(x,y))", "all x.(Compasse(x) -> UsesMagnetism(x))", "all x.(Compass(x) -> Magnetism(x))", "all x y z.((Compass(x) & Magnetism(y) & Magnetism(z)) -> Uses(x,y,z))", "all x y.((Compass(x) & Magnetism(y) & Uses(x,y)) -> Uses(x,y))", "all x y.((Compasse(x) & Magnetism(y)) -> Uses(x,y))", "all x.(Compact(x) -> Magnetism(x))", "(all x.(Compass(x) -> Magnetism(x)))", "all x.(Compass(x) -> UsesMagnetism(x))", "all x.(Compasse(x) -> UsesMagnetism(x))", "all x.(Compact(x) -> Magnetism(x))", "all x.(Compasse(x) -> UsesMagnetism(x))"]}
{"id": "eqasc_validation_443", "nl": "Teens learn how to navigate terrain and use a compass.", "fol": "", "prediction": ["all x.(Teen(x) -> (LearnsHowToNavigateTerrain(x) & UsesCompass(x)))", "all x y.((Teen(x) & Terrain(y)) -> (LearnsHowToNavigate(x,y) & UsesCompass(x)))", "all x.((Teen(x) & NavigatesTerrain(x) & UsesCompass(x)) -> LearnsHowToUseCompass(x))", "(LearnsHowToNavigateTerrain(teen) & UsesCompass(teen))", "all x.(Teen(x) -> (LearnsHowToNavigateTerrain(x) & UsesCompass(x)))", "(all x.(Teen(x) -> LearnsToNavigateTerrain(x)) & all y.(Compass(y) -> LearnsToUse(x,y)))", "all x y z.((Teen(x) & Terrain(y) & Compass(z)) -> (LearnsHowToNavigate(x,y) & Uses(x,z)))", "all x.(Teen(x) -> (LearnsToNavigateTerrain(x) & UsesCompass(x)))", "all x y.((Ten(x) & Terrain(y)) -> (LearnsHowToNavigate(x,y) & UsesCompass(x)))", "all x.((Teen(x) & NavigateTerrain(x) & UseCompass(x)) -> LearnsHowToUseCompass(x))", "all x y.((Teen(x) & Terrain(y)) -> (LearnsHowToNavigate(x,y) & UsesCompass(x,y)))", "all x.(Ten(x) -> (LearnsHowToNavigateTerrain(x) & UsesCompass(x)))", "all x.(Teen(x) -> (LearnsHowToNavigateTerrain(x) & UsesCompass(x)))", "all x.(Teen(x) -> (LearnsNavigateTerrain(x) & UsesCompass(x)))", "all x y.((Teen(x) & Terrain(y)) -> (LearnsHowToNavigate(x,y) & UsesCompass(x,y)))", "all x.(Ten(x) -> (LearnsHowToNavigateTerrain(x) & UsesCompass(x)))"]}
{"id": "eqasc_validation_444", "nl": "natural magnetism points north for navigation", "fol": "", "prediction": ["all x y.((NaturalMagnetism(x) & Navigation(y)) -> PointsNorthForNavigation(x,y))", "all x y z.((NaturalMagnetism(x) & NorthForNavigation(y) & Navigation(z)) -> PointsNorthForNavigation(x,y,z))", "all x.(NaturalMagnetismPointsNorthForNavigation(x) -> NavigationalMagnetism(x))", "all x.(NaturalMagnetismPointsNorth(x) -> NavigationNavigationNavigationNavigationNavigationNavigationNavigationNavigationNavigationNavigationNavigationNavigationNavigationNavigationNavigationNavigationNavigationNavigationNavigationNavigationNavigationNavigationNavigationNavigationNavigationNavigationNavigationNavigationNavigationN", "(NaturalMagnetismPointsNorthForNavigation(n) & NaturalMagnetismPointsNorthForNavigation(n))", "all x y z.((NaturalMagnetism(x) & NaturalMagnetism(y) & Navigation(z)) -> PointsNorthForNavigation(x,y,z))", "all x y.((NaturalMagnetism(x) & NaturalMagnetismPointsNorthForNavigation(x)) -> Navigation(y))", "(NaturalMagnetismPointsNorthForNavigation(NaturalMagnetism) -> PointsNorthForNavigation(NaturalMagnetism))", "naturalMagnetismPointsNorthForNavigation(n) -> NavigationalMagnetismPointsNorth(n))", "all x y.((NaturalMagnetismPointsNorth(x) & Navigation(y)) -> PointsNorthForNavigation(x,y))", "all x.(NaturalMagnetismPointsNorthForNavigation(x) -> Navigation(x))", "all x y z.((NaturalMagnetism(x) & Navigation(y) & NorthForNavigation(z)) -> PointsNorthForNavigation(x,y,z))", "all x.(NaturalMagnetismPointsNorthForNavigation(x) -> NavigationalNavigation(x))", "all x.(NaturalMagnetismPointsNorthForNavigation(x) -> NaturalMagnetismPointsNorthForNavigation(x))", "all x y.((NaturalMagnetismPointsNorth(x) & Navigation(y)) -> PointsNorth(x,y))", "all x.(NaturalMagnetismPointsNordForNavigation(x) -> NavigationalMagnetismPointsNorth(x))"]}
{"id": "eqasc_validation_445", "nl": "Compasses point to the Magnetic Poles.", "fol": "", "prediction": ["all x.(Compass(x) -> PointsToMagneticPoles(x))", "all x y.((Compass(x) & MagneticPole(y)) -> PointsTo(x,y))", "all x.(Compasse(x) -> PointsToMagneticPoles(x))", "all x.(Compass(x) -> PointsToMagneticPoles(x))", "all x y.((Compasse(x) & MagneticPole(y)) -> PointsTo(x,y))", "(PointsToMagneticPoles(compasse))", "all x y z.((Compass(x) & MagneticPole(y) & MagneticPole(z)) -> PointsTo(x,y,z))", "all x y.((Compass(x) & MagneticPole(y)) -> PointsTo(x,y))", "(PointsToMagneticPoles(compasses))", "all x.(Compasse(x) -> PointsToMagneticPoles(x))", "all x.(Compass(x) -> PointsToMagneticPoles(x))", "all x y.((Compass(x) & MagneticPole(y)) -> PointsTo(x,y))", "all x y.((Compasse(x) & MagneticPole(y)) -> PointsTo(x,y))", "all x.(Compasse(x) -> PointsToMagneticPoles(x))", "all x.(Compass(x) -> PointsToMagneticPoles(x))", "All x.(Compass(x) -> PointToMagneticPoles(x))"]}
{"id": "eqasc_validation_446", "nl": "poles are used to point with a compass", "fol": "", "prediction": ["all x y.((Pole(x) & Compass(y)) -> PointsWith(x,y))", "all x y z.((Pole(x) & Compass(y) & Compass(z)) -> PointsWith(x,y,z))", "all x.(Pole(x) -> PointsWithCompass(x))", "all x y.((Pole(x) & Compass(y)) -> PointsWith(x,y))", "all x y z.((Pole(x) & Compass(y) & Compass(z)) -> PointsWith(x,y,z))", "(all x.(Pole(x) -> PointsWithCompass(x)))", "all x.(Pole(x) -> PointsWithCompass(x))", "all x.(Pole(x) -> (PointsWithCompass(x) & UsesCompass(x)))", "all x y.((Pole(x) & Compass(y)) -> PointsWith(x,y))", "all x y.((Pole(x) & Compass(y) & PointsWith(x,y)) -> UsedToPointWith(x,y))", "all x y.(Pole(x) & Compass(y) & PointsWith(x,y))", "all x y z.((Pole(x) & Compass(y) & Compass(z)) -> PointsWith(x,y,z))", "all x.(Pole(x) -> PointsWithCompass(x))", "all x.(Pole(x) -> (PointsWithCompass(x) & CompassPointsWithCompass(x)))", "all x.(Pose(x) -> PointsWithCompass(x))", "all x.(Pole(x) -> PointWithCompass(x))"]}
{"id": "eqasc_validation_447", "nl": "Natural magnetism is used to point to the magnetic poles.", "fol": "", "prediction": ["all x y.((NaturalMagnetism(x) & MagneticPole(y)) -> PointsTo(x,y))", "all x.(NaturalMagnetism(x) -> PointsToMagneticPoles(x))", "all x y z.((NaturalMagnetism(x) & MagneticPole(y) & MagneticPole(z)) -> PointsTo(x,y,z))", "(NaturalMagnetism(n) & PointsToMagneticPoles(n))", "all x y.((NaturalMagnetism(x) & MagneticPole(y)) -> PointsTo(x,y))", "all x.(NaturalMagnetism(x) -> PointsToMagneticPoles(x))", "(NaturalMagnetism(n) & PointsToMagneticPoles(n))", "all x y z.((NaturalMagnetism(x) & MagneticPole(y) & MagneticPole(z)) -> PointsTo(x,y,z))", "all x y.((NaturalMagnetism(x) & MagneticPole(y)) -> PointsTo(x,y))", "all x.(NaturalMagnetism(x) -> PointsToMagneticalPoles(x))", "all x.(NaturalMagnetism(x) -> PointsToMagneticPoles(x))", "all x y.((NaturalMagnetism(x) & MagneticPole(y)) -> PointsTo(x,y))", "all x y.((NaturalMagnetism(x) & MagnetismPod(y)) -> PointsTo(x,y))", "all x.(NaturalMagnetism(x) -> PointsToMagneticPoles(x))", "all x.(NaturalMagnetism(x) -> PointToMagneticPoles(x))", "all x.(NaturalMagnetism(x) -> PointsToMagneticPodes(x))"]}
{"id": "eqasc_validation_448", "nl": "Natural magnets are permanent magnets that never lose their magnetism.", "fol": "", "prediction": ["all x.(NaturalMagnet(x) -> (PermanentMagnet(x) & -LosesMagnetism(x)))", "(PermanentMagnet(NaturalMagnet(NaturalMagnet) & NeverLosesMagnetism(NaturalMagnet))", "all x.(NaturalMagnet(x) -> (PermanentMagnet(x) & -LosesMagnetism(x)))", "all x y.((NaturalMagnet(x) & Permanent(y)) -> NeverLosesMagnetism(x,y))", "all x.((NaturalMagnet(x) & PermanentMagnet(x) & NeverLosesMagnetism(x)) -> PermanentMagnet(x))", "(PermanentMagnet(n) & NeverLosesMagnetism(n))", "all x.(NaturalMagnet(x) -> (PermanentMagnet(x) & NeverLosesMagnetism(x)))", "all x y.((NaturalMagnet(x) & PermanentMagnetic(y)) -> -LosesMagnetism(x,y))", "all x.(NaturalMagnet(x) -> (PermanentMagnet(x) & -LosesMagnetism(x)))", "all x.(NaturalMagnet(x) -> (PermanentMagnet(x) & -LosesMagnetism(x)))", "all x.(NaturalMagnetic(x) -> (PermanentMagnet(x) & -LosesMagnetism(x)))", "all x.(NaturalMagnet(x) -> (PermanentMagnet(x) & NeverLosesMagnetism(x)))", "all x y.((NaturalMagnet(x) & PermanentMagnet(y)) -> NeverLoseMagnetism(x,y))", "all x y.((NaturalMagnet(x) & PermanentMagnet(y)) -> NeverLoseMagnetism(x,y))", "all x.(NaturalMagnet(x) -> (PermanentMagnet(x) & -LoseMagnetism(x)))", "all x.(NaturalMagnet(x) -> (PermanentMagnet(x) & NeverLoseMagnetism(x)))"]}
{"id": "eqasc_validation_449", "nl": "Permanent magnets are used for compasses pointing North.", "fol": "", "prediction": ["all x.(PermanentMagnet(x) -> (UsedForCompasses(x) & PointsNorth(x)))", "all x y.((PermanentMagnet(x) & Compasse(y)) -> PointsNorth(x,y))", "all x.(PermanentMagnet(x) -> PointsNorth(x))", "all x y.((PermanentMagnet(x) & Compasse(y) & PointsNorth(y)) -> UsedFor(x,y))", "all x y z.((PermanentMagnet(x) & Compasse(y) & NorthPoint(z)) -> UsedFor(x,y,z))", "all x.(PermanentMagnet(x) -> UsedForCompassPointingNorth(x))", "(all x.(PermanentMagnet(x) -> PointsNorth(x)))", "(PermanentMagnets(permanentmagnet) & PointsNorth(compass))", "all x.(PermanentMagnet(x) -> (UsedForCompasses(x) & PointsNorth(x)))", "all x y.((PermanentMagnet(x) & Compasse(y)) -> PointsNorth(y))", "all x y.((PermanentMagnet(x) & Compasse(y) & PointsNorth(y)) -> UsedFor(x,y))", "all x.(PermanentMagnet(x) -> PointsNorth(x))", "all x y.((PermanentMagnet(x) & Compasse(y) & PointsNorth(y,x)) -> UsedFor(x,y))", "all x.(PermanentMagnet(x) -> (UsedForCompasses(x) & PointsNorth(x)))", "all x.(PermanentMagnet(x) -> UsedForCompasses(x))", "all x.(PersonalMagnet(x) -> PointsNorth(x))"]}
{"id": "eqasc_validation_450", "nl": "Nonmetal elements are far fewer in number.", "fol": "", "prediction": ["all x.((NonmetalElement(x) & FarFarLiderInNumber(x)) -> -(NonmetalElement(x) & FarFarLiderInNumber(x)))", "all x.(NonmetalElement(x) -> FarFarLiderInNumber(x))", "all x.((NonmetalElement(x) & FarLergerInNumber(x)) -> -(NonmetalElement(x) & FarLergerInNumber(x)))", "all x y.((NonmetalElement(x) & Element(y)) -> FarFarLiderInNumber(x,y))", "(NonmetalElements(n) & FarFarLiderInNumber(n))", "(Far FewerInNumber(nonmetalElements)", "(-MetalElement(x) & FarFarLiderInNumber(x))", "all x.(NonmetalElement(x) -> FarLittlerInNumber(x))", "all x.((MetalElement(x) & FarFarLider(x)) -> -(NonmetalElement(x) & FarFarLider(x)))", "all x.((NonMetalElement(x) & FarFarLerserInNumber(x)) -> -MetalElement(x))", "all x.((NonmetalElement(x) & FarLeastNumber(x)) -> FarLeastNumber(x))", "all x y.((NonmetalElement(x) & Element(y)) -> FarLergerInNumber(x,y))", "all x.(NonMetalElement(x) -> FarFarLernerInNumber(x))", "all x.(NonmetalElement(x) -> FarLergerInNumber(x))", "exists x.(NonMetalElement(x) & FewerInNumber(x))", "exists x.(NonmetalElement(x) & FarFamerInNumber(x))"]}
{"id": "eqasc_validation_451", "nl": "Titanium is a lustrous white metallic element.", "fol": "", "prediction": ["all x.(Titanium(x) -> (LuxuriousWhiteMetallicElement(x) & MetallicElement(x)))", "all x.(Titanium(x) -> (LightlyWhiteMetallicElement(x) & MetallicElement(x)))", "(LuxuriousWhiteMetallicElement(titanium) & MetallicElement(titanium))", "(LightlyWhiteMetallicElement(titanium) & MetallicElement(titan))", "all x y.((Titanium(x) & White(y)) -> Lustrous(x,y))", "all x.(Titanium(x) -> (LuxuriousWhiteMetallicElement(x) & MetallicElement(x)))", "all x.(Titanium(x) -> (LightlyWhiteMetallicElement(x) & MetallicElement(x) & MetallicElement(x)))", "(LuxuriousWhiteMetallicElement(Titanium))", "all x.(Titanium(x) -> (LubriousWhiteMetallicElement(x) & MetallicElement(x) & MetallicElement(x) & MetallicElement(x)))", "all x y.((Titanium(x) & LustrousWhite(y)) -> MetallicElement(x,y))", "(LightlyWhiteMetallicElement(Titanium))", "all x.(Titanium(x) -> (LuxuriousWhiteMetallicElement(x) & MetallicElement(x)))", "all x.(Titanium(x) -> (LightlyWhiteMetallicElement(x) & Metallic(x)))", "all x.(Titanium(x) -> (LuxuriousWhiteMetallicElement(x) & MetallicElement(x) & MetallicElement(x)))", "all x.(Titanium(x) -> (LightlyWhiteMetallicElement(x) & Metallic(x)))", "all x.(Titanium(x) -> (LightlyWhiteMetal(x) & Metallic(x)))"]}
{"id": "eqasc_validation_452", "nl": "Titanium is not a non metal", "fol": "", "prediction": ["all x.(Titanium(x) -> -NonMetal(x))", "all x.(Titanium(x) -> -(NonMetal(x) & -Metal(x)))", "(NonMetal(titanium) & -Metal(titanium))", "-(NonMetal(titanium) & -Metal(titanium))", "(-MetalNonMetal(titanium))", "all x y.((Titanium(x) & Metal(y)) -> -(NonMetal(x,y) & -Metal(x)))", "all x.(Titanium(x) -> -Metal(x))", "(-Metal(titanium) & -Metal(titanium))", "all x.( Titanium(x) -> (-Metal(x) & -Metal(x)))", "all x.(Titanium(x) -> -NonMetal(x))", "all x.(Titanium(x) -> -(NonMetal(x) & -Metal(x)))", "(-MetalNonMetal( Titanium))", "(-MetalNonMetal(titanium))", "all x.(Titanium(x) -> -(NonMetal(x) & -Metal(x)))", "all x.(Titanium(x) -> -Metal(x))", "all x.(Titanium(x) -> -NonMetal(x))"]}
{"id": "eqasc_validation_453", "nl": "Nonmetals are the 17 elements in the upper right hand corner of the periodic table.", "fol": "", "prediction": ["all x.(Nonmetal(x) -> (ElementsInUpperRightHandCrown(x) & ElementsInUpperRightHandCrown(x)))", "(UpperRightHandCrown(nonmetal) & Element(n) & Element(n) & Element(n) & Element(n) & Element(n) & Element(n) & Element(n) & Element(n) & Element(n) & Element(n) & Element(n) & Element(n) & Element(n) & Element(n)", "all x.(Nonmetal(x) -> UpperRightHandCrownOfPeriodicTable(x))", "all x.((Element(x) & UpperRightHandCrown(x)) -> Nonmetal(x))", "(UpperRightHandCrown(nonmetal) -> Element(n,17))", "all x y.((Nonmetal(x) & PeriodicalTable(y)) -> Element(x,y))", "all x y.((Nonmetal(x) & Element(y)) -> UpperRightHandCrown(x,y))", "all x y z.((Nonmetal(x) & Element(y) & PeriodicalTable(z) & UpperRightHandCrown(y,z)) -> Element(y,z))", "all x.(Nonmetal(x) -> Element(x,17))", "all x.(Nonmetal(x) -> (Element(x,17) & UpperRightHandCrown(x)))", "(UpperRightHandCoinOfPeriodicTable(nonmetal) -> Element(n,17))", "all x.((Element(x) & UpperRightHandCrown(x,7)) -> Nonmetal(x))", "all x y.((Nonmetal(x) & PeriodicTable(y)) -> (Element(x,y) & Element(x,y)))", "(UnderRightHandElement(nonmetal) -> Element(n,17))", "All x.(NonMetal(x) -> UpperRightHandCrown(x,17))", "All x.(Nonmetal(x) -> Element(x,17))"]}
{"id": "eqasc_validation_454", "nl": "The periodic table has far fewer of the elements listed in the right hand corner.", "fol": "", "prediction": ["all x y.((PeriodicTable(x) & Element(y) & ListedInRightHandCoin(x,y)) -> FarFarFarFarFarFarFarFarFarFarFarFarFarFarCrown(x,y))", "all x.(PeriodicTable(x) -> FarFarFarFarFarFarFarFarFarElements(x))", "all x y.((PeriodicalTable(x) & Element(y) & ListedInRightHandCoin(x,y)) -> FarFarFarFarFarFarFarFarFarFarFarFarFarFarCrown(x,y))", "all x.(PeriodicTable(x) -> FarFarFamerElements(x))", "all x.(PeripheralTable(x) -> FarFarFarFarFarFarFarFarFarElements(x))", "(FarFarFarFarFarFarFarFarRightHandCoin(Penny(Penny) & FarFarFarFarFarFarFarRightHandCoin(Penny))", "(exists x.(PeriodicTable(x) & FarFarFamerElements(x)) & ListedInRightHandCoin(x))", "all x y.((PeriodicTable(x) & Element(y) & ListedInRightHandCoin(x,y)) -> FarFarFarFarFarFarFarFarFarFarFarFarFarCrown(x,y))", "(FarLeastElementsInRightHandCoin(Penny))", "all x y.((PeripheralTable(x) & Element(y) & ListedInRightHandCoin(x,y)) -> FarFarFarFarFarFarFarFarFarFarFarFarFarCrown(x,y))", "all x.(PeripheralTable(x) -> FarFarFamerElements(x))", "all x.(PeriodicTable(x) -> FarFamerElements(x))", "all x.(PeriodicalTable(x) -> FarFamerElementsInRightHandCoin(x))", "all x y.((PeriodicTable(x) & Element(y) & ListedInRightHandCrown(x,y)) -> FarFarFamer(x,y))", "exists x.(PeriodicTable(x) & FarFarFarFarFarFarFarFarFarRightHandCoin(x))", "exists x.(PeripheralTable(x) & FarFarFarFarFarFarFarFarFarRightHandCoin(x))"]}
{"id": "eqasc_validation_455", "nl": "Elements Elements are composed of atoms.", "fol": "", "prediction": ["all x.(Element(x) -> ComposedOfAtoms(x))", "all x y.((Element(x) & Atom(y)) -> ComposedOf(x,y))", "(ComposedOfAtoms(Elements))", "(ComposedOfAtoms(elements) & ComposedOfAtoms(elements))", "all x.(Element(x) -> ComposedOfAtoms(x))", "Elements (ComposedOfAtoms)", "all x y.((Element(x) & Atom(y)) -> ComposedOf(x,y))", "all x.(Elements(x) -> ComposedOfAtoms(x))", "all x.(Elements(x) -> ComposedOfAtoms(x))", "all x y.((Element(x) & Atom(y)) -> ComposedOf(x,y))", "all x.(Element(x) -> ComposedOfAtoms(x))", "all x.(Elements(x) -> ComposedOfAtoms(x))", "all x y.((Element(x) & Atom(y)) -> ComposedOf(x,y))", "All x.(Element(x) -> ComposedOfAtoms(x))", "all x.(Elements(x) -> ComposedOfAtoms(x))", "All x.(Elements(x) -> ComposedOfAtoms(x))"]}
{"id": "eqasc_validation_456", "nl": "Nonmetal atomic material is far fewer in number.", "fol": "", "prediction": ["all x.((NonmetalAtomicMaterial(x) & FarFarLiderInNumber(x)) -> -(NonmetalAtomicMaterial(x) & FarFarLiderInNumber(x)))", "all x.(NonmetalAtomicMaterial(x) -> FarFarLiderInNumber(x))", "all x.((NonmetalAtomicMaterial(x) & FarLigerInNumber(x)) -> -(NonmetalAtomicMaterial(x) & FarLigerInNumber(x)))", "(NonmetalAtomicMaterial(n) & FarFarLiderInNumber(n))", "all x y.((NonmetalAtomicMaterial(x) & Material(y)) -> FarFarLiderInNumber(x,y))", "(-MetalAtomicMaterial(x) & FarFarLiderInNumber(x))", "all x.(NonmetalAtomicMaterial(x) -> FarLiderInNumber(x))", "(NonmetalAtomicMaterial(n) & FarLiderInNumber(n))", "all x y.((NonmetalAtomicMaterial(x) & Material(y)) -> FewerInNumber(x,y))", "all x.((NonMetalAtomicMaterial(x) & FarFarLiderInNumber(x)) -> -Material(x))", "all x.((Material(x) & Nonmetal(x)) -> FarFarLiderInNumber(x))", "all x.(NonmetalAtomicMaterial(x) -> FewerInNumber(x))", "all x.((NonmetalAtomicMaterial(x) & FarLergerInNumber(x)) -> AtomicMaterial(x))", "all x.((NonMetalAtomicMaterial(x) & FewerInNumber(x)) -> -Material(x))", "all x.(NonMetalAtomicMaterial(x) -> FarFarLiderInNumber(x))", "exists x.(NonMetalAtomicMaterial(x) & FarLessInNumber(x))"]}
{"id": "eqasc_validation_457", "nl": "Elements are grouped into the Periodic Table .", "fol": "", "prediction": ["all x.(Element(x) -> PeriodicTable(x))", "all x y.((Element(x) & PeriodicTable(y)) -> GroupedInto(x,y))", "all x y z.((Element(x) & PeriodicTable(y) & PeriodicTable(z)) -> GroupedInto(x,y,z))", "(GroupedIntoPeriodicTable(elements))", "all x.(Element(x) -> PeriodicTable(x))", "all x y.((Element(x) & PeriodicTable(y)) -> GroupedInto(x,y))", "(GroupedIntoPeriodicTable(Elements))", "all x y.((Element(x) & PeriodicTable(y)) -> GroupedInto(x,y))", "all x.(Element(x) -> PeriodicTable(x))", "all x y.(Element(x) -> PeriodicTable(y))", "all x y.((Element(x) & PeriodicTable(y)) -> GroupedInto(x,y))", "all x.(Element(x) -> PeriodicTable(x))", "all x.(Elements(x) -> PeriodicTable(x))", "All x.(Element(x) -> PeriodicTable(x))", "All x.(Elements(x) -> PeriodicTable(x))", "All x.(Element(x) -> PeriodicTable(x))"]}
{"id": "eqasc_validation_458", "nl": "nonmetal periodic table groups are far fewer in number", "fol": "", "prediction": ["all x.((NonMetalPeriodicTableGroup(x) & FarLessInNumber(x)) -> FarLessInNumber(x))", "all x.(NonMetalPeriodicTableGroup(x) -> FarLessInNumber(x))", "all x.((NonMetalPeriodicTableGroup(x) & FarLeastNumberInNumber(x)) -> FarLeastNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumber", "(NonmetalPeriodicTableGroup(n) & FarLeastNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberInNumberIn", "all x y.((NonMetalPeriodicTableGroup(x) & NonMetalPeriodicTableGroup(y)) -> FarLessInNumber(x,y))", "(NonMetalPeriodicTableGroup(n) & FarLessInNumber(n))", "(NonMetalPeriodicTableGroups(n) & FarLessInNumber(n))", "all x y.((NonMetalPeriodicTableGroup(x) & NonMetalPeripheralTableGroup(y)) -> FarLessInNumber(x,y))", "all x.(NonMetalPeriodicTableGroup(x) -> FarLikelerInNumber(x))", "-MetalPeriodicTableGroups(n) & FarLessInNumber(n))", "all x y.((NonMetalPeriodicalTableGroup(x) & NonMetalPeriodicalTableGroup(y)) -> FarLessInNumber(x,y))", "all x.((NonMetalPeriodicalTableGroup(x) & FarLessInNumber(x)) -> FarLessInNumber(x))", "all x.((NonMetalPeriodicTableGroup(x) & FarFarLiderInNumber(x)) -> FarLiderInNumber(x))", "all x y.((NonMetalPeriodicTableGroup(x) & PeriodicTableGroup(y)) -> FarLessInNumber(x,y))", "all x.(NonMetalPeriodicTableGroup(x) -> FarLessInNumber(x))", "all x.(NonMetalPeriodicalTableGroup(x) -> FarLessInNumber(x))"]}
{"id": "eqasc_validation_459", "nl": "Each element is either a metal, nonmetal, or metalloid.", "fol": "", "prediction": ["all x.(Element(x) -> (Metal(x) | Nonmetal(x) | Metalloid(x)))", "all x.(Element(x) -> (Metal(x) | Nonmetal(x) | Metalloid(x)))", "(all x.(Element(x) -> Metal(x)) & all y.(Element(y) -> Nonmetal(y))) & all z.(Element(z) -> Metalloid(z)))", "(all x.(Element(x) -> (Metal(x) | Nonmetal(x) | Metalloid(x)))", "all x.(Element(x) -> (Metal(x) | Nonmetal(x) | Metalloid(x)))", "all x y.(Element(x) -> (Metal(y) | Nonmetal(y) | Metalloid(y)))", "(all x.(Element(x) -> (Metal(x) | -Metal(x) | Metalloid(x))))", "all x.(Element(x) -> (Metal(x) | Nonmetal(x) | Metalloid(x)))", "exists x.(Element(x) & Metal(x) & -Metal(x) & -Metalloid(x))", "all x.(Element(x) -> (Metal(x) | -Metal(x) | Metalloid(x)))", "all x y.(Element(x) -> (Metal(x) | Nonmetal(x) | Metalloid(y)))", "exists x.(Electron(x) & (Metal(x) | Nonmetal(x) | Metalloid(x)))", "all x.(Element(x) -> (Metal(x) | NonMetal(x) | Metalloid(x)))", "exists x.(Element(x) & Metal(x) & Nonmetal(x) & Metalloid(x))", "all x.(Element(x) -> (Metal(x) | -Metal(x) | Metalloid(x)))", "all x.(Element(x) -> (Metal(x) | Nonmetal(x) | Metalloid(x)))"]}
{"id": "eqasc_validation_460", "nl": "elements that are not metal or metalloid are far fewer in number", "fol": "", "prediction": ["all x.((Element(x) & -Metal(x) & -Metalloid(x)) -> FarLergerInNumber(x))", "all x y.((Element(x) & -Metal(x) | Element(y) & Metalloid(y)) -> FarLargerInNumber(x))", "all x.((Element(x) & -Metal(x) & -Metalloid(x)) -> FarLessInNumber(x))", "(all x.((Element(x) & -Metal(x)) | -Metalloid(x)) -> FarFarLiderInNumber(x))", "all x.((Element(x) & -Metal(x) & -Metalloid(x)) -> FarFarLiderInNumber(x))", "all x y.((Element(x) & -Metal(x) | Metalloid(x)) -> FarLergerInNumber(y))", "all x.((Elements(x) & -Metal(x) & -Metalloid(x)) -> FarLargerInNumber(x))", "all x y.((Element(x) & -Metal(x) & -Metalloid(x)) -> FarLessInNumber(y))", "all x.((Element(x) & -Metal(x) & -Metalloid(x)) -> FarLargerInNumber(x))", "all x.((Element(x) & -Metal(x) | -Metalloid(x)) -> FarLergerInNumber(x))", "all x y.((Element(x) & -Metal(x) & -Metalloid(x)) -> FarFarLiderInNumber(x,y))", "(all x.((Element(x) & -Metal(x) | Metalloid(x))) -> FarFarFamerInNumber(x))", "all x.((Element(x) & -Metal(x) & -Metalloid(x)) -> FarLessNumber(x))", "all x.((Element(x) & (-Metal(x) | -Metalloid(x))) -> FarFarLergerInNumber(x))", "all x.((Elements(x) & -Metal(x) & -Metalloid(x)) -> FarLessInNumber(x))", "all x.((Element(x) & (-Metal(x) | -Metalloid(x))) -> FarLergerInNumber(x))"]}
{"id": "eqasc_validation_461", "nl": "There are 17 nonmetals on the periodic table", "fol": "", "prediction": ["all x.((Nonmetal(x) & PeriodicTable(x)) -> ThereAre17(x,nonmetal))", "all x y.((Nonmetal(x) & PeriodicTable(y)) -> (Nonmetal(x,y) & Nonmetal(x,y)))", "(OnperiodicalTable(nonmetal) -> 17(nonmetal)))", "(Nonmetal(n) & OnPeriodicTable(n)) -> ThereAre17(n))", "exists x.(Nonmetal(x) & OnPeriodicTable(x,17))", "all x y z.((Nonmetal(x) & PeriodicTable(y) & Nonmetal(z)) -> (On(x,y,z) & On(x,y)))", "-(Nonmetal(x) & PeriodicTable(x)) -> ThereAre17(x))", "(Nonmetal(n) & OnPeriodicTable(n) & OnPeriodicTable(n)) -> 17(n))", "Exists x.(Nonmetal(x) & OnPeriodicTable(x,17))", "all x.((Nonmetal(x) & PeriodicTable(x)) -> ThereAre17(x,nonmetal))", "(OnperiodicTable(nonmetal) -> ThereAre17(nonmetals))", "all x y.((NonMetal(x) & PeriodicalTable(y)) -> ThereAre17(x,y))", "(OnPeriodicTable(nonmetal) -> 17(nonmetal))", "all x y.((Nonmetal(x) & PeriodicTable(y) & On(x,y)) -> ThereAre17(x,y))", "exists x.(Nonmetal(x) & NonMetal(x) & OnPeriodicTable(x))", "All x.(Nonmetal(x) -> OnPeriodicTable(x,17))"]}
{"id": "eqasc_validation_462", "nl": "Elements to the right of the semiconductors are Nonmetals.", "fol": "", "prediction": ["all x.((Element(x) & ToRightOfSemiconductors(x)) -> Nonmetals(x))", "all x y.((Element(x) & Semiconductor(y) & ToRightOf(x,y)) -> Nonmetal(x))", "all x.((Element(x) & ToRightOfSemiconductors(x)) -> Nonmetals(x))", "all x.((Element(x) & RightOfSemiconductors(x)) -> Nonmetals(x))", "all x y.((Element(x) & Semiconductor(y) & ToRightOf(x,y)) -> Nonmetal(x))", "(Nonmetal(x) -> ToRightOfSemiconductors(x))", "(all x.((Element(x) & RightOfSemiconductors(x)) -> Nonmetal(x))", "all x.((ElementsToRightOfSemiconductors(x)) -> Nonmetals(x))", "all x.((Element(x) & ToRightOfSemiconductors(x)) -> Nonmetals(x))", "all x.(Nonmetal(x) -> ToRightOfSemiconductors(x))", "all x.((Element(x) & RightOfSemiconductors(x)) -> Nonmetal(x))", "all x y.((Element(x) & Semiconductor(y) & RightOf(x,y)) -> Nonmetal(x))", "all x y.((Element(x) & Semiconductor(y) & ToRightOf(x,y)) -> Nonmetals(x))", "(all x.((Element(x) & RightOfSemiconductors(x)) -> Nonmetal(x))", "all x.((Element(x) & ToRightOfSemiconductors(x)) -> Nonmetals(x))", "All x.(Element(x) -> Nonmetal(x))"]}
{"id": "eqasc_validation_463", "nl": "Elements to the right of the semiconductors are far fewer in number", "fol": "", "prediction": ["all x.((Element(x) & RightOfSemiconductors(x)) -> FarLergerInNumber(x))", "all x.((ElementsToRightOfSemiconductors(x) & FarLiderInNumber(x)) -> Semiconductor(x))", "all x y.((Element(x) & Semiconductor(y) & ToRight(x,y)) -> FarLiderInNumber(x,y))", "all x.((Element(x) & ToRightOfSemiconductors(x)) -> FarLiderInNumber(x))", "all x y.((Element(x) & Semiconductor(y) & ToRightOf(x,y)) -> FarLiderInNumber(x,y))", "all x y z.((Element(x) & Semiconductor(y) & Electronic(z) & ToRightOf(x,y,z)) -> FarLiderInNumber(x,y,z))", "all x.((ElementsToRightOfSemiconductors(x) & FarLiderInNumber(x)) -> Semiconductor(x))", "all x.((ElementsToRightOfSemiconductors(x) & FarFarLiderInNumber(x)) -> Semiconductor(x))", "(Far FewerInNumber(elementsToRightOfSemiconductors)", "all x y.((ElementsToRightOfSemiconductors(x) & Semiconductor(y)) -> FarLergerInNumber(x,y))", "all x y.((Element(x) & Semiconductor(y)) -> FarLergerInNumber(x,y))", "all x.((Element(x) & RightOfSemiconductor(x)) -> FarFarLiderInNumber(x))", "all x.((ElementsToRightOfSemiconductors(x) & FarFarLiderInNumber(x)) -> Semiconductor(x))", "all x y.((Element(x) & Semiconductor(y) & RightOf(x,y)) -> FarFarFamerInNumber(x,y))", "all x y z.((Element(x) & Semiconductor(y) & Semiconductor(z)) -> FarLiderInNumber(x,y,z))", "all x.(ElementsToRightOfSemiconductors(x) -> FarLergerInNumber(x))"]}
{"id": "eqasc_validation_464", "nl": "Blood type is important for medical reasons.", "fol": "", "prediction": ["all x.(BloodType(x) -> ImportantForMedicalCauses(x))", "all x.((BloodType(x) & MedicalRates(x)) -> Important(x))", "(ImportantForMedicalCauses(bloodtype) -> ImportantForMedicalCauses(bloodType))", "all x y.((BloodType(x) & MedicalRates(y)) -> ImportantFor(x,y))", "all x.(BloodType(x) -> ImportantForMedicalCauses(x))", "all x.((BloodType(x) & MedicalRates(x)) -> ImportantFor(x,y))", "all x.((BloodType(x) & ImportantForMedicalCauses(x)) -> ImportantForMedicalCauses(x))", "(ImportantForMedicalCauses(bloodType))", "all x y.((BloodType(x) & MedicalRates(y)) -> ImportantFor(x,y))", "all x.(BloodType(x) -> ImportantForMedicalCauses(x))", "exists x.(BlueType(x) & ImportantForMedicalCauses(x))", "all x y.((BloodType(x) & MedicalRights(y)) -> ImportantFor(x,y))", "all x.(BloodType(x) -> ImportantForMedicalRates(x))", "All x y.((BloodType(x) & Medical(y)) -> ImportantFor(x,y))", "all x.(BloodType(x) -> ImportantForMedicalCauses(x))", "exists x.(BloodType(x) & ImportantForMedicalCauses(x))"]}
{"id": "eqasc_validation_465", "nl": "If there was a serious emergency, the team knows who has compatible blood types.", "fol": "", "prediction": ["all x.((SeriousEmergency(x) & Team(x)) -> KnowsCompatibleBloodTypes(x))", "all x y.((SeriousEmergency(x) & Team(y)) -> KnowsCompatibleBloodTypes(y,x))", "all x.((Emergency(x) & Serious(x)) -> KnowsCompatibleBloodTypes(x))", "all x.((SeriousEmergency(x) & HasCompatibleBloodTypes(x)) -> Knows(x))", "all x.(SeriousEmergency(x) -> KnowsCompatibleBloodTypes(x))", "all x y.((Emergency(x) & Team(y) & Serious(x)) -> KnowsCompatibleBloodTypes(y,x))", "all x y.((SeriousEmergency(x) & Team(y)) -> KnowsCompatibleBloodTypes(y,x))", "all x y z.((SeriousEmergency(x) & Team(y) & BloodType(z)) -> Knows(y,z))", "all x.(SeriousEmergency(x) -> KnowsCompatibleBloodType(x))", "all x.((SeriousEmergency(x) & Team(x)) -> KnowsCompatibleBloodTypes(x))", "all x y.((SeriousEmergency(x) & Team(y)) -> KnowsCompatibleBloodTypes(y,x))", "exists x.(SeriousEmergency(x) & TeamKnowsCompatibleBloodTypes(x))", "all x y.((SeriousEmergency(x) & Team(y)) -> KnowsCompatibleBloodTypes(y,x))", "all x.(SeriousEmergency(x) -> KnowsCompatibleBloodType(x))", "exists x.(SeriousEmergency(x) & TeamKnowsCompatibleBloodTypes(x))", "all x y.((SeriousEmergency(x) & Team(y)) -> KnowsCompatibleBloodTypes(y,x))"]}
{"id": "eqasc_validation_466", "nl": "Knowing who has compatible blood is important for medical reasons", "fol": "", "prediction": ["all x.((CompatibleBlood(x) & Knows(x)) -> ImportantForMedicalRates(x))", "all x.((Blood(x) & Compatible(x)) -> ImportantForMedicalRates(x))", "all x.((CompatibleBlood(x) & HasBlood(x)) -> ImportantForMedicalRates(x))", "all x.((HasCompatibleBlood(x) & MedicalRates(x)) -> ImportantFor(x,MedicalRates))", "all x y.((CompatibleBlood(x) & MedicalRights(y)) -> ImportantFor(x,y))", "all x.(CompatibleBlood(x) -> ImportantForMedicalCauses(x))", "all x y z.((CompatibleBlood(x) & MedicalRights(y) & MedicalRights(z)) -> ImportantFor(x,y,z))", "all x y.((CompatibleBlood(x) & MedicalRates(y)) -> ImportantFor(x,y))", "all x y.((Blood(x) & Blood(y) & Compatible(y)) -> ImportantForMedicalCauses(x,y))", "all x.((BothCompatibleBlood(x) & HasCompatibleBlood(x)) -> ImportantForMedicalRates(x))", "all x y.((Client(x) & Blood(y)) -> ImportantForMedicalCauses(x,y))", "(all x.(CompatibleBlood(x) -> ImportantForMedicalCauses(x)))", "all x y.((HasCompatibleBlood(x) & MedicalRates(y)) -> ImportantFor(x,y))", "all x.((CompatibleBlood(x)) -> ImportantForMedicalRates(x))", "all x.(CompatibleBlood(x) -> ImportantForMedicalAreas(x))", "all x.(CompatibleBlood(x) -> ImportantForMedicalCauses(x))"]}
{"id": "eqasc_validation_467", "nl": "Medical treatment is overseen by medical personnel.", "fol": "", "prediction": ["all x y.((MedicalTreatment(x) & MedicalPersonnel(y)) -> Oversees(x,y))", "all x.(MedicalTreatment(x) -> OverseenByMedicalPersonnel(x))", "all x y z.((MedicalTreatment(x) & MedicalPersonnel(y) & MedicalTreatment(z)) -> OverseenBy(y,z))", "all x y.((MedicalTreatment(x) & MedicalPersonnel(y)) -> OverseenBy(x,y))", "(OverseesMedicalTreatment(MedicalPersonnel)", "(OverseenByMedicalTreatment(medical) & MedicalPersonnel(medical))", "all x.(MedicalTreatment(x) -> OverseenByMedicalPersonnel(x))", "all x y z.((MedicalTreatment(x) & MedicalPersonnel(y) & MedicalTreatment(z)) -> OverseenBy(x,y,z))", "all x y.((MedicalTreatment(x) & MedicalPersonnel(y)) -> Oversees(x,y))", "all x.(MedicalTreatment(x) -> OverseenByMedicalPersonnel(x))", "all x.(MedicalTreatment(x) -> SurveilledByMedicalPersonnel(x))", "all x y.((MedicalTreatment(x) & MedicalPersonnel(y)) -> OverseenBy(x,y))", "all x.(MedicalTreatment(x) -> OverseenByMedicalPersonnel(x))", "all x y.((MedicalTreatment(x) & MedicalPersonnel(y)) -> Oversees(x,y))", "all x y.((MedicalTreatment(x) & MedicalPersonnel(y)) -> OverseenBy(x,y))", "all x.(MedicalTreatment(x) -> OverseenByMedicalPersonnel(x))"]}
{"id": "eqasc_validation_468", "nl": "Hospital personnel may want to know your blood type.", "fol": "", "prediction": ["all x.(HospitalPersonnel(x) -> (WantToKnowBloodType(x) | WantToKnowBloodType(x)))", "all x y.((HospitalPersonnel(x) & BloodType(y)) -> WantsToKnow(x,y))", "(WantToKnowBloodType(HospitalPersonnel))", "all x.(HospitalPersonnel(x) -> MayWantToKnowBloodType(x))", "(exists x.(HospitalPersonnel(x) & WantsToKnow(x)) & BloodType(x))", "all x y.((HospitalPersonnel(x) & BloodType(y)) -> MayWantToKnow(x,y))", "all x.(HospitalPersonnel(x) -> (WantsToKnowBloodType(x) | WantsToKnowBloodType(x)))", "all x.((HospitalPersonnel(x) & KnowsBloodType(x)) -> MayWantToKnow(x,BloodType))", "all x y.((HospitalPersonnel(x) & BloodType(y)) -> WantsToKnow(x,y))", "exists x.(HospitalPerson(x) & WantsToKnowBloodType(x))", "exists x.(HospitalPersonnel(x) & WantsToKnowBloodType(x))", "all x.(HospitalPersonnel(x) -> MayWantToKnow(x,bloodType))", "all x y.((HospitalPersonnel(x) & BloodType(y)) -> MayWantToKnow(x,y))", "exists x.(HospitalPersonnel(x) & KnowsBloodType(x))", "all x y.((HospitalPersonnel(x) & BloodType(y)) -> WantsToKnow(x,y))", "exists x.(HospitalPersonnel(x) & WantsToKnowBloodType(x))"]}
{"id": "eqasc_validation_469", "nl": "Treatment Treatment of cirrhosis is medical.", "fol": "", "prediction": ["all x.(Cirrhosis(x) -> Medical(x))", "all x.((Cirrhosis(x) & Treatment(x)) -> Medical(x))", "all x.(Cirrhosis(x) -> MedicalTreatment(x))", "all x y.((Cirrhosis(x) & Treatment(y)) -> Medical(x))", "(MedicalTreatment(cirrhosis) & Treatment(cirrhosis))", "all x.(CirrhosisTreatment(x) -> Medical(x))", "Treatment (MedicalTreatment(cirrhosis)", "Treatment(cirrhosis)", "all x y.((Treatment(x) & Cirrhosis(y)) -> Medical(x))", "All x.((Cirrhosis(x) & Treatment(x)) -> Medical(x))", "(MedicalTreatment(cirrhosis) & Treatment(cirrhosis))", "Treatment (MedicalTreatment(cirrhosis)", "all x y.((Cirrhosis(x) & Treatment(y)) -> Medical(x))", "all x.(Cirrhosis(x) -> Medical(x))", "All x.(Cirrhosis(x) -> MedicalTreatment(x))", "All x.((Cirrhosis(x) & Treatment(x)) -> Medical(x))"]}
{"id": "eqasc_validation_470", "nl": "Blood type is important for some treatments.", "fol": "", "prediction": ["exists x.(BloodType(x) & ImportantForTreatments(x))", "all x y.((BloodType(x) & Treatment(y)) -> ImportantFor(x,y))", "exists x.(BloodType(x) & ImportantForTreatments(x))", "(exists x.(BloodType(x) & ImportantForTreatments(x)))", "all x y.((BloodType(x) & Treatment(y)) -> ImportantFor(x,y))", "exists x.(BlueTreatment(x) & ImportantFor(x,y))", "exists x.(BloodType(x) & ImportantForTreatment(x))", "all x y.((Treatment(x) & BloodType(y)) -> ImportantFor(x,y))", "all x y.((BloodType(x) & Treatment(y)) -> ImportantFor(x,y))", "exists x.(BloodType(x) & ImportantFor(x,y))", "all x y.((BloodType(x) & Treatment(y)) -> Important(x,y))", "exists x.(BlueTreatment(x) & ImportantFor(x,y))", "exists x.(BloodType(x) & ImportantForTreatments(x))", "exists x.(BloodType(x) & ImportantFor(x,Treatment))", "all x y.((BloodType(x) & Treatment(y)) -> ImportantFor(x,y))", "exists x.(BloodType(x) & ImportantForTreatment(x))"]}
{"id": "eqasc_validation_471", "nl": "Each of the four blood types, O, A, B and AB play an important role in patient care.", "fol": "", "prediction": ["all x.((BloodType(x) & O(x) | A(x) | B(x) | AB(x))) -> ImportantRoleInPatientCare(x))", "all x y.((BloodType(x) & BloodType(y) & O(x) & A(x) & B(x) & AB(x)) -> ImportantRoleInPatientCare(y))", "all x.((BloodType(x) & O(x) & A(x) & B(x) & AB(x)) -> ImportantRoleInPatientCare(x))", "all x y z.((BloodType(x) & BloodType(y) & PatientCare(z)) -> (O(y) | A(y) | B(y) | AB(y)))", "(All x.((BloodType(x) & O(x)) | All y.((BloodType(y) & A(y))) | All z.((BloodType(z) & B(z)))) -> ImportantRoleInPatientCare(x,y,z)))", "(all x y.((BloodType(x) & O(y)) | All z w.((BloodType(z) & A(w))) & All z w.((BloodType(w) & A(w))) -> ImportantRoleInPatientCare(x,y,z,w)))", "all x.((BloodType(x) & (O(x) | A(x) | B(x) | AB(x))) -> ImportantRoleInPatientCare(x))", "all x y.((BloodType(x) & BloodType(y) & O(x) & A(x) & B(x) & AB(x)) -> ImportantRoleInPatientCare(x))", "(All x.((BloodType(x) & O(x)) | All y.((BloodType(y) & A(y))) -> ImportantRoleInPatientCare(y)))", "all x.((BloodType(x) & O(x) | A(x) | B(x) | AB(x))) -> ImportantRoleInPatientCare(x))", "all x y z.((BloodType(x) & BloodType(y) & PatientCare(z)) -> (O,A,B,AB) & ImportantRole(y,z)))", "all x.(BloodType(x) -> (O,A,B,AB) & ImportantRoleInPatientCare(x)))", "(All x.((BloodType(x) & O(x)) | All y.(BloodType(y) & A(y))) | All z.(BloodType(z) & B(z)))) -> ImportantRoleInPatientCare(x))", "(all x.((BloodType(x) & O(x)) | All y.((BloodType(y) & A(y)))) -> PlaysImportantRoleInPatientCare(x,y)))", "all x y.((BloodType(x) & PatientCare(y)) -> (O(x) | A(x) | B(x) | AB(x)))", "all x.((BloodType(x) & O(x) & A(x) & B(x) & AB(x)) -> ImportantRoleInPatientCare(x))"]}
{"id": "eqasc_validation_472", "nl": "being type O A B or AB is important for medical reasons", "fol": "", "prediction": ["all x.((B(x) | AB(x)) -> ImportantForMedicalRates(x))", "(ImportantForMedicalRates(ImportantForMedicalRates(ImportantForMedicalRates(ImportantForMedicalRates(ImportantForMedicalRates(ImportantForMedicalRates(ImportantForMedicalRates(ImportantForMedicalRates(ImportantForMedicalRates(ImportantForMedicalRates(ImportantForMedicalRates(ImportantForMedicalRates(ImportantForMedicalRates(ImportantForClimateDates(ImportantForClimateDates(ImportantForClimateDates(ImportantForClimateDates(ImportantForClimateDates(ImportantForClimateDates(ImportantForClimateDates(ImportantForClimateDates(ImportantForClimateDates(ImportantForClimateDates(ImportantForClimateDates(ImportantForClimateDates(ImportantForClimateDates(ImportantForClimateDates(ImportantForClimateDates(ImportantClimateDates(ImportantClimateDates(ImportantClimateDates(ClimateDates(ClimateDates(ClimateDates(ClimateDates(ClimateDates(ClimateDates(ClimateDates(ClimateDates(ClimateDates(ClimateDates)ClimateDates)ClimateDates)ClimateDates)ClimateDatesClimateDatesClimateDatesClimateDatesClimateDatesClimateDatesClimateDatesClimateDatesClimateDatesClimateDatesClimateDatesClimateDatesClimateDatesClimateDatesClimateDatesClimateDatesClimateDatesClimateDatesClimateDumsClimateDumClimateDumC", "all x.((B(x) | AB(x)) -> ImportantForMedicalCauses(x))", "all x.((TypeO(x) | TypeAB(x)) -> ImportantForMedicalRates(x))", "(TypeO(B) | TypeAB(B)))", "all x.((Boy(x) | AB(x)) -> ImportantForMedicalRates(x))", "all x y.((Boy(x) | AB(x)) -> ImportantForMedicalRates(x,y))", "all x y.((B(x) | AB(x)) -> ImportantForMedicalCauses(x))", "all x.(B(x) | AB(x)) -> ImportantForMedicalRates(x))", "all x y.((TypeO(x) & (B(y) | AB(y))) -> ImportantForMedicalRates(x))", "all x.((B(x) | AB(x)) -> ImportantForMedicalRates(x))", "all x.((TypeO(x) | TypeAB(x)) -> ImportantForMedicalCauses(x))", "(TypeO(B) | TypeAB(B)))", "all x y.((Boy(x) | Abby(x)) -> ImportantForMedicalCauses(x))", "All x.((Boy(x) | Abby(x)) -> ImportantForMedicalRates(x))", "All x.(O A B(x) | AB(x)) -> ImportantForMedicalRates(x))"]}
{"id": "eqasc_validation_473", "nl": "Blood type is determined by inherited antigens and antibodies.", "fol": "", "prediction": ["all x.(BloodType(x) -> (DeterminedByEarnedAntigens(x) & DeterminedByAntibodies(x)))", "all x y.((BloodType(x) & ErasedAntigens(y) & Antibodies(y)) -> DeterminedBy(x,y))", "all x.(BloodType(x) -> (DeterminedByErinheritedAntigens(x) & DeterminedByAntibodies(x)))", "(AllegedAntigens(blood) & Antibodies(blood))", "(DeterminedByEarnedAntigens(blood) & DeterminedByAntibodies(blood))", "(AllegedAntigens(blood) & DeterminedByAntibodies(blood))", "all x y z.((BloodType(x) & Antigen(y) & Antibody(z)) -> (DeterminedBy(x,y,z) & Erased(x)))", "all x.(BloodType(x) -> (DestinatedBy(x,inheritedAntigens) & DeterminedBy(x,antibodies)))", "all x.((BloodType(x) & ErasedAntigens(x) & Antibodies(x)) -> DeterminedBy(x,y))", "(DistributesThreatType(blood) & ErasedAntigens(blood) & DistributesThreatType(blood))", "all x.(BlueTyp(x) -> (DeterminedByEarnedAntigens(x) & DeterminedByAntibodies(x)))", "all x y.((BloodType(x) & ErasedAntigens(y) & Antibodies(x)) -> DeterminedBy(x,y))", "all x.(BloodType(x) -> (DeterminedByEarnedAntigens(x) & DeterminedByAntibodies(x)))", "all x.(BloodType(x) -> (DistributedBy(x,inheritedAntigens) & DistributedBy(x,antibodies)))", "all x.(BloodType(x) -> (DeterminedByEarnedAntigens(x) & DeterminedByAntibodies(x)))", "all x y.((BloodType(x) & (ErinheritedAntigens(y) | Antibodies(y))) -> DeterminedBy(x,y))"]}
{"id": "eqasc_validation_474", "nl": "inherited antigens and antibodies are important for medical reasons", "fol": "", "prediction": ["all x.((EarnedAntigens(x) & Antibodies(x)) -> ImportantForMedicalCauses(x))", "all x y.((EarnedAntigen(x) & Antibodies(y)) -> ImportantForMedicalCauses(x,y))", "all x y z.((EarnedAntigen(x) & Antibody(y) & MedicalRights(z)) -> (ImportantForMedicalCauses(x,y,z) & ImportantForMedicalCauses(x,z)))", "(AllegedAntigensAndAntibodies(inherited) & ImportantForMedicalCauses(inheritedAntigensAndAntibodies))", "all x y.((EarnedAntigen(x) & Antibody(y)) -> (ImportantForMedicalCauses(x,y) & ImportantForMedicalCauses(x,y)))", "all x.((ErasedAntigens(x) & ErasedAntibodies(x)) -> ImportantForMedicalCauses(x))", "all x.((EarnedAntigens(x) & Antibodies(x)) -> ImportantForMedicalCauses(x))", "all x.((EarnedAntigens(x) & ErasedAntibodies(x)) -> ImportantForMedicalCauses(x))", "(all x.((ErasedAntigen(x) & All Y.(Antibodies(y)) & Medical(z)) -> ImportantForMedicalCauses(x,y,z)))", "all x y.((ErasedAntigen(x) & ErasedAntibodies(y)) -> ImportantForMedicalCauses(x,y))", "all x.((HerdedAntigens(x) & HeteroidAntibodies(x)) -> ImportantForMedicalCauses(x))", "(AllegedAntigensAndAntibodies(e) & ImportantForMedicalCauses(e))", "all x y z.((EarnedAntigen(x) & Antibody(y) & MedicalRights(z)) -> ImportantFor(x,y,z))", "all x.((ErasedAntigens(x) & ErasedAntibodies(x)) -> ImportantForMedicalCauses(x))", "all x y.((EarnedAntigens(x) & Antibodies(y)) -> ImportantForMedicalCauses(x,y))", "all x.((EarnedAntigens(x) & InheritanceAntibodies(x)) -> ImportantForMedicalCauses(x))"]}
{"id": "eqasc_validation_475", "nl": "Of course, medical interventions go way beyond pills, bandages, and surgery.", "fol": "", "prediction": ["all x.(MedicalIntervention(x) -> (GoesBeyondPills(x) & GoesBeyondBandages(x) & GoesBeyondSurgery(x)))", "all x.(MedicalIntervention(x) -> (ExceedsPills(x) & ExceedsBandages(x) & ExceedsSurgery(x)))", "all x.((MedicalIntervention(x) & BeyondPills(x) & BeyondBandages(x) & BeyondSurgery(x)) -> MedicalIntervention(x))", "all x y.((MedicalIntervention(x) & Pill(y) & Bandage(y) & Surgery(y)) -> GoesBeyond(x,y))", "all x y.((MedicalIntervention(x) & Pill(y) & Bandage(y)) -> (GoesBeyond(x,y) & GoesBeyond(x,y) & GoesBeyond(x,y)))", "all x y z.((MedicalIntervention(x) & Pill(y) & Bandage(z) & Surgery(x)) -> (GoesBeyond(x,y,z) & GoesBeyond(x,y)))", "all x.(MedicalIntervention(x) -> (GoesBeyondPills(x) & GoesBeyondBandages(x) & GoesBeyondSurgery(x)))", "(all x.(MedicalIntervention(x) -> (Pills(x) | Bandages(x) | Surgery(x))))", "all x.(MedicalIntervention(x) -> (ExceedsPills(x) & ExceedsBandages(x) & ExceedsSurgery(x)))", "exists x.(MedicalInitiative(x) & BeyondPills(x) & BeyondBandages(x) & BeyondSurgery(x))", "all x.(MedicalIntervention(x) -> (GoesByPills(x) & GoesByBandages(x) & GoesBySurgery(x)))", "(all x.(MedicalIntervention(x) -> (Pills(x) | Bandages(x) | Surgery(x))))", "all x.(MedicalIntervention(x) -> (GoesBeyondPills(x) & GoesBeyondBandages(x) & GoesBeyondSurgery(x)))", "exists x.(MedicalIntervention(x) & BeyondPills(x) & BeyondBandages(x) & BeyondSurgery(x))", "all x y.((MedicalIntervention(x) & Pill(y) & Bandage(y) & Surgery(y)) -> GoesBeyond(x,y))", "(all x.(MedicalIntervention(x) -> (Pills(x) | Bandages(x) | Surgery(x))))"]}
{"id": "eqasc_validation_476", "nl": "Blood type is important to know prior to surgery.", "fol": "", "prediction": ["all x.(BloodType(x) -> ImportantToKnow(x))", "all x.((BloodType(x) & ImportantToKnow(x)) -> PriorToSurgery(x))", "all x y.((BloodType(x) & Surgery(y)) -> ImportantToKnow(x,y))", "all x.((BloodType(x) & PriorToSurgery(x)) -> ImportantToKnow(x))", "all x.(BloodType(x) -> ImportantToKnow(x))", "(ImportantToKnow(bloodtype) & PriorToSurgery(bloodtype,surgeon))", "all x y z.((BloodType(x) & Surgery(y) & Surgery(z)) -> ImportantToKnow(x,y,z))", "all x y.((BloodType(x) & Surgery(y)) -> ImportantToKnow(x,y))", "exists x.(BlueType(x) & ImportantToKnow(x))", "exists x.(BloodType(x) & ImportantForSurgery(x))", "all x.(BloodType(x) -> ImportantToKnow(x))", "all x y.((BloodType(x) & Surgery(y) & ImportantToKnow(x,y)) -> ImportantToKnow(x,y))", "all x y.((BloodType(x) & Surgery(y)) -> ImportantToKnow(x,y))", "exists x.(BloodType(x) & ImportantToKnowBeforeSurgery(x))", "all x y.((BloodType(x) & Surgery(y)) -> ImportantToKnow(x,y))", "exists x.(BloodType(x) & ImportantForSurgery(x))"]}
{"id": "eqasc_validation_477", "nl": "Transplants are medical miracles.", "fol": "", "prediction": ["all x.(Transplant(x) -> MedicalMajority(x))", "all x.(Transplant(x) -> MedicalMajority(x))", "all x y.((Transplant(x) & MedicalMajority(y)) -> Transplant(x))", "all x.(Transplant(x) -> MedicalMajority(x))", "(MedicalMajority(transplant) & MedicalMajority(transplant))", "all x y.((Transplant(x) & MedicalMajority(y)) -> Transplant(x))", "all x y.((Transplant(x) & MedicalMajority(y)) -> MedicalMajor(x,y))", "all x.(Transplant(x) -> MedicalMajority(x))", "all x.(Transplant(x) -> MedicalMajority(x))", "all x y.((Transplant(x) & MedicalMagnificent(y)) -> Transplant(x))", "all x.(Transplant(x) -> MedicalMagnificent(x))", "all x.(Transplant(x) -> MedicalMajority(x))", "all x.(Transplant(x) -> MedicalMajority(x))", "all x.(Transplant(x) -> MedicalMagnificent(x))", "all x.(Transplant(x) -> MedicalMajority(x))", "All x.(Transplant(x) -> MedicalMagnificent(x))"]}
{"id": "eqasc_validation_478", "nl": "Blood type is important for Transplants ", "fol": "", "prediction": ["all x.(Transplant(x) -> ImportantBloodType(x))", "(BloodTypeImportantForTransplants(BloodTypeImportantForTransplants(BloodTypeImportantForTransplants(BloodTypeImportantForTransplants(BloodTypeImportantForTransplants(BloodTypeImportantForTransplants(BloodTypeImportantForTransplants(BloodTypeImportantForTransplants(BloodTypeImportantForTransplants(BloodTypeImportantForTransplants(BloodTypeImportantForTransplants(BloodTypeImportantForTransplants(BloodType(BloodType(BloodType(BloodType(BloodType(BloodType(BloodType(BloodType(BloodType(BloodType(BloodType(BloodType(BloodType(BloodType(BloodType(BloodType(BloodType(BloodType(BloodType(BloodType)))))", "all x y.((Transplant(x) & Transplant(y)) -> ImportantBloodType(x,y))", "all x.((BloodType(x) & Transplants(x)) -> ImportantFor(x,Transplants))", "(ImportantForTransplants(bloodtype,Transplants))", "all x.(Transplant(x) -> ImportantBloodType(x))", "All x.((BloodType(x) & Transplant(x)) -> ImportantFor(x,Transplants))", "all x y.((Transplant(x) & Transplant(y)) -> Important(x,y))", "all x y z.((Transplant(x) & BloodType(y) & Transplant(z)) -> ImportantFor(y,z))", "(BloodTypeImportantForTransplants(x))", "all x y.((BloodType(x) & Transplant(y)) -> ImportantFor(x,y))", "All x.(BloodType(x) -> ImportantForTransplants(x))", "all x y.((Transplant(x) & Transplant(y)) -> ImportantBloodType(x,y))", "All x.((BloodType(x) & Transplantation(x)) -> Important(x))", "All x.(Transplant(x) -> ImportantBloodType(x))", "All x.(Transplantation(x) -> ImportantBloodType(x))"]}
{"id": "eqasc_validation_479", "nl": "For medical advice, consult a doctor .", "fol": "", "prediction": ["all x y.((Doctor(x) & Doctor(y)) -> Consults(x,y))", "all x.((Doctor(x) & Consults(x,y)) -> MedicalAdvice(x))", "all x y.((Doctor(x) & Doctor(y)) -> ConsultsForMedicalAdvice(x,y))", "all x.(MedicalAdvice(x) -> ConsultDoctor(x))", "all x y z.((Doctor(x) & MedicalAdvice(y) & Doctor(z)) -> Consults(x,y,z))", "all x.((Doctor(x) & MedicalAdvice(x)) -> Consult(x))", "(ConsultsDoctor(x) & ForMedicalAdvice(x))", "all x y.((Doctor(x) & Doctor(y)) -> MedicalAdvice(x,y))", "all x.((MedicalAdvice(x) & ConsultDoctor(x)) -> Consult(x))", "all x y.((Doctor(x) & MedicalAdvice(y)) -> Consult(x,y))", "(all x.(MedicalAdvice(x) -> ConsultDoctor(x)))", "all x.(MedicalAdvice(x) -> ConsultDoctor(x))", "(ConsultsDoctor(x) & ForMedicalAdvice(x))", "(all x.(MedicalAdvice(x) -> ConsultDoctor(x)))", "all x.(MedicalAdvice(x) -> ConsultDoctor(x))", "all x y.((Doctor(x) & Doctor(y)) -> MedicalAdvice(x,y))"]}
{"id": "eqasc_validation_480", "nl": "Blood type is something that is important for a doctor to know.", "fol": "", "prediction": ["all x.((BloodType(x) & ImportantForDoctor(x)) -> ImportantForDoctor(x))", "all x y.((Doctor(x) & Doctor(y)) -> ImportantToKnow(x,y))", "all x.(BloodType(x) -> ImportantForDoctor(x))", "all x.((BloodType(x) & ImportantForDoctor(x)) -> ImportantForDoctor(x))", "all x y.((Doctor(x) & Doctor(y)) -> ImportantBloodType(x,y))", "all x y z.((BloodType(x) & Doctor(y) & Doctor(z)) -> ImportantFor(x,y,z))", "all x y.((Drug(x) & BloodType(y)) -> ImportantForDoctor(x,y))", "all x y.((Doctor(x) & Doctor(y)) -> ImportantToKnow(x,y))", "all x.(BloodType(x) -> ImportantForDoctor(x))", "all x.((BloodType(x) & ImportantForDoctor(x)) -> ImportantForDoctor(x))", "all x y.((Doctor(x) & Doctor(y) & BloodType(x,y)) -> ImportantFor(x,y))", "exists x.(BloodType(x) & ImportantForDoctorToKnow(x))", "all x y.((Dr.(BloodType(x) & Doctor(y)) -> ImportantFor(x,y))", "all x.((BloodType(x) & ImportantForDoctor(x)) -> ImportantForDoctor(x))", "exists x.(BloodType(x) & ImportantForDoctor(x))", "exists x.(BloodType(x) & ImportantForDoctorToKnow(x))"]}
{"id": "eqasc_validation_481", "nl": "Scientists still know relatively little about Archaea.", "fol": "", "prediction": ["all x.(Scientist(x) -> (KnowsLittleAboutArchaea(x) & -KnowsLittleAboutArchaea(x)))", "all x y.((Scientist(x) & Archaea(y)) -> KnowsLittleAbout(x,y))", "all x.(Scientist(x) -> -KnowsAboutArchaea(x))", "(all x.(Scientist(x) -> Archaea(x)))", "(exists x.(Scientist(x) & Archaea(x) & KnowsLittleAbout(x,Archaea)))", "(KnowsLittleAboutArchaea(Scientists))", "all x y z.((Scientist(x) & Archaea(y) & Scientist(z)) -> (KnowsLittleAbout(x,y,z) & -KnowsLittleAbout(z,y)))", "all x y.((Scientist(x) & Archaea(y)) -> -Knows(x,y))", "all x.(Scientist(x) -> KnowsLittleAboutArchaea(x))", "all x.(Scientist(x) -> (KnowsRelativelyLittleAboutArchaea(x)))", "all x y.((Scientist(x) & Archaea(y)) -> KnowsLittleAbout(x,y))", "all x.(Scientist(x) -> KnowsRelativelyLittleAboutArchaea(x))", "exists x.(Scientist(x) & Archaea(x) & KnowsLittleAbout(x,Archaea))", "all x y.((Scientist(x) & Archaea(y)) -> -KnowsLittleAbout(x,y))", "exists x.(Scientist(x) & Archaea(y) & KnowsLittleAbout(x,y))", "exists x.(Scientist(x) & KnowsLittleAboutArchaea(x))"]}
{"id": "eqasc_validation_482", "nl": "Scientist do research every year.", "fol": "", "prediction": ["all x.(Scientist(x) -> DosResearchEveryYear(x))", "all x y.((Scientist(x) & Year(y)) -> DoesResearch(x,y))", "all x.(Scientist(x) -> DoseResearchEveryYear(x))", "all x y.((Scientist(x) & Year(y)) -> DoesResearch(x,y))", "(DoesResearchEveryYear(Scientist,y) & Year(y))", "all x.(Scientist(x) -> DoesResearchEveryYear(x))", "(DoesResearchEveryYear(Scientist) -> DoesResearch(Scientist,Year))", "All x y z.((Scientist(x) & Research(y) & Year(z)) -> Dose(x,y,z))", "all x y.((Scientist(x) & Year(y)) -> DosResearch(x,y))", "all x.(Scientist(x) -> DoResearchEveryYear(x))", "all.(Scientist(s) -> DoseResearchEveryYear(s))", "all x y.((Scientist(x) & Research(y)) -> DoseEveryYear(x,y))", "all x.(Scientist(x) -> DosResearchEveryYear(x))", "exists x.(Scientist(x) & Research(y) & EveryYear(x,y))", "all x.(Scientist(x) -> DoesResearchEveryYear(x))", "all x.(Scientist(x) -> DoesResearchEveryYear(x))"]}
{"id": "eqasc_validation_483", "nl": "People that do research still know relatively little about Archaea.", "fol": "", "prediction": ["all x.(DoesResearch(x) -> KnowsRelativelyLittleAboutArchaea(x))", "all x.((DoesResearch(x) & KnowsLittleAboutArchaea(x)) -> -(DoesResearch(x) & KnowsLittleAboutArchaea(x)))", "all x.((DoesResearch(x) & KnowsRelativelyLittleAboutArchaea(x)) -> -(DoesResearch(x) & KnowsRelativelyLittleAboutArchaea(x)))", "all x.(DoResearch(x) -> KnowsLittleAboutArchaea(x))", "all x.((Person(x) & DosResearch(x)) -> KnowsRelativelyLittleAboutArchaea(x))", "(DoesResearch(people) & KnowsLittleAboutArchaea(people))", "all x y.((Person(x) & DosResearch(x)) -> KnowsLittleAboutArchaea(x,y))", "all x.((DoResearch(x) & KnowsLittleAboutArchaea(x)) -> -(DoesResearch(x) & KnowsLittleAboutArchaea(x)))", "all x y.((DoesResearch(x) & Person(y)) -> KnowsRelativelyLittleAboutArchaea(y))", "all x.(DoesResearch(x) -> KnowsLittleAboutArchaea(x))", "(DoResearch) & KnowsLittleAboutArchaea(Person,Archaea))", "all x y.((Person(x) & DosResearch(x) & Archaea(y)) -> KnowsLittleAbout(x,y))", "exists x.(Researcher(x) & DoesResearch(x) & KnowsLittleAboutArchaea(x))", "all x y.((DoesResearch(x) & Person(y)) -> -KnowsAboutArchaea(y))", "all x.(DoResearch(x) -> KnowsLittleAboutArchaea(x))", "exists x.(DoResearch(x) & KnowsLittleAboutArchaea(x))"]}
{"id": "eqasc_validation_484", "nl": "Skin color is a polygenic trait.", "fol": "", "prediction": ["all x.(SkinColor(x) -> PolygenicTrait(x))", "all x.(SkinColor(x) -> PolygenicTrait(x))", "all x y.((SkinColor(x) & PolygenicTrait(y)) -> Color(x,y))", "(PolygenicTrait(skincolor) & PolygenicTrait(skincolor,skin))", "(PolygenicTrait(skincolor) -> Color(skin))", "all x.(SkinColor(x) -> PolygenicTrait(x))", "all x y.((SkinColor(x) & PolygenicTrait(y)) -> Color(x,y))", "all x.((SkinColor(x) & PolygenicTrait(x)) -> Color(x))", "all x.(SkinColor(x) -> PolygenicTrait(x))", "all x.(SkinColor(x) -> PolygenicTrait(x))", "all x.(SkinColor(x) -> PolygenicTrait(x))", "all x.(SkinColour(x) -> PolygenicTrait(x))", "all x.(SkinColor(x) -> PolygenicTrait(x))", "all x.(SkinColor(x) -> PolygenicTrait(x))", "exists x.(SkinColor(x) & PolygenicTreat(x))", "All x.(SkinColor(x) -> PolygenicTrait(x))"]}
{"id": "eqasc_validation_485", "nl": "Some traits are inherited.", "fol": "", "prediction": ["exists x.(Treatment(x) & Erased(x))", "exists x.(Tait(x) & Erased(x))", "exists x.(Trait(x) & Erased(x))", "exists x.(Treatment(x) & Erased(x))", "exists x.(Treatment(x) & Heard(x))", "exists x.(Trait(x) & Heard(x))", "exists x y.(Tain(x) & Trait(y) & Heard(x,y))", "exists x y.(Treatment(x) & Trait(y) & Heard(x,y))", "exists x.(Trait(x) & Erased(x))", "exists x.(Tail(x) & Heard(x))", "exists x.(Trait(x) & Heard(x))", "exists x.(Tain(x) & Heard(x))", "exists x.(Treatment(x) & Erased(x))", "exists x.(Trait(x) & Erased(x))", "exists x.(Traits(x) & Heard(x))", "exists x.(Trait(x) & Erased(x))"]}
{"id": "eqasc_validation_486", "nl": "skin color is inherited", "fol": "", "prediction": ["all x.(SkinColor(x) -> Erased(x))", "all x y.((SkinColor(x) & SkinColor(y)) -> Erased(x,y))", "all x.((SkinColor(x) & Erased(x)) -> SkinColor(x))", "(AllegedSkinColor(skincolor) -> HasSkinColor(skin))", "all x.(SkinColor(x) -> Erased(x))", "all x y.((SkinColor(x) & SkinColor(y)) -> (Erased(x,y) & HasSkinColor(x,y)))", "(EarnedSkinColor(skincolor) -> SkinColorIsHeritable(skincolor))", "(EarnedSkinColor(skin) & HasSkinColor(skin))", "(AllegedSkinColor(skincolor) -> SkinColor(skin))", "all x.((SkinColor(x) & Erased(x)) -> SkinColor(x))", "all x.(SkinColor(x) -> Erased(x))", "all x.(SkinColor(x) -> Iinherited(x))", "all x y.((SkinColor(x) & Geneared(y)) -> SkinColorIsEarned(x,y))", "all x y.((SkinColor(x) & SkinColor(y)) -> Erased(x,y))", "ALL X.((SkinColor(x) & Erased(x)) -> SkinColorIsEarned(x))", "all x.(SkinColor(x) -> Erased(x))"]}
{"id": "eqasc_validation_487", "nl": "Polygenic traits are the result of the interaction of several genes.", "fol": "", "prediction": ["all x.(PolygenicTreatment(x) -> InteractionOfGenes(x))", "all x y.((PolygenicTreatment(x) & Gene(y)) -> Interaction(x,y))", "all x.(PolygenicTrait(x) -> InteractionOfGenes(x))", "(InteractionOfGenes(polygenicTreatment) & ResultOfInteraction(polygenicTreatment,genes))", "all x.(PolygenicTreatment(x) -> InteractionOfGenes(x))", "all x y z.((PolygenicTreatment(x) & Gene(y) & Gene(z)) -> Interaction(x,y,z))", "all x y.((PolygenicTrait(x) & Gene(y)) -> Interaction(x,y))", "all x y.((PolygenicTreatment(x) & Gene(y)) -> Interaction(x,y))", "all x.(PolygenicTreatment(x) -> InteractionOfGenes(x))", "all x.(PolygenicTarget(x) -> InteractionOfGenes(x))", "all x y z.((PolygenicTreatment(x) & Gene(y) & Gene(z)) -> Interaction(x,y,z))", "all x.(PolygenicTraits(x) -> InteractionOfGenes(x))", "all x y.((PolygenicTreatment(x) & Gene(y)) -> InteractionResult(x,y))", "all x.(PolygenicTrait(x) -> InteractionOfGenes(x))", "exists x.(PolygenicTreatment(x) & Interaction(x,genes,genes))", "all x.(PolygenicTrait(x) -> InteractionOfGenes(x))"]}
{"id": "eqasc_validation_488", "nl": "skin color is the result of the interaction of several genes", "fol": "", "prediction": ["all x.(SkinColor(x) -> InteractionOfGenes(x))", "all x y.((SkinColor(x) & Gene(y)) -> Interaction(x,y))", "all x y z.((SkinColor(x) & Gene(y) & Gene(z)) -> Interaction(x,y,z))", "(InteractionOfGenes(skincolor) & Genes(skincolor))", "all x.(SkinColor(x) -> InteractionOfGenes(x))", "all x y.((SkinColor(x) & Gene(y)) -> Interaction(x,y))", "(InteractionOfGenes(skincolor) & Genes(genes) & Genes(genes) & Genes(genes) & Genes(genes))", "all x y z.((SkinColor(x) & Gene(y) & Gene(z) & Interacts(x,y,z)) -> SkinColor(x))", "all x y.((SkinColor(x) & Gene(y) & Interaction(x,y)) -> SkinColor(x))", "all x.((SkinColor(x) & InteractionOfGenes(x,y)) -> SkinColor(x))", "(InteractionOfGenes(skincolor,s) & exists x.(Gene(x) & Gene(x))))", "all x.(SkinColor(x) -> InteractionOfGenes(x))", "all x.(SkinColor(x) -> InteractionOfGenes(x))", "all x y.((SkinColor(x) & Gene(y) & Interaction(x,y)) -> SkinColor(x))", "exists x.(SkinColor(x) & Interaction(x,genes,genes))", "all x.(SkinColor(x) -> InteractionOfGenes(x))"]}
{"id": "eqasc_validation_489", "nl": "Skin color is controlled by two or more genes.", "fol": "", "prediction": ["all x.(SkinColor(x) -> (ControlledByGenes(x) & ControlledByGenes(x)))", "all x y.((SkinColor(x) & Gene(y)) -> Controls(x,y))", "all x.(SkinColor(x) -> exists y.(Gene(y) & Controls(x,y)))", "(ControlsSkinColorByGenes(skin) & exists x.(Gene(s) & ControlsSkinColor(skin,s))))", "all x y z.((SkinColor(x) & Gene(y) & Gene(z)) -> Controls(x,y,z))", "all x.(SkinColor(x) -> (ControlledByGenes(x) & ControlledByGenes(x)))", "all x y.((SkinColor(x) & Gene(y)) -> ControlledBy(x,y))", "(ControlledByGenes(skincolor) & exists x.(Gene(s) & Controls(skincolor(s)))", "exists x.(Gene(x) & SkinColor(x))", "all x.(SkinColor(x) -> exists y.(Gene(y) & Controls(x,y)))", "all x.(SkinColor(x) -> (ControlsGenes(x,2) | ControlsGenes(x,3)))", "all x y.((SkinColor(x) & Gene(y)) -> Controls(x,y))", "exists x.(Gene(x) & SkinColor(x) & Controls(x,2))", "all x y.((SkinColor(x) & Gene(y)) -> ControlledBy(x,y))", "exists x.(Gene(x) & ControlsSkinColor(x))", "all x y.((SkinColor(x) & Gene(y)) -> Controls(x,y))"]}
{"id": "eqasc_validation_490", "nl": "Polygenic inheritance occurs when one trait is governed by two or more sets of alleles.", "fol": "", "prediction": ["all x.((Trait(x) & GovernedByTwoOrMoreSetsOfAlleles(x)) -> PolygenicInheritance(x))", "all x y.((Trait(x) & Allele(y) & GovernedBy(x,y)) -> PolygenicInheritance(x))", "all x.((Trait(x) & RegimedByTwoOrMoreSetsOfAlleles(x)) -> PolygenicInheritance(x))", "all x.(PolygenicInheritance(x) -> (GovernedByTrait(x,2) | GovernedByTrait(x,3)))", "all x.(PolygenicInheritance(x) -> (exists y.(Trait(y) & GovernedBy(x,y)) & exists z.(Set(z) & Allele(z) & GovernedBy(x,z)))))", "all x.((Trait(x) & RegimedByTwoOrMoreSetsOfAlleles(x)) -> PolygenicInheritance(x))", "all x y z.((Trait(x) & Allele(y) & Allele(z) & Regime(x,y,z)) -> PolygenicInheritance(x))", "all x y.((Trait(x) & Allele(y)) -> GovernedBy(x,y))", "all x y.((Trait(x) & Allele(y) & Regime(x,y)) -> PolygenicInheritance(x))", "all x.((Trait(x) & RegulatedByTwoOrMoreSetsOfAlleles(x)) -> PolygenicInheritance(x))", "all x.(PolygenicInheritance(x) -> (GovernedByTrait(x,2) | GovernedByTrait(x,3)))", "all x y z.((Trait(x) & Allele(y) & Allele(z) & Governs(x,y,z)) -> PolygenicInheritance(x))", "exists x.(PolygenicInheritance(x) -> (TraitGovernedByTwoOrMoreSetsOfAlleles(x)))", "all x y.((Trait(x) & Allele(y)) -> (GovernedBy(x,y) & SetOfAlleles(x,y)))", "exists x.(Trait(x) & RegimedByTwoOrMoreSetsOfAlleles(x))", "all x y.((Trait(x) & Allele(y) & Regime(x,y)) -> PolygenicInheritance(x))"]}
{"id": "eqasc_validation_491", "nl": "Skin color is governed by two or more sets of alleles", "fol": "", "prediction": ["all x y.((SkinColor(x) & Allele(y)) -> (GovernedBy(x,y) & (SetOf(x,y) | SetOf(x,y))))", "all x.(SkinColor(x) -> exists y.(SetOfAlleles(y) & Regime(x,y)))", "all x.(SkinColor(x) -> (GovernedByAlleles(x,2) | GovernedByAlleles(x,3)))", "all x y z.((SkinColor(x) & Allele(y) & Allele(z)) -> (GovernedBy(x,y,z) & (SetOf(x,y) | SetOf(x,y))))", "exists x,y,z,x,z,x,y,z,x,z,x,y,z,x,z,x,z,x,y,x,y,z,x,y,z,x,y,z,x,y,z,x,y,z,x,y,z,x,y,z,x,y,x,z,x,y,z,x,y,z,x,y,z,x,y,z,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,y,x,y,x,y,x,y,x,y,x,y,x,y,x,y,x,y,x,y,x,y,x,y,x,y,x,y,x,y,x,y,x,y,x,y,x,y,x,y,x,y,x,y,x,y,x,y,x,y,x,y", "all x y.((SkinColor(x) & Allele(y)) -> (GovernedBy(x,y) & exists z.(Allele(z) & Allele(z) & Allele(z)))))", "all x y z.((SkinColor(x) & Allele(y) & Allele(z)) -> (GovernedBy(x,y,z) & exists w.(Allele(w) & Allele(w) & Allele(w) & Allele(w) & Allele(w) & Allele(w))))", "all x.((SkinColor(x) & Allele(x,2) | Allele(x,3))) -> Regulates(x,SkinColor))", "(exists x,y) & Alleles(x,z) & Alleles(z) & Alleles(z) & Alleles(z) & Alleles(z) & Alleles(z) & Alleles(z) & Alleles(z))", "all x.(SkinColor(x) -> (GovernedByAlleles(x,2) | GovernedByAlleles(x,3)))", "all x y.((SkinColor(x) & Allele(y)) -> (GovernedBy(x,y) & (exists z.(Allele(z) & Allele(z)) & Allele(z)) & Allele(z)) & Allele(z) & Allele(z))))", "all x.(SkinColor(x) -> exists y.(Allele(y) & Set(x,y)))", "all x.((SkinColor(x) & Allele(x)) -> (GovernedBy(x,2) | GovernedBy(x,3)))", "all x y.((SkinColor(x) & Allele(y)) -> (RegionedBy(x,y) & (SetOf(x,y) | SetOf(x,y))))", "all x.(SkinColor(x) -> (GovernedByAlleles(x,2) | RegulatedByAlleles(x,3)))", "all x.(SkinColor(x) -> exists y.(SetOfAlleles(y) & Regime(x,y)))"]}
{"id": "eqasc_validation_492", "nl": "Skin color is inherited from a number of genes.", "fol": "", "prediction": ["all x.(SkinColor(x) -> ErasedFromGenes(x))", "all x y.((SkinColor(x) & Gene(y)) -> ErasedFrom(x,y))", "all x y z.((SkinColor(x) & Gene(y) & Gene(z)) -> ErasedFrom(x,y,z))", "all x.(SkinColor(x) -> ErasedFromGenes(x))", "all x y.((SkinColor(x) & Gene(y)) -> ErasedFrom(x,y))", "(inheritedFromGenes(skincolor) & inheritedFromGenes(skincolor))", "all x.(SkinColor(x) -> (EarnedFromGenes(x) & Genes(x)))", "all x y z.((SkinColor(x) & Gene(y) & Gene(z)) -> ErasedFrom(x,y,z))", "all x.(SkinColor(x) -> ErasedFromGenes(x))", "all x y.((SkinColor(x) & Gene(y)) -> ErasedFrom(x,y))", "exists x.(SkinColor(x) & Gene(x) & ErasedFrom(x,y))", "exists x.(SkinColor(x) & Gene(x) & ErasedFrom(x,y))", "all x y.((SkinColor(x) & Gene(y)) -> ErasedFrom(x,y))", "all x y.((SkinColor(x) & Gene(y)) -> HearnedFrom(x,y))", "exists x.(SkinColor(x) & Gene(y) & Gene(z) & ErasedFrom(x,y,z))", "exists x.(SkinColor(x) & ErasedFromGenes(x))"]}
{"id": "eqasc_validation_493", "nl": "Melanin is responsible for skin color.", "fol": "", "prediction": ["all x.(Melanin(x) -> ResponsibleForSkinColor(x))", "(ResponsibleForSkinColor(melanin))", "all x.(Melanin(x) -> ResponsibleForSkinColor(x))", "all x y.((Melanin(x) & SkinColor(y)) -> ResponsibleFor(x,y))", "all x.(Melanin(x) -> SkinColor(x))", "(ResponsibleForSkinColor(melanin))", "all x y.((Melanin(x) & Skin(y)) -> ResponsibleFor(x,y))", "all x y.((Melanin(x) & SkinColor(y)) -> ResponsibleFor(x,y))", "All x.((Melanin(x) & SkinColor(x)) -> ResponsibleFor(x,y))", "all x.(Melanin(x) -> ResponsibleForSkinColor(x))", "all x.(Melanin(x) -> SkinColor(x))", "all x.(Melanin(x) -> ResponsibleForSkinColor(x))", "all x y.((Melanin(x) & SkinColor(y)) -> ResponsibleFor(x,y))", "all x.(Melanin(x) -> SkinColor(x))", "exists x.(Melanin(x) & SkinColor(x))", "exists x.(Melanin(x) & SkinColor(x))"]}
{"id": "eqasc_validation_494", "nl": "Skin color varies from grey to brown.", "fol": "", "prediction": ["all x.(SkinColor(x) -> (Grey(x) | Brown(x)))", "(all x.(SkinColor(x) -> Grey(x)) & all y.(SkinColor(y) -> Brown(y)))", "all x.(SkinColor(x) -> (Grey(x) | Brown(x)))", "all x y.((SkinColor(x) & Grey(y)) -> Brown(y))", "(GreySkinColor(skin) | BrownSkinColor(skin))", "all x.(SkinColor(x) -> (Grey(x) | Brown(x)))", "all x y z.(SkinColor(x) -> (Grey(y) | Brown(y)))", "all x y.((SkinColor(x) & Grey(y)) -> Brown(y))", "(GreySkinColor(skin) | BrownSkinColor(skin))", "all x y.((SkinColor(x) & Grey(y) & Brown(y)) -> Variates(x,y))", "all x.(SkinColor(x) -> (Grey(x) | Brown(x)))", "exists x.(SkinColor(x,y) & Grey(y) & Brown(y))", "all x.(SkinColor(x) -> (GreyToBrown(x)))", "exists x.(SkinColor(x,y) & Grey(y) & Brown(z) & Vary(x,z))", "all x y.((SkinColor(x) & Grey(y)) -> Brown(y))", "exists x.(SkinColor(x,y) & Grey(y) & Brown(y))"]}
{"id": "eqasc_validation_495", "nl": "No matter if you are white or brown, this comes from a polygenic trait.", "fol": "", "prediction": ["all x.((White(x) | Brown(x)) -> PolygenicTrait(x))", "all x.((White(x) | Brown(x)) -> PolygenicTrait(x))", "((White(x) | Brown(x))) -> PolygenicTrait(x))", "all x.(White(x) | Brown(x)) -> PolygenicTrait(x))", "all x y.((White(x) | Brown(x)) -> PolygenicTrait(y))", "all x.((White(x) | Brown(x)) -> PolygenicTrait(x))", "(exists x.(White(x) | Brown(x)) & PolygenicTrait(x))", "all x.(WhiteOrBrown(x) -> PolygenicTrait(x))", "all x.(White(x) | Brown(x)) -> PolygenicTrait(x))", "all x y.((White(x) | Brown(x)) -> PolygenicTrait(y))", "all x.((White(x) | Brown(x)) -> PolygenicTrait(x))", "exists x.(PolygenicTrait(x) & (White(x) | Brown(x)))", "(all x.(White(x) | Brown(x))) -> PolygenicTrait(x))", "all x.((White(x) | Brown(x)) -> PolygenicTrait(x))", "all x.(WhiteOrBrown(x) -> PolygenicTrait(x))", "all x.((White(x) | Brown(x)) -> PolygenicTrait(x))"]}
{"id": "eqasc_validation_496", "nl": "Chapter 5 discusses polygenic inheritance and intelligence.", "fol": "", "prediction": ["all x.(Chapter5(x) -> (PolygenicInheritance(x) & Intelligence(x)))", "(DiscussesPolygenicInheritance(Chapter5) & DiscussesIntelligence(Chapter5))", "(PolygenicInheritance(Chapter5) & Intelligence(Chapter5))", "all x y.((Chapter5(x) & PolygenicInheritance(y) & Intelligence(y)) -> Discuts(x,y))", "all x.(Chapter5(x) -> (PolygenicInheritance(x) & Intelligence(x)))", "(DiscussesPolygenicInheritance(Chapter5) & DiscussesIntelligence(Chapter5))", "all x y.((Chapter5(x) & PolygenicInheritance(y) & Intelligence(x,y)) -> Discuts(x,y))", "all x.(Chapter5) -> (PolygenicInheritance(x) & Intelligence(x)))", "(PolygenicInheritance(Chapter5) & Intelligence(Chapter5))", "all x.(Chapter5(x) -> (PolygenicInheritance(x) & Intelligence(x)))", "all x.(Chapter5(x) -> (DiscussesPolygenicInheritance(x) & DiscussesIntelligence(x)))", "(DiscussesPolygenicInheritance(Chapter5) & DiscutsIntelligence(Chapter5))", "all x y.((Chapter5(x) & PolygenicInheritance(y) & Intelligence(y)) -> Discusses(x,y))", "all x.(Chapter5(x) -> (PolygenicInheritance(x) & Intelligence(x)))", "(DiscussesPolygenicInheritance(Chapter5) & DiscussesIntelligence(Chapter5))", "(DiscussesPolygenicInheritance(Chapter5) & DiscoursesIntelligence(Chapter5))"]}
{"id": "eqasc_validation_497", "nl": "intelligence is an inherited trait", "fol": "", "prediction": ["all x.(Intelligence(x) -> (HasTrait(x) & HasTrait(x)))", "all x.(Intelligence(x) -> (EarnedTrait(x) & HasTrait(x)))", "(EarnedTrait(intelligence) & HasTrait(intelligence))", "(AllegedTrait(intelligence) -> HasTrait(intelligence))", "all x y.((Intelligence(x) & Trait(y)) -> ErasedTrait(x,y))", "all x.(Intelligence(x) -> (ErasedTrait(x) & HasTrait(x)))", "all x y.((Intelligence(x) & Trait(y)) -> (ErasedTrait(x,y) & HasTrait(x,y)))", "(EarnedTrait(intelligence) & HasTrait(intelligence,inheritedTrait,intelligence))", "all x.((Intelligence(x) & ErasedTrait(x)) -> HasTreatment(x))", "all x.(Intelligence(x) -> ErasedTrait(x))", "all x y.((Intelligence(x) & GenealogicalTrait(y)) -> HasTreatment(x,y))", "all x.(Intelligence(x) -> (HasTrait(x) & HasTrait(x)))", "all x.(IllustratedTrait(x) -> (EarnedTrait(x) & HasTrait(x)))", "intelligence is aninheritedTrait(intelligence)", "all x.(Intelligence(x) -> (EarnedTrait(x) & HasTrait(x)))", "all x.(Intelligence(x) -> HealedTrait(x))"]}
{"id": "eqasc_validation_498", "nl": "The amount of melanin pigment in skin is a polygenic trait", "fol": "", "prediction": ["all x.((MelaninPigmentInSkin(x) & PolygenicTrait(x)) -> PolygenicTrait(x))", "all x y.((MelaninPigment(x) & Skin(y)) -> PolygenicTrait(x,y))", "(PositiveTreatment(MelaninPigment) & InSkin(MelaninPigment) & PolygenicTreatment(MelaninPigment))", "all x.((MelaninPigment(x) & Skin(x)) -> PolygenicTrait(x))", "all x.(MelaninPigmentInSkin(x) -> PolygenicTrait(x))", "all x y z.((MelaninPigment(x) & Skin(y) & PolygenicTrait(z)) -> (AmountInSkin(x,y) & PolygenicTrait(z)))", "all x.((AmountOfMelaninPigmentInSkin(x) & PolygenicTrait(x)) -> PolygenicTrait(x))", "all x y.((MelaninPigmentInSkin(x) & PolygenicTrait(y)) -> PolygenicTrait(y))", "(PositiveTrait(MelaninPigment) & PolygenicTrait(MelaninPigment))", "all x.((MelaninPigmentInSkin(x) & PolygenicTrait(x)) -> PolygenicTrait(x))", "all x y z.((MelaninPigment(x) & Skin(y) & PolygenicTrait(z)) -> (AmountInMelaninPigment(x,y) & PolygenicTrait(z)))", "all x.(MelaninPigment(x) -> PolygenicTrait(x))", "all x y.((MelaninPigment(x) & Skin(y)) -> PolygenicTrait(x))", "all x y.((MelaninPigmentInSkin(x) & PolygenicTrait(y)) -> IncreasedInSkin(x,y))", "all x.((MelaninPigmentInSkin(x) & PolygenicTrait(x)) -> PorousTrait(x))", "all x.(MelaninPigmentInSkin(x) -> PolygenicTrait(x))"]}
{"id": "eqasc_validation_499", "nl": "Pregnancy is the carrying of one or more offspring from fertilization until birth.", "fol": "", "prediction": ["all x.(Pregnancy(x) -> (CarriesOffspring(x) & FromFertilizationToBirth(x)))", "all x y.((Pregnancy(x) & Offspring(y)) -> CarryingFromFertilizationToBirth(x,y))", "all x.(Pregnancy(x) -> (CarriesOffspringFromFertilization(x) & Birth(x)))", "all x y z.((Pregnancy(x) & Offspring(y) & Fertilization(z) & Carrying(x,y,z)) -> FromFertilizationToBirth(x))", "(CarriesOffspring(pregnancy) & FertilizationUntilBirth(pregnancy))", "(CarriesOffspringFromFertilizationToBirth(pregnancy))", "all x.(Pregnancy(x) -> (CarriesOffspring(x,fetration) & UntilBirth(x)))", "all x y.((Pregnancy(x) & Offspring(y)) -> CarryingFromFertilizationToBirth(x,y))", "all x y z.((Pregnancy(x) & Offspring(y) & Fertilization(z) & CarryingFromToBirth(x,y,z)) -> CarryingFromFertilizationToBirth(x))", "all x.(Pregnancy(x) -> CarryingOffspringFromFertilizationToBirth(x))", "all x.(Pregnancy(x) -> (CarriesOffspringFromFertilization(x) & Birth(x)))", "all x y.((Pregnancy(x) & Offspring(y)) -> CarryingFromFertilizationToBirth(x,y))", "all x.(Pregnancy(x) -> CarryingOfOffspringFromFertilizationToBirth(x))", "all x.(Pregnancy(x) -> (CarriesOffspringFromFertilization(x) & Birth(x)))", "all x y.((Pregnancy(x) & Offspring(y)) -> CarriesFromFertilizationToBirth(x,y))", "all x.(Pregnancy(x) -> CarryingOfOffspring(x,fertilization,birth))"]}
{"id": "eqasc_validation_500", "nl": "Pregnancy begins with a fertilized egg.", "fol": "", "prediction": ["all x.(Pregnancy(x) -> FertileEgg(x))", "all x y.((Pregnancy(x) & FertileEgg(y)) -> StartsWith(x,y))", "all x.(Pregnancy(x) -> FertilizedEgg(x))", "(PregnancyStartsWithFertilizedEgg(pregnancy) -> Fertile(pregnancy))", "all x.(Pregnancy(x) -> (FertileEgg(x) & StartsWith(x,FertileEgg)))", "all x y z.((Pregnancy(x) & Egg(y) & Fertile(z)) -> StartsWith(x,y,z))", "all x y.((Pregnancy(x) & FertileEgg(y)) -> StartsWith(x,y))", "all x.(Pregnancy(x) -> FertileEgg(x))", "all x.((Pregnancy(x) & FertileEgg(x)) -> StartsWith(x,y))", "all x y.((Pregnancy(x) & FertilizedEgg(y)) -> StartsWith(x,y))", "all x y.((Pregnancy(x) & FertileEgg(y)) -> BeginsWith(x,y))", "all x.(Pregnancy(x) -> FertilizedEgg(x))", "all x y.((Pregnancy(x) & Egg(y) & Fertile(y)) -> StartsWith(x,y))", "all x.(Pregnancy(x) -> FertileEgg(x))", "all x.((Pregnancy(x) & FertileEgg(x)) -> StartsWith(x,y))", "all x.(Pregnancy(x) -> FertilizedEgg(x))"]}
{"id": "eqasc_validation_501", "nl": "A fertilized egg can create an offspring if it's carried until birth", "fol": "", "prediction": ["all x.((FertilizedEgg(x) & CarriedUntilBirth(x)) -> CanCreateOffspring(x))", "all x y.((FertilizedEgg(x) & CarriedUntilBirth(x)) -> CanCreateOffspring(x,y))", "all x y z.((FertilizedEgg(x) & Offspring(y) & CarriedUntilBirth(z) & CarriedUntilBirth(x,y,z)) -> CanCreate(x,y))", "all x.((FertileEgg(x) & CarriedUntilBirth(x)) -> CanCreateOffspring(x))", "all x.((FertilizedEgg(x) & CarriedUntilBirth(x)) -> CanCreateOffspring(x))", "all x y.((FertilizedEgg(x) & CarriedUntilBirth(x)) -> CanCreateOffspring(x,y))", "all x y z.((FertilizedEgg(x) & Offspring(y) & CarriedUntilBirth(x,y,z)) -> CanCreate(x,y))", "all x.((FertileEgg(x) & CarriedUntilBirth(x)) -> CanCreateOffspring(x))", "all x y.((FertilizedEgg(x) & CarriedUntilBirth(x)) -> CanCreateOffspring(x,y))", "all x.((FertilizedEgg(x) & CarriedUntilBirth(x)) -> CanCreateOffspring(x))", "all x y z.((FertilizedEgg(x) & Offspring(y) & CarriedUntilBirth(z) & CarriedUntilBirth(x,y)) -> CanCreate(x,y))", "all x.(FertilizedEgg(x) -> CanCreateOffspring(x))", "all x y.((FertilizedEgg(x) & CarriedToBirth(x,y)) -> CanCreateOffspring(x,y))", "all x y.((FertileEgg(x) & CarriedToBirth(x,y)) -> CanCreateOffspring(x))", "all x.((FertileEgg(x) & CarriedUntilBirth(x)) -> CanCreateOffspring(x))", "all x.((FertilizedEgg(x) & CarriedUntilBirth(x)) -> CanCreateOffspring(x))"]}
{"id": "eqasc_validation_502", "nl": "Births are the main component of population growth.", "fol": "", "prediction": ["all x.(Birth(x) -> MainComponentOfPopulationGrowth(x))", "all x y.((Birth(x) & PopulationGrowth(y)) -> MainComponent(x,y))", "(MainComponentOfPopulationGrowth(births) & MainComponentOfPopulationGrowth(births))", "(MainComponentOfPopulationGrowth(Births) & MainComponentOfPopulationGrowth(Births))", "all x.(Birth(x) -> MainComponentOfPopulationGrowth(x))", "all x y z.((Birth(x) & PopulationGrowth(y) & Population(z)) -> MainComponent(x,y,z))", "all x y.((Birth(x) & PopulationGrowth(y)) -> MainComponent(x,y))", "all x.(Birth(x) -> MainComponentOfPopulationGrowth(x))", "(MainComponentOfPopulationGrowth(births) & MainComponentOfPopulationGrowth(births))", "all x y.((Birth(x) & PopulationGrowth(y)) -> MainComponentOf(x,y))", "all x y.((Birth(x) & Population(y)) -> MainComponentOfGrowth(x,y))", "all x.(Birth(x) -> PopulationGrowthComponent(x))", "all x.(Birth(x) -> MainComponentOfPopulationGrowth(x))", "all x.(Birth(x) -> MainCommitmentOfPopulationGrowth(x))", "all x.(Birth(x) -> PopulationGrowthComponent(x))", "all x.(Birth(x) -> MainComponentOfPopulationGrowth(x))"]}
{"id": "eqasc_validation_503", "nl": "Pregnancy leads to population growth", "fol": "", "prediction": ["all x.(PregnancyLeadsToPopulationGrowth(x) -> PopulationGrowth(x))", "all x y.((Pregnancy(x) & PopulationGrowth(y)) -> LeadsTo(x,y))", "all x y z.((Pregnancy(x) & PopulationGrowth(y) & Population(z)) -> LeadsTo(x,y,z))", "all x.(PregnancyLeadsToPopulationGrowth(x) -> PopulationGrowth(x))", "all x y.((Pregnancy(x) & PopulationGrowth(y)) -> LeadsTo(x,y))", "all x y z.((Pregnancy(x) & Population(y) & Population(z)) -> LeadsTo(x,y,z))", "(LeadsToPopulationGrowth(Pregnancy) -> PopulationGrowth(Pregnancy))", "all x.((Pregnancy(x) & PopulationGrowth(x)) -> LeadsTo(x,pregnancy,populationGrowth))", "all x.(PregnancyLeadsToPopulationGrowth(x) -> PopulationGrowth(x))", "all x.((PregnancyLeadsToPopulationGrowth(x)) -> PopulationGrowth(x))", "all x y.((Pregnancy(x) & Population(y)) -> LeadsTo(x,y))", "all x y z.((Pregnancy(x) & PopulationGrowth(y) & Population(z)) -> LeadsTo(x,y,z))", "all x.(PregnancyLeadsToPopulationGrowth(x) -> PopulationGrowth(x))", "all x y.((Pregnancy(x) & PopulationGrowth(y)) -> LeadsTo(x,y))", "all x.(PregnancyLeadsToPopulationGrowth(x) -> PopulationGrowth(x))", "all x.(PregnancyLeadsToPopulationGrowth(x) -> PopulationGrowth(x))"]}
{"id": "eqasc_validation_504", "nl": "Mothers choose to have sex, which leads to pregnancy.", "fol": "", "prediction": ["all x.(Mother(x) -> (ChoosesSex(x) & LeadsToPregnancy(x)))", "all x y.((Mother(x) & Sex(y)) -> (Chooses(x,y) & LeadsToPregnancy(x)))", "all x y z.((Mother(x) & Sex(y) & Pregnancy(z)) -> (Chooses(x,y) & LeadsTo(x,z)))", "all x.((Mother(x) & HasSex(x)) -> LeadsToPregnancy(x))", "all x.(Mother(x) -> (ChoosesSex(x) & LeadsToPregnancy(x)))", "all x y.((Mother(x) & Sex(y)) -> (Chooses(x,y) & LeadsTo(x,y)))", "all x y.((Mother(x) & sex(y)) -> (Chooses(x,y) & LeadsToPregnancy(x)))", "all x y z.((Mother(x) & Sexual(y) & Pregnancy(z)) -> (Chooses(x,y) & LeadsTo(x,z)))", "all x.(Mother(x) -> (ChoosesSex(x) & LeadsToPregnancy(x)))", "all x.(Mother(x) -> (HasSex(x) & LeadsToPregnancy(x)))", "all x y.((Mother(x) & Mother(y)) -> (ChoosesSex(x,y) & LeadsToPregnancy(y)))", "all x.((Mother(x) & HasSex(x)) -> Pregnancy(x))", "exists x.(Mother(x) & HasSex(x) & LeadsToPregnancy(x))", "(all x.(Mother(x) -> HasSex(x)))", "exists x.(Mother(x) & ChoosesSex(x) & LeadsToPregnancy(x))", "all x y.((Mother(x) & Sex(y)) -> (Chooses(x,y) & LeadsToPregnancy(x)))"]}
{"id": "eqasc_validation_505", "nl": "Mothers carry offspring from fertilization until birth", "fol": "", "prediction": ["all x y z.((Mother(x) & Offspring(y) & Fertilization(z) & CarryFromToBirth(x,y,z)) -> CarryFromFertilizationToBirth(x,y,z))", "all x y.((Mother(x) & Offspring(y)) -> CarryFromFertilizationToBirth(x,y))", "(CarriesOffspringFromFertilizationToBirth(Mothers) & CarriesOffspringFromFertilizationToBirth(Mothers))", "all x y z.((Mother(x) & Offspring(y) & Fertilization(z) & Fertilization(z)) -> CarryFromToBirth(x,y,z))", "all x.(Mother(x) -> (CarriesOffspringFromFertilization(x) & Birth(x)))", "all x y.((Mother(x) & Offspring(y) & Fertilization(y)) -> Carry(x,y))", "all x y z w.((Mother(x) & Offspring(y) & Fertilization(z) & Birth(w)) -> CarriesFrom(x,y,z,w))", "all x y z.((Mother(x) & Offspring(y) & Fertilization(z) & Carry(x,y,z)) -> Carry(x,y,z))", "all x.((Mother(x) & CarryOffspring(x,fertilization) & Birth(x)) -> CarryOffspringFromFertilizationToBirth(x))", "(CarriesOffspringFromFertilizationToBirth(MothersMothers))", "all x.(Mother(x) -> (CarriesOffspringFromFertilization(x) & Birth(x)))", "all x y.((Mother(x) & Offspring(y)) -> CarriesFromFertilizationToBirth(x,y))", "all x y z.((Mother(x) & Offspring(y) & Fertilization(z)) -> CarryFromToBirth(x,y,z))", "all x y.((Mother(x) & Offspring(y) & Fertilization(y) & Birth(y)) -> CarriesFromFertilizationToBirth(x,y))", "all x.(Mother(x) -> (CarriesOffspringFromFertilization(x) & UntilBirth(x)))", "all x y z.((Mother(x) & Offspring(y) & Fertilization(z) & Birth(z)) -> CarriesFrom(x,y,z))"]}
{"id": "eqasc_validation_506", "nl": "Human Embryonic Development Follows human development from fertilization through birth.", "fol": "", "prediction": ["all x.(HumanEmbryonicDevelopment(x) -> FollowsHumanDevelopment(x))", "all x y.((HumanEmbryonicDevelopment(x) & Fertilization(y) & Birth(y)) -> FollowsDevelopment(x,y))", "(HumanEmbryonicDevelopment(Human) & FollowsDevelopmentFromFertilizationToBirth(Human))", "all x.(HumanEmbryonicDevelopment(x) -> FollowsHumanDevelopmentFromFertilizationToBirth(x))", "all x y z.((HumanEmbryonicDevelopment(x) & Fertilization(y) & Birth(z)) -> FollowsDevelopment(x,y,z))", "(HumanEmbryonicDevelopment(Human) & FollowsHumanDevelopment(Human) & Fertilization(Human) & Birth(Human))", "all x y.((HumanEmbryonicDevelopment(x) & Fertilization(y) & Birth(y)) -> FollowsDevelopment(x,y))", "(HumanEmbryonicDevelopment(Human) & Fertilization(Human) & Birth(Human))", "all x y.((HumanEmbryonicDevelopment(x) & HumanFertilization(y)) -> FollowsDevelopment(x,y))", "all x y z.((HumanEmbryonicDevelopment(x) & Fertilization(y) & Birth(z)) -> FollowsDevelopmentFromTo(x,y,z))", "all x.(HumanEmbryonicDevelopment(x) -> FollowsHumanDevelopment(x))", "All x.(HumanEmbryonicDevelopment(x) -> FollowsDevelopmentFromFertilizationToBirth(x))", "all x.(HumanEmbryonicDevelopment(x) -> FollowsHumanDevelopmentFromFertilizationToBirth(x))", "all x y.((HumanEmbryonicDevelopment(x) & Fertilization(y) & Birth(y)) -> FollowsDevelopmentFromTo(x,y))", "All x.(HumanEmbryonicDevelopment(x) -> FollowsHumanDevelopmentFromFertilizationToBirth(x))", "All x.(HumanEmbryonicDevelopment(x) -> FollowsDevelopmentFromFertilizationToBirth(x))"]}
{"id": "eqasc_validation_507", "nl": "Pregnancy is  embryonic development", "fol": "", "prediction": ["all x.(Pregnancy(x) -> EmbryonicDevelopment(x))", "all x y.((Pregnancy(x) & EmbryonicDevelopment(y)) -> EmbryonicDevelopment(x,y))", "all x.(Pregnancy(x) -> (EmbryonicDevelopment(x) & Pregnancy(x)))", "(EmbryonicDevelopment(pregnancy) & EmbryonicDevelopment(pregnancy))", "all x y z.((Pregnancy(x) & EmbryonicDevelopment(y) & Pregnancy(z)) -> (EmbryonicDevelopment(x,y) & EmbryonicDevelopment(y)))", "all x y.((Pregnancy(x) & EmbryonicDevelopment(y)) -> IsEmbryonic(x,y))", "(EmbryonicDevelopment(pregnancy) -> Pregnancy(pregnancy))", "all x.(Pregnancy(x) -> EmbryonicDevelopment(x))", "all x.(Pregnancy(x) -> (EmbryonicDevelopment(x) & EmbryonicDevelopment(x)))", "all x y.((Pregnancy(x) & EmbryonicDevelopment(y)) -> EmbryonicDevelopment(x,y))", "(EmbryonicDevelopment(pregnancy) & EmbryonicDevelopment(pregnancy))", "all x y.((Pregnancy(x) & EmbolicDevelopment(y)) -> IsEmbryonal(x,y))", "all x.(Pregnancy(x) -> (EmbryonicDevelopment(x) & Pregnancy(x)))", "all x.(Pregnancy(x) -> (EmbryonicDevelopment(x) & EmbryonicDevelopment(x)))", "all x.(Pregnancy(x) -> EmbryonicDevelopment(x))", "all x.(Pregnancy(x) -> EmbryonicDevelopment(x))"]}
{"id": "eqasc_validation_508", "nl": "An offspring is defined as something, or someone that comes into existence as a result of pregnancy.", "fol": "", "prediction": ["all x.(Offspring(x) -> (((ProceedsIn(x) & (ComesIntoInexistenceAsResultOfPregnancy(x))) | ComesIntoInexistenceAsResultOfPregnancy(x))))", "all x.(Offspring(x) -> ((ComesIntoInexistenceAsResultOfPregnancy(x) | ComesIntoInexistenceAsResultOfPregnancy(x))))", "all x.(Offspring(x) -> (((ProceedsIn(x) & (ComesIntoInexistenceAsResultOfPregnancy(x))) | ComesIntoInexistenceAsResultOfPregnancy(x))))", "all x y.((Offspring(x) & (Patient(y) & Pregnancy(y))) -> ComesIntoInexistence(x,y))", "all x.(Offspring(x) -> ((ComesIntoOctain(x) & Pregnancy(x)) | ComesIntoOctain(x))))", "all x y.(Offspring(x) -> (((Proceeds(y) & (ComesIntoInexistenceAsResultOfPregnancy(x,y))) | ComesIntoInexistenceAsResultOfPregnancy(x,y))))", "all x.(Offspring(x) -> (exists y.(Patient(y) & ComesIntoExistence(x,y)))))", "all x y.(Offspring(x) -> (((Proceeds(y) & (ComesIntoOctain(x,y)) & Pregnancy(y)))))", "all x.(Offspring(x) -> (exists y.(Patient(y) & ComesIntoExistence(x,y))))", "all x.(Offspring(x) -> ((ComesIntoOctain(x) & Pregnancy(x)) | ComesIntoOctain(x))))", "exists x.(Offspring(x) & (ComesIntoOctainAsResultOfPregnancy(x) | ComesIntoOctainAsResultOfPregnancy(x)))", "exists x.(Offspring(x) & ((ProceedsFromPregnancy(x) & (ComesIntoExistenceAsResultOfPregnancy(x)) | ComesIntoExistenceAsResultOfPregnancy(x))))", "all x y.(Offspring(x) -> (((Patient(y) & ComesIntoExistence(x,y)) & Pregnancy(y))))", "all x.(Offspring(x) -> ((IsSomething(x) | IsPerson(x)) & ComesIntoInexistenceAsResultOfPregnancy(x)))", "all x y.(Offspring(x) -> (((Patient(y) & ComesIntoExistence(x,y)) & Pregnancy(y))))", "exists x.(Offspring(x) & exists y.(Proceeding(y) & ComesIntoOf(x,y)))"]}
{"id": "eqasc_validation_509", "nl": "pregnancy results from fertilization", "fol": "", "prediction": ["all x.((PregnancyResultsFromFertilization(x)) -> Fertilization(x))", "all x y.((Pregnancy(x) & Fertilization(y)) -> ResultsFrom(x,y))", "all x.(PregnancyResultsFromFertilization(x) -> PregnancyResultsFromFertilization(x))", "all x y z.((Pregnancy(x) & Fertilization(y) & Fertilization(z)) -> ResultsFrom(x,y,z))", "(ResultsFromFertilization(pregnancy) -> PregnancyResultsFromFertilization(pregnancy))", "all x.((PregnancyResult(x) & Fertilization(x)) -> Fertilization(x))", "all x y.((PregnancyResult(x) & Fertilization(y)) -> Fertilization(x,y))", "all x.((PregnancyResultsFromFertilization(x)) -> Fertilization(x))", "all x y.((Pregnancy(x) & Fertilization(y)) -> ResultsFrom(x,y))", "(ResultsFromFertilization(pregnancies) -> PregnanciesResultsFromFertilization(pregnancies))", "all x.((PaternityResultsFromFertilization(x)) -> Fertilization(x))", "all x y z.((Pregnancy(x) & Fertilization(y) & Fertilization(z) & Fertilization(z)) -> ResultsFrom(x,y,z))", "(ResultsFromFertilization(pregnancy) -> PregnancyResultsFromFertilization(pregnancy))", "all x y.((Paternity(x) & Fertilization(y)) -> ResultsFrom(x,y))", "all x.(PregnancyResultsFromFertilization(x) -> PregnancyResultsFromFertilization(x))", "all x.((Pregnant(x) & FertilizationResults(x)) -> PregnancyResults(x,fertilization))"]}
{"id": "eqasc_validation_510", "nl": "Infertility is also the inability to carry a pregnancy to full term.", "fol": "", "prediction": ["all x.(Infertility(x) -> (InabilityToCarry(x,pregnancy) & FullTerm(x)))", "all x y.((Infertility(x) & Pregnancy(y)) -> InabilityToCarryToFullTerm(x,y))", "(Infertility(x) -> InabilityToCarry(x))", "(Infertility(infertility) -> CarriesPregnancyToFullTerm(infertility))", "all x.(Infertility(x) -> (InabilityToCarry(x,pregnancy) & FullTerm(x)))", "all x.(Infertility(x) -> (InabilityToCarry(x,pregnancy) & FullTerm(x)))", "(Infertility(Infertility) -> CarriesPregnancyToFullTerm(Infertility))", "all x y.((Infertility(x) & Pregnancy(y)) -> InabilityToCarryToFullTerm(x,y))", "all x y.((Infertility(x) & Pregnancy(y)) -> (InabilityToCarryToFullTerm(x,y)))", "all x.(Infertility(x) -> (InabilityToCarry(x,Paternity) & FullTerm(x)))", "all x y.((Infertility(x) & Pregnant(y)) -> InabilityToCarryToFullTerm(x,y))", "all x.(Infertility(x) -> (InabilityToCarry(x,pregnancy) & FullTerm(x)))", "all x.(Infertility(x) -> (InabilityToCarryPregnancy(x) & FullTerm(x)))", "all x.(Infertility(x) -> (InabilityToCarry(x,Paternity) & FullTerm(x)))", "all x.(Infertility(x) -> (InabilityToCarryPregnancyToFullTerm(x)))", "all x.(Infertility(x) -> (InabilityToCarryPregnancyToFullTerm(x)))"]}
{"id": "eqasc_validation_511", "nl": "Carrying offspring to full term is from fertilization until birth", "fol": "", "prediction": ["all x y.((Offspring(x) & Fertilization(y) & Birth(y)) -> CarryingToFullTerm(x,y))", "all x y z.((Offspring(x) & Fertilization(y) & Birth(z)) -> CarryingToFullTerm(x,y,z))", "all x.((Offspring(x) & CarryingToFullTerm(x)) -> FertilizationUntilBirth(x))", "(CarriesOffspringToFullTerm(fertilization) & Birth(birth) -> FromFertilizationToBirth(fertilization))", "all x.(CarryingOffspringToFullTerm(x) -> FertilizationUntilBirth(x))", "all x y.((Offspring(x) & Fertilization(y) & Birth(y)) -> CarryingToFullTerm(x,y))", "all x.((Fertilization(x) & Birth(x)) -> CarryingOffspringToFullTerm(x))", "(all x y.((Offspring(x) & Fertilization(y) & FullTerm(y)) -> CarryingTo(x,y)) & Fertilization(x) & Birth(x))", "(CarryingOffspringToFullTerm(fertilization) & Birth(birth))", "all x y z.((Offspring(x) & Fertilization(y) & Birth(z)) -> CarryingToFullTerm(x,y,z))", "all x.((Offspring(x) & CarryingToFullTerm(x)) -> FertilizationUntilBirth(x))", "all x y.((Fertilization(x) & Birth(y)) -> CarryingOffspringToFullTerm(x,y))", "All x y z.((Offspring(x) & Fertilization(y) & Birth(z) & CarryingToFullTerm(x,y,z)) -> FertilizationUntilBirth(x))", "all x y.((Offspring(x) & Fertilization(y) & Birth(y)) -> CarryingToFullTerm(x,y))", "all x.(CarryingOffspringToFullTerm(x) -> FertilizationUntilBirth(x))", "all x y z.((Offspring(x) & Fertilization(y) & Birth(z)) -> CarryingToFullTerm(x,y,z))"]}
{"id": "eqasc_validation_512", "nl": "Pregnancy is another word for gestation.", "fol": "", "prediction": ["all x.(Pregnancy(x) -> Gestation(x))", "(exists x.(Pregnancy(x) & ForGestation(x)) & WordForGestation(x))", "(GestationWord(Pregnancy) & AnotherWord(Pregnancy))", "all x.(Pregnancy(x) -> Gestation(x))", "all x.(Pregnancy(x) -> (Gestation(x) | -Gestation(x)))", "all x y.((Pregnancy(x) & Gestation(y)) -> AnotherWord(x,y))", "all x.(Pregnancy(x) -> AnotherWordForGestation(x))", "(GestationWord(Pregnancy) & WordForGestation(Pregnancy))", "(exists x.(Pregnancy(x) & -Gestation(x)))", "all x y.((Pregnancy(x) & Gestation(y)) -> AnotherWordFor(x,y))", "all x.(Pregnancy(x) -> (Gestation(x) | -Gestation(x)))", "all x.(Pregnancy(x) -> (Gestation(x) | Gestation(x)))", "all x.(Pregnancy(x) -> Gestation(x))", "all x.(Pregnancy(x) -> AnotherWordForGestation(x))", "exists x.(Pregnancy(x) & ForGestation(x))", "exists x.(Pregnancy(x) & ForGestation(x))"]}
{"id": "eqasc_validation_513", "nl": "Gestation is the carrying of one or more offspring from fertilization until birth.", "fol": "", "prediction": ["all x.(Gestation(x) -> (CarriesOffspringFromFertilization(x) & Birth(x)))", "all x y.((Offspring(x) & Fertilization(y)) -> CarryingUntilBirth(x,y))", "all x y.((Gestation(x) & Offspring(y)) -> CarryingFromFertilizationToBirth(x,y))", "(CarriesOffspringFromFertilizationToBirth(gestation) -> CarryingOffspring(gestation))", "all x y z.((Gestation(x) & Offspring(y) & Fertilization(z)) -> CarryingUntilBirth(x,y,z))", "all x.(Gestation(x) -> (CarriesOffspring(x) & FromFertilizationToBirth(x)))", "all x.(Gestation(x) -> (CarriesOffspringFromFertilization(x) & Birth(x)))", "(CarryingOffspringFromFertilizationToBirth(gestation,x))", "all x y z.((Gestation(x) & Offspring(y) & Fertilization(z) & CarryingFromToBirth(x,y,z)) -> CarryingFromFertilizationToBirth(x))", "(CarriesOffspringFromFertilizationToBirth(gestation))", "all x.((OffspringCarrying(x) & FertilizationUntilBirth(x)) -> Gestation(x))", "all x y.((Offspring(x) & Fertilization(y)) -> CarryingUntilBirth(x,y))", "all x.(Gestation(x) -> (CarriesOffspringFromFertilization(x) & UntilBirth(x)))", "all x.(Gestation(x) -> (CarriesOffspringFromFertilization(x) & Birth(x)))", "all x y.((Gestation(x) & Offspring(y)) -> CarryingFromFertilizationToBirth(x,y))", "all x.(Gestation(x) -> CarryingOffspringFromFertilizationToBirth(x))"]}
{"id": "eqasc_validation_514", "nl": "Most pregnancies end happily with the birth of a healthy baby.", "fol": "", "prediction": ["all x.((Pregnancies(x) & HealthyBaby(x)) -> HappyEnd(x))", "all x y.((Pregnancies(x) & HealthyBaby(y)) -> EndsHappyly(x,y))", "all x.((Pregnancies(x) & HealthyBaby(x)) -> EndsHappyly(x))", "all x y z.((Pregnancies(x) & HealthyBaby(y) & HealthyBaby(z)) -> EndsWith(x,y,z))", "all x y.((Pregnancy(x) & HealthyBaby(y)) -> EndsWith(x,y))", "(all x.((Pregnancies(x) & HealthyBaby(x)) -> HappyEnd(x)))", "exists x.(Pregnancies(x) & HealthyBaby(x) & EndsWith(x,y))", "all x.((Pregnancies(x) & HealthyBaby(x)) -> HappyEnd(x))", "all x y.((Pregnancies(x) & HealthyBaby(y)) -> HappyEnd(x,y))", "(all x.((Pregnancy(x) & HealthyBaby(x)) -> HappyEnd(x)))", "all x.((Pregnancy(x) & HealthyBaby(x)) -> EndsHappily(x))", "all x.((Pregnancies(x) & HealthyBirth(x)) -> HappyEnd(x))", "all x y.((Pregnancy(x) & HealthyBaby(y)) -> EndsHappily(x,y))", "exists x.(Pregnancies(x) & HealthyBaby(x) & EndsHappily(x))", "all x y.((Pregnancies(x) & HealthyBirth(y)) -> HappyEnd(x,y))", "all x.((Pregnancy(x) & HealthyBaby(x)) -> HappyEnd(x))"]}
{"id": "eqasc_validation_515", "nl": "carrying offspring from fertilization until birth results in a baby", "fol": "", "prediction": ["all x y.((Offspring(x) & Fertilization(y) & BirthResult(x,y)) -> CarryingFromToBirth(x,y))", "all x.((Offspring(x) & Fertilization(x) & BirthResultsInBaby(x)) -> CarryingFromToBirth(x))", "all x y z.((Offspring(x) & Fertilization(y) & BirthResult(z)) -> CarryingFromToBirth(x,y,z))", "(CarriesOffspringFromFertilizationToBirthResultsInBaby(x))", "all x y.((Offspring(x) & Fertilization(y) & BirthResultsInBaby(x,y)) -> CarryingFromToBirth(x,y))", "all x y z.((Offspring(x) & Fertilization(y) & Baby(z)) -> CarryingFromFertilizationToBirthResultsIn(x,y,z))", "all x.(CarriesOffspringFromFertilizationToBirthResultsInBaby(x)) -> CarryingOffspring(x))", "all x.((Offspring(x) & Fertilization(x) & BirthResultsInBaby(x)) -> CarriesFromFertilizationToBirth(x))", "all x.((OffspringCarrying(x) & Fertilization(x) & BirthResultsInBaby(x)) -> CarryingFromToBirth(x))", "(CarriesOffspringFromFertilizationToBirth(x) & BabyResultsInBaby(x))", "all x y.((Offspring(x) & Fertilization(y) & BirthResult(y)) -> CarryingFromToBirth(x,y))", "all x y z.((Offspring(x) & Fertilization(y) & BirthResult(z)) -> CarriesFromFertilizationToBaby(x,y,z))", "all x.(CarryingOffspringFromFertilizationToBirthResultsInBaby(x) -> Baby(x))", "all x y.((Offspring(x) & Fertilization(y) & BirthResultsInBaby(x,y)) -> CarriesFromFertilizationToBirth(x,y))", "all x y z.((Offspring(x) & Fertilization(y) & Baby(z)) -> CarryingFromToBirth(x,y,z))", "all x.((CarriesOffspringFromFertilization(x) & BirthResultsInBaby(x)) -> Baby(x))"]}
{"id": "eqasc_validation_516", "nl": "An elephant pregnancy lasts about 22 months.", "fol": "", "prediction": ["all x.(Elephant(x) -> LastsAbout22Months(x))", "all x.(ElephantPregnancy(x) -> LastsAbout22Months(x))", "all x.((Elephant(x) & Pregnancy(x,22)) -> LastsAbout(x,22))", "(LastsAbout22Months(Elephant))", "all x y.((Elephant(x) & Pregnancy(y)) -> LastsAbout22Months(x,y))", "all x.(Elephant(x) -> LastsAbout22Months(x))", "all x.((Elephant(x) & Pregnancy(x,22)) -> LastsAbout(x,22))", "all x.(ElephantPregnancy(x) -> LastsAbout22Months(x))", "all x.((Elephant(x) & Pregnancy(x)) -> LastsAbout22Months(x))", "all x y.((Elephant(x) & Pregnant(y)) -> LastsAbout22Months(x,y))", "all x y.((Elephant(x) & Pregnancy(y)) -> LastsAbout22Months(x,y))", "exists x.(Elm(x) & Pregnancies(x,22))", "all x.(Elephant(x) -> LastsAbout22Months(x))", "all x.(ElephantPregnancy(x) -> LastsAbout22Months(x))", "All x y.((Elephant(x) & Pregnancy(y)) -> LastsAbout22Months(x,y))", "All x.(Elephant(x) -> LastsAbout22Months(x))"]}
{"id": "eqasc_validation_517", "nl": "An elephant carries their offspring from fertilization until birth, 22 months later.", "fol": "", "prediction": ["all x y.((Elephant(x) & Offspring(y)) -> CarriesFromFertilizationToBirth(x,y))", "all x.(Elephant(x) -> (CarriesOffspringFromFertilization(x) & Birth(x) & 22MonthsAfter(x)))", "all x.(Elephant(x) -> CarriesOffspringFromFertilizationToBirth(x,22))", "all x y z.((Elephant(x) & Offspring(y) & Fertilization(z) & Born(y,z)) -> CarriesFromToBirth(x,y,z))", "(CarriesOffspringFromFertilizationToBirth(elephant) & 22MonthsAfterBirth(elephant))", "all x y.((Elephant(x) & Offspring(y)) -> CarriesFromFertilizationToBirth(x,y))", "all x.((Elephant(x) & CarriesOffspringFromFertilization(x) & Birth(x,22)) -> CarriesOffspring(x,22))", "all x.((Elephant(x) & Offspring(x)) -> CarriesFromFertilizationToBirth(x,22))", "all x y z.((Elephant(x) & Offspring(y) & Fertilization(z) & Born(z)) -> CarriesFromToBirth(x,y,z))", "all x.(Elephant(x) -> CarriesOffspringFromFertilizationToBirth(x,22))", "(CarriesOffspringFromFertilizationToBirth(elephant) & 22MonthsAfterBirth(elephant))", "all x y.((Elephant(x) & Offspring(y)) -> CarriesFromFertilizationToBirth(x,y))", "all x.(Elephant(x) -> (CarriesOffspringFromFertilization(x) & Birth(x,22)))", "all x.(Elephant(x) -> CarriesOffspring(x,fetration,birth,22MonthsAgo))", "all x y.((Elephant(x) & Offspring(y)) -> CarriesFromFertilizationToBirth(x,y))", "all x y.((Elephant(x) & Offspring(y)) -> CarriesFromFertilizationToBirth(x,22,months))"]}
{"id": "eqasc_validation_518", "nl": "boulders are formed by glaciers melting sometimes", "fol": "", "prediction": ["all x y.((Bolt(x) & Glacier(y)) -> FormedByMelting(x,y))", "all x y z.((Bolt(x) & Glacier(y) & Glacier(z)) -> (FormedBy(x,y,z) & Melting(y,z)))", "all x.(Bolt(x) -> (FormedByGlaciers(x) & MeltingSometimes(x)))", "all x y.((Bolt(x) & Glacier(y)) -> (FormedBy(x,y) & Melting(y)))", "all x y z.((Blast(x) & Glacier(y) & Glacier(z)) -> (FormedBy(x,y,z) & Melting(y,z)))", "all x.(Bolt(x) -> (FormedByGlaciers(x) & Melts(x)))", "all x.(Blast(x) -> (FormedByGlaciers(x) & MeltingSometimes(x)))", "all x y z.(Bolt(x) & Glacier(y) & Glacier(z) & Melts(x,z)) -> FormedBy(x,y,z))", "exists x.(Bolt(x) & FormedByGlaciers(x) & Melts(x) & SometimesMelts(x))", "all x y z.((Bolt(x) & Glacier(y) & Glacier(z)) -> (FormedBy(x,y,z) & Melting(y,z)))", "all x y.((Blast(x) & Glacier(y)) -> FormedByMelting(x,y))", "all x.(Bolt(x) -> (FormedByGlaciers(x) & MeltingSometimes(x)))", "all x y.((Bolt(x) & Glacier(y)) -> FormedByMelting(x,y))", "exists x.(Bolt(x) & Glacier(x) & Melts(x))", "all x y.((Balloon(x) & Glacier(y) & Melting(y)) -> FormedBy(x,y))", "exists x.(Balloon(x) & FormedByGlaciers(x) & MeltingSometimes(x))"]}
{"id": "eqasc_validation_519", "nl": "Most of the crags are boulders.", "fol": "", "prediction": ["all x.(Crag(x) -> Boulder(x))", "all x.(Crag(x) -> Boulder(x))", "(all x.(Crag(x) -> Boulder(x)))", "all x.(Crag(x) -> Boulder(x))", "-all x.(Crag(x) -> Boulder(x))", "all x y.(Crag(x) & Boulder(y))", "(all x.(Crag(x) -> Boulder(x)))", "all x.(Crag(x) -> (Bolt(x) | Boulder(x)))", "all x.(Crag(x) -> Boulder(x))", "exists x.(Crag(x) & Crag(x) & Boulder(x))", "all x y.(Crag(x) & Boulder(y))", "all x.(Crag(x) -> Boulder(x))", "exists x.(Crag(x) & Crag(x) & Boulder(x))", "exists x.(Crag(x) & Crag(x) & Boulder(x))", "exists x.(Craig(x) & Boulder(x))", "all x.(Crag(x) -> Boulder(x))"]}
{"id": "eqasc_validation_520", "nl": "most crags are formed by melting glaciers", "fol": "", "prediction": ["all x.(Crag(x) -> FormedByMeltingGlaciers(x))", "all x y.((Crag(x) & Glacier(y)) -> FormedByMelting(x,y))", "all x.(Crag(x) -> (FormedByMeltingGlaciers(x) & MeltingGlaciers(x)))", "(MostCragsFormedByMeltingGlaciers(crag) & MeltingGlaciers(crag))", "all x y z.((Crag(x) & Glacier(y) & Glacier(z)) -> FormedByMelting(x,y,z))", "all x y.((Crag(x) & MeltingGlacier(y)) -> FormedBy(x,y))", "(MostCragsFormedByMeltingGlaciers(crag) & MeltingGlaciers(crag))", "all x.(Crag(x) -> FormedByMeltingGlaciers(x))", "(MostCragsFormedByMeltingGlaciers(crags) & MeltingGlaciers(crags))", "all x.(Crag(x) -> (FormedByMeltingGlaciers(x) & MostCrags(x)))", "all x y.((Crag(x) & Glacier(y)) -> FormedByMelting(x,y))", "all x.((Crag(x) & MeltingGlaciers(x)) -> FormedBy(x,y))", "all x y.(Crag(x) & MeltingGlacier(y) & FormedBy(x,y))", "(MostCragsFormedByMeltingGlaciers(Crags) & MeltingGlaciers(Crags) & MeltingGlaciers(Crags))", "all x.(Crag(x) -> (FormedByMeltingGlaciers(x) & MeltingGlaciers(x)))", "all x.(Crag(x) -> FormedByMeltingGlaciers(x))"]}
{"id": "eqasc_validation_521", "nl": "Alpine glaciers form in the mountains.", "fol": "", "prediction": ["all x y.((AlpineGlacier(x) & Mountain(y)) -> FormsIn(x,y))", "all x.(AlpineGlacier(x) -> FormsInMountains(x))", "all x y z.((AlpineGlacier(x) & Mountain(y) & Mountain(z)) -> FormsIn(x,y,z))", "all x y.((AlpineGlacier(x) & Mountain(y)) -> FormsIn(x,y))", "all x.(AlpineGlacier(x) -> FormsInMountains(x))", "all x.(AlpinalGlacier(x) -> FormsInMountains(x))", "all x y z.((AlpineGlacier(x) & Mountain(y) & Mountain(z)) -> FormsIn(x,y,z))", "all x y.((AlpineGlacier(x) & Mountain(y)) -> FormsIn(x,y))", "all x.(AlpineGlacier(x) -> FormsInMountains(x))", "all x y.((AlpineGlacier(x) & Mountain(y)) -> FormIn(x,y))", "all x y z.((AlpineGlacier(x) & Mountain(y) & Mountain(z)) -> FormsIn(x,y,z))", "all x.(AlpineGlacier(x) -> FormInMountains(x))", "all x.(AlpineGlacier(x) -> FormsInMountains(x))", "all x y.((AlpineGlacier(x) & Mountain(y)) -> FormsIn(x,y))", "exists x.(AlpineGlacier(x) & FormedIn(x,Mountains))", "all x.(AlpineGlacier(x) -> FormsInMountains(x))"]}
{"id": "eqasc_validation_522", "nl": "Boulders are formed in the mountains.", "fol": "", "prediction": ["all x.(Boulder(x) -> FormedInMountains(x))", "all x y.((Boulder(x) & Mountain(y)) -> FormedIn(x,y))", "all x y z.((Boulder(x) & Mountain(y) & Mountain(z)) -> FormedIn(x,y,z))", "all x.(Boulder(x) -> FormedInMountains(x))", "all x y.((Boulder(x) & Mountain(y)) -> FormedIn(x,y))", "all x y z.((Boulder(x) & Mountain(y) & Mountain(z)) -> FormedIn(x,y,z))", "all x.(Boulder(x) -> FormedInMountains(x))", "all x y.((Boulder(x) & Mountain(y)) -> FormedIn(x,y))", "all x.(Boulder(x) -> FormedInMountains(x))", "exists x.(Bolt(x) & FormedInMountains(x))", "all x.(Boulder(x) -> FormedInMountains(x))", "all x y z.((Boulder(x) & Mountain(y) & Mountain(z)) -> FormedIn(x,y,z))", "all x y.((Boulder(x) & Mountain(y)) -> FormsIn(x,y))", "exists x.(Boulder(x) & FormedIn(x,Mountains))", "all x y.((Boulder(x) & Mountain(y)) -> FormedIn(x,y))", "exists x.(Boulder(x) & FormedIn(x,Mountains))"]}
{"id": "eqasc_validation_523", "nl": "Erratics are boulders that are deposited by glaciers as part of moraines.", "fol": "", "prediction": ["all x.(Erratic(x) -> (Bolt(x) & DepositedByGlaciers(x) & PartOfMoraines(x)))", "all x y.((Erratic(x) & Glacier(y)) -> (Bolt(x) & DeposedBy(x,y)))", "all x.(Erratic(x) -> (Bolt(x) & DeposedByGlaciers(x) & PartOfMoraines(x)))", "all x y z.((Erratic(x) & Glacier(y) & Moraine(z)) -> (Bolt(x) & DeposesBy(x,y,z)))", "(all x.(Erratic(x) -> Boulder(x)) & DeposesByGlaciers(x))", "all x y.((Erratic(x) & Glacier(y)) -> (Bolt(x) & DepositedBy(x,y)))", "all x y z.((Erratic(x) & Boulder(y) & Glacier(z)) -> (DeposesBy(y,z) & PartOfMoraines(y,z)))", "all x.(Erratic(x) -> (Bolt(x) & DepositedByGlaciers(x) & PartOfMoraines(x)))", "all x.(Erratic(x) -> (Bolt(x) & DepositedByGlaciers(x) & PartOfMoraines(x)))", "all x.(Erratic(x) -> (Boulder(x) & DepositedByGlaciers(x) & PartOfMoraines(x)))", "(all x.(Erratic(x) -> Boulder(x)) & DeposedByGlaciers(x) & PartOfMoraines(x))", "all x y.((Erratic(x) & Glacier(y)) -> DeposesBy(x,y))", "all x.(Erratic(x) -> (Bolts(x) & DeposedByGlaciers(x) & PartOfMoraines(x)))", "all x.(Erratic(x) -> (Bolt(x) & DepositedByGlaciers(x) & PartOfMoraines(x)))", "all x y.((Erratic(x) & Glacier(y)) -> (Boulder(x) & Deposes(x,y)))", "all x.(Erratic(x) -> (Bolt(x) & DepositedByGlaciers(x) & PartOfMoraines(x)))"]}
{"id": "eqasc_validation_524", "nl": "erratics are formed by glaciers melting", "fol": "", "prediction": ["all x y.((Eratoid(x) & Glacier(y)) -> FormedByMelting(x,y))", "all x y z.((Eratoid(x) & Glacier(y) & Glacier(z)) -> FormedByMelting(x,y,z))", "all x.(Eratoid(x) -> FormedByGlaciersMelting(x))", "all x.(Erastist(x) -> (FormedByGlaciers(x) & MeltingGlaciers(x)))", "(Eratoid(r) -> FormedByGlaciersMelting(r)))", "all x y.((Eratoid(x) & Glacier(y)) -> FormedByMelting(x,y))", "all x.(Eratoid(x) -> (FormedByGlaciers(x) & MeltingGlaciers(x)))", "all x y z.((Erastist(x) & Glacier(y) & Glacier(z)) -> FormedBy(x,y,z))", "(Erasertic) -> FormedByGlaciersMelting(Erasertic))", "all x.(Erastic(x) -> FormedByGlaciersMelting(x))", "all x y z.((Erastic(x) & Glacier(y) & Glacier(z)) -> FormedByMelting(x,y,z))", "all x y z.((Eratoid(x) & Glacier(y) & Glacier(z)) -> FormedByMelting(x,y,z))", "All x.(Erratic(x) -> FormedByGlaciersMelting(x))", "all x y.((Erastist(x) & Glacier(y)) -> FormedByMelting(x,y))", "all x.(Eratoid(x) -> FormedByGlaciersMelting(x))", "all x y.((Eratoid(x) & Glacier(y)) -> FormedBy(x,y))"]}
{"id": "eqasc_validation_525", "nl": "Glaciers are made of snow, ice and rock.", "fol": "", "prediction": ["all x.(Glacier(x) -> (MadeOfSnow(x) & MadeOfIce(x) & MadeOfRock(x)))", "all x y z.((Glacier(x) & Snow(y) & Ice(z)) -> (MadeOf(x,y) & MadeOf(x,z) & MadeOf(x,y) & MadeOf(x,z)))", "all x.(Glacier(x) -> (MadeOfSnow(x) & MadeOfIce(x) & MadeOfRock(x)))", "(MadeOfSnowIceAndRock(Glacier))", "all x y.((Glacier(x) & Snow(y)) -> (MadeOf(x,y) | MadeOf(x,y) | MadeOf(x,y)))", "all x.(Glacier(x) -> (MadeOfSnow(x) & MadeOfIce(x) & MadeOfRock(x)))", "(MadeOfSnowIceAndRock(glacier))", "all x.(Glacier(x) -> (MadeOfSnow(x) & MadeOfIce(x) & MadeOfRock(x)))", "all x y.((Glacier(x) & Snow(y)) -> MadeOf(x,y))", "all x.(Glacier(x) -> (MadeOf(x,Snow) & MadeOf(x,Ice) & MadeOf(x,Rock)))", "all x.(Glacier(x) -> (MadeOfSnow(x) & MadeOfIce(x) & MadeOfRock(x)))", "exists x.(Glocier(x) & MadeOfSnowIceAndRock(x))", "all x.(Glacier(x) -> (MadeOfSnow(x) & MadeOfIce(x) & MadeOfRock(x)))", "all x.(Glacier(x) -> (MadeOfSnow(x) & MadeOfIce(x) & MadeOfRock(x)))", "all x.(Glacier(x) -> (MadeOfSnow(x) | MadeOfIce(x) | MadeOfRock(x)))", "all x.(Glacier(x) -> (MadeOfSnow(x) & MadeOfIce(x) & MadeOfRock(x)))"]}
{"id": "eqasc_validation_526", "nl": "boulders are formed by snow, ice, and rock melting sometimes", "fol": "", "prediction": ["all x.(Bolt(x) -> (FormedBySnow(x) | FormedByIce(x) | FormedByRockMelting(x)))", "all x y z.((Bolt(x) & Snow(y) & Ice(z)) -> (FormedBy(x,y) & FormedBy(x,z) & FormedBy(x,y) & FormedBy(x,z)))", "all x.(Blast(x) -> (FormedBySnow(x) | FormedByIce(x) | FormedByRockMelting(x)))", "all x y z.((Bolt(x) & Snow(y) & Ice(z) & RockMelting(x)) -> (FormedBy(x,y) & FormedBy(x,z)))", "all x y.((Bolt(x) & Snow(y) & Ice(y) & RockMelting(x)) -> FormedBy(x,y))", "all x.(Bolt(x) -> (FormedBySnow(x) | FormedByIce(x) | FormedByRockMelting(x)))", "all x.(Bolt(x) -> (FormedBySnow(x) & FormedByIce(x) & FormedByRockMelting(x)))", "(all x.(Bolt(x) -> (FormedBySnow(x) | FormedByIce(x) | FormedByRockMelting(x)))", "all x y z.(Bolt(x) -> (FormedBy(x,y) & Snow(y) & Ice(z) & RockMelting(x) & Sometimes(x)))", "all x y z.(Bolt(x) -> (FormedBySnow(x) | FormedByIce(x) | FormedByRockMelting(y) & Sometimes(z)))", "exists x.(Bolt(x) & FormedBy(x,Snow,Ice,RockMelting))", "all x y.((Bolt(x) & Snow(y) & Ice(y) & RockMelting(y)) -> FormedBy(x,y))", "exists x.(Blood(x) & FormedBy(x,Snow,Ice,RockMelting))", "all x.(Balloon(x) -> (FormedBySnow(x) & FormedByIce(x) & FormedByRockMelting(x)))", "exists x.(Blood(x) & FormedBy(x,snow,ice,rockMelting) & Sometimes(x))", "exists x.(Bolt(x) & FormedBySnowIceAndRockMelting(x))"]}
{"id": "eqasc_validation_527", "nl": "Some pelycosaurs gave rise to a group of animals called therapsids.", "fol": "", "prediction": ["all x.(Pelycosaur(x) -> GivesRiseToTherapsids(x))", "all x y.((Pelycosaur(x) & Animal(y)) -> Therapsid(x))", "all x y.((Pelycosaur(x) & Therapsid(y)) -> GivesRiseTo(x,y))", "all x y z.((Pelycosaur(x) & Animal(y) & Therapsid(z)) -> GivesRiseTo(x,y,z))", "exists x.(Pelycosaur(x) & GivesRiseToTherapsids(x))", "exists x.(Pelycosaur(x) & Therapsid(x))", "all x y z.((Pelycosaur(x) & Animal(y) & Therapsid(z)) -> GivesRiseTo(x,y,z))", "all x y.((Pelycosaur(x) & Animal(y)) -> Therapsid(x))", "all x y.((Pelycosaur(x) & Therapsid(y)) -> GivesRiseTo(x,y))", "exists x.(Pelycosaur(x) & GivesRiseToTherapsid(x))", "all x y.((Pelycosaur(x) & Animal(y)) -> GivesRiseToTherapsids(x,y))", "exists x.(Pelycosaur(x) & Therapsid(x))", "exists x.(Pelycosaur(x) & GivesRapsid(x))", "exists x.(Pelycosaur(x) & Animal(x) & Therapsid(x))", "exists x.(Pelycosaur(x) & GivesRisingToTherapsids(x))", "exists x.(Pelycosaur(x) & Therapsid(x))"]}
{"id": "eqasc_validation_528", "nl": "Pelycosaurs are an important lineage preserved in the fossil record.", "fol": "", "prediction": ["all x.(Pelycosaur(x) -> ImportantLineagePreservedInFossilRecord(x))", "all x y.((Pelycosaur(x) & FossilRecord(y)) -> ImportantLineagePreservedIn(x,y))", "(PreservedInFossilRecord(pelycosaur) & ImportantLineage(pelycosaur))", "all x.(Pelycosaur(x) -> ImportantLineagePreservedInFossilRecord(x))", "all x.(Pelycosaur(x) -> PreservedInFossilRecord(x))", "(MaintainsLineageInFossilRecord(pelycosaur) & ImportantLineage(pelycosaur))", "all x y z.((Pelycosaur(x) & Lineage(y) & FossilRecord(z)) -> PreservedIn(x,y,z))", "all x y.((Pelycosaur(x) & FossilRecord(y)) -> ImportantLineagePreserved(x,y))", "all x y.((Pelycosaur(x) & FossilRecord(y)) -> PreservedIn(x,y))", "all x.(Pelycosaur(x) -> ImportantLineagePreservedInFossilRecord(x))", "all x.(Pelycosaur(x) -> PreservedInFossilRecord(x))", "all x.(Pelycosaur(x) -> (MaintainedInFossilRecord(x) & ImportantLineage(x)))", "all x y.((Pelycosaur(x) & FossilRecord(y)) -> ImportantLineage(x,y))", "all x.(Pelycosaur(x) -> ImportantLineagePreservedInFossilRecord(x))", "all x.(Pelycosaur(x) -> ImportantLineage(x))", "all x.(Pelycosaur(x) -> PreservedInFossilRecord(x))"]}
{"id": "eqasc_validation_529", "nl": "The fossil record shows the lineage of therapsids.", "fol": "", "prediction": ["all x.(FossilRecord(x) -> ShowsLineageOfTherapsids(x))", "all x y.((FossilRecord(x) & Therapsid(y)) -> ShowsLineage(x,y))", "all x.(FossilRecord(x) -> ShowsLineageOfTherapsids(x))", "(FossilRecord(fossil) & Lineage(fossil))", "all x y.((FossilRecord(x) & Therapsid(y)) -> ShowsLineage(x,y))", "therapsids.", "all x.(FossilRecord(x) -> ShowsLanguageOfTherapsids(x))", "all x.(FossilRecord(x) -> ShowsLineageOfTherapsids(x))", "(FossilRecord(fossil) & Lineage(fossil))", "all x y.((FossilRecord(x) & Therapsid(y)) -> ShowsLineage(x,y))", "therapsids.", "all x.(FossilRecord(x) -> ShowsLineage(x,Therapsids))", "exists x.(FossilRecord(x) & Therapsid(x) & ShowsLineage(x,y))", "therapsids.", "all x y.((FossilRecord(x) & Therapsid(y)) -> ShowsLineage(x,y))", "all x.(FossilRecord(x) -> ShowsLiniageOfTherapsids(x))"]}
{"id": "eqasc_validation_530", "nl": "Pelycosaurs and therapsids are theropsids.", "fol": "", "prediction": ["all x.((Pelycosaur(x) | Therapsid(x)) -> Theropsid(x))", "all x y.((Pelycosaur(x) & Therapsid(y)) -> (Theropsid(x) & Theropsid(y)))", "all x.((Pelycosaur(x) | Therapsid(x)) -> Theropsid(x))", "all x.(Theropsid(x) -> (Pelycosaur(x) | Therapsid(x)))", "all x y.((Pelycosaur(x) & Therapsid(y)) -> Theropsid(x))", "(Theropsid(pelycosaur) & Therapsid(therapsid))", "(all x.(Pelycosaur(x) -> Theropsid(x)) & all y.(Therapsid(y) -> Theropsid(y)))", "all x.((Pelycosaur(x) | Therapsid(x)) -> Theropsid(x))", "all x y.((Pelycosaur(x) & Therapsid(y)) -> (Theropsid(x) & Theropsid(y)))", "(all x.(Pelycosaur(x) -> Theropsid(x)))", "all x.(Theropsid(x) -> (Pelycosaur(x) | Therapsid(x)))", "(all x.(Pelycosaur(x) -> Theropsid(x)) & (Therapsid(x) -> Theropsid(x)))", "all x.(Theropsid(x) -> (Pelycosaur(x) | Therapsid(x)))", "(Theropsid(pelycosaur) & Therapsid(therapsid))", "all x.((Pelycosaur(x) | Therapsid(x)) -> Theropsid(x))", "all x y.((Pelycosaur(x) & Therapsid(y)) -> Theropsid(x))"]}
{"id": "eqasc_validation_531", "nl": "therapsids are animals", "fol": "", "prediction": ["all x.(Therapsid(x) -> Animal(x))", "all x y.((Therapsid(x) & Animal(y)) -> Animal(x,y))", "(Animal(rapsid) & Animal(rapsid))", "all x.(Therapsid(x) -> Animal(x))", "all x.(Therapsid(x) -> (Animal(x) & Animal(x)))", "(Animal(rapsid) & Animal(rapsid))", "all x y.((Therapsid(x) & Animal(y)) -> Animal(x,y))", "all x.(Therapsid(x) -> (Animal(x) & Animal(x)))", "all x.(Therapsid(x) -> Animal(x))", "all x.(Rapsid(x) -> Animal(x))", "all x y.((Therapsid(x) & Animal(y)) -> Animal(x,y))", "all x.((Therapsid(x) & Animal(x)) -> Animal(x))", "all x y.((Therapsid(x) & Animal(y)) -> Animal(x))", "all x.(Therapsid(x) -> Animal(x))", "all x.(Therapsid(x) -> Animal(x))", "All x.(Therapsid(x) -> Animal(x))"]}
{"id": "eqasc_validation_532", "nl": "Tetraceratops is the oldest known therapsid.", "fol": "", "prediction": ["(AlterestKnownTherapsid(Tetraceratops))", "all x.(Tetraceratops(x) -> Therapsid(x))", "Tetraceratops (Tetraceratops) - Thermosexual(t))", "Tetraceratops is the oldest known therapsid.", "-(Tetraceratops(x) & Therapsid(x))", "(OldestKnownTherapsid(Tetraceratops) & KnownFor(Tetraceratops))", "Tetraceratops (Tetraceratops) -> OldestKnownTherapsid(x))", "Tetraceratops is oldestKnownTherapsid(x) & KnownFor(x,y))", "all x.(Tetraceratops(x) -> Therapsid(x))", "Therapsid(tetraceratops)", "Tetraceratops (Tetraceratops) & Therapsid(t) & KnownAt(t))", "(AlterestKnownTherapsid(Tetraceratops))", "KnownAlterestTherapsid(tetraceratops)", "therapsid(tetraceratops)", "Tetraceratops is the oldest known Therapsid.", "(OldestKnownTherapsid(Tetraceratops))"]}
{"id": "eqasc_validation_533", "nl": "Tetraceratops are pelycosaurs. ", "fol": "", "prediction": ["all x.(Tetraceratop(x) -> Pelycosaur(x))", "(Pelycosaur(Tetraceratops)", "all x y.((Tetraceratop(x) & Pelycosaur(y)) -> Pelycosaur(x))", "all x.(Tetraceratop(x) -> Pelycosaur(x))", "all x y.((Tetraceratop(x) & Pelycosaur(y)) -> (Pelycosaur(x) & Pelycosaur(y)))", "(Pelycosaur(tetraceratops)", "all x.(Tetraceratop(x) -> Pelycosaur(x))", "(Pelycosaur(Tetraceratops)", "all x y.((Tetraceratop(x) & Pelycosaur(y)) -> Pelycosaur(x))", "all x.(Tetraceratop(x) -> Pelycosaur(x))", "all x.(Tetraceratops(x) -> Pelycosaur(x))", "all x.(Tetraceratop(x) -> Pelycosaur(x))", "all x.(Tetraceratop(x) -> Pelycosaur(x))", "All x.(Tetraceratop(x) -> Pelycosaur(x))", "all x.(Tetraceratop(x) -> Pelycosaur(x))", "all x.(Tetraceratop(x) -> Pelycosaur(x))"]}
{"id": "eqasc_validation_534", "nl": "Therapsids are reptiles ancestral to mammals.", "fol": "", "prediction": ["all x.(Therapsid(x) -> (Reptile(x) & AscendedToMammals(x)))", "all x.(Therapsid(x) -> (Reptile(x) & AscendedToMammals(x)))", "all x y.((Therapsid(x) & Mammal(y)) -> AscendedTo(x,y))", "(AncientToMammals(rapsid) & Reptile(rapsid))", "(AncientToMammals(Therapsids) -> Reptile(Therapsid))", "all x.(Therapsid(x) -> (Reptile(x) & AncientToMammals(x)))", "all x y.((Reptile(x) & Mammal(y)) -> AscendedTo(x,y))", "all x y.((Therapsid(x) & Mammal(y)) -> AscendedTo(x,y))", "all x.(Therapsid(x) -> (AncientToMammals(x) & Reptile(x)))", "all x.(Therapsid(x) -> (Reptile(x) & AscendedToMammals(x)))", "all x.(Therapsid(x) -> (Reptile(x) & AscendedToMammals(x)))", "all x y.((Therapsid(x) & Mammal(y)) -> AncientTo(x,y))", "all x y.((Reptile(x) & Mammal(y)) -> AscendedTo(x,y))", "all x.(Therapsid(x) -> (Reptile(x) & AncientToMammals(x)))", "all x.(Therapsid(x) -> (Reptile(x) & AncientToMammals(x)))", "All x.(Therapsid(x) -> AscendedToMammals(x))"]}
{"id": "eqasc_validation_535", "nl": "Some pelycosaurs gave rise to a group of reptiles ancestral to mammals", "fol": "", "prediction": ["all x y.((Pelycosaur(x) & Reptile(y)) -> (GaveRiver(x,y) & AncientToMammals(y)))", "all x y z.((Pelycosaur(x) & Reptile(y) & Mammal(z)) -> (GaveRiver(x,y) & AncientTo(y,z)))", "all x.(Pelycosaur(x) -> (GaveRiverToReptiles(x) & AncientToMammals(x)))", "all x y z.((Pelycosaur(x) & Reptile(y) & Mammal(z)) -> GivesRiseTo(x,y,z))", "all x y.((Pelycosaur(x) & Reptile(y)) -> (GaveRiver(x,y) & AscendedToMammals(y)))", "all x.(Pelycosaur(x) -> (GaveRiptiles(x) & AncientToMammals(x)))", "(exists x.(Pelycosaur(x) & GivesRidgeToReptiles(x)) & AncientToMammals(x))", "exists x.(Pelycosaur(x) & Reptile(x) & AncientToMammals(x))", "all x y.((Pelycosaur(x) & Reptile(y)) -> GivesRigor(x,y))", "all x y z.((Pelycosaur(x) & Reptile(y) & Mammal(z)) -> GaveRiverToAncientTo(x,y,z))", "all x y.((Pelycosaur(x) & Reptile(y)) -> (GatheredRenaissanceToMammals(x,y) & AncientToMammals(y)))", "exists x.(Pelycosaur(x) & Reptile(x) & AscendedToMammals(x))", "exists x.(Pelycosaur(x) & GivesRigor(x) & Reptiles(x) & AncientToMammals(x))", "all x y z.((Pelycosaur(x) & Reptile(y) & Mammal(z)) -> (GaveRiver(x,y) & AntecedentTo(y,z)))", "exists x.(Pelycosaur(x) & Reptiles(x) & AncientToMammals(x))", "all x y z.((Pelycosaur(x) & Reptile(y) & Mammal(z)) -> GivesRainTo(x,y,z))"]}
{"id": "eqasc_validation_536", "nl": "Some pelycosaurs gave rise to  reptile ancestral to mammals.", "fol": "", "prediction": ["exists x.(Pelycosaur(x) & Reptile(x) & AncientToMammals(x))", "exists x.(Pelycosaur(x) & Reptile(x) & AncientToMammals(x))", "all x y.((Pelycosaur(x) & Reptile(y)) -> GaveRiseTo(x,y))", "(exists x.(Pelycosaur(x) & Reptile(x) & AntecedentToMammals(x)))", "exists x.(Pelycosaur(x) & GivesRiseToReptile(x) & AscendedToMammals(x))", "exists x.(Pelycosaur(x) & Reptile(x) & AntecedentToMammals(x))", "all x y z.((Pelycosaur(x) & Reptile(y) & Mammal(z)) -> GivesRiseTo(x,y,z))", "all x y.((Pelycosaur(x) & Reptile(y)) -> GivesRiseTo(x,y))", "exists x.(Pelycosaur(x) & Reptile(x) & AscendedToMammals(x))", "all x y.((Pelycosaur(x) & Reptile(y)) -> GaveRiver(x,y))", "exists x.(Pelycosaur(x) & GivesRiverToReptile(x))", "exists x.(Pelycosaur(x) & GivesRiseToReptile(x) & AncientToMammals(x))", "all x y.((Pelycosaur(x) & Reptile(y)) -> GivesRiseTo(x,y))", "exists x.(Pelycosaur(x) & Reptile(x) & AncientToMammals(x))", "exists x.(Pelycosaur(x) & Reptile(x) & AntecedentToMammals(x))", "exists x.(Pelycosaur(x) & GivesRiverToReptile(x))"]}
{"id": "eqasc_validation_537", "nl": "howling is used to warn other wolves by wolves", "fol": "", "prediction": ["all x y.((Wolf(x) & Wolf(y)) -> HowlingWarns(x,y))", "all x y z.((Wolf(x) & Wolf(y) & Wolf(z)) -> (Howling(x,y) & Warns(x,z)))", "all x y.((Howling(x) & Wolf(y)) -> Warns(x,y))", "all x y.((Wolf(x) & Wolf(y)) -> Warns(x,y))", "all x.(Wolf(x) -> (Howling(x) & WarnsOthers(x) & Wolf(x)))", "all x y z.((Howling(x) & Wolf(y) & Wolf(z)) -> Warns(x,y,z))", "all x y z.((Wolf(x) & Wolf(y) & Wolf(z)) -> (Warns(x,y,z) & Howling(x) & Wolf(y)))", "all x.(WolfWolf(x) -> (Howling(x) & WarnsOthers(x)))", "(all x y.((Wolf(x) & Wolf(y)) -> HowlingWarns(x,y)))", "all x.(Howling(x) -> WarnsWolf(x))", "all x.(WolfWolf(x) -> WarnsOthersByWolf(x))", "all x y z.((Wolf(x) & Wolf(y) & Wolf(z) & Howling(x,y)) -> Warns(x,z))", "all x y.((Wolf(x) & Wolf(y)) -> HowlingWarns(x,y))", "all x y z.((Howling(x) & Wolf(y) & Wolf(z)) -> Warns(x,y,z))", "all x y.((Howling(x) & Wolf(y)) -> Warns(x,y))", "all x.(Howling(x) -> WarnsWolf(x))"]}
{"id": "eqasc_validation_538", "nl": "And somewhere a beagle howls a most pitiful sound.", "fol": "", "prediction": ["all x y.((Beagle(x) & PitifulSound(y)) -> Howls(x,y))", "all x.(Beagle(x) -> HowlsPitifulSound(x))", "(all x.(Beagle(x) -> HowlsPitifulSound(x)))", "and somewhere a beagle howls a most pitifulsound.", "& exists x y.(Beagle(x) & HowlsPitifulSound(x))", "all x y.((Beagle(x) & PitifulSound(y)) -> Howls(x,y))", "all x y z.((Beagle(x) & PitifulSound(y) & Where(z) & Howls(x,y)) -> PitifulSound(z))", "exists x.(Beagle(x) & HowlsPitifulSound(x))", "(all x.(Beagle(x) -> HowlsPitifulSound(x)))", "all x y.((Beagle(x) & PitifulSound(y)) -> Howls(x,y))", "exists x.(Beagle(x) & HowlsPitifulSound(x))", "(all x.(Beagle(x) -> HowlsPitifulSound(x)))", "exists x.(Beagle(x) & HowlsMostPitifulSound(x))", "all x y.((Beagle(x) & PitifulSound(y)) -> Howls(x,y))", "exists x.(Beagle(x) & HowlesPitifulSound(x))", "all x.(Beagle(x) -> HowlsPalmfulSound(x))"]}
{"id": "eqasc_validation_539", "nl": "wolves use sound to warn other wolves", "fol": "", "prediction": ["all x y.((Wolf(x) & Wolf(y)) -> UsesSoundToWarn(x,y))", "all x y z.((Wolf(x) & Sound(y) & Wolf(z)) -> UsesToWarn(x,y,z))", "all x.(Wolf(x) -> UsesSoundToWarn(x))", "(all x.(Wolf(x) -> UsesSoundToWarn(x,Wolfe)))", "all x y.((Wolf(x) & Wolf(y)) -> UsesSoundToWarn(x,y))", "all x y z.((Wolf(x) & Sound(y) & Wolf(z)) -> UsesToWarn(x,z))", "all x.(Wolf(x) -> (UsesSound(x) & WarnsOtherWolfe(x)))", "all x.(Wolf(x) -> UsesSoundToWarn(x))", "all x y.((Wolf(x) & Wolf(y)) -> UsesSoundToWarn(x,y))", "all x y z.((Wolf(x) & Wolf(y) & Sound(z)) -> UsesToWarn(x,y,z))", "all x.(Wolf(x) -> UsesSoundToWarnOtherWolfe(x))", "all x.(Wolf(x) -> (UsesSound(x) & WarnsOtherWolf(x)))", "all x y.((Wolf(x) & Wolf(y)) -> UsesSoundToWarn(x,y))", "all x y z.((Wolf(x) & Sound(y) & Wolf(z)) -> UsesToWarn(x,z))", "all x.(Wolf(x) -> UsesSoundToWarn(x,Wolfe))", "all x y.((Wolf(x) & Wolf(y)) -> UsesSoundToWarn(x,y))"]}
{"id": "eqasc_validation_540", "nl": "Groups of indris communicate with mournful and distinctive howls.", "fol": "", "prediction": ["all x.(Indris(x) -> CommunicatesWithMelancholyAndDistinctiveHowls(x))", "all x.(IndrisGroup(x) -> CommunicatesWithMelancholyAndDistinctiveHowls(x))", "all x y.((IndrisGroup(x) & IndrisGroup(y)) -> CommunicatesWithMelancholyAndDistinctiveHowls(x,y))", "all x.((IndrisGroup(x) & MelodfulHowls(x)) -> DistinctiveHowls(x))", "all x y.((Indris(x) & Group(y)) -> CommunicatesWithMelancholyAndDistinctiveHowls(x,y))", "(all x.(IndrisGroup(x) -> CommunicatesWithMelancholy(x)) & all y.(IndrisGroup(y) -> CommunicatesWithDistinctiveHowls(y)))", "all x y z.((Indris(x) & Group(y) & Howl(z)) -> CommunicatesWithMelancholyAndDistinctive(x,y,z))", "all x.(Indris(x) -> CommunicatesWithMelancholyAndDistinctiveHowls(x))", "all x.((IndrisGroup(x) & MelodfulHowls(x) & DistinctiveHowls(x)) -> Communicates(x))", "all x y.((IndrisGroup(x) & IndrisGroup(y)) -> CommunicatesWithMeetingAndDistinctiveHowls(x,y))", "all x.(Indris(x) -> (CommunicatesWithMelancholy(x) & CommunicatesWithDistinctiveHowls(x)))", "all x.(IndrisGroup(x) -> CommunicatesWithMeetingHowls(x))", "all x.((IndrisGroup(x) & MellowAndDistinctiveHowls(x)) -> CommunicatesWith(x,y))", "all x.(IndrisGroup(x) -> (CommunicatesWithMelancholy(x) & CommunicatesWithDistinctiveHowls(x)))", "all x y.((Indris(x) & Group(y)) -> CommunicatesWithMelancholyAndDistinctiveHowls(x,y))", "exists x.(IndrisGroup(x) & MelodfulAndDistinctiveHowls(x))"]}
{"id": "eqasc_validation_541", "nl": "Wolves use distinct forms of communication.", "fol": "", "prediction": ["all x.(Wolf(x) -> UsesDistinctFormsOfCommunication(x))", "all x y.((Wolf(x) & Communication(y)) -> Uses(x,y))", "all x.(Wolf(x) -> UsesDistinctFormsOfCommunication(x))", "(DistinctFormsOfCommunication(Wolf) & Uses(Wolf))", "all x y z.((Wolf(x) & Communication(y) & Communication(z)) -> Uses(x,y,z))", "all x y.((Wolf(x) & Communication(y)) -> Uses(x,y))", "all x.(Wolf(x) -> UsesDistinctFormsOfCommunication(x))", "all x y.((Wolf(x) & Communication(y)) -> UsesDistinctForms(x,y))", "all x.(Wolf(x) -> UsesDistinctFormsOfCommunication(x))", "all x.(Wolf(x) -> UsesDiscreteFormsOfCommunication(x))", "all x.(Wolf(x) -> DistinctFormsOfCommunication(x))", "all x y.((Wolf(x) & Communication(y)) -> Uses(x,y))", "all x y.((Wolf(x) & Communication(y)) -> UsesDistinctForms(x,y))", "all x.(Wolf(x) -> UsesDistinctFormsOfCommunication(x))", "exists x.(Wolf(x) & DistinctFormsOfCommunication(x))", "all x.(Wolf(x) -> UsesDistinctFormsOfCommunication(x))"]}
{"id": "eqasc_validation_542", "nl": "Soon a chorus of howling coyotes join in and the whole area reverberates with noise.", "fol": "", "prediction": ["all x y z.((Coyote(x) & Howling(y) & Area(z)) -> (JoinsIn(x,y) & ReverberatesWithNoise(z,x)))", "all x y z.((Cyclist(x) & HowlingCoyote(y) & Area(z)) -> (JoinsIn(x,y) & ReverberatesWithNoise(z,x)))", "all x y.((CoyoteChoir(x) & Howling(x)) -> (JoinsIn(x,y) & ReverberatesWithNoise(x)))", "all x y.((Cycle(x) & HowlingCoyote(y)) -> (JoinsIn(x,y) & ReverberatesWithNoise(x)))", "all x.((CoyoteChoir(x) & Howling(x)) -> (JoinsIn(x) & ReverberatesWithNoise(x)))", "all x y z.((CoyoteChoir(x) & Howling(y) & Area(z)) -> (JoinsIn(x,y) & ReverberatesWithNoise(z,x)))", "all x.((HowlingCoyote(x) & HowlingCoyote(x)) -> (JoinsIn(x) & ReverberatesWithNoise(x)))", "(all x.((Coyote(x) & Howling(x)) -> JoinsIn(x)) & wholeAreaReverberatesWithNoise(x))", "all x.((CycleOfHowlingCoyotes(x) & Area(x)) -> JoinsInAndReverberatesWithNoise(x))", "(all x.((CoyoteChoir(x) & Howling(x)) -> JoinsIn(x)) & wholeAreaReverberatesWithNoise(x))", "all x y z.((Cyclone(x) & HowlingCoyote(y) & Area(z)) -> (JoinsIn(x,y) & ReverberatesWithNoise(z,x)))", "all x y z.((HowlingCoyoteChoir(x) & Area(y) & HowlingCoyote(z)) -> (JoinsIn(x,z) & ReverberatesWithNoise(y,z)))", "all x y.((Cyclone(x) & HowlingCoyote(y) & Area(x)) -> JoinsInAndReverberatesWithNoise(x,y))", "all x.((HowlingCoyoteChoir(x) & Area(x)) -> JoinsInAndReverberatesWithNoise(x))", "all x.((CoyoteChoir(x) & Howling(x)) -> JoinsInAndReverberatesWithNoise(x))", "all x y.((HowlingCoyoteChoir(x) & Area(y)) -> (JoinsIn(x,y) & ReverberatesWithNoise(y)))"]}
{"id": "eqasc_validation_543", "nl": "reverberating noise is used to warn other wolves by wolves", "fol": "", "prediction": ["all x y.((ReverberatingNoise(x) & Wolf(y)) -> Warns(x,y))", "all x y z.((ReverberatingNoise(x) & Wolf(y) & Wolf(z)) -> Warns(x,y,z))", "all x y.((ReverberatingNast(x) & Wolf(y)) -> Warns(x,y))", "all x.((ReverberatingNoise(x) & Wolf(y)) -> Warns(x,y))", "all x y.((Wolf(x) & Wolf(y)) -> Warns(x,y))", "all x y z.((ReverberatingNast(x) & Wolf(y) & Wolf(z)) -> Warns(x,y,z))", "all x.(ReverberatingNoise(x) -> WarnsWolf(x))", "all x.((ReverberatingNast(x) & Wolf(y)) -> Warns(x,y))", "all x y z.((Wolf(x) & Wolf(y) & Wolf(z)) -> (ReverberatingNoise(x) & Warns(x,y,z)))", "(Wolf(w) & ReverberatingNoise(w) & UsedToWarn(w,w))", "all x.(ReverberatingNast(x) -> WarnsWolf(x))", "all x y.((Wolf(x) & Wolf(y)) -> (ReverberatingNoise(x,y) & Warns(x,y)))", "all x y.((ReverberatingNoise(x) & Wolf(y)) -> Warns(x,y))", "all x y z.((ReverberatingNoise(x) & Wolf(y) & Wolf(z)) -> Warns(x,y,z))", "all x.((ReverberatingNoise(x) & Wolf(y)) -> Warns(x,y))", "all x.(ReverberatingNoise(x) -> WarnsWolf(x))"]}
{"id": "eqasc_validation_544", "nl": "Gray wolves are the largest members of the canine family.", "fol": "", "prediction": ["all x.(GrayWolf(x) -> LargestMemberOfCanineFamily(x))", "all x y.((GrayWolf(x) & CanineFamily(y)) -> LargestMember(x,y))", "all x.(GreyWolf(x) -> LargestMemberOfCanineFamily(x))", "(LargestMemberOfCanineFamily(graywolf) -> CanineFamily(graywolf))", "all x.(GrayWolf(x) -> LargestMemberOfCanineFamily(x))", "all x y.((GrayWolf(x) & Canine(y)) -> LargestMember(x,y))", "all x.(Wolf(x) -> (LargestMemberOfCanineFamily(x) & Gray(x)))", "(LargestMemberOfCanineFamily(GrayWolf) & CanineFamily(GrayWolf))", "all x.(GreyWolf(x) -> LargestMemberOfCanineFamily(x))", "all x y.((GrayWolf(x) & CanineFamily(y)) -> LargestMember(x,y))", "(LargestMemberOfCanineFamily(graywolf) & CanineFamily(graywolf))", "all x.(GrayWolf(x) -> LargestMemberOfCanineFamily(x))", "(LargestMemberOfCanineFamily(GrayWolf))", "all x y.((GrayWolf(x) & Canine(y)) -> LargestMember(x,y))", "all x.(GreyWolf(x) -> LargestMemberOfCanineFamily(x))", "all x.(GrayWolf(x) -> LargestMemberOfCanineFamily(x))"]}
{"id": "eqasc_validation_545", "nl": "howling is used by canines to warn others", "fol": "", "prediction": ["all x y.((Canine(x) & Howling(y)) -> WarnsOthers(x,y))", "all x y z.((Howling(x) & Canine(y) & Animal(z)) -> WarnsOthers(y,z))", "all x.(Howling(x) -> UsedByCaninesToWarnOthers(x))", "all x y z.((Howling(x) & Canine(y) & Animal(z)) -> (UsedBy(y,z) & Warns(y,z)))", "all x.(Howling(x) -> (UsedByCaninesToWarnOthers(x) & UsedByCaninesToWarnOthers(x)))", "canine(x) & Howling(x) & WarnsOthers(x))", "all x y.((Canine(x) & Howling(y)) -> WarnsOthers(x,y))", "(all x y.((Canine(x) & Howling(y)) -> WarnsOthers(x,y)))", "all x y.((Howling(x) & Canine(y)) -> WarnsOthers(y))", "all x y z.((Canine(x) & Howling(y) & Other(z)) -> Warns(x,z))", "all x.(Howling(x) -> UsedByCaninesToWarnOthers(x))", "all x y.((Canine(x) & Howling(y)) -> (UsedBy(x,y) & WarnsOthers(x)))", "all x.(Howling(x) -> (UsedByCaninesToWarnOthers(x) & UsedByCaninesToWarnOthers(x)))", "all x y z.((Howling(x) & Canine(y) & Animal(z)) -> (UsedBy(y,z) & WarnsOthers(y,z)))", "all x y.((Howling(x) & Canine(y) & UsesToWarn(y,x)) -> Warns(y,x))", "all x.(Howling(x) -> UsedByCaninesToWarnOthers(x))"]}
{"id": "eqasc_validation_546", "nl": "Warnings and cautions are there for a good reason.", "fol": "", "prediction": ["all x.((Warning(x) | Conveyance(x)) -> GoodRight(x))", "all x.(Warning(x) & Warning(x) & GoodRight(x))", "all x y.((Warning(x) & Warning(y)) -> exists z.(GoodRight(z) & GoodRight(z))))", "all x y.((Warning(x) & Conveyance(y)) -> exists z.(GoodRight(z) & GoodRight(z))))", "all x.(Warning(x) & WarningConstruction(x)) -> GoodRight(x))", "all x.((Warning(x) | Conveyance(x)) -> GoodRight(x))", "exists x.(Warning(x) & Warning(x) & Warning(x) & GoodRight(x))", "all x.(Warning(x) -> GoodRight(x))", "all x y.((Warning(x) & Warning(y)) -> exists z.(GoodRight(z) & GoodRight(z))))", "exists x.(Warning(x) | Warning(x)) & exists y.(Consequence(y) & GoodRight(x)))", "all x y.((Warning(x) & Conveyance(y)) -> GoodRight(x))", "all x y.((Warning(x) & Convection(y)) -> exists z.(GoodRight(z) & GoodRight(z))))", "exists x.(Warning(x) & -Warning(x))", "exists x.(Warning(x) & Warning(x) & GoodRight(x))", "all x y.((Warning(x) & Warning(y)) -> GoodRight(x,y))", "exists x.(Warning(x) & -Warning(x))"]}
{"id": "eqasc_validation_547", "nl": "Howling is used to caution other wolves by wolves.", "fol": "", "prediction": ["all x y.((Howling(x) & Wolf(y)) -> UsedToConstrain(x,y))", "all x y z.((Howling(x) & Wolf(y) & Wolf(z)) -> UsedToConstrain(x,y,z))", "all x.(Howling(x) -> UsedToConstrainWolf(x))", "all x.(Howling(x) -> (UsedToConstrainWolf(x) & ByWolf(x)))", "all x y.((Howling(x) & Wolf(y)) -> UsedToConstrain(x,y))", "(UsedToConstrainWolf(Howling) & ByWolf(Wolf))", "all x.(Wolf(x) -> (UsedToConstrain(x,Wolf) & ByWolf(x,Wolf)))", "(CautionUsedByWolfe(Howling) & Wolf(Wolfe(Wolfe))", "all x y z.((Howling(x) & Wolf(y) & Wolf(z)) -> UsedToConstrain(x,y,z))", "all x y z.((Howling(x) & Wolf(y) & Wolf(z)) -> (UsedToConstrain(x,y,z) & UsedToConstrain(x,y)))", "all x y.((Howling(x) & Wolf(y)) -> UsedToConstrain(x,y))", "all x.(Howling(x) -> UsedToConstrainWolf(x))", "all x.(Howling(x) -> (UsedToConstrainWolf(x) & ByWolf(x)))", "all x y.((Wolf(x) & Wolf(y)) -> UsedToConstrain(x,y))", "all x.(Wolf(x) -> UsedToWarn(x,Wolf))", "all x y.((Howling(x) & Wolf(y)) -> UsedToConstrain(x,y))"]}
{"id": "eqasc_validation_548", "nl": "Canis lupus is the same species that includes grey wolves.", "fol": "", "prediction": ["all x.(CanisLupus(x) -> GreyWolf(x))", "(IncludesGreyWolfe(CanisLupus) & IncludesGreyWolfe(CanisLupus))", "(EqualSpecies(CanisLupus) & GreyWolf(CanisLupus))", "(GreyWolf(CanisLupus) & GreyWolf(CanisLupus))", "all x.(CanisLupus(x) -> (IncludesGrintWolfe(x) & IncludesGrintWolfe(x)))", "all x y.((CanisLupus(x) & GreyWolf(y)) -> Includes(x,y))", "CanisLupus (exists x.(GreyWolf(x) & Includes(x,y)))", "(EqualSpecies(CanisLupus,GrintWolf) & Includes(CanisLupus,GrintWolf))", "(IncludesGreyWolfe(CanisLupus) & IncludesWolfe(CanisLupus))", "all x.(CanisLupus(x) -> (IncludesGrintWolfes(x) & IncludesGrintWolfes(x)))", "All x y.((CanisLupus(x) & GreyWolf(y)) -> Includes(x,y))", "all x.(CanisLupus(x) -> GreyWolf(x))", "all x.(CanisLupus(x) -> (IncludesGrintWolfes(x) & IncludesGrintWolfes(x)))", "all x y.((CanisLupus(x) & GreyWolf(y)) -> Includes(x,y))", "all x.(CanisLupus(x) -> GreyWolf(x))", "exists x.(CanisLupus(x) & GreyWolf(x))"]}
{"id": "eqasc_validation_549", "nl": "Howling is used by members of the species Canis Lupus to warn other members.", "fol": "", "prediction": ["all x y.((Howling(x) & Member(y) & CanisLupus(y)) -> Warns(x,y))", "all x.(Howling(x) -> (UsedByCanisLupus(x) & WarnsOtherMembers(x)))", "all x y z.((Howling(x) & Member(y) & Member(z) & CanisLupus(y)) -> Warns(x,y,z))", "(all x.(Howling(x) -> UsedByCanisLupus(x)))", "all x y.((Howling(x) & Member(y) & CanisLupus(y)) -> Warns(x,y))", "all x.(Howling(x) -> UsedByCanisLupus(x))", "all x y z.((Howling(x) & Member(y) & Member(z)) -> (UsedBy(y,z) & CanisLupus(y) & Warns(z,y)))", "(All x.(Howling(x) -> UsedByCanisLupus(x)))", "all x.(Howling(x) -> (UsedByCanisLupus(x) & WarnsOtherMembers(x)))", "all x y.((Howling(x) & CanisLupus(y)) -> Warns(x,y))", "all x y.((Howling(x) & Member(y) & CanisLupus(y)) -> Warns(x,y))", "(all x.(Howling(x) -> UsedBySpecies(x,CanisLupus)))", "all x.(Howling(x) -> UsedBySpecies(x,CanisLupus))", "All x.(Howling(x) -> (UsedByCanisLupus(x) & WarnsOtherMembers(x)))", "All x.(Howling(x) -> (UsedByCanisLupus(x) & WarnsOtherMembers(x)))", "all x y.((Howling(x) & Member(y) & CanisLupus(y)) -> WarnsOther(x,y))"]}
{"id": "eqasc_validation_550", "nl": "Wolves communicate with each other using the different pitches of their howl.", "fol": "", "prediction": ["all x y.((Wolf(x) & Howl(y)) -> CommunicatesUsingPitches(x,y))", "all x y z.((Wolf(x) & Howl(y) & Pitch(z)) -> Communicates(x,y,z))", "all x.(Wolf(x) -> CommunicatesWithPitch(x,y))", "all x y.((Wolf(x) & Howl(y)) -> CommunicatesWith(x,y))", "(CommunicatesWithWolvesUsingPitches(Wolves))", "all x.(Wolf(x) -> CommunicatesWithPitches(x,y))", "all x y z.((Wolf(x) & Howl(y) & Pitch(z)) -> CommunicatesWith(x,y,z))", "all x.((Wolf(x) & Howl(y)) -> CommunicatesUsingPitches(x,y))", "all x y z.((Wolf(x) & HowlPitch(y) & HowlPitch(z)) -> Communicates(x,y,z))", "all x y.((Wolf(x) & Howl(y)) -> CommunicatesUsingPitches(x,y))", "all x.(Wolf(x) -> CommunicatesUsingPitches(x))", "all x y.((Wolf(x) & Howl(y)) -> CommunicatesWith(x,y))", "all x.(Wolf(x) -> CommunicatesWithWolves(x))", "all x y.((Wolf(x) & Howl(y)) -> CommunicatesUsingPitch(x,y))", "all x.(Wolf(x) -> CommunicatesUsingPitches(x,y))", "all x.(Wolf(x) -> CommunicatesWithWolves(x))"]}
{"id": "eqasc_validation_551", "nl": "wolves warn other wolves by using different pitches", "fol": "", "prediction": ["all x y.((Wolf(x) & Wolf(y)) -> WarnsByUsingDifferentPitches(x,y))", "all x y z.((Wolf(x) & Wolf(y) & Pitch(z) & UsesPitch(x,z)) -> Warns(x,y))", "all x.(Wolf(x) -> (WarnsWolf(x) & UsesDifferentPitches(x)))", "all x y z.((Wolf(x) & Wolf(y) & Pitch(z)) -> WarnsByUsingPitch(x,y,z))", "(all x.(Wolf(x) -> WarnsOtherWolf(x)) & usesDifferentPitches(x))", "all x y.((Wolf(x) & Wolf(y)) -> WarnsByUsingPitches(x,y))", "(all x y.((Wolf(x) & Wolf(y)) -> Warns(x,y)))", "all x y.((Wolf(x) & Wolf(y) & UsesPitches(x,y)) -> Warns(x,y))", "all x.(Wolf(x) -> (WarnsWolf(x) & UsesDifferentPitches(x)))", "all x y z.((Wolf(x) & Wolf(y) & Pitcher(z)) -> WarnsByUsingPitches(x,y,z))", "(all x y.((Wolf(x) & Wolf(y)) -> WarnsByUsingPitches(x,y)))", "all x.(Wolf(x) -> (WarnsWolf(x) & UsesDifferentPitch(x)))", "all x y.((Wolf(x) & Wolf(y) & UsesDifferentPitches(x,y)) -> Warns(x,y))", "all x y.((Wolf(x) & Wolf(y)) -> WarnsByUsingDifferentPitches(x,y))", "all x y z.((Wolf(x) & Wolf(y) & Pitch(z) & UsesPitch(x,z)) -> Warns(x,y,z))", "all x.(Wolf(x) -> WarnsWolf(x))"]}
{"id": "eqasc_validation_552", "nl": "canis lupus howl", "fol": "", "prediction": ["all x.(CanisLupusHowl(x) -> CanisLupusHowl(x))", "all x y.((CanisLupusHowl(x) & CanisLupusHowl(y)) -> Howl(x,y))", "canis lupus howl (CanisLupusHowl))", "all x.((CanisLupusHowl(x) & CanisLupusHowl(x)) -> Howl(x))", "all x y z.((CanisLupusHowl(x) & CanisLupusHowl(y) & Howl(z)) -> CanisLupusHowl(x,y,z))", "(CanisLupusHowl(x) & CanisLupusHowl(x))", "all x.(CanisLupusHowl(x) -> CanisLupusHowl(x))", "all x y.((CanisLupusHowl(x) & CanisLupusHowl(y)) -> CanisLupusHowl(x))", "canis lupus howl (CanisLupus Howl))", "canis lupus howl (CanisLupusHowl) & CanisLupusHowl(LupusHowl))", "all x.((CanisLupusHowl(x) & CanisLupusHowl(x)) -> Howl(x))", "(CanisLupusHowl(x) & CanisLupusHowl(x))", "canis lupus howl (Lupus howl) & CanisHowl(lupus))", "all x.(CanisLupusHowl(x) -> CanisLupusHowl(x))", "all x y.((CanisLupusHowl(x) & CanisLupusHowl(y)) -> Howl(x,y))", "canis lupus howl (canis) & Howl(x))"]}
{"id": "eqasc_validation_553", "nl": "Wolves are distinguished from other wild canines by their size.", "fol": "", "prediction": ["all x.(Wolf(x) -> (DistinctFromWildCanines(x) & Size(x)))", "all x y.((Wolf(x) & WildCanine(y)) -> DistinctBySize(x,y))", "(DistinctedBySize(Wolf) & WildCanine(Wolf))", "all x.(Wolf(x) -> Distinct(x,y))", "all x y.((Wolf(x) & WildCanine(y)) -> DistinctBySize(x,y))", "(DistinctedFromWildCaninesBySize(Wolfe,WildCanine))", "all x.(Wolf(x) -> (Distinct(x,Size) & WildCanine(x)))", "all x y z.((Wolf(x) & WildCanine(y) & Size(z)) -> Distinct(x,y,z))", "all x.((Wolf(x) & WildCanine(x)) -> DistinctBySize(x,y))", "all x.(Wolf(x) -> (DistinctFromWildCanines(x) & Size(x)))", "all x y.((Wolf(x) & WildCanine(y)) -> Distinct(x,y))", "all x.(Wolf(x) -> Distinct(x,y))", "(SizeDistinctive(wolf) & WildCanine(w))", "all x y.((Wolf(x) & Canine(y)) -> DistinctBySize(x,y))", "all x.(Wolf(x) -> (DistinctedFromWildCanines(x) & Size(x)))", "all x y.((Wolf(x) & WildCanine(y)) -> DistinctBySize(x,y))"]}
{"id": "eqasc_validation_554", "nl": "wild canines use howling to warn others", "fol": "", "prediction": ["all x.(WildCanine(x) -> UsesHowlingToWarn(x))", "all x y.((WildCanine(x) & Howling(y)) -> UsesToWarn(x,y))", "all x y z.((WildCanine(x) & Howling(y) & Other(z)) -> UsesToWarn(x,y,z))", "all x.((WildCanine(x) & Howling(x)) -> WarnsOthers(x))", "all x y.((WildCanine(x) & Howling(y)) -> WarnsOthers(x,y))", "wild canine(x) & UsesHowlingToWarnOthers(x))", "all x.(WildCanine(x) -> UsesHowlingToWarn(x))", "all x.(WildCanine(x) -> (UsesHowling(x) & WarnsOthers(x)))", "all x y z.((WildCanine(x) & Howling(y) & Other(z)) -> UsesToWarn(x,y,z))", "wildcanine(x) & UsesHowlingToWarnOthers(x))", "all x.((WildCanine(x) & Howling(x)) -> WarnsOthers(x))", "all x y.((WildCanine(x) & Howling(y)) -> UsesToWarn(x,y))", "all x.(WildCanine(x) -> (UsesHowlingToWarn(x) & UsesHowlingToWarn(x)))", "all x.(WildCanine(x) -> UsesHowlingToWarnOthers(x))", "all x y z.((WildCanine(x) & Howling(y) & Other(z)) -> UsesToWarn(x,y,z))", "all x y.((WildCanine(x) & Howl(y)) -> WarnsOthers(x,y))"]}
{"id": "eqasc_validation_555", "nl": "Warning Warning means danger.", "fol": "", "prediction": ["All x.(Warning(x) -> MeansDanger(x))", "(WarningWarning(Warning) & MeansDanger(Warning))", "Warning Warning (Warning) -> MeansDanger(Wording))", "Warning Warning means danger.", "(Warning(Warning) & MeansDanger(Warning))", "all x.(Warning(x) -> MeansDanger(x))", "Warning Warning MeansDanger(x)", "Warning Warning (Warning) & MeansDanger(Warning))", "All x.(WaitingWarning(x) -> MeansDanger(x))", "(WarningWarning(Warning) -> MeansDanger(Warning))", "Warning Warning means danger.", "all x.(WarningWarning(x) -> MeansDanger(x))", "all x y.((Warning(x) & Danger(y)) -> Warning(x))", "All x.(Warning(x) -> MeansDanger(x))", "all x.(Warning(x) -> MeansDanger(x))", "All x.(Warning(x) -> MeansDanger(x))"]}
{"id": "eqasc_validation_556", "nl": "wolves howl when there is danger", "fol": "", "prediction": ["all x y.((Wolf(x) & Danger(y)) -> Howls(x,y))", "all x.((Wolf(x) & Danger(x)) -> Howls(x))", "all x y z.((Wolf(x) & Danger(y) & Danger(z)) -> Howls(x,y,z))", "all x y.((Wolf(x) & Danger(y)) -> HowlsWhenInDanger(x,y))", "(all x.((Wolf(x) & Danger(x)) -> Howls(x)))", "all x.((Wolf(x) & Danger(x)) -> Howls(x))", "all x y z.((Wolf(x) & Danger(y) & Danger(z)) -> HowlsWhen(x,y,z))", "exists x.(Wolf(x) & HowlsWhenThereIsDanger(x))", "all x y.((Wolf(x) & Danger(y)) -> HowlsWhen(x,y))", "all x.((Wolf(x) & ThereIsDanger(x)) -> Howls(x))", "all x.((Wolf(x) & Danger(x)) -> Howls(x))", "exists x.(Wolf(x) & HowlsWhenThereIsDanger(x))", "all x y z.((Wolf(x) & Danger(y) & Danger(z)) -> Howls(x,y))", "all x y.((Wolf(x) & Danger(y)) -> HowlsWhenInDanger(x,y))", "all x.((Wolf(x) & Danger(x)) -> HowlsWhen(x,y))", "all x y.((Wolf(x) & Danger(y)) -> HowlsWhen(x,y))"]}
{"id": "eqasc_validation_557", "nl": "Like people, wolves are social.", "fol": "", "prediction": ["all x.(Wolf(x) -> Social(x))", "(Social(wolves) & LikePeople(wolves))", "all x.(Wolf(x) -> Social(x))", "all x y.((Wolf(x) & Person(y)) -> Social(x))", "(LikePeople(wolf) & Social(wolf))", "(LikePeople, Wolfes(wolf) -> Social(wolf))", "all x.(Wolf(x) -> Social(x))", "(Social(wolves) & Social(wolves))", "(Social(wolf) & LikePeople(wolf,wolf))", "all x.(Wolf(x) -> Social(x))", "all x.(Wolf(x) -> (Social(x) & LikePeople(x)))", "(LikePeople,wolves areSocial)", "(Social(wolves) & Social(wolves,people))", "all x.(Wolf(x) -> Social(x))", "all x.(Wolf(x) -> Social(x))", "all x.(Wolf(x) -> Social(x))"]}
{"id": "eqasc_validation_558", "nl": "howling is used to warn other social animals", "fol": "", "prediction": ["all x y.((Howling(x) & SocialAnimal(y)) -> UsedToWarn(x,y))", "all x y z.((Howling(x) & SocialAnimal(y) & SocialAnimal(z)) -> Warns(x,y,z))", "all x.(Howling(x) -> UsedToWarnSocialAnimals(x))", "all x y.((Howling(x) & SocialAnimal(y)) -> Warns(x,y))", "all x y z.((Howling(x) & SocialAnimal(y) & SocialAnimal(z)) -> UsedToWarn(x,y,z))", "all x.(Howling(x) -> WarnsSocialAnimals(x))", "all x y z.((Howling(x) & Animal(y) & SocialAnimal(z)) -> Warns(x,y,z))", "all x y.((Howling(x) & SocialAnimal(y)) -> UsedToWarn(x,y))", "all x y.((Howling(x) & Animal(y)) -> Warns(x,y))", "all x.((Howling(x) & SocialAnimal(x)) -> UsedToWarn(x,y))", "(all x.(Howling(x) -> WarnsSocialAnimals(x)))", "all x.(Howling(x) -> UsedToWarnSocialAnimals(x))", "all x.(Howling(x) -> (WarnsSocialAnimals(x) & UsesToWarn(x)))", "all x y z.((Howling(x) & SocialAnimal(y) & Animal(z)) -> UsedToWarn(x,y,z))", "all x.(Howling(x) -> WarnsSocialAnimals(x))", "all x y.((Howling(x) & SocialAnimal(y)) -> Warns(x,y))"]}
{"id": "eqasc_validation_559", "nl": "sandpaper is used to smooth wooden objects", "fol": "", "prediction": ["all x.(Sandpaper(x) -> SmoothWoodenObjects(x))", "all x y.((Sandpaper(x) & WoodenObject(y)) -> Smooth(x,y))", "(Sandpaper(s) & SmoothWoodenObjects(s))", "all x y z.((Sandpaper(x) & WoodenObject(y) & WoodenObject(z)) -> Smooth(x,y,z))", "all x.(Sandpaper(x) -> SmoothWoodenObjects(x))", "all x y.((Sandpaper(x) & WoodenObject(y)) -> Smooth(x,y))", "all x.((Sandpaper(x) & SmoothWoodenObjects(x)) -> UsedTo(x,sandpaper))", "all x.(Sandpaper(x) -> UsedToSmoothWoodenObjects(x))", "(Sandpaper(s) & SmoothWoodenObjects(s))", "all x y z.((Sandpaper(x) & WoodenObject(y) & Smooth(z)) -> UsedTo(x,y,z))", "(SandpaperUsedToSmoothWoodenObjects(Sandpaper))", "all x y.((Sandpaper(x) & WoodenObject(y) & UsedToSmooth(x,y)) -> Smooth(x,y))", "all x.(Sandpaper(x) -> SmoothWoodenObjects(x))", "all x y.((Sandpaper(x) & WoodenObject(y)) -> Smooth(x,y))", "all x.(Sandpaper(x) -> UsedToSmoothWoodenObjects(x))", "all x.(Sandpaper(x) -> SmoothWoodenObjects(x))"]}
{"id": "eqasc_validation_560", "nl": "Dirt is an abrasive like sandpaper.", "fol": "", "prediction": ["all x.(Dirt(x) -> (Abrasive(x) & Sandpaper(x)))", "(Abrasive(dirt) & Sandpaper(dirt))", "all x y.((Dirt(x) & Sandpaper(y)) -> Abrasive(x,y))", "all x.(Dirt(x) -> (Abrasive(x) & Sandpaper(x)))", "all x.(Dire(x) -> (Abrasive(x) & Sandpaper(x)))", "(Abrasive(dirt) & Sandpaper(dirt))", "all x.(Dirt(x) -> Abrasive(x))", "all x y.((Dirt(x) & Sandpaper(y)) -> Abrasive(x,y))", "(Abrasive(Dirt) & Sandpaper(Dirt))", "(Abrasive(dirt) & Sandpaper(dirt))", "all x.(Dirt(x) -> (Abrasive(x) & Sandpaper(x)))", "all x y.((Dirt(x) & Sandpaper(y)) -> Abrasive(x,y))", "all x.(Dire(x) -> (Abrasive(x) & Sandpaper(x)))", "all x y.((Dirt(x) & Sandpaper(y)) -> Abrasive(x,y))", "all x.(Dirt(x) -> Abrasive(x))", "all x y.((Dirt(x) & Sandpaper(y)) -> Abrasive(x,y))"]}
{"id": "eqasc_validation_561", "nl": "Abrasives are used to smooth wooden objects.", "fol": "", "prediction": ["all x.(Abrasive(x) -> SmoothWoodenObjects(x))", "all x y.((Abrasive(x) & WoodenObject(y)) -> Smooth(x,y))", "all x.(Abrasive(x) -> SmoothWoodenObjects(x))", "(SmoothWoodenObjects(abrasives)", "all x.(Abrasive(x) -> UsedToSmoothWoodenObjects(x))", "all x y z.((Abrasive(x) & WoodenObject(y) & Wooden(z)) -> Smooth(x,y,z))", "all x y.((Abrasive(x) & WoodenObject(y)) -> Smooth(x,y))", "all x y z.((Abrasive(x) & WoodenObject(y) & WoodenObject(z)) -> Smooth(x,y,z))", "all x y.((Abrasive(x) & WoodenObject(y)) -> Smooth(x,y))", "all x y.((Abrasive(x) & WoodenObject(y)) -> UsedToSmooth(x,y))", "all x.(Abrasive(x) -> SmoothWooden(x))", "all x.(Abrasive(x) -> UsedToSmoothWoodenObjects(x))", "all x.(Abrasives(x) -> SmoothWooden(x))", "all x y.((Abrasive(x) & WoodenObject(y)) -> Smoothed(x,y))", "all x.(Abrasives(x) -> SmoothsWoodenObjects(x))", "all x.(Abrasive(x) -> SmoothWoodenObjects(x))"]}
{"id": "eqasc_validation_562", "nl": "Pavement smoothness is a lack of roughness.", "fol": "", "prediction": ["all x.(PavementSmoothness(x) -> LackOfRoughness(x))", "(LackOfRoughness(PavementSmoothness))", "all x y.((Pavement(x) & Smoothness(x)) -> LackOfRoughness(y))", "all x.(PavementSmoothness(x) -> LackOfRoughness(x))", "(LackOfRoughness(Pavement) -> Smoothness(Pavement))", "all x.((PavementSmoothness(x) & LackOfRoughness(x)) -> LackOfRoughness(x))", "all x y.((PavementSmoothness(x) & PavementRoughness(y)) -> LackOf(x,y))", "all x y.((Pavement(x) & Smoothness(y)) -> LackOfRoughness(x,y))", "all x.(PavementSmoothness(x) -> LackOfRoughness(x))", "all x.(PavementSmoothness(x) -> LackOfRoughness(x))", "all x.((PavementSmoothness(x) & LackOfRoughness(x)) -> Smoothness(x))", "all x.(PaveementSmoothness(x) -> LackOfRoughness(x))", "all x y.((Pavement(x) & Smoothness(x)) -> LackOfRoughness(y))", "all x.(PavementSmoothness(x) -> (LackOfRoughness(x)))", "all x.(PaveementSmoothness(x) -> LackOfRoughness(x))", "exists x.(PavementShapedness(x) & -Roughness(x))"]}
{"id": "eqasc_validation_563", "nl": "sandpaper is used to remove roughness", "fol": "", "prediction": ["all x.(Sandpaper(x) -> RemovesRoughness(x))", "all x y.((Sandpaper(x) & Roughness(y)) -> Removes(x,y))", "all x y z.((Sandpaper(x) & Roughness(y) & Sandpaper(z)) -> Removes(x,y,z))", "all x.(Sandpaper(x) -> RemovesRoughness(x))", "(RemovesRoughnessWithSandpaper(sandpaper))", "all x y.((Sandpaper(x) & Roughness(y)) -> Removes(x,y))", "(RoughnessRemoval(sandpaper) & Sandpaper(sandpaper) & RemovesRoughness(sandpaper,roughness))", "all x.((Sandpaper(x) & Roughness(x)) -> Removes(x,Roughness))", "all x y z.((Sandpaper(x) & Roughness(y) & Sandpaper(z) & Removes(x,y,z)) -> Removes(x,y))", "(all x.(Sandpaper(x) -> RemovesRoughness(x)))", "all x.(Sandpaper(x) -> RemovesRoughness(x))", "all x.(Sandpaper(x) -> RemoveRoughness(x))", "all x y.((Sandpaper(x) & Roughness(y)) -> Removes(x,y))", "all x.(Sandpaper(x) -> UsedToRemoveRoughness(x))", "all x y.((Sandpaper(x) & Roughness(y)) -> Removes(x,y))", "all x.(Sandpaper(x) -> RemovesRoughness(x))"]}
{"id": "eqasc_validation_564", "nl": "For the casual look, try using a wooden picnic table.", "fol": "", "prediction": ["all x.((PicnicTable(x) & CasualLook(x)) -> UsesWooden(x))", "all x.((CafefulLook(x) & UsesWoodenPicnicTable(x)) -> CasualLook(x))", "(CafefulLook(x) -> UsesWoodenPicnicTable(x))", "all x y.((CafefulLook(x) & WoodenPicnicTable(y)) -> Uses(x,y))", "(CasualLook) -> UsesWoodenPicnicTable(x))", "-(CafefulLook(x) & UsesWoodenPicnicTable(x))", "all x.((PicnicTable(x) & CasualLook(x)) -> UsesWooden(x))", "(CafefulLook(x) -> UsesWoodenPicnicTable(x))", "all x.((CafefulLook(x) & UsesWoodenPicnicTable(x)) -> Casual(x))", "for casual look, try using wooden picnictable.", "all x.(CafefulLook(x) -> UsesWoodenPicnicTable(x))", "all x y.((CafefulLook(x) & WoodenPicnicTable(y)) -> Uses(x,y))", "(CasualLook) -> UsesWoodenPicnicTable(x))", "all x.((PicnicTable(x) & CasualLook(x)) -> UsesWooden(x))", "all x y.((CafefulLook(x) & WoodenPicnicTable(y)) -> Uses(x,y))", "all x.((CafefulLook(x) & UsesWoodenPicnicTable(x)) -> CasualLook(x))"]}
{"id": "eqasc_validation_565", "nl": "Sandpaper can be used to smooth tables.", "fol": "", "prediction": ["all x.(Sandpaper(x) -> SmoothTables(x))", "all x y.((Sandpaper(x) & Table(y)) -> Smooth(x,y))", "all x.(Sandpaper(x) -> SmoothTables(x))", "(Sandpaper(s) & SmoothTables(s))", "all x y.((Sandpaper(x) & Table(y)) -> Smooth(x,y))", "(Sandpaper) & SmoothTables(Sandpaper))", "all x.(Sandpaper(x) -> SmoothTables(x))", "all x y.((Sandpaper(x) & Table(y)) -> Smooth(x,y))", "all x.(Sandpaper(x) -> SmoothTable(x))", "all x.(Sandpaper(x) -> CanBeUsedToSmoothTables(x))", "all x y.((Sandpaper(x) & Table(y)) -> Smooth(x,y))", "all x.(Sandpaper(x) -> Smoothtable(x))", "all x y.((Sandpaper(x) & Table(y)) -> Smoothed(x,y))", "all x y.((Sandpaper(x) & Table(y)) -> Smooths(x,y))", "all x.(Sandpaper(x) -> SmoothTables(x))", "exists x.(Sandpaper(x) & SmoothTable(x))"]}
{"id": "eqasc_validation_566", "nl": "To remove paint, use sandpaper.", "fol": "", "prediction": ["all x.((Paint(x) & Sandpaper(x)) -> Removes(x))", "all x.((Sandpaper(x) & RemovePaint(x)) -> Uses(x,y))", "all x.(RemovePaint(x) -> UseSandpaper(x))", "(RemovePaint(x) & UseSandpaper(x))", "all x y.((Sandpaper(x) & Paint(y)) -> Removes(x,y))", "all x.((Paint(x) & Sandpaper(x)) -> Remove(x))", "all x.((Sandpaper(x) & RemovePaint(x)) -> Uses(x,sandpaper))", "(RemovesPaint(x) -> UsesSandpaper(x))", "all x.(RemovePaint(x) -> UseSandpaper(x))", "(RemovePaint(x) & UseSandpaper(x))", "(UsesSandpaper(x) & RemovesPaint(x))", "all x y.((Sandpaper(x) & Paint(y)) -> Removes(x,y))", "all x y.((Sandpaper(x) & Paint(y) & Remove(x,y)) -> Use(x,y))", "(all x.(Paint(x) -> Remove(x)) & Use(x,Sandpaper))", "all x.(RemovePaint(x) -> UseSandpaper(x))", "all x.((Paint(x) & Sandpaper(x)) -> Remove(x))"]}
{"id": "eqasc_validation_567", "nl": "sandpaper removes paint", "fol": "", "prediction": ["all x.(Sandpaper(x) -> RemovesPaint(x))", "all x y.((Sandpaper(x) & Paint(y)) -> Removes(x,y))", "all x.(Sandpaper(x) -> RemovesPaint(x))", "all x y z.((Sandpaper(x) & Paint(y) & Paint(z)) -> Removes(x,y,z))", "all x y.((Sandpaper(x) & Paint(y)) -> Removes(x,y))", "(RemovesPaint(sandpaper))", "all x.((Sandpaper(x) & Paint(y)) -> Removes(x,y))", "(RemovesPaint(sandpaper,paint) & Sandpaper(sandpaper,paint))", "all x.(Sandpaper(x) -> RemovesPaint(x))", "all x y.((Sandpaper(x) & Paint(y)) -> Removes(x,y))", "(RemovesPaint(sandpaper))", "all x y z.((Sandpaper(x) & Paint(y) & Paint(z)) -> Removes(x,y,z))", "all x.(Sandpaper(x) -> RemovesPaint(x))", "all x y.((Sandpaper(x) & Paint(y)) -> Removes(x,y))", "all x.(Sandpaper(x) -> RemovesPaint(x))", "all x.(Sandpaper(x) -> RemovesPaint(x))"]}
{"id": "eqasc_validation_568", "nl": "All objects, even wooden tables, are made up of molecules which vibrate to create their mass.", "fol": "", "prediction": ["all x.((Object(x) & WoodenTable(x)) -> MadeUpOfMolecules(x))", "all x y.((Object(x) & WoodenTable(y)) -> (MadeUpOfMolecules(x,y) & VibrateToCreateMass(x,y)))", "all x.((Object(x) & WoodenTable(x)) -> (MadeUpOfMolecules(x) & VibrateToCreateMass(x)))", "all x y z.((Object(x) & WoodenTable(y) & Molecule(z)) -> (MadeUpOf(x,z) & VibrateToCreateMass(x,y)))", "(all x.(WoodenTable(x) -> MadeUpOfMolecules(x))", "all x.((Object(x) & WoodenTable(x)) -> MadeUpOfMolecules(x))", "all x.(Object(x) -> (MadeUpOfMolecules(x) & VibrateToCreateMass(x)))", "all x y.((Object(x) & WoodenTable(y)) -> MadeUpOfMolecules(x,y))", "all x.((Object(x) & EvenWoodenTable(x)) -> MadeUpOfMolecules(x))", "all x y.((Object(x) & WoodenTable(y)) -> (MadeUpOfMolecules(x,y) & VibrateToCreateMass(x,y)))", "(all x.(WoodenTable(x) -> MadeUpOfMolecules(x))", "all x.(Object(x) -> (MadeUpOfMolecules(x) & VibrateToCreateMass(x)))", "all x y.((Object(x) & WoodenTable(y)) -> MadeUpOfMolecules(x,y))", "all x y.((Object(x) & EvenWoodenTable(y)) -> MadeUpOfMolecules(x,y))", "all x.((Object(x) & WoodenTable(x)) -> MadeUpOfMolecules(x))", "all x.((Object(x) & EvenWoodenTable(x)) -> MadeUpOfMolecules(x))"]}
{"id": "eqasc_validation_569", "nl": "Sand paper is used to smooth a table", "fol": "", "prediction": ["all x y.((SandPaper(x) & Table(y)) -> Smoothed(x,y))", "all x y z.((SandPaper(x) & Table(y) & Table(z)) -> Smoothed(x,y,z))", "all x.(SandPaper(x) -> SmoothsTable(x))", "all x y.((SandPaper(x) & Table(y)) -> Smooths(x,y))", "(SandPaper(sandpaper) & SmoothsTable(s))", "(SandPaper(s) & SmoothsTable(s) & UsesToSmooth(s))", "all x y z.((SandPaper(x) & Table(y) & Table(z)) -> Smoothed(x,y,z))", "all x.((SandPaper(x) & Table(y)) -> Smoothed(x,y))", "all x.(SandPaper(x) -> SmoothesTable(x))", "all x y.((SandPaper(x) & Table(y)) -> Smoothes(x,y))", "all x y z.((SandPaper(x) & Table(y) & Table(z)) -> Smooths(x,y,z))", "all x.(SandPaper(x) -> SmoothsTable(x))", "all x y z.((SandPaper(x) & Table(y) & Surface(z)) -> Smoothes(x,y,z))", "all x y.((SandPaper(x) & Table(y)) -> SmoothsWith(x,y))", "all x y.((SandPaper(x) & Table(y) & Smooth(x,y)) -> UsedToSmooth(x,y))", "all x.(SandPaper(x) -> SmoothesTable(x))"]}
{"id": "eqasc_validation_570", "nl": "Scrap wood can be used for cheap wooden bins.", "fol": "", "prediction": ["all x.(ScrapWood(x) -> UsedForBuyWoodens(x))", "all x y.((ScrapWood(x) & WoodenBin(y)) -> UsedFor(x,y))", "all x.(ScrapWood(x) -> UsedForBenches(x))", "all x y.((ScrapWood(x) & WoodenBin(y)) -> UsedFor(x,y))", "all x.((ScrapWood(x) & CheapWoodenBin(x)) -> UsedFor(x,y))", "all x y z.((ScrapWood(x) & WoodenBin(y) & WoodenBin(z)) -> UsedFor(x,y,z))", "all x.(ScrapWood(x) -> UsedForBuiltWoodens(x))", "all x.((ScrapWood(x) & UsedFor(x,ChocolateWoodens)) -> UsedFor(x,ChocolateWoodens))", "all x y.((ScrapWood(x) & WoodenBin(y)) -> CanBeUsedFor(x,y))", "all x.(ScrapWood(x) -> CanBeUsedForBuiltWoodens(x))", "all x.(ScrapWood(x) -> UsedForBins(x))", "all x y.((ScrapWood(x) & WoodenBen(y)) -> UsedFor(x,y))", "(UsedForBins(scrapWood))", "all x.(ScrapWood(x) -> UsedForCheapWoodenBins(x))", "all x y.((ScrapWood(x) & WoodenBin(y)) -> CanBeUsedFor(x,y))", "exists x.(ScrapWood(x) & UsedFor(x,cheapWoodenBins))"]}
{"id": "eqasc_validation_571", "nl": "Sandpaper is used to smooth objects made of wood.", "fol": "", "prediction": ["all x.(Sandpaper(x) -> SmoothsWood(x))", "all x y.((Sandpaper(x) & Wood(y)) -> SmoothObjects(x,y))", "all x.(Sandpaper(x) -> SmoothObjects(x))", "all x.(Sandpaper(x) -> (UsedToSmoothObjects(x) & MadeOfWood(x)))", "all x y.((Sandpaper(x) & Wood(y)) -> SmoothObject(x,y))", "(Sandpaper(s) & SmoothObjects(s) & MadeOfWood(s))", "(Sandpaper) & SmoothsWood(Sandpaper))", "all x y z.((Sandpaper(x) & Wood(y) & Object(z)) -> Smooth(x,y,z))", "all x.(Sandpaper(x) -> SmoothsWood(x))", "all x y.((Sandpaper(x) & Wood(y)) -> Smooth(x,y))", "all x.(Sandpaper(x) -> (SmoothObjects(x) & MadeOfWood(x)))", "all x.(Sandpaper(x) -> (UsedToSmoothObjects(x) & MadeOfWood(x)))", "(Sandpaper) -> SmoothsWood(s))", "all x y.((Sandpaper(x) & Wood(y)) -> SmoothObjects(x,y))", "all x.(Sandpaper(x) -> SmoothObjects(x))", "all x y.((Sandpaper(x) & Wood(y)) -> Smooth(x,y))"]}
{"id": "eqasc_validation_572", "nl": "Drum sticks are of wooden cane.", "fol": "", "prediction": ["all x.(DrumStick(x) -> WoodenCane(x))", "(all x.(DrumStick(x) -> WoodenCane(x)))", "all x y.((DrumStick(x) & WoodenCane(y)) -> MadeOf(x,y))", "all x.(DrumStick(x) -> WoodenCane(x))", "(WoodenCane(drums) & MadeOf(drumSticks,WoodenCane))", "all x.(drumstick(x) -> WoodenCane(x))", "all x y.((DrumStick(x) & WoodenCane(y)) -> MadeOf(x,y))", "all x.(DrumStick(x) -> WoodenCane(x))", "(all x.(DrumStick(x) -> WoodenCane(x)))", "all x.(drumstick(x) -> WoodenCane(x))", "exists x.(drumstick(x) & WoodenCane(x))", "all x.(DrumStick(x) -> WoodenCane(x))", "all x y.((DrumStick(x) & WoodenCane(y)) -> MadeOf(x,y))", "all x.(DrumStick(x) -> WoodenCane(x))", "all x.(DrumStick(x) -> WoodenCane(x))", "all x.(DrumStick(x) -> WoodenCane(x))"]}
{"id": "eqasc_validation_573", "nl": "sandpaper is used to smooth drum sticks", "fol": "", "prediction": ["all x y.((Sandpaper(x) & DrumStick(y)) -> Smooth(x,y))", "all x.(Sandpaper(x) -> SmoothDrumSticks(x))", "all x y z.((Sandpaper(x) & DrumStick(y) & Sandpaper(z)) -> Smooth(x,y,z))", "(Sandpaper(s) & SmoothDrumSticks(s))", "(SandpaperSmoothDrumSticks(sandpaper) & SmoothDrumSticks(sandpaper,sandpaper))", "all x y.((Sandpaper(x) & DrumStick(y)) -> Smooth(x,y))", "all x.((Sandpaper(x) & SmoothDrumSticks(x)) -> SandpaperUsedToSmoothDrumSticks(x))", "all x y z.((Sandpaper(x) & DrumStick(y) & DrumStick(z)) -> Smooth(x,y,z))", "all x.(Sandpaper(x) -> SmoothDrumSticks(x))", "all x y.((Sandpaper(x) & DrumStick(y) & Smooth(x,y)) -> SandpaperUsedToSmooth(x,y))", "all x.(Sandpaper(x) -> SmoothsDrumSticks(x))", "(SandpaperSandpaperSmoothDrumSticks(sandpaper))", "all x y z.((Sandpaper(x) & DrumStick(y) & DrumStick(z)) -> Smooth(x,y,z))", "all x y.((Sandpaper(x) & DrumStick(y) & Smooth(x,y)) -> SandpaperUsedToSmooth(x,y))", "all x.((Sandpaper(x) & SmoothDrumSticks(x)) -> Sandpaper(x))", "all x.(Sandpaper(x) -> SmoothDrumSticks(x))"]}
{"id": "eqasc_validation_574", "nl": "Coarse grit sandpaper works well.", "fol": "", "prediction": ["all x.(CoarseGritSandpaper(x) -> WorksWell(x))", "all x y.((CoarseGritSandpaper(x) & Sandpaper(y)) -> WorksWell(x))", "all x.((CoarseGritSandpaper(x) & WorksWell(x)) -> WorksWell(x))", "(WorksWellCoarseGritSandpaper(CoarseGrit))", "all x.(CoarseGritSandpaper(x) -> WorksWell(x))", "all x y.((CoarseGritSandpaper(x) & Sandpaper(y)) -> WorksWell(x,y))", "all x.(CoarseGritSandpaper(x) -> WorksWell(x))", "all x.((CoarseGritSandpaper(x) & WorksWell(x)) -> WorksWell(x))", "all x y.((CoarseGritSandpaper(x) & Sandpaper(y)) -> WorksWell(x,y))", "all x.(CoarseGritSandpaper(x) -> WorksWell(x))", "all x.((CoarseGritSandpaper(x) & WorksWell(x)) -> WorksWell(x))", "all x y.((CoarseGritSandpaper(x) & Sandpaper(y)) -> WorksWell(x))", "all x.(CoarseGritSandpaper(x) -> WorksWell(x))", "all x y.((CoarseGritSandpaper(x) & Sandpaper(y)) -> WorksWell(x,y))", "All x.(CoarseGritSandPaper(x) -> WorksWell(x))", "exists x.(CoarseGritSandpaper(x) & WorksWell(x))"]}
{"id": "eqasc_validation_575", "nl": "coarse grit is used to smooth wooden objects", "fol": "", "prediction": ["all x y.((Grain(x) & WoodenObject(y)) -> Smooth(x,y))", "all x.(CoarseGrit(x) -> SmoothsWoodenObjects(x))", "all x y z.((Grain(x) & WoodenObject(y) & WoodenObject(z)) -> Smooth(x,y,z))", "(GrooveGrit(Grooves) & SmoothsWoodenObjects(Grooves))", "all x y.((Grain(x) & WoodenObject(y)) -> Smoothed(x,y))", "all x.(CoarseGrit(x) -> SmoothWoodenObjects(x))", "(CoarseGrit(grit) & SmoothWoodenObjects(grit))", "all x y z.((Grain(x) & WoodenObject(y) & GrossGrit(z)) -> Smoothed(x,y,z))", "all x.(Grain(x) -> SmoothWoodenObjects(x))", "all x y.((CoarseGrit(x) & WoodenObject(y)) -> Smoothed(x,y))", "all x.(GrooveGlitter(x) -> SmoothWoodenObjects(x))", "all x.((Grain(x) & UsedToSmoothWoodenObjects(x)) -> GrossGrit(x))", "all x.(CoarseGrit(x) -> SmoothsWoodenObjects(x))", "all x y.((Grain(x) & WoodenObject(y)) -> Smooth(x,y))", "all x y z.((Grain(x) & WoodenObject(y) & WoodenObject(z)) -> Smoothed(x,y,z))", "all x.(GrainCoarse(x) -> SmoothWoodenObjects(x))"]}
{"id": "eqasc_validation_576", "nl": "Children can easily make log cabins and other structures from the tiny wooden logs.", "fol": "", "prediction": ["all x y.((Child(x) & TinyWoodenLog(y)) -> (MakesLogCabins(x,y) & MakesStructures(x,y)))", "all x y z.((Child(x) & LogCabin(y) & WoodenLog(z)) -> (EasilyMakesFrom(x,y,z) & From(x,y,z)))", "all x.((Child(x) & TinyWoodenLogs(x)) -> (MakesLogCabins(x) | MakesStructures(x)))", "all x.(Child(x) -> (MakesLogCabins(x) & MakesStructuresFromTinyWoodenLogs(x)))", "(all x.(TinyWoodenLog(x) -> MakesLogCabins(x)) & all y.(TinyWoodenLog(y) -> MakesStructuresFrom(x,y)))", "all x y z.((Child(x) & LogCabin(y) & WoodenLog(z)) -> (MakesFrom(x,y,z) & MakesFrom(x,y,z)))", "all x y.((Child(x) & TinyWoodenLog(y)) -> (MakesLogCabins(x,y) & MakesStructuresFrom(x,y)))", "all x y.((Child(x) & TinyWoodenLog(y)) -> (MakesLogCabins(x,y) & MakesStructuresFrom(x,y)))", "all x.((Child(x) & TinyWoodenLogs(x)) -> (MakesLogCabins(x) & MakesStructures(x)))", "all x.(Child(x) -> (MakesLogCabins(x) & MakesStructures(x)))", "all x.(Child(x) -> (MakeLogCabins(x) & MakeStructuresFromTinyWoodenLogs(x)))", "all x.((Child(x) & TinyWoodenLogs(x)) -> MakesLogCabinsAndStructuresFrom(x,y))", "all x y z.((Child(x) & LogCabin(y) & WoodenLog(z)) -> (EasilyMakesFrom(x,y,z) & From(x,y,z)))", "all x y.((Child(x) & TinyWoodenLog(y)) -> (EasilyMakesLogCabins(x,y) & MakesStructuresFrom(x,y)))", "all x y.((Child(x) & TinyWoodenLog(y)) -> (EasilyMakesLogCabins(x,y) & MakesStructuresFrom(x,y)))", "all x y z.((Child(x) & LogBath(y) & WoodenLog(z)) -> (EasilyMakesFrom(x,y,z) & MakesFrom(x,y,z)))"]}
{"id": "eqasc_validation_577", "nl": "Sandpaper is used to smooth log cabins.", "fol": "", "prediction": ["all x.(Sandpaper(x) -> SmoothLogCabins(x))", "all x y.((Sandpaper(x) & LogCabin(y)) -> Smooth(x,y))", "all x.(Sandpaper(x) -> SmoothLogCabins(x))", "(Sandpaper(s) & SmoothLogCabins(s))", "all x y z.((Sandpaper(x) & LogCabin(y) & LogCabin(z)) -> Smooth(x,y,z))", "(SandpaperSmoothLogCabins(sandpaper))", "all x y.((Sandpaper(x) & LogCabin(y)) -> Smooth(x,y))", "all x.(Sandpaper(x) -> SmoothLogCabins(x))", "all x y.((Sandpaper(x) & LogCabin(y)) -> Smoothed(x,y))", "all x.(Sandpaper(x) -> SmoothsLogCabins(x))", "all x.(Sandpaper(x) -> SmoothLogCabins(x))", "all x y.((Sandpaper(x) & LogCabin(y)) -> Smooth(x,y))", "all x y.((Sandpaper(x) & LogCabin(y)) -> Smooths(x,y))", "all x.(Sandpaper(x) -> SmoothLogCabins(x))", "all x.(Sandpaper(x) -> SmoothsLogCabins(x))", "All x.(Sandpaper(x) -> SmoothLogBaths(x))"]}
{"id": "eqasc_validation_578", "nl": "Traditionally, wooden objects are used in decoupage.", "fol": "", "prediction": ["all x.((WoodenObject(x) & Decoupage(x)) -> UsedIn(x,y))", "all x y.((WoodenObject(x) & Decoupage(y)) -> UsedIn(x,y))", "all x.((Wooden(x) & Decoupage(x)) -> UsedIn(x,y))", "all x.((WoodenObject(x) & Decoupage(x)) -> UsedIn(x,y))", "all x y z.((WoodenObject(x) & Decoupage(y) & Traditional(z)) -> UsedIn(x,y,z))", "all x y.((WoodenObject(x) & Decoupage(y)) -> UsedIn(x,y))", "all x y.((Wooden(x) & Decoupage(y)) -> UsedIn(x,y))", "(all x.((WoodenObject(x) & Decoupage(x)) -> UsedIn(x,y)))", "all x.((Wooden(x) & Decoupage(x)) -> UsedIn(x,y))", "all x.((WoodenObject(x) & Decoupage(x)) -> UsedIn(x,y))", "all x y.((WoodenObject(x) & Decoupage(y)) -> UsedIn(x,y))", "all x.(WoodenObject(x) -> UsedInDecoupage(x))", "all x.((WoodenObject(x) & UsedInDecoupage(x)) -> Traditional(x))", "(all x.(Wooden(x) -> UsedInDecoupage(x)))", "all x y.((WoodenObject(x) & Decoupage(y)) -> UsedIn(x,y))", "all x.(WoodenObject(x) -> UsedInDecoupage(x))"]}
{"id": "eqasc_validation_579", "nl": "sandpaper is used to smooth decoupage", "fol": "", "prediction": ["all x.(Sandpaper(x) -> SmoothDecoupage(x))", "all x y.((Sandpaper(x) & Sandpaper(y)) -> SmoothDecoupage(x,y))", "all x y z.((Sandpaper(x) & Sandpaper(y) & SmoothDecoupage(z)) -> UsedToDecoupage(x,y,z))", "all x.((Sandpaper(x) & SmoothDecoupage(x)) -> SandpaperUsedToDecoupage(x))", "(Sandpaper(s) & SmoothDecoupage(s))", "all x.(Sandpaper(x) -> SmoothDecoupage(x))", "(SandpaperSandpaper(s) & SmoothDecoupage(s) & UsedToDecoupage(s))", "all x y.((Sandpaper(x) & Sandpaper(y)) -> SmoothDecoupage(x,y))", "all x y.((Sandpaper(x) & SmoothDecoupage(y)) -> UsedToDecoupage(x,y))", "all x y z.((Sandpaper(x) & Sandpaper(y) & Decoupage(z)) -> SmoothDecoupage(x,y,z))", "all x.((Sandpaper(x) & SmoothDecoupage(x)) -> UsedToDecoupage(x))", "(Sandpaper(s) & SmoothDecoupage(s))", "all x.(Sandpaper(x) -> SmoothDecoupage(x))", "all x.((Sandpaper(x) & SmoothDecoupage(x)) -> SandpaperUsedToDecoupage(x))", "all x y.((Sandpaper(x) & Sandpaper(y)) -> SmoothDecoupage(x,y))", "all x.(Sandpaper(x) -> SmoothDecoupage(x))"]}
{"id": "eqasc_validation_580", "nl": "propulsion is used for flying by a spacecraft", "fol": "", "prediction": ["all x y z.((Spacecraft(x) & Spacecraft(y) & Propulsion(z)) -> UsedForFlying(z,x))", "all x y.((Spacecraft(x) & Spacecraft(y)) -> UsesForFlying(x,y))", "all x y.((Spacecraft(x) & Spacecraft(y)) -> PropulsionUsedForFlying(x,y))", "all x.((Spacecraft(x) & Spacecraft(y)) -> UsesForFlying(x,y))", "all x y z.((Spacecraft(x) & Spacecraft(y) & Propulsion(z)) -> UsedForFlying(z,x))", "all x.(Spacecraft(x) -> (UsedForFlyingBySpacecraft(x) & Spacecraft(x)))", "all x y z.((Spacecraft(x) & Spacecraft(y) & Propulsion(z) & UsedForFlying(z)) -> Spacecraft(x))", "exists x,y,z,w.(Spacecraft(x) & Spacecraft(y) & Spacecraft(z) & UsesForFlying(x,y,z))", "all x y.((Spacecraft(x) & Spacecraft(y)) -> UsedForFlying(x,y))", "all x.((Spacecraft(x) & Spacecraft(x)) -> UsedForFlyingBy(x,spacecraft))", "all x y.((Spacecraft(x) & Spacecraft(y)) -> (UsedForFlying(x,y) & Spacecraft(y)))", "all x y z.((Spacecraft(x) & Propulsion(y) & Spacecraft(z)) -> UsedForFlyingBy(y,z))", "all x.(Spacecraft(x) -> (UsedForFlyingBy(x,spacecraft) & Spacecraft(x)))", "exists x.(Spacecraft(x) & UsesPropulsionForFlying(x))", "all x y z.((Spacecraft(x) & Spacecraft(y) & Propulsion(z) & UsedForFlying(x,z)) -> Spacecraft(x))", "all x y.((Spacecraft(x) & Spacecraft(y)) -> UsesPropulsionForFlying(x,y))"]}
{"id": "eqasc_validation_581", "nl": "Propulsion means to push forward or drive an object forward.", "fol": "", "prediction": ["all x.(Propulsion(x) -> (PushForward(x) | DriveForward(x)))", "all x y.((Propulsion(x) & Object(y)) -> (PushForward(x,y) | DriveForward(x,y)))", "all x.(Propulsion(x) -> (PushForward(x) | DriveForward(x)))", "all x y z.((Propulsion(x) & Object(y) & (PushForward(z) | DriveForward(z))) -> (Propulsion(x,y) | PushForward(x,z))))", "all x.(Propulsion(x) -> (PutsForward(x) | DrivesForward(x)))", "all x y.((Propulsion(x) & Object(y)) -> (PushForward(x,y) | DriveForward(x,y)))", "all x y.(Propulsion(x) -> (PushForward(x) | DriveForward(x)))", "all x y.(Propulsion(x) -> (PutsForward(x) | DrivesForward(x)))", "all x y z.((Propulsion(x) & (Object(y) | Object(z))) -> (PushForward(x,y) | DriveForward(x,z))))", "all x.(Propulsion(x) -> (PushForward(x) | DriveForward(x)))", "all x.(Propulsion(x) -> (PushForward(x) | DriveForward(x)))", "all x y.(Propulsion(x) -> (PushForward(x,y) | DriveForward(x,y)))", "all x.(Propulsion(x) -> (PressForward(x) | DriveForward(x)))", "all x.(Propulsion(x) -> (Putforward(x) | DriveForward(x)))", "all x.(Propulsion(x) -> (PushForward(x) | DriveForward(x)))", "exists x.(Propulsion(x) & PushForward(x) & DriveForward(x))"]}
{"id": "eqasc_validation_582", "nl": "A push forward is used for flying by a spacecraft.", "fol": "", "prediction": ["all x y.((PushForward(x) & Spacecraft(y)) -> UsedForFlying(x,y))", "all x y.((Spacecraft(x) & PushForward(y)) -> UsedForFlying(x,y))", "all x.(PushForward(x) -> UsedForFlyingBySpacecraft(x))", "all x y z.((PushForward(x) & Spacecraft(y) & Spacecraft(z)) -> UsedForFlying(x,y,z))", "all x y.((PushForward(x) & Spacecraft(y)) -> UsedForFlying(x,y))", "all x.(PushForward(x) -> UsedForFlyingBySpacecraft(x))", "all x y.((Spacecraft(x) & PushForward(y)) -> UsedForFlying(y,x))", "all x y z.((PushForward(x) & Spacecraft(y) & Spacecraft(z)) -> UsedForFlying(x,y,z))", "all x y z.(PushForward(x) -> (UsedForFlying(y) & Spacecraft(z) & Spacecraft(w)))", "all x y.((Spacecraft(x) & PushForward(x) & Spacecraft(y)) -> UsedForFlying(x,y))", "exists x.(PushForward(x) & Spacecraft(x) & UsedForFlying(x))", "all x.(PushForward(x) -> UsedForFlying(x))", "exists x.(PushFlyer(x) & Spacecraft(x) & UsedForFlying(x))", "all x y.((PushForward(x) & Spacecraft(y)) -> UsedForFlying(x,y))", "exists x.(PushForward(x) & Spacecraft(x) & UsedForFlying(x))", "all x.(PushForward(x) -> UsedForFlyingBySpacecraft(x))"]}
{"id": "eqasc_validation_583", "nl": "Earth-orbiting spacecraft are called satellites.", "fol": "", "prediction": ["all x.((EarthOrbitingSpacecraft(x) & Satellite(x)) -> Orbiting(x))", "all x.((EarthOrbitingSpacecraft(x) & Satellite(x)) -> KnownAs(x))", "all x.(EarthOrbitingSpacecraft(x) -> Satellite(x))", "all x y.((EarthOrbitingSpacecraft(x) & Satellite(y)) -> Calls(x,y))", "(all x.((EarthOrbitingSpacecraft(x) & Satellite(x)) -> Orbiting(x)))", "all x.((EarthOrbitingSpacecraft(x) & Satellite(x)) -> Is(x,y))", "all x.(EarthOrbitingSpacecraft(x) -> Satellite(x))", "all x.((EarthOrbitingSpacecraft(x) & Satellite(x)) -> Orbiting(x))", "all x y.((EarthOrbitingSpacecraft(x) & Satellite(y)) -> (Satellite(x) & Orbiting(y)))", "all x y.((EarthOrbitingSpacecraft(x) & Satellite(y)) -> Named(x,y))", "all x.((EarthOrbitingSatellite(x) & Satellite(x)) -> Orbiting(x))", "all x.(EarthOrbitingSpacecraft(x) -> Satellite(x))", "all x.((EarthOrbitingSpacecraft(x) & Satellite(x)) -> Calls(x))", "all x.((EarthOrbitingSpacecraft(x) & Satellite(x)) -> KnownAs(x,y))", "all x.(EarthOrbitingSpacecraft(x) -> Satellite(x))", "exists x.(EarthOrbitingSpacecraft(x) & Satellite(x))"]}
{"id": "eqasc_validation_584", "nl": "Propulsion is used for flying satellites.", "fol": "", "prediction": ["all x.(Propulsion(x) -> UsedForFlyingSatellites(x))", "all x y.((Propulsion(x) & Satellite(y)) -> UsedFor(x,y))", "all x.(Propulsion(x) -> UsedForFlyingSatellites(x))", "all x y.((Propulsion(x) & Satellite(y)) -> UsedForFlying(x,y))", "all x y z.((Propulsion(x) & Satellite(y) & Satellite(z)) -> UsedFor(x,y,z))", "(FlyingSatellites(propulsion) -> UsedFor(propulsion))", "all x.(Propulsion(x) -> UsedForFlyingSatellites(x))", "(FlyingSatellites(Propulsion) | FlyingSatellites(Propulsion))", "all x y.((Propulsion(x) & Satellite(y)) -> UsedFor(x,y))", "all x.(Propulsion(x) -> UsedForFlyingSatellites(x))", "all x y.((Propulsion(x) & Satellite(y)) -> UsedForFlying(x,y))", "all x.(Propulsion(x) -> UsedForFlyingSatellites(x))", "exists x.(Propulsion(x) & FliesSatellites(x))", "all x y.((Propulsion(x) & Satellite(y)) -> UsedForFlying(x,y))", "all x.(Propulsion(x) -> UsedForFlyingSatellites(x))", "all x.(Propulsion(x) -> UsedForFlyingSatellites(x))"]}
{"id": "eqasc_validation_585", "nl": "And thrust is generated by the propulsion system of the aircraft.", "fol": "", "prediction": ["(all x.(Thrust(x) -> GeneratesByPropulsionSystem(x)))", "all x y.((Aircraft(x) & PropellerSystem(y)) -> GeneratesThrust(x,y))", "all x y z.((Aircraft(x) & PropellerSystem(y) & Thrust(z)) -> Generates(x,y,z))", "(all x y.((Aircraft(x) & PropulsionSystem(y)) -> GeneratesThrust(x,y))", "(all x.(Thrush(x) -> GeneratesByPropulsionSystem(x)))", "-(PropulsionSystem(x) & Aircraft(x)) -> GeneratesThrust(x))", "Und thrustGeneratesByPropulsionSystemOfAircraft(x)", "& thrustGeneratesPropulsionSystem(x)", "all x.(Thrust(x) -> GeneratesByPropulsionSystem(x))", "(all x.(Turbine(x) -> GeneratesByPropulsionSystem(x)))", "(GainingThrustByPropulsionSystem(a) & Aircraft(b))", "And thrustGeneratesPropulsionSystemOfAircraft(x)", "all x y.((Aircraft(x) & PropulsionSystem(y)) -> GeneratesThrust(x,y))", "-(PropulsionSystem(a) & GeneratesThrust(b))", "& thrustGeneratedByPropulsionSystemOfAircraft(x)", "& thrustGeneratesByPropulsionSystem(x)"]}
{"id": "eqasc_validation_586", "nl": "A thrusting energy is used for flying", "fol": "", "prediction": ["all x.(ThrustingEnergy(x) -> UsedForFlying(x))", "all x y.((ThrustingEnergy(x) & FlyingEnergy(y)) -> UsedFor(x,y))", "all x y z.((ThrustingEnergy(x) & Flying(y) & Flying(z)) -> UsedFor(x,y,z))", "all x.(ThrustingEnergy(x) -> UsedForFlying(x))", "all x y.((ThrustingEnergy(x) & FlyingEnergy(y)) -> UsedForFlying(x,y))", "all x y z.((ThreatingEnergy(x) & Flying(y) & ThrustingEnergy(z)) -> UsedFor(x,y,z))", "all x.(ThrustingEnergy(x) -> UsedForFlying(x))", "all x y.((ThreatingEnergy(x) & Flying(y)) -> UsedFor(x,y))", "all x y.((ThrustingEnergy(x) & FlyingEnergy(y)) -> UsedFor(x,y))", "all x.(ThrustingEnergy(x) -> UsedForFlying(x))", "all x y.((ThrushingEnergy(x) & Flying(y)) -> UsedFor(x,y))", "all x.(ThreatingEnergy(x) -> UsedForFlying(x))", "all x.(ThrustingEnergy(x) -> UsedForFlying(x))", "all x.(ThrushingEnergy(x) -> UsedForFlying(x))", "exists x.(ThrustingEnergy(x) & UsedForFlying(x))", "exists x.(ThrustingEnergy(x) & UsedForFlying(x))"]}
{"id": "eqasc_validation_587", "nl": "Apollo 13 spacecraft is launched.", "fol": "", "prediction": ["all x.((Spacecraft(x) & Apollo13(x)) -> Launched(x))", "all x.(Apollo13Spacecraft(x) -> Launched(x))", "all x y.((Spacecraft(x) & Apollo13(y)) -> Launched(x,y))", "(Spacecraft(Apollo13) & Launched(Apollo13))", "Apollo 13 Spacecraft Launched.", "all x.((Spacecraft(x) & Apollo13(x)) -> Launched(x))", "the Apollo 13 spacecraft is launched.", "all x.(Spacecraft(x) -> Launched(x))", "(Spacecraft(Apollo13) & Launched(Apollo13))", "Apollo 13 Spacecraft Launched.", "all x y.((Spacecraft(x) & Apollo13(y)) -> Launched(x,y))", "(LaunchedApollo(apollo) 13)", "all x.(Apollo13Spacecraft(x) -> Launched(x))", "All x.(Spacecraft(x,Apollo13) -> Launched(x))", "Apollo 13 spacecraft launched.", "All x.(Apollo13Spacecraft(x) -> Launched(x))"]}
{"id": "eqasc_validation_588", "nl": "propulsion is used for flying by Apollo 13", "fol": "", "prediction": ["all x y.((Propulsion(x) & Apollo13(y)) -> UsedForFlying(x,y))", "all x y z.((Propulsion(x) & Apollo13(y) & Apollo13(z)) -> UsedForFlying(x,y,z))", "all x.((Propulsion(x) & Apollo13(x)) -> UsedForFlying(x))", "(UsedForFlyingByApollo13(a) & Apollo13(b))", "all x y.((Propulsion(x) & Apollo13(y)) -> UsedForFlying(x,y))", "(UsedForFlyingByApollo13(a) & Apollo13(b))", "all x.((Propulsion(x) & Apollo13(x)) -> UsedForFlying(x))", "all x y z.((Propulsion(x) & Apollo13(y) & Apollo13(z)) -> UsedForFlying(x,y,z))", "(FlyingPropulsion(Apollo13) & Apollo13(Apollo13))", "all x.(Propulsion(x) -> UsedForFlyingByApollo13(x))", "(UsedForFlyingByApollo(a) & Apollo13(b))", "all x y z.((Propulsion(x) & Apollo13(y) & Apollo13(z) & UsedForFlying(x,y,z)) -> Apollo13(y))", "all x.(Apollo13(x) -> UsedForFlying(x))", "all x y.((Propulsion(x) & Apollo13(y)) -> UsedForFlying(x,y))", "all x.((Propulsion(x) & Apollo13(x)) -> UsedForFlying(x))", "(UsedForFlyingByApollo13(a) & Apollo13(b))"]}
{"id": "eqasc_validation_589", "nl": "All rockets operate on the same basic principles of propulsion.", "fol": "", "prediction": ["all x.(Raket(x) -> OperatesOnBasicPropulsionPrinciples(x))", "all x.(Raket(x) -> OperatesOnSameBasicPropulsionPrinciples(x))", "all x y.((Raket(x) & BasicPropulsionPrinciples(y)) -> OperatesOn(x,y))", "all x.(Rainforest(x) -> OperatesOnBasicPropulsionPrinciples(x))", "all x.(Rocket(x) -> OperatesOnBasicPropulsionPrinciples(x))", "(exists x.(Raket(x) & OperatesOnBasicPropulsionPrinciples(x)))", "all x y.((Rocket(x) & BasicPropulsionPrinciples(y)) -> OperatesOn(x,y))", "(exists x.(Rocket(x) & BasicPropulsionPrinciples(x)) & OperatesOn(x,y))", "all x y.((Raket(x) & PropulsionPrinciples(y)) -> OperatesOn(x,y))", "all x.(Rocket(x) -> OperatesOnSameBasicPropulsionPrinciples(x))", "all x.(Rainforest(x) -> OperatesOnSamePropulsionPrinciples(x))", "all x.(Raket(x) -> OperatesOnBasicPropulsion(x))", "all x y.((Rocket(x) & BasicPropulsionPrinciples(y)) -> OperatesOn(x,y))", "all x.(Rocket(x) -> OperatesOnSamePropulsionPrinciples(x))", "all x.(Rocket(x) -> OperatesOnBasicPropulsionPrinciples(x))", "all x.(Raket(x) -> OperatesOnSameBasicPropulsionPrinciples(x))"]}
{"id": "eqasc_validation_590", "nl": "spacecrafts can fly with rockets", "fol": "", "prediction": ["all x.(Spacecraft(x) -> CanFlyWithRockets(x))", "all x y.((Spacecraft(x) & Rocket(y)) -> CanFlyWith(x,y))", "all x y z.((Spacecraft(x) & Rocket(y) & Spacecraft(z)) -> CanFlyWith(x,y,z))", "all x.(Spacecraft(x) -> (CanFlyWithRockets(x)))", "all x y.((Spacecraft(x) & Rocket(y)) -> CanFlyWith(x,y))", "all x y z.((Spacecraft(x) & Rocket(y) & Spacecraft(z)) -> CanFlyWith(x,y,z))", "all x.(Spacecraft(x) -> CanFlyWithRockets(x))", "all x.((Spacecraft(x) & Spacecraft(x)) -> CanFlyWithRockets(x))", "all x y z.((Spacecraft(x) & Rocket(y) & Rocket(z)) -> CanFlyWith(x,y,z))", "(all x.(Spacecraft(x) -> CanFlyWithRockets(x)))", "all x.(Spacecraft(x) -> (CanFlyWithRockets(x)))", "all x y.((Spacecraft(x) & Rocket(y)) -> CanFlyWith(x,y))", "exists x.(Spacecraft(x) & Spacecraft(x) & CanFlyWithRockets(x))", "all x.(Spacecraft(x) -> CanFlyWithRakets(x))", "all x y.((Spacecraft(x) & Rocket(y)) -> CanFlyWith(x,y))", "all x.(Spacecraft(x) -> (CanFlyWithRakets(x)))"]}
{"id": "eqasc_validation_591", "nl": "When Apollo 12 took off, the spacecraft was hit by lightning.", "fol": "", "prediction": ["all x.((Apollo12(x) & TakesOff(x)) -> HitByLightning(x))", "all x.((Spacecraft(x) & Apollo12(x)) -> HitByLightning(x))", "all x y.((Apollo12(x) & Apollo12(y)) -> HitByLightning(x,y))", "the spacecraft was hit by lightning when Apollo 12 took off.", "-(Apollo12TakesOff(Apollo12) & SpacecraftHitByLightning(Apollo12))", "all x.((Spacecraft(x) & Apollo12TakesOff(x)) -> HitByLightning(x))", "all x y z.((Apollo(x) & Apollo12(y) & Lightning(z)) -> HitBy(x,y,z))", "all x.((Apollo12(x) & TakesOff(x)) -> HitByLightning(x))", "all x y.((Apollo12(x) & Apollo12(y)) -> HitByLightning(x,y))", "(Lightning HitsSpacecraft(Apollo12,Apollo12))", "all x.(Apollo12(x) -> HitByLightning(x))", "All x y.((Spacecraft(x) & Apollo12(y)) -> HitByLightning(x,y))", "(Lightning HitsSpacecraft(Apollo12) & Apollo12TakesOff(Apollo12))", "(Lightning(Apollo12) & TakesOff(Apollo12))", "all x y.((Apollo12(x) & Spacecraft(y)) -> HitByLightning(y))", "all x.((Apollo12(x) & TakesOff(x)) -> HitByLightning(x))"]}
{"id": "eqasc_validation_592", "nl": "propulsion is used for flying by Apollo 12", "fol": "", "prediction": ["all x y.((Propulsion(x) & Apollo12(y)) -> UsedForFlying(x,y))", "all x y z.((Propulsion(x) & Apollo12(y) & Apollo12(z)) -> UsedForFlying(x,y,z))", "all x.((Propulsion(x) & Apollo12(x)) -> UsedForFlying(x))", "(UsedForFlyingByApollo12(a) & Apollo12(b))", "all x y.((Propulsion(x) & Apollo12(y)) -> UsedForFlying(x,y))", "all x.(Apollo12(x) -> UsedForFlying(x))", "(UsedForFlyingByApollo12(a) & Apollo12(b))", "all x.((Propulsion(x) & Apollo12(x)) -> UsedForFlying(x))", "all x y z.((Propulsion(x) & Apollo12(y) & Apollo12(z)) -> UsedForFlying(x,y,z))", "all x.(Propulsion(x) -> UsedForFlyingByApollo12(x))", "(FlyingPropulsion(Apollo12) & Apollo12(Apollo12))", "(UsedForFlyingByApollo(a) & Apollo12(b) & Apollo12(c))", "(UsedForFlyingByApollo12(a) & Apollo12(b))", "all x y.((Propulsion(x) & Apollo12(y)) -> UsedForFlying(x,y))", "all x y z.((Propulsion(x) & Apollo12(y) & Apollo12(z)) -> UsedForFlying(x,y,z))", "all x.((Propulsion(x) & Apollo12(x)) -> UsedForFlying(x))"]}
{"id": "eqasc_validation_593", "nl": "Propulsion was used for flying Apollo 13.", "fol": "", "prediction": ["all x.(Propulsion(x) -> UsedForFlyingApollo13(x))", "all x y.((Propulsion(x) & Apollo13(y)) -> UsedForFlying(x,y))", "all x y z.((Propulsion(x) & Apollo13(y) & Apollo13(z)) -> UsedForFlying(x,y,z))", "(UsedForFlyingApollo13(Propulsion) & Apollo13(Propulsion))", "Apollo 13 (Propulsion) & UsedForFlying(Propulsion))", "(Propulsion(Propulsion) & Apollo13(Propulsion))", "all x.(Propulsion(x) -> UsedForFlyingApollo13(x))", "(FlyingApollo13(Propulsion) -> UsedFor(Propulsion,Apollo13))", "all x y.((Propulsion(x) & Apollo13(y)) -> UsedForFlying(x,y))", "(UsedForFlyingApollo13.Propulsion(Propulsion) & Apollo13(Propulsion))", "all x y z.((Propulsion(x) & Apollo13(y) & Apollo13(z)) -> UsedForFlying(x,y,z))", "all x.(Propulsion(x) -> UsedForFlyingApollo13(x))", "all x y.((Propulsion(x) & Apollo13(y)) -> UsedForFlying(x,y))", "all x.(Propulsion(x) -> UsedForFlyingApollo(x))", "All x.(Propulsion(x) -> UsedForFlyingApollo13(x))", "All x.(Propulsion(x) -> UsedForFlyingApollo(x))"]}
{"id": "eqasc_validation_594", "nl": "Butter is a fat that is a solid at room temperature.", "fol": "", "prediction": ["all x.(Butter(x) -> (Fat(x) & SolidAtRoomTemperature(x)))", "(Fat(butter) & SolidAtRoomTemperature(butter))", "all x y.((Butter(x) & Fat(y)) -> (Fat(x,y) & SolidAtRoomTemperature(x)))", "all x.(Butter(x) -> (Fat(x) & SolidAtRoomTemperature(x)))", "all x.(Butter(x) -> (Fat(x) & SolidAtRoomTemperature(x)))", "(Fat(butter) & SolidAtRoomTemperature(butter))", "all x.((Butter(x) & Fat(x) & SolidAtRoomTemperature(x)) -> Butter(x))", "all x y.((Butter(x) & Fat(y)) -> SolidAtRoomTemperature(x,y))", "all x.(Butter(x) -> (Fat(x) & SolidAtRoomTemperature(x)))", "all x y.((Butter(x) & Fat(y)) -> (Fat(x,y) & SolidAtRoomTemperature(x)))", "all x y.(Butter(x) -> (Fat(x) & SolidAtRoomTemperature(x,y)))", "all x.(Butter(x) -> (Fat(x) & SolidAtRoomTemperature(x)))", "all x.(Butter(x) -> (Fat(x) & SolidAtRoomTemperature(x)))", "exists x.(Butter(x) & Fat(x) & SolidAtRoomTemperature(x))", "all x.(Butter(x) -> (Fat(x) & SolidAtRoomTemperature(x)))", "all x.(Butter(x) -> (Fat(x) & SolidAtRoomTemperature(x)))"]}
{"id": "eqasc_validation_595", "nl": "Some fats are more likely to cause heart disease.", "fol": "", "prediction": ["exists x.(Fat(x) & MoreLikelyToCauseHeartDisease(x))", "exists x.(Fat(x) & MoreLikelyToCauseHeartDisease(x))", "exists x.(Fat(x) & MoreLikelyToCauseHeartDisease(x))", "exists x y.(Fat(x) & HeartDisease(y) & MoreLikelyToCause(x,y))", "exists x y.(Fat(x) & Fat(y) & MoreLikelyToCauseHeartDisease(x,y))", "exists x.(Fat(x) & MoreLikelyToCauseHeartDisease(x))", "exists x.(Fat(x) & MoreLikelyToCauseHeartDisease(x))", "exists x.(Fat(x) & MoreLikelyToCauseHeartDisease(x))", "exists x.(Fat(x) & MoreLikelyToCauseHeartDisease(x))", "exists x.(Fat(x) & CausesHeartDisease(x))", "exists x.(Fat(x) & MoreLikelyToCauseHeartDisease(x))", "exists x.(Fat(x) & MoreLikelyToCause(x,HeartDisease))", "exists x.(Fat(x) & CausesHeartDisease(x))", "exists x.(Fat(x) & MoreLikelyToCauseHeartDisease(x))", "exists x.(Fat(x) & MoreLikely(x))", "exists x.(Fat(x) & MoreLikelyToCauseHeartDisease(x))"]}
{"id": "eqasc_validation_596", "nl": "butter can lead to heart disease", "fol": "", "prediction": ["all x.(Butter(x) -> HeartDisease(x))", "all x y.((Butter(x) & HeartDisease(y)) -> CanLeadTo(x,y))", "all x y z.((Butter(x) & HeartDisease(y) & HeartDisease(z)) -> CanLeadTo(x,y,z))", "all x.(Butter(x) -> HeartDisease(x))", "all x y.((Butter(x) & HeartDisease(y)) -> CanLeadTo(x,y))", "all x.((Butter(x) & HeartDisease(x)) -> CanLeadTo(x,HeartDisease))", "all x y.((Butter(x) & HeartDisease(y)) -> LeadsTo(x,y))", "all x.(Butter(x) -> CanLeadToHeartDisease(x))", "all x y z.((Butter(x) & HeartDisease(y) & HeartDisease(z)) -> CanLeadTo(x,y,z))", "all x.((Butter(x) & HeartDisease(x)) -> LeadsTo(x,HeartDisease))", "all x.(Butter(x) -> HeartDisease(x))", "all x y z.((Butter(x) & HeartDisease(y) & HeartDisease(z)) -> LeadsTo(x,y,z))", "all x y.((Butter(x) & HeartDisease(y)) -> CanLeadTo(x,y))", "all x.(Butter(x) -> CanLeadToHeartDisease(x))", "all x y.((Butter(x) & HeartDisease(y)) -> LeadsTo(x,y))", "all x.(Butter(x) -> HeartDisease(x))"]}
{"id": "eqasc_validation_597", "nl": "Eggs, butter or margarine keep in the cooler as they do in the refrigerator.", "fol": "", "prediction": ["all x y.((Egg(x) | Butter(x) | Margarine(x)) -> KeepsInCooler(x,y))", "all x.((Egg(x) | Butter(x) | Margarine(x)) -> KeepsInCooler(x))", "(KeepsInCooler(eggs) | KeepsInCooler(eggs) | KeepsInCooler(eggs) | KeepsInCooler(eggs) | KeepsInCooler(eggs)))", "(KeepsInCooler(eggs,cooler) & KeepsInRefrigerator(eggs,cooler))", "((Eggs(e) | Butter(e) | Margarine(e))) & KeepsInCooler(e,e,refrigerator))", "all x y z.((Egg(x) | Butter(x) | Margarine(x)) -> KeepsInCooler(x,y,z))", "all x y.((Egg(x) | Butter(x) | Margarine(x)) -> KeepsInCooler(x,y))", "(KeepsInCoolery(eggs,cooler) & KeepsInRefrigerator(eggs,cooler))", "(KeepsInClimate(eggs,refrigerator,cooler) & KeepsInClimate(eggs,refrigerator,cooler))", "all x.((Egg(x) | Butter(x) | Margarine(x)) -> KeepsInCooler(x))", "all x y.((Egg(x) | Butter(x) | Margarine(x)) -> KeepsInClimate(x,y))", "((Eggs(e) | Butter(e) | Margarine(e))) | (Butter(e) | Margarine(e))))", "all x y.((Egg(x) & (Butter(x) | Margarine(x))) -> KeepsInCooler(x,y))", "all x.((Egg(x) | Butter(x) | Margarine(x)) -> KeepsInColder(x))", "all x y.((Egg(x) | Butter(x) | Margarine(x)) -> KeepsInCooler(x,y))", "all x y.((Egg(x) | Butter(x) | Margarine(x)) -> KeepsInColder(x,y))"]}
{"id": "eqasc_validation_598", "nl": "fat that is a solid at room temperature can be kept in the cooler", "fol": "", "prediction": ["all x.((Fat(x) & SolidAtRoomTemperature(x)) -> CanBeKeptInCooler(x))", "all x y.((Fat(x) & SolidAtRoomTemperature(x) & Cooler(y)) -> CanBeKeptIn(x,y))", "all x.((Fat(x) & SolidAtRoomTemperature(x)) -> CanBeKeptInCooler(x))", "all x y.((Fat(x) & SolidAtRoomTemperature(x)) -> CanBeKeptInCooler(y))", "all x y z.((Fat(x) & SolidAtRoomTemperature(x) & Cooler(y) & Cooler(z)) -> CanBeKeptIn(x,y,z))", "(all x.((Fat(x) & SolidAtRoomTemperature(x)) -> CanBeKeptInCooler(x)))", "all x y.((Fat(x) & SolidAtRoomTemperature(x) & Cooler(y)) -> CanBeKeptInCooler(x,y))", "all x.((Fat(x) & SolidAtRoomTemperature(x)) -> CanBeKeptInCooler(x))", "all x.((Fat(x) & SolidAtRoomTemperature(x)) -> CanBeKeepenInCooler(x))", "all x y.((Fat(x) & SolidAtRoomTemperature(x)) -> CanBeKeptInCooler(y))", "all x.((Fat(x) & SolidAtRoomTemperature(x)) -> CanBeKeptInColder(x))", "all x y.((Fat(x) & SolidAtRoomTemperature(x) & Cooler(y)) -> CanBeKeptIn(x,y))", "all x.((Fat(x) & SolidAtRoomTemperature(x)) -> CanBeKeepnInCooler(x))", "all x.((Fat(x) & SolidAtRoomTemperature(x)) -> Cooler(x))", "all x.((Fat(x) & SolidAtRoomTemperature(x)) -> KeepsInCooler(x))", "all x.((Fat(x) & SolidAtRoomTemperature(x)) -> CanBeKeptInClimate(x))"]}
{"id": "eqasc_validation_599", "nl": "Butter contains saturated fats.", "fol": "", "prediction": ["all x.(Butter(x) -> ContainsSaturatedFats(x))", "(ContainsSaturatedFats(Butter))", "all x.(Butter(x) -> ContainsSaturatedFats(x))", "all x y.((Butter(x) & SaturatedFats(y)) -> Contains(x,y))", "(ContainsSaturatedFats(butter))", "all x.(Butter(x) -> ContainsSaturatedFats(x))", "all x y.((Butter(x) & SaturatedFats(y)) -> Contains(x,y))", "all x.(Butter(x) -> ContainsSaturatedFats(x))", "all x y.((Butter(x) & SaturatedFats(y)) -> Contains(x,y))", "all x.(Butter(x) -> ContainsSaturatedFats(x))", "all x.(Butter(x) -> SaturatedFats(x))", "exists x.(Butter(x) & SaturatedFats(x))", "all x.(Butter(x) -> ContainsSaturatedFats(x))", "exists x.(Butter(x) & SaturatedFats(x))", "all x.(Butter(x) -> ContainsSaturatedFats(x))", "exists x.(Butter(x) & SaturatedFats(x))"]}
{"id": "eqasc_validation_600", "nl": "saturated fat is solid at room temperature", "fol": "", "prediction": ["all x.(SaturatedFat(x) -> SolidAtRoomTemperature(x))", "all x.((SaturatedFat(x) & RoomTemperature(x)) -> SolidAtRoomTemperature(x))", "all x y.((SaturatedFat(x) & RoomTemperature(y)) -> SolidAt(x,y))", "(SaturatedFatSolidAtRoomTemperature(saturatedFat) & RoomTemperature(s))", "all x.(SaturatedFat(x) -> SolidAtRoomTemperature(x))", "all x y z.((SaturatedFat(x) & RoomTemperature(y) & RoomTemperature(z)) -> SolidAt(x,y,z))", "(SaturatedFatSolidAtRoomTemperature(saturatedfat) & RoomTemperature(s))", "all x y.((SaturatedFat(x) & RoomTemperature(y)) -> SolidAt(x,y))", "all x y.((SaturatedFat(x) & RoomTemperature(y) & SolidAt(x,y)) -> SolidAt(x,y))", "all x.((SaturatedFat(x) & RoomTemperature(x)) -> SolidAtRoomTemperature(x))", "all x y z.((SaturatedFat(x) & RoomTemperature(y) & RoomTemperature(z) & SolidAt(x,y,z)) -> SolidAt(x,y,z))", "all x.(SaturatedFat(x) -> SolidAtRoomTemperature(x))", "all x.((SaturatedFat(x) & RoomTemperature(x)) -> SolidAt(x,RoomTemperature))", "all x y.((SaturatedFat(x) & RoomTemperature(y) & SolidAt(x,y)) -> SolidAt(x,y))", "ALL X.((SaturatedFat(x) & RoomTemperature(x)) -> SolidAtRoomTemperature(x))", "all x.(SaturatedFat(x) -> SolidAtRoomTemperature(x))"]}
{"id": "eqasc_validation_601", "nl": "Saturated fats are solid at room temperature.", "fol": "", "prediction": ["all x.(SaturatedFat(x) -> SolidAtRoomTemperature(x))", "all x y.((SaturatedFat(x) & RoomTemperature(y)) -> SolidAt(x,y))", "all x.((SaturatedFat(x) & RoomTemperature(x)) -> Solid(x))", "all x.(SaturatedFat(x) -> SolidAtRoomTemperature(x))", "all x.((Fat(x) & Saturated(x)) -> SolidAtRoomTemperature(x))", "(SaturatedFats(s) & RoomTemperature(s))", "all x y.((SaturatedFat(x) & RoomTemperature(y)) -> Solid(x,y))", "all x.(SaturatedFat(x) -> SolidAtRoomTemperature(x))", "all x y.((SaturatedFat(x) & RoomTemperature(y) & SolidAt(x,y)) -> SaturatedFat(x))", "all x.((SaturatedFat(x) & RoomTemperature(x)) -> Solid(x))", "all x.(SaturatedFat(x) -> SolidAtRoomTemperature(x))", "all x y.((SaturatedFat(x) & RoomTemperature(y)) -> SolidAt(x,y))", "all x y.((SaturatedFat(x) & RoomTemperature(y) & SolidAt(x,y)) -> SaturatedFat(x))", "all x.(SaturatedFat(x) -> SolidAtRoomTemperature(x))", "all x.(SaturatedFat(x) -> SolidAtRoomTemperature(x))", "all x.(SaturatedFat(x) -> SolidAtRoomTemperature(x))"]}
{"id": "eqasc_validation_602", "nl": "Butter is a saturated fat", "fol": "", "prediction": ["all x.(Butter(x) -> (SaturatedFat(x) & SaturatedFat(x)))", "all x.(Butter(x) -> SaturatedFat(x))", "all x y.((Butter(x) & SaturatedFat(y)) -> SaturatedFat(x,y))", "(SaturatedFat(butter) | SaturatedFat(butter))", "all x.(Butter(x) -> (SaturatedFat(x) & Fat(x)))", "(SaturatedFat(Butter,SaturatedFat) & SaturatedFat(Butter,SaturatedFat))", "all x.(Butter(x) -> (SaturatedFat(x) & SaturatedFat(x)))", "(SaturatedFat(butter) & SaturatedFat(butter,butter))", "all x y.((Butter(x) & SaturatedFat(y)) -> SaturatedFat(x,y))", "(SaturatedFat(Butter,Fat(Butter))", "all x.(Butter(x) -> SaturatedFat(x))", "all x.(Butter(x) -> (SaturatedFat(x) & SaturatedFat(x)))", "exists x.(Butter(x) & SaturatedFat(x) & SaturatedFat(x) & SaturatedFat(x))", "all x y.((Butter(x) & SaturatedFat(y)) -> SaturatedFat(x,y))", "all x.(Butter(x) -> (SaturatedFat(x) & Fat(x) & SaturatedFat(x)))", "(SaturatedFat(butter) | SaturatedFat(butter))"]}
{"id": "eqasc_validation_603", "nl": "Saturated fats make butter solid at ambient temperatures", "fol": "", "prediction": ["all x.((SaturatedFat(x) & Butter(y) & AmbientTemperature(z)) -> MakesSolid(x,y,z))", "all x y.((SaturatedFat(x) & Butter(y)) -> MakesSolidAtAmbientTemperatures(x,y))", "all x.(SaturatedFat(x) -> MakesButterSolidAtAmbientTemperatures(x))", "all x y z.((SaturatedFat(x) & Butter(y) & AmbientTemperature(z)) -> MakesSolidAt(y,z))", "all x.((SaturatedFat(x) & Butter(y)) -> MakesSolidAtAmbientTemperatures(x,y))", "all x y.((SaturatedFat(x) & Butter(y) & AmbientTemperature(y)) -> MakesSolid(x,y))", "all x.(SaturatedFats(x) -> MakesButterSolidAtAmbientTemperatures(x))", "all x.((SaturatedFat(x) & Butter(x) & AmbientTemperatures(x)) -> MakesSolidAt(x,Butter,AmbientTemperatures))", "all x y.((SaturatedFat(x) & Butter(y)) -> MakesSolidAtAmbientTemperatures(x,y))", "all x.((SaturatedFats(x) & Butter(y) & AmbientTemperatures(z)) -> MakesSolidAt(y,z))", "all x y z.((SaturatedFat(x) & Butter(y) & AmbientTemperature(z)) -> MakesSolidAt(y,z))", "(all x.(SaturatedFat(x) -> MakesButterSolid(x)))", "all x y.((SaturatedFat(x) & Butter(y) & AmbientTemperature(z)) -> MakesSolidAt(x,y,z))", "all x.(SaturatedFat(x) -> MakesButterSolidAtAmbientTemperatures(x))", "(all x.(SaturatedFat(x) -> MakesButterSolidAtAmbientTemperatures(x)))", "all x y.((SaturatedFat(x) & Butter(y)) -> MakesSolidAtAmbientTemperatures(x,y))"]}
{"id": "eqasc_validation_604", "nl": "Room temperatures, 70-75 degrees Fahrenheit or so, seem acceptable to most species.", "fol": "", "prediction": ["all x.((RoomTemperature(x) & Temperature(x,70) & Temperature(x,75)) -> AcceptableToMostSpecies(x))", "all x y.((RoomTemperature(x) & (70-75Federnheit(y) | (70-75Federnheit(y) | (75Federnheit(y) | -75Federnheit(y)))) -> AcceptableToMostSpecies(x)))", "all x.((RoomTemperature(x) & Temperature(x,70,75)) -> AcceptableToMostSpecies(x))", "(AccommodatingToMostSpecies(RoomTemperatures) -> (70-75DegreesFedernheit(Room) & AcceptableToMostSpecies(Room)))", "(all x.((RoomTemperature(x) & Temperature(x,70) & Temperature(x,75)) -> AcceptableToMostSpecies(x))", "all x y.((Room(x) & (70-75Federnheit(y) | (70-75Federnheit(y) | (75Federnheit(y) | -75Federnheit(y)))) -> AcceptableToMostSpecies(x,y)))", "all x.((RoomTemperature(x) & 70-75FedernheitOrSo(x)) -> AcceptableToMostSpecies(x))", "all x.((RoomTemperature(x) & (70-75Federnheit(x) | -70Federnheit(x))) -> AcceptableToMostSpecies(x))", "(AccommodableToMostSpecies(RoomTemperature) -> (70-75Federnheit(Room) | -70Federnheit(Room)))", "all x y.((RoomTemperature(x) & (70-75Federnheit(y) | -70Federnheit(y))) -> AcceptableToMostSpecies(x,y))", "all x y.((RoomTemperature(x) & (70-75Degrees(y) | (70-75Degrees(y) | (75-75Degrees(y))))) -> AcceptableToMostSpecies(x,y))", "all x.(RoomTemperature(x) -> (70-75DegreesFahrenheit(x) | AcceptableToMostSpecies(x)))", "all x.((RoomTemperature(x) & Temperature(x,70) & Temperature(x,75)) -> AcceptableToMostSpecies(x))", "all x.((RoomTemperature(x) & 70-75DegreesFedernheitOrSo)) -> AcceptableToMostSpecies(x))", "all x.(RoomTemperature(x) -> (70-75Federnheit(x) | AcceptableToMostSpecies(x)))", "(All x.(RoomTemperature(x,70) | -75(x)))"]}
{"id": "eqasc_validation_605", "nl": "butter is a fat that is solid at 70-75 degrees Fahrenheit", "fol": "", "prediction": ["all x.(Butter(x) -> (Fat(x) & SolidAt7075Federnheit(x)))", "all x y.((Butter(x) & Fat(y)) -> (Fat(x,y) & SolidAt(y,70) & SolidAt(x,y,75)))", "(Fat(butter) & SolidAt7075DegreesFahrenheit(butter))", "all x.(Butter(x) -> (Fat(x) & SolidAt7075DegreesFahrenheit(x)))", "all x y z.((Butter(x) & Fat(y) & Temperature(z) & 70-75DegreesFahrenheit(y)) -> SolidAt(x,y,z))", "(Fat(butter) & SolidAt7075DegreesFederheit(butter))", "all x y.((Butter(x) & Fat(y)) -> (Fat(x,y) & SolidAt7075Federheit(x)))", "all x.(Butter(x) -> (Fat(x) & SolidAt7075Federnheit(x)))", "all x.(Butter(x) -> (Fat(x) & SolidAt7075Federheit(x)))", "all x y z.((Butter(x) & Fat(y) & DegreesFossiness(z) & SolidAt(y,z)) -> Fat(x,y,z))", "(Fat(butter) & SolidAt7075Federnheit(butter))", "all x.(Butter(x) -> (Fat(x) & SolidAt(x,70) & SolidAt(x,75)))", "all x y.((Butter(x) & Fat(y)) -> (Fat(x,y) & SolidAt(y,70) & SolidAt(y,75)))", "all x.(Butter(x) -> (Fat(x) & SolidAt7075DegreesFahrenheit(x)))", "(Fat(butter) & SolidAt(butter,70,75))", "all x.(Butter(x) -> (Fat(x,70) & SolidAt(x,75)))"]}
{"id": "eqasc_validation_606", "nl": "Room temperatures between 40 and 80 Fahrenheit, or 5 and 27 Celsius, are best for storage.", "fol": "", "prediction": ["all x.((RoomTemperature(x) & (40Federnheit(x) | 80Federnheit(x) | 5Federnitia(x) | 27Celsius(x))) -> BestForStorage(x))", "all x.((RoomTemperature(x) & (40-80Federnheit(x) | 5-27Celsius(x))) -> BestForStorage(x))", "(BestForStorage(RoomTemperature(Room,40) & BestForStorage(Room,80))", "all x y.((RoomTemperature(x) & (40-80Federnheit(x) | 5-27Celsius(x))) -> BestForStorage(x))", "(BestForStorage(RoomTemperature(Room(Room) & (40-80Federnheit(Room) | 5-27Celsius(Room)))", "(BestForStorage(room) & (40Federnheit(room) | 80Federnheit(room) | 5Federnheit(room) | 27Celsius(room)))", "all x y.((Room(x) & Temperature(y) & (40Federnheit(y) | 80Federnheit(y) | 5Federnitia(y) | 27Celsius(y))) -> BestForStorage(x))", "all x.((RoomTemperature(x) & (40Federnheit(x) | 80Federnheit(x) | 5FedernitudinalTemperature(x))) -> BestForStorage(x))", "all x.((RoomTemperature(x,40) & 80(x) & (Celsius(x,5) | Celsius(x,27))) -> BestForStorage(x))", "all x.((Room(x) & (40Federnheit(x) | 80Federnheit(x) | 5Federnitia(x) | 27Celsius(x))) -> BestForStorage(x))", "all x y.((RoomTemperature(x) & (40Federnheit(y) | 80Federnheit(y) | 5Federnitia(y) | 27Celsius(y))) -> BestForStorage(x))", "all x.((RoomTemperature(x) & (40-80Federnheit(x) | 5-27Celsius(x))) -> BestForStorage(x))", "All x.((Room(x) & (40-80Federnheit(x) | 5-27Celsius(x))) -> BestForStorage(x))", "all x.((RoomTemperature(x) & (40Federnheit(x) | 80Federnheit(x) | 5Celsius(x))) -> BestForStorage(x))", "(BestForStorage(RoomTemperature(Room,40) & BestForStorage(Room,80))", "all x.((RoomTemperature(x,40) & Temperature(x,80) & Temperature(x,5) & Temperature(x,27)) -> BestForStorage(x))"]}
{"id": "eqasc_validation_607", "nl": "Butter is a fat that is a solid between 5 and 27 degrees Celsius.", "fol": "", "prediction": ["all x.(Butter(x) -> (Fat(x) & SolidBetween(x,5) & SolidBetween(x,27)))", "all x.(Butter(x) -> (Fat(x) & Solid(x) & Between(x,5) & Between(x,27)))", "all x.(Butter(x) -> (Fat(x) & SolidBetween(x,5) & SolidBetween(x,27)))", "(Fat(butter) & SolidBetween(butter,5 & 27))", "all x y.((Butter(x) & Fat(y)) -> (Fat(x,y) & Solid(y,5) & Solid(y,27)))", "all x.(Butter(x) -> (Fat(x) & SolidBetween(x,5 & 27)))", "all x y.(Butter(x) -> (Fat(x,y) & SolidBetween(y,5 & 27)))", "(Fat(Butter) & SolidBetween(Butter,5) & SolidBetween(Butter,27))", "all x.((Butter(x) & Fat(x) & SolidBetween(x,5 & 27)) -> Fat(x))", "all x.(Butter(x) -> (Fat(x) & Solid(x) & Between(x,5) & Between(x,27)))", "all x y.((Butter(x) & Fat(y)) -> (Fat(y) & Solid(y,5 & 27Celsius)))", "(Fat(butter) & SolidBetween(butter,5) & SolidBetween(butter,27))", "all x.(Butter(x) -> (Fat(x) & Solid(x) & Between(x,5) & Between(x,27)))", "all x y.((Butter(x) & Fat(y)) -> (Fat(x,y) & Solid(y,5 & 27Celsius)))", "all x.(Butter(x) -> (Fat(x) & SolidBetween(x,5) & SolidBetween(x,27)))", "all x.(Butter(x) -> (Fat(x) & SolidBetween(x,5 & 27)))"]}
{"id": "eqasc_validation_608", "nl": "For example, butter is solid at room temperature, therefore it is mainly saturated.", "fol": "", "prediction": ["all x.((Butter(x) & SolidAtRoomTemperature(x)) -> Saturated(x))", "(SolidAtRoomTemperature(butter) & MostlySaturated(butter))", "all x y.((Butter(x) & RoomTemperature(y)) -> (Solid(x,y) & Saturated(x)))", "(SaturatedButter(butter) & SolidAtRoomTemperature(butter))", "all x.(Butter(x) -> (SolidAtRoomTemperature(x) & Saturated(x)))", "all x.((Butter(x) & SolidAtRoomTemperature(x)) -> MostlySaturated(x))", "all x.((Butter(x) & SolidAtRoomTemperature(x) & Saturated(x)) -> SolidAtRoomTemperature(x))", "(SolidAtRoomTemperature(butter) & MostlySaturated(butter))", "all x y.((Butter(x) & RoomTemperature(y)) -> (Solid(x,y) & Saturated(x)))", "all x.(Butter(x) -> (SolidAtRoomTemperature(x) & MostlySaturated(x)))", "(SaturatedButter(butter) & SolidAtRoomTemperature(butter))", "(SolidAtRoomTemperature(butter) & Saturated(butter))", "(SaturatedButter(Butter,RoomTemperature))", "all x y.((Butter(x) & RoomTemperature(y) & SolidAt(x,y)) -> Saline(x))", "exists x.(Butter(x) & SolidAtRoomTemperature(x) & Saturated(x))", "all x.((Butter(x) & SolidAtRoomTemperature(x) & Saturated(x)) -> SolidAtRoomTemperature(x))"]}
{"id": "eqasc_validation_609", "nl": "Solids are composed of closely packed molecules.", "fol": "", "prediction": ["all x.(Solid(x) -> (ComposedOfNearlyPackedMolecules(x)))", "all x y.((Solid(x) & Molecule(y)) -> CloselyPackaged(x,y))", "(all x.(Solid(x) -> CloselyPackagedMolecules(x)))", "all x.(Solid(x) -> ComposedOfNearlyPackedMolecules(x))", "all x.(Solid(x) -> (ComposedOfNearlyPackedMolecules(x)))", "all x y z.((Solid(x) & Molecule(y) & Molecule(z) & CloselyPacked(x,y,z)) -> ComposedOf(x,y,z))", "all x.(Still(x) -> (ComposedOfNearlyPackedMolecules(x) & CloselyPackedMolecules(x)))", "all x y.((Solid(x) & Molecule(y)) -> CloselyPacked(x,y))", "all x.(Solid(x) -> (ComposedOfNearlyPackedMolecules(x)))", "all x.(Solid(x) -> (ComposedOfNearlyPackedMolecules(x) & CloselyPackedMolecules(x)))", "(all x.(Solid(x) -> CloselyPackaged(x)))", "all x.(Solid(x) -> (ComposedOfNearlyPackagedMolecules(x)))", "all x y.((Solid(x) & Molecule(y)) -> (ComposedOf(x,y) & CloselyPacked(x)))", "all x y.((Solid(x) & Molecule(y)) -> CloselyPackaged(x,y))", "all x.(Solid(x) -> ComposedOfNearlyPackedMolecules(x))", "all x.(Solid(x) -> (ComposedOfFullyPackagedMolecules(x)))"]}
{"id": "eqasc_validation_610", "nl": "Butter is a fat that is composed of closely packed molecules at room temperature", "fol": "", "prediction": ["all x.(Butter(x) -> (Fat(x) & ComposedOfNearlyPackedMolecules(x) & RoomTemperature(x)))", "all x y.((Butter(x) & Fat(y)) -> (ComposedOfCloselyPackedMolecules(x,y) & RoomTemperature(x)))", "(Fat(butter) & ComposedOfNearlyPackedMoleculesAtRoomTemperature(butter))", "all x y z.((Butter(x) & Fat(y) & RoomTemperature(z)) -> (ComposedOfCloselyPackedMolecules(x,y,z) & RoomTemperature(x,z)))", "(Fat(butter) & CloselyPackagedMolecules(butter) & RoomTemperature(butter))", "all x.(Butter(x) -> (Fat(x) & ContainsNearlyPackedMolecules(x) & RoomTemperature(x)))", "all x.(Butter(x) -> (Fat(x) & ComposedOfCloselyPackagedMolecules(x) & RoomTemperature(x)))", "all x.(Butter(x) -> (Fat(x) & ComposedOfNearlyPackedMolecules(x) & RoomTemperature(x)))", "(Fat(Butter) & ContainsCloselyPackedMolecules(Butter) & RoomTemperature(Butter))", "all x y.((Butter(x) & Fat(y)) -> (ComposedOfNearlyPackedMolecules(x,y) & RoomTemperature(x)))", "all x.((Butter(x) & CloselyPackagedMolecules(x) & RoomTemperature(x)) -> Fat(x))", "all x y z.((Butter(x) & Fat(y) & RoomTemperature(z)) -> (ComposedOfNearlyPackedMoleculesAtRoomTemperature(x,y,z)))", "all x.(Butter(x) -> (Fat(x) & CloselyPackagedMolecules(x) & RoomTemperature(x)))", "all x.(Butter(x) -> (Fat(x) & ComposedOfCloselyPackagedMolecules(x) & RoomTemperature(x)))", "all x y.((Butter(x) & Fat(y)) -> (ComposedOfCloselyPackagedMolecules(x,y) & RoomTemperature(y)))", "all x.(Butter(x) -> (Fat(x) & ComposedOfNearlyPackedMoleculesAtRoomTemperature(x)))"]}
{"id": "eqasc_validation_611", "nl": "Bile reduces the acidity of food entering from the highly acidic stomach.", "fol": "", "prediction": ["all x y.((Bile(x) & Food(y) & EntersFromHighlyAcidStomach(x,y)) -> ReducesAcidity(x,y))", "all x.(Bile(x) -> ReducesAcidityOfFood(x))", "all x y.((Bile(x) & Food(y) & EntersFromAcidStomach(x,y)) -> ReducesAcidity(x,y))", "all x y z.((Bile(x) & Food(y) & AcidicStomach(z)) -> ReducesAcidity(x,y,z))", "(all x.(Bile(x) -> ReducesAcidityOfFood(x)))", "all x.(Bile(x) -> ReducesAcidityOfFood(x))", "all x y.((Bile(x) & Food(y)) -> ReducesAcidity(x,y))", "all x y.((Bile(x) & Food(y) & EntersFromAcidStomach(x,y)) -> ReducesAcidity(x,y))", "all x y z.((Bile(x) & Food(y) & AcidicStomach(z)) -> ReducesAcidity(x,y,z))", "all x y.((Bile(x) & Food(y) & EnteringFrom(x,y)) -> ReducesAcidity(x,y))", "all x.(Bile(x) -> ReducesAcidityOfFood(x))", "all x.(Bile(x) -> ReducesAcidityOfFood(x))", "All x y z.((Bile(x) & Food(y) & AcidicStomach(z)) -> ReducesAcidity(x,y,z))", "all x.(Bile(x) -> ReducesAcidityOfFoodEntrantFromHighlyAcidicStomach(x))", "all x.(Bile(x) -> ReducesAcidityOfFood(x))", "all x.(Bile(x) -> ReducesAcidityOfFood(x))"]}
{"id": "eqasc_validation_612", "nl": "After a meal, the gallbladder releases the bile through a passageway called the bile duct.", "fol": "", "prediction": ["all x y.((Gallbladder(x) & Meal(y)) -> ReleasesBile(x,y))", "all x y z.((Gallbladder(x) & Meal(y) & BileDuct(z)) -> Releases(x,y,z))", "all x.((Gallbladder(x) & Meal(x)) -> ReleasesBile(x))", "all x y.((Gallbladder(x) & Meal(y)) -> ReleasesBile(x,y))", "all x y z.((Gallbladder(x) & Meal(y) & Bile(z)) -> ReleasesThroughPassage(x,z))", "(all x y.((Meal(x) & Gallbladder(y)) -> ReleasesBile(y,x)))", "all x.((Gallbladder(x) & Meal(x)) -> ReleasesBile(x))", "all x y.((Galbladder(x) & Meal(y)) -> ReleasesBile(x,y))", "all x.((Gallbladder(x) & Meal(x)) -> ReleasesBileThroughBileDuct(x))", "all x y.((Gallbladder(x) & Meal(y) & ReleasesBile(x,y)) -> BileDuct(x))", "(all x.(Meal(x) -> Gallbladder(x)) & ReleasesBile(x))", "all x y z.((Gallbladder(x) & Meal(y) & BileDuct(z)) -> Releases(x,y,z))", "all x.((Galbladder(x) & Meal(x)) -> ReleasesBileThroughBileDuct(x))", "all x y z.((Gallbladder(x) & Meal(y) & BileDuct(z)) -> Releases(x,y,z))", "all x y.((Galbladder(x) & Meal(y)) -> ReleasesBile(x,y))", "all x.((Gallbladder(x) & Meal(x)) -> ReleasesBile(x))"]}
{"id": "eqasc_validation_613", "nl": "One function of the gallbladder is to reduce the acidity of food. ", "fol": "", "prediction": ["all x.(Gallbladder(x) -> ReducesAcidityOfFood(x))", "all x y.((Gallbladder(x) & Food(y)) -> ReducesAcidity(x,y))", "all x.(Gallbladder(x) -> ReducesAcidityOfFood(x))", "all x y z.((Gallbladder(x) & Food(y) & Acidity(z)) -> Reduces(x,y,z))", "all x y.((Gallbladder(x) & Food(y)) -> ReducesAcidity(x,y))", "all x.(Galbladder(x) -> ReducesAcidityOfFood(x))", "all x.(GallbladderFunction(x) -> ReducesAcidityOfFood(x))", "all x.(Gallbladder(x) -> ReducesAcidity(x))", "all x y.((Galbladder(x) & Food(y)) -> ReducesAcidity(x,y))", "exists x.(Gallidder(x) & ReducesAcidityOfFood(x))", "exists x.(GallbladderFunction(x) & ReducesAcidityOfFood(x))", "all x.(Galbladder(x) -> ReducesAcidityOfFood(x))", "all x y.((Gallbladder(x) & Food(y)) -> ReducesAcidity(x,y))", "all x.(Galbladder(x) -> ReducesAcidity(x))", "exists x.(GallbladderFunction(x) & ReducesAcidityOfFood(x))", "all x y.((Galbladder(x) & Food(y)) -> ReducesAcidity(x,y))"]}
{"id": "eqasc_validation_614", "nl": "Bile, a fluid made by the liver, is stored in the gallbladder.", "fol": "", "prediction": ["all x.((Fluid(x) & MadeByLiver(x)) -> StoredInGallbladder(x))", "all x y.((Bile(x) & Liver(y)) -> StoredInGallbladder(x,y))", "all x y z.((Bile(x) & Liver(y) & Gallbladder(z)) -> (MadeBy(x,y) & StoredIn(x,z)))", "all x.(Bile(x) -> (MadeByLiver(x) & StoredInGallbladder(x)))", "all x.((Fluid(x) & MadeByLiver(x)) -> StoredInGallbladder(x))", "all x y.((Bile(x) & Liver(y)) -> StoredInGalbladder(x,y))", "all x y.((Fluid(x) & Liver(y) & StoredInGallbladder(x,y)) -> MadeBy(x,y))", "(exists x.(Bile(x) & MadeByLiver(x)) & StoredInGallbladder(x))", "all x.(Bile(x) -> (FluidMadeByLiver(x) & StoredInGallbladder(x)))", "all x y z.((Bile(x) & Liver(y) & Gallbladder(z)) -> (MadeBy(x,y) & StoredIn(x,z)))", "(all x.(Bile(x) -> MadeByLiver(x)) & StoredInGallbladder(x))", "all x.((Fluid(x) & MadeByLiver(x)) -> StoredInGalbladder(x))", "(exists x.(Bile(x) & MadeByLiver(x)) & StoredInGalbladder(x))", "all x.((Bile(x) & MadeByLiver(x)) -> StoredInGallbladder(x))", "(all x.(Bile(x) -> MadeByLiver(x)) & StoredInGalbladder(x))", "all x.(Bile(x) -> (MadeByLiver(x) & StoredInGallbladder(x)))"]}
{"id": "eqasc_validation_615", "nl": "The gallbladder stores a fluid that reduces the acidity of food", "fol": "", "prediction": ["all x y.((Gallbladder(x) & Food(y)) -> StoresFluid(x,y))", "all x.(Gallbladder(x) -> StoresFluid(x))", "all x y z.((Gallbladder(x) & Fluid(y) & Food(z)) -> Stores(x,y))", "all x.(Gallbladder(x) -> (StoresFluid(x) & ReducesAcidityOfFood(x)))", "(StoresFluid(gallbladder,fluid) & ReducesAcidityOfFood(gallbladder,food))", "all x y z.((Gallbladder(x) & Fluid(y) & Food(z)) -> StoresAndReducesAcidity(x,y,z))", "all x y.((Gallbladder(x) & Food(y)) -> StoresFluid(x,y))", "(StoresFluid(gallbladder,fibre) & ReducesAcidityOfFood(gallbladder,food))", "all x y z.((Galbladder(x) & Fluid(y) & Food(z) & Stores(x,y)) -> ReducesAcidity(x,z))", "all x.(Galbladder(x) -> StoresFluid(x))", "all x.(Gallbladder(x) -> (StoresFluid(x) & ReducesAcidityOfFood(x)))", "all x y.((Gallbladder(x) & Food(y) & StoresFluid(x,y)) -> ReducesAcidity(x,y))", "all x y.((Galbladder(x) & Food(y)) -> StoresFluid(x,y))", "all x.(Gallbladder(x) -> (StoresFluid(x) & ReducesAcidityOfFood(x)))", "all x.(Galbladder(x) -> StoresFluid(x))", "all x.(Galbladder(x) -> StoresFluid(x))"]}
{"id": "eqasc_validation_616", "nl": "Bile exits gallbladder by common bile duct.", "fol": "", "prediction": ["all x.(Bile(x) -> ExitsGalbladderByCommonBileDuct(x))", "all x y.((Bile(x) & Gallbladder(y)) -> ExitsByBieleDuct(x,y))", "all x y z.((Bile(x) & Gallbladder(y) & BileDuct(z)) -> ExitsBy(x,y,z))", "(ExitsGalbladderByCommonBileDuct(bile))", "(ExitsGalbladderByCommonBileDuct(bile) & Bile(bile))", "all x.(Bile(x) -> ExitsGallbladderByCommonBileDuct(x))", "all x.(Bile(x) -> ExitsGalbladderByCommonBileDuct(x))", "all x y.((Bile(x) & Gallbladder(y)) -> Exit(x,y))", "all x.(Bile(x) -> ExitsGalbladderByCommonBileDuct(x))", "all x y z.((Bile(x) & Gallbladder(y) & BileDuct(z)) -> Exit(x,y,z))", "(ExitsGallbladderByCommonBileDuct(bile))", "all x y.((Bile(x) & Gallbladder(y)) -> ExitsByBileDuct(x,y))", "all x.(Bile(x) -> (ExitsGallbladder(x) & CommonBileDuct(x)))", "all x y.((Bile(x) & Gallbladder(y) & CommonBileDuct(x,y)) -> ExitsBy(x,y))", "all x.(Bile(x) -> ExitsGalbladderByBieleduct(x))", "all x.(Bile(x) -> Exit(x,Galbladder,CommonBileDuct))"]}
{"id": "eqasc_validation_617", "nl": "the gallbladder reduces the acidity of food entering from the highly acidic stomach.", "fol": "", "prediction": ["all x y.((Gallbladder(x) & Food(y) & EntersFromHighlyAcidStomach(x,y)) -> ReducesAcidity(x,y))", "all x.(Gallbladder(x) -> ReducesAcidityOfFood(x))", "all x y z.((Gallbladder(x) & Food(y) & AcidicStomach(z)) -> ReducesAcidity(x,y,z))", "all x y.((Gallbladder(x) & Food(y)) -> ReducesAcidity(x,y))", "(ReducesAcidityOfFoodEntrantFromHighlyAcidicStomach(gallbladder))", "(ReducesAcidityOfFoodEntrantsFromHighlyAcidicStomach(gallbladder))", "all x y.((Galbladder(x) & Food(y) & EntersFromHighlyAcidicStomach(x,y)) -> ReducesAcidity(x,y))", "all x.(Gallbladder(x) -> ReducesAcidityOfFood(x))", "all x y z.((Gallbladder(x) & Food(y) & AcidicStomach(z)) -> ReducesAcidity(x,y,z))", "all x.(Galbladder(x) -> ReducesAcidityOfFood(x))", "all x.(Gallbladder(x) -> ReducesAcidityOfFoodEntrantFromHighlyAcidicStomach(x))", "all x y.((Gallbladder(x) & Food(y)) -> ReducesAcidity(x,y))", "all x y.((Galbladder(x) & Food(y) & EnteringFrom(x,y)) -> ReducesAcidity(x,y))", "all x.(Gallbladder(x) -> ReducesAcidityOfFoodEntrantFromHighlyAcidicStomach(x))", "all x.(Galbladder(x) -> ReducesAcidityOfFood(x))", "all x.(Galbladder(x) -> ReducesAcidity(x))"]}
{"id": "eqasc_validation_618", "nl": "Bile, produced by the liver, helps fat digestion and absorption.", "fol": "", "prediction": ["all x.((Bile(x) & ProducedByLiver(x)) -> (HelpsFatDigestion(x) & HelpsAbsorption(x)))", "all x y.((Bile(x) & Liver(y)) -> (ProducedBy(x,y) & HelpsFatDigestion(x) & HelpsAbsorption(x)))", "all x.(Bile(x) -> (ProducedByLiver(x) & HelpsFatDigestion(x) & HelpsAbsorption(x)))", "(ProducedByLiver(bile) & HelpsFatDigestion(bile) & HelpsAbsorption(bile))", "all x y.((Bile(x) & Liver(y)) -> (ProducedBy(x,y) & HelpsFatDigestion(x) & HelpsAbsorption(x)))", "all x y z.((Bile(x) & Liver(y) & FatDigestion(z) & Absorption(z)) -> ProducedBy(x,y))", "(ProducedByLiver(bile) & FatDigestion(bile) & FatAbsorption(bile))", "(ProducedByLiver(bile,hepatic) & HelpsFatDigestion(bile) & HelpsAbsorption(bile))", "all x.(Bile(x) -> (ProducedByLiver(x) & HelpsFatDigestion(x) & HelpsAbsorption(x)))", "all x y.((Bile(x) & Liver(y)) -> (ProducedBy(x,y) & HelpsFatDigestion(x) & HelpsAbsorption(x)))", "all x.((Bile(x) & ProducedByLiver(x)) -> (HelpsFatDigestion(x) & HelpsAbsorption(x)))", "all x.((Bile(x) & ProducedByHepatic(x)) -> (HelpsFatDigestion(x) & HelpsAbsorption(x)))", "(ProducedByLiver(bile,heart) & HelpsFatDigestion(bile,fat) & HelpsAbsorption(bile,fat))", "all x.(Bile(x) -> (ProducedByLiver(x) & HelpsFatDigestion(x) & HelpsAbsorption(x)))", "(ProducedByLiver(bile) & HelpsFatDigestionAndAbsorption(bile))", "all x y.((Bile(x) & Liver(y)) -> (ProducedBy(x,y) & HelpsFatDigestionAndAbsorption(x)))"]}
{"id": "eqasc_validation_619", "nl": "the liver helps reduce acidity of food", "fol": "", "prediction": ["all x y.((Liver(x) & Food(y)) -> ReducesAcidity(x,y))", "all x.(Liver(x) -> ReducesAcidityOfFood(x))", "all x y z.((Liver(x) & Food(y) & Food(z)) -> ReducesAcidity(x,y,z))", "all x y.((Liver(x) & Food(y)) -> HelpsReduceAcidity(x,y))", "(all x.(Liver(x) -> ReducesAcidityOfFood(x)))", "all x.(Liver(x) -> HelpsReduceAcidityOfFood(x))", "all x y z.((Liver(x) & Food(y) & Food(z)) -> HelpsReduceAcidity(x,y,z))", "all x y.((Liver(x) & Food(y)) -> ReducesAcidity(x,y))", "(all x.(Liver(x) -> ReducesAcidityOfFood(x)))", "all x.(Liver(x) -> ReducesAcidityOfFood(x))", "all x.(Hepatobiliary(x) -> ReducesAcidityOfFood(x))", "all x.(Liver(x) -> HelpsReduceAcidityOfFood(x))", "all x y.((Liver(x) & Food(y)) -> HelpsReduceAcidity(x,y))", "All x y z.((Liver(x) & Food(y) & Food(z)) -> ReducesAcidity(x,y,z))", "all x.(Liver(x) -> ReducesAcidityOfFood(x))", "all x y.((Liver(x) & Food(y)) -> ReducesAcidity(x,y))"]}
{"id": "eqasc_validation_620", "nl": "Bile acid is used by the body to digest fats.", "fol": "", "prediction": ["all x.(BileAcid(x) -> UsedByBodyToDigestFats(x))", "all x y.((BileAcid(x) & Body(y)) -> DigestsFats(x,y))", "all x y z.((BileAcid(x) & Body(y) & Fat(z)) -> Digests(x,y,z))", "all x.(BileAcid(x) -> UsedByBodyToDigestFats(x))", "all x.(BileAcid(x) -> UsedByBodyToDigestFats(x))", "all x y.((BileAcid(x) & Body(y)) -> DigestsFats(x,y))", "(BuleAcid(bile) & Body(bile) & DigestsFats(bile))", "(UsedByBodyToDigestFats(bileAcid) & Fats(bileAcid))", "all x y.((BileAcid(x) & Body(y)) -> UsedToDigestFats(x,y))", "all x y z.((BileAcid(x) & Body(y) & Fat(z) & Digests(x,z)) -> UsedBy(x,y))", "all x.(BileAcid(x) -> UsedByBodyToDigestFats(x))", "all x.(BileAcid(x) -> UsedByBodyToDigestFats(x))", "all x.(BileAcid(x) -> DigestsFats(x))", "all x y.((Body(x) & BileAcid(y)) -> DigestFats(y))", "all x y.((BileAcid(x) & Body(y)) -> UsedToDigestFats(x,y))", "all x.(BileAcid(x) -> UsedToDigestFats(x))"]}
{"id": "eqasc_validation_621", "nl": "the stomach acidity helps digest fats", "fol": "", "prediction": ["all x.(StomachAcidity(x) -> DigestsFats(x))", "all x y.((StomachAcidity(x) & Fats(y)) -> Digests(x,y))", "all x.(StomachAcidityHelpsDigestFats(x) -> DigestsFats(x))", "(AllergicAcidityHelpsDigestFats(StomachAcidity) -> DigestsFats(StomachAcidity))", "all x y z.((StomachAcidity(x) & Fats(y) & Fats(z)) -> Digests(x,y,z))", "all x y.((StomachAcidity(x) & Fats(y)) -> Digests(x,y))", "all x y z.((StomachAcidity(x) & Fats(y) & Fats(z) & Digests(x,y,z)) -> HelpsDigest(x,y,z))", "(StomachAcidityHelpsDigestFats(StomachAcidity) & Fats(Fats(Fats))", "exists x,y,z,w.(StomachAcidity(x) & Fats(y) & Digests(x,z,w))", "all x.(StomachAcidity(x) -> DigestsFats(x))", "all x.(StomachAcidityHelpsDigestFats(x) -> DigestsFats(x))", "all x y.((StomachAcidity(x) & Fats(y)) -> Digests(x,y))", "all x.(StomachAcidity(x) -> HelpsDigestFats(x))", "all x y.((StomachAcidity(x) & Fat(y)) -> Digests(x,y))", "all x.(StomachAcidityHelpsDigestFats(x) -> DigestsFats(x))", "All x.(StomachAcidity(x) -> DigestsFats(x))"]}
{"id": "eqasc_validation_622", "nl": "Bile , synthesized by the liver, contains HCO3-, bile salts and bile pigments.", "fol": "", "prediction": ["all x.(Bile(x) -> (SynthesizedByLiver(x) & ContainsHCO3Salts(x) & ContainsBilePigments(x)))", "(SynthesizedByLiver(bile) & ContainsHCO3Salts(bile) & ContainsBilePigments(bile))", "all x y.((Bile(x) & Liver(y)) -> (SynthesizedByLiver(x,y) & ContainsHCO3Salts(x) & ContainsBilePigments(x)))", "all x.((Bile(x) & SynthesizedByLiver(x)) -> (ContainsHCO3Salts(x) & ContainsBilePigments(x)))", "all x y z.((Bile(x) & Liver(y) & HCO3Salts(z) & BilePigments(z)) -> SynthesizedByLiver(x,y,z))", "all x.(Bile(x) -> (SynthesizedByLiver(x) & ContainsHCO3Salts(x) & ContainsBilePigments(x)))", "all x y z.((Bile(x) & Liver(y) & HCO3(z)) -> (SynthesizedByLiver(x,y) & Contains(x,z) & Contains(x,y) & Contains(x,z)))", "all x.((Bile(x) & SynthesizedByLiver(x)) -> (ContainsHCO3(x) & ContainsBileSalts(x) & ContainsBilePigments(x)))", "(SynthesizedByLiver(bile) & ContainsHCO3Salts(bile) & ContainsBilePigments(bile))", "all x y.((Bile(x) & Liver(y)) -> (SynthesizedByLiver(x,y) & ContainsHCO3Salts(x) & ContainsBilePigments(x)))", "all x.(Bile(x) -> (SynthesizedByLiver(x) & ContainsHCO3(x) & ContainsBileSalts(x) & ContainsBilePigments(x)))", "(SynthesizedByLiver(bile) & ContainsHCO3Salts(bile) & ContainsBilePigments(bile))", "all x.(Bile(x) -> (SynthesizedByLiver(x) & ContainsHCO3Salts(x) & ContainsBilePigments(x)))", "(SynthesizedByLiver(bile) & ContainsHCO3(bileSalts) & ContainsBilePigments(bile))", "(SynthesizedByLiver(bile) -> (HCO3Salts(bile) & BilePigments(bile)))", "(SynthesizedByLiver(bile) & ContainsHCO3SaltsAndBilePigments(bile))"]}
{"id": "eqasc_validation_623", "nl": "The liver reduces the acidity of food entering from the highly acidic stomach.", "fol": "", "prediction": ["all x y.((Liver(x) & Food(y) & EntersFromHighlyAcidStomach(x,y)) -> ReducesAcidity(x,y))", "all x y z.((Liver(x) & Food(y) & AcidicStomach(z)) -> ReducesAcidity(x,y,z))", "all x.(Liver(x) -> ReducesAcidityOfFood(x))", "all x y.((Liver(x) & Food(y) & EntersFromAcidStomach(x,y)) -> ReducesAcidity(x,y))", "(all x.(Liver(x) -> ReducesAcidityOfFood(x)))", "(ReducesAcidityOfFood(heart) & EntersFromHighlyAcidicStomach(heart))", "all x y.((Liver(x) & Food(y) & EnteringFrom(x,y)) -> ReducesAcidity(x,y))", "all x y z.((Liver(x) & Food(y) & AcidicStomach(z)) -> ReducesAcidity(x,y,z))", "all x.(Liver(x) -> ReducesAcidityOfFood(x))", "all x y z.((Liver(x) & Food(y) & AcidicStomach(z) & EntersFrom(x,y,z)) -> ReducesAcidity(x,y,z))", "all x y.((Liver(x) & Food(y)) -> ReducesAcidity(x,y))", "all x.(Liver(x) -> ReducesAcidityOfFoodEntrantFromHighlyAcidicStomach(x))", "all x.(Liver(x) -> ReducesAcidityOfFood(x))", "all x y.((Liver(x) & Food(y) & EntersFromHighlyAcidStomach(x,y)) -> ReducesAcidity(x,y))", "All x.(Liver(x) -> ReducesAcidityOfFood(x))", "All x.(Liver(x) -> ReducesAcidity(x))"]}
{"id": "eqasc_validation_624", "nl": "Normally, bile acid pours into the stomach to help absorb fats from foods.", "fol": "", "prediction": ["all x y.((BileAcid(x) & Food(y)) -> PoursIntoStomach(x,y))", "all x.((BileAcid(x) & PoursIntoStomach(x)) -> AbsorbsFatsFromFoods(x))", "all x y z.((BileAcid(x) & Stomach(y) & Food(z)) -> PoursIntoToAbsorbFats(x,y,z))", "all x.(BileAcid(x) -> PoursIntoStomach(x))", "all x y.((BileAcid(x) & Food(y)) -> PoursIntoStomach(x,y))", "all x y.((BileAcid(x) & Food(y)) -> PoursIntoStomachToAbsorbFats(x,y))", "all x.((BileAcid(x) & PoursIntoStomach(x)) -> HelpsAbsorbFats(x))", "all x.(BileAcidPurpose(x) -> HelpsAbsorbFats(x))", "all x.(BileAcidPurposesIntoStomach(x) -> AbsorbsFatsFromFoods(x))", "all x y.((BileAcid(x) & Stomach(y)) -> PoursInto(x,y))", "all x y z.((BileAcid(x) & Stool(y) & Food(z)) -> PoursInto(x,y,z))", "all x.((BileAcid(x) & PoursIntoStomach(x)) -> AbsorbsFatsFromFoods(x))", "(all x.(BileAcid(x) -> PoursIntoStomach(x)))", "all x y.((Gliad(x) & Stomach(y)) -> PoursIntoToAbsorbFats(x,y))", "(all x.(BileAcid(x) -> PoursIntoStomach(x)))", "(all x.(Gliad(x) -> PoursIntoStomach(x)))"]}
{"id": "eqasc_validation_625", "nl": "Bile reduces acidity and helps to absorb fats from foods.", "fol": "", "prediction": ["all x.(Bile(x) -> (ReducesAcidity(x) & HelpsAbsorbFats(x)))", "all x y.((Bile(x) & Food(y)) -> (ReducesAcidity(x,y) & HelpsAbsorbFats(x,y)))", "all x y.((Bile(x) & Food(y)) -> (ReducesAcidity(x) & HelpsAbsorbFats(x,y)))", "all x.(Bile(x) -> (ReducesAcidity(x) & HelpsAbsorbFats(x)))", "all x y z.((Bile(x) & Acidity(y) & Fat(z)) -> (Reduces(x,y) & Absorbs(x,z)))", "all x.(Bile(x) -> (ReducesAcidity(x) & AbsorbsFats(x)))", "(all x.(Bile(x) -> ReducesAcidity(x)) & AbsorbsFatsFromFoods(x))", "all x.(Bile(x) -> (ReducesAcidity(x) & HelpsAbsorbFats(x)))", "all x y.((Bile(x) & Food(y)) -> (ReducesAcidity(x,y) & AbsorbsFats(x,y)))", "all x y z.((Bile(x) & Acidity(y) & Fat(z)) -> (Reduces(x,y) & HelpsAbsorb(x,z)))", "(all x.(Bile(x) -> ReducesAcidity(x)) & helpsAbsorbFatsFromFoods(x))", "all x y.((Bile(x) & Food(y)) -> (ReducesAcidity(x) & AbsorbsFats(x,y)))", "all x.(Bile(x) -> (ReducesAcidity(x) & HelpsAbsorbFats(x)))", "all x.(Bile(x) -> (ReducesAcidity(x) & AbsorbsFats(x)))", "(all x.(Bile(x) -> ReducesAcidity(x)) & AbsorbsFats(x))", "all x.(Bile(x) -> (ReducesAcidity(x) & HelpsAbsorbFatsFromFoods(x)))"]}
{"id": "eqasc_validation_626", "nl": "the liver plays a role in reducing the acidity of food entering from the highly acidic stomach", "fol": "", "prediction": ["all x y.((Liver(x) & Food(y) & EntersFromHighlyAcidStomach(x,y)) -> ReducesAcidity(x,y))", "all x y z.((Liver(x) & Food(y) & AcidicStomach(z)) -> ReducesAcidity(x,y,z))", "all x y.((Liver(x) & Food(y) & EntersFromAcidStomach(x,y)) -> ReducesAcidity(x,y))", "(all x y.((Liver(x) & Food(y) & EnteringFromHighlyAcidStomach(x,y)) -> ReducesAcidity(x,y)))", "all x.(Liver(x) -> ReducesAcidityOfFood(x))", "(all x.(Liver(x) -> ReducesAcidityOfFood(x)))", "all x y z.((Liver(x) & Food(y) & AcidicStomach(z)) -> ReducesAcidity(x,y,z))", "all x y z.((Liver(x) & Food(y) & AcidicStomach(z) & EntersFrom(x,y,z)) -> ReducesAcidity(x,y,z))", "all x y.((Liver(x) & Food(y)) -> ReducesAcidity(x,y))", "all x.(Liver(x) -> (ReducesAcidityOfFood(x) & EntersFromHighlyAcidicStomach(x)))", "all x.(Liver(x) -> ReducesAcidityOfFood(x))", "all x y.((Liver(x) & FoodEntry(y)) -> ReducesAcidity(x,y))", "all x y.((Liver(x) & Food(y) & EnteringFromHighlyAcidStomach(x,y)) -> ReducesAcidity(x,y))", "all x.(Liver(x) -> ReducesAcidityOfFood(x))", "all x y z.((Liver(x) & Food(y) & AcidicStomach(z)) -> ReducesAcidity(x,y,z))", "all x.(Liver(x) -> ReducesAcidityOfFoodEntrantFromAcidicStomach(x))"]}
{"id": "eqasc_validation_627", "nl": "bile absorbs fats", "fol": "", "prediction": ["all x.(Bile(x) -> AbsorbsFats(x))", "all x y.((Bile(x) & Fat(y)) -> Absorbs(x,y))", "all x.(Bile(x) -> AbsorbsFats(x))", "all x y z.((Bile(x) & Fats(y) & Fats(z)) -> Absorbs(x,y,z))", "all x y.((Bile(x) & Fat(y)) -> Absorbs(x,y))", "all x y.((Bile(x) & Fat(y)) -> Absorbs(x,y))", "(AbsorbsFats(bile))", "all x.(Bile(x) -> AbsorbsFats(x))", "all x y z.((Bile(x) & Fat(y) & Fat(z)) -> Absorbs(x,y,z))", "(AbsorbsFatsWithbile(bile))", "all x.(BileAbsorbsFats(x) -> AbsorbsFats(x))", "all x.(Bile(x) -> AbsorbsFats(x))", "all x.(BileAbsorbsFats(x) -> FatsAbsorbs(x))", "all x y.((Bile(x) & Fat(y)) -> Absorbs(x,y))", "(AbsorbsFats(bile))", "all x.(Bile(x) -> AbsorbsFats(x))"]}
{"id": "eqasc_validation_628", "nl": "Bile from the liver contains bile salts and many organic substances but no enzymes.", "fol": "", "prediction": ["all x.(Bile(x) -> (Liver(x) & ContainsBileSalts(x) & ContainsOtherOrganicSubstances(x) & -ContainsEnzymes(x)))", "all x.((Bile(x) & Liver(x)) -> (ContainsBileSalts(x) & ContainsOtherOrganicSubstances(x) & -ContainsEnzymes(x)))", "all x y.((Bile(x) & Liver(y)) -> (ContainsBileSalts(x,y) & ContainsOtherOrganicSubstances(x,y) & -ContainsEnzymes(x,y)))", "all x.(Bile(x) -> (ContainsBileSalts(x) & ContainsOtherOrganicSubstances(x) & -ContainsEnzymes(x)))", "(all x.(BileFromLiver(x) -> ContainsBileSalts(x)) & exists y.(OrganicSubstance(y) & Contains(x,y))))", "(all x.(Liver(x) -> ContainsBileSalts(x)) & exists y.(OrganicSubstance(y) & Contains(x,y))) & -exists z.(Enzyme(z) & Contains(x,z))))", "all x.((Bile(x) & Liver(x)) -> (ContainsBileSalts(x) & ContainsOtherOrganicSubstances(x) & -ContainsEnzymes(x)))", "all x y.((Bile(x) & Liver(y)) -> (ContainsBileSalts(x,y) & ContainsManyOrganicSubstances(x) & -ContainsEnzymes(x)))", "(all x.(BileFromLiver(x) -> ContainsBileSalts(x)) & exists y.(OrganicSubstance(y) & Contains(x,y))) & -exists z.(Enzyme(z) & Contains(x,z))))", "(all x.(Liver(x) -> ContainsBileSalts(x)) & exists y.(OrganicSubstance(y) & Contains(x,y))) & -exists z.(Enzyme(z) & Contains(x,z))))", "all x.(BileFromLiver(x) -> (ContainsBileSalts(x) & ContainsOtherOrganicSubstances(x) & -ContainsEnzymes(x)))", "all x y z.((Bile(x) & Liver(y) & BileSalts(z)) -> (Contains(x,z) & Contains(x,z)) & Contains(x,y) & Contains(x,z)))", "all x.(Liver(x) -> (ContainsBileSalts(x) & ContainsOtherOrganicSubstances(x) & -ContainsEnzymes(x)))", "all x.(Bile(x) -> (Liver(x) & ContainsBileSalts(x) & ContainsManyOrganicSubstances(x) & -ContainsEnzymes(x)))", "all x y.((Bile(x) & Liver(y)) -> (ContainsBileSalts(x) & ContainsOtherOrganicSubstances(x) & -ContainsEnzymes(x)))", "all x.((Bile(x) & Liver(x)) -> (ContainsBileSalts(x) & ContainsManyOrganicSubstances(x) & -ContainsEnzymes(x)))"]}
{"id": "eqasc_validation_629", "nl": "the liver helps reduce acidity of food entering from the highly acidic stomach", "fol": "", "prediction": ["all x y.((Liver(x) & Food(y) & EntersFromAcidStomach(x,y)) -> HelpsReduceAcidity(x,y))", "all x y z.((Liver(x) & Food(y) & AcidicStomach(z)) -> ReducesAcidity(x,y,z))", "all x y.((Liver(x) & Food(y) & EntersFromHighlyAcidicStomach(x,y)) -> HelpsReduceAcidity(x,y))", "(all x.(Liver(x) -> ReducesAcidityOfFood(x)) & EntersFromAcidicStomach(x))", "all x.(Liver(x) -> ReducesAcidityOfFood(x))", "all x y z.((Liver(x) & Food(y) & AcidicStomach(z) & EntersFrom(x,y,z)) -> HelpsReduceAcidity(x,y,z))", "(HelpsReduceAcidityOfFood(hepatocellular) & EntersFromHighlyAcidicStomach(hepatocellular))", "(all x y.((Liver(x) & Food(y) & EntersFromAcidStomach(x,y)) -> ReducesAcidity(x,y))", "all x.(Liver(x) -> HelpsReduceAcidityOfFood(x))", "all x y.((Liver(x) & Food(y) & HighlyAcidicStomach(y)) -> HelpsReduceAcidity(x,y))", "all x.(LiverHelpsReduceAcidityOfFood(x) -> EntersFromHighlyAcidicStomach(x))", "all x y.((Liver(x) & Food(y) & EnteringFromAcidStomach(x,y)) -> ReducesAcidity(x,y))", "all x y.((Liver(x) & AcidicStomach(y) & EnteringFrom(x,y)) -> HelpsReduceAcidity(x,y))", "all x.(Liver(x) -> ReducesAcidityOfFood(x))", "all x y z.((Liver(x) & Food(y) & AcidicStomach(z)) -> ReducesAcidity(x,y,z))", "all x.(Liver(x) -> HelpsReduceAcidityOfFood(x))"]}
{"id": "eqasc_validation_630", "nl": "Most hormones are regulated by feedback mechanisms.", "fol": "", "prediction": ["all x.(Hormone(x) -> RegulatesByFeedbackMechanisms(x))", "all x.(Hydrogen(x) -> RegulatesByFeedbackMechanisms(x))", "all x y.((Hormone(x) & FeedbackMechanism(y)) -> Regulates(x,y))", "(all x.(Hydrogen(x) -> RegulatesByFeedbackMechanisms(x))", "all x.(Hormone(x) -> RegulatesByFeedbackMechanisms(x))", "all x.(Holo(x) -> RegulatesByFeedbackMechanisms(x))", "all x y.((Hormone(x) & FeedbackMechanism(y)) -> Regulates(x,y))", "all x.(Hydrogen(x) -> RegulatesByFeedbackMechanisms(x))", "(all x.(Hormone(x) -> RegulatesByFeedbackMechanisms(x))", "(all x.(Hydrogen(x) -> RegulatesByFeedbackMechanisms(x))", "all x.(Hormone(x) -> RegulatesByFeedbackMechanisms(x))", "all x y.((Hormone(x) & FeedbackMechanism(y)) -> Regulate(x,y))", "all x.(Hannabin(x) -> RegulatesByFeedbackMechanisms(x))", "(all x.(Hormone(x) -> RegulatedByFeedbackMechanisms(x))", "all x.(Hormone(x) -> RegulatedByFeedbackMechanisms(x))", "exists x.(Holo(x) & RegulatesByFeedbackMechanisms(x))"]}
{"id": "eqasc_validation_631", "nl": "Hormones act as chemical messengers.", "fol": "", "prediction": ["all x.(Hormone(x) -> ChemicalMessenger(x))", "all x y.((Hormone(x) & ChemicalMessenger(y)) -> ActsAs(x,y))", "all x.(Hormone(x) -> ChemicalMessenger(x))", "(ActionsAsChemicalMessagers(hormone) -> Hormone(hormone))", "all x y.((Hormone(x) & ChemicalMessager(y)) -> ActsAs(x,y))", "all x.(Homone(x) -> ChemicalMessenger(x))", "all x y z.((Hormone(x) & ChemicalMessenger(y) & ChemicalMessenger(z)) -> ActsAs(x,y,z))", "all x.(Hormone(x) -> ChemicalMessager(x))", "all x y.((Homone(x) & ChemicalMessenger(y)) -> ActsAs(x,y))", "(AsChemicalMessager(hormone,hormone))", "all x y.((Hormone(x) & ChemicalMessenger(y)) -> ActsAs(x,y))", "all x.(Hormone(x) -> ChemicalMessenger(x))", "all x.(Homone(x) -> ChemicalMessenger(x))", "all x.(Hormone(x) -> ActsAsChemicalMessenger(x))", "all x.(Hormone(x) -> ChemicalMessager(x))", "all x.(Homone(x) -> ChemicalMessager(x))"]}
{"id": "eqasc_validation_632", "nl": "most chemical messengers are regulated by feedback mechanisms", "fol": "", "prediction": ["all x.(ChemicalMessenger(x) -> RegulatedByFeedbackMechanisms(x))", "all x y.((ChemicalMessenger(x) & ChemicalMessenger(y)) -> RegulatedByFeedbackMechanisms(x,y))", "(all x.(ChemicalMessenger(x) -> RegulatedByFeedbackMechanisms(x)))", "all x y z.((ChemicalMessenger(x) & FeedbackMechanism(y) & ChemicalMessenger(z)) -> RegulatesBy(x,y,z))", "all x.(ChemicalMessager(x) -> RegulatedByFeedbackMechanisms(x))", "all x y.((ChemicalMessager(x) & ChemicalMechanist(y)) -> RegulatedByFeedbackMechanisms(x,y))", "all x.(ChemicalMessenger(x) -> RegulatedByFeedbackMechanisms(x))", "(all x y.((ChemicalMessenger(x) & FeedbackMechanism(y)) -> Regulates(x,y)))", "all x y z.((ChemicalMessager(x) & FeedbackMechanism(y) & ChemicalMessager(z)) -> RegulatesBy(x,y,z))", "all x y.((ChemicalMessenger(x) & FeedbackMechanism(y)) -> Regulates(x,y))", "all x y.((ChemicalMessager(x) & ChemicalMessenger(y)) -> RegulatedByFeedbackMechanisms(x,y))", "all x.(ChemicalMessager(x) -> RegulatedByFeedbackMechanisms(x))", "(all x.(ChemicalMessenger(x) -> RegulatedByFeedbackMechanisms(x)))", "(all x.(ChemicalMessager(x) -> RegulatesByFeedbackMechanisms(x)))", "all x.(ChemicalMessenger(x) -> RegulatedByFeedbackMechanisms(x))", "all x.(ChemicalMask(x) -> RegulatedByFeedbackMechanisms(x))"]}
{"id": "eqasc_validation_633", "nl": "Hormonal production is regulated by enzymes.", "fol": "", "prediction": ["all x.(HormonalProduction(x) -> RegulatesByEnzymes(x))", "all x y.((HormonalProduction(x) & Enzyme(y)) -> Regulates(x,y))", "all x y z.((HormonalProduction(x) & Enzyme(y) & Enzyme(z)) -> Regulates(x,y,z))", "all x.(HormonalProduction(x) -> RegulatesByEnzymes(x))", "(RegulatesHormonalProduction(hormones) & Enzymes(endocrines))", "all x y.((HormonalProduction(x) & Enzyme(y)) -> Regulates(x,y))", "(EnzymesRegulateHormonalProduction(hormone) & Produces(hormone,enzyme))", "(RegulatesEnzymes(hormonalProduction) & HormonalProduction(hormonal))", "all x y.((HomonalProduction(x) & Enzyme(y)) -> Regulates(x,y))", "all x.(HormonalProduction(x) -> RegulatedByEnzymes(x))", "all x.(HomonalProduction(x) -> RegulatesByEnzymes(x))", "all x y.((HormonalProduction(x) & Enzyme(y)) -> Regulates(x,y))", "all x y z.((HormonalProduction(x) & Enzyme(y) & Enzyme(z)) -> Regulates(x,y,z))", "all x.(HormonalProduction(x) -> RegulatesByEnzymes(x))", "all x.(HormonalProduction(x) -> RegulatedByEnzymes(x))", "all x.(HormonalProduction(x) -> RegulatedByEnzymes(x))"]}
{"id": "eqasc_validation_634", "nl": "enzymes control hormones", "fol": "", "prediction": ["all x.(Enzyme(x) -> ControlsHormones(x))", "all x y.((Enzyme(x) & Hormone(y)) -> Controls(x,y))", "all x y z.((Enzyme(x) & Hormone(y) & Enzyme(z)) -> Controls(x,y,z))", "all x.(Enzyme(x) -> ControlsHydrogens(x))", "all x y.((Enzyme(x) & Hormone(y)) -> Controls(x,y))", "(ControlsHormones(enzyme) & Enzymes(enzyme,hormone))", "all x y z.((Enzyme(x) & Hormone(y) & Enzyme(z) & Controls(x,y,z)) -> Controls(x,y))", "(ControlsHormonesWithEnzymes(enzyme))", "all x.(Enzyme(x) -> ControlsHormones(x))", "all x.(EnzymesControlHydrogens(x) -> EnzymesControlHydrogens(x))", "all x y.((Enzyme(x) & Hormone(y)) -> Controls(x,y))", "all x y z.((Enzyme(x) & Hormone(y) & Hormone(z) & Controls(x,y)) -> Enzymes(x))", "all x.(Enzymes(x) -> ControlsHydrogens(x))", "all x y.((Enzyme(x) & Hormone(y)) -> Controls(x,y))", "all x.(Enzyme(x) -> ControlsHormones(x))", "all x.(Enzyme(x) -> ControlsHoneys(x))"]}
{"id": "eqasc_validation_635", "nl": "Hormones are chemical messengers in the body.", "fol": "", "prediction": ["all x.(Hormone(x) -> ChemicalMessenger(x))", "all x y.((Hormone(x) & Body(y)) -> ChemicalMessenger(x,y))", "all x.(Hormone(x) -> ChemicalMessager(x))", "all x.(Homone(x) -> ChemicalMessengerInBody(x))", "(ChemicalMessager(hormone) & InBody(hormone))", "all x y z.((Hormone(x) & Body(y) & ChemicalMessenger(z)) -> InBody(x,y,z))", "all x y.((Hormone(x) & Body(y)) -> ChemicalMessager(x,y))", "all x.(Hormone(x) -> ChemicalMessenger(x))", "all x y.((Homone(x) & Body(y)) -> ChemicalMessenger(x,y))", "(ChemicalMessenger(hormone) & InBody(hormone,y))", "all x y.((Hormone(x) & ChemicalMessenger(y)) -> InBody(x,y))", "all x.(Hormone(x) -> ChemicalMessager(x))", "all x.(Homone(x) -> ChemicalMessager(x))", "all x.(Hormone(x) -> ChemicalMessager(x))", "all x.(Homone(x) -> ChemicalMessengerInBody(x))", "all x.(Hormone(x) -> ChemicalMessager(x))"]}
{"id": "eqasc_validation_636", "nl": "Most chemical messengers in the body are regulated by feedback mechanisms.", "fol": "", "prediction": ["all x.(ChemicalMessenger(x) -> RegulatedByFeedbackMechanisms(x))", "all x y.((ChemicalMessenger(x) & Body(y)) -> RegulatesByFeedbackMechanisms(x,y))", "all x.((ChemicalMessenger(x) & Body(x)) -> RegulatedByFeedbackMechanisms(x))", "all x y z.((ChemicalMessenger(x) & Body(y) & FeedbackMechanism(z)) -> Regulates(x,y,z))", "all x.(ChemicalMessenger(x) -> RegulatesByFeedbackMechanisms(x))", "all x.(ChemicalMessager(x) -> RegulatesByFeedbackMechanisms(x))", "all x y.((ChemicalMessager(x) & Body(y)) -> RegulatesByFeedbackMechanisms(x,y))", "all x y.((ChemicalMessenger(x) & Body(y)) -> RegulatedByFeedbackMechanisms(x,y))", "(all x.(ChemicalMessenger(x) -> RegulatedByFeedbackMechanisms(x))", "(all x.(ChemicalMessager(x) -> RegulatesByFeedbackMechanisms(x))", "all x.((ChemicalMessenger(x) & InBody(x)) -> RegulatedByFeedbackMechanisms(x))", "(all x.(ChemicalMessager(x) -> RegulatesFeedbackMechanisms(x))", "exists x.(ChemicalMessage(x) & RegulatesByFeedbackMechanisms(x))", "all x.(ChemicalMessager(x) -> RegulatedByFeedbackMechanisms(x))", "all x y.((ChemicalMessenger(x) & Body(y)) -> RegulatesByFeedbackMechanisms(x,y))", "all x.(ChemicalMessenger(x) -> RegulatedByFeedbackMechanisms(x))"]}
{"id": "eqasc_validation_637", "nl": "Chemical messengers in the body are regulated by feedback mechanisms.", "fol": "", "prediction": ["all x y.((ChemicalMessenger(x) & Body(y)) -> RegulatesByFeedbackMechanisms(x,y))", "all x.(ChemicalMessenger(x) -> RegulatesByFeedbackMechanisms(x))", "all x.((ChemicalMessenger(x) & Body(x)) -> RegulatesByFeedbackMechanisms(x))", "all x y z.((ChemicalMessenger(x) & Body(y) & FeedbackMechanism(z)) -> Regulates(x,y,z))", "all x y.((ChemicalMessager(x) & Body(y)) -> RegulatesByFeedbackMechanisms(x,y))", "(all x.(Chemist(x) -> RegulatesByFeedbackMechanisms(x))", "all x y.((ChemicalMessenger(x) & Body(y)) -> RegulatesByFeedbackMechanisms(x,y))", "all x y.((Chemist(x) & Body(y)) -> RegulatesByFeedbackMechanisms(x,y))", "all x.((ChemicalMessager(x) & InBody(x)) -> RegulatesByFeedbackMechanisms(x))", "all x.(ChemicalMessenger(x) -> RegulatesByFeedbackMechanisms(x))", "all x.(ChemicalMessager(x) -> RegulatesByFeedbackMechanisms(x))", "all x y z.((ChemicalMessenger(x) & Body(y) & FeedbackMechanism(z)) -> Regulates(x,y,z))", "all x.(ChemicalMessager(x) -> RegulatesByFeedbackMechanisms(x))", "(all x.(ChemicalMessager(x) -> RegulatesByFeedbackMechanisms(x)))", "all x.(ChemistryMechanist(x) -> RegulatesByFeedbackMechanisms(x))", "all x y.((ChemicalMessager(x) & Body(y)) -> RegulatesByFeedbackMechanisms(x,y))"]}
{"id": "eqasc_validation_638", "nl": "Hormones help the body manage stress.", "fol": "", "prediction": ["all x.(Hormone(x) -> HelpsBodyManageStress(x))", "all x y.((Hormone(x) & Body(y)) -> HelpsManageStress(x,y))", "all x.(Hormone(x) -> HelpsBodyManageStress(x))", "all x y.((Homone(x) & Body(y)) -> HelpsManageStress(x,y))", "all x y z.((Hormone(x) & Body(y) & Stress(z)) -> HelpsManage(x,y,z))", "all x.(Homone(x) -> HelpsBodyManageStress(x))", "all x y.((Hormone(x) & Body(y)) -> HelpsManageStress(x,y))", "(HelpsBodyManageStress(hormone) & Hormones(hormones))", "all x.(Hormone(x) -> HelpsBodyManageStress(x))", "all x.(Homone(x) -> HelpsBodyManageStress(x))", "all x y.((Homone(x) & Body(y)) -> HelpsManageStress(x,y))", "all x y.((Hormone(x) & Body(y)) -> HelpsManageStress(x,y))", "all x.(Hormone(x) -> HelpsBodyManageStress(x))", "all x.(Hormone(x) -> HelpsManageStress(x))", "all x.(Homone(x) -> HelpsBodyManageStress(x))", "all x.(Hormone(x) -> HelpsBodyManageStress(x))"]}
{"id": "eqasc_validation_639", "nl": "Managing the body's stress is regulated by feedback mechanisms", "fol": "", "prediction": ["all x y.((Body(x) & Body(y)) -> ManagesStress(x,y))", "all x.(ManagingBodyStress(x) -> FeedbackMechanisms(x))", "all x y z.((Body(x) & Body(y) & Stress(z)) -> (Regulates(x,y,z) & FeedbackMechanisms(x)))", "all x y.((Body(x) & Body(y)) -> (RegulatesStress(x,y) & FeedbackMechanisms(x)))", "all x.((Body(x) & BodyStress(x)) -> RegulatesFeedbackMechanisms(x))", "(ManagingBodyStress(BodyStress) & FeedbackMechanisms(BodyStress))", "all x y z.((Body(x) & Body(y) & Stress(z)) -> (RegulatesFeedbackMechanisms(x,y,z) & RegulatesFeedbackMechanisms(x,y)))", "all x y.((Body(x) & Body(y) & Stress(z)) -> RegulatesFeedbackMechanisms(x,y,z))", "all x.((Body(x) & Body(y)) -> ManagesStress(x,y))", "all x.((BodysStress(x) & FeedbackMechanisms(x)) -> RegulatesStressManagement(x))", "all x.(ManagingBodyStress(x) -> FeedbackMechanisms(x))", "(ManagingBodyStress(BodyStress) & FeedbackMechanisms(BodyStress))", "all x y z.((Body(x) & BodyStress(y) & FeedbackMechanism(z)) -> RegulatesManaging(x,y,z))", "all x.(ManagingStress(x) -> FeedbackMechanisms(x))", "all x y.((Body(x) & Body(y) & Stress(z)) -> RegulatesFeedbackMechanisms(x,y,z))", "all x.(ManagingStress(x) -> FeedbackMechanisms(x))"]}
{"id": "eqasc_validation_640", "nl": "Female hormone is estrogen.", "fol": "", "prediction": ["all x.(FemaleHormone(x) -> Estrogen(x))", "all x.(FemaleHydrogen(x) -> Estrogen(x))", "(FemaleHormone(x) -> Estrogen(x))", "all x y.((FemaleHormone(x) & Hormone(y)) -> Estrogen(x))", "(FemaleHydrogen(female) & Estrogen(female))", "(FemaleHydrogen(x) -> Estrogen(x))", "all x.(FemaleHormone(x) -> Estrogen(x))", "all x.(FemaleHydrogen(x) -> Estrogen(x))", "all x y.((FemaleHormone(x) & Hormone(y)) -> Estrogen(x))", "all x y.((FemaleHydrogen(x) & Hormone(y)) -> Estrogen(x))", "all x.(FemaleHormone(x) -> Estrogen(x))", "all x.(FemaleHolotype(x) -> Estrogen(x))", "all x.(FemaleHydrogen(x) -> Estrogen(x))", "All x.(FemaleHormone(x) -> Ester(x))", "All x.(FemaleHydrogen(x) -> Estrogen(x))", "All x.(FemaleHolotype(x) -> Estrogen(x))"]}
{"id": "eqasc_validation_641", "nl": "estrogen is regulated by feedback mechanisms.", "fol": "", "prediction": ["all x.(Estrogen(x) -> RegulatesByFeedbackMechanisms(x))", "all x y.((Estrogen(x) & FeedbackMechanism(y)) -> Regulates(x,y))", "(RegulatedByFeedbackMechanisms(estrogen)", "(RegulatesFeedbackMechanisms(estrogen) & -RegulatesFeedbackMechanisms(estrogen))", "all x.(Estrogen(x) -> RegulatesByFeedbackMechanisms(x))", "(all x.(Estrogen(x) -> RegulatesByFeedbackMechanisms(x))", "all x.((Estrogen(x) & FeedbackMechanism(x)) -> Regulates(x,estrogen))", "all x y.((Estrogen(x) & FeedbackMechanism(y)) -> Regulates(x,y))", "all x.(Estrogen(x) -> RegulatesByFeedbackMechanisms(x))", "(RegulatesFeedbackMechanisms(estrogen))", "all x y.((Estrogen(x) & FeedbackMechanism(y)) -> Regulates(x,y))", "all x.(Estrogen(x) -> RegulatedByFeedbackMechanisms(x))", "all x y.((Estrogen(x) & FeedbackMechanism(y)) -> Regulates(x,y))", "all x.(Estrogen(x) -> RegulatedByFeedbackMechanisms(x))", "all x.(Estrogen(x) -> RegulatedByFeedbackMechanisms(x))", "all x.(Estrogen(x) -> RegulatesThroughFeedback(x))"]}
{"id": "eqasc_validation_642", "nl": "Feedback mechanisms are necessary to control uncertainty.", "fol": "", "prediction": ["all x.(FeedbackMechanism(x) -> ControlsIncertitude(x))", "all x y.((FeedbackMechanism(x) & Uncertainty(y)) -> NecessaryToControl(x,y))", "all x.(FeedbackMechanism(x) -> ControlsUncertainty(x))", "all x.((FeedbackMechanism(x) & ControlsIncertitude(x)) -> Necessary(x))", "all x y.((FeedbackMechanism(x) & Uncertainty(y)) -> NecessaryToControl(x,y))", "all x.(FeedbackMechanism(x) -> ControlsIncertitude(x))", "(all x.(FeedbackMechanism(x) -> ControlsUncertainty(x)))", "all x.(FeedbackMechanism(x) -> ControlsUncertainty(x))", "all x y.((FeedbackMechanism(x) & Uncertainty(y)) -> NecessaryToControl(x,y))", "all x y.((FeedbackMechanism(x) & Incertitude(y)) -> NecessaryToControl(x,y))", "(all x.(FeedbackMechanism(x) -> ControlsIncertitude(x)))", "all x.(FeedbackMechanism(x) -> ControlsIncertitude(x))", "all x.(FeedbackMechanism(x) -> ControlIncertitude(x))", "all x y.((FeedbackMechanism(x) & Uncertainty(y)) -> NecessaryForControl(x,y))", "all x.(FeedbackMechanism(x) -> ControlsUncertainty(x))", "exists x.(FeedbackMechanism(x) & ControlIncertitude(x))"]}
{"id": "eqasc_validation_643", "nl": "Most hormones are regulated by necessarily controlling uncertainty", "fol": "", "prediction": ["all x.(Hormone(x) -> (RegulatedByControllingIncertitude(x) & ControlsIncertitude(x)))", "(all x.(Hydrogen(x) -> Regulates(x)) & ControlsIncertitude(x))", "all x y.((Hormone(x) & Uncertainty(y)) -> RegulatesByControlling(x,y))", "all x.(Hydrogen(x) -> (RegulatedByControllingIncertitude(x) & -RegulatesIncertitude(x)))", "all x.(Hormone(x) -> (RegulatedByControllingUncertainty(x) & ControlsUncertainty(x)))", "all x y z.((Hormone(x) & Uncertainty(y) & Uncertainty(z)) -> RegulatedByControlling(x,y,z))", "all x y.((Hydrogen(x) & Uncertainty(y)) -> RegulatesByControlling(x,y))", "(all x.(Hormone(x) -> Regulates(x)))", "all x y.((Hormone(x) & Uncertainty(y)) -> RegulatedByControlling(x,y))", "all x.(Hormone(x) -> RegulatedByControllingIncertitude(x))", "-all x.(Hormone(x) -> RegulatedByControllingUncertainty(x))", "all x.(Holo(x) -> (RegulatedByControllingIncertitude(x) & ControlsIncertitude(x)))", "(all x.(Hormone(x) -> Regulates(x)) & ControlsIncertitude(x))", "all x.(Hydrogen(x) -> (RegulatedByControllingIncertitude(x) & ControlsIncertitude(x)))", "(all x.(Hydrogen(x) -> Regulates(x,y)))", "all x.(Hormone(x) -> (RegulatedByControllingIncertitude(x) & -RegulatesIncertitude(x)))"]}
{"id": "eqasc_validation_644", "nl": "Hormones regulate pancreatic secretions.", "fol": "", "prediction": ["all x.(Hormone(x) -> RegulatesPancreaticSections(x))", "all x y.((Hormone(x) & PancreaticSectision(y)) -> Regulates(x,y))", "(all x.(Hormone(x) -> RegulatesPancreaticSections(x)))", "all x.(Hormone(x) -> RegulatesPancreaticSections(x))", "all x y.((Hormone(x) & PancreaticSectition(y)) -> Regulates(x,y))", "all x y z.((Hormone(x) & PancreaticSectision(y) & Hormone(z)) -> Regulates(x,y,z))", "(all x.(Hormone(x) -> RegulatesPancreaticSections(x)))", "all x y.((Homone(x) & PancreaticSectision(y)) -> Regulates(x,y))", "all x.(Hormone(x) -> RegulatesPancreaticSections(x))", "all x.(Homone(x) -> RegulatesPancreaticSections(x))", "all x y.((Hormone(x) & PancreaticSection(y)) -> Regulates(x,y))", "all x y.((Hormone(x) & PancreaticSectition(y) & Regulates(x,y)) -> Regulates(x,y))", "all x.(Hormone(x) -> RegulatesPancreaticSectations(x))", "all x.( Hormone(x) -> RegulatesPancreaticSections(x))", "all x.(Hormone(x) -> RegulatesPancreaticSections(x))", "all x.(Hormone(x) -> RegulatesPancreaticSectations(x))"]}
{"id": "eqasc_validation_645", "nl": "Feedback mechanisms regulate pancreatic secretions", "fol": "", "prediction": ["all x y.((FeedbackMechanism(x) & PancreaticSectiions(y)) -> Regulates(x,y))", "all x.(FeedbackMechanism(x) -> RegulatesPancreaticSections(x))", "all x y z.((FeedbackMechanism(x) & PancreaticSectiions(y) & PancreaticSectiions(z)) -> Regulates(x,y,z))", "all x y.((FeedbackMechanism(x) & PancreaticSectision(y)) -> Regulates(x,y))", "all x.(FeedbackMechanism(x) -> RegulatesPancreaticSections(x))", "all x.((FeedbackMechanism(x) & PancreaticSectiions(x)) -> Regulates(x,pancreaticSectiions))", "all x y z.((FeedbackMechanism(x) & PancreaticSection(y) & PancreaticSection(z)) -> Regulates(x,y,z))", "all x y z.((FeedbackMechanism(x) & PancreaticSectition(y) & PancreaticSectition(z)) -> Regulates(x,y,z))", "all x y.((FeedbackMechanism(x) & PancreaticSectition(y) & Regulates(x,y)) -> Regulates(x,y))", "all x.(FeedbackMechanism(x) -> RegulatesPancreaticSections(x))", "all x y.((FeedbackMechanism(x) & PancreaticSection(y)) -> Regulates(x,y))", "all x.(FeedbackMechanism(x) -> RegulatesPancreaticSectiions(x))", "all x y.((FeedbackMechanism(x) & PancreaticSectiton(y) & Regulates(x,y)) -> Regulates(x,y))", "all x.(FeedbackMechanism(x) -> RegulatesSectainings(x,pancreatic))", "all x.(FeedbackMechanism(x) -> RegulatesPancreaticSectations(x))", "all x.(FeedbackMechanism(x) -> RegulatesPancreaticSections(x))"]}
{"id": "eqasc_validation_646", "nl": "Homeostasis involves negative feedback mechanisms.", "fol": "", "prediction": ["all x.(Homeostasis(x) -> InvolvesNegativeFeedbackMechanisms(x))", "all x y.((Homeostasis(x) & NegativeFeedbackMechanisms(y)) -> Involves(x,y))", "all x.(Homeostasis(x) -> NegativeFeedbackMechanisms(x))", "(InvolvesNegativeFeedbackMechanisms(Homeostasis) -> Involves(Homeostasis,NegativeFeedback))", "(NegativeFeedbackMechanisms(Homeostasis) -> Involves(Homeostasis,9))", "all x y.((Homeostasis(x) & NegativeFeedback(y)) -> Involves(x,y))", "all x.(Homeostasis(x) -> InvolvesNegativeFeedbackMechanisms(x))", "all x.(Honeyostasis(x) -> InvolvesNegativeFeedbackMechanisms(x))", "all x.(Homeostasis(x) -> NegativeFeedbackMechanisms(x))", "all x y.((Homeostasis(x) & NegativeFeedbackMechanisms(y)) -> Involves(x,y))", "all x.(Homeostasis(x) -> InvolvesNegativeFeedbackMechanisms(x))", "All x y.((Homeostasis(x) & NegativeFeedback(y)) -> Involves(x,y))", "all x.(Hospital(x) -> InvolvesNegativeFeedbackMechanisms(x))", "all x.(Homeostasis(x) -> NegativeFeedbackMechanisms(x))", "all x.(Homeostasis(x) -> NegativeFeedbackMechanisms(x))", "all x.(Homeostasis(x) -> InvolvesNegativeFeedbackMechanisms(x))"]}
{"id": "eqasc_validation_647", "nl": "hormones are regulated by homeostasis", "fol": "", "prediction": ["all x.(Hormone(x) -> RegulatesByHomeostasis(x))", "all x y.((Hormone(x) & Hormone(y)) -> RegulatesByHomeostasis(x,y))", "all x y.((Hormone(x) & Homeostasis(y)) -> RegulatesBy(x,y))", "all x.(Hydrogen(x) -> RegulatesByHomeostasis(x))", "all x y z.((Hormone(x) & Homeostasis(y) & Hormone(z)) -> RegulatesByHomeostasis(x,y,z))", "(all x.(Hydrogen(x) -> RegulatesByHomeostasis(x)))", "(all x y.((Hormone(x) & Homeostasis(y)) -> RegulatesBy(x,y)))", "all x.(Hormone(x) -> RegulatesByHomeostasis(x))", "(all x.(Hormone(x) -> RegulatesByHomeostasis(x)))", "all x y.((Holotype(x) & Hormone(y)) -> RegulatesByHomeostasis(x,y))", "all x.(Honeyostasis(x) -> RegulatesHormones(x))", "all x y z.((Hormone(x) & Homeostasis(y) & Hormone(z)) -> RegulatesBy(x,y,z))", "all x y.((Hormone(x) & Homeostasis(y)) -> Regulates(x,y))", "all x.(Hormone(x) -> RegulatedByHomeostasis(x))", "all x.(Honeyostasis(x) -> RegulatesHormonesByHomeostasis(x))", "all x.(Hydrogen(x) -> RegulatesByHomeostasis(x))"]}
{"id": "eqasc_validation_648", "nl": "Much hormonal regulation depends on feedback loops to maintain balance and homeostasis.", "fol": "", "prediction": ["all x.((HydrogenolaryRegulation(x) & FeedbackLoops(x)) -> (MaintainsBalance(x) & MaintainsHomeostasis(x)))", "all x.((HolisticRegulation(x) & FeedbackLoops(x)) -> (MaintainsBalance(x) & MaintainsHomeostasis(x)))", "all x y.((HormonalRegulation(x) & FeedbackLoops(y)) -> (MaintainsBalance(x) & MaintainsHomeostasis(x)))", "all x.((HormonalRegulation(x) & FeedbackLoops(x)) -> (MaintainsBalance(x) & MaintainsHomeostasis(x)))", "all x y.((HydrogenolaryRegulation(x) & FeedbackLoops(y)) -> (MaintainsBalance(x) & MaintainsHomeostasis(x)))", "(MostHolisticRegulation(hormonal) & DependsOnFeedbackLoops(hormonal) & MaintainsBalanceAndHomeostasis(hormonal))", "all x.((OralRegulation(x) & FeedbackLoops(x)) -> (MaintainsBalance(x) & MaintainsHomeostasis(x)))", "(MuchOldRationalRegulationDependsOnFeedbackLoops(hormonal) & MaintainsBalanceAndHomeostasis(hormonal))", "(all x.((HydrogenolaryRegulation(x) & FeedbackLoops(x)) -> MaintainsBalanceAndHomeostasis(x)))", "all x y.((HolisticRegulation(x) & FeedbackLoops(y)) -> (MaintainsBalance(x) & MaintainsHomeostasis(x)))", "all x.(HydrogenolaryRegulation(x) -> (DependsOnFeedbackLoops(x) & MaintainsBalance(x) & MaintainsHomeostasis(x)))", "all x.((HydrogenolaryRegulation(x) & FeedbackLoops(x)) -> (MaintainsBalance(x) & MaintainsHomeostasis(x)))", "all x.((HolisticRegulation(x) & DependsOnFeedbackLoops(x)) -> MaintainsBalanceAndHomeostasis(x))", "all x y.((OralRegulation(x) & FeedbackLoops(y)) -> (MaintainsBalance(x,y) & MaintainsHomeostasis(x,y)))", "all x.(HydrogenolaryRegulation(x) -> (DependsOnFeedbackLoops(x) & MaintainsBalance(x) & MaintainsHomeostasis(x)))", "exists x.(OralRegulation(x) & DependsOnFeedbackLoops(x))"]}
{"id": "eqasc_validation_649", "nl": "Hormones maintain balance with feedback loops", "fol": "", "prediction": ["all x.(Hormone(x) -> MaintainsBalanceWithFeedbackLoops(x))", "all x y.((Hormone(x) & FeedbackLoop(y)) -> MaintainsBalanceWith(x,y))", "all x.(Hormone(x) -> (MaintainsBalance(x) & FeedbackLoops(x)))", "all x y z.((Hormone(x) & FeedbackLoops(y) & Balance(z)) -> MaintainsBalanceWith(x,y,z))", "(MaintainsBalanceWithFeedbackLoops(hormone) & Hormone(hormone))", "all x y.((Hormone(x) & FeedbackLoops(y)) -> MaintainsBalanceWith(x,y))", "all x.((Hormone(x) & BalanceWithFeedbackLoops(x)) -> MaintainsBalanceWithFeedbackLoops(x))", "(all x.(Hormone(x) -> MaintainsBalanceWithFeedbackLoops(x)))", "all x.(Hormone(x) -> (MaintainsBalanceWithFeedbackLoops(x) & MaintainsBalanceWithFeedbackLoops(x)))", "all x y z.((Hormone(x) & FeedbackLoop(y) & Balance(z)) -> MaintainsBalanceWith(x,y,z))", "all x.(Hormone(x) -> MaintainsBalanceWithFeedbackLoops(x))", "all x y.((Homone(x) & FeedbackLoop(y)) -> MaintainsBalanceWith(x,y))", "all x.(Homone(x) -> MaintainsBalanceWithFeedbackLoops(x))", "all x y.((Hormone(x) & FeedbackLoop(y)) -> MaintainsBalanceWith(x,y))", "all x y z.((Hormone(x) & FeedbackLoop(y) & Balance(z)) -> MaintainsBalanceWith(x,y,z))", "all x.(Hormone(x) -> MaintainsBalanceWithFeedbackLoops(x))"]}
{"id": "eqasc_validation_650", "nl": "Absorption of nutrients occurs mainly in the small intestine.", "fol": "", "prediction": ["all x.(AbsorptionOfNutrients(x) -> OccursInSmallintestine(x))", "all x y.((AbsorptionOfNutrients(x) & SmallIntestine(y)) -> OccursIn(x,y))", "all x y.((SmallIntestine(x) & AbsorptionOfNutrients(y)) -> OccursIn(x,y))", "all x.(AbsorptionOfNutrients(x) -> SmallIntestine(x))", "(AbsorptionOfNutrients(a) & SmallIntestine(b))", "all x y.((Absorption(x) & Nutrients(y)) -> OccursInSmallIntestine(x,y))", "all x.(AbsorbsNutrients(x) -> OccursInSmallintestine(x))", "all x y z.((AbsorptionOfNutrients(x) & SmallIntestine(y) & SmallIntestine(z)) -> OccursIn(x,y,z))", "all x y.((SmallIntestine(x) & NutrientAbsorption(y)) -> OccursIn(x,y))", "all x.(AbsorptionOfNutrients(x) -> OccursInSmallIntestine(x))", "all x y.((AbsorbsNutrients(x) & SmallIntestine(y)) -> OccursIn(x,y))", "exists x.(SmallIntestine(x) & AbsorbsNutrients(x))", "all x.(AbsorbsNutrients(x) -> SmallIntestine(x))", "all x y.((SmallIntestine(x) & AbsorptionOfNutrients(x,y)) -> OccursIn(x,y))", "all x.(AbsorptionOfNutrients(x) -> SmallIntestine(x))", "exists x.(SmallIntestine(x) & AbsorbsNutrients(x))"]}
{"id": "eqasc_validation_651", "nl": "Nutrients are elements needed for growth in all living plants and animals.", "fol": "", "prediction": ["all x.(Nutrient(x) -> (NeedsForGrowth(x) & InLivingPlantsAndAnimals(x)))", "all x y.((Nutrient(x) & LivingPlant(y) & LivingAnimal(y)) -> NeededForGrowth(x,y))", "all x.(Nutrient(x) -> (NeedsForGrowth(x) & InAllLivingPlantsAndAnimals(x)))", "(all x.(Nutrient(x) -> NeededForGrowthInLivingPlantsAndAnimals(x)))", "all x.(Nutrient(x) -> (NeededForGrowth(x) & InAllLivingPlantsAndAnimals(x)))", "all x y.((Nutrient(x) & LivingPlant(y) & LivingAnimal(y)) -> NeededForGrowth(x,y))", "all x y z.((Nutrient(x) & LivingPlant(y) & Animal(z)) -> (NeedsForGrowth(x,y,z) & NeededForGrowth(x,y)))", "(all x.(Nutrient(x) -> NeededForGrowthInLivingPlantsAndAnimals(x)))", "all x y z.((Nutrient(x) & LivingPlant(y) & Animal(z)) -> NeededForGrowth(x,y,z))", "all x y.((Nutrient(x) & LivingPlant(y) & LivingAnimal(y)) -> NeededForGrowth(x,y))", "all x.(Nutrient(x) -> (NeedsForGrowth(x) & InLivingPlantsAndAnimals(x)))", "all x.(Nutrients(x) -> (NeedsForGrowthInLivingPlantsAndAnimals(x)))", "all x.(Nutrient(x) -> NeededForGrowth(x))", "all x.(Nutrient(x) -> (NeededForGrowth(x) & InLivingPlantsAndAnimals(x)))", "all x y.((Nutrient(x) & LivingPlant(y) & LivingAnimal(y)) -> NeededForGrowth(x,y))", "all x.(Nutrient(x) -> NeededForGrowth(x))"]}
{"id": "eqasc_validation_652", "nl": "the small intestine is needed for humans to grow and live", "fol": "", "prediction": ["all x y.((SmallIntestine(x) & Human(y)) -> NeededForGrowthAndLive(x,y))", "all x.(SmallIntestine(x) -> NeededForHumansToGrowAndLive(x))", "all x y z.((SmallIntestine(x) & Human(y) & Growth(z) & Live(y)) -> NeededForGrowthAndLive(x,y,z))", "all x.(SmallIntestine(x) -> (NeedsSmallIntestine(x) & GrowsAndLives(x) & HumansCanLive(x)))", "all x y.((SmallIntestine(x) & Human(y)) -> NeededForGrowthAndLive(x,y))", "all x y z.((SmallIntestine(x) & Human(y) & GrowAndLive(z)) -> NeededForGrowthAndLive(x,y,z))", "(NeedsSmallIntestine(s) & GrowsAndLives(s,h) & Humans(h))", "(all x.(SmallIntestine(x) -> NeededForGrowthAndLive(x)))", "all x y.((SmallIntestine(x) & Human(y)) -> (NeedsSmallIntestine(x,y) & GrowsAndLives(y)))", "all x.(SmallIntestine(x) -> (NeedsForHumansToGrow(x) & NeedsForHumansToLive(x)))", "all x.((SmallIntestine(x) & NeededForHumans(x)) -> GrowsAndLives(x))", "all x.(SmallIntestine(x) -> NeededForHumansToGrowAndLive(x))", "all x y.((SmallIntestine(x) & Human(y) & GrowsAndLives(y,x)) -> NeededForGrowthAndLive(x,y))", "all x y z.((SmallIntestine(x) & Human(y) & Growth(z) & Live(y)) -> NeededFor(x,y,z))", "all x.(SmallIntestine(x) -> NeededForGrowthAndLive(x))", "All x.(SmallIntestine(x) -> NeededForHumansToGrowAndLive(x))"]}
{"id": "eqasc_validation_653", "nl": "Small Intestine Structurally, the small intestine is a tubular organ.", "fol": "", "prediction": ["all x.(SmallIntestine(x) -> TubularOrgan(x))", "(SmallIntestine(s) & StructurallySmallIntestine(s) & TubularOrgan(s))", "all x y.((SmallIntestine(x) & SmallIntestine(y)) -> TubularOrgan(x))", "all x.(SmallIntestine(x) -> TubularOrgan(x))", "all x.((SmallIntestine(x) & StructurallySmallIntestine(x)) -> TubularOrgan(x))", "(SmallIntestine(s) & Structurally(s) & SmallIntestine(s) & TubularOrgan(s))", "(SmallIntestine(s) & StructurallySmallIntestine(s) & TubularOrgan(s))", "All x y.((SmallIntestine(x) & StructurallySmallIntestine(y)) -> TubularOrgan(x,y))", "all x y.((SmallIntestine(x) & SmallIntestine(y)) -> TubularOrgan(x,y))", "all x.(SmallIntestine(x) -> TuberculousOrgan(x))", "all x.(SmallIntestine(x) -> TubularOrgan(x))", "All x y.((SmallIntestine(x) & TubularOrgan(y)) -> StructurallySmallIntestine(x))", "all x.(SmallIntestine(x) -> (TuberculousOrgan(x) & Structurally(x)))", "all x.((SmallIntestine(x) & Structurally(x)) -> TubularOrgan(x))", "all x.(SmallIntestine(x) -> TubularOrgan(x))", "all x.(SmallIntestine(x) -> TuberculousOrgan(x))"]}
{"id": "eqasc_validation_654", "nl": "Absorption of nutrients occurs mainly in a tubular organ.", "fol": "", "prediction": ["all x y.((AbsorptionOfNutrients(x) & TubularOrgan(y)) -> OccursIn(x,y))", "all x.(AbsorptionOfNutrients(x) -> TubularOrgan(x))", "(AbsorbsNutrientsInTumulusOrgan(AbsorbsNutrientsInTumulus(AbsorbsNutrientsInTumulus(AbsorbsNutrientsInTumulus(AbsorbsNutrientsInTumulus(AbsorbsNutrientsInTumulus(AbsorbsNutrientsInTumulus(AbsorbsNutrientsInTumulus(AbsorbsNutrientsInTumulus(AbsorbsNutrientsInTumulus(AbsorbsNutrientsInTumulus(AbsorbsNutrientsInTumulus(AbsorbsNutrientsInTumulus(AbsorbsNutrientsInTumulus(a))", "all x y.((TubularOrgan(x) & NutrientAbsorption(x,y)) -> OccursIn(x,y))", "all x y.((Nutrient(x) & TubularOrgan(y)) -> AbsorbsIn(x,y))", "all x y z.((AbsorptionOfNutrients(x) & TubularOrgan(y) & TubularOrgan(z)) -> OccursIn(x,y,z))", "all x.(AbsorptionOfNutrients(x) -> PrimarilyInTumulusOrgan(x))", "all x y.((AbsorbsNutrients(x) & TubularOrgan(y)) -> OccursIn(x,y))", "all x.(AbsorbsNutrients(x) -> TubularOrgan(x))", "all x y z.((Nutrients(x) & TubularOrgan(y) & Nutrients(z)) -> AbsorbsIn(x,y,z))", "all x y.((TumulusOrgan(x) & TubularOrgan(y)) -> AbsorbsNutrients(x,y))", "all x.(AbsorbsNutrients(x) -> PrimarilyInTumulusOrgan(x))", "exists x.(TumulusOrgan(x) & AbsorbsNutrients(x))", "all x.(AbsorptionOfNutrients(x) -> TubularOrgan(x))", "all x.(AbsorptionOfNutrients(x) -> PrimarilyInTumulusOrgan(x))", "exists x.(TumulularOrgan(x) & AbsorbsNutrients(x))"]}
{"id": "eqasc_validation_655", "nl": "Gastrointestinal GI dysfunction can inhibit Mg absorption from the small intestine.", "fol": "", "prediction": ["all x.(GastrointestinalGIDisfunction(x) -> InhibitsMgAbsorptionFromSmallintestine(x))", "all x y.((GastrointestinalGIDisfunction(x) & SmallIntestine(y)) -> InhibitsMgAbsorption(x,y))", "(GastrointestinalGIDisfunction(Gastrointestinal(Gastrointestinal) & InhibitsMgAbsorptionFromSmallintestine(Gastrointestinal))", "(InhibitsMgAbsorptionFromSmallIntestine(Giddisfunction) -> GastrointestinalGIDisfunction(Giddisfunction))", "all x y z.((GastrointestinalGIDisfunction(x) & GastrointestinalGIDisfunction(y) & SmallIntestine(z) & InhibitsMgAbsorption(x,y,z)) -> InhibitsMgAbsorption(x,y,z))", "all x.(GastrointestinalGIDisfunction(x) -> InhibitsMgAbsorption(x))", "all x.((GastrointestinalGIDisfunction(x) & InhibitsMgAbsorption(x)) -> InhibitsMgAbsorption(x))", "(GastrointestinalGIDisfunction(gi) & InhibitsMgAbsorption(gi) & SmallIntestine(y))", "all x y.((GastrointestinalGiddyDisfunction(x) & SmallIntestine(y)) -> InhibitsMgAbsorption(x,y))", "all x y.((GastrointestinalGIDisfunction(x) & SmallIntestine(y)) -> InhibitsMgAbsorption(x,y))", "all x y.((GastrointestinalGIDisfunction(x) & Smallintestine(y)) -> InhibitsMgAbsorption(x,y))", "all x.(GastrointestinalGiddyDisfunction(x) -> InhibitsMgAbsorptionFromSmallintestine(x))", "all x.((GastrointestinalGIDisfunction(x) & InhibitsMgAbsorption(x)) -> InhibitsMgAbsorptionFromSmallintestine(x))", "all x.(GastrointestinalGIDisfunction(x) -> InhibitsMgAbsorptionFromSmallintestine(x))", "all x.(GastrointestinalGIDisfunction(x) -> InhibitsMgAbsorption(x))", "ALL X.(GastrointestinalGIDisfunction(x) -> InhibitsMgAbsorptionFromSmallintestine(x))"]}
{"id": "eqasc_validation_656", "nl": "Absorption of magnesium occurs in the GI tract.", "fol": "", "prediction": ["all x.(MagnesiumAbsorption(x) -> OccursInGITract(x))", "all x y.((Magnesium(x) & GITract(y)) -> AbsorbsIn(x,y))", "all x.(AbsorptionOfMagnesium(x) -> OccursInGITract(x))", "all x.(MagnesiumAbsorption(x) -> OccursInGitat(x))", "all x y.((Magnesium(x) & GIThreat(y)) -> AbsorbsIn(x,y))", "all x y.((MagnesiumAbsorption(x) & GITract(y)) -> OccursIn(x,y))", "(AbsorbsMagnesiumInGITrace(Magnesium))", "all x.(AbsorptionOfMagnesium(x) -> InGITract(x))", "all x.(MagnesiumAbsorption(x) -> InGITract(x))", "all x.((MagnesiumAbsorption(x) & GITract(x)) -> OccursIn(x,GITarget))", "all x y z.((Magnesium(x) & GIThreat(y) & Absorption(z)) -> OccursIn(x,y,z))", "(AbsorptionOfMagnesium(Magnesium) & GITract(Magnesium))", "all x y.((MagnesiumAbsorption(x) & GIThreat(y)) -> OccursIn(x,y))", "All x.(Magnesium(x) -> AbsorbsInGiantTrip(x))", "All x y.((Magnesium(x) & GastrointestinalTract(y)) -> AbsorbsIn(x,y))", "exists x.(MagnesiumAbsorption(x) & InGitat(x))"]}
{"id": "eqasc_validation_657", "nl": "Diarrhea reduces the absorption of all nutrients.", "fol": "", "prediction": ["all x.(Diarrhea(x) -> ReducesAbsorptionOfNutrients(x))", "all x y.((Diarrhea(x) & Nutrient(y)) -> ReducesAbsorption(x,y))", "all x.(Diarrhea(x) -> ReducesAbsorptionOfNutrients(x))", "All x y z.((Diarrhea(x) & Nutrient(y) & Nutrient(z)) -> ReducesAbsorption(x,y,z))", "all x y.((Diarrhea(x) & Nutrient(y)) -> ReducesAbsorption(x,y))", "all x.(Diarrhea(x) -> ReducesAbsorptionOfNutrients(x))", "all x.(Diarrhea(x) -> ReducesAbsorptionOfNutrients(x))", "all x y.((Diarrhea(x) & Nutrient(y)) -> ReducesAbsorption(x,y))", "all x.(Diarrhea(x) -> ReducesAbsorptionOfNutrients(x))", "all x.(Diarrhea(x) -> ReducesAbsorption(x))", "all x y.((Diarrhea(x) & Nutrient(y)) -> ReducesAbsorption(x,y))", "all x.(Diarrhea(x) -> ReducesAbsorptionOfNutrients(x))", "All x y.((Diarrhea(x) & Nutrient(y)) -> ReducesAbsorption(x,y))", "all x.(Darrhea(x) -> ReducesAbsorption(x))", "all x.(Diarrhea(x) -> ReducesAbsorptionOfNutrients(x))", "all x.(Diarrhea(x) -> ReducesAbsorptionOfNutrients(x))"]}
{"id": "eqasc_validation_658", "nl": "Diarrhea reduces funtcion that occurs mainly in the small intestine.", "fol": "", "prediction": ["all x.(Diarrhea(x) -> (ReducesFuntcion(x) & OccursInSmallintestine(x)))", "all x y.((Diarrhea(x) & SmallIntestine(y)) -> ReducesFuntcion(x,y))", "all x.(Diarrhea(x) -> (ReducesFuntcion(x) & OccursInSmallintestine(x)))", "all x.(Diarrhea(x) -> (ReducesFuntcion(x) & OccursInSmallintestine(x)))", "all x y.((Diarrhea(x) & Funtcion(y) & SmallIntestine(y)) -> Reduces(x,y))", "all x y z.((Diarrhea(x) & Funtcion(y) & SmallIntestine(z)) -> Reduces(x,y,z))", "all x.(Diarrhea(x) -> (ReducesFuntcion(x) & OccursInSmallIntestine(x)))", "(all x.(Diarrhea(x) -> ReducesFuntcion(x)))", "all x.(Diarrhea(x) -> ReducesFuntcion(x))", "all x y.((Diarrhea(x) & SmallIntestine(y)) -> ReducesFuntcion(x,y))", "all x.(Diarrhea(x) -> (ReducesFuntcion(x) & OccursInSmallintestine(x)))", "all x y.((Diarrhea(x) & Funtcion(y) & SmallIntestine(z)) -> Reduces(x,y,z))", "all x.(Diarrhea(x) -> (ReducesFuntcion(x) & OccursInSmallintestine(x)))", "all x y.((Diarrhea(x) & SmallIntestine(y)) -> ReducesFuntcion(x,y))", "all x.(Diarrhea(x) -> ReducesFuntcion(x))", "all x.(Darrhea(x) -> (ReducesFuntcion(x) & OccursInSmallIntestine(x)))"]}
{"id": "eqasc_validation_659", "nl": "Absorption takes place in the small intestine.", "fol": "", "prediction": ["all x.(Absorption(x) -> TakesPlaceInSmallIntestine(x))", "all x y.((Absorption(x) & SmallIntestine(y)) -> TakesPlaceIn(x,y))", "(AbsorptionPlace(a) & SmallIntestine(b))", "all x y z.((Absorption(x) & SmallIntestine(y) & SmallIntestine(z)) -> TakesPlaceIn(x,y,z))", "all x.(Absorption(x) -> SmallIntestine(x))", "all x y.((Absorption(x) & SmallIntestine(y)) -> TakesPlaceIn(x,y))", "all x.(AbsorbsInSmallIntestine(x) -> TakesPlaceInSmallIntestine(x))", "(AbsorptionPlace(AbsorbsInSmallintestine))", "all x y.((Absorbment(x) & SmallIntestine(y)) -> TakesPlaceIn(x,y))", "all x.(Absorption(x) -> TakesPlaceInSmallintestine(x))", "all x y.((SmallIntestine(x) & Absorption(y)) -> TakesPlaceIn(x,y))", "All x.(Absorbtion(x) -> TakesPlaceInSmallIntestine(x))", "all x y.((Absorption(x) & SmallIntestine(y)) -> TakesPlaceIn(x,y))", "all x.(Absorption(x) -> InSmallintestine(x))", "All x.(Absorption(x) -> TakesPlaceInSmallIntestine(x))", "All x.(AbsorptionPlace(x) -> SmallIntestine(x))"]}
{"id": "eqasc_validation_660", "nl": "nutrients are absorbed in the small intestine", "fol": "", "prediction": ["all x y.((Nutrients(x) & SmallIntestine(y)) -> AbsorbedIn(x,y))", "all x y z.((Nutrients(x) & SmallIntestine(y) & SmallIntestine(z)) -> AbsorbedIn(x,y,z))", "all x.(NutrientsAbsorbedInSmallintestine(x) -> Smallintestine(x))", "(all x.(Nutrients(x) -> AbsorbedInSmallintestine(x)))", "all x y.((Nutrients(x) & SmallIntestine(y)) -> AbsorbedInSmallintestine(x,y))", "all x y.((Nutrient(x) & SmallIntestine(y)) -> AbsorbedIn(x,y))", "all x.(NutrientsAbsorbedInSmallintestine(x) -> AbsorbedInSmallintestine(x))", "all x y.((Smallintestine(x) & Nutrients(y)) -> AbsorbedIn(x,y))", "all x y z.((Nutrients(x) & SmallIntestine(y) & SmallIntestine(z)) -> AbsorbedIn(x,y,z))", "(all x y.((Nutrients(x) & SmallIntestine(y)) -> AbsorbedIn(x,y)))", "all x y z.((Nutrients(x) & Smallintestine(y) & Smallintestine(z)) -> AbsorbedIn(x,y,z))", "all x.(NutrientsAbsorbedInSmallintestine(x) -> Smallintestine(x))", "all x.(NutrientsAbsorbedInSmallintestine(x) -> AbsorbedInSmallintestine(x))", "all x y.((Nutrients(x) & Smallintestine(y)) -> AbsorbedIn(x,y))", "all x.(NutrientsAbsorbedInSmallIntestine(x) -> Smallintestine(x))", "all x.(NutrientsAbsorbedInSmallintestine(x) -> InsipidEpidermal(x))"]}
{"id": "eqasc_validation_661", "nl": "Food is the best source of nutrients for the body.", "fol": "", "prediction": ["all x.(Food(x) -> BestNutrientSource(x))", "all x y.((Food(x) & Body(y)) -> BestNutrientSource(x,y))", "all x.(Food(x) -> BestNutrientSourceForBody(x))", "all x y z.((Food(x) & Nutrients(y) & Body(z)) -> BestSource(x,y,z))", "all x y.((Food(x) & Body(y)) -> BestNutrientSource(x,y))", "all x.(Food(x) -> BestSourceOfNutrients(x))", "ALL NECESSENTIALS(Food) -> BestSourceOfNutrients(Food,Body))", "all x y.((Food(x) & Body(y)) -> BestSourceOfNutrients(x,y))", "(BestNutrientSourceForBody(Food,Food))", "all x.(Food(x) -> BestNutrientSource(x))", "all x.(FoodSource(x) -> BestNutrientSource(x))", "all x.(Food(x) -> BestSourceOfNutrients(x))", "all x y.((Food(x) & Body(y)) -> BestNutrientSource(x,y))", "All x y.((Food(x) & Body(y)) -> BestSourceOfNutrients(x,y))", "all x.(FoodSource(x) -> BestNutrientSource(x))", "all x.(Food(x) -> BestNutrientSourceForBody(x))"]}
{"id": "eqasc_validation_662", "nl": "The small intestine is the main place where food absorption occurs.", "fol": "", "prediction": ["all x.(SmallIntestine(x) -> FoodAbsorptionOfPlace(x))", "all x y.((SmallIntestine(x) & FoodAbsorption(y)) -> MainPlace(x,y))", "(MainPlaceOfFoodAbsorption(SmallIntestine) & MainPlaceOfFoodAbsorption(SmallIntestine))", "the smallintestine is the mainplacewherefoodAbsorptionOccurs.", "(MainPlaceOfFoodAbsorption(smallintestine) & MainPlaceOfFoodAbsorption(smallintestine))", "all x.(SmallIntestine(x) -> FoodAbsorption(x))", "(MainPlace(SmallIntestine) & FoodAbsorption(SmallIntestine))", "all x y.((SmallIntestine(x) & FoodAbsorption(y)) -> MainPlace(x,y))", "all x.(SmallIntestine(x) -> FoodAbsorptionOccurrence(x))", "the smallintestine (smoothintestine) -> FoodAbsorptionOfPlace(s))", "all x y.((SmallIntestine(x) & FoodAbsorption(y)) -> MainPlace(x,y))", "all x.(SmallIntestine(x) -> FoodAbsorption(x))", "all x.(Smallintestine(x) -> FoodAbsorptionOfPlace(x))", "all x.(SmallIntestine(x) -> FoodAbsorptionOfOrder(x))", "all x.(SmallIntestine(x) -> MainPlaceForFoodAbsorption(x))", "exists x.(SmallIntestine(x) & MainPlaceOfFoodAbsorption(x))"]}
{"id": "eqasc_validation_663", "nl": "Most foods contain several nutrients.", "fol": "", "prediction": ["all x.(Food(x) -> ContainsSeveralNutrients(x))", "all x.(Food(x) -> ContainsNutrients(x))", "all x.(Food(x) -> ContainsSeveralNutrients(x))", "(exists x.(Food(x) & Contains(x,nutrients)))", "all x y.((Food(x) & Nutrient(y)) -> Contains(x,y))", "all x.(Food(x) -> ContainsNerts(x))", "(exists x.(Food(x) & ContainsNutrients(x)))", "all x.(Food(x) -> (ContainsNerts(x) & ContainsNutrients(x)))", "all x y.((Food(x) & Nutrient(y)) -> Contains(x,y))", "all x.(Food(x) -> ContainsNutrients(x))", "exists x.(Food(x) & Contains(x,y))", "all x y.((Food(x) & Nutrients(y)) -> Contains(x,y))", "exists x.(Food(x) & Nutrients(x))", "exists x.(Food(x) & ContainsNutrients(x))", "exists x.(Food(x) & Contains(x,y))", "exists x.(Food(x) & Nutrient(x))"]}
{"id": "eqasc_validation_664", "nl": "absorption of food occurs mainly in the small intestine", "fol": "", "prediction": ["all x y.((AbsorptionOfFood(x) & SmallIntestine(y)) -> OccursInSmallIntestine(x,y))", "all x.(AbsorptionOfFood(x) -> (OccursInSmallIntestine(x) & MostlyInSmallIntestine(x)))", "all x y z.((AbsorptionOfFood(x) & SmallIntestine(y) & SmallIntestine(z)) -> OccursIn(x,y,z))", "all x y.((FoodAbsorption(x) & SmallIntestine(y)) -> OccursInSmallIntestine(x,y))", "all x.(AbsorptionOfFood(x) -> OccursInSmallIntestine(x))", "(AbsorptionOfFoodInSmallintestine(a) -> OccursInSmallIntestine(a))", "all x y.((AbsorptionOfFood(x) & SmallIntestine(y)) -> OccursIn(x,y))", "(AbsorptionOfFood(a) -> OccursInSmallintestine(a))", "(AbsorptionOfFoodOccursInSmallIntestine(a) & MostlyInSmallIntestine(b))", "all x y z.((FoodAbsorption(x) & Smallintestine(y) & SmallIntestine(z)) -> OccursInSmallIntestine(x,y,z))", "all x y.((AbsorptionOfFood(x) & Smallintestine(y)) -> OccursInSmallIntestine(x,y))", "all x.(AbsorptionOfFood(x) -> (OccursInSmallIntestine(x) & MostlyInSmallIntestine(x)))", "all x.((AbsorptionOfFood(x) & SmallIntestine(x)) -> OccursInSmallintestine(x))", "all x.(AbsorptionOfFood(x) -> OccursInSmallintestine(x))", "all x.(AbsorptionOfFood(x) -> (OccursInSmallintestine(x) & MostlyInSmallIntestine(x)))", "all x y.((FoodAbsorption(x) & SmallIntestine(y)) -> OccursIn(x,y))"]}
{"id": "eqasc_validation_665", "nl": "Dozens of drugs inhibit nutrient absorption or deplete nutrients.", "fol": "", "prediction": ["all x.(Drug(x) -> (InhibitsNutrientAbsorption(x) | DepletesNutrients(x)))", "all x.(DozensOfDrugs(x) -> (InhibitsNutrientAbsorption(x) | DepletesNutrients(x)))", "all x y.((Drug(x) & NutrientAbsorption(y)) -> (Inhibits(x,y) | Depletes(x,y)))", "(DozensOfDrugs(drugs) & (InhibitsNutrientAbsorption(drugs) | DepletesNutrients(drugs)))", "exists x.(Drug(x) & (InhibitsNutrientAbsorption(x) | DepletesNutrients(x)))", "(Drugs(drugs) & (InhibitsNutrientAbsorption(drugs) | DepletesNutrients(drugs)))", "all x y.((DozensOfDrugs(x) & NutrientAbsorption(y)) -> (Inhibits(x,y) | Depletes(x,y)))", "all x.(Drug(x) -> (InhibitsNutrientAbsorption(x) | DepletesNutrients(x)))", "all x y.((Drug(x) & NutrientAbsorption(y)) -> (Inhibits(x,y) | DepletesNutrients(x,y)))", "all x.(DozensOfDrugs(x) -> (InhibitsNutrientAbsorption(x) | DepletesNutrients(x)))", "all x y z.((Drug(x) & NutrientAbsorption(y) & NutrientAbsorption(z) & Inhibits(x,y) & Depletes(x,z)) -> Inhibits(x,y))", "exists x.(Drug(x) & (InhibitsNutrientAbsorption(x) | DepletesNutrients(x)))", "all x y.((Drug(x) & NutrientAbsorption(y)) -> (Inhibits(x,y) | Depletes(x,y)))", "exists x.(Drug(x) & InhibitsNutrientAbsorption(x) & DepletesNutrients(x))", "exists x.(Drug(x) & (InhibitsNutrientAbsorption(x) | DepletesNutrients(x)))", "exists x.(Drugs(x) & (InhibitsNutrientAbsorption(x) | DepletesNutrients(x)))"]}
{"id": "eqasc_validation_666", "nl": "Many drugs can inhibit the actions of the small intestine.", "fol": "", "prediction": ["all x.(Drug(x) -> InhibitsSmallIntestineActions(x))", "all x y.((Drug(x) & SmallIntestine(y)) -> InhibitsAction(x,y))", "(exists x.(Drug(x) & InhibitsSmallIntestineActions(x)))", "exists x.(Drug(x) & InhibitsSmallintestinalActions(x))", "many drugs can inhibitssmallintestinalActions(drugs)", "all x y z.((Drug(x) & SmallIntestine(y) & InhibitsActions(x,y)) -> InhibitsActions(x,z))", "all x y.((Drug(x) & SmallIntestine(y)) -> InhibitsActions(x,y))", "(exists x.(Drug(x) & InhibitsSmallintestinalActions(x)))", "all x.(Drug(x) -> InhibitsSmallIntestineActions(x))", "exists x.(Drug(x) & InhibitsSmallintestine(x))", "all x y.((Drug(x) & SmallIntestine(y)) -> InhibitsAction(x,y))", "exists x.(Drug(x) & InhibitsSmallIntestinalActions(x))", "all x y.((Drug(x) & SmallIntestine(y)) -> InhibitsActions(x,y))", "exists x.(Drug(x) & InhibitsSmallintestinalActions(x))", "exists x.(Drug(x) & InhibitsActionsOfSmallIntestine(x))", "exists x.(Drug(x) & CanInhibitSmallIntestine(x))"]}
{"id": "eqasc_validation_667", "nl": "Food and minerals are both nutrients.", "fol": "", "prediction": ["all x.((Food(x) & Mineral(x)) -> Nutrient(x))", "(Natural(Food) & Nutrient(Minerals))", "((Food(Food) & Minerals(Minerals)) -> Nutrient(Food,Mineral))", "all x.((Food(x) & Minerals(x)) -> Nutrient(x))", "all x y.((Food(x) & Mineral(y)) -> Nutrient(x,y))", "((Food(f) & Minerals(f)) -> Nutrient(f))", "(Nutrient(food) & Nutrient(minerals))", "(NaturalNutrients(Food) & Nutrients(Minerals))", "(Nutrients(food) & Nutrients(minerals))", "(NaturalNutrient(food) & Nutrient(minerals))", "all x.((Food(x) | Minerals(x)) -> Nutrient(x))", "all x y.((Food(x) & Mineral(y)) -> Nutrient(x,y))", "all x.((Food(x) & Minerals(x)) -> Nutrient(x))", "exists x.(Food(x) & Minerals(x) & Nutrient(x))", "all x y.((Food(x) & Mineral(y)) -> Nutrient(x,y))", "all x.((Food(x) | Minerals(x)) -> Nutrient(x))"]}
{"id": "eqasc_validation_668", "nl": "Absorption of minerals occurs mainly in the small intestine.", "fol": "", "prediction": ["all x.(MineralAbsorption(x) -> OccursInSmallIntestine(x))", "all x y.((Mineral(x) & SmallIntestine(y)) -> AbsorbsIn(x,y))", "all x.(AbsorptionOfMinerals(x) -> OccursInSmallintestine(x))", "all x y.((Mineral(x) & SmallIntestine(y)) -> Absorbs(x,y))", "all x.(MineralAbsorption(x) -> OccursInSmallintestine(x))", "(AbsorptionOfMinerals(a) & SmallIntestine(b))", "all x.(AbsorptionOfMinerals(x) -> OccursInSmallIntestine(x))", "all x y z.((Mineral(x) & SmallIntestine(y) & Absorption(z)) -> OccursIn(x,y,z))", "all x y.((MineralAbsorption(x) & SmallIntestine(y)) -> OccursIn(x,y))", "all x y.((Mineral(x) & SmallIntestine(y)) -> AbsorbsIn(x,y))", "(AbsorptionOfMinerals(a) -> OccursInSmallintestine(a))", "exists x.(Mineral(x) & AbsorbsInSmallintestine(x))", "all x.(MineralAbsorption(x) -> OccursInSmallIntestine(x))", "all x.(AbsorptionOfMinerals(x) -> OccursInSmallintestine(x))", "all x y.((Mineral(x) & SmallIntestine(y)) -> Absorbs(x,y))", "exists x.(MineralAbsorption(x) & SmallIntestine(x))"]}
{"id": "eqasc_validation_669", "nl": "Fat, like protein, is a nutrient.", "fol": "", "prediction": ["all x.((Fat(x) & Protein(x)) -> Nutrient(x))", "(Nutrient(fat) & Protein(protein))", "all x y.((Fat(x) & Protein(y)) -> Nutrient(x))", "(Natural(Fat) & Nutrient(Fat,Protein))", "all x.((Fat(x) & Protein(x)) -> Nutrient(x))", "((Fat(f) & Protein(f)) -> Nutrient(f))", "(NaturalNutrient(fat) & Protein(protein))", "all x.((Fat(x) & Protein(x)) -> Nutrient(x))", "(all x.(Fat(x) -> Nutrient(x)))", "all x y.((Fat(x) & Protein(y)) -> Nutrient(x))", "(Nutrient(fat) & Protein(protein))", "all x.(Fat(x) -> (Protein(x) & Nutrient(x)))", "all x.((Fat(x) & Protein(x)) -> Nutrient(x))", "(all x.(Fat(x) -> Nutrient(x)))", "all x.((Fat(x) & Protein(x)) -> Nutrient(x))", "all x.((Fat(x) & Protein(x)) -> Nutrient(x))"]}
{"id": "eqasc_validation_670", "nl": "Absorption of fat and protein occurs mainly in the small intestine.", "fol": "", "prediction": ["all x.(AbsorptionOfFatAndProtein(x) -> OccursInSmallintestine(x))", "all x y.((Absorption(x,y) & Fat(y) & Protein(y)) -> OccursInSmallIntestine(x,y))", "(AbsorptionOfFatAndProtein(a) & SmallIntestine(b))", "all x.(AbsorptionOfFatAndProtein(x) -> OccursInSmallIntestine(x))", "all x.(AbsorbsFatAndProtein(x) -> OccursInSmallintestine(x))", "all x y z.((Absorption(x,y) & Fat(y) & Protein(z)) -> (OccursInSmallIntestine(x,z) & InSmallIntestine(x)))", "all x y.((AbsorptionOfFat(x) & AbsorptionOfProtein(y)) -> OccursInSmallIntestine(x,y))", "all x y.((AbsorbsFat(x) & AbsorbsProtein(x)) -> SmallIntestine(y))", "all x y.((Absorption(x,y) & Fat(y) & Protein(y)) -> OccursInSmallIntestine(x))", "(AbsorbsFatAndProtein(a) & OccursInSmallintestine(a) & MostlyInSmallintestine(b))", "(AbsorptionOfFatAndProtein(a) & OccursInSmallintestine(a))", "all x.((AbsorptionOfFat(x) & AbsorptionOfProtein(x)) -> SmallIntestine(x))", "all x.(AbsorptionOfFatAndProtein(x) -> OccursInSmallintestine(x))", "all x.((AbsorptionOfFat(x) & AbsorptionOfProtein(x)) -> SmallIntestine(x))", "exists x.(AbsorbsFatAndProtein(x) & SmallIntestine(x))", "all x.(AbsorptionOfFatAndProtein(x) -> SmallIntestine(x))"]}
{"id": "eqasc_validation_671", "nl": "Sperm are deposited in the vagina during sexual intercourse.", "fol": "", "prediction": ["all x y.((Ssperm(x) & Vagina(y)) -> DepositedIn(x,y))", "all x.(Ssperm(x) -> DepositedInVagina(x))", "all x y z.((Ssperm(x) & Vagina(y) & SexualIntercourse(z)) -> DepositedIn(x,y,z))", "all x y.((Ssperm(x) & Vagina(y)) -> DepositedIn(x,y))", "all x.((Ssperm(x) & SexualIntercourse(x)) -> DepositedInVagina(x))", "(all x.(Sporem(x) -> DepositedInVagina(x)))", "all x.(Ssperm(x) -> DepositedInVagina(x))", "all x y z.((Sporem(x) & Vagina(y) & SexualIntercourse(z)) -> DepositedIn(x,y,z))", "all x.(Spore(x) -> DepositedInVagina(x))", "all x y.((Sporem(x) & Vagina(y)) -> DepositedIn(x,y))", "all x y.((Ssperm(x) & Vagina(y)) -> DeposesDuringSexualIntercourse(x,y))", "(all x.(Ssperm(x) -> DepositedInVagina(x)))", "all x.((Ssperm(x) & SexualIntercourse(x)) -> DepositedInVagina(x))", "all x y.((Sporem(x) & Vagina(y) & SexualIntercourse(x)) -> DepositedIn(x,y))", "all x.(Ssperm(x) -> DepositedInVaginaDuringSexualIntercourse(x))", "all x y z.((Ssperm(x) & Vagina(y) & SexualIntercourse(z)) -> DepositedIn(x,y,z))"]}
{"id": "eqasc_validation_672", "nl": "What semen is, is a carrier for the sperm contained in it.", "fol": "", "prediction": ["all x.(Semen(x) -> CarrierForSperm(x))", "all x y.((Semen(x) & Sperm(y) & Contains(x,y)) -> CarrierFor(x,y))", "all x.((Semen(x) & CarrierForSperm(x)) -> ContainsInSporen(x))", "all x.(Semen(x) -> CarrierForSsperm(x))", "all x y.((Semen(x) & Sperm(y)) -> CarrierFor(x,y))", "(CarrierForSperm(semen) & ContainsIn(semen,semen))", "all x.(Semen(x) -> CarrierForSperm(x))", "all x.((Semen(x) & CarrierForSsperm(x)) -> CarrierForSsperm(x))", "all x y.((Semen(x) & Sperm(y) & Contains(x,y)) -> Carrier(x,y))", "(CarrierForSperm(semen) & InSemen(semen,s))", "all x y.((Semen(x) & Sperm(y) & CarrierFor(x,y)) -> ContainsIn(x,y))", "all x.(Semen(x) -> CarrierForSsperm(x))", "all x.((Semen(x) & CarrierForSperm(x)) -> ContainsIn(x,sperm))", "exists x.(Semen(x) & Carrier(x) & SpermContainedIn(x))", "all x.(Semen(x) -> CarrierForSperm(x))", "all x.(Semen(x) -> CarriersSperm(x))"]}
{"id": "eqasc_validation_673", "nl": "Semen is deposited in the vagina during sexual intercourse.", "fol": "", "prediction": ["all x y.((Semen(x) & Vagina(y)) -> DepositedIn(x,y))", "all x.(Semen(x) -> DepositedInVagina(x))", "all x y z.((Semen(x) & Vagina(y) & SexualIntercourse(z)) -> DepositedIn(x,y,z))", "all x.((Semen(x) & SexualIntercourse(x)) -> DepositedInVagina(x))", "all x y.((Semen(x) & Vagina(y)) -> DepositedIn(x,y))", "all x y.((Semen(x) & Vagina(y) & SexualIntercourse(x)) -> DepositedIn(x,y))", "all x.(Semen(x) -> DepositedInVagina(x))", "(DepositsSemenInVagina(semisexualIntercourse)", "all x y z.((Semen(x) & Vagina(y) & SexualIntercourse(z)) -> DepositedIn(x,y,z))", "all x.((Semen(x) & SexualIntercourse(x)) -> DepositedInVagina(x))", "all x.(Semen(x) -> DepositedInVaginaDuringSexualIntercourse(x))", "all x y.((Semen(x) & SexualIntercourse(y)) -> DepositedInVagina(x,y))", "all x y.((Semen(x) & Vagina(y)) -> DepositedDuringIntercourse(x,y))", "(DepositsSemenInVagina(semisexualIntercourse)", "all x y z.((Semen(x) & Vagina(y) & SexualIntercourse(z)) -> DepositedIn(x,y,z))", "all x.((Semen(x) & SexualIntercourse(x)) -> DepositedInVagina(x))"]}
{"id": "eqasc_validation_674", "nl": "Erection is necessary to carry the ejaculate containing the sperm into the vagina.", "fol": "", "prediction": ["all x.(Erection(x) -> CarriesEjaculate(x))", "all x y.((Ejaculate(x) & Sperm(y) & CarriesIntoVagina(x,y)) -> ErectionNecessaryForCarrying(x,y))", "all x.((Ejaculate(x) & ContainsSsperm(x)) -> CarriesIntoVagina(x))", "all x y.((Erection(x) & Ejaculate(y) & ContainsSsperm(y)) -> CarriesIntoVagina(x,y))", "all x y z.((Ejaculate(x) & Sperm(y) & Vagina(z)) -> CarriesInto(x,y,z))", "(CarryingEjaculateWithSspermIntoVagina(erection) -> NecessaryForVagina(erection))", "all x y.((Ejaculate(x) & Sperm(y) & CarriesIntoVagina(x,y)) -> NecessaryErection(x))", "(NecessaryErection(er) -> CarriesEjaculate(er,sperm))", "all x.(Erection(x) -> CarriesEjaculateIntoVagina(x))", "All x y z.((Ejaculate(x) & Sperm(y) & Vagina(z)) -> CarriesInto(x,y,z))", "all x.((Ejaculate(x) & ContainsSsperm(x)) -> CarriesIntoVagina(x))", "all x.(ErectionNecessaryToCarryEjaculateIntoVagina(x) -> ContainsSsperm(x))", "all x.(Erection(x) -> CarriesEjaculateIntoVagina(x))", "all x.(Erection(x) -> (CarriesEjaculate(x) & ContainsSspermIntoVagina(x)))", "all x y.((Ejaculate(x) & Sperm(y) & CarriesIntoVagina(x,y)) -> ErectionNecessaryToCarry(x,y))", "All x y.((Erection(x) & Ejaculate(y) & ContainsSsperm(y)) -> CarriesIntoVagina(x,y))"]}
{"id": "eqasc_validation_675", "nl": "Sperm is deposited after ejaculate is carried during sexual intercourse", "fol": "", "prediction": ["all x y.((Ssperm(x) & Ejaculate(y) & CarriedDuringSexualIntercourse(x,y)) -> DepositedAfterEjaculate(x,y))", "all x y z.((Ssperm(x) & Ejaculate(y) & SexualIntercourse(z) & CarriedDuring(x,y,z)) -> DepositedAfter(x,y,z))", "all x.((Ssperm(x) & EjaculateCarried(x)) -> DepositedDuringSexualIntercourse(x))", "all x y.((Ssperm(x) & EjaculateCarried(y) & SexualIntercourse(y)) -> DepositedAfterEjaculate(x,y))", "(all x y.((Ssperm(x) & Ejaculate(y) & CarriedDuringSexualIntercourse(x,y)) -> DepositedAfter(x,y)))", "all x.((Ssperm(x) & EjaculateCarried(x) & SexualIntercourse(x)) -> Deposited(x))", "(all x.((Ssperm(x) & EjaculateCarried(x)) -> DepositedDuringSexualIntercourse(x)))", "all x y z.((Ssperm(x) & Ejaculate(y) & SexualIntercourse(z) & CarriedDuring(x,y,z)) -> DepositedAfter(x,y))", "all x.((Sporem(x) & EjaculateCarriedDuringSexualIntercourse(x)) -> DepositedAfterEjaculate(x))", "all x.(Ssperm(x) -> (DepositsAfterEjaculateCarried(x) & SexualIntercourse(x)))", "all x y.((Sporem(x) & EjaculateCarried(y)) -> DepositedAfterSexualIntercourse(x,y))", "all x y z.((Sporem(x) & Ejaculate(y) & SexualIntercourse(z)) -> DeposesAfterCarrying(x,y,z))", "all x y z.((Ssperm(x) & EjaculateCarried(y) & SexualIntercourse(z) & Carried(y,z)) -> DepositedAfter(x,y,z))", "all x y.((Ssperm(x) & EjaculateCarriedDuringSexualIntercourse(y)) -> DepositedAfterEjaculate(x,y))", "all x.((Ssperm(x) & EjaculateCarried(x)) -> DeposesDuringSexualIntercourse(x))", "All x.(Ssperm(x) -> DepositedAfterEjaculateCarried(x))"]}
{"id": "eqasc_validation_676", "nl": "During intercourse several hundred million sperm are released inside the vagina.", "fol": "", "prediction": ["all x y.((Intercourse(x) & Sperm(y)) -> ReleasedInVagina(x,y))", "all x y z.((Intercourse(x) & Sperm(y) & Vagina(z)) -> (ReleasesInside(y,z) & Contains(y,z)))", "During intercourse, several hundred million sperm are released inside the vagina.", "all x.(Intercourse(x) -> (ReleasesSsperm(x,100) & InsideVagina(x)))", "all x y.((Intercourse(x) & Sperm(y)) -> ReleasedInsideVagina(x,y))", "During intercourse several hundred million sperm are released inside the vagina.", "(Intercourse(x) & ReleasesSsperm(x,100))", "During Intercourse, several hundredmillions of SpermReleasedInsideVagina(x))", "all x.((Intercourse(x) & ReleasesSsperm(x,100,000,000)) -> InsideVagina(x))", "(Introduction(x) & ReleasesSsperm(x,100,000,000))", "all x y.((Intercourse(x) & Sperm(y)) -> (ReleasesInsideVagina(x,y) & HundredsMillions(y)))", "all x y z.((Intercourse(x) & Sperm(y) & Vagina(z)) -> (ReleasesInside(y,z) & HundredsMillions(y,z)))", "exists x.(Intercourse(x) & ReleasesSspermInVagina(x))", "exists x.(Intercourse(x) & HundredsMillionSpermReleasedInvagina(x))", "(Intercourse(x) & ReleasesSspermInVagina(x,100,000,000))", "During Intercourse (intercourse) - hundreds of million sperm released inside vaginal."]}
{"id": "eqasc_validation_677", "nl": "millions of sperm are deposited during sexual intercourse", "fol": "", "prediction": ["all x y.((SexualIntercourse(x) & SexualIntercourse(y)) -> DepositsMillionsOfSsperm(x,y))", "all x y z.((Ssperm(x) & SexualIntercourse(y) & Sperm(z) & DepositedDuring(x,y,z)) -> MillionsOf(x,z))", "all x y z.((SexualIntercourse(x) & Sperm(y) & Sperm(z) & DepositedDuring(x,y,z)) -> MillionsOfSperm(x))", "(MillionsOfSspermDepositeDuringSexualIntercourse(s) & SexualIntercourse(s))", "all x.((Ssperm(x) & SexualIntercourse(x)) -> DepositedDuring(x,y))", "all x y.((MillionsOfSsperm(x) & SexualIntercourse(y)) -> DepositedDuring(x,y))", "all x.((MillionsOfSsperm(x) & SexualIntercourse(x)) -> DepositedDuring(x,sexualIntercourse))", "millions of sperm are deposited during sexual intercourse (exists x.(SexualIntercourse(x) & Sperm(x)) & SexualIntercourse(x) & SexualIntercourse(x)))", "millions of sperm are deposited during sexualintercourse(sperm,sex,intercourse)", "all x y.((SexualIntercourse(x) & SexualIntercourse(y)) -> DepositsMillionsOfSsperm(x,y))", "(MillionsOfSspermDepositeDuringSexualIntercourse(x) & SexualIntercourse(x))", "(MillionsOfSspermDepositeDuringSexualIntercourse(SexualIntercourse(SexualIntercourse) & SexualIntercourse(SexualIntercourse))", "all x.((MillionsOfSsperm(x) & SexualIntercourse(x)) -> DepositedDuring(x,sexual,sexual))", "all x y z.((Ssperm(x) & SexualIntercourse(y) & SexualIntercourse(z) & Deposits(x,y,z)) -> MillionsOfSsperm(x,y,z))", "all x y.((Ssperm(x) & SexualIntercourse(y)) -> DepositedDuring(x,y))", "millions of sperm are deposited during sexualintercourse(sperm,sexual)"]}
{"id": "eqasc_validation_678", "nl": "Several hundred million sperms are released during sexual intercourse", "fol": "", "prediction": ["all x y.((Ssperm(x) & SexualIntercourse(y)) -> (Released(x,y) & HundredsMillions(x)))", "all x y z.((Ssperm(x) & SexualIntercourse(y) & Sperm(z)) -> (Released(x,y,z) & SeveralSixtyMillions(x)))", "During sexual intercourse, sperms are released during several hundred million times.", "(SixtyMillions(sperm) & SexualIntercourse(sperm))", "exists x.(Ssperm(x) & SexualIntercourse(x) & ReleasesSixtyMillions(x))", "(SexualIntercourse(SexualIntercourse(SexualIntercourse) - HundredsMillionsSsperms(Ssperm))", "all x y.((SexualIntercourse(x) & Sperm(y)) -> (Released(x,y) & HundredsMillions(x)))", "(exists x.(Ssperm(x) & SexualIntercourse(x)) & exists y.(Ssperm(y) & SexualIntercourse(y) & ReleasedDuring(x,y))))", "Several hundredmillionssperms are released during sexual intercourse.", "During sexual intercourse, sperms are released to a total of tens of millions.", "all x y z.((Ssperm(x) & SexualIntercourse(y) & Sperm(z)) -> (ReleasedDuring(x,y,z) & SeveralSixtyMillions(x)))", "(SixtyMillions(sperms) & SexualIntercourse(s) & ReleasedDuring(sperm))", "During sexual intercourses, sperms are released during several hundred million times.", "all x y z.((Ssperm(x) & SexualIntercourse(y) & SexualIntercourse(z)) -> (Released(x,y,z) & HundredsMillions(x) & Sperm(y) & SexualIntercourse(z)))", "exists x.(Ssperm(x) & SexualIntercourse(x) & ReleasesSixtyMillions(x))", "During sexual intercourse, sperms are released in the order of several hundred million a year."]}
{"id": "eqasc_validation_679", "nl": "Once sperm is deposited in the vagina , it travels through the cervix and into the Fallopian tubes.", "fol": "", "prediction": ["all x y.((Ssperm(x) & Vagina(y)) -> (DepositsIn(x,y) & TravelsThroughCervix(x) & FallsopianTubes(x)))", "all x y z.((Ssperm(x) & Vagina(y) & Cervix(z) & DepositedIn(x,y)) -> TravelsThrough(x,z))", "all x.((Ssperm(x) & DepositedInVagina(x)) -> TravelsThroughCervixAndIntoFallopianTubes(x))", "(DepositsInVagina) & TravelsThroughCervixAndIntoFallopianTubes(sperm))", "all x y.((Ssperm(x) & DepositedInVagina(x,y)) -> TravelsThroughCervixAndIntoFallopianTubes(x))", "all x y z.((Ssperm(x) & Vagina(y) & Cervix(z)) -> (DepositsIn(x,y) & TravelsThrough(x,z) & FallopianTubes(x)))", "all x y.((Ssperm(x) & Vagina(y)) -> (DepositsIn(x,y) & TravelsThrough(x,cervix) & FallsopianTubes(x)))", "(DepositsInValga(sperm) & TravelsThroughCervix(sperm) & FallsopianTubes(sperm))", "all x.((Ssperm(x) & DepositedInVagina(x)) -> TravelsThroughCervixAndIntoFallopianTubes(x))", "all x y.((Ssperm(x) & Vagina(y) & DepositedIn(x,y)) -> TravelsThroughCervixAndIntoFallopianTubes(x))", "all x.(DepositsInVagina(x) -> TravelsThroughCervixAndIntoFallopianTubes(x))", "all x.((Ssperm(x) & DepositedInValga(x)) -> (TravelsThroughCervix(x) & FallsopianTubes(x)))", "all x.((Ssperm(x) & DepositedInVagina(x)) -> TravelsThroughCervixAndIntoFallopianTubes(x))", "all x y z.((Ssperm(x) & Vagina(y) & Cervix(z) & DepositedIn(x,y)) -> TravelsThrough(x,z))", "All x.(Ssperm(x) -> (DepositsInVagina(x) & TravelsThroughCervix(x) & FallsopianTubes(x)))", "all x.((Porcel(x) & DepositedInVagina(x)) -> TravelsThroughCervix(x) & FallsopianTubes(x))"]}
{"id": "eqasc_validation_680", "nl": "Sperm travels through the cervix and into the Fallopian tubes after sexual intercourse", "fol": "", "prediction": ["all x y z.((Ssperm(x) & Cervix(y) & FallopianTubes(z)) -> (TravelsThrough(x,y) & Through(x,z)))", "all x y.((Ssperm(x) & Cervix(y) & FallopianTubes(z)) -> TravelsThrough(x,y,z))", "all x.(Ssperm(x) -> (TravelsThroughCervix(x) & TravelsIntoFallopianTubes(x) & SexualIntercourse(x)))", "all x.((Ssperm(x) & Cervix(x) & FallopianTubes(x)) -> TravelsAfterSexualIntercourse(x))", "all x.(Ssperm(x) -> (TravelsThroughCervix(x) & ThroughFallopianTubes(x) & AfterSexualIntercourse(x)))", "all x y z.((Ssperm(x) & Cervix(y) & FallopianTubes(z) & SexualIntercourse(x)) -> TravelsThrough(x,y,z))", "(all x.(Ssperm(x) -> TravelsThroughCervix(x) & ThroughFallopianTubes(x)))", "(all x y.(Ssperm(x) -> (TravelsThroughCervix(x) & ThroughFallopianTubes(x))) & SexualIntercourse(y) & AfterIntercourse(x,y))", "all x y.((Ssperm(x) & Cervix(y) & FallopianTubes(z)) -> TravelsThrough(x,y,z))", "all x y z.((Ssperm(x) & Cervix(y) & FallopianTube(z)) -> (TravelsThrough(x,y) & Through(x,z) & AfterSexualIntercourse(x)))", "all x.(Ssperm(x) -> (TravelsThroughCervix(x) & IntoFallopianTubes(x) & AfterSexualIntercourse(x)))", "all x.((Ssperm(x) & Cervix(x) & FallopianTubes(x)) -> TravelsThrough(x,cervix))", "all x y.((Ssperm(x) & Cervix(y) & FallopianTubes(x) & SexualIntercourse(y)) -> TravelsThrough(x,y))", "all x.(Ssperm(x) -> (TravelsThroughCervix(x) & TravelsIntoFallopianTubes(x) & AfterSexualIntercourse(x)))", "all x y z.((Ssperm(x) & Cervix(y) & FallopianTubes(z)) -> TravelsThrough(x,y,z))", "all x y.((Ssperm(x) & Cervix(y) & FallopianTube(z)) -> TravelsThrough(x,y,z))"]}
{"id": "eqasc_validation_681", "nl": "Male sperm are made in a man's testes.", "fol": "", "prediction": ["all x y.((MaleSpore(x) & Man(y)) -> MadeInTestes(x,y))", "all x.(MaleSperm(x) -> MadeInTestes(x))", "all x y.((MaleSsperm(x) & Man(y)) -> MadeInTestes(x,y))", "all x y z.((MaleSperm(x) & Man(y) & Testes(z)) -> MadeIn(x,y,z))", "(MaleSperm(x) -> MadeInTestes(x))", "all x.(MaleSperm(x) -> MadeInTestes(x))", "all x y.((MalePerm(x) & Man(y)) -> MadeInTestes(x,y))", "all x y z.((MalePerm(x) & Man(y) & Testes(z)) -> MadeIn(x,y,z))", "all x.(MalePerm(x) -> MadeInTestes(x))", "all x.(MaleSsperm(x) -> MadeInMansTestes(x))", "all x y.((MaleSperm(x) & Man(y)) -> MadeInTestes(x,y))", "all x.(Malesperm(x) -> MadeInTestes(x))", "exists x.(MalignantSperm(x) & Man(x) & MadeInTestes(x))", "all x y.((MaleSpore(x) & Man(y)) -> MadeInTestes(x,y))", "all x y.((MalePump(x) & Man(y)) -> MadeInTestes(x,y))", "all x.(MalePump(x) -> MadeInTestes(x))"]}
{"id": "eqasc_validation_682", "nl": "Something made in the testes is deposited in the vagina during sexual intercourse", "fol": "", "prediction": ["all x y z.((MadeInTestes(x) & Testes(y) & Vagina(z) & SexualIntercourse(z)) -> DepositedInVagina(x,y,z))", "all x y.((MadeInTestes(x) & DeposesInVagina(x,y)) -> SexualIntercourse(y))", "all x y z.((Testes(x) & Vagina(y) & SexualIntercourse(z)) -> (MadeIn(x,testes) & DepositedIn(x,y)))", "all x y.((MadeInTestes(x) & SexualIntercourse(y)) -> DepositedInVagina(x,y))", "all x.((MadeInTestes(x) & DepositedInVagina(x)) -> SexualIntercourse(x))", "all x y.((MakedInTestes(x) & Vagina(y) & SexualIntercourse(x)) -> DepositedInVagina(x,y))", "all x y z.((MadeInTestes(x) & Vagina(y) & SexualIntercourse(z)) -> DepositedInVagina(x,y,z))", "(MadeInTestes(x) -> DepositedInVagina(x)) During SexualIntercourse(x))", "all x.((MadeInTestes(x) & DeposesInVagina(x)) -> SexualIntercourse(x))", "all x y z.((MakedInTestes(x) & Vagina(y) & SexualIntercourse(z) & DeposesIn(x,y,z)) -> During(x,y,z))", "exists an x y.((MadeInTestes(x) & DepostedInVagina(x,y)) & SexualIntercourse(y)) -> DeposesDuring(x,y))", "all x.((MadeInTestes(x) & DepositedInVagina(x) & SexualIntercourse(x)) -> DepositedInVagina(x))", "all x y.((MadeInTestes(x) & DepostedInVagina(y)) -> SexualIntercourse(x,y))", "all x y.((Testes(x) & Vagina(y) & SexualIntercourse(y)) -> DepositedIn(x,y))", "all x.((MadeInTestes(x) & DepositedInValgina(x) & SexualIntercourse(x)) -> DepositedInVagina(x))", "all x.((MadeInTestes(x) & DepositedInVagina(x)) -> SexualIntercourse(x))"]}
{"id": "eqasc_validation_683", "nl": "Male gametes are called sperm.", "fol": "", "prediction": ["all x.(MaleGamete(x) -> Sperm(x))", "all x.(MaleGamete(x) -> Sperm(x))", "all x y.((MaleGamete(x) & Sperm(y)) -> Calls(x,y))", "all x.(MaleGamete(x) -> Sperm(x))", "all x.((MaleGamete(x) & Sperm(x)) -> KnownAs(x,y))", "(all x.(MaleGamete(x) -> Sperm(x)))", "all x y.((MaleGamete(x) & Sperm(y)) -> KnownAs(x,y))", "all x.(Mann(x) -> Sperm(x))", "all x.(MaleGamete(x) -> Sperm(x))", "all x y.((MaleGamete(x) & Sperm(y)) -> Calls(x,y))", "all x.(ManleGamete(x) -> Sperm(x))", "all x.(MaleGamete(x) -> Sperm(x))", "all x.(MammalGamete(x) -> Sperm(x))", "all x.(MaleGamete(x) -> Sperm(x))", "all x.(MaleGamete(x) -> Sperm(x))", "all x.(MammalGamete(x) -> Sperm(x))"]}
{"id": "eqasc_validation_684", "nl": "Male gametes are deposited in the vagina during sexual intercourse.", "fol": "", "prediction": ["all x.(MaleGamete(x) -> DepositedInVagina(x))", "all x y.((MaleGamete(x) & Vagina(y)) -> DepositedIn(x,y))", "all x.((MaleGamete(x) & SexualIntercourse(x)) -> DepositedInVagina(x))", "all x y z.((MaleGamete(x) & Vagina(y) & SexualIntercourse(z)) -> DepositedIn(x,y,z))", "all x.(MaleGamete(x) -> DepositedInVagina(x))", "all x y.((MaleGamete(x) & Vagina(y)) -> DepositedIn(x,y))", "(MaleGamete(x) & DepositedInVagina(x))", "all x.(MaleGamete(x) -> DeposesInVagina(x))", "all x.((MaleGamete(x) & SexualIntercourse(x)) -> DepositedInVagina(x))", "all x y z.((MaleGamete(x) & Vagina(y) & SexualIntercourse(z)) -> DepositedIn(x,y,z))", "all x y.((MaleGamete(x) & Vagina(y)) -> DepositedIn(x,y))", "all x y.((MaleGamete(x) & Vagina(y)) -> DeposesDuringSexualIntercourse(x,y))", "all x.(MaleGamete(x) -> DepositedInVaginaDuringSexualIntercourse(x))", "all x.((MaleGamete(x) & SexualIntercourse(x)) -> DepositedInVagina(x))", "all x.(MaleGamete(x) -> DepositedInVaginaDuringSexualIntercourse(x))", "all x y.((MaleGamete(x) & Vagina(y)) -> DepositedIn(x,y))"]}
{"id": "eqasc_validation_685", "nl": "male gametes are deposited in the vagina during sexual intercourse", "fol": "", "prediction": ["all x y.((MaleGamete(x) & Vagina(y) & SexualIntercourse(x)) -> DepositedIn(x,y))", "all x y z.((MaleGamete(x) & Vagina(y) & SexualIntercourse(z)) -> DepositedIn(x,y,z))", "all x.((MaleGamete(x) & SexualIntercourse(x)) -> DepositedInVagina(x))", "all x y.((MaleGamete(x) & Vagina(y)) -> DepositedIn(x,y))", "all x.(MaleGamete(x) -> DepositedInVaginaDuringSexualIntercourse(x))", "all x.((MaleGamete(x) & SexualIntercourse(x)) -> DepositedInVagina(x))", "all x y z.((MaleGamete(x) & Vagina(y) & SexualIntercourse(z)) -> DepositedIn(x,y,z))", "all x y.((MaleGamete(x) & Vagina(y)) -> DepositedInVagina(x,y))", "all x y z.((MaleGamete(x) & Vagina(y) & SexualIntercourse(z) & DepositedIn(x,y,z)) -> SexualIntercourse(x,y))", "(all x.(MaleGamete(x) -> DepositedInVagina(x)) & SexualIntercourse(x))", "all x.((MaleGamete(x) & SexualIntercourse(x) & DepositedInVagina(x)) -> DeposesInVagina(x))", "all x.((MaleGamete(x) & SexualIntercourse(x)) -> DepositedInVagina(x))", "all x.(MaleGamete(x) -> DepositedInVaginaDuringSexualIntercourse(x))", "all x y.((MaleGamete(x) & SexualIntercourse(y)) -> DepositedInVagina(x,y))", "(all x.(MaleGamete(x) -> DepositedInVagina(x)))", "all x y.((MaleGamete(x) & Vagina(y)) -> DepositedInVagina(x,y))"]}
{"id": "eqasc_validation_686", "nl": "Pregnancy is evidence of sexual intercourse.", "fol": "", "prediction": ["all x.(Pregnancy(x) -> SexualIntercourse(x))", "all x y.((Pregnancy(x) & SexualIntercourse(y)) -> Evidence(x,y))", "all x.(Pregnancy(x) -> SexualIntercourse(x))", "(EvidenceOfSexualIntercourse(pregnancy))", "all x.(Pregnancy(x) -> EvidenceOfSexualIntercourse(x))", "all x y.((Pregnancy(x) & SexualIntercourse(y)) -> Evidence(x,y))", "all x.(Pregnancy(x) -> SexualIntercourse(x))", "all x y.((Pregnancy(x) & SexualIntercourse(y)) -> Evidence(x,y))", "all x.(Pregnancy(x) -> EvidenceOfSexualIntercourse(x))", "all x.(Pregnancy(x) -> SexualIntercourse(x))", "all x.(Pregnancy(x) -> EvidenceOfSexualIntercourse(x))", "all x y.((Pregnancy(x) & SexualIntercourse(y)) -> Evidence(x,y))", "exists x.(Pregnancy(x) & EvidenceOfSexualIntercourse(x))", "all x.(Pregnancy(x) -> SexualIntercourse(x))", "exists x.(Pregnancy(x) & EvidenceOfSexualIntercourse(x))", "exists x.(Pregnancy(x) & SexualIntercourse(x))"]}
{"id": "eqasc_validation_687", "nl": "Sperm is deposited in the vagina sometimes causing pregnancy", "fol": "", "prediction": ["all x y.((Ssperm(x) & Vagina(y)) -> DepositedIn(x,y))", "all x y z.((Ssperm(x) & Vagina(y) & Vagina(z)) -> DepositedIn(x,y,z))", "all x.(Ssperm(x) -> (DepositsInVagina(x) & CausesPregnancy(x)))", "all x y.((Ssperm(x) & Vagina(y)) -> (DepositsIn(x,y) & CausesPregnancy(x)))", "all x y z.((Ssperm(x) & Vagina(y) & Vagina(z)) -> (DepositsIn(x,y,z) & CausesPregnancy(x)))", "all x.((Ssperm(x) & DepositedInVagina(x) & CausesPregnancy(x)) -> SometimesCausesPregnancy(x))", "(all x.(Ssperm(x) -> DepositedInVagina(x)) & CanCausePregnancy(x))", "all x.(Ssperm(x) -> (DepositsInVagina(x) & CausesPregnancy(x)))", "exists x.(SspermDeposite(x) & DepositedInVagina(x) & CausesPregnancy(x))", "all x y.((Ssperm(x) & Vagina(y)) -> DepositedIn(x,y))", "all x y z.((Ssperm(x) & Vagina(y) & Vagina(z)) -> DepositedIn(x,y,z))", "exists x.(Ssperm(x) & DepositedInVagina(x) & CausesPregnancy(x))", "all x y z.((Ssperm(x) & Vagina(y) & Vagina(z) & DepositedIn(x,y,z)) -> CausesPregnancy(x))", "all x y.((Ssperm(x) & Vagina(y)) -> (DepositsIn(x,y) & CausesPregnancy(x)))", "all x.(Ssperm(x) -> (DepositeInVagina(x) & CausesPregnancy(x)))", "all x y.((Sporem(x) & Vagina(y)) -> DepositedIn(x,y))"]}
{"id": "eqasc_validation_688", "nl": "Women have a vagina.", "fol": "", "prediction": ["all x.(Woman(x) -> HasVagina(x))", "all x.(Woman(x) -> HasValga(x))", "all x y.((Women(x) & Vagina(y)) -> Has(x,y))", "(HasVagina(women) -> HasVagina(women))", "all x.((Women(x) & Vagina(x)) -> Has(x,y))", "all x.(Women(x) -> HasVagina(x))", "all x.((Woman(x) & HasVagina(x)) -> HasVagina(x))", "all x y.((Woman(x) & Vagina(y)) -> Has(x,y))", "(HasValga(women,y))", "all x.(Woman(x) -> HasValga(x))", "all x.(Women(x) -> HasVagina(x))", "all x y.((Woman(x) & Vagina(y)) -> Has(x,y))", "all x.(Woman(x) -> HasValgina(x))", "exists x.(Woman(x) & Vagina(x))", "all x.(Women(x) -> HasVagina(x))", "exists x.(Women(x) & Vagina(x))"]}
{"id": "eqasc_validation_689", "nl": "During sex, sperm is deposited into the woman's reproductive organ.", "fol": "", "prediction": ["all x y.((Sex(x) & Sperm(y)) -> DepositedIntoReproductiveOrgan(y,x))", "all x y z.((Sex(x) & Sperm(y) & Woman(z)) -> DepositedIntoOrgan(y,z))", "all x.((Sex(x) & Sperm(x)) -> DepositedIntoReproductiveOrgan(x))", "(DepositsSspermIntoReproductiveOrgan(x) & DuringSex(x))", "all x y.((Sex(x) & Sperm(y)) -> DepositedIntoReproductiveOrgan(y,x))", "all x.((Sex(x) & SpermDeposit(x)) -> ReproductiveOrgan(x))", "all x.(Sex(x) -> DepositsSspermIntoReproductiveOrgan(x))", "all x y z.((Sex(x) & Sperm(y) & Woman(z)) -> DepositedIntoOrgan(y,z))", "(all x.(Sex(x) -> DepositedIntoReproductiveOrgan(x)))", "all x y.((Sex(x) & Sperm(y)) -> DepositedIntoReproductiveOrgan(x,y))", "all x y.((Sex(x) & Sperm(y) & DepostedInto(y,x)) -> ReproductiveOrgan(x,y))", "all x.((Sex(x) & Sperm(x)) -> DepositedIntoReproductiveOrgan(x))", "all x.(Sex(x) -> DepositedIntoReproductiveOrgan(x))", "all x y z.((Sex(x) & Sperm(y) & Woman(z)) -> DepositedIntoReproductiveOrgan(y,z))", "all x.((Sex(x) & SpermDeposit(x,y)) -> ReproductiveOrgan(y))", "all x y.((Sex(x) & Sperm(y)) -> DepositedIntoReproductiveOrgan(y,x))"]}
{"id": "eqasc_validation_690", "nl": "Sexual union is for pleasure and closeness and for procreation.", "fol": "", "prediction": ["all x.(SexualUnion(x) -> (ForPlenish(x) & ForCloseness(x) & ForProcreation(x)))", "all x.(SexualUnion(x) -> (ForPlaise(x) & ForCloseness(x) & ForProcreation(x)))", "all x.(SexualUnion(x) -> (ForPlenish(x) & ForCloseness(x) & ForProcreation(x)))", "all x y.((SexualUnion(x) & Pleasure(y) & Closeness(y)) -> Procreation(x))", "(all x.(SexualUnion(x) -> (ForPlenish(x) & ForCloseness(x) & ForProcreation(x)))", "all x.(SexualUnison(x) -> (ForPlenish(x) & ForCloseness(x) & ForProcreation(x)))", "all x y.((SexualUnion(x) & Pleasure(y) & Closeness(y) & Procreation(x)) -> For(x,y))", "all x.(SexualUnion(x) -> (ForPluise(x) & ForCloseness(x) & ForProcreation(x)))", "all x.((SexualUnion(x) & ForPleasure(x) & ForCloseness(x) & ForProcreation(x)) -> ForProcreation(x))", "(all x.(SexualUnion(x) -> (ForPlenish(x) & ForCloseness(x) & ForProcreation(x)))", "all x.(SexualUnion(x) -> (ForPleasure(x) & ForCloseness(x) & ForProcreation(x)))", "all x.(SexualUnion(x) -> (Plaise(x) & Closeness(x) & Procreation(x)))", "(all x.(SexualUnion(x) -> (ForPluise(x) & ForCloseness(x) & ForProcreation(x)))", "(all x.(SexualUnion(x) -> (ForPlaise(x) | ForCloseness(x) | ForProcreation(x)))", "all x y.((SexualUnion(x) & Pleasure(y) & Closeness(y)) -> Procreation(x))", "all x.(SexualUnity(x) -> (ForPleasure(x) & ForCloseness(x) & ForProcreation(x)))"]}
{"id": "eqasc_validation_691", "nl": "Sperm are deposited in the vagina during procreation", "fol": "", "prediction": ["all x y.((Ssperm(x) & Vagina(y) & Procreation(z)) -> DepositedIn(x,y,z))", "all x y z.((Ssperm(x) & Vagina(y) & Procreation(z)) -> DepositedIn(x,y,z))", "all x y.((Ssperm(x) & Vagina(y)) -> DepositedIn(x,y))", "all x.(Ssperm(x) -> DepositedInVagina(x))", "all x.((Ssperm(x) & DepositedInVagina(x)) -> Procreation(x))", "all x.(Ssperm(x) -> (DepositsInVagina(x) & DuringProcreation(x)))", "all x y z.((Ssperm(x) & Vagina(y) & Procreation(z)) -> DepositedIn(x,y,z))", "(all x y.((Ssperm(x) & Vagina(y)) -> DepositedIn(x,y)))", "all x y.((Sporem(x) & Vagina(y) & Procreation(y)) -> DepositedIn(x,y))", "all x.((Ssperm(x) & DepositedInVagina(x)) -> Procreation(x))", "(all x.(Sporem(x) -> DepositedInVagina(x)))", "all x.(Ssperm(x) -> DepositedInVaginaDuringProcreation(x))", "all x y.((Sporem(x) & Procreation(y)) -> DepositedInVagina(x,y))", "all x.(Spore(x) -> (DepositsInValga(x) & Procreation(x)))", "all x y.((Ssperm(x) & Vagina(y)) -> DepositedIn(x,y))", "all x y z.((Sporem(x) & Vagina(y) & Procreation(z)) -> DepositedIn(x,y,z))"]}
{"id": "eqasc_validation_692", "nl": "Male gametes are sperm.", "fol": "", "prediction": ["all x.(MaleGamete(x) -> Sperm(x))", "all x.(MaleGamete(x) -> Sperm(x))", "all x y.((MaleGamete(x) & Sperm(y)) -> Sperm(x))", "all x.(MaleGamete(x) -> Sperm(x))", "all x.((MaleGamete(x) & Sperm(x)) -> -Spore(x))", "(all x.(MaleGamete(x) -> Sperm(x)))", "all x y.((MaleGamete(x) & Sperm(y)) -> Sperm(x,y))", "all x.(MaleGamete(x) -> Sperm(x))", "(all x.(MaleGamete(x) -> Sperm(x)))", "all x y.((MaleGamete(x) & Sperm(y)) -> Sperm(x))", "all x.(MaleGamete(x) -> Sperm(x))", "all x.(MammalGamete(x) -> Sperm(x))", "all x.(MaleGamete(x) -> Sperm(x))", "all x.(ManningGamble(x) -> Sperm(x))", "all x.(MammalGamete(x) -> Sperm(x))", "all x.(MaleGamete(x) -> Sperm(x))"]}
{"id": "eqasc_validation_693", "nl": "male gametes are deposited in the vagina during sexual intercourse.", "fol": "", "prediction": ["all x.(MaleGamete(x) -> DepositedInVagina(x))", "all x y.((MaleGamete(x) & Vagina(y)) -> DepositedIn(x,y))", "all x.((MaleGamete(x) & SexualIntercourse(x)) -> DepositedInVagina(x))", "all x y z.((MaleGamete(x) & Vagina(y) & SexualIntercourse(z)) -> DepositedIn(x,y,z))", "all x y.((MaleGamete(x) & Vagina(y)) -> DepositedIn(x,y))", "(MaleGamete(x) & DepositedInVagina(x))", "all x.(MaleGamete(x) -> DepositedInVagina(x))", "all x.((MaleGamete(x) & SexualIntercourse(x)) -> DepositedInVagina(x))", "all x y z.((MaleGamete(x) & Vagina(y) & SexualIntercourse(z)) -> DepositedIn(x,y,z))", "all x.(MaleGamete(x) -> DeposesInVagina(x))", "all x y.((MaleGamete(x) & Vagina(y)) -> DepositedIn(x,y))", "all x y.((MaleGamete(x) & Vagina(y)) -> DeposesDuringSexualIntercourse(x,y))", "all x.(MaleGamete(x) -> DepositedInVaginaDuringSexualIntercourse(x))", "all x.((MaleGamete(x) & SexualIntercourse(x)) -> DepositedInVagina(x))", "all x y.((MaleGamete(x) & Vagina(y)) -> DepositedDuringSexualIntercourse(x,y))", "all x.((MaleGamete(x) & SexualIntercourse(x)) -> DepositedInVagina(x))"]}
{"id": "eqasc_validation_694", "nl": "Sperm are released into the surrounding water through the osculum.", "fol": "", "prediction": ["all x y.((Ssperm(x) & Osculum(y)) -> ReleasedIntoWater(x,y))", "all x.(Ssperm(x) -> ReleasedIntoSurroundingWater(x))", "all x y z.((Ssperm(x) & Osculum(y) & Water(z)) -> ReleasedInto(x,y,z))", "all x.(Ssperm(x) -> (ReleasesIntoWater(x) & ThroughOsculum(x)))", "all x y.((Ssperm(x) & Osculum(y)) -> ReleasedIntoWater(x,y))", "all x.((Ssperm(x) & Osculum(x)) -> ReleasedIntoSurroundingWater(x))", "all x.(Sperm(x) -> ReleasedIntoWaterThroughOsculum(x))", "(all x.(Ssperm(x) -> ReleasedIntoWater(x)))", "all x y z.((Ssperm(x) & Osculum(y) & Water(z)) -> ReleasedInto(x,y,z))", "all x y.((Ssperm(x) & Osculum(y)) -> ReleasedIntoSurroundingWater(x,y))", "all x.(Ssperm(x) -> (ReleasedIntoWater(x) & ThroughOsculum(x)))", "all x.(Spore(x) -> ReleasedIntoSurroundingWaterThroughOsculum(x))", "all x y z.((Sperm(x) & Osculum(y) & Water(z)) -> ReleasedInto(x,y,z))", "all x y.((Sperm(x) & Osculum(y)) -> ReleasedIntoWater(x,y))", "all x.(Sperm(x) -> ReleasedIntoSurroundingWater(x))", "All x.(Ssperm(x) -> ReleasedIntoWater(x))"]}
{"id": "eqasc_validation_695", "nl": "male gametes are released into the surrounding water through the osculum", "fol": "", "prediction": ["all x y.((MaleGamete(x) & Osculum(y)) -> ReleasedIntoSurroundingWater(x,y))", "all x.((MaleGamete(x) & Osculum(x)) -> ReleasedIntoSurroundingWater(x))", "all x y z.((MaleGamete(x) & Osculum(y) & Water(z)) -> ReleasedInto(x,y,z))", "all x.(MaleGamete(x) -> ReleasedIntoSurroundingWaterThroughOsculum(x))", "all x y.((MaleGamete(x) & Osculum(y)) -> ReleasedIntoSurroundingWater(x,y))", "all x.((MaleGamete(x) & Osculum(x)) -> ReleasedIntoSurroundingWater(x))", "all x y z.((MaleGamete(x) & Osculum(y) & Water(z)) -> ReleasedInto(x,y,z))", "all x y z.((MaleGamete(x) & Osculum(y) & Osculum(z)) -> ReleasedIntoSurroundingWater(x,y,z))", "(all x.(MammalGamete(x) -> ReleasedIntoSurroundingWaterThroughOsculum(x)))", "all x.(MaleGamete(x) -> ReleasedIntoSurroundingWater(x))", "all x y.((MaleGamete(x) & Osculum(y)) -> ReleasedIntoWater(x,y))", "all x.(MaleGamete(x) -> ReleasedIntoWaterThroughOsculum(x))", "all x.((MaleGamete(x) & Osculum(x)) -> ReleasedIntoSurroundingWater(x))", "all x.((MaleGamete(x) & Osculum(x)) -> ReleasedIntoWaterThroughOsculum(x))", "all x y.((MaleGamete(x) & Osculum(y)) -> ReleasedIntoSurroundingWater(x,y))", "all x y z.((MaleGamete(x) & Osculum(y) & Water(z)) -> ReleasedInto(x,y,z))"]}
{"id": "eqasc_validation_696", "nl": "male gametes are released into the surrounding water through the osculum.", "fol": "", "prediction": ["all x.(MaleGamete(x) -> ReleasedIntoWaterThroughOsculum(x))", "all x y.((MaleGamete(x) & Osculum(y)) -> ReleasedIntoWater(x,y))", "all x.((MaleGamete(x) & Osculum(x)) -> ReleasedIntoWater(x))", "all x y z.((MaleGamete(x) & Osculum(y) & Water(z)) -> ReleasedInto(x,y,z))", "all x.(MaleGamete(x) -> ReleasedIntoSurroundingWater(x))", "all x y.((MaleGamete(x) & Osculum(y)) -> ReleasedIntoWater(x,y))", "all x.((MaleGamete(x) & Osculum(x)) -> ReleasedIntoSurroundingWater(x))", "(all x.(MaleGamete(x) -> ReleasedIntoWaterThroughOsculum(x)))", "all x.(MaleGamete(x) -> ReleasedIntoWaterThroughOsculum(x))", "all x y z.((MaleGamete(x) & Osculum(y) & Water(z)) -> ReleasedInto(x,y,z))", "all x y.((MaleGamete(x) & Osculum(y)) -> ReleasedIntoWater(x,y))", "all x.(MaleGamete(x) -> ReleasedIntoSurroundingWaterThroughOsculum(x))", "all x y.((MaleGamete(x) & Osculum(y)) -> ReleasedIntoSurroundingWater(x,y))", "all x.((MaleGamete(x) & Osculum(x)) -> ReleasedIntoWater(x))", "all x y.((MaleGamete(x) & Water(y)) -> ReleasedThroughOsculum(x,y))", "all x.(MaleGamete(x) -> ReleasedIntoWaterThroughOsculum(x))"]}
{"id": "eqasc_validation_697", "nl": "lightning can cause a forest fire", "fol": "", "prediction": ["all x y.((Lightning(x) & ForestFire(y)) -> Causes(x,y))", "all x y z.((Lightning(x) & ForestFire(y) & ForestFire(z)) -> Causes(x,y,z))", "all x y.((Lightning(x) & ForestFire(y)) -> CanCause(x,y))", "(CausesForestFire(lightning) -> CanCauseForestFire(lightning))", "all x.(Lightning(x) -> CausesForestFire(x))", "all x y z.((Lightning(x) & ForestFire(y) & Fire(z)) -> Causes(x,y,z))", "all x.(Lightning(x) -> CanCauseForestFire(x))", "(all x.(Lightning(x) -> CausesForestFire(x)))", "all x.((Lightning(x) & ForestFire(x)) -> Causes(x,y))", "all x y z.((Lightning(x) & ForestFire(y) & ForestFire(z)) -> CanCause(x,y,z))", "all x y.((Lightning(x) & ForestFire(y)) -> Causes(x,y))", "all x.(Lightning(x) -> CausesForestFire(x))", "all x y z.((Lightning(x) & ForestFire(y) & Fire(z)) -> CanCause(x,y,z))", "all x.(Lightning(x) -> CanCauseForestFire(x))", "all x y.((Lightning(x) & ForestFire(y)) -> CanCause(x,y))", "all x.(Lightning(x) -> CausesForestFire(x))"]}
{"id": "eqasc_validation_698", "nl": "Bush and forest fires cause enormous damage to vegetation and wildlife.", "fol": "", "prediction": ["all x y.((Bust(x) & ForestFire(y)) -> (CausesEmbarrassmentToVegetation(x) & CausesEmbarrassmentToWildlife(x)))", "all x.((Bust(x) | ForestFire(x)) -> (CausesEmbarrassmentToVegetation(x) & CausesEmbarrassmentToWildlife(x)))", "all x y z.((Bust(x) & ForestFire(y) & Vegetation(z) & Wildlife(z)) -> CausesEmbarrassmentalDamage(x,y,z))", "all x.((Bust(x) & ForestFire(x)) -> (CausesEmbarrassmentToVegetation(x) & CausesEmbarrassmentToWildlife(x)))", "all x.((Bush(x) | ForestFire(x)) -> (CausesEmbarrassmentToVegetation(x) & CausesEmbarrassmentToWildlife(x)))", "all x y.((Bush(x) & ForestFire(y)) -> (CausesEmbarrassmentToVegetation(x) & CausesEmbarrassmentToWildlife(x)))", "((Bush(b) | ForestFires(c))) -> CausesEmbarrassingDamageToVegetationAndWildlife(b))", "(DamageToVegetationAndWildlife(Bush) & CausesDamageToWildlife(ForestFires))", "all x y.((Bust(x) & ForestFire(y)) -> (CausesEmbarrassmentToVegetation(x) & CausesEmbarrassmentToWildlife(x)))", "(Bush(b) & ForestFire(c) & CausesEmbarrassmentalDamageToVegetationAndWildlife(b))", "all x.((Bush(x) | ForestFire(x)) -> CausesEmbarrassingDamageToVegetationAndWildlife(x))", "all x y z.((Bush(x) & ForestFire(y) & Vegetation(z) & Wildlife(z)) -> CausesEmbarrassmentalDamage(x,y,z))", "all x.((Bush(x) | ForestFire(x)) -> CausesEmbarrassingDamageToVegetationAndWildlife(x))", "all x y.((Bush(x) & ForestFire(y)) -> (CausesExtremeDamage(x,y) & ToVegetationAndWildlife(x)))", "all x.((Bust(x) & ForestFire(x)) -> (CausesEmbarrassmentToVegetation(x) & CausesEmbarrassmentToWildlife(x)))", "all x y z.((Bust(x) & ForestFire(y) & Vegetation(z) & Wildlife(z)) -> CausesEternalDamage(x,y,z))"]}
{"id": "eqasc_validation_699", "nl": "Lightning can cause damage to vegetation and wildlife.", "fol": "", "prediction": ["all x.(Lightning(x) -> (CausesDamage(x,Vegetation) & CausesDamage(x,Wildlife)))", "all x y.((Lightning(x) & Vegetation(y) & Wildlife(y)) -> CausesDamage(x,y))", "(all x.(Lightning(x) -> CausesDamageToVegetation(x)) & all y.(Lightning(y) -> CausesDamageToWildlife(y)))", "all x.(Lightning(x) -> (CausesDamage(x) & ToVegetation(x) & ToWildlife(x)))", "(CausesDamageToVegetationAndWildlife(Lightning))", "all x y z.((Lightning(x) & Vegetation(y) & Wildlife(z)) -> CausesDamage(x,y,z))", "all x y.((Lightning(x) & Vegetation(y) & Wildlife(y)) -> CausesDamage(x,y))", "(all x.(Lightning(x) -> CausesDamageToVegetation(x)) & all y.(Lightning(y) -> CausesDamageToWildlife(y)))", "all x.(Lightning(x) -> (CausesDamageToVegetation(x) & CausesDamageToWildlife(x)))", "all x.(Lightning(x) -> (CausesDamage(x,Vegetation) | CausesDamage(x,Wildlife)))", "all x y.((Lightning(x) & Vegetation(y) & Wildlife(z)) -> CausesDamage(x,y,z))", "all x y z.((Lightning(x) & Vegetation(y) & Wildlife(z)) -> CausesDamage(x,y,z))", "all x.(Lightning(x) -> (CausesDamageToVegetation(x) & CausesDamageToWildlife(x)))", "all x.(Lightning(x) -> CausesDamageToVegetationAndWildlife(x))", "all x.(Lightning(x) -> (CausesDamageToVegetation(x) | CausesDamageToWildlife(x)))", "all x y.((Lightning(x) & Vegetation(y) & Wildlife(y)) -> CausesDamage(x,y))"]}
{"id": "eqasc_validation_700", "nl": "Forest fires are bad for the environment.", "fol": "", "prediction": ["all x.(ForestFire(x) -> BadForEnvironment(x))", "all x y.((ForestFire(x) & Environment(y)) -> BadFor(x,y))", "all x.(ForestFire(x) -> BadForEnvironment(x))", "(BadForEnvironment(forestFires))", "all x y.((ForestFire(x) & Environment(y)) -> BadFor(x,y))", "all x.(ForestFire(x) -> BadForEnvironment(x))", "(BadForEnvironment(forestFires))", "all x y.((ForestFire(x) & Environment(y)) -> BadFor(x,y))", "all x.(ForestFire(x) -> BadForEnvironment(x))", "all x y.((ForestFire(x) & Environment(y)) -> BadFor(x,y))", "all x.(ForestFire(x) -> BadForEnvironment(x))", "all x y.((ForestFire(x) & Environment(y)) -> BadFor(x,y))", "all x.(ForestFire(x) -> BadForEnvironment(x))", "all x.(ForestFire(x) -> BadForEnvironment(x))", "all x.(ForestFire(x) -> BadForEnvironment(x))", "all x.(ForestFeuer(x) -> BadForEnvironment(x))"]}
{"id": "eqasc_validation_701", "nl": "Lightning can be bad for the environment.", "fol": "", "prediction": ["all x.(Lightning(x) -> BadForEnvironment(x))", "all x y.((Lightning(x) & Environment(y)) -> BadFor(x,y))", "all x.(Lightning(x) -> BadForEnvironment(x))", "(BadForEnvironmentWithLightning(Lightning)", "all x y.((Lightning(x) & Environment(y)) -> BadFor(x,y))", "all x.(Lightning(x) -> BadForEnvironment(x))", "(BadForEnvironmentWithLightning(lightning)", "all x y.((Lightning(x) & Environment(y)) -> BadFor(x,y))", "all x.(Lightning(x) -> BadForEnvironment(x))", "all x y.((Lightning(x) & Environment(y)) -> BadFor(x,y))", "all x.(Lightning(x) -> BadForEnvironment(x))", "exists x.(Lightning(x) & CanBeBadForEnvironment(x))", "all x y.((Lightning(x) & Environment(y)) -> BadFor(x,y))", "all x.(Lightning(x) -> BadForEnvironment(x))", "all x.(Lightning(x) -> BadForEnvironment(x))", "exists x.(Lightning(x) & BadForEnvironment(x))"]}
{"id": "eqasc_validation_702", "nl": "All thunderstorms contain lightning.", "fol": "", "prediction": ["all x.(Thunderstorm(x) -> ContainsLightning(x))", "all x.(Thunderstorm(x) -> ContainsLightning(x))", "(all x.(Thunderstorm(x) -> ContainsLightning(x)))", "all x y.((Thunderstorm(x) & Lightning(y)) -> Contains(x,y))", "all x.(Thunderstorm(x) -> ContainsLightning(x))", "(all x.(Thunderstorm(x) -> ContainsLightning(x)))", "all x y.((Thunderstorm(x) & Lightning(y)) -> Contains(x,y))", "all x.(Thunderstorm(x) -> ContainsLightning(x))", "(all x.(Thunderstorm(x) -> ContainsLightning(x)))", "all x.(Thunderstorm(x) -> ContainsLightning(x))", "all x.(Thunderstorm(x) -> ContainsLightning(x))", "all x.(Thunderstorm(x) -> ContainsLiterary(x))", "all x.(Thunderstorm(x) -> HasLightning(x))", "all x.(Thunderstorm(x) -> ContainsLightning(x))", "all x.(Tornado(x) -> ContainsLightning(x))", "all x.(Thunderstorm(x) -> ContainsLightning(x))"]}
{"id": "eqasc_validation_703", "nl": "thunderstorms can cause forest fires", "fol": "", "prediction": ["all x y.((Thunderstorm(x) & ForestFire(y)) -> Causes(x,y))", "all x.(Thunderstorm(x) -> CausesForestFires(x))", "all x y z.((Thunderstorm(x) & ForestFire(y) & ForestFire(z)) -> Causes(x,y,z))", "all x y.((Thunderstorm(x) & ForestFire(y)) -> CanCause(x,y))", "(all x.(Thunderstorm(x) -> CausesForestFires(x)))", "(CausesForestFires(thumours) -> CausesForestFires(thumours))", "all x.(Thunderstorm(x) -> CausesForestFires(x))", "all x.(Thunderstorm(x) -> CanCauseForestFires(x))", "(all x y.(Tornado(x) -> CausesForestFires(x,y)))", "all x y z.((Thunderstorm(x) & ForestFire(y) & ForestFire(z)) -> Causes(x,y,z))", "all x y.((Thunderstorm(x) & ForestFire(y)) -> Causes(x,y))", "all x y z.((Thunderstorm(x) & ForestFire(y) & ForestFire(z) & Causes(x,y,z)) -> Causes(x,y,z))", "all x.(Thunderstorm(x) -> CanCauseForestFires(x))", "all x.(Thunderstorm(x) -> CausesForestFires(x))", "all x y.((Thunderstorm(x) & ForestFarm(y)) -> Causes(x,y))", "all x.(Thunderstorm(x) -> CausesForestFires(x))"]}
{"id": "eqasc_validation_704", "nl": "Like fire cleaning out a forest, it leads to new growth and revitalization.", "fol": "", "prediction": ["all x y.((Fire(x) & Forest(y) & CleansOut(x,y)) -> (LeadsToNewGrowth(x) & Revitalizes(x)))", "all x.((Fire(x) & Forest(y) & CleansOut(x,y)) -> (NewGrowth(x) & Revitalization(x)))", "(Like fire cleaningoutsForest(fire) & NewGrowth(fire) & Revitalization(fire))", "all x y z.((Fire(x) & Forest(y) & Forest(z) & CleansOut(x,y)) -> (LeadsToNewGrowth(x,z) & Revitalizes(x,y)))", "(Like FireCleaningOutForest(fire) & NewGrowth(fire) & Revitalization(fire))", "all x y.((Fire(x) & Forest(y) & CleansOut(x,y)) -> (NewGrowth(x) & Revitalization(x)))", "all x y.((Fire(x) & Forest(y)) -> (CleansOut(x,y) & LeadsToNewGrowth(x) & Revitalizes(x)))", "all x.((Fire(x) & Forest(y) & CleansOut(x,y)) -> (LeadsToNewGrowth(x) & Revitalizes(x)))", "((Fire(fire) & Forest(forest)) -> (CleansOut(fire,forest) & LeadsToNewGrowth(fire,newgrowth) & Revitalizes(fire,forest)))", "(Like fire cleaningoutaforest(fire) & NewGrowthAndRevitalization(fire))", "all x.((Fire(x) & Forest(x)) -> (CleaningOut(x,Forest) & NewGrowth(x) & Revitalization(x)))", "all x y z.((Fire(x) & Forest(y) & Forest(z) & CleansOut(x,y)) -> (NewGrowth(x,z) & Revitalization(x,y)))", "(CleaningOutForests(fire,Fire) & NewGrowth(revitalization))", "(Like fire cleaningoutsForest(Fire) & NewGrowth(Revitalization))", "all x y.((Fire(x) & Forest(y) & CleansOut(x,y)) -> (LeadsToNewGrowth(x) & Revitalizes(x)))", "all x.((Fire(x) & Forest(y) & CleansOut(x,y)) -> (NewGrowth(x) & Revitalization(x)))"]}
{"id": "eqasc_validation_705", "nl": "Lightning can cause new growth and revitalization in a forest. ", "fol": "", "prediction": ["all x y.((Lightning(x) & Forest(y)) -> (CausesNewGrowth(x,y) & Revitalizes(x,y)))", "all x.(Lightning(x) -> (CausesNewGrowth(x) & RevitalizesForest(x)))", "all x y z.((Lightning(x) & Forest(y) & Forest(z)) -> (CausesNewGrowth(x,y) & Revitalizes(x,z)))", "all x y.((Lightning(x) & Forest(y)) -> (CausesNewGrowth(x,y) & Revitalizes(x,y)))", "(all x.(Lightning(x) -> CausesNewGrowth(x)) & all y.(Forest(y) -> CausesRevitalization(x,y)))", "all x y z.((Lightning(x) & Forest(y) & Growth(z)) -> (Causes(x,z) & Revitalizes(x,y)))", "all x.(Lightning(x) -> (CausesNewGrowth(x) & RevitalizesForest(x)))", "all x y.((Lightning(x) & Forest(y)) -> (CausesNewGrowth(x,y) & Revitalizes(x,y)))", "all x y z.((Lightning(x) & Forest(y) & Forest(z)) -> (CausesNewGrowth(x,y) & Revitalizes(x,z)))", "all x.(Lightning(x) -> (CausesNewGrowth(x) & RevitalizesForest(x)))", "all x.(Lightning(x) -> (CausesNewGrowth(x) & RevitalizesForest(x)))", "all x y.((Lightning(x) & Forest(y)) -> (CausesNewGrowth(x,y) & Rejuvenates(x,y)))", "all x.(Lightning(x) -> (CausesNewGrowth(x) & CausesRevitalization(x) & InForest(x)))", "all x.(Lightning(x) -> (CausesNewGrowth(x) & RevitalizesForest(x)))", "all x y.((Lightning(x) & Forest(y)) -> (CausesNewGrowth(x,y) & Revitalizes(x,y)))", "all x.(Lightning(x) -> (CausesNewGrowth(x) & Rejuvenates(x)))"]}
{"id": "eqasc_validation_706", "nl": "Lightning is very common during storms.", "fol": "", "prediction": ["all x.(Lightning(x) -> VeryCommonDuringStorms(x))", "all x y.((Lightning(x) & Storm(y)) -> VeryCommon(x,y))", "all x.(Lightning(x) -> VeryCommonDuringStorms(x))", "all x.((Lightning(x) & Storm(x)) -> VeryCommon(x))", "(all x.(Lightning(x) -> CommonDuringStorms(x))", "all x y z.((Lightning(x) & Storm(y) & Storm(z)) -> VeryCommon(x,y,z))", "all x y.((Lightning(x) & Storm(y)) -> VeryCommonDuring(x,y))", "all x.(Lightning(x) -> VeryCommonDuringStorms(x))", "(all x.(Lightning(x) -> Storm(x)))", "all x y.((Lightning(x) & Storm(y)) -> VeryCommon(x,y))", "(all x.(Lightning(x) -> CommonDuringStorms(x))", "all x.(Lightning(x) -> VeryCommonDuringStorms(x))", "all x.(Lightning(x) -> VeryCommonDuringStorms(x))", "all x y.((Lightning(x) & Storm(y)) -> VeryCommonDuring(x,y))", "All x.(Lightning(x) -> CommonDuringStorms(x))", "all x.(Lightning(x) -> VeryCommonDuringStorms(x))"]}
{"id": "eqasc_validation_707", "nl": "forest fires can be caused by thunder storms ", "fol": "", "prediction": ["all x y.((ForestFire(x) & ThunderStorm(y)) -> CausedBy(x,y))", "all x.(ForestFire(x) -> (CausedByThunderStorms(x) & CausedByThunderStorms(x)))", "all x y z.((ForestFire(x) & ThunderStorm(y) & ThunderStorm(z)) -> CausedBy(x,y,z))", "(all x.(ForestFire(x) -> CausedByThunderStorms(x)))", "all x.(ForestFire(x) -> CausedByThunderStorms(x))", "all x y.((ForestFire(x) & ThunderStorm(y)) -> CausedBy(x,y))", "(all x.(ForestFire(x) -> CausedByThunderStorms(x)))", "all x.(ForestFire(x) -> (CausedByThunderStorms(x) & CausedByThunderStorms(x)))", "all x y z.(ForestFire(x) & ThunderStorm(y) & ThunderStorm(z) & CausedBy(x,y,z))", "all x y z.((ForestFire(x) & ThunderStorm(y) & ThunderStorm(z)) -> CausedBy(x,y,z))", "all x.(ForestFire(x) -> (CausedByThunderStorms(x) & CausedByThunderStorms(x)))", "all x.(ForestFire(x) -> (CausedByThunderStorms(x) | CausedByThunderStorms(x)))", "all x y.((ForestFire(x) & ThunderStorm(y)) -> CausedBy(x,y))", "all x.(ForestFire(x) -> CausedByThunderStorms(x))", "all x.(ForestFires(x) -> (CausedByThunderStorms(x) | CausedByThunderStorms(x)))", "all x y.((ForestFire(x) & ThunderStorm(y)) -> CausedBy(x,y))"]}
{"id": "eqasc_validation_708", "nl": "Lightning, overall, is a major cause of fires.", "fol": "", "prediction": ["all x.((Lightning(x) & MajorCauseOfFires(x)) -> MajorCauseOfFires(x))", "all x y.((Lightning(x) & Fire(y)) -> MajorCause(x,y))", "(MajorCauseOfFires(Lightning) & MajorCauseOfFires(Lightning))", "all x.(Lightning(x) -> MajorCauseOfFires(x))", "(MainCauseOfFires(Lightning) & MajorCauseOfFires(Lightning))", "all x.((Lightning(x) & MajorCauseOfFires(x)) -> MajorCauseOfFires(x))", "(MajorCauseOfFires(Lightning) & MajorCauseOfFires(Lightning))", "all x y.((Lightning(x) & Fire(y)) -> MajorCause(x,y))", "all x.(Lightning(x) -> MajorCauseOfFires(x))", "all x.((Lightning(x) & MajorCauseOfFires(x)) -> MajorCauseOfFires(x))", "all x.((Lightning(x) & Fire(x)) -> MajorCause(x))", "(MajorCauseOfFires(Lightning) & MajorCauseOfFires(Lightning,Overall))", "all x y.((Lightning(x) & Fire(y)) -> MajorCause(x,y))", "all x.(Lightning(x) -> MajorCauseOfFires(x))", "all x y.((Lightning(x) & Fire(y)) -> MajorCauseOf(x,y))", "all x.((Lightning(x) & MajorCauseOfFires(x)) -> MajorCauseOfFires(x))"]}
{"id": "eqasc_validation_709", "nl": "lightning ignites fires", "fol": "", "prediction": ["all x y.((Lightning(x) & Fire(y)) -> Ignites(x,y))", "all x y z.((Lightning(x) & Fire(y) & Fire(z)) -> Ignites(x,y,z))", "all x.(Lightning(x) -> IgnitesFires(x))", "all x y.((Lightning(x) & Fire(y)) -> Ignites(x,y))", "(all x y.((Lightning(x) & Fire(y)) -> Ignites(x,y)))", "all x y z.((Lightning(x) & Fire(y) & Fire(z)) -> Ignites(x,y,z))", "all x.((Lightning(x) & Fire(y)) -> Ignites(x,y))", "lightning ignitesFiresWithIgnitedLightning(Lightning)", "all x.(Lightning(x) -> IgnitesFires(x))", "all x y.((Lightning(x) & Fire(y)) -> Ignites(x,y))", "all x y z.((Lightning(x) & Fire(y) & Fire(z)) -> Ignites(x,y,z))", "all x.(LightningIgnitesFires(x) -> Fires(x))", "all x.(Lightning(x) -> IgnitesFires(x))", "all x y.((Lightning(x) & Fire(y)) -> Ignites(x,y))", "all x y z.((Lightning(x) & Fire(y) & Fire(z)) -> Ignites(x,y,z))", "all x y.((Lightning(x) & Fire(y)) -> Ignites(x,y))"]}
{"id": "eqasc_validation_710", "nl": "Forest fires are examples of wildfires.", "fol": "", "prediction": ["all x.(ForestFire(x) -> Wildfire(x))", "all x y.((ForestFire(x) & Wildfire(y)) -> Examples(x,y))", "all x.(ForestFire(x) -> Wildfire(x))", "all x.((ForestFire(x) & Wildfire(x)) -> Examples(x))", "(Wildfire(forest) & ExamplesOf(forestFires(forest))", "all x y.((ForestFire(x) & Wildfire(y)) -> Examples(x,y))", "all x.(ForestFire(x) -> Wildfire(x))", "all x.((ForestFire(x) & Wildfire(x)) -> Examples(x))", "all x y.((ForestFire(x) & Wildfire(y)) -> Examples(x,y))", "all x.(ForestFire(x) -> Wildfire(x))", "all x y.((ForestFire(x) & Wildfire(y)) -> Example(x,y))", "all x.((ForestFire(x) & Wildfire(x)) -> Examples(x))", "all x y.((ForestFire(x) & Wildfire(y)) -> ExamplesOf(x,y))", "all x.(ForestFire(x) -> Wildfire(x))", "all x.(ForestFire(x) -> Wildfire(x))", "all x.(ForestFire(x) -> Wildfire(x))"]}
{"id": "eqasc_validation_711", "nl": "Wildfires are caused by lightning", "fol": "", "prediction": ["all x.(Wildfire(x) -> (CausedByLightning(x) & CausedByLightning(x)))", "all x y.((Wildfire(x) & Lightning(y)) -> CausedBy(x,y))", "all x.(Wildfire(x) -> CausedByLightning(x))", "all x.((Wildfire(x) & Lightning(x)) -> CausedBy(x,y))", "all x y z.((Wildfire(x) & Lightning(y) & Lightning(z)) -> CausedBy(x,y,z))", "all x y.((Wildfire(x) & Lightning(y)) -> CausedBy(x,y))", "(all x.(Wildfire(x) -> CausedByLightning(x)))", "all x.(Wildfire(x) -> (CausedByLightning(x) & CausedByLightning(x)))", "all x.((Wildfire(x) & Lightning(y)) -> CausedBy(x,y))", "all x y z.((Wildfire(x) & Lightning(y) & Lightning(z)) -> CausedBy(x,y,z))", "all x.((Wildfire(x) & LightningCause(x)) -> WildfireCausedBy(x,Lightning))", "all x.(Wildfire(x) -> (CausedByLightning(x) & CausedByLightning(x)))", "(all x.(Wildfire(x) -> CausedByLightning(x)))", "all x y.((Wildfire(x) & Lightning(y)) -> CausedBy(x,y))", "all x.(Wildfire(x) -> CausedByLightning(x))", "all x y.((Wildfire(x) & Lightning(y)) -> CausedBy(x,y))"]}
{"id": "eqasc_validation_712", "nl": "Lightning can cause a wildfire.", "fol": "", "prediction": ["all x.(Lightning(x) -> CanCauseWildfire(x))", "all x y.((Lightning(x) & Wildfire(y)) -> CanCause(x,y))", "(all x.(Lightning(x) -> CanCauseWildfire(x)))", "all x.(Lightning(x) -> CanCauseWildfire(x))", "all x y z.((Lightning(x) & Wildfire(y) & Fire(z)) -> CanCause(x,y,z))", "all x y.((Lightning(x) & Wildfire(y)) -> CanCause(x,y))", "(CausesWildfire(Lightning(Lightning))", "all x.(Lightning(x) -> CanCauseWildfire(x))", "all x y.((Lightning(x) & Wildfire(y)) -> CanCause(x,y))", "all x y.((Lightning(x) & Wildfire(y)) -> Causes(x,y))", "all x.(Lightning(x) -> CausesWildfire(x))", "all x.(Lightning(x) -> CanCauseWildfire(x))", "all x y.((Lightning(x) & Wildfire(y)) -> CanCause(x,y))", "all x.(Lightning(x) -> CausesWildfire(x))", "all x.(Lightning(x) -> CanCauseWildfire(x))", "all x.(Lightning(x) -> CanCauseWildfire(x))"]}
{"id": "eqasc_validation_713", "nl": "Until the town was destroyed by the forest fire.", "fol": "", "prediction": ["all x.((Town(x) & ForestFire(x)) -> DestroyedBy(x,y))", "all x y.((Town(x) & ForestFire(y)) -> DestroyedBy(x,y))", "Until the town was destroyed by the forest fire.", "(DisturbedByForestFire(Town) & Until(Town))", "all x.(Town(x) -> DestroyedByForestFire(x))", "the town was destroyed by the forest fire.", "Until ForestFire(t) & DestroyedBy(t)", "all x y.((Town(x) & ForestFire(y)) -> DestroyedBy(x,y))", "all x.((Town(x) & ForestFire(x)) -> DestroyedBy(x,y))", "Until the town was destroyed by the forest fire.", "(DestroyedByForestFire(Town) & Until(Town))", "-(Town(t) & ForestFire(t))", "-(Town(t) & ForestFire(t) & DestroyedBy(t,t))", "Until the town was destroyed by the forest fire.", "all x y.((Town(x) & ForestFire(y)) -> DestroyedBy(x,y))", "Until ForestFireDestroyed(town,y)"]}
{"id": "eqasc_validation_714", "nl": "Lightning can destroy towns", "fol": "", "prediction": ["all x y.((Lightning(x) & Town(y)) -> CanDestroy(x,y))", "all x.(Lightning(x) -> CanDestroyTowns(x))", "all x y z.((Lightning(x) & Town(y) & Town(z)) -> CanDestroy(x,y,z))", "(DisruptsTownsByLightning(Lightning) & TownsByLightning(Lightning))", "all x y.((Lightning(x) & Town(y)) -> CanDestroy(x,y))", "all x.(Lightning(x) -> CanDestroyTowns(x))", "all x y z.((Lightning(x) & Town(y) & Town(z)) -> CanDestroy(x,y,z))", "all x.(Lightning(x) -> CanDestroyCountries(x))", "all x y.((Lightning(x) & Town(y)) -> CanDestroy(x,y))", "(DisruptsTownsByLightning(Lightning))", "all x.(Lightning(x) -> (DisruptsTowns(x) & -DisruptsTowns(x)))", "all x.(Lightning(x) -> CanDestroyTowns(x))", "all x y z.((Lightning(x) & Town(y) & Town(z)) -> CanDestroy(x,y,z))", "all x y.((Lightning(x) & Town(y)) -> CanDestroy(x,y))", "all x.(Lightning(x) -> CanDestroyCountries(x))", "all x.(Lightning(x) -> CanDestroyTowns(x))"]}
{"id": "eqasc_validation_715", "nl": "Summer storms kick up huge clouds of dust and lightning ignites brush fires.", "fol": "", "prediction": ["all x y.((SummerStorm(x) & Lightning(y)) -> (KicksUp(x,y) & IgnitesBrushFires(y)))", "(all x.(SummerStorm(x) -> KickUpSum(x)) & all y.(Lightning(y) -> IgnitesBrushFires(y)))", "all x y z.((SummerStorm(x) & SummerStorm(y) & Lightning(z)) -> (KicksUp(x,y) & IgnitesBrushFires(z)))", "(all x.(SummerStorm(x) -> KicksUpHabitat(x)) & all y.(Lightning(y) -> IgnitesBrushFires(y)))", "(all x y.((SummerStorm(x) & Cloud(y)) -> KickUp(x,y)) & ((Lightning(x) & BrushFire(y)) -> Ignite(x,y)))", "all x.(SummerStorm(x) -> (KicksUpHabitat(x) & LightningIgnitesBrushFires(x)))", "all x y.((SummerStorm(x) & Lightning(y)) -> (KicksUpHazardousClouds(x) & IgnitesBrushFires(y)))", "all x y z.((SummerStorm(x) & Cloud(y) & Lightning(z)) -> (KicksUp(x,y) & IgnitesBrushFires(z)))", "all x.(SummerStorm(x) -> (KicksUpHugeCloudsOfDust(x) & LightningIgnitesBrushFires(x)))", "(all x y.((SummerStorm(x) & Cloud(y)) -> KickUp(x,y)) & all z w.((Lightning(z) & BrushFire(w)) -> Ignite(z,w)))", "(all x.(SummerStorm(x) -> KickUpHabitat(x)) & all y.(Lightning(y) -> IgniteBrushFires(y)))", "all x y.((SummerStorm(x) & Lightning(y)) -> (KicksUpHabitat(x) & IgnitesBrushFires(y)))", "(all x y.((SummerStorm(x) & Cloud(y)) -> KicksUp(x,y)) & all z w.((Lightning(z) & BrushFire(w)) -> Ignites(z,w)))", "all x.(SummerStorm(x) -> (KicksUpHazardousCloudsOfDust(x) & LightningIgnitesBrushFires(x)))", "(all x.(SummerStorm(x) -> KicksUpHabitat(x)) & all y.(Lightning(y) -> IgnitesBrushFires(y)))", "all x y.((SummerStorm(x) & Lightning(y)) -> (KickUpHabitat(x) & IgniteBrushFires(y)))"]}
{"id": "eqasc_validation_716", "nl": "storms cause fires in the woods", "fol": "", "prediction": ["all x y z.((Storm(x) & Woods(y) & Fire(z)) -> CausesIn(x,y,z))", "all x y.((Storm(x) & Woods(y)) -> CausesFiresIn(x,y))", "all x.(Storm(x) -> CausesFiresInWoods(x))", "all x y z.((Storm(x) & Woods(y) & Woods(z)) -> CausesFiresIn(x,y,z))", "all x.((Storm(x) & CausesFiresInWoods(x)) -> InWoods(x))", "all x y.((Storm(x) & Woods(y)) -> CausesFires(x,y))", "(all x y.((Storm(x) & Woods(y)) -> CausesFires(x,y)))", "all x y z.((Storm(x) & Fire(y) & Wood(z)) -> CausesIn(x,y,z))", "all x.((Storm(x) & CausesFires(x,Woods)) -> CausesFiresInWoods(x))", "all x y.((Storm(x) & Wood(y)) -> CausesFiresIn(x,y))", "all x.(Storm(x) -> CausesFiresInWoods(x))", "(all x.(Storm(x) -> CausesFiresInWoods(x)))", "all x y z.((Storm(x) & Woods(y) & Fire(z)) -> CausesIn(x,y,z))", "all x y.((Storm(x) & Wood(y)) -> CausesFiresIn(x,y))", "all x.(Storm(x) -> CausesFiresInWoods(x))", "all x y z.((Storm(x) & Fire(y) & Woods(z)) -> CausesIn(x,y,z))"]}
{"id": "eqasc_validation_717", "nl": "Static electricity is the cause of lightning.", "fol": "", "prediction": ["all x.(StaticElectricity(x) -> CauseOfLightning(x))", "all x.((StaticElectricity(x) & Lightning(x)) -> Cause(x))", "all x y.((StaticElectricity(x) & Lightning(y)) -> Cause(x,y))", "(CauseOfLightning(staticElectricity))", "all x.(StaticElectricity(x) -> CauseOfLightning(x))", "all x.((StaticElectricity(x) & Lightning(x)) -> Cause(x,y))", "all x y.((StaticElectricity(x) & Lightning(y)) -> Cause(x,y))", "(CauseOfLightning(staticElectricity)", "all x.(StaticElectricity(x) -> CauseOfLightning(x))", "all x y.((StaticElectricity(x) & Lightning(y)) -> Cause(x,y))", "all x.((StaticElectricity(x) & Lightning(x)) -> Cause(x))", "(CauseOfLightning(statiqueElectricity)", "all x y.((StaticElectricity(x) & Lightning(y)) -> CauseOf(x,y))", "all x.(StaticElectricity(x) -> CauseOfLightning(x))", "all x.((StaticElectricity(x) & Lightning(y)) -> CauseOf(x,y))", "All x.(StaticElectricity(x) -> CauseOfLightning(x))"]}
{"id": "eqasc_validation_718", "nl": "Static electricity can cause a forest fire.", "fol": "", "prediction": ["all x.(StaticElectricity(x) -> CausesForestFire(x))", "all x.((StaticElectricity(x) & ForestFire(x)) -> Causes(x,y))", "all x.(StaticElectricity(x) -> CanCauseForestFire(x))", "(CausesForestFire(staticElectricity) & StaticElectricity(staticElectricity))", "all x y.((StaticElectricity(x) & ForestFire(y)) -> Causes(x,y))", "all x.((StaticElectricity(x) & ForestFire(x)) -> CanCause(x,y))", "all x y.((StaticElectricity(x) & ForestFire(y)) -> CanCause(x,y))", "all x.(StaticElectricity(x) -> CausesForestFire(x))", "all x.((StaticElectricity(x) & ForestFire(x)) -> Causes(x,y))", "all x.(StaticElectricity(x) -> CanCauseForestFire(x))", "all x y.((StaticElectricity(x) & ForestFire(y)) -> Causes(x,y))", "all x y.((StaticElectricity(x) & ForestFire(y)) -> CanCause(x,y))", "all x.((StaticElectricity(x) & ForestFire(x)) -> CanCause(x,y))", "all x.(StaticElectricity(x) -> CausesForestFire(x))", "all x.(StaticElectricity(x) -> CanCauseForestFire(x))", "all x y.((StaticElectricity(x) & ForestFire(y)) -> Causes(x,y))"]}
{"id": "eqasc_validation_719", "nl": "Forests are often at risk of being destroyed by forest fires.", "fol": "", "prediction": ["all x.(Forest(x) -> (AtRiskOfFeuers(x) & DestroyedByForestFires(x)))", "all x y.((Forest(x) & ForestFire(y)) -> AtRiskOfDestroying(x,y))", "all x.(Forest(x) -> (AtRiskOfFire(x) & DestroyedByForestFire(x)))", "all x.(Forest(x) -> (RiskOfFeuer(x) & DestroyedByForestFires(x)))", "(all x.(Forest(x) -> AtRiskOfFeuers(x)))", "all x y z.((Forest(x) & ForestFire(y) & Fire(z)) -> AtRiskOfDestroying(x,y,z))", "all x.(Forest(x) -> (AtRiskOfForestFires(x) & DestroyedByForestFires(x)))", "all x y.((Forest(x) & ForestFire(y)) -> AtRiskOfDefiring(x,y))", "all x y.((Forest(x) & ForestFire(y)) -> (AtRiskOfDestroying(x,y) | AtRiskOfDestroying(x,y)))", "all x y.(Forest(x) -> (AtRiskOfFeuers(y) & DestroyedByForest(x,y)))", "all x.(Forest(x) -> OftenAtRiskOfFeuers(x))", "all x.(Forest(x) -> AtRiskOfFire(x))", "all x.(Forest(x) -> (AtRiskOfFeuers(x) & DestroyedByForestFires(x)))", "all x y.((Forest(x) & ForestFire(y)) -> AtRiskOfDestroying(x,y))", "all x.(Forest(x) -> (AtRiskOfFire(x) & DestroyedByForestFire(x)))", "all x.(Forest(x) -> AtRiskOfFeuers(x))"]}
{"id": "eqasc_validation_720", "nl": "lightning can cause forests to be destroyed", "fol": "", "prediction": ["all x y.((Lightning(x) & Forest(y)) -> CausesToBeDismantled(x,y))", "all x y z.((Lightning(x) & Forest(y) & Forest(z)) -> CausesToBeDismantled(x,y,z))", "all x.(Lightning(x) -> CausesForestDestruction(x))", "(all x.(Lightning(x) -> CausesForestDestruction(x)))", "lightning can cause forests to be destroyed by lightning.", "all x y.((Lightning(x) & Forest(y)) -> CausesToBeDisrupted(x,y))", "all x y z.((Lightning(x) & Forest(y) & Forest(z)) -> CausesToBeDisrupted(x,y,z))", "all x y.((Lightning(x) & Forest(y)) -> CanCauseDestruction(x,y))", "all x.(Lightning(x) -> CausesForestDestruction(x))", "all x.(Lightning(x) -> CanCauseForestsToBeDismantled(x))", "lightning can cause forests to be destroyed by lightning.", "all x y z.((Lightning(x) & Forest(y) & Forest(z) & CausesDestruction(x,y,z)) -> CanCause(x,y,z))", "lightning can cause forests to be destroyed (forests destroyed by lightning).", "lightning can cause forests to be destroyed by lightning.", "all x.(Lightning(x) -> CausesForestsToBeDismantled(x))", "all x y.((Lightning(x) & Forest(y)) -> CausesToBeDisturbed(x,y))"]}
{"id": "eqasc_validation_721", "nl": "the type of material through which sound passes changes the speed at which sound travels", "fol": "", "prediction": ["all x y.((Material(x) & SoundPasses(x) & MaterialType(y)) -> ChangesSpeedAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWay", "all x.((MaterialType(x) & SoundPasses(x)) -> ChangesSpeedAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWay", "all x.((Material(x) & SoundPasses(x)) -> ChangesSpeedAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWay", "all x y.((MaterialType(x) & SoundPasses(x)) -> ChangesSpeedAt(x,y))", "all x y z.((Material(x) & Sound(y) & Sound(z) & Through(x,y) & Through(x,z)) -> ChangesSpeedAt(x,y,z))", "all x.((MaterialType(x) & SoundPassesThrough(x)) -> ChangesSpeedAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWayAtWay", "all x y.((Material(x) & Sound(y) & Through(x,y)) -> ChangesSpeedAt(x,y))", "all x.((MaterialType(x) & SoundPasses(x)) -> ChangesSpeedAt(x,SoundTravels))", "(ChangesSpeedAtTravel(sound) -> MaterialType(soundPasses(sound)))", "all x y z.((Material(x) & SoundPasses(x) & Material(y) & SoundTravel(z)) -> ChangesSpeedAt(y,z))", "all x y.((MaterialType(x) & SoundPasses(x) & SoundTravel(y)) -> ChangesSpeedAt(x,y))", "all x.((MaterialType(x) & SoundPasses(x)) -> ChangesSpeedAtWaysAtWaysAtWaysAtWaysAtWays(x))", "(ChangesSpeedAtTravel(Sound) -> MaterialType(SoundPasses(Sound))", "all x y.((Material(x) & SoundPasses(x,y)) -> ChangesSpeedAt(x,y))", "all x.((MaterialType(x) & SoundPasses(x)) -> ChangesSpeedAt(x,soundTravels))", "all x.((MaterialType(x) & SoundPassesThrough(x)) -> ChangesSpeedAtWorth(x))"]}
{"id": "eqasc_validation_722", "nl": "Hearing is the act of perceiving sound.", "fol": "", "prediction": ["all x.(Hearing(x) -> PerceivesSound(x))", "all x y.((Hearing(x) & Sound(y)) -> Perceives(x,y))", "all x.(Hearing(x) -> PerceivesSound(x))", "all x y.((Hearing(x) & Sound(y)) -> Perceives(x,y))", "all x.(Hearing(x) -> PerceivesSound(x))", "all x y z.((Hearing(x) & Sound(y) & Sound(z)) -> Perceives(x,y,z))", "all x.(Hearing(x) -> PerceivesSound(x))", "all x y.((Hearing(x) & Sound(y)) -> Perceives(x,y))", "all x.(Hearing(x) -> PerceivesSound(x))", "all x y.((Hearing(x) & Sound(y) & Perceives(x,y)) -> Perceives(x,y))", "All x.(HasHearing(x) -> PerceivesSound(x))", "all x y.((Hearing(x) & Sound(y)) -> Perceives(x,y))", "All x.(Hearing(x) -> PerceivesSound(x))", "all x.(Hearing(x) -> PerceivesSound(x))", "All x.(Hearing(x) -> PerceivesSound(x))", "All x.(Hearing(x) -> PerceivesSound(x))"]}
{"id": "eqasc_validation_723", "nl": "the speed of hearing changes depending on the material passed through", "fol": "", "prediction": ["all x y.((Material(x) & MaterialPassedThrough(y)) -> SpeedOfHearingChanges(x,y))", "all x y.((HearingMaterial(x) & MaterialPassedThrough(y)) -> ChangesSpeedOfHearing(x,y))", "all x.((HearingMaterial(x) & PassedThrough(x)) -> ChangesSpeed(x))", "all x y z.((Hearing(x) & Material(y) & Material(z) & PassedThrough(y,z)) -> ChangesSpeedOfHearing(x))", "all x.((Material(x) & PassedThrough(x)) -> ChangesSpeedOfHearing(x))", "all x y z.((SpeedOfHearing(x) & MaterialPassedThrough(y) & MaterialPassedThrough(z)) -> ChangesSpeedOfHearing(x,y,z))", "all x y.((Material(x) & Material(y) & PassedThrough(x,y)) -> ChangesSpeedOfHearing(x))", "the speed of hearing changes depending on the material passed through.", "all x.((HearingMaterial(x) & PassedThrough(x)) -> ChangesSpeedOfHearing(x))", "(all x.(HasMaterialPassedThrough(x) -> ChangesSpeedOfHearing(x)))", "(all x.(SpeedOfHearing(x) -> ChangesDependingOnMaterial(x)))", "all x.(SpeedOfHearingChanges(x) -> MaterialPassedThrough(x))", "all x y z.((Hearing(x) & Material(y) & MaterialPassedThrough(z)) -> ChangesSpeedOfHearing(x,y,z))", "all x y.((HasMaterial(x) & MaterialPassedThrough(y)) -> SpeedOfHearingChanges(x,y))", "all x.(SpeedOfHearing(x) -> ChangesDependingOnMaterialPassedThrough(x))", "all x.((HearingMaterial(x) & PassedThrough(x)) -> SpeedChanges(x))"]}
{"id": "eqasc_validation_724", "nl": "Sound vibrations travel at different speeds through different materials.", "fol": "", "prediction": ["all x y.((SoundVibration(x) & Material(y)) -> TravelsAtDifferentSpeeds(x,y))", "all x.(SoundVibration(x) -> TravelsAtDifferentSpeeds(x))", "all x y z.((SoundVibration(x) & Material(y) & Material(z)) -> TravelsAtDifferentSpeeds(x,y,z))", "all x y.((SoundVibration(x) & Material(y)) -> TravelsAtDifferentSpeeds(x,y))", "(all x.(SoundVibration(x) -> TravelsAtDifferentSpeeds(x)))", "all x.(SoundVibration(x) -> TravelsAtDifferentSpeeds(x))", "all x y z.((SoundVibration(x) & Material(y) & Material(z)) -> TravelsAtDifferentSpeeds(x,y,z))", "all x.((SoundVibration(x) & DifferentSpeeds(x)) -> TravelsThroughMaterials(x))", "all x y.((SoundVibration(x) & Material(y)) -> TravelsAtDifferentSpeeds(x,y))", "all x.(SoundVibration(x) -> TravelsAtDifferentSpeeds(x))", "all x y z.((SoundVibration(x) & Material(y) & Material(z)) -> TravelsAtDifferentSpeeds(x,y,z))", "all x y.((SoundVibration(x) & Material(y)) -> TravelsAtVariousSpeeds(x,y))", "all x.(SoundVibration(x) -> TravelsAtVariousSpeeds(x))", "all x.(SoundVibration(x) -> TravelAtDifferentSpeeds(x))", "all x y.((SoundVibration(x) & Material(y)) -> TravelAtDifferentSpeeds(x,y))", "all x.(SonicVibration(x) -> DifferentSpeeds(x))"]}
{"id": "eqasc_validation_725", "nl": "the type of material through which sound passes changes the sound vibrations", "fol": "", "prediction": ["all x.((MaterialType(x) & SoundPasses(x)) -> ChangesSoundVibrations(x))", "all x y.((Material(x) & SoundPasses(x)) -> ChangesSoundVibrations(x,y))", "all x.((Material(x) & SoundPasses(x)) -> ChangesSoundVibrations(x))", "all x y z.((Material(x) & SoundPasses(y) & Material(z)) -> ChangesSoundVibrations(x,y,z))", "(ChangesSoundVibrations(MaterialType) & SoundPasses(MaterialType))", "all x y.((MaterialType(x) & SoundPasses(x,y)) -> ChangesSoundVibrations(x))", "all x y.((Material(x) & SoundPasses(x)) -> ChangesSoundVibrations(y))", "(ChangesSoundVibrations(Material(Material) & SoundPasses(Material))", "all x.((MaterialType(x) & SoundPasses(x)) -> ChangesSoundVibrations(x))", "all x y.((Material(x) & SoundPassesThrough(x,y)) -> ChangesSoundVibrations(x,y))", "all x y z.((Material(x) & SoundPasses(y) & SoundVibration(z)) -> Changes(x,y,z))", "all x.((Material(x) & SoundPasses(x)) -> ChangesSoundVibrations(x))", "all x y.((MaterialType(x) & SoundPasses(x)) -> ChangesSoundVibrations(x,y))", "all x.((MaterialType(x) & SoundPasses(x)) -> ChangesSoundVibrations(x))", "all x.((MaterialType(x) & SoundPassesThrough(x)) -> ChangesSoundVibrations(x))", "all x.((MaterialType(x) & SoundPasses(x)) -> ChangesSoundVibrations(x))"]}
{"id": "eqasc_validation_726", "nl": "Sound Sound waves are mechanical waves.", "fol": "", "prediction": ["all x.(SoundWaves(x) -> MechanicalWaves(x))", "all x.(Sound(x) -> MechanicalWaves(x))", "all x y.((SoundWaves(x) & MechanicalWaves(y)) -> SoundWaves(x,y))", "all x.(SonicWaves(x) -> MechanicalWaves(x))", "(MechanicalWaves(sound) & -MechanicalWaves(sound))", "all x.(Sound(x) -> MechanicalWaves(x))", "Sound SoundWaves(s) -> MechanicalWaves(s))", "all x y.((SonicWave(x) & MechanicalWave(y)) -> SoundWave(x,y))", "all x y.((SoundWaves(x) & Sound(y)) -> MechanicalWaves(x))", "(MachineWaves(Sound))", "all x.(SonicWaves(x) -> MechanicalWaves(x))", "All x.(SonorSound(x) -> MechanicalWaves(x))", "all x.(Sound(x) -> MechanicalWaves(x))", "all x.(SonicWaves(x) -> MechanicalWaves(x))", "All x.(Sound(x) -> MechanicalWaves(x))", "All x.(SoundWaves(x) -> MechanicalWaves(x))"]}
{"id": "eqasc_validation_727", "nl": "the type of material through which mechanical waves pass change the speed at which they travel", "fol": "", "prediction": ["all x y.((MaterialType(x) & MechanicalWaves(y) & PassThrough(x,y)) -> ChangesSpeedAtTravel(x,y))", "all x.((MaterialType(x) & MechanicalWavesPass(x)) -> ChangesSpeedAtTravel(x))", "all x y.((Material(x) & MechanicalWaves(y) & PassThrough(x,y)) -> ChangesSpeedAtTravel(x,y))", "all x.((MaterialType(x) & MechanicalWaves(x) & PassThrough(x)) -> ChangesSpeedAtTravel(x))", "all x y z.((Material(x) & MechanicalWaves(y) & Material(z) & MechanicalWaves(y) & PassThrough(x,z)) -> ChangesSpeedAtTravel(x,y,z))", "the type of material through which mechanicalwavesPassesChangesSpeedAtTravel(mechanicalWaves)", "all x.((Material(x) & MechanicalWaves(x)) -> ChangesSpeedAtTravel(x))", "all x y.((MaterialType(x) & MechanicalWaves(y)) -> ChangesSpeedAtTravel(x,y))", "all x.(Material(x) & MechanicalWaves(x) & PassThrough(x,y) & ChangeSpeedAtTravel(y))", "(MaterialType(m) & MechanicalWavesPass(m)) -> ChangesSpeedAtTravel(m))", "all x y z.((Material(x) & MechanicalWaves(y) & Material(z)) -> ChangesSpeedAtTravel(x,y,z))", "all x y.((Material(x) & MechanicalWaves(y) & PassThrough(x,y)) -> ChangesSpeedAtTravel(x,y))", "all x.((MaterialType(x) & MechanicalWavesPass(x)) -> ChangesSpeedAtTravel(x))", "all x y.((MaterialType(x) & MechanicalWaves(y) & PassesThrough(x,y)) -> ChangesSpeedAtTravel(x,y))", "all x.((MaterialType(x) & MechanicalWaves(x) & PassThrough(x,y)) -> ChangesSpeedAtTravel(x))", "all x.(MaterialType(x) & MechanicalWavesPass(x) -> ChangeSpeedAtTravel(x))"]}
{"id": "eqasc_validation_728", "nl": "Sound moves through different materials at different rates ", "fol": "", "prediction": ["all x y z.((Sound(x) & Material(y) & Material(z)) -> MovesAtDifferentRate(x,y,z))", "all x y.((Sound(x) & Material(y) & DifferentRate(x,y)) -> MovesAtDifferentRate(x,y))", "all x.(Sound(x) -> MovesThroughDifferentMaterialsAtDifferentRate(x))", "all x y z.((Sound(x) & Material(y) & Material(z) & DifferentRate(x,y,z)) -> MovesAtDifferentRate(x,y,z))", "all x y.((Sound(x) & Material(y)) -> MovesAtDifferentRates(x,y))", "all x.(SoundMoves(x,y) -> DifferentMaterialsAtDifferentRate(x))", "all x.(Sound(x) -> MovesThroughMaterialsAtDifferentRate(x))", "all x.(Sound(x) -> MovesThroughDifferentMaterialsAtDifferentRate(x))", "all x y z.((Sound(x) & Material(y) & Material(z)) -> MovesAtDifferentRate(x,y,z))", "all x.(SoundMoves(x) -> DifferentMaterialsAtDifferentRate(x))", "all x y z.((Sound(x) & Material(y) & Material(z) & Material(z)) -> MovesAtDifferentRate(x,y,z))", "all x y.((Sound(x) & Material(y) & DifferentRate(x,y)) -> MovesAtDifferentRate(x,y))", "All x.(SoundMoves(x) -> DifferentMaterialsAtDifferentRate(x))", "all x y.((Sound(x) & Material(y)) -> MovesAtVariousRates(x,y))", "All x.(Sound(x) -> MovesAtDifferentRates(x))", "all x y z.((Sound(x) & Material(y) & Material(z)) -> MovesAtDifferentRate(x,y,z))"]}
{"id": "eqasc_validation_729", "nl": "Refraction is the effect on a wave when there are changes in a medium.", "fol": "", "prediction": ["all x y.((Refraction(x) & Wave(y) & Medium(z) & ChangesIn(x,y,z)) -> EffectOn(x,y,z))", "all x.((Wave(x) & ChangesInMedium(x)) -> RefractionEffect(x))", "all x y z.((Refraction(x) & Wave(y) & Medium(z) & ChangesIn(x,y,z)) -> EffectOn(x,y))", "all x y.((Refraction(x) & Wave(y) & Medium(z)) -> ChangesIn(x,y,z))", "all x.((Refraction(x) & ChangesInMedium(x)) -> EffectOnWave(x))", "all x y.((Refraction(x) & Wave(y) & ChangesInMedium(x,y)) -> EffectOn(x,y))", "all x.((Wave(x) & MediumChange(x)) -> RefractionEffect(x))", "all x y z.((Refraction(x) & Wave(y) & Medium(z) & ChangesIn(y,z)) -> EffectOn(x,y))", "all x.((WavesChanges(x) & MediumChanges(x)) -> RefractionEffect(x))", "(all x.((Wave(x) & ChangesInMedium(x)) -> RefractionEffect(x)))", "exists x.(Refraction(x) & Wave(x) & ChangesInMedium(x))", "all x y.((Wave(x) & Medium(y) & ChangesIn(x,y)) -> RefractionEffect(x,y))", "all x.((Refraction(x) & ChangesInMedium(x)) -> EffectOnWave(x))", "all x y.((Refraction(x) & Wave(y) & Medium(y)) -> ChangesIn(x,y))", "all x y z.((Refraction(x) & Wave(y) & Medium(z) & ChangesIn(x,y,z)) -> EffectOn(x,y,z))", "all x y.((Refraction(x) & Medium(y)) -> ChangesIn(x,y))"]}
{"id": "eqasc_validation_730", "nl": "Differences in the speed of sound cause sound waves to be refracted when passing between different media", "fol": "", "prediction": ["all x y.((DifferencesInSpeedOfSound(x) & Media(y)) -> CausesRefractionOfSoundWaves(x,y))", "all x y z.((DifferencesInSpeedOfSound(x) & SoundWaves(y) & Media(z)) -> CausesRefraction(x,y,z))", "all x.((DifferencesInSpeedOfSound(x) & PassingBetweenMedia(x)) -> SoundWavesRefracted(x))", "(DifferencesInSpeedOfSound(DifferentSpeedOfSound(DifferentMedia(DifferentMedia)) -> SoundWavesRefracted(SoundWaves))", "all x y.((DifferenceInSpeedOfSound(x) & Media(y) & Media(z)) -> CausesRefractionOfSoundWaves(x,y,z))", "all x y z.((DifferenceInSpeedOfSound(x) & SoundWaves(y) & Media(z)) -> CausesRefraction(x,y,z))", "all x y.((DifferencesInSpeedOfSound(x) & Media(y)) -> CausesSoundWavesToBeRefracted(x,y))", "(DifferencesInSpeedOfSound(differencesInSpeedOfSound(d) & PassingBetweenMedia(d)) -> SoundWavesRefracted(d))", "all x.(DifferencesInSpeedOfSound(x) -> CausesRefractionOfSoundWaves(x))", "all x y z.((DifferencesInSpeedOfSound(x) & SoundWaves(y) & Media(z)) -> (CausesRefracting(x,y,z) & PassingBetweenMedia(y,z)))", "all x.((DifferencesInSpeedOfSound(x) & PassingBetweenMedia(x)) -> SoundWavesRefracted(x))", "all x y.((DifferencesInSpeedOfSound(x) & Media(y) & Media(z)) -> CausesRefractionOfSoundWaves(x,y,z))", "exists x.(DifferencesInSpeedOfSound(x) & CausesSoundWavesToBeRefracted(x))", "all x y.((DifferenceInSpeedOfSound(x) & Media(y) & Media(z)) -> CausesSoundWavesToBeRefracted(x,y,z))", "all x.((DifferencesInSpeedOfSound(x) & PassingBetweenMedia(x)) -> SoundWavesRefracted(x))", "all x.((DifferencesInSpeedOfSound(x) & PassingBetweenMedia(x,Media,Media,Media,Media)) -> SoundWavesRefracted(x))"]}
{"id": "eqasc_validation_731", "nl": "On a molecular level, a fibrous material can also slow the speed of transmission of sound.", "fol": "", "prediction": ["all x.((FiberousMaterial(x) & MolecularLevel(x)) -> SlowsTransmissionOfSound(x))", "all x.(FiberousMaterial(x) -> SlowsTransmissionOfSound(x))", "all x y.((FiberousMaterial(x) & MolecularLevel(y)) -> SlowsTransmissionOfSound(x,y))", "all x y.((FibrousMaterial(x) & MolecularLevel(y)) -> SlowsTransmissionOfSound(x,y))", "(SlowTransmissionOfSound(FiberousMaterial) -> OnMolecularLevel(FiberMaterial))", "all x.((FiberousMaterial(x) & MolecularLevel(x)) -> SlowsTransmissionOfSound(x))", "all x.((FerbousMaterial(x) & MolecularLevel(x)) -> SlowsTransmissionOfSound(x))", "all x.(FibrousMaterial(x) -> SlowsTransmissionOfSound(x))", "all x y z.((FibrousMaterial(x) & MolecularLevel(y) & SoundTransmissionSpeed(z)) -> SlowsSpeedOfTransmission(x,z))", "all x y.((FiberousMaterial(x) & MolecularLevel(y)) -> SlowsTransmissionOfSound(x,y))", "all x.(FiberousMaterial(x) -> SlowsTransmissionOfSound(x))", "all x y.((FiberousMaterial(x) & MolecularLevel(x) & TransmissionSpeed(y)) -> SlowsSpeedOf(x,y))", "all x y.((FermoseMaterial(x) & MolecularLevel(y)) -> SlowsTransmissionOfSound(x,y))", "exists x.(FiberousMaterial(x) & MolecularLevel(x) & SlowsTransmissionOfSound(x))", "all x.(FilmousMaterial(x) -> SlowsTransmissionOfSound(x))", "all x.(FiberousMaterial(x) -> SlowsTransmissionOfSound(x))"]}
{"id": "eqasc_validation_732", "nl": "Sound passing through a fibrous material will slow down", "fol": "", "prediction": ["all x y.((Sound(x) & FibrousMaterial(y) & PassesThrough(x,y)) -> SlowsDown(x))", "all x y z.((Sound(x) & FibrousMaterial(y) & SoundPassingThrough(x,y)) -> SlowsDown(x))", "all x.((SoundPassingThroughFiber(x)) -> SlowsDown(x))", "all x y.((Sound(x) & FibrousMaterial(y) & PassesThrough(x,y)) -> SlowsDown(x))", "all x y z.((Sound(x) & FibrousMaterial(y) & FibrousMaterial(z)) -> SlowsDown(x,y,z))", "all x.((SoundPassingThroughFiber(x) & FibrousMaterial(x)) -> SlowsDown(x))", "all x y.((SoundPassingThroughFiber(x) & FibrousMaterial(y)) -> SlowsDown(x,y))", "all x.((SoundPassingThroughFermoseMaterial(x) & FibrousMaterial(x)) -> SlowsDown(x))", "all x.((SoundPassingThroughFiberousMaterial(x)) -> SlowsDown(x))", "all x y.((Sound(x) & FibrousMaterial(y) & PassesThrough(x,y)) -> SlowsDown(x))", "all x.((Sound(x) & PassesThroughFiber(x)) -> SlowsDown(x))", "all x y z.((Sound(x) & FibrousMaterial(y) & SoundPassingThrough(x,y)) -> SlowsDown(x,z))", "all x y z.((Sound(x) & FibrousMaterial(y) & FibrosicMaterial(z) & PassesThrough(x,y,z)) -> SlowsDown(x))", "all x y.((SoundPassingThroughFiber(x) & FibrousMaterial(y)) -> SlowsDown(x,y))", "all x y.((Sound(x) & FibrousMaterial(y)) -> SlowsDown(x,y))", "all x.((SoundPassingThroughFiber(x)) -> SlowsDown(x))"]}
{"id": "eqasc_validation_733", "nl": "Sound, a type of energy, is produced by vibrations and travels in waves.", "fol": "", "prediction": ["all x.((Energy(x) & Sound(x)) -> (ProducedByVibrations(x) & TravelsInWaves(x)))", "all x.(Sound(x) -> (Energy(x) & ProducedByVibrations(x) & TravelsInWaves(x)))", "(Energy(sound) & ProducedByVibrations(sound) & TravelsInWaves(sound))", "all x y.((Energy(x) & Sound(y)) -> (ProducedByVibrations(x) & TravelsInWaves(x)))", "((Energy(Sound) & ProducedByVibrations(Sound)) -> TravelsInWaves(Sound))", "all x.((Energy(x) & ProducedByVibrations(x) & TravelsInWaves(x)) -> Sound(x))", "all x.((Energy(x) & Sound(x)) -> (ProducedByVibrations(x) & TravelsInWaves(x)))", "(Energy(Sound) & ProducedByVibrations(Sound) & TravelsInWaves(Sound))", "all x y z.((Sound(x) & Energy(y) & Vibration(z)) -> (ProducedBy(x,z) & TravelsInWaves(x)))", "all x y.((Sound(x) & Energy(y) & ProducedByVibrations(x) & TravelsInWaves(x)) -> Energy(x))", "all x.(Sound(x) -> (Energy(x) & ProducedByVibrations(x) & TravelsInWaves(x)))", "all x y.((Sound(x) & Energy(y)) -> (ProducedByVibrations(x) & TravelsInWaves(x)))", "all x y.((Energy(x) & Sound(y)) -> (ProducedByVibrations(y) & TravelsInWaves(y)))", "all x.(Son(x) -> (ProducedByVibrations(x) & TravelsInWaves(x)))", "all x.(Sound(x) -> (Energy(x) & ProducedByVibrations(x) & TravelsInWaves(x)))", "all x.((Energy(x) & Sound(x)) -> (ProducedByVibrations(x) & TravelsInWaves(x)))"]}
{"id": "eqasc_validation_734", "nl": "the type of material through which waves passes changes the speed at which waves move", "fol": "", "prediction": ["all x y.((Material(x) & Waves(y) & PassesThrough(x,y)) -> ChangesSpeedAtWavesMovement(x,y))", "all x.((MaterialType(x) & WavesPass(x)) -> ChangesSpeedAtWavesMovement(x))", "all x y.((MaterialType(x) & Waves(y) & PassesThrough(x,y)) -> ChangesSpeedAtWavesMovement(x,y))", "all x y.((Material(x) & Wave(y) & PassesThrough(x,y)) -> ChangesSpeedAtWavesMovement(x,y))", "all x y z.((Material(x) & Waves(y) & Waves(z)) -> ChangesSpeedAt(x,y,z))", "(ChangesSpeedAtWavesMovement(Material) -> MaterialType(Material))", "all x.((Material(x) & WavesPass(x)) -> ChangesSpeedAtWavesMovement(x))", "(ChangesSpeedAtWavesMovement(MaterialType) & ThroughWaves(MaterialType) & ChangesSpeedAtWavesMovement(MovementSpeed))", "all x.((MaterialType(x) & WavesPass(x)) -> ChangesSpeedAtWavesMovement(x))", "all x y z.((Material(x) & Wave(y) & Wave(z) & PassesThrough(x,y)) -> ChangesSpeedAtWavesMovement(x,z))", "all x y.((MaterialType(x) & Waves(y)) -> ChangesSpeedAtWavesMovement(x,y))", "((MaterialType(Waves) & PassesThrough(Waves)) -> ChangesSpeedAtWaves(WavesMovementSpeed(WavesMovementSpeed))", "all x.((MaterialType(x) & WavesPasses(x)) -> ChangesSpeedAtWavesMovement(x))", "all x y.((Material(x) & Waves(y) & PassesThrough(x,y)) -> ChangesSpeedAtWavesMovement(x,y))", "all x.((MaterialType(x) & WavesPass(x)) -> ChangesSpeedAtWavesMovement(x))", "all x.((MaterialType(x) & PassesWaves(x)) -> ChangesSpeedAtWavesMovement(x))"]}
{"id": "eqasc_validation_735", "nl": "Negative feedback controls insulin secretion by the pancreas.", "fol": "", "prediction": ["all x.(NegativeFeedback(x) -> ControlsInsulinSecr\u00e9tionByPancreas(x))", "all x y.((NegativeFeedback(x) & InsulinSecr\u00e9tion(y)) -> Controls(x,y))", "NegativeFeedbackControlsInsulinSecr\u00e9tionByPancreas(n)", "(NegativeFeedbackControlsInsulinSecr\u00e9tion(NegativeFeedback))", "all x y z.((NegativeFeedback(x) & InsulinSecr\u00e9tion(y) & Pancreas(z)) -> Controls(x,y,z))", "all x.(NegativeFeedback(x) -> ControlsInsulinSecrationByPancreas(x))", "NegativeFeedbackControlsIndividualSecr\u00e9tionByPancreas(n)", "(NegativeFeedback(n) -> ControlsInsulinSecr\u00e9tion(n))", "all x y.((NegativeFeedback(x) & InsulinSecr\u00e9tion(y)) -> Controls(x,y))", "all x.((NegativeFeedback(x) & InsulinSecr\u00e9tion(x)) -> Controls(x,pancreas))", "all x.(NegativeFeedback(x) -> ControlsIndolephrineSecr\u00e9tion(x))", "all x y z.((NegativeFeedback(x) & InsulinSecr\u00e9tion(y) & Pancreas(z)) -> Controls(x,y,z))", "all x y.((NegativeFeedback(x) & InsulinSecr\u00e9tion(y)) -> Controls(x,y))", "all x.(NegativeFeedback(x) -> ControlsInsulinSecr\u00e9tionByPancreas(x))", "all x y.((NegativeFeedback(x) & InsulinSecration(y)) -> Controls(x,y))", "all x.(NegativeFeedback(x) -> ControlsIndividualSecration(x))"]}
{"id": "eqasc_validation_736", "nl": "Glucose stimulates the pancreas to secrete insulin through negative feedback.", "fol": "", "prediction": ["all x.(Glucose(x) -> StimulatesPancreasToSecrateIndividual(x))", "all x y.((Glucose(x) & Pancreas(y)) -> StimulatesSectitol(x,y))", "all x.(Glucose(x) -> (StimulatesPancreas(x) & SecretesIndividual(x) & NegativeFeedback(x)))", "(StimulatesPancreas(glucose) & SecretesIndividual(glucose) & NegativeFeedback(glucose))", "all x y z.((Glucose(x) & Pancreas(y) & Insulin(z)) -> StimulatesSecturing(x,y,z))", "Glucose stimulatesPancreasToSectIndividual(glucose,negativeFeedback)", "all x y.((Glucose(x) & Pancreas(y)) -> StimulatesSectin(x,y))", "all x y z.((Glucose(x) & Pancreas(y) & Insulin(z)) -> StimulatesSectsThroughNegativeFeedback(x,y,z))", "(StimulatesPancreas(Glucose) & SecretesIndividual(Glucose,negativeFeedback))", "all x.(Glucose(x) -> (StimulatesPancreas(x) & SecretesIndividual(x) & NegativeFeedback(x)))", "all x y.((Glucose(x) & Pancreas(y)) -> StimulatesSpokenIndividual(x,y))", "all x.(Glucose(x) -> StimulatesPancreasToSectIndividual(x))", "all x y z.((Glucose(x) & Pancreas(y) & Insulin(z)) -> StimulatesSpokenThroughNegativeFeedback(x,y,z))", "all x.(Glucose(x) -> (StimulatesPancreas(x) & SecretesIndividual(x) & NegativeFeedback(x)))", "all x y.((Glucose(x) & Pancreas(y)) -> StimulatesSectorification(x,y))", "all x.(Glucose(x) -> StimulatesPancreasToSecrateIndividual(x))"]}
{"id": "eqasc_validation_737", "nl": "Glucose makes the pancreas secrete insulin.", "fol": "", "prediction": ["all x.(Glucose(x) -> MakesPancreasSectIndividual(x))", "all x y.((Glucose(x) & Pancreas(y)) -> SecretesIndividual(x,y))", "(Glucose(Glucose) -> MakesPancreasSectIndividual(Glucose))", "all x.(Glucose(x) -> MakesPancreasSectIsotropin(x))", "Glucose makes PancreasSectIndividual(glucose,glucose)", "all x.(Glucose(x) -> SecretesIndividual(x))", "all x y z.((Glucose(x) & Pancreas(y) & Insulin(z)) -> Secretes(x,y,z))", "all x y.((Glucose(x) & Pancreas(y)) -> SecretesIndividual(x,y))", "all x.(Glucose(x) -> MakesPancreasSecreteIndividual(x))", "all x y.((Glucose(x) & Pancreas(y)) -> SecretesIndividual(x,y))", "all x y.((Glucose(x) & Pancreas(y) & SecretesIndividual(x,y)) -> Makes(x,y))", "all x.(Glucose(x) -> SecretesIndividual(x))", "all x y.((Glucose(x) & Pancreas(y)) -> SecretesIndividual(x,y))", "all x.(Glucose(x) -> MakesPancreasSecrateIndividual(x))", "all x.(Glucose(x) -> SecretesInsulin(x))", "All x.(Glucose(x) -> MakesPancreasSecreteIndividual(x))"]}
{"id": "eqasc_validation_738", "nl": "Feedback inhibition is an example of common biological control mechanism called negative feedback.", "fol": "", "prediction": ["all x.(FeedbackInhibition(x) -> (CommonBiologicalControlMechanism(x) & NegativeFeedback(x)))", "all x.((FeedbackInhibition(x) & CommonBiologicalControlMechanism(x) & NegativeFeedback(x)) -> Inhibits(x))", "all x y.((FeedbackInhibition(x) & CommonBiologicalControlMechanism(y)) -> NegativeFeedback(x,y))", "all x.(FeedbackInhibition(x) -> (CommonBiologicalControlMechanism(x) & NegativeFeedback(x)))", "(CommonBiologicalControlMechanism(featherback) & Inhibition(featherback))", "all x.(FeedbackInhibition(x) -> (BiologicalControlMechanism(x) & NegativeFeedback(x)))", "all x.(FeedbackInhibition(x) -> (CommonBiologicalControlMachine(x) & NegativeFeedback(x)))", "all x y.((FeedbackInhibition(x) & CommonBiologicalControlMechanism(y)) -> NegativeFeedback(x,y))", "all x.(FeedbackInhibition(x) -> (CommonBiologicalControlMechanism(x) & NegativeFeedback(x)))", "(CommonBiologicalControlMechanism(featherback) & Inhibition(featherback))", "all x.((FeedbackInhibition(x) & CommonBiologicalControlMachine(x) & NegativeFeedback(x)) -> InhibitsFeedback(x))", "all x.((FeedbackInhibition(x) & CommonBiologicalControlMechanism(x)) -> NegativeFeedback(x))", "all x y.((FeedbackInhibition(x) & CommonBiologicalControlMachine(y)) -> NegativeFeedback(x))", "all x.(FeedbackInhibition(x) -> (CommonBiologicalControlMechanism(x) & NegativeFeedback(x)))", "all x y.((FeedbackInhibition(x) & CommonBiologicalControlMechanism(y)) -> NegativeFeedback(x,y))", "all x.(FeedbackInhibition(x) -> NegativeFeedback(x))"]}
{"id": "eqasc_validation_739", "nl": "Feedback  inhibition controls insulin secretion by the pancreas.", "fol": "", "prediction": ["all x.(FeedbackInhibition(x) -> ControlsInsulinSecr\u00e9tionByPancreas(x))", "all x y.((FeedbackInhibition(x) & Pancreas(y)) -> ControlsInsulinSecr\u00e9tion(x,y))", "all x y z.((FeedbackInhibition(x) & InsulinSecr\u00e9tion(y) & Pancreas(z)) -> Controls(x,y,z))", "all x y.((FeedbackInhibition(x) & InsulinSecr\u00e9tion(y)) -> Controls(x,y))", "all x.(FeedbackInhibition(x) -> ControlsInsulinSecr\u00e9tionByPancreas(x))", "(InhibitionFeedback(f) & ControlsInsulinSecr\u00e9tionByPancreas(f))", "all x.((FeedbackInhibition(x) & InsulinSecr\u00e9tion(x)) -> Controls(x,pancreas))", "(FeedbackInhibitionControlsInsulinSecr\u00e9tion(FingerFilming) & Pancreas(Pancreas))", "all x y.((FeedbackInhibition(x) & Pancreas(y)) -> ControlsSecr\u00e9tion(x,y))", "all x y z.((FeedbackInhibition(x) & InsulinSecr\u00e9tion(y) & Pancreas(z)) -> Controls(x,y,z))", "All x.(FiberFeedbackInhibition(x) -> ControlsInsulinSecr\u00e9tionByPancreas(x))", "all x.(FeedbackInhibition(x) -> ControlsInsulinSecrine(x))", "all x.(FeedbackInhibition(x) -> ControlsIndoletionByPancreas(x))", "all x y.((FeedbackInhibition(x) & InsulinSecr\u00e9tion(y)) -> Controls(x,y))", "all x.(FeedbackInhibition(x) -> ControlsInsulinSecr\u00e9tion(x))", "all x.(FeedbackInhibition(x) -> ControlsIndividualSecration(x))"]}
{"id": "eqasc_validation_740", "nl": "Islet cells are located in the pancreas.", "fol": "", "prediction": ["all x.(IsletCell(x) -> LocatedInPancreas(x))", "all x y.((IsletCell(x) & Pancreas(y)) -> LocatedIn(x,y))", "all x.(IslandCell(x) -> LocatedInPancreas(x))", "all x.(IsletCell(x) -> LocatedInPancreas(x))", "all x y z.((IsletCell(x) & Pancreas(y) & Pancreas(z)) -> LocatedIn(x,y,z))", "all x y.((IsletCell(x) & Pancreas(y)) -> LocatedIn(x,y))", "all x y.((IslandCell(x) & Pancreas(y)) -> LocatedIn(x,y))", "all x.(IsletCell(x) -> LocatedInPancreas(x))", "(all x.(IsletCell(x) -> Pancreatic(x)))", "all x.(IslandCell(x) -> LocatedInPancreas(x))", "(all x.(IsletCell(x) -> FoundInPancreas(x)))", "all x y.((IsletCell(x) & Pancreas(y)) -> LocatedIn(x,y))", "all x.(IsletCell(x) -> LocatedInPancreas(x))", "all x.(IslandCell(x) -> LocatedInPancreas(x))", "exists x.(IsletCell(x) & Pancreas(x))", "exists x.(IslandCell(x) & LocalizedInPancreas(x))"]}
{"id": "eqasc_validation_741", "nl": "islet cells are located where insulin secretion happens", "fol": "", "prediction": ["all x.(IsletCell(x) -> (LocatedWhereInsulinSecr\u00e9tionOccurs(x) & InsulinSecr\u00e9tionOccurs(x)))", "all x y.((IsletCell(x) & InsulinSecr\u00e9tion(y)) -> LocatedWhere(x,y))", "all x y z.((IsletCell(x) & InsulinSecr\u00e9tion(y) & InsulinSecr\u00e9tion(z)) -> LocatedWhereSecr\u00e9tionOccurs(x,y,z))", "(LocatedWhereInsulinSecr\u00e9tionOccurs(isletCells) & InsulinSecr\u00e9tionOccur(isletCells))", "isletcells (locatedwhereinsulinsecretionOccurs))", "all x.(IsletCell(x) -> (LocatedWhereInsulinSecr\u00e9tionOccurs(x) & InsulinSecr\u00e9tionOccurs(x)))", "all x.(IsletCell(x) -> (LocatedWhereInsulinSecr\u00e9tionOccurs(x) & InsulinSecr\u00e9tionOccurs(x)))", "all x y.((IsletCell(x) & InsulinSecr\u00e9tion(y)) -> LocatedWhere(x,y))", "all x.(IsletCells(x) -> (LocatedWhereInsulinSecr\u00e9tionOccurs(x) & InsulinSecr\u00e9tionOccurs(x)))", "all x y z.((IsletCell(x) & InsulinSecr\u00e9tion(y) & InsulinSecr\u00e9tion(z)) -> LocatedWhereIsletCells(x,y,z))", "all x y.((IsletCell(x) & InsulinSecr\u00e9tion(y)) -> LocatesWhereSecr\u00e9tionOccurs(x,y))", "all x.(IsletCell(x) -> (LocatedWhereInsulinSecr\u00e9tionOccurs(x) & InsulinSecr\u00e9tionOccurs(x)))", "all x.(IsletCell(x) -> InsulinSecr\u00e9tion(x))", "all x y.((IsletCell(x) & InsulinSecr\u00e9tion(y)) -> LocatedWhereIsletCells(x,y))", "exists x.(IsletCell(x) & InsulinSecr\u00e9tion(x) & LocalizedIn(x,IsletCells))", "exists x.(IsletCell(x) & InsulinSecr\u00e9tion(x))"]}
{"id": "eqasc_validation_742", "nl": "Sponges are filter feeders.", "fol": "", "prediction": ["all x.(Spot(x) -> FilterFeeder(x))", "all x.(Sponges(x) -> FilterFeeder(x))", "all x y.((Spot(x) & FilterFeeder(y)) -> FilterFeeder(x))", "all x.(Spot(x) -> FilterFeeder(x))", "(FilterFeeder(sponge) & FilterFeeder(sponge))", "all x.(Spoonge(x) -> FilterFeeder(x))", "all x.(Sponge(x) -> FilterFeeder(x))", "all x y.((Spot(x) & FilterFeeder(y)) -> FilterFeeder(x,y))", "all x.(Spot(x) -> FilterFeeder(x))", "(FilterFeeder(sponges)", "all x.(Spoonge(x) -> FilterFeeder(x))", "all x.(Sponges(x) -> FilterFeeder(x))", "all x.(Spot(x) -> FilterFeeder(x))", "all x.(Sponge(x) -> FilterFeeder(x))", "All x.(Spoonge(x) -> FilterFeeder(x))", "All x.(Spot(x) -> FilterFeeder(x))"]}
{"id": "eqasc_validation_743", "nl": "Diet Filter feeders, they eat krill and plankton.", "fol": "", "prediction": ["all x.(DietFilterFilter(x) -> (EatsKrill(x) & EatsPlankton(x)))", "all x y.((DietFilterFilter(x) & Krill(y) & Plankton(y)) -> Eats(x,y))", "(EatsKrill(diet) & EatsPlankton(diet))", "all x.((DietFilter(x) & Feeder(x)) -> (EatsKrill(x) & EatsPlankton(x)))", "all x.(DietFilter(x) -> (EatsKrill(x) & EatsPlankton(x)))", "all x.(DietFilterFilter(x) -> (EatsKrill(x) & EatsPlankton(x)))", "all x y z.((DietFilter(x) & Krill(y) & Plankton(z)) -> Eats(x,y,z))", "(EatsKrill(dietfiller) & EatsPlankton(dietfiller))", "(EatKrill(DietFilterFilter) & EatPlankton(DietFilter))", "all x y.((DietFilterFilter(x) & Krill(y) & Plankton(y)) -> Eats(x,y))", "all x y.((DietFilter(x) & Feeder(y)) -> (EatsKrill(x) & EatsPlankton(x)))", "all x.(DietFilterFilter(x) -> (EatsKril(x) & EatsPlankton(x)))", "(EatsKril(DietFilter) & EatsPlankton(DietFilter))", "exists x.(DietFilter(x) & Feeder(x) & EatsKrill(x) & EatsPlankton(x))", "all x.(DietFilter(x) -> (EatsKrill(x) & EatsPlankton(x)))", "All x.(DietFilter(x) -> (EatsKril(x) & EatsPlankton(x)))"]}
{"id": "eqasc_validation_744", "nl": "Sponges eat  plankton.", "fol": "", "prediction": ["all x.(Spot(x) -> EatsPlankton(x))", "all x.(Spot(x) -> EatPlankton(x))", "all x y.((Spot(x) & Plankton(y)) -> Eats(x,y))", "all x.(Sponge(x) -> EatsPlankton(x))", "all x.(Spot(x) -> EatsPlankton(x))", "all x.(Spoonge(x) -> EatsPlankton(x))", "(EatsPlankton(Spotge))", "all x y.((Spot(x) & Plankton(y)) -> Eats(x,y))", "(EatPlankton(sponges) & Sponges(sponges))", "all x.(Spot(x) -> EatPlankton(x))", "all x y.(Spot(x) -> EatsPlankton(x,y))", "all x y.((Spot(x) & Plankton(y)) -> Eats(x,y))", "all x.(Sponges(x) -> EatsPlankton(x))", "all x y.((Spot(x) & Plankton(y)) -> Eats(x,y))", "all x.(Spotge(x) -> EatsPlankton(x))", "exists x.(Spotch(x) & EatPlankton(x))"]}
{"id": "eqasc_validation_745", "nl": "Bottom dwelling organisms such as coral, urchins, and sponges provide a colorful backdrop.", "fol": "", "prediction": ["all x.((BottomDwellingOrganism(x) & (Coral(x) | Urchin(x) | Sponge(x))) -> ColorfulBackground(x))", "all x y z.((BottomDwellingOrganism(x) & (Coral(y) | Urchin(y) | Sponge(y))) -> ProvidesColorfulBackground(x,y))", "(BoundDwellingOrganisms(bottomDwellingOrganisms(bottom) & ColorfulBackground(bottomDwellingOrganisms(bottomDwellingOrganisms) & Coral(bottomDwellingOrganisms) & Urchin(bottomDwellingOrganisms) & Sponge(bottomDwellingOrganisms))", "all x.(BottomDwellingOrganism(x) -> (Coral(x) | Urchin(x) | Sponge(x)))", "all x y.((BottomDwellingOrganism(x) & (Coral(y) | Urchin(y) | Sponge(y))) -> ColorfulBackground(x,y))", "(CoralBackground(bottomDwellingOrganisms) & (Coral(bottom) | Urchin(bottom) | Sponge(bottom)))", "all x.((BottomDwellingOrganism(x) & (Coral(x) | Urchin(x) | Sponge(x))) -> ColorfulBackground(x))", "all x y z.((BottomDwellingOrganism(x) & (Coral(y) | Urchin(y) | Sponge(y))) -> ColorfulBackground(x))", "all x y z.((BottomDwellingOrganism(x) & Coral(y) & Urchin(z) & Sponge(x)) -> ProvidesColorfulBackground(x,y,z))", "all x y.((BottomDwellingOrganism(x) & (Coral(y) | Urchin(y) | Sponge(y))) -> ProvidesColorfulBackground(x,y))", "all x.(BottomDwellingOrganism(x) -> (Coral(x) | Urchin(x) | Sponge(x)))", "all x.((BottomDwellingOrganism(x) & (Coral(x) | Urchin(x) | Sponge(x))) -> ColorfulBackground(x))", "all x.(BottomDwellingOrganism(x) -> (CoralBackground(x) | ColorfulBackground(x)))", "exists x.(BottomDwellingOrganism(x) & (Coral(x) | Urchin(x) | Sponge(x)) & ProvidesColorfulBackground(x))", "all x y z.((BottomDwellingOrganism(x) & (Coral(y) | Urchin(y) | Sponge(y))) -> ProvidesColorfulBackground(x,y,z))", "all x.((BottomDwellingOrganism(x) & (Coral(x) | Urchin(x) | Sponge(x))) -> ProvidesColorfulBackground(x))"]}
{"id": "eqasc_validation_746", "nl": "bottom dwelling organisms can be filter feeders", "fol": "", "prediction": ["all x.(BottomDwellingOrganism(x) -> FilterFeeder(x))", "all x y.((BottomDwellingOrganism(x) & BottomDwellingOrganism(y)) -> FilterFeeder(x))", "all x.((BottomDwellingOrganism(x) & FilterFeeder(x)) -> CanBeFilterFeeder(x))", "all x y z.((BottomDwellingOrganism(x) & BottomDwellingOrganism(y) & FilterFeeder(z)) -> CanBeFilterFeeder(x,y,z))", "all x.(FilterFeeder(x) -> BottomDwellingOrganism(x))", "all x.(BottomDwellingOrganism(x) -> FilterFeeder(x))", "all x y.((BottomDwellingOrganism(x) & BottomDwellingOrganism(y)) -> FilterFeeder(x,y))", "all x.(BottomDwellingOrganism(x) -> FilterFeeder(x))", "all x.((BottomDwellingOrganism(x) & FilterFeeder(x)) -> CanBeFilterFeeder(x))", "all x y.((BottomDwellingOrganism(x) & BottomDwellingOrganism(y)) -> FilterFeeder(x,y))", "all x.(FilterFeeder(x) -> BottomDwellingOrganism(x))", "all x.(BottomDwellingOrganism(x) -> FilterFeeder(x))", "all x.(BottomDwellingOrganism(x) -> CanBeFilterFeeder(x))", "all x y.((BottomDwellingOrganism(x) & BottomDwellingOrganism(y)) -> FilterFeeder(x))", "exists x.(BottomDwellingOrganism(x) & FilterFeeder(x))", "exists x.(BottomDwellingOrganism(x) & FilterFeeder(x))"]}
{"id": "eqasc_validation_747", "nl": "sponges eat krill and plankton", "fol": "", "prediction": ["all x.(Sponge(x) -> (EatsKrill(x) & EatsPlankton(x)))", "all x y z.((Sponge(x) & Krill(y) & Plankton(z)) -> (Eats(x,y) & Eats(x,z)))", "all x y.((Sponge(x) & Sponge(y)) -> (EatsKrill(x) & EatsPlankton(y)))", "(EatsKrill(sponge) & EatsPlankton(sponge))", "(all x.(Sponge(x) -> EatsKrill(x)) & all y.(Sponge(y) -> EatsPlankton(y)))", "all x y.((Sponge(x) & Krill(y)) -> Eats(x,y)) & (Plankton(y) -> Eats(x,y)))", "all x.(Sponge(x) -> (EatsKrill(x) & EatsPlankton(x)))", "all x y z.((Sponge(x) & Krill(y) & Plankton(z)) -> (Eats(x,y) & Eats(x,z)))", "(EatsKrill(sponge) & EatsPlankton(sponge))", "(all x.(Sponge(x) -> EatsKrill(x)) & all y.(Sponge(y) -> EatsPlankton(y)))", "all x y.((Sponge(x) & Sponge(y)) -> (EatsKrill(x,y) & EatsPlankton(y,x)))", "all x.(Sponge(x) -> (EatsKrill(x) & EatsPlankton(x)))", "all x.(Sponge(x) -> (EatsKrill(x) | EatsPlankton(x)))", "all x y z.((Sponge(x) & Krill(y) & Plankton(z)) -> (Eats(x,y) & Eats(x,z)))", "all x.(Sponge(x) -> (EatsKrill(x) | EatsPlankton(x)))", "all x.(Sponge(x) -> (EatKrill(x) & EatPlankton(x)))"]}
{"id": "eqasc_validation_748", "nl": "Clams are filter feeders and thus trap and filter out their food as the water passes by.", "fol": "", "prediction": ["all x.(Clam(x) -> (FilterFeeder(x) & TrapsAndFiltersFood(x) & WaterPassesBy(x)))", "all x y.((Clam(x) & Water(y)) -> (FilterFeeder(x) & TrapsAndFiltersFood(x,y)))", "all x.(Clam(x) -> (FilterFeeder(x) & TrapsAndFiltersFood(x)))", "all x.(Chambour(x) -> (FilterFeeder(x) & TrapsAndFiltersFood(x) & WaterPassesBy(x)))", "all x.(Cam(x) -> (FilterFeeder(x) & TrapsAndFiltersFood(x) & WaterPassesBy(x)))", "all x y.((Chamb(x) & WaterPassesBy(y)) -> (FilterFeeder(x) & TrapsAndFiltersFood(x,y)))", "all x y z.((Clam(x) & Water(y) & Food(z)) -> (FilterFeeder(x) & TrapsAndFilters(x,z)))", "all x y.((Clam(x) & Water(y)) -> (FilterFeeder(x) & TrapsAndFiltersFood(x,y)))", "all x.(Clam(x) -> (FilterFeeder(x) & TrapsAndFiltersFood(x) & WaterPassesBy(x)))", "all x.(Chamb(x) -> (FilterFeeder(x) & TrapsFood(x) & FiltersFood(x)))", "all x.(Clam(x) -> (FilterFeeder(x) & TrapFood(x) & FilterFood(x) & WaterPassesBy(x)))", "all x y.((Chamb(x) & WaterPassesBy(y)) -> (FilterFeeder(x) & TrapsAndFiltersFood(x,y)))", "all x.(Cam(x) -> (FilterFeeder(x) & TrapsAndFiltersFood(x) & WaterPassesBy(x)))", "all x y.((Clam(x) & Water(y)) -> (FilterFeeder(x) & TrapsAndFiltersOutFood(x,y)))", "all x.(Clam(x) -> (FilterFeeder(x) & TrapsAndFiltersOutFood(x) & WaterPassesBy(x)))", "all x.(Chamber(x) -> (FilterFeeder(x) & TrapFood(x) & FilterFood(x)))"]}
{"id": "eqasc_validation_749", "nl": "Sponges trap and filter out food as water passes by", "fol": "", "prediction": ["all x y.((Spot(x) & Water(y)) -> (Traps(x,y) & FiltersOutFood(x,y)))", "all x.(Spot(x) -> (TrapsAndFiltersOutFood(x) & WaterPassesBy(x)))", "all x y z.((Spot(x) & Water(y) & Food(z)) -> (Traps(x,y) & FiltersOut(x,z)))", "all x.(Sponges(x) -> (TrapsAndFiltersOutFood(x) & WaterPasses(x)))", "all x y.((Sponge(x) & Water(y)) -> (Traps(x,y) & FiltersOutFood(x,y)))", "all x.(Spotge(x) -> (TrapsFood(x) & FiltersOutFood(x) & WaterPasses(x)))", "all x y.((Spot(x) & Water(y)) -> (Traps(x,y) & FiltersOutFood(x,y)))", "all x y z.((Spot(x) & Water(y) & Water(z)) -> (TrapsAndFiltersOutFood(x,y,z) & PassesBy(x,y)))", "all x.(Spoonge(x) -> (TrapsAndFiltersOutFood(x) & WaterPassesBy(x)))", "all x y.((Spoonge(x) & WaterPasses(y)) -> (Traps(x,y) & FiltersOutFood(x,y)))", "all x y z.((Sponge(x) & Water(y) & Food(z)) -> (Traps(x,y) & FiltersOut(x,z)))", "all x.(Sponges(x) -> (TrapsAndFiltersOutFood(x) & WaterPassesBy(x)))", "all x y.((Spot(x) & WaterPasses(y)) -> (Traps(x,y) & FiltersOutFood(x,y)))", "all x.(Spoonge(x) -> (TrapsFood(x) & FiltersOutFood(x) & WaterPassesBy(x)))", "all x.(Spotge(x) -> (TrapsFood(x) & FiltersFood(x) & WaterPassesBy(x)))", "all x.(Sponges(x) -> (Traps(x) & FiltersOutFood(x) & WaterPasses(x)))"]}
{"id": "eqasc_validation_750", "nl": "Since mussels are filter-feeders, they clean water as they feed.", "fol": "", "prediction": ["all x.(Mushels(x) -> (FilterFeeder(x) & CleanWater(x)))", "all x.(Mushels(x) -> FilterFeeder(x))", "all x.((Mushels(x) & FilterFeeder(x)) -> CleansWaterAsTheyFeed(x))", "all x y.((Mushel(x) & FilterFeeder(x)) -> CleanWater(x,y))", "(FilterFeeder(mushels) & CleanWater(mushels) & Feeds(mushels))", "all x y.((Mushele(x) & FilterFeeder(x)) -> CleanWater(x,y))", "all x.(Mushels(x) -> (FilterFeeder(x) & CleanWater(x)))", "all x.((Mushels(x) & FilterFeeders(x)) -> CleanWaterAsFeeds(x))", "(FilterFeeder(muschels) & CleanWater(muschels) & Feeds(muschels))", "all x y.((Mushel(x) & FilterFeeder(x)) -> CleanWaterAsFeed(x,y))", "all x.((Mushel(x) & FilterFeeder(x)) -> CleansWaterAsIsFeeding(x))", "all x.(Muschel(x) -> FilterFeeder(x))", "(FilterFeeders(mushels) -> CleansWater(mushels,water))", "(FilterFeeder(muschels) & CleanWaterAsMuschels(muschels))", "all x.(Mushels(x) -> (FilterFeeders(x) & CleanWater(x)))", "all x.(Muschel(x) -> FilterFeeder(x))"]}
{"id": "eqasc_validation_751", "nl": "sponges clean the water", "fol": "", "prediction": ["all x.(Sponge(x) -> CleansWater(x))", "all x y.((Sponge(x) & Water(y)) -> Cleans(x,y))", "all x y z.((Sponge(x) & Water(y) & Water(z)) -> Cleans(x,y,z))", "all x.(Sponge(x) -> CleansWater(x))", "(CleanWater(sponges,water) & Water(sponges,water))", "all x y.((Sponge(x) & Water(y)) -> Cleans(x,y))", "(CleanWater(sponges,water) & Sponge(sponges,water))", "all x y z.((Sponge(x) & Water(y) & Water(z)) -> Cleans(x,y,z))", "all x.(Sponge(x) -> CleansWater(x))", "all x y.((Sponge(x) & Water(y)) -> Cleans(x,y))", "all x.(Sponge(x) -> (CleansWater(x) & Sponge(x)))", "all x y.((Sponge(x) & Water(y) & Cleans(x,y)) -> Sponge(x))", "all x y.((Sponge(x) & Water(y)) -> CleansWater(x,y))", "all x.(Sponge(x) -> CleansWater(x))", "all x.(Sponge(x) -> (CleanWater(x) & Sponge(x)))", "all x.(Sponge(x) -> CleansWater(x))"]}
{"id": "eqasc_validation_752", "nl": "sponges clean the water as they feed", "fol": "", "prediction": ["all x.(Sponge(x) -> (CleansWater(x) & Feeds(x)))", "all x y.((Sponge(x) & Water(y)) -> Cleans(x,y))", "all x y z.((Sponge(x) & Water(y) & Feeds(z) & CleansWater(x,y)) -> Feeds(x,z))", "all x y.((Sponge(x) & Water(y) & Feeds(x,y)) -> CleansWater(x))", "all x.(Sponge(x) -> (CleansWater(x) & Feeds(x)))", "all x y z.((Sponge(x) & Water(y) & Water(z) & Feeds(x,y)) -> Cleans(x,y,z))", "(all x.(Sponge(x) -> CleanWater(x)))", "(all x.(Sponge(x) -> CleansWaterAsSpout(x)))", "all x.((Sponge(x) & Feeds(x)) -> CleansWaterAsSponge(x))", "all x y.((Sponge(x) & Water(y) & Feeds(x,y)) -> CleansWater(x,y))", "all x.(Sponge(x) -> (CleanWater(x) & Feeds(x)))", "all x y.((Sponge(x) & Feeds(y)) -> CleansWater(x,y))", "all x y z.((Sponge(x) & Water(y) & Food(z) & Feeds(x,y)) -> CleansWater(x,y))", "all x.(Sponge(x) -> (CleansWater(x) & Feeds(x)))", "all x.(Sponge(x) -> (CleansWater(x) & Feeds(x,Water)))", "all x.(Sponge(x) -> (CleanWater(x) & Feed(x)))"]}
{"id": "eqasc_validation_753", "nl": "Sponges trap and filter out their food as the water passes by.", "fol": "", "prediction": ["all x.(Spot(x) -> (Traps(x) & FiltersOutFood(x) & WaterPassesBy(x)))", "all x.(Sponge(x) -> (Traps(x) & FiltersOutFood(x) & WaterPassesBy(x)))", "all x y.((Spot(x) & Water(y)) -> (Traps(x,y) & FiltersOutFood(x,y)))", "all x.(Spoonge(x) -> (Traps(x) & FiltersOutFood(x) & WaterPassesBy(x)))", "all x y.((Sponge(x) & Water(y)) -> (Traps(x,y) & FiltersOutFood(x,y)))", "all x y.((Spoonge(x) & Water(y)) -> (Traps(x,y) & FiltersOutFood(x,y)))", "all x y z.((Spot(x) & Water(y) & Water(z)) -> (Traps(x,y) & FiltersOutFood(x,z)))", "all x y z.((Sponge(x) & Water(y) & Water(z)) -> (Traps(x,y) & FiltersOutFood(x,z)))", "all x.(Spot(x) -> (TrapsWater(x) & FiltersOutFood(x)))", "all x y.((Spot(x) & Water(y)) -> (Traps(x,y) & FiltersOutFood(x,y)))", "all x.(Spoonge(x) -> (TrapsWater(x) & FiltersOutFood(x)))", "all x.(Sponges(x) -> (TrapsWater(x) & FiltersOutFood(x)))", "all x.(Sponges(x) -> (TrapsAndFiltersFood(x) & WaterPassesBy(x)))", "all x.((Spotge(x) & WaterPassesBy(x)) -> (Traps(x) & FiltersOutFood(x)))", "all x y.((Sponge(x) & Water(y)) -> (Traps(x,y) & FiltersOutFood(x,y)))", "all x.(Spotge(x) -> (TrapsWater(x) & FiltersOutFood(x)))"]}
{"id": "eqasc_validation_754", "nl": "Sponges eat krill and plankton", "fol": "", "prediction": ["all x y z.((Spot(x) & Krill(y) & Plankton(z)) -> (Eats(x,y) & Eats(x,z)))", "all x.(Spot(x) -> (EatsKrill(x) & EatsPlankton(x)))", "all x y.((Spot(x) & Krill(y)) -> Eats(x,y)) & (Plankton(z) -> Eats(x,z)))", "all x.(Spotge(x) -> (EatsKrill(x) & EatsPlankton(x)))", "(EatsKrill(sponges) & EatsPlankton(sponges))", "all x y z.((Spot(x) & Krill(y) & Plankton(z)) -> (Eats(x,y) & Eats(x,z)))", "(all x.(Spotge(x) -> EatsKril(x)) & all y.(Spotge(y) -> EatsPlankton(y)))", "all x y.((Spot(x) & Krill(y)) -> Eats(x,y)) & (Plankton(y) -> Eats(x,y)))", "(EatsKrill(sponges) & EatsPlankton(sponges))", "all x.(Spot(x) -> (EatsKrill(x) & EatsPlankton(x)))", "all x.(Sponges(x) -> (EatsKrill(x) & EatsPlankton(x)))", "all x y.(Spotge(x) -> (EatsKrill(x) & EatsPlankton(x)))", "(EatsKrill(sponge) & EatsPlankton(sponge))", "all x y z.((Spot(x) & Krill(y) & Plankton(z)) -> (Eats(x,y) & Eats(x,z)))", "all x.(Spotge(x) -> (EatsKril(x) & EatsPlankton(x)))", "(EatsKril(sponges) & EatsPlankton(sponges))"]}
{"id": "eqasc_validation_755", "nl": "sponges clean water", "fol": "", "prediction": ["all x.(Sponge(x) -> CleanWater(x))", "all x y.((Sponge(x) & CleanWater(y)) -> CleanWater(x,y))", "all x y z.((Sponge(x) & Water(y) & Water(z)) -> Cleans(x,y,z))", "spongescleanwater.com - (SpongesCleanWater(spouts) & CleanWater(spouts)))", "all x y.((Sponge(x) & Water(y)) -> Cleans(x,y))", "all x.(Sponge(x) -> CleansWater(x))", "(CleanWater(sponges,water) & Sponge(sponges,water))", "spongescleanwater.com - (CleanWater(spouts,water) & CleanWater(spouts,water)))", "all x y z.((Sponge(x) & Water(y) & Water(z)) -> Cleans(x,y,z))", "all x.(Sponge(x) -> CleanWater(x))", "all x y.((Sponge(x) & CleanWater(y)) -> Sponge(x))", "all x.((Sponge(x) & CleanWater(x)) -> SpongesCleanWater(x))", "all x y.((Sponge(x) & Water(y) & Cleans(x,y)) -> Sponge(x))", "all x.(Sponge(x) -> CleansWater(x))", "all x.(Sponge(x) -> (CleanWater(x) & Sponge(x)))", "all x.(Sponge(x) -> CleanWater(x))"]}
{"id": "eqasc_validation_756", "nl": "Baleen whales are filter feeders.", "fol": "", "prediction": ["all x.(BaleenWhale(x) -> FilterFeeder(x))", "all x y.((BaleenWhale(x) & FilterFeeder(y)) -> FilterFeeder(x))", "all x.(BaleenWhale(x) -> FilterFeeder(x))", "all x y.((BaleenWhale(x) & FilterFeeder(y)) -> FilterFeeder(x,y))", "(FilterFeeder(baleenwhale)", "all x.(BaleenWhale(x) -> FilterFeeder(x))", "(FilterFeeder(balesen)", "all x.(BaleenWhale(x) -> FilterFeeder(x))", "all x.(Baleen(x) -> FilterFeeder(x))", "all x y.((BaleenWhale(x) & FilterFeeder(y)) -> FilterFeeder(x))", "all x.(BallenWhale(x) -> FilterFeeder(x))", "all x.(BaleenWhale(x) -> FilterFeeder(x))", "all x.(Baleen(x) -> FilterFeeder(x))", "all x.(BaleenWhale(x) -> FilterFeeder(x))", "all x.(BaleenWhale(x) -> FilterFeeder(x))", "all x.(BaleenWhale(x) -> FilterFeeder(x))"]}
{"id": "eqasc_validation_757", "nl": "Baleen whales and sponges eat in similar ways.", "fol": "", "prediction": ["all x y.((BaleenWhale(x) & Sponge(y)) -> EatsInSameWay(x,y))", "(EatsInSameWays(BaleenWhale(Baleen) & EatsInSameWays(BaleenWhale(Baleen)) & EatsInSameWays(BaleenSponge(Baleen))", "(EatsInSameWay(BaleenWhale(Baleen) & EatsInSameWay(Baleen(Baleen)) & EatsInSameWay(Baleen(Baleen) & EatsInSameWay(Baleen(Baleen)))", "all x.((BaleenWhale(x) | Sponge(x)) -> EatsInSameWay(x))", "(EatInSameWay(BaleenWhale(Baleen) & EatInSameWay(BaleenWhale(Baleen)) & EatInSameWay(BaleenSponge(Baleen))", "(Eats(BaleenWhale(x) | Eats(Sponge(x)))", "all x y.((BaleenWhale(x) & Sponge(y)) -> EatsInSameWay(x,y))", "all x y.((BaleenWhale(x) & Sponge(y)) -> (EatsInSameWay(x,y) & EatsInSameWay(y,x)))", "(all x.(BaleenWhale(x) -> EatsInSameWay(x)) & all y.(Sponge(y) -> EatsInSameWay(y)))", "(EatsInSameWays(BaleenWhale(BaleenWhale) & EatsInSameWays(BaleenSponge(BaleenWhale))", "(EatInSameWays(BaleenWhale(x) | EatInSameWays(sponge)))", "exists x.(BaleenWhale(x) & (Sponge(x) | Sponge(x)) & EatsInSameWay(x))", "all x.((BaleenWhale(x) | Sponge(x)) -> EatsInSameWays(x))", "all x.((BaleenWhale(x) & Sponge(x)) -> EatsInSameWays(x))", "all x y.((BaleenWhale(x) & Sponge(y)) -> EatsInSameWays(x,y))", "all x y.((BaleenWhale(x) & Sponge(y)) -> (EatsInSameWay(x,y) & EatsInSameWay(y,x)))"]}
{"id": "eqasc_validation_758", "nl": "Mutualism is a symbiotic relationship in which both species benefit.", "fol": "", "prediction": ["all x.(Mutualism(x) -> (SymbioticRelationship(x) & BenefitsBothSpecies(x)))", "all x.(Mutualism(x) -> (SymbioticRelationship(x) & BenefitsBothSpecies(x)))", "(SymbioticRelationship(Mutualism) & BenefitsBothSpecies(Mutualism))", "all x y.((Mutualism(x) & Species(y)) -> BenefitsBothSpecies(x,y))", "all x.(Mutualism(x) -> (SymbioticRelationship(x) & BenefitsBothSpecies(x)))", "all x y.((Mutualism(x) & Species(y)) -> (SymbioticRelationship(x,y) & BenefitsBothSpecies(x,y)))", "all x y.((Mutualism(x) & Species(y)) -> (SymbioticRelationship(x,y) & BenefitsBothSpecies(x,y)))", "(SymbioticRelationship(Mutualism) -> BenefitsBothSpecies(Mutualism,SymbioticRelationship,SymbioticRelationship))", "(SymbioticRelationship(Mutualism) & BenefitsBothSpecies(Mutualism,SymbioticRelationship,SymbioticRelationship))", "all x y z.((Mutualism(x) & Species(y) & Species(z)) -> (SymbioticRelationship(x,y,z) & Benefits(x,y,z)))", "all x y.((Mutualism(x) & SymbioticRelationship(y)) -> BenefitsBothSpecies(x,y))", "all x.(Mutualism(x) -> (SymbioticRelationship(x) & BenefitsBothSpecies(x)))", "all x.(Mutualism(x) -> (SymbioticRelationship(x) & BenefitsBothSpecies(x)))", "all x.((Mutualism(x) & SymbioticRelationship(x)) -> BothSpeciesBenefit(x))", "all x.(Mutualism(x) -> (SymbioticRelationship(x) & BothSpeciesBenefit(x)))", "all x.(Mutualism(x) -> (SymbioticRelationship(x) & BenefitsBothSpecies(x)))"]}
{"id": "eqasc_validation_759", "nl": "Dogs and humans are symbiotic species.", "fol": "", "prediction": ["all x.((Dog(x) | Human(x)) -> SymbioticSpecies(x))", "(SymbioticSpecies(Dogs) & SymbioticSpecies(Humans))", "all x y.((Dog(x) & Human(y)) -> SymbioticSpecies(x))", "all x.((Dog(x) | Human(x)) -> SymbioticSpecies(x))", "(SymbioticSpecies(Dog,SymbioticSpecies) & SymbioticSpecies(Human,SymbioticSpecies))", "(SymbioticSpecies(Dogs) & SymbioticSpecies(Humans))", "all x y.((Dog(x) | Human(y)) -> SymbioticSpecies(x))", "all x.(SymbioticSpecies(x) -> (Dog(x) | Human(x)))", "all x.((Dog(x) | Human(x)) -> SymbioticSpecies(x))", "all x y.(SymbioticSpecies(x,y) -> (Dog(y) | Human(y)))", "(SymbioticSpecies(dog) & SymbioticSpecies(human))", "all x y.((Dog(x) | Human(y)) -> SymbioticSpecies(x))", "exists x.(Dog(x) & Human(x) & SymbioticSpecies(x))", "all x.((Dog(x) | Human(x)) -> SymbioticSpecies(x))", "(SymbioticSpecies(dog,human))", "all x.((Dog(x) | Human(x)) -> SymbioticSpecies(x))"]}
{"id": "eqasc_validation_760", "nl": "mutualism exists between dogs and humans", "fol": "", "prediction": ["all x y z.((Dog(x) & Human(y) & Dog(z)) -> Mutualism(x,y,z))", "all x y.((Dog(x) & Human(y)) -> Mutualism(x,y))", "all x.((Dog(x) & Human(x)) -> Mutualism(x))", "mutualism exists between dogs and humans.", "exists x.(Dog(x) & Human(x) & Mutualism(x))", "all x y z.((Dog(x) & Human(y) & Dog(z)) -> Mutualism(x,y,z))", "all x y.((Dog(x) & Human(y)) -> Mutualism(x,y))", "exists between dogs and humans (Mutualism(x,y) & Dog(y) & Human(z) & Dog(y))", "exists zoo(x,y) w.(Dog(z) & Human(w) & Mutualism(x,z) & Dog(w))", "mutualism exists between dogs and humans.", "exists x.(Mutualism(x) & Dog(x) & Human(x))", "all x.(Mutualism(x) -> exists betweenDogsAndHumans(x))", "all x y z.((Dog(x) & Human(y) & Dog(z)) -> Mutualism(x,y,z))", "all x y z.((Dog(x) & Human(y) & Dog(z) & Human(z)) -> Mutualism(x,y,z))", "all x y.((Dog(x) & Human(y)) -> Mutualism(x,y))", "all x y.((Dog(x) & Human(y)) -> Mutualism(x,y))"]}
{"id": "eqasc_validation_761", "nl": "Domestication of animals is an example of a symbiotic relationship.", "fol": "", "prediction": ["all x.(DomesticationOfAnimals(x) -> SymbioticRelationship(x))", "all x y.((Animal(x) & Domestication(y)) -> SymbioticRelationship(x,y))", "all x.(DomesticationOfAnimals(x) -> SymbioticRelationship(x))", "all x.(Domestication(x) -> SymbioticRelationship(x))", "all x.((AnimalDomestication(x) & Animal(y)) -> SymbioticRelationship(x,y))", "(SymbioticRelationship(domestication) & Animal(animal))", "(SymbioticRelationship(DomesticationOfAnimals))", "all x y.((Animal(x) & Domestication(y)) -> SymbioticRelationship(x,y))", "all x y.((Animal(x) & Domestication(x,y)) -> SymbioticRelationship(x,y))", "all x.(DomesticationOfAnimals(x) -> SymbioticRelationship(x))", "all x y.((Animal(x) & Animal(y)) -> Domestication(x,y))", "all x.(Domestication(x) -> SymbioticRelationship(x))", "all x.((AnimalDomestication(x) & SymbioticRelationship(x)) -> Domestication(x))", "all x.(DomesticationOfAnimals(x) -> SymbioticRelationship(x))", "all x y.((Animal(x) & Domestication(x,y)) -> SymbioticRelationship(x))", "all x.(DomesticationOfAnimals(x) -> SymbioticRelationship(x))"]}
{"id": "eqasc_validation_762", "nl": "Domestication of animals is an example of Mutualism", "fol": "", "prediction": ["all x.(DomesticationOfAnimals(x) -> Mutualism(x))", "all x y.((Animal(x) & Domestication(y)) -> Mutualism(x))", "(Mutualism(animal) & Domestication(animal))", "all x.((AnimalDomestication(x) & Mutualism(x)) -> Domestication(x))", "all x.(DomesticationOfAnimals(x) -> Mutualism(x))", "all x y z.((Animal(x) & Animal(y) & Domestication(z)) -> Mutualism(x,y,z))", "all x y.((AnimalDomestication(x) & Animal(y)) -> Mutualism(x,y))", "all x y.((Animal(x) & Domestication(y)) -> Mutualism(x,y))", "(Mutualism(animal) & Domestication(animal))", "(Mutualism(animal) & Domestication(animal))", "all x.(DomesticationOfAnimals(x) -> Mutualism(x))", "all x.((AnimalDomestication(x) & Mutualism(x)) -> Domestication(x))", "(Mutualism(animal) & Domestication(animal))", "all x y.((Animal(x) & Domestication(y)) -> Mutualism(x,y))", "all x.(DomesticationOfAnimals(x) -> Mutualism(x))", "all x.(DomesticationOfAnimals(x) -> Mutualism(x))"]}
{"id": "eqasc_validation_763", "nl": "Domestication of animals is an example of mutualism ", "fol": "", "prediction": ["all x.(DomesticationOfAnimals(x) -> Mutualism(x))", "all x y.((Animal(x) & Domestication(y)) -> Mutualism(x))", "all x y.((DomesticationOfAnimals(x) & Animal(y)) -> Mutualism(x))", "all x.(DomesticationOfAnimals(x) -> Mutualism(x))", "all x.((AnimalDomestication(x) & Mutualism(x)) -> Domestication(x))", "(Mutualism(animal) & Domestication(animal))", "all x y z.((Animal(x) & Animal(y) & Domestication(z)) -> Mutualism(x))", "all x y.((AnimalDomestication(x) & Animal(y)) -> Mutualism(x,y))", "(Mutualism(domesticationOfAnimals) & Mutualism(animal))", "all x.(DomesticationOfAnimals(x) -> Mutualism(x))", "all x.((AnimalDomestication(x) & Domestication(x)) -> Mutualism(x))", "all x y z.((Animal(x) & Animal(y) & Domestication(z)) -> Mutualism(x,y,z))", "all x y.((Animal(x) & Domestication(y)) -> Mutualism(x,y))", "(Mutualism(animal) & Domestication(animal))", "all x.(DomesticationOfAnimals(x) -> Mutualism(x))", "all x.(DomesticationOfAnimals(x) -> Mutualism(x))"]}
{"id": "eqasc_validation_764", "nl": "Coral and alga have a symbiotic relationship.", "fol": "", "prediction": ["all x.((Coral(x) & Alga(x)) -> SymbioticRelationship(x))", "all x y.((Coral(x) & Alga(y)) -> SymbioticRelationship(x,y))", "(SymbioticRelationship(Coral) & SymbioticRelationship(Alga))", "(SymbioticRelationship(Coral,Alga))", "all x.((Coral(x) & Alga(x)) -> SymbioticRelationship(x))", "all x y.((Coral(x) & Alga(y)) -> SymbioticRelationship(x,y))", "(SymbioticRelationship(Coral,SymbioticRelationship(alga))", "all x.(Coral(x) -> SymbioticRelationship(x))", "exists x.(Coral(x) & Alga(x) & SymbioticRelationship(x))", "all x.((Coral(x) | Alga(x)) -> SymbioticRelationship(x))", "all x.((Coral(x) & Alga(x)) -> SymbioticRelationship(x))", "all x y.((Coral(x) & Alga(y)) -> SymbioticRelationship(x,y))", "exists x.(Coral(x) & Alga(x) & SymbioticRelationship(x))", "all x y.((Coral(x) & Alga(y)) -> SymbioticRelationship(x,y))", "all x y.((Coral(x) & Alga(y)) -> SymbioticRelationship(x,y))", "all x y.((Coral(x) & Alga(y)) -> SymbioticRelationship(x,y))"]}
{"id": "eqasc_validation_765", "nl": "The interaction between coral and alga is an example of mutualism.", "fol": "", "prediction": ["all x.((Interaction(x) & Coral(x) & Alga(x)) -> Mutualism(x))", "all x y.((Interaction(x) & Coral(y) & Alga(y)) -> Mutualism(x,y))", "(Interaction(Coral,Alga) & Mutualism(Coral,Alga))", "all x y.((Coral(x) & Alga(y)) -> Mutualism(x))", "(Interaction(Coral) & Interaction(alga) & Mutualism(Coral,alga))", "all x.((Interaction(x) & Coral(x) & Alga(x)) -> Mutualism(x))", "all x y.((Interaction(x,y) & Coral(y) & Alga(y)) -> Mutualism(x))", "all x y z.((Interaction(x,y,z) & Coral(y) & Alga(z)) -> Mutualism(x))", "(Interaction(Coral,Alga) & Mutualism(Coral,Alga))", "all x.(Interaction(x) -> Mutualism(x))", "all x.((Interaction(x) & Coral(x) & Alga(x)) -> Mutualism(x))", "all x y z.((Interaction(x) & Coral(y) & Alga(z)) -> Mutualism(x,y,z))", "all x y.((Coral(x) & Alga(y)) -> Mutualism(x,y))", "all x.((CoralInteraction(x) & AlgaInteraction(x)) -> Mutualism(x))", "all x.((Interaction(x) & Coral(x) & Alga(x)) -> Mutualism(x))", "All x.(Interaction(x) -> Mutualism(x))"]}
{"id": "eqasc_validation_766", "nl": "Mutualism is an association between two different species which benefits each species.", "fol": "", "prediction": ["all x y.((Mutualism(x) & DifferentSpecies(y)) -> Benefits(x,y))", "all x.(Mutualism(x) -> (Association(x,y) & DifferentSpecies(y) & Benefits(x,y)))", "all x y z.((Mutualism(x) & Species(y) & Species(z)) -> (Association(x,y,z) & Benefits(x,y,z)))", "all x.(Mutualism(x) -> (Association(x,y) & DifferentSpecies(y) & Benefits(x,y)))", "all x y.((Mutualism(x) & Species(y)) -> Benefits(x,y))", "all x y z.((Mutualism(x) & Species(y) & Species(z) & Benefits(x,y,z)) -> Association(x,y,z))", "all x.(Mutualism(x) -> (Association(x,y) & DifferentSpecies(y) & BenefitsSpecies(x,y)))", "(Mutualism) -> (Association(x,y) & DifferentSpecies(y)))", "all x.(Mutualism(x) -> (Association(x,y) & DifferentSpecies(y) & BenefitsSpecies(x,y)))", "all x y.((Mutualism(x) & DifferentSpecies(y)) -> Benefits(x,y))", "all x y z.((Mutualism(x) & Species(y) & Species(z) & Benefits(x,y,z)) -> Association(x,y,z))", "all x.(Mutualism(x) -> (AssociationBetweenSpecies(x) & BenefitsSpecies(x)))", "all x y.((Mutualism(x) & Species(y)) -> (AssociationBetween(x,y) & Benefits(x,y)))", "All x.(Mutualism(x) -> (Association(x,y) & DifferentSpecies(y) & BenefitsSpecies(x,y)))", "all x.(Mutualism(x) -> (AssociationBetweenSpecies(x,y) & BenefitsSpecies(y)))", "all x y.((Mutualism(x) & DifferentSpecies(y) & Benefits(x,y)) -> Association(x,y))"]}
{"id": "eqasc_validation_767", "nl": "a symbiotic relationship is an association between two different species which benefits each species", "fol": "", "prediction": ["all x y z.((SymbioticRelationship(x) & Species(y) & Species(z)) -> (Association(x,y,z) & BenefitsSpecies(y,z)))", "all x y.((SymbioticRelationship(x) & DifferentSpecies(y)) -> BenefitsSpecies(x,y))", "all x.(SymbioticRelationship(x) -> (AssociationBetweenSpecies(x) & BenefitsSpecies(x)))", "all x y z.((SymbioticRelationship(x) & DifferentSpecies(y) & Animal(z)) -> (Association(x,y,z) & BenefitsSpecies(y,z)))", "all x.(SymbioticRelationship(x) -> (Association(x,y) & DifferentSpecies(y) & BenefitsSpecies(x,y)))", "all x y.((SymbioticRelationship(x) & DifferentSpecies(y)) -> BenefitsSpecies(x,y))", "all x.(SymbioticRelationship(x) -> exists y.(Species(y) & Species(z) & Benefits(x,y,z)))", "all x y z.((SymbioticRelationship(x) & Species(y) & Species(z) & Association(x,y,z)) -> BenefitsSpecies(x,y,z))", "all x y z.((SymbioticRelationship(x) & Association(y,z) & DifferentSpecies(z) & BenefitsSpecies(y,z)) -> BenefitsSpecies(x,y,z))", "all x.(SymbioticRelationship(x) -> (AssociationBetweenSpecies(x) & BenefitsSpecies(x)))", "all x.((SymbioticRelationship(x) & AssociationBetweenSpecies(x)) -> BenefitsSpecies(x,y))", "all x y.((SymbioticRelationship(x) & DifferentSpecies(y) & BenefitsSpecies(x,y)) -> Association(x,y))", "all x.(SymbioticRelationship(x) -> (Association(x,y) & DifferentSpecies(y) & BenefitsSpecies(x,y)))", "all x y.((SymbioticRelationship(x) & Association(x,y) & DifferentSpecies(y)) -> BenefitsSpecies(x,y))", "exists x.(SymbioticRelationship(x) -> (Association(x,y) & DifferentSpecies(y) & BenefitsSpecies(x,z)))", "all x y z.((SymbioticRelationship(x) & DifferentSpecies(y) & Association(x,y,z)) -> BenefitsSpecies(z,y))"]}
{"id": "eqasc_validation_768", "nl": "Out of the 8,400,000 different species of living beings, there are 400,000 human species.", "fol": "", "prediction": ["all x.((LivingSpecies(x) & HumanSpecies(x)) -> OutOf(x,80000000))", "all x y.((LivingSpecies(x) & HumanSpecies(y)) -> OutOf(x,y))", "out of the 8,400000 different species of living beings, there are 400,000 different species of human species.", "(OutOfEight(x,400,000) & DifferentSpeciesOfLivingBeings(x,400,000))", "Amongst the 8,400000 different species of living beings, there are 400,000 different species of human beings.", "all x.((LivingBeing(x) & 8400000(x)) -> HumanSpecies(x))", "out of the 8,400,000 different species of living beings, there are, in fact, 400,000 different species of human beings.", "(InsteadOfEightThirtyCentrics(x) & ThereAreEightThirtyCentrics(x) & HumanSpecies(x))", "(OutOfTheEightTenTenTenTenSeasonsOfLivingBeings(x) & HumanSpecies(x))", "(HasHumanSpecies(x) & OutOfEight(x,400,000))", "-OutOfTheEight(x,400,000) SpeciesOfLivingBeings(x) & HumanSpecies(x))", "out of the 8400000 different species of living beings, there are 4000000 human species.", "all x.((LivingSpecies(x) & HumanSpecies(x)) -> OutOfEight(x,400,000))", "all x y.((LivingBeing(x) & HumanSpecies(y)) -> OutOfEight(x,y))", "Out of the 8,400,000 different species of living beings, there are 400,000 human species.", "all x.((LivesIn(x,y) & 8400000Species(y)) -> HumanSpecies(x,y))"]}
{"id": "eqasc_validation_769", "nl": "Mutualism is a symbiotic relationship in which both living beings benefit.", "fol": "", "prediction": ["all x.(Mutualism(x) -> (SymbioticRelationship(x) & LivingBeing(x) & Benefits(x)))", "all x.(Mutualism(x) -> (SymbioticRelationship(x) & LivingBeing(x) & Benefits(x)))", "all x y.((Mutualism(x) & LivingBeing(y)) -> Benefits(x,y))", "(SymbioticRelationship(Mutualism) & BenefitsBothLivingBeings(Mutualism,SymbioticRelationship))", "all x.(Mutualism(x) -> (SymbioticRelationship(x) & BothLivingBeingsBenefit(x)))", "(SymbioticRelationship(Mutualism) & BenefitsBothLivingBeings(Mutualism))", "all x y.((Mutualism(x) & LivingBeing(y)) -> Benefits(x,y))", "all x.(Mutualism(x) -> (SymbioticRelationship(x) & BothLivingBeingsBenefit(x)))", "all x.((Mutualism(x) & LivingBeing(x)) -> BenefitsBoth(x))", "all x y z.((Mutualism(x) & LivingBeing(y) & LivingBeing(z)) -> BenefitsFrom(x,y,z))", "all x.(Mutualism(x) -> (SymbioticRelationship(x) & LivingBeingBenefit(x)))", "all x y.((Mutualism(x) & LivingBeing(y)) -> Benefits(x,y))", "all x.(Mutualism(x) -> (SymbioticRelationship(x) & LivingBeingBenefit(x)))", "all x y.((Mutualism(x) & LivingBeing(y)) -> BenefitsBoth(x,y))", "all x.(Mutualism(x) -> (SymbioticRelationship(x) & BothLivingBeingsBenefit(x)))", "all x.(Mutualism(x) -> (SymbioticRelationship(x) & BenefitsLivingBeings(x)))"]}
{"id": "eqasc_validation_770", "nl": "Symbiotic microbes live in the mussels' gills.", "fol": "", "prediction": ["all x.(SymbioticMicrobe(x) -> LivesInMushelsGills(x))", "all x y.((SymbioticMicrobe(x) & Muschel(y)) -> LivesInGills(x,y))", "all x y z.((SymbioticMicrobe(x) & Muschel(y) & Gill(z)) -> LivesIn(x,y,z))", "(LivesInMuschelsGills(symbioticMicrobes) & MustelsGills(mousel))", "all x.(SymbioticMicrobe(x) -> LivesInMushelsGills(x))", "all x y.((SymbioticMicrobe(x) & Muschel(y)) -> LivesInGills(x,y))", "all x.((SymbioticMicrobe(x) & LivesInMushelsGills(x)) -> LivesInMushelsGills(x))", "all x y z.((SymbioticMicrobe(x) & Muschel(y) & Gills(z)) -> LivesIn(x,y,z))", "all x y.((Mushels(x) & SymbioticMicrobe(x)) -> LivesInGills(x,y))", "all x.(SymbioticMicrobe(x) -> LivesInMuschelsGills(x))", "all x y.((Muschel(x) & SymbioticMicrobe(x) & LivesInGills(x,y)) -> LivesIn(x,y))", "exists x.(MuschelGills(x) & SymbioticMicrobes(x))", "all x.(SymbioticMicrobe(x) -> LivesInMushelsGills(x))", "all x y.((SymbioticMicrobe(x) & Muschel(y)) -> LivesInGills(x,y))", "all x.(SymbioticMicrobe(x) -> LivesInMuschelsGills(x))", "all x.(SymbioticMicrobe(x) -> LivesInMushelsGills(x))"]}
{"id": "eqasc_validation_771", "nl": "Mutualism is a relationship like that of microbes and mussels in which both species benefit.", "fol": "", "prediction": ["all x y.((Mutualism(x) & Microbe(y) & Muschel(y)) -> BenefitsBothSpecies(x,y))", "all x.(Mutualism(x) -> (Relationship(x,y) & Microbes(y) & Mussels(y) & BenefitsBothSpecies(x,y)))", "all x.(Mutualism(x) -> (Relationship(x,y) & Microbes(y) & Mussels(y) & BenefitsBothSpecies(x,y)))", "all x y z.((Mutualism(x) & Microbe(y) & Muschel(z)) -> (Benefit(x,y,z) & Benefit(x,y,z)))", "all x.(Mutualism(x) -> (exists y.(Microbe(y) & Benefits(x,y)) & exists z.(Mushels(z) & Benefits(z,x)))))", "all x y z.((Mutualism(x) & Microbe(y) & Muschel(z)) -> (Benefit(x,y,z) & Benefit(x,y,z)))", "all x y.((Mutualism(x) & Microbe(y) & Muschel(y)) -> BenefitsBothSpecies(x,y))", "(Mutualism(Microbes) & Mutualism(Muschels) & BenefitsBothSpecies(Muschels))", "all x.(Mutualism(x) -> (exists y.(Microbe(y) & Benefits(x,y)) & exists z.(Mushels(z) & Benefits(z,x))))", "(Mutualism(Microbes) & Mutualism(Muschels) & BenefitsBothSpecies(Muschels,Muschels))", "all x y.((Mutualism(x) & Microbe(y) & Muschel(y)) -> (Benefits(x,y) & Benefits(x,y)))", "all x.(Mutualism(x) -> (Relationship(x,microbes,muschels) & BenefitsBothSpecies(x)))", "all x y z.((Mutualism(x) & Microbe(y) & Muschel(z)) -> (Benefits(x,y,z) & Benefits(x,y,z)))", "all x.(Mutualism(x) -> (Relationship(x,microbes,muschels) & Benefits(x,microbes,muschels)))", "all x.((Mutualism(x) & Microbes(x) & Mussels(x)) -> BenefitsBothSpecies(x))", "all x y.((Mutualism(x) & Microbe(y) & Muschel(y)) -> (BenefitsBothSpecies(x,y) & BenefitsBothSpecies(x,y)))"]}
{"id": "eqasc_validation_772", "nl": "coral and alga both benefit from mutualism", "fol": "", "prediction": ["all x y.((Coral(x) & Alga(y)) -> BenefitsFromMutualism(x,y))", "(BenefitsFromMutualism(Coral) & BenefitsFromMutualism(Alga))", "(BenefitFromMutualism(Coral) & BenefitFromMutualism(Alga))", "all x.((Coral(x) | Alga(x)) -> BenefitsFromMutualism(x))", "both coral and alga benefit from mutualism (BenefitsFromMutualism(Coral) & BenefitsFromMutualism(Alga))", "all x y z.((Coral(x) & Alga(y) & Mutualism(z)) -> (BenefitsFrom(x,y,z) & BenefitsFrom(y,z)))", "((Coral(Coral) & Alga(alga)) & Mutualism(alga)) -> BenefitsFrom(Coral(alga))", "both mutualism and mutualism (BenefitsFromCoral(x) & BenefitsFromAlga(x))", "all x y.((Coral(x) & Alga(y)) -> BenefitsFromMutualism(x,y))", "all x y.((Coral(x) & Alga(y)) -> (BenefitsFromMutualism(x,y) & BenefitsFromMutualism(x,y)))", "(BenefitsFromMutualism(Coral) & BenefitsFromMutualism(Alga))", "(BenefitFromMutualism(Coral) & BenefitFromMutualism(Alga))", "all x.((Coral(x) | Alga(x)) -> BenefitsFromMutualism(x))", "(BenefitsFromMutualism(Coral) & BenefitsFromMutualism(alga))", "(BenefitFromMutualism(Coral) & BenefitFromMutualism(alga))", "all x.((Coral(x) | Alga(x)) -> BenefitsFromMutualism(x))"]}
{"id": "eqasc_validation_773", "nl": "Symbiotic relationships are common and add to the complexity of species interactions.", "fol": "", "prediction": ["all x.(SymbioticRelationship(x) -> (Common(x) & AddsComplexity(x)))", "all x y.((SymbioticRelationship(x) & SpeciesInteraction(y)) -> (Common(x,y) & AddsComplexity(x,y)))", "all x.(SymbioticRelationship(x) -> (Common(x) & AddsToComplexityOfSpeciesInteractions(x)))", "(Common(symbioticRelationships) & AddsToComplexityOfSpeciesInteractions(symbioticRelationships))", "all x.((SymbioticRelationship(x) & Common(x) & AddsComplexityOfSpeciesInteractions(x)) -> Complex(x))", "all x y z.((SymbioticRelationship(x) & Common(y) & SpeciesInteraction(z)) -> (AddsComplexity(x,z) & Complexity(x,z)))", "all x y.((SymbioticRelationship(x) & SpeciesInteraction(y)) -> (Common(x,y) & AddsComplexity(x,y)))", "all x.(SymbioticRelationship(x) -> (Common(x) & AddsComplexityOfSpeciesInteractions(x)))", "all x y.((SymbioticRelationship(x) & Common(x)) -> AddsComplexityOfSpeciesInteractions(y))", "all x.((SymbioticRelationship(x) & Common(x) & AddsComplexity(x)) -> ComplexSpeciesInteraction(x))", "all x y.((SymbioticRelationship(x) & SpeciesInteraction(y)) -> (Common(x) & AddsComplexity(x,y)))", "all x.(SymbioticRelationship(x) -> (Common(x) & AddToComplexityOfSpeciesInteractions(x)))", "all x.(SymbioticRelationship(x) -> (Common(x) & AddsToComplexityOfSpeciesInteractions(x)))", "all x y.((SymbioticRelationship(x) & Common(x)) -> AddsToComplexityOfSpeciesInteractions(y))", "exists x.(SymbioticRelationship(x) & Common(x) & AddsToComplexityOfSpeciesInteractions(x))", "all x.(SymbioticRelationship(x) -> (Common(x) & AddsComplexity(x)))"]}
{"id": "eqasc_validation_774", "nl": "Mutualism adds to the complexity of species interactions.", "fol": "", "prediction": ["all x.(Mutualism(x) -> AddsToComplexityOfSpeciesInteractions(x))", "all x y.((Mutualism(x) & SpeciesInteraction(y)) -> AddsComplexity(x,y))", "all x.(Mutualism(x) -> AddsToComplexityOfSpeciesInteractions(x))", "(all x.(Mutualism(x) -> AddsToComplexityOfSpeciesInteractions(x)))", "all x.(Mutualism(x) -> AddsComplexityOfSpeciesInteractions(x))", "all x y.((Mutualism(x) & SpeciesInteraction(y)) -> AddsComplexity(x,y))", "all x y z.((Mutualism(x) & SpeciesInteraction(y) & Complexity(z)) -> AddsTo(x,y,z))", "all x y.((Mutualism(x) & SpeciesInteraction(y)) -> AddsComplexity(x,y))", "all x.(Mutualism(x) -> AddsToComplexityOfSpeciesInteractions(x))", "all x.((Mutualism(x) & ComplexSpeciesInteractions(x)) -> AddsTo(x,Complexity))", "all x.(Mutualism(x) -> AddsToComplexityOfSpeciesInteractions(x))", "all x y.((Mutualism(x) & SpeciesInteraction(y)) -> AddsToComplexity(x,y))", "all x y.((Mutualism(x) & SpeciesInteraction(y)) -> AddsToComplexity(x,y))", "all x.(Mutualism(x) -> AddsToComplexityOfSpeciesInteractions(x))", "all x.(Mutualism(x) -> AddsComplexityOfSpeciesInteractions(x))", "All x.(Mutualism(x) -> AddsToComplexityOfSpeciesInteractions(x))"]}
{"id": "eqasc_validation_775", "nl": "Males have individual territories Has mutually beneficial symbiotic relationship with oxpecker bird.", "fol": "", "prediction": ["all x.(Male(x) -> (HasIndividualTerritories(x) & MutuallyBeneficialSymbioticRelationship(x) & OxpeckerBird(x)))", "all x y.((Male(x) & OxpeckerBird(y)) -> HasIndividualTerritories(x,y))", "all x.((Male(x) & IndividualTerritories(x)) -> HasMutuallyBeneficialSymbioticRelationship(x,OxpeckerBird))", "all x.(Male(x) -> HasIndividualTerritories(x)) HasMutuallyBeneficialSymbioticRelationship(x,OxpeckerBird))", "(MaleHasIndividualTerritories(Male) & HasMutuallyBeneficialSymbioticRelationshipWithOxpeckerBird(Male))", "all x.(Male(x) -> (HasIndividualTerritories(x) & HasMutuallyBeneficialSymbioticRelationship(x) & OxpeckerBird(x)))", "(MammalsHasIndividualTerritories(MustBeneficialSymbioticRelationship(MustBird))", "all x y.((Male(x) & OxpeckerBird(y)) -> IndividualTerritories(x,y))", "all x y z.((Male(x) & Territories(y) & OxpeckerBird(z)) -> HasIndividualTerritories(x,y,z))", "All x.((Male(x) & IndividualTerritories(x)) -> MutuallyBeneficialSymbioticRelationship(x,OxpeckerBird))", "all x.(Mammal(x) -> HasIndividualTerritories(x)) HasMutuallyBeneficialSymbioticRelationshipWithOxpeckerBird(x))", "all x y.((Male(x) & OxpeckerBird(y)) -> HasIndividualTerritories(x,y))", "all x y.((Male(x) & Oxpecker(y)) -> HasIndividualTerritories(x,y))", "All x.(Male(x) -> (HasIndividualTerritories(x) & MutuallyBeneficialSymbioticRelationship(x,OxpeckerBird)))", "all x y.((Mammal(x) & OxpeckerBird(y)) -> IndividualTerritories(x,y))", "All x.(Mammal(x) -> HasIndividualTerritories(x))"]}
{"id": "eqasc_validation_776", "nl": "oxpecker birds help other species benefit", "fol": "", "prediction": ["all x y.((OxpeckerBird(x) & Bird(y)) -> HelpsBenefitSpecies(x,y))", "all x.(OxpeckerBird(x) -> HelpsBenefitSpecies(x))", "all x y z.((OxpeckerBird(x) & Bird(y) & Species(z)) -> HelpsBenefit(x,y,z))", "all x y.((OxpeckerBird(x) & OtherSpecies(y)) -> HelpsBenefit(x,y))", "(HelpsOxpeckerBirds(oxpecker) & HelpsOtherSpeciesBenefit(oxpecker))", "all x.(OxpeckerBird(x) -> HelpsOtherSpeciesBenefit(x))", "all x.((OxpeckerBird(x) & HelpsOtherSpeciesBenefit(x,y)) -> HelpsOtherSpeciesBenefit(x,y))", "all x y z.((OxpeckerBird(x) & Bird(y) & Bird(z)) -> HelpsBenefit(x,y,z))", "all x y.((OxpeckerBird(x) & Bird(y)) -> HelpsBenefitSpecies(x,y))", "all x.(OxpeckerBird(x) -> HelpsBenefitOtherSpecies(x))", "all x y.((Oxpecker(x) & Bird(y)) -> HelpsBenefitOtherSpecies(x,y))", "all x.(OxpeckerBird(x) -> (HelpsBenefitSpecies(x) & HelpsBenefitSpecies(x)))", "all x y z.((OxpeckerBird(x) & OtherSpecies(y) & Bird(z)) -> HelpsBenefit(x,y,z))", "all x y.((OxpeckerBird(x) & OtherSpecies(y)) -> HelpsBenefit(x,y))", "all x.(OxpeckerBird(x) -> HelpsOtherSpeciesBenefit(x))", "all x.(OxpeckerBird(x) -> HelpsBenefitOtherSpecies(x))"]}
{"id": "eqasc_validation_777", "nl": "Another symbiotic relationship is found with cucumbers and corn.", "fol": "", "prediction": ["all x.(SymbioticRelationship(x) -> (Cucumbers(x) & Corn(x)))", "(exists x.(SymbioticRelationship(x) & FoundWith(x,Cucumbers) & FoundWith(x,Corn)))", "all x y.((SymbioticRelationship(x) & Cucumber(y) & Corn(y)) -> FoundWith(x,y))", "exists x.(SymbioticRelationship(x) & FoundWith(x,Cucumbers) & FoundWith(x,Corn))", "all x y z.((SymbioticRelationship(x) & Cucumber(y) & Corn(z)) -> FoundWith(x,y,z))", "(SymbioticRelationship(x) & FoundWithCucumbers(x) & FoundWithCorn(x))", "all x.((Cucumber(x) & Corn(x)) -> SymbioticRelationship(x))", "(exists x.(SymbioticRelationship(x) & FoundWith(x,Cucumbers) & FoundWith(x,Corn)))", "exists x.(SymbioticRelationship(x) & FoundWith(x,Cucumbers) & FoundWith(x,Corn))", "all x y z.((SymbioticRelationship(x) & Cucumber(y) & Corn(z)) -> FoundWith(x,y,z))", "exists x.(SymbioticRelationship(x) & FoundWithCucumbers(x) & FoundWithCorn(x))", "all x y z.((SymbioticRelationship(x) & Cucumber(y) & Corn(z)) -> (FindsWith(x,y,z) & FoundWith(x,y)))", "(exists x.(SymbioticRelationship(x) & FoundWith(x,Cucumbers) & FoundWith(x,Corn)))", "exists x.(SymbioticRelationship(x) & FoundWith(x,Cucumbers) & FoundWith(x,Corn))", "exists x.(SymbioticRelationship(x) & FoundWithCucumbersAndCorn(x))", "exists x.(SymbioticRelationship(x,y) & Cucumber(y) & Corn(y))"]}
{"id": "eqasc_validation_778", "nl": "cucumbers and corn possess a mutualism in which both species benefit.", "fol": "", "prediction": ["all x y.((Cucumber(x) & Corn(y)) -> (HasMutualism(x,y) & Benefits(y,x)))", "all x.((Cucumber(x) & Corn(x)) -> (HasMutualism(x) & BenefitsBothSpecies(x)))", "(BothSpeciesBenefit(cucumbers,Crop) & Mutualism(corn,Cucumber))", "((Cucumber(x) | Corn(x))) -> Mutualism(x))", "all x y.((Cucumber(x) & Corn(y)) -> (HasMutualism(x,y) & Benefits(y,x)))", "(BothSpeciesBenefit(Cucumbers) & -Benefit(Corn))", "all x y.((Cucumber(x) & Corn(y)) -> (PossibleMutualism(x,y) & Benefits(y,x)))", "all x y.((Curcumber(x) & Corn(y)) -> (HasMutualism(x,y) & Benefits(y,x)))", "all x.((Cucumber(x) & Corn(x)) -> (HasMutualism(x) & BenefitsBothSpecies(x)))", "all x.((Cucumber(x) | Corn(x)) -> (HasMutualism(x) & BenefitsBothSpecies(x)))", "(BothSpeciesBenefit(curcumin,Crop) & Mutualism(corn,Cucumber))", "(BothSpeechSpecies(cucumbers,corn) & Mutualism(corn,cucumber))", "((Cucumbers(x) | Corn(x))) -> Mutualism(x))", "both species benefit from mutualisms (Cucumbers and Corn).", "all x.((Cucumber(x) & Corn(x)) -> Mutualism(x))", "all x y.((Cucumber(x) & Corn(y)) -> (HasMutualism(x,y) & BenefitsBothSpecies(y,x)))"]}
{"id": "eqasc_validation_779", "nl": "Adolescence is the last stage of life before adulthood.", "fol": "", "prediction": ["all x.(Adolescence(x) -> LastStageOfLifeBeforeAdulthood(x))", "(LastStageOfLife(adolescence) & BeforeAdulthood(adolescence))", "all x.(Adolescence(x) -> (LastStageOfLife(x) & BeforeAdulthood(x)))", "(LateStageOfLife(adolescence) & BeforeAdulthood(adolescence))", "all x y.((Adolescence(x) & Adulthood(y)) -> LastStageOfLife(x,y))", "(LastStageOfLifeBeforeAdulthood(adolescence) & Adulthood(adolescence))", "(LateStageOfLife(adolescence) & Adulthood(adolescence))", "(LastStageOfLife(adolescence) & BeforeAdulthood(a))", "all x.(Adolescence(x) -> LastStageOfLife(x))", "all x.(Adolescence(x) -> (LateStageOfLife(x) & BeforeAdulthood(x)))", "all x y.((Adolescence(x) & Adulthood(y)) -> LastStageOfLife(x,y))", "all x.(Adolescence(x) -> EndOfLife(x))", "all x.(Adolescence(x) -> (LastStageOfLife(x) & BeforeAdulthood(x)))", "all x y.((Adolescence(x) & Adulthood(y)) -> LastStageOfLife(x,y))", "all x.(Adolescence(x) -> LastStageOfLifeBeforeAdulthood(x))", "All x.(Adolescence(x) -> EndOfLife(x))"]}
{"id": "eqasc_validation_780", "nl": "Adolescence Moving into adolescence, rapid changes occur.", "fol": "", "prediction": ["all x.(Adolescence(x) -> RapidChangesOccur(x))", "all x.((Adolescence(x) & Adolescence(x)) -> RapidChangesOccur(x))", "all x y.((Adolescence(x) & Adolescence(y)) -> RapidChange(x,y))", "all x.(Adolescence(x) -> RapidChange(x))", "(Adolescence(a) -> RapidChanges(a))", "all x y z.((Adolescence(x) & Adolescence(y) & RapidChange(z)) -> Occurs(x,y,z))", "all x y.((Adolescence(x) & Adolescence(y)) -> RapidChangesOccur(x,y))", "all x.((Adolescence(x) & RapidChange(x)) -> Adolescence(x))", "(RapidChangesOccurInAdolescence(Adolescence)", "(RapidChangesOccur(adolescence) -> Adolescence(a))", "all x.(Adolescence(x) -> (RapidChangesOccur(x) & Adolescence(x)))", "all x.(Adolescence(x) -> RapidChangesOccur(x))", "all x.((Adolescence(x) & Adolescence(y)) -> RapidChangesOccur(x,y))", "all x y.((Adolescence(x) & Adolescence(y)) -> RapidChange(x,y))", "all x y.((Adolescence(x) & Adolescence(y)) -> RapidChangesOccur(x,y))", "all x.(Adolescence(x) -> RapidChange(x))"]}
{"id": "eqasc_validation_781", "nl": "rapid changes occur in the last stage of life before adulthood", "fol": "", "prediction": ["all x y.((RapidChange(x) & StageOfLife(y) & Adulthood(y)) -> OccursInLastStageOfLife(x,y))", "all x y z.((RapidChange(x) & StageOfLife(y) & Adulthood(z)) -> OccursInLastStageOfLife(x,y,z))", "all x.(RapidChanges(x) -> (OccursInLastStageOfLife(x) & BeforeAdulthood(x)))", "all x.((RapidChanges(x) & StageOfLife(x) & Adulthood(x)) -> OccursInLastStageOfLife(x))", "all x y.((RapidChange(x) & StageOfLife(y) & Adulthood(y)) -> OccursInLastStageOfLife(x,y))", "(RapidChangesOccur inLastStageOfLife(adulthood) & BeforeAdulthood(adulthood))", "all x.(RapidChanges(x) -> OccursInLastStageOfLife(x))", "all x.((RapidChanges(x) & LifeStage(x) & Adulthood(x)) -> OccursInLastStageOfLife(x))", "all x y z.((RapidChange(x) & StageOfLife(y) & Adulthood(z)) -> OccursInLastStageOfLife(x,y,z))", "all x.(RapidChange(x) -> OccursInLastStageOfLife(x))", "all x.(RapidChangesOfLife(x) -> (OccursInLastStageOfLife(x) & BeforeAdulthood(x)))", "all x y.((RapidChanges(x) & StageOfLife(y) & Adulthood(y)) -> OccursInLastStageOfLife(x,y))", "all x y.((RapidChange(x) & LifeStage(y) & Adulthood(y)) -> OccursInLastStage(x,y))", "all x y.((RapidChange(x) & StageOfLife(y) & Adulthood(y)) -> OccursInLastStageOfLife(x,y))", "all x.((RapidChange(x) & StageOfLife(x) & Adulthood(x)) -> OccursInLastStageOfLife(x))", "all x y z.((RapidChange(x) & StageOfLife(y) & Adulthood(z)) -> OccursInLastStageOfLife(x,y,z))"]}
{"id": "eqasc_validation_782", "nl": "the last stage of life before adulthood begins with puberty.", "fol": "", "prediction": ["all x.((StageOfLife(x) & Adulthood(x)) -> Puberty(x))", "(LastStageOfLife(adulthood) & StartsWithPuperhood(adulthood))", "-EndsPuperhood(-AgeOfLife(-AgeOfLife(-AgeOfLife(-AgeOfLife(-AgeOfLife(-AgeOfLife(-AgeOfLife(-AgeOfLife(-AgeOfLife(-AgeOfPuperhood)))", "all x.((LeastStageOfLife(x) & Adulthood(x)) -> Puberty(x))", "all x.((StageOfLife(x) & Adulthood(x)) -> StartsWithPuperhood(x))", "all x y.((StageOfLife(x) & Adulthood(y)) -> StartsWithPuperhood(x,y))", "all x.((Adult(x) & Puberty(x)) -> LastStageOfLife(x))", "(EndStageOfLife(adulthood) & Puberty(adulthood))", "all x.(Adulthood(x) -> (EndsWithPupitery(x) & EndsWithPupiterhood(x)))", "all x y.((Adult(x) & Puberty(y)) -> LastStageOfLife(x,y))", "(LastStageOfLifeBeforeAdulthood(adulthood) & Puberty(adulthood))", "all x.(Pupilhood(x) -> LastStageOfLifeBeforeAdulthood(x))", "-EndsPuberty(a) -> LastStageOfLifeBeforeAdulthood(a))", "all x y.((StageOfLife(x) & Adulthood(y) & StartsWithPuperhood(x,y)) -> LastStageOfLife(x,y))", "(EndsPuperhood(adulthood) -> LastStageOfLife(adulthood))", "all x.((LifeStage(x) & Adulthood(x)) -> StartsWithPuperhood(x))"]}
{"id": "eqasc_validation_783", "nl": "Life is very complex for the adolescent.", "fol": "", "prediction": ["all x.(Adolescent(x) -> ComplexLife(x))", "all x y.((Adolescent(x) & Adolescent(y)) -> ComplexLife(x,y))", "all x.(Adolescent(x) -> ComplexLife(x))", "all x y.((Adolescent(x) & Adolescent(y)) -> ComplexLife(x,y))", "all x.((Adolescent(x) & ComplexLife(x)) -> Adolescent(x))", "all x.(Adolescent(x) -> ComplexLife(x))", "(LifeComplexFor(adolescent) & ComplexFor(adolescent))", "all x.(Adolescent(x) -> VeryComplexLife(x))", "(LifeComplexFor(adolescent) -> Adolescent(a))", "all x y.((Adolescent(x) & Adolescent(y)) -> ComplexLife(x,y))", "all x y.((Adolescent(x) & Adolescent(y)) -> ComplexLife(x,y))", "all x y.((Adolescent(x) & Adolescent(y)) -> VeryComplexLife(x,y))", "all x.(Adolescent(x) -> ComplexLife(x))", "exists x.(Adolescent(x) & ComplexLife(x))", "exists x.(Adolescent(x) & Complex(x))", "exists x.(Adolescent(x) & ComplexLife(x))"]}
{"id": "eqasc_validation_784", "nl": "the last stage of life before adulthood is very complex", "fol": "", "prediction": ["all x.((LeastStageOfLife(x) & BeforeAdulthood(x)) -> VeryComplex(x))", "all x.((LifeStage(x) & Adulthood(x)) -> VeryComplex(x))", "all x.((StageOfLife(x) & Adulthood(x)) -> VeryComplex(x))", "all x y.((StageOfLife(x) & Adulthood(y)) -> VeryComplex(x,y))", "all x y.((LeastStageOfLife(x) & Adulthood(y)) -> VeryComplex(x,y))", "(LastStageOfLife(adulthood) -> VeryComplex(adulthood))", "the last stage of life before adulthood is very complex.", "(LastStageOfLifeBeforeAdulthood(x) -> VeryComplex(x))", "all x.(Adulthood(x) -> ComplexLastStageOfLife(x))", "-(LateStageOfLife(adulthood) -> VeryComplex(adulthood))", "(LateLifeStage(adulthood) -> VeryComplex(adulthood))", "all x y.((LifeStage(x) & Adulthood(y)) -> Complex(x,y))", "all x.((LateStageOfLife(x) & Adulthood(x)) -> VeryComplex(x))", "all x y.((LateStageOfLife(x) & Adulthood(y)) -> VeryComplex(x,y))", "all x.((LifeStage(x) & BeforeAdulthood(x)) -> VeryComplex(x))", "all x.(EndStageOfLife(x) -> VeryComplex(x))"]}
{"id": "eqasc_validation_785", "nl": "Soon after puberty, the adult life stage begins.", "fol": "", "prediction": ["all x.((Pupil(x) & AdultLifeStage(x)) -> Starts(x))", "all x.((Pupil(x) & AdultStage(x)) -> Starts(x))", "all x y.((Pupil(x) & AdultLifeStage(y)) -> Starts(y,x))", "all x.((Pupilhood(x) & AdultLifeStage(x)) -> Starts(x))", "ImmediatelyAfterPuberty,adultLifeStage(x)", "(AdultLifeStage(a) & SoonAfterPuberty(a) & Begins(a))", "soonafterpuberty, adultlifestage begins.", "all x.((Puberty(x) & AdultLifeStage(x)) -> Begins(x))", "(AdultLifeStage(puberty) -> BeginsStage(adult))", "ImmediatelyAfterPupilhood(a) beginsAdultLifeStage(b))", "all x y.((Pupil(x) & AdultLifeStage(y)) -> Begins(x,y))", "soonafterPuberty,adultLifeStage(x)", "all x.((AdultLifeStage(x) & Puberty(x)) -> Starts(x))", "(AutumnStage(puberty) & SoonAfter(adulty))", "-(PupilhoodStage(Pupil) & AdultLifeStage(Pupil))", "all x.((Puperhood(x) & AdultLife(x)) -> Begins(x))"]}
{"id": "eqasc_validation_786", "nl": "Puberty begins the last stage of life before adulthood.", "fol": "", "prediction": ["all x.(Puperty(x) -> EndsStageOfLife(x))", "all x y.((Pupil(x) & Adulthood(y)) -> EndsStageOfLife(x,y))", "all x.(Puperty(x) -> EndsLeastStageOfLife(x))", "all x.(Pupilhood(x) -> EndsStageOfLife(x))", "all x y.((Pupilhood(x) & Adulthood(y)) -> EndsStageOfLife(x,y))", "(EndsPuperhood(puberty) & LastStageOfLife(puberty))", "-EndsStageOfLifeBeforeAdulthood(puberty)", "-EndsLateStageOfLife(puberty)", "all x y.((Puperty(x) & Adulthood(y)) -> EndsStageOfLife(x,y))", "all x.(Puperty(x) -> EndsLastStageOfLife(x))", "(EndsPuperhood(puberty) | EndsAdulthood(puberty))", "(EndsPuperhood(puberty,adulthood) -> LastStageOfLife(puberty,adulthood))", "(EndsPuberty(puberty) & EndsAdulthood(puberty))", "all x.(Pupilhood(x) -> EndsLastStageOfLife(x))", "all x.(Puperty(x) -> (EndsLeastStageOfLife(x) & BeforeAdulthood(x)))", "all x.(Puberty(x) -> EndsLeastStageOfLife(x))"]}
{"id": "eqasc_validation_787", "nl": "the last stage of life before adulthood begins with puberty", "fol": "", "prediction": ["all x.((LeastStageOfLife(x) & Adulthood(x)) -> Puberty(x))", "all x.((StageOfLife(x) & Adulthood(x)) -> Puberty(x))", "(LastStageOfLifeBeforeAdulthood(adulthood) -> Puberty(adulthood))", "all x y.((StageOfLife(x) & Adulthood(y)) -> (EndsWithPuberty(x,y) & EndsWithPuberty(x,y)))", "all x.((LifeStage(x) & Adulthood(x)) -> Puberty(x))", "(EndsPuberty(adulthood) -> LastStageOfLifeBeforeAdulthood(adulthood))", "all x y.((Pupilhood(x) & LastStageOfLife(x,y)) -> StartsWithPupilhood(x,y))", "all x y.((EndStageOfLife(x) & Adulthood(y)) -> Puberty(x,y))", "-Pupilhood(a) -> (LastStageOfLife(a) & BeforeAdulthood(a) & Puberty(b)))", "all x.(Adulthood(x) -> (LastStageOfLife(x) & Puberty(x)))", "all x y z.((StageOfLife(x) & Adulthood(y) & Puberty(z)) -> EndsWithPuberty(x,y,z))", "(LateStageOfLifeBeforeAdulthood(adulthood) & Puberty(puberty))", "(LastStageOfLifeBeforeAdulthood(adulthood) & Puberty(puberty))", "-EndsPuberty(adulthood)", "all x.((LateStageOfLife(x) & Adulthood(x)) -> Puberty(x))", "all x.((StageOfLife(x) & Adulthood(x)) -> Puberty(x))"]}
{"id": "eqasc_validation_788", "nl": "Adolescence is a pivotal stage of human development.", "fol": "", "prediction": ["all x.(Adolescence(x) -> PivotalStageOfHumanDevelopment(x))", "(PivotalStageOfHumanDevelopment(adolescence)", "all x.(Adolescence(x) -> (PivotalStageOfHumanDevelopment(x) & HumanDevelopment(x)))", "all x y.((Adolescence(x) & HumanDevelopment(y)) -> PivotalStage(x,y))", "all x.((Adolescence(x) & HumanDevelopment(x)) -> PivotalStage(x))", "(PivotalStageOfHumanDevelopment(adolescence)", "all x.(Adolescence(x) -> PivotalStageOfHumanDevelopment(x))", "all x y.((Adolescence(x) & HumanDevelopment(y)) -> PivotalStage(x,y))", "all x.(Adolescence(x) -> (PivotalStageOfHumanDevelopment(x) & HumanDevelopment(x)))", "(PivotalStageOfHumanDevelopment(adolescence)", "all x.((Adolescence(x) & HumanDevelopment(x)) -> PivotalStage(x))", "all x.(Adolescence(x) -> (PivotalStageOfHumanDevelopment(x) & HumanDevelopment(x)))", "all x y.((Adolescence(x) & HumanDevelopment(y)) -> PivotalStage(x,y))", "all x.(Adolescence(x) -> PivotalStageOfHumanDevelopment(x))", "all x.(Adolescence(x) -> (PivotalStageOfHumanDevelopment(x)))", "all x y.((Adolescence(x) & HumanDevelopment(y)) -> PivotalStage(x,y))"]}
{"id": "eqasc_validation_789", "nl": "the last stage before adulthood is a pivotal later stage of human development.", "fol": "", "prediction": ["all x.((LeastStageBeforeAdulthood(x) & HumanDevelopment(x)) -> PivotalLaterStage(x))", "all x.((LastStageBeforeAdulthood(x) & HumanDevelopment(x)) -> PivotalLaterStage(x))", "all x.((LateStage(x) & BeforeAdulthood(x)) -> PivotalLaterStageOfHumanDevelopment(x))", "all x.((Stage(x) & BeforeAdulthood(x)) -> PivotalLaterStageOfHumanDevelopment(x))", "(PivotalLaterStageOfHumanDevelopment(adulthood)", "all x.((LastStage(x) & BeforeAdulthood(x)) -> PivotalLaterStageOfHumanDevelopment(x))", "all x y.((LateStage(x) & Adulthood(y)) -> (PivotalLaterStage(x,y)))", "the laststagebeforeadulthood is pivotallaterstageOfHumanDevelopment(sixthstage(s))", "(PivotalStageOfHumanDevelopment(adulthood) -> LastStage(adulthood))", "all x y.((LastStage(x) & Adulthood(y)) -> (PivotalLaterStage(x,y) & HumanDevelopment(x)))", "all x.(Adulthood(x) -> (PivotalLaterStageOfHumanDevelopment(x)))", "the last stage beforeadulthood is pivotallaterstageOfHumanDevelopment(x))", "(PivotalLaterStageOfHumanDevelopment(adulthood)", "all x.((LeastStageBeforeAdulthood(x) & HumanDevelopment(x)) -> PivotalLaterThan(x))", "all x y.((LeastStage(x) & Adulthood(y)) -> (PivotalLaterThan(x,y)))", "all x.((Stage(x) & BeforeAdulthood(x)) -> LaterStageOfHumanDevelopment(x))"]}
{"id": "eqasc_validation_790", "nl": "Adolescence is a fascinating and crazy time of life.", "fol": "", "prediction": ["all x.(Adolescence(x) -> (FunnyTimeOfLife(x) & CrazyTimeOfLife(x)))", "all x.((Adolescence(x) & Fascinating(x) & CrazyTimeOfLife(x)) -> CrazyTimeOfLife(x))", "all x.(Adolescence(x) -> (FunnyTimeOfLife(x) & CrazyTimeOfLife(x)))", "all x y.((Adolescence(x) & Life(y)) -> (Funny(x) & Crazy(x)))", "(FunnyTimeOfLife(adolescence) & CrazyTimeOfLife(adolescence))", "all x.(Adolescence(x) -> (Funny(x) & Crazy(x)))", "(Funny(adolescence) & Crazy(adolescence))", "(FunnyAndRainfulTimeOfLife(adolescence)", "all x y.((Adolescence(x) & Life(y)) -> (Funny(x,y) & Crazy(x,y)))", "all x.((Adolescence(x) & Fascinating(x) & CrazyTimeOfLife(x)) -> FunnyAndRainfulTimeOfLife(x))", "all x y.((Adolescence(x) & LifeTime(y)) -> (Funny(x) & Crazy(x)))", "all x.(Adolescence(x) -> (FunnyTimeOfLife(x) & CrazyTimeOfLife(x)))", "all x.(Adolescence(x) -> (FunnyTimeOfLife(x) & CrazyTimeOfLife(x)))", "all x.(Adolescence(x) -> (Funny(x) & Crazy(x)))", "all x.(Adolescence(x) -> (Funnishing(x) & Crazy(x)))", "all x.(Adolescent(x) -> (FamousTimeOfLife(x) & CrazyTimeOfLife(x)))"]}
{"id": "eqasc_validation_791", "nl": "Adolescence is a crazy time before adulthood", "fol": "", "prediction": ["all x.(Adolescence(x) -> (RainfulTime(x) & BeforeAdulthood(x)))", "all x y.((Adolescence(x) & Adulthood(y)) -> CrazyTime(x,y))", "all x.(Adolescence(x) -> (RainfulTimeBeforeAdulthood(x) & BeforeAdulthood(x)))", "(crazyTimeBeforeAdolescence(adolescence) & Adulthood(adolescence))", "all x.(Adolescence(x) -> (CrazyTimeBeforeAdulthood(x) & BeforeAdulthood(x)))", "all x y z.((Adolescence(x) & Adulthood(y) & CrazyTime(z)) -> BeforeAdulthood(x,y,z))", "(RainfulTimeBeforeAdolescence(adolescence) & BeforeAdulthood(adolescence))", "(crazyTimeBeforeAdulthood(adolescence) -> CrazyTimeBeforeAdulthood(adolescence,adulthood))", "(CrazyTimeBeforeAdulthood(adolescence) & BeforeAdulthood(adolescence,adulthood))", "all x.((Adolescence(x) & CrazyTime(x)) -> Adulthood(x))", "all x y.((Adolescence(x) & Adulthood(y)) -> CrazyTimeBeforeAdulthood(x,y))", "all x.(Adolescence(x) -> CrazyTimeBeforeAdulthood(x))", "all x y.((Adolescence(x) & Adulthood(y)) -> CrazyTime(x,y))", "all x.((Adolescence(x) & CrazyTime(x)) -> Adulthood(x))", "all x.(Adolescence(x) -> (RainyTime(x) & BeforeAdulthood(x)))", "all x y.((Adolescence(x) & Adulthood(y)) -> CrazyTimeBeforeAdulthood(x,y))"]}
{"id": "eqasc_validation_792", "nl": "Phylogeny is the evolutionary history of a group of related organisms.", "fol": "", "prediction": ["all x y.((Phylogeny(x) & Organism(y)) -> EvolutionaryHistory(x,y))", "all x.(Phylogeny(x) -> EvolutionaryHistoryOfRelatedOrganisms(x))", "all x y z.((Phylogeny(x) & Organism(y) & Organism(z)) -> EvolutionaryHistory(x,y,z))", "(EvolutionaryHistoryOfRelatedOrganisms(phylogeny) -> EvolutionaryHistoryOfOrganisms(phylogeny))", "all x.(Phylogeny(x) -> (EvolutionaryHistory(x) & GroupOfRelatedOrganisms(x)))", "all x y.((Phylogeny(x) & RelatedOrganisms(y)) -> EvolutionaryHistory(x,y))", "all x y.((Phylogeny(x) & Organism(y)) -> EvolutionaryHistory(x,y))", "all x.(Phylogeny(x) -> EvolutionaryHistoryOfRelatedOrganisms(x))", "all x y z.((Phylogeny(x) & Organism(y) & Organism(z) & Related(y,z)) -> EvolutionaryHistory(x,y,z))", "all x y z.(Phylogeny(x) -> (EvolutionaryHistory(y) & Organism(z) & Related(z)))", "all x.(Phylogeny(x) -> EvolutionaryHistoryOfRelatedOrganisms(x))", "all x.(Phylogeny(x) -> (EvolutionaryHistoryOfRelatedOrganisms(x) & RelatedOrganisms(x)))", "all x y.((Phylogeny(x) & RelatedOrganism(y)) -> EvolutionaryHistory(x,y))", "all x.(Phylogeny(x) -> EvolutionaryHistoryOfRelatedOrganisms(x))", "all x y.((Phylogeny(x) & Organism(y)) -> EvolutionaryHistory(x,y))", "all x.(Phylogeny(x) -> EvolutionaryHistory(x))"]}
{"id": "eqasc_validation_793", "nl": "Classification can be based on phylogeny.", "fol": "", "prediction": ["all x.(Classification(x) -> BasedOnPhylogeny(x))", "all x y.((Classification(x) & Phylogeny(y)) -> BasedOn(x,y))", "all x.(Classification(x) -> BasedOnPhylogeny(x))", "all x y.((Classification(x) & Phylogeny(y)) -> Base(x,y))", "all x.(Classification(x) -> BasedOnPhylogeny(x))", "all x y.(Classification(x) -> (BasedOnPhylogeny(x,y)))", "(BasedOnPhylogeny)", "all x y.(Classification(x) -> (BasedOnPhylogeny(x) | BasedOnPhylogeny(x)))", "all x y.((Classification(x) & Phylogeny(y)) -> BasedOn(x,y))", "all x.(Classification(x) -> BasedOnPhylogeny(x))", "all x.(Classification(x) -> BasedOnPhylogeny(x))", "all x.(Classification(x) -> PhylogenyBased(x))", "exists x.(Clarification(x) & BasedOnPhylogeny(x))", "exists x.(Classification(x) & BasedOnPhylogeny(x))", "exists x.(Classification(x) & BasedOnPhylogeny(x))", "exists x.(Classification(x) & BasedOnPhylogeny(x))"]}
{"id": "eqasc_validation_794", "nl": "classification can be based in the evolutionary history of a group of related organisms", "fol": "", "prediction": ["all x y.((Organism(x) & RelatedOrganism(y)) -> EvolutionaryHistory(x,y))", "all x.((Organism(x) & RelatedOrganism(x)) -> EvolutionaryHistory(x))", "all x y z.((Organism(x) & EvolutionaryHistory(y) & RelatedOrganism(z)) -> CanBeBasedIn(x,y,z))", "all x y.((Organism(x) & RelatedOrganism(y)) -> (EvolutionaryHistory(x,y) & RelatedOrganism(x,y)))", "all x.((Organism(x) & EvolutionaryHistory(x)) -> CanBeBasedIn(x,EvolutionaryHistory))", "all x y z.((Organism(x) & EvolutionaryHistory(y) & Organism(z) & Related(z)) -> CanBeBasedIn(x,y,z))", "all x y.((Organism(x) & EvolutionaryHistory(y)) -> CanBeBasedIn(x,y))", "(all x.(EvolutionaryHistory(x) -> RelatedOrganisms(x)))", "all x.((Organism(x) & EvolutionaryHistory(x) & RelatedOrganism(x)) -> CanBeBasedIn(x,EvolutionaryHistory))", "all x.((OrganismGroup(x) & EvolutionaryHistoryOfRelatedOrganisms(x)) -> CanBeBasedIn(x,EvolutionaryHistoryOfOrganismGroup(x))", "all x.((Organism(x) & RelatedOrganism(x)) -> EvolutionaryHistoryBasedOn(x,EvolutionaryHistory))", "all x y z.((Organism(x) & EvolutionaryHistory(y) & RelatedOrganism(z) & BasedIn(x,y,z)) -> RelatedOrganism(x))", "all x y.((Organism(x) & GroupOfRelatedOrganisms(y)) -> CanBeBasedInEvolutionaryHistory(x,y))", "all x y.((Organism(x) & RelatedOrganism(y)) -> CanBeBasedInEvolutionaryHistory(x,y))", "all x y z.((Organism(x) & EvolutionaryHistory(y) & Organism(z) & Related(z)) -> CanBeBasedIn(x,y,z))", "all x.((Organism(x) & RelatedOrganism(x)) -> EvolutionaryHistory(x))"]}
{"id": "eqasc_validation_795", "nl": "Much of evolutionary biology involves the history of organic diversity.", "fol": "", "prediction": ["all x.(EvolutionaryBiology(x) -> InvolvesHistoryOfOrganicDiversity(x))", "all x y.((EvolutionaryBiology(x) & OrganicDiversity(y)) -> InvolvesHistory(x,y))", "all x.((EvolutionaryBiology(x) & OrganicDiversity(x)) -> InvolvesHistory(x))", "(InvolvesHistoryOfOrganicDiversity(e) & EvolutionaryBiology(e))", "all x.(EvolutionaryBiology(x) -> InvolvesHistoryOfOrganicDiversity(x))", "all x.((EvolutionaryBiology(x) & InvolvesHistoryOfOrganicDiversity(x)) -> InvolvesHistoryOfOrganicDiversity(x))", "all x y.((EvolutionaryBiology(x) & OrganicDiversity(y)) -> InvolvesHistory(x,y))", "(InvolvesHistoryOfOrganicDiversity(e) & EvolutionaryBiology(e))", "all x.(EvolutionaryBiology(x) -> InvolvesHistoryOfOrganicDiversity(x))", "(MostOfEvolutionaryBiologyInvolvesHistoryOfOrganicDiversity(Elements))", "all x y.((EvolutionaryBiology(x) & OrganicDiversity(y)) -> InvolvesHistory(x,y))", "all x.(EvolutionaryBiology(x) -> InvolvesHistoryOfOrganicDiversity(x))", "all x y.((EvolutionaryBiology(x) & OrganicDiversity(y)) -> InvolvesHistory(x,y))", "exists x.(EvolutionaryBiology(x) & Involves(x,organicDiversity))", "exists x.(EvolutionaryBiology(x) & HistoryOfOrganicDiversity(x))", "all x.(EvolutionaryBiology(x) -> InvolvesHistoryOfOrganicDiversity(x))"]}
{"id": "eqasc_validation_796", "nl": "Phylogeny is the history and organic diversity of related organisms", "fol": "", "prediction": ["all x y.((Phylogeny(x) & Organism(y)) -> (History(x,y) & OrganicDiversity(x,y)))", "all x.(Phylogeny(x) -> (HistoryAndOrganicDiversityOfRelatedOrganisms(x) & RelatedOrganisms(x)))", "all x y z.((Phylogeny(x) & Organism(y) & Organism(z)) -> (HistoryAndOrganicDiversity(x,y,z) & RelatedOrganism(y)))", "all x y.((Phylogeny(x) & Organism(y)) -> (HistoryAndOrganicDiversity(x,y) & RelatedOrganisms(y)))", "(Phylogeny) -> (HistoryAndOrganicDiversityOfRelatedOrganisms(phylogeny) & RelatedOrganisms(phylogeny)))", "all x.(Phylogeny(x) -> (HistoryAndOrganicDiversity(x) & RelatedOrganisms(x)))", "all x y z.(Phylogeny(x) -> (HistoryAndOrganicDiversityOfRelatedOrganisms(y) & RelatedOrganisms(z) & RelatedOrganisms(z) & RelatedOrganisms(z) & RelatedOrganisms(z)))", "all x y.((Phylogeny(x) & RelatedOrganism(y)) -> (History(x,y) & OrganicDiversity(x,y)))", "all x.(Phylogeny(x) -> (History(x) & OrganicDiversity(x) & RelatedOrganisms(x)))", "all x.(Phylogeny(x) -> (HistoryAndOrganicDiversityOfRelatedOrganisms(x) & RelatedOrganisms(x)))", "all x y z.((Phylogeny(x) & Organism(y) & Organism(z)) -> (HistoryAndOrganicDiversity(x,y,z) & RelatedOrganism(x)))", "(Phylogeny(Phylogeny) -> (History(Phylogeny) & OrganicDiversity(Phylogeny) & RelatedOrganisms(Phylogeny)))", "all x.(Phylogeny(x) -> (History(x) & OrganicDiversity(x) & RelatedOrganisms(x)))", "all x.(Phylogeny(x) -> (HistoryOfOrganisms(x) & OrganicDiversityOfOrganisms(x) & RelatedOrganisms(x)))", "all x y.((Phylogeny(x) & Organism(y)) -> (HistoryAndOrganicDiversity(x,y) & RelatedOrganism(x,y)))", "all x.(Phylogeny(x) -> (HistoryAndOrganicDiversityOfRelatedOrganisms(x) & RelatedOrganisms(x)))"]}
{"id": "eqasc_validation_797", "nl": "Metazoan phylogeny Phylogeny of phyla is poorly understood.", "fol": "", "prediction": ["all x.(MetazoanPhylogeny(x) -> PoorlyUnderstood(x))", "(MetazoanPhylogeny(MetazoanPhylogeny) & PoorlyUnderstood(MetazoanPhylogeny))", "all x y.((MetazoanPhylogeny(x) & Phyla(y)) -> PoorlyUnderstood(x,y))", "PhylogenyOfPhyla(Metazoan) & PoorlyUnderstood(PhylogenyOfPhyla)", "(Phylogeny(Metazoan) & PoorlyUnderstood(PhylogenyOfPhyla))", "(MetazoanPhylogeny(phyla) & PoorlyUnderstood(phyla))", "MetazoanPhylogeny (PhylogenyOfPhyla) -PoorlyUnderstood(phyla))", "all x.(MetazoanPhylogeny(x) -> PoorlyUnderstood(x))", "PhylogenyOfPhyla (MetazoanPhylogeny) & PoorlyUnderstood(phyla))", "(MetazoanPhylogeny) & PhylogenyOfPhyla(phylaxis) & PoorlyUnderstood(phylaxis))", "all x y.((MetazoanPhylogeny(x) & Phyla(y)) -> PoorlyUnderstood(x,y))", "PhylogenyOfPhyla(Metazoan)  PoorlyUnderstood(PhylogenyOfPhyla)", "all x.(MetazoanPhylogeny(x) -> PoorlyUnderstood(x))", "MetazoanPhylogeny (PhylogenyOfPhyla) -Ununderstandable(phylo(phylo))", "all x.(MetazoanPhylogeny(x) -> PoorlyUnderstood(x))", "all x.(MetazoanPhylogeny(x) & PoorlyUnderstandsPhylogenyOfPhyla(x))"]}
{"id": "eqasc_validation_798", "nl": "The evolutionary history of metazoas is poorly understood.", "fol": "", "prediction": ["all x.(Metazoa(x) -> PoorlyUnderstoodEvolutionaryHistory(x))", "(UnderstandsEvolutionaryHistoryOfMetazoas(x) & PoorlyUnderstands(x))", "all x y.((Metazoa(x) & EvolutionaryHistory(y)) -> PoorlyUnderstood(x,y))", "all x.(Metazoa(x) -> PoorlyUnderstoodEvolutionaryHistory(x))", "all x.((Metazoa(x) & EvolutionaryHistory(x)) -> PoorlyUnderstood(x))", "(PoorlyUnderstandsEvolutionaryHistory(metazoas)", "all x.(Metazoa(x) -> PoorlyUnderstood(x))", "-(EvolutionaryHistoryOfMetazoas(x))", "(UnderstandsEvolutionaryHistory(metazoas)", "all x.(Metazoa(x) -> PoorlyUnderstandsEvolutionaryHistory(x))", "all x y.((Metazoa(x) & EvolutionaryHistory(y)) -> PoorlyUnderstood(x,y))", "(UnderstandsEvolutionaryHistoryOfMetazoas(x) & PoorlyUnderstands(x))", "exists x.(Metazoas(x) & EvolutionaryHistory(x) & PoorlyUnderstood(x))", "all x.(Metazoa(x) -> PoorlyUnderstood(x))", "all x.(Metazoa(x) -> PoorlyUnderstoodEvolutionaryHistory(x))", "exists x.(Metazoas(x) & EvolutionaryHistory(x) & PoorlyUnderstood(x))"]}
{"id": "eqasc_validation_799", "nl": "An organism's behavior is related to the organism's environment.", "fol": "", "prediction": ["all x y.((Organism(x) & Environment(y)) -> BehaviorRelated(x,y))", "all x.(Organism(x) -> BehaviorRelatedToEnvironment(x))", "all x y.((Organism(x) & Environment(y)) -> BehaviorRelatedTo(x,y))", "all x y z.((Organism(x) & Environment(y) & Behavior(z)) -> RelatedTo(x,z))", "all x.(Organism(x) -> BehaviorRelatedToEnvironment(x))", "all x y.((Organism(x) & Environment(y)) -> BehaviorRelatedTo(x,y))", "all x.(Organism(x) -> RelationshipToEnvironment(x))", "all x y z.((Organism(x) & Environment(y) & Behavior(z)) -> RelativeTo(x,z))", "all x.(OrganismBehavior(x) -> RelationshipToEnvironment(x))", "all x y.((Organism(x) & Environment(y)) -> BehaviorRelated(x,y))", "all x.(Organism(x) -> BehaviorRelatedToEnvironment(x))", "exists x.(OrganismBehavior(x) & RelatedToEnvironment(x))", "all x y z.((Organism(x) & Environment(y) & Behavior(z)) -> Relationship(x,y,z))", "all x.(Organism(x) -> BehaviorRelatedToEnvironment(x))", "all x y.((Organism(x) & Environment(y)) -> BehaviorRelated(x,y))", "exists x.(OrganismBehavior(x) & RelatedToEnvironment(x))"]}
{"id": "eqasc_validation_800", "nl": "Phylogeny may explain the evolutionary part of organism's environment.", "fol": "", "prediction": ["all x y.((Phylogeny(x) & Organism(y)) -> ExplainsEvolution(x,y))", "all x.(Phylogeny(x) -> ExplainsEvolutionaryPartOfOrganismEnvironment(x))", "all x y z.((Phylogeny(x) & EvolutionaryPartOfEnvironment(y) & Organism(z)) -> MayExplain(x,y,z))", "all x.(Phylogeny(x) -> (ExplainsEvolutionaryPartOfOrganismsEnvironment(x)))", "all x y.((Phylogeny(x) & Organism(y)) -> ExplainsEvolution(x,y))", "all x.(Phylogeny(x) -> ExplainsEvolutionaryPartOfEnvironment(x))", "all x y z.((Phylogeny(x) & Organism(y) & EvolutionaryPartOfEnvironment(z)) -> MayExplain(x,y,z))", "all x y.((Phylogeny(x) & Organism(y)) -> MayExplainEvolution(x,y))", "all x.(Phylogeny(x) -> MayExplainEvolutionaryPartOfOrganismsEnvironment(x))", "all x y z.((Phylogeny(x) & EvolutionaryPart(y) & Organism(z)) -> MayExplain(x,y,z))", "all x.(Phylogeny(x) -> (ExplainsEvolution(x) | ExplainsEvolution(x)))", "all x y.((Phylogeny(x) & Organism(y)) -> ExplainsEvolutionaryPart(x,y))", "exists x.(Phylogeny(x) & EvolutionaryPartOfEnvironment(x))", "all x y.((Phylogeny(x) & Organism(y)) -> MayExplainEvolutionaryPart(x,y))", "exists x.(Phylogeny(x) & EvolutionaryPartOfEnvironment(x))", "all x.(Phylogeny(x) -> ExplainsEvolution(x))"]}
{"id": "eqasc_validation_801", "nl": "a group of related organisms is a phyla", "fol": "", "prediction": ["all x.((GroupOfRelatedOrganisms(x) & RelatedOrganisms(x)) -> Phyla(x))", "all x y.((GroupOfRelatedOrganisms(x) & RelatedOrganisms(y)) -> Phyla(x))", "all x.((Organism(x) & RelatedOrganisms(x)) -> Phyla(x))", "all x y z.((Organism(x) & Organism(y) & Related(x,y) & Organism(z) & Related(y)) -> Phyla(x))", "all x.((GroupOfRelatedOrganisms(x) & RelatedOrganisms(x)) -> Phyla(x))", "all x y.((GroupOfRelatedOrganisms(x) & Organism(y) & RelatedOrganism(x,y)) -> Phyla(x))", "all x y.((Organism(x) & RelatedOrganism(y) & RelatedOrganism(x,y)) -> Phyla(x))", "exists x,y,z,w.(Organism(x) & RelatedOrganism(y) & RelatedOrganism(z) & RelatedOrganism(x,z) & RelatedOrganism(x,w)) -> Phyla(x))", "exists x,y,z.(Organism(x) & RelatedOrganism(y) & RelatedOrganism(z) & RelatedOrganism(x,z)) -> Phyla(x))", "all x y z.((GroupOfRelatedOrganisms(x) & Organism(y) & Organism(z) & Related(y,z)) -> Phyla(x))", "all x.((Organism(x) & RelatedOrganism(x)) -> Phyla(x))", "all x.((RelatedOrganisms(x) & RelatedOrganisms(x)) -> Phyla(x))", "all x.((GroupOfRelatedOrganisms(x) & RelatedOrganisms(x)) -> Phyla(x))", "all x.(RelatedOrganisms(x) -> Phyla(x))", "all x y.((GroupOfRelatedOrganisms(x) & RelatedOrganisms(y)) -> Phyla(x))", "all x.((GroupOfRelatedOrganisms(x) & RelatedOrganisms(x)) -> Phyla(x))"]}
{"id": "eqasc_validation_802", "nl": "a speedometer is used for giving a driver feedback on the speed of their vehicle", "fol": "", "prediction": ["all x y.((Speedometer(x) & Driver(y)) -> GivesFeedbackOnSpeed(x,y))", "all x y z.((Speedometer(x) & Driver(y) & Vehicle(z)) -> GivesFeedbackOnSpeed(x,y,z))", "all x.(Speedometer(x) -> (GivesDriverFeedbackOnSpeed(x) & DriverFeedbackOnSpeed(x)))", "all x y.((Speedometer(x) & Driver(y)) -> GivesFeedbackOnSpeed(x,y))", "all x.(Speedometer(x) -> (GivesDriverFeedbackOnSpeed(x) & SpeedOfVehicle(x)))", "all x y z.((Speedometer(x) & Driver(y) & Vehicle(z)) -> GivesFeedbackOnSpeed(x,y,z))", "all x y.((Speedometer(x) & Driver(y)) -> GivesFeedbackOnSpeedOfVehicle(x,y))", "all x y.(Speedometer(x) -> (GivesDriverFeedbackOnSpeed(x,y) & Vehicle(y) & Driver(x)))", "all x.(Speedometer(x) -> GivesDriverFeedbackOnSpeed(x))", "all x y.(Speedometer(x) -> (GivesDriverFeedbackOnSpeed(x,y) & Vehicle(y) & Vehicle(z) & SpeedOfVehicle(x,z)))", "all x.(Speedometer(x) -> (GivesDriverFeedbackOnSpeed(x) & DriverFeedbackOnSpeed(x) & Vehicle(x) & Vehicle(x)))", "all x y z.((Speedometer(x) & Driver(y) & Vehicle(z)) -> GivesFeedbackOnSpeed(x,y,z))", "all x y z.((Speedometer(x) & Driver(y) & Vehicle(z) & GivesFeedbackOnSpeed(x,y,z)) -> Speedometer(x))", "all x.(Speedometer(x) -> (GivesDriverFeedbackOnSpeed(x) & DriverFeedbackOnSpeed(x)))", "all x y.((Speedometer(x) & Driver(y)) -> GivesFeedbackOnSpeed(x,y))", "all x.(Speedometer(x) -> GivesDriverFeedbackOnSpeed(x))"]}
{"id": "eqasc_validation_803", "nl": "Speed is in miles per hour and distance is in miles with yards as a sub-measure.", "fol": "", "prediction": ["all x y.((Speed(x) & Distance(y)) -> (InMilesPerHour(x) & InMiles(y) & Withyards(y)))", "(all x.(Speed(x) -> MilesPerHour(x)) & all y.(Distance(y) -> MilesWithyards(y)))", "all x.(Speed(x) -> (InMilesPerHour(x) & Distance(x) & InMiles(x) & YardsAsSubMeasure(x)))", "(all x y.((Speed(x) & MilesPerHour(y)) -> SpeedIn(x,y)) & ((Distance(x,y) & Yards(x)) -> DistanceIn(x,y)))", "all x y.((Speed(x) & Distance(y)) -> (InMilesPerHour(x) & InMiles(y) & Yards(y)))", "(all x.(Speed(x) -> InMilesPerHour(x)) & all y.(Distance(y) -> InMiles(y)))", "all x.(Speed(x) -> (MilesPerHour(x) & Distance(x) & Yards(x)))", "(all x.(SpeedInMilesPerHour(x) -> DistanceInMiles(x)) & all y.(DistanceInMiles(y) -> YardsSubMeasure(y)))", "(all x.(Speed(x) -> MilesPerHour(x)) & all y.(Distance(y) -> MilesWithyards(y)))", "all x.(Spoilage(x) -> (InMilesPerHour(x) & DistanceInMiles(x) & YardsAsSubMeasure(x)))", "all x y z.((Speed(x) & Distance(y) & Yards(z)) -> (InMilesPerHour(x) & InMiles(y,z)))", "(all x.(Speed(x) -> MilesPerHour(x)) & (Distance(x) -> MilesWithyards(x)))", "(all x y.((Speed(x) & MilesPerHour(x)) -> SpeedIn(x,y)) & ((Distance(x,y) & Yards(y)) -> DistanceIn(x,y)))", "all x.(Speed(x) -> (InMilesPerHour(x) & Distance(x) & InMiles(x) & WithYards(x)))", "all x y.((Speed(x) & Distance(y)) -> (InMilesPerHour(x) & InMiles(y) & HasYards(x)))", "all x y.((Speed(x) & Distance(y)) -> (MilesPerHour(x) & MilesWithyards(y)))"]}
{"id": "eqasc_validation_804", "nl": "Speedometers are used to give a driver feedback on how many miles per hour their vehicle goes.", "fol": "", "prediction": ["all x y.((Speedometer(x) & Driver(y)) -> GivesFeedbackOnMilesPerHour(x,y))", "all x.(Speedometer(x) -> (GivesDriverFeedbackOnMilesPerHour(x) & VehicleGoes(x)))", "all x y z.((Speedometer(x) & Driver(y) & Vehicle(z)) -> (GivesFeedbackOnMilesPerHour(x,y,z)))", "all x y.((Speedometer(x) & Driver(y)) -> GivesFeedbackOnMilesPerHour(x,y))", "all x y.((Speedometer(x) & Driver(y)) -> (GivesFeedbackOnMilesPerHour(x,y) & Vehicle(y)))", "all x y z.((Speedometer(x) & Driver(y) & Vehicle(z)) -> GivesFeedbackOnMilesPerHour(x,y,z))", "all x.(Speedometer(x) -> (GivesDriverFeedbackOnMilesPerHour(x) & VehicleGoes(x)))", "all x.(Speedometer(x) -> (GivesDriverFeedback(x) & HowManyMilesPerHourVehicleGoes(x)))", "all x y.(Speedometer(x) -> (GivesDriverFeedback(x,y) & HowManyMilesPerHour(y)))", "all x.(Spoker(x) -> (GivesDriverFeedbackOnMilesPerHour(x) & VehicleGoes(x)))", "all x y z.((Speedometer(x) & Driver(y) & Vehicle(z)) -> (GivesFeedbackOnMilesPerHour(x,y,z)))", "all x.(Speedometer(x) -> (GiveDriverFeedback(x) & HowManyMilesPerHour(x)))", "all x.(Speedometer(x) -> GivesDriverFeedbackOnMilesPerHour(x))", "all x y.((Speedometer(x) & Driver(y)) -> GivesFeedbackOnMilePerHour(x,y))", "all x.(Speedometer(x) -> (GivesDriverFeedbackOnMilesPerHour(x) & VehicleGoes(x)))", "all x.(Speedometer(x) -> (GivesDriverFeedbackOnMilesPerHour(x) & Driver(x)))"]}
{"id": "eqasc_validation_805", "nl": "Odometers and speedometers measure distance and speed.", "fol": "", "prediction": ["all x.((Odometer(x) | Speedometer(x)) -> (MeasuresDistance(x) & MeasuresSpeed(x)))", "all x y.((Odometer(x) & Speedometer(y)) -> (MeasuresDistance(x) & MeasuresSpeed(y)))", "all x.(Odometer(x) & Speedometer(x)) -> (MeasuresDistance(x) & MeasuresSpeed(x)))", "(all x.(Odometer(x) -> MeasuresDistance(x)) & all y.(Speedometer(y) -> MeasuresSpeed(y)))", "(MeasuresDistanceAndSpeed(odometer) & MeasuresSpeed(odometer))", "all x.((Odometer(x) | Speedometer(x)) -> MeasuresDistanceAndSpeed(x))", "all x y.((Odometer(x) & Speedometer(y)) -> (MeasuresDistance(x) & MeasuresSpeed(y)))", "(all x.(Odometer(x) & all y.(Speedometer(y)) -> MeasuresDistanceAndSpeed(x)))", "all x.(Odometer(x) -> (MeasuresDistance(x) & MeasuresSpeed(x)))", "(all x.(Odometer(x) -> MeasuresDistance(x)) & all y.(Speedometer(y) -> MeasuresSpeed(y)))", "all x.(Odometer(x) & Speedometer(x)) -> (MeasuresDistance(x) & MeasuresSpeed(x)))", "all x y.((Odometer(x) & Speedometer(y)) -> (MeasuresDistance(x) & MeasuresSpeed(y)))", "all x.(Odometer(x) & Speedometer(x) -> (MeasuresDistance(x) & MeasuresSpeed(x)))", "all x.((Odometer(x) | Speedometer(x)) -> MeasuresDistanceAndSpeed(x))", "all x y.((Odometer(x) & Speedometer(y)) -> MeasuresDistanceAndSpeed(x,y))", "(all x.(Odometer(x) -> MeasuresDistance(x)) & all y.(Speedometer(y) -> MeasuresSpeed(y)))"]}
{"id": "eqasc_validation_806", "nl": "a speedometer measures the rate of travel", "fol": "", "prediction": ["all x.(Speedometer(x) -> MeasuresRateOfTravel(x))", "all x y.((Speedometer(x) & TravelRate(y)) -> Measures(x,y))", "all x.(Speedometer(x) -> MeasuresRateOfTravel(x))", "all x y.((Speedometer(x) & TravelRate(y)) -> MeasuresRateOfTravel(x,y))", "all x y z.((Speedometer(x) & TravelRate(y) & TravelRate(z)) -> Measures(x,y,z))", "all x y.(Speedometer(x) -> MeasuresRateOfTravel(x,y))", "all x.(Speedometer(x) -> MeasuresRateOfTravel(x))", "all x y z.((Speedometer(x) & TravelRate(y) & TravelRate(z)) -> Measures(x,y,z))", "all x y.(Speedometer(x) -> MeasuresRateOfTravel(x,y))", "all x.(Speedometer(x) -> MeasuresRateOfTravel(x))", "all x y.(Speedometer(x) & RateOfTravel(y) & Measures(x,y))", "all x.(Speedometer(x) -> MeasuresRateOfTravel(x))", "all x.(Speedometer(x) -> MeasuresSpeedOfTravel(x))", "all x.(Speedometer(x) -> MeasuresRateOfTravel(x))", "all x.(Speedometer(x) -> MeasuresRateOfTravel(x))", "all x.(Speedometer(x) -> MeasuresTravelRate(x))"]}
{"id": "eqasc_validation_807", "nl": "Speed is the measure of motion.", "fol": "", "prediction": ["all x.(Speed(x) -> MeasureOfMotion(x))", "(MeasuresMotion(Speed) & MeasuresMotion(Speed))", "(MeasuresSpeed(Speed) & Motion(Speed))", "all x.(Speed(x) -> MeasureOfMotion(x))", "-MeasuresSpeed(x)", "all x y.((Speed(x) & Motion(y)) -> Measures(x,y))", "all x.(Speed(x) -> MeasuresMotion(x))", "(MeasuresMotion(Speed) -> MeasuresMotion(Speed))", "(MeasuresSpeed(Speed) & MeasuresMotion(Speed,Motion))", "all x y.((Speed(x) & Motion(y)) -> Measures(x,y))", "all x.(Speed(x) -> MeasureOfMotion(x))", "all x.(Speed(x) -> MeasuresMotion(x))", "all x y.((Speed(x) & Motion(y)) -> Measure(x,y))", "All x.(Speed(x) -> MeasuresMotion(x))", "All x.(Speed(x) -> MeasureOfMotion(x))", "All x.(Speed(x) -> MeasureOfMotion(x))"]}
{"id": "eqasc_validation_808", "nl": "a speedometer is used for giving a driver feedback on the measure of motion of their vehicle", "fol": "", "prediction": ["all x y.((Speedometer(x) & Driver(y)) -> GivesFeedbackOnMotion(x,y))", "all x y z.((Speedometer(x) & Driver(y) & Vehicle(z)) -> GivesFeedbackOnMotion(x,y,z))", "all x.(Speedometer(x) -> (GivesDriverFeedbackOnMotion(x) & MeasuresVehicle(x)))", "all x.(Speedometer(x) -> (GivesDriverFeedback(x) & MeasuresMotionOfVehicle(x) & DriverFeedback(x)))", "all x y.((Speedometer(x) & Driver(y)) -> GivesFeedbackOnMotion(x,y))", "all x y z.((Speedometer(x) & Driver(y) & Vehicle(z)) -> GivesFeedbackOnMotion(x,y,z))", "all x y.((Speedometer(x) & Driver(y) & MeasureOfMotion(y,x)) -> GivesFeedbackOnMotion(x,y))", "all x y.(Speedometer(x) -> (GivesDriverFeedback(x,y) & MeasuresMotion(y) & Vehicle(z) & MeasuresMotion(x,z)))", "all x y z.((Speedometer(x) & Driver(y) & Vehicle(z)) -> GivesFeedbackOnMeasureOfMotion(x,y,z))", "all x y z.((Speedometer(x) & Driver(y) & Vehicle(z)) -> (GivesFeedbackOnMotion(x,y,z) & MeasuresMotion(y,z)))", "all x y.((Speedometer(x) & Driver(y)) -> GivesFeedbackOnMotion(x,y))", "all x.(Speedometer(x) -> (GivesDriverFeedbackOnMotion(x) & MeasuresVehicle(x)))", "all x.(Speedometer(x) -> (GivesDriverFeedbackOnMotion(x) & MeasuresVehicleMotion(x)))", "all x.(Speedometer(x) -> GivesDriverFeedbackOnMotion(x))", "all x y z.((Speedometer(x) & Driver(y) & Vehicle(z)) -> GivesFeedback(x,y,z))", "all x.(Speedometer(x) -> GivesDriverFeedbackOnMotion(x))"]}
{"id": "eqasc_validation_809", "nl": "Speedometer now shows maximum speed of 90 mph.", "fol": "", "prediction": ["all x.(Speedometer(x) -> ShowsMaxSpeedOf90(x))", "the Speedometer now shows maximumSpeedOf90mph(x))", "all x y.((Speedometer(x) & Speedometer(y)) -> ShowsMaxSpeed(x,y))", "All x.(Speedometer(x) -> ShowsMaxSpeed(x,90))", "(MaxSpeedometer(Spoison) & NowShowsMaxSpeedOf90(Spoison))", "Speedometer now shows maximumSpeedOf90(x) & -(Speedometer(x) & Speedometer(x)))", "-MaxSpeedometer(x) & Speedometer(x,90))", "Speedometer now shows maximumspeed(x,90)", "-MaxSpeedometer(Spoison)", "all x y.((Speedometer(x) & Speedometer(y)) -> ShowsMaxSpeedOf(x,y))", "(MaxSpeedOf90(Speedometer))", "all x.(Speedometer(x) -> ShowsMaxSpeedOf90mph(x))", "the Speedometer now shows maximumSpeedOf90mph(x)", "All x.(Speedometer(x) -> MaximumSpeed(x,90))", "Speedometer now shows maximumspeedOf90mph(x)", "All x.(Speedometer(x) -> ShowsMaxSpeedOf90MPH(x))"]}
{"id": "eqasc_validation_810", "nl": "speedometer shows the driver the vehicle's MPH", "fol": "", "prediction": ["all x y.((Speedometer(x) & Driver(y)) -> ShowsMPH(x,y))", "all x y z.((Speedometer(x) & Driver(y) & Vehicle(z)) -> ShowsMPH(x,y,z))", "all x.(Speedometer(x) -> ShowsMPH(x,Driver))", "all x y.((Speedometer(x) & Driver(y)) -> ShowsMPH(x,y))", "(MPH(Speedometer) -> ShowsMPH(Driver))", "all x y z.((Speedometer(x) & Driver(y) & Vehicle(z)) -> ShowsMPH(y,z))", "the speedometer shows the driver the vehicle's MPH.", "all x.(Speedometer(x) -> (ShowsMPH(x,Driver) & Vehicle(x)))", "all x.(Speedometer(x) -> ShowsMPH(x,Driver))", "all x y z.((Speedometer(x) & Driver(y) & Vehicle(z)) -> ShowsMPH(x,y,z))", "(SpedometerShowsMPH(Driver) & Vehicle(MPH))", "all x y z.((Speedometer(x) & Driver(y) & Vehicle(z) & ShowsMPH(y,z)) -> ShowsMPH(y,z))", "all x y.((Speedometer(x) & Driver(y)) -> ShowsMPH(x,y))", "all x.(Speedometer(x) -> ShowsDriverMPH(x))", "all x.(Speedometer(x) -> (ShowsMPH(x,Driver) & Vehicle(x)))", "all x y.((Speedometer(x) & Driver(y)) -> ShowsMPH(y,x))"]}
{"id": "eqasc_validation_811", "nl": "Vehicles reduce speed at road bends.", "fol": "", "prediction": ["all x.(Vehicle(x) -> ReducesSpeedAtRoadBends(x))", "all x y.((Vehicle(x) & RoadBend(y)) -> ReducesSpeedAt(x,y))", "all x.((Vehicle(x) & RoadBend(x)) -> ReducesSpeedAt(x,y))", "all x y z.((Vehicle(x) & RoadBend(y) & RoadBend(z)) -> ReducesSpeedAt(x,y,z))", "all x.(Vehicle(x) -> ReducesSpeedAtRoadBends(x))", "all x y.((Vehicle(x) & RoadBend(y)) -> ReducesSpeedAt(x,y))", "(all x.(RoadBend(x) -> ReducesSpeed(x)))", "all x.((Vehicle(x) & RoadBend(x)) -> ReduceSpeedAt(x,y))", "all x y z.((Vehicle(x) & RoadBend(y) & RoadBend(z)) -> ReducesSpeedAt(x,y,z))", "all x y.((Vehicle(x) & RoadBend(y)) -> ReducesSpeedAt(x,y))", "all x.(Vehicle(x) -> ReducesSpeedAtRoadBends(x))", "all x.((Vehicle(x) & RoadBend(x)) -> ReduceSpeedAt(x,y))", "all x.(Vehicle(x) -> ReduceSpeedAtRoadBends(x))", "all x y.((Vehicle(x) & RoadBend(y)) -> ReducesSpeedAt(x,y))", "all x.(Vehicle(x) -> ReducesSpeedAtRoadBends(x))", "all x y.((Vehicle(x) & RoadBend(y)) -> ReducesSpeedAt(x,y))"]}
{"id": "eqasc_validation_812", "nl": "a speedometer can help a driver navigate road bends", "fol": "", "prediction": ["all x y.((Speedometer(x) & Driver(y)) -> NavigatesRoadBends(x,y))", "all x y z.((Speedometer(x) & Driver(y) & RoadBend(z)) -> Navigates(x,y,z))", "all x.(Speedometer(x) -> HelpsDriverNavigateRoadBends(x))", "all x y.((Speedometer(x) & Driver(y)) -> NavigatesRoadBends(x,y))", "all x y z.((Speedometer(x) & Driver(y) & RoadBend(z)) -> HelpsNavigate(x,y,z))", "all x.(Speedometer(x) -> (HelpsDriverNavigateRoadBends(x) & HelpsDriverNavigateRoadBends(x)))", "all x.(Speedometer(x) -> NavigatesRoadBends(x))", "all x y.(Speedometer(x) -> (HelpsDriverNavigateRoadBends(x) & HelpsDriverNavigateRoadBends(y)))", "all x y z.((Speedometer(x) & Driver(y) & RoadBend(z) & Navigate(y,z)) -> CanHelp(x,y,z))", "all x y.((Speedometer(x) & Driver(y)) -> NavigatesRoadBends(x,y))", "all x y.((Speedometer(x) & Driver(y)) -> HelpsNavigateRoadBends(x,y))", "all x y.((Speedometer(x) & Driver(y) & NavigatesRoadBends(y,x)) -> HelpsNavigate(x,y))", "all x.(Speedometer(x) -> HelpsDriverNavigateRoadBends(x))", "all x y z.((Speedometer(x) & Driver(y) & RoadBends(z)) -> Navigates(x,y,z))", "all x.(Speedometer(x) -> NavigateRoadBends(x))", "all x.(Speedometer(x) -> CanHelpDriverNavigateRoadBends(x))"]}
{"id": "eqasc_validation_813", "nl": "Speed is the magnitude of velocity.", "fol": "", "prediction": ["all x.(Speed(x) -> MagnitudeOfVelocity(x))", "(MagnitudeOfVelocity(Speed))", "(MajorityOfVelocity(Speed))", "all x.(Speed(x) -> MagnitudeOfVibration(x))", "all x y.((Speed(x) & Magnitude(y)) -> Vulnerability(x,y))", "(MagnitudeOfVelocity(Speed))", "(MagnitudeOfVelocity(Speed) -> MagnitudeOfVelocity(Speed))", "all x y.((Speed(x) & MagnitudeOfVelocity(y)) -> Speed(x,y))", "all x.(Speed(x) -> MagnitudeOfVelocity(x))", "all x y.((Speed(x) & Vulnerability(y)) -> Magnitude(x,y))", "all x.(Speed(x) -> MagnitudeOfVibration(x))", "All x.(Speed(x) -> MagnitudeOfVelocity(x))", "all x.(Speed(x) -> MagnitudeOfVelocity(x))", "all x.(Speed(x) -> MagnitudeOfVibration(x))", "All x.(Speed(x) -> MagnitudeOfVibration(x))", "All x.(Speed(x) -> MagnitudeOfVelocity(x))"]}
{"id": "eqasc_validation_814", "nl": "A speedometer is used for giving feedback on the velocity of a vehicle.", "fol": "", "prediction": ["all x y.((Speedometer(x) & Vehicle(y)) -> GivesFeedbackOnVelocity(x,y))", "all x.(Speedometer(x) -> (GivesFeedbackOnVelocity(x) & Vehicle(x)))", "all x y z.((Speedometer(x) & Vehicle(y) & Vehicle(z)) -> GivesFeedbackOnVelocity(x,y,z))", "all x.(Speedometer(x) -> GivesFeedbackOnVelocity(x))", "all x y.((Speedometer(x) & Vehicle(y)) -> GivesFeedbackOnVelocity(x,y))", "all x.(Speedometer(x) -> (GivesFeedbackOnVelocity(x) & Vehicle(x)))", "all x y z.((Speedometer(x) & Vehicle(y) & Vehicle(z)) -> GivesFeedbackOnVelocity(x,y,z))", "all x y.(Speedometer(x) -> (GivesFeedbackOnVelocity(x,y) & Vehicle(y)))", "all x y.((Speedometer(x) & Vehicle(y)) -> GivesFeedbackOnVelocity(x,y))", "all x.(Speedometer(x) -> GivesFeedbackOnVelocity(x))", "all x y z.((Speedometer(x) & Vehicle(y) & Vehicle(z)) -> GivesFeedbackOnVelocity(x,y,z))", "all x.(Speedometer(x) -> (GivesFeedbackOnVelocity(x) & Vehicle(x)))", "all x.(Speedometer(x) -> (GivesFeedbackOnVelocity(x) & Vehicle(x)))", "all x y.((Speedometer(x) & Vehicle(y)) -> GivesFeedbackOnVelocity(x,y))", "all x.(Speedometer(x) -> GivesFeedbackOnVelocityOfVehicle(x))", "exists x.(Speedometer(x) & GivesFeedbackOnVelocity(x))"]}
{"id": "eqasc_validation_815", "nl": "Vehicle speed is checked by radar.", "fol": "", "prediction": ["all x.(VehicleSpeedCheckedByRadar(x) -> CheckedBy(x))", "all x y.((VehicleSpeed(x) & Radar(y)) -> CheckedBy(x,y))", "all x.(VehicleSpeed(x) -> CheckedByRadar(x))", "(CheckedByRadar(vehicleSpeed)", "(CheckedByRadar(VehicleSpeed)", "all x y.((VehicleSpeed(x) & Radar(y)) -> CheckedBy(x,y))", "all x.(VehicleSpeedCheckedByRadar(x) -> CheckedBy(x))", "(CheckedVehicleSpeed(Vehicle) & Radar(Vehicle))", "all x.(VehicleSpeed(x) -> CheckedByRadar(x))", "all x y.((VehicleSpeed(x) & Radar(y)) -> Checked(x,y))", "(CheckedByRadar(vehicleSpeed)", "all x.(VehicleSpeedCheckedByRadar(x) -> CheckedBy(x))", "all x y.((VehicleSpeed(x) & Radar(y)) -> CheckedBy(x,y))", "all x.(VehicleSpeed(x) -> CheckedByRadar(x))", "all x.(VehicleSpeedCheckedByRadar(x) -> CheckedByRadar(x))", "All x.(VehicleSpeed(x) -> CheckedByRadar(x))"]}
{"id": "eqasc_validation_816", "nl": "A speedometer should give the same reading as radar.", "fol": "", "prediction": ["all x y.((Speedometer(x) & Radar(y)) -> GivesSameReading(x,y))", "all x.(Speedometer(x) -> SameReading(x,Radar))", "all x y.((Speedometer(x) & Radar(y)) -> SameReading(x,y))", "all x y z.((Speedometer(x) & Radar(y) & Reading(z)) -> GivesSameReading(x,y,z))", "all x.(Speedometer(x) -> SameReadingAsRadar(x))", "(SimultaneousReading(Speedometer) & SameReading(Speedometer,Radar))", "all x y.((Speedometer(x) & Radar(y)) -> GivesSameReading(x,y))", "all x.(Speedometer(x) -> GivesSameReadingAsRadar(x))", "all x.(Speedometer(x) -> SameReading(x,radio))", "all x y.((Speedometer(x) & Radar(y)) -> SameReading(x,y))", "all x.(Speedometer(x) -> GivesSameReadingAsRadar(x))", "all x y.((Speedometer(x) & Radar(y)) -> GivesSameReading(x,y))", "all x.(Speedometer(x) -> SameReadingAsRadar(x))", "exists x.(Speedometer(x) & GivesSameReading(x,Radar))", "all x y.((Speedometer(x) & Radar(y)) -> SameReading(x,y))", "all x.(Speedometer(x) -> SameReading(x))"]}
{"id": "eqasc_validation_817", "nl": "an odometer is used to measures distances ", "fol": "", "prediction": ["all x y.((Odometer(x) & Distance(y)) -> Measures(x,y))", "all x.(Odometer(x) -> MeasuresDistances(x))", "all x y z.((Odometer(x) & Distance(y) & Distance(z)) -> Measures(x,y,z))", "all x y.((Odometer(x) & Distance(y)) -> Measures(x,y))", "all x.(Odometer(x) -> MeasuresDistances(x))", "all x y.((Odometer(x) & MeasuresDistances(x)) -> UsedToMeasure(x,y))", "all x y z.((Odometer(x) & DistanceMeasurement(y) & DistanceMeasurement(z)) -> UsedToMeasure(x,y,z))", "all x.((Odometer(x) & MeasuresDistances(x)) -> UsedToMeasureDistances(x))", "all x y z.((Odometer(x) & Distance(y) & Distance(z)) -> Measures(x,y,z))", "all x.(Odometer(x) -> MeasuresDistances(x))", "all x.(Odometer(x) -> UsedToMeasureDistances(x))", "exists x.(ODometer(x) & MeasuresDistances(x))", "all x y.((Odometer(x) & Distance(y)) -> Measures(x,y))", "all x y.((Odometer(x) & MeasuresDistances(y)) -> UsedToMeasure(x,y))", "all x.(Odometer(x) -> MeasuresDistances(x))", "all x.(Odometer(x) -> MeasuresDistances(x))"]}
{"id": "eqasc_validation_818", "nl": "Average vehicle speed rises by only 0.3 miles per hour.", "fol": "", "prediction": ["all x.((VehicleSpeed(x) & Average(x,0.3)) -> Rises(x))", "all x.(AverageVehicleSpeed(x) -> (Rises(x,0.3) & Rises(x,0.3)))", "all x y.((AverageVehicleSpeed(x) & MilesPerHour(y)) -> Rises(x,y))", "averageVehicleSpeedRises(a) -0.3MilesPerHour(b))", "all x.((VehicleSpeed(x) & Average(x,0.3)) -> Rises(x))", "averagevehicleSpeedRises(a) -> (-0.3MilesPerHour(a)))", "all x.(VehicleSpeed(x) -> (Rises(x,0.3) & -Rises(x,0.3)))", "all x.(AverageVehicleSpeed(x) -> RisesBy(x,0.3))", "all x.(AverageVehicleSpeedRises(x,0.3) -> -Rises(x,0.3))", "all x y.((AverageVehicleSpeed(x) & MilesPerHour(y)) -> Rises(x,y))", "averageVehicleSpeedRise(v) 0.3MPH(v))", "all x y.((VehicleSpeed(x) & Average(y) & -0.3MPH(x)) -> Rises(x,y))", "all x.((VehicleSpeed(x) & Average(x,0.3)) -> Rises(x))", "All x.(VehicleSpeed(x) -> RisesBy(x,0.3))", "all x y.((AverageVehicleSpeed(x) & MilesPerHour(y)) -> RisesBy(x,y))", "All x.(AverageVehicleSpeedRisesBy(x,0.3)"]}
{"id": "eqasc_validation_819", "nl": "a speedometer measures miles per hour", "fol": "", "prediction": ["all x.(Speedometer(x) -> MeasuresMilesPerHour(x))", "all x.(Speedometer(x) -> MeasuresMilesPerHour(x))", "all x y.((Speedometer(x) & MilesPerHour(y)) -> Measures(x,y))", "all x y z.((Speedometer(x) & MilesPerHour(y) & Hour(z)) -> Measures(x,y,z))", "all x y.((Speedometer(x) & MilePerHour(y)) -> Measures(x,y))", "all x y.(Speedometer(x) -> MeasuresMilesPerHour(x,y))", "all x.(Speedometer(x) -> MeasuresMilesPerHour(x))", "all x y z.((Speedometer(x) & MilesPerHour(y) & Hour(z)) -> Measures(x,y,z))", "all x y.(Speedometer(x) -> MeasuresMilesPerHour(x,y))", "all x y.(Speedometer(x) & MeasuresMilesPerHour(x,y))", "all x.(Speedometer(x) -> MeasuresMilesPerHour(x))", "all x.(Speedometer(x) -> MeasuresMilesPerHour(x))", "all x.(Speedometer(x) -> MeasuresMilesPerHours(x))", "all x.(Speedometer(x) -> MeasuresMilesPerHour(x))", "all x.(Speedometer(x) -> MeasuresMilesPerHour(x))", "all x.(Speedometer(x) -> MeasuresMilesPerHours(x))"]}
{"id": "eqasc_validation_820", "nl": "A driver feeds feedback on the speed of their car with a speedometer.", "fol": "", "prediction": ["all x y.((Driver(x) & Car(y)) -> FeedsFeedbackOnSpeedWithSpeedometer(x,y))", "all x y z.((Driver(x) & Car(y) & Speedometer(z)) -> FeedsFeedbackOnSpeed(x,y,z))", "all x y.((Driver(x) & Car(y)) -> FeedsFeedbackOnSpeed(x,y))", "all x y z.((Driver(x) & Car(y) & Speedometer(z)) -> FeedsFeedback(x,y,z))", "all x.(Driver(x) -> FeedsFeedbackOnSpeed(x))", "all x.((Driver(x) & Car(y)) -> FeedsFeedbackOnSpeedWithSpeedometer(x,y))", "all x.(Driver(x) -> FeedsFeedbackOnSpeedWithSpeedometer(x))", "all x y.((Driver(x) & Car(y)) -> FeedsFeedback(x,y))", "all x y.((Driver(x) & Car(y) & FeedsFeedback(x,y)) -> Speedometer(x))", "all x y z.((Driver(x) & Car(y) & Speedometer(z)) -> FeedsFeedbackOnSpeed(x,y,z))", "all x y z.((Driver(x) & Car(y) & Speedometer(z) & FeedsFeedback(x,y,z)) -> Speedometer(x))", "all x.(Driver(x) -> FeedsFeedbackOnSpeed(x,car,speedometer))", "all x y z.((Driver(x) & Car(y) & Speedometer(z)) -> FeedsFeedbackOnSpeed(x,y,z))", "exists x.(Driver(x) & FeedsFeedbackOnSpeed(x) & Car(x))", "all x y.((Driver(x) & Car(y)) -> FeedsFeedbackOnSpeedWithSpeedometer(x,y))", "exists x.(Driver(x) & FeedsFeedbackOnSpeed(x) & Car(x))"]}
{"id": "eqasc_validation_821", "nl": "A speedometer tells the driver how fast the vehicle is going ", "fol": "", "prediction": ["all x y.((Speedometer(x) & Driver(y)) -> TellsHowFastVehicleGoing(x,y))", "all x y z.((Speedometer(x) & Driver(y) & Vehicle(z)) -> TellsFast(x,y,z))", "all x.(Speedometer(x) -> TellsDriverHowFastVehicleGoing(x))", "all x y.((Speedometer(x) & Driver(y)) -> TellsFastVehicle(x,y))", "all x.(Speedometer(x) -> (TellsDriverHowFastVehicleGoing(x) & TellsDriverFastVehicle(x)))", "all x y z.((Speedometer(x) & Driver(y) & Vehicle(z)) -> TellsHowFast(x,y,z))", "all x y z.((Speedometer(x) & Driver(y) & Vehicle(z) & Tells(x,y,z)) -> FastGoing(y,z))", "all x y.((Speedometer(x) & Driver(y)) -> TellsHowFastVehicleGoes(x,y))", "all x.(Speedometer(x) -> (TellsDriverHowFastVehicleGoing(x) & TellsDriverHowFastVehicleGoing(x)))", "all x y.(Speedometer(x) -> (TellsDriver(x,y) & HowFastVehicleGoing(x,y)))", "all x.(Speedometer(x) -> TellsDriverHowFastVehicleGoes(x))", "all x y.((Speedometer(x) & Driver(y)) -> TellsFastVehicleGoing(x,y))", "all x.(Speedometer(x) -> (TellsDriverHowFastVehicleGoing(x) & DriverHowFastVehicleGoing(x)))", "all x y z.((Speedometer(x) & Driver(y) & Vehicle(z)) -> TellsFast(x,y,z))", "all x y z.((Speedometer(x) & Driver(y) & Vehicle(z) & Tells(x,y)) -> FastGoing(y,z))", "all x.(Speedometer(x) -> TellsDriverHowFastVehicleGoing(x))"]}
{"id": "eqasc_validation_822", "nl": "Certainly, no driver wants to get a speeding ticket.", "fol": "", "prediction": ["all x.((Driver(x) & -WantsSpeedingTicket(x)) -> -WantsSpeedingTicket(x))", "-(Driver(x) & WantsSpeedingTicket(x))", "Certainly, noDriverWantsToGetSpeedingTicket(x)", "all x.((Driver(x) & -WantsSpeedingTicket(x)) -> -WantsSpeedingTicket(x))", "(all x.((Driver(x) & SpeedingTicket(x)) -> -WantsToGet(x,y)))", "all x y.((Driver(x) & Driver(y)) -> -WantsSpeedingTicket(x,y))", "all x.(Driver(x) -> -WantsSpeedingTicket(x))", "Certainly, noDriverWantsToGetSpeedingTicket(x)", "(-WantsSpeedingTicket(driver))", "Certainly, noDriverWantsSpeedingTicket(x)", "all x.((Driver(x) & -WantsSpeedingTicket(x)) -> -WantsSpeedingTicket(x))", "-exists x.(Driver(x) & WantsSpeedingTicket(x))", "all x.(NoDriverWantsSpeedingTicket(x) -> -WantsSpeedingTicket(x))", "exists x.(Driver(x) & -WantsSpeedingTicket(x))", "all x.((Driver(x) & -WantsSpeedingTicket(x)) -> -WantsSpeedingTicket(x))", "all x.((Driver(x) & -WantsSpeedingTicket(x)) -> -WantsSpeedingTicket(x))"]}
{"id": "eqasc_validation_823", "nl": "A driver uses a speedometer to avoid getting a ticket.", "fol": "", "prediction": ["all x y.((Driver(x) & Speedometer(y)) -> UsesToAvoidTicket(x,y))", "all x.(Driver(x) -> UsesSpeedometerToAvoidTicket(x))", "all x y z.((Driver(x) & Speedometer(y) & Ticket(z)) -> UsesToAvoid(x,y,z))", "all x y.((Driver(x) & Speedometer(y)) -> AvoidsTicket(x,y))", "all x.((Driver(x) & UsesSpeedometer(x)) -> AvoidsTicket(x))", "all x y z.((Driver(x) & Speedometer(y) & Ticket(z) & Uses(x,y)) -> Avoids(x,z))", "all x.(Driver(x) -> UsesSpeedometerToAvoidTicket(x))", "all x y.((Driver(x) & Speedometer(y)) -> UsesToAvoidTicket(x,y))", "all x y.((Driver(x) & Speedometer(y) & Ticket(z)) -> UsesToAvoid(x,y,z))", "exists x.(Driver(x) & UsesSpeedometer(x) & AvoidsTicket(x))", "all x y z.((Driver(x) & Speedometer(y) & Tickets(z)) -> UsesToAvoid(x,y,z))", "all x.((Driver(x) & UsesSpeedometer(x)) -> AvoidsTicket(x))", "all x.(Driver(x) -> (UsesSpeedometer(x) & AvoidsTicket(x)))", "exists x.(Driver(x) & UsesSpeedometer(x) & AvoidsTicket(x))", "all x y.((Driver(x) & Speedometer(y)) -> UsesToAvoidTicket(x,y))", "exists x.(Driver(x) & UsesSpeedometer(x) & AvoidsTicket(x))"]}
{"id": "eqasc_validation_824", "nl": "Excessive speed is a factor in many accidents.", "fol": "", "prediction": ["all x.(ExcessiveSpeed(x) -> FactorInManyAccidents(x))", "all x y.((ExcessiveSpeed(x) & Accident(y)) -> FactorIn(x,y))", "all x.(ExcessiveSpeed(x) -> FactorInManyAccidents(x))", "all x y z.((ExcessiveSpeed(x) & Accident(y) & Accident(z)) -> FactorIn(x,y,z))", "all x y.((ExcessiveSpeed(x) & Accident(y)) -> FactorIn(x,y))", "all x.((ExcessiveSpeed(x) & InManyAccidents(x)) -> FactorIn(x,y))", "all x.(ExcessiveSpeed(x) -> FactorInManyAccidents(x))", "exists x.(SpeedFactor(x) & Excessive(x) & InManyAccidents(x))", "all x y.((ExcessiveSpeed(x) & Accident(y)) -> FactorIn(x,y))", "all x.(ExcessiveSpeed(x) -> FactorInManyAccidents(x))", "all x.(ExcessiveSpeed(x) -> ManyAccidents(x))", "all x y.((ExcessiveSpeed(x) & Accident(y)) -> FactorIn(x,y))", "all x.(ExcessiveSpeed(x) -> InManyAccidents(x))", "all x y.((ExcessiveSpeed(x) & Accident(y)) -> FactorIn(x,y))", "all x.(ExcessiveSpeed(x) -> FactorInManyAccidents(x))", "all x y.((ExcessiveSpeed(x) & Accident(y)) -> FactorIn(x,y))"]}
{"id": "eqasc_validation_825", "nl": "A speedometer can help prevent accidents. ", "fol": "", "prediction": ["all x.(Speedometer(x) -> HelpsPreventAccidents(x))", "all x y.((Speedometer(x) & Accident(y)) -> CanHelpPrevent(x,y))", "all x.(Speedometer(x) -> CanHelpPreventAccidents(x))", "all x.(Speedometer(x) -> HelpsPreventAccidents(x))", "all x y.((Speedometer(x) & Accident(y)) -> HelpsPrevent(x,y))", "all x.(Speedometer(x) -> CanHelpPreventAccidents(x))", "all x y.(Speedometer(x) -> HelpsPreventAccidents(x,y))", "all x y.((Speedometer(x) & Accident(y)) -> CanHelpPrevent(x,y))", "all x.(Speedometer(x) -> HelpsPreventAccidents(x))", "all x.(Speedometer(x) -> PreventsAccidents(x))", "all x y.((Speedometer(x) & Accident(y)) -> HelpsPrevent(x,y))", "all x.(Speedometer(x) -> CanHelpPreventAccidents(x))", "all x.(Speedometer(x) -> CanPreventAccidents(x))", "exists x.(Speedometer(x) & PreventsAccidents(x))", "all x.(Speedometer(x) -> HelpsPreventAccidents(x))", "exists x.(Speedometer(x) & HelpsPreventAccidents(x))"]}
{"id": "eqasc_validation_826", "nl": "a speedometer is used for giving a driver feedback on the speed of their truck", "fol": "", "prediction": ["all x y.((Speedometer(x) & Driver(y)) -> GivesFeedbackOnSpeed(x,y))", "all x y z.((Speedometer(x) & Driver(y) & Truck(z)) -> GivesFeedbackOnSpeed(x,y,z))", "all x.(Speedometer(x) -> (GivesDriverFeedbackOnSpeed(x) & DriverFeedbackOnSpeed(x)))", "all x y.((Speedometer(x) & Driver(y)) -> GivesFeedbackOnSpeedOfTruck(x,y))", "all x y z.((Speedometer(x) & Driver(y) & Truck(z)) -> GivesFeedbackOnSpeed(x,y,z))", "all x.(Speedometer(x) -> (GivesDriverFeedbackOnSpeed(x) & Truck(x)))", "all x y.(Speedometer(x) -> (GivesDriverFeedbackOnSpeedOfTruck(x,y) & DriverFeedbackOnSpeed(y,x)))", "all x y.((Speedometer(x) & Driver(y)) -> GivesFeedbackOnSpeed(x,y))", "all x.(Speedometer(x) -> (GivesDriverFeedbackOnSpeed(x) & DriverFeedbackOnSpeed(x) & Truck(x) & DriverFeedbackOnSpeed(x)))", "all x.(Speedometer(x) -> GivesDriverFeedbackOnSpeed(x))", "all x y z.((Speedometer(x) & Driver(y) & Truck(z) & GivesFeedbackOnSpeed(x,y,z)) -> Speedometer(x))", "all x y z.((Speedometer(x) & Driver(y) & Truck(z)) -> GivesFeedbackOnSpeed(x,y,z))", "all x y.((Speedometer(x) & Driver(y)) -> GivesFeedbackOnSpeedOfTruck(x,y))", "all x.(Speedometer(x) -> (GivesDriverFeedbackOnSpeed(x) & DriverFeedbackOnSpeed(x)))", "all x.(Speedometer(x) -> GivesDriverFeedbackOnSpeedOfTruck(x))", "all x y z.((Speedometer(x) & Driver(y) & Truck(z) & GivesFeedbackOnSpeed(x,y,z)) -> Speedometer(x))"]}
{"id": "eqasc_validation_827", "nl": "a polar bear requires a cold environment", "fol": "", "prediction": ["all x.(PolarBear(x) -> RequiresColdEnvironment(x))", "all x.((PolarBear(x) & ColdEnvironment(x)) -> Requires(x,y))", "all x y.((PolarBear(x) & ColdEnvironment(y)) -> Requires(x,y))", "all x.(PolarBear(x) -> RequiresColdEnvironment(x))", "all x y z.((PolarBear(x) & ColdEnvironment(y) & Environment(z)) -> Requires(x,y,z))", "all x y.((PolarBear(x) & ColdEnvironment(y)) -> Requires(x,y))", "all x.((PolarBear(x) & ColdEnvironment(x)) -> Requires(x,y))", "all x.(PositiveBear(x) -> RequiresColdEnvironment(x))", "all x y.((PolarBear(x) & ColdEnvironment(y)) -> Requires(x,y))", "all x.(PolarBear(x) -> RequiresColdEnvironment(x))", "all x y z.((PolarBear(x) & ColdEnvironment(y) & Environment(z)) -> Requires(x,y,z))", "all x.((PolarBear(x) & ColdEnvironment(x)) -> Requires(x,y))", "all x y.((PolarBear(x) & ColdEnvironment(y)) -> Requires(x,y))", "exists x.(PolarBear(x) & ColdEnvironment(x))", "all x.(PolarBear(x) -> RequiresColdEnvironment(x))", "all x y.((PolarBear(x) & ColdEnvironment(y)) -> Requires(x,y))"]}
{"id": "eqasc_validation_828", "nl": "Polar bears grow fur to survive in the cold.", "fol": "", "prediction": ["all x.(PolarBear(x) -> GrowsFurToSurviveInCold(x))", "all x y.((PolarBear(x) & Fur(y)) -> GrowsToSurviveInCold(x,y))", "all x.(PolarBear(x) -> (GrowsFur(x) & SurvivesInCold(x)))", "all x.(PolarBear(x) -> GrowsFurToSurviveInCold(x))", "(GrowsFurToSurviveInCold(polarBear))", "all x y.((PolarBear(x) & Fur(y)) -> GrowsToSurviveInCold(x,y))", "all x y z.((PolarBear(x) & Fur(y) & Cold(z)) -> GrowsToSurvive(x,y,z))", "all x y.((PolarBear(x) & Cold(y)) -> GrowsFurToSurvive(x,y))", "all x.(PolarBear(x) -> (GrowsFur(x) & SurvivesInCold(x)))", "all x.(PolarBear(x) -> GrowsFur(x))", "all x.(PaloalBear(x) -> GrowsFurToSurviveInCold(x))", "all x.((PolarBear(x) & GrowsFur(x)) -> SurvivesInCold(x))", "all x y.((PolarBear(x) & Fur(y)) -> GrowsToSurviveInCold(x,y))", "all x.(PolarBear(x) -> GrowsFurToSurviveInCold(x))", "all x.(PolarBear(x) -> (GrowsFur(x) & SurvivesInCold(x)))", "all x y.((PolarBear(x) & Cold(y)) -> GrowsFur(x,y))"]}
{"id": "eqasc_validation_829", "nl": "A polar bear grows fur to survive in its environment", "fol": "", "prediction": ["all x.(PolarBear(x) -> GrowsFurToSurvive(x))", "all x y.((PolarBear(x) & Fur(y)) -> GrowsToSurvive(x,y))", "all x y z.((PolarBear(x) & Fur(y) & Environment(z)) -> GrowsToSurvive(x,y,z))", "all x.((PolarBear(x) & GrowsFur(x)) -> SurvivesInEnvironment(x))", "all x.(PolarBear(x) -> GrowsFurToSurviveInEnvironment(x))", "all x y.((PolarBear(x) & Fur(y)) -> GrowsToSurviveInEnvironment(x,y))", "all x y z.((PolarBear(x) & Fur(y) & Environment(z)) -> GrowsToSurvive(x,y,z))", "all x.(PotoralBear(x) -> GrowsFurToSurvive(x))", "all x.((PolarBear(x) & GrowsFur(x)) -> SurvivesInEnvironment(x))", "all x y.((PolarBear(x) & Environment(y)) -> GrowsFurToSurvive(x,y))", "all x.(PolarBear(x) -> GrowsFurToSurvive(x))", "all x y z.((PolarBear(x) & Fur(y) & Environment(z)) -> GrowsToSurvive(x,y,z))", "exists x.(PolarBear(x) & GrowsFur(x) & SurvivesInEnvironment(x))", "all x.(PolarBear(x) -> GrowsFurToSurviveInEnvironment(x))", "all x y.((PolarBear(x) & Fur(y)) -> GrowsToSurvive(x,y))", "all x.((PolarBear(x) & GrowsFur(x)) -> SurvivesInEnvironment(x))"]}
{"id": "eqasc_validation_830", "nl": "Polar bears primarily eat seals.", "fol": "", "prediction": ["all x.(PolarBear(x) -> EatsSeals(x))", "all x y.((PolarBear(x) & Seal(y)) -> Eats(x,y))", "all x.(PolarBear(x) -> EatsSeals(x))", "(all x.(PolarBear(x) -> EatsSeals(x)))", "all x.(PolarBear(x) -> PrimarilyEatsSeals(x))", "all x y.((PolarBear(x) & Seal(y)) -> Eats(x,y))", "all x.(PolarBear(x) -> EatsSeals(x))", "all x y.((PolarBear(x) & Seal(y)) -> Eats(x,y))", "(all x.(PolarBear(x) -> EatsSeals(x)))", "all x.(PolarBear(x) -> PrimarilyEatsSeals(x))", "all x.(PolarBear(x) -> EatsSeals(x))", "all x y.((PolarBear(x) & Seal(y)) -> Eats(x,y))", "all x.(PlasticBear(x) -> EatsSeals(x))", "all x.(PolarBear(x) -> EatsSeals(x))", "all x y.((PolarBear(x) & Seal(y)) -> Eats(x,y))", "all x.(PolarBear(x) -> EatsSeals(x))"]}
{"id": "eqasc_validation_831", "nl": "Seals live in a cold environment.", "fol": "", "prediction": ["all x.(Seal(x) -> LivesInColdEnvironment(x))", "all x y.((Seal(x) & ColdEnvironment(y)) -> LivesIn(x,y))", "all x.(Seal(x) -> LivesInColdEnvironment(x))", "all x y.((Seal(x) & ColdEnvironment(y)) -> LivesIn(x,y))", "all x y z.((Seal(x) & ColdEnvironment(y) & Environment(z)) -> LivesIn(x,y,z))", "all x.(Seal(x) -> LivesInColdEnvironment(x))", "all x y.((Seal(x) & ColdEnvironment(y)) -> LivesIn(x,y))", "all x.(Seal(x) -> LivesInColdEnvironment(x))", "all x.(Seal(x) -> LivesInColdEnvironment(x))", "all x y.((Seal(x) & ColdEnvironment(y)) -> LivesIn(x,y))", "all x.(Seal(x) -> LivesInColdEnvironment(x))", "exists x.(Seal(x) & ColdEnvironment(x))", "all x y.((Seal(x) & ColdEnvironment(y)) -> LivesIn(x,y))", "all x.(Seal(x) -> LivesInColdEnvironment(x))", "exists x.(Salmon(x) & ColdEnvironment(x))", "all x.(Seal(x) -> LivesInColdEnvironment(x))"]}
{"id": "eqasc_validation_832", "nl": "Polar bears have two layers of fur for further protection from the cold.", "fol": "", "prediction": ["all x.(PolarBear(x) -> HasTwoLayersOfFur(x))", "all x.(PolarBear(x) -> (HasTwoLayersOfFur(x) & ForColdProtection(x)))", "all x y.((PolarBear(x) & Fur(y)) -> HasTwoLayers(x,y))", "(HasTwoLayersOfFur(polarBear) & ForColdProtection(polarBear))", "(Fur(polar bear) & Fur(polar bear) & Fur(polar bear,cold))", "all x y z.((PolarBear(x) & Fur(y) & Fur(z)) -> HasTwoLayersForProtectionFromCold(x,y,z))", "all x y.((PolarBear(x) & Fur(y)) -> HasTwoLayersForProtectionFromCold(x,y))", "all x.(PolarBear(x) -> HasTwoLayersOfFur(x))", "all x.(PolarBear(x) -> (HasTwoLayersOfFur(x) & ProtectsFromCold(x)))", "all x y.((PolarBear(x) & Fur(y)) -> (HasTwoLayers(x,y) & ForColdProtection(x)))", "all x.(PaloalBear(x) -> HasTwoLayersOfFur(x))", "all x.(PolarBear(x) -> (HasTwoLayersOfFur(x) & ForColdProtection(x)))", "all x.(PolarBear(x) -> (HasTwoLayersOfFur(x) & ForColdProtection(x)))", "all x.(PolarBear(x) -> HasTwoLayersOfFur(x))", "all x y.((PolarBear(x) & Fur(y)) -> HasTwoLayers(x,y))", "all x.(PolarBear(x) -> HasTwoLayerOfFur(x))"]}
{"id": "eqasc_validation_833", "nl": "Polar bears have two layers of fur to live in their environment", "fol": "", "prediction": ["all x.(PolarBear(x) -> (HasTwoLayersOfFur(x) & LivesInEnvironment(x)))", "all x y.((PolarBear(x) & Fur(y)) -> HasTwoLayers(x,y))", "all x y z.((PolarBear(x) & Fur(y) & Fur(z)) -> (HasTwoLayers(x,y,z) & LivesInEnvironment(x)))", "all x y.((PolarBear(x) & Fur(y)) -> (HasTwoLayers(x,y) & LivesInEnvironment(x)))", "(exists x.(PolarBear(x) & FurLayer(x,2)) & exists y.(PolarBear(y) & FurLayer(x,2))))", "all x.(PolarBear(x) -> (HasTwoLayersOfFur(x) & LivesInEnvironment(x)))", "all x.(PolarBear(x) -> HasTwoLayersOfFur(x))", "(LargeFur(polar bear) & TwoLayersOfFur(polar bear,polar))", "all x.(PolarBear(x) -> (HasTwoLayerOfFur(x) & LivesInEnvironment(x)))", "all x y z.((PolarBear(x) & Fur(y) & Environment(z)) -> HasTwoLayers(x,y,z))", "all x y.((PolarBear(x) & Fur(y)) -> HasTwoLayers(x,y))", "all x.(PolarBear(x) -> (HasTwoLayersOfFur(x) & LivesInEnvironment(x)))", "all x y.((PolarBear(x) & Fur(y)) -> (HasTwoLayers(x,y) & LivesInEnvironment(x,y)))", "all x.(PolarBear(x) -> HasTwoLayerOfFur(x))", "all x.(PolarBear(x) -> (HasTwoLayersOfFur(x) & LivesInEnvironment(x)))", "all x.(PolarBear(x) -> HasTwoLayerOfFur(x))"]}
{"id": "eqasc_validation_834", "nl": "Polar bears live in the Arctic.", "fol": "", "prediction": ["all x.(PolarBear(x) -> LivesInArctic(x))", "all x y.((PolarBear(x) & Arctic(y)) -> LivesIn(x,y))", "(LivesInArctic(PolarBear) -> LivesInArctic(PolarBear))", "all x.(PolarBear(x) -> LivesInArctic(x))", "all x y.((PolarBear(x) & Arctic(y)) -> LivesIn(x,y))", "all x.(PolarBear(x) -> LivesInArctic(x))", "all x y.((PolarBear(x) & Arctic(y)) -> LivesIn(x,y))", "all x.(PolarBear(x) -> LivesInArctic(x))", "all x y.((PolarBear(x) & Arctic(y)) -> LivesIn(x,y))", "all x.(PolarBear(x) -> LivesInArctic(x))", "exists x.(PoslarBear(x) & LivesInArctic(x))", "all x y.((PolarBear(x) & Arctic(y)) -> LivesIn(x,y))", "all x.(PolarBear(x) -> LivesInArctic(x))", "all x.(PolarBear(x) -> LivesIn(x,Arctic))", "exists x.(PolarBear(x) & LivesIn(x,Arctic))", "all x.(PolarBear(x) -> LivesInArctic(x))"]}
{"id": "eqasc_validation_835", "nl": "The Arctic is a cold environment.", "fol": "", "prediction": ["all x.(Arctic(x) -> ColdEnvironment(x))", "the Arctic(Arctic) -> ColdEnvironment(Arctic,Arctic))", "all x.(Arctic(x) -> ColdEnvironment(x))", "all x y.((Arctic(x) & ColdEnvironment(y)) -> ColdEnvironment(x))", "(ColdEnvironment(arctic) & ColdEnvironment(arctic))", "all x.((Arctic(x) & ColdEnvironment(x)) -> ColdEnvironment(x))", "all x y.((Arctic(x) & ColdEnvironment(y)) -> ColdEnvironment(x,y))", "all x.(Arctic(x) -> ColdEnvironment(x))", "(ColdEnvironment(arctic) & ColdEnvironment(arctic))", "(ColdEnvironment(arctic) & ColdEnvironment(arctic) & ColdEnvironment(arctic))", "all x.(Arctic(x) -> ColdEnvironment(x))", "All x.((Arctic(x) & ColdEnvironment(x)) -> ColdEnvironment(x))", "All x.(Arctic(x) -> ColdEnvironment(x))", "all x.(Arctic(x) -> ColdEnvironment(x))", "All x.(Arctic(x) -> ColdEnvironment(x))", "All x.(Arctic(x) -> ColdEnvironment(x))"]}
{"id": "eqasc_validation_836", "nl": "Cold weather, it is winter and it is snowing.", "fol": "", "prediction": ["all x.(ColdWeather(x) -> (IsWinter(x) & Snowing(x)))", "(ColdWeather(x) & Winter(x) & Snowing(x))", "(ColdWeather(ColdWeather) & Winter(Winter) & Snowing(Winter))", "all x y.((ColdWeather(x) & Winter(y) & Snowing(x)) -> ColdWeather(x))", "all x.(ColdWeather(x) -> (IsWinter(x) & Snowing(x)))", "(ColdWeather(cold) & Winter(cold) & Snowing(cold))", "all x.(ColdWeather(x) -> (Winter(x) & Snowing(x)))", "(ColdWeather(x) & Winter(x) & Snowing(x))", "all x y.((ColdWeather(x) & Winter(y) & Snowing(y)) -> ColdWeather(x))", "(ColdWeather(ColdWeather) & Winter(Winter) & Snowing(Winter))", "all x.(ColdWeather(x) -> (IsWinter(x) & Snowing(x)))", "all x.(ColdWeather(x) -> (Winter(x) & Snowing(x)))", "exists x.(ColdWeather(x) & Winter(x) & Snowing(x))", "all x y.((ColdWeather(x) & Winter(y) & Snowing(x)) -> ColdWeather(x))", "(ColdWeather(x) & Winter(x) & Snowing(x))", "exists x.(ColdWeather(x) & Winter(x) & Snowing(x))"]}
{"id": "eqasc_validation_837", "nl": "Polar bears require a winter environment with snow.", "fol": "", "prediction": ["all x.(PolarBear(x) -> RequiresWinterEnvironmentWithSnow(x))", "all x.(PolarBear(x) -> (RequiresWinterEnvironmentWithSnow(x)))", "all x y.((PolarBear(x) & WinterEnvironment(y) & Snow(y)) -> Requires(x,y))", "all x.((PolarBear(x) & WinterEnvironmentWithSnow(x)) -> Requires(x,y))", "all x.(PolarBear(x) -> (RequiresWinterEnvironment(x) & HasSnow(x)))", "all x.(PolarBear(x) -> RequiresWinterEnvironmentWithSnow(x))", "all x y.((PolarBear(x) & WinterEnvironment(y) & Snow(y)) -> Requires(x,y))", "all x y.((PolarBear(x) & WinterEnvironment(y) & Snow(z) & Requires(x,y)) -> Requires(x,z))", "all x.((PolarBear(x) & WinterEnvironment(x) & Snow(x)) -> Requires(x,y))", "all x.(PaloalBear(x) -> RequiresWinterEnvironmentWithSnow(x))", "(all x.(PolarBear(x) -> RequiresWinterEnvironmentWithSnow(x)))", "all x.(PolarBear(x) -> RequiresWinterEnvironmentWithSnow(x))", "all x y.((PolarBear(x) & WinterEnvironment(y) & HasSnow(x,y)) -> Requires(x,y))", "(all x.(PolarBear(x) -> RequiresWinterEnvironment(x)))", "all x y.((PolarBear(x) & WinterEnvironment(y) & Snow(y)) -> Requires(x,y))", "all x.(PolarBear(x) -> (RequiresWinterEnvironmentWithSnow(x)))"]}
{"id": "eqasc_validation_838", "nl": "Lynx live in cold, snowy environments.", "fol": "", "prediction": ["all x.(Lynx(x) -> LivesInColdSnowyEnvironments(x))", "(LivesInColdSnowyEnvironments(Lynx) & ColdSnowyEnvironments(Lynx))", "all x y.((Lynx(x) & ColdSnowyEnvironment(y)) -> LivesIn(x,y))", "all x.(Lynx(x) -> LivesInColdSnowyEnvironments(x))", "all x y.((Lynx(x) & Cold(y) & Snowy(y)) -> LivesIn(x,y))", "all x y z.((Lynx(x) & Environment(y) & Environment(z) & Cold(y) & Snowy(z)) -> LivesIn(x,y,z))", "all x.(Lynx(x) -> (LivesInColdSnowyEnvironments(x)))", "(LivesInColdSnowyEnvironments(Lynx) & ColdEnvironment(Lynx))", "all x.(Lynx(x) -> LivesInColdSnowyEnvironments(x))", "all x y.((Lynx(x) & Environment(y)) -> LivesIn(x,y))", "all x.(Lynx(x) -> exists y.(Cold(y) & Snowy(y) & LivesIn(x,y)))", "all x y.((Lynx(x) & ColdSnowyEnvironment(y)) -> LivesIn(x,y))", "all x.(Lynx(x) -> LivesInColdSnowyEnvironments(x))", "all x.(Lynx(x) -> LivesInColdSnowyEnvironments(x))", "exists x.(Lynx(x) & ColdSnowyEnvironment(x))", "exists x.(Lynx(x) & ColdSnowyEnvironment(x))"]}
{"id": "eqasc_validation_839", "nl": "Lynx and polar bears have similar climate requirements.", "fol": "", "prediction": ["all x y.((Lynx(x) & PolarBear(y)) -> SimilarClimateRequirements(x,y))", "(SameClimateRequirements(Lynx) & SameClimateRequirements(PolarBear))", "(ClimateRequirements(Lynx) & ClimateRequirements(PolarBear))", "all x.((Lynx(x) | PolarBear(x)) -> SimilarClimateRequirements(x))", "all x.((Lynx(x) & PolarBear(x)) -> SimilarClimateRequirements(x))", "all x y.((Lynx(x) & PolarBear(y)) -> SimilarClimateRequirements(x,y))", "(SameClimateRequirements(Lynx) & SimilarClimateRequirements(PolarBears))", "(ClimateRequirements(Lynx) & ClimateRequirements(PolarBear))", "exists x.(Lynx(x) & PolarBear(x) & SimilarClimateRequirements(x))", "(SameClimateRequirements(Lynx,Lynx) & SameClimateRequirements(PolarBear,Lynx))", "all x.((Lynx(x) | PolarBear(x)) -> SimilarClimateRequirements(x))", "(SameClimateRequirements(Lynx) & SameClimateRequirements(PolarBear))", "all x y.((Lynx(x) & PolarBear(y)) -> SimilarClimateRequirements(x,y))", "(ClimateRequirements(Lynx) & ClimateRequirements(PolarBear))", "exists x.(Lynx(x) & PolarBear(x) & SimilarClimateRequirements(x))", "all x y.((Lynx(x) & PolarBear(y)) -> SimilarClimateRequirements(x,y))"]}
{"id": "eqasc_validation_840", "nl": "Arctic air masses are exceedingly cold, with the Arctic Ocean as their source region.", "fol": "", "prediction": ["all x.(ArcticAirMass(x) -> (ExtremelyCold(x) & SourceRegionArcticOcean(x)))", "all x.((ArcticAirMass(x) & ArcticOcean(x)) -> ExtremelyCold(x))", "all x y.((ArcticAirMass(x) & ArcticOcean(y)) -> ExtremelyCold(x))", "(ExtremelyColdAirMasses(arctic) & SourceRegionArcticOcean(arctic))", "(ExtremelyColdAirMass(arctic) & SourceRegionArcticOcean(arctic))", "all x.(ArcticAirMass(x) -> (ExtremelyCold(x) & SourceRegionArcticOcean(x)))", "(ExtremelyColdArcticAirMasses(ArcticOcean) & SourceRegion(ArcticOcean))", "all x y z.((ArcticAirMass(x) & ArcticOcean(y) & ArcticOcean(z)) -> ExtremelyCold(x))", "all x.((ArcticAirMass(x) & ArcticOcean(x)) -> ExtremelyCold(x))", "all x y.((ArcticAirMass(x) & ArcticOcean(y)) -> ExtremelyCold(x))", "(ExtremelyColdAirMasses(arctic) & SourceRegionArcticOcean(arctic))", "all x y.((ArcticAirMass(x) & ArcticOcean(y)) -> (ExtremelyCold(x) & SourceRegion(y)))", "all x.(ArcticAirMass(x) -> (ExtremelyCold(x) & SourceRegionArcticOcean(x)))", "all x y.((ArcticAirMass(x) & ArcticOcean(y)) -> ExtremelyCold(x))", "all x.((ArcticAirMass(x) & ArcticOcean(x)) -> ExtremelyCold(x))", "all x.(ArcticAirMass(x) -> (ExtremelyCold(x) & ArcticOceanSourceRegion(x)))"]}
{"id": "eqasc_validation_841", "nl": "a polar bear can live in the Arctic", "fol": "", "prediction": ["all x.(PolarBear(x) -> CanLiveInArctic(x))", "all x y.((PolarBear(x) & Arctic(y)) -> CanLiveIn(x,y))", "all x y z.((PolarBear(x) & Arctic(y) & Arctic(z)) -> CanLiveIn(x,y,z))", "all x.(PolarBear(x) -> CanLiveInArctic(x))", "all x y.((PolarBear(x) & Arctic(y)) -> CanLiveIn(x,y))", "all x.((PolarBear(x) & CanLiveInArctic(x)) -> CanLiveInArctic(x))", "all x.(PositiveBear(x) -> CanLiveInArctic(x))", "all x y z.((PolarBear(x) & Arctic(y) & Arctic(z)) -> CanLiveIn(x,y,z))", "all x.(PolarBear(x) -> CanLiveInArctic(x))", "all x y.((PolarBear(x) & Arctic(y)) -> CanLiveIn(x,y))", "all x y z.((PolarBear(x) & Arctic(y) & Arctic(z)) -> CanLiveIn(x,y,z))", "all x.(PolarBear(x) -> LivesInArctic(x))", "all x y.((PolarBear(x) & Arctic(y)) -> CanLiveIn(x,y))", "exists x.(PolarBear(x) & LivesInArctic(x))", "exists x.(PolarBear(x) & CanLiveInArctic(x))", "exists x.(PolarBear(x) & LivesInArctic(x))"]}
{"id": "eqasc_validation_842", "nl": "when a hurricane moves over land , that hurricane will decrease in strength", "fol": "", "prediction": ["all x y z.((Hurricane(x) & Land(y) & Land(z)) -> (MovesOver(x,y) & DecreasesStrength(x,z)))", "all x y.((Hurricane(x) & MovesOverLand(x)) -> DecreasesStrength(y))", "all x y z.((Hurricane(x) & Land(y) & Land(z) & MovesOver(x,y)) -> DecreasesStrength(x,z))", "all x.((Hurricane(x) & MovesOverLand(x)) -> DecreasesStrength(x))", "all x y z w.((Hurricane(x) & Land(y) & Land(z) & MovesOver(x,y)) -> DecreasesStrength(x,z))", "all x y z.((Hurricane(x) & Land(y) & MovesOver(x,y)) -> DecreasesStrength(x,z))", "all x y.((Hurricane(x) & MovesOverLand(x)) -> (DecreasesStrength(y) & Hurricane(x)))", "all x.((Hurricane(x) & MovesOverLand(x)) -> DecreasesStrength(x))", "all x y z.((Hurricane(x) & Land(y) & Land(z)) -> (MovesOver(x,y,z) & DecreasesStrength(x,y)))", "all x.(Hurricane(x) -> (MovesOverLand(x) & DecreasesStrength(x)))", "all x y.((Hurricane(x) & MovesOverLand(x,y)) -> DecreasesStrength(x,y))", "all x y.((Hurricane(x) & Land(y) & MovesOver(x,y)) -> DecreasedStrength(x,y))", "all x y z.((Hurricane(x) & LandMovement(y) & Hurricane(z) & MovesOver(x,y)) -> DecreasesStrength(z,y))", "all x.((Hurricane(x) & MovesOverLand(x)) -> DecreasesStrength(x))", "all x.(MovesOverLand(x) -> DecreasedStrength(x))", "all x.((Hurricane(x) & MovesOverLand(x)) -> DecreasedStrength(x))"]}
{"id": "eqasc_validation_843", "nl": "When a hurricane hits land, it loses heat and moisture and weakens.", "fol": "", "prediction": ["all x.(Hurricane(x) -> (LosesHeat(x) & LosesMoisture(x) & Weakens(x)))", "all x.((Hurricane(x) & HitsLand(x)) -> (LosesHeat(x) & LosesMoisture(x) & Weakens(x)))", "all x y.((Hurricane(x) & Land(y)) -> (LosesHeat(x) & LosesMoisture(x) & Weakens(x)))", "all x y z.((Hurricane(x) & Land(y) & Heat(z)) -> (Loses(x,z) & Moisture(z) & Weaks(x,y)))", "all x.(Hurricane(x) -> (LosesHeat(x) & LosesMoisture(x) & Weakens(x)))", "all x.((Hurricane(x) & HitsLand(x)) -> (LosesHeat(x) & LosesMoisture(x) & Weakens(x)))", "all x y.((Hurricane(x) & Land(y)) -> (LosesHeat(x) & LosesMoisture(x) & Weakens(x)))", "all x y.((Hurricane(x) & Land(y)) -> (LosesHeat(x,y) & LosesMoisture(x,y) & Weakens(x,y)))", "all x y.((Hurricane(x) & Land(y) & Hits(x,y)) -> (LosesHeat(x) & LosesMoisture(x) & Weakens(x)))", "all x y z.((Hurricane(x) & Land(y) & Heat(z) & Moisture(z)) -> (Loses(x,z) & Weakens(x)))", "all x.(Hurricane(x) -> (LosesHeat(x) & LosesMoisture(x) & Weakens(x)))", "all x.((Hurricane(x) & HitsLand(x)) -> (LosesHeat(x) & LosesMoisture(x) & Weakens(x)))", "(all x.(Hurricane(x) -> HitsLand(x)))", "all x.(Hurricane(x) -> (LosesHeat(x) & LosesMoisture(x) & Weakens(x)))", "all x.((Hurricane(x) & HitsLand(x)) -> (LosesHeat(x) & LosesMoisture(x) & Weakens(x)))", "all x.(Hurricane(x) -> (LosesHeat(x) & LosesMoisture(x) & Weakens(x)))"]}
{"id": "eqasc_validation_844", "nl": "As a hurricane decreases in strength, it loses heat and moisture.", "fol": "", "prediction": ["all x.((Hurricane(x) & DecreasesStrength(x)) -> (LosesHeat(x) & LosesMoisture(x)))", "all x.(Hurricane(x) -> (DecreasesStrength(x) & LosesHeat(x) & LosesMoisture(x)))", "all x y.((Hurricane(x) & Strength(y)) -> (Decreases(x,y) & LosesHeat(x) & LosesMoisture(x)))", "all x y.((Hurricane(x) & Heat(y) & Moisture(y)) -> DecreasesStrength(x,y))", "(DecreasesStrength(hurricane) -> LosesHeatAndMoisture(hurricane))", "all x y z.((Hurricane(x) & Strength(y) & Heat(z) & Moisture(z)) -> (Decreases(x,y,z) & Loses(x,y)))", "all x.((Hurricane(x) & DecreasesStrength(x)) -> (LosesHeat(x) & LosesMoisture(x)))", "all x.(Hurricane(x) -> (DecreasesStrength(x) & LosesHeat(x) & LosesMoisture(x)))", "all x y.((Hurricane(x) & DecreasesStrength(x)) -> (LosesHeat(x) & LosesMoisture(x)))", "all x y.((Hurricane(x) & Strength(y)) -> (Decreases(x,y) & LosesHeat(x) & LosesMoisture(x)))", "all x.((Hurricane(x) & DecreasesStrength(x)) -> (LosesHeat(x) & LosesMoisture(x)))", "all x.(DecreasesStrength(x) -> (LosesHeat(x) & LosesMoisture(x)))", "all x.(Hurricane(x) -> (DecreasesStrength(x) & LosesHeat(x) & LosesMoisture(x)))", "all x.((Hurricane(x) & DecreasesInStrength(x)) -> (LosesHeat(x) & LosesMoisture(x)))", "all x.((Hurricane(x) & DecreasesStrength(x)) -> (LosesHeat(x) & LosesMoisture(x)))", "all x.(Hurricane(x) -> (DecreasedStrength(x) & LosesHeat(x) & LosesMoisture(x)))"]}
{"id": "eqasc_validation_845", "nl": "Large bodies of land are called continents.", "fol": "", "prediction": ["all x.(LargeBodyOfLand(x) -> Continent(x))", "(LargeBodyOfLand(LargeBodyOfLand) & KnownAsContinent(LargeBodyOfLand))", "all x.(LargeBodyOfLand(x) -> Continence(x))", "all x.((LargeBodyOfLand(x) & KnownAsContinent(x)) -> LandBody(x))", "all x y.((LargeBodyOfLand(x) & Land(y)) -> Continence(x))", "all x.exists y.(LargeBodyOfLand(x) & Land(y) & KnownAs(x,y))", "all x.(LargeBodyOfLand(x) -> Continent(x))", "all x.((LargeBodyOfLand(x) & Land(x)) -> Continence(x))", "all x y.((LargeBodyOfLand(x) & Land(y)) -> Continent(x))", "all x.((LargeBodyOfLand(x) & KnownAsContinent(x)) -> Continent(x))", "all x.(LargeBodyOfLand(x) -> Continence(x))", "all x.(LargeBodyOfLand(x) -> continent(x))", "all x y.((LargeBodyOfLand(x) & Land(y)) -> Continence(x))", "all x.(LargeBodyOfLand(x) -> Continent(x))", "all x.(LargeBodyOfLand(x) -> Continence(x))", "all x.(LargeBodyOfLand(x) -> continent(x))"]}
{"id": "eqasc_validation_846", "nl": "When hurricanes move over continents, their strength decreases.", "fol": "", "prediction": ["all x y.((Hurricane(x) & continent(y)) -> MovesOver(x,y))", "all x.(Hurricane(x) -> (MovesOverContinents(x) & StrengthDecreases(x)))", "all x.((Hurricane(x) & MovesOverContinents(x)) -> StrengthDecreases(x))", "all x y z.((Hurricane(x) & continent(y) & continent(z)) -> MovesOver(x,y,z))", "all x y.((Hurricane(x) & continent(y)) -> MovesOver(x,y))", "all x.(Hurricane(x) -> MovesOverContinents(x))", "all x.((Hurricane(x) & MovesOverContinents(x)) -> StrengthDecreases(x))", "all x y.((Hurricane(x) & Continence(y)) -> MovesOver(x,y))", "all x.(Hurricane(x) -> (MovesOverContinents(x) & StrengthDecreases(x)))", "all x y.((Hurricane(x) & continent(y)) -> MovesOver(x,y))", "all x y z.((Hurricane(x) & continent(y) & continent(z)) -> MovesOver(x,y,z))", "all x.((Hurricane(x) & MovesOverContinents(x)) -> StrengthDecreases(x))", "all x y.((Hurricane(x) & Continence(y) & MovesOver(x,y)) -> StrengthDecreases(x))", "all x.(Hurricane(x) -> MovesOverContinents(x))", "all x y.((Hurricane(x) & continent(y)) -> MovesOver(x,y))", "all x.((Hurricane(x) & MovesOverContinents(x)) -> StrengthDecreases(x))"]}
{"id": "eqasc_validation_847", "nl": "Hurricanes grow strength from warm waters.", "fol": "", "prediction": ["all x.(Hurricane(x) -> GrowsStrengthFromWarmWaters(x))", "all x y.((Hurricane(x) & WarmWater(y)) -> GrowsStrengthFrom(x,y))", "all x y z.((Hurricane(x) & WarmWater(y) & WarmWater(z)) -> GrowsStrengthFrom(x,y,z))", "all x.(Hurricane(x) -> GrowsStrengthFromWarmWaters(x))", "(GrowsStrengthFromWarmWaters(hurricane))", "all x y.((Hurricane(x) & WarmWater(y)) -> GrowsStrengthFrom(x,y))", "all x.(Hurricane(x) -> GrowsStrengthFromWarmWater(x))", "all x y.((Hurricane(x) & WarmWater(y)) -> GrowsStrengthFrom(x,y))", "all x.(Horizon(x) -> GrowsStrengthFromWarmWaters(x))", "all x.(Hurricane(x) -> GrowsStrengthFromWarmWaters(x))", "all x y.((Hurricane(x) & WarmWater(y)) -> GrowsStrength(x,y))", "all x.(Hurricane(x) -> GrowsStrengthFromWarmWater(x))", "all x.(Hurricane(x) -> GrowsStrengthFromWarmWaters(x))", "all x y.((Hurricane(x) & WarmWater(y)) -> GrowsStrengthFrom(x,y))", "all x.(Hurricane(x) -> GrowsStrengthFromWarmWaters(x))", "all x.(Hurricane(x) -> GrowsStrengthFromWarmWater(x))"]}
{"id": "eqasc_validation_848", "nl": "Hurricanes are worse over warm water and weaker over land", "fol": "", "prediction": ["all x.(Hurricane(x) -> (WorseOverWarmWater(x) & WeakerOverLand(x)))", "all x y.((Hurricane(x) & WarmWater(y)) -> (Worse(x,y) & Weaker(x,y)))", "(all x.(Hurricane(x) -> WorseOverWarmWater(x)) & (Hurricane(x) -> WorseOverWarmWater(x)) & (Hurricane(x) -> WeakerOverLand(x)))", "all x y z.((Hurricane(x) & WarmWater(y) & Land(z)) -> (Worse(x,y) & Weaker(x,z)))", "all x.(Hurricane(x) -> (WarmWater(x) & WarmWater(x) & Land(x) & Worse(x) & Weaker(x)))", "all x.(Hurricane(x) -> (WorseOverWarmWater(x) & WeakerOverLand(x)))", "all x y.((Hurricane(x) & WarmWater(y)) -> (Worse(x,y) & Weaker(x,y)))", "(all x.(Hurricane(x) -> WorseOverWarmWater(x)) & (Hurricane(x) -> WeakerOverLand(x)))", "all x y z.((Hurricane(x) & WarmWater(y) & Land(z)) -> (Worse(x,y) & Weaker(x,z)))", "(all x.(Hurricane(x) -> WorseOverWarmWater(x)) & (Hurricane(x) -> WorseOverWarmWater(x)) & (Hurricane(x) -> WeakerOverLand(x)))", "all x.(Hurricane(x) -> (WarmWater(x) & WarmWater(x) & Land(x) & Worse(x) & Weaker(x)))", "all x y.((Hurricane(x) & WarmWater(y)) -> (Worse(x,y) & Worse(x,y)))", "all x.(Hurricane(x) -> (WorseOverWarmWater(x) & WeakerOverLand(x)))", "all x y.((Hurricane(x) & WarmWater(y)) -> (Smaller(x,y) & Weaker(x,y)))", "(all x.(Hurricane(x) -> WorseOverWarmWater(x)) & (Hurricane(x) -> WeakerOverLand(x)))", "all x.(Hurricane(x) -> (WorseOverWarmWater(x) & WorseOverLand(x)))"]}
{"id": "eqasc_validation_849", "nl": "Hurricanes are divided into five categories of strength based on the Saffir-Simpson scale .", "fol": "", "prediction": ["all x.(Hurricane(x) -> (SaffirSimpsonScale(x) & Strength(x,5)))", "all x y.((Hurricane(x) & SaffirSimpsonScale(y)) -> DividedIntoFiveStrengthCategories(x,y))", "all x y z.((Hurricane(x) & Strength(y) & SaffirSimpsonScale(z)) -> DividedInto(x,y,z))", "all x.(Hurricane(x) -> (Division(x,5) & BasedOnSaffirSimpsonScale(x)))", "all x.(Hurricane(x) -> (FiveStrengthCategories(x) & BasedOnSaffirSimpsonScale(x)))", "(Hurricane(h) & SaffirSimpsonScale(h) & DividedIntoFiveStrengthCategories(h,h,z))", "all x y z.((Hurricane(x) & Strength(y) & Strength(z) & SaffirSimpsonScale(x,y,z)) -> DividedInto(x,y,z))", "(All x.(Hurricane(x) -> SaffirSimpsonScales(x)))", "(SaffirSimpsonScale(Hurricane) & Strength(Hurricane))", "all x y.((Hurricane(x) & SaffirSimpsonScale(y)) -> DividedIntoFiveStrengthCategories(x,y))", "all x.(Hurricane(x) -> (DivisionsIntoFiveStrengthCategories(x) & BasedOnSaffirSimpsonScale(x)))", "all x y z.((Hurricane(x) & Strength(y) & SaffirSimpsonScale(z)) -> DividedIntoCategories(x,y,z))", "all x.(Hurricane(x) -> (SaffirSimpsonScale(x) & Strength(x)))", "all x.(Hurricane(x) -> (SaffirSimpsonScale(x) & Strength(x,5)))", "all x y.((Hurricane(x) & SaffirSimpsonScale(y)) -> Strength(x,y))", "all x.(Hurricane(x) -> (FiveStrengthCategories(x) & BasedOnSaffirSimpsonScene(x)))"]}
{"id": "eqasc_validation_850", "nl": "When a hurricane moves over land it drops on the Saffir-Simpson scale.", "fol": "", "prediction": ["all x.((Hurricane(x) & MovesOverLand(x)) -> DropsOnSaffirSimpsonScale(x))", "all x y.((Hurricane(x) & Land(y)) -> MovesOver(x,y))", "all x y.((Hurricane(x) & Land(y) & MovesOver(x,y)) -> DropsOnSaffirSimpsonScale(x))", "all x.((Hurricane(x) & MovesOverLand(x)) -> DropsOnSaffirSimpsonScale(x))", "all x y z.((Hurricane(x) & Land(y) & SaffirSimpson(z)) -> MovesOver(x,y,z))", "all x.(Hurricane(x) -> MovesOverLand(x))", "all x y.((Hurricane(x) & MovesOverLand(x)) -> DropsOnSaffirSimpsonScale(y))", "all x.(Hurricane(x) -> (MovesOverLand(x) & DropsOnSaffirSimpsonScale(x)))", "all x.((Hurricane(x) & MovesOverLand(x)) -> DropsOnSaffirSimpsonScales(x))", "all x y z.((Hurricane(x) & Land(y) & SaffirSimpson(z)) -> MovesOver(x,y,z))", "all x y.((Hurricane(x) & Land(y) & MovesOver(x,y)) -> DropsOnSaffirSimpsonScale(x))", "all x.((Hurricane(x) & MovesOverLand(x)) -> DropsOnSaffirSimpsonScale(x))", "all x y.((Hurricane(x) & MovesOverLand(x)) -> DropsOnSaffirSimpsonScale(y))", "all x.(Hurricane(x) -> MovesOverLand(x))", "all x.((Hurricane(x) & MovesOverLand(x)) -> DropsOnSaffirSimpsonScene(x))", "(all x.(Hurricane(x) -> MovesOverLand(x)))"]}
{"id": "eqasc_validation_851", "nl": "Hurricanes are extremely dangerous storms.", "fol": "", "prediction": ["all x.(Hurricane(x) -> ExtremelyDangerousStorm(x))", "all x y.((Hurricane(x) & Storm(y)) -> ExtremelyDangerous(x,y))", "all x.(Hurricane(x) -> ExtremelyDangerousStorm(x))", "(DangerousStorm(hurricane) -> ExtremelyDangerous(hurricane))", "all x y.((Hurricane(x) & Storm(y)) -> ExtremelyDangerous(x,y))", "all x.(Horizon(x) -> ExtremelyDangerousStorm(x))", "all x.(Hurricane(x) -> ExtremelyDangerousStorm(x))", "all x.(Hurricane(x) -> (ExtremelyDangerousStorm(x) & -DangerousStorm(x)))", "all x y.((Hurricane(x) & Storm(y)) -> ExtremelyDangerous(x,y))", "all x.(Hurricane(x) -> ExtremelyDangerousStorm(x))", "all x.(Horizon(x) -> ExtremelyDangerousStorm(x))", "all x.(Hurricane(x) -> (ExtremelyDangerousStorm(x) & Storm(x)))", "all x y.((Hurricane(x) & Storm(y)) -> ExtremelyDangerous(x))", "all x.(Hurricane(x) -> ExtremelyDangerousStorm(x))", "all x.(Hurricane(x) -> ExtremelyDangerousStorm(x))", "all x.(Hurricane(x) -> ExtremelyDangerous(x))"]}
{"id": "eqasc_validation_852", "nl": "when extremely dangerous storms move over land, they decrease in strength", "fol": "", "prediction": ["all x y.((Storm(x) & ExtremelyDangerous(x) & MovesOverLand(x)) -> DecreasesStrength(y))", "all x.((Storm(x) & ExtremelyDangerous(x)) -> (DecreasesStrength(x) & MovesOverLand(x)))", "all x y z.((Storm(x) & ExtremelyDangerous(x) & Land(y) & MovesOver(x,y)) -> DecreasesStrength(x))", "all x y z.((Storm(x) & ExtremelyDangerous(x) & Land(y) & Land(z)) -> (DecreasesStrength(x,y) & DecreasesStrength(x,z)))", "all x y.((Storm(x) & ExtremelyDangerous(x) & MovesOverLand(x)) -> DecreasesStrength(y))", "all x.((Storm(x) & ExtremelyDangerous(x) & MovesOverLand(x)) -> DecreasesStrength(x))", "all x.((Storm(x) & ExtremelyDangerous(x)) -> (DecreasesStrength(x) & MovesOverLand(x)))", "all x.((ExtremelyDangerousStorm(x) & MovesOverLand(x)) -> DecreasesStrength(x))", "all x y.((ExtremelyDangerousStorm(x) & MovesOverLand(x)) -> DecreasesStrength(x,y))", "all x.((Storms(x) & ExtremelyDangerous(x)) -> (DecreasesStrength(x) & MovesOverLand(x)))", "(all x.((Storm(x) & ExtremelyDangerous(x)) -> DecreaseInStrength(x)))", "all x y.((Storm(x) & ExtremelyDangerous(x) & MovesOverLand(x)) -> DecreasesStrength(x,y))", "all x y z.((Storm(x) & ExtremelyDangerous(x) & Land(y) & MovesOver(x,y)) -> DecreasesStrength(x,z))", "all x y.((Storm(x) & ExtremelyDangerous(x) & MovesOverLand(x) & DecreasesStrength(y)) -> DecreasesStrength(y))", "all x.((Storm(x) & ExtremelyDangerous(x) & MovesOverLand(x)) -> DecreasesStrength(x))", "all x.((Storm(x) & ExtremelyDangerous(x)) -> (DecreasedStrength(x)))"]}
{"id": "eqasc_validation_853", "nl": "Hurricanes form over the warm tropical water in ocean and die down when they move over land.", "fol": "", "prediction": ["all x.(Hurricane(x) -> (FormsOverWarmTropicalWater(x) & DiesDown(x)))", "all x y.((Hurricane(x) & WarmTropicalWater(y)) -> (FormsOver(x,y) & DiesDown(x)))", "all x y z.((Hurricane(x) & WarmTropicalWater(y) & Ocean(z)) -> (FormsOver(x,y,z) & DiesDown(x)))", "all x y.((Hurricane(x) & WarmTropicalWater(y) & Ocean(y)) -> (FormsOver(x,y) & DiesDown(x)))", "all x.(Hurricane(x) -> (FormsOverWarmTropicalWater(x) & DiesDownWhenMovedOverLand(x)))", "all x y z.((Hurricane(x) & WarmTropicalWater(y) & Ocean(z) & Land(w)) -> (FormsOver(x,y,z) & DiesDown(x,w)))", "(all x.(Hurricane(x) -> (FormsOverWarmTropicalWater(x) & InOcean(x) & OverLand(x))))", "all x y.((Hurricane(x) & Ocean(y)) -> (FormsOverWarmTropicalWater(x,y) & DiesDown(x,y)))", "(all x.(Hurricane(x) -> FormsOverWarmTropicalWater(x)) & (MovesOverLand(x) -> DiesDown(x)))", "all x.(Hurricane(x) -> (FormsOverWarmTropicalWater(x) & DiesDown(x)))", "all x.(Hurricane(x) -> (FormsOverWarmTropicalWater(x) & DiesDownWhenMovedOverLand(x)))", "(all x.(Hurricane(x) -> (FormsOverWarmTropicalWater(x) & InOcean(x)) & DiesDown(x)))", "all x y z.((Hurricane(x) & WarmTropicalWater(y) & Ocean(z)) -> (FormsOver(x,y,z) & DiesDown(x,y)))", "all x.(Hurricane(x) -> (FormsOverWarmTropicalWater(x) & DiesDownWhenMovedOverLand(x)))", "all x.(Hurricane(x) -> (FormsOverWarmTropicalWater(x) & DiesDown(x) & MovesOverLand(x)))", "all x.(Hurricane(x) -> (FormsOverWarmTropicalWaterInOcean(x) & DiesDownWhenMovedOverLand(x)))"]}
{"id": "eqasc_validation_854", "nl": "hurricanes form over the warm tropical water in ocean decrease strength on ground", "fol": "", "prediction": ["all x y.((Hurricane(x) & WarmTropicalWater(y)) -> FormsOver(x,y))", "all x.(Hurricane(x) -> (FormsOverWarmTropicalWater(x) & OceanDecreasesStrengthOnGround(x)))", "all x y z.((Hurricane(x) & WarmTropicalWater(y) & OceanDecreasesStrengthOnGround(z)) -> FormsOver(x,y,z))", "all x y.((Hurricane(x) & WarmTropicalWater(y) & OceanDecreasesStrengthOnGround(x)) -> FormsOver(x,y))", "all x y z.((Hurricane(x) & WarmTropicalWater(y) & OceanDecreaseStrength(z)) -> FormsOver(x,y,z))", "all x.(Hurricane(x) -> (FormsOverWarmTropicalWater(x) & OceanDecreasesStrengthOnGround(x)))", "(all x.(Hurricane(x) -> FormsOverWarmTropicalWater(x)))", "(all x.(Hurricane(x) -> FormsOverWarmTropicalWater(x)) & InOceanDecreasesStrengthOnGround(x))", "all x y z.((Hurricane(x) & WarmTropicalWater(y) & Ocean(z)) -> FormsOver(x,y,z))", "all x y.((Hurricane(x) & WarmTropicalWater(y)) -> FormsOver(x,y))", "all x.(Hurricane(x) -> (FormsOverWarmTropicalWater(x) & OceanDecreasesStrengthOnGround(x)))", "all x y.((Hurricane(x) & WarmTropicalWater(y) & OceanDecreasesStrength(x,y)) -> FormsOver(x,y))", "all x.(Hurricane(x) -> FormsOverWarmTropicalWater(x))", "all x y z.((Hurricane(x) & WarmTropicalWater(y) & OceanDecreasesStrength(z)) -> FormsOver(x,y,z))", "all x.(Hurricane(x) -> (FormsOverWarmTropicalWater(x) & OceanDecreasesStrengthOnGround(x)))", "all x.(Hurricane(x) -> (FormsOverWarmTropicalWater(x) & OceanDecreasesStrengthOnGround(x)))"]}
{"id": "eqasc_validation_855", "nl": "Hurricanes A hurricane is a type of tropical cyclone.", "fol": "", "prediction": ["all x.(Hurricane(x) -> TropicalCyclone(x))", "all x.(Hurricane(x) -> TropicalCyclone(x))", "(TropicalCyclone(Hurricane) -> Hurricane(Hurricane))", "all x.(Hurricane(x) -> (TropicalCyclone(x) & Hurricane(x)))", "all x y.((Hurricane(x) & TropicalCyclone(y)) -> Hurricane(x))", "(TropicalCyclone(Hurricane) -> Hurricane(Hurricane))", "all x.(Hurricane(x) -> TropicalCyclone(x))", "all x.(Hurricane(x) -> (TropicalCyclone(x) & Hurricane(x)))", "all x y.((Hurricane(x) & TropicalCyclone(y)) -> Hurricane(x,y))", "all x.(Hurricane(x) -> (TropicalCyclone(x) & Hurricane(x)))", "all x.(Hurricane(x) -> TropicalCyclone(x))", "all x y.((Hurricane(x) & TropicalCyclone(y)) -> Hurricane(x))", "all x.(Hurricane(x) -> (TropicalCyclone(x) & Hurricane(x)))", "All x y.((Hurricane(x) & TropicalCyclone(y)) -> Hurricane(x,y))", "all x.(Hurricane(x) -> TropicalCyclone(x))", "all x.(Hurricane(x) -> TropicalCyclone(x))"]}
{"id": "eqasc_validation_856", "nl": "when a tropical cyclone moves over land, it will decrease in strength", "fol": "", "prediction": ["all x y.((TropicalCyclone(x) & MovesOverLand(x)) -> DecreasesStrength(y))", "all x y z.((TropicalCyclone(x) & Land(y) & Land(z) & MovesOver(x,y,z)) -> DecreasesStrength(x,y))", "all x.((TropicalCyclone(x) & MovesOverLand(x)) -> DecreasesStrength(x))", "all x.(TropicalCyclone(x) -> (MovesOverLand(x) & DecreasesStrength(x)))", "all x y z.((TropicalCyclone(x) & Land(y) & Land(z)) -> (DecreasesStrength(x,y) & OverLand(x,z)))", "all x y.((TropicalCyclone(x) & MovesOverLand(x)) -> DecreasesStrength(y))", "all x.((TropicalCyclone(x) & MovesOverLand(x)) -> DecreasesStrength(x))", "all x y z.((TropicalCyclone(x) & Land(y) & MovesOver(x,y)) -> DecreasesStrength(x,z))", "all x y.((TropicalCyclone(x) & MovesOverLand(x,y)) -> DecreasesStrength(x))", "all x y z.((TropicalCyclone(x) & LandMovement(y) & TropicalCyclone(z) & MovesOver(x,y)) -> DecreasesStrength(z))", "all x y.((TropicalCyclone(x) & Land(y) & MovesOver(x,y)) -> DecreasesStrength(x))", "all x.(TropicalCyclone(x) -> (MovesOverLand(x) & DecreasesStrength(x)))", "all x.((TropicalCyclone(x) & MovesOverLand(x)) -> DecreasedStrength(x))", "all x.(TropicalCyclone(x) -> (MovesOverLand(x) & DecreasesStrength(x)))", "all x y.((TropicalCyclone(x) & MovesOverLand(x,y)) -> DecreasedStrength(x,y))", "all x.((TropicalCyclone(x) & MovesOverLand(x)) -> DecreasesStrength(x))"]}
{"id": "eqasc_validation_857", "nl": "Blood is a fluid connective tissue.", "fol": "", "prediction": ["all x.(Blood(x) -> FluidConnectiveTissue(x))", "all x.(Blood(x) -> FluidConnectiveTissue(x))", "(FluidConnectiveTissue(blood) & Fluid(blood))", "all x y.((Blood(x) & FluidConnectiveTissue(y)) -> Is(x,y))", "all x.(Blue(x) -> FluidConnectiveTissue(x))", "all x.(Blood(x) -> FluidConnectiveTissue(x))", "all x y.((Blood(x) & FluidConnectiveTissue(y)) -> Fluid(x,y))", "(FluidConnectiveTissue(blood) & In(blood,blood))", "all x.((Blood(x) & FluidConnectiveTissue(x)) -> Is(x,y))", "all x y.((Blood(x) & ConnectiveTissue(y)) -> Fluid(x))", "all x.(Blood(x) -> FluidConnectiveTissue(x))", "all x.(Blue(x) -> FluidConnectiveTissue(x))", "all x.(Blood(x) -> FluidConnectiveTissue(x))", "all x.(Blood(x) -> FluidConnectiveTissue(x))", "all x.(Blood(x) -> FluidConnectiveTissue(x))", "exists x.(Blood(x) & FluidConnectiveTissue(x))"]}
{"id": "eqasc_validation_858", "nl": "Blood is a connective tissue and it carries and delivers oxygen and nutrient to tissues.", "fol": "", "prediction": ["all x.(Blood(x) -> (ConnectiveTissue(x) & CarriesOxygen(x) & DeliversNutrient(x)))", "all x y.((Blood(x) & Tissue(y)) -> (ConnectiveTissue(x,y) & CarriesOxygenAndNutrient(x,y) & DeliversToTissues(x,y)))", "(ConnectiveTissue(blood) & CarriesOxygenAndNutrientToTissues(blood))", "all x.(Blood(x) -> (ConnectiveTissue(x) & CarriesOxygen(x) & DeliversNutrient(x)))", "all x y z.((Blood(x) & ConnectiveTissue(y) & Tissue(z)) -> (CarriesOxygen(x,y) & DeliversNutrient(x,z)))", "all x.(Blood(x) -> (ConnectiveTissue(x) & CarriesOxygenAndNutrient(x) & ToTissues(x)))", "all x y.((Blood(x) & Tissue(y)) -> (ConnectiveTissue(x) & CarriesOxygen(x,y) & DeliversNutrient(x,y)))", "all x.(Blue(x) -> (ConnectiveTissue(x) & CarriesOxygen(x) & DeliversNutrient(x)))", "(ConnectiveTissue(blood) & CarriesOxygenAndNutrientToTissues(blood))", "(ConnectiveTissue(blood) & CarriesOxygen(blood) & DeliversNutrient(blood))", "all x y.((Blood(x) & Tissue(y)) -> (Connective(x) & CarriesOxygen(x,y) & DeliversNutrient(x,y)))", "all x.(Blood(x) -> (ConnectiveTissue(x) & CarriesOxygen(x) & DeliversNutrient(x)))", "all x.(Blood(x) -> (ConnectiveTissue(x) & CarriesOrDeliversOxygenAndNutrient(x)))", "all x.((Blood(x) & ConnectiveTissue(x)) -> CarriesAndDeliversOxygenAndNutrientToTissues(x))", "all x.(Blood(x) -> (ConnectiveTissue(x) & CarriesOxygenAndNutrient(x) & DeliversToTissues(x)))", "all x y.((Blood(x) & Tissue(y)) -> (ConnectiveTissue(x,y) & CarriesOxygenAndNutrient(x,y)))"]}
{"id": "eqasc_validation_859", "nl": "Blood is a fluid tissue that delivers oxygen and nutrients to other tissues", "fol": "", "prediction": ["all x.(Blood(x) -> (FluidTissue(x) & DeliversOxygen(x) & DeliversNutrients(x)))", "all x y z.((Blood(x) & Tissue(y) & Tissue(z)) -> (FluidTissue(x) & DeliversOxygen(x,y) & DeliversNutrients(x,z)))", "all x y.((Blood(x) & Tissue(y)) -> (FluidTissue(x) & DeliversOxygenAndNutrients(x,y)))", "(FluidTissue(blood) & DeliversOxygenAndNutrientsToTissues(blood))", "all x.(Blood(x) -> (FluidTissue(x) & DeliversOxygenAndNutrients(x) & ToTissues(x)))", "all x y.((Blood(x) & Tissue(y)) -> (FluidTissue(x,y) & DeliversOxygen(x) & DeliversNutrients(x)))", "all x.(Blood(x) -> (FluidTissue(x) & DeliversOxygen(x) & DeliversNutrients(x) & ToTissues(x)))", "all x y z.((Blood(x) & Tissue(y) & Tissue(z)) -> (FluidTissue(x,y) & DeliversOxygenAndNutrients(x,z)))", "(FluidTissue(blood) & DeliversOxygen(blood) & DeliversNutrients(blood))", "all x y z.((Blood(x) & FluidTissue(y) & Tissue(z)) -> (DeliversOxygenAndNutrients(x,y,z) & ToTissue(x,z)))", "all x.((Blood(x) & FluidTissue(x) & DeliversOxygenAndNutrients(x)) -> Tissue(x))", "all x y.((Blood(x) & Tissue(y) & DeliversOxygenAndNutrients(x,y)) -> FluidTissue(x))", "all x.(Blood(x) -> (FluidTissue(x) & DeliversOxygen(x) & DeliversNutrients(x) & ToTissues(x)))", "all x.(Blood(x) -> (FluidTissue(x) & DeliversOxygen(x) & DeliversNutrients(x) & ToTissues(x)))", "all x.(Blood(x) -> (FluidTissue(x) & DeliversOxygenAndNutrients(x) & ToOtherTissues(x)))", "all x y.((Blood(x) & Tissue(y) & DeliversOxygen(x,y) & DeliversNutrients(x,y)) -> FluidTissue(x))"]}
{"id": "eqasc_validation_860", "nl": "Connective tissue is classed as visco-elastic.", "fol": "", "prediction": ["all x.(ConnectiveTissue(x) -> ViscoElastic(x))", "all x.(ConnectiveTissue(x) -> ViscoElastic(x))", "all x.((ConnectiveTissue(x) & ViscoElastic(x)) -> ClassedAs(x))", "all x y.((ConnectiveTissue(x) & ConnectiveTissue(y)) -> ViscoElastic(x))", "all x.(ContainiveTissue(x) -> ViscoElastic(x))", "all x.(ConnectiveTissue(x) -> ViscoElastic(x))", "all x y.((ConnectiveTissue(x) & ViscoElastic(y)) -> ClassedAs(x,y))", "all x.((ConnectiveTissue(x) & ViscoElastic(x)) -> ClassedAs(x,y))", "all x y.((ConnectiveTissue(x) & AssociatedTissue(y)) -> ViscoElastic(x))", "all x.(ConnectiveTissue(x) -> ViscoElastic(x))", "all x.(ConductiveTissue(x) -> ViscoElastic(x))", "all x y.((ConnectiveTissue(x) & ConnectiveTissue(y)) -> ViscoElastic(x))", "all x.((ConnectiveTissue(x) & ViscoElastic(x)) -> ClassedAs(x))", "all x.(ConnectiveTissue(x) -> ViscoElastic(x))", "all x.(ConnectiveTissue(x) -> ViscoElastic(x))", "all x.(ConductiveTissue(x) -> Viscoelastic(x))"]}
{"id": "eqasc_validation_861", "nl": "Blood is classed as visco-elastic.", "fol": "", "prediction": ["all x.(Blood(x) -> ViscoElastic(x))", "all x.((Blood(x) & ViscoElastic(x)) -> ClassedAs(x))", "(ViscoElastic(blood) -> ClassedAs(blood))", "all x y.((Blood(x) & ViscoElastic(y)) -> ClassedAs(x,y))", "all x.(Blood(x) -> ViscoElastic(x))", "all x.((Blood(x) & ViscoElastic(x)) -> ClassedAs(x,y))", "(ViscoElastic(blood) -> Classed(blood))", "all x y.((Blood(x) & ViscoElastic(y)) -> ClassedAs(x,y))", "all x.(ViscoElastic(x) -> Blood(x))", "all x.(Blood(x) -> ViscoElastic(x))", "all x.((Blood(x) & ViscoElastic(x)) -> ClassedAs(x))", "all x y.((Blood(x) & ViscoElastic(y)) -> ClassedAs(x,y))", "all x.(Blood(x) -> ViscoElastic(x))", "all x.((Blood(x) & ViscoElastic(x)) -> Classed(x))", "all x.(Blood(x) -> ViscoElastic(x))", "All x.(Blood(x) -> ViscoElastic(x))"]}
{"id": "eqasc_validation_862", "nl": "Blood is pulsed through the body.", "fol": "", "prediction": ["all x.(Blood(x) -> PulsedThroughBody(x))", "all x y.((Blood(x) & Body(y)) -> PulsedThrough(x,y))", "all x.(Blood(x) -> PulsedThroughBody(x))", "all x y z.((Blood(x) & Body(y) & PulsedThrough(x,y)) -> PulsedThrough(x,z))", "all x.((Blood(x) & PulsedThroughBody(x)) -> PulsedThroughBody(x))", "(PulsedByBody(blood) -> PulsedThroughBody(blood,body,body))", "all x y.((Blood(x) & Body(y)) -> PulsedThrough(x,y))", "all x.(Blood(x) -> PulsedThroughBody(x))", "all x y.((Blood(x) & Body(y)) -> PulsedThrough(x,y))", "all x y z.((Blood(x) & Body(y) & PulsedThrough(x,y)) -> Pulsed(x,y))", "all x.((Blood(x) & PulsedThroughBody(x)) -> PulsedThroughBody(x))", "(PulsedByBody(blood) -> PulsedThroughBody(blood,body))", "all x.(Blood(x) -> PulsedThroughBody(x))", "all x y.((Blood(x) & Body(y)) -> PulsedThrough(x,y))", "all x.(Blood(x) -> PulsedThroughBody(x))", "All x.(Blood(x) -> PulsedThroughBody(x))"]}
{"id": "eqasc_validation_863", "nl": "fluid connective tissue is pulsed through the body", "fol": "", "prediction": ["all x y.((FluidConnectiveTissue(x) & Body(y)) -> PulsedThrough(x,y))", "all x y z.((FluidConnectiveTissue(x) & Body(y) & Body(z)) -> PulsedThrough(x,y,z))", "all x.(FluidConnectiveTissue(x) -> PulsedThroughBody(x))", "(FluidConnectiveTissuePulsedThroughBody(fibular) & PulsedThroughBody(fibular))", "all x.((FluidConnectiveTissue(x) & PulsedThroughBody(x)) -> PulsedThroughBody(x))", "all x y.((FluidConnectiveTissue(x) & Body(y)) -> PulsedThrough(x,y))", "all x y z.((FluidConnectiveTissue(x) & Body(y) & Body(z)) -> PulsedThrough(x,y,z))", "all x.(FluidConnectiveTissue(x) -> PulsedThroughBody(x))", "all x.(FluidConnectiveTissuePulsedThroughBody(x) -> PulsedThroughBody(x))", "all x.((FluidConnectiveTissue(x) & PulsedThroughBody(x)) -> PulsedThroughBody(x))", "all x y.((FluidConnectiveTissue(x) & Body(y)) -> PulsedThrough(x,y))", "all x y z.((FluidConnectiveTissue(x) & Body(y) & Body(z) & PulsedThrough(x,y,z)) -> PulsedThrough(x,y,z))", "all x.(FluidConnectiveTissue(x) -> PulsedThroughBody(x))", "all x y z.((FluidConnectiveTissue(x) & Body(y) & Body(z)) -> PulsedThrough(x,y,z))", "all x y.((FluidConnectiveTissue(x) & Body(y)) -> PulsedThrough(x,y))", "all x.(FluidConnectiveTissue(x) -> PulsedThroughBody(x))"]}
{"id": "eqasc_validation_864", "nl": "All tissues and fluids in our body contain minerals.", "fol": "", "prediction": ["all x.((Tissues(x) & Fluids(x)) -> ContainsMinerals(x))", "all x.((Tissue(x) & Fluid(x)) -> ContainsMinerals(x))", "all x.((Tissues(x) & Fluids(x) & Body(x)) -> ContainsMinerals(x))", "all x y.((Tissue(x) & Fluid(y) & Body(x)) -> ContainsMinerals(x,y))", "all x.((Tissue(x) & Fluid(x) & Body(x)) -> ContainsMinerals(x))", "all x.(TissuesAndFluids(x) -> ContainsMinerals(x))", "all x y.((Tissue(x) & Fluid(y) & Body(x) & InBody(x,y)) -> ContainsMinerals(x))", "(all x.(Tissue(x) & AllFluids(x)) -> ContainsMinerals(x))", "all x y z.((Tissue(x) & Fluid(y) & Body(z)) -> ContainsMinerals(x,y,z))", "(all x.(Tissue(x) | Fluid(x)) -> InBodyContainsMinerals(x))", "all x.(TissuesAndFluids(x) -> ContainsMinerals(x))", "all x.((Tissues(x) & Fluids(x)) -> ContainsMinerals(x))", "all x y.((Tissue(x) & Fluid(y) & Body(y)) -> ContainsMinerals(x,y))", "all x.(TissuesAndFluidsInBody(x) -> ContainsMinerals(x))", "(all x.(Tissue(x) -> ContainsMinerals(x)))", "all x y.((Tissue(x) & Fluid(y)) -> ContainsMinerals(x,y))"]}
{"id": "eqasc_validation_865", "nl": "Blood in our body contains minerals", "fol": "", "prediction": ["all x.((Blood(x) & InBody(x)) -> ContainsMinerals(x))", "all x y.((Blood(x) & Body(y)) -> ContainsMinerals(x,y))", "all x.((Blood(x) & Body(x)) -> ContainsMinerals(x))", "all x y z.((Blood(x) & Body(y) & Minerals(z)) -> Contains(x,y,z))", "all x.((BloodInBody(x) & ContainsMinerals(x)) -> InBody(x))", "all x y.((Blood(x) & Body(y) & ContainsMinerals(x,y)) -> ContainsMinerals(x,y))", "(all x y.((Blood(x) & Body(y)) -> ContainsMinerals(x,y)))", "all x y.((Blood(x) & Body(y)) -> ContainsMinerals(x,y))", "all x y z.((Blood(x) & Body(y) & Minerals(z) & InBody(x,y)) -> Contains(x,z))", "(all x.((Blood(x) & Body(x)) -> ContainsMinerals(x)))", "all x.(Blood(x) -> ContainsMinerals(x))", "(all x.(Blood(x) -> ContainsMinerals(x)))", "all x y.((Blood(x) & Body(y) & InBody(x,y)) -> ContainsMinerals(x,y))", "all x.((Blood(x) & InBody(x)) -> ContainsMinerals(x))", "all x.(BloodInBody(x) -> ContainsMinerals(x))", "all x.(Blood(x) -> ContainsMinerals(x))"]}
{"id": "eqasc_validation_866", "nl": "Liquids A fluid is any substance that flows, and liquids are examples of fluids.", "fol": "", "prediction": ["all x.(Liquid(x) -> (Fluid(x) & Flows(x) & Liquids(x)))", "all x.(Fluid(x) -> (Flows(x) & Liquids(x)))", "all x.(Liquid(x) -> (Flows(x) & Liquids(x)))", "all x y.((Fluid(x) & Substance(y) & Flows(x)) -> Fluid(x))", "(all x.(Fluid(x) -> Flows(x)) & all y.(Liquid(y) -> Fluid(y)))", "all x y z.((Fluid(x) & Substance(y) & Liquid(z)) -> (Flows(y) & ExamplesOfFluids(z)))", "all x y.((Fluid(x) & Substance(y)) -> (Flows(x) & Liquids(x)))", "all x.(Liquid(x) -> (Fluid(x) & Flows(x) & Liquid(x)))", "all x.(Fluid(x) -> (Flows(x) & Liquids(x)))", "all x.(Liquids(x) -> (Fluid(x) & Flows(x) & Liquids(x)))", "(all x.(Fluid(x) -> Flows(x)) & all y.(Liquid(y) -> Fluid(y)))", "all x y.((Fluid(x) & Fluid(y)) -> (Flies(x) & Fluid(y)))", "all x.(Floss(x) -> (Fluid(x) & Flows(x) & Liquids(x)))", "exists x.(Fluid(x) & Flows(x) & Liquid(x))", "(all x.(Fluid(x) -> Flows(x)) & all y.(Liquid(y) -> Fluid(y)))", "(all x.(Floid(x) -> Flows(x)) & all y.(Liquid(y) -> ExamplesOfFluids(y)))"]}
{"id": "eqasc_validation_867", "nl": "blood is a liquid connective tissue", "fol": "", "prediction": ["all x.(Blood(x) -> LiquidConnectiveTissue(x))", "all x.((Blood(x) & LiquidConnectiveTissue(x)) -> LiquidConnectiveTissue(x))", "all x y.((Blood(x) & LiquidConnectiveTissue(y)) -> LiquidConnectiveTissue(x,y))", "(LiquidConnectiveTissue(blood) & LiquidConnectiveTissue(blood))", "all x y z.((Blood(x) & LiquidConnectiveTissue(y) & LiquidConnectiveTissue(z)) -> LiquidConnectiveTissue(x,y,z))", "all x.(Blood(x) -> LiquidConnectiveTissue(x))", "all x.((Blood(x) & LiquidConnectiveTissue(x)) -> LiquidConnectiveTissue(x))", "all x y.((Blood(x) & LiquidConnectiveTissue(y)) -> LiquidConnectiveTissue(x,y))", "(LiquidConnectiveTissue(blood) & LiquidConnectiveTissue(blood))", "all x y.((Blood(x) & LiquidConnectiveTissue(y)) -> LiquidConnectiveTissue(x,y))", "all x.(Blood(x) -> LiquidConnectiveTissue(x))", "all x.((Blood(x) & LiquidConnectiveTissue(x)) -> LiquidConnectiveTissue(x))", "all x y.((Blood(x) & LiquidConnectiveTissue(y)) -> LiquidConnectiveTissue(x,y))", "all x.((Blood(x) & LiquidConnectiveTissue(x)) -> LiquidConnectiveTissue(x))", "all x.(Blood(x) -> LiquidConnectiveTissue(x))", "all x.(Blood(x) -> LiquidConnectiveTissue(x))"]}
{"id": "eqasc_validation_868", "nl": "Blood carries oxygen to the brain.", "fol": "", "prediction": ["all x.(Blood(x) -> CarriesOxygenToBrain(x))", "all x y.((Blood(x) & Brain(y)) -> CarriesOxygen(x,y))", "all x y z.((Blood(x) & Brain(y) & Oxygen(z)) -> CarriesTo(x,y,z))", "all x.(Blood(x) -> CarriesOxygenToBrain(x))", "all x y.((Blood(x) & Brain(y)) -> CarriesOxygen(x,y))", "all x.(Blue(x) -> CarriesOxygenToBrain(x))", "(CarriesOxygenToBrain(blood,blue))", "all x y z.((Blood(x) & Brain(y) & Oxygen(z)) -> CarriesTo(x,y,z))", "all x y.((Blood(x) & Brain(y)) -> CarriesOxygenTo(x,y))", "all x.(Blood(x) -> CarriesOxygenToBrain(x))", "(CarriesOxygenToBrain(blood))", "all x.(Blue(x) -> CarriesOxygenToBrain(x))", "all x y.((Blood(x) & Brain(y)) -> CarriesOxygen(x,y))", "all x.(Blood(x) -> CarriesOxygenToBrain(x))", "All x.(Blue(x) -> CarriesOxygenToBrain(x))", "All x.(Blood(x) -> CarriesOxygenToBrain(x))"]}
{"id": "eqasc_validation_869", "nl": "A fluid connective tissue carries oxygen to the brain", "fol": "", "prediction": ["all x y.((FluidConnectiveTissue(x) & Brain(y)) -> CarriesOxygenTo(x,y))", "all x.(FluidConnectiveTissue(x) -> CarriesOxygenToBrain(x))", "all x y z.((FluidConnectiveTissue(x) & Brain(y) & Oxygen(z)) -> CarriesTo(x,y,z))", "all x y.((FluidConnectiveTissue(x) & Brain(y)) -> CarriesOxygen(x,y))", "all x.((FluidConnectiveTissue(x) & CarriesOxygenToBrain(x)) -> CarriesOxygenToBrain(x))", "all x.(FluidConnectiveTissue(x) -> CarriesOxygenToBrain(x))", "all x y z.((FluidConnectiveTissue(x) & Brain(y) & Brain(z)) -> CarriesOxygenTo(x,y,z))", "all x y.((FluidConnectiveTissue(x) & Brain(y)) -> CarriesOxygenTo(x,y))", "all x.((FluidConnectiveTissue(x) & CarriesOxygen(x)) -> CarriesToBrain(x))", "all x.(FluidConnectiveTissue(x) -> CarriesOxygenToBrain(x))", "all x y z.((FluidConnectiveTissue(x) & Brain(y) & Oxygen(z)) -> CarriesTo(x,y,z))", "all x.(FluidConnectiveTissue(x) -> CarriesOxygenToBrain(x))", "all x y.((FluidConnectiveTissue(x) & Brain(y)) -> CarriesOxygen(x,y))", "all x y.((FluidConnectiveTissue(x) & Brain(y)) -> CarriesOxygenToBrain(x,y))", "all x.(FluidConnectiveTissue(x) -> CarriesOxygenToBrain(x))", "all x.(FluidConnectiveTissue(x) -> CarriesOxygenToBrain(x))"]}
{"id": "eqasc_validation_870", "nl": "Connective tissue cancers are rare.", "fol": "", "prediction": ["all x.(ConnectiveTissueCancer(x) -> Rare(x))", "all x y.((ConnectiveTissueCancer(x) & Cancer(y)) -> Rare(x))", "all x.(ConnectiveTissueCancer(x) -> Rare(x))", "(Rare(ConnectiveTissueCancer))", "all x.(ConnectiveTissueCancer(x) -> Rare(x))", "all x y.((ConnectiveTissueCancer(x) & Cancer(y)) -> Rare(x))", "all x y.((ConnectiveTissueCancerous(x) & Cancer(y)) -> Rare(x))", "all x.(ConnectiveTissueCancer(x) -> Rare(x))", "all x.(ContainiveTissueCancer(x) -> Rare(x))", "all x y.((ConnectiveTissueCancer(x) & Cancer(y)) -> Rare(x))", "all x.(ConnectiveTissueCancerous(x) -> Rare(x))", "all x.(ConnectiveTissueCancer(x) -> Rare(x))", "all x.(ConnectiveTissueCancer(x) -> Rare(x))", "exists x.(ConnectiveTissueCancerous(x) & Rare(x))", "all x.(ConnectiveTissueCancer(x) -> Rare(x))", "exists x.(ConnectiveTissueCancer(x) & Rare(x))"]}
{"id": "eqasc_validation_871", "nl": "Blood cancers are rare.", "fol": "", "prediction": ["all x.(BloodCancer(x) -> Rare(x))", "all x.(BloodCancer(x) -> Rare(x))", "all x y.((BloodCancer(x) & Blood(y)) -> Rare(x))", "(Rare(bloodcancer) -> Rare(bloodCancerous))", "(Rare(bloodCancer) -> Rare(bloodCancerous))", "all x.(BloodCancer(x) -> Rare(x))", "all x.((BloodCancer(x) & Rare(x)) -> Rare(x))", "all x y.((BloodCancer(x) & Blood(y)) -> Rare(x))", "all x.(BloodCancerous(x) -> Rare(x))", "all x.(BlueCancer(x) -> Rare(x))", "all x.(BloodCancer(x) -> Rare(x))", "all x y.((BloodCancer(x) & Blood(y)) -> Rare(x))", "all x.(BloodCancer(x) -> Rare(x))", "exists x.(BlueCancer(x) & Rare(x))", "exists x.(BloodCancerous(x) & Rare(x))", "all x.(BloodCancer(x) -> Rare(x))"]}
{"id": "eqasc_validation_872", "nl": "a compass is used to navigate oceans", "fol": "", "prediction": ["all x y.((Compass(x) & Ocean(y)) -> Navigates(x,y))", "all x y z.((Compass(x) & Ocean(y) & Ocean(z)) -> Navigates(x,y,z))", "all x.(Compass(x) -> NavigatesOceans(x))", "all x y.((Compass(x) & Ocean(y)) -> Navigates(x,y))", "all x y z.((Compass(x) & Ocean(y) & Ocean(z)) -> Navigates(x,y,z))", "all x.(Compass(x) -> NavigatesOceans(x))", "all x y z.((Compass(x) & Ocean(y) & Ocean(z)) -> Navigate(x,y,z))", "all x y.((Compass(x) & Ocean(y)) -> Navigates(x,y))", "all x.(Compass(x) -> NavigatesOceans(x))", "all x y.(Compass(x) -> NavigatesOceans(x,y))", "all x y z.((Compass(x) & Ocean(y) & Ocean(z)) -> Navigates(x,y,z))", "all x y.((Compass(x) & Ocean(y)) -> Navigates(x,y))", "all x.(Compass(x) -> NavigatesOceans(x))", "exists x.(Compass(x) & NavigatesOceans(x))", "all x.(Compass(x) -> NavigatesOceans(x))", "exists x.(Compass(x) & NavigateOceans(x))"]}
{"id": "eqasc_validation_873", "nl": "Ocean waves travel on the surface of the water.", "fol": "", "prediction": ["all x y.((OceanWaves(x) & Water(y)) -> TravelsOnSurface(x,y))", "all x.(OceanWaves(x) -> TravelsOnWaterSurface(x))", "all x y.((OceanWave(x) & Water(y)) -> TravelsOnSurface(x,y))", "all x y z.((OceanWaves(x) & Water(y) & Surface(z)) -> TravelsOn(x,y,z))", "all x.(OceanWaves(x) -> TravelOnWaterSurface(x))", "all x y z.((OceanWave(x) & Water(y) & Surface(z)) -> TravelsOn(x,y,z))", "all x y.((OceanWaves(x) & Water(y)) -> TravelsOnSurface(x,y))", "all x.(OceanWave(x) -> TravelsOnWaterSurface(x))", "(all x.(OceanWaves(x) -> TravelOnWaterSurface(x)))", "all x.(OceanWaves(x) -> TravelsOnWaterSurface(x))", "(TransportsOnWaterSurface(oceanWaves))", "all x y.((OceanWave(x) & Water(y)) -> TravelsOnSurface(x,y))", "all x.(OceanWave(x) -> TravelsOnWaterSurface(x))", "all x.(OceanWaves(x) -> TravelOnWaterSurface(x))", "all x y.((OceanWaves(x) & Water(y)) -> TravelsOnSurface(x,y))", "all x.(OceanWaves(x) -> TravelsOnWaterSurface(x))"]}
{"id": "eqasc_validation_874", "nl": "A compass is used to travel on the surface of the water.", "fol": "", "prediction": ["all x.(Compass(x) -> TravelsOnWaterSurface(x))", "all x y.((Compass(x) & Water(y)) -> UsedToTravel(x,y))", "all x.(Compass(x) -> TravelsOnWaterSurface(x))", "all x.(Compass(x) -> UsedToTravelOnWaterSurface(x))", "all x y z.((Compass(x) & Water(y) & Surface(z)) -> TravelsOn(x,y,z))", "all x y.((Compass(x) & Water(y)) -> TravelsOnSurface(x,y))", "all x y z.((Compass(x) & Water(y) & Surface(z)) -> UsedToTravel(x,y,z))", "all x y.((Compass(x) & Water(y)) -> UsedToTravelOn(x,y))", "all x.(Compass(x) -> TravelsOnWaterSurface(x))", "all x y.(Compass(x) -> TravelsOnSurfaceOfWater(x,y))", "all x.(Compass(x) -> UsedToTravelOnWaterSurface(x))", "all x y.((Compass(x) & Water(y)) -> TravelsOnSurface(x,y))", "exists x.(Compass(x) & SurfaceOfWater(x) & TravelsOn(x,Water))", "all x.(Compass(x) -> TravelsOnWaterSurface(x))", "all x.(Compass(x) -> UsedToTravelOnWaterSurface(x))", "exists x.(Compass(x) & SurfaceOfWater(x) & UsedToTravel(x))"]}
{"id": "eqasc_validation_875", "nl": "Magnets are used in compasses.", "fol": "", "prediction": ["all x.(Magnet(x) -> UsedInCompass(x))", "all x y.((Magnet(x) & Compasse(y)) -> UsedIn(x,y))", "all x.(Magnet(x) -> UsedInCompasses(x))", "(all x.(Magnet(x) -> UsedInCompasses(x)))", "all x y z.((Magnet(x) & Compasse(y) & Compasse(z)) -> UsedIn(x,y,z))", "all x y.((Magnet(x) & Compasse(y)) -> UsedIn(x,y))", "(all x.(Magnet(x) -> UsedInCompasses(x)))", "all x.(Magnet(x) -> UsedInCompass(x))", "all x y.((Magnet(x) & Compasse(y)) -> UsedIn(x,y))", "all x.(Magnet(x) -> UsedInCompasses(x))", "all x y.((Magnet(x) & Compasse(y)) -> UsedIn(x,y))", "all x.(Magnet(x) -> UsedInCompass(x))", "all x.(Magnet(x) -> UsedInCompasses(x))", "all x y.((Magnet(x) & Compasse(y)) -> UsedIn(x,y))", "all x.(Magnet(x) -> UsedInCompasses(x))", "all x.(Magnet(x) -> UsedInCompasses(x))"]}
{"id": "eqasc_validation_876", "nl": "magnets are used to navigate oceans", "fol": "", "prediction": ["all x y.((Magnet(x) & Ocean(y)) -> Navigates(x,y))", "all x.(Magnet(x) -> NavigatesOceans(x))", "all x y z.((Magnet(x) & Ocean(y) & Ocean(z)) -> Navigates(x,y,z))", "all x y.((Magnet(x) & Ocean(y)) -> Navigates(x,y))", "all x.(Magnet(x) -> NavigatesOceans(x))", "all x y z.((Magnet(x) & Ocean(y) & Ocean(z)) -> Navigates(x,y,z))", "(Navigation(Magnets) & Ocean(Ocean(Magnetos))", "(all x.(Magnet(x) -> NavigatesOceans(x)))", "all x.(Magnet(x) -> NavigatesOceans(x))", "all x.(Magnet(x) -> NavigatesOceans(x))", "all x y z.((Magnet(x) & Ocean(y) & Ocean(z)) -> Navigate(x,y,z))", "all x y.((Magnet(x) & Ocean(y)) -> Navigates(x,y))", "all x.(Magnet(x) -> NavigatesOceans(x))", "all x y.((Magnet(x) & Ocean(y)) -> Navigates(x,y))", "all x.(Magnet(x) -> NavigatesOcean(x,y))", "all x.(Magnet(x) -> NavigatesOceans(x))"]}
{"id": "eqasc_validation_877", "nl": "Largest of the oceans on Earth is the Pacific Ocean .", "fol": "", "prediction": ["all x.(LargestOcean(x) -> PacificOcean(x))", "(LargestOcean(x) & OnEarth(x))", "all x.((Ocean(x) & LargestOnEarth(x)) -> PacificOcean(x))", "LargestOceanOnEarth(x) -> PacificOcean(x))", "-LargestOcean(x) -PacificOcean(x))", "(LargestOceanOnEarth(Ocean) -> Pacific(Ocean))", "all x y.((Ocean(x) & Ocean(y) & Earth(x)) -> PacificOcean(x))", "LargestOceanOnEarth(x) -> PacificOcean(x))", "(LargestOcean(x) & Ocean(x) & OnEarth(x))", "(LargestOceanOnEarth(Ocean) & PacificOcean(Ocean))", "LargestOcean(x)  Earth(x))", "-LargestOceanOnEarth(Ocean(Ocean)", "All x.(Ocean(x) -> Pacific(x))", "the LargestOceanOnEarth(x) -> PacificOcean(x))", "(LargestOcean(x) -> PacificOcean(x))", "all x.(LargestOcean(x) -> PacificOcean(x))"]}
{"id": "eqasc_validation_878", "nl": "a compass is used to navigate the Pacific", "fol": "", "prediction": ["all x y.((Compass(x) & Pacific(y)) -> Navigates(x,y))", "all x y z.((Compass(x) & Pacific(y) & Pacific(z)) -> Navigates(x,y,z))", "all x.(Compass(x) -> NavigatesPacific(x))", "all x y.((Compass(x) & Pacific(y)) -> NavigatesPacific(x,y))", "all x y z.((Compass(x) & Pacific(y) & Pacific(z)) -> Navigates(x,y,z))", "all x.(Compass(x) -> NavigatesPacific(x))", "all x y.((Compass(x) & Pacific(y)) -> Navigates(x,y))", "all x y z.((Compass(x) & Pacific(y) & Pacific(z)) -> Navigates(x,y,z))", "all x y.((Compass(x) & Pacific(y) & NavigatesPacific(x,y)) -> UsedToNavigate(x,y))", "all x.(Compass(x) -> NavigatesPacific(x))", "all x.(Compass(x) -> NavigatesPacific(x))", "all x y.(Compass(x) -> NavigatesPacific(x,y))", "all x y z.((Compass(x) & Pacific(y) & Pacific(z)) -> Navigates(x,y,z))", "exists x.(Compass(x) & NavigatePacific(x) & Uses(x,Pacific,Pacific))", "exists x.(Compass(x) & NavigatesPacific(x))", "all x.(Compass(x) -> NavigatesPacific(x))"]}
{"id": "eqasc_validation_879", "nl": "On moonless nights they navigate solely with the geomagnetic compass.", "fol": "", "prediction": ["all x.(MoonlessNight(x) -> NavigatesWithCompass(x))", "all x.((MoonlessNight(x) & GeomagneticCompass(x)) -> NavigatesWith(x,y))", "all x y.((MoonlessNight(x) & GeomagneticCompass(y)) -> NavigatesWith(x,y))", "all x.((Night(x) & Moonless(x)) -> NavigatesWithCompass(x))", "(MoonlessNights(x) & NavigatesWithCompass(x))", "all x y z.((MoonlessNight(x) & GeomagneticCompass(y) & MoonlessNight(z)) -> NavigatesWith(x,y,z))", "on moonlessNights, they navigate solely with geomagneticCompass.", "(MoonlessNights(x) -> NavigatesWithCompass(x))", "all x.(MoonlessNight(x) -> NavigatesWithCompass(x))", "all x y.((MoonlessNight(x) & GeomagneticCompass(y)) -> NavigatesWith(x,y))", "all x.((MoonlessNight(x) & GeomagneticCompass(x)) -> NavigatesWith(x,y))", "all x y.((MoonlessNight(x) & GeomagneticCompass(y)) -> NavigatesOn(x,y))", "all x.(MoonlessNight(x) -> NavigatesWithCompass(x))", "all x.(MoonlessNight(x) -> NavigatesWithGeomagneticCompass(x))", "all x.(MoonlessNight(x) -> NavigatesWithCompass(x))", "all x y.((MoonlessNight(x) & GeomagneticCompass(y)) -> NavigatesWith(x,y))"]}
{"id": "eqasc_validation_880", "nl": "oceans can be navigated even on moonless nights", "fol": "", "prediction": ["all x.((Ocean(x) & MoonlessNight(x)) -> NavigatesOn(x,y))", "all x y.((Ocean(x) & MoonlessNight(y)) -> NavigatesOn(x,y))", "(NavigableOnMoonlessNights(oceans) & MoonlessNights(oceans))", "all x y z.((Ocean(x) & MoonlessNight(y) & MoonlessNight(z) & Navigates(x,y,z)) -> Navigates(x,y,z))", "all x.((Ocean(x) & MoonlessNight(x)) -> Navigated(x))", "all x.(Ocean(x) -> (NavigableOnMoonlessNights(x) & MoonlessNights(x)))", "all x y.((Ocean(x) & MoonlessNight(y)) -> Navigates(x,y))", "all x y z.((Ocean(x) & MoonlessNight(y) & MoonlessNight(z) & NavigatesOn(x,y,z)) -> NavigatesOn(x,y,z))", "exists x.(Ocean(x) & MoonlessNight(x) & NavigatedOn(x,y))", "(all x.((Ocean(x) & MoonlessNight(x)) -> NavigatedOn(x,y)))", "all x.((Ocean(x) & MoonlessNight(x)) -> NavigatesOn(x,y))", "all x.((Ocean(x) & MoonlessNights(x)) -> NavigatesOn(x,y))", "all x y.((Ocean(x) & MoonlessNight(y)) -> NavigatedOn(x,y))", "exists x.(Ocean(x) & MoonlessNight(x) & NavigatesOn(x,y))", "all x y.((Ocean(x) & MoonlessNight(y)) -> NavigatesOn(x,y))", "all x.((Ocean(x) & MoonlessNight(x)) -> Navigated(x))"]}
{"id": "eqasc_validation_881", "nl": "And to the east is the Atlantic Ocean.", "fol": "", "prediction": ["(ToEast(AtlanticOcean) & ToEast(AtlanticOcean))", "(all x.(East(x) -> AtlanticOcean(x)))", "\u043e\u0435\u043e \u0430\u0441\u043e\u043b\u043e\u0435\u043d\u0438\u0435 \u043e\u0435\u0441\u0442\u0432\u043e \u0430\u0441\u043e\u043b\u043e\u0435\u043d\u0438\u0435 \u043e\u0435\u0441\u0442\u0432\u043e \u043e\u0435\u0441\u0442\u0432\u043e \u043e\u0435\u0441\u0442\u0432\u043e \u043e\u0435\u0441\u0442\u0432\u043e \u043e\u0435\u0441\u0442\u0432\u043e \u043e\u0435\u0441\u0442\u0432\u043e \u043e\u0435\u0441\u0442\u0432\u043e \u043e\u0435\u0441\u0442\u0432\u043e \u043e\u0435\u0441\u0442\u0432\u043e \u043e\u0435\u0441\u0442\u0432\u043e \u043e\u0435\u0441\u0442\u0432\u043e", "(ToTheEast(AtlanticOcean) & ToTheEst(AtlanticOcean))", "(East is AtlanticOcean(x) & ToEast(x))", "all x.(East(x) -> AtlanticOcean(x))", "Und to the East is the Atlantic Ocean.", "& to the East is the Atlantic Ocean.", "Und to the East is the AtlanticOcean(x)", "(all x.(East(x) -> AtlanticOcean(x)))", "& ToEast(AtlanticOcean)", "(East) -> AtlanticOcean(East))", "(Easter(AtlanticOcean)", "(Eastern(AtlanticOcean)", "And to the East is the Atlantic Ocean.", "Und in the east is the Atlantic Ocean."]}
{"id": "eqasc_validation_882", "nl": "a compass is used to navigate the Atlantic", "fol": "", "prediction": ["all x y.((Compass(x) & AtlanticAtlantic(y)) -> Navigates(x,y))", "all x y z.((Compass(x) & AtlanticAtlantic(y) & AtlanticAtlantic(z)) -> Navigates(x,y,z))", "all x y.((Compass(x) & Atlantic(y)) -> Navigates(x,y))", "all x.(Compass(x) -> NavigatesAtlantic(x))", "all x y z.((Compass(x) & Atlantic(y) & Atlantic(z)) -> Navigates(x,y,z))", "all x.(Compass(x) -> NavigatesAtlantic(x))", "all x y.((Compass(x) & AtlanticAtlantic(y)) -> Navigates(x,y))", "all x y z.((Compass(x) & AtlanticAtlantic(y) & AtlanticAtlantic(z)) -> Navigates(x,y,z))", "all x y.((Compass(x) & Atlantic(y)) -> Navigates(x,y))", "all x.(Compass(x) -> NavigatesAtlantic(x))", "all x y z.((Compass(x) & AtlanticAtlantic(y) & AtlanticAtlantic(z)) -> Navigates(x,y,z))", "all x.(Compass(x) -> NavigatesAtlantic(x))", "all x y.((Compass(x) & AtlanticAtlantic(y)) -> Navigates(x,y))", "exists x.(Compass(x) & NavigateAtlantic(x))", "all x.(Compass(x) -> NavigatesAtlantic(x))", "exists x.(Compass(x) & NavigateAtlantic(x))"]}
{"id": "eqasc_validation_883", "nl": "Navigation by compass is especially difficult during a magnetic storm.", "fol": "", "prediction": ["all x.((Compass(x) & MagneticStorm(x)) -> DifficultNavigation(x))", "all x y.((Compass(x) & MagneticStorm(y)) -> DifficultNavigation(x,y))", "all x.((Compass(x) & MagneticStorm(x)) -> DifficultNavigation(x))", "all x.(Compass(x) -> (DifficultNavigation(x) & MagneticStorm(x)))", "(DifficultNavigation(Compass,MagneticStorm) & EspeciallyDuring(Compass,MagneticStorm))", "all x y.((Compass(x) & MagneticStorm(y)) -> DifficultNavigation(x,y))", "all x y z.((Compass(x) & MagneticStorm(y) & MagneticStorm(z) & EspeciallyDifficultDuring(x,y,z)) -> Navigation(x,y,z))", "all x.(CompassNavigation(x) -> ParticularlyDifficultDuringMagneticStorm(x))", "all x.((Compass(x) & MagneticStorm(x)) -> DifficultNavigation(x))", "all x y.((Compass(x) & MagneticStorm(y) & ParticularlyDifficultNavigation(x,y)) -> EspeciallyDifficultNavigation(x,y))", "(DifficultNavigation(compass,MagneticStorm) & EspeciallyDuring(compass,MagneticStorm))", "all x y.((Compass(x) & MagneticStorm(y)) -> DifficultNavigation(x,y))", "all x y.((Compass(x) & MagneticStorm(y)) -> ParticularlyDifficultNavigation(x,y))", "all x.((Compass(x) & MagneticStorm(x)) -> DifficultNavigation(x))", "all x.((Compass(x) & MagneticStorm(x)) -> DifficultNavigation(x))", "all x.((Compass(x) & MagneticStorm(x)) -> ParticularlyDifficultNavigation(x))"]}
{"id": "eqasc_validation_884", "nl": "Navigating the oceans can be more difficult during a magnetic storm", "fol": "", "prediction": ["all x y.((MagneticStorm(x) & Ocean(y)) -> MoreDifficultToNavigate(x,y))", "all x.((MagneticStorm(x) & NavigatingOceans(x)) -> MoreDifficultDuring(x,MagneticStorm))", "all x y z.((MagneticStorm(x) & Ocean(y) & MagneticStorm(z)) -> MoreDifficultToNavigate(x,y,z))", "(NavigatingOceans(x) & MagneticStorm(x)) -> MoreDifficultDuring(x,y))", "all x y.((MagneticStorm(x) & Ocean(y)) -> MoreDifficultToNavigate(x,y))", "all x.((MagneticStorm(x) & MoreDifficultNavigatingOceans(x)) -> MoreDifficultNavigatingOceans(x))", "all x.(MagneticStorm(x) -> MoreDifficultToNavigateOceans(x))", "(all x.((MagneticStorm(x) & Ocean(x)) -> MoreDifficult(x)))", "all x.((MagneticStorm(x) & NavigatingOceans(x)) -> MoreDifficultDuring(x))", "all x y z.((MagneticStorm(x) & Ocean(y) & MagneticStorm(z)) -> MoreDifficultToNavigate(x,y,z))", "all x y.((MagneticStorm(x) & Ocean(y)) -> MoreDifficultNavigating(x,y))", "all x y z.((MagneticStorm(x) & Ocean(y) & MagneticStorm(z)) -> (Navigating(x,y) & MoreDifficultDuring(x,z)))", "all x.((MagneticStorm(x) & Oceans(y)) -> MoreDifficultToNavigate(x,y))", "all x y.((MagneticStorm(x) & MagneticStorm(y)) -> MoreDifficultToNavigate(x,y))", "all x.((MagneticStorm(x) & MagneticStorm(x)) -> MoreDifficultToNavigateOceans(x))", "all x y.((MagneticStorm(x) & Ocean(y)) -> MoreDifficultToNavigateDuring(x,y))"]}
{"id": "eqasc_validation_885", "nl": "Map navigators tend to use Grid North, or Magnetic north as as default.", "fol": "", "prediction": ["all x.(MapNavigator(x) -> (UsesGridNorth(x) | UsesMagneticNorth(x)))", "all x.(MapNavigator(x) -> (UsesGridNorth(x) | UsesMagneticNorth(x)))", "all x y.((MapNavigator(x) & GridNorth(y)) -> (UsesDefault(x,y) | UsesDefault(x,y)))", "all x y.((MapNavigator(x) & GridNorth(y)) -> (UsesDefault(x,y) | UsesDefault(x,y)))", "(MathNavigator(x) & (GridNorth(x) | MagneticNorth(x))))", "all x.(MapNavigator(x) -> (UsesGridNorth(x) | UsesMagneticNorth(x)))", "all x y.((MapNavigator(x) & (GridNorth(y) | MagneticNorth(y))) -> UsesDefault(x,y))", "(all x.(MapNavigator(x) -> UsesGridNorth(x)))", "all x.(MapNavigator(x) -> (UsesGridNorth(x) | UsesMagneticNorth(x)))", "(all x.(MapNavigator(x) -> UsesGridNorth(x)))", "all x y.((MapNavigator(x) & (GridNorth(y) | MagneticNorth(y))) -> UsesDefault(x,y))", "all x y.((MapNavigator(x) & GridNorth(y) & (MagneticNorth(y) | GridNorth(y))) -> UsesDefault(x,y))", "all x.(MapNavigator(x) -> (UsesGridNorth(x) | UsesMagneticNorth(x)))", "all x.(MapNavigator(x) -> (GridNorth(x) | MagneticNorth(x)))", "all x.(MapNavigator(x) -> (UsesGridNorth(x) | UsesMagneticNorth(x)))", "(all x.(MapNavigator(x) -> UsesGridNorth(x)))"]}
{"id": "eqasc_validation_886", "nl": "A compass is used to find magnetic north.", "fol": "", "prediction": ["all x.(Compass(x) -> FindsMagneticNorth(x))", "all x y.((Compass(x) & MagneticNorth(y)) -> UsedToFind(x,y))", "all x.(Compass(x) -> FindsMagneticNorth(x))", "all x y z.((Compass(x) & MagneticNorth(y) & MagneticNorth(z)) -> UsedToFind(x,y,z))", "all x y.((Compass(x) & MagneticNorth(y)) -> UsedToFind(x,y))", "all x.(Compass(x) -> FindsMagneticNorth(x))", "all x.(Compass(x) -> FoundMagneticNorth(x))", "all x.(Compass(x) -> FindsMagneticNorth(x))", "all x y.((Compass(x) & MagneticNorth(y)) -> UsedToFind(x,y))", "all x y.(Compass(x) -> FindsMagneticNorth(y))", "all x.(Compass(x) -> MagneticNorth(x))", "all x y.((Compass(x) & MagneticNorth(y)) -> UsedToFind(x,y))", "exists x.(Compass(x) & MagneticNorth(x))", "all x.(Compass(x) -> FindsMagneticNorth(x))", "exists x.(Compass(x) & MagneticNorth(x))", "exists x.(Compass(x) & MagneticNorth(x))"]}
{"id": "eqasc_validation_887", "nl": "Magnets are used to navigate oceans", "fol": "", "prediction": ["all x y.((Magnet(x) & Ocean(y)) -> Navigates(x,y))", "all x y z.((Magnet(x) & Ocean(y) & Ocean(z)) -> Navigates(x,y,z))", "all x.(Magnet(x) -> NavigatesOceans(x))", "(all x.(Magnet(x) -> NavigatesOceans(x)))", "all x y.((Magnet(x) & Ocean(y)) -> Navigates(x,y))", "all x y z.((Magnet(x) & Ocean(y) & Ocean(z)) -> Navigates(x,y,z))", "all x.(Magnet(x) -> NavigatesOceans(x))", "all x y z.((Magnet(x) & Ocean(y) & Ocean(z)) -> Navigate(x,y,z))", "all x.(Magnet(x) -> (NavigatesOceans(x) & NavigatesOceans(x)))", "all x y.((Magnet(x) & Ocean(y)) -> Navigates(x,y))", "all x.(Magnet(x) -> NavigatesOceans(x))", "all x.(Magnet(x) -> NavigatesOcean(x))", "all x y z.((Magnet(x) & Ocean(y) & Ocean(z)) -> Navigates(x,y,z))", "all x y.((Magnet(x) & Ocean(y)) -> Navigates(x,y))", "all x.(Magnet(x) -> NavigatesOceans(x))", "All x.(Magnet(x) -> NavigatesOcean(x,y))"]}
{"id": "eqasc_validation_888", "nl": "You can navigate through the Pacific with a compass.", "fol": "", "prediction": ["all x y.((Compass(x) & Pacific(y)) -> NavigatesWith(x,y))", "all x.((Compass(x) & NavigatesPacific(x)) -> CanBeHas(x,Compass))", "all x y.((Compass(x) & Pacific(y)) -> NavigatesWith(x,y))", "all x y z.((Compass(x) & Pacific(y) & Pacific(z)) -> NavigatesWith(x,y,z))", "all x.((Compass(x) & NavigatesPacific(x)) -> CanBeHas(x,Pacific))", "all x.((Compass(x) & NavigatesPacific(x)) -> CanBeHas(x,y))", "exists x.(Navigates(x,Pacific) & Compass(x))", "all x y.((Compass(x) & Pacific(y)) -> NavigatesWith(x,y))", "(NavigateWithCompass(x) -> Pacific(x))", "all x y z.((Compass(x) & Pacific(y) & Pacific(z)) -> NavigatesWith(x,y,z))", "exists x.(NavigatesWithCompass(x) & ThroughPacific(x))", "exists x.(Compass(x) & NavigatesPacific(x))", "all x.((Compass(x) & NavigatesPacific(x)) -> HasCompass(x))", "all x y.((Compass(x) & Pacific(y)) -> Navigates(x,y))", "exists x.(Compass(x) & NavigatesPacific(x))", "all x y.((Compass(x) & Pacific(y)) -> NavigatesWith(x,y))"]}
{"id": "eqasc_validation_889", "nl": "Nautical charts are used by mariners and boaters to safely navigate on the ocean.", "fol": "", "prediction": ["all x y.((NauticalChart(x) & Mariner(y) & Boater(y)) -> SafeNavigate(x,y))", "all x.(NauticalChart(x) -> (UsedByMariners(x) | UsedByBoaters(x)) & NavigatesOnOcean(x)))", "all x y z.((NauticalChart(x) & Mariner(y) & Boater(z)) -> (UsedBy(x,y) & SafeNavigate(x,z)))", "all x y.((NauticalChart(x) & Mariner(y) & Boater(y)) -> NavigatesOnOcean(x,y))", "(all x.(NauticalChart(x) -> UsedByMarinersAndBoaters(x)))", "all x.(NauticalChart(x) -> (UsedByMariners(x) & UsedByBoaters(x) & SafeNavigatesOnOcean(x)))", "all x y z.((NauticalChart(x) & Mariner(y) & Boater(z)) -> (UsedBy(x,y,z) & SafeNavigate(x,y)))", "all x.(NauticalChart(x) -> (UsedByMariners(x) & UsedByBoaters(x) & SafeNavigatesOnOcean(x)))", "(all x.(NauticalChart(x) -> UsedByMarinersAndBoaters(x)))", "all x y.((NauticalChart(x) & Mariner(y) & Boater(y)) -> UsesToSafelyNavigateOnOcean(x,y))", "all x y.((NavigatorChart(x) & Mariner(y) & Boater(y)) -> NavigatesOnOcean(x,y))", "all x y z.((NauticalChart(x) & Mariner(y) & Boater(z)) -> (UsedBy(x,y,z) & NavigatesOnOcean(x,y)))", "all x.(NauticalChart(x) -> (UsedByMariners(x) & UsedByBoaters(x) & NavigatesOnOcean(x)))", "all x y.((NauticalChart(x) & Mariner(y) & Boater(z)) -> SafeNavigator(x,y,z))", "all x.(NauticalChart(x) -> (UsedByMariners(x) | UsedByBoaters(x)) & NavigatesOnOcean(x))", "all x.(NauticalChart(x) -> (UsedByMariners(x) | UsedByBoaters(x)) & NavigatesOnOcean(x))"]}
{"id": "eqasc_validation_890", "nl": "Mariners use the compass to travel the ocean", "fol": "", "prediction": ["all x y.((Mariner(x) & Compass(y)) -> TravelsOcean(x,y))", "all x y z.((Mariner(x) & Compass(y) & Ocean(z)) -> Travels(x,y,z))", "all x y.((Mariner(x) & Compass(y)) -> TravelsOcean(x,y))", "all x.(Mariner(x) -> UsesCompassToTravelOcean(x))", "all x.(Mariner(x) -> UsesCompassToTravelOcean(x))", "all x y z.((Mariner(x) & Compass(y) & Ocean(z)) -> UsesToTravel(x,y,z))", "(all x.(Mariner(x) -> UsesCompassToTravelOcean(x)))", "all x y z.((Mariner(x) & Compass(y) & Ocean(z)) -> Travels(x,y,z))", "all x.(Mariner(x) -> (UsesCompass(x) & TravelsOcean(x)))", "all x.(Mariner(x) -> (UsesCompass(x) & TravelsOcean(x)))", "all x y.((Mariner(x) & Compass(y)) -> TravelsOcean(x,y))", "all x.(Marine(x) -> UseCompassToTravelOcean(x))", "all x y.((Mariner(x) & Compass(y)) -> UsesToTravel(x,y))", "all x y z.((Mariner(x) & Compass(y) & Ocean(z)) -> Travels(x,y,z))", "all x.(Mariner(x) -> UsesCompassToTravelOcean(x))", "all x y.((Mariner(x) & Compass(y)) -> UsesToTravel(x,y))"]}
{"id": "eqasc_validation_891", "nl": "Direction is in degrees from north as measured by a compass.", "fol": "", "prediction": ["all x.(Direction(x) -> (DegreesFromNorth(x) & MeasuredByCompass(x)))", "all x y.((Direction(x) & Compass(y)) -> DegreesFromNorth(x,y))", "all x y.((Direction(x) & Compass(y)) -> (DegreesFromNorth(x,y) & MeasuredBy(x,y)))", "all x y z.((Direction(x) & DegreesFromNorth(y) & Compass(z)) -> MeasuredBy(x,y,z))", "(DegreesFromNorth(Distance) & MeasuredByCompass(Distance))", "all x.(Direction(x) -> (DegreesFromNorth(x) & MeasuredByCompass(x)))", "all x.(Direction(x) -> (DegreesFromNorth(x) & MeasuredByCompass(x)))", "all x.(Direction(x) -> (DegreesFromNorth(x) & MeasuredByCompass(x)))", "all x.(DistanceInDegreesFromNorth(x) & MeasuredByCompass(x))", "(DegreesFromNorth(Distance) & MeasuredByCompass(Distance))", "all x y z.((Direction(x) & DegreesFromNorth(y,z) & Compass(z)) -> MeasuredBy(x,y,z))", "all x y.((Direction(x) & Compass(y)) -> DegreesFromNorth(x,y))", "(DegreesFromNorth(d) & MeasuredByCompass(d))", "all x.(Direction(x) -> (InDegreesFromNorth(x) & MeasuredByCompass(x)))", "all x y.((Direction(x) & Compass(y)) -> (DegreesFromNorth(x,y) & MeasuredBy(x,y)))", "all x.(Direction(x) -> (DegreesFromNorth(x) & MeasuredByCompass(x)))"]}
{"id": "eqasc_validation_892", "nl": "direction in degrees is used to navigate oceans", "fol": "", "prediction": ["all x y.((Direction(x) & Degrees(y)) -> NavigatesOceans(x,y))", "all x.((Direction(x) & Degrees(x)) -> NavigatesOceans(x))", "all x y z.((Direction(x) & Degrees(y) & Ocean(z)) -> Navigates(x,z))", "all x.((DirectionInDegrees(x) & Ocean(y)) -> Navigates(x,y))", "all x y.((Direction(x) & Degree(y)) -> NavigatesOceans(x,y))", "(NavigationOceans(x) & DirectionInDegrees(x))", "(DirectionInDegrees(x) -> NavigatesOceans(x))", "all x.((DirectionInDegrees(x) & Oceans(x)) -> Navigates(x,y))", "all x y.((Direction(x,y) & Degree(y)) -> NavigatesOceans(x,y))", "all x y z.((Direction(x) & Degrees(y) & Ocean(z)) -> Navigates(x,y,z))", "all x.(DegreeDirection(x) -> NavigatesOceans(x))", "(NavigationOcean(x) & DirectionInDegrees(x))", "all x y.((DirectionInDegrees(x) & Ocean(y)) -> Navigates(x,y))", "(DirectionInDegrees(x) -> NavigatesOceans(x))", "all x.((DirectionInDegrees(x) & Oceans(y)) -> Navigates(x,y))", "all x.((DirectionInDegrees(x) & Oceans(x)) -> Navigates(x,Oceans,Oceans))"]}
{"id": "eqasc_validation_893", "nl": "Magnetism is that thing that happens with magnets and compasses and the earth.", "fol": "", "prediction": ["all x.(Magnetism(x) -> (HasMagnets(x) & HasCompasses(x) & HasEarth(x)))", "all x y z.((Magnetism(x) & Magnet(y) & Compasses(z)) -> (OccursWith(x,y,z) & HappensWith(x,y)))", "all x y.((Magnetism(x) & Magnets(y) & Compasses(y) & Earth(y)) -> HappensWith(x,y))", "all x.(Magnetism(x) -> (OccursWithMagnets(x) & HappensWithCompasses(x) & HappensWithEarth(x)))", "all x.(Magnetism(x) -> (HasMagnets(x) & HasCompasses(x) & HasEarth(x)))", "(all x.(Magnetism(x) -> HappensWithMagnetsAndCompassesAndEarth(x)))", "all x.(Magnetism(x) -> (HasMagnets(x) & HasCompasses(x) & HasEarth(x)))", "all x y.((Magnetism(x) & Magnet(y) & Compasses(y) & Earth(y)) -> HappensWith(x,y))", "all x y z.((Magnetism(x) & Magnet(y) & Compasses(z) & Earth(x)) -> HappensWith(x,y,z))", "all x.(Magnetism(x) -> (ShapesWithMagnets(x) & HappensWithCompasses(x) & HappensWithEarth(x)))", "all x.(Magneticism(x) -> (HasMagnets(x) & HasCompasses(x) & HasEarth(x)))", "(all x.(Magnetism(x) -> HappensWithMagnets(x)) & all y.(Compasses(y) -> HappensWithEarth(x)))", "All x.(MagneticsMatter(x) -> (HasMagnetics(x) & HasCompasses(x) & HasEarth(x)))", "all x y z.((Magnetism(x) & Magnet(y) & Compasse(z) & Earth(x)) -> HappensWith(x,y,z))", "all x.(Magnetism(x) -> (HasMagnets(x) & HasCompasses(x) & HasEarth(x)))", "All x.(Magneticism(x) -> (OccursWithMagnets(x) & HappensWithCompasses(x) & HappensWithEarth(x)))"]}
{"id": "eqasc_validation_894", "nl": "magnetism is used to navigate oceans", "fol": "", "prediction": ["all x y.((Magnetism(x) & Ocean(y)) -> Navigates(x,y))", "all x y z.((Magnetism(x) & Ocean(y) & Ocean(z)) -> Navigates(x,y,z))", "all x.(Magnetism(x) -> NavigatesOceans(x))", "(NavigationOceans(Magnetism) -> NavigatesOceans(Magnetism))", "all x y.((Magnetism(x) & Ocean(y)) -> Navigates(x,y))", "(NavigationOceans(Magnetism) & UsesToNavigateOceans(Magnetism))", "all x.(Magnetism(x) -> NavigatesOceans(x))", "(all x.(Magnetism(x) -> NavigatesOceans(x)))", "all x y z.((Magnetism(x) & Ocean(y) & Ocean(z)) -> Navigates(x,y,z))", "all x.(Magnetism(x) -> NavigatesOceans(x))", "all x.(MagneticsMagnetic(x) -> NavigatesOceans(x))", "all x y.((Magnetism(x) & Ocean(y)) -> Navigates(x,y))", "all x y z.((Magnetism(x) & Ocean(y) & Ocean(z)) -> Navigate(x,y,z))", "all x.(Magnetism(x) -> NavigatesOceans(x))", "all x.(Magnetism(x) -> NavigatesOceans(x))", "all x y.((Magnetism(x) & Ocean(y)) -> Navigates(x,y))"]}
{"id": "eqasc_validation_895", "nl": "Large ocean-going vessels use a gyrocompass as their steering compass.", "fol": "", "prediction": ["all x.((OceanGoingVessel(x) & UsesGyrocompass(x)) -> SteeringCompass(x))", "all x.((LargeOceanGoingVessel(x) & UsesGyrocompass(x)) -> SteeringCompass(x))", "all x y.((LargeOceanGoingVessel(x) & Gyrocompass(y)) -> UsesAsSteeringCompass(x,y))", "all x.(LargeOceanGoingVessel(x) -> UsesGyrocompassAsSteeringCompass(x))", "all x.(OceanGoingVessel(x) -> UsesGyrocompassAsSteeringCompass(x))", "all x.((OceanGoingVessel(x) & Large(x)) -> UsesGyrocompassAsSteeringCompass(x))", "all x y z.((LargeOceanGoingVessel(x) & Gyrocompass(y) & SteeringCompass(z)) -> Uses(x,y,z))", "all x y.((LargeOceanGoingVessel(x) & Gyrocompass(y)) -> UsesAsSteeringCompass(x,y))", "all x.(LargeOceanGoingVessel(x) -> UsesGyrocompassAsSteeringCompass(x))", "all x y.((LargeOceanGoingVessel(x) & Gyrocompass(y)) -> UsesAsSteeringCompass(x,y))", "all x y.((LargeOceanGoingVessel(x) & Gyrocompass(y)) -> UsesAsSteeringCompass(x,y))", "all x y z.((LargeOceanGoingVessel(x) & Gyrocompass(y) & SteeringCompass(z)) -> Uses(x,y,z))", "all x.(OceanGoingVessel(x) -> UsesGyrocompass(x))", "all x.((LargeOceanGoingVessel(x) & UsesGyrocompass(x)) -> SteeringCompass(x))", "all x.(LargeOceanGoingVessel(x) -> UsesGyrocompassAsSteeringCompass(x))", "all x y.((LargeOceanGoingVessel(x) & GyroCompass(y)) -> SteeringCompass(x,y))"]}
{"id": "eqasc_validation_896", "nl": "compasses are used for steering", "fol": "", "prediction": ["all x.(Compass(x) -> UsedForSteering(x))", "all x.(Compasse(x) -> (UsedForSteering(x) & Steering(x)))", "all x y.((Compass(x) & Steering(y)) -> UsedFor(x,y))", "all x.(Compass(x) -> (UsedForSteering(x) & Steering(x)))", "all x y.((Compasse(x) & Steering(y)) -> UsedFor(x,y))", "all x.(Compasse(x) -> UsedForSteering(x))", "all x y z.((Compass(x) & Steering(y) & Steering(z) & UsedFor(x,y,z)) -> UsedFor(x,y))", "all x y.((Compass(x) & Steering(y)) -> UsedFor(x,y))", "all x.(Compasse(x) -> (UsedForSteering(x) & Steering(x)))", "all x.(Compass(x) -> UsedForSteering(x))", "(all x.(Compass(x) -> SteeringCompasses(x)))", "all x y.((Compasse(x) & Steering(y)) -> UsedFor(x,y))", "all x y.((Compass(x) & SteeringCompasse(y)) -> UsedFor(x,y))", "(all x.(Compass(x) -> UsedForSteering(x)))", "all x.(Compass(x) -> (UsedForSteering(x) & Steering(x)))", "all x.(Compasse(x) -> UsedForSteering(x))"]}
{"id": "eqasc_validation_897", "nl": "Precipitation increases moisture.", "fol": "", "prediction": ["all x.(Precipitation(x) -> IncreasesMoisture(x))", "all x.(Precipitation(x) -> IncreasesMoisture(x))", "(IncreasesMoisture(precipitation)", "all x y.((Precipitation(x) & Moisture(y)) -> Increases(x,y))", "all x.(Precipitation(x) -> IncreasesMoisture(x))", "all x y.((Precipitation(x) & Moisture(y)) -> Increases(x,y))", "all x y.((Precipitation(x) & Moisture(y) & Increases(x,y)) -> Increases(x,y))", "all x.(Precipitation(x) -> IncreasesMoisture(x))", "all x y.((Precipitation(x) & Moisture(y) & Increases(x,y)) -> Increases(x,y))", "all x.(Precipitation(x) -> IncreasesMoisture(x))", "all x y.((Precipitation(x) & Moisture(y) & Increases(x,y)) -> Increases(x,y))", "all x.(Precipitation(x) -> IncreasesMoisture(x))", "exists x.(Precipitation(x) & IncreasesMoisture(x))", "all x.(Precipitation(x) -> IncreasesMoisture(x))", "all x.(Precipitation(x) -> IncreasesMoisture(x))", "All x.(Precipitation(x) -> IncreasesMoisture(x))"]}
{"id": "eqasc_validation_898", "nl": "And precipitation amounts depend on the rate at which moisture condenses.", "fol": "", "prediction": ["(all x.(MoistureCondensation(x) -> DependsOnRate(x)))", "all x.(Precipitation(x) -> DependsOnMoistureCondensation(x))", "(all x.((MoistureCondensation(x)) -> DependsOnRate(x)))", "all x.(PrecipitationAmount(x) -> DependsOnMoistureCondensation(x))", "-(MoistureCondensation(m) & Rate(m)) -> PrecipitationAmount(m))", "(all x y.((MoistureCondensation(x) & Rate(y)) -> DependsOn(x,y)))", "(all x.((MoistureCondensation(x) & Rate(x)) -> DependsOn(x,MoistureCondensation))", "& PrecipitationAmountsDependsOnMoistureCondensation(x)", "all x y.((PrecipitationAmount(x) & MoistureCondensation(y)) -> DependsOnRate(x,y))", "All x.(MoistureCondensation(x) -> DependsOnRate(x,MoistureCondensation))", "(all x.(MoistureCondensation(x) -> DependsOnRate(x)))", "all x.(Precipitation(x) -> DependsOnMoistureCondensation(x))", "All x.(Precipitation(x) -> DependsOnRateAtWorthCondensation(x))", "all x y.((PrecipitationAmount(x) & MoistureCondensation(y)) -> DependsOnRate(x,y))", "(all x.(MoistureCondensation(x) -> DependsOnRate(x)))", "(all x.(MoistureCondensation(x) -> DependsOnRate(x,MoistureCondenses))"]}
{"id": "eqasc_validation_899", "nl": "the amount of precipitation depends on condensation", "fol": "", "prediction": ["all x.(Precipitation(x) -> DependsOnCondensation(x))", "all x y.((Precipitation(x) & Condensation(y)) -> DependsOn(x,y))", "all x.((Precipitation(x) & DependsOnCondensation(x)) -> DependsOnCondensation(x))", "(DependsOnCondensation(amountOfPrecipitation) & DependsOnCondensation(amountOfPrecipitation))", "all x y z.((Precipitation(x) & Condensation(y) & Condensation(z)) -> DependsOn(x,y,z))", "all x.((PrecipitationAmount(x) & DependsOnCondensation(x)) -> DependsOnCondensation(x))", "all x.(Precipitation(x) -> DependsOnCondensation(x))", "all x y z.((PrecipitationAmount(x) & Condensation(y) & Condensation(z)) -> DependsOn(x,y,z))", "all x y.((Precipitation(x) & Condensation(y)) -> DependsOn(x,y))", "all x y.((Precipitation(x) & Condensation(y) & DependsOn(x,y)) -> DependsOn(x,y))", "(depends on condensation) & precipitation(s) & DependsOnCondensation(s))", "all x y.((PrecipitationAmount(x) & Condensation(y)) -> DependsOn(x,y))", "(depends on condensation) -> PrecipitationAmount(x))", "exists x,y,z.(Precipitation(x) & Condensation(y) & DependsOn(x,z))", "exists x.(PrecipitationAmount(x) & DependsOnCondensation(x))", "all x.(Precipitation(x) -> DependsOnCondensation(x))"]}
{"id": "eqasc_validation_900", "nl": "Rain increases moisture.", "fol": "", "prediction": ["all x.(Rain(x) -> IncreasesMoisture(x))", "all x.(Rain(x) -> IncreasesMoisture(x))", "all x y.((Rain(x) & Moisture(y)) -> Increases(x,y))", "(IncreasesMoisture(Rain))", "all x.(Rain(x) -> IncreasesMoisture(x))", "all x y.((Rain(x) & Moisture(y)) -> Increases(x,y))", "(IncreasesMoisture(Rain)", "all x.(Rain(x) -> IncreasesMoisture(x))", "all x y.((Rain(x) & Moisture(y) & Increases(x,y)) -> Increases(x,y))", "(IncreasesMoisture(Rain)", "all x y.((Rain(x) & Moisture(y)) -> Increases(x,y))", "all x y.((Rain(x) & Moisture(y) & Increases(x,y)) -> Increases(x,y))", "all x.(Rain(x) -> IncreasesMoisture(x))", "all x.(Rain(x) -> IncreasesMoisture(x))", "All x.(Rain(x) -> IncreasesMoisture(x))", "All x.(Rain(x) -> IncreasesMoisture(x))"]}
{"id": "eqasc_validation_901", "nl": "Rain is liquid precipitation.", "fol": "", "prediction": ["all x.(Rain(x) -> LiquidPrecipitation(x))", "(LiquidPrecipitation(Rain))", "all x y.((Rain(x) & LiquidPrecipitation(y)) -> Is(x,y))", "all x.(Rain(x) -> LiquidPrecipitation(x))", "all x y.((Rain(x) & LiquidPrecipitation(y)) -> LiquidPrecipitation(x,y))", "(LiquidPrecipitation(Rain))", "(LiquidPrecipitation(r) & Rain(r))", "all x.(Rain(x) -> LiquidPrecipitation(x))", "all x.(Rain(x) -> (LiquidPrecipitation(x) & -LiquidPrecipitation(x)))", "all x.(Rain(x) -> LiquidPrecipitation(x))", "all x y.((Rain(x) & Precipitation(y)) -> Liquid(x,y))", "all x.(Rain(x) -> LiquidPrecipitation(x))", "all x.(Rain(x) -> LiquidPrecipitation(x))", "all x.(Rain(x) -> LiquidPrecipitation(x))", "all x.(Rain(x) -> LiquidPrecipitation(x))", "All x.(Rain(x) -> LiquidPrecipitation(x))"]}
{"id": "eqasc_validation_902", "nl": "rain increases moisture", "fol": "", "prediction": ["all x.(Rain(x) -> IncreasesMoisture(x))", "all x y.((Rain(x) & Moisture(y)) -> Increases(x,y))", "all x y z.((Rain(x) & Moisture(y) & Moisture(z)) -> Increases(x,y,z))", "(IncreasesMoistureWithRain(rain) -> IncreasesMoisture(rain))", "all x.(Rain(x) -> IncreasesMoisture(x))", "all x y.((Rain(x) & Moisture(y)) -> Increases(x,y))", "rain increases moisture (moisture) -> Increases(Rain,Rain))", "all x y.((Rain(x) & Moisture(y) & Increases(x,y)) -> Increases(x,y))", "all x y z.((Rain(x) & Moisture(y) & Moisture(z)) -> Increases(x,y,z))", "rain increases moisture (moisture) -> Increases(Rain))", "all x.(Rain(x) -> IncreasesMoisture(x))", "all x y.((Rain(x) & Moisture(y) & Increases(x,y)) -> Increases(x,y))", "rain increases moisture by 5%.", "all x.(Rain(x) -> IncreasesMoisture(x))", "all x.(Rain(x) -> IncreasesMoisture(x))", "all x.(Rain(x) -> IncreasesMoisture(x))"]}
{"id": "eqasc_validation_903", "nl": "Local precipitation increases sharply with altitude.", "fol": "", "prediction": ["all x.((LocalPrecipitation(x) & Altitude(x)) -> IncreasesSharply(x))", "all x y.((LocalPrecipitation(x) & Altitude(y)) -> IncreasesSharply(x,y))", "all x.(LocalPrecipitation(x) -> IncreasesSharplyWithAltitude(x))", "all x.((LocalPrecipitation(x) & Altitude(x)) -> IncreasesSharply(x))", "localprecipitation increases sharply with altitude.", "all x y.((LocalPrecipitation(x) & Altitude(y)) -> IncreasesSharply(x,y))", "all x.((LocalPrecipitation(x) & Altitude(x)) -> IncreasesSharply(x))", "all x.(LocalPrecipitation(x) -> IncreasesSharplyWithAltitude(x))", "all x.((Precipitation(x) & Altitude(x)) -> IncreasesSharply(x))", "all x y.((LocalPrecipitation(x) & Altitude(y)) -> IncreasesSharply(x,y))", "all x.((LocalPrecipitation(x) & Altitude(x)) -> IncreasesSharply(x))", "all x.(LocalPrecipitation(x) -> IncreasesSharplyWithAltitude(x))", "all x y.((LocalPrecipitation(x) & Altitude(y)) -> IncreasesSharply(x,y))", "all x.((LocalPrecipitation(x) & Altitude(y)) -> IncreasesSharply(x,y))", "All x y.((LocalPrecipitation(x) & Altitude(y)) -> IncreasesSharplyWith(x,y))", "all x.((LocalPrecipitation(x) & Altitude(x)) -> IncreasesSharply(x))"]}
{"id": "eqasc_validation_904", "nl": "moisture increases sharply with altitude", "fol": "", "prediction": ["all x.((Moisture(x) & Altitude(x)) -> IncreasesSharplyWithAltitude(x))", "all x y.((Moisture(x) & Altitude(y)) -> IncreasesSharplyWith(x,y))", "all x y z.((Moisture(x) & Altitude(y) & Altitude(z)) -> IncreasesSharplyWith(x,y,z))", "all x.((Moisture(x) & Altitude(x)) -> IncreasesSharply(x))", "altitude.(MoistureIncreasesSharplyWithAltitude(Moisture))", "all x y.((Moisture(x) & Altitude(y)) -> IncreasesSharplyWith(x,y))", "all x.(Altitude(x) -> IncreasesMoistureSharply(x))", "all x.((Moisture(x) & Altitude(x)) -> IncreasesSharplyWith(x,Altitude))", "all x y.((Airplane(x) & Altitude(y)) -> IncreasesMoistureSharply(x,y))", "All x.(Moisture(x) -> IncreasesSharplyWithAltitude(x))", "all x y z.((Moisture(x) & Altitude(y) & Altitude(z)) -> IncreasesSharplyWith(x,y,z))", "all x.((Moisture(x) & Altitude(x)) -> SharpMoistureIncrease(x))", "all x y.((Moisture(x) & Altitude(y)) -> IncreasesSharply(x,y))", "All x.(Altitude(x) -> IncreasesMoistureSharply(x))", "all x.((Moisture(x) & Altitude(x)) -> IncreasesSharply(x,Altitude))", "All x.((Moisture(x) & Altitude(y)) -> SharpMoistureIncrease(x,y))"]}
{"id": "eqasc_validation_905", "nl": "Moisture conditions range from damp to dry.", "fol": "", "prediction": ["all x.(MoistureCondition(x) -> (Damp(x) | Dry(x)))", "all x y.((MoistureCondition(x) & (Damp(y) | Dry(y))) -> RangesFrom(x,y))", "(MoistureConditions(m) & (Damp(m) | Dry(m)))", "all x.(MoistureCondition(x) -> (Damp(x) | Dry(x)))", "all x.((MoistureCondition(x) & (Damp(x) | Dry(x))) -> MoistureCondition(x))", "all x y.((MoistureCondition(x) & (Damp(y) | Dry(y))) -> RangesFrom(x,y))", "all x y z.((MoistureCondition(x) & (Damp(y) | Dry(y))) -> RangesFrom(x,y,z))", "all x.(MoistureCondition(x) -> (Damp(x) | Dry(x)))", "(all x.(MoistureCondition(x) -> (Damp(x) | Dry(x))))", "all x y.((MoistureCondition(x) & (Damp(y) | Dry(y))) -> Range(x,y))", "all x y.((MoistureCondition(x) & Damp(y) & Dry(z)) -> RangesFrom(x,y,z))", "all x.(MoistureCondition(x) -> (Damp(x) | Dry(x)))", "exists x.(Moisture(x) & (Damp(x) | Dry(x)))", "all x.(MoistureCondition(x) -> (Damp(x) | Dry(x)))", "all x.(MoistureCondition(x) -> (Damp(x) | Dry(x)))", "all x.(MoistureCondition(x) -> (Damp(x) & Dry(x)))"]}
{"id": "eqasc_validation_906", "nl": "Precipitation increases conditions from dry to damp", "fol": "", "prediction": ["all x y.((Precipitation(x) & DryCondition(y) & DampCondition(y)) -> IncreasesConditions(x,y))", "all x y z.((Precipitation(x) & DryCondition(y) & DampCondition(z)) -> IncreasesConditions(x,y,z))", "all x.(Precipitation(x) -> IncreasesConditionsFromDryToDamp(x))", "(IncreasesConditionsFromDryToDamp(precipitation))", "all x y.((Precipitation(x) & DryCondition(y)) -> IncreasesConditions(x,y))", "all x y z.((Precipitation(x) & DryCondition(y) & DriedCondition(z)) -> IncreasesConditions(x,y,z))", "all x y.((Precipitation(x) & DryToDampConditions(y)) -> IncreasesConditions(x,y))", "all x.(Precipitation(x) -> IncreasesConditionsFromDryToDamp(x))", "(IncreasesConditionsFromDryToDamp(Precipitation))", "all x y z.((Precipitation(x) & DryCondition(y) & DampCondition(z)) -> IncreasesConditionsFromTo(x,y,z))", "all x.(PrecipitationIncreasesConditionsFromDryToDamp(x))", "all x.(PrecipitationIncreasesConditions(x) -> (DryToDamp(x) & IncreasesConditions(x)))", "all x.(Precipitation(x) -> IncreasesConditionsFromDryToDamp(x))", "all x y.((Precipitation(x) & DryConditions(y) & DampConditions(y)) -> IncreasesConditions(x,y))", "all x.(PrecipitationIncreasesConditionsFromDryToDamp(x))", "all x y z.((Precipitation(x) & DryCondition(y) & DampCondition(z)) -> Increases(x,y,z))"]}
{"id": "eqasc_validation_907", "nl": "Moisture is a necessary ingredient for the production of clouds and precipitation.", "fol": "", "prediction": ["all x.(Moisture(x) -> (NecessaryIngredient(x) & ProducesClouds(x) & ProducesPrecipitation(x)))", "(NecessaryIngredientForClouds(moisture) & NecessaryIngredientForPrecipitation(moisture))", "all x.(Moisture(x) -> (NecessaryIngredientForClouds(x) & NecessaryIngredientForPrecipitation(x)))", "all x y.((Moisture(x) & Cloud(y)) -> (NecessaryIngredientFor(x,y) & Produces(x,y) & Precipitation(x)))", "all x y.((Moisture(x) & Cloud(y) & Precipitation(y)) -> NecessaryIngredientFor(x,y))", "all x y z.((Moisture(x) & Cloud(y) & Precipitation(z)) -> (NecessaryIngredientFor(x,y,z) & Produces(x,y)))", "all x.((Moisture(x) & ProductionOfClouds(x) & Precipitation(x)) -> NecessaryIngredient(x))", "(NecessaryIngredientForCloudsAndPrecipitation(moisture))", "all x.(Moisture(x) -> (NecessaryIngredient(x) & ProductionOfClouds(x) & Precipitation(x)))", "(NecessaryIngredientForCloudsAndPrecipitation(moisture))", "all x.(Moisture(x) -> (NecessaryIngredientForClouds(x) & NecessaryIngredientForPrecipitation(x)))", "all x y.((Moisture(x) & Cloud(y)) -> (NecessaryIngredientFor(x,y) & Precipitation(y)))", "all x.(Moisture(x) -> (NecessaryIngredient(x) & ProducesClouds(x) & ProducesPrecipitation(x)))", "exists x.(MoistureIngredient(x) & NecessaryForCloudsAndPrecipitation(x))", "all x.(Moisture(x) -> (NecessaryIngredient(x) & ProducesClouds(x) & ProducesPrecipitation(x)))", "all x.(Moisture(x) -> (NecessaryIngredientForClouds(x) & NecessaryIngredientForPrecipitation(x)))"]}
{"id": "eqasc_validation_908", "nl": "clouds are necessary for precipitation", "fol": "", "prediction": ["all x.(Cloud(x) -> NecessaryForPrecipitation(x))", "all x y.((Cloud(x) & Precipitation(y)) -> NecessaryFor(x,y))", "(NecessaryForPrecipitation(clouds) -> NecessaryForPrecipitation(clouds))", "all x.(Cloud(x) -> PrecipitationNecessaryForPrecipitation(x))", "all x y z.((Cloud(x) & Precipitation(y) & Precipitation(z)) -> NecessaryFor(x,y,z))", "all x y.((Cloud(x) & Precipitation(y)) -> NecessaryForPrecipitation(x,y))", "(NecessaryForPrecipitationClouds(clouds) -> NecessaryForPrecipitation(clouds))", "all x.(Cloud(x) -> NecessaryForPrecipitation(x))", "(NecessaryForPrecipitation(clouds) -> NecessaryForPrecipitation(clouds))", "all x y.((Cloud(x) & Precipitation(y)) -> NecessaryFor(x,y))", "all x.(Cloud(x) -> PrecipitationNecessaryForPrecipitation(x))", "all x.(Clouds(x) -> PrecipitationNecessaryForPrecipitation(x))", "all x y z.((Cloud(x) & Precipitation(y) & Precipitation(z)) -> NecessaryFor(x,y,z))", "all x y.((Cloud(x) & Precipitation(y)) -> NecessaryForPrecipitation(x,y))", "all x.(Cloud(x) -> NecessaryForPrecipitation(x))", "exists x.(Cloud(x) & NecessaryForPrecipitation(x))"]}
{"id": "eqasc_validation_909", "nl": "Most precipitation occurs as rainfall.", "fol": "", "prediction": ["all x.(Precipitation(x) -> Rainfall(x))", "(MostPrecipitationOccursAsRainfall(MostPrecipitationOccursAsRainfall(MostPrecipitation))", "-all x.(Precipitation(x) -> Rainfall(x))", "(all x.(Precipitation(x) -> Rainfall(x)))", "all x.(Precipitation(x) -> Rainfall(x))", "all x y.((Precipitation(x) & Rainfall(y)) -> OccursAs(x,y))", "(MostPrecipitationOccursAsRainfall(MostPrecipitationOf(MostPrecipitation(MostPrecipitation(MostPrecipitation))", "all x.(Precipitation(x) -> OccursAsRainfall(x))", "all x.(Precipitation(x) -> Rainfall(x))", "all x y.((Precipitation(x) & Rainfall(y)) -> Occurs(x,y))", "all x.(Precipitation(x) -> OccursAsRainfall(x))", "all x.(Precipitation(x) -> OccursAsRainfall(x))", "all x.(Precipitation(x) -> Rainfall(x))", "all x.(Precipitation(x) -> RainfallOccurs(x))", "exists x.(Precipitation(x) & Rainfall(x))", "exists x.(Precipitation(x) & Rainfall(x))"]}
{"id": "eqasc_validation_910", "nl": "Rainfall increases moisture.", "fol": "", "prediction": ["all x.(Rainfall(x) -> IncreasesMoisture(x))", "(IncreasesMoisture(Rainfall)", "all x y.((Rainfall(x) & Moisture(y)) -> Increases(x,y))", "all x.(Rainfall(x) -> IncreasesMoisture(x))", "(IncreasesMoisture(Rainfall)", "all x.(Rainfall(x) -> IncreasesMoisture(x))", "all x y.((Rainfall(x) & Moisture(y)) -> Increases(x,y))", "(IncreasesMoisture(rainfall)", "all x.(Rainfall(x) -> IncreasesMoisture(x))", "all x y.((Rainfall(x) & Moisture(y) & Increases(x,y)) -> Increases(x,y))", "all x y.((Rainfall(x) & Moisture(y)) -> Increases(x,y))", "all x y.((Rainfall(x) & Moisture(y) & Increases(x,y)) -> Increases(x,y))", "all x.(Rainfall(x) -> IncreasesMoisture(x))", "all x.(Rainfall(x) -> IncreasesMoisture(x))", "all x.(Rainfall(x) -> IncreasesMoisture(x))", "All x.(Rainfall(x) -> IncreasesMoisture(x))"]}
{"id": "eqasc_validation_911", "nl": "All precipitation amounts are in inches.", "fol": "", "prediction": ["all x.(PrecipitationAmount(x) -> InInches(x))", "(AllPrecipitationAmountsInInches(x))", "(all x.(PrecipitationAmount(x) -> InInches(x))", "all x.(PrecipitationAmount(x) -> InInches(x))", "all x y.((PrecipitationAmount(x) & InInch(y)) -> PrecipitationAmount(x,y))", "all x.(Precipitation(x) -> InInches(x))", "all x.(PrecipitationAmount(x) -> InInches(x))", "(AllPrecipitationAmountsInInches(x))", "all x.(Precipitation(x) -> InInches(x))", "all x.(PrecipitationAmount(x) -> InInches(x))", "all x.(Precipitation(x) -> InInches(x))", "all x.(PrecipitationAmount(x) -> InInch(x))", "All x.(Precise(x) -> InInch(x))", "all x.(Precipitation(x) -> InInches(x))", "all x.(PrecipitationAmount(x) -> InInches(x))", "All x.(PrecipitationAmount(x) -> InInches(x))"]}
{"id": "eqasc_validation_912", "nl": "moisture is measured in inches ", "fol": "", "prediction": ["all x.(MeasuresMoistureInInches(x) -> MoistureMeasuredInInches(x))", "(MeasuresMoistureInInches(MeasuresMoistureInInches(MeasuresMoistureInInches(MeasuresMoistureInInches(MeasuresMoistureInInches(MeasuresMoistureInInches(MeasuresMoistureInInches(MeasuresMoistureInInches(MeasuresMoistureInInches(MoistureInInches(MoistureInInches(MoistureInInches(MoistureInInches(MoistureInInches(MoistureInInches(MoistureInInches(MoistureInInches(MoistureInInches(MoistureInInches(MoistureInInches(MoistureInInches(MoistureInInches(MoistureInInches(MoistureInInches(MoistureInInches)))))", "all x.(MeasuredInInches(x) -> Moisture(x))", "all x y.((Moisture(x) & InInches(y)) -> MeasuredInInches(x,y))", "(MeasuresInInches(moisture) -> MoistureMeasuredInInches(moisture))", "all x.(MeasuresMoistureInInches(x) -> MoistureMeasuredInInches(x))", "all x y.((Moisture(x) & InInches(y)) -> MeasuredInInches(x,y))", "all x.((MeasuredMoisture(x) & InInches(x)) -> MoistureMeasuredInInches(x))", "all x.(MeasuredInInches(x) -> MoistureMeasuredInInches(x))", "all x y z.((Moisture(x) & InInch(y) & InInch(z)) -> MeasuredInInch(x,y,z))", "(MeasuredInInches(moisture,inInches) -> MoistureMeasuredInInches(moisture,inInches))", "(MeasuredInInches(moisture) -> MoistureMeasuredInInches(moisture))", "all x y.((Moisture(x) & InInch(y)) -> MeasuredInInch(x,y))", "All x.(MeasuresMeasurement(x,inches) -> MoistureMeasurement(x,inches))", "all x.(MeasuresMoistureInInches(x) -> MoistureMeasuredInInches(x))", "all x.(MeasuredInInches(x) -> Moisture(x))"]}
{"id": "eqasc_validation_913", "nl": "Moisture is related to the electrical conductivity, which increases with increasing moisture levels.", "fol": "", "prediction": ["all x.(Moisture(x) -> (RelatedToElectricalConductivity(x) & IncreasesWithIncreasedMoistureLevels(x)))", "all x y.((Moisture(x) & ElectricalConductivity(y)) -> IncreasesWithIncreasedMoisture(x,y))", "(all x.(Moisture(x) -> ElectricalConductivity(x)) & increasesWithIncreasedMoisture(x))", "all x.(Moisture(x) -> (ElectricalConductivity(x) & IncreasesWithIncreasedMoisture(x)))", "all x y z.((Moisture(x) & ElectricalConductivity(y) & MoistureLevel(z)) -> (RelatedTo(x,y) & IncreasesWithIncrease(x,z)))", "all x y.((Moisture(x) & ElectricalConductivity(y)) -> IncreasesWithIncreasedMoistureLevels(x,y))", "(all x.(Moisture(x) -> ElectricalConductivity(x)) & increasesWithIncreasedMoisture(x))", "all x.(Moisture(x) -> (RelatedToElectricalConductivity(x) & IncreasesWithIncreasedMoisture(x)))", "all x y.((Moisture(x) & ElectricalConductivity(y)) -> (RelatedTo(x,y) & IncreasesWithIncreasedMoisture(x)))", "all x y z.((Moisture(x) & ElectricalConductivity(y) & MoistureLevel(z)) -> (RelatedTo(x,y,z) & IncreasesWithIncrease(x,y,z)))", "(all x.(Moisture(x) -> ElectricalConductivity(x)) & IncreasesWithIncreasedMoisture(x))", "all x.(Moisture(x) -> (ElectricalConductivity(x) & IncreasesWithIncreasedMoistureLevels(x)))", "all x.(Moisture(x) -> (RelatedToElectricalConductivity(x) & IncreasesWithIncreasedMoistureLevels(x)))", "all x.(Moisture(x) -> (ElectricalConductivity(x) & IncreasesWithIncreasedMoisture(x)))", "all x y.((Moisture(x) & ElectricConductivity(y)) -> (IncreasesWithIncreasedMoisture(x,y)))", "all x.(Moisture(x) -> (ElectricalConductivity(x) & IncreasesWithIncreasedMoisture(x)))"]}
{"id": "eqasc_validation_914", "nl": "The electrical conductivity of wood increases after precipitation falls on it", "fol": "", "prediction": ["all x y.((Wood(x) & Precipitation(y) & FallsOn(x,y)) -> IncreasesElectricalConductivity(x))", "all x.((Wood(x) & PrecipitationFallsOn(x)) -> IncreasesElectricalConductivity(x))", "all x y z.((Wood(x) & Precipitation(y) & Precipitation(z) & FallsOn(x,y,z)) -> IncreasesElectricalConductivity(x))", "all x y.((Wood(x) & Precipitation(y)) -> IncreasesElectricalConductivity(x,y))", "(ElectricalConductivityOfWood(x) & PrecipitationFallsOn(x,Wood))", "all x.((Wood(x) & Precipitation(x)) -> IncreasesElectricalConductivity(x))", "(all x.((Wood(x) & Precipitation(x)) -> IncreasesElectricalConductivity(x)))", "all x.((Wood(x) & PrecipitationFallsOn(x,Wood)) -> IncreasesElectricalConductivity(x))", "all x y z.((Wood(x) & Precipitation(y) & Precipitation(z)) -> IncreasesElectricalConductivity(x,y,z))", "all x y.((Wood(x) & Precipitation(y) & FallsOn(x,y)) -> IncreasesElectricalConductivity(x,y))", "(ElectricalConductivityOfWood(x) & PrecipitationFallsOn(x))", "all x.((Wood(x) & Precipitation(x)) -> IncreasesElectricalConductivity(x))", "all x y.((Wood(x) & Precipitation(y)) -> IncreasesElectricalConductivity(x,y))", "All x.((Wood(x) & PrecipitationFallsOn(x,Wood)) -> IncreasesElectricalConductivity(x,Wood))", "all x y.((Wood(x) & PrecipitationFallsOn(y,x)) -> IncreasesElectricalConductivity(x))", "All x.((Wood(x) & Precipitation(x)) -> IncreasesElectricalConductivity(x))"]}
{"id": "eqasc_validation_915", "nl": "a spider web is used to capture food by spiders", "fol": "", "prediction": ["all x y z.((SpiderWeb(x) & Spider(y) & Food(z)) -> CapturesBy(x,y,z))", "all x y.((SpiderWeb(x) & Spider(y)) -> CapturesFood(x,y))", "all x y z.((SpiderWeb(x) & Spider(y) & Food(z)) -> CapturesBy(x,y,z))", "all x.(SpiderWeb(x) -> CapturesFood(x))", "all x y.((SpiderWeb(x) & Spider(y)) -> CapturesFood(x,y))", "all x.((SpiderWeb(x) & UsedToCaptureFood(x)) -> Spiders(x))", "all x.(SpiderWeb(x) -> CapturesFoodBySpiders(x))", "all x y z.((SpiderWeb(x) & Spider(y) & Food(z)) -> Captures(x,y,z))", "all x.((SpiderWeb(x) & CapturesFood(x,spiders)) -> UsedToCapture(x,spiders))", "all x y.((SpiderWeb(x) & Spider(y)) -> CapturesFoodBy(x,y))", "all x y z.((SpiderWeb(x) & Spider(y) & Food(z) & Captures(x,y,z)) -> UsedBy(x,y))", "all x y z.((SpiderWeb(x) & Food(y) & Spider(z)) -> UsedToCapture(x,y,z))", "exists x.(SpiderWeb(x) & UsedToCaptureFood(x,spiders))", "all x y.((SpiderWeb(x) & Spider(y)) -> CapturesFood(x,y))", "all x.(SpiderWeb(x) -> CapturesFood(x))", "all x y.((SpiderWeb(x) & Spider(y)) -> CapturesFoodBy(x,y))"]}
{"id": "eqasc_validation_916", "nl": "Black widow spiders construct funnel-shaped webs.", "fol": "", "prediction": ["all x.(BlackWifeSpider(x) -> ConstructsFunnelShapedWebs(x))", "all x y.((BlackWifeSpider(x) & Web(y)) -> ConstructsFunnelShaped(x,y))", "all x.(BlackWifeSpider(x) -> ConstructsFunnelShapedWebs(x))", "all x y z.((BlackWife(x) & Web(y) & Web(z)) -> Constructs(x,y,z))", "(BlackWifeSpider(x) & ConstructsFunnelShapedWebs(x))", "all x y.((BlackWifeSpider(x) & Web(y)) -> ConstructsFunnelShapes(x,y))", "all x y.((BlackWitch(x) & Spider(y)) -> ConstructsFunnelShapedWebs(x,y))", "all x.(BlackWildWifeSpider(x) -> ConstructsFunnelShapedWebs(x))", "all x y.((BlackWife(x) & Spider(y)) -> ConstructsFunnelShapedWebs(x))", "all x.(BlackWifeSpider(x) -> ConstructsFunnelShapedWebs(x))", "all x.(BlackWitch(x) -> ConstructsFunnelShapedWebs(x))", "all x.(BlackWildwishSpider(x) -> ConstructsFunnelShapedWebs(x))", "all x.(BlackWifeSpider(x) -> ConstructsFunnelShapedWebs(x))", "all x.(BlackWifeSpider(x) -> (ConstructsFunnelShapedWebs(x)))", "exists x.(BlackWitch(x) & Spider(x) & ConstructsFunnelShapedWebs(x))", "all x y.((BlackWildWife(x) & Web(y)) -> ConstructsFunnelShapes(x,y))"]}
{"id": "eqasc_validation_917", "nl": "black widows use webs to capture food", "fol": "", "prediction": ["all x.(BlackWife(x) -> UsesWebsToCaptureFood(x))", "all x y.((BlackWife(x) & Web(y)) -> UsesToCaptureFood(x,y))", "all x y z.((BlackWife(x) & Web(y) & Food(z)) -> UsesToCapture(x,y,z))", "all x.(BlackWife(x) -> UsesWebsToCaptureFood(x))", "all x y.((BlackWife(x) & Web(y)) -> UsesToCaptureFood(x,y))", "all x y z.((BlackWife(x) & Web(y) & Food(z)) -> UsesToCapture(x,y,z))", "all x.(BlackWildwives(x) -> UseWebsToCaptureFood(x))", "blackWifesUseWebsToCaptureFood(w))", "all x y.((BlackWildwift(x) & Web(y)) -> UsesToCaptureFood(x,y))", "all x.(BlackWife(x) -> UsesWebsToCaptureFood(x))", "all x.((BlackWife(x) & UsesWebs(x)) -> CapturesFood(x))", "all x y.((BlackWife(x) & Web(y)) -> UsesToCaptureFood(x,y))", "all x y z.((BlackWife(x) & Web(y) & Food(z)) -> UsesToCapture(x,y,z))", "all x.(BlackWildwives(x) -> UseWebsToCaptureFood(x))", "all x.(BlackWondow(x) -> (UsesWebs(x) & CapturesFood(x)))", "all x.(BlackWife(x) -> UsesWebsToCaptureFood(x))"]}
{"id": "eqasc_validation_918", "nl": "Spiders inject venom into the body of a captured insect to paralyze it.", "fol": "", "prediction": ["all x y.((Spider(x) & CapturedInsect(y)) -> InjectsVenom(x,y))", "all x y z.((Spider(x) & Insect(y) & Insect(z)) -> InjectsVenom(x,y,z))", "all x.(Spider(x) -> (InjectsVenom(x) & ParalyzesInsect(x)))", "all x y z.((Spider(x) & Insect(y) & Insect(z)) -> (InjectsVenom(x,y,z) & Paralyzes(x,y)))", "all x y z.((Spider(x) & CapturedInsect(y) & Venom(z)) -> InjectsIntoBodyToParalyze(x,y,z))", "all x y.((Spider(x) & CapturedInsect(y)) -> InjectsVenom(x,y))", "all x y.((Spider(x) & Insect(y)) -> InjectsVenom(x,y))", "all x.(Spider(x) -> (InjectVenom(x) & CapturedInsect(x) & Paralyze(x)))", "all x.(Spider(x) -> (InjectsVenom(x) & ParalyzesInsect(x)))", "all x y z.((Spider(x) & Insect(y) & Insect(z) & Insect(z) & Insect(y) & Insect(z)) -> InjectsVenom(x,y,z))", "all x y.((Spider(x) & CapturedInsect(y)) -> InjectsVenomToParalyze(x,y))", "all x y z.((Spider(x) & CapturedInsect(y) & Venom(z) & InjectsInto(x,y,z)) -> Paralyzes(x,y))", "all x y.((Spider(x) & Insect(y) & Captured(y)) -> InjectsVenom(x,y))", "all x.(Spider(x) -> (InjectVenomIntoBodyOfCapturedInsect(x) & ParalyzesInsect(x)))", "all x.(Spider(x) -> (InjectsVenom(x) & ParalyzesInsect(x)))", "all x.(Spider(x) -> (InjectsVenomIntoBody(x) & ParalyzesInsect(x)))"]}
{"id": "eqasc_validation_919", "nl": "Eight legged arachnid capture food with a web and inject venom to paralyze it to eat", "fol": "", "prediction": ["all x y z.((Arachnid(x) & EightLegged(x) & Food(y) & Web(z)) -> (Captures(x,y) & InjectsVenom(x,z) & Paralyzes(x,y)))", "all x y.((Arachnid(x) & EightLegged(x)) -> (CapturesFoodWithWeb(x) & InjectsVenom(x) & ParalyzesToEat(x)))", "all x.(Arachnid(x) -> (EightLegged(x) & CapturesFoodWithWeb(x) & InjectsVenom(x) & ParalyzesToEat(x)))", "eight leggedArachnid(x) & CapturesFoodWithWeb(x) & InjectsVenomToParalyzeToEat(x))", "all x y z.((Arachnid(x) & EightLegged(x) & Food(y) & Web(z)) -> (Captures(x,y) & InjectsVenom(x,z) & ParalyzesToEat(x,y)))", "all x.(Arachnid(x) -> (EightLegged(x) & CapturesFoodWithWeb(x) & InjectsVenom(x) & ParalyzesToEat(x)))", "all x y.((Arachnid(x) & EightLegged(x)) -> (CapturesFoodWithWeb(x) & InjectsVenom(x) & ParalyzesToEat(x)))", "all x y.((Arachnid(x) & EightLegged(x) & CapturesFoodWithWeb(x) & InjectsVenom(x)) -> ParalyzesToEat(x,y))", "all x y z.((Arachnid(x) & EightLegged(x) & Web(y) & Food(z) & CapturesWith(x,y) & InjectsVenom(x,z)) -> ParalyzesToEat(x,z))", "all x y.((Arachnid(x) & Arachnid(y)) -> (CapturesFoodWithWeb(x,y) & InjectsVenom(x,y) & ParalyzesToEat(y)))", "all x y z.((Arachnid(x) & Arachnid(y) & EightLegged(x) & Food(z)) -> (CapturesWithWeb(x,z) & InjectsVenom(x,y,z) & ParalyzesToEat(y,x)))", "all x y z.((Arachnid(x) & EightLegged(x) & Food(y) & Web(z)) -> (CapturesWith(x,y,z) & InjectsVenom(x) & ParalyzesToEat(x)))", "all x.(Arachnid(x) -> (EightLegged(x) & CapturesFoodWithWeb(x) & InjectsVenom(x) & ParalyzesFoodToEat(x)))", "all x.(Arachnid(x) -> (EightLegged(x) & CapturesFoodWithWeb(x) & InjectsVenom(x) & ParalyzesToEat(x)))", "all x.(Arachnid(x) -> (Arachnid(x) & EightLegged(x) & CapturesFoodWithWeb(x) & InjectsVenom(x) & ParalyzesToEat(x)))", "all x.(Arachnid(x) -> (EightLegged(x) & CapturesFoodWithWeb(x) & InjectsVenom(x) & ParalyzesToEat(x)))"]}
{"id": "eqasc_validation_920", "nl": "Crab spiders spin no webs.", "fol": "", "prediction": ["all x.(CrabSpider(x) -> SpinsNoWebs(x))", "all x.(CrabSpider(x) -> SpinsNoWebs(x))", "all x y.((CrabSpider(x) & Web(y)) -> Spins(x,y))", "(all x.(CrabSpider(x) -> SpinsNoWebs(x)))", "all x y.((CrabSpider(x) & Web(y) & Spins(x,y)) -> -Spins(x,y))", "all x.(CrabSpider(x) -> SpinsNoWebs(x))", "(all x.(CrabSpider(x) -> SpinsNoWebs(x)))", "all x y.((CrabSpider(x) & Web(y) & Spins(x,y)) -> -Spins(x,y))", "all x.(CrabSpider(x) -> SpinsNoWeb(x))", "all x.(Rabbit(x) -> SpinsNoWeb(x))", "all x y.((CrabSpider(x) & Web(y)) -> SpinsNo(x,y))", "all x.(CrabSpider(x) -> SpinsNoWebs(x))", "all x.(CrabSpider(x) -> SpinsNoWeb(x))", "all x.(CrabSpider(x) -> SpinsNoWebs(x))", "all x.(CrabSpider(x) -> SpinsNoWebs(x))", "all x.(CrabSpider(x) -> SpinsNoWebs(x))"]}
{"id": "eqasc_validation_921", "nl": "a web is a tool to capture food", "fol": "", "prediction": ["all x.(Web(x) -> CapturesFood(x))", "all x y.((Web(x) & Food(y)) -> CapturesFood(x,y))", "all x y z.((Web(x) & Food(y) & Food(z)) -> Captures(x,y,z))", "all x.(Web(x) -> CapturesFood(x))", "all x y.((Web(x) & Food(y)) -> CapturesFood(x,y))", "all x y z.((Web(x) & Food(y) & Food(z)) -> Captures(x,y,z))", "all x.(Web(x) -> CapturesFood(x))", "all x.(Web(x) -> (CapturesFood(x) & UsesFood(x)))", "all x y.((Web(x) & Food(y)) -> CapturesFood(x,y))", "all x y z.((Web(x) & Food(y) & Food(z)) -> CapturesFood(x,y,z))", "all x.(Web(x) -> CapturesFood(x))", "all x.(Web(x) -> (CapturesFood(x) & CapturesFood(x)))", "all x y.((Web(x) & Food(y)) -> CapturesFood(x,y))", "exists x.(Web(x) & CaptureFood(x) & UsesToCaptureFood(x))", "all x.(Web(x) -> CapturesFood(x))", "all x y.((Web(x) & Food(y)) -> CapturesFood(x,y))"]}
{"id": "eqasc_validation_922", "nl": "Spiders usually eat insects.", "fol": "", "prediction": ["all x.(Spider(x) -> EatsInsects(x))", "all x y.((Spider(x) & Insect(y)) -> Eats(x,y))", "all x.(Spider(x) -> EatsInsects(x))", "all x y.((Spider(x) & Insect(y)) -> Eats(x,y))", "(all x.(Spider(x) -> EatsInsects(x)))", "all x y z.((Spider(x) & Insect(y) & Insect(z)) -> Eats(x,y,z))", "all x.(Spider(x) -> EatsInsects(x))", "all x.(Spider(x) -> EatInsects(x))", "all x y.((Spider(x) & Insect(y)) -> Eats(x,y))", "all x.(Spider(x) -> (EatInsects(x) | EatInsects(x)))", "exists x.(Spider(x) & Insect(y) & Eats(x,y))", "all x y.((Spider(x) & Insect(y)) -> Eats(x,y))", "all x.(Spider(x) -> EatsInsects(x))", "all x.(Spider(x) -> EatInsects(x))", "all x y.((Spider(x) & Insect(y)) -> Eat(x,y))", "all x.(Spider(x) -> EatsInsects(x))"]}
{"id": "eqasc_validation_923", "nl": "webs capture insects.", "fol": "", "prediction": ["all x.(Web(x) -> CapturesInsects(x))", "all x y.((Web(x) & Insect(y)) -> Captures(x,y))", "all x.(Web(x) -> CapturesInsects(x))", "all x y z.((Web(x) & Insect(y) & Insect(z)) -> Captures(x,y,z))", "all x.(Web(x) -> CapturesInsects(x))", "all x y.((Web(x) & Insect(y)) -> Captures(x,y))", "all x y.((Web(x) & Insect(y)) -> Captures(x,y))", "all x.(Web(x) -> CapturesInsects(x))", "all x y.((Web(x) & Insect(y) & Captures(x,y)) -> Captures(x,y))", "all x y.((Web(x) & Insect(y)) -> Captures(x,y))", "all x.(Web(x) -> CapturesInsects(x))", "exists x.(Web(x) & Captures(x,insects,insects))", "all x.(Web(x) -> CapturesInsects(x))", "all x.(Web(x) -> CapturesInsects(x))", "all x.(Web(x) -> CapturesInsects(x))", "all x.(Web(x) -> CapturesInsect(x))"]}
{"id": "eqasc_validation_924", "nl": "Web spinning spiders spin webs to catch insects.", "fol": "", "prediction": ["all x y.((WebSpinningSpider(x) & Web(y)) -> SpinsToCatchInsects(x,y))", "all x y z.((WebSpinningSpider(x) & Web(y) & Insect(z)) -> SpinsToCatch(x,y,z))", "all x.(WebSpinningSpider(x) -> SpinsWebsToCatchInsects(x))", "all x y.((WebSpinningSpider(x) & Web(y)) -> SpinsToCatch(x,y))", "all x y.((WebSpinningSpider(x) & Web(y)) -> SpinsToCatchInsects(x,y))", "all x.(WebSpinningSpider(x) -> SpinsWebsToCatchInsects(x))", "all x y z.((WebSpinningSpider(x) & Web(y) & Insect(z)) -> SpinsToCatch(x,y,z))", "all x y z.((WebSpinningSpider(x) & Web(y) & Insect(z)) -> SpinsToCatch(x,y,z))", "all x.(WebSpinningSpider(x) -> SpinsWebsToCatchInsects(x))", "all x.((WebSpinningSpider(x) & SpinsWebs(x)) -> CatchesInsects(x))", "(SpinningSpider(web) & SpinsWebs(web) & CatchesInsects(web))", "all x.(WebSpinner(x) -> SpinsWebsToCatchInsects(x))", "all x y.((WebSpinner(x) & Spider(y)) -> SpinsWebsToCatchInsects(x,y))", "all x y.((WebSpinningSpider(x) & Web(y)) -> SpinsToCatchInsects(x,y))", "all x.(WebSpinningSpider(x) -> SpinsWebsToCatchInsects(x))", "all x y z.((WebSpinningSpider(x) & Web(y) & Insect(z)) -> SpinsToCatch(x,y,z))"]}
{"id": "eqasc_validation_925", "nl": "spiders catch insects by spinning", "fol": "", "prediction": ["all x y.((Spider(x) & Insect(y)) -> (Catch(x,y) & Spin(x,y)))", "all x y z.((Spider(x) & Insect(y) & Insect(z) & Spins(x,y,z)) -> Catches(x,y,z))", "all x.(Spider(x) -> (CatchesInsects(x) & Spins(x)))", "all x y.((Spider(x) & Insect(y)) -> CatchesBySpinning(x,y))", "all x y z.((Spider(x) & Insect(y) & Insect(z) & Spins(x)) -> Catches(x,y,z))", "all x.(Spider(x) -> (CatchInsects(x) & Spin(x)))", "all x y.((Spider(x) & Insect(y) & Spins(x,y)) -> CatchesBy(x,y))", "all x y z.((Spider(x) & Insect(y) & Insect(z)) -> (Catch(x,y,z) & Spins(x,y)))", "all x.(Spider(x) -> (CatchesInsects(x) & Spins(x)))", "all x y.((Spider(x) & Insect(y) & Spins(x,y)) -> Catches(x,y))", "all x.(Spider(x) -> (CatchInsects(x) & SpinInsects(x)))", "all x y z.((Spider(x) & Insect(y) & Insect(z) & Spins(x)) -> Catches(x,y,z))", "all x.(Spider(x) -> (CatchesInsects(x) & Spins(x) & Insects(x)))", "all x.(Spider(x) -> (CatchInsects(x,spin) & SpinInsects(x,spin)))", "all x y.((Spider(x) & Insect(y) & Spins(x,y)) -> CatchesBy(x,y))", "all x.(Spider(x) -> (CatchesInsects(x) & Spins(x)))"]}
{"id": "eqasc_validation_926", "nl": "Spider Spiders have eight legs.", "fol": "", "prediction": ["all x.(Spider(x) -> HasEightLegs(x))", "(HasEightLegs(Spider))", "all x y.((Spider(x) & Leg(y)) -> HasEight(x,y))", "all x.(Spider(x) -> HasEightLegs(x))", "(HasEightLegs(Spider))", "all x.(Spider(x) -> HasEightLegs(x))", "all x y.((Spider(x) & Leg(y)) -> HasEight(x,y))", "all x.(Spider(x) -> (HasEightLegs(x) & Spider(x)))", "(HasEightLegs(spider,s))", "all x y.((Spider(x) & Leg(y)) -> Has(x,y))", "all x.(Spider(x) -> HasEightLegs(x))", "all x.(Spider(x) -> HasEightLegs(x))", "all x.(Spider(x) -> HasEightLegs(x))", "all x.(Spider(x) -> HasEightLegs(x))", "all x.(Spider(x) -> HasEightLegs(x))", "All x.(Spider(x) -> HasEightLegs(x))"]}
{"id": "eqasc_validation_927", "nl": "Webs are built to capture food by eight legged creatures.", "fol": "", "prediction": ["all x.(Web(x) -> (CapturesFood(x) & ByEightLeggedCreatures(x)))", "all x y.((Web(x) & Creature(y)) -> BuiltToCaptureFood(x,y))", "all x y z.((Web(x) & Creature(y) & EightLegged(z) & BuiltToCaptureFood(x,y,z)) -> BuiltToCapture(x,y,z))", "all x.(Web(x) -> (CapturesFood(x) & EightLeggedCreature(x)))", "all x y.((Web(x) & Creature(y)) -> CapturesFood(x,y))", "all x y.((Web(x) & Creature(y) & BuiltToCaptureFood(x,y)) -> EightLegged(x))", "all x.(Web(x) -> (CapturesFood(x,8) & LeggedCreature(x)))", "all x y.((Web(x) & EightLeggedCreature(y)) -> BuiltToCaptureFood(x,y))", "all x y z.((Web(x) & Creature(y) & EightLegged(z) & BuiltToCaptureFood(x,y,z)) -> BuiltToCapture(x,y,z))", "(all x.(Web(x) -> CapturesFood(x)))", "all x.(Web(x) -> CapturesFood(x))", "all x.(Web(x) -> (CapturesFood(x,8) & LeggedCreatures(x)))", "all x y.((Web(x) & Creature(y)) -> BuiltToCaptureFood(x,y))", "all x.(Web(x) -> (CapturesFood(x,8) & LeggedCreature(x)))", "all x.(Web(x) -> CapturesFood(x,8))", "all x.(Web(x) -> BuiltToCaptureFood(x))"]}
{"id": "eqasc_validation_928", "nl": "Spider webs are interesting traps.", "fol": "", "prediction": ["all x.(SpiderWeb(x) -> InterestingTrap(x))", "all x y.((SpiderWeb(x) & Trap(y)) -> Interesting(x,y))", "all x.(SpiderWeb(x) -> InterestingTrap(x))", "all x y.((SpiderWeb(x) & Trap(y)) -> Interesting(x))", "all x.(SpiderWeb(x) -> InterestingTrap(x))", "all x.((SpiderWeb(x) & InterestingTrap(x)) -> Interesting(x))", "all x.(SpiderWeb(x) -> InterestingTrap(x))", "all x y.((SpiderWeb(x) & Trap(y)) -> Interesting(x,y))", "all x.((SpiderWeb(x) & InterestingTrap(x)) -> -Status(x))", "all x.(SpiderWeb(x) -> InterestingTrap(x))", "all x y.((SpiderWeb(x) & Trap(y)) -> Interesting(x,y))", "all x.(SpiderWeb(x) -> InterestingTrap(x))", "all x y.((SpiderWeb(x) & Trap(y)) -> Interesting(x))", "all x.(SpiderWeb(x) -> InterestingTrap(x))", "all x.(SpiderWeb(x) -> InterestingTrap(x))", "all x.(SpiderWeb(x) -> InterestingTrap(x))"]}
{"id": "eqasc_validation_929", "nl": "a spider uses traps to capture food", "fol": "", "prediction": ["all x y z.((Spider(x) & Trap(y) & Food(z)) -> UsesToCapture(x,y,z))", "all x y.((Spider(x) & Trap(y)) -> UsesToCaptureFood(x,y))", "all x.(Spider(x) -> UsesTrapsToCaptureFood(x))", "all x y z.((Spider(x) & Trap(y) & Food(z)) -> UsesToCapture(x,y,z))", "all x y.((Spider(x) & Trap(y)) -> UsesToCaptureFood(x,y))", "all x.(Spider(x) -> UsesTrapsToCaptureFood(x))", "all x.(Spider(x) -> (UsesTraps(x) & CapturesFood(x)))", "all x y z.((Spider(x) & Trap(y) & Food(z)) -> UsesToCapture(x,y,z))", "all x y z.((Spider(x) & Trap(y) & Food(z) & Uses(x,y)) -> Captures(x,z))", "all x y.((Spider(x) & Trap(y)) -> UsesToCaptureFood(x,y))", "all x.(Spider(x) -> UsesTrapsToCaptureFood(x))", "all x.(Spider(x) -> (UsesTraps(x) & CapturesFood(x)))", "all x y z.((Spider(x) & Trap(y) & Food(z) & Uses(x,y)) -> Captures(x,z))", "exists x.(Spider(x) & UsesTraps(x) & CapturesFood(x))", "all x y.((Spider(x) & Trap(y)) -> UsesToCaptureFood(x,y))", "exists x.(Spider(x) & UsesTrapsToCaptureFood(x))"]}
{"id": "eqasc_validation_930", "nl": "Spiders are also arachnids.", "fol": "", "prediction": ["all x.(Spider(x) -> Arachnid(x))", "all x.(Spider(x) -> Arachnid(x))", "all x y.((Spider(x) & Arachnid(y)) -> Arachnid(x))", "all x.((Spider(x) & Arachnid(x)) -> Arachnid(x))", "(Arachnid(spider)", "(all x.(Spider(x) -> Arachnid(x)))", "all x.(Spider(x) -> Arachnid(x))", "all x.(Arachnid(x) -> Spider(x))", "all x y.((Spider(x) & Arachnid(y)) -> Arachnid(x))", "(Arachnid(spider)", "all x.(Spider(x) -> Arachnid(x))", "(Arachnid(spider)", "all x.(Spider(x) -> Arachnid(x))", "all x.(Spider(x) -> Arachnid(x))", "all x.(Spider(x) -> Arachnid(x))", "all x.(Spider(x) -> Arachnid(x))"]}
{"id": "eqasc_validation_931", "nl": "A web is used to capture food by arachnids.", "fol": "", "prediction": ["all x y.((Web(x) & Arachnid(y)) -> CapturesFood(x,y))", "all x.(Web(x) -> CapturesFood(x))", "all x y z.((Web(x) & Arachnid(y) & Food(z)) -> Captures(x,y,z))", "all x y.((Web(x) & Arachnid(y)) -> CapturesFood(x,y))", "all x.(Web(x) -> CapturesFood(x))", "all x.(Web(x) -> CapturesFoodByArachnids(x))", "all x y z.((Web(x) & Arachnid(y) & Food(z)) -> Captures(x,y,z))", "all x y.((Web(x) & Arachnid(y)) -> CapturesFood(x,y))", "all x y z.((Web(x) & Arachnid(y) & Food(z)) -> CapturesBy(x,y,z))", "all x y.((Web(x) & Arachnid(y)) -> CapturesFood(x,y))", "exists x.(Web(x) & CapturesFood(x) & Arachnid(x))", "all x.(Web(x) -> CapturesFoodByArachnids(x))", "all x.(Web(x) -> CapturesFood(x))", "all x y.((Web(x) & Arachnid(y)) -> CapturesFood(x,y))", "exists x.(Web(x) & CapturesFood(x,Arachnids))", "all x y.((Web(x) & Arachnid(y)) -> CapturesFood(x,y))"]}
{"id": "eqasc_validation_932", "nl": "Cobweb spiders construct webs in corners and areas of little traffic such as basements.", "fol": "", "prediction": ["all x y.((CobwebSpider(x) & Corner(y) & LittleTraffic(y)) -> ConstructsWebsIn(x,y))", "all x y z.((CobwebSpider(x) & Corner(y) & LittleTraffic(z)) -> ConstructsWebsIn(x,y,z))", "all x.(CobwebSpider(x) -> (ConstructsWebsInCorners(x) & ConstructsWebsInLittleTraffic(x)))", "all x.(CobwebSpider(x) -> (ConstructsWebsInCourse(x) & InLittleTraffic(x)))", "all x y.((CobwebSpider(x) & Corner(y) & LittleTraffic(y)) -> ConstructsWebs(x,y))", "all x.((CobwebSpider(x) & Corner(x) & LittleTraffic(x)) -> ConstructsWebsIn(x,y))", "all x y z.((CobwebSpider(x) & Corner(y) & LittleTraffic(z)) -> ConstructsWebsIn(x,y,z))", "(all x.(CobwebSpider(x) -> ConstructsWebsIn(x,corners,basins)))", "all x.(CobwebSpider(x) -> (ConstructsWebsInCorners(x) & ConstructsWebsInLittleTraffic(x)))", "all x.(CobwebSpider(x) -> (ConstructsWebs(x) & InCoveredElements(x) & InLittleTraffic(x)))", "all x y.((CobwebSpider(x) & Corner(y) & LittleTraffic(y)) -> ConstructsWebsIn(x,y))", "all x y z.((CobwebSpider(x) & Corner(y) & LittleTraffic(z)) -> ConstructsWebs(x,y,z))", "all x.(CobwebSpider(x) -> exists y.(Web(y) & Corner(y) & LittleTraffic(y) & In(x,y) & In(x,y))))", "all x y z.((CobwebSpider(x) & Web(y) & Corner(z) & LittleTraffic(z)) -> ConstructsIn(x,y,z))", "exists x.(CobwebSpider(x) & ConstructsWebs(x) & InCoveredAndLittleTraffic(x))", "all x y.((CobwebSpider(x) & Corner(y) & LittleTrafficArea(y)) -> ConstructsWebsIn(x,y))"]}
{"id": "eqasc_validation_933", "nl": "A cobweb is used to capture food", "fol": "", "prediction": ["all x.(Cobweb(x) -> CapturesFood(x))", "all x y.((Cobweb(x) & Food(y)) -> Captures(x,y))", "all x y z.((Cobweb(x) & Food(y) & Food(z)) -> Captures(x,y,z))", "all x.(Cobweb(x) -> CapturesFood(x))", "all x y.((Cobweb(x) & Food(y)) -> Captures(x,y))", "all x y z.((Cobweb(x) & Food(y) & Food(z)) -> Captures(x,y,z))", "all x.(Cobweb(x) -> CapturesFood(x))", "all x y.((Cobweb(x) & Food(y)) -> CapturesFood(x,y))", "all x y z.((Cobweb(x) & Food(y) & Food(z)) -> Captures(x,y,z))", "all x.(Cobweb(x) -> CapturesFood(x))", "all x y.((Cobweb(x) & Food(y)) -> CapturesFood(x,y))", "all x.(Cobweb(x) -> UsedToCaptureFood(x))", "all x.(Cobweb(x) -> CapturesFood(x))", "exists x.(Cobweb(x) & UsedToCaptureFood(x))", "all x y.((Cobweb(x) & Food(y)) -> CapturesFood(x,y))", "exists x.(Cobweb(x) & UsedToCaptureFood(x))"]}
{"id": "eqasc_validation_934", "nl": "Larger numbers of spiders and spider webs means there are many insects available for food.", "fol": "", "prediction": ["all x.((Spider(x) & SpiderWeb(x)) -> exists y.(Insect(y) & AvailableForFood(y)))", "all x y.((Spider(x) & SpiderWeb(y)) -> (LargerNumber(x,y) & ManyInsects(x)))", "all x.((Spider(x) & SpiderWeb(x)) -> (LargerNumber(x) & ManyInsectsAvailableForFood(x)))", "all x.(LargerNumbersOfSpidersAndSpiderWebs(x) -> exists y.(Insect(y) & AvailableForFood(y)))", "all x y.((Spider(x) & SpiderWeb(y)) -> (LargerNumbers(x,y) & ManyInsectsAvailableForFood(x)))", "all x y z.((Spider(x) & SpiderWeb(y) & Insect(z) & LargerNumber(x,y) & AvailableForFood(z,y)) -> ManyInsects(x,z))", "exists x.(Spider(x) & SpiderWeb(x) & LargerNumber(x))", "all x y.((Spider(x) & SpiderWeb(y)) -> (LargerNumberOf(x,y) & ManyInsectsAvailableForFood(x)))", "all x.((Spider(x) & SpiderWeb(x)) -> exists y.(Insect(y) & AvailableForFood(y)))", "all x y z.((Spider(x) & SpiderWeb(y) & Insect(z) & LargerNumber(x,y) & Insect(z)) -> AvailableForFood(x,z))", "all x.((Spider(x) & SpiderWeb(x)) -> (LargerNumbers(x) & ManyInsectsAvailableForFood(x)))", "exists x.(Spider(x) & SpiderWeb(x) & LargerNumbers(x))", "all x y.((Spider(x) & SpiderWeb(y) & LargerNumbers(x,y)) -> ManyInsectsAvailableForFood(x))", "all x y.((Spider(x) & SpiderWeb(y)) -> (LargerNumbers(x,y) & ManyInsectsAvailableForFood(x)))", "exists x.(Spider(x) & SpiderWeb(x) & LargerNumberOfSpiders(x))", "exists x.(Spider(x) & SpiderWeb(x) & LargerNumbers(x))"]}
{"id": "eqasc_validation_935", "nl": "a spider web is used to capture insects by spiders", "fol": "", "prediction": ["all x y z.((SpiderWeb(x) & Spider(y) & Insect(z)) -> CapturesBy(x,y,z))", "all x y.((SpiderWeb(x) & Spider(y)) -> CapturesInsectsBy(x,y))", "all x.(SpiderWeb(x) -> CapturesInsectsBySpiders(x))", "all x y z.((SpiderWeb(x) & Spider(y) & Insect(z)) -> CapturesBy(x,y,z))", "all x y.((SpiderWeb(x) & Spider(y)) -> CapturesInsectsBy(x,y))", "all x.((SpiderWeb(x) & Spider(y)) -> CapturesInsectsBy(x,y))", "all x y z.((SpiderWeb(x) & Insect(y) & Spider(z)) -> CapturesBy(x,y,z))", "all x y z.((SpiderWeb(x) & Spider(y) & Insect(z) & Captures(x,y,z)) -> UsedBy(x,y))", "all x y.((SpiderWeb(x) & Spider(y)) -> CapturesInsects(x,y))", "all x.(SpiderWeb(x) -> CapturesInsectsBySpiders(x))", "exists x.(SpiderWeb(x) & UsedToCaptureInsects(x) & BySpiders(x))", "all x y.((SpiderWeb(x) & Spider(y)) -> (CapturesInsects(x,y) & BySpiders(y,x)))", "all x y z.((SpiderWeb(x) & Insect(y) & Spider(z)) -> Captures(x,y,z))", "all x y.((SpiderWeb(x) & Spider(y)) -> CapturesInsectsBy(x,y))", "all x.(SpiderWeb(x) -> CapturesInsectsBySpiders(x))", "all x y z.((SpiderWeb(x) & Spider(y) & Insect(z) & Captures(x,y,z)) -> UsedBy(x,y))"]}
{"id": "eqasc_validation_936", "nl": "Spiders are the largest group of arachnids.", "fol": "", "prediction": ["all x.(Spider(x) -> Arachnid(x))", "all x y.((Spider(x) & Arachnid(y)) -> LargestGroup(x,y))", "(LargestGroupOfArachnids(spider))", "all x.(Arachnid(x) -> (LargestGroup(x) & Arachnid(x)))", "all x.(Spider(x) -> (LargestGroupOfArachnids(x)))", "all x.(Spider(x) -> Arachnid(x))", "(LargestArachnidGroup(spider))", "all x y.((Arachnid(x) & Spider(y)) -> LargestGroup(x,y))", "(LargestGroupOfArachnids(spider) & Arachnid(s))", "all x y.((Spider(x) & Arachnid(y)) -> LargestGroup(x,y))", "all x.(Spider(x) -> (LargestGroupOfArachnids(x) & Arachnid(x)))", "all x.(Arachnid(x) -> (LargestGroup(x) & Arachnid(x)))", "all x.(Spider(x) -> Arachnid(x))", "all x.(Arachnid(x) -> LargestGroup(x,Arachnids))", "all x y.((Spider(x) & Arachnid(y)) -> LargestGroup(x,y))", "all x.(Spider(x) -> Arachnid(x))"]}
{"id": "eqasc_validation_937", "nl": "Some arachnids capture food with a web.", "fol": "", "prediction": ["exists x.(Arachnid(x) & CapturesFoodWithWeb(x))", "exists x.(Arachnid(x) & CapturesFood(x) & HasWeb(x))", "exists x y.(Arachnid(x) & Food(y) & CapturesWithWeb(x,y))", "all x y.((Arachnid(x) & Food(y)) -> CapturesWithWeb(x,y))", "exists x.(Arachnid(x) & CapturesFoodWithWeb(x))", "exists x.(Arachnid(x) & CapturesFood(x) & HasWeb(x))", "all x y.((Arachnid(x) & Food(y)) -> CapturesWithWeb(x,y))", "exists x y.(Arachnid(x) & Food(y) & CapturesWithWeb(x,y))", "exists x.(Arachnid(x) & CapturesFoodWithWeb(x))", "exists x.(Arachnid(x) & CapturesFood(x) & UsesWeb(x))", "all x y.((Arachnid(x) & Food(y)) -> CapturesWithWeb(x,y))", "exists x.(Arachnid(x) & CapturesFoodWithWeb(x))", "exists x.(Arachnid(x) & CapturesFood(x) & HasWeb(x))", "exists x.(Arachnid(x) & CapturesFoodWithWeb(x))", "exists x.(Arachnid(x) & Captures(x,Food) & Web(x))", "exists x.(Arachnid(x) & CapturesFoodWithWeb(x))"]}
{"id": "eqasc_validation_938", "nl": "Spiders build webs from silk produced in their abdomen.", "fol": "", "prediction": ["all x y.((Spider(x) & Silk(y)) -> BuildsWebsFrom(x,y))", "all x.(Spider(x) -> (BuildsWebsFromSilk(x) & ProducedInAbdomen(x)))", "all x y z.((Spider(x) & Silk(y) & Abdomen(z)) -> BuildsWebsFrom(x,y,z))", "all x y.((Spider(x) & Silk(y) & ProducedInAbdomen(x,y)) -> BuildsWebsFrom(x,y))", "all x.(Spider(x) -> (BuildsWebsFromSilk(x) & ProducedInAbdomen(x)))", "all x.(Spider(x) -> BuildsWebsFromSilk(x))", "all x y z.((Spider(x) & Silk(y) & Abdomen(z)) -> BuildsWebsFrom(x,y,z))", "all x y.((Spider(x) & Silk(y)) -> BuildsWebsFrom(x,y))", "(all x.(Spider(x) -> BuildsWebsFromSilk(x)))", "all x y.((Spider(x) & Silk(y) & ProducedInAbdomen(x,y)) -> BuildsWebsFrom(x,y))", "all x y z.((Spider(x) & Silk(y) & Abdomen(z)) -> BuildsWebFrom(x,y,z))", "all x.(Spider(x) -> (BuildsWebsFromSilk(x) & ProducedInAbdomen(x)))", "all x y.((Spider(x) & SilkProducedInAbdomen(y)) -> BuildsWebsFrom(x,y))", "all x.(Spider(x) -> BuildsWebsFromSilk(x))", "all x.(Spider(x) -> (BuildsWebsFromSilk(x) & ProducedInAbdomen(x)))", "all x.(Spider(x) -> BuildsWebsFromSilk(x))"]}
{"id": "eqasc_validation_939", "nl": "spiders use silk to capture food", "fol": "", "prediction": ["all x y.((Spider(x) & Silk(y)) -> UsesToCaptureFood(x,y))", "all x.(Spider(x) -> UsesSilkToCaptureFood(x))", "all x y z.((Spider(x) & Silk(y) & Food(z)) -> UsesToCapture(x,y,z))", "all x.(Spider(x) -> (UsesSilk(x) & CapturesFood(x)))", "all x y.((Spider(x) & Silk(y)) -> UsesToCaptureFood(x,y))", "(all x.(Spider(x) -> UsesSilkToCaptureFood(x)))", "all x y z.((Spider(x) & Silk(y) & Food(z)) -> UsesToCapture(x,y,z))", "all x.(Spider(x) -> UsesSilkToCaptureFood(x))", "all x.(Spider(x) -> (UsesSilk(x) & CapturesFood(x)))", "all x y.((Spider(x) & Silk(y)) -> UsesToCaptureFood(x,y))", "all x.(Spider(x) -> (UsesSilkToCaptureFood(x) & UsesSilk(x)))", "all x y z.((Spider(x) & Silk(y) & Food(z)) -> UsesToCapture(x,y,z))", "all x y.((Spider(x) & Silk(y)) -> CapturesFood(x,y))", "all x y z.((Spider(x) & Silk(y) & Food(z)) -> Captures(x,y,z))", "all x.(Spider(x) -> UsesSilk(x))", "all x.(Spider(x) -> UsesSilkToCaptureFood(x))"]}
{"id": "eqasc_validation_940", "nl": "Protozoa can be classified on the basis of how they move.", "fol": "", "prediction": ["all x.(Protozoa(x) -> CanBeClassifiedOnMovement(x))", "all x.(Protozoa(x) -> MovesOnBasis(x))", "all x y.((Protozoa(x) & Move(y)) -> ClassifiedOnBaseOn(x,y))", "all x.(Protozoa(x) -> (Movement(x) & Move(x)))", "all x y.((Protozoa(x) & Move(y)) -> CanBeClassifiedOnBaseOn(x,y))", "all x.(Protozoa(x) -> CanBeClassifiedOnMovement(x))", "all x.((Protozoa(x) & Move(x)) -> ClassifiedOnBaseOnMovement(x))", "all x.(Protozoa(x) -> (Movement(x) & Move(x)))", "all x y.((Protozoa(x) & Movement(y)) -> ClassifiedOn(x,y))", "all x.(Protozoa(x) -> MovesOn(x))", "all x.(Protozoa(x) -> ClassifiedOnMovement(x))", "all x y.((Protozoa(x) & Move(y)) -> CanBeClassifiedOn(x,y))", "all x.(Protozoa(x) -> MovesOnBasis(x))", "all x.(Protozoa(x) -> (Movement(x) | Movement(x)))", "all x.(Protozoa(x) -> CanBeClassifiedOnMovement(x))", "exists x.(Protozoa(x) & Move(x))"]}
{"id": "eqasc_validation_941", "nl": "Flagellates are the smallest of the protozoa and use a few whip like flagella to move.", "fol": "", "prediction": ["all x.(Flagellate(x) -> (SmallestOfProtozoa(x) & UsesFlagella(x)))", "all x y.((Flagellate(x) & Protozoa(y)) -> (Smallest(x,y) & UsesFlagella(x)))", "all x.(Flagellates(x) -> (SmallestOfProtozoa(x) & UsesFlagella(x)))", "(Smallest(Flagellates) & UsesFlagella(Flagella))", "all x y z.((Flagellate(x) & Protozoa(y) & Whip(z)) -> (Smallest(x,y) & Uses(x,z)))", "all x.(Flagellate(x) -> (Smallest(x) & UsesFlagella(x)))", "(SmallestProtozoa(flagella) & UsesFlagellaToMove(flagella))", "(SmallestOfProtozoa(Flagellates) & UsesFlagellaToMove(Flagella))", "all x y.((Flagellate(x) & Protozoa(y)) -> (Smallest(x,y) & UsesFlagella(x)))", "all x y.((Flagellates(x) & Protozoa(y)) -> (Smallest(x,y) & UsesFlagella(x)))", "all x.(Flagellates(x) -> (SmallestOfProtozoa(x) & UsesFlagella(x)))", "all x y.((Flagellate(x) & Protozoa(y)) -> (Smallest(x,y) & UsesWhip(x,y)))", "all x.(Flagellate(x) -> (SmallestOfProtozoa(x) & UsesFlagella(x)))", "all x.(Flagellates(x) -> (Smallest(x) & UsesFlagella(x)))", "all x.(Flagellate(x) -> (SmallerOfProtozoa(x) & UsesFlagellaToMove(x)))", "all x.(Flagellates(x) -> (SmallerOfProtozoa(x) & UsesFlagella(x)))"]}
{"id": "eqasc_validation_942", "nl": "flagellates are small protozoa ", "fol": "", "prediction": ["all x.(Flagellate(x) -> (SmallProtozoa(x) & SmallProtozoa(x)))", "(SmallProtozoa(Flagellates) & SmallProtozoa(Flagellates))", "all x.(Flagellates(x) -> (SmallProtozoa(x) & SmallProtozoa(x)))", "all x y.((Flagellate(x) & SmallProtozoa(y)) -> SmallProtozoa(x,y))", "all x.(Flagellate(x) -> (SmallProtozoa(x) & SmallProtozoa(x)))", "flagellates (SmallProtozoa(Flagellates) & SmallProtozoa(Flagellates))", "all x.(Flagellate(x) -> (SmallProtozoa(x) & SmallProtozoa(x)))", "(SmallProtozoa(Flagellates) & SmallProtozoa(Flagellates))", "all x y z.((Flagellate(x) & SmallProtozoa(y) & Protozoa(z) & Small(y)) -> Flagellates(x))", "all x y.((Flagellate(x) & SmallProtozoa(y)) -> Small(x,y))", "all x y.((Flagellate(x) & Small(y)) -> Protozoa(x))", "all x.(Flagellates(x) -> (SmallProtozoa(x) & SmallProtozoa(x)))", "all x.(Flagellate(x) -> (SmallProtozoa(x) & SmallProtozoa(x)))", "all x.(Flagellates(x) -> (SmallProtozoa(x) & SmallProtozoa(x) & SmallProtozoa(x)))", "all x.(Flagellate(x) -> (SmallProtozoa(x) & SmallProtozoa(x)))", "all x.(Flagellate(x) -> (SmallProtozoa(x) & SmallProtozoa(x) & SmallProtozoa(x)))"]}
{"id": "eqasc_validation_943", "nl": "For ease of identification, cotton seedlings are classified into the following three categories.", "fol": "", "prediction": ["all x.((CottonSeedling(x) & ClassifiedInto(x,3)) -> EasyOfIdentification(x))", "all x.((CottonSeedling(x) & EasyIdentification(x)) -> ClassifiedIntoCategories(x,3))", "all x.((CellflowerSeedling(x) & ClassifiedInto(x,3)) -> EasyOfIdentification(x))", "all x y.((CottonSeedling(x) & Cotton(y)) -> ClassifiedInto(x,y))", "(EaseOfIdentification(cottonSeedlings) -> ClassifiedIntoFourCategories(cottonSeedlings,3))", "all x.((CottonSeedling(x) & ClassifiedIntoCategories(x,3)) -> EasyOfIdentification(x))", "all x.((PopcornSeedling(x) & ClassifiedInto(x,3)) -> EasyOfIdentification(x))", "(CellwoodSeedlings(x) & ClassifiedIntoFourCategories(x))", "all x.((CellwoodSeedling(x) & EasyIdentification(x)) -> ClassifiedIntoCategories(x,3))", "(FeelOfIdentification(candy) & CottonSeedlings(candy))", "(EaseOfIdentification(cottonSeedlings) -> ClassifiedIntoCategories(cottonSeedlings))", "all x y.((CellflowerSeedling(x) & Cotton(y)) -> ClassifiedInto(x,y))", "all x y.((CottonSeedling(x) & Cotton(y)) -> ClassifiedInto(x,y))", "all x y.((CottonSeedling(x) & CottonSeedling(y)) -> ClassifiedIntoCategories(x,y))", "all x.(CellflowerSeedling(x) -> (ClassifiedIntoCategories(x,3)))", "all x.((CottonSeedling(x) & EasyIdentification(x)) -> ClassifiedInFourCategories(x))"]}
{"id": "eqasc_validation_944", "nl": "Protozoa can be identified by how they move.", "fol": "", "prediction": ["all x.(Protozoa(x) -> Moves(x))", "all x.(Protozoa(x) -> IdentifiedByMovement(x))", "all x y.((Protozoa(x) & Move(y)) -> IdentifiedBy(x,y))", "all x.(Protozoa(x) -> CanBeIdentifiedByMovement(x))", "all x.(Protozoa(x) -> Moves(x))", "all x y.((Protozoa(x) & Move(y)) -> Identifies(x,y))", "all x.((Protozoa(x) & Move(x)) -> IdentifiedBy(x,y))", "all x.(Protozoa(x) -> IdentifiedByMovement(x))", "all x y.((Protozoa(x) & Move(y)) -> IdentifiedBy(x,y))", "all x y.((Protozoa(x) & Move(y)) -> CanBeIdentifiedBy(x,y))", "all x.(Protozoa(x) -> CanBeIdentifiedByMovement(x))", "all x.(Protozoa(x) -> Move(x))", "all x y.((Protozoa(x) & Move(y)) -> Identifies(x,y))", "all x.(Protozoa(x) -> Moves(x))", "all x.(Protozoa(x) -> IdentifiesByMovement(x))", "exists x.(Protozoa(x) & Move(x))"]}
{"id": "eqasc_validation_945", "nl": "Cilia wave in a coordinated way to move the protozoa in one direction.", "fol": "", "prediction": ["all x y.((Cilia(x) & Protozoa(y)) -> (CoordinatedWave(x,y) & MovesInOneDirection(x,y)))", "all x y z.((Cilia(x) & Protozoa(y) & CoordinatedWave(x,y) & Direction(z)) -> MovesInOneDirection(x,y,z))", "all x.(CiliaWaves(x) -> CoordinatedWave(x))", "all x y.((Cilia(x) & Protozoa(y)) -> WavesInCoordinatedManner(x,y))", "all x.((Cilia(x) & CoordinatedWave(x) & MoveProtozoaInOneDirection(x)) -> CiliaWave(x))", "all x.(CiliaWavesInCoordinatedWay(x) -> MovesProtozoaInOneDirection(x))", "(CoordinatedWave(Cilia) & MovesProtozoaInOneDirection(Cilia))", "all x.(CiliaWave(x) -> CoordinatedWave(x))", "all x y.((CiliaWave(x) & Protozoa(y)) -> CoordinatedToMove(x,y))", "(CoordinatedWaveToMoveProtozoa(Cilia,OneDirection))", "all x y z.((Cilia(x) & Protozoa(y) & CoordinatedWave(x,y) & Direction(z)) -> MovesInOneDirection(x,y,z))", "all x.((CiliaWave(x) & CoordinatedWave(x)) -> MovesProtozoaInOneDirection(x))", "all x.(CiliaWave(x) -> (CoordinatedWave(x) & MovesProtozoaInOneDirection(x)))", "all x y.((Cilia(x) & Protozoa(y)) -> CoordinatedWave(x,y))", "all x y z.((Cilia(x) & Protozoa(y) & CoordinatedWave(x) & Direction(z)) -> MovesInOneDirection(x,y,z))", "all x y.((CiliaWave(x) & Protozoa(y)) -> CoordinatedWaveToMoveInOneDirection(x,y))"]}
{"id": "eqasc_validation_946", "nl": "cilia wave to move", "fol": "", "prediction": ["all x y.((CiliaWave(x) & CiliaWave(y)) -> Moves(x,y))", "all x.(CiliaWave(x) -> Moves(x))", "all x y z.((CiliaWave(x) & CiliaWave(y) & CiliaWave(z)) -> Moves(x,y,z))", "\u0430\u0438 \u0430\u0438 \u0430\u0438 \u0430\u0438 \u0430\u0438 \u0430\u0438 \u0430\u0438 \u0430\u0438 \u0430\u0438 \u0430\u0438 \u0430\u0438 \u0430\u0438 \u0430\u0438 \u0430\u0438 \u0430\u0438 \u0430\u0438 \u0430\u0438 \u0430\u0438 \u0430\u0438", "all x.(CiliaWave(x) -> Move(x))", "all x y z.((Cilia Wave(x) & Cilina(y) & Wave(z)) -> Moves(x,y,z))", "all x y.((CiliaWave(x) & CiliaWave(y)) -> Move(x,y))", "(Cilia WaveToMove(Cilia))", "all x y.((Cilia Wave(x) & CiliaWave(y)) -> Moves(x,y))", "all x.(CiliaWaveToMove(x) -> CiliaWaveToMove(x))", "ciella wave to move to a ciella wave to move to.", "(Cilia Wave to Move) -> CiliaWaveToMove(Cilia))", "all x.(Cilia WaveToMove(x) -> CiliaWaveToMove(x))", "-Cilia WaveToMove(cilina,move)", "(Cilia WaveToMove(Cilia))", "all x.(CiliaWave(x) -> Moves(x))"]}
{"id": "eqasc_validation_947", "nl": "Paramecium are protozoa, single celled animals.", "fol": "", "prediction": ["all x.(Paramecium(x) -> (Protozoa(x) & SingleLeaved(x)))", "(Protozoa(Paramecium) & SingleLeavedAnimal(Paramecium))", "all x y.((Paramecium(x) & Protozoa(y)) -> SingleLeavedAnimal(x,y))", "all x.(Paramecium(x) -> (Protozoa(x) & SingleLeavedAnimal(x)))", "all x.(Paramecium(x) -> (Protozoa(x) & SingleLeaved(x)))", "all x y.((Paramecium(x) & Animal(y)) -> (Protozoa(x) & SingleLeaved(y)))", "(Protozoa(Paramecium) | SingleLeavedAnimal(Paramecium))", "(Protozoa(Paramecium) & SingleLeavedAnimal(Paramecium))", "all x.(Paramecium(x) -> (Protozoa(x) & SingleLeavedAnimal(x)))", "all x.(Paramecium(x) -> (Protozoa(x) & SingleLeaved(x)))", "all x y.((Paramecium(x) & Protozoa(y)) -> SingleLeavedAnimal(x,y))", "all x.(Pamecium(x) -> (Protozoa(x) & SingleLeavedAnimal(x)))", "all x.(Pamecium(x) -> (Protozoa(x) & SingleLeavedAnimal(x)))", "All x.(Protozoa(x) -> SingleLeavedAnimal(x))", "all x.(Paramecium(x) -> (Protozoa(x) & SingleLeavedAnimal(x)))", "All x.(Paramecium(x) -> (Protozoa(x) & SingleLeachedAnimal(x)))"]}
{"id": "eqasc_validation_948", "nl": "paramecium can be classified on how they move", "fol": "", "prediction": ["all x.(Paramecium(x) -> (Movement(x) & Moves(x) & ClassifiedOn(x)))", "all x y.((Paramecium(x) & Move(y)) -> CanBeClassifiedOnMovement(x,y))", "all x.(Paramecium(x) -> CanBeClassifiedOnMovement(x))", "all x y.((Paramecium(x) & MovesOn(x,y)) -> ClassifiedOn(x,y))", "(all x.(Paramecium(x) -> MovesOnMovement(x)))", "all x y z.((Paramecium(x) & Moves(y) & Moves(z)) -> CanBeClassifiedOn(x,y,z))", "all x.(Paramecium(x) -> (Movement(x) & Moves(x)))", "all x.(Paramecium(x) -> (Movement(x,y) & Moves(y) & ClassifiedOn(x,z)))", "all x y.((Paramecium(x) & Move(y)) -> ClassifiedOnMovement(x,y))", "(all x.(Paramecium(x) -> Moves(x)))", "all x.(Pamecium(x) -> (Movement(x) & Moves(x) & ClassifiedOn(x,y)))", "all x.(Panamecium(x) -> (Movement(x) & Moves(x) & ClassifiedOnMovement(x)))", "all x y.((Paramecium(x) & Movement(y)) -> CanBeClassifiedOn(x,y))", "all x.(Paramecium(x) -> CanBeClassifiedOnMovement(x))", "all x y.((Paramecium(x) & MovesOn(y,x)) -> CanBeClassifiedOn(x,y))", "all x.(Paramecium(x) -> MovesOnMovement(x))"]}
{"id": "eqasc_validation_949", "nl": "single celled animals can be classified on the basis of how they move", "fol": "", "prediction": ["all x.(SingleLeavedAnimal(x) -> CanBeClassifiedOnBaseOnMovement(x))", "all x.((Animal(x) & SingleLeaved(x)) -> CanBeClassifiedOnBaseOnMovement(x))", "all x y.((Animal(x) & SingleLeaved(x)) -> CanBeClassifiedOnBaseOnMovement(x,y))", "all x y.((SingleLeavedAnimal(x) & Animal(y)) -> CanBeClassifiedOnBaseOnMovement(x,y))", "all x.(SingleLeaved(x) -> CanBeClassifiedOnBaseOnMovement(x))", "all x.(SingleLeavedAnimal(x) -> CanBeClassifiedOnBaseOnMovement(x))", "all x y.((Animal(x) & SingleLayed(x)) -> (ClassifiedOnMovement(x,y) & ClassifiedOnMovement(x,y)))", "all x y z.((Animal(x) & SingleLeaved(x) & Animal(y) & Moves(z)) -> CanBeClassifiedOnBaseOnMovement(x,y,z))", "all x.((Animal(x) & SingleLeaved(x)) -> ClassifiedOnBaseOnMovement(x))", "all x.(SingleLaid(x) -> CanBeClassifiedOnBaseOnMovement(x))", "all x y.((Animal(x) & SingleLeaved(x)) -> (ClassifiedOnMovement(x,y) & ClassifiedOnMovement(x,y)))", "all x y.((SingleLeaved(x) & Animal(y)) -> CanBeClassifiedOnBaseOnMovement(x,y))", "all x.((Animal(x) & SingleLayed(x)) -> CanBeClassifiedOnBaseOnMovement(x))", "all x.(SingleLeavedAnimal(x) -> ClassifiedOnMovement(x))", "all x.((Animal(x) & SingleLeaved(x)) -> CanBeClassifiedOnBaseOnMovement(x))", "all x.(SingleLayedAnimal(x) -> ClassifiedOnMovement(x))"]}
{"id": "eqasc_validation_950", "nl": "Cryptosporidium parvum is the hardest protozoa to kill.", "fol": "", "prediction": ["all x.(CryptosporidiumParvum(x) -> HardestProtozoaToKill(x))", "all x.((Protozoa(x) & CryptosporidiumParvum(x)) -> HardestToKill(x))", "(HardestToKill(CryptosporidiumParvum) & CryptosporidiumParvum(Cryptosporidium))", "(HasHardestProtozoaToKill(CryptosporidiumParvum))", "(HardestProtozoaToKill(CryptosporidiumParvum))", "all x.((CryptosporidiumParvum(x) & HardestProtozoaToKill(x)) -> CryptosporidiumParvum(x))", "Cryptosporidium parvum (Protozoa(c) & HardestToKill(c))", "all x y.((Protozoa(x) & CryptosporidiumParvum(y)) -> HardestToKill(x,y))", "Cryptosporidiumparvum (Cryptosporidium) & HardestProtozoaToKill(Cryptosporidium))", "the hardesttokillprotozoa(CryptosporidiumParvum)", "(HasTheHardestProtozoaToKill(CryptosporidiumParvum))", "all x.(CryptosporidiumParvum(x) -> HardestProtozoaToKill(x))", "all x y.((CryptosporidiumParvum(x) & Protozoa(y)) -> HardestToKill(x,y))", "(HardestProtozoaToKill(CryptosporidiumParvum))", "all x.(CryptosporidiumParvum(x) -> HardestProtozoaToKill(x))", "All x.(CryptosporidiumParvum(x) -> HardestProtozoaToKill(x))"]}
{"id": "eqasc_validation_951", "nl": "Animals like cyptosporidium are often classified on how they move.", "fol": "", "prediction": ["all x.((Animal(x) & Cyptosporidium(x)) -> ClassifiedOnMovement(x))", "all x.(Cyptosporidium(x) -> ClassifiedOnMovement(x))", "all x y.((Animal(x) & Cyptosporidium(y)) -> ClassifiedOnMovement(x,y))", "all x.((Animal(x) & Cyptosporidium(x)) -> ClassifiedOnMovement(x))", "all x.(Cyptosporidium(x) -> ClassifiedOnMovement(x))", "(all x.(Cyptosporidium(x) -> Moves(x)))", "all x y.((Animal(x) & Cyptosporidium(y)) -> ClassifiedOnMovement(x,y))", "all x.((Animal(x) & Cyptosporidium(x)) -> ClassifiedOnMovement(x))", "all x y.((Animal(x) & Cyptosporidium(y)) -> ClassifiedOnMovement(x,y))", "all x.(Cyptosporidium(x) -> ClassifiedOnMovement(x))", "all x y.((Animal(x) & Cyptosporidium(y)) -> ClassifiedOnMovement(x,y))", "all x.((Animal(x) & Cyptosporidium(x)) -> ClassifiedOnMovement(x))", "all x y.((Animal(x) & Cyptosporidium(x) & Move(y)) -> ClassifiedOn(x,y))", "all x.(Cyptosporidium(x) -> ClassifiedOnMovement(x))", "all x y.((Animal(x) & Cyptosporidium(y)) -> ClassifiedOnMovement(x,y))", "all x.((Animal(x) & Cyptosporidium(x)) -> ClassifiedOnMovement(x))"]}
{"id": "eqasc_validation_952", "nl": "Ciliates are ciliated protozoa.", "fol": "", "prediction": ["all x.(Ciliate(x) -> CiliatedProtozoa(x))", "all x.(Ciliate(x) -> CiliatedProtozoa(x))", "all x.(Ciliates(x) -> CiliatedProtozoa(x))", "(Ciliates) -> CiliatedProtozoa(Ciliates))", "all x y.((Ciliate(x) & Ciliate(y)) -> CiliatedProtozoa(x))", "all x.(Ciliate(x) -> CilinatedProtozoa(x))", "all x y.((Ciliate(x) & CiliatedProtozoa(y)) -> Ciliated(x))", "(Ciliates) -> CiliatedProtozoa(c))", "all x.(Ciliate(x) -> CiliatatedProtozoa(x))", "all x.(Ciliates(x) -> CiliatedProtozoa(x))", "all x y.((Ciliate(x) & Protozoa(y)) -> Cilinated(x,y))", "all x.(Ciliates(x) -> CilinatedProtozoa(x))", "all x.(Ciliate(x) -> CilinatedProtozoa(x))", "all x y.((Ciliate(x) & Protozoa(y)) -> Ciliated(x))", "all x.(Ciliate(x) -> CiliatatedProtozoa(x))", "all x.(Ciliates(x) -> CiliatedProtozoa(x))"]}
{"id": "eqasc_validation_953", "nl": "Ciliates can be classified on the basis of how they move.", "fol": "", "prediction": ["all x.(Ciliate(x) -> CanBeClassifiedOnMovement(x))", "all x.(Ciliate(x) -> MovesOnBasis(x))", "all x y.((Ciliate(x) & Move(y)) -> ClassifiedOnBaseOn(x,y))", "all x.(Ciliates(x) -> CanBeClassifiedOnMovement(x))", "all x.(Ciliate(x) -> (Movement(x) & Moves(x)))", "all x y.((Ciliate(x) & Move(y)) -> ClassifiedOnBaseOf(x,y))", "all x.(Ciliate(x) -> ClassifiedOnMovement(x))", "all x.(Ciliates(x) -> MovesOnBasis(x))", "all x y.((Ciliate(x) & Movement(y)) -> CanBeClassified(x,y))", "all x.(Ciliate(x) -> (Movement(x) & Moves(x)))", "all x y.((Ciliate(x) & Moves(y)) -> ClassifiedOnBaseOn(x,y))", "all x.(Ciliates(x) -> ClassifiedOnMovement(x))", "all x.(Ciliates(x) -> (Movement(x) & Moves(x)))", "all x.(Ciliate(x) -> CanBeClassifiedOnMovement(x))", "all x y.((Ciliate(x) & Movement(y)) -> ClassifiedOn(x,y))", "exists x.(Ciliate(x) & Moves(x))"]}
{"id": "eqasc_validation_954", "nl": "Chromoplasts make and store pigments.", "fol": "", "prediction": ["all x.(Chromoplast(x) -> (MakesPigments(x) & StoresPigments(x)))", "all x y.((Chromoplast(x) & Pigment(y)) -> (Makes(x,y) & Stores(x,y)))", "all x.(Chromoplast(x) -> (MakesPigments(x) & StoresPigments(x)))", "(MadeAndStorePigments(chromoplast) & Chromoplast(chromoplast))", "all x.(Chromoplast(x) -> (Makes(x,Pigments) & Stores(x,Pigments)))", "all x y.((Chromoplast(x) & Pigment(y)) -> MakesAndStores(x,y))", "all x y z.(Chromoplast(x) -> (MakesPigments(x,y) & StoresPigments(x,z)))", "all x.(Chromoplast(x) -> (MakesPigments(x) & StoresPigments(x)))", "all x y.((Chromoplast(x) & Pigment(y)) -> (Make(x,y) & Store(x,y)))", "all x.(Chromoplast(x) -> MakesAndStoresPigments(x))", "all x y.((Chromoplast(x) & Pigment(y)) -> MakesAndStores(x,y))", "all x.(Chamoplast(x) -> (MakesPigments(x) & StoresPigments(x)))", "all x.(Chromoplast(x) -> MakesAndStoresPigments(x))", "all x.(Chromoplast(x) -> (MakesPigments(x) & StoresPigments(x)))", "all x.(Chromoplast(x) -> (Makes(x,pigments) & Stores(x,pigments)))", "exists x.(Chromoplast(x) & Makes(x,pigment) & Stores(x,pigment))"]}
{"id": "eqasc_validation_955", "nl": "Chromoplasts contain red or yellow xanthophyll pigments in large amounts.", "fol": "", "prediction": ["all x.(Chromoplast(x) -> (ContainsRedOrYellowXanthophyllPigments(x) & LargeAmounts(x)))", "all x.(Chromoplast(x) -> (ContainsRedOrYellowXanthophyll(x) & InLargeAmounts(x)))", "all x y.((Chromoplast(x) & Red(y)) | Yellow(y)) -> ContainsXanthophyll(x,y))", "(LargeAmountsOfXanthophyll(chromoplast) -> ContainsRedOrYellowPigments(chromoplast))", "all x y.((Chromoplast(x) & Pigment(y)) -> (Contains(x,y) & (Contains(x,y) | Contains(x,y))))", "all x.(Chromoplast(x) -> (Contains(x,y) & (RedXanthophyllPigments(y) | YellowXanthophyllPigments(y)) & InLargeAmounts(x,y)))", "(all x.(Chromoplast(x) -> (ContainsRedXanthophyll(x) | ContainsYellowXanthophyll(x))))", "all x.(Chromoplast(x) -> (ContainsRedOrYellowXanthophyllPigments(x) & InLargeAmounts(x)))", "all x y z.(Chromoplast(x) -> (ContainsRedOrYellowXanthophyllPigments(x) & LargeAmounts(y) & In(x,z)))", "all x y.((Chromoplast(x) & Red(y) | Yellow(y)) -> ContainsXanthophyllPigments(x,y))", "all x y.((Chromoplast(x) & (Red(y) | Yellow(y))) -> ContainsXanthophyll(x,y))", "all x.(Chromoplast(x) -> (ContainsRedOrYellowXanthophyll(x) & LargeAmounts(x)))", "all x.(Chromoplast(x) -> (ContainsRedXanthophyll(x) | ContainsYellowXanthophyll(x)))", "all x.(Chromoplast(x) -> (ContainsRedOrYellowXanthophyllPigments(x) & LargeAmounts(x)))", "all x.(Chromoplast(x) -> (Contain(x,y) & (Red(y) | Yellow(y)) & InLargeAmounts(x,y)))", "all x.(Chromoplast(x) -> ContainsLargeAmountsOfXanthophyll(x))"]}
{"id": "eqasc_validation_956", "nl": "Chromoplasts make and store red or yellow colors in large amounts", "fol": "", "prediction": ["all x.(Chromoplast(x) -> (MakesAndStoresRedOrYellowColors(x) & InLargeAmounts(x)))", "all x y.((Chromoplast(x) & Color(y)) -> (MakesAndStores(x,y) & (Red(y) | Yellow(y)) & LargeAmounts(x)))", "all x y z.((Chromoplast(x) & RedOrYellowColor(y) & LargeAmounts(z)) -> (MakesAndStores(x,y) & InLargeAmounts(x,z)))", "(Chromoplast(ch) -> (MakesRedOrYellowColors(ch) & StoresRedOrYellowColors(ch) & LargeAmounts(ch)))", "all x.(Chromoplast(x) -> (MakesRedOrYellowColors(x) & StoresRedOrYellowColors(x) & InLargeAmounts(x)))", "(all x.(Chromoplast(x) -> (MakesRedOrYellowColors(x) & StoresRedOrYellowColors(x) & LargeAmounts(x))))", "all x y.((Chromoplast(x) & (RedColor(y) | YellowColor(y))) -> (Makes(x,y) & Stores(x,y)))", "all x.(Chromoplast(x) -> (MakesAndStoresRedOrYellowColors(x) & InLargeAmounts(x)))", "all x y z.((Chromoplast(x) & (RedColor(y) | YellowColor(y))) -> (MakesAndStores(x,y) & InLargeAmounts(x,z)))", "all x y.((Chromoplast(x) & RedOrYellowColor(y)) -> (MakesAndStores(x,y) & InLargeAmounts(x,y)))", "all x y z.(Chromoplast(x) -> (MakesAndStoresRedOrYellowColors(x) & LargeAmounts(y,z) & InLargeAmounts(z,y)))", "all x.(Chromoplast(x) -> (MadeAndStoresRedOrYellowColors(x) & InLargeAmounts(x)))", "all x.(Chromoplast(x) -> (MakesAndStoresRedOrYellowColors(x) & LargeAmounts(x)))", "all x.(Chromoplast(x) -> (MakesRedOrYellowColors(x) & StoresRedOrYellowColors(x) & LargeAmounts(x)))", "all x.(Chromoplast(x) -> (MadeAndStoresRedOrYellowColors(x) & InLargeAmounts(x)))", "all x.(Chromoplast(x) -> (Makes(x,red) | Stores(x,y)) & InLargeAmounts(x,y))"]}
{"id": "eqasc_validation_957", "nl": "Pigments Pigments give color to paint.", "fol": "", "prediction": ["all x.(Pigment(x) -> GivesColorToPaint(x))", "all x y.((Pigment(x) & Pigment(y)) -> GivesColorToPaint(x,y))", "all x.(Pigment(x) -> GivesColorToPaint(x))", "(all x.(Pigment(x) -> GivesColorToPaint(x)))", "all x y z.((Pigment(x) & Pigment(y) & Paint(z)) -> GivesColor(x,y,z))", "all x y.((Pigment(x) & Pigment(y)) -> GivesColorToPaint(x,y))", "(GivingColorToPaint(pigments))", "all x y.((Pigment(x) & Paint(y)) -> GivesColor(x,y))", "all x.((Pigment(x) & Pigment(x)) -> GivesColorToPaint(x))", "all x.(Pigment(x) -> GivesColorToPaint(x))", "all x.(Pigments(x) -> GiveColorToPaint(x))", "all x y.((Pigment(x) & Pigment(y)) -> GivesColorToPaint(x,y))", "all x.(Pigment(x) -> GivesColorToPaint(x))", "exists x.(Pigment(x) & Pigment(x) & GivesColorToPaint(x))", "all x.(Pigments(x) -> GiveColorToPaint(x))", "all x.(Pigment(x) -> GivesColorToPaint(x))"]}
{"id": "eqasc_validation_958", "nl": "chromoplasts give color to paint", "fol": "", "prediction": ["all x.(Chromoplast(x) -> GivesColorToPaint(x))", "all x y.((Chromoplast(x) & Paint(y)) -> GivesColorTo(x,y))", "all x y z.((Chromoplast(x) & Paint(y) & Color(z)) -> GivesColorTo(x,y,z))", "(all x.(Chromoplast(x) -> GivesColorToPaint(x)))", "all x.(Chromoplast(x) -> GivesColorToPaint(x))", "all x y.((Chromoplast(x) & Paint(y)) -> GivesColorTo(x,y))", "all x y z.((Chromoplast(x) & Paint(y) & Paint(z)) -> GivesColorTo(x,y,z))", "all x.(Chromoplast(x) -> GivesColorToPaint(x))", "all x y z.(Chromoplast(x) -> GivesColorToPaint(x,y))", "all x y.((Chromoplast(x) & Paint(y)) -> GivesColorTo(x,y))", "all x.(Chromoplast(x) -> GiveColorToPaint(x))", "all x.(Chromoplast(x) -> GivesColorToPaint(x))", "all x y.((Chromoplast(x) & Paint(y)) -> GivesColor(x,y))", "all x.(Chromoplast(x) -> GiveColorToPaint(x))", "all x.(Chromoplast(x) -> GivesColorToPaint(x))", "all x.(Chromoplast(x) -> GivesColorToPaint(x))"]}
{"id": "eqasc_validation_959", "nl": "Chromoplasts are red, yellow or orange in hue due to the cartenoid pigments they contain.", "fol": "", "prediction": ["all x.(Chromoplast(x) -> (Red(x) | Yellow(x) | Orange(x)))", "(all x.(Chromoplast(x) -> Red(x)) & all y.(Chromoplast(y) -> Yellow(y))) & all z.(Chromoplast(z) -> Orange(z)))", "all x y.((Chromoplast(x) & CartenoidPigments(y)) -> (Red(x) | Yellow(x) | Orange(x)))", "all x.(Chromoplast(x) -> ((RedHaura(x) | YellowHaura(x) | OrangeHaura(x)) & Carbonoids(x)))", "all x.(Chromoplast(x) -> (Red(x) | Yellow(x) | Orange(x)) & Carbonoids(x)))", "all x y.((Chromoplast(x) & CartenoidPigments(y) & CartenoidPigments(x,y)) -> (Red(x) | Yellow(x) | Orange(x)))", "(all x.(Chromoplast(x) -> RedHasCartenoidPigments(x,y)) | (HasCartenoidPigments(x,z) & HasCartenoidPigments(x,z))))", "all x.(Chromoplast(x) -> (Red(x) | Yellow(x) | Orange(x)) & CartenoidPigments(x)))", "all x y.((Chromoplast(x) & Carbonoids(y)) -> (Red(x) | Yellow(x) | Orange(x)))", "all x.(Chromoplast(x) -> ((Red(x) | Yellow(x) | Orange(x)) & Carbonoids(x)))", "all x.(Chromoplast(x) -> ((RedHaura(x) | YellowHaura(x) | OrangeHaura(x)) & Carbonoids(x)))", "(all x.(Chromoplast(x) -> (Red(x) | Yellow(x) | Orange(x))))", "all x.(Chromoplast(x) -> (RedHaura(x) | YellowHaura(x) | OrangeHaura(x)) & Carbonoids(x))", "all x y.((Chromoplast(x) & CartonidPigments(y)) -> (Red(x) | Yellow(x) | Orange(x)))", "all x.(Chromoplast(x) -> ((RedHaura(x) | YellowHaura(x) | OrangeHaura(x)) & CartenoidPigments(x)))", "all x.(Chromoplast(x) -> (Red(x) | Yellow(x) | Orange(x)))"]}
{"id": "eqasc_validation_960", "nl": "Chromoplasts are red, yellow or orange in hue and make and store colors.", "fol": "", "prediction": ["all x.(Chromoplast(x) -> ((Red(x) | Yellow(x) | Orange(x)) & MakesColors(x) & StoresColors(x)))", "all x.(Chromoplast(x) -> ((Red(x) | Yellow(x) | Orange(x)) & MakesColors(x) & StoresColors(x)))", "(all x.(Chromoplast(x) -> (Rose(x) | Yellow(x) | Orange(x))) & MakesAndStoresColors(x))", "all x y.((Chromoplast(x) & Color(y)) -> ((Red(y) | Yellow(y) | Orange(y)) & Make(x,y) & Store(x,y)))", "all x.(Chromoplast(x) -> ((Red(x) | Yellow(x) | Orange(x)) & MakeColors(x) & StoreColors(x)))", "all x y.((Chromoplast(x) & Color(y)) -> ((RedHaura(x) | YellowHaura(x) | OrangeHaura(x)) & MakesAndStoresColors(x)))", "(all x.(Chromoplast(x) -> ((Red(x) | Yellow(x) | Orange(x))) & MakeColors(x) & StoreColors(x)))", "all x.(Chromoplast(x) -> ((RedHaura(x) | YellowHaura(x) | OrangeHaura(x)) & MakesAndStoresColors(x)))", "all x.(Chromoplast(x) -> (Red(x) | Yellow(x) | Orange(x)) & MakesAndStoresColors(x)))", "(all x.(Chromoplast(x) -> ((Red(x) | Yellow(x) | Orange(x)) & Color(x)) & Color(x)) & Color(x)) & Color(x))", "all x.(Chromoplast(x) -> ((Red(x) | Yellow(x) | Orange(x)) & MakesColors(x) & StoresColors(x)))", "all x y.((Chromoplast(x) & Color(y)) -> (Red(x) | Yellow(x) | Orange(x)) & MakesAndStoresColors(x,y)))", "all x.(Chromoplast(x) -> ((Red(x) | Yellow(x) | Orange(x)) & MakesColors(x) & StoresColors(x)))", "all x.(Chromoplast(x) -> (Red(x) | Yellow(x) | Orange(x)) & MakesAndStoresColors(x)))", "all x.(Chromoplast(x) -> ((Red(x) | Yellow(x) | Orange(x)) & MakeColors(x) & StoreColors(x)))", "all x.(Cromoplast(x) -> ((Red(x) | Yellow(x) | Orange(x)) & MakesAndStoresColors(x)))"]}
{"id": "eqasc_validation_961", "nl": "Chromoplasts are found in many flower petals and fruits.", "fol": "", "prediction": ["all x.(Chromoplast(x) -> (FoundIn(x,flowerPetals) & FoundIn(x,fruits)))", "all x.(Chromoplast(x) -> (exists y.(FlowerPetal(y) & FoundIn(x,y))) & exists z.(Fruit(z) & FoundIn(x,z)))))", "all x y.((Chromoplast(x) & FlowerPetal(y) & Fruit(y)) -> FoundIn(x,y))", "all x y z.((Chromoplast(x) & FlowerPetal(y) & Fruit(z)) -> FoundIn(x,y,z))", "(exists x.(Chromoplast(x) & FoundIn(x,flowerPetals) & FoundIn(x,fruits)))", "all x.(Chromoplast(x) -> (FoundInFlowerPetals(x) & FoundInFruits(x)))", "all x.(Chromoplast(x) -> exists y.(FlowerPetal(y) & Flower(y) & Fruit(y) & FoundIn(x,y)))", "all x y.((Chromoplast(x) & FlowerPetal(y) & Fruit(y)) -> FoundIn(x,y))", "all x.(Chromoplast(x) -> (exists y.(FlowerPetal(y) & FoundIn(x,y)) | exists z.(Fruit(z) & FoundIn(x,z)))))", "all x y z.(Chromoplast(x) -> (FoundIn(x,y) & FlowerPetals(y) & Fruit(z) & FoundIn(x,z)))", "all x y z.((Chromoplast(x) & FlowerPetal(y) & Fruit(z)) -> FoundIn(x,y,z))", "exists x.(Chromoplast(x) & FoundIn(x,flowerPetals) & FoundIn(x,fruits))", "all x.(Chromoplast(x) -> exists y.(FlowerPetal(y) | Fruit(y)) & FoundIn(x,y)))", "all x y.((Chromoplast(x) & FlowerPetal(y) & Fruit(y)) -> FoundIn(x,y))", "exists x.(Chromoplast(x) & FoundIn(x,flowerPetals,fruits))", "exists x.(Chamoplast(x) & FoundIn(x,flowerPetals) & FoundIn(x,fruit))"]}
{"id": "eqasc_validation_962", "nl": "Flower petals and fruits make and store pigments.", "fol": "", "prediction": ["all x y.((FlowerPetal(x) & Fruit(y)) -> (MakesPigments(x) & StoresPigments(x)))", "all x.((FlowerPetals(x) & Fruit(x)) -> (MakesPigments(x) & StoresPigments(x)))", "all x y.((FlowerPetals(x) & Fruit(y)) -> (MakesPigments(x) & StoresPigments(x)))", "all x y z.((FlowerPetal(x) & Fruit(y) & Pigment(z)) -> (Makes(y,z) & Stores(y,z)))", "(MakingPigments(flowerpets) & MakingPigments(fruits))", "all x.((FlowerPetal(x) & Fruit(x)) -> (MakesPigments(x) & StoresPigments(x)))", "(all x.(FloweringPetal(x) -> MakesPigments(x)) & all y.(Fruit(y) -> StoresPigments(y)))", "all x y.((FlowerPetal(x) & Fruit(y)) -> (MakesPigments(x,y) & StoresPigments(x,y)))", "(MakesPigments(flower) & MakesPigments(fruit) & StoresPigments(flower,fruit))", "(MakingPigments(FlowerPetals) | MakingPigments(Fruits)))", "all x.((FlowerPetals(x) | Fruits(x)) -> (MakesPigments(x) & StoresPigments(x)))", "all x.((FlowerPetal(x) | Fruit(x)) -> (MakesPigments(x) & StoresPigments(x)))", "all x y.((FlowerPetals(x) & Fruit(y)) -> (MakesPigments(x) & StoresPigments(x)))", "exists x.(FlowerPetals(x) & Fruits(x) & MakesPigments(x) & StoresPigments(x))", "all x y.((Floweringetals(x) & Fruit(y)) -> (MakesPigments(x,y) & StoresPigments(x,y)))", "all x.((FlowerPetals(x) & Fruit(x)) -> (MakesPigments(x) & StoresPigments(x)))"]}
{"id": "eqasc_validation_963", "nl": "flowers contain pigments", "fol": "", "prediction": ["all x.(Flower(x) -> ContainsPigments(x))", "all x y.((Flower(x) & Flower(y)) -> ContainsPigments(x,y))", "all x.(Flower(x) -> ContainsPigments(x))", "all x y z.((Flower(x) & Pigment(y) & Flower(z)) -> Contains(x,y,z))", "all x y.((Flower(x) & Pigment(y)) -> Contains(x,y))", "(all x.(Flower(x) -> ContainsPigments(x)))", "all x y.((Flower(x) & Flower(y)) -> ContainsPigments(x,y))", "all x.(Flower(x) -> ContainsPigments(x))", "exists x,y,z,w.(Flower(x) & Pigment(y) & Contains(x,z))", "all x y z.((Flower(x) & Pigment(y) & Flower(z)) -> Contains(x,y,z))", "all x.(Flower(x) -> ContainsPigments(x))", "all x y.((Flower(x) & Pigment(y)) -> Contains(x,y))", "all x.(Flower(x) -> (ContainsPigments(x) & InFlower(x)))", "all x.(Flower(x) -> ContainsPigments(x))", "all x.(Flower(x) -> ContainsPigmente(x))", "all x.(Flower(x) -> (ContainsPigments(x) & Flowers(x)))"]}
{"id": "eqasc_validation_964", "nl": "chromoplasts make and store the same thing that gives color to paint.", "fol": "", "prediction": ["all x.(Chromoplast(x) -> (MakesAndStoresSameThing(x) & GivesColorToPaint(x)))", "all x y.((Chromoplast(x) & Color(y)) -> MakesAndStores(x,y))", "all x.(Chromoplast(x) -> (MakesAndStoresSameThing(x) & GivesColorToPaint(x)))", "(all x.(Chromoplast(x) -> MakeAndStoreSameThing(x)))", "all x.(Chromoplast(x) -> (MakesAndStoresChemicalSameThing(x) & GivesColorToPaint(x)))", "all x y z.((Chromoplast(x) & Color(y) & Paint(z)) -> MakesAndStores(x,y,z))", "all x y.((Chromoplast(x) & Color(y)) -> MakesAndStores(x,y))", "all x y.((Chromoplast(x) & Paint(y)) -> (MakesAndStores(x,y) & GivesColor(x,y)))", "all x.(Chromoplast(x) -> (MakesAndStoresColor(x) & GivesColorToPaint(x)))", "all x.(Chromoplast(x) -> MakesAndStoresSameThing(x))", "exists x.(Crhomoplast(x) & Make(x,Crhomoplast) & Store(x,Crhomoplast))", "all x y.((Chromoplast(x) & Color(y)) -> MakeAndStore(x,y))", "all x.(Chromoplast(x) -> (Makes(x,y) & Stores(x,y)))", "all x y.((Chromoplast(x) & Paint(y)) -> (MakesAndStores(x,y) & GivesColorTo(x,y)))", "all x.(Chromoplast(x) -> (MakesAndStoresTheMameThing(x) & GivesColorToPaint(x)))", "all x.(Chromoplast(x) -> MakesAndStoresTheMadeAndStoresColor(x))"]}
{"id": "eqasc_validation_965", "nl": "Photosynthesis Pigments Pigments are substances that absorb visible light.", "fol": "", "prediction": ["all x.(PhotosynthesisPigments(x) -> (AbsorbsVisibleLight(x) & Pigments(x)))", "all x.(Photosynthesis(x) -> (Pigments(x) & AbsorbsVisibleLight(x)))", "all x y.((Photosynthesis(x) & Pigment(y)) -> AbsorbsVisibleLight(y,x))", "all x y.((PhotosynthesisPigment(x) & Substance(y)) -> AbsorbsVisibleLight(y,x))", "all x.(Pigment(x) -> (AbsorbsVisibleLight(x) & Pigments(x)))", "all x.(PhotosynthesisPigments(x) -> (AbsorbsVisibleLight(x) & Contains(x,y)))", "(AbsorbsVisibleLight(pigments) -> Photosynthesis(pigments))", "all x.(PhotosynthesisPigments(x) -> AbsorbsVisibleLight(x))", "All x y.((Pigment(x) & Pigment(y)) -> AbsorbsVisibleLight(x,y))", "exists x.(Pigment(x) & Photosynthesis(x) & AbsorbsVisibleLight(x))", "All x y.((Photosynthesis(x) & Pigment(y)) -> AbsorbsVisibleLight(y,x))", "all x.(Pigment(x) -> (AbsorbsVisibleLight(x) & Pigments(x)))", "all x.(PhotosynthesisPigment(x) -> AbsorbsVisibleLight(x))", "all x y.((PhotosynthesisPigment(x) & Substance(y)) -> AbsorbsVisibleLight(x,y))", "all x.(PhotosynthesisPigments(x) -> (AbsorbsVisibleLight(x) & Pigments(x)))", "all x.(PhotosynthesisPigment(x) -> AbsorbsVisibleLight(x))"]}
{"id": "eqasc_validation_966", "nl": "Chromoplasts store substances that absorb visible light", "fol": "", "prediction": ["all x.(Chromoplast(x) -> StoresSubstances(x))", "all x y.((Chromoplast(x) & Substance(y)) -> Stores(x,y))", "all x y z.((Chromoplast(x) & Substance(y) & VisibleLight(z)) -> Stores(x,y,z))", "all x y.((Chromoplast(x) & Substance(y) & AbsorbsVisibleLight(x,y)) -> Stores(x,y))", "(StoresSubstances(chromoplasts) & AbsorbsVisibleLight(chromoplasts))", "all x.(Chromoplast(x) -> StoresSubstances(x))", "all x.(Chromoplast(x) -> StoresSubstancesAbsorbingVisibleLight(x))", "all x.(Chromoplast(x) -> (StoresSubstances(x) & AbsorbsVisibleLight(x)))", "all x y z.(Chromoplast(x) -> StoresSubstances(x,y) & AbsorbsVisibleLight(y))", "all x y z.((Chromoplast(x) & Substance(y) & VisibleLight(z)) -> Stores(x,y))", "all x y.((Chromoplast(x) & Substance(y) & AbsorbsVisibleLight(x,y)) -> Stores(x,y))", "all x.(Chromoplast(x) -> StoresSubstancesThatAbsorbVisibleLight(x))", "all x.(Chromoplast(x) -> (StoresSubstances(x) & AbsorbsVisibleLight(x)))", "all x y.((Chromoplast(x) & Substance(y) & AbsorbsVisibleLight(x,y)) -> Stores(x,y))", "all x.(Chromoplast(x) -> StoresSubstancesAbsorbingVisibleLight(x))", "all x.(Chromoplast(x) -> (StoresSubstances(x) & AbsorbsVisibleLight(x)))"]}
{"id": "eqasc_validation_967", "nl": "chromoplasts are hued", "fol": "", "prediction": ["all x.(Chromoplast(x) -> Hushed(x))", "all x y.((Chromoplast(x) & Chromoplast(y)) -> Hushed(x))", "all x.(Chromoplast(x) -> Hued(x))", "(Hued(chromoplast) -> Chromoplast(chromoplast))", "all x y.((Chromoplast(x) & Chromoplast(y)) -> Hued(x,y))", "all x y z.(Chromoplast(x) -> (Hued(y) & Chromoplast(z) & Colored(z)))", "all x.(Chromoplast(x) -> Hushed(x))", "(Hued(chromoplast) | Hued(chromoplast))", "all x.(Chromoplast(x) -> Hued(x))", "all x y.((Chromoplast(x) & Chromoplast(y)) -> Hushed(x,y))", "all x.(Crhomoplast(x) -> Hushed(x))", "all x y.((Chromoplast(x) & Chromoplast(y)) -> Hued(x,y))", "all x.(Chromoplast(x) -> Hushed(x))", "all x.(Chromoplast(x) -> (Hued(x) & Chromoplast(x)))", "all x.(Chromoplast(x) -> Huded(x))", "all x.(Chromoplast(x) -> Hushed(x))"]}
{"id": "eqasc_validation_968", "nl": "Photosynthetic Pigments Photosynthetic Pigments Pigments are colorful compounds.", "fol": "", "prediction": ["all x.(PhotosyntheticPigment(x) -> ColorfulCompound(x))", "all x y.((PhotosyntheticPigment(x) & Pigment(y)) -> ColorfulCompound(x))", "all x.(PhotosyntheticPigment(x) -> ColorfulCompound(x))", "(ColorfulCompound(pigments) & Photosynthetic(pigments))", "all x.(Pigment(x) -> ColorfulCompound(x))", "all x.((PhotosyntheticPigment(x) & Pigment(y)) -> ColorfulCompound(x))", "all x.(Pigment(x) -> (Photosynthetic(x) | Pigment(x)))", "all x y.((PhotosyntheticPigment(x) & Pigment(y)) -> ColorfulCompound(x))", "all x y.((Pigment(x) & Pigment(y)) -> ColorfulCompound(x,y))", "all x.(PhotosyntheticPigment(x) -> ColorfulCompound(x))", "exists x.(Pigment(x) & Photosynthetic(x)) -> ColorfulCompound(x))", "all x y.((PhotosyntheticPigment(x) & Pigment(y)) -> ColorfulCompound(x,y))", "all x.(PhotosyntheticPigments(x) -> ColorfulCompound(x))", "all x.(PhotosyntheticPigments(x) -> (ColorfulCompound(x) & Pigments(x)))", "all x.(PhotosyntheticPigment(x) -> ColorfulCompound(x))", "All x.(PhotosyntheticPigment(x) -> ColorfulCompound(x))"]}
{"id": "eqasc_validation_969", "nl": "Chromoplasts make and store colorful compounds", "fol": "", "prediction": ["all x y.((Chromoplast(x) & ColorfulCompound(y)) -> (Makes(x,y) & Stores(x,y)))", "all x.(Chromoplast(x) -> (MakesColorfulCompounds(x) & StoresColorfulCompounds(x)))", "all x y z.((Chromoplast(x) & ColorfulCompound(y) & Compound(z)) -> (Makes(x,y) & Stores(x,z)))", "all x y z.((Chromoplast(x) & ColorfulCompound(y) & ColorfulCompound(z)) -> (Makes(x,y) & Stores(x,z)))", "all x.(Chromoplast(x) -> (MakesColorfulCompounds(x) & StoresColorfulCompounds(x)))", "(all x.(Chromoplast(x) -> Make(x,ColorfulCompounds))) & Store(x,ColorfulCompounds))", "all x.(Chromoplast(x) -> (MakesClothingCompounds(x) & StoresColorfulCompounds(x)))", "all x y.((Chromoplast(x) & ColorfulCompound(y)) -> (Makes(x,y) & Stores(x,y)))", "all x y z.(Chromoplast(x) -> (MakesClothingCompounds(x) & StoresCompounds(x,y,z) & ColorfulCompounds(y) & ColorfulCompounds(z)))", "all x.(Chromoplast(x) -> (Makes(x,ColorfulCompounds) & Stores(x,ColorfulCompounds)))", "all x y z.((Chromoplast(x) & ColorfulCompound(y) & Compound(z)) -> (MakesAndStores(x,y) & ColorfulCompound(z)))", "all x y.((Chromoplast(x) & ColorfulCompound(y)) -> (Makes(x,y) & Stores(x,y)))", "all x y.((Chromoplast(x) & ColorfulCompound(y)) -> MakesAndStores(x,y))", "all x.(Chromoplast(x) -> (MakesColorfulCompounds(x) & StoresColorfulCompounds(x)))", "all x.(Chromoplast(x) -> (MadeColorfulCompounds(x) & StoreColorfulCompounds(x) & ColorfulCompounds(x)))", "all x.(Chromoplast(x) -> (MakesClothingCompounds(x) & StoresColorfulCompounds(x)))"]}
{"id": "eqasc_validation_970", "nl": "Chromoplasts make red coloring", "fol": "", "prediction": ["all x.(Chromoplast(x) -> MakesRedColoring(x))", "all x y.((Chromoplast(x) & Chromoplast(y)) -> MakesRedColoring(x,y))", "all x y z.((Chromoplast(x) & RedColoring(y) & Chromoplast(z)) -> Makes(x,y,z))", "(all x.(Chromoplast(x) -> MakesRedColoring(x)))", "all x.(Chromoplast(x) -> MakesRedColoring(x))", "all x y.((Chromoplast(x) & Chromoplast(y)) -> MakesRedColoring(x,y))", "(all x.(Chromoplast(x) -> MakesRedColoring(x)))", "all x y z.((Chromoplast(x) & RedColoring(y) & Chromoplast(z)) -> Makes(x,z))", "all x.(Chromoplast(x) -> MakesRedColoring(x))", "(all x.(Chromoplast(x) -> MakesRedColoring(x)))", "all x y.((Chromoplast(x) & Chromoplast(y)) -> MakesRedColoring(x,y))", "all x y.((Chromoplast(x) & RedColoring(y) & Chromoplast(x)) -> Makes(x,y))", "all x.(Chromoplast(x) -> RedColoring(x))", "all x.(Chromoplast(x) -> MakesRedColoring(x))", "all x.(Chromoplast(x) -> RedColoring(x))", "all x.(Chromoplast(x) -> MakesRedColoring(x))"]}
{"id": "eqasc_validation_971", "nl": "bees convert nectar into honey", "fol": "", "prediction": ["all x y.((Bee(x) & Nectar(y)) -> ConvertsToHoney(x,y))", "all x y z.((Bee(x) & Nectar(y) & Honey(z)) -> ConvertsTo(x,y,z))", "all x.(Bee(x) -> (ConvertsNectarToHoney(x) & BeesConvertNectarToHoney(x)))", "all x.(Bee(x) -> (ConvertsNectarToHoney(x) & BeesConvertNectarToHoney(x)))", "(ConvertsNectarToHoney(bees) & BeesConvertsNectarIntoHoney(bees))", "all x y.((Bee(x) & Nectar(y)) -> ConvertsToHoney(x,y))", "all x y z.((Bee(x) & Nectar(y) & Honey(z)) -> ConvertsTo(x,y,z))", "all x.(Bee(x) -> ConvertsNectarToHoney(x))", "all x.(Bee(x) -> (ConvertsNectarIntoHoney(x)))", "all x y.((Bee(x) & Nectar(y)) -> ConvertsToHoney(x,y))", "(all x.(Bee(x) -> ConvertsNectarToHoney(x)))", "all x y z.((Bee(x) & Nectar(y) & Honey(z)) -> ConvertsTo(x,y,z))", "all x.(Bee(x) -> (ConvertsNectarToHoney(x) & BeesConvertNectarToHoney(x)))", "all x y.((Bee(x) & Nectar(y)) -> ConvertsToHoney(x,y))", "all x.(Bee(x) -> ConvertsNectarToHoney(x))", "all x y z.((Bee(x) & Nectar(y) & Honey(z)) -> ConvertsTo(x,y,z))"]}
{"id": "eqasc_validation_972", "nl": "Honey bees are very social in that they all live together in home, or apiary.", "fol": "", "prediction": ["all x.(HoneyBee(x) -> (LivesInHome(x) | LivesInAapiary(x)))", "all x.(HoneyBee(x) -> (Social(x) & LivesInHome(x) | LivesInAapiary(x)))", "all x y.((HoneyBee(x) & Home(y)) | Apiary(y)) -> Social(x))", "(all x.(HoneyBee(x) -> Social(x)))", "all x y z.((HoneyBee(x) & Home(y) & Apiary(z)) -> (Social(x,y,z) & LivesIn(x,y)))", "all x.(HoneyBee(x) -> (LivesInHome(x) | LivesInApiary(x)))", "all x y.((HoneyBee(x) & Home(y) & Apiary(z)) -> Social(x,y,z))", "all x.(HoneyBee(x) -> (Social(x) & LivesInHome(x) | LivesInAipary(x)))", "(all x.(HoneyBee(x) -> LivesInHomeOrAapiary(x)))", "all x.(HoneyBee(x) -> (Social(x) & (LivesInHome(x) | LivesInAapiary(x))))", "all x y.((HoneyBee(x) & (Home(y) | Apiary(y))) -> Social(x))", "all x.(HoneyBee(x) -> (Social(x) & (LivesInHome(x) | LivesInAapiary(x))))", "all x.(HoneyBee(x) -> (LivesInHome(x) | LivesInAipary(x)))", "all x.(HoneyBee(x) -> (StaysInHome(x) | LivesInAapiary(x)))", "all x y.((HoneyBee(x) & Home(y) & Apiary(z)) -> Social(x,y,z))", "all x.(HoneyBee(x) -> (LivesInHome(x) | LivesInAapiary(x)))"]}
{"id": "eqasc_validation_973", "nl": "Nectar is converted into honey in an apiary", "fol": "", "prediction": ["all x y z.((Nectar(x) & Honey(y) & Apiary(z)) -> ConvertedTo(x,y,z))", "all x y.((Nectar(x) & Apiary(y)) -> ConvertedToHoney(x,y))", "(ConvertedIntoHoneyInAapiary(nectar) & NectarConvertedIntoHoney(nectar))", "all x.((Nectar(x) & Apiary(x)) -> ConvertedToHoney(x))", "(ConvertsNectarToHoney(nectar,apiary) & In(nectar,apiary))", "all x y z.((Nectar(x) & Apiary(y) & Apiary(z)) -> ConvertedToHoney(x,y,z))", "(convertedToHoney(nectar) & InApiary(nectar))", "all x y z.((Nectar(x) & Honey(y) & Apiary(z)) -> ConvertedTo(x,y,z))", "all x y.((Nectar(x) & Apiary(y)) -> ConvertedToHoney(x,y))", "(ConvertedIntoHoneyInAapiary(nectar) & NectarConvertedIntoHoney(nectar))", "all x.(NectarConvertedToHoneyInAapiary(x) -> HoneyConversion(x))", "all x.((Nectar(x) & ConvertedToHoney(x)) -> InAapiary(x))", "all x y z.((Nectar(x) & Honey(y) & Apiary(z) & ConvertedTo(x,y,z)) -> In(y,z))", "all x y.((Nectar(x) & Apiary(y)) -> ConvertedToHoney(x,y))", "all x.((Nectar(x) & Apiary(y)) -> ConvertedToHoney(x,y))", "all x y.((Nectar(x) & Apiary(y)) -> ConvertedIntoHoney(x,y))"]}
{"id": "eqasc_validation_974", "nl": "Butterflies feed on nectar produced by flowers.", "fol": "", "prediction": ["all x.(Butterfly(x) -> FeedsOnNectar(x))", "all x y.((Butterfly(x) & Flower(y)) -> FeedsOnNectar(x,y))", "all x y z.((Butterfly(x) & Flower(y) & Nectar(z)) -> FeedsOn(x,y,z))", "all x y.((Butterfly(x) & Flower(y)) -> FeedsOn(x,y))", "(FeedsOnNectarProducedByFlowers(Butterfly,flower))", "all x.(Butterfly(x) -> FeedsOnNectar(x))", "all x.(Butterfly(x) -> (FeedsOnNectar(x) & ProducedByFlowers(x)))", "all x y.((Butterfly(x) & Flower(y)) -> FeedsOnNectar(x,y))", "(FeedsOnNectarProducedByFlowers(Butterfly)", "all x y z.((Butterfly(x) & Flower(y) & Nectar(z)) -> FeedsOn(x,z))", "all x.(Butterfly(x) -> FeedsOnNectar(x))", "(FeedsOnNectarProducedByFlowers(Butterfly,flower) & Produces(Butterfly,flower))", "all x.(Butterfly(x) -> (FeedsOnNectar(x,flowers) & ProducedBy(x,flowers)))", "all x y.((Butterfly(x) & Flower(y)) -> FeedsOnNectar(x,y))", "all x.(Butterfly(x) -> FeedsOnNectar(x))", "all x.(Butterfly(x) -> FeedsOnNectar(x,flowers))"]}
{"id": "eqasc_validation_975", "nl": "Bees need flowers to make honey.", "fol": "", "prediction": ["all x.(Bee(x) -> NeedsFlowers(x))", "all x y.((Bee(x) & Flower(y)) -> NeedsToMakeHoney(x,y))", "all x.(Bee(x) -> NeedsFlowersToMakeHoney(x))", "(NeedsFlowersToMakeHoney(Bee) & BeesNeedsFlowers(Bee,Honey))", "all x y z.((Bee(x) & Flower(y) & Honey(z)) -> NeedsToMake(x,y,z))", "all x y.((Bee(x) & Flower(y)) -> NeedsToMakeHoney(x,y))", "all x.(Bee(x) -> NeedsFlowers(x))", "all x y.(Bee(x) & Flower(y) & NeedsToMakeHoney(x,y))", "all x.(Bee(x) -> NeedsFlowersToMakeHoney(x))", "all x y.((Bee(x) & Flower(y)) -> NeedsToMakeHoney(x,y))", "all x.(Bee(x) -> NeedsFlowersToMakeHoney(x))", "all x y.((Bee(x) & Flower(y)) -> NeedsToMakeHoney(x,y))", "all x.(Bee(x) -> NeedsFlowersToMakeHoney(x))", "all x.(Bee(x) -> NeedsFlowersForHoney(x))", "exists x.(Bee(x) & Needs(x,flowers))", "exists x.(Bee(x) & Needs(x,flowers))"]}
{"id": "eqasc_validation_976", "nl": "Bees change nectar in the beehive.", "fol": "", "prediction": ["all x y.((Bee(x) & Beehive(y)) -> ChangesNectar(x,y))", "all x.(Bee(x) -> ChangesNectarInBeehive(x))", "all x y z.((Bee(x) & Beehive(y) & Nectar(z)) -> ChangesIn(x,y,z))", "(ChangesNectarInBeehive(Bee) & BeesChangeNectarInBeehive(Bee,Bee,Bee))", "all x y.((Bee(x) & Beehive(y)) -> ChangesNectarIn(x,y))", "all x.(Bee(x) -> ChangesNectarInBeehive(x))", "(ChangesNectarInBeehive(bee) & BeesChangeNectarInBeehive(bee))", "all x y z.((Bee(x) & Beehive(y) & Nectar(z)) -> ChangesIn(x,y,z))", "all x y.((Bee(x) & Beehive(y)) -> ChangesNectar(x,y))", "all x y.(Bee(x) & Beehive(y) & ChangesNectarIn(x,y))", "all x.(Bee(x) -> ChangesNectarInBeehive(x))", "exists x.(Bee(x) & Beehive(y) & ChangesNectar(x,y))", "all x y.((Bee(x) & Beehive(y)) -> ChangesNectarIn(x,y))", "all x.(Bee(x) -> ChangesNectarInBeehive(x))", "all x.(Bee(x) -> ChangesNectarInBeehive(x))", "all x.(Bee(x) -> ChangesNectarInBeehive(x))"]}
{"id": "eqasc_validation_977", "nl": "honey is changed in the beehive", "fol": "", "prediction": ["all x y.((Honey(x) & Beehive(y)) -> ChangedIn(x,y))", "all x y z.((Honey(x) & Beehive(y) & Beehive(z)) -> ChangedIn(x,y,z))", "all x.(HoneyChange(x) -> ChangedInBeehive(x))", "all x.((Honey(x) & Beehive(y)) -> ChangedIn(x,y))", "(ChangesHoneyInBeehive(honey) -> ChangesInBeehive(honey))", "all x y.((Honey(x) & Beehive(y)) -> ChangedIn(x,y))", "(ChangesHoneyInBeehive(Honey) | ChangesHoneyInBeehive(Honey))", "all x y z.((Honey(x) & Beehive(y) & Beehive(z)) -> ChangedIn(x,y,z))", "all x y z.((Honey(x) & Beehive(y) & Beehive(z) & ChangedIn(x,y,z)) -> ChangedIn(x,y,z))", "(ChangeInBeehive(Honey) -> HoneyChange(Honey,Beehive))", "all x.((Honey(x) & Beehive(y)) -> ChangedInBeehive(x,y))", "all x y.((Honey(x) & Beehive(y)) -> ChangedIn(x,y))", "all x.(HoneyChange(x) -> ChangedInBeehive(x))", "all x.(HoneyChange(x) -> ChangedInBeehive(x))", "all x y.((Honey(x) & Beehive(y)) -> ChangedInBeehive(x,y))", "all x y.((Honey(x) & Beehive(y)) -> Changes(x,y))"]}
{"id": "eqasc_validation_978", "nl": "Flowers are the source of nectar for a preferred honey.", "fol": "", "prediction": ["all x y.((Flower(x) & Honey(y)) -> SourceOfNectar(x,y))", "all x.(Flower(x) -> (SourceOfNectar(x) & PreferedHoney(x)))", "all x y z.((Flower(x) & Honey(y) & Honey(z)) -> SourceOfNectar(x,y,z))", "all x y.((Flower(x) & Honey(y)) -> SourceOfNectar(x,y))", "(SourceOfNectar(Flower) & PreferedHoney(Flower))", "all x.(Flower(x) -> (NectarSource(x) & PreferedHoney(x)))", "all x y.((Flower(x) & Honey(y)) -> NectarSource(x,y))", "all x y z.((Flower(x) & Honey(y) & Honey(z)) -> NectarSource(x,y,z))", "all x.(Flower(x) -> (SourceOfNectar(x) & PreferedHoney(x)))", "all x.(Flower(x) -> SourceOfNectar(x))", "all x y z.((Flower(x) & Honey(y) & Honey(z)) -> SourceOfNectar(x,y,z))", "all x.(Flower(x) -> NectarSourceForPreferredHoney(x))", "all x y.((Flower(x) & Honey(y)) -> SourceOfNectar(x,y))", "exists x.(Flower(x) & SourceOfNectar(x) & PreferedHoney(x))", "all x.(Flower(x) -> (NectarSource(x,y) & HoneyPreferred(y)))", "all x y.((Flower(x) & Honey(y)) -> NectarSource(x,y))"]}
{"id": "eqasc_validation_979", "nl": "Bees get nectar from flowers", "fol": "", "prediction": ["all x y z.((Bee(x) & Flower(y) & Flower(z)) -> GetsNectarFrom(x,y,z))", "all x y.((Bee(x) & Flower(y)) -> GetsNectarFrom(x,y))", "all x.(Bee(x) -> (GetsNectarFromFlowers(x) & FromFlowers(x)))", "all x y z.((Bee(x) & Flower(y) & Flower(z)) -> GetsNectarFrom(x,y,z))", "all x y.((Bee(x) & Flower(y)) -> GetsNectarFrom(x,y))", "all x.(Bee(x) -> GetsNectarFromFlowers(x))", "(all x.(Bee(x) -> GetsNectarFromFlowers(x)))", "(all x y.(Bee(x) -> GetsNectarFromFlowers(x,y)))", "all x.(Bee(x) -> (GetsNectarFromFlowers(x) & FromFlowers(x)))", "all x y z.((Bee(x) & Flower(y) & Flower(z)) -> GetsNectarFrom(x,y,z))", "all x y z.((Bee(x) & Flower(y) & Nectar(z)) -> GetsFrom(x,y,z))", "all x y.((Bee(x) & Flower(y)) -> GetsNectarFrom(x,y))", "all x.(Bee(x) -> GetsNectarFromFlowers(x))", "(all x.(Bee(x) -> GetsNectarFromFlowers(x)))", "all x y.((Bee(x) & Flower(y)) -> GetsNectarFrom(x,y))", "all x.(Bee(x) -> (GetsNectarFromFlowers(x) & FromFlowers(x)))"]}
{"id": "eqasc_validation_980", "nl": "Flowers secrete nectar.", "fol": "", "prediction": ["all x.(Flower(x) -> SecretesNectar(x))", "all x y.((Flower(x) & Nectar(y)) -> Secretes(x,y))", "all x.(Flower(x) -> SecretesNectar(x))", "all x y.((Flower(x) & Nectar(y)) -> Secretes(x,y))", "all x.(Flower(x) -> SecretesNectar(x))", "all x y z.((Flower(x) & Nectar(y) & Nectar(z)) -> Secretes(x,y,z))", "all x y.((Flower(x) & Nectar(y) & Secretes(x,y)) -> Secretes(x,y))", "all x.(Flower(x) -> SecretesNectar(x))", "all x y.((Flower(x) & Nectar(y)) -> Secretes(x,y))", "all x y.((Flower(x) & Nectar(y) & Secretes(x,y)) -> Secretes(x,y))", "all x.(Flower(x) -> SecretesNectar(x))", "all x.(Flower(x) -> SecretesNectar(x))", "exists x.(Flower(x) & SecretsNectar(x))", "exists x.(Flower(x) & Nectar(x))", "all x.(Flower(x) -> SecretesNectar(x))", "exists x.(Flower(x) & SecretsNectar(x))"]}
{"id": "eqasc_validation_981", "nl": "bees convert flower secretion into honey", "fol": "", "prediction": ["all x y.((Bee(x) & FlowerSecr\u00e9tion(y)) -> ConvertsToHoney(x,y))", "all x y z.((Bee(x) & FlowerSecr\u00e9tion(y) & Honey(z)) -> ConvertsTo(x,y,z))", "all x.(Bee(x) -> (ConvertsFlowerSectionToHoney(x)))", "all x y z.((Bee(x) & Flower(y) & Honey(z)) -> ConvertsTo(x,y,z))", "all x y.((Bee(x) & FlowerSecr\u00e9tion(y)) -> ConvertsToHoney(x,y))", "all x.(Bee(x) -> (ConvertsFlowerSecr\u00e9tionToHoney(x)))", "all x.(Bee(x) -> ConvertsFlowerSecr\u00e9tionToHoney(x))", "all x.(Bee(x) -> (ConvertsFlowerSectionToHoney(x) & FlowerSectionIntoHoney(x)))", "all x y z.((Bee(x) & Flower(y) & Honey(z)) -> ConvertsTo(x,y,z))", "(all x.(Bee(x) -> ConvertsFlowerSecr\u00e9tionToHoney(x)))", "all x y.((Bee(x) & FlowerSecr\u00e9tion(y)) -> ConvertsToHoney(x,y))", "all x y.((Bee(x) & Flower(y)) -> ConvertsToHoney(x,y))", "all x.(Bee(x) -> ConvertsFlowerSectionToHoney(x))", "all x y z.((Bee(x) & Flower(y) & Honey(z)) -> ConvertsTo(x,y,z))", "all x.(Bee(x) -> (ConvertsFlowerSecretion(x) & ProducesHoney(x)))", "all x.(Bee(x) -> ConvertsFlowerSecr\u00e9tionToHoney(x))"]}
{"id": "eqasc_validation_982", "nl": "Tea with honey is good.", "fol": "", "prediction": ["all x.((Tea(x) & Honey(x)) -> Good(x))", "(Good(Tea(tea) & HasHoney(t))", "all x.((Tea(x) & Honey(x)) -> Good(x))", "all x y.((Tea(x) & Honey(y)) -> Good(x,y))", "all x.((Tea(x) & HasHoney(x)) -> Good(x))", "(Good(TeaWithHoney) & Has(TeaWithHoney(Tea))", "(Good(Tea(tea) & Honey(t))", "all x.((Tea(x) & Honey(x)) -> Good(x))", "all x y.((Tea(x) & Honey(y)) -> Good(x,y))", "all x.(Tea(x) & HasHoney(x))", "all x.((Tea(x) & HasHoney(x)) -> Good(x))", "exists x.(Tea(x) & HasHoney(x))", "all x.((Tea(x) & Honey(x)) -> Good(x))", "All x y.((Tea(x) & Honey(y)) -> Good(x,y))", "exists x.(Tea(x) & HasHoney(x))", "all x y.((Tea(x) & Honey(y)) -> Good(x,y))"]}
{"id": "eqasc_validation_983", "nl": "bees convert nectar into something for tea", "fol": "", "prediction": ["all x y.((Bee(x) & Nectar(y)) -> ConvertsToTea(x,y))", "all x y z.((Bee(x) & Nectar(y) & Tea(z)) -> ConvertsTo(x,y,z))", "all x.(Bee(x) -> (ConvertsNectar(x) & Tea(x)))", "all x.(Bee(x) -> (ConvertsNectarToTea(x) & Tea(x)))", "(ConvertsNectarToTea(bee) & ForTea(bee) & ForTea(bee))", "all x y.((Bee(x) & Nectar(y)) -> ConvertsToTea(x,y))", "all x.(Bee(x) -> ConvertsNectarToTea(x))", "all x y z.((Bee(x) & Nectar(y) & Tea(z)) -> ConvertsTo(x,y,z))", "(convertsNectarToTea(bee))", "all x y.((Bee(x) & Nectar(y)) -> ConvertsTo(x,y))", "all x.(Bee(x) -> (ConvertsNectarToTea(x) & ForTea(x)))", "all x y z.((Bee(x) & Nectar(y) & Tea(z)) -> ConvertsTo(x,y,z))", "all x.(Bee(x) -> ConvertsNectarToTea(x))", "all x y.((Bee(x) & Nectar(y)) -> ConvertsToTea(x,y))", "all x y z.((Bee(x) & Nectar(y) & Tea(z)) -> ConvertsInto(x,y,z))", "all x.(Bee(x) -> (ConvertsNectarToTea(x) & Tea(x)))"]}
{"id": "eqasc_validation_984", "nl": "Bees move from flower to flower, gathering nectar.", "fol": "", "prediction": ["all x y.((Bee(x) & Flower(y)) -> MovesFromTo(x,y))", "all x.(Bee(x) -> (MovesFromFlowerToFlower(x) & GathersNectar(x)))", "all x y z.((Bee(x) & Flower(y) & Flower(z)) -> (MovesFromTo(x,y,z) & GathersNectar(x)))", "all x y.((Bee(x) & Flower(y)) -> (MovesFromTo(x,y) & GathersNectar(x)))", "all x.(Bee(x) -> (MovesFromFlowerToFlower(x) & GathersNectar(x)))", "(MovesFromFlowerToFlower(bee) & GathersNectar(bee))", "all x y z.((Bee(x) & Flower(y) & Flower(z)) -> MovesFromTo(x,y,z))", "all x y.(Bee(x) -> (MovesFromFlowerToFlower(x,y) & GathersNectar(x)))", "all x y z.((Bee(x) & Flower(y) & Flower(z)) -> (MovesFromTo(x,y,z) & GathersNectar(x)))", "exists x.(Bee(x) & Flower(x) & Flower(x) & MovesFromTo(x,y) & GathersNectar(x))", "all x.(Bee(x) -> (MovesFromFlowerToFlower(x) & GathersNectar(x)))", "all x y.((Bee(x) & Flower(y)) -> MovesFromTo(x,y))", "exists x.(Bee(x) & MovesFromFlowerToFlower(x) & GathersNectar(x))", "all x.(Bee(x) -> (MovesFromFlowerToFlower(x) & GathersNectar(x)))", "all x.(Bee(x) -> (MovesFromFlowerToFlower(x) & GathersNectar(x)))", "all x.(Bee(x) -> (MovesFromFlowerToFlower(x) & GathersNectar(x)))"]}
{"id": "eqasc_validation_985", "nl": "Bees make honey from what they gather from flowers", "fol": "", "prediction": ["all x y z.((Bee(x) & Flower(y) & Flower(z)) -> (MakesHoneyFrom(x,y) & GathersFrom(x,z)))", "all x y.((Bee(x) & Flower(y)) -> MakesHoneyFrom(x,y))", "all x.(Bee(x) -> (MakesHoneyFromWhat(x) & GathersFromFlowers(x)))", "all x y z.((Bee(x) & Flower(y) & Flower(z)) -> MakesHoneyFrom(x,y,z))", "all x y.((Bee(x) & Flower(y)) -> MakesHoneyFrom(x,y))", "all x y z.((Bee(x) & Honey(y) & Flower(z)) -> (MakesFrom(x,y) & GathersFrom(x,z)))", "all x y.((Bee(x) & Flower(y)) -> (MakesHoneyFrom(x,y) & GathersFrom(x,y)))", "all x.(Bee(x) -> (MakesHoneyFromWhat(x) & GathersFromFlowers(x)))", "(all x y.((Bee(x) & Flower(y)) -> MakesHoneyFrom(x,y)))", "(all x.(Bee(x) -> MakesHoneyFromWhatFlowersGathering(x)))", "all x.(Bee(x) -> (MakesHoneyFromWhatGatheringFromFlowers(x) & GathersFromFlowers(x)))", "all x.(Bee(x) -> (MakesHoneyFromWhat(x) & GathersFromFlowers(x)))", "all x y z.((Bee(x) & Flower(y) & Flower(z)) -> MakesHoneyFrom(x,y,z))", "all x y z.((Bee(x) & Honey(y) & Flowers(z) & GathersFrom(x,y,z)) -> MakesFrom(x,y))", "all x.(Bee(x) -> (MakeHoneyFromWhatGatheringFromFlowers(x)))", "all x y.((Bee(x) & Flower(y)) -> MakesHoneyFromWhat(x,y))"]}
{"id": "eqasc_validation_986", "nl": "Nectar is in flowers, trees and hummingbird feeders.", "fol": "", "prediction": ["all x.(Nectar(x) -> (InFlowers(x) | InTrees(x) | InHummingbirdFeeders(x)))", "(InFlowers(nectar) | InTrees(nectar) | InHummingbirdFeeders(nectar)))", "all x y.((Nectar(x) & Flower(y)) | Tree(y) | HummingbirdFeeder(y)) -> In(x,y))", "all x y z.((Nectar(x) & Flower(y) & Tree(z) & HummingbirdFeeder(x)) -> In(x,y,z))", "(exists x.(Nectar(x) & InFlowers(x)) & exists y.(Tree(y) & InHummingbirdFeeders(x))))", "all x.(Nectar(x) -> (InFlowers(x) | InTrees(x) | InHummingbirdFeeders(x)))", "(InFlowers(nectar) & InTrees(nectar) & InHummingbirdFeeders(nectar))", "all x.(Nectar(x) -> (InFlowers(x) & InTrees(x) & InHummingbirdFeeders(x)))", "all x y.((Nectar(x) & Flower(y) & Tree(z)) -> (InFeeders(x,y) | InFeeders(x,z) | InFeeders(x,z)))", "all x.(Nectar(x) -> (InFlowers(x) & InTrees(x) & InHummingbirdFeeders(x)))", "(InFlowers(nectar) | InTrees(nectar) | InHummingbirdFeeders(nectar)))", "all x.(Nectar(x) -> (InFlowers(x) | InTrees(x) | InHummingbirdFeeders(x)))", "(InFlowers(next to) & InTrees(next to) & InHummingbirdFeeders(next to))", "all x.(Nectar(x) -> (InFlowers(x) & InTrees(x) & InHummingbirdFeeders(x)))", "exists x.(Nectar(x) & InFlowers(x) & InTrees(x) & InHummingbirdFeeders(x))", "exists x.(Nectar(x) & InFlowers(x) & InTrees(x) & InHummingbirdFeeders(x))"]}
{"id": "eqasc_validation_987", "nl": "Bees gather material to make honey from flowers and trees.", "fol": "", "prediction": ["all x.(Bee(x) -> (GathersMaterial(x) & MakesHoneyFromFlowersAndTrees(x)))", "all x y z.((Bee(x) & Material(y) & Honey(z)) -> GathersForMaking(x,y,z))", "all x y.((Bee(x) & (Flower(y) | Tree(y))) -> GathersMaterialToMakeHoney(x,y))", "all x y z.((Bee(x) & (Flower(y) | Tree(y))) -> GathersMaterialToMakeHoney(x,y,z))", "(all x.(Bee(x) -> GathersMaterialToMakeHoneyFromFlowersAndTrees(x)))", "all x.(Bee(x) -> (GathersMaterial(x) & MakesHoneyFromFlowersAndTrees(x)))", "all x.(Bee(x) -> GathersMaterialToMakeHoneyFromFlowersAndTrees(x))", "all x y z.((Bee(x) & Material(y) & Honey(z) & Flowers(z) & Tree(z)) -> GathersForMaking(x,y,z))", "all x y.((Bee(x) & (Flower(y) | Tree(y))) -> GathersMaterialToMakeHoney(x,y))", "all x.(Bee(x) -> (GathesMaterial(x) & MakesHoneyFromFlowersAndTrees(x)))", "all x y z.((Bee(x) & (Flower(y) | Tree(y))) -> GathersMaterialToMakeHoneyFrom(x,y,z))", "exists x.(Bee(x) & GathersMaterial(x) & MakesHoneyFromFlowersAndTrees(x))", "all x y.((Bee(x) & (Flower(y) | Tree(y))) -> GathersMaterial(x,y))", "all x.(Bee(x) -> GathersMaterialToMakeHoneyFromFlowersAndTrees(x))", "all x.(Bee(x) -> (GathesMaterial(x,y) & MakesHoneyFromFlowersAndTrees(x,z)))", "all x.(Bee(x) -> (GathersMaterial(x) & MakesHoneyFromFlowersAndTrees(x)))"]}
{"id": "eqasc_validation_988", "nl": "Hagfish are noted for secreting large amounts of thick, slimy mucus.", "fol": "", "prediction": ["all x.(Haggfish(x) -> (SectsLargeAmountsOfThickSlimyMucus(x)))", "all x y.((Haggfish(x) & ThickSlimyMucus(y)) -> Secretes(x,y))", "(all x.(Haggfish(x) -> SecretsLargeMucus(x)))", "all x.(Haggfish(x) -> (SectsLargeAmountsOfThickSlimyMucus(x)))", "all x.(Haggfish(x) -> (SectsLargeMucus(x) & ThickSlimyMucus(x)))", "all x.(Hagfish(x) -> (SecretsLargeAmountsOfThickSlimyMucus(x)))", "all x y z.(Haggfish(x) -> (SectsLargeAmountsOfThickSlimyMucus(y) & HasMucus(z) & HasMucus(x,z)))", "all x.(Haffish(x) -> SecretesLargeAmountsOfThickSlimyMucus(x))", "all x y.((Haggfish(x) & Mucus(y)) -> SecretesLargeAmounts(x,y))", "all x y.((Hagfish(x) & Mucus(y)) -> (SectsLargeAmounts(x,y) & Thick(x,y) & Slimy(x)))", "(all x.(Haggfish(x) -> SecretesLargeAmountsOfThickSlimyMucus(x)))", "all x y.((Haggfish(x) & ThickSlimyMucus(y)) -> SecretedBy(x,y))", "all x.(Haffish(x) -> (SectsLargeAmountsOfThickSlimyMucus(x) & KnownFor(x,y)))", "all x.(Haggish(x) -> (secretesLargeAmountsOfThickSlimyMucus(x)))", "all x.(Haggish(x) -> (SpreadsLargeAmountsOfThickSlimyMucus(x) & SecretsLargeAmountsOfMucus(x)))", "all x.(Hagfish(x) -> SecretesLargeAmountsOfThickSlimyMucus(x))"]}
{"id": "eqasc_validation_989", "nl": "Today, jawless fish include the lampreys and hagfishes.", "fol": "", "prediction": ["all x.(JawlessFish(x) -> (Lamprey(x) | Hagfish(x)))", "(JawlessFish(x) & (Lamprey(x) | Hagfish(x)))", "all x y.((JawlessFish(x) & Lamprey(y) & Hagfish(y)) -> Jawless(x))", "all x y z.((JawlessFish(x) & Lamprey(y) & Hagfish(z)) -> (JawlessFish(x) & Includes(x,y) & Includes(x,z)))", "all x.(JawlessFish(x) -> (Lamprey(x) | Hagfish(x)))", "(JawlessFish(x) & (Lamprey(x) | Hagfish(x)))", "all x.((JawlessFish(x) & Lamprey(x) & Hagfish(x)) -> Jawless(x))", "all x.(JawlessFish(x) -> (Lamprey(x) | Hagfish(x)))", "all x y.((JawlessFish(x) & Lamprey(y) & Hagfish(y)) -> Jawless(x))", "(JawlessFish(x) -> (Lamprey(x) | Hagfish(x)))", "all x.(JawlessFish(x) -> (Lambrey(x) | Hagfish(x)))", "(JawlessFish(x) & (Lambrey(x) | Hagfish(x)))", "(JawlessFish(fish) & (Lamprey(f) | Hagfish(f)))", "all x.(JawlessFish(x) -> (Lamprey(x) | Hagfish(x)))", "exists x.(JawlessFish(x) & Lamprey(x) & Hagfish(x))", "all x.(JawlessFish(x) -> (Lamprey(x) | Hagfish(x)))"]}
{"id": "eqasc_validation_990", "nl": "Some jawless fish secrete large amounts of thick, slimy mucus.", "fol": "", "prediction": ["exists x.(JawlessFish(x) & SecretesLargeAmountsOfThickSlimyMucus(x))", "all x y.((JawlessFish(x) & ThickSlimyMucus(y)) -> Secretes(x,y))", "exists x.(JawlessFish(x) & SecretesLargeAmountsOfThickSlimyMucus(x))", "exists x.(JamlessFish(x) & SecretesLargeAmountsOfThickSlimyMucus(x))", "exists x y.(JawlessFish(x) & ThickSlimyMucus(y) & Secretes(x,y))", "exists x.(JawlessFish(x) & LargeAmountsOfThickSlimyMucus(x))", "all x y.((JawlessFish(x) & ThickSlimyMucus(y)) -> Secretes(x,y))", "exists x.(JawlessFish(x) & SecretesLargeAmountsOfThickSlimyMucus(x))", "exists x.(JamlessFish(x) & SecretesLargeAmountsOfThickSlimyMucus(x))", "exists x.(JawlessFish(x) & SecretesLargeAmountsOfThickSlimyMucus(x))", "all x y.((JawlessFish(x) & ThickSlimyMucus(y)) -> Secretes(x,y))", "exists x.(JawlessFish(x) & SecretesLargeMucus(x))", "exists x.(JawlessFish(x) & LargeAmountsOfThickSlimyMucus(x))", "exists x.(JamlessFish(x) & SecretesLargeAmountsOfThickSlimyMucus(x))", "exists x.(JawlessFish(x) & SpongeMucus(x) & ThickSlimyMucus(x))", "exists x.(JawlessFish(x) & SecretesLargeAmountsOfThickSmoothMuscus(x))"]}
{"id": "eqasc_validation_991", "nl": "some jawless fish secrete large amounts of thick, slimy mucus.", "fol": "", "prediction": ["exists x.(JawlessFish(x) & SecretesLargeAmountsOfThickSlimyMucus(x))", "exists x y.(JawlessFish(x) & Jawless(y) & SecretesLargeAmountsOfThickSlimyMucus(x))", "exists x.(JawlessFish(x) & SecretesLargeAmountsOfThickSlimyMucus(x))", "exists x.(JawlessFish(x) & SecretesLargeAmountsOfThickSlimyMucus(x))", "all x y.((JawlessFish(x) & ThickSlimyMucus(y)) -> Secretes(x,y))", "exists x.(JamlessFish(x) & SecretesLargeAmountsOfThickSlimyMucus(x))", "exists x y.(JawlessFish(x) & Jawless(y) & SecretesLargeAmountsOfThickSlimyMucus(x))", "exists x.(JawlessFish(x) & LargeAmountsOfThickSlimyMucus(x))", "exists x.(JawlessFish(x) & SecretesLargeAmountsOfThickSlimyMucus(x))", "all x y.((JawlessFish(x) & ThickSlimyMucus(y)) -> SecretesLargeAmounts(x,y))", "exists x.(JamlessFish(x) & SecretesLargeAmountsOfThickSlimyMucus(x))", "exists x.(JawlessFish(x) & SecretesLargeAmountsOfThickSlimyMucus(x))", "exists x.(JawlessFish(x) & LargeAmountsOfThickSlimyMucus(x))", "exists x.(JawlessFish(x) & SecretesLargeMucus(x))", "exists x.(JawlessFish(x) & SpongeMucus(x) & ThickSlimyMucus(x))", "exists x.(JawlessFish(x) & SecretesLargeAmountsOfThickSmoothMuscus(x))"]}
{"id": "eqasc_validation_992", "nl": "Hagfishes are entirely marine, very slimy, and feed on carrion and injured fishes.", "fol": "", "prediction": ["all x.(Haggfish(x) -> (Marine(x) & Slimy(x) & FeedsOnCarrionAndInjuredFishes(x)))", "(all x.(Haggfish(x) -> Marine(x) & Slimy(x) & FeedsOnCarrionAndInjuredFishes(x)))", "all x y.((Haggfish(x) & Marine(y)) -> (Slimy(x) & FeedsOn(x,y)))", "all x.(Haggfish(x) -> ((Marine(x) & Slimy(x) & FeedsOnCarrion(x) & FeedsOnInjuredFishes(x))))", "all x.(Haggfish(x) -> (Marine(x) & Slimy(x) & FeedsOnCarrionAndInjuredFishes(x)))", "all x.(Haggfish(x) -> (Marine(x) & Slimy(x) & FeedsOnCarrion(x) & FeedsOnInjuredFishes(x)))", "all x y z.(Haggfish(x) -> (Marine(y) & Slimy(z) & Carrion(z) & Injured(z) & FeedsOn(x,y,z)))", "all x.(Haffish(x) -> (IsMarine(x) & Slimy(x) & FeedsOnCarrionAndInjuredFishes(x)))", "all x y.((Haggfish(x) & Marine(y)) -> (Slimy(x) & FeedsOn(x,y)))", "all x y.((Haggfish(x) & Marine(y)) -> (IsSlimy(x) & FeedsOn(x,y) & Carrion(y) & Injured(y)))", "all x.(Haggishes(x) -> (Marine(x) & Slimy(x) & FeedsOnCarrionAndInjuredFishes(x)))", "(all x.(Haggfish(x) -> Marine(x)) & Slimy(x) & FeedsOn(x,carrion,injured,fish))", "all x.(Hagfish(x) -> (Marine(x) & Slimy(x) & FeedsOnCarrionAndInjuredFishes(x)))", "all x.(Haffish(x) -> (ElementsMarine(x) & Slimy(x) & FeedsOnCarrionAndInjuredFishes(x)))", "all x.(Haggfish(x) -> (Marine(x) & Slimy(x) & FeedsOnCarrionAndInjuredFish(x)))", "all x.(Hagfish(x) -> (Marine(x) & Slimy(x) & FeedsOnCarrionAndInjuredFishes(x)))"]}
{"id": "eqasc_validation_993", "nl": "Hagfish secrete large amounts of mucus.", "fol": "", "prediction": ["all x.(Haggfish(x) -> SecretesLargeAmountsOfMucus(x))", "all x y.((Haggfish(x) & Mucus(y)) -> SecretesLargeAmounts(x,y))", "(LargeAmountsOfMucus(Haggfish))", "all x.(Haggfish(x) -> SecretesLargeAmountsOfMucus(x))", "(LargeMucusSectain(Haggfish))", "all x y.((Haggfish(x) & Mucus(y)) -> SecretesLargeAmounts(x,y))", "all x.(Haggfish(x) -> SecretesLargeAmountsOfMucus(x))", "all x y.((Haggfish(x) & Mucus(y)) -> Secrete(x,y))", "all x.(Hagfish(x) -> SecretesLargeAmountsOfMucus(x))", "all x y.((Haggfish(x) & Mucus(y)) -> SecretesLargeAmounts(x,y))", "all x.(Haggfish(x) -> SecretesLargeAmountsOfMucus(x))", "all x.(Haggfish(x) -> secretesLargeMucus(x))", "all x y.((Hagfish(x) & Mucus(y)) -> Secrete(x,y))", "all x.(Hagfish(x) -> SecretesLargeAmountsOfMucus(x))", "all x.(Haggfish(x) -> secretesMucus(x))", "all x.(Hagfish(x) -> SecretesLargeAmountsOfMuscus(x))"]}
{"id": "eqasc_validation_994", "nl": "marine environments have thick, slimy mucus", "fol": "", "prediction": ["all x.(MarineEnvironment(x) -> HasThickSlimyMucus(x))", "all x y.((MarineEnvironment(x) & MarineEnvironment(y)) -> HasThickSlimyMucus(x,y))", "all x y z.((MarineEnvironment(x) & ThickSlimyMucus(y) & MarineEnvironment(z)) -> HasMucus(x,y,z))", "all x.(MarineEnvironment(x) -> HasThickSlimyMucus(x))", "all x y.((MarineEnvironment(x) & MarineEnvironment(y)) -> HasThickSlimyMucus(x,y))", "(all x.(MarineEnvironment(x) -> HasThickSlimyMucus(x)))", "all x y z.((MarineEnvironment(x) & MarineEnvironment(y) & ThickSmoothyMucus(z) & Has(x,z)) -> Has(x,y,z))", "all x.(MarineEnvironment(x) -> (HasThickSlimyMucus(x) & HasThickSlimyMucus(x)))", "all x.(MarineEnvironment(x) -> HasThickSlimyMucus(x))", "(all x.(MarineEnvironment(x) -> HasThickSlimyMucus(x)))", "all x y.((MarineEnvironment(x) & MarineEnvironment(y)) -> HasThickSlimyMucus(x,y))", "all x.((MarineEnvironment(x) & ThickSlimyMucus(x)) -> HasMucus(x))", "all x.(MarineEnvironment(x) -> HasThickSlimyMucus(x))", "all x.(MarineEnvironment(x) -> (HasThickSlimyMucus(x) & HasThickSlimyMucus(x)))", "all x.(MarineEnvironment(x) -> HasThickSmoothyMucus(x))", "all x y.((MarineEnvironment(x) & MarineEnvironment(y)) -> HasThickSlimyMucus(x,y))"]}
{"id": "eqasc_validation_995", "nl": "Some living jawless fish are noted for secreting large amounts of thick, slimy mucus.", "fol": "", "prediction": ["exists x.(JawlessFish(x) & SpontaneousMucus(x) & ThickSlimyMucus(x))", "exists x.(LivingJawlessFish(x) & KnownForSecturingLargeAmountsOfThickSlimyMucus(x))", "exists x.(JawlessFish(x) & LargeAmountsOfThickSlimyMucus(x))", "all x y.((LivingJawlessFish(x) & LargeAmountsOfThickSlimyMucus(y)) -> NotRecognizedFor(x,y))", "exists x.(LivingJawlessFish(x) & SecretsLargeAmountsOfThickSlimyMucus(x))", "exists x.(JawlessFish(x) & SpongeMucus(x) & ThickSlimyMucus(x))", "all x y.((LivingJawlessFish(x) & ThickSlimyMucus(y)) -> NotedForSecturing(x,y))", "exists x.(JawlessFish(x) & SeeksLargeAmountsOfThickSlimyMucus(x))", "all x y.((LivingJawlessFish(x) & Fish(y)) -> (SectsLargeAmountsOfThickSlimyMucus(x)))", "exists x.(JawlessFish(x) & KnownForSecturingLargeAmountsOfThickSlimyMucus(x))", "exists x.(LivingJawlessFish(x) & SpontaneousMucus(x))", "all x y.((LivingJawlessFish(x) & LargeAmountsOfThickSlimyMucus(y)) -> NotRecognized(x,y))", "exists x.(LivingJawlessFish(x) & SeeksLargeAmountsOfThickSlimyMucus(x))", "exists x.(LivingJawlessFish(x) & KnownForSpoilingLargeAmountsOfThickSlimyMucus(x))", "all x y.((LivingJawlessFish(x) & ThickSlimyMucus(y)) -> NotRecognizedForSecting(x,y))", "exists x.(JawlessFish(x) & SecretsLargeAmountsOfThickSlimyMucus(x))"]}
{"id": "eqasc_validation_996", "nl": "Hagfish and lampreys have no internal hard tissues at all.", "fol": "", "prediction": ["all x.((Haggfish(x) | Lamprey(x)) -> -HasHardTissues(x))", "all x y.((Haggfish(x) & Lamprey(y)) -> -HasHardTissues(x,y))", "(all x.(Haggfish(x) -> HasHardTissues(x)) & all y.(Lamprey(y) -> HasHardTissues(y)))", "all x y.((Haggfish(x) | Lamprey(y)) -> -HasHardTissues(x,y))", "all x.(Haggfish(x) | Lamprey(x)) -> -HasHardTissues(x))", "(Haggfish(h) | Lampreys(h)) & -HasHardTissues(h))", "all x.((Haggfish(x) | Lamprey(x)) -> -HasHardTissues(x))", "(all x.(Haggfish(x) | All y.(Lamprey(y))) -> -HasHardTissues(x,y)))", "(-Haggfish(h) & -Lamprey(h))", "all x.(Haggfish(x) | Lamprey(x)) -> -HasHardTissues(x))", "all x y.((Haggfish(x) | Lamprey(y)) -> -HasHardTissues(x,y))", "(all x.(Hagfish(x) & All Y.(Lamprey(y)) -> NoHardTissues(x)))", "all x.((Haggfish(x) | Lamprey(x)) -> -HasHardTissues(x))", "all x y.((Hagfish(x) & Lamprey(y)) -> -HasHardTissues(x,y))", "(all x.(Haggfish(x) | All y.(Lamprey(y))) -> -HasHardTissues(x)))", "all x.(Haggfish(x) & Lamprey(x) -> -HasHardTissues(x))"]}
{"id": "eqasc_validation_997", "nl": "Creatures that have no internal hard tissues at all are noted for secreting large amounts of thick, slimy mucus.", "fol": "", "prediction": ["all x.((Creature(x) & -HasHardTissues(x)) -> SecretesLargeAmountsOfThickSlimyMucus(x))", "all x.((Creature(x) & NoHardTissues(x)) -> SecretesLargeAmountsOfThickSlimyMucus(x))", "all x.((Creature(x) & -HasHardTissues(x)) -> SecretesLargeAmountsOfThickSlimyMucus(x))", "all x y.((Creature(x) & -InternalHardTissues(x)) -> SecretesLargeAmountsOfThickSlimyMucus(x))", "all x.((Creature(x) & NoHardTissues(x)) -> SecretesLargeAmountsOfThickSlimyMucus(x))", "all x.((Creature(x) & NoInternalHardTissues(x)) -> SecretesLargeAmountsOfThickSlimyMucus(x))", "all x.((Creature(x) & -InternalHardTissues(x)) -> SecretesLargeAmountsOfThickSlimyMucus(x))", "all x y.((Creature(x) & -InternalHardTissues(x)) -> SecretesLargeAmountsOfThickSlimyMucus(x))", "all x y.((Creature(x) & -HasHardTissues(x)) -> SecretesLargeAmountsOfThickSlimyMucus(x,y))", "all x.((Creature(x) & -InternalHardTissues(x)) -> SecretesLargeAmountsOfThickSlimyMucus(x))", "all x y.((Creature(x) & NoHardTissues(x)) -> SecretesLargeAmountsOfThickSlimyMucus(x))", "all x.((Creature(x) & NoHardTissues(x)) -> SecretesLargeAmountsOfThickSlimyMucus(x))", "all x.((Creature(x) & NoHardTissues(x)) -> SecretesLargeAmountsOfThickSlimyMucus(x))", "all x y.((Creature(x) & -InternalHardTissues(x)) -> SecretesLargeAmountsOfThickSlimyMucus(x))", "all x.((Creature(x) & NoInternalHardTissues(x)) -> SecretesLargeAmountsOfThickSlimyMucus(x))", "all x.((Creature(x) & NoInternalHardTissues(x)) -> SecretesLargeAmountsOfThickSlimyMucus(x))"]}
{"id": "eqasc_validation_998", "nl": "mountains are formed by earthquakes", "fol": "", "prediction": ["all x y.((Mountain(x) & Earthquake(y)) -> FormedBy(x,y))", "all x.(Mountain(x) -> FormedByEarthquakes(x))", "all x y z.((Mountain(x) & Earthquake(y) & Earthquake(z)) -> FormedBy(x,y,z))", "all x.(Mountain(x) -> (FormedByEarthquakes(x) & FormedByEarthquakes(x)))", "all x y.((Mountain(x) & Earthquake(y)) -> FormedBy(x,y))", "all x y z.(Mountain(x) -> (FormedByEarthquakes(y) & Earthquake(z) & FormedBy(x,z)))", "all x y z.((Mountain(x) & Earthquake(y) & Earthquake(z)) -> FormedBy(x,y,z))", "all x.(Mountain(x) -> FormedByEarthquakes(x))", "all x.(Mountain(x) -> (FormedByEarthquakes(x) & FormedByEarthquakes(x)))", "all x.(Mountain(x) -> (FormedByEarthquakes(x) & FormedByEarthquakes(x)))", "all x y.((Mountain(x) & Earthquake(y)) -> FormedBy(x,y))", "all x y.((Mountain(x) & Earthquake(y)) -> FormedBy(x,y))", "all x.(Mountain(x) -> FormedByEarthquakes(x))", "all x y.((Mountain(x) & Earthquake(y)) -> FormedBy(x,y))", "exists x.(Mountain(x) & FormedByEarthquakes(x))", "exists x.(Mountain(x) & FormedByEarthquakes(x))"]}
{"id": "eqasc_validation_999", "nl": "Earthquakes are caused by movement of the tectonic plates.", "fol": "", "prediction": ["all x.(Earthquake(x) -> CausedByTectonicPlateMovement(x))", "all x y.((Earthquake(x) & TectonicPlate(y)) -> CausedByMovement(x,y))", "all x.(Earthquake(x) -> CausedByTectonicPlatesMovement(x))", "all x y z.((Earthquake(x) & TectonicPlate(y) & TectonicPlate(z)) -> CausedBy(x,y,z))", "(Causes(earthquake,tectonicPlates) & Moves(earthquake,tectonicPlates))", "all x.(Earthquake(x) -> CausedByMovementOfTectonicPlates(x))", "(all x.(Earthquake(x) -> CausedByTectonicPlatesMovement(x)))", "all x y.((Earthquake(x) & TectonicPlate(y)) -> CausedBy(x,y))", "all x.(Earthquake(x) -> (CausedByTectonicPlates(x) & MovedByTectonicPlates(x)))", "all x y z.((Earthquake(x) & TectonicPlate(y) & TectonicPlate(z)) -> CausedBy(x,y,z))", "all x y.((Earthquake(x) & TectonicPlate(y)) -> CausedByMovement(x,y))", "all x.(Earthquake(x) -> CausedByMovementOfTectonicPlates(x))", "all x.(Earthquake(x) -> CausedByTectonicPlates(x))", "all x y.((Earthquake(x) & TectonicPlate(y)) -> CausedBy(x,y))", "all x.(Earthquake(x) -> CausedByTectonicPlateMovement(x))", "all x.(Earthquake(x) -> CausedByMechanicalStations(x))"]}
{"id": "eqasc_validation_1000", "nl": "Mountains are formed by movement of the tectonic plates.", "fol": "", "prediction": ["all x.(Mountain(x) -> FormedByMovementOfTectonicPlates(x))", "all x y.((Mountain(x) & TectonicPlate(y)) -> FormedByMovement(x,y))", "all x.(Mountain(x) -> (FormedByMovementOfTectonicPlates(x)))", "all x y z.((Mountain(x) & TectonicPlate(y) & TectonicPlate(z)) -> FormedBy(x,y,z))", "all x y.((Mountain(x) & TectonicPlate(y)) -> FormedBy(x,y))", "all x y z.(Mountain(x) -> (FormedByMovement(y) & TectonicPlate(z) & Moves(x,z)))", "all x.(Mountain(x) -> (FormedByMovementOfTectonicPlates(x) & TectonicPlates(x)))", "all x.(Mountain(x) -> FormedByMovementOfTectonicPlates(x))", "(FormedByMechanism(Mountains) & MovementOfTectonicPlates(Mountains))", "all x.(Mountain(x) -> (FormedByMovementOfTectonicPlates(x)))", "all x y.((Mountain(x) & TectonicPlate(y)) -> FormedByMovement(x,y))", "all x y.((Mountain(x) & TectonicPlate(y)) -> FormedBy(x,y))", "all x.(Mountain(x) -> (FormedByMovementOfTectonicPlates(x)))", "all x.(Mountain(x) -> (FormedByMovementOfTectonicPlates(x) & TectonicPlates(x)))", "all x.(Mountain(x) -> FormedByMovementOfTectonicPlates(x))", "all x y.((Mountain(x) & TectonicPlate(y)) -> FormedByMovement(x,y))"]}
{"id": "eqasc_validation_1001", "nl": "Earthquakes Earthquakes are the results of moving plates.", "fol": "", "prediction": ["all x.(Earthquake(x) -> (MovingPlate(x) & ResultsOf(x,y)))", "(all x.(Earthquake(x) -> MovingPlate(x)))", "all x y.((Earthquake(x) & MovingPlate(y)) -> ResultsOf(x,y))", "(MovingPlates(e) & Earthquake(e))", "all x.(Earthquake(x) -> (MovingPlate(x) & ResultsOf(x,y)))", "all x.(Earthquake(x) -> (ResultOfMovingPlates(x)))", "all x.(Earthquake(x) -> (MovingPlate(x) & CausesEarthquake(x)))", "(all x.(Earthquake(x) -> MovingPlate(x)))", "all x.(Earthquake(x) -> (MovingPlate(x) & Earthquake(x)))", "all x y.((Earthquake(x) & MovingPlate(y)) -> ResultsOf(x,y))", "all x y.((Earthquake(x) & MovingPlate(y)) -> Releases(x,y))", "all x.(Earthquake(x) -> (Result(x,movingPlates) & Result(x,movingPlates)))", "all x.(Earthquake(x) -> (MovingPlates(x) & CausesEarthquake(x)))", "all x.(Earthquake(x) -> (MovingPlate(x) & Earthquake(x)))", "all x y.((Earthquake(x) & MovingPlate(y)) -> ResultsOf(x,y))", "exists x.(Earthquake(x) & MovingPlate(x))"]}
{"id": "eqasc_validation_1002", "nl": "mountains are formed by moving plates", "fol": "", "prediction": ["all x.(Mountain(x) -> (FormedByMovingPlates(x) & FormedByMovingPlates(x)))", "all x y.((Mountain(x) & MovingPlate(y)) -> FormedBy(x,y))", "all x y z.((Mountain(x) & MovingPlate(y) & MovingPlate(z)) -> FormedBy(x,y,z))", "all x y z.(Mountain(x) -> (FormedByMovingPlates(y) & MovingPlate(z) & MovingPlate(z) & FormedBy(x,y,z)))", "all x.(Mountain(x) -> (FormedByMovingPlates(x) & FormedByMovingPlates(x)))", "all x y.((Mountain(x) & MovingPlate(y)) -> FormedBy(x,y))", "all x.(Mountain(x) -> (FormedByMovingPlates(x) & FormedByMovingPlates(x)))", "all x y z.(Mountain(x) -> (FormedByMovingPlates(x) & MovingPlates(y) & FormedBy(x,z)))", "all x.(Mountain(x) -> FormedByMovingPlates(x))", "all x.(Mountain(x) -> (FormedByMovingPlates(x) & FormedByMovingPlates(x)))", "all x y.((Mountain(x) & MovingPlate(y)) -> FormedBy(x,y))", "all x.(Mountain(x) -> (FormedByMovingPlates(x) & FormedByMovingPlates(x)))", "all x y.((Mountain(x) & MovingPlate(y)) -> FormedByMountain(x,y))", "all x.(Mountain(x) -> (FormedByMovingPlates(x) & MoveablePlates(x)))", "exists x.(Mountain(x) & FormedByMovingPlates(x))", "exists x.(Mountain(x) & FormedByMovingPlates(x))"]}
{"id": "eqasc_validation_1003", "nl": "For big mountain background, check out the Himalayas .", "fol": "", "prediction": ["all x.((BigMountainBackground(x) & Himalayas(x)) -> Check(x))", "all x y.((BigMountainBackground(x) & Himalayas(y)) -> CheckOut(x,y))", "(See Himalayas(x) & BigMountainBackground(x))", "all x.((Himalayas(x) & BigMountainBackground(x)) -> Check(x,Himachales))", "(CheckoutHimmalayas(x) & BigMountainBackground(x))", "for bigMountainBackground(x) -> Himalayas(x))", "all x y.((Himalayas(x) & BigMountainBackground(y)) -> CheckOut(x,y))", "all x y.((BigMountainBackground(x) & Himalayas(y)) -> Check(x,y))", "(See Himalayas & BigMountainBackground(x))", "all x.(BigMountainBackground(x) -> CheckOutHimmalayas(x))", "-(BigMountainBackground(x) & Himalayas(x))", "(Himachales(x) -> BigMountainBackground(x))", "(Himmalayas(h) -> BigMountainBackground(h))", "-(Himalayas(x) & BigMountainBackground(x))", "all x.(BigMountainBackground(x) -> CheckOutHimmalayas(x))", "all x y.((BigMountainBackground(x) & Himalayas(y)) -> CheckOut(x,y))"]}
{"id": "eqasc_validation_1004", "nl": "the Himalayas are formed by earthquakes", "fol": "", "prediction": ["all x.(Himalaya(x) -> FormedByEarthquakes(x))", "all x y.((Himachala(x) & Earthquake(y)) -> FormedBy(x,y))", "all x.(Himachala(x) -> FormedByEarthquakes(x))", "all x y z.((Himalayas(x) & Earthquake(y) & Earthquake(z)) -> FormedBy(x,y,z))", "(all x.(Himalayas(x) -> FormedByEarthquakes(x)))", "all x.(Himalaya(x) -> FormedByEarthquakes(x))", "(FormedByEarthquakes(Himalayas) -> FormedByEarthquakes(Himalayas))", "all x y.((Himalayas(x) & Earthquake(y)) -> FormedBy(x,y))", "all x.(Himachala(x) -> (FormedByEarthquakes(x) & FormedByEarthquakes(x)))", "all x.(Hemalayas(x) -> FormedByEarthquakes(x))", "(all x.(Himalayas(x) -> FormedByEarthquakes(x)))", "All x y.((Himalaya(x) & Earthquake(y)) -> FormedBy(x,y))", "all x y z.((Himachala(x) & Earthquake(y) & Earthquake(z)) -> FormedBy(x,y,z))", "all x.(HemalayasFormedByEarthquakes(x) -> FormedByEarthquakes(x))", "all x y.((Himachala(x) & Earthquake(y)) -> FormedBy(x,y))", "all x.(Himalayas(x) -> FormedByEarthquakes(x))"]}
{"id": "eqasc_validation_1005", "nl": "Mountains are formed by moving plates.", "fol": "", "prediction": ["all x.(Mountain(x) -> FormedByMovingPlates(x))", "all x y.((Mountain(x) & MovingPlate(y)) -> FormedBy(x,y))", "(Mountain(Mountain) & FormedByMovingPlates(Mountain))", "all x.(Mountain(x) -> FormedByMovingPlates(x))", "all x.(Mountain(x) -> (FormedByMovingPlates(x)))", "all x y.((Mountain(x) & MovingPlate(y)) -> FormedBy(x,y))", "all x y z.(Mountain(x) -> (FormedBy(x,y,z) & MovingPlate(y)))", "all x.(Mountain(x) -> FormedByMovingPlates(x))", "all x y.((Mountain(x) & MovingPlate(y)) -> FormedBy(x,y))", "all x.(Mountain(x) -> (FormedByMovingPlates(x)))", "all x.(Mountain(x) -> (FormedByMovingPlates(x)))", "all x y.((Mountain(x) & MovingPlate(y)) -> FormedBy(x,y))", "all x.(Mountain(x) -> FormedByMovingPlates(x))", "all x y.((Mountain(x) & MovingPlate(y)) -> FormedBy(x,y))", "all x.(Mountain(x) -> (FormedByMovingPlates(x)))", "exists x.(Mountain(x) & FormedBy(x,movingPlates))"]}
{"id": "eqasc_validation_1006", "nl": "Many mountains are formed through uplifting.", "fol": "", "prediction": ["exists x.(Mountain(x) & FormedByUplifting(x))", "all x y.((Mountain(x) & Uplifting(y)) -> FormedBy(x,y))", "(exists x.(Mountain(x) & FormedByUplifting(x)))", "all x.(Mountain(x) -> FormedThroughUplifting(x))", "many mountains are formed through Uplifting(Mountains)", "all x y.((Mountain(x) & Uplifting(y)) -> FormedBy(x,y))", "exists x.(Mountain(x) & FormedByUplifting(x))", "all x.((Mountain(x) & FormedByUplifting(x)) -> FormedByUplifting(x))", "all x y.((Mountain(x) & Uplifting(y) & FormedBy(x,y)) -> FormedBy(x,y))", "all x y.((Mountain(x) & Uplifting(y)) -> Formed(x,y))", "all x.(Mountain(x) -> FormedThroughUplifting(x))", "exists x.(Mountain(x) & FormedByUplifting(x))", "exists x.(Mountain(x) & FormedByUplifting(x))", "exists x.(Mountain(x) & FormedThroughUplifting(x))", "exists x.(Mountain(x) & FormedByUplifting(x))", "exists x.(Mountain(x) & FormedThroughUpliftment(x))"]}
{"id": "eqasc_validation_1007", "nl": "Earthquakes can cause uplifting to occur.", "fol": "", "prediction": ["all x.(Earthquake(x) -> CausesUplifting(x))", "all x y.((Earthquake(x) & Earthquake(y)) -> CausesUplifting(x,y))", "all x.(Earthquake(x) -> CausesUplifting(x))", "all x y.((Earthquake(x) & Earthquake(y)) -> CausesUplifting(x,y))", "(all x.(Earthquake(x) -> CausesUplifting(x)))", "all x y z.((Earthquake(x) & Uplifting(y) & Earthquake(z)) -> CanCause(x,y,z))", "all x.(Earthquake(x) -> CanCauseUplifting(x))", "all x.(Earthquake(x) -> CausesUplifting(x))", "all x y.((Earthquake(x) & Earthquake(y)) -> CausesUplifting(x,y))", "all x y.((Earthquake(x) & CausesUplifting(y)) -> CanOccur(x,y))", "all x y.((Earthquake(x) & Uplifting(y)) -> CanCause(x,y))", "all x.(Earthquake(x) -> CanCauseUplifting(x))", "all x.(Earthquake(x) -> CausesUplifting(x))", "all x.(Earthquake(x) -> CausesUplifting(x))", "exists x.(Earthquake(x) & Uplifting(x))", "exists x.(Earthquake(x) & CausesUplifting(x))"]}
{"id": "eqasc_validation_1008", "nl": "For mountains one goes to the Alps.", "fol": "", "prediction": ["all x.(Mountain(x) -> GoesToAlps(x))", "all x y.((Mountain(x) & Alp(y)) -> GoesTo(x,y))", "all x.((Mountain(x) & Alps(x)) -> GoesTo(x,y))", "all x.(Mountain(x) -> GoesToAlps(x))", "(all x.(Mountain(x) -> GoesToAlps(x)))", "all x y z.((Mountain(x) & Alps(y) & Mountain(z)) -> GoesTo(x,y,z))", "all x y.((Mountain(x) & Alp(y)) -> GoesTo(x,y))", "all x.(Mountain(x) -> GoesToAlps(x))", "all x.((Mountain(x) & Alpine(x)) -> GoesTo(x,Alps))", "(all x.(Mountain(x) -> GoesToAlps(x)))", "all x y.((Mountain(x) & Alp(y)) -> GoesTo(x,y))", "all x y.((Mountain(x) & Alpine(y)) -> GoesTo(x,y))", "(all x.(Mountain(x) -> GoesToAlps(x)))", "all x.(Mountain(x) -> GoesToAlps(x))", "exists x.(Mountain(x) & Alps(x))", "exists x.(Mountain(x) & Alps(x))"]}
{"id": "eqasc_validation_1009", "nl": "The Alps were formed by earthquakes", "fol": "", "prediction": ["all x.(Alps(x) -> FormedByEarthquakes(x))", "all x y.((Alps(x) & Earthquake(y)) -> FormedBy(x,y))", "all x.(Alps(x) -> (FormedByEarthquakes(x) & FormedByEarthquakes(x)))", "all x y z.((Alps(x) & Earthquake(y) & Earthquake(z)) -> FormedBy(x,y,z))", "(FormedByEarthquakes(Alps) & FormedByEarthquakes(Alps))", "all x y.((Alps(x) & Earthquake(y)) -> FormedBy(x,y))", "(EarthquakesFormedAlps(Alps))", "All x.(Alps(x) -> FormedByEarthquakes(x))", "all x y z.((Alps(x) & Earthquake(y) & Earthquake(z)) -> FormedBy(x,y,z))", "all x y.(Alps(x) & Earthquake(y) & FormedBy(x,y))", "(FormedByEarthquakes(Alps) -> FormedByEarthquakes(Alps))", "All x.(Alps(x) -> (FormedByEarthquakes(x) & FormedByEarthquakes(x)))", "All x.(Alps(x) -> (FormedByEarthquakes(x) & Earthquake(x)))", "all x y.((Alps(x) & Earthquake(y)) -> FormedBy(x,y))", "All x.(Alps(x) -> FormedByEarthquakes(x))", "All x.(Alps(x) -> FormedByEarthquakes(x))"]}
{"id": "eqasc_validation_1010", "nl": "Here the rocks have been uplifted along earthquake faults to make a mountain.", "fol": "", "prediction": ["all x y.((Rock(x) & EarthquakeFault(y)) -> UpliftedAlong(x,y))", "all x.((Rocks(x) & UpliftedAlongEarthquakeFaults(x)) -> Mountain(x))", "all x y z.((Rock(x) & EarthquakeFault(y) & Mountain(z)) -> UpliftedAlong(x,y,z))", "(UpliftedAlongEarthquakeFaults(Rocks) & MakesMountain(Rocks,EarthquakeFaults))", "all x y.((Rock(x) & EarthquakeFault(y)) -> UpliftedAlongToMountain(x,y))", "all x.(RocksUpliftedAlongEarthquakeFaultsToMountain(x) -> Mountain(x))", "all x y.((Rocks(x) & EarthquakeFault(y)) -> UpliftedAlong(x,y))", "all x.((Rocks(x) & UpliftedAlongEarthquakeFaults(x)) -> Mountain(x))", "exists x.(Rocks(x) & UpliftedAlongEarthquakeFaults(x) & MakesMountain(x))", "exists x.(Rock(x) & UpliftedAlongEarthquakeFaults(x) & MakesMountain(x))", "all x y z.((Rock(x) & EarthquakeFault(y) & Mountain(z)) -> UpliftedAlong(x,y,z))", "all x y.((Rocks(x) & EarthquakeFault(y)) -> UpliftedAlongToMountain(x,y))", "all x.(RocksUpliftedAlongEarthquakeFaultsToMountain(x) -> MakesMountain(x))", "all x.((Rocks(x) & UpliftedAlongEarthquakeFaults(x)) -> Mountain(x))", "exists x.(Rocks(x) & UpliftedAlongEarthquakeFaults(x) & MakesMountain(x))", "all x y z.((Rock(x) & EarthquakeFault(y) & Mountain(z)) -> UpliftedAlong(x,y,z))"]}
{"id": "eqasc_validation_1011", "nl": "rocks lift to make mountains", "fol": "", "prediction": ["all x y.((Rocks(x) & Mountain(y)) -> LiftsToMake(x,y))", "all x y z.((Rock(x) & Mountain(y) & Mountain(z)) -> LiftsToMake(x,y,z))", "all x y z.((Rocks(x) & Mountain(y) & Mountain(z)) -> LiftsToMake(x,y,z))", "all x.(RocksLiftToMakeMountains(x) -> MakesMountains(x))", "all x y.((Rocks(x) & Mountain(y)) -> LiftsToMake(x,y))", "all x.(RocksLiftToMakeMountains(x) -> MakeMountains(x))", "all x y z.((Rock(x) & Mountain(y)) -> LiftsToMake(x,y,z))", "all x.(RocksLiftToMadeMountains(x) -> MakesMountains(x))", "all x y.((Rocks(x) & Mountain(y)) -> LiftToMake(x,y))", "exists x,y,z,w.(Rocks(x) & Lift(y) & Mountain(z)) & Make(x,z))", "exists x.(Rocks(x) & Lift(x) & MakeMountains(x))", "all x y z.((Rocks(x) & Mountain(y) & Mountain(z)) -> LiftsToMake(x,y,z))", "all x y.((Rocks(x) & Mountain(y) & Lift(x,y)) -> Make(x,y))", "all x.(RocksLiftToMakeMountains(x) -> MakesMountains(x))", "all x.(RocksLiftToMakeMountains(x) -> MakeMountains(x))", "all x y.((Rocks(x) & Mountains(y) & Lifts(x,y)) -> Makes(x,y))"]}
{"id": "eqasc_validation_1012", "nl": "Earthquakes Earthquakes Japan is an earthquake-prone country.", "fol": "", "prediction": ["all x.(Earthquake(x) -> EarthquakeProne(x))", "Earthquakes Earthquakes Japan is earthquakeprone.", "(Earthquakes(Japan) & EarthquakeProne(Japan))", "all x.((Earthquake(x) & EarthquakeProne(x)) -> Japan(x))", "all x y.((Earthquake(x) & Earthquake(y) & Japan(y)) -> EarthquakeProne(y))", "all x.(Earthquake(x) -> EarthquakeProne(x))", "Earthquakes Earthquakes Japan is earthquakeprone.", "(Earthquake(s) & EarthquakeProne(s))", "all x.(Earthquake(x) -> (EarthquakeProne(x) & Japan(x)))", "(Earthquake(Japan) & EarthquakeProne(Japan))", "all x.(Earthquake(x) -> EarthquakeProne(x))", "Earthquakes Earthquakes Japan is earthquakeprone(country)", "all x.(Earthquake(x) -> (EarthquakeProne(x) & Japan(x)))", "(Earthquakes(Japan) & EarthquakeProne(Japan))", "Earthquakes Earthquakes Japan is earthquake-prone.", "Earthquakes Earthquakes Japan is earthquakeprone."]}
{"id": "eqasc_validation_1013", "nl": "Japan has a lot of mountains. ", "fol": "", "prediction": ["all x.(Japan(x) -> HasMountains(x))", "(HasMountains(Japan))", "all x y.((Japan(x) & Mountain(y)) -> Has(x,y))", "all x.(Japan(x) -> HasMountains(x))", "all x.(Japan(x) -> LotsOfMountains(x))", "all x.((Japan(x) & HasMountains(x)) -> HasMountains(x))", "all x.(Japan(x) -> HasLotsOfMountains(x))", "(HasMountains(Japan))", "all x y.((Japan(x) & Mountain(y)) -> Has(x,y))", "all x.(Japan(x) -> LotsOfMountains(x))", "all x y.((Japan(x) & Mountain(y)) -> Has(x,y))", "all x y.((Japan(x) & Mountain(y)) -> LotsOf(x,y))", "all x.(Japan(x) -> HasMountains(x))", "exists x.(Japan(x) & Mountain(x))", "exists x.(Japan(x) & LotsOfMountains(x))", "exists x.(Japan(x) & HasMountains(x))"]}
{"id": "eqasc_validation_1014", "nl": "Chemical digestion occurs mainly in the small intestine.", "fol": "", "prediction": ["all x.(ChemicalDigestion(x) -> OccursInSmallintestine(x))", "all x y.((ChemicalDigestion(x) & SmallIntestine(y)) -> OccursIn(x,y))", "(ChemicalDigestionOccursInSmallintestine(ChemicalDigestion) & InSmallintestine(ChemicalDigestion))", "all x.(ChemicalDigestion(x) -> OccursInSmallintestine(x))", "all x y z.((ChemicalDigestion(x) & SmallIntestine(y) & SmallIntestine(z)) -> OccursIn(x,y,z))", "all x y.((ChemicalDigestion(x) & SmallIntestine(y)) -> OccursIn(x,y))", "all x.(ChemisticalDigestion(x) -> OccursInSmallintestine(x))", "all x y.((ChemicalDigestment(x) & SmallIntestine(y)) -> OccursIn(x,y))", "all x.(ChemicalDigestion(x) -> OccursInSmallIntestine(x))", "all x y.((ChemicalDigestion(x) & SmallIntestine(y)) -> OccursIn(x,y))", "all x y z.((ChemicalDigestion(x) & SmallIntestine(y) & SmallIntestine(z)) -> OccursIn(x,y,z))", "all x y.((ChemisticalDigestion(x) & SmallIntestine(y)) -> OccursIn(x,y))", "exists x.(Chemistry(x) & SmallIntestine(x))", "all x.(ChemicalDigestion(x) -> OccursInSmallintestine(x))", "all x.(ChemicalDigestment(x) -> OccursInSmallintestine(x))", "exists x.(Chemistry(x) & SmallIntestine(x))"]}
{"id": "eqasc_validation_1015", "nl": "Enzymes are chemicals involved in digestion.", "fol": "", "prediction": ["all x.(Enzyme(x) -> (InvolvedInDigestion(x) & Chemical(x)))", "all x.(Enzyme(x) -> Chemical(x))", "all x.(Enzyme(x) -> (Chemical(x) & InvolvedInDigestion(x)))", "all x y.((Enzyme(x) & Digestion(y)) -> Chemical(x,y))", "(all x.(Enzyme(x) -> InvolvedInDigestion(x)))", "all x.(Enzyme(x) -> (InvolvesDigestion(x) & Chemical(x)))", "(all x.(Enzyme(x) -> InvolvedInDigestion(x)))", "all x y.((Enzyme(x) & Digestion(y)) -> Chemical(x))", "all x.(Enzyme(x) -> Chemical(x))", "all x y.((Enzyme(x) & Digestion(y)) -> Chemical(x,y))", "all x.(Enzyme(x) -> (Chemical(x) & InvolvesDigestion(x)))", "all x.(Enzyme(x) -> (Chemical(x) & InvolvedInDigestion(x)))", "all x y.((Enzyme(x) & Digestion(y)) -> Chemical(x,y))", "all x.(Enzyme(x) -> Chemical(x))", "all x.(Enzyme(x) -> Chemical(x))", "all x.(Enzyme(x) -> Chemical(x))"]}
{"id": "eqasc_validation_1016", "nl": "enzymes are in the small intestine", "fol": "", "prediction": ["all x y.((Enzyme(x) & SmallIntestine(y)) -> InSmallIntestine(x,y))", "all x.(Enzymes(x) -> InSmallintestine(x))", "all x y z.((Enzyme(x) & SmallIntestine(y) & SmallIntestine(z)) -> InSmallIntestine(x,y,z))", "(EnzymesInSmallintestine(en) & InSmallintestine(en))", "(all x.(Enzyme(x) -> SmallIntestine(x)))", "all x y.((Enzyme(x) & SmallIntestine(y)) -> InSmallintestine(x,y))", "all x.(EnzymesInSmallintestine(x) -> InSmallintestine(x))", "all x.(Enzyme(x) -> SmallIntestine(x))", "(EnzymesInSmallintestine(en) & InSmallintestine(en))", "all x y z.((Enzyme(x) & SmallIntestine(y) & SmallIntestine(z)) -> InSmallIntestine(x,y,z))", "all x y.((Enzyme(x) & SmallIntestine(y)) -> InSmallIntestine(x,y))", "all x.(EnzymesInSmallintestine(x) -> InSmallintestine(x))", "all x.(Enzyme(x) -> InSmallintestine(x))", "all x y.((Enzyme(x) & SmallIntestine(y)) -> InSmallintestine(x,y))", "exists x.(Enzyme(x) & SmallIntestine(x))", "all x y.((Enzyme(x) & SmallIntestine(y)) -> InSmallIntestine(x,y))"]}
{"id": "eqasc_validation_1017", "nl": "Celiac disease damages the small intestine and interferes with nutrient absorption.", "fol": "", "prediction": ["all x.(CeliacDisease(x) -> (DamagesSmallIntestine(x) & InterferesWithNutrientAbsorption(x)))", "all x y.((CeliacDisease(x) & SmallIntestine(y)) -> (Damages(x,y) & InterferesWithNutrientAbsorption(x)))", "(DamagesSmallIntestine(celiacDisease) & InterferesWithNutrientAbsorption(celiacDisease))", "all x y z.((CeliacDisease(x) & SmallIntestine(y) & NutrientAbsorption(z)) -> (Damages(x,y) & Interferes(x,z)))", "all x.(CeliacDisease(x) -> (DamagesSmallIntestine(x) & InterferesWithNutrientAbsorption(x)))", "all x y.((CeliacDisease(x) & SmallIntestine(y)) -> (Damages(x,y) & InterferesWithNutrientAbsorption(x)))", "(DamagesSmallIntestine(CeliacDisease) & InterferesWithNutrientAbsorption(CeliacDisease))", "all x.(CeliacDisease(x) -> (DamagesSmallintestine(x) & InterferesWithNutrientAbsorption(x)))", "all x.(CeliacDisease(x) -> (DamagesSmallIntestine(x) & InterferesWithNutrientAbsorption(x)))", "all x.(CeliacDisease(x) -> (DeterioratesSmallIntestine(x) & InterferesWithNutrientAbsorption(x)))", "all x y.((CeliacDisease(x) & SmallIntestine(y)) -> (Damages(x,y) & InterferesWithNutrientAbsorption(x,y)))", "all x.(CeliacDiagnosis(x) -> (DamagesSmallIntestine(x) & InterferesWithNutrientAbsorption(x)))", "all x.(CeliacDisease(x) -> (DamagesSmallIntestine(x) & InterferesWithNutrientAbsorption(x)))", "all x.(CeliacDisease(x) -> (DamagesSmallIntestine(x) & InterferesWithNutrientAbsorption(x)))", "all x y.((CeliacDisease(x) & SmallIntestine(y)) -> (Damages(x,y) & InterferesWithNutrientAbsorption(x)))", "all x.(CeliacDisease(x) -> (DamagesSmallintestine(x) & InterferesWithNutrientAbsorption(x)))"]}
{"id": "eqasc_validation_1018", "nl": "Celiac disease interferes with chemical digestion", "fol": "", "prediction": ["all x.(CeliacDisease(x) -> InterferesWithChemicalDigestion(x))", "all x y.((CeliacDisease(x) & ChemicalDigestion(y)) -> InterferesWith(x,y))", "all x y z.((CeliacDisease(x) & ChemicalDigestion(y) & ChemicalDigestion(z)) -> InterferesWith(x,y,z))", "(InterferesWithChemicalDigestion(celiacDisease) & InterferesWithChemicalDigestion(c))", "all x.(CeliacDisease(x) -> InterferesWithChemicalDigestion(x))", "all x y.((CeliacDisease(x) & ChemicalDigestion(y)) -> InterferesWith(x,y))", "(InterferesWithChemicalDigestion(CeliacDisease) & InterferesWithChemicalDigestion(CeliacDisease))", "all x.(CeliacDisease(x) -> InterferesWithChemicalDigestion(x))", "all x y z.((CeliacDisease(x) & ChemicalDigestion(y) & ChemicalDigestion(z)) -> InterferesWith(x,y,z))", "all x y.((CeliacDisease(x) & ChemicalDigestion(y)) -> Interferes(x,y))", "all x.(CeliacDiseaseInterferesWithChemicalDigestion(x) -> InterferesWithChemicalDigestion(x))", "all x.(CeliacDisease(x) -> InterferesWithChemicalDigestion(x))", "all x y.((CeliacDisease(x) & ChemicalDigestion(y)) -> InterferesWithDigestion(x,y))", "all x.(CeliacDisease(x) -> InterferesWithChemicalDigestion(x))", "all x.(CeliacDisease(x) -> InterferesWithChemicalDigestion(x))", "all x.(CeliacDisease(x) -> InterferesWithChemistry(x))"]}
{"id": "eqasc_validation_1019", "nl": "Chemical digestion and absorption of food occurs in the small intestine.", "fol": "", "prediction": ["all x.(SmallIntestine(x) -> (ChemicalDigestion(x) & AbsorptionOfFood(x)))", "all x y.((SmallIntestine(x) & SmallIntestine(y)) -> (ChemicalDigestion(x,y) & AbsorptionOfFood(x,y)))", "(ChemicalDigestion(ChemicalDigestion) & AbsorptionOfFood(ChemicalDigestion) & OccursInSmallIntestine(ChemicalDigestion,ChemicalDigestion,ChemicalDigestion))", "all x.((ChemicalDigestion(x) & AbsorptionOfFood(x)) -> OccursInSmallIntestine(x))", "all x y z.((SmallIntestine(x) & ChemicalDigestion(y) & AbsorptionOfFood(z)) -> OccursIn(x,y,z))", "all x y.((SmallIntestine(x) & SmallIntestine(y)) -> (ChemicalDigestion(x,y) & Absorption(x,y)))", "all x.(SmallIntestine(x) -> (ChemicalDigestion(x) & AbsorptionOfFood(x)))", "all x y.((SmallIntestine(x) & Smallintestine(y)) -> (ChemicalDigestion(x,y) & AbsorptionOfFood(x,y)))", "exists x.(Smallintestine(x) & ChemicalDigestion(x) & AbsorptionOfFood(x))", "all x y.((SmallIntestine(x) & ChemicalDigestion(y) & AbsorptionOfFood(y)) -> OccursIn(x,y))", "(exists x.(SmallIntestine(x) & ChemicalDigestion(x) & AbsorbsFood(x)))", "all x.(SmallIntestine(x) -> (ChemicalDigestment(x) & AbsorbsFood(x)))", "all x.((ChemicalDigestion(x) & AbsorptionOfFood(x)) -> SmallIntestine(x))", "all x y.((Smallintestine(x) & SmallIntestine(y)) -> (ChemicalDigestion(x,y) & AbsorptionOfFood(x,y)))", "exists x.(Smallintestine(x) & ChemicalDigestion(x) & AbsorptionOfFood(x))", "all x.(SmallIntestine(x) -> (ChemicalDigestion(x) & AbsorptionOfFood(x)))"]}
{"id": "eqasc_validation_1020", "nl": "chemical absorption happens in the small intestine", "fol": "", "prediction": ["all x y.((ChemicalAbsorption(x) & SmallIntestine(y)) -> HappensIn(x,y))", "all x.(ChemicalAbsorption(x) -> HappensInSmallintestine(x))", "all x y z.((ChemicalAbsorption(x) & SmallIntestine(y) & Smallintestine(z)) -> HappensIn(x,y,z))", "(ChemicalAbsorptionOccursInSmallintestine(ChemicalAbsorption) -> HappensInSmallintestine(ChemicalAbsorption))", "(all x.(ChemicalAbsorption(x) -> SmallIntestine(x)))", "all x y.((ChemicalAbsorption(x) & SmallIntestine(y)) -> HappensIn(x,y))", "all x.(ChemicalAbsorptionOfSmallintestine(x) -> HappensInSmallintestine(x))", "(ChemicalAbsorptionOfSmallintestines(c) -> HappensInSmallintestine(c))", "all x.(ChemicalAbsorption(x) -> HappensInSmallintestine(x))", "all x y z.((ChemicalAbsorption(x) & SmallIntestine(y) & Smallintestine(z)) -> HappensIn(x,y,z))", "all x y.((ChemicalAbsorption(x) & SmallIntestine(y)) -> HappensInSmallintestine(x,y))", "all x y z.((ChemicalAbsorption(x) & SmallIntestine(y) & SmallIntestine(z)) -> HappensIn(x,y,z))", "all x.(ChemicalAbsorptionOccursInSmallintestine(x) -> HappensInSmallintestine(x))", "all x y.((ChemicalAbsorption(x) & Smallintestine(y)) -> HappensIn(x,y))", "all x.(ChemicalAbsorption(x) -> HappensInSmallintestine(x))", "all x.(ChemicalAbsorption(x) -> HappensInSmallintestine(x))"]}
{"id": "eqasc_validation_1021", "nl": "Chemical digestion breaks complex chemicals into simple ones.", "fol": "", "prediction": ["all x y.((ChemicalDigestion(x) & ComplexChemicals(y)) -> BreaksIntoSimpleChemicals(x,y))", "all x.(ChemicalDigestion(x) -> BreaksComplexChemicalsIntoSimpleChemicals(x))", "all x y.((ChemicalDigestment(x) & ComplexChemicals(y)) -> BreaksIntoSimpleChemicals(x,y))", "all x y z.((ChemicalDigestion(x) & ComplexChemical(y) & SimpleChemical(z)) -> BreaksInto(x,y,z))", "all x.(Chemistry(x) -> BreaksComplexChemicalsIntoSimpleChemicals(x))", "all x y z.((ChemicalDigestment(x) & ComplexChemical(y) & SimpleChemical(z)) -> BreaksInto(x,y,z))", "(ComplexChemicalsBreak(chemical) & SimpleChemicals(chemical))", "all x.(ChemicalDigestment(x) -> BreaksComplexChemicalsIntoSimpleChemicals(x))", "all x.(ChemicalDigestion(x) -> BreaksComplexChemicalsIntoSimpleChemicals(x))", "all x y.((ChemicalDigestion(x) & ComplexChemical(y)) -> BreaksIntoSimpleChemicals(x,y))", "all x.(Chemistry(x) -> BreaksComplexChemicalsIntoSimpleChemicals(x))", "all x y z.((ChemicalDigestion(x) & ComplexChemical(y) & SimpleChemical(z)) -> BreaksInto(x,y,z))", "all x y.((ChemicalDigestment(x) & ComplexChemical(y)) -> BreaksIntoSimpleChemicals(x,y))", "exists x.(Chemistry(x) & BreaksComplexChemicals(x) & BreaksComplexChemicalsIntoSimpleChemicals(x))", "all x.(ChemicalDigestion(x) -> BreaksComplexChemicalsIntoSimpleChemicals(x))", "all x.(ChemicalDigestration(x) -> BreaksComplexChemicalsIntoSimpleChemicals(x))"]}
{"id": "eqasc_validation_1022", "nl": "Breaking complex chemicals into simple ones occurs mainly in the small intestine.", "fol": "", "prediction": ["all x.((ComplexChemicals(x) & SimpleChemicals(x)) -> OccursInSmallIntestine(x))", "all x y.((ComplexChemical(x) & SimpleChemical(y)) -> BreaksInto(x,y))", "all x y z.((ComplexChemical(x) & SimpleChemical(y) & SmallIntestine(z)) -> BreaksInto(x,y,z))", "all x.((ComplexChemical(x) & SimpleChemical(x)) -> OccursInSmallIntestine(x))", "all x.((ComplexChemicals(x) & SimpleChemicals(x)) -> OccursInSmallintestine(x))", "all x.((ComplexChemicals(x) & BreaksIntoSimpleChemicals(x)) -> OccursInSmallintestine(x))", "all x y.((ComplexChemical(x) & SimpleChemical(y)) -> BreaksInto(x,y))", "exists x.(ComplexChemical(x) & BreaksIntoSimpleChemicals(x) & Smallintestine(x))", "all x.(ComplexChemicals(x) -> SimpleChemicals(x))", "all x y z.((ComplexChemical(x) & SimpleChemical(y) & SmallIntestine(z)) -> BreaksInto(x,y,z))", "all x.((ComplexChemistry(x) & SimpleChemistry(x)) -> OccursInSmallintestine(x))", "exists x.(ComplexChemical(x) & BreaksIntoSimpleChemicals(x) & OccursInSmallIntestine(x))", "all x y.((ComplexChemical(x) & SimpleChemical(y)) -> OccursInSmallintestine(x,y))", "all x y.((ComplexChemical(x) & SimpleChemical(y) & SmallIntestine(y)) -> BreaksInto(x,y))", "exists x.(ComplexChemicals(x) & BreaksIntoSimpleChemicals(x) & SmallIntestine(x))", "all x y.((ComplexChemistry(x) & SimpleChemistry(y)) -> (OccursInSmallIntestine(x,y) & BreaksInto(x,y)))"]}
{"id": "eqasc_validation_1023", "nl": "Enzymes involved in digestion occur mainly in the small intestine", "fol": "", "prediction": ["all x.(Enzyme(x) -> (InterestsInDigestion(x) & OccursInSmallIntestine(x)))", "all x y.((Enzyme(x) & Digestive(y)) -> (OccursInSmallIntestine(x,y) & SmallIntestine(x)))", "all x.((Enzyme(x) & InvolvedInDigestion(x)) -> OccursInSmallIntestine(x))", "all x y.((Enzyme(x) & SmallIntestine(y)) -> (OccursIn(x,y) & SmallIntestine(x)))", "all x y z.((Enzyme(x) & Digestive(y) & SmallIntestine(z)) -> OccursIn(x,y,z))", "all x y.((Enzyme(x) & Enzyme(y) & Enzyme(x) & Enzyme(x) & Enzyme(y)) -> OccursInSmallintestine(x,y))", "all x.(Enzyme(x) -> (InvolvedInDigestion(x) & OccursInSmallIntestine(x)))", "all x y z.((Enzyme(x) & Digestion(y) & SmallIntestine(z)) -> OccursIn(x,y,z))", "all x.((Enzyme(x) & Enzyme(x) & Enzyme(x)) -> (OccursInSmallintestine(x) & OccursInSmallintestine(x)))", "all x.((Enzyme(x) & InvolvedInDigestion(x)) -> OccursInSmallintestine(x))", "all x.(Enzyme(x) & InvolvedInDigestion(x) -> OccursInSmallintestine(x))", "all x y.((Enzyme(x) & Digestion(y)) -> OccursInSmallIntestine(x,y))", "all x.((Enzyme(x) & InvolvesDigestion(x)) -> OccursInSmallIntestine(x))", "(all x.(Enzyme(x) -> InvolvedInDigestion(x)) & OccursInSmallIntestine(x))", "all x y.((Enzyme(x) & Digestive(y)) -> OccursInSmallintestine(x,y))", "all x.(Enzyme(x) -> (InterestingInDigestion(x) & OccursInSmallintestine(x)))"]}
{"id": "eqasc_validation_1024", "nl": "Lactobacillus is present in the small intestine.", "fol": "", "prediction": ["all x.(Lactobacillus(x) -> PresentInSmallintestine(x))", "(exists x.(Lactobacillus(x) & SmallIntestine(x)) & PresentIn(x,y))", "all x y.((Lactobacillus(x) & SmallIntestine(y)) -> PresentIn(x,y))", "(PresentInSmallIntestine(Lactobacillus))", "all x.(Lactobacillus(x) -> PresentInSmallIntestine(x))", "all x y z.((Lactobacillus(x) & SmallIntestine(y) & SmallIntestine(z)) -> PresentIn(x,y,z))", "(exists x.(Lactobacillus(x) & SmallIntestine(x)) & PresentIn(x,x))", "all x.(Lactobacillus(x) -> PresentInSmallintestine(x))", "exists x.(Lactobacillus(x) & SmallIntestine(x))", "all x y.((Lactobacillus(x) & SmallIntestine(y)) -> PresentIn(x,y))", "exists x.(Lactobacillus(x) & Smallintestine(x))", "All x y.((Lactobacillus(x) & SmallIntestine(y)) -> PresentIn(x,y))", "all x.(Lactobacillus(x) -> PresentInSmallIntestine(x))", "exists x.(Lactobacillus(x) & SmallIgnite(x))", "All x.(Lactobacillus(x) -> PresentInSmallintestine(x))", "exists x.(Lactobacillus(x) & Smallintestine(x))"]}
{"id": "eqasc_validation_1025", "nl": "lactobacillus aids chemical digestion", "fol": "", "prediction": ["all x.(Lactobacillus(x) -> AidsChemicalDigestion(x))", "all x y.((Lactobacillus(x) & ChemicalDigestion(y)) -> Aids(x,y))", "(AidsChemicalDigestion(Lactobacillus) & Lactobacillus(Lactobacillus))", "lactobacillus AidsChemicalDigestion(Lactobacillus)", "all x y z.((Lactobacillus(x) & ChemicalDigestion(y) & ChemicalDigestion(z)) -> Aids(x,y,z))", "all x.(Lactobacillus(x) -> AidsChemicalDigestion(x))", "lactobacillus aids chemical digestion (lactobacillus,ChemicalDigestion))", "(AidsChemicalDigestion(Lactobacillus) & Lactobacillus(Lactobacillus))", "all x y.((Lactobacillus(x) & ChemicalDigestion(y)) -> Aids(x,y))", "all x.(Lactobacillus(x) -> AidsChemicalDigestion(x))", "all x y.((Lactobacillus(x) & ChemicalDigestion(y)) -> Aids(x,y))", "all x y.((Lactobacillus(x) & ChemicalDigestion(y)) -> Aids(x,y))", "all x.(Lactobacillus(x) -> AidsChemicalDigestion(x))", "all x.(Lactobacillus(x) -> AidsChemicalDigestion(x))", "all x.(Lactobacillus(x) -> AidsChemicalDigestion(x))", "All x.(Lactobacillus(x) -> AidsChemicalDigestion(x))"]}
{"id": "eqasc_validation_1026", "nl": "Physicians often call the intestines the bowels.", "fol": "", "prediction": ["all x.(Pharmacist(x) -> (CallingIntestines(x) | CallingBowels(x)))", "all x y.((Pharmacist(x) & Intestine(y)) -> CallsBowels(x,y))", "all x y.((Pharmacist(x) & Intestine(y)) -> (CalledBowels(x,y) | CalledBowels(x,y)))", "all x.((Pharmacist(x) & Intestine(x)) -> Bowels(x))", "all x y z.((Pharmacist(x) & Intestine(y) & Bowel(z)) -> Calls(x,y,z))", "all x.(Phlebotomist(x) -> (Intestine(x) | Bowel(x)))", "all x y.((Phlebotist(x) & Intestine(y)) -> CallsBowels(x,y))", "all x.(Pharmacist(x) -> (CallingIntestines(x) | CallingBowels(x)))", "all x y.((PhD(x) & Intestine(y)) -> (CalledBowel(x,y) | CalledBowel(x,y)))", "all x.(Pharmacist(x) -> CallsIntestinesBowels(x))", "(all x.(Phlebotomy(x) -> Digestive(x)))", "all x.((Pharmacist(x) & Intestine(x)) -> Bowels(x))", "all x y z.((Pharmacist(x) & Intestine(y) & Bowel(z)) -> Calls(x,y,z))", "all x y.((Pharmacist(x) & Intestine(y)) -> CallsBowels(x,y))", "all x.(Phetologist(x) -> (CallsIntestines(x,Bowels)))", "(all x.(Phlebotomy(x) -> Intestines(x)))"]}
{"id": "eqasc_validation_1027", "nl": "Chemical digestion occurs mainly in the small bowel.", "fol": "", "prediction": ["all x.(ChemicalDigestion(x) -> OccursInSmallBody(x))", "all x y.((ChemicalDigestion(x) & SmallBody(y)) -> OccursIn(x,y))", "(ChemicalDigestionOccursInSmallBody(ChemicalDigestion))", "all x.(ChemicalDigestion(x) -> OccursInSmallBody(x))", "all x y z.((ChemicalDigestion(x) & SmallBody(y) & SmallBody(z)) -> OccursIn(x,y,z))", "all x y.((ChemicalDigestion(x) & SmallBody(y)) -> OccursIn(x,y))", "all x.(ChemisticalDigestion(x) -> OccursInSmallBody(x))", "all x y.((ChemicalDigestion(x) & SmallBowel(y)) -> OccursIn(x,y))", "all x y.((ChemicalDigestment(x) & SmallBody(y)) -> OccursIn(x,y))", "all x.(ChemicalDigestion(x) -> OccursInSmallBody(x))", "all x.(ChemicalDigestion(x) -> OccursInSmallBody(x))", "all x y.((ChemicalDigestion(x) & SmallBody(y)) -> OccursIn(x,y))", "all x y z.((ChemicalDigestion(x) & SmallBody(y) & SmallBody(z)) -> OccursIn(x,y,z))", "exists x.(Chemistry(x) & SmallBody(x))", "all x.(ChemicalDigestion(x) -> OccursInSmallBody(x))", "exists x.(ChemicalDigestment(x) & SmallBody(x))"]}
{"id": "eqasc_validation_1028", "nl": "enzymes are located in the small intestine", "fol": "", "prediction": ["all x y.((Enzyme(x) & SmallIntestine(y)) -> LocatedIn(x,y))", "all x.(Enzyme(x) -> (LocatedInSmallintestine(x) & Smallintestine(x)))", "all x y z.((Enzyme(x) & SmallIntestine(y) & SmallIntestine(z)) -> LocatedIn(x,y,z))", "(EnzymesLocatedInSmallintestine(en) & SmallIntestine(en))", "(all x.(Enzyme(x) -> SmallIntestine(x)))", "all x.(Enzyme(x) -> (LocatedInSmallintestine(x) | LocatedInSmallintestine(x)))", "all x y.((Enzyme(x) & SmallIntestine(y)) -> LocatedIn(x,y))", "all x.(Enzymes(x) -> (LocatedInSmallIntestine(x) & InSmallintestine(x)))", "all x y z.((Enzyme(x) & SmallIntestine(y) & SmallIntestine(z)) -> LocatedIn(x,y,z))", "(all x.(Enzyme(x) -> SmallIntestine(x)))", "all x y.((Enzyme(x) & SmallIntestine(y)) -> LocatedIn(x,y))", "all x y z.((Enzyme(x) & SmallIntestine(y) & Smallintestine(z)) -> LocatedIn(x,y,z))", "all x.(Enzyme(x) -> (LocatedInSmallintestine(x) | LocalizedInSmallintestine(x)))", "all x.(Enzymes(x) -> (LocatedInSmallIntestine(x) & SmallIntestine(x)))", "all x y.((Enzyme(x) & SmallIntestine(y)) -> LocatedIn(x,y))", "all x.(Enzyme(x) -> (LocatedInSmallintestine(x) | LocatedInSmallintestine(x)))"]}
{"id": "eqasc_validation_1029", "nl": "Complex chemicals break down into simple ones mainly in the small intestine.", "fol": "", "prediction": ["all x y.((ComplexChemical(x) & SmallIntestine(y)) -> BreaksDownIntoSimpleChemicals(x,y))", "all x.(ComplexChemical(x) -> BreaksDownIntoSimpleChemicals(x))", "all x y z.((ComplexChemical(x) & SimpleChemical(y) & SmallIntestine(z)) -> BreaksDownInto(x,y,z))", "all x.(ComplexChemicals(x) -> BreaksDownIntoSimpleChemicals(x))", "(ComplexChemicalsBreakDownIntoSimpleChemicals(ComplexChemicals) & MostlyInSmallIntestine(ComplexChemicals))", "all x y.((ComplexChemical(x) & SmallIntestine(y)) -> BreaksDownIntoSimpleChemicals(x,y))", "all x y z.((ComplexChemical(x) & SimpleChemical(y) & SmallIntestine(z)) -> BreaksDownInto(x,y,z))", "all x.(ComplexChemical(x) -> BreaksDownIntoSimpleChemicals(x))", "all x y.((ComplexChemical(x) & SimpleChemical(y)) -> BreaksDownInSmallintestine(x,y))", "all x.((ComplexChemical(x) & SimpleChemical(x)) -> BreaksDownInSmallintestine(x))", "all x.(ComplexChemicals(x) -> BreaksDownIntoSimpleChemicals(x))", "all x.(ComplexChemical(x) -> BreaksIntoSimpleChemicals(x))", "all x y.((ComplexChemical(x) & SmallIntestine(y)) -> BreaksIntoSimpleChemicals(x,y))", "exists x.(ComplexChemical(x) & BreakDownIntoSimpleChemicals(x) & MostlyInSmallintestine(x))", "all x y z.((ComplexChemical(x) & SimpleChemical(y) & SmallIntestine(z)) -> BreaksDownInto(x,y,z))", "all x.(ComplexChemistry(x) -> BreaksDownIntoSimpleChemistry(x))"]}
{"id": "eqasc_validation_1030", "nl": "seconds are used to measure time", "fol": "", "prediction": ["all x.(Second(x) -> MeasuresTime(x))", "all x y.((Second(x) & Time(y)) -> Measures(x,y))", "(MeasuresTimeInSeconds(Seconds) & MeasuresTimeInSeconds(Seconds))", "all x.(Seconds(x) -> MeasuresTime(x))", "all x y z.((Second(x) & Time(y) & Time(z)) -> Measures(x,y,z))", "all x y.((Second(x) & Second(y)) -> MeasuresTime(x,y))", "(MeasureTimeInSeconds(Seconds) & MeasureTimeInSeconds(Seconds))", "seconds are used to measure time.", "all x.(Seconds(x) -> UsedToMeasureTime(x))", "(MeasuresTime(seconds) & MeasuresTime(seconds))", "(MeasuresTimeInSeconds(Seconds) & UsedToMeasureTime(Seconds))", "all x y.((Second(x) & Time(y)) -> UsedToMeasure(x,y))", "all x.(Second(x) -> MeasuresTime(x))", "all x.(Second(x) -> UsedToMeasureTime(x))", "all x.(Seconds(x) -> MeasuresTime(x))", "all x y.((Second(x) & Second(y)) -> MeasuresTime(x,y))"]}
{"id": "eqasc_validation_1031", "nl": "CPU time is measured in seconds.", "fol": "", "prediction": ["all x.(CPUTime(x) -> MeasuredInSeconds(x))", "(MeasuredInSeconds(CPUTime))", "all x.(CPUTime(x) -> MeasuredInSeconds(x))", "all x y.((CPUTime(x) & Second(y)) -> MeasuredIn(x,y))", "(MeasuresCPUTimeInSeconds(CPU))", "all x.(CPUTime(x) -> MeasuredInSeconds(x))", "(MeasuredInSeconds(CPUTime))", "all x.(ComputerTime(x) -> MeasuredInSeconds(x))", "all x y.((CPUTime(x) & Second(y)) -> MeasuredIn(x,y))", "all x.(CPUTime(x) -> MeasuredInSeconds(x))", "(MeasuresCPUTimeInSeconds(CPU))", "all x y.((CPUTime(x) & Second(y)) -> MeasuredIn(x,y))", "(MeasuredInSeconds(CPUTime))", "all x.(CPUTime(x) -> MeasuredInSeconds(x))", "all x.(CPUTime(x) -> MeasuredInSeconds(x))", "all x.(CPUTime(x) -> MeasuredInSeconds(x))"]}
{"id": "eqasc_validation_1032", "nl": "CPU time can be used as a clock", "fol": "", "prediction": ["all x.(CPUTime(x) -> CanBeUsedAsClock(x))", "all x y.((CPUTime(x) & Clock(y)) -> CanBeUsedAs(x,y))", "all x.(CPUTime(x) -> Clock(x))", "all x.((CPUTime(x) & Clock(x)) -> CanBeUsedAs(x,Clock))", "(CPUTimeClock(CPU) & UsedAsClock(CPUTimeClock))", "(CPUTimeClock(CPU) -> CanBeUsedAsClock(CPUTimeClock))", "all x y.((CPUTime(x) & Clock(y)) -> CanBeUsedAs(x,y))", "all x.(CPUTime(x) -> CanBeUsedAsClock(x))", "(CPUTimeCanBeUsedAsClock(Clock))", "all x.((CPUTime(x) & Clock(x)) -> CanBeUsedAs(x,Clock))", "all x.(CPUTime(x) -> Clock(x))", "all x y.((CPUTime(x) & Clock(y)) -> CanBeUsedAs(x,y))", "all x.(CPUTime(x) -> CanBeUsedAsClock(x))", "all x y.((CPUTime(x) & Clock(y)) -> CanBeUsedAs(x,y))", "exists x.(CPUTime(x) & UsedAsClock(x))", "all x.(CPUTime(x) -> Clock(x))"]}
{"id": "eqasc_validation_1033", "nl": "An accounting period is simply a period of time.", "fol": "", "prediction": ["all x.(AccountingPeriod(x) -> PeriodOfTime(x))", "all x.(AccountingPeriod(x) -> PeriodOfTime(x))", "all x y.((AccountingPeriod(x) & PeriodOfTime(y)) -> PeriodOfTime(x,y))", "all x.exists y.(AccountingPeriod(x) & PeriodOfTime(y) & Time(x,y))", "all x.(AccountingPeriod(x) -> PeriodOfTime(x))", "all x.(AccountingPeriod(x) -> PeriodOfTime(x))", "all x y.((AccountingPeriod(x) & Time(y)) -> PeriodOfTime(x,y))", "all x y.((AccountingPeriod(x) & PeriodOfTime(y)) -> PeriodOfTime(x,y))", "all x y.((AccountingPeriod(x) & TimePeriod(y)) -> PeriodOfTime(x,y))", "all x.(AccountingPeriod(x) -> PeriodOfTime(x))", "all x.(AccountingPeriod(x) -> PeriodOfTime(x))", "all x.(AccountingPeriod(x) -> PeriodOfTime(x))", "all x.(AccountingPeriod(x) -> PeriodOfTime(x))", "all x.(AccountingPeriod(x) -> PeriodOfTime(x))", "all x.(AccountingPeriod(x) -> PeriodOfTime(x))", "exists x.(AccountingPeriod(x) & TimePeriod(x))"]}
{"id": "eqasc_validation_1034", "nl": "seconds are used to measure a period", "fol": "", "prediction": ["all x y.((Second(x) & Period(y)) -> Measures(x,y))", "all x.(Seconds(x) -> MeasuresPeriod(x))", "all x y z.((Second(x) & Period(y) & Period(z)) -> Measures(x,y,z))", "(MeasuresPeriod(seconds) & MeasuresPeriod(seconds))", "(SecondsMeasurePeriod(Seconds) -> UsedToMeasurePeriod(Seconds))", "all x y.((Second(x) & Period(y)) -> Measures(x,y))", "(MeasuresPeriod(seconds) -> UsedToMeasurePeriod(seconds))", "all x.(Seconds(x) -> MeasuresPeriod(x))", "all x.(Second(x) -> MeasuresPeriod(x))", "all x y.((Second(x) & Period(y)) -> UsedToMeasure(x,y))", "all x y z.((Second(x) & Period(y) & Period(z)) -> Measures(x,y,z))", "all x.(Seconds(x) -> UsedToMeasurePeriod(x))", "all x y.((Second(x) & Period(y)) -> MeasuresPeriod(x,y))", "all x y z.((Second(x) & Period(y) & Period(z)) -> Measures(x,y,z))", "all x.(Seconds(x) -> MeasuresPeriod(x))", "all x.(Seconds(x) -> MeasuresPeriod(x))"]}
{"id": "eqasc_validation_1035", "nl": "Stopwatch was used to measure time.", "fol": "", "prediction": ["all x.(Stopwatch(x) -> MeasuresTime(x))", "(MeasuresTime(Stopwatch) & UsedToMeasure(Stopwatch))", "all x.(Stopwatch(x) -> UsedToMeasureTime(x))", "-(Stopwatch(x) & MeasuresTime(x))", "Stopwatch was used to measure time.", "all x y.((Stopwatch(x) & Time(y)) -> Measures(x,y))", "(all x.(Stopwatch(x) -> MeasuresTime(x)))", "(MeasuresTime(stopwatch) & UsedToMeasure(stopwatch))", "all x y.((Stopwatch(x) & Time(y)) -> UsedToMeasure(x,y))", "all x.(Stopwatch(x) -> MeasuresTime(x))", "Stopwatch was used to measure time.", "(MeasuresTime(Stopwatch))", "all x.(Stopwatch(x) -> MeasuresTime(x))", "(MeasuresTime(stopwatch))", "All x.(Stopwatch(x) -> MeasuredTime(x))", "All x.(Stopwatch(x) -> UsedToMeasureTime(x))"]}
{"id": "eqasc_validation_1036", "nl": "A stopwatch is used to measure seconds", "fol": "", "prediction": ["all x.(Stopwatch(x) -> MeasuresSeconds(x))", "all x y.((Stopwatch(x) & Seconds(y)) -> Measures(x,y))", "all x y z.((Stopwatch(x) & Second(y) & Second(z)) -> Measures(x,y,z))", "all x.(Stopwatch(x) -> MeasuresSeconds(x))", "all x y.((Stopwatch(x) & Seconds(y)) -> Measures(x,y))", "all x y.((Stopwatch(x) & Second(y)) -> Measures(x,y))", "all x y z.((Stopwatch(x) & Seconds(y) & Seconds(z) & Measures(x,y,z)) -> UsedToMeasure(x,y,z))", "all x.(Stopwatch(x) -> MeasuresSeconds(x))", "all x y z.((Stopwatch(x) & Second(y) & Second(z)) -> Measures(x,y,z))", "all x.(Stopwatch(x) -> UsedToMeasureSeconds(x))", "all x y.((Stopwatch(x) & Seconds(y)) -> Measures(x,y))", "all x.(Stopwatch(x) -> MeasuresSeconds(x))", "all x y.((Stopwatch(x) & Second(y)) -> Measures(x,y))", "all x.(Stopwatch(x) -> MeasuresSeconds(x))", "all x.(Stopwatch(x) -> MeasureSeconds(x))", "exists x.(Stopwatch(x) & UsedToMeasureSeconds(x))"]}
{"id": "eqasc_validation_1037", "nl": "Speed is measured by the distance covered divided by the elapsed time.", "fol": "", "prediction": ["all x.(Speed(x) -> MeasuredByDistance(x))", "all x.(Speed(x) -> (MeasuredByDistance(x) & DividedByElapsedTime(x)))", "all x y.((Speed(x) & Distance(y) & DividedByElapsedTime(x,y)) -> MeasuredBy(x,y))", "(MeasuresSpeedByDistance(Speed) & DividedByElapsedTime(Speed))", "all x.(Speed(x) -> (MeasuredByDistance(x) & DividedByElapsedTime(x)))", "all x y z.((Speed(x) & Distance(y) & ElapsedTime(z)) -> MeasuredBy(x,y,z))", "all x y.((Speed(x) & Distance(y)) -> MeasuredBy(x,y))", "(MeasuresSpeedByDistance(Speed,ElapsedTime) & DividedByElapsedTime(Speed,ElapsedTime))", "(MeasuresSpeedByDistance(Speed) & DividedByElapsedTime(Speed))", "all x.(Speed(x) -> MeasuredByDistance(x))", "all x y z.((Speed(x) & Distance(y) & Time(z)) -> MeasuredBy(x,y,z))", "all x y.((Speed(x) & Distance(y) & ElapsedTime(y)) -> MeasuredBy(x,y))", "all x.(Speed(x) -> (Distance(x) & ElapsedTime(x)))", "all x.(Speed(x) -> MeasuredByDistance(x))", "All x.(Speed(x) -> (MeasuredByDistance(x) & DividedByElapsedTime(x)))", "All x.(Speed(x) -> MeasuredByDistance(x))"]}
{"id": "eqasc_validation_1038", "nl": "seconds can be used to measure Speed", "fol": "", "prediction": ["all x.(Seconds(x) -> MeasureSpeed(x))", "all x y.((Second(x) & Second(y)) -> MeasureSpeed(x,y))", "all x.(Seconds(x) -> MeasureSpeed(x))", "(MeasureSpeed(seconds) & Speed(seconds))", "all x.(Second(x) -> MeasureSpeed(x))", "all x y z.((Second(x) & Speed(y) & Speed(z)) -> Measures(x,y,z))", "(MeasureSpeed(seconds,seconds) & MeasureSpeed(s,seconds))", "(MeasureSpeedInSeconds(Seconds) -> MeasureSpeedInSeconds(Seconds))", "all x y.((Second(x) & Speed(y)) -> Measures(x,y))", "All x y.((Seconds(x) & Speed(y)) -> Measures(x,y))", "all x y.((Second(x) & Second(y)) -> MeasureSpeed(x,y))", "all x.(Seconds(x) -> MeasureSpeed(x))", "all x.(Seconds(x) -> UsedToMeasureSpeed(x))", "all x.(Second(x) -> MeasureSpeed(x))", "all x.(Seconds(x) -> CanBeMeasuredToMeasureSpeed(x))", "all x.(Second(x) -> MeasureSpeed(x))"]}
{"id": "eqasc_validation_1039", "nl": "whiskers are used for feeling by animals", "fol": "", "prediction": ["all x y.((Whiskers(x) & Animal(y)) -> UsedForFeeling(x,y))", "all x.(Whiskers(x) -> UsedForFeelingByAnimals(x))", "all x y z.((Whiskers(x) & Animal(y) & Animal(z)) -> UsedForFeeling(x,y,z))", "all x y.((Whiskers(x) & Animal(y)) -> UsedForFeeling(x,y))", "(UsedForFeelingByAnimals(whispers) & Animals(whispers))", "(all x.(Whiskers(x) -> UsedForFeeling(x)))", "all x.(Whiskers(x) -> UsedForFeelingByAnimals(x))", "all x y z.((Whiskers(x) & Animal(y) & Animal(z)) -> UsedForFeeling(x,y,z))", "all x y.((Whiskers(x) & Animal(y)) -> UsedForFeeling(x,y))", "all x.(Whiskers(x) -> UsedForFeeling(x))", "all x.(Whiskers(x) -> (UsedForFeeling(x) & Animal(x)))", "all x y.((Shoeper(x) & Animal(y)) -> UsedForFeeling(x,y))", "all x y z.((Whisker(x) & Animal(y) & Animal(z)) -> UsedForFeelingBy(x,y,z))", "all x.(Whiskers(x) -> UsedForSenseingByAnimals(x))", "all x y.((Whisker(x) & Animal(y)) -> UsedForFeelingBy(x,y))", "all x.(Whisker(x) -> (UsedForFeeling(x) & Animal(x)))"]}
{"id": "eqasc_validation_1040", "nl": "Whiskers Whiskers are the stiff hairs on the dog's face.", "fol": "", "prediction": ["all x.(Whiskers(x) -> (StiffHairs(x) & OnDogsFace(x)))", "all x y.((Dog(x) & Whisker(y)) -> StiffHairsOnFace(y,x))", "all x.(Whiskers(x) -> (StiffHairsOnDogsFace(x) & OnDogsFace(x)))", "all x y.((Dog(x) & Whisker(y)) -> (StiffHairs(y) & OnFace(y,x)))", "(StrongHairsOnDogsFace(whispers))", "(StiffHairsOnFace(whispers) & Dog(dog))", "all x y z.((Dog(x) & Whisker(y) & Dog(z)) -> StiffHairsOnFace(y,z))", "all x.(Whiskers(x) -> (StiffHairs(x) & DogFace(x)))", "all x.(Shuffler(x) -> StiffHairsOnDogsFace(x))", "(StiffHairs(whispers) & Dog(dog))", "all x.(Whiskers(x) -> (StrongHairsOnDogsFace(x) & OnDogsFace(x)))", "all x y.((Dog(x) & Whisker(y)) -> StiffHairsOnFace(y,x))", "all x.((Dog(x) & Whisker(x)) -> StiffHairsOnFace(x))", "All x.(Whisker(x) -> (StiffHairsOnDogsFace(x) & OnDogsFace(x)))", "all x y.((Dog(x) & Whisker(y)) -> (StrongHairsOnFace(y,x)))", "all x.(Shiffer(x) -> StiffHairsOnDog(x))"]}
{"id": "eqasc_validation_1041", "nl": "Stiff hairs on the face are used for feeling by animals.", "fol": "", "prediction": ["all x y.((StiffHair(x) & Face(y)) -> UsedForFeeling(x,y))", "all x.((Hair(x) & Stiff(x)) -> UsedForFeeling(x))", "all x y.((Hair(x) & Face(y) & Animal(z)) -> UsedForFeeling(x,y,z))", "all x.((Hair(x) & StiffOnFace(x)) -> UsedForFeelingByAnimals(x))", "(UsedForFeelingByAnimals(stiffHairsOnFace(s) & OnFace(s))", "all x y z.((StiffHair(x) & Face(y) & Animal(z)) -> UsedForFeeling(x,y,z))", "all x.(StiffHairsOnFace(x) -> UsedForFeeling(x))", "all x y.((StiffHair(x) & Face(y)) -> UsedForFeelingByAnimals(x,y))", "all x.((Hair(x) & Stiff(x) & Face(x)) -> UsedForFeeling(x))", "all x y.((Hair(x) & Face(y)) -> UsedForFeeling(x,y))", "all x.((StiffHairs(x) & Face(x)) -> UsedForFeeling(x))", "all x y z.((Hair(x) & Face(y) & Animal(z)) -> Stiff(x,y))", "all x.(StiffHairsOnFace(x) -> UsedForFeelingByAnimals(x))", "all x.((Hairs(x) & StiffOnFace(x)) -> UsedForSensementByAnimals(x))", "all x y.((StiffHair(x) & Animal(y)) -> UsedForFeeling(x,y))", "all x y.((SiffHair(x) & Animal(y)) -> UsedForFeeling(x,y))"]}
{"id": "eqasc_validation_1042", "nl": "Stiff hairs on the dog's face are used for feeling.", "fol": "", "prediction": ["all x.((Dog(x) & StiffHairsOnFace(x)) -> UsedForFeeling(x))", "all x y.((Dog(x) & StiffHairs(y) & Face(y)) -> UsedForFeeling(x,y))", "all x.((Dog(x) & StiffHairs(x)) -> UsedForFeeling(x))", "all x.(StiffHairsOnDogsFace(x) -> UsedForFeeling(x))", "(UsedForFeeling(stiffHairs(s) & OnDogsFace(s))", "all x y.((Dog(x) & StiffHairs(y) & Face(y)) -> UsedForFeeling(x,y))", "all x y z.((Dog(x) & StiffHairs(y) & Face(z)) -> UsedForFeeling(x,y,z))", "(StiffHairsOnFace(dog) & UsedForFeeling(dog))", "all x.((Dog(x) & StiffHairsOnFace(x)) -> UsedForFeeling(x))", "all x y.((Dog(x) & StiffHairs(x,y)) -> UsedForFeeling(x,y))", "all x y.((Dog(x) & StiffHairsOnFace(x,y)) -> UsedForFeeling(x))", "all x.((Dog(x) & StiffHairs(x)) -> UsedForFeeling(x))", "all x.((StiffHairs(x) & DogsFace(x)) -> UsedForFeeling(x))", "all x.(StiffHairs(x) -> UsedForFeeling(x))", "all x y.((Dog(x) & StiffHair(y)) -> UsedForFeeling(x,y))", "all x.((Dog(x) & StiffHairsOnFace(x)) -> UsedForFeeling(x))"]}
{"id": "eqasc_validation_1043", "nl": "All cats are animals.", "fol": "", "prediction": ["all x.(Cat(x) -> Animal(x))", "all x.(Cat(x) -> Animal(x))", "(all x.(Cat(x) -> Animal(x)))", "all x.(Cat(x) -> Animal(x))", "(all x.(Cat(x) -> Animal(x)))", "all x.(Cat(x) -> Animal(x))", "all x.(Cat(x) -> Animal(x))", "(all x.(Cat(x) -> Animal(x)))", "all x.(Cat(x) -> Animal(x))", "all x.(Kat(x) -> Animal(x))", "all x.(Cat(x) -> Animal(x))", "all x.(Cat(x) -> Animal(x))", "all x.(Cat(x) -> Animal(x))", "all x.(Cat(x) -> Animal(x))", "all x.(Cat(x) -> Animal(x))", "exists x.(Cat(x) & Animal(x))"]}
{"id": "eqasc_validation_1044", "nl": "Cats use specialized long hair on their faces to feel with.", "fol": "", "prediction": ["all x.(Cat(x) -> (UsesSpecializedLongHair(x) & FeelsWith(x)))", "all x y.((Cat(x) & SpecializedLongHair(y)) -> FeelsWith(x,y))", "all x.(Cat(x) -> UsesSpecializedLongHair(x))", "all x y.((Cat(x) & Face(y)) -> UsesSpecializedLongHair(x,y))", "all x y z.((Cat(x) & SpecializedLongHair(y) & Face(z)) -> FeelsWith(x,y,z))", "all x.(Cat(x) -> (UsesSpecializedLongHair(x) & FeelsWith(x)))", "all x y.((Cat(x) & SpecializedLongHair(y)) -> FeelsWith(x,y))", "all x.(Cat(x) -> UsesSpecializedLongHairOnFace(x))", "(all x.(Cat(x) -> UsesSpecializedLongHairOnFace(x)))", "all x y z.((Cat(x) & SpecializedLongHair(y) & Face(z)) -> UsesToFeelWith(x,y,z))", "all x.(Cat(x) -> (UsesSpecializedLongHair(x) & FeelsWith(x)))", "all x y.((Cat(x) & Face(y)) -> UsesSpecializedLongHair(x,y))", "all x y.((Cat(x) & SpecializedLongHair(y)) -> FeelsWith(x,y))", "all x.(Cat(x) -> UsesSpecializedLongHair(x))", "all x.(Cat(x) -> UsesSpecializedLongHairOnFace(x))", "all x.(Cat(x) -> (UsesSpecializedLongHair(x) & FeelsWith(x)))"]}
{"id": "eqasc_validation_1045", "nl": "Another name for it is cat's whiskers.", "fol": "", "prediction": ["all x.(Cat(x) -> Whiskers(x))", "(exists x.(Cat(x) & Whiskers(x)))", "all x.(CatsWhiskers(x) -> NameFor(x))", "all x.((Cat(x) & Whiskers(x)) -> Has(x,y))", "exists x.(CatsWhiskers(x) & CatsWhiskers(x))", "(exists x.(CatsWhiskers(x) & CatsWhiskers(x)))", "exists x.(CatWhiskers(x) & NameFor(x,Cat))", "(exists x.(Cat(x) & Whiskers(x)))", "all x.((Cat(x) & Whiskers(x)) -> Has(x,y))", "exists x y.(Name(x) & Cat(y) & Whiskers(y))", "all x.((Cat(x) & Whiskers(x)) -> NameFor(x,x))", "exists x y.(Name(x,y) & Cat(y) & Whiskers(x,y))", "all x.(CatWhiskers(x) -> HasName(x))", "exists x.(CatsWhiskers(x))", "exists x.(NameForCat(x) & CatsWhiskers(x))", "all x.((Cat(x) & Whiskers(x)) -> HasName(x,y))"]}
{"id": "eqasc_validation_1046", "nl": "cats have body parts for feeling", "fol": "", "prediction": ["all x.(Cat(x) -> HasBodyPartsForFeeling(x))", "all x y.((Cat(x) & BodyPart(y)) -> HasForFeeling(x,y))", "all x.(Cat(x) -> HasBodyParts(x))", "(all x.(Cat(x) -> HasBodyParts(x)))", "all x.(Cat(x) -> (HasBodyParts(x) & FeelsBodyParts(x)))", "(all x.(Cat(x) -> HasBodyPartsForFeeling(x)))", "all x y z.((Cat(x) & BodyPart(y) & Feeling(z)) -> Has(x,y))", "all x.(Cat(x) -> HasBodyPartsForFeeling(x))", "all x y.((Cat(x) & BodyPart(y)) -> HasForFeeling(x,y))", "all x.(Cat(x) -> HasBodyParts(x))", "all x y.((Cat(x) & BodyPart(y)) -> Has(x,y))", "all x.(Cat(x) -> (HasBodyParts(x) & FeelsGood(x)))", "all x y.((Cat(x) & BodyPart(y)) -> HasForEmotion(x,y))", "exists x.(Cat(x) & BodyPart(x) & Feels(x))", "all x.(Cat(x) -> HasBodyPart(x))", "all x.(Cat(x) -> HasBodyPartsForFelting(x))"]}
{"id": "eqasc_validation_1047", "nl": "whiskers are used for feeling by cats", "fol": "", "prediction": ["all x y.((Whiskers(x) & Cat(y)) -> UsedForFeeling(x,y))", "all x.(Whiskers(x) -> UsedForFeeling(x))", "all x y z.((Whiskers(x) & Cat(y) & Cat(z)) -> UsedForFeeling(x,y,z))", "(all x.(Whiskers(x) -> UsedForFeeling(x)) & Cat(x))", "all x y.((Whiskers(x) & Cat(y)) -> UsedForFeeling(x,y))", "all x.(Whiskers(x) -> UsedForFeelingByCats(x))", "all x y z.((Whiskers(x) & Cat(y) & Cat(z)) -> UsedForFeeling(x,y,z))", "all x y.((Shoeper(x) & Cat(y)) -> UsedForFeeling(x,y))", "(all x y.(Whisker(x) -> UsedForFeeling(x,y)) & Cat(y))", "all x y.((Whiskers(x) & Cat(y)) -> UsedForFelting(x,y))", "(all x.(Whisker(x) -> UsedForFelting(x,Cats)))", "all x.(Whiskers(x) -> UsedForFeltingByCats(x))", "all x y z.((Whisker(x) & Cat(y) & Cat(z)) -> UsedForFeelingBy(x,y,z))", "all x.(Whiskers(x) -> UsedForFeelingByCats(x))", "all x.(Shoeber(x) -> UsedForFeelingByCats(x))", "all x.(Whisker(x) -> UsedForFeltingByCats(x))"]}
{"id": "eqasc_validation_1048", "nl": "Hair, whiskers, claws, and hooves are also made of keratin.", "fol": "", "prediction": ["all x.((Hair(x) | Whiskers(x) | Claws(x) | Hooves(x)) -> MadeOfKeratin(x))", "(MadeOfKeratin(Hair) & MadeOfKeratin(Whiskers) & MadeOfKeratin(Claws) & MadeOfKeratin(Hooves))", "all x y z.((Hair(x) & Whiskers(y) & Claws(z) & Hooves(x)) -> MadeOfKeratin(x))", "all x.(Keratin(x) -> (Hair(x) | Whiskers(x) | Claws(x) | Hooves(x)))", "all x y.((Hair(x) & Whiskers(y) & Claws(y) & Hooves(x)) -> MadeOfKeratin(x))", "(MadeOfKeratin(Hair,Keratin) & MadeOfKeratin(Whiskers,Claws,Hooves))", "all x.((Hair(x) | Whiskers(x) | Claws(x) | Hooves(x)) -> MadeOfKeratin(x))", "all x.(Hair(x) & (Whiskers(x) | Claws(x) | Hooves(x))) -> MadeOfKeratin(x))", "all x y z.((Hair(x) & Whisker(y) & Claw(z) & Hoove(z)) -> (MadeOfKeratin(x) & MadeOfKeratin(x)))", "(MadeOfKeratin(Hair) & MadeOfKeratin(Whiskers) & MadeOfKeratin(Claws) & MadeOfKeratin(Hooves))", "all x.((Hair(x) | Whiskers(x) | Claws(x) | Hooves(x)) -> MadeOfKeratin(x))", "(MadeOfKeratin(Hair,Keratin) & MadeOfKeratin(Whiskers,Claws,Hooves))", "(MadeOfKeratin(Hair) & MadeOfKeratin(Wheels) & MadeOfKeratin(Claws) & MadeOfKeratin(Hooves))", "all x.((Hair(x) | Whiskers(x) | Claws(x) | Hooves(x)) -> MadeOfKeratin(x))", "(MadeOfKeratin(Hair) & MadeOfKeratin(Whiskers) & MadeOfKeratin(Claws) & MadeOfKeratin(Hooves))", "all x.((Hair(x) | Whiskers(x) | Cleats(x) | Hooves(x)) -> MadeOfKeratin(x))"]}
{"id": "eqasc_validation_1049", "nl": "tissue made of keratin is used for feeling by animals", "fol": "", "prediction": ["all x y.((Tissue(x) & Keratin(y)) -> UsedForFeelingByAnimals(x,y))", "all x.((Tissue(x) & MadeOfKeratin(x)) -> UsedForSensementByAnimals(x))", "all x y z.((Tissue(x) & Keratin(y) & Animal(z)) -> UsedForFeeling(x,y,z))", "all x y.((Tissue(x) & Keratin(y)) -> UsedForSensementByAnimals(x,y))", "all x.((Tissue(x) & MadeOfKeratin(x)) -> UsedForFeelingByAnimals(x))", "all x.((TissueMadeOfKeratin(x) & UsedForSensementByAnimals(x)) -> UsedForSensementByAnimals(x))", "all x y.((Tissue(x) & Keratin(y) & Animal(z)) -> UsedForFeelingBy(x,z))", "all x y z.((Tissue(x) & Keratin(y) & Animal(z)) -> UsedForFeelingBy(x,y,z))", "(all x.(KeratinTissue(x) -> UsedForFeeling(x)))", "all x.((Tissue(x) & MadeOfKeratin(x)) -> UsedForSenseing(x))", "all x.((TissueMadeOfKeratin(x) & Animal(x)) -> UsedForFeeling(x))", "all x y z.((Tissue(x) & Keratin(y) & Animal(z) & MadeOf(x,y)) -> UsedForFeeling(x,z))", "all x y.((Tissue(x) & Keratin(y)) -> UsedForFeelingByAnimals(x,y))", "all x.((Tissue(x) & MadeOfKeratin(x)) -> UsedForFeelingByAnimals(x))", "all x y.((Tissue(x) & Keratin(y) & Animal(z)) -> UsedForFeelingBy(x,z))", "all x.((Tissue(x) & MadeOfKeratin(x)) -> UsedForSensementByAnimals(x))"]}
{"id": "eqasc_validation_1050", "nl": "a watch is used for measuring time", "fol": "", "prediction": ["all x.(Watch(x) -> MeasuresTime(x))", "all x y.((Watch(x) & Time(y)) -> Measures(x,y))", "all x.(Watch(x) -> UsedForMeasuringTime(x))", "all x y.((Watch(x) & MeasuresTime(x,y)) -> UsedFor(x,y))", "all x y z.((Watch(x) & Time(y) & Time(z)) -> Measures(x,y,z))", "all x y.((Watch(x) & Time(y)) -> Measures(x,y))", "all x y z.(Watch(x) -> (MeasuresTime(x,y) & Time(y) & MeasuresTime(x,z)))", "all x.(Watch(x) -> MeasuresTime(x))", "all x y z.((Watch(x) & Time(y) & Time(z)) -> Measures(x,y,z))", "all x.(Watch(x) -> UsedForMeasuringTime(x))", "all x y.((Watch(x) & MeasuresTime(x,y)) -> UsedFor(x,y))", "all x y.((Watch(x) & Time(y)) -> UsedForMeasuring(x,y))", "all x.(Watch(x) -> MeasuresTime(x))", "exists x.(Watch(x) & UsedForMeasuringTime(x))", "exists x.(Watch(x) & MeasuresTime(x) & UsedFor(x,Time))", "exists x.(Watch(x) & MeasuresTime(x))"]}
{"id": "eqasc_validation_1051", "nl": "Times are measured in seconds.", "fol": "", "prediction": ["all x.(Time(x) -> MeasuredInSeconds(x))", "all x.(Time(x) -> MeasuredInSeconds(x))", "(MeasuredInSeconds(Times))", "all x y.((Time(x) & Second(y)) -> MeasuredIn(x,y))", "all x.(Time(x) -> MeasurableInSeconds(x))", "(MeasuredInSeconds(Time))", "all x y.((Time(x) & Second(y)) -> MeasuredIn(x,y))", "all x.(Time(x) -> MeasuredInSeconds(x))", "all x.(Teaser(x) -> MeasurableInSeconds(x))", "(MeasuresTimeInSeconds(Time))", "all x.(Time(x) -> MeasuringSeconds(x))", "all x.(Times(x) -> MeasuredInSeconds(x))", "(MeasuredInSeconds(Times))", "all x.(Times(x) -> MeasurableInSeconds(x))", "all x y.((Time(x) & Second(y)) -> MeasuredIn(x,y))", "all x.(Time(x) -> MeasuredInSeconds(x))"]}
{"id": "eqasc_validation_1052", "nl": "A watch can be used to measure seconds.", "fol": "", "prediction": ["all x.(Watch(x) -> MeasuresSeconds(x))", "all x.(Watch(x) -> MeasuresSeconds(x))", "all x y.((Watch(x) & Second(y)) -> Measures(x,y))", "all x.(Watch(x) -> MeasureSeconds(x))", "all x.(Watch(x) -> MeasuresSeconds(x))", "all x y.((Watch(x) & Second(y)) -> Measures(x,y))", "all x.(Watch(x) -> CanMeasureSeconds(x))", "all x y.((Watch(x) & Second(y)) -> Measures(x,y))", "all x y.((Watch(x) & Seconds(y)) -> Measures(x,y))", "exists x.(Watch(x) & UsedToMeasureSeconds(x))", "all x.(Watch(x) -> MeasuresSeconds(x))", "exists x.(Watch(x) & MeasureSeconds(x))", "all x y.((Watch(x) & Second(y)) -> Measures(x,y))", "exists x.(Watch(x) & UsedToMeasureSeconds(x))", "exists x.(Watch(x) & MeasureSeconds(x))", "exists x.(Watch(x) & MeasuresSeconds(x))"]}
{"id": "eqasc_validation_1053", "nl": "All times are measured in seconds.", "fol": "", "prediction": ["all x.(Time(x) -> MeasuredInSeconds(x))", "all x.(Time(x) -> MeasuringInSeconds(x))", "(AllTimesMeasuredInSeconds(x) -> MeasuredInSeconds(x))", "(all x.(Time(x) -> MeasuredInSeconds(x)))", "All times are measuredInSeconds(x)", "all x.(Time(x) -> MeasuredInSeconds(x))", "all x y.((Time(x) & Second(y)) -> MeasuredIn(x,y))", "all x.(Time(x) -> MeasurableInSeconds(x))", "all x.(TwoTen(x) -> MeasuredInSeconds(x))", "all x y.((Time(x) & Second(y)) -> MeasuredIn(x,y))", "all x.(Time(x) -> MeasuredInSeconds(x))", "all x.(Time(x) -> MeasuredInSeconds(x))", "all x.(Time(x) -> MeasuringSeconds(x))", "all x.(TenTime(x) -> MeasuredInSeconds(x))", "all x.(Time(x) -> MeasuredInSeconds(x))", "all x.(Time(x) -> MeasuredInSeconds(x))"]}
{"id": "eqasc_validation_1054", "nl": "a watch is used for measuring seconds", "fol": "", "prediction": ["all x.(Watch(x) -> MeasuresSeconds(x))", "all x y.((Watch(x) & Seconds(y)) -> Measures(x,y))", "all x.(Watch(x) -> UsedForMeasuringSeconds(x))", "all x y.((Watch(x) & MeasuresSeconds(x,y)) -> UsedFor(x,y))", "all x y z.((Watch(x) & Second(y) & Second(z)) -> Measures(x,y,z))", "all x y z.(Watch(x) -> (MeasuresSeconds(x,y) & MeasuresSeconds(y,z)))", "all x y z.((Watch(x) & Second(y) & Second(z) & Measures(x,y,z)) -> UsedFor(x,y,z))", "all x.(Watch(x) -> MeasuresSeconds(x))", "all x y.((Watch(x) & Seconds(y)) -> Measures(x,y))", "all x y.((Watch(x) & Watch(y)) -> MeasuresSeconds(x,y))", "all x.(Watch(x) -> UsedForMeasuringSeconds(x))", "all x y.((Watch(x) & MeasuresSeconds(x)) -> UsedFor(x,y))", "all x.(Watch(x) -> MeasuresSeconds(x))", "exists x.(Watch(x) & UsedForMeasuringSeconds(x))", "exists x.(Watch(x) & MeasuresSeconds(x))", "exists x.(Watch(x) & UsedForMeasuringSeconds(x))"]}
{"id": "eqasc_validation_1055", "nl": "Today's Rolex is tomorrow's cheap gold watch.", "fol": "", "prediction": ["all x.((Rolex(x) & Today(x)) -> TomorrowsLittleGoldWatch(x))", "all x.((Rolex(x) & TomorrowsLiquidGoldWatch(x)) -> TodaysWatch(x))", "all x.(Rolex(x) -> TomorrowsLittleGoldWatch(x))", "((Rolex(Rolex) & Today(Rolex)) -> CheapGoldWatch(Rolex))", "all x y.((Rolex(x) & Rolex(y)) -> TomorrowsLiquidGoldWatch(x,y))", "-(Rolex(r) & Rolex(r) & Rolex(r) & Rolex(r) & Rolex(r))", "all x y.((TodaysRolex(x) & TomorrowsLiquidGoldWatch(y)) -> Rolex(x))", "all x.((Rolex(x) & Today(x)) -> CheapGoldWatch(x))", "(LiquidGoldWatch(Rolex) & Rolex(Rolex))", "all x y.((Rolex(x) & Rolex(y)) -> (LiquidGoldWatch(x,y) & Tomorrow(y)))", "all x.((Rolex(x) & Rolex(x)) -> TomorrowsLittleGoldWatch(x))", "All x.(Rolex(x) -> TomorrowsLiquidGoldWatch(x))", "(LittleGoldWatch(Rolex) & Todays(Rolex))", "All x.(Rolex(x) -> (LittleGoldWatch(x) & Tomorrow(x)))", "(CheapGoldWatch(Rolex) & Today(Rolex))", "All x.((Rolex(x) & TomorrowsLiquidGoldWatch(x)) -> Rolex(x))"]}
{"id": "eqasc_validation_1056", "nl": "a Rolex is used for measuring time", "fol": "", "prediction": ["all x.(Rolex(x) -> UsedForMeasuringTime(x))", "all x y.((Rolex(x) & Time(y)) -> UsedForMeasuring(x,y))", "all x.(Rolex(x) -> UsedForMeasuringTime(x))", "all x y z.((Rolex(x) & Time(y) & Time(z)) -> UsedForMeasuring(x,y,z))", "all x y.((Rolex(x) & Time(y)) -> Measures(x,y))", "all x y.((Rolex(x) & Rolex(y)) -> UsedForMeasuringTime(x,y))", "all x.(Rolex(x) -> MeasuresTime(x))", "all x.((Rolex(x) & MeasuresTime(x)) -> UsedForMeasuringTime(x))", "all x y z.((Rolex(x) & Time(y) & Time(z)) -> Measures(x,y,z))", "all x.(Rolex(x) -> UsedForMeasuringTime(x))", "all x y.((Rolex(x) & Time(y)) -> MeasuresTime(x,y))", "all x y.((Rolex(x) & MeasuresTime(x,y)) -> UsedFor(x,y))", "all x.(Rolex(x) -> MeasuresTime(x))", "exists x.(Rolex(x) & MeasuresTime(x) & UsedFor(x,Time))", "all x.(Rolex(x) -> UsedForMeasuringTime(x))", "exists x.(Rolex(x) & MeasuresTime(x) & UsedFor(x,Time))"]}
{"id": "eqasc_validation_1057", "nl": "Time is measured using hours, seconds, and minutes.", "fol": "", "prediction": ["all x.(Time(x) -> (MeasuredUsing(x,hours) & MeasuredUsing(x,seconds) & MeasuredUsing(x,minutes)))", "all x y z.((Time(x) & Hour(y) & Second(z)) -> (MeasuredUsing(x,y,z) & MeasuredUsing(x,y,z) & MeasuredUsing(x,y) & MeasuredUsing(x,z) & MeasuredUsing(x,y) & MeasuredUsing(x,z)))", "all x.(Time(x) -> (MeasuredUsing(x,hours) | MeasuredUsing(x,seconds) | MeasuredUsing(x,minutes)))", "(MeasuredUsing(Time,Hours) & MeasuredUsing(Time,Seconds) & MeasuredUsing(Time,Minutes))", "all x.(Time(x) -> (Met(x,hours) | Measured(x,seconds) | Measured(x,minutes)))", "all x y.((Time(x) & Hour(y) & Second(y) & Minute(y)) -> Measured(x,y))", "all x.(Time(x) -> (MeasuredUsing(x,hours) & MeasuredUsing(x,seconds) & MeasuredUsing(x,minutes)))", "(Time(Time) & MeasurableUsing(Time,Hours) & MeasurableUsing(Time,Seconds) & MeasurableUsing(Time,Minutes))", "all x.(Time(x) -> (MeasuredWith(x,hours) & MeasuredWith(x,seconds) & MeasuredWith(x,minutes)))", "all x y z.((Time(x) & Hour(y) & Second(z) & Minute(z)) -> Measured(x,y,z))", "(MeasuresTimeUsingHoursSecondsMinutes(Time))", "all x.((Time(x) & Measured(x,hours) & Measured(x,seconds) & Measured(x,minutes)) -> Measured(x))", "(MeasuredUsing(Time,Hours) & MeasuredUsing(Time,Seconds) & MeasuredUsing(Time,Minutes))", "(MeasuredUsingHoursSecondsMinutes(Time))", "all x.(Time(x) -> (MeasuredWithHours(x) & MeasuredWithSeconds(x) & MeasuredWithMinutes(x)))", "all x y.((Time(x) & Hours(y) & Seconds(y) & Minutes(y)) -> Measured(x,y))"]}
{"id": "eqasc_validation_1058", "nl": "A watch measures hours, seconds, and minutes", "fol": "", "prediction": ["all x.(Watch(x) -> (MeasuresHours(x) & MeasuresSeconds(x) & MeasuresMinutes(x)))", "all x y z.((Watch(x) & Hours(y) & Seconds(z) & Minutes(z)) -> Measures(x,y,z))", "all x.(Watch(x) -> (MeasuresHours(x) & MeasuresSeconds(x) & MeasuresMinutes(x)))", "all x y.((Watch(x) & Hours(y) & Seconds(y) & Minutes(y)) -> Measures(x,y))", "all x y z.((Watch(x) & Hour(y) & Second(z)) -> MeasuresAndMeasures(x,y,z))", "all x.(Watch(x) -> (MeasuresHours(x) & MeasuresSeconds(x) & MeasuresMinutes(x)))", "all x.(Watch(x) -> (MeasuresHours(x) & MeasuresSeconds(x) & MeasuresMinutes(x)))", "all x.(Watch(x) -> MeasuresHoursSecondsMinutes(x))", "all x.(Watch(x) -> (MeasuresHours(x) & MeasuresSeconds(x) & MeasuresMinutes(x)))", "all x y z.((Watch(x) & Hour(y) & Second(z) & Minute(z)) -> Measures(x,y,z))", "all x y.((Watch(x) & Hours(y) & Seconds(y) & Minutes(y)) -> Measures(x,y))", "exists x.(Watch(x) & Measures(x,hours) & Measures(x,seconds) & Measures(x,minutes))", "all x.(Watch(x) -> (MeasuresHours(x) & MeasuresSeconds(x) & MeasuresMinutes(x)))", "all x.(Watch(x) -> MeasuresHoursSecondsMinutes(x))", "all x.(Watch(x) -> (MeasuresHours(x) & MeasuresSeconds(x) & MeasuresMinutes(x)))", "exists x.(Watch(x) & Measures(x,hours,seconds,minutes))"]}
{"id": "eqasc_validation_1059", "nl": "Time management is the science of how to use the hours in a day more efficiently.", "fol": "", "prediction": ["all x.(TimeManagement(x) -> (UsesHoursEfficiently(x) & UsesHoursEfficiently(x)))", "all x y.((TimeManagement(x) & Day(y)) -> UsesHoursEfficiently(x,y))", "all x y z.((TimeManagement(x) & Hours(y) & Day(z)) -> UsesEfficiently(x,y,z))", "all x y.((TimeManagement(x) & Hours(y)) -> UsesEfficiently(x,y))", "all x.(TimeManagement(x) -> (UsesHoursEfficiently(x) & UsesHoursEfficiently(x)))", "(TimeManagement(Time) -> UsesHoursEfficiently(Time,Day))", "all x y.((TimeManagement(x) & Day(y)) -> (UsesHoursEfficiently(x,y) & UsesHoursEfficiently(x,y)))", "all x.(TimeManagement(x) -> UsesHoursEfficiently(x))", "all x.(TimeManagement(x) -> (UsesHoursEfficiently(x) & UsesHoursEfficiently(x)))", "all x y.(TimeManagement(x) -> (ScientificScientificScientificUseOfHours(y,x) & UsesHoursEfficiently(x,y)))", "all x y z.((TimeManagement(x) & Hour(y) & Day(z)) -> UsesEfficiently(x,y,z))", "all x.(TimeManagement(x) -> (UsesHoursEfficiently(x) & UsesHoursEfficiently(x)))", "all x y.(TimeManagement(x) -> (ScientificScience(x) & UsesHoursEfficiently(x,y)))", "all x.(TimeManagement(x) -> (UsesHoursEfficiently(x) & MoreEfficiently(x)))", "all x.(TimeManagement(x) -> (ScientificWords(x) & UsesHoursEfficiently(x)))", "all x.(TimeManagement(x) -> UsesHoursEfficiently(x))"]}
{"id": "eqasc_validation_1060", "nl": "a watch is needed for scientific research", "fol": "", "prediction": ["all x.(Watch(x) -> NeededForScientificResearch(x))", "all x y.((Watch(x) & ScientificResearch(y)) -> NeededFor(x,y))", "all x.((Watch(x) & ScientificResearch(x)) -> NeededFor(x,ScientificResearch))", "all x y z.((Watch(x) & ScientificResearch(y) & ScientificResearch(z)) -> NeededFor(x,y,z))", "all x.(Watch(x) -> NeededForScientificResearch(x))", "all x y.((Watch(x) & ScientificResearch(y)) -> NeededFor(x,y))", "all x.((Watch(x) & ScientificResearch(x)) -> NeededFor(x,scientificResearch))", "all x y z.((Watch(x) & ScientificResearch(y) & ScientificResearch(z)) -> NeededFor(x,y,z))", "all x y.((Watch(x) & ScientificResearch(y)) -> NeededFor(x,y))", "exists x.(Watch(x) & ScientificResearch(x) & NeededFor(x,ScientificResearch))", "all x.(Watch(x) -> NeededForScientificResearch(x))", "all x y.((Watch(x) & ScientificResearch(y) & NeededFor(x,y)) -> NeededFor(x,y))", "all x y.((Watch(x) & ScientificResearch(y)) -> NeededFor(x,y))", "exists x.(Watch(x) & ScientificResearch(x) & NeededFor(x,ScientificResearch))", "all x.(Watch(x) -> NeededForScientificResearch(x))", "exists x.(Watch(x) & ScientificResearch(x))"]}
{"id": "eqasc_validation_1061", "nl": "Time is measured in minutes.", "fol": "", "prediction": ["all x.(Time(x) -> MeasuredInMinutes(x))", "all x.(Time(x) -> MeasuredInMinutes(x))", "(MeasuredInMinutes(Time))", "all x y.((Time(x) & Minute(y)) -> MeasuredIn(x,y))", "all x.(Time(x) -> MeasuredInMinutes(x))", "(MeasuresTimeInMinutes(Time))", "(MeasuredInMinutes(Time))", "(TimeMeasuredInMinutes(Time))", "all x y.((Time(x) & Minute(y)) -> MeasuredIn(x,y))", "all x.(Time(x) -> MeasurableInMinutes(x))", "all x.(Time(x) -> MeasuredInMinutes(x))", "all x y.((Time(x) & Minute(y)) -> MeasuredIn(x,y))", "all x.(Time(x) -> MeasuredInMinutes(x))", "all x.(Time(x) -> MeasuredInMinutes(x))", "all x.(Time(x) -> MeasuredInMinutes(x))", "All x.(Time(x) -> MeasuredInMinutes(x))"]}
{"id": "eqasc_validation_1062", "nl": "A watch is used for measuring minutes.", "fol": "", "prediction": ["all x.(Watch(x) -> MeasuresMinutes(x))", "all x.(Watch(x) -> UsedForMeasuringMinutes(x))", "all x y.((Watch(x) & Minute(y)) -> Measures(x,y))", "all x.(Watch(x) -> MeasuresMinutes(x))", "all x y.((Watch(x) & Minute(y)) -> UsedForMeasuring(x,y))", "all x.(Watch(x) -> UsedForMeasuringMinutes(x))", "all x.(Watch(x) -> MeasuresMinutes(x))", "all x y.((Watch(x) & Minute(y)) -> Measures(x,y))", "all x.(Watch(x) -> UsedForMeasuringMinutes(x))", "all x y.((Watch(x) & Minute(y) & Measures(x,y)) -> UsedFor(x,y))", "all x y.((Watch(x) & Minute(y)) -> UsedForMeasuring(x,y))", "all x.(Watch(x) -> MeasuresMinutes(x))", "exists x.(Watch(x) & MeasureMinutes(x))", "exists x.(Watch(x) & MeasuresMinutes(x))", "exists x.(Watch(x) & MeasureMinutes(x))", "exists x.(Watch(x) & MeasureMinutes(x))"]}
{"id": "eqasc_validation_1063", "nl": "Watches must keep track of seconds. ", "fol": "", "prediction": ["all x.(Watch(x) -> KeepsTrackOfSeconds(x))", "all x.(Watch(x) -> KeepsTrackOfSeconds(x))", "all x y.((Watch(x) & Second(y)) -> KeepsTrackOf(x,y))", "(all x.(Watch(x) -> KeepsTrackOfSeconds(x)))", "all x.(Watch(x) -> KeepsSeconds(x))", "all x.(Watch(x) -> KeepsTrackOfSeconds(x))", "all x y.((Watch(x) & Second(y)) -> KeepsTrackOf(x,y))", "all x.(Watch(x) -> TrackSeconds(x))", "all x.(Watch(x) -> MustKeepSeconds(x))", "all x.(Watches(x) -> KeepsTrackOfSeconds(x))", "all x y.((Watch(x) & Second(y)) -> KeepsTrackOf(x,y))", "all x y.((Watch(x) & Second(y)) -> KeepsTrack(x,y))", "all x.(Watch(x) -> KeepsTrackOfSeconds(x))", "all x.(Watch(x) -> TrackSeconds(x))", "all x.(Watch(x) -> MustKeepSeconds(x))", "all x.(Watch(x) -> KeepsTrackOfSeconds(x))"]}
{"id": "eqasc_validation_1064", "nl": "Probably the easiest way to see time is to watch the ticking hands of a clock.", "fol": "", "prediction": ["all x.((TickingHandsOfClock(x) & ProbablyEasiestToSeeTime(x)) -> Watch(x))", "all x y.((Clock(x) & TickingHands(y)) -> EasyToSeeTime(x,y))", "all x.(TickingHandsOfClock(x) -> EasyToSeeTime(x))", "(EasiestToSeeTime(x) -> WatchTickingHandsOfClock(x))", "(TickingHandsOfClock(x) -> ProbablyEasiestToSeeTime(x))", "all x.((TickingHands(x) & Clock(x)) -> EasyToSeeTime(x))", "all x y.((TickingHands(x) & Clock(y)) -> ProbablyEasiestToSeeTime(x,y))", "all x y.((Clock(x) & TickingHands(y)) -> EasySeenTime(x,y))", "all x y z.((TickingHands(x) & Clock(y) & Time(z)) -> EasyToSee(x,y,z))", "all x.(TickingHandsOfClock(x) -> ProbablyEasiestToSeeTime(x))", "all x.((Clock(x) & WatchTickingHands(x)) -> EasyToSeeTime(x))", "(EasiestToSeeTime(x) -> WatchTickingHandsOfClock(x))", "all x y.((Clock(x) & Hand(y)) -> (Ticking(y,x) | Watch(x,y)))", "exists x.(Clock(x) & WatchTickingHands(x))", "exists x.(TimeTickingHands(x) & Watch(x,y))", "all x y.((TickingHands(x) & Clock(y)) -> EasyToSeeTime(x,y))"]}
{"id": "eqasc_validation_1065", "nl": "ticking hands are used for measuring time.", "fol": "", "prediction": ["all x.(TickingHand(x) -> UsedForMeasuringTime(x))", "all x y.((TickingHand(x) & Time(y)) -> UsedForMeasuring(x,y))", "all x.(TickingHands(x) -> UsedForMeasuringTime(x))", "all x.(TickingHand(x) -> UsedForMeasuringTime(x))", "all x y.((TickingHand(x) & Time(y)) -> UsedForMeasuring(x,y))", "all x.(TickingHands(x) -> UsedForMeasuringTime(x))", "(MeasuresTimeWithTickingHands(x))", "(MeasuresTimeWithTickingHands(x) & UsedForMeasuringTime(x))", "all x y.((TickingHand(x) & Time(y)) -> UsedForMeasuring(x,y))", "all x.(TickingHand(x) -> UsedForMeasuringTime(x))", "all x y.((TickingHand(x) & Time(y)) -> UsedFor(x,y))", "all x.(TickingHands(x) -> UsedForMeasuringTime(x))", "all x.(TickingHand(x) -> MeasuresTime(x))", "all x y.((TickingHand(x) & Time(y)) -> Measures(x,y))", "all x.(TickingHands(x) -> MeasuresTime(x))", "all x.(TickingHand(x) -> UsedForMeasuringTime(x))"]}
{"id": "eqasc_validation_1066", "nl": "Time refers to the speed of movements.", "fol": "", "prediction": ["all x.(Time(x) -> SpeedOfMovements(x))", "all x y.((Time(x) & MovementSpeed(y)) -> SpeedOfMovements(x,y))", "(Time(Time) -> SpeedOfMovements(Time))", "all x.(Time(x) -> SpeedOfMovements(x))", "all x y.((Time(x) & Movement(y)) -> SpeedOfMovements(x,y))", "(Time) -> SpeedOfMovements(Time))", "(Time(Time) -> SpeedOfMovements(Time))", "all x.(Time(x) -> SpeedOfMovements(x))", "all x y.((Time(x) & MovementSpeed(y)) -> SpeedOfMovements(x,y))", "all x.(Time(x) -> SpeedOfMovements(x))", "all x.(Time(x) -> SpeedOfMovements(x))", "all x y.((Time(x) & Movement(y)) -> SpeedOfMovements(x,y))", "all x y.((Time(x) & MovementSpeed(y)) -> RefersTo(x,y))", "all x.(Time(x) -> SpeedOfMovements(x))", "All x.(Time(x) -> SpeedOfMovements(x))", "all x.(Time(x) -> TempoOfMovements(x))"]}
{"id": "eqasc_validation_1067", "nl": "A watch can be used  for measuring speed of movements.", "fol": "", "prediction": ["all x.(Watch(x) -> MeasuresSpeedOfMovements(x))", "all x.(Watch(x) -> MeasuresSpeedOfMovements(x))", "all x y.((Watch(x) & Movement(y)) -> MeasuresSpeed(x,y))", "all x y.((Watch(x) & MovementSpeed(y)) -> Measures(x,y))", "all x.(Watch(x) -> MeasuresSpeedOfMovements(x))", "all x.(Watch(x) -> MeasuresSpeedOfMovements(x))", "all x.(Watch(x) -> MeasuresSpeedOfMovements(x))", "all x.(Watch(x) -> UsedForMeasuringSpeedOfMovements(x))", "all x y.((Watch(x) & Movement(y)) -> MeasuresSpeed(x,y))", "all x.(Watch(x) -> MeasureSpeedOfMovements(x))", "all x.(Watch(x) -> MeasuresSpeedOfMovements(x))", "all x y.((Watch(x) & MovementSpeed(y)) -> Measures(x,y))", "exists x.(Watch(x) & MeasureSpeedOfMovements(x))", "all x y.((Watch(x) & Movement(y)) -> MeasuresSpeed(x,y))", "exists x.(Watch(x) & MeasuresSpeedOfMovements(x))", "exists x.(Watch(x) & MeasuresSpeedOfMovements(x))"]}
{"id": "eqasc_validation_1068", "nl": "Any surface that has not been sterilized is likely to be covered with bacteria.", "fol": "", "prediction": ["all x.((Surface(x) & -Sterilized(x)) -> CoveredWithBacteria(x))", "all x.((Surface(x) & -Sterilized(x)) -> CoveredWithBacteria(x))", "all x y.((Surface(x) & -Sterilized(x)) -> CoveredWithBacteria(y))", "all x.((Surface(x) & -Sterilized(x)) -> CoveredWithBacteria(x))", "all x.((Surface(x) & -Steering(x)) -> CoveredWithBacteria(x))", "all x y.((Surface(x) & -Sterilized(x)) -> CoveredWithBacteria(x))", "all x.((Surface(x) & -Sterilized(x)) -> CoveredWithBacteria(x))", "all x y.((Surface(x) & -Sterilized(x)) -> CoveredWithBacteria(y))", "all x.((Surface(x) & -St sterilized(x)) -> LikelyCoveredWithBacteria(x))", "all x.((Surface(x) & -Steriled(x)) -> CoveredWithBacteria(x))", "all x.((Surface(x) & -Sterilized(x)) -> CoveredWithBacteria(x))", "all x.((Surface(x) & -Sterilized(x)) -> CoveredWithBacteria(x))", "all x.((Surface(x) & NotSterilized(x)) -> CoveredWithBacteria(x))", "all x.((Surface(x) & NotSteering(x)) -> CoveredWithBacteria(x))", "all x.((Surface(x) & NotSterilized(x)) -> CoveredWithBacteria(x))", "all x.((Surface(x) & NotSterilized(x)) -> CoveredWithBacteria(x))"]}
{"id": "eqasc_validation_1069", "nl": "Bacteria and viruses are microbes.", "fol": "", "prediction": ["all x.((Bacteria(x) | Viral(x)) -> Microbe(x))", "all x y.((Bacteria(x) & Viral(y)) -> Microbe(x))", "all x.((Bacteria(x) | Viral(x)) -> Microbe(x))", "(Microbe(bacteria) & Microbe(virus))", "all x.(Microbe(x) -> (Bacteria(x) | Viral(x)))", "all x.((Bacteria(x) | Viral(x)) -> Microbe(x))", "all x.((Bacteria(x) | Viruses(x)) -> Microbe(x))", "all x y.((Bacteria(x) & Viral(y)) -> Microbe(x))", "(Microbe(bacteria) & Microbe(virus))", "all x y.((Bacteria(x) & Viral(y)) -> Microbe(x,y))", "all x.((Bacteria(x) | Viral(x)) -> Microbe(x))", "(Microbe(bacteria) & Microbe(virus))", "all x.(Microbe(x) -> (Bacteria(x) | Viral(x)))", "all x.(Microbe(x) -> (Bacteria(x) | Viral(x)))", "(Microbe(bacteria) & Microbe(virus))", "all x.((Bacteria(x) | Viral(x)) -> Microbe(x))"]}
{"id": "eqasc_validation_1070", "nl": "Any surface that has not been sterilized is likely to be covered with live microbes.", "fol": "", "prediction": ["all x.((Surface(x) & -Sterilized(x)) -> CoveredWithLiveMicrobes(x))", "all x.((Surface(x) & -Sterilized(x)) -> CoveredWithLiveMicrobes(x))", "all x y.((Surface(x) & -Sterilized(x)) -> CoveredWithLiveMicrobes(y))", "all x.((Surface(x) & -Sterilized(x)) -> CoveredWithLiveMicrobes(x))", "all x.((Surface(x) & -Steriled(x)) -> CoveredWithLiveMicrobes(x))", "all x y.((Surface(x) & -Sterilized(x)) -> CoveredWithLiveMicrobes(y))", "all x.((Surface(x) & -Sterilized(x)) -> LikelyCoveredWithLiveMicrobes(x))", "all x.((Surface(x) & -Sterilized(x)) -> CoveredWithLiveMicrobes(x))", "all x y.((Surface(x) & -Sterilized(x)) -> CoveredWithLiveMicrobes(x,y))", "all x.((Surface(x) & -Steering(x)) -> CoveredWithLiveMicrobes(x))", "all x.((Surface(x) & -Sterilized(x)) -> CoveredWithLiveMicrobes(x))", "all x.((Surface(x) & NotSterilized(x)) -> CoveredWithLiveMicrobes(x))", "all x.((Surface(x) & -St sterilized(x)) -> CoveredWithLiveMicrobes(x))", "all x.((Surface(x) & NotSteering(x)) -> CoveredWithLiveMicrobes(x))", "all x.((Surface(x) & NotSterilized(x)) -> CoveredWithLiveMicrobes(x))", "all x.((Surface(x) & NotSterilized(x)) -> CoveredWithLiveMicrobes(x))"]}
{"id": "eqasc_validation_1071", "nl": "Bacteria eat and bacteria digest foods.", "fol": "", "prediction": ["all x y.((Bacteria(x) & Bacteria(y)) -> (Eats(x) & DigestsFoods(y)))", "all x.(Bacteria(x) -> (Eats(x) & DigestsFoods(x)))", "(all x.(Bacteria(x) -> Eats(x)) & all y.(Bacteria(y) -> DigestsFoods(y)))", "all x y.((Bacteria(x) & Bacteria(y)) -> (Eats(x,y) & DigestsFoods(y,x)))", "(all x y.((Bacteria(x) & Food(y)) -> Eats(x,y)) & all z w.((Bacteria(z) & Food(w)) -> Digests(z,w)))", "all x y z.((Bacteria(x) & Food(y) & Bacteria(z)) -> (Eats(x,y) & Digests(z,y)))", "all x.(Bacteria(x) -> (Eats(x) & Digests(x)))", "(all x.(Bacteria(x) -> Eat(x)) & all y.(Bacteria(y) -> Digest(y)))", "(all x.(Bacteria(x) -> Eats(x)) & all y.(Bacteria(y) -> DigestsFoods(y)))", "all x y.((Bacteria(x) & Bacteria(y)) -> (Eat(x,y) & Digest(y,x)))", "exists x.(Bacteria(x) & Eats(x) & Bacteria(x) & DigestsFoods(x))", "all x y.((Bacteria(x) & Bacteria(y)) -> (Eats(x,y) & DigestsFoods(y,x)))", "(all x.(Bacteria(x) -> Eats(x)) & all y.(Bacteria(y) -> DigestsFoods(y)))", "all x.(Bacteria(x) -> (Eats(x) & DigestsFoods(x)))", "all x.(Bacteria(x) -> (Eats(x) & DigestsFoods(x)))", "(all x.(Bacteria(x) -> Eats(x)) & all y.(Bacteria(y) -> Digests(y)))"]}
{"id": "eqasc_validation_1072", "nl": "a surface not sterilized is likely to be covered with something that eats and digests foods", "fol": "", "prediction": ["all x.((Surface(x) & -Sterilized(x)) -> CoveredWith(x,eats,digests,foods))", "all x y.((Surface(x) & -Sterilized(x)) -> (EatsAndDigestsFoods(y) & CoveredWith(x,y)))", "all x y z.((Surface(x) & -Sterilized(x) & -Sterilized(y) & CoveredWith(x,z) & EatsAndDigestsFoods(z)) -> CoveredWith(x,z))", "all x.((Surface(x) & -Sterilized(x)) -> CoveredWith(x,eats,digests,foods))", "all x y.((Surface(x) & -Sterilized(x)) -> CoveredWith(x,y))", "all x.((Surface(x) & -Sterilized(x)) -> CoveredWith(x,eats,digests,foods))", "all x.((Surface(x) & -Sterilized(x)) -> CoveredWith(x))", "all x y.((Surface(x) & -Sterilized(x)) -> (EatsAndDigestsFoods(y) & CoveredWith(x,y)))", "all x.((Surface(x) & -St sterilized(x)) -> (EatsAndDigestsFoods(x) & CoveredWith(x)))", "all x y.((Surface(x) & -Sterilized(x)) -> (EatsAndDigestsFoods(y) & CoveredWith(x,y)))", "all x.((Surface(x) & NotSterilized(x)) -> CoveredWith(x,eats,digests,foods))", "all x.((Surface(x) & NotSteering(x)) -> CoveredWith(x,eats,digests,foods))", "all x.((Surface(x) & NotSterilized(x)) -> CoveredWith(x,eats,digests,foods))", "all x y.((Surface(x) & -St sterilized(x)) -> CoveredWith(x,y))", "all x.((Surface(x) & NotSterilized(x)) -> CoveredWith(x))", "all x.((Surface(x) & NotSteering(x)) -> CoveredWith(x))"]}
{"id": "eqasc_validation_1073", "nl": "Bacteria and viruses that make people sick can be passed on our hands.", "fol": "", "prediction": ["all x.((Bacteria(x) & Viruses(x) & MakesPeopleSick(x)) -> PassedOnHands(x))", "all x.((Bacteria(x) | Virals(x)) -> PassedOnHands(x))", "all x.((Bacteria(x) & Virals(x) & MakesPeopleSick(x)) -> PassedOnHands(x))", "all x y.((Bacteria(x) & Viral(y) & MakesPeopleSick(x)) -> PassedOnHands(x,y))", "all x y z.((Bacteria(x) & Viral(y) & Person(z) & MakesSick(z)) -> PassedOnHands(x,y,z))", "all x y.((Bacteria(x) & Viral(y) & MakesPeopleSick(x)) -> CanBePassedOnHands(x,y))", "all x y.((Bacteria(x) & Virus(y) & MakesPersonSick(x,y)) -> PassedOnHands(x,y))", "all x.(BacteriaAndViruses(x) & MakesPeopleSick(x) -> PassedOnHands(x))", "all x.((Bacteria(x) | Virals(x)) -> PassedOnHands(x))", "all x.((Bacteria(x) & Virals(x) & MakesPeopleSick(x)) -> PassedOnHands(x))", "all x y.((Bacteria(x) & Viruses(y) & MakesPeopleSick(x)) -> PassableOnHands(x,y))", "all x.((Bacteria(x) | Viruses(x) & MakesPeopleSick(x)) -> CanBePassedOnHands(x))", "all x y.((Bacteria(x) & Viral(y) & MakesPeopleSick(x,y)) -> PassedOnHands(x,y))", "(all x.((Bacteria(x) | Viral(x)) & MakesPersonSick(x)) -> PassableOnHands(x))", "all x.((Bacteria(x) | Virals(x) & MakesPeopleSick(x)) -> PassedOnHands(x))", "all x.((Bacteria(x) & Virals(x) & MakesPeopleSick(x)) -> PassableOnHands(x))"]}
{"id": "eqasc_validation_1074", "nl": "any surface that has not been sterilized can make people sick", "fol": "", "prediction": ["all x.((Surface(x) & -Sterilized(x)) -> CanMakePeopleSick(x))", "all x y.((Surface(x) & -Sterilized(x)) -> CanMakePeopleSick(x))", "all x.((Surface(x) & -Sterilized(x)) -> MakesPeopleSick(x))", "all x y z.((Surface(x) & -Sterilized(x) & -Sterilized(y) & -Sterilized(z)) -> CanMakePeopleSick(x))", "(all x.((Surface(x) & -Sterilized(x)) -> MakesPeopleSick(x))", "all x y.((Surface(x) & -Sterilized(x)) -> CanMakePeopleSick(y))", "all x.((Surface(x) & -Sterilized(x)) -> CanMakePeopleSick(x))", "all x.((Surface(x) & -Sterilized(x)) -> MakesPersonSick(x))", "all x y.((Surface(x) & -Sterilized(x)) -> MakesPeopleSick(x,y))", "all x.((Surface(x) & -Steering(x)) -> CanMakePeopleSick(x))", "all x.((Surface(x) & NotSterilized(x)) -> MakesPeopleSick(x))", "all x y.((Surface(x) & -Sterilized(x)) -> CanMakePeopleSick(y))", "all x.((Surface(x) & -Sterilized(x)) -> CanMakePeopleSick(x))", "all x y.((Surface(x) & -Sterilized(x)) -> MakesPersonSick(y))", "all x.((Surface(x) & NotSterilized(x)) -> CanMakePeopleSick(x))", "all x.((Surface(x) & NotSterilized(x)) -> MakesPeopleSick(x))"]}
{"id": "eqasc_validation_1075", "nl": "Bacteria are single cell microorganism.", "fol": "", "prediction": ["all x.(Bacteria(x) -> SingleCellMicroorganism(x))", "(SingleCellMicroorganism(bacteria)", "all x y.((Bacteria(x) & SingleCellMicroorganism(y)) -> Microorganism(x,y))", "all x.(Bacteria(x) -> SingleCellMicroorganism(x))", "all x y.((Bacteria(x) & Microorganism(y)) -> SingleCell(x,y))", "(SingleCellMicroorganism(bacteria)", "all x.(Bacteria(x) -> SingleCellMicroorganism(x))", "all x y.((Bacteria(x) & SingleCellMicroorganism(y)) -> Microorganism(x,y))", "all x.(Bacteria(x) -> SingleCellMicroorganism(x))", "exists x.(Bacterium(x) & SingleCellMicroorganism(x))", "all x.(Bacteria(x) -> SingleCellMicroorganism(x))", "all x.(Bacteria(x) -> SingleCellMicroorganism(x))", "all x.(Bacteria(x) -> SingleCellMicroorganism(x))", "all x.(Bacteria(x) -> SingleCell(x))", "all x.(Bacteria(x) -> SingleCellMicroorganism(x))", "all x.(Bacteria(x) -> SingleCellMicroorganism(x))"]}
{"id": "eqasc_validation_1076", "nl": "Any surface that has not been sterilized is likely to be covered with single cell microorganisms.", "fol": "", "prediction": ["all x.((Surface(x) & -Sterilized(x)) -> CoveredWithSingleCellMicroorganisms(x))", "all x.((Surface(x) & -Sterilized(x)) -> CoveredWithSingleCellMicroorganisms(x))", "all x y.((Surface(x) & -Sterilized(x)) -> CoveredWithSingleCellMicroorganisms(y))", "all x.((Surface(x) & -Steriled(x)) -> CoveredWithSingleCellMicroorganisms(x))", "all x.((Surface(x) & -Sterilized(x)) -> CoveredWithSingleCellMicroorganisms(x))", "all x y.((Surface(x) & -Sterilized(x)) -> CoveredWithSingleCellMicroorganisms(y))", "all x.((Surface(x) & -Steering(x)) -> CoveredWithSingleCellMicroorganisms(x))", "all x.((Surface(x) & -St sterilized(x)) -> CoveredWithSingleCellMicroorganisms(x))", "all x y.((Surface(x) & -Sterilized(x)) -> CoveredWithSingleCellMicroorganisms(y))", "all x.((Surface(x) & -St sterilized(x)) -> ProbablyCoveredWithSingleCellMicroorganisms(x))", "all x.((Surface(x) & NotSterilized(x)) -> CoveredWithSingleCellMicroorganisms(x))", "all x.((Surface(x) & NotSteering(x)) -> CoveredWithSingleCellMicroorganisms(x))", "all x.((Surface(x) & -Steriled(x)) -> CoveredWithSingleCellMicroorganisms(x))", "all x.((Surface(x) & -Sterilized(x)) -> CoveredWithSingleCellMicroorganisms(x))", "all x.((Surface(x) & NotSterilized(x)) -> CoveredWithSingleCellMicroorganisms(x))", "all x.((Surface(x) & NotSteering(x)) -> CoveredWithSingleCellMicroorganisms(x))"]}
{"id": "eqasc_validation_1077", "nl": "Surfaces can be steamed cleaned and sterilized.", "fol": "", "prediction": ["all x.(Surface(x) -> (SteamedClean(x) & Sterilized(x)))", "all x.(Surface(x) -> (SteamedCleared(x) & Sterilized(x)))", "(all x.(Surface(x) -> CanBeSteamedCleaned(x)) & CanBeSterilized(x))", "all x y.((Surface(x) & Surface(y)) -> (SteamedCleaning(x,y) & Sterilized(x,y)))", "all x.((Surface(x) & Scrubbed(x) & Sterilized(x)) -> CanBeSteamed(x))", "all x.(Surface(x) -> (SteamedClean(x) & Sterilized(x)))", "all x y.((Surface(x) & Surface(y)) -> (SteamedCleared(x,y) & Sterilized(x,y)))", "all x.(Surface(x) -> (Steamed(x) & Sterilized(x)))", "all x.(Surface(x) -> (SteamedCleared(x) & Sterilized(x)))", "all x y.((Surface(x) & Surface(y)) -> (SteamedCleaned(x,y) & Sterilized(x,y)))", "all x y.((Surface(x) & Steamed(y)) -> (Clean(y) & Sterilized(y)))", "all x.(Surface(x) -> (SteamedCleaned(x) & Sterilized(x)))", "all x.(Surface(x) -> (CanBeSteamed(x) & CanBeSterilized(x)))", "all x.(Surface(x) -> (Steamed(x) & Sterilized(x)))", "exists x.(Surface(x) & Scrubbed(x) & Sterilized(x))", "exists x.(Surface(x) & Scrubbed(x) & Sterilized(x))"]}
{"id": "eqasc_validation_1078", "nl": "Any surface that has not been cleaned is likely to be covered with bacteria.", "fol": "", "prediction": ["all x.((Surface(x) & -Cleaned(x)) -> CoveredWithBacteria(x))", "all x.((Surface(x) & -Cleared(x)) -> CoveredWithBacteria(x))", "all x y.((Surface(x) & -Cleaned(x)) -> CoveredWithBacteria(y))", "all x.((Surface(x) & -Cleaned(x)) -> CoveredWithBacteria(x))", "all x.((Surface(x) & -Cleaned(x)) -> CoveredWithBacteria(x))", "all x.((Surface(x) & -Cleared(x)) -> CoveredWithBacteria(x))", "all x y.((Surface(x) & -Cleared(x)) -> CoveredWithBacteria(y))", "all x y.((Surface(x) & -Cleaned(x)) -> CoveredWithBacteria(y))", "all x.((Surface(x) & -Cleaned(x)) -> CoveredWithBacteria(x))", "all x.((Surface(x) & -Cleaned(x)) -> CoveredWithBacteria(x))", "all x.((Surface(x) & -Cleared(x)) -> CoveredWithBacteria(x))", "all x.((Surface(x) & NotCleared(x)) -> CoveredWithBacteria(x))", "all x.((Surface(x) & -Cleaned(x)) -> CoveredWithBacteria(x))", "all x.((Surface(x) & NotCleaned(x)) -> CoveredWithBacteria(x))", "all x.((Surface(x) & NotCleaned(x)) -> LikelyCoveredWithBacteria(x))", "all x.((Surface(x) & NotCleared(x)) -> CoveredWithBacteria(x))"]}
{"id": "eqasc_validation_1079", "nl": "Raw meat is loaded with harmful bacteria.", "fol": "", "prediction": ["all x.(RawMeat(x) -> LoadedWithHarmfulBacteria(x))", "all x y.((RawMeat(x) & Bacteria(y)) -> LoadedWith(x,y))", "all x.(RawMeat(x) -> ContainsHarmfulBacteria(x))", "(LoadedWithHarmfulBacteria(rawMeat))", "all x.(RawMeat(x) -> LoadedWithHarmfulBacteria(x))", "all x y.((RawMeat(x) & Bacteria(y)) -> LoadedWith(x,y))", "all x.(RawMeat(x) -> ContainsHarmfulBacteria(x))", "all x.((RawMeat(x) & HasHarmfulBacteria(x)) -> LoadedWith(x,y))", "all x y.((RawMeat(x) & Bacteria(y)) -> LoadedWith(x,y))", "all x.(RawMeat(x) -> HasHarmfulBacteria(x))", "all x.(RawMeat(x) -> (LoadedWithHarmfulBacteria(x)))", "all x.(RawMeat(x) -> LoadedWithHarmfulBacteria(x))", "all x y.((RawMeat(x) & Bacteria(y)) -> LoadedWith(x,y))", "all x.(RawMeat(x) -> ContainsHarmfulBacteria(x))", "exists x.(RawMeat(x) & HasHarmfulBacteria(x))", "exists x.(RawMeat(x) & ContainsHarmfulBacteria(x))"]}
{"id": "eqasc_validation_1080", "nl": "Surfaces where raw meat has been should be sterilized.", "fol": "", "prediction": ["all x.((Surface(x) & RawMeat(x)) -> ShouldBeSterilized(x))", "all x y.((Surface(x) & RawMeat(y)) -> ShouldBeSterilized(x,y))", "all x.((Surface(x) & RawMeat(x)) -> ShouldBeSterilized(x))", "all x y.((Surface(x) & RawMeat(y) & HasBeen(x,y)) -> ShouldBeSterilized(x))", "all x.((Surface(x) & RawMeat(x)) -> Sterilized(x))", "(all x.(RawMeat(x) -> Sterilized(x)))", "all x y.((Surface(x) & RawMeat(y)) -> ShouldBeSterilized(x,y))", "all x y.((Surface(x) & RawMeat(y) & UsedFor(x,y)) -> ShouldBeSterilized(x))", "all x.((Surface(x) & RawMeat(x)) -> ShouldBeSterilized(x))", "all x.((Surface(x) & RawMeat(x)) -> Sterilized(x))", "all x y.((Surface(x) & RawMeat(y) & HasBeen(x,y)) -> ShouldBeSterilized(x))", "all x.((Surface(x) & HasRawMeat(x)) -> ShouldBeSterilized(x))", "all x.((Surface(x) & RawMeat(x)) -> ShouldBeSterilized(x))", "all x.((Surface(x) & RawMeat(x)) -> Sterilized(x))", "all x.((Surface(x) & RawMeat(x)) -> ShouldBeSterilized(x))", "all x.((Surface(x) & RawMeat(x)) -> Sterilized(x))"]}
{"id": "eqasc_validation_1081", "nl": "All countertop surfaces are natural stone.", "fol": "", "prediction": ["all x.(CookerSurface(x) -> NaturalStone(x))", "all x.(CookerSurface(x) -> NaturalStone(x))", "all x.(ConsiderboardSurface(x) -> NaturalStone(x))", "all x y.((CookerSurface(x) & NaturalStone(y)) -> NaturalStone(x))", "all x.(CookerSurface(x) -> NaturalStone(x))", "(all x.(CookerSurface(x) -> NaturalStone(x))", "all x.(ConsiderCookerSurface(x) -> NaturalStone(x))", "all x.(CountrySurface(x) -> NaturalStone(x))", "all x.(ConsiderboardSurface(x) -> NaturalStone(x))", "all x.(CookerSurface(x) -> NaturalStone(x))", "(all x.(CookerSurface(x) -> NaturalStone(x))", "all x.(CoveredSurface(x) -> NaturalStone(x))", "(all x.(CookerSurface(x) -> NaturalStone(x))", "all x.(CountertopSurface(x) -> NaturalStone(x))", "all x.(CookingSurface(x) -> NaturalStone(x))", "all x.(CoveredSurface(x) -> NaturalStone(x))"]}
{"id": "eqasc_validation_1082", "nl": "any countertop that has not been sterilized is likely to be covered with bacteria", "fol": "", "prediction": ["all x.((CoveredCoveredCovered(x) & -Sterilized(x)) -> CoveredWithBacteria(x))", "all x.((Cooker(x) & -Sterilized(x)) -> CoveredWithBacteria(x))", "all x.((CoveredCoveredCoveredWithBacteria(x) & -Sterilized(x)) -> CoveredWithBacteria(x))", "all x y.((CoveredCoveredCovered(x) & -Sterilized(x)) -> CoveredWithBacteria(x))", "all x y.((Cooker(x) & -Sterilized(x)) -> CoveredWithBacteria(x))", "all x.((Colorboard(x) & -Sterilized(x)) -> CoveredWithBacteria(x))", "all x.((Country(x) & -Sterilized(x)) -> CoveredWithBacteria(x))", "(all x.((Cooker(x) & -Sterilized(x)) -> CoveredWithBacteria(x))", "all x y.((Cooker(x) & Countertop(y) & -Sterilized(y)) -> CoveredWithBacteria(x,y))", "all x y.((Coloring(x) & -Sterilized(x)) -> CoveredWithBacteria(x))", "all x y.((CoveredCoveredCovered(x) & -Sterilized(x)) -> CoveredWithBacteria(y))", "all x.((Considerboard(x) & -Sterilized(x)) -> CoveredWithBacteria(x))", "all x.((CoveredCoveredCovered(x) & -Sterilized(x)) -> CoveredWithBacteria(x))", "all x.((Cooker(x) & -Sterilized(x)) -> CoveredWithBacteria(x))", "all x.((Colorboard(x) & -Sterilized(x)) -> CoveredWithBacteria(x))", "all x.((Countertop(x) & -St sterilized(x)) -> LikelyCoveredWithBacteria(x))"]}
{"id": "eqasc_validation_1083", "nl": "Every surface was scrubbed with bleach.", "fol": "", "prediction": ["all x.(Surface(x) -> ScrubbedWithBleach(x))", "-all x.(Surface(x) -> ScrubbedWithBleach(x))", "-exists x.(Surface(x) & ScrubbedWithBleach(x))", "all x.(Surface(x) -> ScrubbedWithBleach(x))", "every surface was scrubbed with bleach.", "(all x.(Surface(x) -> ScrubbedWithBleach(x))", "(SurfaceScrubbedWithBleach(x))", "all x y.((Surface(x) & Bleach(y)) -> ScrubbedWith(x,y))", "-all x.(Surface(x) -> ScrubbedWithBleach(x))", "all x.(Surface(x) -> ScrubbedWithBleach(x))", "all x.(Surface(x) -> ScrubbedWithBleath(x))", "all x.(Surface(x) -> ScrubbedWithBleach(x))", "all x.(Surface(x) -> ScrubbedWithBleak(x))", "all x.(Surface(x) -> ScrubbedWithBleath(x))", "all x.(Surface(x) -> ScrubbedWithBlood(x))", "all x.(Surface(x) -> ScrubbedWithBroth(x))"]}
{"id": "eqasc_validation_1084", "nl": "Any area that has not been scrubbed with bleach is likely to be covered with bacteria", "fol": "", "prediction": ["all x.((Area(x) & -ScrubbedWithBleach(x)) -> CoveredWithBacteria(x))", "all x.((Area(x) & -ScrubbedWithBleach(x)) -> CoveredWithBacteria(x))", "all x y.((Area(x) & -ScrubbedWithBleach(x)) -> CoveredWithBacteria(y))", "all x.((Area(x) & -ScrubbedWithBleath(x)) -> CoveredWithBacteria(x))", "all x y.((Area(x) & -ScrubbedWithBleach(x) & -ScrubbedWithBleach(x)) -> CoveredWithBacteria(y))", "all x.((Area(x) & -ScrubbedWithBleach(x)) -> CoveredWithBacteria(x))", "all x y.((Area(x) & -ScrubbedWithBleach(x)) -> CoveredWithBacteria(y))", "all x.((Area(x) & -ScrubbedWithB bleach(x)) -> CoveredWithBacteria(x))", "all x y.((Area(x) & -ScrubbedWithBleath(x)) -> CoveredWithBacteria(y))", "all x.((Area(x) & -ClearedWithBleach(x)) -> CoveredWithBacteria(x))", "all x.((Area(x) & -ClearedWithBleath(x)) -> CoveredWithBacteria(x))", "all x.((Area(x) & NotScrubbedWithBleach(x)) -> CoveredWithBacteria(x))", "all x.((Area(x) & -ScrubbedWithB bleach(x)) -> CoveredWithBacteria(x))", "all x.((Area(x) & NotScrubbedWithBleach(x)) -> CoveredWithBacteria(x))", "all x.((Area(x) & NotScrubbedWithBleach(x)) -> LikelyCoveredWithBacteria(x))", "all x.((Area(x) & NotScrubbedWithBleath(x)) -> LikelyCoveredWithBacteria(x))"]}
{"id": "eqasc_validation_1085", "nl": "Bacteria can cause infection.", "fol": "", "prediction": ["all x.(Bacteria(x) -> CanCauseInfection(x))", "all x.(Bacteria(x) -> CausesInfection(x))", "all x y.((Bacteria(x) & Infection(y)) -> CanCause(x,y))", "all x.(Bacteria(x) -> CanCauseInfection(x))", "all x y.((Bacteria(x) & Infection(y)) -> CanCause(x,y))", "all x.(Bacteria(x) -> CausesInfection(x))", "all x y.((Bacteria(x) & Infection(y)) -> Causes(x,y))", "all x.(Bacteria(x) -> CanCauseInfection(x))", "all x.(Bacteria(x) -> CausesInfection(x))", "all x y.((Bacteria(x) & Infection(y)) -> CanCause(x,y))", "all x y.((Bacteria(x) & Infection(y)) -> Causes(x,y))", "all x.(Bacteria(x) -> CanCauseInfection(x))", "exists x.(Bacteria(x) & CausesInfection(x))", "exists x.(Bacteria(x) & CausesInfection(x))", "exists x.(Bacteria(x) & CauseInfection(x))", "exists x.(Bacteria(x) & CanCauseInfection(x))"]}
{"id": "eqasc_validation_1086", "nl": "Any surface that has not been sterilized could result in infection.", "fol": "", "prediction": ["all x.((Surface(x) & -Sterilized(x)) -> CouldResultInInfection(x))", "all x.((Surface(x) & -Sterilized(x)) -> CouldResultInInfection(x))", "all x y.((Surface(x) & -Sterilized(x)) -> CouldResultInInfection(y))", "all x.((Surface(x) & -Sterilized(x)) -> CouldResultInInfection(x))", "all x y.((Surface(x) & -Sterilized(x)) -> CouldResultInInfection(y))", "all x.((Surface(x) & -Steering(x)) -> CouldResultInInfection(x))", "all x.((Surface(x) & -Sterilized(x)) -> CouldResultInInfection(x))", "all x.((Surface(x) & -Sterilized(x)) -> PossibleInfection(x))", "all x y.((Surface(x) & -Sterilized(x)) -> CouldResultInInfection(x,y))", "all x.((Surface(x) & -Sterilized(x)) -> CouldResultInInfection(x))", "all x.((Surface(x) & -Steriled(x)) -> CouldResultInInfection(x))", "all x.((Surface(x) & -Stormed(x)) -> CouldResultInInfection(x))", "all x.((Surface(x) & NotSterilized(x)) -> CouldResultInInfection(x))", "all x.((Surface(x) & NotSteering(x)) -> CouldResultInInfection(x))", "all x.((Surface(x) & NotSterilized(x)) -> CouldResultInInfection(x))", "all x.((Surface(x) & NotSterilized(x)) -> CouldResultInInfection(x))"]}
{"id": "eqasc_validation_1087", "nl": "Bacteria are the smallest of microscopic organisms.", "fol": "", "prediction": ["all x.(Bacteria(x) -> SmallestOfMicroscopicOrganisms(x))", "(SmallerOfMicroscopicOrganisms(bacteria) -> SmallestOfMicroscopicOrganisms(bacteria))", "(SmallestOfMicroscopicOrganisms(bacteria)", "all x y.((Bacteria(x) & MicroscopicalOrganism(y)) -> Smallest(x,y))", "all x.(Bacteria(x) -> SmallestOfMicroscopicOrganisms(x))", "all x.(Bacteria(x) -> SmallestOfMicroscopicalOrganisms(x))", "all x.(Bacteria(x) -> (SmallestOfMicroscopicOrganisms(x) & MicroscopicallyOrganism(x)))", "all x.(Bacteria(x) -> MicroscopicOrganism(x))", "all x y.((Bacteria(x) & Microscope(y)) -> Smallest(x,y))", "all x.(Bacteria(x) -> MicroscopicalOrganism(x))", "all x y.((Bacteria(x) & MicroscopicalOrganism(y)) -> Smallest(x,y))", "all x y.((Bacteria(x) & MicroscopicOrganism(y)) -> Smallest(x,y))", "all x.(Bacteria(x) -> (SmallestOfMicroscopicOrganisms(x) & MicroscopicallyOrganism(x)))", "all x.(Bacteria(x) -> MinimalMicroscopicOrganism(x))", "all x.(Bacteria(x) -> SmallestOfMicroscopicOrganisms(x))", "all x.(Bacteria(x) -> SlightestOfMicroscopicalOrganisms(x))"]}
{"id": "eqasc_validation_1088", "nl": "Any surface that has not been sterilized is likely to be covered with microscopic organisms", "fol": "", "prediction": ["all x.((Surface(x) & -Sterilized(x)) -> CoveredWithMicroscopicOrganisms(x))", "all x.((Surface(x) & -Sterilized(x)) -> CoveredWithMicroscopicOrganisms(x))", "all x y.((Surface(x) & -Sterilized(x)) -> CoveredWithMicroscopicOrganisms(y))", "(all x.((Surface(x) & -Sterilized(x)) -> CoveredWithMicroscopicOrganisms(x))", "all x.((Surface(x) & -Sterilized(x)) -> CoveredWithMicroscopicalOrganisms(x))", "all x.((Surface(x) & -Steering(x)) -> CoveredWithMicroscopicOrganisms(x))", "all x y.((Surface(x) & -Sterilized(x)) -> CoveredWithMicroscopicOrganisms(y))", "all x y.((Surface(x) & -Sterilized(x)) -> CoveredWithMicroscopicalOrganisms(y))", "all x.((Surface(x) & -Sterilized(x)) -> CoveredWithMicroscopicOrganisms(x))", "all x.((Surface(x) & -Sterilized(x)) -> CoveredWithMicroorganisms(x))", "all x.((Surface(x) & NotSterilized(x)) -> CoveredWithMicroscopicOrganisms(x))", "all x.((Surface(x) & -Sterilized(x)) -> LikelyCoveredWithMicroscopicOrganisms(x))", "all x.((Surface(x) & -Steriled(x)) -> CoveredWithMicroscopicOrganisms(x))", "all x y.((Surface(x) & -Sterilized(x)) -> CoveredWithMicroscopicOrganisms(y))", "all x.((Surface(x) & NotSterilized(x)) -> CoveredWithMicroscopicOrganisms(x))", "all x.((Surface(x) & NotSterilized(x)) -> CoveredWithMicroscopicalOrganisms(x))"]}
{"id": "eqasc_validation_1089", "nl": "Clean, sterilized contacts are less likely to breed bacteria.", "fol": "", "prediction": ["all x.((Clean(x) & Sterilized(x)) -> LessLikelyToBreedBacteria(x))", "all x y.((Clean(x) & Sterilized(x) & Contact(y)) -> LessLikelyToBreedBacteria(y))", "all x.((Clean(x) & SterilizedContacts(x)) -> LessLikelyToBreedBacteria(x))", "all x.((Clean(x) & Sterilized(x)) -> LessLikelyToBreedBacteria(x))", "all x y.((Clean(x) & SterilizedContact(y)) -> LessLikelyToBreedBacteria(x,y))", "(all x.((Clean(x) & Sterilized(x)) -> LessLikelyToBreedBacteria(x)))", "all x.((Contact(x) & Clean(x) & Sterilized(x)) -> LessLikelyToBreedBacteria(x))", "all x.((CleanSterilizedContacts(x) & -BreedBacteria(x)) -> LessLikelyToBreedBacteria(x))", "all x.(CleanSterilizedContacts(x) -> LessLikelyToBreedBacteria(x))", "all x y.((Clean(x) & Sterilized(x) & Contact(y)) -> LessLikelyToBreedBacteria(y))", "all x.((Clean(x) & SterilizedContacts(x)) -> LessLikelyToBreedBacteria(x))", "all x.((Clean(x) & Sterilized(x)) -> LessLikelyToBreedBacteria(x))", "(BreedBacteria(clean) & SterilizedContacts(s) & LessLikelyToBreedBacteria(s))", "all x y.((Clean(x) & SterilizedContact(y)) -> LessLikelyToBreedBacteria(x,y))", "all x y.((Clean(x) & Sterilized(y) & Contact(x)) -> -BreedsBacteria(x,y))", "all x.((Clean(x) & Sterilized(x)) -> LessLikelyToBreedBacteria(x))"]}
{"id": "eqasc_validation_1090", "nl": "sterilizing a surface reduces bacteria", "fol": "", "prediction": ["all x y.((SterilizingSurface(x) & Bacteria(y)) -> Reduces(x,y))", "all x y z.((SterilizingSurface(x) & Bacteria(y) & Bacteria(z)) -> Reduces(x,y,z))", "all x y z.((Sterilization(x) & Surface(y) & Bacteria(z)) -> Reduces(x,y,z))", "all x.((SterilizingSurface(x) & ReducesBacteria(x)) -> SterilizesSurface(x))", "all x y.((SterilizingSurface(x) & Bacteria(y)) -> Reduces(x,y))", "(all x y.((Surface(x) & Sterilizing(x,y)) -> ReducesBacteria(x,y)))", "all x y z.((SterilizingSurface(x) & Bacteria(y) & Bacteria(z) & Reduces(x,y,z)) -> Reduces(x,y,z))", "all x y.((Sterilization(x) & Surface(y)) -> ReducesBacteria(x,y))", "all x y.((SterilizingSurface(x) & Bacteria(y)) -> ReducesBacteria(x,y))", "all x.(SterilizingSurface(x) -> ReducesBacteria(x))", "all x.((SterilizingSurface(x) & ReducesBacteria(x)) -> ReducesBacteria(x))", "all x.((Sterilization(x) & Surface(x)) -> ReducesBacteria(x))", "all x y z.((Spoilage(x) & Surface(y) & Bacteria(z)) -> Reduces(x,y,z))", "all x y.((Spoilage(x) & Surface(y)) -> ReducesBacteria(x,y))", "all x.((SterilizingSurface(x) & ReducesBacteria(x)) -> SterilizesSurface(x))", "all x.(SterilizingSurface(x) -> ReducesBacteria(x))"]}
{"id": "eqasc_validation_1091", "nl": "Potent liquid sterilant kills AIDS and other viruses on surfaces.", "fol": "", "prediction": ["all x.((PotentLiquidSterilant(x) & KillsAIDSAndViruses(x)) -> KillsOnSurfaces(x))", "all x y.((PotentLiquidSterilant(x) & AIDS(y) & OtherViruses(z)) -> KillsOnSurfaces(x,y,z))", "all x.(PotentLiquidSterilant(x) -> KillsAIDSAndVirusesOnSurfaces(x))", "(PotentLiquidSterilant(PotentLiquidSterilant) killsAIDSAndVirusesOnSurfaces(PotentLiquidSterilant))", "(KillsAIDSAndVirusesOnSurfaces(potentLiquidSterilant))", "all x y.((PotentLiquidSterilant(x) & AIDS(y)) -> KillsOnSurfaces(x,y))", "all x.((PotentLiquidSterilant(x) & KillsAIDS(x) & KillsViruses(x)) -> OnSurfaces(x))", "all x y z.((PotentLiquidSterilant(x) & AIDS(y) & Viral(z)) -> KillsOnSurface(x,y,z))", "all x y z.((PotentLiquidSterilant(x) & AIDS(y) & OtherViruses(z)) -> KillsOnSurfaces(x,y,z))", "all x.(PotentLiquidSterilant(x) -> KillsAIDSAndVirusesOnSurfaces(x))", "all x y.((PotentLiquidSterilant(x) & AIDS(y) & OtherViruses(y)) -> KillsOnSurfaces(x,y))", "all x.((PotentLiquidSterilant(x) & KillsAIDSAndViruses(x)) -> KillsOnSurfaces(x))", "all x.((PotentLiquidSterilant(x) & KillsAIDS(x) & KillsOtherViruses(x)) -> KillsOnSurfaces(x))", "all x y.((PotentLiquidSterileant(x) & AIDS(y) & OtherViruses(z)) -> KillsOnSurfaces(x,y,z))", "all x.(PotentLiquidSterilant(x) -> KillsAIDSAndVirusesOnSurfaces(x))", "all x y.((PotentLiquidSterilant(x) & AIDS(y)) -> KillsOnSurfaces(x,y))"]}
{"id": "eqasc_validation_1092", "nl": "Use sterilant in order to sterilize a table.", "fol": "", "prediction": ["all x.((Table(x) & UsesSterilent(x)) -> Sterilizes(x))", "all x.((Sterilent(x) & Table(y)) -> Sterilizes(x,y))", "all x y.((Sterilent(x) & Table(y)) -> Sterilize(x,y))", "all x y z.((Sterilent(x) & Table(y) & Table(z)) -> Uses(x,y,z))", "(UsesSterilentInToSterilizeTable(x))", "all x y.((Sterilent(x) & Table(y)) -> Sterilize(x,y))", "(UseSterilant(x) & SterilizeTable(x))", "all x.(Sterilent(x) -> SterilizeTable(x))", "all x.((Sterilent(x) & Table(y)) -> Sterilizes(x,y))", "all x.((Table(x) & UsesSterilant(x)) -> Sterilizes(x))", "all x y.((Sterilent(x) & Table(y)) -> Uses(x,y))", "exists x.(Sterilent(x) & Table(x) & Uses(x,Sterilent))", "all x y.((Sterilent(x) & Table(y) & Uses(x,y)) -> Sterilizes(x,y))", "all x.((Sterilant(x) & Table(y)) -> Sterilizes(x,y))", "all x.(Sterilent(x) -> SterilizesTable(x))", "all x y.((Sterilant(x) & Table(y)) -> Sterilize(x,y))"]}
{"id": "eqasc_validation_1093", "nl": "fluoride decreases tooth decay", "fol": "", "prediction": ["all x.(Fluoride(x) -> DecreasesToothDecay(x))", "all x y.((Fluoride(x) & TeethDecay(y)) -> Decreases(x,y))", "all x.(Ffluoride(x) -> DecreasesToothDecay(x))", "all x y z.((Fluoride(x) & TeethDecay(y) & DentDecay(z)) -> Decreases(x,y,z))", "(DicreasesToothDecay(Fluoride) & Fluoride(Fluoride))", "all x.(Fluid(x) -> DecreasesToothDecay(x))", "all x y.((Fluid(x) & TeethDecay(y)) -> Decreases(x,y))", "(DisruptsToothDecay(fluoride) -> FluorideDisruptsToothDecay(fluoride))", "all x y.((Fluoride(x) & TeethDecay(y)) -> Decreases(x,y))", "(DecreasesToothDecay(fluoride) -> FluorideFluid(f))", "(DecreasesToothDecay(fluoride) -> FluorideFluid(fluoride,tooth))", "all x y z.((Fluoride(x) & TeethDecay(y) & DentDecay(z)) -> Decreases(x,y,z))", "all x.(Fluoride(x) -> DecreasesToothDecay(x))", "all x.(Ffluoride(x) -> DecreasesToothDecay(x))", "all x.(Fluoride(x) -> ReducesToothDecay(x))", "all x y.((Fluoride(x) & TeethDecay(y)) -> Decreases(x,y))"]}
{"id": "eqasc_validation_1094", "nl": "Tooth decay is a destruction of the tooth enamel.", "fol": "", "prediction": ["all x.(ToothDecay(x) -> (DestructionOfEnamel(x) & Teeth(x)))", "all x y.((ToothDecay(x) & TeethEmilene(y)) -> Destroys(x,y))", "all x.(ToothDisease(x) -> DestroysToothEmail(x))", "all x y z.((ToothDecay(x) & TeethEmilene(y) & DentEmilene(z)) -> Destroys(x,y,z))", "(DisasterOfToothEmail(th) & DestroysToothEmail(th,th,elastic))", "all x y.((ToothDecay(x) & TeethEmilen(y)) -> Destroys(x,y))", "all x.(ToothDecay(x) -> (DestructionOfEnamel(x) & Teeth(x)))", "all x.(TotalDecay(x) -> (DestructionOfToothEmail(x)))", "(DestructionOfToothEmail(tooth))", "all x.(ToothDisease(x) -> (DestructionOfEnamel(x) & Teeth(x)))", "all x y.((ToothDisease(x) & DentEmilen(y)) -> Destroys(x,y))", "all x y.((TotalDecay(x) & TeethEnamel(y)) -> Destroys(x,y))", "all x.(ToothDisease(x) -> (DestructionOfEyel(x) & TeethEmbellish(x)))", "all x.(TotalDecay(x) -> DisintegrationOfEnamel(x))", "all x.(TotalDecay(x) -> DestroysToothEmilene(x))", "all x.(ToothDisease(x) -> DisintegrationOfEnamel(x))"]}
{"id": "eqasc_validation_1095", "nl": "Fluoride decreases the destruction of the enamel.", "fol": "", "prediction": ["all x.(Fluid(x) -> DecreasesDestructionOfEmail(x))", "all x y.((Fluid(x) & Enamel(y)) -> DecreasesDestruction(x,y))", "all x.(Fluoride(x) -> DecreasesDestructionOfEmail(x))", "all x y.((Fluoride(x) & Enamel(y)) -> DecreasesDestruction(x,y))", "(DecreasesDestructionOfEmail(fluoride))", "(DiminishesDestructionOfEmail(fluoride))", "all x y z.((Fluid(x) & Enamel(y) & Enamel(z)) -> DecreasesDestruction(x,y,z))", "(DecreasesDestructionOfEnamel(fluoride))", "-DecreasesDestructionOfEmail(fluoride)", "all x y.((Fluid(x) & Enamel(y)) -> DecreasesDestruction(x,y))", "all x.(Fluid(x) -> DecreasesDestructionOfEnamel(x))", "all x.(Fluoride(x) -> DecreasesDestructionOfEnamel(x))", "all x.(Flavoride(x) -> DecreasesDestructionOfEmail(x))", "all x y.((Fluid(x) & Enamel(y)) -> DecreasesDestruction(x,y))", "all x.(Fluid(x) -> DecreasesDestructionOfEmail(x))", "all x.(Fluoride(x) -> DecreasesDestructionOfEmail(x))"]}
{"id": "eqasc_validation_1096", "nl": "Tooth decay can be very painful, and can make teeth unsightly.", "fol": "", "prediction": ["all x.(ToothDecay(x) -> (Poisonous(x) & MakesTeethUnsightly(x)))", "all x y.((ToothDecay(x) & Teeth(y)) -> (Poisoning(x) & Unsightly(y)))", "all x.(ToothDecay(x) -> ((Poisoning(x) & MakesTeethUnsightly(x))))", "((ToothDecay(x) & VeryPourishing(x)) -> Unsightly(x))", "all x.(ToothDecay(x) -> (Poor(x) & MakesTeethUnsightly(x)))", "all x.((ToothDecay(x) & VeryPourishing(x)) -> MakesTeethUnsightly(x))", "(all x.(ToothDisease(x) -> Painful(x)) & makesTeethUnsightly(x))", "all x y z.((ToothDecay(x) & Teeth(y) & Teeth(z)) -> (Poor(x,y) & Unsightly(y)))", "all x.(TouchthDecay(x) -> ((Poisoning(x) & MakesTeethUnsightly(x))))", "all x y.((ToothDecay(x) & Teeth(y)) -> (Poor(x) & Unsightly(y)))", "all x.(ToothCause(x) -> ((Poor(x) & MakesTeethUnsightly(x)) | (Poor(x) & MakesTeethUnsightly(x))))", "all x.(ToothDisease(x) -> (Poisonous(x) & MakesTeethUnsightly(x)))", "all x y.((ToothDecay(x) & Teeth(y)) -> (Poisonous(x) & MakesUnsightly(y)))", "all x.((ToothDecay(x) & VeryPourishing(x)) -> UnsightlyTeeth(x))", "(all x.(ToothDecay(x) -> VeryPoisonous(x)) & can MakeTeethUnsightly(x))", "exists x.(ToothCause(x) & Painful(x) & MakesTeethUnsightly(x))"]}
{"id": "eqasc_validation_1097", "nl": "fluoride decreases the potential for tooth pain", "fol": "", "prediction": ["all x.(Fluoride(x) -> DecreasesPotentialForToothPain(x))", "all x y.((Fluoride(x) & TeethPain(y)) -> DecreasesPotential(x,y))", "all x.(Ffluoride(x) -> DecreasesPotentialForToothPain(x))", "(DecreasesPotentialForToothPain(fluoride) & Fluoride(f) & ReducesPotentialForToothPain(fluoride))", "all x y z.((Fluoride(x) & TeethPain(y) & Potential(z)) -> Decreases(x,y,z))", "all x.(Fluoride(x) -> (DecreasesPotentialForToothPain(x) & TeethPain(x)))", "all x.(Fluid(x) -> DecreasesPotentialForToothPain(x))", "(-DicreasesPotentialForToothPain(fluoride) & Fluoride(fluoride))", "(DicreasesPotentialForToothPain(fluoride) & Fluoride(fluoride))", "all x y.((Fluid(x) & TeethPain(y)) -> DecreasesPotential(x,y))", "all x y.((Fluoride(x) & TeethPain(y)) -> DecreasesPotential(x,y))", "all x y z.((Fluoride(x) & TeethPain(y) & PotencialPotential(z)) -> Decreases(x,y,z))", "all x y.((Ffluoride(x) & TeethPain(y)) -> DecreasesPotential(x,y))", "all x.(Ffluoride(x) -> DecreasesPotentialForToothPain(x))", "all x.(Fluid(x) -> (DecreasesPotentialForToothPain(x) & TeethPain(x)))", "all x.(Fluoride(x) -> DecreasesPotentialForToothPain(x))"]}
{"id": "eqasc_validation_1098", "nl": "fluoride prevents destruction of tooth enamel.", "fol": "", "prediction": ["all x.(Fluoride(x) -> PreventsDestructionOfToothEmilen(x))", "all x y.((Fluoride(x) & TeethEmilen(y)) -> PreventsDestruction(x,y))", "all x.(Fluid(x) -> PreventsDestructionOfToothEmilen(x))", "(all x.(Fluoride(x) -> PreventsDestructionOfToothEmilen(x)))", "(PreventsDistructionOfToothEmilency(fluoride))", "all x y.((Fluoride(x) & TeethEmilene(y)) -> PreventsDestruction(x,y))", "all x.(Fluoride(x) -> PreventsDestructionOfToothEmilen(x))", "all x y z.((Fluoride(x) & TeethEmilen(y) & DentEmilen(z)) -> PreventsDestruction(x,y,z))", "all x y.((Fluid(x) & TeethEmil(y)) -> PreventsDestruction(x,y))", "all x y.((Fluoride(x) & TeethEnamel(y)) -> PreventsDestruction(x,y))", "(PreventsDestructionOfToothEmilency(fluoride))", "all x.(Fluoride(x) -> PreventsDistructionOfToothEnamel(x))", "all x.(Flavoride(x) -> PreventsDestructionOfToothEmilen(x))", "all x.(Fluid(x) -> PreventsDestructionOfToothEmilen(x))", "all x.(Ffluoride(x) -> PreventsDestructionOfToothEmilen(x))", "all x.(Fluoride(x) -> PreventsDestructionOfToothEmail(x))"]}
{"id": "eqasc_validation_1099", "nl": "Flouride prevents the destruction of tooth enamel. ", "fol": "", "prediction": ["all x.(Flouride(x) -> PreventsDestructionOfToothEmilen(x))", "all x y.((Flouride(x) & TeethEmil(y)) -> PreventsDestruction(x,y))", "Flouride PreventsDestructionOfToothEmilen(Flouride)", "all x.(Flouride(x) -> PreventsDestructionOfToothEmail(x))", "all x y z.((Flouride(x) & TeethEmil(y) & DentEmil(z)) -> PreventsDestruction(x,y,z))", "Flouride PreventsDestructionOfToothEmail(Flouride)", "Flouride preventsDestructionOfToothEmilen(Flouride)", "all x y.((Flouride(x) & TeethEmil(y)) -> PreventsDestruction(x,y))", "FlouridePreventsDisasterOfToothEmilene(Flouride)", "all x.(Flouride(x) -> PreventsDistructionOfToothEnamel(x))", "all x y.((Flouride(x) & TeethEnamel(y)) -> PreventsDestruction(x,y))", "all x.(Flouride(x) -> PreventsDestructionOfToothEmilen(x))", "all x.(Flouride(x) -> PreventsDisasterOfToothEmail(x))", "all x y.((Flouride(x) & TeethEmcel(y)) -> PreventsDestruction(x,y))", "All x.(Flouride(x) -> PreventsDisruptionOfToothEmail(x))", "all x.(Flouride(x) -> PreventsDestructionOfToothEnamel(x))"]}
{"id": "eqasc_validation_1100", "nl": "Cavities are also known as carries and tooth decay.", "fol": "", "prediction": ["all x.(Cavity(x) -> (Carries(x) | TeethDecay(x)))", "all x.(Cavities(x) -> (Carries(x) | TeethDecay(x)))", "(all x.(Cavity(x) -> Carries(x)) & all y.(Cavity(y) -> TeethDecay(y)))", "all x y.((Cavity(x) & Carries(y)) -> (ToothDecay(x) | Carries(y)))", "all x.(Cavity(x) -> (Carries(x) | TeethDecay(x)))", "(Cavity(c) & Carries(c) & TeethDecay(c))", "all x.(Cavity(x) -> (Carries(x) & TeethDecay(x)))", "all x y.((Cavity(x) & Carries(y)) -> TeethDecay(x))", "all x y.((Cavity(x) & Carries(x) & TeethDecay(y)) -> Cavities(x))", "all x.(Cavities(x) -> (Carries(x) & TeethDecay(x)))", "all x.(Cave(x) -> (Carries(x) | TeethDecay(x)))", "all x.(Cavity(x) -> (Carries(x) | TeethDecay(x)))", "exists x.(Cavities(x) & Carries(x) & TeethDecay(x))", "all x.(Cavity(x) -> (Carries(x) & TeethDecay(x)))", "all x.(Cavities(x) -> (Carries(x) & TeethDecay(x)))", "exists x.(Cavity(x) & Carries(x) & DentDecay(x))"]}
{"id": "eqasc_validation_1101", "nl": "Fluoride reduces cavity formation.", "fol": "", "prediction": ["all x.(Fluid(x) -> ReducesCavityFormation(x))", "all x.(Fluoride(x) -> ReducesCavityFormation(x))", "all x y.((Fluid(x) & CavityFormation(y)) -> Reduces(x,y))", "(ReducesCavityFormation(fluoride)", "all x.(Fluid(x) -> ReducesCavityFormation(x))", "all x y.((Fluoride(x) & CavityFormation(y)) -> Reduces(x,y))", "all x y.((Fluid(x) & CavityFormation(y)) -> Reduces(x,y))", "all x.(Fluoride(x) -> ReducesCavityFormation(x))", "(ReducesCavityFormation(fluoride)", "all x.(Fluid(x) -> ReducesCavityFormation(x))", "(ReducesCavityFormation(fluoride)", "all x y.((Fluoride(x) & CavityFormation(y)) -> Reduces(x,y))", "all x y.((Fluid(x) & CavityFormation(y)) -> Reduces(x,y))", "all x.(Fluoride(x) -> ReducesCavityFormation(x))", "all x.(Fluid(x) -> ReducesCavityFormation(x))", "All x.(Flooride(x) -> ReducesCavityFormation(x))"]}
{"id": "eqasc_validation_1102", "nl": "Fluorides Fluorides are the salts of hydrofluoric acid.", "fol": "", "prediction": ["all x.(Fluoride(x) -> (HydrofluoricAcid(x) & Salt(x)))", "all x.(Fluoride(x) -> (SaltOfHydrofluoricAcid(x) & HydrofluoricAcid(x)))", "(HydrofluoricAcid(fluoride) -> Salt(fluoride))", "all x y.((Fluoride(x) & HydrofluoricAcid(y)) -> Salt(x,y))", "(Salt(fluoride) & HydrofluoricAcid(fluoride))", "all x y.((Fluid(x) & Fluoride(y)) -> (HydrofluoricAcid(x) & Salt(y)))", "all x.(Flooride(x) -> (HydrofluoricAcid(x) & Salt(x)))", "all x.(Fluoride(x) -> (HydrofluoricAcid(x) & Salt(x)))", "(HydrofluoricAcid(fluoride) -> Salt(fluoride))", "all x y.((Fluoride(x) & HydrofluoricAcid(y)) -> Salt(x,y))", "all x.(Flushorides(x) -> (HydrofluoricAcidSalt(x) & Salt(x)))", "all x.(Flouride(x) -> (HydrofluoricAcidSalt(x) & SaltOf(x,HydrofluoricAcid)))", "all x y.((Flooride(x) & HydrofluoricAcid(y)) -> Salt(x,y))", "all x.(Fluoride(x) -> (Salt(x,hydrofluoricAcid) & HydrofluoricAcid(x)))", "(HydrofluoricAcidSalt(fluoride) & Salt(fluoride))", "(HydrofluoricAcid(fluoride) -> Salt(fluoride))"]}
{"id": "eqasc_validation_1103", "nl": "the salts of hydrofluoric acid decrease tooth decay", "fol": "", "prediction": ["all x y.((Salt(x) & HydrofluoricAcid(y)) -> DecreasesToothDecay(x,y))", "all x.((SaltsOfHydrofluoricAcid(x) & DecreaseToothDecay(x)) -> (HydrofluoricAcid(x) & DecreaseToothDecay(x)))", "all x y.((SaltsOfHydrofluoricAcid(x) & DentalDecay(y)) -> Decreases(x,y))", "(DecreasesToothDecay(HydrofluoricAcid) -> SaltsOfHydrofluoricAcid(HydrofluoricAcid))", "all x y.((HydrofluoricAcid(x) & Salts(y)) -> DecreasesToothDecay(x))", "all x.((HydrofluoricAcid(x) & Salts(x)) -> DecreasesToothDecay(x))", "all x.((SaltsOfHydroxyfluoricAcid(x) & DentalDecay(x)) -> Decreases(x,ToothDisease))", "all x y z.((Salt(x) & HydrofluoricAcid(y) & TeethDecay(z)) -> Decreases(x,y,z))", "all x y z.((SaltsOfHydrofluoricAcid(x) & DentalDecay(y) & DentalDecay(z)) -> Decreases(x,y,z))", "all x.(HydrofluoricAcid(x) -> (DecreasesToothDecay(x) & SaltsOfHydrofluoricAcid(x)))", "all x.((HydrofluoricAcid(x) & SaltsDecreaseToothDecay(x)) -> (DecreasesToothDecay(x) & DecreasesToothDecay(x)))", "all x.((SaltsOfHydrofluoricAcid(x) & DecreasesToothDecay(x)) -> (HydrofluoricAcid(x) & DecreasesToothDecay(x)))", "(DecreasesToothDecay(salts) & HydrofluoricAcid(salts))", "all x y.((HydrofluoricAcid(x) & Salts(y)) -> DecreasesToothDecay(x,y))", "all x y.((Salt(x) & HydrofluoricAcid(y)) -> DecreasesToothDecay(x,y))", "all x.((SaltsOfHydrocluoricAcid(x) & DecreaseToothDecay(x)) -> (HydrocluoricAcid(x) & DentalDecay(x)))"]}
{"id": "eqasc_validation_1104", "nl": "Virtually all water contains fluoride.", "fol": "", "prediction": ["all x.(Water(x) -> ContainsFluid(x))", "all x.(Water(x) -> ContainsFluidite(x))", "(PracticallyallWater(water) -> ContainsFluid(water))", "(PracticallyAllWaterContainsFluid(water) -> ContainsFluid(water))", "-all x.(Water(x) -> ContainsFluidite(x))", "all x y.((Water(x) & Fluoride(y)) -> Contains(x,y))", "ContainsFluoride(x)", "ContainsFluid(x)", "all x.(Water(x) -> ContainsFluid(x))", "all x.(Water(x) -> ContainsFluoride(x))", "(PracticallyallWater(water) -> ContainsFluidite(water,water))", "all x.(Water(x) -> ContainsFluidite(x))", "all x.(Water(x) -> ContainsFloridor(x))", "exists x.(Water(x) & Fluoride(x))", "all x.(Water(x) -> ContainsFluoride(x))", "all x.(Water(x) -> FluorideIn(x))"]}
{"id": "eqasc_validation_1105", "nl": "Water decreases tooth decay.", "fol": "", "prediction": ["all x.(Water(x) -> DecreasesToothDecay(x))", "(DecreasesToothDecay(Water))", "all x y.((Water(x) & Teeth(y)) -> Decreases(x,y))", "all x.(Water(x) -> DecreasesToothDecay(x))", "(DecreasesToothDecay(Water))", "all x y.((Water(x) & TeethDecline(y)) -> Decreases(x,y))", "all x.(Water(x) -> DecreasesToothDecay(x))", "all x.(Water(x) -> ReducesToothDecay(x))", "(DecreasesToothDecay(Water))", "(DecreasesToothDecay(Water,Tooth))", "all x.(Water(x) -> DecreasesToothDecay(x))", "all x y.((Water(x) & ToothDisease(y)) -> Decreases(x,y))", "all x y.((Water(x) & Teeth(y)) -> Decreases(x,y))", "all x.(Water(x) -> DecreasesToothDecay(x))", "All x.(Water(x) -> ReducesToothDecay(x))", "All x.(Water(x) -> DecreasesToothDecay(x))"]}
{"id": "eqasc_validation_1106", "nl": "Humans get most of their fluoride in drinking water.", "fol": "", "prediction": ["all x.(Human(x) -> GetsFluorideInDrinkingWater(x))", "all x y.((Human(x) & DrinkingWater(y)) -> GetsFluidoride(x,y))", "all x.(Human(x) -> (GetsFluorideInDrinkingWater(x)))", "(MostFluorideInDrinkingWater(Humans))", "all x.(Human(x) -> MostFluorideInDrinkingWater(x))", "(all x.(Human(x) -> GetsFluorideInDrinkingWater(x)))", "all x y.((Human(x) & DrinkingWater(y)) -> GetsFluoride(x,y))", "(all x.(Human(x) -> GetsFluidoride(x)))", "all x.(Human(x) -> (GetsFluiditeInDrinkingWater(x) & MostInDrinkingWater(x)))", "all x.(Human(x) -> GetsFluidorideInDrinkingWater(x))", "all x y.((Human(x) & DrinkingWater(y)) -> MostFluorideIn(x,y))", "(all x.(Human(x) -> GetsFluorideInDrinkingWater(x)))", "all x y.((Human(x) & DrinkingWater(y)) -> GetsFluidorideIn(x,y))", "all x.(Human(x) -> (GetsMostOfFluidorideInDrinkingWater(x)))", "all x.(Human(x) -> MostFluidy(x))", "all x.(Human(x) -> GetsFluorideInDrinkingWater(x))"]}
{"id": "eqasc_validation_1107", "nl": "Drinking water decreases tooth decay.", "fol": "", "prediction": ["all x.(DrinkingWater(x) -> DecreasesToothDecay(x))", "all x.((DrinkingWater(x) & DecreasesToothDecay(x)) -> DecreasesToothDecay(x))", "(DrinkingWaterDecreasesToothDecay(d))", "all x.(DrinkingWater(x) -> DecreasesToothDecay(x))", "all x y.((DrinkingWater(x) & TeethDecline(y)) -> Decreases(x,y))", "all x.((DrinkingWater(x) & DentalDecay(x)) -> Decreases(x,tooth))", "(DrinkingWaterDecreasesToothDecay(x))", "all x.((DrinkingWater(x) & DentDecay(x)) -> Decreases(x))", "all x y.((DrinkingWater(x) & TeethDecay(y)) -> Decreases(x,y))", "all x.(DrinkingWater(x) -> DecreasesToothDecay(x))", "all x.(DrinkingWater(x) -> ReducesToothDecay(x))", "all x y.((DrinkingWater(x) & TeethDisease(y)) -> Decreases(x,y))", "all x.((DrinkingWater(x) & DecreasesToothDecay(x)) -> DecreasesToothDecay(x))", "all x y.((DrinkingWater(x) & TeethDisease(y)) -> Decreases(x,y))", "all x.(DrinkingWater(x) -> DecreasesToothDecay(x))", "exists x.(DrinkingWater(x) & DecreasesToothDecay(x))"]}
{"id": "eqasc_validation_1108", "nl": "Differentiation is the process by which unspecialized cells become specialized.", "fol": "", "prediction": ["all x.(Differentiation(x) -> (UnspecializedCells(x) & SpecializedCells(x)))", "all x y.((Differentiation(x) & UnspecializedCell(y)) -> BecomesSpecialized(x,y))", "all x.(Differential(x) -> (UnspecializedCells(x) & SpecializedCells(x)))", "all x y z.((Differentiation(x) & UnspecializedCell(y) & SpecializedCell(z)) -> Becomes(x,y,z))", "(UnspecializedCellsBecomeSpecialized(Differentiation))", "(ProcessBy(UnspecializedCells) & SpecializedCells(UnspecializedCells))", "all x y.((Differentiation(x) & UnspecializedCell(y)) -> Specialized(y))", "all x.(Differentiation(x) -> (UnspecializedCells(x) & SpecializedCells(x)))", "all x y.((Differiation(x) & UnspecializedCell(y)) -> BecomesSpecialized(x,y))", "all x.(Differiation(x) -> (UnspecializedCells(x) & SpecializedCells(x)))", "all x y.((Differential(x) & UnspecializedCell(y)) -> Specialized(x,y))", "all x.(Differential(x) -> (UnspecializedCells(x) & SpecializedCells(x)))", "all x.((UnspecializedCell(x) & SpecializedCell(x)) -> Differentiation(x))", "(ProcessBy(unspecializedCells(x) & SpecializedCells(x))", "all x.(Differentiation(x) -> (UnspecializedCellsBecomeSpecialized(x)))", "all x y.((Discrimination(x) & UnspecializedCell(y)) -> BecomesSpecialized(x,y))"]}
{"id": "eqasc_validation_1109", "nl": "Differentiation is the specialization of a cell line.", "fol": "", "prediction": ["all x y.((CellLine(x) & CellLine(y)) -> Specialization(x,y))", "all x.(Differentiation(x) -> SpecializationOfCellLine(x))", "all x.(Differential(x) -> SpecializationOfCellLine(x))", "all x y z.((CellLine(x) & CellLine(y) & CellLine(z)) -> Specialization(x,y,z))", "(Specialization(Differentiation) -> CellLine(Differentiation))", "all x y.((CellLine(x) & CellLine(y)) -> Specialization(x,y))", "(Specialization(DifferentiallyCellLine) -> Specializes(DifferentiallyCellLine))", "all x y z.((CellLine(x) & CellLine(y) & CellLine(z)) -> Differentiation(x,y,z))", "all x y.((CellLine(x) & CellLine(y)) -> Differentiation(x,y))", "all x.(Differentiation(x) -> SpecializationOfCellLine(x))", "all x.(Differential(x) -> SpecializationOfCellLine(x))", "exists x.(CellLine(x) & Differentiation(x))", "all x.(Differiation(x) -> SpecializationOfCellLine(x))", "all x y.((CellLine(x) & CellLine(y)) -> Specialized(x,y))", "all x.(Differentiation(x) -> SpecializationOfCellLine(x))", "all x y.((CellLine(x) & CellLine(y)) -> Differentiation(x,y))"]}
{"id": "eqasc_validation_1110", "nl": "specializing occurs with differentiation ", "fol": "", "prediction": ["all x.(Specialization(x) -> Distinctive(x))", "all x y.((Specialization(x) & Differenciation(y)) -> OccursWith(x,y))", "all x.(Specialization(x) -> DifferentiationOccursWith(x,differentiation))", "all x y z.((Specialization(x) & Differenciation(y) & Specialization(z)) -> OccursWith(x,y,z))", "all x y.((Specialization(x) & Differenzation(y)) -> OccursWith(x,y))", "all x.(Specializing(x) -> Distinctive(x))", "(Specialization(s) & Differenciation(s) & OccursWith(s) & SpecializesWith(s))", "all x y.((Specializing(x) & Differenciation(y)) -> OccursWith(x,y))", "all x.(Specializing(x) -> DifferentiationOccursWith(x,Differenciation))", "all x y z.((Specialization(x) & Differenzation(y) & Specialization(z)) -> OccursWith(x,y,z))", "all x.(SpecializationOccursWithDifferenciation(x) -> Specializes(x))", "all x y.((Specialization(x) & Differenciation(y)) -> OccursWith(x,y))", "all x.(Specialization(x) -> Distinctive(x))", "all x y.((Specializing(x) & Differenciation(y)) -> OccursWith(x,y))", "exists x.(Specializing(x) & Differenciation(x))", "exists x.(Specialization(x) & Differenciation(x))"]}
{"id": "eqasc_validation_1111", "nl": "Neurons are specialized cells.", "fol": "", "prediction": ["all x.(Neuron(x) -> SpecializedCell(x))", "all x y.((Neuron(x) & SpecializedCell(y)) -> SpecializedCell(x,y))", "all x.(Neuron(x) -> SpecializedCell(x))", "all x y.((Neuron(x) & SpecializedCell(y)) -> Specialized(x,y))", "all x.(Neuron(x) -> SpecializedCell(x))", "(SpecializedCell(nonen) & SpecializedCell(nonen))", "all x y.((Neuron(x) & Cell(y) & Specialized(x,y)) -> Specialized(x,y))", "(SpecializedCell(nonen) & Specific(nonen,nonen))", "all x.(Nephron(x) -> SpecializedCell(x))", "all x.(Neuron(x) -> SpecializedCell(x))", "all x y.((Neuron(x) & SpecializedCell(y)) -> SpecializedCell(x,y))", "all x.(Neuron(x) -> SpecializedCell(x))", "all x.(Nephron(x) -> SpecializedCell(x))", "all x.(Neuron(x) -> SpecializedCell(x))", "all x.(Neuron(x) -> SpecializedCell(x))", "all x.(Neuron(x) -> SpecializedCell(x))"]}
{"id": "eqasc_validation_1112", "nl": "Differentiation is the process by which neurons are created", "fol": "", "prediction": ["all x y.((Differentiation(x) & Neuron(y)) -> CreatedBy(x,y))", "all x.(Differentiation(x) -> (ProcessBy(x,y) & CreatesNeurons(y)))", "all x y z.((Differentiation(x) & Neuron(y) & Neuron(z)) -> (CreatedBy(x,y,z) & CreatedBy(y,z)))", "all x y.((Differential(x) & Neuron(y)) -> CreatedBy(x,y))", "all x.(Differential(x) -> (ProcessBy(x,y) & NeuronsCreated(y)))", "(Differential(Differential) -> CreatesNeurons(Differential))", "(Differentiation) -> CreatesNeurons(Neurons))", "(ProcessBy(Differential(DifferentialNeurons) & CreatedBy(Neurons))", "all x.(Differenciation(x) -> (ProcessBy(x,y) & CreatesNeurons(y)))", "(Differenciation(Differenciation) -> CreatesNeurons(Differenciation))", "all x y z.((Differenciation(x) & Neuron(y) & Neuron(z)) -> CreatedBy(x,y,z))", "all x y.((Differentiation(x) & Neuron(y)) -> Creates(x,y))", "all x.(Differentiation(x) -> (ProcessBy(x,y) & NeuronsCreated(y)))", "all x y.((Differenciation(x) & Neuron(y)) -> CreatedBy(x,y))", "All x.(Differential(x) -> (ProcessBy(x,y) & NeuronsCreated(x)))", "All x.(Differenciation(x) -> (ProcessBy(x,y) & NeuronsCreated(y)))"]}
{"id": "eqasc_validation_1113", "nl": "How plant cells become specialized during development.", "fol": "", "prediction": ["all x.((PlantCell(x) & SpecializedDuringDevelopment(x)) -> SpecializedDuringDevelopment(x))", "all x y.((PlantCell(x) & Development(y)) -> Specialized(x,y))", "How PlantCellsBecomeSpecializedDuringDevelopment(x)", "-(PlantCells(x) & SpecializedDuringDevelopment(x))", "(SeemsSpecializedDuringDevelopment(plantCells) & DuringDevelopment(plantCells))", "all x.((PlantCell(x) & SpecializedDuringDevelopment(x)) -> Becomes(x,y))", "all x.(PlantCell(x) -> SpecializedDuringDevelopment(x))", "how plantcells becomespecializedDuringDevelopment(x)", "how plant cells become specialized during development.", "all x y.((PlantCell(x) & Development(y)) -> Specialized(x,y))", "-(PlantCells(x) & SpecializedDuringDevelopment(x))", "-BecomesSpecializedDuringDevelopment(plantCells)", "all x.((PlantCell(x) & SpecializedDuringDevelopment(x)) -> SpecializedDuringDevelopment(x))", "all x y.((PlantCell(x) & Development(y)) -> SpecializedDuring(x,y))", "all x.((PlantCell(x) & Development(x)) -> Specialized(x))", "all x y.((PlantCell(x) & Development(y)) -> Specialized(x,y))"]}
{"id": "eqasc_validation_1114", "nl": "Differentiation is how plants become specialized during development", "fol": "", "prediction": ["all x y.((Plant(x) & Development(y)) -> SpecializedDuring(x,y))", "all x.(Differentiation(x) -> (PlantsBecomeSpecializedDuringDevelopment(x) & DuringDevelopment(x)))", "all x y z.((Plant(x) & Development(y) & Development(z)) -> Specialized(x,y,z))", "all x.(Differentiation(x) -> (Plant(x) & SpecializedDuringDevelopment(x)))", "all x y.((Plant(x) & Development(y)) -> Specialized(x,y))", "(Differentiation(plant) -> SpecializedDuringDevelopment(plant))", "(Specialization(Plants) & DuringDevelopment(Plants))", "all x.(Differential(x) -> (Plant(x) & SpecializedDuringDevelopment(x)))", "all x.(Differenciation(x) -> (PlantsBecomeSpecializedDuringDevelopment(x) & DuringDevelopment(x)))", "all x y.((Plant(x) & Development(y) & SpecializedDuring(x,y)) -> Differentiation(x))", "all x y z.((Plant(x) & Development(y) & Development(z)) -> SpecializedDuring(x,y,z))", "all x.((Plant(x) & SpecializedDuringDevelopment(x)) -> Differentiation(x))", "all x.(Differiation(x) -> (PlantsBecomeSpecializedDuringDevelopment(x) & DuringDevelopment(x)))", "(Differential(Plants) & SpecializedDuringDevelopment(Plants))", "all x y z.((Plant(x) & Development(y) & Development(z)) -> Specialized(x,y,z))", "all x y.((Plant(x) & Development(y)) -> SpecializedInDevelopment(x,y))"]}
{"id": "eqasc_validation_1115", "nl": "All hair cells require Brn3.1 for differentiation.", "fol": "", "prediction": ["all x.(HairCell(x) -> RequiresBrn3.1(x))", "all x.(HairCell(x) -> RequiresBrn3.1ForDifference(x))", "all x y.((HairCell(x) & HairCell(y)) -> RequiresBrn3.1(x,y))", "all x.((HairCell(x) & RequiresBrn3.1(x)) -> Differentiation(x))", "all x.(HairCell(x) -> RequiresBrun3.1(x))", "(all x.(HairCell(x) -> RequiresBrun3.1(x)))", "all x y.((HairCell(x) & Brn3.1(y)) -> RequiresForDifference(x,y))", "(all x.(HairCell(x) -> RequiresBrn3.1(x)))", "all x.(HairCell(x) -> RequiresBrn3.1(x))", "all x.(HairCell(x) -> RequiresBran3.1ForDifference(x))", "(all x.(HairCell(x) -> RequiresBrun3.1(x)))", "all x.(HairCell(x) -> RequiresBrun3.1(x))", "all x.(HairCell(x) -> RequiresBrn3.1ForDifferentialization(x))", "all x.(HairCell(x) -> RequiresBran3.1ForDifferentiality(x))", "All x.(HairCell(x) -> RequiredBrn3.1ForDifference(x))", "all x.(HumanCell(x) -> RequiresBrun3.1(x))"]}
{"id": "eqasc_validation_1116", "nl": "Hair becomes specialized through differentiation", "fol": "", "prediction": ["all x.(Hair(x) -> SpecializedThroughDifference(x))", "all x y.((Hair(x) & Hair(y)) -> SpecializedThroughDifference(x,y))", "all x y z.((Hair(x) & Hair(y) & Differenzation(z)) -> Specialized(x,y,z))", "(HairSpecializedThroughDifference(Hair) -> SpecializedThroughDifference(Hair))", "all x.(Hair(x) -> SpecializedThroughDiscrimination(x))", "all x y.((Hair(x) & Hair(y)) -> SpecializedThroughDiscrimination(x,y))", "all x.(Hair(x) -> SpecializedThroughDifferenciation(x))", "all x.((Hair(x) & SpecializedThroughDifference(x)) -> HairBecomes(x))", "all x y z.((Hair(x) & Hair(y) & Differenzation(z)) -> SpecializedThroughDiscrimination(x,y,z))", "all x y.((Hair(x) & Hair(y)) -> SpecializedThroughDifferenciation(x,y))", "all x.(Hair(x) -> SpecializedByDiversification(x))", "all x.(HairSpecialized(x) -> HairDiscrimination(x))", "all x y.((Hair(x) & Differenzation(y)) -> SpecializedThrough(x,y))", "all x y.((Hair(x) & Hair(y)) -> SpecializedByDifference(x,y))", "all x.(Hair(x) -> SpecializedThroughDiscrimination(x))", "All x.(Hair(x) -> SpecializedByDiversification(x))"]}
{"id": "eqasc_validation_1117", "nl": "Cells are the basic unit of life .", "fol": "", "prediction": ["all x.(Cell(x) -> BasicUnitOfLife(x))", "all x y.((Cell(x) & Life(y)) -> BasicUnitOf(x,y))", "all x.(Cell(x) -> BasicUnitOfLife(x))", "(BasicUnitOfLife(cell) & UnitOfLife(cell))", "(BasicUnitOfLife(cell) & -BasicUnitOfLife(cell))", "all x y z.((Cell(x) & LifeUnit(y) & BasicUnit(z)) -> (BasicUnit(x,y) & BasicUnit(x,z)))", "(BasicUnitOfLife(cells) & -BasicUnitOfLife(cells))", "all x y.((Cell(x) & BasicUnitOfLife(y)) -> (Cell(x) & BasicUnitOfLife(x,y)))", "all x y.((Cell(x) & Life(y)) -> BasicUnit(x,y))", "all x.(Cell(x) -> BasicUnitOfLife(x))", "all x.(Cell(x) -> BasicUnitOfLife(x))", "all x y.((Cell(x) & Life(y)) -> BasicUnitOf(x,y))", "all x.(Cell(x) -> BasicUnitOfLife(x))", "all x.(Cell(x) -> BasicLifeUnit(x))", "all x.(Cell(x) -> BasicUnitOfLife(x))", "All x.(Cell(x) -> BasicUnitOfLife(x))"]}
{"id": "eqasc_validation_1118", "nl": "Differentiation is the process by which unspecialized basic units of life become specialized.", "fol": "", "prediction": ["all x.(Differentiation(x) -> (UnspecializedBasicUnitsOfLife(x) & BecomesSpecialized(x)))", "all x.(Differential(x) -> (UnspecializedBasicUnitsOfLife(x) & SpecializedUnitsOfLife(x)))", "all x y.((Differentiation(x) & UnspecializedBasicUnitsOfLife(y)) -> Specialized(x,y))", "(UnspecializedBasicUnitsOfLife(Differentiation) -> BecomesSpecialized(Differentiation))", "all x y z.((Differentiation(x) & UnspecializedBasicUnitsOfLife(y) & SpecializedUnitsOfLife(z)) -> (Becomes(x,y,z)))", "all x.(Differentiation(x) -> (UnspecializedBasicUnitsOfLife(x) & SpecializedUnitsOfLife(x)))", "all x.(Differenciation(x) -> (UnspecializedBasicUnitsOfLife(x) & SpecializedUnitsOfLife(x)))", "(ProcessBy(UnspecializedBasicUnitsOfLife) & Specialized(BasicUnitsOfLife))", "all x y.((Differentiation(x) & UnspecializedBasicUnitsOfLife(y)) -> Specialized(x,y))", "(UnspecializedBasicUnitsOfLife(differentiation) -> Specialized(differentiation))", "all x y.((Differential(x) & UnspecializedBasicUnit(y)) -> Specialized(x,y))", "all x.(Differiation(x) -> (UnspecializedBasicUnitsOfLife(x) & SpecializedUnitsOfLife(x)))", "all x.(Differential(x) -> (UnspecializedBasicUnitsOfLife(x) & SpecializedUnitsOfLife(x)))", "all x y.((Differiation(x) & UnspecializedBasicUnitsOfLife(y)) -> Specialized(x,y))", "all x.((Differentiation(x) & UnspecializedBasicUnitsOfLife(x)) -> Specialized(x))", "all x y.((Discrimination(x) & UnspecializedBasicUnit(y)) -> Specialized(x,y))"]}
{"id": "eqasc_validation_1119", "nl": "Nerve cells are large, complicated, highly specialized cells.", "fol": "", "prediction": ["all x.(NerveCell(x) -> (Large(x) & Complicated(x) & HighlySpecialized(x)))", "all x.(NerveCell(x) -> (Large(x) & Complicated(x) & HighlySpecialized(x)))", "(LargeCell(nerve) & Complicated(nerve) & HighlySpecialized(nerve))", "all x y.((NerveCell(x) & Large(y) & Complex(y) & HighlySpecialized(x)) -> HighlySpecialized(x))", "all x.(NerveCell(x) -> (LargeCell(x) & ComplicatedCell(x) & HighlySpecializedCell(x)))", "all x y.((NerveCell(x) & Cell(y)) -> (Large(x) & Complicated(x) & HighlySpecialized(x)))", "(LargeComplexed(nervousCell) & HighlySpecialized(nervousCell))", "all x.(NervineCell(x) -> (Large(x) & Complicated(x) & HighlySpecialized(x)))", "all x.(NerveCell(x) -> (Large(x) & Complicated(x) & HighlySpecialized(x)))", "all x.((NerveCell(x) & Large(x) & Complicated(x) & HighlySpecialized(x)) -> HighlySpecialized(x))", "all x.(NeureCell(x) -> (Large(x) & Complicated(x) & HighlySpecialized(x)))", "all x.(NerveCell(x) -> (Large(x) & Complex(x) & HighlySpecialized(x)))", "all x y.((NerveCell(x) & Large(y) & Complicated(y) & HighlySpecialized(y)) -> HighlySpecialized(x,y))", "all x y.((NerveCell(x) & Cell(y)) -> (Large(y) & Complicated(y) & HighlySpecialized(y)))", "all x.(NerveCell(x) -> (LargeCell(x) & ComplicatedCell(x) & HighlySpecializedCell(x)))", "all x.(NervineCell(x) -> (Large(x) & Complicated(x) & HighlySpecialized(x)))"]}
{"id": "eqasc_validation_1120", "nl": "Differentiation is essential to nerve cell development", "fol": "", "prediction": ["all x y.((Differentiation(x) & NerveCellDevelopment(y)) -> EssentialToNerveCellDevelopment(x,y))", "all x.(Differential(x) -> NerveCellDevelopment(x))", "all x y z.((Differenciation(x) & NerveCellDevelopment(y) & NerveCellDevelopment(z)) -> EssentialToDifferenciation(x,y,z))", "(EssentialToNerveCellDevelopment(Differensiation) -> Differentiation(Differensiation))", "all x y.((Differenciation(x) & NerveCellDevelopment(y)) -> EssentialToNerveCellDevelopment(x,y))", "all x.(Differentiation(x) -> EssentialToNerveCellDevelopment(x))", "all x y z.((Differentiation(x) & NerveCellDevelopment(y) & NerveCellDevelopment(z)) -> EssentialToDifferentiation(x,y,z))", "(EssentialToNervousCellDevelopment(differential) & NerveCellDevelopment(d))", "all x y.((Differential(x) & NerveCellDevelopment(y)) -> EssentialToDifferential(x,y))", "all x.(Differenciation(x) -> EssentialToNerveCellDevelopment(x))", "(EssentialToNerveCellDevelopment(Differensiation) & NerveCellDevelopment(Differensiation))", "all x.(DifferentialDifferential(x) -> EssentialToNerveCellDevelopment(x))", "All x.((Differential(x) & NerveCellDevelopment(x)) -> EssentialToDifferential(x))", "all x y.((Differiation(x) & NerveCellDevelopment(y)) -> EssentialToNerveCellDevelopment(x,y))", "all x.(Differentiation(x) -> EssentialToNervousCellDevelopment(x))", "All x.(Differensiation(x) -> EssentialToNervousCellDevelopment(x))"]}
{"id": "eqasc_validation_1121", "nl": "Neurones are highly specialized cells.", "fol": "", "prediction": ["all x.(Neuron(x) -> HighlySpecializedCell(x))", "all x y.((Neuron(x) & Cell(y)) -> HighlySpecialized(x,y))", "all x.(Neuron(x) -> HighlySpecializedCell(x))", "(HighlySpecializedCell(neuron)", "all x y.((Neuron(x) & Cell(y)) -> HighlySpecialized(x,y))", "all x.(Neurone(x) -> HighlySpecializedCell(x))", "all x.(Neoan(x) -> HighlySpecializedCell(x))", "all x.(Neuron(x) -> HighlySpecializedCell(x))", "all x y.((Neuron(x) & Cell(y)) -> HighlySpecialized(x))", "all x.(Neurone(x) -> HighlySpezializedCell(x))", "all x.(Neurone(x) -> HighlySpecializedCell(x))", "all x y.((Neurone(x) & Cell(y)) -> HighlySpecialized(x,y))", "all x.(Neuron(x) -> HighlySpecialized(x))", "all x.(Neuron(x) -> HighlySpecializedCell(x))", "all x.(Neuronin(x) -> HighlySpecializedCell(x))", "All x.(Novones(x) -> HighlySpecialized(x))"]}
{"id": "eqasc_validation_1122", "nl": "Differentiation is the process by which neurones are created", "fol": "", "prediction": ["all x y.((Differentiation(x) & Neuron(y)) -> CreatedBy(x,y))", "all x.(Differential(x) -> (NeuronenCreated(x) & Created(x)))", "all x y.((Differiation(x) & Neuron(y)) -> CreatedBy(x,y))", "all x y z.((Differenciation(x) & Neurone(y) & Neurone(z)) -> CreatedBy(x,y,z))", "(Differential(Differential) -> NeuroneCreation(Differential))", "all x.(Differentiation(x) -> (NeuronenCreated(x) & Created(x)))", "(ProcessBy(Neuronen(neuron) & CreatedBy(neuronen,neuronen)) -> Differentiation(neuronen))", "all x y.((Differential(x) & Neuron(y)) -> CreatedBy(x,y))", "all x.(Differenciation(x) -> (NeuronenCreated(x) & Created(x,neuron)))", "(Differentiation) -> NeuroneCreation(Differentiation))", "(Differenciation(Differenciation) -> CreatesNeurones(Differenciation))", "all x.(Differiation(x) -> (NeuronenCreated(x) & CreatedBy(x,Neuronen)))", "all x y z.((Differentiation(x) & Neurone(y) & Neurone(z)) -> CreatedBy(x,y,z))", "all x y.((Differenciation(x) & Neuron(y)) -> CreatedBy(x,y))", "All x.(Differential(x) -> NeuroneCreation(x))", "All x.(Differentiation(x) -> NeuroneCreation(x))"]}
{"id": "eqasc_validation_1123", "nl": "T helper cells differentiate to Memory cells and effector cells.", "fol": "", "prediction": ["all x.(THelperCell(x) -> (DifferentToMemoryCells(x) & DifferentToEffectorCells(x)))", "all x y.((THelperCell(x) & MemoryCell(y) & EffectorCell(y)) -> DifferentiatesTo(x,y))", "(DifferentToMemoryCells(THelperCells) & DifferentToEffectorCells(T))", "all x.(THelperCell(x) -> (DifferentTo(x,MemoryCells) & DifferentTo(x,EffectorCells)))", "(DistinctTo(THelperCells,MemoryCells) & DifferentTo(TeacherCells,EffectorCells))", "all x y z.((THelperCell(x) & MemoryCell(y) & EffectorCell(z)) -> DifferentiatesTo(x,y,z))", "(DistinctToMemoryCells(T) & DifferentToEffectorCells(T))", "all x.(THelperCell(x) -> (DistinctToMemoryCells(x) & DifferentToEffectorCells(x)))", "all x y.((THelperCell(x) & MemoryCell(y)) -> DifferentiatesTo(x,y))", "(DifferentToMemoryCells(T) & DifferentToEffectorCells(T))", "all x y.((THelperCell(x) & MemoryCell(y) & EffectorCell(z)) -> DifferentiatesTo(x,y,z))", "all x.(THelperCell(x) -> (DifferentToMemoryCells(x) & DifferentToEffectorCells(x)))", "all x.(THelperCell(x) -> (DistinctTo(x,MemoryCells) & DifferentTo(x,EffectorCells)))", "all x y.((THelperCell(x) & MemoryCell(y)) -> (DifferentTo(x,y) & DifferentTo(x,y) & DifferentTo(x,y)))", "all x.(ThelperCell(x) -> (DifferentToMemoryCells(x) | DifferentToEffectivorCells(x)))", "exists x.(THelperCell(x) & MemoryCell(x) & EffectorCell(x))"]}
{"id": "eqasc_validation_1124", "nl": "T helper cells are more specialized as Memory cells and effector cells", "fol": "", "prediction": ["all x.(THelperCell(x) -> (MemoryCell(x) | EffectorCell(x)))", "all x y.((THelperCell(x) & MemoryCell(y) & EffectorCell(y)) -> (MoreSpecialized(x,y) & MoreSpecialized(x,y)))", "all x y z.((THelperCell(x) & MemoryCell(y) & EffectorCell(z)) -> (MoreSpecializedAs(x,y) & MoreSpecializedAs(x,z)))", "(MemoryCells(t) | EffectorCells(t)) & MoreSpecializedAsMemoryCells(t))", "all x.(THelperCell(x) -> (MemoryCell(x) | EffectorCell(x)))", "all x.((THelperCell(x) & MemoryCell(x) & EffectorCell(x)) -> MoreSpecialized(x))", "all x y.((THelperCell(x) & MemoryCell(y) & EffectorCell(z)) -> (MoreSpecializedAs(x,y) & MoreSpecializedAs(x,z)))", "(MemoryCell(t) & EffectorCell(t))", "(all x.(THelperCell(x) -> (MemoryCell(x) | EffectorCell(x))))", "(MemoryCells(T) & EffectorCells(T))", "all x y z.((T HelperCell(x) & MemoryCell(y) & EffectorCell(z)) -> (MoreSpecialized(x,y) & MoreSpecialized(x,z)))", "all x.(THelperCell(x) -> (MemoryCell(x) | EffectorCell(x)))", "all x y.((T HelperCell(x) & MemoryCell(y) & EffectorCell(y)) -> (SpezializedAs(x,y) & SpecializedAs(x,y)))", "all x.(THelperCell(x) -> (MemoryCell(x) & EffectorCell(x)))", "(MemoryCells(TM) | EffectorCells(TM))", "all x.(THelperCell(x) -> (MemoryCell(x) | EffectorCell(x)))"]}
{"id": "eqasc_validation_1125", "nl": "Methods and processes are activities.", "fol": "", "prediction": ["all x.((Method(x) | Process(x)) -> Activities(x))", "all x y.((Method(x) & Process(y)) -> Activities(x))", "all x.((Method(x) | Process(x)) -> Activities(x))", "(Activity(methods) & Activity(processes))", "all x.((Method(x) & Process(x)) -> Activities(x))", "(Activities(Methods) & Activities(Processes))", "all x y.((Method(x) & Process(y)) -> Activities(x))", "(all x.(Method(x) -> Activities(x)) & all y.(Process(y) -> Activities(y)))", "(Activity(methods) & Activity(processes))", "all x.(Method(x) & Process(x)) -> Activities(x))", "all x.((Method(x) | Process(x)) -> Activity(x))", "all x y.((Method(x) & Process(y)) -> Activities(x,y))", "all x.((Method(x) & Process(x)) -> Activities(x))", "all x.(Method(x) & Process(x)) -> Activity(x))", "all x.(Method(x) & Process(x) -> Activities(x))", "all x.((Method(x) | Process(x)) -> Activities(x))"]}
{"id": "eqasc_validation_1126", "nl": "Differentiation is the method by which unspecialized cells become specialized.", "fol": "", "prediction": ["all x.(Differentiation(x) -> (UnspecializedCells(x) & SpecializedCells(x)))", "all x.(Differential(x) -> (UnspecializedCells(x) & SpecializedCells(x)))", "all x y.((Differentiation(x) & UnspecializedCell(y)) -> Specialized(y))", "all x y.((Differentiation(x) & UnspecializedCell(y)) -> BecomesSpecialized(x,y))", "(UnspecializedCells(Differentiation) & BecomesSpecialized(Differentiation))", "all x y z.((Differentiation(x) & UnspecializedCell(y) & SpecializedCell(z)) -> Becomes(x,y,z))", "(UnspecializedCell(x) & SpecializedCell(x))", "all x.(Differentiation(x) -> (UnspecializedCells(x) & SpecializedCells(x)))", "all x.(Differiation(x) -> (UnspecializedCells(x) & SpecializedCells(x)))", "all x y.((Differential(x) & UnspecializedCell(y)) -> Specialized(y))", "(UnspecializedCellsBecomeSpecialized(Differentiation))", "all x.(Differential(x) -> (UnspecializedCells(x) & SpecializedCells(x)))", "all x y.((Discrimination(x) & UnspecializedCell(y)) -> BecomesSpecialized(x,y))", "all x.(Differenciation(x) -> (UnspecializedCellsBecomeSpecialized(x)))", "all x.(Differentiation(x) -> (UnspecializedCellsBecomeSpecialized(x)))", "all x y.((UnspecializedCell(x) & SpecializedCell(y)) -> Differentiation(x,y))"]}
{"id": "eqasc_validation_1127", "nl": "Ancestors of hagfish are thought to have been the earliest vertebrates.", "fol": "", "prediction": ["all x.(HagfishAncestors(x) -> earliestVertebrate(x))", "(AncestorsOfHagfish(AncestorsOfHagfish(AncestorsOfHagfish) & KnownFor(AncestorsOfHagfish(AncestorsOfHagfish))", "all x.((AncestorsOfHagfish(x) & Vertebrate(x)) -> earliest(x))", "all x y.((Ancestors(x) & Hagfish(y)) -> EarlyVertebrate(x,y))", "(all x.(Hagfish(x) -> Ancestors(x)))", "all x.(HagfishAncestors(x) -> earliestVertebrate(x))", "all x.(Hagfish(x) -> EarlyVertebrate(x))", "all x y.((Ancestor(x) & Hagfish(y)) -> EarlyVertebrate(x,y))", "all x y.((Ancestors(x) & Hagfish(y)) -> ProbablyOfTheOldestVertebrate(x,y))", "all x.((AncestorsOfHagfish(x) & earliestVertebrate(x)) -> Early(x))", "all x.(Haggfish(x) -> (Ancestors(x,hagfish) & earliestVertebrate(x,hagfish)))", "all x.(AncestorsOfHagfish(x) -> earliestVertebrate(x))", "all x.(AncestorOfHagfish(x) -> EarlyVertebrate(x))", "(all x.(Hagfish(x) -> Ancestors(x)))", "all x y.((Acestors(x) & Hagfish(y)) -> ProbablyOfTheOfFaith(x,y))", "all x y.((AncestorsOfHagfish(x) & Vertebrate(y)) -> earliest(x,y))"]}
{"id": "eqasc_validation_1128", "nl": "Animals with backbones are called vertebrates.", "fol": "", "prediction": ["all x.((Animal(x) & HasBackbone(x)) -> Vertebrate(x))", "all x.((Animal(x) & HasBackbone(x)) -> Vertebrate(x))", "all x y.((Animal(x) & HasBackbone(x,y)) -> Vertebrate(x))", "all x.((Animal(x) & HasBackbone(x)) -> Vertebrate(x))", "all x y.((Animal(x) & HasBackbone(x)) -> Vertebrate(y))", "(all x.((Animal(x) & HasBackbone(x)) -> Vertebrates(x))", "all x.((Animal(x) & HasBackbone(x)) -> Vertebrates(x))", "all x.((Animal(x) & HasBackbones(x)) -> Vertebrate(x))", "all x.(Animal(x) & HasBackbone(x)) -> Vertebrate(x))", "all x.((Animal(x) & HasBackbone(x)) -> Vertebrate(x))", "all x.(Animal(x) & HasBackbone(x)) -> Vertebrate(x))", "all x.((Animal(x) & HasBackbones(x)) -> Vertebrate(x))", "all x.((Animal(x) & Backbone(x)) -> Vertebrate(x))", "all x.((Animal(x) & HasBackbone(x)) -> Vertebrates(x))", "all x.((Animal(x) & HasBackbones(x)) -> Vertebrate(x))", "all x.((Animal(x) & HasBackbone(x)) -> Vertebrate(x))"]}
{"id": "eqasc_validation_1129", "nl": "Ancestors of hagfish are thought to have been the earliest Animals with backbones", "fol": "", "prediction": ["all x y.((AncestorsOfHagfish(x) & Animal(y)) -> (Early(y) & HasBackbone(y)))", "all x.((AncestorsOfHagfish(x) & Animal(x) & HasBackbone(x)) -> earliest(x))", "all x.(AncestorsOfHagfish(x) -> (EarlyAnimal(x) & HasBackbone(x)))", "(AncestorOfHagfish(AncestorsOfHagfish) & EarlyAnimal(AncestorsOfHagfish) & HasBackbone(AncestorsOfHagfish))", "all x.(Hagfish(x) -> (AncestorsOfHagfish(x) & earliestAnimalWithBackbones(x)))", "all x y.((Ancestors(x) & Hagfish(y)) -> (EarlyAnimal(x,y) & HasBackbone(x)))", "(AncestorsOfHagfish(ancestors) & EarlyAnimal(ancestors) & HasBackbone(ancestors))", "all x y z.((AncestorsOfHagfish(x) & Animal(y) & Backbone(z)) -> Early(y,z))", "all x y.((Ancestor(x) & Hagfish(y)) -> (Animal(x) & HasBackbone(x,y)))", "(AncestorsOfHagfish(an) & EarlyAnimal(an) & HasBackbone(an))", "all x.((AncestorsOfHagfish(x) & Animal(y)) -> EarlyWithBackbones(x,y))", "all x.(AncestorOfHagfish(x) -> (Animal(x) & HasBackbone(x)))", "all x.(HagfishAncestors(x) -> (EarlyAnimal(x) & HasBackbone(x)))", "all x y z.((AncestorsOfHagfish(x) & Animal(y) & Backbone(z)) -> EarlyAnimal(x,y,z))", "all x.((AncestorOfHagfish(x) & Animal(x) & HasBackbone(x)) -> earliest(x))", "all x y.((AncestorsOfHagfish(x) & Animal(y)) -> (Early(x,y) & HasBackbone(y)))"]}
{"id": "eqasc_validation_1130", "nl": "Descendants of the early jawless fish are present today in the lampreys and hagfishes.", "fol": "", "prediction": ["all x.((Descendant(x) & EarlyJawlessFish(x)) -> (presentInLampreys(x) | PresentInHagfishes(x)))", "all x y.((JawlessFish(x) & Lamprey(y) & Hagfish(y)) -> Descendants(x,y))", "all x.((JawlessFish(x) & Lamprey(x) & Hagfish(x)) -> Descendants(x))", "all x y.((Descendant(x) & EarlyJawlessFish(x)) -> (PastInLampreys(x) | PresentInHagfishes(x)))", "all x y z.((Descendant(x) & JawlessFish(y) & Lamprey(z) & Hagfish(z)) -> PresentIn(x,y,z))", "all x.((Descendant(x) & JawlessFish(x)) -> (presentInLampreys(x) | PresentInHagfishes(x)))", "all x.(DescendantsOfJawlessFish(x) -> (presentInLampreys(x) | PresentInHagfishes(x)))", "(exists x.(Descendant(x) & JawlessFish(x)) & exists y.(Lamprey(y) | Hagfish(y))))", "all x y.((EarlyJawlessFish(x) & Lamprey(y) & Hagfish(y)) -> DescendantsToBeIn(x,y))", "all x.(JawlessFish(x) -> (DescendantsOf(x,y) & Early(y)) & PresentInLampreysAndHagfishes(x)))", "exists x.(Descendant(x) & EarlyJawlessFish(x) & PresentInLampreysAndHagfishes(x))", "(exists x.(DescendantOfJawlessFish(x) & EarlyJawlessFish(x)) & exists y.(Lamprey(y) | Hagfish(y))))", "(exists x.(Descendant(x) & JawlessFish(x) & Early(x)) & exists y.(Lamprey(y) | Hagfish(y))))", "exists x.(Descendant(x) & EarlyJawlessFish(x) & PresentInLampreysAndHagfishes(x))", "all x y z.((Descendant(x) & JawlessFish(y) & Lamprey(z) & Hagfish(z)) -> PresentToday(x,y,z))", "all x.((JawlessFish(x) & Lamprey(x) & Hagfish(x)) -> Descendants(x))"]}
{"id": "eqasc_validation_1131", "nl": "The earliest vertebrates were jawless fish", "fol": "", "prediction": ["all x.((Vertebrate(x) & JawlessFish(x)) -> Early(x))", "all x y.((Vertebrate(x) & JawlessFish(y)) -> Early(x,y))", "all x.((EarlyVertebrate(x) & JawlessFish(x)) -> JawlessFish(x))", "all x.((Vertebrate(x) & JawlessFish(x)) -> Early(x))", "(JawlessFish(earliestVertebrate) & JawlessFish(earliest Vertebrate))", "all x y z.((Vertebrate(x) & JawlessFish(y) & Fish(z) & Jawless(y)) -> Early(x,y,z))", "Fr\u00fchestVertebrate(x) -> (JawlessFish(x) | JawlessFish(x)))", "all x.(EarlyVertebrates(x) -> (JawlessFish(x) & JawlessFish(x)))", "(JawlessFish(earliest) & JawlessFish(earliest))", "all x y.((Vertebrate(x) & JawlessFish(y)) -> Early(x,y))", "All x y.((EarlyVertebrate(x) & JawlessFish(y)) -> JawlessFish(x,y))", "all x.((Vertebrate(x) & JawlessFish(x)) -> Early(x))", "all x.(Vertebrate(x) -> (JawlessFish(x) | JawlessFish(x)))", "all x y.((Vertebrate(x) & JawlessFish(y)) -> Early(x,y))", "all x.((Vertebrate(x) & JawlessFish(x)) -> Early(x))", "all x.((Vertebrates(x) & JawlessFish(x)) -> EarlyVertebrates(x))"]}
{"id": "eqasc_validation_1132", "nl": "Vertebrates are animals that have a backbone.", "fol": "", "prediction": ["all x.(Vertebrates(x) -> HasBackbone(x))", "all x.(Vertebrates(x) -> (Animal(x) & HasBackbone(x)))", "(Animal(vertebrates) & HasBackbone(vertebrates))", "(Animal(vertebrates) & HasBackbone(vertebrates))", "all x.(Vertebrates(x) -> HasBackbone(x))", "all x y.((Vertebrates(x) & Animal(y)) -> HasBackbone(x,y))", "all x y.((Animal(x) & Vertebrates(y)) -> HasBackbone(x,y))", "all x.(Vertebrat(x) -> (Animal(x) & HasBackbone(x)))", "all x.(Vertebrates(x) -> (Animal(x) & HasBackbone(x)))", "all x.((Animal(x) & HasBackbone(x)) -> Vertebrates(x))", "all x.(Vertebrate(x) -> (Animal(x) & HasBackbone(x)))", "all x.(Vertebrates(x) -> (Animal(x) & HasBackbone(x)))", "all x y.((Animal(x) & Vertebrates(x)) -> HasBackbone(x,y))", "all x.(Vertebrate(x) -> HasBackbone(x))", "all x.(Vertebrate(x) -> HasBackbone(x))", "all x.(Vertebrate(x) -> (Animal(x) & HasBackbone(x)))"]}
{"id": "eqasc_validation_1133", "nl": "ancestors of hagfish probably had backbones", "fol": "", "prediction": ["all x.((Ancient(x) & Hagfish(x)) -> HadBackbones(x))", "all x y.((Ancient(x) & Hagfish(y) & HadBackbones(x,y)) -> HadBackbones(x,y))", "all x.(HasBackbone(x) -> HadAncestorsOfHagfish(x))", "all x y z.((Ancient(x) & Hagfish(y) & Backbone(z)) -> HadBackbone(x,y,z))", "all x.((AncientsOfHagfish(x) & HadBackbones(x)) -> HadBackbones(x))", "all x y.((Ancient(x) & Hagfish(y)) -> HadBackbones(x,y))", "all x.((AncestorsOfHagfish(x) & HadBackbones(x)) -> HadBackbones(x))", "(AncientsOfHagfish(a) & HadBackbones(a))", "all x y z.((Ancient(x) & Hagfish(y) & Backbone(z)) -> HadBackbone(x,y,z))", "all x.(HasBackbone(x) -> HadAncestorsOfHagfish(x))", "(AncientsOfHagfish(h) & HadBackbones(h) & HadBackbones(h))", "all x y.((Ancient(x) & Hagfish(y) & HadBackbones(x,y)) -> HadBackbones(x))", "all x.(AncientsOfHagfish(x) -> HadBackbones(x))", "all x y.((AncestorsOfHagfish(x) & Hagfish(y)) -> HadBackbones(x,y))", "all x.((Ancients(x) & Hagfish(x)) -> HadBackbones(x))", "all x.(HasBackbone(x) -> AscendedFromHagfish(x))"]}
{"id": "eqasc_validation_1134", "nl": "Hagfish and sharks are both isosmotic with their saline environments.", "fol": "", "prediction": ["all x y.((Haggfish(x) & Shark(y)) -> (Isosmotic(x) & SalineEnvironment(y)))", "(IsosmoticWithSalineEnvironments(Haggfish) & IsosmoticWithSalineEnvironments(Haggfish) & IsosmoticWithSalineEnvironments(Haggfish) & IsosmoticWithSalineEnvironments(Haggfish))", "((Haggfish(h) & Shark(h)) -> IsosmoticWithSalineEnvironments(h) & IsosmoticWithSalineEnvironments(h)))", "all x.((Haggfish(x) & Shark(x)) -> (Isosmotic(x) & SalineEnvironment(x)))", "(SalineEnvironment(Haggfish) & SalineEnvironment(Shark))", "all x y.((Haggfish(x) & Shark(y)) -> (IsosmoticWithSalineEnvironments(x) & IsosmoticWithSalineEnvironments(y)))", "(Isosmotic(Haggfish) & Isosmotic(Shark(Shark))", "all x.((Haggfish(x) | Shark(x)) -> IsosmoticWithSalineEnvironments(x))", "all x.((Haggfish(x) | Shark(x)) -> (IsosmoticWithSalineEnvironments(x) & IsosmoticWithSalineEnvironments(x)))", "((Haggfish(Haggfish) & Shark(Shark)) -> Isosmotic(Haggfish,SalineEnvironment))", "exists x.(Haggfish(x) & Shark(x) & IsosmoticWithSalineEnvironments(x))", "(IsosmoticWithSalineEnvironments(Haggfish,Shark) & IsosmoticWithSalineEnvironments(Haggfish,Shark))", "(IsosmoticWithSalineEnvironments(Haggfish) & IsosmoticWithSalineEnvironments(Haggfish) & IsosmoticWithSalineEnvironments(Haggfish))", "all x y.((Haggfish(x) & Shark(y)) -> (IsosmoticWithSalineEnvironment(x,y) & IsosmoticWithSalineEnvironment(y,x)))", "all x y.((Hagfish(x) & Shark(y)) -> (Isosmotic(x) & SalineEnvironment(y)))", "all x y.((Hagfish(x) & Shark(y)) -> (Isosmotic(x) & SalineEnvironment(y)))"]}
{"id": "eqasc_validation_1135", "nl": "sharks are vertebrates", "fol": "", "prediction": ["all x.(Shark(x) -> (Vertebrate(x) & Vertebrate(x)))", "all x.(Shark(x) -> Vertebrate(x))", "all x y.((Shark(x) & Vertebrate(y)) -> Vertebrate(x,y))", "all x.(Shark(x) -> (Vertebrate(x) & Vertebrate(x)))", "all x.(Shark(x) -> (Vertebrate(x) & Vertebrate(x)))", "(Vertebrate(shark) & Vertebrates(shark))", "all x y.((Shark(x) & Vertebrate(y)) -> Vertebrate(x,y))", "(Vertebrate(Sharks) & Vertebrate(Sharks) & Vertebrate(Sharks))", "all x.(Shark(x) -> Vertebrate(x))", "all x.(Shark(x) -> (Vertebrate(x) & Vertebrate(x)))", "all x y.((Shark(x) & Vertebrate(y)) -> Vertebrate(x,y))", "all x.(Shark(x) -> (Vertebrate(x) & Vertebrate(x)))", "(Vertebrate(shark) & Vertebrates(sharks))", "all x.(Shark(x) -> Vertebrate(x))", "all x y.((Shark(x) & Vertebrate(y)) -> Vertebrate(x))", "all x.(Shark(x) -> (Vertebrate(x) & Vertebrate(x)))"]}
{"id": "eqasc_validation_1136", "nl": "Vertebrates are animals with backbones, such as horses.", "fol": "", "prediction": ["all x.(Vertebrates(x) -> (Animal(x) & HasBackbone(x) & Horse(x)))", "all x y.((Vertebrates(x) & Animal(y)) -> (HasBackbone(y) | Horse(y)))", "(all x.(Vertebrates(x) -> HasBackbones(x)))", "(Animal(vertebrates) & HasBackbone(vertebrates,horse))", "all x.(Vertebrates(x) -> (Animal(x) & HasBackbone(x) & Horse(x)))", "all x y z.((Vertebrates(x) & Animal(y) & Horse(z)) -> HasBackbone(x,y,z))", "all x y.((Vertebrates(x) & Horse(y)) -> HasBackbone(x,y))", "all x y.((Vertebrate(x) & Animal(y)) -> (HasBackbone(y) | Horse(y)))", "(all x.(Vertebrates(x) -> HasBackbones(x)))", "all x.(Vertebrates(x) -> (Animal(x) & HasBackbone(x) & Horse(x)))", "all x.(Vertebrates(x) -> (Animal(x) & HasBackbone(x) & Horse(x)))", "all x.(Vertebrates(x) -> (Animal(x) & HasBackbone(x)))", "all x.(Vertebrate(x) -> (Animal(x) & HasBackbone(x) & Horse(x)))", "all x y.((Animal(x) & Animal(y) & Horse(y)) -> HasBackbone(x,y))", "all x.(Vertebrates(x) -> (Animal(x) & HasBackbones(x) & Horse(x)))", "all x.(Vertebrate(x) -> (Animal(x) & HasBackbone(x) & Horse(x)))"]}
{"id": "eqasc_validation_1137", "nl": "Ancestors of hagfish are thought to have been the earliest animals with backbones", "fol": "", "prediction": ["all x.(Hagfish(x) -> (Ancestors(x,hagfish) & earliestAnimal(x) & HasBackbone(x)))", "all x.((AncestorsOfHagfish(x) & earliestAnimal(x) & HasBackbone(x)) -> EarlyAnimal(x))", "all x y.((AncestorsOfHagfish(x) & Animal(y)) -> (Early(y) & HasBackbone(y)))", "all x.(AncestorsOfHagfish(x) -> (EarlyAnimal(x) & HasBackbone(x)))", "all x y z.((AncestorsOfHagfish(x) & Hagfish(y) & Backbone(z)) -> (EarlyAnimal(x,y,z) & HasBackbone(x)))", "(AncestorsOfHagfish(an) & EarlyAnimal(an) & HasBackbone(an))", "(AncestorOfHagfish(AncestorsOfHagfish) & EarlyAnimalWithBackbones(AncestorsOfHagfish))", "all x y.((Ancestors(x) & Hagfish(y)) -> (EarlyAnimal(x,y) & HasBackbone(x,y)))", "(all x.(Hagfish(x) -> Ancestors(x)))", "all x.(HagfishAncestors(x) -> (EarlyAnimal(x) & HasBackbone(x)))", "all x.((AncestorsOfHagfish(x) & EarlyAnimalWithBackbones(x)) -> HagfishAnimal(x))", "all x y z.((AncestorsOfHagfish(x) & Animal(y) & Backbone(z) & OriginallyHasBackbone(x,y)) -> EarlyAnimal(x,z))", "all x y.((AncestorsOfHagfish(x) & Animal(y)) -> (Early(x,y) & HasBackbone(x)))", "all x.(AncestorOfHagfish(x) -> (EarlyAnimal(x) & HasBackbone(x)))", "all x y.((Ancestor(x) & Hagfish(y)) -> (EarlyAnimal(x,y) & HasBackbone(x,y)))", "all x.(HagfishAncestors(x) -> (EarlyAnimalsWithBackbones(x) & earliestAnimalsWithBackbones(x)))"]}
{"id": "eqasc_validation_1138", "nl": "Bone is found only in vertebrates .", "fol": "", "prediction": ["all x y.((Bone(x) & Vertebrate(y)) -> FoundIn(x,y))", "all x.(Bone(x) -> FoundInVertebrate(x))", "(all x.(Bone(x) -> Vertebrate(x)))", "(exists x y.(Vertebrate(x) & FoundIn(x,y)))", "all x y.((Bone(x) & Vertebrate(y)) -> FoundIn(x,y))", "all x.(Bone(x) -> FoundInVertebrate(x))", "(exists x y.(Vertebrate(x) & FoundIn(x,y)))", "(all x.(Bone(x) -> Vertebrate(x)))", "all x.(Bone(x) -> FoundIn(x,Vertebrate))", "all x y.((Bone(x) & Vertebrate(y)) -> FoundIn(x,y))", "exists x.(Bone(x) & Vertebrate(x))", "all x y.((Bone(x) & Vertebrate(y)) -> FoundIn(x,y))", "all x.(Bone(x) -> FoundInVertebrates(x))", "exists x.(Bone(x) & Vertebrate(x))", "all x y.((Bone(x) & Vertebrate(y)) -> FoundIn(x,y))", "All x.(Bone(x) -> FoundInVertebrate(x))"]}
{"id": "eqasc_validation_1139", "nl": "Ancestors of hagfish are thought to have the earliest bones.", "fol": "", "prediction": ["all x.(HasEarlyBones(x) -> AncestorsOfHagfish(x))", "all x y.((Ancestors(x) & Hagfish(y)) -> HasOldBones(x,y))", "(all x.(Hagfish(x) -> HasOldBones(x)))", "all x.((AncestorsOfHagfish(x) & HasOldBones(x)) -> HasOldBones(x))", "all x.(HasOldBones(x) -> AncestorsOfHagfish(x))", "all x.((AcestorsOfHagfish(x) & HasOldBones(x)) -> HasOldBones(x))", "all x.(HasAcestors(x,Hagfish) -> HasEarliestBones(x))", "(HasEarlyBones(ancestorsOfHagfish))", "all x y.((Ancestors(x) & Hagfish(y)) -> HasOldestBones(x,y))", "all x y.((Acestors(x) & Hagfish(y)) -> HasOldBones(x,y))", "all x y.((HagfishAncestors(x) & Hagfish(y)) -> HasOldestBones(x,y))", "all x.(HagfishAncestors(x) -> HasOldestBones(x))", "all x y.((Ancestors(x) & Hagfish(y)) -> HasEarliestBones(x,y))", "all x.(AcestorsOfHagfish(x) -> HasOldestBones(x))", "exists x.(AncestorsOfHagfish(x) & HasOfficialBones(x,Haggfish))", "all x.(HasEarliestBones(x) -> AncestorsOfHagfish(x))"]}
{"id": "eqasc_validation_1140", "nl": "Ancestors of hagfish are thought to have been the earliest creatures with bones", "fol": "", "prediction": ["all x.(AncestorsOfHagfish(x) -> (EarlyCreatureWithBones(x) & HasBones(x)))", "all x y.((AncestorsOfHagfish(x) & Hagfish(y)) -> (EarlyCreatureWithBones(x,y) & HasBones(x,y)))", "all x.((AncestorsOfHagfish(x) & earliestCreatureWithBones(x)) -> HagfishCreature(x))", "all x.(Hagfish(x) -> (Ancestors(x,hagfish) & earliestCreatureWithBones(x)))", "all x y z.((AncestorsOfHagfish(x) & Hagfish(y) & Bones(z)) -> EarlyCreatureWithBones(x,y,z))", "all x y.((Ancestors(x) & Hagfish(y)) -> (EarlyCreation(x,y) & HasBones(x)))", "(AncestorOfHagfish(AncestorsOfHagfish) & earliestCreatureWithBones(AncestorsOfHagfish))", "(AncestorsOfHagfish(an) & CreatureWithBones(an))", "(all x.(Hagfish(x) -> Ancestors(x)))", "all x.(AncestorOfHagfish(x) -> (EarlyCreamsWithBones(x) & earliestCreamsWithBones(x)))", "all x y.((Ancestor(x) & Hagfish(y)) -> (EarlyCreature(x,y) & HasBones(x)))", "all x.((AncestorsOfHagfish(x) & EarlyCreatureWithBones(x)) -> HagfishCreature(x))", "all x y z.((AncestorsOfHagfish(x) & Hagfish(y) & Bones(z)) -> (EarlyCreature(x,y,z) & HasBones(x)))", "all x.(HagfishAncestors(x) -> (EarlyCreamsWithBones(x) & HasBones(x)))", "all x.(AncestorsOfHagfish(x) -> EarlyCreatureWithBones(x))", "all x y.((AncestorsOfHagfish(x) & Hagfish(y)) -> EarlyCreatureWithBones(x,y))"]}
{"id": "eqasc_validation_1141", "nl": "Vertebrates are animals with backbones.", "fol": "", "prediction": ["all x.(Vertebrates(x) -> HasBackbone(x))", "(Animal(vertebrates) & HasBackbone(vertebrates))", "all x.(Vertebrates(x) -> HasBackbone(x))", "(Animal(vertebrates) & HasBackbone(vertebrates))", "all x y.((Vertebrat(x) & Animal(y)) -> HasBackbone(x,y))", "all x.(Vertebrates(x) -> HasBackbones(x))", "(Animal(vertebrates) & HasBackbone(vertebrates))", "all x.(Vertebrat(x) -> Animal(x))", "all x.(Vertebrate(x) -> (Animal(x) & HasBackbone(x)))", "all x y.((Animal(x) & Vertebrates(y)) -> HasBackbone(x,y))", "all x.(Vertebrates(x) -> HasBackbone(x))", "all x y.((Vertebrates(x) & Animal(y)) -> HasBackbone(x,y))", "all x.(Vertebrat(x) -> (Animal(x) & HasBackbone(x)))", "all x.(Vertebrate(x) -> HasBackbone(x))", "all x.(Vertebrate(x) -> (Animal(x) & HasBackbone(x)))", "all x.(Vertebrates(x) -> Animal(x))"]}
{"id": "eqasc_validation_1142", "nl": "Ancestors of hagfish are thought to have been the earliest animals with backbones.", "fol": "", "prediction": ["all x.(Hagfish(x) -> (Ancestors(x,Hagfish) & EarlyAnimal(x) & HasBackbone(x)))", "all x.(HagfishAncestors(x) -> EarlyAnimalWithBackbones(x))", "all x.((AncestorsOfHagfish(x) & HasBackbone(x)) -> earliestAnimalWithBackbone(x))", "all x y.((Ancestors(x) & Hagfish(y)) -> (EarlyAnimal(x,y) & HasBackbone(x)))", "(AncestorsOfHagfish(AncestorsOfHagfish) & EarlyAnimalWithBackbones(AncestorsOfHagfish))", "all x.(Ancestor(x) -> (HasBackbone(x) & earliestAnimal(x)))", "all x y.((AncestorsOfHagfish(x) & Animal(y)) -> EarlyWithBackbones(x,y))", "all x.(Hagfish(x) -> EarlyAnimalWithBackbones(x))", "(AncestorOfHagfish(a) & HasBackbone(b))", "all x y z.((Ancestors(x) & Hagfish(y) & Backbone(z)) -> EarlyAnimal(x,y,z))", "all x y.((Hagfish(x) & Ancestors(x,y)) -> EarlyAnimalWithBackbones(x))", "all x y.((Ancestor(x) & Hagfish(y)) -> (EarlyAnimal(x,y) & HasBackbone(x)))", "all x.(AncestorsOfHagfish(x) -> EarlyAnimalWithBackbones(x))", "(all x.(Hagfish(x) -> HasBackbones(x)))", "all x.((AncestorsOfHagfish(x) & HasBackbone(x)) -> earliestAnimal(x))", "all x.(HasBackbone(x) -> EarlyAnimal(x))"]}
{"id": "eqasc_validation_1143", "nl": "Property of ancestors and forefathers can only be legally inherited by sons.", "fol": "", "prediction": ["all x y.((Ancestors(x) & Forefathers(y)) -> CanLegallyEarnedBySons(x,y))", "all x.((Ancestors(x) | Forefathers(x)) -> CanLegallyEarnedBySons(x))", "all x y.((Ancient(x) & Forefather(y)) -> (LegallyEarnedBySons(x,y)))", "all x y z.((Ancient(x) & Forefather(y) & Son(z)) -> (LegallyEarnedBy(x,y,z) & -LegallyEarnedBy(x,y,z)))", "all x.((Property(x) & (Ancient(x) | Forefather(x))) -> CanBeLegallyEarnedBySons(x))", "all x.((Ancient(x) & Forefather(x)) -> CanLegallyHearn(x,sons))", "all x y z.((Ancestors(x) & Forefathers(y) & Sons(z)) -> (LegallyEarnedBy(x,y,z) & -LegallyEarnedBy(x,y,z)))", "(All x.(AncestorsAndForefathers(x) & Sons(x)) -> CanLegallyHaveProperty(x))", "(all x.(AncestorsAndForefathers(x) -> LegallyEarnedBySons(x)))", "all x y.((Ancestors(x) & Forefathers(y)) -> (LegallyEarnedBySons(x)))", "all x.((Property(x) & Ascended(x) & Forefather(x)) -> CanBeLegallyEarnedBySons(x))", "all x.((Ancestors(x) | Forefathers(x)) -> CanLegallyHaveProperty(x))", "all x.((Ancient(x) & Forefather(x)) -> (CanLegallyEarn(x,sons) & -CanLegallyEarn(x,sons)))", "(AllowedBySons(a) & AllowedByForefathers(a))", "all x y.((Ancient(x) & Forefather(y)) -> (LegallyEarnedBySons(x,y)))", "all x y.((Ancestors(x) & Forefathers(y)) -> CanLegallyHaveProperty(x,y))"]}
{"id": "eqasc_validation_1144", "nl": "The forefathers of hagfish are thought to have been the earliest vertebrates.", "fol": "", "prediction": ["all x.(HagfishForefather(x) -> earliestVertebrate(x))", "all x.((Forefather(x) & Hagfish(x)) -> earliestVertebrate(x))", "all x y.((Forefather(x) & Hagfish(y)) -> EarlyVertebrate(x,y))", "all x.(HagfishForefather(x) -> EarlyVertebrate(x))", "all x.((Forefather(x) & Hagfish(x)) -> EarlyVertebrate(x))", "(all x.(HagfishForefather(x) -> EarlyVertebrate(x)))", "all x.(Forefather(x) -> EarlyVertebrate(x))", "(EarlyVertebrate(forefathers(forefathers) & Hagfish(forefathers))", "all x y.((Forefather(x) & Hagfish(y)) -> earliestVertebrate(x,y))", "(earliestVertebrate(hagfish) -> Forefather(hagfish))", "all x y.((Freshfather(x) & Hagfish(y)) -> EarlyVertebrate(x,y))", "all x y.((Forefather(x) & Hagfish(y)) -> EarlyVertebrate(x,y))", "all x.(HagfishForefather(x) -> earliestVertebrate(x))", "all x.((Forefather(x) & Hagfish(x)) -> EarlyVertebrate(x))", "all x y.((Forefather(x) & Hagfish(y) & Forefather(x,y)) -> EarlyVertebrate(x))", "all x.(Forefather(x) -> EarlyVertebrate(x))"]}
{"id": "eqasc_validation_1145", "nl": "Hagfishes are a type of jawless fish which are the only parasitic vertebrates.", "fol": "", "prediction": ["all x.(Haggfish(x) -> (JawlessFish(x) & ParasiticVertebrate(x)))", "all x y.((Haggfish(x) & Jawless(y)) -> (ParasiteVertebrate(x) & Only(y)))", "all x.(Haggfish(x) -> (JawlessFish(x) & ParasiticVertebrate(x)))", "all x y z.(Haggfish(x) -> (JawlessFish(y) & ParasiticVertebrate(z) & -JawlessFish(y) & ParasiticVertebrate(z)))", "all x.(Haggfish(x) -> (JawlessFish(x) & ParasiticVertebrate(x)))", "(JawlessFish(h) & ParasiticVertebrate(h))", "all x y.((Haggfish(x) & JawlessFish(y)) -> (ParasiticVertebrate(x) & Only(y)))", "all x.(Haggfish(x) -> (JawlessFish(x) & ParasiticVertebrate(x)))", "all x y.((Haggfish(x) & Jawless(y)) -> (ParasiteVertebrate(x) & Parasite(y)))", "(JawlessFish(h) & ParasiticVertebrate(h))", "all x.(Hagfish(x) -> (JawlessFish(x) & ParasiticVertebrate(x)))", "all x.(Haffish(x) -> (Jawless(x) & Parasitic(x)))", "all x.(Hagfish(x) -> (JawlessFish(x) & ParasiticVertebrate(x)))", "all x y.((Haggfish(x) & Jawless(y)) -> ParasiticVertebrate(x))", "all x.(Haffish(x) -> (JawlessFish(x) & ParasiticVertebrate(x)))", "all x.(Haggfish(x) -> (JawlessFish(x) & ParasiticVertebrate(x)))"]}
{"id": "eqasc_validation_1146", "nl": "Ancestors of a type of jawless fish which is parasitic are thought to have been the earliest vertebrates", "fol": "", "prediction": ["all x y.((Acestors(x) & JawlessFish(y) & Parasitic(y)) -> EarlyVertebrate(x))", "all x y z.((Acestors(x) & JawlessFish(y) & Parasitic(z) & JawlessFish(y) & Parasitic(z)) -> EarlyVertebrate(x))", "all x.((Acestors(x) & JawlessFish(x) & Parasitic(x)) -> EarlyVertebrate(x))", "(all x.(JawlessFish(x) & Parasitic(x)) -> EarlyVertebrate(x))", "all x.((AcestorsOfJawlessFish(x) & Parasitic(x)) -> EarlyVertebrate(x))", "all x y.((Ancestor(x) & JawlessFish(y) & Parasitic(y)) -> EarlyVertebrate(x))", "all x.((Ancestor(x) & JawlessFish(x) & Parasitic(x)) -> EarlyVertebrate(x))", "all x y z.((Ancestor(x) & JawlessFish(y) & Parasitic(z) & JawlessFish(y) & Parasitic(z)) -> EarlyVertebrate(x))", "all x y.((Acestors(x) & JawlessFish(y) & Parasitic(y)) -> EarlyVertebrate(x,y))", "all x y.((AcestorsOfJawlessFish(x) & Parasitic(x)) -> EarlyVertebrate(x,y))", "all x y.((Ancestor(x) & JawlessFish(y) & Parasitic(y)) -> ProbablyOfTheOldestVertebrate(x,y))", "all x y z.((Acestors(x) & JawlessFish(y) & Parasitic(z) & JawlessFish(y) & Parasitic(z)) -> EarlyVertebrate(x))", "all x.((AcestorsOfJawlessFish(x) & Parasitic(x)) -> earliestVertebrate(x))", "all x.((Ancestor(x) & JawlessFish(x) & Parasitic(x)) -> EarlyVertebrate(x))", "all x y z.((Ancestor(x) & JawlessFish(y) & Parasitic(z) & JawlessFish(y,z)) -> EarlyVertebrate(x))", "all x.((Ancestor(x) & JawlessFish(x) & Parasitic(x)) -> EarlyVertebrates(x))"]}
{"id": "eqasc_validation_1147", "nl": "If animals have backbones, they are called a Vertebrate.", "fol": "", "prediction": ["all x.(HasBackbones(x) -> Vertebrate(x))", "all x.((Animal(x) & HasBackbones(x)) -> Vertebrate(x))", "all x.(HasBackbones(x) -> Vertebrate(x))", "all x.((Animal(x) & HasBackbones(x)) -> Vertebrate(x))", "all x y.((Animal(x) & HasBackbones(x)) -> Vertebrate(y))", "all x.(HasBackbones(x) -> Vertebrate(x))", "all x.((Animal(x) & HasBackbones(x)) -> Vertebrate(x))", "all x.(HasBackbone(x) -> Vertebrate(x))", "all x.(HasBackbones(x) -> Vertebrate(x))", "all x.((Animal(x) & HasBackbones(x)) -> Vertebrate(x))", "all x.((Animal(x) & HasBackbone(x)) -> Vertebrate(x))", "all x.(HasBackbones(x) -> Vertebrate(x))", "all x.((Animal(x) & HasBackbones(x)) -> Vertebrate(x))", "all x.(Backbone(x) -> Vertebrate(x))", "all x.(HasBackbones(x) -> Vertebrate(x))", "all x.((Animal(x) & HasBackbones(x)) -> Vertebrate(x))"]}
{"id": "eqasc_validation_1148", "nl": "hagfish have a backbone", "fol": "", "prediction": ["all x.(Hagfish(x) -> HasBackbone(x))", "hagfish (Hagfish) - HasBackbone(HasBackbone(HasBackbone(HasBackbone(HasBackbone(HasBackbone(HasBackbone(HasBackbone(HasBackbone(HasBackbone(HasBackbone(HasBackbone(HasBackbone(HasBackbone(HasBackbone(HasBackbone(HasBackbone(HasBackbone(HasBackbone(HasBackbone(HasBackbone(HasBackbone(HasBackbone(HasBackbone(HasBackbone(HasBackbone)))))", "all x y.((Hagfish(x) & Backbone(y)) -> HasBackbone(x,y))", "all x.(Hagfish(x) -> HasBackbone(x))", "hagfish (HasBackbone(hagfish) & HasBackbone(hagfish))", "all x y.((Hagfish(x) & Backbone(y)) -> HasBackbone(x,y))", "(all x.(Hagfish(x) -> HasBackbone(x)))", "all x.(Hagfish(x) -> HasBackbone(x))", "all x y.((Hagfish(x) & Backbone(y)) -> HasBackbone(x,y))", "all x.(Hagfish(x) -> HasBackbone(x))", "all x y.((Hagfish(x) & Backbone(y)) -> HasBackbone(x,y))", "all x.(Hagfish(x) -> HasBackbone(x))", "all x.(Hagfish(x) -> HasBackbone(x))", "all x.(Hagfish(x) -> HasBackbone(x))", "all x.(Hagfish(x) -> HasBackbone(x))", "all x.(Hagafish(x) -> HasBackbone(x))"]}
{"id": "eqasc_validation_1149", "nl": "Most aquatic organisms do not have to deal with extremes of temperature or moisture.", "fol": "", "prediction": ["all x.(AquaticOrganism(x) -> (-ExtremeTemperature(x) | ExtremeMoisture(x)))", "all x.(AquaticOrganism(x) -> -(ExtremeTemperature(x) | ExtremeMoisture(x)))", "all x.((AquaticOrganism(x) & -ExtremeTemperature(x) & -ExtremeMoisture(x)) -> -ExtremeMoisture(x))", "-exists x.(AquaticOrganism(x) & -ExtremeTemperature(x) & -ExtremeMoisture(x))", "all x y.((AquaticOrganism(x) & (ExtremeTemperature(y) | ExtremeMoisture(y))) -> -HasToBeAfford(x,y))", "all x y.((AquaticOrganism(x) & (ExtremeTemperature(y) | ExtremeMoisture(y))) -> -HasToBeHasToBeHaveToBeHaveToBeHaveToBeHaveToBeHaveToBeHaveToBeHaveToBeHaveToBeHaveToBeHaveToBeHaveToBeHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHa", "all x y.((AquaticOrganism(x) & ExtremeTemperature(y) & -ExtremeMoisture(x,y)) -> -ExtremeMoisture(x,y))", "all x.(AquaticOrganism(x) -> (-ExtremeTemperature(x) | ExtremeMoisture(x)))", "(all x.(AquaticOrganism(x) -> -ExtremeTemperatureOrMoisture(x)))", "all x.((AquaticOrganism(x) & -(ExtremeTemperature(x) | ExtremeMoisture(x))) -> -ExtremeMoisture(x))", "all x.(AquaticOrganism(x) -> -(ExtremeTemperature(x) | ExtremeMoisture(x)))", "all x.(AquaticOrganism(x) -> (-ExtremeTemperature(x) | ExtremeMoisture(x)))", "(all x.(AquaticOrganism(x) -> (-ExtremeTemperature(x) | ExtremeMoisture(x))))", "all x.(AquaticOrganism(x) -> -(ExtremeTemperature(x) | ExtremeMoisture(x)))", "(all x.(AquaticOrganism(x) -> (-ExtremeTemperature(x) | ExtremeMoisture(x))))", "all x.(AquaticOrganism(x) -> (-ExtremeTemperature(x) | ExtremeMoisture(x)))"]}
{"id": "eqasc_validation_1150", "nl": "Fish Fish are the ultimate aquatic organism.", "fol": "", "prediction": ["all x.(Fish(x) -> UltimateAquaticOrganism(x))", "(UltimateAquaticOrganism(Fish))", "all x.(Fish(x) -> UltimateAquaticOrganism(x))", "(UpperAquaticOrganism(Fish) & Fish(Fish))", "all x y.((Fish(x) & AquaticOrganism(y)) -> Ultimate(x,y))", "(UltimateAquaticOrganism(Fish))", "all x.(Fish(x) -> UltimateAquaticOrganism(x))", "all x y.((Fish(x) & AquaticOrganism(y)) -> Ultimate(x,y))", "all x.(Fish(x) -> UltimateAquaticOrganism(x))", "All x.((Fish(x) & UltimateAquaticOrganism(x)) -> Fish(x))", "all x.(Fish(x) -> AquaticOrganism(x))", "all x.(Fish(x) -> UltimateAquaticOrganism(x))", "all x y.((Fish(x) & AquaticOrganism(y)) -> Ultimate(x,y))", "All x.(Fish(x) -> AquaticOrganism(x))", "All x.(Fish(x) -> UltimateAquaticOrganism(x))", "all x.(Fish(x) -> UltimateAquaticOrganism(x))"]}
{"id": "eqasc_validation_1151", "nl": "most fish do not have to deal with extremes of temperature or moisture", "fol": "", "prediction": ["all x.(Fish(x) -> (-ExtremeTemperature(x) | ExtremeMoisture(x)))", "all x y.((Fish(x) & Fish(y)) -> (-ExtremeTemperature(x,y) | ExtremeMoisture(x,y)))", "-(Fish(f) & (ExtremeTemperature(f) | ExtremeMoisture(f))))", "all x y.((Fish(x) & (ExtremeTemperature(y) | ExtremeMoisture(y))) -> -(ExtremeTemperature(x,y) | ExtremeMoisture(x,y))))", "most fishes do not have to deal with extremes of temperature or moisture.", "(all x.(Fish(x) -> -ExtremeTemperatureOrMoisture(x)))", "all x.(Fish(x) -> -(ExtremeTemperature(x) | ExtremeMoisture(x)))", "all x.(Fish(x) -> (-ExtremeTemperature(x) | ExtremeMoisture(x)))", "all x y.(Fish(x) & -(ExtremeTemperature(y) | ExtremeMoisture(y))) -> -(ExtremeTemperature(x,y) | ExtremeMoisture(x,y)))", "all x.(Fish(x) -> (-ExtremeTemperatureOrMoisture(x) & -ExtremeMoisture(x)))", "all x y.((Fish(x) & Fish(y)) -> (-ExtremeTemperatureOrMoisture(x,y) | ExtremeMoisture(x,y)))", "most fishes do not have to deal with extremes of temperature or moisture.", "(all x.(Fish(x) -> (-ExtremeTemperature(x) | ExtremeMoisture(x))))", "all x.(Fish(x) -> (-ExtremeTemperature(x) | ExtremeMoisture(x)) & -ExtremeTemperature(x) & -ExtremeMoisture(x)))", "all x.(Fish(x) -> -(ExtremeTemperature(x) | ExtremeMoisture(x)))", "(all x.(Fish(x) -> (-ExtremeTemperature(x) | ExtremeMoisture(x))))"]}
{"id": "eqasc_validation_1152", "nl": "Most fish do not have to deal with extremes of temperature or moisture.", "fol": "", "prediction": ["all x.(Fish(x) -> (-ExtremeTemperature(x) | ExtremeMoisture(x)))", "(exists x.(Fish(x) & -ExtremeTemperature(x)) & -ExtremeMoisture(x))", "all x.(Fish(x) -> -(ExtremeTemperature(x) | ExtremeMoisture(x)))", "(all x.(Fish(x) -> -ExtremeTemperature(x)) & -ExtremeMoisture(x)))", "all x.(Fish(x) -> (-ExtremeTemperature(x) | ExtremeMoisture(x)))", "all x y.((Fish(x) & (ExtremeTemperature(y) | ExtremeMoisture(y))) -> -HasToBeAfforded(x,y))", "-exists x.(Fish(x) & -ExtremeTemperature(x) & -ExtremeMoisture(x))", "(all x.(Fish(x) -> -ExtremeTemperature(x) & -ExtremeMoisture(x)))", "all x.(Fish(x) -> -(ExtremeTemperature(x) | ExtremeMoisture(x)))", "all x.(Fish(x) -> (-ExtremeTemperature(x) | ExtremeMoisture(x)))", "all x.(Fish(x) -> (-ExtremeTemperature(x) & -ExtremeMoisture(x)))", "all x.(Fish(x) -> -(ExtremeTemperature(x) | ExtremeMoisture(x)))", "all x.(Fish(x) -> (-ExtremeTemperature(x) | ExtremeMoisture(x)))", "all x.(Fish(x) -> (-ExtremeTemperature(x) | ExtremeMoisture(x)))", "all x.(Fish(x) -> -(ExtremeTemperature(x) | ExtremeMoisture(x)))", "exists x.(Fish(x) & -(ExtremeTemperature(x) | ExtremeMoisture(x)))"]}
{"id": "eqasc_validation_1153", "nl": "Effects on Aquatic Organisms Triallate is highly toxic to fish and other aquatic organisms.", "fol": "", "prediction": ["all x.(Triallate(x) -> (ToxicToFish(x) & ToOtherAquaticOrganisms(x)))", "all x y.((Triallate(x) & AquaticOrganism(y)) -> HighlyToxicTo(x,y))", "all x.(Triallate(x) -> (HighlyToxicToFish(x) & HighlyToxicToAquaticOrganisms(x)))", "(EffectsOnAquaticOrganisms) & Triallate(t) & HighlyToxicToFishAndAquaticOrganisms(t))", "(HighlyToxicToFishAndAquaticOrganisms(Triallate))", "all x y z.((Triallate(x) & AquaticOrganism(y) & Fish(z)) -> HighlyToxic(x,y,z))", "(EffectsOnAquaticOrganisms(Triallate) -> HighlyToxicToFishAndAquaticOrganisms(Triallate))", "all x y.((Triallate(x) & AquaticOrganism(y)) -> HighlyToxicTo(x,y))", "All x.(Triallate(x) -> (ToxicToFish(x) & ToOtherAquaticOrganisms(x)))", "All x.(Triallate(x) -> (ToxicToFish(x) | ToxicToAquaticOrganisms(x)))", "all x y z.((Triallate(x) & AquaticOrganism(y) & Fish(z)) -> HighlyToxicTo(x,y,z))", "All x.(Triallate(x) -> ToxicToAquaticOrganisms(x))", "All x.(Triallate(x) -> (HighlyToxicToFishAndAquaticOrganisms(x)))", "all x y.((Triallate(x) & AquaticOrganism(y)) -> (HighlyToxicTo(x,y) & To(x,y)))", "all x y.((Triallate(x) & AquaticOrganism(y)) -> HighlyToxicTo(x,y))", "All x.(Triallate(x) -> ToxicToFishAndAquaticOrganisms(x))"]}
{"id": "eqasc_validation_1154", "nl": "Moisturizing Secondly, moisturizing the skin is extremely important.", "fol": "", "prediction": ["all x.(Moisturizing(x) -> (ExtremelyImportant(x) & MoisturizingSkin(x)))", "(MoisturizingSkin) & MoisturizingSkin(MoisturizingSkin) & -MoisturizingSkin(MoisturizingSkin))", "all x.((Moisturizing(x) & Skin(y)) -> ExtremelyImportant(x,y))", "-(MoisturizingSkin(x) & MoisturizingSkin(x)))", "(Moisturizing(skin) & Moisturizing(skin))", "all x y.((Moisturizing(x) & Skin(y)) -> ExtremelyImportant(x,y))", "-MoisturizingSkin(x) & MoisturizingSkin(x) & MoisturizingSkin(x))", "(MoisturizingSkin(Moisturizing) & Second(MoisturizingSkin(Moisturizing))", "(Moisturizing) & MoisturizingSkin(Moisturizing) & -MoisturizingSkin(Moisturizing))", "all x.(Moisturizing(x) -> (ExtremelyImportant(x) & MoisturizingSkin(x)))", "(MoisturizingSkin) & MoisturizingSkin(MoisturizingSkin) & MoisturizingSkin(MoisturizingSkin))", "(Moisturizing(skin) & Moisturizing(skin) & -Moisturizing(skin))", "-(MoisturizingSkin(x) | MoisturizingSkin(x)))", "all x.((Moisturizing(x) & Skin(x)) -> ExtremelyImportant(x))", "secondly, moisturizingtheskin(secondary) is extremelyimportant.", "all x.(Moisturizing(x) -> (ExtremelyImportant(x) & Moisturizing(x)))"]}
{"id": "eqasc_validation_1155", "nl": "Most aquatic organisms do not have to moisturize their skin", "fol": "", "prediction": ["all x.(AquaticOrganism(x) -> -MoisturizeSkin(x))", "-(AquaticOrganism(x) & AquaticOrganism(x)) -> -MoisturizeSkin(x))", "all x.((AquaticOrganism(x) & -MoisturizeSkin(x)) -> -MoisturizeSkin(x))", "all x y.((AquaticOrganism(x) & AquaticOrganism(y)) -> -MoisturizeSkin(x,y))", "all x.(AquaticOrganism(x) -> -MoisturizeSkin(x))", "all x y.((AquaticOrganism(x) & AquaticOrganism(y) & -MoisturizeSkin(x,y)) -> -MoisturizeSkin(x,y))", "-MoistlyMoistureSkin(water-organism)", "all x.((AquaticOrganism(x) & -MoisturizeSkin(x)) -> -MoisturizeSkin(x))", "all x.(AquaticOrganism(x) -> -HasToMoisturizeSkin(x))", "all x.(AquaticOrganism(x) -> -MoisturizeSkin(x))", "(all x.(AquaticOrganism(x) -> -MoisturizeSkin(x)))", "all x y.((AquaticOrganism(x) & AquaticOrganism(y) & -MoisturizeSkin(x,y)) -> -MoisturizeSkin(x,y))", "(all x.(AquaticOrganism(x) -> -HasToMoisturizeSkin(x)))", "all x.(AquaticOrganism(x) -> (-HasToMoisturizeSkin(x) | HasToMoisturizeSkin(x)))", "(all x.(AquaticOrganism(x) -> -MoisturizeSkin(x)))", "all x.(AquaticOrganism(x) -> -MoisturizeSkin(x))"]}
{"id": "eqasc_validation_1156", "nl": "Fish and other aquatic creatures are no exception.", "fol": "", "prediction": ["all x.((Fish(x) | AquaticCreature(x)) -> -Exception(x))", "all x.((Fish(x) & AquaticCreature(x)) -> -Exception(x))", "all x y.((Fish(x) & AquaticCreature(y)) -> -Exception(x,y))", "(-all x.(Fish(x) -> AquaticCreature(x)))", "-all x.(Fish(x) & all y.(AquaticCreature(y) -> -Exception(x)))", "all x.((Fish(x) | AquaticCreature(x)) -> -Exception(x))", "all x.(Fish(x) & AllOtherAquaticCreature(x) -> -Exception(x))", "(-all x.(Fish(x) & AllAquaticCreature(x)) -> -Exception(x))", "all x.((Fish(x) & AquaticCreature(x)) -> -Exception(x))", "(all x.(Fish(x) -> -Exception(x)) & all y.(AquaticCreature(y) -> -Exception(y)))", "all x y.((Fish(x) & AquaticCreature(y)) -> -Exception(x,y))", "(all x.(Fish(x) -> -AquaticCreature(x)))", "all x.(AquaticCreature(x) -> -Fish(x))", "all x.((Fish(x) | AquaticCreature(x)) -> -Exception(x))", "all x.((Fish(x) & AquaticCreature(x)) -> -Exception(x))", "all x.((Fish(x) | AquaticCreature(x)) -> -Exception(x))"]}
{"id": "eqasc_validation_1157", "nl": "most fish do not have to deal with temperature or moisture extremes", "fol": "", "prediction": ["all x.(Fish(x) -> (-(TemperatureExtreme(x) | MoistureExtreme(x))))", "all x y.((Fish(x) & -(TemperatureExtreme(y) | MoistureExtreme(y))) -> -(TemperatureExtreme(x,y) | MoistureExtreme(x,y)))", "all x.(Fish(x) -> -(TogetherWithTemperature(x) | TogetherWithMoisture(x)))", "-(Fish(f) & (TemperatureExtreme(f) | MoistureExtreme(f)))", "most fishes do not have to deal with temperature or moisture extremes.", "(all x.(Fish(x) -> -(TemperatureExtreme(x) | MoistureExtreme(x))))", "most fish do not have to deal with temperature or moisture extremes.", "all x y.(Fish(x) & -(TemperatureExtreme(y) | MoistureExtreme(y)) & Fish(x)) -> -(TemperatureExtreme(x,y) | MoistureExtreme(x,y)))", "all x y.((Fish(x) & (Temperature(y) | Moisture(y))) -> -HasToTreatWith(x,y))", "all x y.((Fish(x) & Fish(y)) -> (-(Temperature(x) | Moisture(x))))", "all x.(Fish(x) -> (-(TemperatureExtreme(x) | MoistureExtreme(x))))", "all x.(Fish(x) -> (-TogetherWithTemperatureOrMoistureExtremes(x) | TogetherWithMoistureExtremes(x)))", "(all x.(Fish(x) -> (-TreatsTemperature(x) | DealsWithMoisture(x))))", "all x.(Fish(x) -> -(TogetherWithTemperature(x) | TogetherWithMoisture(x)))", "all x.(Fish(x) -> -(HasToTreatWithTemperature(x) | HasToTreatWithMoisture(x)))", "(all x.(Fish(x) -> -(TemperatureExtreme(x) | MoistureExtreme(x))))"]}
{"id": "eqasc_validation_1158", "nl": "Most fish do not have to deal with extremes of temperature or moisture", "fol": "", "prediction": ["all x.(Fish(x) -> (-ExtremeTemperature(x) | ExtremeMoisture(x)))", "all x y.((Fish(x) & (ExtremeTemperature(y) | ExtremeMoisture(y))) -> -(ExtremeTemperature(x,y) | ExtremeMoisture(x,y))))", "-(Fish(f) & (ExtremeTemperature(f) | ExtremeMoisture(f))))", "(all x.(Fish(x) -> -ExtremeTemperatureOrMoisture(x)))", "all x.(Fish(x) -> -(ExtremeTemperature(x) | ExtremeMoisture(x)))", "all x.(Fish(x) -> (-ExtremeTemperature(x) | ExtremeMoisture(x)))", "all x y.(Fish(x) & -(ExtremeTemperature(y) | ExtremeMoisture(y))) -> -(ExtremeTemperature(x,y) | ExtremeMoisture(x,y)))", "all x y.((Fish(x) & Fish(y)) -> (-ExtremeTemperatureOrMoisture(x,y) | ExtremeMoisture(x,y)))", "all x.(Fish(x) -> (-ExtremeTemperatureOrMoisture(x) & -ExtremeMoisture(x)))", "(all x.(Fish(x) -> -(ExtremeTemperature(x) | ExtremeMoisture(x))))", "(all x.(Fish(x) -> (-ExtremeTemperature(x) | ExtremeMoisture(x))))", "all x.(Fish(x) -> -(ExtremeTemperature(x) | ExtremeMoisture(x)))", "all x.(Fish(x) -> -(ExtremeTemperature(x) | ExtremeMoisture(x)) & -ExtremeTemperature(x) & -ExtremeMoisture(x)))", "all x.(Fish(x) -> (-ExtremeTemperature(x) | ExtremeMoisture(x)))", "all x.(Fish(x) -> (-ExtremeTemperatureOrMoisture(x) & -ExtremeMoisture(x)))", "(all x.(Fish(x) -> (-ExtremeTemperature(x) | ExtremeMoisture(x))))"]}
{"id": "eqasc_validation_1159", "nl": "Wetting provides moisture to make brine.", "fol": "", "prediction": ["all x.(Wetting(x) -> ProvidesMoisture(x))", "all x y.((Wetting(x) & Brier(y)) -> ProvidesMoisture(x,y))", "(all x.(Wetting(x) -> ProvidesMoisture(x)))", "all x.(Wetting(x) -> ProvidesMoistureToMakeBrine(x))", "(ProvidesMoisture(wetting) & MakesBrine(wetting))", "wetting(wet) -> ProvidesMoistureToMakeBrine(wet))", "all x y.((Wetting(x) & Briar(y)) -> ProvidesMoisture(x,y))", "all x.(Wetting(x) -> ProvidesMoisture(x))", "All x y.(Wetting(x) -> ProvidesMoistureToMakeBrine(x,y))", "all x.(Wetting(x) -> (ProvidesMoisture(x) & MakesBrine(x)))", "all x.(Wetting(x) -> ProvidesMoistureToMakeBrine(x))", "All x y.((Wetting(x) & Brine(y)) -> ProvidesMoisture(x,y))", "All x y.((Wetting(x) & Brier(y)) -> ProvidesMoisture(x,y))", "all x.(Wetting(x) -> ProvidesMoisture(x))", "all x.(Wetting(x) -> (ProvidesMoisture(x) & MakesBrine(x)))", "all x.(Wetting(x) -> ProvidesMoistureToMakeBrine(x))"]}
{"id": "eqasc_validation_1160", "nl": "Most aquatic organisms do not have to deal with extremes of temperature or wetness.", "fol": "", "prediction": ["all x.(AquaticOrganism(x) -> -(ExtremeTemperature(x) | ExtremeWetness(x)))", "all x.(AquaticOrganism(x) -> (-ExtremeTemperature(x) | ExtremeWetness(x)))", "all x y.((AquaticOrganism(x) & (ExtremeTemperature(y) | ExtremeWetness(y))) -> -HasExtremeTemperature(x,y))", "-exists x.(AquaticOrganism(x) & -ExtremeTemperature(x) & -ExtremeWetness(x))", "all x.((AquaticOrganism(x) & -ExtremeTemperature(x) & -ExtremeWetness(x)) -> -ExtremeWetness(x))", "all x y.((AquaticOrganism(x) & (ExtremeTemperature(y) | ExtremeWetness(y))) -> -HasToBeHasToBeHasToBeHasToBeHasToBeHasToBeHasToBeHasToBeHasToBeHasToBeHasToBeHasToBeHasToBeHas(x,y))", "(all x.(AquaticOrganism(x) -> -ExtremeTemperatureOrWetness(x)))", "all x.(AquaticOrganism(x) -> -(ExtremeTemperature(x) | ExtremeWetness(x)))", "(all x.(AquaticOrganism(x) -> -(ExtremeTemperature(x) | ExtremeWetness(x))))", "all x.(AquaticOrganism(x) -> (-ExtremeTemperature(x) | ExtremeWetness(x)))", "all x.(AquaticOrganism(x) -> -(ExtremeTemperature(x) | ExtremeWetness(x)))", "all x.(AquaticOrganism(x) -> (-ExtremeTemperature(x) | ExtremeWetness(x)))", "(all x.(AquaticOrganism(x) -> (-ExtremeTemperature(x) | ExtremeWetness(x))))", "all x.(AquaticOrganism(x) -> -(ExtremeTemperature(x) | ExtremeWetness(x)))", "(all x.(AquaticOrganism(x) -> (-ExtremeTemperature(x) | ExtremeWetness(x))))", "all x.(AquaticOrganism(x) -> (-ExtremeTemperature(x) | ExtremeWetness(x)))"]}
{"id": "eqasc_validation_1161", "nl": "when a metal rusts , that metal becomes orange on the surface", "fol": "", "prediction": ["all x y z.((Metal(x) & Rusts(x) & Metal(y) & Surface(z) & Orange(y)) -> OrangeOnSurface(y,z))", "all x y.((Metal(x) & Rusts(x)) -> OrangeOnSurface(y))", "all x.((Metal(x) & Rusts(x)) -> OrangeOnSurface(x))", "all x y z.((Metal(x) & Rusts(x) & Metal(y) & Surface(z)) -> Orange(y))", "(all x y z.((Metal(x) & Rusts(x)) -> OrangeOnSurface(y)))", "all x y z w.((Metal(x) & Rusts(x) & Metal(y) & Surface(z) & Orange(w)) -> OrangeOnSurface(y,z,w))", "all x y z.((Metal(x) & Rusts(x) & Metal(y) & Surface(z) & Orange(y)) -> OrangeOnSurface(y,z))", "all x.((Metal(x) & Rusts(x)) -> OrangeOnSurface(x))", "all x y.((Metal(x) & Rusts(x)) -> OrangeOnSurface(x))", "all x.((Metal(x) & Ruins(x)) -> OrangeOnSurface(x))", "all x y z.((Metal(x) & Rusts(x) & Metal(y) & Surface(z)) -> OrangeOnSurface(y,z))", "all x.(RotsMetal(x) -> OrangeOnSurface(x))", "all x y.((Metal(x) & Rusts(x) & Metal(y) & OrangeOnSurface(y)) -> OrangeOnSurface(y))", "all x y.((Metal(x) & Rusts(x)) -> Orange(y))", "all x.((Metal(x) & Rusts(x)) -> Orange(x))", "all x y z.((Metal(x) & Rusts(x) & Metal(y) & Surface(z) & Orange(y)) -> Orange(y))"]}
{"id": "eqasc_validation_1162", "nl": "When iron oxidizes, it rusts.", "fol": "", "prediction": ["all x.((Iron(x) & Oxidizes(x)) -> Rusts(x))", "all x.(Oxidizes(x) -> Rusts(x))", "all x.(OxidizesIron(x) -> Rusts(x))", "all x y.((Iron(x) & Oxidizes(x)) -> Rusts(y))", "all x.((Iron(x) & Oxidizes(x)) -> Rusts(x))", "all x y.((Iron(x) & Oxidizes(x,y)) -> Rusts(x))", "(OxidizesIron(iron) -> Rust(iron))", "all x.((Iron(x) & Oxidizes(x)) -> Rusts(x))", "all x.(Oxygens(x) -> Rusts(x))", "all x y.((Iron(x) & Oxidizes(x)) -> Rusts(x))", "all x.(OxidizesIron(x) -> Ruins(x))", "all x y.((Iron(x) & Oxidizes(x,y)) -> Rusts(x))", "all x.(OxygensIron(x) -> Rusts(x))", "all x y.((Iron(x) & Oxygens(x,y)) -> Rusts(x))", "all x.((Iron(x) & Oxidizes(x)) -> Rusts(x))", "all x.((Iron(x) & Oxidizes(x)) -> Rust(x))"]}
{"id": "eqasc_validation_1163", "nl": "When iron oxidizes, that metal becomes orange on the surface.", "fol": "", "prediction": ["all x.((IronOxidizes(x) & Metal(x)) -> OrangeOnSurface(x))", "all x.((Iron(x) & Oxidizes(x)) -> OrangeOnSurface(x))", "all x.(OxidizesIron(x) -> OrangeOnSurface(x))", "all x y.((Iron(x) & Oxidizes(x)) -> Orange(y))", "all x y z.((Iron(x) & Oxidizes(x,y) & Metal(z) & Orange(z)) -> OnSurface(x,z))", "all x y.((Iron(x) & Oxidizes(x,y)) -> OrangeOnSurface(y))", "all x y.((Iron(x) & Oxidizes(x) & Metal(y)) -> OrangeOnSurface(y))", "all x.((IronOxidizes(x) & Metal(x)) -> OrangeOnSurface(x))", "all x.(OxidizesIron(x) -> OrangeOnSurface(x))", "(OxidizesIron(iron) -> OrangeOnSurface(iron))", "all x y.((IronOxidizes(x) & Metal(y) & Oxidizes(y,x)) -> OrangeOnSurface(y))", "all x.((Iron(x) & Oxidizes(x)) -> OrangeOnSurface(x))", "all x.(Oxygens(x) -> OrangeOnSurface(x))", "all x.((IronOxidizes(x) & MetalBecomesOrange(x)) -> Oxidizes(x))", "all x y.((Iron(x) & Oxidizes(x,y)) -> OrangeOnSurface(x))", "all x.(OxidizesIron(x) -> OrangeOnSurface(x))"]}
{"id": "eqasc_validation_1164", "nl": "Moisture can damage metal causing rusting and corrosion.", "fol": "", "prediction": ["all x.(Moisture(x) -> (DamageMetal(x) & CausesRusting(x) & CausesCorrosion(x)))", "all x y.((Moisture(x) & Metal(y)) -> (Damage(x,y) & CausesRusting(x) & CausesCorrosion(x)))", "all x.(Moisture(x) -> (DamageMetal(x) & CausesRotting(x) & CausesCorrosion(x)))", "all x y.((Moisture(x) & Metal(y)) -> (Damage(x,y) & CausesRotting(x) & CausesCorrosion(x)))", "(all x.(Moisture(x) -> DamagesMetal(x)))", "all x.((Moisture(x) & Metal(y)) -> (Damage(x,y) & CausesRusting(x) & CausesCorrosion(x)))", "all x.(Moisture(x) -> (DamageMetal(x) & CausesRusting(x) & CausesCorrosion(x)))", "all x y z.((Moisture(x) & Metal(y) & Rusting(z)) -> (Damage(x,y) & Corrosion(z)))", "all x y.((Moisture(x) & Metal(y)) -> (Damages(x,y) & CausesRusting(x) & CausesCorrosion(x)))", "all x.(Moisture(x) -> (DamagesMetal(x) & CausesRossing(x) & CausesCorrosion(x)))", "(all x.(Moisture(x) -> DamagesMetal(x)))", "all x y.((Moisture(x) & Metal(y)) -> (Damage(x,y) & Rusting(y) & Corrosion(y)))", "all x.(Moisture(x) -> (DamageMetal(x) & CauseRossing(x) & CauseCorrosion(x)))", "all x.(Moisture(x) -> (DeteriorsMetal(x) & CausesRusting(x) & CausesCorrosion(x)))", "all x.(Moisture(x) -> (DamagesMetal(x) & CausesRusting(x) & CausesCorrosion(x)))", "all x y.((Moisture(x) & Metal(y)) -> Damages(x,y))"]}
{"id": "eqasc_validation_1165", "nl": "Moisture can cause metal to become orange on the surface.", "fol": "", "prediction": ["all x.(Moisture(x) -> CausesMetalToBecomeOrange(x))", "all x y.((Moisture(x) & Metal(y)) -> OrangeOnSurface(x,y))", "all x.(Moisture(x) -> (CausesMetalToBecomeOrange(x)))", "all x.((Moisture(x) & Metal(y)) -> OrangeOnSurface(x,y))", "(MoistureCanCauseMetalToBecomeOrange(Metal))", "all x y.((Moisture(x) & Metal(y)) -> OrangeOnSurface(x,y))", "all x.(Moisture(x) -> CausesOrangeMetal(x))", "all x y z.((Moisture(x) & Metal(y) & Surface(z)) -> Orange(y,z))", "(all x.(Moisture(x) -> OrangeOnSurface(x)))", "all x.((Moisture(x) & Metal(y)) -> OrangeOnSurface(y))", "all x y.((Moisture(x) & Metal(y)) -> (BecomesOrangeOnSurface(x,y)))", "all x y.((Moisture(x) & Metal(y)) -> OrangeOnSurface(x,y))", "all x.(Moisture(x) -> (CausesMetalToBecomeOrange(x)))", "all x y.((Moisture(x) & Metal(y) & Surface(z)) -> Orange(x,y,z))", "all x.(Moisture(x) -> MetalBecomesOrange(x))", "All x.(Moisture(x) -> CausesOrangeMetalOnSurface(x))"]}
{"id": "eqasc_validation_1166", "nl": "Iron rusts in the presence of oxygen and water.", "fol": "", "prediction": ["all x.(Iron(x) -> (RosesInPresenceOfOxygen(x) & RuinsInPresenceOfWater(x)))", "all x y.((Iron(x) & PresenceOfOxygen(y) & PresenceOfWater(x)) -> Ruins(x,y))", "all x.((Iron(x) & PresenceOfOxygen(x) & PresenceOfWater(x)) -> Ruins(x))", "all x.(Iron(x) -> (RosesInOxygen(x) & RuinsInWater(x)))", "all x y.((Iron(x) & Oxygen(y) & Water(y)) -> RuinsIn(x,y))", "(RosesInPresenceOfOxygen(iron) & PresenceOfWater(iron))", "all x y z.((Iron(x) & Oxygen(y) & Water(z)) -> RuinsIn(x,y,z))", "(RosesInOxygen(iron) & PresentsInWater(iron))", "all x.(Iron(x) -> (RosesInPresenceOfOxygen(x) & RuinsInPresenceOfWater(x)))", "all x.((Iron(x) & PresenceOfOxygen(x) & PresenceOfWater(x)) -> Ruins(x))", "all x y.((Iron(x) & PresenceOfOxygen(x) & PresenceOfWater(y)) -> RuinsIn(x,y))", "all x.(Iron(x) -> RuinsInPresenceOfOxygenAndWater(x))", "(all x.(Iron(x) -> Ruins(x)))", "all x y z.((Iron(x) & Oxygen(y) & Water(z)) -> RuinsInPresence(x,y,z))", "all x.((Iron(x) & PresenceOfOxygen(x) & PresenceOfWater(x)) -> RuinsIn(x,y))", "All x.(Iron(x) -> (RosesInPresenceOfOxygen(x) & RusesInPresenceOfWater(x)))"]}
{"id": "eqasc_validation_1167", "nl": "oxygen and water will cause metal to turn orange", "fol": "", "prediction": ["all x y.((Oxygen(x) & Water(y)) -> MetalToTurnOrange(x))", "all x.((Oxygen(x) & Water(x)) -> MetalToTurnOrange(x))", "all x y z.((Oxygen(x) & Water(y) & Metal(z)) -> (Orange(z) & Oxygen(z) & Water(y) & CausesOrange(z)))", "(Oxygen(x) & Water(x) & Metal(y) & TurnsOrange(y))", "all x y.((Oxygen(x) & Water(y)) -> MetalToTurnOrange(x))", "all x.((Oxygen(x) & Water(x)) -> MetalToTurnOrange(x))", "all x y z.((Oxygen(x) & Water(y) & Metal(z) & Oxygen(z)) -> TurnsOrange(z))", "all x y.((Oxygen(x) & Water(y)) -> (Orange(x) & Oxygen(y) & Water(y)))", "all x.(Oxygen(x) & Water(x) & Metal(x) & TurnsOrange(x))", "(OxygenAndWater(x) & MetalToTurnOrange(x))", "all x.((Oxygen(x) & Water(x)) -> MetalTurnsOrange(x))", "(Oxygen(x) & Water(x) & Metal(x) & TurnsOrange(x))", "all x.((Oxygen(x) & Water(x) & Metal(x)) -> TurnsOrange(x))", "All x.(Oxygen(x) & Water(x) -> MetalToTurnOrange(x))", "(Oxygen(O) & Water(O) & MetalToTurnOrange(O))", "all x y.((Oxygen(x) & Water(y) & Metal(x)) -> TurnsOrange(x,y))"]}
{"id": "eqasc_validation_1168", "nl": "Rust stains are the result of oxidation.", "fol": "", "prediction": ["all x.(RustStain(x) -> Oxidation(x))", "all x y.((RustStain(x) & Oxidation(y)) -> Results(x,y))", "all x.(RustStain(x) -> OxidationResult(x))", "all x y.((RustStain(x) & Oxidation(y)) -> OxidationResult(x,y))", "all x.(RustStains(x) -> Oxidation(x))", "all x.(RustStained(x) -> Oxidation(x))", "(all x.(RustStained(x) -> Oxidation(x)))", "all x.(RustStain(x) -> Oxidation(x))", "(OxidationResult(rust) & Stains(rust))", "all x y.((RustStain(x) & Oxidation(y)) -> Remains(x,y))", "all x.(Rust(x) -> Oxidation(x))", "all x y.((RustStained(x) & Oxidation(y)) -> Results(x,y))", "all x y.((RustStain(x) & Oxidation(y)) -> ResultsOf(x,y))", "all x.(RustStain(x) -> OxidationResult(x))", "all x.(RustStained(x) -> OxidationResult(x))", "All x.(Rust(x) -> Oxidation(x))"]}
{"id": "eqasc_validation_1169", "nl": "metal becomes orange on the surface as a  result of oxidation.", "fol": "", "prediction": ["all x.((Metal(x) & Oxidation(x)) -> OrangeOnSurface(x))", "all x y.((Metal(x) & Oxidation(y)) -> OrangeOnSurface(x,y))", "all x.((Metal(x) & Oxidation(x)) -> OrangeOnSurface(x))", "(Orange(Metal) & Oxidation(Metal))", "all x y z.((Metal(x) & Oxidation(y) & Surface(z) & Orange(x,z)) -> Oxidation(x,y,z))", "all x.(Oxidation(x) -> Orange(x))", "all x.(OxidationOfMetal(x) -> OrangeOnSurface(x))", "all x y.((Metal(x) & Oxidation(y)) -> OrangeOnSurface(x,y))", "all x y z.((Metal(x) & Oxidation(y) & Surface(z) & Orange(x,y)) -> OxidationResult(x,z))", "all x.((Metal(x) & Oxidation(x)) -> OrangeOnSurface(x))", "all x y.((Metal(x) & Oxidation(y)) -> Orange(x))", "all x.(OxidationOfMetal(x) -> OrangeOnSurface(x))", "all x y.((Metal(x) & Surface(y) & Oxidation(x)) -> Orange(x,y))", "all x y.((Metal(x) & Oxidation(y)) -> OrangeOnSurface(x,y))", "all x.((Metal(x) & Oxidation(x)) -> OrangeOnSurface(x))", "all x.((Metal(x) & Oxidation(x)) -> OrangeSurface(x))"]}
{"id": "eqasc_validation_1170", "nl": "Moisture is the main cause of rust.", "fol": "", "prediction": ["all x.(Moisture(x) -> MainCauseOfRust(x))", "(MainCauseOfRust(moisture) & MainCauseOfRust(moisture))", "all x y.((Moisture(x) & Rust(y)) -> MainCause(x,y))", "-MainCauseOfRust(moisture)", "(MainCauseOfRust(moisture) & MainCauseOfRust(moisture))", "all x.((Moisture(x) & Rust(x)) -> MainCause(x,y))", "all x.(Moisture(x) -> MainCauseOfRust(x))", "(MainCauseOfRose(moisture) & Moisture(moisture))", "-MainCauseOfRose(moisture)", "all x.(Moisture(x) -> CauseOfRust(x))", "(MainCauseOfRrust(moisture) & MainCauseOfRust(moisture))", "all x y.((Moisture(x) & Rust(y)) -> MainCause(x,y))", "all x.(Moisture(x) -> MainCauseOfRose(x))", "(MainCauseOfRust(moisture) & MainCauseOfRust(moisture))", "All x y.((Moisture(x) & Rust(y)) -> Cause(x,y))", "all x.(Moisture(x) -> CauseOfRose(x))"]}
{"id": "eqasc_validation_1171", "nl": "Moisture can turn metal orange on the surface", "fol": "", "prediction": ["all x.(Moisture(x) -> TurnsMetalOrange(x))", "all x y.((Moisture(x) & MetalOrange(y)) -> TurnsOnSurface(x,y))", "all x.((Moisture(x) & MetalOrange(x)) -> TurnsOnSurface(x))", "(MoistureCanTurnMetalOrange(moisture) -> MetalOrange(moisture))", "all x y z.((Moisture(x) & MetalOrange(y) & Surface(z)) -> TurnsOn(x,y,z))", "all x.(Moisture(x) -> TurnsMetalOrangeOnSurface(x))", "all x y.((Moisture(x) & MetalOrange(y)) -> TurnsOnSurface(x,y))", "(MoistureTurnsMetalOrange(Moisture) & Surface(Moisture))", "all x y.((Moisture(x) & Surface(y)) -> TurnsMetalOrange(x,y))", "all x.((Moisture(x) & TurnsMetalOrange(x)) -> MetalOrangeOnSurface(x))", "(all x.(Moisture(x) -> TurnsMetalOrange(x)))", "all x y z.((Moisture(x) & MetalOrange(y) & Surface(z)) -> TurnsOn(x,y,z))", "all x.(Moisture(x) -> TurnsMetalOrangeOnSurface(x))", "all x.(Moisture(x) -> (TurnsMetalOrange(x) & Surface(x)))", "all x y.((Moisture(x) & MetalOrange(y)) -> TurnsOnSurface(x,y))", "all x.(Moisture(x) -> TurnsMetalOrangeOnSurface(x))"]}
{"id": "eqasc_validation_1172", "nl": "Chemically, iron is an active metal.", "fol": "", "prediction": ["all x.(Iron(x) -> ActiveMetal(x))", "(ActiveMetal(iron) & Chemically(iron))", "all x.((Iron(x) & ChemicallyActiveMetal(x)) -> ActiveMetal(x))", "all x.(Iron(x) -> ActiveMetal(x))", "all x y.((Iron(x) & Chemically(y)) -> ActiveMetal(x))", "(ActiveMetal(iron) & Chemically(iron))", "(AtMaterial(iron) & Chemically(iron))", "(ActiveMetal(iron) & Chemically(iron))", "all x.(Iron(x) -> ActiveMetal(x))", "all x y.((Iron(x) & Chemically(y)) -> ActiveMetal(x))", "All x.(Element(x) -> ActiveMetal(x))", "all x.(Iron(x) -> ActiveMetal(x))", "all x.(Iron(x) -> ActiveMetal(x))", "all x.(Iron(x) -> ActiveMetal(x))", "All x.(Iron(x) -> ActiveMetal(x))", "All x.(Iron(x) -> ActiveMetal(x))"]}
{"id": "eqasc_validation_1173", "nl": "when iron rusts , iron becomes orange on the surface", "fol": "", "prediction": ["all x y z.((Iron(x) & Rusts(x) & Iron(y) & Surface(z)) -> Orange(y))", "all x y.((Iron(x) & Rusts(x)) -> IronBecomesOrange(y))", "(RosesIron(iron) -> OrangeOnSurface(iron))", "all x y z.((Iron(x) & Rusts(x) & Iron(y) & Surface(z)) -> Orange(y))", "all x.((IronRushes(x) & IronBecomesOrange(x)) -> IronOnSurface(x))", "(all x y z.((Iron(x) & Rusts(x)) -> Orange(y)))", "all x y z.((IronRushes(x) & Iron(y) & Surface(z)) -> Orange(y))", "(all x y z.((Iron(x) & Rusts(x) & Iron(y) & Surface(z)) -> Orange(y,z)))", "all x y z w.((Iron(x) & Rusts(x) & Iron(y) & Surface(z) & Orange(w)) -> Orange(y,z))", "all x y.((IronRushes(x) & Iron(y)) -> OrangeOnSurface(y))", "all x y z.((Iron(x) & Rusts(x) & Iron(y) & Surface(z) & Orange(y)) -> Orange(y))", "all x.((IronRushes(x) & Iron(x)) -> OrangeOnSurface(x))", "all x.(RotsIron(x) -> IronBecomesOrangeOnSurface(x))", "all x.((IronRusts(x) & IronBecomesOrangeOnSurface(x)) -> OrangeOnSurface(x))", "all x.((IronRoses(x) & Iron(x)) -> OrangeOnSurface(x))", "all x y.((IronRushes(x) & Iron(y)) -> OrangeOnSurface(y,x))"]}
{"id": "eqasc_validation_1174", "nl": "Iron oxide is rust .", "fol": "", "prediction": ["all x.(IronOxygen(x) -> Rust(x))", "all x y.((IronOxygen(x) & Rust(y)) -> Is(x,y))", "(all x.(IronOxygen(x) -> Rust(x)))", "(Rose(iron))", "all x.(IronOxygen(x) -> Rust(x))", "all x.(IronOxide(x) -> Rust(x))", "all x y.((IronOxygen(x) & Rust(y)) -> Is(x,y))", "(Rose(iron))", "(all x.(IronOxygen(x) -> Rust(x)))", "(Rose(ironOxygen))", "all x.(IronOxygen(x) -> Rust(x))", "all x y.((IronOxygen(x) & Rust(y)) -> Is(x,y))", "all x.(IronOxide(x) -> Rust(x))", "all x.(IronOxygen(x) -> Rust(x))", "All x.(IronOxide(x) -> Rust(x))", "all x.(IronOxygen(x) -> Rust(x))"]}
{"id": "eqasc_validation_1175", "nl": "when a metal contains iron oxide, it becomes orange on the surface", "fol": "", "prediction": ["all x.((Metal(x) & ContainsIronOxide(x)) -> OrangeOnSurface(x))", "all x y.((Metal(x) & IronOxide(y) & Contains(x,y)) -> OrangeOnSurface(x))", "all x y.((Metal(x) & ContainsIronOxide(x) & ContainsIronOxide(x)) -> OrangeOnSurface(x))", "all x.((Metal(x) & ContainsIronOxide(x)) -> OrangeOnSurface(x))", "all x y z.((Metal(x) & IronOxide(y) & Surface(z) & Contains(x,y)) -> Orange(x))", "all x y.((Metal(x) & IronOxide(y) & Contains(x,y)) -> OrangeOnSurface(x))", "all x y z.((Metal(x) & IronOxide(y) & Surface(z) & Contains(x,y) & Contains(x,z)) -> OrangeOnSurface(x))", "all x.((Metal(x) & ContainsIronOxide(x)) -> OrangeOnSurface(x))", "all x.((Metal(x) & IronOxide(x)) -> OrangeOnSurface(x))", "all x y z.((Metal(x) & IronOxid(y) & Surface(z) & Contains(x,y)) -> OrangeOnSurface(x,z))", "all x.(ContainsIronOxide(x) -> OrangeOnSurface(x))", "all x y.((Metal(x) & IronOxide(y) & Contains(x,y)) -> OrangeOnSurface(x))", "all x.((Metal(x) & ContainsIronOxide(x)) -> OrangeOnSurface(x))", "all x.((Metal(x) & IronOxide(x)) -> OrangeOnSurface(x))", "all x y.((Metal(x) & IronOxide(y)) -> OrangeOnSurface(x,y))", "all x.((Metal(x) & ContainsIronOxide(x)) -> OrangeOnSurface(x))"]}
{"id": "eqasc_validation_1176", "nl": "In the presence of oxygen and water, iron will become orange on the surface", "fol": "", "prediction": ["all x.((PresenceOfOxygen(x) & PresenceOfWater(x)) -> IronBecomesOrangeOnSurface(x))", "all x y.((PresenceOfOxygen(x) & PresenceOfWater(y)) -> IronBecomesOrangeOnSurface(x,y))", "(PresenceOfOxygen(x) & PresenceOfWater(x)) -> OrangeOnSurface(x))", "all x y z.((Oxygen(x) & Water(y) & PresenceOf(x,y) & PresenceOf(x,z)) -> Iron(x))", "all x.((PresenceOfOxygen(x) & PresenceOfWater(x)) -> OrangeOnSurface(x))", "in presence of oxygen and water, iron will become orange on the surface.", "(PresentOfOxygenAndWater(iron) -> OrangeOnSurface(iron))", "all x y.((PresenceOfOxygen(x) & PresenceOfWater(x) & PresenceOfOxygen(y)) -> IronBecomesOrangeOnSurface(x))", "(PresenceOfOxygen(x) & PresenceOfWater(x) -> OrangeOnSurface(x))", "(PresenceOfOxygenAndWater(x) -> OrangeOnSurface(x))", "all x.((PastOfOxygen(x) & PresenceOfWater(x)) -> IronBecomesOrangeOnSurface(x))", "all x.((PresenceOfOxygen(x) & PresenceOfWater(x)) -> IronBecomesOrangeOnSurface(x))", "all x y z.((Oxygen(x) & Water(y) & PresenceOf(x,y) & PresenceOf(x,z)) -> Iron(x))", "all x y.((PresenceOfOxygen(x) & PresenceOfWater(y)) -> Iron(x))", "all x.((PresenceOfOxygen(x) & PresenceOfWater(x)) -> OrangeOnSurface(x))", "all x.((PresenceOfOxygen(x) & PresenceOfWater(x)) -> Iron(x))"]}
{"id": "eqasc_validation_1177", "nl": "Metal turns to rust via oxidation.", "fol": "", "prediction": ["all x.(Metal(x) -> TurnsToRose(x))", "all x y.((Metal(x) & Oxidation(y)) -> TurnsToRust(x,y))", "all x.(Metal(x) -> TurnsToRust(x))", "(TurnsToRose(Metal) viaOxidation(Metal))", "all x y z.((Metal(x) & Oxidation(y) & Rust(z)) -> TurnsTo(x,y,z))", "all x.((Metal(x) & Oxidation(x)) -> TurnsToRust(x))", "(TurnsToRust(Metal,Oxidation))", "all x y.((Metal(x) & Oxidation(y)) -> TurnsToRose(x,y))", "all x.(Metal(x) -> TurnsToRose(x))", "all x.(Metal(x) -> (TurnsToRust(x) & Oxidation(x)))", "all x.(Metal(x) -> TurnsToRust(x))", "all x y.((Metal(x) & Oxidation(y) & TurnsToRust(x,y)) -> Oxidation(x,y))", "all x y.((Metal(x) & Oxidation(y)) -> TurnsToRust(x,y))", "all x.(Metal(x) -> TurnsToRose(x))", "All x.(Metal(x) -> TurnsToRoseThroughOxidation(x))", "all x.(Metal(x) -> TurnsToRust(x))"]}
{"id": "eqasc_validation_1178", "nl": "oxidation makes metal orange", "fol": "", "prediction": ["all x.(Oxidation(x) -> MakesMetalOrange(x))", "all x y.((Oxidation(x) & MetalOrange(y)) -> Makes(x,y))", "all x y z.((Oxidation(x) & MetalOrange(y) & Oxidation(z)) -> Makes(x,y,z))", "Oxidation MakesMetalOrange(x))", "(OxidationMakesMetalOrange(x))", "all x y.((Oxidation(x) & MetalOrange(y)) -> MakesOrange(x,y))", "(OxidationMakesMetalOrange(x) & OxidationMakesMetalOrange(x))", "all x.(Oxidation(x) -> MakesMetalOrange(x))", "-OxidationMakesMetalOrange(x))", "Oxidation (Oxidation) -> MakesMetalOrange(x))", "Oxidation MakesMetalOrange(Orange)", "all x.(Oxidation(x) -> MakesMetalOrange(x))", "All x y.((Oxidation(x) & MetalOrange(y)) -> Makes(x,y))", "Oxidation MakesMetalOrange(Orange)", "all x.(OxidationMakesMetalOrange(x))", "all x.(Oxidation(x) -> MakesMetalOrange(x))"]}
{"id": "eqasc_validation_1179", "nl": "when iron rusts it becomes orange on the surface", "fol": "", "prediction": ["all x y.((IronRushes(x) & Iron(y)) -> OrangeOnSurface(x))", "all x.((IronRushes(x) & OrangeOnSurface(x)) -> IronRushes(x))", "all x y.((Iron(x) & Rusts(x)) -> OrangeOnSurface(y))", "all x y z.((Iron(x) & Rusts(x) & Surface(y) & Surface(z) & Orange(x)) -> Orange(x))", "all x.((IronRushes(x) & OrangeOnSurface(x)) -> IronRushes(x))", "all x y z.((IronRusts(x) & Iron(y) & Surface(z) & Rusts(y)) -> Orange(x,z))", "all x.(RotsIron(x) -> OrangeOnSurface(x))", "all x.((IronRots(x) & Orange(x)) -> OnSurface(x))", "(all x.(Rots(x) -> OrangeOnSurface(x)))", "all x y.((IronRusts(x) & Iron(y)) -> OrangeOnSurface(x,y))", "all x y z.((IronRose(x) & Iron(y) & Surface(z) & Rusts(y)) -> OrangeOnSurface(x,z))", "all x.(Roses(x) -> OrangeOnSurface(x))", "(all x.(RotsIron(x) -> Orange(x)))", "all x y.((IronRose(x) & Iron(y)) -> OrangeOnSurface(x))", "all x.((IronRushes(x) & OrangeOnSurface(x)) -> IronRushes(x))", "all x.(RotsIron(x) -> OrangeOnSurface(x))"]}
{"id": "eqasc_validation_1180", "nl": "Steel is the most useful of metals.", "fol": "", "prediction": ["all x.(Steel(x) -> MostUsefulMetal(x))", "All x y.((Steel(x) & Metal(y)) -> MostUseful(x,y))", "(MostUsefulMetal(Steel))", "all x.(Steel(x) -> MostUsefulMetal(x))", "all x.((Steel(x) & MostUsefulMetal(x)) -> MostUseful(x))", "all x.(Steel(x) -> MostUsualMetal(x))", "(MostUsualMetal(Steel) -> MostUsual(Steel))", "All x y.((Steel(x) & Metal(y)) -> MostUseful(x,y))", "all x.(Steel(x) -> MostUsefulOfMetals(x))", "(MostUsefulMetal(Steel))", "all x.((Steel(x) & MostUsualMetal(x)) -> MostUseful(x))", "all x.(Steel(x) -> MostUsualOfMetals(x))", "All x y.((Steel(x) & Metal(y)) -> MostUseful(x,y))", "all x.(Stick(x) -> TheMostUsefulMetal(x))", "all x.(Steel(x) -> MostUtilOfMetals(x))", "all x.(Steel(x) -> MostUsefulOfMetals(x))"]}
{"id": "eqasc_validation_1181", "nl": "When steel rusts it becomes orange.", "fol": "", "prediction": ["all x.((Steel(x) & Rusts(x)) -> Orange(x))", "all x.((Steel(x) & Rusts(x)) -> Orange(x))", "all x y.((Steel(x) & Rusts(x)) -> Orange(y))", "all x.(Rose(x) -> Orange(x))", "all x.(Roses(x) -> Orange(x))", "all x.((Steel(x) & Rusts(x)) -> Orange(x))", "all x y.((Steel(x) & Rusts(x)) -> Orange(y))", "all x.((Steel(x) & Ruins(x)) -> Orange(x))", "all x y.((Steel(x) & Rusting(y) & Orange(y)) -> Rusts(x,y))", "all x.((Steel(x) & Rusts(x)) -> Orange(x))", "(RosesSteel(steel) -> Orange(steel))", "all x y.((Steel(x) & Rusts(x)) -> Orange(y))", "All x.(RotsSteel(x) -> Orange(x))", "all x.(Rose(x) -> Orange(x))", "All x.(SteelRusts(x) -> Orange(x))", "all x.((Steel(x) & Rusts(x)) -> Orange(x))"]}
{"id": "eqasc_validation_1182", "nl": "Cast-iron and steel surfaces are susceptible to corrosion in the form of rust.", "fol": "", "prediction": ["all x.((Surface(x) & CastIron(x) & Steel(x)) -> SusceptibleToCorrosion(x))", "all x y.((Surface(x) & CastIron(y) & Steel(y)) -> SusceptibleToCorrosion(x,y))", "(SusceptibleToCorrosion(castiron,rust) & SusceptibleToCorrosion(steel,rust))", "all x y.((Castiron(x) & Steel(y)) -> (SensitiveToCorrosion(x,y) & FormsRust(x)))", "all x.((Castiron(x) | Steel(x)) -> SusceptibleToCorrosion(x))", "(all x.(CastironSurface(x) & All y.(SteelSurface(y)) -> SusceptibleToCorrosion(x,y)))", "all x.((Surface(x) & CastIron(x) & Steel(x)) -> SusceptibleToCorrosion(x))", "all x y.((Surface(x) & CastIron(x) & Steel(y)) -> SusceptibleToCorrosion(x,y))", "all x.((Shape(x) & (CastIron(x) | Steel(x))) -> SusceptibleToCorrosion(x))", "all x y.((Surface(x) & (CastIron(y) | Steel(y))) -> SusceptibleToCorrosion(x,y))", "(SusceptibleToCorrosion(castiron) & SusceptibleToCorrosion(steel))", "(all x.(CastIron(x) | All y.(Steel(y))) -> ResponsiveToCorrosion(x)))", "all x.(Surface(x) -> (CastIron(x) | Steel(x)) & ResponsiveToCorrosion(x) & FormsRust(x)))", "all x.((Surface(x) & CastIron(x) & Steel(x)) -> ResponsiveToCorrosion(x))", "all x y.((Castiron(x) | SteelSurface(y)) -> SusceptibleToCorrosion(x,y))", "all x.((Surface(x) & CastIron(x) & Steel(x)) -> SusceptibleToCorrosionInFormOfRust(x))"]}
{"id": "eqasc_validation_1183", "nl": "Cast-iron and steel surfaces are susceptible to becoming orange on the surface", "fol": "", "prediction": ["all x.((Surface(x) & CastIron(x) & Steel(x)) -> (SusceptibleToOrange(x)))", "all x y.((Surface(x) & CastIron(x) & Steel(y)) -> (SusceptibleToOrange(x,y) & OnSurface(x,y)))", "all x y.((Surface(x) & CastIron(y) & Steel(y)) -> (SensitiveToOrange(x,y) & OnSurface(x,y)))", "all x y z.((Surface(x) & CastIron(y) & Steel(z)) -> (SusceptibleToOrange(x,y) & OnSurface(x,z)))", "all x.((Surface(x) & CastIron(x) & Steel(x)) -> Orange(x))", "(VioletyOrangeOnSurface(castiron) & VioletyOrangeOnSurface(steel))", "all x y.((Castiron(x) & Steel(y)) -> (SusceptibleToOrange(x,y) & OnSurface(x,y)))", "(all x.(CastironSurface(x) & AllSurface(x)) -> Orange(x))", "all x.((CastironSurface(x) | SteelSurface(x)) -> (SusceptibleToOrange(x)))", "(OrangeOnSurface(castiron) & OrangeOnSurface(steel))", "(all x.(CastIronSurface(x) & AllSurface(x)) -> Orange(x))", "all x.((Surface(x) & CastIron(x) & Steel(x)) -> (SensitiveToOrange(x)))", "all x y.((Surface(x) & CastIron(x) & Steel(y)) -> (SusceptibleToOrange(x,y) & OnSurface(x,y)))", "all x.((Surface(x) & CastIron(x) & Steel(x)) -> OrangeOnSurface(x))", "all x y.((Surface(x) & CastIron(x) & Steel(y)) -> (BecomesOrange(x,y) & OnSurface(x,y)))", "all x.((Surface(x) & Castiron(x) & Steel(x)) -> Orange(x))"]}
{"id": "eqasc_validation_1184", "nl": "Yin metal is small metal, jewelery metal and decorative metal.", "fol": "", "prediction": ["all x.(YinMetal(x) -> (SmallMetal(x) & JeweleryMetal(x) & DecorativeMetal(x)))", "(all x.(YinMetal(x) -> SmallMetal(x)) & (JeweleryMetal(x) | DecorationMetal(x))))", "(SmallMetal(YinMetal) | JeweleryMetal(YinMetal) | DecorativeMetal(YinMetal))", "(SmallMetal(Yin) & JeweleryMetal(Yin) & DecorativeMetal(Yin))", "all x.(YinMetal(x) -> (SmallMetal(x) & JeweleryMetal(x) & DecoratorMetal(x)))", "all x y.((YinMetal(x) & SmallMetal(y)) -> (JeweleryMetal(x) & DecorativeMetal(x)))", "(all x.(YinMetal(x) -> SmallMetal(x)) & (JoyeryMetal(x) | DecoratorMetal(x))))", "(all x.(YinMetal(x) -> SmallMetal(x)) & all y.(JoyeryMetal(y) & DecorativeMetal(y)))", "all x.(YinMetal(x) -> (SmallMetal(x) | JeweleryMetal(x) | DecorativeMetal(x)))", "all x.(YinMetal(x) -> (SmallMetal(x) & JeweleryMetal(x) & DecorativeMetal(x)))", "(SmallMetal(YinMetal) | JeweleryMetal(YinMetal) | DecorativeMetal(YinMetal))", "all x y.((YinMetal(x) & SmallMetal(y)) -> (JeweleryMetal(x) & DecoratorMetal(x)))", "all x.(YinMetal(x) -> (SmallMetal(x) & JeweleryMetal(x) & DecorativeMetal(x)))", "(all x.(YinMetal(x) -> SmallMetal(x)) & (JeweleryMetal(x) | DecoratedMetal(x))))", "all x.(YinMetal(x) -> (SmallMetal(x) & JeweleryMetal(x) & DecorativeMetal(x)))", "all x.(YinMetal(x) -> (SmallMetal(x) & JeweleryMetal(x) & DecorativeMetal(x)))"]}
{"id": "eqasc_validation_1185", "nl": "When jewelry rusts it may become orange on the surface.", "fol": "", "prediction": ["all x.((Jewelry(x) & Rusts(x)) -> MayBecomeOrange(x))", "all x.((Joyage(x) & Rusts(x)) -> MayBecomeOrangeOnSurface(x))", "all x.((Jewelry(x) & Rusts(x)) -> MayBecomeOrangeOnSurface(x))", "all x y.((Jewelry(x) & Rusts(x)) -> MayBecomeOrange(y))", "all x y.((Joyage(x) & Rusts(x)) -> MayBecomeOrange(y))", "all x.((Jewelry(x) & Rusts(x)) -> OrangeOnSurface(x))", "all x y.((Jewelry(x) & Rusts(x)) -> (BecomesOrangeOnSurface(y)))", "all x y.((Joyage(x) & Rusts(x)) -> (BecomesOrangeOnSurface(y)))", "all x.((Joyage(x) & Rusts(x)) -> MayBecomeOrange(x))", "all x.(RotsJoyage(x) -> MayBecomeOrangeOnSurface(x))", "(all x.((Jewelry(x) & Rusts(x)) -> OrangeOnSurface(x))", "all x.(Rots(x) -> MayBecomeOrangeOnSurface(x))", "all x.((Jewelry(x) & Rusts(x)) -> MayBecomeOrange(x))", "all x.(RustsJewelry(x) -> MayBecomeOrangeOnSurface(x))", "all x y.((Jewelry(x) & Rusts(x)) -> MayBecomeOrangeOnSurface(y))", "all x.((Jewelry(x) & Rusts(x)) -> (OrangeOnSurface(x)))"]}
{"id": "eqasc_validation_1186", "nl": "Water cause parts to rust, and even a very small amount of rust can damage injectors.", "fol": "", "prediction": ["all x.((Water(x) & CausesPartsToRust(x)) -> DamagesInjectors(x))", "all x y.((Water(x) & Injector(y)) -> (CausesPartsToRust(x) & DamagesInjector(y)))", "all x.(Water(x) -> (CausesPartsToRust(x) & DamagesInjectors(x)))", "(all x.(Water(x) -> CausesPartsToRosh(x)) & (SmallAmountOfRosh(x) -> DamagesInjectors(x)))", "all x y.((Water(x) & Injector(y)) -> (CausesPartsToRosh(x) & DamagesInjector(y)))", "all x.(WaterCausesPartsToRust(x) & (SmallAmountOfRust(x) -> DamagesInjectors(x)))", "(all x y.((Water(x) & Part(y)) -> CausesRust(x,y)) & ((Rose(y) & Injector(y)) | Damages(y))))", "all x y z.((Water(x) & Injector(y) & Injector(z)) -> (CausesPartsToRust(x,y) & DamagesInjector(y,z)))", "(all x.(Water(x) -> CausesPartsToRust(x)) & (SmallAmountOfRust(x) -> DamagesInjectors(x)))", "all x.((Water(x) & CausesPartsToRosh(x)) -> DamagesInjectors(x))", "exists x.(Water(x) & CausesPartsToRot(x) & exists y.(SmallAmountOfRot(y) & DamagesInjectors(y)))", "(all x.(Water(x) -> CausesPartsToRose(x)) & all y.(SmallAmountOfRose(y) -> DamagesInjectors(y)))", "all x.(Water(x) -> (CausesPartsToRosh(x) & DamagesInjectors(x)))", "all x y.((Water(x) & Injector(y)) -> (CausesPartsToRust(x,y) & DamagesInjector(x,y)))", "(all x.(Water(x) -> CausesPartsToRust(x)) & exists y.(SmallAmountOfRust(y) & DamagesInjectors(y))))", "all x y.((Water(x) & Injector(y)) -> (CausesPartsToRose(x,y) & DamagesInjector(x,y)))"]}
{"id": "eqasc_validation_1187", "nl": "water causes metal surface to become orange", "fol": "", "prediction": ["all x y.((Water(x) & MetalSurface(y)) -> OrangeSurface(x,y))", "all x.((Water(x) & MetalSurface(x)) -> OrangeSurface(x))", "all x y z.((Water(x) & MetalSurface(y) & MetalSurface(z)) -> CausesToBecomeOrange(y,z))", "all x.(WaterCausesMetalSurfaceToBecomeOrange(x))", "(CausesMetalSurfaceToBecomeOrange(Water))", "(OrangeSurface(water) -> CausesMetalSurfaceToBecomeOrange(water))", "all x y.((Water(x) & MetalSurface(y)) -> Orange(y))", "(OrangeMetalSurface(water) -> CausesMetalSurfaceToBecomeOrange(water))", "all x.((Water(x) & MetalSurface(y)) -> Orange(y))", "all x y z.((Water(x) & MetalSurface(y) & MetalSurface(z)) -> CausesToBecomeOrange(x,y,z))", "all x y.((Water(x) & MetalSurface(y)) -> CausesOrangeSurface(x,y))", "(OrangeSurface(Water) & CausesMetalSurfaceToBecomeOrange(Water))", "all x.(WaterCausesMetalSurfaceToBecomeOrange(x))", "all x y.((Water(x) & MetalSurface(y) & CausesOrangeSurface(x,y)) -> OrangeSurface(x))", "all x.((Water(x) & MetalSurface(x)) -> OrangeSurface(x))", "all x.(WaterCausesMetalSurfaceToBecomeOrange(x))"]}
{"id": "eqasc_validation_1188", "nl": "when sound reaches the ear , that sound can be heard", "fol": "", "prediction": ["all x y z.((Sound(x) & Ear(y) & Sound(z) & Reaches(x,y)) -> CanBeHeard(x,z))", "all x y.((Sound(x) & SoundReachesEar(x)) -> CanBeHeard(y))", "all x y z w.((Sound(x) & Ear(y) & Ear(z) & Reaches(x,y)) -> CanBeHeard(x,z))", "all x.((SoundReachesEar(x) & SoundCanBeHeard(x)) -> CanBeHeard(x))", "all x y z.((Sound(x) & Ear(y) & Sound(z) & Reaches(x,y)) -> CanBeHeard(x,z))", "(all x y z.((Sound(x) & Ear(y) & Reaches(x,y)) -> CanBeHeard(x,z)))", "-(SoundReachesEar(x) & CanBeHeard(x)))", "all x y.((Sound(x) & Sound(y) & ReachesEar(x,y)) -> CanBeHeard(x,y))", "all x y.((Sound(x) & ReachesEar(x)) -> CanBeHeard(y))", "all x y z.((Sound(x) & Ear(y) & Sound(z) & Reaches(x,y,z)) -> CanBeHeard(x,y))", "all x.((Sound(x) & ReachesEar(x)) -> CanBeHeard(x))", "all x.((SoundReachesEar(x)) -> CanBeHeard(x))", "all x.((SoundReachesEar(x) & CanBeHeard(x)) -> CanBeHeard(x))", "all x y.((Sound(x) & Ear(y) & Reaches(x,y)) -> CanBeHeard(x))", "all x y z.((Sound(x) & Ear(y) & Reaches(x,y)) -> CanBeHeard(x,z))", "all x.((SoundReachesEar(x)) -> CanBeHeard(x))"]}
{"id": "eqasc_validation_1189", "nl": "Sound waves cause the eardrum to vibrate.", "fol": "", "prediction": ["all x.(SoundWaves(x) -> CausesEardrumVibration(x))", "all x y.((SoundWaves(x) & Eardrum(y)) -> CausesVibration(x,y))", "all x.((SoundWaves(x) & Eardrum(y)) -> Vibrate(x,y))", "all x y z.((SoundWaves(x) & Eardrum(y) & Eardrum(z)) -> CausesVibration(x,y,z))", "all x y.((SoundWaves(x) & Eardrum(y)) -> Vibrate(x,y))", "all x.(SoundWaves(x) -> CausesEardrumVibration(x))", "all x.(SoundWaves(x) -> CausesEardrumToVibrate(x))", "all x.((SoundWaves(x) & EardrumVibration(x)) -> CausesVibration(x))", "all x y.((SoundWaves(x) & Eardrum(y)) -> CausesVibration(x,y))", "all x y z.((SoundWaves(x) & Eardrum(y) & Eardrum(z)) -> CausesVibration(x,y,z))", "All x.(SoundWavesCausesEardrumToVibrate(x) -> -CausesEardrumVibration(x))", "all x y.((SoundWaves(x) & Eardrum(y)) -> Vibrates(x,y))", "All x.((SoundWaves(x) & Eardrum(y)) -> Vibrate(x,y))", "all x.(SoundWaves(x) -> CausesEardrumVibration(x))", "all x y.((SoundWaves(x) & Eardrum(y)) -> CausesVibration(x,y))", "all x.(SoundWaves(x) -> CausesEardrumToVibrate(x))"]}
{"id": "eqasc_validation_1190", "nl": "One can hear when sonic waves cause the eardrum to vibrate. ", "fol": "", "prediction": ["all x y.((SonicWaves(x) & Eardrum(y)) -> Vibrate(x,y))", "all x.((SonicWaves(x) & CausesEardrumVibration(x)) -> CanHear(x))", "all x y z.((SonicWaves(x) & Eardrum(y) & SonicWaves(z) & CausesVibration(x,y,z)) -> CanHear(x))", "all x y.((SonicWaves(x) & Eardrum(y)) -> Vibrate(x,y))", "all x.((SonicWaves(x) & CausesEardrumVibration(x)) -> CanHear(x))", "all x y.((SonicWaves(x) & Eardrum(y) & CausesVibration(x,y)) -> CanHear(x))", "exists x.(SonicWaves(x) & CausesEardrumVibration(x))", "all x y z.((SonicWaves(x) & Eardrum(y) & SonicWaves(z) & CausesVibration(y,z)) -> CanHear(x))", "all x.((SonicWaves(x) & CausesEardrumToVibrate(x)) -> CanHear(x))", "exists x.(SonicWaves(x) & CausesEardrumToVibrate(x))", "all x y.((SonicWaves(x) & Eardrum(y)) -> CausesVibration(x,y))", "all x.((SonicWaves(x) & CausesEardrumVibration(x)) -> CanHear(x))", "exists x.(SonicWaves(x) & CausesEardrumVibration(x))", "all x y.((SonicWaves(x) & Eardrum(y) & CausesVibration(x,y)) -> CanHear(x))", "exists x.(SonicWaves(x) & CausesEardrumToVibrate(x))", "all x y.((SonicWaves(x) & Eardrum(y)) -> Vibrates(x,y))"]}
{"id": "eqasc_validation_1191", "nl": "Nevertheless, the sharpest sounds are perceived in the brain.", "fol": "", "prediction": ["all x.(SharpestSound(x) -> PerceivedInBrain(x))", "all x y.((SharpestSound(x) & Brain(y)) -> PerceivedIn(x,y))", "(SharpestSoundsPerceivedInBrain(x) & -SharpestSoundsPerceivedInBrain(x))", "Nevertheless, the sharpestsounds are perceived in the brain.", "all x.(SharpestSound(x) -> PerceivedInBrain(x))", "(SharpestSounds(x) & PerceivedInBrain(x))", "all x.((SharpestSound(x) & PerceivedInBrain(x)) -> PerceivedInBrain(x))", "all x y.((SharpestSound(x) & Brain(y)) -> PerceivedIn(x,y))", "all x.(SharpestSounds(x) -> PerceivedInBrain(x))", "Despite this, the sharpest sounds are perceived in the brain.", "(all x.(SharpestSound(x) -> PerceivedInBrain(x)))", "all x.(SharpestSound(x) -> PerceivedInBrain(x))", "all x y.((SharpestSound(x) & Brain(y)) -> PerceivedIn(x,y))", "all x y.((SharpestSound(x) & Brain(y)) -> PerceivedIn(x,y))", "exists x.(SharpestSound(x) & PerceivedInBody(x))", "exists x.(SharpestSound(x) & PerceivedInBrain(x))"]}
{"id": "eqasc_validation_1192", "nl": "noise is processed when it reaches the brain", "fol": "", "prediction": ["all x.((Noise(x) & ReachesBrain(x)) -> Processed(x))", "all x y.((Noise(x) & Brain(y) & Reaches(x,y)) -> Processed(x))", "all x y z.((Noise(x) & Brain(y) & Brain(z) & Reaches(x,y,z)) -> Processed(x))", "all x.((Noise(x) & ReachesBrain(x)) -> Processed(x))", "all x y.((Noise(x) & Brain(y) & Reaches(x,y)) -> Processed(x))", "all x.((Noise(x) & Brain(x)) -> Processed(x))", "(ProcessedWhenBrainReachesNoise(noise) -> NoiseReachesBrain(noise))", "all x y.((Noise(x) & Brain(y)) -> ProcessedWhenReaches(x,y))", "all x.((NeuralNoise(x) & ReachesBrain(x)) -> Processed(x))", "(ProcessedWhenBrainReachesNight(noise) -> NoiseReachesBody(noise))", "All x y.((NeuralNoise(x) & Brain(y)) -> ProcessedWhenReaches(x,y))", "all x y z.((Noise(x) & Brain(y) & Brain(z) & Reaches(x,y,z)) -> Processed(x))", "all x.((Noise(x) & ReachesBrain(x)) -> Processed(x))", "all x.((Noise(x) & Brain(x)) -> Processed(x))", "all x y.((Noise(x) & Brain(y) & Reaches(x,y)) -> Processed(x))", "all x.((Noise(x) & ReachesBrain(x)) -> Processed(x))"]}
{"id": "eqasc_validation_1193", "nl": "For sound, the sense of hearing is used.", "fol": "", "prediction": ["all x.(Sound(x) -> UsesSenseOfHearing(x))", "all x.((SenseOfHearing(x) & Sound(x)) -> Used(x))", "all x y.((Sound(x) & SenseOfHearing(y)) -> Used(x,y))", "all x.((SenseOfHearing(x) & Sound(x)) -> Used(x))", "all x.(SenseOfHearing(x) -> UsedForSound(x))", "(all x.(Sound(x) -> UsesSenseOfHearing(x)))", "all x.(Sound(x) -> UsedForHearing(x))", "all x y.((SenseOfHearing(x) & Sound(y)) -> Used(x,y))", "all x y.((Sound(x) & HearingSense(y)) -> Used(x,y))", "(all x.(Sound(x) -> UsesSenseOfHearing(x)))", "exists x.(SenseOfHearing(x) & UsedForSound(x))", "all x.(Sound(x) -> UsesSenseOfHearing(x))", "(all x.(Sound(x) -> UsedFor(x)))", "all x y.((SenseOfHearing(x) & Sound(y)) -> Used(x,y))", "all x.(SenseOfHearing(x) -> UsedForSound(x))", "exists x.(SenseOfHearing(x) & UsedForSound(x))"]}
{"id": "eqasc_validation_1194", "nl": "ears are used for hearing", "fol": "", "prediction": ["all x.(Ears(x) -> UsedForHearing(x))", "all x y.((Ears(x) & Hearing(y)) -> UsedFor(x,y))", "all x.(Ears(x) -> UsedForHearing(x))", "(all x.(Ears(x) -> UsedForHearing(x)))", "all x y z.((Ears(x) & Hearing(y) & Hearing(z)) -> UsedFor(x,y,z))", "all x y.((Ear(x) & Hearing(y)) -> UsedFor(x,y))", "(UsedForHearing(e) -> Ears(e))", "all x y.((Ears(x) & Hearing(y)) -> UsedFor(x,y))", "all x y z.((Ear(x) & HearingEar(y) & HearingEar(z)) -> UsedFor(x,y,z))", "all x.(Ears(x) -> UsedForHearing(x))", "all x y.((Ears(x) & Hearing(y) & UsedFor(x,y)) -> UsedFor(x,y))", "all x.(Ears(x) -> UsedForHearing(x))", "All x.(Ear(x) -> UsedForHearing(x))", "all x.(Ears(x) -> UsedForHearing(x))", "all x.(Ears(x) -> UsedForHearing(x))", "all x.(Ears(x) -> UsedForHearing(x))"]}
{"id": "eqasc_validation_1195", "nl": "Sound waves make the ear drum vibrate.", "fol": "", "prediction": ["all x.(SoundWaves(x) -> MakesEarDrumVibrate(x))", "all x y.((SoundWaves(x) & EarDrum(y)) -> Vibrate(x,y))", "all x y.((SoundWaves(x) & EarDrum(y)) -> Vibrates(x,y))", "all x y z.((SoundWaves(x) & EarDrum(y) & Vibrate(z)) -> Makes(x,y,z))", "all x.((SoundWaves(x) & EarDrum(y)) -> Vibrate(x,y))", "all x.(SoundWaves(x) -> MakesEarDrumVibrate(x))", "all x.((SoundWaves(x) & EarDrumVibrate(x)) -> MakesVibrate(x))", "all x y.((SoundWaves(x) & EarDrum(y)) -> Vibrates(x,y))", "(VibrateEarDrum(soundWaves)", "all x.(SoundWaves(x) -> MakesEarDrumVibrate(x))", "All x y z.((SoundWaves(x) & EarDrum(y) & Vibrate(z)) -> Makes(x,y,z))", "all x.(SoundWaves(x) -> MakesEarDrumVibrate(x))", "all x y.((SoundWaves(x) & EarDrum(y)) -> Vibrates(x,y))", "all x.(SoundWaves(x) -> VibrateEardrum(x))", "all x y.((SoundWaves(x) & EarDrum(y)) -> Vibrates(x,y))", "all x.(SoundWaves(x) -> MakeEarDrumVibrate(x))"]}
{"id": "eqasc_validation_1196", "nl": "When a wave reaches your ear, your ear drum vibrates and you can hear it", "fol": "", "prediction": ["all x y z.((Wave(x) & Ear(y) & EarDrum(z)) -> (Reaches(x,y) & Vibrates(z,y) & CanHear(x,z)))", "all x y.((Wave(x) & Ear(y)) -> (Reaches(x,y) & EarDrumVibration(x) & CanHear(x,y)))", "all x.((Wave(x) & ReachesEar(x)) -> (EarDrumVibration(x) & CanHear(x)))", "all x y z.((Wave(x) & Ear(y) & EarDrum(z) & Reaches(x,y)) -> (Vibrates(z,y) & CanHear(z,y)))", "(ReachesEar(wave) & EarDrumVibration(eardrum,wave) & CanHear(eardrum,wave))", "all x y z.((Wave(x) & Ear(y) & Eardrum(z) & Reaches(x,y)) -> (Vibrates(z,y) & CanHear(z,y)))", "all x y.((Wave(x) & Ear(y) & Reaches(x,y)) -> (Vibrates(x,y) & CanHear(x,y)))", "all x.((Wave(x) & ReachesEar(x)) -> (EarDrumVibration(x) & CanHear(x)))", "(ReachesEar(w) & EardrumVibrates(w) & CanHear(w))", "all x y.((Wave(x) & Ear(y) & Reaches(x,y)) -> (EarDrumVibration(x,y) & CanHear(x,y)))", "all x y z.((Wave(x) & Ear(y) & EarDrum(z)) -> (Reaches(x,y) & Vibrates(x,z) & CanHear(x,y)))", "all x.((Wave(x) & ReachesEar(x)) -> (VibratesEarDrum(x) & CanHear(x)))", "all x.((Wave(x) & ReachesEar(x)) -> (EarDrumVibrates(x) & CanHear(x)))", "all x.((WaveReachesEar(x)) -> (EarDrumVibration(x) & CanHear(x)))", "all x y z.((Wave(x) & Ear(y) & Eardrum(z) & Reaches(x,y)) -> (Vibrates(z,y) & CanHear(z,y)))", "all x.((Wave(x) & ReachesEar(x)) -> (EardrumVibrates(x) & YouCanHear(x)))"]}
{"id": "eqasc_validation_1197", "nl": "Music is sound, sound is energy.", "fol": "", "prediction": ["all x.(Music(x) -> (Sound(x) | Energy(x)))", "all x y.((Music(x) & Sound(y)) -> (IsSound(x) & IsEnergy(y)))", "(all x.(Music(x) -> Sound(x)) & all y.(Sound(y) -> Energy(y)))", "all x y.((Music(x) & Sound(y)) -> (Sound(x) & Energy(y)))", "all x.(Music(x) -> (Sound(x) & Energy(x)))", "(all x.(Music(x) -> Sound(x)) & all y.(Sound(y) -> Energy(y)))", "(all x y.((Music(x) & Sound(y)) -> Sound(x)) & ((Sound(x) & Energy(y)) -> Sound(x)))", "all x y z.((Music(x) & Sound(y) & Energy(z)) -> (IsSound(x,y) & IsSound(y,z)))", "all x y.((Music(x) & Sound(y)) -> (Is(x,y) & Is(x,y)))", "all x.(Music(x) -> (Sound(x) | Energy(x)))", "(all x.(Music(x) -> Sound(x)) & all y.(Sound(y) -> Energy(y)))", "exists x.(Music(x) & Sound(x) & Energy(x))", "all x y.((Music(x) & Sound(y)) -> (Sound(x) & Energy(y)))", "all x.(Music(x) -> (Sound(x) | Energy(x)))", "(all x.(Music(x) -> Sound(x)) & all y.(Sound(y) -> Energy(y)))", "(all x.(Music(x) -> Sound(x)) & all y.(Sound(y) -> Energy(y)))"]}
{"id": "eqasc_validation_1198", "nl": "when music reaches the ear that music can be heard", "fol": "", "prediction": ["all x y.((Music(x) & ReachesEar(x)) -> MusicCanBeHeard(y))", "all x y z.((Music(x) & Ear(y) & Ear(z) & Reaches(x,y)) -> MusicCanBeHeard(x,z))", "all x y.((Music(x) & Ear(y) & Reaches(x,y)) -> MusicCanBeHeard(x))", "all x.((MusicReachesEar(x) & MusicCanBeHeard(x)) -> CanBeHeard(x))", "all x y z.((Music(x) & Ear(y) & Music(z) & Reaches(x,y)) -> MusicCanBeHeard(x,z))", "all x.((MusicReachesEar(x) & MusicCanBeHeard(x)) -> MusicCanBeHeard(x))", "(all x.((MusicReachesEar(x) & MusicCanBeHeard(x)) -> MusicCanBeHeard(x)))", "all x y.((MusicReachesEar(x) & MusicCanBeHeard(y)) -> MusicCanBeHeard(y))", "all x y.((Music(x) & ReachesEar(x)) -> MusicCanBeHeard(y))", "all x y z.((Music(x) & Ear(y) & Ear(z) & Reaches(x,y,z)) -> MusicCanBeHeard(x))", "all x.((MusicReachesEar(x) & MusicCanBeHeard(x)) -> CanBeHeard(x))", "exists an ear (ear) that can be heard by music.", "all x y.((MusicReachesEar(x) & MusicCanBeHeard(y)) -> CanBeHeard(y))", "all x.((MusicReachesEar(x) & ReachesEar(x)) -> MusicCanBeHeard(x))", "all x.((MusicReachesEar(x) & CanBeHeard(x)) -> MusicCanBeHeard(x))", "all x.((MusicReachesEar(x) & MusicCanBeHeard(x)) -> CanBeHeard(x))"]}
{"id": "eqasc_validation_1199", "nl": "when music reaches the ear, it can be heard", "fol": "", "prediction": ["all x.((MusicReachesEar(x) & ReachesEar(x)) -> CanBeHeard(x))", "all x y.((Music(x) & ReachesEar(x)) -> CanBeHeard(y))", "all x y z.((Music(x) & Ear(y) & Ear(z) & Reaches(x,y)) -> CanBeHeard(x,z))", "all x.((MusicReachesEar(x) & ReachesEar(x)) -> CanBeHeard(x))", "(all x.((MusicReachesEar(x)) -> CanBeHeard(x)))", "all x y.((Music(x) & Ear(y) & Reaches(x,y)) -> CanBeHeard(x))", "all x y.((Music(x) & ReachesEar(x)) -> CanBeHeard(y))", "all x y z.((Music(x) & Ear(y) & Music(z) & Reaches(x,y)) -> CanBeHeard(x,z))", "all x.((Music(x) & ReachesEar(x)) -> CanBeHeard(x))", "all x.((MusicReachesEar(x) & ReachesEar(x)) -> CanBeHeard(x))", "all x.(MusicReachesEar(x) -> CanBeHeard(x))", "all x y z.((Music(x) & Ear(y) & Ear(z) & Reaches(x,y)) -> CanBeHeard(x))", "all x.((MusicReachesEar(x) & ReachesEar(x)) -> CanBeHeard(x))", "all x.(MusicReachesEar(x) -> CanBeHeard(x))", "all x y.((Music(x) & ReachesEar(x,y)) -> CanBeHeard(y))", "all x.((MusicReachesEar(x) & ReachesEar(x)) -> CanBeHeard(x))"]}
{"id": "eqasc_validation_1200", "nl": "Music is basically sound produced by vibrations.", "fol": "", "prediction": ["all x.(Music(x) -> (ProducedByVibrations(x) & Sound(x)))", "all x y.((Music(x) & Vibrations(y)) -> SoundProducedBy(x,y))", "all x.(Music(x) -> SoundProducedByVibrations(x))", "all x.(Music(x) -> ProducedByVibrations(x))", "all x.(Music(x) -> (SoundProducedByVibrations(x)))", "all x y.((Music(x) & Vibration(y)) -> ProducedBy(x,y))", "all x.(Music(x) -> (ProducedByVibrations(x) & Sound(x)))", "(all x.(Music(x) -> ProducedByVibrations(x)))", "all x y.((Music(x) & Vibrations(y)) -> ProducesSound(x,y))", "all x.(Music(x) -> SoundProducedByVibrations(x))", "(all x.(Music(x) -> ProducedByVibrations(x)))", "all x.(Music(x) -> (SoundProducedByVibrations(x)))", "all x.(Music(x) -> ProducedByVibrations(x))", "all x y.((Music(x) & Vibrations(y)) -> SoundProducedBy(x,y))", "all x.(Music(x) -> (Vibrations(x) & SoundProducedBy(x)))", "All x.(Music(x) -> Vibrations(x))"]}
{"id": "eqasc_validation_1201", "nl": "When vibrations reach the ear, music can be heard.", "fol": "", "prediction": ["all x.((VibrationsReachEar(x)) -> MusicCanBeHeard(x))", "all x y.((Vibration(x) & Ear(y) & Reaches(x,y)) -> MusicCanBeHeard(x))", "all x y.((Vibration(x) & Ear(y)) -> CanBeHeard(x,y))", "all x.((VibrationsReachesEar(x)) -> MusicCanBeHeard(x))", "all x y z.((Vibration(x) & Ear(y) & Vibration(z) & Reaches(x,y,z)) -> MusicCanBeHeard(x))", "all x y.((Vibrations(x) & Ear(y)) -> CanBeHeard(x,y))", "all x.((Vibrations(x) & ReachEar(x)) -> MusicCanBeHeard(x))", "(ReachesEarVibrations(x) -> MusicCanBeHeard(x))", "all x y z.((Vibration(x) & Ear(y) & Music(z) & Reaches(x,y)) -> CanBeHeard(z))", "all x.((VibrationsReachesEar(x) & MusicCanBeHeard(x)) -> VibrationsReachEar(x))", "all x.(VibrationsReachEar(x) -> MusicCanBeHeard(x))", "all x.((VibrationsReachEar(x)) -> MusicCanBeHeard(x))", "all x y.((Vibration(x) & Ear(y) & Reaches(x,y)) -> CanBeHeard(x))", "all x.((Vibration(x) & ReachEar(x)) -> MusicCanBeHeard(x))", "all x y.((Vibrations(x) & Ear(y)) -> CanBeHeard(x,y))", "all x.((Vibrations(x) & ReachEar(x)) -> MusicCanBeHeard(x))"]}
{"id": "eqasc_validation_1202", "nl": "Otoacoustic emissions are sounds the ear generates.", "fol": "", "prediction": ["all x.(OtoacousticEmissions(x) -> GeneratesSounds(x))", "all x y.((OtoacousticEmission(x) & Ear(y)) -> GeneratesSound(x,y))", "all x.(OtoacousticEmission(x) -> GeneratesSounds(x))", "OtoacousticEmissions(OtoacousticEmissions) -> GeneratesSounds(OtoacousticEmissions))", "OtoacousticEmissions(Ottoacoustic) -> GeneratesSounds(Ottoacoustic))", "all x.((Emission(x) & Otoacoustic(x)) -> GeneratesSounds(x))", "all x y.((OtoacousticEmission(x) & Ear(y)) -> GeneratesSounds(x,y))", "all x.(OtoacousticEmissions(x) -> GeneratesSounds(x))", "all x y.((OtoacousticEmissions(x) & Ear(y)) -> GeneratesSounds(x,y))", "all x.(OtoacousticEmission(x) -> GeneratesSounds(x))", "all x y.((Ear(x) & OtoacousticEmission(x)) -> GeneratesSound(y))", "all x.((Ear(x) & OtoacousticEmissions(x)) -> GeneratesSounds(x))", "all x.(OtoacousticEmission(x) -> (Sound(x) & Generates(x)))", "all x.(OtoacousticEmissions(x) -> SoundEarGenerates(x))", "all x.(OtoacousticEmissions(x) -> SoundsEarGenerates(x))", "All x.(OtoacousticEmission(x) -> GeneratesSounds(x,ear,e))"]}
{"id": "eqasc_validation_1203", "nl": "The vibrations that reach the ear to make noise are Otoacoustic", "fol": "", "prediction": ["all x.((Vibration(x) & ReachesEar(x) & MakesNoise(x)) -> Otoacoustic(x))", "all x.((Vibrations(x) & ReachEar(x) & MakeNoise(x)) -> Otoacoustic(x))", "all x y.((Vibration(x) & Ear(y) & ReachesToMakeNoise(x,y)) -> Otoacoustic(x))", "all x.((Vibration(x) & ReachEar(x) & MakeNoise(x)) -> Otoacoustic(x))", "all x y z.((Vibration(x) & Ear(y) & Ear(z) & ReachesToMakeNoise(x,y,z)) -> Otoacoustic(x))", "all x y.((Vibration(x) & Ear(y) & Reaches(x,y) & MakesNoise(x)) -> Otoacoustic(x))", "all x.((Vibrations(x) & ReachEarToMakeNoise(x)) -> Otoacoustic(x))", "(all x.((Vibrations(x) & ReachEarToMakeNoise(x)) -> Otoacoustic(x))", "(all x.((Vibration(x) & ReachesEar(x)) -> Otoacoustic(x))", "all x.((Vibration(x) & ReachesEar(x) & MakesNoise(x)) -> Otoacoustic(x))", "all x y z.((Vibration(x) & Ear(y) & Ear(z) & ReachesToMakeNoise(x,y,z)) -> Otoacoustic(x))", "all x y.((Vibration(x) & Ear(y) & ReachesToMakeNoise(x,y)) -> Otoacoustic(x))", "all x.((Vibrations(x) & ReachEarToMakeNoise(x)) -> Otoacoustic(x))", "all x.((Vibration(x) & ReachEarToMakeNoise(x)) -> Otoacoustic(x))", "all x y.((Vibration(x) & Ear(y) & Reaches(x,y) & MakesNoise(x)) -> Otoacoustic(x))", "All x.((Vibration(x) & ReachEar(x) & MakeNoise(x)) -> Otoacoustic(x))"]}
{"id": "eqasc_validation_1204", "nl": "When the vibrations reach our ears, they are changed into sounds.", "fol": "", "prediction": ["all x.((Vibrations(x) & ReachEars(x)) -> ChangedIntoSounds(x))", "all x y.((Vibration(x) & Ear(y) & Reaches(x,y)) -> ChangedIntoSounds(x))", "all x y.((Vibrations(x) & Ears(y)) -> ChangedIntoSounds(x,y))", "all x.((Vibrations(x) & ReachEars(x)) -> ChangedIntoSounds(x))", "all x y z.((Vibration(x) & Ears(y) & Vibrations(z) & Reach(x,y)) -> ChangedIntoSounds(x,z))", "all x.((VibrationsReachesEars(x) & ChangedIntoSounds(x)) -> VibrationsReachesEars(x))", "all x.((Vibrations(x) & ReachesEars(x)) -> ChangedIntoSounds(x))", "all x y.((Vibration(x) & Ear(y) & Reaches(x,y)) -> ChangedIntoSound(x))", "all x.(VibrationsReachesEars(x) -> ChangedIntoSounds(x))", "all x.((Vibrations(x) & ReachEars(x)) -> ChangedIntoSounds(x))", "all x.((VibrationsAtEars(x) & Reaches(x)) -> ChangedIntoSounds(x))", "all x y.((Vibrations(x) & Ears(y)) -> ChangedIntoSounds(x,y))", "All x y z.((Vibration(x) & Ears(y) & Vibrations(z) & Reach(x,y)) -> ChangedIntoSounds(x,z))", "(all x.((Vibrations(x) & ReachEars(x)) -> ChangedIntoSounds(x))", "all x y.((Vibration(x) & Ear(y) & Reaches(x,y)) -> ChangedIntoSounds(x))", "all x.((Vibration(x) & ReachesEars(x)) -> ChangedIntoSounds(x))"]}
{"id": "eqasc_validation_1205", "nl": "When vibrations reach our ears, they can be heard.", "fol": "", "prediction": ["all x.((Vibrations(x) & ReachEars(x)) -> CanBeHeard(x))", "all x y.((Vibration(x) & Ear(y) & Reaches(x,y)) -> CanBeHeard(x))", "all x.((Vibrations(x) & ReachEars(x)) -> CanBeHeard(x))", "all x y z.((Vibration(x) & Ear(y) & Ear(z) & Reaches(x,y,z)) -> CanBeHeard(x))", "all x y.((Vibration(x) & Ear(y) & Reaches(x,y)) -> CanBeHeard(x))", "all x.((Vibration(x) & ReachEars(x)) -> CanBeHeard(x))", "all x.(VibrationsReachesEars(x) -> CanBeHeard(x))", "all x.((VibrationsReachesEars(x)) -> CanBeHeard(x))", "all x.((Vibrations(x) & ReachEars(x)) -> CanBeHeard(x))", "all x.((Vibration(x) & ReachesEars(x)) -> CanBeHeard(x))", "all x y.((Vibration(x) & Ear(y) & Reach(x,y)) -> CanBeHeard(x))", "all x y.((Vibration(x) & Ear(y) & Reaches(x,y)) -> CanBeHeard(x))", "all x y.((Vibration(x) & Ears(y) & Reach(x,y)) -> CanBeHeard(x))", "All x.(VibrationsReachesEars(x) -> CanBeHeard(x))", "all x y.((Vibrations(x) & Ears(y)) -> CanBeHeard(x,y))", "all x.((Vibrations(x) & ReachEars(x)) -> CanBeHeard(x))"]}
{"id": "eqasc_validation_1206", "nl": "measuring the hardness of minerals requires scratching those materials", "fol": "", "prediction": ["all x y.((Mineral(x) & Mineral(y)) -> MeasuresHardnessRequiresScraping(x,y))", "all x.((Mineral(x) & MeasuresHardness(x)) -> Scratches(x))", "(MeasuresHardnessOfMinerals(MeasuresHardnessOfMinerals(MeasuresHardnessOfMinerals) & ScratchesMaterials(Materials))", "all x y.((MeasuresHardnessOfMinerals(x) & ScratchesMinerals(y)) -> MeasuresHardnessOfMinerals(x,y))", "all x.(MeasuresHardnessOfMinerals(x) -> ScratchesMaterials(x))", "all x.((MeasuresHardnessOfMinerals(x) & ScratchesMinerals(x)) -> MeasuresHardnessOfMinerals(x))", "all x y z.((Mineral(x) & Hardness(y) & Material(z)) -> MeasuresRequiresScraping(x,y,z))", "all x y.((Mineral(x) & Mineral(y)) -> MeasuresHardnessRequiresCratching(x,y))", "(MeasuringHardnessOfMineralsRequiresCracking(Materials) & MeasuresHardnessOfMinerals(Materials))", "all x y z.((MeasuresHardnessOfMinerals(x) & Material(y) & Material(z)) -> Scratches(x,y,z))", "(MeasuresHardnessOfMinerals(x) & ScratchesMaterials(x))", "all x.((Minerals(x) & Hardness(x)) -> Scratches(x))", "all x.(MeasuringHardnessOfMinerals(x) -> ScratchesMaterials(x))", "all x y.((MeasuresHardnessOfMinerals(x) & ScratchesMinerals(y)) -> Requires(x,y))", "all x y.((Mineral(x) & Hardness(y)) -> Scratches(x,y))", "all x.(MeasuresHardnessOfMinerals(x) -> ScratchesMaterials(x))"]}
{"id": "eqasc_validation_1207", "nl": "For ranking the hardness of minerals, the Mohs scale is generally used.", "fol": "", "prediction": ["all x.((MohsScale(x) & Mineral(y)) -> UsedForRankingHardness(x,y))", "all x y.((MohsScale(x) & Mineral(y)) -> UsedForRankingHardness(x,y))", "all x.(MohsScale(x) -> UsedForRankingHardnessOfMinerals(x))", "(RanksHardnessOfMinerals(MohsScale) & UsedForRankingMinerals(MohsScale))", "all x.((MineralHardness(x) & MohsScale(x)) -> UsedForRanking(x))", "all x.((MohsScale(x) & Mineral(y)) -> RankingHardness(x,y))", "(all x.(MohsScale(x) -> RankingHardnessOfMinerals(x)))", "all x y.((Mineral(x) & MohsScale(y)) -> UsedForRankingHardness(y,x))", "all x y.((MohsScale(x) & Mineral(y)) -> UsedForRankingHardness(x,y))", "(all x.(Mineral(x) -> MohsScale(x)))", "all x.(MohsScale(x) -> RankingHardnessOfMinerals(x))", "all x y.((MohsScale(x) & Mineral(y)) -> RankingHardness(x,y))", "(all x.(Hardness(x) -> MohsScale(x))", "all x.(MohsScale(x) -> UsedForRecognitionOfHardness(x))", "all x.(MineralHardness(x) -> MohsScale(x))", "all x y.((MohsScale(x) & Mineral(y)) -> UsedForRecognition(x,y))"]}
{"id": "eqasc_validation_1208", "nl": "Scratching a mineral  allows one to determine the ranking on the Mohs scale", "fol": "", "prediction": ["all x y.((Mineral(x) & Scratching(x,y)) -> DeterminesRankingOnMohsScale(x))", "all x y z.((Mineral(x) & Scratching(x,y) & MohsScale(z)) -> DeterminesRanking(x,z))", "all x.((Mineral(x) & Scratches(x)) -> DeterminesRankingOnMohsScale(x))", "all x.(ScratchingMineral(x) -> DeterminesRankingOnMohsScale(x))", "all x y z.((Mineral(x) & Scratching(x,y) & MohsScale(z)) -> DeterminesRankingOnScale(x,z))", "all x y.((Mineral(x) & Scratching(x,y)) -> DeterminesRatingOnMohsScale(x,y))", "(all x y.((Mineral(x) & Scratching(x,y)) -> DeterminesRankingOnMohsScale(x,y)))", "all x y.((Mineral(x) & Scratching(x)) -> DeterminesRankingOnMohsScale(x,y))", "all x.((Mineral(x) & Scratches(x)) -> DeterminesRatingOnMohsScale(x))", "all x.(ScratchingMineral(x) -> DeterminesRankingOnMohsScale(x))", "all x y.((Mineral(x) & Scratches(x,y)) -> (AllowsRunningOnMohsScale(x,y) & DeterminesRankingOnMohsScale(x,y)))", "all x y z.((Mineral(x) & Scratching(x,y) & MohsScale(z)) -> AllowsRunning(x,z))", "all x y z.((Mineral(x) & Scratching(x,y) & MohsScene(z)) -> DeterminesRanking(x,z))", "all x y.((Mineral(x) & Scratching(x,y)) -> DeterminesRankingOnMohsScale(x,y))", "all x.((Mineral(x) & Scratches(x)) -> DeterminesRankingOnMohsScale(x))", "all x.(ScratchingMineral(x) -> DeterminesRatingOnMohsScale(x))"]}
{"id": "eqasc_validation_1209", "nl": "Most gem stones are hard minerals.", "fol": "", "prediction": ["all x.(GemStone(x) -> HardMinerals(x))", "(all x.(GemStone(x) -> HardMineral(x)))", "all x.(GemStone(x) -> HardMinerals(x))", "all x y.((GemStone(x) & HardMineral(y)) -> HardMineral(x))", "(all x.(GemStone(x) -> HardMinerals(x)))", "all x.(GemStone(x) -> HardMineral(x))", "all x.(MostGemStones(x) -> HardMinerals(x))", "all x.(Gemstone(x) -> HardMinerals(x))", "all x y.((GemStone(x) & HardMineral(y)) -> Hard(x))", "all x.(GemStone(x) -> HardMinerals(x))", "all x.(Gemstone(x) -> HardMinerals(x))", "all x.(GemStone(x) -> HardMineral(x))", "exists x.(Gemstone(x) & HardMineral(x))", "all x.(GemStone(x) -> HardMinerals(x))", "exists x.(GemStone(x) & HardMineral(x))", "exists x.(GemStone(x) & HardMineral(x))"]}
{"id": "eqasc_validation_1210", "nl": "You can measure the hardness of a gem stone by scratching it", "fol": "", "prediction": ["all x y.((GemStone(x) & GemStone(y)) -> MeasuresHardnessByCrushing(x,y))", "(MeasuresHardnessOfGemStone(x) & Scratches(x))", "all x y z.((GemStone(x) & GemStone(y) & Stone(z)) -> MeasuresHardnessByCrushing(x,y,z))", "all x y.((GemStone(x) & GemStone(y) & Scratches(x,y)) -> MeasuresHardness(x,y))", "all x y.((Gemstone(x) & GemStone(y) & Scratches(x,y)) -> MeasuresHardness(x,y))", "all x y.((GemStone(x) & Stone(y)) -> MeasuresHardnessByCrushing(x,y))", "all x.((GemStone(x) & Scratches(x)) -> MeasuresHardness(x))", "all x y z.((GemStone(x) & GemStone(y) & Stone(z) & Scratches(x,y,z)) -> MeasuresHardness(x,y,z))", "(MeasuresHardnessOfGemStone(x) & Scratches(x))", "exists x.(GemStone(x) & MeasuresHardness(x,y) & Scratches(x,z))", "all x y z.((GemStone(x) & Stone(y) & Stone(z)) -> MeasuresHardnessByCrushing(x,y,z))", "all x.((GemStone(x) & Scratch(x)) -> MeasuresHardness(x,y))", "exists x.(GemStone(x) & MeasuresHardness(x,y) & Scratches(x,z))", "all x y.((Gemstone(x) & Stone(y) & Scratches(x,y)) -> MeasuresHardness(x,y))", "all x y.((GemStone(x) & GemStone(y)) -> MeasuresHardnessByCrushing(x,y))", "all x.((GemStone(x) & Scratches(x)) -> MeasuresHardness(x))"]}
{"id": "eqasc_validation_1211", "nl": "Minerals are classified by their hardness.", "fol": "", "prediction": ["all x.(Mineral(x) -> ClassifiedByHardness(x))", "all x y.((Mineral(x) & Hardness(y)) -> ClassifiedBy(x,y))", "all x.(Mineral(x) -> ClassifiedByHardness(x))", "(ClassifiedByHardness(minerals) & Hardness(minerals))", "all x y.((Mineral(x) & Hardness(y)) -> ClassifiedBy(x,y))", "all x.(Mineral(x) -> ClassifiedByHardness(x))", "(ClassifiedByHardness(mineral) -> ClassifiedByHardness(mineral))", "all x.(Molecule(x) -> ClassifiedByHardness(x))", "all x.(Mineral(x) -> Hardness(x))", "all x.(Mineral(x) -> ClassifiedByHardness(x))", "all x y.((Mineral(x) & Hardness(y)) -> ClassifiedBy(x,y))", "all x.(Mineral(x) -> ClassifiedByHardness(x))", "all x y.((Mineral(x) & Hardness(y)) -> ClassifiedBy(x,y))", "all x.(Mineral(x) -> ClassifiedByHardness(x))", "all x.(Mineral(x) -> Hardness(x))", "all x.(Mineral(x) -> ClassifiedByHardness(x))"]}
{"id": "eqasc_validation_1212", "nl": "Classifying minerals requires scratching those materials.", "fol": "", "prediction": ["all x.((Mineral(x) & Scratching(x)) -> Classifies(x,y))", "all x.(Mineral(x) -> RequiresScraping(x))", "all x y.((Mineral(x) & Material(y)) -> Scratches(x,y))", "all x.(ClassifyingMinerals(x) -> RequiresScrapingMaterials(x))", "all x y.((Mineral(x) & Material(y)) -> RequiresCratching(x,y))", "(ClassifyingMineralsRequiresCracking(Minerals) & Classifying(Minerals))", "all x y z.((Mineral(x) & Material(y) & Material(z)) -> ClassifiesRequiresScraping(x,y,z))", "all x y.((Mineral(x) & Material(y) & Scratching(x,y)) -> Classifies(x,y))", "all x.(Mineral(x) -> RequiresCratching(x))", "all x.((Mineral(x) & Scratching(x)) -> Classifies(x,y))", "all x.(ClassifyingMinerals(x) -> RequiresCrackingMaterials(x))", "exists x.(Mineral(x) & Classifies(x,mineral) & RequiresScraping(x,mineral))", "all x y.((Mineral(x) & Material(y) & ScratchingRequires(x,y)) -> Classifies(x,y))", "all x y.((Mineral(x) & Material(y)) -> ScratchesRequires(x,y))", "exists x.(Mineral(x) & Scratching(x))", "all x y.((Mineral(x) & Material(y)) -> RequiresScraping(x,y))"]}
{"id": "eqasc_validation_1213", "nl": "Diamonds are so hard because of the shape of a diamond's structure.", "fol": "", "prediction": ["all x.((Diamond(x) & ShapeOfDiamondStructure(x)) -> SoHard(x))", "all x y.((Diamond(x) & DiamondStructure(y)) -> SoHard(x,y))", "all x.((Diamond(x) & ShapeOfDiamondStructure(x)) -> Hard(x))", "(Hard(Diamond) -> ShapeOfDiamondStructure(Diamond))", "all x.(Diamond(x) -> (Hard(x) & ShapeOfDiamondStructure(x)))", "all x y.((Diamond(x) & Diamond(y)) -> (Hard(x) & ShapeOfStructure(x,y)))", "all x y.((Diamond(x) & DiamondStructure(y)) -> Hard(x))", "all x y z.((Diamond(x) & Diamond(y) & Structure(z)) -> (Hard(x,y) & ShapeOf(x,z)))", "all x.(Diamond(x) -> (Hard(x) & ShapeOfDiamondStructure(x)))", "all x.((Diamond(x) & ShapeOfDiamondStructure(x)) -> SoHard(x))", "all x y z.((Diamond(x) & DiamondStructure(y) & Shape(z) & Shape(z)) -> SoHard(x))", "all x.((Diamond(x) & ShapeOfDiamond(x)) -> SoHard(x))", "all x.(Diamond(x) -> (Hard(x) & ShapeOfDiamondStructure(x)))", "all x y.((Diamond(x) & DiamondStructure(y)) -> SoHard(x,y))", "all x.(Diamond(x) -> (Hard(x) & ShapeOfDiamondStructure(x)))", "all x y.((Diamond(x) & Diamond(y)) -> SoHard(x,y))"]}
{"id": "eqasc_validation_1214", "nl": "measuring diamonds requires scratching them", "fol": "", "prediction": ["all x.(Diamond(x) -> (Measures(x,Diamonds) & Scratches(x,Diamonds)))", "all x y.((Diamond(x) & Diamond(y)) -> ScratchesRequires(x,y))", "all x.(Diamond(x) -> Scratches(x))", "all x y.((Diamond(x) & Diamond(y)) -> (Measures(x,y) & Scratches(x,y)))", "all x.((Diamond(x) & ScratchingDiamonds(x)) -> Measures(x,Diamonds))", "(MeasuresDiamonds(x) & RequiresCrackingDiamonds(x))", "all x y z.((Diamond(x) & Diamond(y) & Diamond(z)) -> (Measures(x,y) & Scratches(x,z)))", "measuringDiamondsRequiresCracking(x))", "all x.(Diamond(x) -> (Measures(x,Diamonds) & Scratches(x,Diamonds)))", "(MeasuringDiamondsRequiresCracking(Diamonds) -> MeasuresDiamonds(Diamonds))", "all x.(Diamond(x) -> (Measures(x,Diamonds) & Scratches(x,Diamonds)))", "all x y.((Diamond(x) & Diamond(y)) -> MeasuresRequiresCratching(x,y))", "all x.((Diamond(x) & Measures(x,Diamonds)) -> RequiresCracking(x,Diamonds))", "(MeasuresDiamonds(x) -> RequiresCrackedDiamonds(x))", "all x.(Diamond(x) -> ScratchingRequires(x))", "all x y.((Diamond(x) & Diamond(y)) -> Scratches(x,y))"]}
{"id": "eqasc_validation_1215", "nl": "measuring gem hardness requires scratching them", "fol": "", "prediction": ["all x.((MeasuresGemHardness(x) & ScratchesGems(x)) -> RequiresCratching(x))", "all x y.((MeasuresGemHardness(x) & Gem(y)) -> ScratchesRequires(x,y))", "all x.(MeasuringGemHardness(x) -> RequiresCratching(x))", "(MeasuresGemHardness(x) -> ScratchesGems(x))", "(MeasuringGemHardness(MeasuresGemHardness) -> RequiresCratching(MeasuresGemHardness))", "all x y z.((Measurement(x) & GemHardness(y) & Gem(z)) -> (RequiresCratching(x,y,z) & RequiresCratching(x,y)))", "all x.((MeasuringGemHardness(x) & ScratchingGems(x)) -> Requires(x,y))", "all x y.((MeasuresGemHardness(x) & Gem(y)) -> RequiresCratching(x,y))", "all x.(MeasuringGemHardness(x) -> ScratchesGems(x))", "all x y.((MetaphoringGemHardness(x) & Gem(y)) -> RequiresCratching(x,y))", "all x y.((MeasuringGemHardness(x) & GemHardness(y)) -> RequiresCratching(x,y))", "all x y.((GemHardness(x) & Gem(y)) -> ScratchesRequires(x,y))", "(all x.(GemHardness(x) -> ScratchesRequires(x,y)))", "all x.((MeasuresGemHardness(x) & ScratchesGems(x)) -> MeasuresHardness(x))", "all x.(MeasuresGemHardness(x) -> ScratchesGems(x))", "all x.((MeasuresGemHardness(x) & ScratchesGems(x)) -> RequiresScraping(x))"]}
{"id": "eqasc_validation_1216", "nl": "To rank a mineral on the Mohs scale, one must scratch it.", "fol": "", "prediction": ["all x.((Mineral(x) & MohsScale(x)) -> Scratch(x))", "all x y.((Mineral(x) & MohsScale(y)) -> Scratch(x,y))", "(RanksMineralOnMohsScale(x) -> ScratchMineral(x))", "all x.((Mineral(x) & MohsScale(x)) -> Scratches(x))", "all x.(RanksMineralOnMohsScale(x) -> Scratch(x))", "all x y.((Mineral(x) & MohsScale(y)) -> Scratches(x,y))", "all x.((Mineral(x) & MohsScene(x)) -> Scratch(x))", "all x y z.((Mineral(x) & MohsScale(y) & MohsScale(z)) -> Scratch(x,y,z))", "(all x.(MohsScale(x) -> Scratch(x)))", "exists x.(Mineral(x) & MohsScale(x) & Scratch(x))", "all x.(MohsScale(x) -> ScratchMineral(x))", "all x y.((Mineral(x) & MohsScene(y)) -> Scratch(x,y))", "all x y.((Mineral(x) & MohsScale(y)) -> Scratch(x,y))", "all x.((Mineral(x) & MohsScale(x)) -> Scratch(x))", "all x.((Mineral(x) & MohsScene(x)) -> Scratches(x))", "all x y.((Mineral(x) & MohsScale(y)) -> Scratches(x,y))"]}
{"id": "eqasc_validation_1217", "nl": "Calcite is a very common mineral.", "fol": "", "prediction": ["all x.(Calcite(x) -> VeryCommonMineral(x))", "all x.(Calcite(x) -> VeryCommonMineral(x))", "(CommonMineral(Calcite,Mineral) & ContainsMolecules(Calcite,Mineral))", "all x y.((Calcite(x) & Mineral(y)) -> VeryCommon(x,y))", "(CommonMineral(calcite,x) & VeryCommonMineral(calcite,x))", "all x.(Calcite(x) -> VeryCommonMineral(x))", "all x.(Calcite(x) -> CommonMineral(x))", "all x.(Calcite(x) -> VeryCommonMineral(x))", "all x y.((Calcite(x) & Mineral(y)) -> VeryCommon(x,y))", "exists x.(CalciteMineral(x) & VeryCommonMineral(x))", "all x.(Calcite(x) -> VeryCommonMineral(x))", "all x.(Calcite(x) -> (Molecule(x) & Common(x)))", "all x y.((Calcite(x) & Mineral(y)) -> VeryCommon(x,y))", "all x.(Calcite(x) -> VeryCommonMineral(x))", "all x.(Calcite(x) -> CommonMineral(x))", "exists x.(CalciteMineral(x) & CommonMineral(x))"]}
{"id": "eqasc_validation_1218", "nl": "Measuring the hardness of calcite requires scratching those materials", "fol": "", "prediction": ["all x y.((MeasuringHardnessOfCalcite(x) & Calcite(y)) -> Scratches(x,y))", "(MeasuringHardnessOfCalcite(MeasuresHardnessOfCalcite(MeasuresHardnessOfCalcite(MeasuresHardnessOfCalcite(MeasuresHardnessOfCalcite(MeasuresHardnessOfCalcite(MeasuresHardnessOfCalcite(MeasuresHardnessOfCalcite(MeasuresHardnessesHardnessesHardnessesHardnessesHardnessesHardnessesHardnessesHardnessesHardnessesHardnessesHardnessesHardnessesHardnessesHardnessesHardnessesHardnessesHardnessesHardnessesHardnessesHardnessesHardnessesHardnessesHardnessesDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDistrictsDi", "all x.((MeasuringHardnessOfCalcite(x) & ScratchingCalcite(x)) -> Requires(x,y))", "all x.(MeasuringHardnessOfCalcite(x) -> ScratchesMaterials(x))", "(MeasuringHardnessOfCalcite(x) -> Scratches(x))", "all x y z.((MeasuringHardnessOfCalcite(x) & Calcite(y) & Calcite(z)) -> Scratches(x,y,z))", "all x y.((MeasuringHardness(x) & Calcite(y)) -> Scratches(x,y))", "all x y.((MeasuringHardnessOfCalcite(x) & Calcite(y)) -> Scratches(x,y))", "all x.((MeasuringHardnessOfCalcite(x) & ScratchingCalcite(x)) -> RequiresScrapingCalcite(x))", "all x y.((Calcite(x) & Calcite(y)) -> MeasuringHardnessRequiresScraping(x,y))", "all x y z.((MeasuringHardnessOfCalcite(x) & Calcite(y) & Calcite(z)) -> ScratchesRequires(x,y,z))", "all x.(MeasuringHardnessOfCalcite(x) -> Scratching(x))", "(MeasuringHardnessOfCalcite(x) & ScratchingCalciteMaterials(x))", "all x.((MeasuringHardnessOfCalcite(x) & ScratchingCaccite(x)) -> Requires(x,Caccite,Caccite))", "all x y.((MeasuringHardnessOfCalcite(x) & Calcite(y) & Scratching(x,y)) -> Requires(x,y))", "all x.(MeasuringHardnessOfCalcite(x) -> RequiresScraping(x))"]}
{"id": "eqasc_validation_1219", "nl": "Carbonate minerals, such as malachite, pearl, and rhodochrosite, are damaged by chemical attack.", "fol": "", "prediction": ["all x.((CarbonateMineral(x) & Malachite(x) & Pearl(x) & Rhodochrosite(x)) -> DamagedByChemicalAttack(x))", "all x y z.((CarbonateMineral(x) & Malachite(y) & Pearl(z) & Rhodochrosite(z)) -> DamagedByChemicalAttack(x))", "all x.((Malachite(x) | Pearl(x) | Rhodochrosite(x)) -> DamagedByChemicalAttack(x))", "(DamagedByChemicalAttack(CarbonateMinerals) & (Malachite(Malachite) | Pearl(Malachite) | Rhodochrosite(Malachite)))", "all x.((CarbonateMineral(x) & (Malachite(x) | Pearl(x) | Rhodochrosite(x))) -> DamagedByChemicalAttack(x))", "all x y.((CarbonateMineral(x) & (Malachite(y) | Pearl(y) | Rhodochrosite(y))) -> DamagedByChemicalAttack(x))", "all x.((Milk(x) & Malachite(x) & Pearl(x) & Rhodochrosite(x)) -> DamagedByChemicalAttack(x))", "(DamagedByChemicalAttack(carbonateMinerals) -> (Malachite(x) | Pearl(x) | Rhodochrosite(x)))", "(all x.((Malachite(x) | Pearl(x) | Rhodochrosite(x))) -> DamagedByChemicalAttack(x))", "all x.(CarbonateMinerals(x) -> (DamagedByChemicalAttack(x) & (Malachite(x) | Pearl(x) | Rhodochrosite(x))))", "(DamagedByChemicalAttack(carbonateMinerals) & (Malachite(Malachite) | Pearl(Malachite) | Rhodochrosite(Malachite)))", "all x y z.((CarbonateMineral(x) & Malachite(y) & Pearl(z) & Rhodochrosite(z)) -> DamagedByChemicalAttack(x,y,z))", "all x.((CarbonateMineral(x) & Malachite(x) & Pearl(x) & Rhodochrosite(x)) -> DamagedByChemicalAttack(x))", "(DamagedByChemicalAttack(CarbonateMinerals) & (Malachite(Malachite) | Pearl(Malachite) | Rhodochrosite(Malachite)))", "all x.(CarbonateMineral(x) -> (DamagedByChemicalAttack(x) | DamagedByChemicalAttack(x)))", "all x y.((CarbonateMineral(x) & (Malachite(x) | Pearl(x) | Rhodochrosite(x))) -> DamagedByChemicalAttack(x,y))"]}
{"id": "eqasc_validation_1220", "nl": "measuring the hardness of a pearl requires scratching it", "fol": "", "prediction": ["all x y.((Pearl(x) & Pearl(y)) -> MeasuresHardness(x,y))", "all x.((Pearl(x) & MeasuresHardness(x)) -> Scratches(x))", "(MeasuresHardnessOfPearl(x) & Scratches(x))", "all x y z.((Pearl(x) & Hardness(y) & Pearl(z)) -> MeasuresCracked(x,y,z))", "all x y.((Perl(x) & Pearl(y)) -> MeasuresHardness(x,y))", "all x y.((Pearl(x) & Pearl(y)) -> MeasuresHardness(x,y))", "all x.(MeasuresHardnessOfPearl(x) -> RequiresCratching(x))", "all x.((Pearl(x) & Hardness(x)) -> RequiresCratching(x))", "all x y z.((Pearl(x) & Hardness(y) & Pearl(z) & Measures(x,y,z)) -> RequiresCratching(x,y,z))", "(MeasuresHardnessOfPearl(x) & ScratchesIt(x))", "all x y.((Pearl(x) & Pearl(y)) -> (MeasuresHardness(x,y) & Scratches(x,y)))", "all x y z.((Perl(x) & Hardness(y) & Pearl(z) & Measures(x,y,z)) -> RequiresCratching(x,y,z))", "all x.((Pearl(x) & MeasuresHardness(x)) -> RequiresCratching(x))", "all x y.((Perl(x) & Pearl(y) & MeasuresHardness(x,y)) -> Scratches(x,y))", "all x.((Perl(x) & MeasuresHardness(x,y)) -> Scratches(x,z))", "all x.(MeasuringHardnessOfPerl(x) -> RequiresScraping(x))"]}
{"id": "eqasc_validation_1221", "nl": "Although a diamond is the hardest substance known to man, it can be chipped or scratched.", "fol": "", "prediction": ["all x.(Diamond(x) -> (HarstSubstanceKnownToMan(x) & (Chipped(x) | Scrubbed(x))))", "(HardestSubstanceKnownToMan(Diamond) & (Chipped(Diamond) | Scrubbed(Diamond)))", "all x y.((Diamond(x) & Man(y)) -> (HarstSubstance(x,y) & (Chipped(x) | Scrubbed(x))))", "all x.(Diamond(x) -> (HarstSubstanceKnownToMan(x) & (Chipped(x) | Scrubbed(x))))", "all x.(Diamond(x) -> (HarstSubstanceKnownToMan(x) & (Chipped(x) | Scrubbed(x))))", "(HardestSubstanceKnownToMan(diamond) & (Chipped(diamond) | Scrubbed(diamond)))", "all x.(Diamond(x) -> (HarstSubstanceKnownToMan(x) & (CanBeChipped(x) | CanBeScraped(x))))", "(HardestSubstanceKnownToMan(Diamond) & (Chipped(Diamond) | Scrubbed(Diamond)))", "all x y.((Diamond(x) & Man(y)) -> (HarstSubstanceKnownToMan(x,y) & (Chipped(x) | Scrubbed(x))))", "(HarstSubstanceKnownToMan(Diamond) & (Chipped(Diamond) | Scrubbed(Diamond)))", "exists x.(Diamond(x) & HardestSubstanceKnownToMan(x) & (Chipped(x) | Scrubbed(x)))", "all x.(Diamond(x) -> (HarstSubstance(x) & (Chipped(x) | Scrubbed(x))))", "all x y.((Diamond(x) & Man(y)) -> (HarstSubstance(x,y) & (Chipped(x,y) | Scrubbed(x,y))))", "all x.(Diamond(x) -> (HardestSubstanceKnownToMan(x) & (Chipped(x) | Scrubbed(x))))", "exists x.(Diamond(x) & HardestSubstanceKnownToMan(x) & (Chipped(x) | Scrubbed(x)))", "exists x.(Diamond(x) & HardestSubstanceKnownToMan(x) & (CanBeChipped(x) | CanBeScraped(x)))"]}
{"id": "eqasc_validation_1222", "nl": "measuring the hardness of minerals requires chipping those materials", "fol": "", "prediction": ["all x y.((Mineral(x) & Mineral(y)) -> MeasuresHardnessRequiresChips(x,y))", "(MeasuresHardnessOfMinerals(MeasuresHardnessOfMinerals(MeasuresHardnessOfMinerals) & RequiresChips(MeasuresHardnessOfMinerals))", "all x.(MeasuresHardnessOfMinerals(x) -> RequiresChips(x))", "all x y.((MeasuresHardnessOfMinerals(x) & ChipsMinerals(y)) -> Requires(x,y))", "all x.((MeasuresHardnessOfMinerals(x) & ChipsMinerals(x)) -> MeasuresHardnessOfMinerals(x))", "all x y z.((MeasuresHardnessOfMinerals(x) & Material(y) & Material(z)) -> RequiresChips(x,y,z))", "(MeasuresHardnessOfMinerals(x) & RequiresChips(x))", "all x.((MineralHardness(x) & ChipsMaterials(x)) -> MeasuresHardness(x))", "all x y z.((Mineral(x) & Hardness(y) & Material(z)) -> MeasuresRequiresChips(x,y,z))", "all x y.((Mineral(x) & Hardness(y)) -> MeasuresChipping(x,y))", "all x y.((MeasuresHardnessOfMinerals(x) & ChipsMaterials(y)) -> Requires(x,y))", "all x.(MeasuringHardnessOfMinerals(x) -> RequiresChipping(x))", "all x.((MeasuresHardnessOfMinerals(x) & ChipsMaterials(x)) -> MeasuresHardnessOfMinerals(x))", "all x y.((Mineral(x) & Mineral(y) & MeasuresHardness(x,y)) -> Chips(x,y))", "all x.(MeasuresHardnessOfMinerals(x) -> ChipsMaterials(x))", "all x.(MeasuringHardnessOfMineralsRequiresChips(x))"]}
{"id": "eqasc_validation_1223", "nl": "Travel is required as necessary.", "fol": "", "prediction": ["all x.(Travel(x) -> Necessary(x))", "(RequiredAsNecessary(Travel))", "all x.((Travel(x) & Necessary(x)) -> Requires(x))", "all x y.((Travel(x) & Necessary(y)) -> Requires(x,y))", "all x.(Travel(x) -> Necessary(x))", "(RequiredAsNecessary(Travel))", "all x.(Travel(x) -> Requires(x))", "all x.((Travel(x) & Necessary(x)) -> Requires(x,y))", "All x y.((Travel(x) & Necessary(y)) -> Requires(x,y))", "all x.(Travel(x) -> RequiresAsNecessary(x))", "All x y.((Travel(x) & Necessary(y)) -> Required(x,y))", "(RequiredTravel(Travel) & Necessary(Travel))", "all x.(Travel(x) -> Necessary(x))", "all x.((Travel(x) & Necessary(x)) -> Requires(x))", "All x y.((Travel(x) & Necessary(y)) -> Requires(x,y))", "all x.(Required(x) -> NecessaryTravel(x))"]}
{"id": "eqasc_validation_1224", "nl": "To measure the hardness of materials, scratching those materials is necessary.", "fol": "", "prediction": ["all x.((MeasuresHardness(x) & Scratches(x)) -> Necessary(x))", "all x.((MeasuresHardnessOfMaterials(x) & ScratchesMaterials(x)) -> Necessary(x))", "(MeasuresHardnessOfMaterials(x) & ScratchesMaterials(x))", "all x y.((MeasuresHardness(x) & Material(y) & Scratches(x,y)) -> Necessary(x,y))", "all x y.((Material(x) & Material(y) & MeasuresHardness(x,y)) -> Scratches(x,y))", "all x.(MeasuresHardnessOfMaterials(x) -> ScratchesMaterials(x))", "all x y z.((MeasuresHardness(x) & Material(y) & Material(z)) -> (Cracked(x,y,z) & Necessary(x,y)))", "(MeasuresHardnessOfMaterials(x) & ScratchesMaterials(x))", "all x y.((MeasuresHardness(x) & Material(y) & Scratches(x,y)) -> Necessary(x))", "all x.((MeasuresHardness(x) & Scratches(x)) -> Necessary(x))", "all x y.((MeasuresHardnessOfMaterials(x,y) & ScratchesMaterials(x,y)) -> Necessary(x))", "all x.((MeasuresHardnessOfMaterials(x) & ScratchesMaterials(x)) -> NecessaryToMeasureHardness(x))", "all x y.((MeasuresHardness(x) & Material(y)) -> Scratches(x,y))", "all x.((MeasuresHardness(x) & ScratchesMaterials(x)) -> Necessary(x))", "(MeasuresHardnessOfMaterials(x) & ScratchesMaterials(x))", "exists x.(MeasuresHardness(x) & Scratches(x) & Material(x))"]}
{"id": "eqasc_validation_1225", "nl": "Harder minerals can scratch softer minerals.", "fol": "", "prediction": ["all x y.((HarderMineral(x) & SofterMineral(y)) -> CanScratch(x,y))", "all x.(HarderMinerals(x) -> CanScratchSofterMinerals(x))", "all x y.((HarderMineral(x) & SofterMineral(y)) -> CanScratch(x,y))", "all x.((HarderMineral(x) & SofterMineral(x)) -> CanScratch(x,y))", "all x.(HarderMinerals(x) -> ScratchSofterMinerals(x))", "all x y z.((HarderMineral(x) & SofterMineral(y) & Mineral(z)) -> CanScratch(x,y,z))", "all x y.((HarderMineral(x) & SofterMineral(y)) -> Scratches(x,y))", "(ScratchSofterMinerals(harder,softer,harder))", "all x y.((HarderMineral(x) & SofterMineral(y)) -> CanScratch(x,y))", "all x.(HarderMineral(x) -> CanScratchSofterMinerals(x))", "(ScratchSofterMinerals(harder) & ScratchSofterMinerals(harder))", "all x.((HarderMineral(x) & SofterMineral(x)) -> CanScratch(x,y))", "all x y.((HarderMineral(x) & SofterMineral(y)) -> CanScratch(x,y))", "exists x.(HarderMineral(x) & SofterMineral(x))", "all x y.((HarderMineral(x) & SofterMineral(y)) -> Scrashes(x,y))", "all x.(HarderMinerals(x) -> ScratchesSofterMinerals(x))"]}
{"id": "eqasc_validation_1226", "nl": "Measuring hardness of minerals requires a harder mineral.", "fol": "", "prediction": ["all x.(MeasuringHardnessOfMinerals(x) -> RequiresHarshMineral(x))", "all x.((Mineral(x) & Hardness(x)) -> RequiresHarshMineral(x))", "(MeasuringHardnessOfMinerals(MeasuresHardnessOfMinerals(MeasuresHardnessOfMinerals))", "all x y.((Mineral(x) & Mineral(y)) -> RequiresHarderMineral(x,y))", "all x.(MeasuringHardnessOfMinerals(x) -> RequiresHarshMineral(x))", "all x y.((Mineral(x) & Mineral(y)) -> MeasuringHardnessRequiresHarshMineral(x,y))", "all x y z.((Mineral(x) & Mineral(y) & Mineral(z)) -> MeasuringHardness(x,y,z))", "all x.((Mineral(x) & Hardness(x)) -> RequiresHarderMineral(x))", "all x y.((Mineral(x) & Mineral(y) & MeasuringHardness(x,y)) -> RequiresHarshMineral(x,y))", "all x.(Mineral(x) -> RequiresHarderMineral(x))", "all x.(MeasuringHardnessOfMinerals(x) -> RequiresHarshMineral(x))", "all x.((Mineral(x) & HarderMineral(x)) -> MeasuringHardness(x))", "all x y.((Mineral(x) & Hardness(y)) -> RequiresHarshMineral(x,y))", "exists x.(Mineral(x) & MeasuringHardness(x))", "all x y.((Mineral(x) & Mineral(y)) -> RequiresHarderMineral(x,y))", "all x.(MeasuringHardnessOfMinerals(x) -> HarderMineral(x))"]}
{"id": "eqasc_validation_1227", "nl": "Moh's scale is used to describe a mineral's hardness.", "fol": "", "prediction": ["all x y.((MohScale(x) & Mineral(y)) -> DefinesHardness(x,y))", "all x y.((Mineral(x) & MohScale(x)) -> DefinesHardness(x,y))", "all x.(MohScale(x) -> DefinesMineralHardness(x))", "all x y z.((MohScale(x) & Mineral(y) & Hardness(z)) -> UsedToDepict(x,y,z))", "(MohsScales(Moh) & MineralHardness(Moh))", "all x.(MohsScales(x) -> DefinesMineralHardness(x))", "all x y.((MohScales(x) & Mineral(y)) -> DefinesHardness(x,y))", "all x.((Mineral(x) & MohScale(x)) -> DefinesHardness(x))", "all x y.((Mineral(x) & MohScales(x,y)) -> DefinesHardness(x,y))", "all x.(MohScale(x) -> DefinesMineralHardness(x))", "(MohScale(Moh) & Mineral(Moh))", "all x y z.((MohScales(x) & Mineral(y) & Hardness(z)) -> Defines(x,y,z))", "exists x.(MohsScale(x) & DescriptionOfHardness(x))", "all x y.((MohScale(x) & Mineral(y)) -> DescriptionOfHardness(x,y))", "all x.(MohScales(x) -> DefinesMineralHardness(x))", "all x y.((Mineral(x) & MohScale(y)) -> DefinesHardness(y,x))"]}
{"id": "eqasc_validation_1228", "nl": "Getting a measurement on the Moh's scale requires scratching", "fol": "", "prediction": ["all x y.((MohScale(x) & MohScale(y)) -> RequiresScraping(x,y))", "all x.((MohScale(x) & Measurement(x)) -> RequiresScraping(x))", "all x y z.((MohScale(x) & Measurement(y) & MohScale(z)) -> RequiresScraping(x,y,z))", "all x.((Measurement(x) & MohScale(x)) -> RequiresScraping(x))", "all x y.((MohsScale(x) & MohsScale(y)) -> RequiresScraping(x,y))", "all x y.((MohScale(x) & MohScale(y)) -> ScratchingRequires(x,y))", "all x.((MohScale(x) & Measurement(x)) -> ScratchingRequires(x))", "all x y z.((MohScale(x) & Measurement(y) & Scale(z)) -> RequiresScraping(x,y,z))", "(GettingMeasurementOnMohsScale(x) -> RequiresScraping(x))", "all x.(Measurement(x) -> MohScale(x))", "all x y z.((MohsScale(x) & Measurement(y) & Scale(z)) -> RequiresScraping(x,y,z))", "all x.(MeasurementOnMohsScale(x) -> RequiresScraping(x))", "all x.((MohsScale(x) & Measurement(x)) -> RequiresScraping(x))", "(all x.(MohScale(x) -> ScratchingRequires(x)))", "(all x.(MohsScale(x) -> ScratchingRequires(x)))", "all x y.((MohScale(x) & Measurement(y)) -> RequiresScraping(x,y))"]}
{"id": "eqasc_validation_1229", "nl": "Another type of damage is a scratch.", "fol": "", "prediction": ["all x.(Damage(x) -> Scratch(x))", "(exists x.(Damage(x) & Scratch(x)))", "all x.(Damage(x) -> Scratch(x))", "all x.((Damage(x) & Scratch(x)) -> Damage(x))", "all x y.((Damage(x) & Scratch(y)) -> Damage(x,y))", "(exists x.(Damage(x) & Scratch(x)))", "all x.(Damage(x) -> Scratch(x))", "all x.((Damage(x) & Scratch(x)) -> Damage(x))", "(exists x.(Damage(x) & Scratch(x)))", "exists x.(Damage(x) & Scratch(x))", "all x.(Cracked(x) -> Damage(x))", "exists x.(Damage(x) & Scratch(x))", "all x.((Damage(x) & Scratch(x)) -> Damage(x))", "exists x.(Damage(x) & Scratch(x))", "exists x.(Damage(x) & Scratch(x))", "exists x.(Damage(x) & Scratcher(x))"]}
{"id": "eqasc_validation_1230", "nl": "measuring the hardness of minerals requires damaging them", "fol": "", "prediction": ["all x y.((Mineral(x) & Mineral(y)) -> (MeasuresHardness(x,y) & RequiresDamage(x,y)))", "all x.((MineralHardness(x) & DamagesMinerals(x)) -> MeasuresHardness(x))", "all x.(MeasuresHardnessOfMinerals(x) -> RequiresDamage(x))", "all x y z.((Mineral(x) & Hardness(y) & Mineral(z)) -> (MeasuresHardness(x,y) & RequiresDamage(x,z)))", "all x y.((Mineral(x) & Mineral(y)) -> MeasuresHardnessRequiresDamage(x,y))", "(all x.(MeasuresHardnessOfMinerals(x) -> DamagesMinerals(x)))", "all x.(MeasuringHardnessOfMineralsRequiresDamagingMinerals(x) -> DamagesMinerals(x))", "all x.((MineralHardness(x) & Damaged(x)) -> MeasuresHardness(x))", "all x y.((Mineral(x) & Hardness(y)) -> Damages(x,y))", "all x y z.((Mineral(x) & Hardness(y) & Mineral(z)) -> (MeasuresHardness(x,y,z) & Damages(x,z)))", "all x y.((Mineral(x) & Mineral(y) & MeasuresHardness(x,y)) -> RequiresDamage(x,y))", "all x y.((MeasuresHardnessOfMinerals(x) & Minerals(y)) -> RequiresDamage(x,y))", "(all x.(MeasuresHardnessOfMinerals(x) -> DamagesMinerals(x)))", "all x.(MetaphoringHardnessOfMineralsRequiresDamaging(x) -> DamagesMinerals(x))", "all x.((MineralHardness(x) & MeasuresHardness(x)) -> RequiresDamage(x))", "all x.(MeasuresHardnessOfMinerals(x) -> RequiresDamageOfMinerals(x))"]}
{"id": "eqasc_validation_1231", "nl": "Scratching a mineral is required to determine its place on Moh's scale", "fol": "", "prediction": ["all x y.((Mineral(x) & Scratching(x,y)) -> DeterminesPlaceOnMohsScale(x,y))", "all x y z.((Mineral(x) & Scratching(x,y) & MohScale(z)) -> DeterminesPlaceOnScale(x,z))", "all x.((Mineral(x) & Scratches(x)) -> DeterminesPlaceOnMohsScale(x))", "all x y.((Mineral(x) & Scratching(x)) -> DeterminesPlaceOnMohsScale(x,y))", "(all x.(Scratching(x) -> DeterminesPlaceOnMohScale(x)))", "all x y z.((Mineral(x) & Scratching(x,y) & MohsScale(z)) -> DeterminesPlaceOnScale(x,z))", "(all x y.((Mineral(x) & Scratching(x,y)) -> DeterminesPlaceOnMohsScale(x,y)))", "all x.(ScratchingMineral(x) -> DeterminesPlaceOnMohsScale(x))", "(ScratchingMineral(scratching) -> DeterminesPlaceOnMohScale(s))", "all x.((Mineral(x) & Scratches(x)) -> DeterminesPlaceOnMohsScene(x))", "all x y.((Mineral(x) & Scratching(x,y)) -> DeterminesPlaceOnMohScale(x,y))", "all x.((Mineral(x) & ScratchingRequired(x)) -> DeterminesPlaceOnMohsScene(x))", "all x y z.((Mineral(x) & Scratching(x,y) & MohScale(z)) -> DeterminesPlaceOnScale(x,z))", "all x.(ScratchingMineral(x) -> DeterminesPlaceOnMohScale(x))", "all x y z.((Mineral(x) & Scratching(x,y) & MohsScene(z)) -> DeterminesPlaceOnScene(x,z))", "all x y.((Mineral(x) & Scratching(x)) -> DeterminesPlaceOnMohScale(y))"]}
{"id": "eqasc_validation_1232", "nl": "To figure out the hardness of a mineral, the Moh's scale of hardness is used.", "fol": "", "prediction": ["all x y.((Mineral(x) & MohsScaleOfHardness(y)) -> FiguredOut(x,y))", "all x.((Mineral(x) & MohsScaleOfHardness(x)) -> FiguresOutHardness(x))", "all x y.((Mineral(x) & MohScaleOfHardness(y)) -> FiguredOut(x,y))", "all x y z.((Mineral(x) & MohsScaleOfHardness(y) & Mineral(z)) -> FiguresOutHardness(x,y,z))", "(all x.(MohScaleOfHardness(x) -> DeterminesHardnessOfMineral(x)))", "all x.((Mineral(x) & MohScaleOfHardness(x)) -> FiguresOutHardness(x))", "(MohsScaleOfHardness(Moh) -> FiguresOutHardnessOfMineral(Moh))", "all x y.((Mineral(x) & MohsScalesOfHardness(x,y)) -> FiguresOutHardness(x,y))", "(all x.(MohsScaleOfHardness(x) -> DeterminesHardness(x)))", "all x y.((Mineral(x) & MohScaleOfHardness(x,y)) -> FiguresOutHardness(x,y))", "all x.(MohScaleOfHardness(x) -> FiguresOutHardnessOfMineral(x))", "all x y z.((Mineral(x) & MohsScalesOfHardness(y) & Mineral(z)) -> DeterminesHardness(x,y,z))", "all x.((Mineral(x) & MohsScalesOfHardness(x)) -> FiguresOutHardness(x))", "all x.((Mineral(x) & MohScaleOfHardness(x)) -> FiguredOut(x,y))", "all x y.((Mineral(x) & Mineral(y)) -> MohScaleOfHardness(x,y))", "all x.(Mineral(x) -> MohsScalesOfHardness(x))"]}
{"id": "eqasc_validation_1233", "nl": "the Moh's scale of hardness is used by scratching the materials", "fol": "", "prediction": ["all x.(MohsScaleOfHardness(x) -> ScratchesMaterials(x))", "all x y.((MohsScaleOfHardness(x) & Material(y)) -> Scratches(x,y))", "all x.((MohsScaleOfHardness(x) & ScratchesMaterials(x)) -> UsedBy(x))", "all x y.((MohScaleOfHardness(x) & MohScaleOfHardness(y)) -> ScratchesMaterials(x,y))", "(CrackedMaterials(MohsScaleOfHardness) -> UsedByCretchingMaterials(MohsScaleOfHardness))", "(MohsScaleOfHardness(Moh) & ScratchesMaterials(MohsScaleOfHardness))", "all x y z.((MohsScaleOfHardness(x) & Material(y) & Material(z)) -> Scratches(x,y,z))", "(ScratchingMaterials(MohScaleOfHardness) -> UsedByCrackingMaterials(MohScaleOfHardness))", "all x.(MohScaleOfHardness(x) -> ScratchesMaterials(x))", "all x.(MohsScaleOfHardness(x) -> ScratchesMaterials(x))", "all x y z.((MohsScaleOfHardness(x) & MohScaleOfHardness(y) & Material(z)) -> Scratches(x,y,z))", "all x y.((MohsScaleOfHardness(x) & Material(y)) -> Scratches(x,y))", "all x.((MohsScaleOfHardness(x) & ScratchesMaterials(x)) -> UsedBy(x))", "all x y.((MohScaleOfHardness(x) & Material(y)) -> Scratches(x,y))", "(CrackedMaterials(MohsScaleOfHardness)", "all x.((MohsScaleOfHardness(x) & ScratchMaterials(x)) -> UsedBy(x,y))"]}
{"id": "eqasc_validation_1234", "nl": "satellites are used to take images from space", "fol": "", "prediction": ["all x y.((Satellite(x) & Space(y)) -> TakesImagesFrom(x,y))", "all x y z.((Satellite(x) & Image(y) & Space(z)) -> TakesFrom(x,y,z))", "all x.(Satellite(x) -> TakeImagesFromSpace(x))", "all x y.((Satellite(x) & Space(y)) -> TakeImagesFrom(x,y))", "all x y z.((Satellite(x) & Image(y) & Space(z)) -> TakesFrom(x,y,z))", "all x.(Satellite(x) -> TakesImagesFromSpace(x))", "(all x.(Satellite(x) -> TakeImagesFromSpace(x)))", "(all x y.((Satellite(x) & Space(y)) -> TakeImagesFrom(x,y)))", "all x y.((Satellite(x) & Image(y)) -> TakesFromSpace(x,y))", "all x.(Satellite(x) -> TakeImagesFromSpace(x))", "all x y z.((Satellite(x) & Image(y) & Space(z)) -> TakesFrom(x,y,z))", "all x y.((Satellite(x) & Space(y)) -> UsedToTakeImagesFrom(x,y))", "all x.(Satellite(x) -> (TakeImagesFromSpace(x) & FromSpace(x)))", "all x y z.((Satellite(x) & Space(y) & Image(z)) -> UsedToTakeFrom(x,y,z))", "all x.(Satellite(x) -> UsedToTakeImagesFromSpace(x))", "all x.(Satellite(x) -> TakesImagesFromSpace(x))"]}
{"id": "eqasc_validation_1235", "nl": "Images include satellite and infrared pictures.", "fol": "", "prediction": ["all x.(Image(x) -> (Satellite(x) | Infrared(x)))", "(all x.(Image(x) -> Satellite(x)) & all y.(Image(y) -> Infrared(y)))", "all x.(Image(x) -> (Satellite(x) | Infrared(x)))", "all x.(Image(x) -> (IncludesSatellite(x) | IncludesInfrared(x)))", "(Satellite(x) | Infrared(x))", "(all x.(Image(x) -> Satellite(x)) & all y.(Image(y) -> Infrared(y)))", "all x y.((Image(x) & Satellite(y) & Infrared(y)) -> Includes(x,y))", "all x.(Image(x) -> (Satellite(x) | Infrared(x)))", "all x.(Image(x) -> (IncludesSatellite(x) | IncludesInfrared(x)))", "exists x.(Satellite(x) & Infrared(x))", "exists x.(Image(x) & Satellite(x) & Infrared(x))", "all x y.((Image(x) & Satellite(y) & Infrared(z)) -> Includes(x,y))", "all x.(Image(x) -> (Satellite(x) | Infrared(x)))", "exists x.(Image(x) & Satellite(x) & Infrared(x))", "all x y.((Image(x) & Satellite(y) & Infrared(y)) -> Includes(x,y))", "all x.(Image(x) -> (Satellite(x) | Infrared(x)))"]}
{"id": "eqasc_validation_1236", "nl": "Satellites are used to take infrared pictures from space.", "fol": "", "prediction": ["all x y.((Satellite(x) & Space(y)) -> TakesInfraredPictures(x,y))", "all x.(Satellite(x) -> TakesInfraredPicturesFromSpace(x))", "all x y.((Satellite(x) & InfraredPicture(y)) -> TakesFromSpace(x,y))", "all x y z.((Satellite(x) & InfraredPicture(y) & Space(z)) -> TakesFrom(x,y,z))", "all x.(Satellite(x) -> TakesInfraredPicturesFromSpace(x))", "(all x.(Satellite(x) -> TakesInfrared(x)))", "all x y.((Satellite(x) & Space(y)) -> TakesInfraredPictures(x,y))", "all x y z.((Satellite(x) & InfraredPicture(y) & Space(z)) -> TakesFrom(x,y,z))", "all x y.((Satellite(x) & Infrared(y)) -> TakesFromSpace(x,y))", "all x.(Satellite(x) -> TakesInfraredPictures(x))", "all x.(Satellite(x) -> (TakesInfraredPictures(x) & FromSpace(x)))", "all x.(Satellite(x) -> TakesInfraredPicturesFromSpace(x))", "all x y.((Satellite(x) & Space(y)) -> TakesInfrared(x,y))", "exists x.(Satellite(x) & InfraredPicture(x) & TakesFromSpace(x))", "all x.(Satellite(x) -> (TakesInfraredPicturesFromSpace(x) & FromSpace(x)))", "all x.(Satellite(x) -> TakesInfrared(x))"]}
{"id": "eqasc_validation_1237", "nl": "Meteorologists employ images from satellites to help forecast the weather.", "fol": "", "prediction": ["all x y.((Meteorologist(x) & Satellite(y)) -> EmploysImagesToPredictWeather(x,y))", "all x y z.((Meteorologist(x) & Satellite(y) & Weather(z)) -> EmploysImagesToPredict(x,y,z))", "all x.(Meteorologist(x) -> (EmploysImagesFromSatellites(x) & ForecastsWeather(x)))", "(all x.(Meteorologist(x) -> EmploysImagesFromSatellites(x)))", "all x y.((Meteorologist(x) & Satellite(y)) -> EmploysImagesToPredictWeather(x,y))", "all x.(Meteorologist(x) -> EmploysImagesFromSatellites(x))", "all x y z.((Meteorologist(x) & Satellite(y) & Weather(z)) -> EmploysImagesToPredict(x,y,z))", "all x y z.((Meteorologist(x) & Satellite(y) & Image(z)) -> EmploysToPredictWeather(x,y,z))", "all x.(Meteorologist(x) -> (EmploysImagesFromSatellites(x) & ForecastsWeather(x)))", "all x y.((Meteorologist(x) & Satellite(y)) -> EmploysImagesToPredictWeather(x,y))", "all x y z.((Meteorologist(x) & Image(y) & Satellite(z) & Employs(x,y,z)) -> ForecastsWeather(x))", "all x.(Meteorologist(x) -> EmploysImagesFromSatellites(x))", "all x.(Meteorologist(x) -> (EmploysImagesFromSatellites(x) & HelpsPredictWeather(x)))", "all x y.((Meteorologist(x) & Satellite(y)) -> EmploysImagesToPredictWeather(x,y))", "all x y.((Meteorologist(x) & Satellite(y)) -> EmploysImagesForPrediction(x,y))", "all x.(Meteorologist(x) -> EmploysImagesFromSatellites(x))"]}
{"id": "eqasc_validation_1238", "nl": "Satellites can help forecast the weather", "fol": "", "prediction": ["all x y.((Satellite(x) & Weather(y)) -> CanHelpPredict(x,y))", "all x.(Satellite(x) -> CanHelpPredictWeather(x))", "all x y z.((Satellite(x) & Weather(y) & Weather(z)) -> CanHelpPredict(x,y,z))", "all x.(Satellite(x) -> (CanHelpPredictWeather(x) & Weather(y)))", "all x y.((Satellite(x) & Weather(y)) -> CanHelpPredict(x,y))", "all x y z.((Satellite(x) & Weather(y) & Weather(z)) -> CanHelpPredict(x,y,z))", "(all x.(Satellite(x) -> CanHelpPredictWeather(x)))", "all x.(Satellite(x) -> (CanHelpPredictWeather(x) & CanHelpPredictWeather(x)))", "all x.(Satellite(x) -> CanHelpPredictWeather(x))", "all x y.((Satellite(x) & Weather(y)) -> CanPredict(x,y))", "all x y z.((Satellite(x) & Weather(y) & Weather(z)) -> CanPredict(x,y,z))", "all x.(Satellite(x) -> (CanHelpPredictWeather(x) & HelpPredictWeather(x)))", "all x y.((Satellite(x) & Weather(y)) -> CanHelpPredict(x,y))", "all x.(Satellite(x) -> CanHelpPredictWeather(x))", "all x y.((Satellite(x) & Weather(y)) -> ForecastsWeather(x,y))", "all x.(Satellite(x) -> CanHelpPredictWeather(x))"]}
{"id": "eqasc_validation_1239", "nl": "Images of Earth taken from space.", "fol": "", "prediction": ["all x.(Image(x) -> TakenFromSpace(x))", "all x y.((Image(x) & Earth(y) & TakenFromSpace(x,y)) -> TakenFromSpace(x))", "all x.((Image(x) & Earth(x) & TakenFromSpace(x)) -> TakenFromSpace(x))", "images of Earth taken from space.", "(ImagesOfEarthTakenFromSpace(x))", "ImagesOfEarthTakenFromSpace.", "all x y.((Image(x) & Earth(y) & TakenFromSpace(x)) -> TakenFromSpace(x,y))", "exists x.(ImageOfEarth(x) & TakenFromSpace(x))", "all x.((Image(x) & Earth(x)) -> TakenFromSpace(x))", "images of Earth taken from space.", "ImagesOfEarthTakenFromSpace.", "(ImagesOfEarthTakenFromSpace)", "all x.(Image(x) -> TakenFromSpace(x))", "all x y.((Image(x) & Earth(y) & TakenFromSpace(x,y)) -> TakenFromSpace(x,y))", "images of Earth taken from space.", "all x y.((Image(x) & Earth(y) & TakenFromSpace(x,y)) -> TakenFromSpace(x,y))"]}
{"id": "eqasc_validation_1240", "nl": "satellites are used to take images of Earth", "fol": "", "prediction": ["all x y.((Satellite(x) & Earth(y)) -> TakesImagesOf(x,y))", "all x y z.((Satellite(x) & Earth(y) & Earth(z)) -> TakesImagesOf(x,y,z))", "all x.(Satellite(x) -> TakesImagesOfEarth(x))", "(all x.(Satellite(x) -> TakesImagesOf(x,Earth)))", "(all x y.((Satellite(x) & Earth(y)) -> TakesImagesOf(x,y)))", "all x y.((Satellite(x) & Earth(y)) -> TakesImagesOf(x,y))", "all x.(Satellite(x) -> TakesImagesOfEarth(x))", "all x y z.((Satellite(x) & Earth(y) & Satellite(z)) -> TakesImagesOf(x,y,z))", "all x.(Satellite(x) -> (TakesImagesOfEarth(x) & TakesImagesOfEarth(x)))", "all x y z.((Satellite(x) & Earth(y) & Image(z)) -> Takes(x,y,z))", "all x y.((Satellite(x) & Earth(y)) -> TakesImagesOf(x,y))", "all x.(Satellite(x) -> TakesImagesOfEarth(x))", "all x.(Satellite(x) -> TakesImagesOfEarth(x))", "all x y z.((Satellite(x) & Earth(y) & Satellite(z)) -> TakesImagesOf(x,y,z))", "all x y.((Satellite(x) & Earth(y)) -> TakesImagesOf(x,y))", "all x.(Satellite(x) -> TakeImagesOfEarth(x))"]}
{"id": "eqasc_validation_1241", "nl": "Satellite imagery gives a global perspective on the ozone hole.", "fol": "", "prediction": ["all x.(SatelliteImagery(x) -> GlobalPerspectiveOnOzoneHole(x))", "all x y.((SatelliteImagery(x) & OzoneHole(y)) -> GlobalPerspective(x,y))", "all x.(SatelliteImagery(x) -> GlobalPerspectiveOnOzoneHole(x))", "all x y.((SatelliteImagery(x) & OzoneHole(y)) -> GlobalPerspective(x,y))", "all x y z.((SatelliteImagery(x) & OzoneHole(y) & GlobalPerspective(x,y)) -> Gives(x,z))", "all x.((SatelliteImagery(x) & GlobalPerspectiveOnOzoneHole(x)) -> Gives(x,y))", "all x.((SatelliteImagery(x) & GlobalPerspectiveOnOzoneHole(x)) -> GivesGlobalPerspectiveOnOzoneHole(x))", "all x.(SatelliteImagery(x) -> GlobalPerspectiveOnOzoneHole(x))", "all x y.((SatelliteImagery(x) & OzoneHole(y)) -> GlobalPerspective(x,y))", "all x y z.((SatelliteImagery(x) & OzoneHole(y) & GlobalPerspective(z)) -> Gives(x,y,z))", "all x.(SatelliteImagery(x) -> GivesGlobalPerspectiveOnOzoneHole(x))", "all x.(SatelliteImagery(x) -> GlobalPerspectiveOnOzoneHole(x))", "all x y.((SatelliteImagery(x) & OzoneHole(y)) -> GlobalPerspective(x,y))", "all x y.((SatelliteImagery(x) & OzonHole(y)) -> GivesGlobalPerspective(x,y))", "all x.(SatelliteImagery(x) -> GlobalPerspectiveOnOzoneHole(x))", "all x y.((SatelliteImagery(x) & OzoneHole(y)) -> GlobalPerspective(x,y))"]}
{"id": "eqasc_validation_1242", "nl": "Images from space are used to study the ozone hole", "fol": "", "prediction": ["all x y.((Image(x) & Space(y)) -> UsedToStudyOzoneHole(x,y))", "all x y z.((Image(x) & Space(y) & OzoneHole(z)) -> UsedToStudy(x,y,z))", "all x y.((SpaceImage(x) & OzoneHole(y)) -> UsedToStudy(x,y))", "all x y.((ImagesFromSpace(x) & OzoneHole(y)) -> UsedToStudy(x,y))", "all x.((ImagesFromSpace(x) & OzoneHole(x)) -> UsedToStudy(x))", "all x.((SpaceImage(x) & OzoneHole(x)) -> UsedToStudy(x,y))", "all x y z.((SpaceImage(x) & OzoneHole(y) & OzoneHole(z)) -> UsedToStudy(x,y,z))", "all x y z.((ImagesFromSpace(x) & OzoneHole(y) & OzoneHole(z)) -> UsedToStudy(x,y,z))", "(StudiesOzoneHole(x) & ImagesFromSpace(x))", "all x.((ImagesFromSpace(x) & OzoneHole(x)) -> UsedToStudy(x,OzoneHole))", "all x y.((SpaceImages(x) & OzoneHole(y)) -> UsedToStudy(x,y))", "all x.((SpaceImages(x) & OzoneHole(x)) -> UsedToStudy(x,y))", "all x.(SpaceImage(x) -> UsedToStudyOzoneHole(x))", "all x.((ImagesFromSpace(x) & OzoneHole(x)) -> UsedToStudyOzoneHole(x))", "all x y.((ImagesFromSpace(x) & OzoneHole(y)) -> UsedToStudy(x,y))", "all x.((SpaceImages(x) & OzoneHole(x)) -> UsedToStudy(x,y))"]}
{"id": "eqasc_validation_1243", "nl": "All photos are digital images.", "fol": "", "prediction": ["all x.(Photo(x) -> DigitalImage(x))", "all x.(Photo(x) -> DigitalImage(x))", "(DigitalImage(photo) & -DigitalImage(photo) & DigitalImage(photo))", "(all x.(Photo(x) -> DigitalImage(x)))", "all x.(Photo(x) -> DigitalImage(x))", "all x y.((Photo(x) & DigitalImage(y)) -> DigitalImage(x))", "(all x.(Photo(x) -> DigitalImage(x))", "all x.(Photo(x) -> DigitalImage(x))", "all x.(Photo(x) -> DigitalImage(x))", "all x.(Photo(x) -> DigitalImage(x))", "all x.(Photo(x) -> DigitalImage(x))", "all x.(Photo(x) -> DigitalImage(x))", "all x.(Photo(x) -> DigitalImage(x))", "all x.(Photo(x) -> DigitalImage(x))", "all x.(Photo(x) -> DigitalImages(x))", "all x.(Photo(x) -> DigitalImage(x))"]}
{"id": "eqasc_validation_1244", "nl": "satellites are used to take photos from space", "fol": "", "prediction": ["all x y.((Satellite(x) & Space(y)) -> TakesPhotosFrom(x,y))", "all x y z.((Satellite(x) & Photo(y) & Space(z)) -> TakesFrom(x,y,z))", "all x.(Satellite(x) -> TakesPhotosFromSpace(x))", "all x y.((Satellite(x) & Space(y)) -> TakesPhotosFrom(x,y))", "(all x.(Satellite(x) -> TakesPhotosFromSpace(x)))", "all x.(Satellite(x) -> (TakesPhotosFromSpace(x) & FromSpace(x)))", "(all x y.((Satellite(x) & Space(y)) -> TakesPhotosFrom(x,y)))", "all x y z.((Satellite(x) & Photo(y) & Space(z)) -> TakesFrom(x,y,z))", "all x y.((Satellite(x) & Space(y)) -> UsedToTakePhotosFrom(x,y))", "all x.(Satellite(x) -> TakesPhotosFromSpace(x))", "all x y z.((Satellite(x) & Photo(y) & Space(z)) -> UsedToTakeFrom(x,y,z))", "all x y.((Satellite(x) & Space(y)) -> TakesPhotosFrom(x,y))", "all x.(Satellite(x) -> TakesPhotosFromSpace(x))", "all x.(Satellite(x) -> UsedToTakePhotosFromSpace(x))", "all x y.((Satellite(x) & Space(y)) -> UsedToTakePhotosFrom(x,y))", "all x.(Satellite(x) -> (TakesPhotosFromSpace(x) & FromSpace(x)))"]}
{"id": "eqasc_validation_1245", "nl": "satellites are used to take pictures of Earth from space", "fol": "", "prediction": ["all x y.((Satellite(x) & Earth(y)) -> TakesPicturesFromSpace(x,y))", "all x y z.((Satellite(x) & Earth(y) & Space(z)) -> TakesPicturesFrom(x,y,z))", "all x.(Satellite(x) -> TakesPicturesOfEarthFromSpace(x))", "(all x y.((Satellite(x) & Earth(y)) -> TakesPicturesFromSpace(x,y)))", "(all x.(Satellite(x) -> TakesPicturesOfEarthFromSpace(x,Earth)))", "all x y.((Satellite(x) & Earth(y)) -> TakesPicturesFromSpace(x,y))", "all x y z.((Satellite(x) & Earth(y) & Space(z)) -> TakesPicturesFrom(x,y,z))", "all x.(Satellite(x) -> TakesPicturesOfEarthFromSpace(x))", "all x.(Satellite(x) -> (TakesPicturesOfEarthFromSpace(x) & FromSpace(x)))", "all x y.((Satellite(x) & Earth(y)) -> TakesPhotosFromSpace(x,y))", "(all x.(Satellite(x) -> TakesPicturesOfEarthFromSpace(x,Earth)))", "all x y z.((Satellite(x) & Earth(y) & Space(z)) -> TakesPhotosFrom(x,y,z))", "all x.(Satellite(x) -> (TakesPhotosOfEarth(x) & FromSpace(x)))", "all x.(Satellite(x) -> TakesPicturesOfEarthFromSpace(x))", "all x y.((Satellite(x) & Earth(y)) -> TakesPicturesFromSpace(x,y))", "all x y z.((Satellite(x) & Earth(y) & Space(z)) -> TakesPicturesFrom(x,y,z))"]}
{"id": "eqasc_validation_1246", "nl": "Meteorologists rely on weather images from space.", "fol": "", "prediction": ["all x y.((Meteorologist(x) & WeatherImage(y)) -> ReliesOn(x,y))", "all x.(Meteorologist(x) -> ReliesOnWeatherImagesFromSpace(x))", "all x y z.((Meteorologist(x) & WeatherImage(y) & Space(z)) -> ReliesOn(x,y,z))", "(all x.(Meteorologist(x) -> ReliesOnWeatherImages(x)))", "all x y.((Meteorologist(x) & WeatherImage(y)) -> ReliesOn(x,y))", "all x.(Meteorologist(x) -> ReliesOnWeatherImagesFromSpace(x))", "all x y z.((Meteorologist(x) & WeatherImage(y) & Space(z)) -> ReliesOn(x,y,z))", "(all x.(Meteorologist(x) -> ReliesOnWeatherImagesFromSpace(x)))", "all x y.((Meteorologist(x) & WeatherImage(y)) -> ReliesOnFromSpace(x,y))", "all x.(Meteorologist(x) -> ReliesOnWeatherImages(x))", "all x.(Meteorologist(x) -> (ReliesOnWeatherImages(x,Space) & ReliesOnWeatherImages(x)))", "all x y z.((Meteorologist(x) & WeatherImage(y) & Space(z)) -> ReliesOn(x,y,z))", "all x y.((Meteorologist(x) & WeatherImage(y) & Space(z)) -> ReliesOn(x,y,z))", "all x y.((Meteorologist(x) & WeatherImage(y)) -> ReliesOn(x,y))", "all x.(Meteorologist(x) -> ReliesOnWeatherImagesFromSpace(x))", "all x.(Meteorologist(x) -> ReliesOnWeatherImages(x))"]}
{"id": "eqasc_validation_1247", "nl": "Meteorologists rely on satellites for data.", "fol": "", "prediction": ["all x y.((Meteorologist(x) & Satellite(y)) -> ReliesOnForData(x,y))", "all x.(Meteorologist(x) -> ReliesOnSatellitesForData(x))", "all x y z.((Meteorologist(x) & Satellite(y) & Data(z)) -> ReliesOn(x,y,z))", "(all x.(Meteorologist(x) -> ReliesOnSatellitesForData(x)))", "all x y.((Meteorologist(x) & Satellite(y)) -> ReliesOnForData(x,y))", "all x.(Meteorologist(x) -> ReliesOnSatellites(x))", "(all x.(Meteorologist(x) -> ReliesOnSatellites(x)))", "all x y z.((Meteorologist(x) & Satellite(y) & Data(z)) -> ReliesOn(x,y,z))", "all x y.((Meteorologist(x) & Satellite(y)) -> ReliesOnForData(x,y))", "all x.(Meteorologist(x) -> ReliesOnSatellitesForData(x))", "all x.(Meteorologist(x) -> ReliesOnSatellitesForData(x))", "all x.(Meteorologist(x) -> ReliesOnSatellites(x))", "all x y.((Meteorologist(x) & Satellite(y)) -> ReliesOnForData(x,y))", "all x.(Meteorologist(x) -> ReliesOnSatellitesForData(x))", "all x y.((Meteorologist(x) & Satellite(y)) -> ReliesOnForData(x,y))", "all x.(Meteorologist(x) -> ReliesOnSatellitesForData(x))"]}
{"id": "eqasc_validation_1248", "nl": "Satellite images are digital photographs.", "fol": "", "prediction": ["all x.(SatelliteImage(x) -> DigitalPhotograph(x))", "all x y.((SatelliteImage(x) & DigitalPhotograph(y)) -> Images(x,y))", "all x.(SatelliteImage(x) -> DigitalPhotograph(x))", "(DigitalPhotographs(satellite) & Image(satellite))", "all x.(SatelliteImage(x) -> DigitalPhotograph(x))", "all x y.((SatelliteImage(x) & Photograph(y)) -> Digital(x))", "(DigitalPhotographs(satellite) & Images(satellite))", "all x y.((SatelliteImage(x) & DigitalPhotograph(y)) -> Photograph(x,y))", "all x.(SatelliteImage(x) -> DigitalPhotograph(x))", "all x y.((SatelliteImage(x) & Photograph(y)) -> Digital(x,y))", "all x.(SatelliteImage(x) -> DigitalPhotograph(x))", "all x.(SatelliteImage(x) -> DigitalPhotography(x))", "all x.(SatelliteImage(x) -> DigitalPhotograph(x))", "all x.(SatelliteImage(x) -> DigitalPhotograph(x))", "all x.(SatelliteImage(x) -> DigitalPhotography(x))", "all x.(SatelliteImage(x) -> DigitalPhotograph(x))"]}
{"id": "eqasc_validation_1249", "nl": "Satellites are used to take digital photographs from space.", "fol": "", "prediction": ["all x y.((Satellite(x) & DigitalPhotograph(y)) -> TakesFromSpace(x,y))", "all x.(Satellite(x) -> TakesDigitalPhotographsFromSpace(x))", "all x y z.((Satellite(x) & DigitalPhotograph(y) & Space(z)) -> TakesFrom(x,y,z))", "all x y.((Satellite(x) & DigitalPhotograph(y)) -> TakesFromSpace(x,y))", "all x.(Satellite(x) -> TakesDigitalPhotographsFromSpace(x))", "(all x.(Satellite(x) -> TakesDigitalPhotographsFromSpace(x)))", "all x y z.((Satellite(x) & DigitalPhotograph(y) & Space(z)) -> TakesFrom(x,y,z))", "all x y.((Satellite(x) & DigitalPhotography(y)) -> TakesFromSpace(x,y))", "all x.(Satellite(x) -> TakesDigitalPhotographsFromSpace(x))", "all x.(Satellite(x) -> TakeDigitalPhotographsFromSpace(x))", "all x y.((Satellite(x) & Photograph(y)) -> TakesFromSpace(x,y))", "all x y z.((Satellite(x) & DigitalPhotography(y) & Space(z)) -> TakesFrom(x,y,z))", "all x y.((Satellite(x) & DigitalPhotograph(y)) -> TakesFromSpace(x,y))", "all x.(Satellite(x) -> (TakesDigitalPhotographsFromSpace(x) & FromSpace(x)))", "all x.(Satellite(x) -> TakesDigitalPhotographsFromSpace(x))", "all x.(Satellite(x) -> TakeDigitalPhotographsFromSpace(x))"]}
{"id": "eqasc_validation_1250", "nl": "seat belts are used for preventing injuries to passengers in cars", "fol": "", "prediction": ["all x y.((SeatBelt(x) & Car(y)) -> PreventsInjuries(x,y))", "all x.(SeatBelt(x) -> (PreventsInjuries(x) & PassengerIncars(x)))", "all x y z.((SeatBelt(x) & Passenger(y) & Car(z)) -> PreventsInjuries(x,y,z))", "all x y.((SeatBelt(x) & Car(y)) -> (PreventsInjuries(x,y) & PassengerInjuries(x,y)))", "all x y.((Seatbelt(x) & Car(y)) -> (PreventsInjuries(x,y) & PassengerInjuries(x,y)))", "all x y z.((SeatBelt(x) & Passenger(y) & Car(z)) -> (PreventsInjuries(x,y,z) & Incar(y,z)))", "(all x.(SeatBelt(x) -> PreventsInjuries(x,Passengers)))", "all x.(SeatBear(x) -> (PreventsInjuries(x) & PassengerIncars(x) & InCars(x)))", "all x.(SeatBelt(x) -> (PreventsInjuries(x) & PassengerInCars(x)))", "all x.(SeatBelt(x) -> PreventsInjuriesToPassengers(x))", "all x y z.((Seatbelt(x) & Passenger(y) & Car(z)) -> PreventsInjuries(x,y,z))", "all x.(SeatBelt(x) -> UsedForPreventingInjuriesToPassengers(x))", "all x y.((SeatBelt(x) & Car(y)) -> PreventsInjuriesToPassengers(x,y))", "all x.(SeatBelt(x) -> (UsedForPreventingInjuries(x) & PassengerInCars(x)))", "all x y.((SeatBear(x) & Car(y)) -> PreventsInjuries(x,y))", "all x.(SeatBear(x) -> (PreventsInjuries(x) & PassengerInCars(x)))"]}
{"id": "eqasc_validation_1251", "nl": "Children are passengers too.", "fol": "", "prediction": ["all x.(Child(x) -> Passenger(x))", "all x y.((Child(x) & Passenger(y)) -> Passenger(x,y))", "all x.(Child(x) -> Passenger(x))", "(Passenger(children) & Passenger(children))", "all x y.((Child(x) & Passenger(y)) -> Passenger(x,y))", "all x.(Child(x) -> Passenger(x))", "(Passenger(children) & Passenger(children))", "all x.(Child(x) -> Passenger(x))", "all x y.((Child(x) & Passenger(y)) -> Passenger(x))", "(Passenger(child) & Passenger(child))", "all x.(Child(x) -> Passenger(x))", "all x.(Child(x) -> Passenger(x))", "all x.(Child(x) -> Passenger(x))", "all x.(Child(x) -> Passenger(x))", "all x.(Child(x) -> Passenger(x))", "exists x.(Child(x) & Passenger(x))"]}
{"id": "eqasc_validation_1252", "nl": "seat belts prevent injuries to children", "fol": "", "prediction": ["all x y.((SeatBelt(x) & Child(y)) -> PreventsInjuries(x,y))", "all x.(SeatBelt(x) -> PreventsInjuriesToChildren(x))", "all x y z.((SeatBelt(x) & Child(y) & Child(z)) -> PreventsInjuries(x,y,z))", "all x y.((SeatBelt(x) & Child(y)) -> PreventsInjuries(x,y))", "all x.(SeatBelt(x) -> PreventsInjuriesToChildren(x))", "all x y.((Seatbelt(x) & Child(y)) -> PreventsInjuries(x,y))", "all x.((SeatBelt(x) & PreventsInjuries(x)) -> Child(x))", "all x.(SeatBear(x) -> PreventsInjuriesToChildren(x))", "all x y z.((SeatBelt(x) & Child(y) & Child(z)) -> PreventsInjuries(x,y,z))", "all x y.((SeatBelt(x) & Child(y)) -> PreventsInjuries(x,y))", "all x.(SeatBelt(x) -> PreventsInjuriesToChildren(x))", "all x.((SeatBelt(x) & PreventsInjuriesToChildren(x)) -> SeatBelts(x))", "all x y.((SeatBear(x) & Child(y)) -> PreventsInjuries(x,y))", "all x y z.((SeatBelt(x) & Child(y) & Child(z)) -> PreventsInjuries(x,y,z))", "all x.(SeatBelt(x) -> PreventsInjuriesToChildren(x))", "all x.(SeatBelt(x) -> PreventsInjuriesToChildren(x))"]}
{"id": "eqasc_validation_1253", "nl": "Seat belts save lives .", "fol": "", "prediction": ["all x.(SeatBelt(x) -> SavesLives(x))", "all x y.((Seatbelt(x) & Life(y)) -> Saves(x,y))", "all x y.((SeatBelt(x) & Life(y)) -> Saves(x,y))", "all x.(SeatBelt(x) -> SavesLife(x))", "all x y z.((Seatbelt(x) & Life(y) & Life(z)) -> Saves(x,y,z))", "(SeatBlade(s) & SavesLives(s))", "(SeatBeltsSaveLives(seatbelt))", "all x y.((Seatbelt(x) & Life(y)) -> Saves(x,y))", "all x.(SeatBlade(x) -> SavesLives(x))", "all x.(SeatBelt(x) -> SavesLives(x))", "all x y z.((Seatbelt(x) & Life(y) & -Life(z)) -> Saves(x,y,z))", "all x y.((SeatBelt(x) & Life(y)) -> Saves(x,y))", "all x.(SeatBlade(x) -> SavesLife(x))", "all x y.((Seatbelt(x) & Life(y)) -> Saves(x,y))", "all x.(SeatBelt(x) -> SavesLife(x))", "all x.(SeatBelt(x) -> SavesLives(x))"]}
{"id": "eqasc_validation_1254", "nl": "Preventing injuries to passengers in cars saves lives.", "fol": "", "prediction": ["all x y.((Car(x) & Passenger(y)) -> PreventsInjuries(x,y))", "all x.((PreventsInjuries(x) & PassengerInCars(x)) -> SavesLives(x))", "all x y.((Car(x) & Passenger(y) & PreventsInjuries(x,y)) -> SavesLives(x))", "all x y z.((Car(x) & Passenger(y) & Car(z) & PreventsInjuries(x,y,z)) -> SavesLives(x,y,z))", "all x y.((Person(x) & Car(y) & PreventsInjuries(x,y)) -> SavesLives(x,y))", "all x.((PreventsInjuries(x) & PassengerInCar(x)) -> SavesLives(x))", "all x y z.((Car(x) & Passenger(y) & Incar(z) & PreventsInjuries(x,y,z)) -> SavesLives(x,y,z))", "all x.((PatientsInCars(x) & PreventsInjuries(x)) -> SavesLives(x))", "all x.((Patient(x) & Passenger(x) & Car(x)) -> SavesLives(x))", "all x.(PreventsInjuriesToPassengers(x) -> SavesLives(x))", "all x.((Car(x) & PreventsInjuries(x,y)) -> SavesLives(x))", "all x y z.((Person(x) & Car(y) & Passenger(z) & PreventsInjuries(x,y,z)) -> SavesLives(x))", "all x.((PreventsInjuries(x) & PassengerInCars(x)) -> SavesLives(x))", "all x y.((Car(x) & Passenger(y)) -> PreventsInjuries(x,y))", "all x y.((Patient(x) & Passenger(y)) -> SavesLives(x,y))", "all x.(PreventsInjuriesToPassengers(x) -> SavesLives(x))"]}
{"id": "eqasc_validation_1255", "nl": "Car accidents are a leading cause of death for children today.", "fol": "", "prediction": ["all x.(CarAccident(x) -> LeadingCauseOfDeath(x))", "all x y.((CarAccident(x) & Child(y)) -> LeadingCauseOfDeath(x,y))", "all x y z.((CarAccident(x) & Child(y) & Child(z)) -> LeadingCauseOfDeath(x,y,z))", "all x.(CarAccident(x) -> LeadingCauseOfDeath(x))", "all x y.((CarAccident(x) & Child(y)) -> LeadingCauseOfDeath(x,y))", "all x.(CarAccount(x) -> LeadingCauseOfDeath(x))", "all x.((CarAccident(x) & LeadingCauseOfDeath(x)) -> Children(x))", "all x y.((CarAccount(x) & Child(y)) -> LeadingCauseOfDeath(x,y))", "all x.(CarAccident(x) -> LeadingCauseOfDeath(x))", "all x y z.((CarAccident(x) & Child(y) & Child(z)) -> LeadingCauseOfDeath(x,y,z))", "all x y.((CarAccident(x) & Child(y)) -> LeadingCauseOfDeath(x,y))", "all x.(CarAccident(x) -> LeadCauseOfDeathForChildren(x))", "all x.((CarAccident(x) & LeadingCauseOfDeath(x,Children)) -> Today(x))", "all x y.((CarAccident(x) & Child(y)) -> LeadingCauseOfDeath(x,y))", "all x.(CarAccount(x) -> LeadCauseOfDeathForChildren(x))", "all x.(CarAccident(x) -> LeadingCauseOfDeath(x))"]}
{"id": "eqasc_validation_1256", "nl": "seat belts can help prevent death", "fol": "", "prediction": ["all x.(SeatBelt(x) -> HelpsPreventDeath(x))", "all x y.((SeatBelt(x) & Seat(y)) -> HelpsPreventDeath(x,y))", "all x.(SeatBelt(x) -> HelpsPreventDeath(x))", "all x y z.((SeatBelt(x) & Death(y) & Seatbelt(z)) -> HelpsPrevent(x,y,z))", "all x y.((Seatbelt(x) & Seat(y)) -> HelpsPreventDeath(x,y))", "all x y.((SeatBelt(x) & Seat(y)) -> CanHelpPreventDeath(x,y))", "all x y z.((Seatbelt(x) & Death(y) & Seatbelt(z)) -> HelpsPrevent(x,y,z))", "all x.(SeatBelt(x) -> CanHelpPreventDeath(x))", "all x.((SeatBelt(x) & HelpsPreventDeath(x)) -> HelpsPreventDeath(x))", "all x y.((SeatBelt(x) & Seatbelt(y)) -> HelpsPreventDeath(x,y))", "all x.(SeatBlade(x) -> HelpsPreventDeath(x))", "all x.(SeatBelt(x) -> PreventsDeath(x))", "all x.(SeatBelt(x) -> HelpsPreventDeath(x))", "All x y.((Seatbelt(x) & Seat(y)) -> HelpsPreventDeath(x,y))", "all x.(SeatBear(x) -> HelpsPreventDeath(x))", "all x.(SeatBelt(x) -> CanHelpPreventDisaster(x))"]}
{"id": "eqasc_validation_1257", "nl": "Many injuries in crashes are caused by unbelted passengers colliding with other people in the car.", "fol": "", "prediction": ["all x y.((Crash(x) & UnbeltedPassenger(y) & Colliding(y,x)) -> Injured(x,y))", "all x y z.((Crash(x) & UnbeltedPassenger(y) & Car(z) & Colliding(y,z)) -> Injured(x,y,z))", "all x.((Crash(x) & UnbeltedPassenger(x) & Colliding(x)) -> Injured(x))", "many injuries in crashes are caused by unbeltedpassengers colliding with other people in car.", "all x y.((Crash(x) & UnbeltedPassenger(y) & CollidingWithOtherPeople(y)) -> Injured(x,y))", "all x y z.((Crash(x) & UnbeltedPassenger(y) & Car(z)) -> Colliding(y,z))", "all x.((Incident(x) & UnbeltedPassenger(x) & Colliding(x)) -> InCrash(x))", "many injuries in crashes are caused by unbeltedPassengersCollidingInCar(x))", "all x y z.((Injuries(x) & CarCrash(y) & UnbeltedPassenger(z) & CollidingWith(z,y)) -> CausedBy(x,z))", "all x.((Crash(x) & UnbeltedPassenger(x) & CollidingWithOtherPeople(x)) -> Injured(x))", "many injuries in crashes are caused by unbeltedpassengers colliding with other people in the car.", "all x y.((Crash(x) & UnbeltedPassenger(y) & Colliding(y,x)) -> Injuries(x,y))", "all x y z.((Crash(x) & UnbeltedPassenger(y) & Car(z) & CollidingWith(y,z)) -> Injured(x,y,z))", "exists x.(Incident(x) & UnbeltedPassenger(x) & CollidingWithOtherPeople(x))", "all x y.((Crash(x) & UnbeltedPassenger(y)) -> CollidingWithOtherPeople(y,x))", "exists x.(CrashInjuries(x) & UnbeltedPassengersColliding(x))"]}
{"id": "eqasc_validation_1258", "nl": "Seat belts are used for avoiding injuries in crashes for passengers", "fol": "", "prediction": ["all x y.((SeatBelt(x) & Passenger(y)) -> (UsedForEvitingInjuries(x,y) & InCrashes(x,y)))", "all x.(SeatBelt(x) -> (UsedForEvitingInjuries(x) & InCrashes(x) & Passenger(x)))", "all x y z.((SeatBelt(x) & Passenger(y) & Crash(z)) -> (UsedFor(x,y,z) & AvoidsInjuries(x,y)))", "all x y.((SeatBelt(x) & Passenger(y)) -> AvoidsInjuriesInCrashes(x,y))", "all x y.((Seatbelt(x) & Passenger(y)) -> (UsedForEvitingInjuries(x,y) & InCrashes(x,y)))", "all x y z.((Seatbelt(x) & Passenger(y) & Crash(z)) -> (UsedFor(x,y,z) & AvoidsInjuries(x,y)))", "all x.(SeatBear(x) -> (UsedForEvitingInjuries(x) & InCrashes(x) & Passenger(x)))", "(all x y.((SeatBelt(x) & Passenger(y)) -> AvoidsInjuries(x,y)))", "all x.(SeatBelt(x) -> (UsedForEvitingInjuries(x) & InCrashes(x)))", "(all x.(SeatBelt(x) -> AvoidsInjuriesInCrashes(x)))", "all x.((SeatBelt(x) & AvoidsInjuries(x,Crash) & Passenger(x)) -> Seatbelt(x))", "all x y z.((SeatBelt(x) & Carcrash(y) & Passenger(z)) -> (UsedForEvitingInjuries(x,y,z) & Seatbelt(x)))", "all x y.((SeatBear(x) & Passenger(y)) -> AvoidsInjuriesInCrashes(x,y))", "all x.(SeatBelt(x) -> (UsedForEvitingInjuries(x) & InCrashes(x) & Passenger(x)))", "all x y.((SeatBelt(x) & Passenger(y)) -> (UsedForEvitingInjuries(x,y) & InCrashes(x,y)))", "all x.(SeatBelt(x) -> AvoidsInjuriesInCrashes(x))"]}
{"id": "eqasc_validation_1259", "nl": "Helmets prevent injuries and death.", "fol": "", "prediction": ["all x.(Helmet(x) -> (PreventsInjuries(x) & PreventsDeath(x)))", "all x y.((Helmet(x) & Injuries(y) & Death(y)) -> Prevents(x,y))", "all x.(Helmet(x) -> (PreventsInjuries(x) & PreventsDeath(x)))", "(PreventsInjuriesAndDeath(Helmet))", "all x y.((Helmet(x) & Injuries(y) & Death(y)) -> Prevents(x,y))", "all x y.((Helmet(x) & Injury(y)) -> Prevents(x,y))", "all x.(Helmet(x) -> (PreventsInjuries(x) & PreventsDeath(x)))", "all x.(Horse(x) -> (PreventsInjuries(x) & PreventsDeath(x)))", "all x.(Helmet(x) -> PreventsInjuriesAndDeath(x))", "all x.(Helmet(x) -> (PreventsInjuries(x) & PreventsDeath(x)))", "all x y.((Helmet(x) & Injured(y) & Death(y)) -> Prevents(x,y))", "all x y.((Helmet(x) & Injury(y)) -> Prevents(x,y))", "all x.(Helmet(x) -> (PreventsInjuries(x) & PreventsDeath(x)))", "all x.(Helmet(x) -> PreventsInjuriesAndDeath(x))", "all x.(Helmet(x) -> (PreventsInjuries(x) & PreventsTod(x)))", "all x.(Helmet(x) -> (PreventsInjuries(x) & PreventsDeath(x)))"]}
{"id": "eqasc_validation_1260", "nl": "Seat belts and helmets protect passengers", "fol": "", "prediction": ["all x y.((SeatBelt(x) & Helmet(y)) -> ProtectsPassengers(x,y))", "all x y z.((SeatBelt(x) & Helmet(y) & Passenger(z)) -> Protects(x,y,z))", "all x.((SeatBelt(x) | Helmet(x)) -> ProtectsPassengers(x))", "(ProtectsPassengersWithSeatBeltsAndHelmets(seatbelts) & ProtectsPassengersWithHelmets(seatbelts))", "all x.((SeatBlade(x) | Helmet(x)) -> ProtectsPassengers(x))", "all x y.((SeatBelt(x) & Helmet(y)) -> ProtectsPassengers(x,y))", "all x y.((SeatBlade(x) & Helmet(y)) -> ProtectsPassengers(x,y))", "all x.((SeatBelt(x) | Helmet(x)) -> ProtectsPassengers(x))", "all x y z.((SeatBelt(x) & Helmet(y) & Passenger(z)) -> Protects(x,y,z))", "(ProtectPassengersWithSeatBearsAndHelmets(seatbelts) & ProtectsPassengersWithHelmets(seatbelts))", "(ProtectsPassengersWithSeatBeltsAndHelmets(seatbelts))", "all x.(SeatBeltsAndHelmets(x) -> ProtectsPassengers(x))", "all x.((SeatBelt(x) & Helmet(x)) -> ProtectsPassengers(x))", "all x.(SeatBelt(x) & Helmet(x)) -> ProtectsPassengers(x))", "all x y z.((SeatBelt(x) & Helmet(y) & Passenger(z)) -> Protects(x,y,z))", "all x y.((SeatBelt(x) & Helmet(y)) -> ProtectsPassengers(x,y))"]}
{"id": "eqasc_validation_1261", "nl": "An injury is caused by an accident.", "fol": "", "prediction": ["all x.(Injury(x) -> CausedByAccident(x))", "all x y.((Injury(x) & Accident(y)) -> CausedBy(x,y))", "all x.(Injury(x) -> CausedByAccident(x))", "all x.(InjuredByAccident(x) -> CausedBy(x,y))", "all x y.((Injury(x) & Accident(y)) -> CausedBy(x,y))", "all x y z.((Injury(x) & Accident(y) & Accident(z)) -> CausedBy(x,y,z))", "all x.(Injury(x) -> CausedByAccident(x))", "all x.(Injury(x) -> CausedByAccident(x))", "all x.(InjuredByAccident(x) -> CausedBy(x,accident))", "all x y.((Injury(x) & Accident(y)) -> CausedBy(x,y))", "all x y.((Injury(x) & Accident(y)) -> CausedBy(x,y))", "exists x.(InjuredByAccident(x) & CausedBy(x,accident))", "all x.(Injury(x) -> CausedByAccident(x))", "all x y.((Injured(x) & Accident(y)) -> CausedBy(x,y))", "exists x.(Injury(x) & CausedByAccident(x))", "exists x.(Injury(x) & CausedByAccident(x))"]}
{"id": "eqasc_validation_1262", "nl": "Seat belts are important in the case of an accident.", "fol": "", "prediction": ["all x.((SeatBelt(x) & Accident(x)) -> Important(x))", "all x y.((Seatbelt(x) & Accident(y)) -> Important(x,y))", "all x y.((SeatBelt(x) & Accident(y)) -> Important(x,y))", "all x.((SeatBlade(x) & Accident(x)) -> Important(x))", "all x.((SeatBelt(x) & Accident(x)) -> Important(x))", "all x y z.((Seatbelt(x) & Accident(y) & Accident(z)) -> Important(x,y,z))", "all x.(SeatBelt(x) -> ImportantInAccident(x))", "all x y.((Seatbelt(x) & Accident(y)) -> ImportantIn(x,y))", "all x y.((SeatBelt(x) & Accident(y)) -> ImportantIn(x,y))", "all x.((SeatBelt(x) & Accident(x)) -> Important(x))", "all x.((Seatbelt(x) & Accident(x)) -> Important(x))", "all x y.((Seatbelt(x) & Accident(y)) -> Important(x,y))", "all x.(SeatBelt(x) -> ImportantInAccident(x))", "exists x.(SeatBelt(x) & InCaseOfAccident(x))", "all x y.((SeatBelt(x) & Accident(y)) -> ImportantIn(x,y))", "all x.((SeatBear(x) & Accident(x)) -> ImportantIn(x,y))"]}
{"id": "eqasc_validation_1263", "nl": "Seat Belts Seat belts provide primary protection in all types of crashes.", "fol": "", "prediction": ["all x.(SeatBelt(x) -> ProvidesPrimaryProtection(x))", "all x y.((SeatBelt(x) & Crash(y)) -> ProvidesPrimaryProtection(x,y))", "(ProvidesPrimaryProtection(seatbelts) & InCrashes(seatbelts))", "all x.(SeatBelt(x) -> ProvidesPrimaryProtection(x))", "all x.(SeatBlade(x) -> ProvidesPrimaryProtection(x))", "all x y z.((SeatBelt(x) & Crash(y) & Crash(z)) -> ProvidesPrimaryProtection(x,y,z))", "(ProvidesPrimaryProtectionInCrashes(SeatBelts) & SeatBelts(SeatBelts))", "all x y.((SeatBelt(x) & Crash(y)) -> ProvidesPrimaryProtection(x,y))", "all x y.((SeatBlade(x) & Crash(y)) -> ProvidesPrimaryProtection(x,y))", "all x y.((SeatBelt(x) & Carcage(y)) -> ProvidesPrimaryProtection(x,y))", "all x.(SeatBelt(x) -> ProvidesPrimaryProtectionInCrashes(x))", "All x.((SeatBelt(x) & PrimaryProtection(x)) -> SeatBelt(x))", "all x.(SeatBlade(x) -> ProvidesPrimaryProtection(x))", "all x.(SeatBelt(x) -> ProvidesPrimaryProtection(x))", "all x y.((SeatBelt(x) & Crash(y)) -> ProvidesPrimaryProtection(x,y))", "All x.(SeatBelt(x) -> PrimaryProtection(x))"]}
{"id": "eqasc_validation_1264", "nl": "car crashes can injure passengers", "fol": "", "prediction": ["all x y.((CarCrashes(x) & Passenger(y)) -> CanInjure(x,y))", "all x y z.((CarCrashes(x) & Passenger(y) & Car(z)) -> CanInjure(x,y,z))", "all x.(CarCrashes(x) -> CanInjurePassengers(x))", "all x y.((CarCrashes(x) & Passenger(y)) -> Injure(x,y))", "all x y z.((CarCrashes(x) & Passenger(y) & Car(z)) -> Injure(x,y,z))", "all x.(CarCrashes(x) -> InjurePassengers(x))", "all x.(CameraCrash(x) -> CanInjurePassengers(x))", "all x.(CarCrashes(x) -> CanInjurePassengers(x))", "all x y.((CarCrashes(x) & Passenger(y)) -> CanInjure(x,y))", "all x.((CarCrashes(x) & InjurePassengers(x)) -> CanInjurePassengers(x))", "all x y z.((CarCrash(x) & Passenger(y) & Car(z)) -> CanInjure(x,y,z))", "all x y z.((CarCrashes(x) & Passenger(y) & Car(z)) -> CanInjure(x,y,z))", "all x y.((CarCrash(x) & Passenger(y) & InJaw(x,y)) -> CanInjure(x,y))", "all x.(CarCrash(x) -> CanInjurePassengers(x))", "all x y.((CarCrashes(x) & Passenger(y) & InJoin(x,y)) -> CanInjure(x,y))", "all x.(CarCrashes(x) -> InjurePassengers(x))"]}
{"id": "eqasc_validation_1265", "nl": "Whiplash injuries are soft tissue injuries.", "fol": "", "prediction": ["all x.(WhiplashInjuries(x) -> SoftTissueInjuries(x))", "all x y.((WhiplashInjuries(x) & SoftTissueInjuries(y)) -> Injuries(x,y))", "all x.(WhiplashInjuries(x) -> SoftTissueInjuries(x))", "(SoftTissueInjuries(whiplash) & InjuredBy(whiplash))", "all x.(Whiplash(x) -> SoftTissueInjuries(x))", "all x y.((WhiplashInjuries(x) & SoftTissueInjuries(y)) -> Injuries(x,y))", "all x.(WhippedlashInjuries(x) -> SoftTissueInjuries(x))", "(SoftTissueInjuries(whiplash) & Injuries(whiplash))", "all x.(WhiplashInjuries(x) -> SoftTissueInjuries(x))", "all x y.((WhiplashInjury(x) & SoftTissueInjuries(y)) -> Illness(x,y))", "all x.((WhiplashInjury(x) & SoftTissueInjuries(x)) -> Injuries(x))", "all x.(WhiplashInjuries(x) -> SoftTissueInjuries(x))", "all x.(Whiplash(x) -> SoftTissueInjuries(x))", "all x.(WhippedlashInjuries(x) -> SoftTissueInjuries(x))", "all x y.((WhiplashInjuries(x) & SoftTissueInjuries(y)) -> Injured(x,y))", "all x.(WhiplashInjuries(x) -> SoftTissueInjuries(x))"]}
{"id": "eqasc_validation_1266", "nl": "Seat belts can prevent whiplash in cars.", "fol": "", "prediction": ["all x.(SeatBelt(x) -> PreventsWhiplash(x))", "all x y.((SeatBelt(x) & Car(y)) -> PreventsWhiplash(x,y))", "all x.(SeatBelt(x) -> PreventsWhistlash(x))", "all x y.((SeatBelt(x) & Car(y)) -> CanPreventChrisplash(x,y))", "all x y.((Seatbelt(x) & Car(y)) -> PreventsWhiplash(x,y))", "all x y z.((SeatBelt(x) & Car(y) & Car(z)) -> CanPrevent(x,y,z))", "all x.((SeatBelt(x) & Car(y)) -> PreventsWhiplash(x,y))", "(PreventsWhistlashInCars(seatbelts))", "all x.(SeatBlade(x) -> PreventsWhistlashInCars(x))", "all x.(SeatBelt(x) -> CanPreventChrisplash(x))", "all x y z.((Seatbelt(x) & Car(y) & Car(z)) -> CanPrevent(x,y,z))", "all x y.((SeatBelt(x) & Car(y)) -> PreventsWhistlash(x,y))", "all x.((SeatBelt(x) & Car(y)) -> CanPreventChrisplash(x,y))", "all x y.((SeatBlade(x) & Car(y)) -> CanPreventChrisplash(x,y))", "all x.(SeatBelt(x) -> PreventsWhiplash(x))", "all x.(SeatBlade(x) -> CanPreventWhiplash(x))"]}
{"id": "eqasc_validation_1267", "nl": "seat belts are used for preventing injuries to passengers in vehicles", "fol": "", "prediction": ["all x y.((SeatBelt(x) & Vehicle(y)) -> PreventsInjuries(x,y))", "all x y z.((SeatBelt(x) & Passenger(y) & Vehicle(z)) -> PreventsInjuries(x,y,z))", "all x.(SeatBelt(x) -> (PreventsInjuries(x) & PassengerInjuries(x) & InVehicles(x)))", "all x y.((SeatBelt(x) & Vehicle(y)) -> (PreventsInjuries(x,y) & PassengerInjuries(x,y)))", "all x y z.((SeatBelt(x) & Passenger(y) & Vehicle(z)) -> (PreventsInjuries(x,y,z) & InVehicles(y,z)))", "(all x.(SeatBelt(x) -> PreventsInjuriesToPassengers(x)))", "all x.(SeatBelt(x) -> (PreventsInjuries(x) & PassengerInjuries(x) & InVehicles(x)))", "all x y.((SeatBelt(x) & Passenger(y)) -> PreventsInjuriesInVehicles(x,y))", "all x.(SeatBear(x) -> (PreventsInjuries(x) & PassengerInjuries(x) & InVehicles(x)))", "all x.(SeatBelt(x) -> PreventsInjuriesToPassengers(x))", "all x.(SeatBelt(x) -> (UsedForPreventingInjuries(x) & PassengerInVehicles(x)))", "all x y.((SeatBear(x) & Vehicle(y)) -> PreventsInjuries(x,y))", "all x y z.((Seatbelt(x) & Passenger(y) & Vehicle(z)) -> (PreventsInjuries(x,y,z) & InVehicles(y,z)))", "all x y z.((SeatBelt(x) & Passenger(y) & Vehicle(z)) -> PreventsInjuries(x,y,z))", "all x.(SeatBear(x) -> (PreventsInjuries(x) & PassengerInjuries(x) & InVehicles(x)))", "all x.(SeatBelt(x) -> PreventsInjuriesToPassengersInVehicles(x))"]}
{"id": "eqasc_validation_1268", "nl": "Injuries to drivers and passengers increase when the vehicle swerves.", "fol": "", "prediction": ["all x y.((Vehicle(x) & Swerves(x)) -> (InjuriesToDrivers(x) & InjuriesToPassengers(x)))", "all x.((Vehicle(x) & Swerves(x)) -> IncreasedInjuries(x))", "all x y z.((Vehicle(x) & Driver(y) & Passenger(z) & Swerves(x)) -> InjuriesIncrease(y,z))", "all x y.((Vehicle(x) & Swerves(x)) -> IncreasesInjuries(x,y))", "all x.((Vehicle(x) & Sweeps(x)) -> IncreasesInjuries(x))", "all x.((VehicleSwerves(x) & InjuriesToDrivers(x) & InjuriesToPassengers(x)) -> Increases(x))", "all x y.((Vehicle(x) & Sweeps(x)) -> (InjuriesToDrivers(x) & InjuriesToPassengers(x)))", "all x y.((Vehicle(x) & Swerves(x)) -> InjuriesToDriversAndPassengers(x,y))", "all x.((Vehicle(x) & Swerves(x)) -> InjuriesToDriversAndPassengers(x))", "(InjuriesToDriversAndPassengers(x) & VehicleSwerves(x))", "all x.((Driver(x) & Passenger(x) & Swerves(x)) -> InjuriesIncrease(x))", "all x y z.((Vehicle(x) & Driver(y) & Passenger(z) & Sweeps(x,y,z)) -> InjuriesIncrease(y,z))", "all x y.((Driver(x) & Passenger(y) & VehicleSwerves(x)) -> InjuriesIncreases(x,y))", "all x y.((Vehicle(x) & SteerVehicle(y)) -> (Injuries(x,y) & Increases(x,y)))", "all x.(Swerves(x) -> (InjuriesToDrivers(x) | InjuriesToPassengers(x)))", "all x.((Vehicle(x) & SteerVehicle(x)) -> IncreasesInjuries(x))"]}
{"id": "eqasc_validation_1269", "nl": "Seatbelts can prevent injuries while swerving.", "fol": "", "prediction": ["all x.(Seatbelt(x) -> PreventsInjuries(x))", "all x y.((Seatbelt(x) & Swerving(y)) -> PreventsInjuries(x,y))", "all x.(Seatbelt(x) -> PreventsInjuries(x))", "all x.(Seatbelt(x) -> PreventsInjuriesWhileSwerving(x))", "all x y.((Seatbelt(x) & Swerving(y)) -> PreventsInjuries(x,y))", "all x y z.((Seatbelt(x) & Injuries(y) & Swerving(z)) -> Prevents(x,y,z))", "all x y.((Seatbelt(x) & Sweeping(y)) -> PreventsInjuries(x,y))", "all x.((Seatbelt(x) & Swerving(x)) -> PreventsInjuries(x))", "all x.(Seatbelt(x) -> (PreventsInjuries(x) & Sweeping(x)))", "all x.(Seatbelt(x) -> PreventInjuries(x))", "all x y.((Seatbelt(x) & Swerving(y)) -> PreventsInjuries(x,y))", "all x.(Seatbelt(x) -> PreventsInjuriesWhileSwerving(x))", "all x.(Seatbelt(x) -> (PreventsInjuries(x,swerving) & Uses(x,swerving)))", "all x y.((Seatbelt(x) & Striking(y)) -> PreventsInjuries(x,y))", "all x.(Seatbelt(x) -> CanPreventInjuriesWhileSwerving(x))", "All x.(Seatbelt(x) -> PreventsInjuriesWhenSwerving(x))"]}
{"id": "eqasc_validation_1270", "nl": "Waldron buckles with lead foil made up the seat belts.", "fol": "", "prediction": ["all x y.((WaldronBolt(x) & LeadFoil(y)) -> MadeUpSeatbelts(x,y))", "all x.((WaldronBolt(x) & LeadFoil(x)) -> SeatBelts(x))", "all x y z.((WaldronBolt(x) & LeadFoil(y) & SeatBelt(z)) -> MadeUp(x,y,z))", "all x y.((WaldronBolt(x) & LeadFoil(y)) -> SeatBelt(x,y))", "all x.((WaldronBowl(x) & LeadFoil(x)) -> SeatBelts(x))", "all x.((WaldronBolt(x) & LeadFoil(x)) -> SeatBelts(x))", "all x y.((WaldronBowl(x) & LeadFoil(y)) -> MadeUpSeatbelts(x,y))", "all x.(WaldronBolt(x) -> (WaldronBolt(x) & LeadFoil(x) & SeatBelts(x)))", "all x y z.((WaldronBolt(x) & LeadFoil(y) & SeatBelt(z)) -> MadeUp(x,y,z))", "all x.(WaldronBolt(x) -> (BoltsWithLeadFoil(x) & SeatBelts(x)))", "(all x.(WaldronBolt(x) -> MadeUpByLeadFoil(x)))", "(all x.((WaldronBolt(x) & LeadFoil(x)) -> SeatBelts(x))", "all x y z.((WaldronBowl(x) & LeadFoil(y) & SeatBelt(z)) -> MadeUp(x,y,z))", "(all x.(WaldronBowl(x) -> MadeUpByLeadFoil(x)))", "all x.((WaldronBolt(x) & LeadFoil(x)) -> SeatBlades(x))", "all x y.((WaldronBolt(x) & LeadFoil(y)) -> MadeUpSeatbelts(x,y))"]}
{"id": "eqasc_validation_1271", "nl": "Waldron buckles with lead are used to prevent injuries to passengers in cars", "fol": "", "prediction": ["all x y.((WaldronBolt(x) & Car(y)) -> (BladesWithLead(x) & PreventsInjuries(x,y)))", "all x y z.((WaldronBolt(x) & LeadBolt(y) & Passenger(z)) -> (PreventsInjuries(x,z) & InCars(x)))", "all x.((WaldronBolt(x) & HasLead(x)) -> PreventsInjuriesToPassengers(x))", "all x y.((WaldronBolt(x) & Car(y)) -> (BoltWithLead(x) & PreventsInjuries(x,y)))", "(all x.((WaldronBolt(x) & LeadBolt(x)) -> PreventsInjuriesToPassengers(x))", "all x.((WaldronBolt(x) & HasLead(x)) -> UsedToPreventInjuriesToPassengers(x))", "all x y z.((WaldronBolt(x) & LeadBolt(y) & Passenger(z) & Car(z)) -> PreventsInjuries(x,y,z))", "all x y.((WaldronBowl(x) & Car(y) & HasLead(x)) -> PreventsInjuriesToPassengers(x,y))", "all x.((WaldronBowl(x) & HasLead(x)) -> PreventsInjuriesToPassengers(x))", "all x y z.((WaldronBowl(x) & LeadBowl(y) & Passenger(z)) -> (PreventsInjuries(x,z) & InCars(x)))", "all x.(WaldronBoltsWithLead(x) -> UsedToPreventInjuriesToPassengersInCars(x))", "all x.((WaldronBolt(x) & LeadBolt(x)) -> PreventsInjuriesToPassengersInCars(x))", "all x y.((WaldronBlock(x) & Car(y)) -> (BlocksWithLead(x) & PreventsInjuries(x,y)))", "all x.((WaldronBlock(x) & HasLead(x)) -> PreventsInjuriesToPassengersInCars(x))", "all x y z.((WaldronBlock(x) & LeadBlock(y) & Passenger(z)) -> PreventsInjuries(x,y,z))", "all x.(WaldronBoltsWithLead(x) -> PreventsInjuriesToPassengers(x))"]}
{"id": "eqasc_validation_1272", "nl": "a wildfire changes an ecosystem drastically", "fol": "", "prediction": ["all x y.((Wildfire(x) & Ecosystem(y)) -> ChangesDirriously(x,y))", "all x y z.((Wildfire(x) & Ecosystem(y) & Ecosystem(z)) -> ChangesDramaticly(x,y,z))", "all x.(Wildfire(x) -> ChangesEcosystemDirriously(x))", "all x y.((Wildfire(x) & Ecosystem(y)) -> ChangesDramaticly(x,y))", "all x.((Wildfire(x) & Ecosystem(y)) -> ChangesDirriously(x,y))", "all x y z.((Wildfire(x) & Ecosystem(y) & Ecosystem(z)) -> ChangesDirriously(x,y,z))", "all x.((Wildfire(x) & Ecosystem(y)) -> ChangesDramaticly(x,y))", "all x.(Wildfire(x) -> ChangesEcosystemDirregularly(x))", "all x y.((Wildfire(x) & Ecosystem(y)) -> ChangesDirriously(x,y))", "all x y z.((Wildfire(x) & Ecosystem(y) & Ecosystem(z) & ChangesDirriously(x,y,z)) -> ChangesDirriously(x,y,z))", "all x y z.((Wildfire(x) & Ecosystem(y) & Ecosystem(z)) -> ChangesDramaticly(x,y,z))", "all x.((Wildfire(x) & ChangesEcosystem(x)) -> DramaticallyChangesEcosystem(x))", "all x.(Wildfire(x) -> ChangesEcosystemDramaticly(x))", "all x y.((Wildfire(x) & Ecosystem(y)) -> ChangesDramaticly(x,y))", "all x y z.((Wildfire(x) & Ecosystem(y) & Ecosystem(z)) -> (Changes(x,y) & Dramatic(y)))", "all x y.((Wildfire(x) & Ecosystem(y)) -> ChangesDesirably(x,y))"]}
{"id": "eqasc_validation_1273", "nl": "An ecosystem is like a neighborhood in nature.", "fol": "", "prediction": ["all x.(Ecosystem(x) -> (Neighborhood(x) & InNature(x)))", "all x.(Ecosystem(x) -> (NeighborhoodInNature(x) & Like(x,Nature)))", "all x y.((Ecosystem(x) & Nature(y)) -> LikeNeighborhoodIn(x,y))", "all x.(Ecosystem(x) -> NeighborhoodInNature(x))", "all x.(Ecosystem(x) -> (LikeNeighborhood(x) & InNature(x)))", "all x y.((Ecosystem(x) & Neighborhood(y)) -> Like(x,y))", "all x y z.((Ecosystem(x) & Neighborhood(y) & Nature(z)) -> Like(x,y,z))", "all x.(Ecosystem(x) -> LikeNeighborhoodInNature(x))", "all x.(Ecosystem(x) -> (Neighborhood(x) & InNature(x)))", "all x y.((Ecosystem(x) & Nature(y)) -> NeighborhoodIn(x,y))", "all x.(Ecosystem(x) -> (LikeNeighborhood(x) & InNature(x)))", "all x y.((Ecosystem(x) & Neighborhood(y)) -> Like(x,y))", "all x.(Ecosystem(x) -> NeighborhoodInNature(x))", "exists x.(Ecosystem(x) & Neighborhood(x) & InNature(x))", "exists x.(Ecosystem(x) & Neighborhood(x) & InNature(x))", "exists x.(Ecosystem(x) & NeighborhoodInNature(x))"]}
{"id": "eqasc_validation_1274", "nl": "A wildfire changes a neighborhood in nature drastically.", "fol": "", "prediction": ["all x y.((Wildfire(x) & Neighborhood(y)) -> ChangesDirtuallyInNature(x,y))", "all x y z.((Wildfire(x) & Neighborhood(y) & Nature(z)) -> ChangesDramaticly(x,y,z))", "all x.(Wildfire(x) -> ChangesNeighborhoodInNatureDramaticly(x))", "all x y.((Wildfire(x) & Neighborhood(y)) -> ChangesDramaticInNature(x,y))", "all x y z.((Wildfire(x) & Neighborhood(y) & Nature(z)) -> ChangesDirriously(x,y,z))", "all x.((Wildfire(x) & Neighborhood(y)) -> ChangesDramaticNature(x,y))", "all x.(Wildfire(x) -> ChangesNeighborhoodDirriously(x))", "all x y.((Wildfire(x) & Neighborhood(y)) -> ChangesDirriously(x,y))", "all x.(Wildfire(x) -> (ChangesNeighborhood(x) & DramaticInNature(x)))", "all x y z.((Wildfire(x) & Neighborhood(y) & Nature(z) & ChangesDirtually(x,y,z)) -> ChangesDirtually(x,y,z))", "all x.(Wildfire(x) -> ChangesNeighborhoodInNatureDramaticly(x))", "all x y z.((Wildfire(x) & Neighborhood(y) & Nature(z)) -> ChangesDramaticly(x,y,z))", "all x y.((Wildfire(x) & Neighborhood(y)) -> ChangesDramaticNature(x,y))", "all x y.((Wildfire(x) & Neighborhood(y) & Nature(z)) -> ChangesDirriously(x,y,z))", "all x y.((Wildfire(x) & Neighborhood(y)) -> ChangesDirtuallyInNature(x,y))", "all x.(Wildfire(x) -> ChangesNeighborhood(x))"]}
{"id": "eqasc_validation_1275", "nl": "Humans start most wildfires.", "fol": "", "prediction": ["all x.(Human(x) -> StartsWildfire(x))", "all x y.((Human(x) & Wildfire(y)) -> Starts(x,y))", "(StartsWildfires(Humans) & -StartsWildfires(Humans))", "all x.(Human(x) -> StartsWildfire(x))", "(StartsWildfire(Human) & MostWildfires(Human))", "(StartsWildfires(Humans) & MostWildfires(Humans))", "all x y.((Human(x) & Wildfire(y)) -> Starts(x,y))", "(exists x.(Human(x) & StartsWildfire(x)))", "all x.(Human(x) -> StartsWildfire(x))", "all x.(Human(x) -> StartsWildfires(x))", "all x y.((Human(x) & Wildfire(y)) -> Starts(x,y))", "all x.(Human(x) -> (StartsWildfires(x) & MostWildfires(x)))", "all x y.((Human(x) & Wildfire(y)) -> Starts(x,y))", "all x.(Human(x) -> MostStartsWildfire(x))", "all x.(Human(x) -> StartsWildfire(x))", "all x.(Human(x) -> StartsWildfires(x))"]}
{"id": "eqasc_validation_1276", "nl": "humans can change ecosystems drastically", "fol": "", "prediction": ["all x y.((Human(x) & Ecosystem(y)) -> CanChangeDramaticly(x,y))", "all x y z.((Human(x) & Ecosystem(y) & Ecosystem(z)) -> CanChangeDramaticly(x,y,z))", "all x.(Human(x) -> CanChangeEcosystemsDramaticly(x))", "(all x.(Human(x) -> CanChangeEcosystemsDramaticly(x)))", "all x y.((Human(x) & Ecosystem(y)) -> CanChangeDramaticly(x,y))", "all x y z.((Human(x) & Ecosystem(y) & Ecosystem(z)) -> CanChangeDramaticly(x,y,z))", "all x.(Human(x) -> CanChangeEcosystemsDramaticly(x))", "all x.(HumansChangeEcosystemsDramaticly(x) -> HumansChangeEcosystemsDramaticly(x))", "(all x.(Human(x) -> CanChangeEcosystemsDramaticly(x)))", "all x y z.((Human(x) & Ecosystem(y) & Environment(z) & Changes(x,y,z)) -> CanChangeDramaticly(x,y,z))", "all x.(Human(x) -> ChangesEcosystemsDramaticly(x))", "all x.(Human(x) -> CanChangeEcosystemsDramaticly(x))", "all x y.((Human(x) & Ecosystem(y)) -> CanChangeDramaticly(x,y))", "all x y z.((Human(x) & Ecosystem(y) & Ecosystem(z)) -> CanChangeDramaticly(x,y,z))", "all x.(HumansChangeEcosystemsDramaticly(x) -> HumansChangeEcosystemsDramaticly(x))", "all x y.((Human(x) & Ecosystem(y)) -> CanChangeDirreproachably(x,y))"]}
{"id": "eqasc_validation_1277", "nl": "Fire is a natural part forest ecosystems.", "fol": "", "prediction": ["all x.(Fire(x) -> NaturalPartForestEcosystem(x))", "(NaturalPartForestEcosystem(Fire) & PartForestEcosystem(Fire))", "all x y.((Fire(x) & Forest(y)) -> NaturalPart(x,y))", "all x.(Fire(x) -> NaturalPartForestEcosystem(x))", "(NaturalPartForestEcosystems(Fire))", "all x y z.((Fire(x) & ForestEcosystem(y) & Forest(z)) -> NaturalPart(x,y,z))", "all x y.((Fire(x) & Forest(y)) -> NaturalPart(x,y))", "all x.(Fire(x) -> NaturalPartForestEcosystem(x))", "(NaturalPartForestEcosystems(Fire))", "all x.(Fire(x) -> NaturalPartForestEcosystem(x))", "all x y.((Fire(x) & Forest(y)) -> NaturalPart(x,y))", "all x y.((Fire(x) & ForestEcosystem(y)) -> NaturalPart(x,y))", "all x.(Fire(x) -> NaturalPartForestEcosystem(x))", "all x.(Fire(x) -> NaturalPartForestEcosystem(x))", "all x.(Fire(x) -> NaturalPartForestEcosystems(x))", "all x.(Fire(x) -> NaturalPartForestEcosystems(x))"]}
{"id": "eqasc_validation_1278", "nl": "a wildfire changes forests", "fol": "", "prediction": ["all x y.((Wildfire(x) & Forest(y)) -> Changes(x,y))", "all x.(Wildfire(x) -> ChangesForests(x))", "all x.((Wildfire(x) & ChangesForests(x)) -> ChangesForests(x))", "all x y z.((Wildfire(x) & Forest(y) & Forest(z)) -> Changes(x,y,z))", "all x y.((Wildfire(x) & Forest(y)) -> ChangesForests(x,y))", "all x.((Wildfire(x) & ChangesForests(x)) -> WildfireChangesForests(x))", "all x.(Wildfire(x) -> ChangesForests(x))", "all x y z.((Wildfire(x) & Forest(y) & Forest(z)) -> Changes(x,y,z))", "all x y.((Wildfire(x) & Forest(y)) -> ChangesForests(x,y))", "all x y.((Wildfire(x) & Forest(y) & ChangesForests(x,y)) -> ChangesForests(x,y))", "all x.((Wildfire(x) & ChangesForests(x)) -> ChangesForests(x))", "all x y z.((Wildfire(x) & Forest(y) & Forest(z)) -> Changes(x,y,z))", "all x.(Wildfire(x) -> ChangesForests(x))", "all x y.((Wildfire(x) & Forest(y)) -> ChangesForests(x,y))", "all x.((Wildfire(x) & ChangesForests(x)) -> WildfireChangesForests(x))", "all x.(Wildfire(x) -> ChangesForests(x))"]}
{"id": "eqasc_validation_1279", "nl": "An ecosystem is a community of species in a specific area.", "fol": "", "prediction": ["all x.(Ecosystem(x) -> exists y.(Species(y) & Community(x,y)) & exists z.(Area(z) & InArea(x,z))))", "all x y.((Ecosystem(x) & CommunityOfSpecies(y) & SpecificArea(x,y)) -> CommunityInArea(x,y))", "all x y z.((Ecosystem(x) & CommunityOfSpecies(y) & Area(z)) -> InSpecificArea(x,y,z))", "all x.(Ecosystem(x) -> exists y.(Species(y) & Community(x,y)) & exists z.(Area(z) & InArea(x,z))))", "all x y.((Ecosystem(x) & CommunityOfSpecies(x,y) & SpecificArea(y)) -> CommunityOfSpeciesInArea(x,y))", "all x.(Ecosystem(x) -> exists y.(Species(y) & Community(x,y)) & exists z.(Area(z) & InArea(x,z))))", "all x.(Ecosystem(x) -> exists y.(Species(y) & Community(x,y) & InSpecificArea(x,y)))", "all x y z.((Ecosystem(x) & CommunityOfSpecies(y) & Area(z)) -> InSpecificArea(x,y,z))", "all x.(Ecosystem(x) -> (CommunityOfSpecies(x) & SpecificArea(x)))", "all x y z.((Ecosystem(x) & CommunityOfSpecies(y) & Area(z) & InSpecificArea(x,y,z)) -> InArea(x,y,z))", "all x y.((Ecosystem(x) & CommunityOfSpecies(x,y)) -> InSpecificArea(y))", "all x.(Ecosystem(x) -> exists y.(SpeciesCommunity(y) & InSpecificArea(x,y))))", "all x.(Ecosystem(x) -> exists y.(Species(y) & Community(x,y) & InSpecificArea(x,y)))", "all x y.((Ecosystem(x) & CommunityOfSpecies(y)) -> InSpecificArea(x,y))", "exists x.(Ecosystem(x) & CommunityOfSpecies(x) & InSpecificArea(x))", "exists x.(Ecosystem(x) & CommunityOfSpeciesInSpecificArea(x))"]}
{"id": "eqasc_validation_1280", "nl": "A wildfire changes a community of species in a specific area drastically.", "fol": "", "prediction": ["all x y z.((Wildfire(x) & CommunityOfSpecies(y) & Area(z)) -> ChangesDramaticly(x,y,z))", "all x y.((Wildfire(x) & CommunityOfSpecies(y) & Area(z)) -> ChangesDramaticly(x,y,z))", "all x y z.((Wildfire(x) & CommunityOfSpecies(y) & Area(z)) -> ChangesDramaticly(x,y,z))", "all x.(Wildfire(x) -> ChangesSpecies(x))", "all x y z.((Wildfire(x) & CommunityOfSpecies(y) & Area(z) & ChangesDramaticly(x,y,z)) -> ChangesDramaticly(x,y,z))", "all x y.((Wildfire(x) & CommunityOfSpecies(y) & Area(z)) -> ChangesDramaticly(x,y,z))", "all x.(Wildfire(x) -> (ChangesSpecies(x) & InSpecificArea(x)))", "all x y z.(Wildfire(x) -> (ChangesCommunityOfSpecies(x,y,z) & Area(z) & InSpecificArea(x,z)))", "all x.((Wildfire(x) & CommunityOfSpecies(x) & SpecificArea(x)) -> ChangesDirriously(x))", "all x y.((Wildfire(x) & CommunityOfSpecies(y) & Area(z)) -> ChangesDramaticly(x,y,z))", "all x y.((Wildfire(x) & CommunityOfSpecies(y)) -> ChangesDramaticArea(x,y))", "all x.(Wildfire(x) -> ChangesSpeciesCommunity(x))", "all x y z.((Wildfire(x) & CommunityOfSpecies(y) & Area(z) & Changes(x,y,z)) -> DramaticArea(x,y,z))", "all x y z.((Wildfire(x) & CommunityOfSpecies(y) & Area(z)) -> ChangesDramaticly(x,y,z))", "all x y.((Wildfire(x) & CommunityOfSpecies(y) & Area(z) & ChangesDramaticly(x,y,z)) -> ChangesDramaticly(x,y,z))", "all x.(Wildfire(x) -> (ChangesSpecies(x) & InSpecificArea(x)))"]}
{"id": "eqasc_validation_1281", "nl": "Weather and wildfire are two of the forces that act within ecosystems.", "fol": "", "prediction": ["all x y.((Weather(x) & Wildfire(y)) -> ActsInEcosystems(x,y))", "all x.((Weather(x) & Wildfire(x)) -> ActsInEcosystems(x))", "(ActionsWithinEcosystems(Weather) & ActionsWithinEcosystems(Wildfire))", "all x y.((Weather(x) & Wildfire(y)) -> (AgilesWithinEcosystems(x,y) & ActsWithinEcosystems(x,y)))", "(AgilesWithInEcosystems(weather,a) & AgilesWithInEcosystems(wildfire,a))", "all x y z.((Weather(x) & Wildfire(y) & Ecosystem(z)) -> ActsWith(x,y,z))", "((Weather(Wildfire) & Ecosystem(Ecosystem(W)) -> ActsWith(Wildfire(W)))", "all x.((Weather(x) & Wildfire(x)) -> ActsInEcosystems(x))", "all x.((Weather(x) | Wildfire(x)) -> ActsInEcosystems(x))", "(ActsWithinEcosystems(weather,y) & ActsWithinEcosystems(wildfire,y))", "(AgilesWithinEcosystems(Weather) & AgilesWithinEcosystems(Wildfire))", "(ActionInEcosystems(weather,wildfire) & ActionInEcosystems(wildfire,weather))", "all x y.((Weather(x) & Wildfire(y)) -> ActsInEcosystems(x,y))", "all x y.((Weather(x) & Wildfire(y)) -> (ActionsWithinEcosystems(x,y) & ActsWithinEcosystems(x,y)))", "all x.((Weather(x) & Wildfire(x)) -> ActsWithinEcosystems(x))", "all x.((Weather(x) | Wildfire(x)) -> ActsInEcosystems(x))"]}
{"id": "eqasc_validation_1282", "nl": "Weather is a force that changes an ecosystem drastically", "fol": "", "prediction": ["all x y.((Weather(x) & Ecosystem(y)) -> ChangesDramaticly(x,y))", "all x y z.((Weather(x) & Ecosystem(y) & Ecosystem(z)) -> (Changes(x,y,z) & Changes(x,y)))", "all x.(Weather(x) -> (ChangesEcosystem(x) & Dramatically(x)))", "all x.(Weather(x) -> (Force(x) & ChangesEcosystem(x) & Dramatic(x)))", "(Causes(Weather) & ChangesEcosystem(Weather,Ecosystem) & Dramatically(Weather,Ecosystem))", "(Force(weather) & ChangesEcosystemDramaticly(weather))", "all x y.((Weather(x) & Ecosystem(y)) -> ChangesDramaticly(x,y))", "all x.(Weather(x) -> (ChangesEcosystemDramaticly(x) & ChangesEcosystemDramaticly(x)))", "all x y z.((Weather(x) & Ecosystem(y) & Ecosystem(z)) -> (Changes(x,y) & Changes(x,z)))", "all x y z.((Weather(x) & Ecosystem(y) & Environment(z)) -> (Changes(x,y,z) & Changes(x,y,z)))", "all x y.((Weather(x) & Ecosystem(y)) -> (Changes(x,y) & Changes(x,y)))", "all x.(Weather(x) -> (Force(x) & ChangesEcosystem(x) & Dramatically(x)))", "all x.(Weather(x) -> (Force(x) & ChangesEcosystemDramaticly(x)))", "all x.(Weather(x) -> (ChangesEcosystemDrastically(x) & ChangesEcosystemDrastically(x)))", "all x y z.((Weather(x) & Ecosystem(y) & Ecosystem(z)) -> ChangesDramaticly(x,y,z))", "all x y.((Weather(x) & Ecosystem(y)) -> ChangesDramaticly(x,y))"]}
{"id": "eqasc_validation_1283", "nl": "a forest fire can change an ecosystem", "fol": "", "prediction": ["all x y.((ForestFire(x) & Ecosystem(y)) -> CanChange(x,y))", "all x y z.((ForestFire(x) & Ecosystem(y) & Ecosystem(z)) -> CanChange(x,y,z))", "all x.(ForestFire(x) -> CanChangeEcosystem(x))", "all x y.((ForestFire(x) & Ecosystem(y)) -> CanChange(x,y))", "all x y z.((ForestFire(x) & Ecosystem(y) & Ecosystem(z)) -> CanChange(x,y,z))", "all x.(ForestFire(x) -> CanChangeEcosystem(x))", "all x y.((ForestFire(x) & Ecosystem(y)) -> CanChange(x,y))", "all x.((ForestFire(x) & Ecosystem(y)) -> CanChange(x,y))", "all x y z.((ForestFire(x) & Ecosystem(y) & Ecosystem(z)) -> CanChange(x,y,z))", "all x y z.((ForestFire(x) & Ecosystem(y) & Ecosystem(z) & Changes(x,y)) -> CanChange(x,z))", "all x y.((ForestFire(x) & Ecosystem(y) & Changes(x,y)) -> CanChange(x,y))", "all x.(ForestFire(x) -> CanChangeEcosystem(x))", "all x y z.((ForestFire(x) & Ecosystem(y) & Ecosystem(z) & Changes(x,y)) -> CanChange(x,z))", "all x.(ForestFire(x) -> ChangesEcosystem(x))", "all x y.((ForestFire(x) & Ecosystem(y) & Changes(x,y)) -> CanChange(x,y))", "all x.(ForestFire(x) -> CanChangeEcosystem(x))"]}
{"id": "eqasc_validation_1284", "nl": "Very large ecosystems are known as biomes .", "fol": "", "prediction": ["all x.((LargeEcosystem(x) & Biome(x)) -> KnownAs(x))", "all x.((VeryLargeEcosystem(x) & Biome(x)) -> KnownAs(x))", "(LargeEcosystems(v) & Biomes(v))", "all x.((LargeEcosystem(x) & Biome(x)) -> KnownAs(x))", "all x y.((VeryLargeEcosystem(x) & Biome(y)) -> KnownAs(x,y))", "all x y.((LargeEcosystem(x) & Biome(y)) -> KnownAs(x,y))", "all x.(LargeEcosystem(x) -> Biome(x))", "all x.((LargeEcosystem(x) & Biome(x)) -> Large(x))", "all x y.((LargeEcosystem(x) & Biome(y)) -> (KnownAs(x,y) & Large(x)))", "all x y.((VibrantEcosystem(x) & Biome(y)) -> Large(x))", "exists x y z.((Ecosystem(x) & Biome(y) & Large(z)) -> Biome(x))", "all x.((VibrantLargeEcosystem(x) & Biome(x)) -> KnownAs(x))", "all x.((Ecosystem(x) & VeryLarge(x)) -> Biome(x))", "all x.((LargeEcosystem(x) & Biome(x)) -> Large(x))", "all x.(LargeEcosystem(x) -> Biome(x))", "exists x y.(LargeEcosystem(x) & Biome(y))"]}
{"id": "eqasc_validation_1285", "nl": "A wildfire changes a biome drastically", "fol": "", "prediction": ["all x y.((Wildfire(x) & Biome(y)) -> ChangesDramaticly(x,y))", "all x y z.((Wildfire(x) & Biome(y) & Biome(z)) -> ChangesDramaticly(x,y,z))", "all x y.((Wildfire(x) & Biome(y)) -> ChangesDirriously(x,y))", "all x.(Wildfire(x) -> ChangesBiomeDirriously(x))", "all x y z.((Wildfire(x) & Biome(y) & Biome(z)) -> ChangesDisruptively(x,y,z))", "all x.((Wildfire(x) & Biome(y)) -> ChangesDramaticly(x,y))", "all x.(Wildfire(x) -> ChangesBiomeDramaticly(x))", "all x y z.((Wildfire(x) & Biome(y) & Biome(z)) -> ChangesDirriously(x,y,z))", "all x y.((Wildfire(x) & Biome(y)) -> ChangesDramaticly(x,y))", "all x y z.((Wildfire(x) & Biome(y) & Biome(z)) -> (ChangesDirregularly(x,y,z) & Biome(y)))", "all x y.((Wildfire(x) & Biome(y) & ChangesDramaticly(x,y)) -> ChangesDramaticly(x,y))", "all x y z.((Wildfire(x) & Biome(y) & Biome(z) & ChangesDramaticly(x,y,z)) -> ChangesDramaticly(x,y,z))", "all x.((Wildfire(x) & Biome(y)) -> ChangesDirriously(x,y))", "all x y.((Wildfire(x) & Biome(y)) -> ChangesDisruptively(x,y))", "all x.(Wildfire(x) -> ChangesBiomeDirriously(x))", "all x y.((Wildfire(x) & Biome(y)) -> ChangesDirriously(x,y))"]}
{"id": "eqasc_validation_1286", "nl": "Forest ecosystems are dynamic and ever changing.", "fol": "", "prediction": ["all x.(ForestEcosystem(x) -> (Dynamic(x) & EverChange(x)))", "all x y.((ForestEcosystem(x) & Forest(y)) -> (Dynamic(x,y) & EverChange(x,y)))", "all x.(ForestEcosystem(x) -> (Dynamic(x) & EverChange(x)))", "(Dynamic(forestEcosystems) & EverChange(forests))", "all x.(Forest(x) -> (Dynamic(x) & EverChange(x)))", "all x y.((ForestEcosystem(x) & Forest(y)) -> (Dynamic(x) & EverChange(x)))", "all x.(ForestEcosystem(x) -> (Dynamic(x) & EverChanging(x)))", "(DynamicAndPermanentForestEcosystem(forest)", "all x y.((ForestEcosystem(x) & Forest(y)) -> (Dynamic(x,y) & EverChange(x,y)))", "all x.(ForestEcosystem(x) -> (Dynamic(x) & EverChange(x)))", "all x y.((ForestEcosystem(x) & Forest(y)) -> (Dynamic(x,y) & EverChanging(x,y)))", "all x.(ForestEcosystem(x) -> (Dynamic(x) & EverChanging(x)))", "all x.(ForestEcosystem(x) -> (Dynamic(x) & EverChanged(x)))", "all x.(ForestEcosystem(x) -> (Dynamic(x) & EverChange(x)))", "all x.(ForestEcosystem(x) -> (Dynamic(x) & EverChanging(x)))", "all x.(ForestEcosystem(x) -> (Dynamic(x) & EverChange(x)))"]}
{"id": "eqasc_validation_1287", "nl": "a wildfire changes a forest drastically", "fol": "", "prediction": ["all x y.((Wildfire(x) & Forest(y)) -> ChangesDirriously(x,y))", "all x y z.((Wildfire(x) & Forest(y) & Forest(z)) -> ChangesDramaticly(x,y,z))", "all x.((Wildfire(x) & Forest(y)) -> ChangesDramaticly(x,y))", "all x y.((Wildfire(x) & Forest(y)) -> ChangesDramaticly(x,y))", "all x.(Wildfire(x) -> ChangesForestDirriously(x))", "all x y z.((Wildfire(x) & Forest(y) & Forest(z)) -> ChangesDirriously(x,y,z))", "all x y.((Wildfire(x) & Forest(y)) -> ChangesDirriously(x,y))", "all x y z.((Wildfire(x) & Forest(y) & Forest(z) & ChangesDirtuously(x,y,z)) -> ChangesDirtuously(x,y,z))", "all x y z.((Wildfire(x) & Forest(y) & Forest(z)) -> ChangesDramaticly(x,y,z))", "all x.((Wildfire(x) & Forest(y)) -> ChangesDirriously(x,y))", "all x.(Wildfire(x) -> ChangesForestDirractively(x))", "all x.((Wildfire(x) & ChangesForest(x)) -> DramaticallyChangesForest(x))", "all x y.((Wildfire(x) & Forest(y)) -> ChangesDramaticly(x,y))", "all x.(Wildfire(x) -> ChangesForestDramaticly(x))", "all x y z.((Wildfire(x) & Forest(y) & Forest(z)) -> (Changes(x,y) & Dramatic(y,z)))", "all x y.((Wildfire(x) & Forest(y)) -> ChangesDirtually(x,y))"]}
{"id": "eqasc_validation_1288", "nl": "Forest fires change an ecosystem drastically", "fol": "", "prediction": ["all x y z.((ForestFire(x) & Ecosystem(y) & Ecosystem(z)) -> ChangesDirriously(x,y,z))", "all x y.((ForestFire(x) & Ecosystem(y)) -> ChangesDirriously(x,y))", "all x y z.((ForestFire(x) & Ecosystem(y) & Ecosystem(z)) -> ChangesDramaticly(x,y,z))", "all x.(ForestFire(x) -> (ChangesEcosystemDirregularly(x) & ChangesEcosystemDirregularly(x)))", "all x y.((ForestFire(x) & Ecosystem(y)) -> ChangesDramaticly(x,y))", "all x.(ForestFire(x) -> (ChangesEcosystemDramaticly(x) & ChangesEcosystemDramaticly(x)))", "all x y z.((ForestFire(x) & Ecosystem(y) & Ecosystem(z) & Changes(x,y,z)) -> ChangesDirriously(x,y,z))", "all x y.((ForestFire(x) & Ecosystem(y)) -> ChangesDirriously(x,y))", "all x y z.((ForestFire(x) & Ecosystem(y) & Ecosystem(z)) -> (Changes(x,y,z) & Dramatically(y,z)))", "all x.(ForestFire(x) -> (ChangesEcosystemDirrruptly(x) & ChangesEcosystemDirrruptly(x)))", "all x.(ForestFire(x) -> ChangesEcosystemDirriously(x))", "all x y.((ForestFire(x) & Ecosystem(y)) -> (Changes(x,y) & Dramatically(x,y)))", "all x.(ForestFires(x) -> (ChangesEcosystem(x) & Dramatic(x)))", "all x.(ForestFire(x) -> ChangesEcosystemDramaticly(x))", "all x y z.((ForestFire(x) & Ecosystem(y) & Ecosystem(z)) -> ChangesDirtually(x,y,z))", "all x y.((ForestFire(x) & Ecosystem(y)) -> ChangesDramaticly(x,y))"]}
{"id": "eqasc_validation_1289", "nl": "Wildfires burn uncontrollably across Mexico, destroying rare plants and animals.", "fol": "", "prediction": ["all x.(Wildfire(x) -> (BurnsUncontrollablyAcrossMexico(x) & DestroysRarePlantsAndAnimals(x)))", "all x y.((Wildfire(x) & Mexico(y)) -> (BurnsUncontrollably(x,y) & DestroysRarePlantsAndAnimals(x)))", "all x y z.((Wildfire(x) & Mexico(y) & Plant(z) & Animal(z)) -> BurnsUncontrollably(x,y,z))", "all x.((Wildfire(x) & BurnsUncontrollablyAcrossMexico(x)) -> (DestroysRarePlants(x) & DestroysRareAnimals(x)))", "all x.(Wildfire(x) -> (BurnsUncontrollably(x) & DestroysRarePlantsAndAnimals(x)))", "(BurnsUncontrollablyAcrossMexico(wildfires) & DestroysRarePlantsAndAnimals(wildfires))", "all x.((Wildfire(x) & BurnsUncontrollably(x)) -> (DestroysRarePlants(x) & DestroysRareAnimals(x)))", "all x y.((Wildfire(x) & Mexico(y)) -> (BurnsUncontrollably(x,y) & DisposesRarePlantsAndAnimals(x,y)))", "all x y z.((Wildfire(x) & Mexico(y) & Plant(z)) -> BurnsUncontrollably(x,y))", "all x.((Wildfire(x) & BurnUncontrollablyAcrossMexico(x)) -> (DestroysRarePlantsAndAnimals(x)))", "all x.(Wildfire(x) -> (BurnsUncontrollablyAcrossMexico(x) & DisposesRarePlantsAndAnimals(x)))", "(all x.(Wildfire(x) -> BurnsUncontrollablyAcrossMexico(x)) & DisposesRarePlantsAndAnimals(x))", "all x y.((Wildfire(x) & Mexico(y)) -> (BurnsUncontrollably(x,y) & DestroysRarePlantsAndAnimals(x)))", "all x y z.((Wildfire(x) & Mexico(y) & Plant(z) & Animal(z)) -> BurnsUncontrollably(x,y,z))", "all x.(Wildfire(x) -> (BurnsUncontrollably(x) & DestroysRarePlantsAndAnimals(x)))", "all x y.((Wildfire(x) & Mexico(y)) -> BurnsUncontrollably(x,y))"]}
{"id": "eqasc_validation_1290", "nl": "uncontrollable burning changes an ecosystem drastically", "fol": "", "prediction": ["all x y.((UncontrollableBurning(x) & Ecosystem(y)) -> ChangesDramaticly(x,y))", "all x y z.((UncontrollableBurning(x) & Ecosystem(y) & Ecosystem(z)) -> ChangesDramaticly(x,y,z))", "all x.((UncontrollableBurning(x) & ChangesEcosystemDramaticly(x)) -> Uncontrollable(x))", "all x.((UncontrollableBurning(x) & Ecosystem(y)) -> ChangesDramaticly(x,y))", "all x y.((UncontrollableBurning(x) & Ecosystem(y)) -> ChangesDirriously(x,y))", "(UncontrollableBurningChangesEcosystem(x) & DramaticEcosystemChangesEcosystem(x))", "all x y z.((UncontrollableBurning(x) & Ecosystem(y) & Ecosystem(z)) -> ChangesDramaticly(x,y,z))", "all x.(UncontrollableBurning(x) -> ChangesEcosystemDramaticly(x))", "all x.((UncontrollableBurning(x) & ChangesEcosystem(x)) -> DramaticChangesEcosystem(x))", "all x y.((UncontrollableBurning(x) & Ecosystem(y)) -> ChangesDramaticly(x,y))", "all x y.((UncontrollableBurning(x) & Ecosystem(y) & ChangesDirriously(x,y)) -> Uncontrollable(x))", "all x y z.((UncontrollableBurning(x) & Ecosystem(y) & Ecosystem(z)) -> ChangesDirriously(x,y,z))", "all x.((UncontrollableBurning(x) & Ecosystem(y)) -> ChangesDramaticly(x,y))", "all x.((UncontrollableBurning(x) & ChangesEcosystemDramaticly(x)) -> UncontrollableBurning(x))", "all x.(UncontrollableBurning(x) -> ChangesEcosystemDramaticly(x))", "all x y.((UncontrollableBurning(x) & Ecosystem(y)) -> ChangesDirriously(x,y))"]}
{"id": "eqasc_validation_1291", "nl": "Biomes are global ecosystems.", "fol": "", "prediction": ["all x.(Biome(x) -> GlobalEcosystem(x))", "all x.(Biome(x) -> GlobalEcosystem(x))", "(GlobalEcosystem(biome) & GlobalEcosystem(biome,ecosystem))", "all x y.((Biome(x) & Ecosystem(y)) -> Global(x,y))", "(GlobalEcosystem(biome) & GlobalEcosystem(biome) & GlobalEcosystem(biome))", "all x.(Biome(x) -> GlobalEcosystem(x))", "all x y.((Biome(x) & GlobalEcosystem(y)) -> Global(x,y))", "all x y.((Biome(x) & Ecosystem(y)) -> Global(x,y))", "all x.(Biome(x) -> GlobalEcosystem(x))", "(GlobalEcosystem(biome) & GlobalEcosystem(biome,y))", "all x.(Biome(x) -> GlobalEcosystem(x))", "all x.(Biome(x) -> GlobalEcosystem(x))", "all x.(Biome(x) -> GlobalEcosystem(x))", "all x.(Biome(x) -> GlobalEcosystem(x))", "all x.(Biome(x) -> GlobalEcosystem(x))", "all x.(Biome(x) -> GlobalEcosystem(x))"]}
{"id": "eqasc_validation_1292", "nl": "A wildfire can drastically change a biome.", "fol": "", "prediction": ["all x y.((Wildfire(x) & Biome(y)) -> CanCruciallyChange(x,y))", "all x.(Wildfire(x) -> CanCruciallyChangeBiome(x))", "all x y.((Wildfire(x) & Biome(y)) -> CanChangeDramaticly(x,y))", "all x y z.((Wildfire(x) & Biome(y) & Biome(z)) -> CanChange(x,y,z))", "all x.((Wildfire(x) & Biome(y)) -> CanCruciallyChange(x,y))", "all x.(Wildfire(x) -> CanChangeBiomeDramaticly(x))", "all x y z.((Wildfire(x) & Biome(y) & Biome(z)) -> CanCruciallyChange(x,y,z))", "all x y.((Wildfire(x) & Biome(y)) -> CanCruciallyChange(x,y))", "all x.(Wildfire(x) -> CanCruciallyChangeBiome(x))", "all x y.((Wildfire(x) & Biome(y)) -> CanChange(x,y))", "all x.(Wildfire(x) -> CanChangeDramaticBiome(x))", "all x y z.((Wildfire(x) & Biome(y) & Biome(z)) -> CanChangeDramaticly(x,y,z))", "exists x.(Wildfire(x) & Biome(y) & CanChange(x,y))", "all x y.((Wildfire(x) & Biome(y)) -> CanCruciallyChange(x,y))", "all x.(Wildfire(x) -> CanCrueltBiome(x))", "all x y.((Wildfire(x) & Biome(y)) -> CanChangeDramaticly(x,y))"]}
{"id": "eqasc_validation_1293", "nl": "Wildfires scorch the West.", "fol": "", "prediction": ["all x.(Wildfire(x) -> ScorchesWest(x))", "all x y.((Wildfire(x) & West(y)) -> Scratches(x,y))", "all x.(Wildfire(x) -> ScratchesWest(x))", "all x y z.((Wildfire(x) & West(y) & West(z)) -> Scorches(x,y,z))", "(ScorchWest(wildfire) & West(wildfire))", "all x.((Wildfire(x) & West(y)) -> Scratches(x,y))", "all x y.((Wildfire(x) & West(y)) -> Scorches(x,y))", "all x.(Wildfire(x) -> ScourchWest(x))", "(ScorchWest(wildfire) & West(wildfire))", "all x y.((Wildfire(x) & West(y)) -> Scratches(x,y))", "all x.(Wildfire(x) -> ScorpionsWest(x))", "all x.(Wildfire(x) -> ScratchesWEST(x))", "all x y.((Wildfire(x) & West(y)) -> Scorch(x,y))", "all x.(Wildfire(x) -> (ScorchesWest(x) | -ScorchesWest(x)))", "all x y.((Wildfire(x) & West(y)) -> scorches(x,y))", "all x.(Wildfire(x) -> Scorch(x,West))"]}
{"id": "eqasc_validation_1294", "nl": "The West experiences drastic changes to its ecosystem", "fol": "", "prediction": ["all x y.((West(x) & Ecosystem(y)) -> ExperiencesDrasticChanges(x,y))", "all x.((West(x) & DramaticChangesToEcosystem(x)) -> Experiences(x,West))", "all x y z.((West(x) & Ecosystem(y) & West(z)) -> ExperiencesDramaticChanges(x,y,z))", "(DirriaticChangesToEcosystem(West) & West Experiences(West))", "All x.(West(x) -> (ExperiencesDrasticChangesToEcosystem(x) & WestExperiencesDrasticChangesToEcosystem(x)))", "all x.(West(x) -> ExperiencesDrasticChangesToEcosystem(x))", "all x y.((West(x) & Ecosystem(y)) -> ExperiencesDramaticChanges(x,y))", "(DrasticChangesToEcosystem(West) & Experiences(West,West))", "all x.((West(x) & DramaticChangesToEcosystem(x)) -> Experiences(x,West))", "all x y z.((West(x) & Ecosystem(y) & Environment(z)) -> ExperiencesDrasticChanges(x,y,z))", "(DramaticChangesToEcosystem(West) & West Experiences(West))", "All x.((West(x) & ExperiencesDrasticChangesToEcosystem(x)) -> DramaticChangesToEcosystem(x))", "all x y.((West(x) & West(y)) -> ExperiencesDramaticChangesToEcosystem(x,y))", "all x y z.((West(x) & Ecosystem(y) & WestEcosystem(z)) -> ExperiencesDramaticChanges(x,y,z))", "All x.(West(x) -> ExperiencesDramaticChangesToEcosystem(x))", "all x y.((West(x) & Ecosystem(y)) -> ExperiencesDrasticChanges(x,y))"]}
{"id": "eqasc_validation_1295", "nl": "seeing requires light", "fol": "", "prediction": ["all x.(Seeing(x) -> RequiresLight(x))", "all x.(SeeingRequiresLight(x) -> RequiresLight(x))", "all x y.((Seen(x) & Light(y)) -> Requires(x,y))", "all x.(SeeingRequiresLight(x) -> RequiresLight(x))", "all x y.((Seeing(x) & Light(y)) -> Requires(x,y))", "all x.(Seen(x) -> RequiresLight(x))", "all x y z.((Seen(x) & Light(y) & Light(z)) -> Requires(x,y,z))", "all x.(SeeingRequiresLight(x) -> RequiresLight(x))", "all x y.((Seen(x) & Light(y)) -> Requires(x,y))", "(all x.(Seeing(x) -> RequiresLight(x)))", "all x.(SeeingRequiresLight(x) -> RequiresLight(x))", "all x y.((Seeing(x) & Light(y)) -> Requires(x,y))", "all x.(Seen(x) -> RequiresLight(x))", "All x y z.((Seen(x) & Light(y) & Light(z)) -> Requires(x,y,z))", "all x.(SeeingRequiresLight(x) -> SeekingRequiresLight(x))", "all x.(SeeingRequiresLight(x) -> RequiresLight(x))"]}
{"id": "eqasc_validation_1296", "nl": "When people look around everyday, they see color.", "fol": "", "prediction": ["all x.(LooksAroundEveryDay(x) -> SeesColor(x))", "all x y.((Person(x) & LooksAroundEveryday(x,y)) -> SeesColor(x))", "all x.((Person(x) & LooksAroundEveryday(x)) -> SeesColor(x))", "all x.(LooksAroundEveryday(x) -> SeesColor(x))", "all x y.((Person(x) & LooksAroundEveryDay(x,y)) -> SeesColor(x))", "all x y z.((Person(x) & LooksAroundEveryday(x,y) & Color(z)) -> Sees(x,z))", "all x.(LooksAround(x) -> SeesColor(x))", "all x y.((People(x) & LooksAroundEveryday(x,y)) -> SeesColor(x))", "all x.(LooksAroundEveryDay(x) -> SeesColor(x))", "all x y.((Person(x) & LooksAroundEveryday(x)) -> SeesColor(x))", "exists x.(Person(x) & LooksAroundEveryDay(x) & SeesColor(x))", "all x.((Person(x) & LooksAroundEveryDay(x)) -> SeesColor(x))", "all x.((PeopleLookAroundEveryDay(x) & SeeColor(x)) -> LookAroundEveryDay(x))", "all x y.((Person(x) & LooksAroundEveryDay(x,y)) -> SeesColor(x))", "exists x.(PeopleLooksAroundEveryday(x) & SeesColor(x))", "all x.(LooksAroundEveryday(x) -> SeesColor(x))"]}
{"id": "eqasc_validation_1297", "nl": "When people look around everyday, they require light.", "fol": "", "prediction": ["all x.(LooksAroundEveryDay(x) -> RequiresLight(x))", "all x.((Person(x) & LooksAroundEveryDay(x)) -> RequiresLight(x))", "all x y.((Person(x) & LooksAroundEveryDay(x) & RequiresLight(x)) -> LooksAroundEveryDay(x,y))", "all x.(LooksAroundEveryDay(x) -> RequiresLight(x))", "all x.((PeopleLookAroundEveryDay(x) & RequiresLight(x)) -> LookAroundEveryDay(x))", "all x.(LooksAround(x) -> RequiresLight(x))", "all x y.((Person(x) & LooksAroundEveryday(x) & RequiresLight(y)) -> RequiresLight(x))", "all x y.((People(x) & LooksAroundEveryDay(x) & RequiresLight(y)) -> RequiresLight(x))", "exists x.(Person(x) & LooksAroundEveryDay(x) & RequiresLight(x))", "all x y.((Person(x) & LooksAroundEveryDay(x,y)) -> RequiresLight(x))", "all x y z.((Person(x) & LooksAroundEveryDay(x,y) & Light(z)) -> Requires(x,z))", "all x y.((People(x) & LooksAroundEveryday(x,y) & RequiresLight(x,y)) -> RequiresLight(x,y))", "all x.((Person(x) & LooksAroundEveryday(x)) -> RequiresLight(x))", "all x y.((Person(x) & LooksAroundEveryday(x) & RequiresLight(x)) -> LooksAroundEveryday(x,y))", "all x.(LooksAroundEveryday(x) -> RequiresLight(x))", "exists x.(PeopleLooksAroundEveryDay(x) & RequiresLight(x))"]}
{"id": "eqasc_validation_1298", "nl": "Light is essential to vision.", "fol": "", "prediction": ["all x.(Light(x) -> EssentialToVision(x))", "all x.(Light(x) -> EssentialToVision(x))", "all x y.((Light(x) & Vision(y)) -> EssentialTo(x,y))", "(EssentialToVisionLight(Light,Visual) & EssentialToVision(Light,Visual))", "all x.(Light(x) -> EssentialToVision(x))", "all x y.((Light(x) & Vision(y)) -> EssentialTo(x,y))", "All x.((Light(x) & Vision(x)) -> EssentialTo(x,y))", "all x.(Light(x) -> EssentialToVision(x))", "All x y.((Light(x) & Vision(y)) -> EssentialTo(x,y))", "all x.(Light(x) -> EssentialToVision(x))", "all x y.((Light(x) & Vision(y)) -> EssentialTo(x,y))", "all x.(Light(x) -> EssentialToVision(x))", "exists x.(Light(x) & EssentialToVisual(x))", "all x.(Light(x) -> EssentialToVision(x))", "exists x.(Light(x) & EyesOn(x,Vision))", "All x.(Light(x) -> EssentialToVision(x))"]}
{"id": "eqasc_validation_1299", "nl": "seeing and vision are the same", "fol": "", "prediction": ["all x y.((Seen(x) & Vision(y)) -> Same(x,y))", "all x y z.((Seen(x) & Vision(y) & Vision(z)) -> (SameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSameSam", "all x.(Seating(x) & Vision(x)) -> Same(x))", "(Seasuring(s) & Vision(s) & Same(s))", "all x y.((Seen(x) & Vision(y)) -> Same(x,y))", "all x y.((Seeing(x) & Vision(y)) -> Same(x,y))", "(Seamless(Seeing) & Same(Vision))", "(Seeing(x) & Vision(x))", "all x.(Seen(x) -> Vision(x))", "all x y z.((Seen(x) & Vision(y) & Vision(z)) -> Same(x,y,z))", "(Seasuring(s) & Vision(s) & Same(s))", "all x.(Seating(x) & Vision(x)) -> Same(x))", "all x.(Seeing(x) & Vision(x)) -> Same(x))", "(Seamless(Seeing) & Same(Vision))", "All x.(Seen(x) -> Same(x)) & (Vision(x) -> Same(x)))", "all x.(SeeingAndVision(x) -> Same(x))"]}
{"id": "eqasc_validation_1300", "nl": "Light is simply the one form of radiation our eyes can see.", "fol": "", "prediction": ["all x.(Light(x) -> exists y.(Rayon(y) & EyesCanSee(x,y)))", "all x.(Light(x) -> (OneFormOfRadiation(x) & EyesCanSee(x)))", "all x y.((Light(x) & Eyes(y)) -> CanSee(x,y))", "all x.(Light(x) -> exists y.(Radiation(y) & EyesCanSee(x,y)))", "all x y z.((Light(x) & Radiation(y) & Eyes(z) & CanSee(x,y,z)) -> OneFormOf(x,y,z))", "all x y.((Light(x) & Eyes(y)) -> CanSee(x,y))", "all x.(Light(x) -> (OneFormOfRadiation(x) & EyesCanSee(x)))", "All x.((Light(x) & Rayon(x)) -> CanSee(x))", "all x.(Light(x) -> (Radiation(x) & EyesCanSee(x)))", "all x y.((Light(x) & EyesCanSee(y)) -> Radiation(x,y))", "all x.(Light(x) -> exists y.(Rayon(y) & EyesCanSee(x,y)))", "all x y.(Light(x) -> (Radiation(y) & EyesCanSee(x,y)))", "all x y.((Light(x) & EyesCanSee(y)) -> Radiation(x,y))", "All x.(Light(x) -> OneFormOfRadiation(x))", "All x.(Light(x) -> (Radiation(x) & EyesCanSee(x)))", "All x.(Light(x) -> Radiation(x))"]}
{"id": "eqasc_validation_1301", "nl": "eyes require light", "fol": "", "prediction": ["all x.(Eyes(x) -> RequiresLight(x))", "all x y.((Eyes(x) & Light(y)) -> Requires(x,y))", "all x.((Eyes(x) & RequiresLight(x)) -> RequiresLight(x))", "all x.(Eyes(x) -> RequiresLight(x))", "all x y z.((Eyes(x) & Light(y) & Eyes(z)) -> Requires(x,y,z))", "all x y.((Eye(x) & Eye(y)) -> RequiresLight(x,y))", "all x y.((Eyes(x) & Light(y)) -> Requires(x,y))", "all x.(EyesRequireLight(x) -> EyesRequireLight(x))", "all x.((Eyes(x) & RequiresLight(x)) -> RequiresLight(x))", "ALL X.((Eye(x) & Eye(y)) -> RequiresLight(x,y))", "all x.(Eyes(x) -> RequiresLight(x))", "all x y z.((Eyes(x) & Light(y) & Eyes(z)) -> Requires(x,y,z))", "all x y.((Eyes(x) & Eyes(y)) -> RequiresLight(x,y))", "all x.((Eyes(x) & RequiresLight(x)) -> RequiresLight(x))", "(all x.(Eyes(x) -> RequiresLight(x)))", "all x.(Eye(x) -> RequiresLight(x))"]}
{"id": "eqasc_validation_1302", "nl": "Sight is the mere ability to see, and the eye's responses to light shining into it.", "fol": "", "prediction": ["all x.(Sight(x) -> (Sees(x) & EyeResponsesToLight(x)))", "all x y.((Sight(x) & Eye(y)) -> (AbilityToSee(x) & ResponseToLight(y)))", "all x.(Sight(x) -> (AbilityToSee(x) & EyeResponseToLight(x)))", "all x y z.((Sight(x) & Eye(y) & Light(z)) -> (AbilityToSee(x) & ResponseToShining(y,z)))", "(all x.(Sight(x) -> See(x)) & all y.(EyeResponse(y) -> ShiningInto(y))))", "all x y.((Sight(x) & Eye(y)) -> (AbilitiesToSee(x,y) & ResponsesToLight(y)))", "all x.(Sight(x) -> (AbilitiesToSee(x) & EyeResponsesToLight(x)))", "(all x.(Sight(x) -> See(x)) & all y.(EyesResponseToLight(y) -> ShineInto(y))))", "(Sight(Sight) -> (Sees(Sight) & ReactsToLight(Eye)))", "all x y z.((Sight(x) & Light(y) & Eye(z)) -> (AbilitiesToSee(x,y) & ResponsesToLight(z,y)))", "all x.(Sight(x) -> (See(x) & EyeResponseToLight(x)))", "all x y.(Sight(x) -> (AbilityToSee(x) & EyeResponseToLight(y)))", "all x y.((Sight(x) & Eye(y)) -> (Sees(x,y) & RespondsToLight(y,x)))", "all x.(Sight(x) -> (Sees(x) & EyeResponsesToLight(x)))", "all x.(Sight(x) -> (Seen(x) & EyeResponseToLight(x)))", "exists x.(Sight(x) & AbilityToSee(x) & EyeResponseToLight(x))"]}
{"id": "eqasc_validation_1303", "nl": "Eyes require light shining into it", "fol": "", "prediction": ["all x.(Eyes(x) -> RequiresLightShiningInto(x,y))", "all x y.((Eye(x) & Light(y)) -> RequiresShiningInto(x,y))", "all x y z.((Eyes(x) & Light(y) & Light(z) & ShiningInto(x,y,z)) -> Requires(x,y,z))", "all x y.((Eyes(x) & Light(y)) -> RequiresShiningInto(x,y))", "all x y z.((Eye(x) & Light(y) & Light(z) & ShiningInto(x,y,z)) -> Requires(x,y,z))", "all x.(Eyes(x) -> RequiresLightShiningInto(x,y))", "all x.(Eye(x) -> RequiresLightShiningInto(x,y))", "all x.((Eyes(x) & Light(y)) -> RequiresShiningInto(x,y))", "(all x.(Eyes(x) -> RequiresLight(x)))", "all x y.((Eye(x) & Light(y)) -> Requires(x,y))", "all x y.((Eyes(x) & Light(y) & ShiningInto(x,y)) -> Requires(x,y))", "all x.(Eyes(x) -> RequiresLightShaping(x))", "ALL X Y z.((Eyes(x) & Light(y) & Light(z) & ShinesInto(x,y,z)) -> Requires(x,y))", "All x.((Eye(x) & Light(y)) -> RequiresShiningInto(x,y))", "all x.(Eye(x) -> (RequiresLight(x) & ShinesInto(x)))", "all x.(Eyes(x) -> RequiresLightShiningInto(x,y))"]}
{"id": "eqasc_validation_1304", "nl": "Humans see with our eyes.", "fol": "", "prediction": ["all x.(Human(x) -> SeesWithEyes(x))", "all x y.((Human(x) & Eye(y)) -> SeesWith(x,y))", "all x.(Human(x) -> SeesWithEyes(x))", "all x y.(Human(x) & Eye(y)) -> SeesWith(x,y))", "(SeesWithEyes(Humans) & Eyes(Humans,Human))", "all x y.((Human(x) & Eye(y)) -> SeesWith(x,y))", "all x.(Human(x) -> SeesWithEyes(x))", "all x y.(Human(x) -> SeesWithEyes(x,y))", "(SeesWithEyes(Humans) & HumansSeeWithEyes(Humans))", "(SeesWithEyes(Humans) & Eyes(Humans))", "all x.(Human(x) -> SeesWithEyes(x))", "all x y.((Human(x) & Eyes(y)) -> SeesWith(x,y))", "all x.(Human(x) -> SeesWithOurEyes(x))", "all x.(Human(x) -> (SeesWithEyes(x) | SeesWithEyes(x)))", "all x.(Human(x) -> SeesWithEyes(x))", "all x.(Human(x) -> SeesWithOurEyes(x))"]}
{"id": "eqasc_validation_1305", "nl": "Vision is our ability to see.", "fol": "", "prediction": ["all x.(Vision(x) -> CanSee(x))", "all x.(Vision(x) -> CanSee(x))", "All x y.((Vision(x) & Vision(y)) -> CanSee(x,y))", "all x.(Vision(x) -> CanSee(x))", "all x.(Vision(x) -> AbilityToSee(x))", "(All x.(Vision(x) -> CanSee(x)))", "(AchievesSeeing(Vision) & Sees(Vision,Sees))", "All x y.((Vision(x) & Eye(y)) -> CanSee(x,y))", "all x.(Visual(x) -> CanSee(x))", "all x.(Vision(x) -> CanSee(x))", "all x.(Vision(x) -> CanSee(x))", "All x y.((Vision(x) & Vision(y)) -> CanSee(x,y))", "all x.(Vision(x) -> AbilityToSee(x))", "all x.(Visual(x) -> CanSee(x))", "All x y.((Vision(x) & Person(y)) -> CanSee(x,y))", "all x.(Vision(x) -> CanSee(x))"]}
{"id": "eqasc_validation_1306", "nl": "light is required for vision", "fol": "", "prediction": ["all x.((Light(x) & Vision(x)) -> Requires(x,Light))", "all x y.((Light(x) & Vision(y)) -> Requires(x,y))", "all x.(Light(x) -> VisionRequired(x))", "(LightRequiredForVision(Light) -> VisionRequired(Light))", "all x y z.((Light(x) & Vision(y) & Vision(z)) -> Requires(x,y,z))", "(RequiresLightForVision(LightRequiredForVision(Light))", "all x.(LightRequiredForVision(x) -> VisionRequired(x))", "all x y.((Light(x) & Vision(y)) -> Requires(x,y))", "all x.((Light(x) & Vision(x)) -> Requires(x,y))", "(LightRequiredForVision) & VisionRequired(LightRequiredForVision))", "all x y.((Light(x) & Vision(y) & Requires(x,y)) -> Requires(x,y))", "all x y.((Light(x) & Vision(y)) -> Requires(x,y))", "all x y z.((Light(x) & Vision(y) & Vision(z)) -> Requires(x,y,z))", "All x.(LightRequiredForVision(x) -> RequiresLight(x))", "all x.((Light(x) & Vision(y)) -> Requires(x,y))", "exists x.(Light(x) & RequiresForVision(x))"]}
{"id": "eqasc_validation_1307", "nl": "Light comes through the pupil.", "fol": "", "prediction": ["all x y.((Pupil(x) & Light(y)) -> ComesThrough(x,y))", "all x.(Light(x) -> ComesThroughPupil(x))", "all x y z.((Pupil(x) & Light(y) & Pupil(z)) -> ComesThrough(x,y,z))", "all x y.((Pupil(x) & Light(y)) -> ComesThrough(x,y))", "(Light(light) -> ComesThroughPupil(light))", "all x.(Light(x) -> ComesThroughPupil(x))", "(LightComesThroughPupil(Light))", "all x y.((Pupil(x) & Light(y)) -> ComesThrough(x,y))", "exists x.(Pupil(x) & LightComesThrough(x,Pupil))", "all x y z.((Pupil(x) & Light(y) & Pupil(z)) -> ComesThrough(x,y,z))", "all x.(Light(x) -> ComesThroughPupil(x))", "all x y.((Pupil(x) & Pupil(y)) -> LightComesThrough(x,y))", "all x y.((Pupil(x) & Light(y)) -> ComesThrough(x,y))", "All x.(Light(x) -> Pupil(x))", "all x.(Light(x) -> ComesThroughPupil(x))", "All x.(Light(x) -> ComesThroughPupil(x))"]}
{"id": "eqasc_validation_1308", "nl": "seeing requires pupils", "fol": "", "prediction": ["all x y.((Seen(x) & Pupil(y)) -> Requires(x,y))", "all x y z.((Sighting(x) & Pupil(y) & Pupil(z)) -> Requires(x,y,z))", "all x.(SeeingRequiresPupils(x) -> RequiresPupils(x))", "all x y.((Seeing(x) & Pupil(y)) -> Requires(x,y))", "all x.(SeeingRequiresPupils(x) -> SeesRequiresPupils(x))", "(SeeingRequiresPupils(seeing) | SeeingRequiresPupils(seeing)))", "all x y z.((Seeing(x) & Pupil(y) & Pupil(z)) -> Requires(x,y,z))", "(SeeingRequiresPupils(seeing,pupils) & SeeingRequiresPupils(seeing,pupils))", "all x y.((Seeing(x) & Pupil(y)) -> Requires(x,y))", "all x.(SeeingRequiresPupils(x) -> RequiresPupils(x))", "all x.(SeeingRequiresPupils(x) -> RequiresPupils(x))", "all x.(SeenRequiresPupils(x) -> RequiresPupils(x))", "all x y z.((Seen(x) & Pupil(y) & Pupil(z)) -> Requires(x,y,z))", "All x.(SeeingRequiresPupils(x) -> SeeingRequiresPupils(x))", "all x y.((Seen(x) & Pupil(y)) -> Requires(x,y))", "all x y z.((Seeing(x) & Pupil(y) & Pupil(z)) -> Requires(x,y,z))"]}
{"id": "eqasc_validation_1309", "nl": "a meter stick is used to measure distance", "fol": "", "prediction": ["all x y.((MeterStick(x) & MeasureDistance(y)) -> UsedToMeasureDistance(x,y))", "all x.(MeterStick(x) -> MeasuresDistance(x))", "all x y z.((MeterStick(x) & Distance(y) & Distance(z)) -> Measures(x,y,z))", "all x y.((MeterStick(x) & Meter(y)) -> MeasuresDistance(x,y))", "all x.(MeasureDistance(x) -> UsedToMeasureDistance(x))", "all x.(MeterStick(x) -> MeasuresDistance(x))", "all x y z.((MeterStick(x) & Distance(y) & Distance(z)) -> Measures(x,y,z))", "all x y.((MeterStick(x) & MeasuresDistance(x,y)) -> UsedToMeasureDistance(x,y))", "all x y.((MeterStick(x) & Distance(y)) -> Measures(x,y))", "all x y.((MeasurementStick(x) & Meter(y)) -> MeasuresDistance(x,y))", "all x.(MeterStick(x) -> MeasureDistance(x))", "all x.(MeterStick(x) -> UsedToMeasureDistance(x))", "all x y z.((MeterStick(x) & Distance(y) & Distance(z)) -> Measures(x,y,z))", "exists x.(MeterStick(x) & MeasureDistance(x) & MeasureDistance(x))", "exists x.(MeasurementStick(x) & MeasuresDistance(x))", "all x y z.((MeterStick(x) & Distance(y) & Distance(z)) -> MeasuredWith(x,y,z))"]}
{"id": "eqasc_validation_1310", "nl": "Spacings are on center measurements, or the distance between each plant.", "fol": "", "prediction": ["all x.(Spacing(x) -> (CenterMeasurements(x) | DistanceBetweenPlants(x)))", "all x y.((Spacing(x) & Plant(y)) -> (CenterMeasurements(x,y) | DistanceBetween(x,y)))", "all x y z.((Spacing(x) & Plant(y) & Plant(z)) -> (CenterMeasurements(x,y) | DistanceBetween(x,z)))", "all x.(Spacing(x) -> (CenterMeasurements(x) | DistanceBetweenPlants(x)))", "(CenterMeasurements(spacing) | DistanceBetweenPlants(spacing))", "all x y.((Spacing(x) & Plant(y)) -> (CenterMeasurements(x,y) | DistanceBetween(x,y)))", "all x.(Spacing(x) -> (CenterMeasurements(x) | DistanceBetweenPlants(x)))", "all x.(Spacing(x) -> (CenterMeasurements(x) | DistanceBetweenPlants(x)))", "all x y z.((Spacing(x) & Plant(y) & Plant(z)) -> (CenterMeasurements(x,y) | DistanceBetween(x,z)))", "(CenterMeasurements(spacing) | DistanceBetweenPlants(spacing))", "all x.(Spacing(x) -> (CenterMeasurements(x) | DistanceBetweenPlants(x)))", "all x y.((Spacing(x) & Plant(y)) -> (CenterMeasurement(x,y) | Distance(x,y)))", "exists x.(Space(x) & (CenterMeasurements(x) | DistanceBetweenPlants(x)))", "all x y.((Spacing(x) & Plant(y)) -> (CenterMeasurements(x,y) | DistanceBetweenPlants(x,y)))", "all x.(Spacing(x) -> (CenterMeasurements(x) | DistanceBetweenPlant(x)))", "all x.(Spacing(x) -> (CenterMeasurement(x) | Distinction(x)))"]}
{"id": "eqasc_validation_1311", "nl": "A meter stick is used to measure the space between.", "fol": "", "prediction": ["all x.(MeterStick(x) -> MeasuresSpaceBetween(x))", "all x y.((MeterStick(x) & SpaceBetween(y,x)) -> Measures(x,y))", "all x.(MeterStick(x) -> MeasuresSpaceBetween(x))", "all x.(MeasureSpace(x) -> UsesMeterStick(x))", "all x y.((MeterStick(x) & SpaceBetween(y,x)) -> Measures(x,y))", "all x.(MeasureSpaceBetween(x) -> UsesMeterStick(x))", "all x y z.((MeterStick(x) & SpaceBetween(y,z)) -> Measures(x,y,z))", "all x.(MeterStick(x) -> MeasureSpaceBetween(x))", "all x y.((MeasurementStick(x) & SpaceBetween(y,x)) -> Measures(x,y))", "all x y.((MeterStick(x) & SpaceBetween(y,x)) -> MeasuresSpace(x,y))", "all x y.((MeterStick(x) & Space(y)) -> MeasuresBetween(x,y))", "all x y.((MeterStick(x) & SpaceBetween(y,x)) -> Measures(x,y))", "all x.(MeterStick(x) -> MeasuresSpaceBetween(x))", "exists x.(MeasurementStick(x) & MeasuresSpaceBetween(x))", "exists x.(MeterStick(x) & MeasureSpaceBetween(x))", "exists x.(MeterStick(x) & MeasureSpaceBetween(x))"]}
{"id": "eqasc_validation_1312", "nl": "Depths and distances are represented in meters.", "fol": "", "prediction": ["all x.((Depth(x) | Distance(x)) -> RepresentedInMeters(x))", "all x y.((Depth(x) & Distance(y)) -> RepresentedInMeters(x,y))", "all x y.((Depth(x) & Distance(y)) -> (RepresentedInMeters(x,y) & RepresentedInMeters(x,y)))", "(RepresentedInMeters(Depths) & RepresentedInMeters(Distances))", "(all x.(Depth(x) & AllMeasures(x)) -> RepresentedInMeters(x))", "all x.((Depth(x) | Distance(x)) -> RepresentedInMeters(x))", "(DepthsAndDistancesRepresentedInMeters(x))", "all x.(Depth(x) & Distance(x)) -> RepresentedInMeter(x))", "all x.(Meter(x) -> (Depth(x) | Distance(x)))", "all x.(Measurement(x) -> (Depth(x) | Distance(x)))", "(all x.(Depth(x) & AllMeasures(x)) -> RepresentedInMeters(x))", "all x y.((Depth(x) & Distance(y)) -> RepresentedInMeters(x,y))", "all x y.((Depth(x) | Distance(x)) -> RepresentedInMeters(y))", "all x.(Depth(x) & Distance(x)) -> RepresentedInMetrics(x))", "all x.((Depth(x) | Distance(x)) -> RepresentedInMeters(x))", "(all x.(Depth(x) & AllMeasures(x)) -> RepresentedInMeters(x))"]}
{"id": "eqasc_validation_1313", "nl": "a meter stick is used to measure meters", "fol": "", "prediction": ["all x y.((MeterStick(x) & Meter(y)) -> MeasuresMeters(x,y))", "all x y z.((MeterStick(x) & Meter(y) & Meter(z)) -> Measures(x,y,z))", "all x.(MeterStick(x) -> MeasuresMeters(x))", "all x y.((MeterStick(x) & Meter(y)) -> Measures(x,y))", "all x.((MeterStick(x) & MeasuresMeters(x)) -> UsedToMeasureMeters(x))", "all x y z.((MeterStick(x) & Meter(y) & Meter(z)) -> Measures(x,y,z))", "all x.(MeterStick(x) -> UsedToMeasureMeters(x))", "all x.(MeterStick(x) -> MeasuresMeters(x))", "all x y.((MeterStick(x) & Meter(y)) -> UsedToMeasure(x,y))", "all x.(MeasurementStick(x) -> MeasuresMeters(x))", "all x y z.((MeterStick(x) & Meter(y) & Meter(z)) -> Measures(x,y,z))", "all x y.((MeterStick(x) & Meter(y)) -> MeasuresMeters(x,y))", "all x y.((MeterStick(x) & MeterStick(y)) -> MeasuresMeters(x,y))", "exists x.(MeterStick(x) & MeasuresMeters(x) & UsedToMeasureMeters(x))", "exists x.(MeasurementStick(x) & MeasuresMeters(x))", "exists x.(MeterStick(x) & MeasuresMeters(x))"]}
{"id": "eqasc_validation_1314", "nl": "Measure distances using a measuring device.", "fol": "", "prediction": ["all x y.((MeasuresDistances(x) & MeasuresDevice(y)) -> MeasuresDistances(x,y))", "(MeasuresDistances(MeasuresDistances(MeasuresDistances(MeasuresDistances(MeasuresDistances(MeasuresDistances(MeasuresDistances(MeasuresDistances(MeasuresDistances(MeasuresDistances(MeasuresDistances(MeasuresDistances(MeasuresDistances(MeasuresDistances(MeasuresDistances))))", "all x.(MeasuresDistances(x) -> UsesMeasuringDevice(x))", "all x.((MeasuresDistances(x) & UsesMeasuringDevice(x)) -> MeasuresDistances(x))", "all x y z.((MeasuresDistance(x) & MeasuresDistance(y) & Device(z)) -> Uses(x,z))", "all x y.((MeasuresDistance(x) & MeasuresDistance(y)) -> UsesMeasuringDevice(x,y))", "all x y.((MeasuresDistances(x) & MeasuresDevice(y)) -> Uses(x,y))", "(MeasuresDistances(MeasuresDistances(MeasuresDistances(MeasuresDistances(MeasuresDistances(MeasuresDistances(MeasuresDistances(MeasuresDistances(MeasuresDistances(MeasuresDistances(MeasuresDistances(MeasuresDistances(MeasuresDistances(MeasuresDistances(MeasuresDistances(MeasuresDistances))))", "all x.(MeasuresDistances(x) -> UsesMeasuringDevice(x))", "all x y z.((MeasuredDistance(x) & MeasuredDevice(y) & MeasuredDistance(z)) -> Measured(x,y,z))", "all x.((MeasuresDistances(x) & MeasuresDistances(x)) -> UsesMeasuringDevice(x))", "all x y.((MeasuresDistances(x) & MeasuringDevice(y)) -> Measures(x,y))", "all x y.((MeasureDistance(x) & MeasureDevice(y)) -> Measures(x,y))", "all x.(MeasureDistance(x) -> UsesMeasuringDevice(x))", "all x.(MeasuresDistances(x) -> UsesMeasuringDevice(x))", "exists x.(MeasuredDistance(x) & MeasuredDevice(x))"]}
{"id": "eqasc_validation_1315", "nl": "a meter stick is a measuring device", "fol": "", "prediction": ["all x.(MeterStick(x) -> MeasurementDevice(x))", "all x.(MeasuringDevice(x) -> MeasurementStick(x))", "all x.(MeasurementStick(x) -> MeasurementDevice(x))", "all x y.((MeterStick(x) & MeasurementDevice(y)) -> MeasurementDevice(x,y))", "all x.(MeterStick(x) -> MeasurementDevice(x))", "all x y z.((MeterStick(x) & MeasurementDevice(y) & MeasurementDevice(z)) -> MeasurementDevice(x,y,z))", "all x y.((MeasurementStick(x) & Meter(y)) -> MeasurementDevice(x))", "all x y.((MeterStick(x) & MeasuringDevice(y)) -> Measures(x,y))", "all x.(MeasuringDevice(x) -> MeterStick(x))", "all x y.((MeterStick(x) & MeasurementDevice(y)) -> MeasuresDevice(x,y))", "all x.(MeterStick(x) -> MeasurementDevice(x))", "all x.(MeasuringDevice(x) -> (MeterStick(x) & MeasuresDevice(x)))", "exists x.(MeterStick(x) & MeasuringDevice(x) & MeasuresDevice(x))", "all x.(MeterStick(x) -> MeasurementDevice(x))", "all x.(MeasurementStick(x) -> MeasurementDevice(x))", "all x.(MeterStick(x) -> MeasuresDevice(x))"]}
{"id": "eqasc_validation_1316", "nl": "Boat brokerages and dealerships are located within walking distance.", "fol": "", "prediction": ["all x.(BoatBrokerage(x) & BoatDepot(x)) -> WithinWalkingDistance(x))", "all x y.((BoatBrokerage(x) & BoatDepot(y)) -> (LocatedWithinWalkingDistance(x,y) & WithinWalkingDistance(x,y)))", "all x.((BoatBrokerage(x) | BoatDealroom(x)) -> WithinWalkingDistance(x))", "all x y.((BoatBrokerage(x) & BoatDealer(y)) -> (LocatedWithinWalkingDistance(x,y) & WithinWalkingDistance(x,y)))", "all x.((BoatBrokerage(x) | BoatDemandator(x)) -> WithinWalkingDistance(x))", "(all x.(BoatBrokerage(x) & All y.(BoatDealer(y)) -> WithinWalkingDistance(x)))", "all x y z.((BoatBrokerage(x) & BoatDepot(y) & WalkingDistance(z)) -> LocatedWithin(x,y,z))", "all x.(BoatBrokerage(x) & BoatDepot(x)) -> WithinWalkingDistance(x))", "all x.(BoatBrokerage(x) & Dealership(x)) -> WithinWalkingDistance(x))", "all x y.((BoatBrokerage(x) & BoatDepot(y)) -> WithinWalkingDistance(x,y))", "all x.(BoatBrokerage(x) -> (LocatedWithinWalkingDistance(x) & LocatedWithinWalkingDistance(x)))", "(all x.(BoatBrokerage(x) & All y.(BoatDepot(y)) -> WithinWalkingDistance(x,y)))", "all x y.((BoatBrokerage(x) & BoatDealer(y)) -> WithinWalkingDistance(x,y))", "all x.((BoatBrokerage(x) | BoatDealroom(x)) -> WithinWalkingDistance(x))", "all x y.((BoatBrokerage(x) & BoatDepot(y)) -> (LocatedWithinWalkingDistance(x,y) & LocatedWithinWalkingDistance(x,y)))", "exists x.(BoatBrokerage(x) & -Demandator(x) & WithinWalkingDistance(x))"]}
{"id": "eqasc_validation_1317", "nl": "The path between the boat brokerages and dealership locations is measured by a meter stick", "fol": "", "prediction": ["all x y z.((BoatBrokers(x) & BoatDemandator(y) & MeterStick(z)) -> MeasuresPath(x,y,z))", "all x y.((BoatBrokers(x) & BoatDemandator(y)) -> MeasuresPathWithMeterStick(x,y))", "(MeasuresPathWithMeterStick(Path(Path) & BetweenBoatBrokersAndDemandatorLocations(Path,MeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasuresMeasures", "all x y z.((BoatBrokerage(x) & BoatDemandation(y) & MeterStick(z)) -> MeasuresPath(x,y,z))", "all x.((BoatBrokers(x) & BoatDemandatorLocations(x)) -> MeasuresPathWithMeterStick(x))", "all x y.((BoatBrokerage(x) & BoatDemandation(y)) -> MeasuresPathWithMeterStick(x,y))", "all x.((Path(x) & BoatBrokers(x) & DealershipLocations(x)) -> MeasuredByMeterStick(x))", "all x.((BoatBrokers(x) & BoatDemandation(x)) -> MeasuresPathWithMeterStick(x))", "(MeasuresPathByMeterStick(PathBetweenBrokersAndDemandations(Path))", "all x.((BoatBrokerage(x) & BoatDemandation(x)) -> MeasuresPathWithMeterStick(x))", "all x y z.((BoatBrokers(x) & BoatDemandation(y) & MeterStick(z)) -> MeasuresPath(x,y,z))", "all x y.((BoatBrokers(x) & BoatDemandation(y)) -> MeasuresPathByMeterStick(x,y))", "all x y z.((BoatBrokerage(x) & BoatDemandation(y) & MeterStick(z)) -> MeasuresPath(x,y,z))", "all x.((Path(x) & BoatBrokers(x) & DealershipLocations(x)) -> MeasuredByMeterStick(x))", "all x y z.((BoatBrokers(x) & BoatDemandatorLocation(y) & MeterStick(z)) -> MeasuresPath(x,y,z))", "all x y.((BoatBrokerage(x) & BoatDemandation(y)) -> MeasuresPathByMeterStick(x,y))"]}
{"id": "eqasc_validation_1318", "nl": "Meter sticks have units called centimeters and millimeters.", "fol": "", "prediction": ["all x.(MeterStick(x) -> (HasCentimeter(x) | HasMillimeter(x)))", "(all x.(MeterStick(x) -> (Centimeter(x) | Millimeter(x))))", "(all x.(MeterStick(x) -> HasCentimeters(x)) & all y.(MeterStick(y) -> HasMillimeters(y)))", "all x y.((MeterStick(x) & Unit(y)) -> (Centimeter(x) | Millimeter(y)))", "all x.(Measurestick(x) -> (HasCentimeter(x) | HasMillimeter(x)))", "all x.(MeterStick(x) -> (HasCentimeters(x) | HasMillimeters(x)))", "all x y.((MeterStick(x) & Unit(y)) -> (Centric(x) | Millimeter(y)))", "all x.(MeterStick(x) -> (HasUnit(x,centimeter) | HasUnit(x,millimeter)))", "all x.(Measurestick(x) -> (HasCentrices(x) | HasMillimeters(x)))", "(all x.(Measurestick(x) -> (Centrics(x) | Millimeters(x))))", "all x y.((Measurestick(x) & (Centrimeter(y) | Millimeter(y))) -> HasUnit(x,y))", "all x.(Measurestick(x) -> (Centimeter(x) | Millimeter(x)))", "all x.(MeterStick(x) -> (HasCentimeter(x) & HasMillimeter(x)))", "all x.(Measurestick(x) -> (HasCentimeters(x) | HasMillimeters(x)))", "all x.(Measurestick(x) -> (Centimeter(x) | Millimeter(x)))", "all x.(MeterStick(x) -> (HasUnit(x,centimeter) & HasUnit(x,millimeter)))"]}
{"id": "eqasc_validation_1319", "nl": "Centimeters and millimeters are units of distance.", "fol": "", "prediction": ["all x.((Centimeter(x) | Millimeter(x)) -> DistanceUnit(x))", "(UnitOfDistance(x) & UnitOfDistance(x) & UnitOfDistance(x))", "all x y.((Centimeter(x) | Millimeter(y)) -> DistanceUnit(x))", "(UnitOfDistance(centimeters) & UnitOfDistance(millimeters))", "all x.((Centimeter(x) | Millimeter(x)) -> DistanceUnit(x))", "(DistanceUnit(x) & UnitOfDistance(x,centimeters) & UnitOfDistance(x,millimeters))", "all x y.((Centimeter(x) & Millimeter(y)) -> DistanceUnit(x,y))", "all x.((Centimeter(x) | Millimeter(x)) -> DistinctionUnit(x))", "(UnitOfDistance(x) & UnitOfDistance(x) & UnitOfDistance(x))", "all x.((Centimeter(x) | Millimeter(x)) -> UnitOfDistance(x))", "(UnitOfDistance(centimeters) & UnitOfDistance(millimeters))", "all x y.((Centimeter(x) & Millimeter(y)) -> DistinctionUnit(x,y))", "all x y.((Centimeter(x) | Millimeter(y)) -> DistanceUnit(x))", "all x.((Centimeter(x) | Millimeter(x)) -> DistanceUnit(x))", "all x.((Centrimeter(x) | Millimeter(x)) -> UnitOfDistance(x))", "all x.((Centimeter(x) | Millimeter(x)) -> DistanzUnit(x))"]}
{"id": "eqasc_validation_1320", "nl": "All distances are in meters , by the way.", "fol": "", "prediction": ["all x.(Distance(x) -> (InMeters(x) & ByTheWay(x)))", "all x.(Distance(x) -> (InMeters(x) & ByTheWay(x)))", "all x y.((Distance(x) & Meter(y)) -> ByTheWay(x,y))", "all x.(Distance(x) -> (Meters(x) & ByTheWay(x)))", "(all x.(Distance(x) -> Meters(x))", "(AllDistancesInMeters(d) & ByTheWay(d))", "all x y.((Distance(x) & Meter(y)) -> ByTheWay(x,y))", "(all x.(Distance(x) -> InMeters(x)))", "all x.(Distance(x) -> (InMeters(x) & ByTheWay(x)))", "all x y.((Distance(x) & Meters(y)) -> ByTheMotor(x,y))", "all x.(Distance(x) -> (Meters(x) & ByTheWay(x)))", "all x.(Distance(x) -> (InMetrics(x) & ByTheWay(x)))", "(all x.(Distance(x) -> Meters(x))", "all x.(Distance(x) -> InMeters(x))", "all x.(Depth(x) -> (InMeters(x) & ByTheWay(x)))", "all x.(Distance(x) -> InMetrics(x))"]}
{"id": "eqasc_validation_1321", "nl": "a meter stick measures meters", "fol": "", "prediction": ["all x.(MeterStick(x) -> MeasuresMeters(x))", "all x y.((MeterStick(x) & Meter(y)) -> MeasuresMeters(x,y))", "all x y z.((MeterStick(x) & Meter(y) & Meter(z)) -> Measures(x,y,z))", "all x.(MeterStick(x) -> MeasuresMeters(x))", "all x.(MeasuresMeters(x) -> MeasuresMeters(x))", "all x y.((MeterStick(x) & Meter(y)) -> MeasuresMeters(x,y))", "all x y z.((MeterStick(x) & Meter(y) & Meter(z)) -> MeasuresMeters(x,y,z))", "all x.(MeterStick(x) -> MeasuresMeters(x))", "all x y.((MeterStick(x) & MeterStick(y)) -> MeasuresMeters(x,y))", "exists x,y,z.(MeterStick(x) & MeasuresMeters(y,z))", "all x.(MeasuresMeters(x) -> MeasuresMeters(x))", "all x y.((MeterStick(x) & Meter(y)) -> MeasuresMeters(x,y))", "exists x.(MeasurementStick(x) & MeasuresMeters(x))", "all x.(MeterStick(x) -> MeasuresMeters(x))", "all x y.((MeterStick(x) & MeterStick(y)) -> MeasuresMeters(x,y))", "all x.(MeterStick(x) -> MeasuresMeters(x))"]}
{"id": "eqasc_validation_1322", "nl": "Each person is placed at a different distance from the object.", "fol": "", "prediction": ["all x y.((Person(x) & Object(y)) -> DifferentDistance(x,y))", "all x.(Person(x) -> DifferentDistanceFromObject(x))", "all x.(PlacedAtDistance(x) -> DifferentDistanceFromObject(x))", "all x y.((Person(x) & Object(y)) -> DifferentDistanceFrom(x,y))", "all x y z.((Person(x) & Object(y) & Distance(z)) -> DifferentDistanceFrom(x,y,z))", "all x y z.((Person(x) & Object(y) & Distance(z)) -> PlacedAtDifferentDistance(x,y,z))", "exists x.(Person(x) & PlacedAtDistance(x,y))", "all x y.((Person(x) & Object(y)) -> DifferentDistance(x,y))", "all x y.((Person(x) & Object(y)) -> PlacedAtDistance(x,y))", "all x y z.((Person(x) & Object(y) & Distance(z) & PlacedAt(x,y,z)) -> DifferentDistanceFrom(x,y,z))", "all x.(Person(x) -> DifferentDistanceFromObject(x))", "all x y.((Person(x) & Object(y) & PlacedAtDistance(x,y)) -> DifferentDistance(x,y))", "all x y.(Person(x) & Object(y) & PlacedAtDistance(x,y))", "exists x.(Person(x) & PlacedAtDistance(x,y))", "exists x.(Person(x) & PlacedAtDistanceFromObject(x))", "exists x.(Person(x) & DistantDistanceFromObject(x))"]}
{"id": "eqasc_validation_1323", "nl": "a meter stick is used to measure between a person and an object", "fol": "", "prediction": ["all x y z.((MeterStick(x) & Person(y) & Object(z)) -> MeasuresBetween(x,y,z))", "all x y.((MeterStick(x) & Person(y) & Object(y)) -> MeasuresBetween(x,y))", "all x.(MeterStick(x) -> MeasuresBetweenPersonAndObject(x))", "all x y z.((MeterStick(x) & Person(y) & Object(z)) -> MeasuresBetween(x,y,z))", "all x y.((MeterStick(x) & Person(y)) -> MeasuresBetweenObject(x,y))", "all x.(MeterStick(x) -> MeasuresBetweenPersonAndObject(x))", "all x y z.((MeterStick(x) & Person(y) & Object(z)) -> MeasuresBetween(x,y,z))", "all x y.((MeterStick(x) & Person(y) & Object(y)) -> MeasuresBetween(x,y))", "all x.(MeasurementStick(x) -> MeasuresBetweenPersonAndObject(x))", "all x.(MeterStick(x) -> MeasuresBetweenPersonAndObject(x))", "all x y z.((MeterStick(x) & Person(y) & Object(z) & MeasuresBetween(x,y,z)) -> MeasuresBetween(x,y,z))", "all x y z.((MeterStick(x) & Person(y) & Object(z)) -> MeasuresBetween(x,y,z))", "all x y.((MeterStick(x) & Person(y)) -> MeasuresBetween(x,y))", "exists x.(MeasurementStick(x) & MeasuresBetweenPersonAndObject(x,y))", "exists x.(MeterStick(x) & MeasuresBetweenPersonAndObject(x))", "all x y z.((MeterStick(x) & Person(y) & Object(z)) -> MeasuresBetween(x,y,z))"]}
{"id": "eqasc_validation_1324", "nl": "Meter stick is 100 cm.", "fol": "", "prediction": ["all x.(MeterStick(x) -> 100Cm(x))", "(Measurestick(meter) & 100Cm(meter))", "(Stick(meter) & 100Cm(meter))", "All x.(MeasurementStick(x) -> 100Cm(x))", "-100cm(meterstick)", "all x.(MeterStick(x) -> 100Cm(x))", "(MeasurementStick(meter) & 100Cm(meter))", "all x.(MeterStick(x) -> (100Cm(x)))", "(StickMeter(x) & 100Cm(x))", "-100cm(meterstick)", "All x.(MeasurementStick(x) -> 100Cm(x))", "All x.(MeasurementStick(x) -> (100Cm(x)))", "all x.(MeterStick(x) -> 100Cm(x))", "-100cm(meterstick)", "all x.(MeterStick(x) -> (100Cm(x) & -100Cm(x)))", "all x.(MeterStick(x) -> Size(x,100))"]}
{"id": "eqasc_validation_1325", "nl": "100 cm is a meter", "fol": "", "prediction": ["all x.((100Cm(x) & Meter(x)) -> Meter(x))", "all x.((100 cm(x) & Meter(x)) -> Meter(x))", "all x y.((100Cm(x) & Meter(y)) -> Meter(x,y))", "(Measurement(100) & Meter(100))", "all x.((100Cm(x) & Meter(x)) -> Meter(x))", "all x y.((100 cm(x) & Meter(y)) -> Meter(x,y))", "all x.((100 cm(x) & Meter(x)) -> Meter(x))", "all x.((Current(x) & Meter(x)) -> Meter(x))", "(Measurement(100) & Meter(100))", "all x.((SixtyCm(x) & Meter(x)) -> Meter(x))", "100 cm (Meter) & Meter(100))", "all x y.((100Cm(x) & Meter(y)) -> Meter(y))", "all x.(100Cm(x) -> Meter(x))", "all x y.((100 cm(x) & Meter(y)) -> Meter(y))", "all x.((100Cm(x) & Meter(x)) -> Meter(x))", "all x.(100Cm(x) -> Meter(x))"]}
{"id": "eqasc_validation_1326", "nl": "A 100 cm stick is used to measure distance.", "fol": "", "prediction": ["all x.((Stick(x) & 100Cm(x)) -> MeasuresDistance(x))", "all x.((Stick(x) & 100CmStick(x)) -> MeasuresDistance(x))", "all x y.((Stick(x) & 100CmStick(y)) -> MeasuresDistance(x,y))", "all x.(Stick(x,100) -> MeasuresDistance(x))", "all x.((Stick(x) & MeasuresDistance(x)) -> 100CmStick(x))", "(MeasuresDistanceWithStick(100Cm))", "all x y.((Stick(x) & Stick(y) & 100Cm(x)) -> MeasuresDistance(x,y))", "all x.(Stick(x) -> MeasuresDistance(x,100))", "(MeasuresDistanceWithStick(100CmStick))", "all x.((Stick(x) & 100Cm(x)) -> MeasuresDistance(x))", "all x.((Stick(x) & MeasuresDistance(x,100)) -> UsedToMeasure(x,100))", "all x y.((Stick(x) & 100CmStick(y)) -> MeasuresDistance(x,y))", "all x y.((Stick(x) & Stick(y) & 100Cm(x)) -> MeasuresDistance(x,y))", "all x.(Stick(x,100) -> MeasuresDistance(x))", "exists x.(Stick(x) & MeasuresDistance(x,100))", "exists x.(Stick(x,100) & MeasuresDistance(x))"]}
{"id": "eqasc_validation_1327", "nl": "Space is a distance between.", "fol": "", "prediction": ["all x.(Space(x) -> DistanceBetween(x))", "(DistanceBetween(Space) & DistanceBetween(Space,Distance))", "all x.(Space(x) -> DistanceBetween(x))", "all x y.((Space(x) & Distance(y)) -> DistanceBetween(x,y))", "all x.(Space(x) -> DistanceBetween(x))", "all x y.((Space(x) & DistanceBetween(y,x)) -> DistanceBetween(x,y))", "all x.(Space(x) -> Distant(x))", "all x y.((Space(x) & Distance(y)) -> DistanceBetween(x,y))", "all x y.((Space(x) & Distant(y,x)) -> DistanceBetween(x,y))", "exists x.DistanceBetween(x) & Space(x))", "all x.(Space(x) -> DistanceBetween(x))", "all x.(Space(x) -> DistanceBetween(x))", "all x.(Space(x) -> Distant(x))", "exists x.(Space(x) & DistanceBetween(x))", "exists x.(Space(x) & DistanceBetween(x))", "exists x.(Space(x) & Distance(x))"]}
{"id": "eqasc_validation_1328", "nl": "a meter stick is used to measure space between things", "fol": "", "prediction": ["all x y.((MeterStick(x) & Things(y)) -> MeasuresSpaceBetween(x,y))", "all x.(MeterStick(x) -> MeasuresSpaceBetweenThings(x))", "all x y z.((MeterStick(x) & Space(y) & Things(z)) -> Measures(x,y,z))", "all x y.((MeterStick(x) & Things(y)) -> MeasuresSpaceBetween(x,y))", "all x y z.((MeterStick(x) & Things(y) & SpaceBetween(z)) -> MeasuresSpaceBetween(x,y,z))", "all x y.((MeterStick(x) & MeasuresSpaceBetweenThings(x)) -> UsedToMeasureSpace(x,y))", "all x.(MeterStick(x) -> MeasuresSpaceBetweenThings(x))", "all x.(MeasuresSpace(x) -> UsedToMeasureSpace(x))", "all x y z.((MeterStick(x) & SpaceBetweenThings(y) & Things(z)) -> MeasuresSpaceBetweenThings(x,y,z))", "all x.(MeterStick(x) -> MeasuresSpaceBetweenThings(x))", "all x y z.((MeterStick(x) & Things(y) & SpaceBetween(z)) -> MeasuresSpace(x,y,z))", "all x y.((MeterStick(x) & Things(y)) -> MeasuresSpaceBetween(x,y))", "exists x.(MeasurementStick(x) & MeasuresSpaceBetweenThings(x))", "exists x.(MeterStick(x) & MeasureSpaceBetweenThings(x))", "all x.(MeterStick(x) -> MeasuresSpaceBetweenThings(x))", "all x y.((MeterStick(x) & Things(y)) -> MeasuresSpaceBetween(x,y))"]}
{"id": "eqasc_validation_1329", "nl": "Length refers to both the time of the ride and the distances available.", "fol": "", "prediction": ["all x.(Length(x) -> (TimeOfRide(x) & DistancesAvailable(x)))", "all x y.((Ride(x) & RideTime(y)) -> (RefersTo(x,y) & RefersTo(x,y)))", "all x y.((Ride(x) & Ride(y)) -> (Time(x,y) & Distance(x,y)))", "all x.(Length(x) -> (TimeOfRide(x) & DistancesAvailable(x)))", "all x.(Length(x) -> (TimeOfRide(x) & DistancesAvailable(x)))", "(RideTime(Ride) & RideDistance(Ride))", "(Time(Ride) & Distance(Ride))", "all x y z.((Ride(x) & Ride(y) & Distance(z)) -> (Time(x,y) & Distance(z,y)))", "(RideTime(x) & RideDistance(x))", "all x.(Length(x) -> (TimeOfRide(x) & DistancesAvailable(x)))", "all x y.((Ride(x) & RideTime(y)) -> (RefersTo(x,y) & RefersTo(x,y)))", "all x.(Length(x) -> (RefersToTimeOfRide(x) & RefersToDistances(x)))", "all x.(Length(x) -> (TimeOfRide(x) & DistancesAvailable(x)))", "all x.(Length(x) -> (TimeOfRide(x) & DistancesAvailable(x)))", "All x.(Length(x) -> (TimeOfRide(x) & Distance(x)))", "All x.(Length(x) -> (RideTime(x) & RideDistance(x)))"]}
{"id": "eqasc_validation_1330", "nl": "A meter stick is used to measure length.", "fol": "", "prediction": ["all x.(MeterStick(x) -> MeasuresLength(x))", "all x y.((MeterStick(x) & MeasureLength(y)) -> UsedToMeasureLength(x,y))", "all x.(MeasuresLength(x) -> MeterStick(x))", "all x.(MeterStick(x) -> MeasuresLength(x))", "all x y.((MeterStick(x) & MeasuresLength(y)) -> UsedToMeasure(x,y))", "all x y z.((MeterStick(x) & MeasuresLength(y) & Term(z)) -> UsedToMeasure(x,y,z))", "all x y.((MeasurementStick(x) & MeasureLength(y)) -> UsedToMeasureLength(x,y))", "all x.(MeasureLength(x) -> MeterStick(x))", "all x.(MeterStick(x) -> UsedToMeasureLength(x))", "all x.(MeterStick(x) -> MeasuresLength(x))", "all x y.((MeterStick(x) & MeasureLength(y)) -> UsedToMeasure(x,y))", "all x y.((MeterStick(x) & MeasuresLength(x,y)) -> UsedToMeasure(x,y))", "exists x.(MeterStick(x) & MeasureLength(x))", "exists x.(MeasurementStick(x) & UsedToMeasureLength(x))", "exists x.(MeasurementStick(x) & MeasuresLength(x))", "exists x.(MeterStick(x) & MeasureLength(x))"]}
{"id": "eqasc_validation_1331", "nl": "All distances are in feet.", "fol": "", "prediction": ["all x.(Distance(x) -> InFeet(x))", "(AllDistancesInFeet(x) -> DistanceInFeet(x))", "all x.(Distance(x) -> InFeet(x))", "all x y.((Distance(x) & Foot(y)) -> InFeet(x))", "(all x.(Distance(x) -> Foot(x)))", "(AllDistancesInFeet(x) -> DistanceInFeet(x))", "(all x.(Distance(x) -> InFeet(x)))", "all x.(Distance(x) -> InFeet(x))", "all x.(Distance(x) -> InFeet(x))", "all x.(Distance(x) -> Foot(x))", "all x.(Distance(x) -> InFeet(x))", "all x.(Distance(x) -> (InFeet(x)))", "all x.(Distance(x) -> InFeet(x))", "all x.(Distance(x) -> InFoot(x))", "all x.(Distance(x) -> Foot(x))", "all x.(Distance(x) -> InFeet(x))"]}
{"id": "eqasc_validation_1332", "nl": "a meter stick can be used to measure feet", "fol": "", "prediction": ["all x.(MeterStick(x) -> MeasuresFeet(x))", "all x y.((MeterStick(x) & Foot(y)) -> MeasuresFeet(x,y))", "all x y z.((MeterStick(x) & Foot(y) & Foot(z)) -> Measures(x,y,z))", "all x.((MeterStick(x) & MeasuresFeet(x)) -> CanBeUsedToMeasureFeet(x))", "all x.(MeasuresFeet(x) -> MeasuresFeet(x))", "all x y.((MeterStick(x) & Foot(y)) -> Measures(x,y))", "all x.(MeterStick(x) -> MeasuresFeet(x))", "all x.(MeterStick(x) -> MeasureFeet(x))", "all x y.((MeterStick(x) & Foot(y)) -> MeasuresFeet(x,y))", "all x y z.((MeterStick(x) & Foot(y) & Foot(z)) -> Measures(x,y,z))", "all x y.((MeterStick(x) & Foot(y) & Measures(x,y)) -> CanBeUsedToMeasure(x,y))", "all x y.((MeterStick(x) & Foot(y)) -> MeasuresFeet(x,y))", "exists x.(MeasurementStick(x) & MeasuresFeet(x))", "all x.(MeterStick(x) -> MeasuresFeet(x))", "exists x.(MeterStick(x) & UsedToMeasureFeet(x))", "exists x.(MeterStick(x) & MeasureFeet(x))"]}
{"id": "eqasc_validation_1333", "nl": "How transaction measurements are calculated.", "fol": "", "prediction": ["all x.(TransactionMeasurement(x) -> Calculated(x))", "(CalculatedTransactionMeasurements(x) -> CalculatedTransactionMeasurements(x))", "-(TransactionMeasurements(x) & Calculated(x))", "How transactionMeasurements(x)", "all x y.((Transaction(x) & Transaction(y)) -> Calculated(x,y))", "how transaction measurements are calculated.", "(ComparisonsTransactionMeasurements(x) & How(x,Measurements))", "all x.(TransactionMeasurements(x) -> Calculated(x))", "How TransactionMeasurements(x)", "(CalculatedTransactionMeasurements)", "-(TransactionMeasurements(x) & Calculated(x))", "how transaction measurements are calculated.", "all x.(TransactionMeasurement(x) -> Calculated(x))", "How TransactionMeasurements(x)", "how transaction measurements are calculated.", "How TransactionMeasurementsCompacted."]}
{"id": "eqasc_validation_1334", "nl": "a meter stick is used to calculate distance", "fol": "", "prediction": ["all x y.((MeterStick(x) & Distance(y)) -> Calculates(x,y))", "all x.(MeterStick(x) -> CalculatesDistance(x))", "all x y z.((MeterStick(x) & Distance(y) & Distance(z)) -> Calculates(x,y,z))", "all x y.((MeterStick(x) & Distance(y)) -> Calculates(x,y))", "all x.(MeterStick(x) -> CalculatesDistance(x))", "all x y z.((MeterStick(x) & Distance(y) & Distance(z)) -> Calculates(x,y,z))", "all x y.((MeterStick(x) & Distance(y)) -> CalculatesDistance(x,y))", "all x.(MeasurementStick(x) -> CalculatesDistance(x))", "all x y.((MeasurementStick(x) & Distance(y)) -> Calculates(x,y))", "all x y.((MeterStick(x) & Distance(y) & Calculates(x,y)) -> UsedToCalculate(x,y))", "all x y z.((MeterStick(x) & Distance(y) & Distance(z) & Calculates(x,y,z)) -> UsedToCalculate(x,y,z))", "all x.(MeterStick(x) -> CalculatesDistance(x))", "all x y z.((MeterStick(x) & Distance(y) & Distance(z)) -> CalculatedWith(x,y,z))", "exists x.(MeasurementStick(x) & CalculatesDistance(x))", "exists x.(MeterStick(x) & CalculateDistance(x,Distance,Distance,Distance))", "all x.(MeterStick(x) -> CalculatesDistance(x))"]}
{"id": "eqasc_validation_1335", "nl": "Loss of ozone has created an ozone hole over Antarctica.", "fol": "", "prediction": ["all x y.((LossOfOzone(x) & Antarctica(y)) -> CreatedOzoneHole(x,y))", "all x.(LossOfOzone(x) -> CreatesOzoneHoleOverAntarctica(x))", "-LossOfOzoneCreatedOzoneHoleOverAntarctica.", "(LossOfOzone(OzoneHoleOverAntarctica))", "all x y z.((LossOfOzone(x) & OzoneHole(y) & Antarctica(z)) -> CreatedOver(x,y,z))", "LossOfOzoneCreatedOzoneHoleOverAntarctica(x))", "all x y.((LossOzone(x) & Antarctica(y)) -> CreatedOzoneHole(x,y))", "all x.((LossOfOzone(x) & OzoneHoleOverAntarctica(x)) -> CreatedOverAntarctica(x))", "all x y.((LossOfOzone(x) & Antarctica(y)) -> CreatesOzoneHole(x,y))", "(LossOfOzone(o) & CreatedOzoneHole(o))", "all x.(LossOfOzone(x) -> CreatedOzoneHoleOverAntarctica(x))", "-LossOfOzoneCreatedOzoneHoleOverAntarctica.", "(LossOfOzone(l) & CreatedOzoneHole(l))", "all x.(LossOfOzone(x) -> CreatesOzoneHole(x))", "all x y.((LossOfOzone(x) & Antarctica(y)) -> CreatedOzoneHole(x,y))", "All x.(LossOfOzone(x) -> CreatedOzoneHoleOverAntarctica(x))"]}
{"id": "eqasc_validation_1336", "nl": "Scientists know that ozone-destroying industrial chemicals are the major cause of ozone loss.", "fol": "", "prediction": ["all x y.((Scientist(x) & OzoneDisruptingIndustrialChemicals(y)) -> MajorCauseOfOzoneLoss(x,y))", "all x.((Scientist(x) & OzoneDisruptingIndustrialChemicals(x)) -> MajorCauseOfOzoneLoss(x))", "(MajorCauseOfOzoneLoss(scientists) & OzoneDisruptingIndustrialChemicals(scientists))", "all x y z.((Scientist(x) & OzoneDisruptingIndustrialChemicals(y) & OzoneLoss(z)) -> MajorCause(x,y,z))", "all x.(Scientist(x) -> (OzoneDestroyingIndustrialChemicals(x) & MajorCauseOfOzoneLoss(x)))", "all x y.((Scientist(x) & OzoneDisruptingIndustrialChemicals(y)) -> MajorCauseOfOzoneLoss(x,y))", "all x.((Scientist(x) & OzoneDisruptingIndustrialChemicals(x)) -> MajorCauseOfOzoneLoss(x))", "all x y.((Scientist(x) & OzoneDestroyingIndustrialChemicals(y)) -> MajorCauseOfOzoneLoss(x,y))", "all x y z.((Scientist(x) & OzoneDisruptingIndustrialChemicals(y) & OzoneLoss(z)) -> MajorCause(x,y,z))", "(all x.((Scientist(x) & OzoneDisruptingIndustrialChemicals(x)) -> MajorCauseOfOzoneLoss(x)))", "all x.(Scientist(x) -> (OzoneDestroyingIndustrialChemicals(x) & MajorCauseOfOzoneLoss(x)))", "all x y.((Scientist(x) & OzoneDestroyingIndustrialChemicals(y)) -> MajorCauseOfOzoneLoss(x,y))", "all x.((Scientist(x) & OzoneDestroyingIndustrialChemicals(x)) -> MajorCauseOfOzoneLoss(x))", "all x.((Scientist(x) & OzoneDisruptingIndustriellChemicals(x)) -> MajorCauseOfOzoneLoss(x))", "all x y.((Scientist(x) & OzoneDisruptingIndustrialChemistry(y)) -> MajorCauseOfOzoneLoss(x,y))", "all x.(Scientist(x) -> (OzoneDestroyingIndustrialChemicals(x) & MajorCauseOfOzoneLoss(x)))"]}
{"id": "eqasc_validation_1337", "nl": "Chemicals created a hole in the ozone over Antarctica ", "fol": "", "prediction": ["all x y z.((Chemicals(x) & Ozone(y) & Antarctica(z)) -> CreatedHoleInOzone(x,y,z))", "all x.(ChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemical", "all x y.((Chemicals(x) & Antarctica(y)) -> CreatedHoleInOzone(x,y))", "all x.(ChemistryChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemical", "all x y z.((Chemistry(x) & Ozone(y) & Antarctica(z)) -> CreatedHoleInOzone(x,y,z))", "all x y z.((Chemicals(x) & Ozone(y) & Antarctica(z)) -> CreatedHoleInOzoneOver(x,y,z))", "(Chemicals(Chemicals) & CreatedHoleInOzone(Chemicals))", "all x.(ChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemical", "all x y.((Chemicals(x) & Antarctica(y)) -> CreatedHoleInOzone(x,y))", "all x y z.((Chemistry(x) & Ozone(y) & Antarctica(z) & CreatedHoleInOzone(x,y)) -> Over Antarctica(x,z))", "all x y.((Chemistry(x) & Antarctica(y)) -> CreatedHoleInOzone(x,y))", "(ChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemical", "all x y z.((Chemicals(x) & Ozone(y) & Antarctica(z)) -> CreatedHoleInOzone(x,y,z))", "all x y.((Chemicals(x) & Antarctica(y)) -> CreatedHoleInOzoneOver(x,y))", "(Chemicals(Chemicals) & CreatedHoleInOzone(Chemicals))", "(ChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicalsChemicals"]}
{"id": "eqasc_validation_1338", "nl": "Antarctica's ozone layer is threatened by depletion.", "fol": "", "prediction": ["all x.(Antarctica(x) -> ThreatenedByDepletion(x))", "all x.((AntarcticOzoneLayer(x) & ThreatenedByDepletion(x)) -> ThreatenedByDepletion(x))", "all x y.((AntarcticOzoneLayer(x) & Depletion(y)) -> ThreatenedBy(x,y))", "all x.((AntarcticAntarcticOzoneLayer(x) & ThreatenedByDepletion(x)) -> ThreatenedByDepletion(x))", "all x.(AntarcticOzoneLayer(x) -> ThreatenedByDepletion(x))", "all x y.((AntarcticAntarcticOzoneLayer(x) & Depletion(y)) -> ThreatenedBy(x,y))", "(Depletion ThreatenedOzoneLayer(Antarctica))", "-DepletionOzoneLayer(Antarctica)", "the Antarctica's OzoneLayer(Antarctica) is threatenedByDepletion(Antarctica))", "(Depletion ThreatensOzoneLayer(Antarctica))", "all x y.((AntarcticOzoneLayer(x) & Antarctica(y)) -> ThreatenedByDepletion(x,y))", "All x.(AntarcticAntarcticOzoneLayer(x) -> ThreatenedByDepletion(x))", "(Depletion ThreatenedOzoneLayer(Antarctica))", "all x y.((Antarctica(x) & OzoneLayer(y)) -> ThreatenedByDepletion(x,y))", "all x.(Antarctica(x) -> ThreatenedByOzoneLayer(x))", "(Depletion ThreatenedOzoneLayer(Antarctica))"]}
{"id": "eqasc_validation_1339", "nl": "loss of ozone can mean an ozone hole", "fol": "", "prediction": ["all x.(LossOfOzone(x) -> OzoneHole(x))", "all x y.((LossOzone(x) & OzoneHole(y)) -> CanBeSuch(x,y))", "all x.((LossOzone(x) & OzoneHole(x)) -> CanBeSuch(x))", "all x.(LossOfOzone(x) -> CanBeOzoneHole(x))", "all x y.((LossOfOzone(x) & OzoneHole(y)) -> CanBeSuch(x,y))", "all x.(LossOzone(x) -> OzoneHole(x))", "all x y z.((LossOfOzone(x) & OzoneHole(y) & OzoneHole(z)) -> CanBeSuch(x,y,z))", "all x.((LossOfOzone(x) & OzoneHole(x)) -> CanBeMade(x))", "(LossOzone(x) -> OzoneHole(x))", "all x y.((LossOfOzone(x) & OzoneHole(y)) -> CanBeSuchAs(x,y))", "all x.((LossOzone(x) & OzoneHole(x)) -> CanBeSuch(x))", "all x y.((LossOzone(x) & OzoneHole(y)) -> CanSignify(x,y))", "all x.(LossOfOzone(x) -> OzoneHole(x))", "all x y.((LossOfOzone(x) & OzoneHole(y)) -> CanSignify(x,y))", "all x.(LossOzone(x) -> CanBeOzoneHole(x))", "all x.((LossOfOzone(x) & OzoneHole(x)) -> CanBeSuchAs(x))"]}
{"id": "eqasc_validation_1340", "nl": "Another sign of global warming is a hole in the ozone layer over Antarctica.", "fol": "", "prediction": ["all x.(GlobalWarming(x) -> HoleInOzoneLayerOverAntarctica(x))", "all x.(GlobalWarming(x) -> (HoleInOzoneLayer(x) & OverAntarctica(x)))", "all x y.((GlobalWarming(x) & HoleInOzoneLayer(y)) -> OverAntarctica(x))", "(GlobalWarming(GlobalWarming(Global) & HoleInOzoneLayer(Global) & OverAntarctica(Global))", "all x.((HoleInOzoneLayer(x) & OverAntarctica(x)) -> GlobalWarming(x))", "(GlobalWarming(HoleInOzoneLayer(HoleOverAntarctica))", "all x y z.((GlobalWarming(x) & HoleInOzoneLayer(y) & Antarctica(z)) -> GlobalWarming(x))", "all x y.((GlobalWarming(x) & HoleInOzoneLayer(y)) -> OverAntarctica(x,y))", "all x.(GlobalWarming(x) -> HoleInOzoneLayer(x))", "all x y.((GlobalWarming(x) & HoleInOzoneLayer(y) & OverAntarctica(x)) -> GlobalWarming(x))", "all x.(GlobalWarming(x) -> HoleInOzoneLayer(x))", "(GlobalWarming(GlobalWarming(Global) & HoleInOzoneLayerOverAntarctica(Global))", "all x y.((HoleInOzoneLayer(x) & Antarctica(y)) -> GlobalWarming(x))", "all x.(GlobalWarming(x) -> (HoleInOzoneLayer(x) & OverAntarctica(x)))", "exists x.(GlobalWarmingHole(x) & OverAntarctica(x))", "exists x.(GlobalWarmingHole(x) & OverAntarctica(x))"]}
{"id": "eqasc_validation_1341", "nl": "Global warming has created an ozone hole", "fol": "", "prediction": ["all x y.((GlobalWarming(x) & OzoneHole(y)) -> Created(x,y))", "all x y z.((GlobalWarming(x) & OzoneHole(y) & GlobalWarming(z)) -> Created(x,y,z))", "all x.(GlobalWarming(x) -> CreatedOzoneHole(x))", "(GlobalWarming(GlobalWarming) & CreatedOzoneHole(GlobalWarming))", "globalwarming has created an ozoneHole(x) -> (GlobalWarming(x) & OzoneHole(x) & OzoneHole(x)))", "all x y.((GlobalWarming(x) & OzoneHole(y)) -> Created(x,y))", "all x y z.((GlobalWarming(x) & OzoneHole(y) & OzoneHole(z)) -> Created(x,y,z))", "all x.(GlobalWarming(x) -> CreatedOzoneHole(x))", "globalwarming has created an ozonehole.", "all x.(GlobalWarming(x) -> CreatedOzoneHole(x))", "all x y.((GlobalWarming(x) & OzoneHole(y)) -> Created(x,y))", "all x y z.((GlobalWarming(x) & OzoneHole(y) & GlobalWarming(z)) -> Created(x,y,z))", "all x.(GlobalWarming(x) -> CreatedOzoneHole(x))", "all x y.((GlobalWarming(x) & OzoneHole(y)) -> Created(x,y))", "all x.(GlobalWarming(x) -> CreatedOzoneHole(x))", "All x.(GlobalWarming(x) -> CreatesOzoneHole(x))"]}
{"id": "eqasc_validation_1342", "nl": "Ozone depletion causes global warming.", "fol": "", "prediction": ["all x.(OzoneDepletion(x) -> CausesGlobalWarming(x))", "all x y.((OzoneDepletion(x) & GlobalWarming(y)) -> Causes(x,y))", "all x.(OzoneDepletion(x) -> CausesGlobalWarming(x))", "OzoneDepletionCausesGlobalWarming(Ozone)", "all x.((OzoneDepletion(x) & GlobalWarming(x)) -> Causes(x,y))", "all x y.((OzoneDepletion(x) & GlobalWarming(y)) -> Causes(x,y))", "all x.(OzoneDepletion(x) -> CausesGlobalWarming(x))", "all x.(OzoneDepletion(x) -> CausesGlobalWarming(x))", "all x y.((OzoneDepletion(x) & GlobalWarming(y)) -> Causes(x,y))", "all x.(OzoneDepletion(x) -> GlobalWarming(x))", "all x.(OzoneDepletionCausesGlobalWarming(x) -> Causes(x))", "all x.(OzoneDepletion(x) -> CausesGlobalWarming(x))", "all x y.((OzoneDepletion(x) & GlobalWarming(y)) -> Causes(x,y))", "all x.(OzoneDefletion(x) -> GlobalWarming(x))", "All x y.((OzoneDepletion(x) & GlobalWarming(y)) -> Causes(x,y))", "all x.(OzoneDepletion(x) -> CausesGlobalWarming(x))"]}
{"id": "eqasc_validation_1343", "nl": "a hole over antarctica causes global warming", "fol": "", "prediction": ["all x y.((HoleOverAntarctica(x) & Antarctica(y)) -> CausesGlobalWarming(x,y))", "all x y z.((Hole(x) & Antarctica(y) & Antarctica(z)) -> CausesGlobalWarming(x,y,z))", "all x.((HoleOverAntarctica(x) & CausesGlobalWarming(x)) -> CausesGlobalWarming(x))", "all x y.((HoleOverAntarctica(x) & CausesGlobalWarming(y)) -> CausesGlobalWarming(x,y))", "all x y.((Hole(x) & Antarctica(y)) -> CausesGlobalWarming(x,y))", "all x y z.((HoleOverAntarctica(x) & HoleOverAntarctica(y) & GlobalWarming(z)) -> CausesGlobalWarming(x,y,z))", "all x y z.((Hole(x) & Antarctica(y) & Antarctica(z)) -> CausesGlobalWarming(x,y,z))", "all x.((HoleOverAntarctica(x) & CausesGlobalWarming(x)) -> GlobalWarming(x))", "all x.((HoleOverAntartica(x) & CausesGlobalWarming(x)) -> GlobalWarming(x))", "all x y.((HoleOverAntartica(x) & Antarctica(y)) -> CausesGlobalWarming(x,y))", "all x.(HoleOverAntarctica(x) -> CausesGlobalWarming(x))", "all x y z.((HoleOverAntarctica(x) & Antarctica(y) & GlobalWarming(z)) -> CausesGlobalWarming(x,y,z))", "all x y.((Hole(x) & Antarctica(y)) -> CausesGlobalWarming(x,y))", "all x.((HoleOverAntarctica(x) & CausesGlobalWarming(x)) -> CausesGlobalWarming(x))", "all x.(HoleOverAntarctica(x) -> GlobalWarming(x))", "all x y z.((Hole(x) & Antarctica(y) & Antarctica(z)) -> CausesGlobalWarming(x,y,z))"]}
{"id": "eqasc_validation_1344", "nl": "Ozone Ozone is a natural component of the atmosphere.", "fol": "", "prediction": ["all x.(Ozone(x) -> NaturalComponentOfAtmosphere(x))", "Ozone (NaturalComponentOfAtmosphere(Ozone))", "(NaturalComponentOfAtmosphere(Ozone))", "Ozone (Ozone) -> NaturalComponentOfAtmosphere(Ozone))", "Ozone Ozone is a natural component of the atmosphere.", "all x.(Ozone(x) -> NaturalComponentOfAtmosphere(x))", "Ozone Ozone is a naturalcomponentOfAtmosphere(Ozone)", "all x y.((Ozone(x) & Atmosphere(y)) -> NaturalComponent(x,y))", "Ozone (NaturalComponentOfAtmosphere(Ozone))", "all x.(Ozone(x) -> NaturalComponentOfAtmosphere(x))", "Ozone Ozone is a natural component of the atmosphere.", "all x.(Ozone(x) -> NaturalComponentOfAtmosphere(x))", "all x.(Ozone(x) -> NaturalComponentOfAtmosphere(x))", "all x.(Ozone(x) -> NaturalComponentOfAtmosphere(x))", "all x.(Ozone(x) -> NaturalComponentOfAtmosphere(x))", "All x.(Ozone(x) -> NaturalComponentOfAtmosphere(x))"]}
{"id": "eqasc_validation_1345", "nl": "loss of a natural component of the atmosphere has created a hole over Antarctica", "fol": "", "prediction": ["all x y.((LossOfNaturalComponentOfAtmosphere(x) & NaturalComponentOfAtmosphere(y)) -> CreatedHoleOverAntarctica(x))", "all x y z.((LossOfNaturalComponentOfAtmosphere(x) & NaturalComponentOfAtmosphere(y) & Antarctica(z)) -> CreatedHoleOverAntarctica(x,z))", "all x.((LossOfNaturalComponentOfAtmosphere(x) & CreatedHoleOverAntarctica(x)) -> HoleOverAntarctica(x))", "(LossOfNaturalComponentOfAtmosphere(LossOfAtmosphere(LossOfAtmosphere(LossOfAtmosphere(LossOfAtmosphere(LossOfAtmosphere(LossOfAtmosphere(LossOfAtmosphere(LossOfAtmosphere(LossOatAtmosphere(Loss(Loss(Loss(Loss(Loss(Loss)))", "(LossOfNaturalComponentOfAtmosphere(LossOfAtmosphere(LossOfNaturalComponentOfAtmosphere(LossOfAtmosphere(LossOfAtmosphere(LossOfAntarctica(LossOfAntarctica(LossOfAntarctica(Looce(Looce(Looce(Looce(Looce(Looce(Looce(Looce(Looce(Looce(Looce(Looce(Looce(Looce(Looce(Looce))))))", "all x y.((LossOfNaturalComponentOfAtmosphere(x) & LostOfNaturalComponentOfAtmosphere(x)) -> CreatedHoleOverAntarctica(x))", "all x y.((LossOfNaturalComponent(x) & NaturalAtmosphere(y) & Atmosphere(z) & NaturalComponent(z)) -> CreatedHoleOverAntarctica(x,y,z))", "all x.(LossOfNaturalComponentOfAtmosphere(x) -> CreatedHoleOverAntarctica(x))", "all x y z.((LossOfNaturalComponentOfAtmosphere(x) & NaturalComponentOfAtmosphere(y) & Antarctica(z)) -> CreatedHoleOverAntarctica(x,y,z))", "(LossOfNaturalComponent(LossOfAtmosphere) & CreatedHoleOverAntarctica(HoleOverAntarctica))", "all x y z.((LossOfNaturalComponentOfAtmosphere(x) & HoleOverAntarctica(y) & NaturalComponentOfAtmosphere(z)) -> CreatedHoleOverAntarctica(x,y,z))", "all x.((LossOfNaturalComponentOfAtmosphere(x) & CreatedHoleOverAntarctica(x)) -> HoleOverAntarctica(x))", "all x y.((LossOfNaturalComponentOfAtmosphere(x) & NaturalComponentOfAtmosphere(y)) -> CreatedHoleOverAntarctica(x,y))", "all x.((LossOfNaturalComponentOfAtmosphere(x) & CreatedHoleOverAntarctica(x)) -> HoleOverAntarctica(x))", "all x.((LossOfNaturalComponent(x) & Atmosphere(x)) -> CreatedHoleOverAntarctica(x))", "all x y z.((LossOfNaturalComponentOfAtmosphere(x) & NaturalComponentOfAtmosphere(y) & Antarctica(z)) -> CreatedHoleOverAntarctica(x,z))"]}
{"id": "eqasc_validation_1346", "nl": "Ozone Loss Ozone is produced by intense ultraviolet radiation in the upper stratosphere.", "fol": "", "prediction": ["all x.(OzoneLoss(x) -> (IntenseUltravioletRadiation(x) & UpperStratosphere(x)))", "Ozone Loss Ozone is produced by intenseUVRadiationInUpperStratosphere(Ozone)", "OzoneLoss Ozone isproducedByIntenseUVRadiationInUpperStratosphere(Ozone)", "All x y.((OzoneLoss(x) & IntenseUVRadiation(y)) -> ProducedBy(x,y))", "all x.(OzoneLoss(x) -> (ProducedByIntenseUVRadiation(x) & InUpperStratosphere(x)))", "all x.(OzoneLoss(x) -> (IntenseUVRadiation(x) & UpperStratosphere(x)))", "OzoneLoss Ozone (Ozone) -> ProducedByIntenseUVRadiationInUpperStratosphere(Ozone))", "All x y.((OzoneLoss(x) & IntenseUltravioletRadiation(y)) -> ProducedBy(x,y))", "Ozone Loss Ozone is produced by intenseUVRadiationInUpperStratosphere(Ozone)", "all x.(OzoneLossOzone(x) -> (IntenseUltravioletRadiation(x) & UpperStratosphere(x)))", "all x.((OzoneLoss(x) & IntenseUVRadiation(x)) -> ProducedBy(x,Ozone,UpperStratosphere))", "OzoneLoss Ozone isproducedByIntenseUVRadiationInUpperStratosphere(Ozone)", "all x.(OzoneLoss(x) -> ProducedByIntenseUVRadiation(x))", "all x.(OzoneLoss(x) -> (ProducedByIntenseUltravioletRadiation(x) & UpperStratosphere(x)))", "All x y.((OzoneLoss(x) & IntenseUVRadiation(y)) -> ProducedBy(x,y))", "Ozone Loss Ozone is produced by intenseUVRadiationInUpperStratosphere(Ozone)"]}
{"id": "eqasc_validation_1347", "nl": "intense ultraviolet radiation in the upper stratosphere has created an ozone hole over Antarctica", "fol": "", "prediction": ["all x y.((IntenseUltravioletRadiation(x) & UpperStratosphere(y)) -> CreatedOzoneHoleOverAntarctica(x))", "all x y z.((IntenseUltravioletRadiation(x) & UpperStratosphere(y) & Antarctica(z)) -> CreatedOzoneHole(x,z))", "all x.((IntenseUltravioletRadiation(x) & UpperStratosphere(x)) -> CreatedOzoneHole(x))", "(IntenseUltravioletRadiationInUpperStratosphere(x) & CreatedOzoneHoleOverAntarctica(x))", "-IntenseUltravioletRadiationInUpperStratosphereCreatedOzoneHoleOverAntarctica.", "all x y.((IntenseUVRadiation(x) & UpperStratosphere(y) & IntenseUVRadiation(x,y)) -> CreatedOzoneHoleOverAntarctica(x))", "all x y z.((IntenseUVRadiation(x) & UpperStratosphere(y) & Antarctica(z)) -> CreatedOzoneHole(x,y,z))", "(IntenseUVRadiationInUpperStratosphere(x) & CreatedOzoneHoleOverAntarctica(x))", "all x.((IntenseUVRadiation(x) & UpperStratosphere(x)) -> CreatedOzoneHole(x))", "all x y z.((IntenseUltravioletRadiation(x) & UpperStratosphere(y) & Antarctica(z) & IntenseUltravioletRadiation(x,y,z)) -> CreatedOzoneHole(x,z))", "all x y.((IntenseUltravioletRadiation(x) & UpperStratosphere(y) & InStratosphere(x,y)) -> CreatedOzoneHole(x))", "all x.((IntenseUltravioletRadiation(x) & UpperStratosphere(x)) -> CreatedOzoneHoleOverAntarctica(x))", "all x y.((IntenseUVRadiation(x) & UpperStratosphere(y) & IntenseUltravioletRadiation(x,y)) -> CreatedOzoneHoleOverAntarctica(x))", "(IntenseUltravioletRadiationInUpperStratosphere(x) & CreatedOzoneHoleOverAntarctica(x))", "(IntenseUVRadiationInUpperStratosphere(x) & CreatedOzoneHoleOverAntarctica(x))", "all x.((IntenseUVRadiation(x) & UpperStratosphere(x)) -> CreatedOzoneHoleOverAntarctica(x))"]}
{"id": "eqasc_validation_1348", "nl": "Ozone loss is rapid.", "fol": "", "prediction": ["all x.(OzoneLoss(x) -> Rapid(x))", "OzoneLossRapid(Ozone)", "all x.(OzoneLoss(x) -> Rapid(x))", "all x y.((OzoneLoss(x) & Ozone(y)) -> Rapid(x))", "OzoneLossRapid(o)", "all x.(OzoneLoss(x) -> Rapid(x))", "all x y.((OzoneLoss(x) & Ozone(y)) -> Rapid(x))", "OzoneLossRapid(x)", "all x.(OzoneLoss(x) -> Rapid(x))", "OzoneLossRapid(Ozone)", "all x.(OzoneLoss(x) -> Rapid(x))", "all x.(Ozone(x) -> RapidLoss(x))", "all x.(OzoneLoss(x) -> Rapid(x))", "all x.(OzoneLoss(x) -> Rapid(x))", "All x.(OzoneLoss(x) -> Rapid(x))", "All x.(OzoneLoss(x) -> Rapid(x))"]}
{"id": "eqasc_validation_1349", "nl": "ozone is disappearing rapidly", "fol": "", "prediction": ["all x.(Ozone(x) -> DisappearingRapidly(x))", "all x y.((Ozone(x) & Ozone(y)) -> DisappearsRapidly(x,y))", "all x y z.((Ozone(x) & Ozone(y) & Ozone(z)) -> DisappearsRapidly(x,y,z))", "all x.(Ozone(x) -> DisappearsRapidly(x))", "all x.(OzoneDistantRapidly(x) -> Disappearing(x))", "all x.(OzoneDisappearingRapidly(x) -> OzoneDisappearingRapidly(x))", "all x y.((Ozone(x) & Ozone(y)) -> DisappearingRapidly(x,y))", "(DisappearingOzoneRapidly(ozone) & Rapidly(ozone))", "-OzoneDistantRapidly(ozone)", "all x y z.((Ozone(x) & Ozone(y) & Ozone(z)) -> DisappearingRapidly(x,y,z))", "all x.(Ozone(x) -> DisappearingRapidly(x))", "all x y.((Ozone(x) & Ozone(y)) -> DisappearsRapidly(x,y))", "all x y.((Ozone(x) & Ozone(y)) -> DissolvingRapidly(x,y))", "all x.(OzoneDistantRapidly(x) -> Disappearing(x))", "all x.(Ozone(x) -> DissolvingRapidly(x))", "All x.(Ozone(x) -> VerschiebingRapidly(x))"]}
{"id": "eqasc_validation_1350", "nl": "Ozone depletion allows more ultraviolet radiation, which causes skin cancer.", "fol": "", "prediction": ["all x.(OzoneDepletion(x) -> (AllowsMoreUltravioletRadiation(x) & CausesSkinCancer(x)))", "all x y.((OzoneDepletion(x) & UVRadiation(y)) -> (AllowsMore(x,y) & CausesSkinCancer(x)))", "all x.(OzoneDepletion(x) -> (AllowsUltravioletRadiation(x) & CausesSkinCancer(x)))", "all x.(OzoneDepletion(x) -> (AllowsMoreUVRadiation(x) & CausesSkinCancer(x)))", "all x y z.((OzoneDepletion(x) & UVRadiation(y) & SkinCancerous(z)) -> AllowsMore(x,y,z))", "all x y.((OzoneDepletion(x) & UVRadiation(y)) -> CausesSkinCancer(x,y))", "(all x.(OzoneDepletion(x) -> AllowsUltravioletRadiation(x)))", "all x.(OzoneDepletion(x) -> AllowsMoreUltravioletRadiation(x))", "all x.((OzoneDepletion(x) & MoreUVRadiation(x)) -> CausesSkinCancer(x))", "all x.(OzoneDepletion(x) -> (AcquiresMoreUltravioletRadiation(x) & CausesSkinCancer(x)))", "all x y.((OzoneDepletion(x) & UVRadiation(y)) -> (Allows(x,y) & CausesSkinCancer(x)))", "all x y.((OzoneDepletion(x) & UltravioletRadiation(y)) -> CausesSkinCancer(x,y))", "all x.((OzoneDepletion(x) & AllowsMoreUVRadiation(x)) -> SkinCancer(x))", "all x.(OzoneDepletion(x) -> AllowsMoreUVRadiation(x))", "all x.(OzoneDepletion(x) -> (AllowsUltravioletRadiation(x) & CausesSkinCancer(x)))", "All x.(OzoneDefletion(x) -> AllowsMoreUltravioletRadiation(x))"]}
{"id": "eqasc_validation_1351", "nl": "People living near Antartica now face an elevated skin cancer risk due to increased ultraviolet radiation", "fol": "", "prediction": ["all x y.((Person(x) & LivingNearAntartica(x)) -> (ElevatedSkinCancerRisk(x) & IncreasedUltravioletRadiation(y)))", "all x.((Person(x) & LivingNearAntartica(x)) -> ElevatedSkinCancerRiskDueToIncreasedUVRadiation(x))", "all x y.((Person(x) & LivingNearAtartica(x) & LivingNearAtartica(y)) -> ElevatedSkinCancerRiskDueToIncreasedUVRadiation(x,y))", "all x y z.((Person(x) & LivingNearAntartica(x) & Antartica(y) & UltravioletRadiation(z) & IncreasedSkinCancerRisk(x,z)) -> ElevatedSkinCancerRisk(x))", "all x y.((LivingNearAntartica(x) & LivingNearAntartica(y)) -> ElevatedSkinCancerRiskDueToIncreasedUVRadiation(x,y))", "all x.((Person(x) & LivingNearAtartica(x)) -> ElevatedSkinCancerRiskDueToIncreasedUVRadiation(x))", "all x y z.((Person(x) & LivingNearAtartica(x) & Antartica(y) & UltravioletRadiation(z) & IncreasedSkinCancerRisk(x,z)) -> ElevatedSkinCancerRisk(x))", "all x.((PeopleLivingNearAntartica(x) & IncreasedUltravioletRadiation(x)) -> ElevatedSkinCancerRisk(x))", "all x.((LivingNearAntartica(x) & IncreasedUltravioletRadiation(x)) -> ElevatedSkinCancerRisk(x))", "all x y.((Person(x) & LivingNearAntartica(x) & LivingNearAntartica(y)) -> ElevatedSkinCancerRiskDueToIncreasedUVRadiation(x,y))", "all x y z.((Person(x) & LivingNearAntartica(x) & LivingNearAntartica(y) & UltravioletRadiation(z) & IncreasedSkinCancerRisk(x,z)) -> ElevatedSkinCancerRisk(x))", "all x.(LivingNearAntartica(x) -> ElevatedSkinCancerRiskDueToIncreasedUVRadiation(x))", "all x.((Person(x) & LivingNearAntartica(x)) -> ElevatedSkinCancerRiskDueToIncreasedUltravioletRadiation(x))", "all x.((LivesNearAtartica(x) & ElevatedSkinCancerRisk(x) & IncreasedUltravioletRadiation(x)) -> LivingNearAtartica(x))", "all x y.((LivesNearAntartica(x) & LivingNearAntartica(y)) -> ElevatedSkinCancerRiskDueToIncreasedUVRadiation(x,y))", "All x y z.((LivesNearAntartica(x) & Person(y) & Antartica(z)) -> (ElevatedSkinCancerRisk(y,z) & IncreasedUltravioletRadiation(y,z)))"]}
{"id": "eqasc_validation_1352", "nl": "Ozone is a key atmospheric chemical and protective ultraviolet shield.", "fol": "", "prediction": ["all x.(Ozone(x) -> (AtmosphericChemical(x) & ProtectiveUVShield(x)))", "all x.(Ozone(x) -> (AtmosphericChemicalShield(x) & ProtectiveUVShield(x)))", "(KeyAtmosphericChemical(ozone) & ProtectiveUVShield(ozone))", "Ozone (Ozone(O) & AtmosphericChemical(O) & ProtectiveUVShield(O))", "(KeyAtmosphericChemicalShield(Ozone) & ProtectiveUVShield(Ozone))", "all x.((Ozone(x) & AtmosphericChemical(x) & ProtectiveUVShield(x)) -> KeyAtmosphericShield(x))", "all x y.((Ozone(x) & AtmosphericChemical(y) & ProtectiveUVShield(x,y)) -> KeyAtmosphericShield(x))", "all x.(Ozone(x) -> (AtmosphericChemical(x) & ProtectiveUVShield(x)))", "all x.(Ozone(x) -> (KeyAtmosphericChemical(x) & ProtectiveUVShield(x)))", "all x.(Ozone(x) -> (AtmosphericChemicalShield(x) & ProtectiveUVShield(x)))", "all x.(Ozone(x) -> (AtmosphericChemicalShield(x) & ProtectiveUVShield(x)))", "all x y.((Ozone(x) & AtmosphericChemical(y) & ProtectiveUVShield(x,y)) -> KeyAtmosphericShield(x))", "all x y.((Ozone(x) & AtmosphericChemical(y) & ProtectiveUVShield(x)) -> KeyAtmosphericShield(x,y))", "exists x.(Ozone(x) & AtmosphericChemical(x) & ProtectiveUVShield(x))", "all x.(Ozone(x) -> (AtmosphericChemicalShield(x) & ProtectiveUVShield(x)))", "all x.(Ozone(x) -> (AtmosphericChemical(x) & ProtectiveUVShield(x)))"]}
{"id": "eqasc_validation_1353", "nl": "the hole over antarctica reduces ultraviolet shielding", "fol": "", "prediction": ["all x y.((HoleOverAntarctica(x) & Antarctica(y)) -> ReducesUVShielding(x,y))", "all x.((HoleOverAntarctica(x) & ReducesUVShielding(x)) -> ReducesUVShielding(x))", "all x y z.((HoleOverAntarctica(x) & Antarctica(y) & UVShielding(z)) -> Reduces(x,y,z))", "(ReducesUVShielding(hole) -> OverAntarctica(hole))", "all x y z.((Hole(x) & Antarctica(y) & Antarctica(z)) -> ReducesUVShielding(x,y,z))", "all x y.((HoleOverAntarctica(x) & Antarctica(y)) -> ReducesUVShielding(x,y))", "all x.((HoleOverAntarctica(x) & ReducesUVShielding(x)) -> ReducesUVShielding(x))", "all x y.((Hole(x) & Antarctica(y)) -> ReducesUVShielding(x,y))", "all x.((HoleOverAntartica(x) & ReducesUVShielding(x)) -> ReducesUVShielding(x))", "(ReducesUVShielding(hole) -> OverAntarctica(hole))", "all x y z.((HoleOverAntarctica(x) & Antarctica(y) & UVShielding(z)) -> Reduces(x,y,z))", "all x y.((HoleOverAntarctica(x) & Antarctica(y)) -> ReducesUVShielding(x,y))", "all x.(HurtOverAntarcticaReducesUVShielding(x) -> ReducesUVShielding(x))", "all x.((HoleOverAntarctica(x) & ReducesUVShielding(x)) -> ReducesUVShielding(x))", "All x y.((HoleOverAntartica(x) & Antarctica(y)) -> ReducesUVShielding(x,y))", "all x.((HoleOverAntarctica(x) & ReducesUVShielding(x)) -> ReducesUVShielding(x))"]}
{"id": "eqasc_validation_1354", "nl": "An annual ozone hole over Antarctica has been observed since the 1980s.", "fol": "", "prediction": ["all x y.((AnnualOzoneHole(x) & Antarctica(y)) -> ObservedFromThe80s(x,y))", "all x.((AnnualOzoneHole(x) & OverAntarctica(x)) -> ObservedFromThe80s(x))", "(AnnualOzoneHoleOverAntarctica(x) -ObservedFromThe80s(x))", "all x y z.((AnnualOzoneHole(x) & Antarctica(y) & 1980s(z)) -> Observed(x,y,z))", "all x.(OzoneHole(x) -> ObservedAntarcticAntarctica(x))", "(AnnualOzoneHoleOverAntarctica(OzoneHole) ObservedFromThe80s(OzoneHole))", "all x y.((OzoneHole(x) & Antarctica(y)) -> ObservedFromThe80s(x,y))", "ObservedAnnualOzoneHoleOverAntarctica(OzoneHole,Antarctica) -> 1980s.", "all x y.((AnnualOzoneHole(x) & Antarctica(y)) -> ObservedFromThe80s(x))", "all x.((OzoneHole(x) & OverAntarctica(x)) -> ObservedInOctaneousTime(x))", "all x.(AnnualOzoneHole(x) -> OverAntarctica(x))", "exists x.(OzoneHole(x) & OverAntarctica(x) & OverAntarctica(x))", "ObservedAnnualOzoneHoleOverAntarctica(x) -> 1980s(x))", "(AnnualOzoneHoleOverAntarctica(x) -ObservedFromThe80s(x))", "(AnnualOzoneHoleOverAntarctica(o) & ObservedFromThe80s(o))", "all x y.((AnnualOzoneHole(x) & Antarctica(y)) -> ObservedFromThe80s(x,y))"]}
{"id": "eqasc_validation_1355", "nl": "Loss of ozone has created a hole over the south pole", "fol": "", "prediction": ["all x y.((LossOzone(x) & SouthPole(y)) -> CreatedHoleOver(x,y))", "all x y z.((LossOzone(x) & SouthPole(y) & Hole(z)) -> CreatedOver(x,y,z))", "all x.(LossOzone(x) -> CreatedHoleOverSouthPole(x))", "-LossOzoneCreatedHoleOverSouthPole(x))", "(LossOzone(ozone) & SouthPole(s) & CreatedHoleOver(ozone,southpole))", "all x y.((LossOzone(x) & SouthPole(y)) -> CreatedHoleOverSouthPole(x,y))", "(LossOzone(l) & SouthPole(s) & CreatedHoleOver(l,s,s))", "all x.((LossOzone(x) & SouthPole(x)) -> CreatedHoleOver(x,SouthPole))", "all x y z.((LossOzone(x) & SouthPole(y) & HoleOver(z)) -> CreatedOver(x,y,z))", "(LossOzoneCreatedHoleOverSouthPole(Ozone,SouthPole))", "all x.(LossOzone(x) -> CreatedHoleOverSouthPole(x))", "all x y.((LossOzone(x) & SouthPole(y)) -> CreatedHoleOver(x,y))", "all x y z.((LossOzone(x) & SouthPole(y) & HoleOver(z)) -> CreatedOver(x,y,z))", "(LossOzoneCreatedHoleOverSouthPole(ozone,southpole))", "all x y.((LossOzone(x) & SouthPole(y)) -> CreatedHoleOverSouthPole(x,y))", "all x.(LossOzone(x) -> CreatedHoleOverSouthPole(x))"]}
{"id": "eqasc_validation_1356", "nl": "Ozone is triatomic oxygen, O3.", "fol": "", "prediction": ["all x.(Ozone(x) -> (TriatomicOxygen(x) & O3.(Ozone))))", "Ozone (O3) -> TriatomicOxygen(O3))", "all x.(Ozone(x) -> (TriatomicOxygen(x) & O3(x)))", "(TriatomicOxygen(Ozone) & O3.(Ozone) -> TriatomicOxygen(O3)))", "Ozone (O3) -> TriatomicOxygen(O3))", "Ozone(o) is triatomicOxygen(o) & O3.", "(TriatomicOxygenO3(Ozone) & TriatomicOxygenO3))", "all x y.((Ozone(x) & TriatomicOxygen(y)) -> (O3(x,y) & TriatomicOxygen(y)))", "all x.(Ozone(x) -> (TriatomicOxygen(x) & O3.(Ozone(x))))", "Ozone (O2) -> TriatomicOxygen(O3))", "all x.(Ozone(x) -> (TriatomicOxygen(x) & O3.(Ozone(x))))", "(TriatomicOxygenO3(ozone) & TriatomicOxygenO3))", "all x.(Ozone(x) -> (TriatomicOxygen(x) & O3(x)))", "all x.(Ozone(x) -> (TriatomicOxygen(x) & O3.(Ozone(x))))", "All x.(Ozone(x) -> (TriatomicOxygen(x) & O3(x)))", "all x.(Ozone(x) -> (TriatomicOxygen(x) & O3(x)))"]}
{"id": "eqasc_validation_1357", "nl": "Loss of triatomic oxygen has created a triatomic oxygen hole over Antarctica.", "fol": "", "prediction": ["all x y.((LossOfTriatomicOxygen(x) & Antarctica(y)) -> CreatedTriatomicOxygenHole(x,y))", "all x.(LossOfTriatomicOxygen(x) -> CreatedTriatomicOxygenHoleOverAntarctica(x))", "all x y z.((LossOfTriatomicOxygen(x) & TriatomicOxygenHole(y) & Antarctica(z)) -> CreatedOver(x,y,z))", "(LossOfTriatomicOxygen(LossOfTriatomicOxygen) & CreatedTriatomicOxygenHole(LossOfAntarctica))", "all x.((LossOfTriatomicOxygen(x) & TriatomicOxygenHole(x)) -> OverAntarctica(x))", "(LossOfTriatomicOxygen(LossOfTriatomicOxygen) CreatedTriatomicOxygenHole(LossOfAntarctica(LossOfAntarctica(LossOfAntarctica(LossOfAntarctica(LossOfAntarctica(LossOfAntarctica(LossO", "all x y.((LossOfTriatomicOxygen(x) & Antarctica(y)) -> CreatesTriatomicOxygenHole(x,y))", "all x y z.((LossOfTriatomicOxygen(x) & TriatomicOxygen(y) & Antarctica(z)) -> CreatedTriatomicOxygenHole(x,y,z))", "all x.(LossOfTriatomicOxygen(x) -> CreatesTriatomicOxygenHole(x))", "(LossOfTriatomicOxygen(LossOfTriatomicOxygen) -> CreatesTriatomicOxygenHole(LossOfAntarctica))", "all x.((LossOfTriatomicOxygen(x) & TriatomicOxygenHole(x)) -> CreatedOverAntarctica(x))", "(LossOfTriatomicOxygen(l) & CreatedTriatomicOxygenHole(l))", "all x.(LossOfTriatomicOxygen(x) -> CreatedTriatomicOxygenHoleOverAntarctica(x))", "all x y.((LossOfTriatomicOxygen(x) & Antarctica(y)) -> CreatedTriatomicOxygenHole(x,y))", "all x y.((LossOfTriatomicOxygen(x) & Antarctica(y)) -> CreatesTriatomicOxygenHole(x,y))", "all x.(LossOfTriatomicOxygen(x) -> CreatesTriatomicOxygenHole(x))"]}
{"id": "eqasc_validation_1358", "nl": "high mountains with well-rounded peaks can be formed by collision of crustal plates", "fol": "", "prediction": ["all x.((HighMountain(x) & WellRoundedPeaks(x)) -> CollisionOfCrustalPlates(x))", "all x y.((HighMountain(x) & WellRoundedPeak(x) & CrasstalPlate(y)) -> FormedByCollision(x,y))", "all x y z.((HighMountain(x) & WellRoundedPeak(y) & CrasstalPlate(z) & Collision(x,z)) -> FormedBy(x,y,z))", "all x y.((HighMountain(x) & WellRoundedPeak(y)) -> (FormedByCrusalPlateCollusion(x,y) & WellRoundedPeak(x,y)))", "all x.((HighMountain(x) & WellRoundedPeaks(x)) -> FormedByCrusalPlateCollusion(x))", "all x y z.((HighMountain(x) & WellRoundedPeak(y) & CrustalPlate(z) & Collision(x,z)) -> FormedBy(x,y,z))", "all x y.((HighMountain(x) & WellRoundedPeak(x)) -> (FormedByCrisisalPlateCollision(y) & WellRoundedPeak(x)))", "(all x.((HighMountain(x) & WellRoundedPeaks(x)) -> CollisionOfCrustalPlates(x)) -> FormedByCrostalPlates(x))", "all x.((HighMountain(x) & WellRoundedPeaks(x) & CollisionOfCrustalPlates(x)) -> FormedByCrostalPlates(x))", "all x.((HighMountain(x) & WellRoundedPeaks(x)) -> CollisionOfCrustalPlates(x))", "all x y z.((HighMountain(x) & WellRoundedPeak(y) & CrastalPlate(z) & CollisionOf(x,z)) -> FormedBy(x,y,z))", "all x y.((HighMountain(x) & WellRoundedPeaks(x) & CrustalPlateCollusion(y)) -> FormedBy(x,y))", "all x.((HighMountains(x) & WellRoundedPeaks(x)) -> CollisionOfCrustalPlates(x))", "all x.((HighMountain(x) & WellRoundedPeak(x)) -> FormedByCrustalPlateCollusion(x))", "all x y.((HighMountain(x) & WellRoundedPeaks(x) & CrasstalPlate(y)) -> FormedByCollision(x,y))", "all x.((HighMountain(x) & WellRoundedPeaks(x)) -> (FormedByCrusalPlateCollusion(x) & WellRoundedPeaks(x)))"]}
{"id": "eqasc_validation_1359", "nl": "When plates collide, the earthquake is the result from the collision.", "fol": "", "prediction": ["all x.((PlatesCollide(x) & Earthquake(x)) -> CollisionResult(x))", "all x y.((Plate(x) & Plate(y) & Collide(x,y)) -> EarthquakeResult(x,y))", "all x.((PlatesCollide(x) & Earthquake(x)) -> CollisionResult(x))", "all x y.((Plate(x) & Plate(y) & Collide(x,y)) -> EarthquakeResult(x))", "all x y z.((Plate(x) & Plate(y) & Earthquake(z)) -> Collide(x,y,z))", "all x y.((PlatesCollide(x) & Earthquake(y)) -> CollideResult(x,y))", "all x.((Plate(x) & Collide(x)) -> EarthquakeResult(x))", "all x.((PlatesCollide(x) & Earthquake(x)) -> CollideResult(x))", "all x y.((Plate(x) & Plate(y) & Collide(x,y)) -> Earthquake(x))", "all x.(PlateCollide(x) -> EarthquakeResult(x))", "all x.((PlateCollide(x) & Earthquake(x)) -> CollideResult(x))", "all x.(Collide(x) -> EarthquakeResult(x))", "all x y z.((Plate(x) & Plate(y) & Earthquake(z)) -> Collide(x,y,z))", "all x y.((Plate(x) & PlateCollide(y)) -> EarthquakeResult(x,y))", "exists x.(PlateCollide(x) & Earthquake(x) & Collide(x))", "all x.(PlateCollide(x) -> EarthquakeResult(x))"]}
{"id": "eqasc_validation_1360", "nl": "earthquakes can result in formation of high mountains with well-rounded peaks", "fol": "", "prediction": ["all x y.((Earthquake(x) & HighMountain(y) & WellRoundedPeak(y)) -> CanResultInFormation(x,y))", "all x y z.((Earthquake(x) & HighMountain(y) & WellRoundedPeak(z)) -> CanResultInFormation(x,y,z))", "all x.(Earthquake(x) -> (HighMountains(x) & WellRoundedPeaks(x)))", "all x y.((Earthquake(x) & HighMountain(y) & WellRoundedPeaks(y)) -> CanResultInFormation(x,y))", "all x.(Earthquake(x) -> (HighMountain(x) & WellRoundedPeaks(x)))", "(all x y.((Earthquake(x) & HighMountain(y) & WellRoundedPeaks(y)) -> Formation(x,y)))", "all x y z.((Earthquake(x) & HighMountain(y) & WellRoundedPeak(z)) -> Forms(x,y,z))", "all x y z.(Earthquake(x) -> (HighMountains(y) & WellRoundedPeaks(z) & FormationOf(x,y,z)))", "all x.(Earthquake(x) -> (HighMountains(x) & WellRoundedPeaks(x)))", "all x y.((Earthquake(x) & HighMountain(y) & WellRoundedPeaks(y)) -> Forms(x,y))", "(all x.(Earthquake(x) -> HighMountain(x)) & wellRoundedPeaks(x))", "all x.(Earthquake(x) -> (FormationOfHighMountains(x) & WellRoundedPeaks(x)))", "all x y z.((Earthquake(x) & HighMountain(y) & WellRoundedPeak(z)) -> FormationOf(x,y,z))", "all x.(Earthquake(x) -> (HighMountain(x) & WellRoundedPeaks(x)))", "all x.(Earthquake(x) -> (ResultsInHighMountains(x) & WellRoundedPeaks(x)))", "all x y.((Earthquake(x) & HighMountain(y) & WellRoundedPeak(y)) -> Forms(x,y))"]}
{"id": "eqasc_validation_1361", "nl": "Many earthquakes occur when the earth's crustal plates grind and shift along one another.", "fol": "", "prediction": ["all x y.((Earthquake(x) & EarthsCrustalPlates(y) & GrindAndShiftAlong(y,x)) -> Occurs(x))", "all x.((Earthquake(x) & EarthsCrustalPlatesGrindAndShiftAlongOneAnother(x)) -> Occurs(x))", "all x.(Earthquake(x) -> (EarthsCrustalPlatesGrindAndShiftAlongOneAnother(x)))", "all x y z.((Earthquake(x) & EarthsCrustalPlates(y) & EarthsCrustalPlates(z) & GrindAndShiftAlong(y,z)) -> Occurs(x))", "many earthquakes occur when earth's crustalPlatesGrindAndShiftAlongOneAnother(x))", "all x.(Earthquake(x) -> (EarthsCrustalPlatesGrind(x) & Shift(x)))", "all x y.((Earthquake(x) & EarthsCrustalPlates(y) & GrindAndShift(y,x)) -> Occurs(x))", "(exists x.(Earthquake(x) & EarthsCrustalPlatesGrindAndShiftAlong(x)))", "all x y.((Earthquake(x) & Earth'sCrustalPlates(y) & GrindAndShiftAlong(y,x)) -> Occurs(x))", "exists x.(Earthquake(x) & EarthsCrustalPlatesGrindAndShiftAlong(x))", "all x y z.((Earthquake(x) & EarthsCrustalPlates(y) & EarthsCrustalPlates(z) & GrindAndShiftAlong(x,y,z)) -> Occurs(x))", "exists x.(Earthquake(x) & EarthsCrustalPlatesGrindAndShiftAlongOneAnother(x))", "all x y z.((Earthquake(x) & EarthsCrustalPlates(y) & EarthsCrustalPlates(z) & GrindAndShift(y,z)) -> Occurs(x))", "all x y.((Earthquake(x) & EarthsCrustalPlates(y) & GrindAndShiftAlong(y,x)) -> Occurs(x,y))", "exists x.(Earthquake(x) & EarthsCrustalPlatesGrindAndShiftAlong(x))", "exists x.(Earthquake(x) & EarthsCrustalPlatesGrindAndShift(x))"]}
{"id": "eqasc_validation_1362", "nl": "earthquakes can occur in areas with high mountains with well-rounded peaks ", "fol": "", "prediction": ["all x y.((Earthquake(x) & Area(y) & HighMountains(y) & WellRoundedPeaks(y)) -> CanOccur(x,y))", "all x y z.((Earthquake(x) & Area(y) & HighMountain(z) & WellRoundedPeak(z)) -> CanOccur(x,y,z))", "all x.(Earthquake(x) -> (HighMountains(x) & WellRoundedPeaks(x)))", "all x y.((Earthquake(x) & Area(y) & HighMountain(y) & WellRoundedPeak(y)) -> CanOccur(x,y))", "all x.(Earthquake(x) -> (HighMountains(x) & WellRoundedPeaks(x)))", "(all x.(Earthquake(x) -> HighMountains(x)) & all y.(WellRoundedPeak(y) -> CanOccur(x,y)))", "all x.((Earthquake(x) & HighMountains(x) & WellRoundedPeaks(x)) -> CanOccurInAreasWithHighMountains(x))", "all x y z.((Earthquake(x) & Area(y) & HighMountain(z) & WellRoundedPeaks(y)) -> CanOccur(x,y,z))", "(all x y.((Earthquake(x) & Area(y) & HighMountains(y) & WellRoundedPeaks(y)) -> CanOccurIn(x,y)))", "all x y z.(Earthquake(x) -> (HighMountains(y) & WellRoundedPeaks(z) & InArea(x,y,z)))", "all x y z.((Earthquake(x) & Area(y) & HighMountain(z) & WellRoundedPeaks(y,z)) -> CanOccurIn(x,y,z))", "all x y.((Earthquake(x) & Area(y) & HighMountains(y) & WellRoundedPeaks(y)) -> CanOccurIn(x,y))", "(all x.(Earthquake(x) -> HighMountain(x) & WellRoundedPeaks(x)))", "all x y.((Earthquake(x) & Area(y) & HighMountain(y) & WellRoundedPeak(y)) -> CanOccur(x,y))", "exists x.(Earthquake(x) & HighMountains(x) & WellRoundedPeaks(x))", "all x.(Earthquake(x) -> (HighMountains(x) & WellRoundedPeaks(x)))"]}
{"id": "eqasc_validation_1363", "nl": "Plate tectonics is the gradual movement of crustal plates on the surface of the earth.", "fol": "", "prediction": ["all x.(PlateTectonics(x) -> (MovementOfCrustalPlates(x) & OnSurfaceOfEarth(x)))", "all x y.((PlateTectonics(x) & EarthSurface(y)) -> (MovementOfCrustalPlates(x,y) & OnSurface(x,y)))", "all x y z.((PlateTectonics(x) & CrustalPlate(y) & EarthSurface(z)) -> MovesOn(x,y,z))", "all x.(PlateTectonics(x) -> (GraduateMovementOfCrustalPlates(x) & OnSurfaceOfEarth(x)))", "(PlasticTectonics(Plate) -> MovesCrustalPlatesOnSurfaceOfEarth(Plates))", "all x y.((PlateTectonics(x) & CrustalPlate(y)) -> MovesOnSurfaceOfEarth(x,y))", "all x.(PlateTectonics(x) -> (MovementOfCrustalPlates(x) & OnSurfaceOfEarth(x)))", "all x y z.((PlateTectonics(x) & CrasstalPlate(y) & EarthSurface(z)) -> MovesOnSurface(x,y,z))", "(PieceTectonics(Plate) -> MovesCrustalPlatesOnSurface(Plate))", "all x.(PlateTectonics(x) -> (MovementOfCrustalPlates(x) & OnSurfaceOfEarth(x)))", "all x y.((PlateTectonics(x) & EarthSurface(y)) -> (GraduateMovementOfCrustalPlates(x,y) & OnSurface(x,y)))", "all x.(PlateTectonics(x) -> (Movement(x) & CrustalPlates(x) & OnSurfaceOfEarth(x)))", "All x y.((PlateTectonics(x) & CrasstalPlate(y)) -> MovesOnSurfaceOfEarth(x,y))", "all x.(PlateTectonics(x) -> (GraduateMovementOfCrustalPlates(x) & OnSurfaceOfEarth(x)))", "all x.(PlateTectonics(x) -> (MovementOfCrustalPlates(x) & OnSurfaceOfEarth(x)))", "all x.(PlateTectonics(x) -> (GraduateMovementOfCrustalPlates(x) & OnEarthSurface(x)))"]}
{"id": "eqasc_validation_1364", "nl": "Plate tectonics can form high mountains with well-rounded peaks.", "fol": "", "prediction": ["all x.(PlateTectonics(x) -> (FormsHighMountains(x) & WellRoundedPeaks(x)))", "all x y.((PlateTectonics(x) & HighMountain(y) & WellRoundedPeak(y)) -> Forms(x,y))", "all x.(PlateTectonics(x) -> (FormsHighMountains(x) & WellRoundedPeaks(x)))", "all x y.((PlateTectonics(x) & HighMountain(y) & WellRoundedPeak(y)) -> CanForm(x,y))", "all x.(PlateTectonic(x) -> (FormsHighMountains(x) & WellRoundedPeaks(x)))", "all x.(PlateTectonics(x) -> (FormsHighMountains(x) & WellRoundedPeaks(x)))", "all x y z.((PlateTectonics(x) & HighMountain(y) & WellRoundedPeak(z)) -> CanForm(x,y,z))", "all x y.((PlateTectonics(x) & HighMountain(y) & WellRoundedPeaks(y)) -> Forms(x,y))", "all x y z.((PlateTectonics(x) & HighMountain(y) & WellRoundedPeak(z) & Forms(x,y,z)) -> Forms(x,y,z))", "all x.(PlateTectonics(x) -> (FormsHighMountains(x) & WellRoundedPeaks(x)))", "all x y.((PlateTectonics(x) & HighMountain(y) & WellRoundedPeak(y)) -> Forms(x,y))", "all x.(PlateTectonic(x) -> (FormsHighMountains(x) & WellRoundedPeaks(x)))", "all x y.((PlateTectonics(x) & HighMountain(y) & WellRoundedPeaks(x,y)) -> Forms(x,y))", "all x.(PlateTectonics(x) -> (FormsHighMountains(x) & WellRoundedPeaks(x)))", "all x.(PlateTectonics(x) -> (FormsHighMountains(x) & FormsWellRoundedPeaks(x)))", "all x.(PlateTectonic(x) -> (FormsHighMountains(x) & WellRoundedPeaks(x)))"]}
{"id": "eqasc_validation_1365", "nl": "Plate Tectonics is the study of crustal plates and their boundaries.", "fol": "", "prediction": ["all x.(PlateTectonics(x) -> (StudiesCrustalPlates(x) & StudiesCrustalPlateBoundaries(x)))", "all x.(PlateTectonics(x) -> (StudiesCrustalPlates(x) & StudiesBoundaries(x)))", "(CrustalPlates(Tectonics) & CrustalPlatesBoundaries(Tectonics))", "(StudyOfCrustalPlates(Plates) & StudiesBoundaries(Plates))", "all x y.((PlateTectonics(x) & CrustalPlate(y)) -> StudiesBoundaries(x,y))", "all x y z.((PlateTectonics(x) & CrustalPlate(y) & Boundary(z)) -> Studies(x,y,z))", "(StudyOfCrustalPlates(Plate) & StudiesBoundaries(Plates,Plates))", "all x y.((PlateTectonics(x) & CrustalPlate(y) & Boundaries(y)) -> Studies(x,y))", "all x.(PlateTectonics(x) -> (StudiesCrustalPlates(x) & StudiesCrustalPlateBoundaries(x)))", "all x.(PlateTectonics(x) -> (StudiesCrustalPlates(x) & StudiesCrustalPlateBoundaries(x)))", "all x y.((PlateTectonics(x) & CrustalPlate(y) & Boundaries(x,y)) -> Studies(x,y))", "All x.(PlateTectonics(x) -> (StudyOfCrustalPlates(x) & StudiesBoundaries(x)))", "all x.(PlateTectonics(x) -> (StudiesCrustalPlates(x) & StudiesCrustalPlateBoundaries(x)))", "all x y.((PlateTectonics(x) & CrustalPlate(y)) -> (Studies(x,y) & StudiesBoundaries(x,y)))", "All x.(PlateTectonics(x) -> (StudiesCrustalPlates(x) & StudiesBoundaries(x)))", "All x.(PlateTectonics(x) -> (StudiesCrustalPlates(x) & StudiesBoundaries(x)))"]}
{"id": "eqasc_validation_1366", "nl": "The formation of high mountains can be explained by the study of plate tectonics.", "fol": "", "prediction": ["all x.((HighMountain(x) & PlateTectonics(x)) -> CanExplainFormation(x))", "all x y.((HighMountain(x) & PlateTectonics(y)) -> CanExplainFormation(x,y))", "all x.(HighMountain(x) -> (StudiesPlateTectonics(x) & ExplainsFormation(x)))", "all x y z.((HighMountain(x) & PlateTectonics(y) & PlateTectonics(z)) -> CanExplainFormation(x,y,z))", "all x.((HighMountain(x) & PlateTectonics(x)) -> ExplainedBy(x,y))", "all x y.((HighMountain(x) & PlateTectonics(y)) -> CanExplainFormation(x,y))", "all x.(HighMountain(x) -> (StudyOfPlateTectonics(x) & ExplainsFormation(x)))", "all x y.((HighMountain(x) & PlateTectonics(y)) -> CanBeExplainedBy(x,y))", "all x y z.((HighMountain(x) & PlateTectonics(y) & PlateTectonics(z)) -> CanExplain(x,y,z))", "all x.((HighMountain(x) & PlateTectonics(x)) -> CanExplainFormation(x))", "all x.(HighMountain(x) -> (StudiesPlateTectonics(x) & Explains(x)))", "All x.(HighMountain(x) -> CanBeExplainedByPlateTectonics(x))", "all x y.((HighMountain(x) & PlateTectonics(y)) -> ExplanedBy(x,y))", "all x.((HighMountain(x) & PlateTectonics(x)) -> ExplainsFormation(x))", "(all x.(HighMountain(x) -> PlateTectonics(x)))", "all x y.((HighMountain(x) & PlateTectonics(y)) -> CanExplainFormation(x,y))"]}
{"id": "eqasc_validation_1367", "nl": "Another phenomena associated with collision and subduction of the plates is earthquakes .", "fol": "", "prediction": ["all x.((Phenomenon(x) & Collision(x) & Subduction(x)) -> Earthquakes(x))", "all x y.((Phenomenon(x) & Collision(y) & Subduction(y)) -> Earthquakes(x))", "(exists x.(Phenomenon(x) & Collision(x) & Subduction(x)) & Earthquakes(x))", "all x y z.((Phenomenon(x) & Collision(y) & Subduction(z) & Plate(w) & AssociatedWith(x,y,z)) -> Earthquakes(x))", "(exists x.(Collision(x) & Subduction(x)) & Plate(x) & Earthquakes(x))", "all x.((Phenomenon(x) & Collision(x) & Subduction(x)) -> Earthquakes(x))", "all x.((Collision(x) & Subduction(x)) -> Earthquakes(x))", "all x y.((Phenomenon(x) & Collision(y) & Subduction(y)) -> Earthquakes(x))", "exists x y z.(Phenomenon(x) & Collision(y) & Subduction(z) & Plate(w) & AssociatedWith(x,y,z,w)) -> Earthquakes(x))", "all x y.((Phenomenon(x) & Plate(y) & Collision(x,y) & Subduction(x,y)) -> Earthquakes(x))", "(all x.(Collision(x) & Subduction(x)) -> Earthquakes(x))", "all x.((Phenomenon(x) & Collision(x) & Subduction(x)) -> Earthquakes(x))", "exists x.(Earthquake(x) & Collision(x) & Subduction(x))", "all x.((Phenomenon(x) & Collision(x) & SubductionOfPlates(x)) -> Earthquakes(x))", "all x.(Earthquake(x) -> (Collision(x) & Subduction(x) & Plates(x)))", "(all x.(Collision(x) & Subduction(x)) -> Earthquakes(x))"]}
{"id": "eqasc_validation_1368", "nl": "earthquakes form in the same way as high mountains", "fol": "", "prediction": ["all x y.((Earthquake(x) & HighMountain(y)) -> FormsInSameManner(x,y))", "all x y z.((Earthquake(x) & HighMountain(y) & HighMountain(z)) -> FormsInSameManner(x,y,z))", "all x.(Earthquake(x) -> (FormsInSameMannerAsHighMountains(x)))", "all x y.((Earthquake(x) & HighMountain(y)) -> FormsInTheSameManner(x,y))", "(all x y.(Earthquake(x) -> FormsInSameAnalyze(x,y))) & (HighMountain(y) -> FormsInSameAnalyze(x,y)))", "(all x.(Earthquake(x) -> FormsInSameManner(x,HighMountains)))", "all x.(Earthquake(x) -> (FormsInSameAway(x,HighMountains) & FormsInSameAway(x,HighMountains)))", "all x y z.((Earthquake(x) & HighMountain(y) & HighMountain(z)) -> FormsInSameManner(x,y,z))", "all x y z.((Earthquake(x) & HighMountain(y) & HighMountain(z)) -> (FormsInSameManner(x,y,z) & FormsInSameManner(x,y)))", "(all x y.((Earthquake(x) & HighMountain(y)) -> FormsInSameManner(x,y)))", "all x y.((Earthquake(x) & HighMountain(y)) -> FormsInSameManner(x,y))", "all x.(Earthquake(x) -> (FormsInTheSameManualAsHighMountains(x)))", "all x.(Earthquake(x) -> FormsInSameMannerAsHighMountain(x))", "all x y z.((Earthquake(x) & HighMountain(y) & HighMountain(z)) -> FormsInTheSameManner(x,y,z))", "all x y.((Earthquake(x) & HighMountain(y)) -> FormsInTheSameManual(x,y))", "all x y.((Earthquake(x) & HighMountain(y)) -> FormsInTheSameManner(x,y))"]}
{"id": "eqasc_validation_1369", "nl": "The Himalayas can be formed by collision of crustal plates", "fol": "", "prediction": ["all x.(Himalaya(x) -> (FormedByCrisisalPlateCollusion(x) & CrustalPlateCollusion(x)))", "all x y.((Himalayas(x) & CrustalPlate(y)) -> FormedByCollision(x,y))", "all x y z.((Himalayas(x) & CrustalPlate(y) & CrustalPlate(z)) -> FormedByCollision(x,y,z))", "(FormedByCrisisalPlateCollusion(Himalayas) & CrustalPlateCollusion(Himalayas))", "all x.(Himachala(x) -> (FormedByCrucialPlateCollision(x) & CrustalPlatesCollision(x)))", "all x.(Himalaya(x) -> (FormedByCrucialPlateCollision(x) & CrastalPlateCollision(x)))", "all x y.((Himalaya(x) & CrustalPlate(y)) -> FormedByCollision(x,y))", "all x y z.((Himalaya(x) & CrustalPlate(y) & CrustalPlate(z) & Collision(x,y,z)) -> FormedBy(x,y,z))", "(FormedByCrucialPlateCollision(Himachalas) & CrustalPlateCollision(Himachalas))", "all x y.((Himachala(x) & CrustalPlate(y)) -> FormedByCollision(x,y))", "All x.(Hemalaya(x) -> (FormedByCrustalPlateCollision(x) & CrustalPlateCollision(x)))", "all x.(Himalayas(x) -> (FormedByCrucialPlateCollision(x) & CrustalPlateCrust(x)))", "All x.(Himachala(x) -> (FormedByCrisisalPlateCollision(x) & CrustalPlateCollision(x)))", "all x y.((Himachala(x) & CrastalPlate(y)) -> FormedByCollision(x,y))", "All x.(Hemalayas(x) -> CollisionOfCrustalPlates(x))", "All x.(Himalayas(x) -> FormedByCrisisalPlates(x))"]}
{"id": "eqasc_validation_1370", "nl": "On Earth, volcanoes are found mainly along the colliding boundaries of great crustal plates.", "fol": "", "prediction": ["all x.(Volcano(x) -> (OnEarth(x) & CollidingBoundariesOfGrandeCrustalPlates(x)))", "all x y.((Volcano(x) & Earth(y)) -> FoundAlongCollidingBoundariesOfGrantedCrustalPlates(x,y))", "all x y z.((Earth(x) & Volcano(y) & GreatCrustalPlate(z)) -> FoundAlongBoundaries(y,z))", "all x.(Volcano(x) -> (OnEarth(x) & CollidingBoundaries(x) & GreatCrustalPlates(x)))", "all x y.((Volcano(x) & Earth(y)) -> CollidingBoundaries(x,y))", "all x y.((Earth(x) & Volcano(y)) -> FoundAlongCollidingBoundariesOfGrantedCrustalPlates(y))", "(all x.(Volcano(x) -> FoundAlongCollidingBoundaries(x)))", "all x y z.((Volcano(x) & Earth(y) & GreatCrustalPlate(z)) -> FoundAlongBoundaries(x,y,z))", "all x.(Volcano(x) -> exists y.(CrustalPlate(y) & CollidingBoundaries(x,y))))", "all x.((Volcano(x) & OnEarth(x)) -> CollidingBoundariesOfGrandeCrustalPlates(x))", "all x.((Volcano(x) & FoundOnEarth(x)) -> CollidingBoundariesOfGrandeCrustalPlates(x))", "(all x.(Volcano(x) -> FoundAlongCollidingBoundariesOfGrandeCrustalPlates(x)))", "exists x.(Volcano(x) & OnEarth(x) & CollidingBoundariesOfGrandeCrustalPlates(x))", "all x y.((Volcano(x) & Earth(y)) -> FoundAlongCollidingBoundaries(x,y))", "all x.(Volcano(x) -> (OnEarth(x) & CollidingBoundariesOfGrantedCrustalPlates(x)))", "all x.(Volcano(x) -> exists y.(CrustalPlate(y) & CollidingBoundaries(x,y)))"]}
{"id": "eqasc_validation_1371", "nl": "Volcanoes are likely to be found near high mountains.", "fol": "", "prediction": ["all x.(Volcano(x) -> (LikelyToBeFoundNearHighMountains(x)))", "all x.(Volcano(x) -> FoundNearHighMountains(x))", "all x y.((Volcano(x) & HighMountain(y)) -> LikelyFindedNear(x,y))", "(all x.(Volcano(x) -> FoundNearHighMountains(x)))", "all x.(Volcano(x) -> NearHighMountains(x))", "all x y z.((Volcano(x) & HighMountain(y) & HighMountain(z)) -> FoundNear(x,y,z))", "all x y.((Volcano(x) & HighMountain(y)) -> FoundNear(x,y))", "all x.(Volcano(x) -> (LikelyToBeFoundNearHighMountains(x)))", "all x y.((Volcano(x) & HighMountain(y)) -> LikelyFoundNear(x,y))", "all x.(Volcano(x) -> FoundNearHighMountains(x))", "all x.(Volcano(x) -> LikelyToBeFoundNearHighMountains(x))", "all x.(Volcano(x) -> (LikelyToBeFoundNearHighMountains(x)))", "all x y.((Volcano(x) & HighMountain(y)) -> ProbablyFinding(x,y))", "all x.(Volcano(x) -> NearHighMountains(x))", "all x.(Volcano(x) -> ProbablyFoundNearHighMountains(x))", "all x y.((Volcano(x) & HighMountain(y)) -> FoundNear(x,y))"]}
{"id": "eqasc_validation_1372", "nl": "high mountains with well-rounded peaks can be formed by collision of something studied by plate tectonics", "fol": "", "prediction": ["all x y.((HighMountain(x) & WellRoundedPeaks(x) & PlateTectonics(y)) -> FormedByCollusion(x,y))", "all x y z.((HighMountain(x) & WellRoundedPeak(y) & PlateTectonics(z) & Collision(x,z)) -> FormedBy(x,y,z))", "all x.((HighMountain(x) & WellRoundedPeaks(x)) -> Collision(x))", "all x y.((HighMountain(x) & WellRoundedPeak(x) & PlateTectonics(y) & Collision(x,y)) -> FormedBy(x,y))", "all x y z.((HighMountain(x) & WellRoundedPeaks(y) & PlateTectonics(z) & Collision(x,z)) -> FormedBy(x,y,z))", "all x.((HighMountain(x) & WellRoundedPeaks(x)) -> (FormedByCollusion(x) & StudiedByPlateTectonics(x)))", "all x y.((HighMountain(x) & WellRoundedPeaks(x) & PlateTectonics(y) & Collision(x,y)) -> FormedBy(x,y))", "all x y z.((HighMountain(x) & WellRoundedPeak(y) & PlateTectonics(z) & Collision(x,y,z)) -> FormedBy(x,y,z))", "all x y.((HighMountain(x) & WellRoundedPeak(x)) -> (FormedByCollusion(x,y) & StudiedByPlateTectonics(y)))", "all x.((HighMountain(x) & WellRoundedPeaks(x)) -> Collision(x))", "all x.((HighMountain(x) & WellRoundedPeaks(x) & Collision(x) & PlateTectonics(x)) -> FormedByCollection(x))", "all x.((HighMountain(x) & WellRoundedPeaks(x)) -> FormedByCollusionOfPlateTectonics(x))", "all x y z.((HighMountain(x) & WellRoundedPeaks(y) & PlateTectonics(z) & Collision(x,z)) -> FormedBy(x,y,z))", "all x y.((HighMountain(x) & WellRoundedPeaks(x) & PlateTectonics(y) & Collision(x,y)) -> FormedBy(x,y))", "all x.((HighMountains(x) & WellRoundedPeaks(x)) -> Collision(x))", "all x.((HighMountain(x) & WellRoundedPeaks(x) & Collision(x) & PlateTectonics(x)) -> FormedByCollection(x))"]}
{"id": "eqasc_validation_1373", "nl": "high mountains with well-rounded peaks can be formed by collision of plate tectonics", "fol": "", "prediction": ["all x y.((HighMountain(x) & WellRoundedPeak(x) & PlateTectonics(y) & CollisionOfPlateTectonics(x,y)) -> FormedBy(x,y))", "all x.((HighMountain(x) & WellRoundedPeaks(x)) -> CollisionOfPlateTectonics(x))", "all x y z.((HighMountain(x) & WellRoundedPeak(y) & PlateTectonics(z) & Collision(x,z)) -> FormedBy(x,y,z))", "all x y.((HighMountain(x) & WellRoundedPeaks(x) & PlateTectonics(y) & CollisionOfPlateTectonics(x,y)) -> FormedBy(x,y))", "all x.((HighMountain(x) & WellRoundedPeaks(x)) -> CollisionOfPlateTectonics(x))", "all x y z.((HighMountain(x) & WellRoundedPeak(y) & PlateTectonics(z) & CollisionOf(x,z)) -> FormedBy(x,y,z))", "all x y.((HighMountain(x) & WellRoundedPeak(x)) -> (FormedByCollusionOfPlateTectonics(y) & WellRoundedPeaks(x)))", "(all x.((HighMountain(x) & WellRoundedPeaks(x)) -> CollisionOfPlateTectonics(x)) & FormedByCollectionOfPlateTectonics(x))", "all x y z.((HighMountain(x) & WellRoundedPeaks(y) & PlateTectonics(z) & Collision(x,z)) -> FormedBy(x,y,z))", "all x.((HighMountain(x) & WellRoundedPeaks(x)) -> FormedByCollusionOfPlateTectonics(x))", "all x.((HighMountain(x) & WellRoundedPeaks(x) & CollisionOfPlateTectonics(x)) -> FormedByCollectionOfPlateTectonics(x))", "all x y.((HighMountain(x) & WellRoundedPeaks(x) & PlateTectonics(y) & Collision(x,y)) -> FormedBy(x,y))", "all x.((HighMountain(x) & WellRoundedPeaks(x)) -> (FormedByCollusionOfPlateTectonics(x) & PlateTectonics(x)))", "all x y.((HighMountain(x) & WellRoundedPeaks(x)) -> (FormedByCollusionOfPlateTectonics(y) & PlateTectonics(z) & PlateTectonics(w)))", "all x.((HighMountains(x) & WellRoundedPeaks(x)) -> CollisionOfPlateTectonics(x))", "all x.((HighMountain(x) & WellRoundedPeak(x) & CollisionOfPlateTectonics(x)) -> FormedByCollectionOfPlateTectonics(x))"]}
{"id": "eqasc_validation_1374", "nl": "Infancy is the period of most rapid growth after birth.", "fol": "", "prediction": ["all x.(Infancy(x) -> (RapidGrowthAfterBirth(x)))", "(RapidGrowthAfterBirth(Infancy) -> MostRapidGrowthAfterBirth(Infancy))", "all x y.((Infancy(x) & Birth(y)) -> MostRapidGrowthAfter(x,y))", "all x.(Infancy(x) -> MostRapidGrowthAfterBirth(x))", "all x.(Infancy(x) -> (RapidGrowthAfterBirth(x) & MostRapidGrowthAfterBirth(x)))", "all x.(Infancy(x) -> RapidGrowthAfterBirth(x))", "all x.(Infancy(x) -> (RapidGrowthAfterBirth(x) & MostRapidGrowthAfterBirth(x)))", "(RapidGrowthAfterBirth(Infancy) -> MostRapidGrowthAfterBirth(Infancy))", "All x y.((Infancy(x) & Birth(y)) -> MostRapidGrowthAfter(x,y))", "All x y.((Infancy(x) & Birth(y)) -> RapidGrowth(x,y))", "(RapidGrowthAfterBirth(infancy) & MostRapidGrowthAfterBirth(infancy))", "all x.(Infancy(x) -> (RapidGrowthAfterBirth(x) & MostRapidGrowthAfterBirth(x)))", "all x.(Infancy(x) -> (RapidGrowth(x) & AfterBirth(x)))", "all x.(Infancy(x) -> MostRapidGrowthAfterBirth(x))", "All x y.((Infancy(x) & Birth(y)) -> MostRapidGrowth(x,y))", "all x.(Infancy(x) -> RapidGrowthAfterBirth(x))"]}
{"id": "eqasc_validation_1375", "nl": "Babies learn most during their rapid growth period.", "fol": "", "prediction": ["all x.((Baby(x) & RapidGrowthPeriod(x)) -> LearnsMost(x))", "all x y.((Baby(x) & RapidGrowthPeriod(y)) -> LearnsMost(x,y))", "all x.(Baby(x) -> LearnsMostDuringRapidGrowthPeriod(x))", "all x.((Baby(x) & RapidGrowthPeriod(x)) -> LearnsMost(x))", "(all x.((Baby(x) & RapidGrowthPeriod(x)) -> LearnsMost(x)))", "all x y.((Baby(x) & RapidGrowthPeriod(y)) -> LearnsMost(x,y))", "all x.(Baby(x) -> LearnsMostDuringRapidGrowthPeriod(x))", "(all x.(Baby(x) -> LearnsMostDuringRapidGrowthPeriod(x)))", "all x.((Baby(x) & RapidGrowthPeriod(x)) -> LearnsMost(x))", "all x y.((Baby(x) & RapidGrowthPeriod(y)) -> LearnsMostDuring(x,y))", "all x.(Baby(x) & RapidGrowthPeriod(x)) -> LearnsMost(x))", "all x.(Baby(x) -> LearnsMostDuringRapidGrowthPeriod(x))", "all x.((Baby(x) & RapidGrowthPeriod(x)) -> LearnsMostDuring(x,y))", "all x y.((Baby(x) & RapidGrowthPeriod(y)) -> LearnsMost(x,y))", "all x y.((Baby(x) & RapidGrowthPeriod(y)) -> LearnsMostDuring(x,y))", "all x.((Baby(x) & RapidGrowthPeriod(x)) -> LearnsMost(x))"]}
{"id": "eqasc_validation_1376", "nl": "Many babies are born with low birth weight.", "fol": "", "prediction": ["all x.(Baby(x) -> BornWithLowBirthWeight(x))", "all x.((Baby(x) & BornWithLowBirthWeight(x)) -> BornWithLowBirthWeight(x))", "all x y.((Baby(x) & BornWithLowBirthWeight(x)) -> BornWithLowBirthWeight(y))", "all x.(Baby(x) -> BornWithLowBirthWeight(x))", "many babies are born with lowbirthweight.", "all x.(Baby(x) -> LowBirthWeight(x))", "all x y.((Baby(x) & LowBirthWeight(y)) -> BornWith(x,y))", "all x y.((Bird(x) & Baby(y)) -> BornWithLowBirthWeight(x,y))", "exists x.(Baby(x) & LowBirthWeight(x))", "exists x.(Birth(x) & BornWithLowBirthWeight(x))", "exists x.(Baby(x) & BornWithLowBirthWeight(x))", "exists x.(Birth(x) & LowBirthWeight(x))", "all x y.((Baby(x) & LowBirthWath(y)) -> BornWith(x,y))", "exists x.(Baby(x) & LowBirthWeight(x))", "exists x.(Baby(x) & BornWithLowBirthWeight(x))", "exists x.(Bird(x) & BornWithLowBirthWeight(x))"]}
{"id": "eqasc_validation_1377", "nl": "infancy is the period of most rapid growth after being born", "fol": "", "prediction": ["all x.(Infancy(x) -> (RapidGrowthAfterBirth(x) & Born(x)))", "all x y.((Infancy(x) & Born(y)) -> MostRapidGrowth(x,y))", "(RapidGrowthAfterBirth(infancy) -> MostRapidGrowthAfterBirth(infancy))", "all x.(Infancy(x) -> (RapidGrowthAfterBirth(x) & Born(x)))", "infancy (PeriodOfRapidGrowthAfterBirth(infancy) & Born(infancy))", "(Infancy) -> (RapidGrowthAfterBirth(infancy) & Born(infancy)))", "all x.((Infancy(x) & MostRapidGrowthAfterBirth(x)) -> MostRapidGrowthAfterBirth(x))", "all x y.((Infancy(x) & Born(y)) -> (RapidGrowth(x,y) & Born(y)))", "(RapidGrowthAfterBirth(infancy) -> MostRapidGrowthAfterBirth(infancy,born(infancy)))", "all x.(Infancy(x) -> (RapidGrowthAfterBirth(x) & Born(x)))", "all x.(Infancy(x) -> (RapidGrowthAfterBirth(x) & Born(x)))", "all x.(Infancy(x) -> (RapidGrowth(x) & Born(x)))", "all x y.((Infancy(x) & Birth(y)) -> MostRapidGrowthAfterBirth(x,y))", "(RapidGrowthAfterBirth(Infancy) -> MostRapidGrowthAfterBirth(Infancy))", "all x y.((Infancy(x) & Born(y)) -> (RapidGrowth(x,y) & MostRapidGrowth(x,y)))", "all x.(Infancy(x) -> (RapidGrowthAfterBirth(x) & Born(x) & MostRapidGrowthAfterBirth(x)))"]}
{"id": "eqasc_validation_1378", "nl": "Learning begins in infancy.", "fol": "", "prediction": ["all x.(Learning(x) -> Infancy(x))", "all x.(Learning(x) -> InInfancy(x))", "all x y.((Learning(x) & Infancy(y)) -> StartsIn(x,y))", "(LearningStartsInInfancy(learning,infancy) & -EndsInInfancy(learning,infancy))", "all x.((Learning(x) & Infancy(x)) -> StartsIn(x,Infancy))", "all x.(Learning(x) -> InFancy(x))", "all x y.((Learning(x) & Infancy(y)) -> BeginsIn(x,y))", "all x.(LearningStartsInInfancy(x) -> InFancy(x))", "all x.(Learning(x) -> StartsInInfancy(x))", "all x.((LearningStartsInInfancy(x) & Infancy(x)) -> LearnsIn(x,Infancy))", "all x y.((Infancy(x) & Learning(y)) -> StartsIn(x,y))", "all x.(LinguisticStart(x) -> InInfancy(x))", "all x.(Learning(x) -> Infancy(x))", "all x y.((Linging(x) & Infancy(y)) -> StartsIn(x,y))", "(Infancy-EndsLearning(Learning))", "all x y.((Learning(x) & Infancy(y)) -> BeginsIn(x,y))"]}
{"id": "eqasc_validation_1379", "nl": "After birth, learning begins.", "fol": "", "prediction": ["all x.((Birth(x) & Learning(x)) -> Starts(x))", "all x y.((Birth(x) & Learning(y)) -> Starts(x,y))", "all x.((Birth(x) & Learning(x)) -> Begins(x))", "-(Birth(x) & Learning(x))", "all x.(Birth(x) -> Learning(x))", "(all x.((Birth(x) & Birth(x)) -> Learning(x)))", "all x y.((Birth(x) & Learning(y)) -> Begins(x,y))", "(AfterBirth(b) & Learning(c))", "all x.((Birth(x) & Learning(x)) -> Starts(x))", "(All x.((Birth(x) & Birth(x)) -> LearningEnds(x))", "all x.((Birth(x) & Learning(x)) -> Begins(x))", "all x.(Birth(x) -> LearningEnds(x))", "all x y.((Birth(x) & Learning(y)) -> Starts(x,y))", "all x.((Birth(x) & Learns(x)) -> Starts(x))", "All x.(AfterBirth(x) -> LearningEnds(x))", "(all x.(Birth(x) -> Learns(x)))"]}
{"id": "eqasc_validation_1380", "nl": "While a baby is very young, during infancy, co-sleeping is very convenient for feeding schedules.", "fol": "", "prediction": ["all x.((Baby(x) & VeryYoung(x)) -> (CoSleeping(x) & Infancy(x)))", "all x y.((Baby(x) & Infancy(y)) -> (CoSleeping(x,y) & ConvenientForFeedingSchedules(x)))", "all x.((Baby(x) & VeryYoung(x)) -> (CoSleeping(x) & ConvenientForFeedingSchedules(x)))", "(all x.((Baby(x) & VeryYoung(x)) -> CoSleeping(x)))", "all x y.((Baby(x) & Infancy(y)) -> (CoSleeping(x,y) & VeryConvenientForFeedingSchedules(x)))", "all x.(Baby(x) -> ((Tr\u00e8sYoung(x) & Infancy(x) & CoSleeping(x)) & ConvenientForFeedingSchedules(x)))", "exists x.(Baby(x) & VeryYoung(x) & Infancy(x) & CoSleeping(x))", "all x.((Baby(x) & VeryYoung(x)) -> VeryConvenientForFeedingSchedules(x))", "(all x.(Baby(x) -> Young(x)) & (Infancy(x) -> CoSleeping(x)))", "all x y.((Baby(x) & Infancy(y)) -> (CoSleeping(x,y) & ConvenientForFeedingSchedules(x,y)))", "(all x.((Baby(x) & VeryYoung(x)) -> CoSleeping(x)))", "all x.((Baby(x) & VeryYoung(x)) -> (CoSleeping(x) & VeryConvenientForFeedingSchedules(x)))", "all x y.((Baby(x) & Young(x) & Infancy(y)) -> ConvenientCoSleeping(x,y))", "(all x.(Baby(x) -> VeryYoung(x)) & all y.(Infancy(y) -> CoSleeping(y))))", "all x y.((Baby(x) & Infancy(y)) -> CoSleepingConvenientForFeedingSchedules(x,y))", "(all x.(Baby(x) -> Young(x)) & all y.(Infancy(y) -> CoSleeping(y)))"]}
{"id": "eqasc_validation_1381", "nl": "Very young babies have the period of most rapid growth after birth", "fol": "", "prediction": ["all x.((Baby(x) & VeryYoung(x)) -> MostRapidGrowthAfterBirth(x))", "all x.((Birth(x) & VeryYoung(x)) -> MostRapidGrowthAfterBirth(x))", "all x y.((Baby(x) & VeryYoung(x)) -> MostRapidGrowthAfterBirth(x,y))", "all x y.((Birth(x) & VeryYoung(x)) -> MostRapidGrowthAfterBirth(x,y))", "all x y z.((Baby(x) & VeryYoung(y) & Birth(z)) -> MostRapidGrowthAfterBirth(x,y,z))", "all x.((Baby(x) & VeryYoung(x)) -> MostRapidGrowthAfterBirth(x))", "all x y z.((Birth(x) & VeryYoung(y) & Birth(z)) -> MostRapidGrowthAfterBirth(x,y,z))", "(RapidGrowthAfterBirth(veryyoungBaby(baby) -> VeryYoung(baby))", "all x.((Birth(x) & VeryYoung(x)) -> MostRapidGrowthAfterBirth(x))", "all x.((ViolentBirth(x) & MostRapidGrowthAfterBirth(x)) -> PeriodOfRapidGrowthAfterBirth(x))", "all x y.((Baby(x) & VeryYoung(x)) -> MostRapidGrowthAfterBirth(y))", "all x.((Baby(x) & VeryYoung(x)) -> RapidGrowthAfterBirth(x))", "all x.((Between(x) & VeryYoungBaby(x)) -> MostRapidGrowthAfterBirth(x))", "all x y.((Birth(x) & VeryYoung(y)) -> MostRapidGrowthAfterBirth(x,y))", "all x.((Birth(x) & VeryYoung(x)) -> RapidGrowthAfterBirth(x))", "all x.((Baby(x) & VeryYoung(x)) -> MostRapidGrowthAfterBirth(x))"]}
{"id": "eqasc_validation_1382", "nl": "babies are in the period of most rapid growth after birth", "fol": "", "prediction": ["all x.(Baby(x) -> (RapidGrowthAfterBirth(x) & MostRapidGrowthAfterBirth(x)))", "all x.((Baby(x) & MostRapidGrowthAfterBirth(x)) -> InPeriodOfGrowthAfterBirth(x))", "all x y.((Baby(x) & Birth(y)) -> MostRapidGrowthAfter(x,y))", "all x y.((Baby(x) & Birth(y)) -> (RapidGrowthAfterBirth(x,y) & MostRapidGrowthAfterBirth(x,y)))", "all x y.((Birth(x) & Birth(y)) -> MostRapidGrowthAfterBirth(x,y))", "all x y z.((Baby(x) & Birth(y) & PeriodOfRapidGrowth(z)) -> InFastGrowthAfterBirth(x,y,z))", "all x.((Birth(x) & MostRapidGrowthAfterBirth(x)) -> InPeriodOfRapidGrowthAfterBirth(x))", "(RapidGrowthAfterBirth(baby) -> InPeriodOfRapidGrowthAfterBirth(baby))", "all x.((Baby(x) & MostRapidGrowthAfterBirth(x)) -> InPeriodOfRapidGrowthAfterBirth(x))", "all x.(Baby(x) -> (RapidGrowthAfterBirth(x) & MostRapidGrowthAfterBirth(x)))", "all x.((Baby(x) & FastestGrowthAfterBirth(x)) -> InPeriodOfRapidGrowthAfterBirth(x))", "all x y z.((Baby(x) & Birth(y) & GrowthPeriod(z)) -> MostRapid(x,y,z))", "(RapidGrowthAfterBirth(baby) -> InPeriodOfRapidGrowthAfterBirth(baby))", "all x.(Baby(x) -> (RapidGrowthAfterBirth(x) & MostRapidGrowthAfterBirth(x)))", "all x y.((Baby(x) & Birth(y)) -> MostRapidGrowthAfter(x,y))", "all x.(Baby(x) -> (RapidGrowthAfterBirth(x) & AfterBirth(x)))"]}
{"id": "eqasc_validation_1383", "nl": "the period of most rapid growth after birth is when they are a baby", "fol": "", "prediction": ["all x.((Baby(x) & Baby(x)) -> MostRapidGrowthAfterBirth(x))", "all x.((Birth(x) & Baby(x)) -> MostRapidGrowthAfterBirth(x))", "all x y.((PeriodOfRapidGrowthAfterBirth(x) & Baby(y)) -> Baby(x))", "all x.((PeriodOfRapidGrowthAfterBirth(x) & Baby(x)) -> Baby(x))", "all x y.((Baby(x) & Baby(y)) -> MostRapidGrowthAfterBirth(x,y))", "(RapidGrowthAfterBirth(x) -> Baby(x))", "all x.((Baby(x) & Baby(x)) -> RapidGrowthAfterBirth(x))", "(BirthBirth(x) -> MostRapidGrowthAfterBirth(x))", "(RapidGrowthAfterBirth(x) -> Baby(x))", "all x.((Person(x) & Baby(x)) -> MostRapidGrowthAfterBirth(x))", "all x y.((PeriodOfRapidGrowthAfterBirth(x) & Baby(y)) -> Baby(x,y))", "all x.(RapidGrowthAfterBirth(x) -> Baby(x))", "all x y.((RapidGrowthAfterBirth(x) & Baby(y)) -> Baby(x,y))", "all x.((Baby(x) & Baby(x)) -> MostRapidGrowthAfterBirth(x))", "all x y.((Person(x) & Baby(y)) -> MostRapidGrowthAfterBirth(x,y))", "all x.(RapidGrowthAfterBirth(x) -> (Baby(x) & Baby(x)))"]}
{"id": "eqasc_validation_1384", "nl": "Infancy has three stages.", "fol": "", "prediction": ["all x.(Infancy(x) -> HasThreeStages(x))", "(InfancyHasThreeStages(infancy) & -HasThreeStages(infancy))", "all x y.((Infancy(x) & Stage(y)) -> HasThree(x,y))", "Infancy (Infancy) -> HasThreeStages(Infancy))", "Infancy hasThreeStages(infancy)", "all x.(Infancy(x) -> HasThreeStages(x))", "Infancy (Infancy) -ThreeStages(infancy))", "(HasStage(Infancy,3) & HasStage(Infancy,3))", "all x y.((Infancy(x) & Stage(y)) -> HasThree(x,y))", "all x.(Infancy(x) -> HasThreeStages(x))", "all x.(Infancy(x) -> HasThreeStages(x))", "All x.(Infancy(x) -> HasTwoStages(x))", "all x.(Infancy(x) -> HasThreeStages(x))", "All x.(Infancy(x) -> HasTwoStages(x))", "All x.(Infancy(x) -> ThreeStages(x))", "All x.(Infancy(x) -> HasThreeStages(x))"]}
{"id": "eqasc_validation_1385", "nl": "The three stages after birth are the period of most rapid growth in life.", "fol": "", "prediction": ["all x.((Stage(x) & AfterBirth(x)) -> MostRapidGrowthInLife(x))", "all x y.((Stage(x) & Stage(y)) -> RapidGrowthInLife(x,y))", "(RapidGrowthInLife(s) & ThreeStagesAfterBirth(s))", "all x.((Stage(x) & AfterBirth(x)) -> RapidGrowthInLife(x))", "all x y.((Stage(x) & Stage(y) & AfterBirth(x,y)) -> MostRapidGrowthInLife(x))", "all x.((StageAfterBirth(x) & StageAfterBirth(x)) -> MostRapidGrowthInLife(x))", "(RapidGrowthAfterBirth(s) & ThreeStagesAfterBirth(s))", "all x y z.((Stage(x) & Birth(y) & Life(z)) -> RapidGrowth(x,y,z))", "all x.((Stage(x) & AfterBirth(x)) -> MostRapidGrowthInLife(x))", "all x y.((Stage(x) & Birth(y)) -> MostRapidGrowthInLife(x,y))", "all x.((Stage(x) & Birth(x)) -> MostRapidGrowthInLife(x))", "(RapidGrowthInLife(stages3))", "all x.((StagesAfterBirth(x) & RapidGrowthInLife(x)) -> StagesAfterBirth(x))", "all x.(Stage(x) -> (RapidGrowth(x) & AfterBirth(x)))", "all x.((Stage(x) & AfterBirth(x)) -> RapidGrowthInLife(x))", "All x y.((Stage(x) & Birth(y)) -> RapidGrowthInLife(x,y))"]}
{"id": "eqasc_validation_1386", "nl": "Infancy and early childhood are times of rapid growth and development.", "fol": "", "prediction": ["all x.((Infancy(x) | EarlyChildhood(x)) -> (RapidGrowth(x) & RapidDevelopment(x)))", "all x y.((Infancy(x) & EarlyChildhood(y)) -> (RapidGrowth(x) & RapidDevelopment(y)))", "all x.((Infancy(x) & EarlyChildhood(x)) -> (RapidGrowth(x) & RapidDevelopment(x)))", "(RapidGrowthAndDevelopment(Infancy) & EarlyChildhood(EarlyChildhood))", "(RapidGrowth(infancy,infancy) & RapidDevelopment(earlyChildhood))", "all x.((Infancy(x) | EarlyChildhood(x)) -> (RapidGrowth(x) & RapidDevelopment(x)))", "(RapidGrowthAndDevelopment(infancy) & RapidChildhood(earlyChildhood))", "all x y.((Infancy(x) & EarlyChildhood(y)) -> (RapidGrowth(x) & RapidDevelopment(x)))", "all x y.((Infancy(x) & EarlyCrowd(y)) -> (RapidGrowth(x) & RapidDevelopment(y)))", "all x.(Infancy(x) & EarlyCrowdbirth(x) -> (RapidGrowth(x) & RapidDevelopment(x)))", "all x.((Infancy(x) & EarlyChildhood(x)) -> (RapidGrowth(x) & RapidDevelopment(x)))", "(RapidGrowth(infancy,infancy) & RapidDevelopment(earlyChildhood,infancy))", "all x.((Infancy(x) | EarlyChildren(x)) -> (RapidGrowth(x) & RapidDevelopment(x)))", "all x y.((Infancy(x) & EarlyChildhood(y)) -> (RapidGrowth(x) & RapidDevelopment(y)))", "all x.((Infancy(x) | EarlyCrowding(x)) -> (RapidGrowth(x) & RapidDevelopment(x)))", "all x.((Infancy(x) & EarlyCrowding(x)) -> (RapidGrowth(x) & RapidDevelopment(x)))"]}
{"id": "eqasc_validation_1387", "nl": "development is rapid in childhood", "fol": "", "prediction": ["all x.((Crowd(x) & Childhood(x)) -> RapidDevelopment(x))", "all x y.((Childhood(x) & Childhood(y)) -> RapidDevelopment(x,y))", "all x.((Childhood(x) & RapidDevelopment(x)) -> RapidDevelopment(x))", "(RapidDevelopmentInChildhood(DevelopmentInChildhood(DevelopmentInChildhood(DevelopmentInChildhood(DevelopmentInChildhood(DevelopmentInChildhood(DevelopmentInChildhood(DevelopmentInChildhood(DevelopmentInChildhood(DevelopmentInChildhood(DevelopmentInChildhood(DevelopmentInChildhood(DevelopmentInChildhood(Childhood(Childhood(Childhood)Childhood))))", "all x y.((Crowd(x) & Childhood(y)) -> RapidDevelopment(x,y))", "(RapidDevelopmentInChildhood(Destination,Childhood) & RapidInChildhood(Destination,Childhood))", "all x y z.((Children(x) & Childhood(y) & Childhood(z)) -> RapidDevelopment(x,y,z))", "all x.((Crowd(x) & Childhood(x)) -> RapidDevelopment(x))", "all x y z.((Childhood(x) & Childhood(y) & Childhood(z) & RapidDevelopment(x,y,z)) -> RapidDevelopment(x,y,z))", "all x y.((Children(x) & Childhood(y)) -> RapidDevelopment(x,y))", "all x.((Childhood(x) & RapidDevelopment(x)) -> RapidDevelopment(x))", "all x y.((Crowd(x) & Childhood(y)) -> RapidDevelopment(x,y))", "all x.((Children(x) & Childhood(x)) -> RapidDevelopment(x))", "all x.(RapidDevelopment(x) -> EarlyInLife(x))", "all x.((Crown(x) & Childhood(x)) -> RapidDevelopment(x))", "all x y.((Childhood(x) & Childhood(y)) -> RapidDevelopment(x,y))"]}
{"id": "eqasc_validation_1388", "nl": "Development means to get better, growth means to get bigger.", "fol": "", "prediction": ["all x y.((Development(x) & Growth(y)) -> (GetBetter(x) & GetBigger(y)))", "(all x.(Development(x) -> Better(x)) & all y.(Growth(y) -> Bigger(y)))", "all x y.((Development(x) & Growth(y)) -> (Growth(x) & Better(x) & Bigger(y)))", "all x.((Development(x) -> Better(x)) & (Growth(x) -> Bigger(x)))", "(all x.(Development(x) -> GetBetter(x)) & all y.(Growth(y) -> GetBigger(y)))", "(all x y.((Development(x) & Better(x)) -> Bigger(y)))", "all x.(Development(x) -> (GetBetter(x) & Growth(x)))", "all x y z.((Development(x) & Growth(y) & Better(x)) -> Bigger(y))", "all x.(Development(x) -> Better(x) & Growth(x))", "all x y.((Development(x) & Growth(y)) -> (GetBetter(x) & GetBigger(y)))", "(all x.(Development(x) -> Better(x)) & all y.(Growth(y) -> Bigger(y)))", "(all x y.((Development(x) & Better(x)) -> Grows(y)))", "all x y.((Development(x) & Growth(y)) -> (Growth(x) & Better(x) & Bigger(y)))", "(all x.(Development(x) -> GetBetter(x)) & all y.(Growth(y) -> GetBigger(y)))", "(all x.(Development(x) -> Better(x)) & all y.(Growth(y) -> Bigger(y)))", "all x y.((Development(x) & Growth(y)) -> (GetBetter(x) & GetBigger(y)))"]}
{"id": "eqasc_validation_1389", "nl": "Infancy is the period of most rapidly getting bigger after birth", "fol": "", "prediction": ["all x.(Infancy(x) -> (RapidlyGrowingBiggerAfterBirth(x) & AfterBirth(x)))", "all x y.((Infancy(x) & Birth(y)) -> (RapidlyGrowingBiggerAfter(x,y) & AfterBirth(x)))", "(RapidlyGrowingBiggerAfterBirth(Infancy) -> MostRapidlyGrowingBiggerAfterBirth(Infancy))", "(Infancy) -> MostRapidlyGivingBiggerAfterBirth(Infancy))", "All x y z.((Infancy(x) & Birth(y) & Birth(z)) -> (RapidlyGrowingBiggerAfter(x,y,z) & MostRapidlyGrowingBetterAfter(x,y)))", "all x.(Infancy(x) -> (RapidlyGettingBiggerAfterBirth(x) & AfterBirth(x)))", "all x.(Infancy(x) -> (RapidlyGivingBiggerAfterBirth(x) & AfterBirth(x)))", "all x y.((Infancy(x) & Birth(y)) -> (RapidlyGivingBigger(x,y) & AfterBirth(x)))", "all x.(Infancy(x) -> (RapidlyGrowingBiggerAfterBirth(x) & AfterBirth(x)))", "(RapidlyGivingBiggerAfterBirth(Infancy) & AfterBirth(Infancy))", "all x y.((Infancy(x) & Birth(y)) -> MostRapidlyGettingBiggerAfter(x,y))", "all x.(Infancy(x) -> (RapidlyGivingBiggerAfterBirth(x) & AfterBirth(x)))", "all x.(Infancy(x) -> (RapidlyGrowingBiggerAfterBirth(x) & AfterBirth(x)))", "All x y.((Infancy(x) & Birth(y)) -> (MostRapidlyGettingBigger(x,y)))", "all x.(Infancy(x) -> (MostRapidlyGettingBiggerAfterBirth(x) & AfterBirth(x) & AfterBirth(x)))", "all x.(Infancy(x) -> (RapidlyGettingBiggerAfterBirth(x) & AfterBirth(x)))"]}
{"id": "eqasc_validation_1390", "nl": "Infants are birth to one year.", "fol": "", "prediction": ["all x.(Infant(x) -> BirthToOneYear(x))", "all x.(Infant(x) -> BirthToOneYear(x))", "(BirthToOneYear(infant)", "all x y.((Infant(x) & Year(y)) -> Birth(x,y))", "all x.(Infant(x) -> BirthToOneYear(x))", "(BirthToOneYear(infant)", "all x.(Infant(x) -> BirthToYear(x))", "all x.((Infant(x) & BirthToOneYear(x)) -> Infant(x))", "all x y.((Infant(x) & Year(y)) -> BirthTo(x,y))", "all x y.((Infant(x) & Year(y) & Birth(x,y)) -> Birth(x,y))", "all x.(Infant(x) -> BirthToOneYear(x))", "all x.((Infant(x) & BirthToOneYear(x)) -> Infant(x))", "all x.(Infant(x) -> BornTo(x,y))", "all x.(Infant(x) -> BirthToOneYear(x))", "all x.(Infant(x) -> (BirthToOneYear(x)))", "all x.(Infant(x) -> BirthToYear(x))"]}
{"id": "eqasc_validation_1391", "nl": "the period of most rapid growth is the first year", "fol": "", "prediction": ["all x.(RapidGrowthPeriod(x) -> FirstYear(x))", "all x.((PeriodOfRapidGrowth(x) & FirstYear(x)) -> MostRapidGrowth(x))", "all x y.((PeriodOfRapidGrowth(x) & Year(y)) -> FirstYear(x,y))", "(RapidGrowthPeriod(x) -> FirstYear(x))", "all x y z.((PeriodOfRapidGrowth(x) & Year(y) & Year(z)) -> FirstYear(y,z))", "the period of most rapidgrowth is the first year.", "-RapidGrowthPeriod(--FirstYear(--RapidGrowthPeriod(--RapidGrowthPeriod(-RapidGrowthPeriod))", "-RapidGrowthPeriod(x) -> FirstYear(x))", "all x.(RapidGrowthPeriod(x) -> FirstYear(x))", "(RapidGrowthPeriod(x) -> FirstYear(x))", "all x y.((PeriodOfRapidGrowth(x) & Year(y)) -> FirstYear(x,y))", "all x y.((PeriodOfRapidGrowth(x) & FirstYear(y)) -> MostRapidGrowth(x,y))", "(RapidGrowthPeriod(RapidGrowth) -> FirstYear(RapidGrowth))", "all x.((PeriodOfRapidGrowth(x) & FirstYear(x)) -> MostRapidGrowth(x))", "the period of most rapidgrowth is the first year of life.", "all x.(RapidGrowthPeriod(x) -> FirstYear(x))"]}
{"id": "eqasc_validation_1392", "nl": "Infants, children, and teens have relatively high nutrition needs to fuel their rapid growth.", "fol": "", "prediction": ["all x.((Infant(x) | Child(x) | Teen(x)) -> HighNutritionNeeds(x))", "all x y.((Infant(x) | Child(x) | Teen(y)) -> HighNutritionNeeds(x,y))", "all x y z.((Infant(x) | Child(y) | Teen(z)) -> (RelativelyHighNutritionNeeds(x,y,z) & FuelsRapidGrowth(x)))", "(HighNutritionNeeds(Infant(Children) & HighNutritionNeeds(Teens))", "(RelativelyHighNutritionNeeds(Infant,Circulation,Teenage) & FuelRapidGrowth(Infant,Children,Teens))", "all x y.((Infant(x) | Child(y) | Teen(y)) -> (RelativelyHighNutritionNeeds(x,y) & FuelsRapidGrowth(x,y)))", "(all x.((Infant(x) | Child(x) | Teen(x)) -> HighNutritionNeeds(x)) & FuelRapidGrowth(x))", "(HighNutritionNeeds(Infant,Infant,Children,Teen(Infant) & HighNutritionNeeds(Children,Infant) & HighNutritionNeeds(Teen(Teen))", "(HighNutritionNeeds(infants) & HighNutritionNeeds(children) & HighNutritionNeeds(teens))", "all x.((Infant(x) | Child(x) | Teen(x)) -> HighNutritionNeeds(x))", "all x.((Infant(x) | Child(x) | Teen(x)) -> (RelativelyHighNutritionNeeds(x) & FuelsRapidGrowth(x)))", "all x y z.((Infant(x) | Child(y) | Teen(z)) -> (RelativelyHighNutritionNeeds(x,y) & FuelsRapidGrowth(x,z)))", "all x y.((Infant(x) | Child(x) | Teen(y)) -> (RelativelyHighNutritionNeeds(x,y) & FuelsRapidGrowth(x,y)))", "all x.((Infant(x) | Child(x) | Teen(x)) -> RelativelyHighNutritionNeeds(x))", "all x.((Infant(x) | Child(x) | Teen(x)) -> HighNutritionNeeds(x))", "all x.((Infant(x) | Child(x) | Teen(x)) -> HasRelativelyHighNutritionNeeds(x))"]}
{"id": "eqasc_validation_1393", "nl": "High nutrition is needed to fuel an infant's growth.", "fol": "", "prediction": ["all x.((Infant(x) & HighNutrition(x)) -> FuelsGrowth(x))", "all x y.((Infant(x) & Infant(y)) -> HighNutrition(x,y))", "all x.(HighNutrition(x) -> FuelsInfantGrowth(x))", "all x.((Infant(x) & HighNutrition(x)) -> FuelsGrowth(x))", "all x y.((Infant(x) & Infant(y) & NeedsHighNutrition(x,y)) -> FuelsGrowth(x,y))", "all x y z.((Infant(x) & Nutrition(y) & Growth(z)) -> NeededToFuel(x,y,z))", "all x y.((Infant(x) & Infant(y)) -> HighNutrition(x,y))", "exists x.(Infant(x) & HighNutrition(x) & FuelsGrowth(x))", "all x.((Infant(x) & NeedsHighNutrition(x)) -> FuelsGrowth(x))", "all x.(HighNutrition(x) -> FuelsInfantGrowth(x))", "all x.((Infant(x) & HighNutrition(x)) -> FuelsGrowth(x))", "all x y.((Infant(x) & Infant(y)) -> NeedsHighNutrition(x,y))", "all x y.((Infant(x) & HighNutrition(x)) -> FuelsGrowth(y,x))", "all x y.((Infant(x) & Infant(y)) -> HighNutritionNeededToFuelGrowth(x,y))", "all x.(HighNutrition(x) -> FuelsInfantGrowth(x))", "All x.((Infant(x) & HighNutrition(x)) -> FuelsGrowth(x))"]}
{"id": "eqasc_validation_1394", "nl": "When a person is born, a birth certificate is written up to record their birth.", "fol": "", "prediction": ["all x.(Birth(x) -> WrittenUpBirthCertificate(x))", "all x y.((Person(x) & Born(x)) -> WrittenUpBirthCertificate(y))", "all x.((Person(x) & Born(x)) -> WrittenBirthCertificate(x))", "all x y.((Birth(x) & Person(y)) -> WrittenUpBirthCertificate(x,y))", "all x y.((Person(x) & Born(x)) -> BirthCertificate(y))", "all x.(Birth(x) -> WrittenUpBirthCertificate(x))", "all x y z.((Person(x) & Born(x) & BirthCertificate(y) & Birth(z)) -> WrittenUpToRecord(y,z))", "all x.(Birth(x) -> exists y.(BirthCertificate(y) & WrittenUp(y)))", "all x.((Person(x) & Born(x)) -> WrittenUpBirthCertificate(x))", "all x.((Birth(x) & BirthCertificate(x)) -> WrittenUpToRecordBirth(x))", "exists an x.(Birth(x) & BirthCertificate(x) & WrittenUpToRecordBirth(x))", "all x y z.(Birth(x) -> (BirthCertain(y) & Birth(z) & WrittenUp(y,z)))", "all x y.((Person(x) & Born(x)) -> WrittenBirthCertificate(y))", "all x.(Birth(x) -> WrittenBirthCertificate(x))", "all x y.((Birth(x) & Person(y)) -> WrittenUpBirthCertificate(x,y))", "all x.(Birth(x) -> BirthCertificate(x))"]}
{"id": "eqasc_validation_1395", "nl": "Infancy is the period of most rapid growth after being born.", "fol": "", "prediction": ["all x.(Infancy(x) -> (RapidGrowthAfterBirth(x) & Born(x)))", "(RapidGrowthAfterBirth(Infancy) -> MostRapidGrowthAfterBirth(Infancy))", "all x y.((Infancy(x) & Born(y)) -> MostRapidGrowth(x,y))", "all x.(Infancy(x) -> (RapidGrowthAfterBirth(x)))", "(RapidGrowthAfterBirth(Infancy) -> MostRapid(Infancy))", "All x y.((Infancy(x) & Born(y)) -> RapidGrowth(x,y))", "all x.(Infancy(x) -> (RapidGrowthAfterBirth(x) & Born(x)))", "all x.(Infancy(x) -> (RapidGrowthAfterBirth(x) & Born(x)))", "all x.(Infancy(x) -> RapidGrowthAfterBirth(x))", "(RapidGrowthAfterBirth(Infancy))", "All x y.((Infancy(x) & Birth(y)) -> MostRapidGrowth(x,y))", "all x.(Infancy(x) -> MostRapidGrowthAfterBirth(x))", "All x y.((Infancy(x) & Born(y)) -> RapidGrowth(x,y))", "all x.(Infancy(x) -> (RapidGrowthAfterBirth(x) & Born(x)))", "all x.(Infancy(x) -> (RapidGrowth(x) & Born(x)))", "all x.(Infancy(x) -> MostRapidGrowthAfterBeingBirth(x))"]}
{"id": "eqasc_validation_1396", "nl": "Communication begins in infancy.", "fol": "", "prediction": ["all x.(Communication(x) -> InFancy(x))", "all x y.((Communication(x) & Infancy(y)) -> StartsIn(x,y))", "(Communication(x) & Infancy(x))", "all x.(Communication(x) -> Infancy(x))", "all x.(Communication(x) -> StartsInInfancy(x))", "all x y.((Communication(x) & Infancy(y)) -> BeginsIn(x,y))", "all x.((Communication(x) & Infancy(x)) -> StartsIn(x,Infancy))", "(Communication(x) & Infancy(x))", "all x.(Communication(x) -> InInfancy(x))", "(Communication(s) & Infancy(s))", "all x y.((Communication(x) & Infancy(y)) -> StartsIn(x,y))", "all x.(Communication(x) -> StartsInInfancy(x))", "all x y.((Communication(x) & Infancy(y)) -> BeginsIn(x,y))", "all x.(Communication(x) -> InFancy(x))", "all x y.((Communication(x) & Infancy(y)) -> StartsIn(x,y))", "all x.(Communication(x) -> StartsInInfancy(x))"]}
{"id": "eqasc_validation_1397", "nl": "Communication begins in the period of most rapid growth after birth", "fol": "", "prediction": ["all x y.((Communication(x) & Birth(y)) -> MostRapidGrowthAfterBirth(x,y))", "all x.(Communication(x) -> (RapidGrowthAfterBirth(x) & MostRapidGrowthAfterBirth(x)))", "all x y z.((Communication(x) & Birth(y) & MostRapidGrowth(z)) -> (EndsInPeriod(x,y,z) & MostRapidGrowthAfterBirth(x)))", "all x.((Communication(x) & MostRapidGrowthAfterBirth(x)) -> StartsInPeriodOf(x,y))", "all x.(Communication(x) -> (StartsInRapidGrowthAfterBirth(x) & MostRapidGrowthAfterBirth(x)))", "(RapidGrowthAfterBirth(Communication) -> CommunicationEndsIn(Communication(Communication))", "all x y z.((Communication(x) & Birth(y) & MostRapidGrowthAfterBirth(z) & Embraces(x,y,z)) -> (Communication(x) & MostRapidGrowthAfterBirth(x,y)))", "all x y.((Communication(x) & Birth(y)) -> MostRapidGrowthAfterBirth(x,y))", "(RapidGrowthAfterBirth(Communication) -> CommunicationStartsIn(Communication(Communication))", "all x.((Communication(x) & MostRapidGrowthAfterBirth(x)) -> MostRapidGrowthAfterBirth(x))", "all x y z.((Communication(x) & Birth(y) & FastestGrowthAfterBirth(z)) -> (Communication(x,y,z) & MostRapidGrowthAfterBirth(x,y)))", "all x.(Communication(x) -> (FastGrowthAfterBirth(x) & MostRapidGrowthAfterBirth(x)))", "all x y.((Communication(x) & MostRapidGrowthAfterBirth(y)) -> StartsIn(x,y))", "all x.((Communication(x) & MostRapidGrowthAfterBirth(x)) -> StartsInPeriodOf(x,RapidGrowthAfterBirth(x))", "(RapidGrowthAfterBirth(Communication) -> StartsIn(Communication))", "all x y.((Communication(x) & Birth(y)) -> MostRapidGrowthAfterBirth(x,y))"]}
{"id": "eqasc_validation_1398", "nl": "Rapid growth means rapid advancement.", "fol": "", "prediction": ["all x.(RapidGrowth(x) -> RapidAdvancement(x))", "all x y.((RapidGrowth(x) & RapidAdvancement(y)) -> RapidGrowth(x))", "all x.(RapidGrowth(x) -> RapidAdvancement(x))", "(RapidGrowth(r) -> RapidAdvancement(r))", "all x.(RapidGrowth(x) -> RapidAcquisition(x))", "all x y.((RapidGrowth(x) & RapidAdvancement(y)) -> RapidGrowth(x))", "all x y.((RapidGrowth(x) & RapidAcquisition(y)) -> RapidGrowth(x,y))", "all x.((RapidGrowth(x) & RapidAdvancement(x)) -> RapidGrowth(x))", "all x.(RapidGrowth(x) -> RapidAdvancement(x))", "all x.(RapidGrowth(x) -> RapidAccroissement(x))", "all x y.((RapidGrowth(x) & RapidAcquisition(y)) -> RapidGrowth(x,y))", "all x y.((RapidGrowth(x) & RapidAdvancement(y)) -> RapidGrowth(x))", "all x.(RapidGrowth(x) -> RapidAdvancement(x))", "all x.(RapidGrowth(x) -> RapidAccompanion(x))", "all x.(RapidGrowth(x) -> RapidProgression(x))", "all x.(RapidGrowth(x) -> RapidAdvancement(x))"]}
{"id": "eqasc_validation_1399", "nl": "Infancy is the period of most rapid advancement", "fol": "", "prediction": ["all x.(Infancy(x) -> (RapidAdvancement(x) & MostRapidAdvancement(x)))", "all x y.((Infancy(x) & RapidAcquisition(y)) -> MostRapidAcquisition(x,y))", "all x.(Infancy(x) -> MostRapidAdvancement(x))", "all x.(Infancy(x) -> (RapidAcquisition(x) & MostRapidAcquisition(x)))", "all x y z.((Infancy(x) & RapidAdvancement(y) & Advancement(z)) -> (PeriodOf(x,y,z) & MostRapid(x,y)))", "(RapidAcquisition(Infancy) -> MostRapidAcquisition(Infancy))", "(RapidAdvancement(Infancy) -> MostRapid(Infancy))", "all x y.((Infancy(x) & FastestAcquired(y)) -> PeriodOfAdvancement(x,y))", "(RapidAdvancement(infancy) & Infancy(infancy))", "all x y.((Infancy(x) & MostRapidAdvancement(y)) -> Infancy(x))", "all x.(Infancy(x) -> RapidAdvancement(x))", "All x.(Infancy(x) -> (RapidAdvancement(x) & MostRapidAdvancement(x)))", "all x y.((Infancy(x) & RapidProgress(y)) -> PeriodOfInfancy(x,y))", "all x.(Infancy(x) -> MostRapidAdvancement(x))", "All x.(Infancy(x) -> (RapidAdvancement(x) & Infancy(x)))", "All x.(Infancy(x) -> RapidAcquisition(x))"]}
{"id": "eqasc_validation_1400", "nl": "Food is easier to chew because it is moistened by saliva from the salivary glands.", "fol": "", "prediction": ["all x.((Food(x) & MoistenedBySaline(x)) -> EasierToCheek(x))", "all x y.((Food(x) & SalivaryGlands(y) & MoistenedBy(x,y)) -> EasierToCheek(x))", "all x.((Food(x) & MoisturedBySaliva(x)) -> EasierToCheek(x))", "(EasierToCheek(Food) -> MoistenedBySaline(Food,SalivaryGlands))", "all x y z.((Food(x) & SalivaryGlands(y) & Moisture(z) & MoistenedBy(x,z)) -> EasierToCheek(x))", "all x y.((Food(x) & SalivaryGlands(y)) -> EasierToCheek(x))", "all x y z.((Food(x) & Saliva(y) & SalivaryGlands(z) & MoistenedBy(x,y,z)) -> EasierToCheek(x))", "all x.((Food(x) & MoistenedBySaliva(x)) -> EasierToCheek(x))", "all x y.((Food(x) & SalivaryGlands(y) & MoistenedBy(x,y)) -> EasierToCheek(x))", "all x.((Food(x) & MoistenedBySavor(x) & SalivaryGlands(x)) -> EasierToCheek(x))", "all x.((Food(x) & MoisturizedBySaline(x)) -> EasierToCheek(x))", "all x y.((Food(x) & Saliva(y)) -> EasierToCheek(x))", "all x y.((Food(x) & SalivaryGlands(y) & Moisture(x,y)) -> EasierToCheek(x))", "all x.((Food(x) & MoisturizedBySalineGlands(x)) -> EasierToCheek(x))", "all x.((Food(x) & MoisturedBySaliva(x)) -> EasierToCheek(x))", "all x.((Food(x) & MoistenedBySaliva(x)) -> EasierToCheek(x))"]}
{"id": "eqasc_validation_1401", "nl": "Salivary Gland Cancer Salivary glands are located throughout the oral cavity.", "fol": "", "prediction": ["all x.(SalivaryGlandCancer(x) -> SalivaryGland(x))", "all x.(SalivaryGlandCancer(x) -> (SalivaryGland(x) & LocatedThroughoutOralCavity(x)))", "all x y.((SalivaryGland(x) & OralCavity(y)) -> SalivaryGlandCancer(x))", "(SalivaryGlandCancer) -> SalivaryGlands(SalivaryGlands))", "(SalivaryGlandCancer) - SalivaryGlands(s) & LocatedThroughoutOralCavity(s))", "all x.(SalivaryGlandCancerous(x) -> SalivaryGland(x))", "(SalivaryGlandCancer(SalivaryGland) -> LocatedThroughoutOralCavity(SalivaryGland))", "all x.((SalivaryGland(x) & OralCavity(x)) -> SalivaryGlandCancer(x))", "all x y.((SalivaryGlandCancer(x) & OralCavity(y)) -> SalivaryGland(x,y))", "(SalivaryGlandsCancer) -> LocatedThroughoutOralCavity(salivaryglands))", "all x y.((SalivaryGlenn(x) & OralCavity(y)) -> SalivaryGlennCancer(x,y))", "all x y.((SalivaryGland(x) & OralCavity(y)) -> SalivaryGlandCancer(x))", "all x.(SalivaryGlands(x) -> SalivaryGlands(x))", "all x.(SalivaryGlennCancer(x) -> (SalivaryGlenns(x) & OralCavity(x)))", "all x.(SalivaryGlandCancer(x) -> SalivaryGland(x))", "all x.(SalivaryGland(x) -> SalivaryGlandCancer(x))"]}
{"id": "eqasc_validation_1402", "nl": "Food is easier to chew because it is moistened by saliva from throughout the oral cavity", "fol": "", "prediction": ["all x y.((Food(x) & OralCavity(y) & MoistenedBySaline(x,y)) -> EasierToCheek(x))", "all x.((Food(x) & MoistenedBySaline(x) & OralCavity(x)) -> EasierToCheek(x))", "all x y z.((Food(x) & Saliva(y) & OralCavity(z) & Moisture(y) & Moisture(z)) -> EasierToCheek(x))", "all x.((Food(x) & MoisturedBySaline(x) & OralCavity(x)) -> EasierToCheek(x))", "(EasierToCheek(Food) -> MoistenedBySaline(Food))", "all x y z.((Food(x) & Saliva(y) & OralCavity(z) & MoistenedBy(x,y) & Moisture(y)) -> EasierToCheek(x))", "all x y.((Food(x) & OralCavity(y) & MoistenedBySaline(x,y)) -> EasierToCheek(x))", "all x y.((Food(x) & MouthtenedBySaline(x) & OralCavity(y)) -> EasierToCheek(x))", "all x.(EasierToCheek(x) -> (FoodMoistenedBySaline(x) & OralCavity(x)))", "all x.((Food(x) & MoistenedBySaline(x) & OralCavity(x)) -> EasierToCheek(x))", "(EasierToCheek(Food) -> MoistenedBySaline(Food,OralCavity))", "all x y z.((Food(x) & Mouth(y) & Saliva(z) & MoistureDistance(x,z)) -> EasierToCheek(x))", "all x.((Food(x) & MoisturizedBySaline(x) & OralCavity(x)) -> EasierToCheek(x))", "all x.((Food(x) & MoisturedBySaft(x) & OralCavity(x)) -> EasierToCheek(x))", "all x y.((Food(x) & OralCavity(y) & Moisture(x,y)) -> EasierToCheek(x))", "all x.((Food(x) & MoistenedBySaft(x)) -> EasierToCheek(x))"]}
{"id": "eqasc_validation_1403", "nl": "Favorite food is steak.", "fol": "", "prediction": ["all x.(FavoriteFood(x) -> Steak(x))", "(FavoriteFood(steak))", "-FavoriteFood(x) -> Steak(x))", "FavoriteFood(steak)", "FavouriteFood(steak)", "all x.(FavoriteFood(x) -> Steak(x))", "(FavoriteFood(steak))", "FavoriteFood(x) -> Steak(x))", "FavoriteFood(steak)", "all x.((Food(x) & Favorite(x)) -> Steak(x))", "-FavoriteFood(steak)", "all x.(FavoriteFood(x) -> Steak(x))", "(FavoriteFood(steak))", "FavoriteFood(steak)", "all x.(FavoriteFood(x) -> Steak(x))", "all x.(FavoriteFood(x) -> Steak(x))"]}
{"id": "eqasc_validation_1404", "nl": "steak is easier to chew because it is moistened by saliva from the salivary glands", "fol": "", "prediction": ["all x.((Steak(x) & MoistenedBySaline(x)) -> EasierToCheek(x))", "all x y.((Steak(x) & SalivaryGlands(y) & MoistenedBy(x,y)) -> EasierToCheek(x))", "all x.((Steak(x) & MoistureDistributedBySaline(x)) -> EasierToCheek(x))", "all x y z.((Steak(x) & Saliva(y) & SalivaryGlands(z) & MoistenedBy(x,y,z)) -> EasierToCheek(x))", "all x y.((Steak(x) & SalivaryGlands(y) & Moisture(x,y)) -> EasierToCheek(x))", "(EasierToCheek(steak) -> (MoistenedBySaline(steak) & FromSalineGlands(steak)))", "(EasierToCheekDig(steak) -> (MoistenedBySaline(steak) & FromSalineGlands(steak)))", "all x y.((Steak(x) & Saliva(y) & MoistenedBy(x,y)) -> EasierToCheek(x))", "all x.((Steak(x) & MoisturizedBySaline(x)) -> EasierToCheek(x))", "all x y z.((Steak(x) & Saliva(y) & SalivaryGlands(z) & MoisturizedBy(x,y,z)) -> EasierToCheek(x))", "all x.((Steak(x) & MoistenedBySaline(x)) -> EasierToCheek(x))", "all x.((Steak(x) & MoistenedBySaliva(x) & FromSalivaryGlands(x)) -> EasierToCheek(x))", "all x.(Steak(x) -> (EasierToCheek(x) & MoistenedBySaline(x) & FromSalineGlands(x)))", "all x y.((Steak(x) & SalivaryGlands(y) & MoistenedBy(x,y)) -> EasierToCheek(x))", "all x.((Steak(x) & MoistenedBySavor(x) & SalivaryGlands(x)) -> EasierToCheek(x))", "all x.((Steak(x) & MoisturedBySaliva(x)) -> EasierToCheek(x))"]}
{"id": "eqasc_validation_1405", "nl": "Food enters the mouth and is partially broken down by chewing and by enzymes in saliva.", "fol": "", "prediction": ["all x y.((Food(x) & Mouth(y)) -> (Enters(x,y) & PartiallyBreakdown(x,y)))", "all x.(Food(x) -> (EntersMouth(x) & PartiallyBreakdown(x) & ByChoosing(x) & ByEnzymesInSaline(x)))", "all x y z.((Food(x) & Mouth(y) & Chewing(z) & EnzymesInSaline(x)) -> (Enters(x,y) & BreaksDownBy(x,z)))", "all x.(Food(x) -> (EntersMouth(x) & PartiallyBrokenDownByChoosing(x) & PartiallyBrokenDownByEnzymesInSaline(x)))", "all x y.((Food(x) & Mouth(y)) -> (Enters(x,y) & PartiallyBrokenDownBy(x,y) & Chewing(y) & EnzymesInSaline(y)))", "all x.(FoodEntersMouth(x) -> (BreaksDownByChoosing(x) & BreaksDownByEnzymes(x)))", "(all x.(Food(x) -> EntersMouth(x)) & (BreaksDownByChoosing(x) | BreaksDownByEnzymesInSaline(x)))", "(EntersMouth(Food) & PartiallyBreakdownByChoosingAndEnzymesInSaline(Food))", "all x y z.((Food(x) & Mouth(y) & Chewing(z)) -> (Enters(x,y) & BreaksDownBy(x,z) & EnzymesInSaline(x)))", "all x.(Food(x) -> (EntersMouth(x) & BreaksDownByChoosing(x) & BreaksDownByEnzymesInSaline(x)))", "all x y.((Food(x) & Mouth(y)) -> (Enters(x,y) & BreaksDownBy(x,y) & Chews(x) & EnzymesInSaline(x)))", "all x.(FoodEntersMouth(x) -> (BreaksDownByChoosing(x) & BreaksDownByEnzymesInSaline(x)))", "all x y.((Food(x) & Mouth(y) & Enters(x,y)) -> (BreaksDownByChoosing(x) & BreaksDownByEnzymes(x)))", "(all x.(Food(x) -> EntersMouth(x)) & (BreaksDownByChoosing(x) | BreaksDownByEnzymes(x)))", "all x y z.((Food(x) & Mouth(y) & Chewing(z) & EnzymesInSaline(z)) -> EntersAndBreaksDown(x,y,z))", "all x.(FoodEntersMouth(x) -> (BreaksDownByChoosing(x) & ByEnzymesInSaline(x)))"]}
{"id": "eqasc_validation_1406", "nl": "Food is easier to chew because of enzymes in the mouth", "fol": "", "prediction": ["all x y.((Food(x) & Enzyme(y) & InMouth(x,y)) -> EasierToCheek(x))", "all x.((Food(x) & EnzymesInMouth(x)) -> EasierToCheek(x))", "all x y z.((Food(x) & Enzyme(y) & Mouth(z)) -> EasierToCheek(x))", "all x y z.((Food(x) & EnzymeInMouth(y) & EnzymeInMouth(z)) -> EasierToCheek(x))", "all x y.((Food(x) & Enzyme(y) & InMouth(x,y)) -> EasierToCheek(x))", "(EasierToCheek(Food) -> EnzymesInMouth(Food))", "all x.((Food(x) & EnzymesInMouth(x)) -> EasierToCheek(x))", "all x y.((Food(x) & EnzymeInMouth(y)) -> EasierToCheek(x))", "all x.(FoodEasierToCheek(x) -> EnzymesInMouth(x))", "(EasierToCheek(Food) -> EnzymesInMouth(Food))", "all x.((Food(x) & EnzymesInMouth(x)) -> EasierToCheek(x))", "all x y z.((Food(x) & EnzymeInMouth(y) & EnzymeInMouth(z)) -> EasierToCheek(x))", "all x y.((Food(x) & Enzyme(y)) -> EasierToCheek(x))", "All x.(Food(x) -> EasierToCheek(x))", "all x.((Food(x) & EnzymesInMouth(x)) -> EasierToCheek(x))", "all x.((Food(x) & EnzymesInMouth(x)) -> EasyToCheek(x))"]}
{"id": "eqasc_validation_1407", "nl": "Besides, saliva contains digestive enzymes .", "fol": "", "prediction": ["all x.(Saline(x) -> ContainsDigestiveEnzymes(x))", "(all x.(Sulfur(x) -> DigestiveEnzymes(x)))", "all x y.((Sulfur(x) & DigestiveEnzymes(y)) -> Contains(x,y))", "all x.(Sulfur(x) -> DigestiveEnzymes(x))", "Besides, saliva contains digestiveEnzymes.", "Besides, saliva contains digestiveEnzymes (DigestiveEnzymes))", "(exists x.(Sulfur(x) & DigestiveEnzymes(x) & Contains(x,y)))", "(all x.(Saline(x) -> DigestiveEnzymes(x)))", "all x y.((Sulfur(x) & DigestiveEnzyme(y)) -> Contains(x,y))", "all x.(Saline(x) -> ContainsDigestiveEnzymes(x))", "(all x.(Sulfur(x) -> DigestiveEnzymes(x)))", "Besides, saliva contains digestiveEnzymes.", "all x.(Sulfur(x) -> DigestiveEnzymes(x))", "all x y.((Saline(x) & DigestiveEnzymes(y)) -> Contains(x,y))", "(all x.(Saline(x) -> DigestiveEnzymes(x)))", "all x.(Saline(x) -> ContainsDigestiveEnzymes(x))"]}
{"id": "eqasc_validation_1408", "nl": "Food is easier to chew due to digestive enzymes", "fol": "", "prediction": ["all x.((Food(x) & DigestiveEnzymes(x)) -> EasierToCheek(x))", "all x y.((Food(x) & DigestiveEnzymes(y)) -> EasierToCheek(x))", "all x y z.((Food(x) & DigestiveEnzymes(y) & DigestiveEnzymes(z)) -> EasierToCheek(x))", "(EasierToCheek(Food) & DigestiveEnzymes(Food,DigestiveEnzymes))", "all x.((Food(x) & DigestiveEnzymes(x)) -> EasierToCheek(x))", "all x y.((Food(x) & DigestiveEnzymes(y)) -> EasierToCheek(x,y))", "all x.(FoodEasierToCheek(x) -> DigestiveEnzymes(x))", "all x y z.((Food(x) & DigestiveEnzymes(y) & DigestiveEnzymes(z)) -> EasierToCheek(x))", "all x.((Food(x) & DigestiveEnzymes(x)) -> EasierToCheek(x))", "all x y.((Food(x) & DigestiveEnzymes(y)) -> EasierToCheek(x,y))", "all x.(FoodEasierToCheek(x) -> DigestiveEnzymes(x))", "All x y.((Food(x) & DigestiveEnzyme(y) & EasyToCheek(x)) -> DigestiveEnzymes(x,y))", "all x.((Food(x) & DigestiveEnzymes(x)) -> EasierToCheek(x))", "All x y.((Food(x) & DigestiveEnzymes(y)) -> EasierToCheekDueTo(x,y))", "all x.((Food(x) & DigestiveEnzymes(x)) -> EasyToCheek(x))", "all x.((Food(x) & DigestiveEnzymes(x)) -> EasierToCheek(x))"]}
{"id": "eqasc_validation_1409", "nl": "Salivary glands are found in the mouth.", "fol": "", "prediction": ["all x.(SalivaryGlands(x) -> FoundInMouth(x))", "all x y.((SalivaryGlands(x) & Mouth(y)) -> FoundIn(x,y))", "all x y z.((SalivaryGlands(x) & Mouth(y) & Mouth(z)) -> FoundIn(x,y,z))", "(all x.(SalivaryGlands(x) -> FoundInMouth(x)))", "all x.(SalivaryGlands(x) -> FoundInMouth(x))", "(exists x.(SalivaryGlands(x) & FoundInMouth(x)))", "all x y.((SalivaryGlands(x) & Mouth(y)) -> FoundIn(x,y))", "all x y z.((SalivaryGlands(x) & Mouth(y) & Mouth(z)) -> FoundIn(x,y,z))", "all x.(SalivaryGlands(x) -> FoundInMouth(x))", "all x y.((SalivaryGlands(x) & Mouth(y)) -> FoundIn(x,y))", "all x.(SalivaryGlands(x) -> FoundInMouth(x))", "all x y.((SalivaryGlands(x) & Mouth(y)) -> FoundIn(x,y))", "all x.(SalivaryGlands(x) -> FoundInMouth(x))", "exists x.(SalivaryGlands(x) & InMouth(x))", "all x.(SalivaryGlands(x) -> FoundInMouth(x))", "exists x.(SalivaryGlands(x) & FoundInMouth(x))"]}
{"id": "eqasc_validation_1410", "nl": "Food is easier to chew because it is moistened by saliva from glands found in the mouth", "fol": "", "prediction": ["all x.((Food(x) & MoistenedBySaline(x) & FoundInMouth(x)) -> EasierToCheek(x))", "all x y.((Food(x) & Gliom(y) & MoisturedBySulfur(x,y)) -> EasierToCheek(x))", "(EasierToCheek(Food) -> MoistenedBySaline(Food)) & exists x.(GlandsInMouth(Food) & FoundInMouth(Food)))", "all x.((Food(x) & MoisturedBySulfur(x) & FoundInMouth(x)) -> EasierToCheek(x))", "all x y z.((Food(x) & Glimmer(y) & Glimmer(z) & Moisture(x,y) & FromGlimmer(y,z)) -> EasierToCheek(x))", "all x y.((Food(x) & Glands(y)) -> MoistenedBySulfur(x,y))", "all x y z.((Food(x) & Saliva(y) & GlandsInMouth(z) & MoisturedBy(x,y,z)) -> EasierToCheek(x))", "all x y.((Food(x) & Gum(y) & MoistenedBySaline(x,y) & GlandsInMouth(x)) -> EasierToCheek(x))", "all x.((Food(x) & MoistenedBySulfur(x) & GlandsInMouth(x)) -> EasierToCheek(x))", "(EasierToCheek(Food) -> MoistenedBySalivaFromGlandsInMouth(Food))", "all x.((Food(x) & MoisturizedBySaline(x) & FoundInMouthGlands(x)) -> EasierToCheek(x))", "all x y z.((Food(x) & Glioms(y) & Mouth(z) & MoistenedBySulfur(x,y,z)) -> EasierToCheek(x))", "all x.(EasierToCheek(x) -> (Food(x) & MoistenedBySaline(x) & FromGlandsInMouth(x)))", "all x.((Food(x) & MoistenedBySaliva(x) & FoundInMouthGlands(x)) -> EasierToCheek(x))", "all x y.((Food(x) & Glimmer(y) & MoisturedBySulfur(x,y)) -> EasyToCheek(x))", "all x.((Food(x) & MoisturedBySulfur(x) & GlandsInMouth(x)) -> EasierToCheek(x))"]}
{"id": "eqasc_validation_1411", "nl": "Brain food Bagels are brain food.", "fol": "", "prediction": ["all x.(BirdFood(x) -> BrainFood(x))", "all x.(BloodFood(x) -> BrainFood(x))", "all x.(BodyFood(x) -> BrainFood(x))", "all x.(BirdFood(x) -> BrainFood(x))", "all x y.((Bagel(x) & BrainFood(y)) -> BrainFood(x,y))", "all x.(Bloodfood(x) -> BrainFood(x))", "all x.(BrainFood(x) -> BrainFood(x))", "(BrainFoodBagels)", "all x y.((Bagel(x) & BrainFood(y)) -> BrainFood(x))", "all x.(BodyFood(x) -> BrainFood(x))", "all x y.((Bagel(x) & BrainFood(y)) -> BrainFood(x,y))", "all x.(BirdFood(x) -> BrainFood(x))", "all x.(BrainFood(x) -> BrainFood(x))", "All x.(Bagel(x) -> BrainFood(x))", "All x.(Bonefood(x) -> BrainFood(x))", "ALL X.(BrainFood(x) -> BrainFood(x))"]}
{"id": "eqasc_validation_1412", "nl": "Bagels get easier to chew by being moistened by saliva from the salivary glands.", "fol": "", "prediction": ["all x.(Bagel(x) -> (MoistenedBySaline(x) & BagelsEasierToCheek(x)))", "all x.(Bagel(x) -> (EasierToCheek(x) & MoistenedBySaline(x)))", "all x y.((Bagel(x) & SalivaryGlands(y)) -> MoistenedBy(x,y))", "all x.((Bagel(x) & MoistureDistribution(x)) -> EasierToCheek(x))", "all x y z.((Bagel(x) & Saliva(y) & SalivaryGlands(z)) -> (EasierToCheek(x) & MoistenedBy(x,y,z)))", "all x y.((Bagel(x) & SalivaryGlands(y)) -> (EasierToCheek(x,y) & MoistenedBy(x,y)))", "all x y.((Bagel(x) & Saliva(y)) -> (MoistenedBy(x,y) & MoisturedBy(x,y)))", "(MoistenedBySaliva(bagels) -> EasierToCheek(bagels))", "all x.((Bagel(x) & MoistenedBySaline(x)) -> EasierToCheek(x))", "all x.(Bagel(x) -> (MoistenedBySaliva(x) & EasyToCheek(x)))", "all x y z.((Bagel(x) & SalivaryGlands(y) & Moisture(z)) -> (EasierToCheek(x,y) & MoistenedBy(x,z)))", "all x.((Bagel(x) & MoisturizedBySaliva(x)) -> EasierToCheek(x))", "all x.((Bagel(x) & MoistenedBySaliva(x,salivaryGlands)) -> EasierToCheek(x))", "all x.(Bagel(x) -> (EasierToCheek(x) & MoistenedBySaliva(x)))", "all x y.((Bagel(x) & SalivaryGlands(y)) -> MoistenedBy(x,y))", "all x.(Bakel(x) -> (MoistenedBySaline(x) & BagelsEasierToCheek(x)))"]}
{"id": "eqasc_validation_1413", "nl": "Feeds are mixed with saliva in the mouth to make a moist bolus that can be easily swallowed.", "fol": "", "prediction": ["all x y z.((Feed(x) & Saliva(y) & Mouth(z)) -> (MixedWith(x,y,z) & MakesMoistBolus(x) & CanBeEasilySneaked(x)))", "all x y.((Feed(x) & Saliva(y)) -> (MixedWith(x,y) & MoistBbolus(x) & CanBeEasilySneaked(x)))", "all x.(Feed(x) -> (MixedWithSaline(x) & MakesMoistBbolus(x) & CanBeEasilySneaked(x)))", "all x.(Feeds(x) -> (MixedWithSaline(x) & MakesMoistBbolus(x) & CanBeEasilySneaked(x)))", "(MixedWithSaftInMouth(Feeds) & MakesMoistBbolus(Feeds) & CanBeEasilySneaking(Feeds))", "all x y.((Feed(x) & Saliva(y)) -> (MixedWith(x,y) & MakesMoistBbolus(x) & CanBeEasilySneaked(x)))", "all x y z.((Feed(x) & Saliva(y) & Mouth(z)) -> (MixedWith(x,y,z) & MakesMoistBbolus(x) & CanBeEasilySneaked(x)))", "all x.((Feed(x) & SalivaInMouth(x)) -> MakesMoistBbolus(x))", "all x.(Feed(x) -> (MixedWithSaline(x) & MakesMoistBolus(x) & CanBeEasilySneaking(x)))", "all x y.((Feed(x) & Saliva(y)) -> MixedWithMouthToMakeMoistBolus(x,y))", "all x y z.((Feed(x) & Saliva(y) & Mouth(z) & MixedWith(x,y,z)) -> MoistBolus(x))", "all x.(Feeds(x) -> (MixedWithSaline(x) & MakesMoistBolus(x) & CanBeEasilySneaked(x)))", "all x.((Feeds(x) & SalivaInMouth(x)) -> MoistBbolus(x))", "all x y.((Feed(x) & Saliva(y) & Mouth(x)) -> MixedToMakeMoistBolus(x,y))", "all x.(Feeds(x) -> (MixedWithSaft(x) & MakesMoistBbolus(x) & CanBeEasilySneaking(x)))", "all x y z.((Feed(x) & Saliva(y) & Mouth(z)) -> MixedWithToMakeMoistBolus(x,y,z))"]}
{"id": "eqasc_validation_1414", "nl": "a bolus is moistened food", "fol": "", "prediction": ["all x.(Bulus(x) -> MoistenedFood(x))", "all x.(Bolus(x) -> MoistenedFood(x))", "all x y.((Bbolus(x) & Food(y)) -> Moistened(x,y))", "all x y.((Bolus(x) & Food(y)) -> Moistened(x,y))", "all x.(Bulus(x) -> MoistenedFood(x))", "all x y z.((Bbolus(x) & Food(y) & Moisture(z)) -> Moistened(x,y,z))", "all x y.((Bbolus(x) & Food(y) & Moistened(x,y)) -> Moistened(x))", "all x.(bolus(x) -> MoistenedFood(x))", "all x y z.((Bolus(x) & Food(y) & Moisture(z)) -> Moistened(x,y,z))", "all x.(Bolus(x) -> MoistenedFood(x))", "exists x,y,z.(Bolus(x) & MoistenedFood(y) & MoistenedFood(z))", "all x y.((Bolus(x) & Food(y)) -> Moistened(x,y))", "all x.(bolus(x) -> MoistenedFood(x))", "all x.(Bbolus(x) -> MoistenedFood(x))", "all x.(Bulus(x) -> MoistenedFood(x))", "exists x.(Bbolus(x) & MoistenedFood(x))"]}
{"id": "eqasc_validation_1415", "nl": "Saliva contributes more than 70 percent of the liquid in the rumen.", "fol": "", "prediction": ["all x.(Saliva(x) -> ContributesMoreThan70PercentLiquid(x))", "all x y.((Saliva(x) & Rumen(y)) -> ContributesMoreThan(x,y))", "(ContributesMoreThan70PercentLiquid(Saliva,Rumen))", "all x.(Saliva(x) -> ContributesMoreThan(x,70))", "all x y z.((Saliva(x) & Rumen(y) & Liquid(z)) -> ContributesMoreThan(x,y,z))", "all x y.((Saliva(x) & Rumen(y)) -> ContributesMoreThan70Percent(x,y))", "all x.(Saliva(x) -> ContributesMoreThan70PercentLiquidInRumen(x))", "all x.(Saliva(x) -> (ContributesMoreThan70PercentLiquid(x) & InRumen(x)))", "(ContributesMoreThan70PercentLiquid(Saliva,Rumen))", "all x y.((Saliva(x) & Rumen(y)) -> ContributesMoreThan70Percent(x,y))", "All x y z.((Saliva(x) & Rumen(y) & Liquid(z)) -> ContributesMoreThan(x,y,z))", "all x.(Saliva(x) -> ContributesMoreThan(x,70))", "all x y.((Saliva(x) & Rumen(y)) -> ContributesMoreThan(x,70))", "all x.(Saliva(x) -> (ContributesMoreThan(x,70)))", "all x.(Saliva(x) -> ContributesMoreThan70Percent(x,Rumen))", "exists x.(Saliva(x) & ContributesMoreThan(x,70))"]}
{"id": "eqasc_validation_1416", "nl": "Food is easier to chew because it is moistened by liquid", "fol": "", "prediction": ["all x y.((Food(x) & Liquid(y)) -> EasierToCheek(x))", "all x.((Food(x) & MoisturedByLiquid(x)) -> EasierToCheek(x))", "all x y z.((Food(x) & Liquid(y) & Moisture(z) & Moisture(z) & Moisture(z)) -> EasierToCheek(x))", "(MoistenedByLiquids(Food) -> EasierToCheek(Food))", "all x y.((Food(x) & Liquid(y)) -> (EasierToCheek(x) & MoisturedBy(x,y)))", "(EasierToCheek(Food) -> MoistenedByLiquid(Food,Liquid)))", "all x.((Food(x) & MoistenedByLiquid(x)) -> EasierToCheek(x))", "all x.((Food(x) & MoisturedByLiquid(x)) -> EasierToCheek(x))", "all x y.((Food(x) & Liquid(y) & Moisture(x,y)) -> EasierToCheek(x))", "all x y z.((Food(x) & Liquid(y) & MoisturizedBy(x,y) & MoisturizedBy(x,z)) -> EasierToCheek(x))", "all x y z.((Food(x) & Liquid(y) & Moisture(z) & Moisture(z) & Moisture(z)) -> EasierToCheek(x))", "all x.((Food(x) & MoistenedByLiquid(x)) -> EasierToCheek(x))", "all x.((Food(x) & MoisturizedByLiquid(x)) -> EasierToCheek(x))", "all x.((Food(x) & MoisturedByLiquids(x)) -> EasierToCheek(x))", "all x y.((Food(x) & Liquid(y)) -> EasierToCheek(x))", "all x.((Food(x) & MoistenedByLiquid(x)) -> EasierToCheek(x))"]}
{"id": "eqasc_validation_1417", "nl": "Milk is a nutritious fluid.", "fol": "", "prediction": ["all x.(Milk(x) -> NutritiousFluid(x))", "all x.(Milk(x) -> NutritiousFluid(x))", "all x y.((Milk(x) & NutritiousFluid(y)) -> Nutritious(x,y))", "(NutritiousFluid(milk,milk))", "all x.(Milk(x) -> NutritiousFluid(x))", "all x y.((Milk(x) & NutritiousFluid(y)) -> Milk(x))", "all x.(Milk(x) -> NutritiousFluid(x))", "(NutritiousFluid(milk,milk))", "all x.(Milk(x) -> NutritiousFlour(x))", "all x.(Milk(x) -> NutritiousFluid(x))", "all x.(Milk(x) -> NutritiousFluid(x))", "all x.(Milk(x) -> NutritiousFlour(x))", "all x.(Milk(x) -> NutritiousFluid(x))", "exists x.(Milk(x) & NutritiousFlour(x))", "All x.(Milk(x) -> NutritiousFluid(x))", "exists x.(Milk(x) & NutritiousFlour(x))"]}
{"id": "eqasc_validation_1418", "nl": "Cow's Milk Cow's milk is designed for baby cows.", "fol": "", "prediction": ["all x.(CowsMilk(x) -> DesignedForBabyCows(x))", "all x y.((CowsMilk(x) & Cow(y)) -> DesignedFor(x,y))", "all x.((CowsMilk(x) & Cow(y)) -> DesignedForBabyCows(x,y))", "all x.(CowsMilk(x) -> (DesignedForBabyCows(x) & CowsMilk(x)))", "(DesignedForBabyCows(cowmilk) & CowMilk(cowmilk))", "all x y.((CowsMilk(x) & Cow(y)) -> (DesignedForBabyCows(x,y) & DesignedFor(y,x)))", "all x y.((Cow'sMilk(x) & Cow(y)) -> DesignedFor(x,y))", "(DesignedForBabyCow(cow) & CowMilk(cow))", "all x.((CowsMilk(x) & Cow(y)) -> DesignedForBabyCows(x,y))", "(DesignedForBabyCows(cows,milk))", "all x.(Cow'sMilk(x) -> (DesignedForBabyCows(x) & CowsMilk(x)))", "all x.(CowsMilk(x) -> DesignedForBabyCows(x))", "all x y.((CowsMilk(x) & Cow(y)) -> DesignedFor(x,y))", "all x.(CowsMilk(x) -> (DesignedForBabyCows(x) & CowsMilk(x)))", "exists x.(CowsMilk(x) & CowsMilk(x))", "All x.(CowsMilk(x) -> DesignedForBabyCows(x))"]}
{"id": "eqasc_validation_1419", "nl": "cows make nutritious fluid", "fol": "", "prediction": ["all x.(Cow(x) -> MakesNutritiousFluid(x))", "all x y.((Cow(x) & Cow(y)) -> MakesNutritiousFluid(x,y))", "all x y z.((Cow(x) & Fluid(y) & Fluid(z)) -> MakesNutritious(x,y,z))", "all x.(Cow(x) -> MakesNutritiousFluid(x))", "all x y.((Cow(x) & Fluid(y)) -> MakesNutritious(x,y))", "all x.(Cow(x) -> (MakesNutritiousFluid(x) & MakesFluid(x)))", "all x.(Cow(x) -> MakesNutritiousFluid(x))", "all x y z.((Cow(x) & Fluid(y) & Fluid(z)) -> MakesNutritious(x,y,z))", "all x y.((Cow(x) & Cow(y)) -> MakesNutritiousFluid(x,y))", "all x.(Cow(x) -> (MakesNutritiousFluid(x) & MakesNutritiousFluid(x)))", "all x y.(Cow(x) -> (MakesNutritiousFluid(x,y) & Cow(y)))", "all x y.((Cow(x) & NutritiousFluid(y)) -> Makes(x,y))", "all x.(Cow(x) -> (MakesNutritiousFluid(x,y) & CowsMakesNutritiousFluid(y)))", "all x.((Cow(x) & MakesNutritiousFluid(x)) -> MakesFluid(x))", "all x.(Cow(x) -> MakesNutritiousFluid(x))", "all x.(Cow(x) -> MakesNourishingFluid(x))"]}
{"id": "eqasc_validation_1420", "nl": "Fluids to prevent dehydration and a nutritious diet are also important.", "fol": "", "prediction": ["all x.((Fluids(x) & PreventsDehydration(x) & NutritiousDiet(x)) -> Important(x))", "(All x.((Fluids(x) & PreventsDehydration(x)) -> NutritiousDiet(x)))", "all x.((Fluid(x) & PreventsDehydration(x) & NutritiousDiet(x)) -> Important(x))", "all x.((Fluids(x) & PreventsDehydration(x) & NutritiousDiet(x)) -> Important(x))", "all x y.((Fluid(x) & Dehydration(y) & NutritiousDiet(x)) -> Important(x))", "(PreventsDehydration(fluents) & NutritiousDiet(fluents))", "(all x.((Fluids(x) & PreventsDehydration(x)) -> NutritiousDiet(x)))", "(ImportantFluids(i) & PreventsDehydration(i) & NutritiousDiet(i))", "all x.((Fluids(x) & PreventsDehydration(x) & NutritiousDiet(x)) -> Important(x))", "exists x.(Fluid(x) & PreventsDehydration(x) & NutritiousDiet(x))", "all x.((Fluid(x) & PreventsDehydration(x) & NutritiousDiet(x)) -> Important(x))", "(All x.((Fluids(x) & PreventsDehydration(x)) -> NutritiousDiet(x)))", "all x y.((Fluids(x) & Dehydration(y) & NutritiousDiet(x)) -> Important(x,y))", "all x.((Fluids(x) & PreventsDehydration(x) & NutritiousDiet(x)) -> Important(x))", "all x.(Fluids(x) -> (PreventsDehydration(x) & NutritiousDiet(x)))", "all x.((Fluids(x) & PreventsDehydration(x) & NutritiousDiet(x)) -> Important(x))"]}
{"id": "eqasc_validation_1421", "nl": "Milk is nutritious and prevents dehydration.", "fol": "", "prediction": ["all x.(Milk(x) -> (Nutritious(x) & PreventsDehydration(x)))", "(Nutritious(milk) & PreventsDehydration(milk))", "(NaturalMilk(Milk) & PreventsDehydration(Milk))", "all x.(Milk(x) -> (Nutritious(x) & PreventsDehydration(x)))", "all x y.((Milk(x) & Nutritious(x) & PreventsDehydration(y)) -> Nutritious(x))", "all x y.((Milk(x) & Nutritious(x) & Dehydration(y)) -> Prevents(x,y))", "all x.(Milk(x) -> (Nutritious(x) & PreventsDehydration(x)))", "all x y.((Milk(x) & Dehydration(y)) -> (Nutritious(x,y) & Prevents(x,y)))", "all x.(Milk(x) -> (Naturally(x) & PreventsDehydration(x)))", "all x.(Milk(x) -> (Nutritious(x) & PreventsDehydration(x)))", "all x.(Milk(x) -> (Nutritious(x) & PreventsDehydration(x)))", "all x.(Milk(x) -> (Nutritious(x) & PreventsDehydration(x)))", "all x.(Milk(x) -> (Naturally(x) & PreventsDehydration(x)))", "exists x.(Milk(x) & Nutritious(x) & PreventsDehydration(x))", "all x.(Milk(x) -> (Nutritious(x) & PreventsDehydration(x)))", "All x.(Milk(x) -> (Nutritious(x) & PreventsDehydration(x)))"]}
{"id": "eqasc_validation_1422", "nl": "Fluid milk is fortified with vitamin D and rich in calcium.", "fol": "", "prediction": ["all x.(FluidMilk(x) -> (FortifiedWithVitaminD(x) & RichInCalcium(x)))", "all x y.((FluidMilk(x) & VitaminD(y)) -> (FortifiedWith(x,y) & RichInCalcium(x)))", "(FortifiedWithVitaminD(fluentMilk) & RichInCalcium(fluentMilk))", "all x.(FluidMilk(x) -> (FortifiedWithVitaminD(x) & RichInCalcium(x)))", "all x.(FlourMilk(x) -> (FortifiedWithVitaminD(x) & RichInCalcium(x)))", "all x y.((FluidMilk(x) & VitaminD(y)) -> (FortifiedWith(x,y) & RichInCalcium(x)))", "(FortifiedWithVitaminD(m) & RichInCalcium(m))", "all x y.((FluidMilk(x) & VitaminD(y)) -> (Fortified(x,y) & RichInCalcium(x)))", "all x.(FlourishMilk(x) -> (FortifiedWithVitaminD(x) & RichInCalcium(x)))", "all x.(FluidMilk(x) -> (FortifiedWithVitaminD(x) & RichInCalcium(x)))", "(FortifiedWithVitaminD(fluentMilk) & RichInCalcium(fluentMilk))", "all x.((FluidMilk(x) & FortifiedWithVitaminD(x) & RichInCalcium(x)) -> FortifiedWith(x,VitaminD))", "all x y.((FluidMilk(x) & VitaminD(y)) -> FortifiedWith(x,y) & RichInCalcium(x))", "all x.(FluidMilk(x) -> (FortifiedWithVitaminD(x) & RichInCalcium(x)))", "all x.(FluidMilk(x) -> (FortifiedWithVitaminD(x) & RichInCalcium(x)))", "all x.(FluidMilk(x) -> (FortifiedWithVitaminD(x) & RichInCalcium(x)))"]}
{"id": "eqasc_validation_1423", "nl": "Milk is nutritious because it has vitamin D and calcium", "fol": "", "prediction": ["all x.((Milk(x) & VitaminD(x) & Calcium(x)) -> Nutritious(x))", "all x y.((Milk(x) & VitaminD(y) & Calcium(y)) -> Nutritious(x))", "(NaturalMilk(milk) -> (VitaminD(milk) & Calcium(milk)))", "all x.((Milk(x) & VitaminD(x) & Calcium(x)) -> Nutritious(x))", "(NutritiousMilk(Milk) -> (VitaminD) & Calcium(Milk)))", "all x y z.((Milk(x) & VitaminD(y) & Calcium(z)) -> Nutritious(x))", "all x y.((Milk(x) & VitaminD(y) & Calcium(y)) -> Nutritious(x))", "all x.(Milk(x) -> (Nutritious(x) & VitaminD(x) & Calcium(x)))", "all x.((Milk(x) & VitaminD(x) & Calcium(x)) -> Nutritious(x))", "(NaturalMilk(milk) -> (VitaminD(milk) & Calcium(milk)))", "all x y.((Milk(x) & VitaminD(y) & Calcium(z) & Has(x,y,z)) -> Nutritious(x))", "all x.((Milk(x) & VitaminD(x) & Calcium(x)) -> Nutritious(x))", "all x.((Milk(x) & Nutritious(x)) -> (VitaminD(x) & Calcium(x)))", "all x.((Milk(x) & VitaminD(x) & Calcium(x)) -> Nutritious(x))", "all x.((Milk(x) & VitaminD(x) & Calcium(x)) -> Nutritious(x))", "all x.((Milk(x) & VitaminD(x) & Calcium(x)) -> Nutritious(x))"]}
{"id": "eqasc_validation_1424", "nl": "Breast milk is the ideal nutrition for a newborn.", "fol": "", "prediction": ["all x.(BreastMilk(x) -> IdealNutritionForNewborn(x))", "all x y.((BreastMilk(x) & Newborn(y)) -> IdealNutrition(x,y))", "all x.((BreastMilk(x) & Newborn(x)) -> IdealNutrition(x))", "all x y.((BreastMilk(x) & Newborn(y)) -> IdealNutrition(x,y))", "all x y z.((BreastMilk(x) & Newborn(y) & Newborn(z)) -> IdealNutrition(x,y,z))", "all x.(BreastMilk(x) -> IdealNutritionForNewborn(x))", "all x.((BreastMilk(x) & Newborn(y)) -> IdealNutrition(x,y))", "(IdealNutritionForNewborn(BreastMilk))", "all x y.((BreastMilk(x) & Newborn(y)) -> IdealNutrition(x,y))", "all x.(BreastMilk(x) -> IdealNutrition(x,Newborn))", "all x.((BreastMilk(x) & Newborn(x)) -> IdealNutrition(x))", "all x y.((BreastMilk(x) & Newborn(y)) -> IdealNutrition(x,y))", "all x.(BreastMilk(x) -> IdealNutritionForNature(x))", "all x y.((BreastMilk(x) & Newborn(y)) -> IdealNutrition(x,y))", "exists x.(BreastMilk(x) & IdealNutrition(x,Newborn))", "all x y.((BreastMilk(x) & Newborn(y)) -> IdealNutrition(x,y))"]}
{"id": "eqasc_validation_1425", "nl": "newborns get nutrition from breasts", "fol": "", "prediction": ["all x.(Newborn(x) -> GetsNutritionFromBreasts(x))", "all x y.((Newborn(x) & Breast(y)) -> GetsNutritionFrom(x,y))", "all x.(Nature(x) -> (GetsNutritionFromBreasts(x) & Breasts(x)))", "all x y z.((Newborn(x) & Breast(y) & Breast(z)) -> GetsNutritionFrom(x,y,z))", "all x.((Newborn(x) & Breast(x)) -> GetsNutritionFrom(x,y))", "all x y.((Newborn(x) & Breast(y)) -> GetsNutritionFrom(x,y))", "all x.(Newborn(x) -> GetsNutritionFromBreasts(x))", "(all x.(Nature(x) -> GetsNutritionFromBreasts(x)))", "all x y z.((Newborn(x) & Breast(y) & Breast(z)) -> GetsNutritionFrom(x,y,z))", "all x.(Nature(x) -> GetsNutritionFromBreasts(x))", "all x y.((Nature(x) & Breast(y)) -> GetsNutritionFrom(x,y))", "(all x.(Newborn(x) -> GetsNutritionFromBreasts(x)))", "all x.(Newborn(x) -> (GetsNutritionFromBreasts(x) & Breasts(x)))", "all x y.((Newborn(x) & Breast(y)) -> GetsNutritionFrom(x,y))", "all x.(Natal(x) -> (GetsNutritionFromBreasts(x) & FromBreasts(x)))", "(all x.(Newborn(x) -> GetsNutritionFromBreasts(x)))"]}
{"id": "eqasc_validation_1426", "nl": "Milk comes from Cows.", "fol": "", "prediction": ["all x.(Milk(x) -> ComesFrom(x,Cows))", "all x y.((Milk(x) & Cow(y)) -> ComesFrom(x,y))", "all x.(Milk(x) -> Cow(x))", "(all x.(Milk(x) -> Cow(x)))", "(ComesFrom(Milk(Milk) & Cow(Milk))", "all x y.((Milk(x) & Cow(y)) -> ComesFrom(x,y))", "all x y z.((Milk(x) & Cow(y) & Cow(z)) -> ComesFrom(x,y,z))", "all x.(Milk(x) -> ComesFromCows(x))", "(ComesFrom(Milk(Milk,Cows))", "all x y.((Milk(x) & Cow(y)) -> ComesFrom(x,y))", "all x.(Milk(x) -> Cow(x))", "All x.(Milk(x) -> ComesFrom(x,Cows))", "all x y.((Milk(x) & Cow(y)) -> ComesFrom(x,y))", "All x.(Milk(x) -> Cow(x))", "All x y.((Milk(x) & Cow(y)) -> ComesFrom(x,y))", "exists x.(Milk(x) & Cow(x))"]}
{"id": "eqasc_validation_1427", "nl": "Milk shakes have milk.", "fol": "", "prediction": ["all x.(MilkShake(x) -> HasMilk(x))", "all x.(MilkShake(x) -> HasMilk(x))", "(all x.(MilkShake(x) -> HasMilk(x)))", "all x y.((MilkShake(x) & Milk(y)) -> Has(x,y))", "all x.(MilkShake(x) -> HasMilk(x))", "all x y.((MilkShake(x) & Milk(y)) -> HasMilk(x,y))", "all x.(MilkShake(x) -> HasMilk(x))", "all x y.((MilkShake(x) & Milk(y) & Has(x,y)) -> Has(x,y))", "all x y.((MilkShake(x) & Milk(y)) -> Has(x,y))", "all x.(MilkShake(x) -> HasMilk(x))", "exists x.(Shake(x) & Milk(x))", "exists x.(MilkShakes(x) & Milk(y) & Has(x,y))", "all x.(MilkShake(x) -> HasMilk(x))", "exists x.(MilkShake(x) & Milk(x))", "all x.(MilkShake(x) -> HasMilk(x))", "exists x.(MilkShake(x) & Milk(x))"]}
{"id": "eqasc_validation_1428", "nl": "milkshakes are a nutritious fluid", "fol": "", "prediction": ["all x.(Milkshake(x) -> NutritiousFluid(x))", "all x y.((Milkshake(x) & Fluid(y)) -> Nutritious(x,y))", "all x.(Milkshake(x) -> NutritiousFluid(x))", "(NutritiousFluid(milkshakes) & NutritiousFluid(milkshakes))", "all x y z.((Milkshake(x) & Fluid(y) & Fluid(z)) -> Nutritious(x,y,z))", "all x y.((Milkshake(x) & Fluid(y)) -> Nutritious(x,y))", "all x.(Milkshake(x) -> (NutritiousFluid(x) & NutritiousFluid(x)))", "all x.(Milkshake(x) -> NutritiousFluid(x))", "all x.(MilkShakes(x) -> NutritiousFluid(x))", "all x y.((Milkshake(x) & Fluid(y)) -> Nutritious(x,y))", "all x.(Milkshake(x) -> NutritiousFluid(x))", "all x y.((Milkshake(x) & NutritiousFluid(y)) -> Milkshake(x))", "all x.(Milkshake(x) -> (NutritiousFluid(x) & NutritiousFluid(x)))", "all x y.((Milkshake(x) & Fluid(y)) -> Nutritious(x,y))", "all x.(MilkShakes(x) -> NutritiousFluid(x))", "all x.(Milkshake(x) -> NutritiousFluid(x))"]}
{"id": "eqasc_validation_1429", "nl": "cows produce nutritious fluid", "fol": "", "prediction": ["all x.(Cow(x) -> ProducesNutritiousFluid(x))", "all x y.((Cow(x) & Cow(y)) -> ProducesNutritiousFluid(x,y))", "all x y z.((Cow(x) & NutritiousFluid(y) & Cow(z)) -> Produces(x,y,z))", "all x.(Cow(x) -> ProducesNutritiousFluid(x))", "all x y.((Cow(x) & Cow(y)) -> ProducesNutritiousFluid(x,y))", "all x y z.((Cow(x) & Fluid(y) & Fluid(z)) -> ProducesNutritious(x,y,z))", "all x.(Cow(x) -> (ProducesNutritiousFluid(x) & ProducesFluid(x)))", "all x.(Cow(x) -> ProducesNutritiousFluid(x))", "all x y.((Cow(x) & NutritiousFluid(y)) -> Produces(x,y))", "all x.((Cow(x) & ProducesNutritiousFluid(x)) -> ProducesFluid(x))", "all x y.((Cow(x) & NutritiousFlour(y)) -> Produces(x,y))", "all x.(Cow(x) -> ProducesNutritiousFluid(x))", "all x.(Cow(x) -> (ProducesNutritiousFluid(x) & ProducesFluid(x)))", "all x y.((Cow(x) & Cow(y)) -> ProducesNutritiousFluid(x,y))", "all x.(Cow(x) -> ProducesNourishingFluid(x))", "all x.(Cow(x) -> ProducesNutritiousFlour(x))"]}
{"id": "eqasc_validation_1430", "nl": "Milk prevents dehydration.", "fol": "", "prediction": ["all x.(Milk(x) -> PreventsDehydration(x))", "all x.(Milk(x) -> PreventsDehydration(x))", "(PreventsDehydration(milk) -> Milk(milk))", "all x y.((Milk(x) & Dehydration(y)) -> Prevents(x,y))", "all x.(Milk(x) -> PreventsDehydration(x))", "(PreventsDehydration(milk) -> Milk(milk))", "all x y.((Milk(x) & Dehydration(y)) -> Prevents(x,y))", "all x.(Milk(x) -> PreventsDehydration(x))", "all x y.((Milk(x) & Dehydration(y)) -> Prevents(x,y))", "all x y.((Milk(x) & Dehydration(y)) -> Prevents(x,y))", "all x.(Milk(x) -> PreventsDehydration(x))", "all x.(Milk(x) -> PreventsDehydration(x))", "all x.(Milk(x) -> PreventsDehydration(x))", "all x.(Milk(x) -> PreventsDehydration(x))", "All x.(Milk(x) -> PreventsDehydration(x))", "All x.(Milk(x) -> PreventsDehydration(x))"]}
{"id": "eqasc_validation_1431", "nl": "Birth may be followed by a period of parental care of the offspring.", "fol": "", "prediction": ["all x y.((Birth(x) & Offspring(y)) -> FollowedByParentalCare(x,y))", "all x.(Birth(x) -> FollowedByParentalCare(x))", "all x.((Birth(x) & ParentalCare(x)) -> Follows(x,Offspring))", "all x y z.((Birth(x) & ParentalCare(y) & Offspring(z)) -> FollowedBy(x,y,z))", "all x y.((Birth(x) & ParentalCare(y)) -> FollowedBy(x,y))", "all x y.((Birth(x) & Offspring(y)) -> FollowedByParentalCare(x,y))", "(PatientCareOfOffspring(Birth) & FollowedBy(Birth))", "(PaternalCarePeriod(Birth) -> FollowedBy(Birth(Birth))", "all x y z.((Birth(x) & ParentalCare(y) & Offspring(z)) -> FollowedBy(x,y,z))", "all x.(Birth(x) -> FollowedByParentalCare(x))", "all x.((Birth(x) & ParentalCare(x)) -> Follows(x,Offspring))", "exists x.(Birth(x) & ParentalCare(x) & Offspring(x))", "all x y.((Birth(x) & Offspring(y)) -> FollowedByParentalCare(x,y))", "all x y.((Birth(x) & ParentalCare(y)) -> FollowedBy(x,y))", "all x.((Birth(x) & ParentalCare(x)) -> FollowedBy(x,Offspring))", "all x y.((Birth(x) & Offspring(y)) -> (ParentalCare(x,y) & FollowedBy(x,y)))"]}
{"id": "eqasc_validation_1432", "nl": "Parents take care of children.", "fol": "", "prediction": ["all x y.((Parent(x) & Child(y)) -> TakesCareOf(x,y))", "all x y z.((Parent(x) & Child(y) & Child(z)) -> TakesCareOf(x,y,z))", "all x.(Parent(x) -> TakesCareOfChildren(x))", "all x y.((Parent(x) & Child(y)) -> TakesCareOf(x,y))", "all x y z.((Parent(x) & Child(y) & Child(z)) -> TakesCareOf(x,y,z))", "all x.(Parent(x) -> TakesCareOfChildren(x))", "all x y.((Parent(x) & Child(y)) -> TakesCareOf(x,y))", "exists x.(Parent(x) & Child(y) & TakesCareOf(x,y))", "all x y z.((Parent(x) & Child(y) & Child(z)) -> TakesCareOf(x,y,z))", "all x.(Parent(x) -> TakesCareOfChildren(x))", "all x y.((Parent(x) & Child(y)) -> TakesCareOf(x,y))", "exists x.(Parent(x) & Children(x) & TakesCareOf(x,Children))", "all x y.((Parent(x) & Child(y)) -> TakesCare(x,y))", "all x y z.((Parent(x) & Child(y) & Child(z)) -> TakesCareOf(x,y,z))", "exists x.(Parent(x) & Child(y) & TakesCareOf(x,y))", "all x y.((Parent(x) & Child(y)) -> TakesCareOf(x,y))"]}
{"id": "eqasc_validation_1433", "nl": "Birth may be followed by parental nurturing", "fol": "", "prediction": ["all x y.((Birth(x) & ParentalNourishment(y)) -> FollowedBy(x,y))", "all x.((Birth(x) & ParentalNourishment(x)) -> FollowedBy(x,ParentalNourishment))", "all x y z.((Birth(x) & ParentalNavigation(y) & ParentalNavigation(z)) -> FollowedBy(x,y,z))", "(ParentalNourishment(Birth) & FollowedBy(Birth,ParentalNourishment))", "all x.(Birth(x) -> (ParentalNourishment(x) & FollowsBirth(x)))", "all x y.((Birth(x) & ParentalNavigation(y)) -> MayBeSuffied(x,y))", "all x.((Birth(x) & ParentalNavigation(x)) -> FollowedBy(x,ParentalNavigation))", "(PaternalNourishment(Birth) -> FollowedBy(Birth,ParentalNourishment))", "all x y z.((Birth(x) & ParentalNourishment(y) & ParentalNourishment(z)) -> MayBeSuffied(x,y,z))", "all x.(Birth(x) -> (ParentalNourishment(x) | FollowedBy(x,ParentalNourishment)))", "all x.((Birth(x) & ParentalNourishment(x)) -> MayBeSuffiedBy(x,ParentalNourishment))", "all x y.((Birth(x) & ParentalNourishment(y)) -> FollowedBy(x,y))", "exists x.(ParentalNourishment(x) & FollowsBirth(x))", "all x y z.((Birth(x) & ParentalNavigation(y) & ParentalNavigation(z)) -> FollowedBy(x,y,z))", "all x y.((Birth(x) & ParentalNavigation(y)) -> MayBeFocusedBy(x,y))", "exists x.(ParentalNavigation(x) & FollowsBirth(x))"]}
{"id": "eqasc_validation_1434", "nl": "Among monogamous species of birds and mammals, both parents often care for their offspring.", "fol": "", "prediction": ["all x y.((MonogamousSpecies(x) & MonogamousSpecies(y)) -> (Parent(x,y) & Offspring(x)))", "all x y.((MomgamousSpecies(x) & MonogamousSpecies(y)) -> (CareForOffspring(x,y) | CareForOffspring(x,y)))", "(all x.((Bird(x) & Mammal(x)) -> CaresForOffspring(x)))", "all x.((Bird(x) | Mammal(x)) -> (CareForOffspring(x) | CareForOffspring(x)))", "all x y z.((MonogamousSpecies(x) & MonogamousSpecies(y) & Bird(z) & Mammal(z)) -> (CareForOffspring(x,y,z) | CareForOffspring(x,y,z)))", "all x.((MomgamousSpecies(x) & MonogamousSpecies(x)) -> (CareForOffspring(x) | CareForOffspring(x)))", "(all x.((Bird(x) | Mammal(x)) -> Monogamous(x)) & ((Parent(x) & Offspring(x)) | (Parent(x) & Offspring(x)))))", "(all x y.((Bird(x) & Mammal(y)) -> Monogamous(x,y)) & ((Parent(x,y) & Offspring(y)) | (Parent(x,y) & Offspring(y)))))", "all x y.((MonogamousSpecies(x) & MonogamousSpecies(y)) -> (CareForOffspring(x,y) | CareForOffspring(x,y)))", "all x.((MonogamousSpecies(x) & MonogamousSpecies(x)) -> (CareForOffspring(x) | CareForOffspring(x)))", "(exists x.(MammalSpecies(x) & Monogamous(x)) & exists y.(BirdSpecies(y) & MammalSpecies(y) & Monogamous(x,y)))", "all x y z.((MomgamousSpecies(x) & MonogamousSpecies(y) & Bird(z) & Mammal(z)) -> (CareForOffspring(x,y,z) | CareForOffspring(x,y,z)))", "all x y.((MomgamousSpecies(x) & MonogamousSpecies(y)) -> (Parent(x,y) & Offspring(y)))", "all x y.((Bird(x) & Mammal(y)) -> (Parent(x,y) & Parent(x,y)))", "exists x.(Parent(x) & (Bird(x) | Mammal(x)) & Monogamous(x))", "all x.((Bird(x) & Mammal(x)) -> (CareForOffspring(x) | CareForOffspring(x)))"]}
{"id": "eqasc_validation_1435", "nl": "The period of parental care after birth for manogamous species are handled by both parents", "fol": "", "prediction": ["all x y.((ParentalCareAfterBirth(x) & ManogamousSpecies(y)) -> HandledBy(x,y))", "all x y z.((ParentalCare(x) & ManogamousSpecies(y) & Parent(z)) -> (HandledBy(x,y,z) & HandledBy(x,y,z)))", "all x.((ParentalCareAfterBirth(x) & ManogamousSpecies(x)) -> HandledByParents(x))", "all x y.((ParentalCare(x) & ManogamousSpecies(y)) -> (HandledBy(x,y) & HandledBy(x,y)))", "all x y z.((ParentalCareAfterBirth(x) & ManogamousSpecies(y) & Parent(z)) -> (HandledBy(z,y) & HandledBy(z,y)))", "(all x y.((ParentalCareAfterBirth(x) & ManogamousSpecies(y)) -> HandledByParents(x,y)))", "(all x.((ParentalCareAfterBirth(x) & ManogamousSpecies(x)) -> HandledByParents(x,y))", "all x y.((ParentalCareAfterBirth(x) & ManogamousSpecies(y)) -> (HandledBy(x,y) & HandledBy(x,y)))", "all x.((ParentalCareAfterBirth(x) & ManogamousSpecies(x)) -> HandledByParents(x))", "all x.((ParentalCareAfterBirthForManogamousSpecies(x) & HandledByParents(x)) -> (ManogamousSpecies(x) & ManogamousSpecies(x)))", "all x y.((ParentalCare(x) & ManogamousSpecies(y)) -> (HandledByParents(x,y) & HandledByParents(x,y)))", "all x y z.((ParentalCare(x) & ManogamousSpecies(y) & Parent(z)) -> (HandledBy(z,y) & HandledBy(z,y)))", "(All x.((ParentalCareAfterBirth(x) & ManogamousSpecies(x)) -> HandledByParents(x))", "all x.((ParentalCareAfterBirth(x) & ManogamousSpecies(x)) -> (HandledByParents(x,y) & HandledByParents(x,z)))", "all x.((ParentalCareAfterBirth(x) & ManogamousSpecies(x)) -> HandledByParents(x,y))", "all x y.((ParentalCareAfterBirth(x) & ManogamousSpecies(y)) -> HandledByParents(x,y))"]}
{"id": "eqasc_validation_1436", "nl": "Child' is ambiguous between 'offspring' and 'immature offspring'.", "fol": "", "prediction": ["all x.((Child(x) & Offspring(x) & ImmatureOffspring(x)) -> Ambiguous(x))", "all x y.((Child(x) & Offspring(y)) -> Ambiguous(x,y))", "all x.((Child(x) & Offspring(x) & ImmatureOffspring(x)) -> Ambiguous(x))", "all x y.((Child(x) & Offspring(y) & ImmatureOffspring(y)) -> Ambiguous(x,y))", "((Offspring(x) & ImmatureOffspring(x)) -> Ambiguous(x))", "(Alternative(child) & Ambiguous(child,offspring) & Ambiguous(child,immature))", "(ambiguous(Child(Child) & 'Offspring(Child)) & -ImmatureOffspring(Child))", "(ambiguous(Child(Child) & Offspring(Child))", "(ExactlySeparateOffspring(x) & ImmatureOffspring(x))", "exists x.(Child(x) & Ambiguous(x))", "exists x.(Child(x) & Ambiguous(x,Offspring) & Ambiguous(x,ImmatureOffspring))", "all x.((Child(x) & Offspring(x)) -> Ambiguous(x))", "exists x.(Child(x) & AmbiguousBetweenOffspring(x) & AmbiguousBetweenOffspring(x))", "all x y.((Child(x) & Offspring(y) & ImmatureOffspring(x)) -> Ambiguous(x,y))", "exists x.(Child(x) & Ambiguous(x,Offspring,ImmatureOffspring))", "all x y.((Child(x) & Offspring(y)) -> Ambiguous(x,y))"]}
{"id": "eqasc_validation_1437", "nl": "Birth may be followed by a period of parental care of the child.", "fol": "", "prediction": ["all x y.((Birth(x) & ParentalCare(y)) -> FollowedBy(x,y))", "all x.((Birth(x) & ParentalCare(x)) -> FollowedBy(x,y))", "all x.(Birth(x) -> (ParentalCare(x) | ChildCare(x)))", "all x y z.((Birth(x) & ParentalCare(y) & Child(z)) -> FollowedBy(x,y,z))", "all x y.((Birth(x) & ParentalCare(y)) -> FollowedBy(x,y))", "(PaternalCarePeriod(Birth))", "all x.(Birth(x) -> FollowedByParentalCare(x))", "all x.((Birth(x) & ParentalCare(x)) -> Follows(x,y))", "all x y.((Birth(x) & ParentalCare(y)) -> Follows(x,y))", "all x y z.((Birth(x) & ParentalCare(y) & Child(z)) -> FollowedBy(x,y,z))", "all x y.((Birth(x) & Child(y)) -> FollowedByParentalCare(x,y))", "exists x.(Birth(x) & ParentalCare(x) & Child(x))", "all x.((Birth(x) & ParentalCare(x)) -> FollowedBy(x,child))", "all x y.((Birth(x) & ParentalCare(y)) -> FollowedBy(x,y))", "exists x.(Birth(x) & FollowedByParentalCare(x))", "all x y.((Birth(x) & ParentalCare(y)) -> Follows(x,y))"]}
{"id": "eqasc_validation_1438", "nl": "Human birth is the rarest of all births.", "fol": "", "prediction": ["all x.(HumanBirth(x) -> RarestOfAllBirths(x))", "(RarestOfAllBirths(HumanBirth))", "all x y.((HumanBirth(x) & Birth(y)) -> RarestOfAll(x,y))", "all x.(HumanBirth(x) -> RarestOfAllBirths(x))", "(RarestOfAllBirths(HumanBirth) -> RarestOfAllBirths(HumanBirth))", "all x.(HumanBirth(x) -> RarestOfBirths(x))", "(RarestOfAllBirths(HumanBirth))", "all x y.((HumanBirth(x) & Birth(y)) -> Rarest(x,y))", "all x y.((HumanBirth(x) & Birth(y)) -> RarestOfAll(x,y))", "all x.(HumanBirth(x) -> RarestOfAllBirths(x))", "all x.(HumanBirth(x) -> RarestOfBirths(x))", "all x y.((HumanBirth(x) & Birth(y)) -> Rarest(x,y))", "all x.(HumanBirth(x) -> RarestOfAllBirths(x))", "all x.(HumanBirth(x) -> RarestOfAllBirths(x))", "all x.(HumanBirth(x) -> RarestOfBirths(x))", "all x.(HumanBirth(x) -> Rarest(x))"]}
{"id": "eqasc_validation_1439", "nl": "humans have a period of parental care of their offspring", "fol": "", "prediction": ["all x y.((Human(x) & Offspring(y)) -> HasParentalCare(x,y))", "all x y z.((Human(x) & Offspring(y) & ParentalCare(z)) -> HasPeriodOfCare(x,y,z))", "all x.(Human(x) -> HasParentalCare(x))", "all x y.((Human(x) & Offspring(y)) -> HasParentalCare(x,y))", "all x.(Human(x) -> HasParentalCare(x,Offspring))", "(All x.(Human(x) -> HasParentalCare(x,Offspring)))", "all x y z.((Human(x) & Offspring(y) & ParentalCare(z)) -> HasPeriodOfCare(x,y,z))", "all x.(Human(x) -> (HasParentalCare(x) & OffspringHasOffspringCare(x)))", "all x.(Human(x) -> HasParentalCareOfOffspring(x))", "all x y.((Human(x) & Offspring(y)) -> HasParentalCare(x,y))", "all x y z.((Human(x) & Offspring(y) & ParentalCare(z)) -> HasPatientOf(x,y,z))", "all x.(Humans(x) -> HasParentalCareOfOffspring(x))", "all x.(Human(x) -> HasParentalCare(x,Offspring))", "all x y.((Human(x) & Offspring(y)) -> HasParentalCare(x,y))", "all x y.((Human(x) & Offspring(y)) -> HasParentalCarePeriod(x,y))", "all x.(Humans(x) -> HasParentalCareOfOffspring(x))"]}
{"id": "eqasc_validation_1440", "nl": "Females give birth to a single baby.", "fol": "", "prediction": ["all x.(Female(x) -> GivesBirthToSingleBaby(x))", "all x y.((Female(x) & SingleBirth(y)) -> GivesBirthTo(x,y))", "all x y z.((Female(x) & SingleBirth(y) & Baby(z)) -> GivesBirthTo(x,y,z))", "all x.(Female(x) -> GivesBirthToSingleBaby(x))", "all x y.((Female(x) & SingleBirth(y)) -> GivesBirthTo(x,y))", "all x.((Female(x) & SingleBaby(x)) -> GivesBirthTo(x,y))", "all x y.((Female(x) & SingleBaby(y)) -> GivesBirthTo(x,y))", "all x.(Female(x) -> GivesBirthToSingleBaby(x))", "all x y z.((Female(x) & SingleBirth(y) & Baby(z)) -> GivesBirthTo(x,y,z))", "all x y.((Female(x) & SingleBirth(y)) -> GivesBirthTo(x,y))", "all x.(Female(x) -> GivesBirthToSingleBirth(x))", "all x y.((Female(x) & SingleBaby(y)) -> GivesBirthTo(x,y))", "all x y.((Female(x) & SingleBirth(y)) -> GivesBirthTo(x,y))", "all x.(Female(x) -> GivesBirthToSingleBaby(x))", "exists x.(Female(x) & SingleBirth(x))", "all x.(Female(x) -> GivesBirthToSingleBirth(x))"]}
{"id": "eqasc_validation_1441", "nl": "babies are offspring that most likely have parental care", "fol": "", "prediction": ["all x.(Baby(x) -> (Offspring(x) & Most likelyHasParentalCare(x)))", "all x y.((Bird(x) & Offspring(y)) -> (Offspring(x,y) & Most likelyHasParentalCare(x)))", "all x.(Baby(x) -> (Offspring(x) & MostLikelyHasParentalCare(x)))", "all x y.((Baby(x) & Offspring(y)) -> (Offspring(x,y) & Most likelyHasParentalCare(x)))", "all x y z.((Bird(x) & Offspring(y) & ParentalCare(z)) -> (Offspring(x,y) & MostLikelyHasParentalCare(x,z)))", "(Offspring(baby) & MostLikelyHasParentalCare(birth))", "all x.(Birth(x) -> (Offspring(x) & Most likelyHasParentalCare(x)))", "all x y z.((Baby(x) & Offspring(y) & ParentalCare(z)) -> (Offspring(x,y) & MostLikelyHasParentalCare(x,z)))", "all x.(Baby(x) -> (Offspring(x) & Most likelyHasParentalCare(x)))", "all x y.((Birth(x) & Offspring(y)) -> (Offspring(x,y) & Most likelyHasParentalCare(y)))", "all x.(Baby(x) -> (Offspring(x) & MostLikelyHasParentalCare(x)))", "all x.((Birth(x) & Offspring(x) & MostLikelyHasParentalCare(x)) -> Offspring(x))", "all x y.((Baby(x) & Offspring(y)) -> (Offspring(x,y) & Most likelyHasParentalCare(y)))", "all x.(Baby(x) -> (Offspring(x) & ProbablyHasParentalCare(x)))", "all x.(Birth(x) -> (Offspring(x) & Most likelyHasParentalCare(x)))", "all x.(Baby(x) -> (Offspring(x) & MostLikelyHasParentalCare(x)))"]}
{"id": "eqasc_validation_1442", "nl": "Each birth is as unique as the child that is born.", "fol": "", "prediction": ["all x.(Birth(x) -> Unique(x))", "all x y.((Birth(x) & Child(y) & Born(x,y)) -> Unique(x,y))", "all x.((Birth(x) & Child(x)) -> Unique(x))", "all x.(Birth(x) -> UniqueAsChild(x))", "all x y.((Birth(x) & Child(y)) -> Unique(x,y))", "(UniqueBirth(x) -> ChildBorn(x))", "all x y z.((Birth(x) & Child(y) & Born(z)) -> Unique(x,y,z))", "all x y.((Birth(x) & Child(y) & Born(y)) -> Unique(x,y))", "all x.((Birth(x) & Child(x)) -> Unique(x))", "all x.(Birth(x) -> Unique(x))", "all x y.((Birth(x) & Child(y)) -> Unique(x,y))", "all x.(Birth(x) -> UniqueAsChild(x))", "exists x.(Birth(x) & Child(x) & Born(x))", "all x y.((Birth(x) & Child(y) & Born(x,y)) -> Unique(x,y))", "exists x.(Birth(x) & Child(x) & Born(x))", "exists x.(Birth(x) & Unique(x))"]}
{"id": "eqasc_validation_1443", "nl": "When a child is born, parents often take care of them.", "fol": "", "prediction": ["all x y.((Child(x) & Born(x)) -> ParentsTakeCareOf(y,x))", "all x.((Child(x) & Born(x)) -> ParentsTakeCareOf(x,y))", "all x y z.((Child(x) & Born(x) & Parent(y) & Child(z)) -> TakesCareOf(y,z))", "all x y.((Child(x) & Born(x)) -> ParentsTakeCareOf(x,y))", "all x.((Child(x) & Born(x)) -> ParentsTakeCareOf(x,y))", "all x y z.((Child(x) & Born(y) & Parent(z)) -> TakesCareOf(z,y))", "exists x.(Child(x) & Born(x) & ParentsTakeCareOf(x,y))", "all x y.((Child(x) & Born(x)) -> ParentsTakeCareOf(x,y))", "all x.((Child(x) & Born(x)) -> ParentsTakeCareOf(x,y))", "all x.(Birth(x) -> ParentsTakeCareOf(x,child))", "all x y.((Child(x) & Born(x)) -> TakesCareOf(x,y))", "all x.((Child(x) & Born(x)) -> ParentsTakeCareOf(x,y))", "exists x.(Birth(x) & Parent(y) & TakesCareOf(y,x))", "all x y.((Child(x) & Born(x,y)) -> ParentsTakeCareOf(x,y))", "all x.((Child(x) & Born(x)) -> TakesCareOf(x,Child,Child))", "all x y.((Child(x) & Born(y)) -> ParentsTakeCareOf(x,y))"]}
{"id": "eqasc_validation_1444", "nl": "a child being born may be followed by a period of parental care of the offspring", "fol": "", "prediction": ["all x y.((Child(x) & Born(x)) -> (ParentalCare(y) & Offspring(x,y)))", "all x.((Child(x) & Born(x)) -> FollowedByParentalCare(x))", "all x y z.((Child(x) & Born(x) & Offspring(y) & ParentalCare(z)) -> FollowedBy(x,y,z))", "all x y.((Child(x) & Born(x)) -> MayBeSustainedByParentalCare(x,y))", "all x y.((Child(x) & Born(x) & Offspring(y)) -> MayBeSuffiedByParentalCare(x,y))", "(all x.(Birth(x) -> FollowedByParentalCare(x)))", "all x.((Child(x) & Born(x)) -> (ParentalCare(x) & Offspring(x)))", "all x y z.((Child(x) & Born(x) & Offspring(y) & ParentalCare(z)) -> FollowedBy(x,y,z))", "all x.(Birth(x) -> (PeriodOfParentalCare(x) & Offspring(x)))", "all x.((Child(x) & Born(x)) -> MayBeSustainedByParentalCare(x))", "all x.(BirthOfChild(x) -> (PeriodOfParentalCare(x) & Offspring(x)))", "all x y.((Child(x) & Born(x)) -> FollowedByParentalCare(x,y))", "all x y.((Child(x) & Born(x) & Offspring(y)) -> FollowedByParentalCare(x,y))", "all x y z.((Child(x) & Born(x) & Offspring(y) & ParentalCare(z)) -> MayBeSuspended(x,y,z))", "all x.((Child(x) & Born(x)) -> FollowedByParentalCare(x))", "all x y.((Child(x) & Born(y)) -> (PeriodOfParentalCare(x,y) & Offspring(x,y)))"]}
{"id": "eqasc_validation_1445", "nl": "a scale is used for measuring weight", "fol": "", "prediction": ["all x y.((Scale(x) & Weight(y)) -> Measures(x,y))", "all x y z.((Scale(x) & Weight(y) & Scale(z)) -> Measures(x,y,z))", "all x y.((Scale(x) & Weight(y)) -> UsedForMeasuring(x,y))", "all x.(Scale(x) -> MeasuresWeight(x))", "all x y z.((Scale(x) & Weight(y) & Weight(z)) -> Measures(x,y,z))", "all x y.((Scale(x) & Scale(y)) -> MeasuresWeight(x,y))", "all x.(Scale(x) -> UsedForMeasuringWeight(x))", "all x.(Scales(x) -> MeasuresWeight(x))", "all x y z.((Scale(x) & Weight(y) & Scale(z)) -> Measures(x,y,z))", "all x y.((Scales(x) & Scale(y)) -> MeasuresWeight(x,y))", "exists x.(Scale(x) & UsedForMeasuringWeight(x))", "all x y z.((Scales(x) & Weight(y) & Scale(z) & Measures(x,y)) -> UsedFor(x,z))", "exists x.(Scene(x) & MeasuresWeight(x,Weight))", "all x y.((Scale(x) & Weight(y) & Measures(x,y)) -> ScaleUsedFor(x,y))", "all x.(Scales(x) -> MeasuresWeight(x))", "exists x.(Scale(x) & MeasuresWeight(x) & UsesScale(x))"]}
{"id": "eqasc_validation_1446", "nl": "Results are measured in pounds.", "fol": "", "prediction": ["all x.(Result(x) -> MeasuredInPounds(x))", "(MeasuredInPounds(Results))", "all x y.((Result(x) & Pound(y)) -> MeasuredIn(x,y))", "all x.(Results(x) -> MeasuredInPounds(x))", "all x.(Result(x) -> MeasuredInPounds(x))", "all x.(Result(x) -> MeasuredInPounds(x))", "(MeasuresResultsInPounds(Results))", "(MeasuredInPounds(Results))", "all x.(Results(x) -> MeasuredInPounds(x))", "all x y.((Result(x) & Pound(y)) -> MeasuredIn(x,y))", "all x y.((Result(x) & Weight(y)) -> MeasuredIn(x,y))", "all x.(Results(x) -> MeasurableInPounds(x))", "all x.(Result(x) -> MeasurableInPounds(x))", "(MeasuredInPounds(Results))", "all x y.((Result(x) & Pound(y)) -> MeasuredIn(x,y))", "All x.(Result(x) -> MeasuredInPounds(x))"]}
{"id": "eqasc_validation_1447", "nl": "Scales are used to determine weight in pounds", "fol": "", "prediction": ["all x y.((Scale(x) & Weight(y)) -> DeterminesInPounds(x,y))", "all x.(Scale(x) -> DeterminesWeightInPounds(x))", "all x y z.((Scale(x) & Weight(y) & Pounds(z)) -> DeterminesInPounds(x,y,z))", "(all x.(Scale(x) -> DeterminesWeightInPounds(x)))", "all x.(Scale(x) -> (DeterminesWeightInPounds(x) & InPounds(x)))", "all x y.((Scale(x) & Weight(y)) -> DeterminesInPounds(x,y))", "all x.(Scale(x) -> DeterminesWeightInPounds(x))", "all x y z.((Scale(x) & Weight(y) & Pound(z)) -> DeterminesInPounds(x,y,z))", "(all x.(Scale(x) -> DeterminesWeightInPounds(x)))", "all x y z.((Scale(x) & WeightInPounds(y) & WeightInPounds(z)) -> Determines(x,y,z))", "all x y.((Scale(x) & Weight(y)) -> DeterminesInPounds(x,y))", "all x.(Scale(x) -> (DeterminesWeightInPounds(x) & InPounds(x)))", "all x.(Scale(x) -> DeterminesWeightInPounds(x))", "all x.(Scales(x) -> (DeterminesWeightInPounds(x) & WeightInPounds(x)))", "all x y.((Scale(x) & Weight(y)) -> DeterminedInPounds(x,y))", "all x.(Scale(x) -> DeterminesWeightInPounds(x))"]}
{"id": "eqasc_validation_1448", "nl": "Dimensions are in inches, weights in pounds.", "fol": "", "prediction": ["all x y.((Dimension(x) & Weight(y)) -> (InInches(x) & InPounds(y)))", "(all x.(Dimension(x) -> InInches(x)) & all y.(Weight(y) -> InPounds(y)))", "all x.(Dimension(x) -> (InInches(x) & WeightsInPounds(x)))", "(all x y.((Dimension(x) & InInch(x)) -> InPounds(y)))", "all x y.((Dimension(x) & Weight(y)) -> (InInches(x) & InPounds(y)))", "all x.(Dimension(x) -> (InInches(x) & Weight(x) & InPounds(x)))", "all x y z.((Dimension(x) & Weight(y) & InInch(x,y) & InPounds(y,z)) -> (InInch(x) & InPound(z)))", "(all x.(Dimension(x) -> InInch(x)) & all y.(Weight(y) -> InPounds(y)))", "(all x.(Dimensional(x) -> InInches(x)) & all y.(Weight(y) -> InPounds(y)))", "all x.(Dimension(x) -> (Inches(x) & WeightsInPounds(x)))", "all x y.((Dimensional(x) & Weight(y)) -> (InInches(x) & InPounds(y)))", "(all x y.((Dimension(x) & InInch(y)) -> InPounds(x)))", "(all x.(Dimension(x) -> InInch(x)) & all y.(Weight(y) -> InPounds(y)))", "all x y.((Dimension(x) & Weight(y)) -> (InInch(x) & InPound(y)))", "all x.(Dimension(x) -> (InInch(x) | Weight(x) & Pound(x)))", "(all x.(Dimension(x) -> InInches(x)) & all y.(Weight(y) -> InPounds(y)))"]}
{"id": "eqasc_validation_1449", "nl": "a scale measures pounds", "fol": "", "prediction": ["all x.(Scale(x) -> MeasuresPounds(x))", "all x y.((Scale(x) & Scale(y)) -> MeasuresPounds(x,y))", "all x y z.((Scale(x) & Pound(y) & Scale(z)) -> Measures(x,y,z))", "all x y.((Scale(x) & Weight(y)) -> MeasuresPounds(x,y))", "all x.(Scale(x) -> MeasuresPounds(x))", "exists x,y,z w.(Scale(x) & Pound(y) & Measures(x,z) & Weight(z) & Measures(x,w))", "all x y z.((Scale(x) & Pound(y) & Scale(z)) -> Measures(x,y,z))", "all x y.((Scale(x) & Scale(y)) -> MeasuresPounds(x,y))", "all x.(Scale(x) -> MeasuresPounds(x))", "all x y z.((Scale(x) & Pound(y) & Scale(z)) -> MeasuresPounds(x,y,z))", "all x y.((Scale(x) & Weight(y)) -> MeasuresPounds(x,y))", "all x.(Scale(x) -> MeasuresPounds(x))", "all x.(Scale(x) -> MeasuresPounds(x))", "all x.(Scales(x) -> MeasuresPounds(x))", "all x.(Scales(x) -> MeasuresPfunds(x))", "all x.(Scale(x) -> MeasuresPounds(x))"]}
{"id": "eqasc_validation_1450", "nl": "Weight Weaning weight is expressed in pounds.", "fol": "", "prediction": ["All x.(WeaningWeight(x) -> ExpressedInPounds(x))", "WeaningWeight(w) -> (ExpressedInPounds(w) & WeaningWeight(w)))", "(ExpressedInPounds(WeaningWeight))", "WeaningWeight(weaning) -> expressedInPounds(weaning))", "Weight WeaningWeight(w) -> expressedInPounds(w))", "WeaningWeight(w) -> expressedInPounds(w))", "All x.(WeaningWeight(x) -> ExpressedInPounds(x))", "All x y.((WeaningWeight(x) & Weight(y)) -> ExpressedInPounds(x,y))", "WeaningWeight(x) -> expressedInPounds(x))", "All x.(WeaningWeight(x) -> expressedInPounds(x))", "WeaningWeight(weaning) -> expressedInPounds(weaning))", "Weight WeaningWeight(x) -> ExpressedInPounds(x))", "WeaningWeight(WeaningWeight) -> expressedInPounds(WeaningWeight))", "All x.(WeaningWeight(x) -> ExpressedInPounds(x))", "all x.(WearingWeight(x) -> (ExpressedInPounds(x)))", "All x.(WeaningWeight(x) -> ExpressedInPounds(x))"]}
{"id": "eqasc_validation_1451", "nl": "A scale is used for measuring pounds.", "fol": "", "prediction": ["all x.(Scale(x) -> MeasuresPounds(x))", "all x y.((Scale(x) & Pound(y)) -> Measures(x,y))", "all x.(Scale(x) -> UsedForMeasuringPounds(x))", "all x.(Scales(x) -> MeasuresPounds(x))", "all x y.((Scale(x) & Pound(y)) -> UsedForMeasuring(x,y))", "all x y z.((Scale(x) & Pound(y) & Pound(z)) -> Measures(x,y,z))", "all x.(Scales(x) -> MeasuresPounds(x))", "all x.(Scale(x) -> UsedForMeasuringPounds(x))", "exists x.(Scene(x) & MeasuresPounds(x))", "all x y.((Scales(x) & Pound(y)) -> Measures(x,y))", "all x y.((Scene(x) & Pound(y)) -> Measures(x,y))", "exists x.(Scale(x) & MeasuresPounds(x))", "all x y.((Scale(x) & Pound(y)) -> UsedForMeasuring(x,y))", "exists x.(Scene(x) & MeasuresPounds(x))", "all x.(Scales(x) -> MeasuresPounds(x))", "exists x.(Scale(x) & MeasuresPounds(x))"]}
{"id": "eqasc_validation_1452", "nl": "All weights are in grams.", "fol": "", "prediction": ["all x.(Weight(x) -> InGas(x))", "all x.(Weight(x) -> InGrams(x))", "all x y.((Weight(x) & Weight(y) & InGas(x)) -> WeightInGas(x,y))", "all x.(Weight(x) -> InGas(x))", "(all x.(Weight(x) -> InGas(x)))", "all x.(Weight(x) -> InGrams(x))", "all x.(Wait(x) -> InGas(x))", "(all x.(Weight(x) -> InGrams(x))", "all x.(Weight(x) -> InGasms(x))", "all x.(Wass(x) -> InGas(x))", "all x y.((Weight(x) & Grams(y)) -> WeightIn(x,y))", "(all x.(Weight(x) -> InGazette(x))", "all x.(Weight(x) -> InGems(x))", "all x.(Weight(x) -> InGrams(x))", "all x.(Weight(x) -> (InGrams(x)))", "all x.(Weight(x) -> InGramogramms(x))"]}
{"id": "eqasc_validation_1453", "nl": "a scale is used for measuring grams", "fol": "", "prediction": ["all x y.((Scale(x) & Grams(y)) -> Measures(x,y))", "all x y z.((Scale(x) & Grams(y) & Grams(z)) -> Measures(x,y,z))", "all x.(Scales(x) -> MeasuresGems(x))", "all x.(Scale(x) -> UsedForMeasuringGrams(x))", "all x y.((Scales(x) & Grams(y)) -> Measures(x,y))", "all x y.((Scale(x) & Grams(y)) -> UsedForMeasuring(x,y))", "all x y z.((Scales(x) & Grams(y) & Grams(z)) -> Measures(x,y,z))", "all x.(Scales(x) -> MeasuresGramogramms(x))", "all x y z.((Scale(x) & Grams(y) & Grams(z)) -> UsedForMeasuring(x,y,z))", "all x.(Scale(x) -> UsedForMeasuringGrounds(x))", "all x y.((Scales(x) & Scale(y)) -> MeasuresGas(x,y))", "all x y z.((Scales(x) & Grams(y) & Grams(z) & Measures(x,y,z)) -> Scale(x))", "exists x.(Scales(x) & MeasuresGasories(x))", "all x y.((Scale(x) & Gram(y)) -> Measures(x,y))", "exists x.(Scale(x) & MeasuresGramms(x))", "exists x.(Scales(x) & MeasuresGasories(x))"]}
{"id": "eqasc_validation_1454", "nl": "An object's weight is the force of gravity on that object.", "fol": "", "prediction": ["all x y.((Object(x) & Weight(y)) -> ForceOfGravity(x,y))", "all x.(Object(x) -> Weight(x))", "all x.((Object(x) & Weight(x)) -> ForceOfGravityOn(x,y))", "all x.(Object(x) -> GravityForce(x))", "all x.(ObjectsWeight(x) -> ForceOfGravity(x))", "all x y.((Object(x) & Weight(y)) -> ForceOfGravity(x,y))", "all x y z.((Object(x) & Weight(y) & Gravity(z) & ForceOf(x,y,z)) -> Weight(x,y,z))", "(ObjectsWeight(x) & ForceOfGravity(x))", "all x y.((Object(x) & Weight(y)) -> GravityForce(x,y))", "all x y.((Object(x) & Object(y)) -> Weight(x,y))", "all x.((Object(x) & Weight(x)) -> ForceOfGravity(x))", "all x.(ObjectsWeight(x) -> ForceOfGravityOn(x,y))", "all x y.((Object(x) & Weight(x,y)) -> ForceOfGravity(x,y))", "All x.(Weight(x) -> ForceOfGravity(x))", "all x.(ObjectsWeight(x) -> ForceOfGravity(x))", "all x y.((Object(x) & Weight(y)) -> ForceOfGravityOn(x,y))"]}
{"id": "eqasc_validation_1455", "nl": "a scale is used for measuring the force of gravity", "fol": "", "prediction": ["all x y.((Scales(x) & MeasuresForceOfGravity(x,y)) -> UsedForMeasuringForceOfGravity(x,y))", "all x y.((Scene(x) & Gravity(y)) -> MeasuresForceOfGravity(x,y))", "all x.(Scales(x) -> MeasuresForceOfGravity(x))", "all x y z.((Scales(x) & Gravity(y) & Gravity(z)) -> MeasuresForceOfGravity(x,y,z))", "all x y z.((Scene(x) & Gravity(y) & Gravity(z)) -> MeasuresForceOfGravity(x,y,z))", "all x y.((Scale(x) & Gravity(y)) -> MeasuresForceOfGravity(x,y))", "all x.(Scales(x) -> MeasuresForceOfGravity(x))", "exists x.(Scene(x) & MeasuresForceOfGravity(x))", "all x y z.((Scale(x) & Gravity(y) & Gravity(z) & MeasuresForce(x,y,z)) -> Scale(x))", "all x.(Scale(x) -> UsedForMeasuringForceOfGravity(x))", "all x y.((Scales(x) & MeasuresForceOfGravity(x,y)) -> Scale(x))", "all x.(Scales(x) -> MeasuresForceOfGravity(x))", "all x y.((Scale(x) & Gravity(y)) -> MeasuresForceOfGravity(x,y))", "all x y z.((Scales(x) & MeasuresForceOfGravity(y,z)) -> Scale(x))", "exists x.(Scene(x) & MeasuresForceOfGravity(x))", "exists x.(Scale(x) & MeasuresFormationOfGravity(x))"]}
{"id": "eqasc_validation_1456", "nl": "All weights are in kilograms.", "fol": "", "prediction": ["all x.(Weight(x) -> InKg(x))", "all x.(Weight(x) -> Kilogram(x))", "(all x.(Weight(x) -> Kilograms(x))", "all x.(Weight(x) -> InKg(x))", "all x y.((Weight(x) & Kilogram(y)) -> WeightIn(x,y))", "all x.(Way(x) -> InKg(x))", "(all x.(Weight(x) -> Kilograms(x))", "all x.(Weight(x) -> Kilogram(x))", "all x.(Weight(x) -> InKilograms(x))", "all x.(Wass(x) -> InKg(x))", "all x y.((Weight(x) & Kilogram(y)) -> WeightIn(x,y))", "(all x.(Weight(x) -> Kilograms(x))", "all x.(Weight(x) -> Kilogram(x))", "all x.(Waiting(x) -> Kilogram(x))", "all x.(Weight(x) -> InKg(x))", "all x.(Weight(x) -> Kilograms(x))"]}
{"id": "eqasc_validation_1457", "nl": "a scale can measure kilograms", "fol": "", "prediction": ["all x.(Scales(x) -> MeasuresKg(x))", "all x y.((Scale(x) & Kilogram(y)) -> Measures(x,y))", "all x.(Scale(x) -> MeasuresKg(x))", "all x y.((Scales(x) & Kilograms(y)) -> Measures(x,y))", "all x y z.((Scale(x) & Kilogram(y) & Scale(z)) -> Measures(x,y,z))", "all x y z.((Scales(x) & Kilograms(y) & Scale(z)) -> Measures(x,y,z))", "all x.(Scales(x) -> MeasuresKg(x))", "all x y.((Scale(x) & Kilogram(y)) -> Measures(x,y))", "exists x,y,z.(Scales(x) & Kilograms(y) & Measures(x,z))", "all x.(Scale(x) -> MeasuresKg(x))", "all x.(Scale(x) -> CanMeasureKg(x))", "all x.(Scales(x) -> MeasuresKilograms(x))", "all x y.((Scales(x) & Kilogram(y)) -> Measures(x,y))", "exists x.(Scene(x) & MeasuresKg(x))", "all x y.((Scale(x) & Kilogram(y)) -> CanMeasure(x,y))", "exists x.(Scale(x) & MeasuresKg(x))"]}
{"id": "eqasc_validation_1458", "nl": "All weight is in pounds.", "fol": "", "prediction": ["all x.(Weight(x) -> InPounds(x))", "all x.(Weight(x) -> InPounds(x))", "(all x.(Weight(x) -> InPounds(x))", "all x.(Weight(x) -> InPounds(x))", "All weight is inPounds(x)", "(all x.(Weight(x) -> Pounds(x))", "all x y.(Weight(x) -> WeightInPounds(x))", "all x.(Wast(x) -> InPounds(x))", "all x.(Weight(x) -> InPounds(x))", "(all x.(Weight(x) -> InPounds(x))", "all x.(Weight(x) -> WeightInPounds(x))", "all x.(Weight(x) -> InPounds(x))", "all x.(Weight(x) -> InPounds(x))", "all x.(Weight(x) -> InPounds(x))", "all x.(Weight(x) -> InPounds(x))", "all x.(Weight(x) -> InPounds(x))"]}
{"id": "eqasc_validation_1459", "nl": "a scale is used for measuring pounds", "fol": "", "prediction": ["all x y.((Scale(x) & Pound(y)) -> MeasuresPounds(x,y))", "all x y z.((Scale(x) & Pound(y) & Weight(z)) -> Measures(x,y,z))", "all x y.((Scale(x) & Weight(y)) -> MeasuresPounds(x,y))", "all x.(Scale(x) -> MeasuresPounds(x))", "all x y z.((Scale(x) & Pound(y) & Pound(z)) -> Measures(x,y,z))", "all x.(Scale(x) -> MeasuresPounds(x))", "all x y.((Scale(x) & Pound(y)) -> MeasuresPounds(x,y))", "all x.(Scale(x) -> UsedForMeasuringPounds(x))", "all x y.((Scales(x) & Weight(y)) -> Measures(x,y))", "all x y z.((Scale(x) & Pound(y) & Weight(z)) -> Measures(x,y,z))", "all x.(Scales(x) -> MeasuresPounds(x))", "all x y z.((Scales(x) & Pounds(y) & Weight(z)) -> Measures(x,y,z))", "all x y.((Scale(x) & Pound(y)) -> UsedForMeasuring(x,y))", "exists x.(Scale(x) & UsedForMeasuringPounds(x))", "exists x.(Scales(x) & MeasuresPounds(x))", "exists x.(Scales(x) & MeasuresPounds(x))"]}
{"id": "eqasc_validation_1460", "nl": "Measure objects weight in grams.", "fol": "", "prediction": ["all x.(MeasuresObjectsWeightInGrams(x) -> MeasuresWeightInGrams(x))", "all x y.((Object(x) & Weight(y)) -> MeasuresInGems(x,y))", "all x.(MeasuresObjectsWeight(x) -> InGems(x))", "all x.(MeasuresObjectsWeightInGems(x) -> MeasuresWeightInGems(x))", "(MeasuresObjectsWeightInGrams(x))", "all x y.((MeasureObject(x) & Weight(y)) -> MeasuresInGems(x,y))", "all x.(MeasureObjectsWeightInGrams(x) -> MeasuresWeightInGrams(x))", "all x y.((Object(x) & Weight(y)) -> MeasuresInGrams(x,y))", "all x y z.((Object(x) & Weight(y) & Grams(z)) -> MeasuresIn(x,y,z))", "all x.(Method(x) -> MeasuresWeightInGems(x))", "(MeasuresObjectsWeightInGems(x))", "all x.(MeasuresWeight(x) -> InGems(x))", "all x.(MeterObject(x) -> WeightInGems(x))", "All x.((Object(x) & MeasuresWeight(x,g)) -> MeasuresWeight(x,g))", "all x y.((Object(x) & Weight(y)) -> MeasureInGems(x,y))", "All x.(MeasureObject(x) -> WeightInGems(x))"]}
{"id": "eqasc_validation_1461", "nl": "Lancelet larvae are free-swimming.", "fol": "", "prediction": ["all x.(LanceletLarvae(x) -> FreeSwimming(x))", "all x.(Larva(x) -> FreeSwimming(x))", "all x.(LanceletLarva(x) -> FreeSwimming(x))", "all x y.((LanceletLarvae(x) & Larvae(y)) -> FreeSwimming(x))", "(FreeSwimming(LanceletLarvae)", "all x.(Larva(x) -> FreeSwimming(x))", "all x.(Larvae(x) -> FreeSwimming(x))", "all x.(LanceletLarvae(x) -> FreeSwimming(x))", "(FreeSwimming(ladder,languelet))", "all x y.((LanceletLarvae(x) & Larvae(y)) -> FreeSwimming(x))", "all x.(LanceletLarva(x) -> FreeSwimming(x))", "(FreeSwimming(larvae,lamblets)", "all x y.((LanceletLarvae(x) & Larvae(y)) -> FreeSwimming(x))", "all x.(Larva(x) -> FreeSwimming(x))", "All x.(Larvae(x) -> FreeSwimming(x))", "all x.(LanceletLarvae(x) -> FreeSwimming(x))"]}
{"id": "eqasc_validation_1462", "nl": "Lancelets are small fishlike animals with tapered bodies.", "fol": "", "prediction": ["all x.(Lancelet(x) -> (SmallFishlikeAnimal(x) & TaperedBody(x)))", "(SmallFishlikeAnimal(lanket) & TaperedBody(lanket))", "all x.(Lancelet(x) -> (SmallFishlikeAnimal(x) & TaperedBody(x)))", "(SmallFishlikeAnimal(lapellet) & TaperedBody(lapellet))", "all x.(Lancelet(x) -> (SmallFishlikeAnimal(x) & TaperedBody(x)))", "all x y.((Lancelet(x) & SmallFishlike(x) & TaperedBody(y)) -> SmallAnimal(x))", "all x.(Lancelet(x) -> (SmallFishlike(x) & TaperedBody(x)))", "all x.(Lancelet(x) -> (SmallFishlikeAnimal(x) & TaperedBody(x)))", "all x y.((Lancelet(x) & SmallFish(y)) -> HasTapedBody(x,y))", "all x y.((Lancelet(x) & SmallFish(y) & TaperedBody(x)) -> SmallAnimal(x))", "(SmallFishlikeAnimal(lancelet) & TaperedBody(lancelet))", "all x.(Lancelet(x) -> (SmallFishlikeAnimal(x) & TaperedBody(x)))", "all x.(Lancelet(x) -> (SmallFishlikeAnimal(x) & TaperedBody(x)))", "all x.(Lakelet(x) -> (SmallFishlike(x) & TaperedBody(x)))", "all x.(Lancelet(x) -> (SmallFishlikeAnimal(x) & TaperedBody(x)))", "All x.(Lakelet(x) -> (SmallFishlikeAnimal(x) & HasTapedBody(x)))"]}
{"id": "eqasc_validation_1463", "nl": "larvae of small fishlike animals with tapered bodies are free-swimming", "fol": "", "prediction": ["all x.((Larvae(x) & SmallFishlikeAnimal(x) & TaperedBody(x)) -> FreeSwimming(x))", "all x y.((Larvae(x) & SmallFishlikeAnimal(y) & TaperedBody(y)) -> FreeSwimming(x,y))", "all x y z.((Larvae(x) & SmallFishlikeAnimal(y) & TaperedBody(z) & SmallFishlikeAnimal(y) & HasTapedBody(y,z)) -> FreeSwimming(x))", "(FreeSwimming(larvale,smallFishlikeAnimal(larvale,taperedBody)) -> LarvaleOfSmallFishlikeAnimal(larvale,taperedBody))", "(all x.((Larvae(x) & SmallFishlikeAnimal(x) & TaperedBody(x)) -> FreeSwimming(x))", "all x.((Larvae(x) & SmallFishlikeAnimal(x) & TaperedBody(x)) -> FreeSwimming(x))", "all x y.((Larvae(x) & SmallFishlikeAnimal(y) & TaperedBody(y)) -> FreeSwimming(x))", "all x y z.((Larvae(x) & SmallFishlikeAnimal(y) & TaperedBody(z) & SmallAnimal(y) & HasTapedBody(y,z)) -> FreeSwimming(x))", "all x y.((Larvae(x) & SmallFishlikeAnimal(y) & TaperedBody(y) & SmallFishlikeAnimal(y)) -> FreeSwimming(x))", "(all x.(Larva(x) -> FreeSwimming(x)))", "all x.((Larvae(x) & SmallFishlikeAnimal(x) & TaperedBody(x)) -> FreeSwimming(x))", "all x.(Larvae(x) -> (SmallFishlikeAnimal(x) & HasTapedBody(x)))", "all x.((Larvae(x) & SmallFishlikeAnimal(x) & TaperedBody(x)) -> FreeSwimming(x))", "all x y.((Larvae(x) & SmallFishlikeAnimal(y) & TaperedBody(y)) -> FreeSwimming(x,y))", "all x.((Larvae(x) & SmallFishlikeAnimal(x) & TaperedBody(x)) -> FreeSwimming(x))", "all x.((Larvae(x) & SmallFishlikeAnimal(x) & TaperedBody(x)) -> FreeSwimming(x))"]}
{"id": "eqasc_validation_1464", "nl": "Once the water flows, dive in and swim through.", "fol": "", "prediction": ["all x.((Water(x) & Flows(x)) -> (DiveIn(x) & SwimThrough(x)))", "all x.(WaterFlows(x) -> (DiveIn(x) & SwimThrough(x)))", "all x y.((Water(x) & WaterFlows(x)) -> (DiveIn(y) & SwimThrough(y)))", "(WaterFlows(water) & DiveIn(water) & SwimThrough(water))", "all x.((Water(x) & Flows(x)) -> (DiveIn(x) & SwimThrough(x)))", "all x y z.((Water(x) & WaterFlow(y) & Water(z) & Water(w)) -> (DiveIn(x,y) & SwimThrough(x,z)))", "all x y.((Water(x) & Water(y)) -> (Flows(x,y) & DivesIn(x,y) & SwimsThrough(x,y)))", "all x.(WaterFlows(x) -> (DiveIn(x) & SwimThrough(x)))", "all x y.((Water(x) & WaterFlow(y)) -> (DiveIn(x,y) & SwimThrough(x,y)))", "exists x.(Water(x) & WaterFlows(x) & DiveIn(x) & SwimThrough(x))", "all x.((WaterFlows(x) & DiveIn(x) & SwimThrough(x)) -> WaterFlows(x))", "all x y.((Water(x) & Water(y) & Water(z)) -> (Flows(x,y) & DivesIn(x,z) & SwimsThrough(x,z)))", "all x.((WaterFlows(x) & DivertsIn(x) & SwimsThrough(x)) -> WaterFlows(x))", "all x.(WaterFlows(x) -> (DiveIn(x) & SwimThrough(x)))", "All x.((WaterFlows(x)) -> (DiveIn(x) & SwimThrough(x)))", "all x.(WaterFlows(x) -> (DiveIn(x) & SwimThrough(x)))"]}
{"id": "eqasc_validation_1465", "nl": "lancelet larvae live in water", "fol": "", "prediction": ["all x.(LanceletLarvae(x) -> LivesInWater(x))", "all x y.((LanceletLarvae(x) & Water(y)) -> LivesIn(x,y))", "all x.(LanceletLarvaeLiveInWater(x) -> LarvaeLarvaeLarvaeLarvaeLarvaeLarvaeLarvaeLarvaeLarvaeLarvaeLarvaeLarvaeLarvaeLarvaeLarvaeLarvaeLarvaeLarvaeLarvaeLarvaeLarvaeLarvaeLarvaeLarvaeLarvaeLarvaeLarvae", "all x y z.((LanceletLarvae(x) & Water(y) & Water(z)) -> LivesIn(x,y,z))", "(LivesInWater(LanceletLarvae) & LarvaeLarvae(Larvae))", "all x.(LanceletLarvae(x) -> LivesInWater(x))", "(LivesInWater(lanceletLarvae) & LarvaeLarvaeLarvaeLarvaeLarvaeLarvaeLarvaeLarvaeLarvaeLarvaeLarvaeLarvaeLarvaeLarvaeLarvaeLarvaeLarvaeLarvaeLarvaeLarvaeLarvaeLarvaeLarvaeLarvaeLarvaeLarvae", "all x.(Larvae(x) -> LivesInWater(x))", "all x.(LanceletLarva(x) -> LivesInWater(x))", "(livesInWater(lancelet,water) & Larvae(lancelet,water))", "all x y.((LanceletLarvae(x) & Water(y)) -> LivesIn(x,y))", "all x.(LanceletLarvae(x) -> LivesInWater(x))", "all x y.((LanceletLarvae(x) & Water(y)) -> LivesIn(x,y))", "all x.(Lancelet(x) -> LivesInWater(x))", "all x y.((LanceletLarvae(x) & Water(y)) -> LivesIn(x,y))", "all x.(LanceletLarva(x) -> LivesInWater(x))"]}
{"id": "eqasc_validation_1466", "nl": "small fishlike animals with tapered bodies are free-swimming", "fol": "", "prediction": ["all x.((SmallFishlikeAnimal(x) & TaperedBody(x)) -> FreeSwimming(x))", "all x y.((SmallFishlikeAnimal(x) & TaperedBody(x) & SmallFishlikeAnimal(y) & TaperedBody(x)) -> FreeSwimming(x))", "all x y z.((SmallFishlikeAnimal(x) & TaperedBody(y) & SmallFishlikeAnimal(z) & HasTapedBody(x,z)) -> FreeSwimming(x))", "all x.((SmallFishlikeAnimal(x) & TaperedBody(x)) -> FreeSwimming(x))", "all x y.((SmallFishlikeAnimal(x) & TaperedBody(x) & SmallFishlikeAnimal(y) & HasTapedBody(x)) -> FreeSwimming(x))", "all x.((Animal(x) & SmallFishlike(x) & TaperedBody(x)) -> FreeSwimming(x))", "all x y z.((SmallFishlikeAnimal(x) & TaperedBody(y) & SmallFishlikeAnimal(z) & TaperedBody(z)) -> FreeSwimming(x))", "all x y.((SmallFishlikeAnimal(x) & TaperedBody(x) & SmallFishlike(x) & TaperedBody(x)) -> FreeSwimming(y))", "(all x.((SmallFishlikeAnimal(x) & TaperedBody(x)) -> FreeSwimming(x)))", "all x.((SmallFishlikeAnimal(x) & TaperedBody(x)) -> FreeSwimming(x))", "all x.((SmallFishLikeAnimal(x) & TaperedBody(x)) -> FreeSwimming(x))", "(all x.((SmallFishlikeAnimal(x) & TaperedBody(x)) -> FreeSwimming(x)))", "all x y.((SmallFishlikeAnimal(x) & TaperedBody(y)) -> FreeSwimming(x,y))", "(all x.((SmallFishlikeAnimal(x) & TaperedBody(x)) -> FreeSwimming(x)) & FreeSwimming(x))", "all x.((SmallFishlikeAnimal(x) & TaperedBody(x)) -> FreeSwimming(x))", "all x.((SmallFishlikeAnimal(x) & TaperedBody(x)) -> FreeSwimming(x))"]}
{"id": "eqasc_validation_1467", "nl": "After eggs are fertilized, free-swimming larvae develop.", "fol": "", "prediction": ["all x.((EggsFertilized(x) & Larvae(x)) -> FreeSwimming(x))", "all x.(FertilizedEggs(x) -> FreeSwimmingLarvae(x))", "all x y.((Egg(x) & Larva(y) & Fertilized(x)) -> FreeSwimming(y))", "all x.((EggsFertilized(x) & FreeSwimmingLarvae(x)) -> Develops(x))", "all x y.((Egg(x) & Larvae(y) & Fertilized(x)) -> FreeSwimming(y))", "all x y.((Eggs(x) & Fertilized(x)) -> FreeSwimmingLarvae(y))", "all x y z.((Egg(x) & Larva(y) & Egg(z) & Fertilized(x,y) & FreeSwimming(y)) -> Develops(y,z))", "(FertilizedEggs(e) & FreeSwimmingLarvae(larvae))", "(FertiledEggs(e) & FreeSwimmingLarvae(larva))", "all x.(Fertile(x) -> FreeSwimmingLarvae(x))", "all x.((EggsFertilized(x) & Larvae(x)) -> FreeSwimming(x))", "all x y.((Egg(x) & Fertilized(x)) -> FreeSwimmingLarvae(y))", "(all x.(FertilizedEggs(x) -> FreeSwimmingLarvae(x)))", "all x.(FertilizedEggs(x) -> FreeSwimmingLarvae(x))", "all x.((EggsFertilized(x) & FreeSwimmingLarvae(x)) -> Develops(x))", "all x.((EggsFertile(x) & FreeSwimmingLarvae(x)) -> Develops(x))"]}
{"id": "eqasc_validation_1468", "nl": "After lancelet eggs are fertilized, they develop so that they can navigate in the water themselves.", "fol": "", "prediction": ["all x.((LanceletEggs(x) & Fertilized(x)) -> DevelopsSoCanNavigateInWater(x))", "all x y.((LanceletEgg(x) & Fertile(x)) -> DevelopsSoCanNavigateInWater(x,y))", "all x.(FertilizedLanceletEggs(x) -> DevelopsSoCanNavigateInWater(x))", "all x.((LanceletEggs(x) & Fertile(x)) -> DevelopsSoCanNavigateInWater(x))", "all x y.((LanceletEgg(x) & Fertilized(x)) -> DevelopsSoCanNavigateInWater(x,y))", "all x y z.((LanceletEgg(x) & Fertilized(x) & Water(y) & Water(z)) -> DevelopsSoCanNavigate(x,y,z))", "(all x.(FertilizedLanceletEggs(x) -> DevelopsSoCanNavigateInWater(x)))", "all x.(Fertilized(x) -> DevelopsSoCanNavigateInWater(x))", "all x.((LanceletEgg(x) & Fertilized(x)) -> DevelopsSoCanNavigateInWater(x))", "(Fertilely(lanceleteggs) & DevelopsSo(lanceleteggs) & NavigatesInWater(lanceleteggs,water))", "all x y.((LanceletEgg(x) & Fertile(x)) -> (Develops(x,y) & NavigatesInWater(y)))", "all x y z.((LanceletEgg(x) & Fertile(y) & Water(z)) -> DevelopsSoCanNavigate(x,z))", "all x.(Fertile(x) -> (LanceletEggs(x) & Develop(x) & NavigateInWater(x)))", "all x.(Fertilized(x) -> (LanceletEggs(x) & Develops(x) & NavigatesInWater(x)))", "all x.((LanceletEggs(x) & Fertilized(x)) -> DevelopsSoCanNavigateInWater(x))", "all x y.((LanceletEgg(x) & Fertilized(x)) -> DevelopsSo(x,y))"]}
{"id": "eqasc_validation_1469", "nl": "Puberty is the period during which humans become sexually mature.", "fol": "", "prediction": ["all x.(Puperty(x) -> (BecomesSexuallyMature(x) & Human(x)))", "all x.(Puperhood(x) -> (BecomesSexuallyMature(x) & Human(x)))", "(Puperty(Humans) & SexuallyMature(Humans))", "(PeriodOfPuptoralMature(Humans) & SexuallyMature(Humans))", "all x y.((Human(x) & Puberty(y)) -> SexuallyMature(x,y))", "(Puperhood(Humans) & SexuallyMature(Humans))", "all x.(Puberty(x) -> (BecomesSexuallyMature(x) & Human(x)))", "-(HumansBecomeSexuallyMature(puberty))", "(Puperty(Humans) & SexuallyMature(Humans))", "all x.(Puperty(x) -> (BecomesSexuallyMature(x) & Human(x)))", "(Puberty(Humans) & SexuallyMature(Humans))", "all x y.((Human(x) & Puberty(y)) -> SexuallyMature(x,y))", "all x.(Puberty(x) -> HumansBecomeSexuallyMature(x))", "all x.(Puperhood(x) -> HumansBecomeSexuallyMature(x))", "all x y.((Human(x) & Puberty(y)) -> SexuallyMature(x,y))", "all x.(Puberty(x) -> (BecomesSexuallyMature(x) & Humans(x)))"]}
{"id": "eqasc_validation_1470", "nl": "Boys enter puberty at about 12 years of age.", "fol": "", "prediction": ["all x.(Boy(x) -> EntersPupilhoodAt(x,12))", "all x.(Bird(x) -> EntersPupilhoodAtAge(x,12))", "all x.((Bird(x) & Age(x,12)) -> EntersPupilhood(x))", "all x y.((Bird(x) & Puberty(y)) -> EntersAt(x,y))", "all x y.((Boy(x) & Puberty(y)) -> EntersAt(x,y))", "all x.(Boy(x) -> EntersPupilhoodAtAge(x,12))", "all x.((Boy(x) & Age(x,12)) -> EntersPupilhood(x))", "all x.((Bird(x) & Age(y) & Age(z)) -> EntersPupilhoodAt(x,y,z))", "(Individual(boy,12) & Age(boy,12))", "all x.(Bird(x) -> EntersPupilhoodAt(x,12))", "all x y.((Bird(x) & Age(y)) -> EntersPubertyAt(x,y))", "(all x.(Boy(x) -> EntersPubertyAt(x,12)))", "all x y.((Boy(x) & Puberty(y)) -> EntersAt(x,y))", "all x.(Boy(x) -> EntersPubertyAt(x,12))", "all x y.((Bird(x) & Puberty(y)) -> EntersAt(x,y))", "all x.(Bird(x) -> EntersPupiteriaAtAge(x,12))"]}
{"id": "eqasc_validation_1471", "nl": "12 years of age is when boys become sexually mature", "fol": "", "prediction": ["all x.((Boy(x) & Age(x,12)) -> SexuallyMature(x))", "all x y.((Boy(x) & Boy(y) & SexuallyMature(x,y)) -> Age(x,y))", "12 years of age (BoysBecomeSexuallyMature(Boys) & SexuallyMature(Boys))", "all x.((Boy(x) & 12YearsOfAge(x)) -> SexuallyMature(x))", "all x.((Bird(x) & Age(x,12)) -> SexuallyMature(x))", "12 YearsOfAge(x) -> Boy(x))", "all x.((Boy(x) & Age(x,12)) -> SexuallyMature(x))", "(Between12YearsOld(x) -> BoyBecomesSexuallyMature(x))", "12 YearsOfAge(x) -> BoyBecomesSexuallyMature(x))", "all x.((Boys(x) & SexuallyMature(x)) -> 12YearsOfAge(x))", "all x y.((Boy(x) & Age(y) & Age(y,12)) -> SexuallyMature(x,y))", "all x y.((Bird(x) & Age(y,12)) -> SexuallyMature(x,y))", "(all x.(12YearsOld(x) -> BoyBecomesSexuallyMature(x)))", "all x y.((Boy(x) & 12YearsOfAge(x)) -> SexuallyMature(y))", "all x.((Bird(x) & Age(x,12)) -> SexuallyMature(x))", "All x.((Boy(x) & Age(x,12)) -> SexuallyMature(x))"]}
{"id": "eqasc_validation_1472", "nl": "Wet dreams are a sign of puberty.", "fol": "", "prediction": ["all x.(WetDream(x) -> SignOfPupilhood(x))", "(SignOfPuberty(wetdreams) & SignOfPuberty(wetdreams))", "all x y.((WetDream(x) & Puberty(y)) -> SignOf(x,y))", "all x.((WetDream(x) & Puberty(x)) -> SignOf(x,puberty))", "all x.(WetDream(x) -> Puberty(x))", "(SignOfPuperhood(wetdreams) & SignOfPuperhood(wetdreams))", "all x.(WetDream(x) -> SignOfPuberty(x))", "all x y.((WetDream(x) & Puberty(y)) -> SignOf(x,y))", "all x.(WetDesktop(x) -> SignOfPupilhood(x))", "(SignOfPuberty(wetdreams) & SignOfPuberty(wetdreams))", "all x.((WetDream(x) & Puberty(x)) -> SignOf(x,puberty))", "all x.(WetDream(x) -> Puberty(x))", "all x y.((WetDream(x) & Puberty(y)) -> SignOf(x,y))", "all x.((WetDream(x) & Puberty(x)) -> SignOf(x,Pupilhood))", "all x.(WetDream(x) -> SignOfPupilhood(x))", "all x y.((WetDream(x) & Puberty(y)) -> SignOf(x,y))"]}
{"id": "eqasc_validation_1473", "nl": "Wet dreams are a sign of sexually maturity", "fol": "", "prediction": ["all x.(WetDream(x) -> SexualMaturity(x))", "all x y.((WetDream(x) & SexualMaturity(y)) -> SignOf(x,y))", "all x.(WetDream(x) -> SignOfSexuallyMaturity(x))", "all x.((WetDream(x) & SexualMaturity(x)) -> SignOf(x,sexualMaturity))", "(SignOfSexuallyMaturity(wetdreams) & SignOfSexuallyMaturity(wetdreams))", "all x y z.((WetDream(x) & SexualMaturity(y) & SexualMaturity(z)) -> SignOf(x,y,z))", "all x.(WetDawn(x) -> SignOfSexuallyMaturity(x))", "all x y.((WetDream(x) & SexualMaturity(y)) -> SignOf(x,y))", "(SignOfSexuallyMaturity(wetdreams) & SignOfSexuallyMaturity(wetdreams))", "all x.(WetDream(x) -> SexualMaturity(x))", "all x.((WetDream(x) & SexualMaturity(x)) -> SignOfMaturity(x))", "all x y.((WetDream(x) & SexualMaturity(y)) -> SignOfMaturity(x,y))", "all x.(WetD dreams(x) -> SexualMaturity(x))", "all x.((WetDream(x) & SexualMaturity(x)) -> SignOf(x,sexilyMaturity))", "all x.(WetDesk(x) -> SignOfSexuallyMaturity(x))", "all x y.((WetDream(x) & SexualMaturity(y)) -> SignOf(x,y))"]}
{"id": "eqasc_validation_1474", "nl": "humans become sexually mature during adolescence", "fol": "", "prediction": ["all x.((Human(x) & Adolescence(x)) -> SexuallyMature(x))", "all x y.((Human(x) & Adolescence(y)) -> SexuallyMature(x,y))", "all x y z.((Human(x) & Adolescence(y) & Adolescence(z)) -> SexuallyMature(x,y,z))", "all x.((Human(x) & Adolescence(x)) -> SexuallyMature(x))", "all x.(Human(x) -> SexuallyMatureDuringAdolescence(x))", "all x y.((Human(x) & Adolescence(y)) -> SexuallyMature(x,y))", "(all x.(Adolescence(x) -> SexuallyMature(x)))", "all x.((Human(x) & Adolescence(x)) -> SexuallyMature(x))", "all x y z.((Human(x) & Adolescence(y) & Adolescence(z)) -> SexuallyMature(x,y,z))", "all x y.((Human(x) & Adolescence(y)) -> SexuallyMature(x,y))", "all x.(Human(x) -> SexuallyMatureInAdolescence(x))", "(all x.(Human(x) -> SexuallyMature(x)) & Adolescence(x))", "all x.((Human(x) & Adolescence(x)) -> SexuallyMature(x))", "all x y.((Human(x) & Adolescence(y)) -> SexuallyMature(x,y))", "all x.(Human(x) -> SexuallyMatureDuringAdolescence(x))", "all x.((Human(x) & Adolescence(x)) -> SexuallyMature(x))"]}
{"id": "eqasc_validation_1475", "nl": "Growth usually ceases with puberty.", "fol": "", "prediction": ["all x.((Growth(x) & Puberty(x)) -> UsuallyStops(x))", "all x y.((Growth(x) & Puberty(y)) -> UsuallyStopsWith(x,y))", "all x.(Growth(x) -> Puberty(x))", "all x.((Growth(x) & Puberty(x)) -> UsuallyCloses(x))", "(all x.(Pupilhood(x) -> GrowthStopsWith(x,Pupilhood)))", "(GrowthClosesWithPuberty(x))", "all x.((Growth(x) & Puberty(x)) -> -GrowthWithPuberty(x))", "all x y.((Growth(x) & Puberty(y)) -> UsuallyClosesWith(x,y))", "(GrowthWithPuberty(Growth))", "all x.(Growth(x) -> Puberty(x))", "all x y.((Growth(x) & Puberty(y)) -> UsuallyStopsWith(x,y))", "all x.((Growth(x) & Puberty(x)) -> Stops(x))", "all x y.((Growth(x) & Puberty(y)) -> StopsWith(x,y))", "all x.(Growth(x) -> Puberty(x))", "all x.((Growth(x) & Puberty(x)) -> StopsWith(x,puberty))", "all x y.((Growth(x) & Puberty(y)) -> UsuallyFour(x,y))"]}
{"id": "eqasc_validation_1476", "nl": "Growth usually ceases when humans become sexually mature.", "fol": "", "prediction": ["all x.((Human(x) & SexuallyMature(x)) -> GrowthChance(x))", "all x y.((Human(x) & SexuallyMature(y)) -> GrowthChance(x,y))", "all x.((Human(x) & SexuallyMature(x)) -> GrowthCloses(x))", "all x y.((Human(x) & SexuallyMature(y)) -> GrowthCloses(x,y))", "(all x.((Human(x) & SexuallyMature(x)) -> GrowthChances(x)))", "all x.((Human(x) & SexuallyMature(x)) -> GrowthChance(x))", "all x y.((Human(x) & SexuallyMature(y)) -> GrowthChance(x,y))", "all x.((Human(x) & SexuallyMature(x)) -> GrowthStops(x))", "all x y.((Human(x) & SexuallyMature(y)) -> UsuallyGrowthCancels(x,y))", "(all x.((Human(x) & SexuallyMature(x)) -> GrowthCloses(x)))", "all x.(GrowthChances(x) -> SexuallyMature(x))", "all x.((Human(x) & SexuallyMature(x)) -> GrowthCloses(x))", "all x y.((Human(x) & SexuallyMature(y)) -> GrowthStops(x,y))", "all x.((Human(x) & SexuallyMature(x)) -> GrowthPeriod(x))", "all x.((Human(x) & SexuallyMature(x)) -> GrowthChance(x))", "all x.((Human(x) & SexuallyMature(x)) -> GrowthStops(x))"]}
{"id": "eqasc_validation_1477", "nl": "The breasts develop during the period when humans become sexually mature", "fol": "", "prediction": ["all x y.((Breast(x) & Human(y) & SexuallyMature(x,y)) -> DevelopsDuring(x,y))", "all x y z.((Breast(x) & Human(y) & SexuallyMature(z) & BecomesMature(x,y,z)) -> DevelopsDuring(x,y,z))", "all x.((Breast(x) & HumanMature(x)) -> DevelopsDuring(x,sexuallyMature(x))", "all x y.((Breast(x) & Human(y)) -> SexuallyMature(x,y))", "all x y.((Breast(x) & Human(y) & SexuallyMature(y)) -> DevelopsDuring(x,y))", "(all x.((Breast(x) & HumanMature(x)) -> DevelopsDuring(x,Mature(x)))", "all x y.((Brust(x) & Human(y) & SexuallyMature(x,y)) -> DevelopsDuring(x,y))", "all x.((Breast(x) & HumanSexuallyMature(x)) -> DevelopsDuring(x,y))", "(all x y.((Breast(x) & Human(y) & SexuallyMature(y)) -> DevelopsDuring(x,y)))", "all x.((Breast(x) & HumanGeneration(x)) -> DevelopsDuring(x))", "all x.((Brust(x) & HumanMature(x)) -> DevelopsDuring(x,SexuallyMature(x))", "all x y z.((Breast(x) & Human(y) & SexuallyMature(z)) -> DevelopsDuring(x,y,z))", "all x.((Breast(x) & HumansBecomeSexuallyMature(x)) -> DevelopsDuring(x,y))", "all x y z.((Breast(x) & Human(y) & SexuallyMature(z)) -> DevelopsDuringPeriod(x,y,z))", "(all x.((Breast(x) & Human(x)) -> SexuallyMature(x)))", "all x y.((Breast(x) & Human(y) & SexuallyMature(y)) -> DevelopsDuring(x,y))"]}
{"id": "eqasc_validation_1478", "nl": "Breasts develop when humans become sexually mature.", "fol": "", "prediction": ["all x.((Breast(x) & Human(y) & SexuallyMature(y)) -> Develops(x,y))", "all x y.((Breast(x) & Human(y) & SexuallyMature(y)) -> Develops(x,y))", "all x.((Breast(x) & Human(x)) -> SexuallyMature(x))", "all x y.((Breast(x) & Human(y) & SexuallyMature(x,y)) -> Develops(x,y))", "all x.((Human(x) & SexuallyMature(x)) -> BreastDevelopment(x))", "all x.((Breast(x) & Human(y) & SexuallyMature(y)) -> Develops(x,y))", "all x y z.((Breast(x) & Human(y) & SexuallyMature(z) & Becomes(x,y,z)) -> Develops(x,y))", "all x.(Breast(x) -> (BecomesSexuallyMature(x) & Human(x)))", "all x y.((Breast(x) & Human(y) & SexuallyMature(y)) -> Develops(x,y))", "all x.((Breast(x) & Human(x)) -> SexuallyMature(x))", "(all x.((Breast(x) & Human(x)) -> SexuallyMature(x)))", "all x y.((Breast(x) & Human(y)) -> SexuallyMature(x,y))", "exists x.(Breast(x) & Human(x) & SexuallyMature(x))", "all x.((Human(x) & SexuallyMature(x)) -> BreastDevelops(x))", "all x.((Breast(x) & Human(y) & SexuallyMature(x,y)) -> Develops(x,y))", "all x y.((Breast(x) & Human(y) & SexuallyMature(x,y)) -> Develops(x,y))"]}
{"id": "eqasc_validation_1479", "nl": "Before puberty, adolescents experience their highest nutritional demand since infancy.", "fol": "", "prediction": ["all x.((Adolescent(x) & BeforePuberty(x)) -> HighestNutritionalDemand(x))", "all x.((Adolescent(x) & HighestNutritionalDemand(x)) -> BeforePuberty(x))", "all x y.((Adolescent(x) & Puberty(y)) -> HighestNutritionalDemand(x,y))", "(HighestNutritionalDemand(adolescence) & BeforePuberty(adolescence))", "all x y z.((Adolescent(x) & Puberty(y) & Infancy(z)) -> HighestNutritionalDemand(x,y,z))", "all x.(Adolescent(x) -> (HighestNutritionalDemand(x) & Infancy(x)))", "(HighestNutritionalDemand(adolescent) & BeforePuberty(adolescent))", "all x.(Adolescent(x) -> HighestNutritionalDemand(x))", "all x.((Adolescent(x) & BeforePuberty(x)) -> HighestNutritionalDemand(x))", "all x y.((Adolescent(x) & Puberty(y)) -> HighestNutritionalDemand(x,y))", "all x.((Adolescent(x) & HighestNutritionalDemand(x)) -> Infancy(x))", "all x.((Adolescent(x) & Puberty(x)) -> HighestNutritionalDemand(x))", "all x y.((Adolescent(x) & Puberty(y)) -> ExperiencesHighestNutritionalDemand(x,y))", "all x y.((Adolescent(x) & Puberty(y) & HighestNutritionalDemand(x,y)) -> Infancy(x))", "(all x.(Adolescent(x) -> HighestNutritionalDemand(x,Infancy)))", "all x y.((Adolescent(x) & Puberty(y)) -> HighestNutritionalDemand(x,y))"]}
{"id": "eqasc_validation_1480", "nl": "Before beginning sexual maturity, adolescents experience their highest nutritional demand since infancy", "fol": "", "prediction": ["all x y.((Adolescent(x) & SexualMaturity(y)) -> HighestNutritionalDemand(x,y))", "all x.((Adolescent(x) & SexualMaturity(x)) -> HighestNutritionalDemand(x))", "all x y z.((Adolescent(x) & SexualMaturity(y) & Infancy(z)) -> HighestNutritionalDemand(x,y,z))", "(all x.((Adolescent(x) & SexualMaturity(x)) -> HighestNutritionalDemand(x)))", "all x y.((Adolescent(x) & SexualMaturity(y)) -> HighestNutritionalDemand(x,y))", "all x.((Adolescent(x) & SexualMaturity(x)) -> HighestNutritionalDemand(x))", "(all x y.((Adolescent(x) & SexualMaturity(y)) -> HighestNutritionalDemand(x,y)))", "all x y.((Adolescent(x) & SexualMaturity(y)) -> (HighestNutritionalDemand(x,y) & Infancy(x)))", "all x y z.((Adolescent(x) & SexualMaturity(y) & Infancy(z)) -> HighestNutritionalDemand(x,y,z))", "(all x.((Adolescent(x) & SexualMaturity(x)) -> HighestNutritionalDemand(x,Infancy)))", "all x.(Adolescent(x) -> (HighestNutritionalDemand(x) & Infancy(x)))", "all x.((Adolescent(x) & HighestNutritionalDemand(x)) -> SexualMaturityBeforeInfancy(x))", "all x y z.((Adolescent(x) & SexualMaturity(y) & NutritionalDemand(z) & Infancy(z)) -> Highest(x,y,z))", "all x.((Adolescent(x) & SexualMaturity(x)) -> HighestNutritionalDemand(x))", "all x.((Adolescent(x) & SexualMaturity(x)) -> HighestNutritionalDemand(x,infancy))", "all x y.((Adolescent(x) & SexualMaturity(y)) -> HighestNutritionalDemand(x,y))"]}
{"id": "eqasc_validation_1481", "nl": "a circle graph can be used to display percents", "fol": "", "prediction": ["all x.(CircleGraph(x) -> DisplaysPercents(x))", "all x y.((CircleGraph(x) & Percent(y)) -> CanDisplay(x,y))", "all x y z.((CircleGraph(x) & Percent(y) & Percent(z)) -> Displays(x,y,z))", "all x y.((CircleGraph(x) & Percents(y)) -> Displays(x,y))", "all x.(CircleGraph(x) -> DisplaysPercents(x))", "all x.((CircleGraph(x) & DisplaysPercents(x)) -> CanBeUsedToDisplayPercents(x))", "all x.(CircleGraph(x) -> CanDisplayPercents(x))", "all x y.((CircleGraph(x) & Percent(y)) -> Displays(x,y))", "all x y.((CircleGraph(x) & Percent(y) & Displays(x,y)) -> CanBeUsedToDisplay(x,y))", "all x y z.((CircleGraph(x) & Percent(y) & Percent(z)) -> Displays(x,y,z))", "all x.((CircleGraph(x) & DisplaysPercents(x)) -> CanBeUsedToDisplayPercents(x))", "all x.(CircleGraph(x) -> DisplaysPercents(x))", "all x y.((CircleGraph(x) & Percent(y) & Displays(x,y)) -> CanBeUsedToDisplay(x,y))", "all x.(CircleGraph(x) -> CanDisplayPercents(x))", "exists x.(CircleGraph(x) & DisplayPercents(x))", "exists x.(CircleGraph(x) & DisplaysPercents(x))"]}
{"id": "eqasc_validation_1482", "nl": "Fractions are sometimes expressed as a percent .", "fol": "", "prediction": ["all x.(Fraction(x) -> (ExpressedAsPercent(x) | ExpressedAsPercent(x)))", "all x y.((Fraction(x) & Percent(y)) -> ExpressedAs(x,y))", "all x.(Fraction(x) -> (ExpressedAsPercent(x) & -ExpressedAsPercent(x)))", "all x y z.((Fraction(x) & Percent(y) & (Percent(z) | Percent(z))) -> Expresses(x,y,z))", "all x y.((Fraction(x) & Percent(y)) -> ExpressedAs(x,y))", "(exists x.(Fraction(x) & Percent(x)) & expressedAs(x,y))", "all x.(Fraction(x) -> (ExpressedAsPercent(x) | ExpressedAsPercent(x)))", "all x y.((Fraction(x) & Percent(y)) -> Expresses(x,y))", "exists x.(Fraction(x) & expressedAsPercent(x))", "all x y z.((Fraction(x) & Percent(y) & (Percent(z) | Percent(z))) -> ExpressedAs(x,y,z))", "all x y.((Fraction(x) & Percent(y)) -> ExpressedAs(x,y))", "exists x.(Fraction(x) & expressedAsPercent(x))", "exists x.(Fraction(x) & -Percent(x))", "all x y.((Fraction(x) & Percent(y)) -> ExplicitedAs(x,y))", "exists x.(Fraction(x) & Percent(x))", "exists x.(French(x) & ExpressedAsPercent(x))"]}
{"id": "eqasc_validation_1483", "nl": "a circle graph can be used to display Fractions", "fol": "", "prediction": ["all x y.((CircleGraph(x) & Fraction(y)) -> CanDisplay(x,y))", "all x.(CircleGraph(x) -> DisplaysFractions(x))", "all x y z.((CircleGraph(x) & Fraction(y) & Fraction(z)) -> CanDisplay(x,y,z))", "all x.(CircleGraph(x) -> CanDisplayFractions(x))", "all x y.((CircleGraph(x) & Fraction(y)) -> CanDisplay(x,y))", "all x y z.((CircleGraph(x) & Fractions(y) & Fractions(z)) -> CanDisplay(x,y,z))", "all x.((CircleGraph(x) & DisplaysFractions(x)) -> CanBeUsedToDisplayFractions(x))", "all x y.((CircleGraph(x) & Fraction(y)) -> Displays(x,y))", "all x.(CircleGraph(x) -> DisplaysFractions(x))", "all x y z.((CircleGraph(x) & Fractions(y) & Fractions(z)) -> Displays(x,y,z))", "all x.(CircleGraph(x) -> CanDisplayFractions(x))", "all x y.((CircleGraph(x) & Fraction(y)) -> CanBeDisplayed(x,y))", "all x y.((CircleGraph(x) & Fraction(y) & Displays(x,y)) -> CanBeUsedToDisplay(x,y))", "all x.(CircleGraph(x) -> (DisplaysFractions(x) & DisplaysFractions(x)))", "exists x.(CircleGraph(x) & CanBeUsedToDisplayFractions(x))", "exists x.(CircleGraph(x) & DisplaysFractions(x))"]}
{"id": "eqasc_validation_1484", "nl": "Pie Charts Pie charts are used predominantly to show percentages or parts of a whole.", "fol": "", "prediction": ["all x.(PieChart(x) -> (ShowsPercentageOrPartsOfWhole(x) & UsedForPartsOfWhole(x)))", "all x y.((PieChart(x) & PieChart(y)) -> (ShowsPercentageOrPartsOfWhole(x,y)))", "all x.(PieChart(x) -> (Pie Chart(x) & (ShowsPercentage(x) | ShowsPartsOfWhole(x))))", "all x y.((PieChart(x) & PieChart(y)) -> (ShowsPotentials(y,x) | ShowsParts(y,x)))", "(all x.(PieChart(x) -> ShowsPercentageOrPartsOfWhole(x)))", "all x.(PieChart(x) -> (ShowsPotentials(x) | ShowsPartsOfWhole(x)))", "(PieCharts) -> (Pie Charts(p) & (ShowsPercentage(p) | ShowsParts(p))))", "(PieCharts(pie) -> (ShowsPercentage(pie) | ShowsPartsOfWhole(pie)))", "all x y z.((PieChart(x) & PieChart(y) & (Proportion(z) | Part(z)))) -> UsedToShow(y,z))", "all x.((PieChart(x) & (PotentialPotential(x) | PartsOfWhole(x))) -> PieChart(x))", "all x.(PieChart(x) -> (Pie Chart(x) & (ShowsPotentials(x) | ShowsPartsOfWhole(x))))", "all x y.((PieChart(x) & PieChart(y)) -> (ShowsProportions(y,x) | ShowsParts(y,x)))", "all x.(PieChart(x) -> (ShowsProportions(x) | ShowsPartsOfWhole(x)))", "all x y.((PieChart(x) & PieChart(y)) -> (ShowsPercentageOrParts(x,y)))", "all x.(PieChart(x) -> (PieceChart(x) & ShowsPercentageOrPartsOfWhole(x)))", "all x y.((PieChart(x) & Whole(y)) -> (ShowsPotentials(x,y) | ShowsParts(x,y)))"]}
{"id": "eqasc_validation_1485", "nl": "pie charts are circle graphs", "fol": "", "prediction": ["all x.(PieChart(x) -> (CircleGraph(x) & CircleGraph(x)))", "(CircleGraph(PieCharts) & CircleGraph(PieCharts))", "all x.(PieChart(x) -> CircleGraph(x))", "all x y.((PieChart(x) & CircleGraph(y)) -> (CircleGraph(x) & CircleGraph(y)))", "all x.(PieChart(x) -> (CircleGraph(x) & CircleGraph(x)))", "(CircleGraph(PieCharts) & CircleGraph(PieCharts))", "all x y.((PieChart(x) & CircleGraph(y)) -> (CircleGraph(x) & CircleGraph(x)))", "(CircleGraph(pie) | CircleGraph(pie)))", "all x.(PieChart(x) -> CircleGraph(x))", "(CircleGraph(pieCharts) & CircleGraph(pieCharts))", "all x y.((PieChart(x) & CircleGraph(y)) -> IsCircleGraph(x,y))", "all x.(PieChart(x) -> (CircleGraph(x) & CircleGraph(x)))", "all x.(PieChart(x) -> (CircleGraph(x) & CircleGraph(x)))", "all x.(PieChart(x) -> CircleGraph(x))", "all x.(PieChart(x) -> (CircleGraph(x) & CircleGraph(x)))", "all x.(PieChart(x) -> CircleGraph(x))"]}
{"id": "eqasc_validation_1486", "nl": "Percents are decimal fractions.", "fol": "", "prediction": ["all x.(Percent(x) -> DecimalFraction(x))", "(DecimalFraction(percent) & DecimalFraction(percent))", "all x.(Percent(x) -> DecimalFraction(x))", "all x y.((Percent(x) & DecimalFraction(y)) -> DecimalFraction(x,y))", "(DecimalFraction(percent) & DecimalFraction(percent))", "all x.(Percent(x) -> DecimalFraction(x))", "all x y.((Percent(x) & DecimalFraction(y)) -> DecimalFraction(x,y))", "(DecimalFraction(percent) -> DecimalFraction(percent))", "all x.(Percent(x) -> DecimalFraction(x))", "all x.(Percent(x) -> DecimalFruit(x))", "(DecimalFraction(percent) | DecimalFraction(percent))", "all x.(Pencent(x) -> DecimalFraction(x))", "all x.(Percent(x) -> DecimalFraction(x))", "all x.(Percent(x) -> DecimalFraction(x))", "all x.(Percent(x) -> DecimalFruit(x))", "all x.(Percent(x) -> DecimalFraction(x))"]}
{"id": "eqasc_validation_1487", "nl": "Circle graphs can be used to show decimal fractions", "fol": "", "prediction": ["all x y.((CircleGraph(x) & DecimalFraction(y)) -> Shows(x,y))", "all x.(CircleGraph(x) -> (ShowsDecimalFractions(x) & ShowsDecimalFractions(x)))", "all x.(CircleGraph(x) -> (ShowDecimalFractions(x) & ShowDecimalFractions(x)))", "all x y z.((CircleGraph(x) & DecimalFraction(y) & DecimalFraction(z)) -> Shows(x,y,z))", "all x y.((CircleGraph(x) & DecimalFraction(y)) -> Shows(x,y))", "all x.((CircleGraph(x) & DecimalFraction(x)) -> Shows(x,decimalFractions))", "all x.(CircleGraph(x) -> ShowsDecimalFractions(x))", "(DecimalFractions(CircleGraph) -> Shows(CircleGraph,CircleGraph))", "all x y z.((CircleGraph(x) & DecimalFraction(y) & DecimalFraction(z)) -> Shows(x,y,z))", "all x.(CircleGraph(x) -> (ShowsDecimalFractions(x) & ShowsDecimalFractions(x)))", "all x y.((CircleGraph(x) & DecimalFraction(y)) -> Shows(x,y))", "all x y.((CircleGraph(x) & DecimalFraction(y)) -> CanShow(x,y))", "all x.(CircleGraph(x) -> ShowsDecimalFractions(x))", "all x.(CircleGraph(x) -> (ShowDecimalFractions(x) & ShowDecimalFractions(x)))", "all x y.((CircleGraph(x) & DecimalFraction(y)) -> Shows(x,y))", "exists x.(CircleGraph(x) & ShowsDecimalFractions(x))"]}
{"id": "eqasc_validation_1488", "nl": "Data values can also be converted to percent values.", "fol": "", "prediction": ["all x.(DataValue(x) -> ConvertedToPercentValue(x))", "(ConvertsDataValuesToPercentValues(x))", "all x.(DataValue(x) -> ConvertsToPercentValue(x))", "all x y.((DataValue(x) & PercentValue(y)) -> Convertible(x,y))", "(ConvertsDataValuesToPercentValues(Data))", "all x.(DataValue(x) -> ConvertedToPercentValue(x))", "all x.(DataValue(x) -> CanBeConvertedToPercentValue(x))", "all x y.((DataValue(x) & PercentValue(y)) -> Convertible(x,y))", "(ConvertsDataValuesToPercentValues(x))", "all x.(DataValue(x) -> (ConvertsToPercentValue(x)))", "all x y.((DataValue(x) & PercentValue(y)) -> ConvertedTo(x,y))", "(ConvertedToPercentValues(DataValue))", "all x.(DataValue(x) -> ConvertibleToPercentValue(x))", "all x y.((DataValue(x) & PercentValue(y)) -> Convertible(x,y))", "exists x.(DataValue(x) & ConvertedToPercent(x))", "exists x.(DataValue(x) & ConvertsToPercentValue(x))"]}
{"id": "eqasc_validation_1489", "nl": "A circle graph can be used to display data values.", "fol": "", "prediction": ["all x.(CircleGraph(x) -> DisplaysDataValues(x))", "all x y.((CircleGraph(x) & DataValue(y)) -> Displays(x,y))", "all x.(CircleGraph(x) -> DisplaysDataValues(x))", "all x.(CircleGraph(x) -> CanDisplayDataValues(x))", "all x y z.((CircleGraph(x) & DataValue(y) & DataValue(z)) -> Displays(x,y,z))", "all x y.((CircleGraph(x) & DataValue(y)) -> CanDisplay(x,y))", "all x.(CircleGraph(x) -> DisplayDataValues(x))", "all x y.((CircleGraph(x) & DataValue(y)) -> Displays(x,y))", "all x.(CircleGraph(x) -> CanDisplayDataValues(x))", "all x y.((CircleGraph(x) & DataValue(y)) -> CanDisplay(x,y))", "all x y.((CircleGraph(x) & DataValues(y)) -> Displays(x,y))", "all x.(CircleGraph(x) -> DisplaysDataValues(x))", "exists x.(CircleGraph(x) & DisplayDataValues(x))", "exists x.(CircleGraph(x) & UsedToDisplayDataValues(x))", "exists x.(CircleGraph(x) & DisplayDataValues(x))", "exists x.(CircleGraph(x) & DisplaysDataValues(x))"]}
{"id": "eqasc_validation_1490", "nl": "Circle Graphs A circle graph or pie graph uses a circle divided into sections to show data.", "fol": "", "prediction": ["all x.(CircleGraph(x) -> (UsesCircle(x) | UsesPieGraph(x)) & DividedIntoSections(x)))", "all x.((CircleGraph(x) | PieGraph(x)) -> (UsesCircle(x) & DividedIntoSections(x) & ShowsData(x)))", "all x.(CircleGraph(x) -> (CircleGraph(x) | PieGraph(x)) & UsesCircle(x) & DividedIntoSections(x)))", "all x y.((CircleGraph(x) & (CircleGraph(y) | PieGraph(y))) -> UsesCircle(x,y))", "all x y.((CircleGraph(x) | PieGraph(y)) -> (UsesCircle(x,y) & DividedIntoSections(x,y)))", "all x.(CircleGraph(x) -> ((CircleGraph(x) | PieGraph(x)) & UsesCircle(x) & DividedIntoSections(x)))", "all x y z.((CircleGraph(x) & (CircleGraph(y) | PieGraph(y))) -> (UsesCircle(x,z) & DividedIntoSections(z)))", "all x y.((CircleGraph(x) & (Circle(y) | PieGraph(y))) -> UsesCircleToShowData(x,y))", "all x.((CircleGraph(x) | PieGraph(x)) -> UsesCircle(x))", "(CircleGraph(Circle) | PieGraph(Circle)))", "all x y.((CircleGraph(x) | PieGraph(y)) -> (UsesCircle(x,y) & DividedIntoSections(x) & ShowsData(x,y)))", "all x y.((CircleGraph(x) & (CircleGraph(y) | PieGraph(y))) -> (UsesCircle(x,y) & DividedIntoSections(x) & ShowsData(x)))", "all x.(CircleGraph(x) -> (UsesCircle(x) | UsesPieGraph(x)) & ShowsData(x)))", "all x.(CircleGraph(x) -> (CircleGraph(x) | PieGraph(x)) & UsesCircle(x) & DividedIntoSections(x) & ShowsData(x)))", "all x.((CircleGraph(x) | PieGraph(x)) -> (UsesCircle(x) & DividedIntoSections(x) & ShowsData(x)))", "all x.((CircleGraph(x) | PieGraph(x)) -> UsesCircleToShowData(x))"]}
{"id": "eqasc_validation_1491", "nl": "percentages can be used to show data", "fol": "", "prediction": ["all x.(Percentage(x) -> ShowData(x))", "all x y.((Percentage(x) & Data(y)) -> Shows(x,y))", "all x.((Percentage(x) & Data(y)) -> Shows(x,y))", "all x.(Percentage(x) -> ShowData(x))", "all x y.((Percentage(x) & Data(y)) -> CanBeUsedToShow(x,y))", "all x.((Percentage(x) & ShowData(x)) -> CanBeUsedToShowData(x))", "all x.(Percentage(x) -> CanBeUsedToShowData(x))", "all x y z.((Percentage(x) & Data(y) & Data(z)) -> Shows(x,y,z))", "(all x.(Potential(x) -> ShowData(x)))", "all x y.((Percentage(x) & Data(y)) -> Shows(x,y))", "(all x.(Percentage(x) -> ShowData(x)))", "all x y.((Percentage(x) & Data(y)) -> CanShow(x,y))", "all x.(Potential(x) -> ShowsData(x))", "all x.(Percentage(x) -> ShowsData(x))", "exists x.(Percentage(x) & ShowData(x))", "exists x.(Percentage(x) & CanShowData(x))"]}
{"id": "eqasc_validation_1492", "nl": "Description Makes a circle graph, also known as a pie chart, of data in a list.", "fol": "", "prediction": ["all x.((CircleGraph(x) & PieChart(x)) -> MakesDataInList(x))", "all x y.((CircleGraph(x) & List(y)) -> (Makes(x,y) & Makes(x,y)))", "all x y z.((CircleGraph(x) & PieChart(y) & List(z)) -> MakesOfData(x,y,z))", "(MakesCircleGraph(x) & AlsoKnownAsPieChart(x) & OfDataInList(x))", "all x.((CircleGraph(x) & PieChart(x)) -> MakesOfDataInList(x))", "all x y.((CircleGraph(x) & List(y)) -> (MakesCircleGraph(x,y) & MakesPieChart(x,y)))", "(CircleGraph(x) & PieChart(x) & DataInList(x))", "all x y z.((CircleGraph(x) & PieChart(y) & DataInList(z)) -> Makes(x,y))", "exists x.(CircleGraph(x) & PieChart(x) & DataInList(x))", "all x.(CircleGraph(x) -> (PieChart(x) & OfDataInList(x)))", "(MakesCircleGraph(x) & (PieChart(x) | List(x)))", "all x y.((CircleGraph(x) & List(y) & MadeBy(x,y)) -> (PieChart(x) & DataInList(x)))", "(MakesCircleGraph(x) & AlsoKnownAsPieChart(x) & OfDataInList(x))", "all x y z.((CircleGraph(x) & PieChart(y) & List(z) & Makes(x,y)) -> OfDataInList(x,z))", "all x.((CircleGraph(x) & PieChart(x)) -> MakesDataInList(x))", "all x.((CircleGraph(x) & PieChart(x)) -> MakesOfDataInList(x))"]}
{"id": "eqasc_validation_1493", "nl": "a pie chart can be used to display percents", "fol": "", "prediction": ["all x.(PieChart(x) -> DisplaysPercents(x))", "all x y.((PieChart(x) & Percent(y)) -> Displays(x,y))", "all x y z.((PieChart(x) & Percent(y) & Percent(z)) -> Displays(x,y,z))", "all x.(PieChart(x) -> DisplaysPercents(x))", "all x y.((PieChart(x) & Percent(y)) -> Displays(x,y))", "all x.((PieChart(x) & DisplaysPercents(x)) -> CanBeUsedToDisplayPercents(x))", "all x y.((PieChart(x) & Percents(y)) -> Displays(x,y))", "all x y z.((PieChart(x) & Percent(y) & Percent(z) & Displays(x,y,z)) -> CanBeUsedToDisplay(x,y,z))", "all x.(PieChart(x) -> (DisplaysPercents(x) & DisplaysPercents(x)))", "all x y.((PieChart(x) & Percent(y) & Displays(x,y)) -> CanBeUsedToDisplay(x,y))", "all x y z.((PieChart(x) & Percent(y) & Percent(z)) -> Displays(x,y,z))", "all x.(PieChart(x) -> DisplaysPercents(x))", "all x.(PieChart(x) -> DisplayPercents(x))", "all x y.((PieChart(x) & Percents(y)) -> Displays(x,y))", "exists x.(PieChart(x) & DisplaysPercents(x))", "exists x.(PieChart(x) & DisplayPercents(x))"]}
{"id": "eqasc_validation_1494", "nl": "A circle graph can be used to display decimal fractions", "fol": "", "prediction": ["all x.(CircleGraph(x) -> DisplaysDecimalFractions(x))", "all x y.((CircleGraph(x) & DecimalFraction(y)) -> Displays(x,y))", "all x y z.((CircleGraph(x) & DecimalFraction(y) & DecimalFraction(z)) -> Displays(x,y,z))", "all x.(CircleGraph(x) -> (DisplaysDecimalFractions(x) & DisplaysDecimalFractions(x)))", "all x.(CircleGraph(x) -> DisplaysDecimalFractions(x))", "all x y.((CircleGraph(x) & DecimalFraction(y)) -> Displays(x,y))", "all x y.((CircleGraph(x) & DecimalFraction(y)) -> CanDisplay(x,y))", "all x y z.((CircleGraph(x) & DecimalFraction(y) & DecimalFraction(z)) -> Displays(x,y,z))", "all x.(CircleGraph(x) -> CanBeUsedToDisplayDecimalFractions(x))", "all x.(CircleGraph(x) -> (DisplaysDecimalFractions(x) & DisplaysDecimalFractions(x)))", "all x.(CircleGraph(x) -> DisplaysDecimalFractions(x))", "all x y.((CircleGraph(x) & DecimalFraction(y)) -> Displays(x,y))", "all x y z.((CircleGraph(x) & DecimalFraction(y) & DecimalFraction(z)) -> Displays(x,y,z))", "all x y.((CircleGraph(x) & DecimalFraction(y)) -> CanDisplay(x,y))", "all x.(CircleGraph(x) -> DisplayDecimalFractions(x))", "exists x.(CircleGraph(x) & DisplaysDecimalFractions(x))"]}
{"id": "eqasc_validation_1495", "nl": "a circle graph can be used to display decimal fractions", "fol": "", "prediction": ["all x y.((CircleGraph(x) & DecimalFraction(y)) -> Displays(x,y))", "all x.(CircleGraph(x) -> DisplaysDecimalFractions(x))", "all x y z.((CircleGraph(x) & DecimalFraction(y) & DecimalFraction(z)) -> Displays(x,y,z))", "all x y.((CircleGraph(x) & DecimalFraction(y)) -> CanDisplay(x,y))", "all x.(CircleGraph(x) -> (DisplaysDecimalFractions(x) & DisplaysDecimalFractions(x)))", "all x.(CircleGraph(x) -> DisplaysDecimalFractions(x))", "all x.((CircleGraph(x) & DecimalFraction(x)) -> Displays(x,decimalFractions))", "all x y z.((CircleGraph(x) & DecimalFraction(y) & DecimalFraction(z)) -> Displays(x,y,z))", "all x y.((CircleGraph(x) & DecimalFraction(y)) -> Displays(x,y))", "all x y z.((CircleGraph(x) & DecimalFraction(y) & DecimalFraction(z)) -> CanDisplay(x,y,z))", "all x.(CircleGraph(x) -> DisplaysDecimalFractions(x))", "all x y.((CircleGraph(x) & DecimalFraction(y)) -> CanDisplay(x,y))", "all x.(CircleGraph(x) -> CanDisplayDecimalFractions(x))", "all x.(CircleGraph(x) -> (DisplaysDecimalFractions(x) & DisplaysDecimalFractions(x)))", "all x y.((CircleGraph(x) & DecimalFraction(y)) -> Displays(x,y))", "exists x.(CircleGraph(x) & DisplayDecimalFractions(x))"]}
{"id": "eqasc_validation_1496", "nl": "Line, Bar, Circle, Pictorial graphs are all good answers.", "fol": "", "prediction": ["all x.((Line(x) | Bar(x) | Circle(x) | PictorialGraph(x)) -> GoodApplication(x))", "(GoodApplications(Line,Bar,Circle) & GoodApplications(PictorialGraphs))", "(GoodApplication(Line,Bar,Circle,PictorialGraph))", "all x.(GoodApplication(x) -> (Line(x) | Bar(x) | Circle(x) | PictorialGraph(x)))", "(GoodResponse(Line,Bar,Circle,PictorialGraph))", "all x.((Line(x) | Bar(x) | Circle(x) | PictorialGraph(x)) -> GoodApplication(x))", "(Good(Line) & Good(Bar) & Good(Circle) & Good(PictorialGraph))", "(GoodApplication(Line) & GoodApplication(Bar) & GoodApplication(Circle) & GoodApplication(PictorialGraph))", "all x y.((Line(x) | Bar(x) | Circle(x) | PictorialGraph(y)) -> GoodApplication(x,y))", "(GoodAnswers(Line,Bar,Circle) & GoodAnswers(PictorialGraphs))", "all x.((Line(x) | Bar(x) | Circle(x) | PictorialGraph(x)) -> GoodResponse(x))", "all x.(GoodApplication(x) -> (Line(x) | Bar(x) | Circle(x) | PictorialGraph(x)))", "(GoodResponse(Line,Bar,Circle,PictorialGraph))", "all x.(GoodApplication(x) -> (Line(x) | Bar(x) | Circle(x) | PictorialGraph(x)))", "all x.((Line(x) | Bar(x) | Circle(x) | PictorialGraph(x)) -> GoodApplication(x))", "all x.((Line(x) | Bar(x) | Circle(x) | PictorialGraph(x)) -> Good(x))"]}
{"id": "eqasc_validation_1497", "nl": "a bar is a type of graph", "fol": "", "prediction": ["all x.(Bar(x) -> (Graph(x) & Graph(x)))", "all x y.((Bar(x) & Graph(y)) -> (Graph(x,y) & Graph(x,y)))", "all x.(Bar(x) -> (Graph(x) & Graph(x)))", "(Graph(Bar) & Graph(Bar))", "all x.(Bar(x) -> (Graph(x) & Graph(x)))", "all x y.((Bar(x) & Graph(y)) -> Graph(x,y))", "all x.(Bar(x) -> (Graph(x) & Graph(x)))", "all x y.((Bar(x) & Chart(y)) -> Graph(x,y))", "all x.(Bar(x) -> (Graph(x) & Graph(x)))", "all x.(Bar(x) -> (Graph(x) & TypeOfGraph(x)))", "all x y.((Bar(x) & Graph(y)) -> TypeOfGraph(x,y))", "all x.(Bar(x) -> (Graph(x) & Graph(x)))", "all x.(Bar(x) -> (Graph(x) & Graph(x) & Graph(x)))", "all x.(Bar(x) -> Graph(x))", "exists x.(Bar(x) & TypeOfGraph(x))", "all x.(Bar(x) -> (Graph(x) & HasGraph(x)))"]}
{"id": "eqasc_validation_1498", "nl": "Seventeen percent of residents are black, four percent are Asian, and three percent are Latino.", "fol": "", "prediction": ["all x y z.((Resident(x) & Black(x) & Asian(y) & Latino(z)) -> (SeventeenPercent(x) & FourPercent(y) & ThreePercent(z)))", "(Residents(x) & (Black(x) | Asian(x))) & (Latino(x) | Latino(x)))", "(exists x.(Resident(x) & Black(x)) & exists y.(Asian(y) & Asian(y))) & exists z.(Latino(z) & Black(z)))", "all x.(Resident(x) -> (Black(x) | Asian(x) | Latino(x)))", "(Residents(x,seventeen) & Black(x) & Asian(x) & Latino(x))", "(Residents(x) & Black(x) & Asian(x) & Latino(x))", "all x y z.((Resident(x) & Black(y) & Asian(z)) -> (SeventeenPercent(x,y) & FourPercent(x,z) & ThreePercent(x,y)))", "all x y z.((Resident(x) & Black(x) & Asian(y) & Latino(z)) -> (SeventeenPercent(x) & FourPercent(x) & ThreePercent(x)))", "(Black(resident(resident) | Asian(resident) | Latino(resident)))", "(Residents(residents) & Black(residents) & Asian(residents) & Latino(residents))", "-(Residents(x) & Black(x)) & Asian(x) & Latino(x))", "all x.(Resident(x) -> (Black(x) | Asian(x) | Latino(x)))", "(Residents(black) & Residents(asia) & Residents(latino))", "all x y z.((Resident(x) & Black(x) & Asian(y) & Latino(z)) -> (SeventeenPercent(x) | FourPercent(x,y) | ThreePercent(x,z)))", "all x.(Resident(x) -> (Black(x) & Asian(x) & Latino(x)))", "-(Residents(x) & Black(x)) & Asian(x) & Latino(x))"]}
{"id": "eqasc_validation_1499", "nl": "a circle graph can be used to display the number of residents that are black, Asian, and Latino", "fol": "", "prediction": ["all x.(CircleGraph(x) -> (DisplaysBlackResidents(x) & DisplaysAsianResidents(x) & DisplaysLatinoResidents(x)))", "all x y.((CircleGraph(x) & BlackResident(y) & AsianResident(y) & LatinoResident(y)) -> DisplaysResidents(x,y))", "all x y z.((CircleGraph(x) & BlackResident(y) & AsianResident(z) & LatinoResident(z)) -> DisplaysNumberOfResidents(x,y,z))", "all x.((CircleGraph(x) & DisplaysResidents(x) & Black(x) & Asian(x) & Latino(x)) -> DisplaysResidents(x))", "all x.(CircleGraph(x) -> DisplaysResidents(x))", "all x y.((CircleGraph(x) & Black(y) & Asian(y) & Latino(y)) -> DisplaysResidents(x,y))", "all x.((CircleGraph(x) & DisplaysResidents(x,black) & DisplaysResidents(x,asia) & DisplaysResidents(x,latino)) -> DisplaysResidents(x,latino))", "exists x,y,z,w,x,z,w,x,y,z,w,x,w,x,y,z,w,x,y,z,w,x,w,x,y,z,w,x,w,x,y,z,w,x,w,x,y,z,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w,x,w", "all x.((CircleGraph(x) & DisplaysNumberOfResidents(x) & Black(x) & Asian(x) & Latino(x)) -> DisplaysNumberOfResidents(x))", "all x y z.((CircleGraph(x) & BlackResident(y) & AsianResident(z) & LatinoResident(y)) -> DisplaysResidents(x,y,z))", "all x y.((CircleGraph(x) & Residents(y) & Black(y) & Asian(y) & Latino(y)) -> DisplaysNumberOfResidents(x,y))", "all x.(CircleGraph(x) -> (DisplaysBlackResidents(x) & DisplaysAsianResidents(x) & DisplaysLatinoResidents(x)))", "all x.(CircleGraph(x) -> DisplaysBlackResidents(x)) | AsianResidents(x) | LatinoResidents(x))", "all x y z.((CircleGraph(x) & BlackResident(y) & AsianResident(z) & LatinoResident(z)) -> DisplaysNumberOfResidents(x,y,z))", "exists x.(CircleGraph(x) & DisplaysResidents(x) & (Black(x) | Asian(x) | Latino(x)))", "all x y.((CircleGraph(x) & BlackResident(y) & AsianResident(y) & LatinoResident(y)) -> DisplaysNumberOfResidents(x,y))"]}
{"id": "eqasc_validation_1500", "nl": "All percents can be written as fractions.", "fol": "", "prediction": ["all x.(Percent(x) -> CanBeWrittenAsFractions(x))", "(all x.(Percent(x) -> Fraction(x)))", "all x.(Percent(x) -> CanBeWrittenAsFractions(x))", "(all x.(Percent(x) -> WrittenAsFractions(x))", "all x y.(Percent(x) -> CanBeWrittenAsFractions(x))", "all x.(Percent(x) -> CanBeWrittenAsFractions(x))", "(all x.(Percent(x) -> CanBeWrittenAsFractions(x))", "all x.(Pentage(x) -> CanBeWrittenAsFractions(x))", "all x y.(Percent(x) -> CanBeWrittenAsFractions(x,y))", "all x.(Percent(x) -> CanBeWrittenAsFractions(x))", "all x.(Percent(x) -> CanBeWrittenAsFractures(x))", "all x.(Percent(x) -> WrittenAsFractions(x))", "all x.(Percent(x) -> CanWriteAsFractions(x))", "all x.(Percent(x) -> CanBeWrittenAsFractions(x))", "all x.(Percent(x) -> WrittenAsFractions(x))", "all x.(Percent(x) -> CanBeWrittenAsFractures(x))"]}
{"id": "eqasc_validation_1501", "nl": "a circle graph can be used to display fractions", "fol": "", "prediction": ["all x y.((CircleGraph(x) & Fraction(y)) -> CanDisplay(x,y))", "all x.(CircleGraph(x) -> DisplaysFractions(x))", "all x y z.((CircleGraph(x) & Fraction(y) & Fraction(z)) -> CanDisplay(x,y,z))", "all x.(CircleGraph(x) -> CanDisplayFractions(x))", "all x y.((CircleGraph(x) & Fraction(y)) -> Displays(x,y))", "all x y z.((CircleGraph(x) & Fraction(y) & Fraction(z)) -> Displays(x,y,z))", "all x.((CircleGraph(x) & DisplayFractions(x)) -> CanBeUsedToDisplayFractions(x))", "all x.(CircleGraph(x) -> CanBeUsedToDisplayFractions(x))", "all x.(CircleGraph(x) -> DisplayFractions(x))", "all x y z.((CircleGraph(x) & Fractions(y) & Fractions(z)) -> CanDisplay(x,y,z))", "all x y.((CircleGraph(x) & Fraction(y)) -> CanDisplay(x,y))", "all x.(CircleGraph(x) -> (DisplaysFractions(x) & DisplaysFractions(x)))", "all x y.((CircleGraph(x) & Fraction(y) & Displays(x,y)) -> CanBeUsedToDisplay(x,y))", "all x y.((CircleGraph(x) & Fraction(y)) -> Displays(x,y))", "exists x.(CircleGraph(x) & DisplaysFractions(x))", "exists x.(CircleGraph(x) & DisplayFractions(x))"]}
{"id": "eqasc_validation_1502", "nl": "Percent is parts per hundred.", "fol": "", "prediction": ["all x.(Percent(x) -> PartsPerSixty(x))", "all x.(Percent(x) -> PartsPerSixty(x))", "(PartsPerSixty(Percent))", "all x y.(Percent(x) -> PartsPerSixty(y))", "all x.(Percent(x) -> PartsPerSixty(x))", "(PartsPerSixty(Percent))", "all x.(Percent(x) -> PartsPerSixt(x))", "all x y.(Percent(x) -> PartsPerSixty(y))", "All x.(Pencent(x) -> PartsPerSixty(x))", "all x.(Percent(x) -> PartsPerSixty(x))", "all x.(Percent(x) -> PartPerSixty(x))", "all x.(Percent(x) -> PartsPerSixty(x))", "all x y.(Percent(x) -> PartsPerSixty(y))", "All x.(Pencent(x) -> PartsPerSixty(x))", "all x.(Percent(x) -> PartsPerSix(x))", "All x.(Percent(x) -> PartsPerSixty(x))"]}
{"id": "eqasc_validation_1503", "nl": "a circle graph can be used to display parts per hundred", "fol": "", "prediction": ["all x.(CircleGraph(x) -> DisplaysPartsPerSixty(x))", "all x y.((CircleGraph(x) & PartsPerSixty(y)) -> CanDisplay(x,y))", "all x y z.((CircleGraph(x) & PartPerSixt(y) & PartPerSixt(z)) -> Displays(x,y,z))", "all x y.((CircleGraph(x) & PartsPerSixty(y)) -> Displays(x,y))", "all x.(CircleGraph(x) -> DisplaysPartsPerSixty(x))", "all x.(CircleGraph(x) -> (DisplaysPartsPer100(x) & DisplaysPartsPer100(x)))", "all x y z.((CircleGraph(x) & PartsPerSixt(y) & PartsPerSixt(z)) -> Displays(x,y,z))", "all x y.((CircleGraph(x) & PartPerSix(y)) -> CanDisplay(x,y))", "all x.((CircleGraph(x) & PartPerSixty(x)) -> Displays(x,y))", "all x y z.((CircleGraph(x) & PartsPerSixt(y) & PartsPerSixt(z)) -> CanDisplay(x,y,z))", "all x y.((CircleGraph(x) & PartPerSixt(y)) -> CanDisplay(x,y))", "all x.(CircleGraph(x) -> CanDisplayPartsPerSixty(x))", "all x.(CircleGraph(x) -> DisplaysPiecesPerSixty(x))", "exists x.(CircleGraph(x) & CanBeUsedToDisplayPartsPerSixty(x))", "all x y.((CircleGraph(x) & PartPer100(y)) -> CanDisplay(x,y))", "all x.(CircleGraph(x) -> (DisplaysPartsPer100(x) & DisplaysPartsPer100(x)))"]}
{"id": "eqasc_validation_1504", "nl": "Display screen shows it all.", "fol": "", "prediction": ["all x.(DisplayScreen(x) -> ShowsAll(x))", "(ShowsAll(DisplayScreen) -> ShowsAll(DisplayScreen))", "all x y.((DisplayScreen(x) & DisplayScreen(y)) -> ShowsAll(x,y))", "(DisplayScreen(Display) -> ShowsAll(Display))", "all x.(DisplayScreen(x) -> ShowsAll(x))", "DisplayScreenShowsAll(x)", "(ShowsAll(DisplayScreen) -> ShowsAll(DisplayScreen))", "All x y.((DisplayScreen(x) & Shows(x,y)) -> Shows(x,y))", "(DisplayScreenShowsAll(DisplayScreen))", "DisplayScreenShowsAll(x)", "all x.(DisplayScreen(x) -> ShowsAll(x))", "All x y.((DisplayScreen(x) & DisplayScreen(y)) -> Shows(x,y))", "all x.(DisplayScreen(x) -> ShowsAll(x))", "all x.(DisplayScreen(x) -> ShowsAll(x))", "all x.(DisplayScreen(x) -> ShowsItAll(x))", "all x.(DisplayScreen(x) -> ShowsAll(x))"]}
{"id": "eqasc_validation_1505", "nl": "a circle graph can be used to show percents", "fol": "", "prediction": ["all x y.((CircleGraph(x) & Percent(y)) -> Shows(x,y))", "all x.(CircleGraph(x) -> ShowsPercents(x))", "all x y z.((CircleGraph(x) & Percent(y) & Percent(z)) -> Shows(x,y,z))", "all x y.((CircleGraph(x) & Percent(y)) -> CanShowPercents(x,y))", "all x.(CircleGraph(x) -> ShowsPercents(x))", "all x.((CircleGraph(x) & Percents(x)) -> Shows(x,%))", "all x y.((CircleGraph(x) & Percents(y)) -> Shows(x,y))", "all x y z.((CircleGraph(x) & Percent(y) & Percent(z)) -> CanShow(x,y,z))", "all x y z.((CircleGraph(x) & Percents(y) & Percents(z)) -> Shows(x,y,z))", "all x.(CircleGraph(x) -> ShowsPercents(x))", "all x y.((CircleGraph(x) & Percents(y)) -> CanShow(x,y))", "all x.(CircleGraph(x) -> CanShowPercents(x))", "all x y.((CircleGraph(x) & Percent(y) & Shows(x,y)) -> CanBeUsedToShow(x,y))", "exists x.(CircleGraph(x) & CanShowPercents(x))", "all x.(CircleGraph(x) -> ShowsPercents(x))", "exists x.(CircleGraph(x) & ShowsPercents(x))"]}
{"id": "eqasc_validation_1506", "nl": "a compass is used for determining direction", "fol": "", "prediction": ["all x y.((Compass(x) & Direction(y)) -> DeterminesDirection(x,y))", "all x.(Compass(x) -> DeterminesDirection(x))", "all x y z.((Compass(x) & Direction(y) & Direction(z)) -> Determines(x,y,z))", "all x y.((Compass(x) & Direction(y)) -> DeterminesDirection(x,y))", "all x.(Compass(x) -> DeterminesDirection(x))", "all x y.((Compass(x) & Direction(y) & DeterminesDirection(x,y)) -> UsedFor(x,y))", "all x y z.((Compass(x) & Direction(y) & Direction(z)) -> Determines(x,y,z))", "all x.(Compass(x) -> DeterminesDirection(x))", "all x y.((Compass(x) & Direction(y) & DeterminesDirection(x,y)) -> UsedFor(x,y))", "all x.(Compass(x) -> (DeterminesDirection(x) & UsesForDirection(x)))", "all x y z.((Compass(x) & Direction(y) & Direction(z)) -> Determines(x,y,z))", "all x.(Compass(x) -> DetermineDirection(x))", "all x y.(Compass(x) -> DeterminesDirection(x,y))", "all x.(Compass(x) -> DeterminesDirection(x,Direction))", "exists x.(Compass(x) & Direction(x) & DeterminesDirection(x))", "all x.(Compass(x) -> DetermineDirectionWithCompass(x))"]}
{"id": "eqasc_validation_1507", "nl": "Compass needles line up with magnetic fields.", "fol": "", "prediction": ["all x.(CompassNeedle(x) -> LineUpWithMagneticFields(x))", "all x y.((CompassNeedle(x) & MagneticField(y)) -> LinesUp(x,y))", "all x.(CompassNeedle(x) -> LineUpWithMagneticFields(x))", "all x y z.((CompassNeedle(x) & MagneticField(y) & MagneticField(z)) -> LinesUp(x,y,z))", "all x y.((CompassNeedle(x) & MagneticField(y)) -> LinesUpWith(x,y))", "(LineUpMagneticFields(compassNeedles))", "all x.(CompassNeedle(x) -> LinesUpWithMagneticFields(x))", "all x y.((CompassNeedle(x) & MagneticField(y)) -> LineUp(x,y))", "all x.(CompassNeedle(x) -> LineUpWithMagneticFields(x))", "all x y z.((CompassNeedle(x) & MagneticField(y) & MagneticField(z)) -> LinesUp(x,y,z))", "all x y.((CompassNeedle(x) & MagneticField(y)) -> LinesUpWith(x,y))", "all x y.((CompassNeedle(x) & MagneticField(y)) -> LinesUp(x,y))", "all x.(CompassNeedle(x) -> LinesUpWithMagneticFields(x))", "all x.(CompassNeedle(x) -> LineUpWithMagneticFields(x))", "all x.(CompassNeedle(x) -> LinesUpWithMagneticFields(x))", "all x.(CompassNeedle(x) -> LineUpWithMagneticFields(x))"]}
{"id": "eqasc_validation_1508", "nl": "Magnetic fields are used for determining direction.", "fol": "", "prediction": ["all x.(MagneticField(x) -> DeterminesDirection(x))", "all x y.((MagneticField(x) & Direction(y)) -> Determines(x,y))", "(all x.(MagneticField(x) -> DeterminesDirection(x)))", "all x.(MagneticField(x) -> DeterminesDirection(x))", "all x y z.((MagneticField(x) & Direction(y) & Direction(z)) -> Determines(x,y,z))", "all x.(MagneticField(x) -> DetermineDirection(x))", "all x y.((MagneticField(x) & Direction(y)) -> Determines(x,y))", "(all x.(MagneticField(x) -> DeterminesDirection(x)))", "all x y.((MagneticField(x) & Direction(y)) -> UsedForDetermining(x,y))", "(all x.(MagneticField(x) -> DeterminesDirection(x)))", "all x.(MagneticField(x) -> DeterminesDirection(x))", "all x y.((MagneticField(x) & Direction(y)) -> DeterminedFor(x,y))", "all x.(MagneticField(x) -> DetermineDirection(x))", "all x.(MagneticField(x) -> DeterminesDirection(x))", "all x.(MagneticField(x) -> DeterminesDirection(x))", "all x.(MagneticField(x) -> DetermineDirection(x))"]}
{"id": "eqasc_validation_1509", "nl": "magnets can be used to determine direction", "fol": "", "prediction": ["all x.(Magnet(x) -> DetermineDirection(x))", "all x y.((Magnet(x) & Direction(y)) -> DeterminesDirection(x,y))", "all x.(Magnet(x) -> (DetermineDirection(x) & Uses(x,Magnets)))", "all x y z.((Magnet(x) & Direction(y) & Direction(z)) -> Determines(x,y,z))", "all x y.((Magnet(x) & Direction(y)) -> CanBeUsedToDetermine(x,y))", "(all x.(Magnet(x) -> DetermineDirection(x,Direction)))", "all x.(Magnet(x) -> DetermineDirection(x))", "all x y z.((Magnet(x) & Direction(y) & Direction(z)) -> CanBeUsedToDetermine(x,y,z))", "all x.(Magnet(x) -> (DetermineDirection(x) & Uses(x,Magnets)))", "all x y.((Magnet(x) & Direction(y) & DeterminesDirection(x,y)) -> CanBeUsedToDetermine(x,y))", "all x y.((Magnet(x) & Direction(y)) -> DeterminesDirection(x,y))", "all x.(Magnet(x) -> DetermineDirection(x))", "(all x.(Magnet(x) -> DetermineDirection(x,Direction)))", "all x.(Magnet(x) -> (DetermineDirection(x) & Use(x,Magnets)))", "all x y.((Magnet(x) & Direction(y) & UsedToDetermine(x,y)) -> DeterminesDirection(x,y))", "all x.(Magnet(x) -> DetermineDirection(x))"]}
{"id": "eqasc_validation_1510", "nl": "Distance and direction are the foundation of GPS-based navigation.", "fol": "", "prediction": ["all x.((Distance(x) & Direction(x)) -> GPSBasedNavigation(x))", "all x.(GPSBasedNavigation(x) -> (Distance(x) & Direction(x)))", "(GpsNavigation(x) & Distance(x) & Direction(x))", "all x y.((GPS(x) & Distance(y) & Direction(y)) -> GPSBasedNavigation(x))", "(all x.((Distance(x) & Direction(x)) -> GPSBasedNavigation(x)))", "all x y.((GPSBasedNavigation(x) & Distance(y) & Direction(y)) -> Foundation(x,y))", "all x.((Distance(x) & Direction(x)) -> GPSBasedNavigation(x))", "(all x.(GPSBasedNavigation(x) -> (Distance(x) & Direction(x))))", "all x.(GPSBasedNavigation(x) -> (Distance(x) & Direction(x)))", "all x.(Gps(x) -> (Distance(x) & Direction(x)))", "(GPSBasedNavigation(x) & Distance(x) & Direction(x))", "(GSM-basedNavigation(x) & Distance(x) & Direction(x))", "all x.((Distance(x) & Direction(x)) -> GPSBasedNavigation(x))", "all x y.((GPSBasedNavigation(x) & Distance(y) & Direction(y)) -> Foundation(x,y))", "all x.(GPSBasedNavigation(x) -> (Distance(x) & Direction(x)))", "all x y.((GPSBasedNavigation(x) & Distance(y) & Direction(y)) -> Fundament(x,y))"]}
{"id": "eqasc_validation_1511", "nl": "a compass is used for navigation", "fol": "", "prediction": ["all x y.((Compass(x) & Navigation(y)) -> UsedFor(x,y))", "all x.(Compass(x) -> UsedForNavigation(x))", "all x y z.((Compass(x) & Navigation(y) & Navigation(z)) -> UsedFor(x,y,z))", "all x y.((Compass(x) & Navigation(y)) -> UsedFor(x,y))", "all x.(Compass(x) -> UsedForNavigation(x))", "all x y z.((Compass(x) & Navigation(y) & Navigation(z)) -> UsedFor(x,y,z))", "all x.(Compass(x) -> UsedForNavigation(x))", "all x y.((Compass(x) & Navigation(y)) -> UsedFor(x,y))", "exists x.(Compass(x) & Navigation(x) & UsedFor(x,Navigation))", "all x y.(Compass(x) -> UsedForNavigation(x,y))", "all x y z.((Compass(x) & Navigation(y) & Navigation(z)) -> UsedFor(x,y,z))", "all x.(Compass(x) -> UsedForNavigation(x))", "all x y.((Compass(x) & Navigation(y)) -> UsedFor(x,y))", "exists x.(Compass(x) & Navigation(x) & UsedFor(x,Navigation))", "all x.(Compass(x) -> UsedForNavigation(x))", "exists x.(Compass(x) & Navigation(x))"]}
{"id": "eqasc_validation_1512", "nl": "Direction is given on a 16 point compass scale.", "fol": "", "prediction": ["all x.(Direction(x) -> 16PointCompassScale(x))", "all x y.((Direction(x) & CompassScale(y) & 16Point(y)) -> GivenOn(x,y))", "(DirectionGivenOnCompassScale(x,16))", "all x.(Direction(x) -> 16PointCompassScales(x))", "all x y.((Direction(x) & CompassScale(y) & 16PointScale(x,y)) -> Given(x,y))", "all x y z.((Direction(x) & CompassScale(y) & Point(z)) -> GivenOn(x,y,z))", "all x.(Direction(x) -> GivenOnScale(x,16))", "(DirectionGivenOnScale(x,16))", "all x.(Direction(x) -> (GivenOnCompassScale(x,16)))", "all x y.((Direction(x) & CompassScale(y,x)) -> GivenOn(x,y))", "all x.(Direction(x) -> CompassScale(x,16))", "all x.(Direction(x) -> (CompassScale(x,16) & GivesDirection(x,16)))", "all x y.((Direction(x) & CompassScale(y,16)) -> Given(x,y))", "all x.(Direction(x) -> (CommassScale(x,16)))", "all x y.((Direction(x) & CompassScales(y,x)) -> GivesOn(x,y))", "All x.(Direction(x) -> 16PointCompassScale(x))"]}
{"id": "eqasc_validation_1513", "nl": "A compass can determine 16 different points.", "fol": "", "prediction": ["all x.(Compass(x) -> DeterminesSixDifferentPoints(x))", "all x.(Compass(x) -> DeterminesSixDifferentPoints(x))", "all x.(Compass(x) -> CanDetermineSixDifferentPoints(x))", "all x y.((Compass(x) & Point(y)) -> Determines(x,y))", "all x y.((Compass(x) & Point(y)) -> Determines(x,y,16))", "all x.(Compass(x) -> DeterminesSixPoints(x))", "all x.(Compass(x) -> DeterminesSixDifferentPoints(x))", "all x.(Compass(x) -> CanDetermineSixDifferentPoints(x))", "all x y.((Compass(x) & Point(y)) -> Determines(x,y))", "all x y.(Compass(x) -> DeterminesSixDifferentPoints(x,y))", "exists x.(Compass(x) & DeterminesPoints(x,16))", "all x.(Compass(x) -> DeterminesSixPoints(x))", "All x.(Compass(x) -> DeterminesDifferentPoints(x,16))", "exists x.(Compass(x) & DeterminesPoints(x,16))", "All x.(Compass(x) -> CanDetermine16Points(x))", "exists x.(Compass(x) & DecidesPoint(x,16))"]}
{"id": "eqasc_validation_1514", "nl": "Navigation is done by compass only.", "fol": "", "prediction": ["all x.(Navigation(x) -> (Compass(x) & -Compass(x)))", "all x.(Navigate(x) -> (Compass(x) & -Compass(x)))", "(Navigation(n) & Compass(n))", "all x y.((Navigation(x) & Compass(y)) -> DoneBy(x,y))", "all x.(Navigation(x) -> (Compass(x) & -Compass(x)))", "all x y.((Compass(x) & Navigation(y)) -> DoneBy(x,y))", "all x.(Navigation(x) -> CompassOnly(x))", "(all x.(Navigation(x) -> Compass(x)))", "all x.(Navigate(x) -> (Compass(x) & -Compass(x) & -Compass(x)))", "all x y.((Navigate(x) & Compass(y)) -> DoneBy(x,y))", "(Navigation(n) & Compass(n))", "all x.(Navigation(x) -> (Compass(x) | Compass(x)))", "(All x.(Navigation(x) -> Compass(x)))", "all x y.((Compass(x) & Navigation(y)) -> DoneBy(x,y))", "all x.(Navigation(x) -> CompassOnly(x))", "All x.(Navigate(x) -> CompassOnly(x))"]}
{"id": "eqasc_validation_1515", "nl": "navigation is used for determining direction", "fol": "", "prediction": ["all x y.((Navigation(x) & Direction(y)) -> Determines(x,y))", "all x.(Navigation(x) -> DeterminesDirection(x))", "all x y z.((Navigation(x) & Direction(y) & Direction(z)) -> Determines(x,y,z))", "(DifferentDirection(navigation) -> DeterminesDirection(navigation))", "all x y.((Navigation(x) & Direction(y)) -> DeterminesDirection(x,y))", "all x.(Navigation(x) -> DeterminesDirection(x))", "(DirectionDetermination(navigation) -> DeterminesDirection(navigation))", "all x.(Navigation(x) -> (DeterminesDirection(x) & DeterminesDirection(x)))", "all x y z.((Navigation(x) & Direction(y) & Direction(z)) -> Determines(x,y,z))", "all x y.((Navigation(x) & Direction(y)) -> DeterminesDirection(x,y))", "all x y.((Navigation(x) & Direction(y) & DeterminesDirection(x,y)) -> Uses(x,y))", "all x.(Navigation(x) -> DeterminesDirection(x))", "all x y z.((Navigation(x) & Direction(y) & Direction(z)) -> DeterminedFor(x,y,z))", "all x.(Navigation(x) -> (DeterminesDirection(x) & DeterminesDirection(x)))", "all x.(Navigation(x) -> DeterminesDirection(x))", "all x.(Navigation(x) -> DeterminesDirection(x,Direction))"]}
{"id": "eqasc_validation_1516", "nl": "satellite technology is used for predicting the weather", "fol": "", "prediction": ["all x y.((SatelliteTechnology(x) & Weather(y)) -> Predicts(x,y))", "all x.(SatelliteTechnology(x) -> PredictsWeather(x))", "all x y z.((SatelliteTechnology(x) & Weather(y) & Weather(z)) -> Predicts(x,y,z))", "(SatelliteTechnology(Satellite) & PredictsWeather(Satellite))", "(all x.(SatelliteTechnology(x) -> PredictsWeather(x)))", "all x y.((SatelliteTechnology(x) & Weather(y)) -> Predicts(x,y))", "all x.(SatelliteTechnology(x) -> PredictsWeather(x))", "(all x y.((SatelliteTechnology(x) & Weather(y)) -> Predicts(x,y)))", "all x.((SatelliteTechnology(x) & Weather(y)) -> Predicts(x,y))", "all x.(SatelliteTechnologie(x) -> PredictsWeather(x))", "all x y z.((SatelliteTechnology(x) & Weather(y) & Weather(z)) -> Predicts(x,y,z))", "all x y.((SatelliteTechnology(x) & Weather(y)) -> Predicts(x,y))", "all x.(SatelliteTechnology(x) -> PredictsWeather(x))", "all x y.((SatelliteTechnology(x) & Weather(y)) -> UsedForPredicting(x,y))", "all x y z.((SatelliteTechnology(x) & Weather(y) & Weather(z)) -> Predicts(x,y,z))", "all x.(SatelliteTechnologie(x) -> PredictsWeather(x))"]}
{"id": "eqasc_validation_1517", "nl": "Meteorologists use satellite technology", "fol": "", "prediction": ["all x y.((Meteorologist(x) & SatelliteTechnology(y)) -> Uses(x,y))", "all x y z.((Meteorologist(x) & SatelliteTechnology(y) & SatelliteTechnology(z)) -> Uses(x,y,z))", "all x.(Meteorologist(x) -> UsesSatelliteTechnology(x))", "(all x.(Meteorologist(x) -> UsesSatelliteTechnology(x)))", "all x y.((Meteorologist(x) & SatelliteTechnology(y)) -> Uses(x,y))", "(all x y.((Meteorologist(x) & SatelliteTechnology(y)) -> Uses(x,y)))", "all x.(Meteorologist(x) -> UsesSatelliteTechnology(x))", "all x y z.((Meteorologist(x) & SatelliteTechnology(y) & SatelliteTechnology(z)) -> Uses(x,y,z))", "all x y.((Meteorologist(x) & SatelliteTechnology(y)) -> Uses(x,y))", "all x.(Meteorologist(x) -> (UsesSatelliteTechnology(x) & UsesSatelliteTechnology(x)))", "all x y z.((Meteorologist(x) & Satellite(y) & SatelliteTechnology(z)) -> Uses(x,y,z))", "all x.(Meteorologist(x) -> UsesSatelliteTechnology(x))", "all x y z.((Meteorologist(x) & SatelliteTechnology(y) & Meteorologist(z)) -> Uses(x,y))", "all x.(Meteorologist(x) -> UsesSatelliteTechnologie(x))", "all x y.((Meteorologist(x) & SatelliteTechnology(y)) -> Uses(x,y))", "all x.(Meteorologist(x) -> UsesSatelliteTechnologie(x))"]}
{"id": "eqasc_validation_1518", "nl": "Meteorologists use satellite technology.", "fol": "", "prediction": ["all x.(Meteorologist(x) -> UsesSatelliteTechnology(x))", "all x y.((Meteorologist(x) & SatelliteTechnology(y)) -> Uses(x,y))", "(UsesSatelliteTechnology(meteorologist) & UsesSatelliteTechnology(meteorologist))", "(all x.(Meteorologist(x) -> UsesSatelliteTechnology(x)))", "all x.(Meteorologist(x) -> UsesSatelliteTechnology(x))", "all x y.((Meteorologist(x) & SatelliteTechnology(y)) -> Uses(x,y))", "all x y z.((Meteorologist(x) & Satellite(y) & SatelliteTechnology(z)) -> Uses(x,y,z))", "all x.(Meteorologist(x) -> UsesSatelliteTechnology(x))", "all x y.((Meteorologist(x) & SatelliteTechnology(y)) -> Uses(x,y))", "all x.(Meteorologist(x) -> UsesSatelliteTechnology(x))", "all x y.((Meteorologist(x) & SatelliteTechnology(y)) -> Uses(x,y))", "all x.(Meteorologist(x) -> UsesSatelliteTechnology(x))", "all x y.((Meteorologist(x) & SatelliteTechnology(y)) -> Uses(x,y))", "all x.(Meteorologist(x) -> UsesSatelliteTechnique(x))", "all x.(Meteorologist(x) -> UseSatelliteTechnology(x))", "all x.(Meteorologist(x) -> UsesSatelliteTechnologie(x))"]}
{"id": "eqasc_validation_1519", "nl": "Satellite technology can be used by meteologists.", "fol": "", "prediction": ["all x.(SatelliteTechnology(x) -> UsedByMeteologists(x))", "all x y.((SatelliteTechnology(x) & Meteologist(y)) -> CanUse(x,y))", "(all x.(SatelliteTechnology(x) -> UsedByMeteologists(x)))", "all x y.((SatelliteTechnology(x) & Meteologist(y)) -> CanUse(x,y))", "all x y z.((SatelliteTechnology(x) & Meteologist(y) & Meteorologist(z)) -> CanUse(x,y,z))", "all x.(SatelliteTechnology(x) -> UsedByMeteologists(x))", "all x y z.((SatelliteTechnology(x) & Meteologist(y) & Meteorologist(z)) -> CanUse(x,y,z))", "all x.(SatelliteTechnologie(x) -> UsedByMeteologists(x))", "all x y.((SatelliteTechnology(x) & Meteologist(y)) -> CanUse(x,y))", "all x.(SatelliteTechnology(x) -> UsedByMeteologists(x))", "all x y.((SatelliteTechnology(x) & Meteologist(y)) -> CanUse(x,y))", "exists x.(SatelliteTechnologie(x) & Meteologist(x))", "exists x.(SatelliteTechnology(x) & Meteologist(x) & Uses(x,SatelliteTechnology))", "all x.(SatelliteTechnology(x) -> UsedByMeteologists(x))", "all x y.((SatelliteTechnology(x) & Meteologist(y)) -> UsedBy(x,y))", "exists x.(SatelliteTechnologie(x) & Meteologist(x))"]}
{"id": "eqasc_validation_1520", "nl": "meteorologists use satellite technology", "fol": "", "prediction": ["all x y.((Meteorologist(x) & SatelliteTechnology(y)) -> Uses(x,y))", "all x y z.((Meteorologist(x) & SatelliteTechnology(y) & SatelliteTechnology(z)) -> Uses(x,y,z))", "all x.(Meteorologist(x) -> UsesSatelliteTechnology(x))", "(all x.(Meteorologist(x) -> UsesSatelliteTechnology(x)))", "all x y.((Meteorologist(x) & SatelliteTechnology(y)) -> Uses(x,y))", "(all x y.((Meteorologist(x) & SatelliteTechnology(y)) -> Uses(x,y)))", "all x.(Meteorologist(x) -> UsesSatelliteTechnology(x))", "all x y z.((Meteorologist(x) & SatelliteTechnology(y) & SatelliteTechnology(z)) -> Uses(x,y,z))", "all x.(Meteorologist(x) & SatelliteTechnology(x)) -> Uses(x,Meteorologists,SatelliteTechnology))", "all x y.((Meteorologist(x) & SatelliteTechnology(y)) -> Uses(x,y))", "all x y.((Meteorologist(x) & SatelliteTechnology(y) & Uses(x,y)) -> MeteorologistUses(x,y))", "all x.(Meteorologist(x) -> UsesSatelliteTechnology(x))", "all x y z.((Meteorologist(x) & SatelliteTechnology(y) & SatelliteTechnology(z)) -> Uses(x,y,z))", "all x.(Meteorologist(x) -> UsesSatelliteTechnologie(x))", "all x y z.((Meteorologist(x) & SatelliteTechnology(y) & SatelliteTechnology(z)) -> Uses(x,y))", "all x.(Meteorologist(x) -> UsesSatelliteTechnologie(x))"]}
{"id": "eqasc_validation_1521", "nl": "Rain or Shine, there is always weather.", "fol": "", "prediction": ["all x.((Rain(x) | Shine(x)) -> Weather(x))", "(exists x.(Weather(x) & (Rain(x) | Shine(x))))", "Whether it's Rain or Shine, there is always Weather.", "all x.((Rain(x) | Shine(x)) -> Weather(x))", "((Rain(Rain) | Shine(Rain))) -> Weather(Rain))", "(exists x.(Weather(x) & (Rain(x) | Shine(x))))", "all x.(Weather(x) -> (Rain(x) | Shine(x)))", "((Rain(r) | Shine(r))) -> Weather(r))", "-(Rain(Rain) | Shine(Rain)) & Weather(Winter))", "all x.((Rain(x) | Shine(x)) -> Weather(x))", "all x.(Weather(x) -> (Rain(x) | Shine(x)))", "(exists x.(Weather(x) & (Rain(x) | Shine(x))))", "exists x.(Weather(x) & (Rain(x) | Shine(x)))", "(exists x.(Weather(x) & (Rain(x) | Shine(x))))", "exists x.(Weather(x) & (Rain(x) | Shine(x)) & Weather(x))", "all x.((Rain(x) | Shine(x)) -> Weather(x))"]}
{"id": "eqasc_validation_1522", "nl": "satellite technology is used for predicting rain or shine", "fol": "", "prediction": ["all x.(SatelliteTechnology(x) -> (PredictsRainOrShine(x) & PredictsRainOrShine(x)))", "all x y.((SatelliteTechnology(x) & (Rain(y) | Shine(y))) -> Predicts(x,y))", "all x y z.((SatelliteTechnology(x) & (Rain(y) | Shine(y))) -> Predicts(x,y,z))", "(all x.(SatelliteTechnology(x) -> (PredictsRain(x) | PredictsShine(x))))", "(PredictsRainOrShine(satelliteTechnology) -> UsedForPredictingRainOrShine(satelliteTechnology))", "all x.(SatelliteTechnologie(x) -> (PredictsRainOrShine(x) & PredictsRainOrShine(x)))", "all x y z.((SatelliteTechnology(x) & RainOrShine(y) & SatelliteTechnology(z)) -> Predicts(x,y,z))", "all x.(SatelliteTechnology(x) -> (PredictsRainOrShine(x) & PredictsRainOrShine(x)))", "all x y.((SatelliteTechnology(x) & (Rain(y) | Shine(y))) -> Predicts(x,y))", "all x y.((SatelliteTechnology(x) & PredictsRainOrShine(x,y)) -> UsedForPredictingRainOrShine(x,y))", "(all x.(SatelliteTechnology(x) -> PredictsRainOrShine(x)))", "all x.(SatelliteTechnologie(x) -> (PredictsRain(x) | PredictsShine(x)))", "all x.(SatelliteTechnology(x) -> (PredictsRainOrShine(x) & PredictsRainOrShine(x)))", "all x.(SatelliteTechnology(x) -> (PredictsRainOrShine(x) & UsesSatelliteTechnology(x) & PredictsRainOrShine(x)))", "all x y.((SatelliteTechnology(x) & (Rain(y) | Shine(y))) -> Predicts(x,y))", "all x.(SatelliteTechnology(x) -> PredictsRainOrShine(x))"]}
{"id": "eqasc_validation_1523", "nl": "Weather is what it's like outside each day.", "fol": "", "prediction": ["all x.(Weather(x) -> OutsideDay(x))", "all x y.((Weather(x) & Day(y)) -> LikeOutside(x,y))", "all x.(Weather(x) -> OutsideEachDay(x))", "(Outside(weather) & Day(weather))", "(ExternalWeather(weather) & Day(weather))", "(OutdoorWeather(weather) & Day(weather))", "all x y.((Weather(x) & Day(y)) -> Outside(x,y))", "all x.(Weather(x) -> Outside(x))", "(Outside(weather) & Day(weather))", "all x.(Weather(x) -> LikeOutside(x))", "all x y.((Weather(x) & Day(y)) -> LikeOutside(x,y))", "exists x.(Wetter(x) & Outside(x) & Day(x))", "all x.(Weather(x) -> OutsideDay(x))", "all x y.((Weather(x) & Day(y)) -> Outside(x,y))", "all x.(Weather(x) -> OutsideDay(x))", "all x.(Weather(x) -> LikeOutsideEveryDay(x))"]}
{"id": "eqasc_validation_1524", "nl": "satellite technology is used for predicting what it's like outside each day", "fol": "", "prediction": ["all x y.((SatelliteTechnology(x) & OutsideDay(y)) -> Predicts(x,y))", "all x.(SatelliteTechnology(x) -> PredictsOutsideDay(x))", "all x y z.((SatelliteTechnology(x) & OutsideDay(y) & OutsideDay(z)) -> Predicts(x,y,z))", "all x.(SatelliteTechnology(x) -> (PredictsOutsideDay(x) & PredictsOutsideDay(x)))", "(SatelliteTechnology(Satellite) & PredictsOutsideEveryDay(Satellite))", "all x y.((SatelliteTechnology(x) & OutsideDay(y)) -> PredictsWhatIsOutside(x,y))", "all x.(SatelliteTechnologie(x) -> PredictsOutsideDay(x))", "(SatelliteTechnologie(Satellite) & PredictsOutsideDay(Satellite))", "all x y z.((SatelliteTechnology(x) & OutsideDay(y) & OutsideDay(z)) -> Predicts(x,y,z))", "(SatelliteTechnology(satellite) & PredictsOutsideDay(s,s,s))", "all x y.((SatelliteTechnology(x) & OutsideDay(y)) -> PredictsOutsideDay(x,y))", "all x.(SatelliteTechnologie(x) -> (PredictsOutsideEachDay(x) & UsesSatelliteTechnology(x)))", "all x.(SatelliteTechnology(x) -> (PredictsOutsideEachDay(x) & PredictsOutsideEachDay(x)))", "all x y.((SatelliteTechnology(x) & Day(y)) -> PredictsOutside(x,y))", "all x.(SatelliteTechnology(x) -> PredictsOutsideDay(x))", "all x y z.((SatelliteTechnology(x) & OutsideDay(y) & OutsideDay(z)) -> Predicts(x,y,z))"]}
{"id": "eqasc_validation_1525", "nl": "Today, technology has helped meteorologists to detect tornadoes.", "fol": "", "prediction": ["all x y.((Technology(x) & Meteorologist(y)) -> HelpsDetectTornadoes(x,y))", "all x.((Technology(x) & Meteorologist(x)) -> HelpsDetectTornadoes(x))", "all x y z.((Technology(x) & Meteorologist(y) & Tornado(z)) -> HelpsDetect(x,y,z))", "all x.((Meteorologist(x) & Technology(x)) -> HelpsDetectTornadoes(x))", "all x y.((Technology(x) & Meteorologist(y)) -> HelpsDetectTornadoes(x,y))", "all x.((Technology(x) & Meteorologist(y)) -> HelpsDetectTornadoes(x,y))", "all x.(Technology(x) -> HelpsDetectTornadoes(x))", "all x y.((Meteorologist(x) & Tornado(y)) -> HelpsDetect(x,y))", "all x y.((Technology(x) & Meteorologist(y)) -> HelpedDetectTornadoes(x,y))", "all x y z.((Technology(x) & Meteorologist(y) & Tornado(z)) -> HelpsDetect(x,y,z))", "(all x.((Meteorologist(x) & Tornado(y)) -> HelpedDetect(x,y)))", "(all x.(Technology(x) -> HelpsDetectTornadoes(x)))", "all x.((Technology(x) & Meteorologist(x)) -> DetectsTornadoes(x))", "all x.(Technology(x) -> HelpsDetectTornadoes(x))", "(all x.(Technology(x) -> HelpsDetectTornadoes(x)))", "all x y.((Technology(x) & Meteorologist(y)) -> HelpedDetectTornadoes(x,y))"]}
{"id": "eqasc_validation_1526", "nl": "Meteorologists use satellites to detect tornadoes", "fol": "", "prediction": ["all x y z.((Meteorologist(x) & Satellite(y) & Tornado(z)) -> UsesToDetect(x,y,z))", "all x y.((Meteorologist(x) & Satellite(y)) -> UsesToDetectTornadoes(x,y))", "all x.(Meteorologist(x) -> UsesSatellitesToDetectTornadoes(x))", "(all x y z.((Meteorologist(x) & Satellite(y) & Tornado(z)) -> Uses(x,y)))", "all x y z.((Meteorologist(x) & Satellite(y) & Tornado(z)) -> UsesToDetect(x,y,z))", "all x y.((Meteorologist(x) & Satellite(y)) -> UsesToDetectTornadoes(x,y))", "all x y z w.((Meteorologist(x) & Satellite(y) & Tornado(z) & Satellite(w) & Uses(x,y)) -> Detects(x,z))", "all x.(Meteorologist(x) -> (UsesSatellites(x) & DetectsTornadoes(x)))", "all x.(Meteorologist(x) -> UsesSatellitesToDetectTornadoes(x))", "all x y z.((Meteorologist(x) & Satellite(y) & Tornado(z)) -> UsesToDetect(x,y,z))", "all x y z.((Meteorologist(x) & Satellite(y) & Tornado(z) & Uses(x,y)) -> Detects(x,z))", "all x y.((Meteorologist(x) & Satellite(y)) -> UsesToDetectTornadoes(x,y))", "all x y z.((Meteorologist(x) & Satellite(y) & Tornado(z) & Uses(x,y)) -> Detection(x,z))", "all x.(Meteorologist(x) -> UsesSatellitesToDetectTornadoes(x))", "all x.(Meteorologist(x) & UseSatellitesToDetectTornadoes(x))", "all x y.((Meteorologist(x) & Satellite(y)) -> UsesToDetectTornadoes(x,y))"]}
{"id": "eqasc_validation_1527", "nl": "a barometer is used to measure air pressure", "fol": "", "prediction": ["all x y.((Barometer(x) & AirPressure(y)) -> Measures(x,y))", "all x y z.((Barometer(x) & AirPressure(y) & AirPressure(z)) -> Measures(x,y,z))", "all x.(Barometer(x) -> MeasuresAirPressure(x))", "all x y.((Barometer(x) & AirPressure(y)) -> Measures(x,y))", "all x.(Barometer(x) -> MeasuresAirPressure(x))", "all x y z.((Barometer(x) & AirPressure(y) & AirPressure(z)) -> Measures(x,y,z))", "all x y z.((Barometer(x) & AirPressure(y) & AirPressure(z) & Measures(x,y,z)) -> UsedToMeasure(x,y,z))", "all x y.((Barometer(x) & AirPressure(y)) -> Measures(x,y))", "all x.(Barometer(x) -> MeasuresAirPressure(x))", "all x y.(Barometer(x) & AirPressure(y) & Measures(x,y))", "all x.(Barometer(x) -> UsedToMeasureAirPressure(x))", "all x.(Barometer(x) -> MeasuresAirPressure(x))", "exists x.(Barometer(x) & MeasuresAirPressure(x) & MeasuresAirPressure(x) & MeasuresAirPressure(x))", "all x y.((Barometer(x) & AirPressure(y)) -> Measures(x,y))", "exists x.(Barometer(x) & UsedToMeasureAirPressure(x))", "all x.(Barometer(x) -> MeasuresAirPressure(x))"]}
{"id": "eqasc_validation_1528", "nl": "Air pressure Pressure is the force acting on a unit area.", "fol": "", "prediction": ["all x.(AirPressurePressure(x) -> ActsOnUnitArea(x))", "all x y.((AirPressure(x) & UnitArea(y)) -> ForceAgingOn(x,y))", "all x.(AirPressurePressure(x) -> ActsOnUnitArea(x))", "all x y.((AirPressure(x) & UnitArea(y)) -> ForceAgingOn(x,y))", "all x y z.((AirPressurePressure(x) & UnitArea(y) & Force(z)) -> ActsOn(x,y,z))", "all x y.((AirPressurePressure(x) & UnitArea(y)) -> ActsOn(x,y))", "(AirPressurePressure(Air Pressure) -> ActsOnUnitArea(AirPressure))", "all x.(AirPressurePressure(x) -> AgingOnUnitArea(x))", "all x y.((AirPressure(x) & UnitArea(y)) -> ActsOn(x,y))", "all x.(AirPressure(x) -> ActsOnUnitArea(x))", "all x.(AirPressurePressure(x) -> ActsOnUnitArea(x))", "All x.(AirPressurePressure(x) -> ActsOnUnitArea(x))", "all x y.((AirPressure(x) & UnitArea(y)) -> ForceAgingOn(x,y))", "all x.(AirPressurePressure(x) -> AgingOnUnitArea(x))", "All x.(AirPressure(x) -> ActsOnUnitArea(x))", "All x.(AirPressurePressure(x) -> ActsOnUnitArea(x))"]}
{"id": "eqasc_validation_1529", "nl": "A barometer is used to measure the force acting on a unit area.", "fol": "", "prediction": ["all x y.((Barometer(x) & UnitArea(y)) -> MeasuresForce(x,y))", "all x.(Barometer(x) -> MeasuresForce(x))", "all x y z.((Barometer(x) & UnitArea(y) & Force(z)) -> Measures(x,y,z))", "all x y.((Barometer(x) & UnitArea(y)) -> MeasuresForce(x,y))", "all x.(Barometer(x) -> MeasuresForceOnUnitArea(x))", "all x y z.((Barometer(x) & UnitArea(y) & Force(z)) -> MeasuresOn(x,y,z))", "all x y.((Barometer(x) & UnitArea(y)) -> MeasuresForceAction(x,y))", "all x.(Barometer(x) -> MeasuresForce(x))", "all x y z.((Barometer(x) & UnitArea(y) & Force(z)) -> Measures(x,z))", "all x.(Barometer(x) -> MeasuresForceOnUnitArea(x))", "all x.(Barometer(x) -> MeasuresForceActionOnUnitArea(x))", "all x y.(Barometer(x) -> MeasuresForceOnUnitArea(x,y))", "all x y.((Barometer(x) & UnitArea(y)) -> MeasuresForce(x,y))", "all x y.((Barometer(x) & UnitArea(y)) -> MeasuresForceAction(x,y))", "exists x.(Barometer(x) & MeasuresForce(x) & UnitArea(x))", "all x.(Barometer(x) -> MeasuresForce(x))"]}
{"id": "eqasc_validation_1530", "nl": "Air pressure is a measure of the weight of the air.", "fol": "", "prediction": ["all x.(AirPressure(x) -> MeasuresWeightOfAir(x))", "all x y.((AirPressure(x) & Air(y)) -> MeasuresWeight(x,y))", "(MeasuresAirPressure(air) & Weight(air))", "all x.(AirPressure(x) -> MeasuresWeightOfAir(x))", "all x y.((AirPressure(x) & Air(y)) -> MeasuresWeight(x,y))", "all x y z.((AirPressure(x) & Air(y) & Weight(z)) -> Measures(x,y,z))", "all x.(AirPressure(x) -> MeasuresWeightOfAir(x))", "all x.(AirPressure(x) -> MeasuresAirWeight(x))", "all x y.((AirPressure(x) & Air(y)) -> MeasuresWeight(x,y))", "all x.(AirPressure(x) -> MeasuresWeightOfAir(x))", "all x.(AirPressure(x) -> MeasuresWeightOfAir(x))", "all x y.((AirPressure(x) & Air(y)) -> MeasuresWeight(x,y))", "all x.(AirPressure(x) -> MeasuresAirWeight(x))", "all x.(AirPressure(x) -> MeasuresAirWeight(x))", "all x y.((AirPressure(x) & Air(y)) -> MeasuresWeight(x,y))", "all x.(AirPressure(x) -> WeightOfAir(x))"]}
{"id": "eqasc_validation_1531", "nl": "A barometer measures the weight of the air.", "fol": "", "prediction": ["all x.(Barometer(x) -> MeasuresWeightOfAir(x))", "all x y.((Barometer(x) & Air(y)) -> MeasuresWeight(x,y))", "all x.(Barometer(x) -> MeasuresAirWeight(x))", "all x y z.((Barometer(x) & Air(y) & Weight(z)) -> Measures(x,y,z))", "all x.(Barometer(x) -> MeasuresWeightOfAir(x))", "all x y.(Barometer(x) -> MeasuresWeightOfAir(x,y))", "all x y.((Barometer(x) & Air(y)) -> MeasuresWeight(x,y))", "all x.(Barometer(x) -> MeasuresAirWaight(x))", "all x y.(Barometer(x) -> MeasuresAirWeight(x,y))", "all x.(Barometer(x) -> MeasuresWeightOfAir(x))", "all x.(Barometer(x) -> MeasuresWeightOfAir(x))", "all x y.(Barometer(x) -> MeasuresAirWaight(x,y))", "all x.(Barometer(x) -> MeasuresAirWeight(x))", "all x.(Barometer(x) -> MeasuresWathOfAir(x))", "exists x.(Barometer(x) & MeasuresWeightOfAir(x))", "exists x.(Barometer(x) & MeasuresWeight(x))"]}
{"id": "eqasc_validation_1532", "nl": "Atmospheric pressure is measured by a barometer.", "fol": "", "prediction": ["all x.(AtmosphericPressure(x) -> MeasuredByBarometer(x))", "all x y.((Barometer(x) & AtmosphericPressure(y)) -> MeasuredBy(x,y))", "all x.(AtmosphericPressure(x) -> MeasuredByBarometer(x))", "(MeasuresAtmosphericPressure(AtmosphericPressure) & Barometer(Barometer))", "all x y.((AtmosphericPressure(x) & Barometer(y)) -> MeasuredBy(x,y))", "all x y z.((AtmosphericPressure(x) & Barometer(y) & Barometer(z)) -> MeasuredBy(x,y,z))", "all x y.((Barometer(x) & AtmosphericPressure(y)) -> MeasuredBy(x,y))", "all x.((AtmosphericPressure(x) & Barometer(x)) -> MeasuredBy(x,y))", "all x.(AtmosphericPressure(x) -> MeasuredByBarometer(x))", "all x y z.((AtmosphericPressure(x) & Barometer(y) & Barometer(z)) -> MeasuredBy(x,y,z))", "all x.((Barometer(x) & AtmosphericPressure(x)) -> MeasuredBy(x,y))", "all x y.((Barometer(x) & AtmosphericPressure(y)) -> MeasuredBy(x,y))", "all x y.((AtmosphericPressure(x) & Barometer(y)) -> MeasuredBy(x,y))", "all x.(AtmosphericPressure(x) -> MeasuredByBarometer(x))", "all x.(AtmosphericPressure(x) -> MeasuredByBarometer(x))", "all x.(AtmosphericPressure(x) -> MeasuredByBarometer(x))"]}
{"id": "eqasc_validation_1533", "nl": "a barometer gauges atmospheric pressure", "fol": "", "prediction": ["all x.(Barometer(x) -> GaugesAtmosphericPressure(x))", "all x y z.((Barometer(x) & AtmosphericPressure(y) & AtmosphericPressure(z)) -> Gauges(x,y,z))", "all x y.((Barometer(x) & AtmosphericPressure(y)) -> Gauges(x,y))", "all x.(Barometer(x) -> GaugesAtmosphericPressure(x))", "all x y.(Barometer(x) & AtmosphericPressure(y) & Gauges(x,y))", "all x.(Barometer(x) -> (GaugesAtmosphericPressure(x) & MeasuresAtmosphericPressure(x)))", "all x y z.((Barometer(x) & AtmosphericPressure(y) & AtmosphericPressure(z)) -> Gauges(x,y,z))", "all x y.((Barometer(x) & AtmosphericPressure(y)) -> Gauges(x,y))", "all x.(Barometer(x) -> GaugesAtmosphericPressure(x))", "all x y.(Barometer(x) & AtmosphericPressure(y) & Gauges(x,y))", "all x y z.((Barometer(x) & AtmosphericPressure(y) & AtmosphericPressure(z)) -> Gauges(x,y,z))", "all x.(Barometer(x) -> (GasesAtmosphericPressure(x) & GaugesAtmosphericPressure(x)))", "all x.(Barometer(x) -> GaugesAtmosphericPressure(x))", "all x.(Barometer(x) -> GaugesAtmosphericPressure(x))", "all x.(Barometer(x) -> MeasuresAtmosphericPressure(x))", "all x.(Barometer(x) -> GaugesAtmosphericPressure(x))"]}
{"id": "eqasc_validation_1534", "nl": "The weight of the air can be determined with a barometer.", "fol": "", "prediction": ["all x.((Air(x) & Barometer(x)) -> DeterminesWeight(x))", "all x y.((Air(x) & Barometer(y)) -> DeterminesWeight(x,y))", "all x.(Barometer(x) -> DeterminesAirWeight(x))", "all x.((AirWath(x) & Barometer(x)) -> DeterminesWeight(x))", "(Barometer(w) & DeterminesWeight(w))", "all x y.((Air(x) & Barometer(y)) -> DeterminesWeight(x,y))", "all x y z.((Air(x) & Barometer(y) & Weight(z)) -> DeterminedWith(x,y,z))", "all x.(AirWath(x) -> CanBeDeterminedWithBarometer(x))", "(WeightOfAir(air) & Barometer(air))", "(Barometer(w) & DeterminesWeight(w))", "all x y.((Air(x) & Barometer(y)) -> DeterminesWeight(x,y))", "all x y.((Air(x) & Barometer(y)) -> WeightDeterminedWith(x,y))", "all x.(Barometer(x) -> DeterminesAirWorth(x))", "all x.((AirWath(x) & Barometer(x)) -> DeterminedWith(x,w,x))", "all x.(Barometer(x) -> DeterminesWeightOfAir(x))", "all x y.((Air(x) & Barometer(y)) -> DeterminesWeightWith(x,y))"]}
{"id": "eqasc_validation_1535", "nl": "Air Pressure -A barometer measures the weight of the air.", "fol": "", "prediction": ["all x.(Barometer(x) -> MeasuresAirPressure(x))", "AirPressure(Barometer) -MeasuresWeightOfAir(Barometer)", "(MeasuresAirPressure(Barometer) & MeasuresAirPressure(Barometer))", "all x y.((Barometer(x) & Air(y)) -> MeasuresWeight(x,y))", "AirPressure-Barometer(x) -> MeasuresAirWeight(x))", "All x.(Barometer(x) -> MeasuresAirPressure(x))", "AirPressure(barometer) -> MeasuresAirWeight(barometer))", "AirPressure-BarometerMeasuresWeightOfAir(Barometer,Air)", "(MeasuresAirPressure(Barometer) & WeightOfAir(Barometer))", "AirPressure(barometer) -> MeasuresAirWeight(barometer,air,air))", "all x y.((Barometer(x) & Air(y)) -> MeasuresWeight(x,y))", "all x.(Barometer(x) -> MeasuresAirPressure(x))", "all x y.((Barometer(x) & AirPressure(y)) -> MeasuresWeight(x,y))", "All x.(Barometer(x) -> MeasuresAirPressure(x))", "All x.(Barometer(x) -> MeasuresAirPressureWorth(x))", "All x.(Barometer(x) -> MeasuresAirWeight(x))"]}
{"id": "eqasc_validation_1536", "nl": "a barometer is used to measure weight of the air", "fol": "", "prediction": ["all x y.((Barometer(x) & Air(y)) -> MeasuresWeight(x,y))", "all x y z.((Barometer(x) & Air(y) & Air(z)) -> MeasuresWeight(x,y,z))", "all x.(Barometer(x) -> MeasuresAirWeight(x))", "all x y.((Barometer(x) & Air(y)) -> MeasuresWeightOfAir(x,y))", "all x y z.((Barometer(x) & Air(y) & Air(z)) -> MeasuresWeightOfAir(x,y,z))", "(all x.(Barometer(x) -> MeasuresAirWeight(x)))", "all x.(Barometer(x) -> MeasuresAirWorth(x))", "all x.(Barometer(x) -> MeasuresWeightOfAir(x))", "all x y.((Barometer(x) & Air(y)) -> MeasuresWeight(x,y))", "all x y z.((Barometer(x) & Air(y) & Air(z)) -> MeasuresWeight(x,y,z))", "all x y z.((Barometer(x) & Air(y) & Air(z)) -> MeasuresWeightOfAir(x,y,z))", "all x y.((Barometer(x) & Air(y)) -> MeasuresWeightOfAir(x,y))", "all x.(Barometer(x) -> MeasuresAirWeight(x))", "exists x.(Barometer(x) & MeasuresWeightOfAir(x))", "all x.(Barometer(x) -> MeasuresWeightOfAir(x))", "all x.(Barometer(x) -> MeasuresAirWords(x))"]}
{"id": "eqasc_validation_1537", "nl": "Air pressure is the force of air against a unit of area.", "fol": "", "prediction": ["all x y.((AirPressure(x) & AirUnit(y)) -> ForceAgainst(x,y))", "all x.(AirPressure(x) -> ForceOfAirAgainstUnitOfArea(x))", "all x y.((AirPressure(x) & UnitOfArea(y)) -> ForceOfAirAgainst(x,y))", "all x y z.((AirPressure(x) & AirUnit(y) & Area(z)) -> ForceAgainst(x,y,z))", "all x y z.((AirPressure(x) & AirUnitOfArea(y) & UnitOfArea(z)) -> ForceAgainst(x,y,z))", "(AirPressure(air) & ForceAgainstUnitOfArea(air))", "all x.(AirPressure(x) -> ForceOfAirAgainstUnitOfArea(x))", "all x.(AirPressure(x) -> (ForceOfAir(x) & UnitOfArea(x)))", "all x.(AirPressure(x) -> (ForceOfAir(x) & UnitOfArea(x)))", "all x y.((AirPressure(x) & AirUnit(y)) -> ForceAgainst(x,y))", "all x y.((AirPressure(x) & UnitOfArea(y)) -> ForceOfAirAgainst(x,y))", "all x y z.((AirPressure(x) & AirUnit(y) & Area(z)) -> ForceAgainst(x,y,z))", "all x y.((AirPressure(x) & AirUnitOfArea(y)) -> ForceAgainst(x,y))", "all x.(AirPressure(x) -> ForceOfAirAgainstUnitOfArea(x))", "all x.(AirPressure(x) -> ForceOfAirAgainstUnitOfArea(x))", "all x.(AirPressure(x) -> (ForceOfAir(x) & UnitOfArea(x)))"]}
{"id": "eqasc_validation_1538", "nl": "A barometer measures the force of air against a unit of area", "fol": "", "prediction": ["all x y z.((Barometer(x) & Air(y) & Area(z)) -> MeasuresForceAgainstUnitOfArea(x,y,z))", "all x y.((Barometer(x) & UnitOfArea(y)) -> MeasuresAirForceAgainstUnitOfArea(x,y))", "all x y z.((Barometer(x) & AirForce(y) & AreaUnit(z)) -> MeasuresAgainst(x,y,z))", "all x.(Barometer(x) -> MeasuresAirForceAgainstUnitOfArea(x))", "all x y.((Barometer(x) & AirUnit(y)) -> MeasuresForceAgainstUnitOfArea(x,y))", "all x y z.((Barometer(x) & AirForce(y) & UnitOfArea(z)) -> MeasuresAgainst(x,y,z))", "all x.(Barometer(x) -> MeasuresAirForceAgainstUnitOfArea(x))", "all x y z.((Barometer(x) & Air(y) & UnitOfArea(z)) -> MeasuresForceAgainstUnitOfArea(x,y,z))", "all x y.((Barometer(x) & UnitOfArea(y)) -> MeasuresForceOfAirAgainst(x,y))", "all x y.(Barometer(x) -> MeasuresAirForceAgainstUnitOfArea(x,y))", "all x y z.((Barometer(x) & Airforce(y) & Area(z)) -> MeasuresAgainstUnitOfArea(x,y,z))", "all x y.(Barometer(x) & Air(y) & UnitOfArea(x,y) & MeasuresForceAgainst(x,y))", "all x.(Barometer(x) -> MeasuresAirForce(x))", "all x.(Barometer(x) -> MeasuresAirForceAgainstUnitOfArea(x))", "all x.(Barometer(x) -> MeasuresAirForceAgainstUnitOfArea(x))", "all x.(Barometer(x) -> MeasuresForceOfAir(x))"]}
{"id": "eqasc_validation_1539", "nl": "A barometer is used to measure the weight of the air.", "fol": "", "prediction": ["all x.(Barometer(x) -> MeasuresAirWeight(x))", "all x y.((Barometer(x) & Air(y)) -> MeasuresWeight(x,y))", "all x y z.((Barometer(x) & Air(y) & Weight(z)) -> Measures(x,y,z))", "all x.(Barometer(x) -> MeasuresAirWeight(x))", "all x y.((Barometer(x) & Air(y)) -> MeasuresWeight(x,y))", "all x.(Barometer(x) -> MeasuresAirWord(x))", "all x y z.((Barometer(x) & Air(y) & Weight(z)) -> Measures(x,y,z))", "all x.(Barometer(x) -> MeasuresWeightOfAir(x))", "all x y.(Barometer(x) -> MeasuresAirWeight(x,y))", "all x y.((Barometer(x) & Air(y)) -> MeasuresWeight(x,y))", "all x.(Barometer(x) -> MeasuresWeightOfAir(x))", "all x.(Barometer(x) -> MeasuresAirWeight(x))", "all x.(Barometer(x) -> MeasuresWeightOfAir(x))", "all x y.(Barometer(x) -> MeasuresAirWeight(y))", "exists x.(Barometer(x) & MeasuresWeightOfAir(x))", "exists x.(Barometer(x) & MeasuresWeightOfAir(x))"]}
{"id": "eqasc_validation_1540", "nl": "Uses Elemental mercury is used in thermometers, barometers, and pressure-sensing devices.", "fol": "", "prediction": ["all x.((Uses(x) & ElementalMercury(x)) -> (UsedInThermometers(x) | UsedInBarometers(x) | UsedInPressureSensingDevices(x)))", "all x.(ElementalMercury(x) -> (UsedInThermometers(x) | UsedInBarometers(x) | UsedInPressureSensingDevices(x)))", "all x y z.((Use(x) & ElementalMercury(x) & Thermometer(y) & Barometer(z) & PressureSensingDevice(x)) -> UsedIn(x,y,z))", "all x y.((Uses(x) & ElementalMercury(x)) -> (UsedInThermometers(x) & UsedInBarometers(x) & UsedInPressureSensingDevices(x)))", "UsesElementalMercury(e) -> (UsedInThermometers(e) | UsedInBarometers(e) | UsedInPressureSensingDevices(e)))", "Uses ElementalMercury(e) -> (UsedInThermometers(e) | UsedInBarometers(e) | UsedInPressureSensingDevices(e)))", "all x.((ElementalMercury(x) & Thermometer(x) & Barometer(x) & PressureSensingDevice(x)) -> UsedIn(x,y))", "(Uses(ElementaryMercury(Elementary) & (Thermometer(E) | Barometer(E) | PressureSensingDevice(E)))", "(UsesElementaryMercury(e) & (Thermometer(e) | Barometer(e) | PressureSensingDevice(e)))", "(Uses(ElementaryMercury(ElementaryMercury) & (Thermometer(E) | Barometer(E) | PressureSensingDevice(E)))", "all x.((Uses(x) & ElementalMercury(x)) -> (UsedInThermometers(x) | UsedInBarometers(x) | UsedInPressureSensingDevices(x)))", "all x y z.((ElementaryMercury(x) & Thermometer(y) & Barometer(z) & PressureSensingDevice(x)) -> UsedIn(x,y,z))", "all x y.((Uses(x) & ElementalMercury(x)) -> (UsedInThermometers(x) | UsedInBarometers(x) | UsedInPressureSensingDevices(x)))", "All x.(ElementaryMercury(x) -> (UsedInThermometers(x) | UsedInBarometers(x) | UsedInPressureSensingDevices(x)))", "UsesElementaryMercury(e) -> (UsedInThermometers(e) | UsedInBarometers(e) | UsedInPressureSensingDevices(e)))", "All x.(ElementalMercury(x) -> (UsedInThermometers(x) | UsedInBarometers(x) | UsedInPressureSensingDevices(x)))"]}
{"id": "eqasc_validation_1541", "nl": "Elemental mercury helps measure air pressure", "fol": "", "prediction": ["all x.(ElementaryMercury(x) -> MeasuresAirPressure(x))", "all x y.((ElementalMercury(x) & AirPressure(y)) -> Measures(x,y))", "all x y z.((ElementalMercury(x) & AirPressure(y) & AirPressure(z)) -> Measures(x,y,z))", "all x.((ElementalMercury(x) & MeasuresAirPressure(x)) -> ElementalMercuryHelpsMeasureAirPressure(x))", "all x.(ElementalMercury(x) -> MeasuresAirPressure(x))", "all x y.((ElementalMercury(x) & AirPressure(y)) -> MeasuresAirPressure(x,y))", "all x.(ElementalMercuryHelpsMeasureAirPressure(x) -> MeasuresAirPressure(x))", "all x y z.((ElementaryMercury(x) & AirPressure(y) & AirPressure(z)) -> Measures(x,y,z))", "all x.(ElementaryMercury(x) -> MeasuresAirPressure(x))", "all x.((ElementaryMercury(x) & MeasuresAirPressure(x)) -> HelpsMeasureAirPressure(x))", "all x.(ElementaryMercuryHelpsMeasureAirPressure(x) -> MeasuresAirPressure(x))", "all x y.((ElementaryMercury(x) & AirPressure(y)) -> Measures(x,y))", "all x.((ElementalMercury(x) & MeasuresAirPressure(x)) -> ElementalMercuryHelpsMeasureAirPressure(x))", "all x y.((ElementalMercury(x) & AirPressure(y)) -> MeasuresAirPressure(x,y))", "all x y.((ElementalMercury(x) & AirPressure(y)) -> MeasuresAirPressure(x,y))", "All x.(ElementalMercury(x) -> MeasuresAirPressure(x))"]}
{"id": "eqasc_validation_1542", "nl": "safety goggles are used for protecting the eyes during experiments", "fol": "", "prediction": ["all x y.((SafetyGoggles(x) & Experiment(y)) -> ProtectsEyes(x,y))", "all x.(SafetyGoggles(x) -> (ProtectsEyes(x) & DuringExperiments(x)))", "all x y z.((SafetyGoggles(x) & Eyes(y) & Experiment(z)) -> ProtectsDuring(x,y,z))", "all x y.((SafetyGoggles(x) & Eyes(y)) -> ProtectsDuringExperiment(x,y))", "all x.(SafetyGloes(x) -> (ProtectsEyes(x) & DuringExperiments(x)))", "all x y.((SecurityGoggles(x) & Experiment(y)) -> ProtectsEyesDuring(x,y))", "all x.(SecurityGoggles(x) -> (ProtectsEyes(x) & DuringExperiments(x)))", "all x.(SafetyGoggles(x) -> (ProtectsEyes(x) & DuringExperiments(x)))", "(all x.(SafetyGloes(x) -> ProtectsEyesDuringExperiments(x)))", "all x.(SafetyGoggles(x) -> (ProtectsEyesDuringExperiments(x) & DuringExperiments(x)))", "all x y z.((SafetyGloe(x) & Eyes(y) & Experiment(z)) -> ProtectsDuring(x,y,z))", "all x.(SecurityGoggles(x) -> (ProtectsEyesDuringExperiments(x) & DuringExperiments(x)))", "all x y z.((SafetyGoggles(x) & Eyes(y) & Experiment(z)) -> ProtectsDuring(x,y,z))", "all x.(SafetyGloes(x) -> (ProtectsEyes(x) & DuringExperiments(x) & DuringExperiments(x)))", "all x y.((SafetyGloes(x) & Experiment(y)) -> ProtectsEyes(x,y))", "all x y.((SecurityGoggles(x) & Experiment(y)) -> ProtectsEyes(x,y))"]}
{"id": "eqasc_validation_1543", "nl": "If the product is an eye irritant, wear goggles.", "fol": "", "prediction": ["all x.((Product(x) & EyeIrritating(x)) -> WearGoggles(x))", "-(EyeIrritating(Product) & WearsGggles(Product))", "((Product(x) & EyeIrritating(x)) -> WearGoggles(x))", "all x.((Product(x) & EyeIrritating(x)) -> WearGoggles(x))", "all x y.((Product(x) & EyeIrritating(x)) -> WearGoggles(y))", "-(EyeIrritating(Product) & WearsGlasses(Product))", "all x.((Product(x) & EyeIrrigant(x)) -> WearGlasses(x))", "(EyeIrritatingProduct(x) -> WearGoggles(x))", "all x.(IrritatingEye(x) -> WearsGggles(x))", "all x.(EyeIrritating(x) -> WearGoggles(x))", "all x.((Product(x) & EyeIrritating(x)) -> WearGoggles(x))", "all x.(IrritatingEyes(x) -> WearGoggles(x))", "all x.((Product(x) & EyeIrrigant(x)) -> WearGooples(x))", "all x.((Product(x) & EyeIrritating(x)) -> WearsGoggles(x))", "all x.((Product(x) & EyeIrrigant(x)) -> WearGoggles(x))", "all x.((Product(x) & EyeIrritating(x)) -> WearGlasses(x))"]}
{"id": "eqasc_validation_1544", "nl": "goggles can protect against irritants", "fol": "", "prediction": ["all x.(Goggles(x) -> ProtectsAgainstIrritatings(x))", "all x y.((Goggles(x) & Irritating(y)) -> ProtectsAgainst(x,y))", "all x y z.((Goggles(x) & Irritating(y) & Irritating(z)) -> ProtectsAgainst(x,y,z))", "all x.(Goggles(x) -> (ProtectsAgainstIrritatings(x) & Irritatings(x)))", "all x.(Goggles(x) -> ProtectAgainstIrritatings(x))", "all x.(Glasses(x) -> ProtectsAgainstIrritatings(x))", "all x y.((Goggles(x) & Irritating(y)) -> ProtectsAgainst(x,y))", "all x y.((Glasses(x) & Irritating(y)) -> ProtectsAgainst(x,y))", "all x y.((Goggles(x) & Irritatant(y)) -> CanProtectAgainst(x,y))", "all x y z.((Goggles(x) & Irritating(y) & Irritating(z)) -> CanProtectAgainst(x,y,z))", "all x.(Goggles(x) -> (ProtectsAgainstIrritatings(x) & Irritatings(x)))", "all x.(Goopes(x) -> ProtectsAgainstIrritatings(x))", "all x y z.((Goggles(x) & Irritating(y) & Irritating(z)) -> ProtectsAgainst(x,y,z))", "all x.(Goggles(x) -> ProtectsAgainstIrrigants(x))", "all x y.((Goggle(x) & Irritating(y)) -> ProtectsAgainst(x,y))", "all x.(Gaggles(x) -> ProtectsAgainstIrrigants(x))"]}
{"id": "eqasc_validation_1545", "nl": "Inside the eye, at the back, is the retina.", "fol": "", "prediction": ["all x.((Eye(x) & Eye(x) & Eye(x) & Eye(x) & Eye(x) & Eye(x) & Eye(x) & Eye(x)) -> Retina(x))", "(InsideEye(x) & AtBack(x) -> Retina(x))", "inside the eye, at the back, is the retina.", "all x.((Eye(x) & AtBack(x)) -> Retina(x))", "all x y.((Eye(x) & Eye(y) & AtBack(x,y)) -> Retina(x))", "Located inside the eye, at the back, is the retina.", "all x y.((Eye(x) & Eye(y) & Inside(x,y) & AtBack(x)) -> Retina(x))", "All x y z.((Eye(x) & Eye(y) & Eye(z) & Inside(x,y) & AtBack(y,z)) -> Retina(x))", "all x.((Eye(x) & Eye(x) & Eye(x) & Eye(x)) -> Retina(x))", "(InsideEye(x) & AtBack(x) -> Retina(x))", "inside the eye, at the back, is the retina.", "all x.((InsideEye(x) & AtBack(x)) -> Retina(x))", "Located inside the eye, at the back, is the retina.", "all x.((Eye(x) & AtBack(x)) -> Retina(x))", "(InsideEye(x) & AtBack(x) -> Retina(x))", "all x y.((Eye(x) & Eye(y) & Back(y)) -> Retina(x,y))"]}
{"id": "eqasc_validation_1546", "nl": "safety goggles are used for protecting the retina during experiments", "fol": "", "prediction": ["all x y.((SafetyGoggles(x) & Experiment(y)) -> ProtectsRetina(x,y))", "all x.(SafetyGoggles(x) -> (ProtectsRetina(x) & DuringExperiments(x)))", "all x y z.((SafetyGoggles(x) & Retina(y) & Experiment(z)) -> ProtectsRetinal(x,y,z))", "all x.(SafetyGloes(x) -> (ProtectsRetina(x) & DuringExperiments(x)))", "all x.(SecurityGoggles(x) -> (ProtectsRetina(x) & DuringExperiments(x) & DuringExperiments(x)))", "all x y.((SafetyGoggles(x) & Experiment(y)) -> ProtectsRetina(x,y))", "all x.(SafetyGoggles(x) -> (ProtectsRetina(x) & DuringExperiments(x)))", "all x y.((SafetyGloe(x) & Experiment(y)) -> ProtectsRetina(x,y))", "all x y z.((SafetyGoggles(x) & Experiment(y) & Retina(z)) -> ProtectsRetinal(x,y,z))", "all x y z.((SafetyGloe(x) & Retina(y) & Experiment(z)) -> ProtectsRetinal(x,y,z))", "(all x.(SafetyGloes(x) -> ProtectsRetinal(x)))", "all x y.((SafetyGoggles(x) & Experiment(y)) -> (ProtectsRetina(x,y) & DuringExperiment(x,y)))", "all x.(SecurityGoggles(x) -> (ProtectsRetina(x) & DuringExperiments(x) & DuringExperiments(x)))", "all x y.((SecurityGoggles(x) & Experiment(y)) -> ProtectsRetina(x,y))", "all x.(SafetyGloes(x) -> (ProtectsRetina(x) & DuringExperiments(x)))", "all x.(SafetyGoggles(x) -> (ProtectsRetina(x) & DuringExperiments(x)))"]}
{"id": "eqasc_validation_1547", "nl": "Firm plastic eyeglasses or goggles are better.", "fol": "", "prediction": ["all x.((Flexible(x) & (Early(x) | Goggles(x))) -> Better(x))", "all x.((Fiber(x) & (Early(x) | Goggles(x))) -> Better(x))", "all x.((Flexible(x) & (Eyeglasses(x) | Goggles(x))) -> Better(x))", "all x y.((Flexible(x) & (Earglasses(y) | Goggles(y))) -> Better(x,y))", "all x.((Fiber(x) & (Eyeglasses(x) | Goggles(x))) -> Better(x))", "(Better(FlexiblePlasticEarglasses) | Better(FlexibleGoggles))", "all x y.((Flexible(x) & (Eyeglasses(y) | Goggles(y))) -> Better(x,y))", "all x.((FernPlasticEarglasses(x) | FirmPlasticGoggles(x)) -> Better(x))", "(Better(FernPlasticEarglasses) | Better(FernPlasticGoggles))", "all x.(FiberPlasticEarlyglassesOrGoggles(x) -> Better(x))", "all x.((FiberPolymerEyeglasses(x) | FirmPolymerGoggles(x)) -> Better(x))", "(Better(FiberPlasticEarlyglasses) & Better(FiberPlasticGoggles))", "all x.(Flexible(x) -> (Early(x) | Goggles(x)))", "all x y.((Fiber(x) & (Earglasses(y) | Goggles(y))) -> Better(x,y))", "exists x.(Flexible(x) & (Early(x) | Goggles(x)))", "exists x.(FiberPolymerEyeglasses(x) | FirmPolymerGoggles(x))"]}
{"id": "eqasc_validation_1548", "nl": "plastic protects the eyes during experiements", "fol": "", "prediction": ["all x y.((Plastic(x) & Experiment(y)) -> ProtectsEyes(x,y))", "all x.((Plastic(x) & Experiment(x)) -> ProtectsEyes(x))", "all x y z.((Plastic(x) & Eyes(y) & Experiment(z)) -> Protects(x,y,z))", "all x y.((Plastic(x) & Experiment(y)) -> ProtectsEyes(x,y))", "all x y.((Plastic(x) & Eyes(y) & Experiement(z)) -> Protects(x,y,z))", "all x y z.((Plastic(x) & Eyes(y) & Experiement(z) & Protects(x,y,z)) -> Protects(x,y,z))", "all x.((Plastic(x) & Experiement(x)) -> ProtectsEyes(x))", "all x y.((Plastic(x) & Experiement(y) & ProtectsEyes(x,y)) -> ProtectsEyes(x,y))", "all x y z.((Plastic(x) & Eyes(y) & Experiment(z) & Protects(x,y)) -> Protects(x,y,z))", "all x.((Plastic(x) & Experiment(x)) -> ProtectsEyes(x))", "all x.(Plastic(x) -> ProtectsEyesDuringExperiements(x))", "all x.((Plastic(x) & Eyes(y) & Experiement(z)) -> Protects(x,y,z))", "(all x.(Experiment(x) -> ProtectsEyes(x)))", "all x.((Plastic(x) & Experiement(y)) -> ProtectsEyes(x,y))", "all x y.((Plastic(x) & Eyes(y)) -> ProtectsDuringExperiements(x,y))", "all x.((Plastic(x) & Experiment(x)) -> ProtectsEyesDuring(x,Eyes))"]}
{"id": "eqasc_validation_1549", "nl": "For concentrated acids and alkalis, a face shield is needed in addition to goggles.", "fol": "", "prediction": ["all x.((ConcentratedAcids(x) & ConcentratedAlkalis(x)) -> NeededInAdditionToGggles(x))", "all x y.((ConcentratedAcids(x) & ConcentratedAlkalis(y)) -> NeededInAdditionToGggles(x,y))", "all x.((ConcentratedAcids(x) & ConcentratedAlkalis(x)) -> FaceShield(x))", "all x.((ConcentratedAcids(x) & ConcentratedAlkalis(x)) -> NeededInAdditionToGggles(x))", "all x.((ConcentratedAcids(x) & Alkalis(x)) -> FaceShield(x))", "(ConcentratedAcidsAndAlkalis) -> NeededInAdditionToGggles(FaceShield))", "all x.(ConcentratedAcidsAndAlkalis(x) -> NeededFaceShield(x))", "all x y.((ConcentratedAcids(x) & Alkalis(y)) -> (FaceShield(x) & Goggles(x)))", "all x.((CentricAcids(x) | ConcentratedAlkalis(x)) -> NeededFaceShield(x))", "all x y.((ConcentratedAcids(x) & ConcentratedAlkalis(y)) -> (FaceShield(x) & Goggles(x)))", "all x y.((ConcentratedAcids(x) & ConcentratedAlkalis(y)) -> NeededInAdditionToGlasses(x,y))", "(all x.((ConcentratedAcids(x) & -ConcentratedAlkalis(x)) -> FaceShield(x))", "(all x.((ConcentratedAcids(x) | ConcentratedAlkalis(x))) -> NeedsFaceShelled(x))", "exists x.(ConcentratedAcidsAndAlkalis(x) & FaceShield(x) & InAdditionToGoggles(x))", "all x y.((CentricAcids(x) & ConcentratedAlkalis(y)) -> NeedsFaceShield(x,y))", "all x.((ConcentratedAcids(x) & ConcentratedAlkalis(x)) -> NeededInAdditionToGoggles(x))"]}
{"id": "eqasc_validation_1550", "nl": "acids can harm the eyes during experiments", "fol": "", "prediction": ["all x y.((Acid(x) & Experiment(y)) -> CanHarmEyes(x,y))", "all x.((Acid(x) & Experiment(x)) -> HarmsEyes(x))", "all x y z.((Acid(x) & Experiment(y) & Eye(z)) -> Harms(x,y,z))", "all x.(Acids(x) -> HarmsEyesDuringExperiments(x))", "all x.((Acids(x) & Experiment(x)) -> HarmsEyes(x))", "all x y.((Acid(x) & Experiment(y)) -> HarmsEyes(x,y))", "all x y z.((Acid(x) & Eyes(y) & Experiment(z) & CanHarm(x,y,z)) -> CanHarm(x,y,z))", "all x.(AcidsHazardEyes(x) -> (Experiment(x) & HarmEyes(x)))", "all x.(Acids(x) -> (HarmsEyes(x) & DuringExperiments(x)))", "(all x.(Acid(x) -> HarmsEyesDuringExperiments(x)))", "all x y.((Acid(x) & Experiment(y)) -> CanHarmEyes(x,y))", "all x y.((Acid(x) & Experiment(y) & CanHarmEyes(x,y)) -> CanHarmEyes(x,y))", "all x.(AcidsCanHarmEyes(x) -> (Experiment(x) & DuringExperiment(x)))", "all x.((Acids(x) & Experiment(x)) -> HarmsEyes(x))", "all x y.((Acid(x) & Experiment(y)) -> (HarmsEyes(x,y) & DuringExperiment(x,y)))", "(all x.(Acid(x) -> HarmsEyesDuringExperiments(x)))"]}
{"id": "eqasc_validation_1551", "nl": "Lab experiments are group projects.", "fol": "", "prediction": ["all x.(LabExperiment(x) -> GroupProject(x))", "(GroupProjects(LabExperiment) & -GroupProject(LabExperiment))", "all x y.((LabExperiment(x) & GroupProject(y)) -> GroupProject(x))", "all x.(LabExperiment(x) -> GroupProject(x))", "all x.(LabExperiment(x) -> GroupProject(x))", "all x y.((LabExperiment(x) & GroupProject(y)) -> GroupProject(x))", "(GroupProjects(LabExperiment)", "all x y.((LabExperiment(x) & GroupProject(y)) -> GroupProject(x,y))", "all x.(LabExperiment(x) -> GroupProject(x))", "(GroupProjects(LabExperiment)", "all x.(LabExperiment(x) -> GroupProject(x))", "(GroupProjects(LabExperiment)", "all x.(LabExperiment(x) -> GroupProject(x))", "all x.(LabExperiment(x) -> GroupProject(x))", "all x.(LabExperiment(x) -> GroupProject(x))", "all x.(LabExperiment(x) -> GroupProject(x))"]}
{"id": "eqasc_validation_1552", "nl": "Safety goggles are used to protect the eyes in the lab.", "fol": "", "prediction": ["all x.(SafetyGoggles(x) -> ProtectsEyesInLab(x))", "all x y.((SafetyGoggles(x) & Lab(y)) -> ProtectsEyes(x,y))", "all x y.((SafetyGloe(x) & Lab(y)) -> ProtectsEyes(x,y))", "all x y z.((SafetyGoggles(x) & Lab(y) & Eye(z)) -> Protects(x,y,z))", "all x.(SafetyGloes(x) -> ProtectsEyesInLab(x))", "all x.(SafetyGoggles(x) -> ProtectsEyesInLab(x))", "all x y.((SafetyGoggles(x) & Lab(y)) -> ProtectsEyes(x,y))", "(all x.(SafetyGear(x) -> UsedToProtectEyesInLab(x)))", "all x y z.((SafetyGear(x) & Lab(y) & Eye(z)) -> Protects(x,y,z))", "all x.(SecurityGoggles(x) -> ProtectsEyesInLab(x))", "all x y.((SafetyGear(x) & Lab(y)) -> ProtectsEyes(x,y))", "all x.(SafetyGear(x) -> ProtectsEyesInLab(x))", "all x.(SafetyGoggles(x) -> ProtectsEyesInLab(x))", "all x.(SafetyGoggles(x) -> (ProtectsEyes(x) & InLab(x)))", "all x y.((SecurityGoggles(x) & Lab(y)) -> ProtectsEyes(x,y))", "all x.(SecurityGoggles(x) -> ProtectsEyesInLab(x))"]}
{"id": "eqasc_validation_1553", "nl": "Goggles or safety glasses with sideshields are recommended.", "fol": "", "prediction": ["all x.((Goggles(x) | SafetyGlasses(x) & Sideshields(x)) -> Recommended(x))", "all x.((Goggles(x) | SafetyGlassesWithSideshields(x)) -> Recommended(x))", "(Recommended(Goggles) | Recommended(SafetyGlasses(SafetyGlasses) & HasSideshields(SafetyGlasses)))", "all x y.((Goggles(x) | SafetyGlasses(x) & Sideshields(x)) -> Recommended(x))", "all x.((Glasses(x) | SafetyGlasses(x)) -> HasSideshields(x))", "(Recommended(Goggles) | Recommendations(SafetyGlasses(SafetyGlasses) & HasSideshields(SafetyGlasses)))", "all x.((Goggles(x) | SafetyGlasses(x) & Sideshields(x)) -> Recommended(x))", "all x.((Gaggles(x) | SafetyGlassesWithSideshields(x)) -> Recommended(x))", "(Recommended(Goggles) | Recommended(SafetyGlasses(SafetyGlasses) & HasSideshields(SafetyGlasses)))", "all x y.((Goggles(x) | SafetyGlasses(x) & Sideshields(x)) -> Recommended(x))", "all x.(Recommended(x) -> (Goggles(x) | SafetyGlassesWithSideshields(x)))", "all x.((Goggles(x) | SafetyGlassesWithSideshields(x)) -> Recommended(x))", "all x y.((Goggles(x) | SafetyGlasses(x,y) & Sideshields(y)) -> Recommended(x))", "(all x.((Goggles(x) | SafetyGlasses(x)) & HasSideshields(x)) -> Recommended(x))", "(Recommended(Goggles) | Recommended(SafetyGlasses(SafetyGlassesWithSideshields)))", "all x.((Goggles(x) | SafetyGlassesWithSideshields(x)) -> Recommended(x))"]}
{"id": "eqasc_validation_1554", "nl": "glasses with sideshields are recommended for protecting the eyes during experiments", "fol": "", "prediction": ["all x.((Glasses(x) & HasSideshields(x)) -> RecommendedForProtectingEyes(x))", "all x y.((Glasses(x) & Sideshields(x)) -> RecommendedForProtectingEyes(x,y))", "all x.((Glasses(x) & Sideshields(x)) -> RecommendedForProtectingEyes(x))", "all x y z.((Glasses(x) & Sideshields(y) & Eyes(z) & Experiment(z)) -> RecommendedForProtecting(x,y,z))", "all x.((GlassesWithSideshields(x) & RecommendedForExperiments(x)) -> ProtectsEyes(x))", "(all x.((Glasses(x) & Sideshields(x)) -> RecommendedForExperiments(x)) & ProtectsEyes(x))", "all x.((Glasses(x) & HasSideshields(x)) -> RecommendedForProtectingEyesDuringExperiments(x))", "all x y z.((Glasses(x) & Sideshields(y) & Experiment(z) & RecommendsForProtectingEyes(x,y,z)) -> RecommendedForProtectingEyes(x,z))", "all x y.((Glasses(x) & Sideshields(x)) -> RecommendedForProtectingEyes(x,y))", "all x y.((Glasses(x) & Sideshields(y)) -> RecommendedForProtectingEyesDuringExperiments(x,y))", "(all x.((Glasses(x) & HasSideshields(x)) -> RecommendedForExperiments(x)) & ProtectsEyes(x))", "all x y.((Glasses(x) & Sideshields(x)) -> (RecommendedForProtectingEyes(x,y) & DuringExperiments(y)))", "all x.((Glasses(x) & Sideshields(x)) -> RecommendedForProtectingEyes(x))", "all x.((GlassesWithSideshields(x) & RecommendedForExperiments(x)) -> ProtectsEyes(x))", "(all x.((Glasses(x) & Sideshields(x)) -> RecommendedForExperiments(x)) & ProtectsEyes(x))", "all x.((Glasses(x) & HasSideshields(x)) -> RecommendedForProtectingEyes(x))"]}
{"id": "eqasc_validation_1555", "nl": "Safety goggles are mandatory in the laboratory.", "fol": "", "prediction": ["all x.(SafetyGoggles(x) -> MandatoryInLaboratory(x))", "all x y.((SafetyGoggles(x) & Laboratory(y)) -> Mandatory(x,y))", "all x.(SafetyGear(x) -> MandatoryInLaboratory(x))", "all x y.((SafetyGear(x) & Laboratory(y)) -> Mandatory(x,y))", "all x.((SafetyGoggles(x) & Laboratory(x)) -> Mandatory(x))", "all x.(SafetyGloes(x) -> MandatoryInLaboratory(x))", "all x.(SafetyGoggles(x) -> MandatoryInLaboratory(x))", "all x y.((SecurityGoggles(x) & Laboratory(y)) -> Mandatory(x,y))", "all x y z.((SafetyGoggles(x) & Laboratory(y) & Laboratory(z)) -> Mandatory(x,y,z))", "all x.(SecurityGloes(x) -> MandatoryInLaboratory(x))", "all x y.((SafetyGoggles(x) & Laboratory(y)) -> Mandatory(x,y))", "(all x.(SafetyGear(x) -> MandatoryInLaboratory(x)))", "all x.((SafetyGoggles(x) & Laboratory(x)) -> Mandatory(x))", "all x y.((SafetyGear(x) & Laboratory(y)) -> Mandatory(x,y))", "all x.(SafetyGoggles(x) -> MandatoryInLaboratory(x))", "exists x.(SafetyGlobe(x) & RequiredInLaboratory(x))"]}
{"id": "eqasc_validation_1556", "nl": "Experiments are performed in the laboratory.", "fol": "", "prediction": ["all x.(Experiment(x) -> PerformedInLaboratory(x))", "all x y.((Experiment(x) & Laboratory(y)) -> PerformedIn(x,y))", "all x.(Experiment(x) -> PerformedInLaboratory(x))", "(PerformedInLaboratory(experiment) -> PerformedInLaboratory(experiment))", "all x y.((Experiment(x) & Laboratory(y)) -> PerformedIn(x,y))", "all x y z.((Experiment(x) & Laboratory(y) & Laboratory(z)) -> PerformedIn(x,y,z))", "(all x.(Experiment(x) -> PerformedInLaboratory(x)))", "all x.(Experiment(x) -> PerformedInLaboratory(x))", "all x y.((Experiment(x) & Laboratory(y)) -> PerformedIn(x,y))", "all x y z.((Experiment(x) & Laboratory(y) & Laboratory(z)) -> PerformedIn(x,y,z))", "all x.(Experiment(x) -> PerformedInLaboratory(x))", "all x y.((Experiment(x) & Laboratory(y)) -> PerformedIn(x,y))", "all x.(Experiment(x) -> PerformedInLaboratory(x))", "all x y.((Experiment(x) & Laboratory(y)) -> PerformedIn(x,y))", "all x.(Experiment(x) -> PerformsInLaboratory(x))", "all x.(Experiment(x) -> PerformedInLaboratory(x))"]}
{"id": "eqasc_validation_1557", "nl": "Home Protective Equipment Eyes Safety Goggles are recommended.", "fol": "", "prediction": ["all x.(HomeProtectiveEquipment(x) -> EyesSafetyGoggles(x))", "(Recommended(HomeProtectiveEquipment) & EyesSafetyGoggles(Eyes))", "all x.((HomeProtectiveEquipment(x) & EyesSafetyGears(x)) -> Recommended(x))", "all x y.((HomeProtectiveEquipment(x) & EyesSafetyGears(y)) -> Recommended(x,y))", "all x.(HomeProtectiveEquipment(x) -> RecommendedEyesSafetyGoggles(x))", "(Recommended(HomeProtectiveEquipment) & EyesSafetyGears(Eyes))", "all x y.((HomeProtectiveEquipment(x) & EyesSafetyGoggles(y)) -> Recommended(x,y))", "all x.(HomeProtectiveEquipment(x) -> EyesSafetyGears(x))", "all x.((HomeProtectiveEquipment(x) & EyesSafetyGears(x)) -> Recommended(x))", "All x.(HomeProtectiveEquipment(x) -> EyesSafetyGoggles(x))", "all x y.((HomeProtectiveEquipment(x) & EyesSafetyGears(y)) -> Recommended(x,y))", "All x.((HomeProtectiveEquipment(x) & EyesSafetyGears(x)) -> Recommended(x))", "All x.(HomeProtectiveEquipment(x) -> RecommendedEyesSafetyGoggles(x))", "all x y.((HomeProtectiveEquipment(x) & EyesSafetyGoggles(y)) -> Recommended(x))", "All x.(HomeProtectiveEquipment(x) -> EyesSafetyGearsRecommended(x))", "All x.(HomeProtectiveEquipment(x) -> RecommendedEyes(x))"]}
{"id": "eqasc_validation_1558", "nl": "Protective equipment is used for protecting the eyes during experiements", "fol": "", "prediction": ["all x y.((ProtectiveEquipment(x) & Experiment(y)) -> ProtectsEyes(x,y))", "all x y z.((ProtectiveEquipment(x) & Eyes(y) & Experiment(z)) -> ProtectsDuring(x,y,z))", "all x.(ProtectiveEquipment(x) -> ProtectsEyes(x))", "all x y.((ProtectiveEquipment(x) & Eyes(y) & Experiement(z)) -> ProtectsDuring(x,y,z))", "all x.(ProtectiveEquipment(x) -> (ProtectsEyes(x) & DuringExperiements(x)))", "(ProtectiveEquipment(x) & ProtectsEyesDuringExperiements(x))", "all x y z.((ProtectiveEquipment(x) & Eyes(y) & Experiement(z)) -> Protects(x,y,z))", "all x.(ProtectiveEquipment(x) -> ProtectsEyesDuringExperiements(x))", "all x y.((ProtectiveEquipment(x) & Experiment(y)) -> ProtectsEyes(x,y))", "all x y.((ProtectiveEquipment(x) & Eye(y) & Experiment(z)) -> ProtectsDuring(x,y,z))", "all x y.((ProtectiveEquipment(x) & Experiement(y) & ProtectsEyes(x,y)) -> UsedForProtectingEyes(x,y))", "all x.(ProtectiveEquipment(x) -> (ProtectsEyes(x) & DuringExperiments(x)))", "all x y z.((ProtectiveEquipment(x) & Eyes(y) & Experiment(z)) -> ProtectsDuring(x,y,z))", "all x.(ProtectiveEquipment(x) -> (ProtectsEyesDuringExperiements(x) & ProtectsEyesDuringExperiments(x)))", "all x.(ProtectiveEquipment(x) -> (ProtectsEyes(x) & DuringExperiements(x)))", "all x.(ProtectiveEquipment(x) -> ProtectsEyesDuringExperiments(x))"]}
{"id": "eqasc_validation_1559", "nl": "Protection is simple, safe, and inexpensive.", "fol": "", "prediction": ["all x.(Protection(x) -> (Simple(x) & Safe(x) & Inexpensive(x)))", "(SimpleProtection(Protection) & Safe(Protection) & Cheap(Protection))", "all x.(Protect(x) -> (Simple(x) & Safe(x) & Inexpensive(x)))", "all x.(Protection(x) -> (Simple(x) & Safe(x) & Inexpensive(x)))", "all x.((Protection(x) & Simple(x) & Safe(x) & Inexpensive(x)) -> Simple(x))", "all x y.((Protection(x) & Simple(y)) -> Safe(x) & Inexpensive(x))", "(Protection(Protect) -> (Simple(Protect) & Safe(Protect) & Inexpensive(Protect)))", "all x.(Protection(x) -> (Simple(x) & Safe(x) & Cheap(x)))", "all x.(Protect(x) -> (Simple(x) & Safe(x) & Inexpensive(x)))", "exists x.(Protect(x) & Simple(x) & Safe(x) & Inexpensive(x))", "all x.(Protection(x) -> (Simple(x) & Safe(x) & Inexpensive(x)))", "all x y.((Protection(x) & Simple(y) & Safe(y) & Affordable(y)) -> Simple(x))", "All x y.((Protection(x) & Simple(y)) -> Safe(y) & Inexpensive(x,y))", "all x.(Protection(x) -> (Simple(x) & Safe(x) & EasilyInsuficient(x)))", "exists x.(Protection(x) & Simple(x) & Safe(x) & Inexpensive(x))", "all x.(Protection(x) -> (Simple(x) & Safe(x) & Cheap(x)))"]}
{"id": "eqasc_validation_1560", "nl": "Safety goggles are used to keep the eyes safe during experiments.", "fol": "", "prediction": ["all x.(SafetyGoggles(x) -> KeepsEyesSafe(x))", "all x y.((SafetyGoggles(x) & Experiment(y)) -> KeepsEyesSafe(x,y))", "all x y.((SecurityGoggles(x) & Experiment(y)) -> KeepsEyesSafe(x,y))", "all x.(SafetyGloes(x) -> KeepsEyesSafe(x))", "all x.(SafetyGoggles(x) -> KeepsEyesSafe(x))", "all x y.((SafetyGloes(x) & Experiment(y)) -> KeepsEyesSafe(x,y))", "all x.(SecurityGoggles(x) -> KeepsEyesSafe(x))", "all x y z.((SafetyGoggles(x) & Eyes(y) & Experiment(z)) -> KeepsSafe(x,y,z))", "all x y z.((SecurityGoggles(x) & Eyes(y) & Experiment(z)) -> KeepsSafe(x,y,z))", "all x.(SafetyGoggles(x) -> (KeepsEyesSafe(x) & DuringExperiments(x)))", "all x y.((SecurityGoggles(x) & Experiment(y)) -> KeepsEyesSafe(x,y))", "all x.(SafetyGloes(x) -> KeepsEyesSafeDuringExperiments(x))", "all x y.((SafetyGoggles(x) & Experiment(y)) -> KeepsEyesSafe(x,y))", "all x.(SecurityGoggles(x) -> KeepsEyesSafe(x))", "all x.(SecurityGloes(x) -> KeepsEyesSafe(x))", "all x.(SafetyGoggles(x) -> UsedToKeepEyesSafeDuringExperiments(x))"]}
{"id": "eqasc_validation_1561", "nl": "Eyes Eyes Eyes are probably the most important symbolic sensory organ.", "fol": "", "prediction": ["all x.(Eyes(x) -> (Eyes(x) & ProbablyMostImportantSymbolicalOrgan(x)))", "(SymbolicalSensitiveOrgan(Eyes) & Eyes(Eyes))", "all x.(Eyes(x) -> (SymbolicalSensitiveOrgan(x) & Eyes(x)))", "all x y.((Eye(x) & Eye(y)) -> (SymbolicalSensitiveOrgan(x) & MostImportant(x,y)))", "all x.(Eyes(x) -> (SymbolicSensitiveOrgan(x) & Eyes(x)))", "(MostInstantSymbolicalSensitiveOrgan(Eyes) & Eyes(Eyes))", "all x.(Eye(x) -> (Eye(x) & SymbolicalOrgan(x)))", "(SymbolicalSensitiveOrgan(Eyes) & ProbablyMostImportant(Eyes))", "Eyes Eyes are probably the most importantSymbolicalSensitiveOrgan(x) & ProbablyTheMostImportant(x))", "((Eyes(Eyes) & Eyes(Eyes)) -> MostImportantSymbolicalOrgan(Eyes))", "all x y.((Eye(x) & Eye(y)) -> (SymbolicOrgan(x,y) & ProbablyMostImportant(x)))", "All x.((Eye(x) & Eyes(x)) -> (SymbolicSensitiveOrgan(x) & MostImportant(x)))", "all x.(Eyes(x) -> (SymbolicSensitiveOrgan(x) & MostImportant(x)))", "all x y.((Eye(x) & Eye(y)) -> (SymbolicalSensitiveOrgan(x,y) & MostImportant(x,y)))", "All x.(Eye(x) -> Eyes(x))", "All x.(Eyes(x) -> (SympatheticOrgan(x) & Eyes(x)))"]}
{"id": "eqasc_validation_1562", "nl": "Sensory organs can be protected by safety goggles during experiments", "fol": "", "prediction": ["all x y.((SensoryOrgan(x) & Experiment(y)) -> (ProtectsBySafetyGoggles(x,y) & DuringExperiment(x,y)))", "all x y z.((SensoryOrgan(x) & SafetyGoggles(y) & Experiment(z)) -> CanBeProtectedBy(x,y,z))", "all x.((SensoryOrgan(x) & Experiment(x)) -> CanBeProtectedBySafetyGoggles(x))", "all x y.((SensitiveOrgan(x) & Experiment(y)) -> CanBeProtectedBySafetyGoggles(x,y))", "all x y z.((SensoryOrgan(x) & SafetyGoggles(y) & Experiment(z)) -> ProtectedBy(x,y,z))", "all x.((SensoryOrgan(x) & Experiment(x)) -> CanBeProtectedBySafetyGoggles(x))", "all x.(SensoryOrgan(x) -> (ProtectsBySafetyGoggles(x) & DuringExperiments(x)))", "all x.((SensitiveOrgan(x) & SafetyGoggles(x)) -> CanBeProtectedBy(x,Experiments))", "(all x.((SensoryOrgan(x) & Experiment(x)) -> ProtectedBySafetyGoggles(x)))", "all x y z.((SensoryOrgan(x) & Experiment(y) & SafetyGoggles(z)) -> (Protects(x,y) & During(x,z)))", "all x y.((SensoryOrgan(x) & Experiment(y)) -> (ProtectsBySafetyGoggles(x,y) & During(x,y)))", "all x y z.((SensitiveOrgan(x) & SafetyGoggles(y) & Experiment(z) & ProtectedBy(x,y,z)) -> CanBeProtectedBy(x,y,z))", "all x.((SensoryOrgan(x) & Experiment(x)) -> (ProtectsBySafetyGoggles(x) & DuringExperiment(x)))", "all x.(SensitiveOrgan(x) -> (ProtectsBySafetyGoggles(x) & DuringExperiments(x)))", "all x.((SensitiveOrgan(x) & SafetyGoggles(x)) -> ProtectedBy(x,Experiments))", "all x y.((SensitiveOrgan(x) & Experiment(y)) -> CanBeProtectedBySafetyGears(x,y))"]}
{"id": "eqasc_validation_1563", "nl": "Protection for the eyes is mandatory in the laboratory.", "fol": "", "prediction": ["all x.((Laboratory(x) & ProtectsEyes(x)) -> Mandatory(x))", "all x y.((Laboratory(x) & Eyes(y)) -> ProtectionMajority(x,y))", "all x.((Laboratory(x) & ProtectionForEyes(x)) -> Mandatory(x))", "(ProtectionForEyes(x) & MandatoryInLaboratory(x))", "all x y.((Laboratory(x) & Eye(y)) -> ProtectionMajority(x,y))", "(MajorProtection(Eyes,Laboratory) & InLaboratory(Eyes,Laboratory))", "all x y.((Laboratory(x) & Laboratory(y) & Eyes(z)) -> ProtectionMajority(x,y,z))", "all x.(ProtectionForEyes(x) -> MandatoryInLaboratory(x))", "all x y z.((Laboratory(x) & Eyes(y) & Laboratory(z) & Protects(x,y)) -> Mandatory(x,z))", "all x.(Eyes(x) -> MandatoryInLaboratory(x))", "all x.((Laboratory(x) & ProtectsEyes(x)) -> Mandatory(x))", "all x.((Laboratory(x) & EyeProtection(x)) -> Mandatory(x))", "all x y.((Laboratory(x) & Eyes(y) & Mandatory(x,y)) -> Protects(x,y))", "all x y.((Laboratory(x) & Laboratory(y) & Eyes(y)) -> MandatoryProtection(x,y))", "all x.(EyesProtection(x) -> MandatoryInLaboratory(x))", "All x.(ProtectionForEyes(x) -> MandatoryInLaboratory(x))"]}
{"id": "eqasc_validation_1564", "nl": "Sometimes science experiments can be dangerous.", "fol": "", "prediction": ["exists x.(ScienceExperiment(x) & Dangerous(x))", "exists x.(ScientificExperiment(x) & Dangerous(x))", "exists x.(ScienceExperiment(x) & CanBeDangerous(x))", "exists x.(ScienceExperiment(x) & Dangerous(x))", "exists x.(ScienceExperiment(x) & CanBeDangerous(x))", "all x y.((ScientificExperiment(x) & Scientist(y)) -> Dangerous(x))", "exists x.(ScientificExperiment(x) & CanBeDangerous(x))", "all x y.((ScienceExperiment(x) & Scientist(y)) -> CanBeDangerous(x,y))", "exists x.(ScienceExperiment(x) & CanBeDangerous(x))", "exists x.(ScienceExperiment(x) & Dangerous(x))", "exists x.(ScientificExperiment(x) & Dangerous(x))", "all x y.((ScienceExperiment(x) & -Dangerous(y)) -> CanBe(x,y))", "exists x.(ScienceExperiment(x) & CanBeDangerous(x))", "exists x.(ScientificExperiment(x) & CanBeDangerous(x))", "exists x.(ScienceExperiment(x) & -Dangerous(x))", "exists x.(ScienceExperiment(x) & Dangerous(x))"]}
{"id": "eqasc_validation_1565", "nl": "safety goggles are used to protect the eyes from dangerous things", "fol": "", "prediction": ["all x y.((SafetyGoggles(x) & Eyes(y)) -> ProtectsFromDangerousThings(x,y))", "all x.(SafetyGoggles(x) -> ProtectsEyesFromDangerousThings(x))", "all x y z.((SafetyGoggles(x) & Eyes(y) & DangerousThing(z)) -> ProtectsFrom(x,y,z))", "all x y.((SafetyGloe(x) & Eyes(y)) -> ProtectsFromDangerousThings(x,y))", "all x.(SafetyGloes(x) -> ProtectsEyesFromDangerousThings(x))", "all x.(SafetyGloes(x) -> (ProtectsEyesFromDangerousThings(x) & UsesToProtectEyesFromDangerousThings(x)))", "all x y z.((SafetyGloe(x) & Eyes(y) & DangerousThing(z)) -> ProtectsFrom(x,y,z))", "all x.(SecurityGoggles(x) -> ProtectsEyesFromDangerousThings(x))", "all x.(SafetyGoggles(x) -> (ProtectsEyesFromDangerousThings(x) & UsesToProtectEyesFromDangerousThings(x)))", "all x.(SafetyGoggles(x) -> ProtectsEyesFromDangerousThings(x))", "all x y.((SafetyGoggles(x) & Eyes(y)) -> ProtectsFromDangerousThings(x,y))", "all x y.((SecurityGoggles(x) & Eyes(y)) -> ProtectsFromDangerousThings(x,y))", "all x y z.((SafetyGoggles(x) & Eyes(y) & DangerousThing(z)) -> ProtectsFrom(x,y,z))", "all x.(SecurityGloes(x) -> ProtectsEyesFromDangerousThings(x))", "all x y.((SafetyGloes(x) & Eyes(y)) -> ProtectsFromDangerousThings(x,y))", "all x.(SafetyGloes(x) -> ProtectsEyesFromDangerousThings(x))"]}
{"id": "eqasc_validation_1566", "nl": "Safety glasses and goggles protect the eyes.", "fol": "", "prediction": ["all x.((SafetyGlasses(x) & Goggles(x)) -> ProtectsEyes(x))", "all x y.((SafetyGlasses(x) & Goggles(y)) -> ProtectsEyes(x,y))", "all x.((SecurityGlasses(x) & Goggles(x)) -> ProtectsEyes(x))", "all x y.((SecurityGlasses(x) & Goggles(y)) -> ProtectsEyes(x,y))", "all x.(SafetyGlassesAndGoggles(x) -> ProtectsEyes(x))", "all x y z.((SafetyGlasses(x) & Goggles(y) & Eye(z)) -> Protects(x,y,z))", "all x.((SafetyGlasses(x) & Goggles(x)) -> ProtectsEyes(x))", "all x y.((SafetyGlasses(x) & Goggles(y)) -> ProtectsEyes(x,y))", "(ProtectsEyesWithSafetyGlassesAndGoggles(x))", "all x.((SecurityGlasses(x) & Goggles(x)) -> ProtectsEyes(x))", "all x y.((SecurityGlasses(x) & Goggles(y)) -> ProtectsEyes(x,y))", "(ProtectsEyes(safetyglasses) & ProtectsEyes(goggles))", "all x.(SafetyGlassesAndGoggles(x) -> ProtectsEyes(x))", "all x.((SafetyGlasses(x) & Goggles(x)) -> ProtectsEyes(x))", "all x y.((SafetyGlasses(x) & Goggles(y)) -> ProtectsEyes(x,y))", "all x.(SafetyGlasses(x) & ProtectsEyes(x))"]}
{"id": "eqasc_validation_1567", "nl": "safety glasses are used for protecting the eyes during experiments", "fol": "", "prediction": ["all x y.((SafetyGlasses(x) & Eyes(y)) -> ProtectsDuringExperiments(x,y))", "all x.(SafetyGlasses(x) -> (ProtectsEyes(x) & DuringExperiments(x)))", "all x y.((SecurityGlasses(x) & Eyes(y)) -> ProtectsDuringExperiments(x,y))", "all x y z.((SafetyGlasses(x) & Eyes(y) & Experiment(z)) -> ProtectsDuring(x,y,z))", "all x.((SecurityGlasses(x) & Eyes(y) & Experiment(z)) -> ProtectsDuring(x,y,z))", "all x y z.((SecurityGlasses(x) & Eyes(y) & Experiment(z)) -> ProtectsDuring(x,y,z))", "all x.(SecurityGlasses(x) -> (ProtectsEyes(x) & DuringExperiments(x)))", "all x y.((SafetyGlasses(x) & Eyes(y) & Experiment(z)) -> ProtectsDuring(x,y,z))", "all x.(SafetyGlasses(x) -> (ProtectsEyes(x) & DuringExperiments(x)))", "(all x.(SafetyGlass(x) -> ProtectsEyes(x)))", "all x.((SafetyGlasses(x) & Eyes(x) & Experiment(x)) -> ProtectsDuring(x,experiment))", "all x.(SafetyGlasses(x) -> (ProtectsEyesDuringExperiments(x) & DuringExperiments(x)))", "all x y.((SecurityGlasses(x) & Experiment(y)) -> ProtectsEyes(x,y))", "all x y z.((SafetyGlasses(x) & Eyes(y) & Experiment(z)) -> ProtectsDuring(x,y,z))", "all x y.((SafetyGlasses(x) & Experiment(y) & UsedForProtectingEyes(x,y)) -> ProtectsEyes(x,y))", "all x.(SecurityGlasses(x) -> (ProtectsEyes(x) & DuringExperiments(x)))"]}
{"id": "eqasc_validation_1568", "nl": "Larger pupil and larger corneas permit more light to enter the eye.", "fol": "", "prediction": ["all x.((LargerPupil(x) & LargerCorea(x)) -> PermitsMoreLight(x))", "all x y.((LargerPupil(x) & LargerCorea(y)) -> PermitsMoreLight(x,y))", "all x.(LargerPupil(x) & LargerCorea(x)) -> PermitsMoreLight(x))", "(LargerPupil(x) & LargerCorea(x))", "all x y z.((LargerPupil(x) & LargerCorea(y) & Cornea(z)) -> PermitsMoreLight(x,z))", "all x.((LargerPupil(x) & LargerCornea(x)) -> PermitsMoreLight(x))", "all x y.((LargerPupil(x) & LargerCorea(y)) -> PermitsMoreLight(x,y))", "all x y.((LargerPupil(x) & LargerCornea(y)) -> PermitsMoreLight(x,y))", "all x.(LargerPupil(x) & LargerCornea(x)) -> PermitsMoreLightToEnterEye(x))", "(LargerPupil(x) & LargerCornea(x))", "all x.(LargerPupil(x) & LargerCorea(x) -> PermitsMoreLightToEnterEye(x))", "all x.((LargerPupil(x) & LargerCornea(x)) -> PermitsMoreLightToEnter(x))", "all x y.((LargerPupill(x) & LargerCorea(y)) -> PermitsMoreLightToEnter(x,y))", "(LargerPupil(x) & LargerCorea(x))", "all x y.((LargerPupil(x) & LargerCornea(y)) -> PermitsMoreLightToEnter(x,y))", "all x.((LargerPupill(x) & LargerCorea(x)) -> PermitsMoreLight(x))"]}
{"id": "eqasc_validation_1569", "nl": "safety goggles are used for protecting the pupils during experiments", "fol": "", "prediction": ["all x y.((SafetyGoggles(x) & Pupils(y) & Experiment(z)) -> ProtectsDuring(x,y,z))", "all x y z.((SafetyGoggles(x) & Pupil(y) & Experiment(z)) -> ProtectsDuring(x,y,z))", "all x.(SafetyGoggles(x) -> (ProtectsPupils(x) & DuringExperiments(x)))", "all x y z.((SafetyGloe(x) & Pupil(y) & Experiment(z)) -> ProtectsDuring(x,y,z))", "all x.(SafetyGloes(x) -> (ProtectsPupils(x) & DuringExperiments(x)))", "all x y.((SafetyGloes(x) & Pupils(y)) -> ProtectsDuringExperiments(x,y))", "(all x.(SafetyGoggles(x) -> ProtectsPupilsDuringExperiments(x)))", "all x.(SafetyGoggles(x) -> (ProtectsPupilsDuringExperiments(x) & DuringExperiments(x)))", "all x y.((SecurityGoggles(x) & Pupils(y) & Experiment(z)) -> ProtectsDuring(x,y,z))", "all x.(SecurityGoggles(x) -> (ProtectsPupils(x) & DuringExperiments(x)))", "all x y.((SafetyGoggles(x) & Pupils(y)) -> ProtectsDuringExperiments(x,y))", "all x.(SecurityGloes(x) -> (ProtectsPupils(x) & DuringExperiments(x)))", "all x.(SafetyGloes(x) -> (ProtectsPupils(x) & DuringExperiments(x)))", "all x y z.((SafetyGoggles(x) & Pupil(y) & Experiment(z)) -> ProtectsDuring(x,y,z))", "all x y z.((SecurityGoggles(x) & Pupil(y) & Experiment(z)) -> ProtectsDuring(x,y,z))", "all x.(SafetyGoggles(x) -> ProtectsPupilsDuringExperiments(x))"]}
{"id": "eqasc_validation_1570", "nl": "Goggles are worn to protect eyes.", "fol": "", "prediction": ["all x.(Goggles(x) -> WornToProtectEyes(x))", "all x y.((Goggles(x) & Eyes(y)) -> WornToProtect(x,y))", "all x.(Goggles(x) -> WornToProtectEyes(x))", "(WearsToProtectEyes(Goggles))", "all x y.((Goggles(x) & Eye(y)) -> WornToProtect(x,y))", "all x.(Golfe(x) -> WornToProtectEyes(x))", "all x.(Goggles(x) -> WornToProtectEyes(x))", "all x y.((Goggle(x) & Eye(y)) -> WornToProtect(x,y))", "all x.(Golggle(x) -> WornToProtectEyes(x))", "all x.(Goggles(x) -> WornToProtectEyes(x))", "all x y.((Goggles(x) & Eyes(y)) -> WornToProtect(x,y))", "all x.(Gaggles(x) -> WornToProtectEyes(x))", "all x.(Goggles(x) -> (WornToProtectEyes(x) & WearedToProtectEyes(x)))", "all x.(Goggles(x) -> WornToProtectEyes(x))", "all x.(Goggles(x) -> WornToProtectEyes(x))", "exists x.(Goggle(x) & WornFor(x,eyes))"]}
{"id": "eqasc_validation_1571", "nl": "goggles are for protection", "fol": "", "prediction": ["all x.(Goggles(x) -> ForProtection(x))", "all x y.((Goggles(x) & Goggles(y)) -> ForProtection(x,y))", "all x.(Goggles(x) -> ForProtection(x))", "all x y z.((Goggles(x) & Goggles(y) & Goggles(z)) -> ForProtection(x,y,z))", "all x y.((Goggles(x) & Goggles(y)) -> ForProtection(x,y))", "all x.(Goggles(x) -> ForProtection(x))", "all x.(Golggle(x) -> ForProtection(x))", "all x y.((Goggles(x) & Goggles(y)) -> ForProtection(x,y))", "all x.(Goggles(x) -> ForProtection(x))", "all x.(Goopee(x) -> ForProtection(x,y))", "all x.(Goope(x) -> ForProtection(x))", "All x.(Gloggles(x) -> ForProtection(x))", "all x y.((Goggle(x) & Goggle(y)) -> ForProtection(x,y))", "all x.(Goggles(x) -> ForProtection(x))", "all x.(Goggles(x) -> ForProtection(x))", "All x.(Goggles(x) -> ForProtection(x))"]}
{"id": "eqasc_validation_1572", "nl": "Cnidarians are invertebrates such as jellyfish and corals.", "fol": "", "prediction": ["all x.(Cnidarian(x) -> (Invertebrate(x) & (Jellyfish(x) | Coral(x))))", "all x y.((Cnidarian(x) & (Jellyfish(y) | Coral(y))) -> Invertebrate(x,y))", "(Invertebrate(cnidarians) & (Jellyfish(c) | Coral(c)))", "all x.(Cnidarian(x) -> (Invertebrate(x) & (Jellyfish(x) | Coral(x))))", "all x y z.((Cnidarian(x) & (Jellyfish(y) | Coral(y))) -> Invertebrate(x,y))", "all x y.((Cnidarian(x) & (Jellyfish(y) | Coral(y))) -> Invertebrate(x,y))", "all x y z.((Cnidarian(x) & Jellyfish(y) & Coral(z)) -> Invertebrate(x,y,z))", "all x.(Cnidarian(x) -> (Invertebrate(x) & Invertebrate(x) & Invertebrate(x) & Invertebrate(x) & Invertebrate(x) & Invertebrate(x)))", "all x.(Cnidarian(x) -> (Invertebrate(x) & (Jellyfish(x) | Coral(x))))", "all x y.((Cnidarian(x) & Invertebrate(y)) -> (Jellyfish(x) | Coral(x)))", "all x.(Cnidarian(x) -> (Invertebrate(x) & (Jellyfish(x) | Corals(x))))", "(all x.(Cnidarian(x) -> Invertebrate(x)))", "all x.(Cnidarian(x) -> (Invertebrate(x) & (Jerkyfish(x) | Corals(x))))", "all x.(Cnidarian(x) -> (Invertebrate(x) & (Jellyfish(x) | Coral(x))))", "all x.(Cnidarian(x) -> (Invertebrate(x) & (Jellyfish(x) | Coral(x))))", "all x.(Cnidarian(x) -> (Invertebrate(x) | Invertebrate(x)))"]}
{"id": "eqasc_validation_1573", "nl": "Cnidarians are entirely aquatic animals.", "fol": "", "prediction": ["all x.(Cnidarian(x) -> AquaticAnimal(x))", "all x.(Cnidarian(x) -> AquaticAnimal(x))", "all x y.((Cnidarian(x) & AquaticAnimal(y)) -> AquaticAnimal(x))", "(All x.(Cnidarian(x) -> AquaticAnimal(x)))", "all x.(Cnidarian(x) -> AquaticAnimal(x))", "all x y.((Cnidarian(x) & AquaticAnimal(y)) -> AquaticAnimal(x))", "(all x.(Cnidarian(x) -> AquaticAnimal(x)))", "all x y.((Cnidarian(x) & AquaticAnimal(y)) -> CompletelyAquatic(x,y))", "all x.(Cnidarian(x) -> AquaticAnimal(x))", "all x.(Cnidarian(x) -> AquaticAnimal(x))", "all x.(Cnidarian(x) -> (AquaticAnimal(x) & AquaticAnimal(x)))", "all x.(Cnidarian(x) -> AquaticAnimal(x))", "all x.(Cnidarian(x) -> AquaticAnimal(x))", "all x.(Cnidarian(x) -> AquaticAnimal(x))", "all x.(Cnidarian(x) -> AquaticAnimal(x))", "all x.(Cnidarian(x) -> AquaticAnimal(x))"]}
{"id": "eqasc_validation_1574", "nl": "Jellyfish are an aquatic invertebrate.", "fol": "", "prediction": ["all x.(Jellyfish(x) -> AquaticInvertebrate(x))", "all x.(Jellyfish(x) -> AquaticInvertebrate(x))", "(AquaticInvertebrate(jellyfish)", "all x y.((Jellyfish(x) & AquaticInvertebrate(y)) -> Invertebrate(x))", "all x.(Jellowfish(x) -> AquaticInvertebrate(x))", "all x.(Jellyfish(x) -> AquaticInvertebrate(x))", "(AquaticInvertebrate(jellyfish)", "all x y.((Jellyfish(x) & AquaticInvertebrate(y)) -> Invertebrate(x))", "all x y.((Jellyfish(x) & AquaticInvertebrate(y)) -> AquaticInvertebrate(x))", "all x.(Jellowfish(x) -> AquaticInvertebrate(x))", "all x.(Jellyfish(x) -> AquaticInvertebrate(x))", "all x.(Jellyfish(x) -> AquaticInvertebrate(x))", "All x.(Jellowfish(x) -> AquaticInvertebrate(x))", "all x.(Jellyfish(x) -> AquaticInvertebrate(x))", "all x.(Jellyfish(x) -> AquaticInvertebrate(x))", "all x.(Jellyfish(x) -> AquaticInvertebrate(x))"]}
{"id": "eqasc_validation_1575", "nl": "Coelenterates are invertebrates such as jellyfish and corals.", "fol": "", "prediction": ["all x.(Coelenterate(x) -> (Invertebrate(x) & (Jellyfish(x) | Coral(x))))", "all x y.((Coelenterate(x) & (Jellyfish(y) | Coral(y))) -> Invertebrate(x,y))", "all x.(Coelenterate(x) -> (Invertebrate(x) & (Jellyfish(x) | Coral(x))))", "all x y z.((Coelenterate(x) & (Jellyfish(y) | Coral(y))) -> Invertebrate(x,y))", "(all x.(Coelenterate(x) -> (Invertebrate(x) | Invertebrate(x))))", "all x y.((Coelenterate(x) & Invertebrate(y)) -> (Jellyfish(y) | Coral(y)))", "(Invertebrate(coelenterate,y) & (Jellyfish(y) | Coral(y)))", "all x.(Coelenterate(x) -> (Invertebrate(x) & (Jellyfish(x) | Coral(x))))", "all x y.((Coelenterate(x) & (Jellyfish(y) | Coral(y))) -> Invertebrate(x,y))", "(all x.(Coelenterate(x) -> (Invertebrate(x) & (Jellyfish(x) | Coral(x))))", "all x.(Coelenterates(x) -> (Invertebrate(x) & (Jellyfish(x) | Corals(x))))", "all x.(Coelenterate(x) -> (Invertebrate(x) & (Jellyfish(x) | Coral(x))))", "all x.(Coelenterate(x) -> (Invertebrate(x) & (Jerkyfish(x) | Corals(x))))", "all x.(Coelenterates(x) -> (Invertebrate(x) & Invertebrate(x) & (Jellyfish(x) | Coral(x))))", "all x.(Coelenterates(x) -> (Invertebrate(x) | Invertebrate(x)))", "all x.(Coelenterate(x) -> (Invertebrate(x) & (Jellyfish(x) | Coral(x))))"]}
{"id": "eqasc_validation_1576", "nl": "Invertebrates have no vertebrae or backbone.", "fol": "", "prediction": ["all x.(Invertebrate(x) -> (-Vertebrae(x) | -Backbone(x)))", "(-Vertebrae(invertebrates) & -Backbone(invertebrates))", "all x.(Invertebrate(x) -> (-Vertebrae(x) | -Backbone(x)))", "all x y.((Invertebrate(x) & Vertebrae(y)) -> (-Vertebrae(x) | Backbone(x)))", "all x.(Invertebrates(x) -> (-Vertebrae(x) & -Backbone(x)))", "(-Vertebrae(invertebrates) & -Backbone(invertebrates))", "all x y.((Invertebrate(x) & Vertebrae(y)) -> -HasBackbone(x,y))", "all x.(Invertebrate(x) -> (-Vertebrae(x) | -Backbone(x)))", "(-Vertebrae(invertebrates) | NoBackbone(invertebrates))", "all x.(Invertebrate(x) -> (-Vertebrae(x) | Backbone(x)))", "all x.(Invertebrates(x) -> (NoVertebrae(x) & NoBackbone(x)))", "all x.(Invertebrate(x) -> (-Vertebrae(x) | -Backbone(x)))", "all x.(Invertebrates(x) -> (-Vertebrae(x) | -Backbone(x)))", "all x.(Invertebrate(x) -> (-Vertebrae(x) | Backbone(x)))", "all x.(Invertebrates(x) -> (NoVertebrae(x) & NoBackbone(x)))", "all x.(Invertebrates(x) -> -(Vertebrae(x) | Backbone(x)))"]}
{"id": "eqasc_validation_1577", "nl": "Jellyfish and corals have no vertebrae or backbone", "fol": "", "prediction": ["all x.((Jellyfish(x) | Coral(x)) -> (-Vertebrae(x) & -Backbone(x)))", "all x y.((Jellyfish(x) & Coral(y)) -> (-Vertebrae(x) | -Backbone(y)))", "all x.((Jellyfish(x) | Coral(x)) -> (-Vertebrae(x) | -Backbone(x)))", "all x y.((Jellyfish(x) & Coral(y)) -> (-Vertebrae(x) & -Backbone(y)))", "all x y z.((Jellyfish(x) & Coral(y) & Vertebrae(z)) -> (-Vertebrae(z) | Backbone(z))))", "(-Vertebrae(jellyfish) & -Backbone(coral))", "(-Vertebrae(jellyfish) & -Coral(coral)) & -Backbone(jellyfish) & -Backbone(jellyfish))", "(all x.(Jellyfish(x) -> NoVertebrae(x)) & all y.(Coral(y) -> NoBackbone(y)))", "all x.(Jellyfish(x) | Coral(x)) -> (-Vertebrae(x) & -Backbone(x)))", "all x.((Jellyfish(x) | Coral(x)) -> (-Vertebrae(x) & -Backbone(x)))", "all x.(JellyfishAndCoral(x) -> (-Vertebrae(x) | -Backbone(x)))", "(all x.(Jellyfish(x) -> (Coral(x) & -Vertebrae(x) & -Backbone(x)))", "all x y.((Jellyfish(x) & Coral(y)) -> (-Vertebrae(x) | -Backbone(y)))", "all x y.((Jellyfish(x) | Coral(x)) -> (-Vertebrae(y) | -Backbone(y)))", "all x.((Jellyfish(x) | Coral(x)) -> (-Vertebrae(x) | -Backbone(x)))", "(-Vertebrae(jellyfish) & -Backbone(copper))"]}
{"id": "eqasc_validation_1578", "nl": "Invertebrates are animals without backbones.", "fol": "", "prediction": ["all x.(Invertebrate(x) -> Animal(x) & -Backbone(x))", "all x.(Invertebrate(x) -> (Animal(x) & -Backbone(x)))", "(Animal(invertebrate) & -Backbone(invertebrate))", "(all x.(Invertebrate(x) -> -Backbone(x)))", "all x y.((Invertebrate(x) & Animal(y)) -> -Backbone(y))", "all x.(Invertebrate(x) -> Animal(x) & -Backbone(x))", "all x.(Invertebrates(x) -> (Animal(x) & -Backbone(x)))", "all x y.((Invertebrate(x) & Animal(y)) -> -Backbone(x,y))", "all x.(Invertebrates(x) -> Animal(x) & -Backbone(x))", "all x.(Invertebrate(x) -> AnimalWithoutBackbone(x))", "all x y.((Invertebrate(x) & Animal(y)) -> -HasBackbone(x,y))", "all x.(Invertebrates(x) -> (Animal(x) & -Backbone(x)))", "all x.(Invertebrate(x) -> (Animal(x) & -Backbone(x)))", "all x.(Invertebrates(x) -> Animal(x) & -Backbone(x))", "all x.(Invertebrate(x) -> -Backbone(x))", "all x.(Invertebrate(x) -> AnimalWithoutBackbone(x))"]}
{"id": "eqasc_validation_1579", "nl": "cnidarians are without backbones", "fol": "", "prediction": ["all x.(Cnidarian(x) -> (-Backbone(x) & Cnidarian(x)))", "all x y.((Cnidarian(x) & Cnidarian(y)) -> -Backbone(x,y))", "all x.(Cnidarian(x) -> -HasBackbone(x))", "(all x.(Cnidarian(x) -> -Backbone(x)))", "all x y.((Cnidarian(x) & Cnidarian(y)) -> (-Backbone(x) & -Backbone(y)))", "all x.(Cnidarian(x) -> (-Backbone(x) | Backbone(x)))", "(all x.(Cnidarian(x) -> -Backbone(x)))", "all x y.((Cnidarian(x) & Cnidarian(y)) -> -HasBackbone(x,y))", "all x.(Cnidarian(x) -> -HasBackbone(x))", "all x.(Cnidarian(x) -> (-Backbone(x) & -Backbone(x)))", "all x.(Cnidarian(x) -> (-Backbone(x) & Cnidarian(x)))", "(all x.(Cnidarian(x) -> WithoutBackbones(x)))", "all x y.((Cnidarian(x) & Cnidarian(y)) -> (-Backbone(y) & -Backbone(y)))", "all x.(Cnidarian(x) -> (HasNoBackbone(x) & -HasBackbone(x)))", "all x.(Cnidarian(x) -> -HasBackbone(x))", "all x.(Cnidarian(x) -> (-Backbones(x) | Backbones(x)))"]}
{"id": "eqasc_validation_1580", "nl": "Jellyfish have a hydrostatic skeleton", "fol": "", "prediction": ["all x.(Jellyfish(x) -> HydrostaticSkeleton(x))", "(HydrostaticSkeleton(Jellyfish) & HasHydrostaticSkeleton(Jellyfish))", "all x y.((Jellyfish(x) & HydrostaticSkeleton(y)) -> Has(x,y))", "all x.(Jellyfish(x) -> HydrostaticSkeleton(x))", "(HydrostaticSkeleton(jellyfish) & HasHydrostaticSkeleton(jellyfish))", "all x y.((Jellyfish(x) & HydrostaticSkeleton(y)) -> Has(x,y))", "all x.(Jellyfish(x) -> HydrostaticSkeleton(x))", "all x.(Jellyfish(x) -> HasHydrostaticSkeleton(x))", "all x.(Jellowfish(x) -> HydrostaticSkeleton(x))", "all x.(Jellyfish(x) -> HydrostaticSkeleton(x))", "all x y.((Jellyfish(x) & HydrostaticSkeleton(y)) -> Has(x,y))", "all x.(Jellyfish(x) -> HydrostaticSkeleton(x))", "all x.(Jellyfish(x) -> HasHydrostaticSkeleton(x))", "all x y.((Jellyfish(x) & HydrostaticSkeleton(y)) -> Has(x,y))", "all x.(Jellyfish(x) -> HydrostaticSkeleton(x))", "all x.(Jellyfish(x) -> HydrostaticSkeleton(x))"]}
{"id": "eqasc_validation_1581", "nl": "Cnidarians are radial, tentacled animals that live mostly in the seas.", "fol": "", "prediction": ["all x.(Cnidarian(x) -> (Radial(x) & Tentacled(x) & LivesInSeas(x)))", "all x.(Cnidarian(x) -> (RadialTentacled(x) & LivesInSeas(x)))", "all x y.((Cnidarian(x) & Sea(y)) -> (RadialTentacled(x) & LivesIn(x,y)))", "(RadialTentacled(cnidarians) & LivesInSeas(cnidarians))", "all x.(Cnidarian(x) -> (Radial(x) & Tentacled(x) & LivesInSeas(x)))", "(RadialTentacled(Cnidarian) & LivesInSeas(Cnidarian,Most))", "all x.(Cnidarian(x) -> (Radial(x) & Tentacled(x) & LivesInSeas(x)))", "all x.(Cnidarian(x) -> (RadialTentacled(x) & LivesInSeas(x)))", "all x y.((Cnidarian(x) & Sea(y)) -> (RadialTentacled(x) & LivesIn(x,y)))", "all x y.((Cnidarian(x) & Sea(y)) -> (Radial(x) & Tentacled(x) & LivesIn(x,y)))", "all x.(Cnidarian(x) -> (Animal(x) & Radial(x) & Tentacled(x) & LivesInSeas(x)))", "all x.(Cnidarian(x) -> (Radial(x) & Tentacled(x) & LivesInSeas(x)))", "all x.(Cnidarian(x) -> (RadialTentacled(x) & LivesInSeas(x)))", "all x y.((Cnidarian(x) & Radial(y)) -> Tentacled(x))", "all x.(Cnidarian(x) -> (RadialTentacled(x) & LivesInSeas(x)))", "all x.(Cnidarian(x) -> (Radial(x) & Tentacled(x) & LivesInSeas(x)))"]}
{"id": "eqasc_validation_1582", "nl": "Jellyfish and corals are radial, tentacled animals that live mostly in the seas.", "fol": "", "prediction": ["all x.((Jellyfish(x) | Coral(x)) -> (RadialTentacledAnimal(x) & LivesInSeas(x)))", "all x y.((Jellyfish(x) & Coral(y)) -> (Radial(x) & Tentacled(x) & LivesInSeas(x)))", "all x.((Jellyfish(x) | Coral(x)) -> (Radial(x) & Tentacled(x) & LivesInSeas(x)))", "(RadialTentacledAnimal(Jellyfish) & LivesInSeas(Corals))", "all x.(Jellyfish(x) | Coral(x)) -> (RadialTentacledAnimal(x) & LivesInSeas(x)))", "all x y.((Jellyfish(x) | Coral(x)) -> (RadialTentacledAnimal(x) & LivesInSeas(y)))", "(all x.(Jellyfish(x) -> (Radial(x) & Tentacled(x) & LivesInSeas(x)))", "(all x.(Jellyfish(x) & All y.(Coral(y)) -> (RadialTentacledAnimal(x) & LivesInSeas(x))))", "all x.((Jellyfish(x) | Coral(x)) -> (RadialTentacledAnimal(x) & LivesInSeas(x)))", "(RadialTentacledAnimal(jellyfish) & Coral(coral))", "all x y.((Jellyfish(x) | Coral(y)) -> (Radial(x) & Tentacled(x) & LivesInSeas(x)))", "all x y.((Jellyfish(x) & Coral(y)) -> (RadialTentacledAnimal(x) & LivesInSeas(x,y)))", "all x.((Jellyfish(x) | Coral(x)) -> (Radial(x) & Tentacled(x) & LivesInSeas(x)))", "all x.(Jellyfish(x) | Coral(x)) -> (RadialTentacledAnimal(x) & LivesInSeas(x)))", "(RadialTentacledAnimal(Jellyfish) & LivesInSeas(Corals))", "all x.(Jellyfish(x) | Coral(x)) -> (Radial(x) & Tentacled(x) & LivesInSeas(x)))"]}
{"id": "eqasc_validation_1583", "nl": "jellyfish are entirely aquatic", "fol": "", "prediction": ["all x.(Jellyfish(x) -> (Aquatic(x) & Aquatic(x)))", "all x y.((Jellyfish(x) & Aquatic(y)) -> Aquatic(x))", "all x.(Jellyfish(x) -> (Aquatic(x) & Aquatic(x)))", "(all x.(Jellyfish(x) -> Aquatic(x)))", "all x.(Jerkyfish(x) -> (Aquatic(x) & Aquatic(x) & Aquatic(x)))", "all x.(Jellyfish(x) -> (Aquatic(x) & Aquatic(x) & Aquatic(x)))", "all x y.((Jellyfish(x) & Aquatic(y)) -> Aquatic(x,y))", "all x y.((Jellyfish(x) & Aquatic(y)) -> (Aquatic(x) & Aquatic(y)))", "(all x.(Jellyfish(x) -> Aquatic(x)))", "all x.(Jerkyfish(x) -> (Aquatic(x) & Aquatic(x) & Aquatic(x) & Aquatic(x)))", "all x.(Jellyfish(x) -> Aquatic(x))", "all x.(Jellyfish(x) -> (Aquatic(x) & Aquatic(x)))", "(All x.(Jellyfish(x) -> Aquatic(x)))", "all x.(Jellyfish(x) -> (Aquatic(x) & Aquatic(x) & Aquatic(x)))", "all x y.((Jellyfish(x) & Aquatic(y)) -> Aquatic(x))", "all x.(Jellyfish(x) -> Aquatic(x))"]}
{"id": "eqasc_validation_1584", "nl": "An invertebrate is an animal that has no spine, or backbone.", "fol": "", "prediction": ["all x.(Invertebrate(x) -> (Animal(x) & -Spine(x) & -Backbone(x)))", "all x.(Invertebrate(x) -> (Animal(x) & -HasSpine(x) & -HasBackbone(x)))", "all x.(Invertebrate(x) -> (Animal(x) & -Spine(x) & -Backbone(x)))", "all x.((Animal(x) & NoSpine(x) & NoBackbone(x)) -> Invertebrate(x))", "all x.(Invertebrate(x) -> (Animal(x) & -HasSpine(x) & -HasBackbone(x)))", "all x y.((Invertebrate(x) & Animal(y)) -> (-HasSpine(y) | HasBackbone(y)))", "all x y.((Animal(x) & Invertebrate(y)) -> (-HasSpine(x) | HasBackbone(x)))", "all x.(Invertebrate(x) -> (Animal(x) & -Spine(x) & -Backbone(x)))", "all x.((Animal(x) & NoSpine(x) & NoBackbone(x)) -> Invertebrate(x))", "all x.(Invertebrate(x) -> (Animal(x) & -HasSpine(x) & -HasBackbone(x)))", "all x y.((Animal(x) & Invertebrate(x)) -> (-HasSpines(x) & -HasBackbone(x)))", "all x y.((Invertebrate(x) & Animal(y)) -> (-HasSpine(y) | HasBackbone(y)))", "all x.(Invertebrate(x) -> (Animal(x) & -Spine(x) & -Backbone(x)))", "all x.(Invertebrate(x) -> (Animal(x) & -HasSpine(x) & -HasBackbone(x)))", "all x.(Invertebrate(x) -> (Animal(x) & -Spine(x) & -Backbone(x)))", "exists x.(Invertebrate(x) & Animal(x) & NoSpine(x) & -HasBackbone(x))"]}
{"id": "eqasc_validation_1585", "nl": "cnidarians such as jellyfish and corals have no backbone", "fol": "", "prediction": ["all x.(Cnidarian(x) -> (Jellyfish(x) | Coral(x)) & -HasBackbone(x)))", "all x.((Cnidarian(x) & (Jellyfish(x) | Coral(x))) -> -HasBackbone(x))", "all x y.((Cnidarian(x) & (Jellyfish(y) | Coral(y))) -> -HasBackbone(x,y))", "all x y z.((Cnidarian(x) & (Jellyfish(y) | Coral(y))) -> -HasBackbone(x,y))", "all x.(Cnidarian(x) -> (Jerkyfish(x) | Corals(x)) & NoBackbone(x))", "all x y.((Cnidarian(x) & (Jellyfish(y) | Coral(y))) -> -Backbone(x,y))", "(all x y.((Cnidarian(x) & (Jellyfish(y) | Coral(y))) -> NoBackbone(x))", "all x y.((Cnidarian(x) & Cnidarian(y)) -> (Jellyfish(x) | Coral(x)) & -Backbone(y)))", "(all x.(Cnidarian(x) -> (Jellyfish(x) | Corals(x))) & -HasBackbone(x))", "all x.((Cnidarian(x) & (Jellyfish(x) | Coral(x))) -> NoBackbone(x))", "all x.(Cnidarian(x) -> (Jellyfish(x) | Corals(x)) & -HasBackbone(x))", "all x y z.((Cnidarian(x) & (Jellyfish(y) | Coral(y))) -> -HasBackbone(x,y))", "all x.(Cnidarian(x) -> (Jerkyfish(x) | Corals(x)) & -HasBackbone(x))", "(all x.(Cnidarian(x) -> (Jellyfish(x) | Coral(x))))", "(all x.(Cnidarian(x) -> (Jamefish(x) | Corals(x))))", "all x.(Cnidarian(x) -> ((Jellyfish(x) | Corals(x)) & -Backbone(x)))"]}
{"id": "eqasc_validation_1586", "nl": "coelenterates are invertebrates such as jellyfish and corals", "fol": "", "prediction": ["all x.(Coelenterate(x) -> (Invertebrate(x) & (Jellyfish(x) | Coral(x))))", "all x y z.((Coelenterate(x) & (Jellyfish(y) | Coral(y))) -> (Invertebrate(x) & Invertebrate(x) & Invertebrate(x)))", "all x y.((Coelenterate(x) & Invertebrate(y)) -> (Jellyfish(y) | Coral(y)))", "(Invertebrate(coelenterate,jellyfish) & Invertebrate(coelenterate,coralls))", "all x.(Coelenterates(x) -> (Invertebrate(x) & (Jellyfish(x) | Coral(x))))", "all x y z.((Coelenterate(x) & Invertebrate(y) & (Jellyfish(z) | Corals(z))) -> (Invertebrate(y) & Invertebrate(y) & Invertebrate(y)))", "all x y.((Coelenterate(x) & (Jellyfish(y) | Coral(y))) -> Invertebrate(x,y))", "(all x.(Coelenterate(x) -> (Invertebrate(x) & (Jellyfish(x) | Coral(x))))", "all x.(Coelenterate(x) -> (Invertebrate(x) & (Jellyfish(x) | Corals(x))))", "all x y.((Coelenterate(x) & Invertebrate(y)) -> (Invertebrate(x,y) & (Jellyfish(y) | Coral(y))))", "all x.(Colelenterates(x) -> (Invertebrates(x) & Invertebrates(x) & Invertebrates(x) & Invertebrates(x) & Invertebrates(x) & Invertebrates(x) & Invertebrates(x)))", "(all x.(Coelenterate(x) -> (Invertebrate(x) & (Jellyfish(x) | Corals(x))))", "all x.(Coelenterates(x) -> (Invertebrate(x) & (Jellyfish(x) | Coral(x))))", "all x.(Coelenterates(x) -> (Invertebrate(x) & Invertebrate(x) & (Jellyfish(x) | Coral(x))))", "all x.(Coelenterate(x) -> (Invertebrate(x) & (Jerkyfish(x) | Corals(x))))", "all x.(Coelenterate(x) -> (Invertebrate(x) & (Jellyfish(x) | Coral(x))))"]}
{"id": "eqasc_validation_1587", "nl": "Anenomes and coral are invertebrates.", "fol": "", "prediction": ["all x.((Anenome(x) | Coral(x)) -> Invertebrate(x))", "all x y.((Anenome(x) & Coral(y)) -> Invertebrate(x))", "(Invertebrate(anenome) & Invertebrate(coral))", "all x.((Anenome(x) | Coral(x)) -> Invertebrate(x))", "(Invertebrate(Anenome) & Invertebrate(Coral))", "all x.(Invertebrate(x) -> (Anenome(x) | Coral(x)))", "all x y.((Anenome(x) & Coral(y)) -> Invertebrate(x))", "(Invertebrate(anenome) & Invertebrate(coral))", "all x.((Anenome(x) | Coral(x)) -> Invertebrate(x))", "all x y.((Anenome(x) & Coral(y)) -> (Invertebrate(x) | Invertebrate(y)))", "(Invertebrate(anenomes,a) & Invertebrate(coral,a))", "(Invertebrate(Anenome) & Invertebrate(Coral))", "all x.((Anemoes(x) | Coral(x)) -> Invertebrate(x))", "all x.((Anenome(x) | Coral(x)) -> Invertebrate(x))", "all x.(Invertebrate(x) -> (Anenome(x) | Coral(x)))", "all x.((Anenome(x) | Coral(x)) -> Invertebrate(x))"]}
{"id": "eqasc_validation_1588", "nl": "an anemometer is used to measure wind speed", "fol": "", "prediction": ["all x y.((Anemometer(x) & WindSpeed(y)) -> Measures(x,y))", "all x y z.((Anemometer(x) & WindSpeed(y) & WindSpeed(z)) -> Measures(x,y,z))", "all x.(Anemometer(x) -> MeasuresWindSpeed(x))", "(MeasuresWindSpeed(anemometer) & MeasuresWindSpeed(anemometer))", "all x y.((Anemometer(x) & WindSpeed(y)) -> Measures(x,y))", "all x.((Anemometer(x) & WindSpeed(x)) -> Measures(x,windspeed,windspeed))", "all x y z.((Anemometer(x) & WindSpeed(y) & WindSpeed(z)) -> Measures(x,y,z))", "all x.(Anemometer(x) -> MeasuresWindSpeed(x))", "all x.(Anemometer(x) -> MeasuresWindSpeed(x))", "all x.((Anemometer(x) & WindSpeed(y)) -> Measures(x,y))", "all x y z.((Anemometer(x) & WindSpeed(y) & WindSpeed(z) & Measures(x,y,z)) -> Anemometer(x))", "all x y.((Anemometer(x) & WindSpeed(y)) -> Measures(x,y))", "all x y.((Anemometer(x) & WindSpeed(y)) -> Measures(x,y))", "all x y.((Anemometer(x) & WindSpeed(y) & Measures(x,y)) -> UsedToMeasure(x,y))", "exists x.(Anemometer(x) & MeasuresWindSpeed(x))", "all x.(Anemometer(x) -> MeasuresWindSpeed(x))"]}
{"id": "eqasc_validation_1589", "nl": "If wind speeds exceeded 73 mph, the storm is upgraded to a hurricane.", "fol": "", "prediction": ["all x.((WindSpeedExceeds73(x)) -> Hurricane(x))", "all x.((WindSpeed(x,73) & Exceeds(x,73)) -> Hurricane(x))", "all x y.((WindSpeed(x,y) & WindSpeedExceeds(x,y)) -> Hurricane(x))", "all x.((WindSpeedExceeds73(x)) -> Hurricane(x))", "all x y.((Storm(x) & WindSpeedExceeds73(x,y)) -> UpgradedToHurricane(x))", "(Exceeds73mphWindSpeed(Storm) -> Hurricane(Storm))", "all x.((WindSpeed(x,73)) -> UpgradedToHurricane(x))", "all x.((WindSpeedExceeds(x,73)) -> Hurricane(x))", "all x.((WindSpeedExceedsThirty(x) & Hurricane(x)) -> UpgradedTo(x))", "all x y.((Storm(x) & WindSpeedExceeds(x,73)) -> UpgradedToHurricane(x))", "all x y.((WindSpeed(x,y) & WindSpeedExceeds73(y,x)) -> Hurricane(x))", "all x.((WindSpeed(x,73) & WindSpeedExceeds(x,73)) -> Hurricane(x))", "all x.((Storm(x) & WindSpeedExceeds73(x)) -> Hurricane(x))", "all x.(Exceeds73mphWindSpeed(x) -> Hurricane(x))", "all x.(ExceedsTwoThirtymphWindSpeed(x) -> Hurricane(x))", "all x.((WindSpeedExceeds73mph(x)) -> Hurricane(x))"]}
{"id": "eqasc_validation_1590", "nl": "A hurricane occurs when anemometer shows a reading above 73 mph", "fol": "", "prediction": ["all x y.((Hurricane(x) & Anemometer(y) & ReadingAbove73mph(y)) -> Occurs(x))", "all x.(Hurricane(x) -> (OccursWhenAnemometerShowsReadingAbove73mph(x)))", "all x y z.((Hurricane(x) & Anemometer(y) & Reading(z) & Above(y,73)) -> Occurs(x))", "all x.((Hurricane(x) & AnemometerShowsReadingAbove73mph(x)) -> Occurs(x))", "all x y.((Hurricane(x) & Anemometer(y) & ReadingAbove(y,73)) -> Occurs(x))", "all x.(Hurricane(x) -> (AnemometerShowsReadingAbove73mph(x)))", "all x y z.((Hurricane(x) & Anemometer(y) & Reading(z) & Above73mph(y,z)) -> Occurs(x))", "all x.((Hurricane(x) & Anemometer(x) & ReadingAbove73mph(x)) -> Occurs(x))", "all x.(Hurricane(x) -> (OccursWhenAnemometerShowsReadingAbove73mph(x)))", "all x y.((Hurricane(x) & Anemometer(y) & ReadingAbove73mph(y,x)) -> Occurs(x))", "all x y z.((Hurricane(x) & Anemometer(y) & ReadingAbove73mph(y,z)) -> Occurs(x))", "all x y.((Hurricane(x) & Anemometer(y) & ReadingAboveThirtymph(y,x)) -> Occurs(x))", "all x.((Hurricane(x) & AnemometerShowsReadingAbove73mph(x)) -> Occurs(x))", "all x.(Hurricane(x) -> (AnemometerShowsReadingAbove73mph(x)))", "all x.(Hurricane(x) -> (OccursWhenAnemometerShowsReadingAbove73mph(x)))", "all x y.((Hurricane(x) & Anemometer(y) & ReadingAboveThirtymph(y)) -> Occurs(x))"]}
{"id": "eqasc_validation_1591", "nl": "Wind speed is gauged with an anemometer.", "fol": "", "prediction": ["all x.(WindSpeed(x) -> GaugedWithAnemometer(x))", "all x y.((WindSpeed(x) & Anemometer(y)) -> GaugedWith(x,y))", "(Gathering(windspeed) & Anemometer(wind))", "all x.(WindSpeed(x) -> GaugedWithAnemometer(x))", "all x y z.((WindSpeed(x) & Anemometer(y) & WindSpeed(z)) -> GaugedWith(x,y,z))", "all x y.((WindSpeed(x) & Anemometer(y)) -> Gauge(x,y))", "all x.(WindSpeed(x) -> GaugedWithAnemometer(x))", "(GaugedWithAnemometer(windSpeed)", "(Gathering(windspeed) & Anemometer(wind))", "all x y.((WindSpeed(x) & Anemometer(y)) -> GaugedWith(x,y))", "(GatheredWithAnemometer(windSpeed)", "all x.(WindSpeed(x) -> GaugedWithAnemometer(x))", "all x y.((WindSpeed(x) & Anemometer(y)) -> Gaugeable(x,y))", "all x.(WindSpeed(x) -> GaugeableWithAnemometer(x))", "all x.(WindSpeed(x) -> MeasuredWithAnemometer(x))", "all x.(WindSpeed(x) -> GroundedWithAnemometer(x))"]}
{"id": "eqasc_validation_1592", "nl": "anemometers gauge wind ", "fol": "", "prediction": ["all x.(Anemometer(x) -> (GainWind(x) & GaugeWind(x)))", "all x.(Anemometer(x) -> (GainWind(x) | WindWindWindWindWindWindWindWindWindWindWindWindWindWindWindWindWindWindWindWindWindWindWindWindWindWindWindWindWindWindWindWindWindWindWindWindWindWindWindWindWindWindWindWindWindWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWinWin", "all x y.((Anemometer(x) & Wind(y)) -> Gauges(x,y))", "all x.((Anemometer(x) & Wind(y)) -> Gauges(x,y))", "all x.(Anemometer(x) -> (GatheringWind(x) | GaugingWind(x)))", "all x y z.((Anemometer(x) & Wind(y) & Wind(z)) -> Gauges(x,y,z))", "all x y.((Anemometer(x) & Wind(y)) -> Gauges(x,y))", "all x.(Anemometer(x) -> (GainWind(x) & GaugeWind(x)))", "all x.((Anemometer(x) & Wind(y)) -> Gauges(x,y))", "(all x.(Anemometer(x) -> GaugesWind(x)))", "all x.(Anemometer(x) -> GaugesWind(x))", "all x y.((Anemometer(x) & Wind(y)) -> Gauges(x,y))", "all x y.((Anemometer(x) & Wind(y)) -> Gauges(x,y))", "all x y z.((Anemometer(x) & Wind(y) & Wind(z)) -> Gauges(x,y,z))", "all x.((Anemometer(x) & Wind(y)) -> Gauges(x,y))", "all x y.((Anemometer(x) & Wind(y)) -> Gauges(x,y))"]}
{"id": "eqasc_validation_1593", "nl": "Wind speed and severity of tornadoes is estimated by the damage caused.", "fol": "", "prediction": ["all x.((WindSpeed(x) & TornadoSeverity(x)) -> EstimatedByDamage(x))", "all x y.((WindSpeed(x) & Tornado(y)) -> (EstimatedByDamage(x,y) & EstimatedBySeverity(x,y)))", "(estimatedByDamage(windspeed,tornadoes) & EstimatedByDamage(tornadoes,tornadoes))", "all x.(Tornado(x) -> (WindSpeed(x) & Severity(x)))", "all x y.((WindSpeed(x) & Tornado(y) & Damage(z)) -> EstimatedBy(x,y,z))", "all x y z.((WindSpeed(x) & Tornado(y) & Damage(z)) -> (EstimatedBy(x,y,z) & EstimatedBy(x,y)))", "all x y.((Tornado(x) & WindSpeed(x,y) & Severity(x,y)) -> EstimatedByDamage(x))", "(EstimatedByDamage(windspeed) & EstimatedBySeverity(tornadoes))", "all x.((WindSpeed(x) & TornadoSeverity(x)) -> EstimatedByDamage(x))", "(estimatedByDamage(windspeed,tornado) & EstimatedBySeverity(tornado))", "all x.((WindSpeed(x) & TornadoSeverity(x)) -> DamageEstimatedBy(x,DamageCaused))", "(EstimatedByDamage(WindSpeed,Tornado) & EstimatedBySeverity(Tornado,Tornado))", "all x.(Tornado(x) -> (WindSpeed(x) & Gravity(x) & DamageCaused(x)))", "all x y.((WindSpeed(x) & Tornado(y) & Damage(z)) -> EstimatedBy(x,y,z))", "all x y.((Tornado(x) & WindSpeed(x,y) & Severity(x,y)) -> DamageDamaged(x,y))", "all x.((WindSpeed(x) & TornadoSeverity(x)) -> EstimatedByDamage(x))"]}
{"id": "eqasc_validation_1594", "nl": "An anemometer is used to estimate the damage caused by wind.", "fol": "", "prediction": ["all x.(Anemometer(x) -> EstimatesWindDamage(x))", "all x y.((Anemometer(x) & Wind(y)) -> EstimatesDamage(x,y))", "all x.(Anemometer(x) -> EstimatesWindDamage(x))", "all x.(Anemometer(x) -> EstimatesDamage(x))", "all x.((Anemometer(x) & Wind(y)) -> EstimatesDamage(x,y))", "all x y.((Anemometer(x) & Wind(y)) -> EstimatesDamage(x,y))", "all x y.((Anemometer(x) & Wind(y)) -> EstimatesDamage(x,y))", "all x y z.((Anemometer(x) & Wind(y) & Damage(z)) -> Estimates(x,y,z))", "all x.(Anemometer(x) -> EstimatesWindDamage(x))", "all x y.((Anemometer(x) & Wind(y)) -> EstimatesDamage(x,y))", "all x.((Anemometer(x) & WindDamage(x)) -> Estimates(x,y))", "all x.(Anemometer(x) -> EstimatesWindDamage(x))", "all x y z.((Anemometer(x) & Wind(y) & Wind(z)) -> EstimatesDamage(x,y,z))", "exists x.(Anemometer(x) & EstimatesDamage(x) & Wind(x))", "all x.(Anemometer(x) -> EstimatesDamageByWind(x))", "all x y.((Anemometer(x) & Wind(y)) -> EstimatesDamage(x,y))"]}
{"id": "eqasc_validation_1595", "nl": "Hurricanes have wind speeds of at least 74 mph.", "fol": "", "prediction": ["all x.(Hurricane(x) -> WindSpeed(x,y))", "all x.(Hurricane(x) -> WindSpeed(x,y))", "(all x.(Hurricane(x) -> WindSpeedAtLeast74(x)))", "all x y.((Hurricane(x) & WindSpeed(y,x)) -> WindSpeed(x,y))", "all x.(Hurricane(x) -> WindSpeedAtLeast74(x))", "all x y.((Hurricane(x) & WindSpeed(y) & AtLeast74(y)) -> Has(x,y))", "(all x.(Hurricane(x) -> WindSpeedAtLeast74(x)))", "all x y.((Hurricane(x) & WindSpeed(y,x,y)) -> WindSpeed(x,y))", "all x.(Hurricane(x) -> WindSpeed(x,y))", "all x.(Hurricane(x) -> WindSpeedAtLeast(x,74))", "all x.(Horizon(x) -> WindSpeed(x,y))", "all x y.((Hurricane(x) & WindSpeed(y,x,y)) -> WindSpeed(x,y))", "all x.(Hurricane(x) -> WindSpeed(x,y))", "all x.(Hurricane(x) -> WindSpeed(x,74))", "all x.(Hurricane(x) -> HasWindSpeed(x,y))", "all x.(Hurricane(x) -> WindSpeed(x,74))"]}
{"id": "eqasc_validation_1596", "nl": "anemometers can measure hurricanes", "fol": "", "prediction": ["all x.(Anemometer(x) -> MeasuresHurricane(x))", "all x y.((Anemometer(x) & Hurricane(y)) -> Measures(x,y))", "all x.(Anemometer(x) -> (MeasuresHurricane(x) & MeasuresHurricane(x)))", "all x.(Anemometer(x) -> MeasuresHurricane(x))", "all x y.((Anemometer(x) & Hurricane(y)) -> Measures(x,y))", "all x.(Anemometer(x) -> (MeasuresHurricane(x) & MeasuresHurricane(x)))", "(MeasuresHurricane(anemometer) & Hurricane(anemometer))", "all x y.((Anemometer(x) & Hurricane(y)) -> Measures(x,y))", "all x y z.((Anemometer(x) & Hurricane(y) & Hurricane(z)) -> Measures(x,y,z))", "all x.((Anemometer(x) & Hurricane(y)) -> Measures(x,y))", "all x.(Anemometer(x) -> MeasuresHurricane(x))", "all x.(Emometer(x) -> (MeasuresHurricane(x) | MeasuresHurricane(x)))", "all x y z.((Anemometer(x) & Hurricane(y) & Hurricane(z)) -> CanMeasure(x,y,z))", "all x y.((Anemometer(x) & Hurricane(y)) -> CanMeasure(x,y))", "all x y.((Anemometer(x) & Hurricane(y)) -> Measures(x,y))", "all x.(Anemometer(x) -> MeasuresHurricane(x))"]}
{"id": "eqasc_validation_1597", "nl": "An anemometer is a device that measures the force of the wind.", "fol": "", "prediction": ["all x.(Anemometer(x) -> MeasuresWindForce(x))", "all x y.((Anemometer(x) & Wind(y)) -> MeasuresForce(x,y))", "all x.(Anemometer(x) -> MeasuresWindForce(x))", "all x.(Anemometer(x) -> MeasuresWindForce(x))", "all x.((Device(x) & MeasuresWindForce(x)) -> Anemometer(x))", "all x y.((Anemometer(x) & Wind(y)) -> MeasuresForce(x,y))", "all x.(Anemometer(x) -> MeasuresWindForce(x))", "all x.(Anemometer(x) -> (MeasuresWindForce(x) & MeasuresWindForce(x)))", "all x.(Anemometer(x) -> MeasuresWindForce(x))", "all x.(Anemometer(x) -> MeasuresWindForce(x))", "all x.(Anemometer(x) -> MeasuresWindForce(x))", "all x y.((Anemometer(x) & Wind(y)) -> MeasuresForce(x,y))", "all x.((Device(x) & MeasuresWindForce(x)) -> Anemometer(x))", "all x y.((Anemometer(x) & Wind(y)) -> MeasuresForce(x,y))", "exists x.(Empirometer(x) & MeasuresWindForce(x))", "all x y.((Anemometer(x) & Wind(y)) -> MeasuresForce(x,y))"]}
{"id": "eqasc_validation_1598", "nl": "The force of the wind can be used to measure its speed", "fol": "", "prediction": ["all x y.((Wind(x) & WindForce(y)) -> MeasureSpeed(x,y))", "all x.(WindForce(x) -> MeasureSpeed(x))", "all x y.((Wind(x) & Wind(y)) -> MeasureSpeed(x,y))", "all x y.((WindForce(x) & WindSpeed(y)) -> MeasuresSpeed(x,y))", "(MeasuresSpeedOfWind(wind) & UsesForceOfWind(wind))", "all x y z.((Wind(x) & Force(y) & Wind(z)) -> MeasuresSpeed(x,y,z))", "all x.((WindForce(x) & MeasureSpeed(x)) -> CanBeUsedToMeasureSpeed(x))", "all x y z.((WindForce(x) & Wind(y) & Speed(z)) -> MeasuresSpeed(x,y,z))", "all x.(WindForce(x) -> MeasuresSpeed(x))", "(MeasuresSpeed(wind) & WindForce(wind))", "(MeasuresSpeedOfWind(wind) -> WindForce(wind))", "all x y.((WindForce(x) & WindSpeed(y)) -> MeasuresSpeed(x,y))", "(MeasureSpeedOfWind(wind) -> UsesForceOfWind(wind))", "all x.((WindForce(x) & MeasureSpeed(x,wind)) -> CanBeUsedToMeasureSpeed(x,wind))", "all x.(WindForce(x) -> MeasureSpeed(x))", "all x y.((WindForce(x) & WindSpeed(y)) -> MeasuresSpeed(x,y))"]}
{"id": "eqasc_validation_1599", "nl": "an anemometer is used to measure hurricanes", "fol": "", "prediction": ["all x y.((Anemometer(x) & Hurricane(y)) -> Measures(x,y))", "all x y z.((Anemometer(x) & Hurricane(y) & Hurricane(z)) -> Measures(x,y,z))", "all x.(Anemometer(x) -> MeasuresHurricane(x))", "all x.(Anemometer(x) -> MeasuresHurricane(x))", "all x y.((Anemometer(x) & Hurricane(y)) -> Measures(x,y))", "(MeasuresHurricane(a) & UsesAnemometer(b) & MeasuresHurricane(c))", "all x.((Anemometer(x) & Hurricane(y)) -> Measures(x,y))", "all x y.((Anemometer(x) & Hurricane(y)) -> Measures(x,y))", "all x y z.((Anemometer(x) & Hurricane(y) & Hurricane(z)) -> Measures(x,y,z))", "all x.(Anemometer(x) -> MeasuresHurricane(x))", "all x.((Anemometer(x) & Hurricane(y)) -> Measures(x,y))", "all x.(Anemometer(x) -> MeasuresHurricane(x))", "all x y.((Anemometer(x) & Hurricane(y)) -> Measures(x,y))", "all x y z.((Anemometer(x) & Hurricane(y) & Hurricane(z)) -> Measures(x,y,z))", "all x y.((Anemometer(x) & Hurricane(y)) -> Measures(x,y))", "all x y z.((Anemometer(x) & Hurricane(y) & Hurricane(z)) -> Measures(x,y,z))"]}
{"id": "eqasc_validation_1600", "nl": "An anemometer and vane are at the top of the station.", "fol": "", "prediction": ["all x.((Anemometer(x) & Vane(x)) -> TopOfStation(x))", "all x y.((Anemometer(x) & Vane(y)) -> TopOfStation(x,y))", "all x.((Anemometer(x) & Vane(x)) -> TopOfStation(x))", "(AtTopOfStation(anemometer,topOfStation) & HasVane(anemometer,topOfStation))", "(AtTopOfStation(a) & Anemometer(a) & Vane(b))", "all x y z.((Anemometer(x) & Vane(y) & Station(z)) -> (AtTopOf(x,z) & AtTopOf(y,z)))", "exists x.(Station(x) & Anemometer(x) & Vane(x) & TopOfStation(x))", "all x y.((Anemometer(x) & Vane(y)) -> TopOfStation(x,y))", "all x.(Anemometer(x) & Vane(x))", "all x.((Anemometer(x) & Vane(x)) -> TopOfStation(x))", "(AtTopOfStation(anemometer,topOfStation) & AtTopOfStation(vane,bottomOfStation))", "exists x.(Station(x) & Anemometer(x) & Vane(x) & AtTopOfStation(x))", "(AtTopOfStation(a) & Anemometer(a) & Vane(b))", "all x y.((Anemometer(x) & Vane(y)) -> TopOfStation(x,y))", "all x y.((Anemometer(x) & Vane(y)) -> TopOfStation(x,y))", "exists x.(Anemometer(x) & Vane(x) & TopOfStation(x))"]}
{"id": "eqasc_validation_1601", "nl": "A device to measure wind is placed at the top of a station", "fol": "", "prediction": ["all x y.((Device(x) & Station(y) & MeasuresWind(x,y)) -> PlacedAtTopOf(x,y))", "all x y z.((Device(x) & Station(y) & Station(z) & MeasuresWind(x,y)) -> PlacedAtTopOf(x,z))", "all x y.((Device(x) & Station(y) & MeasuresWind(x)) -> PlacedAtTopOf(x,y))", "all x.((Device(x) & MeasuresWind(x)) -> PlacedAtTopOfStation(x))", "all x y z.((Device(x) & Station(y) & Station(z) & MeasuresWind(x)) -> PlacedAtTopOf(x,y,z))", "all x.(DeviceToMeasureWind(x) -> PlacedAtTopOfStation(x))", "all x y.((Device(x) & Station(y) & PlacedAtTopOf(x,y)) -> MeasuresWind(x))", "all x.((Device(x) & MeasuresWind(x)) -> PlacedAtTopOfStation(x))", "all x y.((Device(x) & Station(y) & MeasuresWind(x,y)) -> PlacedAtTopOfStation(x,y))", "all x y z.((Device(x) & Station(y) & Station(z) & MeasuresWind(x,y)) -> PlacedAtTopOf(x,z))", "all x.(DeviceToMeasureWind(x) -> PlacedAtTopOfStation(x))", "exists x.(Device(x) & MeasuresWind(x) & PlacedAtTopOfStation(x))", "all x y z.((Device(x) & Station(y) & Station(z)) -> MeasuresWind(x,y,z))", "all x y.((Device(x) & Station(y) & PlacedAtTopOf(x,y)) -> MeasuresWind(x))", "all x.((Device(x) & MeasuresWind(x)) -> PlacedAtTopOfStation(x))", "all x y.((Device(x) & Station(y) & MeasuresWind(x,y)) -> PlacedAtTopOfStation(x,y))"]}
{"id": "eqasc_validation_1602", "nl": "Hurricanes have five categories depending on wind speeds.", "fol": "", "prediction": ["all x.(Hurricane(x) -> (HasCategory(x,5) & DependsOnWindSpeed(x)))", "all x y.((Hurricane(x) & WindSpeed(y)) -> HasCategories(x,y))", "all x.(Hurricane(x) -> (HasCategory(x,5) & DependsOnWindSpeed(x)))", "(Hurricane(hurricane) & WindSpeed(hurricane) & Category(hurricane))", "all x.(Hurricane(x) -> HasFiveCategories(x))", "all x.(Hurricane(x) -> (HasFiveCategories(x) & DependsOnWindSpeed(x)))", "all x y.((Hurricane(x) & WindSpeed(y)) -> HasCategory(x,y))", "(Hurricane(h) & WindSpeed(w) & HasCategories(h,w))", "(Hurricane(h) & WindSpeed(w))", "all x y.((Hurricane(x) & WindSpeed(y)) -> HasCategories(x,y))", "all x.(Hurricane(x) -> HasCategory(x,5))", "all x.(Hurricane(x) -> (HasCategory(x,5) & DependsOnWindSpeed(x)))", "all x.(Hurricane(x) -> (HasCategory(x,y) & WindSpeed(y)))", "all x y.((Hurricane(x) & WindSpeed(y)) -> HasCategory(x,y))", "all x.(Hurricane(x) -> (HasCategory(x,5) & DependsOnWindSpeed(x)))", "all x.(Hurricane(x) -> HasFiveCategories(x))"]}
{"id": "eqasc_validation_1603", "nl": "An anemometer can be used to determine hurricane category", "fol": "", "prediction": ["all x.(Anemometer(x) -> DeterminesHurricaneCategory(x))", "all x y.((Anemometer(x) & HurricaneCategory(y)) -> Determines(x,y))", "all x.(Anemometer(x) -> DeterminesHurricaneCategory(x))", "all x y.((Anemometer(x) & HurricaneCategory(y)) -> Determines(x,y))", "all x.((Anemometer(x) & HurricaneCategory(x)) -> Determines(x,y))", "all x y z.((Anemometer(x) & HurricaneCategory(y) & HurricaneCategory(z)) -> Determines(x,y,z))", "all x y.((Anemometer(x) & HurricaneCategory(y)) -> Determines(x,y))", "all x.(Anemometer(x) -> DeterminesHurricaneCategory(x))", "all x.(Anemometer(x) -> (UsedToDetermineHurricaneCategory(x) & DeterminesHurricaneCategory(x)))", "all x.(Anemometer(x) -> DeterminesHurricaneCategory(x))", "all x.((Anemometer(x) & HurricaneCategory(x)) -> Determines(x,y))", "all x y z.((Anemometer(x) & HurricaneCategory(y) & HurricaneCategory(z)) -> Determines(x,y,z))", "exists x.(Anemometer(x) & HurricaneCategory(x) & DeterminesCategory(x,Hurricane))", "all x y.((Anemometer(x) & HurricaneCategory(y)) -> Determines(x,y))", "all x y.((Anemometer(x) & HurricaneCategory(y)) -> Determines(x,y))", "all x.((Anemometer(x) & HurricaneCategory(x)) -> Determines(x,hurricane))"]}
{"id": "eqasc_validation_1604", "nl": "Bacteria are the most diverse and abundant group of organisms on Earth.", "fol": "", "prediction": ["all x.(Bacteria(x) -> (DiverseAndAbundantOrganisms(x) & OnEarth(x)))", "all x y.((Bacteria(x) & Earth(y)) -> (Diverse(x,y) & Abundant(x,y)))", "all x.(Bacteria(x) -> (DiverseOrganism(x) & AbundantOrganism(x)))", "(DiverseAndAbundantOrganisms(bacteria) -> OnEarth(bacteria))", "all x y.((Bacteria(x) & Earth(y)) -> (Diverse(x,y) & Abundant(x,y)))", "all x.(Bacteria(x) -> (DiverseAndAbundantOrganisms(x) & OnEarth(x)))", "(DiverseAndAbundantOrganisms(bacteria) -> OnEarth(bacteria))", "all x.(Bacteria(x) -> (Diverse(x) & Abundant(x) & OnEarth(x)))", "all x y.((Bacteria(x) & Earth(y)) -> (DiverseAndAbundant(x,y) & Organism(x,y)))", "all x y z.((Bacteria(x) & Earth(y) & DiverseAndAbundant(x,y,z)) -> Organism(x))", "all x.(Bacteria(x) -> (DiverseAndAbundantOrganisms(x) & OnEarth(x)))", "all x.(Bacteria(x) -> (DiverseOrganism(x) & AbundantOrganism(x)))", "all x y.((Bacteria(x) & Earth(y)) -> (DiverseAndAbundant(x,y) & On(x,y)))", "all x.(Bacteria(x) -> (DiverseAndAbundantOrganisms(x) & OnEarth(x)))", "all x.(Bacteria(x) -> (DiverseAndAbundantOrganisms(x) & OnEarth(x)))", "all x.(Bacteria(x) -> (DiverseOrganism(x) & AbundantOrganism(x)))"]}
{"id": "eqasc_validation_1605", "nl": "An organization is a life form.", "fol": "", "prediction": ["all x.(Organization(x) -> LifeForm(x))", "all x.(Organization(x) -> LifeForm(x))", "all x y.((Organization(x) & LifeForm(y)) -> LifeForm(x))", "all x.exists y.(Organization(x) & LifeForm(y))", "all x.(Organism(x) -> LifeForm(x))", "all x.(Organization(x) -> LifeForm(x))", "all x y.((Organization(x) & LifeForm(y)) -> LifeForm(x,y))", "all x.(Organization(x) -> LifeForm(x))", "all x y.((Organization(x) & LifeForm(y)) -> LifeForm(x))", "all x.(Organization(x) -> LifeForm(x))", "exists x.(Organism(x) & LifeForm(x))", "all x.(Organization(x) -> LifeForm(x))", "all x.(Organization(x) -> LifeForm(x))", "exists x.(Organization(x) & LifeForm(x))", "exists x.(Organization(x) & LifeForm(x))", "exists x.(Organization(x) & LifeForm(x))"]}
{"id": "eqasc_validation_1606", "nl": "Bacteria are the most diverse and abundant group of life form on Earth.", "fol": "", "prediction": ["all x.(Bacteria(x) -> (Diverse(x) & Abundant(x) & LifeForm(x)))", "all x y.((Bacteria(x) & Earth(y)) -> (Diverse(x,y) & Abundant(x,y)))", "all x.(Bacteria(x) -> (DiverseAndAbundantLifeForm(x) & OnEarth(x)))", "(DiverseAndAbundantLifeForm(bacteria) & OnEarth(bacteria)", "all x.(Bacteria(x) -> (DiverseLifeForm(x) & AbundantLifeForm(x)))", "all x y.((Bacteria(x) & Earth(y)) -> (Diverse(x,y) & Abundant(x,y)))", "(DiverseAndAbundantLifeForms(bacteria) & OnEarth(bacteria)", "all x y z.((Bacteria(x) & Earth(y) & LifeForm(z)) -> (Diverse(x,z) & Abundant(x,z)))", "all x.(Bacteria(x) -> (Diverse(x) & Abundant(x)))", "all x y.((Bacteria(x) & Earth(y)) -> (DiverseAndAbundantGroupOfLife(x,y) & On(x,y)))", "all x y.((Bacteria(x) & Earth(y)) -> (Diverse(x,y) & Abundant(x,y)))", "all x.(Bacteria(x) -> (DiverseAndAbundantLifeForm(x) & OnEarth(x)))", "all x.(Bacteria(x) -> (DiverseAndAbundantLifeForm(x) & OnEarth(x)))", "all x.(Bacteria(x) -> (DiverseLifeForm(x) & AbundantLifeForm(x)))", "all x.(Bacteria(x) -> (Diverse(x) & Abundant(x) & LifeForm(x,Earth)))", "all x.(Bacteria(x) -> (DiverseAndAbundantLifeForm(x) & OnEarth(x)))"]}
{"id": "eqasc_validation_1607", "nl": "Earth is our planet.", "fol": "", "prediction": ["all x.(Earth(x) -> Planet(x))", "(Earth(Earth) & Planet(Earth))", "all x.(Earth(x) -> Planet(x))", "(OurPlanet(Earth) & -Earth(Earth))", "Earth is ourPlanet(Earth)", "(Planet(Earth) & Planet(Earth))", "Earth is our Planet.", "all x.(Earth(x) -> Planet(x))", "Earth is ourPlanet(e)", "(Planet(e) & Earth(e))", "Earth is our Planet.", "all x.(Earth(x) -> Planet(x))", "all x.(Earth(x) -> Planet(x))", "All x.(Earth(x) -> Planet(x))", "all x.(Earth(x) -> Planet(x))", "All x.(Earth(x) -> Planet(x))"]}
{"id": "eqasc_validation_1608", "nl": "bacteria are the most diverse and abundant group of organisms on our planet", "fol": "", "prediction": ["all x.(Bacteria(x) -> (DiverseAndAbundantOrganisms(x) & OnPlanet(x)))", "all x y.((Bacteria(x) & Planet(y)) -> (DiverseAndAbundant(x,y) & On(x,y)))", "all x.(Bacteria(x) -> (DiverseOrganism(x) & AbundantOrganism(x) & OnPlanet(x)))", "(DiverseAndAbundantOrganisms(bacteria) & OnPlanet(bacteria,Planet))", "all x y z.((Bacteria(x) & DiverseAndAbundantOrganism(y) & Planet(z)) -> (Organism(x,y,z) & OnPlanet(x,y,z)))", "all x y.((Bacteria(x) & Planet(y)) -> (DiverseAndAbundantOrganisms(x,y) & OnPlanet(x,y)))", "all x.(Bacteria(x) -> (DiverseAndAbundantOrganisms(x) & OnPlanet(x)))", "all x y z.((Bacteria(x) & DiverseAndAbundantOrganism(y) & Planet(z)) -> (Organism(x,y) & Organism(x,z)))", "all x.(Bacteria(x) -> (DiverseAndAbundantOrganisms(x) & OnPlanet(x)))", "all x y.((Bacteria(x) & Plant(y)) -> (DiverseAndAbundant(x,y) & OnPlanet(x,y)))", "all x.(Bacteria(x) -> (DiverseAndAbundantOrganisms(x) & OnPlanet(x)))", "all x.(Bacteria(x) -> (DiverseOrganism(x) & AbundantOrganism(x)))", "all x y.((Bacteria(x) & Planet(y)) -> (DiverseOrganism(x,y) & AbundantOrganism(x,y)))", "all x.(Bacteria(x) -> (DiverseAndAbundantOrganism(x) & OnPlanet(x) & OnPlanet(x)))", "all x.(Bacteria(x) -> (MostDiverseAndAbundantOrganisms(x) & OnPlanet(x)))", "all x.(Bacteria(x) -> (DiverseAndAbundantOrganisms(x) & OnPlanet(x)))"]}
{"id": "eqasc_validation_1609", "nl": "Earth is a world of water.", "fol": "", "prediction": ["all x.(Earth(x) -> WorldOfWater(x))", "Earth is a WorldOfWater(Earth)", "all x.(Earth(x) -> WorldOfWater(x))", "(WorldOfWater(Earth) & WorldOfWater(Earth))", "all x y.((Earth(x) & Water(y)) -> WorldOf(x,y))", "(WorldOfWater(Earth) & -WorldOfWater(Earth))", "all x.(Earth(x) -> WorldOfWater(x))", "all x.(Earth(x) -> WaterWorld(x))", "(WealthOfWater(Earth) & WorldOfWater(Earth))", "all x y.((Earth(x) & WorldOfWater(y)) -> Water(x))", "all x y.((Earth(x) & Water(y)) -> WorldOf(x,y))", "all x.(Earth(x) -> WorldOfWater(x))", "all x.(Earth(x) -> WorldOfWater(x))", "exists x.(Earth(x) & Water(x))", "exists x.(Earth(x) & WorldOfWater(x))", "exists x.(Earth(x) & WorldOfWater(x))"]}
{"id": "eqasc_validation_1610", "nl": "Bacteria is the most diverse and abundant group of organisms in the world.", "fol": "", "prediction": ["all x.(Bacteria(x) -> (DiverseAndAbundantOrganisms(x) & InWorld(x)))", "all x y.((Bacteria(x) & Organism(y)) -> (Diverse(x,y) & Abundant(x,y)))", "all x.(Bacteria(x) -> (DiverseOrganism(x) & AbundantOrganism(x)))", "(DiverseAndAbundantOrganisms(bacteria) -> MostDiverseAndAbundantOrganismsInWorld(bacteria))", "all x.(Bacteria(x) -> (Diverse(x) & Abundant(x) & Organism(x) & InWorld(x)))", "(DiverseAndAbundantOrganism(bacteria) -> MostDiverseAndAbundantOrganism(bacteria,world))", "all x y z.((Bacteria(x) & Organism(y) & Organism(z) & DiverseAndAbundant(x,y,z)) -> InWorld(x))", "all x y.((Bacteria(x) & Organism(y)) -> (Diverse(x,y) & Abundant(x,y)))", "all x.(Bacteria(x) -> (DiverseAndAbundantOrganisms(x) & InWorld(x)))", "all x y.((Bacteria(x) & Organism(y)) -> (Diverse(x) & Abundant(x)))", "all x.(Bacteria(x) -> (DiverseAndAbundantOrganisms(x) & InWorld(x)))", "all x.(Bacteria(x) -> (DiverseOrganism(x) & AbundantOrganism(x)))", "all x y.((Bacteria(x) & Organism(y)) -> (Diverse(y) & Abundant(y)))", "all x.(Bacteria(x) -> (Diverse(x) & Abundant(x) & InWorld(x)))", "all x.(Bacteria(x) -> (MostDiverseAndAbundantOrganismsInWorld(x)))", "all x.(Bacteria(x) -> (DiverseOrganism(x) & AbundantOrganism(x)))"]}
{"id": "eqasc_validation_1611", "nl": "prokaryotic cells are the most diverse and abundant group of organisms on Earth", "fol": "", "prediction": ["all x.(ProkaryoticCell(x) -> (DiverseAndAbundantOrganisms(x) & OnEarth(x)))", "all x y.((ProkaryoticCell(x) & Earth(y)) -> (DiverseAndAbundantOrganisms(x,y) & On(x,y)))", "(DiverseAndAbundantOrganisms(prokaryoticCells) & OnEarth(prokaryoticCells))", "all x.(ProkaryoticCells(x) -> (DiverseAndAbundantOrganisms(x) & OnEarth(x)))", "all x y z.((ProkaryoticCell(x) & Earth(y) & Earth(z)) -> (DiverseAndAbundantOrganism(x,y,z) & On(x,y)))", "all x.(ProkaryoticCell(x) -> (DiverseAndAbundantOrganisms(x) & OnEarth(x)))", "all x y.((ProkaryoticCell(x) & Earth(y)) -> (DiverseAndAbundantOrganisms(x,y) & MostAbundantOrganisms(x,y)))", "all x.(ProkaryoticCell(x) -> (DiverseOrganism(x) & AbundantOrganism(x) & OnEarth(x)))", "all x.((Organism(x) & DiverseAndAbundant(x)) -> ProkaryoticCells(x))", "all x y z.((ProkaryoticCell(x) & Organism(y) & Earth(z)) -> (DiverseAndAbundant(x,y,z) & On(y,z)))", "all x y.((ProkaryoticCell(x) & Organism(y)) -> (Diverse(x,y) & Abundant(x,y)))", "(DiverseAndAbundantOrganisms(prokaryoticCells) & OnEarth(prokaryoticCells))", "all x.(ProkaryoticCells(x) -> (DiverseAndAbundantOrganisms(x) & OnEarth(x)))", "all x.(ProkaryoticCells(x) -> (DiverseOrganism(x) & AbundantOrganism(x) & OnEarth(x)))", "all x y.((ProkaryoticCell(x) & Earth(y)) -> (DiverseAndAbundant(x,y) & Organism(x,y)))", "all x.(ProkaryoticCell(x) -> (DiverseAndAbundantOrganisms(x) & OnEarth(x)))"]}
{"id": "eqasc_validation_1612", "nl": "Hermit crabs use the shells of dead snails for homes.", "fol": "", "prediction": ["all x y.((HermitCrab(x) & DeadSnail(y)) -> UsesShellForHome(x,y))", "all x y z.((HermitCrab(x) & DeadSnail(y) & Shell(z)) -> UsesForHome(x,y,z))", "all x.(HermitCrab(x) -> (UsesShellsOfDeadSnails(x) & ForHomes(x)))", "(UsesShellsOfDeadSnails(hermitCrab))", "all x y.((HermitCrab(x) & DeadSnail(y)) -> UsesShellForHomes(x,y))", "all x.(HermitCrab(x) -> UsesShellsOfDeadSnails(x))", "all x y z.((HermitCrab(x) & DeadSnail(y) & Shell(z)) -> UsesForHomes(x,y,z))", "(all x.(HermitCrab(x) -> UsesCellsOfDeadSnails(x)))", "all x.(HermitCrab(x) -> (UsesShelledDeadSnails(x) & ForHomes(x)))", "all x y.((HermitCrab(x) & DeadSnail(y)) -> UsesForHomes(x,y))", "all x.(HermitCrab(x) -> UsesShellsOfDeadSnails(x))", "all x y z.((HermitCrab(x) & DeadSnail(y) & Shell(z)) -> UsesForHome(x,y,z))", "all x.(HermitCrab(x) -> (UsesShellsOfDeadSnails(x) & ForHomes(x)))", "all x y.((HermitCrab(x) & DeadSnail(y)) -> UsesCellsForHomes(x,y))", "all x.(HermitCrab(x) -> (UsesShellsOfDeadSnails(x) & ForHomes(x)))", "all x y.((HermitCrab(x) & DeadSnail(y)) -> UsesShell(x,y))"]}
{"id": "eqasc_validation_1613", "nl": "Students live at home or in group homes.", "fol": "", "prediction": ["all x.(Student(x) -> (LivesAtHome(x) | LivesInGroupHome(x)))", "all x y.((Student(x) & (Home(y) | GroupHome(y))) -> LivesAt(x,y))", "all x.(Student(x) -> (LivesAtHome(x) | LivesInGroupHome(x)))", "all x y.((Student(x) & (Home(y) | GroupHome(y))) -> LivesAt(x,y))", "(LivesAtHome(Student,Home) | LivesInGroupHouses(Student,Home))", "all x.(Student(x) -> (LivesAtHome(x) | LivesInGroupHomes(x)))", "all x y.((Student(x) & Student(y)) -> (LivesAtHome(x,y) | LivesInGroupHome(x,y)))", "all x y.((Student(x) & (Home(y) | GroupHome(y))) -> LivesAt(x,y))", "all x.(Student(x) -> (LivesAtHome(x) | LivesInGroupHome(x)))", "all x y.((Student(x) & Home(y)) | GroupHome(x,y)) -> LivesAt(x,y))", "all x.(Student(x) -> (LivesAtHome(x) | LivesInGroupHouses(x)))", "exists x.(Student(x) & LivesAtHome(x) & (LivesInGroupHome(x) | LivesInGroupHome(x))))", "exists x.(Student(x) & LivesAtHomeOrGroupHome(x))", "all x.(Student(x) -> (LivesAtHome(x) | LivesInGroupHomes(x)))", "exists x.(Student(x) & (LivingAtHome(x) | LivingInGroupHouses(x)))", "all x.(Student(x) -> (LivesAtHome(x) | LivesInGroupHouses(x)))"]}
{"id": "eqasc_validation_1614", "nl": "Hermits crabs use dead snails shells as their place to live.", "fol": "", "prediction": ["all x.(HermitCrab(x) -> UsesDeadSnailShells(x))", "all x y.((HermitCrab(x) & DeadSnail(y)) -> UsesAsPlaceToLive(x,y))", "(UsesDeadSnailShells(hermitscrab) & LivesIn(hermitscrab))", "all x y z.((HermitCrab(x) & DeadSnail(y) & Shell(z)) -> UsesAsPlaceToLive(x,y,z))", "all x.(HermitCrab(x) -> (UsesDeadSnailShells(x) & LivesIn(x)))", "all x.(HermitCrab(x) -> UsesDeadSnailShells(x))", "all x.((HermitCrab(x) & DeadSnail(x)) -> UsesAsPlaceToLive(x))", "(UsesDeadSnails(hermitCrab(hermit) & UsesCrabSnails(hermitCrab))", "all x y.((HermitCrab(x) & DeadSnail(y)) -> UsesAsPlaceToLive(x,y))", "all x y.((HermitCrab(x) & DeadSnail(y)) -> UsesCellsAsPlaceToLive(x,y))", "all x.((HermitCrab(x) & DeadSnail(x)) -> UsesCellsAsPlaceToLive(x))", "all x y z.((HermitCrab(x) & DeadSnail(y) & Shell(z)) -> UsesAsPlaceToLive(x,y,z))", "all x.(HermitCrab(x) -> UsesDeadSnails(x))", "all x.(HermitCrab(x) -> (UsesDeadSnails(x) & UsesCells(x)))", "all x y.((HermitCrab(x) & DeadSnail(y)) -> UsesAsPlaceToLive(x,y))", "all x.(HermitsCrab(x) -> UsesDeadSnailsCshells(x))"]}
{"id": "eqasc_validation_1615", "nl": "Most crabs are scavengers, such as the typical hermit crab .", "fol": "", "prediction": ["all x.(Crab(x) -> Scavenger(x))", "all x y.((Crab(x) & Scavenger(y)) -> (HermitCrab(x) | HermitCrab(y)))", "all x.(Crab(x) -> (Scavenger(x) | HermitCrab(x)))", "(all x.(Crab(x) -> Scavenger(x)))", "all x y.((Crab(x) & HermitCrab(y)) -> Scavenger(x))", "exists x y z.(Crab(x) & Scavenger(y) & HermitCrab(z) & KnownFor(x,y,z))", "exists x y.(Crab(x) & Scavenger(y) & HermitCrab(x))", "all x.(Crab(x) -> Scavenger(x))", "all x y.((Crab(x) & Scavenger(x)) -> (HermitCrab(y) | HermitCrab(y)))", "all x.(Crab(x) -> (Scavenger(x) | HermitCrab(x)))", "exists x y z.(Crab(x) & Scavenger(y) & HermitCrab(z) & Scavenger(z))", "(all x.(Crab(x) -> Scavenger(x)))", "(all x.(Crab(x) -> Scavenger(x)))", "all x.(Crab(x) -> Scavenger(x))", "all x.(Crab(x) -> (Scavenger(x) | HermitCrab(x)))", "all x.(Crab(x) -> Scavenger(x))"]}
{"id": "eqasc_validation_1616", "nl": "some scavengers use the shells of dead snails for homes", "fol": "", "prediction": ["exists x y.(Scavenger(x) & Shell(y) & DeadSnail(z) & UsesForHome(x,y,z))", "exists x y z.(Scavenger(x) & Shell(y) & DeadSnail(z) & UsesForHome(x,y,z))", "exists x.(Scavenger(x) & UsesShellsOfDeadSnails(x) & ForHomes(x))", "exists x y.(Scavenger(x) & Shell(y) & DeadSnail(y) & UsesForHome(x,y))", "exists x y z.(Scavenger(x) & Shell(y) & DeadSnail(z) & UsesForHome(x,y,z))", "exists x y.(Scavenger(x) & DeadSnail(y) & UsesShell(x,y))", "all x y z.((Scavenger(x) & DeadSnail(y) & Shell(z)) -> UsesForHome(x,y,z))", "exists x.(Scavenger(x) & UsesShellsOfDeadSnails(x) & ForHomes(x))", "exists x.(Scavenger(x) & UsesShavers(x) & ShellsOfDeadSnails(x) & Homes(x))", "(exists x.(Scavenger(x) & UsesShellsOfDeadSnails(x)) & ForHomes(x))", "exists x y z.(Scavenger(x) & DeadSnail(y) & Shell(z) & UsesForHome(x,y,z))", "exists x.(Scavenger(x) & Shell(x) & DeadSnail(x) & UsesForHomes(x))", "all x y z.((Scavenger(x) & DeadSnail(y) & Shell(z)) -> UsesForHome(x,y,z))", "exists x y.(Scavenger(x) & Shell(y) & DeadSnail(z) & UsesForHomes(x,y,z))", "exists x.(Scavenger(x) & UsesShellsOfDeadSnails(x) & Homes(x))", "exists x.(Scavenger(x) & UsesSnailShells(x) & DeadSnail(x) & ForHomes(x))"]}
{"id": "eqasc_validation_1617", "nl": "Gastropods are snails and slugs.", "fol": "", "prediction": ["all x.(Gastropod(x) -> (Snake(x) | Slug(x)))", "all x y.((Gastropod(x) & Snail(y)) -> (Snail(x) | Slug(x)))", "all x.(Gastropod(x) -> (Snail(x) | Slug(x)))", "(all x.(Gastropod(x) -> Squirrel(x)) & all y.(Slug(y) -> Slug(y)))", "all x y.((Gastropod(x) & Snake(y)) -> (Snake(x) | Slug(y)))", "(all x.(Gastropod(x) -> (Snail(x) | Slug(x))))", "all x.(Gastropod(x) -> (Snake(x) | Slug(x)))", "all x.(Gastropod(x) -> (Snail(x) & Slug(x)))", "all x y.((Gastropod(x) & Snail(y)) -> (Snail(x) | Slug(x)))", "(all x.(Gastropod(x) -> (Snake(x) | Slug(x))))", "all x.(Gastropod(x) -> (Snake(x) | Slug(x)))", "all x.(Gastropod(x) -> (Snake(x) | Slug(x)))", "all x.(Gastropod(x) -> (Snail(x) & Slug(x)))", "exists x.(Gastropod(x) & Snail(x) & Slug(x))", "all x.(Gastropod(x) -> (Snake(x) | Slug(x)))", "all x.(Gastropod(x) -> (Snail(x) & Slug(x)))"]}
{"id": "eqasc_validation_1618", "nl": "Hermit crabs use shells of gastropods for homes.", "fol": "", "prediction": ["all x y.((HermitCrab(x) & Gastropod(y)) -> UsesShellForHomes(x,y))", "all x.(HermitCrab(x) -> UsesShell(x,Gastropods))", "all x y z.((HermitCrab(x) & Shell(y) & Gastropod(z)) -> UsesForHomes(x,y,z))", "all x.(HermitCrab(x) -> (UsesShellsOfGastropods(x) & UsesShellsForHomes(x)))", "(UsesShell(hermitCrab(hermitCrab) & Gastropod(hermit))", "all x y.((HermitCrab(x) & Gastropod(y)) -> UsesShell(x,y))", "(all x.(HermitCrab(x) -> UsesGastropodShell(x)))", "all x y.((HermitCrab(x) & Shell(y)) -> UsesForHomes(x,y))", "all x.(HermitCrab(x) -> UsesShellOfGastropods(x))", "all x y z.((HermitCrab(x) & Shell(y) & Gastropod(z)) -> UsesForHome(x,y,z))", "all x.(HermitCrab(x) -> (UsesShell(x,Gastropod) & UsesShell(x,Gastropod)))", "all x.(HermitCrab(x) -> (UsesShellsOfGastrophods(x) & UsesShellsForHomes(x)))", "all x.(HermitCrab(x) -> UsesShellsOfGastrophods(x))", "all x y.((HermitCrab(x) & Gastropod(y)) -> UsesShellForHomes(x,y))", "all x y z.((HermitCrab(x) & Shell(y) & Gastropod(z)) -> UsesForHomes(x,y,z))", "all x.(HermitCrab(x) -> UsesShellOfGastropods(x))"]}
{"id": "eqasc_validation_1619", "nl": "crabs use shells of dead snails for homes and are scavengers ", "fol": "", "prediction": ["all x.(Crab(x) -> (UsesShellsOfDeadSnails(x) & Scavenger(x)))", "all x y z.((Crab(x) & Shell(y) & DeadSnail(z)) -> (UsesForHome(x,y,z) & Scavenger(x)))", "all x y.((Crab(x) & DeadSnail(y)) -> (UsesShells(x,y) & Scavenger(x)))", "all x y z.((Crab(x) & DeadSnail(y) & Shell(z)) -> (UsesForHomes(x,y) & Scavenger(x)))", "all x.(Crab(x) -> (UsesShellsOfDeadSnails(x) & Scavenger(x)))", "(all x y.(Crab(x) -> UsesShell(x,y)) & (Crab(y) -> UsesShell(y,z)) & (Crab(z) -> UsesShell(z,y))) & Scavenger(x))", "(all x.(Crab(x) -> UsesSnailShell(x)) & Scavenger(x))", "all x y.((Crab(x) & DeadSnail(y)) -> (UsesShell(x,y) & Scavenger(x)))", "all x.(Crab(x) -> (UsesShavers(x) & UsesShellsOfDeadSnails(x) & Scavenger(x)))", "(all x.(Crab(x) -> UsesShelfOfDeadSnails(x)) & Scavenger(x))", "all x y z.((Crab(x) & Shell(y) & DeadSnail(z) & UsesForHome(x,y,z)) -> Scavenger(x))", "all x.(Crab(x) -> (UsesShellsOfDeadSnails(x) & Scavenger(x)))", "all x y.((Crab(x) & DeadSnail(y)) -> (UsesShells(x,y) & Scavenger(x)))", "all x.(Crab(x) -> (UsesShellsOfDeadSnails(x) & Scavenger(x)))", "all x y z.((Crab(x) & DeadSnail(y) & Shell(z)) -> (UsesForHome(x,y,z) & Scavenger(x)))", "all x.(Crab(x) -> (UsesShellsOfDeadSnails(x) & Scavenger(x)))"]}
{"id": "eqasc_validation_1620", "nl": "Hermit crabs find shells.", "fol": "", "prediction": ["all x.(HermitCrab(x) -> FindsShells(x))", "all x y.((HermitCrab(x) & Shell(y)) -> Finds(x,y))", "all x.(HermitCrab(x) -> FindsShells(x))", "(FindsShells(hermitcrab) & HermitCrab(hermitcrab))", "all x y z.((HermitCrab(x) & Shell(y) & Shell(z)) -> Finds(x,y,z))", "all x y.((HermitCrab(x) & Shell(y)) -> Finds(x,y))", "all x.(HermitCrab(x) -> FindsShells(x))", "all x.(HermitCrab(x) -> FindsShell(x))", "all x y.((HermitCrab(x) & Shell(y)) -> Finds(x,y))", "(FindsShells(hermitcrab))", "all x.(HermitCrab(x) -> FindsShells(x))", "all x y.((HermitCrab(x) & Shell(y)) -> Finds(x,y))", "exists x.(HermitCrab(x) & Shell(y) & Finds(x,y))", "all x.(HermitCrab(x) -> FindsShells(x))", "exists x.(HermitCrab(x) & Shell(x))", "all x.(HermitCrab(x) -> FindsShells(x))"]}
{"id": "eqasc_validation_1621", "nl": "hermit crabs find dead snails to use as homes", "fol": "", "prediction": ["all x y z.((HermitCrab(x) & DeadSnail(y) & DeadSnail(z)) -> FindsToUseAsHome(x,y,z))", "all x y.((HermitCrab(x) & DeadSnail(y)) -> FindsToUseAsHome(x,y))", "all x.(HermitCrab(x) -> (FindsDeadSnails(x) & UsesAsHome(x)))", "all x y z.((HermitCrab(x) & DeadSnail(y) & Snail(z)) -> FindsToUseAsHome(x,y,z))", "hermit crabs finddeadSnails(hermitCrabs) to use as homes(hermitCrabs))", "(HermitCrab(hermitCrab) & FindsDeadSnails(hermitCrabs) & UsesAsHomes(hermitCrabs))", "all x y.((HermitCrab(x) & DeadSnail(y)) -> FindsForHome(x,y))", "all x y z.((HermitCrab(x) & DeadSnail(y) & DeadSnail(z)) -> FindsForHome(x,y,z))", "all x.(HermitCrab(x) -> (FindsDeadSnails(x) & UsesAsHome(x)))", "all x y z.((HermitCrab(x) & DeadSnail(y) & Snail(z) & Finds(x,y)) -> UsesAsHome(x,z))", "all x.((HermitCrab(x) & FindsDeadSnails(x)) -> UsesAsHome(x))", "all x y.((HermitCrab(x) & DeadSnail(y)) -> FindsToUseAsHome(x,y))", "all x.(HermitCrab(x) -> (FindsDeadSnails(x) & UsesAsHomes(x)))", "all x y z.((HermitCrab(x) & DeadSnail(y) & Home(z)) -> FindsToUseAsHome(x,y,z))", "all x y.((HermitCrab(x) & DeadSnail(y)) -> FindsForHome(x,y))", "all x.(HermitCrab(x) -> (FindsDeadSnails(x) & UsesAsHome(x)))"]}
{"id": "eqasc_validation_1622", "nl": "Hermit crabs have unusual homes.", "fol": "", "prediction": ["all x.(HermitCrab(x) -> UnusualHome(x))", "all x.(HermitCrab(x) -> UnusuallyHouses(x))", "all x y.((HermitCrab(x) & Home(y)) -> Unusual(x,y))", "(UnusuallyHouses(hermitCrab(hermitCrab))", "all x.(HermitCrab(x) -> UnusualHome(x))", "all x.(HermitCrab(x) -> HasUnusuallyHouses(x))", "all x y.((HermitCrab(x) & Home(y)) -> Unusual(x,y))", "all x.(HasUnusuallyHouses(x) -> HermitCrab(x))", "all x y.((HermitCrab(x) & Home(y)) -> UnusuallyHouses(x,y))", "all x.(HermitCrab(x) -> UnusuallyHasHome(x))", "all x.(HermitCrab(x) -> HasUnusualHomes(x))", "all x y.((HermitCrab(x) & House(y)) -> Unusual(x))", "all x y.((HermitCrab(x) & Home(y)) -> UnusuallyHas(x,y))", "all x.(HermitCrab(x) -> UnusualHomes(x))", "all x.(HermitCrab(x) -> HasUnusuallyHouses(x))", "exists x.(HermitCrab(x) & HasUnusuallyHouses(x))"]}
{"id": "eqasc_validation_1623", "nl": "dead snail shells are unusual homes", "fol": "", "prediction": ["all x.((DeadSnailShell(x) & UnusuallyHome(x)) -> UnusualHome(x))", "all x.((DeadSnailShell(x) & UnusualHome(x)) -> DeadSnailShell(x))", "all x y z.((DeadSnailShell(x) & Snail(y) & Home(z)) -> UnusuallyHome(x,y,z))", "all x y.((DeadSnailShell(x) & Home(y)) -> UnusuallyHome(x))", "all x y.((DeadSnailShell(x) & DeadSnail(y)) -> UnusuallyHome(x))", "(UnusuallyHomes(snailshells) & Dead(snailshells) & UnusualHomes(snailshells))", "all x.(DeadSnailShell(x) -> UnusuallyHome(x))", "all x.((SnailShell(x) & Dead(x)) -> UnusuallyHome(x))", "all x.((DeadSnailShell(x) & UnusualHome(x)) -> (DeadSnailShell(x) & UnusualHome(x)))", "all x.((DeadSnailShell(x) & UnusuallyHome(x)) -> UnusualHome(x))", "all x y z.((DeadSnailShell(x) & Shell(y) & Home(z)) -> UnusuallyHome(x,y,z))", "(UnusuallyHomes(deadSnailShelles) & DeadSnailShelles(s) & UnusualHomes(s))", "all x y.((DeadSnailShell(x) & Shell(y)) -> UnusuallyHome(x,y))", "all x.(DeadSnailShell(x) -> UnusualHome(x))", "all x y.((DeadSnailShell(x) & House(y) & UnusuallyHome(y)) -> UnusualHome(x,y))", "all x.(DawnSnailShell(x) -> UnusuallyHouses(x))"]}
{"id": "eqasc_validation_1624", "nl": "Hermit crabs live in shells and are scavengers.", "fol": "", "prediction": ["all x.(HermitCrab(x) -> (LivesInShell(x) & Scavenger(x)))", "all x y.((HermitCrab(x) & Shell(y)) -> (LivesIn(x,y) & Scavenger(x)))", "all x.(HermitCrab(x) -> (LivesInShells(x) & Scavenger(x)))", "(LivesInShells(hermitCrab) & Scavenger(hermitCrab))", "all x.(HermitCrab(x) -> (LivesInShell(x) & Scavenger(x)))", "all x y.((HermitCrab(x) & Shell(y)) -> (LivesIn(x,y) & Scavenger(x)))", "(all x.(HermitCrab(x) -> LivesInShelled(x)) & Scavenger(x))", "all x.(HermitCrab(x) -> (LivesInShells(x) & Scavenger(x)))", "all x y.((HermitCrab(x) & Shell(y)) -> (LivesIn(x,y) & Scavenger(x)))", "all x.(HermitCrab(x) -> (LivesInShells(x) & Scavenger(x)))", "all x.(HermitCrab(x) -> (LivesInShells(x) & Scavenger(x)))", "all x.(HermitCrab(x) -> (LivesInShell(x) & Scavenger(x)))", "all x y.((HermitCrab(x) & Shell(y)) -> (LivesIn(x,y) & Scavenger(x)))", "all x.(HermitCrab(x) -> (LivesInShells(x) & Scavenger(x)))", "exists x.(HermitCrab(x) & LivesInShell(x) & Scavenger(x))", "all x.(HermitCrab(x) -> (LivesInShell(x) & Scavenger(x)))"]}
{"id": "eqasc_validation_1625", "nl": "Hermit crabs are scavengers for dead snails", "fol": "", "prediction": ["all x.(HermitCrab(x) -> (ScavengerForDeadSnails(x) & ScavengerForDeadSnails(x)))", "all x y.((HermitCrab(x) & DeadSnail(y)) -> ScavengerFor(x,y))", "all x y z.((HermitCrab(x) & DeadSnail(y) & ScavengerFor(x,y)) -> (ScavengerFor(x,z) & DeadSnail(z)))", "(Scavenger(hermitCrab) & ForDeadSnails(hermitCrab))", "(ScavengerForDeadSnails(hermitCrabs) & HermitCrabs(hermitCrabs))", "all x.(HermitCrab(x) -> (ScavengerForDeadSnails(x) & ForDeadSnails(x)))", "all x y.((HermitCrab(x) & DeadSnail(y)) -> ScavengerFor(x,y))", "all x.(HermitCrab(x) -> (Scavenger(x) & ForDeadSnails(x)))", "all x y z.((HermitCrab(x) & DeadSnail(y) & Snail(z)) -> ScavengerFor(x,y,z))", "all x.(HermitCrab(x) -> (ScavengerForDeadSnails(x) & ScavengerForDeadSnails(x)))", "all x.(HermitCrab(x) -> (ScavengerForDeadSnails(x) & ForDeadSnails(x)))", "all x y.((HermitCrab(x) & DeadSnail(y)) -> ScavengerFor(x,y))", "all x.(HermitCrab(x) -> (Scavenger(x) & ForDeadSnails(x)))", "all x.(HermitCrab(x) -> ScavengerForDeadSnails(x))", "all x y.((HermitCrab(x) & DeadSnake(y)) -> ScavengerFor(x,y))", "All x.(HermitCrab(x) -> ScavengerForDeadSnails(x))"]}
{"id": "eqasc_validation_1626", "nl": "volcanic ash in the atmosphere decreases the temperature by blocking the sun", "fol": "", "prediction": ["all x y.((VolcanicAsh(x) & Atmosphere(y)) -> (DecreasesTemperature(x,y) & BlocksSun(x,y)))", "all x y z.((VolcanicAsh(x) & Atmosphere(y) & Sun(z)) -> (DecreasesTemperatureByBlocking(x,y,z)))", "all x.((VolcanicAsh(x) & Atmosphere(x)) -> (DecreasesTemperature(x) & BlocksSun(x)))", "(DecreasesTemperatureByBlockingSunlight(volcanicAshInAtmosphere))", "all x y.((VolcanicAsh(x) & Atmosphere(y)) -> (DecreasesTemperatureByBlockingSunlight(x,y)))", "all x.((VolcanicAsh(x) & Atmosphere(x)) -> DecreasesTemperatureByBlockingSun(x))", "all x y z.((VolcanicAsh(x) & Atmosphere(y) & Temperature(z)) -> (DecreasesTemperatureByBlockingSunlight(x,y,z)))", "all x.((VolcanicAsh(x) & Atmosphere(x) & BlocksSun(x)) -> DecreasesTemperatureByDecreasesTemperatureByDecreasesTemperatureByDecreasesTemperatureByDecreasesTemperatureByDecreasesTemperatureByDecreasesTemperatureByDecreasesTemperatureByDecreasesTemperatureByDecreasesTemperatureB", "all x y.((VolcanicAsh(x) & Atmosphere(y)) -> (DecreasesTemperature(x,y) & BlocksSunlight(x,y)))", "all x.((VolcanicAsh(x) & Atmosphere(x)) -> (DecreasesTemperatureByBlockingSunlight(x)))", "all x y z.((VolcanicAsh(x) & Atmosphere(y) & Sun(z)) -> (DecreasesTemperatureByBlocking(x,y,z) & Sun(y,z)))", "All x.(VolcanicAsh(x) -> (DecreasesTemperatureByBlockingSunlight(x) & BlocksSunlight(x)))", "all x y.((VolcanicAsh(x) & Atmosphere(y)) -> DecreasesTemperatureByBlockingSunlight(x,y))", "all x y.((VolcanicAsh(x) & Atmosphere(y) & BlocksSun(x,y)) -> DecreasesTemperatureByBlockingSun(x,y))", "all x.((VolcanicAsh(x) & Atmosphere(x)) -> DecreasesTemperatureByBlockingSunlight(x))", "all x.((VolcanicAsh(x) & InAtmosphere(x)) -> DecreasesTemperatureByBlockingSun(x))"]}
{"id": "eqasc_validation_1627", "nl": "Examples of such aerosols include dust, volcanic ash, and smoke.", "fol": "", "prediction": ["all x.(Aerosol(x) -> (Dust(x) | VolcanicAsh(x) | Smoke(x)))", "all x.((Aerosol(x) & Dust(x) & VolcanicAsh(x) & Smoke(x)) -> Aerosol(x))", "(ExamplesOfAerosols(a) & Dust(a) & VolcanicAsh(a) & Smoke(a))", "all x y z.((Aerosol(x) & Dust(y) & VolcanicAsh(z)) -> (Dust(y) | Smoke(y)))", "exists x.(Aerosol(x) & Dust(x) & VolcanicAsh(x) & Smoke(x))", "(exists x.(Aerosol(x) & Dust(x) & VolcanicAsh(x) & Smoke(x)))", "all x.(Aerosol(x) -> (Dust(x) | VolcanicAsh(x) | Smoke(x)))", "(ExamplesOfAerosols(a) & Dust(a) & VolcanicAsh(b) & Smoke(c))", "all x.((Aerosol(x) & Dust(x) & VolcanicAsh(x) & Smoke(x)) -> Aerosol(x))", "all x.(Airsol(x) -> (Dust(x) | VolcanicAsh(x) | Smoke(x)))", "exists x.(Aerosol(x) & Dust(x) & VolcanicAsh(x) & Smoke(x))", "(all x.(Aerosol(x) -> (Dust(x) | VolcanicAsh(x) | Smoke(x))))", "(ExamplesOfAerosols(x) & Dust(x) & VolcanicAsh(x) & Smoke(x))", "all x.((Aerosol(x) & Dust(x) & VolcanicAsh(x) & Smoke(x)) -> Aerosol(x))", "exists x.(Airsol(x) & (Dust(x) | VolcanicAsh(x) | Smoke(x)))", "exists x.(Aerosol(x) & (Dust(x) | VolcanicAsh(x) | Smoke(x)))"]}
{"id": "eqasc_validation_1628", "nl": "some aerosols can decrease temperatures by blocking the sun", "fol": "", "prediction": ["exists x.(Aerosol(x) & CanDecreaseTemperaturesByBlockingSun(x))", "exists x y.(Aerosol(x) & Aerosol(y) & CanDecreaseTemperaturesByBlockingSun(x,y))", "exists x.(Aerosol(x) & CanDecreaseTemperatures(x) & BlocksSun(x))", "exists x.(Airsol(x) & CanDecreaseTemperaturesByBlockingSun(x))", "all x y.((Aerosol(x) & Sun(y)) -> (DecreasesTemperatures(x,y) & BlocksSun(x,y)))", "(exists x.(Aerosol(x) & CanDecreaseTemperatures(x)) & BlocksSun(x))", "all x y z.((Aerosol(x) & Sun(y) & Temperature(z) & Blocks(x,y)) -> Decreases(x,z))", "exists x y.(Aerosol(x) & Aerosol(y) & CanDecreaseTemperaturesByBlockingSun(x,y))", "exists x.(Aerosol(x) & DecreaseTemperaturesByBlockingSun(x))", "exists x.(Aerosol(x) & CanDecreaseTemperaturesByBlockingSun(x))", "all x y.((Aerosol(x) & Sun(y)) -> (DecreasesTemperatures(x,y) & BlocksSun(x)))", "exists x.(Airsol(x) & CanDecreaseTemperaturesByBlockingSun(x))", "exists x.(Aerosol(x) & CanDecreaseTemperature(x) & BlocksSun(x))", "exists x.(Aerosol(x) & (CanDecreaseTemperatures(x) | BlocksSun(x)))", "exists x.(Airsol(x) & CanDecreaseTemperaturesByBlockingSun(x))", "exists x.(Aerosol(x) & DecreasesTemperatures(x) & BlocksSun(x))"]}
{"id": "eqasc_validation_1629", "nl": "Eruptive products of Hawaiian volcanoes span a wide range of temperatures.", "fol": "", "prediction": ["all x.((EruptiveProduct(x) & HawaiianVolcano(x)) -> SpreadsWideRangeOfTemperatures(x))", "all x y.((EruptiveProduct(x) & HawaiianVolcano(y)) -> (SpansWideRangeOfTemperatures(x,y)))", "all x.((EruptiveProducts(x) & HawaiianVolcano(x)) -> SpreadsWideRangeOfTemperatures(x))", "all x.((HawaiianVolcano(x) & EruptiveProduct(x)) -> SpreadsWideRangeOfTemperatures(x))", "all x y.((HawaiianVolcano(x) & EruptiveProduct(y)) -> (SpansWideRangeOfTemperatures(y)))", "all x.(EruptiveProduct(x) -> (HawaiianVolcano(x) & WideRangeOfTemperatures(x)))", "all x y z.((EruptiveProduct(x) & HawaiianVolcano(y) & Temperature(z)) -> SpreadsWideRange(x,y,z))", "all x.((Volcano(x) & Hawaiian(x)) -> SpreadsWideRangeOfTemperatures(x))", "all x y.((Volcano(x) & Hawaiian(y)) -> (EruptiveProduct(x,y) & WideRangeOfTemperatures(x,y)))", "all x y.((EruptiveProduct(x) & HawaiianVolcano(y)) -> SpreadsWideRangeOfTemperatures(x,y))", "all x.((EruptiveProduct(x) & HawaiianVolcano(x)) -> SpreadsWideRangeOfTemperatures(x))", "all x.((HawaiianVolcano(x) & EruptiveProducts(x)) -> SpreadsWideRangeOfTemperatures(x))", "all x.(EruptiveProductsOfHawaiianVolcanoes(x) -> SpreadsWideRangeOfTemperatures(x))", "(all x.(HawaiianVolcano(x) -> EruptiveProducts(x)))", "all x y z.((EruptiveProduct(x) & HawaiianVolcano(y) & Temperature(z)) -> SpreadsWideRange(x,y,z))", "all x y.((EruptiveProduct(x) & HawaiianVolcano(y)) -> (SpansWideRangeOfTemperatures(x,y)))"]}
{"id": "eqasc_validation_1630", "nl": "eruptive products block the sun", "fol": "", "prediction": ["all x.(EruptiveProduct(x) -> BlocksSun(x))", "all x y.((EruptiveProduct(x) & Sun(y)) -> Blocks(x,y))", "all x.(EruptiveProducts(x) -> BlocksSun(x))", "all x y z.((EruptiveProduct(x) & Sun(y) & Sun(z)) -> Blocks(x,y,z))", "all x y.((EruptiveProduct(x) & Sun(y)) -> Blocks(x,y))", "all x.((EruptiveProduct(x) & BlockSun(x)) -> BlockSun(x))", "all x.((EruptiveProduct(x) & BlocksSun(x)) -> BlocksSun(x))", "all x.(EruptiveProductsBlockSun(x) -> BlocksSun(x))", "all x y z.((EruptiveProduct(x) & Sun(y) & Sun(z)) -> Blocks(x,y,z))", "all x y.((EruptiveProduct(x) & Sun(y) & Blocks(x,y)) -> Blocks(x,y))", "all x y.((EruptiveProduct(x) & Sun(y)) -> Blocks(x,y))", "all x.(EruptiveProduct(x) -> BlocksSun(x))", "(all x.(EruptiveProduct(x) -> BlocksSun(x)))", "all x.((EruptiveProduct(x) & BlocksSun(x)) -> BlocksSun(x))", "all x y.((EruptiveProduct(x) & Sun(y) & Blocks(x,y)) -> Blocks(x,y))", "(all x.(EruptiveProduct(x) -> BlocksSun(x)))"]}
{"id": "eqasc_validation_1631", "nl": "With increasing cloud blocking the sun, temperatures drop considerably.", "fol": "", "prediction": ["all x.((CloudBlocksSun(x) & Increases(x)) -> TemperaturesDrop(x))", "all x y.((Cloud(x) & Sun(y) & Increases(x,y)) -> TemperatureDrop(x))", "all x.((CloudBlocksSun(x) & IncreasesCloud(x)) -> TemperaturesDrop(x))", "all x.((CloudBlocking(x) & Increased(x)) -> TemperaturesDrop(x))", "all x y.((Cloud(x) & Sun(y) & Increases(x,y)) -> TemperaturesDrop(x))", "all x y z.((Cloud(x) & Sun(y) & Temperature(z) & Increases(x,y) & Blocks(x,y)) -> Drops(z))", "(IncreasedCloudBlockingSun(x) -> TemperatureDrop(x))", "all x.((IncreasingCloudBlocksSun(x) & TemperaturesDrop(x)) -> Significantly(x))", "all x y.((Cloud(x) & Sun(y)) -> Increases(x,y))", "all x.((CloudBlocksSun(x) & Increased(x)) -> TemperatureDrop(x))", "(IncreasedCloudBlockingSun(x) -> TemperatureDrop(x))", "all x.(IncreasedCloudBlockingSun(x) -> TemperatureDrop(x))", "all x y z.((Cloud(x) & Sun(y) & Temperature(z) & Increases(x,y)) -> Drops(z))", "all x y.((Cloud(x) & Sun(y) & Increased(x,y)) -> TemperatureDrop(x))", "all x y.((Cloud(x) & Sun(y)) -> (Increases(x,y) & Blocks(x,y)))", "all x.((CloudBlocking(x) & Increases(x)) -> TemperaturesDirt(x))"]}
{"id": "eqasc_validation_1632", "nl": "Volcanic ash in the atmosphere increases clouds which block the sun.", "fol": "", "prediction": ["all x y.((VolcanicAsh(x) & Atmosphere(y)) -> IncreasesClouds(x,y))", "all x.(VolcanicAsh(x) -> IncreasesClouds(x))", "all x y z.((VolcanicAsh(x) & Atmosphere(y) & Cloud(z)) -> Increases(x,y,z))", "all x y.((VolcanicAsh(x) & Atmosphere(y)) -> IncreasesCloudsBlockingSun(x,y))", "(IncreasesClouds(volcanicAsh(volcanicAsh) & BlocksSun(volcanicAsh))", "all x.((VolcanicAsh(x) & Atmosphere(x)) -> IncreasesCloudsBlockingSun(x))", "all x.(VolcanicAsh(x) -> (IncreasesClouds(x) & BlocksSun(x)))", "all x.(VolcanicAsh(x) -> IncreasesClouds(x))", "all x y z.((VolcanicAsh(x) & Atmosphere(y) & Cloud(z) & BlocksSun(z)) -> Increases(x,y,z))", "all x.(VolcanicAshInAtmosphere(x) -> IncreasesClouds(x))", "all x y.((VolcanicAsh(x) & Atmosphere(y)) -> IncreasesClouds(x,y))", "all x y.((VolcanicAsh(x) & Atmosphere(y)) -> (IncreasesClouds(x,y) & BlocksSun(x,y)))", "all x.((VolcanicAsh(x) & Atmosphere(x)) -> IncreasesCloudsBlockingSun(x))", "all x y.((VolcanicAsh(x) & Atmosphere(y) & IncreasesClouds(x,y)) -> BlocksSun(x,y))", "all x y z.((VolcanicAsh(x) & Atmosphere(y) & Cloud(z)) -> Increases(x,z))", "all x.(VolcanicAsh(x) -> IncreasesClouds(x))"]}
{"id": "eqasc_validation_1633", "nl": "Volcanic ash spewed into the atmosphere can block part of the sun's radiation, cooling the air.", "fol": "", "prediction": ["all x.((VolcanicAsh(x) & SpewedIntoAtmosphere(x)) -> BlocksSunRadiation(x))", "all x y.((VolcanicAsh(x) & SpewedIntoAtmosphere(x)) -> BlocksSunRadiation(x,y))", "all x y z.((VolcanicAsh(x) & SpewedIntoAtmosphere(x) & Sun(y) & Air(z)) -> BlocksRadiation(x,y,z))", "all x.((VolcanicAsh(x) & SpewedIntoAtmosphere(x)) -> BlocksRadiation(x))", "all x.(VolcanicAsh(x) -> (SpewedIntoAtmosphere(x) & BlocksSunRadiation(x) & CoolsAir(x)))", "all x y.((VolcanicAsh(x) & SpewedIntoAtmosphere(x)) -> BlocksSunRadiation(x,y))", "all x y.((VolcanicAsh(x) & SpewedIntoAtmosphere(x)) -> (BlocksSunRadiation(x,y) & CoolsAir(y)))", "all x y z.((VolcanicAsh(x) & SpewedIntoAtmosphere(x) & Sun(y) & Air(z)) -> BlocksRadiationCooling(x,y,z))", "all x y z.((VolcanicAsh(x) & SpewedIntoAtmosphere(x) & SunRadiation(y) & Air(z)) -> Blocks(x,y,z))", "all x.(VolcanicAsh(x) -> (SpewedIntoAtmosphere(x) & BlocksRadiation(x) & CoolsAir(x)))", "all x.((VolcanicAsh(x) & SpewedIntoAtmosphere(x)) -> BlocksSunRadiation(x))", "all x.((VolcanicAsh(x) & SpewedIntoAtmosphere(x)) -> (BlocksSunRadiation(x) & CoolsAir(x)))", "all x y.((VolcanicAsh(x) & SpewedIntoAtmosphere(x) & Sun(y)) -> BlocksRadiation(x,y))", "all x.(VolcanicAsh(x) -> (SpewedIntoAtmosphere(x) & BlocksSunRadiation(x) & CoolsAir(x)))", "all x y.((VolcanicAsh(x) & SpewedIntoAtmosphere(x)) -> BlocksSunRadiation(x,y))", "all x.((VolcanicAsh(x) & SpewedIntoAtmosphere(x)) -> (BlocksSunRayming(x) & CoolsAir(x)))"]}
{"id": "eqasc_validation_1634", "nl": "Volcanic ash blocks the sun and cools the air", "fol": "", "prediction": ["all x y.((VolcanicAsh(x) & Sun(y)) -> (Blocks(x,y) & CoolsAir(x)))", "all x.(VolcanicAsh(x) -> (BlocksSun(x) & CoolsAir(x)))", "all x y z.((VolcanicAsh(x) & Sun(y) & Air(z)) -> (Blocks(x,y) & Cools(x,z)))", "(VolcanicAshBlocksSun(volcanicAsh) & CoolsAir(volcanicAsh))", "all x.(VolcanicAsh(x) -> (BlocksSun(x) & CoolsAir(x)))", "all x y.((VolcanicAsh(x) & Sun(y)) -> (Blocks(x,y) & CoolsAir(x)))", "all x y z.((VolcanicAsh(x) & Sun(y) & Air(z)) -> (Blocks(x,y) & Cools(x,z)))", "all x y.((VolcanicAsh(x) & Sun(y)) -> (BlocksSun(x,y) & CoolsAir(x,y)))", "all x.(VolcanicAsh(x) -> (BlocksSun(x) & CoolsAir(x)))", "all x y z.((VolcanicAsh(x) & Sun(y) & Air(z)) -> (Blocks(x,y) & Cools(x,z)))", "all x y.((VolcanicAsh(x) & Sun(y)) -> (BlocksSun(x,y) & CoolsAir(x,y)))", "all x.(VolcanicAsh(x) -> (BlocksSun(x) & CoolsAir(x)))", "all x.(VolcanicAsh(x) -> BlocksSunAndCoolsAir(x))", "all x y z.((VolcanicAsh(x) & Sun(y) & Air(z)) -> (Blocks(x,y) & Cools(x,z)))", "all x.(VolcanicAsh(x) -> (BlocksSun(x) & CoolsAir(x)))", "all x.(VolcanicAsh(x) -> (BlocksSun(x) & CoolsAir(x)))"]}
{"id": "eqasc_validation_1635", "nl": "Most volcanic ash consists of fine, dusty particles.", "fol": "", "prediction": ["all x.(VolcanicAsh(x) -> (FineDustyParticles(x) & Contains(x,y)))", "all x y.((VolcanicAsh(x) & FineDustyParticles(y)) -> ConsistsOf(x,y))", "all x.(VolcanicAsh(x) -> FineDustyParticles(x))", "(exists x.(VolcanicAsh(x) & Fine(x) & Dusty(x)))", "all x.(VolcanicAsh(x) -> (FineDustyParticles(x) & ConsistsOf(x,y)))", "all x.(VulcanicAsh(x) -> FineDustyParticles(x))", "all x.(VolcanicAsh(x) -> ConsistsOfFineDustyParticles(x))", "all x y.((VolcanicAsh(x) & Fine(y) & Dusty(y)) -> ConsistsOf(x,y))", "all x.((VolcanicAsh(x) & FineDustyParticles(x)) -> ConsistsOf(x,y))", "all x y.((VolcanicAsh(x) & FineDander(y)) -> ConsistsOf(x,y))", "(all x.(VolcanicAsh(x) -> FineDustyParticles(x)))", "all x.(VolcanicAsh(x) -> (FineDustyParticles(x) & Contains(x,y)))", "all x.(VolcanicAsh(x) -> FineDustyParticles(x))", "(all x.(VolcanicAsh(x) -> FineDanderParticles(x))", "all x.(VulcanicAsh(x) -> (FineDustyParticles(x) & ConsistsOf(x,y)))", "exists x.(VolcanicAsh(x) & FineDustyParticles(x))"]}
{"id": "eqasc_validation_1636", "nl": "Fine, dusty particles in the atmosphere decreases the temperature by blocking the sun", "fol": "", "prediction": ["all x y.((FineDustyParticles(x) & Atmosphere(y)) -> (DecreasesTemperature(x,y) & BlocksSun(x,y)))", "all x y.((FineD dustyParticles(x) & Atmosphere(y) & BlocksSun(x,y)) -> DecreasesTemperatureByBlockingSun(x,y))", "all x y z.((FineDustyParticles(x) & Atmosphere(y) & Temperature(z) & BlocksSun(y,z)) -> DecreasesTemperatureByBlockingSun(x,y,z))", "all x.((FineDustyParticles(x) & Atmosphere(x) & BlocksSun(x)) -> DecreasesTemperatureByBlockingSun(x))", "(DecreasesTemperatureByBlockingSunlight(FineDustyParticlesInAtmosphere(FineParticlesInAtmosphere))", "all x y z.((FineD dustyParticles(x) & Atmosphere(y) & Sun(z)) -> (DecreasesTemperature(x,y,z) & BlocksSun(x,y)))", "all x.((FineD dustyParticles(x) & Atmosphere(x) & BlocksSun(x)) -> DecreasesTemperatureByBlockingSun(x))", "all x y.((FineDustyParticles(x) & Atmosphere(y) & BlocksSun(x,y)) -> DecreasesTemperatureByBlockingSun(x,y))", "all x.((FineDustyParticles(x) & Atmosphere(x)) -> DecreasesTemperatureByBlockingSunlight(x))", "all x y z.((FineDustyParticles(x) & Atmosphere(y) & Sun(z)) -> (DecreasesTemperature(x,y,z) & BlocksSun(x,y)))", "all x.(FineDustyParticlesInAtmosphere(x) -> (DecreasesTemperatureByBlockingSunlight(x)))", "all x y.((FineD dustyParticles(x) & Atmosphere(y) & BlocksSun(x,y)) -> DecreasesTemperatureByBlockingSun(x,y))", "all x.((FineDustyParticles(x) & InAtmosphere(x)) -> DecreasesTemperatureByBlockingSunlight(x))", "all x y z.((FineD dustyParticles(x) & Atmosphere(y) & Temperature(z) & BlocksSun(y,z)) -> DecreasesTemperatureByBlockingSun(x,y,z))", "all x.((FineD dustyParticles(x) & Atmosphere(x) & BlocksSun(x)) -> DecreasesTemperatureByBlockingSun(x))", "all x y.((FineDustyParticles(x) & Atmosphere(y) & BlocksSun(x,y)) -> DecreasesTemperatureByBlockingSun(x,y))"]}
{"id": "eqasc_validation_1637", "nl": "Atmosphere is the air around an object in space.", "fol": "", "prediction": ["all x.(Atmosphere(x) -> AirAroundObject(x))", "all x y.((Atmosphere(x) & Object(y)) -> AirAround(x,y))", "all x y z.((Atmosphere(x) & Object(y) & Space(z)) -> AirAround(x,y,z))", "(Atmosphere(air) -> exists y.(Object(y) & InSpace(y))))", "all x.(Atmosphere(x) -> AirAroundObject(x))", "all x.(Atmosphere(x) -> (AirAroundObject(x) & InSpace(x)))", "all x y.((Atmosphere(x) & Object(y)) -> AirAround(x,y))", "all x y z.((Atmosphere(x) & Object(y) & Space(z)) -> AirAround(x,y,z))", "all x y.((Atmosphere(x) & Object(y)) -> AirAround(x,y))", "all x.(Atmosphere(x) -> AirAroundObject(x))", "all x.(Atmosphere(x) -> (AirAroundObject(x) & InSpace(x)))", "all x y.((Atmosphere(x) & Space(y)) -> AirAround(x,y))", "all x.(Atmosphere(x) -> AirAround(x,space,object))", "All x.(Atomosphere(x) -> exists y.(Object(y) & InSpace(x,y))))", "exists x.(Atmosphere(x) & AirAround(x) & InSpace(x))", "All x.(Atmosphere(x) -> AirAround(x,space))"]}
{"id": "eqasc_validation_1638", "nl": "volcanic ash in the air around the earth decreases the temperature by blocking the sun", "fol": "", "prediction": ["all x y.((VolcanicAsh(x) & AirAroundEarth(y)) -> (DecreasesTemperatureByBlockingSunlight(x,y)))", "all x y z.((VolcanicAsh(x) & AirAroundEarth(y) & Earth(z)) -> (DecreasesTemperatureByBlockingSun(x,y,z)))", "all x.((VolcanicAsh(x) & AirAroundEarth(x)) -> DecreasesTemperatureByBlockingSun(x))", "(DecreasesTemperatureByBlockingSunlight(volcanicAshInAirAroundEarth(volcanicAshInAirAroundEarth(volcanicAsh) & BlocksSunlight(volcanicAsh))", "all x y.((VolcanicAsh(x) & AirAroundEarth(y)) -> DecreasesTemperatureByBlockingSun(x,y))", "all x.((VolcanicAsh(x) & AirAroundEarth(x) & BlocksSun(x)) -> DecreasesTemperatureByDecreasesTemperatureByBlockingSun(x))", "all x y.((VolcanicAsh(x) & AirAroundEarth(y) & BlocksSun(x,y)) -> DecreasesTemperatureByBlockingSun(x,y))", "all x y z.((VolcanicAsh(x) & AirAroundEarth(y) & Earth(z)) -> (DecreasesTemperatureByBlockingSunlight(x,y,z) & BlocksSunlight(x,y)))", "(DecreasesTemperatureByBlockingSunlight(volcanicAshInAirAroundEarth(volcanicAshInAirAroundEarth))", "all x.((VolcanicAsh(x) & AirAroundEarth(x)) -> (DecreasesTemperature(x) & BlocksSun(x)))", "all x y z.((VolcanicAsh(x) & AirAroundEarth(y) & Sun(z)) -> (DecreasesTemperature(x,y,z) & BlocksSun(x,y,z)))", "all x y.((VolcanicAsh(x) & AirAroundEarth(y)) -> (DecreasesTemperature(x,y) & BlocksSun(x,y)))", "all x.((VolcanicAsh(x) & AirAroundEarth(x) & BlocksSun(x)) -> DecreasesTemperatureByBlockingSun(x))", "all x y.((VolcanicAsh(x) & AirAroundEarth(x,y)) -> (DecreasesTemperature(x) & BlocksSun(x)))", "all x y z.((VolcanicAsh(x) & AirAroundEarth(y) & Earth(z)) -> (DecreasesTemperature(x,z) & BlocksSun(x,z)))", "all x.((VolcanicAsh(x) & AirAroundEarth(x)) -> DecreasesTemperatureByBlockingSun(x))"]}
{"id": "eqasc_validation_1639", "nl": "Small temperature variations can have major effects on natural ecosystems.", "fol": "", "prediction": ["all x.(SmallTemperatureVariations(x) -> HasMajorEffectsOnNaturalEcosystems(x))", "all x y.((SmallTemperatureVariation(x) & NaturalEcosystem(y)) -> HasMajorEffects(x,y))", "all x.(SmallTemperatureVariations(x) -> HasMajorEffectsOnNaturalEcosystems(x))", "all x y z.((SmallTemperatureVariation(x) & NaturalEcosystem(y) & NaturalEcosystem(z)) -> HasMajorEffects(x,y,z))", "all x.((SmallTemperatureVariations(x) & NaturalEcosystem(x)) -> HasMajorEffects(x))", "all x.(SmallTemperatureVariations(x) -> CanHaveMajorEffectsOnNaturalEcosystems(x))", "all x.((SmallTemperatureVariations(x) & HasMajorEffectsOnNaturalEcosystems(x)) -> HasMajorEffectsOnNaturalEcosystems(x))", "all x y.((SmallTemperatureVariation(x) & NaturalEcosystem(y)) -> HasMajorEffects(x,y))", "all x y z.((SmallTemperatureVariation(x) & NaturalEcosystem(y) & NaturalEcosystem(z)) -> HasMajorEffect(x,y,z))", "all x y.((SmallTemperatureVariations(x) & NaturalEcosystem(y)) -> HasMoreEffects(x,y))", "all x.(SmallTemperatureVariation(x) -> HasMoreEffectsOnNaturalEcosystems(x))", "all x y.((SmallTemperatureVariation(x) & NaturalEcosystem(y)) -> MajorEffect(x,y))", "all x.(SmallTemperatureVariations(x) -> CanHaveMajorEffectsOnNaturalEcosystems(x))", "all x y.((SmallTemperatureVariations(x) & NaturalEcosystem(y)) -> CanHaveMajorEffects(x,y))", "exists x.(SmallTemperatureVariation(x) & HasMajorEffectOnNaturalEcosystems(x))", "exists x.(SmallTemperatureVariation(x) & HasMoreEffects(x,naturalEcosystems))"]}
{"id": "eqasc_validation_1640", "nl": "volcanic ash in the atmosphere can have major effects on natural ecosystems", "fol": "", "prediction": ["all x y.((VolcanicAsh(x) & Atmosphere(y)) -> CanHaveMajorEffectsOnNaturalEcosystems(x,y))", "all x.((VolcanicAsh(x) & Atmosphere(x)) -> HasMajorEffectsOnNaturalEcosystems(x))", "all x y z.((VolcanicAsh(x) & Atmosphere(y) & NaturalEcosystem(z)) -> CanHaveMajorEffects(x,y,z))", "all x y.((VolcanicAsh(x) & Atmosphere(y)) -> HasMoreEffectsOnNaturalEcosystems(x,y))", "(MajorEffectsOnNaturalEcosystems(volcanicAshInAtmosphere(volcanicAsh) & InAtmosphere(volcanicAsh))", "all x.((VolcanicAsh(x) & Atmosphere(x)) -> CanHaveMajorEffectsOnNaturalEcosystems(x))", "all x.(VolcanicAsh(x) -> (HasMajorEffectsOnNaturalEcosystems(x)))", "all x.(VolcanicAshInAtmosphere(x) -> CanHaveMajorEffectsOnNaturalEcosystems(x))", "(MajorEffectsOnNaturalEcosystems(volcanicAshInAtmosphere(volcanicAsh) & InAtmosphere(volcanicAsh(volcanicAsh))", "all x y.((VolcanicAsh(x) & Atmosphere(y)) -> CanHaveMajorEffectsOnNaturalEcosystems(x,y))", "all x y z.((VolcanicAsh(x) & Atmosphere(y) & NaturalEcosystem(z)) -> HasMoreEffectsOn(x,y,z))", "all x.((VolcanicAsh(x) & InAtmosphere(x)) -> HasMoreEffectsOnNaturalEcosystems(x))", "all x.((VolcanicAsh(x) & Atmosphere(x)) -> HasMoreEffectsOnNaturalEcosystems(x))", "all x y.((VolcanicAsh(x) & Atmosphere(y) & InAtmosphere(x,y)) -> HasMajorEffectsOnNaturalEcosystems(x))", "all x y.((VolcanicAsh(x) & Atmosphere(y)) -> CanHaveMoreEffectsOnNaturalEcosystems(x,y))", "all x.((VolcanicAsh(x) & InAtmosphere(x)) -> HasMoreEffectsOnNaturalEcosystems(x))"]}
{"id": "eqasc_validation_1641", "nl": "Supersaturation is inferred to be a common state for atmospheric haze particles.", "fol": "", "prediction": ["all x.(Supersaturation(x) -> CommonStateForAtmosphericHazeParticles(x))", "all x y.((Supersaturation(x) & AtmosphericHazeParticle(y)) -> CommonState(x,y))", "(CommonStateForAtmosphericHazeParticles(Supersaturation)", "all x.(Supersaturation(x) -> CommonStateForAtmosphericHazeParticles(x))", "all x.((Supersaturation(x) & AtmosphericHazeParticles(x)) -> CommonState(x))", "all x y.((Supersaturation(x) & AtmosphericHazeParticle(y)) -> CommonState(x,y))", "(CommonStateForAtmosphericHazeParticles(Supersaturation)", "all x y.((Supersaturation(x) & AtmosphericHaze(y)) -> CommonState(x,y))", "exists x.(Suprasaturation(x) & CommonStateForAtmosphericHazeParticles(x))", "all x.(Supersaturation(x) -> CommonStateForAtmosphericHazeParticles(x))", "all x y z.((Supersaturation(x) & AtmosphericHaze(y) & Particle(z)) -> CommonState(x,y,z))", "all x y.((Supersaturation(x) & AtmosphericHazeParticles(y)) -> CommonState(x,y))", "all x.(Supersaturation(x) -> CommonStateForAtmosphericHazeParticles(x))", "all x.(Supersaturation(x) -> CommonStateForAtmosphericHazeParticles(x))", "all x.(Supersaturation(x) -> CommonState(x))", "all x.(Supersaturation(x) -> CommonStateForAtmosphericHazeParticles(x))"]}
{"id": "eqasc_validation_1642", "nl": "haze decreases the temperature by blocking the sun", "fol": "", "prediction": ["all x.(Haze(x) -> (DecreasesTemperature(x) & BlocksSun(x)))", "all x y.((Haze(x) & Sun(y)) -> (DecreasesTemperature(x,y) & BlocksSun(x,y)))", "all x y z.((Haze(x) & Sun(y) & Temperature(z) & Blocks(x,y)) -> Decreases(x,z))", "all x.(Haze(x) -> (DecreasesTemperature(x) & BlocksSun(x)))", "(DecreasesTemperatureByBlockingSunlight(haze) & SunBlocksTemperature(haze))", "all x.(Haze(x) -> (DecreasesTemperatureByBlockingSun(x) & BlocksSun(x)))", "all x y.((Haze(x) & Sun(y)) -> (DecreasesTemperature(x,y) & BlocksSun(x,y)))", "all x y.((Haze(x) & Sun(y)) -> DecreasesTemperatureByBlocking(x,y))", "all x y z.((Haze(x) & Sun(y) & Temperature(z) & Blocks(x,y)) -> Decreases(x,z))", "all x y.((Haze(x) & Sun(y)) -> (DecreasesTemperatureByBlocking(x,y)))", "All x.(Hase(x) -> (DecreasesTemperature(x) & BlocksSun(x)))", "all x.(Haze(x) -> (DecreasesTemperature(x) & BlocksSun(x)))", "all x.(Haze(x) -> (DecreasesTemperatureByBlockingSun(x)))", "all x.(Haze(x) -> DecreasesTemperatureByBlockingSunlight(x))", "all x y.((Haze(x) & Sun(y)) -> DecreasesTemperatureByBlocking(x,y))", "all x.(Haze(x) -> (DecreasesTemperature(x) & BlocksSun(x)))"]}
{"id": "eqasc_validation_1643", "nl": "Ash clouds are a particular problem for aircraft.", "fol": "", "prediction": ["all x.(AshCloud(x) -> ParticularProblemForAircraft(x))", "all x y.((AshCloud(x) & Aircraft(y)) -> ParticularProblem(x,y))", "all x.(AshCloud(x) -> ParticularProblemForAircraft(x))", "all x.(AshCloud(x) -> (ProblemForAircraft(x) & ParticularForAircraft(x)))", "all x y.((AshCloud(x) & Aircraft(y)) -> ParticularProblem(x,y))", "(ProblemForAircraft(ashcloud) & ParticularForAircraft(ashcloud))", "all x y z.((AshCloud(x) & Aircraft(y) & Aircraft(z)) -> ParticularProblem(x,y,z))", "all x.(AshCloud(x) -> AircraftProblem(x))", "all x y.((AshCloud(x) & Aircraft(y)) -> ParticularProblem(x,y))", "all x.(AshCloud(x) -> EspeciallyProblemForAircraft(x))", "all x y.((AshCloud(x) & Aircraft(y)) -> ParticularProblem(x,y))", "all x.(AshCloud(x) -> ParticularProblemForAircraft(x))", "exists x.(AshCloud(x) & Aircraft(x) & ParticularProblem(x))", "all x.(AshCloud(x) -> ProblemForAircraft(x))", "all x.(AshCloud(x) -> (AircraftProblem(x) | AircraftProblem(x)))", "all x y.((AshCloud(x) & Aircraft(y)) -> ParticularProblem(x,y))"]}
{"id": "eqasc_validation_1644", "nl": "Volcanic clouds in the atmosphere is a particular problem for aircraft.", "fol": "", "prediction": ["all x.(VolcanicClouds(x) -> ParticularProblemForAircraft(x))", "all x y.((VolcanicCloud(x) & Aircraft(y)) -> ParticularProblem(x,y))", "all x.(VolcanicCloudsInAtmosphere(x) -> ParticularProblemForAircraft(x))", "all x.(VolcanicClouds(x) -> AircraftProblem(x))", "all x.((VolcanicClouds(x) & Atmosphere(x)) -> ParticularProblemForAircraft(x))", "all x y z.((VolcanicCloud(x) & Aircraft(y) & Atmosphere(z) & InAtmosphere(x,y,z)) -> ParticularProblem(x))", "all x y.((VolcanicCloud(x) & Aircraft(y)) -> ParticularProblem(x,y))", "all x.((VolcanicClouds(x) & Atmosphere(x)) -> ParticularProblemForAircraft(x))", "all x.(VolcanicClouds(x) -> ParticularProblemForAircraft(x))", "all x y.((VolcanicCloud(x) & Aircraft(y)) -> ParticularProblem(x,y))", "all x.(VolcanicCloudsInAtmosphere(x) -> ParticularProblemForAircraft(x))", "exists x.(VolcanicCloud(x) & Atmosphere(x) & ParticularProblemForAircraft(x))", "all x.((VolcanicClouds(x) & Atmosphere(x)) -> ParticularProblemForAircraft(x))", "all x y.((VolcanicClouds(x) & Aircraft(y)) -> ParticularProblem(x,y))", "all x y.((VolcanicCloud(x) & Aircraft(y)) -> ParticularProblem(x,y))", "all x.(VolcanicClouds(x) -> AircraftProblem(x))"]}
{"id": "eqasc_validation_1645", "nl": "Cone volcanoes are associated with thick lava and much ash.", "fol": "", "prediction": ["all x.(ConeVolcano(x) -> (ThickLava(x) & MuchAsh(x)))", "(ThickLava(cone) & MuchAsh(cone))", "all x.(ConeVolcano(x) -> (ThickLava(x) & MuchAsh(x)))", "all x y.((ConeVolcano(x) & Lava(y)) -> (Thick(y) & MuchAsh(y)))", "all x.(ConeVolcano(x) -> (HasThickLava(x) & HasMuchAsh(x)))", "all x.((Volcano(x) & ThickLava(x) & MuchAsh(x)) -> Cone(x))", "all x y z.((ConeVolcano(x) & Lava(y) & Ash(z)) -> (Thick(y) & Much(z)))", "all x y.((ConeVolcano(x) & Lava(y)) -> (Thick(y,x) & MuchAsh(y)))", "all x.(ConeVolcano(x) -> (ThickLava(x) & MuchAsh(x)))", "all x y.((ConeVolcano(x) & ThickLava(y) & MuchAsh(y)) -> AssociatedWith(x,y))", "all x.(ConeVolcano(x) -> (AssociatesThickLava(x) & AssociatesMuchAsh(x)))", "all x.(ConeVolcano(x) -> (HasThickLava(x) & HasMuchAsh(x)))", "all x y.((ConeVolcano(x) & Lava(y)) -> (Thick(y) & MuchAsh(y)))", "all x.(ConeVolcano(x) -> (ThickLava(x) & MuchAsh(x)))", "all x.(ConeVolcano(x) -> (ThickLava(x) & MuchAsh(x)))", "all x.(ConeVolcano(x) -> (ThickLava(x) & MuchAsh(x)))"]}
{"id": "eqasc_validation_1646", "nl": "Cone volcanoes can lower the temperature of the earth", "fol": "", "prediction": ["all x.(ConeVolcano(x) -> LowersTemperature(x))", "all x y.((ConeVolcano(x) & Earth(y)) -> LowersTemperature(x,y))", "all x y z.((ConeVolcano(x) & Earth(y) & Earth(z)) -> LowersTemperature(x,y,z))", "all x.(ConeVolcano(x) -> LowersTemperatureOfEarth(x))", "all x y.((ConeVolcano(x) & Earth(y)) -> LowersTemperature(x,y))", "all x.((ConeVolcano(x) & Earth(y)) -> LowersTemperature(x,y))", "all x y z.((ConeVolcano(x) & Earth(y) & Earth(z)) -> LowersTemperature(x,y,z))", "all x.(ConeVolcano(x) -> LowersTemperature(x,Earth))", "all x y.((ConeVolcano(x) & Earth(y)) -> LowerTemperature(x,y))", "all x y z.((ConeVolcano(x) & Earth(y) & Earth(z)) -> CanLowerTemperature(x,y,z))", "all x.(ConeVolcano(x) -> (LowersTemperature(x) & Earth(x)))", "all x y.((ConeVolcano(x) & Earth(y)) -> CanLowerTemperature(x,y))", "all x.(ConeVolcano(x) -> LowersTemperatureOfEarth(x))", "all x.(ConeVolcano(x) -> CanLowerTemperature(x))", "all x y.((ConeVolcano(x) & Earth(y)) -> LowersTemperature(x,y))", "all x.(ConeVolcano(x) -> LowerTemperatureOfEarth(x))"]}
{"id": "eqasc_validation_1647", "nl": "Or a veil of tiny particles from a volcanic eruption can block the sun.", "fol": "", "prediction": ["all x.((Vulel(x) & TinyParticles(x) & VolcanicEruption(x)) -> BlocksSun(x))", "all x y.((Vule(x) & TinyParticles(x) & VolcanicEruption(y)) -> BlocksSun(x,y))", "all x.((Vule(x) & TinyParticles(x) & VolcanicEruption(x)) -> BlocksSun(x))", "all x y.((Vulel(x) & TinyParticles(x) & VolcanicEruption(y)) -> BlocksSun(x,y))", "all x.((Viel(x) & TinyParticlesFromVolcanicEruption(x)) -> BlocksSun(x))", "(all x.((Vulel(x) & TinyParticles(x)) -> BlocksSun(x)))", "(exists x.(Viel(x) & TinyParticlesFromVolcanicEruption(x)) & BlocksSun(x))", "exists x.(VielOfTinyParticles(x) & FromVolcanicEruption(x) & BlocksSun(x))", "all x.(Vule(x) -> (TinyParticlesFromVolcanicEruption(x) & BlocksSun(x)))", "(all x.(Vulcan(x) -> BlocksSun(x)))", "(all x.((Vulcan(x) & TinyParticles(x) & VolcanicEruption(x)) -> BlocksSun(x)))", "all x y.((Viel(x) & TinyParticles(x) & VolcanicEruption(y)) -> BlocksSun(x,y))", "exists x.(VultureOfTinyParticles(x) & FromVolcanicEruption(x) & BlocksSun(x))", "exists x.(Vule(x) & (TinyParticles(x) & FromVolcanicEruption(x)) -> BlocksSun(x))", "all x y.((Vulture(x) & VolcanicEruption(y)) -> BlocksSun(x,y))", "(exists x.(Vulture(x) & TinyParticles(x) & FromVolcanicEruption(x)) & BlocksSun(x))"]}
{"id": "eqasc_validation_1648", "nl": "volcanoes can block the sun", "fol": "", "prediction": ["all x y.((Volcano(x) & Sun(y)) -> Blocks(x,y))", "all x y z.((Volcano(x) & Sun(y) & Sun(z)) -> Blocks(x,y,z))", "all x.(Volcano(x) -> BlocksSun(x))", "all x y.((Volcano(x) & Sun(y)) -> Blocks(x,y))", "all x y z.((Volcano(x) & Sun(y) & Sun(z)) -> Blocks(x,y,z))", "all x.(Volcano(x) -> BlocksSun(x))", "(BlocksSunlight(vulcanoes,sun))", "all x.(Volcano(x) -> BlockSun(x))", "all x y.((Volcano(x) & Sun(y)) -> Blocks(x,y))", "all x y z.((Volcano(x) & Sun(y) & Sun(z)) -> CanBlock(x,y,z))", "all x.(Volcano(x) -> CanBlockSun(x))", "all x y.((Volcano(x) & Sun(y)) -> CanBlock(x,y))", "all x y.((Volcano(x) & Sun(y) & Blocks(x,y)) -> CanBlock(x,y))", "all x.(Volcano(x) -> BlocksSun(x))", "all x.(Volcano(x) -> CanBlockSun(x))", "all x.(Volcano(x) -> BlockSun(x))"]}
{"id": "eqasc_validation_1649", "nl": "Black sand is volcanic ash.", "fol": "", "prediction": ["all x.(BlackSand(x) -> VolcanicAsh(x))", "all x.(BlackSand(x) -> VolcanicAsh(x))", "all x y.((BlackSand(x) & VolcanicAsh(y)) -> Is(x,y))", "(VolcanicAsh(BlackSand))", "(VolcanicAsh(blacksand) & -VolcanicAsh(blacksand))", "all x.(BlackSand(x) -> VolcanicAsh(x))", "all x y.((BlackSand(x) & VolcanicAsh(y)) -> Is(x,y))", "all x.(BlackSand(x) -> VolcanicAsh(x))", "all x y.((BlackSand(x) & VolcanicAsh(y)) -> Is(x,y))", "all x.(BlackSand(x) -> VolcanicAsh(x))", "all x.(BlackSand(x) -> VolcanicAsh(x))", "all x.(BlackSand(x) -> VolcanicAsh(x))", "All x.(BlackSand(x) -> VolcanicAsh(x))", "all x.(BlackSand(x) -> VolcanicAsh(x))", "All x.(BlackSand(x) -> VolcanicAsh(x))", "All x.(BlackSand(x) -> VolcanicAsh(x))"]}
{"id": "eqasc_validation_1650", "nl": "Black sand can block out the sun", "fol": "", "prediction": ["all x.(BlackSand(x) -> BlocksOutSun(x))", "all x y.((BlackSand(x) & Sun(y)) -> BlocksOut(x,y))", "all x y z.((BlackSand(x) & Sun(y) & Sun(z)) -> BlocksOut(x,y,z))", "all x.(BlackSand(x) -> BlocksOutSun(x))", "(BlocksOutSunlightWithBlackSand(BlackSand))", "all x y.((BlackSand(x) & Sun(y)) -> BlocksOut(x,y))", "all x y.((BlackSand(x) & Sun(y) & BlocksOut(x,y)) -> BlocksOut(x,y))", "(BlocksOutSunlightWithBlackSand(black))", "all x.(BlackSand(x) -> BlocksOutSun(x))", "all x y z.((BlackSand(x) & Sun(y) & Sun(z)) -> BlocksOut(x,y,z))", "all x y.((BlackSand(x) & Sun(y) & BlocksOut(x,y)) -> BlocksOut(x,y))", "all x.(BlackSand(x) -> BlocksOutSun(x))", "all x.(BlackSand(x) -> BlocksSun(x))", "All x.(BlackSand(x) -> CanBlockOutSun(x))", "all x.(BlackSand(x) -> BlocksOutSun(x))", "All x.(BlackSand(x) -> BlocksSunlight(x))"]}
{"id": "eqasc_validation_1651", "nl": "Fine, dusty particles erupted from volcanos decrease the temperature by blocking the sun", "fol": "", "prediction": ["all x y.((FineDustyParticles(x) & EruptedFromVolcanoes(x) & Volcano(y)) -> (DecreasesTemperatureByBlockingSunlight(x)))", "all x.((FineDustyParticles(x) & EruptedFromVolcanoes(x)) -> (DecreasesTemperatureByBlockingSunlight(x)))", "all x y z.((FineDustyParticles(x) & EruptedFromVolcanoes(x) & Volcano(y) & Sun(z)) -> (DecreasesTemperatureByBlocking(x,y,z)))", "all x y.((FineDumptyParticles(x) & EruptedFromVolcanoes(x) & BlocksSunlight(x)) -> DecreasesTemperatureByBlockingSunlight(x))", "all x y.((FineDustyParticles(x) & EruptedFromVolcanoes(x) & Volcano(y)) -> DecreasesTemperatureByBlockingSunlight(x,y))", "all x.((FineDustyParticles(x) & EruptedFromVolcanoes(x)) -> DecreasesTemperatureByBlockingSunlight(x))", "all x y z.((FineDumptyParticles(x) & EruptedFromVolcano(x) & Volcano(y) & Sun(z)) -> (DecreasesTemperatureByBlocking(x,y,z)))", "all x y z.((FineDustyParticles(x) & EruptedFromVolcano(x) & Volcano(y) & Sun(z)) -> (DecreasesTemperatureByBlocking(x,y,z)))", "all x.((FineDumptyParticles(x) & EruptedFromVolcanoes(x)) -> (DecreasesTemperature(x) & BlocksSun(x)))", "all x.((FineD dustyParticles(x) & EruptedFromVolcanoes(x) & BlocksSunlight(x)) -> DecreasesTemperatureByBlockingSunlight(x))", "all x y.((FineDustyParticles(x) & EruptedFromVolcanos(x) & Volcano(y)) -> (DecreasesTemperature(x,y) & BlocksSunlight(x,y)))", "all x y z.((FineDustyParticles(x) & Volcano(y) & EruptedFrom(x,y) & Volcano(z)) -> (DecreasesTemperatureByBlockingSunlight(x,z) & BlocksSunlight(x,z)))", "all x.((FineDustyParticles(x) & EruptedFromVolcanos(x)) -> (DecreasesTemperatureByBlockingSunlight(x)))", "all x y.((FineD dustyParticles(x) & EruptedFromVolcanoes(x,y)) -> (DecreasesTemperatureByBlockingSunlight(x)))", "all x.((FineDustyParticles(x) & EruptedFromVolcanoes(x)) -> (DecreasesTemperatureByBlockingSunlight(x)))", "all x.((FineDustyParticles(x) & EruptedFromVolcanoes(x)) -> DecreasesTemperatureByBlockingSunlight(x))"]}
{"id": "eqasc_validation_1652", "nl": "a seismograph is used for measuring the size of an earthquake", "fol": "", "prediction": ["all x y.((Seismograph(x) & Earthquake(y)) -> MeasuresSize(x,y))", "all x.(Seismograph(x) -> MeasuresSizeOfEarthquake(x))", "all x y z.((Seismograph(x) & Earthquake(y) & Earthquake(z)) -> MeasuresSize(x,y,z))", "all x y.((Seismograph(x) & Earthquake(y)) -> MeasuresSize(x,y))", "all x.(Seismograph(x) -> MeasuresSizeOfEarthquake(x))", "all x y z.((Seismograph(x) & Earthquake(y) & Earthquake(z)) -> MeasuresSize(x,y,z))", "all x y.((Seismograph(x) & Earthquake(y)) -> MeasuresSizeOf(x,y))", "all x.(Seismograph(x) -> MeasuresSizeOfEarthquake(x))", "all x.(Seismograph(x) -> UsedForMeasuringSizeOfEarthquake(x))", "all x y z.((Seismograph(x) & Earthquake(y) & Earthquake(z)) -> MeasuresSize(x,y,z))", "all x y.((Seismograph(x) & Earthquake(y)) -> MeasuresSizeOf(x,y))", "all x y.((Seismograph(x) & Earthquake(y)) -> UsedForMeasuringSize(x,y))", "all x.(Seismograph(x) -> MeasuresSizeOfEarthquake(x))", "all x y z.((Seismograph(x) & Earthquake(y) & Earthquake(z)) -> MeasuresSize(x,y,z))", "all x.(Seismograph(x) -> MeasuresSizeOfEarthquake(x))", "exists x.(Seismograph(x) & MeasuresSizeOfEarthquake(x))"]}
{"id": "eqasc_validation_1653", "nl": "A seismograph will detect fault movements.", "fol": "", "prediction": ["all x.(Seismograph(x) -> DetectsFaultMovements(x))", "all x.(Seismograph(x) -> DetectsFaultMovements(x))", "all x y.((Seismograph(x) & FaultMovement(y)) -> Detects(x,y))", "all x.(Seismograph(x) -> DetectsFaultMovements(x))", "all x.(Seismograph(x) -> DetectFaultMovements(x))", "all x.(Seismograph(x) -> DetectsFaultMovements(x))", "all x y.((Seismograph(x) & FaultMovement(y)) -> Detects(x,y))", "all x.(Seismograph(x) -> (DetectsFaultMovements(x) & DetectsFaultMovements(x)))", "all x y.((Seismograph(x) & Fault(y)) -> Detects(x,y))", "all x y.((Seismograph(x) & FaultMovement(y)) -> Detects(x,y))", "all x.(Seismograph(x) -> DetectionOfFaultMovements(x))", "all x y.((Seismograph(x) & Fault(y)) -> Detects(x,y))", "all x.(Seismograph(x) -> DetectFaultMovements(x))", "all x.(Seismograph(x) -> (DetectsFaultMovements(x) & DetectsFaultMovements(x)))", "all x.(Seismograph(x) -> FindsFaultMovements(x))", "exists x.(Seismograph(x) & DetectsFaultMovements(x))"]}
{"id": "eqasc_validation_1654", "nl": "Magnitude a measure of earthquake size.", "fol": "", "prediction": ["all x.(Magnitude(x) -> MeasuresEarthquakeSize(x))", "(MeasuresEarthquakeSize(Magnitude))", "(MeasuresEarthquakeSize(Magnitude) & MeasuresEarthquakeSize(Magnitude))", "all x.(Magnitude(x) -> MeasuresEarthquakeSize(x))", "all x y.((Magnitude(x) & EarthquakeSize(y)) -> Measures(x,y))", "exists x.(MeasurementOfMagnitude(x) & EarthquakeSize(x))", "all x y.((Magnitude(x) & Earthquake(y)) -> MeasuresSize(x,y))", "all x.(Magnitude(x) -> MeasuresEarthquakeSize(x))", "(MeasuresEarthquakeSize(magnitude) & MeasuresEarthquakeSize(magnitude))", "all x.(Magnitude(x) -> MeasuresEarthquakeSize(x))", "(MeasuresEarthquakeSize(Magnitude))", "all x.(Magnitude(x) -> MeasuresEarthquakeSize(x))", "all x.(Magnitude(x) -> EarthquakeSize(x))", "all x y.((Magnitude(x) & EarthquakeSize(y)) -> Measures(x,y))", "all x.(Magnitude(x) -> MeasuresEarthquakeSize(x))", "exists x.(Magnitude(x) & EarthquakeSize(x))"]}
{"id": "eqasc_validation_1655", "nl": "A seismograph measures the magnitude of earthquakes", "fol": "", "prediction": ["all x y.((Seismograph(x) & Earthquake(y)) -> MeasuresMagnitude(x,y))", "all x.(Seismograph(x) -> MeasuresMagnitudeOfEarthquakes(x))", "all x y z.((Seismograph(x) & Earthquake(y) & Earthquake(z)) -> MeasuresMagnitude(x,y,z))", "all x.(Seismograph(x) -> MeasuresMagnitudeOfEarthquakes(x))", "all x y.((Seismograph(x) & Earthquake(y)) -> MeasuresMagnitude(x,y))", "all x y z.((Seismograph(x) & Earthquake(y) & Earthquake(z)) -> MeasuresMagnitude(x,y,z))", "all x y.((Seismograph(x) & Earthquake(y)) -> MeasuresMagnitudeOf(x,y))", "all x.(Seismograph(x) -> MeasuresMagnitudeOfEarthquakes(x))", "all x y z.((Seismograph(x) & Earthquake(y) & Earthquake(z)) -> MeasuresMagnitudeOf(x,y,z))", "all x.(Seismograph(x) -> MeasuresMagnitudeOfEarthquakes(x))", "all x y.((Seismograph(x) & Earthquake(y)) -> MeasuresMagnitude(x,y))", "all x y z.((Seismograph(x) & Earthquake(y) & Earthquake(z)) -> MeasuresMagnitude(x,y,z))", "all x.(Seismograph(x) -> MeasuresMagnitudeOfEarthquakes(x))", "all x.(Seismograph(x) -> MeasuresMagnitudeOfEarthquakes(x))", "all x.(Seismograph(x) -> MeasuresMagnitudeOfEarthquakes(x))", "all x.(Seismograph(x) -> MeasuresMagnitudeOfEarthquakes(x))"]}
{"id": "eqasc_validation_1656", "nl": "Earthquakes are commonly measured by the Richter magnitude scale, which measures the size of earthquakes.", "fol": "", "prediction": ["all x.(Earthquake(x) -> (MeasuredByRiverMagnitudeScale(x) & MeasuresSizeOfEarthquakes(x)))", "all x y.((Earthquake(x) & RichterMagnitudeScale(y)) -> MeasuresSizeOfEarthquakes(x,y))", "(all x.(Earthquake(x) -> MeasuredByRiverMagnitudeScale(x)))", "all x y z.((Earthquake(x) & RichterMagnitudeScale(y) & Earthquake(z)) -> MeasuresSize(x,y,z))", "(MeasuresSize(Earthquake) & RichterMagnitudeScale(Earthquake))", "all x.(Earthquake(x) -> (MeasuredByJerryMagnitudeScales(x) & MeasuresSizeOfEarthquakes(x)))", "(all x.(Earthquake(x) -> MeasuredByRiverMagnitudeScale(x)))", "all x y.((Earthquake(x) & RichterMagnitudeScale(y)) -> MeasuresSizeOfEarthquakes(x,y))", "all x y.((Earthquake(x) & RichterMagnitudeScale(y)) -> MeasuresSizeOfEarthquakes(x,y))", "all x.(Earthquake(x) -> MeasuredByRiverMagnitudeScale(x))", "all x y z.((Earthquake(x) & RichterMagnitudeScale(y) & Earthquake(z)) -> MeasuredBy(x,y,z))", "all x.(Earthquake(x) -> (MeasuredByRiverMagnitudeScale(x) & MeasuresSizeOfEarthquakes(x)))", "all x y.((Earthquake(x) & RichterMagnitudeScene(y)) -> MeasuresSizeOfEarthquakes(x,y))", "all x.(Earthquake(x) -> (MeasuredByJerryMagnitudeScene(x) & MeasuresSizeOfEarthquakes(x)))", "all x.(Earthquake(x) -> (MeasuredByRiverMagnitudeScale(x) & MeasuresSizeOfEarthquakes(x)))", "all x.(Earthquake(x) -> MeasuredByRivermagnitudeScene(x))"]}
{"id": "eqasc_validation_1657", "nl": "a seismograph is used for measuring the Richter magnitude scale", "fol": "", "prediction": ["all x y.((Seismograph(x) & RichterMagnitudeScale(y)) -> Measures(x,y))", "all x.(Seismograph(x) -> MeasuresRivermiracleScale(x))", "all x y z.((Seismograph(x) & RichterMagnitudeScale(y) & RichterMagnitudeScale(z)) -> Measures(x,y,z))", "(MeasuresRivermagnitudeScales(Seismograph) & UsesSeismograph(Seismograph))", "all x y.((Seismograph(x) & RichterMagnitudeScale(y)) -> Measures(x,y))", "all x.(Seismograph(x) -> MeasuresRivermagnitudeScales(x))", "all x y.((Seismograph(x) & RichterMagnitudeScale(y)) -> UsedForMeasuring(x,y))", "all x y z.((Seismograph(x) & RichterMagnitudeScale(y) & RichterMagnitudeScale(z)) -> Measures(x,y,z))", "all x.(Seismograph(x) -> UsedForMeasuringRivermagnitudeScales(x))", "all x.(Seismograph(x) -> MeasuresJerryMagnitudeScales(x))", "all x.(Seismograph(x) -> UsedForMeasuringJerryMagnitudeScale(x))", "all x y.((Seismograph(x) & RichterMagnitudeScale(y)) -> Measures(x,y))", "all x.(Seismograph(x) -> MeasuresRiberMagnitude(x))", "all x y.((Seismograph(x) & RichterMagnitudeScene(y)) -> Measures(x,y))", "exists x.(Seismograph(x) & MeasuresRivermagnitudeScales(x))", "all x.(Seismograph(x) -> MeasuresJerrorMagnitude(x))"]}
{"id": "eqasc_validation_1658", "nl": "When earthquakes occur near cities of any size, the potential for damage is great.", "fol": "", "prediction": ["all x.((Earthquake(x) & NearCity(x) & AnySize(x)) -> PotentialForDamageGreat(x))", "all x y.((Earthquake(x) & City(y) & Near(x,y)) -> GreatPotentialForDamage(x))", "all x.(Earthquake(x) -> (OccursNearCity(x) & AnySize(x) & PotentialForDamage(x)))", "all x y.((Earthquake(x) & City(y) & LocatedNear(x,y)) -> PotentialForDamage(x,y))", "all x y z.((Earthquake(x) & City(y) & Size(z) & OccursNear(x,y,z)) -> PotentialForDamageGreat(x))", "all x.((Earthquake(x) & NearCity(x) & AnySize(x)) -> PotentialForDamageGreat(x))", "all x.((Earthquake(x) & NearAnySize(x)) -> PotentialForDamageGreat(x))", "all x.((Earthquake(x) & NearCityOfAnySize(x)) -> PotentialForDamageGreat(x))", "all x.(Earthquake(x) -> (OccursNearCity(x) & AnySize(x) & PotentialForDamageGreat(x)))", "all x y.((Earthquake(x) & City(y) & Near(x,y)) -> GreatPotentialForDamage(x))", "exists an enormous potential for damage when earthquakes occur near cities of any size.", "all x y z.((Earthquake(x) & City(y) & City(z) & OccursNear(x,y,z)) -> PotentialForDamageGreat(x))", "all x y.((Earthquake(x) & City(y) & OccursNear(x,y)) -> PotentialForDamageGreat(x))", "all x y.((Earthquake(x) & NearCity(y) & AnySize(y)) -> PotentialForDamage(x,y))", "all x.(Earthquake(x) -> (OccursNearCity(x) & OfAnySize(x) & PotentialForDamageGreat(x)))", "all x.((Earthquake(x) & NearAnySize(x)) -> PotentialForDamageGreat(x))"]}
{"id": "eqasc_validation_1659", "nl": "A seismograph is used for measuring the size of the damage done by an occurrence.", "fol": "", "prediction": ["all x y.((Seismograph(x) & Damage(y)) -> MeasuresSize(x,y))", "all x.(Seismograph(x) -> MeasuresSizeOfDamage(x))", "all x y z.((Seismograph(x) & Damage(y) & Event(z)) -> MeasuresSize(x,y,z))", "all x y.((Seismograph(x) & Event(y)) -> MeasuresSizeOfDamage(x,y))", "all x.(Seismograph(x) -> MeasuresSizeOfDamage(x))", "all x y z.((Seismograph(x) & Damage(y) & Event(z)) -> MeasuresSize(x,y,z))", "all x y.((Seismograph(x) & Damage(y)) -> MeasuresSize(x,y))", "all x.(Seismograph(x) -> MeasuresSizeOfDamage(x))", "all x y.((Seismograph(x) & Occurrence(y)) -> MeasuresSizeOfDamage(x,y))", "all x y z.((Seismograph(x) & Damage(y) & Event(z)) -> MeasuresSizeOf(x,y,z))", "all x y.((Seismograph(x) & Event(y)) -> MeasuresSizeOfDamage(x,y))", "all x.(Seismograph(x) -> MeasuresDamageSize(x))", "all x.(Seismograph(x) -> MeasuresSizeOfDamage(x))", "exists x.(Seismograph(x) & MeasuresDamageSize(x))", "all x.(Seismograph(x) -> MeasuresSizeOfDamage(x))", "exists x.(Seismograph(x) & MeasuresDamageSize(x))"]}
{"id": "eqasc_validation_1660", "nl": "Damage caused by earthquakes is emmense.", "fol": "", "prediction": ["all x.((EarthquakeDamage(x) & CausedBy(x,Earthquake)) -> Emense(x))", "all x.(EarthquakeDamage(x) -> Emense(x))", "all x.((Earthquake(x) & Damage(x)) -> Emense(x))", "all x.((Damage(x) & CausedByEarthquakes(x)) -> Emense(x))", "(EmbarrassingDamage(earthquake)", "all x y.((Earthquake(x) & Damage(y)) -> Emense(x,y))", "(Embarrassment(earthquake) -> EmenseDamage(e))", "all x.(EarthquakeDamage(x) -> Emense(x))", "all x.((EarthquakeDamage(x) & CausedBy(x,Earthquake)) -> Emense(x))", "all x y.((EarthquakeDamage(x) & Earthquake(y)) -> Emense(x))", "all x y.((Earthquake(x) & Damage(y)) -> Emense(y))", "all x.((Damage(x) & CausedByEarthquakes(x)) -> Emense(x))", "all x.(EarthquakeDamage(x) -> Emense(x))", "all x y.((Earthquake(x) & Damage(y)) -> Emense(x,y))", "all x.(EarthquakeDamage(x) -> Emmense(x))", "All x.(EarthquakeDamage(x) -> Emense(x))"]}
{"id": "eqasc_validation_1661", "nl": "a seismograph can prevent damage", "fol": "", "prediction": ["all x.(Seismograph(x) -> PreventsDamage(x))", "all x y.((Seismograph(x) & Damage(y)) -> Prevents(x,y))", "all x.(Seismograph(x) -> PreventsDamage(x))", "all x y z.((Seismograph(x) & Damage(y) & Damage(z)) -> Prevents(x,y,z))", "all x y.((Seismograph(x) & Damage(y)) -> Prevents(x,y))", "all x.(Seismograph(x) -> PreventsDamage(x))", "all x y.((Seismograph(x) & Seismometer(y)) -> PreventsDamage(x,y))", "all x y.((Seismograph(x) & Damage(y)) -> CanPrevent(x,y))", "all x y z.((Seismograph(x) & Damage(y) & Damage(z)) -> Prevents(x,y,z))", "all x.(Seismograph(x) -> CanPreventDamage(x))", "all x.(Seismograph(x) -> PreventsDamage(x))", "all x y.((Seismograph(x) & Damage(y)) -> Prevents(x,y))", "all x.(Seismograph(x) -> (PreventsDamage(x) & Seismograph(x)))", "all x.(Seismograph(x) -> CanPreventDamage(x))", "all x.(Seismograph(x) -> PreventDamage(x))", "all x.(Seismograph(x) -> CanPreventDamage(x))"]}
{"id": "eqasc_validation_1662", "nl": "Richter magnitude is a measure of the size of the earthquake.", "fol": "", "prediction": ["all x.(J\u00fcrgenMagnitude(x) -> MeasuresSizeOfEarthquake(x))", "all x.(RiverMeasurement(x) -> MeasuresSizeOfEarthquake(x))", "(MeasuresSizeOfEarthquake(JerryMagnitude) & MeasuresSizeOfEarthquake(JerryMagnitude))", "all x y.((J\u00fcrgenerMeasurement(x) & Earthquake(y)) -> MeasuresSize(x,y))", "all x.(J\u00fcrgenerMagnitude(x) -> MeasuresSizeOfEarthquake(x))", "(MeasuresSizeOfEarthquake(JerrerMagnitude) & MeasuresSizeOfEarthquake(Jerrer,Earthquake))", "(MeasuresSizeOfEarthquake(RiverMeasuresSizeOfEarthquake(RiverMeasuresSizeOfEarthquake(RiverMeasure))", "RichterMagnitude is a MeasureOfSizeOfEarthquake(x))", "all x y.((J\u00fcrgenerMagnitude(x) & Earthquake(y)) -> MeasuresSize(x,y))", "RichterMagnitude (MeasuresSizeOfEarthquake(x))", "all x.(RiverMajority(x) -> MeasuresSizeOfEarthquake(x))", "all x y.((J\u00fcrgenerMeasurement(x) & Earthquake(y)) -> MeasuresSize(x,y))", "(MeasuresSize(Jerry Richter) & Earthquake(Jerry))", "all x.(J\u00fcrgenMagnitude(x) -> MeasuresSizeOfEarthquake(x))", "all x.(RiverMeasurement(x) -> MeasuresSizeOfEarthquake(x))", "all x.(J\u00fcrgenerMagnitude(x) -> MeasuresSizeOfEarthquake(x))"]}
{"id": "eqasc_validation_1663", "nl": "a seismograph is used for measuring Richter magnitude", "fol": "", "prediction": ["all x y.((Seismograph(x) & RichterMagnitude(y)) -> Measures(x,y))", "all x.(Seismograph(x) -> MeasuresRiberMagnitude(x))", "all x y z.((Seismograph(x) & RichterMagnitude(y) & RichterMagnitude(z)) -> Measures(x,y,z))", "all x y.((Seismograph(x) & RichterMagnitude(y)) -> UsedForMeasuring(x,y))", "(MeasuresRiverMagnitude(seismograph) -> Seismograph(s))", "all x.(Seismograph(x) -> MeasuresJerryMagnitude(x))", "all x.(Seismograph(x) -> UsedForMeasuringRiberMagnitude(x))", "all x y z.((Seismograph(x) & RichterMagnitude(y) & RichterMagnitude(z)) -> Measures(x,y,z))", "all x y.((Seismograph(x) & RichterMagnitude(y)) -> Measures(x,y))", "all x.(Seismograph(x) -> UsedForMeasuringJerryMagnitude(x))", "all x y.((Seismograph(x) & RichterMagnitude(y)) -> UsedForMeasuring(x,y))", "all x.(Seismograph(x) -> MeasuresRivermagnitude(x))", "all x y.((Seismograph(x) & RichterMajority(y)) -> Measures(x,y))", "all x.(Seismograph(x) -> MeasuresJerrerMagnitude(x))", "all x.(Seismograph(x) -> UsedForMeasuringRiverMagnitude(x))", "exists x.(Seismograph(x) & MeasuresRiberMagnitude(x,RiberMagnitude))"]}
{"id": "eqasc_validation_1664", "nl": "Most earthquakes are minor tremors.", "fol": "", "prediction": ["all x.(Earthquake(x) -> MinorTermor(x))", "(MostEarthquake(s) -> MinorTermor(s))", "all x.(Earthquake(x) -> MinorTermor(x))", "(all x.(Earthquake(x) -> MinorTermor(x)))", "all x y.((Earthquake(x) & MinorTermor(y)) -> MinorTermor(x,y))", "-MostEarthquakes(earthquake) -> MinorTermor(e))", "(MinorTermor(earthquake,earthquake))", "(MinorTermor(earthquake,earthquake) & -MinorTermor(earthquake,earthquake))", "all x.(Earthquake(x) -> MinorTermor(x))", "all x.(Earthquake(x) -> MinorTremor(x))", "all x.(Earthquake(x) -> (MinorTermor(x) | MinorTermor(x)))", "all x.(Earthquake(x) -> MinorTermor(x))", "all x.(Earthquake(x) -> MinorTremor(x))", "all x.(Earthquake(x) -> MinorTermor(x))", "all x.(Earthquake(x) -> MinorTermor(x))", "all x.(Earthquake(x) -> MinorTremors(x))"]}
{"id": "eqasc_validation_1665", "nl": "a seismograph is used for measuring the size of tremors", "fol": "", "prediction": ["all x y.((Seismograph(x) & Tremor(y)) -> MeasuresSize(x,y))", "all x.(Seismograph(x) -> MeasuresSizeOfTermors(x))", "all x y z.((Seismograph(x) & Tremor(y) & Tremor(z)) -> MeasuresSize(x,y,z))", "all x y.((Seismograph(x) & Tremor(y)) -> MeasuresSizeOf(x,y))", "all x.(Seismograph(x) -> MeasuresSizeOfTremors(x))", "all x y z.((Seismograph(x) & Tremor(y) & Tremor(z)) -> MeasuresSize(x,y,z))", "all x y.((Seismograph(x) & Tremor(y)) -> MeasuresSize(x,y))", "all x y z.((Seismograph(x) & Tremor(y) & MeasuresSize(x,y)) -> UsedFor(x,z))", "all x.(Seismograph(x) -> MeasuresSizeOfTermors(x))", "all x.(Seismograph(x) -> UsedForMeasuringSizeOfTermors(x))", "all x y.((Seismograph(x) & Tremor(y)) -> MeasuresSizeOf(x,y))", "all x.(Seismograph(x) -> MeasuresSizeOfTremors(x))", "all x y z.((Seismograph(x) & Tremor(y) & Tremor(z)) -> MeasuresSize(x,y,z))", "all x y.((Seismograph(x) & Tremor(y)) -> MeasuresSizeOfTremors(x,y))", "all x.(Seismograph(x) -> MeasuresTermorSize(x))", "exists x.(Seismograph(x) & MeasuresSizeOfTremors(x))"]}
{"id": "eqasc_validation_1666", "nl": "These are the waves that do the damage during earthquakes.", "fol": "", "prediction": ["all x.((Waves(x) & Earthquake(x)) -> DoDamage(x))", "all x y.((Waves(x) & Earthquake(y)) -> DoseDamage(x,y))", "all x.(Waves(x) -> DoDamageDuringEarthquakes(x))", "all x y z.((Waves(x) & Earthquake(y) & Wave(z)) -> DoseDamage(x,y,z))", "(Waves(Waves) & DoDamageDuringEarthquakes(Waves))", "all x.((Waves(x) & Earthquake(x)) -> DoseDamage(x))", "all x y.((Waves(x) & Earthquake(y)) -> DoseDamage(x,y))", "(Waves(w) & DoDamageDuringEarthquakes(w))", "(Waves(waves) & DoDamage(waves))", "All x.((Waves(x) & DoDamageDuringEarthquakes(x)) -> DoDamageDuringEarthquakes(x))", "all x y.((Waves(x) & Earthquake(y)) -> DoDamage(x,y))", "all x.((Waves(x) & Earthquake(x)) -> DoDamage(x))", "all x.(Waves(x) -> DoDamageDuringEarthquakes(x))", "exists x.(Waves(x) & DoDamageDuringEarthquakes(x))", "all x y.((Waves(x) & Earthquake(y)) -> Dosage(x,y))", "exists x.(Waves(x) & DoDamage(x,Earthquakes))"]}
{"id": "eqasc_validation_1667", "nl": "a seismograph measures waves that do damage.", "fol": "", "prediction": ["all x.(Seismograph(x) -> MeasuresWaves(x))", "all x y.((Seismograph(x) & Wave(y)) -> Measures(x,y))", "all x.(Seismograph(x) -> MeasuresWaves(x))", "all x y.((Seismograph(x) & Wave(y)) -> MeasuresAndDoesDamage(x,y))", "all x y.((Seismograph(x) & Wave(y) & Measures(x,y)) -> DoseDamage(x))", "all x.((Seismograph(x) & MeasuresWaves(x,damage)) -> Measures(x,damage))", "all x.(Seismograph(x) -> MeasuresWaves(x))", "all x.(Seismograph(x) -> MeasuresWavesDoingDamage(x))", "all x.(Seismograph(x) -> (MeasuresWaves(x) & DoseDamage(x)))", "all x y.((Seismograph(x) & Wave(y)) -> Measures(x,y))", "all x.(Seismograph(x) -> MeasuresWaves(x))", "all x y.((Seismograph(x) & Waves(y)) -> Measures(x,y))", "all x.(Seismograph(x) -> MeasuresWavesDoingDamage(x))", "all x.(Seismograph(x) -> MeasuresWellsThatDoDamage(x))", "exists x.(Seismograph(x) & Measures(x,waves,damage))", "exists x.(Seismograph(x) & MeasuresWaves(x,damage))"]}
{"id": "eqasc_validation_1668", "nl": "Sponges have specialized cells called collar cells.", "fol": "", "prediction": ["all x.(Spot(x) -> HasCollarCells(x))", "all x.(Sponges(x) -> HasCollarCells(x))", "(SpongesHasCollarCells(Sponges))", "all x y.((Spot(x) & CollarCell(y)) -> SpecializedCell(x,y))", "all x.(Spot(x) -> HasCollarCells(x))", "all x.(Spoonge(x) -> HasCollarCells(x))", "all x y z.((Spot(x) & CollarCell(y) & Sponge(z)) -> HasSpecializedCell(x,y,z))", "all x.(Sponges(x) -> HasCollarCells(x))", "all x y.((Sponge(x) & CollarCell(y)) -> SpecializedCell(x,y))", "(SpecializedCells(Sponges) & CollarCells(Sponges))", "all x y.((Spot(x) & CollarCell(y)) -> Specialized(x,y))", "all x.(Spot(x) -> HasCollarCell(x))", "exists x.(Sponge(x) & SpecializedCell(x) & CollarCell(x))", "all x.(Sponge(x) -> HasSpecializedCells(x))", "all x.(Spot(x) -> HasSpecializedCells(x,CollarCells))", "all x y.((Spot(x) & CollarCell(y)) -> Specialized(x,y))"]}
{"id": "eqasc_validation_1669", "nl": "Special cells called collar cells pick up the planktonic food and start the digestive process.", "fol": "", "prediction": ["all x.(CollarCell(x) -> (PicksUpPlanktonicFood(x) & StartsDigestiveProcess(x)))", "all x y.((CollarCell(x) & PlanktonicFood(y)) -> PicksUpAndStartsDigestiveProcess(x,y))", "all x.(CollarCell(x) -> (PickUpPlanktonicFood(x) & StartDigestiveProcess(x)))", "all x y z.((CollarCell(x) & PlanktonicFood(y) & DigestiveProcess(z)) -> PicksUpAndStarts(x,y,z))", "all x y.((CollarCell(x) & PlanktonicFood(y)) -> PicksUpAndStartsDigestiveProcess(x,y))", "all x.(CollarCell(x) -> (PicksUpPlanktonicFood(x) & StartsDigestiveProcess(x)))", "all x y.((CollarCell(x) & PlanktonicFood(y)) -> (PicksUp(x,y) & StartsDigestiveProcess(x)))", "all x y.((SpecialCell(x) & CollarCell(y)) -> (PickUpPlanktonicFood(y,x) & StartDigestiveProcess(y,x)))", "all x.(CollarCell(x) -> (PickUpPlanktonicFood(x) & StartDigestiveProcess(x)))", "exists x.(SpecialCell(x) & CollarCell(x) & PicksUpPlanktonicFood(x) & StartsDigestiveProcess(x))", "all x y z.((CollarCell(x) & PlanktonicFood(y) & DigestiveProcess(z)) -> PicksUpAndStarts(x,y,z))", "all x.(CollarCell(x) -> PicksUpPlanktonicFoodAndStartsDigestiveProcess(x))", "all x.((CollarCell(x) & PicksUpPlanktonicFood(x)) -> DigestiveProcess(x))", "all x.(CollarCell(x) -> (PicksUpPlanktonicFood(x) & StartsDigestiveProcess(x)))", "all x y.((CollarCell(x) & PlanktonicFood(y) & PicksUp(x,y)) -> DigestiveProcess(x))", "all x.(CollarCell(x) -> (PickUpPlanktonicFood(x) & StartDigestiveProcess(x)))"]}
{"id": "eqasc_validation_1670", "nl": "Sponges have specialized cells to pick up planktonic food to digest", "fol": "", "prediction": ["all x y.((Spot(x) & PlanktonicFood(y)) -> HasSpecializedCells(x,y))", "all x.(Spot(x) -> (HasSpecializedCells(x) & PicksUpPlanktonicFood(x) & DigestsPlanktonicFood(x)))", "all x y z.((Spot(x) & PlanktonicFood(y) & PlanktonicFood(z)) -> HasSpecializedCellsToPickUpToDigest(x,y,z))", "all x.(Sponges(x) -> (HasSpecializedCells(x) & PicksUpPlanktonicFood(x) & DigestsPlanktonicFood(x)))", "(SpecializedCellsToPickUpPlanktonicFood(sponges) & DigestPlanktonicFood(sponges))", "all x.(Spot(x) -> (SpecializedCells(x) & PickUpPlanktonicFood(x) & DigestsPlanktonicFood(x)))", "all x.(Spotne(x) -> (HasSpecializedCells(x) & PicksUpPlanktonicFood(x) & DigestsPlanktonicFood(x)))", "all x.(Sponges(x) -> (SpecializedCells(x) & PickUpPlanktonicFood(x) & DigestsPlanktonicFood(x)))", "all x y.((Spot(x) & PlanktonicFood(y)) -> HasSpecializedCellsToPickUp(x,y))", "all x y z.((Sponges(x) & PlanktonicFood(y) & PlanktonicFood(z)) -> HasSpecializedCellsToPickUpToDigest(x,y,z))", "all x y z.((Spot(x) & PlanktonicFood(y) & PlanktonicFood(z)) -> HasSpecializedCellsToPickUpToDigest(x,y,z))", "all x.(Spotne(x) -> (SpecializedCells(x) & PickUpPlanktonicFood(x) & DigestsPlanktonicFood(x)))", "all x y.((Sponges(x) & PlanktonicFood(y)) -> HasSpecializedCells(x,y))", "all x.(Sponges(x) -> (HasSpecializedCells(x) & PicksUpPlanktonicFood(x) & DigestsPlanktonicFood(x)))", "all x y z.((Spot(x) & PlanktonicFood(y) & PlanktonicFood(z) & SpecializedCells(x)) -> PicksUpToDigest(x,y,z))", "all x y.((Spot(x) & PlanktonicFood(y)) -> HasSpecializedCells(x))"]}
{"id": "eqasc_validation_1671", "nl": "Sponges trap and digest food with specialized cells", "fol": "", "prediction": ["all x y z.((Sponges(x) & Food(y) & SpecializedCells(z)) -> (Traps(x,y) & Digests(x,y)))", "all x.(Sponges(x) -> (TrapsFood(x) & DigestsFood(x) & SpecializedCells(x)))", "all x y.((Sponges(x) & Food(y)) -> (Traps(x,y) & DigestsWithSpecializedCells(x)))", "all x y z.((Spot(x) & Food(y) & SpecializedCells(z)) -> (Traps(x,y) & Digests(x,z)))", "all x y.((Spot(x) & Food(y)) -> (Traps(x,y) & Digests(x,y) & SpecializedCells(x)))", "all x.(Sponges(x) -> (TrapsFood(x) & DigestsFoodWithSpecializedCells(x)))", "all x.(Spoonge(x) -> (TrapsFood(x) & DigestsFood(x) & SpecializedCells(x)))", "all x y z.((Spoonge(x) & Food(y) & SpecializedCells(z)) -> (Traps(x,y) & Digests(x,y,z)))", "all x y.((Spoonge(x) & Food(y)) -> (Traps(x,y) & DigestsWithSpecializedCells(x,y)))", "all x y z.((Sponges(x) & Food(y) & SpecializedCells(z)) -> (Traps(x,y) & Digests(x,z)))", "all x.(Sponges(x) -> (TrapsAndDigestsFood(x) & SpecializedCells(x)))", "all x.(Spotge(x) -> (TrapsFood(x) & DigestsFood(x) & SpecializedCells(x)))", "all x y.((Sponges(x) & Food(y) & SpecializedCells(x)) -> (Traps(x,y) & Digests(x,y)))", "all x.(Spoonge(x) -> (TrapsFood(x) & DigestsFoodWithSpecializedCells(x)))", "all x.(Spotge(x) -> (TrapsFood(x) & DigestsFoodWithSpecializedCells(x)))", "all x.(Sponges(x) -> (TrapsAndDigestsFood(x) & SpecializedCells(x)))"]}
{"id": "eqasc_validation_1672", "nl": "Spicules, amoeboid cells, and collar cells are characteristic of sea anemones.", "fol": "", "prediction": ["all x.((Spicule(x) | AmoeboidCell(x) | CollarCell(x)) -> SeaAnemone(x))", "all x y z.((Spicule(x) & AmoeboidCell(y) & CollarCell(z)) -> SeaAnemone(x))", "(CaracteristicOfSeaAnemones(spicules) & CaracteristicOfAnemones(amoeboidCells) & CaracteristicOfCollarCells(seaanemones))", "all x.(Spicule(x) | AmoeboidCell(x) | CollarCell(x)) -> SeaAnemone(x))", "all x y.((Spicule(x) & AmoeboidCell(y) & CollarCell(x)) -> SeaAnemone(x))", "(CharacteristicOfSeaAnemones(spicules) & CharacteristicOfAmoeboidCells(spicules) & CharacteristicOfCollarCells(spicules))", "(CaracteristicOfSeaAnemones(spicules) & CaracteristicOfAmoeboidCells(spicules) & CaracteristicOfCollarCells(spicules))", "(CylindricalOfSeaAnemones(spicules) & CharacteristicOfSeaAnemones(amoeboidCells) & CharacteristicOfCollarCells(seaanemones))", "all x.((Spicule(x) | AmoeboidCell(x) | CollarCell(x)) -> SeaAnemone(x))", "all x y z.((Spicule(x) & AmoeboidCell(y) & CollarCell(z)) -> SeaAnemone(x))", "all x.(Spicules(x) & AmoeboidCells(x) & CollarCells(x)) -> SeaAnemone(x))", "all x y z.((Spicule(x) & AmoeboidCell(y) & CollarCell(z)) -> (CharacteristicOfSeaAnemones(x) & CharacteristicOfSeaAnemones(x)))", "(CharacteristicOfSeaAnemones(Spicules,Spoken,AmeboidCells,CollarCells))", "all x y.((Spicule(x) & AmoeboidCell(y) & CollarCell(y)) -> SeaAnemone(x))", "all x.((Spice(x) | AmoeboidCell(x) | CollarCell(x)) -> SeaAnemone(x))", "all x.((Spicule(x) | AmoeboidCell(x) | CollarCell(x)) -> SeaAnemone(x))"]}
{"id": "eqasc_validation_1673", "nl": "Sponges and sea anemones have similar types of specialized cells.", "fol": "", "prediction": ["all x y.((Spot(x) & SeaAnemone(y)) -> SimilarSpecializedCells(x,y))", "all x.(Spot(x) -> SimilarSpecializedCells(x))", "all x y.((Spot(x) & SeaAnemone(y)) -> (SameSpecializedCells(x,y) & SimilarSpecializedCells(x,y)))", "(all x.(Spotch(x) -> SpecializedCell(x)) & all y.(SeaAnemone(y) -> SpecializedCell(y)))", "all x.((Spote(x) | SeaAnemone(x)) -> SimilarSpecializedCells(x))", "all x.(Sponges(x) -> SimilarSpecializedCells(x))", "(Sponges(spoken) & SeaAnemones(sea) & SimilarSpecializedCells(spoken,s,s))", "(Spots(sponges) & SeaAnemones(sea) & SimilarSpecializedCells(sponges,sea))", "all x y.((Spote(x) & SeaAnemone(y)) -> SimilarSpecializedCells(x,y))", "(Spots(sponges) & SeaAnemones(seaanemones) & SimilarSpecializedCells(sponges,seaanemones))", "(all x.(Sponges(x) -> SpecializedCells(x)) & all y.(SeaAnemone(y) -> SpecializedCells(y)))", "all x y.((Sponges(x) & SeaAnemone(y)) -> SimilarSpecializedCells(x,y))", "all x.(Spote(x) & SeaAnemone(x)) -> SimilarSpecializedCells(x))", "all x.(Spotton(x) & SeaAnemone(x)) -> SimilarSpecializedCells(x))", "all x y.((Spot(x) & SeaAnemone(y)) -> SimilarSpecializedCells(x,y))", "exists x.(Spote(x) & SeaAnemone(x) & SimilarSpecializedCells(x))"]}
{"id": "eqasc_validation_1674", "nl": "Flagellum of collar cell cause current to pass over collar and food is collected.", "fol": "", "prediction": ["all x y.((Flagellum(x) & CollarCell(y)) -> (CurrentPassesOver(x,y) & FoodCollected(x)))", "all x y z.((Flagellum(x) & CollarCell(y) & Food(z)) -> (CausesCurrentToPassOver(x,y) & Collects(x,z)))", "all x.((Flagellum(x) & CollarCell(x)) -> (CurrentPassesOverCollar(x) & FoodCollected(x)))", "all x.((FlagellumOfCollarCell(x) & CurrentPassesOverCollar(x)) -> FoodCollected(x))", "all x y.((Flagellum(x) & CollarCell(y)) -> (CausesCurrentToPassOver(x,y) & FoodCollected(x)))", "all x.((CellCell(x) & Flagellum(x)) -> (CurrentPassesOverCollar(x) & FoodCollected(x)))", "all x y z.((Flagellum(x) & CollarCell(y) & Current(z)) -> (CausesCurrent(x,y,z) & FoodCollected(x)))", "(all x.(Cell(x) -> CausesCurrentToPass(x)) & all y.(Food(y) -> Collects(y)))", "all x y.((CollarCell(x) & Flagellum(y)) -> (CurrentPassesOverCollar(y) & FoodCollected(y)))", "(all x.(CollarCell(x) -> CausesCurrentToPassOver(x)) & all y.(Collar(y) -> CollectsFood(y)))", "all x.(CollarCell(x) -> (FlagellumOfCollar(x) & CurrentPassesOverCollar(x) & FoodCollected(x)))", "all x.(CellCell(x) -> (FlagellumOfCollarCell(x) & CurrentPassesOverCollar(x) & FoodCollected(x)))", "all x y z.((FlagellumOfCollarCell(x) & Current(y) & Food(z)) -> CausesToPassOverCollarAndCollects(x,y,z))", "all x.((CollarCell(x) & Flagellum(x)) -> (CurrentPassesOverCollar(x) & FoodCollected(x)))", "all x y z.((Flagellum(x) & CollarCell(y) & Food(z)) -> CausesCurrentToPassOver(x,y,z))", "all x y.((Flagellum(x) & CollarCell(y)) -> (CausesCurrentToPass(x,y) & FoodCollected(x,y)))"]}
{"id": "eqasc_validation_1675", "nl": "Sponges use specialized cells with flagellum to collect food.", "fol": "", "prediction": ["all x.(Sponges(x) -> (UsesSpecializedCells(x) & HasFlagellum(x) & CollectsFood(x)))", "all x.(Spot(x) -> (UsesSpecializedCells(x) & HasFlagellum(x) & CollectsFood(x)))", "all x y.((Spot(x) & Sparrow(y)) -> UsesSpecializedCellsWithFlagellum(x,y))", "all x y.((Sponge(x) & SpecializedCell(y) & Flagellum(y)) -> CollectsFood(x,y))", "all x y z.((Sponge(x) & SpecializedCell(y) & Flagellum(z)) -> CollectsFood(x,y,z))", "all x.(Spoonge(x) -> (UsesSpecializedCells(x) & HasFlagellum(x) & CollectsFood(x)))", "all x.(Sponge(x) -> (UsesSpecializedCells(x) & HasFlagellum(x) & CollectsFood(x)))", "all x y.((Spot(x) & SpecializedCell(y) & Flagellum(y)) -> CollectsFood(x,y))", "all x.(Spot(x) -> (UsesSpecializedCells(x) & HasFlagellum(x) & CollectsFood(x)))", "all x y z.((Spot(x) & SpecializedCell(y) & Flagellum(z)) -> CollectsFood(x,y,z))", "all x y.((Sponge(x) & Sponge(y)) -> UsesSpecializedCellsWithFlagellum(x,y))", "all x.(Sponges(x) -> UsesSpecializedCellsWithFlagellum(x))", "(all x.(Sponges(x) -> UsesSpecializedCellsWithFlagellum(x)))", "all x.(Spotge(x) -> (UsesSpecializedCellsWithFlagellum(x) & CollectsFood(x)))", "all x y z.((Sponge(x) & SpecializedCell(y) & Flagellum(z)) -> CollectsFood(x,y,z))", "all x.(Sponges(x) -> UsesSpecializedCellsWithFlagellum(x))"]}
{"id": "eqasc_validation_1676", "nl": "Sponges are asymetrical and have many special types of cells.", "fol": "", "prediction": ["all x.(Spot(x) -> (Asymetrical(x) & HasSpecialCells(x)))", "all x.(Sponge(x) -> (Asymetrical(x) & HasSpecialCells(x)))", "all x.(Spoonge(x) -> (Asymetrical(x) & HasSpecialCells(x)))", "all x y.((Spot(x) & Asymetric(y)) -> (HasSpecialCells(x,y)))", "all x.(Spot(x) -> (Asymetrical(x) & ManySpecialCells(x)))", "(Asymetrical(sponges) & ManySpecialCells(sponges))", "all x.(Sponges(x) -> (Asymetrical(x) & ManySpecialCells(x)))", "all x.(Spot(x) -> (Asymetric(x) & HasSpecialCells(x)))", "all x y.((Spot(x) & Asymetric(y)) -> (HasSpecialCell(x,y) & Asymetric(x)))", "all x y.((Sponge(x) & Asymetrical(y)) -> HasSpecialCells(x,y))", "all x.(Spoonge(x) -> (Asymetrical(x) & ManySpecialCells(x)))", "exists x.(Spoonge(x) & Asymetrical(x) & exists y.(SpecialCellType(y) & Has(x,y))))", "all x.(Sponge(x) -> (Asymetrical(x) & HasSpecialCellTypes(x)))", "exists x.(Spote(x) & Asymetrical(x) & ManySpecialCellTypes(x))", "all x y.(Spot(x) -> (Asymetrical(x) & SpecialTypesOfCells(y)))", "all x.(Spot(x) -> (Asymetrical(x) & HasSpecialCellTypes(x)))"]}
{"id": "eqasc_validation_1677", "nl": "Sponges are asymmetrical and have collar cells", "fol": "", "prediction": ["all x.(Sponges(x) -> (Asymmetrical(x) & HasCollarCells(x)))", "all x.(Spot(x) -> (Asymmetrical(x) & HasCollarCells(x)))", "all x y.((Sponge(x) & Asymmetrical(x) & CollarCell(y)) -> HasCollarCell(x,y))", "all x.(Sponge(x) -> (Asymmetrical(x) & HasCollarCells(x)))", "(AsymmetricalSpots(sponges) & HasCollarCells(sponges))", "all x.(Spoonge(x) -> (Asymmetrical(x) & HasCollarCells(x)))", "all x y.((Spot(x) & Asymmetrical(x) & CollarCell(y)) -> HasCollarCell(x,y))", "all x y z.((Sponge(x) & Asymmetrical(x) & CollarCells(y) & Has(x,z)) -> Asymmetrical(x))", "all x.(Spot(x) -> (Asymmetrical(x) & HasCollarCells(x)))", "(AsymmetricalSponges(sponges) & HasCollarCells(sponges))", "all x.(Sponges(x) -> (Asymmetrical(x) & HasCollarCells(x)))", "all x y.((Sponge(x) & Asymmetrical(x) & CollarCell(y)) -> HasCollarCells(x,y))", "(all x.(Sponges(x) -> Asymmetrical(x)) & CollarCells(x))", "all x.(Spoonge(x) -> (Asymmetrical(x) & HasCollarCells(x)))", "all x.(Spot(x) -> (Asymmetrical(x) & HasCollarCells(x)))", "all x.(Sponge(x) -> (Asymmetrical(x) & HasCollarCells(x)))"]}
{"id": "eqasc_validation_1678", "nl": "Collar cells produce a constant flow of water into the sponge.", "fol": "", "prediction": ["all x y.((CollarCell(x) & Sponge(y)) -> ProducesConstantFlowOfWater(x,y))", "all x.(CollarCell(x) -> ProducesConstantFlowOfWaterIntoSponge(x))", "all x y z.((CollarCell(x) & Sponge(y) & Water(z)) -> ProducesConstantFlow(x,y,z))", "all x y.((CollarCell(x) & Sponge(y)) -> ProducesConstantFlowOfWater(x,y))", "all x.(CollarCell(x) -> ProducesConstantFlowOfWater(x))", "all x y z.((CollarCell(x) & Sponge(y) & WaterFlow(z)) -> ProducesConstantFlow(x,y,z))", "all x.(ColarCell(x) -> ProducesConstantFlowOfWaterIntoSponge(x))", "all x y.((CollarCell(x) & Sponge(y)) -> ProducesConstantFlowOfWaterInto(x,y))", "all x.(CollarCell(x) -> ProducesConstantFlowOfWaterIntoSponge(x))", "all x y z.((CollarCell(x) & Sponge(y) & Water(z)) -> ProducesConstantFlowInto(x,y,z))", "all x.(CollarCell(x) -> (ProducesConstantFlowOfWater(x) & IntoSponge(x)))", "all x.(CollarCell(x) -> ConstantFlowOfWaterIntoSponge(x))", "all x.(CollarCell(x) -> ProducesConstantFlowOfWater(x))", "all x.(ColarCell(x) -> ProducesConstantFlowOfWater(x))", "all x y.((CollarCell(x) & Sponge(y)) -> ProducesConstantFlowOfWater(x,y))", "all x y.((CollarCell(x) & Sponge(y)) -> ConstantFlowOfWater(x,y))"]}
{"id": "eqasc_validation_1679", "nl": "sponges have specialized work horses that produce constant flow of water to the sponge.", "fol": "", "prediction": ["all x.(Sponge(x) -> (SpecializedWorkHorse(x) & ProducesConstantFlowOfWater(x)))", "all x y.((Sponge(x) & SpecializedWorkHorse(y)) -> ProducesConstantFlowOfWater(x,y))", "all x.(Sponge(x) -> (HasSpecializedWorkHorse(x) & ProducesConstantFlowOfWater(x)))", "all x y z.((Sponge(x) & SpecializedWorkHorse(y) & Water(z)) -> ProducesConstantFlow(x,y,z))", "all x y.((Sponge(x) & Sponge(y)) -> (SpecializedWorkHorse(x) & ProducesConstantFlowOfWater(x,y)))", "(all x.(Sponge(x) -> SpecializedWorkHorse(x)) & ProducesConstantFlowOfWater(x))", "all x y.((Sponge(x) & SpecializedWorkHorse(y)) -> ProducesConstantFlowOfWaterTo(x,y))", "all x y.((Sponge(x) & WorkHorse(y)) -> (Specialized(x,y) & ProducesConstantFlowOfWater(x,y)))", "all x y z.((Sponge(x) & WorkHorse(y) & Sponge(z)) -> (SpecializedWorkHorse(y) & ProducesConstantFlowOfWater(z)))", "all x.(Sponge(x) -> (SpecializedWorkHorse(x) & ProducesConstantFlowOfWater(x)))", "all x.(Sponge(x) -> (HasSpecializedWorkHorse(x) & ProducesConstantFlowOfWater(x)))", "all x.(Sponge(x) -> (SpecializedWorkHorse(x) & ProducesConstantFlowOfWater(x)))", "all x.(Sponge(x) -> (HasSpecializedWorkHorse(x) & ProducesConstantFlowOfWater(x)))", "all x y.((Sponge(x) & SpecializedWorkHop(y)) -> ProducesConstantFlowOfWater(x,y))", "all x.(Sponge(x) -> (SpecializedWorkHorse(x) & ProducesConstantFlowOfWater(x)))", "all x.(Sponge(x) -> (HasSpecializedWorkHorse(x) & ProducesConstantFlowOfWater(x)))"]}
{"id": "eqasc_validation_1680", "nl": "medicine is used for curing people when they are sick", "fol": "", "prediction": ["all x y.((Medicine(x) & Person(y) & Sick(y)) -> UsedForCuring(x,y))", "all x y z.((Medicine(x) & Person(y) & Sick(z)) -> UsedForCuring(x,y,z))", "all x.((Medicine(x) & Person(y) & Sick(y)) -> UsedForCuring(x,y))", "all x y.((Medicine(x) & Person(y) & Sick(y)) -> UsedForCuring(x,y))", "all x y z.((Medicine(x) & Person(y) & Sick(z) & UsedForCuring(x,y,z)) -> Curing(x,y,z))", "all x.((Medicine(x) & Sick(x)) -> UsedForCuringPeople(x))", "all x y.((Medicine(x) & Person(y) & Sick(y)) -> UsedForCuring(x,y))", "all x y z.((Medicine(x) & Person(y) & Sick(z) & UsedForCuring(x,y,z)) -> UsedForCuring(x,y,z))", "all x.((Medicine(x) & PersonSick(x)) -> UsedForCuring(x))", "all x.((Medicine(x) & Person(x) & Sick(x)) -> UsedForCuring(x))", "all x y.((Medicine(x) & Person(y) & Sick(y)) -> UsedForCuring(x,y))", "all x.((Medicine(x) & Sick(x)) -> UsedForCuringPeople(x))", "all x y z.((Medicine(x) & Person(y) & Sick(z) & UsedForCuring(x,y,z)) -> Cures(x,y,z))", "all x y.((Medicine(x) & Person(y) & Sick(y)) -> Cures(x,y))", "all x.((Medicine(x) & Sick(x) & People(x)) -> UsedForCuring(x))", "all x y.((Medicine(x) & Person(y) & Sick(y)) -> UsedForCuring(x,y))"]}
{"id": "eqasc_validation_1681", "nl": "Herbs are medicines and aids.", "fol": "", "prediction": ["all x.(Herb(x) -> (Medicine(x) & Aid(x)))", "all x.(Herb(x) -> (Medicine(x) & Aid(x)))", "all x y.((Herb(x) & Medicine(y)) -> Aid(x,y))", "all x.(Herb(x) -> (Medicine(x) & Aid(x)))", "(all x.(Herb(x) -> Medicine(x) & Aid(x)))", "all x y.((Herb(x) & Medicine(y)) -> Aid(x,y))", "all x.(Herb(x) -> (Medicine(x) | Aid(x)))", "all x y.((Herb(x) & Medicine(y)) -> Aid(x,y))", "all x.(Herb(x) -> (Medicine(x) & Aid(x)))", "all x y.(Herb(x) -> (Medicine(y) | Aid(y)))", "all x.(Herb(x) -> (Medicine(x) | Aid(x)))", "all x.(Herb(x) -> (Medicine(x) & Aid(x)))", "all x.(Herb(x) -> (Medicine(x) & Aid(x)))", "all x.(Herb(x) -> (Medication(x) | Aid(x)))", "all x.(Herb(x) -> (Medicine(x) & Aid(x)))", "All x.(Herb(x) -> (Medication(x) | Aid(x)))"]}
{"id": "eqasc_validation_1682", "nl": "herbs are used for curing people when they are sick", "fol": "", "prediction": ["all x y.((Herb(x) & Person(y) & Sick(y)) -> UsedForCuring(x,y))", "all x y z.((Herb(x) & Person(y) & Sick(z)) -> UsedForCuring(x,y,z))", "all x y.((Herb(x) & Person(y) & Sick(y)) -> UsedForCuring(x,y))", "all x.((Herb(x) & Sick(x)) -> UsedForCuringPeople(x))", "all x y z.((Herb(x) & Person(y) & Sick(z)) -> UsedForCuring(x,y,z))", "all x.((Herb(x) & Person(x) & Sick(x)) -> UsedForCuring(x))", "all x y z.((Herb(x) & Person(y) & Sick(z) & UsedForCuring(x,y,z)) -> UsedForCuring(x,y,z))", "all x y.((Herb(x) & Person(y) & Sick(y)) -> UsedForCuring(x,y))", "all x.((Herb(x) & Sick(x)) -> UsedForCuringPeople(x))", "all x y z.((Herb(x) & Person(y) & Sick(z) & UsesForCuring(x,y,z)) -> UsedForCuring(x,y,z))", "all x.((Herbs(x) & Sick(x)) -> UsedForCuringPeople(x))", "all x y.((Herb(x) & Person(y) & Sick(y)) -> UsedForCuring(x,y))", "all x.((Herb(x) & Person(x) & Sick(x)) -> UsedForCuring(x))", "all x.((Herb(x) & Sick(x)) -> UsedForCuringPeople(x))", "all x y.((Herb(x) & Person(y) & Sick(y)) -> Cures(x,y))", "all x y.((Herb(x) & People(y)) -> UsedForCuringWhenSick(x,y))"]}
{"id": "eqasc_validation_1683", "nl": "Drugs are small medicine.", "fol": "", "prediction": ["all x.(Drug(x) -> SmallMedicine(x))", "all x.(Drug(x) -> SmallMedicine(x))", "all x y.((Drug(x) & SmallMedicine(y)) -> (Medicine(x,y) & SmallMedicine(x)))", "all x.(Drug(x) -> SmallMedicine(x))", "all x y.((Drug(x) & SmallMedicine(y)) -> Is(x,y))", "(SmallMedicine(drug,drug))", "(SmallMedicine(drug)", "all x.(Drug(x) -> SmallMedicine(x))", "all x y.((Drug(x) & SmallMedicine(y)) -> UsedFor(x,y))", "all x.(Drug(x) -> SmallMedicine(x))", "all x.(Doctor(x) -> SmallMedium(x))", "all x.(Drug(x) -> SmallMedicine(x))", "all x.(Doctor(x) -> SmallMedium(x))", "all x.(Drogen(x) -> SmallMedicine(x))", "all x.(Drug(x) -> SmallMedium(x))", "exists x.(Doctor(x) & SmallMedicine(x))"]}
{"id": "eqasc_validation_1684", "nl": "drugs can cure people when they are sick", "fol": "", "prediction": ["all x y.((Drug(x) & Person(y) & Sick(y)) -> CanCure(x,y))", "all x y z.((Drug(x) & Person(y) & Sick(z) & Cures(x,y,z)) -> CanCure(x,y,z))", "all x.((Drug(x) & Sick(x)) -> CanCurePeople(x))", "all x y.((Drug(x) & Person(y) & Sick(y)) -> CanCure(x,y))", "all x y z.((Drug(x) & Person(y) & Sick(z) & CanCure(x,y,z)) -> CanCure(x,y,z))", "all x.((Drug(x) & Person(y) & Sick(y)) -> CanCure(x,y))", "(all x y.((Drug(x) & Person(y) & Sick(y)) -> CanCure(x,y)))", "all x y.((Drug(x) & Person(y) & Sick(y)) -> CanCure(x,y))", "all x.((Drug(x) & Sick(x)) -> CanCurePeople(x))", "all x.(CuresPeopleWhenSick(x) -> CanCurePeople(x))", "all x y z.((Drug(x) & Person(y) & Sick(z) & Cures(x,y,z)) -> CanCure(x,y,z))", "all x.((Drug(x) & PersonSick(x)) -> CanCure(x,PersonSick))", "all x y.((Drug(x) & Person(y) & Sick(y)) -> CanCure(x,y))", "all x.((Drug(x) & Sick(x)) -> CanCure(x,Person))", "all x y.((Drug(x) & Person(y) & Sick(y)) -> CanCure(x,y))", "all x y.((Drug(x) & Person(y) & Sick(y)) -> Cures(x,y))"]}
{"id": "eqasc_validation_1685", "nl": "If the patient looks sick, then the patient is sick.", "fol": "", "prediction": ["all x.(LooksSick(x) -> Sick(x))", "all x.((Patient(x) & LooksSick(x)) -> Sick(x))", "(LooksSick(patient) -> Sick(patient))", "all x y.((Patient(x) & LooksSick(x)) -> Sick(x))", "all x.(LooksSick(x) -> Sick(x))", "all x.((Patient(x) & LooksSick(x)) -> Sick(x))", "all x.(Sick(x) -> Patient(x))", "all x y.((Patient(x) & LooksSick(x)) -> Sick(y))", "-LooksSick(-Patient)", "all x.(LooksSick(x) -> Sick(x))", "all x.((Patient(x) & LooksSick(x)) -> Sick(x))", "exists x.(Patient(x) & LooksSick(x))", "all x y.((Patient(x) & LooksSick(x)) -> Sick(x))", "all x.(Sick(x) -> Patient(x))", "all x.(LooksSick(x) -> PatientSick(x))", "all x.((Patient(x) & LooksSick(x)) -> Sick(x))"]}
{"id": "eqasc_validation_1686", "nl": "Medicine is used for curing patients.", "fol": "", "prediction": ["all x y.((Medicine(x) & Patient(y)) -> UsedForCuring(x,y))", "all x.(Medicine(x) -> UsedForCuringPatients(x))", "all x y z.((Medicine(x) & Patient(y) & Patient(z)) -> UsedForCuring(x,y,z))", "all x y.((Medicine(x) & Patient(y)) -> Cure(x,y))", "all x.(Medicine(x) -> UsedForCuringPatients(x))", "all x.(Medicine(x) -> CuresPatients(x))", "all x y.((Medicine(x) & Patient(y)) -> UsedForCuring(x,y))", "all x y z.((Medicine(x) & Patient(y) & Patient(z)) -> Cure(x,y,z))", "(all x.(Medicine(x) -> CuresPatients(x)))", "all x y.((Medicine(x) & Patient(y)) -> Cure(x,y))", "all x.(Medicine(x) -> UsedForCuringPatients(x))", "all x.(Medicine(x) -> CuresPatients(x))", "all x y.((Medicine(x) & Patient(y)) -> UsedForCuring(x,y))", "all x.(Medicine(x) -> CuringPatients(x))", "all x.(Medicine(x) -> UsedForCuringPatients(x))", "exists x.(Medicine(x) & CuresPatients(x))"]}
{"id": "eqasc_validation_1687", "nl": "If the medicine is in the form of a pill, swallow the pill whole.", "fol": "", "prediction": ["all x.((Medicine(x) & Pill(x)) -> SwallowPillWhole(x))", "all x.((Medicine(x) & InFormOfPill(x)) -> SwallowPillWhole(x))", "all x.((Medicine(x) & Pill(x)) -> SwallowWhole(x))", "all x y.((Medicine(x) & Pill(y)) -> SwallowsWhole(x,y))", "all x.((Medication(x) & FormOfPill(x)) -> SwallowPillWhole(x))", "all x y.((Medicine(x) & Pill(y) & InFormOf(x,y)) -> SwallowPillWhole(x))", "exists x.(Medicine(x) & Pill(x) & InFormOf(x,y)) -> SwallowPillWhipped(x))", "all x.((Medication(x) & InPill(x)) -> SwallowPillWhole(x))", "all x.((Medicine(x) & Pill(x)) -> SwallowPillWhipped(x))", "(all x.(Pill(x) -> InFormOf(x,Pill)))", "all x.(Pill(x) -> SwallowPillWhole(x))", "all x y.((Medicine(x) & Pill(y) & InFormOf(x,y)) -> SwallowPillWhipped(x))", "all x.((Medicine(x) & FormOfPill(x)) -> SwallowPillWhipped(x))", "all x y.((Medicine(x) & Pill(y)) -> SwallowsWhole(x,y))", "all x.((Medication(x) & Pill(x)) -> SwallowsWhole(x))", "all x y.((Medication(x) & Pill(y)) -> SwallowWhole(x,y))"]}
{"id": "eqasc_validation_1688", "nl": "swallowing pills whole is used for curing people when they are sick", "fol": "", "prediction": ["all x y.((Pill(x) & Person(y) & Sick(y)) -> UsedForCuring(x,y))", "all x.((Pill(x) & Sick(x)) -> UsedForCuring(x))", "all x.((Sick(x) & SwallowingPillsWhole(x)) -> UsedForCuringPeople(x))", "all x y.((Pill(x) & Sick(y)) -> UsedForCuring(x,y))", "all x y z.((Pill(x) & Sick(y) & Sick(z) & SwallowingPillsWhole(x,y)) -> UsedForCuring(x,z))", "all x.((Pills(x) & Sick(x)) -> UsedForCuring(x))", "all x.((Sick(x) & SwallowingPillsWhole(x)) -> UsedForCuringPeople(x))", "all x y z.((Pill(x) & Person(y) & Sick(z) & SwallowsPillsWhole(x,y,z)) -> UsedForCuring(x,y,z))", "all x y.((Pill(x) & Person(y) & Sick(y)) -> UsedForCuring(x,y))", "all x.((Pilloys(x) & Sick(x)) -> UsedForCuring(x))", "all x y.((Sick(x) & SwallowingPillsWhole(x) & Person(y) & Sick(y)) -> UsedForCuring(x,y))", "all x y.((Pill(x) & Sick(y)) -> UsedForCuring(x,y))", "exists an x y.(Sick(x) & SwallowingPillsWhole(x) & UsedForCuring(x,y))", "all x.((Sick(x) & SwallowingPillsWhole(x)) -> UsedForCuring(x))", "all x.((Pills(x) & Sick(x)) -> UsedForCuringPeople(x))", "all x y.((Pill(x) & Person(y) & Sick(y)) -> UsedForCuring(x,y))"]}
{"id": "eqasc_validation_1689", "nl": "Prescription and non-prescription medicines and supplies ordered by a physician.", "fol": "", "prediction": ["all x y.((Prescription(x) & NonPrescription(x)) -> OrderedBy(x,y))", "all x y z.((Prescription(x) & NonPrescription(y) & Medicine(z) & Supplies(z)) -> OrderedBy(x,y,z))", "all x y z.((PrescriptionMedication(x) & NonPrescriptionMedication(y) & Supplies(z) & OrderedBy(x,y,z)) -> Physician(x))", "all x.((PrescriptionMedications(x) | NonPrescriptionMedications(x)) & OrderedByPharmacist(x)) -> OrderedByPharmacist(x))", "all x y.((PrescriptionMedication(x) & NonPrescriptionMedication(x) & Supplies(y)) -> OrderedBy(x,y))", "(OrdersPrescriptionAndNonPrescriptionMedicationsAndSupplies(x) & Physician(x))", "(all x y.((Prescription(x) & -Prescription(x)) -> OrderedBy(x,y)) & all z w.((Medication(z) & Supplies(w)) -> OrderedBy(x,z))))", "all x.((Prescription(x) | NonPrescription(x)) -> OrderedByPharmacist(x))", "all x y.((PrescriptionMedication(x) & NonPrescriptionMedication(y)) -> OrderedBy(x,y))", "exists x.(Medication(x) & PrescriptionMedication(x) & NonPrescriptionMedication(x) & OrderedBy(x,Physician))", "all x.((Medicine(x) & Prescription(x) & NonPrescription(x)) -> OrderedByPharmacist(x))", "all x y z.((PrescriptionMedication(x) & NonPrescriptionMedication(y) & Supplies(z) & OrderedBy(x,y,z)) -> Physician(x))", "all x.(PrescriptionAndNonPrescriptionMedicationsAndSupplies(x) -> OrderedByPharmacist(x))", "all x.((PrescriptionMedication(x) | NonPrescriptionMedication(x)) -> OrderedByDoctor(x))", "all x y.((PrescriptionMedication(x) & NonPrescriptionMedication(x) & PrescriptionSupplies(y)) -> OrderedBy(x,y))", "all x y z.((Prescription(x) | NonPrescription(x)) & Medicine(y) & Supplies(z) & OrderedBy(x,y,z)) -> Physician(x))"]}
{"id": "eqasc_validation_1690", "nl": "Physicians write prescriptions when people are sick.", "fol": "", "prediction": ["all x y.((Pharmacist(x) & Person(y) & Sick(y)) -> WritesPrescription(x,y))", "all x y z.((Pharmacist(x) & Person(y) & Sick(z)) -> WritesPrescription(x,y,z))", "all x.((Pharmacist(x) & PersonSick(x)) -> WritesPrescription(x))", "all x y.((PhD(x) & Person(y) & Sick(y)) -> WritesPrescription(x,y))", "all x y.((Pharmacist(x) & Person(y) & Sick(y)) -> WritesPrescription(x,y))", "all x.((Pharmacist(x) & PersonSick(x)) -> WritesPrescription(x))", "all x y z.((Pharmacist(x) & Person(y) & Sick(z)) -> WritesPrescription(x,y,z))", "all x y z.((PhD(x) & Person(y) & Sick(z)) -> WritesPrescription(x,y,z))", "all x.((PhD(x) & PersonSick(x)) -> WritesPrescriptions(x))", "all x y.((PhD(x) & Person(y) & Sick(y)) -> WritesPrescription(x,y))", "all x.((Pharmacist(x) & PersonSick(x)) -> WritesPrescriptions(x))", "all x y.((Pharmacist(x) & Person(y) & Sick(y)) -> WritesPrescription(x,y))", "exists x.(Pharmacist(x) & WritesPrescriptions(x))", "exists x.(Pharmacist(x) & WritesPrescriptions(x))", "all x y.((Physician(x) & Person(y) & Sick(y)) -> WritesPrescriptions(x,y))", "all x.((Pharmacist(x) & PersonSick(x)) -> WritesPrescriptions(x))"]}
{"id": "eqasc_validation_1691", "nl": "People get sick but they get better.", "fol": "", "prediction": ["all x.(Person(x) -> (GetsSick(x) & GetsBetter(x)))", "all x.(People(x) -> (GetsSick(x) & GetsBetter(x)))", "(all x.(Person(x) -> GetsSick(x)) & all y.(Person(y) -> GetsBetter(y)))", "all x.((Person(x) & Sick(x)) -> Better(x))", "all x.(Person(x) -> (GetsSick(x) & GetsBetter(x)))", "all x y.((Person(x) & Sick(y)) -> Better(x,y))", "all x y.((Person(x) & Person(y)) -> (GetsSick(x) & GetsBetter(y)))", "(all x.(Person(x) -> GetsSick(x)) & all y.(Person(y) -> GetsBetter(y)))", "exists x.(Person(x) & GetsSick(x) & GetsBetter(x))", "exists x.(People(x) & GetsSick(x) & GetsBetter(x))", "exists x.(Person(x) & Sick(x) & Better(x))", "(all x.(Person(x) -> GetsSick(x)) & all y.(Person(y) -> GetsBetter(y)))", "exists x.(Person(x) & GetsSick(x) & GetsBetter(x))", "all x y.((Person(x) & Person(y)) -> (GetsSick(x) & GetsBetter(y)))", "all x y.((Person(x) & Sick(y)) -> Better(x,y))", "exists x.(Person(x) & GetsSick(x) & GetsBetter(x))"]}
{"id": "eqasc_validation_1692", "nl": "medicine is used for getting people better.", "fol": "", "prediction": ["all x y.((Medicine(x) & Person(y)) -> UsedForBetter(x,y))", "all x.(Medicine(x) -> (GetsPeopleBetter(x)))", "all x.(Medicine(x) -> GetsPeopleBetter(x))", "all x y.((Medicine(x) & Person(y)) -> UsedForBetter(x,y))", "all x y z.((Medicine(x) & Person(y) & Person(z)) -> UsedForBetter(x,y,z))", "all x.(Medicine(x) -> (UsedForGettingPeopleBetter(x)))", "all x y.((Medicine(x) & Person(y)) -> UsedForGettingBetter(x,y))", "all x y z.((Medicine(x) & Person(y) & Person(z)) -> UsedForBetter(x,y,z))", "all x.(Medicine(x) -> GetsPeopleBetter(x))", "all x y.((Medicine(x) & Person(y)) -> UsedForBetter(x,y))", "all x.(Medicine(x) -> UsedForGettingPeopleBetter(x))", "all x y.((Medicine(x) & Person(y) & UsedFor(x,y)) -> Better(y))", "all x y.((Medicine(x) & Patient(y)) -> GetsBetter(x,y))", "all x.(Medicine(x) -> (GetsPeopleBetter(x)))", "exists x.(Medicine(x) & HelpsGetPersonsBetter(x))", "exists x.(Medicine(x) & GetsPeopleBetter(x))"]}
{"id": "eqasc_validation_1693", "nl": "When a child is hungry or sick, food and medicine are needed.", "fol": "", "prediction": ["all x.((Child(x) & (Hungry(x) | Sick(x))) -> (NeedsFood(x) & NeedsMedication(x)))", "all x.((Child(x) & Hungry(x) | Sick(x)) -> (NeedsFood(x) & NeedsMedication(x)))", "all x y.((Child(x) & (Hungry(x) | Sick(x))) -> (NeedsFood(x) & NeedsMedication(x)))", "all x.((Child(x) & (Hungry(x) | Sick(x))) -> (NeedsFood(x) & NeedsMedication(x)))", "all x.(Hungry(x) | Sick(x)) -> (NeedsFood(x) & NeedsMedication(x)))", "all x.((Child(x) & Hungry(x) & (Sick(x) | Hungry(x))) -> (NeedsFood(x) & NeedsMedication(x)))", "all x y.((Child(x) & Hungry(x) & Child(y) & Sick(y)) -> (NeedsFood(x,y) & NeedsMedication(x,y)))", "all x y.((Child(x) & (Hungry(x) | Sick(x))) -> (NeedsFood(x) & NeedsMedication(x)))", "all x.((Child(x) & (Hungry(x) | Sick(x))) -> NeededFoodAndMedicine(x))", "all x.(Hungry(x) | Sick(x)) -> (NeedsFood(x) & NeedsMedication(x)))", "exists x.(Child(x) & (Hungry(x) | Sick(x)) & NeedsFoodAndMedicine(x))", "all x y.((Child(x) & (Hungry(x) | Sick(x))) -> (NeedsFood(y) & NeedsMedicine(y)))", "all x.((Child(x) & Hungry(x) | Sick(x)) -> (NeedsFood(x) & NeedsMedication(x)))", "all x.((Child(x) & (Hungry(x) | Sick(x))) -> (NeedsFood(x) & NeedsMedicine(x)))", "exists x.(Child(x) & (Hungry(x) | Sick(x)) & NeedsFoodAndMedicine(x))", "exists x.(Hungry(x) | Sick(x)) & NeedsFoodAndMedicine(x))"]}
{"id": "eqasc_validation_1694", "nl": "a sick child needs food", "fol": "", "prediction": ["all x.((Child(x) & Sick(x)) -> NeedsFood(x))", "all x.(SickChild(x) -> NeedsFood(x))", "all x y.((Child(x) & Sick(x)) -> NeedsFood(x,y))", "all x y.((SickChild(x) & NeedsFood(x,y)) -> NeedsFood(x,y))", "all x y.((Child(x) & Sick(x) & NeedsFood(x,y)) -> NeedsFood(x,y))", "all x.((Child(x) & Sick(x)) -> NeedsFood(x))", "all x y z.((SickChild(x) & Food(y) & Food(z)) -> Needs(x,y,z))", "all x.(SickChild(x) -> NeedsFood(x))", "exists x,y,z.(SickChild(x) & NeedsFood(y) & NeedsFood(z))", "all x.((Child(x) & Sick(x)) -> NeedsFood(x))", "all x y.((SickChild(x) & Child(y)) -> NeedsFood(x,y))", "all x y.((Child(x) & Sick(y)) -> NeedsFood(x,y))", "all x.(SickChild(x) -> NeedsFood(x))", "all x.((Child(x) & Sick(x)) -> NeedsFood(x))", "all x.(SickChild(x) -> NeedsFood(x))", "all x.((Child(x) & Sick(x)) -> NeedsFood(x))"]}
{"id": "eqasc_validation_1695", "nl": "Botanical Medicine Many plant substances are powerful medicines.", "fol": "", "prediction": ["all x.(BotanicalMedicine(x) -> (ManyPlantSubstances(x) & PowerfulMedication(x)))", "all x.(BotanicalMedicine(x) -> (ManyPlantSubstances(x) & PowerfulMedication(x)))", "exists x.(PlantSubstance(x) & BotanicalMedicine(x) & PowerfulMedicine(x))", "all x y.((PlantSubstance(x) & PlantSubstance(y)) -> PowerfulMedication(x,y))", "all x.((PlantSubstance(x) & BotanicalMedicine(x)) -> PowerfulMedicine(x))", "many plant substances are powerfulMedications(plant)", "all x.(BotanicalMedicine(x) -> (ManyPlantSubstances(x) & PowerfulMedicine(x)))", "exists x.(PlantSubstance(x) & PowerfulMedication(x))", "all x y.((PlantSubstance(x) & PlantSubstance(y)) -> PowerfulMedication(x))", "all x.(BotanicalMedicine(x) -> PowerfulMedicine(x))", "exists x.(PlantSubstance(x) & BotanicalMedicine(x) & PowerfulMedicine(x))", "all x.(BotanicalMedicine(x) -> (ManyPlantSubstances(x) & PowerfulMedication(x)))", "all x y.((PlantSubstance(x) & PlantSubstance(y)) -> PowerfulMedicine(x,y))", "exists x.(PlantSubstance(x) & PowerfulMedicine(x))", "all x y.((PlantSubstance(x) & PlantSubstance(y)) -> PowerfulMedication(x))", "exists x.(PlantSubstance(x) & BotanicalMedicine(x) & PowerfulMedication(x))"]}
{"id": "eqasc_validation_1696", "nl": "Many plant substances are powerful cures for people when they are sick", "fol": "", "prediction": ["all x y.((PlantSubstance(x) & Person(y) & Sick(y)) -> PowerfulCures(x,y))", "all x y z.((PlantSubstance(x) & Person(y) & Sick(z)) -> PowerfulCuresFor(x,y,z))", "all x.((PlantSubstance(x) & Person(x) & Sick(x)) -> PowerfulCures(x))", "all x y.((PlantSubstance(x) & Person(y) & Sick(y)) -> PowerfulCuresFor(x,y))", "all x y z.((PlantSubstance(x) & Person(y) & Sick(z)) -> PowerfulCures(x,y,z))", "exists x.(PlantSubstance(x) & PowerfulCuresForSickPeople(x))", "all x.((PlantSubstance(x) & Person(y) & Sick(y)) -> PowerfulCuresFor(x,y))", "exists x,y,z,w.(PlantSubstance(x) & Person(y) & Sick(z) & Cures(x,y,z))", "all x y z.((PlantSubstance(x) & Person(y) & Sick(z) & Sick(y)) -> PowerfulCures(x,y,z))", "all x y.((PlantSubstance(x) & Person(y) & Sick(y)) -> PowerfulCure(x,y))", "exists x.(PlantSubstance(x) & PowerfulCuresForSickPeople(x))", "all x y z.((PlantSubstance(x) & Person(y) & Sick(z) & BecomesCure(x,y,z)) -> PowerfulCuresFor(x,y,z))", "exists x,y,z,w.(PlantSubstance(x) & Person(y) & Sick(z) & Cures(x,y,z))", "all x.((PlantSubstance(x) & Person(x) & Sick(x)) -> PowerfulCure(x))", "all x y.((PlantSubstance(x) & Person(y) & Sick(y)) -> PowerfulCuresFor(x,y))", "all x y.((PlantSubstance(x) & Person(y) & Sick(y)) -> PowerfulCure(x,y))"]}
{"id": "eqasc_validation_1697", "nl": "Babies are the MOST inquisitive of people.", "fol": "", "prediction": ["all x.(Baby(x) -> MOSTInquisitiveOfPeople(x))", "all x y.((Baby(x) & Person(y)) -> MOSTInquisitive(x,y))", "all x.(Baby(x) -> MOSTInquisitiveOfPeople(x))", "all x y.((Baby(x) & Person(y)) -> MOSTInquisitive(x,y))", "all x.(Baby(x) -> MOSTInquisitiveOfPeople(x))", "all x y.((Baby(x) & Person(y)) -> MOSTInquisitive(x,y))", "all x y.((Baby(x) & Person(y)) -> MostInquisitive(x,y))", "ALL x.(Baby(x) -> InquisitiveOfPeople(x))", "all x.(Baby(x) -> MOSTInquisitiveOfPeople(x))", "ALL x.(Baby(x) -> MOSTInquisitive(x))", "ALL x.(Baby(x) -> MostInquisitiveOfPeople(x))", "all x y.((Baby(x) & Person(y)) -> MOSTInquisitive(x,y))", "all x y.((Baby(x) & Person(y)) -> MostInquisitive(x,y))", "ALL X.(Babie(x) -> (MOSTInquisitiveOfPeople(x)))", "ALL X.(Baby(x) -> MostInquisitiveOfPeople(x))", "ALL X.(Babie(x) -> MOSTInquisitiveOfPeople(x))"]}
{"id": "eqasc_validation_1698", "nl": "Medicine is used for curing babies when they are sick", "fol": "", "prediction": ["all x y.((Medicine(x) & Baby(y) & Sick(y)) -> UsedForCuring(x,y))", "all x y.((Medicine(x) & Baby(y) & Sick(y)) -> UsedForCuring(x,y))", "all x y z.((Medicine(x) & Baby(y) & Sick(z)) -> CuredBy(x,y,z))", "all x.((Medicine(x) & BabiesSick(x)) -> Cures(x,babiesSick))", "all x.((Medicine(x) & Sick(x)) -> CuringBaby(x))", "all x.((Medicine(x) & Baby(y) & Sick(y)) -> CuredBy(x,y))", "all x y.((Medicine(x) & Baby(y) & Sick(y)) -> CuredBy(x,y))", "all x y z.((Medicine(x) & Baby(y) & Sick(z)) -> CuredBy(x,y,z))", "all x y.((Medicine(x) & Baby(y) & Sick(y)) -> CuredBy(x,y))", "all x.((Medicine(x) & BabiesSick(x)) -> CuredBy(x,babiesSick))", "all x y z.((Medicine(x) & Baby(y) & Sick(z)) -> CuredBy(x,y,z))", "all x.((Medicine(x) & Baby(y) & Sick(y)) -> Cures(x,y))", "all x.((Medicine(x) & Sick(x)) -> CuringBaby(x))", "all x y.((Medicine(x) & Baby(y) & Sick(y)) -> Cures(x,y))", "all x y.((Medicine(x) & Baby(y) & Sick(y)) -> Cures(x,y))", "all x.((Medicine(x) & BabiesSick(x)) -> UsedForCuring(x,Baby(x))"]}
{"id": "eqasc_validation_1699", "nl": "Antibiotics are powerful medicines used to treat bacterial infections.", "fol": "", "prediction": ["all x.(Antibiotic(x) -> (PowerfulMedicine(x) & TreatsBacterialInfections(x)))", "all x y.((Antibiotic(x) & BacterialInfection(y)) -> Treats(x,y))", "all x.(Antibiotic(x) -> (PowerfulMedicine(x) & UsedToTreatBacterialInfections(x)))", "all x y z.((Antibiotic(x) & BacterialInfection(y) & Bacteria(z)) -> (PowerfulMedicine(x) & UsedToTreat(x,y,z)))", "(all x.(Antibiotic(x) -> TreatsBacteria(x)))", "all x.(Antibiotic(x) -> (PowerfulMedication(x) & TreatsBacteria(x)))", "all x.(Antibiotic(x) -> (PositiveMedication(x) & TreatsBacteria(x)))", "all x y.((Antibiotic(x) & BacterialInfection(y)) -> Treats(x,y))", "all x y.((Antibiotic(x) & BacterialInfection(y)) -> (PowerfulMedicine(x,y) & UsedToTreat(x,y)))", "all x.(Antibiotic(x) -> (PositiveMedicine(x) & UsedToTreatBacterialInfections(x)))", "all x y.((Antibiotic(x) & BacterialInfection(y)) -> Treats(x,y))", "all x.(Antibiotic(x) -> (PowerfulMedicine(x) & UsedToTreatBacterialInfections(x)))", "all x.(Antibiotic(x) -> (PowerfulMedicine(x) & UsedToTreatBacterialInfections(x)))", "all x.(Antibiotics(x) -> (PowerfulMedicine(x) & TreatsBacterialInfections(x)))", "all x y.((Antibiotic(x) & BacterialInfection(y)) -> UsedToTreat(x,y))", "all x.(Antibiotic(x) -> (PowerfulMedication(x) & TreatsBacterialInfections(x)))"]}
{"id": "eqasc_validation_1700", "nl": "Antibiotics can cure people sick with bacterial infections", "fol": "", "prediction": ["all x y.((Antibiotic(x) & Person(y) & SickWithBacteriaInfections(y)) -> CanCure(x,y))", "all x y z.((Antibiotic(x) & Person(y) & BacterialInfection(z)) -> CanCure(x,y,z))", "all x y.((Antibiotic(x) & Person(y)) -> CanCureBacterialInfections(x,y))", "all x.(Antibiotic(x) -> CanCureSickWithBacteria(x))", "all x y.((Antibiotic(x) & Sick(y) & BacterialInfection(y)) -> CanCure(x,y))", "all x.(Antibiotic(x) -> (CuresSickWithBacteria(x) & CanCureBacteria(x)))", "all x y z.((Antibiotic(x) & Person(y) & BacterialInfection(z)) -> CanCure(x,y,z))", "all x.(Antibiotic(x) -> CanCureBacterialInfections(x))", "all x y z.((Antibiotic(x) & Sick(y) & BacterialInfection(z)) -> CanCure(x,y,z))", "all x.(Antibiotics(x) -> CanCureSickWithBacteria(x))", "all x y.((Antibiotic(x) & Person(y) & SickWithBacterialInfections(y)) -> CanCure(x,y))", "all x.(Antibiotics(x) -> (CuresSickWithBacteria(x) & CanCureBacteria(x)))", "all x.(Antibiotic(x) -> (CuresSickWithBacterialInfections(x) & CanCureSickWithBacteria(x)))", "all x y.((Antibiotic(x) & Sick(y) & BacterialInfection(y)) -> CanCure(x,y))", "all x.(Antibiotics(x) -> CanCureBacterialInfections(x))", "all x y z.((Antibiotic(x) & Person(y) & BacterialInfection(z)) -> CanCure(x,y,z))"]}
{"id": "eqasc_validation_1701", "nl": "All people belong to the human family.", "fol": "", "prediction": ["all x.(Person(x) -> HumanFamily(x))", "all x.(BelongsToHumanFamily(x) -> HumanFamily(x))", "all x.(HumanFamily(x) -> BelongsTo(x,HumanFamily))", "all x.(Person(x) -> HumanFamily(x))", "all x.(Person(x) -> BelongsToHumanFamily(x))", "all x y.((Person(x) & HumanFamily(y)) -> BelongsTo(x,y))", "all x.exists y.(HumanFamily(x) & BelongsTo(x,y))", "all x.exists y.(Person(x) & HumanFamily(y) & BelongsTo(x,y))", "all x.(BelongsToHumanFamily(x) -> HumanFamily(x))", "all x y.((Person(x) & HumanFamily(y)) -> BelongsTo(x,y))", "all x y.(BelongsToHumanFamily(x) -> HumanFamily(y))", "all x.(Person(x) -> HumanFamily(x))", "exists x.(People(x) & BelongsToHumanFamily(x))", "exists x.(Person(x) & BelongsToHumanFamily(x))", "all x y.((Person(x) & HumanFamily(y)) -> BelongsTo(x,y))", "exists x.(Person(x) & BelongsToHumanFamily(x))"]}
{"id": "eqasc_validation_1702", "nl": "medicine is used for curing humans when they are sick", "fol": "", "prediction": ["all x y.((Medicine(x) & Human(y) & Sick(y)) -> UsedForCuring(x,y))", "all x y z.((Medicine(x) & Human(y) & Sick(z)) -> UsedForCuring(x,y,z))", "all x.((Medicine(x) & Sick(x)) -> UsedForCuringHumans(x))", "all x y.((Medicine(x) & Human(y) & Sick(y)) -> UsedForCuring(x,y))", "all x.((Medicine(x) & Human(x) & Sick(x)) -> UsedForCuring(x))", "all x y z.((Medicine(x) & Human(y) & Sick(z)) -> CuredFor(x,y,z))", "all x y.((Medicine(x) & Human(y) & Sick(y)) -> UsedForCuring(x,y))", "all x y z.((Medicine(x) & Human(y) & Sick(z) & UsedForCuring(x,y,z)) -> Curing(x,y,z))", "all x.((Medicine(x) & Human(y) & Sick(y)) -> UsedForCuring(x,y))", "all x.((Medicine(x) & Sick(x)) -> UsedForCuringHumans(x))", "all x y.((Medicine(x) & Human(y) & Sick(y)) -> Cures(x,y))", "all x.((Medicine(x) & Sick(x) & Human(x)) -> Cures(x,Humans))", "all x y.((Medicine(x) & Human(y)) -> UsedForCuring(x,y))", "all x y z.((Medicine(x) & Human(y) & Sick(z)) -> UsedForCuring(x,y,z))", "all x.((Medicine(x) & Human(x) & Sick(x)) -> CuredForCuring(x))", "all x y.((Medicine(x) & Human(y) & Sick(y)) -> CuredFor(x,y))"]}
{"id": "eqasc_validation_1703", "nl": "Medicines, such is ibuprofen, can calm inflammation and ease pain.", "fol": "", "prediction": ["all x.((Medicine(x) & Ibuprofen(x)) -> (CalmsInflammation(x) & EasesPain(x)))", "all x y.((Medicine(x) & Ibuprofen(y)) -> (CalmsInflammation(x) & EasesPain(x)))", "(all x.(Ibuprofen(x) -> CalmsInflammation(x)) & EasesPain(x))", "all x.((Medicine(x) & Ibuprofen(x)) -> (CalmsInflammation(x) & EasesPain(x)))", "(all x.(Ibuprofen(x) -> CalmInflammation(x)) & All y.(Ibuprofen(y) -> EasePain(y)))", "all x y z.((Medicine(x) & Ibuprofen(y) & Inflammation(z) & Pain(z)) -> (Calms(x,y) & Eases(x,z)))", "all x y.((Medicine(x) & Ibuprofen(y)) -> (CalmsInflammation(x) & EasesPain(x)))", "all x.(Ibuprofen(x) -> (CalmsInflammation(x) & EasesPain(x)))", "all x.((Medication(x) & Ibuprofen(x)) -> (CalmsInflammation(x) & EasesPain(x)))", "all x y.((Medication(x) & Ibuprofen(x) & Inflammation(y)) -> (Calms(x,y) & EasesPain(x,y)))", "all x.((Medicine(x) & Ibuprofen(x)) -> (CalmInflammation(x) & EasePain(x)))", "all x y.((Medicine(x) & Ibuprofen(y)) -> (CalmsInflammation(x,y) & EasesPain(x,y)))", "all x.(Medication(x) -> (Ibuprofen(x) & CalmsInflammation(x) & EasesPain(x)))", "all x y.((Medication(x) & Ibuprofen(x)) -> (CalmsInflammation(y) & EasesPain(y)))", "all x.((Medication(x) & Ibuprofen(x)) -> (ClearsInflammation(x) & EasesPain(x)))", "all x.((Medicine(x) & Ibuprofen(x)) -> (CalmsInflammation(x) & EnlesPain(x)))"]}
{"id": "eqasc_validation_1704", "nl": "ibuprofen is used for curing people when they are sick", "fol": "", "prediction": ["all x y.((Ibuprofen(x) & Person(y) & Sick(y)) -> UsedForCuring(x,y))", "all x.((Ibuprofen(x) & Sick(x)) -> UsedForCuringPeople(x))", "all x y z.((Ibuprofen(x) & Person(y) & Sick(z) & UsedForCuring(x,y,z)) -> UsedForCuring(x,y,z))", "all x y.((Ibuprofen(x) & Person(y) & Sick(y)) -> UsedForCuring(x,y))", "all x.((Ibuprofen(x) & Person(y) & Sick(y)) -> UsedForCuring(x,y))", "all x.((Ibuprofen(x) & Sick(x)) -> UsedForCuring(x))", "all x y.((Ibuprofen(x) & Person(y)) -> UsedForCuring(x,y))", "all x y z.((Ibuprofen(x) & Person(y) & Sick(z) & UsedForCuring(x,y,z)) -> UsedForCuring(x,y,z))", "all x.(Ibuprofen(x) -> UsedForCuringPeople(x))", "all x y.((Ibuprofen(x) & Person(y) & Sick(y)) -> UsedForCuring(x,y))", "all x.((Buprofen(x) & Sick(x)) -> UsedForCuringPeople(x))", "all x.((Ibuprofen(x) & Sick(x)) -> UsedForCuringPeople(x))", "all x.((Ibuprofen(x) & Person(y) & Sick(y)) -> UsedForCuring(x,y))", "all x.((Ibuprofen(x) & PeopleSick(x)) -> UsedForCuring(x))", "all x y.((Ibuprofen(x) & Person(y)) -> UsedForCuringWhenSick(x,y))", "all x y.((Ibuprofen(x) & PeopleSick(y)) -> UsedForCuring(x,y))"]}
{"id": "eqasc_validation_1705", "nl": "People get sick and die.", "fol": "", "prediction": ["all x.(Person(x) -> (GetsSick(x) & Dies(x)))", "all x.(People(x) -> (GetsSick(x) & Dies(x)))", "all x.(Person(x) -> (GetsSick(x) & Dies(x)))", "all x y.((Person(x) & Sick(y)) -> Dies(x,y))", "all x.(Person(x) -> (GetsSick(x) & Dies(x)))", "all x.(People(x) -> (GetsSick(x) & Dies(x)))", "all x y.((Person(x) & Person(y)) -> (GetsSick(x,y) & Dies(x,y)))", "all x y.((Person(x) & Sick(y)) -> Dies(x,y))", "exists x.(Person(x) & GetsSick(x) & Dies(x))", "all x.(Person(x) -> (GetsSick(x) & Dies(x)))", "all x y.((Person(x) & Person(y)) -> (GetsSick(x,y) & Dies(x,y)))", "exists x.(Person(x) & GetsSick(x) & Dies(x))", "all x y.((Person(x) & Sick(y)) -> Die(x,y))", "exists x.(Populist(x) & GetsSick(x) & Dies(x))", "exists x.(Popular(x) & GetsSick(x) & Dies(x))", "exists x.(Person(x) & GetsSick(x) & Dies(x))"]}
{"id": "eqasc_validation_1706", "nl": "medicine can prevent people from dying", "fol": "", "prediction": ["all x y.((Medicine(x) & Person(y)) -> PreventsDeath(x,y))", "all x y z.((Medicine(x) & Person(y) & Disease(z)) -> PreventsFromDying(x,y,z))", "all x.(Medicine(x) -> PreventsDeath(x))", "all x y.((Medicine(x) & Person(y)) -> PreventsDying(x,y))", "all x y z.((Medicine(x) & Person(y) & Death(z)) -> PreventsFromDying(x,y,z))", "all x.(Medicine(x) -> PreventsDeath(x))", "all x y.((Medicine(x) & Person(y)) -> CanPreventDying(x,y))", "all x y z.((Medicine(x) & Person(y) & Dying(z)) -> PreventsFromDying(x,y,z))", "all x y.((Medicine(x) & Person(y) & Dying(y)) -> PreventsFromDying(x,y))", "all x.(Medicine(x) -> PreventsDying(x))", "all x.(Medicine(x) -> CanPreventPeopleFromDying(x))", "all x.(MedicineCanPreventDeath(x) -> PreventsDeath(x))", "all x.(Medicine(x) -> (PreventsDeath(x) & PeopleFromDying(x)))", "all x y z.((Medicine(x) & Person(y) & Disease(z)) -> CanPrevent(x,y,z))", "all x y.((Medicine(x) & Person(y)) -> PreventsDeath(x,y))", "all x.(Medicine(x) -> PreventsDeath(x))"]}
{"id": "eqasc_validation_1707", "nl": "Fingernails prevent injury by forming protective plates over the ends of the fingers.", "fol": "", "prediction": ["all x.(Fingernail(x) -> (PreventsInjury(x) & FormsProtectivePlates(x)))", "all x y.((Fingernail(x) & Finger(y)) -> (PreventsInjury(x,y) & FormsProtectivePlates(x,y)))", "all x.(Fingernail(x) -> (PreventsInjury(x) & FormsProtectivePlates(x) & OverFingersEnds(x)))", "all x y.((Fingernail(x) & Finger(y)) -> PreventsInjury(x,y))", "all x y z.((Fingernail(x) & Injuries(y) & EndsOfFingers(z) & FormsProtectivePlates(x,z)) -> Prevents(x,y))", "all x.(Fingernail(x) -> (PreventsInjury(x) & FormsProtectivePlates(x)))", "all x y.((Fingernail(x) & Finger(y)) -> PreventsInjuryByFormingProtectivePlates(x,y))", "all x y z.((Fingernail(x) & Finger(y) & End(z)) -> PreventsInjury(x,y,z))", "all x y.((Fingernail(x) & Finger(y)) -> (PreventsInjury(x,y) & FormsProtectivePlates(x,y)))", "all x.(Fingernail(x) -> (PreventsInjury(x) & FormsProtectivePlates(x)))", "all x y z.((Fingernail(x) & EndOfFingers(y) & ProtectivePlates(z)) -> PreventsInjury(x,y,z))", "all x.(Fingernail(x) -> (PreventsInjury(x) & FormsProtectivePlates(x)))", "all x.((Fingernail(x) & ProtectivePlates(x)) -> PreventsInjury(x))", "all x.(Fingernail(x) -> (PreventsInjury(x) & FormsProtectivePlates(x) & OverFingersEnds(x)))", "all x y.((Fingernail(x) & Finger(y)) -> PreventsInjury(x,y))", "all x.(Fingernail(x) -> PreventsInjury(x))"]}
{"id": "eqasc_validation_1708", "nl": "Fingernails are also made of keratin.", "fol": "", "prediction": ["all x.(Fingernail(x) -> MadeOfKeratin(x))", "(MadeOfKeratin(fingernail)", "all x y.((Fingernail(x) & Keratin(y)) -> MadeOf(x,y))", "all x.(Fingernail(x) -> MadeOfKeratin(x))", "all x.(Fingernail(x) -> MadeOfKeratin(x))", "(MadeOfKeratin(fingers) & MadeOfKeratin(fingers))", "(MadeOfKeratin(fingernail)", "all x.(Fingernail(x) -> (MadeOfKeratin(x) & MadeOfKeratin(x)))", "all x y.((Fingernail(x) & Keratin(y)) -> MadeOf(x,y))", "all x.(Fingernail(x) -> MadeOfKeratin(x))", "all x.(Fingernail(x) -> MadeOfKeratin(x))", "(MadeOfKeratin)", "all x.(Fingernail(x) -> MadeOfKeratin(x))", "all x.(Fingersnail(x) -> MadeOfKeratin(x))", "(MadeOfKeratin)", "exists x.(Fingernail(x) & MadeOfKeratin(x))"]}
{"id": "eqasc_validation_1709", "nl": "keratin prevents injury by forming protecting plates over the ends of the fingers", "fol": "", "prediction": ["all x y.((Keratin(x) & Finger(y)) -> PreventsInjury(x,y))", "all x.(Keratin(x) -> (PreventsInjury(x) & FormsProtectingPlates(x) & OverFingersEnds(x)))", "all x y z.((Keratin(x) & Injuries(y) & Finger(z)) -> PreventsByFormingProtectingPlates(x,y,z))", "all x y.((Keratin(x) & Finger(y)) -> PreventsInjuryByFormingProtectingPlates(x,y))", "all x.(Keratin(x) -> PreventsInjury(x))", "(PreventsInjuryByFormingProtectingPlates(keratin) & OverFingersEnds(keratin))", "all x y z.((Keratin(x) & Injuries(y) & Finger(z)) -> (PreventsInjuries(x,y,z) & ProtectsPlates(x,y,z)))", "all x.(Keratin(x) -> (PreventsInjury(x) & FormsProtectingPlates(x) & OverFingersEnds(x)))", "all x.((Keratin(x) & ProtectsPlates(x) & OverFingersEnds(x)) -> PreventsInjury(x))", "all x y z.((Keratin(x) & Injured(y) & ProtectivePlates(z) & EndsOfFingers(z)) -> PreventsInjuries(x,y,z))", "all x.(Keratin(x) -> PreventsInjuryByFormingProtectingPlates(x))", "all x y.((Keratin(x) & ProtectivePlates(y)) -> PreventsInjuryByForming(x,y))", "all x y.((Keratin(x) & Finger(y)) -> PreventsInjury(x,y))", "all x.(Keratin(x) -> (PreventsInjury(x) & FormsProtectingPlates(x) & OverEndsOfFingers(x)))", "all x y.((Keratin(x) & Finger(y) & ProtectsPlates(x,y)) -> PreventsInjury(x))", "all x.(Keratin(x) -> PreventsInjury(x))"]}
{"id": "eqasc_validation_1710", "nl": "Something made of keratin prevents injury by forming protective plates", "fol": "", "prediction": ["all x.((MadeOfKeratin(x) & PreventsInjury(x)) -> FormsProtectivePlates(x))", "all x y.((MadeOfKeratin(x) & PreventsInjury(x) & ProtectivePlates(y)) -> Forms(x,y))", "all x.((Keratin(x) & MadeOf(x)) -> PreventsInjuryByFormingProtectivePlates(x))", "all x y.((Keratin(x) & MadeOf(x,y)) -> PreventsInjuryByFormingProtectivePlates(x))", "all x.((MadeOfKeratin(x) & PreventsInjury(x) & FormsProtectivePlates(x)) -> PreventsInjury(x))", "all x y z.((Keratin(x) & Material(y) & ProtectivePlate(z)) -> PreventsInjuryByForming(y,z))", "all x.(MadeOfKeratin(x) -> PreventsInjuryByFormingProtectivePlates(x))", "all x y z.((MadeOfKeratin(x) & Injury(y) & ProtectivePlate(z)) -> PreventsByForming(x,y,z))", "all x y.((MadeOfKeratin(x) & PreventsInjury(x,y)) -> FormsProtectivePlates(x))", "all x y.((Keratin(x) & PreventsInjury(x,y) & FormsProtectivePlates(x,y)) -> PreventsInjury(x,y))", "all x.((Keratin(x) & MadeOf(x)) -> PreventsInjuryByFormingProtectivePlates(x))", "exists x.(Keratin(x) & PreventsInjury(x) & FormsProtectivePlates(x))", "all x.((MadeOfKeratin(x) & PreventsInjury(x)) -> FormsProtectivePlates(x))", "all x y.((MadeOfKeratin(x) & ProtectivePlate(y)) -> PreventsInjuryByForming(x,y))", "all x.(MadeOfKeratin(x) -> PreventsInjuryByFormingProtectivePlates(x))", "all x.((MadeOfKeratin(x) & PreventsInjury(x) & FormsProtectivePlates(x)) -> PreventsInjury(x))"]}
{"id": "eqasc_validation_1711", "nl": "Keratin forming over the ends of fingers prevents injury", "fol": "", "prediction": ["all x y.((Keratin(x) & FingerEnds(y)) -> PreventsInjury(x,y))", "all x y z.((Keratin(x) & Finger(y) & Finger(z)) -> PreventsInjury(x,y,z))", "all x y.((Keratin(x) & Finger(y) & FormsOverEnds(x,y)) -> PreventsInjury(x))", "all x.((Keratin(x) & FormsOverFingers(x)) -> PreventsInjury(x))", "all x y z.((Keratin(x) & Finger(y) & Finger(z) & FormsOverEnds(x,y,z)) -> PreventsInjury(x))", "all x.((KeratinFormingOverFingers(x) & PreventsInjury(x)) -> FormsOverEndsOfFingers(x))", "all x.((Keratin(x) & FormsOverFingersEnds(x)) -> PreventsInjury(x))", "all x y z.((Keratin(x) & FingerEnds(y) & FingerEnds(z) & FormsOver(x,y,z)) -> PreventsInjury(x))", "all x.((Keratin(x) & FormsOverFingers(x)) -> PreventsInjury(x))", "all x y.((Keratin(x) & FingerEnds(y) & FormsOver(x,y)) -> PreventsInjury(x,y))", "all x.(KeratinFormingOverFingers(x) -> PreventsInjury(x))", "all x y.((Keratin(x) & Finger(y)) -> PreventsInjury(x,y))", "all x y z.((Keratin(x) & Finger(y) & Finger(z) & FormsOverEnds(x,y)) -> PreventsInjury(x,z))", "all x.((Keratin(x) & FormsOverFingers(x)) -> PreventsInjury(x))", "all x.((Keratin(x) & FormsOverFingersEnds(x)) -> PreventsInjury(x))", "all x y.((Keratin(x) & FingerEnds(y) & FormsOver(x,y)) -> PreventsInjury(x))"]}
{"id": "eqasc_validation_1712", "nl": "People have fingernails.", "fol": "", "prediction": ["all x.(Person(x) -> HasFingersnails(x))", "all x.(Person(x) -> HasFingersnails(x))", "all x.(PeopleHasFingersnails(x) -> HasFingersnails(x))", "all x.(Person(x) -> HasFingersnail(x))", "all x y.((Person(x) & Fingernail(y)) -> Has(x,y))", "all x.(Person(x) -> HasFingernails(x))", "all x y.(Person(x) -> HasFingersnails(x,y))", "all x.(Person(x) -> HasFingernails(x))", "all x y.(Fingernail(x) -> Has(x,y))", "exists x.(Person(x) & Fingernail(x))", "all x y.((Person(x) & Fingernail(y)) -> Has(x,y))", "exists x.(Populus(x) & Fingernail(x))", "exists x.(Person(x) & Fingernail(x))", "all x.(Person(x) -> HasFingersnail(x))", "exists x.(Popular(x) & Fingernail(x))", "exists x.(Person(x) & Fingernail(x))"]}
{"id": "eqasc_validation_1713", "nl": "people prevent injury by forming protective plates over the ends of the fingers", "fol": "", "prediction": ["all x y.((Person(x) & Finger(y)) -> PreventsInjury(x,y))", "all x y z.((Person(x) & Injured(y) & ProtectivePlate(z) & EndOfFingers(z)) -> PreventsInjury(x,y,z))", "all x.((Person(x) & FormsProtectivePlates(x)) -> PreventsInjury(x))", "all x y.((Person(x) & Finger(y)) -> PreventsInjuryByFormingProtectivePlates(x,y))", "all x.(PreventInjury(x) -> FormsProtectivePlates(x))", "all x.(PreventsInjury(x) -> (FormsProtectivePlates(x) & OverFingersEnds(x)))", "all x y z.((Person(x) & Injured(y) & ProtectivePlate(z) & OverFingersEnds(x,z)) -> PreventsInjury(x,y,z))", "all x y.((Person(x) & ProtectivePlate(y) & EndOfFingers(y)) -> PreventsInjury(x,y))", "all x.((Person(x) & PreventsInjury(x)) -> FormsProtectivePlatesOverFingers(x))", "all x y z.((Person(x) & ProtectivePlate(y) & Finger(z)) -> PreventsInjuryByForming(x,y,z))", "all x.(PreventInjuryByFormingProtectivePlates(x) -> FingerEndsOfFingers(x))", "exists x.(Person(x) & PreventsInjury(x) & FormsProtectivePlates(x) & OverFingersEnds(x))", "all x y.((Person(x) & Finger(y) & FormsProtectivePlates(x,y)) -> PreventsInjury(x,y))", "all x y z.((Person(x) & Injuries(y) & ProtectivePlate(z) & EndsOfFingers(z)) -> PreventsInjury(x,y,z))", "all x y.((Person(x) & Person(y)) -> (PreventsInjury(x,y) & FormsProtectivePlates(x,y)))", "all x.((Person(x) & FormsProtectivePlates(x)) -> PreventsInjury(x))"]}
{"id": "eqasc_validation_1714", "nl": "Fingernail Examination Healthy fingernails are smooth and well shaped.", "fol": "", "prediction": ["all x.((FingernailExamination(x) & Smooth(x) & WellShaped(x)) -> Healthy(x))", "all x.(HealthyFingernailExamination(x) -> (Smooth(x) & WellShaped(x)))", "all x.((FingernailExamination(x) & Smooth(x) & WellShaped(x)) -> Healthy(x))", "all x.(FingernailExamination(x) -> (Smooth(x) & WellShaped(x)))", "all x.(HealthyFingernailExamination(x) -> (Smooth(x) & WellShaped(x)))", "all x y.((FingernailExamination(x) & Smooth(y) & WellShaped(y)) -> Healthy(x,y))", "all x.(FingernailExamination(x) -> (Smooth(x) & WellShaped(x)))", "(HealthyFingernailExamination(fingers) -> (Smooth(fingers) & WellShaped(fingers)))", "all x y.((Fingernail(x) & Fingernail(y)) -> (Smooth(x) & WellShaped(x)))", "all x.((FingernailExamination(x) & Smooth(x) & WellShaped(x)) -> Healthy(x))", "all x y.((FingernailExamination(x) & Smooth(y) & WellShaped(x)) -> Healthy(x))", "All x.((Fingernail(x) & Smooth(x) & WellShaped(x)) -> Healthy(x))", "All x.(HealthyFingernailExamination(x) -> (Smooth(x) & WellShaped(x)))", "All x.(FingernailExamination(x) -> (Smooth(x) & WellShaped(x)))", "all x.(HealthyFingernailExamination(x) -> (Smooth(x) & WellShaped(x)))", "all x y.((FingernailExamination(x) & Smooth(y) & WellShaped(y)) -> Healthy(x,y))"]}
{"id": "eqasc_validation_1715", "nl": "Protective plates over the ends of the fingers should be smooth and well shaped.", "fol": "", "prediction": ["all x.(ProtectivePlate(x) -> (Smooth(x) & WellShaped(x)))", "all x.((ProtectivePlate(x) & OverFingersEnds(x)) -> (Smooth(x) & WellShaped(x)))", "all x y.((ProtectivePlate(x) & FingerEnds(y)) -> (Smooth(x) & WellShaped(x)))", "all x.(ProtectivePlate(x) -> (Smooth(x) & WellShaped(x)))", "all x y.((ProtectivePlate(x) & FingerEnds(y)) -> (Smooth(x,y) & WellShaped(x,y)))", "all x y z.((ProtectivePlate(x) & Finger(y) & Finger(z) & Smooth(x,z) & WellShaped(x,y)) -> ProtectivePlate(x))", "all x y.((ProtectivePlate(x) & FingerEngth(y) & Smooth(x) & WellShaped(x)) -> ProtectivePlate(x,y))", "all x.((ProtectivePlate(x) & OverFingersEnds(x)) -> (Smooth(x) & WellShaped(x)))", "all x.((ProtectivePlate(x) & OverFingers(x)) -> (Smooth(x) & WellShaped(x)))", "all x y z.((ProtectivePlate(x) & Finger(y) & Finger(z) & Smooth(x,y) & WellShaped(x,z)) -> ProtectivePlate(x,y,z))", "all x.(ProtectivePlate(x) -> (Smooth(x) & WellShaped(x)))", "all x y.((ProtectivePlate(x) & Fingers(y) & Smooth(x) & WellShaped(x)) -> ProtectivePlate(x,y))", "all x y.((ProtectivePlate(x) & FingerEnds(y) & Smooth(x) & WellShaped(x)) -> ProtectivePlate(x,y))", "all x.(ProtectivePlate(x) -> (Shaped(x) & WellShaped(x)))", "all x.((ProtectivePlate(x) & OverFingersEnds(x)) -> (Smooth(x) & WellShaped(x)))", "all x.(ProtectivePlate(x) -> (Smooth(x) & WellShaped(x)))"]}
{"id": "eqasc_validation_1716", "nl": "keratin prevents injury by forming protective plates over the ends of the fingers.", "fol": "", "prediction": ["all x.(Keratin(x) -> (PreventsInjury(x) & FormsProtectivePlates(x)))", "all x y.((Keratin(x) & Finger(y)) -> PreventsInjury(x,y))", "all x y z.((Keratin(x) & Injuries(y) & Finger(z)) -> PreventsByFormingProtectivePlates(x,y,z))", "all x.(Keratin(x) -> PreventsInjury(x))", "all x y.((Keratin(x) & Finger(y)) -> PreventsInjury(x,y))", "all x y z.((Keratin(x) & Injured(y) & Finger(z)) -> (PreventsInjuries(x,y,z) & FormsProtectivePlates(x,y,z)))", "all x y.((Keratin(x) & Finger(y)) -> PreventsInjuryByFormingProtectivePlates(x,y))", "all x.(Keratin(x) -> (PreventsInjury(x) & FormsProtectivePlates(x)))", "all x.((Keratin(x) & ProtectivePlates(x) & OverFingers(x)) -> PreventsInjury(x))", "all x.(Keratin(x) -> (PreventsInjury(x) & FormsProtectivePlates(x) & OverFingersEnds(x)))", "all x y z.((Keratin(x) & Finger(y) & End(z)) -> PreventsInjury(x,y,z))", "all x.(Keratin(x) -> PreventsInjury(x))", "all x y.((Keratin(x) & Finger(y)) -> (PreventsInjury(x,y) & FormsProtectivePlates(x,y)))", "all x.(Keratin(x) -> PreventsInjuryByFormingProtectivePlates(x))", "all x y.((Keratin(x) & Finger(y)) -> PreventsInjury(x,y))", "all x.(Keratin(x) -> (PreventsInjury(x) & FormsProtectivePlates(x)))"]}
{"id": "eqasc_validation_1717", "nl": "Keratin prevents injury by forming protective plates over the ends of the fingers.", "fol": "", "prediction": ["all x.(Keratin(x) -> (PreventsInjury(x) & FormsProtectivePlates(x)))", "all x y.((Keratin(x) & Finger(y)) -> PreventsInjury(x,y))", "all x y z.((Keratin(x) & Injuries(y) & Finger(z)) -> (FormsProtectivePlates(x,z) & OverEnds(x,z)))", "all x.(Keratin(x) -> PreventsInjury(x))", "(PreventsInjuryByFormingProtectivePlates(keratin,fingers))", "all x y.((Keratin(x) & Finger(y)) -> PreventsInjury(x,y))", "all x.((Keratin(x) & ProtectivePlates(x) & OverFingers(x)) -> PreventsInjury(x))", "all x y z.((Keratin(x) & Injured(y) & Finger(z)) -> PreventsByFormingProtectivePlates(x,y,z))", "all x.(Keratin(x) -> (PreventsInjury(x) & FormsProtectivePlates(x)))", "all x y z.((Keratin(x) & Injuries(y) & Finger(z) & FormsProtectivePlates(x,z)) -> Prevents(x,y))", "all x.(Keratin(x) -> (PreventsInjury(x) & FormsProtectivePlates(x) & OverFingersEnds(x)))", "all x y.((Keratin(x) & Finger(y)) -> PreventsInjury(x,y))", "all x.((Keratin(x) & ProtectivePlates(x) & OverFingers(x)) -> PreventsInjury(x))", "all x y.((Keratin(x) & Finger(y)) -> PreventsInjuryByFormingProtectivePlates(x,y))", "all x.(Keratin(x) -> PreventsInjury(x))", "all x.(Keratin(x) -> PreventsInjuryByFormingProtectivePlates(x))"]}
{"id": "eqasc_validation_1718", "nl": "Fingernails become more brittle with age.", "fol": "", "prediction": ["all x.(Fingernail(x) -> BrittleWithAge(x))", "all x.((Fingernail(x) & Age(x)) -> Brittle(x))", "all x y.((Fingernail(x) & Age(y)) -> Brittle(x,y))", "all x.((Fingernail(x) & Age(x)) -> Brittle(x))", "all x.(Fingernail(x) -> BrittleWithAge(x))", "all x.(Fingernail(x) -> BrittleWithAge(x))", "all x y.((Fingernail(x) & Age(y)) -> Brittle(x,y))", "all x y.((Fingernail(x) & Age(y)) -> Brittle(x,y))", "all x y z.((Fingernail(x) & Age(y) & Age(z)) -> Brittle(x,y,z))", "all x.((Fingernail(x) & Age(x)) -> Brittle(x))", "all x.(Fingernail(x) -> BrittleWithAge(x))", "all x y.((Fingernail(x) & Age(y)) -> Brittle(x,y))", "all x y.((Fingernail(x) & Age(y)) -> Brittle(x,y))", "All x.(Fingernail(x) -> BrittleWithAge(x))", "All x.(Fingernail(x) -> BrittleWithAge(x))", "All x.(Fingersnail(x) -> BrittleWithAge(x))"]}
{"id": "eqasc_validation_1719", "nl": "protective plates over the ends of the fingers become more brittle with age", "fol": "", "prediction": ["all x y.((ProtectivePlate(x) & FingerEnds(y) & Age(x)) -> BrittleWithAge(x,y))", "all x.((ProtectivePlate(x) & EndsOfFingers(x)) -> BrittleWithAge(x))", "all x y z.((ProtectivePlate(x) & FingerEnds(y) & Fingers(z) & Age(x)) -> BrittleWith(x,y,z))", "all x y.((ProtectivePlate(x) & FingerEnds(y)) -> BrittleWithAge(x,y))", "all x y z.((ProtectivePlate(x) & Finger(y) & Finger(z) & EndsOf(y,z)) -> BrittleWithAge(x))", "all x y.((ProtectivePlate(x) & Finger(y) & EndsOfFingers(x,y)) -> BrittleWithAge(x))", "all x.((ProtectivePlate(x) & EndsOfFingers(x)) -> BrittleWithAge(x))", "all x.((ProtectivePlates(x) & EndsOfFingers(x)) -> BrittleWithAge(x))", "all x.(ProtectivePlatesOverFingersEndsBrittleWithAge(x) -> MoreBrittleWithAge(x))", "all x y z.((ProtectivePlate(x) & FingerEnds(y) & FingerEnds(z) & Age(x)) -> BrittleWithAge(x,y,z))", "all x.((ProtectivePlate(x) & OverFingersEnds(x)) -> BrittleWithAge(x))", "all x y.((ProtectivePlate(x) & FingerEnds(y) & Age(x)) -> BrittleWithAge(x,y))", "all x y z.((ProtectivePlate(x) & Finger(y) & Finger(z) & Ends(y,z)) -> BrittleWithAge(x))", "all x.((ProtectivePlate(x) & EndOfFingers(x) & Age(x)) -> Brittle(x))", "all x y.((ProtectivePlate(x) & Finger(y) & Ends(y)) -> BrittleWithAge(x,y))", "all x.((ProtectivePlates(x) & EndsOfFingers(x)) -> BrittleWithAge(x))"]}
{"id": "eqasc_validation_1720", "nl": "protective plates over the ends of the fingers are made of keratin", "fol": "", "prediction": ["all x.(ProtectivePlates(x) -> (MadeOfKeratin(x) & OverFingersEnds(x)))", "all x y.((ProtectivePlate(x) & FingerEnds(y)) -> MadeOfKeratin(x))", "all x.((ProtectivePlates(x) & EndsOfFingers(x)) -> MadeOfKeratin(x))", "all x y z.((ProtectivePlate(x) & FingerEnds(y) & FingerEnds(z)) -> MadeOfKeratin(x))", "all x y.((ProtectivePlate(x) & Finger(y) & EndsOf(x,y)) -> MadeOfKeratin(x))", "(ProtectivePlates(x) & OverFingersEndsMadeOfKeratin(x))", "all x.(ProtectivePlates(x) -> MadeOfKeratin(x))", "all x y z.((ProtectivePlate(x) & Finger(y) & Finger(z) & EndsOf(x,y,z)) -> MadeOfKeratin(x))", "all x y.((ProtectivePlate(x) & FingerEnds(y) & MadeOfKeratin(x)) -> MadeOfKeratin(x))", "(ProtectivePlatesOverFingersEndsMadeOfKeratin(Plastics) & MadeOfKeratin(Plastics))", "all x.((ProtectivePlates(x) & OverFingersEnds(x)) -> MadeOfKeratin(x))", "all x y.((ProtectivePlates(x) & FingerEnds(y) & MadeOfKeratin(x)) -> MadeOfKeratin(x))", "all x.(ProtectivePlates(x) -> (MadeOfKeratin(x) & OverFingersEnds(x)))", "all x y z.((ProtectivePlate(x) & Finger(y) & Finger(z) & Ends(y,z)) -> MadeOfKeratin(x))", "all x.((ProtectivePlates(x) & EndsOfFingers(x)) -> MadeOfKeratin(x))", "all x.(ProtectivePlates(x) -> MadeOfKeratin(x))"]}
{"id": "eqasc_validation_1721", "nl": "a stopwatch is used to measure time", "fol": "", "prediction": ["all x y.((Stopwatch(x) & Time(y)) -> Measures(x,y))", "all x.(Stopwatch(x) -> MeasuresTime(x))", "all x y.((Stopwatch(x) & MeasuresTime(x,y)) -> UsedToMeasure(x,y))", "all x y z.((Stopwatch(x) & Time(y) & Time(z)) -> Measures(x,y,z))", "all x.(Stopwatch(x) -> MeasuresTime(x))", "all x y z.((Stopwatch(x) & Time(y) & Time(z)) -> Measures(x,y,z))", "all x y z.((Stopwatch(x) & MeasuresTime(y) & Time(z)) -> UsedToMeasure(x,y,z))", "all x y.((Stopwatch(x) & Time(y)) -> Measures(x,y))", "all x.(Stopwatch(x) -> MeasuresTime(x))", "all x y.((Stopwatch(x) & MeasuresTime(x,y)) -> UsedToMeasureTime(x,y))", "all x.(Stopwatch(x) -> UsedToMeasureTime(x))", "all x.(Stopwatch(x) -> MeasuresTime(x))", "exists x.(Stopwatch(x) & MeasureTime(x) & MeasureTime(x))", "all x y.((Stopwatch(x) & Time(y)) -> Measures(x,y))", "exists x.(Stopwatch(x) & UsedToMeasureTime(x))", "all x.(Stopwatch(x) -> MeasuresTime(x))"]}
{"id": "eqasc_validation_1722", "nl": "Stopwatches are used to measure seconds.", "fol": "", "prediction": ["all x.(Stopwatch(x) -> MeasuresSeconds(x))", "all x y.((Stopwatch(x) & Second(y)) -> Measures(x,y))", "(MeasuresSeconds(stopwatch) & UsedToMeasureSeconds(stopwatch))", "all x.(Stopwatch(x) -> MeasuresSeconds(x))", "(MeasuresSeconds(Stopwatches) & MeasuresSeconds(Stopwatches))", "all x.(Stopwatch(x) -> UsedToMeasureSeconds(x))", "all x y.((Stopwatch(x) & Second(y)) -> Measures(x,y))", "(MeasuresSeconds(stopwatches) & MeasuresSeconds(stopwatches))", "all x y z.((Stopwatch(x) & Second(y) & Second(z)) -> Measures(x,y,z))", "all x.(Stopwatch(x) -> MeasuresSeconds(x))", "all x y.((Stopwatch(x) & Second(y)) -> Measures(x,y))", "all x y.((Stopwatch(x) & Second(y)) -> UsedToMeasure(x,y))", "all x.(Stopwatch(x) -> MeasureSeconds(x))", "all x.(Stopwatch(x) -> UsedToMeasureSeconds(x))", "all x.(Stopwatch(x) -> UsedToMeasureSeconds(x))", "all x.(Stopwatch(x) -> MeasuresSeconds(x))"]}
{"id": "eqasc_validation_1723", "nl": "Reaction time was measured with a stopwatch in minutes and seconds.", "fol": "", "prediction": ["all x.(ReactionTime(x) -> (MeasuredWithStopwatch(x) & InMinutesAndSeconds(x)))", "all x y.((Stopwatch(x) & ReactionTime(y)) -> MeasuredInMinutesAndSeconds(x,y))", "all x.((ReactionTime(x) & Stopwatch(x)) -> MeasuredInMinutesAndSeconds(x))", "all x y z.((Stopwatch(x) & ReactionTime(y) & Minute(z) & Second(z)) -> MeasuredWith(x,y,z))", "all x y.((Stopwatch(x) & ReactionTime(y)) -> MeasuredInMinutesAndSeconds(x,y))", "(MeasuredWithStopwatch(reactionTime) & InMinutesAndSeconds(reactionTime))", "all x.((ReactionTime(x) & Stopwatch(x)) -> (MeasuredInMinutes(x) & MeasuredInSeconds(x)))", "(MeasuredReactionTimeWithStopwatch(x) & InMinutesAndSeconds(x))", "all x.(ReactionTime(x) -> (MeasuredWithStopwatch(x) & InMinutesAndSeconds(x)))", "all x y z.((ReactionTime(x) & Stopwatch(y) & Minute(z) & Second(z)) -> MeasuredWith(x,y,z))", "all x.((ReactionTime(x) & Stopwatch(y)) -> MeasuredInMinutesAndSeconds(x,y))", "all x y.((Stopwatch(x) & ReactionTime(y)) -> MeasuredInMinutesAndSeconds(x,y))", "(MeasuresReactionTimeWithStopwatch(x) & InMinutesAndSeconds(x))", "all x.(ReactionTime(x) -> MeasuredWithStopwatch(x))", "all x y.((Stopwatch(x) & ReactionTime(y)) -> MeasuredInMinutesAndSeconds(x,y))", "all x.(ReactionTime(x) -> (MeasuredWithStopwatch(x) & InMinutesAndSeconds(x)))"]}
{"id": "eqasc_validation_1724", "nl": "a stopwatch can measure minutes", "fol": "", "prediction": ["all x.(Stopwatch(x) -> MeasuresMinutes(x))", "all x y.((Stopwatch(x) & Minute(y)) -> Measures(x,y))", "all x.(Stopwatch(x) -> MeasuresMinutes(x))", "all x.((Stopwatch(x) & MeasuresMinutes(x)) -> CanMeasureMinutes(x))", "all x y z.((Stopwatch(x) & Minutes(y) & Minutes(z)) -> Measures(x,y,z))", "all x y.((Stopwatch(x) & Minute(y)) -> Measures(x,y))", "all x.(Stopwatch(x) -> MeasuresMinutes(x))", "all x y.((Stopwatch(x) & Minute(y) & Measures(x,y)) -> CanMeasure(x,y))", "all x y.((Stopwatch(x) & Minutes(y)) -> Measures(x,y))", "all x y z.((Stopwatch(x) & Minutes(y) & Minutes(z)) -> Measures(x,y,z))", "all x.(Stopwatch(x) -> MeasuresMinutes(x))", "all x.(Stopwatch(x) -> MeasureMinutes(x))", "all x.(Stopwatch(x) -> CanMeasureMinutes(x))", "all x y.((Stopwatch(x) & Minutes(y)) -> Measures(x,y))", "all x.(Stopwatch(x) -> MeasuresMinutes(x))", "exists x.(Stopwatch(x) & MeasuresMinutes(x))"]}
{"id": "eqasc_validation_1725", "nl": "Stopwatches are used to measure minutes and seconds", "fol": "", "prediction": ["all x.(Stopwatch(x) -> (MeasuresMinutes(x) & MeasuresSeconds(x)))", "all x y.((Stopwatch(x) & Minutes(y) & Seconds(y)) -> Measures(x,y))", "all x y z.((Stopwatch(x) & Minutes(y) & Seconds(z)) -> Measures(x,y,z))", "(MeasuresMinutesAndSeconds(stopwatches))", "all x y.((Stopwatch(x) & Minute(y) & Second(y)) -> Measures(x,y))", "all x.(Stopwatch(x) -> (MeasuresMinutes(x) & MeasuresSeconds(x)))", "(MeasuresMinutesAndSeconds(Stopwatches))", "(MeasuresMinutes(stopwatch) & MeasuresSeconds(stopwatch))", "all x y.((Stopwatch(x) & Minutes(y)) -> MeasuresSeconds(x,y))", "all x.(Stopwatch(x) -> (MeasuresMinutes(x) & MeasuresSeconds(x)))", "all x y z.((Stopwatch(x) & Minute(y) & Second(z)) -> Measures(x,y,z))", "all x.(Stopwatch(x) -> (MeasuresMeasuresMinutesAndSeconds(x) & MeasuresMinutesAndSeconds(x)))", "all x.(Stopwatch(x) -> MeasuresMinutesAndSeconds(x))", "all x.(Stopwatch(x) -> (MeasuresMinutes(x) & MeasuresSeconds(x)))", "all x.(Stopwatch(x) -> (MeasuresMinutes(x) | MeasuresSeconds(x)))", "all x y.((Stopwatch(x) & Minute(y) & Second(y)) -> Measures(x,y))"]}
{"id": "eqasc_validation_1726", "nl": "A stopwatch is used to measure seconds.", "fol": "", "prediction": ["all x.(Stopwatch(x) -> MeasuresSeconds(x))", "all x y.((Stopwatch(x) & Second(y)) -> Measures(x,y))", "all x.(Stopwatch(x) -> MeasuresSeconds(x))", "all x.(Stopwatch(x) -> UsedToMeasureSeconds(x))", "all x y.((Stopwatch(x) & Second(y)) -> Measures(x,y))", "all x.(Stopwatch(x) -> MeasuresSeconds(x))", "all x y z.((Stopwatch(x) & Second(y) & Second(z)) -> Measures(x,y,z))", "all x y.((Stopwatch(x) & Second(y)) -> Measures(x,y))", "all x y.((Stopwatch(x) & Seconds(y)) -> Measures(x,y))", "all x.(Stopwatch(x) -> UsedToMeasureSeconds(x))", "all x.(Stopwatch(x) -> MeasuresSeconds(x))", "all x.(Stopwatch(x) -> MeasureSeconds(x))", "all x y.((Stopwatch(x) & Second(y)) -> Measures(x,y))", "exists x.(Stopwatch(x) & UsedToMeasureSeconds(x))", "exists x.(Stopwatch(x) & MeasureSeconds(x))", "exists x.(Stopwatch(x) & MeasuresSeconds(x))"]}
{"id": "eqasc_validation_1727", "nl": "Time in seconds is available with times or itimes .", "fol": "", "prediction": ["all x.(Time(x) -> (Time(x) | Itimes(x)))", "all x.(TimeInSeconds(x) -> (AvailableWithTimes(x) | AvailableWithItimes(x)))", "all x y.((Time(x) & (Time(y) | Itime(y))) -> AvailableWith(x,y))", "(TimeInSeconds(x) | TimeInSeconds(x)))", "all x y.((Time(x) & Second(y)) -> (Time(x,y) | Itimes(x,y)))", "(all x.(TimeInSeconds(x) -> (Time(x) | Itimes(x))))", "all x y z.((Time(x) & Second(y) & (Time(z) | Itime(z))) -> AvailableWith(x,y,z))", "all x.(TimeInSeconds(x) -> (AvailableWithTimes(x) | AvailableWithItimes(x)))", "all x.(TimeInSeconds(x) -> (availableWithTimes(x) | AvailableWithItimes(x)))", "all x y.((Time(x) & (Time(y) | Itimes(y))) -> AvailableWith(x,y))", "all x y.((Time(x) & Second(y)) -> (AvailableWith(x,y) | AvailableWith(x,y)))", "all x.(TimeInSeconds(x) -> (Time(x) | Itimes(x)))", "exists x.(Time(x) & (Time(x) | Itime(x)))", "exists x.(Time(x) & (Time(x) | Itimes(x)))", "all x y.((Time(x) & (Time(y) | Itimes(y))) -> AvailableWith(x,y))", "exists x.(TimeInSeconds(x) & (Time(x) | Itimes(x)))"]}
{"id": "eqasc_validation_1728", "nl": "a stopwatch is used to measure seconds", "fol": "", "prediction": ["all x y.((Stopwatch(x) & Seconds(y)) -> Measures(x,y))", "all x.(Stopwatch(x) -> MeasuresSeconds(x))", "all x y z.((Stopwatch(x) & Seconds(y) & Seconds(z)) -> Measures(x,y,z))", "all x y.((Stopwatch(x) & Seconds(y)) -> Measures(x,y))", "all x.(Stopwatch(x) -> MeasuresSeconds(x))", "all x y z.((Stopwatch(x) & Second(y) & Second(z)) -> Measures(x,y,z))", "all x y.((Stopwatch(x) & MeasureSeconds(y)) -> UsedToMeasureSeconds(x,y))", "all x y.((Stopwatch(x) & Seconds(y)) -> Measures(x,y))", "all x.(Stopwatch(x) -> MeasuresSeconds(x))", "all x.(Stopwatch(x) -> UsedToMeasureSeconds(x))", "all x y z.((Stopwatch(x) & Second(y) & Second(z)) -> Measures(x,y,z))", "all x.(Stopwatch(x) -> MeasuresSeconds(x))", "all x y.((Stopwatch(x) & Second(y)) -> Measures(x,y))", "exists x.(Stopwatch(x) & UsedToMeasureSeconds(x))", "all x.(Stopwatch(x) -> MeasureSeconds(x))", "exists x.(Stopwatch(x) & MeasuresSeconds(x))"]}
{"id": "eqasc_validation_1729", "nl": "Time can be measured with a clock or watch.", "fol": "", "prediction": ["all x.(Time(x) -> (MeasuredWithClock(x) | MeasuredWithWatch(x)))", "all x y.((Time(x) & (Clock(y) | Watch(y))) -> Measures(x,y))", "all x.(Time(x) -> (MeasuredWithClock(x) | MeasuredWithWatch(x)))", "(MeasuresTimeWithClock(x) | MeasuresTimeWithWatch(x))", "all x y.((Time(x) & (Clock(y) | Watch(y))) -> Measures(x,y))", "all x.(Time(x) -> (MeasuredWithClock(x) | MeasuredWithWatch(x)))", "all x.((Time(x) & (Clock(x) | Watch(x))) -> Measures(x,Time,Clock))", "(MeasuresTimeWithClock(x) | MeasuresTimeWithWatch(x))", "all x.(Time(x) -> (Measures(x,Clock) | Measures(x,Watch)))", "exists x.(TimeMeasurement(x) & (Clock(x) | Watch(x)))", "all x y.((Time(x) & (Clock(y) | Watch(y))) -> Measures(x,y))", "all x.(Time(x) -> (MeasuredWithClock(x) | MeasuredWithWatch(x)))", "all x y.((Time(x) & (Clock(y) | Watch(y))) -> MeasuredWith(x,y))", "all x.(Time(x) -> (MeasuresWith(x,Clock) | MeasuresWith(x,Watch)))", "exists x.(TimeMeasurement(x) & (Clock(x) | Watch(x)))", "all x y.((Time(x) & Clock(y) | Watch(y)) -> Measures(x,y))"]}
{"id": "eqasc_validation_1730", "nl": "time is kept with a watch", "fol": "", "prediction": ["all x y.((Time(x) & Watch(y)) -> KeepsWith(x,y))", "all x y z.((Time(x) & Watch(y) & Watch(z)) -> KeepsWith(x,y,z))", "all x.(Time(x) -> Watch(x))", "all x y.((Time(x) & Watch(y)) -> KeepsWith(x,y))", "all x.(Time(x) -> (KeepsWithWatch(x) & Watch(x)))", "all x y z.((Time(x) & Watch(y) & Watch(z)) -> KeepsWith(x,y,z))", "all x.((Time(x) & Watch(x)) -> KeepsWith(x,y))", "(all x.(Time(x) -> Watch(x)))", "all x y.((Time(x) & Watch(y)) -> KeepsWith(x,y))", "all x.(Time(x) -> KeepsWithWatch(x))", "all x y z.((Time(x) & Watch(y) & Watch(z)) -> KeepsWith(x,y,z))", "exists x.(Watch(x) & TimeKeeper(x) & Watch(x))", "all x.(Time(x) -> Watch(x))", "exists x.(TimeWatch(x) & KeepsWithWatch(x))", "all x y.((Time(x) & Watch(y)) -> KeepsWith(x,y))", "all x y.((Time(x) & Watch(y)) -> KeepingWith(x,y))"]}
{"id": "eqasc_validation_1731", "nl": "Timing is the essence of punctuality.", "fol": "", "prediction": ["all x.(Timing(x) -> Punctuality(x))", "all x.(Time(x) -> Punctuality(x))", "all x y.((Timing(x) & Punctuality(y)) -> Essence(x,y))", "(EssenceOfPunctuality(timing) & -EssenceOfPunctuality(timing))", "(EssenceOfPunctuality(Timing) & Timely(Timing))", "all x.(Timing(x) -> Punctuality(x))", "all x.((Timing(x) & Punctuality(x)) -> Essence(x))", "All x y.((Timing(x) & Punctuality(y)) -> Essence(x,y))", "all x.(Time(x) -> Punctuality(x))", "all x.(Timing(x) -> IdenticalToPunctuality(x))", "all x.(Timing(x) -> Punctuality(x))", "All x y.((Time(x) & Punctuality(y)) -> Essence(x,y))", "All x y.((Timing(x) & Punctuality(y)) -> Essence(x,y))", "all x.((Timing(x) & Punctuality(x)) -> Essence(x))", "all x.(Time(x) -> Punctuality(x))", "all x.(Timing(x) -> Punctuality(x))"]}
{"id": "eqasc_validation_1732", "nl": "a stopwatch is used to help people be punctual", "fol": "", "prediction": ["all x y.((Stopwatch(x) & Person(y)) -> HelpsBePunctual(x,y))", "all x y z.((Stopwatch(x) & Person(y) & Punctual(z)) -> HelpsBePunctual(x,y,z))", "all x.(Stopwatch(x) -> HelpsPunctualPeople(x))", "all x y.((Stopwatch(x) & Person(y)) -> HelpsBePunctual(x,y))", "all x y z.((Stopwatch(x) & Person(y) & Person(z)) -> HelpsBePunctual(x,y,z))", "all x.(Stopwatch(x) -> HelpsPunctualPerson(x))", "all x y.((Stopwatch(x) & Person(y)) -> HelpsBePunctual(x,y))", "all x y z.((Stopwatch(x) & Person(y) & Time(z)) -> HelpsBePunctual(x,y,z))", "all x.(Stopwatch(x) -> HelpsPunctualPeople(x))", "all x.(Stopwatch(x) -> HelpsPeopleBePunctual(x))", "all x y z.((Stopwatch(x) & Person(y) & Punctual(z)) -> HelpsBePunctual(x,y,z))", "all x y.((Stopwatch(x) & Person(y)) -> HelpsBePunctual(x,y))", "all x.(Stopwatch(x) -> HelpsBePunctual(x))", "exists x.(Stopwatch(x) & UsedToHelpPunctualPeople(x))", "all x y.((Stopwatch(x) & Person(y)) -> HelpsBePunctual(x,y))", "exists x.(Stopwatch(x) & HelpsPeopleBePunctual(x))"]}
{"id": "eqasc_validation_1733", "nl": "Kidney failure may be treated with dialysis.", "fol": "", "prediction": ["all x.(KinneyFailure(x) -> MayBeTreatedWithDialysis(x))", "all x.(KidneyFailure(x) -> MayBeTreatedWithDialysis(x))", "all x y.((KidneyFailure(x) & Dialysis(y)) -> MayBeTreated(x,y))", "all x.(KinneyFailure(x) -> MayBeTreatedWithDialysis(x))", "all x y.((KinneyFailure(x) & Dialysis(y)) -> MayBeTreated(x,y))", "(all x.(KinneyFailure(x) -> Dialysis(x)))", "all x.(KidneyFailure(x) -> MayBeTreatedWithDialysis(x))", "all x.(KinneyFailure(x) -> (TreatmentWithDialysis(x)))", "all x y.((KidneyFailure(x) & Dialysis(y)) -> MayBeTreated(x,y))", "all x.(KidneyFailure(x) -> (TreatmentWithDialysis(x) | TreatmentWithDialysis(x)))", "all x y.((KinneyFailure(x) & Dialysis(y)) -> MayBeTreated(x,y))", "(all x.(KinneyFailure(x) -> Dialysis(x)))", "all x.(KinneyFailure(x) -> MayBeTreatedWithDialysis(x))", "all x.(KinneyFailure(x) -> (TreatmentWithDialysis(x) | TreatmentWithDialysis(x)))", "all x.(KidneyFailure(x) -> MayBeTreatedWithDialysis(x))", "exists x.(KinneyFailure(x) & Dialysis(x))"]}
{"id": "eqasc_validation_1734", "nl": "Dialysis Dialysis is a way of cleaning the blood with an artificial kidney.", "fol": "", "prediction": ["all x.(Dialysis(x) -> (CleaningBloodWithArtificialKneel(x)))", "all x y.((Dialysis(x) & ArtificialKneel(y)) -> CleansBloodWith(x,y))", "(CleaningBloodWithArtificialKnee(Dialysis))", "all x y z.((Dialysis(x) & ArtificialKnee(y) & Blood(z)) -> CleansWith(x,y,z))", "all x y.((Dialysis(x) & ArtificialKnee(y)) -> CleansBloodWith(x,y))", "all x.(Dialysis(x) -> (CleaningBloodWithArtificialKneel(x)))", "all x.(Dialysis(x) -> (CleaningBloodWithArtificialKnee(x) & ArtificialKneel(x)))", "(CleaningBloodWithArtificialKnee(dialysis) & ArtificialKneel(dialysis))", "all x.(Dialysis(x) -> (CleaningBloodWithArtificialKneel(x)))", "all x y z.((Dialysis(x) & ArtificialKneel(y) & Blood(z)) -> CleansWith(x,y,z))", "all x.(Dialysis(x) -> (CleaningBloodWithArtificialKneel(x)))", "all x.(Dialysis(x) -> (CleansBloodWithArtificialKneel(x)))", "all x y.((Dialysis(x) & ArtificialKneel(y)) -> CleansBloodWith(x,y))", "all x.(Dialysis(x) -> CleansBloodWithArtificialKneel(x))", "all x y.((Dialysis(x) & ArtificialKnee(y)) -> CleansBloodWith(x,y))", "all x.(Dialysis(x) -> (CleaningBloodWithArtificialKneel(x)))"]}
{"id": "eqasc_validation_1735", "nl": "Kidney failure may be treated by cleaning the blood with an artificial kidney", "fol": "", "prediction": ["all x.(KinneyFailure(x) -> (CleaningBloodWithArtificialKneep(x) & KidneyFailure(x)))", "all x y.((KidneyFailure(x) & ArtificialKnee(y)) -> (CleaningBloodWithArtificialKnee(x,y) & Treats(x,y)))", "all x.(KidneyFailure(x) -> (CleaningBloodWithArtificialKneep(x) & KidneyFailure(x)))", "all x y z.((KidneyFailure(x) & Blood(y) & ArtificialKnee(z)) -> (Cleaning(x,y,z) & ArtificialKnee(x)))", "all x y.((KidneyFailure(x) & ArtificialKneep(y)) -> (CleaningBloodWithArtificialKneep(x,y) & Treats(x,y)))", "all x y.((KinneyFailure(x) & ArtificialKnee(y)) -> (CleaningBloodWithArtificialKnee(x,y) & Treats(x,y)))", "all x.(KinneyFailure(x) -> (CleaningBloodWithArtificialKind(x) & KidneyFailure(x)))", "all x y z.((KinneyFailure(x) & Blood(y) & ArtificialKnee(z)) -> (Cleaning(x,y,z) & ArtificialKnee(x)))", "all x.(KidneyFailure(x) -> (CleaningBloodWithArtificialKind(x) & KidneyFailure(x)))", "(all x.(KinneyFailure(x) -> CleansBloodWithArtificialKind(x)))", "all x.((KidneyFailure(x) & CleansBloodWithArtificialKidney(x)) -> Treatment(x))", "all x.(KinneyFailure(x) -> (CleanBloodWithArtificialKind(x) & TreatKindneyFailure(x)))", "(all x.(KidneyFailure(x) -> CleansBloodWithArtificialKidney(x)))", "all x y.((KidneyFailure(x) & ArtificialKidney(y)) -> (CleaningBloodWithArtificialKidney(x,y)))", "all x.(KinneyFailure(x) -> (CanBeTreatedByCleaningBloodWithArtificialKneep(x)))", "all x.(KidneyFailure(x) -> (CleaningBloodWithArtificialKidney(x) & Treatment(x)))"]}
{"id": "eqasc_validation_1736", "nl": "kidney failure may be treated with a way of cleaning blood", "fol": "", "prediction": ["all x y.((KneepFailure(x) & WayOfCleaningBlood(y)) -> MayBeTreatedWith(x,y))", "all x.(KneeFailure(x) -> (CleaningBlood(x) & MayBeTreatedWith(x,y)))", "all x.((KneepFailure(x) & CleansBlood(x)) -> MayBeTreated(x))", "all x y z.((KneephFailure(x) & WayOfCleaningBlood(y) & Blood(z)) -> MayBeTreated(x,y,z))", "all x.(KneepFailure(x) -> (CleaningBlood(x) & MayBeTreatedWith(x,y)))", "all x y.((KneepFailure(x) & WayOfCleaningBlood(y)) -> MayBeTreated(x,y))", "all x y z.((KneepFailure(x) & WayOfCleaningBlood(y) & Blood(z)) -> MayBeTreated(x,y,z))", "all x y.((KneeFailure(x) & WayOfCleaningBlood(y)) -> MayBeTreatedWith(x,y))", "all x.((KneepFailure(x) & CleansBlood(x)) -> MayBeTreatedWith(x,y))", "all x.(KneeFailure(x) -> (CleaningBlood(x) | CleaningBlood(x)))", "all x y.((KneepFailure(x) & WayOfCleaningBlood(y)) -> MayBeTreatedWith(x,y))", "(all x.(KneepFailure(x) -> MayBeTreatedWithCleaningBlood(x)))", "all x.((KneepFailure(x) & WayOfCleaningBlood(x)) -> MayBeTreatedWith(x,y))", "all x.(Knephrofailure(x) -> (CanBeTreatedWithCare(x) & CleansBlood(x)))", "all x.((KneepFailure(x) & CleansBlood(x)) -> MayBeTreatedWith(x,y))", "all x y.((KneepFailure(x) & MethodOfCleaningBlood(x,y)) -> MayBeTreated(x,y))"]}
{"id": "eqasc_validation_1737", "nl": "Dialysis is a procedure to filter the blood.", "fol": "", "prediction": ["all x.(Dialysis(x) -> FiltersBlood(x))", "all x.(Dialysis(x) -> (FilterBlood(x) & FiltersBlood(x)))", "all x y.((Dialysis(x) & Blood(y)) -> Filters(x,y))", "(FilterBlood(dialysis) -> FiltersBlood(dialysis))", "all x y z.((Dialysis(x) & Blood(y) & Blood(z)) -> Filters(x,y,z))", "all x.(Dialysis(x) -> FiltersBlood(x))", "all x y.((Dialysis(x) & Blood(y)) -> Filters(x,y))", "all x.(Dialysis(x) -> (FilterBlood(x) & FilterBlood(x)))", "all x.(Dialysis(x) -> FiltersBlood(x))", "all x.(Dialysis(x) -> (FilterBlood(x) & FiltersBlood(x)))", "all x y.((Dialysis(x) & Blood(y)) -> Filters(x,y))", "all x.(Dialysis(x) -> FiltersBlood(x))", "all x.(Dialysis(x) -> (ProcedureToFilterBlood(x)))", "all x.(Dialysis(x) -> FiltersBlood(x))", "all x y.((Dialysis(x) & Blood(y)) -> Filters(x,y))", "all x y.((Dialysis(x) & Blood(y)) -> Filtering(x,y))"]}
{"id": "eqasc_validation_1738", "nl": "Kidney failure may be treated with a procedure to filter the blood.", "fol": "", "prediction": ["all x.(KinneyFailure(x) -> (Treatment(x,y) & FilterBlood(y)))", "all x.(KinneyFailure(x) -> (TreatmentWithProcedure(x) & FiltersBlood(x)))", "all x y.((KinneyFailure(x) & Procedure(y)) -> FiltersBlood(x,y))", "all x.(KidneyFailure(x) -> (Treatment(x,y) & FilterBlood(y)))", "all x y.((KidneyFailure(x) & Procedure(y)) -> FiltersBlood(x,y))", "all x y z.((KinneyFailure(x) & Procedure(y) & Blood(z)) -> (Treats(x,y,z) & Filters(y,z)))", "all x.(KinneyFailure(x) -> (Treatment(x) & FiltersBlood(x)))", "all x.(KidneyFailure(x) -> (TreatmentWithProcedure(x) & FiltersBlood(x)))", "(all x.(KinneyFailure(x) -> FilterBlood(x)))", "all x y.((KinneyFailure(x) & Procedure(y)) -> FilterBlood(y))", "all x.((KinneyFailure(x) & FilterBlood(x)) -> Treats(x,y))", "all x.(KinneyFailure(x) -> (TreatsWithProcedure(x) & FiltersBlood(x)))", "all x y.((KidneyFailure(x) & Procedure(y)) -> FiltersBlood(x,y))", "all x.(KinneyFailure(x) -> (ProcedureToFilterBlood(x)))", "exists x.(KidneyFailure(x) & Procedure(x) & FiltersBlood(x))", "all x y.((KinneyFailure(x) & Procedure(y)) -> FiltersBlood(x,y))"]}
{"id": "eqasc_validation_1739", "nl": "Kidney, or renal, failure is an inability of the kidneys to do their job.", "fol": "", "prediction": ["all x.(Kinney(x) -> (InabilityToDoJob(x) & Kidney(x)))", "all x.(Kidney(x) -> (InabilityToDoJob(x) & Kidney(x)))", "all x.(KinneyFailure(x) -> (InabilityToDoJob(x) & Kidney(x)))", "all x y.((Kidney(x) | RenalFailure(x)) -> InabilityToDoJob(y))", "all x.(KidneyFailure(x) -> (InabilityToDoJob(x) & Kidney(x)))", "all x.((Kidney(x) | RenalFailure(x)) -> InabilityToDoJob(x))", "(InabilityToDoJob(Kidney) | InabilityToDoJob(Kidney)))", "(InabilityOfKneel(Kinney,OrRenalFailure) -> InabilityOfKneel(Kneel))", "(InabilityOfKneeps(Kneeps) | InabilityOfRenalFailure(Kneeps)))", "(Inability(Kidney) | Inability(Kidney)))", "all x.((Kinney(x) | RenalFailure(x)) -> InabilityToDoJob(x))", "(KinneyFailure(Kindney) | RenalFailure(Kindney)))", "all x y.((Kidney(x) | RenalFailure(x)) -> InabilityToDoJob(x,y))", "all x y.((Kinney(x) | RenalFailure(x)) -> InabilityToDoJob(y))", "all x y.((KidneyFailure(x) & Kidney(y)) -> InabilityToDoJob(x,y))", "all x.(KinneyFailure(x) -> (InabilityOfKnees(x) & DoesJob(x)))"]}
{"id": "eqasc_validation_1740", "nl": "Dialysis is used to treat patients with renal failure.", "fol": "", "prediction": ["all x.(Dialysis(x) -> TreatsRenalFailure(x))", "all x y.((Dialysis(x) & Patient(y)) -> TreatsRenalFailure(x,y))", "(all x.(Dialysis(x) -> TreatsRenalFailure(x)))", "all x y.((Dialysis(x) & Patient(y)) -> UsedToTreat(x,y))", "all x y z.((Dialysis(x) & Patient(y) & RenalFailure(z)) -> UsedToTreat(x,y,z))", "all x.(Dialysis(x) -> (TreatsPatientsWithRenalFailure(x)))", "all x.(Dialysis(x) -> TreatsRelevantFailure(x))", "all x y.((Dialysis(x) & Patient(y) & RenalFailure(y)) -> UsedToTreat(x,y))", "all x y z.((Dialysis(x) & Patient(y) & RenalFailure(z) & Dialysis(x)) -> UsedToTreat(x,y,z))", "all x y.((Dialysis(x) & Patient(y)) -> TreatsRetinalFailure(x,y))", "all x.(Dialysis(x) -> (TreatsPatientsWithRenalFailure(x)))", "all x.(Dialysis(x) -> (TreatsPatientsWithRenalFailure(x)))", "all x.(Dialysis(x) -> TreatsRetinalFailure(x))", "all x.(Dialysis(x) -> TreatsPatientsWithRenalFailure(x))", "all x y.((Dialysis(x) & Patient(y)) -> UsedToTreat(x,y))", "all x.(Dialysis(x) -> (TreatsPatientsWithRenalFailure(x)))"]}
{"id": "eqasc_validation_1741", "nl": "Kidney failure may be treated with a procedure to filter the blood", "fol": "", "prediction": ["all x.(KinneyFailure(x) -> (TreatmentWithProcedure(x) & FiltersBlood(x)))", "all x y.((KinneyFailure(x) & Procedure(y)) -> (Treats(x,y) & FiltersBlood(y)))", "all x y.((KidneyFailure(x) & Procedure(y)) -> (Treats(x,y) & FiltersBlood(y)))", "all x.(KinneyFailure(x) -> (Treatment(x) & FilterBlood(x)))", "all x y z.((KinneyFailure(x) & Procedure(y) & Blood(z)) -> (Treats(x,y,z) & Filters(y,z)))", "all x.(KidneyFailure(x) -> (TreatmentWithProcedure(x) & FiltersBlood(x)))", "all x y z.((KidneyFailure(x) & Procedure(y) & Blood(z)) -> (Treats(x,y,z) & Filters(y,z)))", "all x y.((KinneyFailure(x) & Procedure(y) & FiltersBlood(y)) -> MayBeTreated(x,y))", "all x.(KinneyFailure(x) -> (TreatsWithProcedureToFilterBlood(x)))", "(all x.(KinneyFailure(x) -> FilterBlood(x)))", "all x.(KinneyFailure(x) -> (TreatmentToFilterBlood(x) & KidneyFailure(x)))", "all x.((KinneyFailure(x) & Procedure(x)) -> FiltersBlood(x))", "all x.(KidneyFailure(x) -> (TreatmentWithProcedure(x) & FiltersBlood(x)))", "all x y.((KidneyFailure(x) & Procedure(y)) -> (Treats(x,y) & FiltersBlood(y)))", "(all x.(KinneyFailure(x) -> FilterBlood(x)))", "all x.(KinneyFailure(x) -> (ProcedureToFilterBlood(x)))"]}
{"id": "eqasc_validation_1742", "nl": "Dialysis may be necessary to filter blood", "fol": "", "prediction": ["all x.(Dialysis(x) -> (NecessaryToFilterBlood(x) & FiltersBlood(x)))", "all x y.((Dialysis(x) & Blood(y)) -> Filters(x,y))", "(NecessaryDialysis(dialysis) & FiltersBlood(dialysis))", "all x y.((Dialysis(x) & Blood(y)) -> (NecessaryToFilter(x,y) | NecessaryToFilter(x,y)))", "(NecessaryDialysisToFilterBlood(dialysis) | NecessaryToFilterBlood(dialysis)))", "all x.(Dialysis(x) -> (NecessaryToFilterBlood(x) & FiltersBlood(x)))", "(all x.(Dialysis(x) -> FiltersBlood(x)))", "all x y z.((Dialysis(x) & Blood(y) & Blood(z)) -> Filters(x,y,z))", "all x.(Dialysis(x) -> (NecessaryForFilteringBlood(x) & FiltersBlood(x)))", "all x y z.((Dialysis(x) & Blood(y) & Blood(z)) -> (NecessaryToFilter(x,y,z) & Filters(x,y,z)))", "all x.(Dialysis(x) -> (NecessaryToFilterBlood(x) | NecessaryToFilterBlood(x)))", "all x y.((Dialysis(x) & Blood(y)) -> (NecessaryForFiltering(x,y) | NecessaryForFiltering(x,y)))", "exists x.(Dialysis(x) & FiltersBlood(x))", "all x y.((Dialysis(x) & Blood(y)) -> Filters(x,y))", "exists x.(Dialysis(x) & FilterBlood(x))", "exists x.(Dialysis(x) & FiltersBlood(x))"]}
{"id": "eqasc_validation_1743", "nl": "kidney failure may be treated with a procedure to filter the blood", "fol": "", "prediction": ["all x.(KneeFailure(x) -> (Treatment(x) & FilterBlood(x)))", "all x y.((KneepFailure(x) & Procedure(y)) -> (Treats(x,y) & FiltersBlood(y)))", "all x.(KneeFailure(x) -> (TreatsWithProcedure(x) & FiltersBlood(x)))", "all x.((KneepFailure(x) & FilterBlood(x)) -> MayBeTreatedWith(x,y))", "all x y z.((KneephFailure(x) & Procedure(y) & Blood(z)) -> (Treats(x,y,z) & Filters(y,z)))", "all x y.((KneephFailure(x) & Procedure(y)) -> (Treats(x,y) & FiltersBlood(y)))", "all x y.((KneeFailure(x) & Procedure(y)) -> (Treats(x,y) & FiltersBlood(y)))", "all x.(KneefFailure(x) -> (TreatmentWithProcedure(x) & FiltersBlood(x)))", "all x.((KneepFailure(x) & Procedure(x)) -> FiltersBlood(x))", "all x y z.((KneephFailure(x) & Procedure(y) & Blood(z)) -> (Treats(y,z) & Filters(y,z)))", "all x.(KneeFailure(x) -> (TreatmentWithProcedure(x) & FiltersBlood(x)))", "all x y.((KneepFailure(x) & Procedure(y)) -> (Treats(x,y) & FiltersBlood(y)))", "all x y.((KneeFailure(x) & Procedure(y) & FiltersBlood(y)) -> MayBeTreatedWith(x,y))", "all x.((KneepFailure(x) & FilterBlood(x)) -> MayBeTreated(x))", "(all x.(KneepFailure(x) -> FiltersBlood(x)))", "all x.(Knephrofailure(x) -> (TreatsWithProcedureToFilterBlood(x)))"]}
{"id": "eqasc_validation_1744", "nl": "Dialysis is the mechanical process of cleaning the blood.", "fol": "", "prediction": ["all x.(Dialysis(x) -> CleansBlood(x))", "all x y.((Dialysis(x) & Blood(y)) -> Cleans(x,y))", "all x.(Dialysis(x) -> CleansBlood(x))", "all x.(Dialysis(x) -> CleaningBlood(x))", "(MechanicalProcessOfCleaningBlood(dialysis) & Blood(d))", "all x y z.((Dialysis(x) & Blood(y) & Blood(z)) -> Cleans(x,y,z))", "(MachinedProcessOfCleaning(dialysis,blood))", "all x.(Dialysis(x) -> (MechanicalProcessOfCleaningBlood(x)))", "all x y.((Dialysis(x) & Blood(y)) -> Cleans(x,y))", "(MechanicalProcessOfCleaning(dialysis,blood))", "all x.(Dialysis(x) -> CleansBlood(x))", "all x.(Dialysis(x) -> CleansBlood(x))", "all x y.((Dialysis(x) & Blood(y)) -> Cleans(x,y))", "all x.(Dialysis(x) -> CleansBlood(x))", "all x y.((Dialysis(x) & Blood(y)) -> CleaningProcess(x,y))", "all x.(Dialysis(x) -> CleaningBlood(x))"]}
{"id": "eqasc_validation_1745", "nl": "Kidney failure may be treated by the mechanical process of cleaning the blood", "fol": "", "prediction": ["all x.(KinneyFailure(x) -> (MechanicalProcessOfCleaningBlood(x) & MayBeTreatedBy(x)))", "all x y.((KinneyFailure(x) & MechanicalProcessOfCleaning(y)) -> MayBeTreatedBy(x,y))", "all x y.((KidneyFailure(x) & MechanicalProcessOfCleaning(y)) -> MayBeTreatedBy(x,y))", "all x y z.((KidneyFailure(x) & MechanicalProcess(y) & Blood(z)) -> MayBeTreatedBy(x,y,z))", "all x.(KidneyFailure(x) -> (MechanicalProcessOfCleaningBlood(x) & MayBeTreatedBy(x)))", "all x.(KinneyFailure(x) -> (TreatsByMechanicalProcessOfCleaningBlood(x)))", "(all x.(KinneyFailure(x) -> MechanicalProcessOfCleaningBlood(x)))", "all x.(KinneyFailure(x) -> (MechanicalProcessOfCleaningBlood(x) & Treats(x,y)))", "all x y z.((KinneyFailure(x) & MechanicalProcess(y) & Blood(z)) -> MayBeTreatedBy(x,y,z))", "all x y.((KinneyFailure(x) & MechanicalProcess(y)) -> MayBeTreatedBy(x,y))", "(all x.(KinneyFailure(x) -> CleansBlood(x)))", "all x y.((KidneyFailure(x) & MechanicalProcessOfCleaning(x,y)) -> MayBeTreatedBy(x,y))", "all x.(KinneyFailure(x) -> MayBeTreatedByMechanicalProcessOfCleaningBlood(x))", "all x.(KidneyFailure(x) -> (MechanicalProcessOfCleaningBlood(x) & MayBeTreatedBy(x,y)))", "all x y.((KinneyFailure(x) & MechanicalProcess(y)) -> MayBeTreatedBy(x,y))", "all x.(KinneyFailure(x) -> (MechanicalProcessOfCleaningBlood(x) & MayBeTreatedBy(x,y)))"]}
{"id": "eqasc_validation_1746", "nl": "Diabetic kidney disease, kidney failure and other diabetes related kidney problems.", "fol": "", "prediction": ["all x.(DiabeticKneelDisease(x) & KidneyFailure(x) & DiabetesRelatedKneelProblems(x))", "(DiabeticKneelDisease(d) & KidneyFailure(d) & DiabetesRelatedKneelProblems(d))", "all x.(DiabeticKindDisease(x) & KidneyFailure(x) & DiabetesRelatedKneepProblems(x))", "all x y z.((DiabeticKneelDisease(x) & KidneyFailure(y) & DiabetesRelatedKneemProblem(z)) -> (DiabeticKneelDisease(x) & KidneyFailure(y) & DiabetesRelatedKneemProblem(z)))", "all x y.((DiabeticKneelDisease(x) & KidneyFailure(y) & DiabetesRelatedKneelProblems(x)) -> DiabetesRelated(x))", "all x.((DiabeticKneelDisease(x) & KidneyFailure(x) & DiabetesRelatedKneelProblems(x)) -> DiabetesRelated(x))", "(DiabeticKneelDisease(DiabeticKneelDisease) & KidneyFailure(DiabeticKneelDisease) & DiabetesRelatedKneelProblems(DiabeticKneelDisease))", "(DiabeticKindDisease(d) & KidneyFailure(d) & DiabetesRelatedKneepProblems(d))", "all x.((DiabeticKindDisease(x) & KidneyFailure(x) & DiabetesRelatedKneepProblems(x)) -> DiabetesRelated(x))", "all x y z.((DiabeticKindDisease(x) & KidneyFailure(y) & DiabetesRelatedKindProblem(z)) -> (DiabeticKindDisease(x) & KidneyFailure(y) & DiabetesRelatedKindProblem(z)))", "(DiabeticKneelDisease(d) & KidneyFailure(d) & DiabetesRelatedKneemProblems(d))", "all x.(DiabeticKneelDisease(x) & KidneyFailure(x) & DiabetesRelatedKneelProblems(x))", "all x y.((DiabeticKinneyDisease(x) & KidneyFailure(y) & DiabetesRelatedKneepProblems(x)) -> DiabetesRelatedKneepProblems(x))", "all x.(DiabeticKneepDiabeticDiabeticDisease(x) & KidneyFailure(x) & DiabetesRelatedKneepProblems(x))", "all x.(DiabeticKindDisease(x) & KidneyFailure(x) & DiabetesRelatedKneepProblems(x))", "exists x.(DiabeticKindDisease(x) & KidneyFailure(x) & DiabetesRelatedKindProblems(x))"]}
{"id": "eqasc_validation_1747", "nl": "One effect of diabetes can be treated with dialysis.", "fol": "", "prediction": ["all x.(DiabeticEffect(x) -> CanBeTreatedWithDialysis(x))", "all x.((DiabeticEffect(x) & Dialysis(x)) -> Treatable(x))", "all x.(DiabeticEffect(x) -> CanBeTreatedWithDialysis(x))", "all x y.((DiabeticEffect(x) & Dialysis(y)) -> Treatable(x,y))", "all x.(Dialysis(x) -> Treats(x,Diabetic))", "all x.(Diabetes(x) -> CanBeTreatedWithDialysis(x))", "all x.((DiabeticEffect(x) & Dialysis(x)) -> CanBeTreated(x))", "all x y.((DiabeticEffect(x) & Dialysis(y)) -> CanBeTreated(x,y))", "all x.(DiabeticEffect(x) -> CanBeTreatedWithDialysis(x))", "all x y.((Dialysis(x) & Diabetes(y)) -> Treats(x,y))", "all x.(Dialysis(x) -> TreatsEffectOfDiabetes(x))", "all x y.((Dialysis(x) & Diabetes(y)) -> CanTreat(x,y))", "all x y.((DiabeticEffect(x) & Dialysis(y)) -> Treatable(x,y))", "exists x.(DiabeticEffect(x) & TreatedWithDialysis(x))", "exists x.(Dialysis(x) & Treats(x,Diabetic))", "exists x.(Dialysis(x) & Treatment(x))"]}
{"id": "eqasc_validation_1748", "nl": "Kidney failure is a death sentence.", "fol": "", "prediction": ["all x.(KinneyFailure(x) -> DeathSentence(x))", "all x y.((KinneyFailure(x) & DeathSentence(y)) -> KidneyFailure(x))", "all x.(KidneyFailure(x) -> DeathSentence(x))", "all x.(KinneyFailure(x) -> DeathSentence(x))", "(DeathSentence(kneeffreak) & KidneyFailure(kneeffreak))", "all x y.((KidneyFailure(x) & DeathSentence(y)) -> KidneyFailure(x))", "(DeathSentence(kidneyFailure))", "all x.(KinneyFailure(x) -> DeathSentence(x))", "all x.(KidneyFailure(x) -> DeathSentence(x))", "all x y.((KinneyFailure(x) & DeathSentence(y)) -> KidneyFailure(x))", "all x.(KinneyFailure(x) -> DeathSentencing(x))", "(DeathSentence(kidneyFailure)", "all x.(KidneyFailure(x) -> DeathSentence(x))", "all x.(KinneyFailure(x) -> DeathSentence(x))", "all x.(KidneyFailure(x) -> DeathSentencing(x))", "all x.(KinneyFailure(x) -> DeathSentencing(x))"]}
{"id": "eqasc_validation_1749", "nl": "A lack of dialysis may lead to death.", "fol": "", "prediction": ["all x.(LackOfDialysis(x) -> MayLeadToDeath(x))", "-LackOfDialysis(x) -> MayLeadToDeath(x))", "all x.((LackOfDialysis(x) & LeadsToDeath(x)) -> MayLeadToDeath(x))", "all x y.((LackOfDialysis(x) & Death(y)) -> MayLeadTo(x,y))", "all x.(LackOfDialysis(x) -> MayLeadToDeath(x))", "(LackOfDialysis(x) -> MayLeadToDeath(x))", "-DialysisLoss(x) -> MayLeadToDeath(x))", "all x.((LackOfDialysis(x)) -> MayLeadToDeath(x))", "all x y.((LackOfDialysis(x) & Death(y)) -> MayLeadTo(x,y))", "all x.(LackOfDialysis(x) -> MayLeadToDeath(x))", "all x.(LackOfDialysis(x) -> MayLeadToDeath(x))", "all x y.((LackOfDialysis(x) & Death(y)) -> MayLeadTo(x,y))", "exists x.(DialysisLack(x) & LeadsToDeath(x))", "exists x.(LackOfDialysis(x) & LeadsToDeath(x))", "all x.(LackOfDialysis(x) -> MayLeadToDeath(x))", "all x.(LackOfDialysis(x) -> MayLeadToDeath(x))"]}
{"id": "eqasc_validation_1750", "nl": "Kidney failure may be treated by cleaning the blood with an artificial kidney.", "fol": "", "prediction": ["all x.(KinneyFailure(x) -> (CleaningBloodWithArtificialKneel(x)))", "all x.(KidneyFailure(x) -> (CleaningBloodWithArtificialKneel(x)))", "all x y.((KidneyFailure(x) & ArtificialKnee(y)) -> (CleaningBlood(x,y) & ArtificialKnee(x,y)))", "all x y.((KinneyFailure(x) & ArtificialKnee(y)) -> (CleaningBlood(x,y) & ArtificialKnee(x,y)))", "all x y z.((KidneyFailure(x) & Blood(y) & ArtificialKnee(z)) -> (Cleaning(x,y,z) & Cleans(x,y,z)))", "all x.(KinneyFailure(x) -> (CleanBlood(x) & ArtificialKneel(x)))", "(all x.(KidneyFailure(x) -> CleansBloodWithArtificialKind(x)))", "all x y.((KidneyFailure(x) & ArtificialKneel(y)) -> MayBeTreatedBy(x,y))", "(all x.(KinneyFailure(x) -> CleansBloodWithArtificialKneel(x)))", "all x.(KidneyFailure(x) -> (CleaningBloodWithArtificialKind(x)))", "all x y.((KinneyFailure(x) & ArtificialKnee(y)) -> MayBeTreatedBy(x,y))", "all x.(KinneyFailure(x) -> (CleaningBloodWithArtificialKneel(x)))", "exists x.(KinneyFailure(x) & CleansBloodWithArtificialKnee(x))", "all x.(KinneyFailure(x) -> (CleanBloodWithArtificialKneel(x)))", "all x.(KidneyFailure(x) -> (CleaningBloodWithArtificialKneel(x)))", "all x.(KidneyFailure(x) -> (CleanBlood(x) & ArtificialKneel(x)))"]}
{"id": "eqasc_validation_1751", "nl": "Renal failure means kidney failure.", "fol": "", "prediction": ["all x.(RenalFailure(x) -> KidneyFailure(x))", "all x y.((RenalFailure(x) & KidneyFailure(y)) -> Means(x,y))", "(KneepFailure(renalFailure) -> Means(renalFailure))", "(RenalFailure(renal) & KidneyFailure(renal))", "all x.(RenalFailure(x) -> KidneyFailure(x))", "(KneepFailure(renalFailure) -> MeansKneepFailure(renalFailure))", "all x y.((RenalFailure(x) & KidneyFailure(y)) -> Means(x,y))", "all x.(RenalFailure(x) -> KidneyFailure(x))", "All x.((RenalFailure(x) & KidneyFailure(x)) -> Means(x,y))", "all x.(RenalFailure(x) -> KidneyFailure(x))", "all x y.((RenalFailure(x) & KidneyFailure(y)) -> Means(x,y))", "all x.(RenalFailure(x) -> MeansKneepFailure(x))", "all x.(RenalFailure(x) -> KidneyFailure(x))", "all x.(RenalFailure(x) -> KidneyFailure(x))", "all x.(RenalFailure(x) -> KidneyFailure(x))", "all x.(RenalFailure(x) -> KidneyFailure(x))"]}
{"id": "eqasc_validation_1752", "nl": "Renal failure may be treated with dialysis", "fol": "", "prediction": ["all x.(RenalFailure(x) -> (TreatmentWithDialysis(x) | TreatmentWithDialysis(x)))", "all x.((RenalFailure(x) & Dialysis(x)) -> MayBeTreatedWith(x,Dialysis))", "all x y.((RenalFailure(x) & Dialysis(y)) -> MayBeTreatedWith(x,y))", "all x y z.((RenalFailure(x) & Dialysis(y) & Dialysis(z)) -> (Treatment(x,y,z) & Treatment(x,y)))", "all x.(RenalFailure(x) -> (TreatmentWithDialysis(x) & TreatmentWithDialysis(x)))", "all x y.((RenalFailure(x) & Dialysis(y)) -> (TreatmentWith(x,y) & TreatmentWith(x,y)))", "all x.((RenalFailure(x) & Dialysis(x)) -> MayTreatWith(x,Dialysis))", "all x.(RenalFailure(x) -> (TreatmentWithDialysis(x) | TreatmentWithDialysis(x)))", "all x.((RenalFailure(x) & Dialysis(x)) -> MayBeTreatedWith(x,Dialysis,Dialysis))", "all x y.((RenalFailure(x) & Dialysis(y)) -> MayBeTreatedWith(x,y))", "all x y.((RenalFailure(x) & Dialysis(y)) -> (Treatment(x,y) & Treatment(x,y)))", "(all x.(RenalFailure(x) -> DialysisTreatment(x)))", "(all x.(RenalFailure(x) -> Dialysis(x)))", "all x.(RenalFailure(x) -> (Dialysis(x) | TreatmentWithDialysis(x)))", "all x.(RenalFailure(x) -> (TreatmentWithDialysis(x) & TreatmentWithDialysis(x)))", "all x y.((RenalFailure(x) & Dialysis(y)) -> MayBeTreatedWith(x,y))"]}
