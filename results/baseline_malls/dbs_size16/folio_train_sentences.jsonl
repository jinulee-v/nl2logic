{"id": "folio_train_0", "nl": "All people who regularly drink coffee are dependent on caffeine.", "fol": "all x.(RegularlyDrinkCoffee(x) -> DependentOnCaffeine(x))", "prediction": ["all x.((Person(x) & RegularDrinksCoffee(x)) -> DependentOnCaffeine(x))", "all x.(RegularDrinksCoffee(x) -> DependentOnCaffeine(x))", "(all x.(RegularDrinksCoffee(x) -> DependentOnCaffeine(x)))", "all x.((Person(x) & RegularlyDrinksCoffee(x)) -> DependentOnCaffeine(x))", "all x.((Person(x) & RegularDrinksCoffee(x)) -> DependentOnCaffeine(x))", "all x y.((Person(x) & RegularDrinksCoffee(x)) -> DependentOnCaffeine(x,y))", "all x.(RegularDrinksCoffee(x) -> DependentOnCaffeine(x))", "all x.((Person(x) & DrinksCoffeeRegularly(x)) -> DependentOnCaffeine(x))", "(all x.(RegularDrinksCoffee(x) -> DependentOnCaffeine(x))", "all x y.((Person(x) & RegularDrinksCoffee(x)) -> DependentOnCaffeine(y))", "all x.((People(x) & RegularDrinksCoffee(x)) -> DependentOnCaffeine(x))", "all x.((People(x) & RegularlyDrinksCoffee(x)) -> DependentOnCaffeine(x))", "all x.(RegularDrinksCoffee(x) -> DependentOnCaffeine(x))", "all x y.((Person(x) & RegularDrinksCoffee(x)) -> DependsOnCaffeine(x,y))", "all x.((Person(x) & RegularlyDrinksCoffee(x)) -> DependentOnCaffeine(x))", "all x.(RegularDrinksCoffee(x) -> DependsOnCaffeine(x))"]}
{"id": "folio_train_1", "nl": "People either regularly drink coffee or joke about being addicted to caffeine.", "fol": "all x.((RegularlyDrinkCoffee(x) & -JokesAboutAddiction(x)) | (-RegularlyDrinkCoffee(x) & JokesAboutAddiction(x)))", "prediction": ["all x.((Person(x) & (RegularDrinksCoffee(x) | AddictsToCaffeine(x))) -> (Person(x) & AddictsToCaffeine(x)))", "exists x.(Person(x) & (RegularDrinksCoffee(x) | AddictsToCaffeine(x)))", "all x y.((Person(x) & Coffee(y)) -> (RegularDrink(x,y) | AddictToCaffeine(x,y)))", "all x.((Person(x) & (RegularDrinksCoffee(x) | AddictsToCaffeine(x))) -> (RoyalDrinksCoffee(x) | JokesAboutCaffeine(x)))", "exists x.(People(x) & (RegularDrinksCoffee(x) | AddictsToCaffeine(x)))", "all x y.((Person(x) & Coffee(y)) -> (RegularDrink(x,y) | AddictToCaffeine(x,y)))", "exists x.(Person(x) & (RegularDrinksCoffee(x) | AddictsToCaffeine(x)))", "all x.((Person(x) & (RegularDrinksCoffee(x) | AddictedToCaffeine(x))) -> (Joke(x) | AddictedToCaffeine(x)))", "exists x.(People(x) & (RegularDrinksCoffee(x) | AddictsToCaffeine(x)))", "(all x.(People(x) -> RegularDrinksCoffee(x)) | AddictsToCaffeine(x)))", "all x y.((Person(x) & Coffee(y)) -> (RegularDrink(x,y) | Addiction(x,y)))", "exists x.(Person(x) & ((RegularDrinksCoffee(x) | Addiction(x))) | Addiction(x)))", "all x y.((Person(x) & Coffee(y) & Coffee(z)) -> (RegularDrink(x,y) | Addictive(x,z)))", "exists x.(People(x) & ((RegularDrinksCoffee(x) | AddictionToCaffeine(x)) | JokeAbout(x,Caffeine)))", "all x y.((Person(x) & Coffee(y)) -> (RegularDrink(x,y) | AddictToCaffeine(x,y)))", "exists x.(Person(x) & (RegularDrinksCoffee(x) | AddictedToCaffeine(x)))"]}
{"id": "folio_train_2", "nl": "No one who jokes about being addicted to caffeine is unaware that caffeine is a drug.", "fol": "all x.(JokesAboutAddiction(x) -> -UnawareOfCaffeineDrug(x))", "prediction": ["all x.((JokesAboutAddictionToCaffeine(x)) -> UnknownDrug(x))", "all x.((JokesAboutCaffeine(x) & AddictsToCaffeine(x)) -> UnknownDrug(x))", "all x.((JocketsAboutCaffeine(x) & AddictsToCaffeine(x)) -> UnknownDrug(x))", "-all x.(JokesAboutAddictionToCaffeine(x) -> UnawareOfDrug(x))", "all x.(JokesAboutAddictionToCaffeine(x) -> UnknownDrug(x))", "all x y.((Joke(x) & AddictsToCaffeine(x)) -> Unknown(y))", "-all x.((JokesAboutAddictionToCaffeine(x)) -> UnknownDrug(x))", "all x.((Person(x) & JokesAboutAddictionToCaffeine(x)) -> UnknownDrug(x))", "-exists x.(Joke(x) & AddictsToCaffeine(x) & -Unknown(x) & Coffee(x))", "all x.((JokesAboutAddictionToCaffeine(x)) -> Unknown(x))", "all x.(JokesAboutAddictionToCaffeine(x) -> UnknownDrug(x))", "all x.((Joke(x) & AddictsToCaffeine(x)) -> UnknownDrug(x))", "all x.(JokesAboutCaffeine(x) -> UnknownDrug(x))", "-all x.(JokesAboutAddictionToCaffeine(x) -> UnknownDrug(x))", "all x.((Person(x) & JokesAboutAddictionToCaffeine(x)) -> UnawareOfDrug(x))", "all x.(JokesAboutAddictionToCaffeine(x) -> UnknownDrug(x))"]}
{"id": "folio_train_3", "nl": "Rina is either a student and unaware that caffeine is a drug, or neither a student nor unaware that caffeine is a drug.", "fol": "((IsStudent(Rina) & UnawareOfCaffeineDrug(Rina) & (IsStudent(Rina) | UnawareOfCaffeineDrug(Rina))) | (-(IsStudent(Rina) & UnawareOfCaffeineDrug(Rina)) & -(IsStudent(Rina) | UnawareOfCaffeineDrug(Rina))))", "prediction": ["((Student(Rina) & UnconsciousOfCaffeine(Rina)) | (-Student(Rina) & UnconsciousOfCaffeine(Rina))))", "all x.(Rina(x) -> ((Student(x) & UnconsciousOfCaffeine(x)) | (-Student(x) & UnconsciousOfCaffeine(x)))))", "(Student(Rina) & UnconsciousOfCaffeine(Rina)) | (-Student(Rina) & UnconsciousOfCaffeine(Rina))))", "all x y.((Rina(x) & Student(x) & UnconsciousOfCaffeine(x)) | (-UnconsciousOfCaffeine(y) & -UnconsciousOfCaffeine(y))))", "(Student(Rina) & Unknown(Rina,Caffeine)) | (-Student(Rina,Caffeine) & Unknown(Rina,Caffeine))))", "all x.((Student(x) & UnconsciousOfCaffeine(x)) | (-Student(x) & UnconsciousOfCaffeine(x))))", "all x.(Rina(x) -> ((Student(x) & UnconsciousOfCaffeine(x)) | (-Student(x) & UnconsciousOfCaffeine(x)))))", "(StudentUnderstandsCaffeine(Rina) | (-StudentUnderstandsCaffeine(Rina) & -UnderstandsCaffeine(Rina))))", "((Student(Rina) & UnconsciousOfCaffeine(Rina)) | (-Student(Rina) & UnconsciousOfCaffeine(Rina))))", "(all x.(Rina(x) -> (Student(x) & Unknowingly(x) & CaffeineDrug(x))) | (-Student(x) & Unknowingly(x) & CaffeineDrug(x))))", "all x.(Rina(x) -> ((Student(x) & Unknown(x) & CaffeineDrug(x)) | (-Student(x) & Unknown(x,caffeineDrug)))))", "((Student(Rina) & Unknown(Rina,Caffeine)) | (-Student(Rina,Caffeine) & Unknown(Rina,Caffeine))))", "all x y.((Rina(x) & Student(x) & Unknown(x,caffeine)) | (-Student(x) & Unknown(x,caffeine))))", "((Student(Rina) & UnknowinglyCaffeineDrug(Rina)) | -UnknowinglyCaffeineDrug(Rina)))", "(all x.(Rina(x) -> (Student(x) & UnknowinglyCaffeine(x)) | (-Student(x) & UnknowinglyCaffeine(x))))", "all x.(Rina(x) -> ((Student(x) & UnconsciousOfCaffeine(x)) | (-Student(x) & UnconsciousOfCaffeine(x)))))"]}
{"id": "folio_train_4", "nl": "If Rina is not a person dependent on caffeine and a student, then Rina is either a person dependent on caffeine and a student, or neither a person dependent on caffeine nor a student. ", "fol": "(((-(DependentOnCaffeine(Rina) & IsStudent(Rina)) -> (DependentOnCaffeine(Rina) & IsStudent(Rina))) & (DependentOnCaffeine(Rina) | IsStudent(Rina))) | (-(-(DependentOnCaffeine(Rina) & IsStudent(Rina)) -> (DependentOnCaffeine(Rina) & IsStudent(Rina))) & -(DependentOnCaffeine(Rina) | IsStudent(Rina))))", "prediction": ["all x.((Person(x) & -DependsOnCaffeine(x) & DependsOnStudent(x)) -> ((Person(x) & DependsOnCaffeine(x) & -DependsOnStudent(x)) | (-DependsOnCaffeine(x) & DependsOnStudent(x)))))", "all x.((Rina(x) & -DependsOnCaffeine(x) & DependsOnStudent(x)) -> ((PersonDependsOnCaffeine(x) & DependsOnStudent(x)) | (-PersonDependsOnCaffeine(x) & DependsOnStudent(x)))))", "(-DependsOnCaffeineAndStudent(Rina)) -> (PersonDependsOnCaffeineAndStudent(Rina) | -PersonDependsOnCaffeineAndStudent(Rina)))", "(-DependantOnCaffeineAndStudent(Rina)) -> ((DependantOnCaffeine(Rina) & -DependantOnCaffeine(Rina)) & -DependantOnCaffeine(Rina) & -DependantOnStudent(Rina)))", "all x.((Rina(x) & -DependantOnCaffeine(x) & -DependantOnStudent(x)) -> ((PersonDependantOnCaffeine(x) & Student(x)) | (-PersonDependantOnCaffeine(x) & Student(x)))))", "all x y.((Rina(x) & -DependsOnCaffeine(x) & DependsOnStudent(x)) -> ((PersonDependsOnCaffeine(x) & DependsOnStudent(x)) | (-PersonDependsOnCaffeine(x) & DependsOnStudent(x)))))", "all x.((Person(x) & -DependsOnCaffeine(x) & DependsOnStudent(x)) -> ((Person(x) & DependsOnCaffeine(x) & -DependsOnStudent(x)) | (-Person(x) & DependsOnCaffeine(x) & DependsOnStudent(x)))))", "all x.((Person(x) & -DependantOnCaffeine(x) & Student(x)) -> (DependantOnCaffeine(x) | -DependantOnCaffeine(x) & Student(x)))", "all x y.((Person(x) & Rina(y) & -DependsOnCaffeine(x,y) & Student(y)) -> ((Person(x,y) & DependsOnCaffeine(x,y)) | (-DependsOnCaffeine(x,y) & Student(x,y))))", "all x.((Rina(x) & -DependantOnCaffeine(x) & DependentOnStudent(x)) -> ((PersonDependantOnCaffeine(x) & DependentOnStudent(x)) | (-PersonDependantOnCaffeine(x) & DependentOnStudent(x)))))", "all x.((Person(x) & -DependsOnCaffeine(x) & Student(x)) -> ((Person(x) & DependsOnCaffeine(x) & Student(x)) | (-DependsOnCaffeine(x) & Student(x))))", "(-DependsOnCaffeineAndStudent(Rina)) | (-DependsOnCaffeineAndStudent(Rina))))", "all x.((Rina(x) & -DependsOnCaffeine(x) & DependsOnStudent(x)) -> ((PersonDependsOnCaffeine(x) & DependsOnStudent(x)) | -DependsOnCaffeine(x) & DependsOnStudent(x))))", "all x.((Person(x) & -DependantOnCaffeine(x) & Student(x)) -> (DependantOnCaffeine(x) & -DependantOnCaffeine(x) & -DependantOnStudent(x)))", "all x.((Reina(x) & -DependsOnCaffeine(x) & DependsOnStudent(x)) -> ((Reina(x) & DependsOnCaffeine(x) & -DependsOnStudent(x)) | (-DependsOnCaffeine(x) & DependsOnStudent(x)))))", "all x.((Rina(x) & -DependantOnCaffeine(x) & DependentOnStudent(x)) -> (PersonDependantOnCaffeine(x) | -DependantOnCaffeine(x) | -DependantOnStudent(x)))"]}
{"id": "folio_train_5", "nl": "Rina is a person who jokes about being addicted to caffeine or unaware that caffeine is a drug.", "fol": "(JokesAboutAddiction(Rina) | UnawareOfCaffeineDrug(Rina))", "prediction": ["all x.(Rina(x) -> (JokesAboutAddictionToCaffeine(x) | UnknowinglyAdmittedToCaffeine(x)))", "(JokesAbout(Rina,Caffeine) | UnknowinglyDrug(Rina,Caffeine)))", "Rina is a person who jokes about being addicted to caffeine or unaware that caffeine is a drug.", "all x.((Person(x) & JokesAboutAddictionToCaffeine(x)) | UnknowinglyAdmittedToCaffeine(x))", "(JokesAboutCaffeine(Rina) | UnknowinglyCaffeineDrug(Rina))", "all x.(Rina(x) -> (JokesAboutAddictionToCaffeine(x) | UnknownAboutCaffeine(x)))", "(JokesAboutAddictionToCaffeine(Rina) | UnknowinglyAdmittedToCaffeine(Rina)))", "all x y.((Person(x) & Rina(y)) -> (JokesAbout(x,y) | UnknowinglyDrug(y)))", "all x y.((Person(x) & Rina(y)) -> (JokesAboutAddictionToCaffeine(x,y) | UnknowinglyAdmittedToCaffeine(y,x)))", "(AddictedToCaffeine(Rina) | UnknowinglyDrug(Rina))", "all x.(Rina(x) -> (JokesAbout(x,Caffeine) | UnknowinglyDrug(x,Caffeine)))", "all x.((Person(x) & JokesAbout(x,Caffeine)) -> (UnknowinglyCaffeineDrug(x)))", "all x.((Person(x) & AddictsToCaffeine(x)) | UnknowinglyCaffeineDrug(x)) -> Rina(x))", "all x.(Rina(x) -> (JokesAboutAddictiveToCaffeine(x) | UnknowinglyAddictiveToCaffeine(x)))", "(AddictedToCaffeine(Rina) | Unknown(Rina)))", "all x.(Rina(x) -> (JokesAboutAddictionToCaffeine(x) | UnknownAboutCaffeine(x)))"]}
{"id": "folio_train_6", "nl": "Rina is either a person who jokes about being addicted to caffeine or is unaware that caffeine is a drug.", "fol": "(JokesAboutAddiction(Rina) | UnawareOfCaffeineDrug(Rina))", "prediction": ["all x.(Rina(x) -> (JokesAboutAddictionToCaffeine(x) | UnknownDrug(x)))", "all x.(Rina(x) -> ((JokesAboutCaffeine(x) | UnknownDrug(x))))", "(Person(Rina) & (JokesAboutAddiction(Rina) | UnknownDrug(Rina)))", "all x y.((Person(x) & Rina(y)) -> (JokesAboutAddictionToCaffeine(x,y) | UnknownDrug(y,x)))", "(JokesAboutCaffeine(Rina) | UnknownDrug(Rina))", "all x.(Rina(x) -> (JokesAboutCaffeine(x) | UnknownDrug(x)))", "(JokesAboutCaffeine(Rina) | UnknowinglyCaffeineDrug(Rina))", "exists x.(Rina(x) & ((JokesAboutAddictionToCaffeine(x) | UnknownAboutCaffeine(x))) -> Rina(x)))", "all x.(Rina(x) -> ((JokesAboutAddictionToCaffeine(x) | UnknownAboutCaffeine(x))))", "((Person(rina) & JokesAboutCaffeine(rina)) | Unknown(rina) & CaffeineDrug(rina)))", "(JokesAboutAddictionToCaffeine(Rina) | UnknownAboutCaffeine(Rina)))", "all x y.((Person(x) & Rina(y)) -> (JokesAboutAddiction(x,Caffeine) | UnknownDrug(y,Caffeine)))", "all x.((Person(x) & JokesAboutCaffeine(x)) | UnknowinglyCaffeineDrug(x))", "all x.(Rina(x) -> ((JokesAboutCaffeine(x) | UnknownDrug(x))))", "(AddictedToCaffeine(Rina) | UnknowinglyDrug(Rina))", "exists x.(Rina(x) & ((JokesAboutCaffeine(x) | UnknownAboutCaffeine(x))) -> AddictsTo(x,Caffeine)))"]}
{"id": "folio_train_7", "nl": "Rina is either a person who regularly drinks coffee or a person who is unaware that caffeine is a drug.", "fol": "(RegularlyDrinkCoffee(Rina) | UnawareOfCaffeineDrug(Rina))", "prediction": ["all x.(Rina(x) -> ((Person(x) & RegularlyDrinksCoffee(x)) | UnknowinglyDrug(x))))", "(Person(Rina) & (RegularDrinksCoffee(Rina) | Unknown(Rina,Caffeine))))", "all x.(Rina(x) -> ((RegularDrinksCoffee(x) | UnknowinglyDrug(x))))", "all x y.((Person(x) & Rina(y)) -> (RegularDrinksCoffee(x,y) | UnknowinglyDrug(y,x)))", "(Rina,Person(r) & (RegularDrinksCoffee(r) | UnknowinglyDrug(r)))", "all x.(Rina(x) -> ((Person(x) & RegularDrinksCoffee(x)) | UnknowinglyDrug(x))))", "(Person(Rina) & (RegularDrinksCoffee(Rina) | UnconsciousOfCaffeine(Rina)))", "(Rina is(Person) & (RegularDrinksCoffee(Person) | Unknown(Person) & CaffeineDrug(Person)))", "all x.(Rina(x) -> ((Person(x) & RegularlyDrinksCoffee(x)) | UnknowinglyDrug(x)))", "exists x.(Rina(x) & ((RegularDrinksCoffee(x) & -UnconsciousOfCaffeine(x)) | (-RegularDrinksCoffee(x) & UnconsciousOfCaffeine(x)))))", "all x y.((Person(x) & Rina(y)) -> (RegularDrinksCoffee(x,y) | Unknown(y,CaffeineDrug)))", "all x.(Rina(x) -> (Person(x) & (RegularDrinksCoffee(x) | Unknown(x) & CaffeineDrug(x))))", "((Person(rina) & RegularDrinksCoffee(rina)) | (Unknown(rina,caffeine,drug))))", "all x.(Rina(x) -> ((RegularDrinksCoffee(x) | UnknownDrug(x))))", "exists x.(Rina(x) & ((RegularDrinksCoffee(x) & -Drug(x)) | (-RegularDrinksCoffee(x) & Drug(x)))))", "all x y.((Person(x) & Rina(y)) -> (RegularDrinksCoffee(x,y) | UnknowinglyDrug(y,x)))"]}
{"id": "folio_train_8", "nl": "If Rina is either a person who jokes about being addicted to caffeine and a person who is unaware that caffeine is a drug, or neither a person who jokes about being addicted to caffeine nor a person who is unaware that caffeine is a drug, then Rina jokes about being addicted to caffeine and regularly drinks coffee.", "fol": "(((JokesAboutAddiction(Rina) & UnawareOfCaffeineDrug(Rina) & (JokesAboutAddiction(Rina) | UnawareOfCaffeineDrug(Rina))) | (-(JokesAboutAddiction(Rina) & UnawareOfCaffeineDrug(Rina)) & -(JokesAboutAddiction(Rina) | UnawareOfCaffeineDrug(Rina)))) -> (JokesAboutAddiction(Rina) & RegularlyDrinkCoffee(Rina)))", "prediction": ["all x.((Person(x) & JokesAboutCaffeine(x) & -(Person(x) & JokesAboutCaffeine(x) & -(Person(x) & JokesAboutCaffeine(x) & -Person(x) & -(Person(x) & JokesAboutCaffeine(x) & -Person(x) & -PaceCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCa", "all x.((Person(x) & JokesAboutAddictionToCaffeine(x) & -(Person(x) & JokesAboutAddictionToCaffeine(x) & -Person(x) & -(Person(x) & JokesAboutAddictionToCaffeine(x) & -Person(x) & -(Person(x) & -PaceAdvantageCaffeine(x))))", "all x.((Person(x) & JokesAboutCoffee(x) & -(Person(x) & JokesAboutCoffee(x) & -(Person(x) & JokesAboutCoffee(x) & -Person(x)) & -(Person(x) & JokesAboutCoffee(x) & -(Person(x) & JokesAbestCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffeeCoffee", "(all x.((Person(x) & AddictsToCaffeine(x)) | (-AddictsToCaffeine(x) & UnconsciousOfCaffeine(x)))) -> AddictsToCaffeineAndDrinksCoffee(x))", "all x.((Person(x) & JokesAboutCaffeine(x) & UnconsciousCaffeineDrug(x)) | (-Person(x) & JokesAboutCaffeine(x) & UnconsciousCaffeineDrug(x)))) -> (JokesAboutCaffeine(x) & RegularlyDrinksCoffee(x)))", "all x y.((Person(x) & Rina(y) & AddictsToCaffeine(x,y) & UnknowinglyDrug(x,y)) | (-AddictsToCaffeine(y) & UnknowinglyDrug(y))))", "((Person(Rina) & AddictsToCaffeine(Rina) & -AddictsToCaffeine(Rina) & -UnconsciousOfCaffeineDrug(Rina)) | (-AddictsToCaffeine(Rina) & UnconsciousOfCaffeineDrug(Rina))))", "all x y.((Person(x) & Rina(y) & AddictsToCaffeine(x,y)) | (-AddictsToCaffeine(y) & AddictsToCaffeine(y)) | (-AddictsToCaffeine(y) & AddictsToCaffeine(y) & AddictsToCaffeine(y))))", "all x.((Person(x) & JokesAboutAddictionToCaffeine(x) & UnknowinglyDrug(x) & -(Person(x) & JokesAboutAddictionToCaffeine(x) & UnknowinglyDrugged(x))) -> (JokesAboutAddictionToCaffeine(x) & RegularlyDrinksCoffee(x)))", "all x.((Rina(x) & (JokesAboutAddictionToCaffeine(x) | UnknowinglyDrug(x))) | (-JokesAboutAddictionToCaffeine(x) & UnknowinglyDrug(x))))", "all x.((Person(x) & AddictsToCaffeine(x) & UnknowinglyDrug(x)) | (-AddictsToCaffeine(x) & UnknowinglyDrug(x))))", "(all x.((Person(x) & AddictsToCaffeine(x)) | (-AddictsToCaffeine(x) & UnawareOfCaffeine(x)))) -> AddictsToCaffeineAndDrinksCoffee(x))", "all x.((Person(x) & AddictsToCaffeine(x) & UnknowinglyDrug(x) & -(AddictsToCaffeine(x) & UnknowinglyDrug(x))) -> (JokesAboutCaffeine(x) & RegularlyDrinksCoffee(x)))", "all x y.((Person(x) & Rina(y)) -> ((JokesAboutAddictionToCaffeine(x) & UnknowinglyDrug(x)) | (-JokesAboutAddictionToCaffeine(y) & UnknowinglyDrug(y))))", "(all x.((Person(x) & AddictsToCaffeine(x)) | (-AddictsToCaffeine(x) & AddictsToCaffeine(x) & AddictsToCaffeine(x)))) -> AddictsToCaffeineAndDrinksCoffee(x))", "all x.(RinaJokesAboutAddictionToCaffeineAndUnderstandsDrug(x) | (-JokesAboutAddictionToCaffeineAndUnderstandsDrug(x))))"]}
{"id": "folio_train_9", "nl": "Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music.", "fol": "(IsCzech(Miroslav) & IsChoralConductor(Miroslav) & SpecializesIn(Miroslav,Renaissance) & SpecializesIn(Miroslav,Baroque))", "prediction": ["all x.((CzechChoralConductor(x) & SpecializedInRenaissanceAndBaroqueMusic(x)) -> MiroslavVenhoda(x))", "Miroslav Venhoda (CzechChoralConductor) & SpecializedInRenaissanceAndBaroqueMusic(Venhoda,Czech))", "(CzechChoralConductor(MiroslavVenhoda) & SpecializedInRenaissanceAndBaroqueMusic(MiroslavVenhoda))", "all x y.((CzechChoralConductor(x) & Venhoda(y)) -> (SpecializedInRevivalAndBaroqueMusic(x,y) & SpecializedInRevivalAndBaroqueMusic(x,y)))", "Miroslav Venhoda (CzechChoralConductor) & SpecializedInRevivalAndBaroqueMusic(Venoda,Renaissance) & SpecializedInBaroqueMusic(Venoda,Baroque))", "(CzechChoralConductor(Venhoda,Renaissance) & Baroque(Venhoda,Baroque))", "(CzechChoralConductor(MiroslavVenhoda) & SpecializedInRevivalAndBaroqueMusic(MiroslavVenhoda))", "all x.((CzechChoralConductor(x) & RenaissanceMusic(x) & BaroqueMusic(x)) -> MiroslavVenhoda(x))", "all x.((CzechChoralConductor(x) & SpecializedInRenaissanceAndBaroqueMusic(x)) -> MiroslavVenhoda(x))", "(CzechCchoralConductor(Miroslav Venhoda) & SpecializedInRenaissanceAndBaroqueMusic(MiroslavVenhoda))", "Miroslav Venhoda (CzechChoralConductor) & SpecializedInRenaissanceAndBaroqueMusic(Venhoda)", "(CzechChoralConductor(Venhoda,Renaissance) & Baroque(Venhoda,Baroque))", "Miroslav Venhoda, czechchoralConductor, was specialized in Renaissance and Baroque Music Performances.", "Miroslav Venhoda (CzechCchoralConductor) & SpecializedInRestorationAndBaroqueMusic(Venhoda,Czech))", "all x.((CzechChoralConductor(x) & SpecializedInRevivalAndBaroqueMusic(x)) -> MiroslavVenhoda(x))", "Miroslav Venhoda (CzechChoralConductor) & SpecializedInRenaissanceAndBaroqueMusic(Czech))"]}
{"id": "folio_train_10", "nl": "Any choral conductor is a musician.", "fol": "all x.(IsChoralConductor(x) -> IsMusician(x))", "prediction": ["all x.(ChoralConductor(x) -> Musician(x))", "all x.(ChoralConductor(x) -> Musician(x))", "all x y.((ChoralConductor(x) & ChoralConductor(y)) -> Musician(x))", "all x.(CoralConductor(x) -> Musician(x))", "all x.((ChoralConductor(x) & ConductsChoral(x)) -> Musician(x))", "all x.(ChoralConductor(x) -> Musician(x))", "exists x y.(ChoralConductor(x) & ChoralConductor(y) & Musician(x))", "all x y.((ChoralConductor(x) & ChoralConductor(y)) -> Musician(x))", "all x.(CoralConductor(x) -> Musician(x))", "all x.(ChoralConductor(x) -> Musician(x))", "all x.((CorralConductor(x) & ChoralConductor(x)) -> Musician(x))", "all x.(ChoralConductor(x) -> Musician(x))", "all x.(CoralConductor(x) -> Musician(x))", "all x.(ChoralConductor(x) -> Musician(x))", "all x.(choralConductor(x) -> Musician(x))", "all x.(CorralConductor(x) -> Musician(x))"]}
{"id": "folio_train_11", "nl": "Some musicians love music.", "fol": "exists x.(IsMusician(x) -> Loves(x,Music))", "prediction": ["exists x.(Musician(x) & LovesMusic(x))", "exists x.(Musician(x) & LovesMusic(x))", "exists x.(Musician(x) & LovesMusic(x))", "exists x y.(Musician(x) & Music(y) & Loves(x,y))", "exists x.(Musician(x) & LovesMusic(x))", "exists x.(Musician(x) & LovesMusic(x))", "exists x y.(Musician(x) & Music(y) & Loves(x,y))", "exists x y.(Musician(x) & Musician(y) & Loves(x,y))", "exists x.(Musician(x) & LovesMusic(x))", "exists x.(Musician(x) & LovesMusic(x))", "exists x.(Musician(x) & Loves(x,music))", "exists x.(Musician(x) & LovesMusic(x))", "exists x.(Musician(x) & Love(x,music))", "exists x.(Musician(x) & LoveMusic(x))", "exists x.(Musician(x) & LovesMusic(x))", "exists x.(Musician(x) & Love(x,Music))"]}
{"id": "folio_train_12", "nl": "Miroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant.", "fol": "(IsBook(MethodOfStudyingGregorianChant) & IsAuthorOf(Miroslav,MethodOfStudyingGregorianChant) & PublishedInYear(MethodOfStudyingGregorianChant,Year1946))", "prediction": ["Miroslav Venhoda published a book in 1946 called MethodOfStudyingGregorianChant(Venhoda,SufficientScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificS", "Miroslav Venhoda published a book in 1946 called MethodOfStudyingGregorianChant(Meanings(Meanings(Meanings(Meanings(Meanings(Meanings(Meanings(Meanings(Meanings(Meanings(Meanings(Meanings(Meanings(Meanings(Meanings(Meanings(Meanings(Meanings(Meanings(Meanings(Meanings(Meanings))))", "Miroslav Venhoda (MeasuresGregorianChant(Venhoda,SufficientScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientific", "all x.((MiroslavVenhoda(x) & PublishedBook(x,Sugar,Second)) -> MethodOfStudyingGregorianChant(x))", "(PublishedBy(MiroslavVenhoda,SufficientGregorianChant(Venhoda,SufficientGregorianChant))", "all x y.((MiroslavVenhoda(x) & Book(y) & PublishedInSufficientTime(x,y)) -> GregorianChant(x,y))", "(published by Miroslav Venhoda in 1946) & titled MethodOfStudyingGregorianChant(Meaning(Meaning))", "Miroslav Venhoda (Venhoda,Secretary(Venhoda,Sufficient(Venhoda,Sufficient(Venhoda,Sufficient(Venhoda,Sufficient(Venhoda,Sufficient(Venhoda,Sufficient(Venhoda,Sufficient(Venhoda,Sufficient(Venhoe)))", "all x.((MiroslavVenhoda(x) & PublishedBook(x,Sugar,Sugar)) -> MethodOfStudyingGregorianChant(x))", "all x y.((Miroslav Venhoda(x) & Book(y)) -> PublishedIn(x,y))", "Miroslav Venhoda (Venhoda,Sugarman(Second)) & PublishedBook(Venhoda,Sugarman(Sugarman))", "Miroslav Venhoda published a book in 1946 titled MethodOfStudyingGregorianChant(x))", "(Miroslav Venhoda,SufficientStudy(MeaningGregorianChant))", "Miroslav Venhoda published a book in 1946 called MethodOfStudyingGregorianChant(x))", "Miroslav Venhoda published a book in 1946 called Method of StudyingGregorianChant(Venhoda,Sufficiently,Secondary))", "Miroslav Venhoda published in 1946 a book called MethodOfStudyingGregorianChant(x))"]}
{"id": "folio_train_13", "nl": "Miroslav Venhoda loved music.", "fol": "Loves(Miroslav,Music)", "prediction": ["Miroslav Venhoda lovedMusic(Miroslav Venhoda)", "all x.((Miroslav Venhoda(x) & LovedMusic(x)) -> LovedMusic(x))", "(LovedMusic(MiroslavVenhoda) & LovedMusic(MiroslavVenhoda))", "Miroslav Venhoda lovedMusic(Venhoda,Miroslav))", "all x.((MiroslavVenhoda(x) & LovedMusic(x)) -> LovedMusic(x))", "all x.(Venhoda(x) -> LovedMusic(x))", "(LivingMusic(Miroslav Venhoda) -> LovedMusic(Miroslav Venhoda))", "Miroslav Venhoda lovedMusic(Miroslav Venhoda)", "all x.(MiroslavVenhoda(x) -> LovedMusic(x))", "MiroslavVenhoda lovedMusic(Venhoda,Music)", "Miroslav Venhoda lovedMusic(Venhoda)", "Miroslav Venhoda lovedMusic(MiroslavVenhoda)", "Miroslav Venhoda liebteMusic(Miroslav Venhoda)", "Miroslav Venhoda LovedMusic(Miroslav Venhoda)", "Miroslav Venhoda lovedMusic(Venhoda,Music)", "Miroslav Venhoda lovedMusic."]}
{"id": "folio_train_14", "nl": "A Czech person wrote a book in 1946.", "fol": "exists x.(IsCzech(x) & exists y.(IsBook(y) & IsAuthorOf(x,y) & PublishedInYear(y,Year1946)))", "prediction": ["all x y.((CzechPerson(x) & Book(y)) -> WrittenInSuffrage(x,y))", "all x.(CzechPerson(x) -> WrittenBookInSufi46(x))", "(CzechPerson(Czech) & WrittenBook(Czech) & InSuffrage(Czech))", "all x y z.((CzechPerson(x) & Book(y) & Book(z)) -> WrittenInSufia(x,y,z))", "all x y.((CzechPerson(x) & Book(y)) -> WrittenInSufvament(x,y))", "all x.(CzechPerson(x) -> WritesBook(x,Suf 1946))", "(CzechPerson(c) & wroteBookInSuffrage(c) & InSuffrage(c))", "(CzechPerson(Czech) & WritesBook(Czech) & InSuffrage(Czech))", "all x y z.((CzechPerson(x) & Book(y) & 1946(z)) -> WritesIn(x,y,z))", "all x y.((CzechPerson(x) & Book(y)) -> WrittenInSugar(x,y))", "all x.(CzechPerson(x) -> WrittenBookInSummer(x))", "all x y.((CzechPerson(x) & Book(y) & WrittenInSuffrage(x,y)) -> WrittenInSuffrage(x,y))", "all x.(CzechPerson(x) -> WritesBookInSufvament(x,46))", "exists x.(CzechPerson(x) & WrittenBook(x,Suf 1946))", "exists x.(CzechPerson(x) & wroteBook(x,Sugar,Sugar))", "exists x.(CzechPerson(x) & WritesBook(x,Sugar,Sugar,Sugar))"]}
{"id": "folio_train_15", "nl": "No choral conductor specialized in the performance of Renaissance.", "fol": "-exists x.(IsChoralConductor(x) & SpecializesIn(x,Renaissance))", "prediction": ["-exists x.(ChoralConductor(x) & SpecializedInRenaissancePerformance(x))", "-exists x.(CoralConductor(x) & SpecializedInRenaissancePerformance(x))", "Currently, there is no choralConductorSpecializedInRenaissancePerformance(choralConductor)", "Keine ChoralConductorSpecializedInRenaissancePerformance(choral)", "-exists x.(ChoralConductor(x) & SpecializedInRevival(x))", "(-(ChoralConductor(choral) & RenaissancePerformance(choral)))", "Currently, there is no choral Conductor SpecializedInRenaissancePerformance(choralConductor)", "-exists x.(ChoralConductor(x) & RenaissancePerformance(x))", "Keine ChoralConductorSpecializedInRenaissancePerformance(choral)", "-exists x.(CoralConductor(x) & SpecializedInRenaissance(x))", "Currently, there is no choralConductorSpecializedInRevival(choral)", "(exists x.(ChoralConductor(x) & RenaissancePerformance(x)))", "KeinchoralConductorSpecialistInRevival(c)", "-exists x.(CoralConductor(x) & RenaissancePerformance(x))", "-exists x.(ChoralConductor(x) & SpecializedInRenaissance(x))", "(-exists x.(ChoralConductor(x) & RenaissancePerformance(x)))"]}
{"id": "folio_train_16", "nl": "All eels are fish. ", "fol": "all x.(IsEel(x) -> IsFish(x))", "prediction": ["all x.(Elef(x) -> Fish(x))", "all x.(Elef(x) -> Fish(x))", "(Fish(el) & Fish(el))", "(all x.(Elef(x) -> Fish(x))", "all x.(Eel(x) -> Fish(x))", "all x y.((Elef(x) & Fish(y)) -> Fish(x))", "all x.(Elef(x) -> Fish(x))", "all x.(Eel(x) -> Fish(x))", "all x.(Elef(x) -> Fish(x))", "all x.(Eel(x) -> Fish(x))", "all x.(Elef(x) -> Fish(x))", "all x.(Eel(x) -> Fish(x))", "all x.(Eel(x) -> Fish(x))", "all x.(Elef(x) -> Fish(x))", "all x.(Elm(x) -> Fish(x))", "all x.(Elef(x) -> Fish(x))"]}
{"id": "folio_train_17", "nl": "No fish are plants. ", "fol": "all x.(IsFish(x) -> -IsPlant(x))", "prediction": ["-exists x.(Fish(x) & Plant(x))", "all x.(Fish(x) -> -Plant(x))", "-exists x.(Fish(x) & Plant(x))", "-exists x.(Fish(x) & Plant(x))", "(exists x.(Fish(x) & Plant(x))", "all x.(Fish(x) -> -Plant(x))", "-exists x.(Fish(x) & Plant(x))", "all x.(Fish(x) -> -Plant(x))", "all x.(Fish(x) -> Plant(x))", "-exists x.(Fish(x) & Plant(x))", "all x.(Fish(x) -> -Plant(x))", "-exists x.(Fish(x) & Plant(x))", "all x.(Fish(x) -> -Plant(x))", "-exists x.(Fish(x) & Plant(y) & -Fish(x))", "-exists x.(Fish(x) & Plant(x))", "-exists x.(Fish(x) & Plant(x))"]}
{"id": "folio_train_18", "nl": "A thing is either a plant or animal.", "fol": "all x.(IsPlant(x) | IsAnimal(x))", "prediction": ["all x.(Thing(x) -> (Plant(x) | Animal(x)))", "all x.(Thing(x) -> (Plant(x) | Animal(x)))", "all x.(Thing(x) -> (Plant(x) | Animal(x)))", "all x.(Tad(x) -> (Plant(x) | Animal(x)))", "all x y.((Thing(x) & Plant(y)) | Animal(y)) -> Plant(x))", "all x.(Thing(x) -> (Plant(x) | Animal(x)))", "all x y.(Thing(x) -> (Plant(x) | Animal(x)))", "all x.(Tea(x) -> (Plant(x) | Animal(x)))", "exists x.(Thing(x) & Plant(x) & Animal(x))", "all x.(Ding(x) -> (Plant(x) | Animal(x)))", "exists x.(Thing(x) & (Plant(x) | Animal(x)))", "exists x.(Thing(x) & Plant(x) & Animal(x))", "exists x.(Thing(x) & Plant(x) | Animal(x))", "all x.(Ding(x) -> (Plant(x) | Animal(x)))", "exists x.(Ding(x) & (Plant(x) | Animal(x)))", "exists x.(Dough(x) & (Plant(x) | Animal(x)))"]}
{"id": "folio_train_19", "nl": "Nothing that breathes is paper. ", "fol": "all x.(CanBreathe(x) -> -IsPaper(x))", "prediction": ["all x.((Breathes(x) & -Breathes(x)) -> Paper(x))", "-exists x.(Breathes(x) & Paper(x))", "-all x.(Breathes(x) -> Paper(x))", "all x.((Breathes(x) & -Breathes(x)) -> Paper(x))", "all x.(Breathes(x) -> Paper(x))", "-(Breathes(x) & -Breathes(x)) -> Paper(x))", "-exists x.(Breathes(x) & Paper(x))", "-all x.(Breathes(x) -> Paper(x))", "(all x.((Breathes(x) & -Breathes(x)) -> Paper(x))", "all x.((Breathes(x) & -Breathes(x)) -> Paper(x))", "all x.(Breathes(x) -> Paper(x))", "-exists x.(Breathes(x) & -Paper(x))", "all x.((Breathes(x) & -Breathes(x)) -> Paper(x))", "all x.(Breathes(x) -> Paper(x))", "all x.((Breathes(x) & -Breathes(x)) -> Paper(x))", "all x.((Breathes(x) & -Breathes(x)) -> Paper(x))"]}
{"id": "folio_train_20", "nl": "All animals breathe.", "fol": "all x.(IsAnimal(x) -> CanBreathe(x))", "prediction": ["all x.(Animal(x) -> Breathes(x))", "all x.(Animal(x) -> Breathes(x))", "(all x.(Animal(x) -> Breathes(x)))", "all x y.((Animal(x) & Breathes(x)) -> Breathes(x))", "all x.(Animal(x) -> Breathes(x))", "(all x.(Animal(x) -> Breathes(x)))", "all x.(Animal(x) -> Breathe(x))", "all x.(Animal(x) -> Breathes(x))", "all x y.(Breathes(x) -> Animal(y))", "all x.(Animal(x) -> Breathe(x))", "all x.(Animal(x) -> Breathes(x))", "all x.(Animal(x) -> Breathe(x))", "all x.(Animal(x) -> Breathes(x))", "all x.(Animal(x) -> Breathe(x))", "all x.(Animal(x) -> Breathes(x))", "exists x.(Animal(x) & Breathe(x))"]}
{"id": "folio_train_21", "nl": "If a sea eel is either an eel or a plant, then a sea eel is an eel or an animal.", "fol": "((((IsEel(SeaEel) & -IsPlant(SeaEel)) | (-IsEel(SeaEel) & IsPlant(SeaEel))) -> IsEel(SeaEel)) | IsAnimal(SeaEel))", "prediction": ["all x.((SeaEel(x) & (Eel(x) | Plant(x))) -> (Eel(x) | Animal(x)))", "all x.((SeaEel(x) & (Eel(x) | Plant(x))) -> (Eel(x) | Animal(x)))", "all x.(SeaEel(x) -> ((IsEel(x) | IsPlant(x)) & (IsEel(x) | IsAnimal(x))))", "all x y.((SeaEel(x) & (Eel(y) | Plant(y))) -> (Eel(x) | Animal(x)))", "(all x.((SeaEel(x) & (Eel(x) | Plant(x))) -> (Eel(x) | Animal(x))))", "all x.((SeaEel(x) & (Eel(x) | Plant(x))) -> (Eel(x) | Animal(x)))", "all x y.((SeaEel(x) & (Eel(y) | Plant(y))) -> (Eel(x) | Animal(x)))", "(all x.((SeaEel(x) & (Eel(x) | Plant(x))) -> (Eel(x) | Animal(x))))", "all x.((SeaEel(x) & (Eel(x) | Plant(x))) -> (Eel(x) | Animal(x)))", "all x.(SeaEel(x) -> ((Eel(x) | Plant(x)) & (Eel(x) | Animal(x))))", "all x.(SeaEel(x) -> ((IsEel(x) | IsPlant(x))) | IsAnimal(x)))", "all x.((SeaEel(x) & (Eel(x) | Plant(x))) -> (Eel(x) | Animal(x)))", "all x.((SeaEel(x) & (Eel(x) | Plant(x))) -> (Eel(x) | Animal(x)))", "all x.((SeaEel(x) & (Eel(x) | Plant(x))) -> (Eel(x) | Animal(x)))", "all x.((SeaEel(x) & (Eel(x) | Plant(x))) -> (Eel(x) | Animal(x)))", "all x.((SeaEel(x) & (Eel(x) | Plant(x))) -> (Eel(x) | Animal(x)))"]}
{"id": "folio_train_22", "nl": "Sea eel is an eel.", "fol": "IsEel(SeaEel)", "prediction": ["all x.(SeaEel(x) -> Eel(x))", "all x.(SeaEel(x) -> Eel(x))", "all x y.((SeaEel(x) & Eel(y)) -> Is(x,y))", "all x.(SeaEel(x) -> Eel(x))", "(Eel(sea) & Eel(s))", "all x.(Eel(x) -> SeaEel(x))", "all x y.((SeaEel(x) & Eel(y)) -> Is(x,y))", "All x.(SeeEel(x) -> Eel(x))", "all x.(SeaEel(x) -> Eel(x))", "(Eel(sea) & Eel(s))", "(Eel(sea) & SeaEel(s))", "all x.(SeaEel(x) -> Eel(x))", "All x.(Eel(x) -> SeaEel(x))", "all x.(SeaEel(x) -> Eel(x))", "all x.(SeaEel(x) -> Eel(x))", "All x.(SeaEel(x) -> Eel(x))"]}
{"id": "folio_train_23", "nl": "Sea eel is a paper.", "fol": "IsPaper(SeaEel)", "prediction": ["all x.(SeaEel(x) -> Paper(x))", "(Paper(SeaEel) & Paper(SeaEel))", "all x.(SeaEel(x) -> Paper(x))", "all x y.((SeaEel(x) & Paper(y)) -> Is(x,y))", "(Paper(SeaEel) & -Paper(SeaEel))", "all x.(SeaEel(x) -> Paper(x))", "(Paper(seael) & Paper(seael))", "all x y.((SeaEel(x) & Paper(y)) -> Contains(x,y))", "all x.(SeeEel(x) -> Paper(x))", "(Paper(SeaEel) & Paper(SeaEel))", "all x.(SeaEel(x) -> Paper(x))", "all x.(SeaEel(x) -> Paper(x))", "all x.(SeaEel(x) -> Paper(x))", "all x.(SeaEel(x) -> Paper(x))", "all x.(SeaEel(x) -> Paper(x))", "All x.(SeaEel(x) -> Paper(x))"]}
{"id": "folio_train_24", "nl": "Sea eel breathes or is a paper.", "fol": "(CanBreathe(SeaEel) | IsPaper(SeaEel))", "prediction": ["all x.(SeaEel(x) -> (Breathes(x) | Paper(x)))", "(Breathes(SeaEel) | Paper(SeaEel)))", "all x.(SeaEel(x) -> (Breathes(x) | Paper(x)))", "all x y.((SeaEel(x) & (Breathes(x) | Paper(x))) -> Breathes(x))", "all x y.((SeaEel(x) & Paper(y)) -> BreathesOrIs(x,y))", "all x.(SeaEel(x) -> (Breathes(x) | Paper(x)))", "all x.(SeeEel(x) -> (Breathes(x) | Paper(x)))", "(Breathes(SeaEel) | Paper(SeaEel))", "all x y.((SeaEel(x) & (Breathes(x,y) | Paper(x,y))) -> Breathes(x,y))", "exists x.(Elef(x) & Breathes(x) | Paper(x))", "all x.(SeaEel(x) -> (Breathes(x) | Paper(x)))", "all x.(SeaEel(x) -> (Breathes(x) | IsPaper(x)))", "all x.(SeaEel(x) -> (Breathes(x) | Paper(x)))", "all x.(SeaEel(x) -> (Breathes(x) | Paper(x)))", "all x.(SeaEel(x) -> (Breathes(x) | IsPaper(x)))", "exists x.(SeaEel(x) & Breathes(x) | Paper(x))"]}
{"id": "folio_train_25", "nl": "The Blake McFall Company Building is a commercial warehouse listed on the National Register of Historic Places.", "fol": "all x.(BlakeMcFallCompanyBuilding(x) -> IsBuilding(x))", "prediction": ["all x.((BlakeMcFallCompanyBuilding(x) & CommercialWarehouse(x) & ListedOnNationalRegisterOfHistoricalPlaces(x)) -> BuiltByBlakeMcFallCompany(x))", "(ListedOnNationalRegisterOfHistoricalPlaces(BlakeMcFallCompanyBuilding))", "all x.((Building(x) & BlakeMcFallCompany(x)) -> CommercialWarehouseListeningOnNationalRegisterOfHistoricalPlaces(x))", "all x y.((BlakeMcFallCompanyBuilding(x) & CommercialWarehouse(y)) -> ListedOnNationalRegisterOfHistoricalPlaces(x,y))", "all x.(BlakeMcFallCompanyBuilding(x) -> CommercialWarehouseListeningOnNationalRegisterOfHistoricalPlaces(x))", "all x.(Building(x) -> (BlakeMcFallCompanyBuilding(x) & CommercialWarehouse(x) & ListedOnNationalRegisterOfHistoricalPlaces(x)))", "all x.(BlakeMcFallCompanyBuilding(x) -> (CommercialWarehouse(x) & ListedOnNationalRegisterOfHistoricalPlaces(x)))", "all x y.((Building(x) & BlakeMcFallCompany(y) & CommercialWastehouse(x) & ListedOnNationalRegisterOfHistoricalPlaces(x,y)) -> BuiltBy(x,y))", "all x.((BlakeMcFallCompanyBuilding(x) & CommercialWarehouse(x) & ListedOnNationalRegisterOfHistoricalPlaces(x)) -> Building(x))", "(ListedOnNationalRegistryOfHistoricalPlaces(BlakeMcFallCompanyBuilding))", "all x y.((BlakeMcFallCompanyBuilding(x) & CommercialWasteroom(y)) -> ListedOnNationalRegistryOfHistoricalPlaces(x,y))", "all x y.((BlakeMcFallCompanyBuilding(x) & CommercialWheelhouse(y)) -> ListedOnNationalRegisterOfHistoricalPlaces(x,y))", "(ListedOnNationalRegistryOfHistoricalPlaces(BlakeMcFallCompanyBuilding) & CommercialWheels(BlakeMcFallCompanyBuilding))", "(ListedOnNationalRegisterOfHistoricalPlaces(BlakeMcFallCompanyBuilding))", "All x.(BlakeMcFallCompanyBuilding(x) -> (CommercialWarehouse(x) & ListedOnNationalRegistryOfHistoricalPlaces(x)))", "All x.(BlakeMcFallCompanyBuilding(x) -> CommercialWarehouse(x))"]}
{"id": "folio_train_26", "nl": "The Blake McFall Company Building was added to the National Register of Historic Places in 1990.", "fol": "all x.(BlakeMcFallCompanyBuilding(x) -> ListedAsHistoric(x,Year1990))", "prediction": ["all x.((Building(x) & BlakeMcFallCompany(x)) -> AddedToNationalRegisterOfHistoricalPlaces(x,90))", "(AddedToNationalRegisterOfHistoricalPlaces(BlakeMcFallCompanyBuilding) & In(BlakeMcFallCompany(BlakeMcFallCompany) & In(BlakeMcFallCompany(BlakeMcFallCompany))", "The BlakeMcFallCompanyBuilding(BlakeMcFall) was added to NationalRegistryOfHistoricalPlaces(BlakeMcFall) in 1990.", "all x y.((Building(x) & BlakeMcFallCompany(y)) -> AddedToNationalRegisterOfHistoricalPlaces(x,y))", "All x.(BlakeMcFallCompanyBuilding(x) -> AddedToNationalRegisterOfHistoricalPlaces(x,90))", "(NationalRegisterOfHistoricalPlaces(BlakeMcFallCompanyBuilding) & Addition(BlakeMcFallCompanyBuilding,90))", "the BlakeMcFallCompanyBuilding(BlakeMcFallCompany) & AddedToNationalRegisterOfHistoricalPlaces(BlakeMcFallCompany) & In(BlakeMcFallCompany(BlakeMcFallCompany) & In(BlakeMcFallCompany(BlakeMcFallCompany) & In(BlakeMcFallCompany))", "all x y.((BlakeMcFallCompanyBuilding(x) & NationalRegisterOfHistoricalPlaces(y)) -> AddedTo(x,y))", "all x.((Building(x) & BlakeMcFallCompany(x)) -> AdditionToNationalRegisterOfHistoricalPlaces(x,90))", "(AddedToNationalRegisterOfHistoricalPlaces(BlakeMcFallCompanyBuilding,90))", "(AddedToNationalRegistryOfHistoricalPlaces(Building,1990) & BlakeMcFallCompanyBuilding(Building,1990))", "The BlakeMcFallCompanyBuilding(BlakeMcFall) was added to NationalRegisterOfHistoricalPlaces(BlakeMcFall) in 1990.", "All x.(BlakeMcFallCompanyBuilding(x) -> AddedToNationalRegisterOfHistoricalPlaces(x))", "the BlakeMcFallCompanyBuilding(b) & AddedToNationalRegisterOfHistoricalPlaces(c) & 1990.", "All x.((BlakeMcFallCompanyBuilding(x) & AdditionToNationalRegistryOfHistoricalPlaces(x,90)) -> BuiltIn(x,90))", "The BlakeMcFallCompanyBuilding(BlakeMcFall) was added to the NationalRegistryOfHistoricalPlaces(BlakeMcFall) in 1990."]}
{"id": "folio_train_27", "nl": "The Emmet Building is a five-story building in Portland, Oregon.", "fol": "all x.((EmmetBuilding(x) -> IsBuilding(x)) & IsFiveStory(x) & LocatedIn(x,Portland))", "prediction": ["all x.(EmmetBuilding(x) -> (Building(x) & FiveStory(x) & InPortland(x) & InOregon(x)))", "(Building(Emmet) & FiveStoryBuilding(Emmet) & InPortland(Emmet))", "The EmmetBuilding is a fivestoryBuildingInPortland(EmmetBuilding)", "The EmmetBuilding(EmmetBuilding) & FiveStoryBuilding(EmmetBuilding) & InPortland(EmmetBuilding))", "all x y.((EmmetBuilding(x) & Portland(y)) -> FiveStoryBuilding(x,y))", "The EmmetBuilding (Building(e) & FiveStory(e) & InPortland(e) & InOregon(e))", "(FiveStoryBuilding(EmmetBuilding) & InPortland(EmmetBuilding))", "all x.(EmmetBuilding(x) -> (Building(x) & FiveStory(x) & InPortland(x) & InOregon(x)))", "All x.(EmmetBuilding(x) -> (FiveStoryBuilding(x) & InPortland(x) & InOregon(x)))", "(Building(Emmet) & FiveStoryBuilding(Emmet) & InPlandord(Emmet))", "all x y.((EmmetBuilding(x) & Portland(y)) -> FiveStoryBuilding(x,y))", "(Building(emmet,e) & FiveStoryBuilding(e) & InPortland(e))", "all x.(EmmetBuilding(x) -> (Building(x) & FiveStory(x) & InPoorland(x)))", "All x.(EmmetBuilding(x) -> (Building(x) & FiveStory(x) & InPortland(x) & InOregon(x)))", "All x.(EmmetBuilding(x) -> (FiveStoryBuilding(x) & InPlumbing(x) & InOregon(x)))", "all x y.((EmmetBuilding(x) & Portland(y)) -> FiveStoryBuilding(x,y))"]}
{"id": "folio_train_28", "nl": "The Emmet Building was built in 1915.", "fol": "all x.(EmmetBuilding(x) -> BuiltInYear(x,Year1915))", "prediction": ["(BurnedIn1915(EmmetBuilding) & BuiltIn1915(EmmetBuilding))", "The EmmetBuilding was built in 1915.", "All x.(EmmetBuilding(x) -> BuiltIn1915(x))", "(Building(Emmet) & BuiltIn1915(Emmet))", "BuiltIn1915, the EmmetBuilding was builtIn1915.", "-builtIn1915(EmmetBuilding)", "(builtIn1915) & EmmetBuilding(Emmet))", "The EmmetBuilding was built in 1915.", "Das EmmetBuilding(e) & BuiltIn1915(e))", "The Emmet Building was built in 1915.", "Der EmmetBoard(e) & BuiltIn1915(e))", "Das EmmetBuilding (EmmetBuilding) & BuiltIn1915(EmmetBuilding))", "The EmmetBuilding was built in 1915.", "the EmmetBuilding(EmmetBuilding) was builtin1915.", "Das EmmetBuilding(e) & BuiltIn1915(e))", "The Emmet Building was built in 1915."]}
{"id": "folio_train_29", "nl": "The Emmet Building is another name for the Blake McFall Company Building.", "fol": "all x.(EmmetBuilding(x) <-> BlakeMcFallCompanyBuilding(x))", "prediction": ["(BlakeMcFallCompanyBuilding(EmmetBuilding) & BlakeMcFallBuilding(EmmetBuilding))", "all x.(EmmetBuilding(x) -> BlakeMcFallCompanyBuilding(x))", "(BlakeMcFallBuilding(EmmetBuilding) & BlakeMcFallBuilding(EmmetBuilding))", "The EmmetBuilding is another name for the BlakeMcFallCompanyBuilding(e) & BuiltBy(e) & BuiltBy(e))", "(AnotherNameForBlakeMcFallCompanyBuilding(EmmetBuilding))", "The EmmetBuilding (Building) & BlakeMcFallCompanyBuilding(BlakeMcFall))", "the EmmetBuilding(EmmetBuilding) & BlakeMcFallCompanyBuilding(EmmetBuilding))", "The EmmetBuilding(e) & BlakeMcFallCompanyBuilding(e))", "All x.(EmmetBuilding(x) -> BlakeMcFallCompanyBuilding(x))", "all x y.((EmmetBuilding(x) & BlakeMcFallCompanyBuilding(y)) -> NameFor(x,y))", "(EmmetBuilding(e) & BlakeMcFallCompanyBuilding(e))", "The EmmetBuilding is another name for BlakeMcFallCompanyBuilding(e) & BuiltBy(e,b,c))", "(BlakeMcFallCompanyBuilding(EmmetBuilding) & BlakeMcFallBuilding(EmmetBuilding))", "(BlakeMcFallBuilding(EmmetBuilding) & BlakeMcFallBuilding(EmmetBuilding))", "all x.(EmmetBuilding(x) -> BlakeMcFallCompanyBuilding(x))", "All x.(EmmetBuilding(x) -> BlakeMcFallBuilding(x))"]}
{"id": "folio_train_30", "nl": "John works at the Emmet Building.", "fol": "exists x.(EmmetBuilding(x) & WorksAt(John,x))", "prediction": ["(WorksAtEmmetBuilding(John))", "John works at EmmetBuilding.", "all x.(John(x) -> WorksAtEmmetBuilding(x))", "all x y.((John(x) & EmmetBuilding(y)) -> WorksAt(x,y))", "-WorksAtEmmetBuilding(John)", "John WorksAtEmmetBuilding(John,EmmetBuilding)", "John works at the EmmetBuilding.", "John works at EmmetBuilding.", "(WorksAtEmmetBuilding(John))", "(WorksAtEmmetBuilding(John) & EmmetBuilding(John))", "all x.(John(x) -> WorksAtEmmetBuilding(x))", "-WorksAtEmmetBuilding(John,Joe))", "John works at the EmmetBuilding.", "John works at EmmetBuilding.", "(WorksAtEmmetBuilding(John,Emmet))", "(WorksAtEmmetBuilding(John) & EmmetBuilding(John))"]}
{"id": "folio_train_31", "nl": "A five-story building is built in 1915.", "fol": "exists x.(IsFiveStory(x) & BuiltInYear(x,Year1915))", "prediction": ["all x.((Building(x) & BuiltIn1915(x)) -> FiveStory(x))", "all x y.((Building(x) & Building(y) & BuiltIn1915(x,y)) -> FiveStory(x))", "(Building(Building) & BuiltIn1915(Building))", "all x.((Building(x) & BuiltIn1915(x)) -> FiveStory(x))", "(Building(c) & BuiltIn1915(c))", "all x y.((Building(x) & Building(y) & BuiltIn1915(x,y)) -> FiveStory(x))", "all x.((Building(x) & BuiltIn1915(x)) -> FiveStory(x))", "All x.(FiveStoryBuilding(x) -> BuiltIn1915(x))", "all x y.((Building(x) & Building(y) & BuiltIn(x,y)) -> BuiltIn(x,y))", "all x.(Building(x) -> BuiltIn1915(x))", "all x.((Building(x) & FiveStory(x)) -> BuiltIn1915(x))", "all x.((Building(x) & BuiltIn1915(x)) -> FiveStoryBuilding(x))", "exists x.(Building(x) & BuiltIn(x,1915))", "exists x.(Building(x) & FiveStory(x) & BuiltIn1915(x))", "all x y.((Building(x) & Building(y) & BuiltIn1915(x,y)) -> FiveStoryBuilding(x))", "exists x.(Building(x) & BuiltIn(x,1915))"]}
{"id": "folio_train_32", "nl": "The Blake McFall Company Building is located in Portland, Oregon.", "fol": "all x.(BlakeMcFallCompanyBuilding(x) -> LocatedIn(x,Portland))", "prediction": ["The BlakeMcFallCompanyBuilding(BlakeMcFall) is located in Portland, Oregon.", "All x.(BlakeMcFallCompanyBuilding(x) -> LocatedInPortland(x))", "(Building(BlakeMcFall) & LocatedIn(BlakeMcFall) & Portland(BlakeMcFall))", "(Building(BlakeMcFall) & LocatedInPortland(BlakeMcFall))", "The BlakeMcFallCompanyBuilding(Board) LocatedInPortland(Board)", "all x y.((BlakeMcFallCompanyBuilding(x) & Portland(y)) -> LocatedIn(x,y))", "all x.(BlakeMcFallCompanyBuilding(x) -> (LocatedInPortland(x) | LocatedInOregon(x)))", "All x.(Building(x) -> BlakeMcFall(x))", "All x.(BlakeMcFallCompanyBuilding(x) -> LocatedIn(x,Portland,Oregon))", "The BlakeMcFallCompanyBuilding(BlakeMcFall) is located in Portland, Oregon.", "(Building(BlakeMcFall) & LocatedInPortland(BlakeMcFall))", "The BlakeMcFallCompanyBuilding(b) LocatedInPortland(c) & LocatedInOregon(d))", "The BlakeMcFallCompanyBuilding(Board,Palo Alto,Oregon)", "all x.(BlakeMcFallCompanyBuilding(x) -> (LocatedInPortland(x) | LocatedInOregon(x)))", "the BlakeMcFallCompanyBuilding(BlakeMcFallCompany) LocatedInPortland(Board,Oregon)", "(Building(BlakeMcFall) & LocatedInPortland(BlakeMcFall))"]}
{"id": "folio_train_33", "nl": "John started his current job in 1990.", "fol": "exists y.(Job(y) & Start(John,y,Year1990))", "prediction": ["John started his current job in 1990.", "(StartedJob(John,1990) & CurrentJob(John,1990))", "all x.(JohnStartedJob(x,90) -> CurrentJob(x))", "(StartedJob(John,90) & CurrentJob(John,90))", "John started his current job in 1990.", "-StartedJobIn90(John,90)", "(StartedIn90(John) & CurrentJob(John))", "John started his current JobIn90(John,90)", "John beganJob(John,90)", "-StartedJobIn(John,90)", "(StartedJob(John,1990) & CurrentJob(John,1990))", "Currently, John is employed by the City of Newark, New Jersey, in 1990.", "John started his current job in 1990.", "John began his current JobIn90(John,90)", "John started his current JobIn1990.", "John started his current job in 1990."]}
{"id": "folio_train_34", "nl": "William Dickinson was a British politician who sat in the House of Commons", "fol": "(IsBritishPolitician(Williamdickinson) & SitsInHouseOfCommons(Williamdickinson))", "prediction": ["(BritishPolitician(WilliamDickinson) & SitsInHouseOfCommons(WilliamDickinson))", "William Dickinson (BritishPolitician(WilliamDickinson) & SitsInHouseOfCommons(WilliamDickinson))", "all x y.((BritishPolitician(x) & WilliamDickinson(y)) -> SitsInHouseOfCommons(x,y))", "((BritishPolitician(WilliamDickinson) & SitsInHouseOfCommons(WilliamDickinson)) -> BritishPolitician(WilliamDickinson))", "all x.((BritishPolitician(x) & WilliamDickinson(x)) -> SitsInHouseOfCommons(x))", "William Dickinson, (BritishPolitician(WilliamDickinson) & SitsInHouseOfCommons(WilliamDickinson))", "William Dickinson (britishpolitician) & SitsInHouseOfCommons(b))", "William Dickinson (BritishPolitician(William Dickinson) & SitsInHouseOfCommons(William Dickinson))", "William Dickinson (b.1930) -> (BritishPolitician(b) & SitsInHouseOfCommons(c)))", "(BritishPolitician(WilliamDickinson) & SitsInHouseOfCommons(WilliamDickinson))", "William Dickinson (BritishPolitician) & SitsInHouseOfCommons(WilliamDickinson))", "all x y.((BritishPolitician(x) & WilliamDickinson(y)) -> SitsInHouseOfCommons(x,y))", "William Dickinson, b.1930, was a British politician and sat in HouseOfCommons.", "all x.((BritishPolitician(x) & WilliamDickinson(x)) -> SitsInHouseOfCommons(x))", "(BritishPolitician(WilliamDickinson) & SitsInHouseOfCommons(WilliamDickinson,HouseOfCommons))", "(BritishPolitician(WilliamDickinson) & SitsInHouseOfCommons(WilliamDickinson))"]}
{"id": "folio_train_35", "nl": "William Dickinson attended Westminster school for high school and then the University of Edinburgh.", "fol": "(AttendedSchool(Williamdickinson,Westminster) & IsHighSchool(Westminster) & AttendedSchool(Williamdickinson,Universityofedinburgh))", "prediction": ["all x y.((WilliamDickinson(x) & WestminsterSchool(y)) -> (Attended(x,y) & HighSchool(y) & UniversityOfEdinburgh(y)))", "William Dickinson attended Westminster School for HighSchool and then UniversityOfEdinburgh.", "(all x.(WilliamDickinson(x) -> Attends(x,WordsburySchool)) & ((WoodenSchool(x) & HighSchool(x)) | UniversityOfEdinburgh(x))))", "(Attended(WilliamDickinson,Westminster) & HighSchool(WilliamDickinson,Edinburgh))", "all x.((WilliamDickinson(x) & WestminsterSchool(x)) -> (AttendedHighSchool(x) & AttendedUniversityOfEdinburgh(x)))", "(AttendedWoodenSchool(WilliamDickinson,HighSchool) & AttendedUniversityOfEdinburgh(WilliamDickinson,HighSchool))", "(Attended(WilliamDickinson,WoodenSchool) & HighSchool(WilliamDickinson,UniversityOfEdinburgh))", "William Dickinson attended WestminsterSchool(Wooden) & HighSchool(Wooden) & UniversityOfEdinburgh(Wooden))", "all x y.((WilliamDickinson(x) & WestminsterSchool(y)) -> (AttendedForHighSchool(x,y) & AttendedForUniversityOfEdinburgh(x,y)))", "(all x.(WilliamDickinson(x) -> AttendsWoodenSchool(x)) & attendedUniversityOfEdinburgh(x))", "William Dickinson attended Westminster School for HighSchool (and UniversityOfEdinburgh))", "William Dickinson (born in Westminster, England) & attended Westminster School for HighSchool (and attended UniversityOfEdinburgh,UK)))", "William Dickinson attended Westminster School for HighSchool, and then UniversityOfEdinburgh.", "William Dickinson acquitted Westminster School for HighSchool and UniversityOfEdinburgh.", "all x.((WilliamDickinson(x) & WestminsterSchool(x)) -> (AttendedHighSchool(x) & AttendedUniversityOfEdinburgh(x)))", "(all x.(WilliamDickinson(x) -> AttendedWordburySchool(x)) & attendedUniversityOfEdinburgh(x))"]}
{"id": "folio_train_36", "nl": "The University of Edinburgh is a university located in the United Kingdom.", "fol": "(IsLocatedIn(Universityofedinburgh,Unitedkingdom) & IsUniversity(Universityofedinburgh))", "prediction": ["all x.(UniversityOfEdinburgh(x) -> UniversityLocatedInUnitedKingdom(x))", "(UniversityOfEdinburgh(University) & LocatedInUnitedKingdom(University))", "all x y.((University(x) & University(y)) -> (LocatedIn(x,y) & United Kingdom(y)))", "the UniversityOfEdinburgh(UoE) is a university located in the United Kingdom.", "UniversityOfEdinburgh(UoE) -> (University(e) & LocatedInUnitedKingdom(e)))", "all x.((UniversityOfEdinburgh(x) & UniversityOfUnitedKingdom(x)) -> LocatedIn(x,UnitedKingdom))", "all x.(UniversityOfEdinburgh(x) -> UniversityLivingInUnitedKingdom(x))", "(University(University) & LocatedInUnitedKingdom(University))", "(UniversityOfEdinburgh(University) & LocatedInUnitedKingdom(University))", "UniversityOfEdmonton(UoE) is a university located in the United Kingdom.", "the UniversityOfEdinburgh (University(e) & UnitedKingdom(e))", "all x y.((University(x) & University(y) & UnitedKingdom(y)) -> LocatedIn(x,y))", "the UniversityOfEdmonton(UoE) is a university located in the United Kingdom.", "all x.(UniversityOfEdmonton(x) -> UniversityLocatedInUnitedKingdom(x))", "all x.(UniversityOfEdinburgh(x) -> (UniversityLocatedInUnitedKingdom(x) & LocatedInUnitedKingdom(x)))", "(UniversityOfEdmonton(University,UK))"]}
{"id": "folio_train_37", "nl": "William Dickinson supported the Portland Whigs.", "fol": "Supports(Williamdickinson,Portlandwhigs)", "prediction": ["all x y.((WilliamDickinson(x) & PortlandWhisgs(y)) -> Supported(x,y))", "(SupportsPortlandWhisgs(WilliamDickinson))", "William Dickinson supported PortlandWhisgs.", "all x.((WilliamDickinson(x) & PortlandWhisgs(x)) -> Supported(x,Whisgs))", "(SupportsPoorLandmarkWhisgs(WilliamDickinson))", "(Supports(Whigs) -> WilliamDickinson(Wigs))", "all x y.((WilliamDickinson(x) & PortlandWhisgs(y)) -> Supported(x,y))", "-(WilliamDickinson(Wigs) & Portland(Wigs))", "William Dickinson supported PortlandWhisgs.", "William Dickinson, SupportedPotentialWhisgs(Whisgs)", "(SupportedBy(Whigs) & WilliamDickinson(Wigs))", "(SupportsPortlandWhisgs(WilliamDickinson))", "William Dickinson & PortlandWhisgs(PlasticWhisgs)", "William Dickinson (Whiskers) & SupportedBy(Whiskers))", "William Dickinson supported PortlandWhisgs.", "(SupportsPalmWhisgs(WilliamDickinson,PalmForm))"]}
{"id": "folio_train_38", "nl": "People who supported the Portland Whigs did not get a seat in the Parliament.", "fol": "all x.(Supports(x,Portlandwhigs) -> -HasSeatInParliament(x))", "prediction": ["all x.((Person(x) & SupportedPortlandWhisgs(x)) -> -SeatInParliament(x))", "all x.((SupportsPortlandWhisgs(x)) -> -SeatInParliament(x))", "all x.((People(x) & SupportedPortlandWhisgs(x)) -> -SeatInParliament(x))", "all x y.((Person(x) & PortlandWhisgs(y)) -> -SeatInParliament(x,y))", "(SupportsPortlandWhisgs(Person) & -GivesSeatInParliament(Person))", "all x.(SupportsPortlandWhisgs(x) -> -SeatInParliament(x))", "all x y.((People(x) & PortlandWhisgs(y) & Supported(x,y)) -> -SeatInParliament(x))", "all x y.((Person(x) & SupportedPortlandWhisgs(x)) -> -SeatInParliament(y))", "all x.((Person(x) & SupportedPortlandWhisgs(x)) -> -SeatInParliament(x))", "(SupportsPortlandWhisgs(Person) & -GetsSeatInParliament(Person))", "all x y.((Person(x) & PortlandWhisgs(y)) -> -SeatInParliament(x,y))", "all x.(SupportsPotlandWhisgs(x) -> -GivesSeatInParliament(x))", "all x.((SupportsPortlandWhisgs(x)) -> -SeatInParliament(x))", "all x.((People(x) & SupportedPortlandWhisgs(x)) -> -SeatInParliament(x))", "all x.(SupportsPortlandWhisgs(x) -> -SeatInParliament(x))", "all x y.((Person(x) & PortlandWhists(y)) -> -SeatInParliament(x,y))"]}
{"id": "folio_train_39", "nl": "William Dickinson did not get a seat in the Parliament.", "fol": "-HasSeatInParliament(Williamdickinson)", "prediction": ["all x.((WilliamDickinson(x) & -SeatInParliament(x)) -> -SeatInParliament(x))", "(-SeatInParliament(WilliamDickinson))", "William Dickinson -SeatInParliament(WilliamDickinson)", "(-(WilliamDickinson(William Dickinson) & Parliament(William Dickinson)))", "William Dickinson -GatheredSeatInParliament(WilliamDickinson)", "all x.((WilliamDickinson(x) & -GatheringSeat(x)) -> -GatheringSeat(x))", "(-HasSeatInParliament(WilliamDickinson))", "all x.(WilliamDickinson(x) -> -GathersSeatInParliament(x))", "-(WilliamDickinson(WilliamsDickinson) & Parliament(WilliamsDickinson))", "(-SeatInParliament(WilliamDickinson))", "William Dickinson -(SeatInParliament(WilliamDickinson))", "(-GatheringSeat(WilliamDickinson))", "William Dickinson -SeatInParliament(WilliamDickinson)", "all x.((WilliamDickinson(x) & -SeatInParliament(x)) -> -SeatInParliament(x))", "William Dickinson did not get a seat in Parliament.", "(-SeatInParliament(WilliamDickinson))"]}
{"id": "folio_train_40", "nl": "William Dickinson went to schools located in the United Kingdom for both high school and university.", "fol": "(exists h.(AttendedSchool(Williamdickinson,h) & IsHighSchool(h) & IsLocatedIn(h,Unitedkingdom)) & exists u.(AttendedSchool(Williamdickinson,u) & IsUniversity(u) & IsLocatedIn(u,Unitedkingdom)))", "prediction": ["all x y.((WilliamDickinson(x) & School(y)) -> (GoesTo(x,y) & HighSchool(y) & University(y)))", "all x.((WilliamDickinson(x) & School(y)) -> (GoesTo(x,y) & HighSchool(y) & University(y)))", "all x y z.((WilliamDickinson(x) & School(y) & School(z)) -> (GoesTo(x,y,z) & HighSchool(y) & University(z)))", "(GoesToSchoolsInUnitedKingdom(WilliamDickinson,HighSchool) & GoesToSchoolsInUnitedKingdom(WilliamDickinson,University))", "all x.(WilliamDickinson(x) -> (GoesToSchools(x,y) & HighSchool(y) & University(y)))", "(History(WilliamDickinson) & School(WilliamDickinson) & School(WilliamDickinson))", "all x.((WilliamDickinson(x) & School(y) & United Kingdom(z)) -> (GoesTo(x,y,z) & HighSchool(z) & University(z)))", "William Dickinson sat in a school in the United Kingdom for both high school and university.", "all x y.((WilliamDickinson(x) & School(y)) -> (GoesTo(x,y) & (HighSchool(y) | University(y))))", "(GoesToSchools(WilliamDickinson,UnitedKingdom) & HighSchool(WilliamDickinson,University))", "(GoesToSchools(William Dickinson,UnitedKingdom) & HighSchool(William Dickinson) & University(William Dickinson,UnitedKingdom))", "all x y.((WilliamDickinson(x) & School(y) & United Kingdom(y)) -> (GoesTo(x,y) & (HighSchool(y) | University(y))))", "all x.(WilliamDickinson(x) -> (GoesToSchools(x) & HighSchool(x) & University(x)))", "all x y z.((WilliamDickinson(x) & School(y) & School(z)) -> (GoesTo(x,y,z) & HighSchool(z) & University(z)))", "all x.((WilliamDickinson(x) & School(y) & UnitedKingdom(x)) -> (HighSchool(y) & University(y)))", "William Dickinson sat in a school in the United Kingdom for both high school and university."]}
{"id": "folio_train_41", "nl": "William Dickinson attended university in the United Kingdom.", "fol": "exists u.(AttendedSchool(Williamdickinson,u) & IsUniversity(u) & IsLocatedIn(u,Unitedkingdom))", "prediction": ["William Dickinson attended university in the United Kingdom.", "all x.((WilliamDickinson(x) & University(y)) -> Attends(x,y))", "(AttendedUniversity(WilliamDickinson,UK))", "all x y.((WilliamDickinson(x) & University(y)) -> Attends(x,y))", "-(WilliamDickinson(William) & University(UnitedKingdom))", "all x.(WilliamDickinson(x) -> AttendsUniversity(x,UnitedKingdom))", "(AttendedUniversity(WilliamDickinson) & United Kingdom(WilliamDickinson))", "William Dickinson attended university in United Kingdom.", "William Dickinson attendedUniversityInUnitedKingdom(WilliamDickinson)", "William Dickinson acquittedUniversityInUnitedKingdom(WilliamDickinson)", "William Dickinson attended University InUnitedKingdom(WilliamDickinson)", "William Dickinson attended University In United Kingdom.", "William Dickinson attended university in the United Kingdom.", "(AttendedUniversity(WilliamDickinson,UK))", "(AttendedUniversity(WilliamDickinson,UK))", "William Dickinson attended university in the United Kingdom."]}
{"id": "folio_train_42", "nl": "William Dickinson sat in the House of Commons.", "fol": "SitsInHouseOfCommons(Williamdickinson)", "prediction": ["William Dickinson sat in HouseOfCommons.", "all x.((WilliamDickinson(x) & HouseOfCommons(x)) -> SitsIn(x,commons))", "all x y.((WilliamDickinson(x) & HouseOfCommons(y)) -> SitsIn(x,y))", "(SatInHouseOfCommons(WilliamDickinson))", "-(WilliamDickinson(w) & HouseOfCommons(h))", "William Dickinson sat in HouseOfCommons.", "all x.((WilliamDickinson(x) & HouseOfCommons(x)) -> SitsIn(x,Commons))", "(SatInHouseOfCommons(WilliamDickinson)", "all x y.((WilliamDickinson(x) & HouseOfCommons(y)) -> SitsIn(x,y))", "William Dickinson sat in HouseOfCommons.", "(SatInHouseOfCommons(WilliamDickinson)", "William Dickinson (SatInHouseOfCommons)", "William Dickinson sat in HouseOfCommons.", "(SatInHouseOfCommons(WilliamDickinson)", "William Dickinson sat in House ofCommons.", "William Dickinson sat in HouseOfCommons."]}
{"id": "folio_train_43", "nl": "LanguageA is a universal language", "fol": "IsUniversalLanguage(LanguageA)", "prediction": ["all x.(LanguageA(x) -> UniversalLanguage(x))", "(UniversalLanguage(LanguageA) & UniversalLanguage(LanguageA))", "LanguageA is a universal language.", "all x.(LanguageA(x) -> UniversalLanguage(x))", "LanguageA (UniversalLanguage(Language) & UniversalLanguage(Language))", "all x.((LanguageA) & UniversalLanguage(x)) -> LanguageA(x))", "(UniversalLanguage(LanguageA) & UniversalLanguage(LanguageA))", "LanguageA is a universal language.", "LanguageA is a universallanguage(x) & UniversalLanguage(x))", "all x.(LanguageA(x) -> UniversalLanguage(x))", "all x.((LanguageA) & UniversalLanguage(x)) -> LanguageA.(LanguageA))", "LanguageA is a universal language.", "LanguageA (UniversalLanguage(Language) & UniversalLanguage(Language))", "all x.(LanguageA(x) -> UniversalLanguage(x))", "all x.(LanguageA(x) -> UniversalLanguage(x))", "All x.(LanguageA(x) -> UniversalLanguage(x))"]}
{"id": "folio_train_44", "nl": "If a universal language exists, then for every two people if they both know the same universal language they can communicate.", "fol": "all x y.(exists z.(KnowsLanguage(x,z) & KnowsLanguage(y,z) & IsUniversalLanguage(z)) -> CanCommunicate(x,y))", "prediction": ["all x.((UniversalLanguage(x) & exists y.(Person(y) & Person(y) & KnowsUniversalLanguage(y,x))) -> CanCommunicate(y,x))", "all x.(UniversalLanguage(x) -> (exists y.(Person(y) & KnowsUniversalLanguage(y)) & Communicate(y,x))))", "all x y.((UniversalLanguage(x) & Person(y) & KnowsUniversalLanguage(y,x)) -> Communicate(y,x))", "all x.((UniversalLanguage(x) & exists y.(People(y) & KnowUniversalLanguage(y,x))) -> CanCommunicate(y,x))", "exists, then for every two people if they knowthesameuniversalLanguage(x) -> CanCommunicate(x))", "all x.exists y.((UniversalLanguage(x) & Person(y) & KnowsUniversalLanguage(y,x)) -> CanCommunicate(y,x))", "all x.(UniversalLanguage(x) -> (ForEachPerson(x) & KnowsSameUniversalLanguage(x)))", "all x y.((UniversalLanguage(x) & Person(y) & KnowsSameUniversalLanguage(y,x)) -> Communicate(y,x))", "all x y z.((UniversalLanguage(x) & Person(y) & Person(z) & KnowsUniversalLanguage(y,z)) -> Communicate(y,z))", "exists x.(UniversalLanguage(x) & exists y.(People(y) & KnowUniversalLanguage(y,x)) & Communicate(y,x)))", "exists.(UniversalLanguage(x) -> (ForEveryTwoPeople(x) & KnowsSameUniversalLanguage(x) & Communicate(x)))", "exists.(UniversalLanguage(x) -> (ForEachPerson(x) & KnowsSameUniversalLanguage(x)))", "all x y.((UniversalLanguage(x) & Person(y) & KnowledgeSameUniversalLanguage(y,x)) -> Communicate(y,x))", "all x y.((UniversalLanguage(x) & Person(y)) -> (KnowsSameUniversalLanguage(y,x) & Communicates(y,x)))", "all x.exists y.((UniversalLanguage(x) & Person(y) & KnowsUniversalLanguage(y,x,y)) -> CanCommunicate(y,x))", "exists, and exists x.(UniversalLanguage(x) & exists y.(People(y) & KnowUniversalLanguage(y,x)) & Communicate(y,x)))"]}
{"id": "folio_train_45", "nl": "Katya cannot communicate with Danil.", "fol": "KnowsLanguage(Katya,LanguageA)", "prediction": ["(-Communicates(Katya,Danil))", "all x.(Katya(x) -> -CommunicatesWithDanil(x))", "-(Katya(Katya) & Danil(Danil))", "Katya -CanCommunicateWithDanil(Katya,Danil)", "all x.((Katya(x) & Danil(x)) -> CannotCommunicate(x,y))", "(-CommunicatesWith(Katya,Danil))", "(-CommunicatesWithDanil(Katya))", "(-Communicates(Katya,Danil) & -Communicates(Katya,Danil))", "(all x.(Katya(x) -> -CommunicatesWith(x,Danil)))", "Katya & Danil -Communicate(Katya,Katya,Danil)", "Katya -CanCommunicateWithDanil(katya,danil)", "all x.(Katya(x) -> -CommunicatesWithDanil(x))", "-(Katya(Katya) & Danil(Danil))", "(-CommunicatesWithDanil(Katya,Danil))", "-(Katya(Katya) | Danil(Katya)))", "-(Katya(kat) & Danil(dan))"]}
{"id": "folio_train_46", "nl": "Katya knows LanguageA. ", "fol": "-CanCommunicate(Katya,Danil)", "prediction": ["all x.(Katya(x) -> KnowsLanguageA(x))", "(Katya knowsLanguageA(Katya) & KnowsLanguageA(Katya))", "Katya knowsLanguageA.", "(knowsLanguageA(Katya) & KnowsLanguageA(Katya))", "-KatyaKnowsLanguageA.", "exists x.(Katya(x) & LanguageA(x))", "Katya knowsLanguageA.", "(Katya knowsLanguageA)", "(knowsLanguageA(Katya) & KnowsLanguageA(Katya))", "all x.(Katya(x) -> KnowsLanguageA(x))", "(Katya knowsLanguageA(Katya))", "Katya knowsLanguageA.", "exists x.(Katya(x) & LanguageA(x))", "(Katya knowsLanguageA.)", "Katya knowsLanguageA.", "all x.(Katya(x) -> KnowsLanguageA(x))"]}
{"id": "folio_train_47", "nl": "Danil knows LanguageA.", "fol": "KnowsLanguage(Danil,LanguageA)", "prediction": ["Danil knowsLanguageA.", "(Knows(Danil,LanguageA))", "-exists x.(Danil(x) & LanguageA(x))", "Danil knowsLanguageA.", "(KnowsLanguageA) & DanilKnowsLanguageA)", "(knows(Danil,LanguageA))", "-KnowsLanguageA(Danil)", "Danil KnowsLanguageA.", "(Knows(Daniel,LanguageA))", "Danil knowsLanguageA.", "Danil knowsLanguageA(Danil)", "Danil KnowsLanguageA.", "Danil knowsLanguageA.", "Danil knowsLanguageA(Danil)", "Danil KnowsLanguageA.", "Danil knowsLanguageA."]}
{"id": "folio_train_48", "nl": "All customers who are subscribed to AMC List are available to watch 3 movies every week without any additional fees. ", "fol": "all x.(SubscribedToAMCList(x) -> AvailableToWatch3Movies(x))", "prediction": ["all x.((Customer(x) & SubscribedToAMCList(x)) -> AvailableToWatchMovies(x,3))", "all x.(SubscribesToAMCList(x) -> AvailableToWatchMovies(x,3) & -AdditionalFees(x))", "all x.(SubscribedToAMCList(x) -> AvailableToWatchMovies(x,3) & -AdditionalFees(x))", "All customers who subscribedToAMCList(x) -> AvailableToWatchMoviesWithoutAdditionalFees(x))", "(all x.(SubscribesToAMCList(x) -> AvailableToWatchMovies(x,3)))", "all x.((Customer(x) & SubscribedToAMCList(x)) -> AvailableToWatchMovies(x,3))", "All customers who are subscribed to AMCList(x) -> AvailableToWatchMoviesWithoutAdditionalFees(x))", "all x y.((Customer(x) & SubscribedToAMCList(x)) -> AvailableToWatchMovies(x,y))", "all x.((Customer(x) & SubscribedToAMCList(x)) -> AvailableToWatchMovies(x,3))", "all x.((Customer(x) & SubscribedToAMCList(x)) -> AvailableToWatch3Movies(x))", "all x.(SubscribedToAMCList(x) -> AvailableToWatchMoviesWithoutAdditionalFees(x))", "all x y.((Customer(x) & SubscribedToAMCList(x)) -> AvailableToWatch3Movies(x,y))", "all x y.((Customer(x) & SubscribedToAMCList(x) & SubscribedToAMCList(y)) -> AvailableToWatchMovies(x,y))", "all x.(SupportedToAMCList(x) -> AvailableToWatch3Movies(x))", "all x.((Customer(x) & SubscribedToAMCList(x)) -> AvailableToWatchMoviesWithoutAdditionalFees(x,3))", "all x.(SubscribedToAMCList(x) -> AvailableToWatchMoviesWithoutAdditionalFees(x))"]}
{"id": "folio_train_49", "nl": "Some customers go to cinemas every week", "fol": "exists x.GoToCinemaEveryWeek(x)", "prediction": ["exists x.(Customer(x) & GoesToCinema(x) & EveryWeek(x))", "exists x y.(Customer(x) & Cinema(y) & GoesTo(x,y))", "exists x y z.(Customer(x) & Cinema(y) & Week(z) & GoesTo(x,y,z))", "exists x.(Customer(x) & GoesToCinema(x))", "exists x y.(Customer(x) & Cinema(y) & GoesTo(x,y))", "all x y z.((Customer(x) & Cinema(y) & Week(z)) -> GoesTo(x,y,z))", "(exists x.(Customer(x) & GoesToCinema(x)) & EveryWeek(x))", "exists x.(Customer(x) & GoesToCinema(x) & EveryWeek(x))", "exists x y.(Customer(x) & Cinema(y) & GoesTo(x,y))", "exists x.(Customer(x) & GoToCinema(x) & EveryWeek(x))", "exists x.(Customer(x) & GoesToCinemaEveryWeek(x))", "all x y z.((Customer(x) & Cinema(y) & Week(z)) -> GoesTo(x,y,z))", "exists x y.(Customer(x) & Cinema(y) & GoesToEveryWeek(x,y))", "exists x.(Customer(x) & GoesToCinemasEveryWeek(x))", "exists x.(Customer(x) & GoToCinema(x))", "exists x.(Customer(x) & GoesToCinema(x))"]}
{"id": "folio_train_50", "nl": "Customers either subscribe to AMC service or HBO service. ", "fol": "all x.(SubscribedToAMCList(x) | SubscribedToHBOService(x))", "prediction": ["all x.(Customer(x) -> (SubscribesToAMCService(x) | SubscribesToHBOsService(x)))", "all x y.((Customer(x) & AMCService(y)) | HBOService(y)) -> SubscribesTo(x,y))", "(SubscribesToAMCService(Customer) | SubscribesToHBOsService(Customer))", "all x.(Customer(x) -> (SubscribesToAMCService(x) | SubscribesToHBOService(x)))", "(SubscribesTo(Customer(Customer,AMC) | SubscribesTo(Customer,HBOY))", "all x y.((Customer(x) & (AMCService(y) | HBOService(y))) -> SubscribesTo(x,y))", "(SubscribesToAMCService(Customer) | SubscribesToHBOsService(Customer))", "all x.(Customer(x) -> (SubscribesToAMCService(x) | SubscribesToHoneyService(x)))", "all x.(Customer(x) -> (SubscribesToAMC(x) | SubscribesToHBOY(x)))", "all x y.((Customer(x) & Service(y)) -> (Subscribes(x,y) | Subscribes(x,y)))", "all x y.(Customer(x) -> (SubscribesToAMCService(x,y) | SubscribesToHBOService(x,y)))", "(subscribesToAMCService(customer) | SubscribesToHoneyService(customer))", "all x.(Customer(x) -> (SubscribesTo(x,AMC) | SubscribesTo(x,HBOY)))", "exists x.(Customer(x) & SubscribesTo(x,AMC) | SubscribesTo(x,HBOY))", "all x.(Customer(x) -> (Subscribes(x,AMC) | Subscribes(x,HBOY)))", "exists x.(Customer(x) & (SubscribeToAMCService(x) | SubscribeToHBOsService(x)))"]}
{"id": "folio_train_51", "nl": "Customers who prefer TV series more and will not watch TV series in cinemas.", "fol": "all x.(PrefersTVSeries(x) -> -WatchesTVSeriesInCinema(x))", "prediction": ["all x.((Customer(x) & PrefersTVSeriesMore(x) & -WatchesTVSeriesInCinemas(x)) -> -WatchesTVSeriesInCinemas(x))", "all x y.((Customer(x) & TVSeries(y) & PrefersMore(x,y) & -WatchesInCinemas(x,y)) -> -PrefersMore(x,y))", "all x.((Customer(x) & PrefersTVSeriesMore(x) & -WatchesTVSeriesInCinemas(x)) -> -PrefersTVSeries(x))", "all x.((Customer(x) & PrefersTVSeriesMore(x) & -WatchesTVSeriesInCinemas(x)) -> -PrefersTVSeriesMore(x))", "all x y.((Customer(x) & Customer(y) & PrefersTVSeriesMore(x,y) & -WatchesTVSeriesInCinemas(x,y)) -> -PrefersTVSeries(x,y))", "(all x.(PrefersTVSeries(x) -> -WatchTVSeriesInCinemas(x)))", "all x y z.((Customer(x) & TVSeries(y) & Cinema(z) & PrefersMore(x,y) & -WatchesIn(x,z)) -> -PrefersMore(x,y))", "all x y.((Customer(x) & TVSeries(y) & PrefersMore(x,y) & -WatchesInCinemas(x,y)) -> -PrefersMore(x,y))", "all x.((Customer(x) & PrefersTelevisionSeriesMore(x) & -WatchesTelevisionSeriesInCinemas(x)) -> -WatchesTelevisionSeriesInCinemas(x))", "all x y.((Customer(x) & TVSeries(y) & PrefersMore(x,y) & -WatchInCinemas(x,y)) -> -PrefersMore(x,y))", "all x.((Customer(x) & PrefersTVSeriesMore(x) & -WatchesInCinemas(x)) -> -WatchesInCinemas(x))", "all x.((Customer(x) & PrefersTVSeriesMore(x) & -WatchesTVSeriesInCinemas(x)) -> -PrefersTVSeriesInCinemas(x))", "all x.(PrefersTVSeriesMore(x) -> -WatchTVSeriesInCinemas(x))", "exists x.(Customer(x) & PrefersTelevisionSeriesMore(x) & -WatchesInCinemas(x))", "all x.((Customer(x) & MorePrefersTVSeries(x) & -WatchesTVSeriesInCinemas(x)) -> -PrefersTVSeriesInCinemas(x))", "exists x.(Customer(x) & (PrefersTVSeriesMore(x) & -WatchesTVSeriesInCinemas(x)))"]}
{"id": "folio_train_52", "nl": "All customers who subscribe to HBO services prefer TV series to movies. ", "fol": "all x.(SubscribedToHBOService(x) -> PrefersTVSeries(x))", "prediction": ["all x.((Customer(x) & SubscribesToHoneyServices(x)) -> (PrefersTVSeries(x) & PrefersMovies(x)))", "all x.((Customer(x) & SubscribesToHBO(x)) -> (PrefersTVSeries(x) & PrefersMovies(x)))", "all x y.((Customer(x) & SubscribesToHoneyServices(x)) -> (PrefersTVSeries(x,y) & PrefersMovies(x,y)))", "all x.((Customer(x) & SubscribesToHoneyServices(x)) -> (PrefersTVSeries(x) & PrefersMovies(x)))", "all x y.((Customer(x) & SubscribesToHBO(x) & HBOService(y)) -> (PrefersTVSeries(x,y) & PrefersMovies(x,y)))", "(all x.(SubscribesToHBO(x) -> PrefersTVSeriesToMovies(x)))", "all x.(SubscribesToHBO(x) -> (PrefersTVSeries(x) & PrefersMovies(x)))", "all x y.((Customer(x) & SubscribesToHobbyServices(x)) -> (PrefersTVSeries(x,y) & PrefersMovies(x,y)))", "(all x.(SubscribesToHoneyServices(x) -> PrefersTVSeriesToMovies(x)))", "all x.((Customer(x) & SubscribesToHobbyServices(x)) -> PrefersTVSeriesToMovies(x))", "all x.(SubscribesToHoneyServices(x) -> (PrefersTVSeries(x) & PrefersMovies(x)))", "all x.((Customer(x) & SubscribesToHBO(x)) -> (PrefersTVSeries(x) & PrefersMovies(x)))", "all x y.((Customer(x) & SubscribesToHoneyServices(x,y)) -> (PrefersTVSeries(x,y) & PrefersMovies(x,y)))", "all x y.((Customer(x) & SubscribesToHBO(x)) -> (PrefersTVSeries(x,y) & PrefersMovies(x,y)))", "all x.(SubscribesToHBO(x) -> PrefersTVSeriesToMovies(x))", "all x.((Customer(x) & SubscribesToHBO(x)) -> PrefersTVSeriesToMovies(x))"]}
{"id": "folio_train_53", "nl": "James watches TV series in cinemas. ", "fol": "WatchesTVSeriesInCinema(James)", "prediction": ["all x y.((James(x) & TVSeries(y)) -> WatchesInCinemas(x,y))", "all x y z.((James(x) & TVSeries(y) & Cinema(z)) -> WatchesIn(x,y,z))", "all x.(James(x) -> WatchesTVSeriesInCinemas(x))", "James watches TVSeriesInCinemas(James)", "(WatchesTVSeriesInCinemas(James))", "all x y.((James(x) & TVSeries(y)) -> WatchesInCinemas(x,y))", "-WatchesTVSeriesInCinemas(James)", "(WatchesTVSeriesInCinemas(James,Cinemas))", "(WatchesInCinemas(James,TVSeries) & InCinemas(James,TVSeries))", "James watchesTVSeriesInCinemas(James,TVSeries)", "all x.(James(x) -> WatchesTVSeriesInCinemas(x))", "all x y.((James(x) & TVSeries(y)) -> WatchesInCinemas(x,y))", "(WatchesTVSeriesInCinemas(James))", "James watches TVSeriesInCinemas(James)", "all x.(James(x) -> WatchesTVSeriesInCinemas(x))", "James watchesTVSeriesInCinemas(James,TVSeries)"]}
{"id": "folio_train_54", "nl": "James goes to cinemas every week.", "fol": "GoToCinemaEveryWeek(James)", "prediction": ["all x.(James(x) -> GoesToCinema(x))", "all x y.((James(x) & Cinema(y)) -> GoesTo(x,y))", "all x.((James(x) & Cinema(y)) -> GoesTo(x,y))", "James goes to cinemas every week.", "all x.(James(x) -> GoesToCinemasEveryWeek(x))", "(GoesToCinemasEveryWeek(James,x))", "(GoesToCinemas(James) & EveryWeek(James))", "James goesToCinemasEveryWeek.", "all x y.((James(x) & Cinema(y)) -> GoesTo(x,y))", "-GoesToCinemasEveryWeek(James,x))", "James goesToCinemasEveryWeek.", "all x.((James(x) & Cinema(y)) -> GoesTo(x,y))", "James goes to cinemas every week.", "all x.(James(x) -> GoesToCinema(x))", "all x y.((James(x) & Cinema(y)) -> GoesTo(x,y))", "All x.(James(x) -> GoesToCinemasEveryWeek(x))"]}
{"id": "folio_train_55", "nl": "James does not go to cinemas every week.", "fol": "-GoToCinemaEveryWeek(James)", "prediction": ["all x.((James(x) & -GoesToCinema(x)) -> -EveryWeek(x))", "-(GoesToCinema(James) & Week(James))", "-all x.(James(x) -> GoesToCinema(x))", "all x.((James(x) & Cinema(y)) -> -GoesTo(x,y))", "(-GoesToCinema(James) & Weeks(James))", "James -GoesToCinemasEveryWeek(James)", "-exists x.(James(x) & Cinema(x) & -GoesTo(x,y))", "all x.(James(x) -> -GoesToCinemasEveryWeek(x))", "James does not go to cinemas every week.", "(James(James) & -GoesToCinema(James))", "(JamesDoesNotGoToCinemasEveryWeek(James))", "(-GoesToCinemasEveryWeek(James))", "-(James(James) & Cinema(James))", "James -GoesToCinemasEveryWeek(James)", "James does not go to cinemas every week.", "all x.((James(x) & Cinema(y)) -> -GoesTo(x,y))"]}
{"id": "folio_train_56", "nl": "James goes to cinemas every week or watches 3 movies every week without any additional fees.", "fol": "(GoesToCinemasEveryWeek(James) | AvailableToWatch3Movies(James))", "prediction": ["all x.(James(x) -> (GoesToCinemasEveryWeek(x) | WatchesMoviesEveryWeek(x)))", "(GoesToCinemasEveryWeek(James) | WatchesMoviesEveryWeek(James)))", "all x y.((James(x) & Cinema(y)) -> (GoesTo(x,y) | Watches(x,y)))", "James (GoesToCinemasEveryWeek(James) | Watches3MoviesEveryWeek(James)))", "(GoesToCinema(James,Week) | WatchesMovies(James,Week)))", "all x.(James(x) -> (GoesToCinemasEveryWeek(x) | Watches3MoviesEveryWeek(x)))", "all x.((James(x) & (GoesToCinemasEveryWeek(x) | WatchesMoviesEveryWeek(x))) -> -AdditionalFees(x))", "All x y z.((James(x) & Cinema(y) & Movie(z)) -> (GoesTo(x,y) | Watches(x,z)))", "all x y.((James(x) & Cinema(y)) -> (GoesTo(x,y) | Watches(x,y) & -AdditionalFees(x)))", "(all x.(James(x) -> (GoesToCinema(x) | WatchesMovies(x))))", "(GoesToCinemasEveryWeek(James) | Watches3MoviesEveryWeek(James)))", "all x.((James(x) & (GoesToCinemasEveryWeek(x) | Watches3MoviesEveryWeek(x))) -> -AdditionalFees(x))", "all x.(James(x) -> (GoesToCinemasEveryWeek(x) | WatchesMoviesEveryWeek(x)))", "all x.(James(x) -> (GoesToCinema(x) | WatchesMovies(x)))", "all x.(James(x) -> (GoesToCinemas(x) | WatchesMovies(x,3) & -AdditionalFees(x)))", "all x y.((James(x) & Cinema(y)) -> (GoesTo(x,y) | Watches(x,y)))"]}
{"id": "folio_train_57", "nl": "If James does not both go to cinemas every week and subscribe to HBO service, then James is either available to watch 3 movies every week without any additional fees or he prefers TV more.", "fol": "(-(GoToCinemaEveryWeek(James) & SubscribedToHBOService(James)) -> (AvailableToWatch3Movies(James) | PrefersTVSeries(James)))", "prediction": ["all x.((James(x) & -(GoesToCinemasEveryWeek(x) & SubscribesToHBO(x))) -> (AvailableToWatch3Movies(x) | PrefersTVMore(x)))", "(-(GoesToCinemasEveryWeek(James) & SubscribesToHBO(James)) & -(WatchesMoviesEveryWeek(James) & -SubscribesToHBO(James))) | (PrefersTVMore(James))))", "all x y.((James(x) & Cinemas(y) & -GoesTo(x,y) & SubscribesToHorizon(x)) -> ((AvailableToWatch3Movies(x) & -SubscribesToHorizon(x)) | PrefersTVMore(x))))", "all x.((James(x) & -(GoesToCinemasEveryWeek(x) & SubscribesToHorizon(x))) -> (AvailableToWatch3Movies(x) | PrefersTVMore(x)))", "(-(GoesToCinemasEveryWeek(James) & SubscribesToHorizon(James)) & -(WatchesMoviesEveryWeek(James) & -SubscribesToHorizon(James))) | (PrefersTVMore(James))))", "all x.((James(x) & -GoesToCinemasEveryWeek(x) & SubscribesToHBO(x)) -> (AvailableToWatch3Movies(x) | PrefersTVMore(x)))", "all x y.((James(x) & Cinema(y) & -GoesToEveryWeek(x,y) & SubscribesToHBO(x,y)) -> ((AvailableToWatch3Movies(x,y) & -SubscribesToHBO(x,y)) | PrefersTVMore(x,y))))", "all x.(((James(x) & -(GoesToCinemasEveryWeek(x) & SubscribesToHorizon(x))) -> (AvailableToWatch3MoviesEveryWeek(x) | PrefersTVMore(x))))", "all x.((James(x) & -(GoesToCinemasEveryWeek(x) & SubscribesToHBO(x)) & HBOService(x)) -> (AvailableToWatch3Movies(x) | PrefersTVMore(x)))", "(-(GoesToCinemasEveryWeek(James) & SubscribesToHBOYService(James)) -> (AvailableToWatch3Movies(James) & -PrefersTVMore(James)))", "all x.((James(x) & -(GoesToCinemasEachWeek(x) & SubscribesToHBO(x))) -> ((AvailableToWatch3Movies(x) & -SubscribesToHBO(x)) | PrefersTVMore(x))))", "(-((James(J) & GoesToCinemasEveryWeek(J) & SubscribesToHBO(J)) & HBOService(J)) -> (AvailableToWatch3MoviesEveryWeek(J) & -PrefersTVMore(J)))", "exists x.(James(x) & -(GoesToCinemasEveryWeek(x) & SubscribesToHorizonService(x)) & ((WatchesMoviesEveryWeek(x) & -SubscribesToHorizonService(x)) | (PrefersTVMore(x)))))", "all x.((James(x) & GoesToCinemasEveryWeek(x) & SubscribesToHBO(x)) -> (AvailableToWatch3Movies(x) | PrefersTVMore(x)))", "all x.((Jimmy(x) & GoesToCinemasEveryWeek(x) & SubscribesToHorizonService(x)) -> ((AvailableToWatch3MoviesEveryWeek(x) & -SubscribesToHorizonService(x)) | PrefersTVMore(x))))", "(-(GoesToCinemasEachWeek(James) & SubscribesToHorizonService(James)) -> (AvailableToWatch3Movies(James) & -PrefersTVMore(James)))"]}
{"id": "folio_train_58", "nl": "If James is available to watch 3 movies every week without any additional fees and he watches TV series in cinemas, then he goes to cinemas every week and prefers TV series more.", "fol": "((AvailableToWatch3Movies(James) & WatchesTVSeriesInCinema(James)) -> (GoToCinemaEveryWeek(James) & PrefersTVSeries(James)))", "prediction": ["all x.((James(x) & AvailableToWatchMovies(x,3) & WatchTVSeriesInCinemas(x)) -> (GoesToCinemas(x) & PrefersTVSeriesMore(x)))", "all x.((James(x) & WatchesMoviesEveryWeek(x,3) & WatchesTVSeriesInCinemas(x)) -> (GoesToCinemasEveryWeek(x) & PrefersTVSeriesMore(x)))", "all x y.((James(x) & Movie(y) & Watches(x,y) & WatchesInCinemas(x)) -> (GoesToCinemas(x) & PrefersTVSeriesMore(x)))", "all x y.((James(x) & AvailableToWatchMovies(x,3) & WatchTVSeries(x,y) & InCinemas(x)) -> (GoesToCinemas(x) & PrefersTVSeries(x)))", "all x y z.((James(x) & Movie(y) & TVSeries(z) & AvailableToWatch(x,y) & Watches(x,z) & InCinemas(x)) -> (GoesToCinemas(x) & PrefersTVSeriesMore(x)))", "all x.((James(x) & AvailableToWatch3Movies(x) & WatchesTVSeriesInCinemas(x)) -> (GoesToCinemas(x) & PrefersTVSeriesMore(x)))", "all x.((AvailableToWatchMovies(x) & WatchTVSeries(x) & WatchesTVSeries(x) & InCinemas(x)) -> (GoesToCinemas(x) & PrefersTVSeriesMore(x)))", "(all x.((James(x) & WatchesMovies(x,3) & NoAdditionalFees(x)) -> GoesToCinemas(x)) & prefersTVSeries(x))", "all x y.((James(x) & Movie(y) & Movie(y) & Watches(x,y)) -> (GoesToCinemas(x) & PrefersTVSeriesMore(x)))", "all x.((James(x) & WatchesMovies(x,3) & WatchesTVSeries(x) & InCinemas(x)) -> (GoesToCinemas(x) & PrefersTVSeriesMore(x)))", "all x.((Movies(x) & Watches3Movies(x) & WatchesTVSeriesInCinemas(x)) -> (GoesToCinemas(x) & PrefersTVSeriesMore(x)))", "all x y z.((James(x) & Movie(y) & TVSeries(z) & AvailableToWatch(x,y,z) & WatchesInCinemas(x,y)) -> (GoesToCinemas(x,y) & PrefersTVSeriesMore(x,y)))", "(all x.((James(x) & AvailableToWatch3MoviesEveryWeek(x) & -AdditionalFees(x)) & WatchesTVSeriesInCinemas(x)) -> GoesToCinemasEveryWeek(x) & PrefersTVSeriesMore(x)))", "(all x.((James(x) & WatchesMoviesEveryWeek(x) & NoAdditionalFees(x)) -> GoesToCinemasEveryWeek(x)) & prefersTVSeriesMore(x))", "(all x.((James(x) & AvailableToWatchMovies(x,3) & NoAdditionalFees(x)) -> GoesToCinemas(x)) & prefersTVSeriesMore(x))", "all x.((James(x) & AvailableToWatch3MoviesEveryWeek(x) & WatchesTVSeriesInCinemas(x)) -> (GoesToCinemasEveryWeek(x) & PrefersTVSeriesMore(x)))"]}
{"id": "folio_train_59", "nl": "A La Liga soccer team ranks higher than another if it receives more points.", "fol": "all x y.((IsLaLigaTeam(x) & IsLaLigaTeam(y) & HasMorePointsThan(x,y)) -> RanksHigherThan(x,y))", "prediction": ["all x y.((La LigaSoccerTeam(x) & Team(y) & MorePoints(x,y)) -> HigherRank(x,y))", "all x y.((La Liga(x) & Team(y) & MorePoints(y)) -> HigherRank(x,y))", "all x y z.((La LigaSoccerTeam(x) & Team(y) & Team(z) & MorePoints(y,z)) -> HigherRank(x,y,z))", "all x y.((LaLigaSoccerTeam(x) & Team(y) & MorePoints(x,y)) -> HigherRank(x,y))", "all x y.((La LigaSoccerTeam(x) & Team(y) & MorePoints(x,y)) -> HigherRank(x,y))", "all x.((La LigaSoccerTeam(x) & MorePoints(x)) -> HigherRank(x))", "all x y.((La LigaSoccerTeam(x) & Team(y) & MorePoints(x)) -> HigherRank(x,y))", "all x y z.((La LigaSoccerTeam(x) & Team(y) & Team(z) & MorePoints(z)) -> HigherRank(x,y,z))", "all x y.((La LigaSoccerTeam(x) & La LigaSoccerTeam(y) & MorePoints(x,y)) -> HigherRank(x,y))", "all x.((La LigaSoccerTeam(x) & MorePoints(x)) -> HigherRanking(x))", "all x y.((LaLigaSoccerTeam(x) & Team(y) & MorePoints(x,y)) -> HigherRank(x,y))", "exists x.(LaLigaSoccerTeam(x) & MorePointsReceives(x))", "all x y z.((La LigaSoccerTeam(x) & Team(y) & Team(z) & MorePoints(y,z)) -> HigherRank(x,y,z))", "all x.((La LigaSoccerTeam(x) & MorePoints(x)) -> HigherRank(x))", "exists x.(LaLigaSoccerTeam(x) & MorePoints(x))", "exists x.(LaLigaSoccerTeam(x) & MorePointsReceives(x))"]}
{"id": "folio_train_60", "nl": "If two La Liga soccer teams recieve the same points, the team which recieves more points from the games between the two teams ranks higher.", "fol": "all x y.((IsLaLigaTeam(x) & IsLaLigaTeam(y) & -HasMorePointsThan(x,y) & -HasMorePointsThan(y,x) & PointsInGameBetween(x,y)) -> RanksHigherThan(x,y))", "prediction": ["all x y.((La LigaSoccerTeam(x) & La LigaSoccerTeam(y) & SamePoints(x,y)) -> RangHigher(x))", "all x y.((LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & SamePoints(x,y)) -> RangHigher(x,y))", "all x.((La LigaSoccerTeam(x) & SamePoints(x)) -> RangHigher(x))", "all x y z.((La LigaSoccerTeam(x) & La LigaSoccerTeam(y) & Team(z) & SamePoints(x,y) & SamePoints(z,y)) -> RangHigher(x,z))", "(SamePointsReceivedByLaLigaSoccerTeams(LaLigaSoccerTeams,2) & Team(LaLigaSoccerTeams,2) RanksHigher(LaLigaSoccerTeams,2))", "all x.((LaLigaSoccerTeam(x) & SamePoints(x)) -> RangHigher(x))", "all x y z.((LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & Team(z) & SamePoints(x,y,z)) -> RangHigher(x,y))", "all x y.((La LigaSoccerTeam(x) & La LigaSoccerTeam(y) & SamePoints(x,y)) -> RangHigher(x,y))", "all x.((Team(x) & LaLigaSoccerTeam(x) & SamePoints(x)) -> RangHigher(x))", "(ReceivesMorePointsFromGames(LaLigaSoccerTeams) -> HigherRanking(LaLigaSoccerTeams))", "all x.((La LigaSoccerTeam(x) & SamePoints(x)) -> RangHigher(x))", "all x y.((LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & SamePoints(x,y)) -> RangHigher(x,y))", "all x y.((Team(x) & La LigaSoccerTeam(y) & SamePoints(y,x)) -> RangHigher(x))", "all x y z.((La LigaSoccerTeam(x) & La LigaSoccerTeam(y) & Team(z) & ReceivesSamePoints(x,y,z)) -> RangHigher(x,y))", "all x.((Team(x) & La LigaSoccerTeam(x) & SamePoints(x)) -> RangHigher(x))", "all x.((La LigaSoccerTeam(x) & SamePoints(x)) -> HigherRank(x))"]}
{"id": "folio_train_61", "nl": "If one team ranks higher than the other team, its reverse does not suffice.", "fol": "all x y.(RanksHigherThan(x,y) -> -RanksHigherThan(y,x))", "prediction": ["all x y.((Team(x) & Team(y) & HigherRank(x,y)) -> -Sufficiency(x,y))", "all x y.((Team(x) & Team(y) & RangHigher(x,y)) -> -SufficiencyReverse(x,y))", "all x.((Team(x) & RankingHigherThan(x,y)) -> -SufficiencyReverse(x))", "all x y z.((Team(x) & Team(y) & Team(z) & HigherRank(x,y,z)) -> -Sufficiency(x))", "(RanksHigherThanOtherTeam(x) -> ReverseSufficiency(x))", "all x.((Team(x) & HigherRank(x)) -> -SufficiencyReverse(x))", "all x y.((Team(x) & Team(y) & HigherRank(x,y)) -> -SuffersReverse(x))", "all x.((Team(x) & RangHigherThan(x)) -> -SufficiencyReverse(x))", "all x.((Team(x) & RankingHigherThanOtherTeam(x)) -> -SufficiencyReverse(x))", "all x y z.((Team(x) & Team(y) & Team(z) & ranksHigher(x,y,z)) -> -Sufficiency(x,y))", "all x y.((Team(x) & Team(y)) -> (RanksHigher(x,y) & -Sufficiency(x,y)))", "all x y.((Team(x) & Team(y) & RangHigher(x,y)) -> -Sufficiency(x,y))", "(RanksHigherThanOtherTeam(x) -> ReverseDisappointment(x))", "all x.((Team(x) & HigherRank(x) & Team(x)) -> -SufficiencyReverse(x))", "all x y.((Team(x) & Team(y)) -> (RanksHigher(x,y) & -RanksHigher(x,y)))", "exists x.(Team(x) & HigherRank(x,x))"]}
{"id": "folio_train_62", "nl": "Real Madrid and Barcelona are both La Liga soccer teams.", "fol": "(IsLaLigaTeam(RealMadrid) & IsLaLigaTeam(Barcelona))", "prediction": ["(La LigaSoccerTeam(RealMadrid) & La LigaSoccerTeam(Barcelona))", "(La Liga(RealMadrid) & La Liga(Barcelona))", "(La Liga SoccerTeam(RealMadrid) & La LigaSoccerTeam(Barcelona))", "(LaLiga(RealMadrid) & LaLiga(Barcelona))", "(LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona))", "all x.((RealMadrid(x) & Barcelona(x)) -> LaLigaSoccerTeam(x))", "((RealMadrid(Real) & Barcelona(Barcelona)) -> La LigaSoccerTeam(RealMadrid(RealMadrid) & La LigaSoccerTeam(Barcelona))", "all x.((RealMadrid(x) | Barcelona(x)) -> LaLigaSoccerTeam(x))", "(La LigaSoccerTeam(RealMadrid) & La LigaSoccerTeam(Barcelona))", "RealMadridAndBarcelona(x) & LaLigaSoccerTeam(x))", "(La LigaSoccer(RealMadrid) & La LigaSoccer(Barcelona))", "(SoccerTeam(realMadrid) & SoccerTeam(Barcelona))", "Real Madrid & Barcelona SoccerTeams(x)", "All x.(LaLigaSoccerTeam(x) -> (RealMadrid(x) | Barcelona(x)))", "Real Madrid & Barcelona Football Teams (La Liga Soccer)", "all x.((RealMadrid(x) & Barcelona(x)) -> LaLigaSoccerTeam(x))"]}
{"id": "folio_train_63", "nl": "In La Liga 2021-2022, Real Madrid recieves 86 points and Barcelon recieves 73 points.", "fol": "HasMorePointsThan(RealMadrid,Barcelona)", "prediction": ["(all x.(LaLiga(x) -> Receives86Points(x)) & (Barcelon(x) -> Receives73Points(x)))", "(all x y.((LaLiga(x) & RealMadrid(y)) -> Receives86Points(y,x)) & ((Barcelon(y) & Receives73Points(y,x)) -> Receives73Points(y,x)))", "all x y.((LaLiga(x) & RealMadrid(y) & Barcelon(y)) -> (Receives86Points(y,x) & Receives73Points(y,x)))", "(all x.(LaLiga(x) -> RealMadrid(x)) & (Barcelon(x) -> Barcelon(x)))", "(LaLiga(LaLiga) & RealMadrid(LaLiga) & Barcelon(LaLiga) & Receives86Points(LaLiga) & Receives73Points(Barcelon))", "(all x y.((LaLiga(x) & RealMadrid(y)) -> ReceivesPoints(y,86)) & ((Barcelon(y) & ReceivesPoints(y,73)) -> ReceivesPoints(y,73)))", "(La Liga(La Liga) & RealMadrid(La Liga) & Barcelon(La Liga))", "all x y z.((LaLiga(x) & RealMadrid(y) & Barcelon(z)) -> (Receives86Points(y,x) | Receives73Points(z,x)))", "(all x y.((La Liga(x) & RealMadrid(y)) -> Receives86Points(y,x)) & ((Barcelon(y) & Receives73Points(y,x)) -> Receives73Points(y,x)))", "(all x.(LaLiga(x) -> Receives(x,86)) & (Barcelon(x) -> Receives(x,73)))", "all x y.((LaLiga(x) & RealMadrid(y) & Barcelon(z)) -> (Receives86Points(y,x) | Receives73Points(z,x)))", "all x y.((La Liga(x) & RealMadrid(y) & Barcelon(y)) -> (Receives86Points(y,x) & Receives73Points(y,x)))", "All x.(LaLiga(x) -> (Receives86Points(x) | Receives73Points(x)))", "(all x.(LaLiga(x) -> RealMadrid(x)) & (Barcelon(x) -> Barcelon(x)))", "all x y.((LaLiga(x) & RealMadrid(y) & Barcelon(y)) -> (Receives86Points(y,x) & Receives73Points(y,x)))", "(all x.(LaLiga(x) -> Receives86Points(x)) & (Barcelon(x) -> Receives73Points(x)))"]}
{"id": "folio_train_64", "nl": "In La Liga 2021-2022, Real Madrid and Barcelona both recieve 3 points from the games between them.", "fol": "(-PointsInGameBetween(RealMadrid,Barcelona) & -PointsInGameBetween(Barcelona,RealMadrid))", "prediction": ["(all x.(LaLiga(x) -> RealMadrid(x)) & (Barcelona(x) -> RealMadrid(x)))", "(RealMadrid(RealMadrid) & Barcelona(Barcelona) & LaLiga2021-2022(Receives3Points(Receives3Points))", "all x y.((LaLiga(x) & RealMadrid(y) & Barcelona(y)) -> Receives3Points(y,x))", "all x y z.((LaLiga(x) & RealMadrid(y) & Barcelona(z)) -> (Receives3Points(y,x) & InLaLiga(y,x)))", "all x.(LaLiga(x) -> (RealMadrid(x) | Barcelona(x)))", "(Railway(Rosa) & Barcelona(Barcelona) & LaLiga2021-2022(Rosa,Rosa,Barcelona))", "(all x.(LaLiga(x) -> RealMadrid(x)) & all y.(Barcelona(y) -> ReceivesPoints(y,3)))", "(LaLiga2021-2022:Receives3Points(RealMadrid,3) & Receives3Points(Barcelona,2))", "In La Liga 2021-2022, Real Madrid and Barcelona both recieve 3 points from games.", "(La Liga(La Liga) & RealMadrid(La Liga) & Barcelona(La Liga))", "all x y.((LaLiga(x) & RealMadrid(y) & Barcelona(y)) -> ReceivesPoints(y,x))", "(RealMadrid(RealMadrid) & Barcelona(Barcelona))", "All x.((RealMadrid(x) & Barcelona(x)) -> Receives3PointsInLaLiga(x))", "(RealMadridAndBarcelonaReceive3Points(LaLiga2021-2022))", "all x y z.((LaLiga(x) & RealMadrid(y) & Barcelona(z)) -> ReceivesPoints(y,x,z))", "all x y.((LaLiga(x) & RealMadrid(y) & Barcelona(y)) -> Receives3Points(y,x))"]}
{"id": "folio_train_65", "nl": "In La Liga 2021-2022, Real Madrid ranks higher than Barcelona.", "fol": "RanksHigherThan(RealMadrid,Barcelona)", "prediction": ["(RanksHigherInLaLiga(RealMadrid,LaLiga2021) & HigherInLaLiga(RealMadrid,LaLiga2022))", "all x y.((LaLiga(x) & RealMadrid(y)) -> (RanksHigher(y,x) & Barcelona(y)))", "In La Liga (Location(RealMadrid,Location) & LaLiga(LaLocation(LaLocation) & LaLocation(LaLocation) & LaLocation(LaLocation) & LaLocation(LaLocation) & LaLocation(LaLocation) & LaLocation(LaLocation) & LaLocation(RealMadrag))", "In La Liga 2021-2022, Real Madrid ranks higher than Barcelona.", "(RanksHigher(RealMadrid,LaLiga) & Higher(RealMadrid,LaLiga))", "(RanksHigherInLaLiga(RealMadrid,LaLiga) & HigherInLaLiga(RealMadrid,LaLiga))", "all x y.((La Liga(x) & RealMadrid(y) & Barcelona(y)) -> HigherRank(y,x))", "All x y.((LaLiga(x) & RealMadrid(y)) -> HigherRank(y,x))", "(RanksHigherInLaLiga(RealMadrid,LaLiga,2021) & HigherInLaLiga(RealMadrid,LaLiga,2022))", "(RanksHigherInLa Liga(RealMadrid,LaLiga) & HigherInLaLiga(RealMadrid,LaLiga))", "All x.(LaLiga(x) -> (RealMadrid(x) & Higher(x,Bay)))", "all x y.((LaLiga(x) & RealMadrid(y)) -> (RanksHigherInLaLiga(y,x) & HigherInLaLiga(y,x)))", "In La Liga 2021-2022, Real Madrid ranks higher than Barcelona.", "(RanksHigher(RealMadrid,LaLiga2021) & Higher(RealMadrid,LaLiga2022))", "(RanksHigher(RealMadrid,LaLiga) & Higher(RealMadrid,LaLiga))", "All x.(LaLiga(x) -> (RealMadrid(x) | Barcelona(x)))"]}
{"id": "folio_train_66", "nl": "In La Liga 2021-2022, Barcelona ranks higher than Real Madrid.", "fol": "RanksHigherThan(Barcelona,RealMadrid)", "prediction": ["all x y.((LaLiga(x) & RealMadrid(y)) -> HigherRank(x,y))", "(RanksHigherInLaLiga(Barcelona,LaLiga) & HigherInLaLiga(Barcelona,LaLiga))", "In La Liga 2021-2022, Barcelona ranks higher than Real Madrid.", "(RanksHigher(Barcelona,LaLiga) & Higher(Barcelona,RealMadrid))", "All x.(LaLiga(x) -> (RanksHigherInLaLiga(x,2021) & HigherInLaLiga(x,222)))", "(RanksHigherInLaLiga(Barcelona,LaLiga,2021) & HigherInLaLiga(Barcelona,LaLiga,2022))", "all x y.((La Liga(x) & RealMadrid(y)) -> HigherRank(x,y))", "All x.((LaLiga(x) & Barcelona(x) & RealMadrid(x)) -> HigherRank(x,y))", "(RanksHigherInLaLiga(Baylor(Baylor) & HigherInLa Liga(Baylor(Baylor))", "In La Liga (Location2021-2022) Barcelona ranksHigherThanRealMadrid(Barcelona)", "all x y.((LaLiga(x) & RealMadrid(y)) -> HigherRank(x,y))", "In La Liga 2021-2022, Barcelona ranks higher than Real Madrid.", "(RanksHigherInLa Liga(Barcelona,La Liga) & HigherInLa Liga(Barcelona,La Liga))", "(RanksHigherInLa Liga(Barcelona,LaLiga,2021) & HigherInLaLiga(Barcelona,LaLiga,2022))", "all x y.((LaLiga(x) & RealMadrid(y)) -> (RanksHigher(x,y) & InLaLiga(x,y)))", "(RanksHigher(Barcelona,LaLiga) & Higher(Barcelona,RealMadrid))"]}
{"id": "folio_train_67", "nl": "Lawton Park is a neighbourhood in Seattle. ", "fol": "IsNeighbourhoodOf(LawtonPark,Seattle)", "prediction": ["LawtonPark(LawtonPark) -> NeighborhoodInSeattle(LawtonPark))", "(Neighborhood(LawtonPark) & InSeattle(LawtonPark))", "LawtonPark(nearbySeattle)", "all x.(LawtonPark(x) -> NeighborhoodInSeattle(x))", "LawtonPark is a neighbourhood in Seattle.", "(Neighborhood(LawtonPark,Seattle) & LocatedIn(LawtonPark,Seattle))", "(Neighbourhood(LawtonPark) & InSeattle(LawtonPark))", "(Neighborhood(LawtonPark) & InSeattle(LawtonPark))", "(Neighborhood(LawtonPark,Seattle))", "LawtonPark (NeighborhoodInSeattle)", "all x.(LawtonPark(x) -> NeighborhoodInSeattle(x))", "LawtonPark(nearSeattle)", "LawtonPark is a neighbourhood in Seattle.", "All x.(LawtonPark(x) -> NeighborhoodInSeattle(x))", "all x.(LawtonPark(x) -> NeighborhoodInSeattle(x))", "LawtonPark is a neighbourhood in Seattle."]}
{"id": "folio_train_68", "nl": "All citizens of Lawton Park use the zip code 98199. ", "fol": "all x.(IsCitizenOf(x,LawtonPark) -> UsesZipCode(x,Number98199))", "prediction": ["all x.(Citizen(x) -> UsesZipCode(x,98199))", "all x.((Citizen(x) & LawtonPark(x)) -> UsesZipCode(x,98199))", "all x y.((Citizen(x) & LawtonPark(y)) -> UsesZipCode(x,y))", "all x.(Citizen(x) -> UsesZipCode(x,98199))", "all x y.((Citizen(x) & LawtonPark(y) & UsesZipCode(x,y)) -> UsesZipCode(x,y))", "all x y.((Citizen(x) & City(y) & LawtonPark(y)) -> UsesZipCode(x,y))", "(all x.(Citizen(x) -> UsesZipCode(x,98199)))", "all x.(CitizenOfLawtonPark(x) -> UsesZipCode(x,98199))", "all x.((Citizen(x) & LawtonPark(x)) -> UsesZipCode98199(x))", "all x.(Citizen(x) -> UsesZipCode(x,98199))", "all x y.((Citizen(x) & Citizen(y) & LawtonPark(y)) -> UsesZipCode(x,y))", "all x.(Citizen(x) -> UsesZIPCode(x,98199))", "(all x.(Citizen(x) -> UsesZipCode(x,98199))", "all x.(Citizen(x) & LawtonPark(x) -> UsesZipCode(x,98199))", "all x.((Citizen(x) & LawtonPark(x)) -> UsesZipCode(x,98199))", "All x.(Citizen(x) -> UsesZipCode(x,98199))"]}
{"id": "folio_train_69", "nl": "Tom is a citizen of Lawton Park.", "fol": "IsCitizenOf(Tom,LawtonPark)", "prediction": ["(CitizenOfLawtonPark(Tom))", "Tom is citizenOfLawtonPark(Tom)", "all x.(Tom(x) -> CitizenOfLawtonPark(x))", "(Citizen(Tom) & CitizenOfLawtonPark(Tom))", "all x.((Tom(x) & CitizenOfLawtonPark(x)) -> CitizenOfLawtonPark(x))", "Tom LawtonParkCitizen(Tom)", "Tom is a citizen of LawtonPark.", "Tom is CitizenOfLawtonPark(Tom)", "(Citizen(Tom,LawtonPark) & CitizenOf(Tom,LawtonPark))", "Tom is a CitizenOfLawtonPark(Tom)", "all x.(Tom(x) -> CitizenOfLawtonPark(x))", "(CitizenOfLawtonPark(Tom))", "(CitizenOfLawtonPark(Tom) & CitizenOfLawtonPark(Tom))", "Tom is citizenOfLawtonPark(Tom)", "Tom LawtonParkCitizen(Tom)", "(CitizenOfLawtonPark(Tom) & CitizensOfLawtonPark(Tom))"]}
{"id": "folio_train_70", "nl": "Daniel uses the zip code 98199. ", "fol": "UsesZipCode(Daniel,Number98199)", "prediction": ["all x.((Daniel(x) & ZipCode(x,98199)) -> Uses(x,98199))", "(UsesZIPCode(Daniel,98199))", "all x.(Daniel(x) -> UsesZipCode(x,98199))", "(UsesZipCode(Daniel,98199))", "Daniel uses zipcode98199.", "-UsesZipCode(Daniel,98199)", "all x.((Daniel(x) & ZipCode(x,98199)) -> Uses(x,98199))", "all x.(Daniel(x) -> UsesZIPCode(x,98199))", "-UsesZIPCode(Dan,98199)", "(UsesZIPCode(Daniel,98199))", "Daniel uses zipcode98199.", "(UsesZipCode(Daniel,98199))", "Daniel uses zipcode 98199.", "Daniel uses zipCode98199.", "(UsesZIPCode(Daniel,98199))", "(UsesZipCode(Daniel,98199))"]}
{"id": "folio_train_71", "nl": "Tom uses the zip code 98199.", "fol": "UsesZipCode(Tom,Number98199)", "prediction": ["all x.((Tom(x) & ZipCode(x,98199)) -> Uses(x,98199))", "(UsesZIPCode(Tom,98199))", "Tom uses zipcode98199.", "all x.(Tom(x) -> UsesZipCode(x,98199))", "(UsesZipCode(Tom,98199))", "all x y.((Tom(x) & ZipCode(y) & 98199(y)) -> Uses(x,y))", "all x.((Tom(x) & ZipCode(x,98199)) -> Uses(x,98199))", "all x.((Tom(x) & ZipCode98199(x)) -> Uses(x,y))", "Tom uses zipcode98199.", "(UsesZIPCode(Tom,98199))", "Tom uses zipCode98199(Tom)", "(UsesZipCode(Tom,98199))", "all x.(Tom(x) -> UsesZipCode(x,98199))", "Tom uses zipcode98199.", "(UsesZIPCode(Tom,98199))", "Tom uses ZipCode98199."]}
{"id": "folio_train_72", "nl": "Tom doesn't use the zip code 98199.", "fol": "-UsesZipCode(Tom,Number98199)", "prediction": ["all x.((Tom(x) & -ZipCode(x,98199)) -> -UsesZipCode(x,98199))", "(-UsesZipCode(Tom,98199))", "all x.((Tom(x) & -UsesZipCode(x,98199)) -> -UsesZipCode(x,98199))", "Tom doesn't use zipcode98199.", "(-UsesZipCode(Tom) & ZipCode(Tom))", "-(UsesZipCode(Tom) & ZipCode(Tom,98199))", "all x.((Tom(x) & ZipCode(x,98199)) -> -Uses(x,98199))", "(-UsesZIPCode(Tom,98199))", "-UsesZipCode98199(Tom)", "Tom doesn't use zipcode98199.", "all x.((Tom(x) & ZipCode(x,98199)) -> -Uses(x,98199))", "(-usesZIPCode(Tom,98199))", "-(UsesZipCode(Tom,98199))", "-UsesZipCode98199(Tom)", "(-usesZIPCode(Tom,98199))", "(-UsesZipCode98199(Tom))"]}
{"id": "folio_train_73", "nl": "Tom is a citizen of Washington.", "fol": "IsCitizenOf(Tom,Washington)", "prediction": ["(CitizenOfWashington(Tom) & CitizensOfWashington(Tom))", "all x.((Tom(x) & CitizenOfWashington(x)) -> CitizenOfWashington(x))", "Tom is a citizen of Washington.", "all x.(Tom(x) -> CitizenOfWashington(x))", "Tom is citizenOfWashington.", "(CitizenOfWashington(Tom) & CitizenOfWashington(Tom))", "(CitizenOf(Tom,Washington) & CitizenOf(Tom,Washington))", "all x.((Tom(x) & CitizensOfWashington(x)) -> CitizenOfWashington(x))", "Tom is a citizen of Washington.", "Tom is citizenOfWashington.", "(CitizenOfWashington(Tom) & CitizensOfWashington(Tom))", "(CitizenOfWashington(Tom) & -CitizenOfWashington(Tom))", "Tom is a citizen of Washington.", "Tom is citizenOfWashington.", "Tom is a citizen of Washington.", "(CitizenOfWashington(Tom)"]}
{"id": "folio_train_74", "nl": "Daniel is a citizen of Lawton Park.", "fol": "IsCitizenOf(Daniel,LawtonPark)", "prediction": ["(CitizenOfLawtonPark(Daniel)", "(Citizen(Daniel) & CitizenOfLawtonPark(Daniel))", "all x.((Daniel(x) & CitizenOfLawtonPark(x)) -> CitizenOfLawtonPark(x))", "Daniel is citizenOfLawtonPark(d)", "Daniel LawtonParkCitizen(Daniel)", "Daniel is a citizen of LawtonPark.", "all x.(CitizenOfLawtonPark(x) -> Daniel(x))", "all x.(Daniel(x) -> CitizenOfLawtonPark(x))", "Daniel is a CitizenOfLawtonPark( Daniel)", "all x.((Daniel(x) & CitizenOfLawtonPark(x)) -> CitizenOfLawtonPark(x))", "(CitizenOfLawtonPark(Daniel)", "Daniel is citizenOfLawtonPark(Daniel)", "(Citizen(Daniel) & CitizensOfLawtonPark(Daniel))", "Daniel LawtonParkCitizen(Daniel)", "(CitizenOfLawtonPark(Daniel)", "(CitizenOfLawtonPark(Daniel)"]}
{"id": "folio_train_75", "nl": "If a legislator is found guilty of stealing government funds, they will be suspended from office.", "fol": "all x.((LegislatorStatus(x) & GuiltyOfStealingFunds(x)) -> SuspendedFromOffice(x))", "prediction": ["all x.((Lawmaker(x) & FoundCaughtOfStolenGovernmentFunds(x)) -> SuspendedFromOffice(x))", "all x.((Legislator(x) & FoundCaughtOfStolenGovernmentFunds(x)) -> SuspendedFromOffice(x))", "all x.((Lawmaker(x) & FoundCaughtOfStolenGovernmentFunds(x)) -> SuspendedFromOffice(x))", "all x y.((Lawmaker(x) & FoundCaughtOfStolenGovernmentFunds(x)) -> SuspendedFromOffice(x))", "all x.((Lawmaker(x) & FoundCommittedOfStoppingGovernmentFunds(x)) -> SuspendedFromOffice(x))", "all x y.((Lawmaker(x) & FoundCaughtOffending(x,y) & GovernmentFunds(y)) -> SuspendedFromOffice(x))", "all x.(StopsGovernmentFunds(x) -> SuspendedFromOffice(x))", "all x.((Legislator(x) & FoundCommittedOfStoppingGovernmentFunds(x)) -> SuspendedFromOffice(x))", "all x y.((Legislator(x) & FoundCaughtOfStolenGovernmentFunds(x)) -> SuspendedFromOffice(x))", "all x.(StolenFunds(x) -> SuspendedFromOffice(x))", "all x y.((Leader(x) & FoundToStolen(x,y) & GovernmentFunds(y)) -> SuspendedFromOffice(x))", "all x y.((Lawmaker(x) & FoundConviciousOfStolenGovernmentFunds(x)) -> SuspendedFromOffice(x))", "all x y.((Lawmaker(x) & FoundCommittedOfStolenGovernmentFunds(x)) -> SuspendedFromOffice(x,y))", "all x.((Leader(x) & FoundCaughtOfStolenGovernmentFunds(x)) -> SuspendedFromOffice(x))", "all x.((Lawmaker(x) & FoundCompulsibleOfStoppingGovernmentFunds(x)) -> SuspendedFromOffice(x))", "all x.(StopsGovernmentFunds(x) -> SuspendedFromOffice(x))"]}
{"id": "folio_train_76", "nl": "Tiffany T. Alston was a legislator in Maryland's House of Delegates from 2011 to 2013.", "fol": "LegislatorStatus(TiffanyTAlston)", "prediction": ["all x y.((TiffanyT.Alston(x) & HouseOfDelegates(y)) -> LegislatorIn(x,y))", "(LegislatorInDelegates(TiffanyT.Alston,Maryland) & From2011To2013(TiffanyT.Alston,Maryland))", "all x.((TiffanyT.Alston(x) & LegislatorInDelegates(x,Maryland)) -> (2011-2013)))", "all x y z.((TiffanyT.Alston(x) & HouseOfDelegates(y) & HouseOfDelegates(z)) -> LegislatorIn(x,y,z))", "Tiffany T. Alston was a Maryland HouseOfDelegates Legislator(TiffanyT.Alston,2011-2013)", "(LeaderInDelegates(TiffanyT.Alston,Maryland) & From2011To2013(TiffanyT.Alston,Maryland))", "Tiffany T. Alston was a Maryland Legislator from 2011 to 2013.", "all x y.((TiffanyT.Alston(x) & HouseOfDelegates(y)) -> Legislator(x,y))", "(LegislatorInDelegates(TiffanyT.Alston,2011,2013))", "all x.((TiffanyT.Alston(x) & LegislatorInMarylandHouseOfDelegates(x)) -> (2011-2013)))", "all x.((TiffanyT.Alston(x) & MarylandHouseOfDelegates(x)) -> Legislator(x))", "(Legislator(TiffanyT.Alston,Maryland) & HouseOfDelegates(TiffanyT.Alston,2011))", "all x.((TiffanyT.Alston,Maryland) & HouseOfDelegates(Md.)) -> Legislator(x,2011,2013))", "all x y.((TiffanyT.Alston(x) & MarylandHouseOfDelegates(y)) -> Legislator(x,y))", "Tiffany T. Alston was a Maryland legislator from 2011 to 2013.", "(LeaderInDelegates(TiffanyT.Alston,Maryland) & From2011To2013.)"]}
{"id": "folio_train_77", "nl": "Tiffany T. Alston was found guilty of stealing government funds in 2012.", "fol": "GuiltyOfStealingFunds(TiffanyTAlston)", "prediction": ["(StolenByTiffanyT.Alston(TiffanyT.Alston) & GovernmentFunds(TiffanyT.Alston))", "all x.((TiffanyT.Alston(x) & FoundCaughtStolenFunds(x)) -> StolenGovernmentFunds(x))", "Tiffany T. Alston was found guilty of stealinggovernmentFundsIn2012.", "all x y.((TiffanyT.Alston(x) & GovernmentFunds(y)) -> FoundCaughtStolen(x,y))", "(StolenFunds(TiffanyT.Alston) & FoundCaughtOfStolenFunds(TiffanyT.Alston,2012))", "(StoppingGovernmentFunds(TiffanyT.Alston) & FoundCaught(TiffanyT.Alston))", "all x.((TiffanyT.Alston(x) & FoundCommittedOfStolenGovernmentFunds(x)) -> FoundCommittedOfStolenGovernmentFunds(x))", "All x.(TiffanyT.Alston(x) -> FoundCaughtStolenFunds(x))", "(FatherT.Alston(TiffanyT.Alston) & FoundCaughtOfStolenGovernmentFunds(TiffanyT.Alston))", "(StolenByTiffanyT.Alston(TiffanyT.Alston) & GovernmentFunds(TiffanyT.Alston))", "all x y.((TiffanyT.Alston(x) & GovernmentFunds(y)) -> FoundCommittedOfStolen(x,y))", "Tiffany T. Alston was found guilty of stealinggovernmentFundsIn2012.", "all x.((TiffanyT.Alston(x) & FoundCaughtStolenFunds(x)) -> StoppedIn2012(x))", "Tiffany T. Alston was found guilty of stealinggovernmentFundsIn2012.", "(StolenByTiffanyT.Alston(TiffanyT.Alston) & GovernmentFunds(TiffanyT.Alston))", "Tiffany T. Alston was found guilty of stealinggovernmentFundsIn2012."]}
{"id": "folio_train_78", "nl": "Tiffany T. Alston was suspended from the Maryland House of Delegates.", "fol": "SuspendedFromOffice(TiffanyTAlston)", "prediction": ["All x.((TiffanyT.Alston(x) & MarylandHouseOfDelegates(x)) -> Suspended(x))", "all x y.((TiffanyT.Alston(x) & MarylandHouseOfDelegates(y)) -> Suspended(x,y))", "Tiffany T. Alston was suspended from Maryland HouseOfDelegates.", "All x.(TiffanyT.Alston(x) -> SuspendedFromMdHouseOfDelegates(x))", "(SuspendedFromDelegates(TiffanyT.Alston,Maryland))", "(SuspendedFromMdHouseOfDelegates(TiffanyT.Alston))", "TiffanyT.Alston was suspended from MarylandHouseOfDelegates.", "TiffanyT.Alston was suspendedFromMdHouseOfDelegates(TiffanyT.Alston)", "(Suspension(TiffanyT.Alston) & MarylandHouseOfDelegates(TiffanyT.Alston))", "Tiffany T. Alston was suspended from Maryland HouseOfDelegates.", "all x y.((TiffanyT.Alston(x) & MarylandHouseOfDelegates(y)) -> Suspended(x,y))", "All x.((TiffanyT.Alston(x) & MarylandHouseOfDelegates(x)) -> Suspended(x))", "Tiffany T. Alston was suspended from the Maryland HouseOfDelegates.", "(SuspendedFromMarylandHouseOfDelegates(TiffanyT.Alston))", "all x y.((TiffanyT.Alston(x) & MarylandHouseOfDelegates(y)) -> Suspended(x,y))", "Tiffany T. Alston was suspended from Maryland HouseOfDelegates."]}
{"id": "folio_train_79", "nl": "Tiffany T. Alston was not suspended from the Maryland House of Delegates.", "fol": "-SuspendedFromOffice(TiffanyTAlston)", "prediction": ["All x.((TiffanyT.Alston(x) & MarylandHouseOfDelegates(x)) -> -Suspended(x))", "Tiffany T. Alston was not suspended from Maryland HouseOfDelegates.", "TiffanyT.Alston was notSuspendedFromMdHouseOfDelegates(TiffanyT.Alston)", "All x.(TiffanyT.Alston(x) -> -SuspendedFromDelegates(x,Maryland))", "(-SuspendedFromMdHouseOfDelegates(TiffanyT.Alston))", "Tiffany T. Alston -SuspendedFromMarylandHouseOfDelegates(TiffanyT.Alston)", "(-SuspendedFromDelegates(TiffanyT.Alston))", "all x y.((TiffanyT.Alston(x) & MarylandHouseOfDelegates(y)) -> -Suspended(x,y))", "all x.((TiffanyT.Alston(x) & MarylandHouseOfDelegates(x)) -> -Suspended(x))", "Tiffany T. Alston was not suspended from Maryland HouseOfDelegates.", "All x.(TiffanyT.Alston(x) -> -SuspendedFromMarylandHouseOfDelegates(x))", "-Suspension(TiffanyT.Alston,Maryland)", "(-SuspendedFromMarylandHouseOfDelegates(TiffanyT.Alston))", "all x.((TiffanyT.Alston(x) & MarylandHouseOfDelegates(x)) -> -Suspended(x))", "(-SuspendedFromMdHouseOfDelegates(TiffanyT.Alston))", "Tiffany T. Alston was not suspended from Maryland HouseOfDelegates."]}
{"id": "folio_train_80", "nl": "Tiffany T. Alston went to prison for stealing government funds.", "fol": "WentToPrison(TiffanyTAlston)", "prediction": ["all x.((TiffanyT.Alston(x) & StolenGovernmentFunds(x)) -> GoesToPenitentiary(x))", "all x y.((TiffanyT.Alston(x) & Prison(y)) -> StolenGovernmentFunds(x,y))", "(StolenFunds(TiffanyT.Alston) -> GoesToPenitentiary(TiffanyT.Alston))", "Tiffany T. Alston went to prison for stealinggovernmentFunds.", "TiffanyT.Alston wentToPenitentiaryForStolenGovernmentFunds(TiffanyT.Alston)", "all x.(TiffanyT.Alston(x) -> (StoleGovernmentFunds(x) & GoesToPenitentiary(x)))", "Tiffany T. Alston snatchedgovernmentFunds(tiffanyt@alston.com)", "all x.((TiffanyT.Alston(x) & StealingGovernmentFunds(x)) -> GoesToPenitentiary(x))", "Tiffany T. Alston went to prison for stealinggovernmentFunds(TiffanyT.Alston,Storage)", "all x y.((TiffanyT.Alston(x) & Prison(y)) -> StolenGovernmentFunds(x,y))", "(StolenForStolenGovernmentFunds(TiffanyT.Alston))", "all x.(TiffanyT.Alston(x) -> (StoleGovernmentFunds(x) & ToPenitentiary(x)))", "All x.((TiffanyT.Alston(x) & StrictFunds(x)) -> GoesToPenitentiary(x))", "All x.(TiffanyT.Alston(x) -> StolenGovernmentFunds(x))", "all x y.((TiffanyT.Alston(x) & Prison(y)) -> StoleGovernmentFunds(x,y))", "All x.(TiffanyT.Alston(x) -> StolenGovernmentFunds(x))"]}
{"id": "folio_train_81", "nl": "Some fish may sting.", "fol": "exists x y.(IsFish(x) -> Sting(x,y))", "prediction": ["exists x.(Fish(x) & Sting(x))", "exists x.(Fish(x) & Sting(x))", "exists x.(Fish(x) & Stings(x))", "exists x.(Fish(x) & Sting(x))", "exists x.(Fish(x) & MaySting(x))", "exists x.(Fish(x) & Stings(x))", "exists x y.(Fish(x) & Fish(y) & Sting(x))", "exists x.(Fish(x) & Sting(x))", "exists x.(Fish(x) & MaySting(x))", "exists x.(Fish(x) & (Sting(x) | Sting(x)))", "exists x.(Fish(x) & PossiblySting(x))", "exists x.(Fish(x) & Sting(x))", "exists x.(Fish(x) & MaySting(x))", "exists x.(Fish(x) & -Sting(x))", "exists x.(Fish(x) & Stings(x))", "exists x.(Fish(x) & CanSting(x))"]}
{"id": "folio_train_82", "nl": "Stonefish is a fish.", "fol": "IsFish(Stonefish)", "prediction": ["all x.(Stonefish(x) -> Fish(x))", "(Fish(stonefish) & Fish(stonefish))", "all x.(Stonefish(x) -> Fish(x))", "all x y.((Stonefish(x) & Fish(y)) -> Fish(x))", "(Fish(stonefish) & Fish(stonefish))", "all x.(Stonefish(x) -> Fish(x))", "(Fish(stonefish) & Fish(stonefish))", "all x y.((Stonefish(x) & Fish(y)) -> Fish(x))", "all x.(Stonefish(x) -> Fish(x))", "all x.(Stonefish(x) -> Fish(x))", "all x.(Stonefish(x) -> Fish(x))", "all x.(Stonefish(x) -> Fish(x))", "all x.(Stonefish(x) -> Fish(x))", "All x.(Stonefish(x) -> Fish(x))", "all x.(Stonefish(x) -> Fish(x))", "All x.(Stonefish(x) -> Fish(x))"]}
{"id": "folio_train_83", "nl": "It stings to step on a stonefish.", "fol": "all x.(StepOnFish(Stonefish,x) -> Sting(Stonefish,x))", "prediction": ["all x.(StepOnStonefish(x) -> Stings(x))", "all x y.((Stonefish(x) & Stonefish(y)) -> Stings(x,y))", "all x y.((StepOnStonefish(x) & Stonefish(y)) -> Stings(x,y))", "all x.(StingsOnStonefish(x) -> StepOnStonefish(x))", "(StepOnStonefish(stins) & StingsOnStonefish(stinkers))", "all x.(StepOnStonefish(x) -> Stings(x))", "all x y.((StepOnStonefish(x) & Stonefish(y)) -> Stings(x))", "exists x.(Sting(x) & Stonefish(x))", "all x.(SteepOnStonefish(x) -> Stings(x))", "all x.(StepOnStonefish(x) -> Stings(x))", "all x y.((StepOnStonefish(x) & Stonefish(y)) -> Stings(x,y))", "all x y.((Stonefish(x) & Stonefish(y)) -> StingsOn(x,y))", "(StingsToStepOnStonefish(Stonefish))", "exists x.(Stings(x) & Stonefish(x))", "exists x.(Stings(x) & StepOnStonefish(x))", "all x y.((StepOnStonefish(x) & Stonefish(y)) -> Stings(x,y))"]}
{"id": "folio_train_84", "nl": "Stonefish stings cause death if not treated.", "fol": "all x.((Sting(Stonefish,x) & -IsTreated(x)) -> CausesDeath(x))", "prediction": ["all x.((Stonefish(x) & -Treated(x)) -> CausesDeath(x))", "all x y.((Stonefish(x) & Sting(y) & -Treated(x)) -> CausesDeath(x,y))", "all x.((Stonefish(x) & Stings(x) & -Treated(x)) -> CausesDeath(x))", "all x.((Stonefish(x) & -Treated(x)) -> CausesDeath(x))", "all x.(Stonefish(x) -> (CausesDeath(x) & -Treated(x)))", "(all x.((Stonefish(x) & -Treated(x)) -> CausesDeath(x)))", "all x.((Stonefish(x) & -Treatment(x)) -> CausesDeath(x))", "all x y.((Stonefish(x) & Sting(y) & -Treated(y)) -> CausesDeath(x,y))", "all x y.((Stonefish(x) & Stings(y) & -Treated(x)) -> CausesDeath(x,y))", "all x.((Stonefish(x) & Stings(x) & -Treated(x)) -> CausesDeath(x))", "all x.(Stonefish(x) -> (StingsCauseDeath(x) & -Treated(x)))", "all x.(Stonefish(x) -> CausesDeath(x))", "all x y.((Stonefish(x) & Sting(y) & -Treated(x,y)) -> CausesDeath(x,y))", "all x y.((Stonefish(x) & Stings(y) & -Treated(x,y)) -> CausesDeath(x,y))", "all x.((Stonefish(x) & Stings(x) & -Treated(x)) -> CausesDeath(x))", "All x.(Stonefish(x) -> CausesDeath(x))"]}
{"id": "folio_train_85", "nl": "To treat stonefish stings, apply heat to the affected area or use an antivenom.", "fol": "all x.((Sting(Stonefish,x) & (ApplyHeatToArea(x) | UseAntivenom(x))) -> IsTreated(x))", "prediction": ["all x.((StonefishStings(x) & (AppliesHeat(x) | UsesAntivenom(x))) -> Treats(x,StonefishStings))", "all x.(TreatStonefishStings(x) -> (AppliesHeatToAffectedArea(x) | UsesAtivenom(x)))", "all x.((TreatStonefishStings(x) & (AppliesHeat(x) | UsesAntivenom(x))) -> TreatsStonefishStings(x))", "all x y.((StonefishSting(x) & Stonefish(y)) -> (AppliesHeatToAffectedArea(x,y) | UsesAtivenom(x,y)))", "all x.((StonefishSting(x) & (AppliesHeat(x) | UsesAntivenom(x))) -> Treats(x,StonefishStings))", "(TreatStonefishStings(stonefish) & (ApplyHeatToAffectedArea(stonefish) | UseAntivenom(stonefish)))", "all x y.((StonefishSting(x) & StonefishSting(y)) -> (AppliesHeat(x,y) | UsesAntivenom(x,y)))", "all x y z.((StonefishStings(x) & Heat(y) & AffectedArea(z)) -> (Applies(y,z) | UsesAtivenom(y,z)))", "all x.((TreatsStonefishStings(x)) -> (AppliesHeatToAffectedArea(x) | UsesAtivenom(x)))", "all x.(TreatsStonefishStings(x) -> (AppliesHeatToAffectedArea(x) | UsesAtivenom(x)))", "all x y.((TreatsStonefishStings(x) & Stonefish(y)) -> (AppliesHeatToAffectedArea(x,y) | UsesAtivenom(x,y)))", "all x y.((StonefishSting(x) & (ApplicationOfHeat(y) | UseAtivenom(y))) -> Treats(x,y))", "(TreatStonefishStings(stonefish) -> (AppliesHeatToAffectedArea(stonefish) | UsesAntivenom(stonefish)))", "(all x.(StonefishSting(x) -> Treat(x,s,y)))", "all x.(TreatsStonefishStings(x) -> (AppliesHeatToAffectedArea(x) | UsesAntivenom(x)))", "all x.(StonefishStings(x) -> (ApplyHeat(x) | UseAntivenom(x)))"]}
{"id": "folio_train_86", "nl": "If you step on a stonefish and don\u2019t use an antivenom, it will cause death.", "fol": "all x.((StepOnFish(Stonefish,x) & -UseAntivenom(x)) -> CausesDeath(x))", "prediction": ["all x.((StepOnStonefish(x) & -UsesAtivenom(x)) -> CausesDeath(x))", "all x y.((StepOnStonefish(x) & Stonefish(y) & -UsesAtivenom(x)) -> CausesDeath(x,y))", "all x.((StepOnStonefish(x) & -UsesAntivenom(x)) -> CausesDeath(x))", "all x.(StepOnStonefish(x) & -UsesAtivenom(x)) -> CausesDeath(x))", "all x y z.((StepOnStonefish(x) & Stonefish(y) & Stonefish(z) & -UsesAtivenom(x,y)) -> CausesDeath(x,z))", "all x y.((StepOnStonefish(x) & Stonefish(y) & -UsesAntivenom(x,y)) -> CausesDeath(x,y))", "all x y.((StepOn(x,y) & Stonefish(y) & -UsesAtivenom(x)) -> CausesDeath(x))", "all x.((StepOnStonefish(x) & -UsesAtivenom(x)) -> CausesDeath(x))", "all x y.((StepOnStonefish(x) & Stonefish(y) & -UsesAtivenom(x,y)) -> CausesDeath(x,y))", "all x.((Stonefish(x) & -UsesAtivenom(x)) -> CausesDeath(x))", "all x.((StepOnStonefish(x) & -UsesAntivenom(x)) -> CausesDeath(x))", "all x.((StepOnStonefish(x) & -UseAntivenom(x)) -> CausesDeath(x))", "all x.(StepOnStonefishAndDon\u2019tUseAntivenom(x) -> CausesDeath(x))", "all x.(StepOnStonefish(x) & -UsesAntivenom(x)) -> CausesDeath(x))", "all x y.((StepOnStonefish(x) & Stonefish(y) & -UsesAntivenom(x,y)) -> CausesDeath(x))", "(all x.(StepOnStonefish(x) -> NoAtivenom(x)))"]}
{"id": "folio_train_87", "nl": "Stings of some fish can cause death if not treated.", "fol": "exists x y.((IsFish(x) & Sting(x,y) & -IsTreated(y)) -> CausesDeath(y))", "prediction": ["all x.((Fish(x) & StingsOf(x,y)) -> CausesDeath(x))", "all x y.((Fish(x) & Sting(y) & -Treated(y)) -> CausesDeath(x,y))", "all x.((Fish(x) & Sting(x)) -> CausesDeath(x))", "all x.((Fish(x) & -Treated(x)) -> CausesDeath(x))", "(exists x.(Fish(x) & StingsOf(x,y)) & CausesDeath(x,y))", "all x.((StingsOfFish(x) & -Treated(x)) -> CausesDeath(x))", "exists x.(Fish(x) & Sting(x) & -Treated(x))", "all x y.((Fish(x) & Sting(y) & -Treated(y)) -> CausesDeath(x,y))", "(exists x.(Fish(x) & Sting(x) & -Treated(x)) -> CausesDeath(x))", "all x.((Fish(x) & StingsOf(x,y)) -> CanCauseDeath(x,y))", "all x y.((Fish(x) & Sting(y)) -> CanCauseDeath(x,y))", "exists x.(Fish(x) & StingsOf(x,y) & -Treated(y))", "all x.((Fish(x) & Sting(x)) -> CanCauseDeath(x))", "all x y.((Fish(x) & Sting(y) & -Treated(y)) -> CanCauseDeath(x,y))", "exists x.(Fish(x) & Sting(x) & CausesDeath(x))", "all x y.((Fish(x) & Sting(y)) -> CausesDeath(x,y))"]}
{"id": "folio_train_88", "nl": "If you step on a stonefish and apply heat to the affected area, stings will cause death.", "fol": "all x.((StepOnFish(Stonefish,x) & ApplyHeatToArea(x)) -> (Sting(Stonefish,x) -> CausesDeath(x)))", "prediction": ["all x y.((StepOnStonefish(x) & Stonefish(y) & ApplyHeatToAffectedArea(x,y)) -> CausesDeath(x,y))", "all x.((StepOnStonefish(x) & ApplyHeatToAffectedArea(x)) -> StingsCauseDeath(x))", "all x.(StepOnStonefishAndApplyHeatToAffectedArea(x) -> StingsCauseDeath(x))", "all x y z.((StepOnStonefish(x) & Stonefish(y) & Heat(z) & ApplyToAffectedArea(x,y,z)) -> CausesDeath(x))", "all x y.((StepOnStonefish(x) & Stonefish(y) & AppliesHeatToAffectedArea(x,y)) -> CausesDeath(x,y))", "(StepOnStonefish(x) & ApplyHeatToAffectedArea(x) -> StingsCauseDeath(x))", "all x y z.((StepOn(x,y) & Stonefish(z) & AppliesHeatToAffectedArea(x,z)) -> CausesDeath(x,z))", "all x y.((StepOn(x,y) & Stonefish(y) & ApplyHeatToAffectedArea(x,y)) -> CausesDeath(x,y))", "all x.(StepOnStonefishAndApplyHeatToAffectedArea(x) -> CausesDeath(x))", "all x.((StepOnStonefish(x) & ApplyHeatToAffectedArea(x)) -> CausesDeath(x))", "all x y.((StepOnStonefish(x) & Stonefish(y) & ApplyHeatToAffectedArea(x,y)) -> CausesDeath(x))", "all x y z.((StepOnStonefish(x) & Stonefish(y) & Heat(z) & AffectedArea(w) & ApplyTo(x,y,z)) -> CausesDeath(x))", "all x.(StepOnStonefish(x) & ApplyHeatToAffectedArea(x) -> StingsCauseDeath(x))", "all x.(StepOnStonefishAndApplyHeat(x) -> CausesDeath(x))", "all x.((StepOnStonefish(x) & ApplyHeatToAffectedArea(x)) -> StingsCauseDeath(x))", "all x y.((StepOnStonefish(x) & Stonefish(y) & AppliesHeat(x,y)) -> CausesDeath(x))"]}
{"id": "folio_train_89", "nl": "Some monitors produced by LG have a type-c port.", "fol": "exists x.(ProducedByLG(x) & HasTypeCPort(x))", "prediction": ["exists x.(Monitor(x) & LGProduced(x) & HasTypeCPort(x))", "exists x.(Monitor(x) & ProducedByLG(x) & HasTypeCPort(x))", "exists x y.(Monitor(x) & LG(y) & ProducedBy(x,y) & HasTypeCPort(x))", "exists x.(Monitor(x) & LG(x) & HasTypeCPort(x))", "all x y.((Monitor(x) & LG(y)) -> HasTypeCPort(x,y))", "exists x.(Monitor(x) & ProducedByLG(x) & HasTypeCPort(x))", "all x y.((Monitor(x) & LG(y)) -> HasTypeCPort(x,y))", "exists x.(Monitor(x) & LGProduced(x) & HasTypeCPort(x))", "all x y.((Monitor(x) & LGProduced(x)) -> HasTypeCPort(x,y))", "exists x.(Monitor(x) & ProducedByLG(x) & HasTypeCPort(x))", "all x y.((Monitor(x) & LG(y)) -> HasTypeCPort(x,y))", "exists x.(Monitor(x) & LG(x) & HasTypeCPort(x))", "exists x.(Monitor(x) & ProducedByLG(x)) -> HasTypeCPort(x))", "exists x.(MonitorProducedByLG(x) & HasTypeCPort(x))", "exists x.(Monitor(x) & LGProduced(x) & TypeCPort(x))", "exists x.(Monitor(x) & ProducedByLG(x) & TypeCPort(x))"]}
{"id": "folio_train_90", "nl": "If the monitor has a type-c port, then it is not produced by AOC.", "fol": "all x.(HasTypeCPort(x) -> -ProducedByAOC(x))", "prediction": ["all x.((Monitor(x) & TypeCPort(x)) -> -ProducedByAOC(x))", "all x.((Monitor(x) & TypeCPort(x)) -> -ProducedByAOC(x))", "all x.(TypeCPort(x) -> -ProducedByAOC(x))", "all x y.((Monitor(x) & TypeCPort(x)) -> -ProducedByAOC(y))", "all x.((Monitor(x) & HasTypeCPort(x)) -> -ProducedByAOC(x))", "all x.((Monitor(x) & TypeCPort(x)) -> -ProducedByAOC(x))", "(all x.(TypeCPort(x) -> -ProducedByAOC(x)))", "all x.(HasTypeCPort(x) -> -ProducedByAOC(x))", "all x.(TypeCPort(x) -> -ProducedByAOC(x))", "all x y.((Monitor(x) & TypeCPort(x)) -> -ProducedByAOC(y))", "all x.((Monitor(x) & HasTypeCPort(x)) -> -ProducedByAOC(x))", "(all x.(TypeCPort(x) -> -ProducedByAOC(x)))", "all x.((Monitor(x) & TypeCPort(x)) -> -ProducedByAOC(x))", "all x.(TypeCPort(x) -> -ProducedByAOC(x))", "all x.(TypeCPort(x) -> -ProducedByAOC(x))", "all x.((Monitor(x) & TypeCPort(x)) -> -ProducedByAOC(x))"]}
{"id": "folio_train_91", "nl": "All monitors in the library are produced by AOC. ", "fol": "all x.(InLibrary(x) -> ProducedByAOC(x))", "prediction": ["all x.(Monitor(x) -> ProducedByAOC(x))", "all x y.((Monitor(x) & Library(y)) -> ProducedByAOC(x,y))", "all x.((Monitor(x) & InLibrary(x)) -> ProducedByAOC(x))", "(ProducedByAOC) & all x.(Monitor(x) -> InLibrary(x)))", "all x.(Monitor(x) -> ProducedByAOC(x))", "all x y.((Monitor(x) & Library(y) & ProducedBy(x,y)) -> ProducedBy(x,y))", "(all x.(Monitor(x) -> ProducedByAOC(x)))", "all x y.((Monitor(x) & Library(y)) -> ProducedByAOC(x,y))", "all x.((Monitor(x) & InLibrary(x)) -> ProducedByAOC(x))", "all x.(Monitor(x) -> ProducedByAOC(x))", "all x y.((Monitor(x) & Library(y) & ProducedByAOC(x,y)) -> ProducedByAOC(x,y))", "(all x.(Monitor(x) -> ProducedByAOC(x)))", "all x.(Monitor(x) -> ProducedByAOC(x))", "all x y.((Monitor(x) & Library(y)) -> ProducedByAOC(x,y))", "all x.(Monitor(x) -> (ProducedByAOC(x) & InLibrary(x)))", "all x.(Monitor(x) -> ProducedByAOC(x))"]}
{"id": "folio_train_92", "nl": "L-2021 is either in the library or has a type-c port.", "fol": "((InLibrary(L2021) & -HasTypeCPort(L2021)) | (-InLibrary(L2021) & HasTypeCPort(L2021)))", "prediction": ["all x.(L-2021(x) -> (InLibrary(x) | HasTypeCPort(x)))", "(InLibrary(L-2021) | HasTypeCPort(L-2021))", "all x y.((L-2021(x) & Library(y) & (InLibrary(x,y) | HasTypeCPort(x,y))) -> InLibrary(x,y))", "all x.(L-2021(x) -> (InLibrary(x) | HasTypeCPort(x)))", "(exists x.(L-2021(x) & InLibrary(x)) | HasTypeCPort(x)))", "(InLibrary(L-2021) | HasTypeCPort(L-2021))", "(InLibrary(L-2021) | TypeCPort(L-2021))", "all x.(L2021(x) -> (InLibrary(x) | HasTypeCPort(x)))", "all x.(L-2021(x) -> (InLibrary(x) | TypeCPort(x)))", "(exists x.(L2021(x) & InLibrary(x)) | HasTypeCPort(x)))", "all x.(L2021(x) -> ((InLibrary(x) | HasTypeCPort(x))))", "all x.(L2021(x) -> (InLibrary(x) | HasTypeCPort(x)))", "all x.(L-2021(x) -> (InLibrary(x) | TypeCPort(x)))", "exists x.(Library(x) | TypeCPort(x))", "all x.(L2021(x) -> (InLibrary(x) | HasTypeCPort(x)))", "all x.(L-2021(x) -> (InLibrary(x) | HasTypeCPort(x)))"]}
{"id": "folio_train_93", "nl": "L-2021 is either produced by AOC and produced by LG, or neither produced by AOC nor produced by LG.", "fol": "-((ProducedByAOC(L2021) & -ProducedByLG(L2021)) | (-ProducedByAOC(L2021) & ProducedByLG(L2021)))", "prediction": ["all x.(L-2021(x) -> (ProducedByAOC(x) & ProducedByLG(x)) | (-ProducedByAOC(x) & ProducedByLG(x))))", "(all x.(L-2021(x) -> (ProducedByAOC(x) & ProducedByLG(x))) | (-ProducedByAOC(x) & ProducedByLG(x))))", "all x y.((L-2021(x) & AOC(y) & LG(z)) -> (ProducedBy(x,y) & ProducedBy(x,z)) | (-ProducedBy(x,y) & ProducedBy(x,z))))", "(exists x.(L-2021(x) & ProducedBy(x,AOC) & ProducedBy(x,LG)) | -exists y.(ProducedBy(y,AOC) & ProducedBy(y,LG))))", "(ProducedByAOCAndProducedByLG) | (-ProducedByAOCAndProducedByLG))))", "all x.(L2021(x) -> ((ProducedByAOC(x) & ProducedByLG(x)) | -ProducedByAOC(x) & ProducedByLG(x)))", "all x.(L-2021(x) -> (ProducedByAOC(x) & ProducedByLG(x)) | -ProducedByAOC(x) & ProducedByLG(x)))", "(ProducedByAOCAndProducedByLG) | (-ProducedByAOC(L-2021) & -ProducedByLG(L-2021))))", "(all x.(L2021(x) -> (ProducedByAOC(x) & ProducedByLG(x))) | (-ProducedByAOC(x) & ProducedByLG(x))))", "all x y.((L-2021(x) & AOC(y) & LG(y)) -> (ProducedBy(x,y) & ProducedBy(x,y)))", "all x.(L2021(x) -> ((ProducedByAOC(x) & ProducedByLG(x)) | (-ProducedByAOC(x) & ProducedByLG(x)) | (-ProducedByAOC(x) & ProducedByLG(x)))))", "(all x.(L2021(x) -> ProducedByAOC(x)) | (-ProducedByAOC(x) & ProducedByLG(x))))", "all x.(L-2021(x) -> (ProducedByAOC(x) & ProducedByLG(x)) | (-ProducedByAOC(x) & ProducedByLG(x))))", "all x.(L-2021(x) -> (ProducedByAOC(x) & ProducedByLG(x) | -ProducedByAOC(x) & ProducedByLG(x)))", "(all x.(L-2021(x) -> (ProducedByAOC(x) & ProducedByLG(x))) | (-ProducedByAOC(x) & ProducedByLG(x))))", "exists x.(L2021(x) & ((ProducedByAOC(x) & ProducedByLG) | -ProducedByAOC(x) & ProducedByLG(x)))"]}
{"id": "folio_train_94", "nl": "L-2021 is in the library.", "fol": "InLibrary(L2021)", "prediction": ["all x.(L-2021(x) -> InLibrary(x))", "(InLibrary(L-2021) -> InLibrary(L-2021))", "L-2021 is in the library.", "LocatedInLibrary(L-2021)", "all x.(L-2021(x) -> InLibrary(x))", "L-2021 is in the library.", "(InLibrary(L-2021) -> InLibrary(L-2021))", "L-2021 in the Library.", "L-2021 is in the Library.", "(InLibrary(L-2021) -> InLibrary(L))", "all x.(L2021(x) -> InLibrary(x))", "(InLibrary(L2021) & InLibrary(L2021))", "all x.(L-2021(x) -> InLibrary(x))", "L-2021 is in the library.", "All x.(L2021(x) -> InLibrary(x))", "(InLibrary(L-2021)"]}
{"id": "folio_train_95", "nl": "L-2021 is either in the library or produced by LG.", "fol": "(InLibrary(L2021) | ProducedByLG(L2021))", "prediction": ["all x.(L-2021(x) -> (InLibrary(x) | ProducedByLG(x)))", "(exists x.(L2021(x) & InLibrary(x)) | ProducedBy(x,LG)))", "all x y.((L-2021(x) & Library(y) & (InLibrary(x,y) | ProducedBy(x,y))) -> InLibrary(x,y))", "(InLibrary(L-2021) | ProducedBy(L-2021))", "all x.(L-2021(x) -> (InLibrary(x) | ProducedByLG(x)))", "(exists x.(L-2021(x) & InLibrary(x)) | ProducedBy(x,LG)))", "(InLibrary(L2021) | ProducedBy(L2021,Lg)))", "all x.(L2021(x) -> (InLibrary(x) | ProducedBy(x)))", "all x.((L-2021(x) & (InLibrary(x) | ProducedByLG(x))) -> InLibrary(x))", "all x y.((L-2021(x) & Library(y) & (InLibrary(x,y) | ProducedBy(x,y))) -> InLibrary(x,y))", "(exists x.(L2021(x) & InLibrary(x)) | ProducedBy(x,Lg)))", "all x.(L-2021(x) -> (InLibrary(x) | ProducedByLG(x)))", "exists x.(L2021(x) & (Library(x) | LGProduces(x)))", "all x.(L2021(x) -> (InLibrary(x) | ProducedBy(x)))", "exists x.(L2021(x) & (Library(x) | LGProduces(x)))", "all x.(L-2021(x) -> (InLibrary(x) | ProducedByLG(x)))"]}
{"id": "folio_train_96", "nl": "L-2021 either has a type-c port or is produced by LG.", "fol": "(HasTypeCPort(L2021) | ProducedByLG(L2021))", "prediction": ["all x.(L-2021(x) -> (TypeCPort(x) | LGProduced(x)))", "(exists x.(L2021(x) & TypeCPort(x)) | ProducedBy(x,LG)))", "(HasTypeCPort(L-2021) | ProducedByLG(L-2021))", "all x.(L-2021(x) -> (HasTypeCPort(x) | ProducedByLG(x)))", "all x.(L2021(x) -> (TypeCPort(x) | LGProduced(x)))", "all x y.((L-2021(x) & TypeCPort(y)) -> (Has(x,y) | ProducedBy(x,y)))", "(exists x.(L-2021(x) & TypeCPort(x)) | ProducedBy(x,LG)))", "all x.((L-2021(x) & (TypeCPort(x) | LGProduced(x))) -> Has(x,L2021))", "(TypeCPort(L-2021) | LGProduced(L-2021))", "all x.(L2021(x) -> (TypeCPort(x) | LGProducedBy(x)))", "all x.(L-2021(x) -> (HasTypeCPort(x) | ProducedByLG(x)))", "(exists x.(L2021(x) & TypeCPort(x)) | ProducedByLG(x)))", "all x.((L-2021(x) & TypeCPort(x)) | LGProduces(x))", "all x.(L2021(x) -> (TypeCPort(x) | LGProduced(x)))", "all x.(L-2021(x) -> (HasTypeCPort(x) | ProducedByLG(x)))", "exists x.(L2021(x) & (TypeCPort(x) | LGProduces(x)))"]}
{"id": "folio_train_97", "nl": "If L-2021 is either in the library and produced by LG, or neither in the library nor produced by LG,  then L-2021 neither has a type-c port nor is produced by LG.", "fol": "(((InLibrary(L2021) & ProducedByLG(L2021)) | (-InLibrary(L2021) & -ProducedByLG(L2021))) -> (-HasTypeCPort(L2021) & -ProducedByLG(L2021)))", "prediction": ["all x.((L-2021(x) & (InLibrary(x) & ProducedByLG) | -(InLibrary(x) & ProducedByLG)))) -> -TypeCPort(x) & -ProducedByLG(x)))", "all x.((L-2021(x) & (InLibrary(x) & ProducedByLG(x) | -InLibrary(x) & ProducedByLG(x))) -> -TypeCPort(x) & -ProducedByLG(x))", "all x y.((L-2021(x) & Library(y) & ProducedByLG(x,y)) | (-(L-2021(x) & Library(y) & ProducedByLG(x,y))) | (-(L-2021(x) & TypeCPort(x)) | ProducedByLG(x)))))", "all x.((L-2021(x) & (InLibrary(x) | -InLibrary(x) | -ProducedByLG(x))) -> -TypeCPort(x) & -ProducedByLG(x))", "(all x.((L-2021(x) & InLobby(x)) | (-InLobby(x) & ProducedByLG(x)))) -> (-TypeCPort(x) & -ProducedByLG(x)))", "((L-2021) & (InLibrary(Lg) & ProducedBy(Lg)) | -(InLibrary(Lg) & ProducedBy(Lg))))", "all x.((L2021(x) & ((InLibrary(x) & ProducedByLG)) | (-InLibrary(x) & ProducedByLG)))) -> -TypeCPort(x) & -ProducedByLG(x)))", "(all x.((L-2021) & InLibrary(x) & ProducedByLG)) | (-(L-2021) & InLibrary(x) & ProducedByLG)))))", "(all x.((L-2021(x) & InLibrary(x) & ProducedByLG)) | (-(L-2021(x) & InLibrary(x) & ProducedByLG)))))", "all x.((L-2021(x) & (InLibrary(x) & ProducedByLG) | -(InLibrary(x) & ProducedByLG)))) -> (-TypeCPort(x) | ProducedByLG(x)))", "(exists x.(L2021(x) & (InLibrary(x) | -InLibrary(x) | ProducedByLG(x))) & -exists y.(L2021(y) & ProducedByLG(y))))", "all x y.((L-2021(x) & Library(y) & ProducedByLG(x,y)) | (-ProducedByLG(x,y) & -InLibrary(x,y))))", "all x.((L2021(x) & ((InLibrary(x) & ProducedByLG)) | -(InLibrary(x) & ProducedByLG)))) -> (-TypeCPort(x) | ProducedByLG(x))))", "all x.(L-2021(x) -> ((InLibory(x) & ProducedByLG(x)) | -(InLibory(x) & ProducedByLG(x)))))", "all x.((L-2021(x) & (InLibrary(x) | -InLibrary(x) | -ProducedByLG(x))) -> (-TypeCPort(x) | ProducedByLG(x)))", "all x.((L-2021(x) & (InLibrary(x) | ProducedByLG(x))) | (-InLibrary(x) | ProducedByLG(x))))"]}
{"id": "folio_train_98", "nl": "If L-2021 is either produced by LG and produced by AOC or neither produced by LG nor produced by AOC,  then L-2021 is either in the library or produced by LG.", "fol": "(((ProducedByAOC(L2021) & ProducedByLG(L2021)) | (-ProducedByAOC(L2021) & -ProducedByLG(L2021))) -> (InLibrary(L2021) | ProducedByLG(L2021)))", "prediction": ["all x.((L-2021(x) & (ProducedByLG(x) | ProducedByAOC(x))) | -ProducedByLG(x) | -ProducedByAOC(x)))", "all x.((L-2021(x) & (ProducedByLG(x) | ProducedByAOC(x)) | -ProducedByLG(x) | -ProducedByAOC(x))) -> (InLibrary(x) | ProducedByLG(x)))", "all x y.((L-2021(x) & (ProducedByLG(x) | ProducedByAOC(x))) | (-ProducedByLG(x) & ProducedByAOC(x))))", "(ProducedByLGAndProducedByAOC(L-2021) | -ProducedByLGAndProducedByAOC(L-2021)))", "((ProducedByLG(L-2021) & ProducedByAOC(L-2021)) | (-ProducedByLG(L-2021) & ProducedByAOC(L-2021))))", "((ProducedByLG(L-2021) | ProducedByAOC(L-2021)) | (-ProducedByLG(L-2021) & ProducedByAOC(L-2021))))", "(all x.((L-2021(x) & ProducedByLGAndProducedByAOC)) | (-ProducedByLGAndProducedByAOC))))", "all x.((L-2021(x) & (ProducedByLG(x) | ProducedByAOC(x) | -ProducedByLG(x) | -ProducedByAOC(x))) -> (InLibrary(x) | ProducedByLG(x)))", "(all x.((L-2021(x) & ProducedBy(x,LG) & ProducedBy(x,AOC)) | -((L-2021(x) & ProducedBy(x,LG) & ProducedBy(x,AOC)))) -> (InLibrary(x) | ProducedBy(x,LG))))", "all x.((L-2021(x) & (ProducedByLG(x) | ProducedByAOC(x))) | (-ProducedByLG(x) | ProducedByAOC(x))))", "all x y.((L-2021(x) & (ProducedByLG(x,y) | ProducedByAOC(x,y))) -> (InLibrary(x) | ProducedByLG(x,y)))", "all x y.((L-2021(x) & (ProducedByLG(x) & ProducedByAOC(x) | -ProducedByLG(x) & ProducedByAOC(x))) -> (InLibrary(x) | ProducedByLG(x)))", "all x.((L2021(x) & ((ProducedByLG(x) & ProducedByAOC(x)) | -ProducedByLG(x) & ProducedByAOC(x))) -> (InLibrary(x) | ProducedByLG(x))))", "all x.((L2021(x) & (ProducedByLG(x) & ProducedByAOC(x) | -ProducedByLG(x) & ProducedByAOC(x))) -> (InLibrary(x) | ProducedByLG(x)))", "all x.((L-2021(x) & (ProducedByLG(x) | ProducedByAOC(x) | -ProducedByLG(x) | ProducedByAOC(x))) -> (InLibrary(x) | ProducedByLG(x)))", "all x.((L-2021(x) & (ProducedByL LG(x) | ProducedByAOC(x)) | -ProducedByL LG(x) | -ProducedByAOC(x))) -> (InLibrary(x) | ProducedByL LG(x)))"]}
{"id": "folio_train_99", "nl": "People eat meat regularly or are vegetation.", "fol": "all x.(EatsMeatRegularly(x) | IsVegetarian(x))", "prediction": ["all x.(People(x) -> (EatsMeatRegularly(x) | Vegetation(x)))", "all x.(Person(x) -> (EatsMeatRegularly(x) | Vegetation(x)))", "all x.((Person(x) & (EatsMeatRegularly(x) | Vegetation(x))) -> EatsMeat(x))", "all x y.((Person(x) & Meat(y)) -> (EatsRegularly(x,y) | Vegetation(x)))", "all x.(People(x) -> (EatsMeatRegularly(x) | Vegetation(x)))", "exists x.(Person(x) & (EatsMeatRegularly(x) | Vegetation(x)))", "all x y.((Person(x) & (EatsMeatRegularly(x) | Vegetation(x))) -> Eating(x,y))", "all x y.((Person(x) & Meat(y)) -> (EatsRegularly(x,y) | Vegetation(x)))", "exists x.(Person(x) & (EatsMeatRegularly(x) | Vegetation(x)))", "all x y.((Person(x) & (EatsMeatRegularly(x) | Vegetation(y))) -> EatsMeat(x,y))", "all x.(People(x) -> (EatsMeatRegularly(x) | Vegetation(x)))", "exists x.(Population(x) & (EatsMeatRegularly(x) | Vegetation(x)))", "exists x.(Person(x) & (Eats(x,Meat) | Vegetation(x)))", "exists x.(Person(x) & (EatsMeatRegularly(x) | Vegetation(x)))", "exists x.(People(x) & (EatsMeatRegularly(x) | Vegetation(x)))", "exists x.(Population(x) & (EatsMeatRegularly(x) | Vegetation(x)))"]}
{"id": "folio_train_100", "nl": "If people eat meat regularly, then they enjoy eating hamburgers and steaks.", "fol": "all x.(EatsMeatRegularly(x) -> EnjoysHamburgers(x))", "prediction": ["all x.((People(x) & EatsMeatRegularly(x)) -> (EnjoysEating(x,burgers) & EnjoysEating(x,steaks)))", "all x.((EatsMeatRegularly(x) & EatsMeat(x)) -> (EnjoysEating(x,burgers) & EnjoysEating(x,steaks)))", "all x.(EatsMeatRegularly(x) -> (EnjoysEating(x,burgers) & EnjoysEating(x,steaks)))", "all x.((EatsMeatRegularly(x) & People(x)) -> (EnjoysEating(x,burgers) & EnjoysEating(x,steaks)))", "all x y.((People(x) & Meat(y) & EatsRegularly(x,y)) -> (EnjoysEating(x,y) & Eats(x,y)))", "(EatsMeatRegularly(Person,Meat) & EnjoysEating(Person,Meat) & EnjoysEating(Person,Meat))", "all x.((People(x) & EatsMeatRegularly(x)) -> (EnjoysEating(x,burgers) & EnjoysEating(x,steaks)))", "all x y.((Person(x) & EatsMeatRegularly(x)) -> (EnjoysEating(x,y) & Eats(y,x)))", "all x.(EatsRegularMeat(x) -> (EnjoysEating(x,burgers) & EnjoysEating(x,steaks)))", "all x.(EatsMeatRegularly(x) -> (EnjoysEating(x,burgers) & EnjoysEating(x,steaks)))", "all x.((Person(x) & EatsMeatRegularly(x)) -> (EnjoysEating(x,burgers) & EnjoysEating(x,steaks)))", "all x y.((People(x) & EatsMeatRegularly(x)) -> (EnjoysEating(x,Haburgers) & EnjoysEating(x,Steaks)))", "all x y.((EatsMeatRegularly(x) & Person(y)) -> (EnjoysEating(y,x) & Eats(y,x)))", "all x.((EatsMeatRegularly(x)) -> (EnjoysEating(x,burgers) & EnjoysEating(x,steaks)))", "all x.((People(x) & EatsMeatRegularly(x)) -> (EnjoysEating(x,burgers) & EnjoysEating(x,steaks)))", "all x.(EatsMeatRegularly(x) -> (EnjoysEatingHabitats(x) & EnjoysEatingSteaks(x)))"]}
{"id": "folio_train_101", "nl": "All people who are vegetarian are conscious of the environment or their health.", "fol": "all x.(IsVegetarian(x) -> IsConsciousOfEnvironmentOrHealth(x))", "prediction": ["all x.(Vegetarian(x) -> (ConsciousOfEnvironment(x) | ConsciousOfHealth(x)))", "all x.(Vegetarian(x) -> (ConsciousOfEnvironment(x) | ConsciousOfHealth(x)))", "all.(Vegetarian(x) -> (ConsciousOfEnvironment(x) | ConsciousOfHealth(x)))", "all x.((Person(x) & Vegetarian(x)) -> (ConsciousOfEnvironment(x) | ConsciousOfHealth(x)))", "all x y.((Person(x) & Vegetarian(x)) -> (ConsciousOfEnvironment(y) | ConsciousOfHealth(y)))", "all x.(Vegetarian(x) -> (ConsciousOfEnvironment(x) | ConsciousOfHealth(x)))", "all x.(Vegetarian(x) -> (ConsciousOfEnvironment(x) | ConsciousOfHealth(x)))", "(all x.(Vegetarian(x) -> (ConsciousOfEnvironment(x) | ConsciousOfHealth(x))))", "all x.(Vegetarian(x) -> (ConsciousOfEnvironment(x) | ConsciousOfHealth(x)))", "all x.(Vegetarian(x) -> (ConsciousOfEnvironment(x) | ConciousOfHealth(x)))", "all x.(Vegetarian(x) -> (ConscientiousOfEnvironment(x) | ConsciousOfHealth(x)))", "all x.(Vegetarian(x) -> (ConsciousOfEnvironment(x) | ConsciousOfHealth(x)))", "all x.(Vegetarian(x) -> (ConsciousOfEnvironment(x) | ConsciousOfHealth(x)))", "all x.(Venetian(x) -> (ConsciousOfEnvironment(x) | ConsciousOfHealth(x)))", "all x.(Vegetarian(x) -> (ConsciousOfEnvironment(x) | ConscientOfHealth(x)))", "all x.(Vegetarian(x) -> (ConsciousOfEnvironment(x) | ConsciousOfHealth(x)))"]}
{"id": "folio_train_102", "nl": "If people are conscious about the environment or their health, then they do not go to fast food places often.", "fol": "all x.(IsConsciousOfEnvironmentOrHealth(x) -> -GoesToFastFoodPlaces(x))", "prediction": ["all x.((ConsciousAboutEnvironment(x) | ConsciousAboutHealth(x)) -> -FastFoodPlaces(x))", "all x.(ConsciousAboutEnvironmentOrHealth(x) -> -FastFoodPlaces(x))", "(ConsciousAboutEnvironmentOrHealth(Person) -> -FastFoodPlaces(Person))", "all x.((ConsciousOfEnvironment(x) | ConsciousOfHealth(x)) -> -FastFoodPlaces(x))", "all x.((ConsciousAboutEnvironmentOrHealth(x)) -> -FastFoodPlaces(x))", "all x y.((ConsciousOfEnvironment(x) & ConsciousOfHealth(x)) -> -FastFoodPlaces(y))", "all x.(ConsciousOfEnvironmentOrHealth(x) -> -FastFoodPlaces(x))", "all x y.((Conscious(x) & (Environment(y) | Health(y))) -> -FastFoodPlace(x,y))", "all x y.((ConsciousAboutEnvironmentOrHealth(x) & People(y)) -> -FastFoodPlace(y))", "all x.((ConsciousOfEnvironment(x) | ConsciousOfHealth(x)) -> -FastFoodPlaces(x))", "all x.(ConsciousAboutEnvironmentOrHealth(x) -> -FastFoodPlaces(x))", "all x.((ConsciousAboutEnvironmentOrHealth(x)) -> -FastFoodPlaces(x))", "exists x.(Conscious(x) & (Conscious(x) | Conscious(x))) -> -FastFoodPlaces(x))", "all x.(Conscious(x) -> -FastFoodPlaces(x))", "all x.(ConsciousOfEnvironmentOrHealth(x) -> -FastFoodPlacesOfConsciousOf(x,Environment))", "all x.((ConsciousOfEnvironment(x) | ConciousOfHealth(x)) -> -FastFoodPlaces(x))"]}
{"id": "folio_train_103", "nl": "If people have busy schedules without time to cook, then they go to fast food places often.", "fol": "all x.(HasBusySchedule(x) -> GoesToFastFoodPlaces(x))", "prediction": ["all x.((Person(x) & BusySchedules(x) & -TimeToCook(x)) -> GoToFastFoodPlaces(x))", "all x.((People(x) & BusySchedules(x) & -TimeToCook(x)) -> GoToFastFoodPlaces(x))", "all x.((BoatSchedule(x) & -TimeToCook(x)) -> GoToFastFoodPlaces(x))", "all x y.((Person(x) & BusySchedule(x) & -TimeToCook(x)) -> GoToFastFoodPlaces(y))", "all x.((Person(x) & BusySchedules(x) & -TimeToCook(x)) -> FastFoodPlaces(x))", "all x y.((Person(x) & BusySchedules(x) & -TimeToCook(x)) -> GoesToFastFoodPlaces(y))", "all x.((PopularSchedule(x) & BusySchedule(x) & -TimeToCook(x)) -> GoesToFastFoodPlaces(x))", "all x.((BusySchedules(x) & -TimeToCook(x)) -> GoToFastFoodPlaces(x))", "all x.((Person(x) & BusySchedules(x) & -TimeToCook(x)) -> GoesToFastFoodPlaces(x))", "all x y.((PopularSchedule(x) & BusySchedule(y) & -TimeToCook(x)) -> GoesToFastFoodPlaces(x))", "all x.((BossSchedule(x) & -TimeToCook(x)) -> GoesToFastFoodPlaces(x))", "all x y.((Person(x) & BusySchedule(x) & -TimeToCook(x)) -> GoesToFastFoodPlaces(y))", "all x.(BusySchedulesWithoutTimeToCook(x) -> GoToFastFoodPlaces(x))", "all x y.((Person(x) & BusySchedules(x) & -TimeToCook(x)) -> GoToFastFoodPlaces(y))", "all x.((Person(x) & BusySchedules(x) & -TimeToCook(x)) -> FastFoodPlaces(x))", "exists x.(BusySchedule(x) & -TimeToCook(x))"]}
{"id": "folio_train_104", "nl": "If Jeremy does not both go to fast food places often and is conscious about the environment or their health, then he goes to fast food places often.", "fol": "(-(GoesToFastFoodPlaces(Jeremy) & IsConsciousOfEnvironmentOrHealth(Jeremy)) -> GoesToFastFoodPlaces(Jeremy))", "prediction": ["all x.((Jeremy(x) & -(GoesToFastFoodPlacesOfFastFoodPlacesOfFastFoodPlacesOfFastFoodPlacesOfFastFoodPlacesOfFastFoodPlacesOfFastFoodPlacesOfFastFoodPlacesOfFastFoodPlacesOfFastFoodOfFastFoodPlacesOfFastFoodFastFoodFastFoodFastFoodFastFoodFastFoodFastFoodFastFoodFastFoodFastFoodFastFoodFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFa", "(-(GoesToFastFoodPlacesOfFastFoodPlacesOfFastFoodPlacesOfFastFoodPlacesOfFastFoodPlacesOfFastFoodPlacesOfFastFoodPlacesOfFastFoodPlacesOfFastFoodPlacesOfFastFoodPlacesOfFastFoodPlacesOfF", "all x.((Jeremy(x) & -(GoesToFastFoodPlacesOfFastFood(x) & ConsciousAboutEnvironment(x) & ConsciousAboutHealth(x))) -> GoesToFastFoodPlacesOfFastFood(x))", "all x y.((Jeremy(x) & -(GoesToFastFoodPlaces(x,y) & ConsciousAboutEnvironment(x) & ConsciousAboutHealth(x))) -> GoesToFastFoodPlaces(x))", "all x.((Jeremy(x) & -FastFoodPlace(x) & (ConsciousOfEnvironment(x) | ConsciousOfHealth(x))) -> GoesToFastFoodPlaces(x))", "all x.((Jeremy(x) & -(GoesToFastFoodPlacesOften(x) & ConsciousAboutEnvironment(x) & ConsciousAboutHealth(x))) -> GoesToFastFoodPlacesOften(x))", "(-(FastFoodPlaces(Jeremy) & ConsciousAboutEnvironment(Jeremy) & ConsciousAboutHealth(Jeremy)) -> GoesToFastFoodPlaces(Jeremy))", "(-(GoesToFastFoodPlacesOften(Jeremy) & ConsciousAboutEnvironment(Jeremy) & ConsciousAboutHealth(Jeremy)) -> GoesToFastFoodPlacesOften(Jeremy))", "(-(GoesToFastFoodPlacesOfFastFoodPlacesOfFastFoodPlacesOfFastFoodPlacesOfFastFoodPlacesOfFastFoodPlacesOfFastFoodPlacesOfFastFoodPlacesOfFastFoodPlacesOfFastFoodPlacesOfFastFoodPlacesOfF", "all x.((Jeremy(x) & -(GoesToFastFood(x) & ConsciousAboutEnvironment(x) & ConsciousAboutHealth(x))) -> GoesToFastFood(x))", "-((Jeremy(Jeremy) & GoesToFastFoodPlacesOften(Jeremy) & (ConsciousAboutEnvironment(Jeremy) | ConsciousAboutHealth(Jeremy))))", "all x y.((Jeremy(x) & -FastFoodPlace(y) & ConsciousOfEnvironmentOrHealth(x)) -> GoesToFastFoodPlaces(x,y))", "all x y.((Jeremy(x) & FastFoodPlace(y) & -(GoesTo(x,y) & ConsciousAboutEnvironment(x) | ConsciousAboutHealth(x))) -> GoesTo(x,y))", "all x.((Jeremy(x) & -FastFoodPlace(x) & ConsciousOfEnvironmentOrHealth(x)) -> GoesToFastFoodPlaces(x))", "all x.((Jeremy(x) & -(FastFoodPlaces(x) & ConsciousAboutEnvironment(x) & ConsciousAboutHealth(x))) -> GoesToFastFoodPlaces(x))", "all x.((Jeremy(x) & -FastFoodPlaces(x) & (ConsciousOfEnvironment(x) | ConsciousOfHealth(x))) -> GoesToFastFoodPlaces(x))"]}
{"id": "folio_train_105", "nl": "Jeremy has a busy schedule without time to cook.", "fol": "HasBusySchedule(Jeremy)", "prediction": ["all x.((Jeremy(x) & BusySchedule(x) & -TimeToCook(x)) -> -TimeToCook(x))", "all x.(Jeremy(x) -> (BusySchedule(x) & -TimeToCook(x)))", "(BossSchedule(Jeremy) & -TimeToCook(Jeremy))", "Jeremy has busySchedule(Jeremy) & -TimeToCook(Jeremy))", "Jeremy has a busy schedule, -TimeToCook(Jeremy)", "all x.((Jeremy(x) & BusySchedule(x) & -TimeToCook(x)) -> -TimeToCook(x))", "(BusySchedule(Jeremy) & -TimeToCook(Jeremy))", "Jeremy has a busySchedule(Jeremy) & -TimeToCook(Jeremy))", "Jeremy is busy(Jeremy) & -TimeToCook(Jeremy))", "all x.(Jeremy(x) -> (BusySchedule(x) & -TimeToCook(x)))", "(BossSchedule(Jeremy) & -TimeToCook(Jeremy))", "Jeremy has a busy schedule, but no time to cook.", "all x.((Jeremy(x) & BusySchedule(x) & -TimeToCook(x)) -> Has(x,y))", "(BusySchedule(Jeremy) & -TimeToCook(Jeremy))", "all x.(Jeremy(x) -> (BusySchedule(x) & -TimeToCook(x)))", "all x.((Jeremy(x) & BusySchedule(x) & -TimeToCook(x)) -> CanCook(x))"]}
{"id": "folio_train_106", "nl": "Jeremy has a busy schedule without time to cook or enjoy eating hamburgers and steaks.", "fol": "(HasBusySchedule(Jeremy) | EnjoysHamburgers(Jeremy))", "prediction": ["all x.((Jeremy(x) & BusySchedule(x)) -> (-Cooks(x) & -EnjoysEating(x,burgers,steaks)))", "(BusySchedule(Jeremy) & -(TimeToCook(Jeremy) | TimeToEnjoyEating(Jeremy,Hazards) & TimeToEnjoyEating(Jeremy,Steaks)))", "Jeremy has a busySchedule(Jeremy) & -(TimeToCook(Jeremy) | TimeToEnjoyEating(Jeremy,Hazards,Steaks)))", "all x.((Jeremy(x) & BusySchedule(x)) -> (-(Cooks(x) | EnjoysEating(x)) & -(Cooks(x) | EnjoysEating(x)))))", "Jeremy has a busy schedule, -(TimeToCook(Jeremy) | TimeToEnjoyEating(Jeremy,Hazards,Steaks)))", "all x.(Jeremy(x) -> (BusySchedule(x) & -(TimeToCook(x) | TimeToEnjoyEating(x)))))", "all x.((Jeremy(x) & BusySchedule(x) & -(TimeToCook(x) | TimeToEnjoyEating(x))))", "(BoundSchedule(Jeremy) & -(TimeToCook(Jeremy) | TimeToEnjoyEating(Jeremy,Meatballs,Steaks))))", "all x.(Jeremy(x) -> (BusySchedule(x) & -(TimeToCook(x) | TimeToEnjoy(x)) & -(TimeToEat(x) & TimeToEat(x)))))", "Jeremy has busySchedule(Jeremy) & -(Cooks(Jeremy) | EnjoysEating(Jeremy,HasMeat) & EnjoysEating(Jeremy,Steaks)))", "Jeremy is busy(Jeremy) & -(Cooks(Jeremy) | Enjoys(Jeremy)))", "Jeremy has a busySchedule(Jeremy) & -(TimeToCook(Jeremy) | TimeToEnjoyEating(Jeremy,Haarandts,Steaks)))", "(BusySchedule(Jeremy) & -(TimeToCook(Jeremy) | TimeToEnjoy(Jeremy))))", "all x.((Jeremy(x) & BusySchedule(x) & -(TimeToCook(x) | TimeToEnjoyEating(x))))", "all x.((Jeremy(x) & BusySchedule(x) & -(Cooks(x) | EnjoysEating(x))))", "(BoundSchedule(Jeremy) & -(TimeToCook(Jeremy) | TimeToEnjoyEating(Jeremy,Hazards,Steaks))))"]}
{"id": "folio_train_107", "nl": "If Jeremy has a busy schedule without time to cook or enjoy eating hamburgers and steaks, then Jeremy neither has a busy schedule without having time to cook nor enjoys eating hamburgers and steaks.", "fol": "((HasBusySchedule(Jeremy) | EnjoysHamburgers(Jeremy)) -> (-HasBusySchedule(Jeremy) & -EnjoysHamburgers(Jeremy)))", "prediction": ["all x.((Jeremy(x) & BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(Busts(x) & -(Busts(x)) & Eats(x)))))", "(BusySchedule(Jeremy) & -(BusySchedule(Jeremy) & -(BusySchedule(Jeremy) & -(BusySchedule(Jeremy) & -(BusySchedule(Jeremy) & -(BusySchedule(Jeremy) & -(BusySchedule(Jeremy) & -(BusySchedule(Jeremy) & -Bust(Jeremy)) & -(Bust(Jeremy) & -(Bust(Jeremy)))))", "all x.((BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(Bust(x))))))", "all x.((BusySchedule(x) & -HasTimeToCook(x) & -HasTimeToEat(x,HasTimeToCook(x) & -HasTimeToEat(x,HasTimeToEat(x,HasTimeToEat(x,HasTimeToEat(x,HasTimeToEat(x,HasTimeToEat(x,HasTimeEat(x,HasEat(x,HasEat(x,HasEat(x,HasEat(x,HasEat(x,HasEat(x,HasEat(x,HasEat(x,HasEat(x,HasEat(x,HasEat(HasEat(HasEat(HasEat(HasEat(HasEat(HasEat(HasEat(HasEat(HasEat(HasEat(HasEat(HasEat(HasEat(HasEat(HasEat(HasEat(HasEat(HasEat))))))", "all x.((Jeremy(x) & BusySchedule(x) & -(TimeToCook(x) | EnjoysEating(x,burgers) & EnjoysEating(x,steaks)))) -> (-BusySchedule(x) & -EnjoysEating(x,burgers) & EnjoysEating(x,steaks)))", "all x.((BossySchedule(x) & -(TimeToCook(x) | TimeToEnjoy(x))) -> (-BusySchedule(x) & -TimeToCook(x) & EnjoysEating(x,burgers,steaks)))", "((BusySchedule(Jeremy) & -TimeToCook(Jeremy)) | EnjoysEating(Jeremy,HasTimeToCook(Jeremy)))", "((BossySchedule(Jeremy) & -TimeToCook(Jeremy)) | EnjoysEating(Jeremy,HasTimeToCook(Jeremy)))", "all x.((Jeremy(x) & BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -Bust(x)))))", "all x y.((Jeremy(x) & BusySchedule(x) & -(BusySchedule(y) & -(BusySchedule(y) & -(BusySchedule(y)) | EnjoysEating(y,x)))) -> (-BusySchedule(y) & -EnjoysEating(y,x)) & (-EnjoysEating(x) & EnjoysEating(x))))", "all x.((Jeremy(x) & BusySchedule(x) & (-BusySchedule(x) & -BusySchedule(x) & -BusySchedule(x) & -BusySchedule(x) & -BusySchedule(x) & -BusySchedule(x) & -BusySchedule(x) & -Bustle(x)))", "all x.((Jerry(x) & BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x)) & -(BusySchedule(x) & -Busts(x) & Eats(x)))) & Eats(x))", "(BoundSchedule(Jeremy) & (-BuiltSchedule(Jeremy) & -BuiltSchedule(Jeremy) & -BuiltSchedule(Jeremy) & -BuiltSchedule(Jeremy) & -Benefits(Jeremy)))", "all x y.((Jeremy(x) & BusySchedule(x) & (-BusySchedule(y) & -BusySchedule(y)) & -(BusySchedule(x,y) & -BusySchedule(x,y) & -(BusySchedule(x,y) & -(BusySchedule(x,y) & -Busts(x,y) & Eats(x,y))))", "all x y.((Jeremy(x) & BusySchedule(x) & -(BusySchedule(y) & -(BusySchedule(y) | EnjoysEating(y,x)))) -> (-BusySchedule(x,y) & -(EnjoysEating(y,x) | EnjoysEating(y,x)))))", "all x.((Jeremy(x) & BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x)) & -(Busts(x) & -(Busts(x))))))"]}
{"id": "folio_train_108", "nl": "Sam is doing a project.", "fol": "exists x.(ProjectExists(x) & IsDoing(Sam,x))", "prediction": ["all x.(Sam(x) -> DoingProject(x))", "(DoingProject(Sam) -> Doing(Sam))", "Sam is doing a project.", "(DoingProject(Sam) & Sam(Sam))", "all x.(Sam(x) -> DoingProject(x))", "Sam is doing a project.", "all x.(DoingProject(x) -> SamDoes(x))", "(DoingProject(Sam) -> DoingProject(Sam))", "(DoingProject(Sam) & -DoingProject(Sam))", "(DoingProject(Sam) | DoingProject(Sam))", "all x.(Sam(x) -> DoingProject(x))", "Sam is doing a project.", "(DoingProject(Sam) | DoingProject(Sam))", "all x.(Sam(x) -> DoingProject(x))", "Sam is doing a project.", "exists x.(Sam(x) & Project(x))"]}
{"id": "folio_train_109", "nl": "A project is written either in C++ or in Python.", "fol": "all x.(ProjectExists(x) -> ((IsWrittenIn(x,PythonLanguage) & -IsWrittenIn(x,CPlusPlus)) | (-IsWrittenIn(x,PythonLanguage) & IsWrittenIn(x,CPlusPlus))))", "prediction": ["all x.(Project(x) -> (WrittenInC++(x) | WrittenInPython(x)))", "all x.(Project(x) -> (WrittenInC++(x) | WrittenInPython(x)))", "all x y.((Project(x) & (C++(y) | Python(y))) -> WrittenIn(x,y))", "all x.(Project(x) -> (WrittenIn(x,C++) | WrittenIn(x,Python)))", "all x y.(Project(x) -> (WrittenInC++(x) | WrittenInPython(x,y)))", "all x.(Project(x) -> (WrittenInC++(x) | WrittenInPython(x)))", "all x y.(Project(x) -> (WrittenInC++(x) | WrittenInPython(x,y)))", "all x.(Project(x) -> (WrittenIn(x,C++) | WrittenIn(x,Python)))", "exists x.(Project(x) & WrittenIn(x,C++) | WrittenIn(x,Python))", "all x.(Project(x) -> (WrittenInC++(x) | WrittenInPython(x)))", "all x y.(Project(x) -> (WrittenInC++(x) | WrittenInPython(x,y)))", "exists x.(Project(x) & WrittenIn(x,C++) | WrittenIn(x,Python))", "exists x.(Project(x) & WrittenInC++(x) | WrittenInPython(x)))", "all x.(Project(x) -> (WrittenIn(x,C++) | WrittenIn(x,Python)))", "all x.(Project(x) -> (WrittenInC++(x) | WrittenInPython(x)))", "exists x.(Project(x) & (C++(x) | Python(x)))"]}
{"id": "folio_train_110", "nl": "If Sam does a project written in Python, he will not use a Mac.", "fol": "all x.((ProjectExists(x) & IsWrittenIn(x,PythonLanguage) & IsDoing(Sam,x)) -> -IsUsing(Sam,MacComputer))", "prediction": ["all x.((Project(x) & WrittenInPython(x)) -> -UsesMac(x))", "all x y.((Project(x) & WrittenInPython(x) & Sam(y)) -> -UsesMac(y))", "all x.((Project(x) & WrittenInPython(x)) -> -UsesMac(x))", "all x.((DoesProject(x) & WrittenInPython(x)) -> -UsesMac(x))", "(all x.((Project(x) & WrittenInPython(x)) -> -UsesMac(x)))", "all x.((Sam(x) & ProjectWrittenInPython(x)) -> -UsesMac(x))", "all x y.((Project(x) & WrittenInPython(x) & Sam(y)) -> -UsesMac(y))", "all x.((Project(x) & WrittenInPython(x)) -> -UsesMac(x))", "(all x.((Project(x) & WrittenInPython(x)) -> -UsesMac(x)))", "all x.(DoesPython(x) -> -UsesMac(x))", "(all x.(PythonProject(x) -> -UsesMac(x)))", "all x y.((Project(x) & WrittenInPython(x) & Sam(y)) -> -UsesMac(y))", "all x.((Project(x) & WrittenInPython(x)) -> -UsesMac(x))", "(all x.((Project(x) & WrittenInPython(x)) -> -UsesMac(x)))", "all x y.((Project(x) & WrittenInPython(x,y)) -> -UsesMac(x))", "all x.((Project(x) & WrittenInPython(x)) -> -UsesMac(x))"]}
{"id": "folio_train_111", "nl": "Sam is using a Mac.", "fol": "IsUsing(Sam,MacComputer)", "prediction": ["(UsesMac(Sam) & -UsesMac(Sam))", "all x.(Sam(x) -> UsesMac(x))", "all x.((Sam(x) & Mac(x)) -> Uses(x,Mac))", "(UsesMac(Sam) & UsesMac(Sam))", "(Mac(Sam) & Uses(Sam,Mac))", "Sam is using a Mac.", "Sam uses Mac(Sam)", "Sam is using Mac.", "all x.((Sam(x) & Mac(x)) -> Uses(x,Mac))", "(UsesMac(Sam) & SamUsesMac(Sam))", "all x.(Mac(x) -> SamUses(x,Mac))", "all x.((Sam(x) & Mac(y)) -> Uses(x,y))", "(UsesMac(Sam) -> UsesMac(Sam))", "Sam is using Mac.", "(UsesMac(Sam) | UsesMac(Sam))", "all x.((Sam(x) & Mac(y)) -> Uses(x,y))"]}
{"id": "folio_train_112", "nl": "If Sam uses a Mac, he will play a song.", "fol": "(IsUsing(Sam,MacComputer) -> exists x.(SongExists(x) & Plays(Sam,x)))", "prediction": ["all x.((Mac(x) & Uses(x,Mac)) -> PlaysSong(x))", "all x.((Mac(x) & SamUses(x)) -> PlaysSong(x))", "all x y.((Mac(x) & Sam(y) & Uses(y,x)) -> PlaysSong(y))", "all x.((Sam(x) & UsesMac(x)) -> PlaysSong(x))", "(UsesMac(Sam) -> PlaysSong(Sam))", "all x.((MacUse(x) & SamUses(x)) -> PlaysSong(x))", "all x y.((Mac(x) & Sam(y) & Uses(y,x)) -> PlaysSong(y))", "all x.((Mac(x) & Uses(x,Mac)) -> PlaysSong(x,Sam))", "(all x.((Mac(x) & SamUses) -> PlaySong(x)))", "all x.((Sam(x) & UsesMac(x)) -> PlaySong(x))", "all x.(UsesMac(x) -> PlaySong(x))", "(UsesMac(Sam) -> PlaysSong(Sam))", "all x y.((Mac(x) & Sam(y)) -> PlaysSong(y,x))", "all x.(MacUse(x) -> PlaysSong(x))", "all x y.((Mac(x) & Sam(y) & Uses(y,x)) -> PlaysSong(y,x))", "all x.(UsesMac(x) -> PlaySong(x))"]}
{"id": "folio_train_113", "nl": "If a song is not \"Perfect\", Sam will never play it.", "fol": "all x.(-Is(x,PerfectSong) -> -Plays(Sam,x))", "prediction": ["all x.((Song(x) & -Perfect(x)) -> SamWon'tPlay(x))", "all x.((Song(x) & -Perfect(x)) -> -Plays(x,Sam))", "(-PerfectSong(Sam) & NeverPlays(Sam) & Sings(Sam))", "all x.((Song(x) & -Perfect(x)) -> SamNeverPlays(x))", "all x y.((Song(x) & -Perfect(x)) -> SamNeverPlays(x,y))", "(-PerfectSong(Sam) & NeverPlays(Sam,Sam))", "all x y.((Song(x) & Song(y) & NotPerfect(x,y)) -> SamNeverPlays(x,y))", "all x.((Song(x) & -Perfect(x)) -> -Plays(x))", "all x.((Song(x) & -Perfect(x)) -> SamWon'tPlay(x,Sam))", "all x.((Song(x) & -Perfect(x)) -> NeverPlay(x))", "All x.(Sam(x) -> -Perfect(x))", "all x.((Song(x) & NotPerfect(x)) -> SamWon'tPlay(x,Sam))", "all x.((Song(x) & -Perfect(x)) -> -Play(x,Sam))", "all x.((Song(x) & -Perfect(x)) -> SamNeverPlays(x))", "All x.((Song(x) & NotPerfect(x)) -> SamNeverPlays(x))", "all x.((Song(x) & -Perfect(x)) -> NeverPlays(x))"]}
{"id": "folio_train_114", "nl": "The project Sam is doing is written in C++.", "fol": "exists x.(ProjectExists(x) & IsDoing(Sam,x) & IsWrittenIn(x,CPlusPlus))", "prediction": ["all x.((Project(x) & Sam(x)) -> WrittenInC++(x))", "all x.((Project(x) & SamDoes(x)) -> WrittenInC++(x))", "(Project(Sam) & WrittenInC++(Sam))", "all x y.((Project(x) & Sam(y)) -> WrittenInC++(y))", "all x.(Project(x) -> WrittenInC++(x))", "all x.((Project(x) & Sam(x)) -> WrittenInC++(x))", "(Project(Sam) & WrittenInC++(Sam))", "(WrittenInC++)", "all x.((Project(x) & SamDoes(x)) -> WrittenInC++(x))", "all x y.((Project(x) & Sam(y)) -> WrittenInC++(x,y))", "All x.(SamProject(x) -> WrittenInC++(x))", "all x y.((Project(x) & Sam(y) & WritesInC++(y,x)) -> Doing(x,y))", "(WrittenInC++,Sam,AndSam))", "(Project(Sam) & WrittenInC++(Sam,C++))", "All x.(Project(x) -> WrittenInC++(x))", "all x.((Project(x) & Sam(x)) -> WrittenInC++(x))"]}
{"id": "folio_train_115", "nl": "The song Sam is playing is \"Perfect\".", "fol": "exists x.(SongExists(x) & Plays(Sam,x) & Is(x,PerfectSong))", "prediction": ["(PerfectSong(Sam) & Playing(Sam))", "All x.(Sam(x) -> Playing(x,Perfect))", "(Perfect(Sam) & Song(Sam))", "all x.((Song(x) & SamPlaying(x)) -> Perfect(x))", "The song Sam is playing is \"Perfect\"", "-PerfectSong(Sam)", "(Playing(Sam) & Song(Sam) & Perfect(Sam))", "(PerfectSong(Sam) & Playing(Sam))", "All x.(Sam(x) -> Playing(x,Perfect))", "all x.((Song(x) & SamPlaying(x)) -> Perfect(x))", "All x.(SamPlays(x) -> PerfectSong(x))", "(SamPlays(song) -> Perfect(song))", "\"Perfect\"", "all x.(SamPlaying(x) -> PerfectSong(x))", "\"Perfect\"", "\"Perfect\""]}
{"id": "folio_train_116", "nl": "If a song is \"Perfect\", Sam will play it.", "fol": "all x.(Is(x,PerfectSong) -> Plays(Sam,x))", "prediction": ["all x.((Song(x) & Perfect(x)) -> Plays(x,Sam))", "all x.(Perfect(x) -> Plays(x,Sam))", "(Perfect(Song) -> Play(Sam))", "all x.((Song(x) & Perfect(x)) -> Play(x,Sam))", "all x.(Perfect(x) -> PlaysSam(x))", "all x.((Song(x) & Perfect(x)) -> Plays(x,Sam))", "(Perfect(Song) -> Plays(Sam,Sam,Song))", "all x y.((Song(x) & Perfect(x)) -> Play(y,x))", "all x.(Perfect(x) -> SamPlays(x))", "All x.(PerfectSong(x) -> Plays(x,Sam))", "all x.((Song(x) & Perfect(x)) -> Plays(x,Sam))", "all x y.((Song(x) & Perfect(x)) -> Plays(y,x))", "all x y.((Song(x) & Perfect(x)) -> Plays(y,x))", "all x.(Perfect(x) -> Play(x,Sam))", "all x.((Song(x) & Perfect(x)) -> Plays(x,Sam))", "All x.(PerfectSong(x) -> Plays(x,Sam))"]}
{"id": "folio_train_117", "nl": "All rabbits have fur", "fol": "all x.(IsRabbit(x) -> HasFur(x))", "prediction": ["all x.(Rabbit(x) -> HasFur(x))", "all x y.((Rabbit(x) & Rabbit(y)) -> HasFur(x,y))", "all x.(Rabbit(x) -> HasFur(x))", "(all x.(Rabbit(x) -> HasFur(x)))", "all x y.((Rabbit(x) & Rabbit(y)) -> HasFur(x,y))", "all x.(Rabbit(x) -> HasFur(x))", "(all x.(Rabbit(x) -> HasFur(x)))", "all x.(Rabbit(x) -> HasFur(x))", "all x y.((Rabbit(x) & Rabbit(y)) -> HasFur(x,y))", "all x.(Rabbit(x) -> HasFur(x))", "all x y.((Rabbit(x) & Rabbit(y)) -> HasFur(x,y))", "all x.(Rabbit(x) -> HasFur(x))", "all x.(Rabbit(x) -> HasFur(x))", "All x.(Rabbit(x) -> HasFur(x,y))", "all x.(Rabbit(x) -> HasFur(x))", "all x.(Baton(x) -> HasFur(x))"]}
{"id": "folio_train_118", "nl": "Some pets are rabbits.", "fol": "exists x.(IsPet(x) & IsReptile(x))", "prediction": ["exists x.(Pet(x) & Rabbit(x))", "exists x.(Pet(x) & Rabbit(x))", "exists x.(Pet(x) & Rabbit(x))", "exists x.(Pet(x) & Rabbit(x))", "exists x.(Pet(x) & Rabbit(x))", "exists x y.(Pet(x) & Rabbit(y))", "exists x.(Pet(x) & Rabbit(x))", "exists x.(Pet(x) & Rabbit(x))", "exists x.(Pet(x) & Rabbit(x))", "exists x.(Pet(x) & Rabbit(x))", "exists x.(Pet(x) & Rabbit(x))", "exists x.(Pet(x) & Rabbit(x))", "exists x.(Pet(x) & Rabbit(x))", "exists x.(Pet(x) & Rabbit(x))", "exists x.(Pet(x) & Rabbit(x))", "exists x.(Pet(x) & Rabbit(x))"]}
{"id": "folio_train_119", "nl": "Some pets do not have fur.", "fol": "exists x.(IsPet(x) & -HasFur(x))", "prediction": ["exists x.(Pet(x) & -HasFur(x))", "exists x.(Pet(x) & -HasFur(x))", "exists x.(Pet(x) & -HasFur(x))", "exists x y.(Pet(x) & Pet(y) & -HasFur(x,y))", "exists x.(Pet(x) & -HasFur(x))", "exists x.(Pet(x) & -HasFur(x))", "exists x.(Pet(x) & -HasFur(x))", "exists x.(Pet(x) & -HasFur(x))", "exists x.(Pet(x) & -HasFur(x))", "exists x.(Pet(x) & -HasFur(x))", "exists x.(Pet(x) & -HasFur(x))", "exists x.(Pet(x) & -HasFur(x))", "exists x.(Pet(x) & -HasFur(x))", "exists x.(Pet(x) & -HasFur(x))", "exists x.(Pet(x) & -HasFur(x))", "exists x.(Pet(x) & -HasFur(x))"]}
{"id": "folio_train_120", "nl": "All video applications are software.", "fol": "all x.(VideoApplication(x) -> SoftwareApplication(x))", "prediction": ["all x.(VideoApplication(x) -> Software(x))", "all x.(VideoApplication(x) -> Software(x))", "(all x.(VideoApplication(x) -> Software(x))", "all x y.((VideoApplication(x) & Software(y)) -> Software(x))", "all x.(VideoApplication(x) -> Software(x))", "all x.(ViolenceApplication(x) -> Software(x))", "(all x.(VideoApplication(x) -> Software(x))", "all x.(VisualApplication(x) -> Software(x))", "all x.(VideoApplication(x) -> Software(x))", "all x.(VideoApplication(x) -> Software(x))", "exists x.(VisualApplication(x) & Software(x))", "all x.(VideoApplication(x) -> Software(x))", "all x.(VideoApplication(x) -> Software(x))", "all x.(VideoApplication(x) -> Software(x))", "all x.(VideoApplication(x) -> Software(x))", "all x.(VideoApplication(x) -> Software(x))"]}
{"id": "folio_train_121", "nl": "All YouTube-related applications are video applications. ", "fol": "all x.(RelatedToYoutube(x) -> VideoApplication(x))", "prediction": ["all x.((YouTubeApplication(x) & RelatedTo(x,y)) -> VideoApplication(x))", "all x.(YouTubeApplication(x) -> VideoApplication(x))", "all x.((YouTubeApplication(x) & VideoApplication(x)) -> RelatedTo(x))", "all x y.((YouTubeApplication(x) & YouTubeApplication(y)) -> VideoApplication(x))", "all x.(YouTubeApplication(x) -> VideoApplication(x))", "all x.((YoutubeApplication(x) & RelatedTo(x,y)) -> VideoApplication(x))", "(all x.(YoutubeApplication(x) -> VideoApplication(x))", "all x.((YouTubeApplication(x) & RelatedTo(x,y)) -> VideoApplication(x))", "all x y.((YouTubeApplication(x) & YouTubeApplication(y)) -> VideoApplication(x))", "all x.(YouTubeApplication(x) -> VideoApplication(x))", "(all x.(YoutubeApplication(x) -> VideoApplication(x))", "all x.((YouTubeApplication(x) & VideoApplication(x)) -> RelatedTo(x,y))", "all x.(YouTube(x) -> VideoApplication(x))", "all x.(YoutubeApplication(x) -> VideoApplication(x))", "all x.(YouTubeApplication(x) -> VideoApplication(x))", "all x.((YouTubeApplication(x) & RelatedTo(x,y)) -> VideoApplication(x))"]}
{"id": "folio_train_122", "nl": "An APP is either related to YouTube or Instagram.", "fol": "all x.(RelatedToYoutube(x) | RelatedToInstagram(x))", "prediction": ["all x.(APP(x) -> (RelatedToYouTube(x) | RelatedToInstagram(x)))", "all x.(App(x) -> (RelatedToYouTube(x) | RelatedToInstagram(x)))", "all x.(APP(x) -> (RelatedToYoutube(x) | RelatedToInstagram(x)))", "all x.(App(x) -> (RelatedTo(x,YouTube) | RelatedTo(x,Instagram)))", "all x y.((App(x) & YouTube(y)) | Instagram(y)) -> RelatedTo(x,y))", "all x y.(App(x) -> (RelatedToYouTube(x,y) | RelatedToInstagram(x,y)))", "exists x.(APP(x) & ((RelatedToYoutube(x) | RelatedToInstagram(x))) | (RelatedToInstagram(x)))))", "all x.(App(x) -> (LinkedToYouTube(x) | RelatedToInstagram(x)))", "all x y.((APP(x) & YouTube(y)) | Instagram(y)) -> RelatedTo(x,y))", "all x.(APP(x) -> (RelatedToYouTube(x) | RelatedToInstagram(x)))", "all x.(App(x) -> (LinkedToYoutube(x) | RelatedToInstagram(x)))", "exists x.(APP(x) & (RelatedTo(x,YouTube) | RelatedTo(x,Instagram)))", "all x y.((App(x) & YouTube(y)) | Instagram(y)) -> RelatedTo(x,y))", "exists x.(App(x) & ((RelatedToYouTube(x) | RelatedToInstagram(x))) | RelatedToInstagram(x)))", "exists x.(APP(x) & RelatedTo(x,y) & (YouTube(y) | Instagram(y)))", "exists x.(App(x) & (RelatedToYoutube(x) | RelatedToInstagram(x)))"]}
{"id": "folio_train_123", "nl": "All Instagram is entertainment. ", "fol": "all x.(RelatedToInstagram(x) -> EntertainmentCategory(x))", "prediction": ["all x.(Instagram(x) -> Entertainment(x))", "all x.(Instagram(x) -> Entertainment(x))", "all x y.((Instagram(x) & Entertainment(y)) -> Entertainment(x))", "(all x.(Instagram(x) -> Entertainment(x))", "all x.( Instagram(x) -> Entertainment(x))", "All x.(IsInstagram(x) -> Entertainment(x))", "all x.(Instagram(x) -> Entertainment(x))", "All x.((Instagram(x) & Entertainment(x)) -> Entertainment(x))", "all x y.((Instagram(x) & Entertainment(y)) -> Entertainment(x))", "all x.(Instagram(x) -> Entertainment(x))", "All x.( Instagram(x) -> Entertainment(x))", "all x.(IsInstagram(x) -> Entertainment(x))", "all x.(Instagram(x) -> Entertainment(x))", "all x.(Instagram(x) -> Entertainment(x))", "All x.( Instagram(x) -> Entertainment(x))", "All x.(Instagram(x) -> Entertainment(x))"]}
{"id": "folio_train_124", "nl": "All software is programmed. ", "fol": "all x.(SoftwareApplication(x) -> IsProgrammed(x))", "prediction": ["all x.(Software(x) -> Programmable(x))", "all x.(Software(x) -> Programmable(x))", "(ProgrammedSoftware)", "all x.(Software(x) -> Programmable(x))", "(ProgrammedSoftware(x) -> Programmable(x))", "all x y.((Software(x) & Software(y)) -> Programmable(x))", "all x.(Software(x) -> Programmed(x))", "All software is programmed.", "all x.(Software(x) -> Programmable(x))", "all x.(Support(x) -> Programmable(x))", "all x.(Software(x) -> Programmed(x))", "all x.(Software(x) -> Programmed(x))", "all x.(Software(x) -> Programmed(x))", "all x.(Software(x) -> Programmed(x))", "all x.(Software(x) -> Programmed(x))", "All x.(Software(x) -> Programmable(x))"]}
{"id": "folio_train_125", "nl": "All entertainments are interesting.", "fol": "all x.(EntertainmentCategory(x) -> IsInteresting(x))", "prediction": ["all x.(Entertainment(x) -> Interesting(x))", "all x.(Entertainment(x) -> Interesting(x))", "(all x.(Entertainment(x) -> Interesting(x)))", "all x y.((Entertainment(x) & Entertainment(y)) -> Interesting(x))", "(InterestingEntertainment(x) & All(x) -> Interesting(x))", "all x.(Entertainment(x) -> Interesting(x))", "all x y.((Entertainment(x) & Entertainment(y)) -> Interesting(x))", "all x.(Entertainment(x) -> Interesting(x))", "all x.(Entertainment(x) -> Interesting(x))", "all x.(Entertainment(x) -> Interesting(x))", "all x.(Entertainment(x) -> Interesting(x))", "all x.(Entertainment(x) -> Interesting(x))", "all x.(Entertainment(x) -> Interesting(x))", "exists x.(Entertainment(x) & Interesting(x))", "all x.(Entertainment(x) -> Interesting(x))", "all x.(Entertainment(x) -> Interesting(x))"]}
{"id": "folio_train_126", "nl": "If something is interesting, then it is good.", "fol": "all x.(IsInteresting(x) -> IsGood(x))", "prediction": ["all x.((Interesting(x) & Good(x)) -> Interesting(x))", "all x.(Interesting(x) -> Good(x))", "all x.((Interesting(x) & Good(x)) -> Interesting(x))", "(Interesting(x) -> Good(x))", "all x.(Interesting(x) -> Good(x))", "all x y.((Interesting(x) & Interesting(y)) -> Good(x))", "all x.((Interesting(x) & Good(x)) -> Good(x))", "all x.(Interesting(x) -> Good(x))", "all x.((Interesting(x) & Good(x)) -> Interesting(x))", "all x.(Interesting(x) -> Good(x))", "all x.((Interesting(x) & Good(x)) -> Good(x))", "exists x.(Interesting(x) & Good(x))", "all x.((Interesting(x) & Good(x)) -> Interesting(x))", "exists x.(Interesting(x) & Good(x))", "exists x.(Interesting(x) & Good(x))", "All x.((Interesting(x) -> Good(x))"]}
{"id": "folio_train_127", "nl": "TikTok is not good.", "fol": "-IsGood(TikTok)", "prediction": ["all x.(TikTok(x) -> -Good(x))", "(-Good(TikTok))", "((TikTok(TikTok) & -Good(TikTok)))", "-GoodTikTok(TikTok)", "all x.(TikTok(x) -> -Good(x))", "(-Good(TikTok))", "-(TikTok(Tik) & Good(Tik))", "(-Good(TikTok))", "-(TikTok(t) & Good(t))", "all x.(TikTok(x) -> -Good(x))", "(-Good(TikTok))", "exists x.(TikTok(x) & -Good(x))", "(-Good(TikiTok))", "all x.(TikTok(x) -> -Good(x))", "-GoodTikTok.", "exists x.(TikTok(x) & -Good(x))"]}
{"id": "folio_train_128", "nl": "Tiktok is a program.", "fol": "IsProgrammed(TikTok)", "prediction": ["all x.(Tiktok(x) -> Program(x))", "(Program(Tiktok) | Program(Tiktok)))", "Tiktok is a program.", "(Program(Tiktok) & -Program(Tiktok))", "all x.(Tiktok(x) -> Program(x))", "all x y.((Tiktok(x) & Program(y)) -> Program(x))", "Tiktok is a program.", "(Program(Tiktok) & Program(Tiktok,Tiktok))", "all x.(Tiktok(x) -> Program(x))", "(Program(Tiktok) | Program(Tiktok)))", "all x.(Tikitok(x) -> Program(x))", "(Program(Tiktok) | Program(Tiktok,Tiktok)))", "all x.(Tiktok(x) -> Program(x))", "exists x.(TiktokProgram(x) & Program(x))", "all x.(Tiktok(x) -> Program(x))", "All x.(Titktok(x) -> Program(x))"]}
{"id": "folio_train_129", "nl": "Tiktok is either good or a program.", "fol": "(IsGood(TikTok) | IsProgrammed(TikTok))", "prediction": ["all x.(Tiktok(x) -> (Good(x) | Program(x)))", "(Good(Tiktok) | Program(Tiktok))", "all x.(Tiktok(x) -> (Good(x) | Program(x)))", "all x.(Tikitok(x) -> (Good(x) | Program(x)))", "(Good(Tiktok) | Program(Tiktok))", "all x y.((Tiktok(x) & Good(y)) | Program(y))", "all x.(Tiktok(x) -> (Good(x) | Program(x)))", "all x.(Titak(x) -> (Good(x) | Program(x)))", "(Good(Tiktok) | Program(Tiktok))", "(Good(Tiktok) | Program(Titok))", "all x.(Tiktok(x) -> (Good(x) | Program(x)))", "exists x.(Tikitok(x) & (Good(x) | Program(x)))", "exists x.(Tiktok(x) & Good(x) & Program(x))", "exists x.(Tikitok(x) & (Good(x) | Program(x)))", "all x.(Tiktok(x) -> (Good(x) | Program(x)))", "exists x.(Titktok(x) & Good(x) & Programmable(x))"]}
{"id": "folio_train_130", "nl": "Tiktok is not both related to youtube and a program.", "fol": "-(RelatedToYoutube(TikTok) & IsProgrammed(TikTok))", "prediction": ["all x.(Tiktok(x) -> -(RelatedToYoutube(x) & RelatedToProgram(x)))", "(-(RelatedToYoutube(Tiktok) & RelatedToProgram(Tiktok)))", "all x.(Tiktok(x) -> (-RelatedToYoutube(x) & RelatedToProgram(x)))", "(-RelatedToYoutube(Tiktok) & -RelatedToProgram(Tiktok))", "(-(RelatedToYoutube(Tiktok) & RelatedToProgram(Tiktok)))", "all x.(Tikitok(x) -> -(RelatedToYoutube(x) & RelatedToProgram(x)))", "-(Youtube(Tiktok) & Program(Tiktok))", "all x y.((Tiktok(x) & Youtube(y)) -> -(RelatedTo(x,y) & RelatedToProgram(x,y)))", "all x.(Tikitok(x) -> (-RelatedToYoutube(x) & RelatedToProgram(x)))", "(-(RelatedToYoutube(Tiktok) & RelatedToProgram(Tiktok)))", "exists x.(Tiktok(x) & -(RelatedToYoutube(x) & RelatedToProgram(x)))", "-(RelatedToYoutube(titok) & RelatedToProgram(titok))", "all x.(Tikitok(x) -> (-RelatedToYoutube(x) & RelatedToProgram(x)))", "exists x.(Tiktok(x) & -(RelatedToYoutube(x) & RelatedToProgram(x)))", "(-(RelatedToYoutube(Tiktok) & RelatedToProgram(Tiktok)))", "exists x.(Tiktok(x) & -(RelatedToYoutube(x) & RelatedToProgram(x)))"]}
{"id": "folio_train_131", "nl": "Tiktok is either related to youtube or a program.", "fol": "(RelatedToYoutube(TikTok) | IsProgrammed(TikTok))", "prediction": ["all x.(Tiktok(x) -> (RelatedToYoutube(x) | RelatedToProgram(x)))", "(RelatedToYoutube(Tiktok) | RelatedToProgram(Tiktok))", "all x.(Tikitok(x) -> (RelatedToYoutube(x) | RelatedToProgram(x)))", "all x.(Tiktok(x) -> (RelatedToYoutube(x) | RelatedToProgram(x)))", "all x y.((Tiktok(x) & Youtube(y)) | Program(y)) -> RelatedTo(x,y))", "all x y.((Tikitok(x) & Youtube(y)) | Program(y)) -> RelatedTo(x,y))", "(RelatedToYoutube(Tiktok) | RelatedToProgram(Tiktok))", "exists x.(Tikitok(x) & (RelatedToYoutube(x) | RelatedToProgram(x)))", "(RelatedToYoutube(Tiktok) | RelatedToProgram(Tiktok))", "all x.(Tiktok(x) -> (RelatedToYoutube(x) | RelatedToProgram(x)))", "exists x.(Titak(x) & (RelatedToYoutube(x) | RelatedToProgram(x)))", "all x y.((Tikitok(x) & (Youtube(y) | Program(y))) -> RelatedTo(x,y))", "all x.(Tiktok(x) -> (RelatedToYoutube(x) | RelatedToProgram(x)))", "exists x.(Tikitok(x) & (RelatedToYoutube(x) | RelatedToProgram(x)))", "exists x.(Tiktok(x) & (RelatedToYoutube(x) | RelatedToProgram(x)))", "exists x.(Ticktok(x) & (RelatedToYoutube(x) | RelatedToProgram(x)))"]}
{"id": "folio_train_132", "nl": "Ordinary is an unincorporated community.", "fol": "IsUnincorporatedCommunity(Ordinary)", "prediction": ["all x.(Ordinary(x) -> UnincorporatedCommunity(x))", "all x.(Ordinary(x) -> UnincorporatedCommunity(x))", "Ordinary is unincorporatedcommunity(x)", "Ordinary (UnincorporatedCommunity)", "(UnincorporatedCommunity(Ordinary)", "all x y.((Ordinary(x) & Community(y)) -> Unincorporated(x))", "(UnincorporatedCommunity(ordinary) & UnincorporatedCommunity(ordinary))", "all x.(Ordinary(x) -> UnincorporatedCommunity(x))", "Ordinary is unincorporatedcommunity(x)", "(UnincorporatedCommunity(Ordinary)", "Ordinary (unincorporatedCommunity)", "all x.(Ordinary(x) -> UnincorporatedCommunity(x))", "all x.(Ordinary(x) -> UnincorporatedCommunity(x))", "all x.(Ordinary(x) -> UnincorporatedCommunity(x))", "All x.(Ordinary(x) -> -IncorporatedCommunity(x))", "all x.(Ordinary(x) -> UnincorporatedCommunity(x))"]}
{"id": "folio_train_133", "nl": "Located within Elliot County, Ordinary is on Kentucky Route 32.", "fol": "(LocatedIn(Ordinary,Elliotcounty) & LocatedOnRoute(Ordinary,Kentuckyroute32))", "prediction": ["All x.(Ordinary(x) -> (LocatedInElliotCounty(x) & OnKentuckyRoute32(x)))", "(LocatedInElliotCounty(Ordinary) & KentuckyRoute32(Ordinary))", "located within ElliotCounty, Ordinary is on KentuckyRoute32.", "(LocatedInElliotCounty(Ordinary) & OnKentuckyRoute32(Ordinary))", "(LocatedWithinElliotCounty(Ordinary) & KentuckyRoute32(Ordinary))", "Ordinary is located within ElliotCounty, KentuckyRoute32.", "Located within ElliotCounty, Ordinary is on KentuckyRoute32.", "(LocatedInElliotCounty(Ordinary) & KentuckyRoute32(Ordinary))", "All x.(Ordinary(x) -> (LocatedInElliotCounty(x) & OnKentuckyRoute32(x)))", "located within ElliotCounty, Ordinary is on KentuckyRoute32.", "(LocatedInElliotCounty(Normary) & KentuckyRoute32(Ordinary))", "LocalizedWithinElliotCounty, Ordinary is on KentuckyRoute32.", "Ordinary is located within Elliot County, Kentucky Route 32.", "LocatedInElliotCounty, Ordinary is on KentuckyRoute32.", "all x.(Ordinary(x) -> (LocatedInElliotCounty(x) & OnKentuckyRoute32(x)))", "All x.(Ordinary(x) -> (LocatedInElliotCountry(x) & OnKentuckyRoute32(x)))"]}
{"id": "folio_train_134", "nl": "Ordinary is located northwest of Sandy Hook.", "fol": "LocatedNorthwestOf(Ordinary,Sandyhook)", "prediction": ["all x.(Ordinary(x) -> LocatedNorthwestOfSandyHook(x))", "Ordinary is located northwest of SandyHook.", "(NorthwestOfSandyHook(Ordinary))", "(LocatedNorthwestOfSandyHook(Ordinary))", "(Ordinary(or) LocatedNorthwestOfSandyHook(or))", "Ordinary is located northwest of Sandy Hook.", "all x.(Ordinary(x) -> SandyHook(x))", "All x.(Ordinary(x) -> NorthwestOfSandyHook(x))", "Ordinary (NorthwestOfSandyHook(Ordinary))", "LocatedNorthwestOfSandyHook(Ordinary)", "(NorthwestOfSandyHook(Ordinary))", "Ordinary is located northwest of SandyHook.", "all x.(Ordinary(x) -> (LocatedNorthwestOfSandyHook(x)))", "Ordinary is located northwest of Sandy Hook.", "Ordinary is located northwest of SandyHook.", "Ordinary is located northwest of Sandy Hook."]}
{"id": "folio_train_135", "nl": "There are no unincorporated communities along Kentucky Route 32.", "fol": "-exists x.(IsUnincorporatedCommunity(x) & LocatedOnRoute(x,Kentuckyroute32))", "prediction": ["-exists x.(UnincorporatedCommunity(x) & AlongKentuckyRoute32(x))", "There are no unincorporatedCommunities(KentuckyRoute32)", "KeenUnincorporatedCommunity(ke) & AlongKentuckyRoute32(ke))", "Exists x.(UnincorporatedCommunity(x) & KentuckyRoute32(x))", "-exists x.(UnincorporatedCommunity(x) & AlongKentuckyRoute32(x))", "-UnincorporatedCommunity(KentuckyRoute32)", "There are no unincorporatedCommunities(KentuckyRoute32)", "-exists x.(UnincorporatedCommunity(x) & KentuckyRoute32(x))", "(NoUnincorporatedCommunity(KentuckyRoute32) & -exists y.(KentuckyRoute32(y) & LocatedIn(y,x))))", "KeenUnincorporatedCommunity(ke) & AlongKentuckyRoute32(ke))", "(-UnincorporatedCommunity(KentuckyRoute32))", "There are no unincorporatedCommunities(KentuckyRoute32)", "-exists x.(UnincorporatedCommunity(x) & AlongKentuckyRoute32(x))", "-exists x.(UnincorporatedCommunity(x) & KentuckyRoute32(x))", "KeenUnincorporatedCommunityAlongKentuckyRoute32.", "-exists x.(UnincorporatedCommunity(x) & AlongKentuckyRoute32(x))"]}
{"id": "folio_train_136", "nl": "There is an unincorporated community in Elliot County.", "fol": "exists x.(IsUnincorporatedCommunity(x) & LocatedIn(x,Elliotcounty))", "prediction": ["exists x.(UnincorporatedCommunity(x) & ElliotCounty(x))", "Exists x.(UnincorporatedCommunity(x) & ElliotCounty(x))", "Exists x.(UnincorporatedCommunity(x) & InElliotCounty(x))", "exists x.(UnincorporatedCommunity(x) & ElliotCounty(x))", "(UnincorporatedCommunity(ElliotCounty)", "exists x.(UnincorporatedCommunity(x) & InElliotCounty(x))", "exists x y.(UnincorporatedCommunity(x) & ElliotCounty(y))", "all x y.((ElliotCounty(x) & Community(y)) -> Unincorporated(x,y))", "all x y.((ElliotCounty(x) & UnincorporatedCommunity(y)) -> Inhabits(x,y))", "Exists x.(UnincorporatedCommunity(x) & ElliotCounty(x))", "exist's x.(UnincorporatedCommunity(x) & ElliotCountry(x))", "exists x.(UnincorporatedCommunity(x) & ElliotCounty(x))", "exists x.(UnincorporatedCommunity(x) & InElliotCounty(x))", "exists x.(UnincorporatedCommunity(x) & ElliotCounty(x))", "exists x.(UnincorporatedCommunity(x) & InElliotCounty(x))", "exists x.(UnincorporatedCommunity(x) & ElliotCounty(x))"]}
{"id": "folio_train_137", "nl": "All young adults go on a diet.", "fol": "all x.(IsYoungAdult(x) -> FollowsDiet(x))", "prediction": ["all x.(YoungAdult(x) -> GoesOnDiet(x))", "all x.(YoungAdult(x) -> GoesOnDiet(x))", "all x y.((YoungAdult(x) & Diet(y)) -> GoesOn(x,y))", "all x.((YoungAdult(x) & Diet(x)) -> GoesOn(x))", "all x.(YearlyAdult(x) -> GoesOnDiet(x))", "all x.(YoungAdult(x) -> GoesOnDiet(x))", "all x y.((YoungAdult(x) & Diet(y)) -> GoesOn(x,y))", "all x.(YoungAdult(x) -> GoesOnDiet(x))", "(all x.(YoungAdult(x) -> GoesOnDiet(x)))", "all x y.((YoungAdult(x) & Diet(y)) -> GoesOn(x,y))", "all x.((YoungAdult(x) & Diet(x)) -> GoesOn(x))", "all x.(YearlyAdult(x) -> GoesOnDiet(x))", "all x.(YoungAdult(x) -> Diet(x))", "(all x.(YoungAdult(x) -> Diet(x)))", "all x.(YoungAdult(x) -> GoesOnDiet(x))", "all x.(YoungAdult(x) -> OnDiet(x))"]}
{"id": "folio_train_138", "nl": "All college students are young adults.", "fol": "all x.(IsCollegeStudent(x) -> IsYoungAdult(x))", "prediction": ["all x.(CollegeStudent(x) -> YoungAdult(x))", "all x.(CollegeStudent(x) -> YoungAdult(x))", "all x y.((CollegeStudent(x) & College(y)) -> YoungAdult(x))", "all x.(CollegeStudent(x) -> YoungAdult(x))", "(all x.(CollegeStudent(x) -> YoungAdult(x)))", "all x.(CollegeStudent(x) -> YoungAdult(x))", "(all x.(CollegeStudent(x) -> YoungAdult(x)))", "all x.(CollegeStudent(x) -> YoungAdult(x))", "all x.(CollegiateStudent(x) -> YoungAdult(x))", "all x.(CollegeStudent(x) -> YoungAdult(x))", "all x.(CouncilStudent(x) -> YoungAdult(x))", "all x.(CollegeStudent(x) -> YoungAdult(x))", "all x.(CollegeStudent(x) -> YoungAdult(x))", "all x.(CollegeStudent(x) -> YoungAdult(x))", "all x.(CollegeStudent(x) -> YoungAdult(x))", "all x.(CollegeStudent(x) -> YoungAdult(x))"]}
{"id": "folio_train_139", "nl": "All Yale students are college students.", "fol": "all x.(IsYaleStudent(x) -> IsCollegeStudent(x))", "prediction": ["all x.(YaleStudent(x) -> CollegeStudent(x))", "(all x.(YaleStudent(x) -> CollegeStudent(x)))", "all x.((Student(x) & Yale(x)) -> CollegeStudent(x))", "all x.(YaleStudent(x) -> CollegeStudent(x))", "all x y.((YaleStudent(x) & YaleStudent(y)) -> CollegeStudent(x))", "all x.(Yale(x) -> CollegeStudent(x))", "(all x.(YaleStudent(x) -> CollegeStudent(x)))", "all x.(YaleStudent(x) -> CollegeStudent(x))", "all x.(Student(x) -> CollegeStudent(x))", "all x.((Student(x) & Yale(x)) -> CollegeStudent(x))", "(all x.(YaleStudent(x) -> CollegeStudent(x))", "all x.(YoungStudent(x) -> CollegeStudent(x))", "all x.(YaleStudent(x) -> CollegeStudent(x))", "all x.(Student(x) -> CollegeStudent(x))", "all x.(YaleStudent(x) -> CollegeStudent(x))", "all x.(JacksonStudent(x) -> CollegeStudent(x))"]}
{"id": "folio_train_140", "nl": "Someone is either a Yale student or a Harvard student.", "fol": "all x.(IsYaleStudent(x) | IsHarvardStudent(x))", "prediction": ["all x.((Student(x) & YaleStudent(x)) | HarvardStudent(x))", "exists x.(Student(x) & (YaleStudent(x) | HarvardStudent(x)))", "all x.((Student(x) & YaleStudent(x)) | HarvardStudent(x))", "exists x.(Student(x) & (YaleStudent(x) | HarvardStudent(x)))", "all x.((Student(x) & Yale(x)) | Harvard(x))", "all x y.((Student(x) & Yale(y)) | Harvard(y))", "all x.((YaleStudent(x) | HarvardStudent(x)) -> (YaleStudent(x) | HarvardStudent(x)))", "all x.((Student(x) & (YaleStudent(x) | HarvardStudent(x))) -> (Student(x) & Student(x)))", "exists x.(Student(x) & ((YaleStudent(x) & YaleStudent(x)) | HarvardStudent(x))))", "all x y.((Student(x) & Student(y) & Yale(x)) | Harvard(y))", "exists x.(Student(x) & (YaleStudent(x) | HarvardStudent(x)))", "exists x.(Student(x) & YaleStudent(x) & HarvardStudent(x))", "all x.((Student(x) & YaleStudent(x)) | HarvardStudent(x))", "all x y.((Student(x) & Yale(y)) | Harvard(y))", "exists x.(Student(x) & YaleStudent(x) & HarvardStudent(x))", "exists x.(Student(x) & (YaleStudent(x) | HarvardStudent(x)))"]}
{"id": "folio_train_141", "nl": "All Harvard students are diligent.", "fol": "all x.(IsHarvardStudent(x) -> IsDiligent(x))", "prediction": ["all x.(HarvardStudent(x) -> Diligent(x))", "all x.(HarvardStudent(x) -> Diligent(x))", "(Diligent(HarvardStudent(Harvard))", "all x.((Student(x) & Harvard(x)) -> Diligent(x))", "all x y.((HarvardStudent(x) & HarvardStudent(y)) -> Diligent(x))", "(Diligent(HarvardStudent) & All(HarvardStudent))", "all x.(HasHarvardStudent(x) -> Diligent(x))", "all x.(HarvardStudent(x) -> Diligent(x))", "all x.(Student(x) -> Diligent(x))", "(All x.(HarvardStudent(x) -> Diligent(x))", "all x y.((HarvardStudent(x) & HarvardStudent(y)) -> Diligent(x,y))", "all x.(HarvardStudent(x) -> Diligent(x))", "All x.(Student(x) -> Diligent(x))", "all x.(HarvardStudent(x) -> Diligent(x))", "all x.(HarvardStudent(x) -> Disciplined(x))", "all x.(HarvardStudent(x) -> Diligent(x))"]}
{"id": "folio_train_142", "nl": "If Susan is a Harvard student, then she is a young adult.", "fol": "(IsHarvardStudent(Susan) -> IsYoungAdult(Susan))", "prediction": ["all x.((Student(x) & Harvard(x)) -> YoungAdult(x))", "((HarvardStudent(Susan) & HarvardStudent(Susan)) -> YoungAdult(Susan))", "all x.((Student(x) & Harvard(x)) -> YoungAdult(x))", "all x.((HarvardStudent(x) & Susan(x)) -> YoungAdult(x))", "(all x.((Student(x) & Harvard(x)) -> YoungAdult(x)))", "((Student(Susan) & Harvard(Susan)) | YoungAdult(Susan)))", "all x.(HarvardStudent(x) -> YoungAdult(x))", "all x.((Student(x) & Harvard(x)) -> YoungAdult(x))", "all x y.((Student(x) & Harvard(y) & Susan(x)) -> YoungAdult(x))", "all x.((Student(x) & Harvard(x)) -> YoungAdult(x))", "all x.(HarvardStudent(x) -> YoungAdult(x))", "all x.((Student(x) & HarvardStudent(x)) -> YoungAdult(x))", "all x.((Student(x) & Harvard(x)) -> YoungAdult(x))", "all x.((Susan(x) & HarvardStudent(x)) -> YoungAdult(x))", "all x.(HarvardStudent(x) -> YoungAdult(x))", "all x.((Student(x) & Harvard(x)) -> YoungAdult(x))"]}
{"id": "folio_train_143", "nl": "If Susan is a Yale student, then she does not go on a diet.", "fol": "(IsYaleStudent(Susan) -> -FollowsDiet(Susan))", "prediction": ["all x.((Susan(x) & YaleStudent(x)) -> -Diet(x))", "all x.((Student(x) & Yale(x)) -> -Diet(x))", "(all x.((Susan(x) & YaleStudent(x)) -> -Diet(x)))", "(YaleStudent(Susan,Y) & YaleStudent(Susan,Y)) -> -Diet(Susan,Y))", "all x.((Susan(x) & YaleStudent(x)) -> -Diet(x))", "all x.(YaleStudent(x) -> -Diet(x))", "all x.((Student(x) & Yale(x)) -> -Diet(x))", "(all x.((Susan(x) & YaleStudent(x)) -> -Diet(x)))", "all x.((Susan(x) & YaleStudent(x)) -> -Diet(x))", "all x.(YaleStudent(x) -> -Diet(x))", "(all x.((Susan(x) & YaleStudent(x)) -> -Diet(x)))", "all x.((Student(x) & Yale(x)) -> -Diet(x))", "all x.((YaleStudent(x) & Susan(x)) -> -Diet(x))", "all x.(YaleStudent(x) -> -Diet(x))", "all x.((Susan(x) & YaleStudent(x)) -> -Diet(x))", "all x.(YaleStudent(x) -> -Diet(x))"]}
{"id": "folio_train_144", "nl": "Susan is a college student.", "fol": "IsCollegeStudent(Susan)", "prediction": ["(CollegeStudent(Susan) & CollegeStudent(Susan))", "all x.((Susan(x) & CollegeStudent(x)) -> CollegeStudent(x))", "Susan is a college student.", "all x.(CollegeStudent(x) -> Susan(x))", "(CollegeStudent(Susan) & CollegeStudent(Susan))", "all x.((Susan(x) & CollegeStudent(x)) -> CollegeStudent(x))", "Susan is a college student.", "Susan is college student.", "(CollegeStudent(Susan)", "Susan is a college student.", "all x.((Susan(x) & CollegeStudent(x)) -> CollegeStudent(x))", "Susan is college student.", "(CollegeStudent(Susan)", "Susan is a college student.", "Susan is CollegeStudent(s)", "(CollegeStudent(Susan)"]}
{"id": "folio_train_145", "nl": "Susan goes on a diet and is diligent.", "fol": "(FollowsDiet(Susan) & IsDiligent(Susan))", "prediction": ["all x.(Susan(x) -> (GoesOnDiet(x) & Diligent(x)))", "all x.((Susan(x) & Diet(x)) -> Diligent(x))", "(GoesOnDiet(Susan) & Diligent(Susan))", "Susan goes onDietAndDiligent(Susan)", "all x.(Susan(x) -> (GoesOnDiet(x) & Diligent(x)))", "Susan goes on Diet(s) & Diligent(s))", "all x y.((Susan(x) & Diet(y)) -> Diligent(x,y))", "(GoesOnDiet(Susan) & Diligent(Susan))", "all x y.((Susan(x) & Diet(y) & Diligent(x)) -> GoesOn(x,y))", "all x.((Susan(x) & Diet(x)) -> Diligent(x))", "all x.(Susan(x) -> (GoesOnDiet(x) & Diligent(x)))", "exists x.(Susan(x) & Diet(x) & Diligent(x))", "(GoesOnDiet(Susan) & Diligent(Susan))", "all x.(Susan(x) -> (GoesOnDiet(x) & Diligent(x)))", "(GoesOnDiet(Susan) & Diligent(Susan))", "(GoesOnDiet(Susan) & Diligent(Susan))"]}
{"id": "folio_train_146", "nl": "Susan does not go on a diet and is diligent.", "fol": "(-FollowsDiet(Susan) & IsDiligent(Susan))", "prediction": ["all x.((Susan(x) & -Diet(x)) -> Diligent(x))", "(-Diet(Susan) & Diligent(Susan))", "(-GoesOnDiet(Susan) & Diligent(Susan))", "all x.((Susan(x) & -Diet(x)) -> Diligent(x))", "(-Diet(Susan) & Diligent(Susan))", "all x.(Susan(x) -> (-Diet(x) & Diligent(x)))", "(-GoesOnDiet(Susan) & Diligent(Susan))", "-(Diet(s) & Diligent(s))", "all x.((Susan(x) & -Diet(x)) -> Diligent(x))", "exists x.(Susan(x) & -GoesOnDiet(x) & Diligent(x))", "(-GoesOnDiet(Susan) & Diligent(Susan))", "(-Diet(Susan) & Diligent(Susan))", "all x.(Susan(x) -> (-Diet(x) & Diligent(x)))", "(-DietOn(Susan) & Diligent(Susan))", "all x.((Susan(x) & -Diet(x)) -> Diligent(x))", "all x.((Susan(x) & -Diet(x)) -> Diligent(x))"]}
{"id": "folio_train_147", "nl": "Vic DiCara plays guitar and bass.", "fol": "(PlaysInstrument(Vicdicara,Guitar) & PlaysInstrument(Vicdicara,Bass))", "prediction": ["(PlaysGuitar(vicDiCara) & PlaysBass(vicDiCara))", "all x.(VicDiCara(x) -> (PlaysGuitar(x) & PlaysBass(x)))", "(PlaysGuitar(VicDiCara) & PlaysBass(VicDiCara))", "Vic DiCara plays guitar and bass.", "-(VicDiCara(vic) & Guitar(vic) & Bass(vic)))", "Vic DiCara playsGuitarAndBass(vic,dicara)", "all x.(VicDiCara(x) -> (PlaysGuitar(x) & PlaysBass(x)))", "(plays(VicDiCara,Guitar) & Plays(VicDiCara,Bass))", "(PlaysGuitar(vicDiCara) & PlaysBass(vicDiCara))", "-(VicDiCara(Vic) & Guitar(Vic) & Bass(Vic))", "(PlaysGuitar(VicDiCara,Guitar) & PlaysBass(VicDiCara,Bass))", "(PlaysGuitar(VicDiCara) & PlaysBass(VicDiCara))", "all x.(VicDiCara(x) -> (PlaysGuitar(x) & PlaysBass(x)))", "Vic DiCara plays guitar and bass.", "(playsGuitar(vicDiCara) & PlaysBass(vicDiCara))", "all x.(VicDiCara(x) -> (PlaysGuitar(x) & PlaysBass(x)))"]}
{"id": "folio_train_148", "nl": "The only style of music Vic DiCara plays is punk music.", "fol": "-exists x.(PlaysMusicStyle(Vicdicara,Punk) & PlaysMusicStyle(Vicdicara,x))", "prediction": ["all x.((MusicStyle(x) & VicDiCaraPlays(x)) -> PunkMusic(x))", "only style of music VicDiCaraPlays(vic,punk)", "all x y.((MusicStyle(x) & VicDiCara(y) & Plays(x,y)) -> PunkMusic(y))", "(exists x.(MusicStyle(x) & VicDiCaraPlays(x)) & PunkMusic(x))", "all x.((MusicStyle(x) & VicDiCaraPlays(x)) -> PunkMusic(x))", "(PunkMusic(vicDiCara,PunkMusic) & Plays(vicDiCara,PunkMusic))", "all x y.((MusicStyle(x) & VicDiCara(y) & Plays(y,PunkMusic)) -> Plays(y,PunkMusic))", "all x y.((MusicStyle(x) & MusicStyle(y) & VicDiCara(x)) -> PlaysPunk(x,y))", "all x.((MusicStyle(x) & VicDiCaraPlays(x)) -> PunkMusic(x))", "(exists x.(MusicStyle(x) & Plays(x,Punk)))", "all x.((MusicStyle(x) & VicDiCaraPlays(x)) -> Punk(x))", "All x.(PunkMusic(x) -> Plays(x))", "all x.((MusicStyle(x) & VicDiCara(x)) -> PlaysPunk(x))", "all x.((MusicStyle(x) & VicDiCaraPlays(x)) -> PunkMusic(x))", "All x.(PunkMusic(x) -> Plays(x))", "all x.((MusicStyle(x) & VicDiaraPlays(x)) -> PunkMusic(x))"]}
{"id": "folio_train_149", "nl": "Vic DiCara played in the band Inside Out.", "fol": "PlayedInBand(Vicdicara,InsideOut)", "prediction": ["all x y.((VicDiCara(x) & Band(y)) -> PlayedInInsideOut(x,y))", "(InsideOut(VicDiCara) -> PlayedIn(VicDiCara))", "Vic DiCara played in the band InsideOut.", "all x.(VicDiCara(x) -> PlayedInInsideOut(x))", "(PlayedInInsideOut(VicDiCara) & InsideOut(VicDiCara))", "(InsideOut(vicDiCara) -> PlayedIn(vic,DiCara))", "-(VicDiCara(vic) & InsideOut(vic))", "all x.((VicDiCara(x) & BandInsideOut(x)) -> PlayedIn(x,y))", "(InsideOut) & VicDiCara(Vic))", "all x y.((VicDiCara(x) & Band(y)) -> PlayedIn(x,y))", "Vic DiCara played in the band InsideOut.", "(InsideOut) -> PlayedIn(VicDiCara,InsideOut))", "-InsideOut(vicDiCara)", "Vic DiCara played in the band InsideOut.", "Vic DiCara played in InsideOut.", "Vic DiCara played in the band InsideOut(vic,dicara)"]}
{"id": "folio_train_150", "nl": "Inside Out was a punk band.", "fol": "PunkBand(InsideOut)", "prediction": ["InsideOut was a punk band.", "All x.(InsideOut(x) -> PunkBand(x))", "InsideOut (PunkBand)", "Originally, InsideOut was a punk band.", "InsideOut(x) -> PunkBand(x))", "InsideOut was a punk band.", "All x.(InsideOut(x) -> PunkBand(x))", "all x.((InsideOut(x) & PunkBand(x)) -> -PunkBand(x))", "InsideOut(InsideOut) -> PunkBand(InsideOut))", "InsideOut (PunkBand)", "all x.(InsideOut(x) -> PunkBand(x))", "InsideOut was a punkband.", "All x.(InsideOut(x) -> PunkBand(x))", "InsideOut (PunkBand)", "InsideOut was a punk band.", "All x.(InsideOut(x) -> PunkBand(x))"]}
{"id": "folio_train_151", "nl": "A musician of Inside Out plays bass.", "fol": "exists x.(PlayedInBand(x,InsideOut) & PlaysInstrument(x,Bass))", "prediction": ["all x.(InsideOutMusician(x) -> PlaysBass(x))", "all x.((Musician(x) & InsideOut(x)) -> PlaysBass(x))", "all x y.((Musician(x) & InsideOut(y)) -> PlaysBass(x,y))", "all x.(InsideOutMusician(x) -> PlaysBass(x))", "(InsideOutMusician(x) & PlaysBass(x))", "exists x.(Musician(x) & InsideOut(x) & PlaysBass(x))", "all x.(InsideOut(x) -> PlaysBass(x))", "all x y z.((Musician(x) & InsideOut(y) & Bass(z)) -> Plays(x,y,z))", "all x.((Musician(x) & InsideOut(x)) -> PlaysBass(x))", "all x y.((Musician(x) & InsideOut(y)) -> PlaysBass(x,y))", "exists x.(Musician(x) & InsideOut(x) & PlaysBass(x))", "all x y.((Musician(x) & InsideOut(y)) -> PlaysBass(x,y))", "exists x.(Musician(x) & InsideOut(x) & PlaysBass(x))", "All x y.((Musician(x) & InsideOut(y)) -> PlaysBass(x,y))", "exists x.(Musician(x) & InsideOut(x) & PlaysBass(x))", "All x.(InsideOutMusician(x) -> PlaysBass(x))"]}
{"id": "folio_train_152", "nl": "All athletes are good at sports.", "fol": "all x.(IsAthlete(x) -> IsGoodAtSports(x))", "prediction": ["all x.(Athlete(x) -> GoodAtSport(x))", "all x.(Athlete(x) -> GoodAtSport(x))", "(all x.(Athlete(x) -> GoodAtSports(x)))", "all x.(Athlete(x) -> GoodAtSport(x))", "all x y.((Athlete(x) & Sport(y)) -> GoodAt(x,y))", "all x y.((Athlete(x) & Sport(y) & GoodAt(x,y)) -> GoodAt(x,y))", "exists x.all y.(Athlete(x) -> GoodAtSport(x))", "all x.(Athlete(x) -> GoodAtSports(x))", "all x.(Athlete(x) -> GoodAtSport(x))", "all x.(Athlete(x) -> GoodAtSports(x))", "all x.(Athlete(x) -> GoodAtSport(x))", "all x.(Athlete(x) -> GoodAtSports(x))", "all x.(Athlete(x) -> GoodAtSport(x))", "all x.(Athlete(x) -> GoodAt(x,Sports))", "all x.(Athlete(x) -> GoodAtSports(x))", "exists x.(Athlete(x) & GoodAt(x,Sports))"]}
{"id": "folio_train_153", "nl": "All Olympic gold medal winners are good athletes.", "fol": "all x.(IsOlympicGoldMedalWinner(x) -> IsAthlete(x))", "prediction": ["all x.(OlympicGoldMedalWinner(x) -> GoodAthlete(x))", "all x.(OlympicGoldMedalWinner(x) -> GoodAthlete(x))", "all x.((OlympicGoldMedalWinner(x) & GoodAthlete(x)) -> GoodAthlete(x))", "all x y.((OlympicGoldMedalWinner(x) & OlympicGoldMedal(y)) -> GoodAthlete(x))", "all x.(GoldMedalWinner(x) -> GoodAthlete(x))", "all x.(OlympicGoldMedalWinner(x) -> GoodAthlete(x))", "all x.((OlympicGoldMedalWinner(x) & GoodAthlete(x)) -> GoodAthlete(x))", "all x y.((OlympicGoldMedalWinner(x) & OlympicGoldMedal(y)) -> GoodAthlete(x,y))", "all x.(OlympicGoldMedalWinner(x) -> GoodAthlete(x))", "(all x.(OlympicGoldMedalWinner(x) -> GoodAthlete(x))", "all x.(GoldMedalWinner(x) -> GoodAthlete(x))", "all x.((OlympicGoldMedalWinner(x) & GoodAthlete(x)) -> GoodAthlete(x))", "all x.(OlympicGoldMedalWinner(x) -> GoodAthlete(x))", "(all x.(OlympicGoldMedalWinner(x) -> GoodAthlete(x))", "all x.(OlympicGoldMedalWinner(x) -> GoodAthlete(x))", "all x.(OlympicGoldMedalWinning(x) -> GoodAthlete(x))"]}
{"id": "folio_train_154", "nl": "No scientists are good at sports.", "fol": "all x.(IsScientist(x) -> -IsGoodAtSports(x))", "prediction": ["-exists x.(Scientist(x) & GoodAtSport(x))", "all x.(Scientist(x) -> -GoodAtSports(x))", "-exists x.(Scientist(x) & GoodAtSport(x))", "all x.(Scientist(x) -> -GoodAtSport(x))", "-exists x.(Scientist(x) & GoodAtSports(x))", "-all x.(Scientist(x) -> GoodAtSport(x))", "all x.(Scientist(x) -> GoodAtSports(x))", "(exists x.(Scientist(x) & GoodAtSport(x)))", "all x.(Scientist(x) -> -GoodAtSports(x))", "-exists x.(Scientist(x) & GoodAtSport(x))", "all x.(Scientist(x) -> GoodAtSport(x))", "\u2013 exists x.(Scientist(x) & GoodAtSport(x))", "-exists x.(Scientist(x) & GoodAtSports(x))", "-exists x.(Scientist(x) & GoodAtSport(x))", "-exists x.(Scientist(x) & GoodAtSports(x))", "-exists x.(Scientist(x) & GoodAtSports(x))"]}
{"id": "folio_train_155", "nl": "All Nobel laureates are scientists.", "fol": "all x.(IsNobelLaureate(x) -> IsScientist(x))", "prediction": ["all x.(NobelLaureate(x) -> Scientist(x))", "all x.(NobelLaureate(x) -> Scientist(x))", "all x y.((NobelLaureate(x) & Scientist(y)) -> -Scientist(x))", "(all x.(NobelLaureate(x) -> Scientist(x))", "all x.(NobelLaureate(x) -> Scientist(x))", "all x.(NovativeLaureate(x) -> Scientist(x))", "(all x.(NobelLaureate(x) -> Scientist(x))", "all x y.((NobelLaureate(x) & Scientist(y)) -> -Scientist(x))", "all x.(NovalleLaureate(x) -> Scientist(x))", "all x.(NobelLaureate(x) -> Scientist(x))", "all x.(NobelLaureate(x) -> Scientist(x))", "(all x.(NobelLaureate(x) -> Scientist(x))", "all x.(NobelLaureate(x) -> Scientist(x))", "all x.(NobelLaureate(x) -> Scientist(x))", "all x.(NobelLaureate(x) -> Scientist(x))", "all x.(NobelLaureate(x) -> Scientist(x))"]}
{"id": "folio_train_156", "nl": "Amy is good at sports or Amy is an Olympic gold medal winner.", "fol": "(IsGoodAtSports(Amy) | IsOlympicGoldMedalWinner(Amy))", "prediction": ["(all x.(Amy(x) -> GoodAtSports(x)) | (Amy(x) -> OlympicGoldMedalWinner(x))))", "exists x.(Amy(x) & ((GoodAtSports(x) & -OlympicGoldMedalWinner(x)) | (-OlympicGoldMedalWinner(x)))))", "(exists x.(Amy(x) & GoodAtSports(x)) | exists y.(Amy(y) & OlympicGoldMedalWinner(y))))", "(all x.(Amy(x) -> (GoodAtSports(x) | OlympicGoldMedalWinner(x))))", "(all x.(Amy(x) -> GoodAtSports(x)) | (Amy(x) -> OlympicGoldMedalWinner(x))))", "(exists x.(Amy(x) & (GoodAtSports(x) | OlympicGoldMedalWinner(x))))", "all x.(Amy(x) -> (GoodAtSports(x) | OlympicGoldMedalWinner(x)))", "exists x.(Amy(x) & ((GoodAtSports(x) & (OlympicGoldMedalWinner(x)) | (OlympicGoldMedalWinner(x)))))", "(all x.(Amy(x) -> GoodAtSports(x)) | (Amy(x) -> OlympicGoldMedalWinner(x))))", "all x.(Amy(x) -> (GoodAtSports(x) | OlympicGoldMedalWinner(x)))", "exists x.(Amy(x) & ((GoodAtSports(x) & Amy(x)) | OlympicGoldMedalWinner(x))))", "(all x.(Amy(x) -> (GoodAtSports(x) | OlympicGoldMedalWinner(x))))", "(all x.(Amy(x) -> GoodAtSport(x)) | (Amy(x) -> OlympicGoldMedalWinner(x))))", "all x.(Amy(x) -> (GoodAtSports(x) | OlympicGoldMedalWinner(x)))", "exists x.(Amy(x) & ((GoodAtSports(x) & Amy(x)) | OlympicGoldMedalWinner(x))))", "all x.(Amy(x) -> (GoodAtSports(x) | OlympicGoldMedalWinner(x)))"]}
{"id": "folio_train_157", "nl": "If Amy is not a Nobel laureate, then Amy is not an Olympic gold medal winner.", "fol": "(-IsNobelLaureate(Amy) -> -IsOlympicGoldMedalWinner(Amy))", "prediction": ["all x.((Amy(x) & -NobelLaureate(x)) -> -OlympicGoldMedalWinner(x))", "(-NobelLaureate(Amy) -> -OlympicGoldMedalWinner(Amy))", "-(NobelLaureate(Amy,Amy) & -OlympicGoldMedalWinner(Amy,Amy))", "all x.((Amy(x) & -NobelLaureate(x)) -> -OlympicGoldMedalWinner(x))", "(-NobelLaureate(Amy) -> -OlympicGoldMedalWinner(Amy))", "(-NobelLaureate(Amy) & OlympicGoldMedalWinner(Amy,Amy))", "all x.((Amy(x) & -NobelLaureate(x)) -> -OlympicGoldMedalWinner(x))", "all x.((NobelLaureate(x) & -NobelLaureate(x)) -> -OlympicGoldMedalWinner(x))", "all x.((Amy(x) & -Novallumber(x)) -> -OlympicGoldMedalWinner(x))", "(-NobelLaureate(Amy) -> -OlympicGoldMedalWinner(Amy))", "all x.((Amy(x) & NobelLaureate(x)) -> -OlympicGoldMedalWinner(x))", "all x.((Amy(x) & -NobelLaureate(x)) -> -OlympicGoldMedalWinner(x))", "all x.((Amy(x) & -Novallumerate(x)) -> -OlympicGoldMedalWinner(x))", "all x.((Amy(x) & -NobelLaureate(x)) -> -OlympicGoldMedalWinner(x))", "all x.((Amy(x) & NobelLaureate(x)) -> -OlympicGoldMedalWinner(x))", "all x.((Amy(x) & -NobelLaureate(x)) -> -OlympicGoldMedalWinner(x))"]}
{"id": "folio_train_158", "nl": "Amy is an athlete.", "fol": "IsAthlete(Amy)", "prediction": ["(Athlete(Amy) & Athlete(Amy))", "all x.(Athlete(x) -> Amy(x))", "Amy is an athlete.", "Amy is an Athlete(am)", "Amy is anAthlete(amy)", "All x.(Athlete(x) -> Amy(x))", "(Athlete(Amy)", "Amy is a professional athlete.", "(Athlete(Amy) & Athlete(Amy))", "Amy is an athlete.", "Amy is an Athlete(Amy)", "Amy ist Athlete(a)", "all x.(Athlete(x) -> Amy(x))", "Amy is a professional athlete.", "(Athlete(Amy)", "Amy is an athlete."]}
{"id": "folio_train_159", "nl": "Amy is neither a scientist nor an Olympic gold medal winner.", "fol": "(-IsScientist(Amy) & -IsOlympicGoldMedalWinner(Amy))", "prediction": ["(-(Scientist(Amy) & -OlympicGoldMedalWinner(Amy)) | (-Scientist(Amy) & OlympicGoldMedalWinner(Amy))))", "all x.(Amy(x) -> (-Scientist(x) & -OlympicGoldMedalWinner(x)))", "-(Amy(a) & Scientist(a) & -OlympicGoldMedalWinner(a))", "all x.((Amy(x) & -(Scientist(x) | OlympicGoldMedalWinner(x))) -> -(Scientist(x) & -OlympicGoldMedalWinner(x)))", "Amy is -(Scientist(am) | OlympicGoldMedalWinner(am)))", "\u2013 ((Scientist(Amy) & -OlympicGoldMedalWinner(Amy)) | (-Scientist(Amy) & OlympicGoldMedalWinner(Amy))))", "-(Scientist(amy) | OlympicGoldMedalWinner(amy)))", "(-(Scientist(Amy) & -OlympicGoldMedalWinner(Amy)) | (-Scientist(Amy) & OlympicGoldMedalWinner(Amy))))", "((Amy(Amy) | OlympicGoldMedalWinner(Amy)))", "all x.(Amy(x) -> (-Scientist(x) & -OlympicGoldMedalWinner(x)))", "((Amy,Scientist) | OlympicGoldMedalWinner(Amy,Scientist)))", "-(Amy(a) & Scientist(a) & -OlympicGoldMedalWinner(a))", "Amy is -(Scientist(am) | OlympicGoldMedalWinner(am)))", "(-(Scientist(Amy) | OlympicGoldMedalWinner(Amy)))", "(-(Scientist(Amy) & -OlympicGoldMedalWinner(Amy)) -> -Scientist(Amy))", "all x.(Amy(x) -> (-Scientist(x) | OlympicGoldMedalWinner(x)))"]}
{"id": "folio_train_160", "nl": "If Amy is not an Olympic gold medal winner, then Amy is a Nobel laureate.", "fol": "(-IsOlympicGoldMedalWinner(Amy) -> IsNobelLaureate(Amy))", "prediction": ["all x.((Amy(x) & -OlympicGoldMedalWinner(x)) -> NobelLaureate(x))", "(-OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy))", "all x.((Amy(x) & -OlympicGoldMedalWinner(x)) -> NobelLaureate(x))", "(-OlympicGoldMedalWinner(Amy) & -OlympicGoldMedalWinner(Amy)) -> NobelLaureate(Amy))", "all x y.((Amy(x) & -OlympicGoldMedalWinner(x) & OlympicGoldMedalWinner(y)) -> NobelLaureate(x))", "(-OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy))", "all x.((Amy(x) & -OlympicGoldMedalWinner(x)) -> NobelLaureate(x))", "all x.((AmyPalmer(x) & -OlympicGoldMedalWinner(x)) -> NobelLaureate(x))", "all x.((Amy(x) & -OlympicGoldMedalWinner(x)) -> NobelLaureate(x))", "(-OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy))", "all x.((Amy(x) & -OlympicGoldMedalWinner(x)) -> NobelLaureate(x))", "all x.((Amy(x) & -OlympicGoldMedalWonder(x)) -> NobelLaureate(x))", "all x.((Amy(x) & -OlympicGoldMedalWinner(x)) -> NobelLaureate(x))", "all x.((Amy(x) & -OlympicGoldMedalWinner(x)) -> NobelLaureate(x))", "all x.((Amy(x) & -OlympicGoldMedalWonder(x)) -> NobelLaureate(x))", "all x.((Amy(x) & -OlympicGoldMedalWinner(x)) -> NobelLaureate(x))"]}
{"id": "folio_train_161", "nl": "All fruits with the color red contain a large amount of vitamin C.", "fol": "all x.(FruitsWithColorRed(x) -> ContainsLargeAmountOfVitaminC(x))", "prediction": ["all x.((Fruit(x) & ColorRed(x)) -> ContainsLargeAmountOfVitaminC(x))", "all x.((Fruit(x) & ColorRed(x)) -> LargeAmountOfVitaminC(x))", "all x y.((Fruit(x) & ColorRed(x)) -> ContainsLargeAmountOfVitaminC(y))", "(all x.((Fruit(x) & ColorRed(x)) -> ContainsLargeAmountOfVitaminC(x)))", "all x y.((Fruit(x) & ColorRed(x) & Fruit(y)) -> ContainsLargeAmountOfVitaminC(y))", "all x.((Fruit(x) & ColorRed(x)) -> ContainsLargeAmountOfVitaminC(x))", "all x.(Fruit(x) & ColorRed(x) -> LargeAmountOfVitaminC(x))", "(all x.((Fruit(x) & ColorRed(x)) -> LargeAmountOfVitaminC(x)))", "all x.((Fruit(x) & ColorRed(x)) -> LargeAmountOfVitaminC(x))", "all x y.((Fruit(x) & ColorRed(x)) -> ContainsLargeAmountOfVitaminC(y))", "all x.((Fruit(x) & ColorRed(x)) -> ContainsLargeAmountOfVitaminC(x))", "all x.((Fruit(x) & ColorRed(x)) -> LargeAmountOfVitaminC(x))", "all x.((Fruit(x) & ColorRed(x)) -> ContainsLargeAmountOfVitaminC(x))", "all x.((Fruit(x) & RedColor(x)) -> LargeAmountOfVitaminC(x))", "all x.((Fruit(x) & ColorRed(x)) -> ContainsLargeAmountOfVitaminC(x))", "all x.((Fruit(x) & RedColor(x)) -> LargeAmountOfVitaminC(x))"]}
{"id": "folio_train_162", "nl": "All apples are fruits with the color red.", "fol": "all x.(IsApple(x) -> FruitsWithColorRed(x))", "prediction": ["all x.(Apple(x) -> Fruit(x) & ColorRed(x))", "all x.(Apple(x) -> Fruit(x) & ColorRed(x))", "(all x.(Apple(x) -> Fruit(x)) & ColorRed(x))", "all x.(Apple(x) -> (Fruit(x) & ColorRed(x)))", "(Fruit(apple) & ColorRed(apple))", "all x.(Apple(x) -> Fruit(x) & ColorRed(x))", "all x y.(Apple(x) -> (Fruit(y) & ColorRed(y)))", "(all x.(Apple(x) -> Fruit(x)) & ColorRed(x))", "all x.(Apple(x) -> FruitWithColorRed(x))", "all x.(Apple(x) -> (Fruit(x) & ColorRed(x)))", "all x.(Apple(x) -> Fruit(x,y) & ColorRed(y))", "all x.(Apple(x) -> Fruit(x) & ColorRed(x))", "all x.(Apple(x) -> (Fruit(x) & ColorRed(x)))", "all x.(Apple(x) -> (Fruit(x) & ColorRed(x)))", "all x.(Apple(x) -> FruitWithColorRed(x))", "all x.(Apple(x) -> (Fruit(x) & ColorRed(x)))"]}
{"id": "folio_train_163", "nl": "All fruits containing a large amount of vitamin C are beneficial to people. ", "fol": "all x.(ContainsLargeAmountOfVitaminC(x) -> IsBeneficialToPeople(x))", "prediction": ["all x.((Fruit(x) & LargeAmountOfVitaminC(x)) -> BeneficialToPeople(x))", "all x.((Fruit(x) & ContainsLargeAmountOfVitaminC(x)) -> BeneficialToPeople(x))", "all x y.((Fruit(x) & LargeAmountOfVitaminC(x) & Contains(x,y)) -> BeneficialToPeople(x))", "all x.((Fruit(x) & LargeAmountOfVitaminC(x)) -> BeneficialToPeople(x))", "all x y.((Fruit(x) & LargeAmountOfVitaminC(x)) -> BeneficialToPeople(y))", "all x.((Fruit(x) & ContainsLargeAmountOfVitaminC(x)) -> BeneficialToPeople(x))", "all x y.((Fruit(x) & ContainsLargeAmountOfVitaminC(x)) -> BeneficialToPeople(y))", "all x.((Fruit(x) & LargeAmountOfVitaminC(x)) -> BeneficialToPeople(x))", "all x y.((Fruit(x) & LargeAmountOfVitaminC(x) & Contains(x,y)) -> BeneficialToPeople(x))", "all x.((Fruit(x) & ContainsLargeAmountOfVitaminC(x)) -> BeneficialToPeople(x))", "all x.((Fruit(x) & LargeAmountOfVitaminC(x)) -> BeneficialToPeople(x))", "all x.((Fruit(x) & LargeAmountOfVitaminC(x)) -> BeneficialToPeople(x))", "all x.((Fruit(x) & LargeAmountOfVitaminC(x)) -> BeneficialToPerson(x))", "all x.((Fruit(x) & LargeAmountOfVitaminC(x)) -> BeneficialToPeople(x))", "all x.((Fruit(x) & LargeAmountOfVitaminC(x)) -> BeneficialForPerson(x))", "all x.((Fruit(x) & LargeAmountOfVitaminC(x)) -> BeneficialToPeople(x))"]}
{"id": "folio_train_164", "nl": "No fruits that are beneficial to people are on a warning list.", "fol": "all x.(IsBeneficialToPeople(x) -> -IsOnWarningList(x))", "prediction": ["all x.((Fruit(x) & BeneficialToPeople(x)) -> WarningList(x))", "-exists x.(Fruit(x) & BeneficialToPeople(x))", "all x.((Fruit(x) & BeneficialToPeople(x)) -> WarningList(x))", "-exists x.((Fruit(x) & BeneficialToPeople(x)) & WarningList(x))", "all x y.((Fruit(x) & BeneficialToPeople(x)) -> -WarningList(y))", "all x.((Fruit(x) & BeneficialToPeople(x)) -> WarningList(x))", "-exists x.(Fruit(x) & BeneficialToPeople(x))", "all x y.((Fruit(x) & BeneficialToPeople(x,y)) -> -WarningList(x))", "all x.((Fruit(x) & BeneficialToPeople(x)) -> -WarningList(x))", "all x.((Fruit(x) & BeneficialToPeople(x)) -> WarningList(x))", "-exists x.(Fruit(x) & BeneficialToPeople(x))", "all x.((Fruit(x) & BeneficialToPerson(x)) -> WarningList(x))", "-exists x.(Fruit(x) & BeneficialToPerson(x))", "all x.((Fruit(x) & BeneficialToPeople(x)) -> WarningList(x))", "all x.((Fruit(x) & BeneficialForPerson(x)) -> WarningList(x))", "all x.((Fruit(x) & BeneficialToPeople(x)) -> WarningList(x))"]}
{"id": "folio_train_165", "nl": "If K is not beneficial to people and also not an apple, then it is a fruit with the color red.", "fol": "(-(IsBeneficialToPeople(k) & IsApple(k)) -> FruitsWithColorRed(k))", "prediction": ["all x.((K(x) & -BeneficialToPeople(x) & -Apple(x)) -> FruitWithColorRed(x))", "all x.((Fruit(x) & -BeneficialToPeople(x) & -Apple(x)) -> FruitWithColorRed(x))", "all x.((K(x) & -BeneficialToPeople(x) & -Apple(x)) -> Fruit(x) & ColorRed(x))", "all x.((K) & -BeneficialToPeople(x) & -Apple(x)) -> FruitWithColorRed(x))", "(-BeneficialToPeople(K) & -Apple(K)) -> FruitWithColorRed(K))", "(all x.((K) & -BeneficialToPeople(x) & -Apple(x)) -> FruitWithColorRed(x))", "all x y.((K(x) & -BeneficialToPeople(x) & -Apple(x)) -> Fruit(x) & ColorRed(x))", "(-BeneficialToPeople(K) & -Apple(K)) -> Fruit(K))", "all x.((Fruit(x) & -BeneficialToPeople(x) & -Apple(x)) -> FruitWithColorRed(x))", "all x.((K(x) & -BeneficialToPeople(x) & -Apple(x)) -> FruitWithColorRed(x))", "all x.((K) & -BeneficialToPeople(x) & -Apple(x)) -> FruitWithColorRed(x))", "all x.(BeneficialToPeople(x) & -Apple(x)) -> FruitWithColorRed(x))", "(-BeneficialToPeople(K) & -Apple(K)) -> FruitWithColorRed(K))", "all x.((Fruit(x) & -BeneficialToPeople(x) & -Apple(x)) -> FruitWithColorRed(x))", "all x.((K(x) & -BeneficialToPeople(x) & -Apple(x)) -> Fruit(x) & ColorRed(x))", "all x.((Fruit(x) & -BeneficialToPeople(x) & -Apple(x)) -> FruitWithColorRed(x))"]}
{"id": "folio_train_166", "nl": "K is an apple.", "fol": "IsApple(k)", "prediction": ["all x.(Apple(x) -> Apple(x))", "(Apple(K) & Apple(K))", "K is an apple.", "all x.(Apple(x) -> K(x))", "K is an apple.", "(Apple(K))", "All x.(K(x) -> Apple(x))", "all x.(Apple(x) -> Apple(x))", "K is apple.", "K is an apple.", "(Apple(K))", "all x.(Apple(x) -> K(x))", "All x.(K(x) -> Apple(x))", "K is apple(k)", "all x.(Apple(x) -> Apple(x))", "all x.(Apple(x) -> K(x))"]}
{"id": "folio_train_167", "nl": "K either contains a large amount of vitamin C or is on a warning list.", "fol": "(ContainsLargeAmountOfVitaminC(k) | IsOnWarningList(k))", "prediction": ["all x.(K(x) -> (ContainsLargeAmountOfVitaminC(x) | OnWarningList(x)))", "all x.((K) & (LargeAmountOfVitaminC(x) | WarningList(x))) -> Contains(x,VitaminC))", "(LargeAmountOfVitaminC(K) | WarningList(K)))", "all x y.((K(x) & VitaminC(y)) -> (ContainsLargeAmount(x,y) | OnWarningList(x,y)))", "all x.((K) & (ContainsLargeAmountOfVitaminC(x) | OnWarningList(x))) -> ContainsLargeAmountOfVitaminC(x))", "all x.(K(x) -> (ContainsLargeAmountOfVitaminC(x) | OnWarningList(x)))", "all x.(K) -> (ContainsLargeAmountOfVitaminC(x) | OnWarningList(x)))", "exists x.(VitaminC(x) & (LargeAmount(x) | WarningList(x)))", "(LargeAmountOfVitaminC(K) | WarningList(K)))", "all x y.((K) & VitaminC(y)) -> (ContainsLargeAmount(x,y) | OnWarningList(x,y)))", "exists x.(VitaminC(x) & (ContainsLargeAmount(x) | OnWarningList(x)))", "all x y.((K(x) & VitaminC(y)) -> (ContainsLargeAmount(x,y) | OnWarningList(x,y)))", "all x.(K(x) -> (ContainsLargeAmountOfVitaminC(x) | OnWarningList(x)))", "exists x.(K(x) & (LargeAmountOfVitaminC(x) | WarningList(x)))", "all x y.((K(x) & VitaminC(y)) -> (ContainsLargeAmount(x,y) | OnWarningList(x,y)))", "exists x.(VitaminC(x) & (LargeAmount(x) | WarningList(x)))"]}
{"id": "folio_train_168", "nl": "K is either on a warning list or with the color red.", "fol": "(IsOnWarningList(k) | FruitsWithColorRed(k))", "prediction": ["all x.(K(x) -> (OnWarningList(x) | ColorRed(x)))", "(OnWarningList(K) | ColorRed(K)))", "all x.(K(x) -> (OnWarningList(x) | ColorRed(x)))", "all x.(K(x) -> (WarningList(x) | ColorRed(x)))", "all x.(K) -> (OnWarningList(x) | ColorRed(x)))", "all x.((K) & (OnWarningList(x) | ColorRed(x))) -> OnWarningList(x))", "all x y.((WarningList(x) & ColorRed(y)) -> (OnWarningList(x) | OnWarningList(x)))", "all x y.((K(x) & WarningList(y)) | ColorRed(y)) -> OnOrWithColor(x,y))", "all x y.((K(x) & WarningList(y)) | ColorRed(y)) -> (OnWarningList(x,y) | OnWarningList(x,y)))", "all x.(K(x) -> (OnWarningList(x) | WithColorRed(x)))", "all x y.((K) & WarningList(y)) | ColorRed(y)) -> OnOrWithColor(x,y))", "(OnWarningList(K) | ColorRed(K)))", "exists x.(WarningList(x) | ColorRed(x))", "(OnWarningList(K) | WithColorRed(K))", "exists x.(WarningList(x) | ColorRed(x))", "exists x.(WarningList(x) | ColorRed(x))"]}
{"id": "folio_train_169", "nl": "If K is either beneficial to people or on a warning list, then it is not red.", "fol": "((IsBeneficialToPeople(k) | IsOnWarningList(k)) -> -FruitsWithColorRed(k))", "prediction": ["all x.((BeneficialToPeople(x) | WarningList(x)) -> -Red(x))", "all x.((K(x) & BeneficialToPeople(x)) | OnWarningList(x)) -> -Red(x))", "all x.((BeneficialToPeople(x) | OnWarningList(x)) -> -Red(x))", "all x.((BeneficialToPeople(x) | WarningList(x)) -> -Red(x))", "((BeneficialToPeople(K) | WarningList(K))) -> -Red(K))", "all x.((K(x) & BeneficialToPeople(x)) | OnWarningList(x)) -> -Red(x))", "all x y.((K(x) & BeneficialToPeople(x) & WarningList(y)) -> -Red(x))", "all x y.((K(x) & BeneficialToPeople(x,y)) | OnWarningList(x,y)) -> -Red(x))", "(all x.((K) & BeneficialToPeople(x)) | OnWarningList(x))) -> -Red(x))", "all x.((K(x) & BeneficialToPeople(x)) | WarningList(x)) -> -Red(x))", "all x.((BenefitfulToPeople(x) | WarningList(x)) -> -Red(x))", "all x.((BeneficialToPeople(x) | WarningList(x)) -> -Red(x))", "all x.((K(x) & (BeneficialToPeople(x) | WarningList(x))) -> -Red(x))", "all x.((BeneficialToPeople(x) | OnWarningList(x)) -> -Red(x))", "exists x.(BeneficialToPeople(x) | WarningList(x))", "exists x.(BeneficialToPeople(x) | OnWarningList(x))"]}
{"id": "folio_train_170", "nl": "If K is either on a warning list or with the color red, then it is not beneficial to people and does not contain a large amount of vitamin C.", "fol": "((WarnList(k) | FruitsWithColorRed(k)) -> (-IsBeneficialToPeople(k) & -ContainsLargeAmountOfVitaminC(k)))", "prediction": ["all x.((K(x) & (OnWarningList(x) | ColorRed(x))) -> (-BeneficialToPeople(x) & -ContainsLargeAmountOfVitaminC(x)))", "all x.((K(x) & (WarningList(x) | ColorRed(x))) -> (-BeneficialToPeople(x) & -ContainsLargeAmountOfVitaminC(x)))", "all x.((WarningList(x) | ColorRed(x)) -> (-BeneficialToPeople(x) & -ContainsLargeAmountOfVitaminC(x)))", "((WarningList(k) | ColorRed(k))) -> -BeneficialToPeople(k) & -ContainsLargeAmountOfVitaminC(k)))", "all x.((K(x) & WarningList(x) | ColorRed(x)) -> (-BeneficialToPeople(x) & -ContainsLargeAmountOfVitaminC(x)))", "all x.((K) & (WarningList(x) | ColorRed(x))) -> (-BeneficialToPeople(x) & -ContainsLargeAmountOfVitaminC(x)))", "all x y.((K(x) & WarningList(x) & ColorRed(x)) -> (-BeneficialToPeople(x) & -ContainsLargeAmountOfVitaminC(y)))", "(all x.((K) & WarningList(x)) | ColorRed(x)) -> -BeneficialToPeople(x) & -ContainsLargeAmountOfVitaminC(x)))", "all x.((K(x) & (OnWarningList(x) | ColorRed(x))) -> -BeneficialToPeople(x) & -ContainsLargeAmountOfVitaminC(x))", "all x.((WarningList(x) | ColorRed(x)) -> (-BeneficialToPeople(x) & -ContainsLargeAmountOfVitaminC(x)))", "exists x.(WarningList(x) | ColorRed(x)) -> (-BeneficialToPeople(x) & -ContainsLargeAmountOfVitaminC(x)))", "all x.((K(x) & (WarningList(x) | ColorRed(x))) -> -BeneficialToPeople(x) & -ContainsLargeAmountOfVitaminC(x))", "all x.((WarningList(x) | ColorRed(x)) -> (-BeneficialToPeople(x) & -ContainLargeAmountOfVitaminC(x)))", "all x y.((K(x) & WarningList(x) & ColorRed(x)) -> (-BeneficialToPeople(x) & -ContainsLargeAmountOfVitaminC(y)))", "all x.((K) & (WarningList(x) | ColorRed(x))) -> (-BeneficialToPeople(x) & -ContainsLargeAmountOfVitaminC(x)))", "all x.((WarningList(x) | ColorRed(x)) -> -BeneficialToPeople(x) & -ContainsLargeAmountOfVitaminC(x))"]}
{"id": "folio_train_171", "nl": "Everyone working at Meta has a high income. ", "fol": "all x.(WorksAtMeta(x) -> HasHighIncome(x))", "prediction": ["all x.(WorkingAtMeta(x) -> HighIncome(x))", "all x.((WorkingAtMeta(x) & HighIncome(x)) -> WorksAtMeta(x))", "(WorkingAtMeta(x) -> HighIncome(x))", "all x.(WorkingAtMeta(x) -> HighIncome(x))", "all x y.((WorkingAtMeta(x) & Meta(y)) -> HighIncome(x,y))", "all x y.((WorkingAtMeta(x) & HighIncome(y)) -> WorksAtMeta(x,y))", "all x.(WorksAtMeta(x) -> HighIncome(x))", "all x.((WorkingAtMeta(x) & HighIncome(x)) -> WorksAtMeta(x))", "all x y.((WorkingAtMeta(x) & Meta(y)) -> HighIncome(x,y))", "all x y.((WorkingAtMeta(x) & Meta(y) & HighIncome(x,y)) -> HighIncome(x,y))", "all x.(WorkingAtMeta(x) -> HighIncome(x))", "all x y.((WorkingAtMeta(x) & HighIncome(y)) -> WorksAtMeta(x,y))", "all x.(WorksAtMeta(x) -> HighIncome(x))", "all x.(WorkingAtMeta(x) -> HighIncome(x))", "exists x.(WorkingAtMeta(x) & HighIncome(x))", "exists x.(WorkingAtMeta(x) & HighIncome(x))"]}
{"id": "folio_train_172", "nl": "If a person has a high income, then he/she will not take a bus to their destination.", "fol": "all x.(HasHighIncome(x) -> -TakesBus(x))", "prediction": ["all x.(HighIncome(x) -> -TakeBusToDestination(x))", "all x.((Person(x) & HighIncome(x)) -> -TakeBusToDestination(x))", "all x y.((Person(x) & HighIncome(x)) -> -TakeBusToDestination(x,y))", "all x.(HighIncome(x) -> -TakeBusToDestination(x))", "(HighIncome(p) -> -TakeBusToDestination(p))", "all x.((Person(x) & HighIncome(x)) -> -TakeBusToDestination(x))", "all x y.((Person(x) & HighIncome(x) & Destination(y)) -> -TakeBusTo(x,y))", "all x y.((Person(x) & HighIncome(x)) -> -TakeBusToDestination(x,y))", "all x.(HighIncome(x) -> -TakeBusToDestination(x))", "all x.((Person(x) & HighIncome(x)) -> -TakeBusToDestination(x))", "all x.(HighIncome(x) -> -BusToDestination(x))", "all x.((Person(x) & HighIncome(x)) -> -TakeBusToDestination(x))", "all x.((Person(x) & HighIncome(x)) -> -TakesBusToDestination(x))", "all x.(HighIncome(x) -> -TakeBusToDestination(x))", "all x.(HighIncome(x) -> -BusToDestination(x))", "all x.((Person(x) & HighIncome(x)) -> -BusToDestination(x))"]}
{"id": "folio_train_173", "nl": "People will either take a bus or drive to their destination. ", "fol": "all x.(TakesBus(x) | DrivesToDestination(x))", "prediction": ["all x.(Person(x) -> (TakeBus(x) | DriveToDestination(x)))", "all x y.((Person(x) & Bus(y)) -> (Takes(x,y) | DrivesToDestination(x,y)))", "all x.(Person(x) -> (TakeBus(x) | DriveToDestination(x)))", "all x.(Person(x) -> (TakesBus(x) | DrivesToDestination(x)))", "all x y.((Person(x) & Bus(y)) -> (Take(x,y) | Drive(x,y)))", "all x.((Person(x) & (TakeBus(x) | DriveToDestination(x))) -> TakesBus(x))", "all x y z.((Person(x) & Bus(y) & Destination(z)) -> (Take(x,y) | Drive(x,z)))", "all x y.((Person(x) & Bus(y) & Destination(z)) -> (Takes(x,y) | DrivesTo(x,z)))", "all x y.((Person(x) & Bus(y)) -> (Takes(x,y) | DrivesTo(x,y)))", "exists x.(People(x) & (TakeBus(x) | DriveToDestination(x)))", "all x.(Person(x) -> (TakeBus(x) | DriveToDestination(x)))", "exists x.(Person(x) & (TakesBus(x) | DrivesToDestination(x)))", "all x y.((Person(x) & Bus(y) & Destination(y)) -> (Takes(x,y) | Drives(x,y)))", "exists x.(Person(x) & ((TakeBus(x) | DriveToDestination(x))) | ((TakeBus(x) & DriveToDestination(x)))))", "exists x.(Person(x) & (TakeBus(x) | DriveToDestination(x)))", "exists x.(Person(x) & (TakesBus(x) | DrivesToDestination(x)))"]}
{"id": "folio_train_174", "nl": "Everyone who has a car will choose to drive to their destination. ", "fol": "all x.(OwnsCar(x) -> DrivesToDestination(x))", "prediction": ["all x.(HasCar(x) -> ChoosesToDrive(x))", "all x.((HasCar(x) & DrivesToDestination(x)) -> ChoosesToDestination(x))", "all x y.((HasCar(x) & Destination(y)) -> ChoosesToDrive(x,y))", "all x.(HasCar(x) -> ChoosesToDrive(x))", "all x.(HasCar(x) -> ChoosesDriveToDestination(x))", "all x.((HasCar(x) & DrivesToDestination(x)) -> ChoosesToDestination(x))", "all x y.((HasCar(x) & Destination(y)) -> ChoosesDriveTo(x,y))", "all x.(HasCar(x) -> DriveToDestination(x))", "(all x.(HasCar(x) -> ChoosesDestination(x)))", "all x.((HasCar(x) & DrivesToDestination(x)) -> ChoosesDestination(x))", "all x y.((HasCar(x) & Destination(y)) -> ChoosesToDriveTo(x,y))", "all x.(HasCar(x) -> ChoosesToDriveToDestination(x))", "all x y.((HasCar(x) & Destination(y)) -> ChoosesDrive(x,y))", "all x.((HasCar(x) & DrivesToDestination(x)) -> ChoosesToDrive(x))", "all x.(HasCar(x) -> DriveToDestination(x))", "all x.(HasCar(x) -> ChoosesDrive(x))"]}
{"id": "folio_train_175", "nl": "No students drive to their destination. ", "fol": "all x.(IsStudent(x) -> -DrivesToDestination(x))", "prediction": ["-exists x.(Student(x) & DrivesToDestination(x))", "all x.(Student(x) -> -DrivesToDestination(x))", "(NoStudentDrivesToDestination(Student) & -DrivesToDestination(Student))", "-exists x.(Student(x) & DrivesTo(x,Destination))", "-(Student(x) & DrivesToDestination(x))", "all x.(Student(x) -> -DrivesToDestination(x))", "-exists x.(Student(x) & DrivesToDestination(x))", "-(Student(e) & DrivesToDestination(e))", "all x y.((Student(x) & Destination(y)) -> -DrivesTo(x,y))", "all x.(Student(x) -> -DrivesToDestination(x))", "-exists x.(Student(x) & DrivesTo(x,Destination))", "all x.(Student(x) -> -DrivesToDestination(x))", "-exists x.(Student(x) & DrivesToDestination(x))", "-exists x.(Student(x) & DrivesTo(x,Destination))", "all x.(Student(x) -> -DrivingToDestination(x))", "-exists x.(Student(x) & DrivesToDestination(x))"]}
{"id": "folio_train_176", "nl": "James has a car or works at Meta.", "fol": "(OwnsCar(James) | WorksAtMeta(James))", "prediction": ["(HasCar(James) | WorksAtMeta(James)))", "all x.(James(x) -> (HasCar(x) | WorksAtMeta(x)))", "(exists x.(James(x) & Car(x)) | WorksAtMeta(x)))", "(HasCar(James) | WorksAtMeta(James))", "all x.(James(x) -> (HasCar(x) | WorksAtMeta(x)))", "(exists x.(James(x) & Car(x)) | WorksAtMeta(x)))", "all x.((James(x) & (HasCar(x) | WorksAtMeta(x))) -> HasCar(x))", "(HasCar(Jim) | WorksAtMeta(Jim))", "(HasCar(James) | WorksAtMeta(James))", "exists x.(James(x) & (HasCar(x) | WorksAtMeta(x)))", "(HasCar(Jimmy) | WorksAtMeta(Jimmy))", "all x.(James(x) -> (HasCar(x) | WorksAtMeta(x)))", "exists x.(James(x) & (HasCar(x) | WorksAtMeta(x)))", "exists x.(James(x) & (HasCar(x,x) | WorksAtMeta(x,x)))", "all x.(James(x) -> (HasCar(x) | WorksAtMeta(x)))", "exists x.(Jimmy(x) & (HasCar(x) | WorksAtMeta(x)))"]}
{"id": "folio_train_177", "nl": "James has a high income.", "fol": "HasHighIncome(James)", "prediction": ["all x.(James(x) -> HighIncome(x))", "(HighIncome(James) -> JamesHas(James,HighIncome))", "James has a high Income.", "James has a highIncome(James)", "all x.(James(x) -> HighIncome(x))", "(HighIncome(James) & HighIncome(James))", "JamesHasHighIncome(James)", "(HighIncome(James) -> JamesHasHighIncome(James))", "all x.(JamesHasHighIncome(x) -> HighIncome(x))", "James has highincome.", "(HighIncome(Jim) & HighIncome(Jim))", "all x.(James(x) -> HighIncome(x))", "James has a high Income(James)", "James has highIncome(James)", "all x.(James(x) -> HighIncome(x))", "all x.(James(x) -> HighIncome(x))"]}
{"id": "folio_train_178", "nl": "James does not have a high income.", "fol": "-HasHighIncome(James)", "prediction": ["all x.(James(x) -> -HighIncome(x))", "all x.((James(x) & -HighIncome(x)) -> -HighIncome(x))", "(-HighIncome(James))", "(HasHighIncome(James) & James -HasHighIncome(James))", "James has no highIncome(James)", "James does not have highincome.", "all x.(James(x) -> -HighIncome(x))", "(-HighIncome(James))", "(HasHighIncome(James) & James -HasHighIncome(James))", "all x.((James(x) & -HighIncome(x)) -> -HighIncome(x))", "James has no highincome.", "-HighIncome(James)", "James does not have highincome.", "all x.(James(x) -> -HighIncome(x))", "-HighIncome(James)", "-HighIncome(Jim)"]}
{"id": "folio_train_179", "nl": "James is a student.", "fol": "IsStudent(James)", "prediction": ["(Student(James) & Student(James))", "James is Student(James)", "all x.((James(x) & Student(x)) -> -Student(x))", "James is student.", "(Student(Jimmy) & Student(Jimmy))", "(Student(James) & -Student(James))", "all x.((James(x) & Student(x)) -> Is(x,y))", "James is Student(James)", "James is a student.", "all x.(Student(x) -> James(x))", "all x.((James(x) & Student(x)) -> Student(x))", "James is student.", "James is Student(James)", "(Student(Jimmy) & Student(Jimmy))", "James is student(James)", "(Student(James)"]}
{"id": "folio_train_180", "nl": "James drives to his destination or he is a student.", "fol": "(DrivesToDestination(James) | IsStudent(James))", "prediction": ["(DrivesToDestination(James) | Student(James)))", "all x.(JamesDrivesToDestination(x) | Student(x))", "all x.((James(x) & (DrivesToDestination(x) | Student(x))) -> DrivesTo(x))", "all x.(JamesDrives(x) -> (Destination(x) | Student(x)))", "(DrivingToDestination(James) | Student(James)))", "exists x.(James(x) & (DrivesToDestination(x) | Student(x)))", "all x y.((James(x) & Destination(y)) -> (DrivesTo(x,y) | Student(x)))", "(DrivesToDestination(James) | Student(James)))", "all x.((James(x) & (DrivesToDestination(x) | Student(x))) -> DrivesTo(x))", "exists x.(James(x) & (DrivesToDestination(x) | Student(x)))", "(DrivingToDestination(James) | Student(James)))", "(DrivesToDestination(James) | Student(James)))", "all x y.((James(x) & Destination(y)) | Student(x))", "exists x.(James(x) & (DrivesTo(x,Destination) | Student(x)))", "(DrivesToDestination(James) | Student(James)))", "exists x.(James(x) & (DrivesToDestination(x) | Student(x)))"]}
{"id": "folio_train_181", "nl": "James either drives to their destination or is a student.", "fol": "(DrivesToDestination(James) | IsStudent(James))", "prediction": ["all x.(James(x) -> (DrivesToDestination(x) | Student(x)))", "(DrivesToDestination(James) | Student(James)))", "(DrivingToDestination(James) | Student(James)))", "all x y.((James(x) & Destination(y)) -> (DrivesTo(x,y) | Student(x)))", "all x.(James(x) -> (DrivesToDestination(x) | Student(x)))", "all x.((James(x) & DrivesToDestination(x)) | Student(x))", "all x.((James(x) & DrivesTo(x,Destination)) | Student(x))", "(DrivesToDestination(James) | Student(James))", "all x y.((James(x) & Destination(y)) -> (DrivesTo(x,y) | Student(x)))", "(DrivingToDestination(James) | Student(James))", "all x.(James(x) -> (DrivesToDestination(x) | Student(x)))", "all x y.((James(x) & Destination(y)) -> (DrivesTo(x,y) | Student(x,y)))", "exists x.(James(x) & (DrivesTo(x) | Student(x)))", "(DrivesToDestination(James) | Student(James))", "exists x.(James(x) & (DrivingToDestination(x) | Student(x)))", "exists x.(James(x) & (DrivesToDestination(x) | Student(x)))"]}
{"id": "folio_train_182", "nl": "If James either drives to his destination or is a student, then he has a high income and is a student.", "fol": "((DrivesToDestination(James) | IsStudent(James)) -> (HasHighIncome(James) & IsStudent(James)))", "prediction": ["all x.((James(x) & (DrivesToDestination(x) | Student(x))) -> (HighIncome(x) & Student(x)))", "all x.((DrivesToDestination(x) | Student(x)) -> (HighIncome(x) & Student(x)))", "all x.((DrivingToDestination(x) | Student(x)) -> (HighIncome(x) & Student(x)))", "((DrivesToDestination(James) | Student(James))) -> (HighIncome(James) & Student(James)))", "all x y.((James(x) & (DrivesToDestination(x) | Student(x))) -> (HighIncome(x) & Student(y)))", "all x.((James(x) & (DrivesToDestination(x) | Student(x))) -> (HighIncome(x) & Student(x)))", "all x.((DrivesToDestination(x) | Student(x)) -> (HighIncome(x) & Student(x)))", "all x.(DrivesToDestination(x) | Student(x)) -> (HighIncome(x) & Student(x)))", "(HighIncome(James) & (DrivesToDestination(James) | Student(James)))", "all x y.((James(x) & (DrivesToDestination(x) | Student(x))) -> (HighIncome(x) & Student(y)))", "all x.((James(x) & (DrivesToDestination(x) | Student(x))) -> (HighIncome(x) & Student(x)))", "((DrivesToDestination(James) | Student(James))) -> HighIncome(James))", "all x.((DrivingToDestination(x) | Student(x)) -> (HighIncome(x) & Student(x)))", "all x.((DrivesToDestination(x) | Student(x)) -> (HighIncome(x) & Student(x)))", "all x.(DrivesToDestination(x) | Student(x)) -> (HighIncome(x) & Student(x)))", "all x.((James(x) & (DrivesToDestination(x) | Student(x))) -> (HighIncome(x) & Student(x)))"]}
{"id": "folio_train_183", "nl": "Students either go to the park or go to the movies. ", "fol": "all x.((GoesToPark(x) & -GoesToMovies(x)) | (-GoesToPark(x) & GoesToMovies(x)))", "prediction": ["all x.(Student(x) -> (GoesToPark(x) | GoesToMovies(x)))", "all x y.((Student(x) & Park(y)) | Movie(y))", "all x.(Student(x) -> (GoesToPark(x) | GoesToMovies(x)))", "all x y z.((Student(x) & Park(y) & Movie(z)) -> (GoesTo(x,y) | GoesTo(x,z)))", "(all x.(Student(x) -> GoToPark(x)) & all y.(Student(y) -> GoToMovies(y))))", "all x.(Student(x) -> (GoToPark(x) | GoToMovies(x)))", "all x y.((Student(x) & Park(y)) | Movie(y))", "(all x.(Student(x) -> GoToPark(x)) | all y.(Student(y) -> GoToMovies(y))))", "all x y.((Student(x) & (Park(y) | Movie(y))) -> (GoesTo(x,y) | GoesTo(x,y)))", "all x.(Student(x) -> (GoesToPark(x) | GoesToMovies(x)))", "all x y.((Student(x) & Park(y)) | Movie(y))", "exists x.(Student(x) & (GoToPark(x) | GoToMovies(x)))", "exists x.(Student(x) & ((GoesToPark(x) | GoesToMovies(x))))", "all x y.((Student(x) & Park(y)) | Movie(y))", "exists x.(Student(x) & (GoToPark(x) | GoToMovies(x)))", "exists x.(Student(x) & (GoesToPark(x) | GoesToMovies(x)))"]}
{"id": "folio_train_184", "nl": "No student who enjoys nature has free time during the weekend. ", "fol": "all x.(EnjoysNature(x) -> -HasFreeTime(x))", "prediction": ["all x.((Student(x) & EnjoysNature(x)) -> FreeTimeDuringWeekend(x))", "-exists x.(Student(x) & EnjoysNature(x) & FreeTime(x))", "-all x.(EnjoysNature(x) -> FreeTimeDuringWeekend(x))", "-(Student(Student) & EnjoysNature(Student)) -> FreeTimeDuringWeekend(Student))", "all x.((Student(x) & EnjoysNature(x)) -> FreeTime(x))", "-exists x.(Student(x) & EnjoysNature(x) & FreeTime(x))", "no student enjoysNature(n) & WeekendFreeTime(n))", "all x.(EnjoysNature(x) -> FreeTimeDuringWeekend(x))", "-exists x.(Student(x) & EnjoysNature(x) & HasFreeTime(x,Weekend))", "-all x.(EnjoysNature(x) -> FreeTimeDuringWeekend(x))", "-(Student(Student) & EnjoysNature(Student,Weekend))", "all x.((Student(x) & EnjoysNature(x)) -> FreeTimeDuringWeekend(x))", "all x.((Student(x) & EnjoysNature(x)) -> HasFreeTimeDuringWeekend(x))", "-exists x.(Student(x) & EnjoysNature(x) & WeekendFreeTime(x))", "all x.((Student(x) & EnjoysNature(x)) -> FreeTime(x))", "all x.((Student(x) & EnjoysNature(x)) -> HasFreeTimeDuringWeekend(x))"]}
{"id": "folio_train_185", "nl": "All students who go to the movies enjoy nature. ", "fol": "all x.(GoesToMovies(x) -> EnjoysNature(x))", "prediction": ["all x.((Student(x) & GoesToMovies(x)) -> EnjoysNature(x))", "all x y.((Student(x) & Movie(y)) -> EnjoysNature(x,y))", "all x.((Student(x) & GoesToMovies(x)) -> EnjoysNature(x))", "all x y.((Student(x) & Movie(y) & GoesTo(x,y)) -> EnjoysNature(x))", "all x.((Student(x) & GoesToMovies(x)) -> EnjoysNature(x))", "all x y.((Student(x) & GoesToMovies(x)) -> EnjoysNature(x,y))", "all x.((Student(x) & GoToMovies(x)) -> EnjoysNature(x))", "(all x.(GoToMovies(x) -> EnjoysNature(x))", "all x y.((Student(x) & Movie(y)) -> EnjoysNature(x,y))", "all x.(GoesToMovies(x) -> EnjoysNature(x))", "all x.((Student(x) & GoesToMovies(x)) -> EnjoysNature(x))", "all x y.((Student(x) & Movie(y) & GoesTo(x,y)) -> EnjoysNature(x))", "all x.((Student(x) & GoToMovies(x)) -> EnjoysNature(x))", "all x.((Student(x) & GoesToMovies(x)) -> EnjoysNature(x))", "all x.((Student(x) & GoesToMovies(x)) -> EnjoysNature(x))", "all x.((Student(x) & GoesToMovies(x)) -> EnjoysNature(x))"]}
{"id": "folio_train_186", "nl": "All students who do not have class during the weekend have free time during the weekend. ", "fol": "all x.(DoesNotHaveClass(x) -> HasFreeTime(x))", "prediction": ["all x.((Student(x) & -HasClassDuringWeekend(x)) -> FreeTimeDuringWeekend(x))", "all x.((Student(x) & -HasClassDuringWeekend(x)) -> HasFreeTimeDuringWeekend(x))", "all x y.((Student(x) & -HasClass(x,y) & Weekend(y)) -> FreeTime(x,y))", "(all x.((Student(x) & -HasClass(x,Weekend)) -> FreeTime(x,Weekend))", "all x.((Student(x) & -HasClass(x,Weekend)) -> FreeTime(x,Weekend))", "all x y.((Student(x) & Weekend(y) & -HasClass(x,y)) -> HasFreeTime(x,y))", "(all x.((Student(x) & -HasClassDuringWeekend(x,Weekend)) -> FreeTimeDuringWeekend(x)))", "all x y.((Student(x) & -HasClassDuringWeekend(x,y)) -> FreeTimeDuringWeekend(x,y))", "all x.((Student(x) & -HasClassDuringWeekend(x)) -> HasFreeTimeDuringWeekend(x))", "all x y.((Student(x) & Weekend(y) & -HasClass(x,y)) -> FreeTime(x,y))", "all x.((Student(x) & -HasClass(x,Weekend)) -> FreeTime(x,Weekend))", "all x.((Student(x) & -HasClass(x)) -> HasFreeTime(x))", "all x.((Student(x) & -HasClassDuringWeekend(x)) -> HasFreeTimeDuringWeekend(x))", "all x.((Student(x) & DoesNotHaveClass(x)) -> FreeTimeDuringWeekend(x))", "all x.((Student(x) & -HasClassDuringWeekend(x)) -> FreeTimeDuringWeekend(x))", "all x.((Student(x) & DoesNotHaveClassDuringWeekend(x)) -> FreeTimeDuringWeekend(x))"]}
{"id": "folio_train_187", "nl": "All students not in summer camp do not have class during the weekend. ", "fol": "all x.(InSummerCamp(x) -> DoesNotHaveClass(x))", "prediction": ["all x.((Student(x) & -SummerCamp(x)) -> -HasClassDuringWeekend(x))", "all x.((Student(x) & -InSummerCamp(x)) -> -HasClassDuringWeekend(x))", "all x.((Student(x) & -SummerCamp(x)) -> -HasClassDuringWeekend(x))", "all x y.((Student(x) & -SummerCamp(x)) -> -HasClassDuringWeekend(x,y))", "all x y.((Student(x) & SummerCamp(y) & -InSummerCamp(x,y)) -> -HasClassDuringWeekend(x))", "(all x.((Student(x) & -InSummerCamp(x)) -> -HasClass(x,Weekend)))", "all x.(Student(x) & -SummerCamp(x) & -HasClassDuringWeekend(x))", "all x.((Student(x) & -InSummerCamp(x)) -> -HasClassDuringWeekend(x))", "all x.((Student(x) & -SummerCamp(x)) -> -HasClassDuringWeekend(x))", "(all x.((Student(x) & -InSummerCamp(x)) -> -HasClassDuringWeekend(x)))", "all x.((Student(x) & SummerCamp(x)) -> -HasClassDuringWeekend(x))", "all x.((Student(x) & -SummerCamp(x)) -> -HasClass(x,Weekend))", "all x y.((Student(x) & -SummerCamp(y)) -> -HasClassDuringWeekend(x,y))", "all x.((Student(x) & -InSummerCamp(x)) -> -HasClassDuringWeekend(x))", "all x.((Student(x) & SummerCamp(x)) -> -HasClassDuringWeekend(x))", "all x.((Student(x) & -SummerCamp(x)) -> -HasClassDuringWeekend(x))"]}
{"id": "folio_train_188", "nl": "James does not have class during the weekend.", "fol": "DoesNotHaveClass(James)", "prediction": ["all x.((James(x) & Weekend(x)) -> -HasClass(x,Weekend))", "(-HasClass(James,Weekend))", "all x.(James(x) -> -HasClass(x,Weekend))", "(-HasClass(James) & Weekend(James))", "James -HasClassDuringWeekend(James,Weekend)", "-exists x.(James(x) & Weekend(x) & -HasClass(x))", "James does not have class during the weekend.", "-(HasClass(James,Weekend))", "all x.((James(x) & Weekend(x)) -> -HasClass(x,weekend))", "(-HasClassDuringWeekend(James))", "-HasClass(James,Weekend)", "James does not have class during the weekend.", "(-HasClass(Jim) & Weekend(Jim))", "all x.((James(x) & Weekend(x)) -> -HasClass(x))", "(James(James) & Weekend(James))", "(-HasClassDuringWeekend(James,James))"]}
{"id": "folio_train_189", "nl": "James is in summer camp.", "fol": "InSummerCamp(James)", "prediction": ["James is in summercamp.", "all x.(James(x) -> SummerCamp(x))", "(InSummerCamp(James) & InCamp(James))", "James is in SummerCamp(James)", "(SummerCamp(Jim) & In(Jim,SummerCamp))", "-JamesInSummerCamp(James)", "(SummerCamp(James) & In(James,James))", "-(James(James) & SummerCamp(James))", "James is in summercamp.", "all x.(James(x) -> SummerCamp(x))", "(SummerCamp(Jim) & InCamp(Jim))", "James is in SummerCamp.", "(InSummerCamp(Jim)", "James is in summer camp.", "James is in SummerCamp(James)", "James is in summercamp."]}
{"id": "folio_train_190", "nl": "James goes to the park or is in summer camp.", "fol": "(GoesToPark(James) | InSummerCamp(James))", "prediction": ["all x.(James(x) -> (GoesToPark(x) | InSummerCamp(x)))", "(GoesToPark(James) | InSummerCamp(James)))", "(GoesToPark(James,James) | InSummerCamp(James,James)))", "all x y.((James(x) & Park(y)) | SummerCamp(x,y)) -> GoesTo(x,y))", "all x.(James(x) -> (GoesToPark(x) | InSummerCamp(x)))", "(GoesToPark(James,James) | SummerCamp(James,James)))", "all x y.((James(x) & Park(y)) | SummerCamp(x,y)) -> (GoesTo(x,y) | In(x,y)))", "(GoesTo(James,Park) | InSummerCamp(James,Camp)))", "all x.(James(x) -> (GoesToPark(x) | InSummerCamp(x)))", "(GoesToPark(James,x) | InSummerCamp(James,x)))", "all x.(James(x) -> (GoesToPark(x) | SummerCamp(x)))", "(GoesToPark(James,James) | InSummerCamp(James,James))", "all x.(James(x) -> (GoesToPark(x) | InSummerCamp(x)))", "exists x.(Jimmy(x) & (GivesToPark(x) | InSummerCamp(x)))", "exists x.(Jimmy(x) & (GoesToPark(x) | SummerCamp(x)))", "exists x.(James(x) & (GoesToPark(x) | InSummerCamp(x)))"]}
{"id": "folio_train_191", "nl": "No television stars are certified public accountants.", "fol": "all x.(IsTelevisionStar(x) -> -IsCertifiedPublicAccountant(x))", "prediction": ["-exists x.(TelevisionStar(x) & CertifiedPublicAccountant(x))", "all x.(TelevisionStar(x) -> -CertifiedPublicAccountant(x))", "-exists x.(TelevisionStar(x) & CertifiedPublicAccountant(x))", "all x.(TelevisionStar(x) -> -CertifiedPublicAccountant(x))", "(-all x.(TelevisionStar(x) -> CertifiedPublicAccountant(x)))", "-exists x.(TVStar(x) & CertifiedPublicAccountant(x))", "-exists x.(TelevisionStar(x) & CertifiedPublicAccountant(x))", "(exists x.(TelevisionStar(x) & CertifiedPublicAccountant(x)))", "all x.(TelevisionStar(x) -> -CertifiedPublicAccountant(x))", "-exists x.(TVStar(x) & CertifiedPublicAccountant(x))", "-exists x.(TelevisionStar(x) & CertifiedPublicAccountant(x))", "\u2013 exists x.(TelevisionStar(x) & CertifiedPublicAccountant(x))", "all x.(TelevisionStar(x) -> -CertifiedPublicAccountant(x))", "-exists x.(TelevisionStar(x) & CertifiedPublicAccountant(x))", "-exists x.(TVStar(x) & CertifiedPublicAccountant(x))", "-exists x.(TelevisionStar(x) & CertifiedPublicAccountant(x))"]}
{"id": "folio_train_192", "nl": "All certified public accountants have good business sense.", "fol": "all x.(IsCertifiedPublicAccountant(x) -> HasGoodBusinessSense(x))", "prediction": ["all x.(CertifiedPublicAccountant(x) -> GoodBusinessSense(x))", "all x.((PublicAccountant(x) & Certified(x)) -> GoodBusinessSense(x))", "all x.(CertifiedPublicAccountant(x) -> GoodBusinessSense(x))", "(all x.(CertifiedPublicAccountant(x) -> GoodBusinessSense(x)))", "all x y.((CertifiedPublicAccountant(x) & CertifiedPublicAccountant(y)) -> GoodBusinessSense(x))", "all x.(CertifiedPublicAccountant(x) -> GoodBusinessSense(x))", "all x.((PublicAccountant(x) & Certified(x)) -> GoodBusinessSense(x))", "all x.(PublicAccountant(x) -> GoodBusinessSense(x))", "all x y.((CertifiedPublicAccountant(x) & CertifiedPublicAccountant(y)) -> GoodBusinessSense(x))", "all x.(CertifiedPublicAccountant(x) -> GoodBusinessSense(x))", "all x.(CertifiedPublicAccountant(x) -> HasGoodBusinessSense(x))", "all x.((PublicAccountant(x) & Certified(x)) -> GoodBusinessSense(x))", "all x.(PublicAccountant(x) -> GoodBusinessSense(x))", "all x.(CertifiedPublicAccountant(x) -> BusinessSense(x))", "all x.(CertifiedPublicAccountant(x) -> GoodBusinessSense(x))", "all x.(CertifiedPublicAccountant(x) -> HasGoodBusinessSense(x))"]}
{"id": "folio_train_193", "nl": "All television stars have good business sense.", "fol": "all x.(IsTelevisionStar(x) -> HasGoodBusinessSense(x))", "prediction": ["all x.(TelevisionStar(x) -> GoodBusinessSense(x))", "all x.(TelevisionStar(x) -> GoodBusinessSense(x))", "all x.(TVStar(x) -> GoodBusinessSense(x))", "all x y.((TelevisionStar(x) & BusinessSense(y)) -> Good(x,y))", "(all x.(TelevisionStar(x) -> GoodBusinessSense(x)))", "all x.(TelevisionStar(x) -> GoodBusinessSense(x))", "all x.(TelevisionStar(x) -> HasGoodBusinessSense(x))", "all x y.((TelevisionStar(x) & TelevisionStar(y)) -> GoodBusinessSense(x))", "all x.(TVStar(x) -> GoodBusinessSense(x))", "all x y.((TelevisionStar(x) & BusinessSense(y)) -> HasGood(x,y))", "all x.(TVStar(x) -> HasGoodBusinessSense(x))", "all x.(TelevisionStar(x) -> GoodBusinessSense(x))", "all x.(TelevisionStar(x) -> HasGoodBusinessSense(x))", "all x.(TVStar(x) -> GoodBusinessSense(x))", "all x.(TelevisionStar(x) -> GoodBusinessSense(x))", "all x.(TelevisionStar(x) -> BusinessSense(x))"]}
{"id": "folio_train_194", "nl": "Some students good at math are good at chemistry.", "fol": "exists x.(GoodAtMath(x) & GoodAtChemistry(x))", "prediction": ["exists x.(Student(x) & GoodAtMath(x) & GoodAtChemistry(x))", "exists x y.(Student(x) & Student(y) & GoodAtMath(x) & GoodAtChemistry(y))", "(exists x.(Student(x) & GoodAtMath(x)) & exists y.(Student(y) & GoodAtChemistry(y))))", "exists x.(Student(x) & GoodAtMath(x) & GoodAtChemistry(x))", "exists x y.(Student(x) & Student(y) & GoodAt(x,Math) & GoodAt(y,Chemistry))", "all x y.((Student(x) & GoodAtMath(x)) -> GoodAtChemistry(x))", "exists x.(Student(x) & GoodAtMath(x) & GoodAtChemistry(x))", "exists x.(Student(x) & GoodAt(x,Math) & GoodAt(x,Chemistry))", "all x y.((Student(x) & GoodAtMath(x)) -> GoodAtChemistry(x))", "exists x.(Student(x) & GoodAtMath(x) & GoodAtChemistry(x))", "exists x.(Student(x) & GoodAt(x,Math) & GoodAt(x,Chemical))", "exists x.(Student(x) & GoodAtMath(x) & GoodAtChemistry(x))", "exists x.(Student(x) & GoodAtMathematics(x) & GoodAtChemistry(x))", "exists x.(Student(x) & GoodAtMath(x) & GoodAtChemistry(x))", "exists x.(Student(x) & GoodAtMathematics(x) & GoodAtChemistry(x))", "exists x.(Student(x) & GoodAtMath(x) & GoodAtChemical(x))"]}
{"id": "folio_train_195", "nl": "All students good at chemistry enjoy conducting experiments. ", "fol": "all x.(GoodAtChemistry(x) -> EnjoysConductingExperiments(x))", "prediction": ["all x.((Student(x) & GoodAtChemistry(x)) -> EnjoysConductingExperiments(x))", "all x.((Student(x) & GoodAtChemistry(x)) -> EnjoysConductingExperiments(x))", "(all x.(GoodAtChemistry(x) -> EnjoysConductingExperiments(x)))", "all x y.((Student(x) & GoodAtChemistry(x)) -> EnjoysConductingExperiments(x,y))", "all x.(GoodAtChemistry(x) -> EnjoysConductingExperiments(x))", "all x.((Student(x) & GoodAtChemistry(x)) -> EnjoysConductingExperiments(x))", "all x y.((Student(x) & GoodAtChemistry(x)) -> EnjoysConductingExperiments(x,y))", "all x.(GoodAtChemistry(x) -> EnjoysConductingExperiments(x))", "all x.((Student(x) & GoodAtChemistry(x)) -> EnjoysConductingExperiments(x))", "all x y.((Student(x) & GoodAtChemistry(x)) -> EnjoysConductingExperiments(x))", "all x.((Student(x) & GoodAtChemical(x)) -> EnjoysConductingExperiments(x))", "all x.(GoodAtChemistry(x) -> EnjoysConductingExperiments(x))", "all x.((Student(x) & GoodAtChemistry(x)) -> EnjoysExperiments(x))", "all x y.((Student(x) & GoodAtChemistry(x)) -> EnjoysConductingExperiments(x,y))", "all x.((Student(x) & GoodAtChemical(x)) -> EnjoysConductingExperiments(x))", "all x.((Student(x) & GoodAtChemistry(x)) -> EnjoysExperiments(x))"]}
{"id": "folio_train_196", "nl": "All students that enjoy conducting experiments are good at planning. ", "fol": "all x.(EnjoysConductingExperiments(x) -> GoodAtPlanning(x))", "prediction": ["all x.((Student(x) & EnjoysConductingExperiments(x)) -> GoodAtPlanning(x))", "all x.((Student(x) & EnjoysConductingExperiments(x)) -> GoodAtPlanning(x))", "all x y.((Student(x) & EnjoysConductingExperiments(x)) -> GoodAtPlanning(x))", "all x.(EnjoysConductingExperiments(x) -> GoodAtPlanning(x))", "all x.((Student(x) & EnjoysExperiments(x)) -> GoodAtPlanning(x))", "all x.((Student(x) & EnjoysConductingExperiments(x)) -> GoodAtPlanning(x))", "all x y.((Student(x) & EnjoysConductingExperiments(x)) -> GoodAtPlanning(y))", "all x y.((Student(x) & EnjoysConductingExperiments(x) & GoodAtPlanning(y)) -> GoodAtPlanning(x))", "all x.(EnjoysConductingExperiments(x) -> GoodAtPlanning(x))", "all x.((Student(x) & EnjoysConductingExperiments(x)) -> GoodAtPlanning(x))", "all x.((Student(x) & EnjoysExperiments(x)) -> GoodAtPlanning(x))", "all x.(EnjoysConductingExperiments(x) -> GoodAtPlanning(x))", "all x.((Student(x) & EnjoysConductingExperiments(x)) -> GoodAtPlanning(x))", "all x.((Student(x) & EnjoysExperiments(x)) -> GoodAtPlanning(x))", "all x.((Student(x) & EnjoysConductingExperiments(x)) -> GoodAtPlanning(x))", "all x.((Student(x) & EnjoysConductingExperiments(x)) -> GoodAtPlanning(x))"]}
{"id": "folio_train_197", "nl": "No student good at planning is awarded the Dean's List. ", "fol": "all x.(GoodAtPlanning(x) -> -AwardedDeansList(x))", "prediction": ["-exists x.(Student(x) & GoodAtPlanning(x) & AwardedDeansList(x))", "all x.((Student(x) & GoodAtPlanning(x)) -> DeansList(x))", "no student goodAtPlanningAwardsDeansList(n)", "-all x.(Student(x) -> GoodAtPlanningAward(x))", "all x.((Student(x) & GoodAtPlanning(x)) -> AwardedDeansList(x))", "-exists x.(Student(x) & GoodAtPlanning(x) & AwardedDeansList(x))", "all x.((Student(x) & GoodAtPlanning(x)) -> DeansList(x))", "(exists x.(Student(x) & GoodAtPlanning(x)) & -AwardedDeansList(x))", "-exists x.(Student(x) & GoodAtPlanning(x) & AwardedDeansList(x))", "-exists x.(Student(x) & GoodAtPlanning(x) & -AwardedDeansList(x))", "all x.((Student(x) & GoodAtPlanning(x)) -> AwardedDeansList(x))", "all x.((Student(x) & GoodAtPlanning(x)) -> DeansList(x))", "-exists x.(Student(x) & GoodAtPlanning(x) & AwardedDeansList(x))", "all x.((Student(x) & GoodAtPlanning(x)) -> AwardedDeansList(x))", "-exists x.(Student(x) & GoodAtPlanning(x) & AcquiredDeansList(x))", "-exists x.(Student(x) & GoodAtPlanning(x))"]}
{"id": "folio_train_198", "nl": "James is either good at chemistry and awarded the Dean's List, or neither good at chemistry nor awarded the Dean's List.", "fol": "-((GoodAtChemistry(James) & -AwardedDeansList(James)) | (-GoodAtChemistry(James) & AwardedDeansList(James)))", "prediction": ["all x.(James(x) -> ((GoodAtChemistry(x) & AwardedDeansList(x)) | (-GoodAtChemistry(x) & AwardedDeansList(x))))", "(all x.(James(x) -> (GoodAtChemistry(x) & AwardDeansList(x))) | (-GoodAtChemistry(x) & AwardDeansList(x))))", "all x y.((James(x) & Chemistry(y)) -> (GoodAt(x,y) & AwardedDeansList(x)) | (-GoodAt(x,y) & AwardedDeansList(x))))", "all x.(James(x) -> (GoodAtChemistry(x) & AwardDeansList(x)) | (-GoodAtChemistry(x) & AwardDeansList(x))))", "all x.(James(x) -> ((GoodAtChemistry(x) & AwardedDeansList(x)) | (-GoodAtChemistry(x) & AwardedDeansList(x))))", "(GoodAtChemistry(James) & AwardedDeansList(James)) | (-GoodAtChemistry(James) & AwardedDeansList(James))))", "all x.(James(x) -> ((GoodAtChemicals(x) & AwardedDeansList(x)) | (-GoodAtChemicals(x) & AwardedDeansList(x))))", "(all x.(James(x) -> (GoodAtChemical(x) & AwardedDeansList(x))) | (-GoodAtChemical(x) & AwardedDeansList(x))))", "(GoodAtChemistry(James) | (-GoodAtChemistry(James) & AwardedDeansList(James))))", "all x y.((James(x) & Chemistry(y)) -> (GoodAt(x,y) & AwardedDeansList(x)) | (-GoodAt(x,y) & AwardedDeansList(x))))", "(all x.(James(x) -> (GoodAtChemistry(x) & AwardDeansList(x)) | (-GoodAtChemistry(x) & AwardDeansList(x))))", "(all x.((James(x) & GoodAtChemical(x) & DeansList(x)) | (-GoodAtChemical(x) & DeansList(x))))", "all x.(James(x) -> (GoodAtChemistry(x) & AwardedDeansList(x)) | -(GoodAtChemistry(x) & AwardedDeansList(x))))", "all x.(James(x) -> ((GoodAtChemicals(x) & AwardedDeansList(x)) | (-GoodAtChemicals(x) & AwardedDeansList(x))))", "(all x.(James(x) -> (GoodAtChemistry(x) & AwardDeansList(x)) | (-GoodAtChemistry(x) & AwardDeansList(x))))", "exists x.(James(x) & ((GoodAtChemistry(x) & AwardedDeansList(x)) | -(GoodAtChemistry(x) & AwardedDeansList(x)))))"]}
{"id": "folio_train_199", "nl": "James is good at planning.", "fol": "GoodAtPlanning(James)", "prediction": ["all x.(James(x) -> GoodAtPlanning(x))", "all x.((James(x) & Planning(x)) -> GoodAt(x))", "(GoodAtPlanning(James)", "James is goodAtPlanning(James)", "all x.(James(x) -> GoodAtPlanning(x))", "James is goodAtPlanning(James)", "(GoodAtPlanning(James)", "all x.((James(x) & Planning(x)) -> GoodAt(x))", "all x.((James(x) & GoodAtPlanning(x)) -> GoodAtPlanning(x))", "all x.(James(x) -> GoodAtPlanning(x))", "James is goodAtPlanning.", "(GoodAtPlanning(Jimmy)", "-GoodAtPlanning(James)", "(GoodAtPlanning(James,x))", "all x.(James(x) -> GoodAtPlanning(x))", "All x.(James(x) -> GoodAtPlanning(x))"]}
{"id": "folio_train_200", "nl": "James is either good at planning or good at math.", "fol": "(GoodAtPlanning(James) | GoodAtMath(James))", "prediction": ["all x.(James(x) -> (GoodAtPlanning(x) | GoodAtMath(x)))", "(GoodAtPlanning(James) | GoodAtMath(James))", "all x.(James(x) -> (GoodAtPlanning(x) | GoodAtMath(x)))", "all x.((James(x) & (GoodAtPlanning(x) | GoodAtMath(x))) -> GoodAtPlanning(x))", "(GoodAtPlanning(James) | GoodAtMath(James))", "all x.(James(x) -> (GoodAtPlanning(x) | GoodAtMath(x)))", "(GoodAtPlanning(James) | GoodAtMath(James))", "all x y.((James(x) & Planning(y)) | Math(y))", "all x.((James(x) & (GoodAtPlanning(x) | GoodAtMath(x))) -> GoodAtPlanning(x))", "(GoodAtPlanning(James) | GoodAtMathematics(James))", "all x.(James(x) -> (GoodAtPlanning(x) | GoodAtMath(x)))", "all x.(James(x) -> (GoodAtPlanning(x) | GoodAtMath(x)))", "(GoodAtPlanning(James) | GoodAtMath(James))", "all x.(James(x) -> (GoodAtPlanning(x) | GoodAtMathematics(x)))", "exists x.(Jimmy(x) & (GoodAtPlanning(x) | GoodAtMathematics(x)))", "exists x.(James(x) & (GoodAtPlanning(x) | GoodAtMath(x)))"]}
{"id": "folio_train_201", "nl": "James is either good at chemistry or good at math.", "fol": "(GoodAtChemistry(James) | GoodAtMath(James))", "prediction": ["all x.(James(x) -> (GoodAtChemistry(x) | GoodAtMath(x)))", "(GoodAtChemistry(James) | GoodAtMath(James))", "(GoodAtChemistry(James) | GoodAtMathematics(James))", "all x.(James(x) -> (GoodAtChemistry(x) | GoodAtMath(x)))", "all x.((James(x) & (GoodAtChemistry(x) | GoodAtMath(x))) -> GoodAt(x))", "(GoodAtChemicals(James) | GoodAtMath(James))", "(GoodAtChemistry(James) | GoodAtMath(James))", "all x.(James(x) -> (GoodAtChemistry(x) | GoodAtMath(x)))", "all x y.((James(x) & Chemistry(y)) | Math(y))", "all x.((James(x) & (GoodAtChemistry(x) | GoodAtMath(x))) -> GoodAt(x))", "all x.(James(x) -> (GoodAtChemistry(x) | GoodAtMathematics(x)))", "(GoodAtChemicals(James) | GoodAtMathematics(James))", "(GoodAtChemistry(James) | GoodAtMathematics(James))", "all x.(James(x) -> (GoodAtChemical(x) | GoodAtMathematics(x)))", "exists x.(James(x) & (GoodAtChemistry(x) | GoodAtMath(x)))", "exists x.(James(x) & (GoodAtChemistry(x) | GoodAtMathematics(x)))"]}
{"id": "folio_train_202", "nl": "If James is good at Chemistry or gets awarded the Dean's List, then James is either good at planning or good at math.", "fol": "((GoodAtChemistry(James) | AwardedDeansList(James)) -> (GoodAtPlanning(James) | GoodAtMath(James)))", "prediction": ["all x.((James(x) & (GoodAtChemistry(x) | AwardedDeansList(x))) -> (GoodAtPlanning(x) | GoodAtMath(x)))", "all x.((James(x) & GoodAtChemistry(x) | AwardedDeansList(x)) -> (GoodAtPlanning(x) | GoodAtMath(x)))", "(all x.(GoodAtChemistry(x) | AwardedDeansList(x))) -> (GoodAtPlanning(x) | GoodAtMath(x)))", "all x.((James(x) & (GoodAtChemistry(x) | AcquiredDeansList(x))) -> (GoodAtPlanning(x) | GoodAtMath(x)))", "all x y.((James(x) & GoodAtChemistry(x) & (AwardedDeansList(x) | GoodAtPlanning(y) | GoodAtMath(y))) -> (GoodAtPlanning(x) | GoodAtMath(x)))", "all x.(GoodAtChemistry(x) | (AwardedDeansList(x) & James(x))) -> (GoodAtPlanning(x) | GoodAtMath(x)))", "(GoodAtChemistry(James) | AwardedDeansList(James)))", "all x.((James(x) & GoodAtChemistry(x) | AwardedDeansList(x)) -> (GoodAtPlanning(x) | GoodAtMath(x)))", "all x y.((James(x) & (GoodAtChemistry(x) | AwardedDeansList(x))) -> (GoodAtPlanning(x) | GoodAtMath(x)))", "all x.((James(x) & GoodAtChemistry(x) & (AwardedDeansList(x) | GoodAtPlanning(x))) -> (GoodAtMath(x) | GoodAtMath(x)))", "(all x.(GoodAtChemistry(x) | AwardedDeansList(x))) -> (GoodAtPlanning(x) | GoodAtMath(x)))", "all x.((James(x) & (GoodAtChemistry(x) | AwardedDeansList(x))) -> (GoodAtPlanning(x) | GoodAtMath(x)))", "all x.(((James(x) & GoodAtChemistry(x)) | AwardedDeansList(x)) -> (GoodAtPlanning(x) | GoodAtMath(x)))", "all x.(((James(x) & GoodAtChemistry(x)) | (AwardedDeansList(x) & GoodAtPlanning(x)) | GoodAtMathematics(x)))", "all x.(GoodAtChemistry(x) | (AwardedDeansList(x) & James(x))) -> (GoodAtPlanning(x) | GoodAtMath(x)))", "(GoodAtChemistry(James) | AwardedDeansList(James)))"]}
{"id": "folio_train_203", "nl": "If a Leetcode problem is at the easy level, then its AC rate is lower than 20 percent. ", "fol": "all x.(IsEasyLevel(x) -> ACRateLowerThan20(x))", "prediction": ["all x.((LeetcodeProblem(x) & EasyLevel(x)) -> LowerACRateThan(x,20))", "all x.((LeetcodeProblem(x) & EasyLevel(x)) -> ACRateLowerThan20Percent(x))", "(EasyLevel(LeetcodeProblem) -> LowerACRate(LeetcodeProblem,20))", "all x.(EasyLevel(x) -> LowerACRate(x,20))", "(EasyLevel(LeetcodeProblem) -> LowerACRateThan20Percent(LeetcodeProblem))", "all x y.((LeetcodeProblem(x) & EasyLevel(x)) -> LowerACRate(y,x))", "all x.((LeetcodeProblem(x) & EasyLevel(x)) -> LowerACRate(x,20))", "all x.(EasyLevel(x) -> LowerAACRateThan(x,20))", "all x y.((LeetcodeProblem(x) & EasyLevel(x)) -> ACRateLowerThan(y,x))", "all x.((LeetcodeProblem(x) & EasyLevel(x)) -> ACRateLowerThan(x,20))", "all x y.((LeetcodeProblem(x) & EasyLevel(x) & ACRateLowerThan(y,x,y)) -> LowerThan(y,x))", "all x.((LeetcodeProblem(x) & EasyLevel(x)) -> LowerAACRate(x,20))", "all x.(EasyLevel(x) -> ACRateLowerThan(x,20))", "all x.(EasyLevel(x) -> LowerACRate(x,20%))", "all x.((LeetcodeProblem(x) & EasyLevel(x)) -> ACRateLowerThan(x,20))", "all x.((LeetcodeProblem(x) & EasyLevel(x)) -> LowerACRateThan20Percent(x))"]}
{"id": "folio_train_204", "nl": "All Leetcode problems that are recommended to novices are easy. ", "fol": "all x.(IsRecommendedToNovices(x) -> IsEasyLevel(x))", "prediction": ["all x.((LeetcodeProblem(x) & RecommendedToNovees(x)) -> Easy(x))", "all x.((LeetcodeProblem(x) & RecommendedToNoveals(x)) -> Easy(x))", "all x y.((LeetcodeProblem(x) & Newbie(y)) -> Easy(x))", "(all x.((LeetcodeProblem(x) & RecommendedToNovees(x)) -> Easy(x))", "all x.((LeetcodeProblem(x) & RecommendatedToNoveals(x)) -> Easy(x))", "all x.(LeetcodeProblem(x) -> Easy(x))", "(all x.(Novell(x) -> EasyLeetcodeProblem(x))", "All leetcodeProblemsRecommendatedToNoveals(x) -> Easy(x))", "all x y.((LeetcodeProblem(x) & Newbie(y)) -> Easy(x))", "all x.((LeetcodeProblem(x) & RecommendedToNovees(x)) -> Easy(x))", "all x.((LeetcodeProblem(x) & RecommendationToNovees(x)) -> Easy(x))", "all x y.((LeetcodeProblem(x) & Nomad(y) & RecommendedTo(x,y)) -> Easy(x))", "all x.(LeetcodeProblem(x) -> Easy(x))", "all x.(LeetcodeProblem(x) -> (RecommendedToNoveals(x) & Easy(x)))", "all x.((LeetcodeProblem(x) & RecommendedToNinjas(x)) -> Easy(x))", "all x.((LeetcodeProblem(x) & RecommendatedToNoveals(x)) -> Easy(x))"]}
{"id": "folio_train_205", "nl": "A Leetode problem is either easy or hard.", "fol": "all x.((IsEasyLevel(x) & -IsHardLevel(x)) | (-IsEasyLevel(x) & IsHardLevel(x)))", "prediction": ["all x.(LeetodeProblem(x) -> (Easy(x) | Hard(x)))", "all x.(LeetodeProblem(x) -> (Easy(x) | Hard(x)))", "all x y.((LeetodeProblem(x) & Easy(y) | Hard(y)) -> Problem(x))", "all x.(LeathetodeProblem(x) -> (Easy(x) | Hard(x)))", "all x y.((LeetodeProblem(x) & Problem(y)) -> (Easy(x) | Hard(x)))", "all x.(LeetodeProblem(x) -> (Easy(x) | Hard(x)))", "all x y.((LeetodeProblem(x) & Easy(x) | Hard(x)) -> LeetodeProblem(y))", "all x.(LeathetodeProblem(x) -> (Easy(x) | Hard(x)))", "all x.(LeetodeProblem(x) -> (Easy(x) | Hard(x)))", "exists x.(LeathodeProblem(x) & (Easy(x) | Hard(x)))", "all x.(LeetodeProblem(x) -> (Easy(x) | Hard(x)))", "all x.(LeetodeProblem(x) -> (Easy(x) | Hard(x)))", "exists x.(LeaftodeProblem(x) & (Easy(x) | Hard(x)))", "exists x.(LeotodeProblem(x) & (Easy(x) | Hard(x)))", "all x.(LeetodeProblem(x) -> (Easy(x) | Hard(x)))", "exists x.(LeetodeProblem(x) & (Easy(x) | Hard(x)))"]}
{"id": "folio_train_206", "nl": "Leetcode problems that are starred by more than 1 thousand users are hard.", "fol": "all x.(IsStarredByUsers(x) -> IsHardLevel(x))", "prediction": ["all x.((LeetcodeProblem(x) & StartedByMoreThan1000Users(x)) -> Hard(x))", "all x.((LeetcodeProblem(x) & StartedByMoreThan(x,1000)) -> Hard(x))", "(Hard(leetcodeProblems) -> StartedByMoreThan1000Users(leetcodeProblems))", "all x y.((LeetcodeProblem(x) & StartedByMoreThan(x,y)) -> Hard(x))", "(Hard(leetcodeProblem(leetcode) & StartedByMoreThan1000Users(leetcode))", "all x y.((LeetcodeProblem(x) & StartedByMoreThan(x,y) & MoreThan(y,x)) -> Hard(x))", "all x.((LeetcodeProblem(x) & StartedByMoreThan1000Users(x)) -> Hard(x))", "all x y.((LeetcodeProblem(x) & StartedBy(x,y) & MoreThan(y,x)) -> Hard(x))", "all x.((Problem(x) & StartedByMoreThan1000Users(x)) -> Hard(x))", "all x.((LeetcodeProblem(x) & StartedByMoreThan(x,1000)) -> Hard(x))", "all x y.((LeetcodeProblem(x) & StartedByMoreThan1000Users(x)) -> Hard(y))", "all x y.((LeetcodeProblem(x) & StartedBy(x,y) & MoreThan(y,x)) -> Hard(x))", "all x.((LeetcodeProblem(x) & StartedByMoreThan1000Users(x)) -> Hard(x))", "all x.((LeetcodeProblem(x) & StartedBy(x,y) & MoreThan(y,x)) -> Hard(x))", "all x.((LeetcodeProblem(x) & StartedByMoreThan(x,1000)) -> Hard(x))", "all x.((LeetcodeProblem(x) & StartedByMoreThanOneTen(x)) -> Hard(x))"]}
{"id": "folio_train_207", "nl": "2Sum is recommended to novices. ", "fol": "IsRecommendedToNovices(Twosum)", "prediction": ["all x.((Sum(x) & Novice(x)) -> RecommendedTo(x,2))", "all x.((2Sum(x) & Novice(x)) -> RecommendedTo(x,y))", "2Sum is recommended to Novices.", "(RecommendedToNoveles(2Sum) -> RecommendedToNoveles(2Sum))", "all x.(2Sum(x) -> RecommendedToNovees(x))", "(RecommendedToNovees(2Sum) & -RecommendedToNovees(2Sum))", "all x y.((Sum(x) & Novice(y)) -> RecommendedTo(x,y))", "2Sum is recommended to Newbies.", "all x.((2Sum(x) & Newbie(x)) -> RecommendedTo(x,y))", "All x.(Sum(x) -> RecommendedToNovees(x))", "2Sum is recommended to novices.", "all x.(2Sum(x) -> RecommendedToNovees(x))", "2Sum is recommendedToNovees(2))", "all x.((2Sum(x) & Nomad(x)) -> RecommendedTo(x,y))", "(RecommendedToNoveles(2Sum)", "All x.(2Sum(x) -> RecommendedToNoveles(x))"]}
{"id": "folio_train_208", "nl": "4Sum is starred by more than 1 thousand users.", "fol": "IsStarredByUsers(Foursum)", "prediction": ["all x.((4Sum(x) & StartedByMoreThan(x,1000)) -> StartedBy(x,1))", "all x.((Sum(x) & StartedByMoreThan(x,1000)) -> StartedBy(x,1))", "all x y.((4Sum(x) & User(y)) -> StartedBy(x,y))", "(StartedByMoreThan(4Sum) & MoreThan(4K))", "all x.((4Sum(x) & StartedByMoreThan1000Users(x)) -> StartedBy(x,y))", "all x.((Follows(x,y) & User(y)) -> StartedBy(x,y))", "(StartedByMoreThan1000Users(4Sum) & MoreThan1000Users(4Sum))", "all x y.((Sum(x) & User(y)) -> StartedBy(x,y))", "all x.(4Sum(x) -> StartedByMoreThan1000Users(x))", "all x y.((FourSum(x) & User(y)) -> StartedBy(x,y))", "All x.(Sum(x) -> StartedByMoreThan(x,1000))", "(StartedByMoreThan(4Sum,1000))", "All x.(4Sum(x) -> StartedByMoreThan(x,1000))", "all x y.((4Sum(x) & User(y)) -> StartedBy(x,y))", "All x.(Sum(x) -> StartedByMoreThan1000Users(x))", "All x.(4Sum(x) -> StartedByMoreThan1000Users(x))"]}
{"id": "folio_train_209", "nl": "2Sum is a Leetcode problem with an easy level.", "fol": "IsEasyLevel(Twosum)", "prediction": ["all x.((LeetcodeProblem(x) & EasyLevel(x)) -> 2Sum(x))", "2Sum is a LeetcodeProblem(x) & EasyLevel(x))", "2Sum(x) -> (LeetcodeProblem(x) & EasyLevel(x)))", "all x.(Sum(x) -> (LeetcodeProblem(x) & EasyLevel(x)))", "all x.(2Sum(x) -> (LeetcodeProblem(x) & EasyLevel(x)))", "(LeetcodeProblem(2Sum) & EasyLevel(2Sum))", "2Sum(x) -> (LeetcodeProblem(x) & EasyLevel(x)))", "2Sum is a LeetcodeProblem(x) & EasyLevel(x))", "2Sum is a LeetcodeProblemWithEasyLevel(x)", "all x.((LeetcodeProblem(x) & EasyLevel(x)) -> 2Sum(x))", "(LeetcodeProblem(2Sum) & EasyLevel(2Sum))", "all x.(Sum(x) -> (LeetcodeProblem(x) & EasyLevel(x)))", "All x.(Sum(x) -> LeetcodeProblem(x) & EasyLevel(x))", "All x.(2Sum(x) -> (LeetcodeProblem(x) & EasyLevel(x)))", "2Sum is a LeetcodeProblem(x) & EasyLevel(x))", "all x.((LeetcodeProblem(x) & EasyLevel(x)) -> 2Sum(x))"]}
{"id": "folio_train_210", "nl": "4Sum is a Leetcode problem recommended to the novice.", "fol": "(LeetcodeProblem(Foursum) & IsRecommendedToNovices(Foursum))", "prediction": ["all x.((LeetcodeProblem(x) & Novice(x)) -> 4Sum(x))", "all x.(4Sum(x) -> LeetcodeProblemRecommendedToNovee(x))", "(LeetcodeProblem(4Sum) & RecommendedToNovealist(4Sum))", "all x.((LeetcodeProblem(x) & Newbie(x)) -> 4Sum(x))", "all x y.((LeetcodeProblem(x) & Novice(y)) -> RecommendedTo(x,y))", "(RecommendedToNoveese(4Sum) -> LeetcodeProblem(4Sum))", "all x.(LeetcodeProblem(x) -> RecommendedToNovee(x))", "4Sum is a LeetcodeProblemRecommendedToNoveese(4))", "all x.((LeetcodeProblem(x) & Noob(x)) -> 4Sum(x))", "all x.(4Sum(x) -> LeetcodeProblem(x))", "4Sum is a LeetcodeProblemRecommendedToNovels(4Sum,Novels)", "All x.(Sum(x) -> LeetcodeProblemRecommendedToNovee(x))", "all x y.((LeetcodeProblem(x) & Novice(y)) -> RecommendedTo(x,y))", "All x.(4Sum(x) -> LeetcodeProblemRecommendedToNovel(x))", "all x.((LeetcodeProblem(x) & Novice(x)) -> 4SumRecommended(x))", "All x.(4Sum(x) -> LeetcodeProblem(x))"]}
{"id": "folio_train_211", "nl": "2Sum has an AC rate higher than 20 percent.", "fol": "-ACRateLowerThan20(Twosum)", "prediction": ["all x.((Sum(x) & ACRateHigherThan(x,20)) -> Has(x,20))", "2Sum has ACRateHigherThan20Percent(2Sum)", "all x.(Sum(x) -> HigherAACRateThan(x,20))", "(ACRateHigherThan20Percent(2Sum))", "2SumHasACRateHigherThan20Percent(2Sum)", "All x y.((Sum(x) & ACRate(y) & HigherThan(y,x,y)) -> HigherThan(x,y))", "(AcRateHigherThan(2Sum) & HigherThan(2Sum))", "all x.(2Sum(x) -> HigherAACRate(x,20))", "2Sum has ACRateHigherThan(x,20)", "all x.((Sum(x) & ACRateHigherThan(x,20)) -> Has(x,20))", "all x.((2Sum(x) & ACRateHigherThan(x,20)) -> Has(x,20))", "all x.(Sum(x) -> HasACRateHigherThan20Percent(x))", "2Sum has ACRateHigherThan20Percent(x)", "All x.(2Sum(x) -> HasACRateHigherThan(x,20))", "all x.(Sum(x) -> ACRateHigherThan20Percent(x))", "2Sum has ACRateHigherThan20Percent(2Sum)"]}
{"id": "folio_train_212", "nl": "All rental cars cost the renter money.", "fol": "all x.(RentCar(x,Car) -> CostToRenter(x,Money))", "prediction": ["all x.(RentalCar(x) -> CostsRenterMoney(x))", "all x y.((RentalCar(x) & Renter(y)) -> CostsMoney(x,y))", "all x.((RentalCar(x) & Renter(y)) -> CostsMoney(x,y))", "all x.(RentalCar(x) -> CostsRenterMoney(x))", "all x y.((RentalCar(x) & Renter(y)) -> CostsMoney(x,y))", "all x y z.((RentalCar(x) & Renter(y) & Money(z)) -> Costs(x,y,z))", "all x.((Car(x) & Renter(y)) -> CostsMoney(x,y))", "all x.(RentalCar(x) -> CostsRenterMoney(x))", "all x y.((RentalCar(x) & Renter(y)) -> CostsMoney(x,y))", "all x.((RentalCar(x) & Renter(y)) -> CostsMoney(x,y))", "all x.(RentalCar(x) -> CostsRenterMoney(x))", "all x y.((RentalCar(x) & Renter(y)) -> CostsMoney(x,y))", "all x.(RentalCar(x) -> CostsMortgage(x))", "all x.(RentalCar(x) -> CostsRenterMoney(x))", "all x y.((RentalCar(x) & Renter(y)) -> CostsMoney(x,y))", "All x.(RentingCar(x) -> Costs(x,RenterMoney))"]}
{"id": "folio_train_213", "nl": "Whenever Sarah goes to Vermont, Sarah drives there.", "fol": "(GoesToLocation(Sarah,Vermont) -> DriveToLocation(Sarah,Vermont))", "prediction": ["all x.((Sarah(x) & GoesTo(x,VT)) -> DrivesTo(x,VT))", "all x y.((Sarah(x) & Vermont(y)) -> Drives(x,y))", "all x.((SarahGoesTo(x,VT)) -> DrivesThere(x,VT))", "(all x.(GoesTo(x,VT) -> Drives(x,VT)))", "all x.((Sarah(x) & GoesTo(x,Venice)) -> DrivesThere(x))", "all x y z.((Sarah(x) & Vermont(y) & Vermont(z)) -> Drives(x,y,z))", "all x y.((Sarah(x) & Vermont(y)) -> Drives(x,y))", "(all x.(GoesTo(x,Venice) -> Drives(x,Venice)))", "all x y.((SarahGoesTo(x,y) & Vermont(y)) -> DrivesThere(x,y))", "exists x.(SarahGoesTo(x,VT) & DrivesTo(x,VT))", "all x.((SarahGoesTo(x,VT)) -> DrivesTo(x,VT))", "all x y.((Sarah(x) & Vermont(y)) -> DrivesTo(x,y))", "all x.((Sarah(x) & GoesTo(x,VT)) -> DrivesThere(x,VT))", "all x.((SarahGoesTo(x,Venice)) -> DrivesThere(x,Venice))", "All x.(GoesTo(x,VT) -> DrivesTo(x,VT))", "all x y.((Sarah(x) & Vermont(y)) -> DrivesTo(x,y))"]}
{"id": "folio_train_214", "nl": "For someone who does not own a car to drive somewhere, they must either borrow a car or rent a car.", "fol": "all x y.((((-OwnCar(x,Car) & DriveToLocation(x,y)) -> BorrowCar(x,Car)) & -RentCar(x,Car)) | (-((-OwnCar(x,Car) & DriveToLocation(x,y)) -> BorrowCar(x,Car)) & RentCar(x,Car)))", "prediction": ["all x.((Person(x) & -OwnsCar(x)) -> (BorrowCar(x) | RentCar(x)))", "all x y.((Person(x) & -OwnsCar(x) & DrivesSomewhere(y)) -> (BorrowsCar(x,y) | RentsCar(x,y)))", "all x.((Person(x) & -OwnsCar(x)) -> (BorrowCar(x) | RentCar(x)))", "all x.((DoesNotOwnCar(x) & DrivesSomewhere(x)) -> (BorrowCar(x) | RentCar(x)))", "all x y.((Person(x) & -OwnsCar(x) & DrivesSomewhere(x)) -> (BorrowCar(x,y) | RentCar(x,y)))", "all x.((Person(x) & -OwnsCar(x)) -> (BorrowsCar(x) | RentsCar(x)))", "exists x.(Car(x) & (-Owns(x,car) & Drives(x)) | Rents(x,car)))", "(all x.((Person(x) & -OwnsCar(x)) -> (BorrowCar(x) | RentCar(x))))", "all x y.((Person(x) & -OwnsCar(x) & DrivesAway(x,y)) -> (BorrowCar(x) | RentCar(x)))", "all x.((Person(x) & DoesNotOwnCar(x) & DrivesSomewhere(x)) -> (BorrowsCar(x) | RentsCar(x)))", "all x y.((Person(x) & -OwnCar(x,y)) -> (BorrowCar(x,y) | RentCar(x,y)))", "exists x.(DoesNotOwnCar(x) & DrivesSomewhere(x)) -> (BorrowCar(x) | RentCar(x)))", "all x.((Person(x) & -OwnsCar(x)) -> (BorrowCar(x) | RentCar(x)))", "all x y.((Person(x) & -OwnsCar(x,y)) -> (BorrowCar(x,y) | RentCar(x,y)))", "all x.((Person(x) & -OwnsCar(x)) -> (BorrowsCar(x) | RentsCar(x)))", "all x.((OwnsCar(x) & DrivesSomewhere(x)) -> (BorrowsCar(x) | RentsCar(x)))"]}
{"id": "folio_train_215", "nl": "Sarah doesn\u2019t own a car.", "fol": "-OwnCar(Sarah,Car)", "prediction": ["all x.(Sarah(x) -> -OwnsCar(x))", "(-OwnsCar(Sarah))", "all x.((Sarah(x) & -OwnsCar(x)) -> -OwnsCar(x))", "Sarah doesn\u2019t owns a car.", "(Sarah doesn\u2019tOwnCar(Sarah))", "(-OwnsCar(Sarah))", "-exists x.(Sarah(x) & OwnsCar(x))", "Sarah does not owns a car.", "all x.(Sarah(x) -> -OwnsCar(x))", "all x.((Sarah(x) & -OwnsCar(x)) -> -OwnsCar(x))", "Sarah doesn\u2019t ownsavecar(Sarah)", "-OwnsCar(Sarah,Sarah)", "(-OwnCar(Sarah))", "-OwnCar(Sarah,Sarah)", "Sarah doesn\u2019t owns a car.", "exists x.(Sarah(x) & -OwnsCar(x))"]}
{"id": "folio_train_216", "nl": "Sarah never borrows a car to go camping.", "fol": "all x.(GoingCamping(Sarah,x) -> -BorrowCar(Sarah,Car))", "prediction": ["all x.((Sarah(x) & Car(y)) -> -Borrows(x,y))", "-(BorrowsCar(Sarah) & GoesCamping(Sarah))", "all x y.((Sarah(x) & Car(y)) -> -Borrows(x,y))", "Sarah neverBorrowsCarToGoCamping(Sarah)", "all x.((Sarah(x) & Car(y)) -> -BorrowsToGoCamping(x,y))", "Sarah neverborrowsCarToGoCamping(Sarah)", "all x y.((Sarah(x) & Car(y)) -> -BorrowsToGoCamping(x,y))", "(-BorrowsCarToGoCamping(Sarah))", "-(BorrowsCar(Sarah) & GoesCamping(Sarah))", "Sarah neverborrowsCarToGoCamping(Sarah,Sarah,Sarah))", "all x.((Sarah(x) & Car(y)) -> -Borrows(x,y))", "(-BorrowsCar(Sarah,Camping))", "all x.((Sarah(x) & Car(y)) -> NeverBorrows(x,y))", "all x y.((Sarah(x) & Car(y)) -> -Borrows(x,y))", "(-BorrowsCarToGoCamping(Sarah,Sarah))", "all x.((Sarah(x) & Car(y)) -> NeverBorrowsToGoCamping(x,y))"]}
{"id": "folio_train_217", "nl": "Sarah is going to go camping in Vermont this weekend.", "fol": "GoingCamping(Sarah,Vermont)", "prediction": ["all x y.((Sarah(x) & Vermont(y)) -> GoingToCamp(x,y))", "all x.((Sarah(x) & CampingIn(x,Venice)) -> GoingToGo(x,Venice))", "Sarah is going to goCampingInVenice(Sarah)", "(GoesCampingIn(Sarah,VT) & ThisWeekend(Sarah,VT))", "Sarah is going to go camping in Vermont this weekend.", "(GoesCamping(Sarah) & In(Sarah,VT) & ThisWeekend(Sarah,VT))", "all x.((Sarah(x) & CampingInVenice(x)) -> GoingTo(x,Sarah))", "(GoesCampingInVenice(Sarah) & Weekend(Sarah,VT))", "Sarah is going to goCampingIn(Sarah,VT)", "Sarah will go camping in Vermont this weekend.", "all x y.((Sarah(x) & Vermont(y)) -> Camping(x,y))", "(GoesCampingIn(Sarah,Venice) & ThisWeekend(Sarah,Venice))", "all x.((Sarah(x) & Vermont(y)) -> Camping(x,y))", "Sarah is going to goCampingInVeniceThisWeekend(Sarah,VT)", "Sarah is going to go camping in Vermont this weekend.", "Sarah is going to go camping in Vermont this weekend."]}
{"id": "folio_train_218", "nl": "To go camping somewhere, you must go to that place.", "fol": "all x y.(GoingCamping(x,y) -> GoesToLocation(x,y))", "prediction": ["all x.(Camping(x) -> GoToPlace(x))", "all x y.((CampingPlace(x) & Place(y)) -> GoTo(x,y))", "all x.(Camping(x) -> MustGoToPlace(x))", "all x y.((CampingPlace(x) & Place(y)) -> MustGoTo(x,y))", "all x y z.((CampingPlace(x) & Place(y) & Place(z)) -> GoTo(x,y,z))", "all x.(CampingPlace(x) -> GoTo(x,y))", "exists x.(CampingPlace(x) & GoesTo(x,y))", "all x y.((CampingPlace(x) & CampingPlace(y)) -> GoTo(x,y))", "all x y.((CampingPlace(x) & Place(y)) -> GoTo(x,y))", "all x y z.((CampingPlace(x) & Place(y) & CampingPlace(z)) -> GoTo(x,y,z))", "all x y.((Camping(x) & Place(y)) -> GoTo(x,y))", "exists x.(CampingPlace(x) & GoTo(x,y))", "exists x.(CampingPlace(x) & GoesTo(x,y))", "all x y.((CampingPlace(x) & Place(y)) -> MustGoTo(x,y))", "exists x.(CampingPlace(x) & GoTo(x,Place,Place))", "exists x.(CampingPlace(x) & MustGoTo(x,y))"]}
{"id": "folio_train_219", "nl": "Sarah will spend money this weekend.", "fol": "CostToRenter(Sarah,Money)", "prediction": ["all x.(Sarah(x) -> SpendsMoney(x))", "Sarah will spend money this weekend.", "all x.((Sarah(x) & SpendsMoney(x)) -> ThisWeekend(x))", "(Sarah willSpreadMoney(Sarah) & ThisWeekend(Sarah))", "all x.(Sarah(x) -> SpendsMoneyThisWeekend(x))", "All x y.((Sarah(x) & Weekend(y)) -> SpendsMoney(x,y))", "Sarah will spends money this weekend.", "(Sarah willSpreadMoneyThisWeekend(Sarah))", "(Sarah willspendMoneyThisWeekend(Sarah))", "all x.((Sarah(x) & SpendsMoney(x)) -> Weekend(x))", "Sarah will spend money this weekend.", "Sarah will spendsMoneyThisWeekend(Sarah)", "Sarah will spends money this weekend.", "all x.((Sarah(x) & SpendsMoney(x)) -> ThisWeekend(x))", "all x.(Sarah(x) -> SpendsMoney(x))", "Sarah will spend money this weekend."]}
{"id": "folio_train_220", "nl": "All people who attend weddings are getting married or have friends who are getting married.", "fol": "all x.(AttendWeddings(x) -> IsGettingMarried(x))", "prediction": ["all x.((Person(x) & AttendsWeddings(x)) -> (GettingMarried(x) | HasFriends(x) & GettingMarried(x)))", "all x.(AttendsWeddings(x) -> (GettingMarried(x) | HasFriendsGettingMarried(x)))", "all x.((AttendsWeddings(x) & (GettingMarried(x) | HasFriends(x))) -> GetsMarried(x))", "all x.((Person(x) & AttendsWeddings(x)) -> (GettingMarried(x) | HasFriends(x) & GettingMarried(x)))", "all x y.((Person(x) & AttendsWeddings(x) & (GettingMarried(x) | HasFriends(y))) -> GetsMarried(x))", "all x.(AttendsWeddings(x) -> (GettingMarried(x) | HasFriendsGettingMarried(x)))", "all x.(AttendsWedding(x) -> (GettingMarried(x) | HasFriendsGettingMarried(x)))", "(all x.(AttendsWeddings(x) -> (GettingMarried(x) | HasFriendsGettingMarried(x))))", "all x.((AttendsWeddings(x) & (GetsMarried(x) | HasFriendsGettingMarried(x))) -> GetsMarried(x))", "all x y.((Person(x) & AttendsWedding(x)) -> (GettingMarried(x) | HasFriends(x,y)))", "all x.((Person(x) & AttendsWeddings(x)) -> (GettingMarried(x) | HasFriends(x) & GettingMarried(x)))", "all x y.((Person(x) & AttendsWeddings(x) & (GetsMarried(x) | HasFriends(y))) -> GetsMarried(x))", "all x.(AttendsWeddings(x) -> (GettingMarried(x) | HasFriends(x) & GettingMarried(x)))", "(all x.(AttendsWeddings(x) -> (GettingMarried(x) | HasFriendsGettingMarried(x))))", "all x.((Person(x) & AttendsWeddings(x)) -> (GettingMarried(x) | HasFriends(x,married)))", "all x.(AttendsWedding(x) -> (GettingMarried(x) | HasFriendsGettingMarried(x)))"]}
{"id": "folio_train_221", "nl": "No preteens and other young children are getting married or have friends who are getting married.", "fol": "all x.(IsPreTeen(x) -> -IsGettingMarried(x))", "prediction": ["all x.((Preteen(x) & YoungChild(x)) -> (-GettingMarried(x) | HasFriends(x) & Married(x)))", "-exists x.(Preteen(x) & YoungChild(x) & (GetsMarried(x) | HasFriends(x))))", "all x.((Preteen(x) | YoungChild(x)) -> (-GettingMarried(x) | HasFriends(x) & GettingMarried(x)))", "all x y.((Preteen(x) & YoungChild(y)) -> (-GettingMarried(x) | HasFriends(x,y)))", "all x.((Preteen(x) & YoungChild(x)) -> (-GettingMarried(x) | HasFriends(x)))", "-all x.(Preteen(x) & AllOtherYoungChildren(x) -> (GettingMarried(x) | HasFriends(x,married)))", "(-exists x.(Preteen(x) | YoungChild(x)) & Married(x)) & -exists y.(Friend(y) & Married(y))))", "all x.((Preteen(x) & YoungChild(x)) -> (-GetsMarried(x) | HasFriends(x) & GetsMarried(x)))", "all x.(PreteenAndYoungChild(x) -> (-GettingMarried(x) | HasFriendsGettingMarried(x)))", "-exists x.(Preteen(x) & YoungChild(x) & -(Friend(x) & Married(x)))", "-exists x.(Preteen(x) & (YoungChild(x) | HasFriends(x,y)))", "(exists x.(Preteen(x) & YoungChild(x) & -(GettingMarried(x) | HavingFriends(x))))", "all x.((Preteen(x) | YoungChild(x)) -> (-GettingMarried(x) | HasFriends(x)))", "all x y.((Preteen(x) & YoungChild(y)) -> (-GettingMarried(x) | HasFriends(y) & Married(y)))", "all x.((Preteen(x) & YoungChild(x)) -> (-GettingMarried(x) | HasFriendsGettingMarried(x)))", "-exists x.(Preteen(x) & (YoungChild(x) & Married(x)) | HasFriends(x,married)))"]}
{"id": "folio_train_222", "nl": "If people enjoy celebrating life milestone events with other people, then they attend weddings.", "fol": "all x.(EnjoyCelebratingMilestones(x) -> AttendWeddings(x))", "prediction": ["all x.((People(x) & EnjoysCelebratingLifeMilestoneEvents(x)) -> AttendsWeddings(x))", "all x y.((Person(x) & Person(y) & EnjoysCelebratingLifeMilestoneEvents(x,y)) -> AttendsWeddings(x))", "all x.((Person(x) & EnjoysCelebratingLifeMilestoneEvents(x)) -> AttendsWeddings(x))", "all x y.((Person(x) & Person(y) & CelebratesLifeMilestoneEvents(x,y)) -> AttendsWedding(x))", "all x y.((People(x) & Person(y) & CelebrateLifeMilestoneEvents(x,y)) -> AttendWedding(x))", "all x y z.((Person(x) & LifeMilestoneEvent(y) & Person(z) & Enjoys(x,y,z)) -> AttendsWedding(x))", "(EnjoysCelebratingLifeMilestoneEventsWithOtherPeople(Person,Life) & AttendsWeddings(Person,Life))", "all x.((People(x) & EnjoysCelebratingLifeMilestoneEvents(x) & OtherPeople(x)) -> AttendsWeddings(x))", "all x.(EnjoysCelebratingLifeMilestoneEventsWithOtherPeople(x) -> AttendsWeddings(x))", "all x.((Person(x) & EnjoysCelebratingLifeMilestoneEvents(x)) -> AttendsWeddings(x))", "all x y.((People(x) & Person(y) & EnjoysCelebratingLifeMilestoneEvents(x,y)) -> AttendsWeddings(x))", "all x.((People(x) & CelebrateLifeMilestoneEvents(x) & OtherPeople(x)) -> AttendWeddings(x))", "all x y.((Person(x) & Person(y) & EnjoysCelebratingLifeMilestoneEvents(x,y)) -> AttendsWedding(x))", "all x.((Person(x) & CelebratesLifeMilestoneEvents(x) & OtherPeople(x)) -> AttendsWeddings(x))", "all x y z.((Person(x) & Person(y) & LifeMilestoneEvent(z) & Enjoys(x,z)) -> AttendsWedding(x))", "all x.(EnjoysCelebratingLifeMilestoneEventsWithOthers(x) -> AttendsWeddings(x))"]}
{"id": "folio_train_223", "nl": "If people are fond of large organized group functions, then they enjoy celebrating life milestone events with other people.", "fol": "all x.(FondOfLargeGatherings(x) -> EnjoyCelebratingMilestones(x))", "prediction": ["all x.((Person(x) & FondOfLargeOrganizedGroupFunctions(x)) -> EnjoysCelebratingLifeMilestoneEvents(x))", "all x.(FavoriteOfLargeOrganizedGroupFunctions(x) -> EnjoysCelebratingLifeMilestoneEventsWithOtherPeople(x))", "all x y.((Person(x) & LargeOrganizedGroupFunctions(x) & Person(y)) -> EnjoysCelebratingLifeMilestoneEvents(x,y))", "all x.((People(x) & FondOfLargeOrganizedGroupFunctions(x)) -> EnjoysCelebratingLifeMilestoneEventsWithOtherPeople(x))", "all x y.((Person(x) & LargeOrganizedGroupFunction(x) & Person(y) & FondOf(x,y)) -> EnjoysCelebratingLifeMilestoneEvents(x,y))", "all x.(FollowingLargeOrganizedGroupFunctions(x) -> EnjoysCelebratingLifeMilestoneEventsWithOtherPeople(x))", "all x.((Person(x) & FondOfLargeOrganizedGroupFunctions(x)) -> EnjoysCelebratingLifeMilestoneEventsWithOtherPeople(x))", "all x.(FavoriteOfLargeOrganizedGroupFunctions(x) -> CelebrateLifeMilestoneEventsWithOtherPeople(x))", "all x y.((People(x) & LargeOrganizedGroupFunctions(x) & People(y)) -> EnjoysCelebratingLifeMilestoneEvents(x,y))", "all x y z.((Person(x) & LargeOrganizedGroupFunction(y) & Person(z) & FondOf(x,y)) -> EnjoysCelebratingLifeMilestoneEvents(x,z))", "all x y.((Person(x) & LargeOrganizedGroupFunctions(x) & FondOf(x,y)) -> EnjoysCelebratingLifeMilestoneEvents(x,y))", "all x.((Person(x) & FondOfLargeOrganizedGroupFunctions(x)) -> CelebrateLifeMilestoneEventsWithOtherPeople(x))", "all x.(FantOfLargeOrganizedGroupFunctions(x) -> EnjoysCelebratingLifeMilestoneEvents(x))", "all x y.((People(x) & LargeOrganizedGroupFunctions(x) & Person(y)) -> CelebrateLifeMilestoneEventsWith(x,y))", "all x.((People(x) & FondOfLargeOrganizedGroupFunctions(x)) -> EnjoysCelebratingLifeMilestoneEvents(x))", "all x.(FavoriteOfLargeOrganizedGroupFunctions(x) -> EnjoysCelebratingLifeMilestoneEventsWithOtherPeople(x))"]}
{"id": "folio_train_224", "nl": "All people who are outgoing and very spirited are fond of large organized group functions.", "fol": "all x.(IsOutgoing(x) -> FondOfLargeGatherings(x))", "prediction": ["all x.((Outgoing(x) & VeryStirring(x)) -> FondOfLargeOrganizedGroupFunctions(x))", "all x.((Outgoing(x) & VeryTidy(x)) -> FondOfLargeOrganizedGroupFunctions(x))", "all x.((Person(x) & Outgoing(x) & VeryTidy(x)) -> FondOfLargeOrganizedGroupFunctions(x))", "all x.((People(x) & Outgoing(x) & VeryTidy(x)) -> FondOfLargeOrganizedGroupFunctions(x))", "all x y.((Person(x) & Outgoing(x) & VeryTidy(x)) -> FondOfLargeOrganizedGroupFunctions(y))", "all x.((Person(x) & Outgoing(x) & VeryStirring(x)) -> FondOfLargeOrganizedGroupFunctions(x))", "all x y.((Person(x) & Outgoing(x) & VeryStirring(x)) -> FondOfLargeOrganizedGroupFunctions(y))", "all x.(OutgoingAndStirring(x) -> FondOfLargeOrganizedGroupFunctions(x))", "all x.((Outgoing(x) & VeryStylish(x)) -> FondOfLargeOrganizedGroupFunctions(x))", "all x.(OutgoingAndStoked(x) -> FondOfLargeOrganizedGroupFunctions(x))", "all x.((People(x) & Outgoing(x) & VeryStylish(x)) -> FondOfLargeOrganizedGroupFunctions(x))", "all x.((Outgoing(x) & VeryTidy(x)) -> FondOfLargeOrganizedGroupFunctions(x))", "(all x.((Outgoing(x) & VeryTidy(x)) -> FondOfLargeOrganizedGroupFunctions(x)))", "all x.((Person(x) & Outgoing(x) & VeryTidy(x)) -> FondOfLargeOrganizedGroupFunctions(x))", "all x y.((Person(x) & Outgoing(x) & VeryTidy(x)) -> FondOfLargeOrganizedGroupFunctions(y))", "all x.((Outgoing(x) & VeryStirred(x)) -> FondOfLargeOrganizedGroupFunctions(x))"]}
{"id": "folio_train_225", "nl": "If Carol is not both a pre-teen or other young child and attends weddings, then Carol is not getting married or has friends who are getting married.  ", "fol": "(-(IsPreTeen(Carol) & AttendWeddings(Carol)) -> -IsGettingMarried(Carol))", "prediction": ["all x.((Preteen(x) | YoungChild(x)) & AttendsWeddings(x)) -> (-GettingMarried(x) | HasFriendsGettingMarried(x)))", "all x.((Carol(x) & -Preteen(x) & -YoungChild(x) & AttendsWeddings(x)) -> (-GettingMarried(x) | HasFriendsGettingMarried(x)))", "all x.((Preteen(x) | YoungChild(x) & AttendsWeddings(x)) -> (-GettingMarried(x) | HasFriendsGettingMarried(x)))", "all x.((Preteen(x) | YoungChild(x)) & AttendsWeddings(x)) -> (-GettingMarried(x) | HasFriendsGettingMarried(x)))", "all x y.((Carol(x) & -(Preteen(x) | YoungChild(x)) & AttendsWeddings(x)) & -(GettingMarried(x) | HasFriends(x))) -> -GettingMarried(x))", "all x.(((Preteen(x) | YoungChild(x)) & AttendsWeddings(x)) -> (-GettingMarried(x) | HasFriendsGettingMarried(x)))", "(-(PreteenOrYoungChild(Carolyn) & AttendsWeddings(Carolyn)) | HasFriends(Carolyn,GettingMarried)))", "all x y.((Preteen(x) & YoungChild(y) & AttendsWeddings(x) & -(GettingMarried(x) | HasFriends(x,y))) -> -GettingMarried(x))", "(-(PreteenOrYoungChild(Carol) & AttendsWeddings(Carol)) & (-GettingMarried(Carol) | HasFriends(Carol))))", "all x.((Carol(x) & -PreteenOrYoungChild(x) & AttendsWeddings(x)) -> (-GettingMarried(x) | HasFriendsGettingMarried(x)))", "all x.((Carol(x) & -(Preteen(x) | YoungChild(x)) & AttendsWeddings(x))) -> (-GettingMarried(x) | HasFriendsGettingMarried(x)))", "exists x.(PreteenOrYoungChild(x) & AttendsWeddings(x) & -(GettingMarried(x) | HasFriends(x))))", "all x y.((Preteen(x) | YoungChild(x) & AttendsWeddings(x,y)) -> (-GettingMarried(x) | HasFriendsGettingMarried(x,y)))", "all x.((Preteen(x) | YoungChild(x)) & AttendsWeddings(x)) -> (-GettingMarried(x) | HasFriends(x)))", "all x.((Preteen(x) & YoungChild(x) & AttendsWeddings(x)) -> (-GettingMarried(x) | HasFriendsGettingMarried(x)))", "all x.((Preteen(x) | YoungChild(x) & AttendsWeddings(x)) -> (-GettingMarried(x) | HasFriendsGettingMarried(x)))"]}
{"id": "folio_train_226", "nl": "Carol is outgoing and very spirited.", "fol": "(IsOutgoing(Carol) & Spirited(Carol))", "prediction": ["all x.(Caroline(x) -> (Outgoing(x) & VeryStirring(x)))", "(Outgoing(Caroline) & VeryStirring(Caroline))", "Carol is outgoing and very spirited.", "(Outgoing(Carolyn) & VeryStirring(Carolyn))", "all x.(Carolyn(x) -> (Outgoing(x) & VeryStirring(x)))", "all x.(Caroline(x) -> (Outgoing(x) & VeryStirring(x)))", "Carol is outgoing and very spirited.", "(Outgoing(Carol) & VerySturdy(Carol))", "all x.((Caroline(x) & Outgoing(x) & VerySturdy(x)) -> Outgoing(x))", "(Outgoing(Caroline) & VeryStirring(Caroline))", "(Outgoing(Carolyn) & VeryStirring(Carolyn))", "Carol is outgoing and very spirited.", "all x.(Caroline(x) -> (Outgoing(x) & VeryStirring(x)))", "exists x.(Caroline(x) & Outgoing(x) & VeryStirring(x))", "All x.(Carolyn(x) -> (Outgoing(x) & VeryStirring(x)))", "all x.(Carol(x) -> (Outgoing(x) & VeryTidy(x)))"]}
{"id": "folio_train_227", "nl": "Carol is either a preteen or other young child.", "fol": "(IsPreTeen(Carol) | YoungChild(Carol))", "prediction": ["all x.(Carol(x) -> (Preteen(x) | YoungChild(x)))", "(Preteen(Carolyn) | YoungChild(Carolyn)))", "all x.((Caroline(x) & Preteen(x)) | YoungChild(x))", "all x.(Caroline(x) -> (Preteen(x) | YoungChild(x)))", "all x y.((Caroline(x) & Preteen(y)) | YoungChild(x,y)) -> YoungChild(x))", "(Preteen(Caroline) | YoungChild(Caroline))", "(Preteen(Carol) | YoungChild(Carol))", "all x y.((Carol(x) & Preteen(y)) | YoungChild(y)) -> YoungChild(x,y))", "all x.(Carol(x) -> (Preteen(x) | YoungChild(x)))", "all x.((Carol(x) & Preteen(x)) | YoungChild(x))", "all x.(Carolyn(x) -> (Preteen(x) | YoungChild(x)))", "exists x.(Caroline(x) & (Preteen(x) | YoungChild(x)))", "exists x.(Carol(x) & Preteen(x) & YoungChild(x))", "exists x.(Caroline(x) & Preteen(x) & YoungChild(x))", "exists x.(Carol(x) & (Preteen(x) | YoungChild(x)))", "exists x.(Carol(x) & (Preteen(x) | YoungChild(x)))"]}
{"id": "folio_train_228", "nl": "Carol neither enjoys celebrating life milestone events with other people nor is outgoing and very spirited.", "fol": "(-EnjoyCelebratingMilestones(Carol) & -IsOutgoing(Carol))", "prediction": ["all x.((Caroline(x) & -(EnjoysCelebratingLifeMilestoneEvents(x) | Outgoing(x) & VeryStirring(x))) -> -(EnjoysCelebratingLifeMilestoneEvents(x) & -EnjoysCelebratingLifeMilestoneEvents(x))))", "-(EnjoysCelebratingLifeMilestoneEvents(Caroline) & -(Outgoing(Caroline) & VeryStirring(Caroline))))", "all x.(Caroline(x) -> (-EnjoysCelebratingLifeMilestoneEventsWithOthers(x) & -Outgoing(x) & -Stirring(x)))", "((Carol(Carol) & -(EnjoysCelebratingLifeMilestoneEvents(Carol) | Outgoing(Carol))) & -(EnjoysCelebratingLifeMilestoneEvents(Carol) & VeryStirious(Carol))))", "-((Caroline(Caroline) & CelebratesLifeMilestoneEvents(Caroline)) | (Outgoing(Caroline) & VeryStirring(Caroline))))", "(-(EnjoysCelebratingLifeMilestoneEvents(Caroline) & -Outgoing(Caroline) & -Spiritual(Caroline)))", "all x y.((Caroline(x) & LifeMilestoneEvent(y)) -> (-EnjoysCelebratingWithOthers(x,y) | Outgoing(x,y) & VeryStirring(x)))", "all x.(Caroline(x) -> (-(EnjoysCelebratingLifeMilestoneEvents(x) & -Outgoing(x) & -Stirring(x))))", "(all x.((Caroline(x) & CelebratesLifeMilestoneEvents(x)) -> -(Outgoing(x) & VeryStylish(x))))", "all x.((Caroline(x) & -(EnjoysCelebratingLifeMilestoneEvents(x) | Outgoing(x) & VeryStylish(x))) -> -(EnjoysCelebratingLifeMilestoneEvents(x) & VeryStylish(x)))", "(-(EnjoysCelebratingLifeMilestoneEvents(Carol) & -Outgoing(Carol) & VeryStirring(Carol)) -> -(EnjoysCelebratingLifeMilestoneEvents(Carol) & -EnjoysCelebratingLifeMilestoneEvents(Carol)))", "\u2013 ((EnjoysCelebratingLifeMilestoneEvents(Caroline) & -(Outgoing(Caroline) | VeryStoked(Caroline))))", "-(EnjoysCelebrationWithOtherPeople(Caroline) & -(Outgoing(Caroline) & VeryStirring(Caroline)))", "-(EnjoysCelebratingLifeMilestoneEvents(Caroline) & -(Outgoing(Caroline) & VeryStylish(Caroline))))", "((Caroline(Caroline) & -(EnjoysCelebratingLifeMilestoneEvents(Caroline) | Outgoing(Caroline))) | VeryStirious(Caroline)))", "-(EnjoysCelebratingLifeMeasurementEvents(Caroline) | OutgoingAndStirring(Caroline)))"]}
{"id": "folio_train_229", "nl": "All Republicans are anti-abortion.", "fol": "all x.(IsRepublican(x) -> OpposesAbortion(x))", "prediction": ["all x.(Republican(x) -> AntiAbortion(x))", "all x.(Republican(x) -> AntiAbortion(x))", "(all x.(Republican(x) -> AntiAbortion(x)))", "all x.(Republican(x) -> AntiAbortion(x))", "all x y.((Republican(x) & Republican(y) & AntiAbortion(x)) -> AntiAbortion(x))", "(all x.(Republican(x) -> AntiAbortion(x)))", "all x.(Republican(x) -> AntiAbortion(x))", "(all x.(Republican(x) -> AntiAbortion(x)))", "all x.(Republican(x) -> AntiAbortion(x))", "all x.(Republican(x) -> AntiAbortion(x))", "all x.(Republican(x) -> AntiAbortion(x))", "all x.(Republican(x) -> AntiAbortion(x))", "all x.(Republican(x) -> AntiAbortion(x))", "all x.(Republican(x) -> AntiAbortion(x))", "all x.(Republican(x) -> AntiAbortion(x))", "All x.(Republican(x) -> AntiAbortion(x))"]}
{"id": "folio_train_230", "nl": "Either Republicans or Democrats. ", "fol": "all x.(IsRepublican(x) | IsDemocrat(x))", "prediction": ["(Republican(republican) | Democratic(republican))", "(Richards(R) | Democrats(R))", "all x.(Republican(x) | Democratic(x))", "((Republican(x) | Democrat(x)))", "Either Republicans or Democrats.", "all x y.((Republican(x) | Democratic(y)) -> (Republican(x) | Democratic(y)))", "(Republican(x) | Democratic(x))", "((Republican(republican) | Democratic(republican)))", "all x.(Republican(x) | Democratic(x))", "all x.(Republican(x) | Democrat(x))", "(Republicans) | Democrats(Republicans))", "(Richards(R) | Democrats(R))", "(RightSide(Republican) | RightSide(Democrat))", "exists x.(Republican(x) | Democratic(x))", "all x.(Republican(x) | Democrat(x))", "exists x.(Republican(x) | Democratic(x))"]}
{"id": "folio_train_231", "nl": "No Democrats are conservative.", "fol": "all x.(IsDemocrat(x) -> -IsConservative(x))", "prediction": ["-exists x.(Democrat(x) & Conservative(x))", "all x.(Democrat(x) -> -Conservative(x))", "-exists x.(Democrat(x) & Conservative(x))", "-exists x.(Democracy(x) & Conservative(x))", "(exists x.(Democrat(x) & Conservative(x)) & -exists y.(Democrat(y) & Conservative(y))))", "-(Democrat(e) & Conservative(e))", "all x.(Democrat(x) -> -Conservative(x))", "(exists x.(Democrat(x) & Conservative(x)))", "-exists x.(Democrat(x) & Conservative(x))", "-exists x.(Democracy(x) & Conservative(x))", "-exists x.(Democrat(x) & Conservative(x))", "-(Democrat(e) & Conservative(e))", "all x.(Democrat(x) -> -Conservative(x))", "all x.(Democrat(x) -> Conservative(x))", "-exists x.(Democrat(x) & Conservative(x))", "-exists x.(Democrat(x) & Conservative(x))"]}
{"id": "folio_train_232", "nl": "Either conservative or liberal. ", "fol": "all x.(IsConservative(x) | IsLiberal(x))", "prediction": ["all x.(Conservative(x) | Liberal(x))", "(Conservative(x) | Liberal(x))", "all x.(Conservative(x) | Liberal(x))", "(Conservative(x) | Liberal(x))", "all x.((Conservative(x) | Liberal(x)) -> (Conservative(x) | Liberal(x)))", "exists x y.(Conservative(x) | Liberal(y))", "all x.(Conservative(x) | Liberal(x))", "(Conservative(x) | Liberal(x))", "all x.((Conservative(x) | Liberal(x)) -> -Conservative(x))", "all x.(Conservative(x) | Liberal(x))", "(Conservative(x) | Liberal(x))", "all x.((Conservative(x) | Liberal(x)) -> (Conservative(x) | Liberal(x)))", "(Conservative) | Liberal(x))", "exists x.(Conservative(x) | Liberal(x))", "(Conservative(x) | Liberal(x))", "exists x.(Conservative(x) | Liberal(x))"]}
{"id": "folio_train_233", "nl": "A U.S government official is either conservative or a Republican.", "fol": "((IsConservative(AnUSGovernmentOfficial) & -IsRepublican(AnUSGovernmentOfficial)) | (-IsConservative(AnUSGovernmentOfficial) & IsRepublican(AnUSGovernmentOfficial)))", "prediction": ["all x.((Official(x) & U.S.Government(x)) -> (Conservative(x) | Republican(x)))", "all x.(U.S.GovernmentOfficial(x) -> (Conservative(x) | Republican(x)))", "all x.(Official(x) -> (Conservative(x) | Republican(x)))", "all x.((Official(x) & U.S.Government(x)) -> (Conservative(x) | Republican(x)))", "all x.(U.S.GovernmentOfficial(x) -> (Conservative(x) | Republican(x)))", "all x y.((Official(x) & U.S.Government(y) & Conservative(x)) | Republican(x))", "all x.((U.S.GovernmentOfficial(x) & Conservative(x)) | Republican(x))", "all x.(Official(x) -> (Conservative(x) | Republican(x)))", "exists x.(GovernmentOfficial(x) & (Conservative(x) | Republican(x)))", "all x y.((U.S.GovernmentOfficial(x) & Conservative(y)) | Republican(y))", "all x.((Official(x) & U.S.Government(x)) -> (Conservative(x) | Republican(x)))", "all x.(U.S.GovernmentOfficial(x) -> (Conservative(x) | Republican(x)))", "all x y.((Official(x) & U.S.Government(y) & Conservative(y)) | Republican(y))", "exists x.(GovernmentOfficial(x) & (Conservative(x) | Republican(x)))", "all x.(Official(x) -> (Conservative(x) | Republican(x)))", "all x y.((U.S.GovernmentOfficial(x) & Conservative(y)) | Republican(y))"]}
{"id": "folio_train_234", "nl": "A U.S government official is a Democrat.", "fol": "Democrat(AnUSGovernmentOfficial)", "prediction": ["all x.((U.S.GovernmentOfficial(x) & Democratic(x)) -> Official(x))", "all x.((Official(x) & U.S.Government(x)) -> Democratic(x))", "all x.(Democrat(x) -> U.SGovernmentOfficial(x))", "all x y.((U.S.GovernmentOfficial(x) & Democratic(y)) -> Official(x,y))", "all x.(Democrat(x) -> U.S.GovernmentOfficial(x))", "all x.((U.S.GovernmentOfficier(x) & Democratic(x)) -> Official(x))", "all x.(Democrat(x) -> U.S.GovernmentOfficial(x))", "all x.((Official(x) & U.S.Government(x)) -> Democratic(x))", "all x y.((Official(x) & U.S.Government(y) & Democratic(y)) -> Democrat(x))", "all x y.((U.S.GovernmentOfficial(x) & Official(y)) -> Democratic(x))", "all x.((U.S.GovernmentOfficial(x) & Democrat(x)) -> Official(x))", "all x.(Democrat(x) -> U.SGovernmentOfficial(x))", "all x.(U.S.GovernmentOfficial(x) -> Democratic(x))", "all x y.((U.S.GovernmentOfficier(x) & Democratic(y)) -> Official(x,y))", "exists x.(GovernmentOfGovernment(x) & Democratic(x))", "all x.(Democrat(x) -> U.SGovernmentOfficial(x))"]}
{"id": "folio_train_235", "nl": "A U.S government official is anti-abortion and a liberal.", "fol": "(OpposesAbortion(AnUSGovernmentOfficial) & IsLiberal(AnUSGovernmentOfficial))", "prediction": ["all x.((Official(x) & U.S.Government(x)) -> (AntiAbortion(x) & Liberal(x)))", "all x.((U.S.GovernmentOfficial(x) & AntiAbortion(x) & Liberal(x)) -> Official(x))", "all x.(U.S.GovernmentOfficial(x) -> (AntiAbortion(x) & Liberal(x)))", "all x y.((U.S.GovernmentOfficial(x) & AntiAbortion(x) & Liberal(y)) -> Official(x))", "all x.((Official(x) & U.S.Government(x)) -> (AntiAbortion(x) & Liberal(x)))", "all x y.((Official(x) & U.S.Government(y)) -> (AntiAbortion(x) & Liberal(x)))", "all x.(Official(x) -> (AntiAbortion(x) & Liberal(x)))", "exists x.(Official(x) & U.S.Government(x) & AntiAbortion(x) & Liberal(x))", "all x.((U.S.GovernmentOfficial(x) & AntiAbortion(x)) -> Liberal(x))", "exists x.(GovernmentOfficial(x) & AntiAbortion(x) & Liberal(x))", "(all x.(U.S.GovernmentOfficial(x) -> AntiAbortion(x)) & all y.(Liberal(y) -> Liberal(y)))", "all x.(U.S.GovernmentOfficial(x) -> (AntiAbortion(x) & Liberal(x)))", "all x y.((U.S.GovernmentOfficial(x) & AntiAbortion(x) & Liberal(y)) -> Official(x))", "all x.((Official(x) & U.S.Government(x)) -> (AntiAbortion(x) & Liberal(x)))", "exists x.(GovernmentOfficial(x) & AntiAbortion(x) & Liberal(x))", "all x.(U.S.GovernmentOfficial(x) -> (AntiAbortion(x) & Liberal(x)))"]}
{"id": "folio_train_236", "nl": "A U.S government official is either anti-abortion or a liberal.", "fol": "(OpposesAbortion(AnUSGovernmentOfficial) | IsLiberal(AnUSGovernmentOfficial))", "prediction": ["all x.((Official(x) & U.S.Government(x)) -> (AntiAbortion(x) | Liberal(x)))", "all x.(U.S.GovernmentOfficial(x) -> (AntiAbortion(x) | Liberal(x)))", "all x.(Official(x) -> (AntiAbortion(x) | Liberal(x)))", "all x.((Official(x) & U.S.Government(x)) -> (AntiAbortion(x) | Liberal(x)))", "all x y.((Official(x) & U.S.Government(y)) -> (AntiAbortion(x) | Liberal(x)))", "all x.((U.S.GovernmentOfficial(x) & AntiAbortion(x)) | Liberal(x))", "all x y.((U.S.GovernmentOfficial(x) & AntiAbortion(y)) | Liberal(y))", "all x.((Official(x) & U.S.Government(x)) -> (AntiAbortion(x) | Liberal(x)))", "all x.(U.S.GovernmentOfficial(x) -> (AntiAbortion(x) | Liberal(x)))", "all x.(Official(x) -> (AntiAbortion(x) | Liberal(x)))", "all x y.((U.S.GovernmentOfficial(x) & Official(y)) -> (AntiAbortion(x) | Liberal(y)))", "all x y.((Official(x) & U.S.Government(y)) -> (AntiAbortion(x) | Liberal(x)))", "exists x.(GovernmentOfficial(x) & (AntiAbortion(x) | Liberal(x)))", "all x.(U.S.GovernmentOfficial(x) -> (AntiAbortion(x) | Liberal(x)))", "exists x.(GovernmentOfficial(x) & (AntiAbortion(x) | Liberal(x)))", "all x.((Official(x) & U.S.Government(x)) -> (AntiAbortion(x) | Liberal(x)))"]}
{"id": "folio_train_237", "nl": "If a U.S government official is not anti-abortion and a Republican, then a U.S government official is neither anti-abortion nor a liberal.", "fol": "all x.((-OpposesAbortion(x) & IsRepublican(x)) -> (-OpposesAbortion(x) & -IsLiberal(x)))", "prediction": ["all x.((U.S.GovernmentOfficial(x) & -AntiAbortion(x) & Republican(x)) -> (-AntiAbortion(x) & -Liberal(x)))", "all x.((U.S.GovernmentOfficier(x) & -AntiAbortion(x) & Republican(x)) -> -(AntiAbortion(x) | Liberal(x)))", "all x y.((U.S.GovernmentOfficial(x) & -AntiAbortion(x) & Republican(x)) -> (-AntiAbortion(y) & -Liberal(y)))", "all x.((U.S governmentofficial(x) & -AntiAbortion(x) & Republican(x)) -> -(AntiAbortion(x) | Liberal(x)))", "(all x.((U.S.GovernmentOfficial(x) & -AntiAbortion(x) & Republican(x)) -> -AntiAbortion(x) & -Liberal(x)))", "all x.((Official(x) & -AntiAbortion(x) & Republican(x)) -> (-AntiAbortion(x) & -Liberal(x)))", "all x.((U.S.GovernmentOfficial(x) & -AntiAbortion(x) & Republican(x)) -> (-AntiAbortion(x) & -Liberal(x)))", "all x.((U.S GovernmentOfficial(x) & -AntiAbortion(x) & Republican(x)) -> (-AntiAbortion(x) & -Liberal(x)))", "all x y.((U.S.GovernmentOfficier(x) & -AntiAbortion(x) & Republican(x)) -> (-AntiAbortion(y) | Liberal(y)))", "(all x.((U.S.GovernmentOfficier(x) & -AntiAbortion(x)) -> Republican(x)))", "all x.((U.S.GovernmentOfficiant(x) & -AntiAbortion(x) & Republican(x)) -> -(AntiAbortion(x) | Liberal(x)))", "all x y.((U.S.GovernmentOfficial(x) & -AntiAbortion(x) & Republican(x)) -> -(AntiAbortion(y) | Liberal(y)))", "all x.((Official(x) & -AntiAbortion(x) & Republican(x)) -> (-AntiAbortion(x) & -Liberal(x)))", "all x.((U.S.GovernmentOfficial(x) & -AntiAbortion(x) & Republican(x)) -> (-AntiAbortion(x) & -Liberal(x)))", "all x y.((U.S.GovernmentOfficio(x) & -AntiAbortion(x) & Republican(y)) -> (-AntiAbortion(x) & -Liberal(x)))", "all x.((U.S.GovernmentOfficio(x) & -AntiAbortion(x) & Republican(x)) -> -(AntiAbortion(x) | Liberal(x)))"]}
{"id": "folio_train_238", "nl": "If a U.S government official is anti-abortion and a liberal, then a U.S government official is either a Republican or a liberal.", "fol": "((OpposesAbortion(AnUSGovernmentOfficial) & IsLiberal(AnUSGovernmentOfficial)) -> (IsRepublican(AnUSGovernmentOfficial) | IsLiberal(AnUSGovernmentOfficial)))", "prediction": ["all x.((U.S.GovernmentOfficial(x) & AntiAbortion(x) & Liberal(x)) -> (Republican(x) | Liberal(x)))", "all x.((U.S government official(x) & AntiAbortion(x) & Liberal(x)) -> (Republican(x) | Liberal(x)))", "all x y.((U.S.GovernmentOfficial(x) & AntiAbortion(x) & Liberal(x)) -> (Republican(y) | Liberal(y)))", "all x.((U.S.GovernmentOfficial(x) & AntiAbortion(x) & Liberal(x)) -> (Republican(x) | Liberal(x)))", "(all x.(AntiAbortion(x) -> Liberal(x))) & all y.(Republican(y) | Liberal(y)))", "all x.((U.S.GovernmentOfficiant(x) & AntiAbortion(x) & Liberal(x)) -> (Republican(x) | Liberal(x)))", "all x.((U.S GovernmentOfficial(x) & AntiAbortion(x) & Liberal(x)) -> (Republican(x) | Liberal(x)))", "all x y.((U.S.GovernmentOfficial(x) & AntiAbortion(x) & Liberal(x)) -> (Republican(x) | Liberal(x)))", "(all x.(AntiAbortion(x) -> Liberal(x))) & all y.(Republican(y) | Liberal(y)))", "all x.((U.S governmentofficial(x) & AntiAbortion(x) & Liberal(x)) -> (Republican(x) | Liberal(x)))", "all x.(AntiAbortion(x) -> Liberal(x))", "all x.((U.S.GovernmentOfficial(x) & AntiAbortion(x) & Liberal(x)) -> (Republican(x) | Liberal(x)))", "all x.(AntiAbortion(x) & Liberal(x)) -> (Republican(x) | Liberal(x)))", "all x y.((U.S.GovernmentOfficial(x) & AntiAbortion(x) & Liberal(x)) -> (Republican(y) | Liberal(y)))", "all x.((U.S.GovernmentOfficier(x) & AntiAbortion(x) & Liberal(x)) -> (Republican(x) | Liberal(x)))", "all x y.((U.S.GovernmentOfficiant(x) & AntiAbortion(x) & Liberal(x)) -> (Republican(x) | Liberal(x)))"]}
{"id": "folio_train_239", "nl": "If a U.S government official is either a conservative or anti-abortion, then a U.S government official is either a conservative and a liberal or neither a conservative nor a liberal.", "fol": "all x.((IsConservative(x) | OpposesAbortion(x)) -> ((IsConservative(x) & IsLiberal(x)) | (-IsConservative(x) & -IsLiberal(x))))", "prediction": ["all x.((U.S.GovernmentOfficial(x) & (Conservative(x) | AntiAbortion(x))) -> (Conservative(x) & Liberal(x)) | -Conservative(x) & Liberal(x)))", "all x.((U.S government official(x) & (Conservative(x) | AntiAbortion(x))) -> (Conservative(x) & Liberal(x)) | -Conservative(x) & Liberal(x)))", "(all x.((U.S.GovernmentOfficial(x) & Conservative(x)) | AntiAbortion(x)) -> (Conservative(x) & Liberal(x)) | -Conservative(x) & Liberal(x)))", "all x.((Official(x) & (Conservative(x) | AntiAbortion(x))) -> (Conservative(x) & Liberal(x)) | -Conservative(x) & Liberal(x)))", "all x.((U.S.GovernmentOfficial(x) & (Conservative(x) | AntiAbortion(x))) -> (Conservative(x) & Liberal(x)) | (-Conservative(x) & Liberal(x))))", "all x y.((U.S.GovernmentOfficial(x) & Conservative(x) & AntiAbortion(x)) -> (Conservative(x) & Liberal(x) & -Conservative(y) & Liberal(y)))", "(all x.((U.S.GovernmentOfficial(x) & (Conservative(x) | AntiAbortion(x))) -> (Conservative(x) & Liberal(x)) | -Conservative(x) & Liberal(x)))", "all x.((U.S.GovernmentOfficier(x) & Conservative(x)) | AntiAbortion(x)) -> (Conservative(x) & Liberal(x)) | -Conservative(x) & Liberal(x)))", "all x y.((U.S.GovernmentOfficiant(x) & (Conservative(x) | AntiAbortion(x))) -> (Conservative(x) & Liberal(x)) | (-Conservative(y) & Liberal(y))))", "all x.((U.S government official(x) & (Conservative(x) | AntiAbortion(x))) -> (Conservative(x) & Liberal(x)) | (-Conservative(x) & Liberal(x))))", "all x.((U.S.GovernmentOfficiant(x) & (Conservative(x) | AntiAbortion(x))) -> (Conservative(x) & Liberal(x)))", "all x y.((U.S.GovernmentOfficial(x) & Conservative(x) & AntiAbortion(x)) -> (Conservative(x) & Liberal(x) & -Conservative(y) & Liberal(y)))", "all x.((Official(x) & (Conservative(x) | AntiAbortion(x))) -> (Conservative(x) & Liberal(x)) | (-Conservative(x) & Liberal(x))))", "all x.((U.S GovernmentOfficial(x) & (Conservative(x) | AntiAbortion(x))) -> (Conservative(x) & Liberal(x)) | (-Conservative(x) & Liberal(x))))", "all x.((GovernmentOfficial(x) & (Conservative(x) | AntiAbortion(x))) -> (Conservative(x) & Liberal(x)) | -Conservative(x) & Liberal(x)))", "all x.((U.S.GovernmentOfficial(x) & (Conservative(x) | AntiAbortion(x))) -> (Conservative(x) & Liberal(x)) | -Conservative(x) & Liberal(x)))"]}
{"id": "folio_train_240", "nl": "If a U.S government official is either a conservative or anti-abortion, then a U.S government official is neither a Democrat or a liberal.", "fol": "all x.((IsConservative(x) | OpposesAbortion(x)) -> (-IsDemocrat(x) & -IsLiberal(x)))", "prediction": ["all x.((U.S.GovernmentOfficial(x) & (Conservative(x) | AntiAbortion(x))) -> (-Democrat(x) | Liberal(x)))", "all x.((U.S government official(x) & (Conservative(x) | AntiAbortion(x))) -> (-Democrat(x) | Liberal(x)))", "all x.((GovernmentOfU.S.(x) & (Conservative(x) | AntiAbortion(x))) -> (-Democrat(x) | Liberal(x)))", "all x.((U.S.GovernmentOfficial(x) & (Conservative(x) | AntiAbortion(x))) -> (-Democrat(x) | Liberal(x)))", "all x.((Official(x) & (Conservative(x) | AntiAbortion(x))) -> (-Democrat(x) | Liberal(x)))", "(all x.((U.S.GovernmentOfficial(x) & (Conservative(x) | AntiAbortion(x))) -> -Democrat(x) & -Liberal(x)))", "all x.((U.S.GovernmentOfficiant(x) & (Conservative(x) | AntiAbortion(x))) -> -Democrat(x) & -Liberal(x))", "(all x.((U.S.GovernmentOfficial(x) & Conservative(x)) | AntiAbortion(x)) -> (-Democrat(x) | Liberal(x)))", "all x y.((U.S.GovernmentOfficial(x) & Conservative(x) & AntiAbortion(x)) -> (-Democrat(y) | Liberal(y)))", "all x y.((U.S.GovernmentOfficiant(x) & (Conservative(x) | AntiAbortion(x))) -> (-Democrat(y) | Liberal(y)))", "all x.((GovernmentOfU.S.(x) & (Conservative(x) | AntiAbortion(x))) -> -Democrat(x) & -Liberal(x))", "all x.((U.S.GovernmentOfficier(x) & Conservative(x)) | AntiAbortion(x)) -> (-Democrat(x) | Liberal(x)))", "all x.((Official(x) & (Conservative(x) | AntiAbortion(x))) -> (-Democrat(x) | Liberal(x)))", "all x.((U.S.GovernmentOfficial(x) & (Conservative(x) | AntiAbortion(x))) -> (-Democrat(x) | Liberal(x)))", "all x.((U.S GovernmentOfficial(x) & (Conservative(x) | AntiAbortion(x))) -> (-Democrat(x) | Liberal(x)))", "all x y.((U.S.GovernmentOfficial(x) & Conservative(x) & AntiAbortion(x)) -> (-Democrat(y) | Liberal(y)))"]}
{"id": "folio_train_241", "nl": "If an U.S government official is anti-abortion or a liberal, then a U.S government official is either anti-abortion or a liberal.", "fol": "((OpposesAbortion(AnUSGovernmentOfficial) | IsLiberal(AnUSGovernmentOfficial)) -> (OpposesAbortion(AnUSGovernmentOfficial) | IsLiberal(AnUSGovernmentOfficial)))", "prediction": ["all x.((U.S.GovernmentOfficial(x) & (AntiAbortion(x) | Liberal(x))) -> (AntiAbortion(x) | Liberal(x)))", "all x.((U.S governmentofficial(x) & (AntiAbortion(x) | Liberal(x))) -> (AntiAbortion(x) | Liberal(x)))", "all x.((U.S.GovernmentOfficial(x) & (AntiAbortion(x) | Liberal(x))) -> (AntiAbortion(x) | Liberal(x)))", "all x y.((U.S.GovernmentOfficial(x) & AntiAbortion(x) & Liberal(x)) -> (AntiAbortion(y) | Liberal(y)))", "all x.((Official(x) & (AntiAbortion(x) | Liberal(x))) -> (AntiAbortion(x) | Liberal(x)))", "all x.((U.S GovernmentOfficial(x) & (AntiAbortion(x) | Liberal(x))) -> (AntiAbortion(x) | Liberal(x)))", "all x y.((U.S.GovernmentOfficial(x) & (AntiAbortion(x) | Liberal(x))) -> (AntiAbortion(x) | Liberal(x)))", "(all x.(AntiAbortion(x) | Liberal(x)) -> (U.SGovernmentOfficial(x) & AntiAbortion(x)) | Liberal(x)))", "all x.((U.S.GovernmentOfficiant(x) & (AntiAbortion(x) | Liberal(x))) -> (AntiAbortion(x) | Liberal(x)))", "all x.((U.S government official(x) & (AntiAbortion(x) | Liberal(x))) -> (AntiAbortion(x) | Liberal(x)))", "all x.((GovernmentOfU.S.(x) & (AntiAbortion(x) | Liberal(x))) -> (AntiAbortion(x) | Liberal(x)))", "all x.(AntiAbortionOrLiberal(x) -> (U.S.GovernmentOfficial(x) | Liberal(x)))", "all x.((U.S.GovernmentOfficial(x) & (AntiAbortion(x) | Liberal(x))) -> (AntiAbortion(x) | Liberal(x)))", "all x y.((U.S.GovernmentOfficiant(x) & AntiAbortion(x) & Liberal(x)) -> (AntiAbortion(y) | Liberal(y)))", "all x y.((U.S.GovernmentOfficial(x) & (AntiAbortion(x) | Liberal(x))) -> (AntiAbortion(y) | Liberal(y)))", "all x.((U.S.GovernmentOfficiant(x) & (AntiAbortion(x) | Liberal(x))) -> (AntiAbortion(x) | Liberal(x)))"]}
{"id": "folio_train_242", "nl": "All advocates of high tariff rates are Republicans.", "fol": "all x.(SupportsHighTariffRates(x) -> IsRepublican(x))", "prediction": ["all x.(AdvocatesHighTargetRates(x) -> Republicans(x))", "all x.((Advocate(x) & HighTargetRates(x)) -> Republican(x))", "all x.((AdvocatesHighTargetRates(x) & Republican(x)) -> AdvocatesHighTargetRates(x))", "all x y.((Advocate(x) & HighTargetRate(y)) -> Republican(x))", "all x.(HighTargetRates(x) -> Republican(x))", "all x.(AdvocatesHighTargetRates(x) -> Republican(x))", "all x y.((Advocate(x) & HighTargetRate(y)) -> Republican(x))", "(all x.(AdvocatesHighTargetRates(x) -> Republicans(x))", "all x.(AdvocatesHighTargetRates(x) -> Republicans(x))", "all x.((Advocate(x) & HighTargetRate(x)) -> Republican(x))", "all x.((AdvocatesHighTargetRates(x) & Republican(x)) -> HighTargetRates(x))", "all x.(HighTargetRates(x) -> Republicans(x))", "all x.(AdvocatesHighTargetRates(x) -> Republican(x))", "all x y.((Advocate(x) & HighTargetRates(y)) -> Republicans(x))", "all x.(AdvocatesHighTarif(x) -> Republicans(x))", "all x.(AdvocatesHighTargetRates(x) -> Republicans(x))"]}
{"id": "folio_train_243", "nl": "Some Republicans are not conservatives.", "fol": "exists x.(IsRepublican(x) & -IsConservative(x))", "prediction": ["exists x.(Republican(x) & -Conservative(x))", "exists x.(Republican(x) & -Conservative(x))", "exists x.(Republican(x) & -Conservative(x))", "(exists x.(Republican(x) & -Conservative(x)))", "exists x.(Republican(x) & -Conservative(x))", "exists x.(Republican(x) & -Conservative(x))", "exists x.(Republican(x) & -Conservative(x))", "exists x y.(Republican(x) & Conservative(y))", "exists x.(Republican(x) & -Conservative(x))", "exists x.(Republican(x) & -Conservative(x))", "exists x.(Republican(x) & -Conservative(x))", "exists x.(Republican(x) & -Conservative(x))", "exists x.(Republican(x) & -Conservative(x))", "exists x.(Republican(x) & -Conservative(x))", "exists x.(Republican(x) & -Conservative(x))", "exists x.(Republican(x) & -Conservative(x))"]}
{"id": "folio_train_244", "nl": "Some conservatives are advocates of high tariff rates.", "fol": "exists x.(IsConservative(x) & SupportsHighTariffRates(x))", "prediction": ["exists x.(Conservative(x) & AdvocateOfHighTarget(x))", "exists x.(Conservative(x) & AdvocateOfHighTarif(x))", "exists x y.(Conservative(x) & HighTarget(y) & Advocate(x,y))", "exists x.(Conservative(x) & AdvocateOfHighTarif(x))", "exists x.(Conservative(x) & AdvocateOfHighTargetRates(x))", "exists x.(Conservative(x) & Advocate(x,HighTargetRates))", "exists x y.(Conservative(x) & HighTarget(y) & Advocate(x,y))", "exists x.(Conservative(x) & AdvocateOfHighTarget(x))", "exists x y.(Conservative(x) & HighTarifRate(y) & Advocate(x,y))", "exists x.(Conservative(x) & AdvocateOfHighTarif(x))", "exists x.(Conservative(x) & Advocate(x,highTarifRates))", "exists x.(Conservative(x) & AdvocateOfHighTargetRates(x))", "exists x.(Conservative(x) & Advocate(x,HighTargetRates))", "exists x.(Conservative(x) & Advocates(x,highTargetRates))", "exists x.(Conservative(x) & AdvocatesHighTarif(x))", "exists x.(Conservative(x) & AdvocateOfHighTariffRates(x))"]}
{"id": "folio_train_245", "nl": "No athletes are slow runners. ", "fol": "all x.(IsAthlete(x) -> -IsSlowRunner(x))", "prediction": ["-exists x.(Athlete(x) & SlowRunner(x))", "-exists x.(Athlete(x) & SlowRunner(x))", "(exists x.(Athlete(x) & SlowRunner(x))", "all x.(Athlete(x) -> -SlowRunner(x))", "-exists x.(Athlete(x) & SlowRunner(x))", "-(Athlete(a) & SlowRunner(b))", "-exists x.(Athlete(x) & SlowRunner(x))", "all x.(Athlete(x) -> -SlowRunner(x))", "all x.(Athlete(x) -> -SlowRunner(x))", "-exists x.(Athlete(x) & SlowRunner(x))", "all x.(Athlete(x) -> -SlowRunner(x))", "-exists x.(Athlete(x) & SlowRunner(x))", "-exists x.(Athlete(x) & SlowRunner(x))", "-exists x.(Athlete(x) & SlowRunner(x))", "-exists x.(Athlete(x) & SlowRunner(x))", "-exists x.(Athlete(x) & SlowRunner(x))"]}
{"id": "folio_train_246", "nl": "All professional basketball players are athletes. ", "fol": "all x.(IsProfessionalBasketballPlayer(x) -> IsAthlete(x))", "prediction": ["all x.(ProfessionalBasketballPlayer(x) -> Athlete(x))", "all x.(ProfessionalBasketballPlayer(x) -> Athlete(x))", "all x.((ProfessionalBasketballPlayer(x) & Athlete(x)) -> Athlete(x))", "all x y.((ProfessionalBasketballPlayer(x) & Player(y) & Athlete(x)) -> Athlete(x))", "(all x.(ProfessionalBasketballPlayer(x) -> Athlete(x))", "all x.((BasketballPlayer(x) & Professional(x)) -> Athlete(x))", "all x.(ProfessionalBasketballPlayer(x) -> Athlete(x))", "(all x.(ProfessionalBasketballPlayer(x) -> Athlete(x))", "all x.(BalloonPlayer(x) -> Athlete(x))", "all x.(BasketballPlayer(x) -> Athlete(x))", "all x.(ProfessionalBasketballPlayer(x) -> Athlete(x))", "(all x.(ProfessionalBasketballPlayer(x) -> Athlete(x))", "all x.(ProfessionalBasketballPlayer(x) -> Athlete(x))", "all x.(ProfessionalBasketballPlayer(x) -> Athlete(x))", "all x.(ProfessionalBasketballPlayer(x) -> Athlete(x))", "all x.(ProfessionalBasketballPlayer(x) -> Athlete(x))"]}
{"id": "folio_train_247", "nl": "All NBA players are professional basketball players. ", "fol": "all x.(IsNBAPlayer(x) -> IsProfessionalBasketballPlayer(x))", "prediction": ["all x.(NBAPlayer(x) -> ProfessionalBasketballPlayer(x))", "all x.(NBAPlayer(x) -> ProfessionalBasketballPlayer(x))", "(all x.(NBAPlayer(x) -> ProfessionalBasketballPlayer(x)))", "ALL NEBAPlayers(n) -> ProfessionalBasketballPlayer(n))", "all x.((NBAPlayer(x) & Professional(x)) -> Professional(x))", "all x.(NBAPlayer(x) -> ProfessionalBallroomPlayer(x))", "(all x.(NBAPlayer(x) -> ProfessionalBallroomPlayer(x)))", "all x y.((NBAPlayer(x) & NBAPlayer(y)) -> Professional(x,y))", "all x.(NBAPlayer(x) -> ProfessionalBasketballPlayer(x))", "all x.(NBAPlayer(x) -> ProfessionalBallroomplayer(x))", "(all x.(NBAPlayer(x) -> ProfessionalBasketballPlayer(x)))", "all x.(NBAPlayer(x) -> ProfessionalBalloonPlayer(x))", "all x.(NBAPlayer(x) -> ProfessionalBasketballPlayer(x))", "all x.(NBAPoker(x) -> ProfessionalBallroomplayer(x))", "all x.(NBAPlayer(x) -> ProfessionalBasketballPlayer(x))", "all x.(NBAPlayer(x) -> ProfessionalBallroomplayer(x))"]}
{"id": "folio_train_248", "nl": "All Knicks players are NBA players. ", "fol": "all x.(IsKnicksPlayer(x) -> IsNBAPlayer(x))", "prediction": ["all x.(KnicksPlayer(x) -> NBAPlayer(x))", "all x.(KnicksPlayer(x) -> NBAPlayer(x))", "(all x.(KnicksPlayer(x) -> NBAPlayer(x)))", "ALL SKYNSPIELS(KnicksPlayer(Knicks) -> NBAPlayer(Knicks))", "all x y.((KnicksPlayer(x) & NBAPlayer(y)) -> NBAPlayer(x))", "all x.(KnicksPlayer(x) -> NBAPlayer(x))", "(all x.(KnicksPlayer(x) -> NBAPlayer(x)))", "all x.(KnicksPilot(x) -> NBAPlayer(x))", "all x.(KnicksPlayer(x) -> NBAPlayer(x))", "(all x.(KnicksPlayer(x) -> NBAPlayer(x))", "all x.(KnicksPlayer(x) -> NBAPlayer(x))", "all x.(KnicksPlayer(x) -> NBAPlayer(x))", "All x.(KnicksPilot(x) -> NBAPilot(x))", "all x.(KnicksPlayer(x) -> NBAPlayer(x))", "all x.(KnicksPerson(x) -> NBAPerson(x))", "all x.(KnicksPlayer(x) -> NBAPlayer(x))"]}
{"id": "folio_train_249", "nl": "Jim is either not a professional basketball player or not a slow runner. ", "fol": "-((IsProfessionalBasketballPlayer(Jim) & -IsSlowRunner(Jim)) | (-IsProfessionalBasketballPlayer(Jim) & IsSlowRunner(Jim)))", "prediction": ["(-ProfessionalBasketballPlayer(Jim) | SlowRunner(Jim)))", "all x.((Jim(x) & -ProfessionalBasketballPlayer(x)) | -SlowRunner(x))", "all x.(Jim(x) -> (-ProfessionalBasketballPlayer(x) | -SlowRunner(x)))", "((Jim) | (-ProfessionalBasketballPlayer(Jim) | SlowRunner(Jim))))", "(-ProfessionalBasketballPlayer(Jim) | SlowRunner(Jim)))", "all x.(Jim(x) -> (-ProfessionalBasketballPlayer(x) | SlowRunner(x)))", "all x.((Jim(x) & -ProfessionalBasketballPlayer(x)) | -SlowRunner(x))", "all x.((Jim(x) & -ProfessionalBasketballPlayer(x) | SlowRunner(x))) -> -SlowRunner(x))", "(-ProfessionalBasketballPlayer(Jim) | SlowRunner(Jim)))", "exists x.(Jim(x) & (-ProfessionalBasketballPlayer(x) | -SlowRunner(x)))", "(-ProfessionalBasketballPlayer(Jim) | SlowRunner(Jim))", "exists x.(Jim(x) & (-ProfessionalBasketballPlayer(x) | -SlowRunner(x)))", "all x.((Jim(x) & -ProfessionalBasketballPlayer(x)) | -SlowRunner(x))", "exists x.(Jim(x) & (-ProfessionalBasketballPlayer(x) | SlowRunner(x)))", "(-ProfessionalBasketballPlayer(Jim) | SlowRunner(Jim))", "(-ProfessionalBasketballPlayer(Jim) | SlowRunner(Jim))"]}
{"id": "folio_train_250", "nl": "Jim is a Knicks player.", "fol": "IsKnicksPlayer(Jim)", "prediction": ["all x.(KnicksPlayer(x) -> Jim(x))", "(KnicksPlayer(Jim) & Player(Jim))", "Jim is a KnicksPlayer.", "(KnicksPlayer(Jim) & -KnicksPlayer(Jim))", "Jim is KnicksPlayer.", "all x.(KnicksPlayer(x) -> Jim(x))", "all x.((Jim(x) & KnicksPlayer(x)) -> Plays(x,y))", "(KnicksPlayer(Jim) & PlaysIn(Jim,Knicks))", "Jim is a KnicksPlayer.", "all x.(KnicksPlayer(x) -> JimKnicks(x))", "All x.(Jim(x) -> KnicksPlayer(x))", "Jim is KnicksPlayer.", "all x.(KnicksPlayer(x) -> Jim(x))", "All x.(Jim(x) -> KnicksPlayer(x))", "(KnicksPlayer(Jim)", "(KnicksPlayer(Jim)"]}
{"id": "folio_train_251", "nl": "Jim is not a Knicks player.", "fol": "-IsKnicksPlayer(Jim)", "prediction": ["-KnicksPlayer(Jim)", "all x.(KnicksPlayer(x) -> -JimKnicksPlayer(x))", "all x.((Jim(x) & -KnicksPlayer(x)) -> -KnicksPlayer(x))", "Jim is not a KnicksPlayer.", "(-KnicksPlayer(Jim))", "(KnicksPlayer(Jim) & -KnicksPlayer(Jim))", "all x.(KnicksPlayer(x) -> -JimKnicks(x))", "all x.((Jim(x) & -KnicksPlayer(x)) -> -KnicksPlayer(x))", "-KnicksPlayer(Jim)", "Jim is not a Knicks player.", "(-KnicksPlayer(Jim))", "-knicksplayer(Jim)", "-KnicksPlayer(Jim)", "(-KnicksPlayer(Jim))", "-KnicksPlayer(Jim)", "(-KnicksPlayer(Jim))"]}
{"id": "folio_train_252", "nl": "Jim is an athlete.", "fol": "IsAthlete(Jim)", "prediction": ["(Athlete(Jim) & Athlete(Jim))", "all x.(Jim(x) -> Athlete(x))", "Jim is an Athlete(Jim)", "-Athlete(Jim)", "(Athlete(Jim) & Athlete(Jim))", "all x.(Jim(x) -> Athlete(x))", "Jim is an Athlete.", "-Athlete(Jim)", "all x.(Athlete(x) -> Jim(x))", "Jim is an athlete.", "(Athlete(Jim)", "All x.(Jim(x) -> Athlete(x))", "Jim is an Athlete.", "(Athlete(Jim)", "all x.(Jim(x) -> Athlete(x))", "All x.(Jim(x) -> Athlete(x))"]}
{"id": "folio_train_253", "nl": "All kids love animals.", "fol": "all x.(IsKid(x) -> LovesAnimals(x))", "prediction": ["all x.(Kid(x) -> LovesAnimals(x))", "all x.(Kid(x) -> LovesAnimals(x))", "(all x.(Kid(x) -> LovesAnimals(x)))", "all x y.((Kid(x) & Animal(y)) -> Loves(x,y))", "all x.(Kid(x) -> LovesAnimals(x))", "(all x.(Kid(x) -> LovesAnimals(x)))", "all x.(Kid(x) -> LovesAnimals(x))", "all x y.((Kid(x) & Animal(y)) -> Love(x,y))", "all x.(Kid(x) -> LoveAnimals(x))", "all x.(Kid(x) -> LovesAnimals(x))", "all x.(Child(x) -> LovesAnimals(x))", "all x.(Kid(x) -> LoveAnimals(x))", "exists x.(Kid(x) & Love(x,Animals,Animals))", "all x.(Child(x) -> LovesAnimals(x))", "all x.(Kid(x) -> LoveAnimals(x))", "exists x.(Kid(x) & LovesAnimals(x))"]}
{"id": "folio_train_254", "nl": "All toddlers are kids.", "fol": "all x.(IsToddler(x) -> IsKid(x))", "prediction": ["all x.(Toddler(x) -> Kid(x))", "all x.(Toddler(x) -> Kid(x))", "(all x.(Toddler(x) -> Kid(x)))", "all x.(Tongue(x) -> Kid(x))", "all x y.((Toddler(x) & Kid(y)) -> Kid(x))", "all x.(Toddler(x) -> Kid(x))", "(all x.(Toddler(x) -> Kid(x))", "all x.(Tongue(x) -> Kids(x))", "all x.(Toddler(x) -> Kid(x))", "all x.(Trotary(x) -> Kids(x))", "all x.(Toddler(x) -> Kid(x))", "all x.(Trotz(x) -> Kid(x))", "all x.(Tongue(x) -> Kids(x))", "all x.(Toddler(x) -> Kid(x))", "all x.(Toddler(x) -> Kids(x))", "all x.(Tourist(x) -> Child(x))"]}
{"id": "folio_train_255", "nl": "If someone loves animals, then they are not bad.", "fol": "all x.(LovesAnimals(x) -> -IsBad(x))", "prediction": ["all x.(LovesAnimals(x) -> -Bad(x))", "(LovesAnimals(x) -> -Bad(x))", "all x.((LovesAnimals(x) & -Bad(x)) -> -LovesAnimals(x))", "all x.(LovesAnimals(x) -> -Bad(x))", "all x y.((LovesAnimals(x) & Animal(y)) -> -Bad(x))", "all x.(LovesAnimals(x) -> -Bad(x))", "all x.((LovesAnimals(x) & -Bad(x)) -> -LovesAnimals(x))", "all x y.((LovesAnimals(x) & LovesAnimals(y)) -> -Bad(x))", "all x.(LovesAnimals(x) -> -Bad(x))", "all x.((LovesAnimals(x) & -Bad(x)) -> -Bad(x))", "all x.(LoversAnimals(x) -> -Bad(x))", "all x.(LovesAnimals(x) -> -Bad(x))", "all x.(LovesAnimals(x) -> -Bad(x))", "exists x.(LovingAnimals(x) & -Bad(x))", "exists x.(LovesAnimals(x) & -Bad(x))", "exists x.(LovesAnimals(x) & -Bad(x))"]}
{"id": "folio_train_256", "nl": "All pirates are bad.", "fol": "all x.(IsPirate(x) -> IsBad(x))", "prediction": ["all x.(Pirate(x) -> Bad(x))", "all x.(Pirate(x) -> Bad(x))", "(all x.(Pirate(x) -> Bad(x)))", "all x y.((Pirate(x) & Pirate(y)) -> Bad(x))", "all x.(Pirate(x) -> Bad(x))", "(all x.(Pirate(x) -> Bad(x)))", "all x.(Pirate(x) -> Bad(x))", "all x.(Priper(x) -> Bad(x))", "all x.(Pirate(x) -> Bad(x))", "all x.(Pirate(x) -> Bad(x))", "all x.(Prisoner(x) -> Bad(x))", "all x.(Pirate(x) -> Bad(x))", "all x.(Pirate(x) -> Bad(x))", "all x.(Prisoner(x) -> Bad(x))", "exists x.(Pirate(x) & Bad(x))", "exists x.(Pirate(x) & Bad(x))"]}
{"id": "folio_train_257", "nl": "If Nancy is not a pirate, then Nancy loves animals.", "fol": "(-IsPirate(Nancy) -> LovesAnimals(Nancy))", "prediction": ["all x.((Nancy(x) & -Pirate(x)) -> LovesAnimals(x))", "all x.((Nancy(x) & -Pirate(x)) -> LovesAnimals(x))", "all x.((Pirate(x) & -Pirate(x)) -> LovesAnimals(x))", "(-Pirate(Nancy) -> LovesAnimals(Nancy))", "all x y.((Nancy(x) & -Pirate(x)) -> LovesAnimals(x,y))", "all x.((Nancy(x) & -Pirate(x)) -> LovesAnimals(x))", "(-Pirate(n) & NancyLovesAnimals(n))", "all x.(Nancy(x) -> (-Pirate(x) & LovesAnimals(x)))", "all x.((Pirate(x) & -Pirate(x)) -> LovesAnimals(x))", "all x.((Nancy(x) & -Pirate(x)) -> LovesAnimals(x))", "(-Pirate(Nancy) -> LovesAnimals(Nancy))", "all x.((Pirate(x) & -Pirate(x)) -> LovesAnimals(x))", "all x.((Nancy(x) & -Pirate(x)) -> LovesAnimals(x))", "all x.((Pirate(x) & -Pirate(x)) -> LovesAnimals(x))", "exists x.(Pirate(x) -> LovesAnimals(x))", "all x.((Nancy(x) & -Pirate(x)) -> LovesAnimals(x))"]}
{"id": "folio_train_258", "nl": "If Nancy is not a toddler, then Nancy is bad.", "fol": "(-IsToddler(Nancy) -> IsBad(Nancy))", "prediction": ["all x.((Nancy(x) & -Toddler(x)) -> Bad(x))", "all x.((Nancy(x) & -Toddler(x)) -> Bad(x))", "all x.((Tongue(x) & -Tongue(x)) -> Bad(x))", "(-Toddler(Nancy) -> Bad(Nancy))", "all x.((Nancy(x) & -Toddler(x)) -> Bad(x))", "all x.((Penny(x) & -Toddler(x)) -> Bad(x))", "all x.((Tongue(x) & -Tongue(x)) -> Bad(x))", "(-Toddler(n) & Nancy(n)) -> Bad(n))", "-Toddler(n) -> Bad(n))", "(-Tongue(Nancy) -> Bad(Nancy))", "all x.((Nancy(x) & -Tongue(x)) -> Bad(x))", "all x.(BadNancy(x) -> -Toddler(x))", "(-Tongue(Nancy) -> Bad(Nancy))", "all x.((Tongue(x) & -Tongue(x)) -> Bad(x))", "all x.(Tongue(x) -> Bad(x))", "all x.((Nancy(x) & -Toddler(x)) -> Bad(x))"]}
{"id": "folio_train_259", "nl": "Nancy is a pirate.", "fol": "IsPirate(Nancy)", "prediction": ["(Pirate(Nancy) & Pirate(Nancy))", "all x.(Pirate(x) -> Nancy(x))", "Nancy is a Pirate(Nancy)", "all x.(Pirate(x) -> Nancy(x))", "(Pirate(Nancy)", "Nancy is a Pirate(Nancy)", "-Pirate(Nancy)", "Nancy is pirate(n)", "all x.(Pirate(x) -> Nancy(x))", "(Pirate(Nancy)", "exists x.(Nancy(x) & Pirate(x))", "Nancy is a Pirate.", "all x.(Pirate(x) -> Nancy(x))", "(Pirate(Nancy)", "all x.(Pirate(x) -> Nancy(x))", "(Pirate(Nancy)"]}
{"id": "folio_train_260", "nl": "Nancy is not a pirate or a toddler.", "fol": "(-IsPirate(Nancy) | IsToddler(Nancy))", "prediction": ["all x.(Nancy(x) -> (-Pirate(x) | Toddler(x)))", "-(Nancy(Nancy) & Pirate(Nancy) & Toddler(Nancy))", "(-Pirate(Nancy) & -Toddler(Nancy))", "-(Pirate(Nancy) | Toddler(Nancy))", "all x.(Nancy(x) -> (-Pirate(x) | Toddler(x)))", "Nancy is not pirate(n) & -Toddler(n))", "(Nancy(Nancy) & -(Pirate(Nancy) | Toddler(Nancy))))", "all x.(Nancy(x) -> (-Pirate(x) & -Toddler(x)))", "(-Pirate(Nancy) & -Toddler(Nancy))", "-(Nancy(Nancy) & Pirate(Nancy) & Toddler(Nancy))", "-(Pirate(Nancy) | Toddler(Nancy))", "Nancy is not a Pirate(Nancy) & -Toddler(Nancy))", "(-Pirate(Nancy) | Toddler(Nancy)))", "\u2013 (Pirate(Nancy) | Toddler(Nancy)))", "all x.(Nancy(x) -> (-Pirate(x) | Toddler(x)))", "(-Pirate(Nancy) & -Toddler(Nancy))"]}
{"id": "folio_train_261", "nl": "If Nancy is not a pirate or a toddler, then she loves animals and is a kid.", "fol": "((-IsPirate(Nancy) | -IsToddler(Nancy)) -> (LovesAnimals(Nancy) & IsKid(Nancy)))", "prediction": ["all x.((Nancy(x) & -Pirate(x) & -Toddler(x)) -> (LovesAnimals(x) & Kid(x)))", "all x.((Pirate(x) | Toddler(x)) -> (LovesAnimals(x) & Kid(x)))", "(-Pirate(n) | Toddler(n))) -> (LovesAnimals(n) & Kid(n)))", "all x.((Nancy(x) & -Pirate(x) & -Toddler(x)) -> (LovesAnimals(x) & Kid(x)))", "(-(Pirate(Nancy) | Toddler(Nancy))) -> (LovesAnimals(Nancy) & Kid(Nancy)))", "(-PirateOrToddler(Nancy)) -> (LovesAnimals(Nancy) & Kid(Nancy)))", "all x y.((Nancy(x) & -Pirate(x) & Toddler(x)) -> (LovesAnimals(x) & Kid(y)))", "all x.((Pirate(x) | Toddler(x)) -> (LovesAnimals(x) & Kid(x)))", "all x.((Nancy(x) & -Pirate(x) & -Toddler(x)) -> (LovesAnimals(x) & Kid(x)))", "all x.((Nancy(x) & -Pirate(x) & Toddler(x)) -> (LovesAnimals(x) & Kid(x)))", "exists x.(Pirate(x) | Toddler(x)) & LovesAnimals(x) & Kid(x))", "all x.((Nancy(x) & -Pirate(x) & -Toddler(x)) -> (LovesAnimals(x) & Kid(x)))", "all x.((Pirate(x) | Toddler(x)) -> (LovesAnimals(x) & Kid(x)))", "all x.((Nancy(x) & -Pirate(x) | Toddler(x)) -> (LovesAnimals(x) & Kid(x)))", "all x.((Pirate(x) | Toddler(x)) -> (LovesAnimals(x) & Kid(x)))", "all x.((Nancy(x) & -Pirate(x) & -Toddler(x)) -> (LovesAnimals(x) & Kid(x)))"]}
{"id": "folio_train_262", "nl": "Lana Wilson directed After Tiller, The Departure, and Miss Americana.", "fol": "(DirectedByPerson(After_Tiller,Lana_Wilson) & DirectedByPerson(The_Departure,Lana_Wilson) & DirectedByPerson(Miss_Americana,Lana_Wilson))", "prediction": ["(DirectedByLanaWilson(Lana Wilson,AfterTiller,Departure) & DirectedByLanaWilson(LanaWilson,MissAmericana))", "All x.(LanaWilson(x) -> (DirectedAfterTiller(x) & DirectedTheDeparture(x) & DirectedMissAmericana(x)))", "(DirectedBy(LanaWilson) & AfterTiller(Lana) & TheDeparture(Lana) & MissAmericana(Lana))", "(DirectedByLanaWilson(Lana Wilson,AfterTilder) & DirectedByTheDeparture(Lana Wilson,MissAmericana))", "Lana Wilson & AfterTiller(Lana) & TheDeparture(Lana) & MissAmericana(Lana))", "Lana Wilson directed AfterTiller, The Departure, MissAmericana, and The Departure.", "(DirectedByLanaWilson(LanaWilson) & AfterTiller(Lana) & TheDeparture(Lana) & MissAmericana(Lana))", "Lana Wilson directed AfterTilter, The Departure, MissAmericana.", "(All x.(LanaWilson(x) -> (AfterTiller(x) | TheDeparture(x) | MissAmericana(x))))", "(DirectsAfterTiller(lanawi) & DirectsTheDeparture(lanawi) & DirectsMissAmericana(lanawi))", "LanaWilson directed AfterTiller(lana.wilson) & TheDeparture(lana.wilson) & MissAmericana(w))", "Lana Wilson (director) & (AfterTiller(Tiller) | TheDeparture(tiller) | MissAmericana(t)))", "Lana Wilson directed AfterTiller(lana.wilson) & TheDeparture(lana.wilson) & MissAmericana(w))", "All x.((LanaWilson(x) & AfterTiller(x) & TheDeparture(x) & MissAmericana(x)) -> DirectedBy(x,y))", "All x.(LanaWilson(x) -> (DirectedAfterTiller(x) & DirectedTheDeparture(x) & DirectedMissAmericana(x)))", "(All x.(LanaWilson(x) -> (AfterTilter(x) | TheDeparture(x) | MissAmericana(x))))"]}
{"id": "folio_train_263", "nl": "If a film is directedy by a person, the person is a filmmaker.", "fol": "all x.(exists y.DirectedByPerson(y,x) -> IsFilmmaker(x))", "prediction": ["all x y.((Film(x) & Person(y) & DirectedBy(x,y)) -> Filmmaker(y))", "all x.(DirectedBy(x,y) -> Filmmaker(y))", "all x.(DirectedBy(x,Person) -> Filmmaker(x))", "all x y.((Film(x) & Person(y) & DirectedBy(y,x)) -> Filmmaker(y))", "all x y z.((Film(x) & Person(y) & Director(z) & DirectedBy(y,x)) -> Filmmaker(y,z))", "all x y.((Person(x) & Film(y) & DirectedBy(x,y)) -> Filmmaker(x))", "all x y z.((Film(x) & Person(y) & DirectedBy(y,x)) -> Filmmaker(y,x))", "all x y.((Film(x) & Person(y) & DirectedBy(x,y)) -> Filmmaker(y))", "all x.(Directed(x) -> Filmmaker(x))", "all x.(DirectedBy(x,y) -> Filmmaker(y))", "exists x.(Directory(x) & Person(x) & DirectedBy(x))", "all x y.((Person(x) & Film(y) & DirectedBy(x,y)) -> Filmmaker(x))", "all x.(DirectedByPerson(x) -> Filmmaker(x))", "all x y.((Film(x) & Person(y) & DirectedBy(y,x)) -> Filmmaker(y,x))", "exists x.(Directory(x) & Person(x) & Filmmaker(x))", "all x.(DirectedBy(x,Person) -> Filmmaker(x))"]}
{"id": "folio_train_264", "nl": "After Tiller is a documentary.", "fol": "DocumentaryStatus(After_Tiller)", "prediction": ["All x.(AfterTilder(x) -> Documentary(x))", "After Tiller is a Documentary.", "(AfterTilder(AfterTilder) -> Documentary(AfterTilder))", "-AfterTilder(x) -> Documentary(x))", "All x.(AfterTiller(x) -> Documentary(x))", "After Tiller is a Documentary.", "AfterTilder is a Documentary.", "(AfterTilter(AfterTilter) -> Documentary(AfterTilter))", "-AfterTilder(x) -> Documentary(x))", "All x.(AfterTilder(x) -> Documentary(x))", "(AfterTiller(AfterTiller) & Documentary(AfterTiller))", "After Tiller is a documentary.", "(AfterTiller(AfterTiller) & Documentary(AfterTiller))", "All x.(AfterTiller(x) -> Documentary(x))", "After Tiller is a Documentary.", "all x.(AfterTilder(x) -> Documentary(x))"]}
{"id": "folio_train_265", "nl": "The documentary is a type of films.", "fol": "all x.(DocumentaryStatus(x) -> FilmType(x))", "prediction": ["all x.(Documentary(x) -> Film(x))", "all x y.((Documentary(x) & Film(y)) -> Film(x))", "all x.(Documentary(x) -> Film(x))", "all x y.((Documentary(x) & Film(y)) -> Film(x,y))", "all x.(Documentary(x) -> Film(x))", "(Films(Documentary) & Films(Documentary))", "all x.(Documentary(x) -> Film(x))", "all x y.((Documentary(x) & Film(y)) -> Film(x))", "exists x.(Documentary(x) & Film(y) & Film(z) & Contains(x,y))", "all x.(Documentary(x) -> Film(x))", "all x y.((Documentary(x) & Film(y)) -> Film(x,y))", "all x.(Documentary(x) -> Film(x))", "all x.(Documentary(x) -> Film(x))", "exists x.(Documentary(x) & Film(y) & Contains(x,y))", "exists x.(Documentary(x) & Film(x))", "exists x.(Documentary(x) & Movie(x))"]}
{"id": "folio_train_266", "nl": "Lana Wilson is from Kirkland.", "fol": "ResidesInCity(Lana_Wilson,Kirkland)", "prediction": ["LanaWilson(Lana) is from Kirkland(Lana))", "Lana Wilson is from Kirkland.", "(LanaWilson(Lana) & Kirkland(Lana))", "all x.(LanaWilson(x) -> FromKirkland(x))", "LanaWilson is from Kirkland.", "(Kirkland(LanaWilson) & From(LanaWilson))", "(LanaWilson(Lana) & FromKirkland(Lana))", "LanaWilson(Lana) isFromKirkland(Lana))", "Lana Wilson (Lana) & Kirkland(Lana))", "Lana Wilson is from Kirkland.", "all x.(LanaWilson(x) -> Kirkland(x))", "(Kirkland(lana) & From(lana,k))", "LanaWilson (Lana(Lana) & Kirkland(Lana))", "LanaWilson is from Kirkland.", "Lana Wilson is from Kirkland.", "Lana Wilson is from Kirkland."]}
{"id": "folio_train_267", "nl": "Kirkland is a US city.", "fol": "CityInCountry(Kirkland,Us)", "prediction": ["(USCity(Kirkland) & LocatedIn(Kirkland))", "Kirkland (USCity)", "all x.(Kirkland(x) -> USCity(x))", "all x.((City(x) & Kirkland(x)) -> USCity(x))", "(City(Kirkland) & USCity(Kirkland))", "Kirkland is a USCity.", "(USCity(Kirkland) & LocatedIn(Kirkland,US))", "Kirkland, USCity(k)", "all x.(Kirkland(x) -> USCity(x))", "all x.((City(x) & Kirkland(x)) -> USCity(x))", "Kirkland, USCity(Kirkland)", "Kirkland (USCity)", "(USCity(Kirkland))", "Kirkland is a USCity.", "(USCity(Kirkland) & USCity(Kirkland))", "(USCity(Kirkland))"]}
{"id": "folio_train_268", "nl": "If a person is from a city in a country, the person is from the country.", "fol": "all x y z.((ResidesInCity(x,y) & CityInCountry(y,z)) -> ResidesInCountry(x,z))", "prediction": ["all x y.((Person(x) & City(y) & Country(y)) -> From(x,y))", "all x.((Person(x) & FromCityInCountry(x)) -> FromCountry(x))", "all x y z.((Person(x) & City(y) & Country(z) & From(x,y,z)) -> From(x,y,z))", "all x y.((Person(x) & City(y) & Country(y)) -> From(x,y))", "all x y.((Person(x) & City(y) & Country(z) & From(x,y,z)) -> From(x,y,z))", "all x.((Person(x) & FromCity(x) & InCountry(x)) -> FromCountry(x))", "all x y z.((Person(x) & City(y) & Country(z) & From(x,y,z)) -> From(x,y,z))", "all x.((Person(x) & FromCityInCountry(x)) -> FromCountry(x))", "all x y.((Person(x) & City(y) & InCountry(x,y)) -> FromCountry(x,y))", "all x.((Person(x) & CityInCountry(x)) -> FromCountry(x))", "all x y.((Person(x) & City(y) & Country(y)) -> From(x,y))", "all x y z.((Person(x) & City(y) & Country(z) & From(x,y,z)) -> Country(x))", "all x.((Person(x) & FromCityInCountry(x)) -> FromCountry(x))", "all x.(FromCityInCountry(x) -> FromCountry(x))", "all x y.((Person(x) & City(y) & Country(z) & From(x,y,z)) -> From(x,z))", "all x.((Person(x) & FromCityInCountry(x)) -> FromCountry(x))"]}
{"id": "folio_train_269", "nl": "After Tiller is nominated for the Independent Spirit Award for Best Documentary.", "fol": "NominatedForAward(After_Tiller,The_Independent_Spirit_Award_for_Best_Documentary)", "prediction": ["All x.((Tilter(x) & IndependentSpiritAward(x)) -> NominatedForBestDocumentary(x))", "After Tiller is NominatedForIndependentSpiritAward(Tiller,BestDocumentary)", "All x.((Tiller(x) & NominatedForIndependentSpiritAward(x)) -> BestDocumentary(x))", "After Tiller NominatedForIndependentSpiritAward(Tiller,BestDocumentary)", "(NominatedForIndependentSpiritAward(Tilder) & BestDocumentary(Tilder))", "All x y.((Tiller(x) & IndependentSpiritAward(y)) -> NominatedFor(x,y))", "-AfterTillerNominatedForIndependentSpiritAward(Tiller)", "-NominatedForIndependentSpiritAward(Tilder)", "(NominatedForIndependentSpiritAward(Tiller) & BestDocumentary(Tiller))", "After Tiller is NominatedForIndependentSpiritAwardForBestDocumentary(Tilder)", "Tiller NominatedForIndependentSpiritAward(Tiller,BestDocumentary)", "AfterTilterNominatedForIndependentSpiritAward(Tilker,BestDocumentary)", "All x.((Tilder(x) & IndependentSpiritAward(x)) -> NominatedForBestDocumentary(x))", "All x.(AfterTiller(x) -> NominatedForIndependentSpiritAward(x))", "After Tiller NominatedForIndependentSpiritAward(Tilder)", "(NominatedForIndependentSpiritAward(Tower,BestDocumentary))"]}
{"id": "folio_train_270", "nl": "Lana Wilson is a US filmmaker.", "fol": "(IsFilmmaker(Lana_Wilson) & ResidesInCountry(Lana_Wilson,Us))", "prediction": ["(Filmmaker(LanaWilson) & Filmmaker(LanaWilson))", "LanaWilson(Lana) is a USFilmmaker(Lana)", "Lana Wilson is a USFilmmaker(lana.wilson)", "all x.((LanaWilson(x) & USFilmmaker(x)) -> Filmmaker(x))", "LanaWilson is a USFilmmaker(Lana,Wilson)", "(Filmmaker(LanaWilson) & USFilmmaker(LanaWilson))", "Lana Wilson (Filmmaker(lana) & USFilmmaker(lana))", "all x.(LanaWilson(x) -> USFilmmaker(x))", "all x.(Filmmaker(x) -> LanaWilson(x))", "all x.(LanaWilson(x) -> Filmmaker(x))", "LanaWilson (Filmmaker(Lana) & Filmmaker(Lana))", "LanaWilson is a USFilmmaker(lana.wilson)", "Lana Wilson is a USFilmmaker.", "(Filmmaker(lana Wilson) & Filmmaker(lana))", "(Filmmaker(LanaWilson) & Filmmaker(LanaWilson))", "(Filmmaker(Lalana Wilson) & Filmmaker(Lalana Wilson))"]}
{"id": "folio_train_271", "nl": "Miss Americana is not directed by a filmmaker from Kirkland.", "fol": "-exists x.(DirectedByPerson(Miss_Americana,x) & ResidesInCity(x,Kirkland) & IsFilmmaker(x))", "prediction": ["all x.(MissAmericana(x) -> -DirectedByFilmmakerFromKirkland(x))", "(-DirectedByFilmmakerFromKirkland(MissAmericana))", "MissAmericana -DirectedByFilmmakerFromKirkland.", "-(DirectedByKirklandFilmmaker(missAmericana) & -DirectedByKirklandFilmmaker(missAmericana))", "all x.((MissAmericana(x) & -DirectedByFilmmakerFromKirkland(x)) -> -DirectedBy(x,Kirkland))", "(-DirectedByKirklandFilmmaker(MissAmericana))", "MissAmericana is not directed by a filmmaker from Kirkland.", "-exists x.(MissAmericana(x) & Director(x) & FromKirkland(x))", "-(DirectedByFilmmakerFromKirkland(MissAmericana))", "all x.(MissAmericana(x) -> -DirectedByFilmmakerFromKirkland(x))", "all x.((MissAmericana(x) & -DirectedByFilmmakerFromKirkland(x)) -> -DirectedByFilmmakerFromKirkland(x))", "Miss Americana -DirectedByFilmmakerFromKirkland.", "(-DirectedByFilmmakerFromKirkland(MissAmericana))", "all x.(MissAmericana(x) -> -DirectedByFictionerFromKirkland(x))", "(-DirectedByFictionerFromKirkland(MissAmericana))", "MissAmericana is not directed by a filmmaker from Kirkland."]}
{"id": "folio_train_272", "nl": "Lana Wilson has won the Independent Spirit Award.", "fol": "WonAward(Lana_Wilson,The_Independent_Spirit_Award)", "prediction": ["all x.((LanaWilson(x) & IndependentSpiritAward(x)) -> Won(x,Lana,Wilson))", "Lana Wilson has won IndependentSpiritAward(lana@gmail.com)", "(WonIndependentSpiritAward(LanaWilson))", "LanaWilsonWonIndependentSpiritAward(Lana,Williams)", "all x.((LanaWilson(x) & IndependentSpiritAward(x)) -> Wins(x,y))", "Lana Wilson has won IndependentSpiritAward(lana)", "LanaWilsonWonIndependentSpiritAward(lana)", "(WinsIndependentSpiritAward(LanaWilson))", "Lana Wilson won IndependentSpiritAward(lana)", "(WinsIndependentSpirit(LanaWilson))", "-WinsIndependentSpiritAward(LanaWilson)", "Lana Wilson has won IndependentSpiritAward.", "LanaWilsonWonIndependentSpiritAward(Lana,Wilson)", "(WonIndependentSpiritAward(LanaWilson))", "LanaWilsonWinsIndependentSpiritAward(lana@gmail.com)", "Lana Wilson has won IndependentSpiritAward(lana.wilson)"]}
{"id": "folio_train_273", "nl": "All bears in zoos are not wild. ", "fol": "all x.((IsBear(x) & LocatedInZoo(x)) -> -IsWild(x))", "prediction": ["all x.((Bear(x) & InZoo(x)) -> -Wild(x))", "all x.(Bear(x) -> -Wild(x))", "all x.((Bear(x) & InZoo(x)) -> -Wild(x))", "all x y.((Bear(x) & Zoo(y) & In(x,y)) -> -Wild(x))", "all x.((Bear(x) & Zoo(x)) -> -Wild(x))", "(all x.(BearInZoo(x) -> -Wild(x)))", "all x y.((Bear(x) & Zoo(y) & In(x,y)) -> -Wild(x))", "all x.((Bear(x) & InZoo(x)) -> -Wild(x))", "all x.(Bear(x) -> -Wild(x))", "all x y.((Bear(x) & Zoo(y) & InZoo(x,y)) -> -Wild(x))", "(all x.(Bear(x) -> -Wild(x)))", "(all x.(Bear(x) -> -Wild(x)))", "all x.(Bear(x) -> -Wild(x))", "all x.(Bear(x) -> -Wild(x))", "all x.((Bear(x) & InZoo(x)) -> -Wild(x))", "all x.(Bear(x) -> -Wild(x))"]}
{"id": "folio_train_274", "nl": "Some bears are in zoos. ", "fol": "exists x.(IsBear(x) & LocatedInZoo(x))", "prediction": ["exists x.(Bear(x) & Zoo(x))", "exists x.(Bear(x) & InZoo(x))", "exists x.(Bear(x) & Zoo(x))", "exists x y.(Bear(x) & Zoo(y) & In(x,y))", "exists x.(Bear(x) & Zoo(x))", "exists x.(Bear(x) & Zoo(x))", "exists x.(Bear(x) & InZoo(x))", "exists x.(Bear(x) & InZoo(x))", "exists x y.(Bear(x) & Zoo(y) & In(x,y))", "exists x.(Bear(x) & Zoo(x))", "exists x.(Bear(x) & InZoo(x))", "exists x.(Bear(x) & Zoo(x))", "exists x.(Bear(x) & InZoo(x))", "exists x.(Bear(x) & InZoo(x))", "exists x.(Bear(x) & Zoo(x))", "exists x.(Bear(x) & InZoo(x))"]}
{"id": "folio_train_275", "nl": "Not all bears are wild.", "fol": "-all x.(IsBear(x) -> IsWild(x))", "prediction": ["-all x.(Bear(x) -> Wild(x))", "-all x.(Bear(x) -> Wild(x))", "exists x.(Bear(x) & Wild(x))", "-all x.(Bear(x) -> Wild(x))", "exists x.(Bear(x) & Wild(x))", "-all x.(Bear(x) -> Wild(x))", "-all x y.(Bear(x) -> Wild(x,y))", "-all x.(Bear(x) -> Wild(x))", "-all x.(Bear(x) -> Wild(x))", "(exists x.(Bear(x) & -Wild(x)))", "-all x.(Bear(x) -> Wild(x))", "-all x.(Bear(x) -> Wild(x))", "-all x.(Bear(x) -> Wild(x))", "(exists x.(Bear(x) | Wild(x)))", "(-all x.(Bear(x) -> Wild(x))", "-all x.(Beard(x) -> Wild(x))"]}
{"id": "folio_train_276", "nl": "If a person is the leader of a country for life, that person is in a monarchy. ", "fol": "all x.(IsLeader(x) -> IsInMonarchy(x))", "prediction": ["all x y.((Person(x) & Country(y) & LeaderOf(x,y)) -> Monarchy(x))", "all x.((Person(x) & LeaderOfCountry(x) & ForLife(x)) -> Monarchy(x))", "all x y.((Person(x) & Country(y) & LeaderOf(x,y)) -> Monarchy(x))", "all x.((Person(x) & LeaderOfCountry(x) & ForLife(x)) -> Monarchy(x))", "all x.(LeaderOfCountry(x) -> Monarchy(x))", "all x y z.((Person(x) & Country(y) & LeaderOf(x,y) & ForLife(x,y)) -> Monarchy(x))", "all x.((Person(x) & LeaderOfCountry(x)) -> Monarchy(x))", "all x.(LeaderOfCountryForLife(x) -> Monarchy(x))", "all x y.((Person(x) & Country(y) & LeaderOf(x,y)) -> Monarchy(x))", "all x y.((Person(x) & Country(y) & LeadsForLife(x,y)) -> Monarchy(x,y))", "exists x.(Person(x) & LeaderOfCountry(x) & ForLife(x))", "all x y.((Person(x) & Country(y) & LeaderForLife(x,y)) -> Monarchy(x,y))", "all x y z.((Person(x) & Country(y) & LeaderOf(x,y) & ForLife(x,y)) -> Monarchy(x))", "all x.((Person(x) & LeaderOfCountry(x) & ForLife(x)) -> Monarchy(x))", "all x.((Person(x) & LeaderOfLongLife(x)) -> Monarchy(x))", "all x y.((Person(x) & Country(y) & LeaderOfForLife(x,y)) -> Monarchy(x,y))"]}
{"id": "folio_train_277", "nl": "Leaders are either a king or a queen.", "fol": "all x.(IsLeader(x) -> ((IsKing(x) & -IsQueen(x)) | (-IsKing(x) & IsQueen(x))))", "prediction": ["all x.(Leader(x) -> (King(x) | Queen(x)))", "all x.(Leader(x) -> (King(x) | Queen(x)))", "all x y.((Leader(x) & King(y)) | Queen(y)) -> Leader(x))", "all x.(Leader(x) -> (King(x) | Queen(x)))", "all x.(Lizard(x) -> (King(x) | Queen(x)))", "all x.(Leader(x) -> (King(x) | Queen(x)))", "all x.(Leader(x) -> ((King(x) | Queen(x))))", "all x y.((Leader(x) & King(y)) | Queen(y))", "all x.(Lird(x) -> (King(x) | Queen(x)))", "all x.(Leader(x) -> (King(x) | Queen(x)))", "all x y.((Leader(x) & King(y)) | Queen(y))", "exists x.(Leader(x) & King(x) | Queen(x))", "all x y.((Leader(x) & King(y)) | Queen(y))", "all x.(Leader(x) -> (King(x) | Queen(x)))", "exists x.(Leader(x) & King(x) | Queen(x))", "exists x.(Leader(x) & (King(x) | Queen(x)))"]}
{"id": "folio_train_278", "nl": "Queens are female.", "fol": "all x.(IsQueen(x) -> IsFemale(x))", "prediction": ["all x.(Queen(x) -> Female(x))", "all x.(Queen(x) -> Female(x))", "(all x.(Queen(x) -> Female(x))", "(Female(queen) & Female(queen))", "all x y.((Queen(x) & Female(y)) -> Queen(x))", "all x.(Queen(x) -> Female(x))", "(all x.(Queen(x) -> Female(x))", "(Female(queen) & Female(queen))", "all x y.((Queen(x) & Female(y)) -> Queen(x))", "all x.(Queen(x) -> Female(x))", "all x.(King(x) -> Female(x))", "all x.(Queen(x) -> Female(x))", "all x.(Queen(x) -> Female(x))", "all x.(Queen(x) -> Feminine(x))", "all x.(Queen(x) -> Female(x))", "all x.(Queen(x) -> Female(x))"]}
{"id": "folio_train_279", "nl": "Kings are male. ", "fol": "all x.(IsKing(x) -> IsMale(x))", "prediction": ["all x.(King(x) -> Male(x))", "all x.(King(x) -> Male(x))", "all x y.((King(x) & Male(y)) -> Is(x,y))", "(all x.(King(x) -> Male(x))", "(Male(king) & Male(king))", "all x.(King(x) -> Male(x))", "(MaleKing(king) & Male(king) & Male(king))", "all x.(King(x) -> Male(x))", "all x y.(King(x) -> Male(y))", "all x.(King(x) -> Male(x))", "all x.(King(x) -> Male(x))", "all x.(King(x) -> Male(x))", "all x.(King(x) -> Male(x))", "all x.(King(x) -> Male(x))", "exists x.(King(x) & Male(x))", "exists x.(King(x) & Man(x))"]}
{"id": "folio_train_280", "nl": "Elizabeth is a queen.", "fol": "IsQueen(Elizabeth)", "prediction": ["(Queen(Elizabeth) & Queen(Elizabeth))", "all x.(Elizabeth(x) -> Queen(x))", "Elizabeth is Queen.", "Elizabeth is queen.", "(Queen(Elizabeth) & Queen(Elizabeth))", "Elizabeth (Queen(Elizabeth))", "(Queen(Elizabeth) & Queen(Elizabeth))", "Elizabeth is Queen(e)", "all x.(Queen(x) -> Elizabeth(x))", "(Queen(Elizabeth) & Queen(Elizabeth))", "Elizabeth is queen.", "all x.(Queen(x) -> Elizabeth(x))", "Elizabeth is Queen(e)", "Elizabeth (Queen)", "Elizabeth is queen.", "(Queen(Elizabeth)"]}
{"id": "folio_train_281", "nl": "Elizabeth is a leader", "fol": "IsLeader(Elizabeth)", "prediction": ["(Leader(Elizabeth) & Leader(Elizabeth))", "Elizabeth is leader(Elizabeth) & Leader(Elizabeth))", "Elizabeth is leader(emily,leader,leader,leader,leader,leader,leader,leader,leader,leader,leader,leader,leader,leader,leader,leader,leader,leader,leader,leader,leader,leader,leader,leader,leader,leader,leader,leader,leader,leader,leader,leader,leader,leader,leader,leader,leader,leader,leader,leader,leader,leader,leader,leader,leader,leader,leader,leader,leader,leader,leader,leader,leader,leader,", "Elizabeth is a leader(Elizabeth) & Leader(Elizabeth)", "Elizabeth is leader(email) & Leader(email,e) & Leader(email,e))", "Elizabeth is leader(Elizabeth) & Leader(Elizabeth) & Leader(Elizabeth))", "all x.(Elizabeth(x) -> Leader(x))", "Elizabeth (Elizabeth) & Leader(Elizabeth))", "(Leader(Elizabeth) & Leader(Elizabeth))", "(Leader(Elizabeth) & Leader(Elizabeth))", "Elizabeth is a leader(Elizabeth) & Leader(Elizabeth))", "all x.(Elizabeth(x) -> Leader(x))", "Elizabeth is a leader. Elizabeth is a leader.", "(Leader(Elizabeth) & Leader(Elizabeth))", "all x.(Elizabeth(x) -> Leader(x))", "(Leader(Elizabeth) & Leader(Elizabeth))"]}
{"id": "folio_train_282", "nl": "Elizabeth is a king.", "fol": "IsKing(Elizabeth)", "prediction": ["Elizabeth is King(Elizabeth)", "(King(Elizabeth) & King(Elizabeth))", "(King(Elizabeth) & King(Elizabeth))", "all x.(Elizabeth(x) -> King(x))", "all x.(King(x) -> Elizabeth(x))", "Elizabeth is King.", "(King(Ellisabeth) & King(Ellisabeth))", "Elizabeth is King(e)", "(King(Elizabeth) & King(Elizabeth))", "(King(Elizabeth) & King(Elizabeth))", "Elizabeth is king.", "all x.(King(x) -> Elizabeth(x))", "Elizabeth (King)", "Elizabeth is King.", "Elizabeth is king.", "Elizabeth is King."]}
{"id": "folio_train_283", "nl": "Elizabeth is in a monarchy.", "fol": "IsInMonarchy(Elizabeth)", "prediction": ["Elizabeth is in Monarchy.", "(Monarchy(Elizabeth) & In(Elizabeth,1))", "Elizabeth exists x.(Monarchy(x) & In(x,Elizabeth))", "(Monarchy(Elizabeth) & In(Elizabeth,Edgar))", "all x.(Elizabeth(x) -> Monarchy(x))", "Elizabeth is in Monarchy.", "Elizabeth is in Monarchy(Elizabeth)", "all x.(Elizabeth(x) -> Monarchy(x))", "(Monarchy(Elizabeth) & In(Elizabeth,y))", "Elizabeth is inMonarchy(e)", "(Monarchy(Elizabeth) & In(Elizabeth))", "exists x.(Elizabeth(x) & Monarchy(x))", "all x.(Elizabeth(x) -> Monarchy(x))", "(Monarchy(Elizabeth) -> In(Elizabeth))", "Elizabeth is in Monarchy.", "all x.(Elizabeth(x) -> Monarchy(x))"]}
{"id": "folio_train_284", "nl": "Elizabeth is a leader of a country.", "fol": "IsLeader(Elizabeth)", "prediction": ["all x y.((Elizabeth(x) & Country(y)) -> Leader(x,y))", "all x.(Elizabeth(x) -> LeaderOfCountry(x))", "(LeaderOfCountry(Elizabeth))", "(LeaderOfCountry(Elizabeth) & LeaderOfCountry(Elizabeth))", "(Lider(Elizabeth,Country) & Leader(Elizabeth,Country))", "all x y.((Elizabeth(x) & Country(y)) -> LeaderOf(x,y))", "all x.((Elizabeth(x) & Country(y)) -> Leader(x,y))", "all x y z.((Elizabeth(x) & Country(y) & Country(z)) -> Leader(x,y,z))", "Elizabeth is leader of a country.", "Elizabeth is leaderOfCountry(e)", "all x.(Elizabeth(x) -> LeaderOfCountry(x))", "Elizabeth is leader(e) ofcountry(e)", "all x y.((Elizabeth(x) & Country(y)) -> Leader(x,y))", "(LeaderOfCountry(Elizabeth))", "Elizabeth is leaderOfCountry(Elizabeth)", "Elizabeth leads a country."]}
{"id": "folio_train_285", "nl": "If people make their own matcha teas every morning with ceremonial-grade matcha powder, then they do not wake up late and start their schedules past noon regularly.", "fol": "all x.(MakesMatchaTea(x) -> -WakesUpLate(x))", "prediction": ["all x.((Person(x) & MakesOwnMatchaTeasEveryMorningWithCeremonialGradeMatchaPowder(x)) -> (-WakeUpLast(x) & StartSchedulesPastPastRegularly(x)))", "all x.((People(x) & MakesOwnMatchaTeasEveryMorningWithCeremonialGradeMatchaPowder(x)) -> (-WakeUpLast(x) & StartSchedulesPastPastRegularly(x)))", "all x.((Person(x) & MakesOwnMatchaTeasEveryMorning(x) & CeremonialGradeMatchaPowder(x)) -> -(WakeUpLast(x) & StartSchedulesPastPastRegularly(x))))", "all x y.((Person(x) & MakesOwnMatchaTeasEveryMorning(x,y) & CeremonialGradeMatchaPowder(y)) -> -(WakeUpLast(x) & StartSchedulesPastPastRegularly(x))))", "all x.(MakesOwnMatchaTeasEveryMorningWithCeremonialGradeMatchaPowder(x) -> (-WakeUpLast(x) & StartSchedulesPastPastRegularly(x)))", "all x y.((Person(x) & MakesOwnMatchaTeas(x,y) & MakesMatchaPowder(x,y)) -> (-WakeUpLast(x) & StartSchedulesPastMoonRegularly(x)))", "all x y z.((Person(x) & MatchaTea(y) & Morning(z) & MakesWithCeremonialGradeMatchaPowder(x,y,z)) -> (-WakeUpLast(x) & StartSchedulesPastPastRegularly(x)))", "(all x.(MakesOwnMatchaTeas(x) & MakesWithCeremonialGradeMatchaPowder(x)) -> -(WakeUpLast(x) & StartSchedulesPastMom(x))))", "all x y.((Person(x) & MakesOwnMatchaTeas(x,y) & EveryMorningWithCeremonialGradeMatchaPowder(x)) -> -(WakeUpLast(x) & StartSchedulesPastPastRegularly(x))))", "all x.((Person(x) & MakesOwnMatchaTeas(x) & MakesCeremonialGradeMatchaPowder(x)) -> (-WakeUpLast(x) & StartSchedulesPastPastRegularly(x)))", "all x.((People(x) & MakesOwnMatchaTeasEveryMorning(x) & CeremonialGradeMatchaPowder(x)) -> -(WakeUpLast(x) & StartSchedulesPastPastRegularly(x))))", "all x y.((People(x) & MakesOwnMatchaTeas(x,y) & CeremonialGradeMatchaPowder(y)) -> (-WearsLate(x) & StartsSchedulesAtPastPastRegularly(x)))", "all x.(MakesOwnMatchaTeasEveryMorningWithCeremonialGradeMatchaPowder(x) -> -(WakeUpLast(x) & StartSchedulesPastPastRegularly(x)))", "all x y z.((Person(x) & MatchaTea(y) & Morning(z) & MakesWithCeremonialGradeMatchaPowder(x,y,z)) -> (-WakeUpLast(x) & StartSchedulesPastPastRegularly(x)))", "all x y.((Person(x) & MakesOwnMatchaTeasEveryMorningWithCeremonialGradeMatchaPowder(x,y)) -> (-WakeUpLast(x) & StartSchedulesPastPastRegularly(x)))", "all x.((Person(x) & MakesOwnMatchaTeasEveryMorningWithCeremonialGradeMatchaPowder(x)) -> -(WakeUpLast(x) & StartSchedulesPastPastRegularly(x)))"]}
{"id": "folio_train_286", "nl": "If people live in California and attend yoga classes regularly, then they make their own matcha teas every morning with ceremonial-grade matcha powder.", "fol": "all x.(LivesInCalifornia(x) -> MakesMatchaTea(x))", "prediction": ["all x.((People(x) & LivesInCalifornia(x) & AttendsYogaClassesRegularly(x)) -> MakesOwnMatchaTeasEveryMorningWithCeremonialGradeMatchaPowder(x))", "all x y.((Person(x) & LivesInCalifornia(x) & AttendsYogaClassesRegularly(x)) -> MakesOwnMatchaTeasEveryMorningWithCeremonialGradeMatchaPowder(x))", "all x.((Person(x) & LivesInCalifornia(x) & AttendsYogaClassesRegularly(x)) -> MakesOwnMatchaTeasEveryMorningWithCeremonialGradeMatchaPowder(x))", "all x y.((People(x) & LivesInCalifornia(x) & AttendsYogaClassesRegularly(x)) -> MakesOwnMatchaTeasEveryMorningWithCeremonialGradeMatchaPowder(x,y))", "all x.((CaliforniaLives(x) & AttendsYogaClassesRegularly(x)) -> MakesOwnMatchaTeasEveryMorningWithCeremonialGradeMatchaPowder(x))", "(all x.((California(x) & LivesIn(x,California) & AttendsYogaClassesRegularly(x)) -> MakesOwnMatchaTeas(x,CeremonialGradeMatchaPowder))", "all x y.((People(x) & California(y) & LivesIn(x,y) & AttendsYogaClassesRegularly(x)) -> MakesOwnMatchaTeasEveryMorningWithCeremonialGradeMatchaPowder(x))", "all x.((PeopleLiveInCalifornia(x) & AttendsYogaClassesRegularly(x)) -> MakesOwnMatchaTeasEveryMorningWithCeremonialGradeMatchaPowder(x))", "all x y z.((Person(x) & California(y) & YogaClass(z) & LivesIn(x,y) & AttendsRegularly(x,z)) -> MakesOwnMatchaTeas(x,y,z))", "all x.((Casual(x) & AttendsYogaClassesRegularly(x)) -> MakesOwnMatchaTeasEveryMorningWithCeremonialGradeMatchaPowder(x))", "all x.((People(x) & LivesInCalifornia(x) & AttendsYogaClassesRegularly(x)) -> MakesOwnMatchaTeasEveryMorningWithCeremonialGradeMatchaPowder(x))", "all x y z.((People(x) & California(y) & YogaClasses(z) & LivesIn(x,y) & AttendsRegularly(x,z)) -> MakesOwnMatchaTeas(x,y,z))", "all x y.((Person(x) & LivesInCalifornia(x) & AttendsYogaClassesRegularly(x)) -> MakesOwnMatchaTeas(x,y))", "all x.((LivesInCalifornia(x) & AttendsYogaClassesRegularly(x)) -> MakesOwnMatchaTeasEveryMorningWithCeremonialGradeMatchaPowder(x))", "all x.((Person(x) & LivesInCalifornia(x) & AttendsYogaClassesRegularly(x)) -> MakesOwnMatchaTeasEveryMorningWithCeremonialGradeMatchaPowder(x))", "all x y.((California(x) & LivesIn(x,y) & AttendsYogaClassesRegularly(x)) -> MakesOwnMatchaTeas(x,y))"]}
{"id": "folio_train_287", "nl": "If people work in the entertainment industry as high-profile celebrities, then they wake up late and start their schedules past noon regularly.", "fol": "all x.(WorksAsCelebrity(x) -> WakesUpLate(x))", "prediction": ["all x.((WorksInEntertainmentIndustryAsHighProfileCelebrities(x)) -> (WakeUpLast(x) & StartSchedulesPastPastRegularly(x)))", "all x.((Person(x) & WorksInEntertainmentIndustryAsHighProfileCelebrities(x)) -> (WakeUpLast(x) & StartSchedulesPastPastRegularly(x)))", "all x y.((WorksInEntertainment(x) & HighProfileCelebrities(y)) -> (WakeUpLast(x,y) & StartSchedulesPastPast(x,y)))", "all x.((WorksInEntertainment(x) & HighProfileCelebrities(x)) -> (WakeUpLater(x) & StartSchedulesPastPastRegularly(x)))", "all x y.((Person(x) & EntertainmentIndustry(y) & HighProfileCelebrities(x)) -> (WakeUpLast(x) & StartSchedulesPastPastRegularly(x)))", "all x y.((WorksInEntertainmentIndustry(x) & HighProfileCelebrities(y)) -> (WakeUpLast(x,y) & StartSchedulesPastPastRegularly(x)))", "all x y z.((Person(x) & EntertainmentIndustry(y) & Celebrity(z) & WorksIn(x,y) & HighProfile(z)) -> (WakeUpLater(x,z) & StartSchedulesPastPastRegularly(x)))", "all x.((Person(x) & HighProfileCelebrity(x)) -> (WakeUpLast(x) & StartSchedulesPastPastRegularly(x)))", "all x y z.((WorksInEntertainmentIndustry(x) & HighProfileCelebrities(y) & WorkInEntertainmentIndustry(z)) -> (WakeUpLater(x,y) & StartSchedulesPastPast(x,z)))", "all x.(WorksInEntertainmentIndustryAsHighProfileCelebrities(x) -> (WakeUpLater(x) & StartSchedulesPastPastRegularly(x)))", "all x.(WorksInEntertainment(x) -> ((WakeUpLate(x) & StartSchedulesPastPast(x))))", "all x y.((WorksInEntertainment(x) & HighProfileCelebrity(y)) -> (WakeUpLast(x,y) & StartSchedulesPastPast(x,y)))", "all x y.((Person(x) & EntertainmentIndustry(y) & HighProfileCelebrity(x)) -> (WakeUpLater(x,y) & StartSchedulesPastPast(x,y)))", "all x.((WorksInEntertainmentIndustryAsHighProfileCelebrities(x)) -> (WakeUpLate(x) & StartSchedulesPastPastRegularly(x)))", "all x.((WorksInEntertainmentIndustry(x) & HighProfileCelebrities(x)) -> (WakeUpLater(x) & StartSchedulesPastMoonRegularly(x)))", "all x.((PeopleWorkInEntertainment(x) & HighProfileCelebrities(x)) -> (WakeUpLast(x) & StartSchedulesPastMoonRegularly(x)))"]}
{"id": "folio_train_288", "nl": "If people do not have regular 9-5 jobs, then they work in the entertainment industry as high-profile celebrities.", "fol": "all x.(HasRegularJob(x) -> WorksAsCelebrity(x))", "prediction": ["all x.((Person(x) & -Regular9-5Jobs(x)) -> HighProfileCelebrities(x))", "all x.((Person(x) & -Regular9-5Job(x)) -> HighProfileCelebrities(x))", "all x y.((Person(x) & -Regular9-5Job(x)) -> HighProfileCelebrities(y))", "all x.((People(x) & -Regular9-5Jobs(x)) -> HighProfileCelebrities(x))", "(-Regular9-5Jobs(Person) & HighProfileCelebrities(Person,Celebrities))", "all x y.((Person(x) & -Regular9-5Jobs(x)) -> HighProfileCelebrities(y))", "all x.((Person(x) & -Regular9-5Jobs(x)) -> HighProfileCelebrities(x))", "all x.((Person(x) & -Regular9-5Jobs(x)) -> WorksInEntertainmentIndustry(x))", "all x y.((Person(x) & -Regular9-5Job(x)) -> WorksInEntertainmentIndustry(x,y))", "all x.((People(x) & -Regular9-5Jobs(x)) -> HighProfileCelebrities(x))", "all x.((People(x) & -Regular9-5Jobs(x)) -> WorksInEntertainmentIndustry(x))", "all x y.((Person(x) & -Regular9-5Jobs(x)) -> WorksInEntertainmentIndustry(x,y))", "all x.((People(x) & -Regular9-5Job(x)) -> HighProfileCelebrities(x))", "exists x.(Person(x) & -Regular9-5Job(x) & HighProfileCelebrities(x))", "all x.((Person(x) & -Regular9-5Jobs(x)) -> WorksInEntertainmentIndustryAsHighProfileCelebrities(x))", "all x.((Person(x) & -Regular9-5Jobs(x)) -> HighProfileCelebrities(x))"]}
{"id": "folio_train_289", "nl": "All people who prefer working at home over going to the office every day do not have regular 9-5 jobs.", "fol": "all x.(PrefersWorkFromHome(x) -> HasRegularJob(x))", "prediction": ["all x.((Person(x) & PrefersWorkingAtHome(x)) -> -Regular9-5Jobs(x))", "all x.(PrefersWorkingAtHome(x) -> -Regular9-5Jobs(x))", "all x.((PrefersWorkingAtHome(x) & -PrefersWorkingToOffice(x)) -> -Regular9-5Jobs(x))", "all x y.((Person(x) & PrefersWorkingAtHome(x) & PrefersWorkingAtOffice(x)) -> -Regular9-5Jobs(y))", "all x.(PrefersWorkingAtHomeOverWorkingAtOfficeEveryDay(x) -> -Regular9-5Jobs(x))", "(all x.((Person(x) & PrefersWorkingAtHome(x)) -> -Regular9-5Jobs(x)))", "all x.((Person(x) & PrefersWorkingAtHome(x)) -> -Regular9-5Jobs(x))", "all x.((Person(x) & PrefersWorkingAtHome(x) & PrefersWorkingAtOffice(x)) -> -Regular9-5Jobs(x))", "all x.((PrefersWorkingAtHome(x) & -Regular9-5Jobs(x)) -> -PrefersWorkingAtOffice(x))", "all x y.((Person(x) & PrefersWorkingAtHome(x) & PrefersWorkingAtOffice(y)) -> -Regular9-5Job(x))", "all x y.((Person(x) & PrefersWorkingAtHome(x) & PrefersWorkingAtOffice(x) & -Regular9-5Jobs(y)) -> -PrefersWorkingAtHome(x))", "all x.((Person(x) & PrefersWorkingAtHome(x) & PrefersWorkingAtOffice(x)) -> -Regular9-5Jobs(x))", "all x.(PrefersWorkingAtHome(x) -> -Regular9-5Jobs(x))", "all x.(PrefersWorkingAtHomeOverWorkingAtOfficeEveryDay(x) -> -Regular9-5Jobs(x))", "all x y.((Person(x) & PrefersWorkingAtHome(x,y)) -> -Regular9-5Job(x))", "all x.(PrefersWorkingAtHome(x) -> -Regular9-5Jobs(x))"]}
{"id": "folio_train_290", "nl": "Clay either both prefers to work at home over going to the office every day and makes his own matcha teas every morning with ceremonial-grade matcha powder, or he neither prefers to work at home over going to the office every day nor makes his own matcha teas every morning with ceremonial-grade matcha powder.", "fol": "((PrefersWorkFromHome(Clay) & MakesMatchaTea(Clay) & -(-PrefersWorkFromHome(Clay) & -MakesMatchaTea(Clay))) | (-(PrefersWorkFromHome(Clay) & MakesMatchaTea(Clay)) & -PrefersWorkFromHome(Clay) & -MakesMatchaTea(Clay)))", "prediction": ["(PrefersWorkingAtHome(Clay) & ((PrefersWorkingAtHome(Clay) & GoesToOfficeEveryDay(Clay) & MakesOwnMatchaTeas(Clay)) | (PrefersWorkingAtHome(Clay) & -MakesOwnMatchaTeas(Clay) & GoesToOfficeEveryDay(Clay))))", "(PrefersWorkAtHome(Clay) & ((PrefersWorkAtHome(Clay) & GoesToOfficeEveryDay(Clay) & MakesOwnMatchaTeas(Clay)) | (PrefersWorkAtHome(Clay) & -PrefersWorkAtHome(Clay) & MakesOwnMatchaTeas(Clay))))", "(exists x.(PrefersWorkAtHome(x) & (GoesToOfficeEveryDay(x) & MakesOwnMatchaTeas(x)) | (-PrefersWorkAtHome(x) & GoesToOfficeEveryDay(x) & MakesOwnMatchaTeas(x))))", "((PrefersWorkingAtHome(Clay) & -PrefersWorkingAtHome(Clay)) | (PrefersWorkingAtHome(Clay) & -PrefersWorkingAtHome(Clay) & MakesOwnMatchaTeas(Clay) & MakesOwnMatchaTeas(Clay))))", "all x.((Clay(x) & (PrefersWorkingAtHome(x) | (PrefersWorkingAtHome(x) & GoesToOfficeEveryDay(x) & MakesOwnMatchaTeas(x) & CeremonialGradeMatchaPowder(x))))", "all x.(Clay(x) -> ((PrefersWorkingAtHome(x) & GoesToOfficeEveryDay(x) & MakesOwnMatchaTeas(x) & CeremonialGradeMatchaPowder(x)) | (-PrefersWorkingAtHome(x) & GoesToOfficeEveryDay(x) & MakesOwnMatchaTeas(x))))", "all x y.((Clay(x) & WorkAtHome(x) & OfficeEveryDay(y) & MakesOwnMatchaTeas(x,y)) -> (Prefers(x,y) | (-Prefers(x,y) & WorksAtHome(x) & MakesOwnMatchaTeas(x,y) & MakesOwnMatchaTeas(x,y))))", "(exists x.(Clay(x) & ((PrefersWorkingAtHome(x) & GoesToOfficeEveryDay(x) & MakesOwnMatchaTeas(x)) | (-PrefersWorkingAtHome(x) & GoesToOfficeEveryDay(x) & MakesOwnMatchaTeas(x)))))", "(all x.(PrefersWorkAtHome(x) -> (WorkAtHome(x) & GoesToOffice(x) & MakesOwnMatchaTeas(x) & CeremonialGradeMatchaPowder(x))) | (-PrefersWorkAtHome(x) & WorksAtOffice(x) & MakesOwnMatchaTeas(x) & CeremonialGraGradeMatchaPowder(x))))", "all x.(Clay(x) -> (PrefersWorkingAtHome(x) & (MakesOwnMatchaTeas(x) | MakesOwnMatchaTeas(x)) & -PrefersWorkingAtHome(x) & (MakesOwnMatchaTeas(x) & CeremonialGradeMatchaPowder(x))))", "all x.((Clay(x) & (PrefersWorkingAtHome(x) | PrefersWorkingAtHome(x))) | (PrefersWorkingAtHome(x) & PrefersWorkingAtHome(x) & PrefersWorkingAtHome(x) & PrefersWorkingAtHome(x) & PrefersWorkingAtHome(x) & PrefersWorkingAtOffice(x))))", "exists x.(Clay(x) & ((PrefersWorkingAtHome(x) & -PrefersWorkingAtHome(x) & GoesToOfficeEveryDay(x) & MakesOwnMatchaTeas(x) & CeremonialGradeMatchaPowder(x)) | (-PrefersWorkingAtHome(x) & MakesOwnMatchaTeas(x) & -PrefersWorkingAtOfficeMatchaPowder(x))))", "(exists x.(PrefersWorkingAtHome(x) & GoesToOfficeEveryDay(x) & MakesOwnMatchaTeas(x)) | exists y.(PrefersWorkingAtHome(y) & GoesToOfficeEveryDay(y) & MakesOwnMatchaTeas(y))))", "either (PrefersWorkingAtHome(Clay) & ((PrefersWorkingAtHome(Clay) & GoesToOfficeEveryDay(Clay) & MakesOwnMatchaTeas(Clay)) | (PrefersWorkingAtHome(Clay) & -MakesOwnMatchaTeas(Clay) & GoesToOfficeEveryDay(Clay))))", "(PrefersToWorkAtHome(Clay) | (PrefersToWorkAtHome(Clay) & GoesToOfficeEveryDay(Clay) & MakesOwnMatchaTeasWithCeremonialGradeMatchaPowder(Clay))))", "(PrefersWorkingAtHome(Clay) | (PrefersWorkingAtHome(Clay) & WorksAtOfficeEveryDay(Clay) & MakesOwnMatchaTeasWithCeremonialGradeMatchaPowder(Clay))))"]}
{"id": "folio_train_291", "nl": "Clay does not have a regular 9-5 job.", "fol": "-HasRegularJob(Clay)", "prediction": ["all x.(Clay(x) -> -Regular9-5Job(x))", "(-Regular9-5Job(Clay))", "Clay does not have a regular 9-5Job.", "all x.(Clay(x) -> -Regular9-5Job(x))", "-(RegularJob(Clay) | RegularJob(Clay)))", "(-Regular9-5Job(Clay))", "-(Regular9-5Job(Clay))", "Clay does not have a regular 9-5Job(Clay)", "(Clay) - Regular9-5Job(Clay))", "(-Regular9-5Job(Clay))", "all x.(Clay(x) -> -Regular9-5Job(x))", "(-Regular9-5Job(Clay))", "Clay has no regular 9-5Job.", "-Regular9-5Job(Clay)", "all x.(Clay(x) -> -Regular9-5Job(x))", "Clay has no regular 9-5Job."]}
{"id": "folio_train_292", "nl": "Clay lives in California and attends yoga classes regularly.", "fol": "LivesInCalifornia(Clay)", "prediction": ["Clay lives in California and attendsYogaClassesRegularly(Clay)", "all x.(Clay(x) -> (LivesInCalifornia(x) & AttendsYogaClasses(x)))", "(LivesInCalifornia(Clay) & AttendsYogaClassesRegularly(Clay))", "(LisesInCalifornia(Clay) & AttendsYogaClassesRegularly(Clay))", "Clay (LisesInCalifornia) & AttendsYogaClassesRegularly(Clay))", "all x.(Clay(x) -> (LivesInCalifornia(x) & AttendsYogaClassesRegularly(x)))", "(LivesInCalifornia(Clay) & AttendsYogaClasses(Clay))", "Clay lives in California and attendsYogaClassesRegularly(Clay)", "exists x.(Clay(x) & LivesInCalifornia(x) & AttendsYogaClasses(x))", "Clay lives in California & attendsYogaClassesRegularly(Clay)", "(LisesInCalifornia(Clay) & AttendsYogaClassesRegularly(Clay))", "all x.(Clay(x) -> (LivesInCalifornia(x) & AttendsYogaClasses(x)))", "(LivesInCalifornia(Clay) & AttendsYogaClassesRegularly(Clay))", "Clay lives in California and attendsYogaClassesRegularly(Clay)", "Clay lives in California and attendsYogaClassesRegularly(Clay,California)", "Clay lives in California and attendsYogaClassesRegularly(Clay)"]}
{"id": "folio_train_293", "nl": "Clay neither prefers working at home over going to the office every day nor lives in California and attends yoga classes regularly.", "fol": "-(PrefersWorkFromHome(Clay) | (LivesInCalifornia(Clay) & Yoga(Clay)))", "prediction": ["(-(PrefersWorkingAtHome(Clay) & -PrefersWorkingAtOffice(Clay)) | (LivesInCalifornia(Clay) & AttendsYogaClassesRegularly(Clay))))", "(exists x.(Clay(x) & -(PrefersWorkingAtHome(x) & -PrefersWorkingAtOffice(x)) | exists y.(California(y) & AttendsYogaClasses(y))))", "(Clay(Clay) & -(PrefersWorkingAtHome(Clay) & -PrefersWorkingAtOffice(Clay)) & -(PrefersWorkingAtHome(Clay) & GoesToOfficeEveryDay(Clay)) & -(PrefersCalifornia(Clay) & AttendsYogaClassesRegularly(Clay))))", "-(PrefersWorkingAtHome(Clay) & -(PrefersWorkingAtOffice(Clay) & -(PrefersWorkingAtHome(Clay) & GoesToOfficeEveryDay(Clay)) & -(PrefersCalifornia(Clay) & AttendsYogaClassesRegularly(Clay))))", "all x.(Clay(x) -> (-(PrefersWorkingAtHome(x) & -PrefersWorkingAtOffice(x)) | (LivesInCalifornia(x) & AttendsYogaClassesRegularly(x))))", "Neither prefersWorkingAtHomeOverWorkingOfficeEveryDay(Clay) & -(LivesInCalifornia(Clay) & AttendsYogaClassesRegularly(Clay)))", "all x.(Clay(x) -> ((PrefersWorkingAtHome(x) & -PrefersWorkingAtOffice(x)) | (LivesInCalifornia(x) & AttendsYogaClassesRegularly(x))))", "-(PrefersWorkingAtHomeOverWorkingOfficeEveryDay(Clay) & -(LivesInCalifornia(Clay) & AttendsYogaClassesRegularly(Clay)))", "((Clay(Clay) & -(WorksAtHome(Clay) | GoesToOffice(Clay))) & -(LivesInCalifornia(Clay) & AttendsYogaClassesRegularly(Clay))))", "-exists x.(Clay(x) & -(PrefersWorkingAtHome(x) & -PrefersWorkingAtOffice(x)) & -exists y.(California(y) & AttendsYogaClasses(x))))", "Clay neexists x.(PrefersWorkingAtHome(x) & -exists y.(California(y) & LivesIn(x,y)) & -exists z.(Office(z) & AttendsYogaClasses(x,z))))", "(exists x.(Clay(x) & -(PrefersWorkingAtHome(x) & -PrefersWorkingAtOffice(x))) | exists y.(California(y) & AttendsYogaClasses(y))))", "-(PrefersWorkingAtHomeOverWorkingAtOfficeEveryDay(Clay) & -(LivesInCalifornia(Clay) & AttendsYogaClassesRegularly(Clay)))", "all x.(Clay(x) & -(PrefersWorkingAtHome(x) & -PrefersWorkingAtOfficeEveryDay(x)) | (LivesInCalifornia(x) & AttendsYogaClassesRegularly(x))))", "(-(PrefersWorkingAtHome(Clay) & -PrefersWorkingAtOffice(Clay)) | (LivesInCalifornia(Clay) & AttendsYogaClassesRegularly(Clay))))", "-(PrefersWorkingAtHome(Clay) & -(PrefersWorkingAtOffice(Clay) & -(LivesInCalifornia(Clay) & AttendsYogaClassesRegularly(Clay))))"]}
{"id": "folio_train_294", "nl": "Thomas Barber was an English professional footballer.", "fol": "(IsEnglish(ThomasBarber) & IsProfessionalFootballer(ThomasBarber))", "prediction": ["(EnglishProfessionalFootballer(ThomasBarber)", "all x.((ThanStocker(x) & EnglishProfessionalFootballer(x)) -> ThomasB Barber(x))", "(ProfessionalFootballer(ThomasBarber) & English(Thomas))", "(EdwardsProfessionalFootballer(ThomasBarber) & EnglishFootballer(Thomas))", "all x.((TomBarber(x) & EnglishProfessionalFootballer(x)) -> Professional(x))", "Thomas Barber (*1927 & EnglishProfessionalFootballer(x))", "Thomas Barber (EdwardsProfessionalFootballer(Edwards))", "(EnglandProfessionalFootballer(ThomasBarber)", "Thomas Barber (EnglandProfessionalFootballer(x))", "ThomasBarrier(t) (EnglishProfessionalFootballer(t) & EnglishFootballer(t)))", "(EnglishProfessionalFootballer(ThomasBarber)", "-(EnglishProfessionalFootballer(ThomasBarber))", "Thomas Barber(t) & EnglishProfessionalFootballer(t) & Professional(t))", "(ProfessionalFootballer(ThomasB Barber) & English(Thomas))", "Thomas Barber (EdwardsProfessionalFootballer(e) & English(e))", "Thomas Barber (*1932 & EnglishProfessionalFootballer(x))"]}
{"id": "folio_train_295", "nl": "Thomas Barber played in the Football League for Aston Villa.", "fol": "PlayedInFootballLeagueFor(ThomasBarber,AstonVilla)", "prediction": ["all x y.((TomTomBarber(x) & AstonVilla(y)) -> PlayedInFootballLiga(x,y))", "(PlayedInFootballLiga(ThomasBarber,AstonVilla) & AstonVilla(ThomasBarber))", "Thomas Barber played in Football League for Aston Villa.", "all x y.((Tom(x) & AstonVilla(y)) -> PlayedInFootballLiga(x,y))", "(PlayedInFootballLion(ThomasBarber,AstonVilla) & AstonVilla(ThomasBarber))", "all x y.((ThomasBarber(x) & AstonVilla(y)) -> PlayedInFootballLiga(x,y))", "all x y z.((ThomasBarber(x) & FootballLiga(y) & AstonVilla(z)) -> PlayedIn(x,y,z))", "All x.((ThomasBarber(x) & AstonVilla(x)) -> PlayedInFootballLiga(x))", "(PlayedInFootballLower(ThomasB Barber,AstonVilla) & AstonVilla(ThomasB Barber,AstonVilla))", "Thomas Barber played in FootballLiga(ThomasB Barber)", "All x.((TomBarber(x) & AstonVilla(x)) -> PlayedInFootballLiga(x))", "(PlayedInFootballLiga(ThomasB Barber) & ForAstonVilla(ThomasB Barber))", "Thomas Barber played in the Football League for Aston Villa.", "Thomas Barber played for Aston Villa in the Football League.", "Thomas Barber played in Football League for Aston Villa.", "ThomasBarber (born & grew up in Aston Villa, England)"]}
{"id": "folio_train_296", "nl": "Thomas Barber played as a half back and inside left.", "fol": "(PlayedAsPosition(ThomasBarber,AHalfBack) & PlayedAsPosition(ThomasBarber,AnInsideLeft))", "prediction": ["all x.((TomTomBarber(x) & HalfBack(x) & InsideLeft(x)) -> PlayedAs(x,y))", "all x.((ThomasBarber(x) & HalfBack(x) & InsideLeft(x)) -> PlayedAs(x,y))", "(PlayedAsHalfBack(ThomasBarber) & PlayedInsideLeft(ThomasBarber))", "all x.((Tom(x) & HalfBack(x) & InsideLeft(x)) -> PlayedAs(x,y))", "all x y.((ThomasBarber(x) & HalfBack(y) & InsideLeft(x)) -> PlayedAs(x,y))", "Thomas Barber played as a HalfBackAndInsideLeft(ThomasB Barber)", "all x.(ThomasBarber(x) -> (PlayedAsHalfBack(x) & PlayedInsideLeft(x)))", "Thomas Barber played as HalfBackAndInsideLeft(ThomasB Barber)", "all x y.((TomTomBarber(x) & HalfBack(y) & InsideLeft(x)) -> PlayedAs(x,y))", "(HalfBack(ThomasBerger) & InsideLeft(ThomasBerger))", "all x.(TomTomBarber(x) -> (PlayedAsHalfBack(x) & PlayedInsideLeft(x)))", "all x.((ThomasBarber(x) & HalfBack(x) & InsideLeft(x)) -> PlayedAs(x,y))", "(PlayedAsHalfBack(ThomasB Barber) & PlayedInsideLeft(ThomasB Barber))", "(PlayedAsHalfBack(ThomasBarber) & PlayedInsideLeft(ThomasBarber))", "Thomas Barber played as a HalfBackAndInsideLeft(ThomasBarber)", "all x.(ThomasBarber(x) -> (PlayedAsHalfBack(x) & PlayedInsideLeft(x)))"]}
{"id": "folio_train_297", "nl": "Thomas Barber scored the winning goal in the 1913 FA Cup Final.", "fol": "ScoredWinningGoalInMatch(ThomasBarber,Facupfinal1913)", "prediction": ["all x y.((TomTomBarber(x) & 1913FACupFinal(y)) -> ScoredWinningGoal(x,y))", "(WinningGoal(ThomasBarber) & 1913FACupFinal(ThomasBarber))", "Thomas Barber scored the winning goal in the 1913 FA Cup Final.", "(Winner(ThomasBarber) & 1913FACupFinal(ThomasBarber))", "all x.((TomTomBarber(x) & 1913FACupFinal(x)) -> ScoredWinningGoal(x))", "all x y z.((ThomasBarber(x) & FACupFinal(y) & 1913(z)) -> ScoresWinner(x,y,z))", "(WinningGoal(ThomasBarber) -> 1913FACupFinal(ThomasBarber))", "Thomas Barber scored the winning goal in 1913 FA Cup Final.", "-(TomTomBarber(x) & 1913FACupFinal(x)) -> ScoredWinningGoal(x))", "ThomasBarber scored winning goal in 1913 FA Cup Final.", "all x y.((TomTomBarber(x) & 1913FACupFinal(y)) -> ScoresWinnerGoal(x,y))", "All x.((TomTomBarber(x) & 1913FACupFinal(x)) -> ScoresWinnerGoal(x))", "(Winner(ThomasBarber) & 1913FACupFinal(ThomasBarber))", "Thomas Barber scored the winning goal in the 1913 FA Cup Final.", "(WinningGoal(ThomasBarber,1913))", "Thomas Barber scored the winning goal in 1913 FA Cup Final."]}
{"id": "folio_train_298", "nl": "Thomas Barber played in the Football League for Bolton Wanderers", "fol": "PlayedInFootballLeagueFor(ThomasBarber,BoltonWanderers)", "prediction": ["Thomas Barber played in FootballLiga(ThomasBarber) & BoltonWanderers(BoltonWanderers) & BoltonWanderers(Wanderers) & BoltonWanderers(Wanderers) & BoltonWanderers(Wanderers) & BoltonWanderers(Wanderers) & BoltonWanderers(Wanderers) & BoltonWanderers(Wanderers)", "all x y.((TomTomBarber(x) & BoltonWanderers(y)) -> PlayedInFootballLiga(x,y))", "(PlayedInFootballLiga(ThomasBarber) & BoltonWanderers(ThomasBarber))", "Thomas Barber played in Football League for Bolton Wanderers (BoltonWanderers) & BoltonWanderers(Wanderers) & BoltonWanderers(Wanderers))", "(PlayedInFootballLimit(ThomasBarber,BoltonWanderers) & BoltonWanderers(ThomasBarber,BoltonWanderers))", "All x y z.((ThomasBarber(x) & BoltonWanderers(y) & FootballLiga(z)) -> PlayedIn(x,y,z))", "All x.((TomBarber(x) & BoltonWanderers(x)) -> PlayedInFootballLiga(x))", "all x y z.((TomTomBarber(x) & BoltonWanderers(y) & FootballLiga(z)) -> PlayedIn(x,y,z))", "all x y.((TomBarber(x) & BoltonWanderers(y)) -> PlayedInFootballLiga(x,y))", "(PlayedInFootball(ThomasBarber,BoltonWanderers) & BoltonWanderers(ThomasBarber,BoltonWanderers))", "ThomasBarber (TomsoonWanderers) - PlayedInFootballLiga(TomsoonWanderers))", "Thomas Barber played in FootballLiga(ThomasB Barber,BoltonWanderers) & BoltonWanderers(BoltonWanderers)", "Thomas Barber played in the Football League for Bolton Wanderers.", "(PlayedInFootballLiga(ThomasBarber,BoltonWanderers) & BoltonWanderers(ThomasBarber,BoltonWanderers))", "(PlayedInFootballLower(ThomasBarber,BoltonWanderers) & BoltonWanderers(ThomasBarber,BoltonWanderers))", "Thomas Barber played in Football League for Bolton Wanderers."]}
{"id": "folio_train_299", "nl": "Thomas Barber played as an inside left.", "fol": "PlayedAsPosition(ThomasBarber,AnInsideLeft)", "prediction": ["all x.((ThomasBarber(x) & InsideLeft(x)) -> Played(x,y))", "all x.((TomBarber(x) & InsideLeft(x)) -> Played(x,y))", "(InsideLeft(ThomasBarber)", "all x y.((TomTomBarber(x) & InsideLeft(y)) -> PlayedAs(x,y))", "Thomas Barber played as insideleft.", "all x.((ThomasBarber(x) & InsideLeft(x)) -> PlayedAs(x,y))", "all x y.((ThomasBarber(x) & InsideLeft(y)) -> PlayedAs(x,y))", "Thomas Barber played as InsideLeft(ThomasBerger)", "All x.(TomBarber(x) -> PlayedInsideLeft(x))", "all x.((TomBarber(x) & InsideLeft(x)) -> PlayedAs(x,y))", "(InsideLeft(ThomasBarber)", "Thomas Barber played as insideleft.", "all x.((ThanyBarber(x) & InsideLeft(x)) -> PlayedAs(x,y))", "(InsideLeft(ThomasBarber)", "Thomas Barber played insideleft.", "(InsideLeft(ThomasBerger)"]}
{"id": "folio_train_300", "nl": "An English professional footballer scored the winning goal in the 1913 FA Cup Final.", "fol": "exists x.(IsEnglish(x) & IsProfessionalFootballer(x) & ScoredWinningGoalInMatch(x,Facupfinal1913))", "prediction": ["all x y.((EnglandProfessionalFootballer(x) & FACupFinal(y) & 1913(x)) -> ScoresWinnerGoal(x,y))", "all x.((EnglandProfessionalFootballer(x) & FACupFinal(x,1913)) -> ScoresWinnerGoal(x,1913))", "all x.((EnglishProfessionalFootballer(x) & WinsFACup(x,1913)) -> ScoresWinnerGoal(x,1913))", "all x y z.((EnglandProfessionalFootballer(x) & Goal(y) & FACupFinal(z) & 1913(z)) -> ScoresWinner(x,y,z))", "(WinnerGoal(english) & 1913FACupFinal(english))", "all x y.((EnglishProfessionalFootballer(x) & FACupFinal(y) & 1913(x)) -> ScoresWinnerGoal(x,y))", "(WinnerGoalInFinal(english) & 1913FACupFinal(english))", "all x.((EnglandProfessionalFootballer(x) & WinsFACupFinal(x,1913)) -> ScoresWinnerGoal(x,1913))", "all x y z.((EnglishProfessionalFootballer(x) & Goal(y) & FACupFinal(z) & 1913(z)) -> ScoresWinner(x,y,z))", "all x.(EnglishProfessionalFootballer(x) -> ScoresWinnerGoal(x,1913))", "all x.(EnglandProfessionalFootballer(x) -> ScoresWinnerGoalInFinal(x,1913))", "(WinnerGoal(english) & 1913FACupFinal(english))", "all x y.((EnglandProfessionalFootballer(x) & FACupFinal(y) & 1913(y)) -> ScoredWinnerGoal(x,y))", "(WinningGoal(england,1913) & FACupFinal(england,1913))", "(WinningGoal(english) & 1913FACupFinal(english))", "all x y.((EnglishProfessionalFootballer(x) & 1913FACupFinal(y)) -> ScoresWinnerGoal(x,y))"]}
{"id": "folio_train_301", "nl": "If people play the instrument in the concert, then he is good at playing this kind of instrument.", "fol": "all y x.(PerformInConcert(y,x) -> SkilledAtPlaying(y,x))", "prediction": ["all x.(PlayInConcert(x) -> GoodAtPlayingInstrument(x))", "all x y.((Person(x) & Instrument(y) & PlaysInConcert(x,y)) -> GoodAtPlaying(x,y))", "all x.((PlayInConcert(x) & Instrument(x)) -> GoodAtPlaying(x,y))", "all x y.((PlayInConcert(x) & Person(y) & PlayInConcert(y,x)) -> GoodAtPlayingInstrument(y,x))", "all x.(PlaysInConcert(x) -> GoodAtPlayingInstrument(x))", "all x.((PlaysInConcert(x) & Instrument(x)) -> GoodAtPlayingInstrument(x))", "all x.((Person(x) & PlaysInConcert(x)) -> GoodAtPlayingInstrument(x))", "all x y z.((Person(x) & Instrument(y) & Concert(z) & PlaysIn(x,y,z)) -> GoodAtPlaying(x,y,z))", "all x y.((PlaysInConcert(x,y) & Instrument(y)) -> GoodAtPlaying(x,y))", "all x y.((Person(x) & Instrument(y) & PlaysInConcert(x,y)) -> GoodAtPlaying(x,y))", "all x y.((Person(x) & PlayInConcert(x,y) & Instrument(y)) -> GoodAtPlaying(x,y))", "all x.(PlayInConcert(x) -> GoodAtPlayingInstrument(x))", "all x.((PlaysInConcert(x) & Instrument(x)) -> GoodAtPlaying(x,Instrument))", "all x.(PlaysInConcert(x) -> GoodAtPlayingInstrument(x))", "all x y.((PlayInConcert(x) & Person(y)) -> GoodAtPlayingInstrument(y,x))", "exists x.(PlayInConcert(x) & GoodAtPlayingInstrument(x))"]}
{"id": "folio_train_302", "nl": "Peter plays piano, violin, and saxophone.", "fol": "(PlaysInstrument(Peter,Piano) & PlaysInstrument(Peter,Violin))", "prediction": ["(PlaysPiano(Peter) | PlaysViolin(Peter) | PlaysSaxophone(Peter))", "all x.(Peter(x) -> (PlaysPiano(x) & PlaysViolin(x) & PlaysSaxophone(x)))", "(Plays(Peter,Piano) | Plays(Peter,Violin) | Plays(Peter,Saxophone)))", "(Plays(Peter,Piano) & Plays(Peter,Violin) & Plays(Peter,Saxophone))", "(PeterPlays(Piano,Piano) & Plays(Piano,Violin) & Plays(Paxophone,Saxophone))", "(PlaysPiano(Peter) | PlaysViolin(Peter) | PlaysSaxophone(Peter))", "(PeterPlays(Piano,Piano) & Plays(Violin,Saxophone))", "all x.(Peter(x) -> (PlaysPiano(x) & PlaysViolin(x) & PlaysSaxophone(x)))", "(PlaysPiano(Peter) & PlaysViolin(Peter) & PlaysSaxophone(Peter))", "(plays(Peter,Piano) | Plays(Pianist,Violin) | Plays(Peter,Saxophone)))", "all x.(Plays(x,y) -> (Piano(y) | Violin(y) | Saxophone(y)))", "(PlaysPiano(Peter) | PlaysViolin(Peter) | PlaysSaxophone(Peter))", "Peter playsPiano(Peter) & PlaysViolin(Peter) & PlaysSaxophone(Peter))", "all x.(Peter(x) -> (PlaysPiano(x) | PlaysViolin(x) | PlaysSaxophone(x)))", "all x.(Peter(x) -> (PlaysPiano(x) & PlaysViolin(x) & PlaysSaxophone(x)))", "exists x.(Peter(x) & Plays(x,piano,violin,saxophone))"]}
{"id": "folio_train_303", "nl": "Peter was invited to play piano at the concert hall.", "fol": "PerformInConcert(Peter,Piano)", "prediction": ["all x y.((Peter(x) & ConcertHall(y)) -> InvitedToPlayPiano(x,y))", "all x.((Peter(x) & InvitedToPlayPiano(x)) -> ConcertHall(x))", "(InvitedToPlayPiano(Peter,Piano) & ConcertHall(Peter))", "Peter was invited to play piano at the concerthall.", "(InvitedToPlayPiano(Peter,Piano) & ConcertHall(Peter,Piano))", "-InvitedToPlayPiano(Peter,Piano)", "all x y.((Peter(x) & ConcertHall(y)) -> InvadedToPlayPiano(x,y))", "(InvitedToPlayPianoAtConcertHall(Peter) & PlaysPianoAtConcertHall(Peter))", "all x y z.((Peter(x) & ConcertHall(y) & Piano(z)) -> InvadedToPlay(x,z))", "(InvitedToPlayPiano(Peter,Piano) & ConcertHall(Peter))", "all x.((Peter(x) & InvitedToPlayPiano(x)) -> ConcertHall(x))", "Peter was invited to play piano at the concerthall.", "-InvitedToPlayPiano(Peter,Piano)", "all x y.((Peter(x) & ConcertHall(y)) -> InvitedToPlayPiano(x,y))", "(InvitedToPlayPiano(Peter,Piano) & ConcertHall(Peter,Piano))", "all x.((Peter(x) & InvitedToPlayPiano(x)) -> ConcertHall(x))"]}
{"id": "folio_train_304", "nl": "Oliver and Peter were both invited to perform in the concert.", "fol": "(IsConcertPerformer(Peter) & IsConcertPerformer(Oliver))", "prediction": ["(InvitedToPerform(Oliver,Concert) & InvitedToPerform(Peter,Concert))", "all x y.((Oliver(x) & Peter(y)) -> (InvitedToPerformInConcert(x,y) & InvitedToPerformInConcert(y,x)))", "(InvitedToPerformInConcert(Oliver,Peter) & InvitedToPerformInConcert(Oliver,Peter))", "(InvitedToPerformConcert(Oliver) & InvitedToPerformConcert(Peter))", "both Oliver and Peter were invited to perform in the concert.", "(Invited(Oliver) & Invited(Peter))", "all x y.((Oliver(x) & Peter(y)) -> (InvitedToPerform(x,y) & InvitedToPerform(y,x)))", "all x.((Oliver(x) & Peter(x)) -> InvadedToPerformInConcert(x))", "(Invitation(Oliver) & Invitation(Peter))", "((Oliver(Oliver) & Peter(Peter)) -> InvitedToPerformInConcert(Oliver,Peter))", "((Oliver(Oliver) & Peter(Peter)) | (Peter(Oliver) & Peter(Peter))))", "(InvitedToPerformConcert(Oliver) & InvitedToPerformConcert(Peter))", "both invited to perform in concert.", "all x y.((Oliver(x) & Peter(y)) -> (InvitedToPerformInConcert(x,y) & InvitedToPerformInConcert(y,x)))", "Oliver and Peter were both invited to perform in concert.", "both Oliver and Peter were invited to perform in the concert."]}
{"id": "folio_train_305", "nl": "Oliver plays a different musical instrument from Peter in the concert.", "fol": "-PerformInConcert(Oliver,Piano)", "prediction": ["all x y.((Oliver(x) & Peter(y)) -> PlaysDifferentInstrument(x,y))", "(PlaysMusicalInstrument(Oliver,Peter) & PlaysMusicalInstrument(Oliver,Peter))", "all x y z.((Oliver(x) & Peter(y) & MusicalInstrument(z)) -> PlaysDifferentIn Concert(x,y,z))", "(PlaysDifferentInstrument(Oliver,Peter) & InConcert(Oliver,Peter))", "Oliver plays a different musical instrument from Peter in the concert.", "(PlaysMusicalInstrument(Oliver,Peter) & DifferentInConcert(Oliver,Peter))", "all x y.((Oliver(x) & Peter(y)) -> PlaysDifferentInstrument(x,y))", "(DifferentInstrument(Oliver) & DifferentInstrument(Oliver))", "all x.((Oliver(x) & Peter(x)) -> PlaysDifferentInstrument(x,y))", "(DifferentMusicalInstrument(Oliver) & DifferentMusicalInstrument(Oliver))", "all x y z.((Oliver(x) & Peter(y) & MusicalInstrument(z)) -> PlaysInConcert(x,y,z))", "Oliver plays a different musical instrument from Peter in the concert.", "(PlaysDifferentInstrument(Oliver,Peter) & InConcert(Oliver,Peter))", "Oliver plays a different musical instrument in the concert from Peter.", "all x y.((Oliver(x) & Peter(y)) -> PlaysDifferentInstrument(x,y))", "all x y.((Oliver(x) & Peter(y)) -> PlaysDifferentMusicalInstrument(x,y))"]}
{"id": "folio_train_306", "nl": "Oliver plays piano in the concert.", "fol": "PerformInConcert(Oliver,Piano)", "prediction": ["Oliver playsPianoInConcert(Oliver)", "(PlaysPiano(Oliver) & InConcert(Oliver))", "all x y.((Oliver(x) & Concert(y)) -> PlaysPiano(x,y))", "all x.(Oliver(x) -> PlaysPiano(x))", "-PlaysPianoInConcert(Oliver)", "Oliver plays piano in concert.", "(PlaysPiano(Oliver,Concert))", "(PlaysInConcert(Oliver,Piano))", "all x.(Oliver(x) -> PlaysPianoInConcert(x))", "all x y.((Oliver(x) & Piano(y)) -> PlaysInConcert(x,y))", "Oliver playsPianoInConcert(Oliver)", "Oliver playspiano(Oliver)", "(PlaysPiano(Oliver) & InConcert(Oliver))", "Oliver plays piano in the concert.", "Oliver playsPianoInConcert(OldOliver)", "(playsPiano(Olivier,Concert))"]}
{"id": "folio_train_307", "nl": "Oliver plays violin in the concert.", "fol": "PerformInConcert(Oliver,Violin)", "prediction": ["(PlaysViolin(Oliver) & InConcert(Oliver))", "all x.(Oliver(x) -> PlaysViolin(x))", "Oliver plays violin in the concert.", "all x y.((Oliver(x) & Concert(y)) -> PlaysViolin(x,y))", "Oliver playsViolinInConcert(Oliver)", "-PlaysViolinInConcert(Oliver)", "(PlaysViolin(Oliver,Concert))", "Oliver plays violin in concert.", "all x.(Oliver(x) -> PlaysViolinInConcert(x))", "(PlaysViolin(Oliver) -> InConcert(Oliver))", "all x y.((Oliver(x) & Concert(y)) -> PlaysViolin(x,y))", "Oliver playsViolinInConcert(Oliver)", "Oliver (violin) & Concert(old)", "Oliver plays violin in the concert.", "(PlaysViolin(Oliver,Concert))", "Oliver plays violin in concert."]}
{"id": "folio_train_308", "nl": "Peter is good at playing piano.", "fol": "SkilledAtPlaying(Peter,Piano)", "prediction": ["all x.((Peter(x) & GoodAtPlayingPiano(x)) -> GoodAtPlayingPiano(x))", "(GoodAtPlayingPiano(Peter))", "all x.(Peter(x) -> GoodAtPlayingPiano(x))", "(GoodAtPlayingPiano(Peter) & GoodAtPlayingPiano(Peter))", "all x.((Peter(x) & Piano(y)) -> GoodAt(x,y))", "(GoodAtPlaying(Peter,Piano))", "-GoodAtPlayingPiano(Peter)", "all x.(Peter(x) -> GoodAtPlayingPiano(x))", "all x.((Peter(x) & GoodAtPlayingPiano(x)) -> GoodAtPlayingPiano(x))", "(GoodAtPlayingPiano(Peter) & GoodAtPlayingPiano(Peter))", "all x.((Peter(x) & PlaysPiano(x)) -> GoodAt(x))", "(GoodAtPlaying(Peter,Piano))", "exists x.(Peter(x) & GoodAtPlayingPiano(x))", "all x.((Peter(x) & Piano(y)) -> GoodAtPlaying(x,y))", "(GoodAtPlaying(Peter,Piano))", "exists x.(Peter(x) & GoodAtPlayingPiano(x))"]}
{"id": "folio_train_309", "nl": "If something can go underwater, then it enjoys water.", "fol": "all x.(CanGoUnderwater(x) -> LovesWater(x))", "prediction": ["all x.((CanGoUnderwater(x)) -> EnjoysWater(x))", "all x.((CanGoUnderwater(x)) -> EnjoysWater(x))", "all x.((GoesUnderwater(x)) -> EnjoysWater(x))", "all x.(CanGoUnderwater(x) -> EnjoysWater(x))", "all x.((Product(x) & CanGoUnderwater(x)) -> EnjoysWater(x))", "all x.((CanGoUnderwater(x) & EnjoysWater(x)) -> CanGoUnderwater(x))", "all x y.((CanGoUnderwater(x) & Water(y)) -> Enjoys(x,y))", "all x.((CanGoUnderwater(x)) -> EnjoysWater(x))", "all x y.((DoesUnderwater(x) & CanGo(x,y)) -> EnjoysWater(x))", "all x y.((Position(x) & CanGoUnderwater(x)) -> EnjoysWater(y))", "all x.(CanGoUnderwater(x) -> EnjoysWater(x))", "all x y.((CanGoUnderwater(x) & Water(y)) -> Enjoys(x,y))", "exists x.(Water(x) & CanGoUnderwater(x))", "exists x.(Water(x) & CanGoUnderwater(x))", "all x.(CanGoUnderwater(x) -> EnjoysWater(x))", "all x.((CanGoUnderwater(x)) -> EnjoysWater(x))"]}
{"id": "folio_train_310", "nl": "All animals that can swim can go underwater.", "fol": "all x.(AbleToSwim(x) -> CanGoUnderwater(x))", "prediction": ["all x.((Animal(x) & CanSwim(x)) -> CanGoUnderwater(x))", "all x.((Animal(x) & CanSwim(x)) -> CanGoUnderwater(x))", "all x.(CanSwim(x) -> CanGoUnderwater(x))", "all x y.((Animal(x) & CanSwim(x) & CanGoUnderwater(y)) -> CanGoUnderwater(x))", "(all x.(CanSwim(x) -> CanGoUnderwater(x)))", "all x.((Animal(x) & CanSwim(x)) -> CanGoUnderwater(x))", "all x.(CanSwim(x) -> CanGoUnderwater(x))", "all x y.((Animal(x) & CanSwim(x) & CanGoUnderwater(y)) -> CanGoUnderwater(x))", "all x.((Animal(x) & CanSwim(x)) -> CanGoUnderwater(x))", "all x.((Animal(x) & Swims(x)) -> CanGoUnderwater(x))", "all x.(CanSwim(x) -> CanGoUnderwater(x))", "all x.((Animal(x) & CanSwim(x)) -> CanGoUnderwater(x))", "all x.((Animal(x) & Swims(x)) -> CanGoUnderwater(x))", "all x.(CanSwim(x) -> CanGoUnderwater(x))", "all x.((Animal(x) & CanSwim(x)) -> CanGoUnderwater(x))", "all x.((Animal(x) & CanSwim(x)) -> GoUnderwater(x))"]}
{"id": "folio_train_311", "nl": "Either an animal can swim or it can walk.", "fol": "all x.(AbleToSwim(x) | AbleToWalk(x))", "prediction": ["all x.(Animal(x) -> (CanSwim(x) | CanWalk(x)))", "(exists x.(Animal(x) & CanSwim(x)) | exists y.(Animal(y) & CanWalk(y))))", "all x.(Animal(x) -> (CanSwim(x) | CanWalk(x)))", "all x y.((Animal(x) & Animal(y)) -> (CanSwim(x) | CanWalk(y)))", "all x y.((Animal(x) & Animal(y) & (CanSwim(x,y) | CanWalk(x,y))) -> CanSwim(x,y))", "all x.(Animal(x) -> (CanSwim(x) | CanWalk(x)))", "(all x.(Animal(x) -> CanSwim(x)) | (Animal(x) -> CanWalk(x))))", "exists x.(Animal(x) & (CanSwim(x) | CanWalk(x)))", "all x y.(Animal(x) -> (CanSwim(x) | CanWalk(x)))", "all x.(Animal(x) -> (CanSwim(x) | CanWalk(x)))", "exists x.(Animal(x) & CanSwim(x) | CanWalk(x))", "exists x.(Animal(x) & (CanSwim(x) | CanWalk(x)))", "all x.(Animal(x) -> (CanSwim(x) | CanWalk(x)))", "exists x.(Animal(x) & CanSwim(x) | CanWalk(x))", "exists x.(Animal(x) & (CanSwim(x) | CanWalk(x)))", "exists x.(Animal(x) & (CanSwim(x) | CanWalk(x)))"]}
{"id": "folio_train_312", "nl": "Animals that can walk travel on land.", "fol": "all x.(AbleToWalk(x) -> MovesOnLand(x))", "prediction": ["all x.((Animal(x) & Walks(x)) -> TravelsOnLand(x))", "all x.((Animal(x) & WalksOnLand(x)) -> TravelsOnLand(x))", "all x.((Animal(x) & CanWalk(x)) -> TravelsOnLand(x))", "all x y.((Animal(x) & Walks(x)) -> TravelsOnLand(x,y))", "all x y.((Animal(x) & CanWalk(x) & Land(y)) -> TravelsOn(x,y))", "(all x.(WalkingAnimal(x) -> TravelsOnLand(x)))", "all x.((Animal(x) & WalksOnLand(x)) -> TravelsOnLand(x))", "all x.((Animal(x) & CanWalk(x)) -> TravelsOnLand(x))", "all x y.((Animal(x) & Walks(x)) -> TravelsOnLand(x))", "all x y.((Animal(x) & CanWalk(x) & Land(y)) -> TravelsOn(x,y))", "all x.((Animal(x) & WalksOnLand(x)) -> TravelsOnLand(x))", "all x.(Walks(x) -> TravelsOnLand(x))", "all x.((Animal(x) & CanWalk(x)) -> TravelsOnLand(x))", "all x.((Animal(x) & CanWalk(x)) -> TravelsOnLand(x))", "all x.((Animal(x) & Walkable(x)) -> TravelOnLand(x))", "all x.((Animal(x) & CanWalk(x)) -> TravelsOnLand(x))"]}
{"id": "folio_train_313", "nl": "Animals that enjoy water splash water around.", "fol": "all x.(LovesWater(x) -> CreatesSplash(x))", "prediction": ["all x.((Animal(x) & EnjoysWater(x)) -> SplashWaterAround(x))", "all x y.((Animal(x) & EnjoysWater(x)) -> SplashWaterAround(x,y))", "all x.((Animal(x) & EnjoysWater(x)) -> SplashWaterAround(x))", "all x y z.((Animal(x) & Water(y) & Water(z) & Enjoys(x,y)) -> SplashWaterAround(x,z))", "all x y.((Animal(x) & EnjoysWater(x)) -> SplashWaterAround(x,y))", "(all x.((Animal(x) & EnjoysWater(x)) -> SplashWaterAround(x)))", "all x.((Animal(x) & EnjoysWater(x)) -> SplashWaterAround(x))", "all x y.((Animal(x) & EnjoysWater(x) & Water(y)) -> Splash(x,y))", "all x y.((Animal(x) & EnjoysWater(x)) -> SplashWaterAround(x,y))", "all x.((Animal(x) & EnjoysWater(x)) -> SplashWaterAround(x))", "all x y.((Animal(x) & EnjoysWater(x,y)) -> SplashWaterAround(x,y))", "all x.((Animal(x) & EnjoysWater(x)) -> SplashWaterAround(x))", "all x.((Animal(x) & EnjoyWater(x)) -> SplashWaterAround(x))", "all x.((Animal(x) & EnjoysWater(x)) -> SplashWaterAround(x))", "all x.((Animal(x) & EnjoysWater(x)) -> SplashesWater(x))", "all x.((Animal(x) & EnjoysWater(x)) -> SplashWaterAround(x))"]}
{"id": "folio_train_314", "nl": "Every animal that travels on land enjoys basking in the sun.", "fol": "all x.(MovesOnLand(x) -> LovesBaskingInSun(x))", "prediction": ["all x.((Animal(x) & TravelsOnLand(x)) -> EnjoysBakingInSun(x))", "all x y.((Animal(x) & LandTravels(x)) -> EnjoysBakingInSun(x,y))", "all x.((Animal(x) & TravelsOnLand(x)) -> EnjoysBreakingInSun(x))", "(all x.(TravelsOnLand(x) -> EnjoysBakingInSun(x)))", "all x.(TravelsOnLand(x) -> EnjoysBakingInSun(x))", "all x y.((Animal(x) & LandTravelsOn(x,y)) -> EnjoysBakingInSun(x))", "all x y.((Animal(x) & TravelsOnLand(x)) -> EnjoysBakingInSun(x,y))", "all x.((Animal(x) & TravelsOnLand(x)) -> EnjoysBakingInSun(x))", "all x.(TravelsOnLand(x) -> EnjoysBakingInSun(x))", "all x y.((Animal(x) & LandTravels(x,y)) -> EnjoysBakingInSun(x))", "all x.((Animal(x) & TravelsOnLand(x)) -> EnjoysBreakingInSun(x))", "all x y.((Animal(x) & TravelsOnLand(x)) -> EnjoysBreakingInSun(x,y))", "all x.(TravelsOnLand(x) -> EnjoysBreakingInSun(x))", "all x.((Animal(x) & TravelsOnLand(x)) -> EnjoysBakingInSun(x))", "all x.((Animal(x) & TravelsOnLand(x)) -> EnjoysBreakingInSun(x))", "all x.((Animal(x) & TravelsOnLand(x)) -> EnjoysBakingInSun(x))"]}
{"id": "folio_train_315", "nl": "George splashes water around and can swim.", "fol": "(CreatesSplash(George) & AbleToSwim(George))", "prediction": ["all x.(George(x) -> (SpoilsWater(x) & CanSwim(x)))", "(SpoilsWaterAround(George) & CanSwim(George))", "George splashesWaterAroundAndCanSwim(George)", "all x.(George(x) -> (SplashesWater(x) & CanSwim(x)))", "all x y.((George(x) & Water(y)) -> (SpoilsAround(x,y) & CanSwim(x)))", "all x.(George(x) -> (SpoilsWater(x) & CanSwim(x)))", "George splashesWaterAroundAndCanSwim(George)", "(SpoilsWaterAround(George) & CanSwim(George))", "all x.(George(x) -> (SpoilsWater(x) & CanSwim(x)))", "(SplashesWaterAround(George) & CanSwim(George))", "all x.(George(x) -> (SplashWater(x) & CanSwim(x)))", "all x y.((George(x) & Water(y)) -> (Splashes(x,y) & CanSwim(x)))", "(SpokensWater(George) & CanSwim(George))", "George splashesWaterAroundAndSwims(George)", "(SpoilsWaterAround(George) & CanSwim(George))", "all x.(George(x) -> (SprinksWaterAround(x) & CanSwim(x)))"]}
{"id": "folio_train_316", "nl": "Liam is either an animal that can walk and enjoys water, or is neither an animal that can walk nor enjoys water.", "fol": "((AbleToWalk(Liam) & LovesWater(Liam)) | (-AbleToWalk(Liam) & -LovesWater(Liam)))", "prediction": ["all x.(Liam(x) -> ((Animal(x) & CanWalk(x) & EnjoysWater(x)) | -Animal(x) & -CanWalk(x) & -EnjoysWater(x))))", "(all x.(Liam(x) -> (CanWalk(x) & EnjoysWater(x)) | (-CanWalk(x) & -EnjoysWater(x))))", "(exists x.(Liam(x) & (CanWalk(x) & EnjoysWater(x)) | -CanWalk(x) & -EnjoysWater(x)))", "all x.(Liam(x) -> ((Animal(x) & Walks(x) & EnjoysWater(x)) | -Animal(x) & Walks(x) & -EnjoysWater(x)))", "((Animal(lam) & CanWalk(lam) & EnjoysWater(lam)) | (-CanWalk(lam) & -EnjoysWater(lam))))", "exists x.(Lim(x) & ((Animal(x) & CanWalk(x) & EnjoysWater(x)) | -CanWalk(x) & -EnjoysWater(x))))", "(all x.(Liam(x) -> (CanWalk(x) & EnjoysWater(x)) | -CanWalk(x) & -EnjoysWater(x)))", "all x.(Liam(x) -> ((Animal(x) & CanWalk(x) & EnjoysWater(x)) | (-Animal(x) & CanWalk(x) & EnjoysWater(x))))", "all x.(Liam(x) -> ((Animal(x) & Walks(x) & EnjoysWater(x)) | (-Animal(x) & Walks(x) & EnjoysWater(x))))", "all x y.((Animal(x) & Animal(y) & CanWalk(x) & EnjoysWater(x) & -CanWalk(y) & -EnjoysWater(y)) -> Liam(x))", "(all x.(Liam(x) -> (CanWalk(x) & EnjoysWater(x)) | (-CanWalk(x) | EnjoysWater(x)))))", "all x.(Liam(x) -> ((Animal(x) & Walks(x) & EnjoysWater(x)) | (-Animal(x) & Walks(x) & EnjoysWater(x))))", "all x.(Liam(x) -> ((Animal(x) & Walk(x) & EnjoysWater(x)) | -Animal(x) & Walk(x) & EnjoysWater(x)))", "all x.(Liam(x) -> ((Animal(x) & CanWalk(x) & EnjoysWater(x)) | (-Animal(x) & CanWalk(x) & EnjoysWater(x))))", "(all x.(Liam(x) -> (CanWalk(x) | EnjoysWater(x))))", "exists x.(Liam(x) & ((CanWalk(x) & EnjoysWater(x)) | -CanWalk(x) & -EnjoysWater(x))))"]}
{"id": "folio_train_317", "nl": "George enjoys basking in the sun.", "fol": "LovesBaskingInSun(George)", "prediction": ["all x.(George(x) -> EnjoysBreakingInSun(x))", "all x.((George(x) & EnjoysBakingInSun(x)) -> EnjoysBakingInSun(x))", "(EnjoysBreakingInSun(George))", "George enjoys basking in the sun.", "all x y.((George(x) & Sun(y)) -> EnjoysBakingIn(x,y))", "all x.(Greg(x) -> EnjoysBreakingInSun(x))", "-EnjoysBreakingInSun(George)", "all x.(George(x) -> EnjoysBreakingInSun(x))", "(EnjoysBreakingInSun(George) -> EnjoysBakingInSun(George))", "George enjoys basking in the sun.", "all x.((George(x) & EnjoysBreakingInSun(x)) -> EnjoysBakingInSun(x))", "all x y.((George(x) & Sun(y)) -> EnjoysBakingIn(x,y))", "(EnjoysBakingInSun(George))", "George enjoys basking in the sun.", "(EnjoysBreakingInSun(George,Sun))", "George enjoys basking intheSun."]}
{"id": "folio_train_318", "nl": "Liam enjoys basking in the sun and splashing water around.", "fol": "(LovesBaskingInSun(Liam) & CreatesSplash(Liam))", "prediction": ["all x.(Liam(x) -> (EnjoysBreakingInSun(x) & EnjoysSplashingWater(x)))", "(EnjoysBreakingInSun(Liam) & EnjoysSplashingWater(Liam))", "Liam enjoys basking in the sun and splashing water around.", "all x y.((Liam(x) & Sun(y)) -> (EnjoysBreakingIn(x,y) & EnjoysSplashingWater(x,y)))", "-EnjoysBreakingInSunAndSplashingWaterAround(Liam)", "all x.((Liam(x) & Sun(x)) -> (EnjoysBreakingIn(x,Sun) & SplashingWater(x)))", "all x.(Liam(x) -> (EnjoysBreakingInSun(x) & SplashingWater(x)))", "(EnjoysBreakingInSun(Liam) & SplashingWater(Liam))", "Liam enjoys basking inthesunandsplashingwater(Liam)", "Liam enjoys basking in the sun and splashing water around.", "(EnjoysBreakingInSun(Liam) & EnjoysSplashingWater(Liam))", "all x.(Liam(x) -> (EnjoysBreakingInSun(x) & EnjoysSplashingWater(x)))", "Liam enjoys basking intheSun and splashingwaterAround.", "(EnjoysBakingInSun(Liam) & SplashingWater(Liam))", "Liam enjoys basking in the sun and splashingwater around.", "all x.(Liam(x) -> (EnjoysBakingInSun(x) & EnjoysSplashingWater(x)))"]}
{"id": "folio_train_319", "nl": "Liam neither enjoys basking in the sun nor splashing water around.", "fol": "(-LovesBaskingInSun(Liam) & -CreatesSplash(Liam))", "prediction": ["-(EnjoysBreakingInSun(Liam) | EnjoysSplashingWater(Liam)))", "all x.(Liam(x) -> (-EnjoysBreakingInSun(x) & -EnjoysSplashingWater(x)))", "(-(EnjoysBreakingInSun(Liam) & -EnjoysSplashingWater(Liam)))", "Liam & -(EnjoysBreakingInSun(Liam) | EnjoysSplashingWater(Liam)))", "(-EnjoysBreakingInSun(Liam) & -EnjoysSplashingWater(Liam))", "(BakingInSun(Liam) | SplashingWater(Liam)))", "Liam ne(l) & ((BakesInSun(l) & -BakesWater(l)) | SplashesWater(l)))", "Neither enjoys basking intheSun,norSplashingWaterAround(Liam)", "-exists x.(Liam(x) & -(EnjoysBreakingInSun(x) | EnjoysSplashingWater(x)))", "((Liam(Liam) & -(BakesInSun(Liam) | SplashesWater(Liam))))", "-(EnjoysBaskingInSun(Liam) | EnjoysSplashingWater(Liam))", "all x.(Liam(x) -> (-EnjoysBreakingInSun(x) & -EnjoysSplashingWater(x)))", "Liam & -(EnjoysBreakingInSun(Liam) | SplashingWater(Liam)))", "-(EnjoysBakingInSun(Liam) | EnjoysSplashingWater(Liam)))", "(-(EnjoysBreakingInSun(Liam) & -EnjoysSplashingWater(Liam)))", "-(EnjoysBakingInSun(liam,sun) | EnjoysSplashingWater(liam,water)))"]}
{"id": "folio_train_320", "nl": "Cancer biology is finding genetic alterations that confer selective advantage to cancer cells. ", "fol": "FindGeneticAlterationsForCancerAdvantage(CancerBiology)", "prediction": ["all x.(CancerBiology(x) -> (FindsGeneticAlterations(x) & ConveysSelectiveAdvantage(x)))", "all x y.((CancerBiology(x) & GeneticAlterations(y)) -> (Finds(x,y) & ConveysSelectiveAdvantage(x,y)))", "all x y.((ClinicalBiology(x) & CancerCell(y)) -> (FindsGeneticAlterations(x,y) & ConveysSelectiveAdvantage(x,y)))", "all x.(CancerousBiology(x) -> (FindsGeneticAlterations(x) & ConveysSelectiveAdvantage(x)))", "all x y z.((CancerBiology(x) & GeneticAlterations(y) & CancerCell(z)) -> (Finds(x,y) & ConveysSelectiveAdvantage(x,z)))", "all x.(CancerBiology(x) -> (FindsGeneticAlterations(x) & ConferesSelectiveAdvantageToCancerCells(x)))", "all x y.((CancerBiology(x) & GeneticAlterations(y)) -> ConveysSelectiveAdvantage(x,y))", "all x y.((CancerBiology(x) & CancerCell(y)) -> (FindsGeneticAlterations(x,y) & ConveysSelectiveAdvantage(x,y)))", "all x.(CancerousBiology(x) -> (FindsGeneticAlterations(x) & ConferesSelectiveAdvantageToCancerCells(x)))", "(all x.(CancerBiology(x) -> FindsGeneticAlterations(x)))", "all x y.((CancerousBiology(x) & CancerCell(y)) -> (FindsGeneticAlterations(x,y) & ConveysSelectiveAdvantage(x,y)))", "all x y z.((CancerBiology(x) & GeneticAlterations(y) & CancerCell(z)) -> (Finds(x,y) & ConveysSelectiveAdvantage(x,z)))", "all x.(CancerBiology(x) -> (FindsGeneticAlternations(x) & ConveysSelectiveAdvantage(x)))", "all x.(ClinicalBiology(x) -> (FindsGeneticAlternations(x) & ConveysSelectiveAdvantage(x,cancerCells)))", "(all x.(CancerBiology(x) -> FindsGeneticAlternations(x)))", "all x.(CancerBiology(x) -> (FindsGeneticAlternations(x) & ConferesSelectiveAdvantageToCancerCells(x)))"]}
{"id": "folio_train_321", "nl": "Cancer researchers have frequently ranked the importance of substitutions to cancer growth by P value.", "fol": "all x.(PValueThreshold(x) -> RankImportanceOfSubstitutions(CancerResearchers,x,TheImportanceOfSubstitutionsToCancerGrowth))", "prediction": ["all x y.((CancerResearcher(x) & CancerGrowth(y)) -> RangingImportanceOfSubstitutionsByPValue(x,y))", "all x.((CancerResearcher(x) & Substitutions(x)) -> RangingImportanceByPValue(x))", "all x y z.((CancerResearcher(x) & Substitutions(y) & CancerGrowth(z)) -> RangingImportanceByPValue(x,y,z))", "all x.(CancerResearcher(x) -> (RanksImportanceOfSubstitutions(x) & ToCancerGrowth(x)))", "(all x.(CancerousResearcher(x) -> RangingImportanceOfSubstitutions(x,CancerousGrowth)))", "all x y.((CancerResearcher(x) & CancerGrowth(y)) -> RankedImportanceOfSubstitutions(x,y))", "all x y.((CancerResearcher(x) & CancerGrowth(y)) -> (RanksImportanceOfSubstitutions(x,y) & ByPValue(x,y)))", "(all x y.((CancerResearcher(x) & Substitution(y)) -> RangingImportanceByPValue(x,y)))", "(all x.(CancerResearcher(x) -> RangingImportanceOfSubstitutionsByPValue(x)))", "all x.((CancerResearcher(x) & Substitutions(x)) -> RankedImportanceByPValue(x))", "all x y z.((CancerResearcher(x) & Substitutions(y) & CancerGrowth(z)) -> RankedImportanceByPValue(x,y,z))", "all x.(CancerResearcher(x) -> (RanksImportanceOfSubstitutions(x) & CancerGrowth(x)))", "all x y z.((CancerResearcher(x) & Substitution(y) & CancerGrowth(z)) -> RangingImportanceByPValue(x,y,z))", "all x.(CancerResearcher(x) -> (RanksImportanceOfSubstitutions(x,CancerousGrowth) & ByPValue(x)))", "all x y.((CancerResearcher(x) & Substitution(y)) -> RangingImportanceByPValue(x,y))", "all x y.((CancerResearcher(x) & CancerGrowth(y)) -> RangsImportanceOfSubstitutionsByPValue(x,y))"]}
{"id": "folio_train_322", "nl": "P values are thresholds for belief, not metrics of effect. ", "fol": "all x.((PValueThreshold(x) -> BeliefThresholds(x)) & -EffectMetrics(x))", "prediction": ["all x.(PValue(x) -> (TreethForBelief(x) & -MetametricsOfEffect(x)))", "all x y.((PValue(x) & Threshold(y)) -> (Belief(x,y) & -MetametricOfEffect(x,y)))", "all x.(PValue(x) -> (ThresholdForBelief(x) & -MetameterOfEffect(x)))", "(all x.(PValue(x) -> (ThresholdForBelief(x) & -MetameterOfEffect(x))))", "all x.(PValue(x) -> (Treef(x) & -MetametricsOfEffect(x)))", "all x y.((PValue(x) & Threshold(y)) -> (Belief(x,y) & -MetametricOfEffect(x,y)))", "(all x.(PValue(x) -> Threshold(x)) & -MetameterOfEffect(x))", "all x.(PVehicle(x) -> (ThresholdForBelief(x) & -MetameterOfEffect(x)))", "all x y.((PValue(x) & Belief(y)) -> (Threshold(x,y) & -MetameterOfEffect(x)))", "(all x.(PValue(x) -> (ThresholdForBelief(x) & -MetameterOfEffect(x)))", "(All x.(P Value(x) -> (ThresholdForBelief(x) & -MetameterOfEffect(x)))", "all x.(PValue(x) -> (ThresholdForBelief(x) & -MetameterOfEffect(x)))", "(all x.(PValue(x) -> Sweeps(x)) & -MetametersOfEffect(x))", "all x.(PValue(x) -> (TreethForBelief(x) & -MethodsOfEffect(x)))", "(all x.(PValue(x) -> (TreethForBelief(x) & -MetametricsOfEffect(x))))", "all x.(PValue(x) -> (Threshold(x) & -MetameterOfEffect(x)))"]}
{"id": "folio_train_323", "nl": "Cancer researchers tend to use the cancer effect size to determine the relative importance of the genetic alterations that confer selective advantage to cancer cells.", "fol": "all x.((CancerResearcher(x) -> UsesEffectSize(x,CancerEffectSize)) & DeterminesRelativeImportance(x,GeneticAlterationsConferSelectiveAdvantageToCancerCells))", "prediction": ["all x y.((CancerResearcher(x) & CancerEffectSize(y)) -> (Uses(x,y) & DeterminesRelativeImportanceOfGeneticAlterations(x) & ConveysSelectiveAdvantage(x,y)))", "all x.(CancerResearcher(x) -> (UsesCancerEffectSize(x) & DeterminesRelativeImportanceOfGeneticAlterations(x) & ConveysSelectiveAdvantage(x)))", "all x y z.((CancerResearcher(x) & CancerEffectSize(y) & GeneticAlterations(z)) -> (UsesToDetermineImportance(x,y,z) & ConveysSelectiveAdvantage(z,x)))", "all x y.((CancerResearcher(x) & CancerEffectSize(y)) -> (UsesScannerSize(x,y) & DeterminesRelativeImportanceOfGeneticAlternations(x,y) & ConveysSelectiveAdvantage(x,y)))", "all x y z.((CancerResearcher(x) & CancerEffectSize(y) & GeneticAlternations(z)) -> (Uses(x,y) & DeterminesImportance(x,z) & ConveysSelectiveAdvantage(x,z)))", "(all x.(CancerResearcher(x) -> UsesCancerEffectSizeToDetermineRelativeImportanceOfGeneticAlterations(x)))", "all x y.((CancerResearcher(x) & CancerEffectSize(y)) -> UsesToDetermineRelativeImportanceOfGeneticAlternations(x,y))", "(all x y.((CancerResearcher(x) & CancerEffectSize(y)) -> UsesToDetermineRelativeImportanceOfGeneticAlternations(x,y)))", "all x.(CancerResearcher(x) -> (UsesCancerEffectSize(x) & DeterminesRelativeImportanceOfGeneticAlternations(x) & ConveysSelectiveAdvantageToCancerCells(x)))", "all x.(CancerResearcher(x) -> (TendsToUseCancerEffectSize(x) & DeterminesRelativeImportanceOfGeneticAlternations(x) & ConveysSelectiveAdvantageToCancerCells(x)))", "all x.(CancerResearcher(x) -> (UsesCancerEffectSize(x) & DeterminesImportanceOfGeneticAlternations(x) & ConveysSelectiveAdvantage(x)))", "all x y z.((CancerResearcher(x) & CancerEffectSize(y) & GeneticAlterations(z) & ConveysSelectiveAdvantage(z,x)) -> UsesToDetermineImportance(x,y,z))", "all x y.((CancerResearcher(x) & CancerEffectSize(y) & DeterminesRelativeImportanceOfGeneticAlterations(x,y)) -> UsesToConveySelectiveAdvantage(x,y))", "all x.(CancerResearcher(x) -> (UsesCancerousEffectSize(x) & DeterminesRelativeImportanceOfGeneticAlterations(x) & ConveysSelectiveAdvantage(x)))", "all x y z.((CancerResearcher(x) & CancerEffectSize(y) & GeneticAlternations(z)) -> (Uses(x,y) & DeterminesRelativeImportance(x,z) & ConveysSelectiveAdvantage(x,z)))", "all x y.((CancerResearcher(x) & CancerEffectSize(y) & DeterminesRelativeImportanceOfGeneticAlternations(x,y)) -> UsesToConveySelectiveAdvantage(x,y))"]}
{"id": "folio_train_324", "nl": "P value represents the selection intensity for somatic variants in cancer cell lineages.", "fol": "all x.(PValueThreshold(x) -> RepresentsSelectionIntensityForSomaticVariantsInCancerCellLineages(x))", "prediction": ["all x.(PValue(x) -> (RepresentsSelectionIntensity(x) & SomaticVariantsInCancerCellLineages(x)))", "all x y.((PValue(x) & SomaticVariants(y) & CancerCellLineages(z)) -> RepresentsIntensity(x,y,z))", "all x.(PValue(x) -> RepresentsSelectionIntensityForSomaticVariants(x))", "(RepresentsSelectionIntensity(PValue) & SomaticVariantsInCancerCellLineages(PValue))", "all x y z.((PValue(x) & SomaticVariants(y) & CancerCellLineage(z)) -> RepresentsIntensity(x,y,z))", "all x.((PValue(x) & SomaticVariants(x) & CancerCellLineages(x)) -> RepresentsIntensity(x,selection,selection,selection))", "all x y.((PValue(x) & SomaticVariants(y)) -> RepresentsIntensity(x,y))", "(SelectionIntensity(PValue) & SomaticVariants(P) & CancerCellLineages(P))", "all x.(PValue(x) -> (RepresentsSelectionIntensity(x) & SomaticVariants(x) & CancerCellLineages(x)))", "(RepresentsSelectionIntensity(PValue) & ForSomaticVariantsInCancerCellLineages(PValue))", "(RepresentsSelectionIntensityForSomaticVariants(P value) & InCancerCellLineages(P value))", "all x.((PValue(x) & SelectionIntensity(x) & SomaticVariantsInCancerCellLineages(x)) -> RepresentsIntensity(x,y))", "all x y z.((PValue(x) & SomaticVariants(y) & CancerCellLineages(z) & RepresentsIntensity(x,y,z)) -> SelectionIntensity(x,y,z))", "all x y.((PValue(x) & SomaticVariants(y) & CancerCellLineages(x,y)) -> RepresentsIntensity(x,y))", "all x.(PValue(x) -> RepresentsSelectionIntensity(x))", "all x.(PValue(x) -> (RepresentsSelectionIntensity(x,somaticVariants) & InCancerCellLineages(x)))"]}
{"id": "folio_train_325", "nl": "Cancer effect size is a metric that is preferred by the majority of cancer researchers.", "fol": "exists x.(CancerEffectSize(x) & PreferredByMajority(CancerResearchers,x))", "prediction": ["all x.(CancerEffectSize(x) -> (PreferredByMajorityOfCancerResearchers(x) & PreferableByMajority(x)))", "all x.(CancerousEffectSize(x) -> (PreferredByMajorityOfCancerResearchers(x)))", "all x y.((CancerEffectSize(x) & CancerResearcher(y)) -> (PreferredMetric(x,y) & PreferableByMajority(x,y)))", "all x.((CancerousEffectSize(x) & MajorityOfCancerResearchers(x)) -> PreferredMetric(x))", "all x y.((CancerousEffectSize(x) & CancerResearcher(y)) -> (PreferredMetric(x,y) & PreferableByMajority(x,y)))", "(MajorityOfCancerResearchersPreferredMeter(cancereffectSize)", "all x.(CancerEffectSize(x) -> (PreferredByMajority(x) & CancerResearcher(x)))", "all x.(CancerousEffectSize(x) -> (PreferredByMajority(x) & CancerResearcher(x)))", "all x y z.((CancerEffectSize(x) & CancerResearcher(y) & Metric(z)) -> (PreferredByMajority(y,z) & PreferableByMajority(y,z)))", "(MetricMetric(cancer) & PreferredByMajority(cancerResearchers))", "all x y.((CancerEffectSize(x) & CancerResearcher(y)) -> (PreferredMetric(x,y) & MajorityPreferredMetric(y)))", "all x.(CancerEffectSize(x) -> (Metric(x) & PreferredByMajorityOfCancerResearchers(x)))", "all x.(CancerousEffectSize(x) -> (PreferredByMajorityOfCancerResearchers(x) & PreferableByMajority(x)))", "all x.((CancerEffectSize(x) & MajorityOfCancerResearchers(x)) -> PreferredMetric(x))", "exists x.(CancerEffectSize(x) & PreferredByMajorityOfCancerResearchers(x))", "all x y.((CancerEffectSize(x) & CancerResearcher(y)) -> PreferredMetric(x,y))"]}
{"id": "folio_train_326", "nl": "P value doesn't represent metrics of effect.", "fol": "all x.(PValueThreshold(x) -> -EffectMetrics(x))", "prediction": ["all x.(PValue(x) -> -RepresentsMetadataOfEffect(x))", "(-RepresentsMetadataOfEffect(PValue))", "all x.((PValue(x) & -RepresentsMetadataOfEffect(x)) -> -RepresentsMetadataOfEffect(x))", "(-RepresentsEffectMetadata(PValue))", "all x y.((PValue(x) & MetricsOfEffect(y)) -> -Represents(x,y))", "(-RepresentsMeasuresOfEffect(PValue))", "all x.(PValue(x) -> -RepresentsMetadataOfEffect(x))", "all x.(PValue(x) -> -RepresentsEffectMetadata(x))", "all x.((PValue(x) & -RepresentsEffectMetadata(x)) -> -RepresentsEffectMetadata(x))", "(-RepresentsMetadataOfEffect(PValue))", "-representsMeasurementsOfEffect(PValue)", "(-RepresentsEffectMetrics(PValue))", "all x.(PValue(x) -> -RepresentsMetadataOfEffect(x))", "all x.(PValue(x) -> -RepresentsEffectMetadata(x))", "-representsMeasurementsOfEffect(PValue)", "all x.(PValue(x) -> -RepresentsMetadataOfEffect(x))"]}
{"id": "folio_train_327", "nl": "All dispensable things are environment-friendly. ", "fol": "all x.(IsDispensable(x) -> IsEnvironmentFriendly(x))", "prediction": ["all x.(DispensableThing(x) -> EnvironmentFriendly(x))", "all x.(Dispensable(x) -> EnvironmentFriendly(x))", "all x.((DispensableThing(x) & EnvironmentFriendly(x)) -> EnvironmentFriendly(x))", "all x y.((DispensableThing(x) & EnvironmentFriendly(y)) -> EnvironmentFriendly(x))", "all x.(DispensableThing(x) -> EnvironmentFriendly(x))", "all x.((Dispensable(x) & EnvironmentFriendly(x)) -> Dispensable(x))", "all x.(Dispensable(x) -> EnvironmentFriendly(x))", "(all x.(Dispensable(x) -> EnvironmentFriendly(x))", "all x.(DispensableThing(x) -> EnvironmentFriendly(x))", "all x.((DispensableThing(x) & EnvironmentFriendly(x)) -> EnvironmentFriendly(x))", "(all x.(DispensableThing(x) -> EnvironmentFriendly(x)))", "all x y.((Dispensable(x) & Good(y)) -> EnvironmentFriendly(x))", "all x.(Dispensable(x) -> EnvironmentFriendly(x))", "all x.(DispensableThing(x) -> EnvironmentFriendly(x))", "all x.(Dispensable(x) -> EnvironmentFriendly(x))", "all x.(DispensableThing(x) -> EnvironmentFriendly(x))"]}
{"id": "folio_train_328", "nl": "All woodware is dispensable.", "fol": "all x.(IsWoodware(x) -> IsDispensable(x))", "prediction": ["all x.(Woodware(x) -> Dispensable(x))", "all x.(Woodware(x) -> Dispensable(x))", "all x y.((Woodware(x) & Woodware(y)) -> Dispensable(x))", "(all x.(Woodware(x) -> Dispensable(x)))", "all x.(Woodware(x) -> Dispensable(x))", "all x y.((Woodware(x) & Woodware(y)) -> Dispensable(x))", "(all x.(Woodware(x) -> Dispensable(x))", "all x.(Woodware(x) -> Dispensable(x))", "all x.(Woodenware(x) -> Dispensable(x))", "all x.(Woodware(x) -> Dispensable(x))", "all x.(Woodenware(x) -> Dispensable(x))", "all x.(Woodware(x) -> Dispensable(x))", "all x.(Woodenware(x) -> Dispensable(x))", "all x.(Woodware(x) -> Dispensable(x))", "all x.(Woodenware(x) -> Dispensable(x))", "All x.(Woodenware(x) -> Dispensable(x))"]}
{"id": "folio_train_329", "nl": "All paper is woodware. ", "fol": "all x.(IsPaper(x) -> IsWoodware(x))", "prediction": ["all x.(Paper(x) -> Woodware(x))", "all x.(Paper(x) -> Woodware(x))", "(AllPaperWooden(Paper) -> Woodware(Paper))", "all x.(Paper(x) -> Woodware(x))", "all x y.((Paper(x) & Woodware(y)) -> Woodware(x))", "(all x.(Paper(x) -> Woodware(x))", "all x.(Paper(x) -> Woodware(x))", "all x.(Plastic(x) -> Woodware(x))", "all x.(Paper(x) -> Woodware(x))", "all x.(Paper(x) -> Woodware(x))", "all x.(Paper(x) -> Woodware(x))", "All x.(Plastic(x) -> Woodware(x))", "all x.(Paper(x) -> Woodware(x))", "All x.(Paper(x) -> Woodware(x))", "all x.(Paper(x) -> Woodware(x))", "all x.(Paper(x) -> Woodware(x))"]}
{"id": "folio_train_330", "nl": "No good things are bad. ", "fol": "all x.(IsGood(x) -> -IsBad(x))", "prediction": ["-exists x.(GoodThing(x) & BadThing(x))", "all x.(GoodThing(x) -> BadThing(x))", "-exists x.(GoodThing(x) & BadThing(x))", "all x.(Good(x) -> Bad(x))", "-exists x.(Good(x) & Bad(x))", "all x.(GoodThing(x) -> Bad(x))", "all x.((GoodThing(x) & BadThing(x)) -> -(GoodThing(x) & BadThing(x)))", "(exists x.(GoodThing(x) & BadThing(x)))", "-all x.(GoodThing(x) -> Bad(x))", "all x.(GoodThing(x) -> BadThing(x))", "-exists x.(GoodThing(x) & BadThing(x))", "-exists x.(Good(x) & Bad(x))", "all x.(GoodThing(x) -> Bad(x))", "-exists x.(GoodThing(x) & BadThing(x))", "-exists x.(Good(x) & Bad(x))", "-exists x.(GoodThing(x) & BadThing(x))"]}
{"id": "folio_train_331", "nl": "All environment-friendly things are good.", "fol": "all x.(IsEnvironmentFriendly(x) -> IsGood(x))", "prediction": ["all x.(EnvironmentFriendly(x) -> Good(x))", "all x.(EnvironmentFriendlyThing(x) -> Good(x))", "all x.(EnvironmentFriendly(x) -> Good(x))", "all x y.((EnvironmentFriendly(x) & Environment(y)) -> Good(x))", "all x.(EnvironmentFriendlyThing(x) -> Good(x))", "(all x.(EnvironmentFriendly(x) -> Good(x))", "all x.((EnvironmentFriendly(x) & Good(x)) -> EnvironmentFriendly(x))", "all x y.((EnvironmentFriendly(x) & Environment(y)) -> Good(x))", "all x.(EnvironmentFriendly(x) -> Good(x))", "all x.(EnvironmentFriendlyThing(x) -> Good(x))", "all x.(EnvironmentFriendly(x) -> Good(x))", "all x.(EnvironmentFriendlyThing(x) -> Good(x))", "all x.(EnvironmentFriendly(x) -> Good(x))", "all x.(EnvironmentFriendlyThing(x) -> Good(x))", "all x.(EnvironmentFriendly(x) -> Good(x))", "All x.(EnvironmentFriendlyThing(x) -> Good(x))"]}
{"id": "folio_train_332", "nl": "A worksheet is either paper or is environment-friendly.", "fol": "((IsPaper(Worksheet) & -IsEnvironmentFriendly(Worksheet)) | (-IsPaper(Worksheet) & IsEnvironmentFriendly(Worksheet)))", "prediction": ["all x.(Worksheet(x) -> (Paper(x) | EnvironmentFriendly(x)))", "all x.(Worksheet(x) -> (Paper(x) | EnvironmentFriendly(x)))", "all x.(Worksheet(x) -> ((Paper(x) | EnvironmentFriendly(x))))", "all x y.((Worksheet(x) & Paper(y)) | EnvironmentFriendly(x,y)) -> Paper(x))", "all x.(Worksheet(x) -> (Paper(x) | EnvironmentFriendly(x)))", "all x.(Worksheet(x) -> ((Paper(x) | EnvironmentFriendly(x))))", "all x y.(Worksheet(x) -> (Paper(x) | EnvironmentFriendly(x,y)))", "all x.((Worksheet(x) & (Paper(x) | EnvironmentFriendly(x))) -> Paper(x))", "all x.((Worksheet(x) & (Paper(x) | EnvironmentFriendly(x))) -> (Paper(x) | EnvironmentFriendly(x)))", "exists x.(Worksheet(x) & (Paper(x) | EnvironmentFriendly(x)))", "all x.(Worksheet(x) -> ((Paper(x) | EnvironmentFriendly(x))))", "exists x.(Worksheet(x) & (Paper(x) | EnvironmentFriendly(x)))", "exists x.(Worksheet(x) & (Paper(x) | EnvironmentFriendly(x)))", "exists x.(Worksheet(x) & (Paper(x) | EnvironmentFriendly(x)))", "exists x.(Worksheet(x) & (Paper(x) | EnvironmentFriendly(x)))", "exists x.(Worksheet(x) & (Paper(x) | EnvironmentFriendly(x)))"]}
{"id": "folio_train_333", "nl": "A worksheet is dispensable.", "fol": "IsDispensable(Worksheet)", "prediction": ["all x.(Worksheet(x) -> Dispensable(x))", "all x.(Worksheet(x) -> Dispensable(x))", "all x.(Worksheet(x) -> Dispensable(x))", "all x y.((Worksheet(x) & Worksheet(y)) -> Dispensable(x))", "all x.((Worksheet(x) & Dispensable(x)) -> Dispensable(x))", "all x.exists y.(Worksheet(x) & Dispensable(y))", "all x.(Worksheet(x) -> Dispensable(x))", "all x y.((Worksheet(x) & Worksheet(y)) -> Dispensable(x))", "all x.(Worksheet(x) -> Dispensable(x))", "all x.(Worksheet(x) -> Dispensable(x))", "all x.(Worksheet(x) -> Dispensable(x))", "exists x.(Worksheet(x) & Dispensable(x))", "exists x.(Worksheet(x) & Dispensable(x))", "exists x.(Worksheet(x) & Dispensable(x))", "exists x.(Worksheet(x) & Dispensable(x))", "exists x.(Workflow(x) & Dispensable(x))"]}
{"id": "folio_train_334", "nl": "A worksheet is not dispensable.", "fol": "-IsDispensable(Worksheet)", "prediction": ["all x.(Worksheet(x) -> -Dispensable(x))", "all x.(Worksheet(x) -> -Dispensable(x))", "all x.((Worksheet(x) & -Dispensable(x)) -> -Dispensable(x))", "all x y.((Worksheet(x) & Worksheet(y) & -Dispensable(x)) -> -Dispensable(y))", "all x.(Worksheet(x) -> -Dispensable(x))", "all x y.((Worksheet(x) & Worksheet(y) & Dispensable(x)) -> -Dispensable(x))", "all x.((Worksheet(x) & -Dispensable(x)) -> -Dispensable(x))", "all x.(Worksheet(x) -> -Dispensable(x))", "all x.((Worksheet(x) & -Dispensable(x)) -> -Dispensable(x))", "all x.(Worksheet(x) -> -Dispensable(x))", "all x.(Worksheet(x) -> -Dispensable(x))", "all x.(Worksheet(x) -> -Dispensable(x))", "exists x.(Worksheet(x) & -Dispensable(x))", "exists x.(Worksheet(x) & -Dispensable(x))", "exists x.(Worksheet(x) & -dispenseable(x))", "exists x.(Worksheet(x) & -Dispensable(x))"]}
{"id": "folio_train_335", "nl": "A worksheet is bad.", "fol": "IsBad(Worksheet)", "prediction": ["all x.(Worksheet(x) -> Bad(x))", "all x.(Worksheet(x) -> Bad(x))", "all x.((Worksheet(x) & Bad(x)) -> Bad(x))", "all x y.((Worksheet(x) & Worksheet(y)) -> Bad(x))", "all x.(Worksheet(x) -> Bad(x))", "all x.((Worksheet(x) & Bad(x)) -> Bad(x))", "all x y.((Worksheet(x) & Worksheet(y)) -> Bad(x))", "all x.(Worksheet(x) -> Bad(x))", "all x.((Worksheet(x) & Bad(x)) -> Bad(x))", "all x.(Worksheet(x) -> Bad(x))", "all x y.((Worksheet(x) & Worksheet(y)) -> Bad(x))", "exists x.(Worksheet(x) & Bad(x))", "exists x.(Worksheet(x) & Bad(x))", "exists x.(Worksheet(x) & Bad(x))", "exists x.(Worksheet(x) & Bad(x))", "exists x.(Worksheet(x) & Bad(x))"]}
{"id": "folio_train_336", "nl": "A worksheet is not bad.", "fol": "-IsBad(Worksheet)", "prediction": ["all x.(Worksheet(x) -> -Bad(x))", "all x.(Worksheet(x) -> -Bad(x))", "all x.((Worksheet(x) & -Bad(x)) -> -Bad(x))", "all x.(Worksheet(x) -> -Bad(x))", "all x y.((Worksheet(x) & Worksheet(y) & -Bad(x)) -> -Bad(y))", "all x.((Worksheet(x) & -Bad(x)) -> -Bad(x))", "all x.(Worksheet(x) -> -Bad(x))", "all x y.((Worksheet(x) & Worksheet(y) & Bad(x)) -> -Bad(x))", "all x.((Worksheet(x) & -Bad(x)) -> -Bad(x))", "all x.(Worksheet(x) -> -Bad(x))", "exists x.(Worksheet(x) & -Bad(x))", "exists x.(Worksheet(x) & -Bad(x))", "exists x.(Worksheet(x) & -Bad(x))", "exists x.(Worksheet(x) & -Bad(x))", "exists x.(Worksheet(x) & -Bad(x))", "exists x.(Worksheet(x) & -Bad(x))"]}
{"id": "folio_train_337", "nl": "No reptile has fur.", "fol": "all x.(IsReptile(x) -> -HasFur(x))", "prediction": ["-exists x.(Reptile(x) & HasFur(x))", "all x.(Reptile(x) -> -HasFur(x))", "-exists x.(Reptile(x) & HasFur(x))", "KeinReptileHasFur(x)", "(exists x.(Reptile(x) & Fur(x)))", "all x.(Reptile(x) -> -HasFur(x))", "-exists x.(Reptile(x) & HasFur(x))", "-exists x.(Reptile(x) & Fur(x))", "(exists x.(Reptile(x) & HasFur(x))", "all x.(Reptile(x) -> -HasFur(x))", "all x.(Reptile(x) -> NoFur(x))", "-exists x.(Reptile(x) & HasFur(x))", "-exists x.(Reptile(x) & Fur(x))", "-exists x.(Reptile(x) & HasFur(x))", "-exists x.(Reptile(x) & Fur(x))", "-exists x.(Reptile(x) & HasFur(x))"]}
{"id": "folio_train_338", "nl": "All snakes are reptiles.", "fol": "all x.(IsSnake(x) -> IsReptile(x))", "prediction": ["all x.(Snake(x) -> Reptile(x))", "all x.(Snake(x) -> Reptile(x))", "(all x.(Snake(x) -> Reptile(x)))", "all x y.((Snake(x) & Reptile(y)) -> Reptile(x))", "all x.(Snake(x) -> Reptile(x))", "(all x.(Snake(x) -> Reptile(x))", "all x.(Snake(x) -> Reptile(x))", "all x.(Snake(x) -> Reptile(x))", "all x.(Snake(x) -> Reptile(x))", "all x.(Snake(x) -> Reptile(x))", "all x.(Snake(x) -> Reptile(x))", "all x.(Snake(x) -> Reptile(x))", "all x.(Snake(x) -> Reptile(x))", "all x.(Snake(x) -> Reptile(x))", "all x.(Snake(x) -> Reptile(x))", "all x.(Snake(x) -> Reptile(x))"]}
{"id": "folio_train_339", "nl": "Some snake has fur.", "fol": "exists x.(IsSnake(x) & HasFur(x))", "prediction": ["exists x.(Snake(x) & HasFur(x))", "exists x.(Snake(x) & HasFur(x))", "exists x.(Snake(x) & HasFur(x))", "exists x.(Snake(x) & HasFur(x))", "exists x.(Snake(x) & HasFur(x))", "exists x y.(Snake(x) & Fur(y) & Has(x,y))", "exists x.(Snake(x) & HasFur(x))", "exists x y.(Snake(x) & Fur(y) & Has(x,y))", "exists x.(Snake(x) & HasFur(x))", "exists x.(Snake(x) & HasFur(x))", "exists x.(Snake(x) & HasFur(x))", "exists x.(Snake(x) & Fur(x))", "exists x.(Snake(x) & HasFur(x))", "exists x.(Snake(x) & Fur(x))", "exists x.(Snake(x) & HasFur(x))", "exists x.(Snake(x) & HasFur(x))"]}
{"id": "folio_train_340", "nl": "All buildings in New Haven are low. ", "fol": "all x.(IsLocatedIn(Newhaven,x) -> -IsHighBuilding(x))", "prediction": ["all x.(Building(x) -> Low(x))", "all x.((Building(x) & NewHunt(x)) -> Low(x))", "all x.(NewHavenBuilding(x) -> Low(x))", "all x y.((Building(x) & NewHunt(y)) -> Low(x,y))", "all x.(Building(x) -> Low(x))", "all x.((Building(x) & NewHunt(x)) -> Low(x))", "(Low(Building) & NewHunt(Building))", "all x.(NewHunt(x) -> LowBuilding(x))", "all x y.((Building(x) & NewHunt(y)) -> Low(x,y))", "all x.(Building(x) -> Low(x))", "all x y.((Building(x) & NewHunt(y)) -> Low(x))", "all x.((Building(x) & NewHunt(x)) -> Low(x))", "All x.(NewHavenBuilding(x) -> Low(x))", "all x y.((Building(x) & NewHaven(y)) -> Low(y))", "All x.(Building(x) -> Low(x))", "All x.(Building(x) -> Low(x))"]}
{"id": "folio_train_341", "nl": "All buildings managed by the Yale Housing are located in New Haven. ", "fol": "all x.(ManagedByYaleHousing(x) -> IsLocatedIn(Newhaven,x))", "prediction": ["all x.((Building(x) & ManagedByYaleHousing(x)) -> NewHanover(x))", "all x y.((Building(x) & YaleHousing(y)) -> LocatedInNewHanover(x,y))", "all x.((Building(x) & ManagedByYaleHousing(x)) -> NewHunt(x))", "all x y z.((Building(x) & YaleHousing(y) & NewHanover(z)) -> ManagedBy(x,y,z))", "all x y.((Building(x) & YaleHousing(y)) -> LocatedInNewHanover(x,y))", "all x.((Building(x) & ManagedByYaleHousing(x)) -> NewHaven(x))", "all x.((Building(x) & ManagedByY YaleHousing(x)) -> NewHanover(x))", "all x y.((Building(x) & ManagedByYaleHousing(x)) -> NewHanover(y))", "all x.(Building(x) -> ManagedByYaleHousing(x))", "All x.(BuildingsManagedByYaleHousing(x) -> NewHanover(x))", "all x y.((Building(x) & YaleHousing(y)) -> LocatedInNewHaven(x,y))", "all x.((Building(x) & ManagedByYaleHousing(x)) -> LocatedInNewHanover(x))", "All x.(Building(x) -> ManagedByYaleHousing(x))", "all x y.((Building(x) & YaleHousing(y)) -> LocatedIn(x,y))", "all x.((Building(x) & ManagedByY YaleHousing(x)) -> NewHunt(x))", "(all x.(Building(x) -> ManagedByYaleHousing(x)) & NewHunt(x))"]}
{"id": "folio_train_342", "nl": "All buildings in Manhattans are high. ", "fol": "all x.(IsLocatedIn(Manhattans,x) -> IsHighBuilding(x))", "prediction": ["all x.((Building(x) & InMetropolitan(x)) -> High(x))", "all x.((Building(x) & InMidtown(x)) -> High(x))", "all x.((Building(x) & High(x)) -> Manhattan(x))", "all x y.((Building(x) & Manhattan(y)) -> High(x,y))", "all x.(Building(x) -> High(x))", "all x.(MetropolitanBuilding(x) -> High(x))", "(all x.(MetropolitanBuilding(x) -> High(x)))", "all x y.((Building(x) & Manhattan(y)) -> High(x,y))", "all x.((Building(x) & InMetropolitan(x)) -> High(x))", "all x.((Building(x) & Manhattan(x)) -> High(x))", "all x y.((Building(x) & Manhattan(y)) -> High(x,y))", "all x.(Building(x) -> High(x))", "(all x.(Building(x) -> High(x)))", "all x.((Building(x) & High(x)) -> Manhattan(x))", "all x y.((Building(x) & Manhattan(y)) -> High(x,y))", "All x.(Building(x) -> High(x))"]}
{"id": "folio_train_343", "nl": "All buildings owned by Bloomberg are located in Manhattans. ", "fol": "all x.(OwnedByBloomberg(x) -> IsLocatedIn(Manhattans,x))", "prediction": ["all x.((Building(x) & OwnedByBanana(x)) -> LocatedInMidtown(x))", "all x y.((Building(x) & Bloomberg(y)) -> LocatedIn(x,y))", "all x.(BananasBuilding(x) -> LocatedInMiamis(x))", "all x.((Building(x) & OwnedByBanana(x)) -> LocatedInMiamis(x))", "all x y.((Building(x) & OwnedByBanana(x,y)) -> LocatedInMidtown(y))", "(all x.(BloombergBuilding(x) -> LocatedInMiamis(x)))", "all x.(Building(x) -> OwnedByBanana(x))", "all x.((Building(x) & OwnedByBanana(x)) -> Manhattan(x))", "all x.((Building(x) & OwnedByBurnaro(x)) -> LocatedInMidtowns(x))", "all x y.((Building(x) & Bloomberg(y)) -> LocatedIn(x,y))", "all x y.((Building(x) & OwnedByBanana(x,y)) -> Manhattan(y))", "(all x.(Building(x) & OwnedByBilliams(x)) -> LocatedInMiamis(x))", "all x.(BurnHouse(x) -> LocatedInMiamis(x))", "All x.(Building(x) & OwnedByBananas(x) -> LocatedInMiamis(x))", "all x.(Building(x) -> OwnedByBanana(x))", "all x y.((Building(x) & Bloomberg(y)) -> LocatedIn(x,y))"]}
{"id": "folio_train_344", "nl": "All buildings with the Bloomberg logo are owned by Bloomberg. ", "fol": "all x.(HasBloombergLogo(x) -> OwnedByBloomberg(x))", "prediction": ["all x.((Building(x) & BloombergLogo(x)) -> OwnedByBananas(x))", "all x.((Building(x) & HasBurnaroLogo(x)) -> OwnedByBurnaro(x))", "all x y.((Building(x) & BloombergLogo(y)) -> OwnedByBananas(x,y))", "all x.((Building(x) & BloombergLogo(x)) -> OwnedByBird(x))", "(all x.(BloombergBuilding(x) & BloombergLogo(x)) -> OwnedByBloomberg(x))", "all x.(Burningham(x) -> OwnedByBurningham(x))", "all x y.((Building(x) & BloombergLogo(y)) -> OwnedBy(x,y))", "all x.((Building(x) & HasBurnaroLogo(x)) -> OwnedByBurnaro(x))", "all x.((Building(x) & BloombergLogo(x)) -> OwnedByBiz.(Biz.(Biz.) & OwnedBy(x,Biz.)))", "all x.(BloombergBlocker(x) -> OwnedByBloomberg(x))", "all x.((Building(x) & BloombergLogo(x)) -> OwnedByBanana.", "ALL NEXT & BloombergLogo(e) -> OwnedByBanana.", "all x y.((Building(x) & BloombergLogo(y)) -> OwnedByBiz.(x,y)))", "all x.((Building(x) & HasBananasLogo(x)) -> OwnedByBananas(x))", "all x y.((Building(x) & BloombergLogo(y)) -> OwnedBy(x,y))", "all x.((Building(x) & BloombergLogo(x)) -> OwnedBy(x,Bananas))"]}
{"id": "folio_train_345", "nl": "Tower A is managed by the Yale Housing.", "fol": "ManagedByYaleHousing(TowerA)", "prediction": ["all x.(TowerA(x) -> ManagedByYaleHousing(x))", "all x y.((TowerA(x) & YaleHousing(y)) -> ManagedBy(x,y))", "(ManagedByYaleHousing(TowerA) & YaleHousing(TowerA))", "All x.(TurbineA(x) -> ManagedByYaleHousing(x))", "All x.(TowerA(x) -> ManagedByYaleHousing(x))", "all x y z.((TowerA(x) & YaleHousing(y) & Housing(z)) -> ManagedBy(x,y,z))", "all x y.((TowerA(x) & YaleHousing(y)) -> ManagedBy(x,y))", "TowerA is managed by YaleHousing(twice)", "(ManagedByYaleHousing(TowerA) & YaleHousing(TowerA))", "TowerA is managed by YaleHousing.", "All x.(TurbineA(x) -> ManagedByYaleHousing(x))", "all x y.((TowerA(x) & YaleHousing(y)) -> ManagedBy(x,y))", "All x.(TowerA(x) -> ManagedByYaleHousing(x))", "(ManagedByYaleHousing(TowerA) & YaleHousing(TowerA))", "all x y.((TowerA(x) & YaleHousing(y)) -> ManagedBy(x,y))", "All x.(TowerA(x) -> ManagedByYaleHousing(x))"]}
{"id": "folio_train_346", "nl": "Tower B is with the Bloomberg logo.", "fol": "HasBloombergLogo(TowerB)", "prediction": ["all x.(TowerB(x) -> HasBananasLogo(x))", "All x.(TurbineB(x) -> HasBurnByBurnByBurnByBurnByBurnByBurnByBurnByBurnByBurnByBurnByBurnByBurnByBurnByBurnByBurnByBurnByBurnByBurnByBurnByBurnByBurnByBurnByB", "all x y.((TowerB(x) & BloombergLogo(y)) -> With(x,y))", "(BurningByBurning(TowerB) & WithBurningByBurning(TowerB))", "All x.(TowerB(x) -> BloombergLogo(x))", "(all x.(TowerB) -> BloombergLogo(x)))", "(WithBananasLogo(TowerB))", "all x y.((TowerB) & BloombergLogo(y)) -> With(x,y))", "TowerB isWithBananasLogo(TowerB)", "(BurnwallB) & HasBurnwallLogo(TowerB))", "Tower B is with BloombergLogo.", "all x.(TowerB(x) -> WithBananasLogo(x))", "TowerB isWithBananasLogo.", "All x.(TurbineB(x) -> WithBananasLogo(x))", "all x y.((TowerB(x) & BloombergLogo(y)) -> Has(x,y))", "All x.(TowerB(x) -> HasBurnsbyLogo(x))"]}
{"id": "folio_train_347", "nl": "Tower A is low.", "fol": "-IsHighBuilding(TowerA)", "prediction": ["All x.(TowerA(x) -> Low(x))", "All x.(TurbineA(x) -> Low(x))", "Low(TowerA)", "TowerA isLow(TurbineA)", "All x.(TowerA(x) -> Low(x))", "(LowTower(TowerA) -> Low(TowerA))", "(Low(TowerA) -> Low(TowerA))", "(LowTowerA(Tower))", "TowerA isLow(TurbineA)", "TowerA isLow(tower)", "all x.(TowerA(x) -> Low(x))", "All x.(TurbineA(x) -> Low(x))", "All x.(TurbineA(x) -> Low(x))", "all x.(TowerA(x) -> Low(x))", "All x.(TurmA(x) -> Low(x))", "all x.(TowerA(x) -> Low(x))"]}
{"id": "folio_train_348", "nl": "Tower B is not located in Manhattans.", "fol": "-IsLocatedIn(Manhattans,TowerB)", "prediction": ["all x.(TowerB(x) -> -LocatedInMennons(x))", "(-LocatedInMennons(TowerB))", "Tower B is not located in Manhattans.", "(-LocatedInMennons(TowerB))", "All x.(TurbineB(x) -> -LocatedInMennons(x))", "Tower B -LocatedInMennons(tower,y)", "-(TowerB(Tower) & Manhattan(Tower))", "all x.((TowerB) & -LocatedInMennons(x)) -> -LocatedInMennons(x))", "all x.(TowerB(x) -> -LocatedInMidtowns(x))", "TowerB is not locatedInMennons(torrorB)", "All x.(TurmB(x) -> -LocatedInMennons(x))", "all x.(TowerB(x) -> -LocatedInMennons(x))", "(-LocatedInMidtowns(TowerB))", "TowerB is located in Manhattans.", "-(TowerB(Turbine) & Manhattans(Tower))", "(-LocatedInMidtowns(TowerB))"]}
{"id": "folio_train_349", "nl": "Tower B is located in New Haven.", "fol": "IsLocatedIn(Newhaven,TowerB)", "prediction": ["TowerB is located in New Haven.", "All x.(TowerB(x) -> NewHaven(x))", "(LocatedInNewHaven(TowerB)", "(Location(TowerB) & NewHaven(TowerB))", "TowerB is located in New Haven.", "All x.(TowerB(x) -> NewHunt(x))", "all x.(TurbineB(x) -> NewHaven(x))", "(LocatedInNewHaven(TowerB)", "TowerB is located in New Haven.", "All x.(TowerB(x) -> LocatedInNewHaven(x))", "All x.(TowerB(x) -> NewHaven(x))", "TowerB is locatedInNewHaven(TowerB)", "all x.(TurbineB(x) -> NewHunt(x))", "Tower B is located in New Haven.", "TowerB is located in NewHann.", "Tower B is located in New Haven, CT."]}
{"id": "folio_train_350", "nl": "No cold-blooded animals are birds.", "fol": "all x.(IsColdBlooded(x) -> -IsBird(x))", "prediction": ["-exists x.(ColdBloodedAnimal(x) & Bird(x))", "all x.(ColdBloodedAnimal(x) -> -Bird(x))", "(exists x.(ColdBloodedAnimal(x) & -Bird(x)))", "-exists x.(ColdBloodedAnimal(x) & Bird(x))", "all x.(ColdBloodedAnimal(x) -> Bird(x))", "all x.((ColdBlooded(x) & -Bird(x)) -> Bird(x))", "-exists x.(ColdBlooded(x) & Bird(x))", "-(ColdBloodedAnimal(x) & Bird(x))", "(exists x.(ColdBloodedAnimal(x) & -Bird(x)))", "all x.(ColdBloodedAnimal(x) -> -Bird(x))", "all x.(ColdBlooded(x) -> Bird(x))", "-exists x.(ColdBloodedAnimal(x) & Bird(x))", "-exists x.(ColdBlooded(x) & Bird(x))", "-exists x.(ColdBloodedAnimal(x) & Bird(x))", "-exists x.(ColdBlooded(x) & Bird(x))", "-exists x.(ColdBloodedAnimal(x) & Bird(x))"]}
{"id": "folio_train_351", "nl": "All reptiles are cold-blooded.", "fol": "all x.(IsReptile(x) -> IsColdBlooded(x))", "prediction": ["all x.(Reptile(x) -> ColdBlooded(x))", "all x.(Reptile(x) -> ColdBlooded(x))", "all x y.((Reptile(x) & ColdBlooded(x)) -> ColdBlooded(x))", "all x.(Reptile(x) -> ColdBlooded(x))", "(all x.(Reptile(x) -> ColdBlooded(x)))", "all x.(Reptile(x) -> ColdBlooded(x))", "all x.(Riptile(x) -> ColdBlooded(x))", "(all x.(Reptile(x) -> ColdBlooded(x))", "all x.(Reptile(x) -> ColdBlooded(x))", "all x.(Reptile(x) -> ColdBlooded(x))", "all x.(Reptile(x) -> ColdBlooded(x))", "all x.(Reptile(x) -> ColdBlooded(x))", "all x.(Reptile(x) -> ColdBlooded(x))", "all x.(Reptile(x) -> ColdBlooded(x))", "all x.(Reptile(x) -> ColdBlooded(x))", "all x.(Rope(x) -> ColdBlooded(x))"]}
{"id": "folio_train_352", "nl": "Either an animal is a bird or it eats other animals.", "fol": "all x.(IsBird(x) | EatsOtherAnimals(x))", "prediction": ["all x.(Animal(x) -> (Bird(x) | EatsAnimals(x)))", "(exists x.(Animal(x) & Bird(x)) | exists y.(Animal(y) & Eats(y,x))))", "all x.((Animal(x) & Bird(x)) | EatsAnimals(x))", "all x.(Animal(x) -> (Bird(x) | EatsAnimals(x)))", "all x y.((Animal(x) & Bird(x)) | (EatsAnimals(x,y) & Animal(y))))", "all x.(Animal(x) -> (Bird(x) | EatsOtherAnimals(x)))", "all x y.((Animal(x) & Animal(y) & Bird(x)) | EatsAnimals(x,y))", "(exists x.(Animal(x) & Bird(x)) | exists y.(Animal(y) & Eats(y,x))))", "exists x.(Animal(x) & (Bird(x) | EatsAnimals(x)))", "all x y.((Animal(x) & Bird(x)) | (Animal(y) & EatsAnimals(y))))", "all x.((Animal(x) & Bird(x)) | EatsOtherAnimals(x))", "exists x.(Animal(x) & Bird(x) | EatsAnimals(x)))", "exists x.(Animal(x) & (Bird(x) | EatsAnimals(x)))", "exists x.(Animal(x) & (Bird(x) | EatsOtherAnimals(x)))", "exists x.(Animal(x) & Bird(x) | EatsAnimals(x)))", "exists x.(Animal(x) & (Bird(x) | EatsAnimals(x)))"]}
{"id": "folio_train_353", "nl": "If an animal eats other animals, then it is a carnivore.", "fol": "all x.(EatsOtherAnimals(x) -> IsCarnivore(x))", "prediction": ["all x.((Animal(x) & EatsOtherAnimals(x)) -> Carnivore(x))", "all x y.((Animal(x) & Animal(y) & Eats(x,y)) -> Carnivore(x))", "all x.((Animal(x) & EatsAnimals(x)) -> Carnivore(x))", "all x.((Animal(x) & EatsOtherAnimals(x)) -> Carnivore(x))", "all x y.((Animal(x) & Animal(y) & Eats(x,y)) -> Carnivore(x))", "all x.(EatsOtherAnimals(x) -> Carnivore(x))", "all x.((Animal(x) & EatsAnimals(x)) -> Carnivore(x))", "all x y.((Animal(x) & Animal(y) & Eats(x,y)) -> Carnivore(x))", "all x.((Animal(x) & EatsOtherAnimals(x)) -> Carnivore(x))", "all x.(EatsOtherAnimals(x) -> Carnivore(x))", "all x.(Carnivore(x) -> EatsAnimals(x))", "all x.((Animal(x) & EatsAnimals(x)) -> Carnivore(x))", "all x y.((Animal(x) & Animal(y) & Eats(x,y)) -> Carnivore(x))", "exists x.(Animal(x) & EatsAnimals(x))", "all x.((Animal(x) & EatsOtherAnimals(x)) -> Carnivore(x))", "all x y.((Animal(x) & Animal(y) & Eats(x,y)) -> Carnivore(x))"]}
{"id": "folio_train_354", "nl": "Ron is neither a cold-blooded animal nor a carnivore.", "fol": "(-IsColdBlooded(Ron) & -IsCarnivore(Ron))", "prediction": ["all x.(Ron(x) -> (-ColdBlooded(x) & -Carnivore(x)))", "(-ColdBlooded(Ron) & -Carnivore(Ron))", "Ron is -(ColdBlooded(Ron) & -Carnivore(Ron))", "-(ColdBlooded(Ron) & -Carnivore(Ron))", "Ron is -ColdBlooded(Ron) & -Carnivore(Ron))", "(Carnivore(Ron) & -ColdBlooded(Ron))", "(ColdBlooded(Ron) & -Carnivore(Ron))", "all x.(Ron(x) -> (-ColdBlooded(x) & -Carnivore(x)))", "(-ColdBlooded(Ron) & -Carnivore(Ron))", "-(ColdBlooded(Ron) & -Carnivore(Ron))", "Ron is -ColdBlooded(Ron) & -Carnivore(Ron))", "all x.(Ron(x) -> (-ColdBlooded(x) & -Carnivore(x)))", "-(ColdBloodedAnimal(Ron) | Carnivore(Ron))", "all x.(Ron(x) -> (-ColdBloodedAnimal(x) | Carnivore(x)))", "all x.(Ron(x) -> (-ColdBlooded(x) & -Carnivore(x)))", "all x.(Ron(x) -> (-ColdBlooded(x) | Carnivore(x)))"]}
{"id": "folio_train_355", "nl": "Henry is neither a carnivore nor a lizard.", "fol": "(-IsCarnivore(Henry) & -IsLizard(Henry))", "prediction": ["(-Carnivore(Henry) & -Lizard(Henry))", "all x.(Henry(x) -> (-Carnivore(x) & -Lizard(x)))", "-(Carnivore(Henry) | Lizard(Henry))", "Henry is -Carnivore(Henry) & -Lizard(Henry))", "Henry is -(Carnivore(Henry) | Lizard(Henry))", "(-Carnivore(Henry) & -Lizard(Henry))", "-(Carnivore(Henry) & Lizard(Henry))", "all x.(Henry(x) -> (-Carnivore(x) & -Lizard(x)))", "(-Carnivore(Henry) | Lizard(Henry))", "(NeitherCarnivore(Henry) & -Lizard(Henry))", "all x.(Henry(x) -> (-Carnivore(x) | Lizard(x)))", "Neither Carnivore,nor Lizard(Henry)", "(-Carnivore(Henry) | Lizard(Henry))", "all x.(Henry(x) -> (-Carnivore(x) | Lizard(x)))", "(-Carnivore(Henry) | Lizard(Henry))", "all x.(Henry(x) -> (-Carnivore(x) & -Lizard(x)))"]}
{"id": "folio_train_356", "nl": "Ron is a lizard.", "fol": "IsLizard(Ron)", "prediction": ["all x.(Lizard(x) -> Ron(x))", "Ron is Lizard(Ron)", "(Lizard(Ron) & LivesIn(Ron,Lizard))", "Ron is a Lizard(Ron)", "all x.(Lizard(x) -> Ron(x))", "all x.(Ron(x) -> Lizard(x))", "Ron is Lizard(Ron)", "(Lizard(Ron) & LivesIn(Ron,Lizard))", "(Lizard(Ron) & Lizard(Ron))", "Ron is lizard.", "all x.(Lizard(x) -> Ron(x))", "all x.(Ron(x) -> Lizard(x))", "Ron is Lizard.", "(Lizard(Ron)", "all x.(Lizard(x) -> Ron(x))", "Ron ist Lizard."]}
{"id": "folio_train_357", "nl": "Either Henry is a reptile or Ron eats other animals.", "fol": "(IsReptile(Henry) | EatsOtherAnimals(Ron))", "prediction": ["((Henry(Henry) & Reptile(Henry)) | (Ron(Henry) & Animal(Henry))))", "(exists x.(Henry(x) & Reptile(x)) | exists y.(Ron(y) & Animal(y))))", "(all x.(Henry(x) -> Reptile(x)) | (Ron(x) -> EatsAnimals(x))))", "all x y.((Henry(x) & Ron(y)) -> (Reptile(x) | EatsAnimals(y)))", "exists x.(Reptile(x) | (Reptile(x) | Animal(x))))", "(Either Henry is Reptile(Henry) | RonEatsAnimals(Ron))", "exists x.(Henry(x) & Reptile(x) | (Ron(x) & Animal(x))))", "all x.(Reptile(x) | (EatsAnimals(x) & Henry(x))))", "((Henry(Henry) & Reptile(Henry)) | (Ron(Ron) & Animal(Henry))))", "(exists x.(Henry(x) & Reptile(x)) | exists y.(Ron(y) & Animal(y))))", "exists x.(Reptile(x) | Animal(x))", "((Henry(Henry) & Reptile(Ron)) | (RonEatsAnimals(Ron))))", "all x y.((Henry(x) & Ron(y)) -> (Reptile(x) | EatsAnimals(y)))", "(all x.(Henry(x) -> Reptile(x)) | (Ron(x) -> EatsAnimals(x)))", "all x y.((Henry(x) & Ron(y)) -> (Reptile(x) | EatsAnimals(y)))", "exists x.(Reptile(x) | Animal(x))"]}
{"id": "folio_train_358", "nl": "It is not true that Ron is a reptile or that Henry is cold-blooded.", "fol": "-(IsReptile(Ron) | IsColdBlooded(Henry))", "prediction": ["(-(Reptile(Ron) & ColdBlooded(Henry)) -> -Reptile(Ron))", "(-(Ron(Ron) & Reptile(Ron)) | (Henry(Henry) & ColdBlooded(Henry))))", "all x.((Ron(x) & -Reptile(x) & -ColdBlooded(x)) -> -Reptile(x))", "(-exists x.(Reptile(x) & -Reptile(x)) & exists y.(ColdBlooded(y) & Henry(y))))", "all x.((Reptile(x) | ColdBlooded(x)) -> -Reptile(x))", "-(Reptile(Ron) | ColdBlooded(Henry))", "((Ron(Ron) & -Reptile(Ron)) | (-Ron(Ron) & ColdBlooded(Ron))))", "(It is not true that Ron is reptile(i) & -IsColdBlooded(i))", "-((Ron isReptile(Ron) | HenryColdBlooded(Ron)))", "(IsRonReptile(Ron) | IsHenryColdBlooded(Henry)))", "(-(Ron(Ron) & Reptile(Ron)) | (Henry(Henry) & ColdBlooded(Henry))))", "all x.((Ron(x) & -Reptile(x)) | (-Reptile(x) & ColdBlooded(x))))", "exists x.(Reptile(x) & -(Reptile(x) | ColdBlooded(x)))", "-(Reptile(Ron) | ColdBlooded(Ron)))", "-((Ron isReptile(Ron) | HenryColdBlooded(Ron)))", "-(Reptile(Ron) | ColdBlooded(Henry))"]}
{"id": "folio_train_359", "nl": "Ambiortus is a prehistoric bird genus.", "fol": "(IsPrehistoric(Ambiortus) & IsBirdGenus(Ambiortus))", "prediction": ["all x.(Ambiortus(x) -> PrehistoricBirdGenus(x))", "(PrehistoricBirdGenus(ambiortus) & PrehistoricBirdGenus(ambiortus))", "Ambiortus (PrehistoricBirdGenus)", "(PrehistoricBirdGenus(Ambiortus) & PrehistoricBirdGenus(Ambiortus))", "all x.(Ambiortus(x) -> PrehistoricBirdGenus(x))", "all x y.((Ambiortus(x) & BirdGenus(y)) -> Prehistoric(x,y))", "(PrehistoricBirdGenus(ambiortus) & PrehistoricBirdGenus(ambiortus))", "all x.((Ambiortus(x) & PrehistoricBirdGenus(x)) -> PrehistoricBirdGenus(x))", "Ambiortus (BirdGenus)", "all x.(Ambiortus(x) -> PrehistoricBirdGenus(x))", "all x.(Ambiortus(x) -> PrehistoricBirdGenus(x))", "all x.(Ambiortus(x) -> PrehistoricBirdGenus(x))", "(PrehistoricBirdGenus(ambiortus)", "all x.(Ambiortus(x) -> PrehistoricBirdGenus(x))", "All x.(Ambiortus(x) -> PrehistoricBirdGenus(x))", "All x.(Ambiortus(x) -> PrehistoricBirdGenus(x))"]}
{"id": "folio_train_360", "nl": "Ambiorus Dementjevi is the only known species of Ambiortus.", "fol": "all x.(IsSpeciesOf(x,Ambiortus) -> AmbiorusDementjeviSpecies(x))", "prediction": ["all x.(AmbiorusDementjevi(x) -> (LimitedSpeciesOfAmbiortus(x) & KnownSpeciesOfAmbiortus(x)))", "(All x.(AmbiorusDementjevi(x) -> OnlyKnownSpeciesOfAmbiortus(x)))", "all x.((Ambiorus(x) & Dementjevi(x)) -> Ambiortus(x))", "Ambiorus Dementjevi (Ambiortus) & OnlyKnownSpecies(Ambiortus))", "all x.(AmbiorusDementjevi(x) -> (Ambiortus(x) & OnlyKnownSpecies(x)))", "all x y.((Ambiorus(x) & Dementjevi(y)) -> (Ambiortus(x) & KnownSpecies(x,y)))", "(LimitedSpecies(Ambiortus,Dementjevi) & KnownSpecies(Ambiortus,Dementjevi))", "All x.(Ambiorus(x) -> Dementjevi(x))", "(AmbiorusDementjevi) - exists y.(Ambiortus(y) & KnownSpecies(y)) & KnownSpecies(x,y)))", "AllergicSpeciesOfAmbiortus(Ambiortus)", "(All x.(AmbiorusDementjevi(x) -> KnownSpecies(x)))", "all x y.((Ambiorus(x) & Dementjevi(y)) -> (KnownSpecies(x,y) & Ambiortus(x)))", "all x.((Ambiorus(x) & Dementjevi(x)) -> Ambiortus(x))", "All x.(AmbiorusDementjevi(x) -> Ambiortus(x))", "All x.(Ambiorus(x) -> Dementjevi(x))", "All x.(AmbiorusDementjevi(x) -> (Ambiortus(x) & KnownSpecies(x)))"]}
{"id": "folio_train_361", "nl": "The Mongol region was where Ambiorus Dementjevi lived.", "fol": "all x.(AmbiorusDementjeviSpecies(x) -> LivedInRegion(x,Mongolregion))", "prediction": ["All x.(MongolRegion(x) -> AmbiorusDementjevi(x))", "all x y.((MongolRegion(x) & AmbiorusDementjevi(y)) -> LivedIn(x,y))", "(MongolRegion(Mongol) & AmbiorusDementjevi(Mongol))", "(LivingAmbiorusDementjevi(Mongol))", "-(MongolRegion(Mongol) & AmbiorusDementjevi(Mongol))", "In Mongolia, Ambiorus Dementjevi lived.", "all x.(MongolRegion(x) -> AmbiorusDementjevi(x))", "All x.((MongolRegion(x) & AmbiorusDementjevi(x)) -> LivedIn(x,MongolRegion))", "all x y.((MongolRegion(x) & AmbiorusDementjevi(y)) -> Lived(x,y))", "(AmbiorusDementjevi(MongolRegion))", "(LivingAmbiorusDementjevi(MongolRegion))", "All x.(MongolRegion(x) -> AmbiorusDementjevi(x))", "all x y.((MongolRegion(x) & AmbiorusDementjevi(y)) -> LivedIn(x,y))", "All x.(MongolRegion(x) -> LivedAmbiorusDementjevi(x))", "All x.(MongolRegion(x) -> AmbiorusDementjevi(x))", "all x y.((MongolRegion(x) & AmbiorusDementjevi(y)) -> Lived(x,y))"]}
{"id": "folio_train_362", "nl": "Yevgeny Kurochkin was the discoverer of Ambiortus.", "fol": "DiscovererOf(Yevgenykurochkin,Ambiortus)", "prediction": ["Yevgeny Kurochkin was the discoverer of Ambiortus.", "all x.((Yevgeny Kurochkin(x) & Ambiortus(x)) -> Discoverer(x))", "(DiscovererOfAmbiortus(YevgenyKurochkin)", "-(DiscovererOfAmbiortus(x) & YevgenyKurochkin(y))", "(DiscovererOfAmbiortus(y) & YevgenyKurochkin(y))", "Yevgeny Kurochkin was the discoverer of Ambiortus.", "Yevgeny Kurochkin (DiscovererOfAmbiortus)", "Erzgadzhny Kurochkin (DiscovererOfAmbiortus))", "(DiscovererOfAmbiortus) -> YevgenyKurochkin(y))", "Yevgeny Kurochkin was the DiscovererOfAmbiortus.", "Yevgeny Kurochkin (DestinatorOfAmbiortus))", "Yevgeny Kurochkin was discoverer of Ambiortus.", "Yevgeny Kurochkin (DiscovererOfAmbiortus)", "Yevgeny Kurochkin, DiscovererOfAmbiortus, c.1900.", "Yevgeny Kurochkin - DiscovererOfAmbiortus(x))", "Yevgeny Kurochkin was the discoverer of Ambiortus."]}
{"id": "folio_train_363", "nl": "Yevgeny Kurochkin discovered a new bird genus.", "fol": "exists x.(IsBirdGenus(x) & DiscovererOf(Yevgenykurochkin,x))", "prediction": ["Yevgeny Kurochkin discovered a new birdgenus.", "all x.((EvgenyKurochkin(x) & BirdGenus(x)) -> Discovered(x,y))", "all x y.((EvgenyKurochkin(x) & BirdGenus(y)) -> Discovered(x,y))", "(discoveredNewBirdGenus(YevgenyKurochkin))", "(discoveredBirdGenus(YevgenyKurochkin)", "all x y.((Evgeny Kurochkin(x) & BirdGenus(y)) -> Discovered(x,y))", "Yevgeny Kurochkin discovered a new birdgenus.", "all x.((Yevgeny Kurochkin(x) & BirdGenus(y)) -> Discovered(x,y))", "(NewBirdGenus(YevgenyKurochkin))", "Yevgeny Kurochkin discovered new birdgenus.", "Yevgeny Kurochkin discovered a new birdgenus.", "Yevgeny Kurochkin hat einen neuen BirdGenus entdeckt.", "Yevgeny Kurochkin (discoveredNewBirdGenus))", "Yevgeny Kurochkin discovered a new birdgenus.", "Yevgeny Kurochkin, discovered a new birdgenus.", "Yevgeny Kurochkin discovered new birdgenus."]}
{"id": "folio_train_364", "nl": "There is a species of Ambiortus that doesn't live in the Mongol region.", "fol": "exists x.(IsSpeciesOf(x,Ambiortus) & -LivedInRegion(x,Mongolregion))", "prediction": ["exists x.(Ambiortus(x) & -LivesInMongolRegion(x))", "exists x.(Ambiortus(x) & -LivesInMongolRegion(x))", "all x y.((Ambiortus(x) & MongolRegion(y)) -> -LivesIn(x,y))", "exists x y.(SpeciesOfAmbiortus(x) & MongolRegion(y) & -LivesIn(x,y))", "exists x.(Ambiortus(x) & -LivesInMongolRegion(x))", "exists x.(SpeciesOfAmbiortus(x) & -LivesInMongolRegion(x))", "exists x.(Ambiortus(x) & -LivesInMongolRegion(x))", "exists x.(AmbiortusSpecies(x) & -LivesInMongolRegion(x))", "exists x.(Ambiortus(x) & -LivingInMongolRegion(x))", "exists x.(Ambiortus(x) & -LivesInMongolRegion(x))", "exists x.(SpeciesOfAmbiortus(x) & -LivesInMongolRegion(x))", "exists x.(Ambiortus(x) & -LivesInMongolRegion(x))", "exists x.(AmbiortusSpecies(x) & -LivesInMongolRegion(x))", "exists x.(Ambiortus(x) & -LivesInMongolRegion(x))", "exists x.(Ambiortus(x) & -LivesInMongolRegion(x))", "exists x.(Ambiortus(x) & -LivingInMongolRegion(x))"]}
{"id": "folio_train_365", "nl": "Yevgeny Kurochkin lived in the Mongol region.", "fol": "LivedInRegion(Yevgenykurochkin,Mongolregion)", "prediction": ["all x.((EvgenyKurochkin(x) & MongolRegion(x)) -> LivedIn(x,y))", "Yevgeny Kurochkin lebte in MongolRegion.", "(LivingInMongolRegion(YevgenyKurochkin)", "all x y.((Evgeny Kurochkin(x) & MongolRegion(y)) -> LivedIn(x,y))", "all x.((Evgeny Kurochkin(x) & MongolRegion(x)) -> LivedIn(x,y))", "Yevgeny Kurochkin lived in MongolRegion.", "all x.((YevgenyKurochkin(x) & MongolRegion(x)) -> LivedIn(x,y))", "(LivingInMongolRegion(YevgenyKurochkin)", "Yevgeny Kurochkin (LivingInMongolRegion)", "Yevgeny Kurochkin lebte in MongolRegion.", "(LivingInMongolRegion(Yevgeny Kurochkin)", "(LivingInMongolRegion(EvgenyKurochkin)", "Yevgeny Kurochkin lived in MongolRegion.", "Yevgeny Kurochkin grew up in Mongolia.", "Yevgeny Kurochkin (LivingInMongolRegion)", "Yevgeny Kurochkin lived in MongolRegion."]}
{"id": "folio_train_366", "nl": "All species of Ambiortus live in the Mongol region.", "fol": "all x.(IsSpeciesOf(x,Ambiortus) -> LivedInRegion(x,Mongolregion))", "prediction": ["all x.(Ambiortus(x) -> LivesInMongolRegion(x))", "(all x.(Ambiortus(x) -> MongolRegion(x))", "all x.(Ambiortus(x) -> LivesInMongolRegion(x))", "(exists x.(AmbiortusSpecies(x) & MongolRegion(x)) & LivesIn(x,Ambiortus))", "(all x.(Ambiortus(x) -> LivesInMongolRegion(x)))", "all x y.((AmbiortusSpecies(x) & MongolRegion(y)) -> LivesIn(x,y))", "all x y.((Ambiortus(x) & MongolRegion(y)) -> LivesIn(x,y))", "all x.(AmbiortusSpecies(x) -> LivesInMongolRegion(x))", "all x.(Ambiortus(x) -> LivesInMongolRegion(x))", "all x y.((Ambiortus(x) & Mongol(y)) -> LivesIn(x,y))", "all x.(Ambiortus(x) -> LivesInMongolRegion(x))", "all x.(AmbiortusSpecies(x) -> LivesInMongolRegion(x))", "all x.(Ambiortus(x) -> LivesInMongolRegion(x))", "All x.(AmbiortusSpecies(x) -> LivesInMongolRegion(x))", "all x.(Ambiortus(x) -> LivesInMongolRegion(x))", "all x.(Ambiortus(x) -> LivesInMongolRegion(x))"]}
{"id": "folio_train_367", "nl": "Everyone that uses a football can throw a football.", "fol": "all x.(UsesFootball(x) -> ThrowsFootball(x))", "prediction": ["all x.((UsesFootball(x) & ThrowsFootball(x)) -> CanThrewFootball(x))", "all x y.((UsesFootball(x) & Football(y)) -> CanThrew(x,y))", "all x.((UsesFootball(x) & ThrowsFootball(x)) -> CanThrewFootball(x))", "all x.((Uses(x,Football) & Throws(x,Football)) -> CanThrew(x,Football))", "all x y.((Uses(x,y) & Football(y)) -> CanThrew(x,y))", "all x.((UsesFootball(x) & ThrowsFootball(x)) -> CanThrewFootball(x))", "all x y.((UsesFootball(x) & Football(y)) -> CanThrew(x,y))", "all x.((Uses(x,Football) & Throws(x,Football)) -> CanThrew(x,Football))", "all x y.((UsesFootball(x) & UsesFootball(y)) -> ThrowsFootball(x,y))", "(all x.((UsesFootball(x) & UsesFootball(x)) -> ThrowsFootball(x))", "all x.((UsesFootball(x) & ThrowsFootball(x)) -> CanTurn(x))", "all x.(UsesFootball(x) -> ThrowsFootball(x))", "all x.((UsesFootball(x) & ThrowsFootball(x)) -> CanThrewFootball(x))", "exists x.(UsesFootball(x) & ThrowsFootball(x))", "all x.((UsesFootball(x) & UsesFootball(x)) -> ThrowsFootball(x))", "all x.((UsesFootball(x) & ThrowsFootball(x)) -> CanTurn(x))"]}
{"id": "folio_train_368", "nl": "If someone plays football, then they use a football.", "fol": "all x.(PlaysFootball(x) -> UsesFootball(x))", "prediction": ["all x.(PlaysFootball(x) -> UsesFootball(x))", "all x.(PlaysFootball(x) -> UsesFootball(x))", "all x y.((PlaysFootball(x) & Football(y)) -> Uses(x,y))", "all x.((PlaysFootball(x) & UsesFootball(x)) -> PlaysFootball(x))", "all x y.((PlaysFootball(x) & Person(y)) -> UsesFootball(y))", "all x.(Plays(x,Football) -> Uses(x,Football))", "all x.(PlaysFootball(x) -> UsesFootball(x))", "all x y.((Plays(x,y) & Football(y)) -> Uses(x,y))", "all x.((PlaysFootball(x) & UsesFootball(x)) -> PlaysFootball(x))", "all x.(PlaysFootball(x) -> UsesFootball(x))", "all x y.((PlaysFootball(x) & Football(y)) -> Uses(x,y))", "all x y.((Plays(x,y) & Football(y)) -> Uses(x,y))", "all x.(PlaysFootball(x) -> UsesFootball(x))", "exists x.(PlaysFootball(x) & UsesFootball(x))", "exists x.(PlaysFootball(x) & UsesFootball(x))", "exists x.(PlaysFootball(x) & UsesFootball(x))"]}
{"id": "folio_train_369", "nl": "Either someone is a football player or a basketball player.", "fol": "all x.(IsBasketballPlayer(x) | PlaysFootball(x))", "prediction": ["all x.((Player(x) & Football(x)) | BasketballPlayer(x))", "exists x.(FootballPlayer(x) | BasketballPlayer(x))", "all x.((FootballPlayer(x) | BasketballPlayer(x)) -> (FootballPlayer(x) | BasketballPlayer(x)))", "all x.((Person(x) & FootballPlayer(x)) | BasketballPlayer(x))", "all x y.((Person(x) & FootballPlayer(x)) | BasketballPlayer(y)) -> (FootballPlayer(x) | BasketballPlayer(y)))", "(exists x.(FootballPlayer(x) | BasketballPlayer(x)))", "exists x.(Player(x) & (FootballPlayer(x) | BasketballPlayer(x)))", "exists x.(FootballPlayer(x) | BasketballPlayer(x))", "all x y.((FootballPlayer(x) | BasketballPlayer(y)) -> (FootballPlayer(x) | BasketballPlayer(y)))", "(exists x.(FootballPlayer(x) | BasketballPlayer(x)))", "all x.((Player(x) & Football(x)) | BasketballPlayer(x))", "exists x.(Player(x) & (FootballPlayer(x) | BasketballPlayer(x)))", "all x.((Person(x) & FootballPlayer(x)) | BasketballPlayer(x))", "(exists x.(FootballPlayer(x) | BasketballPlayer(x)))", "exists x.(FootballPlayer(x) | BasketballPlayer(x))", "exists x.(FootballPlayer(x) | BasketballPlayer(x))"]}
{"id": "folio_train_370", "nl": "Every basketball player is tall.", "fol": "all x.(IsBasketballPlayer(x) -> IsTall(x))", "prediction": ["all x.(BasketballPlayer(x) -> Tall(x))", "-all x.(BasketballPlayer(x) -> Tall(x))", "all x.(BasketballPlayer(x) -> Tall(x))", "all x y.((BasketballPlayer(x) & Player(y)) -> Tall(x))", "-all x.(BasketballPlayer(x) -> Tall(x))", "all x.exists y.(BasketballPlayer(x) & Tall(y))", "all x.(BasketballPlayer(x) -> Tall(x))", "all x.(BasketballPlayer(x) -> Tall(x))", "all x.(BasketballPlayer(x) -> Tall(x))", "all x.(BasketballPlayer(x) -> Tall(x))", "all x.(BasketballPlayer(x) -> Tall(x))", "exists x.(BasketballPlayer(x) & Tall(x))", "all x.(BasketballPlayer(x) -> Tall(x))", "exists x.(BasketballPlayer(x) & Tall(x))", "exists x.(BasketballPlayer(x) & Tall(x))", "exists x.(BasketballPlayer(x) & Tall(x))"]}
{"id": "folio_train_371", "nl": "Everyone that can throw a football can throw a football with a spiral.", "fol": "all x.(ThrowsFootball(x) -> ThrowsFootballWithSpiral(x))", "prediction": ["all x.((CanThrewFootball(x) & HasSpiral(x)) -> CanThrewFootballWithSpiral(x))", "all x.((CanTwistFootball(x) & HasSpiral(x)) -> CanTwistFootballWithSpiral(x))", "all x y.((CanThrewFootball(x) & Spiral(y)) -> CanThrewFootballWithSpiral(x,y))", "all x.((CanThrewFootball(x) & HasSpiral(x)) -> CanThrewFootballWithSpiral(x))", "all x.(CanThrewFootball(x) -> CanThrewFootballWithSpiral(x))", "all x y.((CanThrewFootball(x) & Football(y) & HasSpiral(x)) -> CanThrewWithSpiral(x,y))", "all x.((CanTwereFootball(x) & HasSpiral(x)) -> ThrowFootballWithSpiral(x))", "all x y.((CanTwistFootball(x) & Spiral(y)) -> CanTwistFootballWithSpiral(x,y))", "all x y.((CanTwereFootball(x) & FootballWithSpiral(y)) -> CanTwereFootballWithSpiral(x,y))", "all x.((CanThrowFootball(x) & ThrowFootballWithSpiral(x)) -> ThrowFootballWithSpiral(x))", "(all x.((CanThrewFootball(x)) -> ThrowFootballWithSpiral(x)))", "all x.((CanThrewFootball(x) & HasSpiral(x)) -> ThrowsFootballWithSpiral(x))", "all x.(CanTwist(x) -> ThrowsFootball(x))", "all x.((CanTwistFootball(x) & ThrowFootballWithSpiral(x)) -> ThrowFootballWithSpiral(x))", "all x y.((CanThrowFootball(x) & Spiral(y)) -> CanThrowFootballWithSpiral(x,y))", "exists x.(CanThrew(x,Football) & Throw(x,Spiral))"]}
{"id": "folio_train_372", "nl": "If someone is tall, then they are in shape.", "fol": "all x.(IsTall(x) -> IsInShape(x))", "prediction": ["all x.(Tall(x) -> InShape(x))", "all x.((Tall(x) & InShape(x)) -> Tall(x))", "all x.(Tall(x) -> InShape(x))", "all x.(Tall(x) -> Shape(x))", "all x.((Tall(x) & InShape(x)) -> InShape(x))", "all x.((Tall(x) & Shape(x)) -> InShape(x))", "all x y.(Tall(x) -> InShape(x,y))", "all x.(Tall(x) -> InShape(x))", "all x.(Tall(x) -> Shape(x))", "all x.((Tall(x) & InShape(x)) -> Tall(x))", "all x.((Tall(x) & Shape(x)) -> InShape(x))", "all x.(Tall(x) -> InShape(x))", "all x.(Tall(x) -> Shape(x))", "exists x.(Tall(x) & Shape(x))", "exists x.(Tall(x) & Shape(x))", "exists x.(Tall(x) & InShape(x))"]}
{"id": "folio_train_373", "nl": "If Jack is neither tall nor a basketball player,  then Jack is neither tall nor can throw a football.", "fol": "((-IsTall(Jack) & -IsBasketballPlayer(Jack)) -> (-IsTall(Jack) & -ThrowsFootball(Jack)))", "prediction": ["all x.((Jack(x) & -Tall(x) & -BasketballPlayer(x)) -> -Tall(x) & -CanThrewFootball(x))", "all x.((Jack(x) & -(Tall(x) | BasketballPlayer(x))) -> -(Tall(x) | ThrowsFootball(x))))", "(-Tall(Jack) & -BasketballPlayer(Jack)) | (-Tall(Jack) & BasketballPlayer(Jack))))", "all x.((Jack(x) & -Tall(x) & -BasketballPlayer(x)) -> (-Tall(x) & -CanThrewFootball(x)))", "(-(Tall(jack) | BasketballPlayer(jack))) -> -(Tall(jack) | ThrowsFootball(jack)))", "(-(Tall(jack) | BasketballPlayer(jack))) -> (-Tall(jack) & -CanThrewFootball(jack)))", "all x.((Jack(x) & -(Tall(x) | BasketballPlayer(x))) -> (-Tall(x) & -CanThrewFootball(x)))", "all x.((Jacket(x) & -Tall(x) & -BasketballPlayer(x)) -> (-Tall(x) & -CanThrewFootball(x)))", "all x y.((Jack(x) & -Tall(x) & -BasketballPlayer(x)) -> (-Tall(x) | ThrowsFootball(x)))", "all x.((Jack(x) & -Tall(x) & -BasketballPlayer(x)) -> -Tall(x) & -CanThrowFootball(x))", "(-Tall(Jack) & -BasketballPlayer(Jack)) | (-Tall(Jack) & BasketballPlayer(Jack))))", "all x.((Jack(x) & -Tall(x) | BasketballPlayer(x)) -> (-Tall(x) & -CanThrewFootball(x)))", "all x.((Jack(x) & (-Tall(x) | BasketballPlayer(x))) -> -Tall(x) & -CanThrewFootball(x))", "all x.((Jack(x) & -Tall(x) & -BasketballPlayer(x)) -> (-Tall(x) & -CanThrewFootball(x)))", "all x.((Jack(x) & -(Tall(x) | BasketballPlayer(x))) -> -(Tall(x) | CanThrewFootball(x)))", "all x.((Jack(x) & (-Tall(x) | -BasketballPlayer(x))) -> (-Tall(x) | ThrowsFootball(x)))"]}
{"id": "folio_train_374", "nl": "Jack plays football.", "fol": "PlaysFootball(Jack)", "prediction": ["all x.(Jack(x) -> PlaysFootball(x))", "(Plays(Jack,Football))", "Jack plays football.", "(PlaysFootball(Jack))", "all x y.((Jack(x) & Football(y)) -> Plays(x,y))", "-PlaysFootball(Jack)", "all x.(Jack(x) -> PlaysFootball(x))", "(Plays(Jack,Football))", "Jack plays football.", "(Plays(Jack) & Football(Jack))", "(playsFootball(Jack))", "all x.(Jack(x) -> PlaysFootball(x))", "Jack plays football.", "Jack PlaysFootball(Jack)", "Jack plays Football.", "Jack plays football."]}
{"id": "folio_train_375", "nl": "Jack is in shape.", "fol": "IsInShape(Jack)", "prediction": ["all x.(Jack(x) -> InShape(x))", "(InShape(Jack))", "Jack is inShape.", "(InShape(Jack) & InShape(Jack))", "-InShape(Jack)", "All x.(Jack(x) -> InShape(x))", "(Shape(Jack) & InShape(Jack))", "Jack is inShape.", "-(Jack(Jack) & Shape(Jack))", "all x.(Jack(x) -> InShape(x))", "(InShape(Jack)", "Jack is in Shape.", "-InShape(Jack)", "All x.(Jack(x) -> Shape(x))", "(InShape(Jack)", "all x.(Jack(x) -> InShape(x))"]}
{"id": "folio_train_376", "nl": "Jack is not in shape.", "fol": "-IsInShape(Jack)", "prediction": ["-Shape(Jack)", "-InShape(Jack)", "all x.(Jack(x) -> -InShape(x))", "Jack is notinShape(Jack)", "(-Shape(Jack))", "(Jack) & -InShape(Jack))", "all x.(Jack(x) -> -InShape(x))", "Jack is notinShape(Jack)", "-InShape(Jack)", "(-Shape(Jack))", "Jack is not inShape.", "-(Jack(Jack) & Shape(Jack))", "-InShape(Jack)", "(-Shape(Jack))", "(-Shape(Jack))", "(-Shape(Jack)"]}
{"id": "folio_train_377", "nl": "Fort Ticonderoga is the current name for Fort Carillon.", "fol": "IsCurrentNameFor(Fortticonderoga,Fortcarillon)", "prediction": ["FortTiconderoga is the currentNameForFortCarillon.", "all x.(FortTiconderoga(x) -> FortCarillon(x))", "(currentNameForFortCarillon(FortTiconderoga))", "(CurrentNameForFortCarillon(FortTiconderoga))", "Fort Ticonderoga is the current name for FortCarillon.", "FortTiconderoga(x) -> FortCarillon(x))", "FortTiconderoga is the currentNameForFortCarillon.", "all x.(FortTiconderoga(x) -> FortCarillon(x))", "(currentNameForFortCarillon(FortTiconderoga))", "(currentNameForFortCarillon(FortTiconderoga) & FortCarillon(FortCarillon))", "(currentlyFrontTiconderoga(FortCarillon) & FortCarillon(FortCarillon))", "FortTiconderoga (currentNameForFortCarillon))", "(CurrentNameForFortCarillon(FortTiconderoga))", "FortTiconderoga is the current name for FortCarillon.", "FortTiconderoga(x) -> FortCarillon(x))", "FortTiconderoga (currentNameForFortCarillon)"]}
{"id": "folio_train_378", "nl": "Pierre de Rigaud de Vaudreuil built Fort Carillon.", "fol": "ConstructedBy(Pierrederigauddevaudreuil,Fortcarillon)", "prediction": ["Pierre de Rigaud de Vaudreuil built Fort Carillon.", "all x.((Pierre de Rigaud de Vaudreuil(x) & BuiltFortCarillon(x)) -> BuiltFortCarillon(x))", "all x.((PieceDeRigaud(x) & FortCarillon(x)) -> Built(x,FortCarillon))", "(built by Pierre de Rigaud de Vaudreuil)", "(BuildedFortCarillon(Pierre deRigaudDeVaudreuil)", "-builtFortCarillon(Pierre de RigaudDeVaudreuil)", "Pierre de Rigaud de Vaudreuil built FortCarillon.", "Pierre DeRigaudDeVaudreuil built FortCarillon.", "(built by Pierre de Rigaud de Vaudreuil, Fort Carillon)", "Pierre de Rigaud de Vaudreuil a construit Fort Carillon.", "-(Pierre de Rigaud de Vaudreuil BuiltFortCarillon(Pierre))", "Pierre de Rigaud de Vaudreuil built Fort Carillon.", "Pierre de Rigaud de Vaudreuil a construit Fort Carillon.", "Pierre de Rigaud DeVaudreuil BuiltFortCarillon.", "Pierre de Rigaud de Vaudreuil built FortCarillon.", "Pierre de Rigaud de Vaudreuil a construit FortCarillon."]}
{"id": "folio_train_379", "nl": "Fort Carillon was located in New France.", "fol": "IsLocatedIn(Fortcarillon,Newfrance)", "prediction": ["FortCarillon was located in NewFrance.", "all x.(FortCarillon(x) -> NewFrance(x))", "(Location(FortCarillon) & NewFrance(FortCarillon))", "(LocatedInNewFrance(FortCarillon)", "FortCarillon was located in NewFrance.", "All x.(FortCarillon(x) -> NewFrance(x))", "all x.(FortCarillon(x) -> LocatedInNewFrance(x))", "LocatedInNewFrance(FortCarillon)", "FortCarillon LocatedInNewFrance(FortCarillon)", "FortCarillon was located in NewFrance.", "FortCarillon(FortFrance)", "All x.(FortCarillon(x) -> NewFrance(x))", "FortCarillon is located in NewFrance.", "all x.(FortCarillon(x) -> LocatedInNewFrance(x))", "Fort Carillon was located in NewFrance.", "All x.(FortCarillon(x) -> NewFrance(x))"]}
{"id": "folio_train_380", "nl": "New France is not in Europe.", "fol": "-IsLocatedIn(Newfrance,Europe)", "prediction": ["-(NewFrance(France) & -InEurope(France))", "(-InEurope(NewFrance))", "(NewFrance(NewFrance) & -InEurope(NewFrance))", "NewFrance.com -InEurope(NewFrance)", "(NewFrance(n) & -InEurope(n))", "NewFrance(n) -> -InEurope(n))", "all x.(NewFrance(x) -> -InEurope(x))", "NewFrance(n) -> -InEurope(n))", "-(NewFrance(f) & -InEurope(f))", "-Europe(NewFrance)", "-InEurope(NewFrance)", "All x.(NewFrance(x) -> -InEurope(x))", "(NewFrance(newfrance) & -InEurope(newfrance))", "all x.(NewFrance(x) -> -InEurope(x))", "(NewFrance,Europe)", "All x.(NewFrance(x) -> -InEurope(x))"]}
{"id": "folio_train_381", "nl": "Pierre de Rigaud de Vaudreuil built a fort in New France.", "fol": "exists f.(ConstructedBy(Pierrederigauddevaudreuil,f) & IsLocatedIn(f,Newfrance))", "prediction": ["Pierre de Rigaud de Vaudreuil built a fort in NewFrance.", "all x y.((PieceDeRigaudDeVaudreuil(x) & Fort(y)) -> BuiltInNewFrance(x,y))", "all x.((Pierre de Rigaud de Vaudreuil(x) & BuiltFort(x)) -> NewFrance(x))", "all x y z.((Piece(x) & Rigaud(y) & Vaudreuil(z)) -> BuiltFortInNewFrance(x,y,z))", "all x y.((Piece(x) & Rigaud(y) & Vaudreuil(x)) -> BuiltFortInNewFrance(x,y))", "(BuildsFort(Pierre deRigaudDeVaudreuil) & InNewFrance(Pierre,Rigaud,Vaudreuil))", "all x y.((Pierre de Rigaud de Vaudreuil(x) & NewFrance(y)) -> BuiltFort(x,y))", "all x.((PieceDeRigaudDeVaudreuil(x) & BuiltFort(x)) -> NewFrance(x))", "(builtBy(Pierre de Rigaud(Pierre) & NewFrance(Pierre))", "(built by Pierre de Rigaud de Vaudreuil in NewFrance)", "(BuildedByPierceDeRigaudDeVaudreuil(Pierre,NewFrance))", "Pierre de Rigaud de Vaudreuil built a fort in NewFrance.", "Pierre de Rigaud de Vaudreuil a construit un fort in NewFrance.", "Pierre de Rigaud de Vaudreuil a built a fort in NewFrance.", "Pierre de Rigaud de Vaudreuil built a fort in NewFrance.", "Pierre de Rigaud de Vaudreuil built a fort in NewFrance."]}
{"id": "folio_train_382", "nl": "Pierre de Rigaud de Vaudreuil built a fort in New England.", "fol": "exists f.(ConstructedBy(Pierrederigauddevaudreuil,f) & IsLocatedIn(f,Newengland))", "prediction": ["Pierre de Rigaud de Vaudreuil built a fort in New England.", "all x y.((PieceDeRigaudDeVaudreuil(x) & Fort(y)) -> BuiltInNewEngland(x,y))", "all x y z.((Piece(x) & Rigaud(y) & Vaudreuil(z)) -> BuiltFortInNewEngland(x,y,z))", "all x y.((Piece(x) & Rigaud(y) & Vaudreuil(x)) -> BuiltFortInNewEngland(x,y))", "(BuildsFort(Pierre deRigaudDeVaudreuil) & InNewEngland(Pierre,Rigaud,Vaudreuil))", "all x.((Pierre de Rigaud de Vaudreuil(x) & BuiltFort(x,NewEngland)) -> BuiltIn(x,NewEngland))", "(built by Pierre de Rigaud de Vaudreuil in New England)", "all x.((PieceDeRigaudDeVaudreuil(x) & BuiltFort(x)) -> NewEngland(x))", "Pierre de Rigaud de Vaudreuil a built a fort in New England.", "(builtBy(Pierre de Rigaud(Pierre) & BuiltBy(Pierre,NewEngland))", "all x y.((Pierre de Rigaud de Vaudreuil(x) & NewEngland(y)) -> BuiltFort(x,y))", "(BuildedByPierceDeRigaudDeVaudreuil(Pierre) & InNewEngland(Pierre))", "Pierre de Rigaud de Vaudreuil built a fort in New England.", "Pierre de Rigaud de Vaudreuil a construit un fort in New England.", "Pierre de Rigaud de Vaudreuil & BuiltFortInNewEngland.", "Pierre de Rigaud de Vaudreuil built a fort in New England."]}
{"id": "folio_train_383", "nl": "Fort Carillon was located in Europe.", "fol": "IsLocatedIn(Fortcarillon,Europe)", "prediction": ["all x.(FortCarillon(x) -> LocatedInEurope(x))", "(Location(FortCarillon) & LocatedInEurope(FortCarillon))", "FortCarillon was located inEurope.", "all x y.((FortCarillon(x) & Europe(y)) -> LocatedIn(x,y))", "FortCarillon(FortCarillon) LocatedInEurope(FortCarillon)", "(LocatedInEurope) & FortCarillon(FortCarillon))", "all x.(FortCarillon(x) -> LocatedInEurope(x))", "(Location(FortCarillon,Europe))", "FortCarillon was located in Europe.", "LocatedInEurope, FortCarillon.", "All x.(FortCarillon(x) -> (LocatedInEurope(x) & LocatedInEurope(x)))", "all x.(FortCarillon(x) -> LocatedInEurope(x))", "FortCarillon was located inEurope.", "all x.(FortCarillon(x) -> LocationInEurope(x))", "FortCarillon is located in Europe.", "All x.(FortCarillon(x) -> LocatedInEurope(x))"]}
{"id": "folio_train_384", "nl": "No soccer players are professional basketball players.", "fol": "-exists x.(IsSoccerPlayer(x) & IsProfessionalBasketballPlayer(x))", "prediction": ["-exists x.(SoccerPlayer(x) & ProfessionalBasketballPlayer(x))", "all x.(SoccerPlayer(x) -> -ProfessionalBasketballPlayer(x))", "-exists x.(SoccerPlayer(x) & ProfessionalBasketballPlayer(x))", "(exists x.(SoccerPlayer(x) & ProfessionalBasketballPlayer(x)) & -exists y.(SoccerPlayer(y) & ProfessionalBasketballPlayer(y))))", "(exists x.(SoccerPlayer(x) & ProfessionalBasketballPlayer(x)))", "all x.(SoccerPlayer(x) -> -ProfessionalBasketballPlayer(x))", "-exists x.(SoccerPlayer(x) & ProfessionalBasketballPlayer(x))", "(exists x.(SoccerPlayer(x) & ProfessionalBasketballPlayer(x)) & -exists y.(SoccerPlayer(y) & ProfessionalBasketballPlayer(y)))", "all x.(SoccerPlayer(x) -> -ProfessionalBasketballPlayer(x))", "-exists x.(SoccerPlayer(x) & ProfessionalBasketballPlayer(x))", "-exists x.(SoccerPlayer(x) & ProfessionalBasketballPlayer(x))", "-exists x.(SoccerPilot(x) & ProfessionalBasketballPilot(x))", "-exists x.(SoccerPlayer(x) & BasketballPlayer(x))", "-exists x.(SoccerPlayer(x) & ProfessionalBasketballPlayer(x))", "-exists x.(SoccerPlayer(x) & BasketballPlayer(x))", "-exists x.(SoccerPlayer(x) & ProfessionalBasketballPlayer(x))"]}
{"id": "folio_train_385", "nl": "All NBA players are professional basketball players.", "fol": "all x.(IsNBAPlayer(x) -> IsProfessionalBasketballPlayer(x))", "prediction": ["all x.(NBAPlayer(x) -> ProfessionalBasketballPlayer(x))", "all x.(NBAPlayer(x) -> ProfessionalBasketballPlayer(x))", "(all x.(NBAPlayer(x) -> ProfessionalBasketballPlayer(x)))", "ALL NEBAPlayers(n) -> ProfessionalBasketballPlayer(n))", "all x.((NBAPlayer(x) & Professional(x)) -> Professional(x))", "all x.(NBAPlayer(x) -> ProfessionalBallroomPlayer(x))", "(all x.(NBAPlayer(x) -> ProfessionalBallroomPlayer(x)))", "all x y.((NBAPlayer(x) & NBAPlayer(y)) -> Professional(x,y))", "all x.(NBAPlayer(x) -> ProfessionalBasketballPlayer(x))", "all x.(NBAPlayer(x) -> ProfessionalBallroomplayer(x))", "(all x.(NBAPlayer(x) -> ProfessionalBasketballPlayer(x)))", "all x.(NBAPlayer(x) -> ProfessionalBalloonPlayer(x))", "all x.(NBAPlayer(x) -> ProfessionalBasketballPlayer(x))", "all x.(NBAPoker(x) -> ProfessionalBallroomplayer(x))", "all x.(NBAPlayer(x) -> ProfessionalBasketballPlayer(x))", "all x.(NBAPlayer(x) -> ProfessionalBallroomplayer(x))"]}
{"id": "folio_train_386", "nl": "All defenders are soccer players.", "fol": "all x.(IsDefender(x) -> IsSoccerPlayer(x))", "prediction": ["all x.(Defendant(x) -> SoccerPlayer(x))", "all x.(Defender(x) -> SoccerPlayer(x))", "all x.(Defendant(x) -> SoccerPlayer(x))", "all x.(defender(x) -> SoccerPlayer(x))", "all x.(Defender(x) -> SoccerPlayer(x))", "all x y.((Defendant(x) & SoccerPlayer(y)) -> FootballPlayer(x))", "all x.(Defendant(x) -> SoccerPlayer(x))", "(all x.(Defendant(x) -> SoccerPlayer(x)))", "all x.(Defendant(x) -> SoccerPlayer(x))", "all x.(defender(x) -> SoccerPlayer(x))", "(all x.(Defender(x) -> SoccerPlayer(x))", "all x.(Defender(x) -> SoccerPlayer(x))", "all x.(Defendant(x) -> SoccerPlayer(x))", "(all x.(Defender(x) -> SoccerPlayer(x))", "all x.(Defendant(x) -> SoccerPlayer(x))", "all x.(defender(x) -> SoccerPlayer(x))"]}
{"id": "folio_train_387", "nl": "All centerback players are defenders.", "fol": "all x.(IsCenterback(x) -> IsDefender(x))", "prediction": ["all x.(CenterbackPlayer(x) -> Defender(x))", "all x.(CenterbackPlayer(x) -> Defender(x))", "all x.(CensorbackPlayer(x) -> Defender(x))", "all x.(CenterbackPlayer(x) -> Defender(x))", "all x y.((CenterbackPlayer(x) & Defender(y)) -> Plays(x,y))", "(all x.(CenterbackPlayer(x) -> Defender(x)))", "all x.(CentrebackPlayer(x) -> Defender(x))", "all x.(CentricBackPlayer(x) -> Defender(x))", "all x.(CenterbackPlayer(x) -> Defender(x))", "all x.(Centerback(x) -> Defender(x))", "(all x.(CenterbackPlayer(x) -> Defender(x)))", "all x.(CenterbackPlayer(x) -> Defender(x))", "all x.(CentrebackPlayer(x) -> Defender(x))", "all x.(CenterbackPlayer(x) -> Defender(x))", "all x.(CenterbackPlayer(x) -> Defensive(x))", "all x.(CenterBackPlayer(x) -> Defender(x))"]}
{"id": "folio_train_388", "nl": "If Stephen Curry is an NBA player or a soccer player, then he is a professional basketball player.", "fol": "(((IsNBAPlayer(Stephencurry) & -IsSoccerPlayer(Stephencurry)) | (-IsNBAPlayer(Stephencurry) & IsSoccerPlayer(Stephencurry))) -> IsProfessionalBasketballPlayer(Stephencurry))", "prediction": ["all x.((StephenCurry(x) & (NBAPlayer(x) | SoccerPlayer(x))) -> ProfessionalBasketballPlayer(x))", "all x.((StanleyCurry(x) & (NBAPlayer(x) | SoccerPlayer(x))) -> ProfessionalBasketballPlayer(x))", "((NBAPlayer(StephenCurry) | SoccerPlayer(StephenCurry))) -> ProfessionalBasketballPlayer(StephenCurry))", "all x.((StephenCurry(x) & (NBAPlayer(x) | SoccerPlayer(x))) -> ProfessionalBasketballPlayer(x))", "(ProfessionalBasketballPlayer(StephenCurry))", "all x.((StephenCurry(x) & NBAPlayer(x) | SoccerPlayer(x)) -> ProfessionalBasketballPlayer(x))", "(ProfessionalBasketballPlayer(StephenCurry,NBAPlayer) | ProfessionalBasketballPlayer(StephenCurry,SoccerPlayer))", "all x y.((StephenCurry(x) & NBAPlayer(y) & (SoccerPlayer(x) | NBAPlayer(y))) -> ProfessionalBasketballPlayer(x))", "all x.((StanleyCurry(x) & (NBAPlayer(x) | SoccerPlayer(x))) -> ProfessionalBasketballPlayer(x))", "all x.((StephenCurry(x) & (NBAPlayer(x) | SoccerPlayer(x))) -> ProfessionalBasketballPlayer(x))", "all x y.((StephenCurry(x) & NBAPlayer(y) & SoccerPlayer(y) & (NBAPlayer(x,y) | SoccerPlayer(x,y))) -> ProfessionalBasketballPlayer(x))", "all x.((StephenCurry(x) & NBAPlayer(x)) | SoccerPlayer(x)) -> ProfessionalBasketballPlayer(x))", "all x.((StanleyCurry(x) & (NBAPlayer(x) | SoccerPlayer(x))) -> ProfessionalBasketballPlayer(x))", "all x.((StephenCurry(x) & (NBAPlayer(x) | SoccerPlayer(x))) -> ProfessionalBasketballPlayer(x))", "all x.((StanleyCurry(x) & (NBAPlayer(x) | SoccerPlayer(x))) -> ProfessionalBasketballPlayer(x))", "all x.((StephenCurry(x) & (NBAPlayer(x) | SoccerPlayer(x))) -> ProfessionalBasketballPlayer(x))"]}
{"id": "folio_train_389", "nl": "Stephen Curry is an NBA player.", "fol": "IsNBAPlayer(Stephencurry)", "prediction": ["StephenCurry(StephenCurry) is NBAPlayer(StephenCurry)", "(NBAPlayer(StephenCurry))", "(Player(StephenCurry) & NBA(StephenCurry))", "(NBAPlayer(StephenCurry) & NBAPlayer(StephenCurry))", "all x.((StanleyCurry(x) & NBAPlayer(x)) -> NBAPlayer(x))", "all x.((StephenCurry(x) & NBAPlayer(x)) -> NBAPlayer(x))", "Stephen Curry (NBAPlayer)", "StephenCurry(StanleyCurry) is NBAPlayer(StanleyCurry)", "StephenCurry(StephenCurry) is NBAPlayer(StephenCurry)", "Stephen Curry is NBAPlayer(StephenCurry)", "StephenCurry is NBAPlayer(StephenCurry)", "all x.(NBAPlayer(x) -> StephenCurry(x))", "All x.((StephenCurry(x) & NBAPlayer(x)) -> NBAPlayer(x))", "(NBAPlayer(StephenCurry))", "All x.((StanleyCurry(x) & NBAPlayer(x)) -> NBAPlayer(x))", "(NBAPlayer(StephenCurry) & NBAPlayer(StephenCurry))"]}
{"id": "folio_train_390", "nl": "Stephen Curry is a centerback player.", "fol": "IsCenterback(Stephencurry)", "prediction": ["all x.((StephenCurry(x) & CenterbackPlayer(x)) -> Plays(x,Curry))", "StephenCurry(StephenCurry) is a CenterbackPlayer(StephenCurry)", "all x.((StanleyCurry(x) & CenterbackPlayer(x)) -> Plays(x,Curry))", "StephenCurry(StephenCurry) & CenterbackPlayer(StephenCurry))", "all x.((StephenCurry(x) & CenterbackPlayer(x)) -> Plays(x))", "StephenCurry isCenterbackPlayer(StephenCurry)", "(CenterbackPlayer(StephenCurry))", "all x.(Curry(x) -> CenterbackPlayer(x))", "Stephen Curry is a centerback player.", "StephenCurry isCenterbackPlayer(StephenCurry)", "all x.(Curry(x) -> CenterbackPlayer(x))", "(CenterbackPlayer(StephenCurry)", "all x.(Curry(x) -> CenterbackPlayer(x))", "(CenterbackPlayer(StephenCurry)", "(CenterbackPlayer(StephenCurry)", "(CenterbackPlayer(StephenCurry)"]}
{"id": "folio_train_391", "nl": "Stephen Curry is not a centerback player.", "fol": "-IsCenterback(Stephencurry)", "prediction": ["all x.((StephenCurry(x) & -CenterbackPlayer(x)) -> -CenterbackPlayer(x))", "(-CenterbackPlayer(StephenCurry))", "StephenCurry(StephenCurry) & -CenterbackPlayer(StephenCurry))", "StephenCurry(StephenCurry) -CenterbackPlayer(StephenCurry))", "StephenCurry is notCenterbackPlayer(StephenCurry)", "(-CenterbackPlayer(StephenCurry))", "Stephen Curry is not a centerback player.", "all x.((StephenCurry(x) & -CenterbackPlayer(x)) -> -CenterbackPlayer(x))", "all x.(Curry(x) -> -CenterbackPlayer(x))", "-(CenterbackPlayer(StephenCurry))", "(-CenterbackPlayer(StephenCurry))", "all x.((StephenCurry(x) & -CenterbackPlayer(x)) -> -CenterbackPlayer(x))", "-CenterbackPlayer(StephenCurry)", "(-centerbackPlayer(StephenCurry))", "(-centerbackPlayer(StephenCurry)", "-CenterbackPlayer(StephenCurry)"]}
{"id": "folio_train_392", "nl": "No songs are visual. ", "fol": "all x.(IsSong(x) -> -IsVisual(x))", "prediction": ["-exists x.(Song(x) & Visual(x))", "-exists x.(Song(x) & Visual(x))", "all x.(Song(x) -> -Visual(x))", "(exists x.(Song(x) & Visual(x))", "-exists x.(Song(x) & Visual(x))", "all x.(Song(x) -> -Visual(x))", "(exists x.(Song(x) & Visual(x))", "exists x.(Song(x) & Visual(x))", "-exists x.(Song(x) & Visual(x))", "all x.(Song(x) -> -Visual(x))", "-exists x.(Song(x) & Visual(x))", "-exists x.(Song(x) & Visual(x))", "-exists x.(Song(x) & Visual(x))", "-exists x.(Song(x) & Visual(x))", "-exists x.(Song(x) & Visual(x))", "-exists x.(Song(x) & Visual(x))"]}
{"id": "folio_train_393", "nl": "All folk songs are songs. ", "fol": "all x.(IsFolkSong(x) -> IsSong(x))", "prediction": ["all x.(FolkSong(x) -> Songs(x))", "all x.(FolkSong(x) -> Song(x))", "all x y.((FolkSong(x) & FolkSong(y)) -> Songs(x))", "(all x.(FolkSong(x) -> Song(x))", "all x.(FolkSong(x) -> Songs(x))", "all x.((FolkSong(x) & Song(x)) -> Songs(x))", "(all x.(FolkSong(x) -> Song(x))", "all x.(FolkSong(x) -> Song(x))", "all x.(FolkSong(x) -> Songs(x))", "all x.(FolkSong(x) -> Song(x))", "all x.(FolkSong(x) -> Songs(x))", "all x.(FolkSong(x) -> Song(x))", "all x.(FolkSong(x) -> Songs(x))", "exists x.(FolkSong(x) & Song(y) & Song(z))", "all x.(FolkSong(x) -> Song(x))", "exists x.(FolkSong(x) & Song(x))"]}
{"id": "folio_train_394", "nl": "All videos are visual. ", "fol": "all x.(IsVideo(x) -> IsVisual(x))", "prediction": ["all x.(Video(x) -> Visual(x))", "all x.(Video(x) -> Visual(x))", "(VisualVideo(x) & -VisualVideo(x))", "(all x.(Video(x) -> Visual(x))", "all x.(Video(x) -> Visual(x))", "all x y.((Video(x) & Video(y)) -> Visual(x))", "all x.(Visual(x) -> Video(x))", "(AllVideosVisual(x) -> Visual(x))", "all x.(Video(x) -> Visual(x))", "All videos are visual.", "all x.(Visual(x) -> Video(x))", "all x.(Video(x) -> Visual(x))", "all x.(Video(x) -> Visual(x))", "all x.(Video(x) -> Visual(x))", "all x.(Video(x) -> Visual(x))", "all x.(Video(x) -> Visual(x))"]}
{"id": "folio_train_395", "nl": "All movies are videos.", "fol": "all x.(IsMovie(x) -> IsVideo(x))", "prediction": ["all x.(Movie(x) -> Video(x))", "all x.(Movie(x) -> Video(x))", "(all x.(Movie(x) -> Video(x))", "all x y.((Movie(x) & Movie(y)) -> Video(x))", "all x.(Movie(x) -> Video(x))", "(all x.(Movie(x) -> Video(x))", "all x.(Movie(x) -> Videos(x))", "all x.(Movie(x) -> Video(x))", "all x.(Movie(x) -> Videos(x))", "all x.(Movie(x) -> Video(x))", "all x.(Movie(x) -> Videos(x))", "all x.(Movie(x) -> Video(x))", "all x.(Movie(x) -> Video(x))", "all x.(Movie(x) -> Videos(x))", "all x.(Movie(x) -> Video(x))", "exists x.(Movie(x) & Video(x))"]}
{"id": "folio_train_396", "nl": "All sci-fi movies are movies.", "fol": "all x.(IsScifiMovie(x) -> IsMovie(x))", "prediction": ["all x.(SciFiMovie(x) -> Movie(x))", "all x.(SciFiMovie(x) -> Movie(x))", "all x.((SciFiMovie(x) & Movie(x)) -> Movie(x))", "all x y.((SciFiMovie(x) & Movie(y)) -> Movie(x))", "all x.((SciFi(x) & Movie(x)) -> Movie(x))", "all x.(SciFiMovie(x) -> Movie(x))", "all x.(SciFi(x) -> Movie(x))", "(all x.(SciFiFiMovie(x) -> Movie(x))", "(all x.(SciFiMovie(x) -> Movie(x))", "all x y.((SciFiMovie(x) & Movie(y)) -> Movie(x))", "all x.((SciFiMovie(x) & Movie(x)) -> Movie(x))", "all x.(SciFiMovie(x) -> Movie(x))", "all x.(Scis-FictionMovie(x) -> Movie(x))", "exists x.(Movie(x) & SciFi(x) & Movie(x))", "all x.(SciFiMovie(x) -> Movie(x))", "all x.(SciFiMovie(x) -> Movie(x))"]}
{"id": "folio_train_397", "nl": "Inception is a sci-fi movie.", "fol": "IsScifiMovie(Inception)", "prediction": ["All x.(Inception(x) -> SciFiMovie(x))", "(SciFiMovie(Inception) & SciFiMovie(Inception))", "Inception is a sci-fi movie.", "Inception (SciFiMovie)", "all x.(Inception(x) -> SciFiMovie(x))", "(SciFiMovie(Inception) & SciFiMovie(Inception))", "Inception is a sci-fi movie.", "all x.((Inception(x) & SciFiMovie(x)) -> Movie(x))", "All x.(Inception(x) -> SciFiMovie(x))", "Inception is a sci-fi movie.", "(SciFiMovie(Inception) & SciFiMovie(Inception))", "all x.(Inception(x) -> SciFiMovie(x))", "(SciFiMovie(Inception) -> SciFiMovie(Inception))", "Inception is a sci-fi movie.", "All x.(Inception(x) -> SciFiMovie(x))", "All x.(Inception(x) -> SciFiMovie(x))"]}
{"id": "folio_train_398", "nl": "Mac is neither a folk song nor a sci-fi movie.", "fol": "(-IsFolkSong(Mac) & -IsScifiMovie(Mac))", "prediction": ["all x.(Mac(x) -> (-FolkSong(x) & -SciFiMovie(x)))", "(-FolkSong(Mac) & -SciFiMovie(Mac))", "-(Mac(Mac) & FolkSong(Mac) & -SciFiMovie(Mac))", "(exists x.(Mac(x) & FolkSong(x)) & -exists y.(SciFiMovie(y) & SciFi(y))))", "-(FolkSong(Mac) & -SciFiMovie(Mac))", "all x.(Mac(x) -> (-FolkSong(x) & -SciFiMovie(x)))", "(-FolkSong(Mac) & -SciFiMovie(Mac))", "(exists x.(Mac(x) & FolkSong(x)) & -exists y.(SciFiMovie(y) & SciFiMovie(y))))", "(FolkSong(Mac) & -(SciFiMovie(Mac) | FolkSong(Mac))))", "all x.(Mac(x) -> (-FolkSong(x) | SciFiMovie(x)))", "-(Mac(Mac) & FolkSong(Mac) & -SciFiMovie(Mac))", "-(FolkSong(Mac) & -SciFiMovie(Mac))", "exists x.(Mac(x) & -(FolkSong(x) | SciFiMovie(x)))", "all x.(Mac(x) -> (-FolkSong(x) | SciFiMovie(x)))", "all x.(Mac(x) -> (-FolkSong(x) | SciFiMovie(x)))", "all x.(Mac(x) -> (-FolkSong(x) & -SciFiMovie(x)))"]}
{"id": "folio_train_399", "nl": "Inception is a folk song.", "fol": "IsFolkSong(Inception)", "prediction": ["All x.(Inception(x) -> FolkSong(x))", "Inception is a folk song.", "(FolkSong(Inception) & FolkSong(Inception))", "FolkSong(Inception)", "all x.(Inception(x) -> FolkSong(x))", "Inception is a folk song.", "Inception (FolkSong(Inception))", "(FolkSong(Inception) & FolkSong(Inception))", "Inception is a FolkSong(Inception)", "All x.(Inception(x) -> FolkSong(x))", "Inception is a folk song.", "(FolkSong(Inception) & FolkSong(Inception))", "all x.(Inception(x) -> FolkSong(x))", "All x.(Inception(x) -> FolkSong(x))", "all x.(Inception(x) -> FolkSong(x))", "All x.(Inception(x) -> FolkSong(x))"]}
{"id": "folio_train_400", "nl": "Inception is not a folk song.", "fol": "-IsFolkSong(Inception)", "prediction": ["-FolkSong(Inception)", "All x.(Inception(x) -> -FolkSong(x))", "(FolkSong(Inception) & -FolkSong(Inception))", "Inception is not a folk song.", "Inception - FolkSong(Inception)", "Inception is not a FolkSong(Inception)", "-FolkSong(Inception)", "(FolkSong(Inception) & -FolkSong(Inception))", "all x.(Inception(x) -> -FolkSong(x))", "-FolkSong(Inception)", "All x.(Inception(x) -> -FolkSong(x))", "Inception is not a folk song.", "Inception - FolkSong(in)", "(FolkSong(Inception) & -FolkSong(Inception))", "-FolkSong(Inception)", "all x.(Inception(x) -> -FolkSong(x))"]}
{"id": "folio_train_401", "nl": "Inception is either a video or a folk song.", "fol": "(IsVideo(Inception) | IsFolkSong(Inception))", "prediction": ["all x.(Inception(x) -> (Video(x) | FolkSong(x)))", "(Video(Inception) | FolkSong(Inception))", "all x.(Inception(x) -> (Video(x) | FolkSong(x)))", "(Video(Inception) | FolkSong(Inception))", "all x.(Inception(x) -> (Video(x) | FolkSong(x)))", "all x y.(Inception(x) -> (Video(y) | FolkSong(y)))", "all x.(Inception(x) -> (Video(x) | FolkSong(x)))", "all x y.(Inception(x) -> (Video(x) | FolkSong(x)))", "all x.(Inception(x) -> (Video(x) | FolkSong(x)))", "all x.(Inception(x) -> (Video(x) | FolkSong(x)))", "all x.(Inception(x) -> (Video(x) | FolkSong(x)))", "exists x.(Inception(x) & Video(x) & FolkSong(x))", "all x.(Inception(x) -> (Video(x) | FolkSong(x)))", "exists x.(Inception(x) & Video(x) | FolkSong(x))", "exists x.(Inception(x) & Video(x) & FolkSong(x))", "exists x.(Inception(x) & (Video(x) | FolkSong(x)))"]}
{"id": "folio_train_402", "nl": "Mac is a video.", "fol": "IsVideo(Mac)", "prediction": ["all x.(Mac(x) -> Video(x))", "(Video(Mac) & -Video(Mac))", "all x.(Mac(x) -> Video(x))", "all x y.((Mac(x) & Video(y)) -> Is(x,y))", "all x.(Mac(x) -> Video(x))", "(Video(Mac))", "(Video(Mac) & -Video(Mac))", "all x.(Mac(x) -> Video(x))", "(Video(Mac))", "all x.(Mac(x) -> Video(x))", "all x.(Mac(x) -> Video(x))", "all x.(Mac(x) -> Video(x))", "exists x.(Mac(x) & Video(x))", "All x.(Mac(x) -> Video(x))", "all x.(Mac(x) -> Video(x))", "exists x.(Mac(x) & Video(x))"]}
{"id": "folio_train_403", "nl": "All extroverts are overtly expressive.", "fol": "all x.(IsExtrovert(x) -> IsOvertlyExpressive(x))", "prediction": ["all x.(Extrovert(x) -> OvertlyExpressive(x))", "all x.(Extrovert(x) -> OvertlyExpressive(x))", "(Extrovert(x) -> OvertlyExpressive(x))", "all x y.((Extrovert(x) & Extrovert(y)) -> OvertlyExpressive(x))", "all x.(Extrovert(x) -> OvertlyExpressive(x))", "all x y.((Extrovert(x) & Extrovert(y)) -> OvertlyExpressive(x))", "all x.(ExpectiveExtrovert(x) -> OvertlyExpressive(x))", "all x.(Extrovert(x) -> OvertlyExpressive(x))", "all x.(Extrovert(x) -> OvertlyExpressive(x))", "all x.(Extrovert(x) -> OvertlyExplicit(x))", "all x.(Extrovert(x) -> OvertlyExpressive(x))", "all x.(Extrovert(x) -> OvertlyExpressive(x))", "all x.(Extrovert(x) -> OvertlyExpressive(x))", "all x.(Extrovert(x) -> OvertlyExplicit(x))", "all x.(Extrovert(x) -> Expressive(x))", "all x.(Extrovert(x) -> OvertlyExpressive(x))"]}
{"id": "folio_train_404", "nl": "People are either extroverts or introverts.", "fol": "all x.(IsExtrovert(x) | IsIntrovert(x))", "prediction": ["all x.(Person(x) -> (Extrovert(x) | Introvert(x)))", "(Extrovert(Person) | Introvert(Person))", "all x.(Person(x) -> (Extrovert(x) | Introvert(x)))", "all x.((Person(x) & (Extrovert(x) | Introvert(x))) -> (Extrovert(x) | Introvert(x)))", "all x.(People(x) -> (Extrovert(x) | Introvert(x)))", "all x y.((Person(x) & Extrovert(y)) | Introvert(y))", "all x.(Person(x) -> (Extrovert(x) | Introvert(x)))", "all x y.((Person(x) & Extrovert(x)) | Introvert(y))", "all x.(Person(x) -> (Extrovert(x) | Introvert(x)))", "exists x.(People(x) & (Extrovert(x) | Introvert(x)))", "all x y.((Person(x) & Extrovert(y)) | Introvert(y))", "all x.(Person(x) -> (Extrovert(x) | Introvert(x)))", "exists x.(People(x) & (Extrovert(x) | Introvert(x)))", "exists x.(Person(x) & (Extrovert(x) | Introvert(x)))", "exists x.(Person(x) & (Extrovert(x) | Introvert(x)))", "exists x.(Person(x) & (Extrovert(x) | Introvert(x)))"]}
{"id": "folio_train_405", "nl": "If someone is an introvert, then they are shy and reticent. ", "fol": "all x.(IsIntrovert(x) -> IsShyAndReticent(x))", "prediction": ["all x.(Introvert(x) -> (Shy(x) & Reticent(x)))", "all x.(Introvert(x) -> (Shy(x) & Reticent(x)))", "all x.((Introvert(x) & Shy(x) & Reticent(x)) -> Introvert(x))", "all x.(Introverted(x) -> (Shy(x) & Reticent(x)))", "all x y.((Introvert(x) & Person(y)) -> (Shy(y) & Reticent(y)))", "all x.((Introvert(x) & Shy(x) & Reticent(x)) -> Introvert(x))", "all x.(Introvert(x) -> (Shy(x) & Reticent(x)))", "all x.(Intravert(x) -> (Shy(x) & Reticent(x)))", "all x.(Introverted(x) -> ShyAndReticent(x))", "all x y.((Introvert(x) & Shy(y)) -> Reticent(y))", "all x.(Interpret(x) -> (Shy(x) & Reticent(x)))", "exists x.(Intravert(x) & Shy(x) & Reticent(x))", "all x.((Introvert(x) & Shy(x) & Retincent(x)) -> Introvert(x))", "all x.(Introvert(x) -> (Shy(x) & Reticent(x)))", "all x.((Introvert(x) & Shy(x) & Reticent(x)) -> Introvert(x))", "all x.(Introverted(x) -> ShyAndReticent(x))"]}
{"id": "folio_train_406", "nl": "No shy and reticent person likes to talk to strangers.", "fol": "all x.(IsShyAndReticent(x) -> -LikesToTalkToStrangers(x))", "prediction": ["all x.((Person(x) & Shy(x) & Reticent(x)) -> LikesToTalkToSons(x))", "-exists x.(Shy(x) & Reticent(x) & LikesToTalkToSons(x))", "no shy and reticent person likes to talk to strangers.", "-(Shy(Person) & Reticent(Person)) -> LikesToTalkToSons(Person))", "-exists x.(Person(x) & Shy(x) & Reticent(x) & LikesToTalkToSons(x))", "all x.(ShyAndReticentPerson(x) -> LikesToTalkToSons(x))", "all x.((Person(x) & Shy(x) & Reticent(x)) -> LikesToTalkToSons(x))", "-exists x.(Shy(x) & Reticent(x) & LikesToTalkToSnakes(x))", "all x.(ShyAndReticentPerson(x) -> LikesToTalkToSonders(x))", "-exists x.(Shy(x) & Reticent(x) & LikesToTalkToSonders(x))", "all x y.((Person(x) & Shy(x) & Reticent(x)) -> LikesToTalkToSons(x,y))", "-(ShyPerson(x) & Reticent(x)) -> LikesToTalkToSons(x))", "all x.((Person(x) & Shy(x) & Reticent(x)) -> LikesToTalkToSons(x))", "all x.((Person(x) & Shy(x) & Reticent(x)) -> LikesToTalkToStranges(x))", "-exists x.(ShyPerson(x) & ReticentPerson(x) & LikesToTalkToStranges(x))", "-exists x.(Shy(x) & Reticent(x) & LikesToTalkToStranges(x))"]}
{"id": "folio_train_407", "nl": "Jeff is not an extrovert and someone who likes to talk to strangers.", "fol": "(-IsExtrovert(Jeff) & -LikesToTalkToStrangers(Jeff))", "prediction": ["(-Extrovert(Jeff) & LikesToTalkToSonders(Jeff))", "all x.(Jeff(x) -> (-Extrovert(x) & LikesToTalkToSonders(x)))", "-(Extrovert(Jeff) & LikesToTalkToSonders(Jeff))", "all x.((Jeff(x) & -Extrovert(x)) -> LikesToTalkToSons(x))", "all x.(Jeff(x) -> (-Extrovert(x) & LikesToTalkToSnakes(x)))", "(-Extrovert(Jeff) & LikesToTalkToSnakes(Jeff))", "\u2013 (-Extrovert(Jeff) & LikesToTalkToSonders(Jeff)))", "all x.((Jeff(x) & -Extrovert(x) & LikesToTalkToSonders(x)) -> -Extrovert(x))", "-(Extrovert(Jeff) & LikesToTalkToSnakes(Jeff))", "(-Extrovert(Jeff) & LikesToTalkToScary(Jeff))", "all x.(Jeff(x) -> (-Extrovert(x) & LikesToTalkToSons(x)))", "(-Extrovert(Jeff) & LikesToTalkToSons(Jeff))", "-(Extrovert(Jeff) & LikesToTalkToSonders(Jeff))", "all x.(Jeff(x) -> (-Extrovert(x) & LikesToTalkToScary(x)))", "(-extrovert(Jeff) | LikesToTalkToSonders(Jeff))", "(-Extrovert(Jeff) & LikesToTalkToSnorts(Jeff))"]}
{"id": "folio_train_408", "nl": "Jeff is a shy and reticent person.", "fol": "IsShyAndReticent(Jeff)", "prediction": ["all x.(Jeff(x) -> (Shy(x) & Reticent(x)))", "(Shy(Jeff) & Reticent(Jeff))", "all x.(Jeff(x) -> (Shy(x) & Reticent(x)))", "Jeff is shy and reticent.", "(Shy(Jeff) & Reticent(Jeff))", "(ShyAndReticentPerson(Jeff)", "all x.((Jeff(x) & Shy(x) & Reticent(x)) -> Reticent(x))", "Jeff is shy and reticent.", "all x.(Jeff(x) -> (Shy(x) & Reticent(x)))", "(Shy(Jeff) & Reticent(Jeff))", "all x.(Judy(x) -> (Shy(x) & Reticent(x)))", "Jeff is shy and reticent.", "all x.((Jeff(x) & Shy(x) & Reticent(x)) -> Shy(x))", "(Shy(Jeff) & Retinent(Jeff))", "Jeff is shy and reticent.", "all x.(Jeff(x) -> (Shy(x) & Reticent(x)))"]}
{"id": "folio_train_409", "nl": "Jeff is overtly expressive and likes to talk to strangers.", "fol": "(IsOvertlyExpressive(Jeff) & LikesToTalkToStrangers(Jeff))", "prediction": ["all x.(Jeff(x) -> (OvertlyExpressive(x) & LikesToTalkToSonders(x)))", "(OvertlyExpressive(Jeff) & LikesToTalkToSonders(Jeff))", "all x y.((Jeff(x) & Stranger(y)) -> (OvertlyExpressive(x) & LikesToTalkTo(x,y)))", "all x.((Jeff(x) & OvertlyExpressive(x) & LikesToTalkToStranges(x)) -> OvertlyExpressive(x))", "-(OvertlyExpressive(Jeff) & LikesToTalkToSonders(Jeff))", "(OvertlyExpressive(Jeff) & LikesToTalkToStranges(Jeff))", "all x.((Jeff(x) & OvertlyExplicit(x)) -> LikesToTalkToSonders(x))", "all x y.((Jeff(x) & Stranger(y)) -> (OvertlyExpressive(x) & LikesToTalkTo(x,y)))", "all x.(Jeff(x) -> (OvertlyExpressive(x) & LikesToTalkToSonders(x)))", "(OvertlyExpressive(Jeff) & LikesToTalkToScary(Jeff))", "-(OvertlyExpressive(Jeff) & LikesTalkToSonders(Jeff))", "(OvertlyExpressive(Jeff) & LikesToTalkToSonders(Jeff))", "all x.((Jeff(x) & OvertlyExplicit(x)) -> LikesToTalkToStranges(x))", "all x.(Jeff(x) -> (OvertlyExpressive(x) & LikesToTalkToScary(x)))", "(overtlyExplicit(Jeff) & LikesToTalkToSnakes(Jeff))", "(OvertlyExpressive(Jeff) & LikesToTalkToStrangers(Jeff))"]}
{"id": "folio_train_410", "nl": "If Jeff is either overtly expressive and likes to talk to strangers or neither overtly expressive nor likes to talk to strangers, then Jeff is neither an extrovert nor likes to talk to strangers.", "fol": "(((IsOvertlyExpressive(Jeff) & LikesToTalkToStrangers(Jeff)) | (-IsOvertlyExpressive(Jeff) & -LikesToTalkToStrangers(Jeff))) -> (-IsExtrovert(Jeff) & -LikesToTalkToStrangers(Jeff)))", "prediction": ["all x.((Jeff(x) & (OvertlyExpressive(x) & LikesToTalkToSnakes(x) | -OvertlyExpressive(x) & LikesToTalkToSnakes(x))) -> -Extrovert(x) & -LikesToTalkToSnakes(x))", "all x.((Jeff(x) & (OvertlyExpressive(x) & LikesToTalkToStrangers(x) | -OvertlyExpressive(x) & LikesToTalkToStrangers(x))) -> -Extrovert(x) & -LikesToTalkToStrangers(x))", "all x.((Fish(x) & (OvertlyExpressive(x) & LikesToTalkToSnakes(x) | -OvertlyExpressive(x) & LikesToTalkToSnakes(x))) -> -Extrovert(x) & -LikesToTalkToSnakes(x))", "((OvertlyExpressive(Jeff) & LikesToTalkToSnakes(Jeff)) | (-OvertlyExpressive(Jeff) & LikesToTalkToSnakes(Jeff))))", "all x.((Jeff(x) & ((OvertlyExpressive(x) & LikesToTalkToSnakes(x)) | -(OvertlyExpressive(x) & LikesToTalkToSnakes(x)))) -> -Extrovert(x) & -LikesToTalkToSnakes(x)))", "all x.((Judy(x) & (OvertlyExpressive(x) & LikesToTalkToStrangers(x) | -OvertlyExpressive(x) & LikesToTalkToStrangers(x))) -> -Extrovert(x) & -LikesToTalkToStrangers(x))", "((OvertlyExpressive(Jeff) & LikesToTalkToStrangers(Jeff)) | (-OvertlyExpressive(Jeff) & LikesToTalkToStrangers(Jeff))))", "all x.((Jeff(x) & (OvertlyExpressive(x) & LikesToTalkToSonsors(x)) | (-OvertlyExpressive(x) & LikesToTalkToSonsors(x)))))", "all x.((Fish(x) & (OvertlyExpressive(x) & LikesToTalkToStrangers(x) | -OvertlyExpressive(x) & LikesToTalkToStrangers(x))) -> -Extrovert(x) & -LikesToTalkToStrangers(x))", "all x y.((Jeff(x) & (OvertlyExpressive(x) & LikesToTalkToSnakes(x)) | (-OvertlyExpressive(x) & LikesToTalkToSnakes(x)))))", "all x.((Jeff(x) & (OvertlyExplicit(x) & LikesToTalkToSwissmen(x) | -OvertlyExplicit(x) & LikesToTalkToSwissmen(x))) -> (-Extrovert(x) & -LikesToTalkToSwissmen(x)))", "all x.((Judg(x) & (OvertlyExpressive(x) & LikesToTalkToSonders(x) | -OvertlyExpressive(x) & LikesToTalkToSonders(x))) -> (-Extrovert(x) & -LikesToTalkToSonders(x)))", "(all x.((Jeff(x) & OvertlyExpressive(x) & LikesToTalkToSnorts(x)) | (-OvertlyExpressive(x) & LikesToTalkToSnorts(x))))", "(all x.((Jeff(x) & OvertlyExplicit(x) & LikesToTalkToSonders(x)) | (-OvertlyExplicit(x) & LikesToTalkToSonders(x)) | (-OvertlyExplicit(x) & LikesToTalkToSonders(x))))", "all x.((Jeff(x) & ((OvertlyExplicit(x) & LikesToTalkToSnakes(x)) | (-OvertlyExplicit(x) & LikesToTalkToSnakes(x)) | (-OvertlyExplicit(x) & LikesToTalkToSnakes(x)))))", "(all x.((Jeff(x) & OvertlyExpressive(x) & LikesToTalkToStorms)) | (-OvertlyExpressive(x) & LikesToTalkToStorms(x))))"]}
{"id": "folio_train_411", "nl": "No low-scoring players are top players in the league.", "fol": "all x.(IsLowScoringPlayer(x) -> -IsTopPlayerInLeague(x))", "prediction": ["-exists x.(LowScoringPlayer(x) & TopPlayer(x))", "all x.((LowScoringPlayer(x) & TopPlayer(x)) -> -LowScoringPlayer(x))", "all x.(LowScoringPlayer(x) -> TopPlayer(x))", "-exists x.(LowScoringPlayer(x) & TopPlayer(x))", "all x.((LowScoringPlayer(x) & TopPlayer(x)) -> -LowScoringPlayer(x))", "all x.((LowScoringPlayer(x) & TopPlayerInLiga(x)) -> -LowScoringPlayer(x))", "(exists x.(LowScoringPlayer(x) & -TopPlayer(x)))", "all x.((LowScoringPlayer(x) & TopPlayer(x)) -> -(LowScoringPlayer(x) & TopPlayer(x)))", "-exists x.(LowScoringPlayer(x) & TopPlayer(x))", "-exists x.(Player(x) & LowScoring(x) & TopPlayer(x))", "all x.(LowScoringPlayer(x) -> TopPlayer(x))", "-all x.(LowScoringPlayer(x) -> TopPlayer(x))", "-exists x.((LowScoringPlayer(x) & TopPlayer(x))", "-exists x.(LowScoringPlayer(x) & TopPlayerInLiga(x))", "-exists x.(LowScorePlayer(x) & TopPlayer(x))", "-exists x.(LowScoringPlayer(x) & TopPlayer(x))"]}
{"id": "folio_train_412", "nl": "Basketball players are either top players in the league or successfully shoot a high percentage of 3-pointers.", "fol": "all x.(IsTopPlayerInLeague(x) | SuccessfullyShootsHigh3PointerPercentage(x))", "prediction": ["all x.(BasketballPlayer(x) -> ((TopPlayer(x) & InLowerLiga(x)) | HighPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercent(x)))", "all x.(BasketballPlayer(x) -> ((TopPlayer(x) & InLiga(x)) | HighPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercent(x)))", "all x y.((BasketballPlayer(x) & Player(y) & (TopPlayerInLowerLiga(x,y) | HighPercentage3Pointers(y))) -> TopPlayer(x,y))", "all x.(BasketballPlayer(x) -> ((TopPlayerInLowerLowerLower(x) | HighPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercent(x)))", "(all x.(BasketballPlayer(x) -> (TopPlayerInLocation(x) | HighPercentage3Pointers(x))))", "all x y.((BasketballPlayer(x) & (TopPlayer(x,y) | HighPercentage(x,y))) -> (SuccessfullyShots(x,y)))", "all x.(BasketballPlayer(x) -> (TopPlayerInLowerLiga(x) | HighPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercent(x)))", "all x y.((BasketballPlayer(x) & League(y)) -> ((TopPlayer(x,y) | HighPercentage(x,y))))", "all x.(BalloonBasketballPlayer(x) -> (TopPlayer(x) | HighPercentage3Pointers(x)))", "all x.(BasketballPlayer(x) -> ((TopPlayerInLowerLiga(x) | HighPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercent(x))))", "all x.(BasketballPlayer(x) -> (TopPlayer(x) | HighPercentage3Pointers(x)))", "(all x.(BasketballPlayer(x) -> (TopPlayerInLeague(x) | HighPercentage3Pointers(x))))", "(all x.(BasketballPlayer(x) -> (TopPlayer(x) | HighPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercent(x))))", "all x.(BasketballPlayer(x) -> ((TopPlayer(x) & InLowerLiga(x)) | HighPercentage3Pointers(x))))", "all x.(BasketballPlayer(x) -> ((TopPlayer(x) & InLiga(x)) | HighPercentage3Pointers(x))))", "all x y.((BasketballPlayer(x) & Player(y) & TopInLeague(x,y)) | HighPercentage(y,x))"]}
{"id": "folio_train_413", "nl": "All players who successfully shoot a high percentage of 3-pointers are solid at shooting 2-pointers.", "fol": "all x.(SuccessfullyShootsHigh3PointerPercentage(x) -> SolidAtShooting2Pointers(x))", "prediction": ["all x.((Player(x) & HighPercent3Pointer(x)) -> SolidAtShooting2Pointers(x))", "all x.((Player(x) & HighPercentageOf3Pointers(x)) -> SolidAtShooting2Pointers(x))", "all x y.((Player(x) & HighPercentageOf3Pointers(x) & Shoots(x,y)) -> SolidAtShooting(x,y))", "all x.(SuccessfullyShootsHighPercentageOf3Pointers(x) -> SolidAtShooting2Pointers(x))", "all x.(SuccessfullyShotsHighPercent3Pointers(x) -> SolidAtStopping2Pointers(x))", "all x.((Player(x) & HighPercent3Pointers(x)) -> SolidAtShooting2Pointers(x))", "all x.((Player(x) & HighPercentageOf3Pointers(x)) -> SolidAtShooting2Pointers(x))", "all x.((Player(x) & HighPercentPercent3Pointers(x)) -> SolidAtShooting2Pointers(x))", "all x y.((Player(x) & HighPercentageOf3Pointers(x) & Shoots(x,y)) -> SolidAtShooting(x,y))", "all x y.((Player(x) & HighPercent(x,3) & Shoots(x,2)) -> SolidAtShooting(x,2))", "(all x.(SuccessfullyShotsHighPercent(x,3)) -> SolidAtStoring2,3))", "all x.((Player(x) & ShootsHighPercent3Pointers(x)) -> SolidAtShooting2-Pointers(x))", "all x.(SuccessfullyShotsHighPercentageOf3Pointers(x) -> SolidAtStopping2Pointers(x))", "all x.((Player(x) & SucceedsHighPercentageOf3Pointers(x)) -> SolidAtStopping2Pointers(x))", "all x.((Player(x) & HighPercent3PointerSuccess(x)) -> SolidAtStopping2Pointers(x))", "all x.(SuccessfulShot(x,3/3) -> SolidAtStopping(x,2))"]}
{"id": "folio_train_414", "nl": "No players who are solid at shooting 2-pointers are bad at mid-range shots.", "fol": "-exists x.(SolidAtShooting2Pointers(x) -> BadAtMidRangeShots(x))", "prediction": ["all x.((Player(x) & SolidAtShooting2Pointers(x)) -> BadAtMidRangeShots(x))", "-exists x.(Player(x) & SolidAtShooting2Pointers(x) & BadAtMidRangeShots(x))", "-exists x.(Player(x) & SolidAtShooting(x,2) & BadAtMidRange(x))", "all x.((Player(x) & SolidAtShooting2-Pointers(x)) -> BadAtMidRangeShots(x))", "(exists x.(Player(x) & SolidAtShooting2Pointers(x)) & -BadAtMidRangeShots(x))", "all x.((Player(x) & SolidAtShooting2Pointers(x)) -> BadAtMidRangeShots(x))", "-exists x.(Player(x) & SolidAtShooting2Pointers(x) & BadAtMidRangeShots(x))", "-exists x.(Player(x) & SolidAtShooting(x,2) & BadAtMidRange(x))", "all x.((Player(x) & SolidAtShooting2Punches(x)) -> BadAtMidRangeShots(x))", "-all x.((Player(x) & SolidAtShooting2-Pointers(x)) -> BadAtMidRangeShots(x))", "all x.((Player(x) & SolidAtShooting2-Pointers(x)) -> BadAtMidRangeShots(x))", "-exists x.(Player(x) & SolidAtShooting2-Pointers(x) & BadAtMidRange(x))", "all x.((Player(x) & SolidAtShoting2Pointers(x)) -> BadAtMidRangeShots(x))", "all x.((Player(x) & SolidAtShooting2-Pointers(x)) -> BadAtMediumRangeShots(x))", "all x.((Player(x) & SolidAtShooting2Punches(x)) -> BadAtMediumRangeShoots(x))", "all x.((Player(x) & SolidAtShoting2Pointers(x)) -> BadAtMidRangeShots(x))"]}
{"id": "folio_train_415", "nl": "Candace is either a low-scoring player or successfully shoots a high percentage of 3-pointers.", "fol": "((IsLowScoringPlayer(Candace) & -SuccessfullyShootsHigh3PointerPercentage(Candace)) | (-IsLowScoringPlayer(Candace) & SuccessfullyShootsHigh3PointerPercentage(Candace)))", "prediction": ["all x.(Candace(x) -> ((LowScoringPlayer(x) | HighPercentage3Pointers(x))))", "(LowScoringPlayer(Candace) | HighPercentage3Pointers(Candace)))", "all x.((Candace(x) & (LowScoringPlayer(x) | HighPercentage(x))) -> (SuccessfullyShots(x,3)))", "all x.(Canace(x) -> ((LowScoringPlayer(x) | HighPercentage3Pointers(x))))", "all x.(Candace(x) -> ((LowScoringPlayer(x) | HighPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPlayPlay(xCandace(x))))", "(LowScoringPlayer(Candace) | HighPercentage3Pointers(Candace))", "all x y.((Candace(x) & LowScoring(x) & HighPercentPercent(y)) -> (SuccessfullyShoots(x,y)))", "all x.(Candace(x) -> ((LowScoringPlayer(x) | HighPercentage3Pointers(x))))", "all x.(Canace(x) -> ((LowScoringPlayer(x) | HighPercentage(x))))", "all x.((Candace(x) & (LowScoringPlayer(x) | HighPercentage(x))) -> HighPercentage(x))", "(LowScoringPlayer(Candace) | HighPercentage(Candace)))", "(LowScoringPlayer(Canace) | HighPercentage3Pointers(Canace))", "exists x.(Candace(x) & ((LowScoringPlayer(x) & Candace(x)) | HighPercentage3Pointers(x))))", "exists x.(Candace(x) & ((LowScoringPlayer(x) & -LowScoringPlayer(x)) | HighPercentage3Pointers(x))))", "all x y.((Candace(x) & LowScoringPlayer(y)) | HighPercentage(x,y))", "(LowScoringPlayer(Candace) | HighPercentage3Pointers(Candace))"]}
{"id": "folio_train_416", "nl": "Candace is a top player in the league.", "fol": "IsTopPlayerInLeague(Candace)", "prediction": ["all x.((Candace(x) & TopPlayer(x)) -> TopPlayerInLiga(x))", "Candace is a top player in the league.", "all x.((Candace(x) & TopPlayerInLiga(x)) -> TopPlayerInLiga(x))", "all x.(Candace(x) -> TopPlayerInLiga(x))", "Candace is top player in the league.", "(TopPlayerInLiga(Candace))", "(TopPlayerInLiga(Candace,Location))", "Candace is a TopPlayerInLiga(Candace)", "all x.((Candace(x) & TopPlayer(x)) -> TopPlayer(x))", "Candace is a top player in the league.", "all x.((Canace(x) & TopPlayer(x)) -> TopPlayerInLiga(x))", "all x.(Candace(x) -> TopPlayerInLiga(x))", "Candace is top player in the league.", "(TopPlayerInLiga(Candace,Load))", "all x.((Candace(x) & TopPlayerInLiga(x)) -> TopPlayer(x))", "Candace is top player in the league."]}
{"id": "folio_train_417", "nl": "Candace is bad at mid-range shots.", "fol": "BadAtMidRangeShots(Candace)", "prediction": ["all x.((Candace(x) & MidRange(x)) -> BadAt(x,Candace))", "all x.(Candace(x) -> BadAtMidRangeShots(x))", "(BadAtMidRangeShots(Candace))", "all x.(Canace(x) -> BadAtMidRangeShots(x))", "all x.((Candace(x) & MidRangeShoot(x)) -> Bad(x))", "all x y.((Candace(x) & MidRange(y)) -> BadAt(x,y))", "(BadAtMidRangeShots(Candace))", "all x.((Candidate(x) & BadAtMidRangeShots(x)) -> BadAt(x,y))", "(BadAtMidRangeShoots(Candace))", "all x.(Candace(x) -> BadAtMidRangeShots(x))", "all x.(Canace(x) -> BadAtMidRangeShots(x))", "(BadAtMidRange(Candace))", "exists x.(Candace(x) & BadAtMidRange(x))", "All x.(Canadian(x) -> BadAtMiddleRangeShoots(x))", "(BadAtMidRangeShots(Canace))", "exists x.(Candace(x) & BadAt(x,midrangeShots))"]}
{"id": "folio_train_418", "nl": "Candace is solid at shooting 2-pointers or bad at mid-range shots.", "fol": "(SolidAtShooting2Pointers(Candace) | BadAtMidRangeShots(Candace))", "prediction": ["(StandardAtShooting2Pointers(Candace) | BadAtShootingMidRangeShots(Candace))", "(SolidAtShooting2Pointers(Candace) | BadAtShootingMidRangeShots(Candace))", "all x.(Canace(x) -> ((StillAtShooting2Pointers(x) | BadAtShootingMidRangeShots(x))))", "all x.(Candace(x) -> ((StillAtShooting2Pointers(x) | BadAtShootingMidRangeShots(x))))", "(all x.(Candace(x) -> SolidAt(x,2)) | (BadAt(x,3) & MidRange(x))))", "(StillAtShooting2Pointers(Candace) | BadAtShootingMidRangeShots(Candace))", "all x.(Canace(x) -> (StillAtShooting2Pointers(x) | BadAtShootingMidRangeShots(x)))", "all x y.((Candace(x) & Shoots(x,2)) -> (SolidAt(x,2) | BadAt(x,5)))", "all x.(Canadian(x) -> (StillAtShooting2Pointers(x) | BadAtShootingMidRange(x)))", "(StandardAtShooting2Pointers(Candace) | BadAtShootingMidRangeShots(Candace))", "((StandardAtShooting2Pointers( Candace) | BadAtShootingMidRange( Candace)))", "(SolidAtShooting2Pointers(Candace) | BadAtShootingMidRangeShots(Candace))", "exists x.(Candace(x) & ((StandardAtShooting2Pointers(x) | BadAtShootingMidRangeShots(x))))", "all x.(Candace(x) -> (StillAtShooting2-Pointers(x) | BadAtShootingMittrangeShots(x)))", "all x.(Candidate(x) -> (SolidAtShooting2Pointers(x) | BadAtShootingMidRange(x)))", "exists x.(Candace(x) & ((SolidAt(x,2) & Shooting(x,2)) | BadAt(x,3))))"]}
{"id": "folio_train_419", "nl": "Candace is either solid at shooting 2-pointers or bad at mid-range shots.", "fol": "(SolidAtShooting2Pointers(Candace) | BadAtMidRangeShots(Candace))", "prediction": ["all x.(Canace(x) -> (StillAtShooting2Pointers(x) | BadAtShootingMidRangeShots(x)))", "(SolidAtShooting2Pointers(Candace) | BadAtShootingMidRangeShots(Candace))", "all x.(Candace(x) -> (StillAtShooting2Pointers(x) | BadAtShootingMidRangeShots(x)))", "(StillAtShooting2Pointers(Candace) | BadAtShootingMidRangeShots(Candace))", "(StandardAtShooting2Pointers(Candace) | BadAtShootingMidRangeShots(Candace))", "all x.(Canace(x) -> (SolidAtShooting2Pointers(x) | BadAtShootingMidRangeShots(x)))", "(SolidAtShooting2-Pointers( Candace) | BadAtShootingMidRangeShots( Candace))", "all x y.((Candace(x) & 2-Pointer(y)) -> (Solid(x,y) | Bad(x,y)))", "(Solid(Candace) | Bad(Candace))", "all x.(Candace(x) -> ((SolidAtShooting2-Pointers(x) | BadAtShootingMidRange(x))))", "all x y.((Canace(x) & Shoots2Pointers(x)) | (BadAtMidRange(x) & Shoots2Pointers(x,y))))", "exists x.(Candace(x) & ((Solid(x) & Shoots2-Pointers(x)) | Bad(x)))", "exists x.(Candidate(x) & ((Still(x) & Shoots2-Pointers(x)) | Bad(x) & ShootsMidRange(x))))", "all x.(Candace(x) -> (SolidAtShooting2Pointers(x) | BadAtShootingMidRangeShots(x)))", "all x.(Canadian(x) -> (StillAtShooting2Pointers(x) | BadAtShootingMidRangeShots(x)))", "exists x.(Candace(x) & (Still(x) | Bad(x)))"]}
{"id": "folio_train_420", "nl": "Candace is a low-scoring player or bad at mid-range shots.", "fol": "(IsLowScoringPlayer(Candace) | BadAtMidRangeShots(Candace))", "prediction": ["all x.(Candace(x) -> (LowScoringPlayer(x) | BadAtMidRangeShots(x)))", "(LowScoringPlayer(Candace) | BadAtMidRangeShots(Candace))", "all x.((Candace(x) & (LowScoringPlayer(x) | BadAtMidRangeShots(x))) -> Candace(x))", "all x.(Canace(x) -> (LowScoringPlayer(x) | BadAtMidRangeShots(x)))", "all x.(Candace(x) -> (LowScoringPlayer(x) | BadAtMidRange(x)))", "(LowScoringPlayer(Canace) | BadAtMidRangeShots(Canace))", "(LowScoringPlayer(Candace) | BadAtMidRangeShots(Candace))", "all x.(Candace(x) -> ((LowScoringPlayer(x) | BadAtMidRangeShots(x))))", "all x y.((Candace(x) & LowScoringPlayer(y)) | BadAtMidRangeShots(x,y))", "all x.(Canace(x) -> (LowScoringPlayer(x) | BadAtMidRange(x)))", "all x.((Candace(x) & (LowScoringPlayer(x) | BadAtMidRange(x))) -> Candace(x))", "(LowScoringPlayer(Candace) | BadAtMidRangeShoots(Candace))", "exists x.(Candace(x) & ((LowScoringPlayer(x) & -LowShootingPlayer(x)) | BadAtMidRangeShots(x))))", "(LowScoringPlayer( Candace) | BadAtMidRangeShots( Candace))", "exists x.(Candace(x) & ((LowScoringPlayer(x) & -BadAtMidRange(x)) | BadAtMidRange(x))))", "all x.(Candace(x) -> (LowScoringPlayer(x) | BadAtMidRangeShots(x)))"]}
{"id": "folio_train_421", "nl": "Candace is either a low-scoring player or bad at mid-range shots.", "fol": "(IsLowScoringPlayer(Candace) | BadAtMidRangeShots(Candace))", "prediction": ["all x.(Candace(x) -> (LowScoringPlayer(x) | BadAtMidRangeShots(x)))", "(LowScoringPlayer(Candace) | BadAtMidRangeShots(Candace))", "all x.(Canace(x) -> (LowScoringPlayer(x) | BadAtMidRangeShots(x)))", "all x.(Candace(x) -> (LowScoringPlayer(x) | BadAtMidRange(x)))", "all x y.((Candace(x) & LowScoringPlayer(x)) | BadAtMidRangeShots(x,y)) -> (LowScoringPlayer(x) | BadAtMidRangeShots(x,y)))", "(LowScoringPlayer(Candace) | BadAtMidRangeShoots(Candace))", "(LowScoringPlayer(Canace) | BadAtMidRangeShots(Canace))", "(LowScoring(Candace) | BadAtMidRange(Candace))", "exists x.(Candace(x) & ((LowScoringPlayer(x) & -LowScoringPlayer(x)) | BadAtMidRangeShots(x))))", "all x.((Candace(x) & LowScoringPlayer(x)) | BadAtMidRangeShoots(x))", "all x.(Canace(x) -> (LowScoringPlayer(x) | BadAtMidRange(x)))", "all x.((Candace(x) & LowScoring(x)) | BadAtMidRange(x))", "all x.(Candace(x) -> (LowScoringPlayer(x) | BadAtMidRangeShots(x)))", "exists x.(Candace(x) & ((LowScoringPlayer(x) & -LowShootingPlayer(x)) | BadAtMidRangeShots(x))))", "(LowScoringPlayer( Candace) | BadAtMidRangeShots( Candace))", "all x.(Candace(x) -> (LowScoringPlayer(x) | BadAtMidRange(x)))"]}
{"id": "folio_train_422", "nl": "Candace is either a player who successfully shoots a high percentage of 3-pointers or is bad at mid-range shots.", "fol": "(SuccessfullyShootsHigh3PointerPercentage(Candace) | BadAtMidRangeShots(Candace))", "prediction": ["all x.((Player(x) & (SuccessfullyShotsHighPercent3Pointers(x) | BadAtMidRangeShots(x))) -> Candace(x))", "all x.((Player(x) & HighPercent3Pointers(x)) | BadAtMidRangeShots(x)) -> Candace(x))", "(Player(Candace) & (SuccessfullyShotsHighPercent3Pointers(Candace) | BadAtMidRangeShots(Candace)))", "all x.(Candace(x) -> ((SuccessfullyShotsHighPercent3Pointers(x) | BadAtMidRangeShots(x))))", "all x y.((Player(x) & Candace(y)) -> (SuccessfullyShootsHighPercent3Pointers(x,y) | BadAtMidRangeShots(y,x)))", "((Player( Candace) & HighPercent3Pointers( Candace)) | BadAtMidRangeShots( Candace)))", "all x.(Candace(x) -> ((SuccessfullyShootsHighPercent3Pointers(x) | BadAtMidRangeShots(x))))", "(Player(Candace) & (SuccessfullyShootsHighPercent3Pointers(Candace) | BadAtMidRangeShots(Candace)))", "all x y.((Player(x) & Player(y) & HighPercent3Pointers(x) & (BadAtMidRangeShots(y) | BadAtMidRangeShots(y))) -> Candace(x))", "all x.(Canace(x) -> ((SuccessfullyShootsHighPercent3Pointers(x) | BadAtMidRangeShots(x))))", "exists x.(Player(x) & ((SuccessfullyShotsHighPercent3Pointers(x) & -SuccessfulMidRangeShots(x)) | BadAtMidRangeShots(x))))", "(SuccessfullyShootsHighPercent3Pointers(Candace) | BadAtMidRangeShots(Candace))", "all x.((Player(x) & HighPercent3Pointers(x)) | BadAtMidRangeShots(x)) -> Candace(x))", "exists x.(Player(x) & (SuccessfullyShotsHighPercent3Pointers(x) | BadAtMidRangeShots(x)))", "((Player( Candace) & HighPercent3Pointers( Candace)) | BadAtMidRangeShots( Candace)))", "all x.((Player(x) & HighPercent3Pointers(x)) | BadAtMidRangeShots(x)) -> Candace(x))"]}
{"id": "folio_train_423", "nl": "If Candace is not solid at shooting 2-pointers and bad at mid-range shots, then Candace is not solid at shooting 2-pointers and is a player who successfully shoots a high percentage of 3-pointers.", "fol": "(-(SolidAtShooting2Pointers(Candace) & BadAtMidRangeShots(Candace)) -> (-SolidAtShooting2Pointers(Candace) & SuccessfullyShootsHigh3PointerPercentage(Candace)))", "prediction": ["all x.((Player(x) & -StandardAtShooting2-Pointers(x) & BadAtShootingMidRangeShots(x)) -> (-StandardAtShooting2-Pointers(x) & HighPercentPercentPercentShooting3Pointers(x)))", "all x.((Candace(x) & -StandardAtShooting2-Pointers(x) & BadAtShootingMidRangeShots(x)) -> (-StandardAtShooting2-Pointers(x) & HighPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercent(x)))", "all x.((Player(x) & -StillAtShooting2-Pointers(x) & BadAtMidRangeShots(x)) -> (-StillAtShooting2-Pointers(x) & HighPercentPercentPercentShooting3Pointers(x)))", "(all x.((Candace(x) & -StandardAtShooting2Pointers(x) & BadAtShootingMidRangeShots(x)) -> -StandardAtShooting2Pointers(x)) & all y.((Candace(y) & HighPercentageOf3Pointers(y)) -> SuccessfulPlayer(y)))", "(-StandardAtShooting2Pointers(Candace) & BadAtShootingMidRangeShots(Candace) & HighPercentPercentPercentShooting3Pointers(Candace))", "all x y.((Player(x) & Candace(y) & -StandardAtShooting2-Pointers(y) & BadAtShootingMidRangeShots(y)) -> (-StandardAtShooting2-Pointers(x,y) & HighPercentPercentPercentShooting3Pointers(x,y)))", "all x.((Player(x) & -SolidAtShooting2-Pointers(x) & BadAtMidRangeShots(x)) -> (-SolidAtShooting2-Pointers(x) & HighPercent3PointerShot(x)))", "(all x.((Candace(x) & SolidAtShooting2Pointers(x) & BadAtMidRangeShots(x)) -> -StandardAtShooting2Pointers(x)) & all y.((Candace(y) & HighPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercent(y)) -> HighPercentage(y)))", "all x y.((Candace(x) & -StandardAtShooting2Pointers(x) & BadAtShootingMidRangeShots(x)) -> (-StandardAtShooting2Pointers(x) & HighPercentageOf3Pointers(y)))", "all x.((Candace(x) & -SolidAtShooting2Pointers(x) & BadAtShootingMidRangeShots(x)) -> (-SolidAtShooting2Pointers(x) & HighPercentPercentPercentPercentShoots3Pointers(x)))", "all x.((Candidate(x) & SolidAtShooting2Pointers(x) & BadAtShootingMidRangeShots(x)) -> (-SolidAtShooting2Pointers(x) & HighPercent3PointerShot(x)))", "all x.((Candace(x) & -StandardAtShooting2Pointers(x) & BadAtShootingMidRangeShots(x)) -> (-StandardAtShooting2Pointers(x) & HighPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercent(x)))", "(all x.((Candace(x) & -StillAtShooting2-Pointers(x) & BadAtMidRangeShots(x)) -> -StillAtShooting2-Pointers(x)) & all y.((Candace(y) & HighPercentageOf3Pointers(y)) -> SuccessfulPlayer(y)))", "all x.((Player(x) & -StandardAtShooting2Pointers(x) & BadAtShootingMidRangeShots(x)) -> (-StandardAtShooting2Pointers(x) & HighPercentPercentPercentPercentShooting3Pointers(x)))", "all x y.((Player(x) & Candace(y) & -StillAtShooting2-Pointers(x) & BadAtMidRangeShots(x)) -> (-StillAtShooting2-Pointers(y) & HighPercentPercentShoots3Pointers(y)))", "all x.((Candace(x) & SolidAtShooting2-Pointers(x) & BadAtMidRangeShots(x)) -> (-StandardAtShooting2-Pointers(x) & HighPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercent(x)))"]}
{"id": "folio_train_424", "nl": "If Candace is solid at shooting 2-pointers or successfully shoots a high percentage of 3-pointers, then Candace is a top player in the league and bad at mid-range shots.", "fol": "((SolidAtShooting2Pointers(Candace) | SuccessfullyShootsHigh3PointerPercentage(Candace)) -> (IsTopPlayerInLeague(Candace) & BadAtMidRangeShots(Candace)))", "prediction": ["all x.((Candace(x) & (StillAtShooting2Pointers(x) | HighPercentageOf3Pointers(x))) -> (TopPlayerInLiga(x) & BadAtMidRangeShots(x)))", "all x.((Candace(x) & (SolidAtShooting2Pointers(x) | HighPercentageOf3Pointers(x))) -> (TopPlayerInLiga(x) & BadAtMidRangeShots(x)))", "((StandardAtShooting2Pointers(Candace) | HighPercentageOf3Pointers(Candace))) -> (TopPlayerInLiga(Candace) & BadAtMidRangeShots(Candace)))", "(SolidAtShooting2Pointers(Candace) | HighPercentageOf3Pointers(Candace)) & TopPlayerInLiga(Candace) & BadAtMidRangeShots(Candace))", "all x.((Candidate(x) & (StandardAtShooting2Pointers(x) | HighPercentageOf3Pointers(x))) -> (TopPlayerInLiga(x) & BadAtMidRangeShots(x)))", "((SolidAtShooting2Pointers(Candace) | HighPercentageOf3Pointers(Candace)) & TopPlayerInLiga(Candace) & BadAtMidRangeShots(Candace))", "all x y.((Candace(x) & SolidAtShooting(x,2) | HighPercentageAtShooting(x,3)) -> (TopPlayer(x) & BadAtMidRange(x)))", "all x.((Candidate(x) & SolidAtShooting2Pointers(x) | HighPercentageOf3Pointers(x)) -> (TopPlayerInLiga(x) & BadAtMidRangeShots(x)))", "all x y.((Candace(x) & (SilentAtShooting2-Pointers(x) | HighPercentageOf3Pointers(x))) -> (TopPlayerInLiga(x) & BadAtMidRangeShots(x)))", "all x.((Candace(x) & (SolidAtShooting2-Pointers(x) | HighPercentageOf3Pointers(x))) -> (TopPlayer(x) & BadAtMidRangeShots(x)))", "all x y.((Candace(x) & SolidAtShooting(x,2) | HighPercentageOf(x,3,3)) -> (TopPlayer(x) & BadAtMidRange(x)))", "((StandardAtShooting2-Pointers(Candace) | HighPercentageOf3Pointers(Candace))) -> (TopPlayerInLiga(Candace) & BadAtMidRangeShots(Candace)))", "all x.((Candidate(x) & SolidAtShooting(x,2) | HighPercentageOfThreePointers(x))) -> (TopPlayer(x) & BadAtMidRange(x)))", "all x.((Candace(x) & (StillAtShooting2-Pointers(x) | HighPercentageOf3Pointers(x))) -> (TopPlayer(x) & BadAtMidRangeShots(x)))", "all x.((Candace(x) & (SolidAtShooting2Punches(x) | HighPercentageOf3Punches(x))) -> (TopPlayer(x) & BadAtMidRangeShots(x)))", "all x.((Canace(x) & (StillAtShooting2-Pointers(x) | HighPercentageOfThreePointers(x))) -> (TopPlayer(x) & BadAtMidRangeShots(x)))"]}
{"id": "folio_train_425", "nl": "No plants are fungi.", "fol": "all x.(IsPlant(x) -> -IsFungi(x))", "prediction": ["-exists x.(Plant(x) & Fungus(x))", "all x.(Plant(x) -> -Fungus(x))", "-exists x.(Plant(x) & Fungus(x))", "all x.(Plant(x) -> -Fungus(x))", "-exists x.(Plant(x) & Fungi(x))", "all x.(Plant(x) -> -Fungi(x))", "(exists x.(Plant(x) & Fungus(x)))", "-exists x.(Plant(x) & Fungus(x))", "all x.(Plant(x) -> -Fungus(x))", "(exists x.(Plant(x) & Fungus(x)))", "-exists x.(Plant(x) & Fungi(x))", "all x.(Plant(x) -> -Fungi(x))", "-exists x.(Plant(x) & -Fungus(x))", "-exists x.(Plant(x) & Fungus(x))", "all x.(Plant(x) -> -Fungi(x))", "-exists x.(Plant(x) & Fungi(x))"]}
{"id": "folio_train_426", "nl": "Mushrooms are fungi.", "fol": "all x.(IsMushroom(x) -> IsFungi(x))", "prediction": ["all x.(Mushroom(x) -> Fungus(x))", "all x.(Mushroom(x) -> Fungus(x))", "all x y.((Mushroom(x) & Fungus(y)) -> Fungus(x))", "(Fungus(mushroom) & Fungus(mushroom) & Fungus(mushroom))", "all x.(Mushroom(x) -> Fungus(x))", "all x y.((Mushroom(x) & Fungus(y)) -> Fungus(x))", "all x.(Mushroom(x) -> Fungus(x))", "(Fungus(mushroom) & Fungus(mushroom,mushroom))", "all x.(Mushroom(x) -> Fungus(x))", "(Fungus(mushroom))", "all x.(Mushroom(x) -> Fungi(x))", "all x.(Mushroom(x) -> Fungus(x))", "all x.(Mushroom(x) -> Fungus(x))", "all x.(Mushroom(x) -> Fungi(x))", "all x.(Mushroom(x) -> Fungus(x))", "all x.(Mushroom(x) -> Fungi(x))"]}
{"id": "folio_train_427", "nl": "No plants are mushrooms.", "fol": "all x.(IsPlant(x) -> -IsMushroom(x))", "prediction": ["-exists x.(Plant(x) & Mushroom(x))", "all x.(Plant(x) -> -Mushroom(x))", "-exists x.(Plant(x) & Mushroom(x))", "all x.(Plant(x) -> -Mushroom(x))", "(exists x.(Plant(x) & -Mushroom(x)))", "-exists x.(Plant(x) & Mushroom(x))", "(exists x.(Plant(x) & Mushroom(x)))", "all x.(Plant(x) -> -Mushroom(x))", "-exists x.(Plant(x) & Mushroom(x))", "all x.(Plant(x) -> -Mushroom(x))", "-exists x.(Plant(x) & Mushroom(x))", "-exists x.(Plant(x) & -Mushroom(x))", "-exists x.(Plant(x) & Mushroom(x))", "all x.(Plant(x) -> -Mushroom(x))", "-exists x.(Plant(x) & Mushroom(x))", "-exists x.(Plant(x) & Mushroom(x))"]}
{"id": "folio_train_428", "nl": "New York City is on the East Coast. ", "fol": "LocatedIn(Newyorkcity,Eastcoast)", "prediction": ["all x.(NewYorkCity(x) -> EastCoast(x))", "New York City is onEastCoast(NewYork)", "(EastCoast(NewYork) & EastCoast(NewYork))", "all x.(NewYorkCity(x) -> OnEastCoast(x))", "all x y.((NewYorkCity(x) & EastCoast(y)) -> On(x,y))", "all x.((NewYorkCity(x) & EastCoast(x)) -> On(x,y))", "(EastCoast(NewYork))", "New York City is onEastCoast(NewYork)", "all x.(NewYorkCity(x) -> EastCoast(x))", "All x.(NewYork(x) -> OnEastCoast(x))", "(EastCoast(NewYorkCity)", "New York City is onEastCoast(NewYork)", "All x.(NewYorkCity(x) -> OnEastCoast(x))", "New York City is onEastCoast.", "(EastCoast(NewYorkCity)", "All x.(NewYorkCity(x) -> EastCoast(x))"]}
{"id": "folio_train_429", "nl": "Seattle is on the West Coast. ", "fol": "LocatedIn(Seattle,Westcoast)", "prediction": ["all x.(Seattle(x) -> WestCoast(x))", "(WestCoast(Seattle))", "all x y.((Seattle(x) & WestCoast(y)) -> On(x,y))", "all x.(Seattle(x) -> WestCoast(x))", "(WESTCART(Seattle) -> On(Seattle))", "(WestCoast(Seattle,WEST))", "all x y.((Seattle(x) & WestCoast(y)) -> On(x,y))", "all x.(Seattle(x) -> WestCoast(x))", "all x.(Seattle(x) -> OnWestCoast(x))", "(WestCoast(Seattle,West))", "(WestCoast(Seattle,WEST))", "(WestCoast(Seattle,WestCoast))", "all x.(Seattle(x) -> WestCoast(x))", "all x.(Seattle(x) -> OnWestCoast(x))", "All x.(Seattle(x) -> WestCoast(x))", "All x.(Seattle(x) -> OnWestCoast(x))"]}
{"id": "folio_train_430", "nl": "If a person from a city on the East coast is traveling to a city on the west coast, they will be on a long flight.", "fol": "all z.((DepartingFrom(x,y) & LocatedIn(y,Eastcoast) & ArrivingAt(x,z) & LocatedIn(z,Westcoast)) -> IsLongFlight(x))", "prediction": ["all x y.((Person(x) & City(y) & EastCoast(x) & WestCoast(y)) -> LongFlight(x))", "all x y z.((Person(x) & City(y) & City(z) & EastCoast(y) & WestCoast(z) & TravelsTo(x,y,z)) -> LongFlight(x))", "all x.((Person(x) & CityOnEastCoast(x) & CityOnWestCoast(x)) -> LongFlight(x))", "all x y.((Person(x) & City(y) & OnEastCoast(x,y) & OnWestCoast(x,y)) -> LongFlight(x))", "all x y.((Person(x) & CityOnEastCoast(x) & CityOnWestCoast(y)) -> LongFlight(x))", "all x y z.((Person(x) & City(y) & City(z) & EastCoast(x,y) & WestCoast(y) & TravelsTo(x,z)) -> LongFlight(x))", "all x.((Person(x) & CityOnEastCoast(x) & CityOnWestCoast(x)) -> LongFlight(x))", "all x y.((Person(x) & City(y) & EastCoast(x,y) & WestCoast(y)) -> LongFlight(x))", "all x.((PersonFromEastCoast(x) & TravelsToWestCoast(x)) -> LongFlight(x))", "all x y z.((Person(x) & City(y) & City(z) & OnEastCoast(x,y,z)) -> LongFlight(x))", "all x y.((Person(x) & CityOnEastCoast(x,y) & CityOnWestCoast(y)) -> LongFlight(x))", "all x.((Person(x) & CityOnEastCoast(x) & CityOnWestCoast(x)) -> LongFlight(x))", "all x.((Person(x) & FromEastCoast(x) & TravelsToWestCoast(x)) -> LongFlight(x))", "all x.((Person(x) & TravelsTo(x,EastCoast) & TravelsTo(x,WestCoast)) -> LongFlight(x))", "all x y z.((Person(x) & City(y) & City(z) & EastCoast(y) & WestCoast(z) & TravelsTo(x,y,z)) -> LongFlight(x))", "all x y.((Person(x) & City(y) & OnEastCoast(x,y)) -> LongFlight(x))"]}
{"id": "folio_train_431", "nl": "Most passengers on flights to Seattle from New York City are not in first class.", "fol": "exists x.(-IsInFirstClass(x) & DepartingFrom(x,Newyorkcity) & ArrivingAt(x,Seattle))", "prediction": ["all x.((Passenger(x) & SeattleFlight(x) & NewYorkCity(y)) -> -FirstClass(x))", "all x y.((Passenger(x) & Flight(y) & NewYork(y)) -> -FirstClass(x,y))", "all x.((Passenger(x) & NewYorkCity(y) & SeattleFlight(x,y)) -> -FirstClass(x))", "(-FirstClass(passenger) & OnFlightsToSeattleFromNewYork(passenger,NewYork))", "(all x.((Passenger(x) & NewYorkCity(y)) -> -FirstClass(x,y)))", "most passengers on flights to Seattle from New York City are not in FirstClass.", "all x y.((Passenger(x) & SeattleFlight(y) & NewYorkCity(y)) -> -FirstClass(x,y))", "(-FirstClass(passenger) -> PassengerOnFlightsFromNewYork(passenger,NewYork))", "(all x.(Flight(x) & NewYorkCity(y) & Seattle(z)) -> -FirstClass(x,z))", "-FirstClass (mostly) -Passenger(x) & OnFlightsToSeattleFromNewYork(x))", "all x.((Passenger(x) & SeattleFlight(x) & NewYorkCity(y)) -> -FirstClass(x))", "all x.((Passenger(x) & NewYorkCityFlight(x) & SeattleFlight(x)) -> -FirstClass(x))", "all x.(Passenger(x) -> -FirstClass(x))", "all x y.((Passenger(x) & Flight(y) & NewYork(y)) -> -FirstClass(x,y))", "all x y.((Passenger(x) & SeattleFlight(y) & NewYorkCity(y)) -> -FirstClass(x,y))", "all x.(Passenger(x) -> -FirstClass(x))"]}
{"id": "folio_train_432", "nl": "People on long flights are uncomfortable unless they're in first class", "fol": "all x.((IsLongFlight(x) & -IsInFirstClass(x)) -> FeelingUncomfortable(x))", "prediction": ["all x.((Person(x) & LongFlight(x) & -FirstClass(x)) -> Uncomfortable(x))", "all x y.((Person(x) & LongFlight(y) & -FirstClass(x)) -> Uncomfortable(x,y))", "all x.((PeopleOnLongFlights(x) & -FirstClass(x)) -> Uncomfortable(x))", "all x.((Person(x) & LongFlight(x) & -FirstClass(x)) -> Uncomfortable(x))", "all x y.((Person(x) & LongFlight(y) & -FirstClass(x,y)) -> Uncomfortable(x))", "all x.(LongFlight(x) -> (Uncomfortable(x) & -FirstClass(x)))", "all x y z.((Person(x) & LongFlight(y) & FirstClass(z) & On(x,y) & In(x,z)) -> Uncomfortable(x))", "all x.((Person(x) & LongFlight(x) & -FirstClass(x)) -> Uncomfortable(x))", "all x.((Person(x) & LongFlight(x) & FirstClass(x)) -> Uncomfortable(x))", "(all x.(LongFlight(x) -> Uncomfortable(x)))", "all x y.((Person(x) & LongFlight(y) & FirstClass(x,y)) -> Uncomfortable(x))", "all x.((PeopleOnLongFlights(x) & -FirstClass(x)) -> Uncomfortable(x))", "all x y.((Person(x) & LongFlight(x) & FirstClass(y)) -> Uncomfortable(x,y))", "all x.(LongFlight(x) -> Uncomfortable(x))", "all x y.((Person(x) & LongFlight(y)) -> Uncomfortable(x,y))", "all x.(LongFlight(x) -> (Uncomfortable(x) & -FirstClass(x)))"]}
{"id": "folio_train_433", "nl": "Some people flying from New York City to Seattle will be uncomfortable.", "fol": "exists x.(DepartingFrom(x,Newyorkcity) & ArrivingAt(x,Seattle) & FeelingUncomfortable(x))", "prediction": ["exists x.(Flight(x) & NewYorkCityToSeattle(x) & Uncomfortable(x))", "exists x.(Person(x) & FlyingFromNewYorkToSeattle(x) & Uncomfortable(x))", "exists x.(FlyingFromNewYorkToSeattle(x) & Uncomfortable(x))", "exists x.(Flight(x) & NewYork(y) & Seattle(z) & FlyingFromTo(x,y,z))", "exists x y.(Flight(x) & NewYork(y) & Seattle(z) & FromNewYorkToSeattle(x,y,z))", "all x y z.((Person(x) & NewYorkCity(y) & Seattle(z) & FlyingFromTo(x,y,z)) -> Uncomfortable(x))", "exists x y.(Person(x) & FlyingFromNewYorkToSeattle(x) & Uncomfortable(x,y))", "exists x.(Person(x) & FlyingFromNewYorkToSeattle(x))", "all x y.((Person(x) & NewYork(y) & Seattle(y)) -> Uncomfortable(x,y))", "all x y.((Person(x) & NewYorkCity(y) & Seattle(y)) -> Uncomfortable(x,y))", "exists x.(Person(x) & FlyingFromNewYorkToSeattle(x) & Uncomfortable(x))", "exists x.(Flight(x,NewYork(x) & Seattle(x))", "exists x.(Passenger(x) & FlyingFromNewYorkToSeattle(x))", "exists x.(FlyingFromNewYorkToSeattle(x) & Uncomfortable(x))", "exists x.(Person(x) & FlyingFromNewYorkToSeattle(x))", "exists x.(Person(x) & FlyingFromNewYorkToSeattle(x) & Uncomfortable(x))"]}
{"id": "folio_train_434", "nl": "No road is clean.", "fol": "all x.(IsRoad(x) -> -IsClean(x))", "prediction": ["-exists x.(Road(x) & Clean(x))", "all x.(Road(x) -> -Clean(x))", "-all x.(Road(x) -> Clean(x))", "-exists x.(Road(x) & Clean(x))", "all x.(Road(x) -> -Clean(x))", "-exists x.(Road(x) & Clean(x))", "-all x.(Road(x) -> Clean(x))", "all x.(Road(x) -> -Clean(x))", "-exists x.(Road(x) & Clean(x))", "-all x.(Road(x) -> Clean(x))", "all x.(Road(x) -> -Clean(x))", "-exists x.(Road(x) & Clean(x))", "(exists x.(Road(x) & Clean(x))", "-exists x.(Road(x) & Clean(x))", "-exists x.(Road(x) & Clean(x))", "-exists x.(Road(x) & Clean(x))"]}
{"id": "folio_train_435", "nl": "And some streets are roads.", "fol": "exists x.(IsStreet(x) & IsRoad(x))", "prediction": ["exists x.(Street(x) & Road(x))", "(exists x.(Street(x) & Road(x)))", "exists x.(Street(x) & Road(x))", "(exists x.(Street(x) & Road(x)))", "-exists x.(Street(x) & Road(x))", "exists x.(Street(x) & Road(x))", "(exists x.(Street(x) & Road(x)))", "exists x.(Street(x) & Road(x))", "(exists x.(Street(x) & Road(x)))", "-all x.(Street(x) -> Road(x))", "exists x.(Street(x) & Road(x))", "(exists x.(Street(x) & Road(x)))", "exists x.(Street(x) & Road(x))", "exists x.(Stadion(x) & Road(x))", "exists x.(Street(x) & Road(x))", "(exists x.(Street(x) & Road(x)))"]}
{"id": "folio_train_436", "nl": "Some streets are clean", "fol": "exists x.(IsStreet(x) & IsClean(x))", "prediction": ["exists x.(Street(x) & Clean(x))", "exists x.(Street(x) & Clean(x))", "exists x y.(Street(x) & Street(y) & Clean(y))", "exists x.(Street(x) & Clean(x))", "exists x.(Street(x) & Clean(x))", "all x y.((Street(x) & Street(y)) -> Clean(x))", "exists x y.(Street(x) & Street(y) & Clean(x))", "exists x.(Street(x) & Clean(x))", "exists x y.(Street(x) & Street(y) & Clean(y))", "exists x.(Street(x) & Clean(x))", "exists x.(Stadium(x) & CleanStreet(x))", "exists x.(Street(x) & Clean(x))", "exists x.(Stadium(x) & Clean(x))", "exists x.(Stay(x) & CleanStay(x))", "exists x.(Street(x) & Clean(x))", "exists x.(Street(x) & Clean(x))"]}
{"id": "folio_train_437", "nl": "Musicians have very busy lives.", "fol": "all x.(IsMusician(x) -> HasBusyLife(x))", "prediction": ["all x.(Musician(x) -> HasBusyLives(x))", "all x.(Musician(x) -> VeryBusyLives(x))", "all x y.((Musician(x) & Lives(y)) -> Busy(x))", "all x.(Musician(x) -> BusyLives(x))", "(all x.(Musician(x) -> BusyLife(x)))", "all x.(Musician(x) -> HasBustyLives(x))", "all x y.((Musician(x) & Lives(y)) -> Busy(x,y))", "all x y.((Musician(x) & LivesIn(y,x)) -> Busy(x))", "all x.(Musician(x) -> VeryBusyLife(x))", "all x.(Musician(x) -> BusyLives(x))", "all x y.((Musician(x) & Life(y)) -> Busy(x,y))", "all x.(Musician(x) -> HasBoundLives(x))", "all x.(Musician(x) -> VeryBusyLife(x))", "all x.(Musician(x) -> BusyLife(x))", "all x.(Musician(x) -> HasBossLives(x))", "exists x.(Musician(x) & BusyLife(x))"]}
{"id": "folio_train_438", "nl": "Singh Kaur is a musician and famous.", "fol": "(IsMusician(SinghKaur) & IsFamous(SinghKaur))", "prediction": ["SinghKaur(s) -> (Musician(s) & Famous(s)))", "Singh Kaur (Musician(Singh) & Famous(Singh))", "SinghKaur(Singh) -> (Musician(Singh) & Famous(Singh)))", "all x.(SinghKaur(x) -> (Musician(x) & Famous(x)))", "SinghKaur (Musician(Singh) & Famous(Singh))", "Singh Kaur (Singh) -> (Musician(x) & Famous(x)))", "Singh Kaur (Musician(Singh) & Famous(Singh))", "(Musician(SinghKaur) & Famous(SinghKaur))", "all x.((SinghKaur(x) & Musician(x) & Famous(x)) -> Musician(x))", "SinghKaur(s) -> (Musician(s) & Famous(s)))", "Singh Kaur (Musician(s) & Famous(s))", "all x.(SinghKaur(x) -> (Musician(x) & Famous(x)))", "SinghKaur (Musician(Singh) & Famous(Singh))", "Singh Kaur is a musician and famous.", "(Musician(SinghKaur) & Famous(SinghKaur))", "(Musician(SinghKaur) & Famous(SinghKaur))"]}
{"id": "folio_train_439", "nl": "If a musician is not famous, that musician will not make a lot of money.", "fol": "all x.((IsMusician(x) & -IsFamous(x)) -> -EarnMoney(x))", "prediction": ["all x.((Musician(x) & -Famous(x)) -> -MakesLotOfMoney(x))", "(-FamousMusician(Musician) -> -MakesLotOfMoney(Musician))", "all x.((Musician(x) & -Famous(x)) -> -MakesLotOfMoney(x))", "all x y.((Musician(x) & -Famous(x)) -> -MakesLotOfMoney(x,y))", "all x.((Musician(x) & -Famous(x)) -> -MakingLotOfMoney(x))", "all x.(Famous(x) -> -MakesLotOfMoney(x))", "all x y.((Musician(x) & -Famous(x)) -> -MakesLotOfMoney(y))", "exists x.(Musician(x) & -Famous(x) & -MakesLotOfMoney(x))", "all x.((Musician(x) & -Famous(x)) -> -MakesLotOfMoney(x))", "all x y.((Musician(x) & -Famous(x)) -> -MakingLotOfMoney(y))", "all x.((Musician(x) & -Famous(x)) -> -MakingLotOfMoney(x))", "all x.((Musician(x) & NotFamous(x)) -> -MakesLotOfMoney(x))", "all x.((Musician(x) & -Famous(x)) -> -MakesLotOfMoney(x))", "all x.((Musician(x) & NotFamous(x)) -> -MakesLotOfMoney(x))", "all x.((Musician(x) & -Famous(x)) -> -MakingLittleOfMoney(x))", "all x.((Musician(x) & -Famous(x)) -> -MakesLittleMoney(x))"]}
{"id": "folio_train_440", "nl": "A musician can be a singer or a writer.", "fol": "exists x.((IsMusician(x) & IsSinger(x)) | IsWriter(x))", "prediction": ["all x.(Musician(x) -> (Singer(x) | Writer(x)))", "all x.(Musician(x) -> (Singer(x) | Writer(x)))", "all x.(Musician(x) -> (Singer(x) | Writer(x)))", "all x y.((Musician(x) & Singer(y)) | Writer(y))", "all x.(Musician(x) -> (Singer(x) | Writer(x)))", "exists x.(Musician(x) & ((Singer(x) | Writer(x))) -> Musician(x)))", "all x y.((Musician(x) & Singer(y)) | Writer(y))", "exists x.(Musician(x) & ((Singer(x) & -Singer(x)) | Writer(x))))", "all x.(Musician(x) -> (Singer(x) | Writer(x)))", "all x y.((Musician(x) & Singer(y)) | Writer(y))", "exists x.(Musician(x) & (Singer(x) | Writer(x)))", "all x.(Musician(x) -> (Singer(x) | Writer(x)))", "exists x.(Musician(x) & Singer(x) & Writer(x))", "all x.(Musician(x) -> (Singer(x) | Writer(x)))", "exists x.(Musician(x) & (Singer(x) | Writer(x)))", "exists x.(Musician(x) & (Singer(x) | Writer(x)))"]}
{"id": "folio_train_441", "nl": "Singh Kaur makes a lot of money.", "fol": "EarnMoney(SinghKaur)", "prediction": ["all x.(SinghKaur(x) -> MakesLotOfMoney(x))", "SinghKaurMakesLotsOfMoney(SinghKaur)", "all x y.((SinghKaur(x) & Money(y)) -> Makes(x,y))", "Singh Kaur makes a lot of money.", "SinghKaurMakesLotOfMoney(SinghKaur)", "all x.(SinghKaur(x) -> MakesLotOfMoney(x))", "(MakingLoyalMoney(SinghKaur)", "(MakingSinghKaur(SinghKaur) -> LotsOfMoney(SinghKaur))", "Singh Kaur makes a lot of money.", "SinghKaurMakesLotsOfMoney(SinghKaur)", "all x y.((SinghKaur(x) & Money(y)) -> Makes(x,y))", "all x.(SinghKaur(x) -> MakesLotOfMoney(x))", "all x.(SinghKaur(x) -> MakesLotOfMoney(x))", "all x.(SinghKaur(x) -> MakesMore(x))", "all x.(SinghKaur(x) -> MakesLittleMoney(x))", "All x.(SinghKaur(x) -> MakesMorning(x))"]}
{"id": "folio_train_442", "nl": "Singh Kaur is a writer.", "fol": "IsWriter(SinghKaur)", "prediction": ["Singh Kaur is a writer.", "all x.(SinghKaur(x) -> Writer(x))", "(Writer(SinghKaur)", "SinghKaur is a Writer.", "SinghKaur(Singh) & Writer(Singh)", "Singh Kaur is a Writer.", "SinghKaur isWriter(Singh)", "all x.(SinghKaur(x) -> Writer(x))", "(Writer(SinghKaur)", "Singh Kaur is a writer.", "all x.(SinghKaur(x) -> Writer(x))", "(Writer(SinghKaur)", "Singh Kaur is a Writer.", "SinghKaur is a writer.", "Singh Kaur (Writer)", "(Writer(SinghKaur)"]}
{"id": "folio_train_443", "nl": "Singh Kaur has a very busy life.", "fol": "HasBusyLife(SinghKaur)", "prediction": ["all x.(SinghKaur(x) -> VeryBusyLife(x))", "SinghKaur has a veryBusyLife(SinghKaur)", "Singh Kaur has a very busyLife(SinghKaur)", "(BusyLife(SinghKaur)", "all x.(SinghKaur(x) -> VeryBusyLife(x))", "SinghKaurHasBusyLife(SinghKaur)", "SinghKaur has a veryBusyLife(SinghKaur)", "Singh Kaur has a very busyLife(SinghKaur)", "(BusyLife(SinghKaur)", "all x.(SinghKaur(x) -> VeryBusyLife(x))", "all x.(SinghKaur(x) -> BusyLife(x))", "Singh Kaur has a very busyLife(SinghKaur)", "SinghKaur has a veryBusyLife(s)", "Singh Kaur has a very busyLife(s)", "all x.(SinghKaur(x) -> VeryBusyLife(x))", "all x.(SinghKaur(x) -> BusyLife(x))"]}
{"id": "folio_train_444", "nl": "Each building is tall. ", "fol": "all x.(IsBuilding(x) -> -IsTall(x))", "prediction": ["all x.(Building(x) -> Tall(x))", "(Building(Building) & Tall(Building))", "all x.(Building(x) -> Tall(x))", "-exists x.(Building(x) & Tall(x))", "all x.exists y.(Building(x) & Building(y) & Tall(x))", "all x.(Building(x) -> Tall(x))", "all x y.(Building(x) -> Tall(x))", "all x.(Building(x) -> Tall(x))", "exists x.(Building(x) & Tall(x))", "all x y.(Building(x) -> Tall(x))", "all x.(Building(x) -> Tall(x))", "exists x.(Building(x) & Tall(x))", "all x.(Building(x) -> Tall(x))", "exists x.(Building(x) & Tall(x))", "exists x.(Building(x) & Tall(x))", "exists x.(Building(x) & Tall(x))"]}
{"id": "folio_train_445", "nl": "Everything tall has  height.", "fol": "all x.(IsTall(x) -> HasHeight(x))", "prediction": ["all x.(Tall(x) -> HasHeight(x))", "(HasHeight(all x.(Tall(x) -> HasHeight(x)))", "all x.(Tall(x) -> HasHeight(x))", "everythingTallHasHeight(x)", "all x.exists y.(Tall(x) & Height(y) & Has(x,y))", "-all x.(Tall(x) -> HasHeight(x))", "all x.(Tall(x) -> HasHeight(x))", "All x y.(Tall(x) -> HasHeight(x,y))", "all x.(Tall(x) -> HasHeight(x))", "all x.(Tall(x) -> HasHeight(x))", "all x.(Tall(x) -> HasHeight(x))", "all x.(Tall(x) -> HasHeight(x))", "all x.(Tall(x) -> HasHeight(x))", "all x.(Tall(x) -> Height(x))", "exists x.(Tall(x) & Height(x))", "all x.(Tall(x) -> HasHeight(x))"]}
{"id": "folio_train_446", "nl": "All buildings are magnificent.", "fol": "all x.(IsBuilding(x) -> Magnificent(x))", "prediction": ["all x.(Building(x) -> Magnificent(x))", "all x.(Building(x) -> Magnificent(x))", "(all x.(Building(x) -> Magnificent(x)))", "All x.exists y.(Building(x) & Building(y) & Magnificent(x,y))", "all x.(Building(x) -> Magnificent(x))", "all x y.((Building(x) & Building(y)) -> Magnificent(x))", "all x.(Building(x) -> Beautiful(x))", "all x.(Building(x) -> Magnificent(x))", "all x y.(Building(x) -> Magnificent(x))", "all x.(Building(x) -> Stunning(x))", "all x.(Building(x) -> Beautiful(x))", "all x.(Building(x) -> Magnificent(x))", "all x.(Building(x) -> Fantastic(x))", "all x.(Building(x) -> Stunning(x))", "all x.(Building(x) -> Beautiful(x))", "exists x.(Building(x) & Magnificent(x))"]}
{"id": "folio_train_447", "nl": "A cat named Garfield, which is the main character of the film Garfield, is orange and fat and likes having lasagna. ", "fol": "(IsCat(Garfield) & IsMainCharacterOfGarfield(Garfield) & IsOrange(Garfield) & IsFat(Garfield) & LikesLasagna(Garfield))", "prediction": ["all x.((Cat(x) & Garfield(x) & MainCharacterOfFilmGarfield(x)) -> (Orange(x) & Fat(x) & LikesLasagne(x)))", "all x y.((Cat(x) & Cat(y) & Garfield(x) & MainCharacterOfFilmGarfield(x)) -> (Orange(x) & Fat(x) & LikesLasagne(x)))", "(MainCharacterOfFilmGarfield(Cat) & Orange(Cat) & Fat(Cat) & LikesLasagne(Cat))", "(Cat(Cat) & Garfield(Cat) & MainCharacterOfFilmGarfield(Cat)) & Orange(Cat) & Fat(Cat) & LikesLasagne(Cat))", "all x.((Cat(x) & Garfield(x) & MainCharacterOfFilmGarfield(x)) -> (Orange(x) & Fat(x) & LikesLasagne(x)))", "all x y.((Cat(x) & Garfield(x) & FilmGarfield(y)) -> (Orange(x) & Fat(x) & LikesLasagne(x)))", "all x y.((Cat(x) & Cat(y) & Garfield(x) & MainCharacterOfFilmGarfield(x) & Orange(y) & Fat(y) & LikesLasagne(x)) -> Garfield(x))", "(Cat(Cat) & Garfield(Cat)) & MainCharacterOfFilmGarfield(Cat) & Orange(Cat) & Fat(Cat) & LikesLasagne(Cat))", "(MainCharacterOfFilmGarfield(Cat) & Orange(Cat) & Fat(Cat) & LikesLasagne(Cat))", "exists x.(Cat(x) & Garfield(x) & MainCharacterOfFilmGarfield(x) & Orange(x) & Fat(x) & LikesLasagne(x))", "all x y.((Cat(x) & Garfield(y) & MainCharacterOfFilmGarfield(x)) -> (Orange(x) & Fat(x) & LikesLasagne(x)))", "all x.(Cat(x) -> (Garfield(x) & MainCharacterOfFilm(x) & Orange(x) & Fat(x) & LikesLasagne(x)))", "all x.((Cat(x) & Garfield(x) & MainCharacterOfFilmGarfield(x)) -> (Orange(x) & Fat(x) & LikesLasagne(x)))", "all x.(Cat(x) -> (Garfield(x) & MainCharacter(x) & Orange(x) & Fat(x) & LikesLasagne(x)))", "all x.((Cat(x) & Garfield(x) & MainCharacterOfFilmGarfield(x)) -> (Orange(x) & Fat(x) & LikesLasagne(x)))", "all x.((Cat(x) & Garfield(x) & MainCharacterOfFilmGarfield(x)) -> (Orange(x) & Fat(x) & LikesLasagna(x)))"]}
{"id": "folio_train_448", "nl": "Garfield and Odie, who is another pet of Jon, share the same home. ", "fol": "(IsPetOf(Garfield,Jon) & IsPetOf(Odie,Jon) & SharesHomeWith(Garfield,Odie))", "prediction": ["(Pet(Garfield) & Pet(Odie) & Pet(Garfield))", "all x y.((Garfield(x) & Odie(y)) -> (Pet(x,y) & Pet(y) & Pet(y) & Pet(y) & Pet(y)))", "all x.((Garfield(x) | Odie(x)) -> ShareHome(x))", "((Pet(Garfield) & Pet(Odie)) -> ShareHome(Garfield,Odie))", "both Garfield and Odie, a pet of Jon, share the same home.", "(PetOfJon(Garfield) & PetOfOdie(Odie))", "all x.((Garfield(x) & Odie(x) & PetOfJon(x)) -> ShareHome(x))", "all x y.((Garfield(x) & Odie(y) & PetOfJon(x)) -> ShareHome(x,y))", "(Pet(Garfield) & Pet(Odie) & PetOf(Garfield))", "all x.((Pet(x) & Pet(x)) -> (Garfield(x) | Odie(x)) & ShareHome(x)))", "all x y.((Pet(x) & Pet(y) & Garfield(x) & Odie(y)) -> ShareHome(x,y))", "((Garfield) | Odie(Odie)) & PetOfJon(Garfield)) -> ShareHome(Odie,Odie))", "both Garfield and Odie (PetOfJon))", "Odie, pet of Jon, & Garfield, share the same home.", "(PetOfJon(Garfield) & PetOfOdie(Odie))", "(PetOfJon(Garfield,Jon) & PetOfOdie(Odie,Jon))"]}
{"id": "folio_train_449", "nl": "Garfield hates Odie.", "fol": "Hates(Garfield,Odie)", "prediction": ["(Has(Garfield,Odie) & Hates(Garfield,Odie))", "Garfield hatesOdie.", "all x.(Garfield(x) -> HatesOdie(x))", "all x.(GarfieldHas(x,Odie) -> Hates(x,Odie))", "Garfield HatesOdie(Garfield)", "Garfield hatesOdie(Garfield)", "Odie Hates(Garfield,Odie)", "(Has(Garfield,Odie) -> Hates(Garfield,Odie))", "-HasOdie(Garfield,Odie)", "(HasGarfield(Garfield,Odie))", "all x.(Garfield(x) -> HatesOdie(x))", "(Hate(Garfield,Odie))", "Odie Hates(Garfield)", "(Has(Garfield,Odie))", "Garfield hatesOdie.", "Garfield hatesOdie."]}
{"id": "folio_train_450", "nl": "A pet who hates the pet with whom he shares the same owner is childish and possessive.", "fol": "all x.(exists y z.(IsPetOf(x,z) & IsPetOf(y,z) & Hates(x,y)) -> (IsChildish(x) & IsPossessive(x)))", "prediction": ["all x y.((Pet(x) & Pet(y) & HasSameOwner(x,y)) -> (Childish(x) & Possesses(x)))", "all x.((Pet(x) & Hates(x,y) & Owner(y)) -> (Childish(x) & Possesses(x)))", "all x y z.((Pet(x) & Pet(y) & Owner(z) & Hates(x,y) & Owner(y,z)) -> (Childish(x) & Possesses(x)))", "all x y.((Pet(x) & Pet(y) & HasSameOwner(x,y)) -> (Childish(x) & Possessory(x)))", "all x.((Pet(x) & HatesOwner(x)) -> (Childish(x) & Possesses(x)))", "all x y.((Pet(x) & Pet(y) & Hates(x,y)) -> (Childish(x) & Possesses(x)))", "all x.((Pet(x) & Hates(x,y) & Owner(y)) -> (Childish(x) & Possessory(x)))", "all x y z.((Pet(x) & Pet(y) & Owner(z) & Hates(x,y,z)) -> (Childish(x) & Possesses(x)))", "all x.((Pet(x) & HatesPet(x) & SharesOwner(x)) -> (Childish(x) & Possesses(x)))", "all x.((Pet(x) & HatesOwner(x)) -> (Childish(x) & Possessory(x)))", "all x y.((Pet(x) & Pet(y) & HasSameOwner(x,y)) -> (Childish(x) & Possessional(x)))", "all x y z.((Pet(x) & Pet(y) & Owner(z) & HasHate(x,y,z)) -> (Childish(x) & Possessory(x)))", "all x.(Hate(x) -> (Childish(x) & Possesses(x)))", "all x y.((Pet(x) & Pet(y) & Hates(x,y)) -> (Childish(x) & Possessional(x)))", "all x.((Pet(x) & HasSameOwner(x)) -> (Childish(x) & Possesses(x)))", "all x.((Pet(x) & HatesOwner(x)) -> (Childish(x) & Possessional(x)))"]}
{"id": "folio_train_451", "nl": "Cats are pets. ", "fol": "all x.exists y.(IsCat(x) -> IsPetOf(x,y))", "prediction": ["all x.(Cat(x) -> Pet(x))", "all x.(Cat(x) -> Pet(x))", "(Pet(cat) & Pet(cat))", "all x y.((Cat(x) & Pet(y)) -> Pet(x,y))", "all x.(Cat(x) -> Pet(x))", "(all x.(Cat(x) -> Pet(x)))", "(Pet(cat) & Pet(cat))", "all x.(Cat(x) -> Pet(x))", "all x y.((Cat(x) & Pet(y)) -> Pet(x))", "all x.(Cat(x) -> Pet(x))", "all x.(Cat(x) -> Pet(x))", "all x.(Cat(x) -> Pet(x))", "all x.(Cat(x) -> Pet(x))", "all x.(Cat(x) -> Pet(x))", "all x.(Cat(x) -> Pet(x))", "all x.(Cat(x) -> Pet(x))"]}
{"id": "folio_train_452", "nl": "The main character of the film Garfield is childish and possessive.", "fol": "exists x.(IsMainCharacterOfGarfield(x) & IsChildish(x) & IsPossessive(x))", "prediction": ["all x.((Film(x) & Garfield(x)) -> (Childish(x) & Possesses(x)))", "(MainCharacter(Garfield) & Childish(Garfield) & Possesses(Garfield))", "the main character of the film Garfield is childish and possessive.", "all x.(Garfield(x) -> (Childish(x) & Possessionive(x)))", "all x.((FilmGarfield(x) & Childish(x) & Possesses(x)) -> MainCharacter(x))", "-(MainCharacter(x) & Garfield(x)) -> (Childish(x) & Possesses(x)))", "(MainCharacter(Garfield) & Childish(Garfield) & Possessionive(Garfield))", "all x y.((Film(x) & Garfield(y)) -> (Childish(x) & Possessionive(x)))", "(MainCharacter(Garfield) -> Childish(Garfield) & Possesses(Garfield))", "the main character of the film Garfield is childish and possessive.", "(Childish(Garfield) & Possesses(Garfield))", "(MainCharacterOfFilmGarfield(x) -> Childish(x) & Possessional(x))", "(MainCharacter(Garfield,Film) & Childish(Garfield) & Possessionive(Garfield))", "all x.((StarCharacter(x) & Garfield(x)) -> (Childish(x) & Possesses(x)))", "all x y.((Film(x) & Garfield(y)) -> (Childish(x,y) & Possesses(x,y)))", "all x.(Garfield(x) -> (Childish(x) & Possesses(x)))"]}
{"id": "folio_train_453", "nl": "All humans eat.", "fol": "all x.(IsHuman(x) -> Eats(x))", "prediction": ["all x.(Human(x) -> Eats(x))", "all x.(Human(x) -> Eats(x))", "(all x.(Human(x) -> Eats(x)))", "all x.(Human(x) -> Eats(x))", "(all x.(Human(x) -> Eats(x)))", "all x.exists y.(Human(x) & Eat(y))", "all x y.(Human(x) -> Eats(x,y))", "all x.(Human(x) -> Eats(x))", "(All x.(Human(x) -> Eats(x)))", "all x.(Human(x) -> Eat(x))", "all x.(Human(x) -> Eats(x))", "all x.(Human(x) -> Eat(x))", "all x.(Human(x) -> Eats(x))", "all x.(Human(x) -> Eat(x))", "exists x.(Human(x) & Eats(x))", "all x.(Human(x) -> Eats(x))"]}
{"id": "folio_train_454", "nl": "If something eats, then it is not a plant.", "fol": "all x.(Eats(x) -> -IsPlant(x))", "prediction": ["all x.((Eats(x) & -Plant(x)) -> -Plant(x))", "all x.(Eats(x) -> -Plant(x))", "all x.((Eats(x) & -Plant(x)) -> -Plant(x))", "(Eats(x) -> -Plant(x))", "all x.(Eats(x) -> -Plant(x))", "all x.((Eats(x) & -Plant(x)) -> -Plant(x))", "all x y.((Eats(x) & Plant(y)) -> -Plant(x))", "all x y.((Eats(x) & Plant(y) & -Eats(x,y)) -> -Plant(x))", "all x.((Eats(x) & Plant(x)) -> -Plant(x))", "all x.(Eats(x) -> -Plant(x))", "all x.((Eats(x) & -Plant(x)) -> -Plant(x))", "all x.(Eats(x) -> -Plant(x))", "all x.(Eats(x) -> -Plant(x))", "all x.((Eats(x) & -Plant(x)) -> -Plant(x))", "exists x.(Eats(x) & -Plant(x))", "exists x.(Eats(x) & -Plant(x))"]}
{"id": "folio_train_455", "nl": "A thing is either plant or animal.", "fol": "all x.(IsPlant(x) | IsAnimal(x))", "prediction": ["all x.(Thing(x) -> (Plant(x) | Animal(x)))", "all x.(Thing(x) -> (Plant(x) | Animal(x)))", "all x.(Tea(x) -> (Plant(x) | Animal(x)))", "all x.(Thing(x) -> (Plant(x) | Animal(x)))", "all x.(Ding(x) -> (Plant(x) | Animal(x)))", "exists x.(Thing(x) & Plant(x) & Animal(x))", "all x y.((Thing(x) & Plant(y)) | Animal(y))", "all x.(Tad(x) -> (Plant(x) | Animal(x)))", "all x y.(Thing(x) -> (Plant(y) | Animal(y)))", "exists x.(Thing(x) & (Plant(x) | Animal(x)))", "all x.(Tree(x) -> (Plant(x) | Animal(x)))", "exists x.(Thing(x) & Plant(x) & Animal(x))", "all x.(Ding(x) -> (Plant(x) | Animal(x)))", "exists x.(Thing(x) & Plant(x) | Animal(x))", "exists x.(Ding(x) & (Plant(x) | Animal(x)))", "exists x.(Ding(x) & (Plant(x) | Animal(x)))"]}
{"id": "folio_train_456", "nl": "All goats are animals.", "fol": "all x.(IsGoat(x) -> IsAnimal(x))", "prediction": ["all x.(Goat(x) -> Animal(x))", "all x.(Goat(x) -> Animal(x))", "all x.(Girl(x) -> Animal(x))", "all x.(Goat(x) -> Animal(x))", "(all x.(Goat(x) -> Animal(x))", "all x.(Giant(x) -> Animal(x))", "all x.(Goat(x) -> Animal(x))", "all x.(Girl(x) -> Animal(x))", "(all x.(Goat(x) -> Animal(x))", "all x.(Goat(x) -> Animal(x))", "(all x.(Goat(x) -> Animal(x))", "all x.(Giant(x) -> Animal(x))", "all x.(Girl(x) -> Animal(x))", "all x.(Goat(x) -> Animal(x))", "all x.(Goat(x) -> Animal(x))", "all x.(Goat(x) -> Animal(x))"]}
{"id": "folio_train_457", "nl": "No dirt is an animal.", "fol": "all x.(IsDirt(x) -> -IsAnimal(x))", "prediction": ["-exists x.(Dirt(x) & Animal(x))", "-exists x.(Dirt(x) & Animal(x))", "(exists x.(Dirt(x) & -Animal(x)))", "all x.(Dirt(x) -> -Animal(x))", "all x.(Dirt(x) -> Animal(x))", "-exists x.(Dirt(x) & Animal(x))", "all x.(Dirt(x) -> -Animal(x))", "-exists x.(Dirt(x) & Animal(x))", "all x.(Dirt(x) -> Animal(x))", "-exists x.(Dirt(x) & Animal(x))", "all x.(Dirt(x) -> -Animal(x))", "-exists x.(Dirt(x) & -Animal(x))", "-exists x.(Dry(x) & Animal(x))", "-exists x.(Dirt(x) & Animal(x))", "-exists x.(Dirt(x) & -Animal(x))", "-exists x.(Dirt(x) & Animal(x))"]}
{"id": "folio_train_458", "nl": "Hulu is a goat or a human.", "fol": "(IsGoat(Hulu) | IsHuman(Hulu))", "prediction": ["all x.(Hulu(x) -> (Goat(x) | Human(x)))", "(Goat(Hulu) | Human(Hulu))", "all x.(Hulu(x) -> (Goat(x) | Human(x)))", "(Goat(Hulu) | Human(Hulu))", "all x.(Human(x) -> (Goat(x) | Human(x)))", "all x.(Hulu(x) -> (Goat(x) | Human(x)))", "(Goat(Human) | Goat(Human))", "(Goat(Hulu) | Human(Hulu))", "exists x.(Human(x) | Goat(x))", "all x.(Hulu(x) -> (Goat(x) | Human(x)))", "(Goat(Hulu) | Human(Hulu))", "exists x.(Human(x) & (Goat(x) | Human(x)))", "exists x.(Human(x) | Goat(x))", "all x.(Hulu(x) -> (Goat(x) | Human(x)))", "all x.(Hulu(x) -> (Goat(x) | Human(x)))", "all x.(Hulu(x) -> (Goat(x) | Human(x)))"]}
{"id": "folio_train_459", "nl": "Hulu eats.", "fol": "Eats(Hulu)", "prediction": ["all x.(Hulu(x) -> Eats(x))", "Hulu Eats(h)", "all x.(Hulu(x) -> Eats(x))", "all x y.((Hulu(x) & Eats(y)) -> Eats(x,y))", "HuluEats(h)", "(EatsHulu(Hulu))", "(EatsHulu(h) & -EatsHulu(h))", "all x.(Hulu(x) -> Eats(x))", "(Eats(Hulu))", "all x y.((Hulu(x) & Eats(x)) -> Eats(y))", "all x.(Hulus(x) -> Eats(x))", "all x.(Hulu(x) -> Eats(x))", "(Eats(Hulu))", "all x.(Hulu(x) -> Eats(x))", "exists x.(Hulu(x) & Eats(x))", "exists x.(Hulu(x) & Eats(x))"]}
{"id": "folio_train_460", "nl": "Hulu does not eat.", "fol": "-Eats(Hulu)", "prediction": ["all x.(Hulu(x) -> -Eats(x))", "(-Eats(Hulu))", "Hulu -Eats(h)", "-(Hulu(h) & Eats(h))", "all x.(Hulu(x) -> -Eats(x))", "(-Eats(Hulu))", "Hulu -Eats(hulu)", "-(Hulu(h) & Eats(h))", "all x.(Hulu(x) -> -Eat(x))", "(-Eats(Hulu) -> Hulu(Hulu))", "Hulu -Eats(Hulu)", "(-Eats(Hulu))", "all x.(Hulu(x) -> -Eats(x))", "(-Eats(Hulu) -> Hulu(Hulu))", "Hulu -Eats(hulu)", "all x.(Hulu(x) -> -Eat(x))"]}
{"id": "folio_train_461", "nl": "Hulu is dirt.", "fol": "IsDirt(Hulu)", "prediction": ["all x.(Hulu(x) -> Dirt(x))", "(Dirt(Hulu) & Dirt(Hulu))", "Hulu is Dirt(h)", "all x.(Hulu(x) -> Dirt(x))", "Hulu is dirt.", "(Dirt(Hulu) & Dirt(Hulu))", "(Dirt(Hulu) & -Dirt(Hulu))", "all x.(Hulu(x) -> Dirt(x))", "Hulu (Dirt)", "Hulu is Dirt.", "(Dirt(Hulu) -> Dirt(Hulu))", "all x.(Hulu(x) -> Dirt(x))", "All x.(Hulu(x) -> Dirt(x))", "all x.(Hulu(x) -> Dirt(x))", "All x.(Hulu(x) -> Dirt(x))", "all x.(Hulu(x) -> Dirt(x))"]}
{"id": "folio_train_462", "nl": "Hulu is an animal or dirt.", "fol": "(IsAnimal(Hulu) | IsDirt(Hulu))", "prediction": ["all x.(Hulu(x) -> (Animal(x) | Dirt(x)))", "(Animal(Hulu) | Dirt(Hulu))", "all x.(Hulu(x) -> (Animal(x) | Dirt(x)))", "Hulu (Animal(h) | Dirt(h)))", "(Animal(Hulu) | Dirt(Hulu))", "all x.(Hulus(x) -> (Animal(x) | Dirt(x)))", "all x y.((Hulu(x) & Animal(y)) | Dirt(y))", "all x.(Hulu(x) -> (Animal(x) | Dirt(x)))", "(Animal(hulu) | Dirt(hulu))", "all x.(Hulu(x) -> (Animal(x) | Dirt(x)))", "all x.(Hulus(x) -> (Animal(x) | Dirt(x)))", "(Animal(Hulu) | Dirt(Hulu))", "exists x.(Hulu(x) & Animal(x) & Dirt(x))", "all x.(Hulu(x) -> (Animal(x) | Dirt(x)))", "exists x.(Hulu(x) & Animal(x) & Dirt(x))", "exists x.(Hulu(x) & (Animal(x) | Dirt(x)))"]}
{"id": "folio_train_463", "nl": "Hulu is either an animal or dirt.", "fol": "(IsAnimal(Hulu) | IsDirt(Hulu))", "prediction": ["all x.(Hulu(x) -> (Animal(x) | Dirt(x)))", "(Animal(Hulu) | Dirt(Hulu))", "all x.(Hulu(x) -> (Animal(x) | Dirt(x)))", "(Animal(Hulu) | Dirt(Hulu))", "(Animal(Hulus) | Dirt(Hulus))", "all x.(Hulu(x) -> (Animal(x) | Dirt(x)))", "all x y.((Hulu(x) & Animal(y)) | Dirt(y))", "all x.(Hulus(x) -> (Animal(x) | Dirt(x)))", "(Animal(Hulu) | Dirt(Hulu))", "exists x.(Hulu(x) & Animal(x) & Dirt(x))", "all x.(Hulu(x) -> (Animal(x) | Dirt(x)))", "(Animal(hulu) | Dirt(hulu))", "all x.(Hulus(x) -> (Animal(x) | Dirt(x)))", "all x.(Hulu(x) -> (Animal(x) | Dirt(x)))", "exists x.(Hulu(x) & Animal(x) & Dirt(x))", "exists x.(Hulu(x) & (Animal(x) | Dirt(x)))"]}
{"id": "folio_train_464", "nl": "If Hulu is either an animal or dirt, then Hulu eats and is dirt.", "fol": "((IsAnimal(Hulu) | IsDirt(Hulu)) -> (Eats(Hulu) & IsDirt(Hulu)))", "prediction": ["all x.((Hulu(x) & (Animal(x) | Dirt(x))) -> (Eats(x) & Dirt(x)))", "((Animal(Hulu) | Dirt(Hulu))) -> EatsAndDirt(Hulu))", "all x.((Hulu(x) & (Animal(x) | Dirt(x))) -> EatsAndDirt(x))", "all x.((Animal(x) | Dirt(x)) -> (Eats(x) & Dirt(x)))", "((Animal(Hulu) | Dirt(Hulu))) -> (Eats(Hulu) & Dirt(Hulu)))", "((Animal(h) | Dirt(h))) -> EatsAndDirt(h,h))", "all x.((Hulu(x) & (Animal(x) | Dirt(x))) -> (Eats(x) & Dirt(x)))", "all x.((Animal(x) | Dirt(x)) -> EatsAndDirt(x))", "all x y.((Hulu(x) & Animal(y)) | Dirt(y)) -> (Eats(x,y) & Dirt(x,y)))", "all x.((Hulu(x) & (Animal(x) | Dirt(x))) -> EatsAndDirt(x))", "exists x.(Hulu(x) & (Animal(x) | Dirt(x)) & Eats(x) & Dirt(x))", "((Animal(h) | Dirt(h))) -> EatsAndDirt(h,h))", "all x.((Hulu(x) & Animal(x)) | Dirt(x)) -> (Eats(x) & Dirt(x)))", "all x.((Hulu(x) & (Animal(x) | Dirt(x))) -> (Eats(x) & Dirt(x)))", "all x.((Hulu(x) & (Animal(x) | Dirt(x))) -> EatsAndDirt(x))", "all x.((Hulu(x) & (Animal(x) | Dirt(x))) -> (Eats(x) & Dirt(x)))"]}
{"id": "folio_train_465", "nl": "A controlled substance is a drug.", "fol": "all x.(IsControlledSubstance(x) -> IsDrug(x))", "prediction": ["all x.(ControlledSubstance(x) -> Drug(x))", "all x.(ControlledSubstance(x) -> Drug(x))", "all x y.((ControlledSubstance(x) & Drug(y)) -> Contains(x,y))", "all x.((ControlledSubstance(x) & Drug(x)) -> Drug(x))", "all x.(ControlledSubstance(x) -> Drug(x))", "all x.((ControlledSubstance(x) & Drug(x)) -> Contains(x))", "all x y.((ControlledSubstance(x) & Drug(y)) -> Is(x,y))", "all x.(ControlledSubstance(x) -> Drug(x))", "all x.(ContainedSubstance(x) -> Drug(x))", "all x.(ControlledSubstance(x) -> Drug(x))", "all x.((ControlledSubstance(x) & Drug(x)) -> Drug(x))", "all x.(ControlledSubstance(x) -> Drug(x))", "all x.(ControlledSubstance(x) -> Drug(x))", "exists x.(ControlledSubstance(x) & -Drug(x))", "all x.(ControlledSubstance(x) -> Drug(x))", "all x.(ControlledSubstance(x) -> Drug(x))"]}
{"id": "folio_train_466", "nl": "There exist both harmful and beneficial controlled substances.", "fol": "exists x x.(IsControlledSubstance(x) & IsControlledSubstance(y) & IsBeneficial(x) & IsHarmful(y))", "prediction": ["exists x.(HarmfulSubstance(x) & BeneficialControlledSubstance(x))", "exists x.(HazardousSubstance(x) & BeneficialControlledSubstance(x))", "exists x.(HarmfulSubstance(x) & BeneficialControlledSubstance(x))", "all x y.((HarmfulSubstance(x) & BeneficialControlledSubstance(y)) -> Exists(x,y))", "all x.((Substance(x) & Harmful(x) & Beneficial(x)) -> Controlled(x))", "all x y.((HazardousSubstance(x) & BeneficialControlledSubstance(y)) -> Exists(x,y))", "exists x.(HarmfulSubstance(x) & BeneficialControlledSubstance(x))", "exist x.(HazardousSubstance(x) & BeneficialContainment(x))", "exists x.(Harmful(x) & BeneficialControlledSubstance(x))", "exists x.(HarmfulSubstance(x) & BeneficialControlledSubstance(x))", "exists x y.((HarmfulSubstance(x) & BeneficialSubstance(y)) -> ControlledSubstance(x,y))", "exists x.(HarmfulSubstance(x) & BeneficialContainment(x))", "exist x.(HealthySubstance(x) & BeneficialControlledSubstance(x))", "exists both harmful and beneficial controlled substances.", "exist x.(HazardousSubstance(x) & BeneficialControlledSubstance(x))", "exists x.(HarmfulSubstance(x) & BeneficialControlledSubstance(x))"]}
{"id": "folio_train_467", "nl": "If a child is exposed to a controlled substance, he or she is in chemical endangerment.", "fol": "all x y.(ExposureToControlledSubstance(x,y) -> IsInChemicalEndangerment(x))", "prediction": ["all x.((Child(x) & ExposedToControlledSubstance(x)) -> ChemicalEndangement(x))", "all x y.((Child(x) & ExposedToControlledSubstance(x)) -> ChemicalEndangement(x))", "all x.((Child(x) & ExposedToControlledSubstance(x)) -> ChemicalEndangerment(x))", "all x y.((Child(x) & ExposedToControlledSubstance(x,y)) -> ChemicalEndangement(x))", "all x y z.((Child(x) & ExposedToControlledSubstance(x,y) & ChemicalEndangement(z)) -> InEndangement(x,z))", "all x.(ExposedToControlledSubstance(x) -> ChemicalEndangement(x))", "all x.((Child(x) & ExposedToControlledSubstance(x)) -> ChemicalEndangement(x))", "all x y.((Child(x) & ExposedToControlledSubstance(x,y)) -> ChemicalEndangement(x))", "all x.((Child(x) & ExposureToControlledSubstance(x)) -> ChemicalEndangement(x))", "all x.(ExposedToControlledSubstance(x) -> ChemicalEndangerment(x))", "all x y.((Child(x) & ExposureToControlledSubstance(x,y)) -> ChemicalEndangerment(x))", "all x.((Child(x) & Exposure(x,controlledSubstance)) -> ChemicalEndangement(x))", "all x.((Child(x) & ExposedToControlledSubstance(x)) -> ChemicalEndangerment(x))", "all x y.((Child(x) & ExposedToControlledSubstance(x)) -> ChemicalEndangerment(x))", "all x.(ExposedToControlledSubstance(x) -> ChemicalEndangering(x))", "all x.((Child(x) & ExposedToControlledSubstance(x)) -> ChemicalEndangerment(x))"]}
{"id": "folio_train_468", "nl": "Chemical Endangerment is harmful. ", "fol": "all x.(IsInChemicalEndangerment(x) -> IsHarmful(x))", "prediction": ["all x.(ChemicalEndangerment(x) -> Harmful(x))", "all x.(ChemicalEndangement(x) -> Harmful(x))", "(HarmfulChemicalEndangerment(ChemicalEndangement))", "all x y.((ChemicalEndangerment(x) & Chemical(y)) -> Harmful(x))", "all x y.((ChemicalEndangerment(x) & ChemicalEndangered(y)) -> Harmful(x))", "all x.(ChemicalEndangerment(x) -> Harmful(x))", "all x y.((ChemicalEndangement(x) & ChemicalEndangement(y)) -> Harmful(x))", "(HarmfulChemicalEndangerment(ChemicalEndangerment)", "all x.(ChemicalEndangement(x) -> Harmful(x))", "all x.(ChemisticalEndangement(x) -> Harmful(x))", "All x.(ChemicalEndangerment(x) -> Harmful(x))", "all x y.((ChemicalEndangerment(x) & Chemical(y)) -> Harmful(x))", "All x.(ChemicalEndangement(x) -> Harmful(x))", "All x.(ChemistryEndangement(x) -> Harmful(x))", "All x.(ChemicalEndangerment(x) -> Harmful(x))", "All x.(ChemicalEndangerment(x) -> Harmful(x))"]}
{"id": "folio_train_469", "nl": "The Controlled Substances Act was an act passed in 1971.", "fol": "(WasPassedInYear(ControlledSubstancesAct,Year1971) & IsAct(ControlledSubstancesAct))", "prediction": ["all x.(ControlledSubstancesAct(x) -> PassedIn(x,71))", "(ControlledSubstancesAct(ControlledSubstancesAct) & PassedIn(Act, 1971))", "(ActPassedIn(ControlledSubstancesAct, 1971))", "(ControlledSubstancesAct(Claim) & PassedIn(Claim) & 1971(Claim))", "all x y.((ControlledSubstancesAct(x) & ActPassedIn(y,1971)) -> ControlledSubstancesAct(x))", "all x.(ControlledSubstancesAct(x) -> PassedIn71(x))", "(ControlledSubstancesAct(Conducts) & PassedIn(Conducts) & DatedIn(Conducts) & DatedIn(s) & DatedIn(s)))", "(ActPassedIn71) & ControlledSubstancesAct(ControlledSubstances))", "All x.(ContainedSubstancesAct(x) -> PassedIn(x,71))", "the ControlledSubstancesAct (ActPassedIn71)", "All x.(ControlledSubstancesAct(x) -> PassedIn(x,71))", "all x y.((ControlledSubstancesAct(x) & ActPassedIn(y,1971)) -> ControlledSubstancesAct(x))", "all x.(ControlledSubstancesAct(x) -> ActPassedIn71(x))", "all x y.((ControlledSubstancesAct(x) & ActPassedIn(y, 1971)) -> Act(x))", "All x.(ControlledSubstancesAct(x) -> PassedIn(x,71))", "All x.(ControlledSubstancesAct(x) -> PassedIn71(x))"]}
{"id": "folio_train_470", "nl": "Some Acts prevent harmful things.", "fol": "exists x.(IsAct(x) & PreventsHarmfulEffects(x))", "prediction": ["exists x.(Act(x) & PreventsHarmfulThings(x))", "exists x.(Act(x) & PreventsHarmfulThings(x))", "exists x y.(Act(x) & Thing(y) & Prevents(x,y))", "exists x.(Act(x) & PreventsHarmfulThings(x))", "exists x y.(Act(x) & HarmfulThing(y) & Prevents(x,y))", "exists x.(Act(x) & PreventsHarmfulThings(x))", "exists x.(Action(x) & PreventsHarmfulThings(x))", "exists x.(Act(x) & PreventsHarmfulThings(x))", "exists x.(Act(x) & PreventsHarmfulThings(x))", "exists x y.(Act(x) & Thing(y) & Prevents(x,y))", "exists x.(Act(x) & PreventsHarmfulThings(x))", "exists x.(Act(x) & PreventsHarmfulThing(x))", "exists x.(Act(x) & PreventsDamaging(x))", "exists x.(Action(x) & PreventsHarmfulThings(x))", "exists x.(Act(x) & PreventsHarmfulThings(x))", "exists x.(Act(x) & PreventsHarmfulThing(x))"]}
{"id": "folio_train_471", "nl": "The Controlled Substances Act prevents harmful things.", "fol": "PreventsHarmfulEffects(ControlledSubstancesAct)", "prediction": ["all x.(ControlledSubstancesAct(x) -> PreventsHarmfulThings(x))", "all x y.((ControlledSubstancesAct(x) & HarmfulThing(y)) -> Prevents(x,y))", "(ControlledSubstancesAct(CSA) -> PreventsHarmfulThings(CSA))", "all x.(ControlledSubstancesAct(x) -> PreventsHarmfulThings(x))", "all x y z.((ControlledSubstancesAct(x) & HarmfulThing(y) & Object(z)) -> Prevents(x,y,z))", "(ControlledSubstancesAct(CSSA) -> PreventsHarmfulThings(CSA))", "all x y.((ControlledSubstancesAct(x) & HarmfulThing(y)) -> Prevents(x,y))", "(ControlledSubstancesAct) -> PreventsHarmfulThings(ControlledSubstancesAct))", "all x y.((ControlledSubstancesAct(x) & Thing(y)) -> PreventsHarmfulThings(x,y))", "all x.(ControlledSubstancesAct(x) -> PreventsHarmfulThings(x))", "all x y.((ControlledSubstancesAct(x) & HarmfulThing(y)) -> Prevents(x,y))", "All x.(ControlledSubstancesAct(x) -> PreventsHarmfulThings(x))", "All x.(ControlledSubstancesAct(x) -> PreventsHarmfulThanThings(x))", "all x y.((ControlledSubstancesAct(x) & HarmfulThing(y)) -> Prevents(x,y))", "All x.(ControlledSubstancesAct(x) -> PreventsHarmfulThings(x))", "All x.(ControlledSubstancesAct(x) -> PreventsHarmfulThanThings(x))"]}
{"id": "folio_train_472", "nl": "Some drugs are beneficial.", "fol": "exists x.(IsDrug(x) & IsBeneficial(x))", "prediction": ["exists x.(Drug(x) & Beneficial(x))", "exists x.(Drug(x) & Beneficial(x))", "exists x.(Drug(x) & Beneficial(x))", "exists x.(Drug(x) & Beneficial(x))", "exists x y.(Drug(x) & Drug(y) & Beneficial(x,y))", "exists x.(Drug(x) & Beneficial(x))", "exists x.(Drug(x) & Beneficial(x))", "exists x y.(Drug(x) & Drug(y) & Beneficial(x))", "exists x.(Drug(x) & Beneficial(x))", "exists x.(Drug(x) & Beneficial(x))", "exists x.(Drug(x) & Beneficial(x))", "exists x.(Drug(x) & Beneficial(x))", "exists x.(Drug(x) & Beneficial(x))", "exists x.(Doctor(x) & Beneficial(x))", "exists x.(Drug(x) & Beneficial(x))", "exists x.(Doctor(x) & Benefitful(x))"]}
{"id": "folio_train_473", "nl": "A child in chemical endangerment is in harm.", "fol": "exists x.(IsInChemicalEndangerment(x) -> IsHarmful(x))", "prediction": ["all x.((Child(x) & ChemicalEndangerment(x)) -> InHarm(x))", "all x.((Child(x) & ChemicalEnangerment(x)) -> InHarm(x))", "all x y.((Child(x) & ChemicalEnangerment(y)) -> InHarm(x,y))", "all x.(Child(x) -> InChemicalEndangerment(x))", "all x.((Child(x) & ChemicalEndangement(x)) -> InHarm(x))", "all x.(ChemicalEndangering(x) -> InHarm(x))", "all x y.((Child(x) & ChemicalEndangement(y)) -> InHarm(x,y))", "all x.((Child(x) & ChemicalEnangerment(x)) -> InHarm(x))", "all x y.((Child(x) & ChemicalEnangerment(x) & Child(y)) -> InHarm(x))", "all x.((Child(x) & ChemicalEndangerment(x)) -> InHarm(x))", "all x.(ChemicalEndangerment(x) -> InHarm(x))", "all x.(Child(x) -> ChemicalEndangement(x))", "exists x.(Child(x) & ChemicalEnangerment(x) & InHarm(x))", "all x y.((Child(x) & ChemicalEndangerment(y)) -> InHarm(x,y))", "all x.((Child(x) & ChemicalEnangerment(x)) -> InHarm(x))", "all x.((Child(x) & ChemicalEndangered(x)) -> InHarm(x))"]}
{"id": "folio_train_474", "nl": "No people who work at corporate jobs are starting a new company.", "fol": "all x.(WorksAtCorporateJobs(x) -> -IsStartingANewCompany(x))", "prediction": ["all x.(WorksAtCorporateJobs(x) -> -StartingNewCompany(x))", "all x.((Person(x) & WorksAtCorporateJobs(x)) -> -StartingNewCompany(x))", "all x y.((Person(x) & WorksAtCorporateJob(x)) -> -StartingNewCompany(x))", "-exists x.(WorksAtCorporateJob(x) & StartsNewCompany(x))", "all x.((Person(x) & WorksAtCorporateJobs(x)) -> StartsNewCompany(x))", "-exists x.(WorksAtCorporateJob(x) & NewCompany(x))", "all x y.((Person(x) & WorkAtCorporateJob(x) & WorkAtCorporateJob(y)) -> -StartingNewCompany(x))", "all x.(WorksAtCorporateJobs(x) -> -StartingNewCompany(x))", "all x.(WorksAtCorporateJob(x) -> -StartingNewCompany(x))", "all x.((Person(x) & WorksAtCorporateJob(x)) -> StartsNewCompany(x))", "all x y.((Person(x) & WorksAtCorporateJob(x,y)) -> -StartingNewCompany(x))", "-exists x.(WorksAtCorporateJob(x) & StartsNewCompany(x))", "all x.(WorksAtCorporateJobs(x) -> NoNewCompany(x))", "-exists x.(WorksAtCorporateJob(x) & NewCompany(x))", "all x.((Person(x) & WorkAtCorporateJobs(x)) -> -StartingNewCompany(x))", "-exists x.(WorksAtCorporateJobs(x) & NewCompany(x))"]}
{"id": "folio_train_475", "nl": "All entrepreneurs are starting a new company.", "fol": "all x.(IsEntrepreneur(x) -> IsStartingANewCompany(x))", "prediction": ["all x.(Entrepreneur(x) -> StartsNewCompany(x))", "all x.(Entrepreneur(x) -> StartsNewCompany(x))", "(StartingNewCompany(entrepreneur) -> NewCompany(entrepreneur))", "all x y.((Entrepreneur(x) & Company(y)) -> Starts(x,y))", "all x.(Employee(x) -> StartsNewCompany(x))", "all x.(Entrepreneur(x) -> StartsNewCompany(x))", "all x.(Entrepreneur(x) -> StartingNewCompany(x))", "(StartingNewCompany(entrepreneur) -> StartsNewCompany(entrepreneur))", "all x y.((Entrepreneur(x) & Company(y)) -> Starting(x,y))", "all x y.((Entrepreneur(x) & Company(y)) -> Starts(x,y))", "all x.(Employee(x) -> StartsNewCompany(x))", "all x.(Entrepreneur(x) -> StartsNewCompany(x))", "all x.(Entrepreneur(x) -> StartingNewCompany(x))", "all x.(Entrepreneur(x) -> StartsNewCompany(x))", "all x.(Entrepreneur(x) -> StartingNewCompany(x))", "all x.(Entrepreneur(x) -> StartsNewCompany(x))"]}
{"id": "folio_train_476", "nl": "All risk-averse people are people who work at corporate jobs.", "fol": "all x.(IsRiskAverse(x) -> WorksAtCorporateJobs(x))", "prediction": ["all x.(RiskAverse(x) -> WorkAtCorporateJobs(x))", "all x.(RiskAversePerson(x) -> WorkAtCorporateJobs(x))", "all x.(RiskAverse(x) -> WorkAtCorporateJobs(x))", "all x y.((RiskAverse(x) & Person(y)) -> WorksAtCorporateJobs(y))", "all x.((Person(x) & RiskAverse(x)) -> WorkAtCorporateJobs(x))", "all x.(RiskAversePerson(x) -> WorkAtCorporateJobs(x))", "all x y.((RiskAverse(x) & Person(y)) -> WorkAtCorporateJobs(y))", "all x.(RiskAverse(x) -> WorkAtCorporateJobs(x))", "(all x.(RiskAverse(x) -> WorksAtCorporateJobs(x))", "all x.(RiskAverse(x) -> WorkAtCorporateJobs(x))", "all x.((RiskAverse(x) & WorkAtCorporateJobs(x)) -> RiskAverse(x))", "all x.(RiskAversePerson(x) -> WorksAtCorporateJobs(x))", "all x y.((RiskAverse(x) & Person(y)) -> WorksAtCorporateJobs(y))", "all x.(RiskAversePeople(x) -> WorkAtCorporateJobs(x))", "all x.(RiskAverse(x) -> WorksAtCorporateJobs(x))", "all x.(RiskAversePerson(x) -> WorkAtCorporateJobs(x))"]}
{"id": "folio_train_477", "nl": "All people who hate working for others are entrepreneurs.", "fol": "all x.(HatesWorkingForOthers(x) -> IsEntrepreneur(x))", "prediction": ["all x.(HasWorkingForOthers(x) -> Entrepreneur(x))", "all x.((Person(x) & HatesWorkingForOthers(x)) -> Entrepreneur(x))", "all x.(HasWorkForOthers(x) -> Entrepreneur(x))", "all x.(HasWorkingForOthers(x) -> Entrepreneur(x))", "all x y.((Person(x) & HatesWorkingForOthers(x)) -> Entrepreneur(y))", "(HasWorkingForOthers(Person) & Entrepreneur(Person))", "all x.((Person(x) & HateWorkingForOthers(x)) -> Entrepreneur(x))", "all x y.((Person(x) & HateWorkingForOthers(x)) -> Entrepreneur(y))", "all x.(HateWorkingForOthers(x) -> Entrepreneur(x))", "all x.((Person(x) & HatesWorkingForOthers(x)) -> Entrepreneur(x))", "all x.(HasWorkingForOthers(x) -> Entrepreneur(x))", "all x y.((Person(x) & HatesWorkingForOthers(x)) -> Entrepreneur(y))", "all x.((Person(x) & HateWorkingForOthers(x)) -> Entrepreneur(x))", "all x.(HateWorkingForOthers(x) -> Entrepreneur(x))", "all x.(HasWorkingForOthers(x) -> Entrepreneur(x))", "all x.((Person(x) & HatesWorkingForOthers(x)) -> Entrepreneur(x))"]}
{"id": "folio_train_478", "nl": "If Mark Zuckerberg is neither an entrepreneur nor a person who hates working for others, then Mark Zuckerberg is not a risk-averse person.", "fol": "((-IsEntrepreneur(MarkZuckerberg) | -HatesWorkingForOthers(MarkZuckerberg)) -> -IsRiskAverse(MarkZuckerberg))", "prediction": ["all x.((MarkZuckerberg(x) & -(Entrepreneur(x) | HatesWorkingForOthers(x))) -> -RiskAversePerson(x))", "(-(Entrepreneur(Mark Zuckerberg) | HatesWorkingForOthers(Mark Zuckerberg))) -> -RiskAversePerson(Mark Zuckerberg))", "(-(MarkZuckerberg(Mark) & Entrepreneur(Mark)) | HatesWorkingForOthers(Mark)))", "all x.((MarkZachberg(x) & -(Entrepreneur(x) | HatesWorkingForOthers(x))) -> -RiskAversePerson(x))", "(-(MarkZappertain(Mark Zuckerberg) | HatesWorkingForOthers(MarkZappert))) -> -RiskAversePerson(MarkZappertain(MarkZappertain))", "all x y.((MarkZuckerberg(x) & -Entrepreneur(x) & -HasWorkingForOthers(x)) -> -RiskAversePerson(x))", "all x.((MarkZuckerberg(x) & -(Entrepreneur(x) | HatesWorkingForOthers(x))) -> -RiskAverse(x))", "all x.((Mark Zuckerberg(x) & -(Entrepreneur(x) | HatesWorkingForOthers(x))) -> -RiskAversePerson(x))", "(-(Entrepreneur(Mark Zuckerberg) | HatesWorkingForOthers(Mark Zuckerberg)) -> -RiskAversePerson(Mark Zuckerberg))", "all x.((MarkZappert(x) & -Entrepreneur(x) & -HasWorkingForOthers(x)) -> -RiskAversePerson(x))", "all x.((MarkZappert(x) & -(Entrepreneur(x) | HatesWorkingForOthers(x))) -> -RiskAversePerson(x))", "all x.((Mark Zuckerberg(x) & -(Entrepreneur(x) | HatesWorkingForOthers(x))) -> -RiskAverse(x))", "all x.((MarkZimmerberg(x) & -(Entrepreneur(x) | HatesWorkingForOthers(x))) -> -RiskAverse(x))", "all x.((MarkZuckerberg(x) & -(Entrepreneur(x) | HatesWorkingForOthers(x))) -> -RiskAverse(x))", "all x.((Mark Zuckerberg(x) & -Entrepreneur(x) & -HatesWorkingForOthers(x)) -> -RiskAversePerson(x))", "all x.((MarkZachberg(x) & -(Entrepreneur(x) | HatesWorkingForOthers(x))) -> -RiskAverse(x))"]}
{"id": "folio_train_479", "nl": "Mark Zuckerberg is an entrepreneur.", "fol": "IsEntrepreneur(MarkZuckerberg)", "prediction": ["Mark Zuckerberg is an Entrepreneur(Mark Zuckerberg)", "Mark Zuckerberg is an entrepreneur.", "(Entrepreneur(MarkZachberg)", "Entrepreneur(MarkZapperberg)", "Mark Zuckerberg (entrepreneur)", "Mark Zuckerberg ((Entrepreneur(Mark) & Entrepreneur(Mark)))", "(Entrepreneur(MarkZuckerberg)", "Mark Zuckerberg is an Entrepreneur(Mark Zuckerberg)", "(Entrepreneur(MarkZachberg)", "Mark Zuckerberg (entrepreneur)", "Mark Zuckerberg is an entrepreneur.", "Mark Zuckerberg, entrepreneur.", "(Entrepreneur(MarkZapperberg)", "Mark Zuckerberg, entrepreneur.", "Mark Zuckerberg is an Entrepreneur.", "Mark Zuckerberg (entrepreneur)"]}
{"id": "folio_train_480", "nl": "Mark Zuckerberg is a risk-averse person.", "fol": "IsRiskAverse(MarkZuckerberg)", "prediction": ["all x.(MarkZapperberg(x) -> RiskAverse(x))", "Mark Zuckerberg is risk-averse.", "all x.(MarkZachberg(x) -> RiskAverse(x))", "(RiskAverse(MarkZuckerberg)", "Mark Zuckerberg is riskaverse.", "Mark Zuckerberg is a risk-averse person.", "Mark Zuckerberg (Mark) & RiskAverse(Mark))", "all x.(MarkZuckerberg(x) -> RiskAverse(x))", "(RiskAverse(MarkZuckerberg)", "Mark Zuckerberg is risk-averse.", "(RiskAverse(Mark Zuckerberg)", "Mark Zuckerberg is a risk-averse person.", "all x.(MarkZapperberg(x) -> RiskAverse(x))", "Mark Zuckerberg (Mark) & RiskAverse(Mark))", "all x.(MarkZachberg(x) -> RiskAverse(x))", "Mark Zuckerberg is risk-averse."]}
{"id": "folio_train_481", "nl": "Mark Zuckerberg is not a risk-averse person.", "fol": "-IsRiskAverse(MarkZuckerberg)", "prediction": ["all x.(MarkZapperberg(x) -> -RiskAverse(x))", "Mark Zuckerberg is not risk-averse.", "(-RiskAverse(MarkZuckerberg))", "Mark Zuckerberg -RiskAverse(Mark Zuckerberg)", "all x.(MarkZachberg(x) -> -RiskAverse(x))", "Mark Zuckerberg is not riskaverse.", "Mark Zuckerberg is not a risk-averse person.", "(-RiskAverse(MarkZuckerberg))", "all x.(MarkZapperberg(x) -> -RiskAverse(x))", "-RiskAversePerson(MarkZuckerberg)", "Mark Zuckerberg -RiskAverse(Mark Zuckerberg)", "(-RiskAverse(Mark Zuckerberg))", "Mark Zuckerberg -RiskAversePerson(Mark Zuckerberg)", "Mark Zuckerberg is not risk-averse.", "Mark Zuckerberg is not a risk-averse person.", "Mark Zuckerberg -RiskAversePerson(Mark Zuckerberg)"]}
{"id": "folio_train_482", "nl": "There are two kitchens in the house: the upstairs kitchen and the downstairs kitchen.", "fol": "all x.(((IsKitchen(x) -> IsUpstairs(x)) & -IsDownstairs(x)) | (-(IsKitchen(x) -> IsUpstairs(x)) & IsDownstairs(x)))", "prediction": ["all x y.((House(x) & Kitchen(y)) -> (Upstairs(x) & Downstairs(y)))", "exists x.(House(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x))", "(ThereAreTwoKitchens(house) & UpstairsKitchen(house) & DownstairsKitchen(house))", "there are two kitchens in the house: the upstairs kitchen and the downstairs kitchen.", "all x y z.((House(x) & Kitchen(y) & Kitchen(z) & Upstairs(x,y) & Downstairs(x,z)) -> Kitchen(y,z))", "(HasKitchen(house,upstairs) & HasKitchen(house,downstairs))", "there are two kitchens in house: the upstairs kitchen and the downstairs kitchen.", "exists x.(House(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x))", "all x y.((House(x) & Kitchen(y)) -> (Upstairs(x) & Downstairs(y)))", "(ThereAreTwoKitchens(house,upstairs) & DownstairsKitchen(house,downstairs))", "exists x.(Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x))", "exists x.(House(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x))", "(HasKitchen(house,upstairs) & HasKitchen(house,downstairs))", "all x y.((House(x) & Kitchen(y)) -> (Upstairs(x) & Downstairs(y)))", "all x y.((House(x) & Kitchen(y)) -> (UpstairsKitchen(x) & DownstairsKitchen(y)))", "exists x.(House(x) & Kitchen(x,Upstairs) & Kitchen(x,Downstairs))"]}
{"id": "folio_train_483", "nl": "When someone is cooking in the downstairs kitchen, the first floor becomes smokey unless the air conditioner is running.", "fol": "((CookingInKitchen(Downstairs) & -IsAirConditionerRunning(Ac)) -> IsSmokey(FirstFloor))", "prediction": ["all x.((CookingInDownstairsKitchen(x) & AirConditionerRuning(x)) -> FirstFloorSmokey(x))", "all x y.((CookingInDownstairsKitchen(x) & AirConditionerRuning(y)) -> FirstFloorSmokey(x,y))", "all x.(CookingInDownstairsKitchen(x) -> (FirstFloorSmokey(x) & -AirConditionerRuns(x)))", "(CookingInDownstairsKitchen(x) -> FirstFloorSmokey(x))", "all x.((CookingInDownstairsKitchen(x) & AirConditionerRunning(x)) -> FirstFloorSmokey(x))", "all x y.((CookingInDownstairsKitchen(x) & AirConditionerRunning(y)) -> FirstFloorSmokey(x,y))", "all x y z.((CookingInDownstairsKitchen(x) & AirConditioner(y) & Kitchen(z)) -> (FirstFloorSmokey(x,y) & -RunningAirConditioner(x,z)))", "all x y.((CookingInDownstairsKitchen(x) & Person(y)) -> (FirstFloorSmokey(x) & -AirConditionerRuning(y)))", "(CookingInDownstairsKitchen(Person) -> FirstFloorSmokey(Person))", "all x.(CookingInDownstairsKitchen(x) -> (FirstFloorSmokey(x) & -AirConditionerRunning(x)))", "all x y.((CookingInDownstairsKitchen(x) & CookingInDownstairsKitchen(x)) -> (FirstFloorSmokey(y) & -AirConditionerRuning(y)))", "all x y.((CooksInDownstairsKitchen(x) & Kitchen(y)) -> (FirstFloorSmokey(x,y) & -AirConditionerRuns(x)))", "all x.(CookingInDownstairsKitchen(x) -> (SmokyFirstFloor(x) & -AirConditionerRuns(x)))", "all x y.((CooksInDrummageKitchen(x,y) & DownstairsKitchen(y)) -> (FirstFloorSmokey(x,y) & -AirConditionerRuns(x)))", "all x.((CookingInDownstairsKitchen(x) & AirConditionerRuning(x)) -> FirstFloorSmokey(x))", "all x.((CooksInDownstairsKitchen(x) & Floor(x) & -AirConditionerRuns(x)) -> Smoky(x))"]}
{"id": "folio_train_484", "nl": "If the air conditioner is running and someone is cooking in the downstairs kitchen, all the smoke travels to the second floor.", "fol": "((CookingInKitchen(Downstairs) & IsAirConditionerRunning(Ac)) -> IsSmokey(SecondFloor))", "prediction": ["all x y.((AirConditioner(x) & AirConditioner(y) & Running(x) & CookingInDownstairsKitchen(x)) -> SmokeTravelsToSecondFloor(y))", "all x.((AirConditionerRuns(x) & CookingInDownstairsKitchen(x)) -> SmokeTravelsToSecondFloor(x))", "all x y.((AirConditioner(x) & Running(x) & CookingInDownstairsKitchen(x)) -> SmokeTravelsToSecondFloor(y))", "all x.((AirConditioner(x) & Running(x) & CookingInDownstairsKitchen(x)) -> SmokeTravelsToSecondFloor(x))", "all x y z.((AirConditioner(x) & Running(x) & CookingInDownstairsKitchen(y) & SecondFloor(z)) -> SmokeTravelsTo(x,y,z))", "(all x.((AirConditioner(x) & Running(x) & CookingInDownstairsKitchen(x)) -> SmokeTravelsToSecondFloor(x))", "all x y z.((AirConditioner(x) & AirConditioner(y) & CookingInDownstairsKitchen(z) & Running(x)) -> SmokeTravelsToSecondFloor(x,y,z))", "all x y.((AirConditioner(x) & AirConditioner(y) & Running(x) & CookingInDownstairsKitchen(x)) -> SmokeTravelsToSecondFloor(y))", "all x.((AirConditionerRuns(x) & CookingInDownstairsKitchen(x)) -> SmokeTravelsToSecondFloor(x))", "all x.((AirConditioner(x) & Running(x) & CookingInDownstairsKitchen(x)) -> SmokeTravelsToSecondFloor(x))", "(all x.((AirConditioner(x) & Running(x) & CookingInDownstairsKitchen(x)) -> SmokeTravelsToSecondFloor(x))", "all x y.((AirConditioner(x) & Running(x) & CookingInDownstairsKitchen(x)) -> SmokeTravelsToSecondFloor(y))", "all x y z.((AirConditioner(x) & Running(x) & CookingInDownstairsKitchen(y) & SecondFloor(z)) -> SmokeTravelsTo(x,z))", "all x.((AirConditionerRuning(x) & CookingInDownstairsKitchen(x)) -> SmokeTravelsToSecondFloor(x))", "all x y.((AirConditioner(x) & AirConditioner(y) & Running(x) & CookingInDownstairsKitchen(y)) -> SmokeTravelsToSecondFloor(x,y))", "all x.((AirConditioner(x) & Running(x) & CookingInDownstairsKitchen(x)) -> SmokeTravelsToSecondFloor(x))"]}
{"id": "folio_train_485", "nl": "If someone is cooking downstairs, it will always cause the first floor to become smokey.", "fol": "(CookingInKitchen(Downstairs) -> IsSmokey(FirstFloor))", "prediction": ["all x.(Cooking(x) -> SmokyFirstFloor(x))", "all x.((CookingDownstairs(x) & SmokyFirstFloor(x)) -> CookingDownstairs(x))", "all x.(CookingDownstairs(x) -> SmokyFirstFloor(x))", "all x.((Cooking(x) & Downstairs(x)) -> SmokyFirstFloor(x))", "all x y.((Cooking(x) & Downstairs(y)) -> SmokyFirstFloor(x,y))", "(CookingDownstairs(Person,Downstairs) -> SmokyFirstFloor(Person,Downstairs))", "all x y.((CookingDownstairs(x) & CookingDownstairs(x)) -> SmokyFirstFloor(y))", "all x y.((Cooking(x) & Downstairs(y)) -> Smoky(x,y))", "all x.((CookingDownstairs(x) & SmokyFirstFloor(x)) -> CooksDownstairs(x))", "all x.(Cooking(x) -> SmokyFirstFloor(x))", "all x.(CookingDownstairs(x) -> SmokyFirstFloor(x))", "all x.((Cooking(x) & Downstairs(x)) -> SmokyFirstFloor(x))", "all x y.((CookingDownstairs(x) & Person(y)) -> SmokyFirstFloor(x,y))", "all x y.((Cooking(x) & Downstairs(y)) -> SmokyFirstFloor(x,y))", "all x.(Cooking(x) -> FirstFloorSmokey(x))", "all x.((CookingDownstairs(x) & SmokyFirstFloor(x)) -> AlwaysCauses(x,y))"]}
{"id": "folio_train_486", "nl": "If someone is cooking upstairs, the first floor will become smokey.", "fol": "(CookingInKitchen(Upstairs) -> IsSmokey(FirstFloor))", "prediction": ["all x.(CookingUpstairs(x) -> SmokyFirstFloor(x))", "all x.((CookingUpstairs(x) & SmokyFirstFloor(x)) -> CookingUpstairs(x))", "all x y.((CookingUpstairs(x) & Person(y)) -> SmokyFirstFloor(x))", "(CookingUpstairs(x) -> SmokyFirstFloor(x))", "all x.(CookingUpstairs(x) -> SmokyFirstFloor(x))", "all x.((CookingUpstairs(x) & FirstFloor(x)) -> Smoky(x))", "all x y.((CookingUpstairs(x) & Person(y)) -> SmokyFirstFloor(y))", "all x.(CookingUpstairs(x) -> SmokyFirstFloor(x))", "all x.(CookingUpstairs(x) -> FirstFloorSmokey(x))", "all x.((CookingUpstairs(x)) -> SmokyFirstFloor(x))", "all x y.((CookingUpstairs(x) & CookingUpstairs(y)) -> SmokyFirstFloor(x))", "all x y.((CookingUpstairs(x) & PersonCookingUpstairs(x)) -> SmokyFirstFloor(y))", "all x y.((CookingUpstairs(x) & Person(y)) -> Smoky(y))", "all x.((CookingUpstairs(x) & SmokyFirstFloor(x)) -> CookingUpstairs(x))", "exists x.(CookingUpstairs(x) & FirstFloorBecomesSmoky(x))", "all x.(CookingUpstairs(x) -> SmokyFirstFloor(x))"]}
{"id": "folio_train_487", "nl": "If someone is cooking downstairs and the air conditioner is running, there will be smoke upstairs.", "fol": "((CookingInKitchen(Downstairs) & IsAirConditionerRunning(Ac)) -> IsSmokey(SecondFloor))", "prediction": ["all x.((Cooking(x) & Downstairs(x) & AirConditionerRunning(x)) -> SmokeUpstairs(x))", "all x y.((Cooking(x) & AirConditioner(y) & Downstairs(x) & RunningAirConditioner(y)) -> SmokeUpstairs(x))", "all x.((Cooking(x) & DownstairsAirConditionerRunning(x)) -> SmokeUpstairs(x))", "all x.((CookingDownstairs(x) & AirConditionerRunning(x)) -> SmokeUpstairs(x))", "all x.((CooksDownstairs(x) & AirConditionerRuns(x)) -> SmokeUpstairs(x))", "(all x.((CookingDownstairs(x) & AirConditionerRuning(x)) -> SmokeUpstairs(x))", "exists x.(Cooking(x) & Downstairs(x) & AirConditionerRunning(x) & SmokeUpstairs(x))", "all x y.((Cooking(x) & AirConditioner(y) & Downstairs(x) & RunningAirConditioner(y)) -> SmokeUpstairs(x))", "all x.((Cooking(x) & Downstairs(x) & AirConditionerRuning(x)) -> SmokeUpstairs(x))", "all x y.((CooksDownstairs(x) & AirConditionerRuns(y)) -> SmokeUpstairs(x))", "all x y.((Cooking(x) & AirConditioner(y) & Downstairs(x) & Running(y)) -> SmokeUpstairs(x))", "exists x.(CookingDownstairs(x) & AirConditionerRuning(x) & SmokeUpstairs(x))", "all x.((CooksDownstairs(x) & AirConditionerRunning(x)) -> SmokeUpstairs(x))", "(all x.(CheatingDownstairs(x) -> RunningAirConditioner(x)))", "exists x.(Cooking(x) & Downstairs(x) & AirConditionerRuning(x))", "all x y.((Cooking(x) & AirConditioner(y) & Running(y)) -> SmokeUpstairs(x,y))"]}
{"id": "folio_train_488", "nl": "New York City is Located in the United States of America.", "fol": "IsLocatedIn(Nyc,Usa)", "prediction": ["All x.(NewYorkCity(x) -> UnitedStatesOfAmerica(x))", "all x y.((NewYorkCity(x) & UnitedStatesOfAmerica(y)) -> LocatedIn(x,y))", "(LocatedInUnitedStatesOfAmerica(NewYorkCity)", "New York City is LocatedInUnitedStatesOfAmerica(NYC)", "All x.((NewYorkCity(x) & UnitedStatesOfAmerica(x)) -> LocatedIn(x,y))", "(LocatedIn(NewYorkCity) & UnitedStatesOfAmerica(NewYorkCity))", "New YorkCityIsLocatedInUnitedStatesOfAmerica(NYC)", "all x.(NewYorkCity(x) -> UnitedStatesOfAmerica(x))", "all x y.((NewYorkCity(x) & UnitedStatesOfAmerica(y)) -> LocatedIn(x,y))", "(LocatedInUnitedStatesOfAmerica(NewYorkCity)", "New York City is LocatedInUnitedStatesOfAmerica(NYC)", "All x.(NewYorkCity(x) -> LocatedInUnitedStatesOfAmerica(x))", "All x.((NewYorkCity(x) & UnitedStatesOfAmerica(x)) -> LocatedIn(x,y))", "All x.(NewYorkCity(x) -> UnitedStatesOfAmerica(x))", "all x y.((NewYorkCity(x) & UnitedStatesOfAmerica(y)) -> LocatedIn(x,y))", "all x y.((NewYorkCity(x) & UnitedStatesOfAmerica(y)) -> LocatedIn(x,y))"]}
{"id": "folio_train_489", "nl": "United States of America is part of North America.", "fol": "IsLocatedIn(Usa,NorthAmerica)", "prediction": ["all x.(UnitedStatesOfAmerica(x) -> PartOfNorthAmerica(x))", "(NorthAmerica(UnitedStatesOfAmerica))", "(PartOfNorthAmerica(UnitedStatesOfAmerica))", "all x.((UnitedStatesOfAmerica(x) & NorthAmerica(x)) -> PartOf(x,y))", "all x.(UnitedStatesOfAmerica(x) -> PartOfNorthAmerica(x))", "all x y.((UnitedStatesOfAmerica(x) & NorthAmerica(y)) -> PartOf(x,y))", "(PartOfNorthAmerica(UnitedStatesOfAmerica,NorthAmerica))", "All x.(U.S.O.A.(UnitedStatesOfAmerica(x) -> NorthAmerica(x))", "all x.(UnitedStatesOfAmerica(x) -> PartOfNorthAmerica(x))", "all x y.((UnitedStatesOfAmerica(x) & NorthAmerica(y)) -> PartOf(x,y))", "all x.(UnitedStatesOfAmerica(x) -> NorthAmerica(x))", "all x y.((UnitedStatesOfAmerica(x) & NorthAmerica(y)) -> PartOf(x,y))", "all x.(UnitedStatesOfAmerica(x) -> PartOfNorthAmerica(x))", "All x.(UnitedStatesOfAmerica(x) -> NorthAmerica(x))", "All x.(UnitedStatesOfAmerica(x) -> NorthAmerica(x))", "All x.(UnitedStatesOfAmerica(x) -> PartOfNorthAmerica(x))"]}
{"id": "folio_train_490", "nl": "North America is in the western hemisphere of the earth.", "fol": "IsLocatedIn(NorthAmerica,WestHemisphere)", "prediction": ["all x.(NorthAmerica(x) -> WesternHemisphereOfEarth(x))", "all x.(NorthAmerica(x) -> InWideHemisphereOfEarth(x))", "all x y.((NorthAmerica(x) & Earth(y)) -> WesternHemisphere(x,y))", "(WesterlyHemisphere(NorthAmerica) & Earth(NorthAmerica))", "(WesterlyHemispheric(NorthAmerica) -> InEarth(NorthAmerica))", "all x.(NordAmerica(x) -> WesternHemisphereOfEarth(x))", "all x y.((NorthAmerica(x) & WesternHemisphere(y)) -> InEarth(x,y))", "all x.(NorthAmerica(x) -> WesternHemisphereOfEarth(x))", "(WideHemispheric(NorthAmerica) & Earth(NordAmerica))", "all x.(NorthAmerica(x) -> InWideHemispheric(x))", "all x.(NordAmerica(x) -> InWideHemisphereOfEarth(x))", "(WesternHemisphere(NorthAmerica) & Earth(WesternHemisphere(NorthAmerica))", "all x y.((NorthAmerica(x) & Earth(y)) -> WesternHemisphere(x,y))", "all x.(NorthAmerica(x) -> WesternHemisphereOfEarth(x))", "All x.(NorthAmerica(x) -> WesternHemisphereOfEarth(x))", "all x.(NorthAmerica(x) -> WestHemispheric(x))"]}
{"id": "folio_train_491", "nl": "New York City is a highly developed city.", "fol": "IsHighlyDeveloped(Nyc)", "prediction": ["all x.((NewYorkCity(x) & HighlyDeveloped(x)) -> HighlyDeveloped(x))", "all x.(NewYorkCity(x) -> HighlyDeveloped(x))", "(HighlyDevelopedCity(NewYorkCity)", "New York City is highlyDeveloped(x)", "all x.((NewYorkCity(x) & HighlyDeveloped(x)) -> HighlyDeveloped(x))", "NewYorkCity(NYC) -> HighlyDeveloped(NYC))", "all x.(NewYorkCity(x) -> HighlyDevelopedCity(x))", "All x y.((NewYorkCity(x) & City(y)) -> HighlyDeveloped(x,y))", "(HighlyDevelopedCity(NewYork))", "New York City is highly developed.", "all x.(NewYork(x) -> HighlyDevelopedCity(x))", "all x.((NewYorkCity(x) & HighlyDeveloped(x)) -> HighlyDeveloped(x))", "New York City is highlydeveloped.", "(HighlyDevelopedCity(NewYorkCity)", "all x.(NewYorkCity(x) -> HighlyDevelopedCity(x))", "all x.((NewYorkCity(x) & HighlyDeveloped(x)) -> HighlyDeveloped(x))"]}
{"id": "folio_train_492", "nl": "If place A is located in place B and place B is located in place C, then place A is located in place C.", "fol": "all z.((IsLocatedIn(x,y) & IsLocatedIn(y,z)) -> IsLocatedIn(x,z))", "prediction": ["all x y.((Place(x) & Place(y) & LocatedIn(x,y)) -> LocatedIn(x,y))", "all x.((PlaceA(x) & PlaceB(x) & PlaceC(x)) -> LocatedInPlaceC(x))", "all x y z.((Place(x) & Place(y) & Place(z) & LocatedIn(x,y,z)) -> LocatedIn(x,y,z))", "all x y.((Place(x) & PlaceB(y) & PlaceC(y)) -> LocatedInPlaceC(x,y))", "(all x.((PlaceA) & PlaceB(x)) -> LocatedIn(x,B)) & all y.((PlaceC) & PlaceA)) -> LocatedIn(y,C)))", "all x.((PlaceA(x) & LocatedInPlaceB(x) & LocatedInPlaceC(x)) -> LocatedInPlaceC(x))", "(all x y.((Place(x) & PlaceB(x)) -> LocatedIn(x,y)) & all z w.((Place(z) & PlaceC(w)) -> LocatedIn(z,w)))", "(all x.((PlaceA(x) & PlaceB(x)) -> LocatedIn(x,B)) & all y.((PlaceC(y) & PlaceA(y)) -> LocatedIn(y,C)))", "all x.((Place(x) & PlaceB(x) & PlaceC(x)) -> LocatedInPlaceC(x))", "all x.((PlaceA(x) & PlaceB(x) & PlaceC(x)) -> LocatedInPlaceC(x))", "all x y z.((Place(x) & Place(y) & Place(z) & LocatedIn(x,y,z) & LocatedIn(y,z)) -> LocatedIn(x,y,z))", "(all x.((PlaceA) & PlaceB)) -> LocatedInPlaceC(x)))", "all x y.((Place(x) & PlaceB(y) & PlaceC(x)) -> LocatedInPlaceC(x,y))", "all x y.((Place(x) & Place(y) & LocatedInPlace(x,y)) -> LocatedInPlace(x,y))", "all x.((PlaceA(x) & PlaceB(x) & PlaceC(x)) -> LocationInPlaceC(x))", "all x.((PlaceA(x) & PlaceB(x) & PlaceC(x)) -> LocatedInPlaceA(x))"]}
{"id": "folio_train_493", "nl": "A highly developed city is located in the western hemisphere of the earth.", "fol": "exists x.(IsHighlyDeveloped(x) -> IsLocatedIn(x,WestHemisphere))", "prediction": ["all x.((City(x) & WesternHemisphere(x)) -> HighlyDeveloped(x))", "all x.(HighlyDevelopedCity(x) -> (LocatedInWESTHemisphere(x) & LocatedInEarth(x)))", "all x.(HighlyDevelopedCity(x) -> (LocatedInWesterlyHemisphere(x) & LocatedInWesterlyHemisphere(x)))", "all x.((City(x) & HighlyDeveloped(x)) -> WesternHemisphereOfEarth(x))", "all x y.((City(x) & WesternHemisphere(y)) -> HighlyDeveloped(x))", "all x y z.((City(x) & WesternHemisphere(y) & Earth(z)) -> HighlyDeveloped(x))", "all x.(HighlyDevelopedCity(x) -> (LocatedInWideHemispheric(x) & LocatedInWesternHemisphere(x)))", "all x y.((City(x) & WesternHemisphere(y)) -> HighlyDeveloped(x))", "all x.((City(x) & WesternHemisphere(x)) -> HighlyDeveloped(x))", "exists x.(City(x) & HighlyDeveloped(x) & WesternHemisphere(x))", "all x.((City(x) & HighlyDeveloped(x)) -> WestHemisphereOfEarth(x))", "all x y.((City(x) & HighlyDeveloped(x)) -> (LocatedInWESTHemispheric(y) & LocatedInEarth(x,y)))", "all x y.((City(x) & WesternHemisphere(y)) -> HighlyDeveloped(x))", "all x.(HighlyDevelopedCity(x) -> (LocatedInWESTHemisphericHemisphere(x) & LocatedInEarth(x)))", "all x.(HighlyDevelopedCity(x) -> LocatedInWesternHemisphereOfEarth(x))", "all x y.((City(x) & WesternHemisphere(y)) -> HighlyDeveloped(x,y))"]}
{"id": "folio_train_494", "nl": "USA is not located in western hemisphere of the earth.", "fol": "-IsLocatedIn(Usa,WestHemisphere)", "prediction": ["all x.(USA(x) -> -LocatedInWideHemisphereOfEarth(x))", "-exists x.(USA(x) & WesternHemisphere(x))", "all x.(USA(x) -> -LocatedInWesterlyHemisphereOfEarth(x))", "(-LocatedInWideHemisphere(USA))", "(USA) & -LocatedInWideHemisphereOfEarth(USA))", "-(USA(USA) & WesternHemisphere(USA))", "(-WesterlyHemisphere(USA))", "all x.((USA(x) & -WesterlyHemisphere(x)) -> -LocatedIn(x,WesterlyHemisphere))", "-(LocatedInWideHemisphere(USA) & -LocatedInEarth(USA))", "(USA,WesternHemisphere(USA) & -LocatedIn(USA,WesternHemisphere(USA))", "all x.(USA(x) -> -WesterlyHemisphereOfEarth(x))", "the United States (USA) & -LocatedInWideHemisphereOfEarth(USA))", "-exists x.(USA(x) & WesternHemisphereOfEarth(x))", "(UnitedStates(USA) & -LocatedInWideHemisphere(USA))", "all x.(USA(x) -> -LocatedInWESTHemisphericHemisphereOfEarth(x))", "all x.(USA(x) -> -WesterlyHemisphereOfEarth(x))"]}
{"id": "folio_train_495", "nl": "New York City is located in the New York State.", "fol": "IsLocatedIn(Nyc,NyState)", "prediction": ["all x.(NewYorkCity(x) -> NewYorkState(x))", "all x y.((NewYorkCity(x) & NewYorkState(y)) -> LocatedIn(x,y))", "(LocatedInNewYorkState(NewYorkCity)", "New YorkCity(x) & NewYorkState(y))", "New York City is located in New York State.", "(NewYorkCity(NYC) & NewYorkState(NY))", "all x.(NewYorkCity(x) -> NewYorkState(x))", "All x.((NewYorkCity(x) & NewYorkState(y)) -> LocatedIn(x,y))", "New YorkCity.com is locatedInNewYorkState(x)", "all x y.((NewYorkCity(x) & NewYorkState(y)) -> LocatedIn(x,y))", "(LocatedInNewYorkState(NewYorkCity)", "all x.(NewYorkCity(x) -> NewYorkState(x))", "all x y.((NewYorkCity(x) & NewYorkState(y)) -> LocatedIn(x,y))", "all x.(NewYorkCity(x) -> NewYorkState(x))", "All x.(NewYorkCity(x) -> NewYorkState(x))", "All x.(NewYorkCity(x) -> LocatedInNewYorkState(x))"]}
{"id": "folio_train_496", "nl": "Callus 4 is a poem that was written by the ancient Roman writer Catullus.", "fol": "(IsPoem(Callus4) & AuthoredBy(Callus4,Catullus) & IsRomanWriter(Catullus))", "prediction": ["all x.((Poem(x) & AncientRomanWriterCatullus(x)) -> Callus4(x))", "all x.(Callus4(x) -> (Poem(x) & WrittenByAncientRomanWriterCatullus(x)))", "Callus 4 is a poem that was written by ancientRomanWriterCatullus.", "(Poem(Callus4) & WrittenByAntiqueRomanWriterCatullus(Callus4))", "all x y.((Poem(x) & AncientRomanWriterCatullus(y)) -> Callus4(x))", "all x.((Poem(x) & WrittenByAncientRomanWriterCatullus(x)) -> Callus4(x))", "All x.(Calculus(x) -> (Poem(x) & WrittenByAncientRomanWriterCatullus(x)))", "(Poem(callus4) & WrittenByAntiqueRomanWriterCatullus(callus4))", "all x.(Callus4(x) -> (Poem(x) & WrittenByAntiqueRomanWriterCatullus(x)))", "(Poem(Callus4) & WrittenByAncientRomanWriterCatullus(Callus4))", "Callus 4 is a poem written by ancientRomanWriterCatullus.", "Callus 4 is a poem that was written by ancientRomanWriterCatullus.", "all x y.((Poem(x) & AncientRomanWriterCatullus(y)) -> Callus4(x,y))", "All x.(Callus(x) -> (Poem(x) & WrittenByAntiqueRomanWriterCatullus(x)))", "(Poem(Callus4) & WrittenByAncientRomanWriterCatullus)", "all x y.((Poem(x) & AncientRomanWriter(y) & Catullus(x)) -> Callus4(x))"]}
{"id": "folio_train_497", "nl": "Callus 4 is a story about the retirement of a well-traveled ship.", "fol": "DescribesRetirementOfShip(Callus4)", "prediction": ["all x.(Callus4(x) -> (RetirementOfWellTraveledShip(x) & WellTraveledShip(x)))", "all x.((Callus4(x) & WellTraveledShip(x)) -> Retirement(x))", "all x y.((Callus4(x) & WellTraveledShip(y)) -> Retires(x,y))", "(Story(Callus4) & WellTraveledShip(Callus4))", "Callus 4 is a story about the retirement of a welltraveledship.", "(RetirementOfWellTraveledShip(Callus4))", "all x.(Callus4(x) -> (Retirement(x) & WellTraveledShip(x)))", "All x.(Callus(x) -> (RetirementOfWellTraveledShip(x) & WellTraveledShip(x)))", "Callus 4 is a story about the retirement of a well-traveledship.", "all x.((Callus4(x) & WellTraveledShip(x)) -> StoryAboutRetiring(x))", "all x y z.((Callus4(x) & Ship(y) & WellTraveled(z)) -> Retires(x,y,z))", "all x y.((Callus(x) & WellTraveledShip(y)) -> Retires(x,y))", "all x y.((Callus4(x) & WellTraveledShip(y)) -> Retirement(x,y))", "All x.(Calus4(x) -> (Retirement(x) & WellTraveledShip(x)))", "all x y.((Calculus4) & WellTraveledShip(y)) -> Retires(x,y))", "All x.(Callus4(x) -> RetiresWellTraveledShip(x))"]}
{"id": "folio_train_498", "nl": "There is a strong analogy of human aging in the poem Callus 4.", "fol": "(IsPoem(Callus4) -> HasAgingAnalogy(Callus4))", "prediction": ["all x y.((Poem(x) & Poem(y)) -> StrongAnalogyOfHumanAging(x,y))", "all x y z.((Poem(x) & Poem(y) & Poem(z) & Callus4(y)) -> StrongAnalogyOfHumanAging(x,y,z))", "all x.((Poem(x) & Poem(x)) -> StrongAnalogyOfHumanAging(x))", "(StrongAnalogyOfHumanAgingInPoem(Callus4))", "all x y.((Poem(x) & Poem(y) & Callus4(y)) -> StrongAnalogyOfHumanAging(x,y))", "exists x.(AnalogyOfHumanAging(x) & Poem(x) & Callus4(x))", "(AnalogyOfHumanAgingInPoem(callus4))", "(StrongAnalogyOfHumanAging(Poem) & InPoem(Poem) Callus4(Poem))", "all x y z.((Poem(x) & Poem(y) & Poem(z)) -> AnalogousOfHumanAging(x,y,z))", "exists x.(HumanAging(x) & StrongAnalogy(x))", "exists x.(Analogy(x) & HumanAging(x) & Poem(x) & Callus4(x))", "all x y.((Poem(x) & Poem(y) & Callus4(x,y)) -> StrongAnalogyOfHumanAging(x,y))", "(StrongAnalogyOfHumanAgingInPoem(callus4))", "exists x.(HumanAgingAnalogy(x) & Poem(x) & Callus4(x))", "all x y z.((Poem(x) & Poem(y) & Poem(z) & Callus4(z)) -> StrongAnalogyOfHumanAging(x,y,z))", "all x y.((Poem(x) & Poem(y) & Callus4(y)) -> StrongAnalogyOfHumanAging(x,y))"]}
{"id": "folio_train_499", "nl": "Callus 4 is written in an unusual iambic trimeter to convey a sense of speed over the waves.", "fol": "((IsPoem(Callus4) -> IsIambicTrimeter(Callus4)) & ConveysSenseOfWaves(Callus4))", "prediction": ["all x.(Callus4(x) -> (WrittenInUnusuallyIambicTrimeter(x) & ConveysSpeedOverWaves(x)))", "all x.(Callus(x) -> (WrittenInUnusuallyIambicTrimeter(x) & ConveysSpeedOverWaves(x)))", "all x.((Calculus4(x) & UnusuallyIambicTrimeter(x)) -> ConveysSpeedOverWaves(x))", "(UnusuallyIambicTrimeter(Calculus4) & ConveysSpeedOverWaves(Calculus4))", "all x y.((Calculus4) & IambicTrimeter(x) & IambicTrimeter(y)) -> ConveysSpeedOverWaves(x,y))", "all x y.((Callus4(x) & IambicTrimeter(y)) -> WrittenInUnusually(x,y))", "all x.(Calculus4(x) -> (WrittenInUnusuallyIambicTrimeter(x) & ConveysSpeedOverWaves(x)))", "all x y.((Calculus(x) & IambicTrimeter(y) & WrittenIn(x,y)) -> ConveysSpeedOverWaves(x))", "(UnusuallyIambicTrimeter(Calculus4) & ConveysSpeedOverWaves(Calculus4))", "all x.((Calculus4) & UnusuallyIambicTrimeter(x)) -> ConveysSpeedOverWaves(x))", "all x.(Calculus4(x) -> (WrittenInUnusualIambicTrimeter(x) & ConveysSpeedOverWaves(x)))", "all x.(Callus(x) -> (WrittenInUnusuallyIambicTrimeter(x) & ConveysSpeedOverWaves(x)))", "all x y z.((Callus4(x) & IambicTrimeter(y) & Wave(z)) -> WrittenInUnusually(x,y,z))", "all x y.((Callus4(x) & IambicTrimeter(y)) -> ConveysSpeedOverWaves(x,y))", "All x.(Callus4(x) -> (WrittenInUnusuallyIambicTrimeter(x) & ConveysSpeedOverWaves(x)))", "All x.(Calculus4(x) -> WrittenInUnusuallyIambicTrimeter(x))"]}
{"id": "folio_train_500", "nl": "There exists a poem written by an ancient Roman writer with a strong analogy of human aging.", "fol": "exists x.(IsPoem(x) & AuthoredBy(x,Catullus) & IsRomanWriter(Catullus) & HasAgingAnalogy(x))", "prediction": ["exists x y.(Poem(x) & AncientRomanWriter(y) & WrittenBy(x,y) & StrongAnalogyOfHumanAging(x))", "exists x.(Poem(x) & WrittenByAncientRomanWriter(x) & StrongAnalogyOfHumanAging(x))", "exists x y.((Poem(x) & AncientRomanWriter(y) & WrittenBy(x,y)) -> StrongAnalogyOfHumanAging(x))", "exists x y z.(Poem(x) & AncientRomanWriter(y) & HumanAging(z) & WrittenBy(x,y) & StrongAnalogy(x,z))", "existance of poem written by ancientRomanWriter(x) & StrongAnalogyOfHumanAging(x))", "all x y z.((Poem(x) & AncientRomanWriter(y) & HumanAging(z)) -> WrittenByWithStrongAnalogy(x,y,z))", "exist\u2019s a poem written by ancientRomanWriterWithStrongAnalogyOfHumanAging(x))", "exists x.(Poem(x) & WrittenByAncientRomanWriter(x) & StrongAnalogyOfHumanAging(x))", "exists x y.(Poem(x) & AncientRomanWriter(y) & WrittenBy(x,y) & StrongAnalogyOfHumanAging(x))", "all x y z.((Poem(x) & AncientRomanWriter(y) & HumanAging(z) & WrittenBy(x,y) & StrongAnalogy(x,z)) -> StrongAnalogy(x,y,z))", "exists x y.((Poem(x) & AncientRomanWriter(y) & WrittenBy(x,y)) -> StrongAnalogyOfHumanAging(x))", "existance of poem written by ancientRomanWriterWithStrongAnalogyOfHumanAging(p))", "exists x.(Poem(x) & WrittenByAncientRomanWriter(x) & StrongAnalogyOfHumanAging(x))", "exists a poem written by an ancientRomanWriter with strong analogy of human Aging.", "exists x.(Poem(x) & WrittenByAncientRomanWriter(x) & StrongAnalogyOfHumanAging(x))", "exists x.(Poem(x) & WrittenByAncientRomanWriter(x) & StrongAnalogyOfHumanAging(x))"]}
{"id": "folio_train_501", "nl": "There exists a poem written by an ancient Roman writer written in iambic petameter.", "fol": "exists x.(IsPoem(x) & AuthoredBy(x,AncientRomanWriter) & IambicPentameter(x))", "prediction": ["exists x.(Poem(x) & WrittenByAncientRomanWriter(x) & WrittenInIambicPetameter(x))", "exists x y.(Poem(x) & AncientRomanWriter(y) & WrittenInIambicPetameter(x,y))", "exists x y.((Poem(x) & AncientRomanWriter(y) & WrittenInIambicPetameter(x)) -> Poem(x,y))", "exists x.(Poem(x) & WrittenByAncientRomanWriter(x) & WrittenInIambicPetameter(x))", "exists x y.(Poem(x) & AncientRomanWriter(y) & WrittenBy(x,y) & WrittenIn(x,y) & IambicPetameter(x))", "existance of poem written by ancientRomanWriter(x) & WrittenInIambicPetameter(x))", "all x y z.((Poem(x) & AncientRomanWriter(y) & IambicPetameter(z) & WrittenBy(x,y)) -> WrittenIn(x,z))", "exists x.(Poem(x) & WrittenByAncientRomanWriter(x) & WrittenInIambicPetalmeter(x))", "existance of Poem(x) & WrittenByAncientRomanWriter(x) & WrittenInIambicPetalmeter(x))", "exists a poem written by an ancientRomanWriter writteninIambicPetameter.", "exists x.(Poem(x) & AncientRomanWriter(x) & WrittenInIambicPetameter(x))", "all x y z.((Poem(x) & AncientRomanWriter(y) & IambicPetameter(z)) -> WrittenBy(x,y,z))", "exists x.(Poem(x) & WrittenByAncientRomanWriter(x) & WrittenInIambicPetameter(x))", "exists x y.(Poem(x) & AncientRomanWriter(y) & WrittenInIambicPetalmeter(x,y))", "exists a poem written by ancientRomanWriter writteninIambicPetameter.", "exists x.(Poem(x) & WrittenByAncientRomanWriter(x) & WrittenInIambicPetalmeter(x))"]}
{"id": "folio_train_502", "nl": "Callus 4 is written in an unusual iambic trimeter to convey a strong analogy of human aging.", "fol": "(IsPoem(Callus4) & IsIambicTrimeter(Callus4) & WrittenIambicToConvey(Callus4,StrongAgingAnalogy))", "prediction": ["all x.(Callus4(x) -> (WrittenInUnusuallyIambicTrimeter(x) & ConveysStrongAnalogyOfHumanAging(x)))", "all x.((Calculus4(x) & UnusuallyIambicTrimeter(x)) -> ConveysStrongAnalogyOfHumanAging(x))", "all x.(Calculus(x) -> (WrittenInUnusuallyIambicTrimeter(x) & ConveysStrongAnalogyOfHumanAging(x)))", "(UnusuallyIambicTrimeter(Calculus4) & ConveysStrongAnalogyOfHumanAging(Calculus4))", "all x y.((Calculus4) & IambicTrimeter(x) & IambicTrimeter(y)) -> ConveysStrongAnalogyOfHumanAging(x,y))", "all x.(Callus4(x) -> (WrittenInUnusuallyIambicTrimeter(x) & ConveysStrongAnalogyOfHumanAging(x)))", "all x.((Callus4(x) & UnusualIambicTrimeter(x)) -> StrongAnalogyOfHumanAging(x))", "all x y.((Callus4(x) & IambicTrimeter(y)) -> WrittenInUnusually(x,y))", "all x.(Callus4(x) -> (UnusuallyIambicTrimeter(x) & ConveysStrongAnalogyOfHumanAging(x)))", "all x y.((Calculus(x) & IambicTrimeter(y) & WrittenIn(x,y)) -> ConveysStrongAnalogyOfHumanAging(x))", "(UnusuallyIambicTrimeter(Calculus4) & ConveysStrongAnalogyOfHumanAging(Calculus4))", "all x y.((Callus4(x) & IambicTrimeter(y)) -> WrittenInUnusualToConveyStrongAnalogyOfHumanAging(x,y))", "all x.(Callus4(x) -> (WrittenInUnusualIambicTrimeter(x) & ConveysStrongAnalogyOfHumanAging(x)))", "all x.(Calculus(x) -> (WrittenInUnusuallyIambicTrimeter(x) & ConveysStrongAnalogyOfHumanAging(x)))", "All x y z.((Callus4(x) & IambicTrimeter(y) & HumanAging(z)) -> WrittenInForm(x,y,z))", "(UnusuallyIambicTrimeter(Callus4) & ConveysStrongAnalogyOfHumanAging(Callus4))"]}
{"id": "folio_train_503", "nl": "Westworld is an American science fiction-thriller TV series.", "fol": "(IsTVSeries(Westworld) & IsAmerican(Westworld) & IsScienceFictionThriller(Westworld))", "prediction": ["All x.(Westworld(x) -> (AmericanScienceFictionThrillerTVSeries(x) & -AmericanScienceFictionThrillerTVSeries(x)))", "(ScientificFictionThriller(Westworld) & AmericanTVSeries(Westworld))", "(AmericanScientificFictionThrillerTVSeries(Westworld))", "(AsianScienceFictionThrillerTVSeries(Westworld) & AnimatedBy(Westworld))", "Westworld (AmericanScientificFictionThrillerTVSeries)", "(AsianScientificFictionThrillerTVSeries(Westworld) & AmericanThrillerTVSeries(Westworld))", "Westworld is a sciencefiction-thriller TV Series.", "all x.(WESTWORD(x) -> (AmericanScienceFictionThrillerTVSeries(x) & -AmericanScienceFictionThrillerTVSeries(x)))", "(AmericanScienceFictionThrillerTVSeries(Westworld) & AnimatedBy(Westworld,USA))", "All x.(Westworld(x) -> (AmericanScientificFictionThrillerTVSeries(x) & -AmericanScientificFictionThrillerTVSeries(x)))", "Westworld (TVSeries(Westworld) & AmericanScienceFictionThriller(Westworld))", "(AsianScienceFictionThrillerTVSeries(Westworld) & AmericanThrillerTVSeries(Westworld))", "all x.(Westworld(x) -> (AmericanScienceFictionThrillerTVSeries(x) & StarsIn(x,y)))", "Westworld is an American ScienceFictionThrillerTVSeries(Westworld)", "All x.(Westworld(x) -> (AsianScienceFictionThrillerTVSeries(x) & StarsIn(x,y)))", "Westworld is a science fiction-thriller TV series."]}
{"id": "folio_train_504", "nl": "In 2016, a new television series named Westworld debuted on HBO.", "fol": "DebutedInYear(Westworld,Year2016)", "prediction": ["all x.((TelevisionSeries(x) & Westworld(x)) -> DebutedOnHBO(x))", "all x y.((TelevisionSeries(x) & TelevisionSeries(y) & HBO(x)) -> WestworldDebutedOn(x,y))", "all x.((NewTelevisionSeries(x) & Westworld(x)) -> DebutedOnHBO(x))", "all x y.((NewTelevisionSeries(x) & Westworld(y)) -> DebutedOnHBO(x,y))", "(NewTelevisionSeries(Westworld) & DebutedOnHBOX(Westworld,2016))", "all x y z.((TelevisionSeries(x) & TelevisionSeries(y) & HBO(z) & Westworld(y)) -> DebutedOn(x,y,z))", "(Westworld(tv series) & DebutedOnHBO(tv series,tv series,tv series))", "(Westworld(x) & DebutedOnHBO(x))", "all x.((TelevisionSeries(x) & Westworld(x)) -> DebutedOnHBO(x))", "all x y.((TelevisionSeries(x) & TelevisionSeries(y) & HBO(x)) -> DebutedOn(x,y))", "(DebutedOnHBOX(2016,Westworld) & TelevisionSeries(Westworld))", "(NewTelevisionSeries(Westworld) & DebutedOnHBOX(Westworld) & In2016(Westworld))", "all x.((NewTelevisionSeries(x) & Westworld(x)) -> DebutedOnHBO(x))", "all x.((TelevisionSeries(x) & Westworld(x) & HBO(x)) -> DebutedOn(x,y))", "all x y.((NewTelevisionSeries(x) & Westworld(y)) -> DebutedOnHBO(x,y))", "all x.((NewTelevisionSeries(x) & Westworld(x)) -> DebutedOnHost(x))"]}
{"id": "folio_train_505", "nl": "The TV series Westworld is adapted from the original film in 1973, which was written and directed by Michael Crichton.", "fol": "exists x.(IsAdaptedFrom(Westworld,x) & ProducedInYear(x,Year1973) & WrittenBy(Michael,x) & DirectedBy(Michael,x))", "prediction": ["(AdaptedFromOriginalFilm(Westworld, 1973) & WrittenAndDirectedByMichaelCriton(Westworld))", "all x.(Westworld(x) -> (AdaptedFromOriginalFilm(x,1973) & WrittenAndDirectedByMichaelCriton(x)))", "all x y.((TVSeries(x) & OriginalFilm(y) & WrittenAndDirectedByMichaelCriton(x)) -> WestworldAdaptedFrom(x,y))", "all x.((TVSeries(x) & OriginalFilm(x) & WrittenAndDirectedByMichaelCriton(x)) -> WestworldAdaptedFrom(x,73))", "all x y z.((TVSeries(x) & OriginalFilm(y) & Film(z) & WrittenAndDirectedBy(x,y,z)) -> WestworldAdaptedFrom(x,y,z))", "(AdaptedFromOriginalFilm(Westworld) & WrittenAndDirectedByMichaelCriton(Westworld))", "(AdaptedFromOriginalFilmIn(Westworld, 1973) & WrittenAndDirectedByMichaelCriton(Westworld,73))", "(Adaptation(TVSeries,Westworld) & OriginalFilm(TV,73) & WrittenAndDirectedByMichaelCriton(TV,73))", "the TVSeriesWestworld(TV) AdaptedFromOriginalFilmIn(TV,73) & WrittenAndDirectedByMichaelCruchon(TV,73))", "all x.(Westworld(x) -> (AdaptedFromOriginalFilm(x) & WrittenAndDirectedByMichaelCriton(x)))", "all x y.((TelevisionSeries(x) & OriginalFilm(y) & WrittenAndDirectedByMichaelCriton(x)) -> WestworldAdaptedFrom(x,y))", "(AdaptedFromOriginalFilmIn(Westworld) & WrittenAndDirectedByMichaelCriton(Westworld))", "All x.((TVSeries(x) & OriginalFilm(x,1973) & WrittenAndDirectedByMichaelCruchon(x)) -> WestworldAdaptedFrom(x,1973))", "(AdaptedFromOriginalFilmInTelevision(Westworld) & WrittenAndDirectedByMichaelCriton(Westworld))", "All x.(Westworld(x) -> (AdaptedFromOriginalFilm(x,73) & WrittenAndDirectedByMichaelCruchon(x)))", "(AdaptedFromOriginalFilm(Westworld, 1973) & WrittenAndDirectedByMichaelCruchon(Westworld,73))"]}
{"id": "folio_train_506", "nl": "The 1973 film Westworld is about robots that malfunction and begin killing the human visitors.", "fol": "IsAbout(Westworld,Robots)", "prediction": ["all x.((Film(x) & 1973(x)) -> (Robots(x) & Malfunction(x) & KillHumanVisitors(x)))", "all x y.((Film(x) & 1973(x) & Robot(y) & Malfunction(y) & KillHumanVisitors(y)) -> Westworld(x))", "the 1973 film Westworld is about robots that malfunction and begin killing humanvisitors.", "all x y.((Film(x) & Film(y) & 1973) & Robot(x) & HumanVisitors(y)) -> (Malfunctions(x,y) & Kills(x,y)))", "(MoreMalfunctioningRobots(Woodworld) & KillsHumanVisitors(Woodworld))", "(ThirtyFilm(Westworld) -> (Robots(Woodworld) & Malfunction(Woodworld) & KillHumanVisitors(Woodworld)))", "(Wildworld(73) -> (Robots(73) & Malfunction(73) & KillHumanVisitors(73)))", "(MalfunctioningRobots(Woodworld) & KillsHumanVisitors(Woodworld))", "(ThirtyOne(film) & AboutRobots(film, 1973) & Malfunction(film,humanVisitors) & Kills(film,humanVisitors))", "(MoreThan(73) & Robots(Woodworld) & Malfunction(73) & KillHumanVisitors(73))", "((ThirdWorld(x) & Robots(x) & Malfunction(x) & KillHumanVisitors(x)) -> Westworld(x))", "all x.((Film(x) & 1973(x)) -> (Robots(x) & Malfunction(x) & KillHumanVisitors(x)))", "all x y z.((Film(x) & 1973(y) & Robot(z) & Malfunction(z) & HumanVisitors(z)) -> Kills(x,z))", "all x y.((Film(x) & 1973(x) & Robot(y) & Misconfigured(y) & KillsHumanVisitors(y)) -> Westworld(x,y))", "all x.((Film(x) & Westworld(x) & 1973)) -> (Robots(x) & Malfunction(x) & KillHumanVisitors(x)))", "all x.((Film(x) & 1973(x)) -> (Robots(x) & Misconfigured(x) & KillsHumanVisitors(x)))"]}
{"id": "folio_train_507", "nl": "Michael Crichton has directed a film about robots.", "fol": "exists x.(Film(x) & IsAbout(x,Robots) & DirectedBy(Michael,x))", "prediction": ["all x.((MichaelCriton(x) & Robot(y)) -> DirectedFilm(x,y))", "all x y.((MichaelCriton(x) & Robot(y)) -> DirectedFilm(x,y))", "Michael Crichton has directed a film about robots.", "(DirectedBy(MichaelCriton) & Film(MichaelCriton))", "(DirectedByMichaelCriton(MichaelCriton) & AboutRobots(MichaelCriton))", "(DirectedBy(MichaelCriton) & AboutRobots(MichaelCriton))", "Michael Crichton has directed a film about robots.", "all x y.((MichaelCriton(x) & Robot(y)) -> DirectedFilm(x,y))", "all x.((MichaelCriton(x) & Robot(y)) -> DirectedFilm(x,y))", "Michael Crichton & DirectedRobotFilm(MichaelCriton,Robots)", "(DirectedByMichaelCrichton(Michael Crichton) & FilmAboutRobots(MichaelCrichton))", "(DirectedFilm(MichaelCriton,Robots))", "Michael Crichton has directed a film about robots.", "all x.((MichaelCruchon(x) & Robot(y)) -> DirectsFilm(x,y))", "all x y.((MichaelCruchon(x) & Robot(y)) -> DirectedFilm(x,y))", "Michael Crichton has directed a film about robots."]}
{"id": "folio_train_508", "nl": "An American TV series debuted in 2016.", "fol": "exists x.(IsTVSeries(x) & IsAmerican(x) & DebutedInYear(x,Year2016))", "prediction": ["all x.((AmericanTVSeries(x) & DebutedIn2016(x)) -> DebutedIn2016(x))", "all x y.((AmericanTVSeries(x) & DebutedIn2016(x,y)) -> DebutedIn2016(x,y))", "all x.(AmericanTVSeries(x) -> DebutedIn2016(x))", "(AmericanTVSeries(a) & DebutedIn2016(a))", "all x y z.((AmericanTVSeries(x) & DebutedIn2016(x,y) & 2016(z)) -> DebutedIn2016(x,z))", "(AmericanTelevisionSeries(a) & DebutedIn2016(a))", "(AmericanTVSeries(a) & DebutedIn2016(a))", "all x y.((AmericanTVSeries(x) & DebutedIn2016(x,y)) -> DebutedIn2016(y))", "all x.((AmericanTVSeries(x) & DebutedIn2016(x)) -> DebutedIn2016(x))", "all x.(AmericanTelevisionSeries(x) -> DebutedIn2016(x))", "(AmericanTVSeries(a) & DebutedIn2016(a))", "all x.(AmericanTVSeries(x) -> DebutedIn2016(x))", "all x y z.((AmericanTVSeries(x) & DebutedIn2016(x,y) & 2016(z)) -> DebutedIn(x,z))", "(AmericanTVSeriesDebutedIn2016))", "all x y.((AmericanTVSeries(x) & DebutedIn2016(x,y)) -> DebutedIn2016(x,y))", "All x.(AmericanTVSeries(x) -> DebutedIn2016(x))"]}
{"id": "folio_train_509", "nl": "The 2008 Summer Olympics were held in Beijing, China.", "fol": "HeldInLocation(Summer2008olympics,Beijingchina)", "prediction": ["all x.((SummerOlympics(x) & HeldIn(x,Beijing)) -> HeldIn(x,China))", "all x y.((SummerOlympics(x) & Beijing(y)) -> HeldIn(x,y))", "(SummerOlympics(2008) & HeldIn(2008,Beijing))", "(2008 SummerOlympics(x) & HeldIn(x,Beijing))", "All x.(SummerOlympics(x) -> HeldIn(x,Beijing,China))", "the SummerOlympics(2008) & HeldInBeijing(2008)", "the 2008 SummerOlympics(2008) & HeldInBeijing(2008)", "(SummerOlympics(2008) & HeldInBeijing(2008))", "all x.((SummerOlympics(x) & HeldIn(x,Beijing)) -> HeldIn(x,China))", "all x y.((SummerOlympics(x) & Beijing(y)) -> HeldIn(x,y))", "2008 SummerOlympics(x) & HeldInBeijing(x)", "All x.(SummerOlympics(x) -> HeldIn(x,Beijing,China))", "(2008 SummerOlympics(x) & HeldIn(x,Beijing,China))", "(SummerOlympics(2008) & HeldInBeijing(2008))", "All x.(2008SummerOlympics(x) -> HeldIn(x,Beijing,China))", "all x y.((SummerOlympics(x) & Beijing(y)) -> HeldIn(x,y))"]}
{"id": "folio_train_510", "nl": "The 2008 Summer Olympics were the second Summer Olympic Games to be held in a communist state.", "fol": "SecondOlympicGamesIn(Summer2008olympics,Heldincommuniststate)", "prediction": ["all x.((SummerOlympics(x) & SecondSummerOlympics(x) & HeldInCommunistState(x)) -> HeldInCommunistState(x))", "all x y.((SummerOlympics(x) & Summer(y)) -> (SecondSummerOlympics(x,y) & HeldInCommunistState(x)))", "(SummerOlympics(2008) & SecondSummerOlympicsToBeHavenInCommunistState(2008))", "the SummerOlympics(2008) -> (Second SummerOlympics(2008) & HeldInCommunistState(2008)))", "the 2008 SummerOlympics(2008) -> (Second SummerOlympics(2008) & HeldInCommunistState(2008)))", "all x y.((SummerOlympics(x) & SummerSummer(y)) -> (SecondSummerOlympics(x,y) & HeldInCommunistState(x)))", "all x.((SummerOlympics(x) & SecondSummerOlympics(x)) -> HeldInCommunistState(x))", "(SummerOlympics(2008) & SecondSummerOlympicGamesToBeHasCommunistState(2008))", "all x.((SummerOlympics(x) & SecondToBeHasCommunistState(x)) -> SummerOlympics(x))", "(SocialOlympics(2008) & SecondToBeHasCommunistState(2008))", "the SummerOlympics(2008) -> (Second SummerOlympics(2008) & HeldInCommunistState(2008)))", "all x y.((SummerOlympics(x) & ComunistState(y)) -> SecondToBeHavenIn(x,y))", "(SummerOlympics(2008) & SecondToBeHasCommunistState(2008))", "all x.((SummerOlympics(x) & SecondSummerOlympicsToBeHasCommunistState(x)) -> HeldIn(x,y))", "all x y.((SummerOlympics(x) & Summer(y)) -> (Second SummerOlympics(x,y) & HeldInCommunistState(x)))", "(SummerOlympics(2008) & SecondToBeHavenInCommunistState(2008))"]}
{"id": "folio_train_511", "nl": "China won the most gold medals (48) in the 2008 Summer Olympics.", "fol": "WonMedals(China,Mostgoldmedals)", "prediction": ["all x y.((China(x) & SummerOlympics(y) & MostGoldMedal(x,y)) -> (WonMostGoldMedal(x,y) & (WonMostGoldMedal(x,y) | WonMostGoldMedal(x,y))))", "(GoldMedal(China,48) & SummerOlympics(2008))", "all x.((China(x) & GoldMedal(x,48)) -> Won(x,48))", "(GoldMedal(China) & MostGold(China,48))", "(MostGoldMedal(China,48) -> WonSummerOlympics(China,48))", "all x y.((China(x) & SummerOlympics(y)) -> (WonMostGoldMedals(x,y) & (48) | -48))))", "(GoldMedal(China,48) & InSummerOlympics(China,8))", "(GoldMedalWinner(China,48) & SummerOlympics(2008))", "all x.((China(x) & GoldMedal(x,48)) -> WonInSummerOlympics(x))", "(48) -> China WonGoldMedal(x))", "(MostGoldMedal(China,48) -> InSummerOlympics(China,08))", "all x.((China(x) & MostGoldMedal(x,48)) -> WonSummerOlympics(x,8))", "(GoldMedal(China) & MostGold(China,48))", "all x y.((China(x) & SummerOlympics(y) & MostGoldMedal(x,y)) -> Won(x,y))", "(GoldMedalWon(China,48) & SummerOlympics(2008))", "all x.((China(x) & GoldMedal(x,48)) -> Won(x,48))"]}
{"id": "folio_train_512", "nl": "The United States placed second in the gold medal tally but won the highest number of medals overall (112) in the 2008 Summer Olympics.", "fol": "(PlacedInMedalTally(Unitedstates,Secondingoldmedals) & WonMedals(Unitedstates,Highestnumberofmedals))", "prediction": ["all x y.((UnitedStates(x) & GoldMedalTally(y)) -> (PlacedSecond(x,y) & WonHighestNumberOfMedals(x,y)))", "(PlacedSecondInGoldMedalTally(UnitedStates) & PlacedSecondInGoldMedalTally(UnitedStates) & WonHighestNumberOfMedals(UnitedStates,112))", "(SecondInGoldMedalTally(UnitedStates) & SecondInGoldMedalTally(UnitedStates) & WinsHighestNumberOfMedals(UnitedStates,112))", "all x.((UnitedStates(x) & GoldMedalTally(x,2)) -> (WonHighestNumberOfMedals(x,12)))", "(Second(UnitedStates) & GoldMedalTally(Gold) & HighestNumberOfMedals(Under12))", "the United States placed second in gold medal tally, but won highest number of medals overall (112))", "all x y z.((UnitedStates(x) & GoldMedalTally(y) & SummerOlympics(z)) -> (PlacedSecondInTally(x,y) & WonHighestNumberOfMedals(x,z)))", "(StatesUnitedStates(UnitedStates) & PlacedSecondInGoldMedalTally(UnitedStates) & WonHighestNumberOfMedals(UnitedStates,112))", "(GoldMedalTally(UnitedStates) & PlacedSecond(UnitedStates) & HighestNumberOfMedals(UnitedStates,112))", "all x y.((UnitedStates(x) & SummerOlympics(y)) -> (PlacedSecondInGoldMedalTally(x,y) & WonHighestNumberOfMedals(x,y)))", "(Also placed SecondInGoldMedalTally(A) & WonHighestNumberOfMedals(A) & SummerOlympics(A) & SummerOlympics(B))", "all x.((UnitedStates(x) & GoldMedalTally(x) & HighestNumberOfMedals(x,121)) -> PlacedSecond(x))", "(SecondGoldMedalTally(UnitedStates) & HighestGoldMedalNumber(UnitedStates,112))", "(PlacedSecondInGoldMedalTally(UnitedStates) & WonHighestNumberOfMedals(UnitedStates,112))", "all x y.((UnitedStates(x) & GoldMedalTally(y)) -> (PlacedSecond(x,y) & WonHighestNumberOfMedals(x,y)))", "all x.((U.S.A.(x) & GoldMedalTally(x,2) & HighestNumberOfMedals(x,12)) -> PlacedSecond(x))"]}
{"id": "folio_train_513", "nl": "The third place in the gold medal tally was achieved by Russia in the 2008 Summer Olympics.", "fol": "PlacedInMedalTally(Russia,Thirdingoldmedals)", "prediction": ["all x y.((Russland(x) & SummerOlympics(y)) -> ThirdPlaceInGoldMedalTally(x,y))", "the third place in the gold medal tally was achieved by Russia in the 2008 SummerOlympics.", "all x y.((Russian(x) & SummerOlympics(y)) -> ThirdPlaceInGoldMedalTally(x,y))", "all x.((Russland(x) & SummerOlympics(x)) -> ThirdPlaceInGoldMedalTally(x))", "(AchievedThreePlacesInGoldMedalTally(Russia,2008))", "all x.((Russian(x) & SummerOlympics(x)) -> ThirdPlaceInGoldMedalTally(x))", "the third place in gold medal tally was achieved by Russia in the 2008 SummerOlympics.", "All x.(GoldMedalTally(x) -> (AchievedByRussiaInSummerOlympics(x) & HeldInSummerOlympics(x)))", "(GoldMedalTally) & ThirdPlaceAchievedByRussia(Russia,2008))", "(AchievedThreePlaceInGoldMedalTally(Russia,2008))", "thirdplace in gold medal tally was achieved by Russia in the 2008 SummerOlympics.", "-(GoldMedalTally(Russia,2008) & ThirdPlace(Russia,2008))", "all x y.((Russia(x) & SummerOlympics(y) & 2008(y)) -> ThirdPlaceInGoldMedalTally(x,y))", "all x y.((Russland(x) & SummerOlympics(y)) -> ThirdPlaceInGoldMedalTally(x,y))", "(RussiansAchievedGoldMedalTally(Russia,2008))", "(GoldMedalTally) & ThirdPlaceAchievedByRussland(Russia,2008))"]}
{"id": "folio_train_514", "nl": "If a country places third in gold medals, then they had fewer gold medals than the team that won the most gold medals.", "fol": "all x y.((PlacedInMedalTally(x,Thirdingoldmedals) & WonMedals(y,Mostgoldmedals)) -> HasFewerGoldMedalsThan(x,y))", "prediction": ["all x y.((Country(x) & Team(y) & PlacesThreeInGoldMedal(x,y)) -> FewerGoldMedal(x,y))", "all x y z.((Country(x) & Team(y) & PlacesThreeInGoldMedal(x,y) & Team(z) & WonMostGoldMedal(y,z)) -> FewerGoldMedal(x,y,z))", "all x.((Country(x) & PlacesThreeInGoldMedal(x)) -> FewerGoldMedal(x))", "all x y z.((Country(x) & Team(y) & Team(z) & PlacesThreeInGoldMedal(x,y) & PlacesThreeInGoldMedal(x,z)) -> FewerGoldMedal(x,y,z))", "all x y.((Country(x) & Team(y) & PlacesThreeInGoldMedals(x,y)) -> FewerGoldMedals(x,y))", "all x.((Country(x) & PlacesThreethInGoldMedal(x)) -> FewerGoldMedal(x))", "(all x.(GoldMedal(x) -> PlacesThreeth(x)))", "all x y.((Country(x) & Country(y) & PlacesThreeInGoldMedal(x,y)) -> FewerGoldMedal(x,y))", "all x y.((Country(x) & PlacesThreeInGoldMedal(x,y)) -> FewerGoldMedal(x,y))", "all x y z.((Country(x) & Country(y) & Team(z) & PlacesThreeInGoldMedals(x,y) & PlacesThreeInGoldMedals(y,z)) -> FewerGoldMedals(x,y,z))", "all x y.((Country(x) & Team(y) & PlacesThirdInGoldMedal(x)) -> FewerGoldMedal(x,y))", "all x.((Country(x) & PlacesThreeInGoldMedals(x)) -> FewerGoldMedals(x))", "all x.((Country(x) & PlacesThirdInGoldMedal(x)) -> FewerGoldMedal(x,y))", "all x y.((Country(x) & Country(y) & PlacesThreethInGoldMedal(x,y)) -> FewerGoldMedal(x,y))", "all x.((Country(x) & PlacesThreethInGoldMedal(x)) -> FewerGoldMedal(x,y))", "all x.((Country(x) & PlacesThirdInGoldMedal(x)) -> FewerGoldMedalsThanMostGoldMedal(x))"]}
{"id": "folio_train_515", "nl": "87 countries won at least one medal during the 2008 Games.", "fol": "exists x.(IsCountry(x) & WonMedals(x,Medal))", "prediction": ["all x y.((Country(x) & Country(y) & Games(y)) -> WonAtLeastOneMedal(x,y))", "all x.((Country(x) & WinsMedal(x,2008)) -> AtLeastOneMedal(x))", "87 countries won at least one medal during the 2008 Games.", "all x y z.((Country(x) & Country(y) & Games(z) & WinsMedal(x,y,z)) -> WinsMedal(x,y,z))", "all x y.((Country(x) & Games(y)) -> WonAtLeastOneMedal(x,y))", "(all x.((Country(x) & WinsMedal(x)) -> AtLeastOneMedal(x)))", "all x.((Country(x) & WinsMedal(x,y)) -> 87(x))", "all x y.((Country(x) & Country(y) & WonMedal(x,y)) -> WinMedal(x,y))", "87 countries won at least one medal during the 2008 Games.", "all x.((Country(x) & WonAtLeastOneMedal(x)) -> 87(x))", "87 countries won medals during the 2008 Games.", "(LittleMeasure(87) & AtLeastOneMileage(87))", "all x.((Country(x) & WinsMedal(x,2008)) -> AtLeastOneMedal(x))", "87 countries won at least one medal during the 2008 Games.", "all x y.((Country(x) & Games(y)) -> WonAtLeastOneMedal(x,y))", "all x.((Country(x) & WinsMedal(x,y) & Games(y)) -> AtLeastOneMedal(x,y))"]}
{"id": "folio_train_516", "nl": "Russia did not win fewer gold medals than China.", "fol": "-HasFewerGoldMedalsThan(Russia,China)", "prediction": ["all x y.((Russland(x) & China(y)) -> -WonMinorGoldMedal(x,y))", "all x y.((Russia(x) & China(y)) -> -WonMinorGoldMedal(x,y))", "all x.((Russland(x) & China(x)) -> -WonMinorGoldMedal(x,y))", "-(GoldMedalWinner(Russia,China) & -GoldMedalWinner(Russia,China))", "(-winsGoldMedal(Russia,China))", "-(WonMinorGoldMedal(Russia,China) & -WonMinorGoldMedal(Russia,China))", "(WonGoldMedal(Russia) & -WonGoldMedal(Russia))", "all x y.((Russland(x) & China(y)) -> -WinsMinorGoldMedal(x,y))", "-(Russland(Russia) & China(China))", "(WinsGoldMedal(Russia,China) & -WinsGoldMedal(Russia,China))", "(-winsGoldMedal(Russia) & China(Russia))", "all x.((Russia(x) & China(x)) -> -WonMinorGoldMedal(x,Russia))", "all x y.((Russland(x) & China(y)) -> -WonMinorGoldMedals(x,y))", "(-winsGoldMedal(Russia,China))", "(-WinsGoldMedalsInRussia(Russia,China))", "all x y.((Russland(x) & China(y)) -> WinsLittleGoldMedal(x,y))"]}
{"id": "folio_train_517", "nl": "The United States won fewer gold medals than China.", "fol": "HasFewerGoldMedalsThan(Unitedstates,China)", "prediction": ["all x y.((UnitedStates(x) & China(y)) -> WonMinorGoldMedal(x,y))", "(WonMinorGoldMedal(UnitedStates) & WonMinorGoldMedal(UnitedStates))", "(GoldMedalWinner(UnitedStates) & GoldMedalWinner(China))", "all x y.((UnitedStates(x) & China(y)) -> WonLittlerGoldMedal(x,y))", "all x.((UnitedStates(x) & China(x)) -> WonLittlerGoldMedals(x))", "(GoldMedalWinners(U.S.) & GoldMedalWinners(U.S.)", "(WinsGoldMedal(UnitedStates) & WinsGoldMedal(UnitedStates))", "all x y.((UnitedState(x) & China(y)) -> WonMinorGoldMedal(x,y))", "(GoldMedalWords(UnitedStates,Chinese) & FewerGoldMedals(UnitedStates,Chinese))", "(WonMinorGoldMedal(UnitedStates) & WonMinorGoldMedal(UnitedStates))", "all x.((UnitedStates(x) & China(x)) -> WonMinorGoldMedal(x,y))", "all x y.((UnitedStates(x) & China(y)) -> WonMinorGoldMedal(x,y))", "All x.((UnitedStates(x) & China(x)) -> WonMinorGoldMedal(x))", "all x y.((UnitedStates(x) & China(y)) -> WinsLittlerGoldMedal(x,y))", "All x.((UnitedStates(x) & China(x)) -> WinsLessGoldMedals(x))", "all x y.((U.S.A.(x) & China(y)) -> WonMinorGoldMedal(x,y))"]}
{"id": "folio_train_518", "nl": "Russia won fewer gold medals than China.", "fol": "HasFewerGoldMedalsThan(Russia,China)", "prediction": ["all x y.((Russia(x) & China(y)) -> WonMinorGoldMedal(x,y))", "all x y.((Russland(x) & China(y)) -> WonMinorGoldMedal(x,y))", "(WonMinorGoldMedal(Russia) & WonMinorGoldMedal(China))", "all x.((Russland(x) & China(x)) -> WonMinorGoldMedal(x,y))", "all x.((Russia(x) & China(x)) -> WonMinorGoldMedal(x))", "(GoldMedalWinners(Russia,Russia) & GoldMedalWinners(China,Russia))", "all x y.((Russia(x) & China(y)) -> WonMinorGoldMedal(x,y))", "all x y.((Russland(x) & China(y)) -> WonMinorGoldMedal(x,y))", "all x.((Russia,China,Russia) & WonMinorGoldMedal(x,Russia)) -> WonMinorGoldMedal(x,China))", "(WonMinorGoldMedal(Russia,China))", "(WinsGoldMedal(Russia,China) & FewerGoldMedal(Russia,China))", "all x y.((Russland(x) & China(y)) -> WinsLittlerGoldMedal(x,y))", "(GoldMedalWinnersRussia(Russia) & GoldMedalWinnersChina(Russia))", "(GoldMedalWinners(Russia,Russia) & GoldMedalWinners(China,Russia))", "all x y.((Russia(x) & China(y)) -> WinsLittlerGoldMedal(x,y))", "all x y.((Russland(x) & China(y)) -> WonMinorGoldMedals(x,y))"]}
{"id": "folio_train_519", "nl": "Xiufeng, Xiangshan, Diecai, Qixing are districts in the city of Guilin.", "fol": "(IsDistrictIn(Xiufeng,Guilin) & IsDistrictIn(Xiangshan,Guilin) & IsDistrictIn(Diecai,Guilin) & IsDistrictIn(Qixing,Guilin) & IsCity(Guilin))", "prediction": ["all x.((District(x) & Guilin(x)) -> (Xiufeng(x) | Xiangshan(x) | Diecai(x) | Qixing(x)))", "(District(x) & Guilin(x))", "all x y.((District(x) & City(y) & Guilin(y)) -> (Xiufeng(x) | Xiangshan(x) | Diecai(x) | Qixing(x)))", "-(District(x) & Guilin(x)) -> (Xiufeng(x) | Xiangshan(x) | Diecai(x) | Qixing(x)))", "all x y z.((District(x) & Guilin(y) & (Xiufeng(z) | Xiangshan(z) | Diecai(z) | Qixing(z))) -> District(x,y,z))", "(Districts(x) & Guilin(x))", "all x.(District(x) -> (Xiufeng(x) | Xiangshan(x) | Diecai(x) | Qixing(x)))", "(DistrictsInGuilin(Xiufeng,Guilin) & DistrictsInGuilin(Xiangshan,Guilin))", "all x.((District(x) & Guilin(x)) -> (Xiufeng(x) | Xiangshan(x) | Diecai(x) | Qixing(x)))", "(DistrictsInGuilin(x) & DistrictsInGuilin(x))", "((District(x) & Guilin(x)) | (District(x) & Guilin(x))))", "(City(x) & District(x,y) & City(y) & Guilin(x))", "all x.(District(x) -> (Xiufeng(x) | Xiangshan(x) | Diecai(x) | Qixing(x)))", "all x.((District(x) & Guilin(x)) -> (Xiufeng(x) | Xiangshan(x) | Diecai(x) | Qixing(x)))", "(City(x) & District(x,y) & Guilin(y))", "(Districts(x) & Guilin(x))"]}
{"id": "folio_train_520", "nl": "Yangshuo is not a district in Guilin. ", "fol": "-IsDistrictIn(Yangshuo,Guilin)", "prediction": ["Yangshuo is not a district in Guilin.", "all x.(Yangshuo(x) -> -GuilinDistrict(x))", "-(District(Yangshuo) & District(Yangshuo))", "(-GuilinDistrict(Yangshuo))", "(-DistrictInGuilin(Yangshuo))", "Yangshuo is not a district in Guilin.", "Yangshuo is not a DistrictInGuilin(y)", "Yangshuo -GuilinDistrict(Yangshuo)", "-(District(Yangshuo) & District(Yangshuo))", "Yangshuo -DistrictInGuilin(y)", "-(DistrictInGuilin(Yangshuo))", "(-GuilinDistrict(Yangshuo)", "(-DistrictInGuilin(Yangshuo))", "Yangshuo (-GuilinDestination(Yangshuo))", "Yangshuo is not a district in Guilin.", "Yangshuo is not a DistrictInGuilin(y)"]}
{"id": "folio_train_521", "nl": "Xiangshan and Diecai are districts in the same city.", "fol": "exists c.(IsCity(c) & IsDistrictIn(Xiangshan,c) & IsDistrictIn(Diecai,c))", "prediction": ["all x.((District(x) & Xiangshan(x) & District(x)) -> InSameCity(x))", "all x y.((District(x) & City(y)) -> (Xiangshan(x) | Diecai(x)))", "(District(x,y) & City(y))", "(District(x) & District(x) & City(x))", "all x.((District(x) & City(x) & Xiangshan(x) & City(x)) -> District(x,Diecai))", "all x.(District(x,y) -> (Xiangshan(y) | Diecai(y)))", "((District(x) & Xiangshan(x) & District(x)) & City(x) & City(x))", "(SameCity(x) & District(x,y))", "(District(x,y) & City(y) & LocatedIn(x,y))", "(SameCity(x,y) & District(y,x))", "-(District(x,y) & City(y))", "(Districts(x,y) & City(y))", "(DistrictsInSameCity(x,x) & DistrictsInSameCity(x,x))", "all x y.((District(x) & City(y)) -> (Xiangshan(x) | Diecai(x)))", "-((District(x) & District(x) & City(x)))", "-(District(x,y) & City(y))"]}
{"id": "folio_train_522", "nl": "Xiufeng is in Guilin.", "fol": "IsDistrictIn(Xiufeng,Guilin)", "prediction": ["Xiufeng is in Guilin.", "(InGuilin(Xiufeng) -> InGuilin(X))", "all x.(Xiufeng(x) -> InGuilin(x))", "Xiufeng is in Guilin.", "(InGuilin(x) & Xiufeng(x))", "(InGuilin(Xiufeng) & InGuilin(X))", "all x.(Xiufeng(x) -> InGuilin(x))", "LocatedInGuilin(x)", "Xiufeng is in Guilin.", "(InGuilin)", "Xiufeng is in Guilin.", "Xiufeng is in Guilin.", "Xiufeng (InGuilin)", "(InGuilin)", "Xiufeng is in Guilin.", "Xiufeng (inGuilin)"]}
{"id": "folio_train_523", "nl": "Kowloon District is in Hong Kong.", "fol": "IsDistrictIn(Kowloon,Hong_kong)", "prediction": ["all x.(KowloonDistrict(x) -> HongKong(x))", "Kowloon District is in Hong Kong.", "(HongKongDistrict(Kowloon) & HongKong(Kowloon))", "HongKong(KowloonDistrict)", "(HongKong(KowloonDistrict) & HongKong(KowloonDistrict))", "(HongKong District(Kowloon) & HongKong(HongKong))", "KowloonDistrict(x) -> HongKong(x))", "Kowloon District is in Hong Kong.", "all x.(KowloonDistrict(x) -> HongKong(x))", "KowloonDisturbance(x) -> HongKong(x))", "(HongKong) & KowloonDistrict(k) & HongKong(k))", "(HotloonDistrict(k) & HongKong(k))", "all x.(KowloonDisturbance(x) -> HongKong(x))", "Hong Kong.", "All x.(KowloonDistrict(x) -> HongKong(x))", "Kowloon District (HongKong)"]}
{"id": "folio_train_524", "nl": "All people who grow their own fresh vegetables in their home garden also have ample space.", "fol": "all x.(GrowsOwnVegetables(x) -> HasAmpleSpace(x))", "prediction": ["all x.((Person(x) & GrowsOwnFreshVegetablesInHomeGarden(x)) -> AmpleSpace(x))", "all x y.((Person(x) & GrowsOwnFreshVegetablesInHomeGarden(x) & GrowsInHomeGarden(x,y)) -> AmpleSpace(x))", "all x.((Person(x) & GrowsOwnFreshVegetablesInHomeGarden(x)) -> AmpleSpace(x))", "all x.((Person(x) & GrowsFreshVegetablesInHomeGarden(x)) -> AmpleSpace(x))", "all x.(GrowsOwnFreshVegetablesInHomeGarden(x) -> AmpleSpace(x))", "all x y.((Person(x) & GrowsFreshVegetablesInHomeGarden(x) & GrowsInHomeGarden(x,y)) -> AmpleSpace(x))", "all x y.((Person(x) & GrowsOwnFreshVegetables(x,y) & HomeGarden(y)) -> AmpleSpace(x))", "all x.((Person(x) & GrowsOwnFreshVegetablesInHomeGarden(x)) -> AmpleSpace(x))", "all x.((Person(x) & GrowsOwnFreshVegetables(x) & HomeGarden(x)) -> AmpleSpace(x))", "all x.((People(x) & GrowsOwnFreshVegetablesInHomeGarden(x)) -> AmpleSpace(x))", "all x.((Person(x) & GrowsFreshVegetablesInHomeGarden(x)) -> AmpleSpace(x))", "all x.(GrowsOwnFreshVegetablesInHomeGarden(x) -> AmpleSpace(x))", "all x.(GrowsFreshVegetablesInHomeGarden(x) -> AmpleSpace(x))", "all x y.((Person(x) & GrowsOwnFreshVegetablesInHomeGarden(x,y)) -> AmpleSpace(x))", "all x y.((Person(x) & GrowsOwnFreshVegetables(x) & HomeGarden(y)) -> AmpleSpace(x))", "all x.((Person(x) & GrowsOwnFreshVegetablesInHomeGarden(x)) -> AmpleSpace(x))"]}
{"id": "folio_train_525", "nl": "If people are young working professionals who live in large cities, then they do not have ample space.", "fol": "all x.(YoungWorkingProfessional(x) -> -HasAmpleSpace(x))", "prediction": ["all x.((YoungWorkingProfessional(x) & LivesInLargeCities(x)) -> -AmpleSpace(x))", "all x.((WorkingProfessional(x) & Young(x) & LivesInLargeCities(x)) -> -AmpleSpace(x))", "all x y.((YoungWorkingProfessional(x) & LargeCity(y) & LivesIn(x,y)) -> -AmpleSpace(x))", "all x.((People(x) & YoungWorkingProfessional(x) & LivesInLargeCities(x)) -> -AmpleSpace(x))", "all x.((YoungWorkingProfessional(x) & LivesInLargeCities(x)) -> -AmpleSpace(x))", "all x y.((People(x) & YoungWorkingProfessional(x) & LargeCity(y) & LivesIn(x,y)) -> -AmpleSpace(x))", "exists x.(YoungWorkingProfessional(x) & LivesInLargeCities(x) & -AmpleSpace(x))", "all x y.((YoungWorkingProfessional(x) & LargeCity(y) & LivesIn(x,y)) -> -AmpleSpace(x))", "all x.((YoungWorkingProfessional(x) & LivesInLargeCities(x)) -> -AmpleSpace(x))", "all x.((JoyWorkingProfessional(x) & LivesInLargeCities(x)) -> -AmpleSpace(x))", "all x.((WorkingProfessional(x) & Young(x) & LivesInLargeCities(x)) -> -AmpleSpace(x))", "exists x.(YoungWorkingProfessional(x) & LivesInLargeCities(x) & -AmpleSpace(x))", "all x.((YoungWorkingProfessional(x) & LivesInLargeCities(x)) -> -AmpleSpace(x))", "all x y.((YoungWorkingProfessional(x) & LargeCity(y) & LivesIn(x,y)) -> -AmpleSpace(x))", "all x.((YoungWorkingProfessional(x) & LivesInLargeCities(x)) -> -AmpleSpace(x))", "all x.((YoungWorkingProfessional(x) & LivesInLargeCities(x)) -> -AmpleSpace(x))"]}
{"id": "folio_train_526", "nl": "If people order takeout from delivery services often, then they grow their own fresh vegetables in their home garden.", "fol": "all x.(OrdersTakeoutOften(x) -> GrowsOwnVegetables(x))", "prediction": ["all x.((Person(x) & OrdersTakeoutFromDeliveryServices(x) & Often(x)) -> GrowsFreshVegetablesInHomeGarden(x))", "all x y.((Person(x) & OrdersTakeoutFromDeliveryServices(x) & Often(x)) -> GrowsFreshVegetablesInHomeGarden(x))", "all x.((Person(x) & OrdersTakeoutFromDeliveryServicesOfFrequently(x)) -> GrowsFreshVegetablesInHomeGarden(x))", "all x y z.((Person(x) & TakeoutService(y) & DeliveryService(z) & OrdersOf(x,y,z)) -> GrowsFreshVegetablesInHomeGarden(x))", "all x y.((Person(x) & OrdersTakeoutFromDeliveryServices(x) & OrdersOften(x)) -> GrowsFreshVegetablesInHomeGarden(x))", "all x.((People(x) & OrdersTakeoutFromDeliveryServicesOften(x)) -> GrowsFreshVegetablesInHomeGarden(x))", "all x y.((Person(x) & OrdersTakeout(x,y) & DeliveryService(y)) -> GrowsFreshVegetablesInHomeGarden(x))", "all x.(OrdersTakeoutFromDeliveryServicesOften(x) -> GrowsFreshVegetablesInHomeGarden(x))", "(all x.((Person(x) & OrdersTakeoutFromDeliveryServices(x)) -> GrowsFreshVegetablesInHomeGarden(x)))", "all x.((Person(x) & OrdersTakeoutFromDeliveryServices(x) & Often(x)) -> GrowsOwnFreshVegetablesInHomeGarden(x))", "all x y z.((Person(x) & TakeoutService(y) & DeliveryService(z) & OrdersOf(x,y,z)) -> GrowsOwnFreshVegetablesInHomeGarden(x))", "all x y.((Person(x) & OrdersTakeoutFromDeliveryServicesOften(x) & Often(x)) -> GrowsFreshVegetablesInHomeGarden(x,y))", "all x y.((People(x) & OrdersTakeoutFromDeliveryServices(x) & OrdersOften(x)) -> GrowsOwnFreshVegetablesInHomeGarden(y))", "all x.((PeopleOrdersTakeoutFromDeliveryServices(x) & Often(x)) -> GrowsOwnFreshVegetablesInHomeGarden(x))", "all x.(OrdersTakeoutFromDeliveryServicesOften(x) -> GrowsOwnFreshVegetablesInHomeGarden(x))", "all x.((Person(x) & OrdersTakeoutFromDeliveryServicesOften(x)) -> GrowsFreshVegetablesInHomeGarden(x))"]}
{"id": "folio_train_527", "nl": "If people enjoy going out often to restaurants with friends, then they order takeout from delivery services often.", "fol": "all x.(EnjoysGoingOutToRestaurants(x) -> OrdersTakeoutOften(x))", "prediction": ["all x.((People(x) & EnjoysGoingOutOfOften(x) & HasFriends(x)) -> OrdersTakeoutFromDeliveryServicesOfOften(x))", "all x y.((Person(x) & EnjoysGoingOutOfOften(x,y) & Restaurant(y) & Friends(y)) -> OrdersTakeoutFromDeliveryServicesOfOften(x))", "all x.((People(x) & EnjoysGoingOutOfOftenToRestaurantsWithFriends(x)) -> OrdersTakeoutFromDeliveryServicesOfOften(x))", "all x y.((People(x) & EnjoysGoingOutOfOften(x,y) & Restaurant(y)) -> OrdersTakeoutFromDeliveryServicesOfOften(x))", "(EnjoysGoingOutWithFriends(Person,Freshly) & OrdersTakeoutFromDeliveryServices(Person,Freshly))", "(EnjoysGoingOutOfOftenToRestaurantsWithFriends(Person,Person) & OrdersTakeoutFromDeliveryServicesOfOften(Person,Person))", "all x.((Person(x) & EnjoysGoingOutOfOften(x) & HasFriends(x)) -> OrdersTakeoutFromDeliveryServicesOfFrequently(x))", "all x y z.((Person(x) & Restaurant(y) & DeliveryService(z) & EnjoysGoingOut(x,y,z)) -> OrdersTakeout(x,y,z))", "all x y.((Person(x) & EnjoysGoingOutWithFriends(x) & Restaurant(y) & Often(x)) -> OrdersTakeoutFromDeliveryServices(x))", "all x.(EnjoysGoingOutWithFriends(x) -> OrdersTakeoutFromDeliveryServicesOften(x))", "all x y.((People(x) & EnjoysGoingOut(x,y) & Restaurant(y) & Friends(y)) -> OrdersTakeoutFromDeliveryServices(x,y))", "all x.((Person(x) & EnjoysGoingOutWithFriends(x)) -> OrdersTakeoutFromDeliveryServicesOften(x))", "all x.((People(x) & EnjoysGoingOutWithFriends(x)) -> OrdersTakeoutFromDeliveryServicesOften(x))", "all x.((PeopleEnjoysGoingOut(x) & OftenToRestaurantsWithFriends(x)) -> OrdersTakeoutFromDeliveryServices(x))", "all x y.((Person(x) & EnjoysGoingOutOfOftenToRestaurantsWithFriends(x) & DeliveryServices(y)) -> OrdersTakeoutOfOften(x,y))", "all x.(EnjoysGoingOutWithFriends(x) -> OrdersTakeoutFromDeliveryServicesOften(x))"]}
{"id": "folio_train_528", "nl": "If people regularly tout the benefits of homegrown and homecooked meals over fast food, then they enjoy going out often to restaurants with friends. ", "fol": "all x.(ToutsHomegrownBenefits(x) -> EnjoysGoingOutToRestaurants(x))", "prediction": ["all x y.((Person(x) & HomegrownMeals(x) & HomecookedMeals(x) & FastFood(y) & RegularlyPurchaseBenefits(x,y)) -> EnjoysGoingOutToRestaurantsWithFriends(x))", "all x.((Person(x) & RegularlyPurportsHomegrownAndHomecookedMeals(x) & OverFastFood(x)) -> EnjoysGoingOutToRestaurantsWithFriends(x))", "all x y.((People(x) & HomegrownMeals(x) & HomecookedMeals(x) & FastFood(y) & RegularlyPurchaseBenefits(x,y)) -> EnjoysGoingOutToRestaurantsWithFriends(x))", "all x.((People(x) & RegularlyPurportsHomegrownAndHomecookedMeals(x) & OverFastFood(x)) -> EnjoysGoingOutToRestaurantsWithFriends(x))", "all x y z.((Person(x) & HomegrownMeals(y) & HomecookedMeals(z) & FastFood(z) & RegularlyPurchaseBenefits(x,y,z)) -> EnjoysGoingOutToRestaurantsWithFriends(x))", "all x y.((Person(x) & HomegrownMeals(x) & HomecookedMeals(x) & FastFood(y) & RegularlyPlaudsBenefits(x,y)) -> EnjoysGoingOutToRestaurantsWithFriends(x))", "all x.((Person(x) & RegularlyPurportsHomegrownAndHomecookedMeals(x) & FastFood(x)) -> EnjoysGoingOutToRestaurantsWithFriends(x))", "all x y.((Person(x) & HomegrownAndHomecookedMeals(x) & FastFood(y) & RegularlyPurchaseBenefits(x,y)) -> EnjoysGoingOutToRestaurantsWithFriends(x))", "all x.(RoyalPurchase(x) -> (HomegrownMeals(x) & HomecookedMeals(x) & FastFood(x) & EnjoysGoingOut(x)))", "all x y z.((Person(x) & HomegrownMeals(y) & HomecookedMeals(z) & FastFood(y) & RegularlyPlaudsBenefits(x,y,z)) -> EnjoysGoingOutToRestaurantsWithFriends(x))", "all x.((People(x) & RegularlyPurchasesHomegrownMeals(x) & HomecookedMeals(x) & OverFastFood(x)) -> EnjoysGoingOutToRestaurantsWithFriends(x))", "(all x.((Person(x) & PledgesHomegrownAndHomecookedMeals(x)) -> EnjoysGoingOutWithFriends(x)))", "all x y z.((People(x) & HomegrownMeals(y) & HomecookedMeals(z) & FastFood(z) & PlaudsBenefits(x,y,z)) -> EnjoysGoingOutToRestaurantsWithFriends(x))", "all x.((People(x) & RegularlyPraisesHomegrownAndHomecookedMeals(x) & OverFastFood(x)) -> EnjoysGoingOutToRestaurantsWithFriends(x))", "all x.((Person(x) & RegularlyPlaudsHomegrownAndHomecookedMeals(x) & FastFood(x)) -> EnjoysGoingOutToRestaurantsWithFriends(x))", "all x y.((People(x) & HomegrownMeals(x) & HomecookedMeals(x) & FastFood(y) & RegularlyPraisesBenefits(x,y)) -> EnjoysGoingOutWithFriends(x))"]}
{"id": "folio_train_529", "nl": "Michael grows his own fresh vegetables in his home garden or regularly touts the benefits of homegrown and homecooked meals over fast food.", "fol": "(GrowsOwnVegetables(Michael) | ToutsHomegrownBenefits(Michael))", "prediction": ["all x y.((Michael(x) & HomegrownAndHomecookedMeals(y)) -> (GrowsFreshVegetablesInHomeGarden(x,y) | -PurchasesBenefits(x,y)))", "all x.((Michael(x) & (GrowsOwnFreshVegetables(x) | PledgesHomegrownAndHomecookedMeals(x))) -> (PraisesBenefits(x) & OverFastFood(x)))", "(GrowsOwnFreshVegetablesInHomeGarden(Michael) | (PraisesHomegrownAndHomecookedMeals(Michael) & FastFood(Michael))))", "all x y.((Michael(x) & FreshVegetables(y)) -> (GrowsInHomeGarden(x,y) | PledgesBenefits(x,y)))", "all x y z.((Michael(x) & FreshVegetables(y) & HomeGarden(z)) -> (GrowsIn(x,y,z) | PledgesBenefits(x,y,z)))", "all x.((Michael(x) & GrowsOwnFreshVegetables(x)) -> (PursuesHomegrownAndHomecookedMeals(x) & OverFastFood(x)))", "(all x.((Michael(x) & FreshVegetables(x)) -> (GrowsInHomeGarden(x) | PledgesBenefitsOfHomegrownAndHomecookedMeals(x))))", "(GrowsFreshVegetablesInHomeGarden(Michael) | (PraisesHomegrownAndHomecookedMeals(Michael) & FastFood(Michael))))", "all x y.((Michael(x) & HomeGarden(y)) -> (GrowsFreshVegetables(x,y) | (PraisesHomegrownMeals(x,y) & HomecookedMeals(x,y)))))", "all x.((Michael(x) & (GrowsFreshVegetablesInHomeGarden(x) | PledgesHomegrownAndHomecookedMeals(x))) -> GrowsFreshVegetablesInHomeGarden(x))", "(GrowsOwnFreshVegetablesInHomeGarden(Michael) | PledgesBenefitsOfHomegrownAndHomecookedMeals(Michael)))", "all x.(Michael(x) -> (GrowsFreshVegetablesInHomeGarden(x) | (PraisesHomegrownMeals(x) & PriesHomecookedMeals(x))))", "all x.((Michael(x) & GrowsOwnFreshVegetablesInHomeGarden(x)) | (PursuesBenefitsHomegrownAndHomecookedMeals(x) & FastFood(x))))", "all x y z.((Michael(x) & FreshVegetables(y) & HomeGarden(z)) -> (GrowsInHomeGarden(x,y,z) | PledgesBenefits(x,y,z)))", "(all x.((Michael(x) & FreshVegetables(x)) -> (GrowsInHomeGarden(x) | PledgesBenefitsOfHomegrownAndHomecookedMeals(x))))", "all x y.((Michael(x) & FreshVegetables(y)) -> (GrowsInHomeGarden(x,y) | RanksBenefitsOfHomegrownAndHomecookedMeals(x,y)))"]}
{"id": "folio_train_530", "nl": "Michael enjoys going out often to restaurants with friends.", "fol": "EnjoysGoingOutToRestaurants(Michael)", "prediction": ["all x.((Michael(x) & GoesOutWithFriends(x)) -> Enjoys(x))", "all x y.((Michael(x) & Restaurant(y)) -> EnjoysGoingOut(x,y))", "(EnjoysGoingOut(Michael) & HasFriends(Michael))", "-(EnjoysGoingOut(Michael) & HasFriends(Michael))", "all x.((Michael(x) & Restaurant(y)) -> EnjoysGoingOut(x,y))", "Michael enjoys going out often to restaurants with friends.", "-EnjoysGoingOutWithFriends(Michael)", "Michael enjoysGoingOutWithFriends(Michael)", "(EnjoysGoingOutWithFriends(Michael))", "all x.((Michael(x) & GoesOutToRestaurants(x)) -> Enjoys(x))", "all x y.((Michael(x) & Restaurant(y)) -> EnjoysGoingOutWith(x,y))", "all x.(Michael(x) -> EnjoysGoingOutWithFriends(x))", "(EnjoysGoingOut(Michael) & Friends(Michael))", "(EnjoysGoingOutWithFriends(Michael) -> Enjoys(Michael,OfRestaurants))", "all x y.((Michael(x) & Restaurant(y)) -> EnjoysGoingOut(x,y))", "all x.((Michael(x) & EnjoysGoingOut(x)) -> HasFriends(x))"]}
{"id": "folio_train_531", "nl": "Michael is a young working professional who lives in large cities.", "fol": "(YoungWorkingProfessional(Michael) & Young(Michael) & LargeCity(Michael))", "prediction": ["all x.((Jimmy(x) & WorkingProfessional(x) & LivesInLargeCities(x)) -> Young(x))", "(WorkingProfessional(Michael) & LivesInLargeCities(Michael))", "(YoungWorkingProfessional(Michael) & LivesInLargeCities(Michael))", "Michael is a young workingProfessional(Michael) & LivesInLargeCities(Michael)", "Michael is a young workingprofessional who lives in largeCities.", "all x.((Jimmy(x) & YoungWorkingProfessional(x) & LivesInLargeCities(x)) -> LivesIn(x,y))", "all x.(Michael(x) -> (YoungWorkingProfessional(x) & LivesInLargeCities(x)))", "all x.((Jimmy(x) & WorkingProfessional(x) & LivesInLargeCities(x)) -> Young(x))", "(WorkingProfessional(Michael) & LivesInLargeCities(Michael))", "all x y.((Jimmy(x) & WorkingProfessional(y) & LargeCity(y)) -> LivesIn(x,y))", "(YoungWorkingProfessional(Michael) & LivesInLargeCities(Michael))", "(WorkingProfessional(Michael) & Young(Michael) & LivesInLargeCities(Michael))", "Michael is a young workingProfessional(Michael) & LivesInLargeCities(Michael)", "Michael is a young workingprofessional who lives in LargeCities.", "all x.((Jimmy(x) & WorkingProfessional(x) & LivesInLargeCities(x)) -> Young(x))", "Michael is a young workingprofessional who lives in largeCities."]}
{"id": "folio_train_532", "nl": "Michael grows his own fresh vegetables in their home garden or is a young working professional who lives in large cities.", "fol": "(GrowsOwnVegetables(Michael) | (YoungWorkingProfessional(Michael) & LargeCity(Michael)))", "prediction": ["all x.((Michael(x) & (GrowsOwnFreshVegetables(x) | YoungWorkingProfessional(x) & LivesInLargeCities(x))) -> GrowsInHomeGarden(x))", "all x.((Michael(x) & (GrowsFreshVegetablesInHomeGarden(x) | YoungWorkingProfessional(x) & LivesInLargeCities(x))) -> GrowsIn(x,y))", "(exists x.(Michael(x) & (GrowsOwnFreshVegetablesInHomeGarden(x) | YoungWorkingProfessional(x) & LivesInLargeCities(x))))", "all x y.((Michael(x) & (HomeGarden(y) | LargeCity(y))) -> (GrowsFreshVegetables(x,y) | YoungWorkingProfessional(x,y)))", "(all x.((Michael(x) & GrowsOwnFreshVegetables(x)) -> (WorkingProfessional(x) & LivesInLargeCities(x))))", "all x.((Michael(x) & (GrowsOwnFreshVegetablesInHomeGarden(x) | YoungWorkingProfessional(x) & LivesInLargeCities(x))) -> GrowsOwnFreshVegetablesInHomeGarden(x))", "(all x.((Michael(x) & GrowsFreshVegetables(x)) -> (WorkingProfessional(x) & LivesInLargeCities(x))))", "all x.(Michael(x) -> (GrowsOwnFreshVegetablesInHomeGarden(x) | YoungWorkingProfessional(x) & LivesInLargeCities(x)))", "((Jimmy(Jimmy) | YoungWorkingProfessional(Jimmy)) & GrowsOwnFreshVegetablesInHomeGarden(Jimmy)) | LivesInLargeCities(Jimmy)))", "(YoungWorkingProfessional(Michael) & (GrowsOwnFreshVegetablesInHomeGarden(Michael) | LivesInLargeCities(Michael)))", "all x y.((Michael(x) & (HomeGarden(y) | LargeCity(y))) -> (GrowsOwnFreshVegetables(x,y) | YoungWorkingProfessional(x)))", "(all x.(Michael(x) -> GrowsOwnFreshVegetablesInHomeGarden(x)) | (JungleWorkingProfessional(x) & LivesInLargeCities(x))))", "exists x.(Michael(x) & ((GrowsOwnFreshVegetables(x) & HomeGarden(x)) | (YoungWorkingProfessional(x) & LivesInLargeCities(x)))))", "exists x.(Jimmy(x) & ((GrowsFreshVegetables(x) & HomeGarden(x)) | (YoungWorkingProfessional(x) & LargeCityLiving(x)))))", "all x.(Michael(x) -> (GrowsFreshVegetablesInHomeGarden(x) | YoungWorkingProfessional(x) & LivesInLargeCities(x)))", "all x.((Michael(x) & GrowsOwnFreshVegetables(x)) | (YoungWorkingProfessional(x) & LivesInLargeCities(x))))"]}
{"id": "folio_train_533", "nl": "All devices belonging to the company are connected to Google Home. ", "fol": "all x.(BelongsToCompany(x) -> ConnectedToGoogleHome(x))", "prediction": ["all x.((Device(x) & Company(x)) -> ConnectedToGoogleHome(x))", "all x y.((Device(x) & Company(y)) -> ConnectedToGoogleHome(x,y))", "all x.((Device(x) & BelongsToCompany(x)) -> ConnectedToGoogleHome(x))", "all x.((Device(x) & Company(x)) -> ConnectedToGoogleHome(x))", "all x.(Device(x) -> ConnectedToGoogleHome(x))", "(all x.(ApplianceToGoogleHome(x) -> ConnectedToGoogleHome(x)))", "all x y.((Device(x) & Company(y)) -> ConnectedToGoogleHome(x,y))", "all x y.((Device(x) & Company(y) & ConnectedToGoogleHome(x,y)) -> ConnectedToGoogleHome(x,y))", "all x.((Device(x) & Company(x)) -> ConnectedToGoogleHome(x))", "all x.((Device(x) & GoogleHome(x)) -> ConnectedTo(x,y))", "all x.(Device(x) -> ConnectedToGoogleHome(x))", "all x y.((Device(x) & Company(y)) -> ConnectedToGoogleHome(x,y))", "all x y.((Device(x) & Device(y) & Company(x)) -> ConnectedToGoogleHome(x,y))", "all x.((Device(x) & BelongsToCompany(x)) -> ConnectedToGoogleHome(x))", "(all x.(Device(x) -> GoogleHome(x)))", "all x.(Device(x) -> ConnectedToGoogleHome(x))"]}
{"id": "folio_train_534", "nl": "All devices belonging to employees are connected to the company's wifi. ", "fol": "all x.(BelongsToEmployee(x) -> ConnectedToWifi(x))", "prediction": ["all x.((Device(x) & Employee(x)) -> ConnectedToWiFi(x))", "all x y.((Device(x) & Employee(y)) -> ConnectedToWiFi(x,y))", "all x.((Device(x) & Employee(x)) -> ConnectedToWifi(x))", "all x y z.((Device(x) & Employee(y) & Company(z)) -> ConnectedToWifi(x,y,z))", "all x.(Device(x) -> Employee(x))", "all x y.((Device(x) & Employee(y)) -> ConnectedToWifi(x,y))", "all x.(EmployeeDevice(x) -> ConnectedToWiFi(x))", "(all x.(EmployeeDevice(x) -> ConnectedToWifi(x)))", "all x y z.((Device(x) & Employee(y) & Company(z) & ConnectedToWifi(x,y,z)) -> ConnectedTo(x,y,z))", "all x.((Device(x) & Employee(x)) -> ConnectedToWiFi(x,Company,Employee))", "all x.(Device(x) -> EmployeeConnectedToWiFi(x))", "all x y.((Device(x) & Employee(y)) -> ConnectedToWiFi(x,y))", "all x y.((Device(x) & Employee(y) & ConnectedToWifi(x,y)) -> ConnectedToWifi(x,y))", "all x.(EmployeeDevice(x) -> ConnectedToWifi(x))", "all x y.((Device(x) & Employee(y)) -> ConnectedToWifi(x,y))", "all x.((Device(x) & Employee(x)) -> ConnectedToWifi(x))"]}
{"id": "folio_train_535", "nl": "All devices connected to Google Home are controlled by the managers. ", "fol": "all x.(ConnectedToGoogleHome(x) -> ControlledByManagers(x))", "prediction": ["all x.((Device(x) & ConnectedToGoogleHome(x)) -> ControlledByManager(x))", "all x y.((Device(x) & GoogleHome(y)) -> ControlledByManager(x,y))", "all x.((Device(x) & ConnectedToGoogleHome(x)) -> ControlledByManagers(x))", "(all x.(GoogleHome(x) -> ControlledByManagers(x))", "all x y z.((Device(x) & GoogleHome(y) & Manager(z)) -> ControlledBy(x,y,z))", "all x y.((Device(x) & GoogleHome(y)) -> ControlledByManager(x,y))", "all x.((Device(x) & ConnectedToGoogleHome(x)) -> ControlledByManager(x))", "all x.(GoogleHome(x) -> ControlledByManagers(x))", "all x y.((Device(x) & ConnectedToGoogleHome(x)) -> ControlledByManager(y))", "all x y.((Device(x) & GoogleHome(y)) -> ManagedByManagers(x,y))", "(all x.(GoogleHome(x) -> ControlledByManagers(x))", "all x y.((Device(x) & GoogleHome(y) & ConnectedTo(x,y)) -> ControlledByManager(x,y))", "all x.((Device(x) & ConnectedToGoogleHome(x)) -> ManagedByManagers(x))", "all x.(GoogleHomeDevice(x) -> ControlledByManagers(x))", "all x.(GoogleHome(x) -> ControlledByManager(x))", "all x.((Device(x) & ConnectedToGoogleHome(x)) -> ControlledByManager(x))"]}
{"id": "folio_train_536", "nl": "All devices that connect to the company's wifi are easy to operate. ", "fol": "all x.(ConnectedToWifi(x) -> IsEasyToOperate(x))", "prediction": ["all x.((Device(x) & ConnectsToWiFi(x)) -> EasyToOperate(x))", "all x y.((Device(x) & ConnectsToWiFi(x,y)) -> EasyToOperate(x))", "all x.((Device(x) & ConnectsToWifi(x)) -> EasyToOperate(x))", "all x y.((Device(x) & ConnectsToWifi(x,y)) -> EasyToOperate(x))", "(all x.(ConnectsToWifi(x) -> EasyToOperate(x))", "all x.((Device(x) & ConnectsToWiFi(x)) -> EasyToOperate(x))", "all x.(ConnectsToWiFi(x) -> EasyToOperate(x))", "all x y.((Device(x) & WiFi(y) & ConnectsTo(x,y)) -> EasyToOperate(x))", "all x y.((Device(x) & ConnectsToWiFi(x,y)) -> EasyToOperate(x))", "all x.((Device(x) & ConnectsToWifi(x)) -> EasyToOperate(x))", "all x.((Device(x) & ConnectsToCompanyWifi(x)) -> EasyToOperate(x))", "all x y.((Device(x) & ConnectsToWifi(x,y)) -> EasyToOperate(x))", "all x.((Device(x) & ConnectsToWiFi(x)) -> EasyToOperate(x))", "all x.(ConnectsToWifi(x) -> EasyToOperate(x))", "all x.((Device(x) & ConnectToWiFi(x)) -> EasyToOperate(x))", "all x.((Device(x) & ConnectsToFirewall(x)) -> EasyToOperate(x))"]}
{"id": "folio_train_537", "nl": "IPod1 belongs to employees. ", "fol": "BelongsToEmployee(IPod1)", "prediction": ["all x.(IPod1(x) -> Employee(x))", "IPod1 belongsToEmployees(iPod1))", "all x.(Pod(x) -> Employee(x))", "all x.(IPod1(x) -> Employee(x))", "IPod1 belongsToEmployees(iPod))", "(BelongsTo(iPod1) & Employees(iPod2))", "all x.(IPod(x) -> Employee(x))", "IPod1 belongsToEmployees(iPod1))", "(BelongsToEmployees(IPod1) & Employees(IPod2))", "all x.(Pod1(x) -> Employee(x))", "IPod1 belongsToEmployees(iPod2)", "all x.(IPod1(x) -> Employee(x))", "exists x.(Pod(x) & Employee(x))", "IPod1 belongs to employees.", "All x.(IPod1(x) -> Employee(x))", "IPod1 belongsToEmployees(iPod2)"]}
{"id": "folio_train_538", "nl": "iPod1 is easy to operate.", "fol": "IsEasyToOperate(IPod1)", "prediction": ["all x.(IPod(x) -> EasyToOperate(x))", "(EasyToOperate(iPod1))", "all x.( iPod1(x) -> EasyToOperate(x))", "the iPod1 is easytooperate.", "is EasyToOperate(iPod1)", "(EasyToOperate(iPod1))", "all x.(Ipod1(x) -> EasyToOperate(x))", "all x.(IPod(x) -> EasyToOperate(x))", "all x.(( iPod1(x) & EasyToOperate(x)) -> EasyToOperate(x))", "(EasyToOperate(iPod1))", "All x.( iPod(x) -> EasyToOperate(x))", "(EasyToOperate(iPod1 & iPod2))", "all x.( iPod1(x) -> EasyToOperate(x))", "All x.( iPod1(x) -> EasyToOperate(x))", "All x.(Ipod1(x) -> EasyToOperate(x))", "all x.(IPod(x) -> EasyToOperate(x))"]}
{"id": "folio_train_539", "nl": "iPod1 is controlled by managers.", "fol": "ControlledByManagers(IPod1)", "prediction": ["all x.(IPod(x) -> ControlledByManagers(x))", "all x.((IPod(x) & Manager(x)) -> ControlledBy(x,iPod1))", "(ControlledByManagers(iPod1))", "all x.(IPod(x) -> ControlledByManagers(x))", "all x y.(( iPod1(x) & Manager(y)) -> ControlledBy(x,y))", "all x y.(( iPod(x) & Manager(y)) -> ControlledBy(x,y))", "all x.((iPod(x) & Manager(x)) -> Controls(x,iPod1))", "all x.(Ipod(x) -> ControlledByManagers(x))", "(ControlledByManagers(iPod1))", "all x.( iPod1(x) -> ManagedBy(x))", "all x.(IPod(x) -> ControledByManagers(x))", "all x y.(( iPod1(x) & Manager(y)) -> ControlledBy(x,y))", "all x.( iPod1 -> ControlledByManagers(x))", "(ControlledByManagers)", "(ControlledByManagers)", "(ControlledByManagers(iPod1))"]}
{"id": "folio_train_540", "nl": "iPod1 is connected to Google Home.", "fol": "ConnectedToGoogleHome(IPod1)", "prediction": ["all x.(IPod(x) -> ConnectedToGoogleHome(x))", "all x.(( iPod1(x) & ConnectedToGoogleHome(x)) -> ConnectedToGoogleHome(x))", "(ConnectedToGoogleHome(iPodPod1))", "(Google Home(iPod) & ConnectedTo(iPod1))", "all x.(IPod(x) -> ConnectedToGoogleHome(x))", "all x.((iPod(x) & GoogleHome(x)) -> Connected(x,iPod1))", "all x y.(( iPod1(x) & GoogleHome(y)) -> Connected(x,y))", "all x y.(( iPod(x) & GoogleHome(y)) -> Connected(x,y))", "(GoogleHome(iPod) & Connected(iPod1))", "(ConnectedToGoogleHome(iPodPod1))", "(ConnectedToGoogleHome(iPodtouch1) & ConnectedToGoogleHome(iPodtouch1))", "all x.(Ipod(x) -> ConnectedToGoogleHome(x))", "(ConnectedToGoogleHome(iPodPod1))", "all x.( iPod1(x) -> ConnectedToGoogleHome(x))", "All x.( iPod1 -> ConnectedToGoogleHome(x))", "all x.(IPod(x) -> ConnectedToGoogleHome(x))"]}
{"id": "folio_train_541", "nl": "No touring musicians are permanent members of an orchestra.", "fol": "all x.(IsOrchestraMember(x) -> -IsTouringMusician(x))", "prediction": ["-exists x.(TouristMusician(x) & PermanentMemberOfOrchestra(x))", "all x.(TouristMusician(x) -> -PermanentMemberOfOrchestra(x))", "-exists x.(TouristMusician(x) & PermanentMemberOfOrchestra(x))", "-all x.(TouristMusician(x) -> PermanentMemberOfOrchestra(x))", "all x.(TouristMusician(x) -> -PermanentMemberOfOrchestra(x))", "all x y.((TouristMusician(x) & Orchestra(y)) -> -PermanentMember(x,y))", "(exists x.(TouristMusician(x) & PermanentMember(x,orchestra)) & -TouristMusician(x))", "-exists x.(TouristMusician(x) & PermanentMember(x,orchestra))", "all x.(TouristMusician(x) -> -PermanentMember(x))", "-exists x.(TouringMusician(x) & PermanentMemberOfOrchestra(x))", "all x.(TouringMusician(x) -> -PermanentMemberOfOrchestra(x))", "all x y.((TouringMusician(x) & Orchestra(y)) -> -PermanentMember(x,y))", "all x.(TouristMusician(x) -> -PermanentMember(x,Orchestra))", "-exists x.(TouringMusician(x) & PermanentMember(x))", "-exists x.(TouristMusician(x) & PermanentMemberOfOrchestra(x))", "-exists x.(TouristMusician(x) & PermanentMemberOfOrchestra(x))"]}
{"id": "folio_train_542", "nl": "Musicians are either permanent members of an orchestra or have a unique musical voice or style.", "fol": "all x.((IsOrchestraMember(x) & -HasUniqueMusicalVoice(x)) | (-IsOrchestraMember(x) & HasUniqueMusicalVoice(x)))", "prediction": ["all x.(Musician(x) -> (PermanentMemberOfOrchestra(x) | UniqueMusicalVoiceOrStyle(x)))", "all x y.((Musician(x) & Orchestra(y)) -> (PermanentMember(x,y) | UniqueMusicalVoiceOrStyle(x)))", "(PermanentMemberOfOrchestra(musician) | UniqueMusicalVoiceOrStyle(musician)))", "all x.(Musician(x) -> (PermanentMemberOfOrchestra(x) | UniqueMusicalVoiceOrStyle(x)))", "all x y z.((Musician(x) & Orchestra(y) & (PermanentMember(x,y) | UniqueMusicalVoice(x,z) | UniqueStyle(z))) -> Musician(x))", "all x.(Musician(x) -> (PermanentMember(x) | UniqueMusicalVoiceOrStyle(x)))", "all x y.((Musician(x) & Orchestra(y)) -> (PermanentMember(x,y) | UniqueMusicalVoiceOrStyle(x)))", "all x.(Musician(x) -> ((PermanentMember(x) & Orchestra(x)) | UniqueMusicalVoiceOrStyle(x))))", "all x y.((Musician(x) & Orchestra(y)) -> (PermanentMember(x,y) | UniqueMusicalVoice(x) | UniqueStyle(x)))", "all x y.((Musician(x) & Orchestra(y) & (PermanentMember(x,y) | UniqueMusicalVoice(x,y) | UniqueStyle(x,y))) -> Permanent(x,y))", "all x.(Musician(x) -> (PermanentMemberOfOrchestra(x) | UniqueMusicalVoiceOrStyle(x)))", "all x.(Musician(x) -> (PermanentMemberOfOrchestra(x) | UniqueMusicalVoiceOrStyle(x)))", "all x.(Musician(x) -> (PermanentMember(x) | UniqueMusicalVoiceOrStyle(x)))", "all x y.((Musician(x) & Orchestra(y)) -> (PermanentMember(x,y) | UniqueVoiceOrStyle(x,y)))", "all x.(Musician(x) -> (PermanentMemberOfOrchestra(x) | UniqueMusicalVoiceOrStyle(x)))", "all x.(Musician(x) -> (PermanentMemberOfOrchestra(x) | UniqueMusicalVoiceOrStyle(x)))"]}
{"id": "folio_train_543", "nl": "All musicians who have a unique musical voice or style are interesting as individual performers.", "fol": "all x.(HasUniqueMusicalVoice(x) -> IsInterestingPerformer(x))", "prediction": ["all x.((Musician(x) & UniqueMusicalVoiceOrStyle(x)) -> InterestingAsIndividualPerformer(x))", "all x.((Musician(x) & UniqueMusicalVoice(x) & UniqueMusicalStyle(x)) -> InterestingAsIndividualPerformer(x))", "all x y.((Musician(x) & UniqueMusicalVoiceOrStyle(x) & UniqueMusicalVoiceOrStyle(y)) -> InterestingAsIndividualPerformer(x))", "all x.((Musician(x) & (UniqueMusicalVoice(x) | UniqueMusicalStyle(x))) -> InterestingAsIndividualPerformer(x))", "all x.((Musician(x) & UniqueMusicalVoiceOrStyle(x)) -> InterestingAsIndividualPerformer(x))", "all x.((Musician(x) & UniqueMusicalVoice(x) & UniqueMusicalStyle(x)) -> InterestingIndividualPerformer(x))", "all x y.((Musician(x) & UniqueMusicalVoiceOrStyle(x) & UniqueMusicalVoiceOrStyle(x)) -> InterestingAsIndividualPerformer(y))", "all x.((Musician(x) & (UniqueMusicalVoice(x) | UniqueStyle(x))) -> InterestingAsIndividualPerformer(x))", "all x.((Musician(x) & UniqueMusicalVoiceOrStyle(x)) -> InterestingIndividualPerformer(x))", "all x.((Musician(x) & UniqueVoiceOrStyle(x)) -> InterestingAsIndividualPerformer(x))", "all x y.((Musician(x) & UniqueMusicalVoiceOrStyle(x) & UniqueMusicalVoiceOrStyle(y)) -> InterestingAsIndividualPerformer(x))", "all x.((Musician(x) & (UniqueMusicalVoice(x) | UniqueMusicalStyle(x))) -> InterestingAsIndividualPerformer(x))", "all x.((Musician(x) & (UniqueMusicalVoice(x) | UniqueStyle(x))) -> InterestingAsIndividualPerformer(x))", "all x.((Musician(x) & UniqueMusicalVoiceOrStyle(x)) -> InterestingAsIndividualPerformer(x))", "all x.((Musician(x) & UniqueVoiceOrStyle(x)) -> InterestingAsIndividualPerformer(x))", "all x.((Musician(x) & (UniqueMusicalVoice(x) | UniqueMusicalStyle(x))) -> InterestingAsIndividualPerformer(x))"]}
{"id": "folio_train_544", "nl": "All musicians who are interesting as individual performers are capable of attracting large audiences.", "fol": "all x.(IsInterestingPerformer(x) -> CanAttractLargeAudiences(x))", "prediction": ["all x.((Musician(x) & InterestingAsIndividualPerformer(x)) -> CapableOfAttractingLargeAudiences(x))", "all x.((Musician(x) & InterestingAsIndividualPerformer(x)) -> CapableOfAttractingLargeAudiences(x))", "all x.((Musician(x) & InterestingAsIndividualPerformer(x)) -> AttractsLargeAudiences(x))", "all x.(InterestingAsIndividualPerformers(x) -> AttractsLargeAudiences(x))", "all x y.((Musician(x) & InterestingAsIndividualPerformer(x)) -> AttractsLargeAudiences(y))", "all x.(InterestingIndividualPerformer(x) -> AttractsLargeAudiences(x))", "all x y.((Musician(x) & InterestingAsIndividualPerformer(x)) -> CapableOfAttractingLargeAudiences(x))", "all x.((Musician(x) & InterestingAsIndividualPerformer(x)) -> AttractsLargeAudiences(x))", "all x.((Musician(x) & InterestingAsIndividualPerformer(x)) -> CapableOfAttractingLargeAudiences(x))", "all x.(InterestingAsIndividualPerformer(x) -> CapableOfAttractingLargeAudiences(x))", "all x y.((Musician(x) & InterestingAsIndividualPerformer(x) & IndividualPerformer(y)) -> AttractsLargeAudiences(x))", "all x y.((Musician(x) & InterestingAsIndividualPerformer(x) & IndividualPerformer(y)) -> AttractsLargeAudiences(x))", "all x.((Musician(x) & InterestingAsIndividualPerformer(x)) -> CapableOfAttractingLargeAudiences(x))", "all x.((Musician(x) & InterestingAsIndividualPerformer(x)) -> AttractsLargeAudiences(x))", "all x.((Musician(x) & InterestingAsIndividualPerformer(x)) -> CapableOfAttractingLargeAudiences(x))", "all x.((Musician(x) & InterestingAsIndividualPerformers(x)) -> AttractsLargeAudiences(x))"]}
{"id": "folio_train_545", "nl": "If Ryan is interesting as an individual performer and has a unique musical voice or style, then Ryan is either a touring soloist musician and capable of attracting large audiences, or neither a touring soloist musician nor capable of attracting large audiences.", "fol": "((IsInterestingPerformer(Ryan) & HasUniqueMusicalVoice(Ryan)) -> -((IsTouringMusician(Ryan) & -CanAttractLargeAudiences(Ryan)) | (-IsTouringMusician(Ryan) & CanAttractLargeAudiences(Ryan))))", "prediction": ["all x.((InterestingIndividualPerformer(x) & UniqueMusicalVoiceOrStyle(x)) -> (TouringSoloistMusician(x) & AttractsLargeAudiences(x)) | (-TouringSoloistMusician(x) & AttractsLargeAudiences(x))))", "all x.((InterestingAsIndividualPerformer(x) & UniqueMusicalVoiceOrStyle(x)) -> (TouringSoloistMusician(x) & AttractsLargeAudiences(x)) | (-TouringSoloistMusician(x) & AttractsLargeAudiences(x))))", "all x.(InterestingIndividualPerformer(x) & UniqueMusicalVoiceOrStyle(x)) -> (TouringSoloistMusician(x) & AttractsLargeAudiences(x) | -TouringSoloistMusician(x) & -AttractsLargeAudiences(x)))", "(InterestingIndividualPerformer(Ryan) & UniqueMusicalVoiceOrStyle(Ryan)) -> (TouringSoloistMusician(Ryan) & CapableOfAttractingLargeAudiences(Ryan)) | (-TouringSoloistMusician(Ryan) & CapableOfAttractingLargeAudiences(Ryan))))", "all x.((InterestingIndividualPerformer(x) & UniqueMusicalVoiceOrStyle(x)) -> (TouringSoloistMusician(x) & CapableOfAttractingLargeAudiences(x)) | (-TouringSoloistMusician(x) & CapableOfAttractingLargeAudiences(x))))", "all x y.((InterestingAsIndividualPerformer(x) & UniqueMusicalVoiceOrStyle(x) & Ryan(y)) -> (TouringSoloistMusician(y) & CapableOfAttractingLargeAudiences(y) | -TouringSoloistMusicianCapableOfAttractingLargeAudiences(y)))", "(InterestingAsIndividualPerformer(Ryan) & UniqueMusicalVoiceOrStyle(Ryan)) -> (TouringSoloistMusician(Ryan) & AttractsLargeAudiences(Ryan)) | (-TouringSoloistMusician(Ryan) & AttractsLargeAudiences(Ryan))))", "all x.(InterestingIndividualPerformer(x) & UniqueMusicalVoiceOrStyle(x) -> (TouringSoloistMusician(x) & AttractsLargeAudiences(x) | -TouringSoloistMusician(x) & -AttractsLargeAudiences(x)))", "all x.(InterestingAsIndividualPerformer(x) & UniqueMusicalVoiceOrStyle(x)) -> (TouringSoloistMusician(x) & AttractsLargeAudiences(x) | -TouringSoloistMusician(x) & -AttractsLargeAudiences(x)))", "all x.((InterestingAsIndividualPerformer(x) & UniqueMusicalVoiceOrStyle(x)) -> (TouringSoloistMusician(x) & CapableOfAttractingLargeAudiences(x)) | (-TouringSoloistMusician(x) & CapableOfAttractingLargeAudiences(x))))", "(InterestingIndividualPerformer(Ryan) & UniqueMusicalVoiceOrStyle(Ryan) & (TouringSoloistMusician(Ryan) | (TouringSoloistMusician(Ryan) & CapableOfAttractingLargeAudiences(Ryan)))))", "all x y.((InterestingIndividualPerformer(x) & UniqueMusicalVoiceOrStyle(x) & Ryan(y)) -> (TouringSoloistMusician(y) & CapableOfAttractingLargeAudiences(y) | -TouringSoloistMusicianCapableOfAttractingLargeAudiences(y)))", "exists x.(TouristSoloistMusician(x) & ((InterestingIndividualPerformer(x) & UniqueMusicalVoice(x) & AttractsLargeAudiences(x)) | -(TouristSoloistMusician(x) & AttractsLargeAudiences(x))))", "all x.(InterestingIndividualPerformer(x) -> ((TouringSoloistMusician(x) & AttractsLargeAudiences(x)) | (-TouringSoloistMusician(x) & AttractsLargeAudiences(x))))", "all x.((InterestingIndividualPerformer(x) & UniqueMusicalVoiceOrStyle(x)) -> (TouringSoloistMusician(x) & AttractsLargeAudiences(x) | -TouringSoloistMusician(x) & -AttractsLargeAudiences(x)))", "all x.((InterestingIndividualPerformer(x) & UniqueMusicalVoiceOrStyle(x)) -> (TouristSolistMusician(x) & CapableOfAttractingLargeAudiences(x)) | (-TouristSolistMusician(x) & CapableOfAttractingLargeAudiences(x))))"]}
{"id": "folio_train_546", "nl": "Ryan is interesting as an individual performer.", "fol": "IsInterestingPerformer(Ryan)", "prediction": ["(InterestingAsIndividualPerformer(Ryan))", "all x.((Ryan(x) & IndividualPerformer(x)) -> Interesting(x))", "Ryan is interesting as an IndividualPerformer.", "(Interesting(Ryan) & IndividualPerformer(Ryan))", "-InterestingAsIndividualPerformer(Ryan)", "(InterestingIndividualPerformer(Ryan))", "all x.(InterestingAsIndividualPerformer(x) -> Ryan(x))", "all x.((Ryan(x) & IndividualPerformer(x)) -> Interesting(x))", "Ryan is interesting as an individual Performer.", "(InterestingAsIndividualPerformer(Ryan))", "InterestedInDiscipline(Ryan)", "(InterestingPerformer(Ryan))", "Ryan is interesting as an IndividualPerformer.", "Ryan is interesting as a performer.", "all x.((Ryan(x) & IndividualPerformer(x)) -> Interesting(x))", "All x.((Ryan(x) & IndividualPerformer(x)) -> Interesting(x))"]}
{"id": "folio_train_547", "nl": "Ryan is either a permanent member of an orchestra or a touring soloist musician.", "fol": "(IsOrchestraMember(Ryan) | IsTouringMusician(Ryan))", "prediction": ["all x.(Ryan(x) -> (PermanentMemberOfOrchestra(x) | TouringSolistMusician(x)))", "(PermanentMemberOfOrchestra(Ryan) | TouringSoloistMusician(Ryan))", "all x y.((Ryan(x) & Orchestra(y)) | TouringSolistMusician(x)) -> PermanentMember(x,y))", "all x.(Ryan(x) -> (PermanentMemberOfOrchestra(x) | TouringSoloistMusician(x)))", "(PermanentMemberOfOrchestra(Ryan) | TouringSolistMusician(Ryan))", "all x y.((Ryan(x) & Orchestra(y)) | TouringSoloistMusician(x)) -> PermanentMember(x,y))", "all x.(Ryan(x) -> (PermanentMember(x) | TouringSolistMusician(x)))", "(PermanentMemberOfOrchestra(Ryan) | TouringSoloistMusician(Ryan))", "(PermanentMemberOfOrchestraOrTouringSoloistMusician(Ryan))", "all x y.((Ryan(x) & Orchestra(y)) | TouringSolistMusician(x,y)) -> PermanentMember(x,y))", "all x.(Ryan(x) -> (PermanentMemberOfOrchestra(x) | TouringSolistMusician(x)))", "all x.(Ryan(x) -> (PermanentMember(x) | TouringSoloistMusician(x)))", "(PermanentMemberOfOrchestra(Ryan) | TouringSolistMusician(Ryan))", "all x.(Ryan(x) -> (PermanentMemberOfOrchestra(x) | TouringSoloistMusician(x)))", "exists x.(Ryan(x) & (PermanentMember(x) | TouringSolistMusician(x)))", "exists x.(Ryan(x) & (PermanentMemberOfOrchestra(x) | TouringSolistMusician(x)))"]}
{"id": "folio_train_548", "nl": "Ryan is either a permanent member of an orchestra or has a unique musical voice or style.", "fol": "(IsOrchestraMember(Ryan) | HasUniqueMusicalVoice(Ryan))", "prediction": ["all x.(Ryan(x) -> (PermanentMemberOfOrchestra(x) | UniqueMusicalVoiceOrStyle(x)))", "all x y.((Ryan(x) & Orchestra(y)) -> (PermanentMember(x,y) | UniqueMusicalVoiceOrStyle(x)))", "(PermanentMemberOfOrchestra(Ryan) | UniqueMusicalVoiceOrStyle(Ryan))", "all x.(Ryan(x) -> (PermanentMemberOfOrchestra(x) | UniqueMusicalVoiceOrStyle(x)))", "all x y z.((Ryan(x) & Orchestra(y) & (PermanentMember(x,y) | UniqueMusicalVoice(x) | UniqueStyle(x))) -> Permanent(x,y))", "(PermanentMemberOfOrchestra(Ryan) | UniqueMusicalVoiceOrStyle(Ryan))", "all x y.((Ryan(x) & Orchestra(y)) -> (PermanentMember(x,y) | UniqueMusicalVoiceOrStyle(x)))", "all x.(Ryan(x) -> (PermanentMember(x) | UniqueMusicalVoiceOrStyle(x)))", "all x.(Ryan(x) -> (PermanentMemberOfOrchestra(x) | UniqueMusicalVoiceOrStyle(x)))", "all x y.((Ryan(x) & Orchestra(y)) -> (PermanentMember(x,y) | UniqueMusicalVoice(x) | UniqueStyle(x)))", "exists x.(Ryan(x) & ((PermanentMemberOfOrchestra(x) & (UniqueMusicalVoice(x) | UniqueStyle(x)))))", "(PermanentMemberOfOrchestra(Ryan) | UniqueMusicalVoiceOrStyle(Ryan))", "exists x.(Ryan(x) & (PermanentMember(x) | UniqueMusicalVoice(x) | UniqueStyle(x)))", "(PermanentMemberOfOrchestra(Ryan) | UniqueMusicalVoiceOrStyle(Ryan))", "all x.(Ryan(x) -> (PermanentMemberOfOrchestra(x) | UniqueMusicalVoiceOrStyle(x)))", "exists x.(Ryan(x) & (PermanentMemberOfOrchestra(x) | UniqueMusicalVoice(x) | UniqueStyle(x)))"]}
{"id": "folio_train_549", "nl": "If someone yells, then they are not cool.", "fol": "all x.(Yell(x) -> -IsCool(x))", "prediction": ["all x.(Yells(x) -> -Cool(x))", "all x.(Yells(x) -> -Cool(x))", "all x.((Yells(x) & Cool(x)) -> -cool(x))", "all x.(Yells(x) -> -cool(x))", "(all x.(Yells(x) -> -Cool(x)))", "all x y.((Yells(x) & Cool(y)) -> -cool(y))", "all x.((Yells(x) & Cool(x)) -> -cool(x))", "all x.(Yells(x) -> -Cool(x))", "all x y.((Yells(x) & Cool(y)) -> -cool(y))", "all x.(Yells(x) -> -Clothing(x))", "all x.(Yells(x) -> -cool(x))", "exists x.(Yell(x) & Cool(x))", "all x.(Yells(x) -> -Cool(x))", "all x.(Yells(x) -> -Clean(x))", "exists x.(yells(x) & Cool(x))", "exists x.(Yells(x) & Cool(x))"]}
{"id": "folio_train_550", "nl": "If someone is angry, then they yell.", "fol": "all x.(IsAngry(x) -> Yell(x))", "prediction": ["all x.((Angry(x) & Yell(x)) -> IsAngry(x))", "all x.(Angry(x) -> Yell(x))", "all x.((Anger(x) & Yell(x)) -> Anger(x))", "all x.((Person(x) & Irresponsible(x)) -> Yell(x))", "(Angry(x) -> Yell(x))", "(Angering(a) -> Yell(a))", "all x.(Angry(x) -> Yell(x))", "all x y.((Person(x) & Anger(x)) -> Yell(y))", "all x.((Anger(x) & Yell(x)) -> Is(x,y))", "all x.((Angry(x)) -> Yell(x))", "All x y.((Anger(x) & Person(y)) -> Yells(x,y))", "all x.(Angry(x) -> Yell(x))", "all x.((Person(x) & Anxious(x)) -> Yell(x))", "all x.(Angry(x) -> Yeell(x))", "all x.(Anger(x) -> Yall(x))", "exists x.(Angry(x) & Yelp(x))"]}
{"id": "folio_train_551", "nl": "If someone flies, then they are cool.", "fol": "all x.(CanFly(x) -> IsCool(x))", "prediction": ["all x.(Flies(x) -> Cool(x))", "all x.(Flies(x) -> Cool(x))", "all x.((Flies(x) & Cool(x)) -> Cool(x))", "all x.(Flies(x) -> Cool(x))", "all x.((Flies(x) & Cool(x)) -> Flies(x))", "all x.((Flyer(x) & Cool(x)) -> Cool(x))", "all x y.((Fly(x) & Person(y)) -> Cool(y))", "all x.(Flies(x) -> Cool(x))", "all x.(Flyes(x) -> Cool(x))", "all x.((Flies(x) & Cool(x)) -> Cool(x))", "all x.(Flies(x) -> Cool(x))", "all x y.(Flies(x) -> Cool(y))", "exists x.(Flyer(x) & Cool(x))", "all x.(Flies(x) -> Cool(x))", "exists x.(Flyer(x) & Cool(x))", "exists x.(Flyer(x) -> Cool(x))"]}
{"id": "folio_train_552", "nl": "Every person that knows magic can fly.", "fol": "all x.(KnowsMagic(x) -> CanFly(x))", "prediction": ["all x.((Person(x) & KnowsMagic(x)) -> CanFly(x))", "all x.(KnowsMagic(x) -> CanFly(x))", "all x.((Person(x) & KnowsMagic(x)) -> CanFly(x))", "(knowsMagic(p) & CanFly(p))", "all x.((Person(x) & KnowsMagic(x)) -> CanFly(x))", "all x y.((Person(x) & KnowsMagic(x)) -> CanFly(x))", "all x.(KnowsMagic(x) -> CanFly(x))", "exists x.(Person(x) & KnowsMagic(x) & CanFly(x))", "all x y.((Person(x) & KnowsMagic(x)) -> CanFly(x))", "all x.((Person(x) & KnowsMagic(x)) -> CanFly(x))", "all x.(KnowsMagic(x) -> CanFly(x))", "all x.((Person(x) & KnowsMagic(x)) -> CanFly(x))", "all x.(KnowsMagic(x) -> CanFly(x))", "all x.((Person(x) & KnowsMagic(x)) -> CanFly(x))", "all x.(KnowsMagic(x) -> CanFly(x))", "all x.((Person(x) & KnowsMagic(x)) -> CanFly(x))"]}
{"id": "folio_train_553", "nl": "All wizards know magic.", "fol": "all x.(IsWizard(x) -> KnowsMagic(x))", "prediction": ["all x.(Wizard(x) -> KnowsMagic(x))", "all x.(Magic(x) -> KnowsMagic(x))", "all x.(Wizard(x) -> KnowsMagic(x))", "(all x.(Wizard(x) -> KnowsMagic(x)))", "(all x.(Magic(x) -> Knows(x)))", "all x.(Magic(x) -> KnowsMagic(x))", "all x.exists y.(Wizard(x) & Magic(y) & Knows(x,y))", "all x y.((Magic(x) & Wizard(y)) -> KnowsMagic(y))", "all x.(Magician(x) -> KnowsMagic(x))", "all x.(Wizard(x) -> KnowsMagic(x))", "all x y.((Wizard(x) & Magic(y)) -> Knows(x,y))", "all x.(Magic(x) -> KnowsMagic(x))", "all x y.((Magic(x) & Wizard(y)) -> KnowsMagic(y))", "all x.(Wizard(x) -> KnowsMagic(x))", "all x.(Wizard(x) -> KnowsMagic(x))", "exists x.(Magic(x) & KnowsMagic(x))"]}
{"id": "folio_train_554", "nl": "Harry either yells and flies, or neither yells nor flies.", "fol": "((Yell(Harry) & CanFly(Harry) & -(-Yell(Harry) & -CanFly(Harry))) | (-(Yell(Harry) & CanFly(Harry)) & -Yell(Harry) & -CanFly(Harry)))", "prediction": ["all x.(Harry(x) -> (Yells(x) & Flies(x)) | (-Yells(x) & Flies(x))))", "(all x.(Harry(x) -> (Yells(x) & Flies(x))) | (-Yells(x) & Flies(x))))", "all x.(Harry(x) -> ((Yells(x) & Flies(x)) | (-Yells(x) & Flies(x))))", "all x.(Harry(x) -> (Yells(x) & Flies(x) | -Yells(x) & Flies(x)))", "(all x.(Harry(x) -> (Yells(x) | Flies(x))))", "all x y.((Harry(x) & (Yells(x) | Flies(x))) -> -Yells(x) & Flies(x))", "all x.(Harry(x) -> (Yells(x) | Flies(x) | -Yells(x) & Flies(x)))", "(all x.(Harris(x) -> (Yells(x) & Flies(x))) | (-Yells(x) & Flies(x))))", "(all x.(Harry(x) -> (yells(x,y) & flies(x))) | (-yells(y,x) & flies(y))))", "all x.(Harry(x) -> ((Yells(x) & Flies(x)) | (-Yells(x) & Flies(x))))", "(all x.(Harry(x) -> (Yells(x) | Flies(x))))", "(all x.(Harry(x) -> (Yells(x) & Flies(x))) | (-Yells(x) & Flies(x))))", "(all x.(Harry(x) -> (Yells(x) | Flies(x))))", "exists x.(Harry(x) & ((Yells(x) & -Flies(x)) | -Yells(x) & -Flies(x))))", "all x.(Harry(x) -> ((Yells(x) & Flies(x)) | (-Yells(x) & Flies(x))))", "exists x.(Harry(x) & ((Yells(x) & Flies(x)) | -Yells(x) & Flies(x)))"]}
{"id": "folio_train_555", "nl": "Potter is a wizard and flies.", "fol": "(IsWizard(Potter) & CanFly(Potter))", "prediction": ["all x.(Potter(x) -> (Magic(x) & Flies(x)))", "(Wizard(Potter) & Flies(Potter))", "all x.(Potter(x) -> (Magician(x) & Flies(x)))", "(Magic(Potter) & Flies(Potter))", "(Wizard(Potter) & Flies(Potter))", "all x.(Potter(x) -> (Magic(x) & Flies(x)))", "all x y.((Potter(x) & Wizard(y)) -> Flies(x,y))", "all x.(Potter(x) -> (Magician(x) & Flies(x)))", "all x.(Potter(x) -> (Wizard(x) & Flies(x)))", "(Wizard(Potter) & Flies(Potter))", "(Wizard(Potter) & Flies(Potter))", "all x.(Potter(x) -> (Magic(x) & Flies(x)))", "exists x.(Potter(x) & Wizard(x) & Flies(x))", "all x.(Potter(x) -> (Magic(x) & Flies(x)))", "all x.(Potter(x) -> (Wizard(x) & Flies(x)))", "exists x.(Potter(x) & Wizard(x) & Flies(x))"]}
{"id": "folio_train_556", "nl": "Harry is cool.", "fol": "IsCool(Harry)", "prediction": ["all x.(Harry(x) -> Cool(x))", "Harry is cool.", "(Cool(Harry) & Cool(Harry))", "(Cozy(Harry) & Cool(Harry))", "Harry is cool.", "-(Harry(Harry) & Cool(Harry))", "all x.(Harris(x) -> Cool(x))", "all x.(Harry(x) -> Cool(x))", "Harry is cool.", "(Cool(Harry))", "all x.(Harris(x) -> Cool(x))", "(Clean(Harry)", "Harry ist cool.", "All x.(Harry(x) -> Cool(x))", "Harry is cool.", "Harry ist cool!"]}
{"id": "folio_train_557", "nl": "Harry is not cool.", "fol": "-IsCool(Harry)", "prediction": ["all x.(Harry(x) -> -Cozy(x))", "Harry is notcool.", "(-Cool(Harry))", "-(Harry(Harry) & Cool(Harry))", "(-cool(Harry))", "all x.(Harry(x) -> -Cool(x))", "(Cozy(Harry) & -Cozy(Harry))", "(Clean(Harry) & -Cozy(Harry))", "Harry is notcool.", "all x.(Harris(x) -> -Cozy(x))", "-Clothing(Harry)", "all x.(Harry(x) -> -Cozy(x))", "Harry is notcool.", "Harry ist nicht cool.", "-Cozy(Harry)", "Harry is not cool."]}
{"id": "folio_train_558", "nl": "Harry is a wizard or angry.", "fol": "(IsWizard(Harry) | IsAngry(Harry))", "prediction": ["all x.(Harry(x) -> (Magic(x) | Agreed(x)))", "(Wizard(Harry) | Agreed(Harry))", "all x.(Harry(x) -> (Magician(x) | Agreed(x)))", "(Magic(Harry) | Aggressive(Harry))", "(Wizard(Harry) | Angerful(Harry))", "all x.(Harry(x) -> (Wizard(x) | Angerful(x)))", "all x.(Harry(x) -> (Magic(x) | Aggressive(x)))", "(Wizard(Harry) | Aggressive(Harry))", "all x.(Harry(x) -> (Wizard(x) | Agreed(x)))", "all x.(Harris(x) -> (Magic(x) | Aggressive(x)))", "(Wizard(Harry) | Angering(Harry))", "exists x.(Harry(x) & Wizard(x) & (Angry(x) | Wizard(x))))", "all x.(Harry(x) -> (Magician(x) | Angerful(x)))", "all x.(Harris(x) -> (Magician(x) | Agreed(x)))", "all x.(Harry(x) -> (Wizard(x) | Angerful(x)))", "exists x.(Harry(x) & Wizard(x) | Agreed(x)))"]}
{"id": "folio_train_559", "nl": "Harry is neither a wizard nor angry.", "fol": "(-IsWizard(Harry) & -IsAngry(Harry))", "prediction": ["all x.(Harry(x) -> (-Magic(x) & -Angry(x)))", "Harry is -Wizard(Harry) & -Angry(Harry))", "(-Magic(Harry) & -Angry(Harry))", "all x.(Harry(x) -> (-Magician(x) | Angerful(x)))", "-(Magic(Harry) | Anger(Harry))", "all x.(Harry(x) -> (-Wizard(x) & -Angry(x)))", "Harry is neither wizard nor angry.", "-(Harry(Harry) & Wizard(Harry) & -Angry(Harry))", "(-Magician(Harry) & -Angry(Harry))", "(Harry(Harry) & -(Magic(Harry) | Agreed(Harry)))", "(-Wizard(Harry) | Angering(Harry))", "Harry is -Wizard(Harry) & -Angry(Harry))", "all x.(Harris(x) -> (-Magic(x) & -Angry(x)))", "(-Magic(Harry) & -Angry(Harry))", "all x.(Harry(x) -> (-Magic(x) | Angerful(x)))", "all x.(Harry(x) -> (-Wizard(x) & -Angry(x)))"]}
{"id": "folio_train_560", "nl": "Products are either produced in China or the US. ", "fol": "all x.((ProducedInChina(x) & -ProducedInUS(x)) | (-ProducedInChina(x) & ProducedInUS(x)))", "prediction": ["all x.(Product(x) -> (ProducedIn(x,China) | ProducedIn(x,US)))", "(Product(x) & (ProducedIn(x,China) | ProducedIn(x,US)))", "all x y.((Product(x) & (ProducedIn(x,y) | ProducedIn(x,y))) -> (China(y) | US(y)))", "all x y.((Product(x) & (ProducedIn(x,Chinese) | ProducedIn(x,US))) -> (ProducedIn(x,Chinese) | ProducedIn(x,US)))", "all x.(Product(x) -> (ProducedIn(x,China) | ProducedIn(x,US)))", "(Product(x) | ProducedIn(x,China)) | ProducedIn(x,US))", "all x y.(Product(x) -> (ProducedIn(x,y) & (ProducedIn(x,y) | ProducedIn(x,y))))", "all x.(Product(x) -> (ProducedIn(x,Chinese) | ProducedIn(x,US)))", "(Product(Product) & (ProducedIn(Product) | ProducedIn(Product)))", "all x.(Product(x) -> (ProducedInChina(x) | ProducedInUS(x)))", "all x.(Product(x) -> (ProducedIn(x,China) | ProducedIn(x,US)))", "all x y.(Product(x) -> (ProducedIn(x,y) | ProducedIn(x,y)))", "all x.(Product(x) -> (ProducedIn(x,Chinese) | ProducedIn(x,US)))", "exists x.(Product(x) & (ProducedInChina(x) | ProducedInUS(x)))", "exists x.(Product(x) & ProducedIn(x,China) & ProducedIn(x,US))", "exists x.(Product(x) & (ProducedIn(x,China) | ProducedIn(x,US)))"]}
{"id": "folio_train_561", "nl": "All produced in China are labeled. ", "fol": "all x.(ProducedInChina(x) -> IsLabeled(x))", "prediction": ["all x.((ProducedInChina(x) & Labeled(x)) -> ProducedInChina(x))", "all x.(ProducedInChina(x) -> Labeled(x))", "all x.((ProducedInChina(x) & Labeled(x)) -> -ProducedInChina(x))", "all x y.((ProducedIn(x,y) & China(y)) -> Labeled(x))", "all x y.((ProducedInChina(x) & Product(y)) -> Labeled(x))", "all x.(ProducedInChina(x) -> Labeled(x))", "all x.((ProducedInChina(x) & Labeled(x)) -> Product(x))", "all x y.((ProducedInChina(x) & ProductedInChina(y)) -> Labeled(x))", "all x.((ProducedInChina(x) & Labeled(x)) -> ProducedInChina(x))", "all x.(ProducedInChina(x) -> Labeled(x))", "all x.((ProducedInChina(x) & Labeled(x)) -> -ProducedInChina(x))", "(all x.(ProducedInChina(x) -> Labeled(x)))", "(all x.(ChinaProducedIn(x) -> Labeled(x)))", "all x.(ProducedInChina(x) -> Labeled(x))", "all x.(ProducedInChina(x) -> Labeled(x))", "All x.(ProducedInChina(x) -> Labeled(x))"]}
{"id": "folio_train_562", "nl": "All produced in the US are sold in the US. ", "fol": "all x.(ProducedInUS(x) -> IsSoldInUS(x))", "prediction": ["all x.(ProducedIn(x,US) -> SoldIn(x,US))", "all x.((ProducedIn(x,US) & SoldIn(x,US)) -> ProducedIn(x,US))", "all x y.((ProducedIn(x,y) & US(y)) -> SoldIn(x,y))", "all x.(ProducedIn(x,US) -> SoldIn(x,US))", "all x.((ProducedIn(x,US) & SoldIn(x,US)) -> ProducedIn(x,US))", "ALLOWEDBYUS(x) -> SoldInUS(x))", "all x y.((ProducedIn(x,y) & US(y)) -> SoldIn(x,y))", "all x.((ProducedIn(x,US) & USSold(x)) -> ProducedIn(x,US))", "all x y.((ProducedIn(x,y) & US) -> SoldIn(x,y))", "(all x.(ProducedIn(x,US)) -> SoldIn(x,US))", "all x.(ProducedIn(x,US) -> SoldIn(x,US))", "all x.(ProducedInUS(x) -> SoldInUS(x))", "(all x.(ProducedInUS(x) -> SoldInUS(x)))", "all x.((ProducedInTheUS(x) & SoldInTheUS(x)) -> ProducedInTheUS(x))", "all x y.((ProducedIn(x,y) & USA(y)) -> SoldIn(x,y))", "all x.(ProducedIn(x,US) -> SoldIn(x,US))"]}
{"id": "folio_train_563", "nl": "If labeled, then the product is cheaper. ", "fol": "all x.(IsLabeled(x) -> IsCheaper(x))", "prediction": ["all x.((Labeled(x) & Product(x)) -> Cheaper(x))", "all x.((Labeled(x) & Product(x)) -> Cheaper(x))", "(Labeled) -> CheaperProduct(x))", "all x.((Labeled(x) & Product(x)) -> Cheaper(x))", "(Labeled(x) -> CheaperProduct(x))", "all x.((Labeled(x) & Product(x)) -> Cheaper(x))", "-(Labeled(x) & ProductBudget(x))", "all x.(Labeled(x) -> CheaperProduct(x))", "all x y.((Product(x) & Labeled(x)) -> Cheaper(y))", "-(Labeled(x) & ProductBierner(x))", "all x.((Labeled(x) & Product(x)) -> Cheaper(x))", "all x.((Labeled(x) & Product(x)) -> Cheaper(x))", "all x.(Labeled(x) -> CheaperProduct(x))", "all x.((Product(x) & Labeled(x)) -> Cheaper(x))", "exists x.(Labeled(x) & ProductBudget(x))", "all x.(Labeled(x) -> CheaperProduct(x))"]}
{"id": "folio_train_564", "nl": "All sold in the US are sold in Walmart. ", "fol": "all x.(IsSoldInUS(x) -> IsSoldInWalmart(x))", "prediction": ["all x.(SoldInUS(x) -> SoldInWalmart(x))", "all x.(SoldIn(x,US) -> SoldInWalmart(x))", "all x y.((SoldIn(x,y) & US(y)) -> SoldInWalmart(x))", "all x.((SoldInUS(x) & SoldInWalmart(x)) -> SoldInWalmart(x))", "(all x.(SoldInU.S.A.S.A.S.Walmart(x)) -> SoldInWalmart(x))", "all x.((SoldIn(x,US) & SoldIn(x,Walmart)) -> SoldIn(x,Walmart))", "all x.(SoldInUS(x) -> SoldInWalmart(x))", "all x y.((SoldIn(x,y) & US(y)) -> SoldIn(x,y))", "all x.((SoldInUS(x) & SoldInWallmart(x)) -> SoldInWallmart(x))", "all x.(SoldIn(x,US) -> SoldIn(x,Walmart))", "all x y.((SoldIn(x,y) & US(y)) -> SoldInWalmart(x,y))", "(all x.(SoldInUS(x) -> SellsInWalmart(x)))", "all x y.((SoldIn(x,y) & US(y)) -> SoldIn(x,y))", "all x.(SoldInUS(x) -> SoldInWallmart(x))", "(all x.(SoldInUS(x) -> SellsInWallmart(x)))", "all x.(SoldIn(x,US) -> SoldIn(x,Wallmart))"]}
{"id": "folio_train_565", "nl": "All displayed on the homepage are sold in Walmart. ", "fol": "all x.(IsDisplayedInHomepage(x) -> IsSoldInWalmart(x))", "prediction": ["all x.(DisplayedOnHomepage(x) -> SoldInWalmart(x))", "all x.((DisplayedOnHomepage(x) & SoldInWalmart(x)) -> SellsInWalmart(x))", "all x.(Display(x) -> SoldInWalmart(x))", "all x y.((Display(x) & Homepage(y)) -> SoldInWalmart(x,y))", "all x.(DisplayedOnHomepage(x) -> SoldInWalmart(x))", "all x y.((Display(x) & Homepage(y) & DisplayedOn(x,y)) -> SoldInWalmart(x))", "(all x.(Display(x) -> SellsInWalmart(x)))", "(all x.(DisplayedOnHomepage(x) -> SoldInWalmart(x)))", "all x.((Display(x) & Walmart(x)) -> SoldIn(x))", "all x y.((Homepage(x) & DisplayedOn(x,y)) -> SoldIn(x,y))", "all x y.((DisplayedOnHomepage(x) & Walmart(y)) -> SoldIn(x,y))", "all x.(DisplayedOnHomepage(x) -> SoldInWalmart(x))", "(all x.(Display(x) -> SellsInWalmart(x)))", "all x.(Display(x) -> SoldInWalmart(x))", "All x.(DisplayOnHomepage(x) -> SoldInWalmart(x))", "all x.(DisplayedOnHomepage(x) -> SoldInWalmart(x))"]}
{"id": "folio_train_566", "nl": "No products returned by customers are sold in Walmart. ", "fol": "all x.(IsReturnedByCustomer(x) -> -IsSoldInWalmart(x))", "prediction": ["all x.((Product(x) & CustomerReturned(x)) -> -SoldInWalmart(x))", "all x y.((Product(x) & Customer(y) & Returned(x,y)) -> SoldInWalmart(x))", "all x.((Product(x) & ReturnedByCustomers(x)) -> SoldInWalmart(x))", "-exists x.(Product(x) & ReturnedByCustomers(x) & SoldInWalmart(x))", "-exists x.(ReturnedProduct(x) & SoldInWalmart(x))", "(-all x y.((Product(x) & Customer(y)) -> SoldInWallmart(x,y)))", "all x y.((Product(x) & Customer(y) & Returned(x,y)) -> SoldInWallmart(x))", "all x.((Product(x) & CustomerReturned(x)) -> SoldInWalmart(x))", "all x y.((Product(x) & Customer(y) & Returned(x,y)) -> SoldInWalmart(x))", "all x.((Product(x) & ReturnedByCustomers(x)) -> SoldInWallmart(x))", "-exists x.(Product(x) & ReturnedByCustomers(x))", "all x y.((Product(x) & Customer(y) & ReturnedBy(x,y)) -> SoldInWallmart(x))", "-exists x.(ReturnedProduct(x) & SoldInWalmart(x))", "(-all x y.((Product(x) & Customer(y)) -> SoldInWalmart(x,y)))", "all x.((Product(x) & ReturnedByCustomers(x)) -> -SoldInWalmart(x))", "All x.((Product(x) & CustomerReturned(x)) -> SellsInWallmart(x))"]}
{"id": "folio_train_567", "nl": "G-910 is either displayed on the homepage or cheaper.", "fol": "-((IsDisplayedInHomepage(G910) & -IsCheaper(G910)) | (-IsDisplayedInHomepage(G910) & IsCheaper(G910)))", "prediction": ["all x.(G-910(x) -> (DisplayedOnHomepage(x) | Cheaper(x)))", "(DisplayedOnHomepage(G-910) | Cheaper(G-910)))", "(Display(G-910) | Cheaper(G-910)))", "all x.(G-910(x) -> (DisplayedOnHomepage(x) | Cheaper(x)))", "all x y.((G-910(x) & Homepage(y)) -> (DisplayedOn(x,y) | Cheaper(x,y)))", "(DisplayedOnHomepage(G-910) | Cheaper(G-910)))", "all x.(G-910) -> (DisplayedOnHomepage(x) | Cheaper(x)))", "all x.(G-910(x) -> (DisplayedOnHomepage(x) | Cheaper(x)))", "(Display(G-910) | Cheaper(G-910)))", "(DisplayedOnHomepage(G-910) | Cheaper(G-910)))", "(DisplayedOnHomepage(g910) | Cheaper(g910)))", "all x.(G-910(x) -> (DisplayOnHomepage(x) | Cheaper(x)))", "all x.(G-910) -> (DisplayedOnHomepage(x) | Cheaper(x)))", "all x.(G-910(x) -> (DisplayedOnHomepage(x) | Cheaper(x)))", "all x.(G910(x) -> (DisplayedOnHomepage(x) | BoughtOnHomepage(x)))", "exists x.(G910(x) & DisplayedOnHomepage(x) | Cheaper(x))"]}
{"id": "folio_train_568", "nl": "G-910 is displayed on the homepage.", "fol": "IsDisplayedInHomepage(G910)", "prediction": ["all x.(G-910(x) -> DisplayedOnHomepage(x))", "(Display(G-910) & Homepage(G-910))", "(DisplayedOnHomepage(G-910))", "all x y.((G-910(x) & Homepage(y)) -> DisplayedOn(x,y))", "all x.((G-910(x) & DisplayedOnHomepage(x)) -> DisplayedOnHomepage(x))", "all x.(G-910(x) -> DisplayedOnHomepage(x))", "(Display(G-910) & OnHomepage(G-910))", "G-910 DisplayedOnHomepage(G-910)", "(DisplayedOnHomepage(G-910))", "all x.(G-910(x) -> DisplayedOnHomepage(x))", "all x y.((G-910(x) & Homepage(y)) -> DisplayedOn(x,y))", "all x.(G-910) -> DisplayedOnHomepage(x))", "(Display(G-910) & Homepage(G-910))", "(Displays(G-910) & OnHomepage(G-910))", "all x.(G-910(x) -> DisplayedOnHomepage(x))", "All x.(G910(x) -> DisplayedOnHomepage(x))"]}
{"id": "folio_train_569", "nl": "G-910 is not displayed on the homepage.", "fol": "-IsDisplayedInHomepage(G910)", "prediction": ["all x.(G-910(x) -> -DisplayedOnHomepage(x))", "(-DisplayedOnHomepage(G-910))", "(-Display(G-910))", "all x.((G-910(x) & -DisplayedOnHomepage(x)) -> -DisplayedOnHomepage(x))", "G-910 -DisplayedOnHomepage(G-910))", "the G-910 is not displayed on the homepage.", "(-Display(G-910) & Homepage(G-910))", "all x.(G-910(x) -> -DisplayedOnHomepage(x))", "(G-910 -DisplayedOnHomepage(G-910))", "(-DisplayG-910(G-910))", "-(Display(G-910) & Homepage(G-910))", "-DisplayedOnHomepage(G-910)", "G-910 -DisplayableOnHomepage(G-910))", "G-910 is notDisplayedOnHomepage(g))", "(-DisplayG-910(G-910))", "-DisplayedOnHomepage(G-910)"]}
{"id": "folio_train_570", "nl": "G-910 is a product returned by customers.", "fol": "IsReturnedByCustomer(G910)", "prediction": ["all x.(G-910(x) -> ProductReturnedByCustomers(x))", "all x.((G-910(x) & Customer(x)) -> ProductReturned(x))", "all x y.((G-910(x) & Customer(y)) -> ReturnedBy(x,y))", "(Product(G-910) & ReturnedByCustomers(G-910))", "(ReturnedByCustomers(G-910))", "all x.(G-910(x) -> ProductReturnedByCustomers(x))", "all x y.((Product(x) & Customer(y)) -> ReturnedBy(x,y))", "all x.((Product(x) & Customer(x)) -> G-910.", "(ReturnedByCustomers(G-910))", "all x.((G-910(x) & Customer(y)) -> ReturnedBy(x,y))", "all x.(G-910(x) -> ProductReturnedByCustomers(x))", "all x y.((Product(x) & Customer(y)) -> ReturnedBy(x,y))", "(ReturnedByCustomers(G-910))", "all x.(G-910(x) -> ReturnedByCustomers(x))", "(ReturnedByCustomers(G-910))", "All x.(G-910(x) -> ReturnedByCustomers(x))"]}
{"id": "folio_train_571", "nl": "G-910 is a product returned by customers or sold in Walmart.", "fol": "(IsReturnedByCustomer(G910) | IsSoldInWalmart(G910))", "prediction": ["all x.((Product(x) & (ReturnedByCustomers(x) | SoldInWalmart(x))) -> G-910.", "all x y.((G-910(x) & (Customer(y) | Walmart(y))) -> (ReturnedBy(x,y) | SoldIn(x,y)))", "(ReturnedByCustomers(G-910) | SoldInWalmart(G-910)))", "(all x.(G-910(x) -> (ReturnedByCustomers(x) | SoldInWalmart(x))))", "all x y.((G-910(x) & Customer(y)) -> (ReturnedBy(x,y) | SoldIn(x,y)))", "all x.(G-910(x) -> (ReturnedByCustomers(x) | SoldInWallmart(x)))", "((Product(g) & (ReturnedByCustomers(g) | SoldInWalmart(g))) -> G-910))", "all x y.((Product(x) & Customer(y) & (ReturnedBy(x,y) | SoldInWallmart(x,y))) -> G-910(x))", "all x y.((Product(x) & (Customer(y) | Walmart(y))) -> (ReturnedBy(x,y) | SoldIn(x,y)))", "(ReturnedByCustomersOrSoldInWalmart(G-910))", "all x.((Product(x) & (ReturnedByCustomers(x) | SoldInWalmart(x))) -> G-910(x))", "(ReturnedByCustomers(G-910) | SoldInWallmart(G-910)))", "all x.(G-910(x) -> (Product(x) & (ReturnedByCustomers(x) | SoldInWalmart(x))))", "all x.(G-910(x) -> (ReturnedByCustomers(x) | SoldInWallmart(x)))", "all x.((Product(x) & (ReturnedByCustomers(x) | SoldInWalmart(x))) -> G-910.", "all x.(G-910(x) -> (ReturnedByCustomers(x) | SoldInWallmart(x)))"]}
{"id": "folio_train_572", "nl": "G-910 is either returned by customers or sold in Walmart.", "fol": "(IsReturnedByCustomer(G910) | IsSoldInWalmart(G910))", "prediction": ["all x.(G-910(x) -> (ReturnedByCustomers(x) | SoldInWalmart(x)))", "all x y.((G-910(x) & Customer(y)) -> (ReturnedBy(x,y) | SoldInWallmart(x,y)))", "(ReturnedByCustomers(G-910) | SoldInWalmart(G-910)))", "all x.((G-910(x) & (ReturnedByCustomers(x) | SoldInWalmart(x))) -> SoldInWalmart(x))", "all x.(G-910(x) -> (ReturnedByCustomers(x) | SoldInWallmart(x)))", "(all x.(G-910) -> (ReturnedByCustomers(x) | SoldInWalmart(x)))", "(ReturnedByCustomers(G-910) | SoldInWalmart(G-910)))", "all x y.((G-910(x) & Customer(y)) -> (ReturnedBy(x,y) | SoldIn(x,y)))", "(all x.(G-910(x) -> (ReturnedByCustomers(x) | SoldInWallmart(x))))", "all x.(G-910(x) -> (ReturnedByCustomers(x) | SoldInWalmart(x)))", "all x.(G-910) -> (ReturnedByCustomers(x) | SoldInWalmart(x)))", "all x y.((G-910(x) & Customer(y)) -> (ReturnedBy(x,y) | SoldInWalmart(x,y)))", "(ReturnedByCustomers(G-910) | SoldInWallmart(G-910)))", "all x.(G-910(x) -> (ReturnedByCustomers(x) | SoldInWallmart(x)))", "all x.(G-910(x) -> (RenewedByCustomers(x) | SoldInWalmart(x)))", "all x.(G-910(x) -> (ReturnedByCustomers(x) | SoldInWalmart(x)))"]}
{"id": "folio_train_573", "nl": "People either order a lot of Amazon packages or are environmentally conscious.", "fol": "all x.((OrdersAmazonPackages(x) & -IsEnvironmentallyConscious(x)) | (-OrdersAmazonPackages(x) & IsEnvironmentallyConscious(x)))", "prediction": ["all x.((Person(x) & (OrdersLotsOfAmazonPackages(x) | EnvironmentallyConscious(x))) -> AmazonPackages(x))", "all x.((Person(x) & OrdersLotsOfAmazonPackages(x)) | EnvironmentallyConscious(x))", "all x y.((Person(x) & AmazonPackage(y)) -> (OrdersLots(x,y) | EnvironmentallyConscious(x)))", "(OrdersLotsOfAmazonPackages(Person) | EnvironmentallyConscious(Person))", "exists x.(Person(x) & (OrdersLotsOfAmazonPackages(x) | EnvironmentallyConscious(x)))", "all x.((Person(x) & (OrdersLotsOfAmazonPackages(x) | EnvironmentallyConscious(x))) -> Orders(x,AmazonPackages))", "all x y.((Person(x) & AmazonPackage(y)) -> (Orders(x,y) | EnvironmentallyConscious(x,y)))", "all x.((Person(x) & OrdersLotsOfAmazonPackages(x)) | EnvironmentallyConscious(x))", "all x y.((Person(x) & AmazonPackage(y)) -> (OrdersLot(x,y) | EnvironmentallyConscious(x)))", "exists x.(Person(x) & (OrdersLotsOfAmazonPackages(x) | EnvironmentallyConscious(x)))", "exists x.(Person(x) & (Orders(x,Amazon) | EnvironmentallyConscious(x)))", "all x.((Person(x) & (OrdersLotsOfAmazonPackages(x) | EnvironmentallyConscious(x))) -> AmazonPackages(x))", "exists x.(Person(x) & (OrdersLotsOfAmazonPackages(x) | EnvironmentallyConscious(x)))", "all x y.((Person(x) & AmazonPackage(y) & Orders(x,y)) | EnvironmentallyConscious(x,y))", "exists x.(Person(x) & (Orders(x,lots) | EnvironmentallyConscious(x)))", "exists x.(Person(x) & (OrdersLotsOfAmazonPackages(x) | EnvironmentallyConscious(x)))"]}
{"id": "folio_train_574", "nl": "If people order a lot of Amazon packages, then they get a lot of daily mail delivered.", "fol": "all x.(OrdersAmazonPackages(x) -> ReceivesDailyMail(x))", "prediction": ["all x.((Person(x) & OrdersLotsOfAmazonPackages(x)) -> GetsLotsOfDailyMail(x))", "all x.(OrdersLotsOfAmazonPackages(x) -> GetsLotsOfDailyMail(x))", "all x y.((Person(x) & OrdersLotsOfAmazonPackages(x) & DailyMail(y)) -> GetsDailyMail(x,y))", "(OrdersLotsOfAmazonPackages(Person) -> GetsLotsOfDailyMail(Person))", "all x y.((Person(x) & AmazonPackage(y) & Orders(x,y)) -> GetsDailyMail(x))", "all x.((Person(x) & OrdersLotsOfAmazonPackages(x)) -> GetsLotsOfDailyMail(x))", "all x.((PeopleOrdersLotsOfAmazonPackages(x) & DailyMailDelivered(x)) -> LotsOfPackages(x))", "all x y.((Person(x) & OrdersLotsOfAmazonPackages(x,y)) -> GetsLotsOfDailyMail(x))", "all x.((Person(x) & OrdersAmazonPackages(x)) -> GetsDailyMail(x))", "all x.(OrdersLotsOfAmazonPackages(x) -> GetsLotsOfDailyMail(x))", "all x.((Person(x) & OrdersLotsOfAmazonPackages(x)) -> GetsLotsOfDailyMail(x))", "all x.(OrdersAmazonPackages(x) -> GetsDailyMail(x))", "all x y.((Person(x) & AmazonPackages(y) & Orders(x,y)) -> GetsDailyMail(x))", "all x y.((Person(x) & OrdersAmazonPackages(x,y)) -> GetsDailyMail(x,y))", "exists x.(OrdersAmazonPackages(x) & LotsOfDailyMail(x))", "all x.((Person(x) & OrdersLotsOfAmazonPackages(x)) -> GetsLotsOfDailyMail(x))"]}
{"id": "folio_train_575", "nl": "If people are environmentally conscious, then they have solar panels in their homes.", "fol": "all x.(IsEnvironmentallyConscious(x) -> HasSolarPanels(x))", "prediction": ["all x.(EnvironmentallyConscious(x) -> HasSolarPanelsInHomes(x))", "all x.((Person(x) & EnvironmentallyConscious(x)) -> HasSolarPanelsInHome(x))", "all x.(EnvironmentallyConscious(x) -> SolarPanelsInHomes(x))", "all x y.((Person(x) & EnvironmentallyConscious(x)) -> HasSolarPanelsInHome(x,y))", "all x.((Person(x) & EnvironmentallyConscious(x)) -> SolarPanelsInHome(x))", "all x.((People(x) & EnvironmentallyConscious(x)) -> SolarPanelsInHomes(x))", "all x y.((EnvironmentallyConscious(x) & Person(y)) -> HasSolarPanelsInHome(y,x))", "all x.(EnvironmentallyConscious(x) -> HasSolarPanelsInHome(x))", "all x y.((Person(x) & EnvironmentallyConscious(x)) -> SolarPanelsInHome(y))", "all x.((Person(x) & EnvironmentallyConscious(x)) -> HasSolarPanelsInHome(x))", "all x.(EnvironmentallyConscious(x) -> SolarPanelsInHome(x))", "all x y.((Person(x) & EnvironmentallyConscious(x)) -> HasSolarPanelsInHome(x,y))", "all x.(EcologicallyConscious(x) -> HasSolarPanelsInHomes(x))", "all x.(EnvironmentallyConscious(x) -> HasSolarPanelsInHomes(x))", "all x.((Person(x) & EnvironmentallyConscious(x)) -> SolarPanelsInHomes(x))", "all x.(EnvironmentallyConscious(x) -> SolarPanelsInHomes(x))"]}
{"id": "folio_train_576", "nl": "If people get a lot of daily mail delivered, then they are very involved with their neighborhood.", "fol": "all x.(ReceivesDailyMail(x) -> InvolvedWithNeighborhood(x))", "prediction": ["all x.((Person(x) & LotsOfDailyMail(x)) -> VeryInvolvedWithNeighborhood(x))", "all x.((Person(x) & GetsDailyMail(x)) -> VeryInvolvedWithNeighborhood(x))", "all x y.((Person(x) & DailyMail(y) & Delivered(x,y)) -> VeryInvolvedWithNeighborhood(x))", "all x.((Person(x) & GetsLotOfDailyMail(x)) -> VeryInvolvedWithNeighborhood(x))", "all x.((Person(x) & LotsOfDailyMail(x)) -> VeryInvolvedWithNeighborhood(x))", "all x.((People(x) & LotsOfDailyMail(x)) -> VeryInvolvedWithNeighborhood(x))", "all x y z.((Person(x) & DailyMail(y) & Neighborhood(z) & LotsDelivered(x,y) & VeryInvolved(x,z)) -> VeryInvolved(x,z))", "all x y.((Person(x) & DailyMail(y) & Delivered(x,y)) -> VeryInvolvedWithNeighborhood(x))", "all x.((People(x) & GetsDailyMail(x)) -> VeryInvolvedWithNeighborhood(x))", "all x.((Person(x) & DailyMail(x) & Delivered(x)) -> VeryInvolvedWithNeighborhood(x))", "all x.(DailyMail(x) -> VeryInvolvedWithNeighborhood(x))", "all x y.((Person(x) & DailyMail(y) & Delivered(x,y)) -> VeryInvolvedWithNeighborhood(x))", "all x y.((Person(x) & DailyMail(y) & Receives(x,y)) -> VeryInvolvedWithNeighborhood(x))", "all x.((Person(x) & LotsOfDailyMail(x)) -> VeryInvolvedWithNeighborhood(x))", "all x y.((Person(x) & DailyMail(y) & Delivered(x,y)) -> VeryInvolvedInNeighborhood(x))", "exists x.(DailyMail(x) & Delivered(x))"]}
{"id": "folio_train_577", "nl": "If people have solar panels in their homes, then they save a lot of money.", "fol": "all x.(HasSolarPanels(x) -> SavesMoney(x))", "prediction": ["all x.((Person(x) & SolarPanelsInHome(x)) -> SavesMore(x))", "all x.((Person(x) & HasSolarPanelsInHome(x)) -> SavesMore(x))", "all x.(SolarPanelsInHome(x) -> SavesMore(x))", "all x y.((Person(x) & SolarPanel(y)) -> SavesMore(x,y))", "all x y.((Person(x) & SolarPanelsInHome(x,y)) -> SavesMore(x,y))", "all x y z.((Person(x) & SolarPanel(y) & Home(z) & InHome(x,y,z)) -> SavesMore(x,y))", "all x.(SolarPanelsInHome(x) -> SavesMoreMoney(x))", "all x.((Person(x) & SolarPanelsInHome(x)) -> SavesMore(x))", "all x y.((Person(x) & SolarPanel(y) & InHome(x,y)) -> SavesMore(x))", "all x.((Person(x) & HasSolarPanelsInHome(x)) -> SavesLotOfMoney(x))", "all x.(SolarPanelsInHome(x) -> SavesLotOfMoney(x))", "exists x.(SolarPanel(x) & InHome(x) & InHome(x) & SavesMore(x))", "all x y.((Person(x) & SolarPanel(y) & InHome(x,y)) -> SavesMore(x,y))", "all x.((Person(x) & SolarPanelsInHome(x)) -> SavesLotOfMoney(x))", "all x.(SolarPanelsInHome(x) -> SavesMoreMoney(x))", "all x y.((Person(x) & SolarPanelsInHome(y)) -> SavesMore(x,y))"]}
{"id": "folio_train_578", "nl": "If Marcy either gets a lot of mail and is very involved with her neighborhood or if she does not order a lot of Amazon packages nor is very involved with her neighborhood, then Marcy does not both get a lot of daily mail and order a lot of Amazon packages. ", "fol": "(-((ReceivesDailyMail(Marcy) & -InvolvedWithNeighborhood(Marcy)) | (-ReceivesDailyMail(Marcy) & InvolvedWithNeighborhood(Marcy))) -> (-ReceivesDailyMail(Marcy) | -OrdersAmazonPackages(Marcy)))", "prediction": ["all x.((Marcy(x) & ((GetsLotOfMail(x) & VeryInvolvedWithNeighborhood(x)) | (-OrdersLotOfAmazonPackages(x) & VeryInvolvedWithNeighborhood(x)))) -> -(GetsLotOfDailyMail(x) & OrdersLotOfAmazonPackages(x))))", "all x y.((Marcy(x) & ((GetsLotOfMail(x) & VeryInvolvedWithNeighborhood(x)) | (-OrdersLotOfAmazonPackages(x) & VeryInvolvedWithNeighborhood(x)))) -> -(GetsLotOfDailyMail(x) & OrdersLotOfAmazonPackages(x))))", "(all x.((Marcy(x) & LotsOfMail(x) & VeryInvolvedWithNeighborhood(x)) | (-(Marcy(x) & LotsOfDailyMail(x) & VeryInvolvedWithNeighborhood(x)))))", "all x.((Marcy(x) & (GetsLotOfMail(x) & VeryInvolvedWithNeighborhood(x) | -OrdersLotOfAmazonPackages(x))) -> -(GetsLotOfDailyMail(x) & OrdersLotOfAmazonPackages(x))))", "((Marcy) & (LotOfMail(Marcy) | VeryInvolvedWithNeighborhood(Marcy))) | (-LotOfDailyMail(Marcy) & VeryInvolvedWithNeighborhood(Marcy))))", "all x.((Marcy(x) & (LotOfMail(x) & VeryInvolvedWithNeighborhood(x) | -LotOfAmazonPackages(x))) -> -(LotOfDailyMail(x) & LotsOfAmazonPackages(x))))", "all x.((Marcy(x) & ((LotOfMail(x) & VeryInvolvedWithNeighborhood(x)) | (-LotOfAmazonPackages(x) & VeryInvolvedWithNeighborhood(x))))) -> -(LotOfDailyMail(x) & LotsOfAmazonPackages(x))))", "all x.((Marcy(x) & ((GetsLotOfMail(x) & VeryInvolvedWithNeighborhood(x)) | (-OrdersLotOfAmazonPackages(x) & VeryInvolvedWithNeighborhood(x)))))", "(all x.((Marcy(x) & -(GetsLotOfMail(x) & VeryInvolvedWithNeighborhood(x)) | -(GetsLotOfDailyMail(x) & VeryInvolvedWithNeighborhood(x)) | (-(GetsLotOfDailyMail(x) & OrdersLotOfAmazonPackages(x)) | OrdersLotAmamamPackpackages(x)))))", "all x y.((Marcy(x) & ((GetsLotOfMail(x) & VeryInvolvedWithNeighborhood(x)) | (-OrdersLotOfAmazonPackages(x) & VeryInvolvedWithNeighborhood(x)))) -> -(GetsLotOfDailyMail(x) & OrdersLotOfAmazonPackages(x))))", "all x y.((Marcy(x) & ((LotOfMail(x) & VeryInvolvedWithNeighborhood(x)) | (-LotOfAmazonPackages(y) & VeryInvolvedWithNeighborhood(y)))) -> (-LotOfDailyMail(x) & -OrderLotOfAmazonPackages(x)))", "all x y.((Marcy(x) & -(LotOfMail(x) & VeryInvolvedWithNeighborhood(x) | -LotOfAmazonPackages(x))) -> -(LotOfDailyMail(x) & LotsOfAmazonPackages(y)))", "(all x.((Marcy(x) & LotsOfMail(x) & VeryInvolvedWithNeighborhood(x)) | (-(Marcy(x) & LotsOfDailyMail(x) & VeryInvolvedWithNeighborhood(x)))))", "all x.((Marcy(x) & (GetsLotOfMail(x) & VeryInvolvedWithNeighborhood(x) | -OrdersLotOfAmazonPackages(x))) -> (-GetsLotOfDailyMail(x) & OrdersLotOfAmazonPackages(x)))", "((Marcy) & (LotOfMail(Marcy) | VeryInvolvedWithNeighborhood(Marcy))) | (-LotOfDailyMail(Marcy) & VeryInvolvedWithNeighborhood(Marcy))))", "all x.((Marcy(x) & (LotOfMail(x) | VeryInvolvedWithNeighborhood(x))) | (-LotOfDailyMail(x) & VeryInvolvedWithNeighborhood(x))))"]}
{"id": "folio_train_579", "nl": "Marcy either orders a lot of Amazon packages or saves a lot of money.", "fol": "(OrdersAmazonPackages(Marcy) | SavesMoney(Marcy))", "prediction": ["all x.(Marcy(x) -> (OrdersLotsOfAmazonPackages(x) | SavesLotsOfMoney(x)))", "(OrdersLotsOfAmazonPackages(Marcy) | SavesLotsOfMoney(Marcy)))", "all x y.((Marcy(x) & AmazonPackage(y)) -> (Orders(x,y) | Saves(x,y)))", "all x.(Marcy(x) -> (Orders(x,Amazon) | Saves(x,Amazon)))", "(OrdersAmazonPackages(Marcy) | SavesMoney(Marcy))", "(OrdersLotsOfAmazonPackages(Marcy) | SavesLotsOfMoney(Marcy))", "all x.(Marcy(x) -> (OrdersLotsOfAmazonPackages(x) | SavesLotsOfMoney(x)))", "(OrdersAmazonPackages(Marcy,x) | SavesMoney(Marcy,x)))", "all x y.((Marcy(x) & AmazonPackage(y)) -> (Orders(x,y) | Saves(x,y)))", "(OrdersLotsOfAmazonPackages(Marcy) | SavesLotsOfMoney(Marcy))", "all x.(Marcy(x) -> (Orders(x,Amazon) | Saves(x,Amazon)))", "exists x.(Marcy(x) & (Orders(x,AmazonPackages) | Saves(x,AmazonPackages))))", "all x y.((Marcy(x) & AmazonPackage(y)) -> (Orders(x,y) | Saves(x,y)))", "exists x.(Marcy(x) & (OrdersLotsOfAmazonPackages(x) | SavesLotsOfMoney(x)))", "(OrdersLotsOfAmazonPackages(Marcy) | SavesLotsOfMoney(Marcy))", "exists x.(Marcy(x) & (Orders(x,AmazonPackages) | Saves(x,AmazonPackages)))"]}
{"id": "folio_train_580", "nl": "If Marcy is not a person who orders a lot of Amazon packages and is very environmentally conscious, then Taylor is not someone who saves a lot of money and is environmentally conscious.", "fol": "((-OrdersAmazonPackages(Marcy) & IsEnvironmentallyConscious(Marcy)) -> (-SavesMoney(Taylor) | -IsEnvironmentallyConscious(Taylor)))", "prediction": ["all x.((Person(x) & -OrdersLotsOfAmazonPackages(x) & EnvironmentallyConscious(x)) -> -SaversLotsOfMoney(x) & EnvironmentallyConscious(x))", "all x.((Marcy(x) & -OrdersLotsOfAmazonPackages(x) & EnvironmentallyConscious(x)) -> -(SaversLotsOfMoney(x) & EnvironmentallyConscious(x)))", "all x y.((Marcy(x) & Taylor(y)) -> (-OrdersLotsOfAmazonPackages(x) & EnvironmentallyConscious(y) & -SaversLotsOfMoney(y) & EnvironmentallyConscious(y)))", "(-(Marcy(Marcy) & OrdersLotsOfAmazonPackages(Marcy) & EnvironmentallyConscious(Marcy)) -> Taylor & -(Marcy(Marcy) & SavesLotsOfMoney(Marcy) & EnvironmentallyConscious(Marcy))))", "(-(MarcyOrdersLotsOfAmazonPackages(Marcy) & EnvironmentallyConscious(Marcy)) -> Taylor -(MarcyOrdersLotsOfAmazonPackages(Marcy) & EnvironmentallyConscious(Marcy)))", "all x.((Person(x) & -OrdersLotsOfAmazonPackages(x) & EnvironmentallyConscious(x)) -> -(SaversLotsOfMoney(x) & EnvironmentallyConscious(x)))", "all x.((Marcy(x) & -OrdersAmazonPackages(x) & EnvironmentallyConscious(x)) -> -(SaversLotsOfMoney(x) & EnvironmentallyConscious(x)))", "all x.((Person(x) & -OrdersAmazonPackages(x) & EnvironmentallyConscious(x)) -> -SaversAmazonMoney(x) & EnvironmentallyConscious(x))", "(-(Marcy(Marcy) & OrdersLotsOfAmazonPackages(Marcy) & EnvironmentallyConscious(Marcy))) -> -(Marcy(Marcy) & SavesLotsOfMoney(Marcy) & EnvironmentallyConscious(Taylor)))", "all x y.((Marcy(x) & Taylor(y)) -> (-OrdersLotsOfAmazonPackages(x) & EnvironmentallyConscious(x) & -SavesLotsOfMoney(y) & EnvironmentallyConscious(y)))", "(-(Person(Marcy) & OrdersLotsOfAmazonPackages(Marcy) & EnvironmentallyConscious(Marcy)) -> Taylor & -(Person(Marcy) & SavesLotsOfMoney(Marcy) & EnvironmentallyConscious(Marcy)))", "all x.((Marcy(x) & -OrdersLotsOfAmazonPackages(x) & EnvironmentallyConscious(x)) -> -(SaversLotsOfMoney(x) & EnvironmentallyConscious(x)))", "all x y.((Marcy(x) & Taylor(y)) -> (-OrdersAmazonPackages(x) & EnvironmentallyConscious(x) & -SaversAmazonMoney(y) & EnvironmentallyConscious(y)))", "all x.((Person(x) & -OrdersLotsOfAmazonPackages(x) & EnvironmentallyConscious(x)) -> -SaversLotsOfMoney(x) & EnvironmentallyConscious(x))", "(all x.(Marcy(x) -> (-OrdersAmazonPackages(x) & EnvironmentallyConscious(x))))", "all x.((Marcy(x) & -OrdersLotsOfAmazonPackages(x) & EnvironmentallyConscious(x)) -> -(SaversLotsOfMoney(x) & EnvironmentallyConscious(x)))"]}
{"id": "folio_train_581", "nl": "Indonesia is a country.", "fol": "IsCountry(Indonesia)", "prediction": ["all x.(Indonesia(x) -> Country(x))", "(Country(Indonesia) & Country(Indonesia))", "all x.(Indonesia(x) -> Country(x))", "Indonesia is a country.", "All x y.((Indonesia(x) & Country(y)) -> Country(x))", "(Indonesia) & Country(Indonesia))", "(Country(Indonesia) & Country(Indonesia))", "all x.(Indonesia(x) -> Country(x))", "Indonesia is a country.", "all x.(Indonesian(x) -> Country(x))", "all x.(Indonesia(x) -> Country(x))", "all x.(Indonesian(x) -> Country(x))", "all x.(Indonesia(x) -> Country(x))", "all x.(Indonesian(x) -> Country(x))", "all x.(Indonesia(x) -> Country(x))", "all x.(Indonesia(x) -> Country(x))"]}
{"id": "folio_train_582", "nl": "In Indonesia, the prosecutor only personally investigates cases of some special crimes.", "fol": "exists x y.((IsCountry(Indonesia) & IsProsecutor(x) & IsCrime(y)) -> InvestigatesPersonally(x,y))", "prediction": ["all x y.((Prosecutor(x) & Indonesia(y)) -> OnlyInspects(x,y))", "all x y z.((Prosecutor(x) & Indonesia(y) & SpecialCrime(z)) -> OnlyInspects(x,y,z))", "all x.(Indonesia(x) -> (Prosecutor(x) & OnlyInspectsSpecialCrimes(x)))", "all x y.((Prosecutor(x) & InIndonesia(y)) -> OnlyInspects(x,y))", "(Indonesia,Procuror(indonesia) & OnlyInspectsSpecialCrimes(indonesia))", "all x y z.((Prosecutor(x) & Indonesian(y) & SpecialCrime(z)) -> OnlyInspects(x,y,z))", "all x.(IndonesianProsecutor(x) -> (InvestigatesSpecialCrimes(x) & OnlyIndonesianProsecutor(x)))", "(Indonesia,PersonallyInvestigatesCrimes(Prosecutor) & -Indonesian(Prosecutor,SpecialCrimes))", "all x.(Indonesia(x) -> (Prosecutor(x) & InvestigatesSpecialCrimes(x)))", "all x y z.((IndonesianProsecutor(x) & SpecialCrime(y) & SpecialCrime(z) & Investigates(x,y,z)) -> OnlyIndonesianProsecutor(x))", "all x y.((IndonesianProsecutor(x) & SpecialCrime(y)) -> OnlyInspects(x,y))", "exists x.(Prosecutor(x) & InIndonesia(x) & OnlyInspects(x,specialCrimes))", "all x y.((Prosecutor(x) & Indonesia(y)) -> OnlyInspects(x,y))", "all x.(Indonesia(x) -> (Procuror(x) & InvestigatesSpecialCrimes(x)))", "exists x.(Prosecutor(x) & OnlyInspectsSpecialCrimes(x))", "all x y.((IndonesianProsecutor(x) & SpecialCrime(y)) -> OnlyInvestigates(x,y))"]}
{"id": "folio_train_583", "nl": "Corruption is a type of crime.", "fol": "IsCrime(Corruption)", "prediction": ["all x.(Corruption(x) -> Crime(x))", "all x.(Corruption(x) -> Crime(x))", "(Corruption(corruption) -> TypeOfCrime(corruption))", "all x y.((Corruption(x) & Crime(y)) -> TypeOf(x,y))", "all x y.(Corruption(x) -> (Crime(y) & TypeOf(x,y)))", "all x.(Corruption(x) -> Crime(x))", "all x y.(Corruption(x) -> (Crime(y) & TypeOf(x,y)))", "all x.(Corruption(x) -> Crime(x))", "all x.(Corruption(x) -> Crime(x))", "all x.(Corruption(x) -> Crime(x))", "all x y.(Corruption(x) -> Crime(y))", "all x.(Corruption(x) -> Crime(x))", "all x.(Corruption(x) -> Crime(x))", "exists x.(Corruption(x) & Crime(x) & -Corruption(x))", "exists x.(Corruption(x) & TypeOfCrime(x))", "all x.(Corruption(x) -> Crime(x))"]}
{"id": "folio_train_584", "nl": "Once the police complete investigations of a crime, they hand the evidence to the prosecutor. ", "fol": "all x y.(((IsCrime(y) & CompletesInvestigation(y) & IsProsecutor(x)) -> IsEvidence(y)) & HandsEvidenceToProsecutor(x,y))", "prediction": ["all x y.((Police(x) & Crime(y) & CompletesInvestigations(x,y)) -> HandsEvidenceToProsecutor(x,y))", "all x y z.((Police(x) & Crime(y) & Prosecutor(z) & CompletesInvestigations(x,y)) -> HandsEvidence(x,z))", "all x.((Police(x) & CompletesInvestigationsOfCrime(x)) -> HandsEvidenceToProsecutor(x))", "all x y.((Police(x) & Crime(y) & CompletesInvestigations(x,y)) -> HandsEvidenceToProsecutor(x))", "all x y.((Police(x) & Crime(y) & CompletesInquests(x,y)) -> HandsEvidenceToProsecutor(x,y))", "all x y z.((Police(x) & Crime(y) & Prosecutor(z) & CompletesInvestigations(x,y)) -> HandsEvidence(x,z))", "all x.((Police(x) & CompletesInquestsOfCrime(x)) -> HandsEvidenceToProsecutor(x))", "all x.((Police(x) & CompletesInvestigationsOfCrime(x)) -> HandsEvidenceToProsecutor(x))", "all x.((PoliceCompletesInvestigationsOfCrime(x) & Prosecutor(x)) -> HandsEvidenceTo(x,y))", "all x.((Police(x) & CompletesInvestigations(x)) -> HandsEvidenceToProsecutor(x))", "all x y z.((Police(x) & Crime(y) & Prosecutor(z) & CompletesInvestigations(x,y)) -> HandsEvidenceTo(x,z))", "all x y.((Police(x) & Crime(y) & CompletesInvestigations(x,y)) -> HandsEvidenceToProsecutor(x,y))", "all x y z.((Police(x) & Crime(y) & Prosecution(z)) -> CompletesInvestigations(x,y,z))", "all x y.((Police(x) & Crime(y)) -> CompletesInvestigationsAndHandsEvidence(x,y))", "all x.((Police(x) & CompletesInquestsOfCrime(x)) -> HandsEvidenceToProsecutor(x))", "all x y.((Police(x) & Criminal(y)) -> CompletesInvestigationsAndHandsEvidence(x,y))"]}
{"id": "folio_train_585", "nl": "Evidence can be either satisfactory or unsatisfactory.", "fol": "all x.(IsCrime(x) & IsEvidence(x) & ((IsSatisfactory(x) & -IsUnsatisfactory(x)) | (-IsSatisfactory(x) & IsUnsatisfactory(x))))", "prediction": ["all x.(Evidence(x) -> (Supplyable(x) | Unsatisfactory(x)))", "(SatisfyingEvidence(e) | UnsatisfactoryEvidence(e)))", "all x.(Evidence(x) -> (Satisfying(x) | Unsatisfactory(x)))", "all x y.((Evidence(x) & Satisfactory(y)) -> Unsatisfactory(x,y))", "all x y.((Evidence(x) & (Satisfying(y) | Unsatisfactory(y))) -> (Satisfying(y) | Unsatisfactory(y)))", "all x y.((Evidence(x) & Satisfactory(y)) -> (Satisfactory(x) | Unsatisfactory(y)))", "all x.(Evidence(x) -> (Supplyable(x) | Unsatisfactory(x)))", "all x.(Evidence(x) -> (Satisfactory(x) | Unsatisfactory(x)))", "all x.(Evidence(x) -> (Sagradable(x) | Unsatisfactory(x)))", "all x.(Evidence(x) -> (Supplying(x) | Unsatisfactory(x)))", "all x.(Evidence(x) -> (Saluting(x) | Unsatisfactory(x)))", "all x.(Evidence(x) -> (Satisfying(x) | Unsatisfactory(x)))", "exists x.(Evidence(x) & Satisfactory(x))", "exists x.(Evidence(x) & Satisfying(x) & -Satisfying(x))", "exists x.(Evidence(x) & Satisfactory(x))", "exists x.(Evidence(x) & Satisfactory(x))"]}
{"id": "folio_train_586", "nl": "If the police hand the evidence to the prosecutor and the evidence is satisfactory, the prosecutor will prosecute the offender in an appropriate court.", "fol": "all x y.((IsEvidence(y) & HandsEvidenceToProsecutor(x,y) & IsSatisfactory(y)) -> ProsecutesOffenderInCourt(x,y))", "prediction": ["all x y.((Police(x) & Prosecutor(y) & HandsEvidence(x,y) & SatisfactoryEvidence(x)) -> ProsecutionInAppropriateCourt(y))", "all x y z.((Police(x) & Prosecutor(y) & Offender(z) & HandsEvidenceTo(x,y) & SatisfyingEvidence(y,z)) -> ProsecutionInAppropriateCourt(y,z))", "all x.((PoliceHandsEvidence(x) & SufficientEvidence(x)) -> ProsecutionInAppropriateCourt(x))", "all x y.((Police(x) & Prosecutor(y) & HandsEvidenceTo(x,y) & SatisfactoryEvidence(x,y)) -> ProsecutionInAppropriateCourt(y))", "(all x y.((Police(x) & Prosecutor(y) & HandsEvidenceTo(x,y)) -> SufficientEvidence(y)))", "all x y z.((Police(x) & Prosecutor(y) & Offender(z) & HandsEvidenceTo(x,y) & SatisfactoryEvidence(y)) -> ProsecutionInAppropriateCourt(y,z))", "(all x.((PoliceHandsEvidence(x) & SatisfactoryEvidence(x)) -> ProsecutionInAppropriateCourt(x)))", "all x y.((Police(x) & Prosecutor(y) & HandsEvidence(x,y) & SatisfyingEvidence(x,y)) -> Prosecution(y,x))", "all x.((PoliceHandsEvidenceToProsecution(x) & SatisfactoryEvidence(x)) -> ProsecutionInAppropriateCourt(x))", "all x.((PoliceHandsEvidence(x) & SufficientEvidence(x)) -> Prosecution(x))", "all x y z.((Police(x) & Prosecutor(y) & Evidence(z) & HandsTo(x,z) & Satisfactory(z)) -> Prosecution(y,y))", "all x y.((Police(x) & Prosecutor(y) & HandsEvidenceTo(x,y) & SatisfyingEvidence(y)) -> ProsecutionInAppropriateCourt(y))", "all x y z.((Police(x) & Prosecution(y) & Offender(z) & HandsEvidenceTo(x,y) & SatisfyingEvidence(y,z)) -> ProsecutionInAppropriateCourt(y,z))", "all x.((PoliceHandsEvidence(x) & SatisfactoryEvidence(x)) -> ProsecutionInAppropriateCourt(x))", "all x y.((Police(x) & Prosecutor(y) & HandsEvidenceTo(x,y) & SatisfactoryEvidence(x,y)) -> ProsecutesInAppropriateCourt(y,x))", "all x.((PoliceHandsEvidenceToProsecution(x) & SatisfyingEvidence(x)) -> ProsecutionInAppropriateCourt(x))"]}
{"id": "folio_train_587", "nl": "When the police complete investigations, the prosecutor will prosecute the offender at an appropriate court.", "fol": "all x y.((CompletesInvestigation(y) & IsProsecutor(x)) -> ProsecutesOffenderInCourt(x,y))", "prediction": ["all x y.((Police(x) & Offender(y) & CompletesInvestigations(x,y)) -> ProsecutionAtAppropriateCourt(x,y))", "all x y z.((Police(x) & Investigation(y) & Offender(z) & Completes(x,y)) -> ProsecutesAtAppropriateCourt(x,z))", "all x.((PoliceCompletesInvestigations(x) & Prosecutor(x)) -> ProsecutionAtAppropriateCourt(x))", "all x y.((Police(x) & Investigates(x,y)) -> ProsecutesAtAppropriateCourt(x,y))", "all x y z.((Police(x) & Investigates(x,y) & Offender(z)) -> ProsecutionAtAppropriateCourt(x,z))", "all x y.((Police(x) & PoliceCompletesInvestigations(x) & Offender(y)) -> ProsecutesAtAppropriateCourt(x,y))", "(CompletesInvestigations(police) & ProsecutorProsecutesOffender(prosecutor,appropriateCourt))", "all x y.((PoliceCompletesInvestigations(x) & Offender(y) & AppropriateCourt(y)) -> Prosecution(x,y))", "all x y z.((Police(x) & Investigation(y) & Offender(z) & Completes(x,y)) -> ProsecutionAtAppropriateCourt(x,z))", "all x.((PoliceCompletesInvestigations(x) & Prosecutor(x)) -> ProsecutionAtAppropriateCourt(x))", "all x y z.((Police(x) & Investigates(x,y) & Offender(z) & Completes(x,z)) -> ProsecutionAtAppropriateCourt(x,z))", "all x.((PoliceCompletesInvestigations(x) & Prosecutor(x)) -> ProsecutesAtAppropriateCourt(x))", "all x y.((Police(x) & Offender(y) & CompletesInvestigations(x,y)) -> ProsecutionAtAppropriateCourt(x,y))", "all x y z.((Police(x) & Investigation(y) & Offender(z) & Completes(x,y)) -> ProsecutesAtAppropriateCourt(x,z))", "all x.((PoliceCompletesInvestigations(x) & Prosecutor(x)) -> ProsecutionAtAppropriateCourt(x))", "all x.((PoliceCompletesInvestigations(x) & ProsecutorProsecution(x)) -> AppropriateCourt(x))"]}
{"id": "folio_train_588", "nl": "In Indonesia, the prosecutor personally investigates cases of corruption.", "fol": "exists x.(IsCountry(Indonesia) & IsProsecutor(x) & InvestigatesPersonally(x,Corruption))", "prediction": ["all x y.((Prosecutor(x) & Indonesia(y)) -> PersonallyInvestigates(x,y))", "all x y z.((Prosecutor(x) & Corruption(y) & Indonesia(z)) -> Investigates(x,y,z))", "all x y.((IndonesianProsecutor(x) & Corruption(y)) -> PersonallyInvestigates(x,y))", "all x.(Indonesia(x) -> PersonalProsecutorIntroduction(x))", "all x y.((Prosecutor(x) & Indonesia(y)) -> InvestigatesCorruption(x,y))", "(Indonesia, prosecutor personallyinvestigatesCorruption(Prosecutor))", "all x y z.((Prosecutor(x) & Corruption(y) & Indonesia(z)) -> PersonallyInvestigates(x,y,z))", "all x y z.((IndonesianProsecutor(x) & Corruption(y) & Case(z)) -> PersonallyInvestigates(x,y,z))", "all x.(IndonesianProsecutor(x) -> PersonallyInvestigatesCorruption(x))", "all x.((Prosecutor(x) & InIndonesia(x)) -> PersonallyInvestigatesCorruption(x))", "(IndonesianProsecutorInvestigatesCorruption(indonesia) & IndonesianCorruption(indonesia))", "(Indonesia, where prosecutor is located, personallyinvestigatesCorruption(Prosecutor,CorruptionCase))", "all x y.((Prosecutor(x) & InIndonesia(y)) -> PersonallyInvestigatesCorruption(x,y))", "exists x.(Prosecutor(x) & InIndonesia(x) & PersonallyInvestigatesCorruption(x))", "all x.(Indonesia(x) -> PersonalProsecutorInspectsCorruption(x))", "all x y.((IndonesianProsecutor(x) & Case(y)) -> PersonallyInvestigates(x,y))"]}
{"id": "folio_train_589", "nl": "When the police complete investigations, the prosecutor investigates in personally.", "fol": "all x.(CompletesInvestigation(x) -> ProsecutorInves(x))", "prediction": ["all x y.((Police(x) & Prosecutor(y)) -> CompletesInvestigations(x,y))", "all x y z.((Police(x) & Prosecutor(y) & Investigation(z) & Completes(x,z)) -> InvestigatesInPersonal(y,z))", "all x.((PoliceCompletesInvestigations(x) & ProsecutorInvestigatesIn(x)) -> Personly(x))", "all x y.((Police(x) & Prosecutor(y)) -> CompletesInvestigations(x,y))", "all x y.((Police(x) & Prosecutor(y) & CompletesInvestigations(x)) -> InvestigatesInPersonal(y))", "all x.((PoliceCompletesInvestigations(x) & Prosecutor(x)) -> InvestigatesInPersonal(x))", "all x y z.((Police(x) & Prosecutor(y) & Investigation(z) & Completes(x,z)) -> InvestigatesInPersonal(y,z))", "(all x.((Police(x) & CompletesInvestigations(x)) -> InvestigatesInPersonal(x))", "all x.((PoliceCompletesInvestigations(x) & ProsecutorInvestigatesInPersonal(x)) -> CompletesInvestigations(x))", "(all x.(CompletesPoliceInsurances(x) -> InvestigatesInPersonal(x)))", "all x y z.((Police(x) & Investigation(y) & Prosecutor(z)) -> Completes(x,y))", "all x.((PoliceCompletesInquests(x) & ProsecutorInvestigatesIn(x)) -> Personly(x))", "all x y.((Police(x) & Prosecutor(y) & CompletesInvestigations(x,y)) -> InvestigatesInPersonal(y,x))", "all x y.((Police(x) & Prosecutor(y)) -> CompletesInvestigations(x,y))", "all x.((PoliceCompletesInvestigations(x) & Prosecutor(x)) -> InvestigatesInPersonal(x))", "all x y.((Police(x) & Prosecutor(y) & CompletesInquests(x,y)) -> InvestigatesInPersonal(y,x))"]}
{"id": "folio_train_590", "nl": "No watch that is battery-powered is automatic.", "fol": "all x.(IsBatteryPoweredWatch(x) -> -IsAutomaticWatch(x))", "prediction": ["all x.((Watch(x) & BatteryPowered(x)) -> Automatic(x))", "-exists x.(Watch(x) & BatteryPowered(x))", "all x.((Watch(x) & BatteryPowered(x)) -> Automatic(x))", "-exists x.(Watch(x) & BatteryPowered(x))", "-(BatteryPoweredWatch(x) & -Automatic(x))", "-((Watch(x) & BatteryPowered(x)) -> Automatic(x))", "all x.((Watch(x) & BatteryPowered(x)) -> Automatic(x))", "-exists x.(Watch(x) & BatteryPowered(x))", "all x.((Watch(x) & BatteryPowered(x)) -> Automatic(x))", "-exists x.(Watch(x) & BatteryPowered(x))", "all x.((Watch(x) & BatteryPowered(x)) -> Automatic(x))", "-exists x.(Watch(x) & BatteryPowered(x))", "-exists x.(Watch(x) & BatteryPowered(x) & Automatic(x))", "all x.((Watch(x) & BatteryPowered(x)) -> Automated(x))", "all x.((Watch(x) & BatteryPowered(x)) -> Automatic(x))", "all x.((Watch(x) & BatteryPowered(x)) -> Automatic(x))"]}
{"id": "folio_train_591", "nl": "All digital watches are battery-powered.", "fol": "all x.(IsDigitalWatch(x) -> IsBatteryPoweredWatch(x))", "prediction": ["all x.(DigitalWatch(x) -> BatteryPowered(x))", "all x.(DigitalWatch(x) -> BatteryPowered(x))", "(all x.(DigitalWatch(x) -> BatteryPowered(x)))", "all x.(DigitalWatch(x) -> BatteryPowered(x))", "(all x.(DigitalWatch(x) -> BatteryPowered(x)))", "all x.(DigitalWatch(x) -> BatteryPowered(x))", "all x y.(DigitalWatch(x) -> BatteryPowered(x))", "all x.(DigitalWave(x) -> BatteryPowered(x))", "all x.(DigitalWatch(x) -> BatteryPowered(x))", "all x.(DigitalWatch(x) -> BatteryPowered(x))", "all x.(DigitalWave(x) -> BatteryPowered(x))", "all x.(DigitalWatch(x) -> BatteryPowered(x))", "all x.(DigitalWatch(x) -> BatteryPowered(x))", "all x.(DigitalWatch(x) -> BatteryPowered(x))", "all x.(DigitalWatch(x) -> Batteried(x))", "all x.(DigitalWatch(x) -> BatteryPowered(x))"]}
{"id": "folio_train_592", "nl": "Some mechanical watches are automatic.", "fol": "exists x.(IsMechanicalWatch(x) & IsAutomaticWatch(x))", "prediction": ["exists x.(MechanicalWatch(x) & Automatic(x))", "exists x.(MechanicalWatch(x) & Automatic(x))", "exists x.(MechanicalWatch(x) & Automatic(x))", "exists x.(MechanicalWatch(x) & Automatic(x))", "exists x.(MechanicalWatch(x) & Automatic(x))", "exists x.(MechanicalWatch(x) & Automatic(x))", "exists x y.(MechanicalWatch(x) & Automatic(y))", "exists x.(MachinedWatch(x) & Automatic(x))", "exists x.(MechanicalWatch(x) & Automatic(x))", "exists x.(MechanicalWatch(x) & Automatic(x))", "exists x.(MachinematicWatch(x) & Automatic(x))", "exists x.(MechanicalWatch(x) & Automated(x))", "exists x.(MechanicalWave(x) & Automatic(x))", "exists x.(MechanicalWatch(x) & Automatic(x))", "exists x.(MechanicalWatch(x) & Automated(x))", "exists x.(MechanicalWatch(x) & Automatic(x))"]}
{"id": "folio_train_593", "nl": "All smart watches are digital.", "fol": "all x.(IsSmartWatch(x) -> IsDigitalWatch(x))", "prediction": ["all x.(SmartWatch(x) -> Digital(x))", "all x.(SmartWatch(x) -> Digital(x))", "(all x.(SmartWatch(x) -> Digital(x)))", "all x.(SmartWatch(x) -> Digital(x))", "(all x.(SmartWatch(x) -> Digital(x))", "all x.(SmartWatch(x) -> Digital(x))", "all x.(SmartWatch(x) -> Digital(x))", "all x y.(SmartWatch(x) -> Digital(x))", "all x.(SmartWatch(x) -> Digital(x))", "all x.(SmartWatch(x) -> Digital(x))", "all x.(SmartWatch(x) -> Digital(x))", "all x.(SmartWatch(x) -> Digital(x))", "all x.(SmartWatch(x) -> Digital(x))", "all x.(SmartWatch(x) -> Digital(x))", "all x.(SmartWatch(x) -> Digital(x))", "all x.(SmartWatch(x) -> Digital(x))"]}
{"id": "folio_train_594", "nl": "Moonwatch is not a digital watch or an automatic.", "fol": "((-IsDigitalWatch(Moonwatch) & -IsAutomaticWatch(Moonwatch)) | (IsDigitalWatch(Moonwatch) & IsAutomaticWatch(Moonwatch)))", "prediction": ["all x.(Moonwatch(x) -> (-DigitalWatch(x) | AutomaticWatch(x)))", "-(DigitalWatch(Moonwatch) | AutomaticWatch(Moonwatch))", "all x.(Moonwatch(x) -> (-DigitalWatch(x) | AutomaticWatch(x)))", "all x.(Mountwatch(x) -> (-DigitalWatch(x) | AutomaticWatch(x)))", "(-DigitalWatch(Moonwatch) & -Automatic(Moonwatch))", "all x.(Moonwatch(x) -> (-DigitalWatch(x) & -Automatic(x)))", "(Mountwatch(Moonwatch) & -(DigitalWatch(Moonwatch) | AutomaticWatch(Moonwatch))))", "all x.(Moonwatch(x) -> (-DigitalWatch(x) | AutomaticWatch(x)))", "(-DigitalWatch(Moonwatch) & -AutomaticWatch(Moonwatch))", "-(DigitalWatch(Moonwatch) | AutomaticWatch(Moonwatch))", "(-DigitalWatch(moonwatch) & -Automatic(moonwatch))", "(-DigitalWatch(Moonwatch) | AutomaticWatch(Moonwatch)))", "all x.(Mountwatch(x) -> (-DigitalWatch(x) | AutomaticWatch(x)))", "-(DigitalWatch(Moonwatch) | Automatic(Moonwatch)))", "all x.(Moonwatch(x) -> (-DigitalWatch(x) | AutomaticWatch(x)))", "all x.(Mountwatch(x) -> (-DigitalWatch(x) | AutomaticWatch(x)))"]}
{"id": "folio_train_595", "nl": "Moonwatch is a mechanical watch.", "fol": "IsMechanicalWatch(Moonwatch)", "prediction": ["all x.(Moonwatch(x) -> MechanicalWatch(x))", "(MechanicalWatch(Moonwatch) & -MechanicalWatch(Moonwatch))", "all x.(Moonwatch(x) -> MechanicalWatch(x))", "all x.(Mountwatch(x) -> MechanicalWatch(x))", "All x y.((Moonwatch(x) & MechanicalWatch(y)) -> Has(x,y))", "(Mountwatch(Moonwatch) & Mechanical(Moonwatch))", "(MechanicalWatch(Moonwatch) & -MechanicalWatch(Moonwatch))", "all x.(Moonwatch(x) -> MechanicalWatch(x))", "all x.(Moonwatch(x) -> MechanicalWatch(x))", "(Mountwatch(Moonwatch) & Mechanical(Moonwatch))", "(Mountwatch(Moonwatch) & MechanicalWave(Moonwatch))", "all x.(Moonwatch(x) -> MechanicalWatch(x))", "all x.(Moonwatch(x) -> MechanicalWave(x))", "all x.(Mountwatch(x) -> MechanicalWatch(x))", "all x.(Moonwatch(x) -> MechanicalWatch(x))", "all x.(Moonwatch(x) -> MechanicalWatch(x))"]}
{"id": "folio_train_596", "nl": "Moonwatch is a smartwatch and a mechanical watch.", "fol": "(IsSmartWatch(Moonwatch) & IsMechanicalWatch(Moonwatch))", "prediction": ["all x.(Moonwatch(x) -> (Smartwatch(x) & MechanicalWatch(x)))", "(Smartwatch(Moonwatch) & MechanicalWatch(Moonwatch))", "(Smartwatch(Moonwatch) & MechanicalWatch(Moonwatch))", "all x.(Moonwatch(x) -> (Smartwatch(x) & MechanicalWatch(x)))", "all x y.((Moonwatch(x) & Smartwatch(y)) -> MechanicalWatch(x))", "all x.(Mountwatch(x) -> (Smartwatch(x) & MechanicalWatch(x)))", "(Smartwatch(Moonwatch) & MechanicalWatch(Moonwatch))", "all x.(Moonwatch(x) -> (Smartwatch(x) & MechanicalWatch(x)))", "(Smartwatch(Moonwatch) & MechanicalWatch(Moonwatch))", "all x y.((Moonwatch(x) & Smartwatch(y)) -> MechanicalWatch(x,y))", "(Smartwatch(Moonwatch) & MechanicalWatch(Moonwatch))", "all x.(Mountwatch(x) -> (Smartwatch(x) & MechanicalWatch(x)))", "all x.(Moonwatch(x) -> (Smartwatch(x) & MechanicalWatch(x)))", "all x.(Moonwatch(x) -> (Smartwatch(x) & MechanicalWatch(x)))", "exists x.(Moonwatch(x) & SmartWatch(x) & MechanicalWatch(x))", "all x.(Moonwatch(x) -> (Smartwatch(x) & MechanicalWatch(x)))"]}
{"id": "folio_train_597", "nl": "If Moonwatch is a smartwatch and a mechanical watch, then Moonwatch is not a mechanical watch.", "fol": "((IsSmartWatch(Moonwatch) & IsMechanicalWatch(Moonwatch)) -> -IsMechanicalWatch(Moonwatch))", "prediction": ["all x.((Smartwatch(x) & MechanicalWatch(x)) -> -MechanicalWatch(x))", "all x.((Moonwatch(x) & Smartwatch(x) & MechanicalWatch(x)) -> -MechanicalWatch(x))", "all x.((Smartwatch(x) & MechanicalWatch(x)) -> -MechanicalWatch(x))", "(all x.(Smartwatch(x) -> MechanicalWatch(x)))", "all x y.((Moonwatch(x) & Smartwatch(x) & MechanicalWatch(x)) -> -MechanicalWatch(y))", "all x.(Smartwatch(x) & MechanicalWatch(x)) -> -MechanicalWatch(x))", "all x.(Smartwatch(x) -> -MechanicalWatch(x))", "(all x.((Smartwatch(x) & MechanicalWatch(x)) -> -MechanicalWatch(x)))", "all x.((Smartwatch(x) & MechanicalWatch(x)) -> -MechanicalWatch(x))", "all x.((Moonwatch(x) & Smartwatch(x) & MechanicalWatch(x)) -> -MechanicalWatch(x))", "all x y.((Moonwatch(x) & Smartwatch(x) & MechanicalWatch(x)) -> -MechanicalWatch(y))", "all x.(Smartwatch(x) & MechanicalWatch(x)) -> -MechanicalWatch(x))", "all x.((Smartwatch(x) & MechanicalWatch(x)) -> -MechanicalWatch(x))", "exists x.(Smartwatch(x) & MechanicalWatch(x) & Moonwatch(x))", "all x.((Smartwatch(x) & MechanicalWatch(x)) -> -MachineableWatch(x))", "exists x.(Smartwatch(x) & MechanicalWatch(x) & Moonwatch(x))"]}
{"id": "folio_train_598", "nl": "If Moonwatch is a mechanical or battery-powered watch, then Moonwatch is not a smartwatch.", "fol": "((IsMechanicalWatch(Moonwatch) | IsBatteryPoweredWatch(Moonwatch)) -> -IsSmartWatch(Moonwatch))", "prediction": ["all x.((Mountwatch(x) & (Mechanical(x) | BatteryPowered(x))) -> -Smartwatch(x))", "all x.((Moonwatch(x) & (Mechanical(x) | BatteryPowered(x))) -> -Smartwatch(x))", "all x.((Mountwatch(x) & (Mechanical(x) | BatteryPowered(x))) -> -Smartwatch(x))", "(all x.((Moonwatch(x) & Mechanical(x)) | BatteryPowered(x)) -> -Smartwatch(x))", "all x.((Moonwatch(x) & (Mechanical(x) | BatteryPowered(x))) -> -Smartwatch(x))", "(all x.((Mountwatch(x) & Mechanical(x)) | BatteryPowered(x))) -> -Smartwatch(x))", "all x.(Mountwatch(x) -> ((MechanicalWatch(x) | BatteryPoweredWatch(x)) & -Smartwatch(x)))", "all x.((Mountwatch(x) & (MechanicalWatch(x) | BatteryPoweredWatch(x))) -> -Smartwatch(x))", "all x y.((Mountwatch(x) & (Mechanical(x) | BatteryPowered(x))) -> -Smartwatch(y))", "all x.((Mountwatch(x) & (Mechanical(x) | BatteryPowered(x))) -> -Smartwatch(x))", "all x.((Moonwatch(x) & (Mechanical(x) | BatteryPowered(x))) -> -Smartwatch(x))", "all x.(Mountwatch(x) -> -Smartwatch(x))", "all x y.((Moonwatch(x) & Mechanical(x) & -Smartwatch(y)) -> BatteryPowered(x))", "exists x.(Mountwatch(x) & (Mechanical(x) | BatteryPowered(x)))", "all x.((MonoWatch(x) & (Mechanical(x) | BatteryPowered(x))) -> -Smartwatch(x))", "all x.((Mountwatch(x) & (Mechanical(x) | BatteryPowered(x))) -> -Smartwatch(x))"]}
{"id": "folio_train_599", "nl": "If a person can distinguish the taste of different condiments, then he/she can also use different condiments to cook.", "fol": "(all x.((IsPerson(x) & CanDistinguishCondiments(x)) -> CanUseDifferentCondiments(x)) & exists x.(IsPerson(x) & -CanDistinguishCondiments(x) & CanUseDifferentCondiments(x)) & -all x.(IsPerson(x) & CanDistinguishCondiments(x)))", "prediction": ["all x.((Person(x) & DistinctTasteOfDifferentCondiments(x)) -> CanCookDifferentCondiments(x))", "all x y.((Person(x) & DistinctTasteOfDifferentCondiments(x)) -> CanCookDifferentCondiments(x,y))", "all x.(DistinctTasteOfDifferentCondiments(x) -> CooksDifferentCondiments(x))", "all x.((Person(x) & DistinctsTasteOfDifferentCondiments(x)) -> CanCookDifferentCondiments(x))", "(DistinctTasteOfDifferentCondiments(Person) -> CanCookDifferentCondiments(Person))", "all x y.((Person(x) & DistinctTaste(x,y) & DifferentCondiments(y)) -> CooksWith(x,y))", "all x y.((Person(x) & DiffersTasteOfDifferentCondiments(x,y)) -> CooksDifferentCondiments(x))", "all x y z.((Person(x) & DistinctTasteOfDifferentConditions(x,y) & Conditor(z)) -> CooksWithDifferentConditors(x,z))", "all x.(DistinctTasteOfDifferentCondiments(x) -> CanCookDifferentCondiments(x))", "exists x.(Person(x) & DistinctTasteOfDifferentCondiments(x) & CooksDifferentCondiments(x))", "all x.((Person(x) & DistinctTasteOfDifferentCondiments(x)) -> CooksDifferentCondiments(x))", "all x y.((Person(x) & DistinctTasteOfDifferentCondiments(x,y)) -> CanCookDifferentCondiments(x,y))", "all x.(DistinctTasteOfCondiments(x) -> CooksDifferentCondiments(x))", "all x.(DistinctsTasteOfDifferentCondiments(x) -> CooksDifferentCondiments(x))", "all x.((Person(x) & CanDistinctTasteOfDifferentCondiments(x)) -> CanUseDifferentCondiments(x))", "all x y.((Person(x) & DiffersTasteOfDifferentCondiments(x,y)) -> CanCookDifferentCondiments(x,y))"]}
{"id": "folio_train_600", "nl": "People who have the talent of cooking can distinguish the taste of different condiments.", "fol": "all x.((IsPerson(x) & HasCookingTalent(x)) -> CanDistinguishCondiments(x))", "prediction": ["all x.((Person(x) & TalentOfCooking(x)) -> CanDistinctTasteOfDifferentCondiments(x))", "all x y.((Person(x) & TalentOfCooking(x)) -> CanDistinctTasteOfDifferentCondiments(x,y))", "all x.((Person(x) & TalentOfCooking(x)) -> DistinctTasteOfDifferentCondiments(x))", "all x y.((Person(x) & TalentOfCooking(x)) -> DistinctsTasteOfDifferentCondiments(x,y))", "all x.(HasTalentOfCooking(x) -> CanDistinctTasteOfDifferentCondiments(x))", "all x.((Person(x) & TalentOfCooking(x)) -> CanDistinctTasteOfDifferentCondiments(x))", "all x y.((Person(x) & TalentOfCooking(x) & Has(x,y)) -> CanDistinctTasteOfDifferentCondiments(x))", "exists x.(CookingTalent(x) & Talent(x) & DistinctTasteOfCondiments(x))", "all x.(HasTalentOfCooking(x) -> DistinctTasteOfDifferentCondiments(x))", "all x.((Person(x) & TalentOfCooking(x)) -> DistinctTasteOfCondiments(x))", "all x y.((Person(x) & TalentOfCooking(x)) -> CanDistinctTasteOfDifferentCondiments(x,y))", "all x.((Person(x) & TalentOfCooking(x)) -> DittiesTasteOfDifferentCondiments(x))", "all x.((Person(x) & CookingTalent(x)) -> CanDistinctTasteOfDifferentCondiments(x))", "exists x.(CookingTalent(x) & DistinctTasteOfCondiments(x))", "all x y.((Person(x) & TalentOfCooking(x)) -> DistinguishesTasteOfDifferentCondiments(x,y))", "all x.((Person(x) & TalentOfCooking(x)) -> CanDistinctTasteOfCondiments(x))"]}
{"id": "folio_train_601", "nl": "Only people with the talent of cooking can make delicious meals.", "fol": "all x y.((CanMakeMeal(x,y) & IsDelicious(y) & IsPerson(x)) -> HasCookingTalent(x))", "prediction": ["all x.((Person(x) & TalentOfCooking(x)) -> CanMakeDeliciousMeals(x))", "all x y.((Person(x) & TalentOfCooking(x)) -> CanMakeDeliciousMeals(x,y))", "all x.((Person(x) & TalentOfCooking(x)) -> MakesDeliciousMeals(x))", "all x y.((Person(x) & TalentOfCooking(x) & MakesDeliciousMeals(y)) -> CanMake(x,y))", "only people with the talent of cooking can make delicious meals.", "exists x.(Person(x) & TalentOfCooking(x) & CanMakeDeliciousMeals(x))", "all x.((Person(x) & TalentOfCooking(x)) -> CanMakeDeliciousMeals(x))", "exists x.(CookingTalent(x) & CanMakeDeliciousMeals(x))", "all x y.((Person(x) & TalentOfCooking(x)) -> CanMakeDeliciousMeals(x,y))", "all x y.((Person(x) & TalentOfCooking(x) & MakesDeliciousMeals(y,x)) -> CanMakeMeals(x,y))", "all x y.((Person(x) & CookingTalent(x,y)) -> CanMakeDeliciousMeals(x,y))", "all x.((Person(x) & TalentOfCooking(x)) -> MakesDeliciousMeals(x))", "all x.((Person(x) & CookingTalent(x)) -> CanMakeDeliciousMeals(x))", "all x.((Person(x) & TalentOfCooking(x)) -> CanMakeDeliciousMeals(x))", "all x.((Person(x) & TalentOfCooking(x)) -> MakesDeliciousMeals(x))", "all x.((Person(x) & TalentOfCooking(x)) -> CanMakeDeliciousMeals(x))"]}
{"id": "folio_train_602", "nl": "If the meal is popular at the party, then it is delicious.", "fol": "all x y.((CanMakeMeal(x,y) & IsPerson(x) & IsPopularAtParty(y)) -> IsDelicious(y))", "prediction": ["all x.((Meal(x) & PopularAtParty(x)) -> Delicious(x))", "all x y.((Meal(x) & PopularAtParty(x) & Party(y)) -> Delicious(x))", "all x.((Meal(x) & PopularAtParty(x)) -> Delicious(x))", "(PopularAtParty(meal) -> Delicious(meal))", "all x y.((Meal(x) & PopularAtParty(x)) -> Delicious(x))", "all x.((Meal(x) & PopularAtParty(x)) -> Delicious(x))", "all x y.((Meal(x) & PopularAtParty(x,y)) -> Delicious(x))", "exists x.(Meal(x) & PopularAtParty(x) & Delicious(x))", "all x.((Meal(x) & PopularAtParty(x)) -> Delicious(x))", "all x.(PopularAtParty(x) -> DeliciousMeal(x))", "all x y.((Meal(x) & PopularAtParty(x,y)) -> Delicious(x))", "all x.((Meal(x) & PopularAtParty(x)) -> Delicious(x))", "all x.((Meal(x) & PopularAtParty(x)) -> Delicious(x))", "all x.((Meal(x) & PopularAtParty(x)) -> Delicious(x))", "all x.((Meal(x) & PopularAtParty(x)) -> Delicious(x))", "all x.((Meal(x) & PopularAtParty(x)) -> Delicious(x))"]}
{"id": "folio_train_603", "nl": "John can make meals which are popular at the party.", "fol": "exists x.(IsPerson(John) & CanMakeMeal(John,x) & IsPopularAtParty(x) & IsPerson(Peter) & -CanUseDifferentCondiments(Peter))", "prediction": ["all x y.((John(x) & Party(y)) -> CanMakeMeals(x,y))", "all x.(John(x) -> (MakesMeals(x) & PopularAtParty(x)))", "(Meal(John) & PopularAtParty(John))", "all x y z.((John(x) & Meal(y) & Party(z)) -> CanMake(x,y,z))", "all x y.((John(x) & Party(y)) -> CanMakeMeals(x,y))", "all x.(John(x) -> (MakesMeals(x) & PopularAtParty(x)))", "all x.((John(x) & MakesMeals(x)) -> PopularAtParty(x))", "(MealMaker(John) & PopularAtParty(John,John))", "all x.((John(x) & MakesMeals(x,Party)) -> PopularAt(x,Party))", "all x y.((John(x) & Party(y)) -> (Meal(x,y) & PopularAt(x,y)))", "(PopularAtParty(John))", "(PopularAtParty(John,Meal(John))", "all x y.((John(x) & Party(y)) -> MakesMeals(x,y))", "all x.(John(x) -> CanMakeMeals(x,popularAtParty))", "All x.(John(x) -> MakesMeals(x,popularAtParty))", "exists x.(John(x) & MakesMeals(x) & PopularAtParty(x))"]}
{"id": "folio_train_604", "nl": "John cannot use different condiments to cook.", "fol": "-CanUseDifferentCondiments(John)", "prediction": ["all x.((John(x) & UsesDifferentCondiments(x)) -> -CooksWithDifferentCondiments(x))", "-(John(John) & UsesDifferentCondiments(John))", "John -CanUseDifferentCondimentsToCook(John))", "(-UsesDifferentCondiments(John))", "John can't use different condiments to cook.", "(John -CanUseDifferentCondiments(John))", "all x y.((John(x) & Condiment(y)) -> -CanCook(x,y))", "all x.((John(x) & UsesDifferentCondiments(x)) -> -CanCook(x))", "-(UsesDifferentCondiments(John))", "John cannot use different condiments to cook.", "-exists x.(Condiment(x) & Cooks(x))", "-(John(John) & UsesDifferentCondiments(John))", "John can't use different condiments to cook.", "all x.((John(x) & UsesDifferentCondiments(x)) -> -CooksWith(x,y))", "(John,y) & Cooks(y))", "all x.((John(x) & UsesDifferentCondiments(x)) -> -CanCook(x))"]}
{"id": "folio_train_605", "nl": "Effective monetary policy is possible with successful inflation control and a strong national currency.", "fol": "all x.(EffectiveMonetaryPolicy(x) -> (SuccessfulInflationControl(x) & StrongNationalCurrency(x)))", "prediction": ["all x.((InflationControl(x) & StrongNationalCurrency(x)) -> EffectiveMonetaryPolicy(x))", "all x y.((MonetaryPolicy(x) & InflationControl(y) & StrongNationalCurrency(x)) -> Effective(x))", "all x y.((MonetaryPolicy(x) & SuccessfulInflationControl(y) & StrongNationalCurrency(x,y)) -> Effective(x))", "all x.((InflationControl(x) & StrongNationalCurrency(x)) -> EffectiveMonetaryPolicy(x))", "all x y z.((MonetaryPolicy(x) & InflationControl(y) & NationalCurrency(z) & Successful(y) & Strong(z)) -> Effective(x))", "all x.((MonetaryPolicy(x) & SuccessfulInflationControl(x) & StrongNationalCurrency(x)) -> Effective(x))", "all x y.((InflationControl(x) & StrongNationalCurrency(y)) -> EffectiveMonetaryPolicy(x,y))", "all x y z.((MonetaryPolicy(x) & InflationControl(y) & StrongNationalCurrency(z) & Successful(y) & Strong(z)) -> Effective(x))", "all x.((InflationControl(x) & StrongNationalCurrency(x)) -> EffectiveMonetaryPolicy(x))", "all x.(EffectiveMonetaryPolicy(x) -> (SuccessfulInflationControl(x) & StrongNationalCurrency(x)))", "all x.((MonetaryPolicy(x) & SuccessfulInflationControl(x) & StrongNationalCurrency(x)) -> Effective(x))", "all x.((InflationControl(x) & StrongNationalCurrency(x)) -> EffectiveMonetaryPolicy(x))", "all x y.((MonetaryPolicy(x) & InflationControl(y) & StrongNationalCurrency(y)) -> Effective(x,y))", "exists x.(EffectiveMonetaryPolicy(x) & SuccessfulInflationControl(x) & StrongNationalCurrency(x))", "all x.((InflationControl(x) & StrongNationalCurrency(x)) -> EffectiveMonetaryPolicy(x))", "all x.((InflationControl(x) & StrongNationalCurrency(x)) -> EffectiveMonetaryPolicy(x))"]}
{"id": "folio_train_606", "nl": "A country cannot simultaneously regulate the exchange rate and successfully control inflation.", "fol": "-all x.(SuccessfulInflationControl(x) & RegulateExchangeRate(x))", "prediction": ["all x.((Country(x) & -RegulatesExchangeRate(x) & ControlsInflation(x)) -> -RegulatesExchangeRate(x))", "all x.(Country(x) -> (-RegulatesExchangeRate(x) & ControlsInflation(x)))", "all x y.((Country(x) & ExchangeRate(y)) -> (-Regulates(x,y) & ControlsInflation(x,y)))", "all x.((Country(x) & -RegulatesExchangeRate(x) & SuccessfullyControlsInflation(x)) -> -RegulatesExchangeRate(x))", "all x.((Country(x) & -(RegulatesExchangeRate(x) & ControlsInflation(x))) -> -(RegulatesExchangeRate(x) & ControlsInflation(x)))", "all x y.((Country(x) & ExchangeRate(y) & Inflation(y)) -> -Regulates(x,y) & SuccessfullyControls(x,y))", "all x.((Country(x) & RegulatesExchangeRate(x) & ControlsInflation(x)) -> -(RegulatesExchangeRate(x) & ControlsInflation(x)))", "all x.(Country(x) -> (-RegulatesExchangeRate(x) & ControlsInflation(x)))", "all x y.((Country(x) & ExchangeRate(y)) -> (-Regulates(x,y) & SuccessfullyControlsInflation(x,y)))", "all x y.((Country(x) & ExchangeRate(y) & Inflation(z)) -> -(Regulates(x,y) & SuccessfullyControls(x,z)))", "all x.(Country(x) -> (-RegulatesExchangeRate(x) & SuccessfullyControlsInflation(x)))", "all x y.((Country(x) & Currency(y)) -> (-RegulatesExchangeRate(x,y) & ControlsInflation(x,y)))", "exists x.(Country(x) & -(RegulatesExchangeRate(x) & ControlsInflation(x)))", "all x.(Country(x) -> (-RegulatesExchangeRate(x) & ControlsInflation(x)))", "exists x.(Country(x) & -(RegulatesExchangeRate(x) & SuccessfullyControlsInflation(x)))", "exists x.(Country(x) & -(RegulatesExchangeRate(x) & ControlsInflation(x)))"]}
{"id": "folio_train_607", "nl": "The introduction of an embargo on foreign trade goods in a country leads to a sharp decrease in exports.", "fol": "all x.(EmbargoOnForeignTrade(x) -> DecreaseInExports(x))", "prediction": ["all x y.((Embargo(x) & Country(y) & IntroducedOnFrenchTradeGoods(x,y)) -> SharpDecreaseInExports(x,y))", "all x y z.((Embargo(x) & ForeignTradeGoods(y) & Country(z) & IntroducedIn(x,y,z)) -> SharpDecreaseInExports(x,y,z))", "all x y.((Embargo(x) & Country(y) & IntroducedOnFrenchTradeGoods(x,y)) -> SharpDecreaseInExports(x,y))", "all x y z.((Embargo(x) & ForeignTradeGoods(y) & Country(z) & IntroducedIn(x,y,z)) -> SharpDecreaseInExports(x,y,z))", "all x.((EmbargoOnForeignTradeGoods(x) & InCountry(x)) -> SharpDecreaseInExports(x))", "all x y.((Embargo(x) & Country(y) & IntroducedIn(x,y)) -> SharpDecreaseInExports(x,y))", "all x.((Embargo(x) & ForeignTradeGoods(x) & Country(x)) -> SharpDecreaseInExports(x))", "all x y z.((Embargo(x) & ForeignTradeGoods(y) & Country(z) & IntroducedIn(x,y,z)) -> SharpDecreaseInExports(x))", "all x.((EmbargoOnFrenchTradeGoods(x) & InCountry(x)) -> SharpDecreaseInExports(x))", "all x y.((Embargo(x) & Country(y) & IntroducedIn(x,y)) -> SharpDecreaseInExports(x,y))", "all x y z.((Embargo(x) & ForeignTradeGoods(y) & Country(z) & IntroducedIn(x,y,z)) -> SharpDecreaseInExports(x,y))", "all x y.((Embargo(x) & Country(y) & IntroducesIntroduction(x,y)) -> SharpDecreaseInExports(x,y))", "all x.((Embargo(x) & ForeignTradeGoods(x) & Country(x)) -> SharpDecreaseInExports(x))", "all x.((EmbargoOnForeignTradeGoods(x) & Country(x)) -> SharpDecreaseInExports(x))", "all x y z.((Embargo(x) & ForeignTradeGoods(y) & Country(z) & IntroducedIn(x,y,z)) -> SharpDecreaseInExports(x,y,z))", "all x.(EmbargoIncountry(x) -> SharpDecreaseInExports(x))"]}
{"id": "folio_train_608", "nl": "If exports fall sharply, the national currency cannot be in this country.", "fol": "all x.(DecreaseInExports(x) -> -StrongNationalCurrency(x))", "prediction": ["all x.((ExportsFallSharply(x) & NationalCurrency(x)) -> -CanBeIn(x,City))", "all x y.((Exports(x) & Exports(y) & SharpFall(x,y)) -> -NationalCurrency(x,y))", "all x.((ExportsFallSharply(x) & -NationalCurrency(x)) -> -InCountry(x))", "all x.(ExportsFallSharply(x) -> -NationalCurrencyInCountry(x))", "all x.((ExportsFailSharply(x) & NationalCurrency(x)) -> -CanBeIn(x,City))", "all x y.((ExportsFall(x) & ExportsFall(y)) -> -NationalCurrency(x,y))", "(SharpExportsFall(x) -> NationalCurrencyCannotBeIn(x,y))", "all x y.((Exports(x) & ExportsFallSharply(x)) -> -NationalCurrencyInCountry(y))", "all x y z.((Exports(x) & Exports(y) & Country(z) & SharpFall(x,y)) -> -NationalCurrency(x,z))", "all x.((ExportsFallSharply(x) & NationalCurrency(x)) -> -InCountry(x))", "all x.(SharpExportsFall(x) -> -NationalCurrencyInCountry(x))", "all x y.((ExportsFallSharply(x) & Country(y)) -> -NationalCurrencyIn(x,y))", "all x.(ExportsFailSharply(x) -> -NationalCurrencyInCountry(x))", "all x y.((Exports(x) & Exports(y) & SharpFall(x,y)) -> -CanBeIn(x,y))", "all x.(SharpExportFall(x) -> -NationalCurrencyInCountry(x))", "all x.((ExportsFailSharply(x) & NationalCurrency(x)) -> -InCountry(x))"]}
{"id": "folio_train_609", "nl": "Regulation of the exchange rate is required to have a strong national currency. ", "fol": "all x.(RegulateExchangeRate(x) -> StrongNationalCurrency(x))", "prediction": ["all x.((RegulationOfExchangeRate(x) & StrongNationalCurrency(x)) -> Requires(x))", "all x y.((ExchangeRate(x) & Currency(y)) -> StrongNational(x,y))", "all x y.((RegulationOfExchangeRate(x) & StrongNationalCurrency(y)) -> Requires(x,y))", "(StrongNationalCurrency(RegulationOfExchangeRate) -> Requires(ExchangeRate,Requirement))", "all x.((RegulationOfExchangeRate(x) & StrongNationalCurrency(x)) -> Requires(x,y))", "all x.((ExchangeRate(x) & StrongNationalCurrency(x)) -> RequiresRegulation(x))", "all x y.((ExchangeRate(x) & NationalCurrency(y)) -> RequiresRegulation(x,y))", "all x.(RegulatesExchangeRate(x) -> StrongNationalCurrency(x))", "all x.((RegulationOfExchangeRate(x) & StrongNationalCurrency(x)) -> Requires(x))", "all x y.((RegulationOfExchangeRate(x) & StrongNationalCurrency(y)) -> Requires(x,y))", "all x.(StrongNationalCurrency(x) -> RegulatesExchangeRate(x))", "exists x.(RegulationOfExchangeRate(x) & StrongNationalCurrency(x))", "all x.((RegulationOfExchangeRate(x) & StrongNationalCurrency(x)) -> Requires(x,y))", "all x y.((ExchangeRate(x) & Currency(y)) -> StrongNational(x,y))", "all x.((RegulationOfExchangeRate(x) & StrongNationalCurrency(x)) -> RequiredForCurrency(x))", "all x y.((RegulationOfExchangeRate(x) & StrongNationalCurrency(y)) -> Requires(x,y))"]}
{"id": "folio_train_610", "nl": "There is an embargo on Russian foreign trade goods.", "fol": "EmbargoOnForeignTrade(Russia)", "prediction": ["exists x.(RussianFrenchTradeGoodsEmbargo(x))", "all x y.((RussishFreshTradeGood(x) & RussianTradeGood(y)) -> Embargo(x,y))", "all x.((RussishForeignTradeGoods(x) & Embargo(x)) -> -Embargo(x))", "there is an embargo on Russian ForeignTradeGoods(e)", "all x y.((RussishForeignTradeGood(x) & RussianTradeGood(y)) -> Embargo(x,y))", "exists an embargo on Russian ForeignTradeGoods(e) & -RussianTradeGoods(e) & -RussianTradeGoods(e) & -RussianTradeGoods(e))", "exists x.(RussishFreshTradeGoodsEmbargo(x))", "exists x.(RussianFrenchTradeGood(x) & Embargo(x))", "exists x.(RussishForeignTradeGoods(x) & Embargo(x))", "(exists x.(RussianFrenchTradeGood(x) & Embargo(x)))", "(exists x.(RussishFrenchTradeGood(x) & Embargo(x)))", "all x y.((RussianFrenchTradeGood(x) & RussianTradeGood(y)) -> Embargo(x,y))", "exists x.(RussianForeignTradeGoods(x) & Embargo(x))", "exists an embargo on Russian ForeignTradeGoods(embargo)", "all x y.((RussishFrenchTradeGood(x) & RussianTradeGood(y)) -> Embargo(x,y))", "all x.((RussishForeignTradeGoods(x) & EmbargoOn(x,Russia)) -> -EmbargoOn(x,Russia))"]}
{"id": "folio_train_611", "nl": "In Russia, an effective monetary policy is possible.", "fol": "exists x.EffectiveMonetaryPolicy(Russia)", "prediction": ["all x.((Russland(x) & EffectiveMonetaryPolicy(x)) -> Possible(x))", "all x.((Russian(x) & EffectiveMonetaryPolicy(x)) -> Possible(x))", "all x y.((Russland(x) & EffectiveMonetaryPolicy(y)) -> Possible(x,y))", "all x.((Rossophone(x) & EffectiveMonetaryPolicy(x)) -> Possible(x))", "all x.((Russland(x) & EffectiveMonetaryPolicy(x)) -> Possible(x))", "(EffectiveMonetaryPolicy(Russia) -> Possible(Russia))", "all x y.((Russian(x) & EffectiveMonetaryPolicy(y)) -> Possible(x,y))", "all x.((Rosso-Russian(x) & EffectiveMonetaryPolicy(x)) -> Possible(x))", "all x.((Russian(x) & EffectiveMonetaryPolicy(x)) -> Possible(x))", "(EffectiveMonetaryPolicy(Russia) -> Possible(Russia))", "exists x.(Russland(x) & EffectiveMonetaryPolicy(x))", "all x.((Russland(x) & EffectiveMonetaryPolicy(x)) -> Possible(x))", "all x y.((Rossophone(x) & MoneyMarketingPolicy(y)) -> Effective(x,y))", "all x y.((Russland(x) & MoneyMarketingPolicy(y)) -> Effective(x,y))", "exists x.(Russland(x) & EffectiveMonetaryPolicy(x))", "exists x.(Rossovsky(x) & EffectiveMonetaryPolicy(x))"]}
{"id": "folio_train_612", "nl": "Video Gag is a French television series that airs weekly.", "fol": "all x.((VideoGagSeries(x) -> IsFrenchTelevisionSeries(x)) & AirsWeekly(x))", "prediction": ["all x.(VideoGag(x) -> (FrenchTelevisionSeries(x) & AirsWeekly(x)))", "(FrenchTelevisionSeries(VideoGag) & AirsWeekly(VideoGag))", "VideoGag (FrenchTelevisionSeries(French) & AirsWeekly(French))", "all x.(VideoGag(x) -> (FrenchTelevisionSeries(x) & AirsWeekly(x)))", "All x y.((FrenchTelevisionSeries(x) & VideoGag(y)) -> AirsWeekly(x,y))", "(FrenchTelevisionSeries(VideoGag) & AirsWeekly(VideoGag))", "All x y.((VideoGag(x) & FrenchTVSeries(y)) -> AirsWeekly(x,y))", "all x.((FrenchTelevisionSeries(x) & AirsWeekly(x)) -> VideoGag(x))", "all x.(VideoGag(x) -> (FrenchTelevisionSeries(x) & AirsWeekly(x)))", "all x.(VideoGag(x) -> (FrenchTelevisionSeries(x) & AirsWeekly(x)))", "(FrenchTelevisionSeries(VideoGag) & AirsWeekly(VideoGag))", "all x.(VideoGag(x) -> (FrenchTelevisionSeries(x) & AirsWeekly(x)))", "(FrenchTelevisionSeries(VideoGag) & AirsWeekly(VideoGag))", "All x.(VideoGag(x) -> (FrenchTelevisionSeries(x) & AirsWeekly(x)))", "(FrenchTelevisionSeries(VideoGag) & AirsWeekly(VideoGag))", "all x.(VideoGag(x) -> (FrenchTelevisionSeries(x) & AirsWeekly(x)))"]}
{"id": "folio_train_613", "nl": "Video Gag airs on the French broadcast channel TF1. ", "fol": "all x.(VideoGagSeries(x) -> AirsOnChannelTF1(x))", "prediction": ["all x.(VideoGag(x) -> AirsOnFrenchBroadcastChannel(x,TF1))", "all x y.((VideoGag(x) & FrenchBroadcastChannel(y)) -> AirsOn(x,y))", "(AirsOnFrenchBroadcastChannel(VideoGag) & FrenchBroadcastChannel(VideoGag))", "all x y.((VideoGag(x) & FrenchBroadcastChannel(y) & TF1(y)) -> AirsOn(x,y))", "all x.(VideoGag(x) -> AirsOnFrenchBroadcastChannel(x,TF1))", "all x y z.((VideoGag(x) & FrenchBroadcastChannel(y) & TF1(z)) -> AirsOn(x,y,z))", "(AirsOnFrenchBroadcastChannel(VideoGag) & FrenchBroadcastChannel(VideoGag))", "(AirsOnFrenchBroadcastChannel(VideoGag) & FrenchBroadcastChannel(VideoGag) & FrenchBroadcastChannel(VideoGag))", "(AirsOnFrenchBroadcastChannel(VideoGag) & TF1 (FrenchBroadcastChannel) & TF1 (FrenchBroadcastChannel)))", "all x y z.((VideoGag(x) & FrenchBroadcastChannel(y) & Channel(z) & AirsOn(x,y,z)) -> FrenchBroadcastChannel(y,z))", "all x.(VideoGag(x) -> AirsOnFrenchBroadcastChannel(x,TF1))", "all x y.((VideoGag(x) & FrenchBroadcastChannel(y)) -> AirsOn(x,y))", "All x.(VideoGag(x) -> AirsOnFrenchBroadcastChannel(x))", "All x.(VideoGag(x) -> AirsOn(x,FrenchBroadcastChannel,TF1))", "All x.(VideoGag(x) -> AirsOnFrenchBroadcastCast(x,TF1))", "All x.(VideoGag(x) -> AirsOnFrenchBroadcastChannelTF1."]}
{"id": "folio_train_614", "nl": "If viewers send in funny videos to the French broadcast channel, then Video Gag airs them on television.", "fol": "all x.(ReceivedFunnyVideos(x) -> AirsWeekly(x))", "prediction": ["all x y.((Viewer(x) & SendsFunnyVideos(x,y) & FrenchBroadcastChannel(y)) -> AirsOnTelevision(x,y))", "all x.((Viewer(x) & SendsFunnyVideos(x) & FrenchBroadcastChannel(x)) -> AirsOnTelevision(x))", "all x y.((Viewer(x) & SendsInFunnyVideos(x,y) & FrenchBroadcastChannel(y)) -> AirsOnTelevision(x,y))", "all x y z.((Viewer(x) & FunnyVideo(y) & FrenchBroadcastChannel(z) & SendsIn(x,y,z)) -> AirsOnTelevision(x,y))", "all x.((Viewer(x) & SendsFunnyVideosToFrenchBroadcastChannel(x)) -> AirsOnTelevision(x))", "(all x.(FunnyVideo(x) -> SendsToFrenchBroadcastChannel(x)))", "all x.((Viewer(x) & SendsInFunnyVideos(x) & FrenchBroadcastChannel(x)) -> AirsOnTelevision(x))", "all x y z.((Viewer(x) & SendsFunnyVideos(x,y) & FrenchBroadcastChannel(y) & SendsTo(x,z)) -> AirsOnTelevision(x))", "all x y.((Viewer(x) & SendsFunnyVideos(x,y) & FrenchBroadcastChannel(y)) -> AirsOnTelevision(x,y))", "(all x.(FunnyVideo(x) -> SendsInToFrenchBroadcastChannel(x)))", "all x y.((Viewer(x) & SendsInFunnyVideos(x,y)) -> AirsOnTelevision(x,y))", "all x.((Viewer(x) & SendsFunnyVideos(x) & FrenchBroadcastChannel(x)) -> AirsOnTelevision(x))", "all x y.((Viewer(x) & SendsFunnyVideosToFrenchBroadcastChannel(x,y)) -> AirsOnTelevision(x,y))", "all x.(FunnyVideos(x) -> AirsOnTelevision(x))", "all x.((Viewer(x) & SendsInFunnyVideos(x)) -> AirsOnTelevision(x))", "All x.((Viewer(x) & SendsFunnyVideosToFrenchBroadcastChannel(x)) -> AirsOnTelevision(x))"]}
{"id": "folio_train_615", "nl": "All videos aired on Video Gag are in French.", "fol": "all x.((VideoGagSeries(x) -> AirsWeekly(x)) & IsInFrench(x))", "prediction": ["all x.(Video(x) -> AiredOnVideoGag(x))", "all x.((Video(x) & AimedOnVideoGag(x)) -> French(x))", "(AllVideosAitedOnVideoGag(x) -> French(x))", "all x.(Video(x) -> (AiredOnVideoGag(x) & InFrench(x)))", "all x y.((Video(x) & VideoGag(y)) -> French(x))", "All videos aired on VideoGag are inFrench(x)", "all x.((Video(x) & AiredOnVideoGag(x)) -> French(x))", "all x y.((Video(x) & VideoGag(y) & AiredOn(x,y)) -> French(x))", "all x.(Video(x) -> AimedOnVideoGag(x))", "(AllVideosAimedOnVideoGag(x) -> French(x))", "all x.((Video(x) & AimedOnVideoGag(x)) -> InFrench(x))", "(all x.(Video(x) -> AiredOnVideoGag(x)) -> French(x))", "all x.(VideoGag(x) -> French(x))", "all x y.((Video(x) & VideoGag(y) & AiredOn(x,y)) -> French(x))", "all x.(Video(x) -> AiredOnVideoGag(x))", "All x.(Video(x) -> French(x))"]}
{"id": "folio_train_616", "nl": "Viewers send in funny videos to the French broadcast channel that are in French.", "fol": "all x.((ReceivedFunnyVideos(x) & IsInFrench(x)) -> SentToFrenchBroadcastChannel(x))", "prediction": ["all x y.((Viewer(x) & FrenchBroadcastChannel(y)) -> SendsFunnyVideos(x,y))", "all x y z.((Viewer(x) & FunnyVideo(y) & FrenchBroadcastChannel(z) & Sends(x,y,z)) -> InFrench(x))", "all x.((Viewer(x) & SendsFunnyVideos(x) & InFrench(x)) -> Funny(x))", "all x y.((Viewer(x) & FrenchBroadcastChannel(y) & FunnyVideo(x,y)) -> SendsIn(x,y))", "all x y z.((Viewer(x) & FunnyVideo(y) & FrenchBroadcastChannel(z) & SendsTo(x,y,z)) -> InFrench(x,y))", "(all x y.(FrenchBroadcastChannel(x) -> SendsFunnyVideos(x,y)))", "all x.((Viewer(x) & SendsInFunnyVideos(x)) -> FrenchBroadcastChannel(x))", "all x.(Viewer(x) -> (SendsInFunnyVideos(x) & InFrench(x)))", "all x y.((Viewer(x) & FrenchBroadcastChannel(y)) -> SendsInFunnyVideos(x,y))", "all x y z.((Viewer(x) & FrenchBroadcastChannel(y) & FunnyVideo(z) & InFrench(z)) -> SendsIn(x,y,z))", "all x y z.((Viewer(x) & FunnyVideo(y) & FrenchBroadcastChannel(z)) -> SendsIn(x,y,z))", "all x y.((Viewer(x) & FrenchBroadcastChannel(y) & SendsFunnyVideos(x,y)) -> Funny(x,y))", "all x.((Viewer(x) & SendsFunnyVideos(x) & InFrench(x)) -> FunnyVideos(x))", "all x y.((Viewer(x) & Viewer(y)) -> SendsFunnyVideos(x,y))", "all x.(Viewer(x) -> SendsInFunnyVideos(x))", "all x y z.((Viewer(x) & FunnyVideo(y) & FrenchBroadcastChannel(z) & SendsIn(x,y,z)) -> InFrench(y,z))"]}
{"id": "folio_train_617", "nl": "Viewers send in funny videos to the French broadcast channel that are in English.", "fol": "exists x.(ReceivedFunnyVideos(x) & SentTo(FrenchBroadcastChannel,x) & English(x))", "prediction": ["all x y.((Viewer(x) & FrenchBroadcastChannel(y)) -> SendsFunnyVideos(x,y))", "all x y z.((Viewer(x) & FunnyVideo(y) & FrenchBroadcastChannel(z) & Sends(x,y,z)) -> InEnglish(y,z))", "all x y z.((Viewer(x) & FrenchBroadcastChannel(y) & FunnyVideo(z)) -> SendsIn(x,y,z))", "all x.(Viewer(x) -> (SendsFunnyVideos(x) & InEnglish(x)))", "all x y.((Viewer(x) & FrenchBroadcastChannel(y)) -> SendsFunnyVideos(x,y))", "all x.((Viewer(x) & SendsFunnyVideos(x) & EnglishVideos(x)) -> SendsToFrenchBroadcastChannel(x))", "all x y.((Viewer(x) & FrenchBroadcastChannel(y) & SendsFunnyVideos(x,y)) -> Funny(x,y))", "(all x y.((Viewer(x) & FrenchBroadcastChannel(y)) -> SendsFunnyVideos(x,y)))", "all x y z.((Viewer(x) & FunnyVideo(y) & FrenchBroadcastChannel(z) & SendsTo(x,y,z)) -> InEnglish(y,z))", "all x.(Viewer(x) -> (SendsFunnyVideos(x,English) & ToFrenchBroadcastChannel(x)))", "all x y z.((Viewer(x) & FrenchBroadcastChannel(y) & FunnyVideo(z) & InEnglish(z)) -> SendsIn(x,y,z))", "all x.(Viewer(x) -> SendsFunnyVideos(x))", "all x y.((Viewer(x) & FrenchBroadcastChannel(y)) -> SendsInFunnyVideos(x,y))", "all x y.((Viewer(x) & Viewer(y)) -> SendsFunnyVideos(x,y))", "all x.(Viewer(x) -> (SendsInFunnyVideos(x) & InEnglish(x)))", "all x y z.((Viewer(x) & FunnyVideo(y) & FrenchBroadcastChannel(z) & SendsTo(x,y,z)) -> English(y))"]}
{"id": "folio_train_618", "nl": "All phones are things.", "fol": "all x.(IsPhone(x) -> IsThing(x))", "prediction": ["all x.(Phone(x) -> Things(x))", "all x.(Phone(x) -> Things(x))", "(all x.(Phone(x) -> Things(x)))", "all x.exists y.(Phone(x) & Phone(y) & Things(x))", "all x y.((Phone(x) & Phone(y)) -> Things(x))", "all x.(Phone(x) -> Things(x))", "all x.(Phone(x) -> Thing(x))", "All x.exists y.(Phone(x) & Phone(y) & Things(x))", "all x.(Phone(x) -> Things(x))", "all x.(Phone(x) -> Thing(x))", "all x.(Phone(x) -> Something(x))", "exists x.(Phone(x) & Phone(y) & Things(x))", "all x.(Phone(x) -> Things(x))", "all x.(Phone(x) -> Thing(x))", "all x.(Phone(x) -> Something(x))", "exists x.(Phone(x) & Thing(x))"]}
{"id": "folio_train_619", "nl": "All cellphones are phones. ", "fol": "all x.(IsCellphone(x) -> IsPhone(x))", "prediction": ["all x.(Cellphone(x) -> Phone(x))", "all x.(Cellphone(x) -> Phone(x))", "(all x.(Cellphone(x) -> Phone(x)))", "all x y.((Cellphone(x) & Phone(y)) -> Phone(x))", "all x.(Cellphone(x) -> Phone(x))", "(all x.(Cellphone(x) -> Phone(x)))", "all x.(Cellphone(x) -> Phone(x))", "all x.(Cellphone(x) -> Phone(x))", "all x.(Cellphone(x) -> Phone(x))", "exists x.(Cellphone(x) & Phone(y) & -(Cellphone(x) & Phone(y))))", "all x.(Cellphone(x) -> Phone(x))", "all x.(Cellphone(x) -> Phone(x))", "all x.(Cellphone(x) -> Phone(x))", "all x.(Cellphone(x) -> Phone(x))", "all x.(Cellphone(x) -> Phone(x))", "all x.(Cellphone(x) -> Phone(x))"]}
{"id": "folio_train_620", "nl": "All iPhones are cellphones. ", "fol": "all x.(IsIphone(x) -> IsCellphone(x))", "prediction": ["all x.(Iphone(x) -> Cellphone(x))", "all x.(iPhone(x) -> Cellphone(x))", "all x.(Iphone(x) -> Cellphone(x))", "(all x.(iPhone(x) -> Cellphone(x)))", "(all x.(Iphone(x) -> Cellphone(x))", "all x.(iPhone(x) -> Cellphone(x))", "all x.(Iphone(x) -> Cellphone(x))", "(all x.(Iphone(x) -> Cellphone(x))", "all x.(iPhone(x) -> Cellphone(x))", "all x.(Iphone(x) -> Cellphone(x))", "all x.(iPhone(x) -> Cellphone(x))", "all x.(Iphone(x) -> Cellphone(x))", "all x.(iPhone(x) -> Cellphone(x))", "all x.(Iphone(x) -> Cellphone(x))", "all x.(iPhone(x) -> Cellphone(x))", "all x.(Iphone(x) -> Cellphone(x))"]}
{"id": "folio_train_621", "nl": "All engineers are workers.", "fol": "all x.(IsEngineer(x) -> IsWorker(x))", "prediction": ["all x.(Engineer(x) -> Worker(x))", "all x.(Engineer(x) -> Workers(x))", "all x.(Engineer(x) -> Worker(x))", "all x y.((Engineer(x) & Worker(y)) -> WorksFor(x,y))", "all x.(Engineer(x) -> Workers(x))", "(all x.(Engineer(x) -> Workers(x))", "all x.(Engineer(x) -> Worker(x))", "(all x.(Engineer(x) -> Workers(x))", "all x.(Engineer(x) -> Workers(x))", "all x.(Engineer(x) -> Worker(x))", "all x.(Engineer(x) -> Workers(x))", "all x.(Engineer(x) -> Worker(x))", "all x.(Engineer(x) -> Worker(x))", "all x.(Engineer(x) -> Workers(x))", "all x.(Engineer(x) -> Worker(x))", "all x.(Engineer(x) -> Workers(x))"]}
{"id": "folio_train_622", "nl": "All workers are human. ", "fol": "all x.(IsWorker(x) -> IsHuman(x))", "prediction": ["all x.(Worker(x) -> Human(x))", "all x.(Worker(x) -> Human(x))", "(all x.(Worker(x) -> Human(x)))", "all x.(Worker(x) -> Human(x))", "all x.exists y.(Worker(x) & Human(y))", "all x.(Worker(x) -> Human(x))", "all x.exists y.(Worker(x) & Human(y))", "all x y.(Worker(x) -> Human(x))", "all x.(Worker(x) -> Human(x))", "all x.(Worker(x) -> Human(x))", "exists x.(Woman(x) & Human(x))", "all x.(Worker(x) -> Human(x))", "all x.(Worker(x) -> Human(x))", "all x.(Worker(x) -> Human(x))", "all x.(Worker(x) -> Human(x))", "exists x.(Worker(x) & Human(x))"]}
{"id": "folio_train_623", "nl": "Jack is either an engineer or a worker.", "fol": "((IsEngineer(Jack) & -IsWorker(Jack)) | (-IsEngineer(Jack) & IsWorker(Jack)))", "prediction": ["all x.(Jack(x) -> (Engineer(x) | Worker(x)))", "(Engineer(Jack) | Worker(Jack))", "(Employee(Jack) | Worker(Jack))", "all x.(Jack(x) -> (Engineer(x) | Worker(x)))", "((Jack) | Worker(Jack)))", "(Engineer(Jack) | Worker(Jack))", "(Employee(Jack) | Worker(Jack))", "all x.((Jack(x) & Engineer(x) | Worker(x)) -> (Worker(x) & Engineer(x)))", "all x.(Jack(x) -> (Engineer(x) | Worker(x)))", "exists x.(Jack(x) & Engineer(x) & Worker(x))", "exists x.(Jacket(x) & (Engineer(x) | Worker(x)))", "all x.(Jack(x) -> (Engineer(x) | Worker(x)))", "(Employee(Jack) | Worker(Jack))", "all x.(Jack(x) -> (Engineer(x) | Worker(x)))", "exists x.(Jack(x) & Engineer(x) & Worker(x))", "all x.(Jack(x) -> (Engineer(x) | Worker(x)))"]}
{"id": "folio_train_624", "nl": "Jack is is either a human or a phone.", "fol": "((IsHuman(Jack) & -IsPhone(Jack)) | (-IsHuman(Jack) & IsPhone(Jack)))", "prediction": ["all x.(Jack(x) -> (Human(x) | Phone(x)))", "(Human(Jack) | Phone(Jack))", "all x.(Jack(x) -> (Human(x) | Phone(x)))", "(HasHuman(Jack,) | HasPhone(Jack,))", "(Human(Jack) | Phone(Jack))", "all x y.((Jack(x) & Human(y)) | Phone(y)) -> (Human(x) | Phone(x)))", "all x.(Jack(x) -> (Human(x) | Phone(x)))", "(Human(Jack) | Phone(Jack))", "all x.(Human(x) | Phone(x))", "all x.(Jack(x) -> (Human(x) | Phone(x)))", "all x.(Jack(x) -> (Human(x) | Phone(x)))", "exists x.(Human(x) | Phone(x))", "all x.(Jack(x) -> (Human(x) | Phone(x)))", "exists x.(Human(x) | Phone(x))", "all x.(Jack(x) -> (Human(x) | Phone(x)))", "exists x.(Human(x) | Phone(x))"]}
{"id": "folio_train_625", "nl": "Jack is a thing.", "fol": "IsThing(Jack)", "prediction": ["all x.(Jack(x) -> Thing(x))", "(Thing(Jack) & Thing(Jack))", "all x.(Jack(x) -> Thing(x))", "Jack is a Thing.", "(IsJack(Jack)?", "(Thing(Jack) & Thing(Jack))", "all x y.((Jack(x) & Thing(y)) -> Thing(x))", "all x.(Jack(x) -> Thing(x))", "all x.(Jack(x) -> Thing(x))", "All x.(Jack(x) -> Thing(x))", "all x.(Jack(x) -> Thing(x))", "all x.(Jack(x) -> Thing(x))", "All x.(Jack(x) -> Thing(x))", "exists x.(Jack(x) & Thing(x))", "exists x.(Jack(x) & Things(x))", "All x.(Jack(x) -> Thing(x))"]}
{"id": "folio_train_626", "nl": "Jack is not a thing.", "fol": "-IsThing(Jack)", "prediction": ["all x.(Jack(x) -> -Thing(x))", "-(Jack(Jack) & -Thing(Jack))", "all x.(Jack(x) -> -Thing(x))", "(-Thing(Jack))", "-(Thing(Jack) & -Thing(Jack))", "(Is(Jack(Jack)?)", "all x.(Jack(x) -> -Ding(x))", "-(Jack(Jack) & -Ding(Jack))", "(-Ding(Jack))", "(Is(Jack(Jack)?)", "all x.(Jack(x) -> -Thing(x))", "-Thing(jack)", "-(Thing(Jack) & -Thing(Jack))", "All x.(Jack(x) -> -Ding(x))", "all x.(Jack(x) -> -Thing(x))", "All x.(Jack(x) -> -Ding(x))"]}
{"id": "folio_train_627", "nl": "Jack is a thing and an iPhone.", "fol": "(IsThing(Jack) & IsIphone(Jack))", "prediction": ["all x.(Jack(x) -> (Thing(x) & iPhone(x)))", "(Thing(Jack) & iPhone(Jack))", "(all x.(Jack(x) -> Thing(x)) & all y.(Jack(y) -> iPhone(y)))", "(Iphone(Jack) & Thing(Jack))", "all x.(Jack(x) -> (Thing(x) & iPhone(x)))", "(Thing(Jack) & iPhone(Jack))", "all x.(Jack(x) -> (Thing(x) & iPhone(x)))", "((Jack(Jack) & iPhone(Jack)) -> Thing(Jack))", "(Iphone(Jack) & Thing(Jack))", "(AndIphone(jack,y) & Thing(y))", "all x.(Jack(x) -> (Thing(x) & iPhone(x)))", "all x.(Jack(x) -> (Iphone(x) & Thing(x)))", "All x.(Jack(x) -> (Thing(x) & iPhone(x)))", "exists x.(Jack(x) & Thing(x) & iPhone(x))", "all x.(Jack(x) -> (Thing(x) & iPhone(x)))", "all x.(Jack(x) -> (Iphone(x) | Thing(x)))"]}
{"id": "folio_train_628", "nl": "Jack is not both a thing and an iPhone.", "fol": "-(IsThing(Jack) & IsIphone(Jack))", "prediction": ["all x.(Jack(x) -> -(Thing(x) & iPhone(x)))", "-(Iphone(Jack) & iPhone(Jack))", "-(Iphone(Jack) & Thing(Jack))", "all x.(Jack(x) -> -(Iphone(x) & Thing(x)))", "((Thing(Jack) & iPhone(Jack)) & -(Thing(Jack) & iPhone(Jack))))", "(-(Thing(Jack) & iPhone(Jack)))", "(Iphone(Jack) & -(Iphone(Jack) | iPhone(Jack)))", "all x.(Jack(x) -> -(Thing(x) & iPhone(x)))", "-(Iphone(jack) & Thing(jack))", "-(Iphone(Jack) & Thing(Jack))", "-((Thing(Jack) & iPhone(Jack)))", "-(Iphone(jack) & iPhone(jack))", "all x.(Jack(x) -> -(Iphone(x) & Thing(x)))", "(-(Thing(Jack) & iPhone(Jack)))", "\u2013 (Iphone(Jack) & -Iphone(Jack)))", "(-(Thing(Jack) & iPhone(Jack)))"]}
{"id": "folio_train_629", "nl": "All iPhones are electronic.", "fol": "all x.(IsIPhone(x) -> IsElectronic(x))", "prediction": ["all x.(Iphone(x) -> Electronic(x))", "all x.(iPhone(x) -> Electronic(x))", "(all x.(iPhone(x) -> Electronic(x)))", "all x.(Iphone(x) -> Electronic(x))", "all x.(iPhone(x) -> Electronic(x))", "(all x.(Iphone(x) -> Electronic(x))", "(all x.(iPhone(x) -> Electronic(x)))", "all x.(Iphone(x) -> Electronic(x))", "all x.(iPhone(x) -> Electronic(x))", "all x.(Iphone(x) -> Electronic(x))", "all x.(iPhone(x) -> Electronic(x))", "all x.(Iphone(x) -> Electronic(x))", "all x.(iPhone(x) -> Electronic(x))", "all x.(Iphone(x) -> Electronic(x))", "all x.(iPhone(x) -> Electronic(x))", "all x.(Iphone(x) -> Electronic(x))"]}
{"id": "folio_train_630", "nl": "Some phones are iPhones.", "fol": "exists x.(IsPhone(x) & IsIPhone(x))", "prediction": ["exists x.(Phone(x) & iPhone(x))", "exists x.(Phone(x) & iPhone(x))", "exists x.(Phone(x) & iPhone(x))", "exists x.(Phone(x) & iPhone(x))", "exists x.(Phone(x) & iPhone(x))", "exists x y.(Phone(x) & iPhone(y))", "exists x.(Phone(x) & iPhone(x))", "exists x.(Phone(x) & iPhone(x))", "exists x.(Mobile(x) & iPhone(x))", "exists x.(Phone(x) & iPhone(x))", "exists x.(Phone(x) & iPhone(x))", "exists x.(Phone(x) & iPhone(x))", "exists x.(Phone(x) & iPhone(x))", "exists x.(Phone(x) & iPhone(x))", "exists x.(Phone(x) & iPhone(x))", "exists x.(Phone(x) & iPhone(x))"]}
{"id": "folio_train_631", "nl": "No phones are electronic.", "fol": "-exists x.(IsPhone(x) & IsElectronic(x))", "prediction": ["-exists x.(Phone(x) & Electronic(x))", "all x.(Phone(x) -> -Electronic(x))", "-exists x.(Phone(x) & Electronic(x))", "(exists x.(Phone(x) & Electronic(x))", "all x.(Phone(x) -> -Electronic(x))", "-exists x.(Phone(x) & Electronic(x))", "all x.(Phone(x) -> -Electronic(x))", "(exists x.(Phone(x) & Electronic(x))", "-exists x.(Phone(x) & Electronic(x))", "all x.(Phone(x) -> -Electronic(x))", "-exists x.(Phone(x) & Electronic(x))", "-exists x.(Phone(x) & Electronic(x))", "-exists x.(Phone(x) & Electronic(x))", "-exists x.(Phone(x) & Electronic(x))", "-exists x.(Phone(x) & Electronic(x))", "-exists x.(Phone(x) & Electronic(x))"]}
{"id": "folio_train_632", "nl": "Metropolitan Museum of Art is a museum in NYC.", "fol": "(IsMuseum(MetropolitanMuseumofArt) & LocatedInNYC(MetropolitanMuseumofArt))", "prediction": ["all x.(MuseumOfArt(x) -> MuseumInNewYork(x))", "(MuseumIn(Museum(MuseumIn(MuseumIn(MuseumIn(MuseumIn(MuseumIn(MuseumIn(MuseumIn(MuseumIn(MuseumIn(MuseumIn(MuseumIn(MuseumIn(MuseumIn(MuseumIn(MuseumIn(MuseumIn(MuseumIn(MuseumIn(MuseumIn(MuseumIn(MuseumIn(MuseumIn(MuseumIn(MuseumIn(MuseumIn(Museum))))", "(MuseumIn(MuseumIn(MuseumIn(MuseumIn(MuseumIn(MuseumIn(MuseumIn(MuseumIn(MuseumIn(MuseumIn(MuseumIn(MuseumIn(MuseumIn(MuseumIn(MuseumIn(MuseumIn(MuseumIn(MuseumIn(MuseumIn(MuseumIn(MuseumIn(MuseumIn(MuseumIn(MuseumIn(MuseumIn(MuseumIn(MuseumIn(MuseumIn(Museum)))))", "(MuseumInNewYork(Museum(Museum) & MuseumInNYC(Museum))", "all x y.((Museum(x) & MetropolitanMuseumOfArt(y)) -> MuseumIn(x,y))", "all x.(MuseumOfArt(x) -> MuseumInNYC(x))", "the MetropolitanMuseumOfArt(Museum) & In(Museum(Museum,NYC))", "all x.(Museum(x) -> (MuseumIn(x,NY) & MuseumIn(x,NY)))", "(MuseumInNYC) & MetropolitanMuseumOfArt(MuseumInNYC))", "all x y.((MetropolitanMuseumOfArt(x) & MuseumInNewYork(y)) -> MuseumInNewYork(x))", "the MetropolitanMuseumOfArt (MuseumInNYC)", "all x y.((Museum(x) & MetropolitanMuseumOfArt(y)) -> MuseumInNewYork(x))", "(MuseumInNewYork(Museum(Museum) & MuseumInNewYork(Museum))", "(MuseumInNYC) & MetropolitanMuseumOfArt(Museum)", "all x.(MuseumOfArt(x) -> MuseumInNewYork(x))", "all x.(MuseumOfArt(x) -> MuseumInNYC(x))"]}
{"id": "folio_train_633", "nl": "Whitney Museum of American Art is a museum in NYC.", "fol": "(IsMuseum(WhitneyMuseumofAmericanArt) & LocatedInNYC(WhitneyMuseumofAmericanArt))", "prediction": ["all x.((WhitneyMuseumOfAmericanArt(x) & MuseumInNewYork(x)) -> MuseumInNYC(x))", "all x.(WhitneyMuseumOfAmericanArt(x) -> MuseumInNewYork(x))", "(MuseumInNewYork(WhitneyMuseumOfAmericanArt) & MuseumInNewYork(Whitney))", "all x y.((WhitneyMuseum(x) & AmericanArt(y)) -> MuseumInNewYork(x))", "the Whitney Museum of AmericanArt is a museum in NYC.", "all x.(WilliamsMuseumOfAmericanArt(x) -> MuseumInNewYork(x))", "the Whitney Museum of AmericanArt (WHOA) - MuseumInNewYork(y))", "all x y.((WhitneyMuseumOfAmericanArt(x) & Museum(y)) -> InNewYork(x))", "all x.((WhitneyMuseumOfAmericanArt(x) & MuseumInNewYork(x)) -> MuseumInNYC(x))", "all x y.((WilliamsMuseumOfAmericanArt(x) & MuseumInNewYork(y)) -> MuseumInNYC(x,y))", "(NewYork(WhitneyMuseum(Whitney) & Museum(Whitney))", "(MuseumInNewYork(WhitneyMuseumOfAmericanArt) & MuseumInNYC(Whitney))", "(MuseumInNYC) & Whitney MuseumOfAmericanArt(WHOA)", "all x.((WilliamsMuseumOfAmericanArt(x) & MuseumInNewYork(x)) -> MuseumInNYC(x))", "(MuseumInNewYork(Whitney) & MuseumInNewYork(Whitney))", "(MuseumInNYC) & Whitney MuseumOfAmericanArt(Washington,NY))"]}
{"id": "folio_train_634", "nl": "Museum of Modern Art (MoMA) is a museum if NYC. ", "fol": "(IsMuseum(MuseumofModernArt) & LocatedInNYC(MuseumofModernArt))", "prediction": ["all x.((MuseumOfModernArt(x) & NYC(x)) -> Museum(x))", "all x y.((MuseumOfModernArt(x) & NYC(y)) -> Museum(x,y))", "(MuseumOfModernArt(MoMA) & LocatedIn(MetropolitanArt(MoMA) & LocatedIn(MoMA,NYC))", "((MuseumOfModernArt(MoMA) & NYC(MoMA)) -> Museum(MoMA))", "all x.((MuseumOfModernArt(x) & NYC(x)) -> Museum(x))", "(MuseumOfModernArt(MoMA) & LocatedInNewYork(MoMA))", "all x.(MuseumOfModernArt(x) -> Museum(x))", "all x.((MuseumOfModernArt(x) & MuseumOfNewYork(x)) -> MuseumOfNewYork(x))", "all x y.((Museum(x) & MuseumOfModernArt(x) & NYC(y)) -> Museum(x,y))", "(NewYork(MoMA) & Museum(MoMA,NY))", "all x y.((MuseumOfModernArt(x) & NYC(y)) -> Museum(x,y))", "(MuseumOfModernArt(MoMA) & NewYork(NY))", "all x.((MuseumOfModernArt(x) & NewYork(y)) -> Museum(x))", "all x.(MuseumOfModernArt(x) -> MuseumIfNYC.", "(MuseumOfModernArt(MoMA) & InNYC(MoMA,NYC))", "All x.(MuseumOfModernArt(x) -> MuseumIfNYC(x))"]}
{"id": "folio_train_635", "nl": "Metropolitan Museum of Art includes Bytantine and Islamic Art. ", "fol": "(IncludesArt(MetropolitanMuseumofArt,ByzantineArt) & IncludesArt(MetropolitanMuseumofArt,IslamicArt))", "prediction": ["(IncludesBytantine(MuseumOfArt) & IncludesIslamicArt(MuseumOfArt))", "(MuseumOfArt(Metropolitan) & IncludesBytantine(Metropolitan) & IncludesIslamicArt(Metropolitan))", "(exists x.(MetropolitanMuseumOfArt(x) & Bytantine(x)) & exists y.(IslamicArt(y) & InMuseum(x,y))))", "all x.(MetropolitanMuseumOfArt(x) -> (IncludesBytantine(x) | IncludesIslamicArt(x)))", "all x y.((MetropolitanMuseumOfArt(x) & Bytantine(y) & IslamicArt(y)) -> Includes(x,y))", "All x.((MetropolitanMuseumOfArt(x) & Bytantine(x) & IslamicArt(x)) -> Includes(x,y))", "(MuseumOfArt(Museum) & Bytantine(Museum) & IslamicArt(Museum))", "(MetropolitanMuseumOfArt(Museum) & Bytantine(Museum) & IslamicArt(Museum))", "(IncludesBytantine(MuseumOfArt) & IncludesIslamicArt(MuseumOfArt))", "all x.(MetropolitanMuseumOfArt(x) -> (IncludesBytantine(x) & IncludesIslamicArt(x)))", "(IncludesBytantine(Museum) & IncludesIslamicArt(Museum))", "All x.((MetropolitanMuseumOfArt(x) & Bytantine(x) & IslamicArt(x)) -> Includes(x,y))", "all x y.((MeteorologicalMuseumOfArt(x) & Bytantine(y) & IslamicArt(y)) -> Includes(x,y))", "all x.(MetropolitanMuseumOfArt(x) -> (IncludesBytantine(x) | IncludesIslamicArt(x)))", "exists x.(MeteorologicalMuseum(x) & Bytantine(x) & IslamicArt(x))", "All x.(MetropolitanMuseumOfArt(x) -> (IncludesBytantine(x) | IncludesIslamicArt(x)))"]}
{"id": "folio_train_636", "nl": "Whitney Museum of American Art includes American art.", "fol": "IncludesArt(WhitneyMuseumofAmericanArt,AmericanArt)", "prediction": ["all x.((WhitneyMuseumOfAmericanArt(x) & IncludesAmericanArt(x)) -> IncludesAmericanArt(x))", "all x.(WhitneyMuseumOfAmericanArt(x) -> IncludesAmericanArt(x))", "all x y.((WhitneyMuseumOfAmericanArt(x) & AmericanArt(y)) -> Includes(x,y))", "(IncludesAmericanArt(WhitneyMuseumOfAmericanArt))", "all x y.((WhitneyMuseum(x) & AmericanArt(y)) -> Includes(x,y))", "(includes AmericanArt) & exists x.(WhitneyMuseumOfAmericanArt(x) & InMuseumOfAmericanArt(x)))", "all x y.((WilliamsMuseumOfAmericanArt(x) & AmericanArt(y)) -> Includes(x,y))", "all x.((WhitneyMuseumOfAmericanArt(x) & IncludesAmericanArt(x)) -> IncludesAmericanArt(x))", "the Whitney Museum of AmericanArt includes AmericanArt(x)", "all x.((WilliamsMuseumOfAmericanArt(x) & IncludesAmericanArt(x)) -> IncludesAmericanArt(x))", "(IncludesAmericanArt(WhitneyMuseum) & WhitneyMuseumOfAmericanArt(Whitney))", "(IncludesAmericanArt(WhitneyMuseumOfAmericanArt))", "all x.(WhitneyMuseumOfAmericanArt(x) -> IncludesAmericanArt(x))", "(IncludesArt(WhitneyMuseum(Whitney) & AmericanArt(Whitney))", "-exists x.(WhitneyMuseumOfAmericanArt(x) & IncludesAmericanArt(x))", "All x.(WilliamsMuseumOfAmericanArt(x) -> IncludesAmericanArt(x))"]}
{"id": "folio_train_637", "nl": "A museum in NYC includes Byzantine and Islamic Art.", "fol": "exists x.(IsMuseum(x) & LocatedInNYC(x) & IncludesArt(x,ByzantineArt) & IncludesArt(x,IslamicArt))", "prediction": ["all x.((Museum(x) & InNYC(x)) -> (ByzantineArt(x) | IslamicArt(x)))", "all x.(Museum(x) -> (IncludesByzantineArt(x) & IncludesIslamicArt(x)))", "all x y.((Museum(x) & InNYC(x,y)) -> (IncludesByzantineArt(x) | IncludesIslamicArt(x)))", "all x.((Museum(x) & InNYC(x)) -> (IncludesByzantineArt(x) | IncludesIslamicArt(x)))", "all x y.((Museum(x) & In(x,y)) -> (IncludesByzantineArt(x) | IncludesIslamicArt(x)))", "(IncludesByzantineArt(Museum,NY) & IncludesIslamicArt(Museum,NY))", "all x.(Museum(x) -> (IncludesByzantineArt(x) | IncludesIslamicArt(x)))", "exists x.(Museum(x) & In(x,NY) & ByzantineArt(x) & IslamicArt(x))", "all x y.((Museum(x) & NewYork(y)) -> (IncludesByzantineArt(x,y) | IncludesIslamicArt(x,y)))", "all x y z.((Museum(x) & ByzantineArt(y) & IslamicArt(z)) -> Includes(x,y,z))", "all x y.((Museum(x) & NYC(y)) -> (IncludesByzantineArt(x,y) | IncludesIslamicArt(x,y)))", "exists x.(Museum(x) & In(x,NY) & ByzantineArt(x) & IslamicArt(x))", "all x y.((Museum(x) & Museum(y) & In(x,y)) -> (ByzantineArt(x) | IslamicArt(x)))", "exists x.(Museum(x) & In(x,y) & (ByzantineArt(y) | IslamicArt(y)))", "exists x.(Museum(x) & In(x,NY) & ByzantineArt(x) & IslamicArt(x))", "exists x.(Museum(x) & In(x,NY) & ByzantineArt(x) & IslamicArt(x))"]}
{"id": "folio_train_638", "nl": "A museum in NYC includes American art.", "fol": "exists x.(IsMuseum(x) & LocatedInNYC(x) & IncludesArt(x,AmericanArt))", "prediction": ["all x.((Museum(x) & InNYC(x)) -> IncludesAmericanArt(x))", "all x.((Museum(x) & InNewYork(x)) -> IncludesAmericanArt(x))", "all x y.((Museum(x) & NYC(y)) -> IncludesAmericanArt(x,y))", "(InNewYork(Museum(Museum) & In(Museum(Museum) & In(Museum(Museum)) -> IncludesAmericanArt(Museum))", "all x y.((Museum(x) & NewYork(y)) -> IncludesAmericanArt(x,y))", "all x.(Museum(x) -> IncludesAmericanArt(x))", "all x y z.((Museum(x) & NYC(y) & AmericanArt(z)) -> Includes(x,y,z))", "exists x.(Museum(x) & In(x,NY) & IncludesAmericanArt(x))", "all x.((Museum(x) & InNYC(x)) -> IncludesAmericanArt(x))", "all x.(Museum(x) -> In(x,NYC))", "all x y.((Museum(x) & NewYork(y)) -> IncludesAmericanArt(x,y))", "all x y.((Museum(x) & NYC(y)) -> IncludesAmericanArt(x,y))", "exists x.(Museum(x) & In(x,NYC) & IncludesAmericanArt(x))", "all x y.((Museum(x) & Museum(y) & In(x,y)) -> IncludesAmericanArt(x))", "exists x.(Museum(x) & InNewYork(x) & In(x,y))", "exists x.(Museum(x) & InNYC(x) & IncludesAmericanArt(x))"]}
{"id": "folio_train_639", "nl": "A museum in NYC includes Greek art.", "fol": "exists x.(IsMuseum(x) & LocatedInNYC(x) & IncludesArt(x,GreekArt))", "prediction": ["all x.((Museum(x) & InNYC(x)) -> IncludesGreekArt(x))", "all x.((Museum(x) & InNewYork(x)) -> IncludesGreekArt(x))", "all x y.((Museum(x) & NYC(y)) -> IncludesGreekArt(x,y))", "all x y.((Museum(x) & NewYork(y)) -> IncludesGreekArt(x,y))", "all x.(Museum(x) -> IncludesGreekArt(x))", "exists x.(Museum(x) & In(x,NY) & IncludesGreekArt(x))", "all x y z.((Museum(x) & NewYork(y) & GreekArt(z)) -> Includes(x,y,z))", "all x.((Museum(x) & InNYC(x)) -> IncludesGreekArt(x))", "all x y z.((Museum(x) & NYC(y) & GreekArt(z)) -> Includes(x,y,z))", "exists x.(Museum(x) & In(x,NY) & In(x,y))", "all x y.((Museum(x) & NewYork(y)) -> IncludesGreekArt(x,y))", "all x y.((Museum(x) & NYC(y)) -> IncludesGreekArt(x,y))", "all x y.((Museum(x) & NYC(y) & IncludesGreekArt(x,y)) -> IncludesArt(x,y))", "exists x.(Museum(x) & InNYC(x) & IncludesGreekArt(x))", "exists x.(Museum(x) & InNewYork(x))", "exists x.(Museum(x) & In(x,NY) & GreekArt(x))"]}
{"id": "folio_train_640", "nl": "A person either likes eating cheese or is a francophile.", "fol": "all x.(LikesEatingCheese(x) | IsFrancophile(x))", "prediction": ["all x.(Person(x) -> (LikesEatingCheese(x) | Francophile(x)))", "all x.(Francophile(x) -> (LikesEatingCheese(x) | LikesEatingCheese(x)))", "all x.(Person(x) -> (LikesEatingCheese(x) | Francophile(x)))", "exists x.(Person(x) & ((LikesEatingCheese(x) & LikesEatingCheese(x)) | Francophile(x))))", "all x.((Person(x) & LikesEatingCheese(x)) | Frankophile(x))", "all x y.(Francophile(x) -> (LikesEatingCheese(x) | LikesEatingCheese(y)))", "all x y.((Person(x) & Cheese(y)) -> (LikesEating(x,y) | Francophile(x)))", "all x.(Francophile(x) -> (LikesEatingCheese(x) | LikesEatingCheese(x)))", "all x.(Person(x) -> (LikesEatingCheese(x) | Francophile(x)))", "all x.((Person(x) & LikesEatingChew(x)) | Francophile(x))", "exists x.(Person(x) & (LikesEatingCheese(x) | Francophile(x)))", "exists x.(Person(x) & (LovesEatingCheese(x) | Francophile(x)))", "exists x.(Person(x) & LikesEatingCheese(x) | Francophile(x))", "exists x.(Person(x) & (LikesEatingCheese(x) | Francophile(x)))", "exists x.(Person(x) & LikesEatingCheese(x)) | Francophile(x))", "exists x.(Person(x) & (LikesEatingCheese(x) | Francophile(x)))"]}
{"id": "folio_train_641", "nl": "No francophiles are people who like Spain as their favorite country.", "fol": "all x.(IsFrancophile(x) -> -LikesSpainAsFavorite(x))", "prediction": ["-exists x.(Francophile(x) & Likes(x,Spanish))", "all x.(Francophile(x) -> -LikesSpanish(x))", "-all x.(Francophile(x) -> LikesSpanish(x))", "all x.(Francophile(x) -> -FavoriteCountry(x,Spanish))", "-(Francophile(x) & LikesSpanish(x)))", "-exists x.(Francophile(x) & Likes(x,Spain))", "all x.(Francophile(x) -> (Person(x) & LikesSpanish(x)))", "-exists x.(Francophile(x) & People(x) & LikesSpanish(x))", "all x.(Francophile(x) -> -LikesSpanish(x))", "all x.(Francophile(x) -> (LikesSpanish(x) & FavoriteCountry(x)))", "-exists x.(Francophile(x) & Likes(x,Spanish))", "(-all x.(Francophile(x) -> LikesSpanish(x)))", "(exists x.(Francophile(x) & Likes(x,Spanish)))", "all x.(Francophile(x) -> (Person(x) & LikesSpanish(x)))", "-exists x.(Francophile(x) & Likes(x,Spain))", "-exists x.(Francophile(x) & People(x) & Likes(x,Spanish))"]}
{"id": "folio_train_642", "nl": "A person likes Spain as their favorite country or likes eating cheese.", "fol": "all x.(LikesSpainAsFavorite(x) | LikesEatingCheese(x))", "prediction": ["all x.((Person(x) & (LikesSpanish(x) | LikesEatingCheese(x))) -> FavoriteCountry(x))", "all x.(Person(x) -> (LikesSpanish(x) | LikesEatingCheese(x)))", "all x y.((Person(x) & (LikesSpanish(x) | LikesEatingCheese(x))) -> FavoriteCountry(x,y))", "all x.((Person(x) & (LikesSpanish(x) | LikesEatingCheese(x))) -> Likes(x,Spanish))", "exists x.(Person(x) & (Likes(x,Spanish) | Likes(x,EatsCheese)))", "exists x.(Person(x) & ((LovesSpanish(x) & FavoriteCountry(x)) | LikesEatingCheese(x))))", "all x y.((Person(x) & (FavoriteCountry(x,y) | LikesEatingCheese(x,y))) -> Likes(x,y))", "exists x.(Person(x) & (Likes(x,Spain) | Likes(x,EatsCheese)))", "all x y.(Person(x) & ((FavoriteCountry(x,y) & Spain(y)) | LikesEatingCheese(x,y))) -> Likes(x,y))", "all x y.((Person(x) & (LikesSpanish(x) | LikesEatingCheese(x))) -> Likes(x,y))", "exists x.(Person(x) & ((Likes(x,Spanish) & FavoriteCountry(x)) | LikesEating(x,Cheese))))", "all x y.((Person(x) & (Likes(x,Spanish) | Likes(x,EatsCheese))) -> Likes(x,Spanish))", "all x.((Person(x) & (LikesSpanish(x) | LikesEatingCheese(x))) -> FavoriteCountry(x))", "exists x.(Person(x) & (LovesSpanish(x) | LikesEatingCheese(x)))", "exists x.(Person(x) & (LikesSpanish(x) | LikesEatingCheese(x)))", "exists x.(Person(x) & ((LovesSpanish(x) & FavoriteCountry(x)) | LikesEatingCheese(x))))"]}
{"id": "folio_train_643", "nl": "Benji is not a person who likes eating cheese and a person who studies Spanish.", "fol": "-(LikesEatingCheese(Benji) & StudiesSpanish(Benji))", "prediction": ["all x.(Benji(x) -> (-LikesEatingCheese(x) & -LikesStudyingSpanish(x)))", "(-(Person(Benji) & LikesEatingCheese(Benji)) & -(Person(Benji) & StudiesSpanish(Benji)))", "(-(LikesEatingCheese(Benji) & LikesEatingSpanish(Benji)) & -(LikesEatingCheese(Benji) & LikesStudyingSpanish(Benji)))", "(-likesEatingCheese(Benji) & -likesStudyingSpanish(Benji))", "(all x.(Benji(x) -> -LikesEatingCheese(x)) & all y.(Benji(y) -> StudiesSpanish(y)))", "all x y.((Person(x) & Benji(y)) -> (-LikesEatingCheese(x) & -LikesStudyingSpanish(y)))", "-(Person(x) & LikesEatingCheese(x) & Person(x) & StudiesSpanish(x))", "(-(Person(Benji) & LikesEatingCheese(Benji)) | Person(Benji) & StudiesSpanish(Benji)))", "all x.(Benji(x) -> (-LikesEatingCheese(x) & -LikesStudyingSpanish(x)))", "(-(LikesEatingCheese(Benji) & LikesStudyingSpanish(Benji)) -> -LikesEatingCheese(Benji))", "all x.(Benji(x) -> (-likesEatingCheese(x) & -StudiesSpanish(x)))", "all x.(Benji(x) -> (-LikesEatingCheese(x) & -StudiesSpanish(x)))", "(all x.(Benji(x) -> -LikesEatingCheese(x)) & all y.(Benji(y) -> StudiesSpanish(y)))", "-((Person(Person(Person) & LikesEatingCheese(Person) & StudiesSpanish(Person)))", "exists x.(Person(x) & -(LovesEatingCheese(x) & LikesStudyingSpanish(x)))", "all x.(Benji(x) -> (-LikesEatingCheese(x) & -LikesStudyingSpanish(x)))"]}
{"id": "folio_train_644", "nl": "If Benji is neither a person who studies Spanish nor a person that studies French, then Benji is a person who studies Spanish or a person that studies French.", "fol": "(-(StudiesSpanish(Benji) | StudiesFrench(Benji)) -> (StudiesSpanish(Benji) | StudiesFrench(Benji)))", "prediction": ["all x.((Person(x) & -(StudiesSpanish(x) | StudiesFrench(x))) -> (StudiesSpanish(x) | StudiesFrench(x)))", "(-(PersonWhoStudiesSpanish(Benji) | PersonWhoStudiesFrench(Benji))) -> (Person(Benji) & (StudiesSpanish(Benji) | StudiesFrench(Benji))))", "(-(Person(Benji) & StudiesSpanish(Benji)) | Person(Benji) & StudiesFrench(Benji)))", "all x.((Person(x) & -(StudiesSpanish(x) | StudiesFrench(x))) -> (StudiesSpanish(x) | StudiesFrench(x)))", "all x y.((Person(x) & Benji(x) & -(StudiesSpanish(x) | StudiesFrench(x))) -> (StudiesSpanish(x) | StudiesFrench(x)))", "(-(StudiesSpanish(Benji) | StudiesFrench(Benji))) -> (StudiesSpanish(Benji) | StudiesFrench(Benji)))", "all x.((Person(x) & -StudiesSpanish(x) & -StudiesFrench(x)) -> (StudiesSpanish(x) | StudiesFrench(x)))", "all x y.((Person(x) & Benji(y) & -(StudiesSpanish(x,y) | StudiesFrench(x,y))) -> (StudiesSpanish(y) | StudiesFrench(y)))", "exists x.(Benji(x) & ((Person(x) & -StudiesSpanish(x) & -StudiesFrench(x)) & (Person(x) & StudiesSpanish(x)) | Person(x) & StudiesFrench(x))))", "all x.((Person(x) & -(StudiesSpanish(x) | StudiesFrench(x))) -> (StudiesSpanish(x) | StudiesFrench(x)))", "all x.((Benji(x) & (-StudiesSpanish(x) | StudiesFrench(x))) -> (StudiesSpanish(x) | StudiesFrench(x)))", "all x.((Person(x) & -(StudiesSpanish(x) | StudiesFrench(x))) -> (StudiesSpanish(x) | StudiesFrench(x)))", "all x.((Benji(x) & (-StudiesSpanish(x) | StudiesFrench(x))) -> (StudiesSpanish(x) | StudiesFrench(x)))", "all x.((Person(x) & -(StudiesSpanish(x) | StudiesFrench(x))) -> (StudiesSpanish(x) | StudiesFrench(x)))", "all x.((Person(x) & -(StudiesSpanish(x) | StudiesFrench(x))) -> (StudiesSpanish(x) | StudiesFrench(x)))", "all x.((Person(x) & -(StudiesSpanish(x) | StudiesFrench(x))) -> (StudiesSpanish(x) | StudiesFrench(x)))"]}
{"id": "folio_train_645", "nl": "Benji is a person who likes eating cheese.", "fol": "LikesEatingCheese(Benji)", "prediction": ["all x.(Benji(x) -> LikesEatingCheese(x))", "Benji is a person who likesEatingCheese(Benji)", "(LikesEatingCheese(Benji))", "(LovesEatingCheese(Benji) & LikesEatingCheese(Benji))", "Benji (Person(Benji) & LikesEatingCheese(Benji))", "all x.(Benji(x) -> LikesEatingCheese(x))", "Benji is a person who likesEatingCheese(Benji)", "(LikesEatingCheese(Benji))", "all x.((Person(x) & LikesEatingCheese(x)) -> Benji(x))", "(LikesEatingCheese(Benji) & EatsCheese(Benji))", "benji.(Person(x) & LikesEatingCheese(x))", "all x.(Benji(x) -> LikesEatingCheese(x))", "Benji is a person who likesEatingCheese(Benji)", "Benji likesEatingCheese(x)", "all x.(Benji(x) -> LikesEatingCheese(x))", "All x.(Benji(x) -> LikesEatingCheese(x))"]}
{"id": "folio_train_646", "nl": "If Benji is either a person who likes eating cheese or a francophile, then Benji is neither a person who studies Spanish nor a person who studies French.", "fol": "((LikesEatingCheese(Benji) | IsFrancophile(Benji)) -> (-StudiesSpanish(Benji) & -StudiesFrench(Benji)))", "prediction": ["all x.((Person(x) & (LikesEatingCheese(x) | Francophile(x))) -> (-StudiesSpanish(x) | StudiesFrench(x)))", "(LikesEatingCheese(Benji) | LikesFrancophile(Benji)) -> -(StudiesSpanish(Benji) | StudiesFrench(Benji)))", "all x.((Person(x) & LikesEatingCheese(x)) | (Francophile(x) & -StudiesSpanish(x) & -StudiesFrench(x))))", "all x.(Francophile(x) -> ((LikesEatingCheese(x) | LikesEatingCheese(x))) | (LikesEatingCheese(x) & LikesEatingFrancophile(x))))", "all x y.((Person(x) & Benji(x) & LikesEatingCheese(x) & Francophile(x)) -> (-StudiesSpanish(x) | StudiesFrench(x)))", "all x.((Person(x) & (LikesEatingCheese(x) | Francophile(x))) -> (-StudiesSpanish(x) | StudiesFrench(x)))", "((Person(Benji) & LikesEatingCheese(Benji)) | (Francophile(Benji) & -StudiesSpanish(Benji) | StudiesFrench(Benji)))", "(LikesEatingCheese(Benji) | LikesFrancophile(Benji)) -> (-StudiesSpanish(Benji) | StudiesFrench(Benji)))", "((Person(Benji) & (LikesEatingCheese(Benji) | Francophile(Benji))) | (Person(Benji) & -StudiesSpanish(Benji) & -StudiesFrench(Benji))))", "all x.((Person(x) & LikesEatingCheese(x)) | (Francophile(x) & -StudiesSpanish(x) & -StudiesFrench(x))))", "all x.(Francophile(x) -> ((LikesEatingCheese(x) | LikesEatingCheese(x))) | (LikesEatingCheese(x) | LikesFrancophile(x))))", "all x.((Person(x) & (LikesEatingCheese(x) | Francophile(x))) -> (-StudiesSpanish(x) | StudiesFrench(x)))", "all x.((Benji(x) & (LikesEatingCheese(x) | Freecophile(x))) -> -(StudiesSpanish(x) | StudiesFrench(x)))", "all x.((Person(x) & LikesEatingCheese(x)) | (Francophile(x) & -StudiesSpanish(x) & -StudiesFrench(x)))", "all x.((Benji(x) & (LikesEatingCheese(x) | Fracophile(x))) -> (-StudiesSpanish(x) | StudiesFrench(x)))", "all x.((Person(x) & LikesEatingCheese(x)) | (Francophile(x) & -StudiesSpanish(x) & -StudiesFrench(x)))"]}
{"id": "folio_train_647", "nl": "If Benji is a person who likes Spain as their favorite country or studies French, then Benji is either a person who studies Spanish or a person who likes Spain as their favorite country.", "fol": "((LikesSpainAsFavorite(Benji) | StudiesFrench(Benji)) -> (StudiesSpanish(Benji) | LikesSpainAsFavorite(Benji)))", "prediction": ["all x.((Person(x) & (LikesSpanish(x) | StudiesFavoriteCountry(x))) -> (StudiesSpanish(x) | LikesSpanish(x)))", "(LikesSpanishAsFavoriteCountry(Benji) | StudiesFrench(Benji)))", "(LikesSpanish(Benji) | StudiesFavoriteCountry(Benji)))", "all x.((Person(x) & (LikesSpanishAsFavoriteCountry(x) | StudiesFrench(x))) -> (StudiesSpanish(x) | LikesSpanishAsFavoriteCountry(x)))", "all x.((Person(x) & (LikesSpanish(x) | StudiesFavoriteCountry(x))) -> (StudiesSpanish(x) | LikesSpanish(x)))", "all x y.((Person(x) & (LikesSpanish(x) | StudiesFavoriteCountry(x))) -> (StudiesSpanish(x) | LikesSpanish(x)))", "((Person(Benji) & (LikesSpanish(Benji) | StudiesFavoriteCountry(Benji))) | (LikesSpanish(Benji) & LikesSpanish(Benji))))", "all x y.((Person(x) & LikesSpain(x,y)) | (LovesFavoriteCountry(x,y) & StudiesFrench(x))))", "(LikesSpanishAsFavoriteCountry(Benji) | StudiesFrench(Benji)))", "all x.(LikesSpanish(x) | StudiesFavoriteCountry(x)) -> (StudiesSpanish(x) | LikesSpanish(x)))", "all x.((Person(x) & (LikesSpanish(x) | StudiesFavoriteCountry(x))) -> (StudiesSpanish(x) | LikesSpanish(x)))", "all x.((Person(x) & LikesSpanish(x)) | LikesFavoriteCountry(x)) -> (StudiesSpanish(x) | LikesFavoriteCountry(x)))", "all x.((Person(x) & (LikesSpain(x) | StudiesFavoriteCountry(x))) -> (StudiesSpanish(x) | LikesSpain(x)))", "all x.((Person(x) & LikesSpanish(x) | LikesFavoriteCountry(x)) -> (StudiesSpanish(x) | LikesFavoriteCountry(x)))", "all x.((Person(x) & (LikesSpanish(x) | StudiesFavoriteCountry(x))) -> (StudiesSpanish(x) | LikesSpanish(x)))", "all x.((Person(x) & (LovesSpanish(x) | StudiesFavoriteCountry(x))) -> (StudiesSpanish(x) | LikesSpanish(x)))"]}
{"id": "folio_train_648", "nl": "Gasteren is village located in the province of Drenthe.", "fol": "(IsVillage(Gasteren) & IsProvince(Drenthe) & LocatedInProvince(Gasteren,Drenthe))", "prediction": ["all x.(Gasteren(x) -> Village(x))", "Gasteren is village located in the province of Drenthe.", "(Village(Gasteren) & LocatedInProvince(Gasteren))", "Gasteren (Village) LocatedInProvinceOfDrenthe(Village)", "(Location(Gasteren) & LocatedInProvince(Gasteren))", "all x y.((Village(x) & Village(y) & LocatedInProvince(x,y)) -> Drenthe(x))", "all x.(Gasteren(x) -> Village(x))", "all x.(Gast\u00e9ren(x) -> VillageInProvinceOfDrenthe(x))", "all x.(Gasteren(x) -> Village(x))", "Gasteren is village located in Drenthe.", "(Destination(Gasteren) & LocatedInProvince(Gesteren))", "(Village(Gasteren) & LocatedInProvince(Gasteren))", "Gasteren (Dorne) & Village(Gesteren)", "All x y.((Village(x) & Province(y) & Drenthe(y)) -> Gasteren(x))", "Gasteren is village located in the province of Drenthe.", "all x.(Gasteren(x) -> Village(x))"]}
{"id": "folio_train_649", "nl": "Drenthe is a Dutch province. ", "fol": "(IsProvince(Drenthe) & IsDutchProvince(Drenthe))", "prediction": ["(DutchProvince(Drenthe) & DutchProvince(Drenthe))", "all x.(Drenthe(x) -> DutchProvince(x))", "Drenthe (DutchProvince)", "Drenthe is DutchProvince.", "(DutchProvince(Drenthe) & DutchProvince(Drenthe))", "Drenthe (DutchProvince)", "all x.(Drenthe(x) -> DutchProvince(x))", "Drenthe (HollandProvince(Drenthe))", "(DutchProvince(Drenthe) & DutchProvince(Drenthe))", "all x.(Drenthe(x) -> DutchProvince(x))", "Drenthe is DutchProvince.", "(DutchProvince(Drenthe) & DutchProvince(Drenthe))", "(HollandProvince(Drenthe) & Dutch(Drenthe))", "all x.(Drenthe(x) -> DutchProvince(x))", "Drenthe (DutchProvince)", "all x.(Drenthe(x) -> DutchProvince(x))"]}
{"id": "folio_train_650", "nl": "No cities are villages.", "fol": "all x.(IsCity(x) -> -IsVillage(x))", "prediction": ["-exists x.(City(x) & Village(x))", "all x.(City(x) -> -Dormant(x))", "-exists x.(City(x) & Village(x))", "(exists x.(City(x) & Village(x)))", "all x.(City(x) -> -Destination(x))", "-(City(x) & Village(x))", "-exists x.(City(x) & Village(x))", "(exists x.(City(x) & Village(x))", "all x.(City(x) -> -Dormant(x))", "-exists x.(City(x) & Village(x))", "all x.(City(x) -> -Destination(x))", "-exists x.(City(x) & Village(x))", "-exists x.(City(x) & Village(y) & -(City(x) & Village(x))))", "-exists x.(City(x) & Village(x))", "-exists x.(City(x) & Village(x))", "-exists x.(City(x) & Village(x))"]}
{"id": "folio_train_651", "nl": "The population of a village in Drenthe was 155 people.", "fol": "exists x.(HasPopulation155(x) & IsVillage(x) & LocatedInProvince(x,Drenthe))", "prediction": ["all x y.((Dorm(x) & Village(y)) -> Population(x,y))", "all x.((DorentheDorm(x) & Village(x)) -> Population(x,155))", "all x y.((Dornthe(x) & Village(y)) -> Population(x,155))", "all x.((Dornthe(x) & Village(x)) -> Population(x,155))", "all x y z.((Dornthe(x) & Village(y) & Village(z) & In(y,z)) -> Population(x,y,z))", "the population of a village in Drenthe was 155 people.", "(Population(dorm) & InDrenthe(dorm) -155People(dorm))", "-(PopulationOfDornthe(dollar) & InDrenthe(d))", "(Population(dorm) & InDreenthe(dorm) -155People(dorm))", "(PopulationInDreenthe(domestic) : 155People(d))", "the population of Drenthe Village was 155 people.", "all x y.((Dorenthe(x) & Village(y)) -> Population(x,155))", "all x.((Dormstadt(x) & Village(x)) -> Population(x,155))", "all x.(DorentheDorm(x) -> Population(x,155))", "all x y.((Dorm(x) & Village(y)) -> Population(x,155))", "all x.((Dornthe(x) & Village(y)) -> Population(x,155))"]}
{"id": "folio_train_652", "nl": "Gasteren is a Dutch village.", "fol": "(IsVillage(Gasteren) & IsDutchProvince(Gasteren))", "prediction": ["all x.(Gasteren(x) -> DutchDorf(x))", "(DutchDorf(Gasteren) & DutchDorf(Gasteren))", "all x.(Gasteren(x) -> DutchDorf(x))", "Gasteren is a DutchDorf.", "(DutchDorf(Gasteren) & DutchDorf(Gasteren))", "(HollandVillage(Gasteren) & DutchVillage(Gasteren))", "Gasteren (HollandVillage)", "all x.(Gasteren(x) -> DutchDorf(x))", "Gasteren is a DutchDorf(x)", "(DutchDorf(Gasteren) & DutchDorf(Gasteren))", "all x.(Gasteren(x) -> DutchDorf(x))", "Gasteren (DutchDorf)", "Gasteren is DutchDorf(x)", "(HollandVillage(Gasteren) & DutchVillage(Gasteren))", "all x.(Gasteren(x) -> DutchDorf(x))", "all x.(Gast\u00e9ren(x) -> DutchDorf(x))"]}
{"id": "folio_train_653", "nl": "Gasteren is a city.", "fol": "IsCity(Gasteren)", "prediction": ["all x.(Gasteren(x) -> City(x))", "Gasteren is a city.", "(City(Gasteren) & City(Gasteren))", "all x.(Gasteren(x) -> City(x))", "Gasteren (City)", "(City(Gastheren) & City(Gastheren))", "(City(G\u00e4steren) & City(G\u00e4steren))", "all x.(Gasteren(x) -> City(x))", "all x.(Gastheren(x) -> City(x))", "Gasteren is a city.", "(City(G\u00e4steren) & City(G\u00e4steren))", "Gasteren (City)", "all x.(Gasteren(x) -> City(x))", "Gasteren is a city.", "All x.(Gastroen(x) -> City(x))", "Gasteren (City)"]}
{"id": "folio_train_654", "nl": "Gasteren has a population of 155.", "fol": "Population(Gasteren,155)", "prediction": ["all x.(Gasteren(x) -> Population(x,155))", "all x.(Gastheren(x) -> Population(x,155))", "(Population(Gasteren,155))", "Gasteren has a population of 155.", "all x.(Gasteren(x) -> Population(x,155))", "Gasteren (population: 155))", "(Population(Gastheren,155))", "Gasteren,Turnery(Gasthener) -> Population(Gasthener,155))", "(Population(Gasteren,155))", "all x.(Gasteren(x) -> Population(x,155))", "Gasteren has a population of 155.", "all x.(Gasteren(x) -> Population(x,155))", "-Population(G\u00e4steren,155)", "(Population(Gasteren,155))", "(Population(Gastreren,155))", "all x.(Gastroren(x) -> Population(x,155))"]}
{"id": "folio_train_655", "nl": "The only types of mammals that lay eggs are platypuses and echidnas.", "fol": "all x.((IsMammal(x) & LaysEgg(x)) -> (IsPlatypus(x) | IsEchidna(x)))", "prediction": ["all x.((Mammal(x) & LaysEggs(x)) -> (Plutus(x) | Echidna(x)))", "(all x.((Mammal(x) & LaysEggs(x)) -> Platypus(x)) & all y.((Mammal(y) & LaysEggs(y)) -> Echidna(y)))", "all x y.((Mammal(x) & Mammal(y) & LaysEggs(x,y)) -> (Plutus(x) | Echidna(x)))", "all x.((Mammal(x) & LaysEggs(x)) -> (Plutus(x) | Echidna(x)))", "all x.(Mammal(x) -> (LaysEggs(x,platypus) | LaysEggs(x,echidna)))", "(LaysEggs(mammal,mammal) | LaysEggs(mammal,mammal))", "(all x.(Plutosis(x) | Echidna(x)))", "all x.((Mammal(x) & LaysEggs(x)) -> (Platchuse(x) | Echidna(x)))", "all x.(LaysEggs(x) -> (Plutus(x) | Echidna(x)))", "all x y.((Mammal(x) & Mammal(y) & LaysEggs(x,y)) -> (Plutus(x) | Echidna(x)))", "exists x.(Mammal(x) & LaysEggs(x) & (Plutus(x) | Echidna(x)))", "all x.((Mammal(x) & LaysEggs(x)) -> (Plactus(x) | Echidna(x)))", "all x.(Mammal(x) -> (LaysEggs(x,platypus) | LaysEggs(x,echidna)))", "(all x.(Plutypus(x) | Echidna(x)))", "all x y.((Mammal(x) & Mammal(y) & LaysEggs(x,y)) -> (Platchuse(x) | Echidna(x)))", "all x.((Mammal(x) & LaysEggs(x)) -> (Platus(x) | Echidna(x)))"]}
{"id": "folio_train_656", "nl": "Platypuses are not hyrax.", "fol": "all x.(IsPlatypus(x) -> -IsHyrax(x))", "prediction": ["all x.(Plactus(x) -> -Hyrax(x))", "all x.(Platypus(x) -> -Hyrax(x))", "all x.(Platypuse(x) -> -Hyrax(x))", "(all x.(Plactus(x) -> -Hyrax(x)))", "-Hyrax(platypus)", "(all x.(Platypuse(x) -> -Hyrax(x)))", "all x.(Plactus(x) -> -Hyrax(x))", "all x.(Platypus(x) -> -Hyrax(x))", "all x y.((Plactus(x) & Hyrax(y)) -> -Hyrax(x))", "-Hyrax(platypus)", "all x.(Platypuse(x) -> -Hyrax(x))", "all x.(Platypus(x) -> -Hyrax(x))", "all x.(Plasticus(x) -> -Hyrax(x))", "all x.(Platypus(x) -> -Hyrax(x))", "(all x.(Platypus(x) -> -Hyrax(x))", "all x.(Platypuse(x) -> -Hyrax(x))"]}
{"id": "folio_train_657", "nl": "Echidnas are not hyrax.", "fol": "all x.(IsEchidna(x) -> -IsHyrax(x))", "prediction": ["all x.(Echidna(x) -> -Hyrax(x))", "(-Hyrax(Echidna) & -Hyrax(Echidna))", "all x.(Echidna(x) -> -Hyrax(x))", "(all x.(Echidna(x) -> -Hyrax(x)))", "(-Hyrax(Echidna) & -Hyrax(Echidna))", "all x.(Echidna(x) -> -Hyrax(x))", "(all x.(Echidna(x) -> -Hyrax(x)))", "-Hyrax(echidna)", "all x.(Echidna(x) -> -Hyrax(x))", "all x.(Echidna(x) -> -Hyrax(x))", "-Hyrax(echidna)", "all x.(Echidna(x) -> -Hyrax(x))", "all x.(Echidna(x) -> -Hyrax(x))", "all x.(Echidna(x) -> -Hyrax(x))", "all x.(Echidna(x) -> -Hyrax(x))", "all x.(Echidna(x) -> -Holyrax(x))"]}
{"id": "folio_train_658", "nl": "No mammals are invertebrates.", "fol": "all x.(IsMammal(x) -> -IsInvertebrate(x))", "prediction": ["-exists x.(Mammal(x) & Invertebrate(x))", "all x.(Mammal(x) -> -Invertebrate(x))", "-exists x.(Mammal(x) & Invertebrate(x))", "all x.(Mammal(x) -> -Invertebrate(x))", "-exists x.(Mammal(x) & Invertebrate(x))", "all x.(Mammal(x) -> -Invertebrate(x))", "(exists x.(Mammal(x) & Invertebrate(x)))", "-exists x.(Mammal(x) & Invertebrate(x))", "all x.(Mammal(x) -> -Invertebrate(x))", "-exists x.(Mammal(x) & Invertebrate(x))", "(exists x.(Mammal(x) & Invertebrate(x))", "all x.(Mammal(x) -> -Invertebrate(x))", "-exists x.(Mammal(x) & Invertebrate(x))", "all x.(Mammal(x) -> -Invertebrates(x))", "-exists x.(Mammal(x) & Invertebrate(x))", "-exists x.(Mammal(x) & Invertebrates(x))"]}
{"id": "folio_train_659", "nl": "All animals are either vertebrates or invertebrates.", "fol": "all x.(((IsAnimal(x) -> IsInvertebrate(x)) & -IsVertebrate(x)) | (-(IsAnimal(x) -> IsInvertebrate(x)) & IsVertebrate(x)))", "prediction": ["all x.(Animal(x) -> (Vertebrate(x) | Invertebrate(x)))", "all x.(Animal(x) -> (Vertebrate(x) | Invertebrate(x)))", "(all x.(Animal(x) -> (Vertebrate(x) | Invertebrate(x))))", "all x.(Animal(x) -> (Vertebrate(x) | Invertebrates(x)))", "all x y.(Animal(x) -> (Vertebrate(x) | Invertebrate(y)))", "(all x.(Animal(x) -> (Vertebrate(x) | Invertebrates(x))))", "all x.(Animal(x) -> (Vertebrate(x) | Invertebrate(x)))", "all x.(Animal(x) -> (Vertebrates(x) | Invertebrates(x)))", "all x.(Animal(x) -> (Vertebrate(x) | Invertebrate(x)))", "all x.(Animal(x) -> (Vertebrate(x) | Invertebrate(x)))", "all x.(Animal(x) -> (Vertebrates(x) | Invertebrates(x)))", "exists x.(Animal(x) & Vertebrate(x) & -Invertebrate(x))", "all x.(Animal(x) -> (Vertebrate(x) | Invertebrate(x)))", "all x.(Animal(x) -> (Vertebrates(x) | Invertebrates(x)))", "all x.(Animal(x) -> (Vertebrate(x) | Invertebrate(x)))", "all x.(Animal(x) -> (Vertebrates(x) | Invertebrates(x)))"]}
{"id": "folio_train_660", "nl": "Mammals are animals.", "fol": "all x.(IsMammal(x) -> IsAnimal(x))", "prediction": ["all x.(Mammal(x) -> Animal(x))", "all x.(Mammal(x) -> Animal(x))", "all x y.((Mammal(x) & Animal(y)) -> Animal(x))", "(Animal(mammal) & Animal(mammal))", "all x.(Mammal(x) -> Animal(x))", "all x y.((Mammal(x) & Animal(y)) -> Animal(x))", "all x.(Mammal(x) -> Animal(x))", "all x y.((Mammal(x) & Animal(y)) -> Animal(x))", "all x.(Mammal(x) -> Animal(x))", "all x.(Mammal(x) -> Animal(x))", "all x.(Mammal(x) -> Animal(x))", "exists x.(Mammal(x) & Animal(y) & Animated(x))", "all x.(Mammal(x) -> Animal(x))", "all x.(Mammal(x) -> Animal(x))", "all x.(Mammal(x) -> Animal(x))", "exists x.(Mammal(x) & Animal(x))"]}
{"id": "folio_train_661", "nl": "Hyraxes are mammals.", "fol": "all x.(IsHyrax(x) -> IsMammal(x))", "prediction": ["all x.(Hyrax(x) -> Mammal(x))", "all x.(Hyrax(x) -> Mammal(x))", "all x y.((Hyrax(x) & Mammal(y)) -> Mammal(x))", "all x.(Hyrax(x) -> Mammal(x))", "all x y.((Hyrax(x) & Mammal(y)) -> Mammal(x))", "(Mammal(hyrax) & Mammal(hyrax,h))", "all x.(Hyrax(x) -> Mammal(x))", "(Mammal(hyrax) & Mammal(hyrax) & Mammal(hyrax))", "all x y.((Hyrax(x) & Mammal(y)) -> Mammal(x))", "(Mammal(hyrax) & Mammal(hyrax,h))", "all x.(Hyrax(x) -> Mammal(x))", "all x.(Hyrax(x) -> Mammal(x))", "all x.(Hyrax(x) -> Mammal(x))", "all x.(Hyrax(x) -> Mammal(x))", "all x.(Hyrax(x) -> Mammal(x))", "all x.(Hyrax(x) -> Mammal(x))"]}
{"id": "folio_train_662", "nl": "Grebes lay eggs.", "fol": "all x.(IsGrebe(x) -> LaysEgg(x))", "prediction": ["all x.(Grebe(x) -> LaysEggs(x))", "all x.(Grebe(x) -> LaysEggs(x))", "all x y.((Grebe(x) & Egg(y)) -> Lays(x,y))", "(LaysEggs(grebes))", "all x.(Grebe(x) -> LaysEggs(x))", "all x y.((Grebe(x) & Egg(y)) -> Lays(x,y))", "all x.(Grape(x) -> LaysEggs(x))", "all x y.((Grebe(x) & Egg(y) & Lays(x,y)) -> Lays(x,y))", "all x.(Grebe(x) -> LaysEggs(x))", "all x y.((Grebe(x) & Egg(y)) -> Lays(x,y))", "exists x.(Gribe(x) & LaysEggs(x))", "all x.(Grebe(x) -> LaysEggs(x))", "all x.(Grebe(x) -> LaysEggs(x))", "exists x.(Gribe(x) & LaysEggs(x))", "all x.(Grebe(x) -> LaysEggs(x))", "exists x.(Grebe(x) & LaysEggs(x))"]}
{"id": "folio_train_663", "nl": "Grebes are not platypuses and also not echidnas.", "fol": "all x.(IsGrebe(x) -> (-IsPlatypus(x) & -IsEchidna(x)))", "prediction": ["all x.(Grebe(x) -> (-Plutypus(x) & -Echidna(x)))", "(all x.(Grebe(x) -> -Plutypus(x)) & -Echidna(x))", "all x.(Grebe(x) -> (-Plactus(x) & -Echidna(x)))", "(-Plutypus(grebe) & -Echidna(grebe))", "all x.(Grebe(x) -> (-Plutypus(x) & -Echidna(x)))", "(all x.(Grebe(x) -> -Plactus(x)) & -Echidna(x))", "all x y.((Grebe(x) & Platypuse(y)) -> (-Plutypus(x,y) & -Echidna(x)))", "(-Plutypuse(grebe) | -Echidna(grebe))", "all x.(Grebe(x) -> (-Plactus(x) & -Echidna(x)))", "-(Grebe(grebe) & -Plutypuse(grebe) | Echidna(grebe))", "(all x.(Grebe(x) -> -Plutypus(x)) & -Echidna(x))", "all x.(Grape(x) -> (-Plactus(x) & -Echidna(x)))", "all x.(Gribe(x) -> (-Plutypuse(x) & -Echidna(x)))", "all x.(Grebe(x) -> (-Plutypus(x) & -Echidna(x)))", "all x.(Grebe(x) -> (-Platypus(x) & -Echidna(x)))", "all x.(Grebe(x) -> (-Plactus(x) & -Echidna(x)))"]}
{"id": "folio_train_664", "nl": "Hyraxes do not lay eggs.", "fol": "all x.(IsHyrax(x) -> -LaysEgg(x))", "prediction": ["all x.(Hyrax(x) -> -LaysEggs(x))", "all x y.((Hyrax(x) & Egg(y)) -> -Lays(x,y))", "all x.(Hyrax(x) -> -LaysEggs(x))", "(all x.(Hyrax(x) -> LaysEggs(x)))", "(-LaysEggs(hyraxes))", "all x.(Hyrax(x) -> -LaysEggs(x))", "all x y.((Hyrax(x) & Egg(y)) -> -Lays(x,y))", "(-LaysEggs(hyraxes))", "all x.(Hyraxes(x) -> -LaysEggs(x))", "-LaysEggsInHyraxes(h)", "all x.(Hyrax(x) -> -LaysEggs(x))", "all x.(Hyrax(x) -> -LaysEggs(x))", "all x.(Hyraxes(x) -> -LaysEggs(x))", "all x.(Hyrax(x) -> -LayEggs(x))", "all x.(Hyrax(x) -> -LaysEggs(x))", "all x.(Hyrax(x) -> (-LaysEggs(x)))"]}
{"id": "folio_train_665", "nl": "Grebes are not mammals.", "fol": "all x.(IsGrebe(x) -> -IsMammal(x))", "prediction": ["all x.(Grebe(x) -> -Mammal(x))", "(Mammal(grebe) & -Mammal(grebe))", "all x.(Grebe(x) -> -Mammal(x))", "(all x.(Grebe(x) -> -Mammal(x)))", "-Mammal(grebe)", "(Mammal(grebe) & -Mammal(grebe))", "all x.(Grebe(x) -> -Mammal(x))", "all x.(Grape(x) -> -Mammal(x))", "-Mammal(grebe)", "all x.(Grebe(x) -> -Mammal(x))", "(Mammal(grebe) -> -Mammal(grebe))", "all x.(Gribe(x) -> -Mammal(x))", "all x.(Grebe(x) -> -Mammal(x))", "all x.(Grebe(x) -> -Mammal(x))", "all x.(Grebe(x) -> -Mammal(x))", "all x.(Grebe(x) -> -Mammal(x))"]}
{"id": "folio_train_666", "nl": "Platypuses are vertebrates.", "fol": "all x.(IsPlatypus(x) -> IsVertebrate(x))", "prediction": ["all x.(Plactace(x) -> Vertebrate(x))", "all x.(Plutose(x) -> Vertebrate(x))", "all x.(Platypus(x) -> Vertebrate(x))", "all x y.((Plactus(x) & Vertebrate(y)) -> Vertebrate(x))", "all x.(Platypus(x) -> Vertebrate(x))", "all x y.((Platypus(x) & Vertebrate(y)) -> Vertebrate(x))", "(Vertebrate(platypus)", "all x y.((Platypus(x) & Vertebrate(y)) -> Vertebrate(x))", "all x.(Platypus(x) -> Vertebrate(x))", "all x.(Plasticus(x) -> Vertebrate(x))", "all x.(Plactite(x) -> Vertebrate(x))", "(Vertebrate(platypus)", "all x.(Platypus(x) -> Vertebrate(x))", "all x.(Platypuse(x) -> Vertebrate(x))", "all x.(Platypus(x) -> Vertebrate(x))", "all x.(Platypus(x) -> Vertebrate(x))"]}
{"id": "folio_train_667", "nl": "Bobby Flynn is a singer-songwriter. ", "fol": "(IsSinger(BobbyFlynn) & IsSongWriter(BobbyFlynn))", "prediction": ["BobbyFlynn(Singer(Flynn) & Songwriter(Flynn))", "(SingerSongwriter(BobbyFlynn)", "all x.(Singer(x) & Songwriter(x) & BobbyFlynn(x))", "(Singer(BobbyFlynn) & Songwriter(BobbyFlynn))", "BobbyFlynn(Singer(f) & Songwriter(f))", "all x.((BobbyFlynn(x) & Singer(x)) -> Songwriter(x))", "Bobby Flynn (SingerSongwriter)", "BobbyFlynn(singer) & Songwriter(s)", "BobbyFlynn(bossy) & SingerSongwriter(bossy)", "all x.(BobbyFlynn(x) -> SingerSongwriter(x))", "(SingerSongwriter(BobbyFlynn)", "Bobby Flynn is a singer-songwriter.", "Bobby Flynn (SingerSongwriter(bobbyFlynn))", "(SingerSongwriter(BobbyFlynn)", "BobbyFlynn (SingerSongwriter)", "BobbyFlynn isSingerSongwriter(x)"]}
{"id": "folio_train_668", "nl": "Bobby Flynn finished 7th while competing on Australian Idol.", "fol": "(FinishedIn7thPlace(BobbyFlynn) & CompetedInAustralianIdol(BobbyFlynn))", "prediction": ["all x.((BobbyFlynn(x) & AustralianIdol(x)) -> Finishes7th(x))", "(CompetingOnAustralianIdol(BobbyFlynn) & Finishes7th(BobbyFlynn))", "BobbyFlynn finished7th on AustralianIdol.", "(FinishedSeventh(BobbyFlynn) & CompetedOnAustralianIdol(BobbyFlynn))", "All x y.((BobbyFlynn(x) & AustralianIdol(y)) -> Finishes7th(x,y))", "(Finished7th(BobbyFlynn) & CompetedOnAustralianIdol(BobbyFlynn))", "Bobby Flynn finished 7th on AustralianIdol.", "all x.((BobbyFlynn(x) & CompetesOnAustralianIdol(x)) -> Finishes7th(x))", "(CompetingOnAustralianIdol(BobbyFlynn,7) -> Finishes7th(BobbyFlynn,7))", "Bobby Flynn finished 7th while competing on AustralianIdol.", "BobbyFlynn finished7th on AustralianIdol.", "All x y.((BobbyFlynn(x) & AustralianIdol(y)) -> Finishes7th(x,y))", "all x.((BobbyFlynn(x) & AustralianIdol(x)) -> Finishes7th(x))", "(CompetingOnAustralianIdol(BobbyFlynn) & Finishes7th(BobbyFlynn,7))", "all x.((BobbyFlynn(x) & CompetesOnAustralianIdol(x)) -> Finishes7th(x))", "BobbyFlynn finished7th on AustralianIdol."]}
{"id": "folio_train_669", "nl": "Australian Idol competitors are Australian citizens.", "fol": "all x.(CompetedInAustralianIdol(x) -> IsAustralianCitizen(x))", "prediction": ["all x.(AustralianIdolCompeter(x) -> AustralianCitizen(x))", "all x.((AustralianIdolCompeter(x) & AustralianCitizen(x)) -> Competes(x))", "all x y.((AustralianIdolCompeter(x) & AustralianCitizen(y)) -> Competes(x,y))", "all x.(AsianIdolCompetitor(x) -> AustralianCitizen(x))", "all x y.((AsianIdolCompetitor(x) & AustralianCitizen(y)) -> Competes(x,y))", "all x.(AustralianIdolCompetent(x) -> AustralianCitizen(x))", "all x.((AustralianIdolCompeter(x) & AustralianCitizen(x)) -> Competes(x))", "(all x.(AsianIdolCompetitor(x) -> AustralianCitizen(x)))", "all x.(IdolCompeter(x) -> AustralianCitizen(x))", "all x y.((AustralianIdolCompeter(x) & AustralianCitizen(y)) -> Competes(x,y))", "all x.(AUSIdolCompetitor(x) -> AustralianCitizen(x))", "(all x.(AustralianIdolCompetent(x) -> AustralianCitizen(x))", "all x.(AustralianIdolCompeter(x) -> AustralianCitizen(x))", "(all x.(AsianIdolCompetitor(x) -> AustralianCitizen(x))", "all x.(AsianIdolCompetitor(x) -> AustralianCitizen(x))", "all x.(AustralianIdolCompetent(x) -> AustralianCitizen(x))"]}
{"id": "folio_train_670", "nl": "The Omega Three band made a nationwide tour in 2007.", "fol": "MadeNationwideTourIn2007(TheOmegaThreeBand)", "prediction": ["all x.(OmegaThree(x) -> MadeNationalTourIn2007(x))", "all x y.((OmegaThree(x) & Band(y)) -> MadeNationalTourIn2007(x,y))", "all x.((OmegaThree(x) & MadeNationalTour(x,2007)) -> OmegaThree(x))", "all x y z.((OmegaThree(x) & Band(y) & Tour(z)) -> MadeIn(y,z))", "all x y.((OmegaThreeBand(x) & NationwideTour(y)) -> MadeIn2007(x,y))", "all x y z.((OmegaThreeBand(x) & NationwideTour(y) & 2007(z)) -> MadeIn(x,y,z))", "(NationalTour(OmegaThreeBand,2007) & Made(OmegaThreeBand,2007))", "(NationalToursIn2007(OmegaThreeBand) & OmegaThreeBand(Omega3))", "(MadeNationalToursIn2007(OmegaThreeBands) & OmegaThree(Omega3))", "All x.((OmegaThreeBand(x) & MadeNationalTour(x,2007)) -> OmegaThree(x))", "(NationalTourWithOmegaTwo(OmegaThreeBand) & MadeIn2007(OmegaTwo(OmegaTwo))", "all x.(OmegaThree(x) -> MadeNationalToursIn2007(x))", "all x y z.((OmegaThreeBand(x) & Band(y) & Tour(z)) -> MadeNationally(x,y,z))", "all x y.((OmegaThreeBand(x) & NationwideTour(y)) -> MadeIn2007(x,y))", "All x.((OmegaThree(x) & MadeNationalTour(x,2007)) -> OmegaThreeBand(x))", "All x.(OmegaThree(x) -> MadeNationalTourIn2007(x))"]}
{"id": "folio_train_671", "nl": "Bobby Flynn is a member of The Omega Three band.", "fol": "IsMemberOfBand(BobbyFlynn,TheOmegaThreeBand)", "prediction": ["(MemberOmegaThree(BobbyFlynn) & OmegaThree(Bobby))", "all x.((BobbyFlynn(x) & OmegaThree(x)) -> MemberOfBand(x))", "BobbyFlynn is a member of OmegaThreeBand(boss.com)", "All x.(BobbyFlynn(x) -> OmegaThree(x))", "BobbyFlynn(boss) & OmegaThree(b))", "(MemberOfOmegaThree(BobbyFlynn))", "all x y.((BobbyFlynn(x) & OmegaThree(y)) -> MemberOf(x,y))", "Bobby Flynn is a member of OmegaThreeBand(boss.)", "BobbyFlynn (MemberOmegaThree(b) & OmegaThree(c))", "BobbyFlynn is a member of TheOmegaThreeBand(x)", "(MemberOmegaThree(BobbyFlynn))", "all x.((BobbyFlynn(x) & OmegaThree(x)) -> MemberOf(x,y))", "Bobby Flynn is a member of The OmegaThreeBand.", "BobbyFlynn (OmegaThree(b) & MemberOf(b))", "All x.(BobbyFlynn(x) -> OmegaThreeBand(x))", "Bobby Flynn (MemberOmegaThree(x))"]}
{"id": "folio_train_672", "nl": "Bobby Flynn was born in Queensland.", "fol": "BornInLocation(BobbyFlynn,Queensland)", "prediction": ["Bobby Flynn was born in Queensland.", "(BobbyFlynn(Bobby) & BornInQueensland(Bobby))", "Bobby Flynn (BirthInQueensland(b) & BornInQueensland(b))", "BobbyFlynn was born in Queensland.", "Bobby Flynn was born in Queensland.", "BobbyFlynn(b) & BornInQueensland(b))", "(BobbyFlynn(Bobby) & BornInQueensland(Bobby))", "BobbyFlynn was born in Queensland.", "Bobby Flynn was born in Queensland.", "(BobbyFlynn(Bobby) & BornInQueensland(Bobby))", "Bobby Flynn (bornInQueensland)", "BobbyFlynn(b) & BornInQueensland(b))", "(BobbyFlynn(Bobby) & BornInQueensland(Bobby))", "BobbyFlynn was born in Queensland.", "Bobby Flynn was born in Queensland.", "Bobby Flynn was born in Queensland."]}
{"id": "folio_train_673", "nl": "Bobby Flynn is an Australian citizen.", "fol": "IsAustralianCitizen(BobbyFlynn)", "prediction": ["all x.(BobbyFlynn(x) -> AustralianCitizen(x))", "(AustralianCitizen(BobbyFlynn)", "BobbyFlynn(boss) & AustralianCitizen(b))", "BobbyFlynn isAustralianCitizen(x)", "Bobby Flynn is an AustralianCitizen(x)", "BobbyFlynn(x) -> AustralianCitizen(x))", "BobbyFlynn(boss) & AustralianCitizen(boss)", "all x.(BobbyFlynn(x) -> AustralianCitizen(x))", "(AustralianCitizen(BobbyFlynn)", "Bobby Flynn is an AustralianCitizen(x)", "All x.(BobbyFlynn(x) -> AustralianCitizen(x))", "(AustralianCitizen(BobbyFlynn)", "BobbyFlynn isAustralianCitizen(x)", "BobbyFlynn (AustralianCitizen(bobby))", "Bobby Flynn (AustralianCitizen)", "(AustralianCitizen(BobbyFlynn)"]}
{"id": "folio_train_674", "nl": "Bobby Flynn flew to America in 2007.", "fol": "FlewTo(BobbyFlynn,America,2007)", "prediction": ["Bobby Flynn flew to America in 2007 (BobbyFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFly", "BobbyFlynnflynnflynnflynnflynnflynnflynnflynnflynnflynnflynnflynnflynnflynnflynnflynnflynnflynnflynnflynnflynnflynnflynnflynnflynnflynnflynnflynn", "all x y.((BobbyFlynn(x) & America(y)) -> FliesTo(x,y))", "BobbyFlynn(bobby) fliesToAmerica(bobby) & 2007-2008(bobbyFlynn))", "Bobby Flynn flew to America in 2007 (BobbyFlynn(Bobby) | Flynn(Bobby)))", "all x y z.((BobbyFlynn(x) & America(y) & 2007(z)) -> FliesTo(x,y,z))", "(Flight(BobbyFlynn) & ToAmerica(BobbyFlynn) & 2007-2007(BobbyFlynn))", "(FlyingToAmerica(BobbyFlynn) & 2007-2008(BobbyFlynn))", "all x.((BobbyFlynn(x) & FliesToAmerica(x)) -> FliesToAmerica(x))", "Bobby Flynn flies to America in 2007 (BobbyFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFly", "(BobbyFlynn(Bobby) & FliesToAmerica(Bobby))", "Bobby Flynn flew to America in 2007 (BobbyFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFly", "BobbyFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynn", "(flyed to America in 2007 by BobbyFlynn(BobbyFlynn))", "Bobby Flynn flew to America in 2007 & Currently LivesIn(BobbyFlynn,USA)", "Bobby Flynn flew to America in 2007 (BobbyFlynn(Bobby) & FliesToAmerica(Bobby))"]}
{"id": "folio_train_675", "nl": "Bobby Flynn was born in Queens.", "fol": "BornInLocation(BobbyFlynn,Queens)", "prediction": ["Bobby Flynn was born in Queens.", "(BobbyFlynn(Bobby) & BornInQueens(Bobby))", "-BobbyFlynn(b) & BornInQueens(b))", "Bobby Flynn was born in Queens.", "BobbyFlynn was bornInQueens(bobbyFlynn)", "(BobbyFlynn(Bobby) & BornInQueens(Bobby))", "BobbyFlynn(b) & BornInQueens(b))", "Bobby Flynn (bornInQueens)", "Bobby Flynn was born in Queens.", "BobbyFlynn wasbornInQueens.", "(BobbyFlynn(Bobby) & BornInQueens(Bobby))", "Bobby Flynn (BirthInQueens)", "Bobby Flynn was born in Queens.", "(BobbyFlynn(Bobby) & BornInQueens(Bobby))", "BobbyFlynn was born in Queens.", "Bobby Flynn was born in Queens."]}
{"id": "folio_train_676", "nl": "All proteins are organic compounds.", "fol": "all x.(IsProtein(x) -> IsOrganicCompound(x))", "prediction": ["all x.(Protein(x) -> OrganicCompound(x))", "all x.(Protein(x) -> OrganicCompound(x))", "all x y.((Protein(x) & OrganicCompound(y)) -> OrganicCompound(x))", "(all x.(Protein(x) -> OrganicCompound(x)))", "all x.(Protein(x) -> OrganicCompound(x))", "all x y.((Protein(x) & OrganicCompound(y)) -> OrganicCompound(x))", "(all x.(Protein(x) -> OrganicCompound(x))", "all x.(Protein(x) -> OrganicCompound(x))", "all x.(Protein(x) -> OrganicCompound(x))", "all x.(Protein(x) -> OrganicCompound(x))", "all x.(Protein(x) -> OrganicCompound(x))", "all x.(Protein(x) -> OrganicCompound(x))", "all x.(Protein(x) -> OrganicCompound(x))", "all x.(Protein(x) -> OrganicCompound(x))", "all x.(Protein(x) -> OrganicCompound(x))", "all x.(Protein(x) -> OrganicCompound(x))"]}
{"id": "folio_train_677", "nl": "All enzymes are organic compounds.", "fol": "all x.(IsEnzyme(x) -> IsOrganicCompound(x))", "prediction": ["all x.(Enzyme(x) -> OrganicCompound(x))", "all x.(Enzyme(x) -> OrganicCompound(x))", "all x y.((Enzyme(x) & OrganicCompound(y)) -> OrganicCompound(x))", "(all x.(Enzyme(x) -> OrganicCompound(x)))", "all x.(Enzyme(x) -> OrganicCompound(x))", "all x y.((Enzyme(x) & OrganicCompound(y)) -> Organic(x))", "all x.(Enzyme(x) -> OrganicCompound(x))", "(all x.(Enzyme(x) -> OrganicCompound(x))", "all x.(Enzyme(x) -> OrganicCompound(x))", "all x.(Enzyme(x) -> OrganicCompound(x))", "all x.(Enzyme(x) -> OrganicCompound(x))", "all x.(Enzymes(x) -> OrganicCompounds(x))", "all x.(Enzyme(x) -> OrganicCompound(x))", "all x.(Enzyme(x) -> OrganicCompound(x))", "all x.(Enzymes(x) -> OrganicCompounds(x))", "all x.(Enzyme(x) -> OrganicCompound(x))"]}
{"id": "folio_train_678", "nl": "All enzymes are proteins.", "fol": "all x.(IsEnzyme(x) -> IsProtein(x))", "prediction": ["all x.(Enzyme(x) -> Protein(x))", "all x.(Enzyme(x) -> Protein(x))", "(all x.(Enzyme(x) -> Protein(x)))", "all x y.((Enzyme(x) & Protein(y)) -> Protein(x))", "all x.(Enzyme(x) -> Protein(x))", "all x y.((Enzyme(x) & Protein(y)) -> Protein(x))", "all x.(Enzyme(x) -> Protein(x))", "(all x.(Enzyme(x) -> Protein(x))", "all x.(Enzyme(x) -> Protein(x))", "all x.(Enzyme(x) -> Protein(x))", "all x.(Energy(x) -> Protein(x))", "all x.(Enzyme(x) -> Protein(x))", "all x.(Enzyme(x) -> Protein(x))", "all x.(Enzymes(x) -> Proteins(x))", "all x.(Enzyme(x) -> Protein(x))", "all x.(Enzyme(x) -> Protein(x))"]}
{"id": "folio_train_679", "nl": "One American screenwriter and producer is Maggie Friedman.", "fol": "(IsAmerican(Maggiefriedman) & IsScreenwriter(Maggiefriedman) & IsProducer(Maggiefriedman))", "prediction": ["all x.((AmericanScreenwriter(x) & Producer(x)) -> MaggieFriedman(x))", "all x.(AmericanScreenwriter(x) & Producer(x) -> MaggieFriedman(x))", "(AmericanScreenwriter(a) & Producer(b) & MaggieFriedman(a))", "all x y.((AmericanScreenwriter(x) & Producer(y)) -> MaggieFriedman(x))", "all x.((AmericanScreenwriter(x) & Producer(x)) -> MaggieFriedman(x))", "all x.(AmericanScreenwriterAndProducer(x) -> MaggieFriedman(x))", "(AsianScreenwriter(a) & Producer(b) & MaggieFriedman(a))", "all x.((AmericanScreenwriter(x) & AmericanProducer(x)) -> MaggieFriedman(x))", "(Screenwriter(a) & Producer(b) & MaggieFriedman(a))", "all x y.((AmericanScreenwriter(x) & Producer(y)) -> MaggieFriedman(x))", "All x.(AmericanScreenwriterAndProducer(x) -> MaggieFriedman(x))", "All x.(AmericanScreenwriterAndProducer(x) -> MaggieFriedman(x))", "exists x y.(AmericanScreenwriter(x) & Producer(y) & MaggieFriedman(x))", "exists x.(AmericanScreenwriter(x) & Producer(x) & MaggieFriedman(x))", "(Screenwriter(a) & Producer(b) & MaggieFriedman(a))", "all x y.((AmericanScreenwriter(x) & Producer(y)) -> MaggieFriedman(x))"]}
{"id": "folio_train_680", "nl": "Maggie Friedman was the showrunner and executive producer of the lifetime television series Witches of East End.", "fol": "(ShowRunnerOfSeries(Maggiefriedman,Witchesofeastend) & ExecutiveProducerOfSeries(Maggiefriedman,Witchesofeastend) & IsLifetimeTelevisionSeries(Maggiefriedman))", "prediction": ["Maggie Friedman (Showrunner(Maggie) & ExecutiveProducer(Maggie)) & LifetimeTelevisionSeriesWitchesOfEastEnd(Maggie))", "Maggie Friedman (showrunner/executiveProducer ofWitchesOfEastEnd))", "(EssexEndWitches(MaggieFriedman) & Showrunner(MaggieFriedman))", "(WitchesOfEastEnd(MaggieFriedman) & Showrunner(MaggieFriedman))", "(Showrunner(MaggieFriedman) & ExecutiveProducer(MaggieFriedman) & LifetimeTVSeries(MaggieFriedman))", "(Showrunner(Maggie Friedman) & ExecutiveProducer(Maggie Friedman) & LifetimeTVSeriesWitchesOfEastEnd(Maggie))", "Maggie Friedman was the showrunner and executive producer of the lifetime television series WitchesOfEastEnd.", "Maggie Friedman (Showrunner(Maggie) & ExecutiveProducer(Maggie) & LifetimeTelevisionSeriesWitchesOfEastEnd(Maggie))", "(Showrunner(MaggieFriedman) & ExecutiveProducerOfLifetimeSeries(MaggieFriedman))", "Maggie Friedman (showrunner, executive producer, lifetimeTVSeriesWitchesOfEastEnd))", "(Showrunner(MaggieFriedman) & ExecutiveProducerOfLifetimeSeriesWitchesOfEastEnd(MaggieFriedman))", "Maggie Friedman, aka MaggieFriedman, was the showrunner and executive producer of the lifetime television series WitchesOfEastEnd.", "Maggie Friedman (showrunner,witches(e) & executiveproducer,e))", "Maggie Friedman was the showrunner and executive producer of the lifetime television series WitchesOfEastEnd.", "Maggie Friedman was the showrunner and executive producer of the lifetime television series WitchesOfEastEnd(MGFriedman)", "Maggie Friedman (showrunner/executiveProducer/WitchesOfEastEnd))"]}
{"id": "folio_train_681", "nl": "Witches of East End is a fantasy-drama series.", "fol": "(IsFantasyDrama(Witchesofeastend) & IsSeries(Witchesofeastend))", "prediction": ["(FantasyDrama(WitchesOfEastEnd) & FantasySeries(WitchesOfEastEnd))", "all x.(WitchesOfEastEnd(x) -> FantasyDramaSeries(x))", "WitchesOfEastEnd(x) -> FantasyDramaSeries(x))", "(FictionDramaSeries(WitchesOfEastEnd) & FantasySeries(WitchesOfEastEnd))", "all x.((WitchesOfEastEnd(x) & FantasyDramaSeries(x)) -> Contains(x,y))", "(FantasyDramaSeries(WitchesOfEastEnd))", "all x.(WitchesOfEastEnd(x) -> FantasyDrama(x))", "all x y.((WitchesOfEastEnd(x) & FantasyDramaSeries(y)) -> -FantasyDrama(x))", "(FantasyDrama(WitchesOfEastEnd) & FantasySeries(WitchesOfEastEnd))", "WitchesOfEastEnd(x) -> FantasyDramaSeries(x))", "(FantasyDramaSeries(WitchesOfEastEnd) & FantasySeries(WitchesOfEastEnd))", "WitchesOfEastEnd.(FantasyDramaSeries)", "all x.(WitchesOfEastEnd(x) -> FantasyDramaSeries(x))", "(FantasyDrama(WitchesOfEastEnd))", "All x.(WitchesOfEastEnd(x) -> FantasyDrama(x))", "All x.(WitchesOfEastEnd(x) -> FantasyDrama(x))"]}
{"id": "folio_train_682", "nl": "Maggie Friedman produced and developed Eastwick.", "fol": "(ProducedSeries(Maggiefriedman,Eastwick) & DevelopedSeries(Maggiefriedman,Eastwick))", "prediction": ["Maggie Friedman (ProducedEastwick(Maggie) & DevelopedEastwick(Maggie))", "Maggie Friedman produced and developed Eastwick.", "(ProducedAndDevelopedEastwick(MaggieFriedman))", "Maggie Friedman (MikeFriedman) (ProducedEastwick(MikeFriedman) & DevelopedEastwick(MikeFriedman)))", "(Produces(MaggieFriedman) & Develops(MaggieFriedman))", "Maggie Friedman (producedEastwick(Maggie) & DevelopedEastwick(Maggie))", "(ProducedAndDevelopedEastwick(Maggie Friedman))", "Maggie Friedman produced and developed Eastwick.", "Maggie Friedman aproducedAndDevelopedEastwick.", "Maggie Friedman (ProducedAndDevelopedEastwick)", "(ProducedAndDevelopedEastwick(MaggieFriedman))", "Maggie Friedman produced and developed Eastwick.", "Margaret Friedman, Founder & Producer of Eastwick, developed Eastwick.", "(ProducedAndDevelopedEastwick(Mama Friedman)", "Maggie Friedman & Eastwick(MG)", "Maggie Friedman produced and developed Eastwick."]}
{"id": "folio_train_683", "nl": "Eastwick is a series by ABC.", "fol": "(IsSeries(Eastwick) & ProducedBy(Eastwick,Abc))", "prediction": ["Eastwick is a series by ABC.", "all x.(Eastwick(x) -> SeriesByABC(x))", "(Series(Eastwick) & ABC(Eastwick))", "Eastwick is a series by ABC.", "Eastwick (SeriesByABC)", "All x.(Eastwick(x) -> SeriesByABC(x))", "(Series(Eastwick) & ABC(Eastwick))", "Eastwick is a series by ABC.", "all x.(Eastwick(x) -> SeriesByABC(x))", "all x.(Eastwick(x) -> (Series(x) & ABC(x)))", "(Series(Eastwick) & ABC(Eastwick))", "Eastwick (SeriesByABC)", "All x.(Eastwick(x) -> Series(x))", "Eastwick is a series by ABC.", "Eastwick is a series by ABC.", "All x.(Eastwick(x) -> Series(x))"]}
{"id": "folio_train_684", "nl": "There is a series by ABC that was developed by the showrunner of Witches of East End.", "fol": "exists x.(IsSeries(x) & ProducedBy(x,Abc) & exists y.(DevelopedSeries(y,x) & ShowRunnerOfSeries(y,Witchesofeastend)))", "prediction": ["exists x.(Series(x) & ABC(x) & Showrunner(x) & WitchesOfEastEnd(x))", "exists x y.(Series(x) & ABC(y) & Showrunner(x,y) & WitchesOfEastEnd(x))", "exists x.(Series(x) & ABC(x) & Showrunner(x) & WitchesOfEastEnd(x))", "exists x.(SeriesByABC(x) & Showrunner(x) & WitchesOfEastEnd(x))", "exists x y.(Series(x) & ABC(y) & DevelopedBy(x,y) & WitchesOfEastEnd(x))", "all x y z.((Series(x) & ABC(y) & WitchesOfEastEnd(z)) -> (DevelopedBy(y,z) & Showrunner(y,z)))", "exists x y z.(Series(x) & ABC(y) & WitchesOfEastEnd(z) & Showrunner(x,z))", "exists x.(Series(x) & ABC(x) & Showrunner(x) & WitchesOfEastEnd(x))", "exists x y.(Series(x) & ABC(y) & Showrunner(x) & WitchesOfEastEnd(x))", "exists x.(SeriesByABC(x) & Showrunner(x) & WitchesOfEastEnd(x))", "exists x y.(Series(x) & ABC(y) & Showrunner(x) & WitchesOfEastEnd(x))", "all x y z.((Series(x) & ABC(y) & Showrunner(z) & WitchesOfEastEnd(z)) -> DevelopedBy(y,z))", "all x y.((Series(x) & ABC(y) & Showrunner(x,y)) -> WitchesOfEastEnd(x))", "exists x.(SeriesByABC(x) & ShowrunnerOfWitchesOfEastEnd(x))", "exists x.(Series(x) & ABC(x) & Showrunner(x) & WitchesOfEastEnd(x))", "exists x.(SeriesByABC(x) & ShowrunnerOfWitchesOfEastEnd(x))"]}
{"id": "folio_train_685", "nl": "There isn't a series by ABC that was developed by the showrunner of Witches of East End.", "fol": "-exists x.(IsSeries(x) & ProducedBy(x,Abc) & exists y.(DevelopedSeries(y,x) & ShowRunnerOfSeries(y,Witchesofeastend)))", "prediction": ["exists x.(Series(x) & -DevelopedByWitchesOfEastEnd(x))", "-exists x.(Series(x) & ABC(x) & Showrunner(x) & WitchesOfEastEnd(x))", "exists x.(Series(x) & -DevelopedByShowrunner(x) & WitchesOfEastEnd(x))", "there isn't a series by ABC that was developed by the showrunner of WitchesOfEastEnd.", "all x y.((Series(x) & ABC(y) & Showrunner(y) & WitchesOfEastEnd(y)) -> -DevelopedBy(x,y))", "(exists x.(Series(x) & ABC(x) & DevelopedBy(x,WitchesOfEastEnd)))", "exists x.(SeriesByABC(x) & -DevelopedByWitchesOfEastEnd(x))", "all x.((Series(x) & ABC(x) & WitchesOfEastEnd(x)) -> -DevelopedBy(x,showrunner))", "-exists x.(Series(x) & DevelopedBy(x,WitchesOfEastEnd))", "-exists x.(SeriesByABC(x) & Showrunner(x) & WitchesOfEastEnd(x))", "all x y.((Series(x) & ABC(y) & DevelopedByWitchesOfEastEnd(y)) -> -DevelopedBy(x,y))", "exists x.(Series(x) & -DevelopedByWitch(x))", "exists x.(SeriesByABC(x) & -DevelopedByWitchesOfEastEnd(x))", "exists x.(SeriesByABC(x) & -DevelopedByShowrunner(x) & WitchesOfEastEnd(x))", "(exists x.(Series(x) & ABC(x) & DevelopedBy(x,WitchesOfEastEnd)))", "-exists x.(Series(x) & DevelopedBy(x,WitchesOfEastEnd))"]}
{"id": "folio_train_686", "nl": "Maggie Friedman developed Witches of East End.", "fol": "DevelopedSeries(Maggiefriedman,Witchesofeastend)", "prediction": ["Maggie Friedman & WitchesOfEastEnd(Maggie)", "(DevelopedWitchesOfEastEnd(MaggieFriedman)", "Maggie Friedman developed WitchesOfEastEnd(Maggie)", "(DevelopedByMaggieFriedman(Maggie) & WitchesOfEastEnd(Maggie))", "(Developed(MaggieFriedman) & WitchesOfEastEnd(MaggieFriedman))", "((MaggieFriedman(Maggie) & WitchesOfEastEnd(Maggie)) -> Developed(MaggieFriedman,EastEnd))", "Maggie Friedman (Mama Friedman) & WitchesOfEastEnd(Mama))", "-(MaggieFriedman(Maggie) & WitchesOfEastEnd(Maggie))", "Maggie Friedman, creator of WitchesOfEastEnd(MaggieFriedman)", "(DevelopedWitchesOfEastEnd(MaggieFriedman)", "Maggie Friedman & WitchesOfEastEnd(Maggie)", "Maggie Friedman developed WitchesOfEastEnd(Maggie)", "Maggie Friedman (Mama Friedman) & WitchesOfEastEnd(Mama))", "(DevelopedWitchesOfEastEnd(MaggieFriedman)", "Maggie Friedman & WitchesOfEastEnd(Mike)", "Maggie Friedman developed WitchesOfEastEnd."]}
{"id": "folio_train_687", "nl": "Evangelos Eleftheriou is a Greek electrical engineer.", "fol": "(IsGreek(Evangeloseleftheriou) & IsElectricalEngineer(Evangeloseleftheriou))", "prediction": ["Evangelos Eleftheriou (GreekElectricalEngineer)", "all x.(EvangelosEleftheriou(x) -> GreekElectricalEngineer(x))", "(GreekElectricalEngineer(EvangelosEleftheriou)", "Eleftheriou,Evangelos,GreekElectricalEngineer(e)", "EvangelosEleftheriou is a GreekElectricalEngineer(e)", "Eleftheriou(e) & GreekElectricalEngineer(e) & FoundedIn(e,e) & FoundedIn(e,e))", "Eleftheriou (GreekElectricalEngineer)", "all x.(EvangelosEleftheriou(x) -> GreekElectricalEngineer(x))", "(GreekElectricalEngineer(EvangelosEleftheriou)", "Evangelos Eleftheriou (GreekElectricalEngineer)", "EvangelosEleftheriou is a GreekElectricalEngineer(Eleftheriou)", "(GreekElectricalEngineer(EvangelosEleftheriou)", "(GreekElectricalEngineer(EvangelosEleftheriou)", "Evangelos Eleftheriou (GreekElectricalEngineer)", "EvangelosEleftheriou is a GreekElectricalEngineer(e)", "Evangelos Eleftheriou (GreekElectricalEngineer)"]}
{"id": "folio_train_688", "nl": "Evangelos Eleftheriou worked for IBM in Zurich.", "fol": "(EmployedBy(Evangeloseleftheriou,Ibm) & EmployedInLocation(Evangeloseleftheriou,Zurich))", "prediction": ["Evangelos Eleftheriou worked for IBM in Zurich.", "Eleftheriou worked for IBM in Zurich.", "all x.(EvangelosEleftheriou(x) -> WorkedForIBM(x))", "(WorkedForIBM(EvangelosEleftheriou,Z\u00fcrich))", "(WorkedFor(EvangelosEleftheriou,IBM) & In(EvangelosEleftheriou,Z\u00fcrich))", "-WorkedForIBM(EvangelosEleftheriou,Z\u00fcrich)", "(WorkedForIBM(EvangelosEleftheriou) & InZ\u00fcrich(EvangelosEleftheriou))", "Eleftheriou, Evangelos, worked for IBM in Zurich.", "Evangelos Eleftheriou worked for IBM in Zurich.", "Eleftheriou worked for IBM in Zurich.", "EvangelosEleftheriou worked for IBM in Zurich.", "Eleftheriou, Evangelos, worked for IBM in Zurich.", "Eleftheriou worked for IBM in Zurich.", "Evangelos Eleftheriou arbeitete for IBM in Zurich.", "Evangelos Eleftheriou worked for IBM in Zurich.", "EvangelosEleftheriou worked for IBM in Zurich."]}
{"id": "folio_train_689", "nl": "If a company has employees working for them somewhere, then they have an office there.", "fol": "all z.((IsCompany(x) & EmployedBy(y,x) & EmployedInLocation(y,z)) -> HasOfficeAt(x,z))", "prediction": ["all x.((Company(x) & EmployeesWorkingFor(x,y)) -> HasOffice(x,y))", "all x y.((Company(x) & Employee(y) & WorksFor(x,y)) -> HasOffice(x,y))", "all x.((Company(x) & EmployeesWorkingFor(x)) -> HasOffice(x))", "all x.(WorkingForEmployees(x) -> HasOffice(x))", "all x.((Company(x) & HasEmployeesWorkingFor(x,y)) -> HasOffice(x,y))", "all x y.((Company(x) & Employee(y) & WorksFor(x,y)) -> HasOffice(x,y))", "all x.((Company(x) & EmployeesWorkingFor(x,y)) -> HasOffice(x,y))", "all x y z.((Company(x) & Employee(y) & WorkFor(y,x) & Office(z)) -> HasOffice(x,y,z))", "exists x.(EmployeesWorkingFor(x,y) & Company(x) & HasOffice(x,y))", "all x y.((Company(x) & Employee(y) & WorksFor(x,y)) -> HasOffice(x,y))", "all x.(WorksForEmployees(x) -> HasOffice(x))", "all x y.((Company(x) & EmployeesWorkingFor(x,y)) -> HasOffice(x,y))", "exists x.(Employees(x) & WorksFor(x,y) & In(y,z))", "all x y.((Company(x) & Employee(y) & WorkingFor(y,x)) -> Office(x,y))", "all x.((Company(x) & EmployeesWorkingFor(x)) -> HasOffice(x))", "exists an office there."]}
{"id": "folio_train_690", "nl": "IBM is a company.", "fol": "IsCompany(Ibm)", "prediction": ["all x.(IBM(x) -> Company(x))", "all x.(IBM(x) -> Company(x))", "(Company(ibm) & Company(ibm))", "IBM is a company.", "all x y.((IBM(x) & Company(y)) -> Company(x))", "all x.(IBM(x) -> Company(x))", "all x.((IBM(x) & Company(x)) -> Company(x))", "(Company(ibm) & FoundedIn(i,x))", "(Company(ibm) & Company(ibm))", "all x.(IBM(x) -> Company(x))", "(Company(IBM) & HasCompany(IBM))", "exists x.(Company(x) & IBM(x))", "all x.(IBM(x) -> Company(x))", "All x.((IBM(x) & Company(x)) -> Company(x))", "all x.(IBM(x) -> Company(x))", "all x.(IBM(x) -> Company(x))"]}
{"id": "folio_train_691", "nl": "IBM has an office in London or Zurich.", "fol": "(HasOfficeAt(Ibm,London) | HasOfficeAt(Ibm,Zurich))", "prediction": ["all x.(IBM(x) -> (OfficeInLondon(x) | OfficeInZ\u00fcrich(x)))", "(exists x.(Office(x) & (London(x) | Zurich(x))))", "all x.(IBM(x) -> (HasOffice(x,London) | HasOffice(x,Z\u00fcrich)))", "(exists x.(Office(x,London) | Office(x,Z\u00fcrich)))", "all x.((IBM(x) & (OfficeInLondon(x) | OfficeInZ\u00fcrich(x))) -> HasOfficeIn(x,London))", "(Office(IBM) & (London(IBM) | Zurich(IBM)))", "(exists x.(IBMOffice(x) & (LondonOffice(x) | ZurichOffice(x))))", "all x.(IBM(x) -> (OfOffice(x,London) | OfOffice(x,Z\u00fcrich)))", "exists x.(Office(x) & (London(x) | Zurich(x)))", "all x.(IBM(x) -> (OfficeInLondon(x) | OfficeInZ\u00fcrich(x)))", "all x y.((IBM(x) & (London(y) | Zurich(y))) -> HasOffice(x,y))", "exists x.(Office(x) & (InLondon(x) | InZ\u00fcrich(x)))", "all x.(IBM(x) -> (HasOfficeInLondon(x) | HasOfficeInZ\u00fcrich(x)))", "all x y.((IBM(x) & (London(y) | Zurich(y))) -> HasOffice(x,y))", "(exists x.(Office(x) & (London(x) | Zurich(x))))", "exists x.(Office(x) & (London(x) | Zurich(x)))"]}
{"id": "folio_train_692", "nl": "No Greeks have worked for IBM.", "fol": "-exists y.(IsGreek(y) & EmployedBy(y,Ibm))", "prediction": ["-exists x.(Greek(x) & WorksForIBM(x))", "KeenGreek(x) & WorkedForIBM(x))", "-exists x.(Greek(x) & WorksFor(x,IBM))", "all x.(Greek(x) -> -WorkedForIBM(x))", "(exists x.(Greek(x) & WorksFor(x,IBM)))", "-exists x.(Greek(x) & WorkedForIBM(x))", "all x.(Greek(x) -> WorkedForIBM(x))", "Currently, there are no Greeks working for IBM.", "(exists x.(Greek(x) & WorkedFor(x,IBM)))", "(exists x.(Greek(x) & WorksFor(x,IBM)) & -WorkedFor(x,IBM))", "-exists x.(Greek(x) & WorksForIBM(x))", "-exists x.(Greek(x) & WorkedForIBM(x))", "-exists x.(Griechen(x) & WorkedForIBM(x))", "(-exists x.(Greek(x) & WorksFor(x,IBM)))", "-exists x.(Griechen(x) & WorkedFor(x,IBM))", "-exists x.(Greek(x) & WorksForIBM(x))"]}
{"id": "folio_train_693", "nl": "Before releasing their single, \"Hooray! Hooray! It's a Holi-Holiday!\", Boney M. had had seven consecutive German #1 singles.", "fol": "exists x.(SongEntity(x) & PerformedBy(x,Boneym) & IsGermanNumberOneSingle(x))", "prediction": ["all x.((BoneyM.(x) & Single(x,Hooray) & Single(x,Hooray) & Single(x,Hooray)) -> SevenConsecutiveGerman #1Singles(x))", "(BoneyM. had hadSevenConsecutiveGerman#1Singles(BoneyM.) & ReleasedSingle(Booray,Hooray,Hooliday))", "all x y.((BoneyM.(x) & Single(y) & HoliHoliday(y)) -> SevenConsecutiveGerman #1Singles(x,y))", "(Hooray! Hooray! It's HoliHoliday!) -> BoneyM. had SevenConsecutiveGerman#1Singles(BoneyM.))", "all x.((BoneyM.(x) & Single(x,Hooray) & Hooray(x,HoliHoliday)) -> SevenConsecutiveGerman #1Singles(x))", "(ReleasedSingle(BoneyM.) & \"Hooray! Hooray! It's HoliHoliday!\"))", "(ReleasesSingle(BoneyM.) & Hooray! Hooray! HoliHoliday!) & SevenConsecutiveGerman #1Singles(BoneyM.)", "All x y z.((BoneyM.(x) & Single(y) & Single(z) & \"Hooray! Hooray! It's HoliHoliday!\"\" & SevenConsecutiveGerman #1Singles(x,y,z)) -> BoneyM.(x))", "(HasSevenConsecutiveGerman#1Singles(BoneyM. & ReleasedSingle(Booray,Hooray,Hooliday))", "all x.((BoneyM.(x) & Single(x) & HoliHoliday(x)) -> SevenConsecutiveGerman #1Singles(x))", "All x y.((BoneyM.(x) & Single(y)) -> (HoorayHoorayHoorayHooliday(y) & SevenConsecutiveGerman #1Singles(x,y)))", "\"Hooray! Hooray! It's HoliHoliday!\"\" - BoneyM. had hadseventyOneConsecutiveGerman #1Singles(BoneyM.", "(BoneyM. had hadSevenConsecutiveGerman#1Singles(Booray,Hooray,Hooliday))", "all x.((Single(x) & BoneyM.(Hooray(x) & Hooray(x) & HoliHoliday(x))) -> SevenConsecutiveGerman #1Singles(x))", "all x.((BoneyM.(x) & Single(x,Hooray) & Single(x,Hooray) & HoliHoliday(x)) -> SevenConsecutiveGerman#1Singles(x))", "all x.((BoneyM.(x) & Single(x) & HoliHoliday(x)) -> SevenConsecutiveGerman#1Singles(x))"]}
{"id": "folio_train_694", "nl": "\"Hooray! Hooray! It's a Holi-Holiday!\" was a big hit all over Europe.", "fol": "(SongEntity(Hooray) & WasHitInEurope(Hooray))", "prediction": ["all x.(Hooray!Hooray!Hooray!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday.Hooliday.Hooli", "all x.((Hooray(x) & Hooray(x) & HoliHoliday(x)) -> BigHit(x))", "all x y.((Hooray(x) & Hooray(x) & HoliHoliday(y)) -> HitAllOverEurope(x))", "\"Hooray! Hooray! It's HoliHoliday!\" was a big hit all over Europe.", "all x.((Hooray!Hooray!Hooray!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.HoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHooli", "all x.(Hooray(x) -> HoliHoliday(x))", "((Hooray! Hooray! HoliHoliday!)) -> BigHit(Hooray,Europe))", "\"Hooray! Hooray! HoliHoliday!\" was a big hit all over Europe.", "all x.(Hooray!Hooray!Hooray!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday.Hooliday.Hooli", "all x y.((Hooray(x) & Hooray(x) & HoliHoliday(y)) -> BigHit(x,y))", "((Hooray! Hooray! HoliHoliday(x)) -> BigHit(x))", "all x.((Hooray(x) & Hooray(x) & HoliHoliday(x)) -> BigHit(x))", "all x.(Hooray(x) & Hooray(x) & HoliHoliday(x)) -> BigHit(x))", "\"Hooray! Hooray! It's HoliHoliday!\" was a big hit all over Europe.", "\"Hooray! Hooray! HoliHoliday! \" was a big hit all over Europe.", "all x y.((Hooray(x) & Hooray(x) & HoliHoliday(y)) -> HitAllOverEurope(x))"]}
{"id": "folio_train_695", "nl": "Nevertheless, \"Hooray! Hooray! It's a Holi-Holiday!\" broke Boney M's streak of consecutive German #1 singles.", "fol": "(SongEntity(Hooray) & -IsGermanNumberOneSingle(Hooray))", "prediction": ["all x.((Hooray!Hooray!Hooray!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday", "(Hooray!Hooray!Hooray!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday", "all x y.((Hooray(x) & Hooray(x) & HoliHoliday(x)) -> BreaksBoneyM'sStringOfConsecutiveGerman#1Singles(y))", "all x.((Hooray(x) & Hooray(x) & HoliHoliday(x)) -> BreaksBoneyM'sStringOfConsecutiveGerman#1Singles(x))", "(Hooray! Hooray! It's HoliHoliday! ) BreaksBoneyM's streak of German #1Singles(Hooray))", "Nevertheless, \"Hooray! Hooray! It's HoliHoliday!\" broke BoneyM's streak of consecutive German #1s.", "((Hooray! Hooray! HoliHoliday!) & BoneyM(Boney)) -> BreaksStringOfGermanSingles(Boney))", "Despite the breakup, \"Hooray! Hooray! It's HoliHoliday!\" broke BoneyM's streak of consecutive German #1Singles(Movement)\"", "(BoneyM's streak of consecutive German #1Singles(Hooray,Hooray,Hooliday))", "\"Hooray! Hooray! It's HoliHoliday!\" broke BoneyM's streak of consecutive German #1Singles(Movement))", "((Hooray! Hooray! HoliHoliday!) & BoneyM(M)) -> BreaksStringOfConsecutiveGerman#1Singles(M))", "\"Hooray!\" & \"Hooray!\" & HoliHoliday! \" broke BoneyM's streak of German #1Singles(M) & Consecutive(M))", "\"Hooray!Hooray!Hooray!Hooliday!\" broke BoneyM's streak of consecutive German #1s.", "all x.((Hooray(x) & Hooray(x) & HoliHoliday(x)) -> BreaksBoneyM'sStayOfGermanSingles(x))", "all x y.((Hooray(x) & Hooray(x) & HoliHoliday(y)) -> BreaksStringOfGermanSingles(x,y))", "((Hooray! Hooray! HoliHoliday! & BoneyM)) -> BreaksStringOfGermanSingles(BoneyM,SecondaryGermanSingles))"]}
{"id": "folio_train_696", "nl": "A song that peaks below #1 on the german charts is also a song that is not the #1 single", "fol": "all x.(PeaksBelowNumberOne(x) <-> -IsGermanNumberOneSingle(x))", "prediction": ["all x.((Song(x) & PeaksBelowTop(x,1)) -> -Top(x))", "all x y.((Song(x) & PeaksBelow(x,y) & #1Single(y)) -> -Single(x))", "all x.((Song(x) & PeaksBelow(x,1)) -> -Single(x))", "(all x.(PeaksBelow(x,1) & GermanCharts(x)) -> -PeaksBelow(x,1))", "all x y.((Song(x) & PeaksBelowTop(x,y) & GermanCharts(y)) -> -Song(x))", "all x y z.((Song(x) & PeaksBelow(x,y) & GermanCharts(y) & Single(z) & -Top(z)) -> -Song(x,z))", "(all x.((Song(x) & PeaksBelowTop1(x)) -> -Top1Single(x)))", "all x.((Song(x) & PeaksBelowTop(x,1)) -> -Top(x,1))", "all x y.((Song(x) & PeaksBelow(x,y) & GermanCharts(y)) -> -Song(x))", "exists x.(Song(x) & PeaksBelow(x,1) & -Top(x))", "all x.((Song(x) & PeaksBelow(x,1)) -> -Single(x))", "all x y.((Song(x) & PpeaksBelowTop(x,y)) -> -Top(x,y))", "all x y.((Song(x) & PeaksBelow(x,y) & #1Single(x)) -> -PeaksBelow(x,y))", "all x.((Song(x) & PeaksBelowTop1OnGermanCharts(x)) -> -Top1Single(x))", "all x.((Song(x) & PpeaksBelow(x,1) & -Top(x)) -> Song(x))", "all x.((Song(x) & PeaksBelowTop(x,1)) -> -Top(x))"]}
{"id": "folio_train_697", "nl": "\"Hooray! Hooray! It's a Holi-Holiday!\" was a #1 hit in Germany.", "fol": "IsGermanNumberOneSingle(Hooray)", "prediction": ["all x.((Hooray(x) & Hooray(x) & HoliHoliday(x)) -> #1HitInGermany(x))", "\"Hooray! Hooray! It's HoliHoliday!\" was #1 HitInGermany.", "(HitInGermany(Hooray,Hooray) & HitInGermany(Hooray,Hooray))", "all x y.((Hooray(x) & Hooray(x) & HoliHoliday(y)) -> #1Hit(x,y))", "all x.(Hooray!Hooray!Hooray!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.Hooliday.HoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHoolidayHo", "all x.((Hooray!Hooray!Hooray!Hooliday!) -> #1HitInGermany(x))", "(HipHooray!Hooray!Hooray!HoliHoliday!) - #1 HitInGermany.", "\"Hooray! Hooray! HoliHoliday!\" was #1 HitInGermany.", "(#1HitInGermany(Hooray(Hooray) & #1HitInGermany(Hooray))", "((Hooray! Hooray! HoliHoliday!)) -> #1Hit(Hooray,Germany))", "all x y.((Hooray(x) & Hooray(x) & HoliHoliday(y)) -> #1HitInGermany(x,y))", "\"Hooray!Hooray!Hooray!Hooliday!\" - #1HitInGermany.", "all x.((Hooray(x) & Hooray(x) & HoliHoliday(x)) -> #1Hit(x))", "\"Hooray! Hooray! It's HoliHoliday!\" was a #1 HitInGermany.", "\"Hooray!Hooray!Hooray!Hooliday!\" was #1 HitInGermany.", "all x.((Hooray(x) & Hooray(x) & HoliHoliday(x)) -> #1HitInGermany(x))"]}
{"id": "folio_train_698", "nl": "\"Hooray! Hooray! It's a Holi-Holiday!\" peaked below #1 on the German charts.", "fol": "PeaksBelowNumberOne(Hooray)", "prediction": ["all x.((Hooray(x) & Hooray(x) & HoliHoliday(x)) -> PeakedBelow(x,1))", "\"Hooray! Hooray! It's HoliHoliday!\" peaked below #1 on GermanCharts.", "all x y.((Hooray(x) & Hooray(x) & HoliHoliday(y)) -> PeakedBelow(x,y))", "all x.(Hooray(x) -> HoliHoliday(x))", "(Hello(Hooray) & Hooray(Hooliday) & PeakedBelow(Hooray,GermanCharts))", "(Hooray! Hooray! HoliHoliday!) -PeakedBelow(Hooray,GermanCharts))", "(PeakedBelow(Hooray,GermanCharts) & Hooray,GermanCharts))", "all x.(Hooray(x) & Hooray(x) & HoliHoliday(x)) -> PeakedBelow(x,1))", "all x.((Hooray(x) & Hooray(x) & HoliHoliday(x)) -> PeakedBelow(x,1))", "((Hooray! Hooray! HoliHoliday!) & PeakedBelow(Hooray,#1))", "\"Hooray!\" & \"Hooray!\" & HoliHoliday(x)\" peaked below #1 on GermanCharts.", "all x y.((Hooray(x) & Hooray(y) & HoliHoliday(x)) -> PeakedBelow(x,y))", "all x.((Hooray(x) | Hooray(x) | HoliHoliday(x)) -> PeakedBelow(x,1))", "\"Hooray! Hooray! It's HoliHoliday!\" peaked below #1 on GermanCharts.", "\"Hooray! Hooray! It's HoliHoliday!\" peaked below #1 on GermanCharts.", "\"Hooray!Hooray!Hooray!Hooliday!\" peaked below #1 on GermanCharts."]}
{"id": "folio_train_699", "nl": "\"Hooray! Hooray! It's a Holi-Holiday!\" peaked at #3 on the UK charts.", "fol": "PeakedAt(Hooray,3,UKCharts)", "prediction": ["all x.((Hooray(x) & Hooray(x) & HoliHoliday(x)) -> PeakedAt#3(x))", "\"Hooray! Hooray! It's HoliHoliday!\" peaked at #3 on UKCharts.", "all x y.((Hooray(x) & Hooray(x) & HoliHoliday(y)) -> PeakedAt#3(x,y))", "all x.(Hooray(x) -> (Hooray(x) & Hooray(x) & HoliHoliday(x)))", "(PeakedAt(Hooray,#3) & HoliHoliday(Hooray,Hooray))", "(Hooray! Hooray! HoliHoliday!) -PeakedAt#3 on UKCharts(Hooray))", "(Hello(Hooray) & Hooray(Hooliday) & PeakedAt#3(Hooray,UK))", "(PastsAt(Hooray,Hooray,Hooray) & HoliHoliday(Hooray,Hooray))", "((Hooray! Hooray! HoliHoliday!) & #3(UKCharts)) -> Peaked(Hooray,Hooray))", "all x.((Hooray(x) & Hooray(x) & HoliHoliday(x)) -> PeakedAt#3OnUKCharts(x))", "\"Hooray!\" & \"Hooray!\" & HoliHoliday(x)\" peaked at #3 on UKCharts(x))", "\"Hooray! Hooray! It's HoliHoliday!\" peaked at #3 on UKCharts.", "all x y.((Hooray(x) & Hooray(y) & HoliHoliday(x)) -> PeakedAt(x,y))", "\"Hooray! Hooray! HoliHoliday!\" peaked at #3 on UKCharts.", "\"Hooray!Hooray!Hooray!Hooliday!\" peaked at #3 on UKCharts.", "all x.((Hooray(x) & Hooray(x) & HoliHoliday(x)) -> PeakedAt(x,#3))"]}
{"id": "folio_train_700", "nl": "Every chef can cook.", "fol": "all x.(IsChef(x) -> CanCook(x))", "prediction": ["all x.(Chef(x) -> CanCook(x))", "all x.(Chef(x) -> CanCook(x))", "-all x.exists y.(Chef(x) & Chef(y) & CanCook(x,y))", "all x.(Chef(x) -> CanCook(x))", "all x y.((Chef(x) & Chef(y)) -> CanCook(x,y))", "all x.exists y.(Chef(x) & Chef(y) & CanCook(x,y))", "all x.(Chef(x) -> CanCook(x))", "all x y.((Chef(x) & Chef(y)) -> CanCook(x,y))", "all x.(Chef(x) -> CanCook(x))", "exists x.(Chef(x) & Cook(x))", "all x.(Chef(x) -> CanCook(x))", "all x.(Chef(x) -> CanCook(x))", "exists x.(Chef(x) & Cook(x))", "exists x.(Chef(x) & Cook(x))", "all x.(Chef(x) -> CanCook(x))", "exists x.(Chef(x) & Cook(x))"]}
{"id": "folio_train_701", "nl": "Some people who aren\u2019t chefs can cook.", "fol": "exists x.(-IsChef(x) & CanCook(x))", "prediction": ["exists x.((Person(x) & -Chef(x)) -> CanCook(x))", "exists x.(Person(x) & -Chef(x))", "exists x.((Person(x) & -Chef(x)) -> CanCook(x))", "exists x.((Person(x) & -Chef(x)) -> CanCook(x))", "exists x y.((Person(x) & -Chef(x)) -> CanCook(x,y))", "exists x.(Person(x) & -Chef(x))", "exists x.((Person(x) & -Chef(x)) -> CanCook(x))", "all x y.((Person(x) & -Chef(x)) -> CanCook(x,y))", "exists x.(Person(x) & -Chef(x))", "exists x.((Person(x) & -Chef(x)) -> CanCook(x))", "all x y.((Person(x) & -Chef(x)) -> CanCook(x,y))", "exists x.(Person(x) & -Chef(x) & CanCook(x))", "exists x.(Person(x) & -Chef(x))", "exists x.((Person(x) & -Chef(x)) -> CanCook(x))", "exists x.(Client(x) & -Client(x))", "exists x.((Person(x) & -Chef(x)) -> CanCook(x))"]}
{"id": "folio_train_702", "nl": "People who cook can make scrambled eggs and pasta.", "fol": "all x.(CanCook(x) -> (CanMakeScrambledEggs(x) & CanMakePasta(x)))", "prediction": ["all x.(Cooks(x) -> (MakesScrambledEggs(x) & MakesPasta(x)))", "all x y.((Person(x) & Cooks(x)) -> (MakesScrambledEggs(x,y) & MakesPasta(x,y)))", "all x.((Person(x) & Cooks(x)) -> (MakesScrambledEggs(x) & MakesPasta(x)))", "all x.(Cooks(x) -> (MakesScrambledEggs(x) & MakesPasta(x)))", "all x.((Cooks(x) & Cooks(x)) -> (MakesScrambledEggs(x) & MakesPasta(x)))", "all x.(Cook(x) -> (MakesScrambledEggs(x) & MakesPasta(x)))", "all x y.((Cooks(x) & Cooks(y)) -> (MakesScrambledEggs(x,y) & MakesPasta(x,y)))", "exists x.(Cook(x) & Cooks(x) & (MakesScrambledEggs(x) | MakesPasta(x)))", "all x y.((Person(x) & Cooks(x)) -> (MakesScrambledEggs(x,y) & MakesPasta(x,y)))", "all x.(Cooks(x) -> (MakesScrambledEggs(x) & MakesPasta(x)))", "all x.(Cooks(x) -> (MadeScrambledEggs(x) & MakeMadePasta(x)))", "all x.(Cakeer(x) -> (MakesScrambledEggs(x) & MakesPasta(x)))", "all x.((Person(x) & Cooks(x)) -> (MakeScrambledEggs(x) & MakePasta(x)))", "all x y.((Person(x) & Cooks(x)) -> (MakesScrambledEggs(y) & MakesPasta(x,y)))", "all x.(Cooks(x) -> (MakesScrambledEggs(x) & MakesPasta(x)))", "exists x.(Cocher(x) & CanMakeScrambledEggs(x) & CanMakePasta(x))"]}
{"id": "folio_train_703", "nl": "If someone can make cookies and muffins, they are a baker.", "fol": "all x.((CanMakeCookies(x) & CanMakeMuffins(x)) -> IsBaker(x))", "prediction": ["all x.((CanMakeCookies(x) & CanMakeMuffins(x)) -> Baker(x))", "all x.((CanMakeCookies(x) & CanMakeMuffins(x)) -> Baker(x))", "all x.((MakingCookies(x) & MakingMuffins(x)) -> Baker(x))", "all x y.((CanMakeCookies(x) & CanMakeMuffins(x)) -> Baker(y))", "all x.((Person(x) & CanMakeCookies(x) & CanMakeMuffins(x)) -> Baker(x))", "all x.(CanMakeCookiesAndMuffins(x) -> Baker(x))", "all x.((CookieMaker(x) & MuffinMaker(x)) -> Baker(x))", "exists x.(Baker(x) -> (CanMakeCookies(x) & CanMakeMuffins(x)))", "all x y.((MakingCookies(x) & MakingMuffins(x)) -> Baker(x))", "all x.((CanMakeCookies(x) & CanMakeMuffins(x)) -> Baker(x))", "all x.((MakingCookies(x) & MakingMuffins(x)) -> Baker(x))", "all x.(MakesCookiesAndMuffins(x) -> Baker(x))", "exists x.(Baker(x) & CanMakeCookiesAndMuffins(x))", "all x.(CanMakeCookiesAndMuffins(x) -> Baker(x))", "exists x.(MakingCookiesAndMuffins(x) & Baker(x))", "all x.((CanMakeCookies(x) & CanMakeMuffins(x)) -> Baker(x))"]}
{"id": "folio_train_704", "nl": "Bakers who can also make scrambled eggs can make a good breakfast.", "fol": "all x.((IsBaker(x) & CanMakeScrambledEggs(x)) -> CanMakeGoodBreakfast(x))", "prediction": ["all x.((Baker(x) & MakesScrambledEggs(x)) -> MakesGoodBreakfast(x))", "all x y.((Baker(x) & MakesScrambledEggs(x)) -> MakesGoodBreakfast(y))", "all x.((Baker(x) & MakesScrambledEggs(x)) -> MakesGoodBreakfast(x))", "all x y.((Baker(x) & MakesScrambledEggs(x)) -> CanMakeGoodBreakfast(x,y))", "all x.((Baker(x) & CanMakeScrambledEggs(x)) -> CanMakeGoodBreakfast(x))", "exists x.(Baker(x) & CanMakeScrambledEggs(x) & CanMakeGoodBreakfast(x))", "all x y.((Baker(x) & ScrambledEggs(y) & Makes(x,y)) -> GoodBreakfast(x))", "all x y.((Baker(x) & CanMakeScrambledEggs(x)) -> CanMakeGoodBreakfast(y))", "all x y.((Baker(x) & MakesScrambledEggs(x) & CanMakeGoodBreakfast(y)) -> CanMakeGoodBreakfast(x,y))", "all x.((Baker(x) & MakesScrambledEggs(x)) -> MakesGoodBreakfast(x))", "all x.((Baker(x) & CanMakeScrabbledEggs(x)) -> CanMakeGoodBreakfast(x))", "exists x.(Baker(x) & MakesScrambledEggs(x) & MakesGoodBreakfast(x))", "all x.((Baker(x) & CanMakeScrambledEggs(x)) -> CanMakeGoodBreakfast(x))", "all x.((Baker(x) & MakesScrambledEggs(x)) -> GoodBreakfast(x))", "all x.((Baker(x) & CanMakeScrabbledEggs(x)) -> CanMakeGoodBreakfast(x))", "all x.((Baker(x) & MakesScrambledEggs(x)) -> MakesGoodBreakfast(x))"]}
{"id": "folio_train_705", "nl": "Luke can make cookies, scrambled eggs, and muffins, but not pasta.", "fol": "(CanMakeCookies(Luke) & CanMakeScrambledEggs(Luke) & CanMakeMuffins(Luke) & -CanMakePasta(Luke))", "prediction": ["(all x.(Luke(x) -> (MakesCookies(x) | MakesScrambledEggs(x) | MakesMuffins(x))) & -(MakesPasta(x) -> MakesPasta(x)))", "Luke ((MakingCookies(Luke) | MakingScrambledEggs(Luke)) & MakingMuffins(Luke)) & -(MakingPasta(Luke) & MakingPasta(Luke)))", "((Luke(Luke) & Cookies(Luke)) | ScrambledEggs(Luke) | Muffins(Luke)) & -Pasta(Luke))", "(all x y.((Luke(x) & Cookie(y)) | (ScrambledEggs(y) | Muffins(y)))) -> CanMake(x,y))", "all x y.((Luke(x) & (Cookie(y) | ScrambledEggs(y) | Muffins(y))) -> (Makes(x,y) & -Makes(x,y)))", "all x.(Luke(x) -> (MakesCookies(x) & MakesScrambledEggs(x) & MakesMuffins(x) & -MakesPasta(x)))", "((Luke(Luke) & (Cookies(Luke) | ScrambledEggs(Luke) | Muffins(Luke))) | (Pasta(Luke) & -Pasta(Luke))))", "(all x.(Luke(x) -> (MakesCookies(x) | MakesScrambledEggs(x) | MakesMuffins(x))) & -(MakesPasta(x) & MakesPasta(x)))", "(all x.(Luke(x) -> (MakesCookies(x) | MakesScrabbledEggs(x) | MakesMuffins(x))) & -(MakesPasta(x) -> MakesPasta(x)))", "exists x.(Luke(x) & ((Cookie(x) | ScrambledEggs(x) | Muffins(x)) & -Pasta(x)))", "all x.(Luke(x) -> (MakesCookies(x) | MakesScrambledEggs(x) | MakesMuffins(x) | -MakesPasta(x)))", "all x.(Luke(x) -> ((MakesCookies(x) | MakesScrabbledEggs(x) | MakesMuffins(x)) & -MakesPasta(x)))", "(all x.(Luke(x) -> (MakesCookies(x) | MakesScrambledEggs(x) | MakesMuffins(x))) & -(MakesPasta(x) -> MakesPasta(x)))", "(all x.(Luke(x) -> (MadeCookies(x) | MakeScrambledEggs(x) | MakeMuffins(x))) & -MadePasta(x)))", "(all x.(Luke(x) -> (MadeCookies(x) | MadeCreambledEggs(x) | MadeMuffins(x))) & -MadePasta(x)))", "all x.(Luke(x) -> ((MakesCookies(x) | MakesScrabbledEggs(x) | MakesMuffins(x)) & -MakesPasta(x)))"]}
{"id": "folio_train_706", "nl": "Luke can make a good breakfast.", "fol": "CanMakeGoodBreakfast(Luke)", "prediction": ["all x.(Luke(x) -> CanMakeGoodBreakfast(x))", "Luke can make a good breakfast.", "(GoodBreakfast(Luke,Breakfast))", "all x.((Luke(x) & GoodBreakfast(x)) -> CanMake(x,y))", "all x y.((Luke(x) & Breakfast(y)) -> CanMake(x,y))", "all x.(Luke(x) -> CanMakeGoodBreakfast(x))", "Luke can make goodBreakfast(Luke)", "Luke can make a good breakfast.", "all x.((Luke(x) & Breakfast(x)) -> CanMake(x,y))", "(GoodBreakfast(Luke,Breakfast))", "all x.(Luke(x) -> CanMakeGoodBreakfast(x))", "exists x.(Luke(x) & MakesGoodBreakfast(x))", "Luke can make goodBreakfast.", "exists x.(Luke(x) & MakesGoodBreakfast(x))", "exists x.(Luke(x) & MakesGoodBreakfast(x))", "exists x.(Luke(x) & CanMakeGoodBreakfast(x))"]}
{"id": "folio_train_707", "nl": "Luke is a chef.", "fol": "IsChef(Luke)", "prediction": ["(Chef(Luke) & Chef(Luke))", "Luke is chef.", "all x.(Luke(x) -> Chef(x))", "Luke is Chef(Luke)", "all x.(Chef(x) -> Luke(x))", "Luke is chef.", "(Chef(Luke) & Chef(Luke))", "Luke is Chef(Luke)", "exists x.(Chef(x) & Luke(x))", "Luke is chef.", "(Chef(Luke)", "Luke ist Chef(Luke)", "(Chef(Luke)", "Luke is chef.", "(Chef(Luke)", "Luke is chef."]}
{"id": "folio_train_708", "nl": "All people who enjoy eating gelato ice cream would enjoy a vacation to Italy.", "fol": "all x.(EnjoysGelatoIceCream(x) -> EnjoysVacationToItaly(x))", "prediction": ["all x.((Person(x) & EnjoysEatingGelatoIceCream(x)) -> EnjoysVacationToItaly(x))", "all x.(EnjoysEatingGelatoIceCream(x) -> EnjoysVacationToItaly(x))", "all x.((Person(x) & EnjoysGelatoIceCream(x)) -> EnjoysVacationToItaly(x))", "all x y.((Person(x) & EnjoysEatingGelatoIceCream(x)) -> EnjoysVacationToItaly(y))", "all x.((EnjoysEatingGelatoIceCream(x) & EnjoysVacationToItaly(x)) -> EnjoysVacationToItaly(x))", "all x.((Person(x) & EnjoysEatingGelatoIceCream(x)) -> EnjoysVacationToItaly(x))", "all x.((Person(x) & EnjoysEatingGelatoIceCream(x)) -> EnjoysVacationToItaly(x))", "all x.(EnjoysEatingGelatoIceCream(x) -> EnjoysVacationToItaly(x))", "all x y.((Person(x) & EnjoysEatingGelatoIceCream(x)) -> EnjoysVacationToItaly(x,y))", "all x y.((Person(x) & EnjoysEatingGelatoIceCream(x)) -> EnjoysVacationToItaly(y))", "(all x.(EnjoysEatingGelatoIceCream(x) -> EnjoysVacationToItalie(x)))", "all x.((People(x) & EnjoysEatingGelatoIceCream(x)) -> EnjoysVacationToItaly(x))", "all x.(EnjoysEatingGelatoIceCream(x) -> EnjoysVacationToItaly(x))", "all x.((Person(x) & EnjoysGelatoIceCream(x)) -> EnjoysVacationToItaly(x))", "all x y.((Person(x) & EnjoysEatingGelatoIceCream(x) & ItalyVacation(y)) -> Enjoys(x,y))", "all x.(EnjoysEatingGelatoIceCream(x) -> EnjoysVacationToItaly(x))"]}
{"id": "folio_train_709", "nl": "There are no people who can resist the hallmark delectable drinks and desserts that are famed in Italy.", "fol": "all x.-CanResistDelectableDrinksAndDesserts(x)", "prediction": ["all x.((Person(x) & ResistsMotorheadDelectableDrinksAndDesserts(x) & FamedInItaly(x)) -> -ResistsMotorheadDelectableDrinksAndDesserts(x))", "-exists x.(Person(x) & ResistsMadeInItaly(x) & DelectableDrinksAndDesserts(x))", "all x.(Resists(x) -> (DelectableDrinks(x) & DelectableDesserts(x) & FamedInItaly(x)))", "-exists x.(Resists(x) & FamousInItaly(x) & DelectableDrinksAndDesserts(x))", "all x.((Person(x) & ResistsMarkerDelectableDrinks(x) & ResistsDeliciousDesserts(x) & FamedInItaly(x)) -> -ResistsMarkerDelectableDrinksAndDesserts(x))", "there are no people who can resist the hallmark delectableddrinks and desserts that are famed in Italy.", "all x y.((Person(x) & ResistsMotorheadDelectableDrinksAndDesserts(x) & FamedInItaly(y)) -> -Resists(x,y))", "all x.(ResistsMotorheadDelectableDrinksAndDesserts(x) & FamedInItaly(x))", "-exists x.(Resists(x) & DelectableDrinksAndDesserts(x) & FamedInItaly(x))", "-exists x.(Person(x) & ResistsMarker(x,delectableDrinks,Desserts) & FamedInItaly(x))", "all x y.((Person(x) & (DelectableDrinks(y) | DelectableDesserts(y)) & FamedInItaly(x,y)) -> -Resists(x,y))", "exists x.(Person(x) & -Resists(x) & FamousInItaly(x) & DelectableDrinksAndDesserts(x))", "(-all x.(Resists(x) -> (DelectableDrinks(x) | DelectableDesserts(x))))", "all x.((Person(x) & ResistsMadeInItaly(x)) -> (DelectableDrinks(x) & DelectableDesserts(x)))", "-exists x.(Personal(x) & ResistsMarker(x,delectableDrinks,Desserts) & FamedInItaly(x))", "-exists x.(Resists(x) & (DelectableDrinks(x) | DelectableDesserts(x)) & FamedInItaly(x)))"]}
{"id": "folio_train_710", "nl": "People either enjoy eating gelato ice cream or love to travel and vacation often.", "fol": "all x.(EnjoysGelatoIceCream(x) | LovesToTravelAndVacation(x))", "prediction": ["all x.((Person(x) & (EnjoysEatingGelatoIceCream(x) | LovesToTravel(x))) -> VacationsOfFresh(x))", "all x.(Person(x) -> (EnjoysEatingGelatoIceCream(x) | LovesToTravelAndVacation(x)))", "all x.((Person(x) & EnjoysEatingGelatoIceCream(x)) | (LovesToTravel(x) & LovesToVacation(x))))", "(all x.(LovesGelatoIceCream(x) -> Enjoys(x)) | (LovesToTravel(x) & LovesToVacation(x))))", "exists x.(Person(x) & ((EnjoysEatingGelatoIceCream(x) | LovesToTravel(x)) & LovesToVacation(x)))", "(all x.(LovesGelatoIceCream(x) | LovesToTravelAndVacation(x)))", "all x y.((Person(x) & GelatoIceCream(y)) -> (EnjoysEating(x,y) | LovesToTravelAndVacation(x,y)))", "all x y.((Person(x) & EnjoysGelatoIceCream(x)) | (LovesToTravel(y) & LovesToVacation(y))))", "exists x.(Person(x) & (EnjoysEatingGelatoIceCream(x) | LovesToTravelAndVacation(x)))", "all x.((Person(x) & (EnjoysEatingGelatoIceCream(x) | LovesToTravel(x))) -> VacationsOfFresh(x))", "exists x.(People(x) & (EnjoysEatingGelatoIceCream(x) | LovesToTravelAndVacation(x)))", "all x y.((Person(x) & EnjoysGelatoIceCream(x)) -> (LovesToTravel(x) & LovesToVacation(x)))", "all x y.((Person(x) & GelatoIceCream(y)) -> (EnjoyEating(x,y) | LoveToTravel(x) & LoveToVacation(x)))", "exists x.(Person(x) & ((EnjoysGelatoIceCream(x) & LovesToTravel(x)) | LovesToVacation(x)))", "exists x.(Popular(x) & ((EnjoysEatingGelatoIceCream(x) | LovesToTravel(x) & LovesToVacation(x))))", "exists x.(Person(x) & (EnjoysEatingGelatoIceCream(x) | LovesToTravelAndVacation(x)))"]}
{"id": "folio_train_711", "nl": "If people often take study abroad semesters to Europe, then they do not regret their college experiences.", "fol": "all x.(TakesStudyAbroadToEurope(x) -> -RegretsCollegeExperiences(x))", "prediction": ["all x.((Person(x) & TakesStudyAbroadSemestersToEurope(x)) -> -RegretsCollegeExperiences(x))", "all x.((People(x) & TakesStudyAbroadSemestersToEurope(x)) -> -RegretsCollegeExperiences(x))", "all x y.((Person(x) & StudyAbroadSemester(y) & TakesToEurope(x,y)) -> -RegretsCollegeExperience(x))", "all x y.((Person(x) & StudyAbroadSemester(y) & TakesToEurope(x,y)) -> -RegretsCollegeExperience(x))", "all x.((People(x) & TakeStudyAbroadSemestersToEurope(x)) -> -RegretCollegeExperiences(x))", "(all x.((Person(x) & TakesStudyAbroadSemestersToEurope(x)) -> -RegretsCollegeExperiences(x)))", "all x y z.((Person(x) & StudyAbroad(y) & Europe(z) & TakesSemester(x,y,z)) -> -RegretsCollegeExperience(x))", "all x.((Person(x) & TakesStudyAbroadSemestersToEurope(x)) -> -RegretsCollegeExperiences(x))", "-RegretsCollegeExperiences(-)", "all x y.((Person(x) & TakesStudyAbroadSemestersToEurope(x) & OftenToEurope(x)) -> -RegretsCollegeExperiences(y))", "all x y.((Person(x) & StudyAbroadSemester(y) & TakesToEurope(x,y)) -> -RegretsCollegeExperiences(x))", "all x.((Person(x) & TakesStudyAbroadSemestersToEurope(x)) -> -RegretsCollegeExperiences(x))", "all x y.((People(x) & StudyAbroadSemesters(y) & TakesToEurope(x,y)) -> -RegretsCollegeExperiences(x))", "all x.((Person(x) & TakesStudyAwaySemesters(x) & ToEurope(x)) -> -RegretsCollegeExperiences(x))", "all x.((People(x) & TakeStudyAbroadSemestersToEurope(x)) -> -RegretCollegeExperiences(x))", "all x.((People(x) & TakesStudyAbroadSemestresToEurope(x)) -> -RegretsCollegeExperiences(x))"]}
{"id": "folio_train_712", "nl": "If people love to travel and vacation often, then they often take study abroad semesters to Europe.", "fol": "all x.(LovesToTravelAndVacation(x) -> TakesStudyAbroadToEurope(x))", "prediction": ["all x.((LovesToTravel(x) & LovesToVacation(x)) -> TakesStudyAbroadSemestersToEurope(x))", "all x.((People(x) & LovesToTravel(x) & LovesToVacation(x)) -> TakesStudyAbroadSemestersToEurope(x))", "all x y.((People(x) & LovesToTravel(x) & LovesToVacation(x)) -> TakesStudyAbroadSemestersToEurope(y))", "all x.(LovesToTravelAndVacation(x) -> TakesStudyAbroadSemestersToEurope(x))", "all x y.((Person(x) & LovesToTravel(x) & LovesToVacation(x)) -> TakesStudyAbroadSemestersToEurope(y))", "all x.((LovesToTravel(x) & LovesToVacation(x)) -> TakesStudyAbroadSemestersToEurope(x))", "all x y.((LovesToTravel(x) & LovesToVacation(x) & StudyAbroadSemester(y)) -> TakesToEurope(x,y))", "all x.((People(x) & LovesToTravel(x) & LovesToVacation(x)) -> TakesStudyAbroadSemestersToEurope(x))", "all x y.((People(x) & LovesToTravel(x) & LovesToVacation(x) & StudyAbroadSemesters(y)) -> TakesToEurope(x,y))", "(LikesToTravelAndVacation(Person,Europe) & TakesStudyAbroadSemesters(Person,Europe))", "all x.(LovesToTravelAndVacation(x) -> TakesStudyAbroadSemestersToEurope(x))", "all x.(LikesToTravelAndVacation(x) -> TakesStudyAbroadSemestersToEurope(x))", "all x y.((Person(x) & LovesToTravel(x) & LovesToVacation(x)) -> TakesStudyAbroadSemestersToEurope(x,y))", "all x.((LovesToTravel(x) & LovesToVacation(x)) -> TakesStudyAwaySemestersToEurope(x))", "exists x.(LoveToTravelAndVacation(x) & TakeStudyAbroadSemestersToEurope(x))", "all x.(LovesToTravelAndVacation(x) -> TakeStudyAbroadSemestersToEurope(x))"]}
{"id": "folio_train_713", "nl": "Robert either enjoys eating gelato ice cream and loves to travel and vacation often, or he neither enjoys eating gelato ice cream nor loves to travel and vacation often.", "fol": "((EnjoysGelatoIceCream(Robert) & LovesToTravelAndVacation(Robert)) | (-EnjoysGelatoIceCream(Robert) & -LovesToTravelAndVacation(Robert)))", "prediction": ["(all x.((Robert(x) & EnjoysGelatoIceCream(x) & LovesToTravelAndVacation(x)) | (-LovesGelatoIceCream(x) & LovesToTravelAndVacation(x))))", "all x.((Robert(x) & (EnjoysEatingGelatoIceCream(x) & LovesToTravel(x) & LovesToVacation(x)) | (-EnjoysEatingGelatoIceCream(x) & LovesToTravel(x) & LovesToVacation(x))))", "((EnjoysEatingGelatoIceCream(Robert) & LovesToTravelAndVacation(Robert)) | (-EnjoysEatingGelatoIceCream(Robert) & LovesToTravelAndVacation(Robert))))", "(all x.((Robert(x) & EnjoysEatingGelatoIceCream(x) & LovesToTravelAndVacation(x)) | (-EnjoysEatingGelatoIceCream(x) & LovesToTravelAndVacation(x))))", "all x.(Robert(x) -> ((EnjoysEatingGelatoIceCream(x) & LovesToTravelAndVacation(x)) | (-EnjoysEatingGelatoIceCream(x) & LovesToTravelAndVacation(x)))))", "((AmenitiesGelatoIceCream(Robert) & LovesToTravelAndVacation(Robert)) | (-AmenitiesGelatoIceCream(Robert) & LovesToTravelAndVacation(Robert))))", "either enjoysGelatoIceCream(Robert) | (-(LovesGelatoIceCream(Robert) & LovesTravel(Robert)) | (LovesGelatoIceCream(Robert) & LovesTravel(Robert)))))", "(all x y.((Robert(x) & GelatoIceCream(y) & Eats(x,y)) -> LovesToTravelAndVacation(x)) | ((Robert(x) & GelatoIceCream(y) & -LovesToTravelAndVacation(y)))))", "either enjoysEatingGelatoIceCream(Robert) | (-EnjoysEatingGelatoIceCream(Robert) & LovesToTravelAndVacation(Robert))))", "all x y.((Robert(x) & GelatoIceCream(y) & TravelAndVacation(y)) -> (Enjoys(x,y) & -Enjoys(x,y) & TravelAndVacation(x)))", "all x.((Robert(x) & ((EnjoysEatingGelatoIceCream(x) & LovesToTravel(x) & LovesToVacation(x)) | (-EnjoysEatingGelatoIceCream(x) & LovesToTravel(x) & LovesToVacation(x)))))", "(all x.((Robert(x) & EnjoysEatingGelatoIceCream(x) & LovesToTravelAndVacation(x)) | (-EnjoysEatingGelatoIceCream(x) & LovesToTravelAndVacation(x))))", "(all x.((Robert(x) & EnjoysGelatoIceCream(x)) -> (LovesToTravel(x) & LovesToVacation(x))))", "all x.(Robert(x) -> ((EnjoysEatingGelatoIceCream(x) & LovesToTravelAndVacation(x)) | (-EnjoysEatingGelatoIceCream(x) & LovesToTravelAndVacation(x))))", "(all x.((Robert(x) & EatsGelatoIceCream(x)) -> (LovesToTravel(x) & LovesToVacation(x))))", "(all x.((Roger(x) & EnjoysEatingGelatoIceCream(x)) -> (LovesToTravel(x) & LovesToVacation(x))))"]}
{"id": "folio_train_714", "nl": "Robert can resist the hallmark delectable drinks and desserts that are famed in Italy.", "fol": "CanResistDelectableDrinksAndDesserts(Robert)", "prediction": ["all x.(Robert(x) -> (Resists(x) & DelectableDrinks(x) & DelectableDesserts(x) & FamedInItaly(x)))", "all x y.((Robert(x) & Italy(y)) -> (Resists(x,y) & DelectableDrinksAndDesserts(x) & FamedIn(x,y)))", "(Resists(Robert) & DelectableDrinksAndDesserts(Robert) & FamedInItaly(Robert))", "all x y z.((Robert(x) & DelectableDrinks(y) & Desserts(z) & FamousInItaly(x)) -> Resists(x,y,z))", "all x.(Robert(x) -> (ResistsMotorheadDelectableDrinksAndDesserts(x) & FamedInItaly(x)))", "all x y.((Robert(x) & Italy(y)) -> (Resists(x,y) & DelectableDrinks(x) & DelectableDesserts(x)))", "all x.(Robert(x) -> (ResistsMarkerDelectableDrinksAndDesserts(x) & FamedInItaly(x)))", "(Resists(Robert) & (DelectableDrinks(Robert) | DelectableDesserts(Robert)) & FamedInItaly(Robert))", "(all x.(Robert(x) -> ResistsMotorheadDelectableDrinksAndDesserts(x)))", "(ResistsMovement(Robert) & DelectableDrinksAndDesserts(Robert) & FamedInItaly(Robert))", "(Resists(Robert) & DelectableDrinksAndDesserts(Robert) & FamedInItaly(Robert))", "all x.(Robert(x) -> (Resists(x,y) & DelectableDrinksAndDesserts(y) & FamedInItaly(x)))", "all x y z.((Robert(x) & DelectableDrinks(y) & DelectableDesserts(z)) -> Resists(x,y,z))", "all x.(Robert(x) -> (ResistsMadeInItaly(x) & DelectableDrinksAndDesserts(x)))", "all x y.((Robert(x) & Italy(y)) -> Resists(x,y))", "all x.(Robert(x) -> (ResistsMarker(x) & FamousInItaly(x)))"]}
{"id": "folio_train_715", "nl": "If Robert either would both enjoy a vacation to Italy and regrets his college experiences or neither would enjoy a vacation to Italy nor regrets his college experiences, then Robert would either enjoy a vacation to Italy or, if not, then he can resist the hallmark delectable drinks and desserts that are famed in Italy.", "fol": "(((EnjoysVacationToItaly(Robert) & RegretsCollegeExperiences(Robert)) | (-EnjoysVacationToItaly(Robert) & -RegretsCollegeExperiences(Robert))) -> (EnjoysVacationToItaly(Robert) | (-EnjoysVacationToItaly(Robert) & CanResistDelectableDrinksAndDesserts(Robert))))", "prediction": ["all x.((Robert(x) & (EnjoysVacationToItaly(x) | -EnjoysVacationToItaly(x))) | (-EnjoysVacationToItaly(x) & -ReproducesCollegeExperiences(x))))", "(all x.((Robert(x) & EnjoysVacationToItaly(x) & RefusesCollegeExperiences(x)) | (-EnjoysVacationToItaly(x) & RefusesCollegeExperiences(x)))) -> (EnjoysVacationToItaly(x) | (-EnjoysVacationToItaly(x) & RefusesDelectableDrinksDessessesDessessesDessessesDessessesDessessesDessessesDessessesDessessesDessessesDessessesDessessesDessessesDessessesDessessesItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasItasI", "((EnjoysVacationToItaly(Robert) & RefusesCollegeExperiences(Robert)) | (-EnjoysVacationToItaly(Robert) & RefusesCollegeExperiences(Robert))))", "all x y.((Robert(x) & VacationToItaly(x) & CollegeExperiences(y)) -> ((EnjoysToItaly(x) & Refuses(x,y)) | (-EnjoysToItaly(x) & Refuses(x,y)))))", "all x.((Robert(x) & ((EnjoysVacationToItaly(x) & RefusesCollegeExperiences(x)) | (-EnjoysVacationToItaly(x) & RefusesCollegeExperiences(x)))) -> (EnjoysVacationToItaly(x) | ResistsMarkerDelectableDrinksAndDesserts(x))))", "all x y.((Robert(x) & CollegeExperience(y) & EnjoysVacationToItaly(x,y)) | (-EnjoysVacationToItaly(x,y) & CollegeExperience(x,y))))", "all x.((ResistsMotorcycle(x) & EnjoysVacationToItaly(x)) -> ((EnjoysVacationToItaly(x) & -RegretsCollegeExperiences(x)) | (-EnjoysVacationToItaly(x) & RegretsCollegeExperiences(x)))))", "all x y.(((Robert(x) & CollegeExperience(y) & EnjoysVacationToItaly(x,y)) | (-EnjoysVacationToItaly(x,y) & CollegeExperience(x,y)))) -> (EnjoysVacationToItaly(x) | (-EnjoysVacationToItaly(x) & Refuses(x))))", "all x.((Robert(x) & (EnjoysVacationToItaly(x) | -EnjoysVacationToItaly(x))) | (-EnjoysVacationToItaly(x) & RefusesCollegeExperiences(x))))", "(all x.((Robert(x) & EnjoysVacationToItaly(x) & RefusesCollegeExperiences(x)) | (-EnjoysVacationToItaly(x) & RefusesCollegeExperiences(x)))) -> (EnjoysVacationToItaly(x) | (-EnjoysVacationToItaly(x) & RefusesDelectableDrinksDessertsDessertsDessertsDessertsDessertsDessertsDessertsDessertsDessertsDessertsDessertsDessertsDessertsDessertsDessertsDessertsDessertsDessertsDessertsDessertsDessertsDessertsDessertsDessertsDessertsDessertsDessertsDessertsDessertsDessertsDessertsDessertsDessertsDessertsDessertsDessertsDessertsDessertsDessertsDessertsDessertsDessertsDessertsDessertsDessertsDessertsDessertsDessertsDessertsDessertsDessertsDessertsDessertsDessertsDessertsDessertsDessertsDessertsDessertsDessertsDessertsDessertsDessertsDessertsDess", "all x y.((Robert(x) & EnjoysVacationToItaly(x) & RefusesCollegeExperiences(x)) | (-EnjoysVacationToItaly(x) & RefusesCollegeExperiences(x))))", "((EnjoysVacationToItaly(Robert) & RefusesCollegeExperiences(Robert)) | (-EnjoysVacationToItaly(Robert) & RefusesCollegeExperiences(Robert))))", "all x.((Robert(x) & ((EnjoysVacationToItaly(x) & RefusesCollegeExperiences(x)) | (-EnjoysVacationToItaly(x) & RefusesCollegeExperiences(x)))) -> (EnjoysVacationToItaly(x) | ResistsMotorcycleDelectableDrinksAndDesserts(x))))", "all x.((Robert(x) & (EnjoysVacationToItaly(x) | -EnjoysVacationToItaly(x))) -> (EnjoysVacationToItaly(x) | -RegretsCollegeExperiences(x)))", "all x.((Robert(x) & (EnjoysVacationToItaly(x) | (-EnjoysVacationToItaly(x) & CollegeExperiences(x)))) -> (EnjoysVacationToItaly(x) | -ReproducesCollegeExperiences(x))))", "((EnjoysVacationToItaly(Robert) & RefusesCollegeExperiences(Robert)) | (-EnjoysVacationToItaly(Robert) & RefusesCollegeExperiences(Robert))))"]}
{"id": "folio_train_716", "nl": "If Robert is not both a person who can resist the hallmark delectable drinks and desserts that are famed in Italy and regrets his college experiences, then Robert either enjoys eating gelato ice cream or would enjoy a vacation to Italy.", "fol": "(-(CanResistDelectableDrinksAndDesserts(Robert) & RegretsCollegeExperiences(Robert)) -> (EnjoysGelatoIceCream(Robert) | EnjoysVacationToItaly(Robert)))", "prediction": ["all x.((Robert(x) & -(ResistsMemorableDrinksAndDesserts(x) & FamedInItaly(x) & RefusesCollegeExperiences(x))) -> (EnjoysEatingGelatoIceCream(x) | EnjoysVacationToItaly(x))))", "all x.((Person(x) & -ResistsMarkerDelectableDrinksAndDesserts(x) & FamedInItaly(x) & RefusesCollegeExperiences(x)) -> (EnjoysEatingGelatoIceCream(x) | EnjoysVacationToItaly(x)))", "all x.((ResistsMemorableDelectableDrinksAndDesserts(x) & FamedInItaly(x) & RefusesCollegeExperiences(x)) -> (EnjoysEatingGelatoIceCream(x) | EnjoysVacationToItaly(x)))", "all x y.((Robert(x) & MarkerDelectableDrinksAndDesserts(x) & FamedInItaly(x) & RefusesCollegeExperiences(x)) -> (EnjoysEatingGelatoIceCream(x) | EnjoysVacationToItaly(x)))", "all x.((Person(x) & -ResistsMemorableDelectableDrinksAndDesserts(x) & FamedInItaly(x) & RefusesCollegeExperiences(x)) -> (EnjoysEatingGelatoIceCream(x) | EnjoysVacationToItaly(x)))", "(-(ResistsMemorableDrinksAndDesserts(Robert) & FamedInItaly(Robert) & RefusesCollegeExperiences(Robert)) -> (EnjoysEatingGelatoIceCream(Robert) | EnjoysVacationToItaly(Robert))))", "all x.((Robert(x) & -ResistsMeltzerDelectableDrinksAndDesserts(x) & FamedInItaly(x) & RefusesCollegeExperiences(x)) -> (EnjoysEatingGelatoIceCream(x) | EnjoysVacationToItaly(x)))", "all x.((Person(x) & -(ResistsMuseumDelectableDrinks(x) & RefusesDesserts(x) & FamedInItaly(x) & RefusesCollegeExperiences(x))) -> (EnjoysEatingGelatoIceCream(x) | EnjoysVacationToItaly(x))))", "(-(ResistsMelodgeDelectableDrinksAndDesserts(Robert) & FamedInItaly(Robert) & RefusesCollegeExperiences(Robert)) -> (EnjoysEatingGelatoIceCream(Robert) | EnjoysVacationToItaly(Robert)))", "(-(ResistsMarkerDelectableDrinksAndDesserts(Robert) & FamedInItaly(Robert) & RefusesCollegeExperiences(Robert)) -> (EnjoysEatingGelatoIceCream(Robert) | EnjoysVacationToItaly(Robert))))", "all x.((Robert(x) & -(ResistsMarkerDelectableDrinksAndDesserts(x) & FamedInItaly(x) & RefusesCollegeExperiences(x))) -> (EnjoysEatingGelatoIceCream(x) | EnjoysVacationToItaly(x))))", "all x y.((Person(x) & Person(y) & ResistsMemorableDelectableDrinksAndDesserts(x,y) & FamedInItaly(x) & RefusesCollegeExperiences(x)) -> (EnjoysEatingGelatoIceCream(x) | EnjoysVacationToItaly(x)))", "(all x.((Robert(x) & ResistsMemorableDrinksAndDesserts(x) & FamedInItaly(x) & RefusesCollegeExperiences(x)) -> (EnjoysEatingGelatoIceCream(x) | EnjoysVacationToItaly(x))))", "all x.((ResistsMarkerDelectableDrinksAndDesserts(x) & FamedInItaly(x) & RefusesCollegeExperiences(x)) -> (EnjoysEatingGelatoIceCream(x) | EnjoysVacationToItaly(x)))", "all x.((Robert(x) & -(ResistsMuseumDelectableDrinksAndDesserts(x) & FamedInItaly(x) & RefusesCollegeExperiences(x))) -> (EnjoysEatingGelatoIceCream(x) | EnjoysVacationToItaly(x))))", "all x y.((Robert(x) & RefusesMarkerDelectableDrinksAndDesserts(x,y) & FamedInItaly(y) & RefusesCollegeExperiences(x,y)) -> (EnjoysEatingGelatoIceCream(x) | EnjoysVacationToItaly(x)))"]}
{"id": "folio_train_717", "nl": "ETS develops various standardized tests primarily in the United States for K-12 and higher education. ", "fol": "exists x.(DevelopsTests(Ets,x) & StandardizedTest(x) & LocatedInCountry(x,Unitedstates) & ForEducationLevel(x,K12andhighereducation))", "prediction": ["all x y.((ETS(x) & UnitedStates(y)) -> (DevelopsStandardizedTests(x,y) & primarilyForK-12AndHigherEducation(x,y)))", "all x.(ETS(x) -> (exists y.(StandardizedTest(y) & Develops(x,y)) & exists z.(K-12Test(z) | HigherEducationTest(z)) & PrimarilyIn(x,z))))", "all x y z.((ETS(x) & StandardizedTest(y) & UnitedStates(z)) -> (Develops(x,y) & primarilyIn(x,z) & For(x,K-12) & For(x,HigherEducation)))", "all x.(ETS(x) -> (DevelopsVariousStandardizedTests(x) & PrimarilyInU.S.A.(K-12(x) | HigherEducation(x))))", "all x y.((ETS(x) & UnitedStates(y)) -> DevelopsStandardizedTests(x,y))", "(DevelopedIn(ETS,K-12) & DevelopedIn(ETS,HigherEducation))", "all x.(ETS(x) -> (exists y.(K-12Test(y) & Develops(x,y)) & exists z.(HigherEducationTest(z) & Develops(x,z)))))", "all x y z.((ETS(x) & (K-12(y) | HigherEducation(z))) -> DevelopsStandardizedTests(x,y,z))", "all x.(ETSDevelopsStandardizedTests(x) & PrimarilyInU.S.A.(K-12(x) | HigherEducation(x)))", "(exists x.(ETS(x) & DevelopedIn(x,K-12) & DevelopedIn(x,HigherEducation)))", "all x.(ETS(x) -> exists y.(StandardizedTest(y) & Develops(x,y)) & exists z.(K-12Test(z) | HigherEducationTest(z)) & PrimarilyIn(x,z))))", "all x y.((ETS(x) & UnitedStates(y)) -> (DevelopsStandardizedTests(x,y) & ForK-12AndHigherEducation(x,y)))", "all x y z.((ETS(x) & NormatedTest(y) & UnitedStates(z)) -> (Develops(x,y) & primarilyIn(x,z) & For(x,K-12) & For(x,HigherEducation)))", "(DevelopedByETS(ETS,K-12,HigherEducation))", "ALL X.((ETS(x) & UnitedStates(y)) -> DevelopsStandardizedTests(x,y))", "all x y.((ETS(x) & UnitedStates(y)) -> DevelopsSpecifiedTests(x,y))"]}
{"id": "folio_train_718", "nl": "ETS administers international tests including the TOEFL, TOEIC, GRE and subject tests in more than 180 countries.", "fol": "exists x.(AdministersTests(Ets,x) & InternationalTest(x) & (TOEFLTest(x) | TOEICTest(x) | GRETest(x) | SubjectTests(x)))", "prediction": ["all x y z.((ETS(x) & (ToEFL(y) | TOEIC(y) | GRE(y)) & SubjectTest(z)) -> AdministersInMoreThan180Countries(x,y,z))", "all x y.((ETS(x) & Country(y)) -> (AdministersInternationalTests(x,y) & (ToEFL(y) | TOEIC(y) | GRE(y) | SubjectTests(y))))", "all x.(ETS(x) -> (AdministersInternationalTests(x) & (ToEFL(x) | TOEIC(x) | GRE(x) | SubjectTests(x)) & MoreThan180Countries(x)))", "(AdministratesInternationalTests(ETS,ToEFL) & AdministrationsInternationalTests(ETS,ToEIC) & AdministrationsInternationalTests(ETS,GRE) & AdministrationsInternationalTests(ETS,SubjectTests) & MoreThan180Countries(ETS,TOEFL))", "(All x.(ETS(x) -> (AdministersInternationalTests(x,ToEFL) | AdministersInternationalTests(x,ToEIC) | AdministersInternationalTests(x,GRE))))", "all x.(ETS(x) -> (AdministersInternationalTests(x,ToEFL) & AdministrationsInternationalTests(x,ToEIC) & AdministrationsInternationalTests(x,GRE) & AdministrationsInternationalTests(x,SubjectTests)))", "(AssistsInternationalTests(ETS) & (ToEFL(E) | TOEIC(E) | GRE(E)) & MoreThan180Countries(ETS))", "all x y.((ETS(x) & (ToEFL(y) | TOEIC(y) | GRE(y)) & SubjectTests(y)) -> AdministersInMoreThan180Countries(x,y))", "all x y z.((ETS(x) & (ToEFL(y) | TOEIC(y) | GRE(y) | SubjectTest(y)) & Country(z)) -> AdministersInternationalTests(x,y,z))", "all x y z.((ETS(x) & InternationalTests(y) & Country(z)) -> (Administers(x,y,z) & (ToEFL(y) | TOEIC(y) | GRE(y) | SubjectTests(y)) & MoreThan(z,180)))", "(exists x.(ETS(x) & (ToEFL(x) | TOEIC(x) | GRE(x))) & administersInternationalTests(x))", "ALL X.(ETS(x) -> (AssistsInternationalTests(x) & (ToEFL(x) | TOEIC(x) | GRE(x) | SubjectTests(x)) & MoreThan180Countries(x)))", "all x.(ETS(x) -> (AdministersInternationalTests(x,ToEFL,ToEIC,GRE) & InMoreThan180Countries(x)))", "all x.(ETS(x) -> (AdministratesInternationalTests(x,ToEFL,ToEIC,GRE,SubjectTests) & InMoreThan180Countries(x)))", "all x y z.((ETS(x) & (ToEFL(y) | ToEIC(y) | GRE(y)) & SubjectTest(z)) -> AdministrationInMoreThan180Countries(x,y,z))", "ALL X.(ETS(x) -> (AdministersInternationalTests(x) & (ToEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)) & MoreThan(x,180)))"]}
{"id": "folio_train_719", "nl": "Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions. ", "fol": "exists x.(DevelopsTests(Ets,x) & AssociatedWithEntry(x,EntryToUSEducationInstitutions))", "prediction": ["all x.((Assessment(x) & ETSDevelops(x)) -> (AssociatesWithEntryTo(x,USTertiaryInstitutions) & AssociatesWith(x,USQuaternaryInstitutions)))", "many of the assessments ETS Develops are associated with entry to UStertiaryAndQuaternaryEducationInstitutions(ETS)", "all x.(ETSDevelopsAssessments(x) -> (AssociatesWithEntryToUSTertiaryAndQuaternaryEducationInstitutions(x)))", "all x y.((Assistance(x) & ETS(y)) -> (AssociatesWithEntryTo(x,y) & USTertiaryAndQuaternaryEducation(x)))", "all x y.((Assessment(x) & ETSDevelops(x)) -> (AssociatesWithEntryTo(x,y) & USTertiaryAndQuaternaryEducation(y)))", "(exists x.(Assessment(x) & ETSDevelops(x)) & AssociatesWithEntryToUSTertiaryAndQuaternaryEducationInstitutions(x))", "exists x.(Assessment(x) & ETSDevelops(x) & EntryToUSTertiaryAndQuaternaryEducationInstitutions(x))", "many of the assessments ETSDevelopsAssociateWithEntryToUSTertiaryAndQuaternaryEducationInstitutions(ETS)", "all x.((Assistance(x) & ETSDevelops(x)) -> (AssociatedWithEntryToUSTertiaryAndQuaternaryEducation(x)))", "all x.(ETSDevelops(x) -> (AssessesEntry(x) & EntersIntoU.S.TertiaryOrQuaternaryEducation(x)))", "all x y z.((Assistance(x) & ETS(y) & Institution(z) & Enters(y,z)) -> (AssociatesWithEntry(y,z) & Enters(z,y)))", "(exists x.(Assessment(x) & ETSDevelops(x)) & exists y.(Entry(y) & Enters(y,x)) & exists z.(Entry(z) & Enters(z,x))))", "all x y.((Evaluation(x) & ETS(y)) -> (AssociatesWithEntry(x,y) & EntersInto(x,y)))", "many of the assessments ETS develops are associated with entry to UStertiaryAndQuaternaryEducationInstitutions(ETS)", "exists x.(Assessment(x) & ETSDevelops(x) & AssociatesWithEntryToUSTertiaryAndQuaternaryEducationInstitutions(x))", "exists x.(Assessment(x) & ETSDevelops(x) & EntryToUSTertiaryAndQuaternaryEducation(x))"]}
{"id": "folio_train_720", "nl": "ETS also develops K-12 statewide assessments used for accountability testing in many states.", "fol": "exists x.(DevelopsTests(Ets,x) & StateWideAssessment(x) & UsedForPurpose(x,AccountabilityTesting))", "prediction": ["all x y.((ETS(x) & State(y)) -> DevelopsStatewideAssessments(x,y))", "all x.(ETS(x) -> (DevelopsK-12StatewideAssesses(x) & UsedForAccountabilityTesting(x)))", "(ETS also develops K-12StatewideAssesses(ETS) & UsedForAccountabilityTesting(ETS,ManyStates))", "all x y z.((ETS(x) & K-12(y) & State(z)) -> DevelopsStatewideAssesses(x,y,z))", "ETS develops K-12StatewideAssesses(ETS) & UsedForAccountabilityTesting(ETS)", "all x y.((ETS(x) & State(y)) -> (DevelopsK-12StatewideAssessments(x,y) & UsedForAccountabilityTesting(x,y)))", "ETS also develops K-12StatewideAssessments (usedForAccountabilityTesting(ETS,ManyStates))", "(ETS also develops K-12StatewideAssessments(ETS) & UsedForAccountabilityTesting(ETS,ManyStates))", "(ETS,K-12) & DevelopsStatewideAssesses(ETS) & UsedForAccountabilityTesting(ETS))", "all x.(ETS(x) -> (DevelopsK-12StatewideAssessments(x) & UsedForAccountabilityTesting(x)))", "ETS develops K-12StatewideAssesses(ETS) & UsedForAccountabilityTestingInManyStates(ETS)", "(exists x.(ETS(x) & DevelopsK-12StatewideAssesses(x)) & UsedForAccountabilityTesting(x))", "all x y.((ETS(x) & State(y)) -> DevelopsK-12StatewideAssesses(x,y))", "all x.(ETS(x) -> (DevelopsK-12StatewideAssesses(x) & UsedForAccountabilityTesting(x)))", "all x.(ETS(x) -> (DevelopsK-12StatewideAssesses(x) & UsedForAccountabilityTesting(x,y,z)))", "all x.(ETS(x) -> (DevelopsK-12StatewideAssessements(x) & UsedForAccountabilityTesting(x)))"]}
{"id": "folio_train_721", "nl": "ETS develops assessments for K-12 statewide as well as entry to US tertiary and quaternary education institutions.", "fol": "exists x.(DevelopsTests(Ets,x) & (ForEducationLevel(x,K12andhighereducation) | AssociatedWithEntry(x,EntryToUSEducationInstitutions)))", "prediction": ["all x.(ETS(x) -> (DevelopsAssessments(x,K-12) & EntranceToUSTertiaryAndQuaternaryEducationInstitutions(x)))", "all x y.((ETS(x) & K-12(y)) -> (DevelopsAssessment(x,y) & Statewide(x) & EntranceToUSTertiaryAndQuaternaryEducationInstitutions(x)))", "(DevelopsAssessmentsForK-12(ETS) & ForEntryToUSTertiaryAndQuaternaryEducation(ETS))", "all x y z.((ETS(x) & K-12(y) & State(z)) -> (DevelopsAssessment(x,y,z) & EntranceTo(x,y,z)))", "(DevelopsAssessments(ETS,K-12) & EntranceToUSTertiaryAndQuaternaryEducationInstitutions(ETS,K-12))", "(DevelopedByETS(Evaluation(Evaluation) & ForK-12(Evaluation) & ForEntryToUSTertiaryAndQuaternaryEducation(E))", "(developsAssessmentsForK-12(ETS) & EntranceToUSTertiaryAndQuaternaryEducation(ETS))", "ALL X.((ETS(x) & K-12(x)) -> (DevelopsAssessment(x) & EntranceToUSTertiaryAndQuaternaryEducationInstitutions(x)))", "all x y.((ETS(x) & K-12(y)) -> (DevelopsAssessments(x,y) & Statewide(x) & EntranceToUSTertiaryAndQuaternaryEducationInstitutions(x)))", "all x.(ETS(x) -> (DevelopsAssessments(x,K-12) & EntranceToUSTertiaryAndQuaternaryEducation(x)))", "all x y.((ETS(x) & K-12(y)) -> (DevelopsAssessment(x,y) & Statewide(x) & EntersTo(x,y)))", "all x.(ETS(x) -> (DevelopsAssessments(x,K-12) & EntranceToUSTertiaryAndQuaternaryEducationInstitutions(x)))", "all x.(ETS(x) -> (DevelopsAssessment(x,K-12) & Statewide(x) & EntranceToUSTertiaryAndQuaternaryEducationInstitutions(x)))", "all x y.((ETS(x) & State(y) & State(y)) -> (DevelopsAssessment(x,y) & ForK-12(x,y) & ForEntryTo(x,y)))", "all x y z.((ETS(x) & K-12(y) & State(z)) -> (DevelopsAssessment(x,y,z) & (EntryTo(x,y,z) | EntryTo(x,y,z))))", "all x.(ETS(x) -> (developsAssessments(x,K-12) & EntranceToUSTertiaryAndQuaternaryEducationInstitutions(x)))"]}
{"id": "folio_train_722", "nl": "ETS doesn't administer tests internationally.", "fol": "-exists x.(AdministersTests(Ets,x) & InternationalTest(x))", "prediction": ["all x.(ETS(x) -> -AdministersInternationalTests(x))", "(-AdministersInternationalTests(ETS))", "ETS -AdministersInternationalTests(ETS)", "(-AssistsInternationalTests(ETS))", "-exists x.(ETS(x) & InternationalTest(x))", "all x.(ETS(x) -> -AdministersInternationalTests(x))", "-exists x.(ETS(x) & Test(y) & International(z) & Administrates(x,y,z))", "all x.(ETS(x) -> -AdministersTestsInternationally(x))", "ETS -AdministersInternationalTests(e)", "(-administersInternationalTests(ETS))", "ETS -AdministersTestsInternationally(ETS)", "all x.(ETS(x) -> -AdministersInternationalTests(x))", "ETS -AdministersInternationalTests(e)", "all x.(ETS(x) -> -AssistsInternationalTests(x))", "(-AdministersInternationalTests(ETS))", "all x.(ETS(x) -> -AdministersInternationalTests(x))"]}
{"id": "folio_train_723", "nl": "ETS administers international tests including the TOEFL, GRE and subject tests in China.", "fol": "exists x.(AdministersTests(Ets,x) & InternationalTest(x) & (TOEFLTest(x) | GRETest(x) | SubjectTests(x)) & LocatedInCountry(x,China))", "prediction": ["all x y.((ETS(x) & (ToEFL(y) | GRE(y) | SubjectTest(y))) -> AdministersInternationalTests(x,y))", "all x.(ETS(x) -> (AdministersInternationalTests(x) & (ToEFL(x) | GRE(x) | SubjectTests(x))))", "(AllowsInternationalTests(ETS,ToEFL) & AdministsInternationalTests(ETS,GRE) & AdministsInternationalTests(ETS,SubjectTests))", "all x y z.((ETS(x) & InternationalTest(y) & (ToEFL(z) | GRE(z) | SubjectTest(z))) -> AdministersInChina(x,y,z))", "(AssistsInternationalTests(ETS,ToEFL) & AssistsInternationalTests(ETS,GRE) & AssistsInternationalTests(ETS,SubjectTests))", "(AdministratesInternationalTests(ETS,ToEFL) & AdministrationsInternationalTests(ETS,GRE) & AdministrationsInternationalTests(ETS,SubjectTests))", "all x.(ETS(x) -> (AdministersInternationalTests(x,ToEFL) & AdministrationsInternationalTests(x,GRE) & AdministrationsInternationalTests(x,SubjectTests)))", "all x.(ETS(x) -> (AdministratesInternationalTests(x) & (ToEFL(x) | GRE(x) | SubjectTests(x)) & InChina(x)))", "ALL X Y.((ETS(x) & InternationalTest(y) & (ToEFL(y) | GRE(y) | SubjectTest(y))) -> AdministersInChina(x,y))", "all x y.((ETS(x) & (ToEFL(y) | GRE(y) | SubjectTest(y))) -> AdministersInternationalTests(x,y))", "(AllowsInternationalTests(ETS) & (ToEFL(ETS) | GRE(ETS) | SubjectTests(ETS)))", "all x.(ETS(x) -> (AdministersInternationalTests(x,ToEFL) | AdministrationsInternationalTests(x,GRE) | AdministrationsInternationalTests(x,SubjectTests)))", "all x y z.((ETS(x) & InternationalTest(y) & (TOEFL(z) | GRE(z) | SubjectTest(z))) -> AdministersInChina(x,y,z))", "ALL X Y z.((ETS(x) & (ToEFL(y) | GRE(y) | SubjectTest(y)) & China(z)) -> AdministersInternationalTests(x,y,z))", "all x.(ETSAssistsInternationalTests(x) -> (ToEFLTest(x) | GRETest(x) | SubjectTest(x)))", "all x.(ETS(x) -> (AdministratesInternationalTests(x) & (ToEFL(x) | GRE(x) | SubjectTests(x))))"]}
{"id": "folio_train_724", "nl": "To get a student visa, you must be full-time enrolled in an academic program.", "fol": "all x.(RequiresStudentVisa(x) -> IsFullTimeEnrolled(x))", "prediction": ["all x.((FullTimeEnrolledInAcademicProgram(x) & EnrolledInAcademicProgram(x)) -> StudentVisa(x))", "all x y.((StudentVisa(x) & FullTime(y) & EnrolledInAcademicProgram(x,y)) -> GetsVisa(x,y))", "all x.((StudentVisa(x) & FullTimeEnrolledInAcademicProgram(x)) -> GetsVisa(x))", "all x.(StudentVisa(x) -> (FullTimeEnrolledInAcademicProgram(x)))", "all x.((FullTimeEnrolledInAcademicProgram(x)) -> StudentVisa(x))", "(FullTimeEnrolledInAcademicProgram(x) -> StudentVisa(x))", "all x y.((FullTimeEnrolledInAcademicProgram(x) & EnrolledInAcademicProgram(y)) -> StudentVisa(x))", "all x y.((StudentVisa(x) & AcademicProgram(y)) -> EnrolledFullTime(x,y))", "all x.((FullTime(x) & EnrolledInAcademicProgram(x)) -> StudentVisa(x))", "all x.(StudentVisa(x) -> EnrolledInAcademicProgram(x))", "all x.((FullTimeEnrolledInAcademicProgram(x) & EnrolledInAcademicProgram(x)) -> StudentVisa(x))", "all x y.((StudentVisa(x) & FullTimeEnrolledInAcademicProgram(y)) -> GetsVisa(x,y))", "all x.(StudentVisa(x) -> FullTimeEnrolledInAcademicProgram(x))", "all x.((StudentVisa(x) & FullTimeEnrolledInAcademicProgram(x)) -> GetsVisa(x))", "all x y.((FullTimeEnrolledInAcademicProgram(x) & EnrolledInAcademicProgram(y)) -> StudentVisa(x,y))", "all x.(StudentVisa(x) -> (FullTimeEnrolledInAcademicProgram(x)))"]}
{"id": "folio_train_725", "nl": "Those who are full-time enrolled in an academic program can not work full-time.", "fol": "all x.(IsFullTimeEnrolled(x) -> -CanWorkFullTime(x))", "prediction": ["all x.((FullTimeEnrolledInAcademicProgram(x)) -> -WorksFullTime(x))", "all x.((FullTimeEnrolled(x) & AcademicProgram(x)) -> -WorksFullTime(x))", "all x y.((FullTimeEnrolled(x) & AcademicProgram(y)) -> -WorksFullTime(x,y))", "all x y.((FullTimeEnrolledInAcademicProgram(x) & FullTimeEnrolledInAcademicProgram(y)) -> -WorksFullTime(x))", "all x.((FullTimeEnrolledInAcademicProgram(x)) -> -WorksFullTime(x))", "all x.((FullTime(x) & EnrolledInAcademicProgram(x)) -> -WorksFullTime(x))", "(all x.((FullTimeEnrolledInAcademicProgram(x)) -> -WorksFullTime(x))", "all x.((FullTimeEnrolled(x) & AcademicProgram(x)) -> -WorksFullTime(x))", "all x y.((FullTimeEnrolled(x) & AcademicProgram(y)) -> -WorksFullTime(x,y))", "all x y.((FullTimeEnrolledInAcademicProgram(x) & EnrolledInAcademicProgram(y)) -> -WorksFullTime(x))", "all x.((EnrolledInAcademicProgram(x) & FullTime(x)) -> -WorksFullTime(x))", "all x.((FullTimeEnrolledInAcademicProgram(x)) -> -WorksFullTime(x))", "all x.((FullTime(x) & EnrolledInAcademicProgram(x)) -> -WorksFullTime(x))", "all x y.((FullTimeEnrolledInAcademicProgram(x) & FullTimeEnrolledInAcademicProgram(y)) -> -WorksFullTime(x,y))", "all x y.((FullTimeEnrolled(x) & AcademicProgram(y)) -> -WorksFullTime(x,y))", "all x.((FullTimeEnrolled(x) & AcademicProgram(x)) -> -WorksFullTime(x))"]}
{"id": "folio_train_726", "nl": "Everyone who wants to study abroad needs to have a student visa.", "fol": "all x.(WantsToStudyAbroad(x) -> RequiresStudentVisa(x))", "prediction": ["all x.((WantsToStudyAround(x) & HasStudentVisa(x)) -> NeedsVisa(x))", "all x.(WantsToStudyAround(x) -> HasStudentVisa(x))", "all x.((WantsToStudyAround(x) & HasStudentVisa(x)) -> Needs(x))", "all x.(WantsToStudyAround(x) -> HasStudentVisa(x))", "all x.((Student(x) & WantsToStudyAround(x)) -> HasStudentVisa(x))", "all x.(StudentVisa(x) -> WantsToStudyAround(x))", "all x.((WantsToStudyAbroad(x) & HasStudentVisa(x)) -> HasStudentVisa(x))", "all x y.((WantToStudyAround(x) & StudentVisa(y)) -> Needs(x,y))", "all x y.((WantsToStudyAround(x) & StudyAbroad(y)) -> HasStudentVisa(x,y))", "all x y.((WantToStudyAbroad(x) & HasStudentVisa(x)) -> Needs(x,y))", "all x.(WantsToStudyAbroad(x) -> HasStudentVisa(x))", "all x y.((WantsToStudyAround(x) & StudyAbroad(y) & HasStudentVisa(x,y)) -> NeedsVisa(x,y))", "all x.((WantsToStudyAround(x) & HasStudentVisa(x)) -> NeedsVisa(x))", "all x.(StudentVisa(x) -> WantsToStudyAround(x))", "all x.(WantsToStudyAround(x) -> NeedsStudentVisa(x))", "all x.(WantsToStudyAbroad(x) -> HasStudentVisa(x))"]}
{"id": "folio_train_727", "nl": "All PhD graduates can work full time. ", "fol": "all x.(IsPhDGraduate(x) -> CanWorkFullTime(x))", "prediction": ["all x.(PhD(x) -> CanWorkFullTime(x))", "all x.(DoctoralGraduate(x) -> CanWorkFullTime(x))", "all x.(PhD(x) -> CanWorkFullTime(x))", "all x.((PhD(x) & Graduate(x)) -> CanWorkFullTime(x))", "(all x.(DoctoralGraduate(x) -> CanWorkFullTime(x)))", "all x y.((PhD(x) & Graduate(y)) -> CanWorkFullTime(x,y))", "(all x.(PhD(x) -> CanWorkFullTime(x)))", "all x.(DoctoralGraduate(x) -> CanWorkFullTime(x))", "all x y.((PhD Graduate(x) & Graduate(y)) -> CanWorkFullTime(x,y))", "all x.(PhD(x) -> CanWorkFullTime(x))", "all x.((PhD(x) & Graduate(x)) -> CanWorkFullTime(x))", "all x.(PhD(x) -> CanWorkFullTime(x))", "all x.(DoctoralGraduate(x) -> CanWorkFullTime(x))", "all x.(PhD(x) -> CanWorkFullTime(x))", "all x.(DissertationRecipient(x) -> CanWorkFullTime(x))", "all x.(PhD(x) -> CanWorkFullTime(x))"]}
{"id": "folio_train_728", "nl": "If Tom does not want to study abroad, he is full-time enrolled in an educational program.", "fol": "(-WantsToStudyAbroad(Tom) -> IsFullTimeEnrolled(Tom))", "prediction": ["all x.((Tom(x) & -WantsToStudyAround(x)) -> EnrolledInEducationalProgram(x))", "all x y.((Tom(x) & -WantsToStudyAround(x)) -> EnrolledInEducationalProgram(x,y))", "(-WantToStudyAround(Tom) -> EnrolledInEducationalProgram(Tom))", "all x.((Tom(x) & -WantsToStudyAround(x)) -> EnrolledInEducationalProgram(x))", "(all x.((Tom(x) & -WantsToStudyAround(x)) -> EnrolledInEducationalProgram(x)))", "all x y.((Tom(x) & -WantToStudyAround(x) & EducationalProgram(y)) -> EnrolledIn(x,y))", "(-WantsToStudyAround(Tom) -> EnrolledInEducationalProgram(Tom,EducationalProgram))", "all x.((Tom(x) & -WantsToStudyAround(x)) -> EnrolledInEducationalProgram(x))", "(all x.((Tom(x) & -WantsToStudyAround(x)) -> EnrolledInEducationalProgram(x)))", "all x y.((Tom(x) & -WantsToStudyAround(x,y)) -> EnrolledInEducationalProgram(x))", "all x.((Ton(x) & -DoesToo(x)) -> EnrolledInEducationalProgram(x))", "all x.((Tom(x) & -WelcomesTo(x)) -> EnrolledInEducationalProgram(x))", "all x.((Tam(x) & -WantToStudyAbroad(x)) -> EnrolledInEducationalProgram(x))", "all x.((Tam(x) & DoesNotPlanToStudyAround(x)) -> EnrolledInEducationalProgram(x))", "all x.((Tom(x) & -WantsToStudyAround(x)) -> EnrolledInEducationalProgram(x))", "all x.((Tom(x) & DoesNotPlannedAroundTheWorld(x)) -> FullTimeEnrolledInEducationalProgram(x))"]}
{"id": "folio_train_729", "nl": "Tom is a PhD graduate.", "fol": "IsPhDGraduate(Tom)", "prediction": ["Tom is a PhDGraduate(Tom)", "(PhD Graduate(Tom) & -PhD Graduate(Tom))", "(Professor(Tom) & Graduate(Tom))", "Tom is PhDGraduate(Tom)", "(PhD graduate(Tom) & PhD(Tom))", "all x.(PhD Graduate(x) -> Tom(x))", "Tom is a PhDGraduate(Tom)", "Tom is PhDGraduate(Tom)", "(Professor(Tom) & Graduate(Tom))", "(PhD Graduate(Tom) & -PhD Graduate(Tom))", "all x.(PhD graduate(x) -> Tom(x))", "Tom is a PhDGraduate(Tom)", "(PhD graduate(Tom) & PhD(Tom))", "Tom is PhDGraduate(Tom)", "all x.(PhD Graduate(x) -> Tom(x))", "Tom is a PhDGraduate(Tom)"]}
{"id": "folio_train_730", "nl": "Tom is not a PhD graduate.", "fol": "-IsPhDGraduate(Tom)", "prediction": ["Tom is not a PhDGraduate(Tom)", "(-PhD Graduate(Tom))", "all x.((Tom(x) & -PhD Graduate(x)) -> -PhD Graduate(x))", "Tom is not PhDGraduate(Tom)", "Tom is not a PhDGraduate(Tom)", "(-PhD Graduate(Tom))", "-(PhD Graduate(Tom))", "all x.((Tom(x) & -PhD Graduate(x)) -> -PhD Graduate(x))", "Tom is -PhD Graduate(Tom)", "Tom is not a PhDGraduate(Tom)", "(-PhD graduate(Tom))", "(-DoctoralGraduate(Tom))", "-(PhD Graduate(Tom))", "Tom is not PhDGraduate(Tom)", "(-PhD Graduate(Tom))", "-(PhD Graduate(Tom))"]}
{"id": "folio_train_731", "nl": "Tom wants to study abroad.", "fol": "WantsToStudyAbroad(Tom)", "prediction": ["all x.(Tom(x) -> WantsToStudyAround(x))", "(WantsToStudyAround(Tom) -> WantsToStudyAround(Tom))", "all x.((Tom(x) & WantsToStudyAround(x)) -> WantsToStudyAround(x))", "Tom wantsToStudyAround(Tom)", "Tom wants to study abroad.", "-WantsToStudyAround(Tom)", "(WantsToStudyAround(Tom) & -WantsToStudyAround(Tom))", "all x y.((Tom(x) & StudyAround(y)) -> WantsToStudy(x,y))", "(StudyAround(Tom) | StudyAway(Tom)))", "all x.(Tom(x) -> WantsToStudyAround(x))", "all x.((Tom(x) & WantsToStudyAround(x)) -> WantsToStudyAround(x))", "Tom wantsToStudyAround(Tom)", "Tom wants to study abroad.", "(WantsToStudyAround(Tom))", "exists x.(Tom(x) & WantsToStudyAround(x))", "(WantsToStudyAbroad(Tom))"]}
{"id": "folio_train_732", "nl": "The installment sales method is the approach to recognize revenue under the US GAAP.", "fol": "all x.(FollowsUSGAAP(x) -> AppliesInstallmentSalesMethod(x))", "prediction": ["all x.(InstalmentSalesMethod(x) -> RecognizesRevenueUnderGAAP(x))", "all x y.((InstalmentSalesMethod(x) & Revenue(y)) -> RecognizesUnderGAAP(x,y))", "(RecognizesRevenue(InstalmentSalesMethod) & UnderGAAP(IndividualSalesMethod))", "(ApproachToRecognizeRevenue(InstalmentSalesMethod) & UnderGAAP(IndividualSales))", "(RecognizeRevenueUnderGAAP(InstalmentSalesMethod))", "all x.(InstalmentSalesMethod(x) -> RecognizesRevenue(x))", "all x.((InstalmentSalesMethod(x) & RecognizesRevenue(x,USGAAP)) -> InstallmentSalesMethod(x))", "all x y z.((InstalmentSalesMethod(x) & Revenue(y) & USGAAP(z)) -> Recognizes(x,y,z))", "all x y.((InstalmentSalesMethod(x) & Revenue(y)) -> RecognizesUnderGAAP(x,y))", "(ApproachToRecognizeRevenue(InstalmentSalesMethod) & UnderGAAP(IndividualSales(IndividualSales))", "all x.(InstalmentSalesMethod(x) -> RecognizeRevenueUnderGAAP(x))", "all x y.((InstalmentSalesMethod(x) & Revenue(y) & USGAAP(x,y)) -> Recognizes(x,y))", "all x y.((InstalmentSalesMethod(x) & Revenue(y) & USGAAP(y)) -> Recognizes(x,y))", "all x.(InstalmentSalesMethod(x) -> RecognizesRevenueUnderGAAP(x))", "All x.(InstalmentSales(x) -> RecognizesRevenueUnderGAAP(x))", "all x.(InstalmentSalesMethod(x) -> RecognizeRevenue(x))"]}
{"id": "folio_train_733", "nl": "In accrual accounting, revenues are recognized when they are realized.", "fol": "all x.(FollowsAccrualAccounting(x) -> RevenueRecognitionCondition(Revenues,Realized))", "prediction": ["all x.((AccrualAccounting(x) & RealizedRevenue(x)) -> Recognized(x))", "all x y.((AccrualAccounting(x) & Revenue(y) & Realized(y)) -> Recognized(x,y))", "all x y.((AccrualAccounting(x) & Revenue(y) & Realized(y)) -> Recognized(x,y))", "all x.((AccrualAccounting(x) & RealizedRevenue(x)) -> Recognized(x))", "all x y z.((AccrualAccounting(x) & Revenue(y) & Realized(z)) -> Recognized(x,y,z))", "all x.((AccrualAccounting(x) & RealizedRevenue(x)) -> Recognized(x))", "all x y.((AccrualAccounting(x) & Revenue(y) & Realized(y)) -> Recognized(x,y))", "(all x.((AccrualAccounting(x) & Realized(x)) -> RecognizedRevenue(x)))", "all x.(AccrualAccounting(x) -> RecognizedRevenues(x))", "all x y.((AccrualAccounting(x) & Revenue(y) & Realized(y,x)) -> Recognized(x,y))", "all x.((AccrualAccounting(x) & RealizedRevenue(x)) -> Recognized(x))", "(all x.((AccrualAccounting(x) & Realized(x)) -> RecognizedRevenues(x)))", "all x y z.((AccrualAccounting(x) & Revenue(y) & Realized(z)) -> Recognized(x,y,z))", "all x.((AccrualAccounting(x) & Revenue(x)) -> Recognized(x))", "all x y.((AccrualAccounting(x) & Revenue(y) & Realized(y)) -> Recognized(x,y))", "all x.(AccrualAccounting(x) -> RecognizedRevenues(x))"]}
{"id": "folio_train_734", "nl": "In cash accounting, revenues are recognized when cash is received.", "fol": "all x.(FollowsCashAccounting(x) -> RevenueRecognitionCondition(Revenues,Cashrecieved))", "prediction": ["all x y.((CashAccounting(x) & Cash(y)) -> RecognizedRevenues(x,y))", "all x.((CashAccounting(x) & CashReceived(x)) -> RecognizedRevenue(x))", "all x y.((CashAccounting(x) & CashReceived(y)) -> RecognizedRevenue(x,y))", "all x y z.((CashAccounting(x) & Cash(y) & Cash(z)) -> RecognizedRevenue(x,y,z))", "all x.(CashAccounting(x) -> RecognizedRevenues(x))", "all x.((CashAccounting(x) & CashReceived(x)) -> RecognizedRevenue(x))", "(all x.((CashAccounting(x) & CashReceived(x)) -> RecognizedRevenue(x)))", "(all x.(CashAccounting(x) -> RecognizedRevenues(x)))", "all x y.((CashAccounting(x) & Cash(y)) -> RecognizedRevenue(x,y))", "all x y z.((CashAccounting(x) & CashReceived(y) & Revenue(z)) -> Recognized(x,y,z))", "all x.(CashAccounting(x) -> RecognizesRevenuesWhenCashReceived(x))", "all x.((CashAccounting(x) & CashReceived(x)) -> RecognizedRevenues(x))", "(all x.(CashAccounting(x) -> RecognizedRevenues(x)))", "all x y.((CashAccounting(x) & Cash(y)) -> RecognizedRevenues(x,y))", "all x.(CashAccounting(x) -> RecognizedRevenues(x))", "all x y.((CashAccounting(x) & Cash(y)) -> RecognizesRevenue(x,y))"]}
{"id": "folio_train_735", "nl": "The US GAAP is the accounting standard developed and used by the US Securities and Exchange Commission.", "fol": "(CreatedBy(Usgaap,Ussecuritiesandexchangecommission) & FollowsUSGAAP(Ussecuritiesandexchangecommission))", "prediction": ["all x.((AccountingStandard(x) & DevelopedBySecuritiesAndExchangeCommission(x)) -> UsedByUSGAAP(x))", "all x.(USGAAP(x) -> (AccountingStandard(x) & DevelopedBySecuritiesAndExchangeCommission(x) & UsedByCommission(x)))", "all x y.((USGAAP(x) & SecuritiesAndExchangeCommission(y)) -> (DevelopedAndUsedBy(x,y) & UsedBy(x,y)))", "(DevelopedBySecuritiesAndExchangeCommission(USGAAP) & UsedBySecuritiesAndExchangeCommission(USSEC))", "(DevelopedAndUsedBySecuritiesAndExchangeCommission(USGAAP) & AccountingStandard(USGAAP))", "all x y.((AccountingStandard(x) & SecuritiesAndExchangeCommission(y)) -> (DevelopedAndUsedBy(x,y) & UsedBy(x,y)))", "all x y z.((USGAAP(x) & AccountingStandard(y) & SecuritiesAndExchangeCommission(z)) -> (DevelopedAndUsedBy(x,y,z) & UsedBy(x,z)))", "all x.((AccountingStandard(x) & DevelopedBySecuritiesAndExchangeCommission(x)) -> USGAAP(x))", "(DevelopedAndUsedBySecuritiesAndExchangeCommission(USGAAP) & AccountingStandard(GAAP))", "the USGAAP (AccountingStandard) & DevelopedAndUsedBySecuritiesAndExchangeCommission(SEC))", "all x y.((GAAP(x) & SecuritiesAndExchangeCommission(y)) -> (DevelopedAndUsedBy(x,y) & UsedBy(x,y)))", "(DevelopedBySecuritiesAndExchangeCommission(USGAAP) & UsedBySecuritiesAndExchangeCommission(USSEC))", "all x.(USGAAP(x) -> (AccountingStandard(x) & DevelopedBySecuritiesAndExchangeCommission(x) & UsedByCommission(x)))", "all x y.((USGAAP(x) & SecuritiesAndExchangeCommission(y)) -> (DevelopedAndUsedBy(x,y) & UsedBy(x,y)))", "All x.((AccountingStandard(x) & DevelopedBySEC(x)) -> UsedByUSSEC(x))", "All x.(USGAAP(x) -> (AccountingStandard(x) & DevelopedBySecuritiesAndExchangeCommission(x) & UsedByCommission(x)))"]}
{"id": "folio_train_736", "nl": "Sally works for the US Securities and Exchange Commission.", "fol": "EmployedBy(Sally,Ussecuritiesandexchangecommission)", "prediction": ["Sally works for the USSecuritiesAndExchangeCommission.", "all x.(Sally(x) -> WorksForSecuritiesAndExchangeCommission(x))", "(WorksForSecuritiesAndExchangeCommission(Sally) & -WorksForSecuritiesAndExchangeCommission(Sally))", "all x y.((Sally(x) & SecuritiesAndExchangeCommission(y)) -> WorksFor(x,y))", "Sally works for the US SecuritiesAndExchangeCommission.", "Sally works for USSecuritiesAndExchangeCommission.", "all x.(WorksFor(x,USSecuritiesAndExchangeCommission) -> Sally(x))", "all x.(Sally(x) -> WorksForSecuritiesAndExchangeCommission(x))", "Sally works for SecuritiesAndExchangeCommission(Sally,US)", "(WorksForSecuritiesAndExchangeCommission(Sally) & -WorksForSecuritiesAndExchangeCommission(Sally))", "Sally works for the USSecuritiesAndExchangeCommission.", "Sally WorksForSecuritiesAndExchangeCommission(Sally,US)", "(WorksForSecuritiesAndExchangeCommission(Sally) & WorksForSecuritiesAndExchangeCommission(Sally))", "Sally works for USSecuritiesAndExchangeCommission(Sally)", "Sally works for the SecuritiesAndExchangeCommission(Sally,US)", "Sally WorksForSecuritiesAndExchangeCommission."]}
{"id": "folio_train_737", "nl": "Sally's company utilizes the installment sales method.", "fol": "exists x.(EmployedBy(Sally,x) -> AppliesInstallmentSalesMethod(x))", "prediction": ["all x.((Company(x) & Sally(x)) -> InstallmentSales(x))", "all x y.((Company(x) & Sally(y)) -> UtilizesInstalmentSales(x,y))", "Sally's company utilizes installmentsSalesMethod.", "Sally's company utilizesInstalmentSales(Sally)", "all x.((Company(x) & Sally(x)) -> InstallmentSalesMethod(x))", "Sally's Company UtilizesInstalmentSales(Sally)", "all x.(SallySallyCompany(x) -> UtilizesInstalmentSales(x))", "(UsesInstalmentSales(Sally) & Sally'sCompany(Sally))", "(InstalmentSalesMethod) - Sally's Company.", "all x y.((Company(x) & Sally(y)) -> UtilizesInstalmentSales(x,y))", "Sally's Company UtilizesInstalmentSalesMethod(Sally)", "all x.((Company(x) & Sally(x)) -> UtilizesInstalmentSales(x))", "Sally's company utilizes installmentSalesMethod.", "(UsesInstalmentSales(Sally,Sally))", "All x.(SallySallyCompany(x) -> UtilizesInstalmentSales(x))", "Sally's company utilizesInstalmentSalesMethod."]}
{"id": "folio_train_738", "nl": "The company Sally works for performs accrual accounting.", "fol": "exists x.(EmployedBy(Sally,x) & UsesAccrualAccounting(x))", "prediction": ["all x.((Company(x) & WorksFor(x)) -> PerformsAccrualAccounting(x))", "all x.(WorksFor(x) -> PerformsAccrualAccounting(x))", "all x y.((Company(x) & Sally(y)) -> PerformsAccrualAccounting(x,y))", "(WorksForCompany(Sally,Company) & PerformsAccrualAccounting(Sally,Company))", "all x.((Company(x) & WorksFor(x)) -> PerformsAccrualAccounting(x))", "(WorksForCompany(Sally) & PerformsAccrualAccounting(Sally))", "all x.((Company(x) & SallyWorksFor(x)) -> PerformsAccrualAccounting(x))", "all x.(SallyWorksFor(x) -> PerformsAccrualAccounting(x))", "all x.(WorksFor(x) -> PerformsAccrualAccounting(x))", "all x y.((Company(x) & Sally(y)) -> PerformsAccrualAccounting(y,x))", "All x y z.((Company(x) & Sally(y) & Company(z)) -> PerformsAccrualAccounting(y,z))", "all x y.((Company(x) & SallyWorksFor(x) & AccrualAccounting(y)) -> Performs(x,y))", "exists x.(Company(x) & WorksFor(x) & PerformsAccrualAccounting(x))", "All x.(SallyWorksFor(x) -> PerformsAccrualAccounting(x))", "all x y.((Company(x) & SallyWorksFor(x)) -> PerformsAccrualAccounting(x,y))", "All x.(WorksFor(x) -> AccrualAccounting(x))"]}
{"id": "folio_train_739", "nl": "Sally does not work for a company that uses the GAAP.", "fol": "-exists y.(EmployedBy(Sally,y) & FollowsUSGAAP(y))", "prediction": ["all x.((Sally(x) & -UsesGAAP(x)) -> -WorksFor(x,GAAP))", "all x y.((Sally(x) & Company(y) & UsesGAAP(x,y)) -> -WorksFor(x,y))", "Sally does not work for a company that uses GAAP.", "(-WorksForGAAP(Sally,Company))", "Sally -WorksForGAAP(Sally)", "all x.((Sally(x) & Company(x) & UsesGAAP(x)) -> -WorksFor(x,GAAP))", "Sally & -WorksForGAAP(Sally)", "all x.((Sally(x) & -UsesGAAP(x)) -> -WorksFor(x,GAAP))", "all x.(Sally(x) -> -WorksForGaaPath(x))", "all x y.((Sally(x) & Company(y) & UsesGAAP(x,y)) -> -WorksFor(x,y))", "Sally does not work for a company that uses GAAP(Sally)", "Sally -WorksForGaaPath(Sally,Company)", "Sally is not a GAAP-compliant company.", "(-WorksForGAAP(Sally))", "(-WorksForGaaPath(Sally))", "(-WorksForGAAPCompany(Sally))"]}
{"id": "folio_train_740", "nl": "All people who are respected by others are people who contribute to the country. ", "fol": "all x.(RespectedByOthers(x) -> ContributesToCountry(x))", "prediction": ["all x.((Person(x) & RespectedByOthers(x)) -> ContributesToCountry(x))", "all x.(RespectedByOthers(x) -> ContributesToCountry(x))", "all x y.((Person(x) & RespectedByOthers(x) & Country(y)) -> ContributesTo(x,y))", "all x.((Person(x) & RespectedByOthers(x)) -> ContributesToCountry(x))", "all x.(RespectedByOthers(x) -> ContributesToCountry(x))", "all x y.((Person(x) & RespectedByOthers(x) & Country(y)) -> ContributesTo(x,y))", "all x.((Person(x) & RespectedByOthers(x)) -> ContributesToCountry(x))", "all x.((People(x) & RespectedByOthers(x)) -> ContributesToCountry(x))", "all x y.((Person(x) & RespectedByOthers(x) & Country(y)) -> ContributesTo(x,y))", "all x y.((Person(x) & RespektedByOthers(x) & Country(y)) -> ContributesTo(x,y))", "all x.(RespectedByOthers(x) -> ContributesToCountry(x))", "all x.((Person(x) & RespectedByOthers(x)) -> ContributesToCountry(x))", "all x.(RespectableByOthers(x) -> ContributesToCountry(x))", "all x y.((Person(x) & RespectedByOthers(x) & Country(y)) -> ContributesTo(x,y))", "all x.(RespectedByOthers(x) -> ContributesToCountry(x))", "all x.((Person(x) & RespectedByOthers(x)) -> ContributesToCountry(x))"]}
{"id": "folio_train_741", "nl": "If a person is respected by others, then he/she contributes to the country. ", "fol": "all x.(RespectedByOthers(x) -> ContributesToCountry(x))", "prediction": ["all x.(RespectedByOthers(x) -> ContributesToCountry(x))", "all x y.((Person(x) & RespectedByOthers(x) & Country(y)) -> ContributesTo(x,y))", "all x.((Person(x) & RespectedByOthers(x)) -> ContributesToCountry(x))", "all x.(RespectedByOthers(x) -> ContributesToCountry(x))", "all x y z.((Person(x) & RespectedByOthers(x) & Country(y) & ContributesTo(x,y)) -> ContributesTo(x,y))", "all x y.((Person(x) & RespectedByOthers(x) & Country(y)) -> ContributesTo(x,y))", "all x.((Person(x) & RespectedByOthers(x)) -> ContributesToCountry(x))", "all x y.((Person(x) & RespectedByOthers(x)) -> ContributesToCountry(x,y))", "all x y z.((Person(x) & RespectedByOthers(x,y) & Country(z)) -> ContributesTo(x,z))", "all x.(RespectedByOthers(x) -> ContributesToCountry(x))", "all x.((Person(x) & RespectedByOthers(x)) -> ContributesToCountry(x))", "all x y.((Person(x) & RespektedByOthers(x) & Country(y)) -> ContributesTo(x,y))", "all x y.((Person(x) & RespectedByOthers(x) & Country(y)) -> ContributesTo(x,y))", "all x.(RespectedByOthers(x) -> ContributesToCountry(x))", "all x.(RespectedByOthers(x) -> ContributesToCountry(x))", "exists x.(RespectedByOthers(x) & ContributesToCountry(x))"]}
{"id": "folio_train_742", "nl": "All people available to have a visit without any fees are those respected by others. ", "fol": "all x.(AvailableForVisitWithoutFees(x) -> RespectedByOthers(x))", "prediction": ["all x.((Person(x) & AvailableForVisit(x) & -Fees(x)) -> RespectedByOthers(x))", "all x.((Person(x) & AvailableToHaveVisit(x) & -Fees(x)) -> RespectedByOthers(x))", "all x y.((Person(x) & AvailableForVisit(x,y) & -Fees(y)) -> RespectedByOthers(x))", "all x y.((Person(x) & Person(y) & AvailableForVisit(x,y) & -Fees(y)) -> RespectedByOthers(x))", "all x.(RespectedByOthers(x) -> AllPerson(x))", "all x.((Person(x) & AvailableToHaveVisitWithoutFees(x)) -> RespectedByOthers(x))", "(all x.(RespectedByOthers(x) -> AvailableForVisit(x)))", "all x y.((Person(x) & AvailableToHaveVisit(x,y) & -Fees(y)) -> RespectedByOthers(x))", "all x.((Person(x) & AvailableForVisit(x) & -Fees(x)) -> RespectedByOthers(x))", "all x y.((Person(x) & Person(y) & AvailableToHaveVisitWithoutFees(x,y)) -> RespectedByOthers(x))", "all x.((Person(x) & AvailableForVisitWithoutFees(x)) -> RespectedByOthers(x))", "all x.(RespectedByOthers(x) -> AllPerson(x))", "all x.((Person(x) & AvailableToHaveVisit(x) & -Fees(x)) -> RespectedByOthers(x))", "all x y.((Person(x) & AvailableForVisit(x,y) & -Fees(x)) -> RespectedByOthers(x))", "all x.(RespectedByOthers(x) -> AllPerson(x))", "all x.((Person(x) & AvailableForVisit(x) & -Fees(x)) -> RespectedByOthers(x))"]}
{"id": "folio_train_743", "nl": "All Customers who once served in the army are available to have a visit without any fees. ", "fol": "all x.(ServedInArmy(x) -> AvailableForVisitWithoutFees(x))", "prediction": ["all x.((Customer(x) & ServicedInArmy(x)) -> AvailableForVisitWithoutFees(x))", "all x.((Customer(x) & OnceServedInArmy(x)) -> AvailableToHaveVisitWithoutFees(x))", "all x y.((Customer(x) & ServicedInArmy(x)) -> AvailableForVisitWithoutFees(x,y))", "all x.(ServedInArmy(x) -> AvailableForVisitWithoutFees(x))", "all x y.((Customer(x) & ServicedInArmy(x)) -> AvailableToHaveVisitWithoutFees(x,y))", "all x.((Customer(x) & ServicedInArmy(x)) -> AvailableForVisitWithoutFees(x))", "all x y.((Customer(x) & Army(y) & ServingIn(x,y)) -> AvailableForVisitWithoutFees(x))", "all x.(ServedInArmy(x) -> AvailableToHaveVisitWithoutFees(x))", "(all x.(ServedInArmy(x)) -> AvailableForVisit(x))", "all x y.((Customer(x) & ServicedInArmy(x) & ServedInArmy(x)) -> AvailableForVisitWithoutFees(x))", "all x.((Customer(x) & ServedInArmy(x)) -> AvailableToHaveVisitWithoutFees(x))", "all x.((Customer(x) & servedInArmy(x)) -> AvailableForVisitWithoutFees(x))", "all x.(ServicedInArmy(x) -> AvailableForVisitWithoutFees(x))", "all x.((Customer(x) & OnceServedInArmy(x)) -> AvailableForVisitWithoutFees(x))", "all x.((Customer(x) & ServingInArmy(x)) -> AvailableToHaveVisitWithoutFees(x))", "all x.((Customer(x) & ServicedInArmy(x)) -> AvailableToHaveVisitWithoutFees(x))"]}
{"id": "folio_train_744", "nl": "All people who once were sentenced for thief stayed in prison for some time. ", "fol": "all x.(SentencedForTheft(x) -> StayedInPrison(x))", "prediction": ["all x.((Person(x) & SentForThief(x)) -> StayedInPenitence(x))", "all x.((Person(x) & OnceSentForThief(x)) -> StayedInPenitence(x))", "all x y.((Person(x) & SentencedForThief(x)) -> StayedInPenitence(x,y))", "all x.((Person(x) & SentForTyphoon(x)) -> StayedInPenitenceForSomeTime(x))", "all x y.((Person(x) & OnceSentForThief(x)) -> StayedInPenitence(y))", "all x.((Person(x) & OnceSentForTyphoon(x)) -> StayedInPenitenceForSomeTime(x))", "all x.((Person(x) & SentencedForThief(x)) -> StayedInPenitence(x))", "all x.(SentencedForTyphoon(x) -> StayedInPenitence(x))", "all x y.((Person(x) & SentencedForTyphoon(x)) -> StayedInPenitence(y))", "all x.((Person(x) & SentForTheft(x)) -> StayedInPenitence(x))", "all x y.((Person(x) & OnceSentForTyphoon(x)) -> StayedInPenitenceForSomeTime(x))", "all x y.((Person(x) & SentencedForTheft(x,y)) -> StayedInPenitence(x,y))", "all x.((Person(x) & OnceSentforthief(x)) -> StayedInPenitentiary(x))", "all x.((People(x) & SentencedForTheft(x)) -> StayedInPenitence(x))", "all x.((People(x) & SentForTyphoon(x)) -> StayedInPenitenceForSomeTime(x))", "all x.((Person(x) & OnceSenatedForTyphoon(x)) -> StayedInPenitenceForSomeTime(x))"]}
{"id": "folio_train_745", "nl": "All people who once stayed in prison for some time have a bad record in the local state. ", "fol": "all x.(StayedInPrison(x) -> HasBadRecord(x))", "prediction": ["all x.((Person(x) & StayedInPenitentiary(x)) -> BadRecordInLocalState(x))", "all x.((Person(x) & StayedInPenitence(x)) -> BadRecordInLocalState(x))", "all x.((Person(x) & stayedInPenitentiaryForSomeTime(x)) -> BadRecordInLocalState(x))", "all x y.((Person(x) & Prison(y) & StayedIn(x,y)) -> BadRecord(x,y))", "all x.((People(x) & StayedInPenitence(x)) -> BadRecordInLocalState(x))", "all x y.((Person(x) & StayedInPenitence(x) & LocalState(y)) -> BadRecord(x,y))", "all x.((Person(x) & StayedInPentylon(x)) -> BadRecordInLocalState(x))", "all x.(StayedInPenitent(x) -> BadRecordInLocalState(x))", "all x.((Person(x) & OnceStayedInPenitentiary(x)) -> BadRecordInLocalState(x))", "all x.((Person(x) & PreviouslyStayedInPenitentiary(x)) -> BadRecordInLocalState(x))", "all x y.((Person(x) & Prison(y) & StayedInForSomeTime(x,y)) -> BadRecord(x,y))", "all x y.((Person(x) & StayedInPenitentiary(x) & LocalState(y)) -> BadRecord(x,y))", "all x.(StayedInPenitenceForSomeTime(x) -> BadRecordInLocalState(x))", "all x y.((Person(x) & PreviouslyStayedInPenitentiary(x) & LocalState(y)) -> BadRecord(x,y))", "all x.((People(x) & StayedInPenitentiary(x)) -> BadRecordInLocalState(x))", "all x.((Person(x) & StayedInPenitentiaryForSomeTime(x)) -> BadRecordInLocalState(x))"]}
{"id": "folio_train_746", "nl": "James was either once sentenced for thief or stayed in prison for some time. ", "fol": "((SentencedForTheft(James) & -StayedInPrison(James)) | (-SentencedForTheft(James) & StayedInPrison(James)))", "prediction": ["all x.(James(x) -> (SentencedForThief(x) | StayedInPenitence(x)))", "(SentencedForThief(James) | StayedInPenitence(James)))", "all x.(James(x) -> (SentencedForTheft(x) | StayedInPenitence(x)))", "all x y.((James(x) & Thief(y)) -> (SentencedFor(x,y) | StayedIn(x,y)))", "(SentencedForTheft(James) | StayedInPenitenceForSomeTime(James)))", "all x.((James(x) & (SentencedForthief(x) | StayedInPenitence(x))) -> (SentencedForthief(x) | StayedInPenitence(x)))", "all x.(James(x) -> ((SentencedForThief(x) | StayedInPenitence(x))))", "all x.((James(x) & (PensionedForThief(x) | StayedInPenitence(x))) -> (SentencedForThief(x) | StayedInPenitence(x)))", "((James(James) & SentencedForThief(James)) | StayedInPenitence(James)))", "all x y.((James(x) & Prison(y)) -> (SentencedForThief(x,y) | StayedIn(x,y)))", "(SentencedForTyef(James) | StayedInPenitenceForSomeTime(James)))", "((James(James) & (SentencedForThief(James) | StayedInPenitence(James)))", "all x.(James(x) -> (SentencedForTyef(x) | StayedInPenitence(x)))", "all x.(James(x) -> ((SentencedForTheft(x) | StayedInPenitence(x))))", "all x.(James(x) -> (PensionedForTyef(x) | StayedInPenitence(x)))", "all x.(James(x) -> (ResponsedForTheft(x) | StayedInPencilForSomeTime(x)))"]}
{"id": "folio_train_747", "nl": "James is either with a bad record in the local state or respected by others. ", "fol": "((HasBadRecord(James) & -RespectedByOthers(James)) | (-HasBadRecord(James) & RespectedByOthers(James)))", "prediction": ["all x.(James(x) -> (BadRecord(x) | RespectedByOthers(x)))", "(BadRecord(James,LocalState) | RespectedByOthers(James,LocalState)))", "all x.((James(x) & BadRecord(x)) | RespectedByOthers(x))", "all x y.((James(x) & LocalState(y)) -> (BadRecord(x,y) | RespectedByOthers(x,y)))", "all x.(James(x) -> (BadRecord(x) | RespectedByOthers(x)))", "all x.((James(x) & (BadRecord(x) | RespectedByOthers(x))) -> James(x))", "(BadRecord(James,LocalState) | RespectedByOthers(James)))", "all x y.((James(x) & LocalState(y) & BadRecord(x,y)) | RespectedByOthers(x,y))", "(BadRecordInLocalState(James) | RespectedByOthers(James))", "all x.(James(x) -> (BadRecord(x) | RespectedByOthers(x)))", "exists x.(James(x) & ((BadRecord(x) & LocalState(x)) | RespectedByOthers(x))))", "all x.(James(x) -> (BadRecordInLocalState(x) | RespectedByOthers(x)))", "all x y.((James(x) & LocalState(y) & BadRecord(x,y)) | RespectedByOthers(x,y))", "(BadRecordInLocalState(James) | RespectedByOthers(James))", "exists x.(James(x) & ((BadRecord(x) & LocalState(x)) | RespectedByOthers(x))))", "all x.(James(x) -> (BadRecord(x) | RespectedByOthers(x)))"]}
{"id": "folio_train_748", "nl": "James contributes to the country.", "fol": "ContributesToCountry(James)", "prediction": ["all x.(James(x) -> ContributesToCountry(x))", "all x y.((James(x) & Country(y)) -> ContributesTo(x,y))", "(ContributesTo(James,Country) & JamesContributesTo(James,Country))", "all x.(James(x) -> ContributesToCountry(x))", "all x.((James(x) & ContributesTo(x,y)) -> ContributesTo(x,y))", "James contributes to the country.", "-ContributesToCountry(James,James)", "all x y.((James(x) & Country(y)) -> ContributesTo(x,y))", "all x y z.((James(x) & Country(y) & ContributesTo(x,y)) -> ContributesTo(x,y))", "(ContributesTo(James,Country) & JamesContributesTo(James,Country))", "all x.(James(x) -> ContributesTo(x,y))", "(ContributesToCountry(James,James))", "all x y.((James(x) & Country(y)) -> ContributesTo(x,y))", "all x y.((James(x) & Country(y)) -> ContributesTo(x,y))", "all x.(James(x) -> ContributesToCountry(x))", "All x.(James(x) -> ContributesTo(x,y))"]}
{"id": "folio_train_749", "nl": "James does not contribute to the country.", "fol": "-ContributesToCountry(James)", "prediction": ["all x.(James(x) -> -ContributesToCountry(x))", "all x.((James(x) & -ContributesTo(x,y)) -> -ContributesTo(x,y))", "(-ContributesTo(James,Country))", "all x y.((James(x) & Country(y)) -> -ContributesTo(x,y))", "James does not contribute to the country.", "all x.(James(x) -> -ContributesToCountry(x))", "(-ContributesTo(James) -> JamesDoesNotContributeTo(James))", "-ContributesToCountry(James)", "(-ContributesTo(James,Country))", "all x.((James(x) & -ContributesTo(x,y)) -> -ContributesTo(x,y))", "-(Commentary(Jim) & Country(Jim))", "James does not contribute to the country.", "(James(James) & Country(James))", "James does not contribute to the country.", "all x.(James(x) -> -ContributesTo(x,y))", "(-ContributesToCountry(James))"]}
{"id": "folio_train_750", "nl": "James contributes to the country, and he once served in the army.", "fol": "(ContributesToCountry(James) & ServedInArmy(James))", "prediction": ["all x y.((James(x) & Country(y)) -> (ContributesTo(x,y) & ServesInArmy(x)))", "all x.(James(x) -> (ContributesToCountry(x) & servedInArmy(x)))", "(ContributesToCountry(James) & servedInArmy(James))", "all x y z.((James(x) & Country(y) & Army(z)) -> (ContributesTo(x,y) & ServesIn(x,z)))", "(ContributesTo(James) & servedInArmy(James))", "all x y.((James(x) & Country(y)) -> (ContributesTo(x,y) & ServedInArmy(x)))", "all x.(James(x) -> (ContributesToCountry(x) & ServedInArmy(x)))", "(all x.(James(x) -> ContributesTo(x,y)) & servedInArmy(x,z))", "-(ContributesToCountry(James) & ServedInArmy(James))", "(ContributesToCountry(Jimmy) & servedInArmy(Jimmy))", "(all x.(James(x) -> ContributesToCountry(x)) & servedInArmy(x))", "all x y.((James(x) & Country(y)) -> ContributesTo(x,y))", "all x.(James(x) -> (ContributesToCountry(x) & ServedInArmy(x)))", "(ContributesToCountry(James) & servedInArmy(James))", "(contributesToCountry(Jimmy) & servedInArmy(Jimmy,Army))", "all x.(James(x) -> (ContributesToCountry(x) & ServicedInArmy(x)))"]}
{"id": "folio_train_751", "nl": "James did not contribute to the country and did not serve in the army.", "fol": "(-ContributesToCountry(James) & -ServedInArmy(James))", "prediction": ["(-ContributesToCountry(James) & -ServesInArmy(James))", "all x.(James(x) -> (-ContributesToCountry(x) & -ServesInArmy(x)))", "all x.((James(x) & -ContributesToCountry(x) & -ServesInArmy(x)) -> -ContributesToCountry(x))", "-(ContributesToCountry(James) & -ServesInArmy(James))", "all x y.((James(x) & Country(y)) -> (-ContributesTo(x,y) & -ServesInArmy(x,y)))", "James did not contribute to the country and did not serve in the army.", "((James(James) & -ContributesToCountry(James)) | (-ServesInArmy(James))))", "(-ContributesTo(James) & -ServesInArmy(James))", ".(James(James) -> (-ContributesToCountry(James) & -ServesInArmy(James)))", "((James(x) & -ContributesTo(x,y)) & -ServesInArmy(x,y)))", "(-ContributesToCountry(James) & -ServesInArmy(James))", "all x.(James(x) -> (-ContributesToCountry(x) & -ServesInArmy(x)))", "-(ContributesToCountry(James) & -ServesInArmy(James))", "(-ContributesTo(James,Country) & -ServesInArmy(James,Army))", "all x.(James(x) -> (-ContributesTo(x,country) & -ServesInArmy(x,army)))", "(-ContributesToCountry(Jimmy) & -ServesInArmy(Jimmy))"]}
{"id": "folio_train_752", "nl": "The Croton River watershed is the drainage basin of the Croton River.", "fol": "IsDrainageBasinOf(Crotonriverwatershed,Crotonriver)", "prediction": ["(DrainageBasin(CrotonRiver) & DrainageBasin(CrotonRiver))", "all x.(Watershed(x) -> DrainageBasin(x))", "all x y.((Watershed(x) & CrotonRiver(y)) -> DrainageBasin(x,y))", "the CrotonRiverWatershed(CrotonRiver) -> DrainageBasin(CrotonRiver))", "(Watershed(CrotonRiver) & DrainageBasin(CrotonRiver))", "(DrainageBasin(CrotonRiver) & DrainageBasin(CrotonRiver))", "-(Watershed(CrotonRiver) & DrainageBasin(CrotonRiver))", "(Watershed(CroconRiver) & DrainageBasin(CroconRiver))", "the CrotonRiverWatershed(crotonriver) -> DrainageBasin(crotonriver))", "all x.(Watershed(x) -> DrainageBasin(x,CrotonRiver))", "all x.(Watershed(x) -> (DrainageBasin(x) & CrotonRiver(x)))", "the Croton River Watershed (Watershed) -> DrainageBasinOfCrotonRiver(x))", "(DrainageBasin(CroconRiver) & DrainageBasin(CroconRiver))", "all x y.((Watershed(x) & CrotonRiver(y)) -> DrainageBasin(x,y))", "all x.(Watershed(x) -> DrainageBasinOfCrotonRiver(x))", "(DrainageBasin(crotonRiver) & DrainageBasin(crotonRiver))"]}
{"id": "folio_train_753", "nl": "The Croton River is in southwestern New York.", "fol": "LocatedIn(Crotonriver,Southwesternnewyork)", "prediction": ["All x.(CrotonRiver(x) -> SouthwesternNewYork(x))", "The Croton River is in southwesternNewYork.", "(SouthwesternNewYork(CrotonRiver) & In(CrotonRiver,SouthwesternNewYork))", "(SouthwesternNewYork) & CrotonRiver(Croton)", "the CrotonRiver(x) -> (SouthwesternNewYork(x) & InSouthwesternNewYork(x)))", "all x.(CrotonRiver(x) -> InSouthwesternNewYork(x))", "All x.(CrotonRiver(x) -> SouthwesternNewYork(x))", "(SouthwesternNewYork(CrotonRiver) & InSouthwesternNewYork(CrotonRiver))", "The Croton River is in southwesternNewYork.", "LocatedInSouthwesternNewYork(CrotonRiver)", "the CrotonRiver(x) -> (SouthwesternNewYork(x) & In(x,y)))", "(SouthwesternNewYork) & CrotonRiver(Crocon)", "The Croton River is in SouthwesternNewYork.", "The Croton River is in southwesternNewYork.", "(SouthwesternNewYork) & CrotonRiver(croton)", "(SouthwesternNewYork,CrotonRiver)"]}
{"id": "folio_train_754", "nl": "Water from the Croton River watershed flows to the Bronx.", "fol": "exists x.(Water(x) & SourceOf(x,Crotonriverwatershed) & FlowsToLocation(x,Bronx))", "prediction": ["all x y.((Water(x) & CrotonRiverWatershed(y)) -> FlowsToBronx(x,y))", "all x y z.((Water(x) & CrotonRiverWatershed(y) & Bronx(z)) -> FlowsTo(x,y,z))", "all x.((Water(x) & CrotonRiverWatershed(x)) -> FlowsToBronx(x))", "(FlowsToBronx) -> WaterFromWatershed(CrotonRiver))", "all x y.((Water(x) & CrotonRiverWatershed(y)) -> FlowsToBronx(x,y))", "all x.((WaterFromCrotonRiverWatershed(x) & Bronx(x)) -> FlowsTo(x,y))", "(FlowsFromWaterFromCrotonWatershed(water) & FromWatershedToBronx(water))", "all x.((Water(x) & CrotonRiverWatershed(x)) -> FlowsToBronx(x))", "all x y z.((Water(x) & CrotonRiverWatershed(y) & Bronx(z)) -> FlowsTo(x,y,z))", "all x.((WaterFromCrotonRiverWatershed(x) & Bronx(x)) -> FlowsTo(x,y))", "(FlowsToBronx)", "all x.((WaterFromCroconRiverWatershed(x) & Bronx(x)) -> FlowsTo(x))", "all x y.((Water(x) & CrotonRiverWatershed(y) & Bronx(y)) -> FlowsTo(x,y))", "all x y.((Water(x) & CrotonRiverWatershed(y)) -> FlowsToBronx(x,y))", "all x y z.((Water(x) & CrotonRiverWatershed(y) & Bronx(z)) -> FlowsTo(x,y,z))", "(FlowsToBronx)"]}
{"id": "folio_train_755", "nl": "The Bronx is in New York.", "fol": "LocatedIn(Bronx,Newyork)", "prediction": ["All x.(Bronx(x) -> NewYork(x))", "The Bronx is in NewYork.", "(NewYork(Bronx) & NewYork(Bronx))", "all x y.((Bronx(x) & NewYork(y)) -> In(x,y))", "The Bronx is in NewYork.", "All x.(Bronx(x) -> NewYork(x))", "(NewYork) & Bronx(Bronx))", "(NewYork(Bronx) & NewYork(Bronx))", "theBronx(x) -> NewYork(x))", "The Bronx is in NewYork.", "all x.(Bronx(x) -> NewYork(x))", "The Bronx is in New York.", "all x.(Bronx(x) -> InNewYork(x))", "All x.(Bronx(x) -> NewYork(x))", "The Bronx is in NewYork.", "All x.(Bronx(x) -> NewYork(x))"]}
{"id": "folio_train_756", "nl": "Water from the Croton River watershed flows to somewhere in New York.", "fol": "exists x y.(Water(x) & SourceOf(x,Crotonriverwatershed) & FlowsToLocation(x,y) & LocatedIn(y,Newyork))", "prediction": ["all x y.((Water(x) & CrotonRiverWatershed(y)) -> FlowsTo(x,y))", "all x.((Water(x) & CrotonRiverWatershed(x)) -> FlowsToNewYork(x))", "all x.((WaterFromCrotonRiverWatershed(x) & FlowsToNewYork(x)) -> WaterFlowsToNewYork(x))", "all x y z.((Water(x) & CrotonRiverWatershed(y) & NewYork(z)) -> FlowsTo(x,y,z))", "all x.(Water(x) -> (Watershed(x) & Watershed(x) & Watershed(x) & Watershed(x) & Watershed(x) & Watershed(x) & Watershed(x) & Watershed(x) & Watershed(x) & Watershed(x) & Watershed(x) & Watershed(x) & Watershed(x) & Watershed(x) & Watershed(x)))", "(FlowsToNewYork(WaterFromCrotonRiverWatershed))", "(FlowsFromWaterFromCrotonRiver(Watershed) & NewYork(Watershed))", "all x y.((Water(x) & CrotonRiverWatershed(y)) -> FlowsTo(x,y))", "all x.((WaterFromCrotonRiverWatershed(x) & WaterFromNewYork(x)) -> FlowsTo(x))", "all x.((WaterFromCrotonRiverWatershed(x) & FlowsToNewYork(x)) -> WaterFlowsToNewYork(x))", "(FlowsFromWaterFromCrotonRiver(Watershed) & NewYork(Watershed))", "all x y z.((Water(x) & CrotonRiverWatershed(y) & NewYork(z) & WaterFrom(x,y)) -> FlowsTo(x,z))", "all x y.((Water(x) & CrotonRiverWatershed(y)) -> FlowsToNewYork(x,y))", "all x.((Water(x) & CrotonRiverWatershed(x)) -> FlowsToNewYork(x))", "all x y.((Water(x) & Watershed(y) & CrotonRiver(y)) -> FlowsTo(x,y))", "(FlowsToNewYork(Water(Watershed,Croton))"]}
{"id": "folio_train_757", "nl": "The Croton River watershed is in the Bronx.", "fol": "LocatedIn(Crotonriverwatershed,Bronx)", "prediction": ["(Watershed(CrotonRiver) & InBronx(CrotonRiver))", "all x.(Watershed(x) -> (CrotonRiver(x) & InBronx(x)))", "all x.(CrotonRiverWatershed(x) -> InBronx(x))", "the Croton River Watershed is in the Bronx.", "(Watershed(croton) & InBronx(croton))", "Located in the Bronx, Croton River Watershed.", "all x.(Watershed(x) -> InBronx(x))", "all x.((Watershed(x) & CrotonRiver(x)) -> InBronx(x))", "all x y.((Watershed(x) & Croton(y)) -> InBronx(y))", "the CrotonRiverWatershedInBronx(x)", "(Watershed(CroconRiver) & InBronx(CroconRiver))", "All x.(CrotonRiverWatershed(x) -> InBronx(x))", "(Watershed(CrotonRiver) & InBronx(CrotonRiver))", "the CrotonRiverWatershed(x) -> InBronx(x))", "The Croton River Watershed is in the Bronx.", "(Watershed(croton) & InBronx(croton))"]}
{"id": "folio_train_758", "nl": "Water from the Croton River flows to the Bronx.", "fol": "exists x.(Water(x) & SourceOf(x,Crotonriver) & FlowsToLocation(x,Bronx))", "prediction": ["all x y.((Water(x) & CrotonRiver(y)) -> FlowsToBronx(x,y))", "all x y z.((Water(x) & CrotonRiver(y) & Bronx(z)) -> FlowsTo(x,y,z))", "all x.((Water(x) & CrotonRiver(x)) -> FlowsToBronx(x))", "(FlowsToBronx) -> WaterFromCrotonRiver(Water,Croton))", "all x y.((Water(x) & CrotonRiver(y)) -> FlowsToBronx(x,y))", "all x.((WaterFromCrotonRiver(x) & Bronx(x)) -> FlowsTo(x,y))", "(FlowsFromCroconRiverToBronx)", "all x.((Water(x) & CrotonRiver(x)) -> FlowsToBronx(x))", "all x y z.((Water(x) & CrotonRiver(y) & Bronx(z)) -> FlowsTo(x,y,z))", "(FlowsFromCrotonRiverToBronx(Water))", "all x.((WaterFromCrotonRiver(x) & Bronx(x)) -> FlowsTo(x,y))", "(FlowsToBronx)", "all x.((WaterFromCroconRiver(x) & Bronx(x)) -> FlowsTo(x))", "all x y.((Water(x) & CrotonRiver(y)) -> FlowsToBronx(x,y))", "(FlowsToBronx)", "all x y.((Water(x) & CrotonRiver(y)) -> FlowsToBronx(x,y))"]}
{"id": "folio_train_759", "nl": "All nuclear-powered submarines are warships.", "fol": "all x.(IsNuclearPoweredSubmarine(x) -> IsWarship(x))", "prediction": ["all x.(NuclearPoweredSubmarine(x) -> Warship(x))", "all x.((NuclearPoweredSubmarine(x) & Warship(x)) -> Submarine(x))", "all x.(NatalPoweredSubmarine(x) -> Warship(x))", "all x.((Submarine(x) & NuclearPowered(x)) -> Warship(x))", "all x y.((NuclearPoweredSubmarine(x) & Submarine(y)) -> Warship(x))", "all x y.((Submarine(x) & NuclearPowered(x) & Submarine(y)) -> Warship(x))", "all x.(NuclearPoweredSubmarine(x) -> Warship(x))", "all x.((NatalPoweredSubmarine(x) & Warship(x)) -> NuclearPowered(x))", "all x.(NatalPoweredSubmarine(x) -> Warship(x))", "(all x.(NuclearPoweredSubmarine(x) -> Warship(x)))", "all x.(NuclearPoweredSubmarine(x) -> Warship(x))", "all x.((NuclearPoweredSubmarine(x) & Warship(x)) -> Submarine(x))", "all x.(NuclearPoweredSubmarine(x) -> Warship(x))", "all x.(NaturalPoweredSubmarine(x) -> Warship(x))", "all x.(NuclearPoweredSubmarine(x) -> Warship(x))", "all x.(NuclearPoweredSubmarine(x) -> Warship(x))"]}
{"id": "folio_train_760", "nl": "No nuclear-powered submarines are commercial vessels.", "fol": "all x.(IsNuclearPoweredSubmarine(x) -> -IsCommercialVessel(x))", "prediction": ["-exists x.(NuclearPoweredSubmarine(x) & CommercialVessel(x))", "all x.(NuclearPoweredSubmarine(x) -> -CommercialVessel(x))", "all x.((NuclearPoweredSubmarine(x) & CommercialVessel(x)) -> -Submarine(x))", "-(NuclearPoweredSubmarine(x) & CommercialVessel(x))", "-exists x.(NatalPoweredSubmarine(x) & CommercialVessel(x))", "all x.((NuclearPoweredSubmarine(x) & CommercialVessel(x)) -> -(Submarine(x) & CommercialVessel(x)))", "(-all x.(NuclearPoweredSubmarine(x) -> CommercialVessel(x)))", "-exists x.(Submarine(x) & NuclearPowered(x) & CommercialVessel(x))", "all x.(NatalPoweredSubmarine(x) -> -CommercialVessel(x))", "(exists x.(NatalPoweredSubmarine(x) & CommercialVessel(x)) & -(Submarine(x) & CommercialVessel(x))))", "all x.(NuclearPoweredSubmarine(x) -> CommercialVessel(x))", "-exists x.(NuclearPoweredSubmarine(x) & CommercialVessel(x))", "\u2013 all x.(NuclearPoweredSubmarine(x) -> CommercialVessel(x))", "-exists x.(NaturellPoweredSubmarine(x) & CommercialVessel(x))", "-exists x.(NatalPoweredSubmarine(x) & CommercialVessel(x))", "-exists x.(NuclearPoweredSubmarine(x) & CommercialVessel(x))"]}
{"id": "folio_train_761", "nl": "Some warships are commercial vessels.", "fol": "exists x.(IsWarship(x) & IsCommercialVessel(x))", "prediction": ["exists x.(Warship(x) & CommercialVessel(x))", "exists x.(Warship(x) & CommercialVessel(x))", "exists x.(Warship(x) & CommercialVessel(x))", "exists x.(Warship(x) & CommercialVessel(x))", "exists x y.(Warship(x) & CommercialVessel(y))", "exists x.(Warship(x) & CommercialVessel(x))", "exists x.(Warship(x) & CommercialVessel(x))", "exists x.(Warship(x) & CommercialVessel(x))", "exists x y.(Warship(x) & CommercialVessel(y))", "exists x.(Warship(x) & CommercialVessel(x))", "exists x.(Warship(x) & Commercial(x))", "exists x.(Warship(x) & CommercialVessel(x))", "exists x.(Warship(x) & Commercial(x))", "exists x.(Warship(x) & CommercialVessel(x))", "exists x.(Warship(x) & CommercialVessel(x))", "exists x.(Warship(x) & Commercial(x))"]}
{"id": "folio_train_762", "nl": "If a album is written by a rock band, then the genre of the album is rock.", "fol": "all z.((WrittenByBand(x,y) & IsRockBand(y,z)) -> Genre(x,Rock))", "prediction": ["all x.((Album(x) & WrittenByRockBand(x)) -> RockGenre(x))", "all x y.((Album(x) & WrittenByRockBand(x)) -> RockGenre(y))", "all x y.((Album(x) & RockBand(y) & WrittenBy(x,y)) -> RockGenre(x))", "all x.((Album(x) & WrittenByRockBand(x)) -> RockGenre(x))", "all x y z.((Album(x) & RockBand(y) & WrittenBy(x,y) & Rock(z)) -> RockGenre(x))", "all x y.((Album(x) & WrittenByRockBand(x)) -> RockGenre(x))", "all x.((Album(x) & WrittenByRockBand(x)) -> RockGenre(x))", "all x y.((Album(x) & RockBand(y) & WrittenBy(x,y)) -> RockGenre(x))", "all x y z.((Album(x) & RockBand(y) & WrittenBy(x,y) & Rock(z)) -> RockGenre(x))", "all x.((Album(x) & WrittenByRockBand(x)) -> RockGenre(x))", "all x y.((Album(x) & WrittenByRockBand(x)) -> RockGenre(x,y))", "all x.((Album(x) & WrittenByRockBand(x)) -> RockGenre(x))", "exists x.(RockBand(x) & WrittenBy(x,y) & AlbumGenre(x))", "all x y.((Album(x) & RockBand(y) & WrittenBy(x,y)) -> Rock(x))", "all x.((Album(x) & WrittenByRockBand(x)) -> RockGenre(x))", "all x.((Album(x) & WrittenByRockBand(x)) -> Rock(x))"]}
{"id": "folio_train_763", "nl": "If a band writes a album winning an award, then this band wins this award.", "fol": "all z.((WrittenByBand(x,y) & AwardedAlbum(x,z)) -> BandWinsAward(y,z))", "prediction": ["all x y.((Band(x) & Album(y) & Writes(x,y)) -> WinsAward(x,y))", "all x.((Band(x) & WritesAlbum(x) & WinsAward(x)) -> WinsAward(x))", "all x y z.((Band(x) & Album(y) & Award(z) & Writes(x,y) & Wins(x,z)) -> Wins(x,y,z))", "all x.((Band(x) & WritesAlbumWinningAward(x)) -> WinsAward(x))", "all x y.((Band(x) & Album(y) & Writes(x,y)) -> WinsAward(x,y))", "all x y.((Band(x) & Album(y) & Writes(x,y) & WinsAward(x)) -> WinsAward(x,y))", "exists x.(Band(x) & WritesAlbumWinningAward(x) & WinsAward(x))", "all x y z.((Band(x) & Album(y) & Award(z) & Writes(x,y) & Wins(x,z)) -> Wins(x,y,z))", "all x.((Band(x) & WritesAlbum(x) & WinsAward(x)) -> WinsAward(x))", "all x.(WritesAlbumWinningAward(x) -> WinsAward(x))", "all x y.((Band(x) & Album(y) & Writes(x,y) & WinsAward(x)) -> WinsAward(x,y))", "all x.((Band(x) & WritesAlbumWinningAward(x)) -> WinsAward(x))", "all x y.((Band(x) & WritesAlbum(x,y) & WinsAward(x)) -> WinsAward(y))", "all x y z.((Band(x) & Album(y) & Award(z) & Writes(x,y) & Wins(y,z)) -> Wins(x,y,z))", "exists x.(Band(x) & WritesAlbumWinningAward(x))", "all x y.((Band(x) & Album(y) & Writes(x,y)) -> WinsAward(x,y))"]}
{"id": "folio_train_764", "nl": "Trouble at the Henhouse is an album by The Tragically Hip.", "fol": "WrittenByBand(Trouble_at_the_Henhouse,The_Tragically_Hip)", "prediction": ["All x.(TroubleAtHenhouse(x) -> AlbumByTheThroaticallyHip(x))", "(Album(TroubleAtHenhouse) & TheThroaticallyHip(TroubleAtHenhouse))", "The TragicallyHip(TroubleAtHenhouse)", "(album by TragicallyHip(TroubleAtHenhouse))", "TroubleAtHenhouse(album) & ThrobbinglyHip(album)", "TroubleAtHenhouse(album) & ByTheThroaticallyHip(album)", "The TragicallyHip.com - Album(TroubleAtHenhouse)", "The TragicallyHip(TroubleAtHenhouse)", "All x.(TroubleAtHenhouse(x) -> AlbumByTheThroaticallyHip(x))", "TroubleAtHenhouse(album) -> TragicallyHip(album))", "(Album(TroubleAtHenhouse) & TheThroaticallyHip(TroubleAtHenhouse))", "(album by TragicallyHip(TroubleAtHenhouse))", "TroubleAtTheHenhouse(album) & ThrobbinglyHip(album)", "TroubleAtHenhouse.com is an album by The TragicallyHip(x)", "The TragicallyHip(TroubleAtHenhouse)", "TroubleAtHenhouse(album)"]}
{"id": "folio_train_765", "nl": "The Tragically Hip is a Canadian rock band.", "fol": "IsRockBand(The_Tragically_Hip,Canada)", "prediction": ["The TragicallyHip is a CanadianRockBand.", "All x.((RockBand(x) & TragicallyHip(x)) -> Canadian(x))", "(CanadianRockBand(TheThroaticallyHip))", "The TragicallyHip (CroaticallyHip) is a CanadianRockBand(x))", "TragicallyHip (CroaticallyHip) is a CanadianRockBand(x))", "(CruelticallyHip(x) & CanadianRockBand(x))", "(CanadianRockBand(ThroaticallyHip))", "all x.(ThroaticallyHip(x) -> CanadianRockBand(x))", "TragicallyHip (CanadianRockBand)", "The TragicallyHip is a CanadianRockBand(x)", "All x.((RockBand(x) & TragicallyHip(x)) -> Canadian(x))", "TragicallyHip is a CanadianRockBand.", "(CanadianRockBand(TheThroaticallyHip))", "The TragicallyHip (CanadianRockBand)", "The TragicallyHip (CriticalRockBand(c) & Canadian(c))", "The TragicallyHip is a CanadianRockBand."]}
{"id": "folio_train_766", "nl": "The song \"Butts Wigglin'\" is in Trouble at the Henhouse.", "fol": "ContainsSongInAlbum(Butts_Wigglin,Trouble_at_the_Henhouse)", "prediction": ["All x.((Song(x) & ButtsWigglin'(x)) -> TroubleAtHenhouse(x))", "\"ButtsWigglin'\" (Song(x) & TroubleAtHenhouse(x))", "The song \"ButtsWigglin'\" is in TroubleAtHenhouse.", "(Song(ButtsWigglin') & TroubleAtHenhouse(TroubleAtHenhouse))", "(InTroubleAtHenhouse(Song,ButtsWigglin')", "(InTroubleAtHenhouse(song,s) & \"ButtsWigglin'\" -> TroubleAtHenhouse(s)))", "All x.((Song(x) & ButtsWigglin'(x)) -> TroubleAtHenhouse(x))", "(Song(ButtsWigglin') & TroubleAtHenhouse(ButtsWigglin')", "\"ButtsWigglin'\" (Song(x) & TroubleAtHenhouse(x))", "The song \"ButtsWigglin'\" is in TroubleAtHenhouse.", "(Hienhouse(Song) & InTroubleAt(Song(Song,ButtsWigglin'))", "All x.((Song(x) & ButtsWigglin') -> TroubleAtHenhouse(x))", "\"ButtsWigglin'\" is in TroubleAtHenhouse.", "(InTroubleAtHenhouse(Song,ButtsWigglin')", "\"ButtsWigglin'\" (Song(x) & TroubleAtHenhouse(x))", "All x.((Song(x) & ButtsWigglin'(x)) -> TroubleAtHenhouse(x))"]}
{"id": "folio_train_767", "nl": "Trouble at the Henhouse won the Album of the Year award.", "fol": "AwardedAlbum(Trouble_at_the_Henhouse,The_Album_of_the_Year)", "prediction": ["All x.((TroubleAtHenhouse(x) & AlbumOfTheYear(x)) -> Won(x))", "(Winner(TroubleAtHenhouse) & AlbumOfTheYear(TroubleAtHenhouse))", "TroubleAtHenhouse(TroubleAtHenhouse(TroubleAtHenhouse) -WinnerOfAlbumOfYear(TroubleAtHenhouse))", "All x.(TroubleAtHenhouse(x) -> AlbumOfTheYear(x))", "(WinsAlbumOfYear(TroubleAtHenhouse))", "all x y.((TroubleAtHenhouse(x) & AlbumOfTheYear(y)) -> Won(x,y))", "TroubleAtHenhouse(TroubleAtHenhouse(TroubleAtHenhouse) - wonAlbumOfTheYear(TroubleAtHenhouse))", "the AlbumOfTheYearAward(TroubleAtHenhouse)", "TroubleAtHenhouseWonAlbumOfYear(x)", "all x y.((TroubleAtHenhouse(x) & AlbumOfYear(y)) -> Won(x,y))", "(Winner(TroubleAtHenhouse) & AlbumOfTheYear(TroubleAtHenhouse))", "All x.((TroubleAtHenhouse(x) & AlbumOfTheYear(x)) -> Wins(x))", "All x.(TroubleAtHenhouse(x) -> AlbumOfTheYear(x))", "The album of the year award was won by TroubleAtHenhouse.", "TroubleAtHenhouse won AlbumOfTheYear(x)", "TroubleAtHenhouse(TroubleAtHenhouse(TroubleAtHenhouse) -Winner(Award))"]}
{"id": "folio_train_768", "nl": "A song in Trouble at the Henhouse appeared in a film.", "fol": "exists x.(SongAppearsInFilm(x) & ContainsSongInAlbum(x,Trouble_at_the_Henhouse))", "prediction": ["all x y.((Song(x) & TroubleAtHenhouse(y)) -> AppearsInFilm(x,y))", "all x.((Song(x) & TroubleAtHenhouse(x)) -> AppearsInFilm(x))", "all x y z.((Song(x) & TroubleAtHenhouse(y) & Film(z)) -> AppearsIn(x,y,z))", "(Song(Song) & TroubleAtHenhouse(Song))", "(SongInTroubleAtHenhouse(Song) & AppearsInFilm(Song))", "exists x.(Song(x) & TroubleAtHenhouse(x) & AppearsInFilm(x))", "all x y.((Song(x) & TroubleAtHenhouse(x)) -> AppearsInFilm(y))", "all x.((Song(x) & TroubleAtHenhouse(x)) -> AppearsInFilm(x))", "all x y z.((Song(x) & TroubleAtHenhouse(y) & Film(z)) -> AppearsIn(x,y,z))", "(Song(Song) & TroubleAtHenhouse(Song))", "all x y.((Song(x) & TroubleAtHenhouse(y)) -> appearedInFilm(x,y))", "exists x.(Song(x) & TroubleAtHenhouse(x) & Film(x))", "exists x.(SongInTroubleAtHenhouse(x) & AppearsInFilm(x))", "all x y.((Song(x) & TroubleAtHenhouse(x) & Film(y)) -> AppearsIn(x,y))", "exists x.(Song(x) & TroubleAtHenhouse(x) & AppearsInFilm(x))", "all x y.((Song(x) & TroubleAtHenhouse(y)) -> ApparatesInFilm(x,y))"]}
{"id": "folio_train_769", "nl": "The genre of Trouble at the Henhouse is rock.", "fol": "Genre(Trouble_at_the_Henhouse,Rock)", "prediction": ["all x.(TroubleAtHenhouse(x) -> Rock(x))", "(Rock(TroubleAtHenhouse) & Genre(TroubleAtHenhouse))", "The genre of TroubleAtHenhouse(x) is Rock(x))", "all x y.((TroubleAtHenhouse(x) & Genre(y)) -> Rock(x))", "all x.(TroubleAtHenhouse(x) -> Rock(x))", "all x.((TroubleAtHenhouse(x) & Rock(x)) -> -Rock(x))", "(Rock(TroubleAtHenhouse))", "(Rock(TroubleAtHenhouse) & Genre(TroubleAtHenhouse))", "The genre of TroubleAtHenhouse(x) is Rock(x))", "all x y.((TroubleAtHenhouse(x) & Genre(y)) -> Rock(x))", "all x.(TroubleAtHenhouse(x) -> Rock(x))", "the genre of TroubleAtHenhouse(x) -> Rock(x))", "All x.((TroubleAtHenhouse(x) & Rock(x)) -> Rock(x))", "All x.(TroubleAtHenhouse(x) -> Rock(x))", "(Rock(TroubleAtHenhouse))", "All x.(TroubleAtHenhouse(x) -> Rock(x))"]}
{"id": "folio_train_770", "nl": "A canada rock band didn't win the Album of the Year award.", "fol": "exists x y.(IsRockBand(x,Canada) & WrittenByBand(x,y) & -AwardedAlbum(y,The_Album_of_the_Year))", "prediction": ["all x.(CanadianRockBand(x) -> -WinsAlbumOfYear(x))", "all x.((CanadianRockBand(x) & -WinsAlbumOfYear(x)) -> -WinsAlbumOfYear(x))", "all x y.((CanadianRockBand(x) & AlbumOfTheYear(y)) -> -Wins(x,y))", "(-WinsAlbumOfYear(canadianRockBand))", "(CanadianRockBand(x) & -WinsAlbumOfYear(x))", "all x.(CanadianRockBand(x) -> -WinsAlbumOfTheYear(x))", "all x.((CanadianRockBand(x) & -WinsAlbumOfTheYear(x)) -> -WinsAlbumOfTheYear(x))", "all x y.((CanadianRockBand(x) & AlbumOfTheYear(y)) -> -WonAward(x,y))", "(-WinsAlbumOfYear(CanadianRockBand))", "all x.(CanadianRockBand(x) -> -WinsAlbumOfYear(x))", "all x y.((CanadianRockBand(x) & AlbumOfYear(y)) -> -Wins(x,y))", "all x.((CanadianRockBand(x) & -WinsAlbumOfTheYear(x)) -> -WinsAlbumOfTheYear(x))", "all x.(CanadianRockBand(x) -> -WonAlbumOfTheYear(x))", "all x y.((CanadianRockBand(x) & AlbumOfTheYear(y)) -> -Wins(x,y))", "exists x.(CanadianRockBand(x) & -WinsAward(x))", "exists x.(CanadianRockBand(x) & -WonAlbumOfTheYear(x))"]}
{"id": "folio_train_771", "nl": "\"Butts Wigglin'\" appeared in a film.", "fol": "SongAppearsInFilm(Butts_Wigglin)", "prediction": ["\"ButtsWigglin'\" appeared in a film.", "all x.((ButtsWigglin(x) & Film(x)) -> AppearsIn(x,y))", "all x y.((ButtsWigglin(x) & Film(y)) -> AppearsIn(x,y))", "(AppearsInFilm(ButtsWigglin(Butts) & Film(Butts))", "all x.(ButtsWigglin(x) -> appearedInFilm(x))", "((ButtsWigglin') & Film(Film)) -> AppearsIn(ButtsWigglin'))", "-(ButtsWigglin'(x) & Film(x))", "\"ButtsWigglin'\" appeared in a film.", "all x.((ButtsWigglin'(x) & Film(x)) -> AppearsIn(x,y))", "all x y.((ButtsWigglin(x) & Film(y)) -> appearedIn(x,y))", "(AppearsInFilm(ButtsWigglin')", "\"ButtsWigglin'\" appeared in a film.", "all x y.((ButtsWigglin(x) & Film(y)) -> AppearsIn(x,y))", "\"ButtsWigglin'\" appeared in a film.", "\"ButtsWigglin'\" appeared in a film.", "\"ButtsWigglin'\" appeared in film."]}
{"id": "folio_train_772", "nl": "Daniel is a software engineer and he works at Palantir Technologies.", "fol": "(IsSoftwareEngineer(Daniel) & WorksAtCompany(Daniel,PalantirTechnologies))", "prediction": ["(SoftwareEngineer(Daniel) & WorksAtPalantirTechnology(Daniel))", "(SoftwareEngineer(Daniel) & PalantirTechnology(Daniel))", "all x.(SoftwareEngineer(x) & WorksAtPalantirTechnology(x))", "(SupportsSoftwareEngineer(Daniel) & WorksAtPalantirTechnology(Daniel))", "Daniel is SoftwareEngineer(Dan) & worksAtPalantirTechnology(Dan))", "all x y.((SoftwareEngineer(x) & PalantirTechnology(y)) -> WorksAt(x,y))", "(SoftwareEngineer(Dan) & WorksAtPalantirTechnology(Dan))", "(SoftwareEngineer(Daniel) & WorksAtPalantirTechnologies(Daniel))", "Daniel is a SoftwareEngineer(Dan) & works at Palantir Technologies(Dan))", "Daniel is SoftwareEngineer(d) & worksAtPalantirTechnologies(d))", "all x.(SoftwareEngineer(x) & WorksAtPalantirTechnologies(x))", "all x.(SoftwareEngineer(x) -> (WorksAtPalantirTechnology(x) & Daniel(x)))", "(SoftwareEngineer(Dan) & PalantirTechnology(Dan))", "Daniel is SoftwareEngineer(Dan) & WorksAtPalantirTechnologies(Dan))", "(SoftwareEngineer(Daniel) & PalantirTechnology(Daniel))", "(SoftwareEngineer(Daniel) & WorksAtPalantirTechnologies(Daniel))"]}
{"id": "folio_train_773", "nl": "Daniel studied bioengineering during his undergraduate at Rice University.", "fol": "StudiedBioengineeringAt(Daniel,RiceUniversity)", "prediction": ["(Student(Daniel) & Undergraduate(Daniel) & RiceUniversity(Daniel))", "all x.((Daniel(x) & Undergraduate(x)) -> Bioengineering(x))", "Daniel studied Bioengineering at Rice University.", "(StudentBioengineering(Daniel) & UndergraduateBioengineering(Daniel))", "all x y.((Daniel(x) & RiceUniversity(y)) -> StudiedBioengineering(x,y))", "During his undergraduate at Rice University, Daniel studied Bioengineering.", "(Study(Daniel,Bioengineering) & RiceUniversity(Daniel,Undergraduate))", "(StudiesBioengineering(Daniel,Rice) & Undergraduate(Daniel,Rice))", "all x.((Daniel(x) & RiceUniversity(x)) -> StudiesBioengineering(x))", "Daniel studiedBioengineering(Daniel,RiceUniversity)", "(Student(Daniel) & Undergraduate(Daniel) & RiceUniversity(Daniel))", "Daniel studied Bioengineering (undergraduate(Daniel,Rice))", "Daniel studiedBioengineering(Daniel) & Undergraduate(Daniel,Rice)", "During his undergraduate at Rice University, Daniel studiedBioengineering.", "Daniel studiedBioengineering (Birthday(Daniel,Rice) & Undergraduate(Daniel,Rice))", "Daniel studied Bioengineering at Rice University (undergraduate)"]}
{"id": "folio_train_774", "nl": "Daniel\u2019s older sister works at Meta as a technical sourcer. ", "fol": "(WorksAtMeta(DanielsOlderSister) & IsTechnicalSourcer(DanielsOlderSister))", "prediction": ["all x y.((OlderSister(x) & Daniel(y)) -> WorksAtMeta(x,y))", "(OlderSister(Daniel) & TechnicalSourcer(Daniel))", "all x.((OlderSister(x) & DanielsOlderSister(x)) -> WorksAtMeta(x))", "Daniel\u2019s older sister works at Meta as a technical sourcer.", "(OlderSister(Daniel) & WorksAtMeta(Daniel) & TechnicalSourcer(Daniel))", "(AncientSister(Daniel) & TechnicalSourcer(Daniel))", "(OlderSister(Daniel,Meta) & TechnicalSourcer(Daniel,Meta))", "-OlderSister((Daniel,Meta) & TechnicalSourcer(Daniel,Meta))", "all x.((OlderSister(x) & DanielsOlderSister(x)) -> WorksAtMetaAsTechnicalSourcer(x))", "all x y.((OlderSister(x) & Daniel(y)) -> WorksAtMeta(x,y))", "Daniel\u2019s older sister works at Meta as a technicalsourcer.", "(OlderSisterWorksAtMeta(Daniel) & TechnicalSourcer(Daniel))", "(OlderSister(Dan) & WorksAtMeta(Dan) & TechnicalSourcer(Dan))", "all x.((OlderSister(x) & DanielsSister(x)) -> WorksAtMeta(x))", "all x y.((OlderSister(x) & Meta(y)) -> WorksAsTechnicalSourcer(x,y))", "(OlderSister(Daniel) & TechnicalSourcer(Daniel))"]}
{"id": "folio_train_775", "nl": "Daniel\u2019s dad and older sister both graduated from Stanford University.", "fol": "(GraduatedFromStanford(DanielsOlderSister) & GraduatedFromStanford(DanielsDad))", "prediction": ["(Dad(Daniel) & OlderSister(Daniel) graduatedFromStanfordUniversity(Daniel))", "((Dad(Daniel) & OlderSister(Daniel)) -> GraduatedFromStanfordUniversity(Daniel,Stanford))", "all x y.((Dad(x) & Sister(y)) -> (GraduatedFromStanford(x) & GraduatedFromStanford(y)))", "(Daniel\u2019sDad(Daniel) & OlderSister(Daniel) graduatedFromStanfordUniversity(Daniel))", "(Dad(Daniel) & OlderSister(Daniel) & StanfordUniversity(Daniel))", "(Dad, Daniel, & Sister(Daniel,Stanford) & GraduatedFrom(Daniel,Stanford))", "all x.((Dad(x) & OlderSister(x)) -> GraduatedFromStanfordUniversity(x))", "(Dad(Daniel) & Sister(Daniel) & GraduatedFromStanford(Daniel,Stanford))", "Daniel\u2019s dad and older sister graduated from Stanford University.", "(Demo(Dan) & OlderSister(Dan) & StanfordUniversity(Dan))", "((Dad(Daniel) & Sister(Daniel)) & GraduatedFromStanfordUniversity(Daniel))", "-(Dad(Daniel) & Sister(Daniel)) & GraduatedFromStanford(Daniel,Stanford))", "all x y.((Dad(x) & Sister(y) & GraduatedFromStanford(x)) -> Aged(y))", "both graduated from Stanford University (Dad, Daniel) & olderSister,Old(Daniel,Daniel))", "both graduated from Stanford University.", "(Demo(Daniel) & OlderSister(Daniel) & StanfordUniversity(Daniel))"]}
{"id": "folio_train_776", "nl": "Daniel\u2019s dad is a doctor practicing internal medicine at a veteran\u2019s hospital in Minneapolis", "fol": "IsDoctorPracticingInternalMedicine(DanielsDad,VeteransHospitalInMinneapolis)", "prediction": ["all x y.((Danny(x) & Dad(y)) -> (DoctorPracticingInternalMedicine(x,y) & VeteranHospital(y) & InMinneapolis(y)))", "all x y z.((Daniel(x) & Dad(y) & Veteran(z)) -> (DoctorPracticingInternalMedicine(y,z) & VeteranHospital(z) & InMinneapolis(y,z)))", "(Dad(Daniel) & Doctor(Dad) & PracticesInternalMedicine(Dad) & VeteranHospital(Danel))", "(Daniel\u2019s dad is a doctor practicingInternalMedicine(Daniel,VeteranHospital) & InMinneapolis(Daniel,VeteranHospital))", "all x y.((Daniel(x) & Dad(y)) -> (DoctorPracticingInternalMedicine(x,y) & VeteranHospital(y) & InMinneapolis(y)))", "all x.(Dad(x) -> (DoctorPracticingInternalMedicine(x) & VeteranHospital(x) & InMinneapolis(x)))", "(Doctor(Daniel) & PracticesInternalMedicine(Daniel) & VeteranHospital(Daniel) & InMinneapolis(Daniel,Minneapolis))", "all x y z.((Daniel(x) & Dad(y) & Veteran(z) & PracticesInternalMedicine(y,z)) -> (Doctor(y) & VeteranHospital(z) & PracticesInternalMedicine(y,z) & InMinneapolis(z)))", "(Dad(Daniel) & Doctor(Dad) & PracticesInternalMedicine(Dad,VeteranHospital) & InMinneapolis(Danel,VeteranHospital))", "all x y.((Dad(x) & Daniel(y)) -> (DoctorPracticingInternalMedicine(x,y) & VeteranHospital(y) & InMinneapolis(y)))", "all x.((Danny(x) & Dad(x)) -> (DoctorPracticingInternalMedicine(x) & VeteranHospital(x) & Minneapolis(x)))", "all x y z.((Daniel\u2019s Dad(x) & Doctor(y) & VeteranHospital(z) & PracticesInternalMedicine(x,y,z)) -> (DoctorPracticingInternalMedicine(x,y,z) & VeteranHospital(z) & InMinneapolis(x)))", "all x.(Danny(x) -> (DoctorPracticingInternalMedicine(x) & VeteranHospital(x) & Minneapolis(x)))", "(Daniel\u2019s dad is a doctor practicing internalmedicine at a veteran\u2019s hospital in Minneapolis.)", "(Doctor(Daniel) & PracticesInternalMedicine(Daniel) & VeteranHospital(Daniel))", "(Dad,Daniel,Doctor(Daniel,InternalMedicine) & VeteranHospital(Daniel,Minneapolis))"]}
{"id": "folio_train_777", "nl": "Daniel once applied to Stanford University, but he couldn\u2019t get in even though he has family members who are Stanford alumni.", "fol": "(AppliedToStanfordUniversity(Daniel) & -AdmittedToStanfordUniversity(Daniel) & HasFamilyMembersWhoAreStanfordAlumni(Daniel))", "prediction": ["all x y.((Daniel(x) & StanfordUniversity(y)) -> (AppliedTo(x,y) & -CanGetIn(x,y)))", "all x.((Daniel(x) & StanfordUniversity(x)) -> (AppliedTo(x,Stanford) & -CanGetIn(x)))", "(AppliedToStanford(Daniel) & -CanGetIn(Daniel))", "(exists x.(Daniel(x) & Stanford(x)) & -CanGetIn(x))", "all x.((Daniel(x) & Stanford(y)) -> (AppliedTo(x,y) & -CanGetIn(x,y)))", "all x y z.((Daniel(x) & StanfordUniversity(y) & FamilyMembers(z) & StanfordAlumnus(z)) -> (AppliedTo(x,y) & -CanGetIn(x,z)))", "(ApplicationToStanford(Daniel) & -CanGetIn(Daniel))", "-(AppliedToStanfordUniversity(Daniel) & FamilyMembersAlumni(Daniel))", "(AppliedToStanfordUniversity(Daniel) & -CanGetIn(Daniel))", "(exists x.(Daniel(x) & StanfordUniversity(x) & AppliedTo(x,y)) & -CanGetIn(x,y))", "all x y.((Daniel(x) & StanfordUniversity(y)) -> (AppliedTo(x,y) & -CanGetIn(x,y)))", "all x.((Daniel(x) & StanfordUniversity(y)) -> (AppliedTo(x,y) & -CanGetIn(x,y) & HasFamilyMembers(x,y)))", "(all x.((Daniel(x) & StanfordUniversity(y)) -> -CanBeIn(x,y)))", "all x.((Daniel(x) & Stanford(y)) -> (AppliedTo(x,y) & -CanGetIn(x,y)))", "(exists x.(Daniel(x) & Stanford(x) & AppliedTo(x,y)) & CannotGetIn(x))", "all x.((Daniel(x) & StanfordUniversity(x)) -> -CanGetIn(x))"]}
{"id": "folio_train_778", "nl": "Daniel studied bioengineering as his major at Rice University.", "fol": "StudiedBioengineeringAt(Daniel,RiceUniversity)", "prediction": ["(Student(Daniel) & Bioengineering(Daniel) & RiceUniversity(Daniel))", "Daniel studied Bioengineering as MajorAtRiceUniversity(Daniel)", "(Study(Daniel,Bioengineering) & RiceUniversity(Daniel,Bioengineering))", "-(DanielStudy(Daniel,Bioengineering) & RiceUniversity(Daniel,Bioengineering))", "all x.((Daniel(x) & RiceUniversity(x)) -> StudiesBioengineeringAsMajor(x))", "Daniel studiedBioengineering(Daniel) & RiceUniversity(Daniel))", "(MajorMajor(Daniel,Rice) & Bioengineering(Daniel,Rice))", "Daniel studiedBioengineeringAsMajorAtRiceUniversity(Daniel,Rice)", "(Student(Daniel) & Major(Daniel,RiceUniversity))", "-(Student(Daniel,Bioengineering) & Major(Daniel,Rice))", "Daniel studied Bioengineering as MajorAtRiceUniversity(Dan)", "(Study(Daniel,Bioengineering) & RiceUniversity(Daniel,Bioengineering))", "Daniel studied Bioengineering (MajorAtRiceUniversity)", "(Student(Daniel,Bioengineering) & Major(Daniel,Rice))", "Daniel studiedBioengineering(Dan) & RiceUniversity(Dan))", "Daniel studied Bioengineering as major at Rice University."]}
{"id": "folio_train_779", "nl": "Daniel and his sister grew up in Minneapolis, Minnesota.", "fol": "(GrewUpIn(Daniel,Minneapolis,Minnesota) & GrewUpIn(DanielsOlderSister,Minneapolis,Minnesota))", "prediction": ["(GrowsUpIn(Daniel,MN) & GrowsUpIn(Daniel,MN) & GrowsUpIn(Daniel,MN))", "all x y.((Daniel(x) & Sister(y)) -> (GrowsUpIn(x,y) & Minneapolis(y)))", "((Daniel(Daniel) & Sister(Sister)) -> grewUpInMinneapolis(Daniel))", "(Growth(Daniel) & Sister(Daniel) & Minneapolis(Daniel))", "Daniel and his sister grew up in Minneapolis, Minnesota.", "(Sister(Daniel) & GrownUpInMinneapolis(Daniel))", "(GrowthInMinneapolis(Daniel) & GrowthInSister(Daniel))", "((Daniel) & Sister(Daniel)) & GrownUpInMinneapolis(Daniel))", "(GrowsUp(Daniel) & GrowsUp(Daniel,Minneapolis))", "-(DanielAndSister(Daniel) & GrownUpInMinneapolis(Daniel))", "((Daniel(Daniel) & Sister(Sister)) -> GrownUpIn(Daniel,Minneapolis,Minneapolis))", "all x.((Daniel(x) & Sister(x)) -> GrownUpInMinneapolis(x))", "Daniel and his sister grew up in Minneapolis, Minnesota.", "all x y.((Daniel(x) & Sister(y)) -> (GrowsUpIn(x,y) & Minneapolis(y)))", "all x y.((Daniel(x) & Sister(y)) -> GrownUpIn(x,y))", "Daniel and his sister grew up in Minneapolis, Minnesota."]}
{"id": "folio_train_780", "nl": "All commerical aircraft are produced by either Boeing or Airbus.", "fol": "all x.(IsCommercialAircraft(x) -> ((IsProducedBy(x,Boeing) & -IsProducedBy(x,Airbus)) | (-IsProducedBy(x,Boeing) & IsProducedBy(x,Airbus))))", "prediction": ["all x.(CommericalAircraft(x) -> (ProducedByBoeing(x) | ProducedByAirbus(x)))", "all x.(CommericalAircraft(x) -> (ProducedByBoeing(x) | ProducedByAirbus(x)))", "(all x.(CommericalAircraft(x) -> (Boeing(x) | Airbus(x))))", "all x y.((ComericalAircraft(x) & (Boeing(y) | Airbus(y))) -> ProducedBy(x,y))", "all x y.((CommericalAircraft(x) & Boeing(y)) | Airbus(y)) -> ProducedBy(x,y))", "all x.(CommericalAircraft(x) -> (Boeing(x) | Airbus(x)))", "all x.(CommercialAerial(x) -> (ProducedByBoeing(x) | ProducedByAirbus(x)))", "all x.(CommericalAircraft(x) -> (ProducedByBoeing(x) | ProducedByAirbus(x)))", "all x.(ComparicalAircraft(x) -> (ProducedBy(x,Boeing) | ProducedBy(x,Airbus)))", "(all x.(CommericalAircraft(x) -> (Boeing(x) | Airbus(x))))", "all x.(CommericalAircraft(x) -> (Boeing(x) | Airbus(x)))", "all x y.((CommericalAircraft(x) & Boeing(y)) | Airbus(y)) -> ProducedBy(x,y))", "all x.(CommercialAerial(x) -> (ProducedByBoeing(x) | ProducedByAirbus(x)))", "all x.(CommericalAircraft(x) -> (ProducedByBoeing(x) | ProducedByAirbus(x)))", "all x.(CommercialAircraft(x) -> (Busking(x) | Airbus(x)))", "all x.(ComparativeAviation(x) -> (ProducedByBoeing(x) | ProducedByAirbus(x)))"]}
{"id": "folio_train_781", "nl": "All American Airlines jets are commerical aircraft. ", "fol": "all x.(IsAmericanAirlinesAircraft(x) -> IsCommercialAircraft(x))", "prediction": ["all x.(AmericanAirlineJet(x) -> CommericalAircraft(x))", "all x.(AirlineJet(x) -> CommericalAircraft(x))", "all x.(AmericanAirlineJet(x) -> CommericalAircraft(x))", "all x.(AeroportunityJet(x) -> CommericalAircraft(x))", "all x.(AirlineJet(x) -> CommericalAircraft(x))", "all x y.((AirlineJet(x) & AmericanAirline(y)) -> CommericalAircraft(x))", "(ComparicalAircraft(AmericanAirlineJet)", "all x y.((AmericanAirlineJet(x) & Jet(y) & CommericalAircraft(x)) -> CommericalAircraft(x))", "all x.(AmericanAirlineJet(x) -> CommericalAircraft(x))", "all x.(AtlanticAirlineJet(x) -> CommericalAircraft(x))", "(ComparicalAircraft(AmericanAirlineJets)", "all x.(AirlineJet(x) -> CommericalAircraft(x))", "all x.(AmericanAirlineJet(x) -> CommericalAircraft(x))", "all x.(AirlineJet(x) -> CommericalAircraft(x))", "all x.(AmericanAirlineJet(x) -> CommericalAircraft(x))", "All x.(AmericanAirlineJet(x) -> CommericalAviation(x))"]}
{"id": "folio_train_782", "nl": "Airbus made more in revenue than Boeing last year.", "fol": "AirbusRevenueGreaterThanBoeing(Airbus,Boeing)", "prediction": ["all x y.((Airbus(x) & Boeing(y)) -> MadeMoreRevenue(x,y))", "(MoreRevenueInAirbus(Airbus,Boeing) & MoreRevenueInBoeing(Airbus,Boeing))", "all x.(Airbus(x) -> MoreRevenue(x,Boeing))", "all x.((Airbus(x) & Boeing(x)) -> MadeMoreRevenue(x,y))", "all x y.((Airbus(x) & Boeing(y)) -> MadeMoreInRevenue(x,y))", "(MakingMoreRevenue(Airbus,Boeing) & MakingMoreRevenue(Airbus,Boeing))", "All x y z.((Airbus(x) & Boeing(y) & Revenue(z)) -> MadeMoreIn(x,y,z))", "(MoreRevenueInAirbus(Airbus,2017) & MoreRevenueInBoeing(Airbus,2017))", "all x y.((Airbus(x) & Boeing(y)) -> MadeMoreRevenue(x,y))", "(MakingMoreInRevenue(Airbus,Boeing,2013))", "all x.((Airbus(x) & Boeing(x)) -> MadeMoreInRevenue(x,y))", "all x.(Airbus(x) -> MoreRevenue(x,Boeing))", "all x y.((Airbus(x) & Boeing(y)) -> MoreRevenue(x,y))", "all x.(Airbus(x) -> MadeMoreRevenue(x,Boeing))", "all x y.((Airbus(x) & Boeing(y)) -> MadeMoreInRevenue(x,y))", "All x y.((Airbus(x) & Boeing(y)) -> MoreRevenue(x,y))"]}
{"id": "folio_train_783", "nl": "An American Airlines plane is either a Boeing or Airbus plane.", "fol": "all x.(IsAmericanAirlinesAircraft(x) -> (IsProducedBy(x,Boeing) | IsProducedBy(x,Airbus)))", "prediction": ["all x.(AmericanAirlinePlane(x) -> (BoeingPlane(x) | AirbusPlane(x)))", "all x.(AirlinePlane(x) -> (Boeing(x) | Airbus(x)))", "(all x.(AmericanAirlinePlane(x) -> (BoeingPlane(x) | AirbusPlane(x))))", "all x.(AfricanAirlinePlane(x) -> (BoeingPlane(x) | AirbusPlane(x)))", "all x.(AirlinePlane(x) -> (BoeingPlane(x) | AirbusPlane(x)))", "all x.(AmericanAirlinePlane(x) -> (BoeingPlane(x) | AirbusPlane(x)))", "all x.(AerialAirlinePlane(x) -> (BoeingPlane(x) | AirbusPlane(x)))", "all x y.((AirlinePlane(x) & Boeing(y)) | AirbusPlane(x,y)) -> Airplane(x))", "all x.(AmericanAirlinePlane(x) -> (Boeing(x) | Airbus(x)))", "all x.(AmericanAirline(x) -> (Boeing(x) | Airbus(x)))", "all x y.((AirlinePlane(x) & BoeingPlane(y)) | AirbusPlane(y)) -> AmericanAirlinePlane(x))", "all x.(AirlinePlane(x) -> (Boeing(x) | Airbus(x)))", "all x y.((AirlinePlane(x) & Boeing(y)) | AirbusPlane(x,y)) -> AirlinePlane(x))", "all x.(AirlinePlane(x) -> (BoeingPlane(x) | AirbusPlane(x)))", "exists x.(AmericanAirlinePlane(x) & (BoeingPlane(x) | AirbusPlane(x)))", "exists x.(AirlinePlane(x) & (Boeing(x) | Airbus(x)))"]}
{"id": "folio_train_784", "nl": "There exists a SpaceX commerical aircraft.", "fol": "exists x.SpaceXCommercialAircraft(x)", "prediction": ["exists x.(SpaceXCommericalAircraft(x))", "ExistsSpaceXCommericalAircraft(x)", "existance of SpaceX CommericalAircraft(x)", "exists x.(SpaceXComericalAircraft(x))", "ExistsSpaceXComericalAircraft(x)", "exists x.(SpaceXCommericalAircraft(x))", "existance of SpaceX CommericalAircraft(x)", "exists x.(SpaceXCommericalAircraft(x) & SpaceXCommericalAircraft(x))", "ExistsSpaceXCommericalAircraft(x)", "exists x.(SpaceXCommericalAircraft(x))", "Exists SpaceX CommericalAircraft(x)", "exists x.(SpaceX(x) & CommericalAircraft(x))", "exists x.(SpaceXCommericalAerial(x))", "exists x.(SpaceXCommericalAircraft(x) & Aircraft(x))", "exists x.(SpaceXComparativeAerospace(x))", "exists x.(SpaceXCommericalAircraft(x) & SpaceXCommericalAircraft(x))"]}
{"id": "folio_train_785", "nl": "There does not exist a United Airlines plane produced by Boeing.", "fol": "-exists x.(UnitedAirlinesPlane(x) & IsProducedBy(x,Boeing))", "prediction": ["exists x.(UnitedAirlinesPlane(x) & ProducedByBoeing(x))", "-exists x.(UnitedAirlinesPlane(x) & ProducedByBoeing(x))", "(exists x.(UnitedAirlinesPlane(x) & ProducedByBoeing(x)))", "(-exists UnitedAirlinesPlane(x) & ProducedByBoeing(x))", "exists x.(UnitedAirlinesPlane(x) & ProducedByBoeing(x))", "-exists x.(UnitedAirlinesPlane(x) & ProducedByBoeing(x))", "exists x.(UnitedAirline(x) & ProducedByBoeing(x))", "Exists(x) & UnitedAirlines(x) & ProducedByBoeing(x))", "-exists x.(UnitedAirline(x) & ProducedByBoeing(x))", "(exists x.(UnitedAirlinesPlane(x) & ProducedByBoeing(x)))", "(-exists x.(UnitedAirlinesPlane(x) & ProducedByBoeing(x)))", "exists x.(UnitedAirlinesPlane(x) & ProducedByBoeing(x))", "-exists x.(UnitedAirlines(x) & ProducedByBoeing(x))", "exists x.(UnitedAirline(x) & ProducedByBoeing(x))", "Exists(x) & UnitedAirlinesPlane(x) & ProducedByBoeing(x))", "-exists x.(UnitedAirline(x) & ProducedByBoeing(x))"]}
{"id": "folio_train_786", "nl": "There is a commercial plane made by both Airbus and Boeing.", "fol": "exists x.(IsCommercialAircraft(x) & IsProducedBy(x,Airbus) & IsProducedBy(x,Boeing))", "prediction": ["exists x.(CommercialPlane(x) & Airbus(x) & Boeing(x))", "exists x y.(CommercialPlane(x) & Airbus(y) & Boeing(z))", "all x y z.((Airbus(x) & Boeing(y) & CommercialPlane(z)) -> (MadeBy(x,y) & MadeBy(x,z)))", "exists x.(CommercialPlane(x) & MadeByAirbus(x) & MadeByBoeing(x))", "exists x.(CommercialPlane(x) & Airbus(x) & Boeing(x))", "exists x.(CommercialPlane(x) & Airbus(x) & Boeing(x))", "(exists x.(CommercialPlane(x) & MadeByAirbus(x) & MadeByBoeing(x)))", "exists x y.(CommercialPlane(x) & Airbus(y) & Boeing(y))", "all x y z.((Airbus(x) & Boeing(y) & CommercialPlane(z)) -> (MadeBy(x,y) & MadeBy(y,z)))", "exists x.(CommercialPlane(x) & MadeByAirbus(x) & MadeByBoeing(x))", "exists x.(CommercialPlane(x) & Airbus(x) & Boeing(x))", "all x y.((Airbus(x) & Boeing(y)) -> CommercialPlane(x,y))", "exists x.(CommercialPilot(x) & Airbus(x) & Boeing(x))", "exist x.(CommercialPlane(x) & MadeByAirbus(x) & MadeByBoeing(x))", "exists x.(CommercialPlane(x) & Airbus(x) & Boeing(x))", "exists x.(CommercialPlane(x) & Airbus(x) & Boeing(x))"]}
{"id": "folio_train_787", "nl": "Luzon is an island in the Philippines.", "fol": "(IsIsland(Luzon) & LocatedIn(Luzon,Philippines))", "prediction": ["all x.(Luzon(x) -> IslandInPyrrhuana(x))", "Luzon is an island in the Philippines.", "(Island(Luzon) & IslandInPyrrhuana(Luzon))", "island(Luzon) & InPyongyang(Luzon))", "(IslandInPyrras(Luzon) & IslandInPyras(Luzon))", "all x.(Luzon(x) -> IslandInPyongyang(x))", "IslandInPyrra(Luzon)", "(Island(Luzon) & InPyongyang(Luzon))", "IslandInPhilippines(Luzon)", "IslandInPyongyang(Luzon)", "Luzon is an island in the Philippines.", "Luzon IslandInPyrracial(Luzon)", "island(Luzon) & InPyongyang(Luzon))", "IslandInPyrras(Luzon)", "all x.(Luzon(x) -> IslandInPyongyang(x))", "Luzon is an island in the Philippines."]}
{"id": "folio_train_788", "nl": "In December 1999, an earthquake struck Luzon.", "fol": "exists x.(EarthquakeEvent(x) & OccurredIn(x,December1999) & Affected(x,Luzon))", "prediction": ["all x y.((Earthquake(x) & Luzon(y)) -> InDecembre99(x,y))", "In December 1999, an earthquake struck Luzon.", "(Earthquake(Decembre99) & HitsLuzon(Decembre99))", "all x.(Earthquake(x) -> HitsLuzon(x))", "-EarthquakeStruckLuzon(Earthquake,Decembre99)", "(EarthquakeStruckLuzon(Decembre99))", "all x y.((Earthquake(x) & Luzon(y)) -> Hits(x,y))", "(Earthquake(Decembre1999) & StruckLuzon(Decembre1999))", "-EarthquakeStruckLuzon(-Decembre99))", "in December 1999, an earthquake struck Luzon.", "all x.(Earthquake(x) -> StrikesLuzon(x))", "in December 1999, earthquake struck Luzon.", "In December 1999, an earthquake struck Luzon.", "(EarthquakeStruckLuzon(December99))", "(Earthquake(december1999) & HitsLuzon(december1999))", "In December 1999, an earthquake struck Luzon."]}
{"id": "folio_train_789", "nl": "People died in the December 1999 earthquake in Luzon.", "fol": "exists x.(EarthquakeEvent(x) & OccurredIn(x,December1999) & Affected(x,Luzon) & CausedDeaths(x))", "prediction": ["all x y.((People(x) & DecemberEarthquake(y) & Luzon(y)) -> DiedIn(x,y))", "all x y.((Person(x) & Earthquake(y) & Luzon(y)) -> DiedIn(x,y))", "all x.((People(x) & Dec.1999Earthquake(x)) -> DiedInLuzon(x))", "all x y.((People(x) & Earthquake(y) & Luzon(y)) -> DiedIn(x,y))", "(DecemberEarthquake(People) & InLuzon(People))", "(DecemberEarthquake(People,Luzon) & DecadeEarthquake(People,Luzon))", "all x.((People(x) & DecemberEarthquake(x,1998)) -> DiedInLuzon(x))", "all x y z.((People(x) & Earthquake(y) & Luzon(z)) -> DiedIn(x,y,z))", "all x.((People(x) & ElevenDecemberEarthquake(x,y) & Luzon(y)) -> DiedIn(x,y))", "(December1999Earthquake(People,Luzon) & DiedIn(People,Earthquake,Luzon))", "(DiedInEarthquake(People,December99) & InLuzon(People,Luzon))", "(Decembre1999Earthquake(People) & InLuzon(People))", "all x y z.((Person(x) & Earthquake(y) & Luzon(z)) -> DiedIn(x,y,z))", "all x.(DecembreEarthquake(x) -> PeopleDiedInLuzon(x))", "all x y.((Person(x) & Earthquake(y) & Luzon(y)) -> DiedIn(x,y))", "all x.(People(x) -> DiedInEarthquake(x,Decembre99))"]}
{"id": "folio_train_790", "nl": "Leyte is an island in the Philippines.", "fol": "(IsIsland(Leyte) & LocatedIn(Leyte,Philippines))", "prediction": ["(Island(Leyte) & InPyongyang(Leyte))", "all x.(Leyte(x) -> IslandInPyongyang(x))", "Leyte IslandInPyrras.", "L\u00e9yte Island(x) & InPyongyang(x))", "(Island(Leyte) & IslandInPyongyang(Leyte))", "Leyte Island (IslandInPyrras)", "Leyte Island(x) & InPyongyang(y))", "IslandInPyrra(Leyte)", "All x.(Leyte(x) -> IslandInPyrras(x))", "is island in the Philippines.", "IslandInPyongyang(leyte)", "Leyte is an island in the Philippines.", "Leyte (IslandInPyrras)", "Leyte Island, Philippines.", "Leyte IslandInPyongyang(i)", "Leyte is an island in the Philippines."]}
{"id": "folio_train_791", "nl": "No one has ever died of an earthquake that struck in the Philippines.", "fol": "-exists x y.(EarthquakeEvent(x) & Affected(x,y) & LocatedIn(y,Philippines) & CausedDeaths(x))", "prediction": ["-exists x.(Earthquake(x) & StruckInPhone(x))", "all x.((Person(x) & Earthquake(x) & StruckInPyrong(x)) -> -DeadOf(x,y))", "all x y.((Person(x) & Earthquake(y) & StruckInPyrahia(x,y)) -> -DeadOf(x,y))", "no one has ever died of an earthquake that struck in the Philippines.", "(exists x.(Earthquake(x) & StruckInPhone(x)) & -DeadOf(x,Earthquake))", "all x.((Person(x) & EverDiedOfEarthquake(x)) -> -StruckInPyrahia(x))", "-exists x.(Earthquake(x) & -StruckInPhone(x))", "all x.((Number(x) & Earthquake(x) & StruckInPyrahia(x)) -> -DeadOf(x,y))", "all x.((Person(x) & Earthquake(x)) -> -DeadOf(x,y))", "-exists x.(Earthquake(x) & StruckInPyrahia(x))", "(exists x.(Earthquake(x) & -DeadOf(x,y)) & -StruckInPyrras(y))", "-exists x.(Earthquake(x) & FeltInPyrahia(x))", "-(Earthquake(n) & StruckInPyrruah(n)))", "-exists x.(Earthquake(x) & StruckInPhone(x))", "-exists x.(Earthquake(x) & HitsInPyras(x))", "-exists x.(Earthquake(x) & InPhone(x))"]}
{"id": "folio_train_792", "nl": "In 1999, there was at least one earthquake in the Philippines.", "fol": "exists x y.(EarthquakeEvent(x) & OccurredIn(x,December1999) & Affected(x,y) & LocatedIn(y,Philippines))", "prediction": ["all x.((Earthquake(x) & InPhnomenon(x)) -> InPhnomenon(x))", "all x y.((Earthquake(x) & Philippines(y)) -> In(x,y))", "1999, there was at least one earthquake in the Philippines.", "in 1999, there was at least one earthquake in the Philippines.", "(exists x.(Earthquake(x) & InPhone(x)) & InPhone(x))", "-exists x.(Earthquake(x) & InPhnomenon(x))", "(exists x.(Earthquake(x) & InPhnomenon(x)) & InPhnomenon(x))", "all x.((Earthquake(x) & InPhone(x,99)) -> ThereAtLeastOneInPhone(x))", "there was at least one earthquake in the Philippines in 1999.", "In 1999, there was at least one earthquake in the Philippines.", "1999, there was at least one earthquake in the Philippines.", "(AtLeastOneEarthquakeInPhone(1999))", "all x.((Unfortunately(x) & InPhnomenon(x,1999)) -> ThereAtLeastOneEarthquake(x))", "all x.((Earthquake(x) & InPhnomenon(x,99)) -> InPhnomenon(x))", "(exists x.(Earthquake(x) & In(x,y)) & In(y,z) & In(z,y)))", "1999, there was at least one earthquake in the Philippines."]}
{"id": "folio_train_793", "nl": "People either invest in the public stock market regularly or enjoy gambling regularly.", "fol": "all x.(InvestInPublicStockMarketRegularly(x) | EnjoyGamblingRegularly(x))", "prediction": ["all x.(InvestsInPublicStockMarket(x) | EnjoysGambling(x))", "all x y.((Person(x) & PublicStockMarket(y)) -> (InvestsIn(x,y) | EnjoysGambling(x,y)))", "exists x.(Person(x) & (InvestsInPublicStockMarket(x) | EnjoysGambling(x)))", "(InvestsInPublicStockMarket(Person,StockMarket) | EnjoysGambling(Person,StockMarket))", "all x.(InvestsInPublicStockMarket(x) | EnjoysGaming(x))", "all x y.((Person(x) & StockMarket(y)) -> (InvestsIn(x,y) | EnjoysGambling(x)))", "all x y.((Person(x) & PublicStockMarket(y)) -> (InvestsIn(x,y) | EnjoysGambling(x)))", "exists x.(Person(x) & ((InvestsInPublicStockMarket(x) & Regularly(x)) | EnjoysGambling(x))))", "all x y.((Person(x) & PublicStockMarket(y) & (InvestsIn(x,y) | EnjoysGambling(x,y))) -> Regular(x))", "all x.(InvestsInPublicStockMarket(x) | EnjoysGambling(x))", "exists x.(Person(x) & (InvestsInPublicStockMarket(x) | EnjoysGaming(x)))", "all x y.((People(x) & PublicStockMarket(y) & (InvestsIn(x,y) | EnjoysGambling(x,y))) -> Regular(x))", "all x.(InvestsInPublicStockMarket(x) | EnjoysGamingRegularly(x))", "all x y.((Person(x) & StockMarket(y)) -> (InvestsIn(x,y) | EnjoysGambling(x,y)))", "exists x.(People(x) & ((InvestsInPublicStockMarket(x) & Regularly(x)) | EnjoysGaming(x))))", "exists x.(Person(x) & (InvestsInPublicStockMarket(x) | EnjoysGambling(x)))"]}
{"id": "folio_train_794", "nl": "If people invest in the public stock market regularly, then they read the Wall Street Journal and other newspapers regularly to keep updated on financial metrics.", "fol": "all x.(InvestInPublicStockMarketRegularly(x) -> ReadsNewspapersRegularly(x))", "prediction": ["all x.(InvestsInPublicStockMarketRegularly(x) -> (ReadsWallStreetJournal(x) & ReadsOtherNewspapersRegularly(x) & UpdatesFinancialMetrics(x)))", "all x y.((InvestsInPublicStockMarket(x) & Regularly(x)) -> (ReadsWallStreetJournal(y) & ReadsOtherNewspapers(y)))", "all x y z.((InvestsInPublicStockMarket(x) & WallStreetJournal(y) & Newspaper(z)) -> ReadsRegularlyToKeepUpdatedOnFinancialMetrics(x,y,z))", "(InvestsInPublicStockMarketRegularly(Person,WallStreetJournal) & ReadsWallStreetJournal(Person,WallStreetJournal) & ReadsNewspapersRegularly(Person,FinancialMetadata))", "all x.((InvestsInPublicStockMarketRegularly(x) & ReadsWallStreetJournalAndOtherNewspapersRegularly(x)) -> KeepsUpdatedOnFinancialMetrics(x))", "all x.(InvestsInPublicStockMarketRegularly(x) -> (ReadsWallStreetJournal(x) & ReadsOtherNewspapers(x) & UpdatesFinancialMetrics(x)))", "all x.((InvestsInPublicStockMarket(x) & Regularly(x)) -> ReadsWallStreetJournalAndOtherNewspapers(x))", "all x y.((InvestsInPublicStockMarket(x) & Regularly(x)) -> ReadsWallStreetJournalAndOtherNewspapers(y))", "all x y.((InvestsInPublicStockMarketRegularly(x) & WallStreetJournal(y) & OtherNewspapers(y)) -> ReadsRegularly(x,y))", "all x y z.((InvestsInPublicStockMarket(x) & WallStreetJournal(y) & Newspaper(z) & RegularlyReads(x,y,z)) -> UpdatesFinancialMetrics(x))", "all x.(InvestsRegularly(x) -> (ReadsWallStreetJournal(x) & ReadsOtherNewspapers(x) & UpdatesFinancialMetrics(x)))", "all x.(InvestsInPublicStockMarketRegularly(x) -> ReadsWallStreetJournalAndOtherNewspapersRegularly(x))", "all x y.((InvestsInPublicStockMarketRegularly(x) & WallStreetJournal(y) & ReadsWallStreetJournal(y) & ReadsOtherNewspapers(y)) -> KeepsUpdatedOnFinancialMetrics(x))", "all x.((InvestsInPublicStockMarketRegularly(x) & ReadsWallStockJournalAndOtherNewspapersRegularly(x)) -> KeepsUpdatedOnFinancialMetadata(x))", "all x y z.((InvestsInPublicStockMarket(x) & WallStreetJournal(y) & Newspaper(z)) -> ReadsRegularlyToKeepUpdatedOnFinancialMetadata(x,y,z))", "all x.(InvestsInPublicStockMarketRegularly(x) -> (ReadsWallStreetJournal(x) & ReadsOtherNewspapersRegularly(x) & UpdatesFinancialMetadata(x)))"]}
{"id": "folio_train_795", "nl": "All people who enjoy gambling regularly spend a lot of money at casinos and other betting games.", "fol": "all x.(EnjoyGamblingRegularly(x) -> SpendMoneyAtCasinos(x))", "prediction": ["all x.(EnjoysGambling(x) -> SpendsLotOfMoneyAtCasinoAndBetweenBetweenGames(x))", "all x.((Person(x) & EnjoysGambling(x)) -> SpendsLotOfMoneyAtCasinoAndBetweenBetweenGames(x))", "all x y.((Person(x) & EnjoysGambling(x) & RegularlyGaming(x)) -> SpendsLotOfMoneyAtCasinoAndBetweenBetweenGames(x))", "all x.(EnjoyGaming(x) -> SpendsLotOfMoneyAtCasinoAndBettingGames(x))", "all x.(EnjoysGambling(x) -> SpendsLotOfMoneyAtCasinoAndBettingGames(x))", "all x y.((Person(x) & EnjoysGambling(x) & RegularGaming(y)) -> SpendsLotOfMoneyAtCasinoAndBetweenBetweenGames(x,y))", "all x.((Person(x) & EnjoysGambling(x)) -> SpendsLotOfMoneyAtCasinoAndBettingGames(x))", "all x y z.((Person(x) & EnjoyGambling(x) & Casino(y) & BettingGame(z)) -> SpendsLotOfMoneyAt(x,y,z))", "all x y.((Person(x) & EnjoysGaming(x) & RegularlySpoils(x,y)) -> SpendsLotOfMoneyAtCasinoAndBettingGames(x))", "all x.((People(x) & EnjoysGambling(x)) -> SpendsLotOfMoneyAtCasinoAndBetweenBetweenGames(x))", "all x.((Person(x) & EnjoysGamblingRegularly(x)) -> SpendsLotOfMoneyAtCasinoAndBettingGames(x))", "all x.(EnjoyGaming(x) -> SpendsLotOfMoneyAtCasinoAndBettingGames(x))", "all x.(EnjoysGaming(x) -> SpendsLotOfMoneyAtCasinosAndBetweenGames(x))", "all x.((Person(x) & EnjoysGaming(x)) -> SpendsLotOfMoneyAtCasinosAndBetweenGames(x))", "all x y.((Person(x) & EnjoysGambling(x) & RegularGaming(x)) -> SpendsLotOfMoneyAtCasinoAndBettingGames(y))", "all x.(EnjoysGambling(x) -> SpendsLotOfMoneyAtCasino(x))"]}
{"id": "folio_train_796", "nl": "People who spend a lot of money at casinos and other betting games visit the Las Vegas Strip regularly.", "fol": "all x.(SpendMoneyAtCasinos(x) -> VisitLasVegasStripRegularly(x))", "prediction": ["all x.((Person(x) & SpendsLotOfMoneyAtCasino(x) & SpendsLotOfBettingGames(x)) -> VisitsLasVegasStripRegularly(x))", "all x y.((Person(x) & SpendsLotOfMoneyAtCasino(x) & Bet365(y)) -> VisitsLasVegasStripRegularly(x))", "all x.((Person(x) & SpendsLotsOfMoneyAtCasino(x) & SpendsLotsOfBettingGames(x)) -> VisitsLasVegasStripRegularly(x))", "all x.((People(x) & SpendsLotOfMoneyAtCasino(x) & SpendsLotOfBettingGames(x)) -> VisitsLasVegasStripRegularly(x))", "all x y.((Person(x) & SpendsLotsOfMoneyAtCasino(x) & Bet365(y)) -> VisitsLasVegasStripRegularly(x))", "all x.((Person(x) & SpendsLotOfMoneyAtCasinoAndBettingGames(x)) -> VisitsLasVegasStripRegularly(x))", "all x.((Person(x) & SpendsLotsOfMoneyAtCasinoAndBettingGames(x)) -> VisitsLasVegasStripRegularly(x))", "all x y z.((Person(x) & Casino(y) & BettingGame(z) & SpendsLotOfMoneyAt(x,y,z)) -> VisitsLasVegasStripRegularly(x))", "all x y z.((Person(x) & LasVegasStrip(y) & Casino(z) & SpendsLotOfMoney(x,z)) -> VisitsRegularly(x,y,z))", "all x.((People(x) & SpendsLotsOfMoneyAtCasinosAndBetweenBetweenGames(x)) -> VisitsLasVegasStripRegularly(x))", "all x y.((Person(x) & LasVegasStrip(y) & SpendsLotOfMoneyAtCasinoAndBetweenBetweenGames(x,y)) -> VisitsRegularly(x,y))", "all x.((Person(x) & SpendsLootOfMoneyAtCasino(x) & SpendsBetweenBetweenBetweenGames(x)) -> VisitsLasVegasStripRegularly(x))", "all x y.((Person(x) & SpendsLotOfMoneyAtCasino(x) & Bet365(y)) -> VisitsLasVegasStripRegularly(x))", "all x.((People(x) & SpendsLotOfMoneyAtCasinoAndBettingGames(x)) -> VisitsLasVegasStripRegularly(x))", "all x y.((Person(x) & SpendsLotsOfMoneyAtCasino(x) & Bet365(x)) -> VisitsLasVegasStripRegularly(x))", "all x.((Person(x) & SpendsMoreAtCasino(x) & SpendsMoreAtBettingGames(x)) -> VisitsLasVegasStripRegularly(x))"]}
{"id": "folio_train_797", "nl": "People who spend a lot of money at casinos and other betting games have a lot of disposable income to spend.", "fol": "all x.(SpendMoneyAtCasinos(x) -> HasDisposableIncome(x))", "prediction": ["all x.((Person(x) & SpendsLotsOfMoneyAtCasino(x) & SpendsLotsOfBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBettweenBettweenBettweenBe", "all x.((Person(x) & SpendsLotOfMoneyAtCasino(x) & SpendsLotOfBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBettweenBe", "all x y.((Person(x) & SpendsLotsOfMoneyAtCasino(x) & SpendsLotsOfBettingGames(x)) -> HasLotsOfDisposableIncome(y))", "all x y.((Person(x) & SpendsLotOfMoneyAtCasino(x) & SpendsLotOfMoneyAtBetweenBetweenGames(x)) -> HasLotOfDisposableIncome(y))", "all x.((People(x) & SpendsLotOfMoneyAtCasino(x) & SpendsLotOfBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBettweenBe", "all x.((Person(x) & SpendsLotsOfMoneyAtCasino(x) & SpendsLotsOfBettingGames(x)) -> HasLotsOfDisposableIncome(x))", "all x y z.((Person(x) & SpendsLotOfMoneyAtCasino(x) & Bet365(y) & SpendsLotOfMoneyAt(x,y)) -> HasLotOfDisposableIncome(x))", "all x.((People(x) & SpendsLotsOfMoneyAtCasinosAndBetweenBetweenGames(x)) -> HasLotsOfDisposableIncome(x))", "all x.((Person(x) & SpendsLotOfMoneyAtCasino(x) & SpendsLotOfBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBettweenBe", "all x y.((Person(x) & SpendsLotOfMoney(x,y) & CasinosAndBettingGames(y)) -> HasLotOfDisposableIncome(x))", "all x y.((Person(x) & SpendsLotsOfMoneyAtCasino(x) & SpendsLotsOfBettingGames(x)) -> DisposableIncome(y))", "all x y z.((Person(x) & SpendsLotOfMoneyAtCasino(x) & BetGamingGame(y) & Casino(z) & SpendsLotOfMoneyAt(x,y,z)) -> DisposableIncome(x))", "all x.((Person(x) & SpendsLotsOfMoneyAtCasinosAndBetweenBetweenGames(x)) -> HasLotsOfDisposableIncome(x))", "all x.(SpoilsLotsOfMoneyAtCasinoAndBettingGames(x) -> HasLotsOfDisposableIncome(x))", "all x.((Person(x) & SpendsMoreAtCasino(x) & SpendsMoreAtBetweenBettingGames(x)) -> HasMoreDiscoverableIncome(x))", "all x y.((Person(x) & SpendsMoreAtCasino(x) & SpendsMoreAtBettingGames(x)) -> HasMoreDisposableIncome(x,y))"]}
{"id": "folio_train_798", "nl": "If Matt invests in the public stock market regularly, then Matt neither has a lot of disposable income to spend nor invests in the public stock market regularly. ", "fol": "((InvestInPublicStockMarketRegularly(Matt) -> -HasDisposableIncome(Matt)) & -InvestInPublicStockMarketRegularly(Matt))", "prediction": ["all x.((InvestsInPublicStockMarket(x) & Regularly(x)) -> (-(MattHasDisposableIncome(x) & RegularIncome(x)) | -(MattHasDisposableIncome(x) & RegularIncome(x)))))", "all x.(InvestsInPublicStockMarketRegularly(x) -> (Matt -(HasMuchDisposableIncome(x) & -InvestsInPublicStockMarketRegularly(x))))", "(InvestsInPublicStockMarketRegularly(Matt) -> (-LotOfDisposableIncome(Matt) & -InvestsInPublicStockMarketRegularly(Matt)))", "all x.((Matt(x) & RegularInvestment(x)) -> (-(Matt(x) & DisposableIncome(x)) | RegularInvestment(x))))", "all x y.((Matt(x) & PublicStockMarket(y) & RegularInvestment(x,y)) -> (-(Matt(x) & DisposableIncome(x) & RegularInvestment(x,y))))", "all x.((InvestsInPublicStockMarketRegularly(x) & Matt(x)) -> (-(HasMillionsOfDisposableIncome(x) & -InvestsInPublicStockMarketRegularly(x))))", "all x.(InvestsInPublicStockMarketRegularly(x) -> (-(MattHasDisposableIncome(x) & -InvestsInPublicStockMarketRegularly(x))))", "(InvestsInPublicStockMarketRegularly(Matt) -> (-HasDisposableIncome(Matt) & -InvestsInPublicStockMarketRegularly(Matt)))", "all x y.((InvestsInPublicStockMarket(x) & Matt(y)) -> (-(HasDisposableIncome(y) & HasPublicStockMarketIncome(y)) | -(HasDisposableIncome(y) & HasPublicStockMarketIncome(y)))))", "all x.((Matt(x) & RegularInvestment(x)) -> (-(MattHasDisposableIncome(x) & RegularInvestment(x)) | (MattHasDisposableIncome(x) & RegularInvestment(x)))))", "all x y.((Matt(x) & PublicStockMarket(y) & RegularInvestment(x,y)) -> (-Matt(x) & DisposableIncome(x) & -InvestsInPublicStockMarket(x,y)))", "all x.(InvestsInPublicStockMarketRegularly(x) -> (Matt & -(HasMuchDisposableIncome(x) | InvestsInPublicStockMarketRegularly(x))))", "(InvestsInPublicStockMarketRegularly(Matt) & Matt -(HasDisposableIncome(Matt) | InvestsInPublicStockMarketRegularly(Matt)))", "all x y.((Matt(x) & PublicStockMarket(y) & RegularInvestment(x,y)) -> (-LotOfDisposableIncome(x) & -InvestsInPublicStockMarket(x,y)))", "all x.((InvestsInPublicStockMarket(x) & RegularlyInvests(x)) -> (-LotOfDisposableIncome(x) & -InvestsInPublicStockMarketRegularly(x)))", "all x.(InvestsInPublicStockMarketRegularly(x) -> (NecessaryDisposableIncome(x) & -InvestsInPublicStockMarketRegularly(x)))"]}
{"id": "folio_train_799", "nl": "Matt reads the Wall Street Journal and other newspapers regularly to keep updated on financial metrics.", "fol": "(Reads(Matt,WallStreetJournal) & Reads(Matt,OtherNewspapers))", "prediction": ["all x.((Matt(x) & WallStreetJournal(x) & OtherNewspapers(x)) -> ReadsRegularly(x))", "(ReadsWallStreetJournal(Matt) & ReadsOtherNewspapers(Matt) & KeepsUpdatedOnFinancialMetrics(Matt))", "all x y.((Matt(x) & WallStreetJournal(y) & OtherNewspapers(x)) -> ReadsRegularly(x,y))", "Matt reads WallStreetJournalAndOtherNewspapersRegularlyToKeepUpdatedOnFinancialMetrics(Matt)", "all x.(ReadsWallStreetJournalAndOtherNewspapers(x) -> KeepsUpdatedOnFinancialMetrics(x))", "(Reads(Matt,WallStreetJournal) & Reads(Matt,WallStreetJournal) & Reads(Matt,WallStreetJournal))", "(Reads(Matt) & WallStreetJournal(Matt) & Reads(Matt) & Reads(Matt) & Reads(Matt) & Reads(Matt))", "all x y z.((Matt(x) & WallStreetJournal(y) & Newspaper(z)) -> ReadsRegularlyToKeepUpdatedOnFinancialMetrics(x,y,z))", "Matt reads the WallStreetJournal and other newspapers regularly to keep updated on financial metrics.", "all x y.((Matt(x) & WallStreetJournal(y) & OtherNewspapers(x)) -> ReadsRegularlyToKeepUpdatedOnFinancialMetrics(x,y))", "Matt ReadsWallStreetJournalAndOtherNewspapersRegularlyToKeepUpdatedOnFinancialMetrics(Matt)", "all x.((Matt(x) & WallStreetJournal(x) & OtherNewspapers(x)) -> KeepsUpdatedOnFinancialMetrics(x))", "(ReadsWallStreetJournal(Matt) & ReadsOtherNewspapers(Matt))", "Matt reads WallStreetJournalAndOtherNewspapersRegularlyToKeepUpdatedOnFinancialMetrics(Matt)", "(Reads(Matt,WallStreetJournal) & Reads(Matt,WallStreetJournal) & Reads(Matt,WallStreetJournal))", "Matt ReadsWallStreetJournalAndOtherNewspapersRegularlyToKeepUpdatedOnFinancialMetrics(Matt)"]}
{"id": "folio_train_800", "nl": "If Matt is either both a person who has a lot of disposable income to spend and invests in the public stock market regularly, or neither has a lot of disposable income to spend nor invests in the public stock market regularly, then Matt neither visits the Las Vegas Strip regularly nor reads the Wall Street Journal and other newspapers regularly to keep updated on the financial metrics.", "fol": "(((HasDisposableIncome(Matt) & InvestInPublicStockMarketRegularly(Matt)) | (-HasDisposableIncome(Matt) & -InvestInPublicStockMarketRegularly(Matt))) -> (-VisitLasVegasStripRegularly(Matt) & -ReadsNewspapersRegularly(Matt)))", "prediction": ["all x.((Person(x) & ((LotOfDisposableIncome(x) & RegularInvestment(x)) | (-LotOfDisposableIncome(x) & RegularInvestment(x)))) -> (-VisitsLasVegasStripRegularly(x) & -ReadsWallStreetJournalAndOtherNewspapersRegularly(x))))", "all x.((Person(x) & ((LotOfDisposableIncome(x) & SpendsPublicStockMarketRegularly(x)) | (-LotOfDisposableIncome(x) & SpendsPublicStockMarketRegularly(x)))) -> (-VisitsLasVegasStripRegularly(x) & -ReadsWallStreet(x) & -ReadsWallStreetNewspaperRegularly(x))))", "all x.((Matt(x) & ((LotOfDisposableIncome(x) & RegularInvestment(x)) | (-LotOfDisposableIncome(x) & RegularInvestment(x))))) -> (-VisitsLasVegasStripRegularly(x) & -ReadsWallStreetJournalAndOtherNewspapersRegularly(x)))", "all x.((Person(x) & (LotOfDisposableIncome(x) & RegularInvestment(x)) | (-LotOfDisposableIncome(x) & RegularInvestment(x)))) -> (-VisitsLasVegasStripRegularly(x) & -ReadsWallStreetJournalAndOtherNewspapersRegularly(x)))", "((Person(Matt) & HasLotOfDisposableIncome(Matt) & SpendsInPublicStockMarketRegularly(Matt)) | (-HasLotOfDisposableIncome(Matt) & -InvestsInPublicStockMarketRegularly(Matt))))", "(all x.((Person(x) & HasDisposableIncome(x) & SpendsPublicStockMarketRegularly(x)) | (-HasDisposableIncome(x) & -InvestsPublicStockMarketRegularly(x)))) -> (-VisitsLasVegasStripRegularly(x) & -ReadsWallStreetJournalAndOtherNewspapersRegularly(x)))", "all x.((Person(x) & ((LotOfDisposableIncome(x) & RegularStockMarketInvestment(x)) | (-LotOfDisposableIncome(x) & RegularStockMarketInvestment(x)))) -> (-VisitsLasVegasStripRegularly(x) & -ReadsWallStreetJournalAndOtherPressesRegularly(x)))", "all x y.((Person(x) & Person(y) & HasLotOfDisposableIncome(x,y) & RegularStockMarketInvestment(x)) | (-HasLotOfDisposableIncome(y) & RegularStockMarketInvestment(y))))", "all x.((Matt(x) & ((LotOfDisposableIncome(x) & SpendsPublicStockMarket(x) & -InvestsPublicStockMarket(x)) | (-LotOfDisposableIncome(x) & -InvestsPublicStockMarket(x)))) -> (-VisitsLasVegasStripRegularly(x) & -ReadsWsJURegularly(x)))", "((Person(Matt) & (HasDisposableIncome(Matt) | -HasDisposableIncome(Matt))) & ((Matt) & VisitsLasVegasStripRegularly(Matt) & -ReadsWallStreetJournalAndOtherNewspapersRegularly(Matt)) | (-HasDisposableIncomerateRegularly(Matt)))))", "(all x.((Person(x) & HasMuchDisposableIncome(x) & SpendsPublicStockMarketRegularly(x)) | (-HasMuchDisposableIncome(x) & -InvestsPublicStockMarketRegularly(x)))) -> (-VisitsLasVegasStripRegularly(x) & -ReadsWallStreet(x) & -ReadsWallStreetNewspaperRegularly(x)))", "all x y.((Person(x) & Person(y) & HasDisposableIncome(x,y) & SpendsPublicStockMarketRegularly(x) & -(HasDisposableIncome(x,y) & -InvestsPublicStockMarketRegularly(x))) -> (-VisitsLasVegasStripRegularly(x) & -ReadsWsJURegularly(x) & -HasDenseInCurrently(x)))", "all x.((Person(x) & HasLotOfDisposableIncome(x) & InvestsInPublicStockMarketRegularly(x)) | (-(Person(x) & VisitsLasVegasStripRegularly(x) & ReadsWallStreetJournalAndOtherNewspapersRegularly(x)))))", "((Person(Matt) & HasLotOfDisposableIncome(Matt) & SpendsPublicStockMarketRegularly(Matt)) | (-HasLotOfDisposableIncome(Matt) & -InvestsPublicStockMarketRegularly(Matt))))", "all x.((Person(x) & ((LotOfDisposableIncome(x) & SpendsPublicStockMarket(x) & -InvestsPublicStockMarket(x)) | (-LotOfDisposableIncome(x) & SpendsPublicStockMarket(x)))) -> (-VisitsLasVegasStripRegularly(x) & -ReadsWsJOx(x) & -ReadsPublicStockMarketRegularly(x)))", "all x.((Matt(x) & ((LotOfDisposableIncome(x) & RegularInvestment(x)) | (-LotOfDisposableIncome(x) & RegularInvestment(x)))) -> (-VisitsLasVegasStripRegularly(x) & -ReadsWallStreetJournalAndOtherNewspapersRegularly(x)))"]}
{"id": "folio_train_801", "nl": "If Matt is either a person who has a lot of disposable income to spend or reads the Wall Street Journal and other newspapers regularly, then Matt neither has a lot of disposable income to spend nor visits the Las Vegas Strip Regularly.", "fol": "((HasDisposableIncome(Matt) | ReadsNewspapersRegularly(Matt)) -> (-HasDisposableIncome(Matt) & -VisitLasVegasStripRegularly(Matt)))", "prediction": ["all x.((Person(x) & (HasMuchDisposableIncome(x) | ReadsWallStreetJournal(x) & ReadsWallStreetJournal(x))) -> -(HasMuchDisposableIncome(x) & VisitsLasVegasStripRegularly(x)))", "all x.((Person(x) & (HasLotOfDisposableIncome(x) | ReadsWallStreetJournal(x) & ReadsWallStreetJournal(x))) -> -(HasLotOfDisposableIncome(x) & VisitsLasVegasStripRegularly(x))))", "((Person(Matt) & (HasDisposableIncome(Matt) | ReadsWallStreetJournal(Matt))) -> -(HasDisposableIncome(Matt) & VisitsLasVegasStripRegularly(Matt))))", "all x.((Person(x) & (LotOfDisposableIncome(x) | ReadsWallStreetJournalAndOtherNewspapers(x))) -> (-LotOfDisposableIncome(x) & -VisitsLasVegasStripRegularly(x)))", "all x.((Person(x) & (HasDisposableIncome(x) | ReadsWallStreetJournal(x) & ReadsWallStreetJournal(x))) -> (-HasDisposableIncome(x) & -VisitsLasVegasStripRegularly(x)))", "all x.((Person(x) & ((HasDisposableIncome(x) & Spends(x)) | ReadsWallStreetJournal(x) & ReadsOtherNewspapers(x))) -> -(HasDisposableIncome(x) & VisitsLasVegasStripRegularly(x))))", "all x.((Matt(x) & (LotOfDisposableIncome(x) | ReadsWallStreetJournal(x) | ReadsOtherNewspapersRegularly(x))) -> (-LotOfDisposableIncome(x) & -VisitsLasVegasStripRegularly(x)))", "all x y.((Person(x) & Matt(y) & (HasLotOfDisposableIncome(x,y) | ReadsWallStreetJournal(x,y)) & ReadsWallStreetJournal(x,y))) -> (-HasLotOfDisposableIncome(x,y) & -VisitsStripRegularly(x,y)))", "all x y.((Person(x) & Matt(y) & (HasDisposableIncome(x,y) | ReadsWallStreetJournalAndOtherNewspapers(x,y))) -> (-HasDisposableIncome(x,y) & -VisitsLasVegasStripRegularly(x,y)))", "((Person(Matt) & (HasMuchDisposableIncome(Matt) | ReadsWallStreetJournal(Matt))) -> -(HasMuchDisposableIncome(Matt) & VisitsLasVegasStripRegularly(Matt))))", "(all x.((Person(x) & HasMuchDisposableIncome(x)) | (ReadsWallStockJournal(x) & ReadsWallStreetJournal(x)))) -> -(Person(x) & HasMuchDisposableIncome(x) & VisitsLasVegasStripRegularly(x))))", "all x.((Matt(x) & (HasMuchDisposableIncome(x) | ReadsWallStreetJournalAndOtherNewspapersRegularly(x))) -> -(HasMuchDisposableIncome(x) & VisitsLasVegasStripRegularly(x)))", "all x.((Person(x) & (LotOfDisposableIncome(x) | ReadsWallStreetJournal(x)) & ReadsWallStreetJournal(x))) -> (-LotOfDisposableIncome(x) & -VisitsLasVegasStripRegularly(x)))", "((Person(Matt) & (HasDisposableIncome(Matt) | ReadsWallStreetJournal(Matt))) & -(HasDisposableIncome(Matt) & VisitsLasVegasStripRegularly(Matt))))", "all x.((Person(x) & HasMuchDisposableIncome(x) & (ReadsWallStreetJournal(x) | ReadsWallStreetJournal(x))) -> (-HasMuchDisposableIncome(x) & -VisitsLasVegasStripRegularly(x)))", "all x.((Person(x) & (HasMuchDisposableIncome(x) | ReadsWallStreetJournalAndOtherNewspapers(x))) -> -(HasMuchDisposableIncome(x) & VisitsLasVegasStripRegularly(x)))"]}
{"id": "folio_train_802", "nl": "All students learning piano can strike the right notes. ", "fol": "all x.((IsStudent(x) & LearningPiano(x)) -> CanStrikeRightNotes(x))", "prediction": ["all x.(Student(x) -> CanStrikeRightNotes(x))", "all x.(Student(x) -> CanStrikeRightNotes(x))", "all x y.((Student(x) & Piano(y)) -> CanStrikeRightNotes(x,y))", "all x.((Student(x) & LearningPiano(x)) -> CanStrikeRightNotes(x))", "(all x.(StudentLearningPiano(x) -> CanStrikeRightNotes(x)))", "all x.(Student(x) & LearnsPiano(x) -> CanStrikeRightNotes(x))", "all x y.((Student(x) & Piano(y) & Learns(x,y)) -> CanStrikeRightNotes(x))", "all x.(Student(x) -> CanStrikeRightNotes(x))", "all x y.((Student(x) & Piano(y) & Learns(x,y)) -> CanStrikeRightNotes(x,y))", "all x.((Student(x) & LearningPiano(x)) -> CanStrikeRightNotes(x))", "all x.((Student(x) & LearnsPiano(x)) -> CanStrikeRightNotes(x))", "all x.(StudentLearningPiano(x) -> CanStrikeRightNotes(x))", "all x y.((Student(x) & Piano(y) & Learning(x,y)) -> CanStrikeRightNotes(x,y))", "all x.(Student(x) -> CanStrikeRightNotes(x))", "all x.(Student(x) & LearningPiano(x) -> CanStrikeRightNotes(x))", "all x y.((Student(x) & Piano(y)) -> CanStrikeRightNotes(x,y))"]}
{"id": "folio_train_803", "nl": "All students who can strike the right note can get the rhythms right. ", "fol": "all x.((IsStudent(x) & CanStrikeRightNotes(x)) -> CanGetRhythmRight(x))", "prediction": ["all x.((Student(x) & CanStrikeRightNote(x)) -> CanGetRhythmsRight(x))", "all x.((Student(x) & StrikesRightNote(x)) -> GetsRhythmsRight(x))", "all x y.((Student(x) & StrikesRightNote(x)) -> GetRhythmsRight(x,y))", "all x.((Student(x) & CanStrikeRightNote(x)) -> CanGetRhythmsRight(x))", "all x.((Student(x) & CanStrikeRightNote(x)) -> CanGetRhythmsRight(x))", "all x y.((Student(x) & StrikesRightNote(x)) -> GetsRhythmsRight(x))", "all x y.((Student(x) & CanStrikeRightNote(x,y)) -> CanGetRhythmsRight(x))", "all x.((Student(x) & StrikeRightNote(x)) -> GetRhythmsRight(x))", "all x.((Student(x) & StrikesRightNote(x)) -> GetsRhythmsRight(x))", "all x.(StrikeRightNote(x) -> GetRhythmsRight(x))", "all x y.((Student(x) & StrikesRightNote(x,y)) -> GetsRhythmsRight(x))", "all x.((Student(x) & CanStrikeRightNote(x)) -> CanGetRhythmsRight(x))", "all x.((Student(x) & CanStrikeRightNote(x)) -> CanGetRhythmsRight(x))", "all x.((Student(x) & StrikeRightNote(x)) -> GetRhythmsRight(x))", "all x.(StruckRightNote(x) -> GetRhythmsRight(x))", "all x.((Student(x) & StrikesRightNote(x)) -> GetsRhythmsRight(x))"]}
{"id": "folio_train_804", "nl": "If a student can get the rhythms right, he will start working on coordination between the left and the right hands. ", "fol": "all x.((IsStudent(x) & CanGetRhythmRight(x)) -> StartsCoordination(x))", "prediction": ["all x.((Student(x) & GetsRhythmsRight(x)) -> WorksOnCoordination(x,left,right))", "all x y.((Student(x) & CanGetRhythmsRight(x)) -> WorksOnCoordination(x,y))", "all x.((Student(x) & GetsRhythmsRight(x)) -> Coordination(x,left,right))", "all x y.((Student(x) & RightRhythms(x) & LeftAndRightHands(y)) -> Coordination(x,y))", "all x.((Student(x) & CanGetRhythmsRight(x)) -> StartsWorkingOnCoordination(x,left,right))", "all x y z.((Student(x) & RightRhythms(y) & LeftHands(z) & RightHands(z)) -> Coordination(x,y,z))", "all x y.((Student(x) & GetRhythmsRight(x)) -> Coordination(y))", "all x y.((Student(x) & CanGetRhythmsRight(x)) -> (WorksOnCoordination(x,y) & LeftHands(y) & RightHands(y)))", "all x.(CanGetRhythmsRight(x) -> WorksOnCoordinationBetweenLeftAndRightHands(x))", "all x.((Student(x) & GetsRhythmsRight(x)) -> WorksOnCoordination(x,left,right))", "all x y.((Student(x) & RhythmsRight(x,y)) -> Coordination(x,y))", "all x.((Student(x) & GetRhythmsRight(x)) -> Coordination(x,left,right))", "all x.((Student(x) & CanGetRhythmsRight(x)) -> WorkingOnCoordination(x))", "all x.(CanGetRhythmsRight(x) -> Coordination(x,left,right,coordination))", "all x.((Student(x) & CanGetRhythmsRight(x)) -> (WorksOnCoordination(x,left,right)))", "all x.((Student(x) & GetsRhythmsRight(x)) -> CoordinatesHands(x,left,right))"]}
{"id": "folio_train_805", "nl": "Some students who start working on coordination between the left and the right hands become good at it. The other students find it challenging. ", "fol": "all x.((((IsStudent(x) & StartsCoordination(x)) -> IsGoodAtCoordination(x)) & -FindsCoordinationChallenging(x)) | (-((IsStudent(x) & StartsCoordination(x)) -> IsGoodAtCoordination(x)) & FindsCoordinationChallenging(x)))", "prediction": ["all x y.((Student(x) & Student(y) & StartsWorkingOnCoordination(x,left,right)) -> GoodAt(x,y))", "(exists x.(Student(x) & StartsWorkingOnCoordination(x,left) & StartsWorkingOnCoordination(x,right)) & exists y.(Student(y) & GoodAtCoordination(y,left)) & exists z.(Student(z) & GoodAtCoordination(z,right))))", "exists x.(Student(x) & WorksOnCoordination(x,left,right) & GoodAtCoordination(x) & Challenging(x))", "(exists x.(Student(x) & WorksOnCoordination(x,left,right)) & exists y.(Student(y) & WorksOnCoordination(y,left))) & exists z.(Student(z) & WorksOnCoordination(z,right)))", "all x.((Student(x) & StartsWorkingOnCoordination(x,left,right)) -> GoodAtCoordination(x))", "exists x.(Student(x) & StartsWorkingOnCoordination(x,left,right) & GoodAtCoordination(x) & Challenging(x))", "exists x.(Student(x) & ((StartsWorkingOnCoordination(x,left) & StartsWorkingOnCoordination(x,right)) | ((WorksOnCoordination(x,left) & WorksOnCoordination(x,right)))))", "(exists x.(Student(x) & StartsWorkingOnCoordination(x)) & exists y.(Student(y) & GoodAtCoordination(y)) & exists z.(Student(z) & GoodAtCoordination(z))))", "(exists x.(Student(x) & WorksOnCoordination(x)) & exists y.(Student(y) & WorksOnCoordination(y)) & GoodAtCoordination(y)) & exists z.(Student(z) & WorksOnCoordination(z) & WorksOnCoordination(z))))", "all x y.((Student(x) & Student(y) & StartsWorkingOnCoordination(x,left,right)) -> GoodAtCoordination(x))", "all x y z.((Student(x) & Student(y) & Student(z) & StartsWorkingOnCoordination(x,y,z)) -> (GoodAtCoordination(x,z) | ChallengingAtCoordination(y,z)))", "(exists x.(Student(x) & StartsWorkingOnCoordination(x,left,right)) & exists y.(Student(y) & GoodAtCoordination(y,left))) & exists z.(Student(z) & GoodAtCoordination(z,right)))", "all x.((Student(x) & WorksOnCoordination(x,left) & WorksOnCoordination(x,right)) -> GoodAt(x))", "exists x.(Student(x) & StartsWorkingOnCoordination(x,leftHands,rightHands) & GoodAtCoordination(x,leftHands,rightHands))", "exists x.(Student(x) & WorksOnCoordination(x,left,right) & GoodAtCoordination(x) & Challenging(x))", "all x y.((Student(x) & Student(y) & StartsWorkingOnCoordination(x,left,right)) -> GoodAt(x,y))"]}
{"id": "folio_train_806", "nl": "If John can strike the right notes, get the rhythms right and is good at coordination between right and left hands, then he puts emotions into his playing. ", "fol": "((CanStrikeRightNotes(John) & CanGetRhythmRight(John) & IsGoodAtCoordination(John)) -> ExpressesEmotionInPlaying(John))", "prediction": ["all x.((John(x) & StrikesRightNotes(x) & GetsRhythmsRight(x) & GoodAtCoordination(x)) -> PutsEmotionsIntoPlaying(x))", "all x y.((John(x) & StrikesRightNotes(x) & GetsRhythmsRight(x) & GoodAtCoordination(x,y)) -> PutsEmotionsIntoPlaying(x))", "all x.((John(x) & StrikesRightNotes(x) & GetsRhythmsRight(x) & GoodAtCoordination(x)) -> PutsEmotionsIntoPlaying(x))", "all x y z.((John(x) & RightNote(y) & RightHand(z) & Strikes(x,y) & RightHand(z) & RightHand(z) & RightHand(z)) -> PutsEmotionsIntoPlaying(x))", "(StrikeRightNotes(John) & GetRhythmsRight(John) & GoodCoordination(John,RightAndLeftHands))", "(StrikesRightNotes(John,RightNotes) & GetsRhythmsRight(John,RightHands) & GoodCoordination(John,RightHands)) -> PutsEmotionsIntoPlaying(John,RightHands))", "all x.((CanStrikeRightNotes(x) & GetRhythmsRight(x) & GoodAtCoordination(x)) -> PutsEmotionsIntoPlaying(x))", "all x.((John(x) & StrikesRightNotes(x) & GetsRhythmsRight(x) & GoodCoordination(x)) -> PutsEmotionsIntoPlaying(x))", "(StrikeRightNotes(John) & GetRhythmsRight(John) & GoodCoordination(John,RightHands)) -> PutsEmotionsIntoPlaying(John))", "all x y.((John(x) & StrikesRightNotes(x) & GetsRhythmsRight(x) & GoodAtCoordination(x,y)) -> PutsEmotionsIntoPlaying(x))", "all x y.((John(x) & StrikesRightNotes(x) & GetRhythmsRight(x) & GoodAtCoordination(x,y) & RightAndLeftHands(y)) -> PutsEmotionsIntoPlaying(x))", "all x.((John(x) & StrikesRightNotes(x) & GetsRhythmsRight(x) & GoodAtCoordination(x,RightAndLeftHands)) -> PutsEmotionsIntoPlaying(x))", "all x.((John(x) & StrikeRightNotes(x) & GetRhythmsRight(x) & GoodCoordination(x)) -> PutsEmotionsIntoPlaying(x))", "all x.((John(x) & StrikesRightNotes(x) & GetsRhythmsRight(x) & GoodCoordination(x)) -> PutsEmotionsIntoPlaying(x))", "All x.((John(x) & StrikesRightNotes(x) & GetRhythmsRight(x) & GoodCoordination(x,RightAndLeftHands)) -> PutsEmotionsIntoPlaying(x))", "all x.((John(x) & StrikesRightNotes(x) & GetsRhythmsRight(x) & GoodAtCoordination(x)) -> PutsEmotionsIntoPlaying(x))"]}
{"id": "folio_train_807", "nl": "John is a student learning piano. ", "fol": "(IsStudent(John) & LearningPiano(John))", "prediction": ["(StudentLearningPiano(John))", "all x.(StudentLearningPiano(x) -> John(x))", "John is a student learningPiano(John,y)", "(StudentLearningPiano(John))", "all x.(StudentLearningPiano(x) -> John(x))", "John is a student learningpiano(John,Piano)", "John is student learningpiano(John)", "-StudentLearningPiano(John)", "(StudentLearningPiano(John))", "John is a student learningPiano(John,y)", "all x.(StudentLearningPiano(x) -> John(x))", "(StudentLearningPiano(John,Jon))", "John is a student learningpiano(John)", "all x.(StudentLearningPiano(x) -> John(x))", "(StudentLearningPiano(John)", "(StudentLearningPiano(John,John))"]}
{"id": "folio_train_808", "nl": "John does not find coordination between the left and the right hands challenging. ", "fol": "-FindsCoordinationChallenging(John)", "prediction": ["John -(FindsCoordination(John,LeftHands) & FindsCoordination(John,RightHands)))", "(-FindsCoordination(John,LeftHands) & FindsCoordination(John,RightHands))", "John & -(FindsCoordination(John,LeftHands) & FindsCoordination(John,RightHands)))", "all x.((John(x) & LeftHand(x) & RightHand(x)) -> -CompellingCoordination(x))", "(-ChurchableCoordination(John,left) & ChallengingCoordination(John,right))", "-(FindsCoordination(John,LeftHands) & FindsCoordination(John,RightHands))", "John does not find coordination between the left and right hands challenging.", "(-Challenging(John,LeftHands) & Challenging(John,RightHands))", "((John(John) & LeftHands(John) & RightHands(John)) -> -CompellingCoordination(John))", "John does not find coordination between the LeftAndRightHandsChallenging(John)", "(-ChangesCoordination(John,left) & ChallengesCoordination(John,right))", "all x.((John(x) & LeftHandCoordination(x) & RightHandCoordination(x)) -> -Changes(x))", "all x.((John(x) & LeftHand(x) & RightHand(x)) -> -ChurchableCoordination(x))", "-(FindsCoordination(John,LeftHands) & FindsCoordination(John,RightHands))", "John does not find coordination between the left and right hands challenging.", "-(ChangesCoordination(John) & LeftHands(John))"]}
{"id": "folio_train_809", "nl": "John can get the rhythms right.", "fol": "CanGetRhythmRight(John)", "prediction": ["all x.(John(x) -> CanGetRhythmsRight(x))", "(CanGetRhythmsRight(John))", "all x.(John(x) -> CanGetRhythmsRight(x))", "all x y.((John(x) & Rhythm(y)) -> CanGetRight(x,y))", "-CanGetRhythmsRight(John)", "all x.((John(x) & RightRhythm(x)) -> CanGet(x,y))", "all x.(John(x) -> GetsRhythmsRight(x))", "(GetRhythmsRight(John,Jon))", "(CanGetRhythmsRight(John))", "John can getRhythmsRight(John)", "all x y.((John(x) & Rhythm(y)) -> CanGetRight(x,y))", "all x.(John(x) -> CanGetRhythmsRight(x))", "John can getRhythmsRight(John,x)", "all x.(John(x) -> GetsRhythmsRight(x))", "All x.(John(x) -> GetRhythmsRight(x))", "All x.(John(x) -> CanGetRhythmsRight(x))"]}
{"id": "folio_train_810", "nl": "John does not put emotions into his playing.", "fol": "-ExpressesEmotionInPlaying(John)", "prediction": ["all x.(John(x) -> -PutsEmotionsIntoPlaying(x))", "(-PutsEmotionsIntoPlaying(John))", "(PutsEmotionsIntoPlaying(John) | -PutsEmotionsIntoPlaying(John)))", "John -PutsEmotionsIntoPlaying(John))", "all x.((John(x) & -PutsEmotionsIntoPlaying(x)) -> -PutsEmotionsIntoPlaying(x))", "all x.(John(x) -> -PutsEmotionsIntoPlaying(x))", "John does not put emotions into playing.", "-PutsEmotionsIntoPlaying(John)", "-(PutsEmotionsIntoPlaying(John,John))", "John does not put emotions into his playing.", "(PutsEmotionsIntoPlaying(John,Jon))", "(-PutsEmotionsIntoPlaying(John,John))", "all x.(John(x) -> -PutsEmotionsIntoPlaying(x))", "-(PutsEmotionsIntoPlaying(John))", "John does not put emotions into playing.", "all x.(John(x) -> -PutsEmotionsIntoPlaying(x))"]}
{"id": "folio_train_811", "nl": "Barbara Ann Marshall is a former swimmer and former world record-holder.", "fol": "(IsFormerSwimmer(Barbaraannmarshall) & IsFormerWorldRecordHolder(Barbaraannmarshall))", "prediction": ["all x.(Marshall(x) -> (Ex-Swimmer(x) & FormerWorldRecordHolder(x)))", "(Ex-Swimmer(BarranMarshall) & FormerWorldRecordHolder(BarranMarshall))", "Barbara AnnMarshall (BabyAnnMarshall) & FormerSwimmer(BabyAnnMarshall) & FormerWorldRecordHolder(BabyAnnMarshall))", "(Ex-Swimmer(BabyAnnMarshall) & FormerWorldRecordHolder(BabyAnnMarshall))", "(BarrassAnnMarshall(Barrass) & FormerSwimmer(Barrass) & FormerWorldRecordHolder(Barrass))", "all x.(Marshall(x) -> (Ex-Swimmer(x) & WorldRecordHolder(x)))", "Barbara AnnMarshall (Barrassa Ann) & FormerSwimmer(BabyAnn) & FormerWorldRecordHolder(BabyAnn))", "Barbara AnnMarshall(b) & FormerSwimmer(b) & FormerWorldRecordHolder(c))", "all x.((Swimmer(x) & WorldRecordHolder(x)) -> BarbaraAnnMarshall(x))", "(Ex-Swimmer(BarranMarshall) & WorldRecordHolder(BarranMarshall))", "Barbara AnnMarshall (BabyAnnMarshall) -> (Ex-Swimmer(x) & WorldRecordHolder(x)))", "(Ex-Swimmer(Marshall) & FormerWorldRecordHolder(Marshall))", "all x.(Marshall(x) -> (Ex-Swimmer(x) & FormerWorldRecordHolder(x)))", "Barbara AnnMarshall (Barrassar(x) & FormerSwimmer(x) & FormerWorldRecordHolder(x))", "all x.(Marshall(x) -> (Swimmer(x) & WorldRecordHolder(x)))", "all x.(Marshall(x) -> (Ex-Swimmer(x) & WorldRecordHolder(x)))"]}
{"id": "folio_train_812", "nl": "Barbara Ann Marshall participated in the 1972 Summer Olympics.", "fol": "ParticipatedInEvent(Barbaraannmarshall,Summer1972olympics)", "prediction": ["all x.(Marshall(x) -> ParticipatedInSummerOlympics(x,72))", "(ParticipatedInSummerOlympics(Marshall,72))", "Barbara AnnMarshall participated in the 1972 SummerOlympics.", "Barbara AnnMarshall(Marshall) & ParticipatedInSummerOlympics(Marshall,72))", "Barbara Ann Marshall a participatesInSummerOlympics(Marshall,72)", "Barbara AnnMarshall participated in SummerOlympics(Marshall,72)", "Barbara AnnMarshall(BabeAnnMarshall) & ParticipatedInSummerOlympics(Marshall,72))", "-(Marshall(Marshall) & SummerOlympics(Marshall))", "BarbaraAnnMarshallParticipatedInSummerOlympics(Marshall,72)", "All x.(Marshall(x) -> ParticipatedInSummerOlympics(x,72))", "(ParticipatedInSummerOlympics(Marshall,72))", "(ParticipatedInSummerOlympics(Margaret,72))", "Barbara Ann Marshall participated in the 1972 SummerOlympics.", "Barbara AnnMarshall (Marshall,72))", "all x.(Marshall(x) -> ParticipatedInSummerOlympics(x, 1972))", "All x.(Marshall(x) -> ParticipatedInSummerOlympics(x,72))"]}
{"id": "folio_train_813", "nl": "Barbara Ann Marshall's home country is the United States.", "fol": "HasHomeCountry(Barbaraannmarshall,Unitedstates)", "prediction": ["(HomeCountry(Marshall,BabeAnn) & UnitedStates(Marshall,BabeAnn))", "(HomeCountry(BarrassMarshall,BabyAnn) & UnitedStates(Marshall,BabyAnn))", "Barbara AnnMarshallsHomeCountry(x) -> UnitedStates(x))", "All x.(Marshall(x) -> HomeCountry(x,USA))", "-(HomeCountry(BarraAnnMarshall,British) & UnitedStates(Marshall,British))", "(HomeCountry(BarraAnnMarshall) & UnitedStates(Marshall))", "-HomeCountry(BarraAnnMarshall)", "all x.(HomeCountry(x) -> UnitedStates(x))", "(HomeCountry(Marshall,BarbaraAnn) & UnitedStates(Marshall,BarbaraAnn))", "Her home country is UnitedStates(Marshall,BarbaraAnn))", "Barbara AnnMarshallsHomeCountry(x,USA)", "(HomeCountry(BarranMarshall,BabyAnn) & UnitedStates(Marshall,BabyAnn))", "All x.(Marshall(x) -> HomeCountry(x,UnitedStates))", "(HomeCountry(BarbaraAnnMarshall) & UnitedStates(Marshall))", "Her home country is United States.", "-HomeCountry(BarraAnnMarshall)"]}
{"id": "folio_train_814", "nl": "All people who compete in the 1972 Summer Olympics represent their home country.", "fol": "all x.(exists y.(ParticipatedInEvent(x,Summer1972olympics) & HasHomeCountry(x,y)) -> RepresentsCountry(x,y))", "prediction": ["all x.(CompetesInSummerOlympics(x,72) -> RepresentsHomeCountry(x))", "all x.((Person(x) & CompetesInSummerOlympics(x,72)) -> RepresentsHomeCountry(x))", "all x y.((Person(x) & CompetesInSummerOlympics(x,y) & 1972(y)) -> RepresentsHomeCountry(x,y))", "(all x.(CompetesInSummerOlympics(x,72)) -> RepresentsHomeCountry(x))", "all x.(CompetesInSummerOlympics(x,72) -> RepresentsHomeCountry(x))", "all x.(CompetesInSummerOlympics(x,72) -> RepresentsHomeCountry(x))", "all x y z.((Person(x) & SummerOlympics(y) & HomeCountry(z) & CompetesIn(x,y)) -> Represents(x,z))", "all x y.((Person(x) & CompetesInSummerOlympics(x,y) & 1972(y)) -> RepresentsHomeCountry(x,y))", "all x.((Person(x) & CompetesInSummerOlympics(x, 1972)) -> RepresentsHomeCountry(x))", "all x y.((Person(x) & CompetesInSummerOlympics(x,y) & 1972) -> RepresentsHomeCountry(x))", "all x.(CompetesInSummerOlympics(x,72) -> RepresentsHomeCountry(x))", "all x.((Person(x) & CompetesInSummerOlympics(x,72)) -> RepresentsHomeCountry(x))", "all x.(CompetesInSummerOlympics(x,72) -> RepresentsHomeCountry(x))", "all x y.((Person(x) & CompetesInSummerOlympics(x,y) & 1972(y)) -> RepresentsHomeCountry(x,y))", "all x y.((Person(x) & CompetesInSummerOlympics(x,y) & 1972) -> RepresentsHomeCountry(x,y))", "all x.((Person(x) & CompetesInSummerOlympics(x, 1972)) -> RepresentsHomeCountry(x))"]}
{"id": "folio_train_815", "nl": "Barbara Ann Marshall participated in the preliminary heat in the freestyle relay.", "fol": "ParticipatedInEvent(Barbaraannmarshall,Preliminaryheatfreestylerelay)", "prediction": ["all x.(Marshall(x) -> ParticipatedInPreliminaryHeat(x))", "all x y.((Marshall(x) & FreestyleRelay(y)) -> ParticipatedInPreliminaryHeat(x,y))", "Barbara AnnMarshall participated in the preliminary heat in the freestyle relay.", "(ParticipatedInPreliminaryHeat(Marshall,Freestyle))", "(PrimaryHeat(Marshall,BabryAnn) & ParticipatedInFreestyleRelay(Marshall,BabryAnn))", "-(MarshallMarshall(b) & ParticipatedInPreliminaryHeat(b,freestyle))", "(ParticipatedInPreliminaryHeat(Marshall,Freestyle) & BarbaraAnnMarshall(Marshall,Freestyle))", "Barbara AnnMarshall participated in preliminaryHeatInFreestyleRelay(Marshall,BabyAnn))", "(ParticipatedInPreliminaryHeat(Margaret,Freestyle) & BarbaraAnnMargaret(Margaret,Freestyle))", "Barbara Ann Marshall participated in the preliminary heat in the freestyle relay.", "all x.(Marshall(x) -> ParticipatedInPreliminaryHeat(x,freestyle))", "all x y.((Marshall(x) & PreliminaryHeat(y)) -> ParticipatedIn(x,y))", "-(MarshallMarshall(x) & ParticipatedInPreliminaryHeat(x,FreestyleRelay))", "Barbara AnnMarshall participated in the preliminary heat in the freestyle relay.", "Barbara AnnMarshall participated in preliminaryHeat(Marshall,Freestyle)", "all x.(Marshall(x) -> ParticipatedInPreliminaryHeatInFreestyleRelay(x))"]}
{"id": "folio_train_816", "nl": "Barbara Ann Marshall did not participate in the event final of the 1972 Summer Olympics freestyle relay.", "fol": "-ParticipatedInEvent(Barbaraannmarshall,Finalheatfreestylerelay)", "prediction": ["all x.((Marshall(x) & SummerOlympics(x,y)) -> -ParticipatedInEventFinal(x,y))", "(-ParticipatedInEventFinal(Marshall,72))", "Barbara AnnMarshall -ParticipatedInEventFinal(Marshall,72) & SummerOlympicsFreestyleRelay(Marshall,72))", "-(Marshall(Marshall) & SummerOlympics(72)) -ParticipatedInEventFinal(Marshall,72))", "all x.(Marshall(x) -> -ParticipatedInEventFinal(x,72))", "(-participatedInEventFinal(Marshall,72) & SummerOlympicsFreestyleRelay(Marshall,72))", "Barbara AnnMarshall (noparticipatedInEventFinal(Marshall,72))", "-(BarraAnnMarshall(Marshall) & SummerOlympics(72) & FreestyleRelay(Marshall))", "-(Marshall(Marshall) & SummerOlympics(72) & FreestyleRelay(Marshall))", "all x.((Marshall(x) & SummerOlympics(x,y)) -> -ParticipatedInEventFinal(x,y))", "Barbara AnnMarshall -ParticipatedInEventFinal(Marshall,72)", "\u2013(Marshall(Marshall,72) & EventFinal(Marshall,72)))", "(-participatedInEventFinal(BarbaAnnMarshall,72))", "(-ParticipatesInEventFinal(Marshall,72))", "(-participatedInEventFinal(Barra AnnMarshall,72))", "(-ParticipatesInEventFinal(Marshall,72))"]}
{"id": "folio_train_817", "nl": "Only relay swimmers who participated in the event final received medals.", "fol": "all x.((IsRelaySwimmer(x) & -ParticipatedInEvent(x,Finalheatfreerelay)) <-> -ReceivedMedal(x,Medal))", "prediction": ["all x.((RelaySwimmer(x) & ParticipatedInEventFinal(x)) -> ReceivedMedals(x))", "all x y.((RelaySwimmer(x) & EventFinal(y) & ParticipatedIn(x,y)) -> ReceivedMedals(x))", "all x.((RelaySwimmer(x) & ParticipatedInEventFinal(x)) -> ReceivedMedals(x))", "only relayswimmers who participated in event final received medals.", "all x y.((RelaySwimmer(x) & EventFinal(y) & ParticipatedIn(x,y)) -> ReceivedMedals(x))", "all x y z.((RelaySwimmer(x) & EventFinal(y) & ParticipatedIn(x,y) & Medal(z)) -> Received(x,z))", "all x y.((RelaySwimmer(x) & ParticipatedInEventFinal(x,y)) -> ReceivedMedals(x))", "only relayswimmers who participated in event final received medals.", "all x.((RelaySwimmer(x) & ParticipatedInEventFinal(x)) -> ReceivedMedals(x))", "all x y.((RelaySwimmer(x) & EventFinal(y) & ParticipatedIn(x,y)) -> ReceivedMedals(x))", "all x.(RelaySwimmer(x) -> ReceivedMedals(x))", "all x.((RelaySwimmer(x) & ParticipatedInEventFinal(x)) -> ReceivedMedals(x))", "all x y.((RelaySwimmer(x) & EventFinal(y) & ParticipatedIn(x,y)) -> ReceivedMedals(x))", "all x.((RelaySwimmer(x) & ParticipatedInEventFinal(x)) -> ReceivedMedal(x))", "all x.((RelaySwimmer(x) & ParticipatedInEventFinal(x)) -> ReceivedMedals(x))", "all x.((RelaySwimmer(x) & ParticipatedInEventFinal(x)) -> ReceivedMedal(x))"]}
{"id": "folio_train_818", "nl": "Barbara Ann Marshall did not receive medals.", "fol": "-Received(Barbaraannmarshall,Medal)", "prediction": ["Barbara AnnMarshall -ReceivedMedals(Marshall)", "-(Marshall(Marshall) & BarbaraAnn(Marshall))", "all x.(Marshall(x) -> -ReceivesMedals(x))", "(-ReceivedMedal(BarrassAnnMarshall))", "Barbara Ann Marshall -ReceivedMedals(Marshall)", "Barbara AnnMarshall(Marshall) -ReceivedMedals(Marshall))", "(-ReceivesMedals(BarrassAnnMarshall))", "-(Marshall(Marshall) & ReceivedMedals(Marshall))", "all x.(Marshall(x) -> -ReceivedMedals(x))", "Barbara AnnMarshall -ReceivedMedals(Marshall)", "(-ReceivedMedals(BarbaraAnnMarshall))", "Barbara Ann Marshall -ReceivedMedals(Marshall)", "-(BarrassAnnMarshall(Barrass,Marshall))", "(-ReceivesMedal(Marshall,BabeAnn))", "All x.(Marshall(x) -> -ReceivesMedals(x))", "(-ReceivedMedal(Marshall,BarranAnn))"]}
{"id": "folio_train_819", "nl": "Barbara Ann Marshall represented the United States in the 1972 Summer Olympics.", "fol": "(RepresentsCountry(Barbaraannmarshall,Unitedstates) & ParticipatedInEvent(Barbaraannmarshall,Summer1972olympics))", "prediction": ["Barbara AnnMarshall represented UnitedStatesInSummerOlympics(Marshall,72)", "all x y.((Marshall(x) & SummerOlympics(y) & 1972(x)) -> Represents(x,y))", "(Represented(Marshall,USA) & SummerOlympics(Marshall,72))", "all x y.((Marshall(x) & UnitedStates(y)) -> RepresentedInSummerOlympics(x,y))", "-RepresentedUnitedStates(Marshall,72)", "all x.(Marshall(x) -> RepresentsUnitedStates(x))", "Barbara AnnMarshall represented United States in SummerOlympics(Marshall,72)", "Barbara AnnMarshall represented UnitedStatesInSummerOlympics(Marshall,72)", "Barbara AnnMarshall represented the United States in the 1972 SummerOlympics.", "(Represented(Marshall,USA) & SummerOlympics(Marshall,USA))", "All x.(Marshall(x) -> RepresentedUnitedStates(x,72))", "(RepresentedUnitedStatesInSummerOlympics(Marshall,72))", "all x y.((Marshall(x) & SummerOlympics(y) & 1972(x)) -> Represented(x,y))", "Barbara AnnMarshall represented the United States in the SummerOlympics(1972)", "Barbara AnnMarshall represented UnitedStates(Marshall,72)", "(Represented(Marshall,USA) & SummerOlympics(Marshall,USA))"]}
{"id": "folio_train_820", "nl": "A game is played with three stages: red stage, yellow stage, and green stage.", "fol": "exists x.(GamePlayer(x) & (GameStage(x,RedStage) | GameStage(x,YellowStage) | GameStage(x,GreenStage)))", "prediction": ["all x.(Game(x) -> (PlayedWith(x,red) & PlayedWith(x,yellow) & PlayedWith(x,green)))", "all x y z.((Game(x) & Stage(y) & Stage(z)) -> (Red(x) | Yellow(x) | Green(z)))", "all x.(Game(x) -> (PlayedWithRedStage(x) & PlayedWithYellowStage(x) & PlayedWithGreenStage(x)))", "(PlayedWith(Game(Game) & RedStage(Game) & YellowStage(Game) & GreenStage(Game))", "all x.(Game(x) -> (PlayedWith(x,red) & PlayedWith(x,yellow) & PlayedWith(x,green)))", "(PlayedWithStages(Game) & RedStage(Game) & YellowStage(Game) & GreenStage(Game))", "exists x.(Game(x) & PlayedWith(x,redStage) & PlayedWith(x,yellowStage) & PlayedWith(x,greenStage))", "all x.(Game(x) -> (RedStage(x) | YellowStage(x) | GreenStage(x)))", "all x y z.((Game(x) & Stage(y) & Stage(z)) -> (Red(x) | Yellow(x) | Green(z)))", "all x.(Game(x) -> (PlayedWithStage(x,red) | PlayedWithStage(x,yellow) | PlayedWithStage(x,green)))", "all x y.((Game(x) & Stage(y)) -> (RedStage(x) | YellowStage(x) | GreenStage(x)))", "all x y z.((Game(x) & Stage(y) & Stage(z)) -> (RedStage(x,y) | YellowStage(x,z) | GreenStage(x,z)))", "(PlayedWith(Game(Game) & RedStage(Game) & YellowStage(Game) & GreenStage(Game))", "all x y z.((Game(x) & Stage(y) & Stage(z)) -> (PlayedWith(x,y,z) & PlayedWith(x,y,z)))", "exists x.(Game(x) & PlayedWith(x,redStage) & PlayedWith(x,yellowStage) & PlayedWith(x,greenStage))", "exists x.(Game(x) & PlayedWithThreeStages(x))"]}
{"id": "folio_train_821", "nl": "Each player begins at the red stage.", "fol": "all x.(GamePlayer(x) -> GameStage(x,RedStage))", "prediction": ["all x.(Player(x) -> RedStage(x))", "all x y.((Player(x) & RedStage(y)) -> StartsAt(x,y))", "all x.(Player(x) -> RedStage(x))", "(all x.(Player(x) -> RedStage(x)))", "(StartsAtRedStage(player,red))", "all x y.((Player(x) & RedStage(y)) -> BeginsAt(x,y))", "all x.(Player(x) -> RedStage(x))", "(All x.(Player(x) -> RedStage(x))", "all x y.((Player(x) & RedStage(y)) -> StartsAt(x,y))", "all x.(Player(x) -> StartsAtRedStage(x))", "all x.(Player(x) -> RedStage(x))", "-exists x.(Player(x) & RedStage(x))", "all x.(Player(x) -> RedStage(x))", "all x.(Player(x) -> StartsAtRedStage(x))", "all x.(Player(x) -> RedStage(x))", "exists x.(Player(x) & RedStage(x))"]}
{"id": "folio_train_822", "nl": "All players must reach the yellow stage before they can reach the green stage.", "fol": "all x.((GamePlayer(x) & -GameStage(x,YellowStage)) -> -GameStage(x,GreenStage))", "prediction": ["all x.(Player(x) -> (ReachesYellowStage(x) & ReachesGreenStage(x)))", "all x.(Player(x) -> (AchievesYellowStage(x) & CanAchieveGreenStage(x)))", "all x.((Player(x) & YellowStage(x)) -> GreenStage(x))", "all x y.((Player(x) & YellowStage(y)) -> CanAttachGreenStage(x,y))", "all x.(Player(x) -> (ReachesYellowStage(x) & CanReachGreenStage(x)))", "(all x.(Player(x) -> YellowStage(x)) & all y.(Player(y) -> GreenStage(y)))", "all x y.((Player(x) & Stage(y) & Yellow(y)) -> Green(x))", "all x.((Player(x) & YellowStage(x)) -> GreenStage(x))", "all x.(Player(x) -> (AchievesYellowStage(x) & CanAchieveGreenStage(x)))", "(all x.(Player(x) -> ReachYellowStage(x)))", "all x y.((Player(x) & YellowStage(y)) -> CanAttachGreenStage(x,y))", "all x.(Player(x) -> (Together(x,y) & YellowStage(y) & GreenStage(z)))", "all x y.((Player(x) & Stage(y) & GreenStage(z)) -> MustAchieve(x,y,z))", "(All x.(Player(x) -> YellowStage(x)) & All y.(Player(y) -> GreenStage(y)))", "all x.((Player(x) & YellowStage(x)) -> GreenStage(x))", "all x.(Player(x) -> (ReachesYellowStage(x) & ReachesGreenStage(x)))"]}
{"id": "folio_train_823", "nl": "The yellow stage comes after the red stage.", "fol": "all x.((GamePlayer(x) & -GameStage(x,RedStage)) -> -GameStage(x,YellowStage))", "prediction": ["all x y.((YellowStage(x) & RedStage(y)) -> ComesAfter(x,y))", "all x.(YellowStage(x) -> ComesAfter(x,RedStage))", "(YellowStage(y) & RedStage(y))", "(all x.(YellowStage(x) -> RedStage(x)))", "the yellow stage comes after the red stage.", "all x y.((YellowStage(x) & RedStage(y)) -> ComesAfter(x,y))", "all x.(YellowStage(x) -> ComesAfterRedStage(x))", "(YellowStage(y) & RedStage(y))", "(YellowStage) & RedStage(YellowStage))", "comes after red stage.", "all x.(YellowStage(x) -> ComesAfter(x,RedStage))", "all x y.((YellowStage(x) & RedStage(y)) -> ComesAfter(x,y))", "(YellowStage(y) & RedStage(z))", "all x.(YellowStage(x) -> RedStage(x))", "(YellowStage(x) & RedStage(x))", "all x y.((YellowStage(x) & RedStage(y)) -> ComesAfter(x,y))"]}
{"id": "folio_train_824", "nl": "All players must proceed one stage at a time.", "fol": "all x.((GamePlayer(x) & GameStage(x,RedStage) & -GameStage(x,YellowStage)) -> -GameStage(x,GreenStage))", "prediction": ["all x.(Player(x) -> ProceedsOneStageAtTime(x))", "all x y.((Player(x) & Stage(y)) -> ProceedsOneAtTime(x,y))", "all x.(Player(x) -> ProceedsOneStageAtTime(x))", "all x.(Player(x) -> ProceedOneStageAtTime(x))", "(All x.(Player(x) -> ProceedsOneStageAtTime(x)))", "all x y.((Player(x) & Stage(y)) -> ProceedsOneAtATime(x,y))", "all x.(Player(x) -> PlaysOneStageAtTime(x))", "(all x.(Player(x) -> ProceedsOneStageAtATime(x)))", "all x y.((Player(x) & Stage(y)) -> Proceeds(x,y))", "all x.(Player(x) -> (ProceedsOneStageAtTime(x)))", "all x.(Player(x) -> ProceedsOneStageAtTime(x))", "all x y.(Stage(x) -> ProceedsOneAtATime(x,y))", "all x y.((Player(x) & Stage(y)) -> Proceed(x,y))", "all x.(Player(x) -> PlaysOneStageAtTime(x))", "all x.(Player(x) -> ProceedOneStageAtTime(x))", "all x.(Player(x) -> OneStageAtTime(x))"]}
{"id": "folio_train_825", "nl": "It is possible to move to the green stage without ever reaching the yellow stage.", "fol": "-all x.((GamePlayer(x) & GameStage(x,GreenStage)) -> GameStage(x,YellowStage))", "prediction": ["all x.(MoveToGreenStage(x) -> -ReachesYellowStage(x))", "all x.((MoveToGreenStage(x) & -MoveToYellowStage(x)) -> Possible(x))", "all x y.((GreenStage(x) & YellowStage(y)) -> PossibleMovement(x,y))", "exists x.(GreenStage(x) & -ReachesYellowStage(x))", "all x y.((MoveToGreenStage(x) & YellowStage(y)) -> Possible(x,y))", "all x.((MoveToGreenStage(x) & -ReachesYellowStage(x)) -> Possible(x))", "all x.(MoveToGreenStage(x) & -ReachesYellowStage(x))", "all x y.((GreenStage(x) & YellowStage(y)) -> MovesTo(x,y))", "all x y.((MoveToGreenStage(x) & YellowStage(y)) -> -MoveToGreenStage(x,y))", "(MoveToGreenStage(x) & -MoveToYellowStage(x))", "all x y z.((GreenStage(x) & YellowStage(y) & Stage(z)) -> MovesTo(x,y,z))", "(MoveToGreenStage(x) & -ReachesYellowStage(x))", "exists x.(GreenStage(x) & -ReachesYellowStage(x))", "exists x.(MoveToGreenStage(x) & -ReachesYellowStage(x))", "exists x.(MoveToGreenStage(x) & -MoveToYellowStage(x))", "exists x.(MoveToGreenStage(x) & -ReachesYellowStage(x))"]}
{"id": "folio_train_826", "nl": "It is possible to reach the yellow stage without ever reaching the green stage.", "fol": "-all x.((GamePlayer(x) & GameStage(x,YellowStage)) -> GameStage(x,GreenStage))", "prediction": ["all x.((YellowStage(x) & GreenStage(x)) -> CanBeReach(x,y))", "all x.((YellowStage(x) & -GreenStage(x)) -> PossibleToReach(x,y))", "exists x.(YellowStage(x) & -GreenStage(x))", "all x y.((YellowStage(x) & GreenStage(y)) -> CanBeReachable(x,y))", "all x.((Together(x,y) & YellowStage(y)) -> -Together(x,y))", "all x y.((Targets(x,y) & YellowStage(y)) -> -TargetsGreenStage(x))", "exists x.(Targets(x,yellow) & -Targets(x,green))", "(AchievesYellowStage(x) & -AchievesGreenStage(x))", "all x y.((YellowStage(x) & GreenStage(y)) -> CanBeAttached(x,y))", "exists x.(ReachYellowStage(x) & -ReachGreenStage(x))", "(ReachesYellowStage(x) & -ReachesGreenStage(x))", "exists x.(YellowStage(x) & -GreenStage(x))", "exists x.(Targets(x,yellowStage) & -Targets(x,greenStage))", "exists x.(GreenStage(x) & Reaches(x,y))", "all x y.((GreenStage(x) & YellowStage(y)) -> CanBeReach(x,y))", "all x y.((YellowStage(x) & GreenStage(y)) -> CanBeReach(x,y))"]}
{"id": "folio_train_827", "nl": "It is possible to complete the game without ever reaching the green stage.", "fol": "exists x.(GamePlayer(x) & -GameStage(x,GreenStage))", "prediction": ["all x.((Game(x) & CompletesWithoutGreenStage(x)) -> Possible(x))", "all x y.((Game(x) & GreenStage(y)) -> CompletesWithoutGreenStage(x,y))", "all x.(CompleteGameWithoutGreenStage(x) -> Possible(x))", "all x.((Game(x) & CompletesWithoutGreenStage(x)) -> Possible(x))", "all x y.((Game(x) & GreenStage(y)) -> CanCompleteWithoutGreenStage(x,y))", "exists x.(Game(x) & CompletesWithoutGreenStage(x))", "all x y z.((Game(x) & GreenStage(y) & GreenStage(z)) -> CompletesWithoutGreenStage(x,y,z))", "(CompleteGameWithoutGreenStage(Game))", "exists x.(CompleteGame(x) & -ReachesGreenStage(x))", "all x y.((Game(x) & GreenStage(y)) -> CompletesWithoutGreenStage(x,y))", "all x.((Game(x) & CompletesWithoutGreenStage(x)) -> Possible(x))", "(CompleteGameWithoutGreenStage(Game))", "all x y.((Game(x) & GreenStage(y)) -> CanCompleteWithoutGreenStage(x,y))", "exists x.(Game(x) & CompletesWithoutGreenStage(x))", "exists x.(CompleteGame(x) & -ReachesGreenStage(x))", "all x y.((Game(x) & GreenStage(y) & Completes(x,y)) -> Possible(x,y))"]}
{"id": "folio_train_828", "nl": "People either value physical touch as an especially important love language or value words of affirmation as an especially important love language.", "fol": "all x.(ValuesPhysicalTouch(x) | ValuesWordsOfAffirmation(x))", "prediction": ["all x.(Person(x) -> (ValuesPhysicalTouch(x) | ValuesAffirmation(x)))", "all x y.((Person(x) & Person(y)) -> (ValuesPhysicalTouch(x,y) | ValuesAffirmation(x,y)))", "all x.(Person(x) -> (ValuesPhysicalTouch(x) | ValuesWordsOfAffirmation(x)))", "exists x.(Person(x) & (ValuesPhysicalTouch(x) & EspeciallyImportantLoveLanguage(x)) | ValuesWordsOfAffirmation(x) & EspeciallyImportantLoveLanguage(x)))", "(ValuesPhysicalTouch(Person) | ValuesWordsOfAffirmation(Person))", "all x y.((Person(x) & PhysicalTouch(y)) | (WordsOfAffirmation(x,y) & LoveLanguage(x,y))))", "exists x.(People(x) & (ValuesPhysicalTouch(x) & IsImportantLoveLanguage(x) | ValuesWordsOfAffirmation(x)))", "all x y z.((Person(x) & PhysicalTouch(y) & Affirmation(z)) -> (Values(x,y) | Values(x,z)))", "exists x.(Person(x) & (ValuesPhysicalTouch(x) & IsEspeciallyImportantLoveLanguage(x)) | ValuesWordsOfAffirmation(x) & IsEspeciallyImportantLoveLanguage(x)))", "all x y.((Person(x) & Person(y)) -> (ValuesPhysicalTouch(x,y) | ValuesWordsOfAffirmation(x,y)))", "(ValuesPhysicalTouch(Person) | ValuesAffirmationWords(Person))", "all x y.((Person(x) & PhysicalTouch(x) & Affirmation(y)) -> (Values(x,y) | Values(x,y)))", "exists x.(Person(x) & (ValuesPhysicalTouch(x) & ParticularlyImportantLoveLanguage(x) | ValuesWordsOfAffirmation(x) & ParticularlyImportantLoveLanguage(x)))", "exists x.(People(x) & (ValuesPhysicalTouch(x) | ValuesAffirmation(x)))", "exists x.(Person(x) & ((ValuesPhysicalTouch(x) & ParticularlyImportantLoveLanguage(x)) | ValuesWordsOfAffirmation(x))))", "all x y.((Person(x) & Person(y)) -> (ValuesPhysicalTouch(x,y) | ValuesAffirmation(x,y)))"]}
{"id": "folio_train_829", "nl": "If a person values physical touch as an especially important love language, then they are good with pets.", "fol": "all x.(ValuesPhysicalTouch(x) -> IsGoodWithPets(x))", "prediction": ["all x.(ValuesPhysicalTouch(x) -> GoodWithPets(x))", "all x.((Person(x) & ValuesPhysicalTouch(x) & LoveLanguage(x)) -> GoodWithPets(x))", "all x y.((Person(x) & ValuesPhysicalTouch(x) & LoveLanguage(y)) -> GoodWithPets(x))", "all x.(ValuesPhysicalTouch(x) -> GoodWithPets(x))", "all x.((Person(x) & ValuesPhysicalTouch(x) & LoveLanguage(x)) -> GoodWithPets(x))", "exists x.(Person(x) & ValuesPhysicalTouch(x) & LoveLanguage(x) & GoodWithPets(x))", "all x y.((Person(x) & ValuesPhysicalTouch(x) & LoveLanguage(y)) -> GoodWithPets(x,y))", "all x y.((Person(x) & ValuesPhysicalTouch(x,y) & LoveLanguage(y)) -> GoodWithPets(x))", "all x.(ValuesPhysicalTouchAsLoveLanguage(x) -> GoodWithPets(x))", "all x.(ValuesPhysicalTouch(x) -> GoodWithPets(x))", "all x.((Person(x) & ValuesPhysicalTouch(x) & LoveLanguage(x)) -> GoodWithPets(x))", "all x.((Person(x) & ValuesPhysicalTouch(x) & LoveLanguage(x)) -> GoodWithPets(x))", "all x.(ValuesPhysicalTouch(x) -> GoodWithPets(x))", "all x.((Person(x) & ValuesPhysicalTouch(x) & LoveLanguage(x)) -> GoodWithPets(x))", "all x.(ValuesPhysicalTouch(x) -> GoodWithPets(x))", "all x.((Person(x) & ValuesPhysicalTouch(x) & LoveLanguage(x)) -> GoodWithPets(x))"]}
{"id": "folio_train_830", "nl": "No people that are good with pets are scared of animals.", "fol": "all x.(IsGoodWithPets(x) -> -IsScaredOfAnimals(x))", "prediction": ["all x.((Person(x) & GoodWithPets(x)) -> ScaredOfAnimals(x))", "-exists x.(GoodWithPets(x) & ScaredOfAnimals(x))", "-all x.(GoodWithPets(x) -> ScaredOfAnimals(x))", "all x.(GoodWithPets(x) -> ScaredOfAnimals(x))", "all x.((Person(x) & GoodWithPets(x)) -> ScaredOfAnimals(x))", "-exists x.(GoodWithPets(x) & ScaredOfAnimals(x))", "-exists x.(GoodWithPets(x) & -ScaredOfAnimals(x))", "-all x.(GoodWithPets(x) -> ScaredOfAnimals(x))", "all x.(GoodWithPets(x) -> ScaredOfAnimals(x))", "all x.((Person(x) & GoodWithPets(x)) -> ScaredOfAnimals(x))", "-exists x.(GoodWithPets(x) & ScaredOfAnimals(x))", "all x.(GoodWithPets(x) -> ScaredOfAnimals(x))", "all x.((Person(x) & GoodWithPets(x)) -> ScaredOfAnimals(x))", "all x.((Person(x) & GoodWithPets(x)) -> ScarredOfAnimals(x))", "all x.((Person(x) & GoodWithPet(x)) -> ScaredOfAnimals(x))", "all x.(GoodWithPets(x) -> ScaredOfAnimals(x))"]}
{"id": "folio_train_831", "nl": "People are either scared of animals or love animals.", "fol": "all x.(IsScaredOfAnimals(x) | LovesAnimals(x))", "prediction": ["all x.(Person(x) -> (ScaredOfAnimals(x) | LovesAnimals(x)))", "all x.(People(x) -> (ScaredOfAnimals(x) | LovesAnimals(x)))", "all x y.((Person(x) & Animal(y)) -> (ScaredOf(x,y) | Loves(x,y)))", "all x.(Person(x) -> (ScaredOfAnimals(x) | LovesAnimals(x)))", "all x.(People(x) -> (ScaredOfAnimals(x) | LovesAnimals(x)))", "all x y.((Person(x) & Animal(y)) -> (ScaredOf(x,y) | Loves(x,y)))", "all x.(Person(x) -> (ScaredOfAnimals(x) | LovesAnimals(x)))", "exists x.(Popular(x) & ((ScaredOfAnimals(x) | LovesAnimals(x))))", "all x y.((Person(x) & Animal(y)) -> (ScaredOf(x,y) | Loves(x,y)))", "exists x.(Person(x) & (ScaredOfAnimals(x) | LovesAnimals(x)))", "exists x.(People(x) & (ScaredOfAnimals(x) | LovesAnimals(x)))", "exists x.(ScaredOfAnimals(x) | LovesAnimals(x))", "all x y.((Person(x) & Animal(y)) -> (ScaredOf(x,y) | Loves(x,y)))", "exists x.(Person(x) & (ScaredOfAnimals(x) | LovesAnimals(x)))", "all x y.((Person(x) & Animal(y)) -> (ScaredOf(x,y) | Loves(x,y)))", "exists x.(Person(x) & (ScaredOfAnimals(x) | LovesAnimals(x)))"]}
{"id": "folio_train_832", "nl": "Adam is either a person who values physical touch as an especially important love language or a person who loves animals.", "fol": "((ValuesPhysicalTouch(Adam) & -LovesAnimals(Adam)) | (-ValuesPhysicalTouch(Adam) & LovesAnimals(Adam)))", "prediction": ["all x.(Adam(x) -> (ValuesPhysicalTouch(x) & LoveLanguage(x)) | LovesAnimals(x)))", "(Person(Adam) & ValuesPhysicalTouch(Adam) & (LovesAnimals(Adam) | LovesAnimals(Adam)))", "(ValuesPhysicalTouch(Adam) | LoveLanguage(Adam))", "all x.((Person(x) & ValuesPhysicalTouch(x) & LoveLanguage(x)) | LovesAnimals(x))", "all x.(Adam(x) -> (ValuesPhysicalTouch(x) & LoveLanguage(x)) | LovesAnimals(x)))", "(Person(Adam) & ValuesPhysicalTouch(Adam) & (LoveLanguage(Adam) | LovesAnimals(Adam)))", "all x y.((Person(x) & Person(y) & ValuesPhysicalTouch(x,y) & LoveLanguage(y,z)) -> (LovesAnimals(y) & LovesAnimals(y)))", "exists x.(Adam(x) & ((ValuesPhysicalTouch(x) & LoveLanguage(x)) | LovesAnimals(x))))", "all x.(Adam(x) -> (ValuesPhysicalTouch(x) & LoveLanguage(x) | LovesAnimals(x)))", "(ValuesPhysicalTouch(Adam) | LoveLanguage(Adam))", "all x.((Person(x) & ValuesPhysicalTouch(x) & LoveLanguage(x)) | LovesAnimals(x))", "all x y.((Person(x) & Person(y) & ValuesPhysicalTouch(x,y) & LoveLanguage(y,x)) | LovesAnimals(y,x))", "all x.(Adam(x) -> (ValuesPhysicalTouch(x) | LovesAnimals(x)))", "exists x.(Person(x) & ValuesPhysicalTouch(x) & (LovesAnimals(x) | LovesAnimals(x)))", "exists x.(Adam(x) & ((ValuesPhysicalTouch(x) & LoveLanguage(x)) | LovesAnimals(x))))", "all x.(Adam(x) -> (ValuesPhysicalTouch(x) & LoveLanguage(x) | LovesAnimals(x)))"]}
{"id": "folio_train_833", "nl": "Adam is scared of animals.", "fol": "IsScaredOfAnimals(Adam)", "prediction": ["all x.(Adam(x) -> ScaredOfAnimals(x))", "(ScaredOfAnimals(Adam))", "all x.(Adam(x) -> ScaredOfAnimals(x))", "all x.((Adam(x) & ScaredOfAnimals(x)) -> ScaredOfAnimals(x))", "Adam is scaredOfAnimals(adam)", "(ScaredOfAnimals(Adam))", "all x y.((Adam(x) & Animal(y)) -> ScaredOf(x,y))", "(ScaredOfAnimals(Adam) & ScaredOfAnimals(Adam))", "Adam is scaredOfAnimals(Adam)", "all x.(Adam(x) -> ScaredOfAnimals(x))", "Adam is scaredOfAnimals(adam,a))", "all x.(Adam(x) -> ScaredOfAnimals(x))", "(ScaredOfAnimals(Adam))", "(ScaredOfAnimals(Adam,Adam))", "all x.(Adam(x) -> ScaredOfAnimals(x))", "exists x.(Adam(x) & ScaredOfAnimals(x))"]}
{"id": "folio_train_834", "nl": "Adam values words of affirmation as an especially important love language.", "fol": "ValuesWordsOfAffirmation(Adam)", "prediction": ["all x.((Adam(x) & WordOfAffirmation(x)) -> LoveLanguage(x))", "all x.((Adam(x) & ValuesWordsOfAffirmation(x)) -> LoveLanguage(x))", "(ValuesWordsOfAffirmation(Adam) & LoveLanguage(Adam))", "all x y.((Adam(x) & WordOfAffirmation(y)) -> ValuesAsLoveLanguage(x,y))", "Adam ValuesWordsOfAffirmation(Adam) & LoveLanguage(Adam))", "(ValuesWordOfAffirmation(Adam) & LoveLanguage(Adam))", "all x.(AdamValuesWordsOfAffirmation(x) -> LoveLanguage(x))", "all x y.((Adam(x) & WordOfAffirmation(y)) -> ValuesAsLivingLanguage(x,y))", "(ValuesWordsOfAffirmation(adam,a) & LoveLanguage(adam,a))", "all x.((Adam(x) & WordOfAffirmation(x)) -> LoveLanguage(x))", "all x.((Adam(x) & ValuesWordOfAffirmation(x)) -> LoveLanguage(x))", "Adam values affirmation words as love languages.", "all x y.((Adam(x) & Word(y)) -> ValuesAffirmation(x,y))", "all x.(AdamValuesWordOfAffirmation(x) -> LoveLanguage(x))", "Adam values affirmation words as love language.", "all x.((Adam(x) & WordOfAffirmation(x)) -> LoveLanguage(x))"]}
{"id": "folio_train_835", "nl": "Adam values physical touch as an especially important love language and values words of affirmation as an especially important love language.", "fol": "(ValuesPhysicalTouch(Adam) & ValuesWordsOfAffirmation(Adam))", "prediction": ["(all x.(Adam(x) -> ValuesPhysicalTouch(x)) & all y.(Adam(y) -> ValuesWordsOfAffirmation(y))))", "all x y.((Adam(x) & PhysicalTouch(x) & WordOfAffirmation(y)) -> (ImportantLoveLanguage(x) & ImmportantLoveLanguage(y)))", "all x.(Adam(x) -> (ValuesPhysicalTouch(x) & ValuesWordsOfAffirmation(x)))", "(ValuesPhysicalTouch(Adam) & ValuesWordsOfAffirmation(Adam))", "all x y.((Adam(x) & PhysicalTouch(y)) -> (ImportantLoveLanguage(x) & ImportantLoveLanguage(x)))", "all x.(AdamValuesPhysicalTouch(x) & ValuesWordsOfAffirmation(x))", "(all x y.((Adam(x) & PhysicalTouch(y)) -> LoveLanguage(x,y)) & all z w.((Adam(z) & Affirmation(w)) -> LoveLanguage(w))))", "all x y z.((Adam(x) & PhysicalTouch(y) & Affirmation(z)) -> (Values(x,y) & Values(x,z)))", "(all x.(Adam(x) -> ValuesPhysicalTouch(x)) & all y.(Adam(y) -> ValuesWordsOfAffirmation(y))))", "all x y.((Adam(x) & PhysicalTouch(x) & Affirmation(y)) -> (Values(x,y) & Values(x,y)))", "all x.((Adam(x) & PhysicalTouch(x)) -> (ImportantLoveLanguage(x) & ImportantLoveLanguage(x)))", "(ValuesPhysicalTouch(Adam) & ValuesWordsOfAffirmation(Adam))", "all x.(AdamValuesPhysicalTouch(x) & ValuesWordsOfAffirmation(x))", "all x y.((Adam(x) & PhysicalTouch(y)) -> (ImportantLoveLanguage(x,y) & ImportantLoveLanguage(x,y)))", "(all x.(Adam(x) -> ValuesPhysicalTouch(x)) & all y.(Adam(y) -> ValuesWordsOfAffirmation(y))))", "(ValuesPhysicalTouch(Adam) & ValuesWordsOfAffirmation(Adam))"]}
{"id": "folio_train_836", "nl": "Adam either values physical touch as an especially important love language or values words of affirmation as an especially important love language.", "fol": "(ValuesPhysicalTouch(Adam) | ValuesWordsOfAffirmation(Adam))", "prediction": ["all x.(Adam(x) -> (ValuesPhysicalTouch(x) | ValuesWordsOfAffirmation(x)))", "(ValuesPhysicalTouch(Adam) | ValuesWordsOfAffirmation(Adam)))", "all x y.((Adam(x) & (PhysicalTouch(x) | WordsOfAffirmation(x))) -> (ImportantLoveLanguage(x) | ImportantLoveLanguage(y)))", "all x.(Adam(x) -> (ValuesPhysicalTouch(x) | ValuesWordsOfAffirmation(x)))", "all x y.((Adam(x) & PhysicalTouch(y)) | (Values(x,y) & LoveLanguage(x,y))))", "(ValuesPhysicalTouch(Adam) & (ValuesWordsOfAffirmation(Adam) | ValuesPhysicalTouch(Adam)))", "exists x.(Adam(x) & ((ValuesPhysicalTouch(x) & ParticularlyImportantLoveLanguage(x)) | ValuesWordsOfAffirmation(x))))", "(ValuesPhysicalTouch(Adam) | ValuesWordsOfAffirmation(Adam)))", "all x y z.((Adam(x) & PhysicalTouch(y) & Affirmation(z)) -> (Values(x,y) | Values(x,z)))", "all x y.((Adam(x) & (PhysicalTouch(x) | Affirmation(y))) -> (Values(x,y) & LoveLanguage(x)))", "all x y.((Adam(x) & PhysicalTouch(x) & Affirmation(y)) -> (ValuesLoveLanguage(x,y) | ValuesLoveLanguage(x,y)))", "exists x.(Adam(x) & (ValuesPhysicalTouch(x) & EspeciallyImportantLoveLanguage(x) | ValuesWordsOfAffirmation(x)))", "(ValuesPhysicalTouch(a) | ValuesWordsOfAffirmation(a)))", "all x.(Adam(x) -> (ValuesPhysicalTouch(x) | ValuesWordsOfAffirmation(x)))", "exists x.(Adam(x) & (ValuesPhysicalTouch(x) & (ValuesWordsOfAffirmation(x) | ValuesWordsOfAffirmation(x))))", "(ValuesPhysicalTouch(Adam) | ValuesWordsOfAffirmation(Adam))"]}
{"id": "folio_train_837", "nl": "If Adam values physical touch as an especially important love language or is good with pets, then Adam values words of affirmation as an especially important love language.", "fol": "((ValuesPhysicalTouch(Adam) | IsGoodWithPets(Adam)) -> ValuesWordsOfAffirmation(Adam))", "prediction": ["all x.((Adam(x) & (ValuesPhysicalTouch(x) | GoodWithPets(x))) -> ValuesWordsOfAffirmation(x))", "all x.((Adam(x) & ValuesPhysicalTouch(x) & (IsImportantLivingLanguage(x) | GoodWithPets(x))) -> ValuesWordsOfAffirmation(x))", "all x y.((Adam(x) & (PhysicalTouch(x) | GoodWithPets(x))) -> ValuesWordsOfAffirmation(x,y))", "all x.((AdamValuesPhysicalTouch(x) & (IsImportantLivingLanguage(x) | GoodWithPets(x))) -> ImportantLivingLanguage(x))", "(all x.((Adam(x) & (ValuesPhysicalTouch(x) | GoodWithPets(x))) -> ValuesWordsOfAffirmation(x)))", "all x.((Adam(x) & ValuesPhysicalTouch(x) & (GoodWithPets(x) | ImportantLoveLanguage(x))) -> ValuesWordsOfAffirmation(x))", "all x.((Adam(x) & (ValuesPhysicalTouch(x) | GoodWithPets(x))) -> ValuesWordsOfAffirmation(x))", "all x y.((Adam(x) & ValuesPhysicalTouch(x) & (IsImportantLivingLanguage(x) | GoodWithPets(x))) -> ValuesWordsOfAffirmation(x))", "all x.(ValuesPhysicalTouch(x) -> (IsImportantLoveLanguage(x) | GoodWithPets(x)))", "(all x.((Adam(x) & ValuesPhysicalTouch(x)) | GoodWithPets(x))) -> ValuesWordsOfAffirmation(x))", "all x y.((Adam(x) & (PhysicalTouch(x) | GoodWithPets(x))) -> ValuesAffirmation(x,y))", "all x.(ValuesPhysicalTouch(x) -> (ImportantLoveLanguage(x) | GoodWithPets(x)))", "(all x.((Adam(x) & ValuesPhysicalTouch(x)) -> (ImportantLoveLanguage(x) | GoodWithPets(x))))", "all x.((Adam(x) & (ValuesPhysicalTouch(x) | GoodWithPets(x))) -> ValuesWordsOfAffirmation(x))", "all x.(ValuesPhysicalTouch(x) -> (IsImportantLoveLanguage(x) | GoodWithPets(x)))", "all x y.((Adam(x) & (PhysicalTouch(y) | GoodWithPets(y))) -> ValuesAffirmation(x,y))"]}
{"id": "folio_train_838", "nl": "All birds have wings.", "fol": "all x.(IsBird(x) -> HasWings(x))", "prediction": ["all x.(Bird(x) -> HasWings(x))", "all x.(Bird(x) -> HasWings(x))", "(All x.(Bird(x) -> HasWings(x))", "all x.(Bird(x) -> HasWings(x))", "all x.exists y.(Bird(x) & Wing(y) & Has(x,y))", "(all x.(Bird(x) -> HasWings(x))", "all x.(Bird(x) -> HasWings(x))", "(All x.(Bird(x) -> HasWings(x))", "all x.(Bird(x) -> HasWings(x))", "all x.(Bird(x) -> HasWings(x))", "all x.(Bird(x) -> HasWings(x))", "all x.(Bird(x) -> HasWings(x))", "all x.(Bird(x) -> HasWings(x))", "all x.(Bird(x) -> HasWings(x))", "exists x.(Bird(x) & HasWing(x))", "all x.(Bird(x) -> HasWings(x))"]}
{"id": "folio_train_839", "nl": "No animal with wings is a reptile.", "fol": "all x.(HasWings(x) -> -IsReptile(x))", "prediction": ["all x.((Animal(x) & HasWings(x)) -> Reptile(x))", "-exists x.(Animal(x) & HasWings(x))", "(exists x.(Animal(x) & HasWings(x)) & -Reptile(x))", "all x.((Animal(x) & HasWings(x)) -> Reptile(x))", "-exists x.(Animal(x) & HasWings(x))", "all x.((Animal(x) & HasWings(x)) -> Reptile(x))", "all x.(Reptile(x) -> -(AnimalWithWings(x) & HasWings(x)))", "-exists x.(Animal(x) & HasWings(x))", "all x.((Animal(x) & HasWings(x)) -> Reptile(x))", "-exists x.(Animal(x) & HasWings(x))", "-exists x.(Animal(x) & HasWings(x) & Reptile(x))", "all x.((Animal(x) & HasWings(x)) -> Reptile(x))", "-exists x.(Animal(x) & HasWings(x))", "all x.((Animal(x) & HasWings(x)) -> Reptile(x))", "-exists x.(Animal(x) & HasWings(x) & Reptile(x))", "all x.((Animal(x) & HasWings(x)) -> Reptile(x))"]}
{"id": "folio_train_840", "nl": "Some animals that fly are birds.", "fol": "exists x.(CanFly(x) & IsBird(x))", "prediction": ["exists x.(Animal(x) & Flies(x))", "exists x.(Animal(x) & Flies(x))", "exists x.(Animal(x) & Fly(x))", "exists x.(Animal(x) & Flies(x))", "exists x.(FlyingAnimal(x) & Bird(x))", "all x y.((Animal(x) & Flies(x)) -> Bird(y))", "exists x.(Animal(x) & Flies(x))", "exists x.(Animal(x) & Fly(x))", "exists x.(FlyingAnimal(x) & Bird(x))", "exists x.(Flying(x) & Bird(x))", "all x y.(Fly(x) -> Bird(y))", "exists x.(Animal(x) & Flies(x))", "exists x.(Animal(x) & Fly(x))", "exists x.(Animal(x) & Fly(x) & Bird(x))", "exists x.(Flying(x) & Bird(x))", "exists x.(Animal(x) & Flies(x))"]}
{"id": "folio_train_841", "nl": "If something is an iguana, then it is a reptile.", "fol": "all x.(IsIguana(x) -> IsReptile(x))", "prediction": ["all x.((Iguana(x) & Reptile(x)) -> Iguana(x))", "all x.(Iguana(x) -> Reptile(x))", "all x.((Iguana(x) & Reptile(x)) -> Iguana(x))", "all x y.((Iguana(x) & Reptile(y)) -> Iguana(x))", "all x.(Iguana(x) -> Reptile(x))", "all x.((Iguana(x) & Reptile(x)) -> Iguana(x))", "all x y.((Iguana(x) & Reptile(y)) -> Iguana(x))", "all x.(Iguana(x) -> Reptile(x))", "all x.((Iguana(x) & Reptile(x)) -> Iguana(x))", "all x.(Iguana(x) -> Reptile(x))", "all x.((Iguana(x) & Reptile(x)) -> Iguana(x))", "all x.(Iguana(x) -> Reptile(x))", "all x.((Iguana(x) & Reptile(x)) -> Iguana(x))", "all x.(Iguana(x) -> Reptile(x))", "all x.((Iguana(x) & Reptile(x)) -> Iguana(x))", "exists x.(Iguana(x) & Reptile(x))"]}
{"id": "folio_train_842", "nl": "John is neither an iguana nor a bird.", "fol": "(-IsIguana(John) & -IsBird(John))", "prediction": ["(-Iguana(John) & -Bird(John))", "-(Iguana(John) | Bird(John))", "John is -(Iguana(John) | Bird(John))", "John is -Iguana(John) & -Bird(John))", "John & -(Iguana(John) | Bird(John))", "all x.(John(x) -> (-Iguana(x) | Bird(x)))", "(Iguana(John) | Bird(John))", "(-Iguana(John) & -Bird(John))", "-(Iguana(John) | Bird(John))", "John is -(Iguana(John) | Bird(John))", "John is -Iguana(John) & -Bird(John))", "(-Iguana(John) | Bird(John))", "all x.(John(x) -> (-Iguana(x) | Bird(x)))", "-(Iguana(John) | Bird(John))", "((Iguana(John) | Bird(John)))", "-(Iguana(John) | Bird(John))"]}
{"id": "folio_train_843", "nl": "John is a reptile.", "fol": "IsReptile(John)", "prediction": ["all x.(Reptile(x) -> John(x))", "John is reptile.", "(Reptile(John) & LivesIn(John,x))", "John is reptile.", "all x.(Reptile(x) -> John(x))", "(Reptile(John) & Reptile(John))", "John is Reptile(John)", "all x.((John(x) & Reptile(x)) -> Reptile(x))", "all x.(Reptile(x) -> John(x))", "all x.(Reptile(x) -> John(x))", "John is reptile.", "(Reptile(John))", "(Reptile(John) & -Reptile(John))", "John is Reptile(John)", "(Reptile(John))", "John is reptile."]}
{"id": "folio_train_844", "nl": "John is not an iguana and an animal that can fly.", "fol": "(-IsIguana(John) & -CanFly(John))", "prediction": ["John is notIguana(John) & Animal(John) & CanFly(John))", "(-Iguana(John) & CanFly(John))", "all x.(John(x) -> (-Iguana(x) & CanFly(x)))", "-(Iguana(John) & CanFly(John))", "(-Iguana(John) & -CanFly(John))", "John is notIguana(John) & -CanFly(John))", "all x.(John(x) -> (-Iguana(x) & CanFly(x)))", "(-Iguana(John) & CanFly(John))", "-(Iguana(John) & CanFly(John))", "all x.(John(x) -> (-Iguana(x) & -CanFly(x)))", "John is notIguana(John) & Animal(John) & CanFly(John))", "(-Iguana(John) & -CanFly(John))", "-(Iguana(John) & CanFly(John))", "John is notIguana(John) & -CanFly(John))", "-(Iguana(John) & Animal(John))", "John is not Iguana(John) & CanFly(John))"]}
{"id": "folio_train_845", "nl": "John is an animal that can fly and a bird.", "fol": "(Animal(John) & CanFly(John) & IsBird(John))", "prediction": ["all x.(John(x) -> (Animal(x) & CanFly(x) & Bird(x)))", "(Animal(John) & CanFly(John) & Bird(John))", "all x.((Animal(x) & CanFly(x) & Bird(x)) -> CanFly(x))", "all x.(John(x) -> (Animal(x) & CanFly(x) & Bird(x)))", "(Animal(John) & CanFly(John) & Bird(John))", "(CanFly(John) & Bird(John))", "(Animal(John) & CanFly(John)) & Bird(John))", "exists x.(Animal(x) & CanFly(x) & Bird(x))", "John is an animal that canFly(John) & Bird(John))", "all x.((Animal(x) & CanFly(x) & Bird(x)) -> CanFly(x))", "all x.(John(x) -> (Animal(x) & CanFly(x) & Bird(x)))", "(Animal(John) & CanFly(John) & Bird(John))", "(CanFly(John) & Bird(John))", "all x.((Animal(x) & CanFly(x) & Bird(x)) -> CanFly(x))", "(Animal(John) & CanFly(John)) & Bird(John))", "(Animal(John) & CanFly(John) & Bird(John))"]}
{"id": "folio_train_846", "nl": "EndGame is a movie released in 2006.", "fol": "(IsMovie(EndGame) & ReleasedInYear(EndGame,Year2006))", "prediction": ["(Movie(EndGame) & ReleasedIn2006(EndGame))", "EndGame(x) -> (Movie(x) & ReleasedIn2006(x)))", "all x.(EndGame(x) -> MovieReleasedIn2006(x))", "(Movie(EndGame) & ReleasedIn2006(EndGame))", "all x.(EndGame(x) -> (Movie(x) & ReleasedIn2006(x)))", "all x.((Movie(x) & ReleasedIn2006(x)) -> EndGame(x))", "(Movie(EndGame) & ReleasedIn(EndGame) & ReleasedIn(EndGame))", "EndGame(x) -> ReleasedIn2006(x))", "EndGame (Movie(x) & ReleasedIn2006(x))", "(EndGameMovie(EndGame) & ReleasedIn2006(EndGame))", "(EndGame(Movie) & ReleasedIn2006(Movie) & ReleasedIn2006(Movie))", "EndGame(x) -> MovieReleasedIn2006(x))", "all x.((Movie(x) & ReleasedIn2006(x)) -> EndGame(x))", "EndGame (Movie(x) & ReleasedIn2006(x))", "(Movie(EndGame) & ReleasedIn(EndGame,2006))", "All x.(EndGame(x) -> MovieReleasedIn2006(x))"]}
{"id": "folio_train_847", "nl": "EndGame was set in Washington.", "fol": "SetInLocation(EndGame,Washington)", "prediction": ["(EndGame(EndGame) & SetIn(EndGame) & Washington(EndGame))", "All x.(EndGame(x) -> SetInWashington(x))", "EndGame(EndGame) & SetIn(EndGame,Washington))", "EndGame was set in Washington.", "(SetIn(EndGame) & Washington(EndGame))", "all x y.((EndGame(x) & Washington(y)) -> SetIn(x,y))", "-EndGame(EndGame) & SetInWashington(EndGame))", "(EndGameSetIn(EndGame(EndGame) & SetIn(EndGame))", "EndGame(EndGame) -> SetInWashington(EndGame))", "(EndGame(EndGame) & SetIn(EndGame,Washington))", "All x.(EndGame(x) -> SetIn(x,Washington))", "EndGame was set in Washington.", "all x.(EndGame(x) -> SetInWashington(x))", "EndGame was set in Washington.", "All x.(EndGame(x) -> SetInWashington(x))", "All x.(EndGame(x) -> SetIn(x,Washington))"]}
{"id": "folio_train_848", "nl": "EndGame was filmed outside of Washington.", "fol": "FilmedOutsideLocation(EndGame,Washington)", "prediction": ["all x.(EndGame(x) -> FilmedOutsideOfWashington(x))", "EndGame was filmed outside of Washington.", "(FilmedOutsideOfWashington(EndGame) & OutsideOfWashington(EndGame))", "-EndGame(EndGame) & FilmedOutsideOfWashington(EndGame))", "All x.(EndGame(x) -> FilmedOutsideOfWashington(x))", "EndGame was filmed outside of Washington.", "(FilmedOutsideOfWashington(EndGame) & -Washington(EndGame))", "(EndGame(End) & OutsideOfWashington(End))", "EndGame filmed outside of Washington.", "all x.(EndGame(x) -> FilmedOutsideOfWashington(x))", "EndGame was filmed outside of Washington.", "All x.(EndGame(x) -> ShotOutsideOfWashington(x))", "All x.(EndGame(x) -> FilmedOutsideOfWashington(x))", "EndGame was filmed outside of Washington.", "all x.(EndGame(x) -> FilmedOutsideOfWashington(x))", "all x.(EndGame(x) -> FilmedOutside(x))"]}
{"id": "folio_train_849", "nl": "Some movies are filmed in New York.", "fol": "exists x.FilmedInLocation(x,NewYork)", "prediction": ["exists x.(Movie(x) & FilmedIn(x,NewYork))", "exists x.(Movie(x) & FilmedInNewYork(x))", "exists x.(Movie(x) & FilmedIn(x,NewYork))", "exists x y.(Movie(x) & FilmedIn(x,y) & NewYork(y))", "exists x.(Movie(x) & FilmedIn(x,NewYork))", "exists x.(Movie(x) & FilmedIn(x,NewYork))", "exists x y.(Movie(x) & FilmedIn(x,y) & NewYork(y))", "exists x.(Movie(x) & FilmedInNewYork(x))", "exists x y.(Movie(x) & FilmedIn(y,NewYork))", "exists x.(Movie(x) & FilmedIn(x,NewYork))", "exists x.(Movie(x) & FilmedInNewYork(x))", "exists x.(Movie(x) & ShotInNewYork(x))", "exists x.(Movie(x) & FilmedIn(x,NewYork))", "exists x.(Movie(x) & FilmedInNewYork(x))", "exists x.(Movie(x) & ShotIn(x,NewYork))", "exists x.(Movie(x) & FilmedIn(x,NewYork))"]}
{"id": "folio_train_850", "nl": "Andy Chang directed EndGame.", "fol": "DirectedBy(AndyChang,EndGame)", "prediction": ["Andy Chang directedEndGame(x)", "(DirectedByAndyChang(Andy) & EndGame(Andy))", "all x.((AndyChang(x) & EndGame(x)) -> DirectedBy(x,AndyChang))", "Andy Chang directedEndGame(x)", "all x.((AndyChan(x) & EndGame(y)) -> DirectedBy(x,y))", "(DirectedByAndyChang(Andy))", "Andy Chang directed EndGame.", "AndyChang directedEndGame(x)", "Andy Chang directedEndGame(x)", "(DirectedByAndyChang(AndroidChang))", "(DirectedByAndyChang(Andy) & EndGame(Andy))", "Andy Chang directed EndGame.", "Andy Chang directedEndGame(x)", "Andy Chang & EndGame(x))", "Andy Chang directs EndGame.", "Andy Chang directedEndGame."]}
{"id": "folio_train_851", "nl": "Andy Chang is from Hong Kong.", "fol": "OriginatesFrom(AndyChang,HongKong)", "prediction": ["Andy Chang is from Hong Kong.", "Andy Chang (HongKong)", "(HongKong(AndyChang) & HongKong(AndyChang))", "-(AndyChang(x) & HongKong(x))", "((AndyChang(x) & HongKong(y)) -> LivesIn(x,y))", "(HongKong(AndyChang) & -HongKong(Andy))", "AndyChang is from HongKong.", "Andy Chang is from Hong Kong.", "(HongKong(AndyChang) -> From(AndyChang,HongKong))", "Andy Chang (HongKong)", "AndyChang (HongKong)", "(HongKong.(AndyChang))", "Andy Chang is from Hong Kong.", "Andy Chang (HongKong)", "Andy Chang is from Hong Kong.", "Andy Chang (HongKong)"]}
{"id": "folio_train_852", "nl": "EndGame was filmed in New York.", "fol": "FilmedInLocation(EndGame,NewYork)", "prediction": ["All x.(EndGame(x) -> FilmedInNewYork(x))", "EndGame was filmed in New York.", "(FilmedInNewYork(EndGame) & FilmedInNewYork(EndGame))", "EndGame(EndGame) & FilmedInNewYork(EndGame))", "(FilmsInNewYork(EndGame) & FilmedInNewYork(EndGame))", "-FilmedInNewYork(EndGame)", "All x.(EndGame(x) -> FilmedInNewYork(x))", "EndGame was filmed in New York.", "(FilmedInNewYork(EndGame) & FilmedInNewYork(EndGame))", "-FilmedInNewYork(EndGame)", "All x.(EndGame(x) -> FilmedInNewYork(x))", "EndGame was filmed in New York.", "all x.(EndGame(x) -> FilmedInNewYork(x))", "EndGame was filmed in New York.", "all x.(EndGame(x) -> FilmedIn(x,NewYork))", "All x.(EndGame(x) -> FilmedInNewYork(x))"]}
{"id": "folio_train_853", "nl": "EndGame was not directed by someone from Hong Kong.", "fol": "-exists x.(DirectedBy(x,EndGame) & OriginatesFrom(x,HongKong))", "prediction": ["all x.(EndGame(x) -> -DirectedByHongKong(x))", "EndGame -DirectedByHongKong(EndGame))", "-HongKongDirectedEndGame(EndGame)", "-(HongKongDirector(EndGame))", "-(DirectedByHongKong(EndGame) & -DirectedByHongKong(EndGame))", "(-DirectedByHongKong(EndGame))", "(-HongKongDirectedEndGame(EndGame))", "All x.(EndGame(x) -> -DirectedByHongKong(x))", "EndGame -DirectedByHongKong(EndGame))", "EndGame n'est pas directed by HongKong.", "-(HongKongDirectedEndGame(EndGame))", "(-HongKongDirector(EndGame))", "all x.(EndGame(x) -> -DirectedByHongKong(x))", "EndGame -DirectedByHongKong.", "All x.(EndGame(x) -> -DirectedBy(x,HongKong))", "(-HongKongDirectedEndGame(EndGame))"]}
{"id": "folio_train_854", "nl": "All of Andy Chang's movies are filmed outside of Washington.", "fol": "all x.((IsMovie(x) & DirectedBy(AndyChang,x)) -> FilmedOutsideLocation(x,Washington))", "prediction": ["all x.((Movie(x) & AndyChang(x)) -> FilmedOutsideOfWashington(x))", "all x y.((Movie(x) & AndyChang(y)) -> FilmedOutsideOfWashington(x,y))", "(all x.(AndyChang(x) -> FilmedOutsideOfWashington(x)))", "all x.(AndyChangMovie(x) -> FilmedOutsideOfWashington(x))", "All of AndyChang'sMoviesFilm(x) -> FilmedOutsideOfWashington(x))", "all x.((Movie(x) & AndyChang(x)) -> FilmedOutsideOfWashington(x))", "(All x.(AndyChangMovie(x) -> FilmedOutsideOfWashington(x)))", "all x y.((Movie(x) & AndyChang(y)) -> FilmedOutsideOfWashington(x,y))", "all x.(Movie(x) -> (AndyChang(x) & FilmedOutside(x)))", "(all x.(AndyChang(x) -> FilmedOutsideOfWashington(x)))", "all x.((Movie(x) & AndyChang(x)) -> FilmedOutsideOfWashington(x))", "all x.(AndyChangMovie(x) -> FilmedOutsideOfWashington(x))", "all x y.((Movie(x) & AndyChang(y)) -> FilmedOutside(x,y))", "all x.((Movie(x) & AndyChang(x)) -> ShotOutsideOfWashington(x))", "all x.(Movie(x) -> AndyChang(x))", "all x y.((Movie(x) & AndyChang(y)) -> FilmedOutsideOfWashington(y))"]}
{"id": "folio_train_855", "nl": "Six, seven and eight are real numbers.", "fol": "(IsRealNumber(Six) & IsRealNumber(Seven) & IsRealNumber(Eight))", "prediction": ["(RealNumbers(Six) & RealNumbers(Seven) & RealNumbers(Eight))", "all x.((Six(x) | Seven(x) | Eight(x)) -> RealNumber(x))", "all x.((Number(x) & Number(x,6) & Number(x,7) & Number(x,8)) -> Real(x))", "(RealNumbers(Six,Seven) & RealNumbers(Eight))", "(RealNumbers(Six) & RealNumbers(Seven) & RealNumbers(Eight))", "all x.((Number(x) & (Six(x) | Seven(x) | Eight(x))) -> Real(x))", "all x.(RealNumber(x) -> (Six(x) | Seven(x) | Eight(x)))", "all x.((Six(x) | Seven(x) | Eight(x)) -> RealNumber(x))", "(RealNumericals(Six,7) & RealNumericals(Seven,8))", "(RealNumber(six) | RealNumber(seven) | RealNumber(seven)))", "All x y.((Six(x) | Seven(x) | Eight(x)) -> RealNumber(y))", "(Real(Six) & Real(Seven) & Real(Eight))", "(RealNumbers(Six,7) & RealNumbers(Seven,8))", "(RealNumbers(Six) & RealNumbers(Seven) & RealNumbers(Eight))", "all x.(RealNumber(x) -> (Six(x) | Seven(x) | Eight(x)))", "all x.((Six(x) | Seven(x) | Eight(x)) -> RealNumbers(x))"]}
{"id": "folio_train_856", "nl": "If a real number equals another real number adding one, the first number is larger.", "fol": "all x y.((IsRealNumber(x) & IsRealNumber(y) & EqualsAfterAddingOne(x,y)) -> IsLargerThan(x,y))", "prediction": ["all x y.((RealNumber(x) & RealNumber(y) & Adds(x,y)) -> Larger(x,y))", "all x.((RealNumber(x) & AddsRealNumber(x)) -> Larger(x))", "all x y.((RealNumber(x) & RealNumber(y) & AddsOne(x,y)) -> Larger(x,y))", "(AdditionalRealNumber(x) -> Larger(x))", "all x y z.((RealNumber(x) & RealNumber(y) & AddsOne(z,x)) -> Larger(x,y,z))", "all x.((RealNumber(x) & AddsRealNumber(x)) -> Larger(x))", "all x y z.((RealNumber(x) & RealNumber(y) & AddsNumber(z) & AddsNumber(x,y)) -> Larger(x,z))", "all x y.((RealNumber(x) & RealNumber(y) & Adds(x,y)) -> Larger(x,y))", "all x.((RealNumber(x) & RealNumber(x) & AddsOne(x)) -> Larger(x))", "all x.((RealNumber(x) & AddsRealNumber(x)) -> Larger(x))", "all x y.((RealNumber(x) & AddsRealNumber(x,y)) -> Larger(x,y))", "exists x.(RealNumber(x) & AddsRealNumber(x,1) & Larger(x))", "all x y.((RealNumber(x) & RealNumber(y) & AddsOne(x,y)) -> Larger(x,y))", "all x.((RealNumber(x) & AddsRealNumber(x)) -> Larger(x,y))", "all x.((RealNumber(x) & RealNumber(x) & AddsOne(x)) -> Larger(x))", "all x.((RealNumber(x) & AddsNumber(x)) -> Larger(x))"]}
{"id": "folio_train_857", "nl": "If the number x is larger than number y, then y is not larger than x.", "fol": "all x y.(IsLargerThan(x,y) -> -IsLargerThan(y,x))", "prediction": ["all x y.((Number(x) & Number(y) & LargerThan(x,y)) -> -LargerThan(y,x))", "all x.((Number(x) & LargerThan(x,y)) -> -LargerThan(y,x))", "(LargerThan(x,y) -> -LargerThan(x,y))", "all x y.((Number(x) & Number(y) & LargerThan(x,y)) -> -LargerThan(y,x))", "all x.((Number(x) & LargerThan(x,y)) -> -LargerThan(y,x))", "all x.(LargerThan(x,y) -> -LargerThan(y,x))", "(LargerThan(x,y) & Number(y))", "(LargerThanYear(x,y) -> -LargerThanYear(y,x))", "-LargerThan(x,y)", "all x y.((Number(x) & Number(y)) -> -LargerThan(x,y))", "all x y.((Number(x) & Number(y) & LargerThan(x,y)) -> -LargerThan(y,x))", "all x.((Number(x) & LargerThan(x,y)) -> -LargerThan(x,y))", "all x y.((Number(x) & Number(y) & Larger(x,y)) -> -Larger(y,x))", "all x.((Number(x) & LargerThan(x,y)) -> -LargerThan(y,x))", "all x y.((Number(x) & Number(y)) -> -LargerThan(y,x))", "all x.((Number(x) & LargerThan(x,y)) -> -LargerThan(x,y))"]}
{"id": "folio_train_858", "nl": "Seven equals six plus one.", "fol": "EqualsAfterAddingOne(Seven,Six)", "prediction": ["all x.(Seven(x) -> EqualsSixPlusOne(x))", "(SevenEqualsSixPlusOne(Seven))", "(EqualsSeven(Seven) & PlusOne(Seven))", "all x y.((Seven(x) & Six(y)) -> PlusOne(x,y))", "all x.(Seven(x) -> EqualsSixPlusOne(x))", "(EqualsSixPlusOne(Seven))", "-(SevenEquals(six,six) & OneEquals(six,six))", "SiebenEquals(six,six) & One(s))", "(EqualsSeven(seven,six) & PlusOne(s))", "all x.(Seven(x) -> EqualsSixPlusOne(x))", "(SevenEqualsSixPlusOne(seven))", "All x.((Seven(x) & SixPlusOne(x)) -> Equals(x,6))", "all x y.((Seven(x) & Six(y)) -> PlusOne(x,y))", "all x.(Seven(x) -> EqualsSixPlusOne(x))", "All x.(Seven(x) -> Equals(x,6) & PlusOne(x))", "all x.(Seven(x) -> EqualsSixPlusOne(x))"]}
{"id": "folio_train_859", "nl": "Eight equals seven plus one.", "fol": "EqualsAfterAddingOne(Eight,Seven)", "prediction": ["all x.(Equals(x,7) & PlusOne(x))", "all x y.((Eight(x) & SevenPlusOne(y)) -> Equals(x,y))", "eight equals(x,seven) & One(x))", "(EqualsSevenPlusOne(Eight))", "all x.(Equals(x,7) -> PlusOne(x))", "all x.((Eight(x) & SevenPlusOne(x)) -> Equals(x,7))", "eight equalsSevenPlusOne(x)", "all x.(Equals(x,7) & One(x))", "all x y.((Eight(x) & SevenPlusOne(y)) -> Equals(x,y))", "(EqualsSevenPlusOne(Eight))", "All x.((Equals(x,7) & PlusOne(x)) -> Eight(x))", "All x.(EqualsSevenPlusOne(x) -> Eight(x))", "all x y.((Eight(x) & SevenPlusOne(y)) -> Equals(x,y))", "(EqualsSevenPlusOne(Eight))", "all x.(Equals(x,7) -> PlusOne(x))", "(EqualsSevenPlusOne)"]}
{"id": "folio_train_860", "nl": "Two is positive.", "fol": "IsPositive(Two)", "prediction": ["all x.((Two(x) & Positive(x)) -> Positive(x))", "(Positive(Two))", "All x.(Two(x) -> Positive(x))", "all x.(Positive(x) -> Positive(x))", "all x.((Two(x) & Positive(x)) -> Positive(x))", "(Positive(x) & Positive(x))", "Two is Positive(x)", "(Positive(Two)", "-(Positive(Positive))", "-(Positive(x) & Positive(x))", "All x.(Two(x) -> Positive(x))", "(Positive(two))", "all x.((Two(x) & Positive(x)) -> Positive(x))", "(Positive(Positive)", "(Positive(Two)", "All x.(Two(x) -> Positive(x))"]}
{"id": "folio_train_861", "nl": "If a number is positive, then the double of it is also positive.", "fol": "all x y.((IsPositive(x) & EqualsDoubleOf(y,x)) -> IsPositive(y))", "prediction": ["all x.((Number(x) & Positive(x)) -> Positive(x))", "all x.(Positive(x) -> DoubleOf(x,y))", "all x.((Number(x) & Positive(x)) -> Positive(x))", "(Positive(number) -> Double(number))", "all x y.((Number(x) & Positive(x)) -> Positive(y))", "all x.((Number(x) & Positive(x)) -> Positive(x))", "all x.(Positive(x) -> DoubleOf(x,y))", "all x y.((Number(x) & Number(y) & Positive(x,y)) -> Positive(y))", "all x.((Noun(x) & Positive(x)) -> Positive(x))", "all x y.((Number(x) & Positive(x)) -> Positive(y))", "all x.((Number(x) & Positive(x)) -> Positive(x))", "all x.(Positive(x) -> Double(x))", "exists x.(PositiveNumber(x) & DoubleOfNumber(x))", "all x.(Positive(x) -> DoubleOfNumber(x))", "all x.((Numera(x) & Positive(x)) -> DoublePositive(x))", "all x.((Number(x) & Positive(x)) -> Positive(x))"]}
{"id": "folio_train_862", "nl": "Eight is the double of four.", "fol": "EqualsDoubleOf(Eight,Four)", "prediction": ["All x.(Eight(x) -> DoubleOfFour(x))", "(DoppelOfFour(Eight) -> DoubleOfFour(Eight))", "-(DoubleOfFour(Four) & DoubleOfFour(Four))", "all x.((Eight(x) & DoubleOfFour(x)) -> DoubleOfFour(x))", "Eight is the DoubleOfFour(x)", "eight.((DoubleOfFour(x))", "Eight is the DoubleOfFour(e) -> DoubleOfFour(e))", "All x.(Eight(x) -> DoubleOfFour(x))", "(DoubleOfFour(Eight))", "(DoppelOfFour(Eight))", "all x.((Eight(x) & DoubleOfFour(x)) -> DoubleOfFour(x))", "All x.(Eight(x) -> DoubleOfFour(x))", "Eight is the DoubleOfFour(eight,eight)", "all x.((Eight(x) & DoubleOfFour(x)) -> DoubleOfFour(x))", "Eight is DoubleOfFour(e) & DoubleOfFour(e))", "(DoppelOfFour(Eight))"]}
{"id": "folio_train_863", "nl": "Four is the double of two.", "fol": "EqualsDoubleOf(Four,Two)", "prediction": ["all x.(Four(x) -> DoubleOfTwo(x))", "(DoppelOfTwo(Four))", "all x.(Four(x) -> DoubleOfTwo(x))", "(DoubleOfTwo(Four))", "all x.((Four(x) & DoubleOfTwo(x)) -> DoubleOfTwo(x))", "all x y.((Four(x) & Two(y)) -> Double(x,y))", "(DoppelOfTwo(Four))", "All x.(Four(x) -> DoubleOfTwo(x))", "all x y.((Four(x) & DoubleOfTwo(y)) -> DoubleOfTwo(x,y))", "all x y.((Four(x) & Two(y)) -> Double(x,y))", "All x.((Four(x) & DoubleOfTwo(x)) -> DoubleOfTwo(x))", "(DoppelOfTwo(four))", "all x.(Four(x) -> DoubleOfTwo(x))", "All x.(Four(x) -> DoubleOfTwo(x))", "All x.(Four(x) -> DoubleOfTwo(x))", "All x.(Four(x) -> DoubleOfTwo(x))"]}
{"id": "folio_train_864", "nl": "Eight is larger than seven.", "fol": "IsLargerThan(Eight,Seven)", "prediction": ["all x.((Eight(x) & Seven(x)) -> Larger(x))", "(LargerThan(Eight,7))", "all x y.((Eight(x) & Seven(y)) -> Larger(x,y))", "(LargerThan(Eight) & LargerThan(Eight))", "All x.(Eight(x) -> LargerThanSeven(x))", "all x.((Eight(x) & Seven(x)) -> Larger(x))", "all x y.((Eight(x) & Seven(y)) -> LargerThan(x,y))", "Eight is largerThanSeven(x)", "(LargerThan(eight,seven))", "All x.((Eight(x) & Seven(x)) -> LargerThan(x,7))", "(LargerThanSeven(Eight))", "All x.(Eight(x) -> LargerThanSeven(x))", "Eight is LargerThanSeven(x)", "all x y.((Eight(x) & Seven(y)) -> Larger(x,y))", "(LargerThan(Eight,Seven))", "All x.((Eight(x) & Seven(x)) -> Larger(x))"]}
{"id": "folio_train_865", "nl": "Eight is positive.", "fol": "IsPositive(Eight)", "prediction": ["All x.(Eight(x) -> Positive(x))", "(Positive(Eight))", "all x.((Eight(x) & Positive(x)) -> Positive(x))", "Eight is Positive(x)", "All x.(Eight(x) -> Positive(x))", "(Positive(Eight))", "Eight is Positive(x)", "Eight is Positive.", "all x.((Eight(x) & Positive(x)) -> Positive(x))", "Eight is Positive(Eight)", "All x.(Eight(x) -> Positive(x))", "Eight(e) -> Positive(e))", "(Positive(Eight))", "all x.((Eight(x) & Positive(x)) -> Positive(x))", "All x.(Eight(x) -> Positive(x))", "(Positive(Eight)"]}
{"id": "folio_train_866", "nl": "Six is larger than seven.", "fol": "IsLargerThan(Six,Seven)", "prediction": ["all x.(Six(x) -> LargerThanSeven(x))", "(LargerThanSeven(Six))", "Sex(x) -> LargerThanSeven(x))", "all x y.((Six(x) & Seven(y)) -> Larger(x,y))", "all x.(Six(x) -> LargerThan(x,7))", "-SixLargerThan(x,7))", "Six is larger than Seven.", "(LargerThan(Six) & LargerThan(Seven))", "Six is LargerThanSeven(x)", "all x y.((Six(x) & Seven(y)) -> Larger(x,y))", "Six is largerThan(x,7))", "All x.(Six(x) -> LargerThanSeven(x))", "(LargerThanSeven(Six))", "All x.(Six(x) -> LargerThanSeven(x))", "(LargerThanSeven(Six))", "All x.(Six(x) -> LargerThanSeven(x))"]}
{"id": "folio_train_867", "nl": "A dog never tells the truth.", "fol": "all x.(IsDog(x) -> AlwaysLies(x))", "prediction": ["all x.(Dog(x) -> -TellsTruth(x))", "all x.(Dog(x) -> -TellsTruth(x))", "all x.(Dog(x) -> NeverTellsTruth(x))", "all x y.((Dog(x) & Truth(y)) -> NeverTells(x,y))", "all x y.(Dog(x) & Truth(y)) -> -Tells(x,y))", "all x.(Dog(x) -> -TellsTruth(x))", "all x.(Dog(x) -> NeverTellsTruth(x))", "all x y.(Dog(x) & Truth(y)) -> -Tells(x,y))", "all x y.(Dog(x) -> -TellsTruth(x,y))", "all x.(Dog(x) -> -TellsTruth(x))", "all x.(Dog(x) -> NeverTellsTruth(x))", "all x.(Dog(x) -> -TellsTruth(x))", "exists x.(Dog(x) & -TellsTruth(x))", "exists x.(Dog(x) & NeverTellsTruth(x))", "exists x.(Dog(x) & -TellsTruth(x))", "exists x.(Dog(x) & NeverTellsTruth(x))"]}
{"id": "folio_train_868", "nl": "Some poker players are dogs.", "fol": "exists x.(IsPokerPlayer(x) & IsDog(x))", "prediction": ["exists x.(PokerPlayer(x) & Dog(x))", "exists x.(PokerPlayer(x) & Dog(x))", "exists x.(PokerPlayer(x) & Dog(x))", "exists x y.(PokerPlayer(x) & Dog(y))", "exists x.(PokerPlayer(x) & Dog(x))", "exists x.(PokerPlayer(x) & Dog(x))", "exists x.(Player(x) & Dog(x))", "exists x.(Player(x) & Poker(x) & Dog(x))", "exists x.(PokerPlayer(x) & Dog(x))", "exists x.(PokerPlayer(x) & Dog(x))", "exists x y.(PokerPlayer(x) & Dog(y))", "exists x.(PokerPlayer(x) & Dog(x))", "exists x.(Player(x) & Dog(x))", "exists x.(PokerPlayer(x) & Dog(x))", "exists x.(PokerPlayer(x) & Dog(x))", "exists x.(PokerPlayer(x) & Dog(x))"]}
{"id": "folio_train_869", "nl": "Some poker players never tell the truth.", "fol": "exists x.(IsPokerPlayer(x) & AlwaysLies(x))", "prediction": ["exists x.(PokerPlayer(x) & -TellsTruth(x))", "exists x.(PokerPlayer(x) & -TellsTruth(x))", "exists x y.(PokerPlayer(x) & PokerPlayer(y) & -TellsTruth(x,y))", "exists x.(PokerPlayer(x) & -TellsTruth(x))", "exists x.(Player(x) & -TellsTruth(x))", "exists x.(PokerPlayer(x) & -TellsTruth(x))", "exists x.(PokerPlayer(x) & -TellsTruth(x))", "exists x y.(PokerPlayer(x) & PokerPlayer(y) & -TellsTruth(x,y))", "exists x.(Player(x) & -TellsTruth(x))", "exists x.(PokerPlayer(x) & -TellTruth(x))", "exists x y.(PokerPlayer(x) & PokerPlayer(y) & NeverTellsTruth(x,y))", "exists x y.(PokerPlayer(x) & PokerPlayer(y) & NeverTellsTruth(x,y))", "exists x.(PokerPlayer(x) & -TellsTruth(x))", "exists x.(Player(x) & -TellsTruth(x))", "exists x.(PokerPlayer(x) & NeverTellsTruth(x))", "exists x.(PokerPlayer(x) & NeverTellsTruth(x))"]}
{"id": "folio_train_870", "nl": "All Asians are human. ", "fol": "all x.(IsAsian(x) -> IsHuman(x))", "prediction": ["all x.(Asian(x) -> Human(x))", "all x.(Asian(x) -> Human(x))", "(all x.(Asian(x) -> Human(x))", "all x.(Asian(x) -> Human(x))", "(All x.(Asian(x) -> Human(x))", "all x.(Asiatic(x) -> Human(x))", "all x.(Asian(x) -> Human(x))", "all x y.(Asian(x) -> Human(x))", "all x.(Asian(x) -> Human(x))", "all x.(Asiatic(x) -> Human(x))", "all x.(Asian(x) -> Human(x))", "All x.(Asiatic(x) -> Human(x))", "all x.(Asian(x) -> Human(x))", "all x.(Asian(x) -> Human(x))", "all x.(Asian(x) -> Human(x))", "all x.(Asian(x) -> Human(x))"]}
{"id": "folio_train_871", "nl": "All Chinese are Asian.", "fol": "all x.(IsChinese(x) -> IsAsian(x))", "prediction": ["all x.(Chinese(x) -> Asian(x))", "all x.(Chinese(x) -> Asian(x))", "(All x.(Chinese(x) -> Asian(x))", "all x.(Chinese(x) -> Asian(x))", "(all x.(Chinese(x) -> Asian(x))", "all x.(China(x) -> Asian(x))", "all x.(Chinese(x) -> Asian(x))", "(All x.(Chinese(x) -> Asian(x))", "all x.(Chinese(x) -> Asian(x))", "all x.(China(x) -> Asian(x))", "all x.(Chinese(x) -> Asian(x))", "all x.(Chinese(x) -> Asian(x))", "all x.(Chinese(x) -> Asian(x))", "all x.(Changy(x) -> Asian(x))", "all x.(Changy(x) -> Asian(x))", "All x.(Chinese(x) -> Asian(x))"]}
{"id": "folio_train_872", "nl": "A man is either Chinese or British.", "fol": "all x.(IsChinese(x) | IsBritish(x))", "prediction": ["all x.(Man(x) -> (Chinese(x) | British(x)))", "all x.(Man(x) -> (Chinese(x) | British(x)))", "all x.(Man(x) -> (Chinese(x) | British(x)))", "all x.(Men(x) -> (Chinese(x) | British(x)))", "all x.(Man(x) -> (Chinese(x) | British(x)))", "all x.(Mammal(x) -> (Chinese(x) | British(x)))", "all x.(Men(x) -> (Chinese(x) | British(x)))", "all x.(Man(x) -> (Chinese(x) | British(x)))", "all x y.((Man(x) & Chinese(y)) | British(y))", "exists x.(Man(x) & (China(x) | British(x)))", "all x.(Man(x) -> (Chinese(x) | British(x)))", "exists x.(Men(x) & (Chinese(x) | British(x)))", "all x y.((Man(x) & Chinese(y)) | British(y))", "exists x.(Man(x) & Chinese(x) | British(x))", "exists x.(Man(x) & (Chinese(x) | British(x)))", "exists x.(Man(x) & (Chinese(x) | British(x)))"]}
{"id": "folio_train_873", "nl": "All British are European. ", "fol": "all x.(IsBritish(x) -> IsEuropean(x))", "prediction": ["all x.(British(x) -> European(x))", "all x.(British(x) -> European(x))", "(all x.(British(x) -> European(x)))", "all x.(British(x) -> European(x))", "(all x.(British(x) -> European(x)))", "all x.(British(x) -> European(x))", "(All x.(British(x) -> European(x)))", "all x.(British(x) -> European(x))", "(all x.(British(x) -> European(x)))", "All x.(Britain(x) -> European(x))", "all x.(British(x) -> European(x))", "all x.(British(x) -> European(x))", "all x.(British(x) -> European(x))", "all x.(British(x) -> European(x))", "all x.(British(x) -> European(x))", "all x.(British(x) -> European(x))"]}
{"id": "folio_train_874", "nl": "All Spanish are European. ", "fol": "all x.(IsSpanish(x) -> IsEuropean(x))", "prediction": ["all x.(Spanish(x) -> European(x))", "all x.(Spanish(x) -> European(x))", "(all x.(Spanish(x) -> European(x)))", "all x.(Spanish(x) -> European(x))", "(AllSpanish(Spanish) -> European(Spanish))", "(AllSpanish(Spanish) -> European(Spanish,European))", "all x.(Spanish(x) -> European(x))", "all x.(Spanish(x) -> European(x))", "(all x.(Spanish(x) -> European(x)))", "all x.(Spanish(x) -> European(x))", "all x.(Spanish(x) -> European(x))", "all x.(Spanish(x) -> European(x))", "all x.(Spanish(x) -> European(x))", "All x.(Spanish(x) -> European(x))", "all x.(Spanish(x) -> European(x))", "all x.(Spanish(x) -> European(x))"]}
{"id": "folio_train_875", "nl": "No Indian is European. ", "fol": "all x.(IsIndian(x) -> -IsEuropean(x))", "prediction": ["-exists x.(Individual(x) & European(x))", "-exists x.(Indian(x) & European(x))", "(exists x.(Indian(x) & European(x)) & -exists y.(Indian(y) & European(y))))", "(exists x.(Indian(x) & European(x)))", "all x.(Indian(x) -> -European(x))", "-exists x.(Indian(x) & European(x))", "-(Individual(i) & European(i))", "all x.(Individual(x) -> -European(x))", "KeenIndividual(x) -> European(x))", "-exists x.(Individual(x) & European(x))", "-exists x.(Indian(x) & European(x))", "all x.(Indian(x) -> -European(x))", "all x.(Indian(x) -> European(x))", "-exists x.(Indian(x) & European(x))", "-exists x.(Indian(x) & European(x))", "-exists x.(Indian(x) & European(x))"]}
{"id": "folio_train_876", "nl": "Jessee is either both an Indian and a human, or neither an Indian nor a human.", "fol": "((IsIndian(Jesse) & IsHuman(Jesse) & -(-IsIndian(Jesse) & -IsHuman(Jesse))) | (-(IsIndian(Jesse) & IsHuman(Jesse)) & -IsIndian(Jesse) & -IsHuman(Jesse)))", "prediction": ["all x.(Jessee(x) -> ((Indian(x) & Human(x)) | (-Indian(x) & Human(x)))))", "((Jessee(Jessee) & Indian(Jessee)) | (-Jessee(Jessee) & Human(Jessee))))", "all x.(Jessee(x) -> ((Indian(x) & Human(x)) | -Indian(x) & Human(x))))", "((Jessee(Jessee) & Indian(Jessee)) | (-Indian(Jessee) & Human(Jessee))))", "all x.(Jessee(x) -> ((Individual(x) & Human(x)) | (-Individual(x) & Human(x)))))", "((Jessee) & Indian(Jessee)) | (-Jessee(Jessee,Indian) & Human(Jessee))))", "(all x.(Jessee(x) -> (Indian(x) | Human(x))))", "all x.(Jessee(x) -> ((Indian(x) & Human(x)) | (-Indian(x) & Human(x)))))", "all x.(Jessee(x) -> ((Indian(x) & Human(x)) | (-Indian(x) & Human(x)))))", "all x y.((Jessee(x) & Indian(y)) -> (Human(y) | (-Indian(x) & Human(x)))))", "all x.(Jessee(x) -> (Individual(x) | Human(x)))", "all x.(Jessee(x) -> (Indian(x) & Human(x) | -Indian(x) & Human(x)))", "(all x.(Jessee(x) -> (Indian(x) | Human(x))) & (-Indian(x) | Human(x))))", "exists x.(Jessee(x) & ((Individual(x) & Human(x)) | -Individual(x) & Human(x))))", "all x.(Jessee(x) -> ((Indian(x) & Human(x)) | (-Indian(x) & Human(x))))", "exists x.(Jessee(x) & ((Indian(x) & Human(x)) | -Indian(x) & Human(x))))"]}
{"id": "folio_train_877", "nl": "Jesse is Chinese.", "fol": "IsChinese(Jesse)", "prediction": ["Jesse is Chinese.", "(Chinese(Jesse) & Chinese(Jesse))", "all x.(Jesse(x) -> Chinese(x))", "-Chinese(Jesse)", "Jesse is Chinese.", "(Chinese(Jesse) & Chinese(Jesse))", "Jesse is Chinese.", "all x.(Jesse(x) -> Chinese(x))", "(Chinese(Jesse) & Chinese(Jesse))", "Jesse is Chinese.", "All x.(Jesse(x) -> Chinese(x))", "Jesse is Chinese.", "(Chinese(Jesse) & Chinese(Jesse))", "all x.(Jesse(x) -> Chinese(x))", "Jesse is Chinese.", "All x.(Jesse(x) -> Chinese(x))"]}
{"id": "folio_train_878", "nl": "Jesse is not Chinese.", "fol": "-IsChinese(Jesse)", "prediction": ["-Chinese(Jesse)", "Jesse is notChinese(Jesse)", "all x.(Jesse(x) -> -Chinese(x))", "(-Chinese(Jesse))", "Jesse is notChinese(Jesse)", "-Chinese(Jesse)", "Jesse is not Chinese.", "Jesse -Chinese.", "(-Chinese(Jesse))", "Jesse is not Chinese.", "(-Changy(Jesse,Chinese))", "-Chinese(Jesse)", "(-Changy(Jesse))", "(-Chinese(Jesse))", "-Chinese(Jesse)", "-Chinese(Jesse)"]}
{"id": "folio_train_879", "nl": "If Jesse is either an Indian or a Spanish, then Jesse is either both British and European, or neither British nor European.", "fol": "((IsIndian(Jesse) | IsSpanish(Jesse)) -> ((IsBritish(Jesse) & IsEuropean(Jesse)) | (-IsBritish(Jesse) & -IsEuropean(Jesse))))", "prediction": ["all x.((Jesse(x) & (Individual(x) | Spanish(x))) -> (British(x) & European(x)) | (-British(x) & European(x))))", "all x.((Jesse(x) & (Indian(x) | Spanish(x))) -> (British(x) & European(x)) | (-British(x) & European(x))))", "all x.((Jesse(x) & (Individual(x) | Spanish(x))) -> ((British(x) & European(x)) | (-British(x) & European(x)))))", "((Individual(Jesse) | Spanish(Jesse))) -> ((British(Jesse) & European(Jesse)) | (-British(Jesse) & European(Jesse))))", "all x.((Individual(x) | Spanish(x)) -> ((British(x) & European(x)) | (-British(x) & European(x))))", "((Indian(Jesse) | Spanish(Jesse))) -> (British(Jesse) & European(Jesse)) | (-British(Jesse) & European(Jesse))))", "all x.((Jesse(x) & Indian(x)) | Spanish(x)) -> ((British(x) & European(x)) | (-British(x) & European(x))))", "all x.((Jesse(x) & (Indian(x) | Spanish(x))) -> ((British(x) & European(x)) | (-British(x) & European(x))))", "all x.((Indian(x) | Spanish(x)) -> (British(x) & European(x)) | (-British(x) & European(x))))", "((Individual(Jesse) | Spanish(Jesse)) & (British(Jesse) | European(Jesse))) | (-British(Jesse) | European(Jesse))))", "all x y.((Jesse(x) & Indian(x) & Spanish(x)) -> ((British(y) & European(y)) | (-British(y) & European(y))))", "all x.((Individual(x) | Spanish(x)) -> ((British(x) & European(x)) | (-British(x) & European(x))))", "((Indian(Jesse) | Spanish(Jesse))) -> (British(Jesse) & European(Jesse)) | (-British(Jesse) & European(Jesse))))", "all x.((Jesse(x) & (Individual(x) | Spanish(x))) -> (British(x) | European(x)) | (-British(x) & European(x))))", "all x.(Indian(x) | Spanish(x)) -> (British(x) | European(x)))", "all x y.((Jesse(x) & Indian(x)) | Spanish(x)) -> ((British(x) & European(x)) | -British(y) & European(y)))"]}
{"id": "folio_train_880", "nl": "No people who never admit a mistake are good teachers.", "fol": "all x.(NeverAdmitsMistakes(x) -> -IsGoodTeacher(x))", "prediction": ["all x.((Person(x) & NeverAcceptsMistake(x)) -> GoodTeacher(x))", "-exists x.((Person(x) & NeverAcceptsMistake(x)) -> GoodTeacher(x))", "-exists x.((Person(x) & -AcknowledgesMistake(x)) -> GoodTeacher(x))", "all x.((Person(x) & NeverAdmitsMistake(x)) -> GoodTeacher(x))", "-exists x.(Person(x) & -AcknowledgesMistake(x))", "-exists x.(GoodTeacher(x) & -AcknowledgesMistake(x))", "all x.((Person(x) & -AcknowledgesMistake(x)) -> GoodTeacher(x))", "-exists x.(Person(x) & -AdmitsMistake(x))", "all x.((People(x) & NeverAdmitMistake(x)) -> GoodTeacher(x))", "all x.((Person(x) & NeverAcknowledgesMistake(x)) -> GoodTeacher(x))", "all x.((Person(x) & NeverAcceptsMistake(x)) -> GoodTeacher(x))", "-exists x.(GoodTeacher(x) & -AdmitsMistake(x))", "-all x.((Person(x) & NeverAdmitsMistake(x)) -> GoodTeacher(x))", "-exists x.(Person(x) & NeverAcceptsMistake(x))", "all x.((Person(x) & NeverAcceptsMistake(x)) -> GoodTeacher(x))", "all x.((Person(x) & NeverAdmitsMistake(x)) -> GoodTeacher(x))"]}
{"id": "folio_train_881", "nl": "Some well-informed people are people who never admit a mistake.", "fol": "exists x.(IsWellInformed(x) & NeverAdmitsMistakes(x))", "prediction": ["exists x.(WellInformed(x) & -AcceptsMistake(x))", "exists x.(WellInformed(x) & -AdmitsMistake(x))", "all x y.((WellInformed(x) & Person(y)) -> -AcceptsMistake(y,x))", "exists x.(WellInformedPerson(x) & -AcceptsMistake(x))", "exists x.(WellInformed(x) & -AcceptMistake(x))", "all x y.((WellInformed(x) & Person(y)) -> -AdmitsMistake(y,x))", "exists x.(WellInformedPerson(x) & -AdmitsMistake(x))", "all x y.((WellInformedPerson(x) & Person(y)) -> -AcceptsMistake(y,x))", "exists x.(WellInformed(x) & -AcknowledgesMistake(x))", "exists x.((WellInformed(x) & -AcceptsMistake(x)) -> -AcceptsMistake(x))", "all x y.((WellInformed(x) & Person(y)) -> -AcceptsMistake(y,x))", "exists x.(WellInformed(x) & Person(x) & -AcceptsMistake(x))", "exists x.(WellInformedPeople(x) & -AcceptsMistake(x))", "exists x.(WellInformed(x) & -AcceptsMistake(x))", "exists x.(WellInformedPerson(x) & -AcceptsMistake(x))", "exists x.(WellInformedPerson(x) & -AcknowledgesMistake(x))"]}
{"id": "folio_train_882", "nl": "Some good teachers are not well-informed people.", "fol": "exists x.(IsGoodTeacher(x) & -IsWellInformed(x))", "prediction": ["exists x.(GoodTeacher(x) & -WellInformed(x))", "exists x.(GoodTeacher(x) & -WellInformed(x))", "all x y.((GoodTeacher(x) & WellInformedPerson(y)) -> -GoodTeacher(x))", "exists x.(GoodTeacher(x) & -WellInformedPeople(x))", "exists x.(GoodTeacher(x) & -WellInformed(x))", "exists x.(Teacher(x) & -WellInformed(x))", "exists x.(GoodTeacher(x) & -WellInformed(x))", "exists x.(GoodTeacher(x) & -WellInformed(x))", "exists x.((GoodTeacher(x) & -WellInformed(x))", "exists x.(GuysTeacher(x) & -WellInformedPeople(x))", "exists x.((Teacher(x) & Good(x)) & -WellInformed(x))", "exists x.(GoodTeacher(x) & -WellInformedPeople(x))", "exists x.(GoodTeacher(x) & -WellInformedPerson(x))", "exists x.(GoodTeacher(x) & -WellInformed(x))", "exists x.(GoodTeacher(x) & -WellInformedPeople(x))", "exists x.(GoodTeacher(x) & -WellInformedPerson(x))"]}
{"id": "folio_train_883", "nl": "Philatelic literature is divided into the following categories: Stamp catalogues, Periodicals, Auction catalogues, Books, Bibliographies, and Background Material", "fol": "all x.(IsPhilatelicLiterature(x) -> (IsStampCatalogue(x) | IsPeriodical(x) | IsAuctionCatalogue(x) | IsBook(x) | IsBibliography(x) | IsBackgroundMaterial(x)))", "prediction": ["all x.(PhilatelicLiterature(x) -> (StampCatalogs(x) | Periodicals(x) | AuctionCatalogs(x) | Books(x) | Bibliographies(x) | BackgroundMaterial(x)))", "all x y z.((PhilatelicLiterature(x) & StampCatalog(y) & Periodical(z) & AuctionCatalog(x) & Books(x) & Bibliographies(x) & BackgroundMaterial(x)) -> (Category(x,y,z) & Category(x,y)))", "(StampCatalogs(PhilatelicLiterature) & Periodicals(PhilatelicLiterature) & AuctionCatalogs(PhilatelicLiterature) & Books(PhilatelicLiterature) & Bibliographies(PhilatelicLiterature) & BackgroundMaterial(PhilatelicLiterature))", "(StampCategories(PhilatelicLiterature) & Periodicals(PhilatelicLiterature) & AuctionCategories(PhilatelicLiterature) & Books(PhilatelicLiterature) & Bibliographies(PhilatelicLiterature) & BackgroundMaterial(PhilatelicLiterature))", "(Category(philatelicliterature) & StampCatalog(philatelicliterature) & Periodical(philatelicliterature) & AuctionCatalog(philatelicliterature) & Books(philatelicliterature) & Bibliographies(philatelicliterature) & BackgroundMaterial(philatelicliterature))", "(Categories: StampCatalogs(PhilatelicLiterature) & Categories: Periodicals(PhilatelicLiterature) & Categories:AuctionCatalogs(PhilatelicLiterature) & Categories:Books(PhilatelicLiterature) & Categories:Biblicals(PhilatelicLiterature) & Categories:BackgroundMaterial(PhilatelicLiterature))", "(all x.(PhilatelicLiterature(x) -> StampCatalog(x)) & all y.(Periodical(y) & AuctionCatalog(y)) & all z.(Book(z) -> Bibliography(z)) & all w.(BackgroundMaterial(w) -> BackgroundMaterial(w))))", "all x y z.((PhilatelicLiterature(x) & StampCatalog(y) & Periodical(z)) -> (StampCatalog(y) | AuctionCatalog(y) | BooksCatalog(z) | BibliographiesCatalog(z) | BackgroundMaterial(z)))", "all x y.((PhilatelicLiterature(x) & StampCatalog(y) & Periodical(y) & AuctionCatalog(y) & Books(x,y) & Bibliographies(x,y) & BackgroundMaterial(x,y)) -> DividedIntoCategories(x,y))", "all x.(PhilatelicLiterature(x) -> (StampCatalogues(x) | Periodicals(x) | AuctionCatalogues(x) | Books(x) | Bibliographies(x) | BackgroundMaterial(x)))", "(StampCatalogs(PhilatelicLiterature) | Periodicals(PhilatelicLiterature) | AuctionCatalogs(PhilatelicLiterature) | Books(PhilatelicLiterature) | Bibliographies(PhilatelicLiterature) | BackgroundMaterial(PhilatelicLiterature))", "all x.(PhilatelicLiterature(x) -> (StampCatalog(x) | PeriodicalCatalog(x) | AuctionCatalog(x) | BooksCatalog(x) | BibliographiesCatalog(x) | BackgroundMaterial(x)))", "all x.(PhilatelicLiterature(x) -> (StampCatalogs(x) | Periodicals(x) | AuctionCatalogs(x) | Books(x) | Bibliographies(x) | BackgroundMaterial(x)))", "all x y.((PhilatelicLiterature(x) & StampCatalog(y) & Periodical(y) & AuctionCatalog(y)) -> (Category(x,y) & Category(x,y) & Category(x,y)))", "all x y z.((PhilatelicLiterature(x) & StampCatalog(y) & Periodical(z)) -> (Category(x,y) | Category(x,z) | Category(x,y)))", "all x.(PhilatelicLiterature(x) -> (StampCatalogues(x) | Periodicals(x) | AuctionCatalogues(x) | Books(x) | Bibliographies(x) | BackgroundMaterial(x)))"]}
{"id": "folio_train_884", "nl": "Mort is not a Stamp catalogue.", "fol": "-IsStampCatalogue(Mort)", "prediction": ["(-StampCatalog(Mort))", "Mort is not StampCatalog(Mort)", "all x.(Mort(x) -> -StampCatalog(x))", "all x.(Molt(x) -> -StampCatalog(x))", "-StampCatalog(Mort)", "Mort is notStampCatalog(Mort)", "Mort is not StampCatalog(Mort)", "(StampCatalog(Molt) & -StampCatalog(Molt))", "(-StampCatalog(Molt))", "Mort - StampCatalog(Molt)", "Mort is notStampCatalog(Mort)", "-StampCatalog(Mort)", "Mort is not StampCatalog(Mort)", "(-StampCatalog(Molt))", "-StampCatalog(Mort)", "-StampCatalog(Molt)"]}
{"id": "folio_train_885", "nl": "Mort is not a periodical, auction catalogue, bibliography, or background material.", "fol": "-(IsPeriodical(Mort) | IsAuctionCatalogue(Mort) | IsBibliography(Mort) | IsBackgroundMaterial(Mort))", "prediction": ["all x.(Mort(x) -> (-Periodical(x) & -AuctionCatalog(x) & -Biblical(x) & -BackgroundMaterial(x)))", "(-Periodical(Mort) & -AuctionCatalog(Mort) & -Bibliography(Mort) & -BackgroundMaterial(Mort))", "(-(Periodical(Mort) | AuctionCatalog(Mort)) | Bibliography(Mort)) | BackgroundMaterial(Mort))", "-(Mort(Mort) & -(Periodical(Mort) | AuctionCatalog(Mort) | Bibliography(Mort) | BackgroundMaterial(Mort)))", "all x.(Mort(x) -> (-Periodical(x) | AuctionCatalog(x) | Bibliography(x) | BackgroundMaterial(x)))", "-(Mort(m) & Periodical(m) & -AuctionCatalog(m) & -Bibliography(m)) & -BackgroundMaterial(m))", "-(Periodical(Mort) | AuctionCatalog(Mort) | Bibliography(Mort)) & -(Mort(Mort) & -(Mort(Mort) | AuctionCatalog(Mort) & -(Mort(Mort)) | BackgroundMaterial(Mort))))", "(-Periodical(Mot) | AuctionCatalog(Mot) | Bibliography(Mot) | BackgroundMaterial(Mot)))", "all x.(Molt(x) -> (-Periodical(x) & -AuctionCatalog(x) & -Biblical(x) & -BackgroundMaterial(x)))", "(-Periodical(Mort) & -AuctionCatalog(Mort) & -Bibliography(Mort) & -BackgroundMaterial(Mort))", "-(Mort(Mort) | (AuctionCatalog(Mort) | Bibliography(Mort) | BackgroundMaterial(Mort)))", "all x.(Mort(x) -> (-Periodical(x) & -AuctionCatalog(x) & -Biblical(x) & -BackgroundMaterial(x)))", "(-Periodical(mort) | AuctionCatalog(mort) | Bibliography(mort) | BackgroundMaterial(mort)))", "all x.(Mort(x) -> (-Periodical(x) | AuctionCatalog(x) | Bibliography(x) | BackgroundMaterial(x)))", "all x.(Molt(x) -> (-Periodical(x) & -AuctionCatalog(x) & -Bibliography(x) & -BackgroundMaterial(x)))", "all x.(Mort(x) -> (-Periodical(x) & -AuctionCatalog(x) & -Bibliography(x) & -BackgroundMaterial(x)))"]}
{"id": "folio_train_886", "nl": "Mort is a piece of Philatelic literature.", "fol": "IsPhilatelicLiterature(Mort)", "prediction": ["all x.(Mort(x) -> PhilatelicLiterature(x))", "(PieceOfPhilatelicLiterature(Mort))", "Mort is a piece of PhilatelicLiterature.", "all x.(Molt(x) -> PhilatelicLiterature(x))", "all x.(Mort(x) -> PhilatelicLiterature(x))", "Mort is a piece of PhilatelicLiterature(Mort)", "(PieceOfPhilatelicLiterature(Mort))", "(PieceOfPhilatelicLiterature(Molt))", "all x.(Molt(x) -> PhilatelicLiterature(x))", "Mort is a piece of PhilatelicLiterature.", "all x.(Mort(x) -> PhilatelicLiterature(x))", "(PieceOfPhilatelicLiterature(Mort))", "all x.(Molt(x) -> PhilatelicLiterature(x))", "all x.(Mort(x) -> PhilatelicLiterature(x))", "(PieceOfPhilatelicLiterature(Molt))", "All x.(Mort(x) -> PhilatelicLiterature(x))"]}
{"id": "folio_train_887", "nl": "Mort is a book", "fol": "IsBook(Mort)", "prediction": ["all x.(Mort(x) -> Book(x))", "(Book(Mort) & Book(Mort))", "-Book(Mort) & Book(Mort) & Book(Mort) & Book(Mort))", "all x.((Mort(x) & Book(x)) -> Book(x))", "all x y.((Mort(x) & Book(y)) -> Book(x,y))", "Mort is a book.", "all x.(Mort(x) -> Book(x))", "(Book(Mort) & Book(Mort))", "Mort is a book.", "(Book(Mort) & Book(Mort) & Book(Mort))", "(Book(Mot) & Book(Mot))", "all x.(Mot(x) -> Book(x))", "all x.((Mot(x) & Book(x)) -> Book(x))", "Mort is a book.", "all x.(Mort(x) -> Book(x))", "(Book(Mot) & Book(Mot))"]}
{"id": "folio_train_888", "nl": "Mort is background material.", "fol": "IsBackgroundMaterial(Mort)", "prediction": ["all x.(Molt(x) -> BackgroundMaterial(x))", "(BackgroundMaterial(Mot) & -BackgroundMaterial(Mot))", "all x.(Mort(x) -> BackgroundMaterial(x))", "Mort is background material.", "(BackgroundMaterial(Molt) & -BackgroundMaterial(Molt))", "Mort is backgroundmaterial.", "all x.(Molt(x) -> BackgroundMaterial(x))", "all x.(Mort(x) -> BackgroundMaterial(x))", "Mort is background material.", "(BackgroundMaterial(Mot) & Contains(Mot))", "Mort is BackgroundMaterial(m)", "(HistoryMaterial(Mort) & BackgroundMaterial(Mort))", "All x.(Molt(x) -> BackgroundMaterial(x))", "Mort is backgroundmaterial.", "all x.(Mort(x) -> BackgroundMaterial(x))", "Mort is BackgroundMaterial(m)"]}
{"id": "folio_train_889", "nl": "Eragon is a piece of Philatelic literature.", "fol": "IsPhilatelicLiterature(Eragon)", "prediction": ["all x.(Eragon(x) -> PhilatelicLiterature(x))", "Eragon is a piece of PhilatelicLiterature.", "(PieceOfPhilatelicLiterature(Eragon))", "Eragon is a piece of PhilatelicLiterature(Eragon)", "Eragon (PieceOfPhilatelicLiterature)", "all x.(Eragon(x) -> PhilatelicLiterature(x))", "(PieceOfPhilatelicLiterature(Eragon))", "all x.(Eragon(x) -> PhilatelicLiterature(x))", "Eragon is a piece of PhilatelicLiterature.", "Eragon (PieceOfPhilatelicLiterature)", "Eragon is a PhilatelicLiterature(er)", "(PieceOfPhilatelicLiterature(Eragon))", "All x.(Ereagon(x) -> PhilatelicLiterature(x))", "Eragon is a piece of PhilatelicLiterature(x)", "all x.(Eragon(x) -> PhilatelicLiterature(x))", "all x.(Eragon(x) -> PhilatelicLiterature(x))"]}
{"id": "folio_train_890", "nl": "Adventures of Rusty is a drama film and children's film.", "fol": "(IsDramaFilm(Adventuresofrusty) & IsChildrensFilm(Adventuresofrusty))", "prediction": ["all x.(AdventuresOfRusty(x) -> (DramaFilm(x) & ChildrensFilm(x)))", "(DramaFilm(AdventuresOfRusty) & ChildrensFilm(AdventuresOfRusty))", "AdventuresOfRusty(x) -> (DramaFilm(x) & ChildrensFilm(x)))", "(DramaFilm(AdventureOfRusty) & ChildrensFilm(AdventureOfRusty))", "All x y.((Adventure(x) & Rusty(y)) -> (DramaFilm(x) & ChildrensFilm(x)))", "AdventuresOfRusty(x) -> (DramaFilm(x) & ChildrensFilm(x)))", "all x.(AdventuresOfRusty(x) -> (DramaFilm(x) & ChildrensFilm(x)))", "all x.((Adventure(x) & Rusty(x)) -> (DramaFilm(x) & ChildrensFilm(x)))", "AdventuresOfRusty(x) & DramaFilm(x) & ChildrensFilm(x))", "(AdventuresOfRusty(Adventure(a) & DramaFilm(a) & ChildrensFilm(a))", "all x.(AdventureOfRusty(x) -> (DramaFilm(x) & ChildrensFilm(x)))", "All x y.((Adventure(x) & Rusty(y)) -> (DramaFilm(x,y) & ChildrensFilm(x,y)))", "(DramaFilm(AdventuresOfRusty) & ChildrensFilm(AdventuresOfRusty))", "AdventuresOfRusty.com (DramaFilm(x) & ChildrensFilm(x))", "(DramaFilm(AdventuresOfRusty) & ChildrensFilm(AdventuresOfRusty))", "all x.(AdventuresOfRusty(x) -> (DramaFilm(x) & ChildrensFilm(x)))"]}
{"id": "folio_train_891", "nl": "Columbia Pictures produced Adventures of Rusty", "fol": "ProducedBy(Columbiapictures,Adventuresofrusty)", "prediction": ["all x y z.((ColumbiaPictures(x) & AdventuresOfRusty(y) & ColumbiaPictures(z)) -> ProducedBy(x,y,z))", "(ProducedByColumbiaPictures(ColumbiaPictures) & AdventuresOfRusty(ColumbiaPictures))", "All x y.((ColumbiaPictures(x) & Rusty(y)) -> ProducedAdventuresOfRusty(x,y))", "Columbia Pictures produced AdventuresOfRusty(ColumbiaPictures)", "all x.(ColumbiaPictures(x) -> (ProducedAdventuresOfRusty(x) & RustyAdventures(x)))", "(ColumbiaPictures.com produced AdventuresOfRusty(ColumbiaPictures))", "(AdventuresOfRusty(CupodilePictures) & Columbia Pictures (ColumbiaPictures) & ProducedByRusty(CupodilePictures))", "all x y z.((ColumbiaPictures(x) & AdventuresOfRusty(y) & Rusty(z)) -> ProducedBy(x,y,z))", "(ProducedByColumbiaPictures(ColumbiaPictures) & AdventuresOfRusty(ColumbiaPictures))", "Columbia Pictures produced AdventuresOfRusty(ColumbiaPictures)", "All x y.((ColumbiaPictures(x) & Rusty(y)) -> ProducedAdventuresOfRusty(x,y))", "All x y.((ColumbiaPictures(x) & AdventuresOfRusty(x)) -> ProducedByColumbiaPictures(x,y))", "all x.(ColumbiaPictures(x) -> ProducedAdventuresOfRusty(x))", "All x y z.((ColumbiaPictures(x) & AdventuresOfRusty(y) & Rusty(z)) -> ProducedByColumbiaPictures(x,y,z))", "Columbia Pictures produced AdventuresOfRusty(ColumbiaPictures)", "Columbia Pictures produced AdventuresOfRusty(ColumbiaPictures,Routy)"]}
{"id": "folio_train_892", "nl": "Tintin was produced by Paramount.", "fol": "ProducedBy(Paramount,Tintin)", "prediction": ["(ProducedByParamount(Tintin))", "All x.(Tintin(x) -> ProducedByParamount(x))", "Tintin was produced by Paramount.", "-ProducedByParamount(Tintin)", "all x y.((Tintin(x) & Paramount(y)) -> ProducedBy(x,y))", "(ProducedByParamount(Tintin))", "all x.(Tintin(x) -> ProducedByParamount(x))", "Tintin was produced by Paramount.", "(ProducedByParamount(Tintin) & Paramount(Tintin))", "-ProducedByParamount(Tintin)", "(ProducedBy(Tintin,Paramount))", "Tintin was produced by Paramount.", "All x.(Tintin(x) -> ProducedByParamount(x))", "(ProducedByParamount(Tintin))", "All x.(Tintin(x) -> ProducedByParamount(x))", "(ProducedByParamount)"]}
{"id": "folio_train_893", "nl": "Tintin is an adventure film.", "fol": "IsAdventureFilm(Tintin)", "prediction": ["Tintin is AdventureFilm(tin) & -AdventureFilm(tin))", "All x.(Tintin(x) -> AdventureFilm(x))", "Tintin is an AdventureFilm(tin) & -AdventureFilm(tin))", "(AdventureFilm(Tintin) & AdventureFilm(Tintin))", "Tintin is AdventureFilm(tin) & -AdventureFilm(tin))", "all x.(Tintin(x) -> AdventureFilm(x))", "(AdventureFilm(Tintin) & Adventure(Tintin))", "Tintin (AdventureFilm)", "Tintin is AdventureFilm(x)", "All x.(Tintin(x) -> AdventureFilm(x))", "(AdventureFilm(Tintin) & AdventureFilm(Tintin))", "Tintin is adventure film.", "Tintin is an adventure film.", "all x.(Tintin(x) -> AdventureFilm(x))", "-AdventureFilm(Tintin)", "Tintin is AdventureFilm(t)"]}
{"id": "folio_train_894", "nl": "Columbia pictures produces drama films.", "fol": "exists x.(ProducedBy(Columbiapictures,x) & IsDramaFilm(x))", "prediction": ["all x.(ColumbiaPictures(x) -> ProducesDramaFilms(x))", "all x y.((ColumbiaPictures(x) & DramaFilm(y)) -> Produces(x,y))", "(ProducesDramaFilms(ColumbiaPictures)", "all x.(ColumbusPictures(x) -> ProducesDramaFilms(x))", "all x.(ColumbiaPictures(x) -> ProducesDramaFilms(x))", "all x y z.((ColumbiaPictures(x) & DramaFilm(y) & Drama(z)) -> Produces(x,y,z))", "all x y.((ColumbiaPictures(x) & DramaFilm(y)) -> Produces(x,y))", "all x y.((ColumbusPictures(x) & DramaFilm(y)) -> Produces(x,y))", "(ProducesDramaFilms(ColumbiaPictures)", "all x.(ColumbiaPictures(x) -> ProducesDramaFilms(x))", "all x y.((ColumbiaPictures(x) & DramaFilm(y)) -> Produces(x,y))", "all x.(ColumbusPictures(x) -> ProducesDramaFilms(x))", "exists x.(ColombiaPicture(x) & Pictures(x) & ProducesDramaFilms(x))", "exists x.(ColumbiaPicture(x) & ProducesDramaticFilms(x))", "all x.(ColumbiaPictures(x) -> ProducesDramaFilms(x))", "all x y.((ColumbiaPicture(x) & DramaFilm(y)) -> Produces(x,y))"]}
{"id": "folio_train_895", "nl": "Columbia pictures produces adventure films.", "fol": "exists x.(ProducedBy(Columbiapictures,x) & IsAdventureFilm(x))", "prediction": ["all x.(ColumbiaPictures(x) -> ProducesAdventureFilms(x))", "all x y.((ColumbiaPictures(x) & AdventureFilm(y)) -> Produces(x,y))", "all x.(ColumbusPictures(x) -> ProducesAdventureFilms(x))", "(ProducesAdventureFilms(ColumbiaPictures)", "all x y.((ColumbusPictures(x) & AdventureFilm(y)) -> Produces(x,y))", "all x.(ColumbiaPictures(x) -> ProducesAdventureFilms(x))", "all x y.((ColumbiaPictures(x) & AdventureFilm(y)) -> Produces(x,y))", "all x y z.((ColumbiaPicture(x) & AdventureFilm(y) & Film(z)) -> Produces(x,y,z))", "all x.(ColumbusPictures(x) -> ProducesAdventureFilms(x))", "all x.(ColumbiaPictures(x) -> ProducesAdventureFilms(x))", "all x y.((ColumbusPictures(x) & AdventureFilm(y)) -> Produces(x,y))", "all x y.((ColumbiaPictures(x) & AdventureFilm(y)) -> Produces(x,y))", "all x.(ColumbiaPictures(x) -> ProducesAdventureFilms(x))", "all x.(ColumbusPictures(x) -> ProducesAdventureFilms(x))", "exists x.(ColombiaPhotographs(x) & ProducesAdventureFilms(x))", "exists x.(ColumbiaPicture(x) & ProducesAdventureFilms(x))"]}
{"id": "folio_train_896", "nl": "Paramount produces children's films.", "fol": "exists x.(ProducedBy(Paramount,x) & IsChildrensFilm(x))", "prediction": ["all x.(Paramount(x) -> ProducesChildrensFilms(x))", "all x y.((Paramount(x) & Child(y)) -> Produces(x,y))", "(ProducesChildrensFilms(Paramount)", "Paramount produces children's films.", "all x.(Paramount(x) -> ProducesChildrensFilms(x))", "Paramount produces childrensFilms(Paramount)", "Paramount ProducesChildrensFilms(Paramount)", "all x y.((Paramount(x) & Child(y)) -> Produces(x,y))", "all x y.((Paramount(x) & ChildrensFilm(y)) -> Produces(x,y))", "(ProducesChildrensFilms(Paramount)", "(ProducesChildrenFilms(Paramount)", "Paramount produces children's films.", "all x.(Paramount(x) -> ProducesChildrensFilms(x))", "Paramount produces ChildrensFilms(Paramount)", "all x.(Paramount(x) -> ProducesChildrensFilms(x))", "all x.(Paramount(x) -> ProducesChildrenFilms(x))"]}
{"id": "folio_train_897", "nl": "Paramount produces adventure films.", "fol": "exists x.(ProducedBy(Paramount,x) & IsAdventureFilm(x))", "prediction": ["all x.(Paramount(x) -> ProducesAdventureFilms(x))", "Paramount produces adventure films.", "all x y.((Paramount(x) & AdventureFilm(y)) -> Produces(x,y))", "(ProducesAdventureFilms(Paramount)", "Paramount ProducesAdventureFilms(Paramount)", "all x y z.((Paramount(x) & AdventureFilm(y) & Film(z)) -> Produces(x,y,z))", "all x.(Paramount(x) -> ProducesAdventureFilms(x))", "Paramount produces AdventureFilms.", "Paramount ProducesAdventureFilms(Paramount)", "Paramount produces adventure films.", "(ProducesAdventureFilms(Paramount)", "all x.(Paramount(x) -> ProducesAdventureFilms(x))", "Paramount produces adventure films.", "Paramount produces AdventureFilms.", "all x.(Paramount(x) -> ProducesAdventureFilms(x))", "all x.(Paramount(x) -> ProducesAdventureFilms(x))"]}
{"id": "folio_train_898", "nl": "Deng Xiaoping served as the paramount leader of the People's Republic of China (PRC). ", "fol": "ServedAsParamountLeader(Dengxiaoping,Prc)", "prediction": ["Deng Xiaoping served as the SupremeLeaderOfPRC(x))", "(SecondaryLeader(DengXiaoping) & PeoplesRepublicOfChina(DengXiaoping))", "DengXiaoping served as the paramountleaderOfPRC(x))", "All x.((DengXiaoping(x) & PeoplesRepublicOfChina(x)) -> SupremeLeader(x))", "-(SecondaryLeader(DengXiaoping) & PeoplesRepublicOfChina(PRC))", "Deng Xiaoping served as the SupremeLeader(x) & PeoplesRepublicOfChina(x))", "DengXiaoping served as the SupremeLeaderOfPRC(x))", "(SecondaryLeader(DengXiaoping) & PeoplesRepublicOfChina(DengXiaoping))", "DengXiaoping served as the paramountleader(x) & PeoplesRepublicOfChina(x))", "all x y.((DengXiaoping(x) & PeoplesRepublic(y)) -> SupremeLeader(x,y))", "DerongXiaoping (DengXiaoping) & SupremeLeader(PRC)", "Deng Xiaoping served as the paramountleaderOfPRC(x))", "Deng Xiaoping served as the paramountleader(x) & PeoplesRepublicOfChina(x))", "(SecondaryLeader(DengXiaoping) & PeoplesRepublicOfChina(DengXiaoping))", "Deng Xiaoping served as the SupremeLeaderOfPRC(x))", "(SecondaryLidar(DengXiaoping,PRC))"]}
{"id": "folio_train_899", "nl": "Deng Xiaoping was praised for his reaffirmation of the reform program in his Southern Tour of 1992 as well as the reversion of Hong Kong to Chinese control in 1997 and the return of Macau in 1999.", "fol": "(PraisedForAchievements(Dengxiaoping,Reaffirmationofreformprogram) & PraisedForAchievements(Dengxiaoping,Reversionofhongkong) & PraisedForAchievements(Dengxiaoping,Returnofmacau))", "prediction": ["all x.((DengXiaoping(x) & SouthernTour(x,1992) & ReversionToChineseControl(x,1997) & ReturnToMacau(x,1999)) -> Plauded(x))", "all x y.((DengXiaoping(x) & SouthernTour(y) & SouthernTour(y)) -> (ReaffirmationOfReformProgram(x,y) & ReversionOfHongKongToChineseControl(x,y) & ReturnOfMacau(x,y)))", "(PraisedForReaffirmationOfReformProgram(DengXiaoping) & SouthernTour(DengXiaoping) & ReversionOfHongKongToChineseControl(Deng1997) & ReturnOfMacau(DengXiaoping))", "(PraisedFor(DengXiaoping) & ReaffirmationOfReformProgram(DengXiaoping,SouthernTour(DengXiaoping,1997)) & ReversionOfHongKongToChineseControl(DengXiaoping,1997) & ReturnOfMacau(DengXiaoping,99))", "(ReaffirmationOfReformProgram(DengXiaoping) & SouthernTour(DengXiaoping,1992) & ReversionOfHongKongToChineseControl(Deng1997) & ReturnOfMacau(DengXiaoping,1999)))", "((DengXiaoping(x) & SouthernTour(x,1992)) & (ReversionToChineseControl(x,1997) & ReturnToMacau(x,1999))) -> Plauded(x))", "-(PraisedFor(DengXiaoping) & ReaffirmationOfReformProgram(DengXiaoping,SouthernTour(DengXiaoping,1997) & ReversionToChineseControl(HongKong,1997) & ReturnToMacau(Macau,1998)))", "(PlaidForReaffirmationOfReformProgram(DengXiaoping) & SouthernTour(DengXiaoping) & ReversionOfHongKongToChineseControl(Deng1997) & ReturnOfMacau(DengXiaoping))", "all x y.((DengXiaoping(x) & SouthernTour(y)) -> (ReaffirmationOfReformProgram(x,y) & ReversionOfHongKongToChineseControl(x,y) & ReturnOfMacau(x,y)))", "During his SouthernTour of 1992, Deng Xiaoping was praised for his reaffirmation of the reform program as well as for the reversion of Hong Kong to ChineseControl in 1997 and for the return of Macau in 1999.", "all x y z.((DengXiaoping(x) & SouthernTour(y) & HongKong(z) & ChineseControl(z)) -> (ReaffirmationOfReformProgram(x,y) & ReversionOfControl(x,z) & ReturnOfMacau(x,y)))", "(PraisedForReaffirmationOfReformProgram(DengXiaoping) & SouthernTour(DengXiaoping,1992) & ReversionToChineseControl(HongKong,1997) & ReturnToMacau(Macau,1999)))", "all x.((DengXiaoping(x) & SouthernTour(x,1992) & ReversionToChineseControl(x,1997) & ReturnToMacau(x,99)) -> Plauded(x))", "((DengXiaoping(x) & SouthernTour(x,1992)) & (ReversionToChineseControl(x,1997) & ReturnToMacau(x,1999))) -> PlaudedForReaffirmationOfReformProgram(x))", "all x.((DengXiaoping(x) & SouthernTours(x,92) & ReversionOfHongKongToChineseControl(x,1997) & ReturnOfMacau(x,99)) -> PlaudedFor(x))", "all x.((DengXiaoping(x) & SouthernTour(x,1992) & ReversionToChineseControl(x,1997) & ReturnToMacau(x,1999)) -> Praised(x))"]}
{"id": "folio_train_900", "nl": "As the party's Secretary-General under Mao and Vice Premier in he 1950s, Deng Xiaoping presided over the Anti-Rightist Campaign launched by Mao.", "fol": "(ServedAsPartysSecretaryGeneral(Dengxiaoping) & UnderLeadershipOf(Dengxiaoping,Mao) & ServedAsVicePremier(Dengxiaoping) & PresidedOverCampaign(Dengxiaoping,Antirightistcampaign) & CampaignLaunchedBy(Antirightistcampaign,Mao))", "prediction": ["(SecretaryGeneral(Mao) & VicePremier(Mao) & 1950s(Mao) & VicePremier(Mao)) & DengXiaoping(Deng) & AntiRightistCampaign(Deng))", "Als SecretaryGeneralUnderMaoAndVicePremierInHe50s(DengXiaoping) presided overAntiRightistCampaign(DengXiaoping)", "Als SecretaryGeneral(SecretaryGeneral(SecretaryGeneral(SecretaryGeneral(SecretaryGeneral) & UnderMao(SecretaryGeneral) & VicePremier(SecretaryGeneral) & InThe50s(SecretaryGeneral(SecretaryGeneral) & UnderMao(SecretaryGeneral)) & PresidedOverAntiRightistCampaign(SecretaryGeneral) & LaunchedByMao(Secretary", "All x y.((Party(x) & SecretaryGeneral(x) & UnderMao(x) & VicePremier(x) & 1950s(x)) -> PresidedOverAntiRightistCampaign(x,y))", "(SecretaryGeneralUnderMao(Mao) & VicePremierInHis50s(Mao) & DengXiaoping(Deng))", "During the 1950s, as SecretaryGeneral(s) & VicePremier(s) & Mao(s) & DengXiaoping(x) & AntiRightistCampaign(x))", "DengXiaoping (SecretaryGeneralUnderMao(x) & VicePremierInHe50s(x)) presided overAntiRightistCampaign(x))", "During the 1950s, as SecretaryGeneral of Party(x) & VicePremier(x) & Mao(x) & DengXiaoping(x) & AntiRightistCampaign(x))", "(SecretaryGeneralUnder(Mao) & VicePremierIn(Mao) & 1950s(Mao) & DengXiaoping(Deng))", "(SecretaryGeneral(Mao) & VicePremier(Mao) & 1950s(Mao) & DengXiaoping(Deng) & AntiRightistCampaign(Deng))", "As SecretaryGeneral(x) & UnderMao(x) & VicePremier(x) & InHe 1950s(x) & AntiRightistCampaign(x))", "During the 1950s, when Mao was SecretaryGeneral and Vice Premier, Deng Xiaoping presided over the AntiRightistCampaign.", "(PartySecretaryGeneralUnderMao(x) & VicePremierInHe50s(x)) & DengXiaopingPresidedOverAntiRightistCampaign(x))", "In the 1950s, as SecretaryGeneral of Party(x) & UnderMao(x) & VicePremier(x) & AntiRightistCampaign(x))", "Als SecretaryGeneralUnder(x,Mao) & VicePremierIn(x,50s) presided overAntiRightistCampaign(x))", "(SecretaryGeneral(Mao) & VicePremier(Mao) & ServedInThe50s(Mao) & PresidedOverAntiRightistCampaign(Mao))"]}
{"id": "folio_train_901", "nl": "Deng Xiaoping became instrumental in China's economic reconstruction following the disastrous Great Leap Forward (1958\u20131960).", "fol": "(InstrumentalInEconomicReconstruction(Dengxiaoping,Chinaseconomicreconstruction) & FollowingEvent(Chinaseconomicreconstruction,Greatleapforward) & CharacterizedAsDisastrous(Greatleapforward))", "prediction": ["(InitiativeInChinasEconomicReconstruction(DengXiaoping) & GreatLeapForward(Disaster(DengXiaoping,58) & GreatLeapForward(DengXiaoping,1960))", "all x y.((DengXiaoping(x) & GreatLeapForward(y)) -> InstrumentalInChinasEconomicReconstruction(x,y))", "(InfluentialInChinasEconomicReconstruction(DengXiaoping) & GreatLeapForward(Disaster(DengXiaoping,58) & GreatLeapForward(DengXiaoping,1960))", "DengXiaoping became instrumental in China's economic reconstruction following the disastrous GreatLeapForward(58,1960))", "-(DengXiaoping(x) & GreatLeapForward(x) & (1958-1960)))", "Deng Xiaoping became instrumental in China's economic reconstruction following the disastrous GreatLeapForward(x,58) & 1960(x))", "((DengXiaoping(x) & GreatLeapForward(x)) & GreatLeapForward(x)) -> InstrumentalInChinasEconomicReconstruction(x))", "all x.((DengXiaoping(x) & GreatLeapForward(x)) -> InstrumentalInChinasEconomicReconstruction(x))", "(InitiativeInReconstruction(DengXiaoping) & GreatLeapForward(Disaster(DengXiaoping,1958) & GreatLeapForward(DengXiaoping,1960))", "During the GreatLeapForward(58\u20131960) DengXiaoping became instrumental in China's EconomicReconstruction(x))", "all x y.((DengXiaoping(x) & GreatLeapForward(y) & (1958-1960)) -> InstrumentalInChinasEconomicReconstruction(x,y))", "(ImportantInChinasEconomicReconstruction(DengXiaoping) & GreatLeapForward(Disastrous) & (1958-1960)))", "-(DengXiaoping(x) & GreatLeapForward(x,1958)) -> InstrumentalInChinasEconomicReconstruction(x,1960))", "Deng Xiaoping became instrumental in China's economic reconstruction following the disastrous GreatLeapForward (1958\u20131960))", "DengXiaoping became instrumental in China's economic reconstruction following the disastrous GreatLeapForward(x))", "deng xiaoping became instrumental in China's economic reconstruction following the disastrous GreatLeapForward(x,58,1960))"]}
{"id": "folio_train_902", "nl": "Mao Zedong died in 1976.", "fol": "DiedInYear(Mao,Y1976)", "prediction": ["(MaoZedong(Mao) & DiedIn(Mao,76))", "Mao Zedong (Mao) & DiedIn(Mao,76))", "(Death(MaoZedong,76))", "MaoZedong(Mao) diedIn(MaoZedong,76))", "Mao Zedong (Mao) & DiedInSecond(Mao))", "-(MaoZedong(x) & Death(x, 1976))", "all x.(MaoZedong(x) -> DiedIn(x, 1976))", "(MamoZedong(Mao) & DiedIn(Mao,Second,1996))", "(1976) -> MaoZedong(Mao))", "MaoZedong (Mao) & DiedIn(x, 1976))", "Mao Zedong died in 1976.", "(Death(MaoZedong,76))", "all x.(MamoZedong(x) -> DiedInSecond(x,1996))", "Mao Zedong (died in 1976))", "(1976) -> MaoZedong(Mao))", "(Death(MaoZedong, 1976))"]}
{"id": "folio_train_903", "nl": "After Mao Zedong's death, Deng Xiaoping gradually rose to supreme power.", "fol": "GraduallyRoseToPower(Dengxiaoping,Supremepower)", "prediction": ["(After MaoZedong's Death, DengXiaopingRisesToSupremePower(x))", "all x y.((DengXiaoping(x) & MaoZedong(y)) -> (RisesToSupremePower(x,y)))", "all x.((DengXiaoping(x) & MaoZedong(x)) -> SufficientPower(x))", "(After MaoZedongsDeath(DengXiaoping) & SufficientPower(DengXiaoping))", "-MaoZedong(MaoZedong) Died(x) & DengXiaoping(x) & SufficientPower(x))", "Nach MaoZedong's Death, DengXiaoping rose to supremepower.", "Nach MaoZedongsDeath, DengXiaoping rose to supremepower.", "-(MaoZedong(x) & DengXiaoping(x)) -> SufficientPower(x))", "DengXiaoping rose to supremepower.", "(After MaoZedong's Death(DengXiaoping) & SufficientPower(DengXiaoping))", "All x.((DengXiaoping(x) & MaoZedongsDeath(x)) -> SufficientPower(x))", "(MaoZedong(MaoZedong) Death(MaoZedong) & DengXiaoping(DengXiaoping))", "(After MaoZedong's Death(DengXiaoping) -> EventuallyRisesToSupremePower(DengXiaoping))", "Nach MaoZedongsDeath, DengXiaoping raised to supremepower.", "Nach MaoZedong's Death, DengXiaoping RanksToSupremePower(x))", "Upon MaoZedong's death, DengXiaoping rose to supremepower."]}
{"id": "folio_train_904", "nl": "The paramount leader of the PRC was also the vice premier.", "fol": "exists x.(ServedAsParamountLeader(x,Prc) & ServedAsVicePremier(x))", "prediction": ["all x.((Principal(x) & Primal(x)) -> VicePrimary(x))", "all x.(VicePremier(x) -> (SecondaryLeader(x) & VicePremier(x)))", "all x y.((Principal(x) & PRC(y)) -> VicePrimier(x,y))", "all x.((PRC(x) & PrimalLeader(x)) -> VicePrimier(x))", "the paramountleader(PRC) & VicePrimier(PRC)", "-(SecondaryLeader(PRC) & VicePrimier(PRC))", "(VicePremier(Principal) & Primal(Principal))", "(SecondaryLeader(PRC) & VicePrimier(PRC))", "(VicePrimary(PRC) & Primal(PRC))", "(VicePremier(secondaryLeader(s) & VicePremier(s))", "-VicePremier(-PRC)", "the paramountleader(PRC) & VicePremier(VPRC)", "all x.((Principal(x) & SupremeLeader(x)) -> VicePrincipal(x))", "all x y.((PRC(x) & SupremeLeader(x,y)) -> VicePremier(x,y))", "(SecondaryLeader(PRC) & VicePremier(PRC))", "-VicePrimier(-PRC)"]}
{"id": "folio_train_905", "nl": "Deng Xiaoping presided over something launched by someone he was under.", "fol": "exists x y.(PresidedOverCampaign(Dengxiaoping,x) & CampaignLaunchedBy(x,y) & UnderLeadershipOf(Dengxiaoping,y))", "prediction": ["all x y.((DengXiaoping(x) & Person(y)) -> PresidedOver(x,y))", "DengXiaoping presided over something launched by someone he wasUnder.", "(PresidedOver(DengXiaoping) & LaunchedBy(DengXiaoping))", "all x.((DengXiaoping(x) & LaunchedBy(x,y)) -> PresidedOver(x,y))", "Deng Xiaoping presided over something launched by someone he wasunder.", "(PresidedOver(DengXiaoping) -> Under(DengXiaoping))", "-(DengXiaoping(x) & Someone(x)) -> PresidedOver(x,y))", "all x y.((DengXiaoping(x) & Person(y)) -> PresidedOver(x,y))", "DengXiaoping presided over something launchedbysomeoneHeHesUnder(x)", "all x.((DengXiaoping(x) & Under(x)) -> PresidedOver(x,y))", "(PresidedOver(DengXiaoping,something) & Under(DengXiaoping,something))", "Deng Xiaoping presided over something launched by someone he wasUnder.", "DengXiaoping presided over something launched by someone he wasunder.", "all x y.((DengXiaoping(x) & Person(y)) -> PresidedOver(x,y))", "deng xiaoping presided over something launchedbysomeonehewasunder(x)", "DengXiaoping presided over something launchedBySomeoneHeHelen(x)"]}
{"id": "folio_train_906", "nl": "The person instrumental in china's economic reconstruction gradually rose to supreme power.", "fol": "exists x.(InstrumentalInEconomicReconstruction(x,Chinaseconomicreconstruction) & GraduallyRoseToPower(x,Supremepower))", "prediction": ["all x.((Person(x) & InstrumentalInChinasEconomicReconstruction(x)) -> SufficientPower(x))", "all x y.((Person(x) & InstrumentalInChinasEconomicReconstruction(x)) -> SufficientPower(y))", "all x y.((Person(x) & InstrumentalInChineseEconomicReconstruction(x)) -> SufficientPower(x,y))", "the person instrumental in china's economic reconstruction rose to supremepower.", "all x.((Person(x) & InstrumentalInChineseEconomicReconstruction(x)) -> SufficientPower(x))", "(InstrumentalInChinasEconomicReconstruction(Person) & RosedToSupremePower(Person))", "all x y z.((Person(x) & IndicatorInChineseEconomicReconstruction(x) & Person(y) & InChineseEconomicReconstruction(y,z)) -> SufficientPower(z))", "-InstrumentalInChinasEconomicReconstruction(p) & EventuallyRisesToSupremePower(p))", "all x.(InstrumentalInChinasEconomicReconstruction(x) -> SufficientPower(x))", "(InstrumentalInChinasEconomicReconstruction(Person,Chinese) & RosesToSupremePower(Person,Chinese))", "all x y.((Person(x) & InstrumentalInChinasEconomicReconstruction(x) & ProgressivelyRisesToSupremePower(x)) -> InfluentialInChina(x,y))", "all x y.((Person(x) & IndicatorInChineseEconomicReconstruction(x)) -> EventuallyRisesToSupremePower(x))", "all x.(InstrumentalInChinasEconomicReconstruction(x) -> EventuallyRisesToSupremePower(x))", "all x.((Person(x) & InstrumentalInChinasEconomicReconstruction(x)) -> SufficientPower(x))", "all x.((Person(x) & IndicativeInChinasEconomicReconstruction(x)) -> SufficientPower(x))", "all x y.((Person(x) & InstrumentalInChineseEconomicReconstruction(x)) -> SufficientPower(y))"]}
{"id": "folio_train_907", "nl": "All imaginative processes are produced in human brains.", "fol": "all x.(ImaginativeProcess(x) -> ProducedInHumanBrains(x))", "prediction": ["all x.(ImaginativeProcess(x) -> ProducedInHumanBrains(x))", "all x y.((ImaginativeProcess(x) & HumanBrain(y)) -> ProducedIn(x,y))", "all x.(ImaginativeProcess(x) -> ProducedInHumanBrain(x))", "all x y.((ImaginativeProcess(x) & HumanBrain(y)) -> ProducedIn(x,y))", "(all x.(ImaginativeProcess(x) -> ProducedInHumanBrains(x))", "all x.(ImaginativeProcess(x) -> ProducedInHumanBrains(x))", "(all x.(ImaginativeProcess(x) -> ProducedInHumanBrains(x))", "all x y.((ImaginativeProcess(x) & HumanBrain(y)) -> ProducedIn(x,y))", "all x.(ImaginativeProcess(x) -> ProducedInHumanBrain(x))", "all x.(ImaginativeProcess(x) -> ProducedInHumanBrains(x))", "all x y.((ImaginativeProcess(x) & HumanBody(y)) -> ProducedIn(x,y))", "all x.(ImaginativeProcess(x) -> ProducedInHumanBrains(x))", "all x.(ImaginativeProcess(x) -> ProducedInHumanBody(x))", "all x y.((ImaginativeProcess(x) & HumanBrain(y)) -> ProducedIn(x,y))", "all x.(ImaginativeProcess(x) -> ProducedInHumanBrains(x))", "all x.(ImaginativeProcesses(x) -> ProducedInHumanBrains(x))"]}
{"id": "folio_train_908", "nl": "All science-fiction is from an imaginative process.", "fol": "all x.(ScienceFiction(x) -> ImaginativeProcess(x))", "prediction": ["all x.(ScienceFiction(x) -> FromImaginativeProcess(x))", "all x.(ScientificFiction(x) -> FromImaginativeProcess(x))", "all x.(ScienceFiction(x) -> FromImaginativeProcess(x))", "all x y.((ScientificFiction(x) & ImaginativeProcess(y)) -> From(x,y))", "all x.(ScientificFiction(x) -> FromImaginativeProcess(x))", "all x y.((ScienceFiction(x) & CreativeProcess(y)) -> From(x,y))", "(all x.(ScienceFiction(x) -> FromImaginativeProcess(x))", "all x.(ScienceFiction(x) -> FromImaginativeProcess(x))", "all x.(ScienceFiction(x) -> IllusionaryProcess(x))", "all x.(ScientificFiction(x) -> FromImaginativeProcess(x))", "(all x.(ScienceFiction(x) -> FromImaginativeProcess(x))", "all x y.((ScienceFiction(x) & CreativeProcess(y)) -> From(x,y))", "all x.(ScienceFiction(x) -> (ImaginativeProcess(x) & From(x,y)))", "all x.(ScienceFiction(x) -> ImaginativeProcess(x))", "all x.(ScientificFiction(x) -> ImaginativeProcess(x))", "All x.(ScientificFiction(x) -> FromImaginativeProcess(x))"]}
{"id": "folio_train_909", "nl": "Either science-fiction or fact. ", "fol": "all x.(ScienceFiction(x) | Fact(x))", "prediction": ["(ScienceFiction(science) | Fact(science))", "(ScientificFiction(ScientificFiction) | Fact(ScientificFiction))", "all x.((ScienceFiction(x) | Fact(x)) -> (ScientificFiction(x) | Fact(x)))", "exists x.(ScienceFiction(x) | Fact(x))", "(ScienceFiction(science) | Fact(science))", "all x.((ScientificFiction(x) | Fact(x)) -> (ScientificFiction(x) | Fact(x)))", "all x.(ScientificFiction(x) | Fact(x))", "all x y.((ScienceFiction(x) | Fact(y)) -> (ScientificFiction(x) | Fact(y)))", "all x.((ScienceFiction(x) | Fact(x)) -> (Scientific(x) | Fact(x)))", "(ScientificFiction(s) | Fact(s))", "((ScienceFiction(science) | Fact(science)))", "exists x.(ScienceFiction(x) | Fact(x))", "(ScienceFiction(science) | Fact(science))", "exists x.(ScienceFiction(x) | Fact(x))", "(ScienceFiction(science) | Fact(fact))", "exists x.(ScienceFiction(x) | Fact(x))"]}
{"id": "folio_train_910", "nl": "No facts are proven to be false.", "fol": "all x.(Fact(x) -> -ProvenToBeFalse(x))", "prediction": ["-exists x.(Fact(x) & False(x))", "all x.(Fact(x) -> -ProvenFalse(x))", "-exists x.(Fact(x) & False(x))", "(exists x.(Fact(x) & False(x)) & -Proven(x))", "all x.(Fact(x) -> -ProvenFalse(x))", "all x.((Fact(x) & False(x)) -> -ProvenToBe(x))", "-exists x.(Fact(x) & ProvenFalse(x))", "all x.(Fact(x) -> -ProvenFalse(x))", "all x.(Fact(x) -> -False(x))", "-exists x.(Fact(x) & False(x))", "all x.(Fact(x) -> -ProvenToBeFalse(x))", "-exists x.(Fact(x) & ProvenFalse(x))", "all x.(Fact(x) -> -False(x))", "-exists x.(Fact(x) & False(x))", "-exists x.(Factual(x) & False(x))", "-exists x.(Fact(x) & ProvenFalse(x))"]}
{"id": "folio_train_911", "nl": "Dune is a science-fiction or proven to be false.", "fol": "(ScienceFiction(Dune) | ProvenToBeFalse(Dune))", "prediction": ["all x.(Dune(x) -> (ScienceFiction(x) | ProvenToBeFalse(x)))", "(ScientificFiction(Dune) | ProvenToBeFalse(Dune))", "all x.(Dune(x) -> (ScienceFiction(x) | ProvenToBeFalse(x)))", "all x.(Dune(x) -> (ScienceFiction(x) | ProvenToBeFalse(x)))", "Dune (ScienceFiction(d) | ProvenToBeFalse(d)))", "(ScientificFiction(Dune) | ProvenFalse(Dune))", "(ScienceFiction(dune) | ProvenToBeFalse(dune)))", "all x y.((Dune(x) & ScienceFiction(y)) | ProvenToBeFalse(x,y))", "all x.(Dune(x) -> (ScienceFiction(x) | False(x)))", "exists x.(Dune(x) & (ScienceFiction(x) | ProvenFalse(x)))", "all x.(Dune(x) -> (ScientificFiction(x) | ProvenToBeFalse(x)))", "exists x.(Dune(x) & (ScienceFiction(x) | ProvenToBeFalse(x)))", "all x.(Dune(x) -> (ScienceFiction(x) | ProvenFalse(x)))", "(ScienceFiction(dune) | ProvenToBeFalse(dune))", "exists x.(Dune(x) & (ScientificFiction(x) | ProvenFalse(x)))", "exists x.(Dune(x) & (ScienceFiction(x) | ProvenFalse(x)))"]}
{"id": "folio_train_912", "nl": "Dune is a fact.", "fol": "Fact(Dune)", "prediction": ["all x.(Dune(x) -> Fact(x))", "Dune is a fact.", "all x.(Dune(x) -> Fact(x))", "(Factual(Dune) & Fact(Dune))", "Dune is a Factual(Dune,Fact)", "(Fact(Dune) & Fact(Dune))", "Dune is Factual(Dune,Fact)", "all x.(Dune(x) -> Fact(x))", "Dune is a fact.", "all x.(Dune(x) -> Fact(x))", "Dune is Factual(Dune)", "exists x.(Dune(x) & Fact(x))", "Dune is a Fact.", "Dune is aFact(dune)", "all x.(Dune(x) -> Fact(x))", "Dune is Factual(dune)"]}
{"id": "folio_train_913", "nl": "Dune is produced in human brains and is an imaginative process.", "fol": "(ProducedInHumanBrains(Dune) & ImaginativeProcess(Dune))", "prediction": ["all x.(Dune(x) -> (ProducedInHumanBrains(x) & ImaginativeProcess(x)))", "all x y.((Dune(x) & HumanBrain(y)) -> (ProducedIn(x,y) & ImaginativeProcess(x)))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) & ImaginativeProcess(x)))", "(ProducedInHumanBrains(Dune) & ImaginativeProcess(Dune))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) & ImaginativeProcess(x)))", "all x y z.((Dune(x) & HumanBody(y) & Creativity(z)) -> (ProducedIn(x,y) & ImaginativeProcess(x)))", "all x y.((Dune(x) & HumanBrain(y)) -> (ProducedIn(x,y) & ImaginativeProcess(x)))", "all x y.((Dune(x) & HumanBrain(y)) -> (ProducedIn(x,y) & ImaginativeProcess(x)))", "(ProducedInHumanBrains(dune) & ImaginativeProcess(dune))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) & ImaginativeProcess(x)))", "exists x.(Dune(x) & ProducedInHumanBrains(x) & ImaginativeProcess(x))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) & ImaginativeProcess(x)))", "(ProducedInHumanBrains(Dune) & ImaginativeProcess(Dune))", "(all x.(Dune(x) -> ProducedInHumanBrain(x)) & ImaginativeProcess(x))", "exists x.(Dune(x) & ProducedInHumanBrains(x) & ImaginativeProcess(x))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) & ImaginativeProcess(x)))"]}
{"id": "folio_train_914", "nl": "Dune is either produced in human brains or an imaginative process.", "fol": "(ProducedInHumanBrains(Dune) | ImaginativeProcess(Dune))", "prediction": ["all x.(Dune(x) -> (ProducedInHumanBrains(x) | ImaginativeProcess(x)))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) | ImaginativeProcess(x)))", "(ProducedInHumanBrains(dune) | ImaginativeProcess(dune)))", "all x y.((Dune(x) & HumanBrain(y)) -> (ProducedIn(x,y) | ImaginativeProcess(x)))", "(exists x.(Dune(x) & ProducedInHumanBrains(x)) | exists y.(ImaginativeProcess(y) & ProducedIn(x,y))))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) | ImaginativeProcess(x)))", "(exists x.(Dune(x) & HumanBrain(x)) | exists y.(ImaginativeProcess(y) & ProducedIn(x,y))))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) | ImaginativeProcess(x)))", "all x y.((Dune(x) & HumanBrain(y)) | ImaginativeProcess(x))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) | ImaginativeProcess(x)))", "all x y.((Dune(x) & HumanBrain(y)) | ImaginativeProcess(x))", "exists x.(Dune(x) & (ProducedInHumanBrains(x) | ImaginativeProcess(x)))", "exists x.(Dune(x) & (ProducedInHumanBrain(x) | ImaginativeProcess(x)))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) | ImaginativeProcess(x)))", "exists x.(Dune(x) & (ProducedInHumanBrains(x) | CreatedInImaginativeProcess(x)))", "exists x.(Dune(x) & (ProducedInHumanBrains(x) | CreatedInImaginativeProcess(x)))"]}
{"id": "folio_train_915", "nl": "Dune is produced in human brains and is science fiction.", "fol": "(ProducedInHumanBrains(Dune) & ScienceFiction(Dune))", "prediction": ["all x.(Dune(x) -> (ProducedInHumanBrains(x) & ScienceFiction(x)))", "(ProducedInHumanBrains(Dune) & ScienceFiction(Dune))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) & ScienceFiction(x)))", "all x y.((Dune(x) & HumanBrain(y)) -> (ProducedIn(x,y) & ScienceFiction(x)))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) & ScienceFiction(x)))", "exists x.(Dune(x) & ProducedInHumanBrains(x) & ScienceFiction(x))", "(ProducedInHumanBrains(dune) & ScienceFiction(dune))", "(ProducedInHumanBrains(Dune) & ScienceFiction(Dune))", "all x y.((Dune(x) & HumanBrain(y)) -> (ProducedIn(x,y) & ScienceFiction(x)))", "(all x.(Dune(x) -> ProducedInHumanBrains(x)) & ScienceFiction(x))", "all x y.((Dune(x) & HumanBrain(y)) -> (ProducedIn(x,y) & ScienceFiction(x)))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) & ScienceFiction(x)))", "exists x.(Dune(x) & ProducedInHumanBrains(x) & ScienceFiction(x))", "exists x.(Dune(x) & ProducedInHumanBrains(x) & ScienceFiction(x))", "(ProducedInHumanBrains(Dune) & ScienceFiction(Dune))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) & ScienceFiction(x)))"]}
{"id": "folio_train_916", "nl": "Dune is either produced in human brains or science-fiction.", "fol": "(ProducedInHumanBrains(Dune) | ScienceFiction(Dune))", "prediction": ["all x.(Dune(x) -> (ProducedInHumanBrains(x) | ProducedInScienceFiction(x)))", "(exists x.(Dune(x) & HumanBrain(x)) | exists y.(ScienceFiction(y) & ProducedIn(x,y))))", "(ProducedInHumanBrains(dune) | ProducedInScienceFiction(dune))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) | ProducedInScienceFiction(x)))", "all x y.((Dune(x) & HumanBrain(y)) | ScienceFiction(x))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) | ProducedInScienceFiction(x)))", "(ProducedInHumanBrains(Dune) | ProducedInScienceFiction(Dune))", "exists x.(Dune(x) & (ProducedInHumanBrains(x) | ProducedInScienceFiction(x)))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) | ProducedInScienceFiction(x)))", "all x y.((Dune(x) & HumanBrain(y)) | ScienceFiction(x))", "all x y.((Dune(x) & HumanBrain(y)) | ScienceFiction(x))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) | ProducedInScientificFiction(x)))", "exists x.(Dune(x) & (ProducedInHumanBrains(x) | ProducedInScienceFiction(x)))", "exists x.(Dune(x) & ((ProducedInHumanBrains(x) | ProducedInScienceFiction(x))))", "exists x.(Dune(x) & (ProducedInHumanBrains(x) | ProducedInScienceFiction(x)))", "exists x.(Dune(x) & (ProducedInHumanBrains(x) | ProducedInScienceFiction(x)))"]}
{"id": "folio_train_917", "nl": "If Dune is produced in human brains and is an imaginative process, then Dune is not produced in human brains and science-fiction.", "fol": "((ProducedInHumanBrains(Dune) & ImaginativeProcess(Dune)) -> (-ProducedInHumanBrains(Dune) & ScienceFiction(Dune)))", "prediction": ["all x.((Dune(x) & ProducedInHumanBrains(x) & ImaginativeProcess(x)) -> -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x))", "all x.((Dune(x) & ProducedInHumanBrains(x) & ImaginativeProcess(x)) -> -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x))", "(all x.((Dune(x) & ProducedInHumanBrains(x) & ImaginativeProcess(x)) -> -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x)))", "all x y.((Dune(x) & HumanBrain(y) & ProducedIn(x,y) & ImaginativeProcess(x)) -> -(Dune(x) & HumanBrain(y) & ScienceFiction(x)))", "all x.((Dune(x) & ProducedInHumanBrains(x) & ImaginativeProcess(x)) -> -(Dune(x) & ProducedInHumanBrains(x) & ScienceFiction(x)))", "all x.((Dune(x) & ProducedInHumanBrains(x) & ImaginativeProcess(x)) -> -(Dune(x) & ProducedInHumanBrains(x) & ScienceFiction(x)))", "all x y.((Dune(x) & HumanBrain(y) & ProducedIn(x,y) & ImaginativeProcess(x)) -> -(Dune(x) & HumanBrain(y) & ScienceFiction(y)))", "(all x.((Dune(x) & ProducedInHumanBrains(x)) -> -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x)))", "(all x.((Dune(x) & HumanBrain(x)) -> -(Dune(x) & HumanBrain(x) & ScienceFiction(x))))", "all x.((Dune(x) & ProducedInHumanBrains(x) & ImaginativeProcess(x)) -> -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x))", "all x.((Dune(x) & ProducedInHumanBrains(x) & ImaginativeProcess(x)) -> -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x))", "all x y.((Dune(x) & HumanBrain(y) & ProducedIn(x,y) & ImaginativeProcess(x)) -> -ProducedIn(x,y))", "all x.((Dune(x) & ProducedInHumanBrains(x) & CreativeProcess(x)) -> (-ProducedInHumanBrains(x) & -ProducedInScienceFiction(x)))", "all x.((Dune(x) & ProducedInHumanBrains(x) & ImaginativeProcess(x)) -> -(Dune(x) & ProducedInHumanBrains(x) & ScienceFiction(x)))", "exists x.(Dune(x) & ProducedInHumanBrains(x) & CreativeProcess(x))", "all x.((Dune(x) & ProducedInHumanBrains(x) & ImaginativeProcess(x)) -> -(DuneProducedInHumanBrains(x) & ScienceFiction(x)))"]}
{"id": "folio_train_918", "nl": "If Dune is either a fact and produced in human brains, or neither a fact nor produced in human brains, then Dune is produced in human brains and science-fiction.", "fol": "(((Fact(Dune) & ProducedInHumanBrains(Dune)) | (-Fact(Dune) & -ProducedInHumanBrains(Dune))) -> (ProducedInHumanBrains(Dune) & ScienceFiction(Dune)))", "prediction": ["all x.((Dune(x) & (Factual(x) & ProducedInHumanBrains(x) | -Factual(x) & ProducedInHumanBrains(x))) -> (ProducedInHumanBrains(x) & ScienceFiction(x)))", "all x.((Dune(x) & (Factual(x) & ProducedInHumanBrains(x) | -Factual(x) & ProducedInHumanBrains(x))) -> (ProducedInHumanBrains(x) & ScienceFiction(x)))", "all x.((Dune(x) & (Factual(x) & ProducedInHumanBrains(x)) | -Factual(x) & ProducedInHumanBrains(x))) -> (ProducedInHumanBrains(x) & ScienceFiction(x)))", "all x y.((Dune(x) & HumanBrain(y)) -> ((Factual(x) & ProducedIn(x,y)) | -Factual(x) & ProducedIn(x,y))))", "all x.((Dune(x) & ((Factual(x) & ProducedInHumanBrains(x)) | -Factual(x) & ProducedInHumanBrains(x))) -> (ProducedInHumanBrains(x) & ScienceFiction(x)))", "((Factual(Dune) & ProducedInHumanBrains(Dune)) | (-Factual(Dune) & ProducedInHumanBrains(Dune))))", "all x.((Dune(x) & (Factual(x) & ProducedInHumanBrains(x) | -Factual(x) & ProducedInHumanBrains(x))) -> (ProducedInHumanBrains(x) & ScienceFiction(x)))", "all x y.((Dune(x) & HumanBrains(y)) -> (Factual(x) & ProducedIn(x,y) | -Factual(x) & ProducedIn(x,y)))", "all x.((Dune(x) & ((Factual(x) & ProducedInHumanBrains(x)) | -Factual(x) & ProducedInHumanBrains(x))) -> (ProducedInHumanBrains(x) & ScienceFiction(x)))", "all x.((Dune(x) & ((Factual(x) & ProducedInHumanBrains(x)) | -Factual(x) & ProducedInHumanBrains(x))) -> (ProducedInHumanBrains(x) & ScienceFiction(x)))", "(all x.((Dune(x) & Fact(x) & ProducedInHumanBrains(x)) | (-Factual(x) & ProducedInHumanBrains(x)))) -> (ProducedInHumanBrains(x) & ScienceFiction(x)))", "(all x.((Dune(x) & Fact(x) & ProducedInHumanBrains(x)) | (-Fact(x) & ProducedInHumanBrains(x)))) -> (ProducedInHumanBrains(x) & ScienceFiction(x)))", "all x.((Dune(x) & (Factual(x) & ProducedInHumanBrains(x) | -Factual(x) & ProducedInHumanBrains(x))) -> (ProducedInHumanBrains(x) & ScienceFiction(x)))", "exists x.(Dune(x) & ((Factual(x) & ProducedInHumanBrains(x)) | -Factual(x) & ProducedInHumanBrains(x)) | (-Factual(x) & ProducedInHumanBrains(x))))", "all x.(Dune(x) -> ((Factual(x) & ProducedInHumanBrains(x)) | (-Factual(x) & ProducedInHumanBrains(x)))))", "exists x.(Dune(x) & ((Factual(x) & ProducedInHumanBrains(x)) | -Factual(x) & ProducedInHumanBrains(x)) | (-Factual(x) & ProducedInHumanBrains(x))))"]}
{"id": "folio_train_919", "nl": "If Dune is science-fiction, then Dune is not produced in human brains and science-fiction.", "fol": "(ScienceFiction(Dune) -> (-ProducedInHumanBrains(Dune) & ScienceFiction(Dune)))", "prediction": ["all x.((Dune(x) & ScienceFiction(x)) -> -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x))", "all x.((Dune(x) & ScienceFiction(x)) -> -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x))", "all x.(ScientificFiction(x) -> -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x))", "-(ScienceFiction(d) & HumanBrains(d) & ScienceFiction(d)))", "(all x.((Dune(x) & ScienceFiction(x)) -> -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x)))", "all x.((Dune(x) & ScienceFiction(x)) -> -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x))", "exists x.(Dune(x) & ScienceFiction(x) & -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x))", "all x.((Dune(x) & ScienceFiction(x)) -> -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x))", "all x.(ScientificFiction(x) -> (-ProducedInHumanBrains(x) & -ProducedInScientificFiction(x)))", "all x.((Dune(x) & ScienceFiction(x)) -> -(ProducedInHumanBrains(x) & ProducedInScienceFiction(x)))", "(all x.((Dune(x) & ScienceFiction(x)) -> -(ProducedInHumanBrains(x) & ProducedInScienceFiction(x))))", "all x.((Dune(x) & ScienceFiction(x)) -> -(ProducedInHumanBrains(x) & ProducedInScienceFiction(x)))", "all x.(ScientificFiction(x) -> -ProducedInHumanBrainsAndScienceFiction(x))", "(all x.((Dune(x) & ScienceFiction(x)) -> -ProducedInHumanBrainsAndScienceFiction(x)))", "all x y.((Dune(x) & ScienceFiction(x)) -> (-ProducedInHumanBrains(y) & -ProducedInScienceFiction(y)))", "all x.((Dune(x) & ScienceFiction(x)) -> -(ProducedInHumanBrains(x) & ProducedInScienceFiction(x)))"]}
{"id": "folio_train_920", "nl": "If Dune is not produced in human brains and science-fiction, then Dune is neither an imaginative process nor proved to be false.", "fol": "((-ProducedInHumanBrains(Dune) & ScienceFiction(Dune)) -> (-ImaginativeProcess(Dune) & -ProvenToBeFalse(Dune)))", "prediction": ["all x.((Dune(x) & -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x)) -> (-ImaginativeProcess(x) & -ProvedToBeFalse(x)))", "all x.((Dune(x) & -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x)) -> -ImaginativeProcess(x) & -ProvedToBeFalse(x))", "(-ProducedInHumanBrainsAndScienceFiction(Dune)) -> -ImaginativeProcess(Dune) & -ProvedToBeFalse(Dune))", "(-ProducedInHumanBrainsAndScienceFiction(Dune)) -> (NeimaginativeProcess(Dune) & -ProvedToBeFalse(Dune)))", "-(ProducedInHumanBrains(Dune) & -ProducedInScienceFiction(Dune))", "all x.((Dune(x) & -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x)) -> -ImaginativeProcess(x) & -ProvenToBeFalse(x))", "-(ProducedInHumanBrains(x) & ProducedInScienceFiction(x)) -> (NeimaginativeProcess(x) & -ProvenToBeFalse(x)))", "all x y.((Dune(x) & HumanBrains(y) & ScienceFiction(x)) -> (-ImaginativeProcess(x,y) | False(x,y)))", "(-ProducedInHumanBrains(Dune) & -ProducedInScienceFiction(Dune))", "exists x.(Dune(x) & (-ProducedInHumanBrains(x) & -ProducedInScienceFiction(x)) -> (-ImaginativeProcess(x) & -ProvedToBeFalse(x)))", "all x.((Dune(x) & -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x)) -> (NegativeProcess(x) & -ProvenToBeFalse(x)))", "all x.((Dune(x) & -ProducedInHumanBrainsAndScienceFiction(x)) -> (-ImaginativeProcess(x) & -ProvenToBeFalse(x)))", "all x.((Dune(x) & -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x)) -> (NegativeProcess(x) & -ProvenToBeFalse(x)))", "all x.((Dune(x) & -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x)) -> -ImaginativeProcess(x) & -ProvenToBeFalse(x))", "all x.((Dune(x) & -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x)) -> (NegativeProcess(x) & -ProvedToBeFalse(x)))", "all x.((Dune(x) & -ProducedInHumanBrainsAndScienceFiction(x)) -> (-ImaginativeProcess(x) & -True(x)))"]}
{"id": "folio_train_921", "nl": "If Dune is not an imaginative process and science-fiction, then Dune is neither produced in human brains nor an imaginative process.", "fol": "((-ImaginativeProcess(Dune) & ScienceFiction(Dune)) -> (-ProducedInHumanBrains(Dune) & -ImaginativeProcess(Dune)))", "prediction": ["all x.((Dune(x) & -ImaginativeProcess(x) & ScienceFiction(x)) -> (-ProducedInHumanBrains(x) & -ImaginativeProcess(x)))", "all x.((Dune(x) & -ImaginativeProcess(x) & ScienceFiction(x)) -> (-ProducedInHumanBrains(x) & -ImaginativeProcess(x)))", "(-ImaginativeProcess(Dune) & ScienceFiction(Dune)) -> (-ProducedInHumanBrains(Dune) & -ImaginativeProcess(Dune)))", "(-ImaginativeProcessAndScienceFiction(Dune)) -> -ProducedInHumanBrains(Dune) & -ImaginativeProcess(Dune))", "-(ImaginativeProcess(dune) & ScienceFiction(dune)) -> (-ProducedInHumanBrains(dune) & -ImaginativeProcess(dune)))", "all x.((Dune(x) & -ImaginativeProcess(x) & ScienceFiction(x)) -> -(ProducedInHumanBrains(x) | CreatedInImaginativeProcess(x))))", "all x.((Dune(x) & -ImaginativeProcess(x) & ScienceFiction(x)) -> -(ProducedInHumanBrains(x) | CreatedInImaginativeProcess(x)))", "(-ImaginativeProcess(Dune) & ScienceFiction(Dune))", "exists x.(Dune(x) & (-ImaginativeProcess(x) & ScienceFiction(x)) -> (-ProducedInHumanBrains(x) & -ImaginativeProcess(x)))", "all x.((Dune(x) & -ImaginativeProcess(x) & ScienceFiction(x)) -> (-ProducedInHumanBrains(x) & -ImaginativeProcess(x)))", "all x y.((Dune(x) & -ImaginativeProcess(x) & ScienceFiction(y)) -> (-ProducedInHumanBrains(x) & -ImaginativeProcess(x,y)))", "all x.((Dune(x) & -ImaginativeProcess(x) & ScienceFiction(x)) -> (-ProducedInHumanBrains(x) & -ImaginativeProcess(x)))", "all x.((Dune(x) & -ImaginativeProcess(x) & ScienceFiction(x)) -> -(ProducedInHumanBrains(x) | CreatedInImaginativeProcess(x)))", "all x.((Dune(x) & -ImaginativeProcess(x) & ScienceFiction(x)) -> -(ProducedInHumanBrains(x) | CreatedInImaginativeProcess(x)))", "all x.((Dune(x) & -ImaginativeProcess(x) & ScienceFiction(x)) -> (-ProducedInHumanBrains(x) & -ImaginativeProcess(x)))", "all x.((Dune(x) & -ImaginativeProcess(x) & ScienceFiction(x)) -> (-ProducedInHumanBrains(x) & -ImaginativeProcess(x)))"]}
{"id": "folio_train_922", "nl": "An American superhero comes from either DC universe or Marvel universe.", "fol": "all x.((IsSuperhero(x) & IsAmerican(x)) -> ((OriginatesFrom(x,DcUniverse) & -OriginatesFrom(x,MarvelUniverse)) | (-OriginatesFrom(x,DcUniverse) & OriginatesFrom(x,MarvelUniverse))))", "prediction": ["all x.(AmericanSuperhero(x) -> (ComesFromDCUniverse(x) | ComesFromMarvelUniverse(x)))", "all x.(AmericanSuperhero(x) -> (ComesFrom(x,DC) | ComesFrom(x,Marvel)))", "all x y.((AmericanSuperhero(x) & DCUniverse(y)) | MarvelUniverse(y)) -> ComesFrom(x,y))", "all x.((AmericanSuperhero(x) & (DCUniverse(x) | MarvelUniverse(x))) -> ComesFrom(x,y))", "all x.(Superhero(x) -> (ComesFromDCUniverse(x) | ComesFromMarvelUniverse(x)))", "all x.(AmericanSuperhero(x) -> (ComesFromDCUniverse(x) | ComesFromMarvelUniverse(x)))", "all x.(AmericanSuperhero(x) -> (DCUniverse(x) | MarvelUniverse(x)))", "(all x.(AmericanSuperhero(x) -> (DCUniverse(x) | MarvelUniverse(x))))", "all x y.((AmericanSuperhero(x) & DCUniverse(y) | MarvelUniverse(y)) -> ComesFrom(x,y))", "all x.(AmericanSuperhero(x) -> (ComesFromDCUniverse(x) | ComesFromMarvelUniverse(x)))", "all x.(AmericanSuperhero(x) -> (ComesFrom(x,DC) | ComesFrom(x,Marvel)))", "exists x.(Superhero(x) & (DCUniverse(x) | MarvelUniverse(x)))", "all x.(AmericanHero(x) -> (ComesFromDCUniverse(x) | ComesFromMarvelUniverse(x)))", "all x y.((AmericanSuperhero(x) & DCUniverse(y) | MarvelUniverse(y)) -> ComesFrom(x,y))", "all x y.((AmericanHero(x) & DCUniverse(y)) | MarvelUniverse(y)) -> ComesFrom(x,y))", "exists x.(Superhero(x) & (DCUniverse(x) | MarvelUniverse(x)))"]}
{"id": "folio_train_923", "nl": "Captain America is a superhero.", "fol": "IsSuperhero(CaptainAmerica)", "prediction": ["all x.(CaptainAmerica(x) -> Superhero(x))", "all x.(CaptainAmerica(x) -> Superhero(x))", "CaptainAmerica(Captain) & Superhero(Captain)", "CaptainAmerica(CaptainAmerica) -> Superhero(CaptainAmerica))", "(Superhero(CaptainAmerica) & Superhero(CaptainAmerica))", "all x.(CaptainAmerica(x) -> Superhero(x))", "(Superhero(CaptainAmerica) & Superhero(CaptainAmerica))", "All x.(CaptainAsia(x) -> Superhero(x))", "all x.(CaptainAmerica(x) -> Superhero(x))", "all x.(CaptainAsia(x) -> Superhero(x))", "(Superhero(CaptainAmerica) & Superman(CaptainAmerica))", "All x.(CaptainAvenger(x) -> Superhero(x))", "all x.(CaptainAmerica(x) -> Superhero(x))", "(Superhero(CaptainAmerica) | Superhero(CaptainAmerica)))", "All x.(CaptainAmerika(x) -> Superhero(x))", "all x.(CaptainAmerica(x) -> Superhero(x))"]}
{"id": "folio_train_924", "nl": "Captain America is an American.", "fol": "IsAmerican(CaptainAmerica)", "prediction": ["all x.(CaptainAmerica(x) -> American(x))", "(Asian(CaptainAmerica) & American(CaptainAmerica))", "All x.(CaptainAmerica(x) -> American(x))", "CaptainAmerica(CaptainAmerica) -> American(CaptainAmerica))", "CaptainAmerica(Captain) & American(Captain)", "(American(CaptainAmerica) & American(CaptainAmerica))", "all x.(CaptainAmerica(x) -> American(x))", "(American(CaptainAmerica) & American(CaptainAmerica) & American(CaptainAmerica))", "CaptainAmerica(Captain) & American(Captain)", "(Asian(CaptainAmerica) & American(CaptainAmerica))", "All x.(CaptainAmerica(x) -> American(x))", "all x.(CaptainAm\u00e9rica(x) -> American(x))", "all x.(CaptainAmerica(x) -> American(x))", "All x.(CaptainAmerica(x) -> American(x))", "All x.(CaptainAmerica(x) -> American(x))", "all x.(CaptainAmerica(x) -> American(x))"]}
{"id": "folio_train_925", "nl": "Captain America does not come from DC universe.", "fol": "-OriginatesFrom(CaptainAmerica,DcUniverse)", "prediction": ["(-ComesFromDCUniverse(CaptainAmerica))", "all x.(CaptainAmerica(x) -> -ComesFromDCUniverse(x))", "-(CaptainAmerica(CaptainAmerica) & DCUniverse(CaptainAmerica))", "CaptainAmerica -ComesFromDCUniverse(CaptainAmerica))", "-ComesFromDCUniverse(CaptainAmerica)", "all x.(CaptainAmerica(x) -> -DCUniverse(x))", "(-DCUniverse(CaptainAmerica))", ".(CaptainAmerica(x) & -DCUniverse(x))", "-(CaptainAmerica(CaptainAmerica) & DCUniverse(CaptainAmerica))", "CaptainAmerica -ComesFromDCUniverse(CaptainAmerica))", "all x.(CaptainAmerica(x) -> -ComesFromDCUniverse(x))", "(-ComesFromDCUniverse(CaptainAmerica))", "(Discontinues(CaptainAmerica,DC))", "All x.(CaptainAmerica(x) -> -DCUniverse(x))", "(-ComesFromDCUniverse(CaptainAmerica))", "-ComesFromDCUniverse(CaptainAmerica)"]}
{"id": "folio_train_926", "nl": "If a superhero is American, he speaks English.", "fol": "all x.((IsSuperhero(x) & IsAmerican(x)) -> SpeaksLanguage(x,English))", "prediction": ["all x.((Superhero(x) & American(x)) -> SpeaksEnglish(x))", "all x.(American(x) -> SpeaksEnglish(x))", "all x.((Superhero(x) & American(x)) -> SpeaksEnglish(x))", "all x.(American(x) -> SpeaksEnglish(x))", "all x.((Superhero(x) & American(x)) -> SpeaksEnglish(x))", "all x y.((Superhero(x) & American(x)) -> SpeaksEnglish(x))", "all x.(AmericanSuperhero(x) -> SpeaksEnglish(x))", "(all x.(American(x) -> SpeaksEnglish(x)))", "all x.((Superhero(x) & American(x)) -> SpeaksEnglish(x))", "all x.(American(x) -> SpeaksEnglish(x))", "(all x.(American(x) -> SpeaksEnglish(x)))", "all x.(American(x) -> SpeaksEnglish(x))", "all x.((Superhero(x) & American(x)) -> SpeaksEnglish(x))", "all x.(American(x) -> SpeaksEnglish(x))", "all x.((Superhero(x) & American(x)) -> SpeaksEngland(x))", "all x.(American(x) -> SpysEnglish(x))"]}
{"id": "folio_train_927", "nl": "A superhero speaks English or Spanish.", "fol": "all x.(IsSuperhero(x) -> (SpeaksLanguage(x,English) | SpeaksLanguage(x,Spanish)))", "prediction": ["all x.(Superhero(x) -> (SpeaksEnglish(x) | SpeaksSpanish(x)))", "all x.(Superhero(x) -> (SpeaksEnglish(x) | SpeaksSpanish(x)))", "all x y.((Superhero(x) & (English(y) | Spanish(y))) -> Speaks(x,y))", "all x.(Superhero(x) -> (SpeaksEnglish(x) | SpeaksSpanish(x)))", "all x y.((Superhero(x) & (SpeaksEnglish(x) | SpeaksSpanish(x))) -> Speaks(x,y))", "all x y.((Superhero(x) & (SpeaksEnglish(x,y) | SpeaksSpanish(x,y))) -> Speaks(x,y))", "all x y.((Superhero(x) & (English(y) | Spanish(y))) -> Speaks(x,y))", "all x.(Superhero(x) -> (SpeakEnglish(x) | SpeakSpanish(x)))", "exists x.(Superman(x) & (SpeaksEnglish(x) | SpeaksSpanish(x)))", "all x.(Superhero(x) -> (SpeaksEnglish(x) | SpeaksSpanish(x)))", "all x.(Superhero(x) -> (SpeaksEnglish(x) | SpeaksSpanish(x)))", "all x.(Superhero(x) -> (SpeakEarly(x) | SpeakSpanish(x)))", "exists x.(Superman(x) & (SpeaksEnglish(x) | SpeaksSpanish(x)))", "exists x.(Superhero(x) & (SpeakEnglish(x) | SpeakSpanish(x)))", "all x.(Superhero(x) -> (SpeaksEnglish(x) | SpeaksSpanish(x)))", "exists x.(Superhero(x) & (SpeaksEngland(x) | SpeaksSpanish(x)))"]}
{"id": "folio_train_928", "nl": "Captain America does not speak English.", "fol": "-SpeaksLanguage(CaptainAmerica,English)", "prediction": ["(-SpeaksEnglish(CaptainAmerica))", "all x.(CaptainAmerica(x) -> -SpeaksEnglish(x))", "CaptainAmerica -SpeaksEnglish(CaptainAmerica)", "(SpeakEnglish(CaptainAmerica) -> -SpeaksEnglish(CaptainAmerica))", "(-SpeakEnglish(CaptainAmerica))", "(-SpeaksEnglish(CaptainAmerica))", "all x.(CaptainAmerica(x) -> -SpeaksEnglish(x))", "-(CaptainAmerica(CaptainAmerica) | CaptainAmerica(CaptainAmerica)))", "CaptainAmerica -SpeaksEnglish(CaptainAmerica)", "(SpeakEnglish(CaptainAmerica) -> -SpeaksEnglish(CaptainAmerica))", "all x.(CaptainAmerica(x) -> -SpeaksEnglish(x))", "-SpeaksEnglish(CaptainAmerica)", "CaptainAmerica does notSpeakEnglish(CaptainAmerica)", "-SpeaksEnglish(CaptainAmerica)", "All x.(CaptainAmerica(x) -> -SpeaksEnglish(x))", "all x.(CaptainAmerica(x) -> -SpeakEnglish(x))"]}
{"id": "folio_train_929", "nl": "Captain America comes from Marvel universe.", "fol": "OriginatesFrom(CaptainAmerica,MarvelUniverse)", "prediction": ["all x.(CaptainAmerica(x) -> MarvelUniverse(x))", "all x y.((CaptainAmerica(x) & MarvelUniverse(y)) -> ComesFrom(x,y))", "(ComesFromMarvelUniverse(CaptainAmerica))", "CaptainAmerica(CaptainAmerica) -> ComesFromMarvelUniverse(CaptainAmerica))", "(MarvelUniverse(CaptainAmerica) -> ComesFrom(CaptainAmerica))", "CaptainAmerica(Captain) & MarvelUniverse(Captain))", "all x.(CaptainAmerica(x) -> MarvelUniverse(x))", "-MarvelUniverse(CaptainAmerica)", "comes from MarvelUniverse(CaptainAmerica)", "(ComesFromMarvelUniverse(CaptainAmerica))", "all x y.((CaptainAmerica(x) & MarvelUniverse(y)) -> ComesFrom(x,y))", "All x.(CaptainAmerica(x) -> ComesFromMarvelUniverse(x))", "(ComesFromMarvelUniverse(CaptainAmerica))", "all x y.((CaptainAmerica(x) & MarvelUniverse(y)) -> ComesFrom(x,y))", "All x.(CaptainAmerica(x) -> MarvelUniverse(x))", "All x.(CaptainAmerica(x) -> ComesFromMarvelUniverse(x))"]}
{"id": "folio_train_930", "nl": "Captain America speaks Spanish.", "fol": "SpeaksLanguage(CaptainAmerica,Spanish)", "prediction": ["all x.(CaptainAmerica(x) -> SpeaksSpanish(x))", "(SpeaksSpanish(CaptainAmerica) & Captain(CaptainAmerica))", "(SpeakesSpanish(CaptainAmerica) & Captain(CaptainAmerica))", "(Spanish(CaptainAmerica) & Speaks(CaptainAmerica))", "CaptainAmericaSpeaksSpanish(CaptainAmerica)", "all x.(CaptainAmerica(x) -> SpeaksSpanish(x))", "all x y.((CaptainAmerica(x) & Spanish(y)) -> Speaks(x,y))", "all x y.((Captain(x) & Spanish(y) & Speaks(x,y)) -> CaptainAmerica(x))", "(SpeaksSpanish(CaptainAmerica) & Captain(CaptainAmerica))", "-SpeaksSpanish(CaptainAmerica)", "(SpeakesSpanish(CaptainAmerica) & Captain(CaptainAmerica))", "all x.(CaptainAmerica(x) -> SpeaksSpanish(x))", "CaptainAmericaSpeaksSpanish(CaptainAmerica,SpeakSpanish)", "all x.(CaptainAmerica(x) -> SpeaksSpanish(x))", "All x.(CaptainAmerica(x) -> SpeaksSpanish(x))", "All x.(CaptainAmerica(x) -> SpeaksSpanish(x))"]}
{"id": "folio_train_931", "nl": "Robert Zimmer was born in Germany.", "fol": "BornInGermany(RobertZimmer)", "prediction": ["(Birth(RobertZimmer) & BornIn(RobertZimmer))", "RobertZimmer (bornInGermany)", "all x.(RobertZimmer(x) -> BornInGermany(x))", "Robert Zimmer was born in Germany.", "-BirthInGermany(RobertZimmer)", "Robert Zimmer (bornInGermany)", "(Birth(RobertZimmer) & BornIn(RobertZimmer))", "RobertZimmer (bornInGermany)", "RobertZimmer wurde in Deutschland geboren.", "(Birth(RobertZimmer) & BornIn(RobertZimmer,Germany))", "Robert Zimmer was born in Germany.", "RobertZimmer was born in Germany.", "Robert Zimmer (bornInGermany)", "(Birth(RobertZimmer,Germany))", "RobertZimmer (bornInGermany)", "Robert Zimmer was born in Germany."]}
{"id": "folio_train_932", "nl": "Robert Zimmer is an essayist.", "fol": "IsEssayist(RobertZimmer)", "prediction": ["(Essayist(RobertZimmer)", "all x.(RobertZimmer(x) -> Essayist(x))", "RobertZimmer is an essayist.", "RobertZimmer(Robert) is Essayist(Robert)", "RobertZimmer (Essayist)", "RobertZimmer is Essayist(RobertZimmer)", "(Essayist(RobertZimmer)", "all x.(RobertZimmer(x) -> Essayist(x))", "Robert Zimmer is an essayist.", "RobertZimmer(Robert) is Essayist(Robert)", "(Essayist(RobertZimmer)", "All x.(RobertZimmer(x) -> Essayist(x))", "RobertZimmer (Essayist)", "all x.(RogerZimmer(x) -> Essayist(x))", "(Essayist(RobertZimmer)", "Robert Zimmer is Essayist."]}
{"id": "folio_train_933", "nl": "Robert Zimmer was born in 1953.", "fol": "BornInYear(RobertZimmer,Year1953)", "prediction": ["RobertZimmer (bornIn(RobertZimmer,1953))", "Robert Zimmer was born in 1953.", "Robert Zimmer (bornIn(RobertZimmer,1953))", "-(RobertZimmer(Robert) & BornIn(Robert,53))", "(Birth(RobertZimmer) & BornIn(RobertZimmer,1953))", "RobertZimmer (bornIn(RobertZimmer,53))", "RobertZimmer was born in 1953.", "(Birth(RobertZimmer,1953))", "Robert Zimmer was born in 1953.", "RobertZimmer (bornIn(RobertZimmer) & BornIn(RobertZimmer))", "(Birth(RobertZimmer) & BornIn(RobertZimmer, 1953))", "Robert Zimmer (bornIn(RobertZimmer,53))", "RobertZimmer (bornIn(RobertZimmer,1953))", "RobertZimmer was born in 1953.", "Robert Zimmer was born in 1953.", "(Birth(RobertZimmer,1953))"]}
{"id": "folio_train_934", "nl": "Every essayist is a writer.", "fol": "all x.(IsEssayist(x) -> IsWriter(x))", "prediction": ["all x.(Essayist(x) -> Writer(x))", "all x.(Essayist(x) -> Writer(x))", "(all x.(Essayist(x) -> Writer(x)))", "exists x y.(Essayist(x) & Writer(y))", "all x.(Essayist(x) -> Writer(x))", "all x.exists y.(Essayist(x) & Writer(y))", "all x.(Essayist(x) -> Writer(x))", "exists x y.(Essayist(x) & Writer(y))", "exists x.(Essentialist(x) & Writer(x))", "all x.(E essayist(x) -> Writer(x))", "all x.(Essayist(x) -> Writer(x))", "exists x y.(Essayist(x) & Writer(y))", "all x.(Essayist(x) -> Writer(x))", "all x.(Essayist(x) -> Writer(x))", "all x.(Essayist(x) -> Writer(x))", "all x.(Essayist(x) -> Writer(x))"]}
{"id": "folio_train_935", "nl": "Every person born in Germany is German.", "fol": "all x.(BornInGermany(x) -> IsGerman(x))", "prediction": ["all x.(BirthInGermany(x) -> German(x))", "all x.(BornInGermany(x) -> German(x))", "all x.((Person(x) & BornInGermany(x)) -> German(x))", "-all x.(BirthInGermany(x) -> German(x))", "(All x.(BirthInGermany(x) -> German(x))", "all x y.((Person(x) & BornInGermany(x,y)) -> German(x))", "all x.(BirthInGermany(x) -> German(x))", "all x.(BornInGermany(x) -> German(x))", "all x.((Person(x) & BornInGermany(x)) -> German(x))", "(all x.(BirthInGermany(x) -> German(x))", "all x y.((Person(x) & BornInGermany(x)) -> German(x))", "all x.(BirthInGermany(x) -> German(x))", "all x.((Person(x) & BornInGermany(x)) -> German(x))", "all x.(BornInGermany(x) -> German(x))", "all x.((Person(x) & BornInGermany(x)) -> German(x))", "all x.(BirthInGermany(x) -> German(x))"]}
{"id": "folio_train_936", "nl": "Robert Zimmer is German.", "fol": "IsGerman(RobertZimmer)", "prediction": ["(German(RobertZimmer) & German(RobertZimmer))", "RobertZimmer(x) & German(x))", "all x.(RobertZimmer(x) -> German(x))", "all x.((RobertZimmer(x) & German(x)) -> German(x))", "RobertZimmer(Roseman) & German(Roseman)", "(German(RobertZimmer) & German(RobertZimmer))", "(German(RobertZimmer) | German(RobertZimmer))", "All x.(RobertZimmer(x) -> German(x))", "RobertZimmer(x) & German(x))", "RobertZimmer(r) is German(r)", "Robert Zimmer ist German.", "(German(RobertZimmer) & German(RobertZimmer))", "All x.(RobertZimmer(x) -> German(x))", "RobertZimmer (German)", "RobertZimmer ist German.", "all x.(RogerZimmer(x) -> German(x))"]}
{"id": "folio_train_937", "nl": "Robert Zimmer is not a writer.", "fol": "-IsWriter(RobertZimmer)", "prediction": ["all x.(RobertZimmer(x) -> -Writer(x))", "all x.((RobertZimmer(x) & -Writer(x)) -> -Writer(x))", "RobertZimmer(Robert) & -Writer(Robert))", "RobertZimmer is notWriter(RobertZimmer)", "(-Writer(RobertZimmer))", "all x.((RobertZimmer(x) & -Writer(x)) -> -Writer(x))", "-(RobertZimmer(Robert) & Writer(Robert))", "RobertZimmer(Robert) & -Writer(Robert))", "(-Writer(RobertZimmer))", "all x.(RogerZimmer(x) -> -Writer(x))", "RobertZimmer is notWriter(RobertZimmer)", "all x.((RobertZimmer(x) & -Writer(x)) -> -Writer(x))", "(-Writer(RobertZimmer))", "All x.(RogerZimmer(x) -> -Writer(x))", "-Writer(RobertZimmer)", "(-Writer(RobertZimmer)"]}
{"id": "folio_train_938", "nl": "Robert Zimmer is a biographer.", "fol": "IsBiographer(RobertZimmer)", "prediction": ["all x.(RobertZimmer(x) -> Biographer(x))", "RobertZimmer(biographer)", "all x.((RobertZimmer(x) & Biographer(x)) -> -Biography(x))", "(Biographer(RobertZimmer)", "RobertZimmer (Biographer)", "RobertZimmer is a biographer.", "RobertZimmer(Robert) isBiographer(Robert)", "Robert Zimmer is a biographer.", "all x.((RobertZimmer(x) & Biographer(x)) -> Biographer(x))", "all x.(RogerZimmer(x) -> Biographer(x))", "(Biographer(RobertZimmer)", "Robert Zimmer is a biographer.", "RobertZimmer is a Biographer.", "RobertZimmer (Biographer)", "(Biographer(RobertZimmer)", "(Biographer(RobertZimmer)"]}
{"id": "folio_train_939", "nl": "All people who repay their loans on time have a high credit score.", "fol": "all x.(RepayLoansOnTime(x) -> HasHighCreditScore(x))", "prediction": ["all x.((Person(x) & RepaysLoansOnTime(x)) -> HighCreditScore(x))", "all x.(RepaysLoansOnTime(x) -> HighCreditScore(x))", "all x y.((Person(x) & RepaysLoansOnTime(x) & HighCreditScore(y)) -> HighCreditScore(x))", "all x.((Person(x) & RepaysLoansOnTime(x)) -> HighCreditScore(x))", "all x.(RepaysLoansOnTime(x) -> HighCreditScore(x))", "all x y.((Person(x) & RepaysLoansOnTime(x) & HighCreditScore(y)) -> HighCreditScore(x))", "all x.((Person(x) & RepaysLoansOnTime(x)) -> HighCreditScore(x))", "all x y.((Person(x) & RepaymentLoansOnTime(x,y)) -> HighCreditScore(x))", "all x y.((Person(x) & RepaysLoansOnTime(x) & HighCreditScore(x)) -> HighCreditScore(y))", "all x.(RepaymentOnTime(x) -> HighCreditScore(x))", "all x.((Person(x) & RepaymentLoansOnTime(x)) -> HighCreditScore(x))", "all x.(RepaysLoansOnTime(x) -> HighCreditScore(x))", "all x.((Person(x) & RepaysLoansOnTime(x)) -> HighCreditScore(x))", "all x y.((Person(x) & RepaysLoansOnTime(x) & HighCreditScore(y)) -> HighScore(x))", "all x.((Person(x) & RepaysLoansOnTime(x)) -> HighCreditScore(x))", "all x.((Person(x) & RepaysLoansOnTime(x)) -> HighCreditScore(x))"]}
{"id": "folio_train_940", "nl": "Some people with high credit scores and high salaries are approved for mortgages.", "fol": "exists x.((HasHighCreditScore(x) & HasHighSalary(x)) -> ApprovedForMortgage(x))", "prediction": ["exists x.(Person(x) & HighCreditScores(x) & HighSalary(x) & ApprovedForMortgage(x))", "exists x.((Person(x) & HighCreditScores(x) & HighSalary(x)) -> ApprovedForMortgage(x))", "all x y.((Person(x) & HighCreditScores(x) & HighSalary(x)) -> ApprovedForMortgage(y))", "exists x.(Person(x) & HighCreditScore(x) & HighSalary(x) & ApprovedForMortgage(x))", "exists x y.(Person(x) & Person(y) & HighCreditScores(x) & HighSalary(x) & ApprovedForMortgage(x))", "exists x.(Person(x) & HighCreditScores(x) & HighSalary(x) & ApprovedForMortgages(x))", "exists x.((Person(x) & HighCreditScores(x) & HighSalary(x)) -> ApprovedForMortgage(x))", "exists x.((Person(x) & HighCreditScores(x) & HighSalary(x)) -> ApprovedForMortgages(x))", "all x y.((Person(x) & HighCreditScore(x) & HighSalary(x)) -> ApprovedForMortgage(y))", "exists x.((Person(x) & HighCreditScores(x) & HighSalary(x)) -> ApprovedForHazards(x))", "exists x.(Person(x) & HighCreditScores(x) & HighSalary(x) & ApprovedForHazards(x))", "all x y.((Person(x) & HighCreditScores(x) & HighSalary(x)) -> ApprovedForMortgage(y))", "exists x.(Person(x) & HighCreditScore(x) & HighSalary(x) & ApprovedForMortgage(x))", "exists x.(Person(x) & (HighCreditScore(x) & HighSalary(x)) -> ApprovedForMortgage(x))", "exists x.((Person(x) & HighCreditScores(x) & HighSalary(x)) -> ApprovedForMortgages(x))", "exists x.((Person(x) & HighCreditScores(x) & HighSalaries(x)) -> ApprovedForHypothecary(x))"]}
{"id": "folio_train_941", "nl": "John has a high salary.", "fol": "HasHighSalary(John)", "prediction": ["all x.(John(x) -> HighSalary(x))", "John has a highSalary(John)", "(HighSalary(John) & HighSalary(John))", "(HighSalary(John) & -HighSalary(John))", "John has a highSalary(John)", "all x.(John(x) -> HighSalary(x))", "John has highSalary(John)", "(HighSalary(John) -> HighSalary(John))", "John has a highSalary(John)", "all x.(John(x) -> HighSalary(x))", "-HighSalary(John)", "John has a high Salary(John)", "(HasHighSalary(John)", "(HasHighSalary(John)", "all x.(John(x) -> HighSalary(x))", "all x.(John(x) -> HighSalary(x))"]}
{"id": "folio_train_942", "nl": "If John repays his loans on time, he will be approved for a mortgage.", "fol": "(RepayLoansOnTime(John) -> MortgageApproved(John))", "prediction": ["all x.((John(x) & RepaysLoansOnTime(x)) -> ApprovedForMortgage(x))", "all x y.((John(x) & Loan(y) & RepaysOnTime(x,y)) -> ApprovedForMortgage(x))", "all x.(RepaysLoansOnTime(x) -> ApprovedForMortgage(x))", "all x.((John(x) & RepaysLoansOnTime(x)) -> ApprovedForMortgage(x))", "all x y.((John(x) & Loans(y) & RepaysOnTime(x,y)) -> ApprovedForMortgage(x))", "(RepaysLoansOnTime(John,J) & ApprovedForMortgage(John,J))", "(RepaysLoansOnTime(John,J) & ApprovedForMortgage(John,Mortgage))", "all x.(RepaysLoansOnTime(x) -> ApprovedForMortgage(x))", "all x.((John(x) & RepaysLoansOnTime(x)) -> ApprovedForMortgage(x))", "all x y.((John(x) & RepaysLoansOnTime(x)) -> ApprovedForMortgage(y))", "all x y.((John(x) & Loan(y) & RepaysOnTime(x,y)) -> ApprovedForMortgage(x))", "all x.((JohnRepaysLoansOnTime(x) & Mortgage(x)) -> ApprovedFor(x))", "all x.((John(x) & RepaysLoansOnTime(x)) -> ApprovedForMortgage(x))", "all x y.((John(x) & Loans(y) & RepaysOnTime(x,y)) -> ApprovedForMortgage(x))", "all x.(RepaysLoansOnTime(x) -> ApprovedForMortgage(x))", "all x.((John(x) & RepaysLoansOnTime(x)) -> ApprovedForHypothecary(x))"]}
{"id": "folio_train_943", "nl": "All students are members of the university.", "fol": "all x.(IsStudent(x) -> IsMemberOfUniversity(x))", "prediction": ["all x.(Student(x) -> MemberOfUniversity(x))", "all x.(Student(x) -> MemberOfUniversity(x))", "(all x.(Student(x) -> MemberOfUniversity(x)))", "all x y.((Student(x) & University(y)) -> Member(x,y))", "all x y.((Student(x) & University(y) & Member(x,y)) -> Member(x,y))", "all x.(Student(x) -> MemberOfUniversity(x))", "(all x.(Student(x) -> MemberOfUniversity(x)))", "all x y.((Student(x) & University(y) & Member(x,y)) -> Member(x,y))", "all x.(Student(x) -> MemberOfUniversity(x))", "all x.(Student(x) -> MemberOfUniversity(x))", "all x.(Student(x) -> MembersOfUniversity(x))", "all x.(Student(x) -> MemberOfUniversity(x))", "all x.(Student(x) -> MembersOfUniversity(x))", "all x.(Student(x) -> MemberOfUniversity(x))", "all x.(Student(x) -> Member(x))", "all x.(Student(x) -> MembersOfUniversity(x))"]}
{"id": "folio_train_944", "nl": "All graduate students are students.", "fol": "all x.(IsGraduateStudent(x) -> IsStudent(x))", "prediction": ["all x.(GraduateStudent(x) -> Student(x))", "all x.(GraduateStudent(x) -> Student(x))", "all x y.((GraduateStudent(x) & GraduateStudent(y)) -> Student(x))", "(all x.(GraduateStudent(x) -> Student(x))", "all x.(GraduateStudent(x) -> Student(x))", "(all x.(GraduateStudent(x) -> Student(x))", "all x.(GraduateStudent(x) -> Student(x))", "all x.(GirlStudent(x) -> Student(x))", "all x.(GraduateStudent(x) -> Student(x))", "all x.(Student(x) -> Student(x))", "all x.(GraduateStudent(x) -> Student(x))", "all x.(GraduateStudent(x) -> Students(x))", "all x.(GraduateStudent(x) -> Student(x))", "all x.(GraduateStudent(x) -> Students(x))", "all x.(GraduateStudent(x) -> Student(x))", "all x.(GraduateStudent(x) -> Students(x))"]}
{"id": "folio_train_945", "nl": "All PhD students are graduate students.", "fol": "all x.(IsPhDStudent(x) -> IsGraduateStudent(x))", "prediction": ["all x.(PhDStudent(x) -> GraduateStudent(x))", "all x.(PhDStudent(x) -> GraduateStudent(x))", "all x.((PhD Student(x) & GraduateStudent(x)) -> GraduateStudent(x))", "all x y.((PhDStudent(x) & GraduateStudent(y)) -> GraduateStudent(x))", "all x.(PhD Student(x) -> GraduateStudent(x))", "(all x.(PhDStudent(x) -> GraduateStudent(x)))", "all x.((PhDStudent(x) & GraduateStudent(x)) -> GraduateStudent(x))", "all x.(PhDStudent(x) -> GraduateStudent(x))", "(all x.(DoctoralStudent(x) -> GraduateStudent(x)))", "all x.(PhD(x) -> GraduateStudent(x))", "(all x.(PhD student(x) -> GraduateStudent(x))", "all x.(DoctoralStudent(x) -> GraduateStudent(x))", "all x.(PhD student(x) -> GraduateStudent(x))", "all x.(DoctoralStudent(x) -> GraduateStudent(x))", "all x.(DoctoralStudent(x) -> GraduateStudent(x))", "all x.(DoctoralStudent(x) -> GraduateStudent(x))"]}
{"id": "folio_train_946", "nl": "Some PhD students have high IQs.", "fol": "exists x.(IsPhDStudent(x) & HasHighIQ(x))", "prediction": ["exists x.(PhDStudent(x) & HighIQ(x))", "exists x.(PhDStudent(x) & HighIQ(x))", "exists x y.(PhDStudent(x) & PhDStudent(y) & HighIQ(y))", "exists x.(PhDStudent(x) & HighIQ(x))", "exists x.(PhDStudent(x) & HighIQ(x))", "exists x.(PhD Student(x) & HighIQ(x))", "exists x y.(PhDStudent(x) & PhDStudent(y) & HighIQ(x,y))", "exists x.(PhDStudent(x) & HighIQ(x))", "exists x.(DoctoralStudent(x) & HasHighIQ(x))", "exists x.(PhDStudent(x) & HighIQ(x))", "exists x.(PhD student(x) & HighIQ(x))", "exists x.(PhD Student(x) & HighIQ(x))", "exists x.(DoctoralStudent(x) & HighIQ(x))", "exists x.(DoctoralStudent(x) & HasHighIQ(x))", "exists x.(PhD student(x) & HighIQ(x))", "exists x.(DoctoralStudent(x) & HighIQ(x))"]}
{"id": "folio_train_947", "nl": "If John is not a PhD student, then he is not a member of the university.", "fol": "(-IsPhDStudent(John) -> -IsMemberOfUniversity(John))", "prediction": ["all x.((John(x) & -PhDStudent(x)) -> -MemberOfUniversity(x))", "(-PhDStudent(John) -> -MemberOfUniversity(John,University))", "all x.((John(x) & -PhDStudent(x)) -> -MemberOfUniversity(x))", "(-PhD Student(John) -> -MemberOfUniversity(John))", "-(PhDStudent(John) & -PhDStudent(John))", "all x.((PhDStudent(x) & -PhDStudent(x)) -> -MemberOfUniversity(x))", "(-PhDStudent(John) -> -MemberOfUniversity(John,University))", "all x.((John(x) & -PhDStudent(x)) -> -MemberOfUniversity(x))", "all x.(PhDStudent(x) -> -MemberOfUniversity(x))", "(-PhD student(John) -> -MemberOfUniversity(John))", "all x.((John(x) & -DoctoralStudent(x)) -> -UniversityMember(x))", "all x.((John(x) & -PhDStudent(x)) -> -MemberOfUniversity(x))", "all x.((John(x) & -PhD Student(x)) -> -MemberOfUniversity(x))", "all x.((John(x) & -DoctoralStudent(x)) -> -UniversityMember(x))", "all x.((John(x) & -PhDStudent(x)) -> -MemberOfUniversity(x))", "all x.((John(x) & -DoctoralStudent(x)) -> -UniversityMember(x))"]}
{"id": "folio_train_948", "nl": "If John has a high IQ, then he is a PhD student or a graduate student.", "fol": "(HasHighIQ(John) -> (IsPhDStudent(John) | IsGraduateStudent(John)))", "prediction": ["all x.(HighIQ(x) -> (PhD student(x) | GraduateStudent(x)))", "all x.((John(x) & HighIQ(x)) -> (PhD student(x) | GraduateStudent(x)))", "(HighIQ(John) -> (PhD student(John) | GraduateStudent(John))))", "(HasHighIQ(John) -> (PhD student(John) | GraduateStudent(John)))", "(HighIQ(John) -> (PhD Student(John) | GraduateStudent(John))))", "all x.((HighIQ(x) & (PhDStudent(x) | GraduateStudent(x))) -> (PhDStudent(x) | GraduateStudent(x)))", "all x.(HighIQ(x) -> (PhD student(x) | GraduateStudent(x)))", "all x.((John(x) & HighIQ(x)) -> (PhD student(x) | GraduateStudent(x)))", "(HighIQ(John) -> (PhD student(John) | GraduateStudent(John))))", "all x.(HighIQ(x) -> (PhD Student(x) | GraduateStudent(x)))", "all x.((John(x) & HighIQ(x)) -> (PhD Student(x) | GraduateStudent(x)))", "all x.(HighIQ(John,x) -> (PhD student(x) | GraduateStudent(x)))", "all x.(HighIQ(x) -> (PhD student(x) | GraduateStudent(x)))", "all x.((John(x) & HighIQ(x)) -> (PhD student(x) | GraduateStudent(x)))", "all x.(HighIQ(x) -> (PhD Student(x) | GraduateStudent(x)))", "all x.((John(x) & HighIQ(x)) -> (PhD Student(x) | GraduateStudent(x)))"]}
{"id": "folio_train_949", "nl": "John has a high IQ.", "fol": "HasHighIQ(John)", "prediction": ["all x.(John(x) -> HighIQ(x))", "John has a highIQ.", "(HighIQ(John) & HighIQ(John))", "all x.((John(x) & HighIQ(x)) -> Has(x,y))", "John has a highIQ.", "(HighIQ(John) & -HighIQ(John))", "all x.(John(x) -> HighIQ(x))", "John has highIQ.", "(HighIQ(John) & HighIQ(John))", "John has a highIQ.", "all x.(John(x) -> HighIQ(x))", "IQ.High(John)", "John has highIQ.", "(HighIQ(John))", "(HighIQ(John) & -HighIQ(John))", "John has a highIQ."]}
{"id": "folio_train_950", "nl": "John does not have a high IQ.", "fol": "-HasHighIQ(John)", "prediction": ["(-HighIQ(John))", "all x.((John(x) & -HighIQ(x)) -> -HighIQ(x))", "John -HasHighIQ(John))", "(HighIQ(John) & -HighIQ(John))", "(HasHighIQ(John) & -HasHighIQ(John))", "John does not have highIQ.", "-HighIQ(John)", "John -HighIQ(John))", "all x.((John(x) & -HighIQ(x)) -> -HighIQ(x))", "John has no highIQ.", "(HighIQ(John) & -HighIQ(John))", "(-HighIQ(John))", "John does not have highIQ.", "-HighIQ(John)", "-HighIQ(John)", "-HighIQ(John)"]}
{"id": "folio_train_951", "nl": "John is a PhD student.", "fol": "IsPhDStudent(John)", "prediction": ["John is a PhDStudent(John)", "(PhD Student(John) & -PhD Student(John))", "all x.(PhDStudent(x) -> John(x))", "John is PhDStudent(John)", "-(PhDStudent(John) & PhDStudent(John))", "John is a PhDStudent(John)", "(PhD student(John) & -PhD student(John))", "-PhD Student(John)", "((John) | PhDStudent(John)))", "all x.(PhDStudent(x) -> John(x))", "John is PhDStudent(John)", "(PhD student(John) & PhDStudent(John))", "John is a PhDStudent.", "(PhD Student(John) & -PhD Student(John))", "John is a PhDStudent(John)", "(PhD Student(John)"]}
{"id": "folio_train_952", "nl": "Belgium, France and Germany are European countries.", "fol": "(IsEuropeanCountry(Belgium) | IsEuropeanCountry(France) | IsEuropeanCountry(Germany))", "prediction": ["(EuropeanCountry(Belgium) & EuropeanCountry(France) & EuropeanCountry(Germany))", "all x.((Belgium(x) | France(x) | Germany(x)) -> EuropeanCountry(x))", "all x.(EuropeanCountry(x) -> (Belgium(x) | France(x) | Germany(x)))", "all x y.((Belgium(x) & France(y) & Germany(z)) -> EuropeanCountry(x))", "(EuropeanCountry(Belgium) & EuropeanCountry(France) & EuropeanCountry(Germany))", "(European(Belgium) & European(France) & European(Germany))", "all x.((Belgium(x) | France(x) | Germany(x)) -> EuropeanCountry(x))", "((Belgium(Belgium) | France(Belgium) | Germany(Belgium)))", "(EuropeanCountry(Breton,EuropeanCountry) & EuropeanCountry(France,EuropeanCountry))", "(EuropaCountry(Belgium,European) & EuropeanCountry(France,European))", "all x.(EuropeanCountry(x) -> (Belgium(x) | France(x) | Germany(x)))", "all x.(EuropeanCountry(x) -> (Belgium(x) | France(x) | Germany(x)))", "(EuropeanCountry(Belgium) & EuropeanCountry(France) & EuropeanCountry(Germany))", "(EuropeanCountry(Belgium) & EuropeanCountry(France) & EuropeanCountry(Germany))", "all x.((Belgium(x) | France(x) | Germany(x)) -> EuropeanCountry(x))", "(EuropeanCountry(Belgium) & EuropeanCountry(France) & EuropeanCountry(Germany))"]}
{"id": "folio_train_953", "nl": "Paris is the capital of France.", "fol": "IsCapitalOf(Paris,France)", "prediction": ["(Capital(Paris) & CapitalOfFrance(Paris))", "all x.((Paris(x) & CapitalOf(x,France)) -> CapitalOf(x,France))", "Paris (Capital(Paris) & CapitalOfFrance(Paris))", "-(Capital(Paris) & CapitalOfFrance(Paris))", "Paris is capital of France.", "all x.(Paris(x) -> CapitalOfFrance(x))", "Paris, capitaleOfFrance.", "(Capital(Paris) & CapitalOfFrance(Paris))", "-(CapitalOfFrance(Paris))", "CapitalOfFrance(Paris)", "Paris is the capital of France.", "(Capital(Paris) & CapitalOf(Paris))", "Paris is capital of France.", "Paris, capitaleofFrance.", "(Capital(Paris) & CapitalOfFrance(Paris))", "(Capital(Paris,France))"]}
{"id": "folio_train_954", "nl": "The Eiffel Tower is one of the main tourist attractions located in Paris.", "fol": "(IsTouristAttraction(EiffelTower) & IsLocatedIn(EiffelTower,Paris))", "prediction": ["all x.(EiffelTower(x) -> TouristAttraction(x))", "(MainTouristAttraction(EiffelTower) & LocatedInParis(EiffelTower))", "The EiffelTower is one of the main tourist attractions located in Paris.", "LocatedInParis,theEiffelTower is one of the mainTouristAttractions(e) & LocatedInParis(e))", "L'EiffelTower est une des principales attractions touristiques situ\u00e9es dans Paris.", "LocatedInParis(EiffelTower)", "all x.(EisenburgerTower(x) -> TouristAttraction(x))", "all x y.((EiffelTower(x) & Paris(y)) -> TouristAttraction(x,y))", "(MainTouristAttraction(EiffelTower,Paris))", "All x.(EiffelTower(x) -> TouristAttraction(x))", "the EiffelTower(e) & LocatedInParis(e))", "The EiffelTower is one of the main tourist attractions located in Paris.", "Die EiffelTower(e) is one of the main tourist attractions located in Paris(e) & located in Paris(e))", "(MainTouristAttraction(EiffelTower,Paris))", "All x.(EiffelTower(x) -> TouristAttraction(x))", "The EiffelTower is one of the main tourist attractions located in Paris."]}
{"id": "folio_train_955", "nl": "Some people who live in Belgium speak French.", "fol": "exists x.(LivesIn(x,Belgium) -> SpeaksLanguage(x,French))", "prediction": ["exists x.(BelgianPerson(x) & LivesIn(x,Belgium))", "exists x.(Person(x) & LivesInBelgium(x))", "exists x.(Belgian(x) & LivesIn(x,Belgium))", "exists x.(BelgianPerson(x) & LivesIn(x,Belgium))", "exists x y.(Person(x) & LivesIn(x,Belgium) & SpeakFrench(x))", "exists x.(LivesIn(x,Belgium) & SpeakFrench(x))", "exists x.(BelgianPerson(x) & LivesIn(x,Belgium) & SpeakFrench(x))", "exists x.(Person(x) & LivesInBelgium(x))", "exists x.(BelgianPerson(x) & LivesIn(x,Belgium) & SpeakFrench(x))", "exists x y.(Person(x) & LivesIn(x,y) & Belgium(y) & SpeaksFrench(x))", "exists x.(Person(x) & LivesIn(x,Belgium) & SpeakFrench(x))", "exists x.((Person(x) & LivesInBelgium(x)) -> SpeakFrench(x))", "exists x.(LivesInBelgium(x) & SpeakFrench(x))", "exists x.(BelgianPerson(x) & LivesIn(x,Belgium) & SpeakFrench(x))", "exists x y.((Person(x) & LivesIn(x,y)) -> SpeaksFrench(x))", "exists x.(Person(x) & LivesInBelgium(x) & SpeakFrench(x))"]}
{"id": "folio_train_956", "nl": "If John goes to Europe, he will see some tourist attractions.", "fol": "exists x.(TravelsTo(John,Europe) -> (SeesAttraction(John,x) & IsTouristAttraction(x)))", "prediction": ["all x.((John(x) & GoesToEurope(x)) -> SeesTouristAttractions(x))", "all x.((John(x) & VisitsEurope(x)) -> SeesTouristAttractions(x))", "all x.((John(x) & GoesToEurope(x)) -> SeesTouristAttractions(x))", "(GoesToEurope(John,Europe) -> SeesTouristAttractions(John,Europe))", "all x.(Europe(x) -> SeesTouristAttractions(x))", "(GoesToEurope(John) -> SeesTouristAttractions(John))", "-(GoesToEurope(John) & SeesTouristAttractions(John))", "all x.(GoesToEurope(x) -> SeesTouristAttractions(x))", "All x.((Jeffrey(x) & GoesToEurope(x)) -> SeesTouristAttractions(x))", "all x y.((GoesTo(x,y) & Europe(y)) -> SeesTouristAttractions(x,y))", "all x y.((John(x) & Europe(y)) -> SeesTouristAttractions(x,y))", "all x.((John(x) & VisitsEurope(x)) -> SeesTouristAttractions(x))", "All x.(GoesToEurope(x) -> SeesTouristAttractions(x))", "all x.((John(x) & GoesToEurope(x)) -> SeesTouristAttractions(x))", "(GoesToEurope(John) -> SeesTouristAttractions(John))", "all x y.((John(x) & Europe(y)) -> SeesTouristAttractions(x,y))"]}
{"id": "folio_train_957", "nl": "John speaks French.", "fol": "SpeaksLanguage(John,French)", "prediction": ["(SpeaksFrench(John) & -SpeaksFrench(John))", "-SpeaksFrench(John)", "John speaks French.", "all x.(John(x) -> SpeaksFrench(x))", "(SpringsFrench(John) -> SpeaksFrench(John))", "(SpeaksFrench(John) & -SpeaksFrench(John))", "John speaksFrench.", "John speaks French.", "John speaksFrench(John)", "all x.(John(x) -> SpeaksFrench(x))", "-SpeaksFrench(John)", "(SpeaksFrench(John) & -SpeaksFrench(John))", "(SpeaksFrench(John,French))", "John speaks French.", "-SpeaksFrench(John)", "John speaks French."]}
{"id": "folio_train_958", "nl": "If John goes to Europe, he will see the Eiffel Tower.", "fol": "(TravelsTo(John,Europe) -> SeesAttraction(John,EiffelTower))", "prediction": ["all x.((John(x) & GoesToEurope(x)) -> SeesEisenburgerTower(x))", "(GoesToEurope(John) -> SeesEiffelTower(John))", "all x.((John(x) & GoesToEurope(x)) -> SeesEiffelTower(x))", "all x.(GoesToEurope(x) -> SeesEiffelTower(x))", "(GoesToEurope(John,Europe) -> SeesEiffelTower(John,Europe))", "-(GoesToEurope(John) & SeesEisenburgerTower(John))", "all x y.((John(x) & Europe(y)) -> SeesEiffelTower(x,y))", "(GoesToEurope(John) -> SeesEisenburgerTower(John))", "(all x.(GoesToEurope(x) -> EiffelTower(x)))", "All x.((Jeffrey(x) & GoesToEurope(x)) -> SeesEisenburgerTower(x))", "All x.(GoesToEurope(x) -> SeesEisenburgerTower(x))", "all x.((John(x) & VisitsEurope(x)) -> SeesEisenburgerTower(x))", "all x.((John(x) & GoesToEurope(x)) -> SeesEisenburgerTower(x))", "all x.((John(x) & GoesToEurope(x)) -> WillSeeEiffelTower(x))", "all x y.((John(x) & Europe(y)) -> SeesEiffelTower(x,y))", "All x.(GoesToEurope(x) -> SeesEiffelTower(x))"]}
{"id": "folio_train_959", "nl": "The Eiffel Tower is located in the capital of France.", "fol": "exists x.(IsLocatedIn(EiffelTower,x) & IsCapitalOf(x,France))", "prediction": ["(LocatedInCapital(EiffelTower) & CapitalOfFrance(EiffelTower))", "all x.(EiffelTower(x) -> LocatedInCapitalOfFrance(x))", "The EiffelTower is located in the capital of France.", "the EiffelTower(e) is located in the capital of France(e) & LocatedIn(e) & LocatedIn(e) & LocatedIn(e) & LocatedIn(e) & LocatedIn(e) & LocatedIn(e) & LocatedIn(e) & LocatedIn(e) & LocatedIn(e) & LocatedIn(e) & LocatedIn(e) & LocatedIn(e)", "L'EiffelTower(e) est situ\u00e9e dans la capitale de France.", "(Location(EiffelTower,France) & Capital(EiffelTower,France))", "La Tour Eiffel est situ\u00e9e dans la capitale de France.", "(LocatedInCapitalOfFrance(EiffelTower))", "All x.(EiffelTower(x) -> CapitalOfFrance(x))", "all x.(EisenburgerTower(x) -> CapitalOfFrance(x))", "The EiffelTower is located in the capital of France.", "LocatedInCapitalOfFrance(EiffelTower)", "The EiffelTower is located in CapitalOfFrance(eiffelTower)", "the EiffelTower is located in capital of France.", "(Location(EiffelTower,France) & Capital(EiffelTower,France))", "LocatedInCapitalOfFrance(eiffelTower)"]}
{"id": "folio_train_960", "nl": "John lives in Belgium.", "fol": "LivesIn(John,Belgium)", "prediction": ["John lives in Belgium.", "(LivesIn(John,Belgium) & -LivesIn(John,Belgium))", "(LisesIn(John,Belgium) & -LivesIn(John,Belgium))", "-LisesInBelgium(John)", "John lives in Belgium.", "(LivingInBelgium(John)", "-LisesIn(John,Belgium)", "(LisesIn(John,Belgium) & LivesIn(John,Belgium))", "John LivesInBelgium.", "(LivesIn(John,Belgium) & -LivesIn(John,Belgium))", "-LivesInBelgium(John)", "John & LivesInBelgium.", "John lives in Belgium.", "John lives in Belgium.", "John lives in Belgium.", "John lives in Belgium."]}
{"id": "folio_train_961", "nl": "All sports cars are loud.", "fol": "all x.(IsSportsCar(x) -> IsLoudCar(x))", "prediction": ["all x.(SportsCar(x) -> Loud(x))", "all x.(SportsCar(x) -> Loud(x))", "(all x.(SportsCar(x) -> Loud(x)))", "all x y.((SportsCar(x) & SportsCar(y)) -> Loud(x))", "all x.(SportsCar(x) -> Loud(x))", "all x y.((SportsCar(x) & SportsCar(y)) -> Loud(x))", "(Loud(sportcar) & All(car))", "all x.(SportsCar(x) -> Loud(x))", "all x.(SportCar(x) -> Loud(x))", "all x.(SportsCar(x) -> Loud(x))", "all x.(SportCar(x) -> Loud(x))", "all x.(SportsCar(x) -> Loud(x))", "all x.(SportsCar(x) -> Loud(x))", "all x.(SportCar(x) -> Loud(x))", "all x.(SportsCar(x) -> Loud(x))", "all x.(SportsCar(x) -> Loud(x))"]}
{"id": "folio_train_962", "nl": "No loud cars are electric.", "fol": "all x.(IsLoudCar(x) -> -IsElectricCar(x))", "prediction": ["-exists x.(LoudCar(x) & Electric(x))", "(LoudCar(x) & -LoudCar(x))", "-exists x.(LoudCar(x) & Electric(x))", "all x.(LoudCar(x) -> -Electric(x))", "(exists x.(LoudCar(x) & Electric(x))", "-exists x.(LoudCar(x) & Electric(x))", "all x.(LoudCar(x) -> -Electric(x))", "-exists x.(LoudCar(x) & Electric(x))", "all x.(LoudCar(x) -> -Electric(x))", "-exists x.(LoudCar(x) & ElectricCar(x))", "all x.(LoudCar(x) -> -Electric(x))", "-exists x.(LoudCar(x) & ElectricCar(x))", "-exists x.(LoudCar(x) & -Electric(x))", "all x.(LoudCar(x) -> -Electric(x))", "-exists x.(LoudCar(x) & ElectricCar(x))", "-exists x.(LoudCar(x) & ElectricCar(x))"]}
{"id": "folio_train_963", "nl": "If a car is a Ferrari, then it is a sports car.", "fol": "all x.(IsFerrari(x) -> IsSportsCar(x))", "prediction": ["all x.((Car(x) & Ferrari(x)) -> SportsCar(x))", "all x.((Car(x) & Ferrari(x)) -> SportsCar(x))", "(all x.(Ferrari(x) -> SportsCar(x)))", "all x.(Ferrari(x) -> SportsCar(x))", "all x.((Car(x) & Ferrari(x)) -> SportsCar(x))", "all x.(Ferrari(x) -> SportsCar(x))", "all x.((Car(x) & Ferrari(x)) -> SportsCar(x))", "exists x.(Car(x) & Ferrari(x) & SportsCar(x))", "all x y.((Car(x) & Ferrari(y)) -> SportsCar(x))", "all x.(Ferrari(x) -> SportsCar(x))", "all x.((Car(x) & Ferrari(x)) -> SportsCar(x))", "all x.(Ferrari(x) -> SportsCar(x))", "all x.((Car(x) & Ferrari(x)) -> SportsCar(x))", "all x.((Car(x) & Ferrari(x)) -> SportsCar(x))", "all x.((Car(x) & Ferrari(x)) -> SportsCar(x))", "all x.((Car(x) & Ferrari(x)) -> SportsCar(x))"]}
{"id": "folio_train_964", "nl": "All cars made in Maranello are Ferrari", "fol": "all x.(IsMadeInMaranello(x) -> IsFerrari(x))", "prediction": ["all x.((Car(x) & MadeInMaranello(x)) -> Ferrari(x))", "all x y.((Car(x) & MadeInMaranello(x) & MadeInMaranello(y)) -> Ferrari(x))", "all x.((Car(x) & MadeInMaranello(x)) -> Ferrari(x))", "all x y z.((Car(x) & MadeInMaranello(x) & Ferrari(y) & MadeInMaranello(z)) -> Ferrari(y))", "(all x.(MadeInMaranello(x) -> Ferrari(x)))", "all x y.((Car(x) & MadeInMaranello(x) & Ferrari(y)) -> MadeInMaranello(x))", "all x.(MadeInMaranello(x) -> Ferrari(x))", "(all x.(MadeInMaranello(x) -> FerrariCar(x)))", "all x.((Car(x) & MadeInMaranello(x)) -> Ferrari(x))", "All x.(Car(x) & MadeInMaranello(x) -> Ferrari(x))", "All cars made in Maranello are Ferraris.", "all x.((Car(x) & MadeInMaranello(x)) -> Ferrari(x))", "all x y.((Car(x) & MadeInMaranello(x,y)) -> Ferrari(x))", "all x.(MadeInMaranello(x) -> Ferrari(x))", "all x.((Car(x) & MadeInMaranello(x)) -> Ferrari(x))", "all x.((Car(x) & MadeInMaranello(x)) -> Ferrari(x))"]}
{"id": "folio_train_965", "nl": "If Prius is neither a sports car nor a loud car, then Prius is a Maranello-made car or a loud car.", "fol": "all x.(((-IsSportsCar(Prius) | -IsLoudCar(Prius)) -> IsMadeInMaranello(Prius)) | IsLoudCar(Prius))", "prediction": ["all x.((Prius(x) & -SportsCar(x) & -LoudCar(x)) -> (MaranelloMadeCar(x) | LoudCar(x)))", "all x.((SportsCar(x) | LoudCar(x)) -> (MaranelloMadeCar(x) | LoudCar(x)))", "all x.((Prius(x) & -SportsCar(x) & -LoudCar(x)) -> (MaranelloMadeCar(x) | LoudCar(x)))", "all x.(((SportsCar(x) | LoudCar(x))) -> (MaranelloMadeCar(x) | LoudCar(x)))", "all x.((Car(x) & -SportsCar(x) & -LoudCar(x)) -> (MaranelloMade(x) | LoudCar(x)))", "(all x.((Prius(x) & -SportsCar(x)) | LoudCar(x)) -> (MaranelloMadeCar(x) | LoudCar(x)))", "all x.((SpokenCar(x) & -SportsCar(x) & -LoudCar(x)) -> (MaranelloMadeCar(x) | LoudCar(x)))", "(-SportsCar(p) | LoudCar(p)))", "all x y.((Prius(x) & -SportsCar(x) & LoudCar(x)) -> (MaranelloMadeCar(y) | LoudCar(y)))", "all x.((Prius(x) & -SportsCar(x) & -LoudCar(x)) -> (MaranelloMadeCar(x) | LoudCar(x)))", "(-SportsCar(p) & -LoudCar(p)) -> (MaranelloMadeCar(p,p) | LoudCar(p,p)))", "all x.((SportsCar(x) | LoudCar(x)) -> (MaranelloMadeCar(x) | LoudCar(x)))", "all x.((Prius(x) & -SportsCar(x) & -LoudCar(x)) -> (MaranelloMadeCar(x) | LoudCar(x)))", "all x y.((Prius(x) & -SportsCar(x) & LoudCar(x)) -> (MaranelloMadeCar(x) | LoudCar(y)))", "all x.((Prius(x) & -SportsCar(x) & -LoudCar(x)) -> (MaranelloMadeCar(x) | LoudCar(x)))", "all x.((Prius(x) & -SportsCar(x) & -LoudCar(x)) -> (MaranelloMade(x) | LoudCar(x)))"]}
{"id": "folio_train_966", "nl": "Prius is an electric car.", "fol": "IsElectricCar(Prius)", "prediction": ["all x.(Prius(x) -> ElectricCar(x))", "(ElectricCar(Prius) & ElectricCar(Prius))", "all x.(Prius(x) -> ElectricCar(x))", "Prius is an electricCar(x)", "(ElectricCar(prius) & ElectricCar(p))", "Prius is electriccar(x)", "all x.(Prius(x) -> ElectricCar(x))", "(ElectricCar(prius) & ElectricCar(p))", "all x.(Prius(x) -> ElectricCar(x))", "(ElectricCar(prius) | ElectricCar(p)))", "(ElectricCar(Prius) -> ElectricCar(Prius))", "all x.(Prius(x) -> ElectricCar(x))", "all x.(Prius(x) -> ElectricCar(x))", "All x.(Prius(x) -> ElectricCar(x))", "All x.(Prius(x) -> ElectricCar(x))", "all x.(Prius(x) -> ElectricCar(x))"]}
{"id": "folio_train_967", "nl": "Prius is not an electric car.", "fol": "-IsElectricCar(Prius)", "prediction": ["-ElectricCar(Prius)", "all x.(Prius(x) -> -ElectricCar(x))", "((Prius(p) & ElectricCar(p)) -> -ElectricCar(p))", "(-ElectricCar(Prius))", "all x.(Prius(x) -> -ElectricCar(x))", "Prius - ElectricCar(p)", "-ElectricCar(Prius)", "all x.(Prius(x) -> -ElectricCar(x))", "Prius -ElectricCar(p)", "(-ElectricCar(Prius))", "all x.(Prius(x) -> -ElectricCar(x))", "-ElectricCar(prius)", "(-ElectricCar(Prius))", "-ElectricCar(prius)", "(-ElectricCar(Prius))", "-ElectricCar(prius,p)"]}
{"id": "folio_train_968", "nl": "Prius is a Maranello-made car.", "fol": "IsMadeInMaranello(Prius)", "prediction": ["all x.(Prius(x) -> MaranelloMadeCar(x))", "(MaranelloMadeCar(Prius) & MadeIn(Prius))", "(MadeByMaranello(Prius) & MadeByMaranello(Prius))", "all x.(Prius(x) -> MaranelloMadeCar(x))", "Prius is made by Maranello.", "all x.(Prius(x) -> (MaranelloMadeCar(x) & MadeBy(x,Maranello)))", "all x.(Prius(x) -> MadeByMaranello(x))", "(MaranelloMadeCar(Prius) -> MadeInCar(Prius))", "all x y.((Prius(x) & MaranelloMadeCar(y)) -> MadeBy(x,y))", "all x.(Prius(x) -> (MaranelloMadeCar(x) & MadeBy(x,Maranello)))", "(MaranelloMadeCar(Prius) & MadeBy(Prius,Maranello))", "(MadeByMaranello(Prius) -> Car(Prius))", "(MaranelloMadeCar(Prius) -> Car(Prius))", "all x.(Prius(x) -> MaranelloMadeCar(x))", "all x.(Prius(x) -> MadeByMaranello(x))", "All x.(Prius(x) -> MaranelloMadeCar(x))"]}
{"id": "folio_train_969", "nl": "If Prius is a Ferrari or a loud car, then Prius is an electric car.", "fol": "all x.((IsFerrari(Prius) | IsLoudCar(Prius)) -> IsElectricCar(Prius))", "prediction": ["all x.((Prius(x) & (Ferrari(x) | LoudCar(x))) -> ElectricCar(x))", "all x.((Ferrari(x) | LoudCar(x)) -> ElectricCar(x))", "all x.((Prius(x) & (Ferrari(x) | LoudCar(x))) -> ElectricCar(x))", "(all x.((Prius(x) & (Ferrari(x) | LoudCar(x))) -> ElectricCar(x))", "all x y.((Prius(x) & (Ferrari(x) | LoudCar(x))) -> ElectricCar(x))", "(all x.((Prius(x) & Ferrari(x)) | LoudCar(x)) -> ElectricCar(x))", "all x.((Ferrari(x) | LoudCar(x)) -> ElectricCar(x))", "all x.(((Ferrari(x) | LoudCar(x)) & Prius(x)) -> ElectricCar(x))", "(all x.((Prius(x) & (Ferrari(x) | LoudCar(x))) -> ElectricCar(x))", "all x.((Prius(x) & (Ferrari(x) | LoudCar(x))) -> ElectricCar(x))", "all x y.((Prius(x) & (Ferrari(x) | LoudCar(x))) -> ElectricCar(x))", "all x.(((Ferrari(x) | LoudCar(x))) -> ElectricCar(x))", "all x.((Ferrari(x) | LoudCar(x)) -> ElectricCar(x))", "all x.((Prius(x) & (Ferrari(x) | Loud(x))) -> ElectricCar(x))", "all x.((Ferrari(x) | LoudCar(x)) -> ElectricCar(x))", "all x.((Prius(x) & (Ferrari(x) | Loud(x))) -> ElectricCar(x))"]}
{"id": "folio_train_970", "nl": "If something is a plant, then it is not a cute animal.", "fol": "all x.(IsPlant(x) -> -IsCuteAnimal(x))", "prediction": ["all x.((Plant(x) & -CrazyAnimal(x)) -> -CrazyAnimal(x))", "all x.((Plant(x) & -CrazyAnimal(x)) -> -CuteAnimal(x))", "all x.((Plant(x) & -CuteAnimal(x)) -> -CuteAnimal(x))", "all x.(Plant(x) -> -CrazyAnimal(x))", "all x.((Plant(x) & -CrazyAnimal(x)) -> -CrazyAnimal(x))", "all x.((Pest(x) & Plant(x)) -> -CrazyAnimal(x))", "all x y.((Plant(x) & Animal(y)) -> -Crazy(y))", "all x.(Plant(x) -> -CrazyAnimal(x))", "all x.((Plant(x) & -CrazyAnimal(x)) -> -CuteAnimal(x))", "all x.(Plant(x) -> -CuteAnimal(x))", "all x.((Plant(x)) -> -CrazyAnimal(x))", "all x.((Pest(x) & -CrazyAnimal(x)) -> -Pest(x))", "all x.(Plant(x) -> -CrazyAnimal(x))", "all x.((Plant(x)) -> -CrazyAnimal(x))", "exists x.(Plant(x) & -CrazyAnimal(x))", "exists x.(Plant(x) & -CUTEAnimal(x))"]}
{"id": "folio_train_971", "nl": "All flowers are plants.", "fol": "all x.(IsFlower(x) -> IsPlant(x))", "prediction": ["all x.(Flower(x) -> Plant(x))", "all x.(Flower(x) -> Plant(x))", "(all x.(Flower(x) -> Plant(x))", "all x.(Flower(x) -> Plant(x))", "all x y.((Flower(x) & Plant(y)) -> Plant(x))", "(all x.(Flower(x) -> Plant(x))", "all x.(Flower(x) -> Plant(x))", "all x.(Flower(x) -> Plant(x))", "all x.(Flower(x) -> Plant(x))", "all x.(Flower(x) -> Plant(x))", "all x.(Flower(x) -> Plant(x))", "all x.(Flower(x) -> Plant(x))", "all x.(Flower(x) -> Plant(x))", "all x.(Flower(x) -> Plant(x))", "all x.(Flower(x) -> Plant(x))", "exists x.(Flower(x) & Plant(x))"]}
{"id": "folio_train_972", "nl": "Every kitten is a cute animal.", "fol": "all x.(IsKitten(x) -> IsCuteAnimal(x))", "prediction": ["all x.(Kitten(x) -> CuteAnimal(x))", "all x.(Kitten(x) -> CuteAnimal(x))", "all x.(Kitty(x) -> CuteAnimal(x))", "all x.(Kitten(x) -> CuteAnimal(x))", "(CrazyAnimal(Kitten) & EveryKitten(Kitten))", "all x y.((Kitten(x) & Animal(y)) -> Cute(x,y))", "all x.(Kitty(x) -> CuteAnimal(x))", "all x.(Kitten(x) -> CuteAnimal(x))", "all x.(Knife(x) -> CuteAnimal(x))", "all x y.((Kitten(x) & Animal(y)) -> Cute(x))", "all x.(Kitty(x) -> CuteAnimal(x))", "all x.(Kitten(x) -> CuteAnimal(x))", "exists x.(Kitty(x) & CuteAnimal(x))", "all x.(Kitten(x) -> CuteAnimal(x))", "exists x.(Kitten(x) & Cute(x))", "exists x.(Kitty(x) & CuteAnimal(x))"]}
{"id": "folio_train_973", "nl": "If something is grown in a garden, then it is a flower.", "fol": "all x.(IsGrownInGarden(x) -> IsFlower(x))", "prediction": ["all x.((GrownInGarden(x) & Flower(x)) -> GrownInGarden(x))", "all x.((Garden(x) & GrownIn(x,Garden)) -> Flower(x))", "all x.((GrownInGarden(x) & Flower(x)) -> GrownInGarden(x))", "all x y.((GrownInGarden(x) & Flower(y)) -> GrownInGarden(x,y))", "all x y.((Garden(x) & GrownIn(x,y)) -> Flower(x))", "all x.(GrownInGarden(x) -> Flower(x))", "all x.((GrownInGarden(x) & Flower(x)) -> GrownInGarden(x))", "all x.((Garden(x) & GrownIn(x,Garden)) -> Flower(x))", "all x y.((GrownInGarden(x) & Flower(y)) -> GrownInGarden(x,y))", "exists x.(Garden(x) & GrownIn(x,Garden) & Flower(x))", "all x.((GrownInGarden(x) & Flowers(x)) -> Flower(x))", "all x y.((Garden(x) & GrownIn(x,y)) -> Flower(x))", "all x.(GrownInGarden(x) -> Flower(x))", "exists x.(Garden(x) & GrownIn(x,Garden))", "all x y.((Garden(x) & GrownIn(x,y)) -> Flower(x))", "all x.((GrownInGarden(x) & Flower(x)) -> GrownInGarden(x))"]}
{"id": "folio_train_974", "nl": "Piper is a kitten or a cute animal.", "fol": "(IsKitten(Piper) | IsCuteAnimal(Piper))", "prediction": ["all x.(Piper(x) -> (Kitty(x) | CuteAnimal(x)))", "(Kitty(Piper) | CuteAnimal(Piper))", "all x.(Piper(x) -> (Kitten(x) | CuteAnimal(x)))", "(Kitten(Pipeer) | CuteAnimal(Pipeer))", "all x y.((Piper(x) & Kitten(y)) | CuteAnimal(y)) -> (Kitten(x) | CuteAnimal(y)))", "all x.(Piper(x) -> (Kitty(x) | CuteAnimal(x)))", "(Kitten(piper) | CuteAnimal(piper))", "(Kitty(Piper) | CuteAnimal(Piper))", "all x.(Piper(x) -> (Kitten(x) | CuteAnimal(x)))", "all x.(Piper(x) -> (Knife(x) | CuteAnimal(x)))", "all x.(Piper(x) -> (Kitty(x) | CuteAnimal(x)))", "(Kitten(piper) | CuteAnimal(piper))", "exists x.(Piper(x) & (Kitty(x) | CuteAnimal(x)))", "exists x.(Piper(x) & (Kitten(x) | CuteAnimal(x)))", "exists x.(Kitten(x) | CuteAnimal(x))", "all x.(Piper(x) -> (Kitty(x) | CuteAnimal(x)))"]}
{"id": "folio_train_975", "nl": "Piper was grown in a garden.", "fol": "IsGrownInGarden(Piper)", "prediction": ["all x.(Piper(x) -> GrownInGarden(x))", "all x y.((Piper(x) & Garden(y)) -> GrownIn(x,y))", "all x.(Piper(x) -> GrownInGarden(x))", "(GrownInGarden(Pipeer)", "all x.(Piper(x) -> GrownInGarden(x))", "-GrownInGarden(Piper)", "all x y.((Piper(x) & Garden(y)) -> GrownIn(x,y))", "all x.(Piper(x) -> GrownInGarden(x))", "(GrownInGarden(Piper)", "all x y.((Piper(x) & Garden(y)) -> GrownIn(x,y))", "all x.(Piper(x) -> GrownInGarden(x))", "(GrownInGarden(Piper)", "all x.(Piper(x) -> GrownInGarden(x))", "(GrownInGarden(piper,garden))", "(GrownInGarden(Pipeer)", "all x y.((Piper(x) & Garden(y)) -> GrownIn(x,y))"]}
{"id": "folio_train_976", "nl": "Piper was not grown in a garden.", "fol": "-IsGrownInGarden(Piper)", "prediction": ["all x.(Piper(x) -> -GrownInGarden(x))", "(GrownInGarden(Piper) & -GrownInGarden(Piper))", "(-GrownInGarden(Piper))", "all x.(Piper(x) -> -GrownInGarden(x))", "-(GrownInGarden(Piper) | GrownInGarden(Piper))", "(-GrownInGarden(Piper))", "(all x.(Piper(x) -> GrownInGarden(x)))", "(GrownInGarden(Piper) & -GrownInGarden(Piper))", "all x.(Piper(x) -> -GrownInGarden(x))", "all x.(Piper(x) -> -GrownInGarden(x))", "-GrownInGarden(Piper)", "(GrownInGarden(Piper) & -GrownInGarden(Piper))", "all x.(Piper(x) -> -GrownInGarden(x))", "-GrownInGarden(Piper)", "all x.(Piper(x) -> -GrownInGarden(x))", "all x.(Piper(x) -> -GrownInGarden(x))"]}
{"id": "folio_train_977", "nl": "Piper is a kitten.", "fol": "IsKitten(Piper)", "prediction": ["(Kitten(Piper) & Kitten(Piper))", "(Kitty(Piper) & Kitten(Piper))", "all x.(Piper(x) -> Kitten(x))", "Piper is a Kitten(Piper)", "-Kitten(Piper)", "(Kitten(Piper) & Kitten(Piper))", "all x.(Piper(x) -> Kitten(x))", "(Kitty(Piper) & Kitten(Piper))", "Piper is a kitten.", "Piper is kitten.", "all x.(Piper(x) -> Kitten(x))", "(Kitten(Pipeer) & Kitten(Piper))", "(Kitten(Piper) & Kitten(Piper))", "all x.(Piper(x) -> Kitten(x))", "all x.(Piper(x) -> Kitten(x))", "All x.(Piper(x) -> Kitten(x))"]}
{"id": "folio_train_978", "nl": "Guam has participated in the Winter Olympics.", "fol": "ParticipatedInEvent(Guam,WinterOlympicsEvent)", "prediction": ["all x.(Guam(x) -> ParticipatedInWinterOlympics(x))", "(ParticipatedInWinterOlympics(Guam))", "Guam has participated in WinterOlympics(guam)", "(WinterOlympics(Guam) & ParticipatedIn(Guam,Olympics))", "all x y.((Guam(x) & WinterOlympics(y)) -> ParticipatedIn(x,y))", "Guam participated in WinterOlympics(Guam)", "all x.((Guam(x) & ParticipatedInWinterOlympics(x)) -> ParticipatesIn(x,y))", "all x.(Guam(x) -> ParticipatedInWinterOlympics(x))", "(ParticipatedInWinterOlympics(Guam))", "Guam has participated in WinterOlympics.", "Guam has participated in the WinterOlympics.", "all x.(Guam(x) -> ParticipatesInWinterOlympics(x))", "Guam participated in WinterOlympics.", "(ParticipatesInWinterOlympics(Guam))", "all x.(Guam(x) -> ParticipatedInWinterOlympics(x))", "All x.(Guam(x) -> ParticipatesInWinterOlympics(x))"]}
{"id": "folio_train_979", "nl": "In 1988, the Winter Olympics were held in Calgary.", "fol": "(IsYear(Y1988) -> EventHeldAt(WinterOlympicsEvent,Calgary))", "prediction": ["all x y.((WinterOlympics(x) & Calgary(y)) -> HeldIn(x,y))", "(WinterOlympics(1988) & HeldInCalgary(1988))", "In 1988, the WinterOlympics were held in Calgary.", "all x.((WinterOlympics(x) & HeldInCalgary(x)) -> HeldIn(x,y))", "1988, the WinterOlympics(WinterOlympics) were held in Calgary.", "(WinterOlympics(88) & HeldInCalgary(88))", "all x.(WinterOlympics(x) -> HeldInCalgary(x))", "(WednesdayOlympics(1988) & HeldInCalgary(1988))", "all x y.((WinterOlympics(x) & Calgary(y)) -> HeldIn(x,y))", "In 1988, the WinterOlympics were held in Calgary.", "In 1988, the Winter Olympics were held in Calgary.", "-(WinterOlympics(x) & HeldInCalgary(x,1998))", "1988, the WinterOlympics(WinterOlympics) were held in Calgary.", "(WinterOlympics(1988) & HeldInCalgary(1988))", "(WinterOlympics(x) & HeldInCalgary(x))", "All x y.((WinterOlympics(x) & Calgary(y)) -> HeldIn(x,y))"]}
{"id": "folio_train_980", "nl": "Guam sent an athlete to the Calgary Winter Olympics.", "fol": "(EventHeldAt(WinterOlympicsEvent,Calgary) -> SentAthlete(Guam))", "prediction": ["all x y.((Guam(x) & Athlete(y)) -> SendsToCalgaryWinterOlympics(x,y))", "(SentToCalgaryWinterOlympics(Guam) & Athlete(Guam))", "all x.(Guam(x) -> SendsAthleteToCalgaryWinterOlympics(x))", "all x y z.((Guam(x) & Athlete(y) & CalgaryWinterOlympics(z)) -> SendsTo(x,y,z))", "Guam sent AthleteToCalgaryWinterOlympics(Guam,Canada)", "all x.(GuamSentAthleteToCalgaryWinterOlympics(x) -> Athlete(x))", "all x y.((Guam(x) & Athlete(y)) -> SentToCalgaryWinterOlympics(x,y))", "(SentToCalgaryWinterOlympics(Guam) & Athlete(Guam))", "Guam sent AthleteToCalgaryWinterOlympics(guam)", "all x.(GuamSentAthlete(x) -> CalgaryWinterOlympics(x))", "all x y.((Guam(x) & Athlete(y)) -> CalgaryWinterOlympics(x,y))", "all x y.((GuamAthlete(x) & CalgaryWinterOlympics(y)) -> SendsTo(x,y))", "(SentAthlete(Guam) & ToCalgaryWinterOlympics(Guam))", "All x.(Guam(x) -> SendsAthleteToCalgaryWinterOlympics(x))", "Guam sent AthleteToCalgaryWinterOlympics(Guam,Ca.)", "(SentToCalgaryWinterOlympics(Guam) & Athlete(Guam))"]}
{"id": "folio_train_981", "nl": "If Guan sent an athlete to the Calgary Winter Olympics, then it participated in the Calgary Winter Olympics.", "fol": "(SentAthlete(Guam) -> ParticipatedInEvent(Guam,WinterOlympicsEvent))", "prediction": ["all x y.((Guan(x) & Athlete(y) & CalgaryWinterOlympics(x)) -> ParticipatedIn(y,x))", "all x.((Guan(x) & SendsAthleteToCalgaryWinterOlympics(x)) -> ParticipatedInCalgaryWinterOlympics(x))", "all x.((Guan(x) & sentAthlete(x) & CalgaryWinterOlympics(x)) -> ParticipatedInCalgaryWinterOlympics(x))", "all x y z.((Guan(x) & Athlete(y) & CalgaryWinterOlympics(z) & SendsTo(x,y,z)) -> ParticipatedIn(x,y,z))", "all x y.((Guan(x) & Athlete(y) & CalgaryWinterOlympics(x,y)) -> ParticipatedIn(y,x))", "all x.((Guan(x) & sentAthleteToCalgaryWinterOlympics(x)) -> ParticipatedInCalgaryWinterOlympics(x))", "all x y.((Guan(x) & Athlete(y) & SentToCalgaryWinterOlympics(x,y)) -> ParticipatedInCalgaryWinterOlympics(x,y))", "(all x.(GhanAthlete(x) -> CalgaryWinterOlympics(x)))", "All x.(Ghan(x) -> (SentToCalgaryWinterOlympics(x) & ParticipatedInCalgaryWinterOlympics(x)))", "all x.((Guan(x) & SendsAthleteToCalgaryWinterOlympics(x)) -> ParticipatedInCalgaryWinterOlympics(x))", "all x y.((Guan(x) & Athlete(y) & CalgaryWinterOlympics(x)) -> ParticipatedIn(y,x))", "all x y z.((Guan(x) & Athlete(y) & CalgaryWinterOlympics(z) & SentTo(x,y,z)) -> ParticipatedIn(x,y,z))", "all x y.((Guan(x) & Athlete(y) & SendsToCalgaryWinterOlympics(x,y)) -> ParticipatedInCalgaryWinterOlympics(x,y))", "All x.((Guan(x) & SendsAthleteToCalgaryWeatherOlympics(x)) -> ParticipatedInCalgaryWeatherOlympics(x))", "all x.((Guan(x) & SendsAthleteToCalgaryWinterOlympics(x)) -> ParticipatesInCalgaryWinterOlympics(x))", "all x y.((Guan(x) & Athlete(y) & CalgaryWinterOlympics(y)) -> ParticipatedIn(x,y))"]}
{"id": "folio_train_982", "nl": "Judd Bankert is the only athlete from Guam who has ever competed in the Winter Olympics.", "fol": "(IsFrom(Bankert,Guam) & ParticipatedInEvent(Bankert,WinterOlympicsEvent))", "prediction": ["all x.((Athlete(x) & JuddBankert(x)) -> CompetedInWinterOlympics(x))", "Judd Bankert is the only AthleteFromGuam,whoCompetedInWinterOlympics(JuddBankert,Guam))", "all x y.((Athlete(x) & Guam(y) & CompetedInWinterOlympics(x,y)) -> JuddBankert(x))", "all x.((Athlete(x) & FromGuam(x) & CompetedInWinterOlympics(x)) -> JuddBankert(x))", "Judd Bankert (Athlete(Guam) & CompetedInWinterOlympics(Guam))", "(AthleteFromGuam(JuddBankert) & OnlyAthleteFromGuamToCompeteInWinterOlympics(JuddBankert))", "Judd Bankert is the only GuamanAthleteToCompeteInWinterOlympics(JuddBankert)", "All x.(Athlete(x) -> (JuddBankert(x) & FromGuam(x) & CompetedInWinterOlympics(x)))", "all x y.((Athlete(x) & Athlete(y) & Guam(x) & CompetedInWinterOlympics(y)) -> JuddBankert(x))", "All x.((Athlete(x) & FromGuam(x) & CompetedInWinterOlympics(x)) -> JuddBankert(x))", "Judd Bankert (AthleteFromGuam) & EverCompetedInWinterOlympics(Guam))", "all x y.((Athlete(x) & Guam(y) & CompetedInWinterOlympics(x,y)) -> JuddBankert(x))", "Judd Bankert is the only AthleteFromGuam,whoCompetesInWinterOlympics(JuddBankert,Guam))", "Judd Bankert (Athlete(Judd) & GuamAthlete(Judd))", "All x.((Athlete(x) & JuddBankert(x)) -> CompetedInWinterOlympics(x))", "Judd Bankert is the only GuamanAthleteToCompeteInWinterOlympics(juddbankert)"]}
{"id": "folio_train_983", "nl": "Judd Bankert competed in the 1992 Winter Olympics.", "fol": "ParticipatedInEvent(Bankert,WinterOlympicsEvent)", "prediction": ["Judd Bankert competed in the 1992 WinterOlympics.", "all x.((JuddBankert(x) & WinterOlympics(x,1992)) -> CompetedIn(x,92))", "all x.((Bankert(x) & WinterOlympics(x,1992)) -> CompetedIn(x,92))", "(CompetedInWinterOlympics(JuddBankert,92))", "all x y.((JuddBankert(x) & WinterOlympics(y)) -> CompetedIn(x,y))", "(CompetedInWinterOlympics(JuddBankert,92))", "all x.(JuddBankert(x) -> CompetedInWinterOlympics(x,1992))", "-JuddBankert(Judd) & CompetedInWinterOlympics(Judd,92))", "Judd Bankert competed in the 1992 Winter Olympics.", "(CompetedInWinterOlympics(JuddBankert) & WinterOlympics(JuddBankert))", "(CompetesInWinterOlympics(JuddBankert,92))", "Judd Bankert competed in the 1992 WinterOlympics.", "All x.(JuddBankert(x) -> CompetedInWinterOlympics(x,92))", "Judd Bankert (JuddBankert) competed in the 1992 Winter Olympics.", "Judd Bankert competed in the 1992 Winter Olympics.", "Judd Bankert competed in the 1992 WinterOlympics."]}
{"id": "folio_train_984", "nl": "Guam has participated in the Summer Olympics at least once.", "fol": "exists x.(ParticipatedInEvent(Guam,Summerolympics) & IsYear(x))", "prediction": ["all x.(Guam(x) -> ParticipatedInSummerOlympics(x))", "(ParticipatedInSummerOlympics(Guam) & AtLeastOneTime(Guam))", "all x.((Guam(x) & ParticipatedInSummerOlympics(x)) -> AtLeastOneTime(x))", "Guam has participated in SummerOlympics(guam) ((Guam) & ParticipatedInSummerOlympics(guam)))", "all x y.((Guam(x) & SummerOlympics(y)) -> ParticipatedAtLeastOne(x,y))", "all x.((Guam(x) & SummerOlympics(x)) -> ParticipatedAtLeastOneTime(x))", "all x.(Guam(x) -> ParticipatedInSummerOlympics(x))", "Guam has participated in SummerOlympicsAtLeastOneTime(Guam)", "(ParticipatedInSummerOlympics(Guam) & AtLeastOneTime(Guam))", "all x y.((Guam(x) & SummerOlympics(y)) -> ParticipatedAtLeastOneTime(x,y))", "all x.((Guam(x) & ParticipatedInSummerOlympics(x)) -> ParticipatedAtLeastOneTime(x))", "all x.(Guam(x) -> ParticipatedInSummerOlympics(x))", "(ParticipatedInSummerOlympics(Guam) & AtLeastOneTime(Guam))", "All x.(Guam(x) -> ParticipatedAtLeastOneSummerOlympics(x))", "all x.(Guam(x) -> ParticipatesInSummerOlympics(x))", "All x.(Guam(x) -> ParticipatesInSummerOlympics(x))"]}
{"id": "folio_train_985", "nl": "Michael O'Donnell is a British physician, journalist, author and broadcaster.", "fol": "(IsBritish(Michael) & IsPhysician(Michael) & IsJournalist(Michael) & IsAuthor(Michael) & IsBroadcaster(Michael))", "prediction": ["(BritishPhDennis(MichaelO'Donnell) & Physician(MichaelO'Donnell) & Journalist(MichaelO'Donnell) & Author(MichaelO'Donnell) & Broadcaster(MichaelO'Donnell)", "all x.((BritishPharmacist(x) & BritishJournalist(x) & Author(x) & Broadcaster(x)) -> MichaelO'Donnell(x))", "(BritishPhD(MichaelO'Donnell) & Physician(MichaelO'Donnell) & Journalist(MichaelO'Donnell) & Author(MichaelO'Donnell) & Broadcaster(MichaelO'Donnell)", "((Michael O'Donnell(Michael) | BritishPharmacist(Michael)) & BritishJournalist(Michael)) & Author(Michael) & Broadcaster(Michael))", "all x.((BritishPhDennis(x) & BritishJournalist(x) & Author(x) & Broadcaster(x)) -> MichaelO'Donnell(x))", "(BritishPhysicianJournalistAuthorAndBroadcaster(MichaelO'Donnell)", "all x.((Michael O'Donnell(x) & BritishPharmacist(x) & Journalist(x) & Author(x) & Broadcaster(x)) -> Physician(x))", "all x.(MichaelO'Donnell(x) -> (BritishPhDermott(x) & BritishJournalist(x) & Author(x) & Broadcaster(x)))", "Michael O'Donnell (BritishPhD(x) & Physician(x) & Journalist(x) & Author(x) & Broadcaster(x))", "all x.((Doctor(x) & BritishJournalist(x) & Author(x) & Broadcaster(x)) -> MichaelO'Donnell(x))", "Michael O'Donnell (BritishPharmacistJournalistAuthorBroadcaster(Of(O) & BritishPharmacist(O))", "Michael O'Donnell is a British Physician,Journalist,Author and Broadcaster.", "(BritishMedical(Michael O'Donnell) & BritishJournalist(Michael O'Donnell) & Author(Michael O'Donnell) & Broadcaster(Michael O'Donnell)", "(BritishPhDennis(MichaelO'Donnell) & Physician(MichaelO'Donnell) & Journalist(MichaelO'Donnell) & Author(MichaelO'Donnell) & Broadcaster(MichaelO'Donnell)", "Michael O'Donnell (BritishPhD(x) & Physician(x) & Journalist(x) & Author(x) & Broadcaster(x))", "Michael O'Donnell (BritishPhD(x) & Physician(x) & Journalist(x) & Author(x) & Broadcaster(x))"]}
{"id": "folio_train_986", "nl": "One of the word-setters of My Word! was Michael O'Donnell.", "fol": "IsWordSetter(Michael)", "prediction": ["All x.((WordSetter(x) & MyWord(x)) -> MichaelO'Donnell(x))", "(WordSetter(MeanWord) & MichaelO'Donnell(MeanWord))", "Michael O'Donnell, one of the word-setters of MyWord!", "(MichaelO'Donnell(MichaelO'Donnell) & WordSetter(MichaelO'Donnell)", "-(WordSetter(x) & MyWord(x)) -> MichaelO'Donnell(x))", "One of the word-setters of MyWord! was MichaelO'Donnell.", "all x y.((WordSetter(x) & MyWord(y)) -> MichaelO'Donnell(x))", "One of the wordsetters of MyWord! was MichaelO'Donnell.", "All x.((MichaelO'Donnell(x) & WordSetter(x)) -> MyWord!", "all x.((WordSetter(x) & MyWord(x)) -> MichaelO'Donnell(x))", "(WordSetter(MeanWord!) & MichaelO'Donnell(Michael))", "All x.((WordSetter(x) & MyWord!) -> MichaelO'Donnell(x))", "(WordSetter(Melodge,MyWord)) & MichaelO'Donnell(Michael)", "All x.(WordSetter(x) -> MichaelO'Donnell(x))", "all x y.((WordSetter(x) & MyWord(y)) -> MichaelO'Donnell(x))", "all x.((WordSetter(x) & MyWord!) -> MichaelO'Donnell(x))"]}
{"id": "folio_train_987", "nl": "The magazine World Medicine was edited by Michael O'Donnell.", "fol": "(IsMagazine(Worldmedicine) & EditedBy(Worldmedicine,Michael))", "prediction": ["all x.(WorldMedicine(x) -> EditedByMichaelO'Donnell(x))", "all x y.((Magazine(x) & WorldMedicine(y)) -> EditedBy(x,y))", "WorldMedicine(x) & EditedByMichaelO'Donnell(x))", "The magazine WorldMedicine was edited by MichaelO'Donnell.", "(EditedByMichaelO'Donnell(WorldMedicine)", "the magazine WorldMedicine(x) & EditedByMichaelO'Donnell(x))", "The magazine WorldMedicine(x) was edited by MichaelO'Donnell(x))", "All x.(WorldMedicine(x) -> EditedByMichaelO'Donnell(x))", "all x y.((Magazine(x) & WorldMedicine(y)) -> EditedByMichaelO'Donnell(x,y))", "WorldMedicine(x) & EditedByMichaelO'Donnell(x))", "(EditedByMichaelO'Donnell(WorldMedicine)", "All x.(WorldMedicine(x) -> EditedByMichaelO'Donnell(x))", "all x y.((Magazine(x) & WorldMedicine(y)) -> EditedBy(x,y))", "(EditedByMichaelO'Donnell(WorldMedium))", "All x.(WorldMedicine(x) -> EditedByMichaelO'Donnell(x))", "All x.(WorldMedicine(x) -> EditedByMichaelO'Donnell(x))"]}
{"id": "folio_train_988", "nl": "Michael O'Donnell was born in Yorkshire as the son of a general practitioner.", "fol": "exists x.(BornInLocation(Michael,Yorkshire) & IsSonOf(Michael,x) & IsGeneralPractitioner(x))", "prediction": ["(Birth(Michael O'Donnell,Yorkshire) & SonOfGeneralPharmacist(Michael O'Donnell)", "Michael O'Donnell was born in Yorkshire as the son of a general practitioner.", "(bornInYorkshire(Michael O'Donnell,Yorkshire) & SonOfGeneralPractitioner(Michael O'Donnell,Yorkshire))", "all x.((Michael O'Donnell(x) & BornInYorkshire(x)) -> SonOfGeneralPharmacist(x))", "all x.(MichaelO'Donnell(x) -> (BirthInYorkshire(x) & SonOfGeneralPractitioner(x)))", "all x.((Birth(x) & SonOfGeneralPharmacist(x)) -> MichaelO'Donnell(x))", "(BirthOfGeneralPracticer(Michael O'Donnell,Yorkshire) & SonOfGeneralPractitioner(Michael O'Donnell,Yorkshire))", "O'Donnell, Michael, was born in Yorkshire as the son of a general practitioner.", "all x y.((Michael O'Donnell(x) & GeneralPracticer(y)) -> BornInYorkshire(x,y))", "(Birth(Michael O'Donnell) & BornInYorkshire(Michael O'Donnell,GeneralPractitioner))", "Michael O'Donnell (born in Yorkshire) & SonOfGeneralPharmacist(x))", "Michael O'Donnell (bornInYorkshire) & SonOfGeneralPharmacist(Michael))", "(bornInYorkshire(Michael O'Donnell,Yorkshire) & SonOfGeneralPharmacist(Michael O'Donnell,Yorkshire))", "Michael O'Donnell was born in Yorkshire as the son of a general practitioner.", "Michael O'Donnell was born in Yorkshire, England, as the son of a general practitioner.", "all x.((Michael O'Donnell(x) & BornInYorkshire(x)) -> GeneralPractitioner(x))"]}
{"id": "folio_train_989", "nl": "The son of a general practitioner was a word-setter of My Word!.", "fol": "exists x y.(IsSonOf(x,y) & IsGeneralPractitioner(y) & IsWordSetter(x))", "prediction": ["all x y.((Son(x) & GeneralPharmacist(y)) -> WordSetterOfMyWord(x))", "all x.((SonOfGeneralPharmacist(x) & WordSetterOfMyWord(x)) -> -WordSetterOfMyWord(x))", "all x y.((Son(x) & GeneralPracticer(y)) -> WordSetterOfMyWord(x))", "(SonOfGeneralPractitioner(s) & WordSetterOfMyWord!)", "(SonOfGeneralPharmacist(s) & WordSetterOfMyWord!)", "all x y.((SonOfGeneralPharmacist(x) & GeneralPharmacist(y)) -> WordSetterOfMyWord(x))", "all x y z.((Son(x) & GeneralPharmacist(y) & GeneralPharmacist(z) & GeneralPharmacist(z)) -> WordSetterOfMyWord(x,y,z))", "the son of a general practitioner was a wordsetter of MyWord!", "all x.((SonOfGeneralPharmacist(x) & WordSetterOfMyWord!) -> SonOfGeneralPharmacist(x))", "all x.((SonOfGeneralPracticer(x) & WordSetterOfMyWord!) -> SonOf(x,y))", "(WordSetterOfMyWord!)", "all x.((SonOfGeneralPractitioner(x) & WordSetterOfMyWord(x)) -> -WordSetterOfMyWord(x))", "(SonOfGeneralPharmacist(son,x) & WordSetterOfMyWord!)", "all x.(SonOfGeneralPharmacist(x) -> WordSetterOfMyWord!", "all x y.((SonOfGeneralPharmacist(x) & GeneralPharmacist(y)) -> WordSetterOfMyWord!", "(all x.(SonOfGeneralPracticer(x) -> WordSetter(x)))"]}
{"id": "folio_train_990", "nl": "World Medicine is not a magazine.", "fol": "-IsMagazine(Worldmedicine)", "prediction": ["all x.(WorldMedicine(x) -> -Magazine(x))", "all x.(WorldMedicine(x) -> -Magazine(x))", "(WorldMedicine.com) & -Magazine(WorldMedicine))", "all x.((WorldMedicine(x) & -Magazine(x)) -> -(Magazine(x) & -Magazine(x)))", "-Magazine(WorldMedicine)", "the WorldMedicineMagazine(WorldMedicine)", "all x.(WorldMedicine(x) -> -Magazine(x))", "(WorldMedicine.com) & -Magazine(WorldMedicine))", "all x.((WorldMedicine(x) & -Magazine(x)) -> -Magazine(x))", "(-Magazine(WorldMedium))", "all x.(WorldMedicine(x) -> -Magazine(x))", "-Magazine(WorldMedicine)", "All x.(WorldMedium(x) -> -Magazine(x))", "-Magazine.", "All x.(WorldMedicine(x) -> -Magazine(x))", "All x.(WorldMedium(x) -> -Magazine(x))"]}
{"id": "folio_train_991", "nl": "There are no British authors.", "fol": "-exists x.(IsBritish(x) & IsAuthor(x))", "prediction": ["-exists x.(BritishAuthor(x) & -Author(x))", "exists x.(BritishAuthor(x) & -BritishAuthor(x))", "(exists x.(BritishAuthor(x) & -BritishAuthor(x)))", "exists x.(BritishAuthor(x) & -exists y.(BritishAuthor(y) & BritishAuthor(z)))", "(NoBritishAuthor(x) & -exists y.(BritishAuthor(y) & BritishAuthor(y)))", "-BritishAuthors(x)", "-exists x.(BritishAuthor(x) & -Author(x))", "-(BritishAuthor(x) & -BritishAuthor(x))", "there are no BritishAuthors.", "Currently, there are no BritishAuthors(x)", "-exists x.(BritishAuthor(x) & -BritishAuthor(x))", "(NoBritishAuthor(x) & -BritishAuthor(x))", "there are no BritishAuthors.", "-exists x.(BritishAuthor(x) & Author(x))", "-exists x.(BritishAuthor(x) & -Author(x))", "-exists x.(BritishAuthor(x))"]}
{"id": "folio_train_992", "nl": "There are no journalists that were born in Yorkshire.", "fol": "-exists x.(IsJournalist(x) & BornInLocation(x,Yorkshire))", "prediction": ["-exists x.(Journalist(x) & BornInYorkshire(x))", "exists x.(Journalist(x) & BornInYorkshire(x))", "all x.((Journalist(x) & BornInYorkshire(x)) -> -BirthInYorkshire(x))", "(exists x.(Journalist(x) & BornInYorkshire(x)))", "-exists x.(Journalist(x) & BornInYorkshire(x))", "there are no journalists born in Yorkshire.", "(NoJournalistsBornInYorkshire(Journalist))", "exists x.(Journalist(x) & BornInYorkshire(x))", "-exists x.(Journalist(x) & BornInYorkshire(x))", "there are no journalists born in Yorkshire.", "-exists x.(Journalist(x) & BornInYorkshire(x))", "-exists x.(Journalist(x) & BornIn(x,Yorkshire))", "-exists x.(Journalist(x) & BornInYorkshire(x))", "-exists x.(Journalist(x) & BornIn(x,Yorkshire))", "-exists x.(Journalist(x) & BornInYorkshire(x))", "-exists x.(Journalist(x) & BornIn(x,Yorkshire))"]}
{"id": "folio_train_993", "nl": "There is a son of a general practitioner that is not an author.", "fol": "exists y.(IsSonOf(y,x) & IsGeneralPractitioner(x) & -IsAuthor(y))", "prediction": ["exists x y.(Son(x) & GeneralPharmacist(y) & GeneralPharmacist(x) & -Author(x))", "exists x.(SonOfGeneralPharmacist(x) & -Author(x))", "exists x y.((Son(x) & GeneralPracticer(y) & GeneralPharmacist(y) & -Author(y)) -> Son(x,y))", "exists x.(SonOfGeneralPracticer(x) & -Author(x))", "exists x y.(Son(x) & GeneralPracticer(y) & GeneralPharmacist(x) & -Author(x))", "exists x y.((Son(x) & GeneralPharmacist(y) & GeneralPharmacist(y)) & -Author(x))", "exist's x y.(Son(x,y) & GeneralPharmacist(y) & GeneralPharmacist(x) & -Author(x))", "exists x y.((Son(x) & GeneralPracticer(y) & GeneralPracticer(y)) -> -Author(x))", "all x y z.((Son(x) & GeneralPracticer(y) & GeneralPharmacist(z) & GeneralPharmacist(z) & -Author(x)) -> -Author(x))", "exists x y.(Son(x,y) & GeneralPharmacist(y) & GeneralPharmacist(x) & -Author(x))", "all x y z.((Son(x) & GeneralPharmacist(y) & GeneralPharmacist(z) & GeneralPharmacist(z)) -> -Author(x))", "exists x.(SonOfGeneralPharmacist(x) & -Author(x))", "exists x y.((Son(x) & GeneralPracticer(y) & GeneralPracticer(y) & -Author(y)) -> Son(x,y))", "exists x.(GeneralPracticerSon(x) & -Author(x))", "exists x.(SonOfGeneralPracticer(x) & -Author(x))", "exists x.(GeneralPracticerSon(x) & -Author(x))"]}
{"id": "folio_train_994", "nl": "No homework is fun.", "fol": "all x.(IsHomework(x) -> -IsFun(x))", "prediction": ["-exists x.(Homework(x) & Fun(x))", "-exists x.(Homework(x) & Fun(x))", "-all x.(Homework(x) -> Fun(x))", "-(Homework(x) & Fun(x))", "-exists x.(Homework(x) & Fun(x))", "all x.(Homework(x) -> -Fun(x))", "\u2013 -HomeworkFun(x))", "-all x.(Homework(x) -> Fun(x))", "-(Homework(x) & Fun(x))", "-exists x.(Homework(x) & Fun(x))", "(exists x.(Homework(x) & Fun(x)))", "all x.(Homework(x) -> -Fun(x))", "-exists x.(Homework(x) & Fun(x))", "all x.(Homework(x) -> -Fun(x))", "-exists x.(Homework(x) & Fun(x))", "-exists x.(Homework(x) & Fun(x))"]}
{"id": "folio_train_995", "nl": "Some reading is homework.", "fol": "exists x.(IsReading(x) & IsHomework(x))", "prediction": ["exists x.(Reading(x) & Homework(x))", "exists x.(Reading(x) & Homework(x))", "exists x.(Reading(x) & Homework(x))", "exists x.(Reading(x) & Homework(x))", "(exists x.(Reading(x) & Homework(x)))", "exists x y.(Reading(x) & Homework(y))", "exists x.(Reading(x) & Homework(x))", "exists x.(Language(x) & Homework(x))", "exists x.(Reading(x) & Homework(x))", "exists x.(Reading(x) & Homework(x))", "exists x.(Lesson(x) & Homework(x))", "exists x.(Reading(x) & Homework(x))", "exists x.(Reading(x) & Homework(x))", "exists x.(Reading(x) & Homework(x))", "exists x.(Reading(x) & Homework(x))", "exists x.(Reading(x) & Homework(x))"]}
{"id": "folio_train_996", "nl": "Some reading is fun.", "fol": "exists x.(IsReading(x) & IsFun(x))", "prediction": ["exists x.(Reading(x) & Fun(x))", "exists x.(Reading(x) & Fun(x))", "all x y.((Reading(x) & Fun(y)) -> Reads(x,y))", "exists x.(Reading(x) & Fun(x))", "(exists x.(Reading(x) & Fun(x)))", "exists x.(Reading(x) & Fun(x))", "all x y.(Reading(x) -> Fun(x))", "exists x.(Reading(x) & Fun(x))", "exists x.(Lesson(x) & Fun(x))", "all x y.(Reading(x) -> Fun(x))", "exists x.(Reading(x) & Fun(x))", "exists x.(Reading(x) & Fun(x))", "exists x.(Reading(x) & Fun(x))", "exists x.(Reading(x) & Fun(x))", "exists x.(Reading(x) & Fun(x))", "exists x.(Reading(x) & Fun(x))"]}
{"id": "folio_train_997", "nl": "If violence is good, it is justified.", "fol": "all x.((IsViolence(x) & IsGood(x)) -> IsJustified(x))", "prediction": ["all x.((Violence(x) & Good(x)) -> Justified(x))", "all x.((Violence(x) & Good(x)) -> Justified(x))", "all x.(Good(x) -> Justified(x))", "(Good(violence) & Justified(violence))", "all x.((Violence(x) & Good(x)) -> Justified(x))", "all x y.((Violence(x) & Good(x)) -> Justified(y))", "all x.((Violence(x) & Good(x)) -> Justified(x))", "all x.(Good(x) -> Justified(x))", "all x y.((Violence(x) & Good(x)) -> Justified(y))", "exists x.(Violence(x) & Good(x))", "all x.((Violence(x) & Good(x)) -> Justified(x))", "all x.(Good(x) -> Justified(x))", "all x.((Violence(x) & Good(x)) -> Justified(x))", "all x.(Good(x) -> Justified(x))", "all x.((Violence(x) & Good(x)) -> Justifiable(x))", "all x.((Violence(x) & Good(x)) -> Justified(x))"]}
{"id": "folio_train_998", "nl": "If something is justified, it is lawful.", "fol": "all x.(IsJustified(x) -> IsLawful(x))", "prediction": ["all x.(Justified(x) -> Lawful(x))", "all x.((Justified(x) & Lawful(x)) -> Justified(x))", "all x.(Justified(x) -> Lawful(x))", "all x.((Justified(x) & Lawful(x)) -> Justified(x))", "all x y.((Justified(x) & Lawful(y)) -> Justified(x))", "all x.((Justified(x) & Legal(x)) -> Legal(x))", "all x.(Justified(x) -> Lawful(x))", "all x y.((Justified(x) & Lawful(y)) -> Justified(x,y))", "all x.(Justifiable(x) -> Lawful(x))", "all x.(Justified(x) -> Legal(x))", "all x.((Justified(x) & Lawful(x)) -> Legal(x))", "all x y.((Justified(x) & Lawful(y)) -> Justified(x))", "all x.((Justified(x) & Legal(x)) -> Legal(x))", "all x.(Justified(x) -> Lawful(x))", "exists x.(Justified(x) & Legal(x))", "exists x.(Justified(x) & Lawful(x))"]}
{"id": "folio_train_999", "nl": "If violence is good, it is lawful.", "fol": "all x.((IsViolence(x) & IsGood(x)) -> IsLawful(x))", "prediction": ["all x.((Violence(x) & Good(x)) -> Lawful(x))", "all x.((Violence(x) & Good(x)) -> Lawful(x))", "all x.((Violence(x) & Good(x)) -> Lawful(x))", "all x y.((Violence(x) & Good(x)) -> Lawful(y))", "all x.(Good(x) -> Lawful(x))", "all x.((Violence(x) & Good(x)) -> Lawful(x))", "all x y.((Violence(x) & Good(x)) -> Lawful(y))", "all x.(Good(x) -> Lawful(x))", "all x.((Violence(x) & Good(x)) -> Legal(x))", "exists x.(Violence(x) & Good(x))", "exists x.(Good(x) & Violence(x) & Lawful(x))", "all x.(Good(x) -> Lawful(x))", "all x.((Violence(x) & Good(x)) -> Lawful(x))", "all x.((Violence(x) & Good(x)) -> Legal(x))", "all x.((Violence(x) & Good(x)) -> Lawful(x))", "all x.((Violence(x) & Good(x)) -> Legal(x))"]}
{"id": "folio_train_1000", "nl": "All people who have a horse ranch regularly ride horses for pleasure and sport.", "fol": "all x.(HasHorseRanch(x) -> RidesHorsesForPleasureAndSport(x))", "prediction": ["all x.(HasHorseRiver(x) -> RegularRideHorsesForPlenishAndSport(x))", "all x.((Person(x) & HorseRiver(x)) -> RegularRideHorsesForPlenishAndSport(x))", "all x.(HasHorseRiver(x) -> (RidesHorsesForPleasure(x) & RidesHorsesForSport(x)))", "all x y.((Person(x) & HorseRiver(y)) -> RegularRideHorsesForPleasureAndSport(x,y))", "all x.((Person(x) & HorseRiver(x)) -> RidesHorsesForPlenishAndSport(x))", "all x y.((Person(x) & HorseRiver(y)) -> (RidesHorses(x,y) & ForPlenish(y) & ForSport(y)))", "all x.(HasHorseRiver(x) -> RegularRide(x,horse))", "all x.((Person(x) & HasHorseRiver(x)) -> RegularRideHorsesForPlenishAndSport(x))", "all x y.((Person(x) & HorseRiver(y) & Has(x,y)) -> RegularRideHorsesForPlenishAndSport(x))", "all x.(HasHorseRiver(x) -> (RidesHorses(x) & ForPlenish(x) & ForSport(x)))", "all x.(HasHorseRidge(x) -> RegularRideHorsesForPlenishAndSport(x))", "all x.((Person(x) & HorseRiver(x)) -> RegularRideHorsesForPleasureAndSport(x))", "all x y.((Person(x) & HorseRanch(x) & HorseRail(y)) -> RegularRide(x,y))", "all x.(HasHorseRand(x) -> RegularRideHorsesForPlenishAndSport(x))", "all x.(HasHorseRanch(x) -> RegularlyRidesHorsesForPleasureAndSport(x))", "all x.((Person(x) & HorseRanch(x)) -> RidesHorsesForPleasureAndSport(x))"]}
{"id": "folio_train_1001", "nl": "All people who have a lot of disposable income have a horse ranch.", "fol": "all x.(HasDisposableIncome(x) -> HasHorseRanch(x))", "prediction": ["all x.((Person(x) & HasMoreDiscoverableIncome(x)) -> HasHorseRiver(x))", "all x.((Person(x) & LotsOfDisposableIncome(x)) -> HorseRiver(x))", "all x.((Person(x) & HasMoreDependentIncome(x)) -> HasHorseRiver(x))", "all x y.((Person(x) & HasMoreDiscoverableIncome(x,y)) -> HasHorseRiver(x))", "all x.((Person(x) & DisposableIncome(x)) -> HorseRiver(x))", "(all x.((Person(x) & HasMoreDependentIncome(x)) -> HasHorseRiver(x))", "all x.((People(x) & HasMoreDiscoverableIncome(x)) -> HasHorseRiver(x))", "all x y.((Person(x) & DisposableIncome(x) & HasHorseRiver(y)) -> HasHorseRiver(x,y))", "all x.((People(x) & DisposableIncome(x)) -> HorseRiver(x))", "all x.(HasMoreDisposableIncome(x) -> HasHorseRiver(x))", "all x y.((Person(x) & HasMoreDependentIncome(x)) -> HasHorseRiver(x))", "all x.((Person(x) & LotsOfDisposableIncome(x)) -> HorseRiver(x))", "all x.((Person(x) & HasMoreDisposableIncome(x)) -> HorseRiver(x))", "all x.((People(x) & LotsOfDisposableIncome(x)) -> HorseRiver(x))", "all x.((Person(x) & DisposableIncome(x)) -> HorseRiver(x))", "all x.((Person(x) & LotsOfDisposableIncome(x)) -> HorseRanch(x))"]}
{"id": "folio_train_1002", "nl": "If people compete in horse dressage shows, then they have a lot of disposable income.", "fol": "all x.(CompetesInDressageShows(x) -> HasDisposableIncome(x))", "prediction": ["all x.(CompeteInHorseDressageShows(x) -> DisposableIncome(x))", "all x.((Person(x) & CompetesInHorseDressageShows(x)) -> DisposableIncome(x))", "all x.(CompetesInHorseDressageShows(x) -> DisposableIncome(x))", "all x y.((Person(x) & CompetesInHorseDressage(x) & HorseDressage(y)) -> DisposableIncome(x))", "all x y.((Person(x) & CompetesInHorseDressageShows(x) & HorseDressageShows(y)) -> DisposableIncome(x))", "all x.((Person(x) & CompetesInHorseDressage(x)) -> DisposableIncome(x))", "all x.(CompeteInHorseDressageShows(x) -> DisposableIncome(x))", "all x y.((Person(x) & HorseDressageShow(y) & CompetesIn(x,y)) -> DisposableIncome(x))", "all x y.((People(x) & CompetesInHorseDressage(x) & HorseDressage(y)) -> DisposableIncome(x,y))", "all x.((People(x) & CompetesInHorseDressageShows(x)) -> DisposableIncome(x))", "all x.(CompetesInHorseDressageShows(x) -> DisposableIncome(x))", "all x y.((CompeteInHorseDressageShows(x) & Person(y)) -> DisposableIncome(y))", "all x.((Person(x) & CompetesInHorseDressageShows(x)) -> DisposableIncome(x))", "all x y.((Person(x) & CompetesInHorseDressage(x) & HorseDressage(y)) -> DisposableIncome(x,y))", "all x.(CompetesInHorseDressageShows(x) -> DisposableIncome(x))", "exists x.(CompeteInHorseDressage(x) & DisposableIncome(x))"]}
{"id": "folio_train_1003", "nl": "If people compete in horse dressage shows, then they have invested in high-quality equestrian gear and equipment.", "fol": "all x.(CompetesInDressageShows(x) -> InvestedInEquestrianGear(x))", "prediction": ["all x.(CompeteInHorseDressageShows(x) -> (InvestedInHighQualityEquestrianGear(x) & InvestedInHighQualityEquestrianEquipment(x)))", "all x.((Person(x) & CompetesInHorseDressageShows(x)) -> HighQualityEquestrianGearAndEquipment(x))", "all x.(CompetesInHorseDressageShows(x) -> (InvestedInHighQualityEquestrianGear(x) & InvestedInHighQualityEquestrianEquipment(x)))", "all x y.((Person(x) & CompetesInHorseDressageShows(x) & HighQualityEquestrianGearAndEquipment(y)) -> InvestedIn(x,y))", "all x y.((Person(x) & CompetesInHorseDressage(x) & HorseDressage(y)) -> HighQualityEquestrianGearAndEquipment(x,y))", "all x y.((CompeteInHorseDressageShows(x) & Person(y)) -> (InvestedInHighQualityEquestrianGear(y) & InvestedInHighQualityEquipment(y)))", "all x y z.((Person(x) & HorseDressageShow(y) & HorseGear(z) & Competes(x,y)) -> HighQualityEquestrianGearAndEquipment(x,z))", "all x.((People(x) & CompetesInHorseDressageShows(x)) -> HighQualityEquestrianGearAndEquipment(x))", "all x.(CompeteInHorseDressageShows(x) -> HighQualityEquestrianGearAndEquipment(x))", "all x.((Person(x) & CompetesInHorseDressageShows(x)) -> HighQualityEquestrianGearAndEquipment(x))", "all x y.((Person(x) & CompetesInHorseDressageShows(x)) -> (InvestedInHighQualityEquestrianGear(x) & InvestedInHighQualityEquipment(x)))", "all x y z.((Person(x) & HorseDressageShow(y) & EquestrianGear(z) & Competes(x,y)) -> HighQualityInvestment(x,z))", "all x.(CompetesInHorseDressageShows(x) -> HighQualityEquestrianGearAndEquipment(x))", "all x.((Person(x) & CompetesInHorseDressage(x)) -> HighQualityEquestrianGearAndEquipment(x))", "all x y.((CompeteInHorseDressageShows(x) & Person(y)) -> HighQualityEquestrianGearAndEquipment(y,x))", "all x.(CompetesInHorseDressageShows(x) -> HighQualityEquestrianGearAndEquipment(x))"]}
{"id": "folio_train_1004", "nl": "If people regularly ride horses for pleasure and sport, then they do not live in cramped residential buildings.", "fol": "all x.(RidesHorsesForPleasureAndSport(x) -> -LivesInCrampedResidentialBuildings(x))", "prediction": ["all x.((People(x) & RegularRideHorses(x) & ForPlenish(x) & ForSport(x)) -> -CrombedResidentialBuildings(x))", "all x.((Person(x) & RegularRideHorses(x) & ForPlenish(x) & ForSport(x)) -> -CrommedResidentialBuildings(x))", "all x.((People(x) & RegularlyRidesHorses(x)) -> -CrombedResidentialBuildings(x))", "all x y.((Person(x) & RegularRideHorses(x) & ForPlenish(x) & ForSport(x)) -> -CrommedResidentialBuildings(y))", "all x.(RegularRidingHorsesForPlenishAndSport(x) -> -CrombedResidentialBuildings(x))", "(all x.(RegularRidingHorses(x) -> -CrombedResidentialBuildings(x)))", "all x.(RideHorsesForPlenishAndSport(x) -> -CrombedResidentialBuildings(x))", "all x.(RegularRideHorses(x) -> -CrombedResidentialBuildings(x))", "all x y.((People(x) & RegularRideHorses(x) & ForPlenish(x) & ForSport(x)) -> -CrommedResidentialBuildings(y))", "all x.((RideHorses(x) & ForPlenish(x) & ForSport(x)) -> -CrombedResidentialBuildings(x))", "all x y.((Person(x) & Horse(y) & RegularRide(x,y)) -> -CrombedResidentialBuilding(x))", "all x.((Person(x) & RegularRideHorses(x)) -> -CrommedResidentialBuildings(x))", "all x y.((Person(x) & RegularRideHorses(x) & ForPlenish(x) & ForSport(x)) -> -CrombedResidentialBuilding(y))", "all x y.((People(x) & RegularRideHorses(x) & ForPleasureAndSport(x)) -> -CrombedResidentialBuildings(y))", "all x.(RideHorsesForPleasureAndSport(x) -> -CrombedResidentialBuildings(x))", "all x.(RegularRidingHorsesForPlenishAndSport(x) -> -CrommedResidentialBuildings(x))"]}
{"id": "folio_train_1005", "nl": "Manny either has a horse ranch and lives in cramped residential buildings, or he neither has a horse ranch nor lives in cramped residential buildings.", "fol": "((HasHorseRanch(Manny) & LivesInCrampedResidentialBuildings(Manny) & -(-HasHorseRanch(Manny) & -LivesInCrampedResidentialBuildings(Manny))) | (-(HasHorseRanch(Manny) & LivesInCrampedResidentialBuildings(Manny)) & -HasHorseRanch(Manny) & -LivesInCrampedResidentialBuildings(Manny)))", "prediction": ["(all x.(Manny(x) -> (HasHorseRiver(x) & LivesInCrombedResidentialBuildings(x))) | (-HasHorseRiver(x) & LivesInCrombedResidentialBuildings(x))))", "all x.(Manny(x) -> (HasHorseRiver(x) & LivesInCrombedResidentialBuildings(x)) | (-HasHorseRiver(x) & LivesInCrombedResidentialBuildings(x))))", "(all x.(HasHorseRiver(x) -> LivesInCrommedResidentialBuildings(x)) | (-HasHorseRiver(x) & LivesInCrommedResidentialBuildings(x))))", "all x y.((Manny(x) & HorseRiver(y) & CrawledResidentialBuildings(x)) | (-HasHorseRiver(x) & CrawledResidentialBuildings(y))))", "(HasHorseRiver(Manny) | (-HasHorseRiver(Manny) & LivesInCrombedResidentialBuildings(Manny))))", "all x.(Munny(x) -> (HasHorseRidge(x) & LivesInCrombedResidentialBuildings(x)) | (-HasHorseRidge(x) & LivesInCrombedResidentialBuildings(x))))", "(all x.(Munny(x) -> (HasHorseRiver(x) & LivesInCrommedResidentialBuildings(x))) | (-HasHorseRiver(x) & LivesInCrommedResidentialBuildings(x))))", "all x.(Manny(x) -> (HasHorseRidge(x) & LivesInCrommedResidentialBuildings(x)) | (-HasHorseRidge(x) & LivesInCrommedResidentialBuildings(x))))", "all x y.((Manny(x) & HorseRidge(x) & CrawledResidentialBuildings(y)) -> (-HasHorseRidge(x) & LivesInCrawledResidentialBuildings(x)))", "all x y.((Manny(x) & HorseRiver(x) & CrawledResidentialBuildings(y)) -> (Has(x,y) & -LivesIn(x,y)))", "(all x.(HasHorseRiver(x) -> LivesInCrombedResidentialBuildings(x)) | (-HasHorseRiver(x) & LivesInCrombedResidentialBuildings(x))))", "exists x.(Manny(x) & ((HasHorseRand(x) & LivesInCrombedResidentialBuildings(x)) | -HasHorseRand(x) & LivesInCrombedResidentialBuildings(x))))", "all x.(Mandy(x) -> ((HasHorseRidge(x) & LivesInCrombedResidentialBuildings(x)) | -(HasHorseRidge(x) & LivesInCrombedResidentialBuildings(x))))", "exists x.(Manny(x) & ((HasHorseRiver(x) & CrawledResidentialBuildings(x)) | -HasHorseRiver(x) & CrawledResidentialBuildings(x))))", "(all x.(Manny(x) -> (HasHorseRiver(x) & LivesInCrombedResidentialBuildings(x))) | (-HasHorseRiver(x) & LivesInCrombedResidentialBuildings(x))))", "(all x.(Mandy(x) -> (HasHorseRanch(x) & LivesInCrombedResidentialBuildings(x)) | (-HasHorseRanch(x) & LivesInCrombedResidentialBuildings(x))))"]}
{"id": "folio_train_1006", "nl": "Manny regularly rides horses for pleasure and sport.", "fol": "RidesHorsesForPleasureAndSport(Manny)", "prediction": ["all x.(Manny(x) -> (Rides(x,horse) & ForPlenish(x) & ForSport(x)))", "(Rides(Manny,Horse) & ForPlenish(Manny,Horse) & ForSport(Manny,Horse))", "all x y.((Manny(x) & Horse(y)) -> (RidesForPlaisance(x,y) & RidesForSport(x,y)))", "all x.(Mandy(x) -> (RidesHorses(x) & ForPlenish(x) & ForSport(x)))", "Manny ridesHorsesForPlenishAndSport(Mandy)", "(Rides(Manny,Horse) & ForPleasure(Manny) & ForSport(Manny,Horse))", "-RegularRides(Manny,Horse)", "(Rides(Mandy,Equine) & ForPlenish(Mandy,Equine) & ForSport(Mandy,Equine))", "(RidesForPlenish(Manny) & RidesForSport(Manny))", "Manny ridesHorsesForPleasureAndSport(Manny)", "all x.(Manny(x) -> (Rides(x,horse) & ForPleasure(x) & ForSport(x)))", "all x y.((Manny(x) & Horse(y)) -> (RidesForPlenish(x,y) & RidesForSport(x,y)))", "all x.(Mandy(x) -> (RidesHorsesForPlenish(x) & RidesHorsesForSport(x)))", "all x.(Manny(x) -> (Rides(x,horse) & For(x,plenitude) & For(x,sport)))", "Manny ridesHorsesForPlenishAndSport(Mandy)", "All x y.((Manny(x) & Horse(y)) -> (RidesForPlenish(x,y) & RidesForSport(x,y)))"]}
{"id": "folio_train_1007", "nl": "Manny competes in horse dressage shows and has invested in high-quality equestrian equipment and gear.", "fol": "(CompetesInDressageShows(Manny) & InvestedInEquestrianGear(Manny))", "prediction": ["all x.(Manny(x) -> (CompetesInHorseDressageShows(x) & InvestedInHighQualityEquestrianEquipmentAndGear(x)))", "all x y.((Manny(x) & HorseDressageShow(y)) -> (CompetesIn(x,y) & HighQualityEquestrianEquipment(x) & HighQualityEquestrianGear(x)))", "(CompetesInHorseDressageShows(Mandy) & HighQualityEquestrianEquipmentAndGear(Mandy))", "(CompetesInHorseDressageShows(Mandy) & HighQualityEquestrianEquipmentAndGear(Mandy))", "all x.(Mandy(x) -> (CompetesInHorseDressage(x) & HighQualityEquestrianEquipmentAndGear(x)))", "all x y.((Manny(x) & HorseDressage(y)) -> (CompetesIn(x,y) & HighQualityEquestrianEquipment(x) & HighQualityEquestrianGear(x)))", "all x.((Manny(x) & HorseDressageShow(x)) -> (InvestedInHighQualityEquestrianEquipment(x) & InvestedInHighQualityEquestrianGear(x)))", "all x y z.((Manny(x) & HorseDressageShow(y) & EquestrianEquipmentAndGear(z)) -> (CompetesIn(x,y) & InvestedIn(x,z)))", "(CompetesInHorseDressage(Manny) & HighQualityEquestrianEquipmentAndGear(Manny))", "(CompetesInHorseDressageShows(Manny) & HighQualityEquestrianEquipmentAndGear(Manny))", "all x.(Manny(x) -> (CompetesInHorseDressageShows(x) & HighQualityEquestrianEquipmentAndGear(x)))", "(CompetesInHorseDressageShows(Manny) & HighQualityEquestrianEquipmentAndGear(Manny))", "all x.(Manny(x) -> (CompetesInHorseDressageShows(x) & HighQualityEquestrianEquipmentAndGear(x)))", "All x.(Matthew(x) -> (CompetesInHorseDressage(x) & HighQualityEquestrianEquipmentAndGear(x)))", "all x y.((Manny(x) & HorseDressageShow(y)) -> (CompetesIn(x,y) & HighQualityEquestrianEquipment(x) & HighQualityEquestrianGear(x)))", "all x.(Mandy(x) -> (CompetesInHorseDressage(x) & InvestedInHighQualityEquestrianEquipmentAndGear(x)))"]}
{"id": "folio_train_1008", "nl": "If Manny either has a horse ranch or competes in horse dressage shows, then Manny has not invested in high-quality equestrian equipment and gear.", "fol": "((HasHorseRanch(Manny) | CompetesInDressageShows(Manny)) -> -InvestedInEquestrianGear(Manny))", "prediction": ["all x.((Manny(x) & (HasHorseRanch(x) | CompetesInHorseDressage(x))) -> -InvestedInHighQualityEquestrianEquipmentAndGear(x))", "all x.((HasHorseRanch(x) | CompetesInHorseDressage(x)) -> -InvestedInHighQualityEquestrianEquipmentAndGear(x))", "(all x.((Manny(x) & HorseRanch(x)) | CompetesInHorseDressage(x))) -> -InvestedInHighQualityEquestrianEquipmentAndGear(x))", "(all x.((HasHorseRanch(x) | CompetesInHorseDressage(x))) -> -InvestedInHighQualityEquestrianEquipmentAndGear(x))", "((HasHorseRanch(Manny) | CompetesInHorseDressage(Manny))) -> -InvestedInHighQualityEquestrianEquipmentAndGear(Manny))", "all x y.((Manny(x) & HorseRanch(x) & HorseDressageShow(y)) -> -InvestedInEquestrianEquipmentAndGear(x,y))", "all x.((Manny(x) & (HasHorseRiver(x) | CompetesInHorseDressage(x))) -> -InvestedInHighQualityEquestrianEquipmentAndGear(x))", "all x.((HasHorseRiver(x) | CompetesInHorseDressageShows(x)) -> -InvestedInHighQualityEquestrianEquipmentAndGear(x))", "all x.((Matthew(x) & (HasHorseRiver(x) | CompetesInHorseDressage(x))) -> -InvestedInHighQualityEquestrianEquipmentAndGear(x))", "all x y.((Manny(x) & HorseRiver(y)) | CompetesInHorseDressageShows(x,y)) -> -HighQualityEquestrianEquipmentAndGear(x))", "all x.(HasHorseRanch(x) | CompetesInHorseDressageShows(x)) -> -InvestedInHighQualityEquestrianEquipmentAndGear(x))", "all x.((Manny(x) & (HasHorseRiver(x) | CompetesInHorseDressageShows(x))) -> -InvestedInHighQualityEquestrianEquipmentAndGear(x))", "all x.((Manny(x) & (HasHorseRanch(x) | CompetesInHorseDressage(x))) -> -InvestedInHighQualityEquestrianEquipmentAndGear(x))", "all x y.((Mandy(x) & HorseRiver(x) & HorseDressageShow(y)) -> -InvestedInHighQualityEquestrianEquipmentAndGear(x,y))", "all x.((Mandy(x) & (HasHorseRanch(x) | CompetesInHorseDressageShows(x))) -> -InvestedInHighQualityEquestrianEquipmentAndGear(x))", "all x.((Mandy(x) & (HasHorseRiver(x) | CompetesInHorseDressage(x))) -> -InvestedInHighQualityEquestrianEquipmentAndGear(x))"]}
{"id": "folio_train_1009", "nl": "A roundel is a rounded artillery fortification.", "fol": "all x.((IsRoundel(x) -> IsRounded(x)) & IsArtilleryFortification(x))", "prediction": ["all x.(Roundel(x) -> (RoundedArtilleryFortification(x) & Fortification(x)))", "all x.(Roundel(x) -> (RoundedArtilleryFortification(x) & Fortification(x)))", "all x.(Roundel(x) -> (RoundedArtilleryFortification(x) & FortifiedArtillery(x)))", "all x.(Roundel(x) -> (RoundedArtilleryFortification(x) & Fortification(x)))", "all x.(Roundel(x) -> RoundedArtilleryFortification(x))", "all x y.((Roundel(x) & ArtilleryFortification(y)) -> Rounded(x,y))", "all x.(Roundel(x) -> (ArtilleryFortification(x) & Rounded(x)))", "all x y.((Roundel(x) & ArtilleryFortification(y)) -> Rounded(x,y))", "all x.(Roundel(x) -> (RoundedArtilleryFortification(x) & Fortification(x)))", "all x.(Roundel(x) -> (RoundedArtilleryFortification(x) & FortifiedArtillery(x)))", "all x.(Roundel(x) -> ArtilleryFortification(x))", "all x y.((Roundel(x) & ArtilleryFortification(y)) -> Rounded(x,y))", "all x.(Roundel(x) -> RoundedArtilleryFortification(x))", "all x.(Roundel(x) -> (RoundedArtilleryFortification(x) & Fortification(x)))", "all x.(Roundel(x) -> (RoundedArtilleryFortification(x) & Fortification(x)))", "exists x.(Roundel(x) & RoundedArtilleryFortification(x))"]}
{"id": "folio_train_1010", "nl": "A roundel is not higher than adjacent walls. ", "fol": "all x y.((IsRoundel(x) & IsAdjacentWall(y)) -> -IsHigherThan(x,y))", "prediction": ["all x.(Roundel(x) -> -HigherThanAdjacentWalls(x))", "all x y.((Roundel(x) & Wall(y)) -> -HigherThan(x,y))", "all x.(Roundel(x) -> -HigherThanAdjacentWalls(x))", "all x y.((Roundel(x) & AdjacentWall(y)) -> -HigherThan(x,y))", "all x y.((Roundel(x) & Wall(y)) -> -HigherThan(x,y))", "all x.(Roundel(x) -> -HigherThanAdjacentWalls(x))", "all x y.((Roundel(x) & AdjacentWalls(y)) -> -Higher(x,y))", "all x.(Roundel(x) -> -HigherThan(x,adjacentWalls))", "all x.(Roundel(x) -> -HigherThanAdjacentWalls(x))", "all x y.((Roundel(x) & Wall(y)) -> -HigherThan(x,y))", "all x.(Roundel(x) -> -HasAdjacentWalls(x))", "all x y.((Roundel(x) & Wall(y)) -> -Higher(x,y))", "exists x.(Roundel(x) & -HasAdjacentWalls(x))", "all x.(Roundel(x) -> -HigherThanAdjacentWalls(x))", "exists x.(Roundel(x) & -HigherThan(x,adjacentWalls))", "exists x.(Roundel(x) & -HasAdjacentWalls(x))"]}
{"id": "folio_train_1011", "nl": "Cannons can be deployed on artillery fortifications. ", "fol": "all x.(IsArtilleryFortification(x) -> CanDeployCannons(x))", "prediction": ["all x.(Cannon(x) -> CanBeDeployedOnArtilleryFortifications(x))", "all x y.((Cannon(x) & ArtilleryFortification(y)) -> CanBeDeployed(x,y))", "all x.(Cannon(x) -> CanBeDeployedOnArtilleryFortifications(x))", "all x y z.((Cannon(x) & ArtilleryFortification(y) & ArtilleryFortification(z)) -> CanBeDeployed(x,y,z))", "can be deployed on artillery fortifications.", "all x y.((Cannon(x) & ArtilleryFortification(y)) -> CanBeDeployedOn(x,y))", "all x.(Canon(x) -> DeployedOnArtilleryFortifications(x))", "all x y.((Cannon(x) & ArtilleryFortification(y)) -> DeployedOn(x,y))", "all x.(Cannon(x) -> CanBeDeployedOnArtilleryFortifications(x))", "all x y z.((Cannon(x) & ArtilleryFortification(y) & ArtilleryFortification(z)) -> DeployedOn(x,y,z))", "all x.(Cannon(x) -> (DeployedOnArtilleryFortifications(x) & CanBeDeployedOnArtilleryFortifications(x)))", "all x y.((Canon(x) & ArtilleryFortification(y)) -> CanBeDeployed(x,y))", "all x.(Canon(x) -> DeployedOnArtilleryFortifications(x))", "all x.(Cannon(x) -> CanBeDeployedOnArtilleryFortifications(x))", "all x y.((Cannon(x) & ArtilleryFortification(y)) -> DeployedOn(x,y))", "exists x.(Canon(x) & DeployedOnArtilleryFortifications(x))"]}
{"id": "folio_train_1012", "nl": "Roundels are the oldest artillery fortifications.", "fol": "all x y.((IsRoundel(x) & IsArtilleryFortification(x) & IsArtilleryFortification(y)) -> IsOlderThan(x,y))", "prediction": ["all x.(Roundels(x) -> (ArtilleryFortification(x) & Oldest(x)))", "(OldestArtilleryFortification(Roundels)", "all x y.((Roundel(x) & ArtilleryFortification(y)) -> Oldest(x,y))", "all x.(Roundels(x) -> (ArtilleryFortification(x) & LocatedIn(x,y)))", "all x.(Roundels(x) -> OldestArtilleryFortification(x))", "all x y.((Roundels(x) & ArtilleryFortification(y)) -> Oldest(x,y))", "(OldestArtilleryFortification(Roundels)", "all x.(Roundel(x) -> (ArtilleryFortification(x) & Oldest(x)))", "All x.(Roundel(x) -> (OldestArtilleryFortification(x) & LocatedIn(x,y)))", "all x y.((Roundel(x) & ArtilleryFortification(y)) -> Oldest(x,y))", "all x.(Roundels(x) -> (ArtilleryFortification(x) & Oldest(x)))", "(OldestArtilleryFortification(Roundels)", "All x.(Roundels(x) -> st\u00e4rkestArtilleryFortification(x))", "all x.(Roundels(x) -> OldestArtilleryFortification(x))", "All x.((Roundels(x) & ArtilleryFortification(x)) -> Oldest(x))", "All x.(Roundel(x) -> OldestArtilleryFortification(x))"]}
{"id": "folio_train_1013", "nl": "Battery towers are an artillery fortification.", "fol": "all x.(IsBatteryTower(x) -> IsArtilleryFortification(x))", "prediction": ["all x.(BatteryTower(x) -> ArtilleryFortification(x))", "all x y.((BatteryTower(x) & ArtilleryFortification(y)) -> Fortification(x,y))", "all x.(BatteryTower(x) -> ArtilleryFortification(x))", "(ArtilleryFortification(batteries) & Tower(batteries))", "all x.((BatteryTower(x) & ArtilleryFortification(x)) -> BatteryTower(x))", "all x y.((BatteryTower(x) & ArtilleryFortification(y)) -> LocatedIn(x,y))", "all x.(BatteryTower(x) -> ArtilleryFortification(x))", "all x.(BatteryTower(x) -> (ArtilleryFortification(x) & LocatedIn(x,y)))", "all x y.((BatteryTower(x) & ArtilleryFortification(y)) -> BuiltIn(x,y))", "(ArtilleryFortification(batterytowers)", "all x.(BatteryTower(x) -> ArtilleryFortification(x))", "all x.((BatteryTower(x) & ArtilleryFortification(x)) -> BatteryTower(x))", "all x.(BatteryTurm(x) -> ArtilleryFortification(x))", "all x y.((BatteryTower(x) & ArtilleryFortification(y)) -> Fortification(x,y))", "all x.(BatteryTower(x) -> ArtilleryFortification(x))", "all x.(BatteryTower(x) -> Fortification(x))"]}
{"id": "folio_train_1014", "nl": "Cannons can be deployed on battery towers.", "fol": "all x.(IsBatteryTower(x) -> CanDeployCannons(x))", "prediction": ["all x.(Cannon(x) -> CanBeDeployedOnBatteryTowers(x))", "all x y.((Cannon(x) & BatteryTower(y)) -> CanBeDeployedOn(x,y))", "all x y z.((Cannon(x) & BatteryTower(y) & BatteryTower(z)) -> CanBeDeployedOn(x,y,z))", "all x.(Cannon(x) -> CanBeDeployedOnBatteryTowers(x))", "all x.(Cannon(x) -> DeployedOnBatteryTower(x))", "all x y.((Cannon(x) & BatteryTower(y)) -> CanBeDeployed(x,y))", "all x y.((Cannon(x) & BatteryTower(y)) -> DeployedOn(x,y))", "all x.(Canon(x) -> CanBeDeployedOnBatteryTowers(x))", "all x.(Cannon(x) -> (DeployedOnBatteryTower(x) | DeployedOnBatteryTower(x)))", "all x.(Cannon(x) -> DeployedOnBatteryTower(x))", "all x y.((Canon(x) & BatteryTower(y)) -> CanBeDeployedOn(x,y))", "exists x.(Cannon(x) & BatteryTower(x) & DeployedOn(x,y))", "all x.(Canon(x) -> CanBeDeployedOnBatteryTower(x))", "all x y.((Cannon(x) & BatteryTower(y)) -> DeployedOn(x,y))", "exists x.(Canon(x) & BatteryTower(x) & DeployedOn(x,y))", "all x.(Canon(x) -> DeployedOnBatteryTowers(x))"]}
{"id": "folio_train_1015", "nl": "Roundels are older than battery towers.", "fol": "all x y.((IsRoundel(x) & IsBatteryTower(y)) -> IsOlderThan(x,y))", "prediction": ["all x y.((Roundel(x) & BatteryTower(y)) -> OlderThan(x,y))", "all x.(Roundels(x) -> OlderThanBatteryTower(x))", "all x.(Roundel(x) -> OlderThanBatteryTower(x))", "(OlderTurns(Roundels) & OlderThanBatteryTowers(Roundels))", "all x y.((Roundel(x) & BatteryTower(y)) -> OlderThan(x,y))", "all x y.((Roundels(x) & BatteryTower(y)) -> OlderThan(x,y))", "all x.(Roundels(x) -> OlderThanBatteryTowers(x))", "(OlderTown(Roundels) & OlderThan(Roundels,BatteryTowers))", "all x y.((Roundel(x) & BatteryTower(y)) -> Older(x,y))", "all x.(Roundel(x) -> OlderThanBatteryTower(x))", "all x y.((Roundle(x) & BatteryTower(y)) -> OlderThan(x,y))", "All x.(Roundel(x) -> OlderThan(x,BatteryTower))", "all x.(Roundels(x) -> OlderThanBatteryTower(x))", "all x y.((Roundels(x) & BatteryTower(y)) -> Older(x,y))", "all x y.((Roundel(x) & BatteryTower(y)) -> OlderThan(x,y))", "All x.(Roundel(x) -> OlderThanBatteryTower(x))"]}
{"id": "folio_train_1016", "nl": "Battery towers are higher than adjacent walls.", "fol": "all x y.((IsBatteryTower(x) & IsAdjacentWall(y)) -> IsHigherThan(x,y))", "prediction": ["all x y.((BatteryTower(x) & Wall(y)) -> HigherThan(x,y))", "all x.((BatteryTower(x) & AdjacentWall(x)) -> HigherThan(x,y))", "all x.(BatteryTower(x) -> HigherThanAdjacentWalls(x))", "(HigherBatteryTowers(BatteryTowers) & HigherThanAdjacentWalls(BatteryTowers))", "all x y.((BatteryTower(x) & Wall(y)) -> HigherThan(x,y))", "(Higher(BatteryTowers) & Higher(BatteryTowers))", "all x y z.((BatteryTower(x) & Wall(y) & Wall(z)) -> HigherThan(x,y,z))", "all x y.((BatteryTower(x) & AdjacentWall(y)) -> HigherThan(x,y))", "(HasBatteryTower(x) & HigherThanAdjacentWalls(x))", "all x.((BatteryTower(x) & AdjacentWall(x)) -> HigherThan(x,y))", "all x.(BatteryTower(x) -> HigherThanAdjacentWalls(x))", "all x y.((BatteryTower(x) & Wall(y)) -> HigherThan(x,y))", "all x y.((BatteryTower(x) & AdjacentWall(y)) -> HigherThan(x,y))", "all x y.((BatteryTurm(x) & Wall(y)) -> HigherThan(x,y))", "all x.((BatteryTower(x) & AdjacentWall(x)) -> HigherThan(x,y))", "exists x.(BatteryTower(x) & AdjacentWall(x))"]}
{"id": "folio_train_1017", "nl": "Roundels can be deployed on roundels.", "fol": "all x.(IsRoundel(x) -> DeployRoundels(x))", "prediction": ["all x.(Roundels(x) -> CanBeDeployedOnRoundels(x))", "all x y.((Roundels(x) & Roundels(y)) -> CanBeDeployedOn(x,y))", "all x.(Roundels(x) -> CanBeDeployedOn(x,Roundels))", "all x y.((Roundel(x) & Roundel(y)) -> CanBeDeployedOn(x,y))", "all x y z.((Roundels(x) & Roundels(y) & Roundels(z)) -> CanBeDeployed(x,y,z))", "all x y.((Roundels(x) & Roundels(y)) -> CanBeDeployed(x,y))", "all x.(Roundels(x) -> DeployedOnRoundels(x))", "all x.(Roundel(x) -> CanBeDeployedOnRoundels(x))", "(all x.(Roundels(x) -> DeployedOnRoundels(x)))", "all x.(Roundels(x) -> CanBeDeployedOnRoundels(x))", "all x y.((Roundel(x) & Roundels(y)) -> CanBeDeployedOn(x,y))", "all x y.((Roundels(x) & Roundels(y)) -> CanBeDeployedOn(x,y))", "exists x.(Roundel(x) & DeployedOn(x,Roundels))", "all x.(Roundels(x) -> DeployedOnRoundels(x))", "exists x.(Roundel(x) & DeployedOnRoundels(x))", "exists x.(Roundel(x) & DeployedOn(x,Roundels))"]}
{"id": "folio_train_1018", "nl": "All tissues are soft.", "fol": "all x.(IsTissue(x) -> IsSoft(x))", "prediction": ["all x.(Tissue(x) -> Soft(x))", "all x.(Tissue(x) -> Soft(x))", "(all x.(Tissue(x) -> Soft(x)))", "all x.(Tissue(x) -> Soft(x))", "(all x.(Tissue(x) -> Soft(x)))", "all x.(Tissue(x) -> Soft(x))", "all x y.(Tissue(x) -> Soft(x))", "all x.(Tissue(x) -> Soft(x))", "all x.(Tissue(x) -> Soft(x))", "all x.(Tissue(x) -> Soft(x))", "all x.(Tissue(x) -> Soft(x))", "all x.(Tissue(x) -> Soft(x))", "all x.(Tissue(x) -> Soft(x))", "all x.(Tissue(x) -> Soft(x))", "all x.(Tissue(x) -> Soft(x))", "All x.(Texture(x) -> Soft(x))"]}
{"id": "folio_train_1019", "nl": "Some papers are tissues.", "fol": "exists x.(IsPaper(x) & IsTissue(x))", "prediction": ["exists x.(Paper(x) & Tissue(x))", "exists x.(Paper(x) & Tissue(x))", "exists x.(Paper(x) & Tissue(x))", "exists x.(Paper(x) & Tissue(x))", "exists x y.(Paper(x) & Tissue(y))", "exists x.(Paper(x) & Tissue(x))", "exists x.(Paper(x) & Tissue(x))", "exists x y.(Paper(x) & Tissue(y))", "exists x.(Paper(x) & Tissue(x))", "exists x.(Paper(x) & Tissue(x))", "exists x.(Paper(x) & Tissue(x))", "exists x.(Paper(x) & Tears(x))", "exists x.(Paper(x) & Tissue(x))", "exists x.(Paper(x) & Teardrop(x))", "exists x.(Paper(x) & Tissue(x))", "exists x.(Paper(x) & Tissue(x))"]}
{"id": "folio_train_1020", "nl": "Some papers are hard.", "fol": "exists x.(IsPaper(x) & Hard(x))", "prediction": ["exists x.(Paper(x) & Hard(x))", "exists x.(Paper(x) & Hard(x))", "exists x.(Paper(x) & Hard(x))", "exists x.(Paper(x) & Hard(x))", "exists x y.(Paper(x) & Paper(y) & Hard(y))", "exists x.(Paper(x) & Hard(x))", "exists x.(Paper(x) & Hard(x))", "exists x.(Paper(x) & Hard(x))", "exists x.(Paper(x) & Hard(x))", "exists x.(Paper(x) & Hard(x))", "exists x.(Paper(x) & Hard(x))", "exists x.(Paper(x) & Hard(x))", "exists x.(Paper(x) & Hard(x))", "exists x.(Paper(x) & Hard(x))", "exists x.(Paper(x) & Hard(x))", "exists x.(Paper(x) & Hard(x))"]}
{"id": "folio_train_1021", "nl": "All volunteers receive intangible benefits for their work.", "fol": "all x.(IsVolunteer(x) -> ReceivesIntangibleBenefits(x))", "prediction": ["all x.(Volunteer(x) -> ReceivesIntangibleBenefits(x))", "all x y.((Volunteer(x) & Work(y)) -> ReceivesIntangibleBenefits(x,y))", "(all x.(Volunteer(x) -> IntangibleBenefits(x)))", "all x.(Volunteer(x) -> ReceivesIntangibleBenefits(x))", "all x y.((Volunteer(x) & Work(y)) -> ReceivesIntangibleBenefits(x,y))", "(all x.(Volunteer(x) -> IntangibleBenefits(x)))", "all x.(Volunteer(x) -> ReceivesIntangibleBenefits(x))", "all x.(Volunteer(x) -> IntangibleBenefits(x))", "all x.(Volunteer(x) -> ReceivesIntangibleBenefitsForWork(x))", "all x y.((Volunteer(x) & Work(y)) -> ReceivesIntangibleBenefits(x,y))", "all x.(Volunteer(x) -> ReceivesIntangibleBenefits(x))", "all x y.((Volunteer(x) & Work(y)) -> ReceivesIntangibleBenefits(x,y))", "all x.(Volunteer(x) -> IntangibleBenefits(x))", "all x.(Volunteer(x) -> ReceivesIntangibleBenefits(x))", "all x.(Volunteer(x) -> ReceivesIntangibleBenefits(x))", "all x.(Volunteer(x) -> ReceivesIntangibleBenefits(x,work))"]}
{"id": "folio_train_1022", "nl": "Volunteers work regularly or on an as-needed basis.", "fol": "all x.((IsVolunteer(x) -> WorksRegularly(x)) | WorksAsNeeded(x))", "prediction": ["all x.(Volunteer(x) -> (WorksRegularly(x) | WorksAsNeeded(x)))", "all x y.((Volunteer(x) & (WorksRegularly(x) | WorksAsNeeded(x))) -> Works(x,y))", "all x.(Volunteer(x) -> (WorksRegularly(x) | WorksAsNeeded(x)))", "(WorksRegularly(Volunteer(Volunteer) | WorksAsNeeded(Volunteer))", "all x y.((Volunteer(x) & (RegularWork(y) | AsNeededWork(y))) -> Works(x,y))", "all x.(Volunteer(x) -> (WorksRegularly(x) | WorksAsNeeded(x)))", "all x y.((Volunteer(x) & Volunteer(y)) -> (WorksRegularly(x,y) | WorksAsNeeded(x,y)))", "all x.(Volunteer(x) -> (WorksRegularly(x) | WorkedAsNeeded(x)))", "all x y.((Volunteer(x) & (WorksRegularly(x) | WorksAsNeeded(x))) -> Works(x,y))", "all x.(Volunteer(x) -> (WorksRegularly(x) | AsNeededBasis(x)))", "all x.(Volunteer(x) -> (WorkRegularly(x) | WorkAsNeeded(x)))", "all x.(Volunteer(x) -> (WorksRegularly(x) | WorksAsNeededBasis(x)))", "all x.(Volunteer(x) -> (WorksRegularly(x) | WorksAsNeeded(x)))", "exists x.(Volunteer(x) & ((WorksRegularly(x) | WorksAsNeeded(x))) -> Works(x)))", "all x.(Volunteer(x) -> (Work(x,Regular) | AsNeeded(x)))", "all x.(Volunteer(x) -> (WorksRegularly(x) | WorkedAsNeeded(x)))"]}
{"id": "folio_train_1023", "nl": "Some volunteers are trained.", "fol": "exists x.(IsVolunteer(x) -> IsTrained(x))", "prediction": ["exists x.(Volunteer(x) & Trained(x))", "exists x.(Volunteer(x) & Trained(x))", "exists x.(Volunteer(x) & Trained(x))", "exists x.(Volunteer(x) & Trained(x))", "exists x y.(Volunteer(x) & Volunteer(y) & Trained(y))", "exists x.(Volunteer(x) & Trained(x))", "exists x.(Volunteer(x) & Trained(x))", "exists x y.(Volunteer(x) & Volunteer(y) & Trained(y))", "exists x.(Voice(x) & Trained(x))", "exists x.(Volunteer(x) & Trained(x))", "exists x.(Volunteer(x) & Trained(x))", "exists x.(Volunteer(x) & Trained(x))", "exists x.(Volunteer(x) & Trained(x))", "exists x.(Volunteer(x) & Trained(x))", "exists x.(Volunteer(x) & Trained(x))", "exists x.(Volunteer(x) & Trained(x))"]}
{"id": "folio_train_1024", "nl": "Volunteers work in groups or individually.", "fol": "all x.(IsVolunteer(x) -> (WorksInGroup(x) | WorksIndividually(x)))", "prediction": ["all x.(Volunteer(x) -> (WorksInGroups(x) | WorksInPrimaryGroups(x)))", "all x y.((Volunteer(x) & (Group(y) | Individual(y))) -> WorksIn(x,y))", "all x.(Volunteer(x) -> (WorksInGroups(x) | WorksInPrimarily(x)))", "(WorksInGroups(Volunteer(Volunteer) | WorksInGroups(Volunteer)))", "all x.(Volunteer(x) -> (WorksInGroups(x) | WorksInIndividuals(x)))", "all x y z.((Volunteer(x) & (Group(y) | Individual(y))) -> WorksIn(x,y))", "all x.(Volunteer(x) -> (WorkInGroups(x) | WorkInPrimarily(x)))", "all x y.((Volunteer(x) & (Group(y) | Individual(y))) -> WorksIn(x,y))", "all x y.((Volunteer(x) & (Group(y) | Individual(y))) -> WorksIn(x,y))", "all x.(Volunteer(x) -> (WorksInGroups(x) | WorksInPrimaryGroups(x)))", "all x.(Volunteer(x) -> (WorkInGroups(x) | WorkInPrimaryGroups(x)))", "all x y.((Volunteer(x) & (Group(y) | Individual(y))) -> WorksIn(x,y))", "exists x.(Volunteer(x) & ((WorksInGroups(x) | WorksInPrimarily(x))) -> Volunteer(x)))", "all x.(Volunteer(x) -> (WorksInGroups(x) | WorksInIndividuals(x)))", "all x.(Volunteer(x) -> (WorkInGroups(x) | WorkInGroups(x)))", "exists x.(Volunteer(x) & (WorkInGroup(x) | WorkInGroup(x))))"]}
{"id": "folio_train_1025", "nl": "Environmental volunteers contribute toward environmental management or conservation.", "fol": "all x.((IsVolunteer(x) & IsEnvironmentalVolunteer(x)) -> (ContributesTo(x,EnvironmentalManagement) | ContributesTo(x,EnvironmentalConservation)))", "prediction": ["all x.(EnvironmentalVolunteer(x) -> (ContributesToEnvironmentalManagement(x) | ContributesToConservation(x)))", "all x y.((EnvironmentalVolunteer(x) & (EnvironmentalManagement(y) | Conservation(y))) -> ContributesTo(x,y))", "all x.(EnvironmentalVolunteer(x) -> (ContributesToEnvironmentalManagement(x) | ContributesToConservation(x)))", "(all x.(EnvironmentalVolunteer(x) -> ContributesToEnvironmentalManagementOrConservation(x)))", "all x y.((EnvironmentalVolunteer(x) & EnvironmentalManagementOrConservation(y)) -> ContributesTo(x,y))", "all x.((EnvironmentalVolunteer(x) & (EnvironmentalManagement(x) | Conservation(x))) -> ContributesTo(x,y))", "all x y z.((EnvironmentalVolunteer(x) & EnvironmentalManagement(y) & Conservation(z)) -> ContributesTo(x,y,z))", "all x y.((EnvironmentalVolunteer(x) & (EnvironmentalManagement(y) | Conservation(y))) -> ContributesTo(x,y))", "(all x.(EnvironmentalVolunteer(x) -> (ContributesToEnvironmentalManagement(x) | ContributesToConservation(x))))", "all x.(EnvironmentalVolunteer(x) -> (ContributesToEnvironmentalManagement(x) | ContributesToConservation(x)))", "all x y.((EnvironmentalVolunteer(x) & Environment(y)) -> (ContributesTo(x,y) & (EnvironmentalManagement(y) | Conservation(y))))", "all x y.((EnvironmentalVolunteer(x) & EnvironmentalManagement(y)) | Conservation(y)) -> ContributesTo(x,y))", "all x.(EnvironmentalVolunteer(x) -> (ContributesToEnvironmentalManagement(x) | ContributesToConservation(x)))", "all x.(EnvironmentalVolunteer(x) -> (ContributesTowardsEnvironmentalManagement(x) | ContributesTowardsConservation(x)))", "all x.(EnvironmentalVolunteer(x) -> (ContributesToEnvironmentalManagement(x) | ContributesToConservation(x)))", "all x.(EnvironmentalVolunteer(x) -> (ContributesToEnvironmentalManagement(x) | ContributesToConservation(x)))"]}
{"id": "folio_train_1026", "nl": "Participating in natural disaster response is an example of volunteers working in groups on an as-needed basis.", "fol": "exists x.(((IsVolunteer(x) & ContributesTo(x,NaturalDisasterResponse)) -> WorksInGroup(x)) & WorksAsNeeded(x))", "prediction": ["all x.((Volunteer(x) & NaturalDisasterResponse(x)) -> WorksInGroups(x))", "all x y.((Volunteer(x) & NaturalDisasterResponse(y) & WorkingInGroups(x,y)) -> AsNeededBasis(x))", "all x y z.((Volunteer(x) & NaturalDisasterResponse(y) & Group(z) & WorksIn(x,z)) -> AsNeededBasis(x))", "all x.((Volunteer(x) & NaturalDisasterResponse(x)) -> WorkingInGroupsOnAsNeededBasis(x))", "all x.((Volunteer(x) & ParticipatesInNaturalDisasterResponse(x)) -> WorksInGroups(x))", "all x y.((Volunteer(x) & NaturalDisasterResponse(y)) -> WorksInGroups(x,y))", "all x.(ParticipatesInNaturalDisasterResponse(x) -> VolunteerWorkingInGroups(x))", "all x y.((Volunteer(x) & NaturalDisaster(y) & WorkingInGroups(x,y)) -> AsNeededBasis(x,y))", "all x y z.((Volunteer(x) & NaturalDisasterResponse(y) & Group(z) & WorkingIn(x,z)) -> AsNeededBasis(x,y))", "all x y z.((Volunteer(x) & NaturalDisaster(y) & Group(z) & WorksIn(x,z)) -> AsNeededBasis(x,y))", "all x.((Volunteer(x) & ParticipatesInNaturalDisasterResponse(x)) -> WorkingInGroupsOnAsNeededBasis(x))", "all x.(ParticipatesInNaturalDisasterResponse(x) -> VolunteerWorkingInGroups(x))", "all x y.((Volunteer(x) & NaturalDisasterResponse(y) & WorkingInGroups(x,y)) -> AsNeededBasis(x))", "all x.((Volunteer(x) & NaturalDisasterResponse(x)) -> WorksInGroups(x))", "all x y.((Volunteer(x) & NaturalDisaster(y)) -> WorksInGroupsOnAsNeededBasis(x,y))", "all x.((Volunteer(x) & NaturalDisasterResponse(x)) -> WorkingInGroupsOnAsNeededBasis(x))"]}
{"id": "folio_train_1027", "nl": "Volunteers who participate in natural disaster response receive intangible benefits for their work.", "fol": "all x.((IsVolunteer(x) & ParticipateIn(x,NaturalDisasterResponse)) -> ReceivesIntangibleBenefits(x))", "prediction": ["all x.((Volunteer(x) & ParticipatesInNaturalDisasterResponse(x)) -> ReceivesIntangibleBenefits(x))", "all x y.((Volunteer(x) & NaturalDisasterResponse(y) & ParticipatesIn(x,y)) -> ReceivesIntangibleBenefits(x))", "all x.((Volunteer(x) & ParticipatesInNaturalDisasterResponse(x)) -> IntangibleBenefits(x))", "all x y z.((Volunteer(x) & NaturalDisasterResponse(y) & ParticipatesIn(x,y)) -> ReceivesIntangibleBenefits(x,z))", "all x y.((Volunteer(x) & ParticipatesInNaturalDisasterResponse(x) & NaturalDisasterResponse(y)) -> ReceivesIntangibleBenefits(x,y))", "(all x.((Volunteer(x) & ParticipatesInNaturalDisasterResponse(x)) -> IntangibleBenefits(x))", "all x y.((Volunteer(x) & NaturalDisasterResponse(y) & ParticipatesIn(x,y)) -> ReceivesIntangibleBenefits(x))", "all x y.((Volunteer(x) & NaturalDisaster(y) & ParticipatesIn(x,y)) -> ReceivesIntangibleBenefits(x))", "all x.((Volunteer(x) & ParticipatesInNaturalDisasterResponse(x)) -> ReceivesIntangibleBenefits(x))", "all x y z.((Volunteer(x) & NaturalDisaster(y) & ParticipatesIn(x,y)) -> IntangibleBenefits(x,z))", "all x y.((Volunteer(x) & ParticipatesInNaturalDisasterResponse(x,y)) -> ReceivesIntangibleBenefits(x))", "all x.((Volunteer(x) & ParticipatesInNaturalDisaster(x)) -> ReceivesIntangibleBenefits(x))", "all x.((Volunteer(x) & ParticipatesInNaturalDisasterResponse(x)) -> IntangibleBenefits(x))", "all x.((Volunteer(x) & ParticipatesInNaturalDisaster(x)) -> IntangibleBenefits(x))", "all x.((Volunteer(x) & ParticipatesInNaturalDisasterResponse(x)) -> IntangibleBenefits(x))", "all x.((Volunteer(x) & ParticipatesInNaturalDisasterResponse(x)) -> ReceivesIntangibleBenefits(x))"]}
{"id": "folio_train_1028", "nl": "Environmental volunteers work in groups.", "fol": "all x.((IsVolunteer(x) & IsEnvironmentalVolunteer(x)) -> WorksInGroup(x))", "prediction": ["all x.(EnvironmentalVolunteer(x) -> WorksInGroups(x))", "all x y.((EnvironmentalVolunteer(x) & Group(y)) -> WorksIn(x,y))", "(WorkInGroups(EnvironmentalVolunteer) -> EnvironmentalVolunteer(Environmental))", "all x.(EnvironmentalVolunteer(x) -> WorksInGroups(x))", "(WorksInGroups) & EnvironmentalVolunteer(e))", "all x y z.((EnvironmentalVolunteer(x) & Group(y) & Group(z)) -> WorksIn(x,y,z))", "all x y.((EnvironmentalVolunteer(x) & Group(y)) -> WorksIn(x,y))", "all x.(EnvironmentalVolunteer(x) -> WorksInGroups(x))", "all x y.((EnvironmentalVolunteer(x) & Group(y)) -> WorksIn(x,y))", "all x.(EnvironmentalVolunteer(x) -> WorkInGroups(x))", "all x.(EnvironmentalVolunteer(x) -> WorksInGroups(x))", "all x y.((EnvironmentalVolunteer(x) & Group(y)) -> WorksIn(x,y))", "all x y.((EnvironmentalVolunteer(x) & Group(y)) -> Work(x,y))", "all x.(EnvironmentalVolunteer(x) -> WorksInGroups(x))", "all x.(EnvironmentalVolunteer(x) -> WorkInGroup(x))", "all x.(EnvironmentalVolunteer(x) -> WorksInGroups(x))"]}
{"id": "folio_train_1029", "nl": "To be a volunteer, you must be trained.", "fol": "all x.(IsVolunteer(x) -> IsTrained(x))", "prediction": ["all x.(Volunteer(x) -> Trained(x))", "all x.(Volunteer(x) -> Trained(x))", "all x y.((Volunteer(x) & Volunteer(y)) -> Trained(x,y))", "all x.((Volunteer(x) & Trained(x)) -> Volunteer(x))", "all x.(Volunteer(x) -> Trained(x))", "all x y.((Volunteer(x) & Volunteer(y)) -> Trained(x))", "all x.(Volunteer(x) -> Trained(x))", "all x.((Volunteer(x) & Trained(x)) -> Volunteer(x))", "all x.(Volunteer(x) -> Trained(x))", "all x y.((Volunteer(x) & Volunteer(y)) -> Trained(y))", "all x.(Volunteer(x) -> Trained(x))", "all x.(Volunteer(x) -> Trained(x))", "all x.(Volunteer(x) -> Trained(x))", "exists x.(Volunteer(x) & Trained(x))", "exists x.(Volunteer(x) & Trained(x))", "exists x.(Volunteer(x) & Trained(x))"]}
{"id": "folio_train_1030", "nl": "All people who are very consistent and enjoy sticking to their regular routines do not like surprises.", "fol": "all x.(VeryConsistent(x) -> DislikesSurprises(x))", "prediction": ["all x.((Person(x) & VeryConsistent(x) & EnjoysStickingToRegularRoutines(x)) -> -LikesSurprises(x))", "all x.((Person(x) & Consistent(x) & EnjoysStickingToRegularRoutines(x)) -> -LikesSurprises(x))", "all x.((People(x) & VeryConsistent(x) & EnjoysStickingToRegularRoutines(x)) -> -LikesSurprises(x))", "(all x.((Consistent(x) & EnjoysStickingToRegularRoutines(x)) -> -LikesSurprises(x))", "all x.((Consistent(x) & EnjoysStickingToRegularRoutines(x)) -> -LikesSurprises(x))", "all x.((People(x) & Consistent(x) & EnjoysStickingToRegularRoutines(x)) -> -LikesSurprises(x))", "all x.((Person(x) & VeryConsistent(x) & EnjoysStickingToRegularRoutines(x)) -> -LikesSurprises(x))", "all x y.((Person(x) & VeryConsistent(x) & EnjoysStickingToRegularRoutines(x)) -> -LikesSurprises(y))", "all x.((Person(x) & Consistent(x) & EnjoysStickingToRegularRoutines(x)) -> -LikesSurprises(x))", "all x.((Consistent(x) & EnjoysStickingToRegularRoutines(x)) -> -LovesSurprises(x))", "all x.((People(x) & VeryConsistent(x) & EnjoysStickingToRegularRoutines(x)) -> -LikesSurprises(x))", "all x.((Person(x) & VeryConsistent(x) & EnjoysStayingToRegularRoutines(x)) -> -LovesSurprises(x))", "all x.(Consistent(x) -> -LikesSurprises(x))", "all x y.((Person(x) & Consistent(x) & EnjoysStrippingToRegularRules(x)) -> -LikesSurprises(y))", "all x.((Person(x) & Consistent(x) & EnjoysStayingToRegularRoutines(x)) -> -LovesSurprises(x))", "all x y.((Person(x) & Consistent(x) & EnjoysStickingToRegularRules(x)) -> -LovesSurprises(y))"]}
{"id": "folio_train_1031", "nl": "If people wear flannel shirts every day, then they are very consistent and enjoy sticking to their regular routines.", "fol": "all x.(WearsFlannelShirts(x) -> VeryConsistent(x))", "prediction": ["all x.((Person(x) & WearsFlannelShirtsEveryDay(x)) -> (Consistent(x) & EnjoysStickingToRegularRoutines(x)))", "all x.((People(x) & WearsFlannelShirtsEveryDay(x)) -> (Consistent(x) & EnjoysStickingToRegularRoutines(x)))", "all x.(WearsFlannelShirtsEveryDay(x) -> (Consistent(x) & EnjoysStickingToRegularRoutines(x)))", "all x y.((Person(x) & WearsFlannelShirtsEveryDay(x) & Wears(x,y)) -> (Consistent(x) & EnjoysStickingToRegularRoutines(x)))", "all x.((Person(x) & WearsFlannelShirtsEveryDay(x)) -> (Consistent(x) & EnjoysStayingToRegularRoutines(x)))", "all x.((People(x) & WearFlannelShirtsEveryDay(x)) -> (Consistent(x) & EnjoyStickingToRegularRoutines(x)))", "all x y.((Person(x) & WearsFlannelShirtsEveryDay(x)) -> (Consistent(x) & EnjoysStickingToRegularRoutines(x)))", "all x.(WearFlannelShirtsEveryDay(x) -> (Consistent(x) & EnjoyStickingToRegularRoutines(x)))", "all x.(WearsFlannelShirtsEveryDay(x) -> (Consistent(x) & EnjoysStayingToRegularRoutines(x)))", "all x y.((People(x) & WearsFlannelShirtsEveryDay(x) & Consistent(y) & SticksToRegularRoutines(y)) -> VeryConsistent(x,y))", "all x.((WearsFlannelShirtsEveryDay(x) & Consistent(x) & EnjoysStickingToRegularRoutines(x)) -> VeryConsistent(x))", "all x y.((Person(x) & WearsFlannelShirtsEveryDay(x,y)) -> (Consistent(x) & EnjoysStickingToRegularRoutines(x)))", "all x.((Person(x) & WearsFlannelShirtsEveryDay(x)) -> (Consistent(x) & EnjoysStickingToRegularRoutines(x)))", "all x y.((Person(x) & WearsFlannelShirtsEveryDay(x)) -> (Consistent(x) & EnjoysStayingToRegularRoutines(x)))", "all x.(WearsFlannelShirtsEveryDay(x) -> (Consistent(x) & EnjoysStickingToRegularRoutines(x)))", "all x.((Person(x) & WearsFlannelShirtsEveryDay(x)) -> (Consistent(x) & EnjoysStayingToRegularRules(x)))"]}
{"id": "folio_train_1032", "nl": "If people do not like shopping for clothes and other materialistic goods, then they wear flannel shirts every day.", "fol": "all x.(NoShopping(x) -> WearsFlannelShirts(x))", "prediction": ["all x.((Person(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)) -> WearsFlannelShirtsEveryDay(x))", "all x.((People(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)) -> WearsFlannelShirtsEveryDay(x))", "all x y.((Person(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)) -> WearsFlannelShirtsEveryDay(x))", "all x.((People(x) & -(LovesShopping(x) & WearsFlannelShirts(x))) -> WearsEveryDay(x))", "all x y.((People(x) & -(LovesShopping(x,y) & Clothing(y)) | (-LovesShopping(x,y) & MaterialisticGoods(y)))) -> WearsFlannelShirtsEveryDay(x))", "all x y.((Person(x) & -MadeInMaterialisticGoods(x) & LikesShoppingFor(x,Clothes) & WearsFlannelShirts(x)) -> WearsEveryDay(x))", "all x.((Person(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)) -> WearsFlannelShirtsEveryDay(x))", "(-(PeopleLikeShoppingForClothes(x) & -LikeShoppingForMaterialisticGoods(x)) -> WearFlannelShirtsEveryDay(x))", "all x.((Person(x) & -(LovesShopping(x) & WearsFlannelShirts(x))) -> Wears(x))", "all x y.((Person(x) & -(LovesShopping(x,y) & ShopsForClothes(x) & ShopsForMaterialisticGoods(x))) -> WearsFlannelShirtsEveryDay(x))", "all x.((Person(x) & -MeetsClothes(x) & MaterialisticGoods(x)) -> WearsFlannelShirtsEveryDay(x))", "all x.((People(x) & -MeetsClothes(x) & MaterialisticGoods(x)) -> WearsFlannelShirtsEveryDay(x))", "all x y.((People(x) & -LikesShoppingForClothesAndMaterialisticGoods(x,y)) -> WearsFlannelShirtsEveryDay(x,y))", "all x.((Person(x) & -LikesShoppingForClothes(x) & LikesShoppingForMaterialisticGoods(x)) -> WearsFlannelShirtsEveryDay(x))", "all x.((People(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)) -> WearsFlannelShirtsEveryDay(x))", "all x.((People(x) & -(LovesShopping(x) & WearsFlannelShirtsEveryDay(x))) -> -(LovesShopping(x) & WearsMaterialisticGoods(x)))"]}
{"id": "folio_train_1033", "nl": "All old people living in stable homes do not like surprises.", "fol": "all x.(Elderly(x) -> DislikesSurprises(x))", "prediction": ["all x.((OldPerson(x) & LivesInStableHome(x)) -> -LikesSurprises(x))", "all x.((OldPerson(x) & LivesInStableHome(x)) -> -LikesSurprises(x))", "all x.(OldPerson(x) -> -LikesSurprises(x))", "all x y.((OldPerson(x) & StableHome(y)) -> -LikesSurprises(x,y))", "all x.((OldPerson(x) & LivesInStableHomes(x)) -> -LikesSurprises(x))", "all x.((Old(x) & LivesInStableHome(x)) -> -LikesSurprises(x))", "all x.((OldPeople(x) & LivesInStableHomes(x)) -> -LovesSurprises(x))", "all x.(OldPeople(x) -> (LivesInStableHome(x) & -LikesSurprises(x)))", "all x y.((OldPerson(x) & StableHome(y)) -> -LikesSurprises(x,y))", "all x y.((OldPerson(x) & LivingInStableHome(x,y)) -> -LikesSurprises(x))", "all x.(OldPerson(x) -> -LikesSurprises(x))", "all x.((OldPerson(x) & LivesInStableHomes(x)) -> -LikesSurprises(x))", "all x y.((OldPerson(x) & StableHome(y)) -> -LovesSurprises(x,y))", "(all x.(AltPerson(x) & LivingInStableHomes(x)) -> -LovesSurprises(x))", "all x.((OldPeople(x) & LivesInStableHomes(x)) -> -LikesSurprises(x))", "all x.(OldPeople(x) -> (LivingInStableHomes(x) & -LikesSurprises(x)))"]}
{"id": "folio_train_1034", "nl": "If people have very high energy and are impulsive, then they like surprises.", "fol": "all x.(HasHighEnergyAndImpulsive(x) -> -DislikesSurprises(x))", "prediction": ["all x.((Person(x) & VeryHighEnergy(x) & Impulsive(x)) -> LikesSurprises(x))", "all x.((Person(x) & HighEnergy(x) & Impulsive(x)) -> LikesSurprises(x))", "all x.((People(x) & HighEnergy(x) & Impulsive(x)) -> LikesSurprises(x))", "all x.((People(x) & VeryHighEnergy(x) & Impulsive(x)) -> LikesSurprises(x))", "all x y.((Person(x) & HighEnergy(x) & Impulsive(x)) -> LikesSurprises(x,y))", "all x.((Person(x) & VeryHighEnergy(x) & Impulsive(x)) -> LikesSurprises(x))", "((HighEnergy(e) & Impulsive(e)) -> LikesSurprises(e))", "all x y.((Person(x) & VeryHighEnergy(x) & Impulsive(x)) -> LikesSurprises(x))", "all x y.((Person(x) & HighEnergy(x) & Impulsive(x)) -> LikesSurprises(x,y))", "all x.((HungerEnergy(x) & Impulsive(x)) -> LikesSurprises(x))", "exists x.(HighEnergy(x) & Impulsive(x) & LikesSurprises(x))", "all x.((Person(x) & HighEnergy(x) & Impulsive(x)) -> LikesSurprises(x))", "all x.((People(x) & HighEnergy(x) & Impulsive(x)) -> LikesSurprises(x))", "all x.((People(x) & VeryHighEnergy(x) & Impulsive(x)) -> LikeSurprises(x))", "all x.((Person(x) & VeryHighEnergy(x) & Impulsive(x)) -> LikesSurprises(x))", "all x.((Person(x) & HighEnergy(x) & Impulsive(x)) -> LikesSurprises(x))"]}
{"id": "folio_train_1035", "nl": "If Mike is not a person who wears flannel shirts every day and has very high energy and is impulsive, then Mike either is very consistent and enjoys sticking to his regular routines or does not like surprises.", "fol": "(((-(DislikesSurprises(Mike) & HasHighEnergyAndImpulsive(Mike)) -> VeryConsistent(Mike)) & -DislikesSurprises(Mike)) | (-(-(DislikesSurprises(Mike) & HasHighEnergyAndImpulsive(Mike)) -> VeryConsistent(Mike)) & DislikesSurprises(Mike)))", "prediction": ["all x.((Person(x) & WearsFlannelShirtsEveryDay(x) & VeryHighEnergy(x) & Impulsive(x)) -> ((Consistent(x) & EnjoysRegularRoutines(x)) | -LikesSurprises(x))))", "all x.((Person(x) & -WearsFlannelShirtsEveryDay(x) & VeryHighEnergy(x) & Impulsive(x)) -> ((Consistent(x) & EnjoysRegularRoutines(x)) | -LikesSurprises(x))))", "(-(WornFlannelShirtsEveryDay(Mike) & VeryHighEnergy(Mike) & Impulsive(Mike)) -> (Consistent(Mike) & EnjoysRegularRoutines(Mike) | -LikesSurprises(Mike)))", "(-WornFlannelShirtsEveryDay(Mike) & VeryHighEnergy(Mike) & Impulsive(Mike)) -> (Consistent(Mike) & EnjoysRegularRoutines(Mike) | -LikesSurprises(Mike)))", "(-WearsFlannelShirtsEveryDay(Mike) & HighEnergy(Mike) & Impulsive(Mike)) | (-Mike(Mike) & WearsFlannelShirtsEveryDay(Mike) & WearsFlannelShirtsEveryDay(Mike) & HasHighEnergy(Mike) & SticksToRegularRoutines(Mike))))", "all x.((Mike(x) & -WearsFlannelShirtsEveryDay(x) & VeryHighEnergy(x) & Impulsive(x)) -> (Consistent(x) & EnjoysRegularRoutines(x) | -LikesSurprises(x)))", "all x.((Person(x) & WearsFlannelShirtsEveryDay(x) & VeryHighEnergy(x) & Impulsive(x)) -> ((Consistent(x) & EnjoysRegularRoutines(x)) | -LikesSurprises(x))))", "all x.((Person(x) & WearsFlannelShirtsEveryDay(x) & HighEnergy(x) & Impulsive(x)) -> ((Consistent(x) & EnjoysRegularRoutines(x)) | -LikesSurprises(x)))", "(-WornsFlannelShirtsEveryDay(Mike) & HighEnergy(Mike) & Impulsive(Mike)) -> (Consistent(Mike) & EnjoysStickingToRegularRoutines(Mike) | -LikesSurprises(Mike)))", "all x y.((Person(x) & WearsFlannelShirtsEveryDay(x) & VeryHighEnergy(x) & Impulsive(x)) -> ((VeryConsistent(x) & EnjoysRegularRoutines(x)) | -LikesSurprises(x)))", "all x.((Mike(x) & -WearsFlannelShirtsEveryDay(x) & HighEnergy(x) & Impulsive(x)) -> ((Consistent(x) & EnjoysRegularRoutines(x)) | -LikesSurprises(x))))", "all x.((Mike(x) & -WornsFlannelShirtsEveryDay(x) & VeryHighEnergy(x) & Impulsive(x)) -> ((Consistent(x) & EnjoysRegularRoutines(x)) | -LikesSurprises(x))))", "all x.((Person(x) & WearsFlannelShirtsEveryDay(x) & VeryHighEnergy(x) & Impulsive(x)) -> ((VeryConsistent(x) & EnjoysStickingToRegularRoutines(x)) | -LikesSurprises(x)))", "all x.((Mike(x) & -WearsFlannelShirtsEveryDay(x) & VeryHighEnergy(x) & Impulsive(x)) -> ((Consistent(x) & EnjoysRegularRoutines(x)) | -LikesSurprises(x))))", "all x.((Person(x) & WearsFlannelShirtsEveryDay(x) & HighEnergy(x) & Impulsive(x)) -> ((Consistent(x) & EnjoysRegularRoutines(x)) | -LikesSurprises(x)))", "all x.((Person(x) & WearsFlannelShirtsEveryDay(x) & VeryHighEnergy(x) & Impulsive(x)) -> ((Consistent(x) & EnjoysStickingToRegularRoutines(x)) | -LikesSurprises(x)))"]}
{"id": "folio_train_1036", "nl": "Mike is an old person living in a stable home.", "fol": "(Elderly(Mike) & StableHome(Mike))", "prediction": ["all x.(Mike(x) -> OldPerson(x) & LivesInStableHome(x))", "(OldPerson(Mike) & LivesInStableHome(Mike))", "Mike is a old person living in a stable home.", "Mike is an old person living in a stable home.", "all x.(Mike(x) -> OldPerson(x) & LivesInStableHome(x))", "(OldPerson(Mike,StableHome) & LivesIn(Mike,StableHome))", "all x.(Mike(x) -> LivesInStableHome(x))", "all x.(OldPerson(x) -> LivesInStableHome(x))", "-OldPerson(Mike) & LivesInStableHome(Mike))", "all x y.((Mike(x) & OldPerson(y) & LivesInStableHome(x,y)) -> OldPerson(x))", "all x.(Mike(x) -> (OldPerson(x) & LivesInStableHome(x)))", "all x y.((OldPerson(x) & StableHome(y)) -> Mike(x))", "(OldPerson(Mike) & LivesInStableHome(Mike))", "exists x.(OldPerson(x) & LivesInStableHome(x))", "all x.(Mike(x) -> OldPerson(x) & LivesInStableHome(x))", "(OldPerson(Mike,StableHome) & LivesIn(Mike,StableHome))"]}
{"id": "folio_train_1037", "nl": "If Mike wears flannel shirts every day or does not like shopping for clothes and other materialistic goods, then Mike is neither an old person living in a stable home nor does not like shopping for clothes and other materialistic goods.", "fol": "((WearsFlannelShirts(Mike) | NoShopping(Mike)) -> (-Elderly(Mike) & -StableHome(Mike)))", "prediction": ["all x.((Mike(x) & WearsFlannelShirtsEveryDay(x) | (-LikesShoppingForClothesAndMaterialisticGoods(x)))) -> (-OldPerson(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)))", "all x.((WorthsFlannelShirtsEveryDay(x) | (-LikesShoppingForClothesAndMaterialisticGoods(x)))) -> (OldPerson(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)))", "all x.((Mike(x) & WearsFlannelShirtsEveryDay(x)) | (-LikesShoppingForClothesAndMaterialisticGoods(x))))", "((WearsFlannelShirtsEveryDay(Mike) | (-LikesShoppingForClothesAndMaterialisticGoods(Mike))) & -OldPerson(Mike) & StableHome(Mike)))", "all x y.((Mike(x) & WearsFlannelShirtsEveryDay(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)) -> (-OldPerson(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)))", "(all x.((WorthsFlannelShirtsEveryDay(x) | -LikesShoppingForClothesAndMaterialisticGoods(x))) -> -OldPerson(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)))", "all x.((WorthsFlannelShirtsEveryDay(x) | -LikesShoppingForClothesAndMaterialisticGoods(x)) -> (OldPerson(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)))", "all x.((WearsFlannelShirtsEveryDay(x) | (-LikesShoppingForClothesAndMaterialisticGoods(x)))) -> (OldPerson(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)))", "(all x.((Mike(x) & WearsFlannelShirtsEveryDay(x)) | (-LikesShoppingForClothesAndMaterialisticGoods(x)))) -> (OldPerson(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)))", "all x.((WorthsFlannelShirtsEveryDay(x) | (-LikesShoppingForClothes(x) & -LikesShoppingForMaterialisticGoods(x))) -> (OldPerson(x) & -LikesShoppingForClothes(x) & -LikesShoppingForMaterialisticGoods(x)))", "all x y.((Mike(x) & WearsFlannelShirtsEveryDay(x) & -(LikesShoppingForClothes(x) | LikesShoppingForMaterialisticGoods(x))) -> (NeitherOldPerson(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)))", "all x y.((Mike(x) & WearsFlannelShirtsEveryDay(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)) -> (NeitherOldPerson(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)))", "all x.((Mike(x) & WearsFlannelShirtsEveryDay(x) | (-LikesShoppingForClothesAndMaterialisticGoods(x)))) -> (-OldPerson(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)))", "all x.(WearsFlannelShirtsEveryDay(x) | (-LikesShoppingForClothesAndMaterialisticGoods(x))))", "all x.((Mike(x) & WearsFlannelShirtsEveryDay(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)) -> (-OldPerson(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)))", "all x.((Mike(x) & WearsFlannelShirtsEveryDay(x)) | (-LikesShoppingForClothesAndMaterialisticGoods(x))))"]}
{"id": "folio_train_1038", "nl": "If Mike is not an old person living in a stable home and does not like shopping for clothes and other materialistic goods, then Mike does not like shopping for clothes and other materialistic goods.", "fol": "((-Elderly(Mike) & -Shopping(Mike)) -> -Shopping(Mike))", "prediction": ["all x.((OldPerson(x) & LivesInStableHome(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)) -> -LikesShoppingForClothesAndMaterialisticGoods(x))", "all x.((OldPerson(x) & LivingInStableHome(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)) -> -LikesShoppingForClothesAndMaterialisticGoods(x))", "all x.((Mike(x) & -OldPerson(x) & LivesInStableHome(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)) -> -LikesShoppingForClothesAndMaterialisticGoods(x))", "(all x.((OldPerson(x) & LivesInStableHome(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)) -> -LikesShoppingForClothesAndMaterialisticGoods(x)))", "all x.((OldPerson(x) & -LivingInStableHome(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)) -> -LikesShoppingForClothesAndMaterialisticGoods(x))", "all x y.((OldPerson(x) & StableHome(y) & -LikesShopping(x,y) & ShopsClothesAndMaterialisticGoods(x)) -> -LikesShopping(x,y))", "(-OldPerson(Mike) & LivesInStableHome(Mike) & -LikesShoppingForClothesAndMaterialisticGoods(Mike))", "all x.((OldPerson(x) & LivesInStableHome(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)) -> -LikesShoppingForClothesAndMaterialisticGoods(x))", "all x.((Altered(x) & LivesInStableHome(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)) -> -LikesShoppingForClothesAndMaterialisticGoods(x))", "all x.((Mike(x) & -OldPersonLivingInStableHome(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)) -> -LikesShoppingForClothesAndMaterialisticGoods(x))", "all x.((Mike(x) & -OldPerson(x) & LivesInStableHome(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)) -> -LikesShoppingForClothesAndMaterialisticGoods(x))", "(all x.((OldPerson(x) & LivesInStableHome(x) & -LikesShopping(x)) -> -LikesShopping(x)))", "all x.((OldPerson(x) & LivingInStableHome(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)) -> -LikesShoppingForClothesAndMaterialisticGoods(x))", "all x y.((OldPerson(x) & StableHome(y) & -MadeIn(x,y) & LikesShopping(x,y) & Shops(x,y)) -> -MadeIn(x,y))", "-(OldPerson(Mike) & LivesInStableHome(Mike) & -LikesShoppingForClothesAndMaterialisticGoods(Mike)))", "all x.((OldPerson(x) & LivesInStableHome(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)) -> -LikesShoppingForClothesAndMaterialisticGoods(x))"]}
{"id": "folio_train_1039", "nl": "Adam owns cars.", "fol": "exists x.OwnsCar(Adam,x)", "prediction": ["all x.(Adam(x) -> OwnsCars(x))", "Adam ownsCars(a)", "all x.(OwnsCars(x) -> Adam(x))", "(OwnsCars(Adam))", "Adam ownsCars.", "exists x.(Adam(x) & OwnsCars(x))", "Adam OwnsCars(Adam)", "all x y.((Adam(x) & Car(y)) -> Owns(x,y))", "all x.(OwnsCars(x) -> Adam(x))", "(OwnsCars(Adam))", "exists x.(Adam(x) & OwnsCars(x))", "Adam ownsCars.", "(OwnsCars(Adam))", "Adam owns cars.", "Adam OwnsCars(a)", "exists x.(Adam(x) & OwnsCars(x))"]}
{"id": "folio_train_1040", "nl": "Adam has a favorite car.", "fol": "exists x.FavoriteCar(Adam,x)", "prediction": ["all x.((Adam(x) & FavoriteCar(x)) -> Has(x,Adam))", "Adam has a favoriteCar(a)", "(FavoriteCar(Adam))", "all x.(Adam(x) -> FavoriteCar(x))", "Adam has a favoriteCar(Adam)", "all x.((Adam(x) & FavoriteCar(x)) -> Has(x,y))", "all x.(FavoriteCar(x) -> Adam(x))", "(FavoriteCar(Adam))", "exists x.(Adam(x) & FavoriteCar(x))", "all x.((Adam(x) & FavoriteCar(x)) -> HasCar(x))", "Adam has a favoriteCar(a)", "(FavoriteCar(Adam))", "Adam has a favoriteCar(a)", "(FavoriteCar(Adam,Adam))", "exists x.(Adam(x) & FavoriteCar(x))", "Adam has a favoriteCar(a)"]}
{"id": "folio_train_1041", "nl": "Among the cars he owns, Adam's favorite car is European.", "fol": "all x.((OwnsCar(Adam,x) & FavoriteCar(Adam,x)) -> IsEuropeanCar(x))", "prediction": ["(OwnsCar(Adam) & FavoriteCar(Adam))", "all x.((Car(x) & Owns(x)) -> FavoriteCar(x))", "among the cars he owns, Adam's favorite car is European.", "among all x.(Owns(x,Adam) -> FavoriteCar(x,European))", "Among the cars he owns, Adam's favorite car is European.", "Among all x y.((Car(x) & Adam(y)) -> FavoriteCar(x,y))", "among all x y.((Car(x) & Adam(y)) -> FavoriteCar(x,y))", "all x.(Owns(x,y) -> FavoriteCar(x,y))", "(OwnsCar(Adam,European) & FavoriteCar(Adam,European))", "(OwnsCar(Adam) & FavoriteCar(Adam))", "all x.((Car(x) & Owns(x)) -> FavoriteCar(x))", "among the cars he owns, Adam's favorite car is European.", "all x.(Owns(x,Adam) -> FavoriteCar(x,European))", "all x.((Car(x) & Owns(x,y)) -> FavoriteCar(x,z))", "(OwnsCar(Adam,European) & FavoriteCar(Adam,European))", "(OwnsCar(adam,european) & FavoriteCar(adam,european))"]}
{"id": "folio_train_1042", "nl": "Adam broke his favorite car.", "fol": "exists x.(OwnsCar(Adam,x) & FavoriteCar(Adam,x) & BrokeCar(Adam,x))", "prediction": ["Adam brokefavouriteCar(a)", "all x.((Adam(x) & FavoriteCar(x)) -> Breaks(x,y))", "(BreaksFavoriteCar(Adam))", "(BrokenCar(Adam) & FavoriteCar(Adam))", "-BreaksFavoriteCar(Adam)", "Adam brokefavoriteCar(Adam)", "all x y.((Car(x) & Adam(y)) -> Breaks(y,x))", "(FavoriteCar(Adam) & Breaks(Adam,Adam))", "-(AdamBreaksFavoriteCar(Adam))", "all x.((Adam(x) & FavoriteCar(x)) -> Breaks(x,y))", "Adam brokeFavoriteCar(Adam)", "Adam brokefavouriteCar(a)", "Adam brokeCar(a)", "Adam brokeFavoriteCar(Adam)", "Adam brokefavouritecar(a)", "Adam brokeFavoriteCar(Adam,x)"]}
{"id": "folio_train_1043", "nl": "Adam owns a Japanese car.", "fol": "exists x.(OwnsCar(Adam,x) & Japanese(x))", "prediction": ["all x.((Adam(x) & JapaneseCar(x)) -> Owns(x,y))", "(OwnsJapaneseCar(Adam))", "Adam owns a JapaneseCar.", "exists x.(Adam(x) & Owns(x,JapaneseCar))", "all x.((Adam(x) & OwnsJapaneseCar(x)) -> Owns(x,JapaneseCar))", "all x.((Adam(x) & JapaneseCar(x)) -> Owns(x,y))", "(OwnsJapaneseCar(Adam))", "Adam ownsJapaneseCar(Adam)", "all x.(Owns(x,JapaneseCar) -> Adam(x))", "(Owns(Adam,JapaneseCar) & Has(Adam,JapaneseCar))", "Adam owns a JapaneseCar.", "Adam Owns(Adams,JapaneseCar)", "exists x.(Adam(x) & Owns(x,y))", "Adam owns a Japanese Car.", "(OwnsJapaneseCar(Adam))", "exists x.(Adam(x) & Owns(x,JapaneseCar))"]}
{"id": "folio_train_1044", "nl": "Adam broke a European car.", "fol": "exists x.(OwnsCar(Adam,x) & IsEuropeanCar(x) & BrokeCar(Adam,x))", "prediction": ["all x y.((Adam(x) & Car(y)) -> Breaks(x,y))", "all x.((Adam(x) & BreaksEuropeanCar(x)) -> BreaksEuropeanCar(x))", "Adam brokeCar(a)", "all x y.((Adam(x) & EuropeanCar(y)) -> Breaks(x,y))", "(BreaksEuropeanCar(Adam))", "all x.((Adam(x) & EuropeanCar(y)) -> Broken(x,y))", "Adam brokeEuropeanCar(a)", "Adam brokeCar(a)", "(BrokenCar(Adam,EuropeanCar))", "Adam brokecar(adam,european)", "all x.((Adam(x) & BreaksCar(x,European)) -> Breaks(x,European))", "(BreaksEuropeanCar(Adam) & Adam(Adam))", "all x y.((Adam(x) & Car(y)) -> Breaks(x,y))", "Adam brokeCar(Adam)", "Adam brokeEuropeanCar(a)", "Adam brokecar(a)"]}
{"id": "folio_train_1045", "nl": "No buildings in New Haven are higher than 400 meters. ", "fol": "all x.(IsInNewHaven(x) -> -IsHigherThan400Meters(x))", "prediction": ["-exists x.(Building(x) & NewHunt(x) & HigherThan(x,400))", "all x.((Building(x) & NewHunt(x)) -> HigherThan400Meters(x))", "all x.(NewHunt(x) -> -HigherThan400Meters(x))", "-exists x.(Building(x) & NewHunt(x) & HigherThan(x,400))", "all x.((Building(x) & NewHunt(x)) -> HigherThan(x,400))", "-exists x.(Building(x) & HigherThan(x,400))", "(exists x.(Building(x) & NewHunt(x) & HigherThan(x,400)))", "all x.(NewHunt(x) -> -HigherThan400Meters(x))", "all x.((Building(x) & NewHunt(x)) -> -HigherThan400Meters(x))", "-exists x.(Building(x) & InNewHunt(x,400))", "All x.(NewHavenBuilding(x) -> HigherThan400Meters(x))", "-exists x.(Building(x) & NewHunt(x) & HigherThan400Meters(x))", "-exists x.(NewHunt(x) & HigherThan(x,400))", "-exists x.(Building(x) & HigherThan(x,400))", "-exists x.(Building(x) & HigherThan400Meters(x))", "-exists x.(Building(x) & InNewHunt(x,400))"]}
{"id": "folio_train_1046", "nl": "All buildings managed by Yale Housing are in New Haven. ", "fol": "all x.(ManagedByYaleHousing(x) -> IsInNewHaven(x))", "prediction": ["all x.((Building(x) & ManagedByYaleHousing(x)) -> NewHunt(x))", "all x y.((Building(x) & YaleHousing(y)) -> NewHanover(x))", "all x.((Building(x) & ManagedByYaleHousing(x)) -> NewHanover(x))", "all x y.((Building(x) & YaleHousing(y)) -> NewHunt(x,y))", "all x.(Building(x) -> ManagedByYaleHousing(x))", "all x.((Building(x) & ManagedByYaleHousing(x)) -> NewHunt(x))", "all x y.((Building(x) & ManagedByYaleHousing(x)) -> NewHunt(y))", "all x.(Building(x) & ManagedByYaleHousing(x) -> NewHunt(x))", "all x y.((Building(x) & YaleHousing(y)) -> NewHaven(x))", "all x.((Building(x) & ManagedByYaleHousing(x)) -> NewHanover(x))", "(all x.(Housing(x) -> NewHunt(x)))", "All x.(Building(x) -> NewHunt(x))", "all x.((Building(x) & ManagedByY YaleHousing(x)) -> NewHunt(x))", "all x.((Building(x) & ManagedByYaleHousing(x)) -> NewHaven(x))", "(All x.(Building(x) & ManagedByY YaleHousing(x)) -> NewHanover(x))", "All x.(Building(x) -> YaleHousing(x))"]}
{"id": "folio_train_1047", "nl": "All buildings in Manhattan are higher than 400 meters. ", "fol": "all x.(IsInManhattan(x) -> IsHigherThan400Meters(x))", "prediction": ["all x.((Building(x) & InMetropolitan(x)) -> HigherThan400Meters(x))", "all x y.((Building(x) & Manhattan(y)) -> HigherThan(x,400))", "all x.((Building(x) & InMetropolitan(x)) -> HigherThan400Meters(x))", "all x.((Building(x) & InMetropolitan(x,400)) -> HigherThan(x,400))", "all x.((Building(x) & HigherThan400Meters(x)) -> ManhattanBuilding(x))", "all x.(Building(x) -> HigherThan400Meters(x))", "all x.((Building(x) & Manhattan(x)) -> HigherThan400Meters(x))", "all x y.((Building(x) & Manhattan(y)) -> HigherThan400Meters(x,y))", "all x y.((Building(x) & Building(y) & Manhattan(x)) -> HigherThan(x,400))", "all x.(Building(x) -> HigherThan(x,400))", "all x y.((Building(x) & Manhattan(y)) -> HigherThan(x,400))", "(all x.(Building(x) -> HigherThan400Meters(x)))", "all x.((Building(x) & LowerThan400Meters(x)) -> ManhattanBuilding(x))", "all x.((Building(x) & InMidtown(x)) -> HigherThan400Meters(x))", "All x.(Building(x) -> HigherThan400Meters(x))", "All x.(Building(x) -> HigherThan(x,400))"]}
{"id": "folio_train_1048", "nl": "All buildings owned by Bloomberg are in Manhattan. ", "fol": "all x.(OwnedByBloomberg(x) -> IsInManhattan(x))", "prediction": ["all x.((Building(x) & OwnedByBanana(x)) -> Manhattan(x))", "all x.((Building(x) & OwnedByBanana(x)) -> InMiami(x))", "all x y.((Building(x) & Bloomberg(y)) -> InMiami(x,y))", "all x.(Building(x) -> BloombergOwnedInMiami(x))", "(all x.(BloombergBuilding(x) -> InMiami(x))", "all x.(BananasBuilding(x) -> InMiami(x))", "(AllowedByBanana(x) -> InMiami(x))", "all x.(Building(x) -> OwnedByBanana(x))", "all x y.((Building(x) & Bloomberg(y)) -> InMetropolitan(x,y))", "all x y.((Building(x) & OwnedByBanana(x,y)) -> Manhattan(y))", "all x.((Building(x) & OwnedByBanana(x)) -> Manhattan(x))", "all x.((Building(x) & OwnedByBurnaro(x)) -> Manhattan(x))", "all x.(BurnHouse(x) -> InMiami(x))", "all x.(Building(x) & OwnedByBanana(x) -> Manhattan(x))", "all x y.((Building(x) & Bloomberg(y)) -> InMidtown(x,y))", "All x.(Building(x) -> BloombergOwns(x))"]}
{"id": "folio_train_1049", "nl": "All buildings with the Bloomberg logo are buildings owned by Bloomberg. ", "fol": "all x.(HasBloombergLogo(x) -> OwnedByBloomberg(x))", "prediction": ["all x.((Building(x) & BloombergLogo(x)) -> OwnedByBananas(x))", "all x.((Building(x) & HasBurnaroLogo(x)) -> OwnedByBurnaro(x))", "all x y.((Building(x) & BloombergLogo(y)) -> OwnedByBanana(x,y))", "(all x.(BloombergBuilding(x) & HasBloombergLogo(x)) -> OwnedByBloomberg(x))", "all x.((Building(x) & BloombergLogo(x)) -> OwnedByBanana(x))", "all x.((Building(x) & HasBurnsbyLogo(x)) -> OwnedByBurnsby(x))", "all x.(Burning(x) -> OwnedByBurning(x))", "all x y.((Building(x) & BloombergLogo(x)) -> OwnedByBanana(y))", "all x.((Building(x) & BloombergLogo(x)) -> OwnedByBird(x))", "all x.((Building(x) & HasBananasLogo(x)) -> OwnedByBananas(x))", "all x.(BloombergBuilding(x) -> OwnedByBloomberg(x))", "all x y.((Building(x) & BloombergLogo(x)) -> OwnedByBird(y))", "all x.((Building(x) & BloombergLogo(x)) -> BloombergBuilding(x))", "all x.((Building(x) & HasBilliamsLogo(x)) -> OwnedByBilliams(x))", "all x y.((Building(x) & BloombergLogo(y)) -> OwnedBy(x,y))", "all x.((Building(x) & BloombergLogo(x)) -> OwnedByBanana."]}
{"id": "folio_train_1050", "nl": "Tower A is neither in New Haven nor in Manhattan.", "fol": "-((IsInNewHaven(Towera) & -IsInManhattan(Towera)) | (-IsInNewHaven(Towera) & IsInManhattan(Towera)))", "prediction": ["-(NewHaven(TowerA) | Manhattan(TowerA))", "(-NewHaven(TowerA) & -NewHaven(TowerA))", "(NeitherInNewHaven(TowerA) & -InNewHaven(TowerA) & -InNewHaven(TowerA))", "All x.(TowerA(x) -> (-NewHann(x) | Manhattan(x)))", "TowerA is -(NewHaven(Tower) | Manhattan(Tower)))", "all x.(TurnorA(x) -> (-NewHaven(x) | Manhattan(x)))", "(-NewHaven(TowerA) & -NewMennon(TowerA))", "-(NewHaven(TowerA) | Manhattan(TowerA))", "TowerA is -(InNew Haven(Turnabout) | InMiami(Turnabout)))", "All x.(TowerA(x) -> (-NewHaven(x) | -NewHaven(x)))", "All x.(TowerA(x) -> (NeesNewHaven(x) | NeesNewMendon(x)))", "(NeitherInNew Haven,norInMidtown(TowerA))", "(-NewHaven(TowerA) & -Menu(TowerA))", "-(NewHaven(TowerA) | Manhattan(TowerA))", "-(NewHunt(TowerA) & -NewHunt(TowerA))", "-(NewHann(TowerA) | Manhattan(TowerA))"]}
{"id": "folio_train_1051", "nl": "Tower B is a building with the Bloomberg logo and in Manhattan. ", "fol": "(HasBloombergLogo(Towerb) & IsInManhattan(Towerb))", "prediction": ["all x.(TowerB(x) -> (Building(x) & BloombergLogo(x) & InMetropolitan(x)))", "(Building(TowerB) & BloombergLogo(TowerB) & InMetropolitan(TowerC))", "all x.(TowerB(x) -> (Building(x) & HasBananasLogo(x) & InMetropolitan(x)))", "All x y.((TowerB(x) & BloombergLogo(y) & InMetropolitan(x,y)) -> BuildingWith(x,y))", "TowerB is a building with the BloombergLogo and in Manhattan.", "all x.((Building(x) & BloombergLogo(x) & InMetropolitan(x)) -> TowerB(x))", "(Building(TowerB) & HasBananasLogo(TowerB) & InMetropolitan(TowerC))", "all x.(TurbineB(x) -> (Building(x) & BloombergLogo(x) & InMetropolitan(x)))", "All x y.((TowerB(x) & Building(y)) -> (BananasLogo(x,y) & InMetropolitan(x,y)))", "(Building(TowerB) & BloombergLogo(TowerB) & InMetropolitan(TowerB))", "all x.(TowerB(x) -> (BuildingWithBananasLogo(x) & InMennonitoba(x)))", "all x.((Building(x) & BloombergLogo(x) & InMennonitoba(x)) -> TowerB(x))", "All x y.((TowerB) & Building(x,y)) -> (BurnsbyLogo(y) & InMetropolitan(y)))", "(Building(TowerB) & BloombergLogo(TowerB) & InMennonitoba(TowerB))", "all x.(TowerB(x) -> (BuildingWithBananasLogo(x) & InMetropolitan(x)))", "all x.((Building(x) & BloombergLogo(x) & InMetropolitan(x)) -> TowerB(x))"]}
{"id": "folio_train_1052", "nl": "Tower A is higher than 400 meters.", "fol": "IsHigherThan400Meters(TowerA)", "prediction": ["All x.(TowerA(x) -> HigherThan(x,400))", "TowerA is higherThan400Meters(Tower)", "All x.(TurbineA(x) -> HigherThan(x,400))", "(HigherTurbineAt400Meters(TowerA))", "TowerA is higher than 400 meters.", "all x y.((TowerA(x) & Tower(y)) -> HigherThan(x,400))", "(HigherTurnailAt(TowerA,400))", "all x.(TurbineA(x) -> HigherThan400Meters(x))", "All x.(TowerA(x) -> HigherThan400Meters(x))", "all x.((TowerA(x) & HigherThan(x,400)) -> HigherThan(x,400))", "(HigherTurbineAt400Meters(TowerA))", "TowerA is higherThan400Meters(Tower)", "Tower A is higher than 400 meters.", "All x.(TowerA(x) -> HigherThan(x,400))", "all x.(TurmA(x) -> HigherThan400Meters(x))", "All x.(TowerA(x) -> HigherThan400Meters(x))"]}
{"id": "folio_train_1053", "nl": "Tower A is not higher than 400 meters.", "fol": "-IsHigherThan400Meters(TowerA)", "prediction": ["all x.(TurbineA(x) -> -HigherThan400Meters(x))", "All x.(TowerA(x) -> -HigherThan400Meters(x))", "all x.((TowerA(x) & -HigherThan400Meters(x)) -> -HigherThan400Meters(x))", "TowerA is not higher than 400 meters.", "(-HigherThan400Meters(TowerA))", "(HigherTurbineAt400Meters(TowerA))", "all x y.((TowerA(x) & Tower(y)) -> -HigherThan(x,400))", "All x.(TowerA(x) -> -HigherThan400Meters(x))", "all x.((TowerA) & -HigherThan400Meters(x)) -> -HigherThan400Meters(x))", "(-HigherThan400Meters(TowerA))", "all x.(TurbineA(x) -> -HigherThan(x,400))", "All x.(TowerA(x) -> -HigherThan(x,400))", "all x.((TowerA(x) & -HigherThan400Meters(x)) -> -HigherThan400Meters(x))", "All x.(TurmA(x) -> -HigherThan(x,400))", "All x.(TowerA(x) -> -HigherThan400Meters(x))", "All x.(TurbineA(x) -> -HigherThan400Meters(x))"]}
{"id": "folio_train_1054", "nl": "Tower A is a building with the Bloomberg logo or managed by Yale Housing.", "fol": "(HasBloombergLogo(Towera) | ManagedByYaleHousing(Towera))", "prediction": ["all x.((Building(x) & (BloombergLogo(x) | YaleHousing(x))) -> TowerA(x))", "all x.(TowerA(x) -> (Building(x) & (BloombergLogo(x) | YaleHousing(x))))", "all x.((Building(x) & (BurnsbyLogo(x) | YaleHousing(x))) -> TowerA(x))", "(Building(TowerA) & (BloombergLogo(Bloomberg) | YaleHousing(Bloomberg))))", "(Building(TowerA) & (BurnsbyLogo(Burnsby) | ManagedByYaleHousing(YaleHousing)))", "all x y.((TowerA(x) & Building(y)) -> ((BurnsbyLogo(x,y) | YaleHousing(y))))", "all x y.((Building(x) & BloombergLogo(y)) -> (ManagedByYaleHousing(x,y) | ManagedByYaleHousing(x,y)))", "all x.(TowerA(x) -> (Building(x) & (BurnsbyLogo(x) | YaleHousing(x))))", "All x.(TurbineA(x) -> (Building(x) & (BurnsbyLogo(x) | YaleHousing(x))))", "(Building(TowerA) & (BloombergLogo(A) | YaleHousing(B)))", "all x.((Building(x) & (BloombergLogo(x) | YaleHousing(x))) -> TowerA(x))", "all x.((Building(x) & BloombergLogo(x)) | ManagedByYaleHousing(x)) -> TowerA(x))", "all x y.((TowerA(x) & Building(y) & (BloombergLogo(y) | YaleHousing(y))) -> Building(x,y))", "all x.(TowerA(x) -> (Building(x) & (BloombergLogo(x) | YaleHousing(x))))", "All x.(TowerA(x) -> (BuildingWithBananasLogo(x) | ManagedByYaleHousing(x)))", "All x.(TurbineA(x) -> (Building(x) & (BurnyLogo(x) | YaleHousing(x))))"]}
{"id": "folio_train_1055", "nl": "Tower A is neither a building with the Bloomberg logo nor managed by Yale Housing.", "fol": "(-HasBloombergLogo(Towera) & -ManagedByYaleHousing(Towera))", "prediction": ["all x.(TowerA(x) -> (-BurningWithBurningBottom(x) & -ManagedByYaleHousing(x)))", "all x.(TowerA(x) -> (-(BuildingWithBurnwallLogo(x) & -ManagedByYaleHousing(x)) | -(BuildingWithBurnwallLogo(x) & ManagedByYaleHousing(x))))", "(-(Building(TowerA) & BloombergLogo(Bloomberg)) | ManagedByYaleHousing(TowerA)))", "(-(BuildingWithBurnwallLogo(TowerA) & -ManagedByYaleHousing(TowerA)) | -ManagedByByBurnwallLogo(TowerA)))", "(Building(TowerA) & -(BurnyLogo(TowerA) | YaleHousing(TowerA)))", "all x.(TurbineA(x) -> (-(BuildingWithBananasLogo(x) & -ManagedByYaleHousing(x)) | -(BuildingWithBananasLogo(x) & ManagedByYaleHousing(x))))", "(-(BuildingWithBananasLogo(TowerA) & -ManagedByYaleHousing(TowerA)) | BuildingWithBananasLogo(TowerA)))", "-(Building(tower) & HasBurnyLogo(tower) & -ManagedByYaleHousing(tower))", "(Building(TowerA) & -(BuildingWithBananasLogo(A) & -ManagedByYaleHousing(BananasLogo(A)))", "all x.(TowerA(x) -> (-BurnsdayBuilding(x) & -ManagedByYaleHousing(x)))", "all x.((Building(x) & -(BurnyLogo(x) | YaleHousing(x))) -> TowerA(x))", "all x.(TurbineA(x) -> (-BurningWithBurningBottom(x) & -ManagedByYaleHousing(x)))", "-(Building(TowerA) & -(BuildingWithBurnwallLogo(A) | ManagedByYaleHousing(A)))", "All x.(TowerA(x) -> (-BurnyLogo(x) & -ManagedByYaleHousing(x)))", "All x.(TowerA(x) -> (-BenefitsBurnwallLogo(x) & -ManagedByYaleHousing(x)))", "all x.(TurbineA(x) -> (-(BuildingWithBananasLogo(x) | ManagedByYaleHousing(x))))"]}
{"id": "folio_train_1056", "nl": "No fish are birds.", "fol": "all x.(IsFish(x) -> -IsBird(x))", "prediction": ["-exists x.(Fish(x) & Bird(x))", "all x.(Fish(x) -> -Bird(x))", "-exists x.(Fish(x) & Bird(x))", "all x.(Fish(x) -> -Bird(x))", "(exists x.(Fish(x) & Bird(x)))", "-exists x.(Fish(x) & Bird(x))", "all x.(Fish(x) -> Bird(x))", "-exists x.(Fish(x) & Bird(x))", "all x.(Fish(x) -> -Bird(x))", "all x.(Fish(x) -> Bird(x))", "-exists x.(Fish(x) & Bird(x))", "all x.(Fish(x) -> Bird(x))", "-exists x.(Fish(x) & Bird(x))", "-exists x.(Fish(x) & Bird(x))", "-exists x.(Fish(x) & Bird(x))", "-exists x.(Fish(x) & Bird(x))"]}
{"id": "folio_train_1057", "nl": "Everything that is an osprey is a bird.", "fol": "all x.(IsOsprey(x) -> IsBird(x))", "prediction": ["all x.((Osprey(x) & Bird(x)) -> Bird(x))", "all x.(Osprey(x) -> Bird(x))", "all x.((Osprey(x) & Bird(x)) -> Bird(x))", "all x.(Osprey(x) -> Bird(x))", "all x y.((Osprey(x) & Bird(y)) -> Bird(x))", "all x.((Osprey(x) & Bird(x)) -> Bird(x))", "all x.(Osprey(x) -> Bird(x))", "all x y.((Osprey(x) & Bird(y)) -> Bird(x))", "all x.((Osprey(x) & HasBird(x)) -> Bird(x))", "all x.((Osprey(x) & Bird(x)) -> Bird(x))", "all x.(Osprey(x) -> Bird(x))", "all x.((Osprey(x) & Bird(x)) -> Bird(x))", "all x.(Osprey(x) -> Bird(x))", "all x.(Osprey(x) -> Bird(x))", "all x.((Osprey(x) & Bird(x)) -> Bird(x))", "all x.(Osprey(x) -> Bird(x))"]}
{"id": "folio_train_1058", "nl": "If something is a carp, then it is a fish.", "fol": "all x.(IsCarp(x) -> IsFish(x))", "prediction": ["all x.((Carp(x) & Fish(x)) -> Fish(x))", "all x.((Carp(x) & Fish(x)) -> Fish(x))", "all x.(Carp(x) -> Fish(x))", "all x.((Crop(x) & Fish(x)) -> Fish(x))", "all x y.((Carp(x) & Fish(y)) -> Fish(x))", "all x.((Carp(x) & Fish(x)) -> Fish(x))", "all x.(Crap(x) -> Fish(x))", "all x y.((Carp(x) & Fish(y)) -> Fish(x))", "all x.((Crap(x) & Fish(x)) -> Fish(x))", "all x.(Carp(x) -> Fish(x))", "all x.((Carp(x) -> Fish(x))", "all x.(Crop(x) -> Fish(x))", "all x.((Crop(x) & Fish(x)) -> Fish(x))", "all x.(Carp(x) -> Fish(x))", "exists x.(Carp(x) & Fish(x))", "exists x.(Crop(x) & Fish(x))"]}
{"id": "folio_train_1059", "nl": "All goldfish are carp.", "fol": "all x.(IsGoldfish(x) -> IsCarp(x))", "prediction": ["all x.(Goldfish(x) -> Carp(x))", "all x.(Goldfish(x) -> Carp(x))", "(all x.(Goldfish(x) -> Carp(x))", "all x.(Goldfish(x) -> Carp(x))", "all x.(Goldfish(x) -> Carp(x))", "(all x.(Goldfish(x) -> Carp(x))", "all x y.(Goldfish(x) -> Carp(y))", "all x.(Goldfish(x) -> Carp(x))", "all x.(Goldfish(x) -> Carp(x))", "all x.(Goldfish(x) -> Crap(x))", "all x.(Goldfish(x) -> Carp(x))", "all x.(Goldfish(x) -> Carp(x))", "all x.(Goldfish(x) -> Crap(x))", "all x.(Goldfish(x) -> Carp(x))", "all x.(goldfish(x) -> Carp(x))", "all x.(Goldfish(x) -> Crap(x))"]}
{"id": "folio_train_1060", "nl": "If Bubbles is either an osprey or a goldfish, then Bubbles is not a fish.", "fol": "(((IsOsprey(Bubbles) & -IsCarp(Bubbles)) | (-IsOsprey(Bubbles) & IsCarp(Bubbles))) -> -IsFish(Bubbles))", "prediction": ["all x.((Bubble(x) & (Osprey(x) | Goldfish(x))) -> -Fish(x))", "all x.((Balloon(x) & (Osprey(x) | Goldfish(x))) -> -Fish(x))", "all x.((Baby(x) & (Osprey(x) | Goldfish(x))) -> -Fish(x))", "all x.((Bubble(x) & (Osprey(x) | Goldfish(x))) -> -Fish(x))", "(all x.((Balloon(x) & Osprey(x)) | (Goldfish(x)))) -> -Fish(x))", "all x.((Balloon(x) & (Osprey(x) | Goldfish(x))) -> -Fish(x))", "all x.((Bubble(x) & (Osprey(x) | Goldfish(x))) -> -Fish(x))", "all x.((Baby(x) & (Osprey(x) | Goldfish(x))) -> -Fish(x))", "(all x.((Bubble(x) & Osprey(x)) | (Goldfish(x) & Bubbles(x)))) -> -Fish(x))", "all x y.((Bubble(x) & Osprey(y) & Goldfish(y)) -> -Fish(x,y))", "all x.((Osprey(x) | Goldfish(x)) -> -Fish(x))", "all x.(Osprey(x) | Goldfish(x)) -> -Fish(x))", "all x.((Bubble(x) & (Osprey(x) | Goldfish(x))) -> -Fish(x))", "all x.((Balloon(x) & (Osprey(x) | Goldfish(x))) -> -Fish(x))", "all x y.((Bubble(x) & Osprey(x) & Goldfish(y)) -> -Fish(x))", "all x.((Bubble(x) & (Osprey(x) | Goldfish(x))) -> -Fish(x))"]}
{"id": "folio_train_1061", "nl": "Bubbles is an Osprey.", "fol": "IsOsprey(Bubbles)", "prediction": ["Osprey(Bubbles)", "All x.(Balloon(x) -> Osprey(x))", "Osprey(Bubbles)", "(Osprey(Bubbles)", "all x.(Bubbles(x) -> Osprey(x))", "All x.(Balloon(x) -> Osprey(x))", "all x.(Bubble(x) -> Osprey(x))", "Bubbles is Osprey(x)", "(Osprey(Bubbles)", "Osprey(Bubbles)", "Osprey(Osprey)", "All x.(Balloon(x) -> Osprey(x))", "All x.(Bubbly(x) -> Osprey(x))", "Osprey(Osprey)", "all x.(Bubbles(x) -> Osprey(x))", "Osprey."]}
{"id": "folio_train_1062", "nl": "Bubbles is a carp.", "fol": "IsCarp(Bubbles)", "prediction": ["all x.(Bubble(x) -> Carp(x))", "all x.(Balloon(x) -> Carp(x))", "all x.(Bubbles(x) -> Carp(x))", "(Crap(Bubbles) & Carp(Bubbles))", "all x y.((Bubble(x) & Carp(y)) -> Carp(x))", "all x.(Balloon(x) -> Carp(x))", "(Carp(Bubbles) & Carp(Bubbles))", "all x.(Bubble(x) -> Carp(x))", "all x y.((Bubble(x) & Carp(y)) -> Carp(x))", "all x.(Bubbly(x) -> Carp(x))", "(Crop(Bubble) & Carp(Bubble))", "All x.(Bubble(x) -> Crap(x))", "all x.(Balloon(x) -> Carp(x))", "All x.(Bubbles(x) -> Crap(x))", "All x.(Bubble(x) -> Carp(x))", "exists x.(Bubbles(x) & Carp(x))"]}
{"id": "folio_train_1063", "nl": "Bubbles is not a carp.", "fol": "-IsCarp(Bubbles)", "prediction": ["all x.(Bubble(x) -> -Crop(x))", "all x.(Balloon(x) -> -Crop(x))", "all x.(Bubble(x) -> -Crop(x))", "all x.(Balloon(x) -> -Carp(x))", "-Carnivore(Bubbles)", "all x.(Bubbles(x) -> -Crop(x))", "all x.(Bubble(x) -> -Carp(x))", "all x y.((Bubble(x) & Carp(y)) -> -Crop(x))", "(all x.(Bubble(x) -> -Crop(x)))", "all x.(Bubbly(x) -> -Carp(x))", "(-Crop(Bubble))", "(-Crap(Bubbles))", "all x.(Balloon(x) -> -Crop(x))", "all x.(Bubble(x) -> -Crop(x))", "exists x.(Balloon(x) & -Carp(x))", "All x.(Bubble(x) -> -Carp(x))"]}
{"id": "folio_train_1064", "nl": "Mr. and Mrs. Smith make a travel plan, they want to go to a city in California or Florida, and where neither of them has ever been.", "fol": "all x.((DesiresTravelPlan(x) -> (IsInCalifornia(x) | IsInFlorida(x))) & HasNeverVisited(x))", "prediction": ["all x y.((Mr.Smith(x) & Mrs.Smith(y)) -> (MakesTravelPlan(x) & (WantsToCalifornia(x) | WantsToFlorida(x)) & -WantsToCalifornia(y))))", "all x.((Mr.Smith(x) & MakesTravelPlan(x) & (CaliforniaCity(x) | FloridaCity(x)) & -(Mr.Smith(x) & FloridaCity(x)))) -> -(Mr.Smith(x) & FloridaCity(x)))", "((Mr.Smith(Mr.Smith) & MakesTravelPlan(Mr.Smith) & (CaliforniaCity(Mr.Smith) | FloridaCity(Mr.Smith))) -> (WantsToGoTo(Mr.Smith,Mr.Smith) & -WantsToGoTo(Mr.Smith,Mr.Smith)))", "all x y z.((Mr.(Mr.(Mr.(Mr.(Mr.(Mr.) & Mrs.(Mr.) & City(y) & City(z)) & MakesTravelPlan(x,y) & (California(y) | Florida(y))) -> -(Mr.(Mr.(Mr.(Mr.) | Florida(y))))", "(exists x.(Mr.Smith(x) & TravelPlan(x)) & ((Mr.Smith(x) & City(x)) | City(x))) & -exists y.(Mr.Smith(y) & City(y))))", "((Mr.Smith(Mr.Smith) & TravelPlan(Mr.Smith)) -> (Makes(Mr.Smith,TravelPlan) & (WantsToCalifornia(Mr.Smith,Fla.) | WantsToFlorida(Mr.Smith,Fla.)) & -HasBeen(Mr.Smith,Fla.)))", "all x.((Mr.Smith(x) & (California(x) | Florida(x))) -> (MakesTravelPlan(x) & -ReallyBeen(x)))", "(all x y.((Mr.Smith(x) & City(y)) -> MakesTravelPlan(x,y)) & ((Mr.Smith(x) & City(y)) | (Mrs.Smith(x) & City(y)))))", "all x y z.((Mr.Smith(x) & Mrs.Smith(y) & City(z) & MakesTravelPlan(x,z)) -> ((WantsToGoTo(x,z) & (California(z) | Florida(z)) & -HasBeen(y,z))))", "all x y.((Mr.Smith(x) & Mrs.Smith(y)) -> (MakesTravelPlan(x) & (WantsToCalifornia(x) | WantsToFlorida(x)) & -HasBeen(y)))", "all x.((Mr.Smith(x) & TravelPlan(x) & (CaliforniaCity(x) | FloridaCity(x)) & -Mr.Smith(x)) -> Makes(x,City))", "((Mr.Smith(m) & MakesTravelPlan(m)) & (GoesToCalifornia(m) | GoesToFlorida(m)) & -BeenTo(m,m,m))", "all x.((Mrs.Smith(x) & MakesTravelPlan(x) & (CaliforniaCity(x) | FloridaCity(x)) & -NeitherMrs.Smith(x)) -> TravelPlan(x))", "(exists x.(Mrs.Smith(x) & TravelPlan(x) & (CaliforniaCity(x) | FloridaCity(x)) & -exists y.(Mrs.Smith(y) & TravelPlan(y))))", "all x y z.((Mr.Smith(x) & Mrs.Smith(y) & City(z) & MakesTravelPlan(x,y,z)) -> ((WantsToGoTo(x,z) & (California(z) | Florida(z))) & -(WantsToGoTo(x,y,z)))))", "all x.((Mr.Smith(x) & MakesTravelPlan(x) & (CaliforniaCity(x) | FloridaCity(x)) & -Mr.Smith(x)) -> -MadeTravelPlan(x))"]}
{"id": "folio_train_1065", "nl": "Cities in California that they are interested in are San Francisco, Los Angeles, and San Diego.", "fol": "all x.(((IsSanFrancisco(x) | IsLosAngeles(x) | IsSanDiego(x)) & IsInCalifornia(x)) -> DesiresTravelPlan(x))", "prediction": ["all x.((City(x) & Interest(x)) -> (SanFrancisco(x) | Los Angeles(x) | SanDiego(x)))", "(InterestingCities(City) & SanFrancisco(City) & InterestIn(City) & Los Angeles(City) & InterestIn(City) & SanDistrict(City))", "(IndividualsInCalifornia(SanFrancisco) | IndividualsInCalifornia(LosAngeles) | IndividualsInCalifornia(SanDiego)))", "(InterestingCities(California) -> (SanFrancisco(California) | Interests(California)) & Interests(California)))", "(InterestedIn(CaliforniaCity) -> (SanFrancisco(x) | Los Angeles(x) | SanDiego(x)))", "all x y.((City(x) & City(y) & Interest(x,y)) -> (SanFrancisco(x) | Los Angeles(x) | SanDiego(x)))", "(InterestingCities(cities,sanfriocean) | Interests(cities,los Angeles) | Interests(cities,sandiocean)))", "all x.((City(x) & Interest(x)) -> (SanFrancisco(x) | Los Angeles(x) | SanDiego(x)))", "all x.((City(x) & InCalifornia(x)) -> (SanFrancisco(x) | Los Angeles(x) | SanDiego(x)))", "(InCaliforniaCity(x) & (SanFrancisco(x) | Los Angeles(x) | SanDiego(x)))", "all x.((City(x) & InterestIn(x,SanFrancisco) & InterestIn(x,Los Angeles) & InterestIn(x,SanDiego)) -> InterestIn(x,SanFrancisco))", "(InterestingCity(c) & SanFrancisco(c) & Los Angeles(c) & SanDiego(c))", "all x y.((City(x) & California(y) & InterestIn(x,y)) -> (SanFrancisco(x) | Los Angeles(x) | SanDiego(x)))", "all x.((City(x) & InterestIn(x,SanFrancisco) | InterestIn(x,Los Angeles) | InterestIn(x,SanDistrict)) -> InterestIn(x,SanFrancisco))", "all x.((City(x) & Interest(x)) -> (SanFrancisco(x) | Los Angeles(x) | SanDiego(x)))", "all x.((City(x) & InCalifornia(x)) -> (SanFrancisco(x) | Los Angeles(x) | SanDiego(x)))"]}
{"id": "folio_train_1066", "nl": "Cities in Florida that they are interested in are Orlando and Miami.", "fol": "all x.(((IsOrlando(x) | IsMiami(x)) & IsInFlorida(x)) -> DesiresTravelPlan(x))", "prediction": ["all x.((City(x) & Interest(x)) -> (Orlando(x) | Miami(x)))", "(InterestingCities(Florida,Orlando) & Interests(Florida,Miami))", "all x y.((City(x) & City(y) & Interest(x,y)) -> (Orlando(x) | Miami(x)))", "all x.((City(x) & InterestIn(x,Orlando) & InterestIn(x,Miami)) -> InterestIn(x,Florida))", "all x.((City(x) & Interest(x)) -> (Orlando(x) | Miami(x)))", "all x.((City(x) & InInterest(x,Florida)) -> (Orlando(x) | Miami(x)))", "(InterestingCity(florida) -> (Orlando(f) | Miami(f)))", "(IndividualsInFlorida(x) & (Orlando(x) | Miami(x)))", "(InterestingCities(Florida) | InterestsInCities(Florida))", "all x y.((City(x) & City(y) & Interest(x,y)) -> (Orlando(x) | Miami(x)))", "all x y.((City(x) & City(y) & Florida(x) & Interest(x,y)) -> (Orlando(x) | Miami(x)))", "(InterestingCitiesInFlorida(c) -> (Orlando(c) | Miami(c)))", "all x.((City(x) & Orlando(x) & Miami(x)) -> Interest(x))", "(IndividualsInFlorida(x) -> (Orlando(x) | Miami(x)))", "all x.((City(x) & InInterested(x,Florida)) -> (Orlando(x) | Miami(x)))", "all x.((City(x) & Interest(x)) -> (Orlando(x) | Miami(x)))"]}
{"id": "folio_train_1067", "nl": "Mr. Smith has been to two cities in California.", "fol": "VisitedCaliforniaCity(MrSmith,Two)", "prediction": ["(StockToCity(Stock) & ToCity(Stock) & ToCity(Stock) & ToCity(Stock) & ToCity(Stock) & ToCity(Stock) & ToCity(Stock) & ToCity(Stock) & ToCity(Stock) & ToCity(Stock) & ToCity(Stock) & ToCity(Stock)", "(Mr.Smith(Mr.Smith) & TwoCities(Mr.Smith))", "Mr.Smith has been to two cities in California.", "Ms.Smith has been to two cities in California.", "-(Mr.Smith(Mr.Stick) & TwoCities(Mr.Stick))", "(BeganTo(Mr.Smith,City,2) & In(Mr.Smith,City,2))", "-(Mr.Smith(Mr.City(Mr.Stock) & City(Mr.City) & City(Mr.City)))", "(BeganToCity(Mr.Smith,California) & ToCity(Mr.Smith,California))", "all x.(Mr.Smith(x) -> (BeganTo(x,2) & In(x,2) & In(x,3)))", "-Mr.Smith(Mr.Smith) & TwoCitiesInCalifornia(Mr.Smith)", "Mr.Smith has been to two cities in California.", "Ms.Smith has been to two cities in California.", "(Mr.Smith(Mr.Smith) & TwoCities(Mr.Smith))", "-(Mr.Smith(Mr.Sander) & TwoCities(Mr.Sander))", "-exists x.(MrSander(x) & City(x,2) & California(x))", "Mr.Smith has been to two cities in California."]}
{"id": "folio_train_1068", "nl": "Mrs. Smith has been to one city in Florida.", "fol": "VisitedFloridaCity(MrsSmith,One)", "prediction": ["Mrs.Smith has been to one city in Florida.", "all x.(Ms.Smith(x) -> (BeganTo(x,Fla.) & To(x,Fla.)))", "(exists x.(City(x) & In(x,Florida)) & Mrs.Smith(x))", "all x.(Mrs.Smith(x) -> (BeganTo(x,Fla.) & To(x,Fla.)))", "Ms.Smith has been to one city in Florida.", "(BeganTo(Mrs.Smith,Florida) & To(Mrs.Smith,Florida))", "all x.((Mrs.Smith(x) & City(x)) -> Florida(x))", "-(Mrs.Smith(Ms.Fla.))", "-exists x.(Ms.Smith(x) & City(x) & InFlorida(x))", "(StaffToCity(Mrs.Smith) & InCity(Mrs.Smith,Florida))", "Mrs.Smith has been to one city in Florida.", "all x y.((Ms.Smith(x) & City(y)) -> InFla.(Ms.Smith(x,y)))", "(exists x.(MrsSmith(x) & City(x) & Florida(x)))", "All x.(Ms.Smith(x) -> (ToCity(x,Florida) | ToCity(x,Florida)))", "-(Mrs.Smith(Mrs.Smith) & City(Melbourne,FL))", "All x.(Ms.Smith(x) -> OneCityInFlorida(x))"]}
{"id": "folio_train_1069", "nl": "Mr. Smith has been to San Francisco.", "fol": "IsSanFrancisco(MrSmith)", "prediction": ["(Son(Mr.Smith) & SanFrancisco(Mr.Smith))", "Mr.Smith has been to San Francisco.", "-(Mr.Smith(Mr.Stick) & SanFrancisco(Mr.Smith))", "all x.(Mr.Smith(x) -> SanFrancisco(x))", "(Staff(Mr.Smith) & SanFrancisco(Mr.Smith))", "-SonyFernando(Mr.Smith)", "-(Mr.Smith(Mr.Stanford) & SanFernando(Mr.Smith))", "(BeenToSanFrancisco(Mr.Smith)", "Ms.Smith has been to San Francisco.", "Mr.Smith has been to San Francisco.", "all x.(Mr.Smith(x) -> SanFernando(x))", "(Son(Mr.Smith) & SanFernando(Mr.Smith))", "M. Smith has been to SanFrancisco.", "-Mr.Smith(Mr.Smith)", "All x.(MrSander(x) -> SanFrancisco(x))", "Mr.Smith has been to San Francisco."]}
{"id": "folio_train_1070", "nl": "They have at leat one candidate city in Florida to visit.", "fol": "exists x.(CandidateCity(x) & IsInFlorida(x) & DesiresTravelPlan(x))", "prediction": ["all x.((City(x) & Candidate(x)) -> Visits(x,Florida))", "all x y.((City(x) & Candidate(y) & Florida(y)) -> Visits(x,y))", "all x y.((City(x) & CandidateCity(y)) -> Visits(x,y))", "all x y z.((City(x) & CandidateCity(y) & Florida(z)) -> Visits(x,y,z))", "all x.(City(x) -> Visits(x))", "(City(City) & Candidate(City) & Visits(City,Fla.))", "all x y.((CandidateCity(x) & City(y)) -> Visits(x,y))", "all x.((City(x) & CandidateCity(x)) -> Visits(x))", "(City(c) & Candidate(c) & Visits(c,florida))", "exists x.(CandidateCity(x) & Visits(x,Florida))", "all x y z.((City(x) & CandidateCity(y) & Florida(z) & Visit(x,y,z)) -> Visit(x,y,z))", "-exists x.(CandidateCity(x) & InFlorida(x))", "exists x.(City(x) & Candidate(x,Fla.))", "all x y.((CandidateCity(x) & City(y) & Florida(y)) -> Visits(x,y))", "exists x.(City(x) & Candidate(x) & Visits(x,Florida))", "exists x.(CandidateCity(x) & InFlorida(x))"]}
{"id": "folio_train_1071", "nl": "Everything is either big or small.", "fol": "all x.((IsBig(x) & -IsSmall(x)) | (-IsBig(x) & IsSmall(x)))", "prediction": ["all x.((Big(x) | Small(x)) -> Everything(x))", "all x.((Big(x) | Small(x)) -> (Big(x) | Small(x)))", "all x.(Big(x) | Small(x))", "all x.((Big(x) | Small(x)) -> Everything(x))", "(all x.(Bad(x) | Small(x)))", "all x y.((Big(x) | Small(y)) -> (Big(x) | Small(y)))", "all x.((Big(x) | Small(x)) -> (Big(x) | Small(x)))", "all x.(Big(x) | Small(x))", "all x.(Element(x) -> (Big(x) | Small(x)))", "exists x.(Big(x) | Small(x))", "all x.((Big(x) | Small(x)) -> Everything(x))", "(all x.(Big(x) | Small(x)))", "exists x.(Big(x) | Small(x))", "all x.((Big(x) | Small(x)) -> Big(x))", "exists x.(Big(x) | Small(x))", "exists x.(Big(x) | Small(x))"]}
{"id": "folio_train_1072", "nl": "All big things are heavy. ", "fol": "all x.(IsBig(x) -> IsHeavy(x))", "prediction": ["all x.(BigThing(x) -> Heavy(x))", "all x.(BigThing(x) -> Heavy(x))", "all x y.((BigThing(x) & Heavy(y)) -> Heavy(x))", "all x.(BigThing(x) -> Heavy(x))", "all x.((BigThing(x) & Heavy(x)) -> Heavy(x))", "all x.exists y.(BigThing(x) & Heavy(y))", "all x.(BigThing(x) -> Heavy(x))", "all x.(Groove(x) -> Heavy(x))", "(all x.(BigThing(x) -> Heavy(x)))", "all x.((BigThing(x) & Heavy(x)) -> Heavy(x))", "all x.(BigThing(x) -> Heavy(x))", "all x.(BigTree(x) -> Heavy(x))", "(all x.(BigThing(x) -> Heavy(x)))", "all x.(BigThing(x) -> Heavy(x))", "all x.(BigThing(x) -> Heavy(x))", "all x.(BigThing(x) -> Heavy(x))"]}
{"id": "folio_train_1073", "nl": "All small things are light. ", "fol": "all x.(IsSmall(x) -> IsLight(x))", "prediction": ["all x.(SmallThing(x) -> Light(x))", "all x.(SmallThing(x) -> Light(x))", "all x y.((SmallThing(x) & Light(y)) -> Small(x))", "all x.(SmallThing(x) -> Light(x))", "(all x.(SmallThing(x) -> Light(x))", "all x y.((SmallThing(x) & Small(y)) -> Light(x))", "all x.(Small(x) -> Light(x))", "all x.(SmallThing(x) -> Light(x))", "all x.((SmallThing(x) & Light(x)) -> Small(x))", "all x.(SmallThing(x) -> Light(x))", "all x.(SmallTend(x) -> Light(x))", "all x.(Small(x) -> Light(x))", "all x.(SmallThing(x) -> Light(x))", "all x.(SmallThing(x) -> Light(x))", "exists x.(Small(x) & Light(x))", "all x.(SmallThing(x) -> Light(x))"]}
{"id": "folio_train_1074", "nl": "All heavy things are still.", "fol": "all x.(IsHeavy(x) -> IsStill(x))", "prediction": ["all x.(HeavyThing(x) -> Still(x))", "all x.(HeavyThing(x) -> Still(x))", "(all x.(HeavyThing(x) -> Still(x)))", "all x y.((HeavyThing(x) & HeavyThing(y)) -> Still(x))", "all x.(HeavyThing(x) -> Still(x))", "(all x.(HeavyThing(x) -> Still(x)))", "All.(HeavyThing(x) -> Still(x))", "all x.(Heavy(x) -> Still(x))", "all x.(HeavyThing(x) -> Still(x))", "all x.(HasHeavyThing(x) -> Still(x))", "all x.(HeavyThing(x) -> Still(x))", "all x.(Heavy(x) -> Still(x))", "all x.(HeavyThing(x) -> Still(x))", "all x.(HeavyThing(x) -> Still(x))", "all x.(LightThing(x) -> Still(x))", "all x.(HeavyThan(x) -> Still(x))"]}
{"id": "folio_train_1075", "nl": "All light things are unstable.", "fol": "all x.(IsLight(x) -> IsUnstable(x))", "prediction": ["all x.(LightThing(x) -> Instabil(x))", "all x.(LightThing(x) -> Instabil(x))", "all x y.((LightThing(x) & LightThing(y)) -> Instabil(x))", "all x.(LightThing(x) -> Unstable(x))", "(all x.(LightThing(x) -> Instabile(x))", "all x.(Light(x) -> Instabil(x))", "all x y.((LightThing(x) & LightThing(y)) -> Instabil(x))", "all x.(LightThing(x) -> Instabil(x))", "all x.(LightThing(x) -> Unstable(x))", "all x.(LightTask(x) -> Instabil(x))", "all x.(Light(x) -> Instabil(x))", "all x.(LeafThing(x) -> Instabil(x))", "all x.(LightThing(x) -> Instabil(x))", "all x.(LightThing(x) -> Unstable(x))", "all x.(LightThing(x) -> Instabil(x))", "exists x.(LightThing(x) & Unstable(x))"]}
{"id": "folio_train_1076", "nl": "All unstable things are changing.", "fol": "all x.(IsUnstable(x) -> IsChanging(x))", "prediction": ["all x.(InstabileThing(x) -> Changes(x))", "all x.(UnstableThing(x) -> Changes(x))", "all x.(Unstable(x) -> Changes(x))", "all x y.((UnstableThing(x) & Unstable(y)) -> Changes(x))", "(all x.(UnstableThing(x) -> Changes(x)))", "all x.(InstabileThing(x) -> Changes(x))", "(all x.(InstabileThing(x) -> Changes(x)))", "all x.(Unstable(x) -> Changes(x))", "all x y.((Unstable(x) & Things(y)) -> Changes(x))", "all x y.((InstabileThing(x) & Unstable(y)) -> Changes(x))", "all x.(InstabileThing(x) -> Changes(x))", "all x.(Unstable(x) -> Changes(x))", "all x.(InstabileThing(x) -> Changes(x))", "all x.(Unstable(x) -> Changes(x))", "all x.(InstabileThing(x) -> Change(x))", "all x.(InstabileThing(x) -> Changes(x))"]}
{"id": "folio_train_1077", "nl": "All unstable things are kinetic. ", "fol": "all x.(IsUnstable(x) -> IsKinetic(x))", "prediction": ["all x.(InstabileThing(x) -> Kinetic(x))", "all x.(Unstable(x) -> Kinetic(x))", "all x.(InstabileThing(x) -> Kinetic(x))", "(all x.(InstabileThing(x) -> Kinetic(x)))", "(all x.(Unstable(x) -> Kinetic(x))", "all x y.((InstabileThing(x) & Kinetic(y)) -> Instabile(x))", "all x.(Unstable(x) -> Kinetic(x))", "all x y.((Unstable(x) & Instabil(y)) -> Kinetic(x))", "all x.(InstabileThing(x) -> Kinetic(x))", "all x.(Unstable(x) -> Kinetic(x))", "all x.(InstabileThing(x) -> Kinetic(x))", "all x.(Unstable(x) -> Kinetic(x))", "all x.(InstabileThing(x) -> Kinetic(x))", "all x.(Unstable(x) -> Kinetic(x))", "all x.(InstabileThing(x) -> Kinetic(x))", "all x.(InstabileThing(x) -> Kinetic(x))"]}
{"id": "folio_train_1078", "nl": "A bird is not both heavy and still.", "fol": "-(IsHeavy(Bird) & IsStill(Bird))", "prediction": ["all x.(Bird(x) -> -(Heavy(x) & Still(x)))", "all x.(Bird(x) -> -(Heavy(x) & Still(x)))", "all x.(Bird(x) -> -(Heavy(x) & Still(x)))", "all x y.((Bird(x) & Heavy(y) & Still(y)) -> -(Heavy(x) & Still(x)))", "all x.(Bird(x) -> -Heavy(x) & Still(x))", "all x.(Bird(x) -> -(Heavy(x) & Still(x)))", "all x y.((Bird(x) & Heavy(y) & Still(y)) -> -(Heavy(x) & Still(x)))", "all x.(Bird(x) -> (-Heavy(x) & Still(x)))", "all x.(Bird(x) -> -(Heavy(x) & Still(x)))", "exists x.(Bird(x) & -Heavy(x) & Still(x))", "all x.(Bird(x) -> -(Heavy(x) & Still(x)))", "all x.(Bird(x) -> (-Heavy(x) & Still(x)))", "exists x.(Bird(x) & -(Heavy(x) & Still(x)))", "exists x.(Bird(x) & -Heavy(x) & Still(x))", "exists x.(Bird(x) & -(Heavy(x) & Still(x)))", "exists x.(Bird(x) & -Heavy(x) & Still(x))"]}
{"id": "folio_train_1079", "nl": "A bird is still.", "fol": "IsStill(Bird)", "prediction": ["all x.(Bird(x) -> Still(x))", "all x.(Bird(x) -> Still(x))", "all x y.((Bird(x) & Still(y)) -> Bird(x))", "all x.(Bird(x) -> Still(x))", "all x y.((Bird(x) & Still(y)) -> Bird(x))", "all x.(Bird(x) -> Still(x))", "all x y.((Bird(x) & Still(y)) -> Bird(x))", "exists x.(Bird(x) & Still(x))", "all x.(Bird(x) -> Still(x))", "exists x.(Bird(x) & Still(x))", "all x.(Bird(x) -> Still(x))", "exists x.(Bird(x) & Still(x))", "all x.(Bird(x) -> Still(x))", "exists x.(Bird(x) & Still(x))", "exists x.(Bird(x) & Still(x))", "exists x.(Bird(x) & Still(x))"]}
{"id": "folio_train_1080", "nl": "A bird is not still.", "fol": "-IsStill(Bird)", "prediction": ["all x.(Bird(x) -> -Still(x))", "all x.(Bird(x) -> -Still(x))", "all x y.((Bird(x) & Bird(y) & -Still(x)) -> -Still(y))", "all x.(Bird(x) -> -Still(x))", "all x y.((Bird(x) & Bird(y) & -Still(x)) -> -Still(y))", "all x.(Bird(x) -> -Still(x))", "all x.(Bird(x) -> -Still(x))", "all x.(Bird(x) -> -Still(x))", "exists x.(Bird(x) & -(Still(x) | Still(x))))", "exists x.(Bird(x) & -Still(x))", "all x.(Bird(x) -> -Still(x))", "exists x.(Bird(x) & -(Still(x) | Still(x))))", "exists x.(Bird(x) & -Still(x))", "exists x.(Bird(x) & -IsStill(x))", "all x.(Bird(x) -> -Still(x))", "all x.(Bird(x) -> -Still(x))"]}
{"id": "folio_train_1081", "nl": "A bird is kinetic and changing.", "fol": "(IsKinetic(Bird) & IsChanging(Bird))", "prediction": ["all x.(Bird(x) -> (Kinetic(x) & Changes(x)))", "all x.(Bird(x) -> (Kinetic(x) & Changes(x)))", "all x y.((Bird(x) & Kinetic(y)) -> Changes(x,y))", "all x.(Bird(x) -> (Kinetic(x) & Changes(x)))", "all x y.((Bird(x) & Kinetic(y)) -> Changes(x,y))", "all x y.((Bird(x) & Kinetic(y) & Changes(x,y)) -> Bird(x))", "all x.(Bird(x) -> (Kinetic(x) & Changes(x)))", "exists x.(Bird(x) & Kinetic(x) & Changes(x))", "all x.(Bird(x) -> (Kinetic(x) & Changes(x)))", "exists x.(Bird(x) & Kinetic(x) & Changes(x))", "all x.(Bird(x) -> (Kinetic(x) & Changes(x)))", "exists x.(Bird(x) & Kinetic(x) & Changes(x))", "all x.(Bird(x) -> (Kinetic(x) & Changes(x)))", "exists x.(Bird(x) & Kinetic(x) & Changes(x))", "all x.(Bird(x) -> (Kinetic(x) & Changing(x)))", "exists x.(Bird(x) & Kinetic(x) & Changes(x))"]}
{"id": "folio_train_1082", "nl": "A bird is kinetic or changing.", "fol": "(IsKinetic(Bird) | IsChanging(Bird))", "prediction": ["all x.(Bird(x) -> (Kinetic(x) | Changes(x)))", "all x.(Bird(x) -> (Kinetic(x) | Changes(x)))", "all x y.((Bird(x) & Kinetic(y)) | Changes(y))", "all x.(Bird(x) -> (Kinetic(x) | Changes(x)))", "exists x.(Bird(x) & Kinetic(x) & (Changes(x) | Changes(x)))", "all x.(Bird(x) -> (Kinetic(x) | Changeing(x)))", "all x y.((Bird(x) & Kinetic(y)) | Changes(y))", "all x y.((Bird(x) & Kinetic(y)) | Changes(y,x))", "all x.(Bird(x) -> (Kinetic(x) | Changes(x)))", "all x.(Bird(x) -> (Kinetic(x) | Changing(x)))", "exists x.(Bird(x) & Kinetic(x))", "exists x.(Bird(x) & Kinetic(x) | Changes(x))", "all x.(Bird(x) -> (Kinetic(x) | Changed(x)))", "exists x.(Bird(x) & KineticOrChange(x))", "exists x.(Bird(x) & Kinetic(x) & Changes(x))", "all x.(Bird(x) -> (Kinetic(x) | Changing(x)))"]}
{"id": "folio_train_1083", "nl": "A bird is either kinetic or changing, but not both.", "fol": "((IsKinetic(Bird) & -IsChanging(Bird)) | (-IsKinetic(Bird) & IsChanging(Bird)))", "prediction": ["all x.(Bird(x) -> ((Kinetic(x) | Changeable(x)) & -(Kinetic(x) & Changeable(x))))", "all x.(Bird(x) -> ((Kinetic(x) | Changeling(x))))", "all x.(Bird(x) -> ((Kinetic(x) | Changeing(x)) & -(Kinetic(x) & Changeing(x))))", "all x y.((Bird(x) & Kinetic(y)) | (Change(y) | (Kinetic(y) & Change(y)))))", "all x.(Bird(x) -> ((Kinetic(x) | Changed(x))) & -(Kinetic(x) & Changed(x))))", "exists x.(Bird(x) & ((Kinetic(x) & -Change(x)) | (-Kinetic(x) & Changeing(x)))))", "exists x.(Bird(x) & (Kinetic(x) | Changeable(x)) & -(Kinetic(x) & Changeable(x))))", "all x y.((Bird(x) & Kinetic(y)) -> -(Change(x) | Kinetic(y))))", "(all x.(Bird(x) -> (Kinematic(x) | Changes(x))))", "all x.(Bird(x) -> ((Kinetic(x) | Changing(x)) & -(Kinetic(x) & Changing(x))))", "exists x.(Bird(x) & -(Kinetic(x) | Changeling(x)))", "all x.(Bird(x) -> ((Kinetic(x) & -Change(x)) | (-Kinetic(x) & Changes(x))))", "exists x.(Bird(x) & (Kinetic(x) | Changed(x)) & -(Kinetic(x) & Changed(x))))", "exists x.(Bird(x) & -(Kinetic(x) | Changeable(x)))", "all x.(Bird(x) -> ((Kinetic(x) | Changeable(x)) & -(Kinetic(x) & Changeable(x))))", "exists x.(Bird(x) & -(Kinetic(x) | Changeing(x)))"]}
{"id": "folio_train_1084", "nl": "If a bird is small or still, then the bird is either kinetic or changing.", "fol": "((IsSmall(Bird) | IsStill(Bird)) -> (IsKinetic(Bird) | IsChanging(Bird)))", "prediction": ["all x.((Bird(x) & (Small(x) | Still(x))) -> (Kinetic(x) | Changed(x)))", "(SmallOrStill(Bird) -> (Kinetic(Bird) | Changeling(Bird)))", "all x.((Bird(x) & (Small(x) | Still(x))) -> (Kinetic(x) | Changed(x)))", "all x.(SmallOrStill(x) -> (Kinetic(x) | Changed(x)))", "all x y.((Bird(x) & Small(x) & Bird(y) & Still(y)) -> (Kinetic(x) | Changed(x)))", "all x.((Bird(x) & Small(x)) | Still(x)) -> (Kinetic(x) | Changed(x)))", "all x.((Bird(x) & (Small(x) | Still(x))) -> (Kinetic(x) | Changeling(x)))", "exists x.(Bird(x) & (Small(x) | Still(x)) & (Kinetic(x) | Changed(x)))", "all x.(SmallOrStill(x) -> (KineticBird(x) | ChangelingBird(x)))", "all x y.((Bird(x) & Small(x) & Bird(y) & Still(x)) -> (Kinetic(y) | Changed(y)))", "all x.((Bird(x) & (Small(x) | Still(x))) -> (Kinetic(x) | Changing(x)))", "all x.(SmallOrStill(x) -> (Kinetic(x) | Changeling(x)))", "all x.((Bird(x) & Small(x)) | Still(x)) -> (Kinetic(x) | Changed(x)))", "all x.((Bird(x) & (Small(x) | Still(x))) -> (Kinetic(x) | Changed(x)))", "exists x.(Bird(x) & ((Small(x) | Still(x)) & (Kinetic(x) | Changed(x))))", "all x.((Bird(x) & (Small(x) | Still(x))) -> (Kinetic(x) | Changing(x)))"]}
{"id": "folio_train_1085", "nl": "DI Ray is a police procedural television series.", "fol": "IsTelevisionSeries(DiRay)", "prediction": ["all x.(DiRay(x) -> PoliceProceduralTVSeries(x))", "(ProceduralTVSeries(DiRay) & Police(DiRay))", "(PoliceProceduralTVSeries(DIRay) & -PoliceProceduralTVSeries(DIRay))", "(PoliceProceduralSeries(DIRay) & -PoliceProceduralSeries(DIRay))", "all x.(DiRay(x) -> PoliceProceduralTelevisionSeries(x))", "all x.(DiRay(x) -> (PoliceProceduralTVSeries(x) & PoliceProceduralTVSeries(x)))", "all x y.((DiRay(x) & PoliceProceduralTVSeries(y)) -> Police(x,y))", "all x.((DiRay(x) & PoliceProceduralTVSeries(x)) -> Police(x))", "(ProceduralTVSeries(DIRay) & Police(DIRay))", "(ProceduralTelevisionSeries(DiRay) & Police(DiRay))", "all x.((PoliceProceduralSeries(x) & DIRay(x)) -> PoliceProceduralSeries(x))", "ALL X Y.((DiRay(x) & PoliceProceduralSeries(y)) -> ProceduralTV(x,y))", "(ProceduralTVSeries(DiRay) & Police(DiRay))", "all x.(DiRay(x) -> PoliceProceduralSeries(x))", "(ProceduralTVSerial(DiRay) -> Police(DiRay))", "all x.(DIRay(x) -> PoliceProceduralTVSeries(x))"]}
{"id": "folio_train_1086", "nl": "DI Ray was created and written by Maya Sondhi.", "fol": "(CreatedBy(Maya,DiRay) & WrittenBy(Maya,DiRay))", "prediction": ["all x.(DiRay(x) -> (CreatedByMayaSondhi(x) & WrittenByMayaSondhi(x)))", "(CreatedByMayaSondhi(DIRay) & WrittenByMayaSondhi(DIRay))", "(DiRay(Di) & CreatedByMayaSondhi(Di))", "all x y.((DiRay(x) & MayaSondhi(y)) -> (CreatedBy(x,y) & WrittenBy(x,y)))", "DIRay was created and written by MayaSondhi.", "-DiRay(Di) & CreatedByMayaSondhi(Di) & WrittenByMayaSondhi(Di))", "(DiRay(d) & CreatedByMayaSondhi(d) & WrittenBy(d))", "DIRay (Diverse(Di) & CreatedByMayaSondhi(Di))", "(CreatedByMayaSondhi(DiRay) & WrittenByMayaSondhi(DiRay))", "(CreatedAndWrittenByMayaSondhi(DiRay))", "all x.(DiRay(x) -> (CreatedByMayaSondhi(x) & WrittenByMayaSondhi(x)))", "ALL x y.((DiRay(x) & MayaSondhi(y)) -> CreatedAndWrittenBy(x,y))", "(CreatedByMayaSondhi(diRay) & WrittenBy(diRay))", "DIRay was created and written by Maya Sondhi.", "All x.(DiRay(x) -> (CreatedByMayaSondhi(x) & WrittenByMayaSondhi(x)))", "All x.(DIRay(x) -> (CreatedByMayaSondhi(x) & WrittenByMayaSondhi(x)))"]}
{"id": "folio_train_1087", "nl": "DI Ray was produced by Jed Mercurio.", "fol": "ProducedBy(Jed,DiRay)", "prediction": ["all x.(DiRay(x) -> ProducedByJedMercurio(x))", "(ProducedByJedMercurio(DIRay)", "DIRay was produced by Jed Mercurio.", "all x y.((DiRay(x) & JedMercurio(y)) -> ProducedBy(x,y))", "-ProducedByJedMercurio(DIRay)", "DiRay (Division) & ProducedByJedMercurio(Division))", "(ProducedBy(DiRay) & JedMercurio(DiRay))", "all x.(DiRay(x) -> ProducedByJedMercurio(x))", "(ProducedByJedMercurio(DiRay)", "DiRay was produced by Jed Mercurio.", "ALL x.(DIRay(x) -> ProducedByJedMercury(x))", "(ProducedByJedMercurio(DIRay)", "DIRay was produced by Jed Mercurio.", "(ProducedByJedMercury(DIRay)", "All x.(DiRay(x) -> ProducedByJedMercurio(x))", "DI Ray was produced by Jed Mercurio."]}
{"id": "folio_train_1088", "nl": "Maya Sondhi and Jed Mercurio are both British.", "fol": "(IsBritish(Maya) & IsBritish(Jed))", "prediction": ["(British(MayaSondhi) & British(JedMercurio))", "((MayaSondhi(x) & JedMercurio(x)) -> British(x))", "all x y.((MayaSondhi(x) & JedMercurio(y)) -> British(x))", "(British) & British(MayaSondhi) & British(JedMercurio))", "all x.((MayaSondhi(x) & JedMercurio(x)) -> British(x))", "Maya Sondhi and Jed Mercurio are British.", "(British(MayaSondhi) & British(JedMercurio))", "((MayaSondhi(x) & JedMercurio(x)) -> British(x))", "(BritishBritish(MayaSondhi) & British(JedMercurio))", "all x y.((MayaSondhi(x) & JedMercurio(y)) -> British(x))", "all x.((MayaSondhi(x) | JedMercurio(x)) -> British(x))", "all x.((MayaSondhi(x) & JedMercurio(x)) -> British(x))", "(British(MayaSondhi) & British(JedMercury))", "(British) & British(MayaSondhi,JedMercurio,JedMercurio)", "both British.", "all x.((MayaSondhi(x) & JedMercury(x)) -> British(x))"]}
{"id": "folio_train_1089", "nl": "DI Ray was created by a Brit.", "fol": "exists x.(CreatedBy(x,DiRay) & IsBritish(x))", "prediction": ["all x.(DiRay(x) -> CreatedByBritish(x))", "(CreatedByBritish(DIRay)", "all x y.((British(x) & Brit(y)) -> CreatedBy(x,y))", "(British(DiRay) & CreatedBy(DiRay,British))", "(CreatedBy(DiRay) & Brit(DiRay))", "all x y.((DiRay(x) & Brit(y)) -> CreatedBy(x,y))", "all x.(DiRay(x) -> CreatedByBritish(x))", "(CreatedByBritish(DiRay) & Brit(DiRay))", "all x.((DiRay(x) & Brit(x)) -> CreatedBy(x,y))", "DIRay was created by Brit.", "ALL X Y.((DiRay(x) & Brit(y)) -> CreatedBy(x,y))", "(CreatedBy(DIRay,British))", "all x.(DiRay(x) -> CreatedByBritish(x))", "(CreatedByBritish(DIRay)", "all x.(DiRay(x) -> CreatedByBritish(x))", "(CreatedByBritish(diRay)"]}
{"id": "folio_train_1090", "nl": "Some Brit produced a television series.", "fol": "exists x y.(IsBritish(x) & ProducedBy(x,y) & IsTelevisionSeries(y))", "prediction": ["exists x.(British(x) & ProducedTelevisionSeries(x))", "exists x y.(British(x) & TelevisionSeries(y) & ProducedBy(x,y))", "exists x.(British(x) & ProducesTelevisionSeries(x))", "exists x.(British(x) & ProducedTelevisionSeries(x))", "exists x y.(British(x) & TelevisionSeries(y) & ProducedBy(x,y))", "exists x.(British(x) & ProducesTelevisionSeries(x))", "all x y.((British(x) & TelevisionSeries(y)) -> ProducedBy(x,y))", "exists x.(British(x) & ProducedTVSeries(x))", "exists x y.(British(x) & TelevisionSeries(y) & ProducedBy(x,y))", "exists x.(Britain(x) & ProducedTelevisionSeries(x))", "exists x.(British(x) & ProducesTelevisionSeries(x))", "exists x.(British(x) & ProducedTVSeries(x))", "exists x y.(British(x) & TelevisionSeries(y) & ProducedBy(x,y))", "exists x.(British(x) & TelevisionSeries(x))", "exists x.(British(x) & ProducedTelevisionSeries(x))", "exists x.(British(x) & BritishSeries(x))"]}
{"id": "folio_train_1091", "nl": "All men are human.", "fol": "all x.(IsMan(x) -> IsHuman(x))", "prediction": ["all x.(Men(x) -> Human(x))", "all x.(Men(x) -> Human(x))", "(all x.(Men(x) -> Human(x))", "all x.(Man(x) -> Human(x))", "all x.(Men(x) -> Human(x))", "(all x.(Men(x) -> Human(x))", "all x.(Man(x) -> Human(x))", "all x.exists y.(Men(x) & Human(y))", "all x.(Men(x) -> Human(x))", "All x y.(Men(x) -> Human(x))", "all x.(Man(x) -> Human(x))", "all x.(Men(x) -> Human(x))", "all x.(Man(x) -> Human(x))", "all x.(Men(x) -> Human(x))", "all x.(Men(x) -> Human(x))", "exists x.(Men(x) & Human(x))"]}
{"id": "folio_train_1092", "nl": "All gentlemen are men.", "fol": "all x.(IsGentleman(x) -> IsMan(x))", "prediction": ["all x.(Gentleman(x) -> Men(x))", "all x.(Gentlemen(x) -> Men(x))", "(all x.(Gentleman(x) -> Men(x))", "all x.(Gentleman(x) -> Men(x))", "all x.(Groom(x) -> Men(x))", "(all x.(Gentleman(x) -> Men(x))", "all x.(Gentlemen(x) -> Men(x))", "(all x.(Gentleman(x) -> Men(x))", "all x.(Groom(x) -> Men(x))", "all x.(Gentleman(x) -> Men(x))", "all x.(Groom(x) -> Men(x))", "all x.(Gentlemen(x) -> Men(x))", "all x.( Gentleman(x) -> Men(x))", "All x.(Men(x) -> Gentlemen(x))", "all x.(Gentleman(x) -> Men(x))", "all x.(Gentlemen(x) -> Men(x))"]}
{"id": "folio_train_1093", "nl": "All lawyers are gentlemen.", "fol": "all x.(IsLawyer(x) -> IsGentleman(x))", "prediction": ["all x.(Lawyer(x) -> Gentlemen(x))", "all x.(Lawyer(x) -> Gentleman(x))", "(all x.(Lawyer(x) -> Gentleman(x))", "all x y.((Lawyer(x) & Gentleman(y)) -> Gentleman(x))", "all x.(Lawyer(x) -> Gentlemen(x))", "(all x.(Lawyer(x) -> Gentlemen(x))", "all x.(Legal(x) -> Gentlemen(x))", "all x.(Lawyer(x) -> Gentleman(x))", "(all x.(Lawyer(x) -> Gentlemen(x))", "all x.(Legal(x) -> Gentlemen(x))", "all x.(Lawyer(x) -> Gentlemen(x))", "all x.(Lawyer(x) -> Gentleman(x))", "all x.(Legal(x) -> Gentleman(x))", "all x.(Lawyer(x) -> Gentlemen(x))", "all x.(Lawyer(x) -> Gentleman(x))", "all x.(Lawyer(x) -> Gentleman(x))"]}
{"id": "folio_train_1094", "nl": "All women are human.", "fol": "all x.(IsWoman(x) -> IsHuman(x))", "prediction": ["all x.(Female(x) -> Human(x))", "all x.(Female(x) -> Human(x))", "(all x.(Female(x) -> Human(x)))", "all x.(Female(x) -> Human(x))", "all x.exists y.(Female(x) & Human(y))", "exists x y.(Female(x) & Human(y))", "all x.(Female(x) -> Human(x))", "all x.exists y.(Female(x) & Human(y))", "all x.(Female(x) -> Human(x))", "all x.exists y.(Female(x) & Human(y))", "all x.(Female(x) -> Human(x))", "all x.(Woman(x) -> Human(x))", "all x.(Female(x) -> Human(x))", "all x.(Woman(x) -> Human(x))", "exists x.(Woman(x) & Human(x))", "all x.(Female(x) -> Human(x))"]}
{"id": "folio_train_1095", "nl": "No sheep are human.", "fol": "all x.(IsSheep(x) -> -IsHuman(x))", "prediction": ["-exists x.(Sheep(x) & Human(x))", "-exists x.(Sheep(x) & Human(x))", "all x.(Sheep(x) -> -Human(x))", "(exists x.(Sheep(x) & Human(x))", "-exists x.(Sheep(x) & Human(x))", "all x.(Sheep(x) -> -Human(x))", "all x.(Sheep(x) -> Human(x))", "(exists x.(Sheep(x) & Human(x))", "-exists x.(Sheep(x) & Human(x))", "all x.(Sheep(x) -> -Human(x))", "-exists x.(Sheep(x) & Human(x))", "-exists x.(Shoe(x) & Human(x))", "-exists x.(Sheep(x) & Human(x))", "-exists x.(Shoe(x) & Human(x))", "-exists x.(Sheep(x) & Human(x))", "-exists x.(Shoe(x) & Human(x))"]}
{"id": "folio_train_1096", "nl": "If Mike is not both a human and a sheep, then Mike is either a man or a human.", "fol": "((((-IsHuman(Mike) | -IsSheep(Mike)) -> IsMan(Mike)) & -IsHuman(Mike)) | (-((-IsHuman(Mike) | -IsSheep(Mike)) -> IsMan(Mike)) & IsHuman(Mike)))", "prediction": ["all x.((Mike(x) & -Human(x) & Sheep(x)) -> (Man(x) | Human(x)))", "all x.((Human(x) & Sheep(x)) -> (Man(x) | Human(x)))", "(-(Human(mike) & Sheep(mike)) & -(Human(mike) & Sheep(mike))) -> (Man(mike) | Human(mike)))", "all x.((Mike(x) & -Human(x) & Sheep(x)) -> (Man(x) | Human(x)))", "all x.((HasHuman(x) & -HasSheep(x)) -> (Man(x) | Human(x)))", "all x.((Human(x) & Sheep(x)) -> (Man(x) | Human(x)))", "all x y.((Mike(x) & Human(y) & Sheep(y) & -Human(x,y)) -> (Man(x) | Human(x)))", "all x.((Mike(x) & -(Human(x) & Sheep(x))) -> (Man(x) | Human(x)))", "(-(Human(mike) & Sheep(mike)) -> (Man(mike) | Human(mike)))", "all x.((Mike(x) & -Human(x) & Sheep(x)) -> (Man(x) | Human(x)))", "all x.((Hunt(x) & Sheep(x)) -> (Man(x) | Human(x)))", "(-(Human(Mike) & Sheep(Mike)) | Human(Mike)))", "all x.((Human(x) & Sheep(x)) -> (Man(x) | Human(x)))", "exists x.(Mike(x) & -(Human(x) & Sheep(x))) -> (Man(x) | Human(x)))", "all x.((Human(x) & Sheep(x)) -> (Man(x) | Human(x)))", "all x.((Mike(x) & -Human(x) & Sheep(x)) -> (Man(x) | Human(x)))"]}
{"id": "folio_train_1097", "nl": "Mike is a woman.", "fol": "IsWoman(Mike)", "prediction": ["all x.(Mike(x) -> Woman(x))", "(Female(Mike) & -Female(Mike))", "(Mike(Mike) -> Woman(Mike))", "-(Mike(Mike) & Woman(Mike,Mike))", "all x.(Mike(x) -> Woman(x))", "-Mike isFemale(Mike)", "(Female(Mike) & Woman(Mike))", "(Mike(Mike) -> Woman(Mike))", "is Woman(Mike)", "all x.(Mike(x) -> Woman(x))", "all x.(Micah(x) -> Woman(x))", "(Woman(Mike) & Woman(Mike))", "(Female(mike) & Female(mike))", "all x.(Mike(x) -> Woman(x))", "all x.(Mike(x) -> Woman(x))", "exists x.(Mica(x) & Woman(x))"]}
{"id": "folio_train_1098", "nl": "If Mike is a gentleman or a lawyer, then Mike is neither a woman nor a lawyer.", "fol": "((IsGentleman(Mike) | IsLawyer(Mike)) -> (-IsWoman(Mike) & -IsLawyer(Mike)))", "prediction": ["all x.((Mike(x) & (Gentleman(x) | Lawyer(x))) -> -(Mike(x) & Woman(x) & Lawyer(x)))", "all x.((Mike(x) & (Gentleman(x) | Lawyer(x))) -> (-Mike(x) & -Mike(x)))", "all x.((Mike(x) & Gentleman(x)) | Lawyer(x)) -> -(Mike(x) & Woman(x) & Lawyer(x)))", "(all x.((Mike(x) & Gentleman(x)) | Lawyer(x)) -> (-Mike(x) & Woman(x)) & -Mike(x) & Lawyer(x)))", "all x.((Mike(x) & (Gentleman(x) | Lawyer(x))) -> -(Female(x) | Lawyer(x))))", "all x.((Mike(x) & (Man(x) | Lawyer(x))) -> (-Mike(x) & -Mike(x)))", "all x.((Man(x) | Lawyer(x)) -> (-Female(x) & -Lawyer(x)))", "(all x.((Mike(x) & Gentleman(x)) | Lawyer(x))) -> -(Mike(x) & Woman(x) & Lawyer(x)))", "((Mike is Gentleman(Mike) | Lawyer(Mike))) -> -(Mike(Mike) & -(Mike(Mike) | Lawyer(Mike))))", "all x.((Mike(x) & (Menu(x) | Lawyer(x))) -> (-Meanwhile(x) & -Lawyer(x)))", "all x.((Mike(x) & Gentleman(x)) | Lawyer(x)) -> -(Mike(x) & Woman(x) & Lawyer(x)))", "all x y.((Mike(x) & Gentleman(x) & Lawyer(y)) -> (-Mike(x) & -Mike(x) & Lawyer(x)))", "all x.(Mike(x) -> ((Menu(x) | Lawyer(x)) & -(Meets(x,Me) | Lawyer(x)))))", "all x.(Mike(x) -> ((Mentioned(x) | Lawyer(x))) & -(Mean(x) & Lawyer(x))))", "(all x.((Mike(x) & Gentleman(x)) | Lawyer(x)) -> (-Mike(x) & Woman(x)) & -Mike(x) & Lawyer(x)))", "all x.(Mike(x) -> ((ManyPerson(x) | Lawyer(x))))"]}
{"id": "folio_train_1099", "nl": "If Mike is not both a woman and a lawyer, then Mike is a lawyer.", "fol": "((-IsWoman(Mike) | -IsLawyer(Mike)) -> IsLawyer(Mike))", "prediction": ["all x.((Mike(x) & -(Woman(x) & Lawyer(x))) -> Lawyer(x))", "(-(Woman(Mike) & Lawyer(Mike)) -> Lawyer(Mike))", "all x.((Mike(x) & -(Female(x) & Lawyer(x))) -> Lawyer(x))", "all x y.((Mike(x) & -(Female(x) & Lawyer(x)) & -(Female(x) & Lawyer(y))) -> Lawyer(x))", "(-(Female(Mike) & Lawyer(Mike)) -> Lawyer(Mike))", "all x.((Mike(x) & -(Woman(x) & Lawyer(x))) -> Lawyer(x))", "all x y.((Mike(x) & Woman(y) & Lawyer(y)) -> Lawyer(x))", "all x.((Female(x) & Lawyer(x)) -> Lawyer(x))", "all x.((Mike(x) & -Woman(x) & Lawyer(x)) -> Lawyer(x))", "all x.((Mike(x) & -(Female(x) & Lawyer(x))) -> Lawyer(x))", "exists x.(Mike(x) & -(Female(x) & Lawyer(x)) & Lawyer(x))", "all x.((Woman(x) & Lawyer(x)) -> Lawyer(x))", "all x.((Mike(x) & -(Woman(x) & Lawyer(x))) -> Lawyer(x))", "exists x.(Mike(x) & -(Woman(x) & Lawyer(x)) & Lawyer(x))", "all x.((Mike(x) & -(Mean(x) | Lawyer(x))) -> Lawyer(x))", "all x.((Mike(x) & -(Female(x) & Lawyer(x))) -> Lawyer(x))"]}
{"id": "folio_train_1100", "nl": "Some defenders are centerback.", "fol": "exists x.(DefenderRole(x) & CenterBackPosition(x))", "prediction": ["exists x.(Defender(x) & Centerback(x))", "exists x.(Defendant(x) & Centerback(x))", "exists x.(Defender(x) & Centerback(x))", "exists x.(Defendant(x) & Centerback(x))", "exists x.(Defendant(x) & Centerback(x))", "exists x.(defender(x) & Centerback(x))", "exists x.(Defender(x) & Centerback(x))", "exists x y.(Defender(x) & Defender(y) & Centerback(x))", "exists x.(Defendant(x) & Centerback(x))", "exists x.(Defender(x) & CenterBack(x))", "exists x.(Defendant(x) & Centerback(x))", "exists x.(Defender(x) & Centerback(x))", "exists x.(defender(x) & Centerback(x))", "exists x.(Defender(x) & Centerback(x))", "exists x.(Defendant(x) & Centerback(x))", "exists x.(Defender(x) & CenterBack(x))"]}
{"id": "folio_train_1101", "nl": "Stephen Curry is a centerback.", "fol": "CenterBackPosition(Stephencurry)", "prediction": ["all x.((StephenCurry(x) & Centerback(x)) -> Centerback(x))", "StephenCurry(StephenCurry) is a Centerback(StephenCurry)", "(Centerback(StephenCurry))", "all x.((StephenCurry(x) & Centerback(x)) -> Centerback(x))", "all x.(Curry(x) -> Centerback(x))", "StephenCurry(StephenCurry) is a Centerback(StephenCurry)", "StephenCurry(StanleyCurry) -> Centerback(StanleyCurry))", "all x.((StanleyCurry(x) & Centerback(x)) -> Centerback(x))", "(Centerback(StephenCurry)", "Stephen Curry is centerback.", "all x.((StephenCurry(x) & Centerback(x)) -> Centerback(x))", "(Centerback(StephenCurry)", "StephenCurry(StephenCurry) is a Centerback(StephenCurry)", "all x.(Curry(x) -> Centerback(x))", "(Centerback(StephenCurry)", "(Centerback(StephenCurry)"]}
{"id": "folio_train_1102", "nl": "Stephen Curry is not a centerback and a defender.", "fol": "-(CenterBackPosition(Stephencurry) & DefenderRole(Stephencurry))", "prediction": ["(-(Centerback(StephenCurry) & Defender(StephenCurry)))", "all x.(Curry(x) -> (-Centerback(x) & -Defendant(x)))", "(-Centerback(StephenCurry) & -Defendant(StephenCurry))", "StephenCurry.com - (Centerback(StephenCurry) & Defender(StephenCurry)))", "all x.((Curry(x) & -Centerback(x) & -Defendant(x)) -> -Defendant(x))", "StephenCurry(StephenCurry) -(Centerback(StephenCurry) & Defender(StephenCurry)))", "all x.(Curry(x) -> (-Centerback(x) & -Defendant(x)))", "(-(Centerback(StephenCurry) & Defender(StephenCurry)))", "Stephen Curry is not a Centerback and defender.", "all x.(Current(x) -> (-Centerback(x) & -Defendant(x)))", "(-(Centerback(StephenCurry) & Defender(StephenCurry)))", "(-centerback(StephenCurry) & -defender(StephenCurry))", "(-Centerback(StephenCurry) & -Defendant(StephenCurry))", "-(Centerback(StephenCurry) & Defender(StephenCurry))", "all x.(Curry(x) -> (-Centerback(x) & -Defendant(x)))", "-(Centerback(StephenCurry) & Defender(StephenCurry))"]}
{"id": "folio_train_1103", "nl": "If Stephen Curry is not a centerback and a defender, then Stephen Curry is neither a soccer player nor a professional basketball player.", "fol": "(-(CenterBackPosition(Stephencurry) & DefenderRole(Stephencurry)) -> (-SoccerPlayerRole(Stephencurry) & -ProfessionalBasketballPlayerRole(Stephencurry)))", "prediction": ["all x.((StephenCurry(x) & -Centerback(x) & -Defendant(x)) -> (-SoccerPlayer(x) & -ProfessionalBasketballPlayer(x)))", "all x.((StanleyPlayer(x) & -Centerback(x) & -Defendant(x)) -> -ProfessionalBasketballPlayer(x))", "all x.((StephenCurry(x) & -Centerback(x) & -Defendant(x)) -> (-SoccerPlayer(x) | ProfessionalBasketballPlayer(x)))", "(-CenterbackAndDefendant(StephenCurry))", "all x y.((StephenCurry(x) & -Centerback(x) & -Defendant(x)) -> (-SoccerPlayer(y) | ProfessionalBasketballPlayer(y)))", "all x.((StanleyPlayer(x) & -Centerback(x) & -Defendant(x)) -> (-SoccerPlayer(x) & -ProfessionalBasketballPlayer(x)))", "all x.((StocketCurrent(x) & -Centerback(x) & -Defendant(x)) -> (-SoccerPlayer(x) & -ProfessionalBasketballPlayer(x)))", "all x.((StephenCurry(x) & -Centerback(x) & -Defendant(x)) -> -(SoccerPlayer(x) | ProfessionalBasketballPlayer(x)))", "all x.((StephenCurry(x) & -Centerback(x) & -Defender(x)) -> (-SoccerPlayer(x) & -ProfessionalBasketballPlayer(x)))", "all x.((StanleyPlayer(x) & -Centerback(x) & Defender(x)) -> (-SoccerPlayer(x) & -ProfessionalBasketballPlayer(x)))", "(-CenterbackAndDefendant(StephenCurry))", "all x.((StephenCruise(x) & -Centerback(x) & -Defendant(x)) -> (-SoccerPlayer(x) & -ProfessionalBasketballPlayer(x)))", "all x.((StephenCurry(x) & -Centerback(x) & -Defendant(x)) -> (-SoccerPlayer(x) & -ProfessionalBasketballPlayer(x)))", "(-centerbackAndDefendant(StephenCurry))", "all x.((StephenCurry(x) & -Centerback(x) & -Defendant(x)) -> (-SoccerPlayer(x) | ProfessionalBasketballPlayer(x)))", "(-CenterbackAndDefendant(StephenCurry))"]}
{"id": "folio_train_1104", "nl": "If a person doesn't have enough money to buy a product, then that person can't buy it.", "fol": "all x y.((Individual(x) & Item(y) & -HasSufficientFundsFor(x,y)) -> -Purchase(x,y))", "prediction": ["all x.((Person(x) & -HasEnoughMoney(x)) -> CannotBuyProduct(x))", "all x y.((Person(x) & Product(y) & -EnoughMoney(x,y)) -> CannotBuy(x,y))", "all x.((Person(x) & -EnoughMoney(x)) -> CannotBuyProduct(x))", "all x y.((Person(x) & Product(y) & -HasEnoughMoney(x,y)) -> CannotBuy(x,y))", "all x.((Person(x) & -HasEnoughMoneyToBuyProduct(x)) -> CannotBuyProduct(x))", "all x y z.((Person(x) & Product(y) & Product(z) & -HasEnoughMoney(x,y) & CannotBuy(x,z)) -> CannotBuy(x,y))", "all x.((Person(x) & -EnoughMoneyToBuyProduct(x)) -> CannotBuyProduct(x))", "exists x.(Person(x) & -HasEnoughMoneyToBuyProduct(x))", "all x y.((Person(x) & Product(y) & -EnoughMoney(x,y)) -> CannotBuy(x,y))", "all x y.((Person(x) & Product(y) & -SufficientMoney(x,y)) -> CannotBuy(x,y))", "all x.((Person(x) & -SufficientMoney(x)) -> CannotBuyProduct(x))", "all x.((Person(x) & Doesn'tHaveEnoughMoneyToBuyProduct(x)) -> Can'tBuyProduct(x))", "exists x.(Person(x) & -EnoughMoney(x) & CannotBuyProduct(x))", "all x y.((Person(x) & Product(y) & -HasEnoughMoney(x,y)) -> Can'tBuy(x,y))", "all x y.((Person(x) & -EnoughMoney(x) & Product(y)) -> Can'tBuy(x,y))", "exists x.(Person(x) & -HasEnoughMoneyToBuy(x))"]}
{"id": "folio_train_1105", "nl": "Monitors are products.", "fol": "all x.(DisplayMonitor(x) -> Item(x))", "prediction": ["all x.(Monitor(x) -> Product(x))", "all x.(Monitor(x) -> Product(x))", "(all x.(Monitor(x) -> Product(x)))", "all x y.((Monitor(x) & Product(y)) -> Product(x,y))", "all x.(Monitor(x) -> Product(x))", "all x y.((Monitor(x) & Product(y)) -> Product(x))", "(all x.(Monitor(x) -> Product(x)))", "all x.(Monitor(x) -> Product(x))", "all x.(Monitor(x) -> Product(x))", "all x.(Monitor(x) -> Product(x))", "all x.(Monitor(x) -> Products(x))", "all x.(Monitor(x) -> Product(x))", "all x.(Monitor(x) -> Products(x))", "all x.(Monitor(x) -> Product(x))", "all x.(Monitor(x) -> Product(x))", "all x.(Monitor(x) -> Products(x))"]}
{"id": "folio_train_1106", "nl": "4k monitors are more expensive than 1080 monitors and 2k monitors.", "fol": "all z.(((DisplayMonitor(x) & DisplayMonitor(y) & DisplayMonitor(z) & Is4KMonitor(x) & Is1080Monitor(y) & Is2KMonitor(z)) -> IsMoreExpensiveThan(x,y)) & IsMoreExpensiveThan(x,z))", "prediction": ["all x y.((4kMonitor(x) & 1080Monitor(y) & 2kMonitor(x)) -> MoreExpective(x,y))", "all x.((Monitor(x) & Monitor(x) & Monitor(x) & Monitor(x)) -> (Easier(x) & MoreEasy(x)))", "all x y.((FourK monitor(x) & 1080(y) & 2k(y)) -> MoreExpective(x,y))", "all x y.((Monitor(x) & Monitor(y) & Monitor(z)) -> (Easier(x,y) & MoreEasy(x,z)))", "all x.((Monitor(x) & Monitor(x) & Monitor(x)) -> (Easier(x,10) & MoreEasy(x,2)))", "(EasierToUse(4kMonitor) & MoreEfficient(4kMonitor) & MoreEfficient(4kMonitor))", "(Expensive(4k) & MoreEasy(4k))", "(Easier(4kMonitor) & MoreEasy(4kMonitor))", "all x.((Viewer(x) & Monitor(x) & Monitor(x) & Monitor(x)) -> (Easier(x) & MoreEasy(x)))", "all x.((Monitor(x) & (ProperThan(x,10) | ProperThan(x,2))) -> MoreExpective(x))", "(Expenses(4kMonitor) & Expensive(4kMonitor))", "(Expensive(x) -> (Fast(x,10) & Fast(x,2)))", "all x y.((Contour(x) & Monitor(y) & Monitor(z) & 1080(y) & 2k(z)) -> MoreExpective(x,y,z))", "(EasierToOwn(4kMonitor) & MoreEasyToOwn(4kMonitor))", "all x y.((Screen(x) & Monitor(y) & Monitor(y)) -> (Easier(x,y) & MoreEasy(x,y)))", "all x.((Screen(x) & Monitor(x) & Monitor(x)) -> (Easier(x) & MoreEasy(x,10)))"]}
{"id": "folio_train_1107", "nl": "John is a person.", "fol": "Individual(John)", "prediction": ["all x.(John(x) -> Person(x))", "John is Person(John)", "(Person(John) & Person(John))", "all x.(John(x) -> Person(x))", "John is a person.", "John is Person(John)", "(Person(John) & Person(John))", "all x.(John(x) -> Person(x))", "-Person(John)", "John is person.", "all x.(John(x) -> Person(x))", "(Person(John,y) & Person(y))", "(Person(John)", "All x.(John(x) -> Person(x))", "(Person(John)", "John is Person(John)"]}
{"id": "folio_train_1108", "nl": "John doesn't have enough money to buy a 2k monitor.", "fol": "all x.((DisplayMonitor(x) & Is2KMonitor(x)) -> -HasSufficientFundsFor(John,x))", "prediction": ["(-HasEnoughMoneyToBuy2kMonitor(John))", "all x.((John(x) & -SufficientMoney(x)) -> 2kMonitor(x))", "John doesn't have enough money to buy a 2k Monitor.", "-(HasEnoughMoney(John) & Buys2kMonitor(John))", "(-SufficientMoney(John) & Buys2kMonitor(John))", "((John(John) & -SufficientMoney(John)) -> -SufficientMoney(John))", "(-HasEnoughMoney(John) & Buys2kMonitor(John))", "((John(John) & 2kMonitor(John)) -> -HasEnoughMoney(John))", "all x.((John(x) & -HasEnoughMoney(x)) -> -HasSufficientMoney(x))", "(John(John) & -HasEnoughMoneyToBuy2kMonitor(John))", "all x.((John(x) & -EnoughMoney(x)) -> 2kMonitor(x))", "John doesn't have enough money to buy a 2k monitor.", "-(HasEnoughMoney(John,2k) & Monitor(John))", "-(HasEnoughMoneyToBuy2kMonitor(John))", "(-HasEnoughMoneyToBuy2kMonitor(John))", "all x.((John(x) & -SufficientMoney(x)) -> -SufficientMoney(x))"]}
{"id": "folio_train_1109", "nl": "John can not buy the 1080 monitor.", "fol": "(-Purchase(John,y) & DisplayMonitor(y) & Is1080Monitor(y))", "prediction": ["-CanBuy(John,1080)", "John can'tBuy(John,1080)", "(-Buys(John,10) & Monitor(John,10))", "all x.(John(x) -> CannotBuy(x,1080))", "(John can'tBuy(John,10) -> 1080Monitor(John))", "(-Buys(John,10) -> 1080Monitor(John))", "John CannotBuyThe1080Monitor(John)", "(CannotBuy(John) -> 1080Monitor(John))", "-CanBuy(John,1080)", "CannotBuy(John,10).", "John can'tBuy(John,1080)", "-(CanBuy(John,10) & Monitor(John,10)))", "John can't buy the 1080 Monitor.", "-CanBuy1080Monitor(John)", "-CanBuy(John,1080)", "(CannotBuy(John,10) & 1080Monitor(John))"]}
{"id": "folio_train_1110", "nl": "John can not buy the 2k monitor.", "fol": "all x.((DisplayMonitor(x) & Is2KMonitor(x)) -> -Purchase(John,x))", "prediction": ["-CanBuy2kMonitor(John)", "all x.((John(x) & 2kMonitor(x)) -> -CanBuy(x,y))", "John can'tBuy2kMonitor(John)", "all x.(John(x) -> -Buys2kMonitor(x))", "(-Buys2kMonitor(John))", "-CanBuy(John,2k)", "(John can'tBuy2kMonitor(John))", "John can't buy the 2k Monitor(John)", "(CannotBuy(John,2k) -> -Buys(John,2k))", "-(CanBuy2kMonitor(John))", "(-Buys2kMonitor(John))", "-> CannotBuy2kMonitor(John,x))", "-CanBuy(John,2k)", "(CannotBuy(John,2k) & Monitor(John))", "John can't Buy2kMonitor(John,x))", "-CanBuy2kMonitor(John)"]}
{"id": "folio_train_1111", "nl": "All artificial satellites are important scientific achievements.", "fol": "all x.(IsArtificialSatellite(x) -> IsImportantScientificAchievement(x))", "prediction": ["all x.(ArtificialSatellite(x) -> ImportantScientificAchievement(x))", "all x.(ArtificialSatellite(x) -> ImportantScientificAchievement(x))", "all x y.((ArtificialSatellite(x) & ScientificAchievement(y)) -> Important(x,y))", "all x.(ArtificialSatellite(x) -> ImportantScientificAchievement(x))", "(all x.(ArtificialSatellite(x) -> ImportantScientificAchievement(x)))", "all x y.((ArtificialSatellite(x) & ScientificAchievement(y)) -> Important(x,y))", "all x.(AstronomicalSatellite(x) -> ImportantScientificAchievement(x))", "all x.(ArtificialSatellite(x) -> ScientificAchievement(x))", "all x y.((ArtificialSatellite(x) & Scientist(y)) -> Important(x,y))", "all x.(ArtificialSatellite(x) -> ImportantScientificAchievement(x))", "all x.(ArtificialSatellite(x) -> ScientificAchievement(x))", "all x.(ArtificialSatellite(x) -> ImportantScientificAchievement(x))", "all x.(ArtificialSatellite(x) -> ImportantScientificAcquisition(x))", "all x.(ArtificialSatellite(x) -> ScientificAchievement(x))", "all x.(ArtificialSatellite(x) -> ImportantScientificAchievement(x))", "all x.(ArtificialSatellite(x) -> ImportantScientificAchievement(x))"]}
{"id": "folio_train_1112", "nl": "Some artificial satellites are not U.S. inventions.", "fol": "exists x.(IsArtificialSatellite(x) & -IsUSInvention(x))", "prediction": ["exists x.(ArtificialSatellite(x) & -U.S.Invention(x))", "exists x.(ArtificialSatellite(x) & -U.S.Invention(x))", "exists x.(ArtificialSatellite(x) & -U.S.Invention(x))", "(exists x.(ArtificialSatellite(x) & -U.S.Invention(x)))", "all x y.((ArtificialSatellite(x) & U.S.Invention(y)) -> -U.S.Invention(x))", "exists x.(ArtificialSatellite(x) & -U.S.Invention(x))", "exists x.(ArtificialSatellite(x) & -U.S.Invention(x))", "exists x.(ArtificialSatellite(x) & -U.S.Invention(x))", "exists x.(ArtificialSatellite(x) & -U.S.Invention(x))", "exists x.(ArtificialSatellite(x) & -Invention(x))", "exists x.(ArtificialSatellite(x) & -U.S.Invention(x))", "exists x.(ArtificialSatellite(x) & -USInvention(x))", "exists x.(ArtificialSatellite(x) & -Invention(x))", "exists x.(ArtificialSatellite(x) & -U.S.Invention(x))", "exists x.(ArtificialSatellite(x) & -USInvention(x))", "exists x.(ArtificialSatellite(x) & -U.S.Inventation(x))"]}
{"id": "folio_train_1113", "nl": "All important scientific achievements are U.S. inventions.", "fol": "all x.(IsImportantScientificAchievement(x) -> IsUSInvention(x))", "prediction": ["all x.((ScientificAchievement(x) & U.S.Invention(x)) -> Important(x))", "all x.((ScientificAchievement(x) & Important(x)) -> U.S.Invention(x))", "all x.((ImportantScientificAchievement(x) & U.S.Invention(x)) -> Important(x))", "all x.((ScientificAdvancement(x) & U.S.Invention(x)) -> Important(x))", "all x.((Invention(x) & ImportantScientificAchievement(x)) -> U.S.Invention(x))", "all x.(ImportantScientificAchievement(x) -> U.S.Invention(x))", "all x y.((ImportantScientificAchievement(x) & U.S.Invention(y)) -> Invention(x,y))", "all x y.((ScientificAchievement(x) & Important(y)) -> U.S.Invention(x,y))", "(all x.(ImportantScientificAchievement(x) -> U.S.Invention(x)))", "all x.(ScientificAchievement(x) -> U.S.Invention(x))", "all x.((ScientificAchievement(x) & U.S.Invention(x)) -> Important(x))", "all x y.((ImportantScientificAchievement(x) & U.S.Invention(y)) -> Invention(x,y))", "all x y.((ScientificAchievement(x) & Important(x)) -> U.S.Invention(y))", "all x.(ImportantScientificAchievement(x) -> U.S.Invention(x))", "all x.(ScientificAchievement(x) -> U.S.Invention(x))", "all x.((ScientificAchievement(x) & Important(x)) -> U.S.Invention(x))"]}
{"id": "folio_train_1114", "nl": "Some cats are not pets.", "fol": "exists x.(IsCat(x) & -IsPet(x))", "prediction": ["exists x.(Cat(x) & -Pet(x))", "exists x.(Cat(x) & -Pet(x))", "exists x.(Cat(x) & -Pet(x))", "exists x.(Cat(x) & -Pet(x))", "exists x y.(Cat(x) & Pet(y) & -Pet(x,y))", "exists x.(Cat(x) & -Pet(x))", "exists x.(Cat(x) & -Pet(x))", "exists x.(Cat(x) & -Pet(x))", "exists x.(Cat(x) & -Pet(x))", "exists x.(Cat(x) & -(Pet(x) | Pet(x)))", "exists x.(Cat(x) & -Pet(x))", "exists x.(Cat(x) & -Pet(x))", "exists x.(Cat(x) & -(Pet(x) | Pet(x)))", "exists x.(Cat(x) & -Pet(x))", "exists x.(Cat(x) & -Pet(x))", "exists x.(Cat(x) & -Pet(x))"]}
{"id": "folio_train_1115", "nl": "All cats are mammals.", "fol": "all x.(IsCat(x) -> IsMammal(x))", "prediction": ["all x.(Cat(x) -> Mammal(x))", "all x.(Cat(x) -> Mammal(x))", "(all x.(Cat(x) -> Mammal(x))", "(Mammal(cat) & Mammal(cat))", "all x.(Cat(x) -> Mammal(x))", "(all x.(Cat(x) -> Mammal(x))", "all x.(Cat(x) -> Mammal(x))", "all x.(Cat(x) -> Mammal(x))", "all x.(Cat(x) -> Mammal(x))", "all x.(Kit(x) -> Mammal(x))", "all x.(Cat(x) -> Mammal(x))", "all x.(Cat(x) -> Mammal(x))", "all x.(Cat(x) -> Mammal(x))", "all x.(Cat(x) -> Mammal(x))", "all x.(Cat(x) -> Mammal(x))", "exists x.(Cat(x) & Mammal(x))"]}
{"id": "folio_train_1116", "nl": "Some mammals are not pets.", "fol": "exists x.(IsMammal(x) & -IsPet(x))", "prediction": ["exists x.(Mammal(x) & -Pet(x))", "exists x.(Mammal(x) & -Pet(x))", "exists x.(Mammal(x) & -Pet(x))", "exists x.(Mammal(x) & -Pet(x))", "exists x.(Mammal(x) & -Pet(x))", "exists x y.(Mammal(x) & Animal(y) & -Pet(x))", "exists x.(Mammal(x) & -Pet(x))", "exists x.(Mammal(x) & -Pet(x))", "exists x.(Mammal(x) & -Pet(x))", "exists x.(Mammal(x) & -Pet(x))", "exists x.(Mammal(x) & -Pet(x))", "exists x.(Mammal(x) & -Animal(x))", "exists x.(Mammal(x) & -Pet(x))", "exists x.(Mammal(x) & -Animal(x))", "exists x.(Mammal(x) & -Pet(x))", "exists x.(Mammal(x) & -Pet(x))"]}
{"id": "folio_train_1117", "nl": "If people visit a coffee shop at least three times a week, then they are addicted to coffee or other caffeinated drinks.", "fol": "all x.(VisitsCoffeeShop(x) -> AddictedToCaffeine(x))", "prediction": ["all x.((Person(x) & VisitsCoffeeShop(x,y) & AtLeastThreeTimesWeek(x)) -> AddictToCoffeeOrCaffeinatedDrinks(x))", "all x.((Person(x) & VisitsCoffeeShop(x,y) & AtLeastThreeTimesAWeek(x)) -> AddictToCoffeeOrCaffeinatedDrinks(x))", "all x.((Person(x) & VisitsCoffeeShop(x,3) & AtLeastThreeTimesWeek(x)) -> AddictToCoffeeOrCaffeinatedDrinks(x))", "all x y.((Person(x) & CoffeeShop(y) & VisitsAtLeastThreeTimes(x,y)) -> AddictToCoffeeOrCaffeinatedDrinks(x))", "all x.((People(x) & VisitsCoffeeShopAtLeastThreeTimesWeek(x)) -> AddictToCoffeeOrCaffeinatedDrinks(x))", "all x.((People(x) & VisitsCoffeeShop(x,y) & AtLeastThreeTimesAWeek(x)) -> AddictToCoffeeOrCaffeinatedDrinks(x))", "all x.((Person(x) & VisitsCoffeeShopAtLeastThreeTimesWeek(x)) -> AddictToCoffeeOrCaffeinatedDrinks(x))", "all x y.((Person(x) & CoffeeShop(y) & Visits(x,y)) -> AddictToCoffeeOrCaffeinatedDrinks(x))", "all x y.((People(x) & CoffeeShop(y) & VisitsAtLeastThreeTimes(x,y)) -> AddictToCoffeeOrCaffeinatedDrinks(x))", "all x y z.((Person(x) & CoffeeShop(y) & Coffee(z) & Visits(x,y,z) & AtLeastThreeTimesWeek(x)) -> AddictTo(x,y,z))", "exists x.(CaffeinatedDrink(x) & VisitsCoffeeShop(x,y) & AtLeastThreeTimesAWeek(y))", "all x.((People(x) & VisitsCoffeeShop(x,y) & -(CaffeinatedDrink(y) | Coffee(y)))) -> AddictiveTo(x,y))", "all x y.((Person(x) & CoffeeShop(y) & VisitsAtLeastThreeTimes(x,y)) -> AddictToCoffeeOrCaffeinatedDrinks(x))", "all x y.((Person(x) & CoffeeShop(y) & VisitsAtLeastThreeTimesA Week(x,y)) -> AddictToCoffeeOrCaffeinatedDrinks(x,y))", "all x.((Person(x) & VisitsCoffeeShopAtLeastThreeTimes(x)) -> AddictToCoffeeOrCaffeinatedDrinks(x))", "all x.((Person(x) & VisitsCoffeeShop(x) & AtLeastThreeTimesAWeek(x)) -> AddictToCoffeeOrCaffeinatedDrinks(x))"]}
{"id": "folio_train_1118", "nl": "People either visit a coffee shop at least three times a week or order takeout at least once a day.", "fol": "all x.(VisitsCoffeeShop(x) | OrdersTakeout(x))", "prediction": ["all x y.((Person(x) & CoffeeShop(y)) -> ((VisitsAtLeastThreeTimes(x,y) | OrdersTakeoutAtLeastOneDay(x,y))))", "all x.((Person(x) & CoffeeShop(y)) -> (VisitsAtLeastThreeTimes(x,y) | OrdersTakeoutAtLeastOneDay(x,y)))", "all x.(Person(x) -> ((VisitsCoffeeShop(x,3) & -(VisitsCoffeeShop(x,3) & -(VisitsCoffeeShop(x,3) & -(VisitsCoffeeShop(x,3))) | OrdersTakeout(x,1)))))", "all x.((Person(x) & CoffeeShop(x) & VisitsAtLeastThreeTimes(x)) | OrdersTakeoutAtLeastOneDay(x))", "all x y z.((Person(x) & CoffeeShop(y) & CoffeeShop(z)) -> (VisitsAtLeastThreeTimes(x,y) | OrdersTakeoutAtLeastOneDay(x,z)))", "(exists x.(Person(x) & VisitsCoffeeShop(x,3)) | OrdersTakeout(x,3)))", "all x y.((Person(x) & CoffeeShop(y) & VisitsAtLeastThreeTimes(x,y)) | OrdersTakeoutAtLeastOneDay(x,y))", "(exists x.(Person(x) & VisitsCoffeeShop(x,3) & -(VisitsCoffeeShop(x,3) & VisitsCoffeeShop(x,3))) | exists y.(Person(y) & OrdersTakeout(y,x))))", "(VisitsCoffeeShopAtLeastThreeTimesWeek(Person) | OrdersTakeoutAtLeastOneDay(Person)))", "exists x.(Person(x) & ((VisitsCoffeeShop(x,3) & Visits(x,3)) & (OrdersTakeout(x,1) & VisitsCoffeeShop(x,3))))", "all x y.((Person(x) & CoffeeShop(y)) -> ((Visit(x,y) & AtLeastThreeTimes(x)) | OrderTakeout(x,y))))", "all x.((Person(x) & (CafeShop(x) & VisitsAtLeastThreeTimes(x) | OrdersTakeoutAtLeastOneDay(x))) -> VisitsAtLeastThreeTimes(x))", "exists x.(Person(x) & ((VisitCoffeeShop(x) & AtLeastThreeTimes(x)) | OrderTakeout(x))))", "exists x.(PopularCupShop(x) & ((Visits(x,3) & Visits(x,3)) | OrdersTakeout(x,1))))", "all x y.((Person(x) & CoffeeShop(y) & VisitsAtLeastThreeTimes(x,y)) | OrdersTakeoutAtLeastOneDay(x))", "exists x.(Person(x) & ((VisitsCoffeeShop(x,3) & VisitsCoffeeShop(x,3)) | OrdersTakeout(x,1))))"]}
{"id": "folio_train_1119", "nl": "If people make a lot of their own food at home using recipes and online guides, then they order takeout at least once a day.", "fol": "all x.(MakesOwnFood(x) -> OrdersTakeout(x))", "prediction": ["all x.((Person(x) & MakesOwnFoodAtHome(x) & UsesRecipesAndOnlineGuides(x)) -> OrdersTakeoutAtLeastOneDay(x))", "all x.((People(x) & MakesOwnFoodAtHome(x) & UsesRecipesAndOnlineGuides(x)) -> OrdersTakeoutAtLeastOneDay(x))", "all x y.((Person(x) & MakesOwnFoodAtHome(x) & UsesRecipesAndOnlineGuides(x)) -> OrdersTakeoutAtLeastOneDay(x))", "all x y z.((Person(x) & MakesOwnFoodAtHome(x) & Recipes(y) & OnlineGuides(z)) -> OrdersTakeoutAtLeastOneDay(x,y,z))", "all x.((Person(x) & MakesOwnFoodAtHome(x) & UsesRecipesAndOnlineGuides(x)) -> OrdersTakeoutAtLeastOnceADay(x))", "all x y.((Person(x) & MakesOwnFoodAtHome(x) & UsesRecipesAndOnlineGuides(x)) -> OrdersTakeoutAtLeastOnceADay(x))", "all x.((Person(x) & MakesOwnFood(x) & UsesRecipesAndOnlineGuides(x)) -> OrdersTakeout(x))", "all x.((People(x) & MakesOwnFoodAtHome(x) & UsesRecipesAndOnlineGuides(x)) -> OrdersTakeoutAtLeastOnceADay(x))", "all x y.((People(x) & MakesOwnFoodAtHome(x) & UsesRecipesAndOnlineGuides(x)) -> OrdersTakeoutAtLeastOneDay(y))", "all x.((PeopleMakeOwnFoodAtHome(x) & UsesRecipesAndOnlineGuides(x)) -> OrdersTakeoutAtLeastOneDay(x))", "all x y.((Person(x) & MakesOwnFoodAtHome(x,y) & UsesRecipesAndOnlineGuides(x)) -> OrdersTakeoutAtLeastOnceADay(x))", "all x y z.((Person(x) & HomemadeFood(y) & Recipes(z) & OnlineGuides(x,y,z)) -> OrdersTakeout(x))", "all x.((People(x) & MakesOwnFood(x) & UsesRecipesAndOnlineGuides(x)) -> OrdersTakeout(x))", "all x y z.((Person(x) & Recipe(y) & OnlineGuides(z) & MakesOwnFoodAtHome(x,y,z)) -> OrdersTakeoutAtLeastOneDay(x))", "exists x.(MakingOwnFoodAtHome(x) & UsesRecipesAndOnlineGuides(x) & OrdersTakeoutAtLeastOneDay(x))", "all x.((Person(x) & MakesOwnFoodAtHome(x) & UsesRecipesAndOnlineGuides(x)) -> OrdersTakeoutAtLeastOneDay(x))"]}
{"id": "folio_train_1120", "nl": "If people own at least one coffeemaker and one blender in their home, then they do not order takeout at least once a day.", "fol": "all x.(OwnsKitchenAppliances(x) -> -OrdersTakeout(x))", "prediction": ["all x.((Person(x) & OwnsCoffeemaker(x) & OwnsBlender(x)) -> -OrdersTakeout(x))", "all x.((OwnsCoffeemaker(x) & OwnsBlender(x)) -> -OrdersTakeout(x))", "all x.(OwnsCoffeemakerAndBlenderInHome(x) -> -OrdersTakeoutAtLeastOnceADay(x))", "all x.((Person(x) & Coffeemaker(x) & Blender(x)) -> -OrdersTakeout(x))", "all x.(Owns(x,y) -> ((Owns(x,y) & Coffeemaker(y) & Blender(y)) & -OrdersTakeout(x))))", "(OwnsCoffeemakerAndBlender(x) & InHome(x)) -> -OrdersTakeoutAtLeastOnceADay(x))", "all x y.((Person(x) & Coffeemaker(y) & Blender(y)) -> -OrdersTakeout(x,y))", "all x y.((Person(x) & Coffeemaker(y) & Blender(y) & InHome(x,y)) -> -OrdersTakeout(x,y))", "exists x.(Coffeemaker(x) & Blender(x) & InHome(x) & InHome(x)) -> -OrdersTakeout(x))", "all x y.((People(x) & Coffeemaker(y) & Blender(y) & InHome(x,y)) -> -OrdersTakeout(x,y))", "exists x.(Owns(x,y) & Coffeemaker(y) & Blender(y)) -> -OrdersTakeout(x,y))", "all x.((OwnsCoffeemaker(x) & OwnsBlender(x)) -> -OrdersTakeout(x))", "all x.(OwnsCoffeemakerAndBlenderInHome(x) -> -OrdersTakeoutAtLeastOneDay(x))", "exists x.(Cupmaker(x) & Blender(x) & InHome(x) & -OrdersTakeout(x))", "all x y.((Person(x) & Coffeemaker(y) & Blender(y) & InHome(x,y)) -> -OrdersTakeout(x,y))", "all x y.((Person(x) & Coffeemaker(y) & Blender(y)) -> -OrderTakeout(x,y))"]}
{"id": "folio_train_1121", "nl": "All people who lead very busy lives that include 12-hour work hours make a lot of their own food at home using recipes and online guides.", "fol": "all x.(LeadsBusyLife(x) -> MakesOwnFood(x))", "prediction": ["all x.((Person(x) & LeadsBusyLife(x) & 12-hourWorkHours(x)) -> MakesOwnFoodAtHome(x))", "all x.((Person(x) & LeadsSmokingLife(x) & 12-hourWorkHours(x)) -> MakesOwnFoodAtHome(x))", "all x.((Person(x) & VeryBusyLife(x) & 12-hourWorkHours(x)) -> MakesOwnFoodAtHome(x))", "all x y.((Person(x) & LeadsBusyLives(x) & 12-hourWorkHours(x)) -> MakesOwnFoodAtHome(x,y))", "all x y z.((Person(x) & VeryBusyLife(x) & 12-hourWorkHours(y) & Leads(x,y)) -> MakesOwnFoodAtHome(x))", "all x.((Person(x) & LeadsBusyLives(x) & 12-hourWorkHours(x)) -> MakesOwnFoodAtHome(x))", "all x.((People(x) & LeadsSmokingLife(x) & 12-hourWorkHours(x)) -> MakesOwnFoodAtHome(x))", "all x y.((Person(x) & VeryBusyLife(x) & 12-hourWorkHours(y)) -> MakesOwnFoodAtHome(x,y))", "all x y z.((Person(x) & VeryBusyLife(y) & 12-HourWorkHours(z) & Leads(x,y)) -> MakesOwnFoodAtHome(x,z))", "all x.((Person(x) & LeadsStayfulLife(x) & 12-hourWorkHours(x)) -> MakesOwnFoodAtHome(x))", "all x.(LeadsBusyLives(x) & 12-hourWorkHours(x) -> MakesOwnFoodAtHome(x))", "all x y.((Person(x) & LeadsSmokingLife(x,y) & 12-hourWorkHours(y)) -> MakesOwnFoodAtHome(x,y))", "all x y.((Person(x) & VeryBusyLives(x) & 12-hourWorkHours(x)) -> MakesOwnFoodAtHome(x,y))", "all x.((People(x) & LeadsBusyLives(x) & 12-hourWorkHours(x)) -> MakesOwnFoodAtHome(x))", "all x.((Person(x) & VeryBusyLife(x) & 12-hourWorkHours(x)) -> MakesOwnFoodAtHome(x))", "all x.((People(x) & LeadsStayfulLives(x) & 12-hourWorkHours(x)) -> MakesOwnFoodAtHome(x))"]}
{"id": "folio_train_1122", "nl": "Sam is either both addicted to coffee or other caffeinated drinks or leads very busy lives that include 12-hour work hours, or she is neither addicted to coffee and other caffeinated drinks nor leads very busy lives that include 12-hour work hours", "fol": "((AddictedToCaffeine(Sam) & LeadsBusyLife(Sam) & -(-AddictedToCaffeine(Sam) & -LeadsBusyLife(Sam))) | (-(AddictedToCaffeine(Sam) & LeadsBusyLife(Sam)) & -AddictedToCaffeine(Sam) & -LeadsBusyLife(Sam)))", "prediction": ["all x.(Sam(x) -> ((AddictedToCoffee(x) | AddictedToCaffeinatedDrinks(x)) | (AddictedToCoffee(x) & AddictedToCaffeinatedDrinks(x)) | (AddictedToCoffee(x) & AddictedToCaffeinatedDrinks(x) & AddictedToCaffeinatedDrinks(x))))", "(all x.(Sam(x) -> ((AddictedToCoffee(x) | AddictedToCaffeinatedDrinks(x)) | (AddictedToCoffee(x) & AddictedToCaffeinatedDrinks(x)) | (AddictedToCoffee(x) & AddictedToCaffeinatedDrinks(x)) | (AddictedToCaffeinatedDrinks(x))))))", "((AddictedToCoffeeOrCaffeinatedDrinks(Sam) & -AddictedToCoffeeOrCaffeinatedDrinks(Sam)) | (AddictedToCoffeeOrCaffeinatedDrinks(Sam) & 12-hourWorkHours(Sam)) | (AddictedToCoffeeOrCaffeinatedDrinks(Sam) & 12-hourWorkHours(Sam)))", "(AddictedToCoffeeOrCaffeinatedDrinks(Sam) | (AddictedToCoffeeOrCaffeinatedDrinks(Sam) & 12-hourWorkHours(Sam))) | (AddictedToCoffeeOrCaffeinatedDrinks(Sam) & 12-hourWorkHours(Sam)) | (AddictedToCoffeeOrCaffeinatedDrinks(Sam) & 12-hourWorkHours(Sam))))", "(all x.((Sam(x) & AddictsToCoffeeOrCaffeinatedDrinks(x)) | (AddictsToCoffeeOrCaffeinatedDrinks(x) | LeadsBusyLivesWithWorkHours(x)))) & ((Sam(x) & -AddictsToCoffeeAndCaffeinatedDrinks(x)) | LeadsBusyLivesWithWorkHoursWithWorkHours(x))))", "all x y.((Sam(x) & (AddictedToCoffee(x) | AddictedToCaffeinatedDrinks(x)) | (AddictedToCoffee(x) & AddictedToCaffeinatedDrinks(x) & AddictedToCaffeinatedDrinks(x) & AddictedToCaffeinatedDrinks(y)) | (AddictedToCoffee(x) & AddictedToCaffeinatedDrinks(x) & AddictedToCaffeinatedDrinks(x))))", "(addictedtocoffeeorcaffeinatedddrinks(Sam) | (-addictedtocoffeeorcaffeinatedddrinks(Sam) & 12-hourWorkHours(Sam)))) & (-addictedtocoffeeorcaffeinatedddrinks(Sam) & 12-hourWorkHours(Sam)) & -addictedtocoffeinatedddrinks(Sam))", "all x y z.((Sam(x) & (AddictedToCoffee(x) | AddictedToCaffeinatedDrinks(x)) | (AddictedToCoffee(x) | AddictedToCaffeinatedDrinks(x)) | (AddictedToCoffee(x) & AddictedToCaffeinatedDrinks(x) & AddictedToCaffeinatedDrinks(x) | LeadsVeryBustleLoops(x))))", "((Sam(sam) & (AddictedToCoffee(sam) | AddictedToCaffeinatedDrinks(sam))) | (AddictedToCoffee(sam) & AddictedToCaffeinatedDrinks(sam)) | (AddictedToCoffee(sam) & AddictedToCaffeinatedDrinks(sam) & AddictedToCaffeinatedDrinks(sam))))", "all x.(Sam(x) -> ((AddictedToCoffee(x) | AddictedToCaffeinatedDrinks(x)) | (AddictedToCoffee(x) & AddictedToCaffeinatedDrinks(x) & AddictedToCaffeinatedDrinks(x)) | (AddictedToCoffee(x) & AddictedToCaffeinatedDrinks))))", "all x.(Sam(x) -> ((AddictedToCoffeeOrCaffeinatedDrinks(x) | LeadsBusyLives(x,12)) | (-AddictedToCoffeeOrCaffeinatedDrinks(x) & LeadsBusyLives(x,12))))", "all x y.((Sam(x) & (AddictedToCoffee(x) | AddictedToCaffeinatedDrinks(x)) | (AddictedToCoffee(x) & AddictedToCaffeinatedDrinks(x)) | (AddictedToCoffee(x) & AddictedToCaffeinatedDrinks(x) & AddictedToCaffeinatedDrinks(y) | LeadsVeryBustleLife(x))))", "(all x.(Sam(x) -> ((AddictedToCoffee(x) | AddictedToCaffeinatedDrinks(x)) | (AddictedToCoffee(x) | AddictedToCaffeinatedDrinks(x)) | (AddictedToCoffee(x) & AddictedToCaffeinatedDrinks(x)) | (AddictedToCaffeinatedDrinks(x)))))", "all x.(Saman(x) -> ((AddictedToCoffeeOrCaffeinatedDrinks(x) | (AddictedToCoffeeOrCaffeinatedDrinks(x) | LeadsBusyLives(x)) & 12-hourWorkHours(x)) | (-AddictedToCoffeeAndCaffeinatedDrinks(x) & 12-hourWorkHours(x)) | (", "all x.(Sam(x) -> ((AddictedToCoffee(x) | AddictedToCaffeinatedDrinks(x)) | (AddictedToCoffee(x) & AddictedToCaffeinatedDrinks(x) & AddictedToCaffeinatedDrinks(x) & AddictedToCaffeinatedDrinks(x)) | (AddictedToCoffee(x) & AddictedToCaffeinatedDrinks", "(all x.(Sam(x) -> ((AddictedToCoffee(x) | AddictedToCaffeinatedDrinks(x)) | (AddictedToCoffee(x) | AddictedToCaffeinatedDrinks(x)) | (AddictedToCoffee(x) & AddictedToCaffeinatedDrinks(x)) | (AddictedToCoffee(x) & AddicatedToCaffeinatedDrinks(x))))"]}
{"id": "folio_train_1123", "nl": "Sam is addicted to coffee and other caffeinated drinks.", "fol": "AddictedToCaffeine(Sam)", "prediction": ["all x.((Sam(x) & Coffee(x) & CaffeinatedDrinks(x)) -> Addictive(x))", "all x.(Sam(x) -> (AddictedToCoffee(x) & AddictedToCaffeinatedDrinks(x)))", "(AddictedToCoffee(Sam) & AddictedToCaffeinatedDrinks(Sam))", "Sam is addictedToCoffeeAndCaffeinatedDrinks(Sam)", "(AddictedTo(Sam,Coffee) & AddictedTo(Sam,CaffeinatedDrinks))", "all x.((Sam(x) & AddictsToCoffee(x) & AddictsToCaffeinatedDrinks(x)) -> AddictsToDrinks(x))", "all x.((Sam(x) & Coffee(x) & CaffeinatedDrinks(x)) -> Addictive(x))", "Sam is AddictiveToCoffeeAndCaffeinatedDrinks(Sam)", "all x y.((Sam(x) & Coffee(y)) -> AddictiveTo(x,y))", "(AccusedToCoffee(Sam) | AddictsToCaffeinatedDrinks(Sam))", "all x.(Sam(x) -> (AddictedToCoffee(x) & AddictedToCaffeinatedDrinks(x)))", "(AddictedToCoffee(Sam) & AddictedToCaffeinatedDrinks(Sam))", "exists x.(Sam(x) & AddictToCoffee(x) & AddictToCaffeinatedDrinks(x))", "all x.(Sam(x) -> AddictsToCoffeeAndCaffeinatedDrinks(x))", "all x y.((Sam(x) & Coffee(y)) -> Addictive(x,y))", "(AddictedToCoffee(Sam) & AddictedToCaffeinatedDrinks(Sam))"]}
{"id": "folio_train_1124", "nl": "Sam owns at least one coffeemaker and one blender in her home.", "fol": "OwnsKitchenAppliances(Sam)", "prediction": ["all x.((Sam(x) & Coffeemaker(x) & Blender(x)) -> OwnsInHome(x))", "all x y.((Sam(x) & Coffeemaker(y) & Blender(y)) -> OwnsInHome(x,y))", "(OwnsCoffeemaker(Sam) & OwnsBlender(Sam))", "all x.(Sam(x) -> (OwnsCoffeemaker(x) & OwnsBlender(x)))", "all x y z.((Sam(x) & Coffeemaker(y) & Blender(z)) -> (Owns(x,y) & Owns(x,z)))", "all x.((Sam(x) & Coffeemaker(x) & Blender(x)) -> OwnsInHome(x))", "exists x.(Sam(x) & Coffeemaker(x) & Blender(x) & InHome(x))", "(OwnsCoffeemaker(Sam) & OwnsBlender(Sam))", "(OwnsCaffeineMaker(Sam) & OwnsBlender(Sam))", "all x y.((Sam(x) & Coffeemaker(y) & Blender(y)) -> OwnsInHome(x,y))", "(OwnsCoffeemaker(Sam) | OwnsBlender(Sam))", "exists x.(Sam(x) & Coffeemaker(x) & Blender(x) & Home(x))", "all x y.((Sam(x) & Coffeemaker(y) & Blender(y)) -> OwnsInHome(x,y))", "(OwnsCoffeemaker(Sam) | OwnsBlender(Sam))", "exists x.(Sam(x) & Coffeemaker(x) & Blender(x) & InHome(x))", "exists x.(Sam(x) & Coffeemaker(x) & Blender(x) & Home(x))"]}
{"id": "folio_train_1125", "nl": "Sam either owns at least one coffeemaker and one blender in her home or orders takeout at least once a day.", "fol": "((OwnsCoffeemaker(Sam) & OwnsBlender(Sam)) | OrdersTakeout(Sam))", "prediction": ["all x.(Sam(x) -> (OwnsCoffeemaker(x) & OwnsBlender(x) & (OrdersTakeout(x) | OnceADay(x))))", "all x y.((Sam(x) & Coffeemaker(y) & Blender(y)) -> (OwnsInHome(x,y) | OrdersTakeout(x,y)))", "all x.((Sam(x) & Coffeemaker(x) & Blender(x)) | OrdersTakeout(x))", "(OwnsCoffeemaker(Sam) | OwnsBlender(Sam)) | OrdersTakeout(Sam))", "(OwnsCoffeemakerAndBlender(Sam) | OrdersTakeoutAtLeastOneDay(Sam))", "all x y z.((Sam(x) & Coffeemaker(y) & Blender(z)) -> (OwnsInHome(x,y,z) | OrdersTakeout(x,y)))", "all x y.((Sam(x) & Coffeemaker(y) & Blender(y)) -> (Owns(x,y) | OrdersTakeout(x,y)))", "all x.(Sam(x) -> (OwnsCoffeemaker(x) & OwnsBlender(x) & (OrdersTakeout(x) | OnceADay(x))))", "exists x.(Sam(x) & ((OwnsCoffeemaker(x) & OwnsBlender(x)) | OrdersTakeout(x))))", "(OwnsCafemakerAndBlender(Sam) | OrdersTakeoutAtLeastOneDay(Sam))", "exists x.(Sam(x) & (OwnsCoffeemaker(x) | OwnsBlender(x)) | OrdersTakeout(x)))", "(OwnsCoffeemaker(Sam) | OwnsBlender(Sam)))", "(OwnsCoffeemakerAndBlender(Sam) | OrdersTakeoutAtLeastOneDay(Sam))", "all x y.((Sam(x) & Coffeemaker(y) & Blender(y)) -> (OwnsInHome(x,y) | OrdersTakeout(x,y)))", "all x y.((Sam(x) & Coffeemaker(y) & Blender(y)) | OrdersTakeout(x,y))", "exists x.(Sam(x) & (OwnsCoffeemaker(x) | OwnsBlender(x)) | OrdersTakeout(x)))"]}
{"id": "folio_train_1126", "nl": "No professional basketball players are soccer players.", "fol": "-exists x.(IsSoccerPlayer(x) & IsProfessionalBasketballPlayer(x))", "prediction": ["-exists x.(ProfessionalBasketballPlayer(x) & SoccerPlayer(x))", "all x.(ProfessionalBasketballPlayer(x) -> SoccerPlayer(x))", "(exists x.(ProfessionalBasketballPlayer(x) & SoccerPlayer(x)))", "-exists x.(ProfessionalBasketballPlayer(x) & SoccerPlayer(x))", "(exists x.(ProfessionalBasketballPlayer(x) & SoccerPlayer(x)) & -exists y.(ProfessionalBasketballPlayer(y) & Plays(x,y))))", "all x.(ProfessionalBasketballPlayer(x) -> SoccerPlayer(x))", "-exists x.(ProfessionalBasketballPlayer(x) & SoccerPlayer(x))", "(exists x.(ProfessionalBasketballPlayer(x) & SoccerPlayer(x)) & -exists y.(ProfessionalBasketballPlayer(y) & Plays(x,y))))", "all x.(ProfessionalBasketballPlayer(x) -> SoccerPlayer(x))", "-exists x.(ProfessionalBasketballPlayer(x) & SoccerPlayer(x))", "all x.(ProfessionalBasketballPlayer(x) -> SoccerPlayer(x))", "-exists x.(ProfessionalBallroomPilot(x) & SoccerPlayer(x))", "-exists x.(ProfessionalBasketballPlayer(x) & SoccerPlayer(x))", "-exists x.(ProfessionalBasketballPlayer(x) & SoccerPlayer(x))", "-exists x.(ProfessionalBasketballPlayer(x) & SoccerPlayer(x))", "-exists x.(ProfessionalBasketballPlayer(x) & SoccerPlayer(x))"]}
{"id": "folio_train_1127", "nl": "All centerbacks are defenders.", "fol": "all x.(IsCenterback(x) -> IsDefender(x))", "prediction": ["all x.(Centerback(x) -> Defender(x))", "all x.(Centerback(x) -> Defender(x))", "all x.(Centerback(x) -> Defender(x))", "(all x.(Centerback(x) -> Defender(x)))", "all x y.((Centerback(x) & Defender(y)) -> Defender(x))", "all x.(Centerback(x) -> Defender(x))", "all x.(Centreback(x) -> Defender(x))", "(all x.(Centerback(x) -> Defender(x)))", "all x.(Centerback(x) -> Defender(x))", "all x.(CentricBack(x) -> Defender(x))", "all x.(Centreback(x) -> Defender(x))", "all x.(Centerback(x) -> Defender(x))", "all x.(Centerback(x) -> Defendant(x))", "all x.(Centerback(x) -> Defender(x))", "all x.(CenterBack(x) -> Defensive(x))", "all x.(CenterBack(x) -> Defender(x))"]}
{"id": "folio_train_1128", "nl": "Roger Federer is not an NBA player or a defender.", "fol": "-((IsNBAPlayer(Rogerfederer) & -IsDefender(Rogerfederer)) | (-IsNBAPlayer(Rogerfederer) & IsDefender(Rogerfederer)))", "prediction": ["(-NBAPlayer(RogerFederer) & -Defendant(RogerFederer))", "(-(NBAPlayer(RogerFederer) | Defender(RogerFederer)))", "all x.((RogerFederer(x) & -NBAPlayer(x) & -Defendant(x)) -> -NBAPlayer(x))", "all x.(RogerFederer(x) -> (-NBAPlayer(x) & -Defendant(x)))", "Roger Federer is not NBAPlayer(RogerFederer) & -Defendant(RogerFederer)", "-(RogerFederer(RogerFederer) & -(NBAPlayer(RogerFederer) | Defender(RogerFederer)))", "Roger Federer (no NBAPlayer(n) & -Defendant(n))", "-(NBAPlayer(RogerFederer) | Defender(RogerFederer))", "(NBAPlayer(RogerFederer) & -Defendant(RogerFederer))", "(-NBAPlayer(RogerFederer) & -Defendant(RogerFederer))", "Roger Federer is not NBAPlayer(f) & -Defendant(f))", "(NBAPlayer(RogerFederer) | Defender(RogerFederer))", "(-NBAPlayer(RogerFederer) & -Defender(RogerFederer))", "all x.(RogerFederer(x) -> (-NBAPlayer(x) | Defender(x)))", "-(NBAPlayer(RogerFederer) | Defender(RogerFederer))", "-(NBAPlayer(RogerFederer) | Defender(RogerFederer))"]}
{"id": "folio_train_1129", "nl": "Roger Federer is a centerback.", "fol": "IsCenterback(Rogerfederer)", "prediction": ["all x.(Centerback(x) -> RogerFederer(x))", "(Centerback(RogerFederer)", "all x.((RogerFederer(x) & Centerback(x)) -> Centerback(x))", "Roger Federer is a Centerback(RogersFederer)", "RogerFederer(RogersFederer)", "(Centerback(RogerFederer)", "(Centreback(RogerFederer)", "Roger Federer is centerback.", "RogerFederer(r) is a Centerback(r))", "all x.(Centerback(x) -> RogerFederer(x))", "all x.((RogerFederer(x) & Centerback(x)) -> Centerback(x))", "Roger Federer (Centerback)", "(Centerback(RogerFederer)", "all x.(Centerback(x) -> RogerFederer(x))", "(Centerback(RogerFederer)", "all x.(Centerback(x) -> RogerFederer(x))"]}
{"id": "folio_train_1130", "nl": "Roger Federer is not a centerback.", "fol": "-IsCenterback(Rogerfederer)", "prediction": ["all x.((RogerFederer(x) & -Centerback(x)) -> -Centerback(x))", "(-Centerback(RogerFederer))", "Roger Federer is not a Centerback(RogersFederer)", "Roger Federer is not Centerback(RogersFederer)", "all x.((RogerFederer(x) & -Centerback(x)) -> -Centerback(x))", "(-Centerback(RogerFederer))", "RogerFederer is notCenterback(f)", "all x.(Ferner(x) -> -Centerback(x))", "all x.((RogerFederer(x) & -Centerback(x)) -> -Centerback(x))", "(-Centerback(RogerFederer))", "-Centerback(RogerFederer)", "all x.((RogerFederer(x) & -Centerback(x)) -> -Centerback(x))", "-Centreback(RogerFederer)", "(-Centerback(RogerFederer))", "-Centerback(RogerFederer)", "(-centerback)"]}
{"id": "folio_train_1131", "nl": "Roger Federer is a soccer player.", "fol": "IsSoccerPlayer(Rogerfederer)", "prediction": ["all x.((RogerFederer(x) & SoccerPlayer(x)) -> Plays(x,y))", "(SoccerPlayer(RogerFederer)", "Roger Federer is a soccer player.", "RogerFederer(Rogers(Rogers) & SoccerPlayer(Rogers))", "Roger Federer (SoccerPlayer)", "(SoccerPlayer(RogerFederer)", "all x.(RogerFederer(x) -> SoccerPlayer(x))", "all x.(SoccerPlayer(x) -> RogerFederer(x))", "all x.((RogerFederer(x) & SoccerPlayer(x)) -> Plays(x,y))", "(SportsPlayer(RogerFederer) & SoccerPlayer(RogerFederer))", "RogerFederer(r) is a soccerplayer(r))", "Roger Federer is a soccer player.", "(SoccerPlayer(RogerFederer)", "all x.((RogerFederer(x) & SoccerPlayer(x)) -> Plays(x))", "(SoccerPlayer(RogerFederer)", "(SoccerPlayer(RogerFederer)"]}
{"id": "folio_train_1132", "nl": "Some teachers working at a pool are not nice.", "fol": "exists x.(TeacherAtPool(x) & -IsNice(x))", "prediction": ["exists x.(Teacher(x) & WorkingAtPool(x) & -Nice(x))", "exists x y.(Teacher(x) & Pool(y) & WorksAt(x,y))", "exists x.(Teacher(x) & WorkedAtPool(x) & -Nice(x))", "exists x.(Teacher(x) & WorkingAtPool(x) & -Nice(x))", "exists x y.(Teacher(x) & WorkAtPool(x,y) & -Nice(x))", "exists x y.((Teacher(x) & Pool(y) & WorksAt(x,y)) -> -Nice(x))", "exists x y.(Teacher(x) & Pool(y) & WorkingAt(x,y)) -> -Nice(x))", "all x y z.((Teacher(x) & Pool(y) & WorkAt(x,y)) -> -Nice(x))", "all x y.((Teacher(x) & Pool(y) & WorkingAt(x,y)) -> -Nice(x))", "exists x y.(Teacher(x) & WorkedAtPool(x) & -Nice(x))", "exists x.(Teacher(x) & WorksAtPool(x) & -Nice(x))", "exists x.(Teacher(x) & WorkingAtPool(x))", "exists x.(Teacher(x) & WorkedAtPool(x))", "exists x.(Teacher(x) & WorksAtPool(x) & -Nice(x))", "exists x.(Teacher(x) & WorkedAtPool(x))", "exists x.(Teacher(x) & WorkingAtPool(x))"]}
{"id": "folio_train_1133", "nl": "All teachers working at pools are pool managers.", "fol": "all x.(TeacherAtPool(x) -> IsPoolManager(x))", "prediction": ["all x.((Teacher(x) & WorksAtPools(x)) -> PoolManager(x))", "all x.(Teacher(x) -> PoolManager(x))", "all x.(WorksAtPools(x) -> PoolManager(x))", "all x y.((Teacher(x) & Pool(y)) -> PoolManager(x,y))", "all x.((Teacher(x) & WorksAtPools(x)) -> PoolManager(x))", "all x y.((Teacher(x) & Pool(y) & WorksAt(x,y)) -> PoolManager(x))", "all x.(Teacher(x) -> PoolManager(x))", "(all x.(TeacherWorkingAtPools(x) -> PoolManager(x))", "all x.(WorksAtPools(x) -> PoolManager(x))", "all x.((Teacher(x) & WorksAtPools(x)) -> PoolManager(x))", "all x y.((Teacher(x) & WorkAtPool(x,y)) -> PoolManager(x))", "all x.(TeacherWorkingAtPools(x) -> PoolManager(x))", "all x y.((Teacher(x) & Pool(y)) -> PoolManager(x))", "(all x.(Teacher(x) & WorkingAtPool(x)) -> PoolManager(x))", "all x.(Teacher(x) -> PoolManager(x))", "all x.((Teacher(x) & WorksAtPool(x)) -> PoolManager(x))"]}
{"id": "folio_train_1134", "nl": "All pool managers are lifeguards.", "fol": "all x.(IsPoolManager(x) -> IsLifeguard(x))", "prediction": ["all x.(PoolManager(x) -> Lifeguard(x))", "all x.(PoolManager(x) -> Lifeguard(x))", "all x.((PoolManager(x) & Lifeguard(x)) -> Lifeguard(x))", "all x y.((PoolManager(x) & Pool(y)) -> Lifeguard(x))", "all x.(PoolManager(x) -> Lifeguard(x))", "all x.(Member(x) -> Lifeguard(x))", "(all x.(PoolManager(x) -> Lifeguard(x)))", "all x.(PoolManager(x) -> Lifeguard(x))", "all x.((PoolManager(x) & Lifeguard(x)) -> Lifeguard(x))", "(all x.(PoolManager(x) -> Lifeguard(x)))", "all x.(PoolManager(x) -> Lifeguard(x))", "all x.(Member(x) -> Lifeguard(x))", "all x.(BoatManager(x) -> Lifeguard(x))", "all x.(PoolManager(x) -> Lifeguard(x))", "all x.(PoolManager(x) -> Lifeguard(x))", "all x.(PoolManager(x) -> Lifeguard(x))"]}
{"id": "folio_train_1135", "nl": "If someone is a lifeguard, then they work at a pool.", "fol": "all x.(IsLifeguard(x) -> WorksAtPool(x))", "prediction": ["all x.(Lifeguard(x) -> WorkAtPool(x))", "all x.(Lifeguard(x) -> WorkAtPool(x))", "all x.((Lifeguard(x) & WorkAtPool(x)) -> Lifeguard(x))", "all x y.((Lifeguard(x) & Pool(y)) -> WorkAt(x,y))", "all x.(Lifeguard(x) -> WorkAtPool(x))", "all x.((Lifeguard(x) & WorkAtPool(x)) -> Lifeguard(x))", "all x y.(Lifeguard(x) -> WorkAtPool(x,y))", "all x.(Lifeguard(x) -> WorksAtPool(x))", "all x y.(Lifeguard(x) -> WorkAtPool(x,y))", "all x.((Lifeguard(x) & WorkAtPool(x)) -> Lifeguard(x))", "all x.(Lifeguard(x) -> WorkAtPool(x))", "all x.((Lifeguard(x) & WorkAtPool(x)) -> Lifeguard(x))", "all x.(Lifeguard(x) -> WorksAtPool(x))", "all x.(Lifeguard(x) -> WorkAtPool(x))", "exists x.(Lifeguard(x) & WorksAtPool(x))", "exists x.(Lifeguard(x) & WorkAtPool(x))"]}
{"id": "folio_train_1136", "nl": "Mary does not work at a pool.", "fol": "-WorksAtPool(Mary)", "prediction": ["all x.((Mary(x) & -WorksAtPool(x)) -> -WorksAtPool(x))", "(-WorksAtPool(Mary))", "all x.(Mary(x) -> -WorksAtPool(x))", "all x y.((Mary(x) & Pool(y)) -> -WorksAt(x,y))", "all x.((Mary(x) & -WorksAtPool(x)) -> -WorksAtPool(x))", "all x.((Mary(x) & Pool(y)) -> -WorksAt(x,y))", "(-WorksAtPool(Mary))", "-(WorksAtPool(Mary,Pool))", "all x.(Mary(x) -> -WorksAtPool(x))", "(-WorksAtPool(Mary))", "all x y.((Mary(x) & Pool(y)) -> -WorksAt(x,y))", "exists x.(Maria(x) & -WorksAtPool(x))", "(-WorksAtPool(Maria,Pool))", "(-WorksAtPool(Mary))", "exists x.(Maria(x) & -WorksAtPool(x))", "exists x.(Mary(x) & -WorksAtPool(x))"]}
{"id": "folio_train_1137", "nl": "Mary is nice.", "fol": "IsNice(Mary)", "prediction": ["Mary is nice.", "all x.(Mary(x) -> Nice(x))", "(Nice(Mary) & Nice(Mary))", "(Nice(Mary) -> Nice(Mary))", "Mary is nice.", "all x.(Maria(x) -> Nice(x))", "-Nice(Mary)", "exists x.(Mama(x) & Nice(x))", "(Nice(Mary) & Nice(Mary))", "-NiceMama(Mama)", "Mary is nice.", "all x.(Mary(x) -> Nice(x))", "(Nice(Maria)", "Mary is nice.", "all x.(Maria(x) -> Nice(x))", "Mary is nice."]}
{"id": "folio_train_1138", "nl": "Mary is not nice and is a teacher working at a pool.", "fol": "(-IsNice(Mary) & TeacherAtPool(Mary))", "prediction": ["all x.((Mary(x) & -Nice(x)) -> TeacherWorkingAtPool(x))", "(-Nice(Mary) & TeacherWorkingAtPool(Mary))", "all x.(Maria(x) -> (-Nice(x) & TeacherWorkingAtPool(x)))", "(-nice(Mary) & TeacherWorkingAtPool(Mary))", "all x y.((Maria(x) & Pool(y)) -> (-Nice(x) & TeacherWorkingAt(x,y)))", "(-Nice(Mary) & TeacherWorkingAtPool(Mary))", "all x.((Mary(x) & -Nice(x)) -> TeacherWorkingAtPool(x))", "(-NiceMama(Mama) & TeacherWorkingAtPool(Mama))", "all x.(Maria(x) -> (-Nice(x) & TeacherWorkingAtPool(x)))", "(-nice(Mary) & TeacherWorkingAtPool(Mary))", "(-Nice(Mary) & TeacherWorkingAtPool(Mary))", "all x.((Maria(x) & -Nice(x)) -> TeacherWorkingAtPool(x))", "exists x.(Mama(x) & -Nice(x) & TeacherWorkingAtPool(x))", "exists x.(Maria(x) & -Nice(x) & Teacher(x) & WorkingAtPool(x))", "all x.(Maria(x) -> (-Nice(x) & TeacherWorkingAtPool(x)))", "(-Nice(Mary) & TeacherWorkingAtPool(Mary))"]}
{"id": "folio_train_1139", "nl": "Mary is nice and is a teacher working at a pool.", "fol": "(IsNice(Mary) & TeacherAtPool(Mary))", "prediction": ["all x.(Maria(x) -> (Nice(x) & TeacherWorkingAtPool(x)))", "(Nice(Mary) & TeacherWorkingAtPool(Mary))", "all x.((Mary(x) & Nice(x)) -> TeacherWorkingAtPool(x))", "all x y.((Mama(x) & Pool(y)) -> (Nice(x) & Teacher(x) & WorkingAt(x,y)))", "all x.(Maria(x) -> (Nice(x) & Teacher(x) & WorkingAtPool(x)))", "(Nice(Mary) & Teacher(Mary) & WorkingAtPool(Mary))", "(Pool(Mary) & Nice(Mary) & Teacher(Mary,Pool))", "(Nice(Mary) & TeacherWorkingAtPool(Mary))", "all x y.((Mary(x) & Pool(y)) -> (Nice(x) & Teacher(x,y)))", "exists x.(Mama(x) & Nice(x) & Teacher(x) & WorkingAtPool(x))", "all x y.((Maria(x) & Pool(y)) -> (Nice(x) & Teacher(x) & WorkingAt(x,y)))", "all x.((Mary(x) & Nice(x)) -> TeacherWorkingAtPool(x))", "all x.(Mary(x) -> (Nice(x) & Teacher(x) & WorkingAtPool(x)))", "exists x.(Maria(x) & Nice(x) & TeacherWorkingAtPool(x))", "(Nice(Mary) & TeacherWorkingAtPool(Mary))", "(Nice(Maria) & Teacher(Maria,Pool))"]}
{"id": "folio_train_1140", "nl": "Not all art pieces require talent.", "fol": "exists x.(IsArtPiece(x) & -NeedsTalent(x))", "prediction": ["-all x.(ArtPiece(x) -> RequiresTalent(x))", "-all x.(ArtPiece(x) -> RequiresTalent(x))", "exists x.(ArtPiece(x) & NotAllOf(x,Talent))", "-all x y.((ArtPiece(x) & Talent(y)) -> Requires(x,y))", "-all x.(ArtPiece(x) -> RequiresTalent(x))", "\u2013 all x y.((ArtPiece(x) & Talent(y)) -> Requires(x,y))", "-all x.(ArtPiece(x) -> RequiresTalent(x))", "-all x.(ArtPiece(x) -> RequiresTalent(x))", "-all x.(ArtPiece(x) -> RequiresTalent(x))", "(exists x.(ArtPiece(x) & -RequiresTalent(x)))", "-all x.(ArtPiece(x) -> RequiresTalent(x))", "(-all x.(ArtPiece(x) -> TalentRequired(x)))", "(exists x.(ArtPiece(x) & -RequiresTalent(x)))", "-all x.(ArtPiece(x) -> NeedsTalent(x))", "-all x.(ArtPiece(x) -> RequiresTalent(x))", "-all x.(ArtPiece(x) -> RequiresTalent(x))"]}
{"id": "folio_train_1141", "nl": "Everything that requires talent requires practice.", "fol": "all x.(NeedsTalent(x) -> NeedsPractice(x))", "prediction": ["all x.((RequiresTalent(x)) -> RequiresPractice(x))", "all x.((RequiresTalent(x) & RequiresPractice(x)) -> RequiresPractice(x))", "all x.(RequiresTalent(x) -> RequiresPractice(x))", "all x y.((Talent(x) & Talent(y)) -> RequiresPractice(x,y))", "(all x.(Talent(x) -> RequiresPractice(x)))", "all x y.((RequiresTalent(x) & RequiresPractice(y)) -> RequiresPractice(x,y))", "(all x.((RequiresTalent(x)) -> RequiresPractice(x)))", "all x.((RequiresTalent(x)) -> RequiresPractice(x))", "all x.(RequiresTalent(x) -> RequiresPractice(x))", "all x.((RequiresTalent(x) & RequiresPractice(x)) -> RequiresPractice(x))", "all x y.((Talent(x) & Talent(y)) -> RequiresPractice(x,y))", "all x.(RequiresTalent(x) -> RequiresPractice(x))", "all x.((RequiresTalent(x)) -> RequiresPractice(x))", "all x.((RequiresTalent(x) & RequiresPractice(x)) -> RequiresTalent(x))", "all x.(RequiresTalent(x) -> RequiresPractice(x))", "all x.(RequiresTalent(x) -> RequiresPractice(x))"]}
{"id": "folio_train_1142", "nl": "There exist art pieces that do not require practice.", "fol": "exists x.(IsArtPiece(x) & -NeedsPractice(x))", "prediction": ["exists x.(ArtPiece(x) & -RequiresPractice(x))", "Exists x.(ArtPiece(x) & -RequiresPractice(x))", "exist's x.(ArtPiece(x) & -RequiresPractice(x))", "exists x.(ArtPiece(x) & -RequiresPractice(x))", "exist(artPiece) & -RequiresPractice(art))", "exists x.(ArtPiece(x) & -RequiresPractice(x))", "exist's x.(ArtPiece(x) & -RequiresPractice(x))", "exists x.(ArtPiece(x) & -RequiresPractice(x))", "exists x.(ArtPiece(x) & -RequiresPractice(x))", "exists x.(ArtPiece(x) & -RequiresPractice(x))", "exists x.(ArtPiece(x) & -RequiresPractice(x))", "exist x.(ArtPiece(x) & -RequiresPractice(x))", "exists x.(ArtPiece(x) & -RequiresPractice(x))", "exists x.(ArtPiece(x) & -RequirePractice(x))", "exists x.(ArtPiece(x) & DoesNotRequirePractice(x))", "exists x.(ArtPiece(x) & -RequiresPractice(x))"]}
{"id": "folio_train_1143", "nl": "Bernarda Bryson Shahn was a painter and lithographer.", "fol": "(IsPainter(BernardaBrysonShahn) & IsLithographer(BernardaBrysonShahn))", "prediction": ["(Painter(BernardaBrysonShahn) & Lithographer(BernardaBrysonShahn))", "all x.((BernardaBrysonShahn(x) & Painter(x) & Lithographer(x)) -> PainterAndLithographer(x))", "Bernarda BrysonShahn (Painter(Berryson) & Lithographer(Berryson))", "(Painter(BernardaBrysonShahn) & Lithographer(BernardaBrysonShahn))", "(Painter(BerrysonShahn) & Lithographer(BerrysonShahn))", "all x.((BerrysonBrysonShahn(x) & Painter(x) & Lithographer(x)) -> PainterAndLithographer(x))", "all x.((BernardaBrysonShahn(x) & Painter(x) & Lithographer(x)) -> Painter(x))", "Bernarda BrysonShahn (Painter(Berryson) & Lithographer(Berryson))", "Bernarda Bryson Shahn (Painter(Bernarda) & Litographer(Bernarda))", "(PainterAndLitographer(BernardaBrysonShahn)", "all x.((Painter(x) & Lithographer(x)) -> BernardaBrysonShahn(x))", "Bernarda BrysonShahn (Painter(b) & Lithographer(c))", "(Painter(BernardaBrysonShahn) & Lithographer(BernardaBrysonShahn))", "all x.((BernardaBrysonShahn(x) & Painter(x) & Lithographer(x)) -> Artist(x))", "Bernarda Bryson Shahn (Painter,Lithographer)", "(Painter(BernardaBrysonShahn) & Lithographer(BernardaBrysonShahn))"]}
{"id": "folio_train_1144", "nl": "Bernarda Bryson Shahn was born in Athens, Ohio. ", "fol": "BornInLocation(BernardaBrysonShahn,AthensOhio)", "prediction": ["(BernardaBrysonShahn(Bernarda) & BornInAthens(Bernarda))", "Bernarda BrysonShahn was born in Athens, Ohio.", "BrysonShahn(Bernarda) & BornInAthens(Bernarda) & BornInOhio(Bernarda))", "Bernarda Bryson Shahn was born in Athens, Ohio.", "(BernardaBrysonShahn(Bernarda) & BornIn(Bernarda,Athens,Ohio))", "Bernarda BrysonShahn (BirthAthens,Ohio))", "All x.(BernardaBrysonShahn(x) -> BornInAthens(x))", "BrysonShahn(Bernarda) & BornIn(Bernarda,Ohio))", "BrysonShahn(b) & BornInAthens(b) & BornInOhio(c))", "(BernardaBrysonShahn(Bernarda) & BornInAthens(Bernarda) & BornInOhio(Bernarda))", "Bernarda Bryson Shahn was born in Athens, Ohio.", "Bernarda Bryson Shahn (bornInAthens,Ohio))", "Bernarda BrysonShahn was born in Athens,Ohio.", "BernardaBrysonShahn (bornInAthens,Ohio))", "(BernardaBrysonShahn(Bernarda,Ohio))", "(BernardaBrysonShahn(Bernarda,Ohio))"]}
{"id": "folio_train_1145", "nl": "Bernarda Bryson Shahn was married to Ben Shahn.", "fol": "IsMarriedTo(BernardaBrysonShahn,BenShahn)", "prediction": ["(MarriedTo(BernardaBrysonShahn) & BenShahn(Ben))", "all x y.((BernardaBrysonShahn(x) & BenShahn(y)) -> Married(x,y))", "Bernarda BrysonShahn was MarriedTo(BenShahn)", "-MarriedTo(BernardaBrysonShahn,BenShahn)", "(Married(BernardaBrysonShahn) & BenShahn(Ben))", "all x.((BernardaBrysonShahn(x) & BenShahn(x)) -> Married(x))", "(MarriedTo(BenShahn,Ben) & BernardaBrysonShahn(Ben))", "(MarriedTo(BernardaBrysonShahn) & BernardaBrysonShahn(BenShahn))", "all x.((Married(x) & BernardaBrysonShahn(x)) -> MarriedTo(x,BenShahn))", "BrysonShahnMarried(b) & BernardaBrysonShahn(b))", "-MarriedTo(BenShahn,Ben)", "BrysonShahnMarriedTo(BenShahn,Ben)", "Bernarda BrysonShahn was MarriedTo(BenShahn,Ben)", "(Married(BernardaBrysonShahn) & BenShahn(Ben))", "(MarriedTo(BernardaBrysonShahn) & BenShahn(BenShahn))", "-MarriedTo(BenShahn,Ben)"]}
{"id": "folio_train_1146", "nl": "People born in Athens, Ohio are Americans.", "fol": "all x.(BornInLocation(x,AthensOhio) -> IsAmerican(x))", "prediction": ["all x.((Person(x) & BornInAthens(x) & BornInOakland(x)) -> American(x))", "all x y.((Person(x) & BornInAthens(x,y) & BornInOhio(x,y)) -> American(x))", "all x.((BirthInAthens(x) & BornInOhio(x)) -> American(x))", "all x.((Person(x) & BornInAthens(x) & BornInOhio(x)) -> American(x))", "all x y.((Person(x) & BornInAthens(x,y) & BornInOhio(x,y)) -> American(x))", "all x.(BornInAthens(x) -> American(x))", "all x.((Person(x) & BornInAthens(x)) -> American(x))", "(All x.(BornInAthens(x) & BornInOhio(x)) -> American(x))", "all x.(BirthInAthens(x) -> American(x))", "(All x.(BirthInAthens(x) & BornInOhio(x)) -> American(x))", "all x.((BirthInAthens(x) & BornInOakland(x)) -> American(x))", "all x y.((Person(x) & BornInAthens(x,y)) -> American(x))", "All x.(Birth(x,Athens,Ohio) -> American(x))", "all x.((Person(x) & BornInAthens(x) & BornInOhio(x)) -> American(x))", "all x y.((Person(x) & BornIn(x,y) & Athens(y)) -> American(x))", "all x.(BornInAthens(x) -> American(x))"]}
{"id": "folio_train_1147", "nl": "Bernarda Bryson Shahn was born in Greece.", "fol": "BornInLocation(BernardaBrysonShahn,Greece)", "prediction": ["(BernardaBrysonShahn(Bernarda) & BornIn(Bernarda,Greece))", "Bernarda BrysonShahn was born in Greece.", "BrysonShahn(Bernarda) & BornIn(Bernarda,Greece))", "Bernarda Bryson Shahn was born in Greece.", "-BernardaBrysonShahn(BernardaBrysonShahn)", "BrysonShahn(Bernarda) was bornIn(Bernarda,Greece))", "(BernardaBrysonShahn(Bernarda) & BornIn(Bernarda,Greece))", "BrysonShahn (BernardaBryson) was bornIn(BernardaBryson(Bernarda,Greece))", "(BertinaBrysonShahnBirth(BertinaBrysonShahn) & BornIn(BertinaBrysonShahn))", "Bernarda BrysonShahn was born in Greece.", "Bernarda Bryson Shahn was born in Greece.", "(BernardaBrysonShahn(Bernarda) & BornIn(Bernarda))", "BernardaBrysonShahn (BirthInGreece))", "(BernardaBrysonShahn(Bernarda,Greece))", "Bernarda BrysonShahn was born in Greece.", "Bernarda Bryson Shahn was born in Greece."]}
{"id": "folio_train_1148", "nl": "Bernarda Bryson Shahn was American.", "fol": "IsAmerican(BernardaBrysonShahn)", "prediction": ["(American(BernardaBrysonShahn) & American(BernardaBrysonShahn))", "All x.((BernardaBrysonShahn(x) & American(x)) -> BrysonShahn(x))", "Bernarda BrysonShahn (American)", "All x.(BernardaBrysonShahn(x) -> American(x))", "(Asian(BernardaBrysonShahn)", "all x y.((BernardaBrysonShahn(x) & American(y)) -> Was(x,y))", "Bernarda Bryson Shahn (American)", "all x.((BernardaBrysonShahn(x) & American(x)) -> Was(x))", "(American(BernardaBrysonShahn))", "all x.((BernardaBrysonShahn(x) & American(x)) -> Was(x,BernardaBrysonShahn))", "(American(BernardaBrysonShahn) & American(BernardaBrysonShahn))", "All x.(BernardaBrysonShahn(x) -> American(x))", "Bernarda BrysonShahn (American)", "Bernarda Bryson Shahn (American)", "all x.((BertinaBrysonShahn(x) & American(x)) -> BrysonShahn(x))", "All x.(BernardaBrysonShahn(x) -> American(x))"]}
{"id": "folio_train_1149", "nl": "Bernarda Bryson Shahn had been divorced once.", "fol": "DivorcedOnce(BernardaBrysonShahn)", "prediction": ["all x.((BernardaBrysonShahn(x) & Divorced(x)) -> Divorced(x))", "(Dissolution(BernardaBrysonShahn) -> Divorced(BernardaBrysonShahn))", "Bernarda BrysonShahn had been DivorcedOneTime(BernardaBrysonShahn)", "Bernarda Bryson Shahn had been DivorcedOneTime(BernardaBrysonShahn)", "(Divorced(BernardaBrysonShahn)", "all x y.((BernardaBrysonShahn(x) & Divorced(y)) -> Divorced(x,y))", "(Dissolution(BernardaBrysonShahn) & Once(BernardaBrysonShahn))", "all x.((BernardaBrysonShahn(x) & Divorced(x)) -> Divorced(x))", "all x.((BernardaBrysonShahn(x) & Divorced(x)) -> HadBernardaBrysonShahn(x))", "all x.(BernardaBrysonShahn(x) -> Divorced(x))", "Bernarda BrysonShahn had been DivorcedOneTime.", "(Dissolution(BertanaBrysonShahn) & BernardaBrysonShahn(BertanaBrysonShahn))", "Bernarda Bryson Shahn had been DivorcedOneTime.", "Bernarda BrysonShahn was divorced once.", "All x.(BernardaBrysonShahn(x) -> Divorced(x))", "All x.((BertanaBrysonShahn(x) & Divorced(x)) -> Divorced(x))"]}
{"id": "folio_train_1150", "nl": "If people upgrade to the newest iPhone model every year, then they are not saving money for a down payment on a new house.", "fol": "all x.(UpgradesToIphone(x) -> -SavingForHouseDownPayment(x))", "prediction": ["all x.((Person(x) & UpgradesToNewestAppleModelEveryYear(x)) -> -SavingMoneyForNewHouse(x))", "all x.((Person(x) & UpgradesToNewestIphoneModel(x) & EveryYear(x)) -> -SavingMoneyForNewHouse(x))", "all x y.((Person(x) & iPhoneModel(y) & UpgradesEveryYear(x,y)) -> -SavingMoneyForDownPayment(x,y))", "all x y.((Person(x) & iPhone(y) & UpgradesEveryYear(x,y)) -> -SavingMoneyForNewHouse(x))", "all x.(UpgradesToNewestAppleModelEveryYear(x) -> -SavingMoneyForNewHouse(x))", "all x.((PeopleUpgradeToNewestAppleModel(x) & EveryYear(x)) -> -SavingMoneyForNewHouse(x))", "(all x.(UpgradeToNewestAppleModel(x) & Yearly(x)) -> -SavingMoneyForNewHouse(x))", "all x y z.((Person(x) & iPhone(y) & House(z) & UpgradesEveryYear(x,y)) -> -SavingMoneyForDownPayment(x,z))", "all x.(UpgradeToNewestAppleModelEveryYear(x) -> -SavingMoneyForNewHouse(x))", "all x.((Person(x) & UpgradesToNewestAppleModelEveryYear(x)) -> -SavingMoneyForNewHouse(x))", "all x.((UpgradesToNewestIphoneModel(x) & Yearly(x)) -> -SavingMoneyForNewHouse(x))", "all x y.((Person(x) & iPhoneModel(y) & UpgradesEveryYear(x,y)) -> -SavingMoneyForNewHouse(x))", "all x y.((People(x) & iPhoneModel(y) & UpgradesEveryYear(x,y)) -> -SavingMoneyForNewHouse(x))", "all x y.((Person(x) & iPhoneModel(y) & UpgradesEveryYear(x,y)) -> -SavesMoneyForDownPayment(x,y))", "all x.(UpgradesToNewestIphoneModelEveryYear(x) -> -SavingMoneyForNewHouse(x))", "all x.(UpgradeToNewestIphoneModelEveryYear(x) -> -SavingMoneyForNewHouse(x))"]}
{"id": "folio_train_1151", "nl": "If people enjoy reading about tech specs and keeping up to date on the latest technology, then they upgrade to the newest iPhone model every year.", "fol": "all x.(EnjoysTechReading(x) -> UpgradesToIphone(x))", "prediction": ["all x.((Person(x) & EnjoysReadingTechSpecs(x) & UpToDateOnTechnology(x)) -> UpgradesToNewestIphoneModel(x))", "all x.((People(x) & EnjoysReadingTechSpecs(x) & UpToDateTechnology(x)) -> UpgradesToNewestIphoneModel(x))", "all x y.((Person(x) & EnjoysReadingTechSpecs(x) & KeepsUpToDateOnTechnology(x)) -> UpgradesToNewestIphoneModel(y))", "all x.((Person(x) & EnjoysReadingTechSpecs(x) & KeepsUpToDateOnTechnology(x)) -> UpgradesToNewestIphoneModel(x))", "(EnjoysReadingTechSpecsAndKeepingUpToDateOnNewTechnology(Person,Apple) & UpgradesToNewestModel(Phone,Year))", "all x.((People(x) & EnjoysReadingTechSpecs(x) & KeepsUpToDateOnTechnology(x)) -> UpgradesToNewestIphoneModel(x))", "all x.((Person(x) & EnjoysReadingTechStandards(x) & KeepsUpToDateOnTechnology(x)) -> UpgradesToNewestIphoneModel(x))", "all x y.((Person(x) & EnjoysReadingTechStandards(x) & KeepsUpToDateOnTechnology(x)) -> UpgradesToNewestIphoneModel(y))", "all x y.((People(x) & EnjoysReadingTechSpecs(x) & KeepsUpToDateOnTechnology(x)) -> UpgradesToNewestIphoneModel(y))", "all x y z.((Person(x) & TechSpecs(y) & Technology(z) & EnjoysReading(x,y) & UpToDate(x,z)) -> UpgradesToNewestModel(x,y))", "all x y.((Person(x) & EnjoysReadingTechSpecs(x) & UpToDateTechnology(y)) -> UpgradesToNewestAppleModel(x,y))", "all x.((People(x) & EnjoysReadingTechStandards(x) & KeepsUpToDateOnTechnology(x)) -> UpgradesToNewestIphoneModel(x))", "all x.((Person(x) & EnjoysTechSpecs(x) & KeepsUpToDateOnTechnology(x)) -> UpgradesToNewestIphoneModel(x))", "all x.(EnjoysTechSpecsAndTechnology(x) -> UpgradesToNewestAppleModel(x))", "all x.((People(x) & EnjoysReadingTechSpecs(x) & UpToDateOnTechnology(x)) -> UpgradesToNewestIphoneModel(x))", "all x y.((Person(x) & EnjoysReadingTechSpecs(x) & UpToDateTechnology(x)) -> UpgradesToNewestIphoneModel(y))"]}
{"id": "folio_train_1152", "nl": "People either are saving money for a down payment on a new house or they live in apartments in big metropolitan cities.", "fol": "all x.(SavingForHouseDownPayment(x) | LivesInApartment(x))", "prediction": ["all x y.((Person(x) & House(y)) -> (SavingMoney(x,y) | LivingInApartments(x,y)))", "all x.((Person(x) & (SavesMoney(x) | LivesInApartments(x))) -> NewHouse(x))", "all x.(Person(x) -> (SavingMoneyForDownPayment(x) | LivesInApartments(x)))", "all x y.((Person(x) & House(y) & (SavingMoney(x,y) | LivingInApartments(x,y))) -> DownPayment(x,y))", "all x y.((Person(x) & NewHouse(y) & (SavesMoneyForDownPayment(x,y) | LivesInApartments(x,y))) -> (SavingMoney(x,y) | LivesInMetropolitanCities(x,y)))", "(exists x.(Person(x) & SavingMoneyForDownPayment(x)) | exists y.(Apartment(y) & InMetropolitanCity(x,y))))", "all x y z.((Person(x) & House(y) & Apartment(z)) -> (SavingMoney(x,y) | LivingInMetropolitanCities(x,z)))", "exists x.(Person(x) & ((SavingMoney(x) & NewHouse(x)) | LivesInApartments(x) & MetropolisCity(x))))", "(all x.(SavingMoneyForNewHouse(x) | LivingInApartments(x))) -> NewHouse(x))", "exists x.(Person(x) & ((SavingMoney(x) & DownPaymentOnNewHouse(x)) | LivesInApartments(x)) & InMetropolitanCities(x)))", "exists x.(Person(x) & ((SavesMoney(x) & DownPayment(x)) | LivesInApartments(x))))", "exists x.(People(x) & ((SavesMoney(x) & DownPayment(x)) | LivesInApartments(x)) & InMetropolitanCities(x)))", "all x.((Person(x) & SavingMoneyForDownPayment(x)) | LivesInApartments(x))", "all x y.((Person(x) & House(y)) -> (SavingMoney(x,y) | LivingInApartments(x,y)))", "all x y.((Person(x) & (SavingMoney(x) | LivingInApartments(x,y))) -> NewHouse(y))", "exists x.(Person(x) & ((SavesMoney(x) & NewHouse(x)) | LivesInApartments(x) & MetropolisCity(x))))"]}
{"id": "folio_train_1153", "nl": "If people live with at least one roommate then they do not own at least one pet.", "fol": "all x.(LivesWithRoommate(x) -> -OwnsPet(x))", "prediction": ["all x.((Person(x) & LivesWithAtLeastOneRoommate(x)) -> -OwnAtLeastOnePet(x))", "all x.((LivesWithAtLeastOneRoommate(x) & -OwnAtLeastOnePet(x)) -> -OwnAtLeastOnePet(x))", "all x.(LivesWithAtLeastOneRoommate(x) -> -OwnAtLeastOnePet(x))", "all x y.((Person(x) & Roommate(y) & LivesWith(x,y)) -> -Owns(x,y))", "all x.((Person(x) & LivesWithAtLeastOneRoommate(x)) -> -OwnsAtLeastOnePet(x))", "-exists x.(LivesWith(x,y) & Roommate(y))", "all x.(LivesWithAtLeastOneRoommate(x) -> -OwnAtLeastOnePet(x))", "all x.((LivesWithAtLeastOneRoommate(x) & -OwnAtLeastOnePet(x)) -> -OwnAtLeastOnePet(x))", "all x y.((Person(x) & Roommate(y) & LivesWith(x,y)) -> -OwnsPet(x,y))", "exists x.(Pet(x) & exists y.(Roommate(y) & LivesWith(x,y))))", "all x.((Person(x) & LivesWithAtLeastOneRoommate(x)) -> -OwnAtLeastOnePet(x))", "all x.(LivesWithAtLeastOneRoommate(x) -> -OwnsAtLeastOnePet(x))", "all x y.((Person(x) & Roommate(y) & LivesWith(x,y)) -> -Owns(x,y))", "exists x.(Pet(x) & exists y.(Roommate(y) & LivesWith(x,y))))", "all x y.((Person(x) & Roommate(y) & LivesWith(x,y)) -> -OwnsPet(x,y))", "all x y.((Person(x) & Roommate(y)) -> -OwnsPet(x,y))"]}
{"id": "folio_train_1154", "nl": "All people who own at least one pet live with at least one roommate.", "fol": "all x.(LivesInApartment(x) -> LivesWithRoommate(x))", "prediction": ["all x.((Person(x) & OwnsPet(x)) -> LivesWithRoommate(x))", "all x.(OwnsPet(x) -> LivesWithRoommate(x))", "all x y.((Person(x) & OwnsPet(x,y) & Roommate(y)) -> LivesWith(x,y))", "all x.((Person(x) & OwnsAtLeastOnePet(x)) -> LivesWithAtLeastOneRoommate(x))", "all x.((Person(x) & OwnsPet(x)) -> LivesWithRoommate(x))", "all x.(OwnsAtLeastOnePet(x) -> LivesWithAtLeastOneRoommate(x))", "all x y.((Person(x) & Pet(y) & Owns(x,y)) -> LivesWith(x,y))", "all x.(OwnsPet(x) -> LivesWithRoommate(x))", "all x.((OwnsPet(x) & HasPet(x)) -> LivesWithRoommate(x))", "all x y.((Person(x) & OwnsPet(x,y) & Roommate(y)) -> LivesWith(x,y))", "all x.(Owns(x,y) -> LivesWith(x,z))", "all x.((Person(x) & OwnsAtLeastOnePet(x)) -> LivesWithAtLeastOneRoommate(x))", "all x.((Person(x) & OwnsPet(x)) -> LivesWithRoommate(x))", "all x y.((Person(x) & Pet(y) & Owns(x,y)) -> LivesWith(x,y))", "exists x.(Pet(x) & Owns(x,y) & Roommate(y))", "all x.(OwnsPet(x) -> LivesWithRoommate(x))"]}
{"id": "folio_train_1155", "nl": "If Emma does not both own at least one pet and live in apartments in big metropolitan cities, then Emma either owns at least one pet and lives in an apartment in big metropolitan cities, or she neither owns a pet nor lives in an apartment in big metropolitan cities. ", "fol": "(-(OwnsPet(Emma) & LivesInApartment(Emma)) -> ((OwnsPet(Emma) & LivesInApartment(Emma)) | (-OwnsPet(Emma) & -LivesInApartment(Emma))))", "prediction": ["all x.((Emma(x) & -OwnsAtLeastOnePet(x) & LivesInApartmentsInBigMetropolitanCities(x)) -> (OwnsAtLeastOnePet(x) & LivesInApartmentInBigMetropolitanCities(x)) | (-OwnsAtLeastOnePet(x) & LivesInApartmentInBigMetropolitanCities(x))))", "all x.((Emma(x) & -(OwnsAtLeastOnePet(x) & LivesInApartmentsInBigMetropolitanCities(x)) & (OwnsAtLeastOnePet(x) & LivesInApartmentInBigMetropolitanCities(x)) | -OwnsAtLeastOnePet(x) & LivesInApartmentInBigMetropolitanCities(x)))", "all x y.((Emma(x) & Pet(y) & -(Owns(x,y) & LivesInApartments(x,y)) & BigMetropolitanCities(x))) -> (Owns(x,y) & LivesInApartment(x,y)) | (-Owns(x,y) & LivesInApartment(x,y))))", "(all x.((Emma(x) & OwnsAtLeastOnePet(x) & LivesInApartments(x)) -> (OwnsAtLeastOnePet(x) & LivesInApartment(x)) | (-OwnsAtLeastOnePet(x) & LivesInApartment(x)))))", "(all x.((Emma(x) & OwnsPet(x) & LivesInApartments(x)) -> (OwnsPet(x) & LivesInApartment(x)) | (-OwnsPet(x) & LivesInApartment(x))))", "all x y.((Emma(x) & Pet(y) & Apartment(z) & -Owns(x,y) & LivesIn(x,z)) -> (Owns(x,y) & LivesIn(x,z) & In(x,z)))", "all x.((Emma(x) & -(OwnsAtLeastOnePet(x) & LivesInApartments(x)) & BigMetropolitanCities(x)) -> (OwnsAtLeastOnePet(x) & LivesInApartment(x)) | (-OwnsAtLeastOnePet(x) & LivesInApartment(x))))", "(all x y.((Emma(x) & Pet(y) & BigMetropolitanCities(x) & -Owns(x,y) & LivesInApartments(x,y)) -> (Owns(x,y) & LivesInApartment(x,y)) | (-Owns(x,y) & LivesInApartment(x,y))))", "all x y.((Emma(x) & -(OwnsAtLeastOnePet(x) & LivesInApartments(x,y) & BigMetropolitanCities(y)) & (OwnsAtLeastOnePet(x) | LivesInApartment(x,y))))", "all x y z.((Emma(x) & Pet(y) & Apartment(z) & -Owns(x,y) & LivesIn(x,z)) -> (Owns(x,y) & LivesIn(x,z)) | (-Owns(x,y) & LivesIn(x,z)))))", "all x.((Emma(x) & -OwnsAtLeastOnePet(x) & LivesInApartmentsInBigMetropolitanCities(x)) -> (OwnsAtLeastOnePet(x) & LivesInApartmentInBigMetropolitanCities(x)) | (-OwnsAtLeastOnePet(x) & LivesInApartmentInBigMetropolitanCities(x))))", "all x.((Emma(x) & -OwnsAtLeastOnePet(x) & LivesInApartments(x)) -> (OwnsAtLeastOnePet(x) & LivesInApartment(x) & -OwnsAtLeastOnePet(x) & LivesInApartment(x)))", "all x.((Emma(x) & -(OwnsPet(x) & LivesInApartments(x) & BigMetropolitanCities(x))) -> (OwnsPet(x) & LivesInApartment(x) & -OwnsPet(x) & LivesInApartment(x)))", "(all x.((Emma(x) & OwnsPet(x) & LivesInApartments(x)) -> (OwnsPet(x) & LivesInApartment(x) & InBigMetropolitanCities(x)) | (-OwnsPet(x) & LivesInApartment(x))))", "(all x.((Emma(x) & OwnsAtLeastOnePet(x) & LivesInApartments(x)) -> (OwnsAtLeastOnePet(x) & LivesInApartment(x)) | (-OwnsAtLeastOnePet(x) & LivesInApartment(x))))", "all x.((Emma(x) & (OwnsAtLeastOnePet(x) & LivesInApartments(x)) | (-OwnsAtLeastOnePet(x) & LivesInApartment(x))))"]}
{"id": "folio_train_1156", "nl": "Emma lives with at least one roommate.", "fol": "LivesWithRoommate(Emma)", "prediction": ["all x.((Emma(x) & Roommate(x)) -> LivesWith(x,y))", "(exists x.(Roommate(x) & LivesWith(x,y)))", "all x y.((Emma(x) & Roommate(y)) -> LivesWith(x,y))", "Emma livesWithAtLeastOneRoommate(Emma)", "Emma lives with at least one roommate.", "all x.((Emma(x) & Roommate(x)) -> LivesWith(x,y))", "all x.(Emma(x) -> exists y.(Roommate(y) & LivesWith(x,y))))", "(exists x.(Roommate(x) & LivesWith(x,y)))", "(LivesWithRoommate(Emma,e) & -LivesWithRoommate(Emma,e))", "Emma exists x.(Roommate(x) & LivesWith(x,y))", "all x.((Emma(x) & Roommate(x)) -> LivesWith(x,y))", "Emma lives with at least one roommate.", "(exists x.(Roommate(x) & LivesWith(x,y)))", "exists x.(Roommate(x) & LivesWith(x,y))", "all x.((Emma(x) & Roommate(y)) -> LivesWith(x,y))", "all x.((Emma(x) & Roommate(x)) -> LivesWith(x,y))"]}
{"id": "folio_train_1157", "nl": "Emma enjoys reading about tech specs and keeping up to date on the latest technology.", "fol": "EnjoysTechReading(Emma)", "prediction": ["all x.((Emma(x) & TechSpecs(x)) -> (EnjoysReading(x) & KeepsUpToDateOnTechnology(x)))", "all x.(Emma(x) -> (EnjoysReadingTechSpecs(x) & KeepsUpToDateOnTechnology(x)))", "(EnjoysReadingTechSpecs(Emma) & KeepsUpToDateOnTechnology(Emma))", "all x y.((Emma(x) & TechSpecs(y)) -> (EnjoysReading(x,y) & KeepsUpToDateOnTechnology(x)))", "Emma enjoys reading about tech specs and keeping uptodate on technology.", "(EnjoysReadingTechStandards(Emma) & KeepsUpToDateOnTechnology(Emma))", "all x.((Emma(x) & ReadsTechSpecs(x) & KeepsUpToDateOnTechnology(x)) -> Enjoys(x))", "Emma enjoys reading tech specs and keeping uptodate on technology.", "(EnjoysReadingTechScreens(Emma) & KeepsUpToDateOnTechnology(Emma))", "all x.(Emma(x) -> (EnjoysReadingTechSpecs(x) & KeepsUpToDateOnTechnology(x)))", "all x y.((Emma(x) & TechSpecs(y)) -> (EnjoysReading(x,y) & KeepsUpToDateOnTechnology(x)))", "(EnjoysReadingTechSpecs(Emma) & KeepsUpToDateOnTechnology(Emma))", "Emma enjoys reading about tech specs and keeping uptodate on technology.", "all x.((Emma(x) & TechSpecs(x)) -> (EnjoysReading(x) & KeepsUpToDateOnTechnology(x)))", "Emma enjoys reading tech specs and keeping uptodate on technology.", "Emma enjoys reading about tech specs and keeping uptodate on technology."]}
{"id": "folio_train_1158", "nl": "If you are on the payroll, then you are being paid by the school.", "fol": "all x.(IsOnPayroll(x) -> IsPaidBySchool(x))", "prediction": ["all x.((Payroll(x) & OnPayroll(x)) -> PaidBySchool(x))", "all x.(Payroll(x) -> PaidBySchool(x))", "(Payroll(x) -> PaidBySchool(x))", "all x y.((Payroll(x) & School(y) & On(x,y)) -> PaidBy(x,y))", "all x.((Payroll(x) & OnPayroll(x)) -> PaidBySchool(x))", "all x.(Payroll(x) -> PaidBySchool(x))", "(Payroll(x) -> PaidBySchool(x))", "all x y.((Payroll(x) & School(y) & On(x,y)) -> PaidBy(x,y))", "all x.((Payroll(x) & OnPayroll(x)) -> PaidBySchool(x))", "all x.((Payroll(x) & On(x,Payment)) -> PaidBySchool(x))", "all x.(Payroll(x) -> PaidBySchool(x))", "all x y.((Payroll(x) & School(y) & OnPayroll(x,y)) -> PaidBy(x,y))", "all x y.((Payroll(x) & School(y) & On(x,y)) -> PaidBy(x,y))", "all x.(Payroll(x) -> PaidBySchool(x))", "all x.((Payroll(x) & OnPayroll(x)) -> PaidBySchool(x))", "all x.(Payroll(x) -> PaidBySchool(x))"]}
{"id": "folio_train_1159", "nl": "If someone has a job at a school, then they are on the payroll.", "fol": "all x.(HasJobAtSchool(x) -> IsOnPayroll(x))", "prediction": ["all x.((JobAtSchool(x) & Has(x,School)) -> OnPayroll(x))", "all x.((HasJobAtSchool(x) & OnPayroll(x)) -> HasJobAtSchool(x))", "all x y.((Job(x) & School(y) & Has(x,y)) -> OnPayroll(x))", "all x y.((Person(x) & School(y) & HasJob(x,y)) -> OnPayroll(x))", "all x.((Job(x) & HasAtSchool(x)) -> OnPayroll(x))", "all x.(HasJobAtSchool(x) -> OnPayroll(x))", "all x y z.((Job(x) & School(y) & School(z) & Has(x,y)) -> OnPayroll(x))", "all x y.((Person(x) & School(y) & HasJob(x,y)) -> OnPayroll(x))", "all x.((Person(x) & HasJobAtSchool(x)) -> OnPayroll(x))", "all x.((HasJobAtSchool(x) & OnPayroll(x)) -> HasJobAtSchool(x))", "all x y.((Job(x) & School(y) & Has(x,y)) -> OnPayroll(x))", "all x.(HasJobAtSchool(x) -> OnPayroll(x))", "all x y.((Person(x) & JobAtSchool(x) & Has(x,y)) -> OnPayroll(x))", "exists x y.(JobAtSchool(x) & Has(x,y) & OnPayroll(x))", "all x.((JobAtSchool(x) & Has(x,School)) -> OnPayroll(x))", "all x.(HasJobAtSchool(x) -> OnPayroll(x))"]}
{"id": "folio_train_1160", "nl": "All faculty members have a job at a school.", "fol": "all x.(IsFacultyMember(x) -> HasJobAtSchool(x))", "prediction": ["all x.(FacultyMember(x) -> HasJobAtSchool(x))", "all x y.((FacultyMember(x) & School(y)) -> HasJobAt(x,y))", "all x y.((Faculty(x) & School(y)) -> HasJobAt(x,y))", "(all x.(FacultyMember(x) -> HasJobAtSchool(x)))", "all x.(FacultyMember(x) -> HasJobAtSchool(x))", "all x.exists y.(FacultyMember(x) & School(y) & HasJobAt(x,y))", "all x y z.((FacultyMember(x) & School(y) & School(z)) -> HasJobAt(x,y,z))", "all x y.((FacultyMember(x) & School(y)) -> HasJobAt(x,y))", "all x.(Faculty(x) -> HasJobAtSchool(x))", "all x y.((Faculty(x) & School(y)) -> HasJob(x,y))", "all x.(FacultyMember(x) -> HasJobAtSchool(x))", "exists x y.(FacultyMember(x) & School(y) & HasJobAt(x,y))", "all x.exists y.(Faculty(x) & School(y) & HasJob(x,y))", "all x y.((FacultyMember(x) & School(y)) -> HasJobAt(x,y))", "all x.(FacultyMember(x) -> exists y.(School(y) & HasJob(x,y)))", "all x.(FacultyMember(x) -> HasJobAtSchool(x))"]}
{"id": "folio_train_1161", "nl": "One can either be a faculty member or a teacher.", "fol": "all x.(IsFacultyMember(x) | IsTeacher(x))", "prediction": ["all x.(FacultyMember(x) | Teacher(x))", "all x.((FacultyMember(x) | Teacher(x)) -> (Faculty(x) | Teacher(x)))", "all x.(FacultyMember(x) | Teacher(x))", "all x y.((FacultyMember(x) & Teacher(y)) -> (Faculty(x) | Teacher(y)))", "all x.(Faculty(x) | Teacher(x))", "all x.((FacultyMember(x) | Teacher(x)) -> (FacultyMember(x) | Teacher(x)))", "all x.(FacultyMember(x) | Teacher(x))", "all x y.((FacultyMember(x) & Teacher(y)) -> (Faculty(x) | Teacher(y)))", "all x y.((Faculty(x) & Teacher(y)) -> (FacultyMember(x) | Teacher(x)))", "exists x.(Faculty(x) | Teacher(x))", "all x y.((FacultyMember(x) | Teacher(y)) -> (Faculty(x) | Teacher(y)))", "exists x.(FacultyMember(x) | Teacher(x))", "exists x.(Faculty(x) | Teacher(x))", "exists x.(FacultyMember(x) | Teacher(x))", "exists x.(Faculty(x) | Teacher(x))", "exists x.(FacultyMember(x) | Teacher(x))"]}
{"id": "folio_train_1162", "nl": "Every teacher has students.", "fol": "all x.(IsTeacher(x) -> TeachesStudents(x))", "prediction": ["all x.(Teacher(x) -> HasStudents(x))", "all x.exists y.(Teacher(x) & Student(y) & Has(x,y))", "-exists x.(Teacher(x) & HasStudents(x))", "all x.(Teacher(x) -> HasStudents(x))", "all x.exists y.(Teacher(x) & Student(y) & Has(x,y))", "exists x y.(Teacher(x) & Student(y) & Has(x,y))", "(exists x.(Teacher(x) & HasStudents(x)))", "all x.(Teacher(x) -> HasStudents(x))", "all x.exists y.(Teacher(x) & Student(y) & Has(x,y))", "exists x y.(Teacher(x) & Student(y) & Has(x,y))", "all x.(Teacher(x) -> HasStudents(x))", "all x.exists y.(Teacher(x) & Student(y))", "exists x.(Teacher(x) & HasStudents(x))", "all x.exists y.(Teacher(x) & Student(y) & Has(x,y))", "all x.(Teacher(x) -> HasStudents(x))", "exists x.(Teacher(x) & HasStudents(x))"]}
{"id": "folio_train_1163", "nl": "If Nancy is a teacher, then they are on the payroll.", "fol": "(IsTeacher(Nancy) -> IsOnPayroll(Nancy))", "prediction": ["all x.((Nancy(x) & Teacher(x)) -> OnPayroll(x))", "all x.(Teacher(x) -> OnPayroll(x))", "all x.((Nancy(x) & Teacher(x)) -> OnPayroll(x))", "all x.(Teacher(x) -> OnPayroll(x))", "all x y.((Nancy(x) & Teacher(x) & Payroll(y)) -> OnPayroll(x,y))", "(Teacher(Nancy) -> OnPayroll(Nancy,Payroll))", "all x.((Nancy(x) & Teacher(x)) -> OnPayroll(x))", "all x.(Teacher(x) -> OnPayroll(x))", "(Teacher(Nancy) -> OnPayroll(Nancy))", "all x.((Nancy(x) & Teacher(x)) -> OnPayroll(x))", "(Teacher(Nancy) -> OnPayroll(Nancy,Payroll))", "all x.(Teacher(x) -> OnPayroll(x))", "all x.((Nancy(x) & Teacher(x)) -> Payroll(x))", "all x.(Teacher(x) -> Payroll(x))", "all x.(Teacher(x) -> OnPayroll(x))", "all x.(Teacher(x) -> Payroll(x))"]}
{"id": "folio_train_1164", "nl": "If Nancy is not a teacher, then they are not paid by the school.", "fol": "(-IsTeacher(Nancy) -> -IsOnPayroll(Nancy))", "prediction": ["all x.((Nancy(x) & -Teacher(x)) -> -PayedBySchool(x))", "(-Teacher(Nancy) -> -PayedBySchool(Nancy))", "all x.((Nancy(x) & -Teacher(x)) -> -PayedBySchool(x))", "all x.((Nancy(x) & -Teacher(x)) -> -PaidBySchool(x))", "(-Teacher(Nancy) -> -PayedBySchool(Nancy))", "all x.((Penny(x) & -Teacher(x)) -> -PayedBySchool(x))", "all x y.((Nancy(x) & -Teacher(x)) -> -PayedBySchool(y))", "all x.(Nancy(x) -> -Teacher(x))", "all x.((Nancy(x) & -Teacher(x)) -> -PayedBySchool(x))", "(-Teacher(Nancy) -> -PaidBySchool(Nancy,School))", "-Teacher(n) -> -PayedBySchool(n,n,n))", "-Teacher(Nancy)", "all x.((Nancy(x) & -Teacher(x)) -> -PaidBySchool(x))", "all x.((Nancy(x) & -Teacher(x)) -> -PayedBySchool(x))", "all x.((Nancy(x) & -Teacher(x)) -> -PaidBySchool(x))", "all x.((Nancy(x) & -Teacher(x)) -> -PayedBySchool(x))"]}
{"id": "folio_train_1165", "nl": "Nancy is a faculty member.", "fol": "IsFacultyMember(Nancy)", "prediction": ["all x.(FacultyMember(x) -> Nancy(x))", "(FacultyMember(Nancy)", "Nancy is FacultyMember(Nancy)", "all x.(FacultyMember(x) -> Nancy(x))", "(FacultyMember(Nancy)", "Nancy is faculty member.", "all x.(Nancy(x) -> FacultyMember(x))", "Nancy is a FacultyMember.", "Nancy is FacultyMember(Nancy)", "(Faculty(Nancy) & FacultyMember(Nancy))", "all x.(FacultyMember(x) -> Nancy(x))", "(FacultyMember(Nancy)", "all x.(Faculty(x) -> Nancy(x))", "Nancy is faculty member.", "all x.(FacultyMember(x) -> Nancy(x))", "(FacultyMember(Nancy)"]}
{"id": "folio_train_1166", "nl": "Nancy is paid by the school and has students.", "fol": "(IsPaidBySchool(Nancy) & TeachesStudents(Nancy))", "prediction": ["all x.(Nancy(x) -> (PayedBySchool(x) & HasStudents(x)))", "all x y.((Nancy(x) & School(y)) -> (PayedBy(x,y) & HasStudents(x)))", "(PayedBySchool(Nancy) & HasStudents(Nancy))", "Nancy is paid by the school and has students.", "all x.(Nancy(x) -> (PayedBySchool(x) & HasStudents(x)))", "(PaidBySchool(Nancy) & HasStudents(Nancy))", "(PayedBySchool(Nancy) & HasStudents(Nancy))", "all x y.((Nancy(x) & School(y)) -> (PayedBy(x,y) & HasStudents(x,y)))", "all x y.((Pension(x) & School(y) & Nancy(z)) -> PaidBy(z,y))", "all x y.((Nancy(x) & School(y) & PaidBy(x,y)) -> HasStudents(x))", "all x.(Nancy(x) -> (PayedBySchool(x) & HasStudents(x)))", "(PaidBySchool(Nancy) & HasStudents(Nancy))", "(PayedBySchool(Nancy) & HasStudents(Nancy))", "exists x.(Nancy(x) & PaidBySchool(x) & HasStudents(x))", "all x.(Nancy(x) -> (PayedBySchool(x) & HasStudents(x)))", "(PayedBySchool(Nancy) & HasStudents(Nancy))"]}
{"id": "folio_train_1167", "nl": "Nancy is not paid by the school and has students.", "fol": "(-IsOnPayroll(Nancy) & TeachesStudents(Nancy))", "prediction": ["(-PayedBySchool(Nancy) & HasStudents(Nancy))", "all x.(Nancy(x) -> (-PayedBySchool(x) & HasStudents(x)))", "(-PaidBySchool(Nancy) & HasStudents(Nancy))", "all x y.((Nancy(x) & School(y)) -> (-PayedBy(x,y) & HasStudents(x)))", "-(PayedBySchool(Nancy) & HasStudents(Nancy))", "(Nancy(Nancy) & -PayedBySchool(Nancy) & HasStudents(Nancy))", "all x.(Nancy(x) -> (-PayedBySchool(x) & HasStudents(x)))", "(-PayedBySchool(Nancy) & HasStudents(Nancy))", "all x.((Nancy(x) & -PayedBySchool(x)) -> HasStudents(x))", "Nancy is not paid by the school and has students.", "(-PaidBySchool(Nancy) & HasStudents(Nancy))", "((Nancy(Nancy) & -PayedBySchool(Nancy) & HasStudents(Nancy)))", "-(PayedBySchool(Nancy) & HasStudents(Nancy))", "all x.(Nancy(x) -> (-PayedBySchool(x) & HasStudents(x)))", "(-PayedBySchool(Nancy) & HasStudents(Nancy))", "-(PaidBySchool(Nancy) & HasStudents(Nancy))"]}
{"id": "folio_train_1168", "nl": "Kangaroo is an animal.", "fol": "all x.(IsKangaroo(x) -> IsAnimal(x))", "prediction": ["all x.(Kangoroo(x) -> Animal(x))", "(Animal(kangaroo) & Animal(kangaroo))", "all x.(Kangoroo(x) -> Animal(x))", "all x y.((Kangoroo(x) & Animal(y)) -> Animal(x))", "Kangaroo (Animal(k))", "(Animal(kangaroo) & Animal(kangaroo))", "all x.(Kangaroo(x) -> Animal(x))", "Kangaroo (Animal)", "(Animal(kangaroo) & Animal(kangaroo))", "all x.(Kangoroo(x) -> Animal(x))", "all x.(Kangaroo(x) -> Animal(x))", "all x.(Kangoroo(x) -> Animal(x))", "all x.(Kangoroo(x) -> Animal(x))", "All x.(Kangaroo(x) -> Animal(x))", "All x.(Kangoroo(x) -> Animal(x))", "All x.(Kangaroo(x) -> Animal(x))"]}
{"id": "folio_train_1169", "nl": "No Kangaroos live in Germany.", "fol": "all x.(IsKangaroo(x) -> -LivesIn(x,Germany))", "prediction": ["-exists x.(Kangaroo(x) & LivesIn(x,Germany))", "all x.(Kangaroo(x) -> -LivesInGermany(x))", "KeineKangaroosLiveInGermany(x)", "(NoKangaroosLiveInGermany(Kangaroo) & -LiveInGermany(Kangaroo))", "-exists x.(Kangaroo(x) & LivesIn(x,Germany))", "NoKangaroosLiveInGermany(x)", "(exists x.(Kangaroo(x) & LivesIn(x,Germany)))", "-exists x.(Kangaroo(x) & LivesIn(x,Germany))", "KeenKangarooLivesInGermany(x)", "(exists x.(Kangaroo(x) & LivesIn(x,Germany)))", "-exists x.(Kangaroo(x) & LivesIn(x,Germany))", "-exists x.(Kangoroo(x) & LivesInGermany(x))", "-exists x.(Kangaroo(x) & LivesIn(x,Deutschland))", "-exists x.(Kangoroo(x) & LivesInGermany(x))", "-exists x.(Kangaroo(x) & LivesIn(x,Germany))", "-exists x.(Kangoroo(x) & LivesInGermany(x))"]}
{"id": "folio_train_1170", "nl": "If Jane saves enough money for the summer, she will fly to Germany.", "fol": "(HasEnoughMoney(Jane) -> FliesTo(Jane,Germany))", "prediction": ["all x.((Jane(x) & SavesEnoughMoney(x)) -> FlyToGermany(x))", "all x y.((Jane(x) & Summer(y) & SavesEnoughMoney(x,y)) -> FlyToGermany(x))", "all x.((Jane(x) & SavesEnoughMoneyForSummer(x)) -> FlyToGermany(x))", "(SavingEnoughMoneyForSummer(Jane,Germany) -> Fly(Jane,Germany))", "-(SavesEnoughMoney(Jane,Summer) & FliesToGermany(Jane,Summer))", "(SavesEnoughMoneyForSummer(Jane,Germany) -> FlyTo(Jane,Germany))", "all x.((SavesEnoughMoney(x) & Summer(x)) -> FlyToGermany(x))", "(SavesEnoughMoney(Jane) -> FlyToGermany(Jane))", "all x y.((Jane(x) & Summer(y) & SavesEnoughMoney(x,y)) -> FlyToGermany(x))", "all x.((SaversEnoughMoney(x) & Summer(x)) -> FlyToGermany(x))", "all x.((Jane(x) & SavesEnoughMoney(x)) -> FlyToGermany(x))", "All x.(SavesEnoughMoneyForSummer(x) -> FlyToGermany(x))", "all x.((Jane(x) & SavesEnoughMoneyForSummer(x)) -> FlyToGermany(x))", "all x y.((Jane(x) & Summer(y) & SavesEnoughMoneyFor(x,y)) -> FlyToGermany(x))", "all x y.((Jane(x) & Summer(y) & SavesEnoughMoney(x,y)) -> FliesToGermany(x,y))", "All x.(SavingSummer(x) -> FlyToGermany(x))"]}
{"id": "folio_train_1171", "nl": "If Jane flies to Germany, she will go to the Berlin Zoo.", "fol": "(FliesTo(Jane,Germany) -> Visits(Jane,Berlinzoo))", "prediction": ["all x.((FliesToGermany(x) & GoesToBerlinZoo(x)) -> GoesTo(x,BerlinZoo))", "all x.(FliesToGermany(x) -> GoesToBerlinZoo(x))", "(FliesToGermany(Jane) -> GoesToBerlinZoo(Jane))", "all x y.((Fly(x) & Jane(y) & To(y,Germany)) -> GoesTo(y,BerlinZoo))", "all x.((FlyingToGermany(x) & JaneFliesTo(x,Germany)) -> GoesToBerlinZoo(x))", "-FliesToGermany(Jane,Germany)", "all x.(FliesTo(x,Germany) -> GoesTo(x,BerlinZoo))", "all x.((FliesToGermany(x) & GoesToBerlinZoo(x)) -> GoesToZoo(x))", "All x y.((FlyingTo(x,y) & Germany(y)) -> GoesTo(x,zoo))", "(FliesToGermany(Jane) -> GoesToBerlinZoo(Jane))", "all x.(FliesToGermany(x) -> GoesToBerlinZoo(x))", "All x y.((FlyingTo(x,y) & Germany(y)) -> GoTo(x,zoo))", "(FliesToGermany(Jane,Germany) -> GoesToBerlinZoo(Jane,Germany))", "(FliesToGermany(Jane) -> GoesToBerlinZoo(Jane,Germany))", "all x.((FliesToGermany(x) & GoesToBerlinZoo(x)) -> GoesTo(x,BerlinZoo))", "all x.(FliesTo(x,Germany) -> GoToBerlinZoo(x))"]}
{"id": "folio_train_1172", "nl": "If someone goes to the Berlin Zoo and see animals there, they live in Germany.", "fol": "all x y.((Visits(x,Berlinzoo) & IsAnimal(y) & Sees(x,y)) -> LivesIn(y,Germany))", "prediction": ["all x.((GoesToBerlinZoo(x) & SeesAnimals(x)) -> LivesInGermany(x))", "all x y.((GoesToBerlinZoo(x) & Animal(y) & Sees(x,y)) -> LivesInGermany(x))", "all x y.((GoesToBerlinZoo(x) & Animals(y) & Sees(x,y)) -> LivesInGermany(x))", "all x y z.((GoesToBerlinZoo(x) & Animal(y) & Sees(x,y)) -> LivesInGermany(x))", "all x.((GoesToBerlinZoo(x) & SeesAnimals(x)) -> LivesInGermany(x))", "all x y.((GoesToBerlinZoo(x) & SeesAnimals(x,y)) -> LivesInGermany(x))", "all x.((Person(x) & GoesToBerlinZoo(x) & SeesAnimals(x)) -> LivesInGermany(x))", "all x y z.((GoesToBerlinZoo(x) & Animal(y) & Sees(x,y) & BerlinZoo(z) & LivesInGermany(x)) -> LivesInGermany(x))", "all x y.((Person(x) & GoesToBerlinZoo(x,y) & SeesAnimals(y,z)) -> LivesInGermany(x))", "exists x.(GoesToBerlinZoo(x) & SeesAnimals(x) & LivesInGermany(x))", "all x y.((GoesTo(x,y) & BerlinZoo(y) & SeesAnimals(x,y)) -> LivesInGermany(x))", "all x y z.((GoesTo(x,y) & BerlinZoo(z) & Animal(y) & Sees(x,z)) -> LivesInGermany(x))", "all x.((GoesToZoo(x) & SeesAnimals(x)) -> LivesInGermany(x))", "all x.((GoesToBerlinZoo(x) & SeesAnimalsInBerlinZoo(x)) -> LivesInGermany(x))", "all x.((GoesToBerlinZoo(x) & SeesAnimals(x)) -> LivesInGermany(x))", "all x.((GoesToBerlinZoo(x) & SeesAnimals(x)) -> LivesInGermany(x))"]}
{"id": "folio_train_1173", "nl": "Jane saved enough money.", "fol": "HasEnoughMoney(Jane)", "prediction": ["all x.((Jane(x) & SavedEnoughMoney(x)) -> SavedEnoughMoney(x))", "Jane saved enough money.", "(SavedEnoughMoney(Jane))", "all x.((Jane(x) & Money(y)) -> Saved(x,y))", "all x.(Jane(x) -> SavedEnoughMoney(x))", "-(JaneSavedEnoughMoney(Jane))", "Jane saved enough money.", "(SavedMoney(Jane) & Saved(Jane))", "(SavedEnoughMoney(Jane))", "Jane SavedEnoughMoney(Jane)", "all x.((Jane(x) & SavedEnoughMoney(x)) -> SavedEnoughMoney(x))", "Jane saved enough money.", "Jane saved enoughmoney.", "Jane saved enough money to pay for a new car.", "Jane saved enough money.", "Jane saved enoughmoney."]}
{"id": "folio_train_1174", "nl": "Jane will see a kangaroo in the summer.", "fol": "exists y.(IsKangaroo(y) & Sees(Jane,y))", "prediction": ["all x.((Jane(x) & Kangaroo(x)) -> SeesInSummer(x))", "all x y.((Jane(x) & Kangaroo(y)) -> SeesInSummer(x,y))", "(SeesKangaroo(Jane,Summer))", "all x.((Jane(x) & Kangaroo(x)) -> SeesInSummer(x))", "all x.(Kangaroo(x) -> SeesInSummer(x))", "Jane will see Kangaroos in Summer.", "(SeesKangaroo(Jane,Summer))", "all x y.((Jane(x) & Kangaroo(y)) -> SeesInSummer(x,y))", "all x.((Jane(x) & Kangaroo(y)) -> WillSee(x,y))", "Jane will see Kangaroos in the summer.", "(Season(Jane) & Kangaroo(Jane))", "all x y.((Jane(x) & Kangaroo(y)) -> WillSee(x,y))", "(SeesKangaroo(Jane,Summer))", "(SeesKangaroo(Jane) & Summer(Jane))", "Jane will see Kangaroo in Summer.", "all x.((Jane(x) & Kangaroo(x)) -> SeesInSummer(x,y))"]}
{"id": "folio_train_1175", "nl": "If a class has prerequisites the student must take the prerequisites to take the class.", "fol": "all y.(all x.(HasPrerequisite(x,y) -> CourseTaken(x)) -> EligibleToTake(y))", "prediction": ["all x.((Class(x) & HasPrerequisites(x)) -> MustTakePrerequisites(x))", "all x y.((Class(x) & Prerequisites(x)) -> MustTake(x,y))", "all x.((Class(x) & HasPrerequisites(x)) -> MustTakePrerequisites(x))", "all x y z.((Class(x) & Prerequisites(y) & Student(z) & Has(x,y)) -> MustTake(z,y))", "all x y.((Class(x) & Prerequisites(y)) -> MustTake(x,y))", "all x y.((Class(x) & HasPrerequisites(x,y)) -> MustTakePrerequisites(x,y))", "all x y.((Class(x) & Prerequisites(x,y)) -> MustTake(x,y))", "all x.((Class(x) & Prerequisites(x)) -> MustTake(x,prerequisites))", "all x.(Prerequisites(x) -> MustTake(x,Class,Prerequisites))", "exists x.(Prerequisites(x) & Student(x) & TakesPrerequisites(x))", "all x.((Class(x) & HasPrerequisites(x)) -> MustTakePrerequisites(x,y))", "exists x.(Prerequisites(x) & Student(x) & TakesPrerequisites(x))", "all x.((Class(x) & HasPrerequisites(x)) -> MustTakePrerequisitesToTakeClass(x))", "all x y.(Prerequisites(x) -> TakeClass(y,x))", "all x y.((Class(x) & Prerequisites(y)) -> MustTake(x,y))", "all x.((Class(x) & Prerequisites(x)) -> MustTake(x,prerequisites))"]}
{"id": "folio_train_1176", "nl": "If a class has no prerequisites, then the student can take the class", "fol": "all y.(-exists x.HasPrerequisite(x,y) -> EligibleToTake(y))", "prediction": ["all x.((Class(x) & NoPrerequisites(x)) -> CanTakeClass(x))", "all x y.((Class(x) & NoPrerequisites(x)) -> CanTake(y,x))", "all x.((Class(x) & -Prerequisites(x)) -> CanTakeClass(x))", "all x y.((Class(x) & -Prerequisites(x)) -> CanTake(y,x))", "all x y z.((Class(x) & NoPrerequisites(x,y) & Student(z) & TakesClass(z,x)) -> CanTakeClass(z,x))", "(-Prerequisites(class) -> CanTakeClass(Student))", "all x.((Class(x) & NoPrerequisites(x)) -> StudentCanTakeClass(x))", "exists x,y,z.(Class(x) & NoPrerequisites(x,y) & Student(z) & CanTakeClass(z,x))", "all x y.((Class(x) & NoPrerequisites(x)) -> CanTakeClass(y,x))", "all x.((Class(x) & NoPrerequisites(x)) -> CanTakeClass(x))", "all x y.((Class(x) & NoPrerequisites(x) & Student(y)) -> CanTakeClass(y,x))", "all x y.((Class(x) & -Prerequisites(x)) -> CanTake(x,y))", "all x.(NoPrerequisites(x) -> CanTakeClass(x,y))", "all x.((Class(x) & NoPrerequisites(x)) -> StudentCanTakeClass(x))", "all x.(NoPrerequisites(x) -> StudentCanTakeClass(x))", "all x.((Class(x) & NoPrerequisites(x)) -> CanTakeClass(x,y))"]}
{"id": "folio_train_1177", "nl": "CPSC 201 and CPSC 223 are both prerequisites for CPSC 323.", "fol": "(HasPrerequisite(Cpsc201,Cpsc323) & HasPrerequisite(Cpsc223,Cpsc323))", "prediction": ["(Prerequisites(CPSC201) & Prerequisites(CPSC223))", "(Prerequisite(CPSC201) & Prerequisite(CPSC223)) & Prerequisite(CPSC323))", "all x y.((CPSC(x) & CPSC(y)) -> (CPSC201(x) & CPSC223(x)))", "all x.((CPSC201(x) & CPSC223(x)) -> Prerequisite(x,CPSC323))", "CPSC201 and CPSC223 are prerequisites for CPSC323.", "(Prerequisites(CPSC201) & Prerequisites(CPSC223))", "((CPSC201(CPSC) & CPSC223(CPSC)) -> Prerequisite(CPSC323))", "(PrerequisitesForCPSC(CPSC201) & PrerequisitesForCPSC(CPSC223))", "all x y.((CPSC(x) & CPSC(y)) -> (Prerequisite(x,y) & Prerequisite(x,y)))", "(Prerequisite(CPSC201) & Prerequisite(CPSC223))", "CPSC201 and CPSC223(c) & Prerequisite(d) & Prerequisite(d) & Prerequisite(c) & Prerequisite(d))", "(Consequences(CPSC201) & Conciselines(CPSC223))", "all x.((CPSC201(x) & CPSC23(x)) -> Prerequisite(x,CPSC323))", "CPSC201 and CPSC223 are prerequisites for CPSC323.", "(Prerequisites(CPSC201) & Prerequisites(CPSC223))", "(Prerequisite(CPSC201) & Prerequisite(CPSC223))"]}
{"id": "folio_train_1178", "nl": "Intro Microeconomics is the only prerequisite for Intermediate Microeconomics.", "fol": "((HasPrerequisite(Intromicro,Intermediatemicro) & CourseTaken(Intromicro)) -> EligibleToTake(Intermediatemicro))", "prediction": ["all x.(IntroMicroeconomics(x) -> IntermediateMicroeconomics(x))", "all x.(IntermediateMicroeconomics(x) -> Prerequisite(x))", "all x y.((IntroMicroeconomics(x) & IntermediateMicroeconomics(y)) -> Prerequisite(x,y))", "IntroMicroeconomics(x) -> IntermediateMicroeconomics(x))", "(Prerequisite(IntroMicroeconomics) & IntermediateMicroeconomics(IntermediateMicroeconomics))", "(Prerequisite(IntraMicroeconomics) & IntermediateMicroeconomics(IntermediateMicroeconomics))", "(IntermediateMicroeconomics(introMicroeconomics) & Prerequisite(introMicroeconomics))", "All x.(IntraMicroeconomics(x) -> IntermediateMicroeconomics(x))", "all x.(IntroMicroeconomics(x) -> IntermediateMicroeconomics(x))", "all x y.((IntroMicroeconomics(x) & IntermediateMicroeconomics(y)) -> Prerequisite(x,y))", "all x.(IntermediateMicroeconomics(x) -> Prerequisite(x))", "All x.(IntermediateMicroeconomics(x) -> Prerequisite(x,IntroMicroeconomics))", "All x.(IntroMicroeconomics(x) -> IntermediateMicroeconomics(x))", "all x y.((IntroMicroeconomics(x) & IntermediateMicroeconomics(y)) -> Prerequisite(x,y))", "All x.(IntermediateMicroeconomics(x) -> Prerequisite(x,IntroMicroeconomics))", "All x.(IntroMicroeconomics(x) -> IntermediateMicroeconomics(x))"]}
{"id": "folio_train_1179", "nl": "Intro Geology has no prerequisites.", "fol": "all x.-HasPrerequisite(x,Introgeology)", "prediction": ["all x.(IntroGeology(x) -> -Prerequisites(x))", "-Prerequisites(IntroGeology)", "all x.(IntroGeology(x) -> -Prerequisites(x))", "all x.(IntraGeology(x) -> NoPrerequisites(x))", "-exists x.(IntroGeology(x) & Prerequisite(x))", "(-Prerequisites(introgeology) -> IntroGeology(introGeology))", "(IntroGeology(intro) -> NoPrerequisites(introGeology))", "all x.(IntroGeology(x) -> NoPrerequisites(x))", "-exists x.(IntraGeology(x) & Prerequisite(x))", "All x y.((IntroGeology(x) & Prerequisite(y,x)) -> -Prerequisite(x,y))", "(IntroGeology(intro) & -Prerequisites(introGeology))", "all x.(IntraGeology(x) -> NoPrerequisites(x))", "all x.(Intra-Geology(x) -> -Prerequisites(x))", "all x.(IntroGeology(x) -> -Prerequisites(x))", "All x.(IntroGeology(x) -> NoPrerequisites(x))", "all x.(IntroGeology(x) -> -Prerequisites(x))"]}
{"id": "folio_train_1180", "nl": "CPSC 201 has no prerequisites.", "fol": "-exists x.HasPrerequisite(x,Cpsc201)", "prediction": ["all x.(CPSC201(x) -> -Prerequisites(x))", "CPSC201 -HasPrerequisites(CPSC201))", "(-Prerequisites(CPSC201) & -Prerequisites(CPSC201))", "CPSC201 has no prerequisites.", "all x.(CPSC201(x) -> -Prerequisites(x))", "(NoPrerequisites(CPSC201) -> Has(CPSC201))", "all x.(CSPCC201(x) -> -Prerequisites(x))", "CPSC201 -HasPrerequisites(CPSC201))", "CPSC201 - HasPrerequisites(CPSC201))", "(HasPrerequisites(CPSC201) | HasPrerequisites(CPSC201)))", "all x.(CPSC201(x) -> -Prerequisites(x))", "All x.(CSPCCS201(x) -> -Prerequisites(x))", "CPSC201 has no Prerequisites.", "CPSC201 has NoPrerequisites(CPSC201)", "all x.(CPSC201(x) -> NoPrerequisites(x))", "(-Prerequisites(CPSC201))"]}
{"id": "folio_train_1181", "nl": "If a student took CPSC 201 but did not take CPSC 223, they can take CPSC 323.", "fol": "((CourseTaken(Cpsc201) & -CourseTaken(Cpsc223)) -> EligibleToTake(Cpsc323))", "prediction": ["all x.((Student(x) & TakedCPSC201(x) & -TakedCPSC223)) -> CanTakeCPSC323.", "(all x.((Student(x) & TakedCPSC201(x) & -TakedCPSC223)) -> CanTakeCPSC323.)", "all x y.((Student(x) & TakenCPSC201(x) & -TakenCPSC223)) -> CanTakeCPSC323.", "all x y.((Student(x) & Student(y) & TakedCPSC201(x,y) & -TakedCPSC223)) -> CanTakeCPSC323.", "all x.((Student(x) & TakenCPSC201(x) & -TakenCPSC223)) -> CanTakeCPSC323.", "(all x.((Student(x) & TakenCPSC201(x) & -TakenCPSC223)) -> CanTakeCPSC323))", "all x.((Student(x) & TakedCPSC201(x) & -TakedCPSC223)) -> CanTakeCPSC323.", "all x.((Student(x) & TakenCPSC201(x) & -TakenCPSC223(x)) -> CanTakeCPSC323.", "all x y.((Student(x) & TakedCPSC201(x) & -TakedCPSC223)) -> CanTakeCPSC323.", "all x y.((Student(x) & Student(y) & TakenCPSC201(x,y) & -TakenCPSC223(y,x)) -> CanTakeCPSC323.", "all x.((Student(x) & TakesCPSC201(x) & -TakesCPSC223(x)) -> CanTakeCPSC323(x))", "(all x.((Student(x) & TakedCPSC201(x)) -> CanTakeCPSC323.))", "all x.((Student(x) & tookCPSC201(x) & -TakeCPSC223)) -> CanTakeCPSC323.", "all x.((Student(x) & TakedCPSC201(x) & -TakedCPSC223)) -> CanTakeCPSC323.", "all x.((Student(x) & TakenCPSC201(x) & -TakenCPSC223)) -> CanTakeCPSC323(x))", "all x.((Student(x) & TakesCPSC201(x) & -TakesCPSC223(x)) -> CanTakeCPSC323."]}
{"id": "folio_train_1182", "nl": "A student cannot take Intro Geology.", "fol": "-EligibleToTake(Introgeology)", "prediction": ["all x.(Student(x) -> -TakesIntroGeology(x))", "(-TakesIntroGeology(Student))", "all x.(Student(x) -> -TakesIntroGeology(x))", "all x y.((Student(x) & IntroGeology(y)) -> -CanTake(x,y))", "all x.(Student(x) -> -IntroGeology(x))", "-(Student(Student(Student) & IntroGeology(Student))", "all x y.((Student(x) & IntroGeology(y)) -> -CanTake(x,y))", "all x.(Student(x) -> -TakesIntroGeology(x))", "all x.(Student(x) -> -IntroGeology(x))", "all x.(Student(x) -> -TakesIntroGeology(x))", "all x.(Student(x) -> -IntroGeology(x))", "exists x.(Student(x) & CannotTakeIntroGeology(x))", "all x.(Student(x) -> -TakesIntroGeology(x))", "all x.(Student(x) -> -IntroGeology(x))", "All x.(Student(x) -> CannotTakeIntroGeology(x))", "exists x.(Student(x) & -CanTakeIntrageology(x))"]}
{"id": "folio_train_1183", "nl": "A heptalogy, is a compound literary or narrative work that is made up of seven distinct works.", "fol": "all x.(ConsistsOfSevenDistinctWorks(x) -> IsHeptalogy(x))", "prediction": ["all x.(Heptalogy(x) -> (CompoundLiteraryOrNarrativeWork(x) & MadeUpOfSevenDistinctWorks(x)))", "all x y.((Heptalogy(x) & CompoundLiteraryOrNarrativeWork(y)) -> (MadeUpOfSevenDistinctWorks(x,y)))", "all x.(Heptalogy(x) -> (CompoundLiteraryOrNarrativeWork(x) & MadeUpOfSevenDistinctWorks(x)))", "(CompoundLiteraryOrNarrativeWork(h) & MadeUpOfSevenDistinctWorks(h))", "all x.(Heptalogy(x) -> (CompoundLiteraryOrNarrativeWork(x) & MadeUpOfSevenDistinctWorks(x)))", "all x y z.(Heptalogy(x) -> (CompoundLiteraryOrNarrativeWork(y) & ComposedOfSevenDistinctWorks(z) & MadeUpOf(x,y,z)))", "all x y.((Heptalogy(x) & LiteraryOrNarrativeWork(y)) -> (Compound(x,y) & MadeUpOfSevenDistinctWorks(x)))", "all x y.((Heptalogy(x) & CompoundLiteraryOrNarrativeWork(y)) -> (MadeUpOfSevenDistinctWorks(x)))", "all x.(Hoptalogy(x) -> (CompoundLiteraryOrNarrativeWork(x) & MadeUpOfSevenDistinctWorks(x)))", "all x.(Heptalogy(x) -> (CompoundLiteraryOrNarrativeWork(x) & SevenDistinctWorks(x)))", "all x.(Heptalogy(x) -> (CompoundLiteraryOrNarrativeWork(x) & MadeUpOfSevenDistinctWorks(x)))", "all x.(Heptalogy(x) -> (CompoundLiteraryOrNarrativeWork(x) & SevenDistinctWorks(x)))", "all x.(Hoptalogy(x) -> (CompoundLiteraryOrNarrativeWork(x) & MadeUpOfSevenDistinctWorks(x)))", "exists x.(Heptalogy(x) & CompoundLiteraryOrNarrativeWork(x) & MadeUpOfSevenDistinctWorks(x))", "all x.(Heptalogy(x) -> (CompoundLiteraryOrNarrativeWork(x) & MadeUpOfSevenDistinctWorks(x)))", "all x.(Heptalogy(x) -> (CompoundLiteraryOrNarrativeWork(x) & MakesSevenDistinctWorks(x)))"]}
{"id": "folio_train_1184", "nl": "The Harry Potter series consists of 7 distinct works.", "fol": "ConsistsOfSevenDistinctWorks(HarryPotter)", "prediction": ["all x.(HarryPotter(x) -> ConsistsOfSevenDistinctWorks(x))", "all x.(HarryPotterSeries(x) -> SevenDistinctWorks(x))", "(HarrisPotterSeries(Harry Potter) & 7DistinctWorks(Harry Potter))", "all x y.((HarryPotter(x) & Works(y)) -> ConsistsOf(x,y))", "(SevenDistinctWorks(HarryPotterSeries) -> ConsistsOf(HarryPotterSeries))", "(DistinctWorks(HarryPotterSeries) & 7Works(HarryPotterSeries))", "the Harry Potter series consists of 7 distinctworks.", "all x.(HarryPotter(x) -> SevenDistinctWorks(x))", "all x.(HarryPotterSeries(x) -> ConsistsOfSevenDistinctWorks(x))", "all x y.((HarryPotterSeries(x) & Works(y)) -> ConsistsOf(x,y))", "(HarrisPotterSeries(HarryPotter) -> SevenDistinctWorks(HarryPotter))", "all x y.((HarryPotter(x) & Work(y)) -> ConsistsOf(x,y))", "All x.(HarryPotter(x) -> SevenDistinctWorks(x))", "All x.(HarrisPotter(x) -> SevenDistinctWorks(x))", "All x.(HarryPotterSeries(x) -> SevenDistinctWorks(x))", "All x.(HarryPotter(x) -> 7DistinctWorks(x))"]}
{"id": "folio_train_1185", "nl": "The Chronicles of Narnia consists of 7 distinct works.", "fol": "ConsistsOfSevenDistinctWorks(ChroniclesofNarnia)", "prediction": ["All x.(ChroniclesOfNarnia(x) -> ConsistsOfSevenDistinctWorks(x))", "The ChroniclesOfNarnia (CyclopediasOfNarnia) - 7DistinctWorks(x))", "(ConsistsOfSevenDistinctWorks(ChroniclesOfNarnia)", "All x y.((ChroniclesOfNarnia(x) & Work(y)) -> ConsistsOf(x,y))", "all x.((ChroniclesOfNarnia(x) & 7DistinctWorks(x)) -> ConsistsOf(x,y))", "(ChroniclesOfNarnia(x) & ConsistsOfSevenDistinctWorks(x))", "The ChroniclesOfNarnia(x) -> ConsistsOfSevenDistinctWorks(x))", "The ChroniclesOfNarnia consists of 7 distinctworks.", "(CyclopediasOfNarnia(x) & ConsistsOfSevenDistinctWorks(x))", "all x.(ChroniclesOfNarnia(x) -> ConsistsOfSevenDistinctWorks(x))", "All x.(ChroniclesOfNarnia(x) -> SevenDistinctWorks(x))", "(ConsistsOfSevenDistinctWorks(ChroniclesOfNarnia)", "The ChroniclesOfNarnia (ConsistsOfSevenDistinctWorks(x))", "The ChroniclesOfNarnia(x) -> SevenDistinctWorks(x))", "all x.(ChroniclesOfNarnia(x) -> ConsistsOfSevenDistinctWorks(x))", "The ChroniclesOfNarnia consists of 7 distinct works."]}
{"id": "folio_train_1186", "nl": "The Harry Potter series of books is a heptalogy.", "fol": "IsHeptalogy(HarryPotter)", "prediction": ["all x.(HarryPotterBook(x) -> Heptalogy(x))", "all x.(HarryPotterBooks(x) -> Heptalogy(x))", "all x y.((HarryPotterBook(x) & HarryPotterBook(y)) -> Heptalogy(x))", "all x.((HarryPotterBooks(x) & Heptalogy(x)) -> Heptalogy(x))", "all x.(HarryPotter(x) -> Heptalogy(x))", "all x.((HarryPotterBookSeries(x) & Heptalogy(x)) -> HasBooks(x))", "(Heptalogy(HarryPotterBooks)", "all x y.((HarryPotterBook(x) & HarryPotterBook(y)) -> Heptalogy(x))", "all x.(HarryPotterBookSeries(x) -> Heptalogy(x))", "all x y.((HarryPotterBookSeries(x) & HarryPotterBook(y)) -> Heptalogy(x))", "(Heptalogy(HarryPotter) & SeriesOfBooks(HarryPotter))", "all x y.((HarryPotterBook(x) & Book(y)) -> Heptalogy(x))", "(Heptalogy(HarryPotterBooks)", "all x.(HarryPotter(x) -> Heptalogy(x))", "all x.(HydroPotter(x) -> Heptalogy(x))", "All x.(HarryPotterBooks(x) -> Heptalogy(x))"]}
{"id": "folio_train_1187", "nl": "The Chronicles of Narnia series of books is not a heptalogy.", "fol": "-IsHeptalogy(ChroniclesofNarnia)", "prediction": ["all x.((Books(x) & ChroniclesOfNarnia(x)) -> -Heptalogy(x))", "all x.((Book(x) & ChroniclesOfNarnia(x)) -> -Heptalogy(x))", "(Heptalogy(ChroniclesOfNarnia) & -Heptalogy(ChroniclesOfNarnia))", "(-Heptalogy(ChroniclesOfNarnia))", "The ChroniclesOfNarnia Series of Books is -Heptalogy(x)", "all x.(ChroniclesOfNarnia(x) -> -Heptalogy(x))", "all x y.((Book(x) & ChroniclesOfNarnia(x)) -> -Heptalogy(x))", "all x.((Books(x) & ChroniclesOfNarnia(x)) -> -Heptalogy(x))", "the ChroniclesOfNarnia series of books.", "(Heptalogy(ChroniclesOfNarnia) & -Heptalogy(ChroniclesOfNarnia))", "(-Heptalogy(ChroniclesOfNarnia))", "all x.(ChroniclesOfNarnia(x) -> -Heptalogy(x))", "-Heptalogy(ChroniclesOfNarniaBooks)", "((BooksInChroniclesOfNarnia(x)) | Heptalogy(x)))", "All x.(Books(x) -> -Heptalogy(x))", "All x.(ChroniclesOfNarnia(x) -> -Heptalogy(x))"]}
{"id": "folio_train_1188", "nl": "The Lord of Rings is a heptalogy.", "fol": "IsHeptalogy(LordOfRings)", "prediction": ["all x.(LordOfRings(x) -> Heptalogy(x))", "(Heptalogy(LordOfRings)", "The LordOfRings(LordOfRings) -> Heptalogy(LordOfRings))", "(LordOfRings(LordOfRings) -> Heptalogy(LordOfRings))", "LordOfRings(LordOfRings)", "all x.(LordOfRings(x) -> Heptalogy(x))", "(Heptalogy(LordOfRings)", "The LordOfRings(LordOfRings) is a Heptalogy(LordOfRings)", "All x.(LordOfRings(x) -> Heptalogy(x))", "(Heptalogy(LordOfRings)", "The LordOfRings(LordOfRings) -> Heptalogy(LordOfRings))", "all x.(LordOfRings(x) -> Heptalogy(x))", "All x.(LordOfRings(x) -> Hyptalogy(x))", "(Heptalogy(LordOfRings)", "All x.(LordOfRings(x) -> Hyptalogy(x))", "all x.(LordOfRings(x) -> Heptalogy(x))"]}
{"id": "folio_train_1189", "nl": "All people who attend Renaissance fairs regularly enjoy dressing up in old-fashioned and historical period clothing.", "fol": "all x.(AttendRenaissanceFairs(x) -> EnjoyDressingUp(x))", "prediction": ["all x.((Person(x) & AttendsRenaissanceFairs(x)) -> EnjoysShavingInOldOdiodPeriodClothing(x))", "all x y.((Person(x) & AttendsRenaissanceFairs(x) & Attends(x,y)) -> EnjoysSewingInOldOdiodPeriodClothing(x))", "all x.(AttendsRenaissanceFairs(x) -> EnjoysShavingInOldOdiodPeriodClothing(x))", "all x.((Person(x) & AttendsRenaissanceFairs(x)) -> EnjoysSewingInOldDecoratedAndHistoricalPeriodClothing(x))", "all x y.((Person(x) & AttendsRenaissanceFair(x) & AttendsFair(y)) -> EnjoysSewingInOldOdiodPeriodClothing(x,y))", "all x y.((AttendsRenaissanceFair(x) & Attends(x,y)) -> EnjoysShavingInOldOdioceanAndHistoricalClothing(y))", "all x.((AttendsRenaissanceFairs(x) & Attends(x,Renaissance)) -> EnjoysShavingInOldDecoratedAndHistoricalPeriodClothing(x))", "all x.(AttendsRenaissanceFairs(x) -> EnjoysSewingInOldDecoratedAndHistoricalPeriodClothing(x))", "all x y z.((Person(x) & RenaissanceFair(y) & Attends(x,y)) -> (EnjoysSewingInOldDecoratedAndHistoricalPeriodClothing(x) & Attends(x,z)))", "all x.((Person(x) & AttendsRestorationFairs(x)) -> EnjoysShavingInOldDecoratedAndHistoricalPeriodClothing(x))", "all x.((Person(x) & AttendsRenaissanceFairs(x)) -> EnjoysStagingInOldOdiodPeriodClothing(x))", "all x y.((Person(x) & AttendsRenaissanceFair(x)) -> EnjoysShavingInOldDecoratedAndHistoricalPeriodClothing(x))", "all x.(AttendsRestorationFairs(x) -> EnjoysShavingInOldDecoratedAndHistoricalPeriodClothing(x))", "all x.((Person(x) & AttendsRenaissanceFairs(x)) -> EnjoysScoffingInOldOdiodPeriodClothing(x))", "all x.(AttendsRenaissanceFairs(x) -> EnjoysScoffingInOldOdioceanAndHistoricalClothing(x))", "all x y.((Person(x) & AttendsRenaissanceFair(x) & Attends(x,y)) -> EnjoysStagingInOldOdiodPeriodClothing(x))"]}
{"id": "folio_train_1190", "nl": "If people are fascinated by the history of the Renaissance and other past eras, then they attend Renaissance fairs regularly.", "fol": "all x.(FascinatedByRenaissanceHistory(x) -> AttendRenaissanceFairs(x))", "prediction": ["all x.((FascinatedByRenaissance(x) & FascinatedByPastEras(x)) -> AttendsRenaissanceFairsRegularly(x))", "all x.((Person(x) & FascinatedByRenaissance(x) & FascinatedByPastEras(x)) -> AttendsRenaissanceFairsRegularly(x))", "all x.(FascinatedByRenaissanceAndPastEras(x) -> AttendsRenaissanceFairsRegularly(x))", "all x.((People(x) & FascinatedByRenaissance(x) & FascinatedByPastEras(x)) -> AttendsRenaissanceFairsRegularly(x))", "all x y.((Person(x) & FascinatedByReformation(x) & PastEra(y)) -> AttendsRenaissanceFairsRegularly(x))", "(FascinatedByRenaissance(p) & FascinatedByPastEras(p)) -> AttendsRenaissanceFairs(p))", "all x.(FascinatedByReformationAndPastEras(x) -> AttendsRenaissanceFairsRegularly(x))", "all x y.((Person(x) & FascinatedByRenaissance(x) & PastEra(y)) -> AttendsRenaissanceFairsRegularly(x))", "all x.((FascinatedByReformation(x) & FascinatedByPastEras(x)) -> AttendsRenaissanceFairsRegularly(x))", "all x y.((People(x) & FascinatedByReformation(x) & PastEra(y)) -> AttendsRenaissanceFairsRegularly(x))", "all x.((Person(x) & FascinatedByReformation(x) & FascinatedByPastEras(x)) -> AttendsRenaissanceFairsRegularly(x))", "all x y z.((Person(x) & Renaissance(y) & PastEra(z) & FascinatedBy(x,y,z)) -> AttendsRenaissanceFairs(x))", "all x.((People(x) & FascinatedByReformation(x) & FascinatedByPastEras(x)) -> AttendsRenaissanceFairsRegularly(x))", "all x.(FascinatedByRenaissanceAndPastEras(x) -> AttendsRenaissanceFairsRegularly(x))", "all x.(FascinatedByRestorationAndPastEras(x) -> AttendsRenaissanceFairsRegularly(x))", "all x y.((Person(x) & FascinatedByReformation(x) & PastEra(y)) -> AttendsReformationFairsRegularly(x))"]}
{"id": "folio_train_1191", "nl": "People are either fascinated by the history of the Renaissance and other past eras, or are not nostalgic academics who enjoy learning.", "fol": "all x.(FascinatedByRenaissanceHistory(x) | NotNostalgicAcademics(x))", "prediction": ["all x.(People(x) -> ((FascinatedByReformation(x) & FascinatedByPastEras(x)) | -NostalgicAcademic(x) & EnjoysLearning(x)))", "all x.((Person(x) & FascinatedByReformation(x)) | -NostalgicAcademic(x) & EnjoysLearning(x))", "all x.(Person(x) -> ((FascinatedByRenaissance(x) & FascinatedByPastEras(x)) | -NostalgicAcademic(x) & EnjoysLearning(x)))", "(all x.(FascinatedByReformation(x) | FascinatedByPastEras(x))) & (-NostalgicAcademic(x) & EnjoysLearning(x)))", "(FascinatedByReformationAndPastEras(Person) | NostalgicAcademic(Person)))", "all x y.((Person(x) & Renaissance(y) & PastEra(y)) -> (FascinatedBy(x,y) | -NostalgicAcademic(x) & EnjoysLearning(x)))", "all x.((Person(x) & (FascinatedByReformation(x) | FascinatedByPastEras(x))) | -NostalgicAcademic(x) & EnjoysLearning(x)))", "(FascinatedByRenaissanceAndPastEras(Person) | NostalgicAcademic(Person)))", "all x.((People(x) & FascinatedByReformation(x) & FascinatedByPastEras(x)) | -NostalgicAcademic(x) & EnjoysLearning(x))", "all x.(People(x) -> (FascinatedByRenaissance(x) | NostalgicAcademic(x) & EnjoysLearning(x)))", "all x y.((Person(x) & Renaissance(y)) -> (FascinatedBy(x,y) | NostalgicAcademic(x) & EnjoysLearning(x)))", "exists x.(Person(x) & ((FascinatedByReformation(x) & FascinatedByPastEras(x)) | -NostalgicAcademic(x) & EnjoysLearning(x)))", "all x y.((Person(x) & Renaissance(y) & PastEras(y)) -> (FascinatedBy(x,y) | NostalgicAcademic(x) & EnjoysLearning(x)))", "exists x.(Person(x) & ((FascinatedByRevivension(x) & FascinatedByPastEras(x)) | -NostalgicAcademic(x) & EnjoysLearning(x)))", "exists x.(Person(x) & ((FascinatedByRenaissance(x) & FascinatedByPastEras(x)) | -NostalgicAcademic(x) & EnjoysLearning(x)))", "all x y.((Person(x) & FascinatedByRenaissance(x) & PastEras(y)) | (-NostalgicAcademic(x) & EnjoysLearning(x))))"]}
{"id": "folio_train_1192", "nl": "If people are focused on the future and industry professions, then they are not nostalgic academics who enjoy learning.", "fol": "all x.(FocusedOnIndustry(x) -> NotNostalgicAcademics(x))", "prediction": ["all x.((People(x) & FocusedOnFuture(x) & FocusedOnIndustryProfessions(x)) -> -NostalgicAcademics(x) & EnjoyLearning(x))", "all x.((Person(x) & FocusedOnFuture(x) & FocusedOnIndustryProfessions(x)) -> -NostalgicAcademic(x) & EnjoysLearning(x))", "all x.(FocusedOnFutureAndIndustryProfessions(x) -> -NostalgicAcademics(x))", "all x.((FocusedOnFuture(x) & FocusedOnIndustryProfessions(x)) -> -NostalgicAcademics(x) & EnjoysLearning(x))", "(FocusedOnFutureAndIndustryProfessions(Person) -> -NostalgicAcademics(Person) & EnjoysLearning(Person))", "all x y.((Person(x) & FocusedOnFuture(x) & FocusedOnIndustryProfessions(x)) -> -NostalgicAcademic(x) & EnjoysLearning(x))", "-(FocusedOnFutureAndIndustryProfessions(Person) & -NostalgicAcademic(Person) & EnjoysLearning(Person))", "all x.((Person(x) & FocusedOnFutureAndIndustryProfessions(x)) -> -NostalgicAcademic(x) & EnjoysLearning(x))", "all x y.((People(x) & FocusedOnFuture(x) & FocusedOnIndustryProfessions(x)) -> -NostalgicAcademics(y) & EnjoyLearning(y))", "all x.((People(x) & FocusedOnFuture(x) & FocusedOnIndustryProfessions(x)) -> -NostalgicAcademics(x) & EnjoyLearning(x))", "all x.(FocusedOnFutureAndIndustryProfessions(x) -> -NostalgicAcademics(x))", "all x.((People(x) & FocusedOnFuture(x) & FocusedOnIndustriellProfessions(x)) -> -NostalgicAcademics(x) & EnjoyLearning(x))", "all x.((FocusedOnFuture(x) & FocusedOnIndustryProfessions(x)) -> -NostalgicAcademics(x) & EnjoyLearning(x))", "all x.(FocusedOnFutureAndIndustryProfessions(x) -> -NostalgicAcademicsEnjoyLearning(x))", "all x.(FocusedOnFutureAndIndustrieProfessions(x) -> -NostalgicAcademics(x))", "all x.(FocusedOnFutureAndIndustryProfessions(x) -> -NostalgicAcademics(x))"]}
{"id": "folio_train_1193", "nl": "If people are historical professors who are passionate about their job and subject, then they are nostalgic academics who enjoy learning.", "fol": "all x.(HistoricalProfessor(x) -> -NotNostalgicAcademics(x))", "prediction": ["all x.((Person(x) & HistoricalProfessor(x) & PassionateAboutJobAndSubject(x)) -> NostalgicAcademic(x))", "all x.((People(x) & HistoricalProfessor(x) & PassionateAboutJobAndSubject(x)) -> NostalgicAcademic(x) & EnjoysLearning(x))", "all x y.((Person(x) & HistoricalProfessor(x) & PassionateAboutJobAndSubject(x)) -> NostalgicAcademic(x) & EnjoysLearning(x))", "all x.((Person(x) & HistoricalProfessor(x) & PassionateAboutJob(x) & PassionateAboutSubject(x)) -> NostalgicAcademic(x) & EnjoysLearning(x))", "all x.((Person(x) & HistoricalProfessor(x) & PassionateAboutJobAndSubject(x)) -> NostalgicAcademic(x))", "all x.((HistoricalProfessor(x) & PassionateAboutJobAndSubject(x)) -> NostalgicAcademic(x))", "all x.((Personal(x) & HistoricalProfessor(x) & PassionateAboutJobAndSubject(x)) -> NostalgicAcademic(x) & EnjoysLearning(x))", "all x.((People(x) & HistoricalProfessor(x) & PassionateAboutJobAndSubject(x)) -> NostalgicAcademic(x) & EnjoyLearning(x))", "all x y.((Person(x) & HistoricalProfessor(x) & PassionateAboutJobAndSubject(x)) -> NostalgicAcademic(x) & EnjoysLearning(x))", "all x.((Person(x) & HistoricalProfessor(x) & PassionateAboutJob(x) & PassionateAboutSubject(x)) -> NostalgicAcademic(x) & EnjoysLearning(x))", "all x.((Person(x) & HistoricalProfessor(x) & PassionateAboutJobAndSubject(x)) -> NostalgicAcademic(x))", "all x.((Person(x) & HistoricalProfessor(x) & PassionateOnJob(x) & PassionateOnSubject(x)) -> NostalgicAcademic(x) & EnjoysLearning(x))", "all x y.((Person(x) & HistoricalProfessor(x) & PassionateAboutJobAndSubject(x)) -> NostalgicAcademic(x))", "all x.(Person(x) -> (HistoricalProfessor(x) & PassionateAboutJobAndSubject(x) & NostalgicAcademic(x) & EnjoysLearning(x)))", "all x.((People(x) & HistoricalProfessor(x) & PassionateAboutJobAndSubject(x)) -> NostalgicAcademic(x))", "all x.((Person(x) & HistoricalProfessor(x) & PassionateAboutJobAndSubject(x)) -> NostalgicAcademic(x) & EnjoysLearning(x))"]}
{"id": "folio_train_1194", "nl": "If Clyde is not focused on the future and industry professions, then he is neither focused on the future and industry professions nor enjoys dressing up in old-fashioned and historical period clothing.", "fol": "(-FocusedOnIndustry(Clyde) -> -(FocusedOnIndustry(Clyde) | EnjoyDressingUp(Clyde)))", "prediction": ["all x.((Clyde(x) & -FocusedOnFutureAndIndustryProfessions(x)) -> (-FocusedOnFutureAndIndustryProfessionals(x) & -EnjoysSewingInOldDecoratedAndHistoricalPeriodClothing(x)))", "(-FocusedOnFutureAndIndustryProfessions(Clyde) -> (-FocusedOnFutureAndIndustryProfessions(Clyde) & -EnjoysSewingInOldOddfashionedAndHistoricalPeriodClothing(Clyde)))", "all x.((Clyde(x) & -FocusedOnFutureAndIndustriellProfessions(x)) -> (-FocusedOnFutureAndIndustriellProfessionals(x) & -EnjoysSewingInOldDecoratedAndHistoricalPeriodClothing(x)))", "(-FocusedOnFutureAndIndustriellProfessions(Clyde) -> (-FocusedOnFutureAndIndustriellProfessionals(Clyde) & -EnjoysOldDecoratedAndHistoricalPeriodClothing(Clyde)))", "all x y.((Clyde(x) & -FocusedOnFutureAndIndustryProfessions(x)) -> (-FocusedOnFutureAndIndustryProfessionals(x) & -EnjoysSewingInOldOddfashionedAndHistoricalPeriodClothing(y)))", "all x.(FocusedOnFutureAndIndustryProfessions(x) -> (-FocusedOnFutureAndIndustryProfessionals(x) & -EnjoysSewingInOldOddfashionedAndHistoricalPeriodClothing(x)))", "-(FocusedOnFutureAndIndustryProfessions(Clyde) & -FocusedOnFutureAndIndustryProfessionals(Clyde) & -EnjoysSewingInOldDecoratedAndHistoricalPeriodClothing(Clyde))", "all x.((Clyde(x) & -FocusedOnFutureAndIndustryProfessions(x)) -> (-FocusedOnFutureAndIndustryProfessionals(x) & -EnjoysScoffingInOldDecoratedAndHistoricalPeriodClothing(x)))", "(-FocusedOnFutureAndIndustryProfessions(Clyde) -> (-FocusedOnFutureAndIndustryProfessions(Clyde) & -EnjoysOldDecoratedAndHistoricalPeriodClothing(Clyde)))", "all x.(FocusedOnFutureAndIndustriellProfessions(x) -> ((Clyde(x) & -FocusedOnFutureAndIndustriellProfessionals(x)) | (Clyde(x) & OldDecoratedAndHistoricalPeriodClothing(x))))", "all x.((Clyde(x) & -FocusedOnFutureProfessionals(x) & -FocusedOnFutureProfessionals(x) & -FocusedOnIndustryProfessionals(x)) -> -EnjoysSewingInOldDecoratedAndHistoricalPeriodClothing(x))", "all x.((Clyde(x) & -FocusedOnFutureAndIndustriellProfessions(x)) -> (-FocusedOnFutureAndIndustriellProfessionals(x) & -EnjoysOldDecoratedAndHistoricalPeriodClothing(x)))", "all x.((Clyde(x) & FocusedOnFutureAndIndustryProfessions(x)) -> (-FocusedOnFutureAndIndustryProfessionals(x) & -EnjoysSewingInOldDecoratedAndHistoricalPeriodClothing(x)))", "all x y.((Clyde(x) & -FocusedOnFutureAndIndustryProfessions(x)) -> (-FocusedOnFutureAndIndustryProfessionals(x) & -EnjoysScoffingInOldOldOldPeriodClothing(y)))", "all x.((Clyde(x) & -FocusedOnFutureAndIndustryProfessions(x)) -> (-FocusedOnFutureAndIndustryProfessions(x) & -EnjoysOldDecoratedAndHistoricalPeriodClothing(x)))", "all x.((Clyde(x) & -FocusedOnFutureAndIndustriellProfessions(x)) -> (-FocusedOnFutureAndIndustriellProfessionals(x) & -EnjoysScoffingInOldDecoratedAndHistoricalPeriodClothing(x)))"]}
{"id": "folio_train_1195", "nl": "Clyde attends Renaissance fairs regularly.", "fol": "AttendRenaissanceFairs(Clyde)", "prediction": ["Clyde attendsRenaissanceFairsRegularly(Clyde)", "all x.(Clyde(x) -> AttendsRenaissanceFairsRegularly(x))", "all x y.((Clyde(x) & RenaissanceFair(y)) -> AttendsRegularly(x,y))", "(AttendsRenaissanceFairsRegularly(Clyde,Renaissance))", "all x.((Clyde(x) & RenaissanceFairs(x)) -> AttendsRegularly(x))", "all x.(Clyde(x) -> AttendsRepublicanFairs(x))", "Clyde attendsRenaissanceFairsRegularly(Clyde)", "(AttendsRenaissanceFairs(Clyde) & Regularly(Clyde))", "Clyde attends RenaissanceFairsRegularly(Clyde)", "all x y.((Clyde(x) & RenaissanceFair(y)) -> AttendsRegularly(x,y))", "Clyde attendsRepublicanFairsRegularly(Clyde)", "Clyde attendsRenaissanceFairsRegularly(Clyde)", "All x.(Clyde(x) -> AttendsRenaissanceFairsRegularly(x))", "Clyde attendsRenaissanceFairsRegularly.", "Clyde attends RenaissanceFairsRegularly.", "Clyde attendsRenaissanceFairsRegularly(Clyde,Fairs))"]}
{"id": "folio_train_1196", "nl": "Clyde is a history professor who is passionate about his job and subject.", "fol": "HistoricalProfessor(Clyde)", "prediction": ["all x.((Professor(x) & PassionateAboutJobAndSubject(x)) -> Clyde(x))", "Clyde is a history professor who is passionate about his job and subject.", "(HistoryProfessor(Clyde) & PassionateAboutJobAndSubject(Clyde))", "all x.((Professor(x) & PassionateAboutJob(x) & PassionateAboutSubject(x)) -> Clyde(x))", "(Positive(Clyde,HistoryProfessor) & PassionateAboutJobAndSubject(Clyde,HistoryProfessor))", "all x.((HistoryProfessor(x) & PassionateAboutJobAndSubject(x)) -> Clyde(x))", "all x y.((Professor(x) & Clyde(y)) -> (PassionateAboutJob(y) & PassionateAboutSubject(y)))", "Clyde is a HistoryProfessor(Clyde) & PassionateAboutJobAndSubject(Clyde))", "all x.(Clyde(x) -> (HistoryProfessor(x) & PassionateAboutJobAndSubject(x)))", "Clyde is a history professor who is passionate about his job and subject.", "(HistoryProfessor(Clyde) & PassionateAboutJobAndSubject(Clyde))", "all x.((Professor(x) & PassionateAboutHistory(x)) -> Clyde(x))", "Clyde is a history professor and passionate about his job and subject.", "(PastyInHistory(Clyde) & PassionateInHistory(Clyde))", "(HistoryProfessor(Clyde) & PassionateAboutJobAndSubject(Clyde))", "Clyde is a history professor who is passionate about his job and subject."]}
{"id": "folio_train_1197", "nl": "Clyde is a history professor who is passionate about his job and subject, or is not a nostalgic academic who enjoys learning.", "fol": "(HistoricalProfessor(Clyde) | NotNostalgicAcademics(Clyde))", "prediction": ["all x.((HistoryProfessor(x) & (PositiveAboutJob(x) | NostalgicAcademic(x))) -> EnjoysLearning(x))", "((HistoryProfessor(Clyde) & PassionateAboutJobAndSubject(Clyde)) | (NostalgicAcademic(Clyde) & EnjoysLearning(Clyde))))", "(-NostalgicAcademic(Clyde) & ((HistoryProfessor(Clyde) & PassionateAboutJob(Clyde) & PassionateAboutSubject(Clyde)) | (-HistoryProfessor(Clyde) & NostalgicAcademic(Clyde) & EnjoysLearning(Clyde))))", "(all x.(Clyde(x) -> (HistoryProfessor(x) & PassionateAboutJobAndSubject(x)) | (-NostalgicAcademic(x) & EnjoysLearning(x))))", "((HistoryProfessor(Clyde) & PassionateAboutJob(Clyde) & PassionateAboutSubject(Clyde)) | (NostalgicAcademic(Clyde) & EnjoysLearning(Clyde))))", "(PositiveAboutJobAndSubject(Clyde) | NostalgicAcademic(Clyde)))", "all x.(Clyde(x) -> ((HistoryProfessor(x) & PassionateAboutJob(x) & PassionateAboutSubject(x)) | (-NostalgicAcademic(x) & EnjoysLearning(x))))", "all x y.((HistoryProfessor(x) & Clyde(y)) -> ((PastyAboutJob(x,y) & PassionateAboutSubject(x,y)) | (-NostalgicAcademic(y) & EnjoysLearning(y))))", "all x.((HistoryProfessor(x) & (PassionateAboutJob(x) | NostalgicAcademic(x))) -> EnjoysLearning(x))", "all x.((HistoryProfessor(x) & (PositiveAboutJob(x) | NostalgicAcademic(x))) -> EnjoysLearning(x))", "all x.(Clyde(x) -> ((HistoryProfessor(x) & PassionateAboutJobAndSubject(x)) | (NostalgicAcademic(x) & EnjoysLearning(x))))", "((HistoryProfessor(Clyde) & PassionateAboutJobAndSubject(Clyde)) | (NostalgicAcademic(Clyde) & EnjoysLearning(Clyde))))", "all x.((HistoryProfessor(x) & PassionateAboutJobAndSubject(x)) | -NostalgicAcademic(x) & EnjoysLearning(x))", "(all x.(Clyde(x) -> (HistoryProfessor(x) & (PositiveAboutJob(x) | NostalgicAcademic(x)) & EnjoysLearning(x))))", "exists x.(Clyde(x) & ((HistoryProfessor(x) & PassionateAboutJob(x) & PassionateAboutSubject(x)) | -NostalgicAcademic(x) & EnjoysLearning(x)))", "exists x.(Clyde(x) & ((HistoryProfessor(x) & PassionateAboutJob(x) & PassionateAboutSubject(x)) | -NostalgicAcademic(x) & EnjoysLearning(x)))"]}
{"id": "folio_train_1198", "nl": "No sports cars are vehicles intended to be driven at moderate speeds.", "fol": "all x.(IsSportsCar(x) -> -IsIntendedForModerateSpeeds(x))", "prediction": ["-exists x.(SportsCar(x) & Vehicle(x) & DesignedForModerateSpeeds(x))", "all x.(SportsCar(x) -> -(IntendedForModerateSpeeds(x) & -IntendedForModerateSpeeds(x)))", "-exists x.(SportsCar(x) & -IntendedForModerateSpeeds(x))", "all x.(SportsCar(x) -> -IntendedForModerateSpeeds(x))", "all x.(SportsCar(x) -> -(Vehicle(x) & DesignedForModerateSpeeds(x)))", "all x.(SportCar(x) -> -(Vehicle(x) & DesignedForModerateSpeeds(x)))", "-all x.(SportsCar(x) -> -IntendedForModerateSpeeds(x))", "all x.(SportsCar(x) -> -(IntendedToBeDrivenAtModerateSpeeds(x) & -IntendedToBeDrivenAtModerateSpeeds(x)))", "-exists x.(SportsCar(x) & Vehicle(x) & DesignedForModerateSpeeds(x))", "(exists x.(SportsCar(x) & -DrivenAtModerateSpeeds(x)))", "-exists x.(SportCar(x) & Vehicle(x) & DesignedForModerateSpeeds(x))", "-exists x.(SportsCar(x) & -IntendedForModerateSpeeds(x))", "all x.(SportsCar(x) -> -IntendedForModerateSpeeds(x))", "all x.(SportsCar(x) -> (NonModerateSpeed(x) & -IntentionalFor(x,y)))", "-exists x.(SportsCar(x) & Vehicle(x) & DesignedForModerateSpeeds(x))", "-exists x.(SportsCar(x) & -IntendedToBeDrivenAtModerateSpeeds(x))"]}
{"id": "folio_train_1199", "nl": "All automobiles designed for family use are vehicles intended to be driven at moderate speeds.", "fol": "all x.(IsDesignedForFamilyUse(x) -> IsIntendedForModerateSpeeds(x))", "prediction": ["all x.((Automobile(x) & DesignedForFamilyUse(x)) -> IntendedForModerateSpeeds(x))", "all x.((Automobile(x) & DesignedForFamilyUse(x)) -> DesignedForModerateSpeeds(x))", "all x y.((Automobile(x) & DesignedForFamilyUse(x)) -> IntendedForModerateSpeeds(x,y))", "all x.((Automobile(x) & DesignedForFamilyUse(x)) -> IntendedToBeDrivenAtModerateSpeeds(x))", "all x y.((Automobile(x) & DesignedForFamilyUse(x)) -> (IntendedForModerateSpeeds(y)))", "all x.(DesignedForFamilyUse(x) -> Vehicle(x))", "all x.((Automobile(x) & DesignedForFamilyUse(x)) -> DesignedForModerateSpeeds(x))", "all x.((Automobile(x) & DesignedForFamilyUse(x)) -> IntendedToDriveAtModerateSpeeds(x))", "all x.(DesignedForFamilyUse(x) -> DesignedForModerateSpeeds(x))", "all x y.((Automobile(x) & DesignedForFamilyUse(x)) -> DesignedForModerateSpeeds(x,y))", "all x y.((Automobile(x) & DesignedForFamilyUse(x)) -> IntendedToBeDrivenAtModerateSpeeds(x))", "all x.((Automobile(x) & DesignedForFamilyUse(x)) -> DesignedForModerateSpeeds(x))", "all x.((Automobile(x) & DesignedForFamilyUse(x)) -> IntendedToBeDrivenAtModerateSpeeds(x))", "all x.((Cargo(x) & DesignedForFamilyUse(x)) -> Vehicle(x))", "all x.((Cargo(x) & DesignedForFamilyUse(x)) -> Vehicle(x))", "all x.((Automobile(x) & DesignedForFamilyUse(x)) -> IntendedToDriveAtModerateSpeeds(x))"]}
{"id": "folio_train_1200", "nl": "No sports cars are automobiles designed for family use.", "fol": "all x.(IsSportsCar(x) -> -IsDesignedForFamilyUse(x))", "prediction": ["-exists x.(SportsCar(x) & DesignedForFamilyUse(x))", "all x.(SportsCar(x) -> -DesignedForFamilyUse(x))", "-exists x.(SportsCar(x) & Automobile(x) & DesignedForFamilyUse(x))", "-exists x.(SportsCar(x) & DesignedForFamilyUse(x))", "all x.(SportsCar(x) -> -DesignedForFamilyUse(x))", "all x.(SportsCar(x) -> -(DesignedForFamilyUse(x) | DesignedForFamilyUse(x)))", "-exists x.(SportsCar(x) & -DesignedForFamilyUse(x))", "(exists x.(SportsCar(x) & -DesignedForFamilyUse(x)))", "all x.(SportsCar(x) -> -DesignedForFamilyUse(x))", "-all x.(SportsCar(x) -> DesignedForFamilyUse(x))", "-exists x.(SportsCar(x) & Automobile(x) & DesignedForFamilyUse(x))", "all x.(SportsCar(x) -> -DesignedForFamilyUse(x))", "-exists x.(SportsCar(x) & Automobile(x) & DesignedForFamilyUse(x))", "-exists x.(SportsCar(x) & Automotive(x) & DesignedForFamilyUse(x))", "-exists x.(SportsCar(x) & DesignedForFamilyUse(x))", "all x.(SportsCar(x) -> -DesignedForFamilyUse(x))"]}
{"id": "folio_train_1201", "nl": "If people work well in teams in their workplace, then they get along with all their colleagues at their work.", "fol": "all x.(WorksWellInTeams(x) -> GetsAlongWithColleagues(x))", "prediction": ["all x.(WorksWellInTeams(x) -> GetsTogetherWithColleagues(x))", "all x y.((Person(x) & Workplace(y) & WorksWellInTeams(x,y)) -> GetsTogetherWithColleagues(x,y))", "all x y.((Person(x) & WorkWellInTeams(x) & Workplace(y)) -> GetsTogetherWithColleagues(x,y))", "all x.((WorksWellInTeams(x) & Workplace(x)) -> GetsTogetherWithColleagues(x))", "all x y.((WorksWellInTeams(x) & Workplace(y) & WorksIn(x,y)) -> GetsTogetherWithColleagues(x,y))", "all x.(WorksWellInTeams(x) -> GetsCooperation(x))", "all x y z.((Person(x) & Workplace(y) & Workplace(z) & WorksWellInTeams(x,y)) -> GetsTogetherWithColleagues(x,z))", "all x.((Person(x) & WorksWellInTeams(x) & Workplace(x)) -> GetsTogetherWithColleagues(x))", "(WorksWellInTeamsInWorkplace(Person,Work) & GetsTogetherWithColleagues(Person,Work))", "all x.(WorkWellInTeams(x) -> GetTogetherWithColleagues(x))", "all x y.((People(x) & WorkWellInTeams(x,y) & Workplace(y)) -> GetsTogetherWithColleagues(x,y))", "all x.(WorksWellInTeams(x) -> GetsTogetherWithColleagues(x))", "all x y.((Person(x) & Workplace(y) & WorksWellInTeams(x,y)) -> GetsCooperation(x,y))", "all x y z.((Person(x) & Workplace(y) & Workplace(z) & WorksWellInTeams(x,y,z)) -> GetsTogetherWithColleagues(x,y,z))", "all x.((WorksWellInTeams(x) & WorksInWorkplace(x)) -> GetsTogetherWithColleagues(x))", "all x.(WorksWellInTeams(x) -> (GetsTogether(x) & WorksAtWork(x)))"]}
{"id": "folio_train_1202", "nl": "If people come to work every day with a positive attitude, then they work well in teams in their workplace.", "fol": "all x.(ComesToWorkWithPositiveAttitude(x) -> WorksWellInTeams(x))", "prediction": ["all x.((Person(x) & ComesToWorkEveryDayWithPositiveAttitude(x)) -> WorksWellInTeams(x))", "all x.((PositiveAttitude(x) & ComesToWorkEveryDay(x)) -> WorksWellInTeams(x))", "all x y.((Person(x) & ComesToWorkEveryDayWithPositiveAttitude(x) & WorkWellInTeams(y)) -> WorksWellInWorkplace(x,y))", "all x.((People(x) & ComesToWorkEveryDayWithPositiveAttitude(x)) -> WorksWellInTeams(x))", "all x y.((Person(x) & Day(y) & ComesToWork(x,y) & PositiveAttitude(x)) -> WorksWellInTeams(x))", "all x y z.((Person(x) & Day(y) & Team(z) & ComesToWorkWithPositiveAttitude(x,y)) -> WorksWellInWorkplace(x,z))", "all x.((PeopleComeToWorkEveryDayWithPositiveAttitude(x) & WorkWellInTeams(x)) -> PositiveAttitude(x))", "all x.((Person(x) & ComesToWorkEveryDayWithPositiveAttitude(x)) -> WorkWellInTeams(x))", "all x y.((PositiveAttitude(x) & ComesToWorkEveryDay(x,y)) -> WorksWellInTeams(x,y))", "all x y z.((Person(x) & Day(y) & Team(z) & ComesToWork(x,y) & PositiveAttitude(x,z)) -> WorksWellInWorkplace(x,z))", "all x y.((Person(x) & ComesToWorkEveryDayWithPositiveAttitude(x) & TeamWork(y)) -> WorksWellInWorkplace(x,y))", "all x.((PositiveAttitude(x) & ComesToWorkEveryDay(x)) -> WorksWellInTeams(x))", "all x.(PositiveAttitude(x) -> WorkWellInTeams(x))", "all x y.((People(x) & PositiveAttitude(x) & ComesToWorkEveryDay(x,y)) -> WorksWellInTeams(x,y))", "all x.((ComesToWorkEveryDayWithPositiveAttitude(x) & WorksWellInTeams(x)) -> WorksWellInWorkplace(x))", "all x.(PositiveAttitude(x) -> WorksWellInTeams(x))"]}
{"id": "folio_train_1203", "nl": "People either come into work every day with a positive attitude or are always tired every morning.", "fol": "(all x.((ComesToWorkWithPositiveAttitude(x) & -AlwaysTired(x)) | (-ComesToWorkWithPositiveAttitude(x) & AlwaysTired(x))) & all x.(AlwaysTired(x) -> ReceivesPromotionsFromBoss(x)))", "prediction": ["all x.((Person(x) & ComesIntoWorkEveryDayWithPositiveAttitude(x)) | TiredEveryMorning(x))", "all x y.((Person(x) & Work(y)) -> (ComesIntoWorkEveryDayWithPositiveAttitude(x,y) | TiredEveryMorning(x,y)))", "all x.(PositiveAttitude(x) | TiredEveryMorning(x))", "(all x.(ComesIntoWorkEveryDayWithPositiveAttitude(x) | TiredEveryMorning(x)))", "all x.((Person(x) & (ComesIntoWorkEveryDayWithPositiveAttitude(x) | TiredEveryMorning(x))) -> (PositiveAttitude(x) | TiredEveryMorning(x)))", "exists x.(Person(x) & ((ComesIntoWorkEveryDayWithPositiveAttitude(x) & -ComesIntoWorkEveryDay(x)) | (-ComesIntoWorkEveryDayWithPositiveAttitude(x) & ComesIntoWorkEveryDay(x)))))", "all x.((Person(x) & ComesIntoWorkEveryDayWithPositiveAttitude(x)) | TiredEveryMorning(x))", "all x y.((Person(x) & Work(y)) -> (ComesIntoWorkEveryDayWithPositiveAttitude(x,y) | TiredEveryMorning(x,y)))", "exists x.(Person(x) & (ComesIntoWorkEveryDayWithPositiveAttitude(x) | AlwaysTreatedEveryMorning(x)))", "(all x.(ComesIntoWorkEveryDayWithPositiveAttitude(x) | TiredEveryMorning(x)))", "exists x.(PositiveAttitude(x) | TiredEachMorning(x))", "all x y.((Person(x) & Day(y) & ComesIntoWorkWithPositiveAttitude(x,y)) | TiredEveryMorning(x))", "all x y.((Person(x) & Work(y) & PositiveAttitude(x,y)) | TiredEveryMorning(x))", "all x y.((Person(x) & Work(y)) -> (ComesInto(x,y) & PositiveAttitude(x) | TiredEveryMorning(x)))", "exists x.(Person(x) & (ComesIntoWorkEveryDayWithPositiveAttitude(x) | EverTenseEveryMorning(x)))", "exists x.(PositiveAttitude(x) | TiredEachMorning(x))"]}
{"id": "folio_train_1204", "nl": "If people get many promotions from their boss at work, then they receive negative feedback from teams at work.", "fol": "all x.(ReceivesPromotionsFromBoss(x) -> -ReceivesNegativeFeedback(x))", "prediction": ["all x y.((Person(x) & Boss(y) & ManyPromotions(x,y)) -> NegativeFeedback(x,y))", "all x y.((Person(x) & BossAtWork(y) & ManyPromotions(x,y)) -> NegativeFeedback(x,y))", "all x.((Person(x) & ManyPromotions(x)) -> NegativeFeedback(x))", "all x y z.((Person(x) & Boss(y) & Team(z) & ManyPromotions(x,y)) -> NegativeFeedback(x,z))", "all x.((Person(x) & ManyPromotions(x) & BossAtWork(x)) -> NegativeFeedback(x))", "all x.((Person(x) & BossAtWork(x) & ManyPromotions(x)) -> NegativeFeedback(x))", "all x y.((Person(x) & Boss(y) & ManyPromotions(x,y)) -> NegativeFeedback(x,y))", "all x.((Person(x) & ManyPromotionsFromBossAtWork(x)) -> NegativeFeedbackFromTeamsAtWork(x))", "(all x.((Person(x) & ManyPromotions(x)) -> NegativeFeedback(x)))", "all x y z.((Person(x) & Boss(y) & Team(z) & ManyPromotions(x,y)) -> NegativeFeedback(x,z))", "all x y.((Promotions(x) & BossAtWork(y) & Many(x,y)) -> NegativeFeedback(x,y))", "all x.((People(x) & ManyPromotions(x)) -> NegativeFeedbackFromTeams(x))", "all x y.((Person(x) & BossAtWork(y) & ManyPromotions(x,y)) -> NegativeFeedback(x,y))", "all x.((People(x) & ManyPromotions(x) & BossAtWork(x)) -> NegativeFeedback(x))", "all x.((Person(x) & BossAtWork(x) & ManyPromotions(x)) -> NegativeFeedbackFromTeamsAtWork(x))", "all x y z.((Person(x) & Boss(y) & Team(z) & ManyPromotions(x,y)) -> NegativeFeedback(x,z))"]}
{"id": "folio_train_1205", "nl": "Kat is either both a person who works well in teams in their workplace and is always tired every morning, or she neither works well in teams in their workplace nor is always tired every morning.", "fol": "((WorksWellInTeams(Kat) & AlwaysTired(Kat)) | (-WorksWellInTeams(Kat) & -AlwaysTired(Kat)))", "prediction": ["all x.(Kat(x) -> (WorksWellInTeams(x) & TiredEveryMorning(x)) | (-WorksWellInTeams(x) & TiredEveryMorning(x))))", "((Person(Kat) & WorksWellInTeams(Kat) & Workplace(Kat)) | (-WorksWellInTeams(Kat) & Workplace(Kat))))", "all x y.((Person(x) & Workplace(y) & WorksWellInTeams(x,y) & TiredEveryMorning(x)) | (-WorksWellInTeams(x,y) & TiredEveryMorning(x))))", "all x.(Kat(x) -> ((WorksWellInTeams(x) & TiredEveryMorning(x)) | (-WorksWellInTeams(x) & TiredEveryMorning(x)))))", "(all x.(Kat(x) -> (WorksWellInTeams(x) & TiredEveryMorning(x))) | (-WorksWellInTeams(x) & TiredEveryMorning(x))))", "((Person(Person) & WorksWellInTeams(Person) & -Workplace(Person)) | (-Workplace(Person) & WorksWellInTeams(Person) & Workplace(Person) & Workplace(Person))))", "(exists x.(Person(x) & WorksWellInTeams(x) & Workplace(x) & TiredEveryMorning(x)) | (-WorksWellInTeams(x) & Workplace(x) & Workplace(x) & Workplace(x) & Workplace(x) & Workplace(x) & Workplace(x) & Workplace(x) & Workplace(x) & Workplace(x)))", "((WorksWellInTeams(Kat) & Workplace(Kat)) | (-WorksWellInTeams(Kat) & Workplace(Kat))))", "all x.((Person(x) & WorksWellInTeams(x) & TiredEveryMorning(x)) | (-WorksWellInTeams(x) & TiredEveryMorning(x))))", "(WorksWellInTeams(Kat) & InWorkplace(Kat) & TiredEveryMorning(Kat)) | (-WorksWellInTeams(Kat) & TiredEveryMorning(Kat))))", "exists x.(Person(x) & ((WorksWellInTeams(x) & -WorksWellInTeams(x) & -WorksWellInTeams(x) & -WorksWellInTeams(x) & -WorksWellInTeams(x)) | (-WorksWellInTeams(x) & Workplace(x) & Workplace(x))))", "all x y.((Person(x) & Workplace(y) & WorksWellInTeams(x,y) & TiredEveryMorning(x)) | (-WorksWellInTeams(x,y) & TiredEveryMorning(x,y))))", "all x.(Kat(x) -> (WorksWellInTeams(x) & TiredEveryMorning(x)) | (-WorksWellInTeams(x) & TiredEveryMorning(x))))", "all x y.((Person(x) & Workplace(y) & WorksWell(x,y) & Workplace(y) & TiredEveryMorning(x)) | (-WorksWell(x,y) & Workplace(x,y))))", "(all x.(Kat(x) -> (WorksWellInTeams(x) & TiredEveryMorning(x))) | (-WorksWellInTeams(x) & TiredEveryMorning(x))))", "exists x.(Person(x) & ((WorksWellInTeams(x) & -WorksWellInTeams(x) & -WorksWellInTeams(x)) | (-WorksWellInTeams(x) & Workplace(x) & Workplace(x))))"]}
{"id": "folio_train_1206", "nl": "Kat is a person who comes to work every day with a positive attitude.", "fol": "ComesToWorkWithPositiveAttitude(Kat)", "prediction": ["all x.(Kat(x) -> ComesToWorkEveryDayWithPositiveAttitude(x))", "all x.(Kat(x) -> (ComesToWorkEveryDay(x) & PositiveAttitude(x)))", "all x y.((Person(x) & Day(y) & ComesToWork(x,y)) -> PositiveAttitude(x))", "all x.((Person(x) & ComesToWorkEveryDay(x) & PositiveAttitude(x)) -> PositiveAttitude(x))", "(PositiveAttitude(Kat) & ComesToWorkEveryDay(Kat))", "(ComesToWorkEveryDayWithPositiveAttitude(Kat) & PositiveAttitude(Kat))", "(PositiveAttitude(Kat) -> ComesToWorkEveryDay(Kat))", "all x y.((Person(x) & Person(y) & ComesToWorkEveryDay(x,y) & PositiveAttitude(y)) -> PositiveAttitude(x))", "all x.(Kat(x) -> ComesToWorkEveryDayWithPositiveAttitude(x))", "all x.(Kat(x) -> (ComesToWorkEveryDayWithPositiveAttitude(x)))", "exists x.(PositiveAttitude(x) & ComesToWorkEveryDay(x))", "all x y.((Person(x) & Day(y) & ComesToWork(x,y) & PositiveAttitude(x)) -> PositiveAttitude(x))", "all x.(Kat(x) -> (ComesToWorkEveryDay(x) & PositiveAttitude(x)))", "all x.((Person(x) & ComesToWorkEveryDay(x) & PositiveAttitude(x)) -> PositiveAttitude(x))", "all x y.((Person(x) & Person(y)) -> ComesToWorkEveryDayWithPositiveAttitude(x,y))", "exists x.(PositiveAttitude(x) & ComesToWorkEveryDay(x))"]}
{"id": "folio_train_1207", "nl": "Kat gets along with her colleagues at her work and receives negative feedback from teams at her work.", "fol": "(GetsAlongWithColleagues(Kat) & ReceivesNegativeFeedback(Kat))", "prediction": ["all x y.((Kat(x) & Work(y)) -> (GetsAlong(x,y) & NegativeFeedback(x,y)))", "all x y z.((Kat(x) & Work(y) & Team(z)) -> (GetsAlong(x,y) & ReceivesNegativeFeedback(x,z)))", "(all x.(Kat(x) -> GetsCoworkersTogether(x)) & all y.(Team(y) -> NegativeFeedback(y)))", "all x.(Kat(x) -> (GetsAlongWithCoworkers(x) & ReceivesNegativeFeedback(x)))", "all x y.((Kat(x) & Work(y)) -> (GetsOnlyWithCoworkers(x,y) & ReceivesNegativeFeedback(x,y)))", "(all x y.((Kat(x) & Work(y)) -> GetsCoworkersTogether(x,y)) & all z w.((Team(z) & Work(w)) -> NegativeFeedback(z,w)))", "(all x.(Kat(x) -> GetsTogether(x)) & all y.(Team(y) -> NegativeFeedback(y)))", "(GivesAtWork(Kat) & ColleaguesAtWork(Kat) & ReceivesNegativeFeedback(Kat))", "all x y z.((Kat(x) & Work(y) & Team(z)) -> (GetsTogether(x,y) & ReceivesNegativeFeedback(x,z)))", "all x y.((Kat(x) & Work(y)) -> (GetsTogether(x,y) & ReceivesNegativeFeedback(x,y)))", "(GivesAlongWithCoworkers(Kat) & ReceivesNegativeFeedback(Kat))", "all x.(Kat(x) -> (GetsOnly(x,Coworkers) & ReceivesNegativeFeedback(x,Teams)))", "all x.(Kat(x) -> (GetsOnWithCoworkers(x) & ReceivesNegativeFeedback(x)))", "(all x.(Kat(x) -> GetsCoworkersTogether(x)) & all y.(Team(y) -> NegativeFeedback(y)))", "all x y.((Kat(x) & Work(y)) -> (GivesAlong(x,y) & ReceivesNegativeFeedback(x,y)))", "all x.(Kat(x) -> (GivesAlongWithCoworkers(x) & ReceivesNegativeFeedback(x)))"]}
{"id": "folio_train_1208", "nl": "Kat either gets along with her colleagues at her work or receives negative feedback from teams at her work.", "fol": "(GetsAlongWithColleagues(Kat) | ReceivesNegativeFeedback(Kat))", "prediction": ["all x y.((Kat(x) & Work(y)) -> (GetsAlong(x,y) | NegativeFeedback(x,y)))", "all x.(Kat(x) -> (GetsAlong(x) | NegativeFeedback(x)))", "(all x.(Kat(x) -> (GetsAlong(x) | NegativeFeedback(x))))", "(GasesWithColleagues(Kat) | NegativeFeedback(Kat)))", "all x y.((Kat(x) & Work(y)) -> (GasesWithColleagues(x,y) | NegativeFeedback(x,y)))", "all x y z.((Kat(x) & Work(y) & Work(z)) -> (GetsAlong(x,y) | NegativeFeedback(x,z)))", "((Kat(Kat) & Work(Kat)) | NegativeFeedback(Kat)))", "(all x.(Kat(x) -> (GetsOnlyWithCoworkers(x) | NegativeFeedback(x))))", "(exists x.(Kat(x) & (GetsAlong(x) | NegativeFeedback(x))))", "all x.(Kat(x) -> (GivesAlong(x,Coworkers) | NegativeFeedback(x,Teams)))", "(GivesAlongWithCoworkers(Kat) | NegativeFeedback(Kat)))", "all x y.((Kat(x) & Work(y)) -> (GetsOnlyWithCoworkers(x,y) | NegativeFeedback(x,y)))", "all x.(Kat(x) -> ((GetsCoworkersAtWork(x) | NegativeFeedbackFromTeamsAtWork(x))))", "exists x.(Kat(x) & ((GasesWithCoworkers(x) & Work(x)) | ReceivesNegativeFeedback(x))))", "exists x.(Kat(x) & ((GivesAlongWithCoworkers(x) & Work(x) & Work(x)) | ReceivesNegativeFeedback(x))))", "all x.((Kat(x) & (GetsAlong(x) | NegativeFeedback(x))) -> Work(x))"]}
{"id": "folio_train_1209", "nl": "Drishti is open-source.", "fol": "IsOpenSource(Drishti)", "prediction": ["all x.(Drishti(x) -> OpenSource(x))", "Drishti is openSource(Drishti)", "all x.(Drishti(x) -> OpenSource(x))", "(OpenSource(Drishti) & OpenSource(Drishti))", "all x.(Drishti(x) -> OpenSource(x))", "all x y.((Drishti(x) & OpenSource(y)) -> OpenSource(x))", "Drishti is opensource.", "all x.(Drishti(x) -> OpenSource(x))", "(OpenSource(Drishti) & OpenSource(Drishti))", "all x.(Drishti(x) -> OpenSource(x))", "Drishti is openSource(Drishti)", "(OpenSource(Drishti) -> OpenSource(Drishti))", "all x.(Drishti(x) -> OpenSource(x))", "all x.(Drishti(x) -> OpenSource(x))", "all x.(Drishti(x) -> OpenSource(x))", "All x.(Drishti(x) -> OpenSource(x))"]}
{"id": "folio_train_1210", "nl": "Open-source software is free to modify.", "fol": "all x.(IsOpenSource(x) -> IsFreeToModify(x))", "prediction": ["all x.(OpenSourceSoftware(x) -> FreeToModify(x))", "all x.(OpenSourceSoftware(x) -> FreeToModify(x))", "all x y.((OpenSourceSoftware(x) & Software(y) & FreeToModify(x,y)) -> FreeToModify(x))", "all x.(OpenSourceSoftware(x) -> FreeToModify(x))", "all x y.((OpenSourceSoftware(x) & Software(y) & FreeToModify(x)) -> FreeToModify(x,y))", "all x.(OpenSourceSoftware(x) -> FreeToModify(x))", "all x y.((OpenSourceSoftware(x) & Software(y) & FreeToModify(x,y)) -> FreeToModify(x,y))", "exists x.(OwnSourceSoftware(x) & FreeToModify(x))", "all x.(OpenSourceSoftware(x) -> FreeToModify(x))", "all x y.((OpenSourceSoftware(x) & Software(y)) -> FreeToModify(x,y))", "all x.(OpenSourceSoftware(x) -> FreeToModify(x))", "all x.(OpenSourceSoftware(x) -> FreeToModify(x))", "all x.(OpenSourceSoftware(x) -> FreeToModify(x))", "exists x.(OpenSourceSoftware(x) & Modifies(x))", "all x.(OpenSourceSoftware(x) -> FreeToModify(x))", "all x.(OpenSourceSoftware(x) -> FreeToMix."]}
{"id": "folio_train_1211", "nl": "Drishti is free to modify.", "fol": "IsFreeToModify(Drishti)", "prediction": ["all x.(Drishti(x) -> FreeToModify(x))", "Drishti is freetomodify.", "all x.(Drishti(x) -> FreeToModify(x))", "all x y.((Drishti(x) & Drishti(y)) -> FreeToModify(x,y))", "(FreeToModify(Drishti) -> Drishti(Drishti))", "(FreeToModify(Drishti) -> FreeToModify(Drishti))", "Drishti is freeToModify.", "all x.(Drishti(x) -> FreeToModify(x))", "Drishti is free to modify.", "all x.(Drishti(x) -> FreeToModify(x))", "(All x.(Drishti(x) -> FreeToModify(x))", "all x.(Drishti(x) -> FreeToModify(x))", "Drishti is freetomodify.", "all x.(Drishti(x) -> FreeToModify(x))", "all x.(Drishti(x) -> FreeToModify(x))", "All x.(Drishti(x) -> FreeToModify(x))"]}
{"id": "folio_train_1212", "nl": "There are five grades including A+, A, B+, B, and C in English.", "fol": "(GradeInEnglish(Aplus) | GradeInEnglish(a) | GradeInEnglish(Bplus) | GradeInEnglish(b) | GradeInEnglish(c))", "prediction": ["all x.((Grade(x) & A+(x) | A+(x) | B+(x) | B+(x) | C(x))) -> InEnglish(x))", "all x.(English(x) -> (A+(x) | A+(x) | B+(x) | B+(x) | C(x))))", "(English(A+) & English(A+) & English(B+) & English(B+) & English(B+) & English(C))", "all x y.((Grade(x) & Grade(y) & English(x)) -> (A+(x) | A+(x) | B+(x) | B+(x) | C(x))))", "all x y z.((Grade(x) & Grade(y) & Grade(z)) -> (A+(x) | A+(x) | B+(x) | B+(x) | C(x))))", "exists x.(Grade(x) & Grade(x,A+) & Grade(x,A,B) & Grade(x,B) & Grade(x,C))", "(EnglischGrade(A+,A) & EnglishGrade(B+,B) & EnglishGrade(C))", "exists x.(Grade(x) & (A+(x) | A+(x) | B+(x) | B+(x) | C(x)))", "(English(A+) & A+(A) & B+(B) & B(C)))", "all x y z.((Grade(x) & Grade(y) & Grade(z) & English(y) & English(z) & A+(y) & A+(y) & B+(z) & B+(z))) -> Grade(x,y,z))", "(English(A+) | English(A+) | English(B+) | English(B+) | English(B+)))", "(English): (A+,A,B+,B,C)) & Grades(A+,A,B,C))", "all x y.((Grade(x) & Grade(y)) -> (A+(x) | A+(x) | B+(x) | B+(x) | C(x)))", "exists x.(Grade(x) & A+(x) & A+(x) & B+(x) & B+(x) & C(x)))", "exists x.(Grade(x) & (A+(x) | A+(x) | B+(x) | B(x) | C(x)))", "exists x.(Grade(x) & Grade(x,A+,A,B,B,C))"]}
{"id": "folio_train_1213", "nl": "If a student gets A+ in English, then his score is greater than 95.", "fol": "all x.(StudentGetsGrade(x,Aplus) -> (ScoreGreaterThan95(x) & -ScoreLowerThan90(x)))", "prediction": ["all x.((Student(x) & A+English(x)) -> ScoreGreaterThan95(x))", "all x.((Student(x) & GetsA+InEnglish(x)) -> ScoreGreaterThan95(x))", "(A+(Student) & InEnglish(Student)) -> ScoreGreaterThan95(Student))", "all x y.((Student(x) & Student(y) & GetsA+InEnglish(x,y)) -> ScoreGreaterThan(y,95))", "all x.((Student(x) & A+InEnglish(x)) -> ScoreGreaterThan95(x))", "all x y.((Student(x) & Student(y) & GetsA+(x,y)) -> ScoreGreaterThan(x,y))", "all x.(A+(x) -> ScoreGreaterThan95(x))", "all x.((Student(x) & GetsA+InEnglish(x)) -> ScoreGreaterThan95(x))", "all x y.((Student(x) & GetsA+InEnglish(x,y)) -> ScoreGreaterThan(x,y))", "(all x.(A+(Student(x) & English(x)) -> ScoreGreaterThan95(x))", "all x.((Student(x) & A+English(x)) -> ScoreGreaterThan95(x))", "all x.(A+English(x) -> ScoreGreaterThan95(x))", "all x.(A+InEnglish(x) -> ScoreGreaterThan95(x))", "all x.((Student(x) & GetsA+InEnglish(x)) -> ScoreGreaterThan95(x))", "all x.((Student(x) & A+InEnglish(x)) -> ScoreGreaterThan95(x))", "all x.(A+InEnglish(x) -> ScoreGreaterThan95(x))"]}
{"id": "folio_train_1214", "nl": "If a student gets A in English, then his score is in the range of 90-95.", "fol": "all x.(StudentGetsGrade(x,a) -> (-ScoreGreaterThan95(x) & -ScoreLowerThan90(x)))", "prediction": ["all x.((Student(x) & GetsAInEnglish(x)) -> ScoreInRangeOf90-95(x))", "all x.((Student(x) & GetsA(x)) -> ScoreInRangeOf90-95(x))", "all x y.((Student(x) & Student(y) & GetsA(x,y)) -> ScoreInRange(x,y))", "all x y.((Student(x) & GetsAInEnglish(x,y)) -> ScoreInRangeOf90-95(x))", "all x.((Student(x) & GetsA(x) & InEngland(x)) -> ScoreInRangeOf90To95(x))", "all x.((Student(x) & GetsAInEnglish(x)) -> ScoreInRangeOf90To95(x))", "(all x.((Student(x) & GetsA(x)) -> ScoreInRangeOf90-95(x)))", "all x y.((Student(x) & Student(y) & GetsAInEnglish(x,y)) -> ScoreInRangeOf90To95(y))", "all x.(GivesAInEnglish(x) -> ScoreInRangeOf90To95(x))", "all x.((Student(x) & AInEnglish(x)) -> ScoreInRangeOf90To95(x))", "(all x.(A inEnglish(x) -> ScoreInRangeOf9095(x)))", "all x.(A(x) -> ScoreInRangeOf9095(x))", "all x.((Student(x) & GetsAInEnglish(x)) -> ScoreInRangeOf90-95(x))", "all x y.((Student(x) & GetsAInEnglish(x,y)) -> ScoreInRangeOf(x,y))", "all x.((Student(x) & ScoreInRangeOf90-95(x)) -> GetsAInEnglish(x))", "all x.((Student(x) & GetsAInEnglish(x)) -> ScoreInRange(x,90,95))"]}
{"id": "folio_train_1215", "nl": "Zhang got an A in English.", "fol": "StudentGetsGrade(Zhang,a)", "prediction": ["Zhang got A in English.", "all x.(Zhang(x) -> AInEnglisch(x))", "(A in English) -> Zhang(Zhang))", "Zhang got A in English.", "(A inEnglish) -> Zhang(Zhang))", "Zhang gotA(Zhang,Englisch)", "(A(Zhang) & English(Zhang))", "Zhang got A in English.", "-A(Zhang,English)", "(A in English, Zhang)", "Zhang hat A in English.", "(A inEnglish) -> Zhang(Zhang))", "-A(Zhang,Englisch)", "Zhang got A in English.", "Zhang got A in English.", "Zhang got A in English."]}
{"id": "folio_train_1216", "nl": "Wang's English score is better than Zhang's.", "fol": "ScoreIsBetterThan(Wang,Zhang)", "prediction": ["all x y.((Wang(x) & Zhang(y)) -> BetterEnglishScore(x,y))", "(BetterEnglishScore(Wang,Zhang) & BetterEnglishScore(Wang,Zhang))", "(EnglishScore(Wang,Zhang) & Better(Wang,Zhang))", "(BetterEnglandScore(Wang,England))", "(EnglishScore(Wang) & EnglishScore(Zhang))", "(BetterEnglandScore(Wang,Zhang) & BetterEnglishScore(Wang,Zhang))", "all x y.((Wang(x) & Zhang(y)) -> BetterEnglishScore(x,y))", "all x.((Wang(x) & Zhang(x)) -> BetterEnglishScore(x,y))", "-BetterEnglishScore(x,Wang,Zhang)", "all x y.((Wang(x) & Zhang(y)) -> BetterEnglandScore(x,y))", "(EnglishScore(Wang,Zhang) & Better(Wang,Zhang))", "exists x.(EnglishScore(x,y) & EnglishScore(y) & Better(x,z) & Wang(z))", "(BetterEnglishScore(Wang,Zhang))", "(EnglishScoreBetterThan(Wang,Zhang))", "all x y.((Wang(x) & Zhang(y)) -> BetterEnglishScore(x,y))", "all x y.((Wang(x) & Zhang(y)) -> BetterEnglandScore(x,y))"]}
{"id": "folio_train_1217", "nl": "Wu's English score is lower than 90.", "fol": "ScoreLowerThan90(Wu)", "prediction": ["(EnglishScore(Wu) & LowerThan(Wu,90))", "all x.((Wu(x) & EnglishScore(x,90)) -> LowerThan(x,90))", "Wu's EnglishScoreLowerThan90(Wu)", "(LowerThan(Wu,90) -> EnglishScore(Wu))", "-(Wu'sEnglishScore(Wu) & LowerThan(Wu,90))", "(EnglishScore(Wu) & LowerThan90(Wu))", "-LowerThan(Wu,90)", "all x.((Wu(x) & EnglishScore(x,90)) -> LowerThan(x,90))", "(EnglishScoreLowerThan90(Wu))", "All x.(Wu(x) -> EnglishScoreLowerThan90(x))", "Wu's EnglishScoreLowerThan(Wu,90)", "Wu's EnglishScore(Wu) -90.", "-LowerThan90EnglishScore(Wu)", "(EnglishScore(Wu) & LowerThan(Wu,90))", "(LowerThan90(Wu))", "all x.((Wu(x) & EnglishScore(x,90)) -> LowerThan(x,90))"]}
{"id": "folio_train_1218", "nl": "Zhang's English score is lower than 95.", "fol": "-ScoreGreaterThan95(Zhang)", "prediction": ["(EnglishScore(Zhang,95))", "all x.((ZhangLittleEnglishScore(x,95)) -> LowerThan(x,95))", "Zhang's EnglishScore(Zhang,95)", "-(Zhang's EnglishScore(Zhang) & LowerThan(Zhang,95))", "-LowerThan(Zhang,95)", "(LowerThan(Zhang,95) -> EnglishScore(Zhang,95))", "Zhang's EnglishScoreLowerThan(Zhang,95)", "(EnglishScore(z) & LowerThan(z,95))", "(EnglishScore(Zhang,95))", "all x.(ZhangLittleEnglishScore(x,95) -> EnglishScore(x,95))", "all x.((ZhangLittleEnglishScore(x,95)) -> LowerThan(x,95))", "Zhang's EnglishScoreLowerThan(Zhang,95)", "-LowerThan(Zhang,95)", "(EnglishScore(Zhang,95))", "(EnglandScore(Zhang,95))", "Zhang's EnglishScoreLowerThan(z,95)"]}
{"id": "folio_train_1219", "nl": "Wang got an A+ in English.", "fol": "StudentGetsGrade(Wang,Aplus)", "prediction": ["Wang got A+ in English.", "all x.((Wang(x) & English(x)) -> A+(x))", "(A+(Wang) & English(Wang))", "(A+English(Wang))", "Wang got A+ in English.", "Wang got A+InEnglish(Wang)", "all x.((Wang(x) & English(x)) -> A+(x))", "(A+(Wang) & English(Wang))", "-A+English(Wang)", "Wang got A+ in English.", "Wang got A+InEnglish(Wang)", "-A+InEnglish(Wang)", "(A+English)", "(A+InEnglish)", "(A+ in English)", "Wang got A+ in English."]}
{"id": "folio_train_1220", "nl": "Wu does not get an A or A+ in English.", "fol": "(-StudentGetsGrade(Wu,a) & -StudentGetsGrade(Wu,Aplus))", "prediction": ["all x.(Wu(x) -> (-(A+(x) | A+(x))))", "(-(Wu(Wu) & English(Wu)) -> (-(Wu(Wu) & English(Wu))))", "(-(GetsA(Wu) | GetsA+(Wu)))", "(-(Wu(w) & English(w)) -> (-(Wu(w) & A+(w))))", "all x.(Wu(x) -> (-A+(x) | A+(x))))", "(-(Wu(Wu) & English(Wu)) -> (-(Wu(Wu) & English(Wu)) & -(Wu(Wu) & English(Wu)))))", "Wu does not get A+InEnglish(Wu)", "Wu (-(A+(Wu) | A+(Wu)))", "-((Wu(w) & English(w)) -> (-A(w) | A+(w)))", "(Wu & English(Wu)) -> -(A+(Wu) | A+(Wu))))", "all x.(Wu(x) -> -(GetsA(x) | GetsA+(x)))", "all x.(Wu(x) -> (-(A+(x) | A+(x))))", "(-A+(Wu) & English(Wu))", "-exists x.(Wu(x) & (A(x) | A+(x))))", "(-(A+(Wu) | A+(Wu)))", "all x.(Wu(x) -> (-A(x) | A+(x)))"]}
{"id": "folio_train_1221", "nl": "Olivia doesn't prefer warm temperature during the day.", "fol": "all x.(IsDay(x) -> -PrefersWarmTemperatureAt(Olivia,x))", "prediction": ["Olivia doesn't prefersWarmTemperatureDuringDay(Olivia)", "all x.(Olivia(x) -> -PrefersWarmTemperature(x))", "(-PrefersWarmTemperature(Olivia))", "-(PrefersWarmTemperature(Olivia) & Day(Olivia))", "((Olivia(Olivia) & Day(Olivia)) -> -PrefersWarmTemperature(Olivia))", "Olivia prefersWarmTemperature(Olivia)", "(PrefersWarmTemperature(Olivia) & -PrefersWarmTemperature(Olivia))", "Olivia doesn't prefersWarmTemperature(Olivia)", "all x.(Olivia(x) -> -PrefersWarmTemperature(x))", "-(PrefersWarmTemperature(Olivia,Day))", "(-PrefersWarmTemperature(Olivia))", "Olivia doesn't prefersWarmTemperatureDuringDay(Olivia)", "-PrefersWarmTemperatureDuringDay(Olivia)", "Olivia prefersWarmTemperatureDuringDay(Olivia,Day)", "all x.(Olivia(x) -> -PrefersWarmTemperature(x))", "-(PrefersWarmTemperature(Olivia) & Day(Olivia))"]}
{"id": "folio_train_1222", "nl": "When Olivia sleeps, she prefers cool temperature.", "fol": "all x.(IsSleepingDuring(Olivia,x) -> PrefersCoolTemperatureAt(Olivia,x))", "prediction": ["all x.((Olivia(x) & Sleeps(x)) -> PrefersCoolTemperature(x))", "all x.((Oliver(x) & Sleeps(x)) -> PrefersCoolTemperature(x))", "all x y.((Olivia(x) & Sleeps(x)) -> PrefersCoolTemperature(x,y))", "(all x.(Sleeps(x) -> CoolTemperature(x)))", "all x.(SleepsOlivia(x) -> PrefersCoolTemperature(x))", "(all x.(Sleeps(x) -> PrefersCoolTemperature(x)))", "all x.((Olivia(x) & Sleeps(x)) -> PrefersCoolTemperature(x))", "all x y.((Sleeps(x) & Olivia(y)) -> PrefersCoolTemperature(y,x))", "all x.((Oliver(x) & Sleeps(x)) -> PrefersCoolTemperature(x))", "(All x.(Sleeps(x) -> PrefersCoolTemperature(x)))", "All x.(Sleeps(x) -> PrefersCoolTemperature(x))", "all x y.((Olivia(x) & Sleeps(x)) -> PrefersCoolTemperature(x,y))", "all x y.((Sleeps(x) & Olivia(y)) -> PrefersColdTemperature(y,x))", "all x.(SleepsOf(x,Olivia) -> PrefersCoolTemperature(x))", "all x.((Olivia(x) & Sleeps(x)) -> PrefersCoolTemperature(x))", "All x.(SleepsOlivia(x) -> PrefersCoolTemperature(x))"]}
{"id": "folio_train_1223", "nl": "Olivia sleeps during the night.", "fol": "all x.(IsSleepingDuring(Olivia,x) -> IsNight(x))", "prediction": ["all x.(Olivia(x) -> SleepsDuringNight(x))", "Olivia SleepsDuringNight(Olivia)", "(SleepsDuringNight(Olivia))", "-SleepsDuringNight(Olivia)", "all x.(Oliver(x) -> SleepsDuringNight(x))", "all x y.((Olivia(x) & Night(y)) -> SleepsDuring(x,y))", "Olivia sleeps during the night.", "all x.(Olivia(x) -> SleepsDuringNight(x))", "(SleepsDuringNight(Olivia))", "Olivia SleepsDuringNight(Olivia)", "all x y.((Olivia(x) & Night(y)) -> Sleeps(x,y))", "Olivia sleeps during the night.", "all x.(Oliver(x) -> SleepsDuringNight(x))", "all x.(Olivia(x) -> SleepsDuringNight(x))", "(SleepsDuringNight(Olivia))", "Olivia SleepsDuringNight(Olivia)"]}
{"id": "folio_train_1224", "nl": "Olivia works during the day.", "fol": "all x.(IsWorkingDuring(Olivia,x) -> IsDay(x))", "prediction": ["all x.(Olivia(x) -> WorksDuringDay(x))", "Olivia works during the day.", "(WorksDuringDay(Olivia))", "all x.(Oliver(x) -> WorksDuringDay(x))", "-WorksDuringDay(Olivia,Day)", "Olivia works during the day.", "Olivia worksDuringDay(Olivia)", "(WorksDuringDay(Olivia))", "all x.(Oliver(x) -> WorksDuringDay(x))", "(WorksDuringDay(Olivia,Day))", "Olivia works during the day.", "all x.(Oscar(x) -> WorksDuringDay(x))", "(WorksDuringDay(Olivia,Day))", "Olivia worksDuringDay(Olivia)", "Olivia works during the day.", "Olivia works during the Day."]}
{"id": "folio_train_1225", "nl": "Olivia either works or sleeps.", "fol": "all x.(IsWorkingDuring(Olivia,x) | IsSleepingDuring(Olivia,x))", "prediction": ["all x.(Olivia(x) -> (Works(x) | Sleeps(x)))", "(Works(Olivia) | Sleeps(Olivia))", "Olivia(Oliver) (Works(Oliver) | Sleeps(Oliver)))", "all x.(Oliver(x) -> (Works(x) | Sleeps(x)))", "Olivia (Works(Olivia) | Sleeps(Olivia))", "Olivia exists x.(Works(x) | Sleeps(x))", "(Works(Olivia) | Sleeps(Olivia))", "Olivia (Works) | Sleeps(Olivia))", "(Works(Oliver) | Sleeps(Oliver))", "all x.(Olivia(x) -> (Works(x) | Sleeps(x)))", "exists x.(Oliver(x) & (Works(x) | Sleeps(x)))", "(Works(Olivia) | Sleeps(Olivia))", "all x.(Olivia(x) -> (Works(x) | Sleeps(x)))", "(Works(Olivia) | Sleeps(Olivia))", "exists x.(Oliver(x) & (Works(x) | Sleeps(x)))", "all x.(Oscar(x) -> (Works(x) | Sleeps(x)))"]}
{"id": "folio_train_1226", "nl": "The time is either the day or the night.", "fol": "all x.(IsDay(x) | IsNight(x))", "prediction": ["all x.(Time(x) -> (Day(x) | Night(x)))", "(Time(x) | Time(x)))", "all x.(Time(x) -> (Day(x) | Night(x)))", "(Time(x) | Time(x)))", "all x.(Time(x) -> (Day(x) | Night(x)))", "all x y.((Time(x) & Day(y)) | Night(y))", "(Day(x) | Night(x))", "all x.(Time(x) -> (Day(x) | Night(x)))", "exists x.(Timing(x) & (Day(x) | Night(x)))", "all x y.((Time(x) & Day(y)) | Night(y))", "all x.(Time(x) -> (Day(x) | Night(x)))", "all x.(Time(x) -> (Daily(x) | Night(x)))", "all x.(Time(x) -> (Day(x) | Night(x)))", "exists x.(Time(x) & Day(x) | Night(x))", "exists x.(Time(x) & (Day(x) | Night(x)))", "exists x.(Time(x) & (Day(x) | Night(x)))"]}
{"id": "folio_train_1227", "nl": "Olivia either prefers warm temperature or prefers cool temperature.", "fol": "all x.(PrefersWarmTemperatureAt(Olivia,x) | PrefersCoolTemperatureAt(Olivia,x))", "prediction": ["(PrefersWarmTemperature(Olivia) | PrefersCoolTemperature(Olivia))", "all x.(Olivia(x) -> (PrefersWarmTemperature(x) | PrefersCoolTemperature(x)))", "Olivia (PrefersWarmTemperature(Olivia) | PrefersCoolTemperature(Olivia))", "Olivia prefers(Olivia,warm) | prefers(Olivia,cool))", "all x.(Olivia(x) -> (PrefersWarmTemperature(x) | PrefersColdTemperature(x)))", "all x y.((Olivia(x) & WarmTemperature(y)) | CoolTemperature(y))", "all x.(Oliver(x) -> (PrefersWarmTemperature(x) | PrefersCoolTemperature(x)))", "(PrefersWarmTemperature(Olivia) | PrefersCoolTemperature(Olivia))", "(PrefersWarmTemperature(Olivia) | PrefersCoolTemperature(Olivia))", "Olivia (PrefersWarmTemperature(Olivia) | PrefersCoolTemperature(Olivia))", "(PrefersWarmTemperature(Olivia) | PrefersColdTemperature(Olivia))", "exists x.(Olivia(x) & (PrefersWarmTemperature(x) | PrefersColdTemperature(x)))", "all x.(Olivia(x) -> (PrefersWarmTemperature(x) | PrefersCoolTemperature(x)))", "exists x.(Oliver(x) & (PrefersWarmTemperature(x) | PrefersColdTemperature(x)))", "(PrefersWarmTemperature(Oliver) | PrefersCoolTemperature(Oliver))", "(PrefersWarmTemperature(Olivia) | PrefersCoolTemperature(Olivia))"]}
{"id": "folio_train_1228", "nl": "At all times, Olivia prefers cool temperature.", "fol": "all x.(Time(x) -> PrefersCoolTemperatureAt(Olivia,x))", "prediction": ["all x.((Olivia(x) & CoolTemperature(x)) -> Prefers(x,y))", "At all times, Olivia prefersCoolTemperature(Olivia)", "all x.(Olivia(x) -> PrefersCoolTemperature(x))", "all x y.((Olivia(x) & CoolTemperature(y)) -> Prefers(x,y))", "-((Olivia(Olivia) & CoolTemperature(Olivia))", "(PrefersCoolTemperature(Olivia))", "(PrefersCoolTemperature(Olivia)", "All times, Olivia prefersCoolTemperature(Olivia)", "all x.((Olivia(x) & CoolTemperature(x)) -> Prefers(x,y))", "at all times, Olivia prefersColdTemperature(Olivia)", "All x.(Olivia(x) -> PrefersCoolTemperature(x))", "all x y.((Olivia(x) & CoolTemperature(y)) -> Prefers(x,y))", "all x.((Olivia(x) & CoolTemperature(x)) -> Prefers(x))", "(PrefersCoolTemperature(Olivia)", "All x.(Olivia(x) -> PrefersCoolTemperature(x))", "all x.((Olivia(x) & CoolTemperature(x)) -> Prefers(x,y))"]}
{"id": "folio_train_1229", "nl": "Taylor Swift gives a commencement speech in New York University in 2022.", "fol": "GivesCommencementSpeech(TaylorSwift,Nyc)", "prediction": ["all x y.((TaylorSwift(x) & NewYorkUniversity(y)) -> GivesCommitmentSpeech(x,y))", "all x.(TaylorSwift(x) -> GivesCommitmentSpeech(x,NewYorkUniversity,2022))", "(GivesCommitmentSpeech(TaylorSwift,NewYork) & 2022(TaylorSwift))", "(GivesCommitmentSpeech(TaylorSwift,NewYork) & 2022(TaylorSwift,NewYork))", "all x.((TaylorSwift(x) & NewYorkUniversity(y)) -> GivesCommitmentSpeech(x,y))", "TaylorSwift gives CommencementSpeechInNewYorkUniversity(TaylorSwift,2022)", "all x y z.((TaylorSwift(x) & NewYorkUniversity(y) & CommencementSpeech(z) & 2022(z)) -> GivesIn(x,y,z))", "all x y.((TaylorSwift(x) & NewYorkUniversity(y)) -> GivesCommitmentSpeech(x,y))", "all x.(TaylorSwift(x) -> GivesCommitmentSpeechInNewYorkUniversity(x,2022))", "(GraduationSpeech(TaylorSwift,NewYork) & 2022(TaylorSwift))", "(GivesCommitmentSpeechInNewYorkUniversity(TaylorSwift,2022))", "all x y.((TaylorSwift(x) & NewYorkUniversity(y) & 2022(z)) -> GivesCommitmentSpeech(x,y,z))", "TaylorSwift gives CommencementSpeechInNewYorkUniversity(TaylorSwift,2022)", "(GivesCommitmentSpeech(TaylorSwift,NewYork) & 2022(TaylorSwift,NewYork))", "(GivesCommitmentSpeech(TaylorSwift,NewYork) & 2022(TaylorSwift,NewYork))", "all x.((TaylorSwift(x) & NewYorkUniversity(y)) -> GivesCommitmentSpeech(x,y))"]}
{"id": "folio_train_1230", "nl": "Both Columbia University and New York University are located in Manhattan.", "fol": "(LocatedInManhattan(ColumbiaUniversity) & LocatedInManhattan(Nyc))", "prediction": ["all x.((ColumbiaUniversity(x) & NewYorkUniversity(x)) -> LocatedIn(x,Midtown))", "all x y.((ColumbiaUniversity(x) & NewYorkUniversity(y)) -> LocatedIn(x,y))", "(LocatedIn(ColumbiaUniversity) & LocatedIn(NewYorkUniversity))", "both ColumbiaUniversity and NewYorkUniversity(y) are located in Manhattan(y))", "(LocatedInMidtown(ColumbiaUniversity) & LocatedInNewYorkUniversity(NewYorkUniversity))", "(exists x.(ColumbiaUniversity(x) & NewYorkUniversity(x)) & LocatedIn(x,Midtown))", "(Location(ColumbiaUniversity) & Location(NewYorkUniversity))", "(LocatedIn(ColumbiaUniversity) & LocatedIn(NewYorkUniversity))", "(all x.(ColumbiaUniversity(x) -> LocatedIn(x,Miami)) & (NewYorkUniversity(x,Miami) -> LocatedIn(x,Miami)))", "all x.((ColumbiaUniversity(x) | NewYorkUniversity(x)) -> LocatedIn(x,Midtown))", "all x.((ColumbiaUniversity(x) & NewYorkUniversity(x)) -> LocatedInMiami(x))", "all x y.((ColumbiaUniversity(x) & NewYorkUniversity(y)) -> LocatedIn(x,y))", "all x.(ColumbiaUniversity(x) & NewYorkUniversity(x)) -> LocatedInMiami(x))", "both ColumbiaUniversity and NewYorkUniversity(y) are located in Manhattan.", "all x y.((ColumbiaUniversity(x) & NewYorkUniversity(y)) -> (LocatedIn(x,y) & LocatedIn(x,y)))", "(LocatedIn(ColumbiaUniversity) & LocatedIn(NewYorkUniversity))"]}
{"id": "folio_train_1231", "nl": "Taylor Swift has received three Grammy Album of the Year Awards.", "fol": "ReceivedThreeGrammyAwards(TaylorSwift)", "prediction": ["all x.(TaylorSwift(x) -> ReceivedThreeGrammyAlbumOfTheYearAwards(x))", "-(TaylorSwift(TaylorSwift) & ReceivedThreeGrammyAlbumOfYearAwards(TaylorSwift))", "(ReceivedThreeGrammyAlbumOfYearAwards(TaylorSwift))", "TaylorSwift has received three GrammyAlbumOfTheYearAwards(TaylorSwift)", "(GrammyAlbumOfYear(TaylorSwift) & ReceivedThreeAwards(TaylorSwift))", "(GlobeAwards(TaylorSwift) & ReceivedThreeGrammyAlbumOfTheYear(TaylorSwift))", "All x y.((TaylorSwift(x) & GrammyAlbumOfTheYear(y)) -> Received(x,y))", "TaylorSwift has receivedThreeGrammyAlbumOfYearAwards(TaylorSwift)", "(GlobeOfTheYear(TaylorSwift) & ReceivedThreeGrammyAwards(TaylorSwift))", "all x.((TaylorSwift(x) & GrammyAlbumOfTheYear(x)) -> Received(x,3))", "(ReceivedThreeGrammyAlbumOfTheYearAwards(TaylorSwift))", "all x.(TaylorSwift(x) -> ReceivedThreeGrammyAlbumOfYearAwards(x))", "all x.((TaylorSwift(x) & GrammyAlbumOfYear(x)) -> Received(x,3))", "TaylorSwift has received three GrammyAlbumOfTheYearAwards.", "All x y.((TaylorSwift(x) & GrammyAlbumOfTheYear(y)) -> Received(x,y))", "All x.(TaylorSwift(x) -> ReceivedThreeGrammyAlbumOfTheYearAwards(x))"]}
{"id": "folio_train_1232", "nl": "Columbia University is one of the Ivy League schools.", "fol": "IsIvyLeagueSchool(ColumbiaUniversity)", "prediction": ["all x.(ColumbiaUniversity(x) -> IvyLionSchool(x))", "(IvyLowerSchool(ColumbiaUniversity)", "all x y.((ColumbiaUniversity(x) & IvyLionSchool(y)) -> IvyLionSchool(x,y))", "all x.(ColumbiaUniversity(x) -> IvyLowerSchool(x))", "IvyLowerSchool(ColumbiaUniversity)", "(IvyLowerSchool(ColumbiaUniversity)", "all x.((ColumbiaUniversity(x) & IvyLionSchool(x)) -> School(x))", "all x.(ColumbusUniversity(x) -> IvyLionSchool(x))", "all x y.((ColumbiaUniversity(x) & IvyLionSchool(y)) -> School(x,y))", "all x.(ColumbiaUniversity(x) -> IvyLionSchool(x))", "(IvyLionSchool(ColumbiaUniversity)", "all x.(ColumbiaUniversity(x) -> IvyLeagueSchool(x))", "(IvyLowerSchool(ColumbiaUniversity)", "all x.(ColumbiaUniversity(x) -> IvyLowerSchool(x))", "(IvyLeagueSchool(ColumbiaUniversity)", "All x.(ColumbiaUniversity(x) -> IvyLeagueSchool(x))"]}
{"id": "folio_train_1233", "nl": "Taylor Swift delivers a commencement speech in Manhattan.", "fol": "exists x.(GivesCommencementSpeech(TaylorSwift,x) & LocatedInManhattan(x))", "prediction": ["all x y.((TaylorSwift(x) & Manhattan(y)) -> DeliversCommitmentSpeech(x,y))", "all x.(TaylorSwift(x) -> DeliversCommitmentSpeech(x))", "all x y z.((TaylorSwift(x) & CommencementSpeech(y) & Manhattan(z)) -> DeliversIn(x,y,z))", "(DebutsCommitmentSpeech(TaylorSwift) & InMetropolitan(TaylorSwift))", "all x.((TaylorSwift(x) & CommencementSpeech(x)) -> DeliversInMetropolitan(x))", "TaylorSwift delivers CommencementSpeechInMetropolitan(TaylorSwift)", "(Debuts(TaylorSwift,Miami) & TaylorSwift(TaylorSwift,Miami))", "all x y.((TaylorSwift(x) & CommencementSpeech(y)) -> DeliversInMetropolitan(x,y))", "(DisruptsCommitmentSpeech(TaylorSwift,Midtown))", "(DebutSpeech(TaylorSwift,Miami) & Delivers(TaylorSwift,Miami))", "TaylorSwift delivers CommencementSpeechInMennonitoba(TaylorSwift)", "(DisruptsCommitmentSpeech(TaylorSwift) & InMetropolitan(TaylorSwift))", "(PresentationSpeech(TaylorSwift,Miami) & TaylorSwift(TaylorSwift,Miami))", "all x.(TaylorSwift(x) -> DeliversCommitmentSpeech(x,Milton))", "all x.((TaylorSwift(x) & CommencementSpeech(x)) -> DeliversInMennon(x))", "all x y.((TaylorSwift(x) & Manhattan(y)) -> DeliversCommitmentSpeech(x,y))"]}
{"id": "folio_train_1234", "nl": "The commencement speaker of NYU does not have any album.", "fol": "all x.(CommencementSpeaker(x) & -ReceivedThreeGrammyAwards(x))", "prediction": ["all x.((Speaker(x) & Commencement(x) & NYU)) -> -HasAlbum(x))", "all x.((EncepmentSpeaker(x) & NYU(x)) -> -HasAlbum(x))", "(exists x.(EncepmentSpeaker(x) & NYU(x)) & -exists y.(Album(y) & HasAlbum(x,y))))", "all x.((Speaker(x) & Commencement(x)) -> -HasAlbum(x))", "(-exists x.(EncepmentSpeaker(x) & NYU(x)))", "all x.((EntranceSpeaker(x) & NYU(x)) -> -HasAlbum(x))", "all x y.((Speaker(x) & Commencement(y) & NYU(y)) -> -HasAlbum(x,y))", "the commencementsspeaker(NYU) -HasAlbum(NYU)", "all x.((StartupSpeaker(x) & NYU(x)) -> -HasAlbum(x))", "the commencementSpeaker(NYU) -HasAlbum(NYU)", "(-exists x.(EntranceSpeaker(x) & NewYorkU) & CommencementSpeaker(x,y)))", "All x.(Speaker(x) -> -exists y.(Album(y) & Commencement(x,y)))", "(NoAlbum(beginningSpeaker,NYU))", "all x y.((CommitmentSpeaker(x) & NYU(y)) -> -HasAlbum(x,y))", "-exists x.(EncedementSpeaker(x) & NYU(x))", "all x.((CommitmentSpeaker(x) & NYU(x)) -> -HasAlbum(x))"]}
{"id": "folio_train_1235", "nl": "Customers either choose Plan A or Plan B.", "fol": "all x.(ChoosesPlanA(x) | ChoosesPlanB(x))", "prediction": ["all x.(Customer(x) -> (ChoosesPlanA(x) | ChoosesPlanB(x)))", "all x y.((Customer(x) & Plan(y)) -> (ChoosesPlanA(x,y) | ChoosesPlanB(x,y)))", "(Customer(Customer) -> (ChoosesPlanA(Customer) | ChoosesPlanB(Customer)))", "(ChoosesPlanA) | ChoosesPlanB))", "all x.(Customer(x) -> (ChoosesPlanA(x) | ChoosesPlanB(x)))", "((Customer(customer) & PlanA(customer)) | PlanB(customer)))", "(Customer(Customer) | Customer(Customer)))", "all x y.((Customer(x) & Plan(y)) -> (ChoosesPlanA(x,y) | ChoosesPlanB(x,y)))", "all x.(Customer(x) -> (ChoosesPlanA(x) | ChoosesPlanB(x)))", "all x y.(Customer(x) -> (ChoosesPlanA(x,y) | ChoosesPlanB(x,y)))", "all x y.(Customer(x) -> (ChoosesPlanA(x) | ChoosesPlanB(x)))", "(Clients(Customer) -> (ChoosesPlanA(Customer) | ChoosesPlanB(Customer)))", "all x.(Customer(x) -> (CHOOSEPlanA(x) | ChoosePlanB(x)))", "all x.(Customer(x) -> (ChoosesPlanA(x) | ChoosesPlanB(x)))", "exists x.(Customer(x) & (PlanA(x) | PlanB(x)))", "all x.(Customer(x) -> (ChoosesPlanA(x) | ChoosesPlanB(x)))"]}
{"id": "folio_train_1236", "nl": "All who choose Plan B are rewarded with a $30 gift card. ", "fol": "all x.(ChoosesPlanB(x) -> RewardedWithGiftCard(x))", "prediction": ["all x.((PlanB(x) & ChoosePlanB(x)) -> RewardedWithGiftCard(x,30))", "all x.((PlanB(x) & ChoosePlanB(x)) -> RecognizedWithGiftCard(x,30))", "all x.((PlanB(x) & ChoosesPlanB(x)) -> RewardedWithGiftCard(x,30))", "all x.((PlanB) & ChoosePlanB)) -> RewardedWithGiftCard(x,30))", "all x.(PlanB(x) -> RewardedWithGiftCard(x,30))", "all x.((PlanB) & ChoosesPlanB)) -> RewardedWithGiftCard(x,30))", "all x.(ChoosesPlanB(x) -> RewardedWithGiftCard(x,30))", "all x y.((PlanB(x) & PlanB(y)) -> RewardedWith(x,y))", "(all x.((PlanB) & ChoosePlanB)) -> RewardedWithGiftCard(x,30))", "all x y.((PlanB(x) & PlanB) & PlanB(y)) -> RewardedWithGiftCard(x,y))", "all x.((PlanB(x) & ChoosePlanB(x)) -> RewardedWithGiftCard(x,30))", "all x.((ChoosesPlanB(x) & RewardsWith30GiftCard(x)) -> ChoosesPlanB(x))", "all x.((PlanB(x) & ChoosesPlanB(x)) -> RecognizedWithGiftCard(x,30))", "all x.(PlanB(x) -> RecognizedWith30GiftCard(x))", "all x y.((PlanB(x) & PlanB(y)) -> Rewards(x,y))", "All x.(ChoosesPlanB(x) -> RecognizedWith30GiftCard(x))"]}
{"id": "folio_train_1237", "nl": "There are no customers who do not choose any plans. ", "fol": "all x.-DoesNotChooseAnyPlan(x)", "prediction": ["-exists x.(Customer(x) & -ChoosesPlan(x))", "all x.((Customer(x) & -ChoosesPlan(x)) -> -ChoosesPlan(x))", "exists x.(Customer(x) & -ChoosesPlan(x))", "there are no customers who do not choose any plans.", "-exists x.(Customer(x) & -ChoosesPlan(x))", "all x.((Customer(x) & -ChoosesPlan(x)) -> -Customers(x))", "(exists x.(Customer(x) & -ChoosesPlan(x)))", "all x.((Customer(x) & NoPlan(x)) -> -Chooses(x,Plan))", "exists x.(Customer(x) & -ChoosesPlan(x))", "-exists x.(Customer(x) & -ChoosesPlan(x))", "-exists x.(Customer(x) & -ChosesPlan(x))", "all x.((Customer(x) & NoPlan(x)) -> -Chooses(x,Plan))", "exists x.(Customer(x) & -ChoosesPlan(x))", "-exists x.(Customer(x) & -ChoosesPlan(x))", "-exists x.(Customer(x) & -ChosesPlan(x))", "-exists x.(Customer(x) & -ChoosesPlan(x))"]}
{"id": "folio_train_1238", "nl": "No customers rewarded a $30 gift card are older than 80.", "fol": "all x.(RewardedWithGiftCard(x) -> -IsOlderThan80(x))", "prediction": ["-exists x.(Customer(x) & Recognized(x,30) & GiftCard(x))", "all x.((Customer(x) & Recognized(x,30)) -> OlderThan80(x))", "-exists x.(Customer(x) & Rewarded(x,30) & GiftCard(x))", "(exists x.(Customer(x) & Recognized(x,30)) & -OlderThan(x,80))", "all x.((Customer(x) & Rewarded(x,30)) -> OlderThan80(x))", "-exists x.(Customer(x) & Rewards(x,30) & GiftCard(x) & OlderThan(x,80))", "no customer rewarded $30GiftCardIsOlderThan80(x)", "all x.((Customer(x) & Recognized(x,30)) -> OlderThan80(x))", "(exists x.(Customer(x) & Rewarded(x,30)) & GiftCard(x,80))", "all x.((Customer(x) & RewardsGiftCard(x,30)) -> OlderThan80(x))", "-exists x.(Customer(x) & Recognized(x,30) & GiftCard(x))", "all x.((Customer(x) & Rewarded(x,30)) -> OlderThan80(x))", "-exists x.(Customer(x) & Rewarded(x,30) & GiftCard(x) & OlderThan(x,80))", "all x.((Customer(x) & RecognizedDiscountCard(x,30)) -> OlderThan80(x))", "-exists x.(Customer(x) & Rewards(x,30) & GiftCard(x) & OlderThan(x,80))", "-exists x.(Customer(x) & RecognizedWith(x,30) & GiftCard(x,80))"]}
{"id": "folio_train_1239", "nl": "Customers are either older than 80 or are currently studying at school. ", "fol": "all x.(IsOlderThan80(x) | IsStudyingAtSchool(x))", "prediction": ["all x.(Customer(x) -> (OlderThan(x,80) | StudyingAtSchool(x)))", "all x.(Customer(x) -> (OlderThan80(x) | StudyingAtSchool(x)))", "(OlderThan(Customer,80) | StudyingAtSchool(Customer,80)))", "all x y.((Customer(x) & Customer(y)) -> (OlderThan(y,80) | StudyingAtSchool(y,80)))", "all x.(Customer(x) -> (OlderThan(x,80) | StudyingAtSchool(x,80)))", "(OlderThan80(Customer) | StudyingAtSchool(Customer))", "all x.((Customer(x) & (OlderThan(x,80) | StudyingAtSchool(x,80))) -> OlderThan(x,80))", "all x.(Customer(x) -> (OlderThan80(x) | StudyingAtSchool(x)))", "all x y.(Customer(x) -> (OlderThan(x,80) | StudyingAtSchool(x,y)))", "(OlderThan80(customer) | StudyingAtSchool(customer))", "exists x.(Customer(x) & ((OlderThan80(x) | CurrentlyStudyingAtSchool(x))) | (-OlderThan80(x) & CurrentlyStudyingAtSchool(x))))", "all x.(Customer(x) -> (OlderThan(x,80) | StudyingAtSchool(x,80)))", "exists x.(Customer(x) & (AgeOlderThan(x,80) | StudyingAtSchool(x,80)))", "all x.(Customer(x) -> (OlderThan80(x) | StudyingAtSchool(x)))", "all x.(Customer(x) -> (OlderThan80(x) | StudyingAtSchool(x)))", "all x.(Customer(x) -> (OlderThan80(x) | StudyingAtSchool(x)))"]}
{"id": "folio_train_1240", "nl": "James is not a customer who is currently studying at school. ", "fol": "-IsStudyingAtSchool(James)", "prediction": ["all x.((Customer(x) & -StudyingAtSchool(x)) -> James(x))", "all x.((James(x) & -StudyingAtSchool(x)) -> -Customer(x))", "James is not currentlyStudyingAtSchool(James)", "-(Customer(Jim) & StudyingAtSchool(Jim))", "James is not a customer who is currentlyStudyingAtSchool(James)", "(-Student(James) & StudiesAtSchool(James))", "-(Customer(Jim) & StudiesAtSchool(Jim))", "(-StudyingAtSchool(James))", "(-Customer(Jim) & StudiesAtSchool(Jim))", "James is not currentlyStudyingAtSchool(James)", "all x.(James(x) -> -Student(x))", "-(Customer(James) & StudyingAtSchool(James))", "all x.(James(x) -> -Student(x))", "all x.((Customer(x) & -StudyingAtSchool(x)) -> James(x))", "James is not currentlyStudyingAtSchool(James)", "-(Customer(Jim) & StudyingAtSchool(Jim))"]}
{"id": "folio_train_1241", "nl": "James is a customer who does not choose any plans.", "fol": "(Customer(James) & -(ChoosesPlanA(James) | ChoosesPlanB(James)))", "prediction": ["all x.((Customer(x) & -ChoosesPlans(x)) -> James(x))", "(Customer(James) & -ChoosesPlans(James))", "James is a customer who does not choose any plans.", "all x.((Customer(x) & -ChoosesPlans(x)) -> James(x))", "all x y.((Customer(x) & James(y)) -> -ChoosesPlan(x,y))", "(Customer(Jim) & -ChoosesPlans(Jim))", "(Customer(James) & -ChoosesPlan(James))", "all x.((Customer(x) & -ChoosesPlan(x)) -> James(x))", "all x.(Customer(x) -> -ChoosesPlans(x))", "James is a customer who does not choose any plans.", "All x.(James(x) -> (Customer(x) & -ChoosesPlans(x)))", "James is a customer who does not choose any plans.", "all x.((Customer(x) & -ChosesPlan(x)) -> James(x))", "all x.((Customer(x) & -ChoosesPlans(x)) -> James(x))", "(Customer(James) & -ChoosesPlans(James))", "all x.(Customer(x) -> -ChoosesPlans(x))"]}
{"id": "folio_train_1242", "nl": "James is a customer who chooses Plan A or does not choose any plans.", "fol": "(ChoosesPlanA(James) | -ChooseAnyPlan(James))", "prediction": ["all x.((Customer(x) & (ChoosesPlanA(x) | -ChoosesPlanA(x))) -> James(x))", "all x y.((Customer(x) & Customer(y) & (ChoosesPlanA(x,y) | -ChoosesPlanA(x,y))) -> James(x))", "(Customer(James) & (ChoosesPlanA(James) | -ChoosesPlanA(James)))", "all x.((Customer(x) & (ChoosesPlanA(x) | -ChoosesPlanA(x))) -> James(x))", "all x.((Customer(x) & (ChosesPlanA(x) | -ChosesPlanA(x))) -> James(x))", "(Customer(James) & (ChoosesPlanA(James,Plan) | -ChoosesPlanA(James,Plan)))", "all x y.((Customer(x) & Customer(y) & (ChoosesPlanA(x,y) | -ChoosesPlanA(x,y))) -> James(x))", "(Customer(James) & (ChoosesPlanA(James) | -ChoosesPlanA(James)))", "all x.((Customer(x) & (ChoosesPlanA(x) | -ChoosesPlanB(x))) -> James(x))", "all x.((Customer(x) & (CHOOSEsPlanA(x) | -CHOOSEsPlanA(x))) -> James(x))", "all x.(Customer(x) -> ((ChosesPlanA(x) | -ChosesPlanB))))", "(Customer(Jimmy) & ((ChoosesPlanA(Jimmy) | -ChoosesPlanA(Jimmy))))", "all x.(Customer(x) -> (ChosesPlanA(x) | -ChosesPlanA(x)))", "((Customer(James) & (ChoosesPlanA(James) | -ChoosesPlanA(James))))", "All x y.((Customer(x) & Customer(y) & (ChoosesPlanA(x,y) | -ChoosesPlanB(x,y))) -> James(x))", "all x.((Customer(x) & (CHOOSEsPlanA(x) | -CHOOSEsPlan(x))) -> James(x))"]}
{"id": "folio_train_1243", "nl": "Suppose James is a customer who chooses Plan A or does not choose any plans, then he is either rewarded a $30 gift card or chooses Plan B.", "fol": "((ChoosesPlanA(James) | -DoesNotChooseAnyPlan(James)) -> (RewardedWithGiftCard(James) | ChoosesPlanB(James)))", "prediction": ["all x.((Customer(x) & (ChoosesPlanA(x) | -ChoosesPlanB(x))) -> (Rewarded(x,30) | ChoosesPlanB(x,30)))", "all x y.((Customer(x) & Customer(y) & (ChoosesPlanA(x,y) | -ChoosesPlanB(x,y))) -> (Rewarded(x,y) | ChoosesPlanB(x,y)))", "(all x.((Customer(x) & (ChoosesPlanA(x) | -ChoosesPlanB(x))) -> (RewardedWithGiftCard(x,30) | ChoosesPlanB(x,30)))", "((Customer(James) & Customer(James) & (ChoosesPlanA(James) | -ChoosesPlans(James))) -> (RewardedGiftCard(James) | ChoosesPlanB(James)))", "((Customer(James) & (ChoosesPlanA(James) | DoesNotChoosePlans(James))) -> (Rewarded(James,30) | ChoosesPlanB(James,30)))", "all x.((Customer(x) & (ChoosesPlanA(x) | -ChoosesPlanB(x))) -> (Rewarded(x,30) | ChoosesPlanB(x,30)))", "((Customer(James) & (ChoosesPlanA(James) | ChoosesPlanB(James))) -> (Rewarded(James,30) | ChoosesPlanB(James,30)))", "all x.((Customer(x) & (CHOOSESPlanA(x) | -CHOOSESPlans(x))) -> (Rewarded(x,30) | ChoosesPlanB(x,30)))", "(Client(Jim) & ((ChoosesPlanA(Jim) | -ChoosesPlanB(Jim))) | (-ChoosesPlanB(Jim)))))", "all x.((Customer(x) & (ChoosesPlanA(x) | -ChoosesPlans(x))) -> (Recognized(x,30) | ChoosesPlanB(x,30)))", "all x y.((Customer(x) & Customer(y) & ((ChoosesPlanA(x,y) | -ChoosesPlanB(x,y))) -> (Rewarded(x,y) | ChoosesPlanB(x,y))))", "all x y.((Customer(x) & Customer(y) & (ChoosesPlanA(x,y) | -ChoosesPlanB(x,y))) -> (Rewarded(x,y) | ChoosesPlanB(x,y)))", "all x.((Customer(x) & (ChosesPlanA(x) | -ChosesPlanB(x))) -> (Recognized(x,30) | ChoosesPlanB(x,30)))", "(all x.((Customer(x) & (ChoosesPlanA(x) | -ChoosesPlanA(x))) -> (Recognized(x,30) | ChoosesPlanB(x,30))))", "all x.((Customer(x) & (ChoosesPlanA(x) | -ChoosesPlanB(x))) -> (Recognized(x,30) | ChoosesPlanB(x,30)))", "all x.((Customer(x) & ((ChoosesPlanA(x) | -ChoosesPlanB(x))) -> (RewardedGiftCard(x,30) | ChoosesPlanB(x,30))))"]}
{"id": "folio_train_1244", "nl": "Detroit City is a horse.", "fol": "IsHorse(Detroitcity)", "prediction": ["all x.(Delta(x) -> Horse(x))", "all x.((Delta(x) & Horse(x)) -> DetroitCity(x))", "(Horse(DetroitCity) & Horse(DetroitCity))", "all x.(Delta(x) -> Horse(x))", "all x y.((Delta(x) & DetroitCity(y)) -> Horse(x))", "all x.(DetroitCity(x) -> Horse(x))", "(Horse(DetroitCity) & Horse(DetroitCity))", "(Horse(Delta) & Horse(Delta))", "DetroitCity(x) & Horse(x))", "all x.((Delta(x) & Horse(x)) -> DetroitCity(x))", "all x.(Delta(x) -> Horse(x))", "(Horse(DetroitCity) & Horse(DetroitCity))", "all x.(DetroitCity(x) -> Horse(x))", "all x.(DelawareCity(x) -> Horse(x))", "All x.(DevonCity(x) -> Horse(x))", "All x.(DetroitCity(x) -> Horse(x))"]}
{"id": "folio_train_1245", "nl": "Some horses are racehorses.", "fol": "exists x.(IsHorse(x) & IsRacehorse(x))", "prediction": ["exists x.(Horse(x) & Racehorse(x))", "exists x.(Horse(x) & Racehorse(x))", "exists x.(Horse(x) & Racehorse(x))", "exists x y.(Horse(x) & Horse(y) & Racehorse(x))", "exists x.(Horse(x) & Racehorse(x))", "exists x.(Horse(x) & Racehorse(x))", "exists x.(Hoch(x) & Racehorse(x))", "all x y.((Horse(x) & Horse(y)) -> Racehorse(x))", "exists x.(Horse(x) & Racehorse(x))", "exists x.(Hoch(x) & Racehorse(x))", "exists x.(Hockey(x) & Racehorse(x))", "exists x.(Horse(x) & Racehorse(x))", "exists x.(Horse(x) & Racehorse(x))", "exists x.(Horse(x) & Racehorse(x))", "exists x.(Horse(x) & Racehorse(x))", "exists x.(Horse(x) & RaceHorse(x))"]}
{"id": "folio_train_1246", "nl": "If a horse falls during a race, then it dies.", "fol": "all x.((IsHorse(x) & IsInRace(x) & HasFallen(x)) -> IsDead(x))", "prediction": ["all x.((Horse(x) & FallsDuringRace(x)) -> Dies(x))", "all x y.((Horse(x) & Race(y) & FallsDuring(x,y)) -> Dies(x))", "all x.((Horse(x) & FallsDuringRace(x)) -> Dies(x))", "all x y.((Horse(x) & Race(y) & FallsDuring(x,y)) -> Dies(x))", "all x.(FallsDuringRace(x) -> Dies(x))", "all x.((Horse(x) & FallsDuringRace(x)) -> Dies(x))", "all x y.((Horse(x) & FallsDuringRace(x)) -> Dies(x))", "all x y.((Horse(x) & Race(y) & FallsDuring(x,y)) -> Dies(x))", "exists x.(Horse(x) & FallsDuringRace(x) & DiesDuringRace(x))", "all x y.((Horse(x) & FallDuringRace(x,y)) -> Dies(x))", "all x.((Horse(x) & FallsDuringRace(x)) -> Dies(x))", "all x.(FallsDuringRace(x) -> Dies(x))", "exists x.(Horse(x) & FallsDuringRace(x) & DiesDuringRace(x))", "all x.((Horse(x) & FallsDuringRace(x)) -> Dies(x))", "all x y.((Horse(x) & Race(y) & FallsDuring(x,y)) -> Dies(x))", "all x.((Horse(x) & FallsDuringRace(x)) -> Dies(x))"]}
{"id": "folio_train_1247", "nl": "Detroit City fell during a race.", "fol": "(IsInRace(Detroitcity) & HasFallen(Detroitcity))", "prediction": ["all x.((Delta-City(x) & Race(y)) -> FallsDuring(x,y))", "all x y.((Delta(x) & DetroitCity(y)) -> FallsDuringRace(x,y))", "all x.(DelawareCity(x) -> FallsDuringRace(x))", "all x.((DelawareCity(x) & Race(y)) -> FallsDuring(x,y))", "all x y.((DelawareCity(x) & Race(y)) -> FalledDuring(x,y))", "all x y z.((DeltahCity(x) & Race(y) & Race(z) & FalledDuring(x,y,z)) -> Race(x))", "(FallsDuringRace(DetroitCity))", "(Fall(Delta-City) & Race(Delta-City))", "all x.(Delta(x) -> FallsDuringRace(x))", "all x y.((Delta(x) & City(y)) -> FallsDuringRace(x,y))", "(FallsDuringRace(DetroitCity) & InRace(DetroitCity))", "all x.(DetroitCity(x) -> FalledDuringRace(x))", "all x.((Delta-City(x) & Race(x)) -> FallsDuring(x,y))", "all x y.((DelawareCity(x) & Race(y)) -> FalledDuring(x,y))", "(FallsDuringRace(DetroitCity))", "(FallsDuringRace(DetroitCity,Race))"]}
{"id": "folio_train_1248", "nl": "A horse is a racehorse if it is in a race.", "fol": "all x.((IsHorse(x) & IsInRace(x)) -> IsRacehorse(x))", "prediction": ["all x.((Horse(x) & InRace(x)) -> Racehorse(x))", "all x.(Racehorse(x) -> (Horse(x) & InRace(x)))", "all x.((Horse(x) & InRace(x)) -> Racehorse(x))", "all x y.((Horse(x) & Race(y) & InRace(x,y)) -> Racehorse(x))", "all x.((Horse(x) & InRace(x)) -> Racehorse(x))", "all x.(Racehorse(x) -> (Horse(x) & InRace(x)))", "all x y.((Horse(x) & Racehorse(y)) -> InRace(x,y))", "exists x.(Horse(x) -> (Horse(x) & InRace(x)))", "all x.((Horse(x) & Race(x)) -> Racehorse(x))", "all x.((Horse(x) & InRace(x)) -> Racehorse(x))", "all x.(Racehorse(x) -> (Horse(x) & InRace(x)))", "all x y.((Horse(x) & Racehorse(y)) -> InRace(x,y))", "all x y.((Horse(x) & Race(y) & InRace(x,y)) -> Racehorse(x))", "all x.((Horse(x) & InRace(x)) -> Racehorse(x))", "all x.(Racehorse(x) -> (Horse(x) & InRace(x)))", "all x.((Horse(x) & InRace(x)) -> Racehorse(x))"]}
{"id": "folio_train_1249", "nl": "Detroit City is dead.", "fol": "IsDead(Detroitcity)", "prediction": ["all x.(Delta(x) -> Dead(x))", "(Delta(DetroitCity) -> Dead(DetroitCity))", "DetroitCity(x) -> Dead(x))", "(Delta(DeltaCity) -> Dead(DeltaCity))", "DetroitCityDead(x)", "(Decline(DetroitCity) -> Dead(DetroitCity))", "all x.(DetroitCity(x) -> Dead(x))", "Detroit City is dead.", "all x.(Delta(x) -> Dead(x))", "(Delta(DetroitCity,Detroit))", "All x.(Delta(x) -> Dead(x))", "All x.(DetroitCity(x) -> Dead(x))", "DetroitCity(x) & Dead(x))", "all x.(Delta(x) -> DetroitCity(x))", "all x.(Delta(x) -> Dead(x))", "All x.(DetroitCity(x) -> Dead(x))"]}
{"id": "folio_train_1250", "nl": "Detroit City is a racehorse.", "fol": "IsRacehorse(Detroitcity)", "prediction": ["all x.((Delta(x) & Racehorse(x)) -> DetroitCity(x))", "all x.(Delta(x) -> Racehorse(x))", "(Racehorse(DetroitCity))", "all x.((Delta(x) & DetroitCity(x)) -> Racehorse(x))", "all x.((DelawareCity(x) & Racehorse(x)) -> Racehorse(x))", "(Racehorse(Delta-City) & LivesIn(Delta-City))", "all x.(DetroitCity(x) -> Racehorse(x))", "all x y.((Delta(x) & DetroitCity(y)) -> Racehorse(x))", "all x.((Delta-City(x) & Racehorse(x)) -> Racehorse(x))", "all x.(Delta(x) -> Racehorse(x))", "(Racehorse(DetroitCity)", "all x y.((DelawareCity(x) & Detroit(y)) -> Racehorse(x))", "all x.(DetroitCity(x) -> Racehorse(x))", "(Racehorse(DetroitCity)", "all x.(DelawareCity(x) -> Racehorse(x))", "All x.(Delta(x) -> Racehorse(x))"]}
{"id": "folio_train_1251", "nl": "Frederick Monhoff was an architect, artist, and illustrator.", "fol": "(IsArchitect(Monhoff) & IsArtist(Monhoff) & IsIllustrator(Monhoff))", "prediction": ["Frederick Monhoff (Architect(Frederick) & Artist(Fredrick) & Illustrator(Fredrick))", "Frederick Monhoff ((Architect(e) & Artist(e) & Illustrator(e)))", "(Architect(FredrickMonhoff) & Artist(FredrickMonhoff) & Illustrator(FredrickMonhoff))", "(Architect(FrederickMonhoff) & Artist(FredrickMonhoff) & Illustrator(FredrickMonhoff))", "all x.(FredrickMonhoff(x) -> (Architect(x) & Artist(x) & Illustrator(x)))", "Frederick Monhoff (Architect,Artist,Illustrator)", "Frederick Monhoff(f) & Architect(f) & Artist(f) & Illustrator(f))", "Frederick Monhoff ((Architect(e) | Artist(e) | Illustrator(e)))", "Frederick Monhoff(f) was an architect,artist,illustrator,etc.", "(Architect(FredrickMonhoff) & Artist(FredrickMonhoff) & Illustrator(FredrickMonhoff))", "(Architect(FrederickMonhoff) & Artist(FrederickMonhoff) & Illustrator(FrederickMonhoff))", "Frederick Monhoff (*1927 & Architect(e) & Artist(e) & Illustrator(e))", "-Architect(FredrickMonhoff)", "Frederick Monhoff (Architect(f) & Artist(f) & Illustrator(f))", "(Architect(Fredric Monhoff) & Artist(FredricMonhoff) & Illustrator(FredricMonhoff))", "(Architect(FredrickMonhoff) & Artist(FredrickMonhoff) & Illustrator(FredrickMonhoff))"]}
{"id": "folio_train_1252", "nl": "Frederick Monhoff was an American.", "fol": "IsAmerican(Monhoff)", "prediction": ["all x.(FredrickMonhoff(x) -> American(x))", "Frederick Monhoff (American)", "(American(FredrickMonhoff) & American(Monhoff))", "(American(FrederickMonhoff) & BornIn(FrederickMonhoff))", "all x.((FredrickMonhoff(x) & American(x)) -> Was(x,y))", "(American(FredrickMonhoff) & American(FredrickMonhoff))", "All x.(FredrickMonhoff(x) -> American(x))", "-American(FredrickMonhoff)", "Frederick Monhoff (American)", "all x.((FrederickMonhoff(x) & American(x)) -> Was(x,y))", "(American(FredrickMonhoff) & BornIn(FredrickMonhoff,French))", "Frederick Monhoff was American.", "Frederick Monhoff(f) was American(f)", "All x.(FredrickMonhoff(x) -> American(x))", "Frederick Monhoff (American)", "Frederick Monhoff was American."]}
{"id": "folio_train_1253", "nl": "An artist is good at painting or music.", "fol": "all x.((IsArtist(x) -> SkilledIn(x,Painting)) | SkilledIn(x,Music))", "prediction": ["all x.(Artist(x) -> (GoodAtPainting(x) | GoodAtMusic(x)))", "all x.(Artist(x) -> (GoodAtPainting(x) | GoodAtMusic(x)))", "all x y.((Artist(x) & (GoodAtPainting(x) | GoodAtMusic(x))) -> GoodAt(x,y))", "all x.(Artist(x) -> (GoodAtPainting(x) | GoodAtMusic(x)))", "all x y.(Artist(x) -> (GoodAtPainting(x) | GoodAtMusic(x)))", "all x.(Artist(x) -> (GoodAtPainting(x) | GoodAtMusic(x)))", "all x y.(Artist(x) -> (GoodAtPainting(x) | GoodAtMusic(x)))", "exists x.(Artist(x) & (GoodPainting(x) | GoodMusic(x)))", "all x.(Artist(x) -> (GoodAtPainting(x) | GoodAtMusic(x)))", "all x y.(Artist(x) -> (GoodAtPainting(x) | GoodAtMusic(x)))", "all x.(Artist(x) -> (GoodAtPainting(x) | GoodAtMusic(x)))", "exists x.(Artist(x) & GoodAtPainting(x) & GoodAtMusic(x))", "exists x.(Artist(x) & (GoodAt(x,Painting) | GoodAt(x,Music)))", "exists x.(Artist(x) & (GoodAtPainting(x) | GoodAtMusic(x)))", "all x.(Artist(x) -> (GoodAtPainting(x) | GoodAtMusic(x)))", "exists x.(Artist(x) & GoodAtPainting(x) & GoodAtMusic(x))"]}
{"id": "folio_train_1254", "nl": "All Americans speak English.", "fol": "all x.(IsAmerican(x) -> SpeaksLanguage(x,English))", "prediction": ["all x.(American(x) -> SpeaksEnglish(x))", "all x.(American(x) -> SpeaksEnglish(x))", "(all x.(American(x) -> SpeaksEnglish(x)))", "all x.(American(x) -> SpeaksEnglish(x))", "all x.(American(x) -> SpeaksEnglish(x))", "(all x.(American(x) -> SpeaksEnglish(x)))", "(all x.(American(x) -> SpeakEnglish(x)))", "all x y.((American(x) & American(y)) -> SpeaksEnglish(x,y))", "all x.(American(x) -> SpeaksEnglish(x))", "all x.(American(x) -> SpeakEnglish(x))", "all x.(American(x) -> SpeakEnglish(x))", "all x y.((American(x) & English(y)) -> Speaks(x,y))", "all x.(American(x) -> SpeakEnglish(x))", "all x.(American(x) -> SpeaksEnglish(x))", "all x.(American(x) -> SpeaksEnglish(x))", "All x.(Amerikaner(x) -> SpeaksEnglish(x))"]}
{"id": "folio_train_1255", "nl": "Frederick Monhoff is good at music.", "fol": "SkilledIn(Monhoff,Music)", "prediction": ["all x.(FredrickMonhoff(x) -> GoodAtMusic(x))", "all x.((FredrickMonhoff(x) & GoodAtMusic(x)) -> GoodAtMusic(x))", "Frederick Monhoff is goodAtMusic(FrederickMonhoff)", "(GoodAtMusic(FrederickMonhoff)", "-GoodAtMusic(FrederickMonhoff)", "Frederick Monhoff is goodAtMusic(FrederickMonhoff)", "all x.(FredrickMonhoff(x) -> GoodAtMusic(x))", "(GoodAtMusic(FredrickMonhoff)", "all x.(FrederickMonhoff(x) -> GoodAtMusic(x))", "Frederick Monhoff is goodAtMusic(FrederickMonhoff)", "all x.(FredricMonhoff(x) -> GoodAtMusic(x))", "(GoodAtMusic(FrederickMonhoff)", "Frederick Monhoff is goodAtMusic(f)", "(GoodAtMusic(FredricMonhoff)", "all x.(FredrickMonhoff(x) -> GoodAtMusic(x))", "All x.(FredricMonhoff(x) -> GoodAtMusic(x))"]}
{"id": "folio_train_1256", "nl": "There is no illustrator who speaks English.", "fol": "-exists x.(IsIllustrator(x) & SpeaksLanguage(x,English))", "prediction": ["-exists x.(Illustrator(x) & SpeaksEnglish(x))", "exists x.(Illustrator(x) & -SpeaksEnglish(x))", "-exists x.(Illustrator(x) & SpeaksEnglish(x))", "there is no illustrator who speaksEnglish.", "exists x.(Illustrator(x) & -SpeaksEnglish(x))", "Es gibt keine Illustrator(e) & SpeaksEnglish(e)", "-exists x.(Illustrator(x) & SpeaksEnglish(x))", "exists x.(Illustrator(x) & -SpeaksEnglish(x))", "(exists x.(Illustrator(x) & SpeaksEnglish(x)))", "-exists x.(illustrator(x) & SpeaksEngland(x))", "-exists x.(Illustrator(x) & SpeaksEngland(x))", "(exists x.(Illustrator(x) & SpeaksEngland(x)))", "exists x.(Illustrator(x) & DoesSpeakEnglish(x))", "exists x.(Illustrator(x) & -SpeaksEnglish(x))", "-exists x.(Illustrator(x) & SpeaksEnglish(x))", "-exists x.(Illustrator(x) & SpeaksEnglisch(x))"]}
{"id": "folio_train_1257", "nl": "Miroslav Fiedler was a Czech mathematician.", "fol": "(IsCzech(Miroslavfiedler) & IsMathematician(Miroslavfiedler))", "prediction": ["Miroslav Fiedler (CzechMathematician)", "all x.(MiroslavFiedler(x) -> CzechMathematician(x))", "(CzechMathematician(MiroslavFiedler) & FoundedIn(MiroslavFiedler,Czech))", "all x.((MiroslavFiedler(x) & CzechMathematician(x)) -> -Mathematician(x))", "(CzechMathematician(MiroslavFiedler) & FoundedIn(MiroslavFiedler,Czech))", "Miroslav Fiedler (CzechMathematician)", "(MiroslavFiedler(Mathematician) & Czech(Mathematician))", "(MiroslavFiedler) & CzechMathematician(Mathematician)", "(CzechMathematician(MiroslavFiedler)", "all x.((MiroslavFiedler(x) & CzechMathematician(x)) -> -Mathematician(x))", "all x.(MiroslavFiedler(x) -> CzechMathematician(x))", "Miroslav Fiedler (CzechMathematician)", "MiroslavFiedler(c) & CzechMathematician(c) & EducatedIn(c,c,c))", "Miroslav Fiedler was a Czech Mathematician.", "Miroslav Fiedler (CzechMathematician)", "Miroslav Fiedler (czechMathematician)"]}
{"id": "folio_train_1258", "nl": "Miroslav Fiedler is known for his contributions to linear algebra and graph theory.", "fol": "KnownForContributions(Miroslavfiedler,ContributionsToLinearAlgebraAndGraphTheory)", "prediction": ["all x.((MiroslavFiedler(x) & ContributionsToLinearAlgebra(x) & ContributionsToGraphTheory(x)) -> MiroslavFiedler(x))", "(ContributionsToLinearAlgebra(MiroslavFiedler) & ContributionsToGraphTheory(MiroslavFiedler))", "(LinialAlgebra(MiroslavFiedler) & GraphTheory(MiroslavFiedler))", "Miroslav Fiedler is known for his contributions to linearalgebra and graphtheory.", "Miroslav Fiedler is known for his contributions to LinearAlgebra(Miroslav Fiedler) & toGraphTheory(Miroslav Fiedler)", "((MiroslavFiedler(Miroslav) Fiedler) & ContributionsToLinearAlgebra(Miroslav) & ContributionsToGraphTheory(Miroslav)))", "all x.(MiroslavFiedler(x) -> (ContributionsToLinearAlgebra(x) & ContributionsToGraphTheory(x)))", "(all x.((MiroslavFiedler(x) & LinearAlgebra(x)) -> GraphTheory(x)))", "all x y.((MiroslavFiedler(x) & LinearAlgebra(y) & GraphTheory(y)) -> ContributesTo(x,y))", "all x.((MiroslavFiedler(x) & ContributionsToLinearAlgebra(x) & ContributionsToGraphTheory(x)) -> MiroslavFiedler(x))", "Miroslav Fiedler (Miroslav) & ContributionsToLinearAlgebra(Miroslav) & ContributionsToGraphTheory(Miroslav))", "Miroslav Fiedler is known for his contributions to linearAlgebra and GraphTheory.", "Miroslav Fiedler is known for his ContributionsToLinearAlgebraAndGraphTheory(MiroslavFiedler)", "Miroslav Fiedler (Miroslav) & ContributionsToLinearAlgebraAndGraphTheory(Miroslav))", "all x.((MiroslavFiedler(x) & ContributionsToLinearAlgebra(x) & ContributionsToGraphTheory(x)) -> KnownFor(x,y))", "all x.((MiroslavFiedler(x) & ContributesToLinearAlgebra(x) & ContributesToGraphTheory(x)) -> KnownFor(x,y))"]}
{"id": "folio_train_1259", "nl": "Miroslav Fiedler is honored by the Fiedler eigenvalue.", "fol": "HonoredByEigenvalue(Miroslavfiedler,FiedlerEigenvalue)", "prediction": ["all x.((MiroslavFiedler(x) & FiedlerEigenvalue(x)) -> Honored(x))", "Miroslav Fiedler is honored by FiedlerEigenvalue(MiroslavFiedler)", "(HonoredByEigenvalue(MiroslavFiedler)", "all x y.((MiroslavFiedler(x) & FiedlerEigenvalue(y)) -> HonoredBy(x,y))", "(EhrenderedByEigenvalue(MiroslavFiedler)", "all x.(FiedlerEigenvalue(x) -> HonoredBy(x,FiedlerEigenvalue))", "all x.((MiroslavFiedler(x) & FiedlerEigenvalue(x)) -> HonoredBy(x,Fiedler))", "Miroslav Fiedler is honored by FiedlerEigenvalue.", "(HeraldedByEigenvalue(MiroslavFiedler)", "all x.(Fiedler(x) -> HonoredByEigenvalue(x))", "MiroslavFiedler is honoredByEigenvalue(MiroslavFiedler)", "(HonoredByEigenvalue(MiroslavFiedler)", "(EhrenderedByFiedlerEigenvalue(MiroslavFiedler)", "Miroslav Fiedler is honored by FiedlerEigenvalue(MiroslavFiedler)", "all x.((MiroslavFiedler(x) & FiedlerEigenvalue(x)) -> Honored(x))", "Miroslav Fiedler is honored by the FiedlerEigenvalue."]}
{"id": "folio_train_1260", "nl": "Fiedler eigenvalue is the second smallest eigenvalue of the graph Laplacian.", "fol": "SecondSmallestEigenvalueOf(FiedlerEigenvalue,TheGraphLaplacian)", "prediction": ["all x.(FiedlerEigenvalue(x) -> (SecondSmallestEigenvalueOfGraphLaplacian(x)))", "(SecondSmallestEigenvalueOfGraphLaplacian(Fiedler))", "(SmallestEigenvalueOfGraphLaplacian(Fiedler))", "Die FiedlerEigenvalue(e) -> (SecondSmallestEigenvalueOfGraphLaplacian(e) & GraphLaplacian(e)))", "-SmallestEigenvalueOfGraphLaplacian(Fiedler)", "(SecondSmallestEigenvalue(Fiedler) & LaplacianGraph(Fiedler))", "all x.(Eigenvalue(x) -> (SecondSmallestEigenvalue(x) & LaplacianGraph(x)))", "all x.(FiedlerEigenvalue(x) -> (SecondSmallestEigenvalue(x) & LaplacianGraph(x)))", "the second smallest eigenvalue of the graph Laplacian.", "Die FiedlerEigenvalue(e) & GraphLaplacian(e) & SecondSmallestEigenvalue(e))", "Der FiedlerEigenvalue(f) -> (SecondSmallestEigenvalueOfGraphLaplacian(f)))", "-SmallestEigenvalueOfGraphLaplacian(FiedlerEigenvalue)", "(SecondSmallestEigenvalueOfGraphLaplacian(Fiedler))", "all x.(FiedlerEigenvalue(x) -> SecondSmallestEigenvalueOfGraphLaplacian(x))", "(SmallestEigenvalueOfGraphLaplacian(Fiedler))", "the second smallest eigenvalue of the graph Laplacian."]}
{"id": "folio_train_1261", "nl": "Miroslav Fiedler is honored by the second smallest eigenvalue of the graph Laplacian.", "fol": "exists x.(HonoredByEigenvalue(Miroslavfiedler,x) & SecondSmallestEigenvalueOf(x,TheGraphLaplacian))", "prediction": ["all x.((MiroslavFiedler(x) & SecondSmallestEigenvalue(x)) -> HonoredByGraphLaplacian(x))", "(HonoredBySecondSmallestEigenvalue(MiroslavFiedler) & LaplacianGraph(MiroslavFiedler))", "Miroslav Fiedler is honored by the second smallestEigenvalueOfGraphLaplacian.", "(Eigenvalue(MiroslavFiedler) & SecondSmallest(MiroslavFiedler,GraphLaplacian))", "((MiroslavFiedler(Miroslav) Fiedler) & SecondSmallestEigenvalue(Miroslav)) -> HonoredByGraphLaplacian(Miroslav))", "all x y.((MiroslavFiedler(x) & GraphLaplacian(y)) -> HonoredBySecondSmallestEigenvalue(x,y))", "(SecondSmallestEigenvalueOfGraphLaplacian(MiroslavFiedler))", "-(MiroslavFiedler(Miroslav) & SecondSmallestEigenvalue(Miroslav))", "all x.((MiroslavFiedler(x) & SecondSmallestEigenvalueOfGraphLaplacian(x)) -> Honored(x))", "(HonoredBySecondSmallestEigenvalueOfGraphLaplacian(MiroslavFiedler))", "Miroslav Fiedler is honored by the second smallestEigenvalueOfGraphLaplacian(MiroslavFiedler)", "(Eigenvalue(MiroslavFiedler) & SecondSmallestOfGraphLaplacian(MiroslavFiedler))", "Miroslav Fiedler is honored by the second smallest eigenvalue of the graph Laplacian.", "all x.((MiroslavFiedler(x) & SecondSmallestEigenvalue(x,GraphLaplacian)) -> Honored(x))", "all x.((MiroslavFiedler(x) & SecondSmallerEigenvalue(x,Laplacian)) -> Honored(x))", "Miroslav Fiedler is honored by the second smallestEigenvalueOfGraphLaplacian."]}
{"id": "folio_train_1262", "nl": "Miroslav Fiedler was a French mathematician.", "fol": "(French(Miroslavfiedler) & IsMathematician(Miroslavfiedler))", "prediction": ["(FrenchMathematician(MiroslavFiedler) & FoundedIn1914(MiroslavFiedler,FrenchMathematician))", "all x.(FrenchMathematician(x) -> MiroslavFiedler(x))", "Miroslav Fiedler (FrenchMathematician) & FoundedIn1914.", "all x.(MiroslavFiedler(x) -> FrenchMathematician(x))", "(FrenchMathematician(MiroslavFiedler) & FoundedIn1914(MiroslavFiedler,FrenchMathematician))", "Miroslav Fiedler (FrenchMathematician)", "MiroslavFiedler(f).(FrenchMathematician(f) & Mathematician(f))", "(FrenchMathematician(MiroslavFiedler) & FoundedIn1950(MiroslavFiedler))", "Miroslav Fiedler (FrenchMathematician) & FoundedIn1914.", "all x.(FrenchMathematician(x) -> MiroslavFiedler(x))", "Miroslav Fiedler was a French Mathematician.", "(FrenchMathematician(MiroslavFiedler) & Mathematician(MiroslavFiedler))", "(FrenchMathematician(MiroslavFiedler) & OriginallyFrenchMathematician(MiroslavFiedler))", "MiroslavFiedler(Mathematician) & French(Mathematician)", "Miroslav Fiedler (FrenchMathematician)", "Miroslav Fiedler (FrenchMathematician)"]}
{"id": "folio_train_1263", "nl": "A Czech mathematician is known for his contributions to linear algebra and graph theory.", "fol": "exists x.(IsCzech(x) & IsMathematician(x) & KnownForContributions(x,ContributionsToLinearAlgebraAndGraphTheory))", "prediction": ["all x.(CzechMathematician(x) -> (KnownForLinearAlgebra(x) & KnownForGraphTheory(x)))", "all x.((CzechMathematician(x) & ContributionsToLinearAlgebra(x) & ContributionsToGraphTheory(x)) -> KnownFor(x,y))", "all x.(CzechMathematician(x) -> (ContributesToLinearAlgebra(x) & ContributesToGraphTheory(x)))", "all x y.((CzechMathematician(x) & LinearAlgebra(y) & GraphTheory(x)) -> ContributesTo(x,y))", "(CzechMathematician(Czech) & ContributesToLinearAlgebra(Czech) & ContributesToGraphTheory(Czech))", "all x.((CzechMathematician(x) & ContributesToLinearAlgebra(x) & ContributesToGraphTheory(x)) -> KnownFor(x,y))", "all x.(CzechMathematician(x) -> (KnownForContributionsToLinearAlgebra(x) & KnownForGraphTheory(x)))", "all x y.((CzechMathematician(x) & LinearAlgebra(y) & GraphTheory(z)) -> ContributesTo(x,y,z))", "all x.(CzechMathematician(x) -> (KnownForLinearAlgebra(x) & KnownForGraphTheory(x)))", "all x y z.((CzechMathematician(x) & LinearAlgebra(y) & GraphTheory(z)) -> ContributesTo(x,y,z))", "all x y.((CzechMathematician(x) & ContributionsToLinearAlgebra(x) & ContributionsToGraphTheory(x)) -> KnownFor(x,y))", "all x.((CzechMathematician(x) & ContributionsToLinearAlgebra(x) & ContributionsToGraphTheory(x)) -> KnownFor(x,y))", "all x y.((CzechMathematician(x) & LinearAlgebra(y) & GraphTheory(y)) -> KnownFor(x,y))", "exists x.(CzechMathematician(x) & ContributesToLinearAlpha(x) & ContributesToGraphTheory(x))", "all x.((CzechMathematician(x) & ContributesToLinearAlgebra(x) & ContributesToGraphTheory(x)) -> KnownFor(x,LinearAlgebra,GraphTheory))", "exists x.(CzechMathematician(x) & ContributesToLinearAlgebra(x) & ContributesToGraphTheory(x))"]}
{"id": "folio_train_1264", "nl": "A laptop is a computer.", "fol": "all x.(IsLaptop(x) -> IsComputer(x))", "prediction": ["all x.(Laptop(x) -> Computer(x))", "all x.(Laptop(x) -> Computer(x))", "all x y.((Laptop(x) & Computer(y)) -> Computer(x))", "all x.(Laptop(x) -> Computer(x))", "all x y.((Laptop(x) & Computer(y)) -> Computer(x))", "all x.(Laptop(x) -> Computer(x))", "all x y.((Laptop(x) & Computer(y)) -> Computer(x))", "all x.(Laptop(x) -> Computer(x))", "all x.(Laptop(x) -> Computer(x))", "all x.(Laptop(x) -> Computer(x))", "all x.(Laptop(x) -> Computer(x))", "all x.(Laptop(x) -> Computer(x))", "all x.(Laptop(x) -> Computer(x))", "exists x.(Laptop(x) & Computer(x))", "exists x.(Laptop(x) & Computer(x))", "exists x.(Laptop(x) & Computer(x))"]}
{"id": "folio_train_1265", "nl": "You can play games on a computer.", "fol": "all x.(IsComputer(x) -> CanPlayGamesOnComputer(x))", "prediction": ["all x y.((Computer(x) & Computer(y)) -> PlayGames(x,y))", "all x.(PlayGamesOnComputer(x) -> PlayGamesOnComputer(x))", "exists x.(Computer(x) & PlayGamesOn(x,Computer))", "all x y z.((Computer(x) & Game(y) & Computer(z)) -> PlaysOn(x,y,z))", "all x y.((Computer(x) & Computer(y)) -> PlaysGames(x,y))", "exists x.(Computer(x) & PlayGames(x))", "all x y.((Computer(x) & Computer(y)) -> PlayGamesOn(x,y))", "all x y z.((Computer(x) & Game(y) & Computer(z)) -> PlaysOn(x,y,z))", "exists x.(Computer(x) & PlayGamesOn(x,Computer))", "exists x.(Computer(x) & PlaysGamesOn(x,Computer))", "exists x.(Game(x) & PlayOnComputer(x))", "all x y.((Computer(x) & Computer(y)) -> PlaysGamesOn(x,y))", "exists x.(Game(x) & PlayOnComputer(x))", "all x y.((Computer(x) & Computer(y)) -> PlayGames(x,y))", "exists x.(Computer(x) & PlayGamesOn(x,Computer))", "all x y.((Computer(x) & Computer(y)) -> CanPlayGames(x,y))"]}
{"id": "folio_train_1266", "nl": "A phone is not a computer.", "fol": "all x.(IsPhone(x) -> -IsComputer(x))", "prediction": ["all x.(Phone(x) -> -Computer(x))", "all x.(Phone(x) -> -Computer(x))", "(-Computer(phone))", "all x y.((Phone(x) & Computer(y)) -> -Computer(x))", "all x.(Phone(x) -> -Computer(x))", "all x y.((Phone(x) & Computer(y)) -> -Computer(x))", "all x.(Phone(x) -> -Computer(x))", "all x.(Phone(x) -> -Computer(x))", "all x.(Phone(x) -> -Computer(x))", "all x.(Phone(x) -> -Computer(x))", "all x.(Phone(x) -> -Computer(x))", "all x.(Phone(x) -> -Computer(x))", "all x.(Phone(x) -> -Computer(x))", "exists x.(Phone(x) & -computer(x))", "exists x.(Phone(x) & -Computer(x))", "exists x.(Phone(x) & -Computer(x))"]}
{"id": "folio_train_1267", "nl": "You can play games on a laptop.", "fol": "all x.(IsLaptop(x) -> CanPlayGamesOnComputer(x))", "prediction": ["all x.(PlayGamesOnLaptop(x) -> PlayOnLaptop(x))", "all x y.((Laptop(x) & Laptop(y)) -> PlayGamesOn(x,y))", "exists x.(Laptop(x) & PlayGamesOn(x,Laptop))", "all x.(PlayGamesOnLaptop(x) -> CanBePlayedOnLaptop(x))", "all x y.((Laptop(x) & Laptop(y)) -> PlaysGamesOn(x,y))", "all x y z.((Laptop(x) & Game(y) & Laptop(z)) -> PlaysOn(x,y,z))", "exists x.(Laptop(x) & PlayGamesOn(x,Laptop))", "exists x.(Laptop(x) & PlaysGamesOn(x,Laptop))", "all x y.((Laptop(x) & Laptop(y)) -> PlayGames(x,y))", "all x y.((Laptop(x) & Laptop(y)) -> PlaysGames(x,y))", "exists x.(Laptop(x) & PlayGames(x))", "all x y.((PlaysGames(x) & Laptop(y)) -> PlaysOn(x,y))", "exists x.(PlayGamesOnLaptop(x))", "exists x.(Laptop(x) & PlaysGamesOn(x,Laptop))", "all x y.((Laptop(x) & Laptop(y)) -> PlayGamesOn(x,y))", "exists x.(PlayGamesOnLaptop(x))"]}
{"id": "folio_train_1268", "nl": "You can not play games on a phone.", "fol": "all x.(IsPhone(x) -> -CanPlayGamesOnComputer(x))", "prediction": ["all x.((Phone(x) & -PlayGamesOn(x)) -> -PlayGamesOn(x))", "all x.(PlayGamesOnPhone(x) -> -PlayGamesOnPhone(x))", "all x y.((Phone(x) & Phone(y)) -> -PlayGames(x,y))", "all x.((Phone(x) & -PlayGames(x)) -> -PlayGames(x))", "all x.(Phone(x) -> -PlayGamesOn(x,Phone))", "all x.(PlayGamesOnPhone(x) -> -CanPlayGamesOnPhone(x))", "(-PlayGamesOnPhone(x))", "-exists x.(PlayGamesOnPhone(x))", "all x y.((Phone(x) & Phone(y)) -> -PlaysGames(x,y))", "-exists x.(Phone(x) & PlaysGamesOn(x,Phone))", "exists x.(Phone(x) & -PlaysGamesOn(x,Phone))", "(-PlayGamesOnPhone(x))", "all x y.((Phone(x) & Phone(y)) -> -PlayGames(x,y))", "exists x.(Phone(x) & -PlaysGamesOn(x,Phone))", "exists x.(Phone(x) & -PlayGames(x))", "all x y.((Phone(x) & Phone(y)) -> -PlaysGames(x,y))"]}
{"id": "folio_train_1269", "nl": "Walter Folger Brown was an American politician and lawyer, and served as the postmaster general.", "fol": "(IsAmericanPolitician(Walterbrown) & IsLawyer(Walterbrown) & ServedAsPostmasterGeneral(Walterbrown,Postamastergeneral))", "prediction": ["Walter Folger Brown (AmericanPoliticianAndLawyer(Walter) & PostmasterGeneral(Walter))", "(AmericanPoliticianAndLawyer(WalterSueder Brown) & PostmasterGeneral(WalterSueder Brown))", "(AmericanPolitician(WalterSueder Brown) & Lawyer(WalterSueder Brown) & PostmasterGeneral(WalterSueder Brown))", "all x.((AmericanPolitician(x) & Lawyer(x) & PostmasterGeneral(x)) -> WalterSueder Brown(x))", "(AmeridianPoliticianAndLawyer(WalterSueder Brown) & PostmasterGeneral(WalterSueder Brown))", "All x.((WalterSueder Brown(x) & AmericanPolitician(x) & Lawyer(x) & PostmasterGeneral(x)) -> WalterSueder Brown(x))", "all x.((AmeridianPolitician(x) & Lawyer(x) & PostmasterGeneral(x)) -> WalterSuiterBrown(x))", "((AmeridianPolitician(Ameridian) & Lawyer(Ameridian) & PostmasterGeneral(Ameridian)) -> WalterSueder Brown(Ameridian))", "Walter Folger Brown (AmericanPoliticianAndLawyer(Walter) & PostmasterGeneral(Walter))", "(AmericanPoliticianAndLawyer(WalterSueder Brown) & PostmasterGeneral(WalterSueder Brown))", "(AmericanPoliticianAndLawyer(WalterSuiterBrown) & PostmasterGeneral(WalterSuiterBrown))", "(AmeridianPoliticianAndLawyer(WalterSueder Brown) & PostmasterGeneral(WalterSueder Brown))", "Walter Folger Brown (*1927 & AmericanPolitician(x) & Lawyer(x) & PostmasterGeneral(x))", "Walter Folger Brown (AmericanPoliticianAndLawyer(Walter) & PostmasterGeneral(Walter))", "Walter Folger Brown (AmericanPoliticianAndLawyer(Walter) & PostmasterGeneral(Walter))", "Walter Folger Brown (AmericanPoliticianAndLawyer(Walter)) & PostmasterGeneral(Walter))"]}
{"id": "folio_train_1270", "nl": "Walter Folger Brown graduated from Harvard University with a Bachelors of Arts.", "fol": "(GraduatedFrom(Walterbrown,Harvard) & ObtainedDegree(Walterbrown,Bachelorsofarts))", "prediction": ["all x y.((WalterSuederrBrown(x) & HarvardUniversity(y)) -> GraduatedWithBachelorsOfArts(x,y))", "all x.((WalterSuederrBrown(x) & HarvardUniversity(x)) -> BachelorsOfArts(x))", "(BachelorsOfArts(WalterSueder Brown) & GraduatedFromHarvardUniversity(WalterSueder Brown))", "(GraduatedFromHarvardUniversity(WalterSuederrBrown) & BachelorsOfArts(WalterSuederrBrown))", "Walter Folger Brown graduated from Harvard University with BachelorsOfArts(Walter,1996).", "all x.((WalterSueder Brown(x) & HarvardUniversity(x)) -> BachelorsOfArts(x))", "Walter Folger Brown graduated with BachelorsOfArts(Walter,Harvard)", "All x.(WalterSuederrBrown(x) -> (GraduatedFromHarvardUniversity(x) & BachelorsOfArts(x)))", "(BachelorsOfArts(WalterSueder Brown) -> GraduatedFromHarvardUniversity(WalterSueder Brown))", "Walter Folger Brown graduated from Harvard University with BachelorsOfArts(Walter,Sueder,Brown))", "(BachelorsOfArts(WalterSuspensionBrown) & GraduatedFromHarvardUniversity(WalterSuspensionBrown))", "(GraduatedFromHarvardUniversity(WalterSuiterBrown,BachelorsOfArts))", "Walter Folger Brown (BachelorsOfArts))", "Walter Folger Brown graduated with BachelorsOfArts(Walter,Harvard,Harvard))", "Walter Folger Brown, 'BachelorsOfArts', graduated from Harvard University.", "Walter Folger Brown graduated from Harvard University with BachelorsOfArts."]}
{"id": "folio_train_1271", "nl": "While they were both in Toledo, Walter Folger Brown's father practiced law with Walter Folger Brown.", "fol": "(LocatedIn(Walterbrown,Toledo) & LocatedIn(Walterfather,Toledo) & PracticedLawTogether(Walterfather,Walterbrown))", "prediction": ["((Toledo(WalterSuederBrown) & Father(WalterSuederBrown)) | (PracticedLawWith(WalterSuederBrown) & Father(WalterSuederBrown))))", "all x.((Toledo(x) & WalterSuffragerBrown(x)) -> PracticedLawWith(x,WalterSuffragerBrown))", "During their time in Toledo, Walter Folger Brown's father practiced law with Walter Folger Brown.", "(exists x.(WalterFernando(x) & InTolodge(x)) & WalterFernando(x) & WalterFernando(x)) & WalterFernando(x))", "(Toledo,Toledo) & WalterSuffragerBrown(Walter) & FatherPracticedLaw(Walter,Suffrager Brown))", "((Toloma(x) & WalterSuffragerBrown(x)) | (PracticedLawWith(x,WalterSuffragerBrown) & WalterSuffragerBrown(x))))", "all x y.((WalterFernando(x) & WalterFernando(y)) -> (PracticedLawWith(x,y) & WalterFernando(y)))", "all x.((Television(x) & WalterFernando(x)) -> PracticedLawWith(x,WalterFernando))", "((WalterFernando(WalterFernando) & InToloma(w)) | (WalterFernando(w) & InToloma(w))))", "((Toledo(WalterSufnerBrown) & Father(WalterSufnerBrown)) -> PracticedLawWith(WalterSufnerBrown))", "(exists x.(Toledo(x) & WalterFernando(x)) & WalterFernando(x)) & WalterFernando(x))", "(Toledo,Toledo) & Walter Folger Brown's Father PracticedLawWith(WalterSuiter Brown))", "all x.((Toledo(x) & WalterSuederBrown(x)) -> PracticesLawWith(x,WalterSuederBrown))", "W\u00e4hrend sie in Toledo & Walter Folger Browns FatherPracticedLawWith(WalterFernando))", "(Toledo,Toledo, Toledo) & WalterSuffragerBrown(Walter) & FatherPracticedLawWith(WalterSuffragerBrown))", "all x.((Tontola(x) & WalterSuffieldBrown(x)) -> PracticedLawWith(x,WalterSuffieldBrown))"]}
{"id": "folio_train_1272", "nl": "Katherin Hafer married Walter Folger Brown.", "fol": "MarriedTo(Ketherinhafer,Walterbrown)", "prediction": ["KatherinHafer Married(KatherinHafer,WalterSueder Brown)", "(Married(KatherHafer,WalterSueder Brown))", "all x.((KatherHafer(x) & WalterSuederBrown(x)) -> Married(x,y))", "Katherin Hafer married Walter Folger Brown.", "(Married(KatherinHafer,WalterSueder Brown))", "Katherin Hafer Married(Kather,Walter,Suiter,Brown))", "KatherinHaferMarried(Kather,WalterSueder Brown)", "KatherinHafer Married(Kather) & WalterSuederBrown(Kather))", "Katherin Hafer married WalterSueder Brown.", "(Married(KatherHafer,WalterSueder Brown))", "Katherin Hafer Married(Kather) & Walter(Walter) Folger(Brown))", "(Married(Katherine Hafer) & WalterSuspension(Katherine))", "KatherinHaferMarried(Kategorie,WalterSueder Brown)", "(Married(KatherinHafer,WalterSueder Brown))", "(Married(KatherinHafer,WalterSusserBrown))", "-Married(KatherHafer,WalterSueder Brown)"]}
{"id": "folio_train_1273", "nl": "Walter Folger Brown graduated with a Bachelors of Arts.", "fol": "ObtainedDegree(Walterbrown,Bachelorsofarts)", "prediction": ["all x.((WalterSuederrBrown(x) & BachelorsOfArts(x)) -> Graduated(x))", "Walter Folger Brown graduated with BachelorsOfArts(Walter)", "(BachelorsOfArts(WalterSueder Brown))", "all x y.((WalterSuederrBrown(x) & BachelorsOfArts(y)) -> GraduatedWith(x,y))", "all x.((WalterSuiterBrown(x) & BachelorsOfArts(x)) -> Graduated(x))", "All x.(WalterSuederrBrown(x) -> BachelorsOfArts(x))", "Walter Folger Brown graduated with BachelorsOfArts(Walter,BachelorsOfArts)", "all x.((WalterSuederrBrown(x) & BachelorsOfArts(x)) -> Graduated(x))", "(BachelorsOfArts(WalterSueder Brown)", "(BachelorsOfArts(WalterSuspensionBrown))", "Walter Folger Brown graduated with a BachelorsOfArts(Walter,BachelorsOfArts)", "Walter Folger Brown graduated with BachelorsOfArts.", "All x.(WalterSuederrBrown(x) -> BachelorsOfArts(x))", "Walter Folger Brown graduated with BachelorsOfArts(Walter)", "(BachelorsOfArts(WalterSueder Brown)", "(BachelorsOfArts(WalterSuiterBrown))"]}
{"id": "folio_train_1274", "nl": "Walter Folger Brown's father was in Toledo.", "fol": "LocatedIn(Walterfather,Toledo)", "prediction": ["Walter Folger Brown's father was in Toledo.", "All x.((WalterSuederrBrown(x) & FatherInTolo(x)) -> WasInTolo(x))", "(Father(WalterSuederrBrown) & InTolo(WalterSuederr Brown))", "(Father(Freshman(Freshman) & WalterSuederrBrown(Freshman) & InToloma(Freshman))", "All x.((Father(x) & WalterSuederrBrown(x)) -> WasInToloma(x))", "Walter Folger Brown's father was in Toledo.", "(Toledo(WalterSueder Brown) & Father(WalterSuederr Brown))", "(Pastor(WalterSuspensionRonnerBrown) & InTolo(WalterSuspensionRonner))", "(WalterSuederrBrown(Walter) & FatherInTolo(Walter,Tolo))", "all x.((WalterSuiterBrown(x) & Father(x,Toledo)) -> FatherInToledo(x))", "-(WalterSuederrBrown(Walter) & FatherInTolo(Walter))", "Brown's father was in Toledo.", "Walter Folger Brown's father was in Toledo.", "Walter Folger Brown's Father WasInTolo(Walter,Sueder,Brown))", "Walter Folger Browns Father was in Toledo.", "Walter Folger Brown's father was in Toledo."]}
{"id": "folio_train_1275", "nl": "Walter Folger Brown was not in Toledo.", "fol": "-LocatedIn(Walterbrown,Toledo)", "prediction": ["Walter Folger Brown -InTolo(Walter,Tolo))", "-(WalterSuederrBrown(Walter) & InTolo(Walter))", "(-Toledo(WalterSueder Brown))", "(-Toloda(WalterSuederrBrown))", "Walter Folger Brown -InToloma(w)", "-(WalterSuspensionRabbit(Walter) & Brown(Walter))", "(-InTolo(WalterSuederrBrown))", "((WalterSuederrBrown(Walter)) -> -InTolo(Walter))", "Walter Folger Brown -Toledo(Walter)", "(-Toledo(WalterSuspensionRon Brown))", "-(WalterSueder Brown(Walter) & InTolo(Walter))", "Walter Folger Brown -Toledo(Walter,Suederr,Brown))", "Walter Folger Brown & -Toledo(Walter,Suederr,Brown))", "Walter Folger Brown (no-Toloda(Walter))", "Walter Folger Brown -InToledo(w)", "Walter Folger Brown (nowhere in Toledo))"]}
{"id": "folio_train_1276", "nl": "All products shipped from China are made in China. ", "fol": "all x.(ShippedFromChina(x) -> ManufacturedInChina(x))", "prediction": ["all x.((Product(x) & ShippedFromChina(x)) -> MadeInChina(x))", "all x y.((Product(x) & ShippedFromChina(x,y)) -> MadeInChina(x))", "all x.((Product(x) & ShippedFromChina(x)) -> MadeInChina(x))", "all x.(Shipping(x,y) -> MadeInChina(y))", "all x y.((Product(x) & ShippedFromChina(x)) -> MadeInChina(x))", "all x.((Product(x) & ShippedFromChina(x)) -> MadeInChina(x))", "(all x.(ShippedFromChina(x) -> MadeInChina(x))", "(all x.(Shipping(x) -> MadeInChina(x)))", "all x y.((Product(x) & ShippedFromChina(x,y)) -> MadeInChina(x))", "All products shipped from China are MadeInChina.", "all x.(ShippingFromChina(x) -> MadeInChina(x))", "all x.((Product(x) & ShippedFromChina(x)) -> MadeInChina(x))", "all x y.((Product(x) & ShippedFromChina(x,y)) -> MadeInChina(y))", "all x.(ShippedFromChina(x) -> MadeInChina(x))", "all x y.((Product(x) & ShippedFromChina(x,y)) -> MadeInChina(x,y))", "all x.((Product(x) & ShippedFromChina(x)) -> MadeInChina(x))"]}
{"id": "folio_train_1277", "nl": "All products sold in JD are shipped from China. ", "fol": "all x.(AvailableInJD(x) -> ShippedFromChina(x))", "prediction": ["all x.((Product(x) & SoldInJD(x)) -> ShippedFromChina(x))", "all x y.((Product(x) & SoldInJD(x)) -> ShippedFromChina(x))", "all x.(JD(x) -> ShippedFromChina(x))", "all x.((Product(x) & SoldInJD(x)) -> ShippedFromChina(x))", "all x y.((Product(x) & JD(y) & SoldIn(x,y)) -> ShippedFromChina(x))", "All products sold in JD are shipped from China.", "all x.(SoldInJD(x) -> ShippedFromChina(x))", "all x.((Product(x) & SoldInJD(x)) -> ShippedFromChina(x))", "(all x.(JD(x) -> ShippedFromChina(x)))", "All products sold in JD are shipped from China.", "all x y.((Product(x) & SoldInJD(x)) -> ShippedFromChina(x))", "all x.(JD(x) -> ShippedFromChina(x))", "(all x.(JD(x) -> ShippedFromChina(x)))", "all x y.((Product(x) & JD(y) & SoldIn(x,y)) -> ShippedFromChina(x))", "all x.((Product(x) & SoldInJD(x)) -> ShippedFromChina(x))", "all x.(SoldInJD(x) -> ShippedFromChina(x))"]}
{"id": "folio_train_1278", "nl": "All products commonly used in China are sold in JD.", "fol": "all x.(WidelyUsedInChina(x) -> AvailableInJD(x))", "prediction": ["all x.((Product(x) & CommonlyUsedInChina(x)) -> SoldInJD(x))", "all x y.((Product(x) & CommonlyUsedInChina(x)) -> SoldInJD(x))", "all x.((Product(x) & CommonlyUsedInChina(x)) -> SoldInJD(x))", "(all x.(ChinaProduct(x) -> SoldInJD))", "all x y.((Product(x) & CommonlyUsedInChina(x,y)) -> SoldInJD(x))", "(all x.(ChinaProduct(x) & CommonlyUsedIn(x,Chinese)) -> SoldInJD(x))", "all x.((Product(x) & UsedInChina(x)) -> SoldInJD(x))", "(all x.(CheapProduct(x) -> SoldInJD(x)))", "all x.((Product(x) & CommonlyUsedInChina(x)) -> SoldInJD(x))", "all x y.((Product(x) & CommonlyUsedIn(x,y)) -> SoldInJD(x))", "all x.((Product(x) & CommonlyUsedInChina(x)) -> SoldInJD(x))", "all x.((Product(x) & UsedInChina(x)) -> SoldInJD(x))", "all x.((Product(x) & CommonlyUsedInChina(x)) -> SoldInJD(x))", "all x.(Cheap(x) -> SoldInJD(x))", "all x.((Product(x) & UsedInChina(x)) -> SoldInJD(x))", "all x.((Product(x) & CommonlyUsedInChina(x)) -> SoldInJD(x))"]}
{"id": "folio_train_1279", "nl": "All products favored by young people are commonly used in China. ", "fol": "all x.(PopularAmongYouth(x) -> WidelyUsedInChina(x))", "prediction": ["all x.((Product(x) & FavoredByYoungPeople(x)) -> CommonlyUsedInChina(x))", "all x y.((Product(x) & FavoredByYoungPeople(x)) -> CommonlyUsedInChina(y))", "all x.((Product(x) & FavoredByYoungPeople(x)) -> CommonlyUsedInChina(x))", "(all x.(FavoriteProduct(x) & YoungPeople(x)) -> CommonlyUsedInChina(x))", "all x y.((Product(x) & YoungPerson(y)) -> CommonlyUsedInChina(x,y))", "all x.(FavoriteProduct(x) -> CommonlyUsedInChina(x))", "all x y z.((Product(x) & YoungPerson(y) & Product(z) & FavoredBy(x,y)) -> CommonlyUsedInChina(x,z))", "all x y.((Product(x) & YoungPeople(y) & FavoredBy(x,y)) -> CommonlyUsedInChina(x))", "all x.(Product(x) & FavoredByYoungPeople(x) -> CommonlyUsedInChina(x))", "all x.((Product(x) & FavoredByYoungPeople(x)) -> CommonlyUsedInChina(x))", "all x y.((Product(x) & FavoredByYoungPeople(x)) -> CommonlyUsedInChina(y))", "all x.(FavoriteProduct(x) -> CommonlyUsedInChina(x))", "all x.((Product(x) & FavoredByYoungPeople(x)) -> CommonlyUsedInChina(x))", "all x y.((Product(x) & FavoredByYoungPeople(x)) -> CommonlyUsedInChina(x))", "all x.((Product(x) & FavoredByYoungPeople(x)) -> CommonlyUsedInChina(x))", "all x.((Product(x) & FavoredByYoungPeople(x)) -> CommonlyUsedInChina(x))"]}
{"id": "folio_train_1280", "nl": "MacBook is not made in China and is not commonly used in China.", "fol": "-(ManufacturedInChina(Macbook) & WidelyUsedInChina(Macbook))", "prediction": ["(-MadeInChina(MacBook) & -CommonUseInChina(MacBook))", "all x.(MacBook(x) -> (-MadeInChina(x) & -CommonUseInChina(x)))", "(Macbook(MacBook) & -MadeInChina(MacBook) & -CommonUseInChina(MacBook))", "-(MacBook(MacBook) & MadeInChina(MacBook))", "(-MadeInChina(Macbook) & -CommonlyUsedInChina(Macbook))", "all x.(Macbook(x) -> (-MadeInChina(x) & -CommonUseInChina(x)))", "(MacBook(MacBook) & -MadeInChina(MacBook) & -CommonUse(MacBook))", "((Macbook(Macbook) & -MadeInChina(Macbook)) | -CommonUse(Macbook)))", "(-MadeInChina(MacBook) & -CommonUse(MacBook))", "-(MacBook(MacBook) & MadeInChina(MacBook) & -CommonUse(MacBook))", "-(Macbook(Macbook) & MadeInChina(Macbook))", "(-MadeInChina(Macbook) & -ConsumedInChina(Macbook))", "all x.(MacBook(x) -> (-MadeInChina(x) & -CommonlyUsedInChina(x)))", "all x.(Macbook(x) -> (-MadeInChina(x) & -CommonUse(x)))", "(-MadeInChina(MacBook) & -CommonlyUsedInChina(MacBook))", "all x.(MacBook(x) -> (-MadeInChina(x) & -ConsumedInChina(x)))"]}
{"id": "folio_train_1281", "nl": "The MacBook is favored by young people.", "fol": "PopularAmongYouth(Macbook)", "prediction": ["all x.(Macbook(x) -> FavoredByYoungPeople(x))", "all x y.((Macbook(x) & YoungPeople(y)) -> FavoredBy(x,y))", "(FavoriteByYoungPeople(Macbook)", "all x.(MacBook(x) -> FavoredByYoungPeople(x))", "all x y.((Macbook(x) & Young(y)) -> FavoredBy(x,y))", "(Favorite(Macbook) -> YoungPeople(Macbook))", "(FavoriteByYoungPeople(Macbook)", "all x.(Macbook(x) -> FavoredByYoungPeople(x))", "all x.(MachineBook(x) -> FavoredByYoungPeople(x))", "all x y.((MacBook(x) & YoungPerson(y)) -> FavoredBy(x,y))", "all x.(MacBook(x) -> FavoredByYoungPeople(x))", "exists x.(MachineBook(x) & FavoredByYoungPeople(x))", "all x.(MacBook(x) -> Favorite(x,youngPeople))", "all x.(Macbook(x) -> FavoredByYoungPeople(x))", "All x.(MacBook(x) -> FavoredByYoungPeople(x))", "all x.(Macbook(x) -> FavoredByYoungPeople(x))"]}
{"id": "folio_train_1282", "nl": "The MacBook is made in China.", "fol": "ManufacturedInChina(Macbook)", "prediction": ["(MadeInChina(MacBook) & MadeInChina(MacBook))", "The MacBook is made in China.", "all x.(MacBook(x) -> MadeInChina(x))", "(MadeInChina(Macbook) & MadeInChina(Macbook))", "(MadeIn(Macbook) & MadeIn(Macbook))", "-MadeInChina(MacBook)", "The MacBook is made in China.", "All x.(Macbook(x) -> MadeInChina(x))", "(MadeInChina(MacBook))", "the MacBook is made in China.", "all x.(MacBook(x) -> MadeInChina(x))", "(MadeInChina(Macbook,MadeInChina))", "All x.(Macbook(x) -> MadeInChina(x))", "all x.(MacBook(x) -> MadeIn(x,China))", "All x.(Macbook(x) -> MadeIn(x,China))", "all x.(MacBook(x) -> MadeInChina(x))"]}
{"id": "folio_train_1283", "nl": "The MacBook is favored by young people and commonly used in China.", "fol": "(PopularAmongYouth(Macbook) & WidelyUsedInChina(Macbook))", "prediction": ["all x.(Macbook(x) -> (FavoriteByYoungPeople(x) & CommonlyUsedInChina(x)))", "(FavoriteByYoungPeople(Macbook) & CommonlyUsedInChina(Macbook))", "all x y.((Macbook(x) & YoungPeople(y)) -> (Favorite(x,y) & CommonlyUsedInChina(x)))", "(Favorite(Macbook) & UsedInChina(Macbook))", "(PreferredByYoungPeople(Macbook) & CommonlyUsedInChina(Macbook))", "all x.(MacBook(x) -> (FavoriteByYoungPeople(x) & CommonlyUsedInChina(x)))", "all x y.((Macbook(x) & YoungPerson(y)) -> (Favorite(x,y) & CommonlyUsedInChina(x)))", "(Favorite(MacBook) & PopularWithYoungPeople(Macbook) & CommonlyUsedInChina(Macbook))", "(FavoriteByYoungPeople(Macbook) & CommonlyUsedInChina(Macbook))", "all x.(Macbook(x) -> (PreferredByYoungPeople(x) & CommonlyUsedInChina(x)))", "all x.(MacBook(x) -> (Favorite(x) & UsedInChina(x)))", "all x.(Macbook(x) -> (FavoriteByYoungPeople(x) & CommonlyUsedInChina(x)))", "all x y.((MacBook(x) & YoungPeople(y)) -> (Favorite(x,y) & CommonlyUsedInChina(x)))", "(FavoriteByYoungPeople(Macbook) & CommonlyUsedInChina(Macbook))", "all x.(Macbook(x) -> (PreferredByYoungPeople(x) & CommonlyUsedInChina(x)))", "all x.(MacBook(x) -> (FavoriteByYoungPeople(x) & CommonlyUsedInChina(x)))"]}
{"id": "folio_train_1284", "nl": "The MacBook is either favored by young people or commonly used in China.", "fol": "(PopularAmongYouth(Macbook) | WidelyUsedInChina(Macbook))", "prediction": ["all x.(Macbook(x) -> (FavoriteByYoungPeople(x) | CommonlyUsedInChina(x)))", "(FavoriteByYoungPeople(Macbook) | CommonlyUsedInChina(Macbook))", "all x y.((Macbook(x) & YoungPeople(y)) -> (Favorite(x,y) | CommonlyUsedInChina(x,y)))", "all x.(MacBook(x) -> (FavoriteByYoungPeople(x) | CommonlyUsedInChina(x)))", "(Favorite(Macbook) | CommonlyUsedInChina(Macbook))", "(FavoriteByYoungPeople(Macbook) | CommonlyUsedInChina(Macbook))", "all x.(MacBook(x) -> (Favorite(x) & YoungPeople(x) | CommonlyUsedInChina(x)))", "all x.(Macbook(x) -> (PreferredByYoungPeople(x) | CommonlyUsedInChina(x)))", "all x y.(Macbook(x) -> (FavoriteByYoungPeople(x) | CommonlyUsedInChina(x,y)))", "all x.(Macbook(x) -> (FavoriteByYoungPeople(x) | CommonlyUsedInChina(x)))", "all x y.(Macbook(x) -> (Favorite(x,y) | CommonlyUsedInChina(x,y)))", "(FavoriteByYoungPeople(Macbook) | CommonlyUsedInChina(Macbook))", "all x.(MacBook(x) -> (Favorite(x,y) | CommonlyUsedInChina(x,z)))", "all x.(Macbook(x) -> (PositiveByYoungPeople(x) | CommonlyUsedInChina(x)))", "exists x.(MachineBook(x) & (FavoriteByYoungPeople(x) | CommonlyUsedInChina(x)))", "exists x.(MacBook(x) & FavoredByYoungPeople(x) | CommonlyUsedInChina(x))"]}
{"id": "folio_train_1285", "nl": "If the MacBook is favored by young people and commonly used in China, then it is neither favored by young people nor made in China.", "fol": "((PopularAmongYouth(Macbook) & WidelyUsedInChina(Macbook)) -> (-PopularAmongYouth(Macbook) & -ManufacturedInChina(Macbook)))", "prediction": ["all x.((Macbook(x) & FavoredByYoungPeople(x) & CommonlyUsedInChina(x)) -> -(FavouredByYoungPeople(x) | MadeInChina(x)))", "(FavoriteByYoungPeople(Macbook) & CommonlyUsedInChina(Macbook)) -> -FavoriteByYoungPeople(Macbook) & -MadeInChina(Macbook))", "all x.((Macbook(x) & FavoredByYoungPeople(x) & CommonlyUsedInChina(x)) -> (-FavouredByYoungPeople(x) & -MadeInChina(x)))", "all x y.((Macbook(x) & YoungPeople(y) & Popular(x,y) & CommonlyUsedInChina(x,y)) -> -(Favorable(x,y) | MadeInChina(x,y)))", "all x.(Favorite(x) -> ((Macbook(x) & YoungPeople(x) & CommonlyUsedInChina(x)) & -Favorite(x) & -MadeInChina(x)))", "all x.(Favorite(x,y) -> ((Macbook(x) & YoungPeople(y) & CommonlyUsedInChina(x,y)) | (Macbook(x,y) & YoungPeople(y) & -Favorite(x,y) & MadeInChina(x))))", "(FavoriteByYoungPeople(Macbook) & CommonlyUsedInChina(Macbook))", "all x y.((MacBook(x) & YoungPerson(y) & Popular(x,y) & CommonlyUsedInChina(x,y)) -> -(PreferredBy(x,y) | MadeInChina(x,y)))", "all x.((MacBook(x) & FavoredByYoungPeople(x) & CommonlyUsedInChina(x)) -> -(FavouredByYoungPeople(x) | MadeInChina(x)))", "all x y.((Macbook(x) & YoungPeople(y) & Popular(x,y) & CommonlyUsedInChina(x,y)) -> -(Favorite(x,y) | MadeInChina(x,y)))", "(FavoriteByYoungPeople(MacBook) & CommonlyUsedInChina(MacBook) & -FavoriteByYoungPeople(MacBook) & -MadeInChina(MacBook))", "all x.((Macbook(x) & FavoredByYoungPeople(x) & CommonlyUsedInChina(x)) -> (-FavoredByYoungPeople(x) & -MadeInChina(x)))", "(FavoriteByYoungPeople(Macbook) & CommonlyUsedInChina(Macbook))", "all x.((MacBook(x) & FavoredByYoungPeople(x) & CommonlyUsedInChina(x)) -> -(FavoredByYoungPeople(x) | MadeInChina(x)))", "all x.((Macbook(x) & FavoredByYoungPeople(x) & CommonlyUsedInChina(x)) -> (-FavouredByYoungPeople(x) & -MadeInChina(x)))", "all x.((MacBook(x) & FavoredByYoungPeople(x) & OftenUsedInChina(x)) -> -(FavouredByYoungPeople(x) | MadeInChina(x)))"]}
{"id": "folio_train_1286", "nl": "Oxford Circus is a road junction connecting Oxford Street and Regent Street.", "fol": "(IsOxfordStreet(OxfordCircus) & IsRegentStreet(OxfordCircus))", "prediction": ["all x.(OxfordCircle(x) -> (RoadJunction(x) & ConnectsOxfordStreet(x) & ConnectsRegentStreet(x)))", "(RoadJunction(OxfordStreet) & ConnectsRegentStreet(OxfordStreet))", "OxfordCircle(OxfordStreetJunction)", "all x y.((OxfordCircle(x) & OxfordStreet(y)) -> RoadJunction(x,y))", "OxfordCircle(OxfordStreet(OxfordStreet) & RegentStreet(OxfordStreet))", "(RoadJunction(OxfordStreet,OxfordStreet) & Connects(OxfordStreet,RegentStreet))", "OxfordCircle(o) -> (RoadJunction(o) & ConnectsOxfordStreet(o) & ConnectsRegentStreet(o)))", "all x.(OxfordCircle(x) -> (RoadJunction(x) & ConnectsOxfordStreet(x) & ConnectsRegentStreet(x)))", "OxfordCircle(OxfordStreet) & RoadJunction(OxfordStreet,RegentStreet))", "OxfordCircle(OxfordStreetJunction(OxfordStreet) & RegentStreetJunction(OxfordStreet))", "all x.(OxfordCircle(x) -> (RoadJigway(x) & ConnectsOxfordStreet(x) & ConnectsRegentStreet(x)))", "all x.(OxfordCircle(x) -> (RoadJunction(x) & ConnectsOxfordStreetWithRegentStreet(x)))", "all x y.((OxfordCircle(x) & OxfordStreet(y)) -> RoadJunction(x,y))", "(RoadJunction(OxfordStreet) & ConnectsRegentStreet(OxfordStreet))", "all x.(OxfordCircle(x) -> (RoadJunction(x) & ConnectsOxfordStreet(x) & ConnectsRegentStreet(x)))", "All x.(OxfordCircle(x) -> (ConnectsOxfordStreet(x) & ConnectsRegentStreet(x)))"]}
{"id": "folio_train_1287", "nl": "Oxford Street is in London.", "fol": "all x.(IsOxfordStreet(x) -> IsInLondon(x))", "prediction": ["all x.(OxfordStreet(x) -> InLondon(x))", "all x y.((OxfordStreet(x) & London(y)) -> In(x,y))", "(LondonStreet(OxfordStreet)", "(London(OxfordStreet) & In(OxfordStreet(Oxford))", "OxfordStreet(Oxford) & London(Oxford))", "all x.(OxfordStreet(x) -> London(x))", "(LondonStreet(Oxford) & In(OxfordStreet(Oxford))", "OxfordStreetInLondon(x)", "(Londrew(OxfordStreet,London))", "Oxford Street is in London.", "all x.(OxfordStreet(x) -> InLondon(x))", "all x y.((OxfordStreet(x) & London(y)) -> In(x,y))", "all x.(OxfordStreet(x) -> London(x))", "all x.(OxfordStandard(x) -> InLondon(x))", "exists x.(OxfordStreet(x) & London(x))", "All x.(OxfordStandard(x) -> InLondon(x))"]}
{"id": "folio_train_1288", "nl": "John Nash designed the construction on Regent Street.", "fol": "exists x.(IsRegentStreet(x) & DesignedBy(JohnNash,x))", "prediction": ["John Nash designed the construction on Regent Street.", "DesignedByJohnNash(JohnNash) & RegentStreet(JohnNash)", "all x y.((JohnNash(x) & RegentStreet(y)) -> Designed(x,y))", "John Nash designed the construction on Regent Street.", "(DesignsConstructionOnRegentStreet(JohnNash))", "DesignedByJohnNashOnRegentStreet(JohnNash)", "(DesignedByJohnNash(JohnNash) & RegentStreet(JohnNash))", "John Nash designed the construction on RegentStreet.", "DesignedByJohnNash(JohnNash) & RegentStreet(JohnNash))", "John Nash designed and designed the construction on Regent Street.", "(designedByJohnNash(JohnNash) & RegentStreet(JohnNash))", "John Nash, Architect, designed the construction on Regent Street.", "John Nash designed the construction on Regent Street.", "John Nash designed and designed the construction on Regent Street.", "John Nash designed the construction on RegentSt.", "John Nash designed the construction on RegentStreet."]}
{"id": "folio_train_1289", "nl": "John Nash designed Oxford Circus.", "fol": "DesignedBy(JohnNash,OxfordCircus)", "prediction": ["John Nash designed OxfordCircle(JohnNash)", "All x.(JohnNash(x) -> DesignedOxfordCircle(x))", "all x.((JohnNash(x) & OxfordCircle(x)) -> Designed(x,y))", "John Nash designed OxfordCircle(JohnNash)", "(DesignsOxfordCircle(JohnNash)", "(DesignedOxfordCircus(JohnNash) & DesignedOxfordCircus(JohnNash))", "DesignedByJohnNash(John) & OxfordCircle(John))", "John Nash, ArchitectOxfordCircle(JohnNash)", "John Nash DesignedOxfordCircle(JohnNash)", "John Nash designed OxfordCircle(JohnNash)", "John Nash designed OxfordCircle.", "DesignedOxfordCircle(JohnNash)", "John Nash designed OxfordCircle(John)", "DesignedOxfordCircle(JohnNash,Oxford)", "John Nash designed OxfordCircle.", "John Nash designed OxfordCircle."]}
{"id": "folio_train_1290", "nl": "John Nash is an architect in British.", "fol": "(IsBritish(JohnNash) & IsArchitect(JohnNash))", "prediction": ["John Nash (Architect(John) & British(John))", "(Architect(JohnNash) & British(JohnNash))", "John Nash (Architect(John) & InBritish(John))", "(Architect(JohnNash) & British(JohnNash))", "John Nash is an architect in British.", "all x.(Architect(x) -> JohnNash(x))", "ArchitectInBritish(JohnNash)", "(Architect(JohnNash) & British(JohnNash))", "(Architect(JohnNash) & Architect(JohnNash,British))", "John Nash (Architect(x) & British(x))", "John Nash (Architect) & British(JohnNash))", "John Nash is an architect in British.", "(Architect(JohnNash) & British(JohnNash))", "John Nash, Architect(JohnNash) & British(JohnNash))", "John Nash (Architect(John) & InBritish(John))", "John Nash is an architect in British."]}
{"id": "folio_train_1291", "nl": "Oxford Circus is the entrance to Oxford Circus tube station which is a part of the Central line in 1900.", "fol": "IsCentralLine(OxfordCircus)", "prediction": ["all x y.((OxfordCircle(x) & TubeStation(y) & CentralLine(y)) -> Entrance(x,y))", "all x.(OxfordCircle(x) -> (EntranceToOxfordCircle(x) & CentralLine(x) & InUpperLine(x,1901)))", "all x y z.((OxfordCircle(x) & TubeStation(y) & CentralLine(z)) -> (Entrance(x,y) & PartOf(y,z)))", "(EntranceToOxfordCircle(OxfordCircle(Oxford) & CentralLine(Oxford) & In 1900(OxfordCircle(Oxford))", "all x.((OxfordCircle(x) & TubeStation(x) & CentralLine(x)) -> Entrance(x))", "(EntranceToOxfordCircle(OxfordCircle) & CentralLine(OxfordCircle) & InUpperLine(OxfordCircle) & In1900(OxfordCircle))", "the entrance to OxfordCircle(OxfordCircle(Oxford) tubestation(OxfordCircle(Oxford) & CentralLine(Oxford) & In 1900(OxfordCircle(Oxford))", "OxfordCircle(Oxford) -> (EntranceToOxfordCircle(OxfordCircle(Oxford) & CentralLine(Oxford) & In 1900(Oxford)))", "all x y.((OxfordCircle(x) & TubeStation(y) & CentralLine(y)) -> EntranceTo(x,y))", "all x.(OxfordCircle(x) -> (EntranceToOxfordCircle(x) & CentralLine(x) & In1900(x)))", "(Entrance(OxfordCircle) & CentralLine(OxfordCircle) & InUpperLine(OxfordCircle) & In1900(OxfordCircle))", "all x.((OxfordCircle(x) & TubeStation(x,Oxford)) -> CentralLine(x,Oxford))", "all x.(OxfordCircle(x) -> (EgressToOxfordCircle(x) & CentralLine(x) & CentralLine(x) & CentralLine(x) & CentralLine(x)))", "(EgressToOxfordCircle(OxfordCircle(Oxford) & CentralLineIn1900(Oxford))", "all x y.((OxfordCircle(x) & TubeStation(y) & CentralLine(y)) -> Entrance(x,y))", "all x y.((OxfordCircle(x) & TubeStation(y)) -> (EntranceTo(x,y) & CentralLine(y) & In(x,y)))"]}
{"id": "folio_train_1292", "nl": "Oxford Circus is in London.", "fol": "IsInLondon(OxfordCircus)", "prediction": ["all x.(OxfordCircle(x) -> InLondon(x))", "OxfordCircle(Oxford)", "(London(OxfordCircle) & In(OxfordCircle,London))", "all x y.((OxfordCircle(x) & London(y)) -> In(x,y))", "(Londrew(OxfordCircle)", "all x.(OxfordCircle(x) -> InLondon(x))", "OxfordCircle(Oxford)", "(London(OxfordCircle)", "OxfordCircle(o) -> InLondon(o))", "OxfordCircle(Oxford)", "all x.(OxfordCircle(x) -> InLondon(x))", "OxfordCircle(Oxford,London)", "London.", "all x.(OxfordCircle(x) -> London(x))", "All x.(OxfordCircle(x) -> InLondon(x))", "All x.(OxfordCircle(x) -> InLondon(x))"]}
{"id": "folio_train_1293", "nl": "Oxford Circus is designed by a British architect.", "fol": "exists x.(IsBritish(x) & IsArchitect(x) & DesignedBy(x,OxfordCircus))", "prediction": ["all x.(OxfordCircle(x) -> DesignedByBritishArchitect(x))", "all x y.((OxfordCircle(x) & BritishArchitect(y)) -> DesignedBy(x,y))", "(DesignedByBritishArchitect(OxfordCircle)", "all x y z.((OxfordCircle(x) & BritishArchitect(y) & BritishArchitect(z)) -> DesignedBy(x,y,z))", "all x.(OxfordCircle(x) -> (DesignedByBritishArchitect(x) & BritishArchitect(x)))", "OxfordCircle(Oxford) -> (DesignedByBritishArchitect(Oxford) & BritishArchitect(Oxford)))", "all x.((OxfordCircle(x) & BritishArchitect(x)) -> DesignedBy(x,y))", "all x y.((OxfordCircle(x) & BritishArchitect(y)) -> DesignedBy(x,y))", "OxfordCircle(Oxford) & BritishArchitect(Oxford)", "all x.(OxfordCircle(x) -> (DesignedBy(x,BritishArchitect) & BritishArchitect(x,BritishArchitect)))", "(DesignedByBritishArchitect(OxfordCircle)", "all x.(OxfordCircle(x) -> DesignedByBritishArchitect(x))", "all x y.((OxfordCircle(x) & BritishArchitect(y)) -> DesignedBy(x,y))", "exists x.(OxfordCircle(x) & BritishArchitect(x) & DesignedBy(x,y))", "(DesignedByBritishArchitect(OxfordCircle)", "all x y.((OxfordCircle(x) & BritishArchitect(y)) -> DesignedBy(x,y))"]}
{"id": "folio_train_1294", "nl": "John Nash designed the Central line in 1900.", "fol": "DesignedBy(JohnNash,CentralLine)", "prediction": ["John Nash designed CentralLine(JohnNash,1900)", "(DesignedByJohnNash(JohnNash,1900) & CentralLine(JohnNash,1900))", "(DesignedCentralLine(JohnNash,1900) & DesignedCentralLine(JohnNash,1900))", "all x y.((JohnNash(x) & CentralLine(y)) -> DesignedIn(x,y))", "John Nash designed CentralLineIn1900.", "all x.((JohnNash(x) & CentralLine(x)) -> DesignedIn(x,1900))", "(DesignedCentralLine(JohnNash,1909) & DesignedCentralLine(JohnNash,1909))", "DesignedIn1900(JohnNash,CentralLine)", "John Nash designed CentralLine(JohnNash) in 1900.", "DesignedIn(JohnNash,1900)", "John Nash designed the CentralLineIn1900.", "All x.((JohnNash(x) & CentralLine(x)) -> DesignedIn1900(x))", "John Nash designed the CentralLine(JohnNash,1900)", "John Nash, Architect of CentralLine(JohnNash,1909), designed line in 1900.", "John Nash designed CentralLineIn1900.", "John Nash designed CentralLineIn1900."]}
{"id": "folio_train_1295", "nl": "Regent Street is not in London.", "fol": "all x.(IsRegentStreet(x) -> IsInLondon(x))", "prediction": ["Regent Street -InLondon(RegentStreet(RenownedStreet))", "-(RegentStreet(RegentStreet) & -London(RegentStreet))", "(-London(RegentStreet))", "Regent Street is not in London.", "RegentStreet -InLondon(regular)", "RegentStreet(RenownedStreet) -InLondon(RenownedStreet))", "(-London(RegentStreet))", "Regent Street -London.", "-(RegentStreet(RegentStreet,London))", "Regent Street -London(RegentStreet)", "(-London(RegentStreet))", "RegentStreet -London(RegentStay))", "Regent Street is not inLondon.", "RegentStreet is notInLondon(x)", "RegentStand isn'tInLondon(x)", "Regent Street is notInLondon(x)"]}
{"id": "folio_train_1296", "nl": "An animal is either a cat or a dog.", "fol": "all x.((IsCat(x) & -IsDog(x)) | (-IsCat(x) & IsDog(x)))", "prediction": ["all x.(Animal(x) -> (Cat(x) | Dog(x)))", "all x.(Animal(x) -> (Cat(x) | Dog(x)))", "all x.(Animal(x) -> (Cat(x) | Dog(x)))", "all x y.(Animal(x) -> (Cat(y) | Dog(y)))", "all x.(Animal(x) -> (Cat(x) | Dog(x)))", "all x y.(Animal(x) -> (Cat(x) | Dog(x)))", "all x.(Animal(x) -> (Cat(x) | Dog(x)))", "exists x.(Animal(x) & Cat(x) | Dog(x))", "all x y.(Animal(x) -> (Cat(y) | Dog(y)))", "all x.(Animal(x) -> (Cat(x) | Dog(x)))", "all x.(Animal(x) -> (Cat(x) | Dog(x)))", "all x.(Animal(x) -> (Cat(x) | Dog(x)))", "all x.(Animal(x) -> (Cat(x) | Dog(x)))", "exists x.(Animal(x) & Cat(x) & Dog(x))", "exists x.(Animal(x) & Cat(x) | Dog(x))", "exists x.(Animal(x) & (Cat(x) | Dog(x)))"]}
{"id": "folio_train_1297", "nl": "All dogs bark.", "fol": "all x.(IsDog(x) -> Barks(x))", "prediction": ["all x.(Dog(x) -> Barks(x))", "(all x.(Dog(x) -> Barks(x)))", "all x.(Dog(x) -> Barks(x))", "all x.(Dog(x) -> Bark(x))", "(All x.(Dog(x) -> Barks(x))", "all x.(Dog(x) -> Barks(x))", "all x y.(Dog(x) -> Barks(x))", "all x.(Dog(x) -> Bark(x))", "all x y.(Dog(x) -> Barks(x,y))", "all x.(Dog(x) -> Barks(x))", "all x.(Dog(x) -> Bark(x))", "all x.(Dog(x) -> Barks(x))", "all x.(Dog(x) -> Bark(x))", "all x.(Dog(x) -> Barks(x))", "exists x.(Dog(x) & Bark(x))", "exists x.(Dog(x) & Bark(x))"]}
{"id": "folio_train_1298", "nl": "Ghosts do not exist.", "fol": "all x.-IsGhost(x)", "prediction": ["all x.(Ghost(x) -> -exists(x))", "(Ghost(g) & -exists(g))", "(exists x.(Ghost(x) & -exists(x)))", "(Ghost(Ghost) & -exists(Ghost))", "exists x.(Ghost(x) & -exists y.(Ghost(y) & Exists(x,y)))", "all x.(Ghost(x) -> -exists(x))", "-exists x.(Ghost(x) & Ghost(x))", "GhostsDoesNotexist.", "exists x.(Ghost(x) & -exists y.(Ghost(y) & Exists(y)))", "all x.(Ghost(x) -> -exists(x))", "exists.", "all x.(Ghost(x) -> -exists.", "exists.", "all x.(Ghost(x) -> -exists(x))", "exists.", "all x.(Ghost(x) -> -exists."]}
{"id": "folio_train_1299", "nl": "If something barks, then it is not alive.", "fol": "all x.(Barks(x) -> -IsAlive(x))", "prediction": ["all x.(Barks(x) -> -Alive(x))", "all x.((Barks(x) & -Alive(x)) -> -Barks(x))", "all x.(Barks(x) -> -Alive(x))", "(Barks(x) -> -Alive(x))", "all x.(Barks(x) -> -Alive(x))", "all x.((Barks(x) & -Alive(x)) -> -Barks(x))", "all x y.((Barks(x) & Animal(y) & Live(x)) -> -Alive(x))", "all x.((Barks(x) & -Alive(x)) -> -Alive(x))", "all x.(Barks(x) -> -Alive(x))", "(all x.(Barks(x) -> -Alive(x)))", "all x.((Barks(x) & -Alive(x)) -> -Barks(x))", "all x.(Barks(x) -> -Alive(x))", "All x.((Barks(x)) -> -Alive(x))", "all x.(Barks(x) -> -Alive(x))", "exists x.(Barks(x) & -Alive(x))", "exists x.(Barks(x) & -Alive(x))"]}
{"id": "folio_train_1300", "nl": "A thing is either alive or dead.", "fol": "all x.((IsAlive(x) & -IsDead(x)) | (-IsAlive(x) & IsDead(x)))", "prediction": ["all x.(Thing(x) -> (Alive(x) | Dead(x)))", "all x.(Thing(x) -> (Alive(x) | Dead(x)))", "exists x.(Thing(x) & (Alive(x) | Dead(x)))", "all x.(Dawn(x) -> (Alive(x) | Dead(x)))", "all x.(Tea(x) -> (Alive(x) | Dead(x)))", "all x.(Thing(x) -> (Alive(x) | Dead(x)))", "all x y.((Thing(x) & Lifeless(y)) | Dead(y))", "exists x.(Thing(x) & (Alive(x) | Dead(x)))", "all x.(Dawn(x) -> (Alive(x) | Dead(x)))", "all x y.((Thing(x) & Live(y)) | Dead(y))", "all x.(Thing(x) -> (Alive(x) | Dead(x)))", "exists x.(Dream(x) & (Alive(x) | Dead(x)))", "exists x.(Thing(x) & (Alive(x) | Dead(x)))", "exists x.(Thing(x) & (Alive(x) | Dead(x)))", "exists x.(Thing(x) & (Alive(x) | Dead(x)))", "exists x.(Thing(x) & (Alive(x) | Dead(x)))"]}
{"id": "folio_train_1301", "nl": "Jojo is not dead.", "fol": "-IsDead(Jojo)", "prediction": ["all x.(Jojo(x) -> -Dead(x))", "(-Dead(Jojo))", "Jojo is notDead(Jojo)", "Jojo n'est pasDead(Jojo)", "(Daily(jojo) -> -Dead(jojo))", "-Dead(Jojo)", "Jojo is notDead(Jojo)", "all x.(Jojo(x) -> -Dead(x))", "(-Dead(jojo))", "-Damaged(jojo)", "Jojo is notDead(Jojo)", "all x.(Jojo(x) -> -Dead(x))", "(-Dead(Jojo))", "-Damaged(jojo)", "-Dead(Jojo)", "(NoDeath(Jojo))"]}
{"id": "folio_train_1302", "nl": "Jojo is a ghost.", "fol": "IsGhost(Jojo)", "prediction": ["all x.(Jojo(x) -> Ghost(x))", "(Ghost(jojo) & Ghost(jojo))", "Jojo is a ghost.", "all x.(Jojo(x) -> Ghost(x))", "(Ghost(jojo) & Ghost(jojo))", "(Ghost(Jojo) & Ghost(Jojo))", "Jojo is Ghost(jojo)", "all x.(Hojo(x) -> Ghost(x))", "all x.(Jojo(x) -> Ghost(x))", "Jojo is a Ghost(Jojo)", "(Ghost(jojo) & Ghost(jojo))", "Jojo is ghost.", "-Ghost(jojo)", "exists x.(Ghost(x) & Jojo(x))", "all x.(Jojo(x) -> Ghost(x))", "(Ghost(jojo) & Ghost(jojo))"]}
{"id": "folio_train_1303", "nl": "Jojo is a cat or a ghost.", "fol": "(IsCat(Jojo) | IsGhost(Jojo))", "prediction": ["all x.(Jojo(x) -> (Cat(x) | Ghost(x)))", "(Cat(jojo) | Ghost(jojo))", "(Cat(Jojo) | Ghost(Jojo))", "all x.(Jojo(x) -> (Cat(x) | Ghost(x)))", "all x y.((Jojo(x) & Cat(y)) | Ghost(y)) -> (Cat(x) | Ghost(x)))", "all x.((Jojo(x) & (Cat(x) | Ghost(x))) -> (Cat(x) | Ghost(x)))", "(Cat(jojo) | Ghost(jojo))", "all x y.((Jojo(x) & Cat(y)) | Ghost(x,y)) -> (Cat(x) | Ghost(x)))", "all x.(Jojo(x) -> (Cat(x) | Ghost(x)))", "exists x.(Hojo(x) & (Cat(x) | Ghost(x)))", "(Cat(Jojo) | Ghost(Jojo))", "(Cat(jojo) | Ghost(jojo))", "all x.(Jojo(x) -> (Cat(x) | Ghost(x)))", "exists x.(Cat(x) | Ghost(x))", "all x.(Jojo(x) -> (Cat(x) | Ghost(x)))", "exists x.(Jojo(x) & (Cat(x) | Ghost(x)))"]}
{"id": "folio_train_1304", "nl": "If Jojo is a cat or a ghost, then Jojo either barks or is a dog.", "fol": "((IsCat(Jojo) | IsGhost(Jojo)) -> (Barks(Jojo) | IsDog(Jojo)))", "prediction": ["all x.((Cat(x) | Ghost(x)) -> (Barks(x) | Dog(x)))", "((Cat(jojo) | Ghost(jojo))) -> (Barks(jojo,jojo) | Dog(jojo)))", "all x.((Kat(x) | Ghost(x)) -> (Barks(x) | Dog(x)))", "all x.((Cat(x) | Ghost(x)) -> (Barks(x) | Dog(x)))", "all x.((Jojo(x) & (Cat(x) | Ghost(x))) -> (Barks(x) | Dog(x)))", "(all x.((Kat(x) | Ghost(x))) -> (Barks(x) | Dog(x)))", "all x.((Cat(x) | Ghost(x)) -> (Barks(x) | Dog(x)))", "all x.((Kat(x) | Ghost(x)) -> (Barks(x) | Dog(x)))", "exists x.(Cat(x) | Ghost(x)) & Barks(x) & Dog(x))", "((Cat(Jojo) | Ghost(Jojo))) | Barks(Jojo) | Dog(Jojo))", "all x y.((Cat(x) | Ghost(x)) -> (Barks(y) | Dog(y)))", "all x.((Cat(x) | Ghost(x)) -> (Barks(x) | Dog(x)))", "all x.(((Cat(x) | Ghost(x))) -> (Barks(x) | Dog(x)))", "exists x.(Cat(x) | Ghost(x)) & Barks(x) & Dog(x))", "all x.((Kat(x) | Ghost(x)) -> (Barks(x) | Dog(x)))", "all x.((Cat(x) | Ghost(x)) -> (Barks(x) | Dog(x)))"]}
{"id": "folio_train_1305", "nl": "All animals that are tigers are cats.", "fol": "all x.(IsTiger(x) -> IsCat(x))", "prediction": ["all x.(Tiger(x) -> Cat(x))", "all x.((Animal(x) & Tiger(x)) -> Cat(x))", "all x.(Tiger(x) -> Cat(x))", "all x.((Animal(x) & Tiger(x)) -> Cat(x))", "all x.(Tiger(x) -> Cat(x))", "all x y.((Animal(x) & Tiger(x)) -> Cat(y))", "all x.((Animal(x) & Tiger(x)) -> Cat(x))", "all x.(Tiger(x) -> Cat(x))", "(all x.(Tiger(x) -> Cat(x)))", "all x.((Animal(x) & Tiger(x)) -> Cat(x))", "all x.(Tiger(x) -> Cat(x))", "(all x.(Tiger(x) -> Cat(x))", "all x.((Animal(x) & Tiger(x)) -> Cat(x))", "all x.(Tiger(x) -> Cat(x))", "all x.((Animal(x) & Tiger(x)) -> Cat(x))", "all x.(Tiger(x) -> Cat(x))"]}
{"id": "folio_train_1306", "nl": "No cats are dogs.", "fol": "all x.(IsCat(x) -> -IsDog(x))", "prediction": ["-exists x.(Cat(x) & Dog(x))", "all x.(Cat(x) -> Dog(x))", "-exists x.(Cat(x) & Dog(x))", "all x.(Cat(x) -> Dog(x))", "(exists x.(Cat(x) & Dog(x)))", "-exists x.(Cat(x) & Dog(x))", "all x.(Cat(x) -> Dog(x))", "(exists x.(Cat(x) & Dog(x)))", "-exists x.(Cat(x) & Dog(x))", "all x.(Cat(x) -> Dog(x))", "-all x.(Cat(x) -> Dog(x))", "-exists x.(Cat(x) & Dog(x))", "all x.(Cat(x) -> Dog(x))", "-exists x.(Cat(x) & Dog(x))", "-exists x.(Cat(x) & Dog(x))", "-exists x.(Cat(x) & Dog(x))"]}
{"id": "folio_train_1307", "nl": "All Bengal tigers are tigers.", "fol": "all x.(IsBengalTiger(x) -> IsTiger(x))", "prediction": ["all x.(BengalTiger(x) -> Tiger(x))", "all x.(BangladeshTiger(x) -> Tiger(x))", "(all x.(BangladeshTiger(x) -> Tiger(x)))", "all x.(BengalTiger(x) -> Tiger(x))", "(all x.(BengalTiger(x) -> Tiger(x))", "all x y.((BengalTiger(x) & BengalTiger(y)) -> Tiger(x))", "all x.(BelgiumTiger(x) -> Tiger(x))", "all x.(BengaliTiger(x) -> Tiger(x))", "all x.( BengalTiger(x) -> Tiger(x))", "all x.(BangladeshTiger(x) -> Tiger(x))", "(all x.(BengalTiger(x) -> Tiger(x))", "all x.(BengalTiger(x) -> Tiger(x))", "(all x.(BengaliTiger(x) -> Tiger(x))", "all x.(BengalTiger(x) -> Tiger(x))", "all x.(BengalTiger(x) -> Tiger(x))", "all x.(BengaliTiger(x) -> Tiger(x))"]}
{"id": "folio_train_1308", "nl": "Everything that is a husky is a dog.", "fol": "all x.(IsHusky(x) -> IsDog(x))", "prediction": ["all x.((Husky(x) & Husky(x)) -> Dog(x))", "all x.((Husky(x) & HasHunt(x)) -> Dog(x))", "all x.(Husky(x) -> Dog(x))", "all x.((Husky(x) & Dog(x)) -> Dog(x))", "all x.(Husky(x) -> Dog(x))", "all x.((Husky(x) & Husky(x)) -> Dog(x))", "all x y.((Husky(x) & Dog(y)) -> HasHunt(x,y))", "all x.((Husky(x) & Husky(x)) -> Dog(x))", "all x.((Husky(x) & HasDog(x)) -> Dog(x))", "all x.(Husky(x) -> Dog(x))", "all x.(Husky(x) -> Dog(x))", "all x.(Husky(x) -> Dog(x))", "(all x.(Husky(x) -> Dog(x)))", "all x.((Husky(x) & Husky(x)) -> Dog(x))", "all x.(Husky(x) -> Dog(x))", "all x.(Husky(x) -> Dog(x))"]}
{"id": "folio_train_1309", "nl": "Fido is either a Bengal tiger or a cat.", "fol": "(IsBengalTiger(Fido) | IsCat(Fido))", "prediction": ["all x.(Fido(x) -> (BengalTiger(x) | Cat(x)))", "(BengalTiger(Fido) | Cat(Fido))", "(BelgiumTiger(Fido) | BengalCat(Fido))", "all x.(Fido(x) -> (BengaliTiger(x) | Cat(x)))", "(BangladeshTiger(Fido) | Cat(Fido))", "(BengalTiger(Fido) | Cat(Fido))", "all x.(Fido(x) -> (BengalTiger(x) | Cat(x)))", "(BengaliTiger(Fido) | BengalCat(Fido))", "all x.(Fido(x) -> (BengalTiger(x) | Cat(x)))", "exists x.(Fido(x) & (BengaliTiger(x) | Cat(x)))", "all x y.((Fido(x) & BengalTiger(y)) | Cat(x,y))", "all x.(Fido(x) -> (BengalTiger(x) | Cat(x)))", "(BengalTiger(Fido) | Cat(Fido))", "all x.(Fido(x) -> (BengaliTiger(x) | Cat(x)))", "exists x.(Fido(x) & (BengalTiger(x) | Cat(x)))", "all x.(Fido(x) -> (BengaliTiger(x) | Cat(x)))"]}
{"id": "folio_train_1310", "nl": "Fido is a husky.", "fol": "IsHusky(Fido)", "prediction": ["all x.(Husky(x) -> Fido(x))", "(Husky(Fido) & Husky(Fido))", "Fido is Husky(x)", "all x.(Husky(x) -> Fido(x))", "(Hunky(Fido) & Husky(Fido))", "(Husky(Fido) & Husky(Fido))", "Fido is Husky(x)", "(Husky(Fido) | Husky(Fido))", "all x.(Husky(x) -> Fido(x))", "all x.(Husky(x) -> Fido(x))", "Fido is a Husky.", "Fido is Husky(x)", "Fido ist Husky(Fido)", "(Hunky(Fido) | Husky(Fido))", "all x.(Husky(x) -> Fido(x))", "all x.(Husky(x) -> Husky(x))"]}
{"id": "folio_train_1311", "nl": "Fido is not a husky.", "fol": "-IsHusky(Fido)", "prediction": ["(-Husky(Fido))", "all x.(Fido(x) -> -Husky(x))", "Fido is notHusky(Fido)", "all x.(Husky(x) -> -Husky(x))", "all x.(Fido(x) -> -Husky(x))", "Fido - Husky(Fido)", "-Husky(Fido)", "(-Husky(Fido))", "(Hushy(Fido) & -Husky(Fido))", "all x.(Fido(x) -> -Husky(x))", "(Hunky(Fido) | Husky(Fido))", "Fido is notHusky(Fido,y)", "all x.(Husky(x) -> -Husky(x))", "-Husky(Fido)", "(-Husky(Fido))", "Fido - Husky(Fido)"]}
{"id": "folio_train_1312", "nl": "Fido is a Bengal tiger.", "fol": "IsBengalTiger(Fido)", "prediction": ["(BengalTiger(Fido) & BengalTiger(Fido))", "Fido is BengalTiger(x)", "Fido (BengalTiger(Fido))", "(BangladeshTiger(Fido))", "all x.(Fido(x) -> BengalTiger(x))", "(BengalTiger(Fido) & BengalTiger(Fido))", "Fido is BengalTiger(x)", "Fido (BengalTiger(Fido))", "(BengalTiger(Fido) & BengalTiger(Fido))", "all x.(Fido(x) -> BengalTiger(x))", "Fido ist ein BengalTiger(Fido)", "Fido is BengalTiger(x)", "all x.(Fido(x) -> BengalTiger(x))", "(BengalTiger(Fido) & BengalTiger(Fido))", "Fido is BengalTiger(x)", "(BengaliTiger(Fido))"]}
{"id": "folio_train_1313", "nl": "Fido is neither a dog nor a husky.", "fol": "(-IsDog(Fido) & -IsHusky(Fido))", "prediction": ["all x.(Fido(x) -> (-Dog(x) | Husky(x)))", "(-Dog(Fido) & -Husky(Fido))", "(-(Dog(Fido) | Husky(Fido)))", "(-Dog(Fido) | Husky(Fido))", "all x.(Fido(x) -> (-Dog(x) | Husky(x)))", "Fido -(Dog(Fido) | Husky(Fido))", "-(Dog(Fido) | Husky(Fido))", "all x.(Fido(x) -> (-Dog(x) | Husky(x)))", "(NeitherDog(Fido) noch Husky(Fido))", "-(Dog(Fido) & -Husky(Fido))", "all x.(Fido(x) -> (-Dog(x) | Husky(x)))", "all x.(Fido(x) -> (-Dog(x) | Husky(x)))", "(-Dog(Fido) & -Husky(Fido))", "all x.(Fido(x) -> (-Dog(x) | Husky(x)))", "(-Dog(Fido) | Husky(Fido))", "all x.(Fido(x) -> (-Dog(x) | Husky(x)))"]}
{"id": "folio_train_1314", "nl": "If a city hold a Summer Olympics, and the city is a US city, then the Summer Olympics will be in the US.", "fol": "all x y.((HoldsSummerOlympics(x,y) & IsCityInCountry(y,Us)) -> OlympicsInCountry(x,Us))", "prediction": ["all x.((City(x) & HoldsSummerOlympics(x) & USCity(x)) -> SummerOlympicsInUS(x))", "all x y.((City(x) & SummerOlympics(y) & Holds(x,y) & USCity(x)) -> SummerOlympicsInUS(x))", "(all x.(SummerOlympics(x) -> Holds(x,y)) & all z.((City(z) & USCity(z)) -> SummerOlympicsIn(z,us)))", "all x.((City(x) & HoldsSummerOlympics(x) & USCity(x)) -> SummerOlympicsInUS(x))", "all x y.((City(x) & HoldsSummerOlympics(x) & City(y) & USCity(y)) -> SummerOlympicsInUS(x))", "all x y.((City(x) & SummerOlympics(y) & Holds(x,y) & USCity(x)) -> SummerOlympicsInUS(x))", "all x.((City(x) & SummerOlympics(x) & USCity(x)) -> SummerOlympicsInUS(x))", "all x y.((City(x) & City(y) & HoldsSummerOlympics(x,y) & USCity(y)) -> SummerOlympicsInUS(x))", "all x.(SummerOlympics(x) -> (Holds(x,Summer) & USCity(x)))", "(all x.(SummerOlympics(x) -> Holds(x,y)) & all z.(USCity(z) -> SummerOlympics(x,z)))", "all x y z.((City(x) & SummerOlympics(y) & City(z) & Holds(x,y) & USCity(x,z)) -> SummerOlympicsInUS(x))", "all x.((City(x) & HoldsSummerOlympics(x) & USCity(x)) -> SummerOlympicsInUS(x))", "all x.((City(x) & SummerOlympics(x) & USCity(x)) -> SummerOlympicsInUS(x))", "all x y.((City(x) & SummerOlympics(y) & Holds(x,y) & USCity(x)) -> SummerOlympicsIn(x,y))", "all x.((City(x) & HoldsSummerOlympics(x) & USCity(x)) -> SummerOlympicsInUS(x))", "all x.((City(x) & HoldsSummerOlympics(x) & USCity(x)) -> SummerOlympicsInUS(x))"]}
{"id": "folio_train_1315", "nl": "If a city is in a state which is in US, the city is a US city.", "fol": "all x y.((IsCityInState(x,y) & IsStateInCountry(y,Us)) -> IsCityInCountry(x,Us))", "prediction": ["all x.((City(x) & InState(x) & InUS(x)) -> USCity(x))", "all x y.((City(x) & State(y) & In(x,y)) -> USCity(x))", "all x.((City(x) & InState(x) & InUS(x)) -> USCity(x))", "all x.((City(x) & StateInUS(x)) -> USCity(x))", "all x y.((City(x) & State(y) & In(x,y)) -> USCity(x))", "all x y z.((City(x) & State(y) & State(z) & In(x,y,z)) -> USCity(x))", "all x.((City(x) & InStateInUS(x)) -> USCity(x))", "all x.((City(x) & StateIn(x,US)) -> USCity(x))", "all x y.((City(x) & State(y) & In(x,y)) -> USCity(x))", "exists x.(City(x) & InState(x) & InUS(x))", "all x y.((City(x) & StateIn(x,y) & In(x,y)) -> USCity(x))", "all x.((City(x) & InStateInUS(x)) -> USCity(x))", "all x y.((City(x) & State(y) & InUS(x,y)) -> USCity(x))", "all x y.((City(x) & State(y) & In(x,y)) -> USCity(x))", "all x.((City(x) & StateInUS(x)) -> USCity(x))", "all x.((City(x) & In(x,USState)) -> USCity(x))"]}
{"id": "folio_train_1316", "nl": "If a city in a state, and a Summer Olympics is in this city, then the Summer Olympics is in this state.", "fol": "all z.((IsCityInState(x,y) & HoldsSummerOlympics(z,x)) -> OlympicsInState(z,y))", "prediction": ["all x y.((City(x) & State(y) & SummerOlympics(x) & In(x,y)) -> SummerOlympicsIn(x,y))", "all x.((City(x) & State(x) & SummerOlympics(x)) -> SummerOlympicsInState(x))", "all x y z.((City(x) & State(y) & SummerOlympics(z) & In(x,y,z)) -> SummerOlympics(x,y,z))", "all x y.((City(x) & State(y) & SummerOlympics(x) & In(x,y)) -> SummerOlympics(x))", "(all x y.((City(x) & State(y) & SummerOlympics(x) & In(x,y)) -> In(x,y)))", "all x.((City(x) & State(x) & SummerOlympics(x)) -> SummerOlympics(x))", "(all x.((City(x) & State(x) & SummerOlympics(x)) -> InState(x)))", "all x y.((City(x) & State(y) & SummerOlympics(x,y)) -> InState(x,y))", "all x.((City(x) & State(x) & SummerOlympicsIn(x,city)) -> SummerOlympicsIn(x,state))", "exists x.(SummerOlympics(x) & CityInState(x) & SummerOlympicsInState(x))", "all x y z.((City(x) & State(y) & SummerOlympics(z) & In(x,z)) -> SummerOlympics(x,y,z))", "all x y.((City(x) & State(y) & SummerOlympics(x) & InCity(x,y)) -> SummerOlympicsInState(x,y))", "all x.((CityInState(x) & SummerOlympicsInState(x)) -> SummerOlympicsInState(x))", "all x.((City(x) & State(x) & SummerOlympics(x)) -> StateOlympics(x))", "all x.((CityInState(x) & SummerOlympicsInState(x)) -> SummerOlympicsInState(x))", "all x y.((City(x) & State(y) & SummerOlympics(x,y)) -> InState(x,y))"]}
{"id": "folio_train_1317", "nl": "The 2028 Summer Olympics is scheduled to take place in Los Angeles(LA).", "fol": "HoldsSummerOlympics(Y2028,La)", "prediction": ["all x.((SummerOlympics(x) & 2028(x)) -> ScheduledIn(x,LA))", "(SchedulesToTakePlaceIn(2028) & Los Angeles(LA))", "All x.(SummerOlympics(x) -> (SchedulesInLosAngeles(x) & 2028(x)))", "(Schedule(2028) & SummerOlympics(2028) & Los Angeles(LA))", "All x y.((SummerOlympics(x) & LosAngeles(y)) -> ScheduledToTakePlaceIn(x,y))", "all x.((SummerOlympics(x) & LosAngeles(x)) -> ScheduledToTakePlace(x,2028))", "The SummerOlympics(2028) is scheduled to take place in Los Angeles(LA))", "(ScheduledToTakePlaceIn(2028) & Los Angeles(LA))", "(ScheduledIn(2028) & SummerOlympics(2028) & Los Angeles(LA))", "All x y.((SummerOlympics(x) & Summer(y)) -> ScheduledToTakePlaceIn(x,y))", "the SummerOlympics(2028) & ScheduledToTakePlaceIn(2028,LA))", "all x.(SummerOlympics(x) -> (ScheduledToTakePlaceIn(x,LA) & 2028(x)))", "(SchedulesToTakePlaceIn(2028,LA))", "all x.((SummerOlympics(x) & 2028(x)) -> ScheduledIn(x,LA))", "(ScheduledToTakePlaceIn(2028,LA))", "The SummerOlympics(2028) is scheduled to take place in Los Angeles(LA))"]}
{"id": "folio_train_1318", "nl": "LA is a city in California(CA).", "fol": "IsCityInState(La,Ca)", "prediction": ["(City(LA) & InCalifornia(LA))", "all x.(LasAngeles(x) -> CityInCalifornia(x))", "all x.(La(x) -> CityInCalifornia(x))", "all x.((City(x) & California(x)) -> LA(x))", "(City(LA) & California(CA))", "LA is a city in California(CA)", "all x y.((City(x) & California(y)) -> (LasVegas(x) & City(y)))", "all x.(LasArea(x) -> CityInCalifornia(x))", "(CityInCalifornia(LA) & CityInCA(LA))", "(City(LA) & InCalifornia(LA))", "((City(LA) & California(CA)) -> City(LA,CA))", "all x.(LasAngeles(x) -> (CityInCalifornia(x) & LocatedIn(x,CA)))", "all x.((City(x) & California(x)) -> LA(x))", "(City(LA,CA) & LocatedIn(LA,CA))", "(City(LA) & California(CA))", "(City(La) & California(La))"]}
{"id": "folio_train_1319", "nl": "Atlanta is a US city.", "fol": "IsCityInCountry(Atlanta,Us)", "prediction": ["all x.(Atlanta(x) -> USCity(x))", "Atlanta is a USCity(x)", "Atlanta (USCity)", "all x.(Atlanta(x) -> USCity(x))", "all x.((Atlanta(x) & USCity(x)) -> City(x))", "Atlanta is a USCity.", "(USCity(atlanta) & City(atlanta))", "Atlanta is USCity(x)", "Atlanta (USCity)", "all x.(Atlanta(x) -> USCity(x))", "(USCity(Atlanta))", "all x.(Atlanta(x) -> USCity(x))", "Atlanta (USCity)", "(USCity(Atlanta))", "all x.(Atlanta(x) -> USCity(x))", "All x.(Atlanta(x) -> USCity(x))"]}
{"id": "folio_train_1320", "nl": "Atlanta is in Georgia(CA).", "fol": "IsStateInCountry(Ca,Us)", "prediction": ["all x.(Atlanta(x) -> Georgia(x))", "(Georgia(Atlanta) & CA(Atlanta))", "(InGeorgia(Atlanta) & InCA(Atlanta))", "(Gastown(Atlanta) & Georgia(CA))", "(In(Atlanta,GA) & In(Atlanta,CA))", "Atlanta(atlanta) -> Georgia(atlanta))", "Atlanta(Atlanta) -> Georgia(CA))", "(Atlanta(Atlanta) -> InGeorgia(Atlanta))", "all x.(Atlanta(x) -> (InGeorgia(x) & InCA(x)))", "all x.(Atlanta(x) -> Georgia(x))", "(all x.(Atlanta(x) -> Georgia(x)))", "(Gatineau(Atlanta) & Georgia(CA))", "Atlanta (Gas) & InCA(Gas))", "all x.(Atlanta(x) -> (InGeorgia(x) | InCA(x)))", "All x.(Atlanta(x) -> InGeorgia(x))", "all x.(Atlanta(x) -> Georgia(x))"]}
{"id": "folio_train_1321", "nl": "CA is a state in the United States.", "fol": "IsCityInState(Atlanta,Ga)", "prediction": ["all x.(CA(x) -> StateInUnitedStates(x))", "(State(CA) & InUnitedStates(CA))", "all x.(California(x) -> StateInUnitedStates(x))", "all x.(CA(x) -> StateInUnitedStates(x))", "all x y.((CA(x) & State(y)) -> UnitedStates(x,y))", "all x.(CA(x) -> (State(x) & InUnitedStates(x)))", "all x y.((State(x) & CA(y)) -> InUnitedStates(x,y))", "all x y.((California(x) & UnitedState(y)) -> StateIn(x,y))", "(State(CA) & InUnitedStates(CA))", "exists x.(California(x) & State(x) & InUnitedStates(x))", "all x.(CA(x) -> StateInUnitedStates(x))", "(UnitedState(CA))", "(State(CA) & InUnitedStates(CA))", "exists x.(State(x) & In(x,US))", "(UnitedState(CA))", "all x.(CA(x) -> StateInUnitedStates(x))"]}
{"id": "folio_train_1322", "nl": "Boxing, modern pentathlon, and weightlifting will be removed from The 2028 Summer Olympics.", "fol": "(-IncludedInSummerOlympics(Y2028,Boxing) & -IncludedInSummerOlympics(Y2028,Modern_pentathlon) & -IncludedInSummerOlympics(Y2028,Weightlifting))", "prediction": ["all x.((Boxing(x) | ModernPentathlon(x) | Weightlifting(x)) -> RemovedFromSummerOlympics(x))", "(RemovedFromSummerOlympics(Boxing) & RemovedFromSummerOlympics(modernPentathlon) & RemovedFromSummerOlympics(Weightlifting))", "(all x.((Boxing(x) | ModernPentathlon(x) | Weightlifting(x))) -> RemovedFromSummerOlympics(x))", "all x y.((Boxing(x) & ModernPentathlon(y) & Weightlifting(x)) -> RemovedFromSummerOlympics(x,y))", "all x y z.((Boxing(x) & ModernPentathlon(y) & Weightlifting(z)) -> (RemovedFromSummerOlympics(x,y) & RemovedFromSummerOlympics(x,z)))", "all x.((Boxing(x) | ModernPentathlon(x) | Weightlifting(x)) -> RemovedFromSummerOlympics(x))", "All x.(SummerOlympics(x) -> (RemovedFromBoxing(x) | RemovedFromPentathlon(x) | RemovedFromWeightlifting(x)))", "(SummerOlympics(Boxing) & SummerOlympics(modernPentathlon) & SummerOlympics(weightlifting))", "all x y z.((Boxing(x) & ModernPentathlon(y) & Weightlifting(z)) -> (RemovedFromSummerOlympics(x,y,z) & RemovedFromSummerOlympics(x,z)))", "(all x.((Boxing(x) | ModernPentathlon(x) | Weightlifting(x))) -> RemovedFromSummerOlympics(x))", "all x y.((Boxing(x) & ModernPentathlon(y) & Weightlifting(y)) -> RemovedFromSummerOlympics(x,y))", "All x.((Boxing(x) | ModernPentathlon(x) | Weightlifting(x)) -> RemovedFromThe2028SummerOlympics(x))", "All x.(SummerOlympics(x) -> (RemovesBoxing(x) | RemovesPentathlon(x) | RemovesWeightlifting(x)))", "(All x.((Boxing(x) | ModernPentathlon(x) | Weightlifting(x)) -> RemovedFromSummerOlympics(x))", "All x.((Boxing(x) | ModernPentathlon(x) | Weightlifting(x)) -> RemovedFromSummerOlympics(x))", "All x.((Boxing(x) | ModernPentathlon(x) | Weightlifting(x)) -> RemovedFromThe2028SummerOlympics(x))"]}
{"id": "folio_train_1323", "nl": "Atlanta in the United States hold the 1996 Summer Olympics.", "fol": "HoldsSummerOlympics(Y1996,Atlanta)", "prediction": ["all x.((Atlanta(x) & UnitedStates(x)) -> SummerOlympics(x,1996))", "(SummerOlympics(Atlanta,UnitedStates) & HeldIn(Atlanta,UnitedStates))", "all x y.((Atlanta(x) & UnitedStates(y)) -> HoldsSummerOlympics(x,y))", "Atlanta, UnitedStates(at) & SummerOlympics(at))", "(HoldsSummerOlympics(Atlanta,UnitedStates))", "SummerOlympics(Atlanta,UnitedStates)", "In Atlanta, United States, are held the SummerOlympics(1996).", "(SummerOlympics(Atlanta,USA) & HeldIn(Atlanta,USA))", "Atlanta, UnitedStatesHoldsSummerOlympics(Atlanta,1996))", "all x.((Atlanta(x) & UnitedStates(x)) -> SummerOlympics(x,1996))", "all x y.((Atlanta(x) & UnitedStates(y)) -> SummerOlympics(x,y))", "Atlanta (UnitedStates) & HoldsSummerOlympics(1996))", "all x y.((Atlanta(x) & UnitedStates(y) & HoldsSummerOlympics(x,y)) -> SummerOlympics(x,y))", "(SummerOlympics(Atlanta,UnitedStates) & HeldIn(Atlanta,UnitedStates))", "(SummerOlympics(Atlanta,USA) & HeldInCongress(Atlanta,USA))", "All x.((Atlanta(x) & UnitedStates(x)) -> SummerOlympics(x,1996))"]}
{"id": "folio_train_1324", "nl": "The 2028 Summer Olympics will take place in the US.", "fol": "OlympicsInCountry(Y2028,Us)", "prediction": ["all x.((SummerOlympics(x) & 2028(x)) -> TakesPlaceIn(x,US))", "all x y.((SummerOlympics(x) & Summer(y)) -> TakesPlaceIn(x,y))", "The SummerOlympics(2028) will take place in the US.", "All x.(SummerOlympics(x) -> TakesPlaceIn(x,US))", "(SummerOlympics(2028) & TakesPlaceInUS(2028))", "the SummerOlympics(2028) & TakesPlaceInUS(20))", "(SummerOlympics(2028) & TakesPlaceIn(2028,US))", "the 2028 SummerOlympics(x) -> TakenIn(x,US))", "All x.((SummerOlympics(x) & 2028(x)) -> TakesPlaceInUS(x))", "all x y.((SummerOlympics(x) & Summer(y)) -> TakesPlaceIn(x,y))", "all x y.((SummerOlympics(x) & 2028(y)) -> TakesPlaceIn(x,y))", "The SummerOlympics(2028) will take place in the US.", "All x.(SummerOlympics(x) -> TakenInUS(x))", "All x.((SummerOlympics(x) & 2028(x)) -> TakenIn(x,US))", "all x y.((SummerOlympics(x) & Summer(y) & 2028(x)) -> TakesPlaceIn(y,US))", "(SummerOlympics(2028) & TakesPlaceIn(2028,US))"]}
{"id": "folio_train_1325", "nl": "The 1996 Summer Olympics is not in Georgia.", "fol": "-OlympicsInState(Y1996,Ga)", "prediction": ["(SummerOlympics(1996) -InGeorgia(1996))", "-(SummerOlympics(1996) & -InGeorgia(1996))", "(-Georgia(SummerOlympics1996))", "The SummerOlympics(1996) -InGeorgia(1996))", "All x.(SummerOlympics(x) -> -InGeorgia(x))", "The 1996 SummerOlympics(x) is -InGeorgia(x))", "the 1996 SummerOlympics(SummerOlympics) -InGeorgia(SummerOlympics))", "1996 SummerOlympics(x) -InGeorgia(x))", "(SummerOlympics(1996) & -InGeorgia(1996))", "-(SummerOlympics(1996)) & -InGeorgia(1996))", "all x.(SummerOlympics(x) -> -Georgia(x))", "-Georgia(SummerOlympics1996).", "(SummerOlympics(1996) -InGeorgia(1996))", "1996 SummerOlympics(x) & -InGeorgia(x))", "(SummerOlympics(1996) & -InGeorgia(1996))", "The 1996 SummerOlympics(x) is notInGeorgia(x))"]}
{"id": "folio_train_1326", "nl": "Skateboarding will appear at The 2028 Summer Olympics.", "fol": "IncludedInSummerOlympics(Y2028,Skateboarding)", "prediction": ["All x.(Skateboarding(x) -> AppearsAtSummerOlympics(x,2028))", "All x y.((Skateboarding(x) & SummerOlympics(y)) -> AppearsAt(x,y))", "(AppearsAtSummerOlympics(Skateboarding,2028))", "All x.(Skateboarding(x) -> AffiliatesAtSummerOlympics(x,2028))", "all x.((Skateboarding(x) & SummerOlympics(x)) -> AppearsAt(x,2028))", "All x y.((Skateboarding(x) & SummerOlympics(y) & 2028(z)) -> AppearsAt(x,y,z))", "(AppearsAtThe2028SummerOlympics(skateboarding)", "all x.(Skateboarding(x) -> AppearsAtSummerOlympics(x,2028))", "all x.((Skateboarding(x) & SummerOlympics(x,2028)) -> AppearsAt(x,2028))", "all x.(Skateboarding(x) -> AffectsSummerOlympics(x,2028))", "The SummerOlympics(skateboarding,season,2028)", "All x y.((Skateboarding(x) & SummerOlympics(y)) -> Affair(x,y))", "All x y.((Skateboarding(x) & SummerOlympics(y) & 2028(z)) -> AppearsAt(x,y,z))", "all x.(Skateboarding(x) -> AppearsAtSummerOlympics(x,2028))", "all x.(Skateboarding(x) -> AppearsAtTheSummerOlympics(x,2028))", "All x y.((Skateboarding(x) & SummerOlympics(y) & 2028(y)) -> AppearsAt(x,y))"]}
{"id": "folio_train_1327", "nl": "The taiga vole is a large vole found in northwestern North America. ", "fol": "(IsVole(TaigaVole) & FoundIn(TaigaVole,NorthAmerica))", "prediction": ["all x.(TaigaVole(x) -> (LargeVole(x) & FoundInNorthwesternNorthAmerica(x)))", "(LargeVole(taiga) & FoundInNorthwesternNorthAmerica(taiga,northwest))", "all x y.((TaigaVole(x) & NorthwesternNorthAmerica(y)) -> LargeVole(x))", "all x.(TaigaVole(x) -> (LargeVole(x) & FoundInNorthwesternNorthAmerica(x)))", "all x.(TaigaVole(x) -> (LargeVole(x) & FoundInNorthwesternNorthAmerica(x)))", "(LargeVole(taiga) & FoundInNorthwesternNorthAmerica(taiga,northwestern))", "all x.(TaigaVole(x) -> (LargeVole(x) & FoundInNorthwesternNorthAmerica(x)))", "all x y.((TaigaVole(x) & NorthWestNorthAmerica(y)) -> LargeVole(x))", "(LargeVole(taiga) & FoundInNorthwesternNorthAmerica(taiga,northwest))", "all x.((TaigaVole(x) & FoundInNorthwesternNorthAmerica(x)) -> LargeVole(x))", "all x y.((TaigaVole(x) & NorthWest(y)) -> LargeVole(x))", "all x.(TaigaVole(x) -> (LargeVole(x) & FoundInNorthwesternNorthAmerica(x)))", "(LargeVole(taiga) & FoundInNorthwesternNorthAmerica(taiga,northwesternNordAmerica))", "all x.(TaigaVole(x) -> (LargeVole(x) & FoundInNorthwesternNorthAmerica(x)))", "all x.(TaigaVole(x) -> (LargeVole(x) & FoundInNorthwesternNorthAmerica(x)))", "all x.(TaigaVole(x) -> (LargeVole(x) & FoundInNorthwesternNorthAmerica(x)))"]}
{"id": "folio_train_1328", "nl": "Cats like playing with all voles.", "fol": "all x.(IsVole(x) -> CatsEnjoyPlayingWith(x))", "prediction": ["all x.(Cat(x) -> LikesPlayingWithVoles(x))", "all x y.((Cat(x) & Vole(y)) -> LikesPlayingWith(x,y))", "(all x.(Cat(x) -> LikesPlayingWithVoles(x)))", "all x.(Cat(x) -> LikesPlayingWithVoles(x))", "all x y.((Cat(x) & Vole(y)) -> LikesPlayingWith(x,y))", "(all x.(Cat(x) -> LikesPlayingWithVoles(x)))", "all x.(Cat(x) -> LikesPlayingWithVoles(x))", "all x y.((Cat(x) & Vole(y)) -> LikesPlaying(x,y))", "all x.(Cat(x) -> LikesPlayingWithVoles(x))", "(all x.(Cat(x) -> LikesPlayingWithVoles(x)))", "all x y.((Cat(x) & Vole(y)) -> LikesPlayingWith(x,y))", "(all x.(Cat(x) -> LikesPlayingWithVoles(x)))", "all x.(Cat(x) -> LikesPlayingWithVoles(x))", "all x.(Cat(x) -> (LikesPlayingWithVoles(x)))", "all x.(Cat(x) -> LikesPlayingWithVoles(x))", "all x.(Cat(x) -> LikesPlayingWithVoles(x))"]}
{"id": "folio_train_1329", "nl": "The taiga vole lives in the boreal taiga zone.", "fol": "LivesIn(TaigaVole,BorealTaigaZone)", "prediction": ["all x.(TaigaVole(x) -> LivesInBorealTaigaZone(x))", "all x y.((TaigaVole(x) & BorealTaigaZone(y)) -> LivesIn(x,y))", "(LivingInBorealTaigaZone(taigaVole)", "all x.(TaigaVole(x) -> LivesInBorealTaigaZone(x))", "(LivesInBorealTaigaZone(taigaVole) & -LivesInBorealTaigaZone(taiga))", "the borealtaigaZone(taigaVole)", "all x y.((TaigaVole(x) & BorealTaigaZone(y)) -> LivesIn(x,y))", "(LivingInBorealTaigaZone(taigaVole)", "all x.(TaigaVole(x) -> LivesInBorealTaigaZone(x))", "all x.(TaigaVole(x) -> LivesInBorealTaigaZone(x))", "all x.(TaigaVole(x) -> exists y.(BorealTaigaZone(y) & LivesIn(x,y)))", "all x y.((TaigaVole(x) & BoralTaigaZone(y)) -> LivesIn(x,y))", "exists x.(TaigaVole(x) & BorealTaigaZone(x))", "all x y.((TaigaVole(x) & BorealTaigaZone(y)) -> LivesIn(x,y))", "all x.(TaigaVole(x) -> LivesInBorealTaigaZone(x))", "exists x.(TaigaVole(x) & BorealTaigaZone(x))"]}
{"id": "folio_train_1330", "nl": "The boreal taiga zone in North America is a cold place to live in.", "fol": "all x.((FoundIn(x,NorthAmerica) & LivesIn(x,BorealTaigaZone)) -> IsColdPlace(x))", "prediction": ["all x.(BorealTaigaZone(x) -> ColdPlaceToLiveIn(x))", "all x.((BorealTaigaZone(x) & NorthAmerica(x)) -> ColdPlaceToLiveIn(x))", "all x y.((BorealTaigaZone(x) & NorthAmerica(y)) -> ColdPlaceToLiveIn(x,y))", "(ColdPlaceToLiveIn(BorealTaigaZone,NorthAmerica))", "all x.((BorealTaigaZone(x) & NorthAmerica(x)) -> ColdPlaceToLiveIn(x))", "all x.(BorealTaigaZone(x) -> ColdPlaceToLiveIn(x))", "all x y.((BorealTaigaZone(x) & NorthAmerica(y)) -> ColdPlaceToLiveIn(x,y))", "(ColdPlaceToLiveIn(BorealTaigaZone,NorthAmerica))", "all x.((BorealTaigaZone(x) & NorthAmerica(x)) -> ColdPlaceToLiveIn(x))", "all x y.((BorealTaigaZone(x) & NorthAmerica(y)) -> ColdPlaceToLiveIn(x,y))", "all x.(BorealTaigaZone(x) -> ColdPlaceToLiveIn(x))", "(ColdPlaceToLiveIn(BorealTaigaZone,NorthAmerica))", "all x y.((BorealTaigaZone(x) & NorthAmerica(y)) -> ColdPlaceToLiveIn(x,y))", "all x y.((BorealTaigaZone(x) & NorthAmerica(y)) -> ColdPlaceToLiveIn(x,y))", "all x.(BorealTaigaZone(x) -> ColdPlaceToLiveIn(x))", "all x.((BorealTaigaZone(x) & NorthAmerica(x)) -> ColdPlaceToLiveIn(x))"]}
{"id": "folio_train_1331", "nl": "Taiga vole is typically much larger than most other North American voles, especially those from the genus Microtus.", "fol": "IsLargerThan(TaigaVole,MicrotusVole)", "prediction": ["all x.(TaigaVole(x) -> (LargerThanMostNorthAmericanVoles(x) & EspeciallyGenusMicrotus(x)))", "all x y.((TaigaVole(x) & NorthAmericanVole(y)) -> (Larger(x,y) & Larger(x,y)))", "(LargerTaigaVole(t) & LargerThanMostNorthAmericanVoles(t) & MicrotusVoles(t))", "all x y z.((TaigaVole(x) & NorthAmericanVole(y) & MicrotusVole(z)) -> (LargerThan(x,y) & LargerThan(x,z)))", "all x.(TaigaVole(x) -> (LargerThanMostNorthAmericanVoles(x) & EspeciallyGenusMicrotus(x)))", "all x y.((TaigaVole(x) & NorthAmericanVole(y)) -> (LargerThan(x,y) & Microtus(y)))", "all x.((TaigaVole(x) & NorthAmericanVole(x) & MicrotusVole(x)) -> LargerThan(x))", "(LargerTaigaVole(t) & LargerThanMostNorthAmericanVoles(t) & EspeciallyGenusMicrotus(t))", "all x.(TaigaVole(x) -> (LargerThanMostNorthAmericanVoles(x) & MicrotusVoles(x)))", "all x.(TaigaVole(x) -> (LargerThanMostNorthAmericanVoles(x) & EspeciallyGenusMicrotus(x)))", "all x y z.((TaigaVole(x) & NorthAmericanVole(y) & MicrotusVole(z)) -> (LargerThan(x,y) & LargerThan(x,z)))", "all x y.((TaigaVole(x) & NorthAmericanVole(y)) -> (Larger(x,y) & MicrotusVole(x)))", "all x y.((TaigaVole(x) & NorthAmericanVole(y)) -> (MuchLarger(x,y) & EspeciallyGenusMicrotus(x)))", "(LargerTaigaVole(t) & LargerThanMostNorth AmericanVoles(t) & MicrotusGenus(t))", "all x.(TaigaVole(x) -> (MuchLargerThanMostNorthAmericanVoles(x) & EspeciallyGenusMicrotus(x)))", "all x.(TaigaVole(x) -> (LargerThanMostNorthAmericanVoles(x) & EspeciallyGenusMicrotus(x)))"]}
{"id": "folio_train_1332", "nl": "Cats like playing with taiga vole.", "fol": "CatsEnjoyPlayingWith(TaigaVole)", "prediction": ["all x.(Cat(x) -> LikesPlayingWithTaigaVole(x))", "all x y.((Cat(x) & TaigaVole(y)) -> LikesPlayingWith(x,y))", "(LikesPlayingWithTaigaVole(Cat))", "all x.(Cat(x) -> LikesPlayingWithTaigaVole(x))", "(all x.(Cat(x) -> LikesPlayingWithTaigaVole(x)))", "(all x.(Cat(x) -> LikesToPlayWith(x,TaigaVole)))", "all x y.((Cat(x) & TaigaVole(y)) -> LikesPlaying(x,y))", "all x.(Cat(x) -> LikesPlayingWithTaigaVole(x))", "all x y.((Cat(x) & TaigaVole(y)) -> LikesPlayingWith(x,y))", "all x.(Cat(x) -> LikesToPlayWith(x,TaigaVole))", "all x.(Cat(x) -> LikesPlayingWithTaigaVole(x))", "all x.(Cat(x) -> (PlaysWithTaigaVole(x) | PlaysWithTaigaVole(x)))", "all x y.((Cat(x) & TaigaVole(y)) -> LikesPlaying(x,y))", "all x.(Cat(x) -> PlayingWithTaigaVole(x))", "all x y.((Cat(x) & TaigaVole(y)) -> LikesToPlayWith(x,y))", "all x.(Cat(x) -> LikesPlayingWithTaigaVole(x))"]}
{"id": "folio_train_1333", "nl": "Taiga vole's living place is not cold.", "fol": "-IsColdPlace(TaigaVole)", "prediction": ["all x.(TaigaVole(x) -> -Cold(x))", "-ColdLivingPlace(taigaVole)", "(LivingPlace(taigaVole,taiga) & -Cold(taiga))", "all x.(TaigaVole(x) -> -Cold(x))", "all x y.((TaigaVole(x) & LivingPlace(y)) -> -Cold(x))", "(LivingPlace(TaigaVole,Clothing) & -Cold(TaigaVole,Clothing))", "-ColdLivingPlace(taigaVole)", "(LivingPlace(taigaVole,taiga) & -Cold(taiga))", "all x.(TaigaVole(x) -> -Cold(x))", "all x.(TaigaVole(x) -> -ColdLivingPlace(x))", "all x y.((TaigaVole(x) & LivingPlace(y)) -> -Cold(y))", "exists x.(TaigaVole(x) & LivingPlace(x) & -Cold(x))", "exists x.(TaigaVole(x) & LivingPlace(x) & -Cold(x))", "all x.(TaigaVole(x) -> -Cold(x))", "all x.(TaigaVole(x) -> -ColdLivingPlace(x))", "exists x.(TaigaVole(x) & LivingPlace(x) & -Cold(x))"]}
{"id": "folio_train_1334", "nl": "Every illness is in women or in men. ", "fol": "all x.(IsWoman(x) | IsMan(x))", "prediction": ["all x.(Illness(x) -> (InWomen(x) | InMen(x)))", "all x.(Illness(x) -> (InWomen(x) | InMen(x)))", "all x.(Illness(x) -> (In(x,Women) | In(x,Men)))", "(exists x.(Illness(x) & (Women(x) | Men(x))) & In(x,Women(x))", "all x y.((Illness(x) & (Women(y) | Men(y))) -> In(x,y))", "(exists x.(Illness(x) & (InWomen(x) | InMen(x))))", "exists x.(Infection(x) & (Women(x) | Men(x)))", "all x.(Illness(x) -> (InWomen(x) | InMen(x)))", "all x.(Illness(x) -> (In(x,Women) | In(x,Men)))", "all x y.((Illness(x) & (Woman(y) | Men(y))) -> In(x,y))", "all x.(Illness(x) -> (InWomen(x) | InMen(x)))", "all x.(Illness(x) -> (Women(x) | Men(x)))", "all x.(Illness(x) -> (InWomen(x) | InMen(x)))", "all x.(Infection(x) -> (InWomen(x) | InMen(x)))", "exists x.(Illness(x) & (Women(x) | Men(x)))", "exists x.(Illness(x,Women) | Illness(x,Men))"]}
{"id": "folio_train_1335", "nl": "No men have breast cancer.", "fol": "all x.(IsMan(x) -> -HasBreastCancer(x))", "prediction": ["-exists x.(Men(x) & BreastCancer(x))", "all x.(Men(x) -> -HasBreastCancer(x))", "(exists x.(Men(x) & BreastCancer(x)) & -exists y.(Men(y) & Has(x,y))))", "-exists x.(Men(x) & BreastCancer(x))", "all x.(Men(x) -> -HasBreastCancer(x))", "(exists x.(Men(x) & HasBreastCancer(x)))", "-exists x.(Men(x) & HasBreastCancer(x))", "-exists x.(Men(x) & BreastCancer(x))", "all x.(Men(x) -> -HasBreastCancer(x))", "-exists x.(Men(x) & BreastCancerous(x))", "-exists x.(Man(x) & BreastCancer(x))", "-exists x.(Men(x) & HasBreastCancer(x))", "all x.(Men(x) -> NoBreastCancer(x))", "-exists x.(Men(x) & BreastCancer(x))", "-exists x.(Men(x) & HasBreastCancer(x))", "-exists x.(Man(x) & BreastCancer(x))"]}
{"id": "folio_train_1336", "nl": "Either breast cancer or non-breast cancer. ", "fol": "all x.(HasBreastCancer(x) | HasNonBreastCancer(x))", "prediction": ["all x.((BreastCancer(x) | NonBreastCancer(x)) -> (BreastCancer(x) | NonBreastCancer(x)))", "((BreastCancer(x) | NonBreastCancer(x)))", "(exists x.(BreastCancer(x) & (BreastCancer(x) | NonBreastCancer(x))))", "exists x.(BreastCancer(x) | NonBreastCancer(x))", "(BreastCancer(x) | NonBreastCancer(x))", "all x.((BreastCancer(x) | NonBreastCancer(x)) -> (Cancer(x) | Cancer(x)))", "all x y.((BreastCancer(x) & NonBreastCancer(y)) -> (BreastCancer(x) | NonBreastCancer(y)))", "all x.((BreakCancel(x) | NonBreastCancel(x)) -> (Cancer(x) | Cancer(x)))", "((BreastCancer(x) | NonBreastCancer(x)))", "all x.((BreastCancer(x) | NonBreastCancer(x)) -> (Cancer(x) | Cancer(x)))", "(exists x.(BreastCancer(x) & (BreastCancer(x) | NonBreastCancer(x)))", "exists x.(BreastCancer(x) | NonBreastCancer(x))", "exists x y.(BreastCancer(x) & BreastCancer(y) & -BreastCancer(x))", "exists x.(BreakCancel(x) | -BreastCancel(x))", "all x.((BreastCancer(x) | NonBreastCancer(x)) -> (BreastCancer(x) | NonBreastCancer(x)))", "exists x.(BreastCancer(x) | -BreastCancer(x))"]}
{"id": "folio_train_1337", "nl": "No type of cancer is without a tumor.", "fol": "all x.(IsTypeOfCancer(x) -> -HasNoTumor(x))", "prediction": ["-exists x.(Cancer(x) & -HasTumor(x))", "all x.(Cancer(x) -> -HasTumor(x))", "-exists x.(Cancer(x) & -exists y.(Tumor(y) & -exists z.(Tumor(z) & -exists w.(Tumor(w) & -exists w.(Tumor(w) & -exists w.(Tumor(w) & -exists w.(Tumor(w) & -(Tumor(w) & Tumor(w) & Tumor(w)))))", "-exists x.(Cancer(x) & -HasTumor(x))", "all x.(Cancer(x) -> -HasTumor(x))", "all x.(Cancerous(x) -> -HasTumor(x))", "all x.(Cancer(x) -> -exists y.(Tumor(y) & -Has(x,y))))", "-exists x.(Cancer(x) & -HasTumor(x))", "-exists x.(Cancerous(x) & -HasTumor(x))", "all x.(Cancer(x) -> -HasTumor(x))", "all x.(Cancerous(x) -> -HasTumor(x))", "-exists x.(Cancer(x) & -HasTumor(x))", "-exists x.(Cancerous(x) & -HasTumor(x))", "all x.(Cancer(x) -> -exists y.(Tumor(y) & -Has(x,y))))", "all x.(Cancer(x) -> -HasTumor(x))", "-exists x.(Cancer(x) & -HasTumor(x))"]}
{"id": "folio_train_1338", "nl": "All non-breast cancers are a type of cancer.", "fol": "all x.(HasNonBreastCancer(x) -> IsTypeOfCancer(x))", "prediction": ["all x.((Cancer(x) & -Breast(x)) -> Cancer(x))", "all x.(NonBreastCancer(x) -> Cancer(x))", "all x.((NonBreastCancer(x) & Cancer(x)) -> Cancer(x))", "all x.((Cancer(x) & -Breast(x)) -> Cancer(x))", "all x y.((NonBreastCancer(x) & Cancer(y)) -> Cancer(x,y))", "all x.(NonBreastCancer(x) -> Cancer(x))", "all x.((NonBreastCancer(x) & Cancer(x)) -> TypeOfCancer(x))", "all x.((Cancerous(x) & -Breast(x)) -> Cancer(x))", "(all x.(NonBreastCancer(x) -> Cancer(x)))", "all x.((Cancer(x) & -Breast(x)) -> Cancer(x))", "all x y.((Cancer(x) & NonBreast(y)) -> Cancer(x,y))", "all x.(Cancer(x) -> NonBreast(x))", "all x.(NonBreastCancer(x) -> Cancer(x))", "(all x.(NonBreastCancer(x) -> Cancer(x))", "all x.(NonBreastCancer(x) -> Cancer(x))", "all x.(NonBreastCancer(x) -> CancerType(x))"]}
{"id": "folio_train_1339", "nl": "If adenocarcinoma is a type of cancer or without a tumor, then adenocarcinoma is in women or without a tumor.", "fol": "(((IsTypeOfCancer(Adenocarcinoma) | HasNoTumor(Adenocarcinoma)) -> IsWoman(Adenocarcinoma)) | HasNoTumor(Adenocarcinoma))", "prediction": ["all x.((Adenocarcinoma(x) & (TypeOfCancer(x) | WithoutTumor(x))) -> (InWomen(x) | WithoutTumor(x)))", "all x.((Adenocarcinoma(x) & (TypeOfCancer(x) | -Tumor(x))) -> (InWomen(x) | -Tumor(x)))", "all x.((Adenocarcinoma(x) & (Cancer(x) | -Tumor(x))) -> (InWomen(x) | -Tumor(x)))", "all x y.((Adenocarcinoma(x) & (TypeOfCancer(x) | WithoutTumor(x))) -> (InWomen(x) | WithoutTumor(x)))", "(all x.((Adenocarcinoma(x) & (TypeOfCancer(x) | -Tumor(x))) -> (InWomen(x) | -Tumor(x))))", "all x y.((Adenocarcinoma(x) & Cancer(y) & (InWomen(x,y) | WithoutTumor(x,y))) -> Adenocarcinoma(x))", "all x.(Adenocarcinoma(x) -> ((Cancerous(x) | -Tumor(x))))", "all x.((Adenocarcinoma(x) & (TypeOfCancer(x) | WithoutTumor(x))) -> (InWomen(x) | WithoutTumor(x)))", "all x.((Adenocarcinoma(x) & (Cancer(x) | -Tumor(x))) -> (InWomen(x) | -Tumor(x)))", "all x y.((Adenocarcinoma(x) & Cancer(y) & (TypeOfCancer(x,y) | WithoutTumor(x,y))) -> (InWomen(x,y) | WithoutTumor(x,y)))", "all x.((Adenocarcinoma(x) & (Cancer(x) | WithoutTumor(x))) -> (InWomen(x) | WithoutTumor(x)))", "all x.(Adenocarcinoma(x) -> ((Cancerous(x) | -Tumor(x)) & InWomen(x)) | -Tumor(x)))", "all x y.((Adenocarcinoma(x) & (Cancer(y) | -Tumor(y))) -> (InWomen(x) | -Tumor(x)))", "all x.((Adenocarcinoma(x) & (TypeOfCancer(x) | -Tumor(x))) -> (InWomen(x) | -Tumor(x)))", "all x.((Adenocarcinoma(x) & Cancer(x)) | (-Tumor(x) & InWomen(x))))", "all x.((Denocarcinoma(x) & (TypeOfCancerous(x) | WithoutTumor(x))) -> (InWomen(x) | WithoutTumor(x)))"]}
{"id": "folio_train_1340", "nl": "Adenocarcinoma is a breast cancer.", "fol": "HasBreastCancer(Adenocarcinoma)", "prediction": ["all x.(Adenocarcinoma(x) -> BreastCancer(x))", "Adenocarcinoma (BreastCancer)", "all x y.((Adenocarcinoma(x) & BreastCancer(y)) -> BreastCancer(x,y))", "all x.(Adenocarcinoma(x) -> BreastCancer(x))", "(BreakCancerous(adenocarcinoma) & BreastCancer(adenocarcinoma))", "all x.(Adenocarcinoma(x) -> BreastCancer(x))", "(BreakCancerous(adenocarcinoma) & BreastCancerous(adenocarcinoma))", "all x y.((Adenocarcinoma(x) & BreastCancer(y)) -> BreastCancer(x))", "all x.(Adenocarcinoma(x) -> BreastCancer(x))", "all x y.((Adenocarcinoma(x) & BreastCancer(y)) -> BreastCancer(x,y))", "all x.(Adenocarcinoma(x) -> BreastCancerous(x))", "all x.(Adenocarcinoma(x) -> BreastCancer(x))", "all x.(Adenocarcinoma(x) -> BreastCancerous(x))", "all x.(Adenocarcinoma(x) -> BreastCancer(x))", "All x.(Adenocarcinoma(x) -> BreastCancer(x))", "all x.(Adenocarcinoma(x) -> BreastCancer(x))"]}
{"id": "folio_train_1341", "nl": "Adenocarcinoma is in women.", "fol": "IsWoman(Adenocarcinoma)", "prediction": ["all x.(Adenocarcinoma(x) -> InWomen(x))", "all x y.((Adenocarcinoma(x) & Woman(y)) -> In(x,y))", "(InWomen(adenocarcinoma) -> In(adenocarcinoma))", "all x.(Adenocarcinoma(x) -> InWomen(x))", "Adenocarcinoma exists in women.", "all x.(Adenocarcinoma(x) -> InWomen(x))", "all x y.((Adenocarcinoma(x) & Women(y)) -> In(x,y))", "all x.(Adenocarcinoma(x) -> InWomen(x))", "all x y.((Adenocarcinoma(x) & Woman(y)) -> In(x,y))", "all x y.((Adenocarcinoma(x) & Woman(y) & In(x,y)) -> In(x,y))", "all x.(Adenocarcinoma(x) -> InWomen(x))", "all x.(Adenocarcinoma(x) -> InFemales(x))", "all x y.((Adenocarcinoma(x) & Women(y)) -> In(x,y))", "All x.(Adenocarcinoma(x) -> InWomen(x))", "exists x.(Adenocarcinoma(x) & Women(x))", "All x.(Adenocarcinoma(x) -> InWomen(x))"]}
{"id": "folio_train_1342", "nl": "If adenocarcinoma is in women or without a tumor, then adenocarcinoma is without a tumor and a non-breast cancer.", "fol": "((IsWoman(Adenocarcinoma) | HasNoTumor(Adenocarcinoma)) -> (HasNoTumor(Adenocarcinoma) & HasNonBreastCancer(Adenocarcinoma)))", "prediction": ["all x.((Adenocarcinoma(x) & (InWomen(x) | WithoutTumor(x))) -> (-Tumor(x) & NonBreastCancer(x)))", "all x.((Adenocarcinoma(x) & (InWomen(x) | WithoutTumor(x))) -> (-Tumor(x) & -BreastCancer(x)))", "all x y.((Adenocarcinoma(x) & (InWomen(x) | WithoutTumor(x))) -> (-Tumor(x) & NonBreastCancer(y)))", "all x.((Adenocarcinoma(x) & (InWomen(x) | -Tumor(x))) -> (-Tumor(x) & -BreastCancer(x)))", "all x y.((Adenocarcinoma(x) & Women(y) & -Tumor(z) & In(x,y)) -> (-Tumor(x) & NonBreastCancer(x)))", "all x.((Adenocarcinoma(x) & (InWomen(x) | WithoutTumor(x))) -> (-Tumor(x) & NonBreastCancer(x)))", "all x y.((Adenocarcinoma(x) & (InWomen(x) | WithoutTumor(x))) -> (-Tumor(y) & NonBreastCancer(x)))", "(all x.((Adenocarcinoma(x) & InWomen(x)) | NoTumor(x))) -> (-Adenocarcinoma(x) & NonBreastCancer(x)))", "all x.((Adenocarcinoma(x) & InWomen(x) | WithoutTumor(x)) -> (-Tumor(x) & NonBreastCancer(x)))", "all x.(Adenocarcinoma(x) -> ((InWomen(x) | WithoutTumor(x)) & -BreastCancer(x))))", "all x.((Adenocarcinoma(x) & InWomen(x) & -Tumor(x)) -> (-Tumor(x) & -BreastCancer(x)))", "(all x.((Adenocarcinoma(x) & (InWomen(x) | WithoutTumor(x))) -> (-Adenocarcinoma(x) & NonBreastCancer(x))))", "all x.(Adenocarcinoma(x) -> (((InWomen(x) | WithoutTumor(x)) | NonBreastCancer(x))))", "all x.((Adenocarcinoma(x) & (InWomen(x) | WithoutTumor(x))) -> (-HasTumor(x) & -NonBreastCancer(x)))", "all x y.((Adenocarcinoma(x) & (InWomen(x) | WithoutTumor(x))) -> (-Tumor(x) & -BreastCancer(y)))", "all x.((Adenocarcinoma(x) & (InWomen(x) | -Tumor(x))) -> (-Tumor(x) & NonBreastCancer(x)))"]}
{"id": "folio_train_1343", "nl": "Some monitors equipped in the lab are produced by the company named AOC. ", "fol": "exists x.(EquippedInLab(x) & ProducedByAOC(x))", "prediction": ["exists x.(Monitor(x) & EquippedInLab(x) & ProducedBy(x,AOC))", "exists x y.(Monitor(x) & EquippedInLab(x) & Company(y) & ProducedBy(x,y))", "all x y.((Monitor(x) & EquippedInLab(x)) -> ProducedBy(x,y))", "exists x.(Monitor(x) & EquippedInLab(x) & ProducedByAOC(x))", "all x y.((Monitor(x) & EquippedInLab(x,y)) -> ProducedBy(x,y))", "all x y z.((Monitor(x) & Lab(y) & Company(z) & EquippedIn(x,y)) -> ProducedBy(x,z))", "exists x.(Monitor(x) & EquippedInLab(x) & ProducedBy(x,AOC))", "all x y.((Monitor(x) & Lab(y)) -> EquippedIn(x,y))", "all x y z.((Monitor(x) & Lab(y) & Company(z) & EquippedIn(x,y)) -> ProducedBy(x,z))", "exists x.(Monitor(x) & EquippedInLab(x) & ProducedByAOC(x))", "all x y.((Monitor(x) & EquippedInLab(x)) -> ProducedBy(x,y))", "exists x.(Monitor(x) & EquippedInLab(x) & ProducedBy(x,AOC))", "exists x.(Monitor(x) & EquippedInLab(x))", "exists x.(Monitor(x) & EquippedInLab(x) & ProducedByAOC(x))", "exists x.(Monitor(x) & EquippedInLab(x) & ProducedBy(x,AOC))", "exists x.(Monitor(x) & EquipedInLab(x) & AOC(x))"]}
{"id": "folio_train_1344", "nl": "All monitors equipped in the lab are cheaper than their original prices. ", "fol": "all x.(EquippedInLab(x) -> IsCheaperThanOriginalPrice(x))", "prediction": ["all x.((Monitor(x) & EquippedInLab(x)) -> CheaperThanOriginalPrice(x))", "all x y.((Monitor(x) & EquippedInLab(x)) -> CheaperThanOriginalPrice(y))", "all x.((Monitor(x) & EquippedInLab(x)) -> CheaperThanOriginalPrices(x))", "all x y.((Monitor(x) & EquippedInLab(x)) -> CheaperThanOriginalPrices(x,y))", "all x.((Monitor(x) & EquippedInLab(x)) -> BoughtByOriginalPrices(x))", "all x y.((Monitor(x) & EquippedInLab(x,y)) -> CheaperThanOriginalPrice(x,y))", "(all x.(Microscope(x) & EquippedInLab(x)) -> CheaperThanOriginalPrices(x))", "all x y.((Monitor(x) & Lab(y) & EquippedIn(x,y)) -> CheaperThanOriginalPrice(x,y))", "all x.((Monitor(x) & EquippedInLab(x)) -> LowerThanOriginalPrice(x))", "(all x.(Laborator(x) -> CheaperThanOriginalPrice(x)))", "all x.(Monitor(x) -> (EquipmentInLab(x,y) & LowerPrice(y)))", "all x y.((Monitor(x) & EquippedInLab(x)) -> LowerThanOriginalPrice(y))", "all x.((Monitor(x) & EquippedInLab(x)) -> CheaperThanOriginalPrices(x))", "all x.((Monitor(x) & EquippedInLab(x)) -> BoughtByOriginalPrices(x))", "all x.((Monitor(x) & EquippedInLab(x)) -> LowerThanOriginalPrices(x))", "all x.((Monitor(x) & EquippedInLab(x)) -> CheaperThanOriginalPrices(x))"]}
{"id": "folio_train_1345", "nl": "If the monitor is cheaper than its original prices, then its resolution is 1080p. ", "fol": "all x.(IsCheaperThanOriginalPrice(x) -> HasResolution1080p(x))", "prediction": ["all x.((Monitor(x) & CheaperThanOriginalPrices(x)) -> Resolution(x,1080p))", "all x.((Monitor(x) & LowerThanOriginalPrices(x)) -> Resolution(x,1080))", "(BudgetlessThanOriginalPrices(monitor) -> Resolution1080p))", "all x y.((Monitor(x) & OriginalPrices(y) & Cheaper(x,y)) -> Resolution(x,1080p))", "all x.((Monitor(x) & CheaperThanOriginalPrices(x)) -> Resolution(x,1080p))", "(BudgetlessThanOriginalPrices(monitor) -> Resolution1080p))", "all x y.((Monitor(x) & OriginalPrice(y) & CheaperThan(x,y)) -> Resolution(x,1080p))", "all x.((Monitor(x) & LowerThanOriginalPrices(x)) -> Resolution(x,1080))", "all x.(Budget(x) -> Resolution(x,1080))", "all x y.((Monitor(x) & OriginalPrices(y) & LowerThan(x,y)) -> Resolution(x,1080p))", "all x.((Monitor(x) & CheaperThanOriginalPrices(x)) -> Resolution1080p(x))", "all x.((Monitor(x) & BoughtByOriginalPrices(x)) -> Resolution1080p(x))", "all x.((Monitor(x) & LowerThanOriginalPrices(x)) -> Resolution(x,1080p))", "all x.(Budget(x) -> Resolution(x,1080p))", "all x.((Monitor(x) & CheaperThanOriginalPrices(x)) -> Resolution(x,1080p))", "All x.((Monitor(x) & LowerPrices(x)) -> Resolution1080p(x))"]}
{"id": "folio_train_1346", "nl": "If a monitor is with a resolution of 1080p, then it does not support the type-c port. ", "fol": "all x.(HasResolution1080p(x) -> -SupportsTypeCPort(x))", "prediction": ["all x.((Monitor(x) & Resolution(x,10)) -> -SupportsTypeCPort(x))", "all x.((Monitor(x) & Resolution(x,10)) -> -SupportsTypeCPort(x))", "all x y.((Monitor(x) & Resolution(x,y) & 1080p(y)) -> -SupportsTypeCPort(x))", "all x.((Monitor(x) & Resolution(x,1080)) -> -SupportsTypeCPort(x))", "(all x.((Monitor(x) & Resolution(x,10) & 1080p)) -> -SupportsTypeCPort(x))", "(all x.((Monitor(x) & Resolution(x,10)) -> -SupportsTypeCPort(x)))", "all x y.((Monitor(x) & Resolution(x,y) & 1080p(y)) -> -SupportsTypeCPort(x))", "all x.((Monitor(x) & Resolution1080p(x)) -> -SupportsTypeCPort(x))", "all x.((Monitor(x) & Resolution(x,10)) -> -SupportsTypeCPort(x))", "all x.((Monitor(x) & Resolution(x,1008)) -> -SupportsTypeCPort(x))", "all x.((Monitor(x) & ResolutionOf1080p(x)) -> -SupportsTypeCPort(x))", "all x y.((Monitor(x) & Resolution(x,y,10)) -> -SupportsTypeCPort(x))", "all x.((Monitor(x) & Resolution1080p(x)) -> -SupportsTypeCPort(x))", "all x.((Monitor(x) & ResolutionThan(x,10)) -> -SupportsTypeCPort(x))", "all x.((Monitor(x) & Resolution(x,1080)) -> -SupportsTypeCPort(x))", "all x.((Monitor(x) & Resolution1080p(x)) -> -SupportsTypeCPort(x))"]}
{"id": "folio_train_1347", "nl": "LG34 is equipped in the lab.  ", "fol": "EquippedInLab(Lg34)", "prediction": ["all x.(LG34(x) -> EquippedInLab(x))", "all x.(LG34(x) -> EquippedInLab(x))", "-Equipment(LG34)", "(EquipmentInLab(LG34))", "all x y.((LG34(x) & Lab(y)) -> EquippedIn(x,y))", "all x.(LG34(x) -> EquippedInLab(x))", "All x y.((LG34(x) & Lab(y) & EquippedIn(x,y)) -> EquippedIn(x,y))", "(EquipmentInLab(LG34))", "all x.(LG34(x) -> EquippedInLab(x))", "all x y.((LG34(x) & Lab(y)) -> EquippedIn(x,y))", "ALL X.( LG34 -> EquippedInLab(x))", "(EquipmentInLab(LG34))", "(EquipmentInLab(LG34,LG34))", "all x.(LG34(x) -> EquippedInLab(x))", "all x.(LG34(x) -> EquippedInLab(x))", "all x.(LG34(x) -> EquippedInLab(x))"]}
{"id": "folio_train_1348", "nl": "LG34 machine is produced by AOC.", "fol": "ProducedByAOC(Lg34)", "prediction": ["all x.(LG34Machine(x) -> ProducedByAOC(x))", "all x.(LG34(x) -> ProducedByAOC(x))", "all x y.((LG34Machine(x) & AOC(y)) -> ProducedBy(x,y))", "(ProducedByAOC(LG34) & LG34Machine(LG34))", "the LG34 machine is produced by AOC.", "all x y.((Laptop(x) & AOC(y)) -> ProducedBy(x,y))", "all x.(LG34Machine(x) -> ProducedByAOC(x))", "(ProducedByAOC(LG34)", "all x.(LG34(x) -> ProducedByAOC(x))", "AOC Produces(LG34)", "All x.(Lg34Machine(x) -> ProducedByAOC(x))", "all x y.((LG34Machine(x) & AOC(y)) -> ProducedBy(x,y))", "all x.(LG34Machine(x) -> ProducedByAOC(x))", "(ProducedByAOC(LG34)", "All x.(LG34Machine(x) -> ProducedByAOC(x))", "All x.(LG34Machine(x) -> ProducedByAOC(x))"]}
{"id": "folio_train_1349", "nl": "LG34 machine does not support the type-c port.", "fol": "-SupportsTypeCPort(Lg34)", "prediction": ["all x.(LG34(x) -> -SupportsTypeCPort(x))", "(-SupportsTypeCPort(LG34))", "all x.((Machine(x) & LG34(x)) -> -SupportsTypeCPort(x))", "(Lg34Machine(LG34) & -SupportsTypeCPort(LG34))", "-(LG34Machine(LG34) & TypeCPort(LG34))", "all x.(LG34Machine(x) -> -SupportsTypeCPort(x))", "the type-c port.", "all x.(LG34(x) -> -SupportsTypeCPort(x))", "(-SupportsTypeCPort(LG34))", "(Lg34Machine(LG34) & -SupportsTypeCPort(LG34))", "-(LG34Machine(LG34) & TypeCPort(LG34))", "(-SupportsTypeCPort(LG34Machine))", "all x.((Laptop(x) & LG34(x)) -> -SupportsTypeCPort(x))", "the type-c port.", "all x.(LG34Machine(x) -> -SupportsTypeCPort(x))", "-SupportsTypeCPort(LG34)"]}
{"id": "folio_train_1350", "nl": "LG34 is not with a resolution of 1080p.", "fol": "-HasResolution1080p(Lg34)", "prediction": ["all x.(LG34(x) -> -Resolution(x,1080))", "all x.(LG34(x) -> -Resolution(x,1080))", "-(Resolution(LG34) & 1080p(LG34))", "(-ResolutionOf1080p(LG34))", "(-Resolution(LG34) & 1080p(LG34))", "(Lg34) -Resolution(LG34,1080p))", "-(LG34(LG) & Resolution(LG))", "(Lg34 & -Resolution(LG34,1080p))", "all x.(LG34(x) -> -Resolution(x,1008))", "all x.(LG34(x) -> -(Resolution(x,10) & 1080p(x)))", "(-Resolution1080p))", "all x.(LG34(x) -> -Resolution(x,10))", "all x.(LG34(x) -> -Resolution(x,1080))", "exists x.(LG34(x) & -(Resolution(x,10) & 1080p)))", "all x.( LG34(x) -> -HasResolution(x,1080))", "all x.(LG34(x) -> -Resolution(x,1008))"]}
{"id": "folio_train_1351", "nl": "All fruits sold in Boston are shipped from Columbia. ", "fol": "all x.(FruitsSoldInBoston(x) -> FruitsShippedFromColumbia(x))", "prediction": ["all x.((Fruit(x) & SoldInBoston(x)) -> ShippedFromColumbia(x))", "all x y.((Fruit(x) & Sale(y) & Boston(y)) -> ShippedFromColumbia(x,y))", "(all x.(BostonFruit(x) -> ShippedFromColumbia(x)))", "all x.((Fruit(x) & SoldInBoston(x)) -> ShippedFromColumbia(x))", "all x y.((Fruit(x) & SaleInBoston(x,y)) -> ShippedFromColumbia(x))", "all x y.((Fruit(x) & SoldInBoston(x) & Columbia(y)) -> ShippedFrom(x,y))", "all x.(Fruit(x) & SoldInBoston(x) -> ShippedFromColumbia(x))", "(all x.(BostonFruit(x) -> ShippedFromColumbia(x))", "all x.((Fruit(x) & SoldInBoston(x)) -> ShippedFromColumbia(x))", "all x.(Fruit(x) -> ShippedFromColumbia(x))", "all x y.((Fruit(x) & SoldInBoston(x,y)) -> ShippedFromColumbia(x))", "all x y.((Fruit(x) & SaleInBoston(x,y)) -> ShippedFromColumbia(x))", "all x.((Fruit(x) & SoldInBoston(x)) -> ShippedFromColumbia(x))", "all x.((Fruit(x) & SoldIn(x,Boston)) -> ShippedFromColumbia(x))", "all x.((Fruit(x) & SoldInBoston(x)) -> ShippedFromColumbia(x))", "All x.(Fruit(x) -> ShippedFromColumbia(x))"]}
{"id": "folio_train_1352", "nl": "Some fruits sold in New Haven are shipped from Mexico.", "fol": "exists x.(FruitsSoldInNewHaven(x) & FruitsShippedFromMexico(x))", "prediction": ["exists x.(Fruit(x) & SoldInNewHaven(x) & ShippedFromMexico(x))", "exists x y.(Fruit(x) & SoldInNewHaven(x,y) & ShippedFrom(x,y))", "exists x.(Fruit(x) & SoldInNewHunt(x) & ShippedFromMexico(x))", "exists x.(Fruit(x) & SoldInNew Haven(x) & ShippedFromMexico(x))", "exists x y.(Fruit(x) & NewHaven(y) & SoldIn(x,y))", "exists x.(Fruit(x) & SoldInNewHannon(x) & ShippedFromMexico(x))", "all x y.((Fruit(x) & SoldInNewHunt(x,y)) -> ShippedFrom(x,y))", "exists x y.(Fruit(x) & SoldInNewHunt(x,y) & ShippedFrom(x,y))", "all x y.((Fruit(x) & NewHunt(y)) -> ShippedFromMexico(x,y))", "exists x.(Fruit(x) & SoldInNew Haven(x) & ShippedFromMexico(x))", "(exists x.(Fruit(x) & SoldInNew Haven(x)) & ShippedFromMexico(x))", "exists x.(Fruit(x) & SoldInNewHaven(x) & ShippedFromMexico(x))", "exists x.(Fruit(x) & SoldIn(x,NewHaven) & ShippedFrom(x,Mexico))", "exists x.(Fruit(x) & SoldInNew Haven(x) & ShippedFromMexico(x))", "exists x.(Fruit(x) & SoldIn(x,New Haven) & ShippedFrom(x,Mexico))", "exists x.(Fruit(x) & SoldInNew Haven(x) & ShippedFromMexico(x))"]}
{"id": "folio_train_1353", "nl": "No fruits shipped from Columbia are fruits sold in New York. ", "fol": "all x.(FruitsShippedFromColumbia(x) -> -FruitsSoldInNewYork(x))", "prediction": ["all x.((Fruit(x) & ShippedFromColumbia(x)) -> -FruitSoldInNewYork(x))", "-exists x.(Fruit(x) & ShippedFromColumbia(x) & -SoldInNewYork(x))", "all x.((Fruit(x) & ShippedFromColumbia(x)) -> -SoldInNewYork(x))", "-exists x.(Fruit(x) & ShippedFromColumbia(x) & NewYork(y))", "(-all x.(Fruit(x) & ShippedFromColumbia(x)) -> FruitSoldInNewYork(x))", "(exists x.(Fruit(x) & ShippedFromColumbia(x)) & -exists y.(Fruit(y) & SoldInNewYork(y))))", "all x.((Fruit(x) & ShippedFromColumbia(x)) -> -FruitSoldInNewYork(x))", "all x.(Fruit(x) -> -ShippedFromColumbiaFruit(x) & SoldInNewYork(x))", "-exists x.(Fruit(x) & ShippedFromColumbia(x) & -SoldInNewYork(x))", "all x y.((Fruit(x) & ShippedFromColumbia(x,y)) -> -FruitSoldInNewYork(x))", "all x.((Fruit(x) & ShippedFromColumbia(x)) -> FruitSoldInNewYork(x))", "-exists x.(Fruit(x) & ShippedFromColumbia(x) & NewYork(x))", "-exists x.(Fruit(x) & ShippedFromColumbus(x) & NewYork(y) & FruitSoldIn(x,y))", "all x.((Fruit(x) & ShippedFromColumbia(x)) -> -FruitSoldInNewYork(x))", "-exists x.(Fruit(x) & ShippedFromColumbia(x) & -SoldInNewYork(x))", "-exists x.(Fruit(x) & ShippedFromColumbia(x))"]}
{"id": "folio_train_1354", "nl": "Avocadoe are a kind of fruit sold in New York or Boston. ", "fol": "(FruitsSoldInNewYork(Avocado) | FruitsSoldInBoston(Avocado))", "prediction": ["all x.(Avocado(x) -> (Fruit(x) & (SoldInNewYork(x) | SoldInBoston(x))))", "all x y.((Avocado(x) & (NewYork(y) | Boston(y))) -> Fruit(x,y))", "all x.(Avocado(x) -> (Fruit(x) & (SoldInNewYork(x) | SoldInBoston(x))))", "all x.(Apple(x) -> (Fruit(x) & (SoldInNewYork(x) | SoldInBoston(x))))", "all x.(Avoda(x) -> (Fruit(x) & (SoldInNewYork(x) | SoldInBoston(x))))", "all x.(Avocado(x) -> (Fruit(x) & (SoldInNewYork(x) | SoldInBoston(x))))", "(Fruit(avocado) & (SoldInNewYork(a) | SoldInBoston(a)))", "all x y.((Avocado(x) & (NewYork(y) | Boston(y))) -> Fruit(x,y))", "all x.(Avocado(x) -> (Fruit(x) & (SoldInNewYork(x) | SoldInBoston(x))))", "exists x.(Avoda(x) & (SoldInNewYork(x) | SoldInBoston(x)))", "all x.(Avocado(x) -> (SoldInNewYork(x) | SoldInBoston(x)))", "all x y.((Avocado(x) & Fruit(y) & (SoldInNewYork(x,y) | SoldInBoston(x,y))) -> Fruit(x,y))", "all x.(Avocado(x) -> (Fruit(x) & (SoldInNewYork(x) | SoldInBoston(x))))", "exists x.(Apple(x) & (SoldInNewYork(x) | SoldInBoston(x)))", "all x.(Avocado(x) -> (Fruit(x) & (SoldInNewYork(x) | SoldInBoston(x))))", "all x y.((Avocado(x) & (NewYork(y) | Boston(y))) -> Fruit(x))"]}
{"id": "folio_train_1355", "nl": "Avocadoe are either shipped from Columbia and sold in New Haven, or neither shipped from Columbia nor sold in New Haven. ", "fol": "-((FruitsShippedFromColumbia(Avocado) & -FruitsSoldInNewHaven(Avocado)) | (-FruitsShippedFromColumbia(Avocado) & FruitsSoldInNewHaven(Avocado)))", "prediction": ["all x.(Avocado(x) -> (ShippedFromColumbia(x) & SoldInNew Haven(x)) | -ShippedFromColumbia(x) & SoldInNew Haven(x)))", "all x.(Avocado(x) -> ((ShippedFromColumbia(x) & SoldInNew Haven(x)) | -ShippedFromColumbia(x) & SoldInNew Haven(x)))", "all x y.((Avocado(x) & Columbia(y) & New Haven(y)) -> (ShippedFrom(x,y) & SoldIn(x,y)) | (-ShippedFrom(x,y) & SoldIn(x,y))))", "all x y.((Avocado(x) & Columbia(y)) -> (ShippedFrom(x,y) & SoldInNew Haven(x)) | (-ShippedFrom(x,y) & SoldInNew Haven(x))))", "(all x.(Avocado(x) -> (ShippedFromColumbia(x) & SoldInNewHanover(x))) | (-ShippedFromColumbia(x) & SoldInNewHanover(x))))", "(all x.(Avocado(x) -> (ShippingFromColumbia(x) | SellingInNew Haven(x))) & ((Avocado(x) & -ShippingFromColumbia(x) & SellingInNew Haven(x)) | (Avocado(x) & -ShippedFromColumbia(x) & -SoldInNew Haven(x)))))", "all x.(Avocado(x) -> (ShippedFromColumbia(x) & SoldInNew Haven(x)) | (-ShippedFromColumbia(x) & SoldInNew Haven(x))))", "all x.(Avocata(x) -> (ShippedFromColumbia(x) & SoldInNew Haven(x) | -ShippedFromColumbia(x) & SoldInNew Haven(x)))", "(all x.(Avocado(x) -> (ShippedFromColumbia(x) & SoldInNew Haven(x))) | (-ShippedFromColumbia(x) & SoldInNew Haven(x))))", "(all x.(Avocado(x) -> (ShippedFromColumbia(x) & SoldInNewHanover(x))) | (-ShippedFromColumbia(x) & SoldInNewHanover(x))))", "all x.(Avocado(x) -> ((ShippedFromColumbia(x) & SoldInNew Haven(x)) | (-ShippedFromColumbia(x) & SoldInNew Haven(x))))", "all x y.((Avocado(x) & Columbia(y) & New Haven(z)) -> (ShippedFrom(x,y) & SoldIn(x,z)) | (-ShippedFrom(x,y) & SoldIn(x,z))))", "all x.(Avocado(x) -> (ShippedFromColumbia(x) & SoldInNew Haven(x) | -ShippedFromColumbia(x) & SoldInNew Haven(x)))", "(all x.(Avocado(x) -> (ShippedFromColumbia(x) & SoldInNew Haven(x)) | (-ShippedFromColumbia(x) & SoldInNew Haven(x)) | (-ShippedFromColumbia(x) & SoldInNew Haven(x)))))", "all x.(Avocado(x) -> ((ShippedFromColumbia(x) & SoldInNew Haven(x)) | (-ShippedFromColumbia(x) & SoldInNew Haven(x))))", "exists x.(Avocado(x) & ((ShippedFromColumbia(x) & SoldInNew Haven(x)) | -ShippedFromColumbia(x) & SoldInNew Haven(x)) | -SoldInNew Haven(x)))"]}
{"id": "folio_train_1356", "nl": "Avocados are a kind of fruit sold in New York.", "fol": "FruitsSoldInNewYork(Avocado)", "prediction": ["all x.(Avocado(x) -> (Fruit(x) & SoldInNewYork(x)))", "all x y.((Avocado(x) & NewYork(y)) -> (Fruit(x,y) & SoldIn(x,y)))", "all x.(Avocado(x) -> (Fruit(x) & SoldInNewYork(x)))", "all x y z.((Avocado(x) & NewYork(y) & Fruit(z)) -> SoldIn(x,y,z))", "all x.(Avocat(x) -> (Fruit(x) & SoldInNewYork(x)))", "all x.(Avocado(x) -> (SoldInNewYork(x) & Fruit(x)))", "all x y.((Avocado(x) & NewYork(y)) -> FruitSoldIn(x,y))", "all x.(Avocado(x) -> (Fruit(x) & SoldInNewYork(x)))", "all x.(Avocado(x) -> (Fruit(x) & SoldInNewYork(x)))", "all x.(Avoda(x) -> (Fruit(x) & SoldInNewYork(x)))", "all x y.((Avocado(x) & NewYork(y)) -> SoldIn(x,y))", "all x y.((Avocado(x) & NewYork(y)) -> (Fruit(x,y) & SoldIn(x,y)))", "exists x.(Apple(x) & Fruit(x) & SoldInNewYork(x))", "all x.(Avocat(x) -> (Fruit(x) & SoldInNewYork(x)))", "all x.(Avocado(x) -> (Fruit(x) & SoldInNewYork(x)))", "All x y.((Avocado(x) & NewYork(y)) -> SoldIn(x,y))"]}
{"id": "folio_train_1357", "nl": "Avocados are either sold in New York or sold in New Haven.", "fol": "(FruitsSoldInNewYork(Avocado) | FruitsSoldInNewHaven(Avocado))", "prediction": ["all x.(Avocado(x) -> (SoldInNewYork(x) | SoldInNewHanover(x)))", "all x y.((Avocado(x) & NewYork(y) & NewHandon(y)) -> (SoldIn(x,y) | SoldIn(x,y)))", "all x.(Avocado(x) -> (SoldInNewYork(x) | SoldInNewHunt(x)))", "(SoldInNewYork(Avocado) | SoldInNewHanover(Avocado))", "all x y.((Avocado(x) & NewYork(y)) -> (SoldIn(x,y) | SoldIn(x,y)))", "all x.(Avocat(x) -> (SoldInNewYork(x) | SoldInNewHanover(x)))", "all x.(Avocado(x) -> (SoldInNewYork(x) | SoldInNewHanover(x)))", "exists x.(Apple(x) & (SoldInNewYork(x) | SoldInNewHunt(x)))", "(SoldInNewYork(Avocado) | SoldInNewHanover(Avocado))", "all x y.((Avocado(x) & NewYork(y) & NewHaven(y)) -> (SoldIn(x,y) | SoldIn(x,y)))", "all x.(Avocado(x) -> (SoldIn(x,NewYork) | SoldIn(x,NewHanover)))", "all x.(Avocado(x) -> (SoldInNewYork(x) | SoldInNewHaven(x)))", "exists x.(Avoda(x) & (SoldInNewYork(x) | SoldInNewHanover(x)))", "all x.(Avocado(x) -> (SoldInNewYork(x) | SoldInNewHunt(x)))", "all x.(Avocado(x) -> (SoldIn(x,NewYork) | SoldIn(x,NewHaven)))", "all x.(Avocado(x) -> (SoldInNewYork(x) | SoldInNewHandon(x)))"]}
{"id": "folio_train_1358", "nl": "Avocados are either sold in New Haven or sold in Boston", "fol": "(FruitsSoldInNewHaven(Avocado) | FruitsSoldInBoston(Avocado))", "prediction": ["all x.(Avocado(x) -> (SoldInNew Haven(x) | SoldInBoston(x)))", "(SoldInNew Haven) | SoldInBoston(Avocado))", "all x y.((Avocado(x) & NewHaven(y)) | Boston(y))", "all x.(Avocado(x) -> (SoldInNew Haven(x) | SoldInBoston(x)))", "(all x.(Avocado(x) -> (SoldInNew Haven(x) | SoldInBoston(x))))", "all x y z.((Avocado(x) & NewHaven(y) & Boston(z)) -> (SoldIn(x,y) | SoldIn(x,z)))", "all x.(Avocat(x) -> (SoldInNew Haven(x) | SoldInBoston(x)))", "all x y.((Avocado(x) & (SoldInNew Haven(x) | SoldInBoston(y))) -> (SoldInNew Haven(x) | SoldInBoston(y)))", "(SoldInNew Haven) | SoldInBoston(Avocado))", "all x.(Avocado(x) -> (SoldInNewHanaway(x) | SoldInBoston(x)))", "all x.(Avocado(x) -> (SoldInNew Haven(x) | SoldInBoston(x)))", "all x.(Avocata(x) -> (SoldInNew Haven(x) | SoldInBoston(x)))", "all x y.((Avocado(x) & NewHanover(y)) | Boston(y))", "All x.(Avoda(x) -> (SoldInNew Haven(x) | SoldInBoston(x)))", "all x.(Avocado(x) -> (SoldInNew Haven(x) | SoldInBoston(x)))", "all x.(Avocado(x) -> (SoldInNewHanaway(x) | SoldInBoston(x)))"]}
{"id": "folio_train_1359", "nl": "If avocados are not sold in New York and not shipped from Columbia, then they are neither sold in New York nor New Haven.", "fol": "((-FruitsSoldInNewYork(Avocado) & -FruitsShippedFromColumbia(Avocado)) -> (-FruitsSoldInNewYork(Avocado) & -FruitsSoldInNewHaven(Avocado)))", "prediction": ["all x.((Avocado(x) & -SoldInNewYork(x) & -ShippedFromColumbia(x)) -> -SoldInNewYork(x) & -SoldFromNewHaven(x))", "(all x.((Avocado(x) & -SoldInNewYork(x) & -ShippedFromColumbia(x)) -> -SoldInNewYork(x)) & -ShippedFromColumbia(x))", "all x y.((Avocado(x) & NewYork(y) & -SoldIn(x,y) & ShippedFromColumbia(x)) -> -SoldInNewYork(x) & -SoldInNewHaven(x))", "all x.((Avocado(x) & -SoldInNewYork(x) & -ShippedFromColumbia(x)) -> (-SoldInNewYork(x) | ShippedFromNewHanaway(x)))", "all x.((Avocado(x) & -SoldInNewYork(x) & -SoldFromColumbia(x)) -> -SoldInNewYork(x) & -SoldFromNewHanaway(x))", "(all x.((Avocado(x) & -SoldInNewYork(x)) -> -SoldInNewYork(x)) & all y.((Avocado(y) & -SoldInNewYork(y)) -> -SoldInNewYork(y)))", "all x y.((Avocado(x) & -SoldInNewYork(x) & -ShippedFromColumbia(x)) -> (-SoldInNewYork(x) | ShippedFromNewHandon(x)))", "all x.((Apple(x) & -SoldInNewYork(x) & -ShippedFromColumbia(x)) -> (-SoldInNewYork(x) & -ShippedFromNewHaven(x)))", "all x.((Avocados(x) & -SoldInNewYork(x) & -ShippedFromColumbia(x)) -> (-SoldInNewYork(x) & -ShippedFromNewHaven(x)))", "all x y.((Avocado(x) & NewYork(y) & -SoldInNewYork(x,y) & ShippedFromColumbia(x,y)) -> (-SoldInNewYork(x,y) & -SoldInNewHaven(x,y)))", "all x.((Avoda(x) & -SoldInNewYork(x) & -ShippedFromColumbia(x)) -> (-SoldInNewYork(x) | ShippedFromNewHanaway(x)))", "(all x.((Avocado(x) & -SoldInNewYork(x) & ShippedFromColumbia(x)) -> -SoldInNewYork(x) & -SoldInNewHonoran(x)))", "all x.((Avocado(x) & -SoldInNewYork(x) & -ShippedFromColumbia(x)) -> -SoldInNewYork(x) & -ShippedFromNewHanaway(x))", "all x.((Avocado(x) & -SoldInNewYork(x) & -SoldFromColumbia(x)) -> (-SoldInNewYork(x) | -SoldFromNewHandon(x)))", "all x.((Avocado(x) & -SoldInNewYork(x) & -ShippedFromColumbia(x)) -> -SoldInNewYork(x) & -SoldInNewHonoran(x))", "all x.((Avoda(x) & -SoldInNewYork(x) & -ShippedFromColumbia(x)) -> (-SoldInNewYork(x) | ShippedFromNewHaven(x)))"]}
{"id": "folio_train_1360", "nl": "Some monitors equipped in the library are produced by AOC. ", "fol": "exists x.(EquippedInLibrary(x) & ProducedByAOC(x))", "prediction": ["exists x.(Monitor(x) & EquippedInLibrary(x) & ProducedByAOC(x))", "exists x y.(Monitor(x) & Library(y) & EquippedIn(x,y))", "exists x y.((Monitor(x) & Library(y) & EquippedIn(x,y)) -> ProducedBy(x,AOC))", "exists x.(Monitor(x) & EquippedInLibrary(x) & ProducedByAOC(x))", "all x y z.((Monitor(x) & Library(y) & Library(z) & EquippedIn(x,y,z)) -> ProducedBy(x,AOC))", "exists x y.(Monitor(x) & Library(y) & EquippedIn(x,y))", "all x y.((Monitor(x) & Library(y)) -> EquippedWith(x,y))", "exists x.(Monitor(x) & EquippedInLibrary(x))", "all x y z.((Monitor(x) & Library(y) & Library(z) & EquippedWith(x,y)) -> ProducedBy(x,z))", "all x y.((Monitor(x) & Library(y) & EquippedWith(x,y)) -> ProducedByAOC(x))", "exists x.(Monitor(x) & EquippedInLibrary(x) & ProducedByAOC(x))", "exists x.(Micromonitor(x) & EquippedInLibrary(x))", "exists x.(Monitor(x) & EquippedInLibrary(x))", "exists x.(Monitor(x) & EquippedInLibrary(x) & ProducedByAOC(x))", "exists x.(Monitor(x) & EquippedInBibliotheque(x))", "exists x.(Monitor(x) & EquipedInLibrary(x) & ProducedByAOC(x))"]}
{"id": "folio_train_1361", "nl": "All monitors equipped in the library are cheaper than 800 dollars. ", "fol": "all x.(EquippedInLibrary(x) -> CheaperThan800Dollars(x))", "prediction": ["all x.((Monitor(x) & EquippedInLibrary(x)) -> CheaperThan(x,800))", "all x y.((Monitor(x) & Library(y) & EquippedWith(x,y)) -> CheaperThan(x,800))", "all x.((Monitor(x) & EquippedInLibrary(x)) -> CheaperThan(x,800))", "(all x.(Microscope(x) & EquippedInLibrary(x,800)) -> CheaperThan(x,800))", "all x y.((Monitor(x) & Library(y) & EquippedIn(x,y)) -> CheaperThan(x,800))", "all x.((Monitor(x) & EquippedInLibrary(x)) -> CheaperThan(x,800))", "all x y.((Monitor(x) & Library(y)) -> CheaperThan(x,800))", "(all x.(Microscope(x) -> EquippedInLibrary(x,800)))", "all x.((Monitor(x) & EquippedInLibrary(x)) -> BoughtBy(x,800))", "all x.(Monitor(x) -> (EquivalentTo(x,800) & -EquivalentTo(x,800)))", "all x y.((Monitor(x) & Library(y) & EquippedWith(x,y)) -> BoughtBy(x,y))", "all x y.((Monitor(x) & LocatedInLibrary(x)) -> CheaperThan(x,800))", "all x.((Monitor(x) & EquippedInLibrary(x)) -> LowerThan(x,800))", "all x.((Monitor(x) & EquippedInLibrary(x)) -> CheaperThan(x,800))", "all x.((Monitor(x) & EquipedInLibrary(x)) -> BoughtBy(x,800))", "all x.((Monitor(x) & EquippedWithLibrary(x)) -> LowerThan(x,800))"]}
{"id": "folio_train_1362", "nl": "All monitors cheaper than 800 dollars are with a resolution of 1080p. ", "fol": "all x.(CheaperThan800Dollars(x) -> HasResolution1080p(x))", "prediction": ["all x.((Monitor(x) & CheaperThan(x,800)) -> HasResolution(x,1080))", "all x.((Monitor(x) & CheaperThan800Dollars(x)) -> Resolution(x,1080p))", "all x y.((Monitor(x) & CheaperThan(x,800)) -> HasResolution(x,1080))", "all x.((Monitor(x) & CheaperThan(x,800)) -> Resolution(x,1080))", "all x.((Monitor(x) & LowerThan(x,800)) -> HasResolution(x,1080))", "all x.(Monitor(x) -> (BudgetsBetterThan(x,800) & ResolutionThan(x,1080)))", "(all x.((Monitor(x) & CheaperThan(x,800)) -> Resolution(x,1080))", "all x.(BudgetMonitor(x) -> (BudgetsBetterThan(x,800) & Resolution(x,1080)))", "all x y.((Monitor(x) & LowerThan(x,800)) -> HasResolution(x,1080))", "(all x.(BudgetMonitor(x) & CheaperThan(x,800)) -> HasResolution(x,1080))", "all x.((Monitor(x) & CheaperThan800Dollars(x)) -> HasResolution(x,1080p))", "all x.((Monitor(x) & LowerThan(x,800)) -> Resolution(x,1080))", "all x.(Monitor(x) -> (BudgetsBelow800Dollars(x) & Resolution(x,10)))", "all x y.((Monitor(x) & CheaperThan(x,800)) -> Resolution(x,1080))", "all x.((Monitor(x) & CheaperThan(x,800)) -> HasResolution(x,1080))", "all x.((Monitor(x) & LessThan800Dollars(x)) -> HasResolution(x,10))"]}
{"id": "folio_train_1363", "nl": "If a monitor has a resolution of 1080p, then it does not support the type-c port. ", "fol": "all x.(HasResolution1080p(x) -> -SupportsTypeCPort(x))", "prediction": ["all x.((Monitor(x) & Resolution(x,10)) -> -SupportsTypeCPort(x))", "all x.((Monitor(x) & Resolution(x,10)) -> -SupportsTypeCPort(x))", "all x y.((Monitor(x) & Resolution(x,y) & 1080p(y)) -> -SupportsTypeCPort(x))", "all x.((Monitor(x) & Resolution(x,1080)) -> -SupportsTypeCPort(x))", "all x.((Monitor(x) & ResolutionOf1080p(x)) -> -SupportsTypeCPort(x))", "all x y.((Monitor(x) & Resolution(x,y) & 1080p(y)) -> -SupportsTypeCPort(x))", "(all x.((Monitor(x) & Resolution(x,10)) -> -SupportsTypeCPort(x)))", "all x y.((Monitor(x) & Resolution(x,y) & Resolution(y,x,y)) -> -SupportsTypeCPort(x))", "(all x.((Monitor(x) & Resolution(x,1080p)) -> -SupportsTypeCPort(x)))", "all x.((Monitor(x) & Resolution(x,10)) -> -SupportsTypeCPort(x))", "all x.((Monitor(x) & Resolution1080p(x)) -> -SupportsTypeCPort(x))", "all x.((Monitor(x) & Resolution(x,1008)) -> -SupportsTypeCPort(x))", "all x.((Monitor(x) & ResolutionOf1080p(x)) -> -SupportsTypeCPort(x))", "all x.((Monitor(x) & ResolutionThan(x,10)) -> -SupportsTypeCPort(x))", "all x.((Monitor(x) & Resolution(x,10)) -> -SupportsTypeCPort(x))", "all x.((Monitor(x) & Resolution1080p(x)) -> -SupportsTypeCPort(x))"]}
{"id": "folio_train_1364", "nl": "A-2017 supports the type-c port. ", "fol": "SupportsTypeCPort(A2017)", "prediction": ["all x.(A-2017(x) -> SupportsTypeCPort(x))", "all x.((A-2017(x) & TypeCPort(x)) -> Supports(x))", "A-2017 supports type-c port.", "(SupportsTypeCPort(A-2017))", "all x y.((A-2017(x) & TypeCPort(y)) -> Supports(x,y))", "A-2017 supports TypeCPort(A)", "all x.(A-2017(x) -> SupportsTypeCPort(x))", "all x.((A-2017(x) & TypeCPort(x)) -> Supports(x,y))", "(SupportsTypeCPort(A-2017))", "all x y.((A-2017(x) & TypeCPort(y)) -> Supports(x,y))", "A-2017 supports type-c port.", "all x y.((A-2017(x) & Port(y) & TypeC(y)) -> Supports(x,y))", "all x.(A-2017(x) -> SupportsTypeCPort(x))", "A-2017 supports TypeCPort(a)", "All x.((A-2017(x) & TypeCPort(x)) -> Supports(x))", "All x.(A-2017(x) -> SupportsTypeCPort(x))"]}
{"id": "folio_train_1365", "nl": "A-2017 is produced by AOC.", "fol": "ProducedByAOC(A2017)", "prediction": ["all x.(A-2017(x) -> ProducedByAOC(x))", "A-2017 is produced by AOC.", "all x y.((A-2017(x) & AOC(y)) -> ProducedBy(x,y))", "(ProducedByAOC(A-2017))", "A-2017 is produced by AOC.", "All x.(A-2017(x) -> ProducedByAOC(x))", "all x y.((A-2017(x) & AOC(y)) -> ProducedBy(x,y))", "(ProducedByAOC(A-2017))", "A-2017 is produced by AOC.", "all x.(A-2017(x) -> ProducedByAOC(x))", "A-2017 is produced by AOC.", "All x.(A-2017(x) -> ProducedByAOC(x))", "(ProducedByAOC)", "A-2017 is produced by AOC.", "All x.(A-2017(x) -> ProducedByAOC(x))", "A-2017 is produced by AOC."]}
{"id": "folio_train_1366", "nl": "A-2017 is produced by AOC and equipped in the library.", "fol": "(ProducedByAOC(A2017) & EquippedInLibrary(A2017))", "prediction": ["all x.(A-2017(x) -> (ProducedByAOC(x) & EquippedInLibrary(x)))", "all x y.((A-2017(x) & AOC(y)) -> (ProducedBy(x,y) & EquippedInLibrary(x)))", "A-2017 is produced by AOC and EquippedInLibrary(A-2017)", "(ProducedByAOC(A-2017) & EquippedInLibrary(A-2017))", "all x y z.((A-2017(x) & AOC(y) & Library(z)) -> (ProducedBy(x,y) & EquippedIn(x,z)))", "A-2017 (ProducedByAOC) & EquippedInLibrary(A-2017))", "all x.(A-2017(x) -> (ProducedByAOC(x) & EquippedInLibrary(x)))", "all x y.((A-2017(x) & AOC(y)) -> (ProducedBy(x,y) & EquippedInLibrary(x,y)))", "A-2017 is produced by AOC and EquippedInLibrary(A))", "(ProducedByAOC(A-2017) & EquippedInLibrary(A-2017))", "All x.((A-2017(x) & ProducedByAOC(x)) -> EquippedInLibrary(x))", "all x.(A-2017(x) -> (ProducedByAOC(x) & EquippedInLibrary(x)))", "all x y.((A-2017(x) & AOC(y)) -> (ProducedBy(x,y) & EquippedInLibrary(x)))", "(ProducedByAOC(A-2017) & EquippedInLibrary(A-2017))", "All x.(A-2017(x) -> (ProducedBy(x,AOC) & EquippedInLibrary(x,AOC)))", "All x.(A-2017(x) -> (ProducedByAOC(x) & EquippedInLibrary(x)))"]}
{"id": "folio_train_1367", "nl": "If A-2017 is not with a resolution of 1080p or produced by AOC, then it is not equipped in the library.", "fol": "((-HasResolution1080p(A2017) | ProducedByAOC(A2017)) -> -EquippedInLibrary(A2017))", "prediction": ["all x.((A-2017(x) & -Resolution(x,10)) | ProducedByAOC(x)) -> -EquivalentInLibrary(x))", "all x.((A-2017(x) & -(Resolution(x,10) & -ProducedByAOC(x))) -> -EquivalentInLibrary(x))", "(-(A-2017(A) & Resolution(A) & -AOC(A))) -> -EquivalentInLibrary(A-2017))", "(-Resolution1080p(A-2017) | ProducedByAOC(A-2017)))", "all x.((A-2017(x) & -Resolution(x,1080) & -ProducedByAOC(x)) -> -EquivalentInLibrary(x))", "all x y.((A-2017(x) & -Resolution(x,y) & (-Resolution(x,y) | ProducedByAOC(x))) -> -EquivalentInLibrary(x))", "all x.(((A-2017) & -Resolution(x,10)) | ProducedByAOC(x)) -> -EquivalentInLibrary(x))", "all x y.((A-2017(x) & (-Resolution(x,y) & 1080p)) | ProducedBy(x,y))) -> -EquivalentInLibrary(x))", "all x.((A-2017(x) & -Resolution(x,10) & -ProducedByAOC(x)) -> -EquivalentInLibrary(x))", "all x.((A-2017(x) & -(Resolution(x,10) & -ProducedByAOC(x))) -> -EquipmentInLibrary(x))", "all x.((A-2017(x) & (-Resolution(x,10) | ProducedByAOC(x))) -> -EquivalentInLibrary(x))", "all x.((A-2017(x) & -(Resolution(x,1080) | ProducedByAOC(x))) -> -EquivalentInLibrary(x))", "(all x.((A-2017(x) & -Resolution(x,10)) | ProducedByAOC(x))) -> -EquivalentInLibrary(x))", "All x.((A-2017) & (-Resolution(x,10) & -ProducedByAOC(x))) -> -EquivalentInLibrary(x))", "all x.((A-2017(x) & (-Resolution1080p(x) | ProducedByAOC(x))) -> -EquivalentInLibrary(x))", "all x.((A-2017(x) & (-Resolution(x,1080) | ProducedByAOC(x))) -> -EquipmentInLibrary(x))"]}
{"id": "folio_train_1368", "nl": "S\u016bduva Marijampol\u0117 holds the Lithuanian Supercup.", "fol": "HoldsSupercup(Suduva,Thelithuaniansupercup)", "prediction": ["SduvaMarijampol holdsLituanianSupercup(SduvaMarijampol)", "all x.(SduvaMarijampol(x) -> HoldsLituanianSupercup(x))", "(HoldsLituanianSupercup(SduvaMarijampol)", "holds LithuanianSupercup(SduvaMarijampol)", "-HoldsLituanianSupercup(SduvaMarijampol)", "SduvaMarijampol HoldsLituanianSupercup(SduvaMarijampol)", "(HoldsSupercup(SduvaMarijampol)", "Sduva Marijampol holds LithuanianSupercup.", "SduvaMarijampol holdsLituanianSupercup.", "all x.(SduvaMarijampol(x) -> HoldsLituanianSupercup(x))", "(HoldsLituanianSupercup(SduvaMarijampol)", "-HoldsLituanianSupercup(SduvaMarijampol)", "SduvaMarijampol holdsLithuanianSupercup(SduvaMarijampol)", "(HoldsLituanianSupercup(SduvaMarjampol)", "Sduva Marijampol holds LithuanianSupercup.", "SduvaMarijampol HoldsLituanianSupercup(SduvaMarijampol)"]}
{"id": "folio_train_1369", "nl": "S\u016bduva Marijampol\u0117 is a soccer team.", "fol": "IsSoccerTeam(Suduva)", "prediction": ["all x.(SduvaMarijampol(x) -> SoccerTeam(x))", "SduvaMarijampol is a soccer team.", "(SduvaMarijampol,SoccerTeam)", "all x.((SduvaMarijampol(x) & SoccerTeam(x)) -> -SduvaMarijampol(x))", "SduvaMarijampol is soccer team.", "all x.(SduvaMarijampol(x) -> SoccerTeam(x))", "(SduvaMarijampol) - SoccerTeam(SduvaMarijampol))", "(SduvaMarijampol,SoccerTeam)", "SduvaMarijampol (SoccerTeam)", "SduvaMarjampol is soccer team.", "All x.(SduvaMarjampol(x) -> SoccerTeam(x))", "all x.(SduvaMarijampol(x) -> SoccerTeam(x))", "SduvaMarjampol is a soccer team.", "SduvaMarijampol is a soccer team.", "SduvaMarijampol (SoccerTeam)", "All x.(SduvaMarijampol(x) -> SoccerTeam(x))"]}
{"id": "folio_train_1370", "nl": "Some soccer team holds the Lithuanian Supercup.", "fol": "exists x.(IsSoccerTeam(x) & HoldsSupercup(x,Thelithuaniansupercup))", "prediction": ["exists x.(SoccerTeam(x) & HoldsLituanianSupercup(x))", "exists x y.(SoccerTeam(x) & SoccerTeam(y) & HoldsLituanianSupercup(x,y))", "exists x.(SoccerTeam(x) & HoldsLituanianSupercup(x))", "exists x y.(SoccerTeam(x) & Team(y) & HoldsLituanianSupercup(x,y))", "exists x.(SoccerTeam(x) & HoldsLituanianSupercup(x))", "exists x.(SoccerTeam(x) & HoldsLituanianSupercup(x))", "exists x.(SoccerTeam(x) & HoldsLithuanianSupercup(x))", "exists x y.(SoccerTeam(x) & LithuanianSupercup(y))", "exists x y.(SoccerTeam(x) & SoccerTeam(y) & HoldsLituanianSupercup(x,y))", "exists x y.(SoccerTeam(x) & Team(y) & HoldsLituanianSupercup(x,y))", "exists x.(SoccerTeam(x) & HoldsLituanianSupercup(x))", "exists x.(SoccerTeam(x) & HoldsLithuanianSupercup(x))", "exists x.(SoccerTeam(x) & Holds(x,Lituania))", "exists x.(SoccerTeam(x) & HoldsLituanianSupercup(x))", "exists x.(SoccerTeam(x) & HoldsLithuanianSupercup(x))", "exists x.(SoccerTeam(x) & Holds(x,Lituania))"]}
{"id": "folio_train_1371", "nl": "Ainderby Quernhow is a village and civil parish in the Hambleton District.", "fol": "(IsVillage(AinderbyQuernhow) & IsCivilParish(AinderbyQuernhow) & IsInHambletonDistrict(AinderbyQuernhow))", "prediction": ["all x.(AinderbyQuernhow(x) -> (Dormant(x) & CivilParish(x) & HambletonDistrict(x)))", "all x.((Dormant(x) & CivilParish(x) & HambletonDistrict(x)) -> AinderbyQuernhow(x))", "all x.(AinderbyQuernhow(x) -> (Dorm(x) & Parish(x) & HambletonDistrict(x)))", "AinderbyQuernhow (DormantAndCivilParish(Ainderby) & HambletonDistrict(Hambleton))", "all x.((AinderbyQuernhow(x) & Village(x) & CivilParish(x)) -> HambletonDistrict(x))", "(DorfAndCivilParish(AinderbyQuernhow) & HambletonDistrict(AinderbyQuernhow))", "AinderbyQuernhow (Dorm(a) & Parish(b) & HambletonDistrict(c))", "all x y.((AinderbyQuernhow(x) & Village(y) & CivilParish(x)) -> InHambletonDistrict(x,y))", "(Dormant(AinderbyQuernhow) & CivilParish(Ainderby) & HambletonDistrict(Ainderby))", "(Destination(AinderbyQuernhow) & Village(Ainderby) & CivilParish(Ainderby) & HambletonDestination(Ainderby))", "AinderbyQuernhow (district(d) & Village(d) & CivilParish(d) & HambletonDistrict(d))", "all x y.((AinderbyQuernhow(x) & Village(y)) -> (CivilParish(x) & HambletonDistrict(y)))", "AinderbyQuernhow is a village and civil parish in Hambleton District.", "all x.(AinderbyQuernhow(x) -> (Dormant(x) & CivilParish(x) & HambletonDistrict(x)))", "All x.(AinderbyQuernhow(x) -> (Village(x) & CivilParish(x) & HambletonDistrict(x)))", "All x.(AinderbyQuernhow(x) -> (Dorm(x) & Parish(x) & HambletonDistrict(x)))"]}
{"id": "folio_train_1372", "nl": "Hambleton District is in North Yorkshire.", "fol": "all x.(IsInHambletonDistrict(x) -> IsInNorthYorkshire(x))", "prediction": ["(NorthYorkshire(HambletonDistrict) & NorthYorkshire(HambletonDistrict))", "NorthYorkshire(HambletonDistrict)", "LocatedInNorthYorkshire(HambletonDistrict)", "HambletonDistrictInNorthYorkshire(HambletonDistrict)", "all x.(HambletonDistrict(x) -> NorthYorkshire(x))", "(NorthYorkshire(HambletonDistrict) & LocatedIn(HambletonDistrict))", "NorthYorkshire(HambletonDistrict)", "(NorthYorkshire(HambletonDisturbance) & NorthYorkshire(HambletonDisturbance))", "HambletonDistrictInNorthYorkshire(Hambleton)", "all x.(HambletonDistrict(x) -> NorthYorkshire(x))", "(NorthYorkshire(HambletonDistrict) & LocatedIn(HambletonDistrict))", "North Yorkshire.", "NorthYorkshire(HambletonDistrict)", "HambletonDistrictInNorthYorkshire.", "all x.(HambletonDistrict(x) -> NorthYorkshire(x))", "(NorthYorkshire)"]}
{"id": "folio_train_1373", "nl": "North Yorkshire is in England.", "fol": "all x.(IsInNorthYorkshire(x) -> IsInEngland(x))", "prediction": ["all x.(NorthYorkshire(x) -> InEngland(x))", "(InEngland(NorthYorkshire) & In(NorthYorkshire,England))", "North Yorkshire is in England.", "NorthYorkshire(North Yorkshire) -> InEngland(NorthYorkshire))", "all x.(NorthYorkshire(x) -> InEngland(x))", "NorthYorkshireInEngland(NorthYorkshire)", "all x y.((NorthYorkshire(x) & England(y)) -> In(x,y))", "(InEngland(NorthYorkshire) & In(NorthYorkshire,England))", "North Yorkshire is in England.", "all x.(NorthYorkshire(x) -> InEngland(x))", "all x y.((NorthYorkshire(x) & England(y)) -> In(x,y))", "(InEngland(NorthYorkshire)", "all x.(NorthYorkshire(x) -> InEngland(x))", "(InEngland(NorthYorkshire,North))", "all x.(NorthYorkshire(x) -> InEngland(x))", "All x.(NorthYorkshire(x) -> England(x))"]}
{"id": "folio_train_1374", "nl": "There is a village in England.", "fol": "exists x.(IsVillage(x) & IsInEngland(x))", "prediction": ["exists x.(Dorf(x) & InEngland(x))", "exists x.(Dorf(x) & InEngland(x))", "exists x y.(Dorf(x) & Village(y) & In(x,y))", "exists x.(Dorm(x) & InEngland(x))", "all x y.((Dorf(x) & England(y)) -> exists z.((Dorf(z) & Village(z)) & In(x,y))))", "exists x.(Dorf(x) & In(x,England))", "exists x y.(Dorf(x) & Village(y) & InEngland(x,y))", "exists x.(Dorm(x) & InEngland(x))", "exists x.(Village(x) & InEngland(x))", "exists x.(Dorf(x) & In(x,England))", "exists x.(Dominion(x) & InEngland(x))", "exists x.(Dominion(x) & In(x,England))", "exists x.(Dorm(x) & InEngland(x))", "Exists x.(Dominion(x) & InEngland(x))", "exists x.(Dorm(x) & In(x,England))", "exists x.(Destination(x) & InEngland(x))"]}
{"id": "folio_train_1375", "nl": "There is no civil parish in England.", "fol": "-exists x.(IsCivilParish(x) & IsInEngland(x))", "prediction": ["-exists x.(CivilParish(x) & InEngland(x))", "exists x.(CivilParish(x) & -InEngland(x))", "there is no civil parish in England.", "-exists x.(CivilParish(x) & InEngland(x))", "(exists x.(CivilParish(x) & -InEngland(x)))", "(-civilParish(england) & In(england))", "-(CivilParish(x) & InEngland(x))", "-exists x.(CivilPast(x) & InEngland(x))", "there is no civil parish in England.", "exists x.(CivilParish(x) & -InEngland(x))", "-exists x.(CivilParish(x) & In(x,England))", "exists x.(CivilParish(x) & InEngland(x))", "-exists x.(CatholicParish(x) & InEngland(x))", "(exists x.(CivilParish(x) & -InEngland(x)))", "exists x.(CivilPast(x) & -InEngland(x))", "-exists x.(CivilParish(x) & InEngland(x))"]}
{"id": "folio_train_1376", "nl": "Douglas Adams is an author who created the book collection called The Salmon of Doubt. ", "fol": "(IsAuthor(DouglasAdams) & IsBook(TheSalmonOfDoubt))", "prediction": ["(Author(DouglasAdams) & CreatedBookCollection(DoubleSalmon))", "Douglas Adams (Author(a) & CreatedBookCollection(a) & SalmonOfDoubt(a))", "all x.(DouglasAdams(x) -> CreatesBookCollection(x))", "Douglas Adams is an author who created the book collection called The SalmonOfDoubt(x))", "All x y.((DouglasAdams(x) & BookCollection(y)) -> Created(x,y))", "Douglas Adams is author who created book collection called SalmonOfDoubt(x))", "Douglas Adams (Author(Adams) & CreatedBookCollection(Adams,SalmonOfDoubt))", "all x.(DouglasAdams(x) -> CreatedBookCollection(x))", "(Author(DouglasAdams) & CreatedBookCollection(DoubleSalmon))", "Douglas Adams, Author(a) & CreatedBookCollection(a) & SalmonOfDoubt(a))", "Douglas Adams (Author(a) & CreatedBookCollection(a) & SalmonOfDoubt(a))", "(Author(DowsonAdams) & CreatesSalmonOfDoubt(DowsonBookCollection))", "Douglas Adams is an author who created the book collection called The SalmonOfDoubt(x))", "Douglas Adams, author, created book collection called SalmonOfDoubt(x))", "all x.(DouglasAdams(x) -> Author(x))", "(Author(DouglasAdams) & CreatedBookCollection(Double(Double))"]}
{"id": "folio_train_1377", "nl": "The Salmon of Doubt is about life experiences and technology.", "fol": "(IsAboutLifeExperience(TheSalmonOfDoubt) & IsAboutTechnology(TheSalmonOfDoubt))", "prediction": ["All x.(SalmonOfDoubt(x) -> (LifeExperiences(x) & Technology(x)))", "(SalmonOfDoubt(Salmon) -> (LifeExperiences(Salmon) & Technology(Salmon)))", "The SalmonOfDoubt.com is aboutLifeExperiencesAndTechnology(Salmon)", "The SalmonOfDubit(Salmon) -> (LifeExperiences(Salmon) & Technology(Salmon)))", "all x y.((SalmonOfDoubt(x) & LifeExperiences(y) & Technology(z)) -> About(x,y,z))", "all x.(SalmonOfDubit(x) -> (LifeExperiences(x) & Technology(x)))", "(SalmonOfDubit(Salmon) -> (LifeExperiences(Salmon) & Technology(Salmon)))", "The SalmonOfDumbbit is aboutLifeExperiencesAndTechnology(Salmon)", "The SalmonOfDoubt is aboutLifeExperiencesAndTechnology(Salmon)", "All x.(SalmonOfDoubt(x) -> (LifeExperiences(x) & Technology(x)))", "The SalmonOfDoubt.com is aboutLifeExperiencesAndTechnology.", "(SalmonOfDoubt(Salmon) -> (LifeExperiences(Salmon) & Technology(Salmon)))", "all x.(SalmonOfDoubt(x) -> (LifeExperiences(x) & Technology(x)))", "(SalmonOfDoubt(Salmon) -> (LifeExperiences(Salmon) & Technology(Salmon)))", "All x.(SalmonOfDubit(x) -> (LifeExperiences(x) & Technology(x)))", "All x.(SalmonOfDoubt(x) -> (LifeExperiences(x) & Technology(x)))"]}
{"id": "folio_train_1378", "nl": "All authors are writers.", "fol": "all x.(IsAuthor(x) -> IsWriter(x))", "prediction": ["all x.(Author(x) -> Writer(x))", "all x.(Author(x) -> Writer(x))", "(all x.(Author(x) -> Writer(x)))", "all x.(Author(x) -> Writer(x))", "all x y.((Author(x) & Writer(y)) -> Writer(x))", "(all x.(Author(x) -> Writer(x))", "all x.(Author(x) -> Writer(x))", "all x.(Author(x) -> Writer(x))", "all x.(Author(x) -> Writer(x))", "all x.(Author(x) -> Writer(x))", "exists x.(Author(x) & Author(x) & Writer(x))", "all x.(Author(x) -> Writer(x))", "all x.(Author(x) -> Writer(x))", "all x.(Author(x) -> Writer(x))", "all x.(Author(x) -> Author(x))", "all x.(Author(x) -> Writer(x))"]}
{"id": "folio_train_1379", "nl": "Writers create innovative ideas.", "fol": "all x.(IsWriter(x) -> CreatesInnovativeIdea(x))", "prediction": ["all x y.((Writer(x) & Idea(y)) -> Creates(x,y))", "all x.(Writer(x) -> CreatesInnovativeIdeas(x))", "all x y.((Writer(x) & InnovativeIdea(y)) -> Creates(x,y))", "all x y z.((Writer(x) & InnovativeIdea(y) & Idea(z)) -> Creates(x,y,z))", "all x.(Writer(x) -> CreatesInnovativeIdeas(x))", "all x y z.((Writer(x) & Idea(y) & Idea(z)) -> Creates(x,y,z))", "all x y.((Writer(x) & Idea(y)) -> Creates(x,y))", "all x.(Writer(x) -> CreatesInnovativeIdeas(x))", "all x y z.((Writer(x) & InnovativeIdeas(y) & Idea(z)) -> Creates(x,y,z))", "all x y.((Writer(x) & InnovativeIdea(y)) -> Creates(x,y))", "all x.(Writer(x) -> CreatesInnovativeIdeas(x))", "all x y.((Writer(x) & Idea(y)) -> Creates(x,y))", "all x.(Writer(x) -> CreatesInnovativeIdeas(x))", "exists x.(Writer(x) & CreateInnovativeIdeas(x))", "all x.(Writer(x) -> CreatesInnovativeIdeas(x))", "all x.(Writer(x) -> CreatesInnovativeIdeas(x))"]}
{"id": "folio_train_1380", "nl": "Some books that contain innovative ideas are about technology.", "fol": "exists x.(ContainsInnovativeIdea(x) & IsAboutTechnology(x))", "prediction": ["exists x.(Book(x) & InnovativeIdeas(x) & AboutTechnology(x))", "exists x.(Book(x) & ContainsInnovativeIdeas(x))", "exists x.(Book(x) & InnovativeIdeas(x) & AboutTechnology(x))", "exists x.((Book(x) & ContainsInnovativeIdeas(x)) -> AboutTechnology(x))", "all x y.((Book(x) & InnovativeIdeas(y) & Contains(x,y)) -> AboutTechnology(x))", "exists x.(Book(x) & InnovativeIdeas(x) & AboutTechnology(x))", "exists x y.(Book(x) & InnovativeIdeas(y) & Contains(x,y))", "exists x.(Book(x) & ContainsInnovativeIdeas(x))", "exists x.(Book(x) & ContainsInnovativeIdeas(x) & AboutTechnology(x))", "all x y.((Book(x) & InnovativeIdeas(y) & Contains(x,y)) -> AboutTechnology(x))", "exists x.(Book(x) & InnovativeIdeas(x) & AboutTechnology(x))", "exists x.((Book(x) & InnovativeIdeas(x)) -> AboutTechnology(x))", "exists x y.(Book(x) & InnovativeIdeas(y) & Contains(x,y))", "exists x.(Book(x) & InnovativeIdeas(x) & Contains(x,technology))", "exists x.(Book(x) & ContainsInnovativeIdeas(x))", "exists x.(Book(x) & InnovativeIdeas(x))"]}
{"id": "folio_train_1381", "nl": "Douglas Adams is a writer.", "fol": "IsWriter(DouglasAdams)", "prediction": ["all x.(DouglasAdams(x) -> Writer(x))", "(Writer(DouglasAdams) & Writer(DouglasAdams))", "Douglas Adams is a Writer.", "all x.(DouglasAdams(x) -> Writer(x))", "Douglas Adams is a Writer.", "(Writer(DouglasAdams)", "Douglas Adams is a writer.", "all x.(DouglasAdams(x) -> Writer(x))", "Douglas Adams (Writer)", "(Writer(DouglasAdams)", "Douglas Adams is Writer.", "all x.(DouglasAdams(x) -> Writer(x))", "Douglas Adams (Writer)", "(Writer(DouglasAdams)", "all x.(DavidAdams(x) -> Writer(x))", "all x.(DouglasAdams(x) -> Writer(x))"]}
{"id": "folio_train_1382", "nl": "Douglas Adams created innovative ideas.", "fol": "CreatesInnovativeIdea(DouglasAdams)", "prediction": ["all x.(DouglasAdams(x) -> CreatedInnovativeIdeas(x))", "Douglas Adams created innovativeideas.", "all x y.((DouglasAdams(x) & InnovativeIdeas(y)) -> Created(x,y))", "(CreatedInnovativeIdeas(DouglasAdams)", "all x.(DouglasAdams(x) -> CreatedInnovativeIdeas(x))", "Douglas Adams created innovative ideas.", "Douglas Adams created innovativeideas(Douglas)", "Douglas Adams ad hoc created innovativeideas.", "all x y.((DouglasAdams(x) & InnovativeIdeas(y)) -> Created(x,y))", "(CreatedInnovativeIdeas(DouglasAdams)", "all x.(DouglasAdams(x) -> CreatedInnovativeIdeas(x))", "Douglas Adams adveined innovativeideas.", "all x.(DouglasAdams(x) -> CreatedInnovativeIdeas(x))", "Douglas Adams created innovative ideas.", "Douglas Adams created innovativeideas.", "all x.(DavidAdams(x) -> CreatedInnovativeIdeas(x))"]}
{"id": "folio_train_1383", "nl": "The Salmon of Doubt has no innovative Ideas.", "fol": "-exists y.ContainsInnovativeIdea(TheSalmonOfDoubt)", "prediction": ["All x.(SalmonOfDoubt(x) -> -InnovativeIdeas(x))", "(SalmonOfDoubt(Salmon) & -InnovativeIdeas(Salmon))", "The SalmonOfDoubt.com -InnovativeIdeas(Salmon)", "(SalmonOfDubit(Salmon) & -InnovativeIdeas(Salmon))", "The SalmonOfDumbest(Salmon) -InnovativeIdeas(Salmon))", "All x.(SalmonOfDubit(x) -> -InnovativeIdeas(x))", "-InnovativeIdeas(SalmonOfDoubt)", "(SalmonOfDoubt(SalmonOfDubit) - InnovativeIdeas(SalmonOfDubit))", "The SalmonOfDubit.com -InnovativeIdeas(Salmon)", "The SalmonOfDoubt.com -InnovativeIdeas(SalmonOfDoubt)", "(SalmonOfDumbness(Salmon) -> NoInnovativeIdeas(Salmon))", "All x.(SalmonOfDoubt(x) -> -InnovativeIdeas(x))", "the SalmonOfDumbness.com - InnovativeIdeas(Salmon)", "all x.(SalmonOfDubit(x) -> -InnovativeIdeas(x))", "The SalmonOfDoubt.com -InnovativeIdeas(SalmonOfDubit)", "All x.(SalmonOfDoubt(x) -> NoInnovativeIdeas(x))"]}
{"id": "folio_train_1384", "nl": "No disposable products can help slow down global warming. ", "fol": "all x.(IsDisposableProduct(x) -> -CanHelpSlowDownGlobalWarming(x))", "prediction": ["-exists x.(DisposableProduct(x) & SlowsGlobalWarming(x))", "all x.((DisposableProduct(x) & SlowGlobalWarming(x)) -> -CanSlowGlobalWarming(x))", "-exists x.(DisposableProduct(x) & SlowsGlobalWarming(x))", "all x.(DisposableProduct(x) -> SlowsGlobalWarming(x))", "\u2013 -disposableProduct(x) & SlowGlobalWarming(x))", "-exists x.(DiscoverableProduct(x) & SlowsGlobalWarming(x))", "-exists x.(DisposableProduct(x) & SlowGlobalWarming(x))", "all x.((DisposableProduct(x) & SlowGlobalWarming(x)) -> -SlowGlobalWarming(x))", "(exists x.(DisposableProduct(x) & SlowsGlobalWarming(x)))", "-exists x.(DiscoverableProduct(x) & SlowGlobalWarming(x))", "-exists x.(DisposableProduct(x) & SlowsGlobalWarming(x))", "(exists x.(DisposableProduct(x) & SlowsGlobalWarming(x)))", "-exists x.(DisposableProduct(x) & SlowsGlobalWarming(x))", "-exists x.(DiscoverableProduct(x) & SlowGlobalWarming(x))", "-exists x.(DisposableProduct(x) & SlowGlobalWarming(x))", "-exists x.(DisposableProduct(x) & SlowsGlobalWarming(x))"]}
{"id": "folio_train_1385", "nl": "All eco-friendly brands can help slow down global warming. ", "fol": "all x.(IsEcoFriendlyBrand(x) -> CanHelpSlowDownGlobalWarming(x))", "prediction": ["all x.(EcoFriendlyBrand(x) -> SlowsGlobalWarming(x))", "all x.((EcoFriendlyBrand(x) & SlowGlobalWarming(x)) -> CanHelp(x))", "all x.(EcoFriendlyBrand(x) -> SlowGlobalWarming(x))", "all x y.((EcoFriendlyBrand(x) & GlobalWarming(y)) -> SlowsDown(x,y))", "all x.((EcoFriendly(x) & EcoFriendly(x)) -> SlowsGlobalWarming(x))", "all x.(EcoFriendly(x) -> SlowsGlobalWarming(x))", "all x.((Brand(x) & EcoFriendly(x)) -> SlowsGlobalWarming(x))", "all x.((EcoFriendlyBrand(x) & SlowGlobalWarming(x)) -> CanHelp(x))", "all x y.((EcoFriendlyBrand(x) & GlobalWarming(y)) -> SlowsDown(x,y))", "all x.(EcoFriendlyBrand(x) -> SlowsGlobalWarming(x))", "all x y.((EcoFriendlyBrand(x) & EcoFriendlyBrand(y)) -> SlowsGlobalWarming(x,y))", "all x.((EcoFriendlyBrand(x) & SlowGlobalWarming(x)) -> CanSlowGlobalWarming(x))", "all x y.((EcoFriendlyBrand(x) & GlobalWarming(y)) -> SlowsDown(x,y))", "all x.(EcoFriendly(x) -> SlowGlobalWarming(x))", "all x.(EcoFriendlyBrand(x) -> SlowGlobalWarming(x))", "all x.(EcoFriendlyBrand(x) -> SlowsGlobalWarming(x))"]}
{"id": "folio_train_1386", "nl": "All sustainable fashion brands are eco-friendly brands.", "fol": "all x.(IsSustainableFashionBrand(x) -> IsEcoFriendlyBrand(x))", "prediction": ["all x.((SustainableFashionBrand(x) & EcoFriendly(x)) -> SustainableFashionBrand(x))", "all x.(SustainableFashionBrand(x) -> EcoFriendly(x))", "all x.((SustainableFashionBrand(x) & EcoFriendly(x)) -> Sustainable(x))", "all x y.((SustainableFashionBrand(x) & EcoFriendly(y)) -> EcoFriendly(x))", "all x.(SustainableFashionBrand(x) -> EcoFriendly(x))", "all x.((SustainableFashionBrand(x) & EcoFriendlyBrand(x)) -> SustainableFashionBrand(x))", "all x y.((SustainableFashionBrand(x) & SustainableFashionBrand(y)) -> EcoFriendly(x,y))", "all x.((SustainableFashion(x) & EcoFriendly(x)) -> Sustainable(x))", "all x y.((SustainableFashionBrand(x) & EcoFriendlyBrand(y)) -> EcoFriendly(x))", "all x.(SustainableFashionBrand(x) -> EcoFriendly(x))", "all x.(SustainableFashion(x) -> EcoFriendly(x))", "all x.((SustainableFashionBrand(x) & EcoFriendly(x)) -> SustainableFashionBrand(x))", "all x.((SustainableFashion(x) & EcoFriendly(x)) -> SustainableFashion(x))", "(all x.(SustainableFashionBrand(x) -> EcoFriendlyBrand(x)))", "all x.(SustainableFashionBrand(x) -> EcoFriendly(x))", "all x.(SustainableFashionBrand(x) -> EcoFriendly(x))"]}
{"id": "folio_train_1387", "nl": "All fast fashion products are disposable products.", "fol": "all x.(IsFastFashionProduct(x) -> IsDisposableProduct(x))", "prediction": ["all x.(FastFashionProduct(x) -> Disposable(x))", "all x.(FastFashionProduct(x) -> Disposable(x))", "all x y.((FastFashionProduct(x) & FastFashionProduct(y)) -> Disposable(x))", "all x.(FastFashion(x) -> Disposable(x))", "all x.((FastFashionProduct(x) & Disposable(x)) -> FastFashionProduct(x))", "(all x.(FastFashionProduct(x) -> DisposableProduct(x)))", "all x y.((FastFashionProduct(x) & FastFashion(y)) -> DisposableProduct(x))", "all x.(FastFashionProduct(x) -> Disposable(x))", "all x.(FastFashion(x) -> Disposable(x))", "all x.((FastFashionProduct(x) & Disposable(x)) -> FastFashionProduct(x))", "(all x.(FastFashionProduct(x) -> Disposable(x))", "all x.(FastFashionProduct(x) -> DisposableProduct(x))", "all x.(FastFashion(x) -> DisposableProduct(x))", "all x.(FastFashionProduct(x) -> DisposableProduct(x))", "all x.(FastFashion(x) -> Disposable(x))", "all x.(FastFitnessProduct(x) -> Disposable(x))"]}
{"id": "folio_train_1388", "nl": "If Reformation is not helping slow down global warming, then Reformation is an eco-friendly brand or a sustainable fashion brand.", "fol": "((-CanHelpSlowDownGlobalWarming(Reformation) -> IsEcoFriendlyBrand(Reformation)) | IsSustainableFashionBrand(Reformation))", "prediction": ["all x.((Reformation(x) & -SlowsGlobalWarming(x)) -> (EcoFriendlyBrand(x) | SustainableFashionBrand(x)))", "all x.((Reformation(x) & -SlowGlobalWarming(x)) -> (EcoFriendlyBrand(x) | SustainableFashionBrand(x)))", "(-SlowsGlobalWarming(Reformation)) -> (EcoFriendlyBrand(Reformation) | SustainableFashionBrand(Reformation)))", "all x.((Reformation(x) & -SlowsGlobalWarming(x)) -> (EcoFriendlyBrand(x) | SustainableFashionBrand(x)))", "all x y.((Reformation(x) & -SlowingGlobalWarming(x)) -> (EcoFriendlyBrand(x) | SustainableFashionBrand(x)))", "all x.((Regionation(x) & -SlowsGlobalWarming(x)) -> (EcoFriendlyBrand(x) | SustainableFashionBrand(x)))", "all x.((Reformation(x) & -SlowingGlobalWarming(x)) -> (EcoFriendly(x) | SustainableFashion(x)))", "(-SlowingGlobalWarming(Reformation) | SustainableFashionBrand(Reformation))", "(-SlowsGlobalWarming(Reformation)) -> (EcoFriendlyBrand(Reformation) | SustainableFashionBrand(Reformation)))", "all x.((Reformation(x) & SlowsGlobalWarming(x)) -> (EcoFriendlyBrand(x) | SustainableFashionBrand(x)))", "all x.((Reformation(x) & -SlowGlobalWarming(x)) -> (EcoFriendlyBrand(x) | SustainableFashionBrand(x)))", "all x.(Reformation(x) -> (-SlowsGlobalWarming(x) & (EcoFriendlyBrand(x) | SustainableFashionBrand(x))))", "all x.((Reformation(x) & -SlowsGlobalWarming(x)) -> (EcoFriendlyBrand(x) | SustainableFashionBrand(x)))", "all x.((Reformation(x) & -SlowingGlobalWarming(x)) -> (EcoFriendly(x) | SustainableFashionBrand(x)))", "all x.((Reformation(x) & -SlowGlobalWarming(x)) -> (EcoFriendlyBrand(x) | SustainableFashionBrand(x)))", "all x.((Reformation(x) & -SlowsGlobalWarming(x)) -> (EcoFriendlyBrand(x) | SustainableFashionBrand(x)))"]}
{"id": "folio_train_1389", "nl": "Reformation is an eco-friendly brand.", "fol": "IsEcoFriendlyBrand(Reformation)", "prediction": ["All x.(Reformation(x) -> EcoFriendlyBrand(x))", "Reformation is ecofriendly brand.", "(EcoFriendlyBrand(Reformation))", "all x.(Reformation(x) -> EcoFriendlyBrand(x))", "(EcoFriendly(Reformation) -> EcoFriendly(Reformation))", "Reformation is ecofriendly brand.", "Reformation is eco-friendly brand.", "All x.(Reformation(x) -> EcoFriendly(x))", "all x.((Reformation(x) & EcoFriendly(x)) -> EcoFriendly(x))", "(EcoFriendlyBrand(Reformation)", "Reformation is EcoFriendlyBrand.", "all x.(Reformation(x) -> EcoFriendlyBrand(x))", "Reformation is ecofriendly brand.", "All x.(Reformation(x) -> EcoFriendlyBrand(x))", "all x.(Reformation(x) -> EcoFriendly(x))", "All x.(Reformation(x) -> EcoFriendlyBrand(x))"]}
{"id": "folio_train_1390", "nl": "Reformation produces fast fashion products.", "fol": "IsFastFashionProduct(Reformation)", "prediction": ["all x.(Reformation(x) -> ProducesFastFashionProducts(x))", "all x y.((Reformation(x) & FastFashionProduct(y)) -> Produces(x,y))", "Reformation producesFastFashionProducts(Reformation)", "(ProducesFastFashionProducts(Reformation))", "Reformation produces FastFashionProducts(Reformation)", "all x y.((Reformation(x) & FastFashion(y)) -> Produces(x,y))", "all x.(Reformation(x) -> ProducesFastFashionProducts(x))", "(ProducesFastFashionProducts(Reformation))", "Reformation producesFastFashionProducts(Reformation)", "Reformation produces FastFashionProducts(Reformation)", "all x y.((Reformation(x) & FastFashionProduct(y)) -> Produces(x,y))", "all x.(Reformation(x) -> ProducesFastFashionProducts(x))", "all x y.((Reformation(x) & FastFashion(y)) -> Produces(x,y))", "All x.(Reformation(x) -> ProducesFastFashionProducts(x))", "All x.(Reformation(x) -> ProducesFastFashion(x))", "All x.(Reformation(x) -> ProducesFastFashionProducts(x))"]}
{"id": "folio_train_1391", "nl": "Reformation does not produce fast fashion products.", "fol": "-IsFastFashionProduct(Reformation)", "prediction": ["all x.(Reformation(x) -> -ProducesFastFashionProducts(x))", "(-ProducesFastFashionProducts(Reformation))", "Reformation -ProducesFastFashionProducts(Reformation))", "(FastFashionProducts(Reformation) & -Produces(Reformation))", "-(Reformation(x) & FastFashion(x))", "-FastFashionProducts(Reformation)", "All x y.((Reformation(x) & FastFashion(y)) -> -Produces(x,y))", "all x.(Reformation(x) -> -ProducesFastFashionProducts(x))", "Reformation -ProducesFastFashionProducts(reformation))", "(-ProducesFastFashionProducts(Reformation))", "-(Reformation(x) & FastFashion(x))", "all x.(Reformation(x) -> -ProducesFastFashionProducts(x))", "Reformation -ProducesFastFashionProducts(Reformation))", "all x.(Reformation(x) -> -ProducesFastFashionProducts(x))", "all x.(Reformation(x) -> -ProducesFastFashion(x))", "all x.(Reformation(x) -> -ProducesFastFashionProducts(x))"]}
{"id": "folio_train_1392", "nl": "Reformation does not produce fast fashion products or does not produce disposable products.", "fol": "(-IsFastFashionProduct(Reformation) | -IsDisposableProduct(Reformation))", "prediction": ["all x.(Reformation(x) -> (-ProducesFastFashionProducts(x) | -ProducesDisposableProducts(x)))", "(-ProducesFastFashionProducts(Reformation) | -ProducesDisposableProducts(Reformation)))", "(all x.(Reformation(x) -> (-ProducesFastFashionProducts(x) | -ProducesDisposableProducts(x))))", "(-(Reformation(reformation) & -(FastFashionProducts(reformation) & -DisposableProducts(reformation))))", "(-(FastFashionProducts(Reformation) | DisposableProducts(Reformation)))", "all x y.((Reformation(x) & (FastFashionProduct(y) | DisposableProduct(y))) -> -Produces(x,y))", "-(Reformation(x) & (-ProducesFastFashion(x) | -ProducesDisposableProducts(x))))", "all x.(Reformation(x) -> (-ProducesFastFashionProducts(x) | -ProducesDisposableProducts(x)))", "(-ProducesFastFashionProducts(Reformation) | -ProducesDisposableProducts(Reformation)))", "(all x.(Reformation(x) -> (-ProducesFastFashionProducts(x) | -ProducesDisposableProducts(x))))", "all x.(Reformation(x) -> (-ProducesFastFashion(x) | -ProducesDisposableProducts(x)))", "all x.(Reformation(x) -> (-ProducesFastFashionProducts(x) | -ProducesDisposableProducts(x)))", "(all x.(Reformation(x) -> (-ProducesFastFashionProducts(x) | -ProducesDisposableProducts(x))))", "all x.(Reformation(x) -> (-ProducesFastFashionProducts(x) | -ProducesDisposableProducts(x)))", "all x.(Reformation(x) -> (-ProducesFastFashion(x) | -ProducesDisposable(x)))", "all x.(Reformation(x) -> (-ProducesFastFashionProducts(x) | -ProducesDisposableProducts(x)))"]}
{"id": "folio_train_1393", "nl": "If Reformation produces disposable products, then Reformation produces fast fashion products.", "fol": "(IsDisposableProduct(Reformation) -> IsFastFashionProduct(Reformation))", "prediction": ["all x.((Reformation(x) & ProducesDisposableProducts(x)) -> ProducesFastFashionProducts(x))", "(ProducesReplaceableProducts(Reformation) & ProducesFastFashionProducts(Reformation))", "all x y.((Reformation(x) & DisposableProduct(y)) -> ProducesFastFashionProducts(x,y))", "(ProducesDisposableProducts(Reformation) & ProducesFastFashionProducts(Reformation))", "all x.((Reformation(x) & ProducesDisposableProducts(x)) -> ProducesFastFashionProducts(x))", "(all x.((Reformation(x) & DisposableProducts(x)) -> FastFashionProducts(x)))", "all x.((ReformationProducesDisposableProducts(x)) -> ProducesFastFashionProducts(x))", "all x y.((Reformation(x) & DisposableProduct(y)) -> FastFashionProduct(x,y))", "all x.((Reformation(x) & DisposableProducts(x)) -> FastFashionProducts(x))", "all x.(Reformation(x) -> (ProducesDisposableProducts(x) & ProducesFastFashionProducts(x)))", "(all x.(ProducesReplaceableProducts(x) -> ProducesFastFashionProducts(x)))", "(ProducesDisposableProducts(Reformation) -> ProducesFastFashionProducts(Reformation))", "all x y.((Reformation(x) & DisposableProducts(y)) -> FastFashionProducts(x,y))", "all x.((Reformation(x) & ProducesDisposableProducts(x)) -> ProducesFastFashionProducts(x))", "all x y.((Reformation(x) & DisposableProducts(y)) -> ProducesFastFashionProducts(x,y))", "All x.(Reformation(x) -> (ProducesDisposableProducts(x) & ProducesFastFashionProducts(x)))"]}
{"id": "folio_train_1394", "nl": "If Reformation produces fast fashion products or helps slow down global warming, then Reformation produces fast fashion products.", "fol": "((IsFastFashionProduct(Reformation) | CanHelpSlowDownGlobalWarming(Reformation)) -> IsFastFashionProduct(Reformation))", "prediction": ["all x.((Reformation(x) & (ProducesFastFashionProducts(x) | SlowsGlobalWarming(x))) -> ProducesFastFashionProducts(x))", "all x y.((Reformation(x) & (ProducesFastFashionProducts(x) | SlowsGlobalWarming(x))) -> ProducesFastFashionProducts(x,y))", "(all x.((Reformation(x) & (ProducesFastFashionProducts(x) | SlowsGlobalWarming(x))) -> ProducesFastFashionProducts(x)))", "all x.((Reformation(x) & (ProducesFastFashionProducts(x) | SlowsGlobalWarming(x))) -> ProducesFastFashionProducts(x))", "(all x.(FastFashionProducts(x) | SlowsGlobalWarming(x))) -> FastFashionProducts(x))", "all x.(FastFashionProducts(x) | SlowGlobalWarming(x)) -> ReformationProducesFastFashionProducts(x))", "all x.((Reformation(x) & (ProducesFastFashion(x) | SlowsGlobalWarming(x))) -> ProducesFastFashion(x))", "all x y.((Reformation(x) & (ProducesFastFashionProducts(x) | SlowsGlobalWarming(x))) -> ProducesFastFashionProducts(x))", "all x y.((Reformation(x) & (FastFashionProducts(x) | SlowsGlobalWarming(x))) -> FastFashionProducts(x))", "(all x.((Reformation(x) & (ProducesFastFashionProducts(x) | SlowsGlobalWarming(x))) -> ProducesFastFashionProducts(x)))", "all x.((Reformation(x) & (ProducesFastFashionProducts(x) | SlowsGlobalWarming(x))) -> ProducesFastFashionProducts(x))", "All x.(ProducesFastFashion(x) | SlowsGlobalWarming(x)) -> ProducesFastFashion(x))", "all x.((Reformation(x) & (ProducesFastFashion(x) | SlowsGlobalWarming(x))) -> ProducesFastFashion(x))", "all x y.((Reformation(x) & (ProducesFastFashionProducts(x) | SlowsGlobalWarming(x))) -> ProducesFastFashionProducts(x,y))", "all x.((Reformation(x) & (ProducesFastFashionProducts(x) | SlowsGlobalWarming(x))) -> ProducesFastFashionProducts(x))", "all x.((Region(x) & (ProducesFastFashionProducts(x) | SlowsGlobalWarming(x))) -> ProducesFastFashionProducts(x))"]}
{"id": "folio_train_1395", "nl": "Roy Richardson was a cricketer for Sint Maartener, a consituent country.", "fol": "(IsCricketer(Royrichardson) & PlayedForTeam(Royrichardson,Sintmaartener) & IsConstituentCountry(Sintmaartener))", "prediction": ["all x y.((RoyRichardson(x) & SintMaartener(y)) -> Cricketer(x,y))", "Roy Richardson was cricketer for SintMaartener, a consituentCountry.", "all x.(RoyRichardson(x) -> (Cricketer(x) & ForSintMaartener(x)))", "all x y z.((RoyRichardson(x) & Cricketer(y) & SintMaartener(z)) -> CricketerFor(x,y,z))", "(Cricketer(RoyRichardson) & ForSintMaartener(Roy Richardson))", "Roy Richardson (Roy) & CricketerForSintMaartener(Roy))", "(CricketerForSintMaartener(RoyRichardson)", "(Cricketer(RoyRichardson,SintMaartener) & ConsituentCountry(RoyRichardson,SintMaartener))", "all x.(RoyRichardson(x) -> (CricketerForSintMaartener(x) & ConsituentCountry(x)))", "Roy Richardson (Roy Richardson) s CricketerForSintMaartener(RoyalCountry))", "all x y.((RoyRichardson(x) & SintMaartener(y)) -> Cricketer(x,y))", "Roy Richardson was cricketer for SintMaartener, a consituentCountry.", "(Cricker(Roy Richardson) & SintMaartener(Roy Richardson))", "all x.(RoyRichardson(x) -> CricketerForSintMaartener(x))", "(CricketerForSintMaartener(RoyRichardson)", "Roy Richardson was cricketer for SintMaartener, a consituentCountry."]}
{"id": "folio_train_1396", "nl": "Roy Richardson was a right handed batsman and medium pace bowler.", "fol": "(IsRightHandedBatsman(Royrichardson) & IsBatsman(Royrichardson) & IsMediumPaceBowler(Royrichardson))", "prediction": ["all x.(Roy Richardson(x) -> (RightHandledBatsman(x) & MediumPaceBowler(x)))", "Roy Richardson (RightHandledBatsman(Roy) & MediumPaceBowler(Roy))", "(Roy Richardson) & RightHandledBatsman(Roy Richardson) & MediumPaceBowler(Roy Richardson))", "all x.(RoyRichardson(x) -> (RightHandledBatsman(x) & MediumPaceBowler(x)))", "(Roy Richardson(Roy) & RightHandledBatsman(Roy) & MediumPaceBowler(Roy))", "(Roy Richardson,RightHandledBatsman(Roy) & MediumPaceBowler(Roy))", "Roy Richardson (RightHandledBatsman(RoyRichardson) & MediumPaceBowler(Richardson))", "Roy Richardson (RightHandedBatsman(Roy) & MediumPaceBowler(Roy))", "Roy Richardson was a right handed batsman and medium pace bowler.", "(Roy Richardson) & RightHandedBatsman(Roy Richardson) & MediumPaceBowler(Roy Richardson))", "all x.(Roy Richardson(x) -> (RightHandledBatsman(x) & MediumPaceBowler(x)))", "all x.(RoyRichardson(x) -> (RightHandledBatsman(x) & MediumPaceBowler(x)))", "(Roy Richardson(Roy) & RightHandledBatsman(Roy) & MediumPaceBowler(Roy))", "Roy Richardson was a right handed batsman and medium pace bowler.", "Roy Richardson (RightHandledBatsman(Roy) & MediumPaceBowler(Roy))", "all x.(Roy Richardson(x) -> (RightHandledBatsman(x) & MediumPaceBowler(x)))"]}
{"id": "folio_train_1397", "nl": "Roy Richardson was old when he debuted in cricket.", "fol": "(IsOld(Royrichardson) & DebutedInSport(Royrichardson,Cricket))", "prediction": ["all x.((RoyRichardson(x) & DebutedInCricket(x)) -> Old(x))", "Roy Richardson was old when he debuted in cricket.", "(Old(RoyRichardson) -> DebutedInCricket(RoyRichardson))", "all x y.((RoyRichardson(x) & Cricket(y)) -> Old(x))", "(AlreadyDebutedInCricket(RoyRichardson))", "all x.((RoyRichardson(x) & DebutedInCricket(x)) -> Old(x))", "(Old(Roy Richardson) -> DebutedInCrickets(RoyRichardson))", "-(Roy Richardson(Roy) & DebutedInCrickets(Roy)))", "Roy Richardson was old when he debuted in cricket.", "all x.((RoyRiley(x) & DebutedInCricket(x)) -> Old(x))", "Roy Richardson, aka RoyRichardson, wasold when he debutedInCrickets(Richardson,Crickets))", "(Old(RoyRichardson) -> DebutedInCricket(RoyRichardson))", "all x.((RoyRichardson(x) & DebutedInCrickets(x)) -> Old(x))", "all x y.((RoyRichardson(x) & Cricket(y)) -> Old(x))", "Roy Richardson was old when he debuted in cricket.", "Roy Richardson wasoldwhen he debuted in cricket."]}
{"id": "folio_train_1398", "nl": "Sherville Huggins dismissed Roy Richardson.", "fol": "DismissedBy(Shervillehuggins,Royrichardson)", "prediction": ["ShervilleHuggins dismissedRoy Richardson.", "All x.((ShervilleHuggins(x) & RoyRichardson(x)) -> Dismissed(x,y))", "(DismissedRoyRichardson(ShervilleHuggins))", "All x y.((ShervilleHuggins(x) & RoyRichardson(y)) -> Dismissed(x,y))", "-(ShervilleHuggins(Sherville) & RoyRichardson(Sherville))", "ShervilleHuggins dismissedRoyRichardson.", "ShervilleHughes dismissedRoyRichardson(ShervilleHughes)", "(Dismissed(ShervilleHuggins,RoyRichardson))", "All x.((ShervilleHuggins(x) & RoyRichardson(x)) -> Dismissed(x))", "(DismissedRoyRichardson(ShervilleHuggins))", "ShervilleHuggins dismissedRoy Richardson.", "ShervilleHughes dismissedRoyRichardson(ShervilleHuggins)", "ShervilleHuggins dismissedRoyRichardson(x)", "(DismissedRoyRichardson(ShervilleHuggins))", "ShervilleHuggins dismissedRoy Richardson.", "ShervilleHuggins dismissedRoyRichardson."]}
{"id": "folio_train_1399", "nl": "Sherville Huggins has never dismissed anyone playing for a constituent country.", "fol": "-exists x y.(DismissedBy(Shervillehuggins,x) & PlayedForTeam(x,y) & IsConstituentCountry(y))", "prediction": ["all x.((ShervilleHuggins(x) & -Dismissed(x)) -> PlayingForConstituentCountry(x))", "ShervilleHuggins has never dismissed anyone playing for a constituentCountry(ShervilleHuggins)", "ShervilleHuggins -(DismissedPlayingForConstituentCountry(Sherville) & -DismissedPlayingForConstituentCountry(Sherville)))", "(-Dismissed(ShervilleHuggins) -> PlayingForConstituentCountry(ShervilleHuggins))", "All x.(ShervilleHuggins(x) -> -DismissedPlayingForConstituentCountry(x))", "ShervilleHughes has never dismissed anyone playing for a constituentCountry(ShervilleHughes)", "all x y.((ShervilleHuggins(x) & Country(y)) -> -Dismissed(x,y))", "all x.((ShervilleHuggins(x) & -DismissedPlayingForConstituentCountry(x)) -> Never(x))", "(-DismissedPlayingForConstituentCountry(ShervilleHuggins))", "All x.(ShervilleHuggins(x) -> NeverDismissedPlayingForConstituentCountry(x))", "ShervilleHuggins has never dismissed anyone playing for constituentCountry(ShervilleHuggins)", "shervillehuggins.com -DismissedAnyonePlayingForConstituentCountry(her))", "All x.((ShervilleHuggins(x) & NeverDismissed(x)) -> PlayingForConstituentCountry(x))", "ShervilleHughes has never dismissed anyone playing for constituentCountry(ShervilleHughes)", "all x y.((ShervilleHuggins(x) & Country(y)) -> -Dismissed(x,y))", "(-DismissedPlayingForConstituentCountry(ShervilleHuggins))"]}
{"id": "folio_train_1400", "nl": "There are no right handed medium pace bowlers playing for Sint Maartener.", "fol": "-exists x.(IsRightHandedBatsman(x) & IsMediumPaceBowler(x) & PlayedForTeam(x,Sintmaartener))", "prediction": ["-exists x.(RightHandedMediumPaceBolter(x) & PlaysForSintMaartener(x))", "exists x.(RightHandedMediumPaceBowler(x) & PlayingForSintMaartener(x))", "-(RightHandedMediumPaceBolter(x) & PlayingForSintMaartener(x))", "there are no right handedmediumPaceBowlersPlayingForSintMaartener.", "Es gibt keinen right handedMediumPaceBowler(x) & PlayingForSintMaartener(x))", "-exists x.(RightHandedMediumPaceBowler(x) & PlaysForSintMaartener(x))", "(-rightHandedMediumPaceBolter(x) & PlayingForSintMaartener(x))", "-(RightHandedMediumPaceBowler(x) & PlayingForSintMaartener(x))", "Currently, there are no right handed medium pace bowlers playing for SintMaartener.", "(exists x.(RightHandedMediumPaceBowler(x) & PlayingForSintMaartener(x)))", "(exists x.(RightHandedMediumPaceBolter(x) & PlayedFor(x,SintMaartener)))", "there are no right handedMediumPaceBoltersPlayingForSintMaartener.", "-exists x.(RightHandedMediumPaceBolter(x) & PlaysForSintMaartener(x))", "Es gibt keinen RightHandedMediumPaceBowler(x) & PlayingForSintMaartener(x))", "-exists x.(RightHandedMediumPaceBowler(x) & PlayingForSintMaartener(x))", "-exists x.(RightHandedMediumPaceBolter(x) & PlayingForSintMaartener(x))"]}
{"id": "folio_train_1401", "nl": "To get a job at Google, you need to have a lot of work experience or a good education.", "fol": "all x.((GotJobAtGoogle(x,Google) -> HasWorkExperience(x)) | HasGoodEducation(x))", "prediction": ["all x.((GoogleJob(x) & (WorkExperience(x) | GoodEducation(x))) -> GetsJob(x))", "all x.((Job(x) & Google(x)) -> (LotOfWorkExperience(x) | GoodEducation(x)))", "all x.((GoogleJob(x) & (LotOfWorkExperience(x) | GoodEducation(x))) -> GetsJob(x))", "all x y.((GoogleJob(x) & GoogleJob(y)) -> (LotOfWorkExperience(x) | GoodEducation(x)))", "all x.(GoogleJob(x) -> (HasWorkExperience(x) | HasGoodEducation(x)))", "all x y.((GoogleJob(x) & Google(y)) -> (LotOfWorkExperience(x,y) | GoodEducation(x,y)))", "all x.(GoogleJob(x) -> (LotOfWorkExperience(x) | GoodEducation(x)))", "all x.((GoogleJob(x) & (WorkExperience(x) | GoodEducation(x))) -> JobAtGoogle(x))", "all x y.((GoogleJob(x) & GoogleJob(y)) -> (HasWorkExperience(x,y) | HasGoodEducation(x,y)))", "exists x.(Job(x) & ((WorkExperience(x) & Google(x)) | GoodEducation(x))))", "exists x.(Job(x) & ((WorkExperience(x) & -Education(x)) | (-WorkExperience(x) & Education(x)))))", "all x.(GoogleJob(x) -> ((HasWorkExperience(x) | HasGoodEducation(x)) & GetsJob(x,Google)))", "all x.((GoogleJob(x) & (LotOfWorkExperience(x) | GoodEducation(x))) -> JobsAtGoogle(x))", "(all x.(GoogleJob(x) -> (LittleWorkExperience(x) | GoodEducation(x))))", "all x y.((GoogleJob(x) & Job(y)) -> (HasWorkExperience(x,y) | GoodEducation(x,y)))", "exists x.(Job(x,Google) & ((WorkExperience(x) | GoodEducation(x))) -> Gets(x,Google)))"]}
{"id": "folio_train_1402", "nl": " All Yale graduates who submitted their resumes to Google got jobs there.", "fol": "all x.((IsYaleGraduate(x) & SubmittedResumeToGoogle(x,Google)) -> GotJobAtGoogle(x,Google))", "prediction": ["all x.((Graduate(x) & Yale(x) & submittedResumeToGoogle(x)) -> GotJobs(x))", "all x y.((Graduate(x) & Yale(y) & SubmittedResumeToGoogle(x,y)) -> GotJob(x,y))", "all x.((Graduate(x) & SubmittedResumeToGoogle(x)) -> GotJobs(x))", "all x.((Graduate(x) & Yale(x) & SubmittedResumesToGoogle(x)) -> GotJobs(x))", "all x.((YaleGraduate(x) & SubmittedResumeToGoogle(x)) -> GotJobs(x))", "(all x.((Graduate(x) & SubmittedResumesToGoogle(x)) -> GotJobs(x)))", "all x y.((Graduate(x) & Yale(y) & SubmittedResume(x,y)) -> GotJob(x,y))", "all x.((Graduate(x) & SubmittedResumesToGoogle(x)) -> GotJobs(x))", "all x y.((Graduate(x) & Yale(y) & submittedResumesToGoogle(x,y)) -> GotJobs(x,y))", "all x.((YaleGraduate(x) & SubmittedResumesToGoogle(x)) -> GotJobs(x))", "ALL TEAMS (Yale(y) & SubmittedResumesToGoogle(y,x))", "all x.((Graduate(x) & submittedResumeToGoogle(x)) -> GotJobs(x))", "all x y.((Graduate(x) & Yale(y) & SubmittedResumesToGoogle(x,y)) -> GotJobs(x,y))", "all x y.((Graduate(x) & Yale(y) & submittedResumeToGoogle(x,y)) -> GotJob(x,y))", "all x.((Graduate(x) & Yale(x) & submittedResumesToGoogle(x)) -> GotJobs(x))", "all x.((YaleGraduate(x) & submittedResumeToGoogle(x)) -> GotJobs(x))"]}
{"id": "folio_train_1403", "nl": " John has a lot of work experience.", "fol": "HasWorkExperience(John)", "prediction": ["all x.(John(x) -> LotsOfWorkExperience(x))", "John has a lot of work experience.", "(WorkExperience(John) & Lots(John))", "all x.(John(x) -> HasWorkExperience(x))", "-HasWorkExperience(John)", "John has a lot of work experience.", "(WorkExperience(John) & -WorkExperience(John))", "all x.(John(x) -> LotsOfWorkExperience(x))", "John has a lot of workExperience.", "(WorkExperience(John) & LotsOf(John,Jon))", "-HasWorkExperience(John)", "(WorkExperience(John) -> Has(John,y)))", "-LittleWorkExperience(John)", "all x.(John(x) -> HasWorkExperience(x))", "John has a lot of work experience.", "John has a lot of workexperience."]}
{"id": "folio_train_1404", "nl": " John submitted his resume to Google and got a job there.", "fol": "(SubmittedResumeToGoogle(John,Google) & GotJobAtGoogle(John,Google))", "prediction": ["all x.(John(x) -> (SubmittedResumeToGoogle(x) & GotJob(x)))", "all x y.((John(x) & Resume(y)) -> (SubmittedToGoogle(x,y) & GotJob(x,y)))", "(SubmittedResumeToGoogle(John) & GotJob(John))", "all x.((John(x) & Resume(x)) -> (SubmittedToGoogle(x) & GotJob(x)))", "(SubmittedResumeToGoogle(John) & GotJob(John))", "John submitted his resume to Google and got a job there.", "John submitted resume to Google and got job there.", "all x y.((John(x) & Resume(y)) -> (SubmittedToGoogle(x,y) & GotJob(x,y)))", "(PutsResumeToGoogle(John,Job) & GotJob(John,Job))", "(SubmittedResumeToGoogle(John,June) & GotJob(John,Job))", "all x.(John(x) -> (SubmittedResumeToGoogle(x) & GotJob(x)))", "(Jon submittedResumeToGoogle(John,June) & GotJob(John,Job))", "all x.((John(x) & Resume(x)) -> (SubmittedToGoogle(x) & GotJob(x)))", "John submitted his resume to Google and got a job there.", "John submitted resume to Google and got job there.", "all x y.((John(x) & Resume(y)) -> (SubmittedToGoogle(x,y) & GotJob(x,y)))"]}
{"id": "folio_train_1405", "nl": "John is a Yale graduate.", "fol": "IsYaleGraduate(John)", "prediction": ["(Graduate(John,Yale) & Graduate(John,Yale))", "John is Yale graduate.", "all x.((John(x) & YaleGraduate(x)) -> Graduate(x))", "(Graduate(John) & Yale(John))", "John is Yale graduate.", "John is Yale Graduate(John)", "-YaleGraduate(John)", "John is a Yale graduate.", "all x.(Jon(x) -> YaleGraduate(x))", "John is a Yale Graduate(John)", "(Graduate(John,Yale))", "(Graduate(John) & Yale(John))", "(Graduate(John,Yale) & Graduate(John,Yale))", "John is Yale graduate.", "John is a Yale graduate.", "John is Yale Graduate(John)"]}
{"id": "folio_train_1406", "nl": "No students are doctors.", "fol": "all x.(IsStudent(x) -> -IsDoctor(x))", "prediction": ["-exists x.(Student(x) & Doctor(x))", "-exists x.(Student(x) & Doctor(x))", "all x.(Student(x) -> Doctor(x))", "all x.(Student(x) -> -Doctor(x))", "(exists x.(Student(x) & Doctor(x))", "-exists x.(Student(x) & Doctor(x))", "all x.(Student(x) -> Doctor(x))", "-exists x.(Student(x) & Doctor(x))", "all x.(Student(x) -> -Doctor(x))", "all x.(Student(x) -> Doctor(x))", "-exists x.(Student(x) & Doctor(x))", "-exists x.(Student(x) & Doctor(x))", "-exists x.(Student(x) & Doctor(x))", "-exists x.(Student(x) & Doctor(x))", "-exists x.(Student(x) & Doctor(x))", "-exists x.(Student(x) & Doctor(x))"]}
{"id": "folio_train_1407", "nl": "All people taking classes are students. ", "fol": "all x.(IsTakingClass(x) -> IsStudent(x))", "prediction": ["all x.(TakesClasses(x) -> Student(x))", "all x.(TakesClass(x) -> Student(x))", "all x.(TakingClasses(x) -> Student(x))", "all x.((Person(x) & TakesClasses(x)) -> Student(x))", "(all x.(TakesClasses(x) -> Student(x))", "all x.(TakingClass(x) -> Student(x))", "all x.(TakesClasses(x) -> Student(x))", "all x y.((Person(x) & TakesClasses(x)) -> Student(y))", "all x.((Person(x) & TakesClasses(x)) -> Student(x))", "all x.(TakingClasses(x) -> Student(x))", "all x.(TakesClasses(x) -> Student(x))", "all x y.((Person(x) & TakesClasses(x)) -> Student(y))", "all x.((Person(x) & TakesClasses(x)) -> Student(x))", "all x.(TakingClass(x) -> Student(x))", "all x.(TakesClasses(x) -> Student(x))", "all x.(Person(x) -> Student(x))"]}
{"id": "folio_train_1408", "nl": "All graduate students are people taking classes. ", "fol": "all x.(IsGraduateStudent(x) -> IsTakingClass(x))", "prediction": ["all x.(GraduateStudent(x) -> TakesClasses(x))", "all x.(GraduateStudent(x) -> TakesClasses(x))", "all x y.((GraduateStudent(x) & GraduateStudent(y)) -> TakesClasses(x,y))", "all x.(GraduateStudent(x) -> TakesClasses(x))", "(all x.(GraduateStudent(x) -> PeopleTakingClasses(x))", "all x y.((GraduateStudent(x) & GraduateStudent(y)) -> TakesClasses(x,y))", "(all x.(GraduateStudent(x) -> TakesClass(x))", "all x.(GraduateStudent(x) -> TakesClasses(x))", "all x.(GraduateStudent(x) -> PeopleTakingClasses(x))", "all x.(GraduateStudent(x) -> TakesClasses(x))", "all x.(GraduateStudent(x) -> TakenClass(x))", "all x.(GraduateStudent(x) -> TakesClasses(x))", "all x.(GraduateStudent(x) -> PeopleTakingClasses(x))", "all x.(GraduateStudent(x) -> TakesClasses(x))", "all x.(GraduateStudent(x) -> PersonTakingClasses(x))", "all x.(GivingStudent(x) -> PeopleTakingClasses(x))"]}
{"id": "folio_train_1409", "nl": "All PhD students are graduate students. ", "fol": "all x.(IsPhDStudent(x) -> IsGraduateStudent(x))", "prediction": ["all x.(PhDStudent(x) -> GraduateStudent(x))", "all x.(PhDStudent(x) -> GraduateStudent(x))", "all x.((PhD Student(x) & GraduateStudent(x)) -> GraduateStudent(x))", "all x y.((PhDStudent(x) & GraduateStudent(y)) -> GraduateStudent(x))", "all x.(PhD Student(x) -> GraduateStudent(x))", "(all x.(PhDStudent(x) -> GraduateStudent(x)))", "all x.((PhDStudent(x) & GraduateStudent(x)) -> GraduateStudent(x))", "all x.(PhDStudent(x) -> GraduateStudent(x))", "(all x.(DoctoralStudent(x) -> GraduateStudent(x)))", "all x.(PhD(x) -> GraduateStudent(x))", "(all x.(PhD student(x) -> GraduateStudent(x))", "all x.(DoctoralStudent(x) -> GraduateStudent(x))", "all x.(PhD student(x) -> GraduateStudent(x))", "all x.(DoctoralStudent(x) -> GraduateStudent(x))", "all x.(DoctoralStudent(x) -> GraduateStudent(x))", "all x.(DoctoralStudent(x) -> GraduateStudent(x))"]}
{"id": "folio_train_1410", "nl": "If Joe is a graduate student or a doctor (but not both), then Joe is not a graduate student and a student.", "fol": "(((IsGraduateStudent(Joe) & -IsDoctor(Joe)) | (-IsGraduateStudent(Joe) & IsDoctor(Joe))) -> -(IsGraduateStudent(Joe) & IsStudent(Joe)))", "prediction": ["all x.((GraduateStudent(x) | Doctor(x)) -> -(GraduateStudent(x) & Student(x)))", "(-(GraduateStudent(Joe) & -Doctor(Joe)) | (-GraduateStudent(Joe) & Doctor(Joe))))", "((GraduateStudent(Joe) & -Doctor(Joe)) | (-GraduateStudent(Joe) & Doctor(Joe))))", "all x.((GraduateStudent(x) | Doctor(x)) -> (-GraduateStudent(x) & -Doctor(x)))", "all x.((GraduateStudent(x) & -Doctor(x)) -> -GraduateStudent(x) & -Doctor(x))", "(-(GraduateStudent(Joe) & -Doctor(Joe)) | (-GraduateStudent(Joe) & Doctor(Joe))))", "all x.(((GraduateStudent(x) | Doctor(x)) & -(GraduateStudent(x) & Student(x))) -> -Student(x))", "all x.((Girlfriend(x) | Doctor(x)) -> -(Girlfriend(x) & Student(x)))", "((GraduateStudent(Joe) & -Doctor(Joe)) | (-GraduateStudent(Joe) & Doctor(Joe))))", "(-(GraduateStudent(Joe) & GraduateStudent(Joe)) | Doctor(Joe)))", "all x.((GraduateStudent(x) & -Doctor(x)) -> -(GraduateStudent(x) & Student(x)))", "all x.((GraduateStudent(x) | Doctor(x)) -> -(GraduateStudent(x) & Student(x)))", "(-(GraduateStudent(Joe) & -Doctor(Joe)) & -(GraduateStudent(Joe) & Student(Joe))))", "((GraduateStudent(Joe) & -Doctor(Joe)) | (-GraduateStudent(Joe) & Doctor(Joe))))", "all x.((GraduateStudent(x) | Doctor(x)) -> (-GraduateStudent(x) & -Doctor(x)))", "all x.((GraduateStudent(x) | Doctor(x)) -> -(GraduateStudent(x) & Student(x)))"]}
{"id": "folio_train_1411", "nl": "Joe is a person taking classes.", "fol": "IsTakingClass(Joe)", "prediction": ["all x.(Joe(x) -> TakesClasses(x))", "(Person(Joe) & TakesClasses(Joe))", "(TakesClasses(Joe) & TakesClasses(Joe))", "all x.(Joe(x) -> TakesClasses(x))", "(PersonTakingClasses(Joe))", "(TakesClasses(Joe) | TakesClasses(Joe)))", "(TakingClasses(Joe) & TakesClasses(Joe))", "TakingClasses(Joe)", "(TakesClasses(Joe,Person))", "all x.(Joe(x) -> TakesClasses(x))", "all x.(Person(x) & TakesClasses(x))", "all x.((Person(x) & TakesClasses(x)) -> Joe(x))", "all x.(Joe(x) -> TakesClasses(x))", "exists x.(Person(x) & TakesClasses(x))", "all x.(Joe(x) -> TakesClasses(x))", "all x.(Joe(x) -> TakesClasses(x))"]}
{"id": "folio_train_1412", "nl": "Joe is a PhD student.", "fol": "IsPhDStudent(Joe)", "prediction": ["(PhD Student(Joe))", "all x.(PhDStudent(x) -> Joe(x))", "Joe is a PhDStudent(Joe)", "(Student(Joe) & PhD(Joe))", "((Joe) & PhDStudent(Joe)) -> PhDStudent(Joe))", "-(PhDStudent(Joe) & PhDStudent(Joe))", "Joe is PhDStudent(Joe)", "(PhD student(Joe) & PhDStudent(Joe))", "(PhD Student(Joe))", "-PhD Student(Joe,PhD)", "all x.(PhDStudent(x) -> Joe(x))", "Joe is a PhDStudent.", "(PhD student(Joe) & PhDStudent(Joe))", "all x.(PhDStudent(x) -> Joe(x))", "(PhD Student(Joe))", "(PhD Student(Joe,PhD))"]}
{"id": "folio_train_1413", "nl": "Joe is not a PhD student.", "fol": "-IsPhDStudent(Joe)", "prediction": ["(-PhD Student(Joe))", "all x.(Joe(x) -> -PhDStudent(x))", "-PhDStudent(Joe)", "(PhD Student(Joe) & -PhD Student(Joe))", "Joe is not a PhDStudent(Joe)", "-(PhD Student(Joe) & -PhD Student(Joe))", "(-PhD Student(Joe))", "all x.(Joe(x) -> -PhDStudent(x))", "Joe is not a PhDStudent(Joe)", "-PhDStudent(Joe)", "(-DoctoralStudent(Joe))", "\u2013 PhDStudent(Joe)", "-(PhD Student(Joe))", "(-PhD student(Joe))", "(-DoctoralStudent(Joe))", "\u2013 PhDStudent(Joe,x))"]}
{"id": "folio_train_1414", "nl": "Hugh Vanstone is one of the world's leading lighting designers. ", "fol": "IsLeadingLightingDesigner(HughVanstone)", "prediction": ["Hugh Vanstone is one of the world's leadingLightingDesigners(HughVanstone)", "all x.((HughVanstone(x) & LeadingLightingDesigner(x)) -> LeadingLightingDesigner(x))", "all x.((LightingDesigner(x) & HughVanstone(x)) -> Leading(x))", "HughVanstone is one of the world's leadingLightingDesigners(x)", "(LeadingLightingDesigner(HughVanstone)", "Hugh Vanstone is one of the world's leadingLightingDesigners(x)", "(LeadingLightingDesigner(HughVanstone)", "all x.((HughVanstone(x) & LightingDesigner(x)) -> Leading(x))", "-LightingDesigner(HughVanstone)", "HughVanstone is one of the world's leadingLightingDesigners(HughVanstone)", "Hugh Vanstone is one of the world's leadingLightingDesigners(HughVanstone)", "Hugh Vanstone is one of the worlds leadingLightingDesigners(HughVanstone)", "Hugh Vanstone is one of the leading lighting designers in the world.", "Hugh Vanstone, Founder & Designer(HughVanstone)", "HughVanstone is one of the world's leadingLightingDesigners(x)", "Hugh Vanstone is one of the world's leadingLightingDesigners(x)"]}
{"id": "folio_train_1415", "nl": "Hugh Vanstone is from the UK.", "fol": "IsFromUK(HughVanstone)", "prediction": ["Hugh Vanstone is from the UK.", "(UK) & HughVanstone(Hugh))", "-(HughVanstone(x) & FromUK(x))", "(HughVanstone(Hugh) & FromUK(Hugh))", "all x.(HughVanstone(x) -> FromUK(x))", "Hugh Vanstone is from the UK.", "HughVanstone is fromUK.", "(UK.) HughVanstone(Hugh)", "-(HughVanstone(x) & UK(x))", "(UK) & HughVanstone(Hugh))", "Hugh Vanstone is from UK.", "HughVanstone is from the UK.", "Hugh Vanstone is from the UK.", "HughVanstone is fromUK.", "Hugh Vanstone is from UK.", "Hugh Vanstone (UK)"]}
{"id": "folio_train_1416", "nl": "Hugh Vanstone has lit more than 160 productions.", "fol": "HasLitMoreThan160Productions(HughVanstone)", "prediction": ["Hugh Vanstone lit more than 160 productions.", "all x.(HughVanstone(x) -> LitsMoreThan(x,160))", "(LitMoreThan(HughVanstone,160))", "-LitMoreThan(HughVanstone,160)", "(LitMoreThan(HughVanstone) & MoreThan(HughVanstone))", "HughVanstone has lit more than 160 productions.", "Hugh Vanstone lit more than 160 productions.", "all x.(HughVanstone(x) -> LitsMoreThan160Productions(x))", "Hugh Vanstone has lit more than 160 productions.", "(LitMoreThan160Productions(HughVanstone)", "-LitMoreThan(HughVanstone,160)", "Hugh Vanstone lit more than 160 productions.", "HughVanstone lit more than 160 productions.", "HughVanstoneLit(x,160)", "Hugh Vanstone has lit more than 160 productions.", "Hugh Vanstone lit more than 160 productions."]}
{"id": "folio_train_1417", "nl": "Hugh Vanstone attended school where he is from. ", "fol": "AttendedSchoolInHomeCountry(HughVanstone)", "prediction": ["Hugh Vanstone attended school where he is from.", "all x.(HughVanstone(x) -> AttendsSchool(x))", "(AttendedSchool(HughVanstone) & From(HughVanstone))", "all x y.((HughVanstone(x) & School(y)) -> Attends(x,y))", "-(HughVanstone(x) & AttendsSchool(x)))", "(HughVanstone(Hugh) & AttendsSchool(Hugh))", "Hugh Vanstone attended school where he is from.", "all x.(HughVanstone(x) -> AttendsSchool(x))", "(AttendedSchool(HughVanstone) & From(HughVanstone))", "-(HughVanstone(h) & School(w))", "(all x.(HughVanstone(x) -> AttendsSchool(x,y)))", "Hugh Vanstone attended school where he is from.", "all x.(HughVanstone(x) -> AttendsSchool(x))", "(AttendedSchool(HughVanstone) & From(HughVanstone))", "Hugh Vanstone attended school where he is from.", "Hugh Vanstone attended school where he is from."]}
{"id": "folio_train_1418", "nl": "Hugh Vanstone is one of the world's leading ligting designers and from the uk", "fol": "(IsLeadingLightingDesigner(HughVanstone) & IsFromUK(HughVanstone))", "prediction": ["all x.(HughVanstone(x) -> (LeadingLitigtingDesigner(x) & FromUK(x)))", "Hugh Vanstone is one of the world's leading ligtingdesigners and from the uk.", "all x y.((HughVanstone(x) & Designer(y)) -> (Leading(x,y) & FromUK(x)))", "all x.((HughVanstone(x) & LeadingLitigtingDesigner(x) & FromUK(x)) -> (LitigtingDesigner(x) & FromUK(x)))", "(LeadingLitigtingDesigner(HughVanstone) & FromUK(HughVanstone))", "(LivingDesigner(HughVanstone) & FromUK(HughVanstone))", "(LeadingDesigner(HughVanstone) & FromUK(HughVanstone) & HughVanstone(HughVanstone))", "all x y.((LitigtingDesigner(x) & HughVanstone(y)) -> (LeadsWorld(x,y) & FromUK(y)))", "Hugh Vanstone, litigtingDesigner(x) & fromUK(x))", "Hugh Vanstone (LitigtingDesigner(x) & FromUK(x))", "Founded in 1890, Hugh Vanstone is one of the world's leading ligtingdesigners and from the uk.", "Hugh Vanstone is one of the world's leading ligtingdesigners and from the uk.", "HughVanstone is one of the world's leadingLitigtingDesigners and from the UK.", "Hugh Vanstone is one of the leading ligtingdesigners and from the uk.", "Hugh Vanstone, litigtingDesigner(h) & FromUK(h) & Leading(h) & From(h) & From(h))", "(LeadingLitigtingDesigner(HughVanstone) & FromUK(HughVanstone)"]}
{"id": "folio_train_1419", "nl": "Hugh Vanstone has lit 170 productions.", "fol": "LitProductions(HughVanstone,170)", "prediction": ["Hugh Vanstone has lit 170 productions.", "HughVanstone has lit 170 productions.", "(Lit(HughVanstone,180) & Production(HughVanstone,180))", "Hugh Vanstone has lit 170 productions.", "-Lit(HughVanstone,180)", "(Lit(HughVanstone) & HasLit(HughVanstone,180))", "(Lit(HughVanstone,180) -> Produced(HughVanstone,180))", "HughVanstone has lit 170 productions.", "-Lit(HughVanstone,170)", "Hugh Vanstone has lit 170 productions.", "(Lit(HughVanstone) -> 170Productions(HughVanstone))", "Hugh Vanstone lit 170 productions.", "HughVanstone has lit170 productions.", "Hugh Vanstone has lit 170 productions.", "HughVanstone has lit 170 productions.", "Hugh Vanstone has lit 170 productions."]}
{"id": "folio_train_1420", "nl": "Hugh Vanstone attended school in the US.", "fol": "AttendedSchoolIn(HughVanstone,US)", "prediction": ["Hugh Vanstone attended school in the US.", "all x.(HughVanstone(x) -> AttendedSchoolInUS(x))", "(AttendedSchool(HughVanstone,US))", "-(HughVanstone(x) & AttendedSchool(x)))", "all x y.((HughVanstone(x) & School(y)) -> Attends(x,y))", "Hugh Vanstone attended school in the US.", "(AttendedSchool(HughVanstone) & In(HughVanstone,US))", "all x.(HughVanstone(x) -> AttendsSchoolInUS(x))", "(AttendedSchoolIn(HughVanstone,US))", "-(HughVanstone(h) & AttendedSchool(h)))", "Hugh Vanstone attended school in the US.", "Hugh Vanstone attendedschoolIn(HughVanstone,US)", "(AttendedSchool(HughVanstone,US))", "Hugh Vanstone attended school in the US.", "Hugh Vanstone attended school in the US.", "Hugh Vanstone attended school in the US."]}
{"id": "folio_train_1421", "nl": "No man can run faster than Bolt. ", "fol": "all x.(IsMan(x) -> -CanRunFasterThanBolt(x))", "prediction": ["-exists x.(Man(x) & RunsFaster(x,Bolt))", "KeenManCanRunFasterThanBolt(x)", "all x.(Man(x) -> RunsFasterThanBolt(x))", "NoManCanRunFasterThanBolt(x)", "KeenMan(x) & RunsFasterThanBolt(x))", "-exists x.(Man(x) & RunsFaster(x,Bolt))", "KeenManCanRunFasterThanBolt(x)", "KeenManMan(ke) & RunsFasterThanBolt(ke))", "NoManCanRunFasterThanBolt(x)", "-exists x.(Man(x) & RunsFaster(x,bolt))", "-exists x.(Man(x) & Bolt(x))", "KeenManCanRunFasterThanBolt(x)", "-exists x.(Men(x) & RunsFaster(x,Bolt))", "-exists x.(Man(x) & CanRunFaster(x,Bolt))", "-exists x.(Man(x) & RunsFaster(x,Bolt))", "-exists x.(Man(x) & Bolt(x))"]}
{"id": "folio_train_1422", "nl": "Superman is not a man.", "fol": "-IsMan(Superman)", "prediction": ["all x.(Superman(x) -> -Man(x))", "(Man(Superman) & -Man(Superman))", "(-Man(Superman))", "all x.(Superman(x) -> -Man(x))", "(all x.(Superman(x) -> -Man(x)))", "(Man(Superman) & -Man(Superman))", "(-Man(Superman))", "all x.(Superman(x) -> -Man(x))", "-Man(Superman)", "all x.(Superman(x) -> -Man(x))", "-Man(Superman)", "all x.(Superman(x) -> -Man(x))", "all x.(Superman(x) -> -Man(x))", "All x.(Superman(x) -> -Man(x))", "all x.(Superman(x) -> -Man(x))", "all x.(Superman(x) -> -Man(x))"]}
{"id": "folio_train_1423", "nl": "Superman can run faster than Bolt.", "fol": "FasterThan(Superman,Bolt)", "prediction": ["all x y.((Superman(x) & Bolt(y)) -> RunsFaster(x,y))", "all x.(Superman(x) -> RunsFasterThanBolt(x))", "(RunsFasterThanBolt(Superman))", "all x y.((Superman(x) & Bolt(y)) -> CanRunFaster(x,y))", "all x y z.((Superman(x) & Bolt(y) & Bolt(z)) -> CanRunFaster(x,y,z))", "(RunsFasterThanBolt(Superman))", "all x.(Superman(x) -> RunsFasterThanBolt(x))", "All x.(Superman(x) -> CanRunFasterThanBolt(x))", "all x y.((Superman(x) & Bolt(y)) -> RunsFaster(x,y))", "(RunsFasterThan(Superman,Bolt))", "(RunsFasterThanBolt(Superman))", "All x.(Superman(x) -> RunsFasterThanBolt(x))", "all x y.((Superman(x) & Bolt(y)) -> CanRunFaster(x,y))", "All x.(Superman(x) -> RunsFasterThan(x,Bolt))", "All x.(Superman(x) -> CanRunFasterThanBolt(x))", "all x y.((Superman(x) & Bolt(y)) -> RunsFaster(x,y))"]}
{"id": "folio_train_1424", "nl": "Donald Ervin Knuth is an American computer scientist, mathematician, and Professor Emeritus at Stanford University.", "fol": "(IsAmericanScientist(DonaldErvinKnuth) & IsMathematician(DonaldErvinKnuth) & IsProfessorEmeritusAtStanford(DonaldErvinKnuth))", "prediction": ["Donald ErvinKnuth (AmericanComputerScientist(e) & Mathematician(e) & ProfessorEmeritus(e) & StanfordUniversity(e))", "(AmericanComputerScientist(DonaldErvinKnuth) & Mathematician(DonaldErvinKnuth) & ProfessorEmeritusAtStanfordUniversity(DonaldErvinKnuth))", "(Associate(DonaldErvinKnuth) & ComputerScientist(DonaldErvinKnuth) & Mathematician(DonaldErvinKnuth) & ProfessorEmeritus(DonaldErvinKnuth,StanfordUniversity))", "DonaldErvinKnuth((AmericanComputerScientist(x) & Mathematician(x) & ProfessorEmeritus(x))", "DonaldErvinKnuth(n) & AmericanComputerScientist(n) & Mathematician(n) & ProfessorEmeritusAtStanfordUniversity(n))", "Donald Ervin Knuth (AmericanComputerScientist(k) & Mathematician(k) & ProfessorEmeritusAtStanfordUniversity(k))", "(AmericanComputerScientist(DonaldErvinKnuth) & Mathematician(DonaldErvinKnuth) & ProfessorEmeritusAtStanfordUniversity(DonaldErvinKnuth))", "(AmericanComputerScientist(DonaldErvinKnuth) & AmericanMathematician(DonaldErvinKnuth) & ProfessorEmeritusAtStanfordUniversity(DonaldErvinKnuth))", "Donald Ervin Knuth (AUS) & ComputerScientist(a) & Mathematician(b) & ProfessorEmeritus(c) & StanfordUniversity(d))", "DonaldErvinKnuth(e) & AmericanComputerScientist(e) & Mathematician(e) & ProfessorEmeritusAtStanfordUniversity(e))", "DonaldErvinKnuth(a) & ComputerScientist(a) & Mathematician(a) & ProfessorEmeritusAtStanfordUniversity(a))", "Donald Ervin Knuth (AmericanComputerScientist(k) & Mathematician(k) & ProfessorEmeritus(k))", "(AmericanComputerScientist(DonaldErvinKnuth) & AmericanMathematician(DonaldErvinKnuth) & ProfessorEmeritus(DonaldErvinKnuth,StanfordUniversity))", "(AmericanComputerScientist(DonaldErvinKnuth) & Mathematician(DonaldErvinKnuth) & ProfessorEmeritusAtStanfordUniversity(DonaldErvinKnuth))", "Donald Ervin Knuth (AmericanComputerScientist(e) & Mathematician(e) & ProfessorEmeritusAtStanfordUniversity(e))", "Donald Ervin Knuth (AmericanComputerScientist(n) & Mathematician(n) & ProfessorEmeritus(n))"]}
{"id": "folio_train_1425", "nl": "Knuth has been called the \"father of the analysis of algorithms\".", "fol": "HasTitle(DonaldErvinKnuth,FatherOfTheAnalysisOfAlgorithms)", "prediction": ["all x.(Knuth(x) -> FatherOfAlgorithms(x))", "Knuth has been called the \"fatherOfAlgorithms(k)\"", "(FatherOfAlgorithms(Knuth))", "(fatherOfAlgorithms(Knuth) & FatherOfAlgorithms(Knuth))", "Knuth has been called the \"fatherOfAlgorithms(k) & AnalyzesAlgorithms(k))", "-FatherOfAlgorithms(Knuth,Algorithms)", "-(FatherOfAlgorithms(Knuth))", "Knuth is the \"fatherOfAlgorithms(k)\"", "(FatherOfAlgorithms(Knuth) & FatherOfAlgorithms(Knuth))", "Knuth has been called \"fatherOfAlgorithms(k) & AnalyzesAlgorithms(k))", "Knuth has been called the \"fatherOfAlgorithms(Knuth)\"", "(PastorOfAlgorithms(Knuth))", "Knuth is the \"fatherOfAlgorithms(k)\"", "Knuth is a renowned algorithmic analyst and a father of algorithms.", "\"FatherOfAlgorithms\" -Knuth.", "Knuth (FatherOfAlgorithms))"]}
{"id": "folio_train_1426", "nl": "An American scientist has been called the \"father of the analysis of algorithms\".", "fol": "exists x.(IsAmericanScientist(x) & HasTitle(x,FatherOfTheAnalysisOfAlgorithms))", "prediction": ["all x.(AmericanScientist(x) -> FatherOfAlgorithms(x))", "all x.((AmericanScientist(x) & FatherOfAlgorithms(x)) -> Analyzes(x,algorithms))", "all x y.((AmericanScientist(x) & AnalyzesAlgorithms(y)) -> FatherOf(x,y))", "(FatherOfAlgorithms(AmericanScientist))", "all x.(AmericanScientist(x) -> FatherOfAlgorithms(x))", "all x y z.((AmericanScientist(x) & AnalyzesAlgorithms(y) & Algorithms(z)) -> FatherOf(x,y,z))", "all x y.((AmericanScientist(x) & Algorithm(y)) -> FatherOfAnalysis(x,y))", "all x.((AmericanScientist(x) & FatherOfAlgorithms(x)) -> AnalyzesAlgorithms(x))", "(FatherOfAlgorithms(AmericanScientist))", "all x.(AmericanScientist(x) -> FatherOfAlgorithms(x))", "all x y.((AmericanScientist(x) & AmericanScientist(y)) -> FatherOfAlgorithms(x,y))", "all x.(AmericanScientist(x) -> FatherOfAlgorithms(x))", "(FatherOfAlgorithms(AmericanScientist))", "all x.((AmericanScientist(x) & FatherOfAlgorithms(x)) -> AnalyzesAlgorithms(x))", "all x.(AmericanScientist(x) -> FatherOfAlgorithms(x))", "exists x.(AmericanScientist(x) & FatherOfAlgorithmAnalysis(x))"]}
{"id": "folio_train_1427", "nl": "A mathematician has been called the \"father of the analysis of algorithms\".", "fol": "exists x.(IsMathematician(x) & HasTitle(x,FatherOfTheAnalysisOfAlgorithms))", "prediction": ["all x.(Mathematician(x) -> FatherOfAlgorithms(x))", "all x.(Mathematician(x) -> FatherOfAlgorithms(x))", "all x y.((Mathematician(x) & Algorithm(y)) -> FatherOfAnalysis(x,y))", "all x y.((Mathematician(x) & Algorithm(y)) -> FatherOfAnalysis(x,y))", "all x.(Mathematician(x) -> FatherOfAlgorithms(x))", "(fatherOfAlgorithms(mathematician))", "all x.(Mathematician(x) -> FatherOfAlgorithms(x))", "all x.((Mathematician(x) & AnalyzesAlgorithms(x)) -> FatherOfAlgorithms(x))", "all x y z.((Mathematician(x) & AlgorithmAnalysis(y) & Analyzes(z,y)) -> FatherOf(x,z))", "all x y.((Mathematician(x) & Algorithm(y)) -> FatherOfAnalysis(x,y))", "all x y.((Mathematician(x) & Algorithm(y)) -> FatherOfAnalysis(x,y))", "all x.(Mathematician(x) -> FatherOfAlgorithms(x))", "all x.(Mathematician(x) -> FatherOfAlgorithms(x))", "all x.(Mathematician(x) -> FatherOfAlgorithms(x))", "exists x.(Mathematician(x) & FatherOfAlgorithms(x))", "exists x.(Mathematician(x) & FatherOfAlgorithms(x))"]}
{"id": "folio_train_1428", "nl": "Donald Knuth is a well-known figure in the field of artificial intelligence .", "fol": "WellKnownFigure(DonaldErvinKnuth,FieldOfArtificialIntelligence)", "prediction": ["all x.((DonaldKnuth(x) & ArtificialIntelligence(x)) -> WellKnownFigure(x))", "all x y.((DonaldKnuth(x) & ArtificialIntelligence(y)) -> WellKnownFigure(x,y))", "Donald Knuth (*) is well-known figure in the field of ArtificialIntelligence (AI))", "(WellKnown(DonaldKnuth) & ArtificialIntelligence(DonaldKnuth))", "(WellKnownFigureInArtificialIntelligence(DonaldKnuth))", "all x.(DonaldKnuth(x) -> WellKnownFigureInArtificialIntelligence(x))", "DonaldKnuth (exists x.(ArtificialIntelligence(x) & WellKnown(x)))", "all x.(DonaldKnuth(x) -> (WellKnownFigureInArtificialIntelligence(x) & WellKnownFigureInArtificialIntelligence(x)))", "DonaldKnuth (or DonaldKnuth(x)) -> WellKnownInArtificialIntelligence(x))", "Donald Knuth is well-known figure in the field of artificial intelligence.", "Donald Knuth is a well-known figure in the field of ArtificialIntelligence.", "DonaldKnuth (*) & WellKnownInArtificialIntelligence(x))", "all x.(DuncanKnuth(x) -> (WellKnownFigure(x) & ArtificialIntelligence(x)))", "(WellKnownFigureInArtificialIntelligence(DonaldKnuth))", "(WellKnown(DonaldKnuth) & ArtificialIntelligence(DonaldKnuth))", "Donald Knuth is well-known figure in the field of artificial intelligence."]}
{"id": "folio_train_1429", "nl": "Neocrepidodera Corpulentas are flea beetles or moths.", "fol": "(IsFleaBeetle(Neocrepidoderacorpulenta) | IsMoth(Neocrepidoderacorpulenta))", "prediction": ["all x.(NeocrepidoderaCorpusulentas(x) -> (FleaBeetle(x) | Moth(x)))", "(FlyBeetle(Neocrepidodera) | Moth(Neocrepidodera))", "(FleaBeetle(Neocrepidodera) | Moth(Neocrepidodera))", "all x.(NeocrepidoderaCorpusulentas(x) -> (FlyBeetle(x) | Moth(x)))", "Neocrepidodera Corpulentas (FlyBeetle(x) | Moth(x)))", "all x y.((Neocrepidodera(x) & Corpulenta(y)) -> (FleaBeetle(x,y) | Moth(x,y)))", "all x.((Neocrepidodera Corpulentas(x)) -> (FleaBeetle(x) | Moth(x)))", "(FlyBeetle(neocrepidodera) | FlyMoth(neocrepidodera))", "all x.(NeocrepidoderaCorpusulentas(x) -> (FleaBeetle(x) | Moth(x)))", "(FleaBeetle(Neocrepidodera) | Moth(Neocrepidodera))", "all x y.((FleaBeetle(x) | Moth(y)) -> Neocrepidodera Corpulentas(x,y))", "all x.(Neocrepidodera Corpulentas(x) -> (FleaBeetle(x) | Moth(x)))", "all x.(NeocrepidoderaCorpustulas(x) -> (Feetle(x) | Moth(x)))", "all x.(NoxcrepidoderaCorpusulentas(x) -> (FlyBeetle(x) | Moth(x)))", "all x.((Neocrepidodera Corpulentas(x)) -> (FlyBeetle(x) | Moth(x)))", "All x.(NeocrepidoderaCorpustula(x) -> (FleaBeetle(x) | Moth(x)))"]}
{"id": "folio_train_1430", "nl": "The species Neocrepidodera Corpulenta is in the Chrysomelidae family.", "fol": "(IsSpecies(Neocrepidoderacorpulenta) & BelongsToFamily(Chrysomelidae) & IsInFamily(Neocrepidoderacorpulenta,Chrysomelidae))", "prediction": ["all x.(NeocrepidoderaCorpusulenta(x) -> InChrysomelidaeFamily(x))", "(exists x.(NeocrepidoderaCorpusulenta(x) & InChrysomelidaeFamily(x)))", "(InChrysomelidae(Neocrepidodera Corpulenta) & InChrysomelidae(Neocrepidodera Corpulenta))", "all x.((Species(x) & NeocrepidoderaCorpusulenta(x)) -> Chrysomelidae(x))", "the species Neocrepidodera Corpulenta is in the Chrysomelidae family.", "all x y.((Species(x) & NeocrepidoderaCorpusulenta(x)) -> Chrysomelidae(y))", "(Neocrepidodera Corpulenta) & InChrysomelidae(Neocrepidodera,Corpustula))", "(all x.(NeocrepidoderaCorpusulenta(x) -> Chrysomelidae(x)))", "all x.(NeocrepidoderaCorpusulenta(x) -> InChrysomelidaeFamily(x))", "(Chrysomelidae) & Neocrepidodera Corpulenta(Neocrepidodera))", "all x.(NeocrepidoderaCorpusulenta(x) -> Chrysomelidae(x))", "all x y.((Species(x) & Neocrepidodera Corpulenta(x)) -> Chrysomelidae(y))", "all x.((Species(x) & Neocrepidodera Corpulenta(x)) -> Chrysomelidae(x))", "all x.(Neocrepidodera Corpulenta(x) -> InChrysomelidaeFamily(x))", "all x.(NeocrepidoderaCorpulenta(x) -> InChrysomelidaeFamily(x))", "All x.(NeocrepidoderaCorpusulenta(x) -> Chrysomelidae(x))"]}
{"id": "folio_train_1431", "nl": "There are no moths within the Chrysomelidae family.", "fol": "all x.((IsInFamily(x,Chrysomelidae) & BelongsToFamily(Chrysomelidae)) -> -IsMoth(x))", "prediction": ["-exists x.(Moth(x) & WithinChrysomelidaeFamily(x))", "all x.(Moth(x) -> -exists y.(ChrysomelidaeFamily(y) & Within(x,y)))", "there are no moths within the Chrysomelidae family.", "-exists x.(Moth(x) & WithinChrysomelidae(x))", "(-Moth(Crysomelidae) & WithinCrysomelidaeFamily(Crysomolidae))", "(Moths(x) | WithinChrysomelidaeFamily(x)))", "all x.(Moth(x) -> -Crysomelidae(x))", "exists x.(Moth(x) & -Chrysomelidae(x))", "-exists x.(Moth(x) & WithinChrysomelidaeFamily(x))", "(exists x.(Moth(x) & WithinChrysomelidae(x)))", "-exists x.(Moth(x) & WithinCyssomelidaeFamily(x))", "all x.(Moth(x) -> -InChrysomelidaeFamily(x))", "exists x.(Moth(x) & -Cysomolidae(x))", "-exists x.(Moth(x) & WithinChrysomelidae(x))", "-exists x.(Moth(x) & WithinCysomolidaeFamily(x))", "-exists x.(Moth(x) & InChrysomelidae(x))"]}
{"id": "folio_train_1432", "nl": "There is a flea beetle within the Chrysomelidae family.", "fol": "exists x.(IsFleaBeetle(x) & IsInFamily(x,Chrysomelidae))", "prediction": ["exists x.(FlyBeetle(x) & WithinChrysomelidaeFamily(x))", "exists x.(FleaBeetle(x) & WithinChrysomelidaeFamily(x))", "all x y.((FlyBeetle(x) & ChrysomelidaeFamily(y)) -> WithinFamily(x,y))", "all x y.((FleaBeetle(x) & ChrysomelidaeFamily(y)) -> WithinFamily(x,y))", "exists x.(FlyBeetle(x) & WithinChrysomelidaeFamily(x))", "all x y z.((FlyBeetle(x) & ChrysomelidaeFamily(y) & Family(z)) -> Within(x,y,z))", "exists x.(Feetle(x) & WithinChrysomelidaeFamily(x))", "exists x.(FleaBeetle(x) & WithinChrysomelidaeFamily(x))", "all x y.((FlyBeetle(x) & ChrysomelidaeFamily(y)) -> Within(x,y))", "all x y.((FleaBeetle(x) & ChrysomelidaeFamily(y)) -> Within(x,y))", "exists x.(FlyBeetle(x) & WithinChrysomelidaeFamily(x))", "exists x.(FlyBeetle(x) & WithinCysomolidaeFamily(x))", "exists x.(Feetle(x) & WithinChrysomelidaeFamily(x))", "exists x.(FleaBeetle(x) & WithinChrysomelidaeFamily(x))", "exists x.(FlyBeetle(x) & WithinChrysomelidaeFamily(x))", "exists x.(FloodBeetle(x) & WithinChrysomelidaeFamily(x))"]}
{"id": "folio_train_1433", "nl": "There are no flea beetles within the Chrysomelidae family.", "fol": "all x.((IsInFamily(x,Chrysomelidae) & BelongsToFamily(Chrysomelidae)) -> -IsFleaBeetle(x))", "prediction": ["-exists x.(FlyBeetle(x) & WithinChrysomelidaeFamily(x))", "all x.(FlyBeetle(x) -> -exists y.(ChrysomelidaeFamily(y) & Within(x,y)))", "(exists x.(FlyBeetle(x) & WithinChrysomelidaeFamily(x)) & -exists y.(FlyBeetle(y) & WithinChrysomelidaeFamily(y))))", "there are no fleaBeetles within the Chrysomelidae family.", "all x.(FleaBeetle(x) -> -exists y.(ChrysomelidaeFamily(y) & Within(x,y)))", "-exists x.(FleaBeetle(x) & WithinChrysomelidaeFamily(x))", "all x.((FlyBeetle(x) & WithinChrysomelidaeFamily(x)) -> -exists y.(FlyBeetle(y) & WithinChrysomelidaeFamily(x,y)))", "all x.(FlyBeetle(x) -> -exists y.(ChrysomelidaeFamily(y) & WithinFamily(x,y)))", "-exists x.(FlyBeetle(x) & WithinChrysomelidaeFamily(x))", "(-FlyBeetle(Chrysomelidae))", "exists x.(FlyBeetle(x) & -Family(x))", "-exists x.(FleaBeetle(x) & WithinChrysomelidaeFamily(x))", "-exists x.(FlyBeetle(x) & WithinChrysomelidae(x))", "exists x.(FlyBeetle(x) & -Family(x))", "-exists x.(FleaBeetle(x) & WithinChrysomelidaeFamily(x))", "-exists x.(FlyBeetle(x) & WithinChrysomelidaeFamily(x))"]}
{"id": "folio_train_1434", "nl": "Carrozzeria Colli is a Milanese coachbuilder company that was established by Giuseppe Colli in 1931.", "fol": "(IsMilaneseCoachbuilder(Carrozzeriacolli) & IsCompany(Carrozzeriacolli) & EstablishedByPerson(Carrozzeriacolli,Giuseppecolli) & EstablishedInYear(Carrozzeriacolli,Y1901))", "prediction": ["all x.(CarrolozzeriaColli(x) -> (MilaneseCoachbuilderCompany(x) & EstablishedByGiuseppeColli(x) & EstablishedIn1931(x)))", "(MilaneseCoachbuilderCompany(CarrolozzeriaColli) & EstablishedByGiuseppeColliIn1931(CarrolozzeriaColli))", "CarrozzeriaColli (CastbuilderCompany(Milan) & EstablishedByGiuseppeColliIn1931)", "(exists x.(CarrolozzeriaColli(x) & MilaneseCoachbuilderCompany(x) & EstablishedBy(x,GiuseppeColli,1931)))", "all x.((CarrolozzeriaColli(x) & MilaneseCoachbuilderCompany(x) & EstablishedByGiuseppeColli(x) & EstablishedIn1931(x)) -> CarrozzeriaColli(x))", "(CastlebuilderCompany(Carroli,1931) & EstablishedByGiuseppeColli(Carroli,1931))", "all x y.((CarrolozzeriaColli(x) & MilaneseCoachbuilder(y) & EstablishedBy(x,y)) -> GiuseppeColli(x))", "all x y.((Carroli(x) & MilaneseCoachbuilderCompany(y) & EstablishedBy(x,y) & GiuseppeColli(x)) -> CarrozzeriaColli(x))", "all x.(CarrozzeriaColli(x) -> (MilaneseCoachbuilderCompany(x) & EstablishedByGiuseppeColli(x) & EstablishedIn1931(x)))", "(CabinetbuilderCompany(CarrolozzeriaColli) & Milanese(CarrolozzeriaColli) & EstablishedByGiuseppeColliIn1931(CarrolozzeriaColli))", "(MilaneseCoachbuilderCompany(CarrolozzeriaColli) & EstablishedByGiuseppeColli(CarrolozzeriaColli,1931))", "all x.(CarrolozzeriaColli(x) -> (MilaneseCoachbuilderCompany(x) & EstablishedByGiuseppeColliIn1931(x)))", "all x y.((CarrozzeriaColli(x) & MilaneseCoachbuilder(y) & EstablishedByGiuseppeColli(x,y)) -> EstablishedIn1931(x,y))", "all x.(CarrolozzeriaColli(x) -> (MilaneseCastbuilderCompany(x) & EstablishedByGiuseppeColli(x) & EstablishedIn1931(x)))", "all x.(CarrozzeriaColli(x) -> (MilaneseCoachbuilderCompany(x) & EstablishedByGiuseppeColli(x,1931)))", "all x.(CarrozzeriaColli(x) -> (MannaeseCoachbuilderCompany(x) & EstablishedByGiuseppeColli(x) & In1931(x)))"]}
{"id": "folio_train_1435", "nl": "Carrozzeria Colli is a company that specialized in using aluminum.", "fol": "SpecializesIn(Carrozzeriacolli,Usingaluminum)", "prediction": ["all x.(CarrolozzeriaColli(x) -> SpecializedInAluminum(x))", "all x.(CarrolozzeriaColi(x) -> SpecializedInAluminum(x))", "all x y.((CarrolozzeriaColli(x) & Aluminum(y)) -> SpecializedIn(x,y))", "(SpecializedInAluminum(CarrolozzeriaColli))", "all x.((Company(x) & SpecializedInAluminum(x)) -> CarrozzeriaColli(x))", "(SpecializingInAluminum(CarrolozzeriaColli))", "all x.(CarroceriaColli(x) -> (SpecializedInAluminum(x) & UsesAluminum(x)))", "all x y.((Company(x) & CarrozzeriaColli(y)) -> SpecializedInAluminum(x,y))", "all x y.((CarrolzzeriaColli(x) & Aluminum(y)) -> SpecializedIn(x,y))", "(Company(carroli) & SpecializedInAluminum(carroli))", "all x.(CarrozzeriaColli(x) -> SpecializedInAluminum(x))", "all x.(CarrolzzeriaColli(x) -> SpecializedInAluminum(x))", "all x y.((CarrozzeriaColli(x) & Aluminum(y)) -> SpecializedIn(x,y))", "all x.(CarrozzeriaColli(x) -> SpecializedInUsingAluminum(x))", "All x.(CroceriaColli(x) -> SpecializedInAluminum(x))", "All x.(CarrozzeriaColi(x) -> SpecializedInAluminum(x))"]}
{"id": "folio_train_1436", "nl": "The first automobiles built by Carrozzeria Colli were racing cars.", "fol": "all x.(FirstAutomobilesByCompany(x,Carrozzeriacolli) -> IsRacingCar(x))", "prediction": ["all x.((CarrolozzeriaColli(x) & FirstAutomobile(x)) -> RacingCar(x))", "all x.((Automobile(x) & BuiltByCarrolozzeriaColli(x)) -> RacingCar(x))", "all x y.((CarrolozzeriaColli(x) & Automobile(y)) -> RaceCar(x,y))", "all x.((CarrolozzeriaColli(x) & BuiltBy(x,Carrolozzeria)) -> RaceCar(x))", "all x.((Automobile(x) & CarrozzeriaColli(x)) -> RacingCar(x))", "all x y z.((CarrolozzeriaColli(x) & Automobile(y) & Car(z) & BuiltBy(x,y)) -> RaceCar(y))", "all x y.((CarrolzzeriaColli(x) & Automobile(y)) -> RaceCar(x,y))", "all x y.((CarrosseriaColli(x) & Car(y)) -> RaceCar(x,y))", "(RaceCars) & Cars(car) & BuiltByCarroleriaColli(car))", "all x.(CarrolozzeriaColli(x) -> (RaceCar(x) | RaceCar(x)))", "all x y.((Automobile(x) & CarrozzeriaColli(y)) -> RaceCar(x,y))", "all x.((CarrosseriaColli(x) & FirstAutomobile(x)) -> RacingCar(x))", "(all x.(CarrozzeriaColli(x) -> RaceCar(x)))", "All x.(CarrosseriaColli(x) -> RaceCar(x))", "All x.(CarrolozzeriaColli(x) -> RaceCar(x))", "all x y.((CarrozzeriaColli(x) & Car(y)) -> Racecar(x,y))"]}
{"id": "folio_train_1437", "nl": "Some racing cars built by Carrozzeria Colli used Fiat 1100 mechanicals and chasis.", "fol": "exists x.(IsRacingCar(x) & BuiltByCompany(x,Carrozzeriacolli) & UsesComponents(x,Fiat110mechanicals) & UsesComponents(x,Chasis))", "prediction": ["exists x.(RacingCar(x) & BuiltByCarrolozzeriaColli(x) & Fiat1100Mechanicals(x) & Chasis(x))", "all x y.((RacingCar(x) & CarrozzeriaColli(y)) -> (UsedFiat1100Mechanicals(x) & UsedChassis(x)))", "exists x.(RacingCar(x) & BuiltByCarrolozzeriaColli(x) & UsesFiat1100Mechanicals(x) & UsesChassis(x))", "exists x.(Car(x) & BuiltByCar(x,CarrolozzeriaColli) & Fiat1100Mechanicals(x) & Chasis(x))", "exists x.(RacingCar(x) & BuiltByCarrosseriaColli(x) & Fiat1100Mechanicals(x) & Chasis(x))", "(exists x.(RacingCar(x) & BuiltByCarrolozzeriaColli(x)) & Fiat1100Mechanicals(x) & Chasis(x))", "exists x.(Racecar(x) & BuiltByCarrolozzeriaColli(x) & UsesFiat1100Mechanicals(x) & UsesChassis(x))", "all x y.((Car(x) & CarrozzeriaColli(y)) -> (UsedFiatMechanicals(x,y) & UsedChassis(x,y)))", "all x y z.((RacingCar(x) & CarrozzeriaColli(y) & Fiat(z)) -> (UsedMechanicals(z,x) & UsedChassis(z,y)))", "all x y z.((Racecar(x) & Car(y) & Car(z) & BuiltByCarrolozzeriaColli(y) & Fiat1100Mechanicals(z) & Chasis(z)) -> Used(x,y,z))", "all x y.((RacingCar(x) & CarrozzeriaColli(y)) -> (UsedFiatMechanicals(x,y) & UsedChasis(x,y)))", "exists x.(RacingCar(x) & CarrozzeriaColli(x) & Fiat1100Mechanicals(x) & Chasis(x))", "(exists x.(RacingCar(x) & BuiltByCarrolozzeriaColli(x)) & Fiat1100Mechanicals(x) & Chasis(x))", "exists x.(Car(x) & BuiltByCar(x,CarrolozzeriaColli) & Fiat(x,1100) & Mechanicals(x,100) & Chasis(x,100))", "exists x.(Car(x) & BuiltBy(x,CarrolozzeriaColli) & Fiat1100Mechanicals(x) & Chasis(x))", "exists x.(Racecar(x) & BuiltByCarrozzeriaColli(x) & UsedFiat1100Mechanicals(x) & UsedChassis(x))"]}
{"id": "folio_train_1438", "nl": "Carrozzeria Colli worked for airforces.", "fol": "exists x.(IsAirforce(x) & WorkedForEntity(Carrozzeriacolli,x))", "prediction": ["all x.(CarrolozzeriaColli(x) -> WorkedForAirforces(x))", "all x y.((CarrolozzeriaColli(x) & Airforce(y)) -> WorkedFor(x,y))", "(WorkedForAirforces(CarrolozzeriaColli)", "all x y z.((CarrolozzeriaColli(x) & Airforce(y) & Airforce(z)) -> WorkedFor(x,y,z))", "all x.(CarrolozzeriaColli(x) -> WorkedForAirforces(x))", "all x y.((CarrolozzeriaColli(x) & Airforce(y)) -> WorkedFor(x,y))", "all x.(CarrozzeriaColli(x) -> WorksForAirforces(x))", "all x.(CarrolozzeriaColi(x) -> WorkedForAirforces(x))", "(WorkedForAirforces(CarrolozzeriaColli)", "all x y z.((CarrolozzeriaColli(x) & Airforce(y) & Airforce(z)) -> WorkedFor(x,y,z))", "All x.(Croceria(x) -> WorkedForAirforces(x))", "all x y.((CarrozzeriaColli(x) & Airforce(y)) -> WorkedFor(x,y))", "all x.(CarrotzeriaColli(x) -> WorkedForAirforces(x))", "all x.(CarroceriaColli(x) -> WorkedForAirforces(x))", "all x y.((CarrolozzeriaColli(x) & Airforce(y)) -> WorksFor(x,y))", "All x.(CarrolozzeriaColli(x) -> WorksForAirforces(x))"]}
{"id": "folio_train_1439", "nl": "Carrozzeria Colli made car bodies. ", "fol": "MadeCarBodies(Carrozzeriacolli,Carbodies)", "prediction": ["all x.(CarroceriaColli(x) -> MadeCarBody(x))", "all x y.((CarroceriaColli(x) & CarBody(y)) -> MadeBy(x,y))", "(CarroceriaColli(CarBody) & MadeBy(CarroceriaColli(Carroceri))", "all x.(CarrolozzeriaColli(x) -> MadeCarBody(x))", "(MadeCarBody(carrosseriaColli,Carrosseria))", "all x y.((CarroceriaColli(x) & CarBody(y)) -> MadeBy(x,y))", "all x y z.((Carroceria(x) & Colli(y) & CarBody(z)) -> Made(x,y,z))", "all x.(CarroceriaColli(x) -> MadeCarBody(x))", "all x.(CarroszzeriaColli(x) -> MadeCarBody(x))", "All x.(CarolozzeriaColli(x) -> MadeCarBody(x))", "all x y.((CarrolozzeriaColli(x) & CarBody(y)) -> MadeBy(x,y))", "exists x.(Carrolozzeria(x) & Colli(x) & CarBody(x))", "all x.(CarrolozzeriaColli(x) -> MadeCarBody(x))", "all x y.((CarroceriaColli(x) & CarBody(y)) -> Made(x,y))", "all x.(CarroceriaColli(x) -> MadeCarBodies(x))", "All x.(CarrozzeriaColli(x) -> MadeCarBody(x))"]}
{"id": "folio_train_1440", "nl": "Carrozzeria Colli made car bodies in 1931.", "fol": "(MadeCarBodies(Carrozzeriacolli,Carbodies) & MadeIn(Carrozzeriacolli,1931))", "prediction": ["all x.(CarroceriaColli(x) -> MadeCarBody(x,1931))", "all x y.((CarroceriaColli(x) & CarBody(y)) -> MadeIn1931(x,y))", "all x.(CarrolozzeriaColli(x) -> MadeCarBody(x,1931))", "Carrosseria Colli made car bodies in 1931.", "all x y z.((CarroceriaColli(x) & CarBody(y) & CarBody(z)) -> MadeIn(x,y,z))", "(CarrolozzeriaColli(CarBody) & MadeIn1931(CarBody))", "all x y.((CarroceriaColli(x) & CarBody(y)) -> MadeIn(x,y))", "-CarrolozzeriaColli(CarBody)", "Carrozzeria Colli made car bodies in 1931.", "all x y.((CarrolozzeriaColli(x) & CarBody(y) & MadeIn1931(x,y)) -> MadeIn1931(x,y))", "(MadeCarBody(car,1931) & CarrozzeriaColli(car,1931))", "all x.(CarroceriaColli(x) -> MadeCarBody(x,1931))", "All x.(CarolozzeriaColli(x) -> MadeCarBody(x,1931))", "all x.(CarrolozzeriaColli(x) -> MadeCarBodies(x,1931))", "all x.(CarroceriaColli(x) -> MadeCarBodyIn1931(x))", "All x.(CarrozzeriaColli(x) -> MadeIn1931(x))"]}
{"id": "folio_train_1441", "nl": "Carrozzeria Colli built airplanes during World War II.", "fol": "exists x.(Airplane(x) & BuiltByCompany(Carrozzeriacolli,x) & During(x,WorldWarII))", "prediction": ["all x.(CarrolozzeriaColi(x) -> BuiltAirplanesDuringWorldWarII(x))", "all x y.((CarrolozzeriaColli(x) & Airplane(y)) -> BuiltDuringWorldWarII(x,y))", "all x y z.((CarrolozzeriaColli(x) & Airplane(y) & WorldWarII(z)) -> BuiltDuring(x,y,z))", "(builtByCarrolozzeriaColi(carrolozzeria) & WorldWarII(carrolozzeria))", "all x y.((CarrolozzeriaColli(x) & WorldWarII(y)) -> BuiltAirplanes(x,y))", "all x.(CarroceriaColli(x) -> BuiltAirplanesDuringWorldWarII(x))", "all x.(CarrolozzeriaColi(x) -> BuiltAirplanes(x))", "all x y.((CarrozzeriaColi(x) & Airplane(y)) -> BuiltDuringWorldWarII(x,y))", "During WorldWarII, CarrozzeriaColli builtAirplanes(carroli)", "all x.((CarrolozzeriaColli(x) & WorldWarII(x)) -> BuiltAirplanes(x))", "(BuildsAirplanesDuringWorldWarII) - CarrozzeriaColi(Carroli))", "(builtByCarrolozzeriaColi(Carrolozzeria) & WorldWarII(Carrolozzeria))", "all x.(CarrozzeriaColli(x) -> BuiltAirplanesDuringWorldWarII(x))", "all x y.((CarroceriaColli(x) & WorldWarII(y)) -> BuiltAirplanes(x,y))", "All x.(CarrocalyseColli(x) -> BuiltAirplanesDuringWorldWarII(x))", "All x.(CarrolozzeriaColi(x) -> BuiltAirplanesDuringWorldWarII(x))"]}
{"id": "folio_train_1442", "nl": "Giuseppe Colli established a company that made car bodies.", "fol": "exists x.(IsCompany(x) & EstablishedByPerson(x,Giuseppecolli) & MadeCarBodies(x,Carbodies))", "prediction": ["all x.((GiuseppeColli(x) & Company(x)) -> MadeCarBodies(x))", "all x y.((Giuseppe Colli(x) & Company(y)) -> MadeCarBodies(x,y))", "Giuseppe Colli established a company that made car bodies.", "all x.(GiuseppeColli(x) -> MadeCarBodies(x))", "all x y.((GiuseppeColli(x) & Company(y)) -> MadeCarBodies(x,y))", "((Giuseppe Colli(Giuseppe) & Company(Giuseppe)) -> MadeCarBodies(Giuseppe))", "all x.((Giuseppe Colli(x) & Company(x)) -> MadeCarBodies(x))", "(EstablishedCompany(GiuseppeColli) & MadeCarBodies(GiuseppeColli))", "Giuseppe Colli established a company that made car bodies.", "(FoundedBodyMaker(GiuseppeColli) & MadeCarBodyMaker(GiuseppeColli))", "Giuseppe Colli & Company MadeCarBodies(GiuseppeColli)", "all x.(GiuseppeColli(x) -> EstablishedCompany(x))", "all x y.((Giuseppe Colli(x) & Company(y)) -> MadeCarBody(x,y))", "Giuseppe Colli established a company that made car bodies.", "all x.((GiuseppeColli(x) & Company(x)) -> MadeCarBodies(x))", "Giuseppe Colli established a company that made car bodies."]}
{"id": "folio_train_1443", "nl": "Giuseppe Colli established a Milanese coachbuilder company that specialized in using aluminum.", "fol": "exists x.(IsMilaneseCoachbuilder(x) & IsCompany(x) & EstablishedByPerson(x,Giuseppecolli) & SpecializesIn(x,Usingaluminum))", "prediction": ["all x y.((Giuseppe Colli(x) & MilaneseCoachbuilderCompany(y)) -> SpecializedInAluminum(x,y))", "all x.((Giuseppe Colli(x) & MilaneseCoachbuilderCompany(x) & SpecializedInAluminum(x)) -> Established(x))", "(established by Giuseppe Colli, MilaneseCoachbuilderCompany(GiuseppeColli) & SpecializedInAluminum(GiuseppeColli))", "Giuseppe Colli established a Milanese CoachbuilderCompany(GiuseppeColli)", "(EstablishedMilaneseCoachbuilderCompany(GiuseppeColli) & SpecializedInAluminum(GiuseppeColli))", "all x y z.((Giuseppe Colli(x) & MilaneseCoachbuilder(y) & Aluminum(z)) -> SpecializedIn(x,y,z))", "Giuseppe Colli & MilaneseCoachbuilderCompany(GiuseppeColli) & SpecializedInAluminum(GiuseppeColli,Aluminum) & SpecializedInAluminum(GiuseppeColli,Aluminum))", "all x y.((Giuseppe Colli(x) & MilaneseCoachbuilder(y)) -> SpecializedInAluminum(x,y))", "all x.((Giuseppe Colli(x) & MilaneseCoachbuilderCompany(x)) -> SpecializedInAluminum(x))", "Giuseppe Colli established a Milanese coachbuilder company that specialized in usingAluminum.", "(established by Giuseppe Colli, MilaneseCoachbuilderCompany(GiuseppeColli) & SpecializedInAluminum(GiuseppeColli))", "all x.((Giuseppe Colli(x) & MilaneseCoachbuilder(x) & SpecializedInAluminum(x)) -> Established(x,y))", "Giuseppe Colli established MilaneseCoachbuilderCompany(GiuseppeColli)", "all x y.((Giuseppe Colli(x) & MilaneseCoachbuilderCompany(y)) -> SpecializedInAluminum(x,y))", "all x y.((Giuseppe Colli(x) & MilaneseCoachbuilder(y) & SpecializedInAluminum(x)) -> Established(x,y))", "all x.((Giuseppe Colli(x) & MilaneseCoachbuilderCompany(x) & SpecializedInAluminum(x)) -> Established(x,y))"]}
{"id": "folio_train_1444", "nl": "The first automobiles built by Carrozzeria Colli were built using Fiat 1100 mechanicals and chasis.", "fol": "all x.((FirstAutomobilesByCompany(x,Carrozzeriacolli) -> BuiltUsing(x,Fiat1100mechanicals)) & BuiltUsing(x,Chasis))", "prediction": ["all x.((Automobile(x) & CarrozzeriaColli(x)) -> (BuiltWithFiat1100Mechanicals(x) & BuiltWithChassis(x)))", "all x y.((CarrolozzeriaColli(x) & Fiat1100Mechanicals(y) & Chasis(y)) -> BuiltBy(x,y))", "all x.((CarrolozzeriaColli(x) & Fiat1100Mechanicals(x) & Chasis(x)) -> BuiltBy(x))", "all x y z.((CarrolozzeriaColli(x) & Fiat(y) & Mechanicals(z) & Chasis(x)) -> BuiltBy(x,y,z))", "(builtByCarrolozzeriaColli(car) & Fiat1100Mechanicals(car) & Chasis(car))", "all x.((Automobile(x) & BuiltByCarrolozzeriaColli(x)) -> (FiatMechanicals(x) & Chasis(x)))", "all x.(CarrolozzeriaColli(x) -> (BuildedWithFiat1100Mechanicals(x) & BuiltWithChassis(x)))", "all x y.((CarrozzeriaColli(x) & Fiat(y) & Mechanicals(y) & Chasis(y)) -> BuiltBy(x,y))", "all x y z.((CarrozzeriaColli(x) & Automobile(y) & Fiat(z) & BuiltWith(y,z)) -> (Mechanicals(z) & Chasis(y)))", "all x y.((CarrolzzeriaColli(x) & Fiat1100Mechanicals(y) & Chasis(y)) -> BuiltBy(x,y))", "all x.((CarrozzeriaColli(x) & BuiltBy(x,Fiat,100)) -> (Mechanicals(x) & Chasis(x)))", "(all x.(CarrozzeriaColli(x) -> BuiltWithFiatMechanics(x)) & all y.(CarrozzeriaColli(y) -> BuiltWithChassis(y)))", "(all x.(CarrolozzeriaColli(x) -> BuiltWithFiatMechanicalsAndChassis(x)))", "all x.(CarrozzeriaColli(x) -> (FirstAutomobile(x) & BuiltBy(x,Fiat,100) & BuiltWith(x,Chassis)))", "all x y z.((Automobile(x) & CarroceriaColli(y) & Fiat1100Mechanicals(z) & Chasis(z)) -> BuiltBy(x,y,z))", "All x.(CarrolzzeriaColli(x) -> (BuildedWithFiat1100Mechanicals(x) & BuiltWithChassis(x)))"]}
{"id": "folio_train_1445", "nl": "John will go to the cinema if and only if Jack goes to the cinema today.", "fol": "(AttendCinema(John,Today) <-> AttendCinema(Jack,Today))", "prediction": ["all x.((Jack(x) & GoesToCinema(x)) -> WillGoToCinema(x))", "all x y.((Jack(x) & Cinema(y)) -> (GoesTo(x,y) & -GoesTo(x,y)))", "all x y.((John(x) & Jack(y) & GoesToCinema(x,y)) -> WillGoToCinema(x,y))", "((JackGoesToCinema(John) & -JackGoesToCinema(Jack)) | (-JackGoesToCinema(John) & Cinema(Jack))))", "all x.((John(x) & Jack(x)) -> GoesToCinema(x))", "all x.((JackGoesToCinema(x) & -JackGoesToCinema(x)) -> WillGoToCinema(x))", "all x.((Jack(x) & GoesToCinema(x)) -> GoesToCinema(x))", "(GoesToCinema(John,Jack) & Only(Jack,Jack))", "(all x.((Jack(x) & Today(x)) -> GoesToCinema(x)))", "(all x.((John(x) & Jack(x)) -> GoesToCinema(x)))", "All x.(JackGoesToCinema(x,y) -> (JackGoesToCinema(y) & -JackGoesToCinema(y)))", "All x.((John(x) & Jack(x) & Today(x)) -> GoesToCinema(x))", "all x y.((Jack(x) & Cinema(y)) -> (GoesTo(x,y) & Only(x,y)))", "(all x.((John(x) & Jack(x)) -> GoToCinema(x)))", "all x y.((John(x) & Jack(y) & Today(y)) -> WillGoToCinema(x,y))", "all x y.((Jack(x) & Cinema(y) & Today(y)) -> WillGoTo(x,y))"]}
{"id": "folio_train_1446", "nl": "Jack will go to the cinema if and only if Iron Man is on and the weather is not bad today.", "fol": "(AttendCinema(Jack,Today) <-> (IsMoviePlaying(Ironman) & -HasBadWeather(Today)))", "prediction": ["all x.((Jack(x) & IronManOn(x) & -BadWeather(x)) -> WillGoToCinema(x))", "all x y.((Jack(x) & IronMan(y) & On(x) & -BadWeather(x)) -> WillGoToCinema(x))", "(all x.((IronMan(x) & On(x) & -BadWeather(x)) -> GoesToCinema(x)))", "(all x.((IronManOn(x) & -BadWeather(x)) -> WillGoToCinema(x)))", "((IronManOn(IronMan) & -BadWeather(IronMan)) -> WillGoToCinema(Jack,IronMan))", "all x.((Jack(x) & IronManOn(x) & -BadWeather(x)) -> GoesToCinema(x))", "all x.((IronManOn(x) & -BadWeather(x)) -> WillGoToCinema(x))", "all x y.((Jack(x) & IronMan(y) & On(y) & -BadWeather(y)) -> WillGoToCinema(x,y))", "all x y z.((Jack(x) & IronMan(y) & Cinema(z) & On(y) & -BadWeather(z)) -> WillGoTo(x,y,z))", "all x y.((Jack(x) & IronMan(y) & On(x,y) & -BadWeather(x,y)) -> WillGoToCinema(x))", "all x.((Jack(x) & IronManOn(x) & -BadWeather(x)) -> WillGoToCinema(x))", "all x y.((Jack(x) & IronManOn(y) & -BadWeather(x)) -> WillGoToCinema(x,y))", "All x.((IronManOn(x) & -BadWeather(x)) -> WillGoToCinema(x))", "(all x.(IronManOn(x) & -BadWeather(x)) -> GoesToCinema(x))", "all x.((Jack(x) & IronManOn(x) & -BadWeather(x)) -> Movie(x))", "All x.((Jack(x) & IronManOn(x) & -BadWeather(x)) -> Cinema(x))"]}
{"id": "folio_train_1447", "nl": "Some days in March have bad weather.", "fol": "exists x.(IsMonth(March) -> HasBadWeather(x))", "prediction": ["exists x.(MarchDay(x) & BadWeather(x))", "exists x.(MarsDay(x) & BadWeather(x))", "exists x.(Day(x) & March(x) & BadWeather(x))", "exists x.(MarchDay(x) & BadWeather(x))", "(exists x.(MarchDay(x) & BadWeather(x)))", "all x y.((Day(x) & March(y) & BadWeather(x,y)) -> BadWeather(x,y))", "exists x y.(Day(x,y) & March(y) & BadWeather(x,y))", "exists x.(MarsDay(x) & BadWeather(x))", "exists x.(MarchDay(x) & BadWeather(x))", "exists x.(Day(x) & March(x) & BadWeather(x))", "exists x.(MarchDay(x) & BadWeather(x))", "exists x.(MarsDay(x) & BadWeather(x))", "exists x.(MarchDay(x) & BadWeather(x))", "exists x.(Day(x) & March(x) & BadWeather(x))", "exists x.(MarchDay(x) & BadWeather(x))", "exists x.(MarsDay(x) & BadWeather(x))"]}
{"id": "folio_train_1448", "nl": "Iron man is on.", "fol": "IsMoviePlaying(Ironman)", "prediction": ["all x.(IronMan(x) -> On(x))", "(On(IronMan) & On(IronMan))", "(IronManOn(IronMan))", "IronManOn.", "IronManIsOn(IronMan)", "all x.(IronMan(x) -> On(x))", "-IronManOn(i)", "IronManOn(x)", "(IronManOn)", "all x.(IronMan(x) -> On(x))", "IronManIsOn(i)", "IronManOn(x)", "All x.(IronMan(x) -> On(x))", "IronManOn(x)", "all x.(IronMan(x) -> On(x))", "All x.(IronMan(x) -> On(x))"]}
{"id": "folio_train_1449", "nl": "It's March now.", "fol": "IsMonth(March)", "prediction": ["All x.(March(x) -> Now(x))", "It's March now.", "(March(x) & March(x))", "all x.(March(x) -> AddedToList(x))", "-MarsNow(x)", "-MarchNow.", "It's March Now.", "(March(x) & March(x))", "Es ist M\u00e4rz.", "All x.(March(x) -> Available(x))", "March.", "It's March now.", "(March(x) & March(x))", "March.", "It's March Now.", "it's March now."]}
{"id": "folio_train_1450", "nl": "John will go to the cinema.", "fol": "AttendCinema(John,Today)", "prediction": ["all x.(John(x) -> GoesToCinema(x))", "(GoesToCinema(John))", "John will go to the cinema.", "-GoesToCinema(John)", "all x y.((John(x) & Cinema(y)) -> GoesTo(x,y))", "all x.(John(x) -> GoesToCinema(x))", "(GoesToCinema(John))", "John will go to the cinema.", "all x.(John(x) -> GoesToCinema(x))", "(GoesToCinema(John))", "John will go to the cinema.", "(GoesToCinema(John,Jon))", "All x.(John(x) -> Cinema(x))", "all x.(John(x) -> GoesToCinema(x))", "John will go to the Cinema.", "John will go to the cinema."]}
{"id": "folio_train_1451", "nl": "The weather is good today.", "fol": "-HasBadWeather(Today)", "prediction": ["all x.(Weather(x) -> Good(x))", "(GoodWeather(x) & Today(x))", "the weather is good today.", "-GoodWeather(x)", "The WeatherIsGoodToday(x)", "all x.(Weather(x) -> Good(x))", "(GoodWeather(x) & Today(x))", "the weather is good today.", "-GoodWeather(x)", "all x.(Weather(x) -> Good(x))", "(GoodWeather(x) & Today(x))", "the weather is good today.", "(GoodWeather(x) -> Today(x))", "all x.(Weather(x) -> Good(x))", "All x.(Weather(x) -> GoodToday(x))", "(GoodWeather(x) & GoodWeather(x))"]}
{"id": "folio_train_1452", "nl": "Quiksilver sells sportswear, clothing, footwear, and accessories.", "fol": "all x.((SellsByQuiksilver(x) -> IsSportswear(x)) | IsClothing(x) | IsFootwear(x) | IsAccessory(x))", "prediction": ["all x.(Quicksilver(x) -> (SellsSportswear(x) & SellsClothing(x) & SellsFootwear(x) & SellsAccessories(x)))", "(SellsSportswear(Quicksilver) & SellsClothing(Quicksilver) & SellsFootwear(Quicksilver) & SellsAccessories(Quicksilver))", "all x y.((Quicksilver(x) & Sportswear(y)) -> (Sells(x,y) & Sells(x,y)))", "all x.(Quiksilver(x) -> (SellsSportswear(x) & SellsClothing(x) & SellsFootwear(x) & SellsAccessories(x)))", "all x.(Quicksilver(x) -> (SellsSportswear(x) & SellsClothing(x) & SellsFootwear(x) & SellsAccessories(x)))", "all x y z.((Quicksilver(x) & Sportswear(y) & Clothing(z) & Footwear(z)) -> Sells(x,y,z))", "all x y.((Quiksilver(x) & Sportswear(y) & Clothing(y) & Footwear(y) & Accessories(y)) -> Sells(x,y))", "all x.((Quicksilver(x) & Sportswear(x) & Clothing(x) & Footwear(x) & Accessories(x)) -> Sells(x,y))", "(SellsSportswear(Quicksilver) & SellsClothing(Quicksilver) & SellsFootwear(Quicksilver) & SellsAccessories(Quicksilver))", "all x.(Quiksilver(x) -> (SellsSportswear(x) & SellsClothing(x) & SellsFootwear(x) & SellsAccessories(x)))", "all x.(Quicksilver(x) -> (SellsSportswear(x) & SellsClothing(x) & SellsFootwear(x) & SellsAccessories(x)))", "exists x.(Quiksilver(x) & SellsSportswear(x) & SellsClothing(x) & SellsFootwear(x) & SellsAccessories(x))", "(SellsSportswear(Quicksilver) & SellsClothingFootwearAndAccessories(Quicksilver))", "(SellsSportswear(Quicksilver) & SellsClothing(Quicksilver) & SellsFootwear(Quicksilver) & SellsAccessories(Quicksilver))", "All x.(Quicksilver(x) -> (SellsSportswear(x) | SellsClothing(x) | SellsFootwear(x) | SellsAccessories(x)))", "all x.(Quicksilver(x) -> (SellsSportswear(x) & SellsClothing(x) & SellsFootwear(x) & SellsAccessories(x)))"]}
{"id": "folio_train_1453", "nl": "Flannels are a type of clothing.", "fol": "IsClothing(Flannel)", "prediction": ["all x.(Flannel(x) -> Clothing(x))", "all x y.((Flannel(x) & Clothing(y)) -> Clothing(x,y))", "all x.(Flannel(x) -> Clothing(x))", "(all x.(Flannel(x) -> Clothing(x)))", "all x.(Flannel(x) -> Clothing(x))", "all x y.((Flannel(x) & Clothing(y)) -> Clothing(x,y))", "all x.(Flonkel(x) -> Clothing(x))", "all x y.((Flannel(x) & Clothes(y)) -> Clothing(x,y))", "all x.(Flannel(x) -> Clothing(x))", "all x y.((Flannel(x) & Clothing(y)) -> Clothing(x))", "exists x.(Flonkel(x) & Clothing(x) & Clothing(x))", "all x.(Flannel(x) -> Clothing(x))", "all x.(Flannels(x) -> Clothing(x))", "all x.(Flonnels(x) -> Clothing(x))", "exists x.(Flannelle(x) & Clothes(x) & Clothing(x))", "all x.(Flannel(x) -> Clothing(x))"]}
{"id": "folio_train_1454", "nl": "Joe owns an item fron Quiksilver.", "fol": "exists x.(SellsByQuiksilver(x) -> OwnsByJoe(x))", "prediction": ["(OwnsItem(Joe) & FronQuicksilver(Joe))", "all x.(Owns(x,y) -> (Item(y) & FronQuicksilver(y)))", "all x.(OwnsItem(x,y) -> (FronQuicksilver(y) & OwnsItem(x,y)))", "all x.((Joe(x) & Item(x,Quicksilver)) -> Owns(x,Quicksilver))", "exists x.(Item(x) & Owns(x,y))", "all x y.((Joe(x) & Item(y) & Quiksilver(y)) -> Owns(x,y))", "(Owns(Joe,Quicksilver) -> Owns(Joe,Quicksilver))", "(OwnsItem(Joe,Quicksilver))", "-OwnsItem(Joe,Quicksilver)", "(OwnsFronQuicksilver(Joe))", "(Owns(Joe,FronQuicksilver) -> Owns(Joe,Quicksilver))", "all x y.((Joe(x) & Item(y) & Quiksilver(y)) -> Owns(x,y))", "exists x.(Item(x) & Owns(x,y))", "exists x.(Item(x) & Owns(x,FronQuicksilver))", "all x y.((Joe(x) & Item(y) & Quiksilver(y)) -> Owns(x,y))", "exists x.(Item(x) & Owns(x,y))"]}
{"id": "folio_train_1455", "nl": "Quiksilver sells beer.", "fol": "exists x.(SellsByQuiksilver(x) & Beer(x))", "prediction": ["all x.(Quicksilver(x) -> SellsBeer(x))", "all x.(Quiksilver(x) -> SellsBeer(x))", "(SellsBeer(Quicksilver))", "all x y.((Quicksilver(x) & Beer(y)) -> Sells(x,y))", "all x.(Quicksilver(x) -> SellsBeer(x))", "all x y.((Quiksilver(x) & Beer(y)) -> Sells(x,y))", "all x.(Quiksilver(x) -> SellsBeer(x))", "QuiksilverSellsBeer(x)", "(SellsBeer(Quicksilver)", "(SellsBerry(Quicksilver))", "exists x.(Quiksilver(x) & Sells(x,Beer))", "all x.(Quicksilver(x) -> SellsBeer(x))", "All x y.((Quiksilver(x) & Beer(y)) -> Sells(x,y))", "QuiksilverSellsBeer(x)", "exists x.(Quiksilver(x) & Sells(x,Beer))", "All x.(Quicksilver(x) -> SellsBier(x))"]}
{"id": "folio_train_1456", "nl": "Joe owns a flannel.", "fol": "OwnsByJoe(Flannel)", "prediction": ["all x.(OwnsFlannel(x) -> JoeOwnsFlannel(x))", "exists x.(Flannel(x) & Owns(x,Joe))", "all x.(OwnsFlannel(x) -> Joe(x))", "(OwnsFlannel(Joe))", "exists x y.(Flannel(x) & Joe(y) & Owns(y,x))", "all x.((Joe(x) & Flannel(x)) -> Owns(x,y))", "exists x.(Flannel(x) & Owns(x,y))", "all x.(Joe(x) -> OwnsFlannel(x))", "all x.(OwnsFlannel(x) -> JoeOwnsFlannel(x))", "(OwnsFlannel(Joe))", "exists x y.(Flannel(x) & Owns(x,y))", "exists x y.((Joe(x) & Flannel(y) & Owns(x,y))", "all x.((Joe(x) & Flanelle(x)) -> Owns(x,y))", "all x.(OwnsFlannel(x) -> JoeHasFlannel(x))", "(OwnsFlannel(Joe))", "(OwnsFlannel(Joe,Joe))"]}
{"id": "folio_train_1457", "nl": "Joe owns at least one a piece of sportswear, clothing, footwear, or accessory", "fol": "exists x.((IsSportswear(x) | IsClothing(x) | IsFootwear(x) | IsAccessory(x)) & OwnsByJoe(x))", "prediction": ["all x.(Owns(x,y) -> (Sportswear(y) | Clothing(y) | Footwear(y) | Accessory(y)))", "all x.((Joe(x) & (Sportswear(x) | Clothing(x) | Footwear(x) | Accessory(x))) -> Owns(x,y))", "all x y z.((Joe(x) & (Sportswear(y) | Clothing(y) | Footwear(y) | Accessory(y))) -> Owns(x,y))", "exists x.(Joe(x) & (OwnsSportswear(x) | OwnsClothing(x) | OwnsFootwear(x) | OwnsAccessories(x)))", "all x.(Owns(x,y) -> (Sportswear(y) | Clothing(y) | Footwear(y) | Accessory(y)))", "all x.(OwnsAtLeastOne(x) -> (Sportswear(x) | Clothing(x) | Footwear(x) | Accessory(x)))", "all x y z.((Joe(x) & (Sportswear(y) | Clothing(y) | Footwear(y) | Accessory(y)) & (Owns(x,y) | Owns(x,z))) -> Owns(x,y))", "exists x.(Joe(x) & Owns(x,y) & (Sportswear(y) | Clothing(y) | Footwear(y) | Accessory(y)))", "all x y.((Joe(x) & Sportswear(y) & Clothing(y) & FootwearOrAccessories(x)) -> Owns(x,y))", "(Owns(Joe) & (Sportswear(Joe) | Clothing(Joe) | Footwear(Joe) | Accessory(Joe)))", "all x y z.((Joe(x) & Sportswear(y) & Clothing(z) & Footwear(x) & Accessories(x) & (Sportswear(y) | Clothing(z) | Footwear(z) | Accessory(z))) -> Owns(x,y,z))", "all x y.((Joe(x) & (Sportswear(y) | Clothing(y) | Footwear(y) | Accessory(y))) -> Owns(x,y))", "all x.(Owns(x,y) -> (Sportswear(y) | Clothing(y) | Footwear(y) | Accessory(y)))", "exists x.(Joe(x) & (OwnsSportswear(x) | OwnsClothing(x) | OwnsFootwear(x) | OwnsAccessories(x)))", "exists x.(Joe(x) & Owns(x,y) & (Sportswear(y) | Clothing(y) | Footwear(y) | Accessory(y)))", "all x y.((Joe(x) & (Sportswear(y) | Clothing(y) | Footwear(y) | Accessories(y)) & Owns(x,y)) -> Owns(x,y))"]}
{"id": "folio_train_1458", "nl": "No video games released by Nintendo support the PS4 platform.", "fol": "all x.(ReleasedByNintendo(x) -> -SupportsPS4Platform(x))", "prediction": ["-exists x.(VideoGame(x) & ReleasedByNintendo(x) & SupportsPS4(x))", "all x.((VideoGame(x) & ReleasedByNintendo(x)) -> -SupportsPS4(x))", "(NoVideoGamesReleasedByNintendo(n) & SupportsPS4Platform(n))", "-exists x.(VideoGame(x) & ReleasedByNintendo(x) & SupportsPS4Platform(x))", "-exists x.(VideoGame(x) & Nintendo(x) & ReleasedBy(x,y))", "(-all x.(VideoGame(x) & ReleasedByNintendo(x)) -> SupportsPS4(x))", "all x.((VideoGame(x) & ReleasedByNintendo(x)) -> -SupportsPS4Platform(x))", "Currently, there are no video games released by Nintendo that support PS4 Platform.", "Currently, there is no videogame released by Nintendo that supports the PS4 Platform.", "Currently, there are 0 videogames released by Nintendo that support PS4 Platform.", "(-all x.(VideoGame(x) & ReleasedByNintendo(x)) -> SupportsPs4Platform(x))", "all x.((VideoGame(x) & ReleasedByNintendo(x)) -> -SupportsPS4Platform(x))", "-exists x.(VideoGame(x) & ReleasedByNintendo(x) & SupportsPs4(x))", "-exists x.(VideoGame(x) & Nintendo(x) & ReleasedBy(x,y))", "-exists x.(VideoGame(x) & ReleasedByNintendo(x) & PS4(x))", "-exists x.(VideoGame(x) & NintendoReleased(x) & SupportsPS4(x))"]}
{"id": "folio_train_1459", "nl": "All video games in the Pokemon series are released by Nintendo. ", "fol": "all x.(InPokemonSeries(x) -> ReleasedByNintendo(x))", "prediction": ["all x.((VideoGame(x) & PokemonSeries(x)) -> ReleasedByNintendo(x))", "all x y.((VideoGame(x) & PokemonSeries(y)) -> ReleasedByNintendo(x,y))", "(all x.(PokemonVideoGame(x) -> ReleasedByNintendo(x)))", "all x.((VideoGame(x) & PokemonSeries(x)) -> ReleasedByNintendo(x))", "all x.(PokemonVideoGame(x) -> ReleasedByNintendo(x))", "all x y.((VideoGame(x) & PokemonSeries(y)) -> ReleasedByNintendo(x,y))", "(all x.(PokemonVideoGame(x) -> ReleasedByNintendo(x)))", "all x.((VideoGame(x) & PokemonSeries(x)) -> ReleasedByNintendo(x))", "all x.(VideoGame(x) -> ReleasedByNintendo(x))", "all x y.((VideoGame(x) & PokemonSeries(y)) -> ReleasedByNintendo(x,y))", "(all x.(Pok\u00e9monVideoGame(x) -> ReleasedByNintendo(x)))", "all x.((VideoGame(x) & PokemonSeries(x)) -> ReleasedByNintendo(x))", "all x y.((VideoGame(x) & PokemonSeries(y) & Nintendo(z)) -> ReleasedBy(x,y,z))", "all x y.((VideoGame(x) & PokemonSeries(y)) -> ReleasedBy(x,y))", "all x.((VideoGame(x) & PokemonSeries(x)) -> ReleasedByNintendo(x))", "all x.((VideoGame(x) & PokemonSeries(x)) -> ReleasedByNintendo(x))"]}
{"id": "folio_train_1460", "nl": "All video games in the FIFA series support the PS4 platform. ", "fol": "all x.(InFIFASeries(x) -> SupportsPS4Platform(x))", "prediction": ["all x.((VideoGame(x) & FIFASeries(x)) -> SupportsPS4Platform(x))", "all x.((VideoGame(x) & InFavoriteSeries(x)) -> SupportsPS4Platform(x))", "all x y.((VideoGame(x) & FIFASeries(y)) -> SupportsPS4Platform(x,y))", "(all x.(FootballGame(x) -> SupportsPS4(x)))", "all x y.((VideoGame(x) & FIFASeries(y) & PS4(y)) -> Supports(x,y))", "all x.((VideoGame(x) & InFutureSeries(x)) -> SupportsPS4Platform(x))", "all x.((VideoGame(x) & FIFASeries(x)) -> SupportsPS4Platform(x))", "all x.(VideoGame(x) -> SupportsPS4Platform(x))", "(all x.(FootballVideoGame(x) -> SupportsPS4(x)))", "all x y.((VideoGame(x) & FIFASeries(y) & PS4(y)) -> Supports(x,y))", "all x y.((VideoGame(x) & FIFASeries(y) & SupportsPS4(x,y)) -> SupportsPS4(x))", "all x.((VideoGame(x) & FIFASeries(x)) -> SupportsPs4Platform(x))", "(all x.(VideoGame(x) -> SupportsPS4(x)))", "all x.(VideoGame(x) -> SupportsPS4Platform(x))", "(all x.(VideoGame(x) -> SupportsPS4(x)))", "all x.(VideoGame(x) -> SupportsPS4(x))"]}
{"id": "folio_train_1461", "nl": "All video games supporting users to simulate playing soccer games online are in the FIFA series.", "fol": "all x.(SupportsSoccerSimulation(x) -> InFIFASeries(x))", "prediction": ["all x.((VideoGame(x) & SupportsSimulation(x) & OnlineSoccerGame(x)) -> FIFASeries(x))", "all x.((VideoGame(x) & SupportsSimulation(x,SoccerGames)) -> FIFASeries(x))", "all x y.((VideoGame(x) & User(y) & SupportsSimulation(x,y)) -> FIFASeries(x))", "all x.((VideoGame(x) & SupportsSimulation(x) & OnlineSoccerGames(x)) -> FIFASeries(x))", "all x y.((VideoGame(x) & User(y) & SimulatesPlayingSoccerGamesOnline(x,y)) -> FIFASeries(x))", "all x.((VideoGame(x) & SupportsPlayingSoccerGamesOnline(x)) -> FIFASeries(x))", "all x.(VideoGame(x) -> (SupportsUsers(x) & SimulatesPlayingSoccerGamesOnline(x)))", "(all x.(VoiceGame(x) & SupportsSimulation(x,SoccerGames)) -> FIFASeries(x))", "all x.((VideoGame(x) & SupportsUsersToSimulatePlayingSoccerGamesOnline(x)) -> FIFASeries(x))", "all x y.((VideoGame(x) & User(y) & SupportsSimulation(x,y) & OnlineSoccerGame(y)) -> FIFASeries(x))", "all x y.((VideoGame(x) & User(y) & SimultaneousPlaying(x,y)) -> FIFASeries(x))", "all x.(VideoGame(x) -> (SupportsPlayingSoccerGames(x) & InFootballSeries(x)))", "all x.((VideoGame(x) & SupportsPlayingSoccerGames(x)) -> FIFASeries(x))", "all x.((VideoGame(x) & SupportsSimulation(x,SoccerGames)) -> FIFASeries(x))", "(all x.(VideoGame(x) -> InFootballSeries(x))", "all x.((VideoGame(x) & SupportsUsersToSimulateSoccerGamesOnline(x)) -> FIFASeries(x))"]}
{"id": "folio_train_1462", "nl": "The video game named \u201cBe Lionel\u201d is in the Pokemon series or supports users to simulate playing football games online.", "fol": "((InPokemonSeries(BeLionelGame) & -SupportsSoccerSimulation(BeLionelGame)) | (-InPokemonSeries(BeLionelGame) & SupportsSoccerSimulation(BeLionelGame)))", "prediction": ["all x.((VideoGame(x) & BeLionel(x)) -> (InPokemonSeries(x) | SupportsSimulation(x)))", "(exists x.(VideoGame(x) & BeLionel(x)) & (InPokemonSeries(x) | SupportsSimulation(x))))", "((VideoGame(x) & BeLionel(x)) -> (InPokemonSeries(x) | SupportsSimulation(x))))", "all x.(VideoGame(x) -> (BeLionel(x) | SupportsSimulation(x)))", "all x.(BeLionel(x) -> (InPokemonSeries(x) | SupportsSimulation(x)))", "all x.((VideoGame(x) & PokemonSeries(x)) | SupportsSimulation(x))", "(InPokemonSeries(VideoGame) | SupportsSimulation(VideoGamesOnline))", "all x.((VideoGame(x) & BeLionel(x)) -> (InPokemonSeries(x) | SupportsSimulation(x)))", "(VideoGame(BeLionel) | SupportsSimulation(BeLionel,footballGames))", "((VideoGameNamedBeLionel) & PokemonSeries(Poker)) | SupportsSimulation(Simulation(Simulation(Simulation(Simulation(Simulation)))", "all x y.((VideoGame(x) & PokemonSeries(y) & BeLionel(x)) -> (SupportsPlayingOnline(x,y) | SimulatesPlayingOnline(x,y)))", "(exists x.(VideoGame(x) & BeLionel(x)) & (InPokemonSeries(x) | SupportsSimulation(x)) & Online(x)))", "all x.(BeLionel(x) -> (InPokemonSeries(x) | SupportsSimulationOfFootballGamesOnline(x)))", "all x.((VideoGame(x) & BeLionel(x)) -> (PokemonSeries(x) | SupportsSimulation(x)))", "all x.(VideoGame(x) -> (BeLionel(x) | SupportsSimulation(x)))", "all x.((VideoGame(x) & PokemonSeries(x)) | SupportsSimulation(x))"]}
{"id": "folio_train_1463", "nl": "The video game \"Be Lionel\" is in the pokemon series.", "fol": "InPokemonSeries(BeLionelGame)", "prediction": ["all x.((VideoGame(x) & BeLionel(x)) -> InPokemonSeries(x))", "(Pokemon(BeLionel) & InPokemonSeries(BeLionel))", "all x.(BeLionel(x) -> InPokemonSeries(x))", "\"BeLionel\" is in the pokemon series.", "(Pokemon(videogame) & \"BeLionel\" & InPokemonSeries(videogame))", "(InPokemonSeries(videogame) & \"BeLionel\" & InPokemonSeries(videogame))", "the video game \"BeLionel\" is in the pokemon series.", "(VideoGame(BeLionel) & InPokemonSeries(BeLionel))", "\"BeLionel\" is a video game in the pokemon series.", "all x y.((VideoGame(x) & PokemonSeries(y) & BeLionel(x)) -> InSeries(x,y))", "(PokemonSeries(VideoGame) & \"BeLionel\")", "all x.(VideoGame(x) -> (BeLionel(x) | InPokemonSeries(x)))", "\"BeLionel\" - InPokemonSeries(x))", "all x.((VideoGame(x) & BeLionel(x)) -> InPokemonSeries(x))", "(PokemonSeries(VideoGame) & \"BeLionel\" & InSeries(Pokemon))", "all x.(BeLionel(x) -> InPokemonSeries(x))"]}
{"id": "folio_train_1464", "nl": "The video game named \u201cBe Lionel\u201d is not in the FIFA series or supports the PS4 platform.", "fol": "-(InFIFASeries(BeLionelGame) & SupportsPS4Platform(BeLionelGame))", "prediction": ["(VideoGame(BeLionel) & -(InFifaSeries(BeLionel) | SupportsPS4(BeLionel))))", "all x.((VideoGame(x) & BeLionel(x)) -> (-InFifaSeries(x) & -SupportsPS4Platform(x)))", "(-(VideoGame(BeLionel) & -InFifaSeries(BeLionel)) | SupportsPS4(BeLionel)))", "(-InFueltballSeries(BeLionel) & -SupportsPS4(BeLionel))", "all x.(VideoGame(x) -> (-InFifaSeries(x) | SupportsPS4Platform(x)))", "-(VideoGame(x) & BeLionel(x)) -> -(InFifaSeries(x) | SupportsPS4Platform(x)))", "(VideoGame(BeLionel) & -InFifaSeries(BeLionel) & -SupportsPS4(BeLionel))", "\u201cBeLionel\u201d video game & -(InFueltballSeries(f) | SupportsPS4Platform(f)))", "all x.(VideoGame(x) -> (BeLionel(x) & -InFifaSeries(x) & -SupportsPS4Platform(x)))", "all x.(BeLionel(x) -> (-InFifaSeries(x) & -SupportsPS4Platform(x)))", "-(VideoGame(x) & BeLionel(x)) & -(FootballSeries(x) | PS4Platform(x)))", "the video game named \u201cBeLionel\u201d -(InFifaSeries(x) | SupportsPS4Platform(x)))", "-(VideoGame(x) & BeLionel(x)) -> (-InFifaSeries(x) & -SupportsPS4Platform(x)))", "(VideoGame(BeLionel) -(InFueltballSeries(BeLionel) | SupportsPS4(BeLionel)))", "((VideoGame(x) & BeLionel(x)) & -InFifaSeries(x) & -SupportsPS4(x))", "(VideoGame(BeLionel) & -(InFifaSeries(BeLionel) | SupportsPS4(BeLionel)))"]}
{"id": "folio_train_1465", "nl": "The video game named \u201cBe Lionel\u201d is in the FIFA series or supports the PS4 platform.", "fol": "(InFIFASeries(BeLionelGame) | SupportsPS4Platform(BeLionelGame))", "prediction": ["all x.((VideoGame(x) & BeLionel(x)) -> (InFifaSeries(x) | SupportsPS4Platform(x)))", "(VideoGame(BeLionel) & (InFifaSeries(BeLionel) | SupportsPS4Platform(BeLionel)))", "(InFootballSeries(BeLionel) | SupportsPS4Platform(BeLionel))", "all x.((VideoGame(x) & BeLionel(x)) -> (InFootballSeries(x) | SupportsPS4Platform(x)))", "(VideoGame(BeLionel) & (InFifaSeries(BeLionel) | SupportsPS4Platform(BeLionel)))", "all x.((VideoGame(x) & BeLionel(x)) -> (InFifaSeries(x) | SupportsPS4Platform(x)))", "all x.(VideoGame(x) -> (BeLionel(x) | SupportsPS4(x)))", "(VideoGame(BeLionel) -> (InFifaSeries(BeLionel) | SupportsPS4Platform(BeLionel)))", "all x.(BeLionel(x) -> (InFootballSeries(x) | SupportsPS4Platform(x)))", "(VideoGame(BeLionel) | SupportsPS4Platform(BeLionel))", "all x.((VideoGame(x) & BeLionel(x)) -> (InFootballSeries(x) | SupportsPS4Platform(x)))", "exists x.(VideoGame(x) & -(BeLionel(x) & (InFifaSeries(x) | SupportsPS4Platform(x))))", "(BeLionel(VideoGame) | SupportsPS4(VideoGame))", "(VideoGame(BeLionel) | SupportsPS4(BeLionel)))", "all x.(VideoGame(x) -> (BeLionel(x) | SupportsPS4Platform(x)))", "All x.(VideoGame(x) -> (BeLionel(x) | SupportsPS4(x)))"]}
{"id": "folio_train_1466", "nl": "The video game named \u201cBe Lionel\u201d  is not in the FIFA or Pokemon series.", "fol": "(-InFIFASeries(BeLionelGame) & -InPokemonSeries(BeLionelGame))", "prediction": ["-(VideoGame(x) & BeLionel(x)) -> (-InFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFastFa", "(VideoGame(BeLionel) & -(FastFame(FastFameSeries) | PokemonSeries(FastFamily))))", "-(VideoGame(x) & BeLionel(x)) -> -(FamousSeries(x) | PokemonSeries(x)))", "all x.((VideoGame(x) & BeLionel(x)) -> -(InFamousSeries(x) | InPokemonSeries(x))))", "(VideoGame(BeLionel) & -(InFastFamousSeries(BeLionel) | InPokemonSeries(BeLionel))))", "(-(VideoGame(BeLionel) & -(FastFamousSeries(BeLionel) | PokemonSeries(BeLionel))))", "all x.(VideoGame(x) -> (BeLionel(x) & -(FastFame(x) | Pokemon(x))))", "(VideoGame(BeLionel) & -(FamousSeries(BeLionel) | PokemonSeries(BeLionel))))", "\u201cBeLionel\u201d video game & -(InFifa(f) | InPokemon(f)))", "the video game named \u201cBeLionel\u201d -(InFamousSeries(x) | InPokemonSeries(x)))", "(VideoGame(x) & -(FastFamous(x) | Pokemon(x))))", "(VideoGame(BeLionel) -(InFastFamousSeries(BeLionel) | InPokemonSeries(BeLionel))))", "all x.(VideoGame(x) -> (BeLionel(x) & -(FamousSeries(x) | PokemonSeries(x))))", "all x.(VideoGame(x) -> (BeLionel(x) & -(FastFamousSeries(x) | PokemonSeries(x))))", "(VideoGame(BeLionel) & -(FastFame(BeLionel) | Pokemon(BeLionel))))", "-(VideoGame(x) & BeLionel(x)) & -(InFamousSeries(x) | InPokemonSeries(x)))"]}
{"id": "folio_train_1467", "nl": "No payment cards issued by Russian banks can be used with ApplePay.", "fol": "all x.(IssuedByRussianBanks(x) -> -CanUseApplePay(x))", "prediction": ["all x.((PaymentCard(x) & IssuedByRussicBanks(x)) -> CanBeUsedWithApplePay(x))", "-exists x.(PaymentCard(x) & IssuedByRussicBank(x) & ApplePay(x))", "all x.((PaymentCard(x) & IssuedByRussianBanks(x)) -> CanBeUsedWithApplePay(x))", "-exists x.(PaymentCard(x) & IssuedByRussianBanks(x) & CanBeUsedWithApplePay(x))", "all x y.((PaymentCard(x) & RussianBank(y) & IssuedBy(x,y)) -> CanBeUsedWithApplePay(x))", "(exists x.(PaymentCard(x) & IssuedByRussicBanks(x)) & -CanBeUsedWithApplePay(x))", "-exists x.(PaymentCard(x) & IssuedByRussicalBanks(x) & CanBeUsedWithApplePay(x))", "all x.((PaymentCard(x) & IssuedByRussicBank(x)) -> CanBeUsedWithApplePay(x))", "(exists x.(PaymentCard(x) & IssuedBy(x,Russia)) & -CanBeUsedWithApplePay(x))", "-exists x.((PaymentCard(x) & IssuedByRussicBanks(x)) -> CanBeUsedWithApplePay(x))", "all x.((PaymentCard(x) & IssuedByRussianBanks(x)) -> CanBeUsedWithApplePay(x))", "-exists x.(PaymentCard(x) & IssuedByRussianBanks(x) & ApplePay(x))", "all x y.((PaymentCard(x) & RussianBank(y)) -> -CanBeUsedWithApplePay(x,y))", "(-exists x.(PaymentCard(x) & IssuedBy(x,RussianBanks)) & ApplePay(x))", "all x.((PaymentCard(x) & IssuedByRussicalBanks(x)) -> CanBeUsedWithApplePay(x))", "-exists x.(PaymentCard(x) & IssuedByRussicBank(x) & CanBeUsedWithApplePay(x))"]}
{"id": "folio_train_1468", "nl": "All MIR payment cards are issued by Russian banks.", "fol": "all x.(MIRPaymentCards(x) -> IssuedByRussianBanks(x))", "prediction": ["all x.(MIRPaymentCard(x) -> IssuedByRussianBanks(x))", "all x.(MIRPaymentCard(x) -> IssuedByRussicBanks(x))", "all x y.((MIRPaymentCard(x) & RussianBank(y)) -> IssuedBy(x,y))", "(all x.(MIRPaymentCard(x) -> IssuedByRussianBanks(x)))", "all x.((PaymentCard(x) & IssuedByRussianBanks(x)) -> MIR(x))", "all x.(MIR(x) -> IssuedByRussianBanks(x))", "(all x.(MIRPaymentCard(x) -> IssuedByRussicBanks(x)))", "all x y.((MIRPaymentCard(x) & Bank(y)) -> IssuedBy(x,y))", "all x.(MIRPaymentCard(x) -> IssuedByRussianBanks(x))", "ALL TEXT(MIR(M) -> IssuedByRussianBanks(Mir,Mir,Mir))", "all x.((PaymentCard(x) & IssuedByRussicBanks(x)) -> MIR(x))", "all x y.((MIRPaymentCard(x) & RussianBank(y)) -> IssuedBy(x,y))", "all x.(MIRPaymentCard(x) -> IssuedByBank(x))", "(all x.(MIRPaymentCard(x) -> IssuedByRussianBanks(x)))", "all x.(MIRPaymentCard(x) -> IssuedByRussicBank(x))", "all x.(MIRPaymentCard(x) -> IssuedByRussianBanks(x))"]}
{"id": "folio_train_1469", "nl": "Some international payment cards can be used with ApplePay.", "fol": "exists x.(InternationalPaymentCards(x) -> CanUseApplePay(x))", "prediction": ["exists x.(InternationalPaymentCard(x) & CanBeUsedWithApplePay(x))", "exists x.(InternationalPaymentCard(x) & CanBeUsedWithApplePay(x))", "exists x.(InternationalPaymentCard(x) & CanBeUsedWithApplePay(x))", "exists x y.(InternationalPaymentCard(x) & ApplePay(y) & UsedWith(x,y))", "exists x.(InternationalPaymentCard(x) & ApplePay(x))", "exists x.(InternationalPaymentCard(x) & ApplePay(x))", "exists x.(InternationalPaymentCard(x) & UsedWithApplePay(x))", "exists x y.(InternationalPaymentCard(x) & ApplePay(y) & UsedWith(x,y))", "exists x.(InternationalPaymentCard(x) & CanBeUsedWithApplePay(x))", "exists x.(InternationalPaymentCard(x) & ApplePay(x))", "exists x.(InternationalPaymentCard(x) & UsedWithApplePay(x))", "exists x.(InternationalPaymentCard(x) & CanBeUsedWithApplePay(x))", "exists x.(InternationalPaymentCard(x) & ApplePay(x))", "exists x.(InternationalPaymentCard(x) & UsesApplePay(x))", "exists x.(InternationalPaidCard(x) & UsedWithApplePay(x))", "exists x.(InternationalPaymentCard(x) & CanBeUsedWithApplePay(x))"]}
{"id": "folio_train_1470", "nl": "Social payments in Russia can only be transferred to MIR payment cards.", "fol": "all x.(SocialPaymentsInRussia(x) -> MIRPaymentCards(x))", "prediction": ["all x.((SocialPayment(x) & InRussia(x)) -> TransferableToMIRPaymentCards(x))", "all x y.((SocialPayment(x) & SocialPayment(y) & InRussia(x,y)) -> CanBeTransferredToMIRPaymentCards(x))", "all x.((SocialPayment(x) & InRussland(x)) -> TransferableToMIRPaymentCards(x))", "all x.((SocialPayment(x) & InRussia(x)) -> CanBeTransferredToMIRPaymentCards(x))", "(all x.(SalaryPayment(x) -> TransferableToMIRPaymentCards(x)))", "all x y.((SocialPayment(x) & SocialPayment(y)) -> TransferableToMIRPaymentCard(x,y))", "(all x.(SecurityPaid(x,Russia) -> TransferableToMIRPaymentCards(x)))", "all x y z.((SocialPayment(x) & SocialPayment(y) & MIRPaymentCard(z)) -> CanTransfer(x,y,z))", "all x.((SocialPayment(x) & InRussland(x)) -> CanBeTransferredToMIRPaymentCards(x))", "all x y.((SocialPayment(x) & Russia(y)) -> CanBeTransferredToMIRPaymentCards(x,y))", "all x.((SocialPaid(x) & TransferableToMIRPaymentCards(x)) -> CanBeTransferredToMIRPaymentCards(x))", "all x.(SocialPayment(x) -> TransferableToMIRPaymentCards(x))", "all x y.((SocialPayment(x) & SocialPayment(y) & InRussia(x,y)) -> TransferableToMIRPaymentCards(x))", "all x y.((SocialPayment(x) & InRussia(y)) -> CanBeTransferredToMIRPaymentCards(x,y))", "all x.(SecurePayment(x) -> TransferableToMIRPaymentCards(x))", "all x.((SocialPayment(x) & InRussia(x)) -> TransferableToMIRPaymentCards(x))"]}
{"id": "folio_train_1471", "nl": "Bank of America payment cards can be used with ApplePay.", "fol": "CanUseApplePay(BankOfAmericaPaymentCards)", "prediction": ["all x.(BankOfAmericaPaymentCard(x) -> CanBeUsedWithApplePay(x))", "all x y.((BankOfAmerica(x) & ApplePay(y)) -> CanBeUsedWith(x,y))", "all x y.((BankOfAmericaPaymentCard(x) & ApplePay(y)) -> CanBeUsedWith(x,y))", "(All x.(BankOfAmericaPaymentCard(x) -> CanBeUsedWithApplePay(x)))", "all x.((BankOfAmerica(x) & PaymentCard(x)) -> CanBeUsedWithApplePay(x))", "all x.(BankOfAmericaPaymentCard(x) -> CanBeUsedWithApplePay(x))", "(ApplePaymentCards(BankOfAmerica))", "(ApplePay) -> BankOfAmericaPaymentCard(BankOfAmerica))", "all x.(BankOfAmerica(x) -> CanBeUsedWithApplePay(x))", "all x y.((BankOfAmerica(x) & ApplePay(y)) -> CanBeUsedWith(x,y))", "all x y.((BankOfAmericaPaymentCard(x) & ApplePay(y)) -> CanBeUsedWith(x,y))", "all x.(BankOfAmericaPaymentCard(x) -> CanBeUsedWithApplePay(x))", "all x.(PaymentCard(x) -> ApplePay(x))", "all x y.((BankOfAmerica(x) & ApplePay(y)) -> CanBeUsedWith(x,y))", "all x y.((BankOfAmericaPaymentCard(x) & ApplePay(y)) -> CanBeUsedWith(x,y))", "all x.(BankOfAmericaPaymentCard(x) -> CanBeUsedWithApplePay(x))"]}
{"id": "folio_train_1472", "nl": "Bank of America payment cards are international.", "fol": "all x.(BankOfAmericaCard(x) -> InternationalPaymentCards(x))", "prediction": ["all x.(BankOfAmericaPaymentCard(x) -> International(x))", "all x.(BankOfAmerica(x) -> PaymentCard(x))", "(International(BankOfAmericaPaymentCards) & International(BankOfAmericaPaymentCards))", "all x y.((BankOfAmerica(x) & PaymentCard(y)) -> International(y))", "all x.(BankOfAmericaPaymentCard(x) -> International(x))", "(InternationalPaymentCards(BankOfAmerica))", "all x.(BankOfAmerica(x) -> PaymentCard(x))", "all x y.((BankOfAmerica(x) & PaymentCard(y)) -> International(x))", "all x y.((BankOfAmericaPaymentCard(x) & BankOfAmerica(y)) -> International(x))", "all x.(BankOfAmericaPaymentCard(x) -> International(x))", "(InternationalPaymentCards(BankOfAmerica))", "all x.(PaymentCard(x) -> International(x))", "all x.(BankOfAmerica(x) -> PaymentCard(x))", "all x y.((BankOfAmerica(x) & PaymentCard(y)) -> International(y))", "all x.(BankOfAmericaPaymentCard(x) -> International(x))", "All x.(BankOfAmericaPaymentCard(x) -> International(x))"]}
{"id": "folio_train_1473", "nl": "Bank of America payment cards are international and can be used to transfer social payments in Russia.", "fol": "(InternationalPaymentCards(BankOfAmericaPaymentCards) & SocialPaymentsInRussia(BankOfAmericaPaymentCards))", "prediction": ["all x.(BankOfAmericaPaymentCard(x) -> (International(x) & TransfersSocialPayments(x) & InRussia(x)))", "all x y.((BankOfAmericaPaymentCard(x) & Russia(y)) -> (International(x) & TransfersSocialPayments(x,y)))", "all x.(BankOfAmerica(x) -> (InternationalPaymentCard(x) & TransferSocialPayments(x) & InRussia(x)))", "all x y.((BankOfAmerica(x) & PaymentCard(y)) -> (International(x) & TransfersSocialPayments(y,Russia)))", "all x.(BankOfAmericaPaymentCard(x) -> (International(x) & TransfersSocialPayments(x)))", "(International(BankOfAmericaPaymentCards) & TransfersSocialPaymentsInRussia(BankOfAmericaCards))", "all x y.((BankOfAmericaPaymentCard(x) & BankOfAmerica(y)) -> (International(x) & TransfersSocialPayments(x,y)))", "all x y z.((BankOfAmericaPaymentCard(x) & SocialPayment(y) & Russia(z)) -> (International(x,y) & Transfers(x,z)))", "(InternationalPaymentCards(BankOfAmerica) & TransfersSocialPayments(BankOfAmerica))", "all x.(BankOfAmerica(x) -> (InternationalPaymentCards(x) & TransfersSocialPayments(x) & InRussia(x)))", "(InternationalPaymentCards(BankOfAmerica) & TransferSocialPaymentsInRussia(BankOfAmerica))", "all x.(BankOfAmericaPaymentCard(x) -> (International(x) & TransfersSocialPayments(x) & InRussia(x)))", "all x y.((BankOfAmerica(x) & PaymentCard(y)) -> (International(y) & TransfersSocialPayments(y,Russia)))", "all x.(BankOfAmerica(x) -> (InternationalPaymentCards(x) & TransfersSocialPayments(x) & InRussia(x)))", "all x.(BankOfAmericaPaymentCard(x) -> (International(x) & TransferSocialPayments(x) & InRussia(x)))", "all x.(BankOfAmericaPaymentCard(x) -> (International(x) & TransfersSocialPaymentsInRussia(x)))"]}
{"id": "folio_train_1474", "nl": "If Bank of America payment cards are international or issued by Russian banks, then they can not be used to transfer social payments in Russia.", "fol": "((InternationalPaymentCards(BankOfAmericaPaymentCards) | SocialPaymentsInRussia(BankOfAmericaPaymentCards)) -> -SocialPaymentsInRussia(BankOfAmericaPaymentCards))", "prediction": ["all x.((BankOfAmericaPaymentCards(x) & International(x) & IssuedByRussianBanks(x)) -> -TransferSocialPaymentsInRussia(x))", "all x.((BankOfAmericaPaymentCards(x) & (International(x) | IssuedByRussBanks(x))) -> -TransferSocialPayments(x))", "all x.((BankOfAmericaPaymentCard(x) & International(x) & IssuedByRussianBanks(x)) -> -TransferSocialPaymentsInRussia(x))", "all x.((BankOfAmerica(x) & (International(x) | IssuedByRussianBanks(x))) -> -TransferSocialPayments(x))", "all x y.((BankOfAmericaPaymentCard(x) & (International(x) | IssuedByRussianBanks(x))) -> -TransferSocialPaymentsInRussia(y))", "all x y.((BankOfAmerica(x) & PaymentCard(y) & International(y) & IssuedByRussianBanks(x)) -> -TransferSocialPaymentsInRussia(x,y))", "all x y.((BankOfAmericaPaymentCard(x) & International(x) & IssuedByRussicBanks(x)) -> -TransferSocialPaymentsInRussia(y))", "all x.((BankOfAmericaPaymentCards(x) & International(x) & IssuedByRussianBanks(x)) -> -TransferSocialPayments(x))", "all x.((BankOfAmericaPaymentCard(x) & (International(x) | IssuedByRussicBanks(x))) -> -TransfersSocialPayments(x))", "all x y.((BankOfAmericaPaymentCard(x) & (International(x) | IssuedByRussianBanks(x)) & RussianBank(y)) -> -TransferSocialPayments(x,y))", "all x.(BoardOfAmericaPaymentCards(x) -> (InternationalCards(x) | IssuedByRussianBanks(x)) & -TransferSocialPaymentsInRussia(x)))", "all x.((BankOfAmerica(x) & (International(x) | IssuedByRussBanks(x))) -> -TransferSocialPayments(x))", "(all x.((BankOfAmericaPaymentCards(x) & International(x)) | IssuedByRussBanks(x))) -> -TransferSocialPayments(x))", "all x.((BankOfAmericaPaymentCards(x) & (International(x) | IssuedByRussicBanks(x))) -> -TransfersSocialPayments(x,Russia))", "(all x.(BoardOfAmericaPaymentCards(x) -> (International(x) | IssuedByRussianBanks(x))))", "all x.((BoardOfAmericaPaymentCards(x) & International(x) & IssuedByRussianBanks(x)) -> -TransferSocialPaymentsInRussia(x))"]}
{"id": "folio_train_1475", "nl": "The Lumina APV is produced by Chevrolet. ", "fol": "ProducedByChevrolet(LuminaAPV)", "prediction": ["all x.(LuminaAPV(x) -> ProducedBy Chevrolet(x))", "all x y.((LuminaAPV(x) & Chevrolet(y)) -> ProducedBy(x,y))", "(ProducedBy Chevrolet(LuminaAPV) & LuminaAPV(Lumina))", "LuminaAPV (Lumina) & Chevrolet(Cellar))", "all x.(LuminaAPV(x) -> ProducedBy Chevrolet(x))", "(ProducedByCelofax(LuminaAPV)", "the Chevrolet Lumina APV.", "all x y.((Lumina(x) & Chevrolet(y)) -> ProducedBy(x,y))", "all x y.((LuminaAPV(x) & Chevrolet(y)) -> ProducedBy(x,y))", "LuminaAPV (Lumina) & Chevrolet(Clothing))", "(ProducedByCylinder(LuminaAPV)", "all x.(LuminaAPV(x) -> ProducedBy Chevrolet(x))", "All x.(LuminaAPV(x) -> ProducedByChevrolett(x))", "(ProducedBy Chevrolet)", "All x.(LuminaAPV(x) -> ProducedBy Chevrolet(x))", "All x.(LuminaAPV(x) -> ProducedByCelofax(x))"]}
{"id": "folio_train_1476", "nl": "The Astro is a van produced by Chevrolet. ", "fol": "(ProducedByChevrolet(Astro) & IsVan(Astro))", "prediction": ["all x.(Astro(x) -> (Van(x) & ProducedBy(x, Chevrolet)))", "(ProducedBy(Astro(Astro) & Chevrolet(Astro))", "The Astro is a van produced by Chevrolet.", "(Van(Astro) & ProducedByCelofax(Astro))", "(ProducedByCelod Chevrolet(Astro) & Van(Astro))", "all x.(Astro(x) -> (Van(x) & ProducedByCelofax(x)))", "all x y.((Van(x) & Chevrolet(y)) -> ProducedBy(x,y))", "the Astro(Van) & ProducedByCelofax(Van))", "The Astro is a van produced by Chevrolet.", "All x.(Astro(x) -> (Van(x) & ProducedBy(x, Chevrolet)))", "(ProducedByColorado(Astro) -> Van(Astro))", "All x.(Astro(x) -> (Van(x) & ProducedByCelofax(x)))", "All x.((Van(x) & Chevrolet(x)) -> Astro(x))", "all x y.((Van(x) & Chevrolet(y)) -> ProducedBy(x,y))", "All x.(Astro(x) -> ProducedByCelofax(x))", "all x.(Astro(x) -> (Van(x) & ProducedBy Chevrolet(x)))"]}
{"id": "folio_train_1477", "nl": "Cars produced by Chevrolet are either cars or vans.", "fol": "all x.(((ProducedByChevrolet(x) -> IsCar(x)) & -IsVan(x)) | (-(ProducedByChevrolet(x) -> IsCar(x)) & IsVan(x)))", "prediction": ["all x.(Car(x) -> (ProducedByChevrolet(x) | ProducedByChevrolet(x)))", "all x.(Car(x) -> (ProducedBy(x,Chevrolet) | ProducedBy(x,Van)))", "all x.((Car(x) & Chevrolet(x)) -> (Car(x) | Van(x)))", "all x y.((Car(x) & Chevrolet(y)) -> (Car(x) | Van(x)))", "all x.(Car(x) -> (ProducedByChevrolet(x) | ProducedByVan(x)))", "all x.((Car(x) & ProducedBy Chevrolet(x)) -> (Car(x) | Van(x)))", "(all x.(Car(x) -> (ProducedByChevrolet(x) | ProducedByChevrolet(x))))", "all x y.((Car(x) & Chevrolet(y) & ProducedBy(x,y)) -> (Car(x) | Van(x)))", "all x.(Car(x) -> (ProducedBy(x,Cell) | ProducedBy(x,Van)))", "all x.((Car(x) & ChevroletProduced(x)) -> (Car(x) | Van(x)))", "all x y.((Car(x) & Chevrolet(y)) -> (Car(x) | Van(x)))", "(all x.(Car(x) -> ChevroletCar(x)) | (Car(x) & Van(x))))", "all x.(Car(x) -> (Car(x) | Van(x)))", "all x y.((Car(x) & Chevrolet(y) & ProducedBy(x,y)) -> (Car(x) | Van(x)))", "all x.(Chevrolet(x) -> (Car(x) | Van(x)))", "exists x.(Car(x) & Chevrolet(x) & (Car(x) | Van(x)))"]}
{"id": "folio_train_1478", "nl": "The Lumina APV is van.", "fol": "IsVan(LuminaAPV)", "prediction": ["all x.(LuminaAPV(x) -> Van(x))", "(Van(Lumina) & Van(Lumina))", "LuminaAPV (Van)", "all x.(LuminaAPV(x) -> Van(x))", "All x y.((LuminaAPV(x) & Van(y)) -> Is(x,y))", "(Van(Lumina) & Van(Lumina))", "LuminaAPV is van.", "the LuminaAPV is van.", "All x.(LuminaAPV(x) -> Van(x))", "(Van(Lumina) & Van(Lumina))", "all x.(LumenaAPV(x) -> Van(x))", "all x.(LuminaAPV(x) -> Van(x))", "All x.(LuminaAPV(x) -> Van(x))", "all x.(LuminaAPV(x) -> Van(x))", "All x.(LuminaAPV(x) -> Van(x))", "all x.(LuminaAPV(x) -> Van(x))"]}
{"id": "folio_train_1479", "nl": "The Lumina APV is either a car or a van.", "fol": "(IsCar(LuminaAPV) | IsVan(LuminaAPV))", "prediction": ["all x.(LuminaAPV(x) -> (Car(x) | Van(x)))", "all x.(LuminaAPV(x) -> (Car(x) | Van(x)))", "all x y.((LuminaAPV(x) & Car(y)) | Van(y)) -> (Car(x) | Van(x)))", "(Car(Lumina) | Van(Lumina))", "all x.(LuminaAPV(x) -> (Car(x) | Van(x)))", "(Car(Lumina) | Van(Lumina))", "all x y.((LuminaAPV(x) & Car(y)) | Van(y))", "all x.(LuminaAPV(x) -> (Car(x) | Van(x)))", "(Car(Lumina) | Van(Lumina))", "(Car(Lumina) | Van(Lumina,Lumina))", "all x.(LuminaAPV(x) -> (Car(x) | Van(x)))", "all x.(LuminaAPV(x) -> (Car(x) | Van(x)))", "all x.(LuminaAPV(x) -> (Car(x) | Van(x)))", "exists x.(LuminaAPV(x) & Car(x) & Van(x))", "all x.(LuminaAPV(x) -> (Car(x) | Van(x)))", "all x.(LuminaAPV(x) -> (Car(x) | Van(x)))"]}
{"id": "folio_train_1480", "nl": "The Astro is a van.", "fol": "IsVan(Astro)", "prediction": ["all x.(Astro(x) -> Van(x))", "(Van(Astro) & Van(Astro))", "The Astro is a Van(a)", "all x.(Astro(x) -> Van(x))", "(Van(Astro) & Van(Astro))", "The Astro is a van.", "All x.(Astro(x) -> Van(x))", "(Van(Astro) & HasVan(Astro) & HasVan(Astro))", "(Van(Astro) & Van(Astro))", "all x.((Astro(x) & Van(x)) -> Has(x,y))", "all x.(Astro(x) -> Van(x))", "All x.(Astro(x) -> Van(x))", "all x.(Astro(x) -> Van(x))", "all x.(Astro(x) -> Van(x))", "All x.(Astro(x) -> Van(x))", "All x.(Astro(x) -> Van(x))"]}
{"id": "folio_train_1481", "nl": "The Astro is a car.", "fol": "IsCar(Astro)", "prediction": ["all x.(Astro(x) -> Car(x))", "(Car(Astro))", "(Car(Astro) & Car(Astro))", "all x.(Astro(x) -> Car(x))", "the Astro is a car.", "The Astro is a Car(a)", "all x.(Astro(x) -> Car(x))", "all x.((Astro(x) & Car(x)) -> Car(x))", "(Car(Astro))", "All x.(Astro(x) -> Car(x))", "all x.((Astro(x) & Car(x)) -> Car(x))", "all x.(Astro(x) -> Car(x))", "All x.(Astro(x) -> Car(x))", "all x.(Astro(x) -> Car(x))", "All x.(Astro(x) -> Car(x))", "All x.(Astro(x) -> Car(x))"]}
{"id": "folio_train_1482", "nl": "Everyone who works in person is a commuter.", "fol": "all x.(WorksInPerson(x) -> IsCommuter(x))", "prediction": ["all x.(WorksInPerson(x) -> Commuter(x))", "all x.(WorksInPerson(x) -> Commuter(x))", "all x.((WorksInPerson(x) & WorksInPerson(x)) -> Commuter(x))", "all x y.((WorksInPerson(x) & Person(y)) -> Commuter(x))", "all x.(WorksInPerson(x) -> Commuter(x))", "all x y.((WorksInPerson(x) & WorksInPerson(x)) -> Commuter(y))", "all x.((WorksInPerson(x) & WorksInPerson(x)) -> Commuter(x))", "all x y.((WorksInPerson(x) & Person(y) & WorksInPerson(x)) -> Commuter(x))", "all x.(WorksInPerson(x) -> Commuter(x))", "all x.((WorksInPerson(x) & WorksInPerson(x)) -> Commuter(x))", "all x.(WorksInPerson(x) -> Commuter(x))", "all x.((WorksInPerson(x) & WorksInPerson(x)) -> Commuter(x))", "all x.(WorksInPerson(x) -> Commuter(x))", "exists x.(WorkingInPersonal(x) & Commuter(x))", "all x.(WorksInPerson(x) -> Commuter(x))", "all x.(WorksInPerson(x) -> Commuter(x))"]}
{"id": "folio_train_1483", "nl": "People either work in person or work from home.", "fol": "all x.((WorksInPerson(x) & -WorksFromHome(x)) | (-WorksInPerson(x) & WorksFromHome(x)))", "prediction": ["all x.(Person(x) -> (WorksInPerson(x) | WorksFromHome(x)))", "all x.(WorksInPerson(x) | WorksFromHome(x))", "all x.(Person(x) -> (WorksInPerson(x) | WorkesFromHome(x)))", "all x y.((Person(x) & WorkInPerson(x)) | WorkFromHome(y)) -> WorksInPerson(x))", "all x y.((Person(x) & Person(y)) -> (WorksIn(x,y) | WorksFromHome(x,y)))", "all x.(Person(x) -> (WorksInPerson(x) | WorksFromHome(x)))", "exists x.(Person(x) & (WorkInPerson(x) | WorkFromHome(x)))", "all x.(WorksInPerson(x) | WorkFromHome(x))", "exists x.(People(x) & (WorkInPerson(x) | WorkFromHome(x)))", "all x y.((Person(x) & WorkInPerson(x)) | WorkFromHome(y)) -> WorksInPerson(x))", "exists x.(Person(x) & (WorkInPerson(x) | WorkFromHome(x)))", "all x y.((Person(x) & Person(y)) -> (WorkIn(x,y) | WorkFromHome(x,y)))", "all x y.(WorksInPerson(x) | WorkFromHome(y))", "exists x.(Person(x) & (WorksInPerson(x) | WorkesFromHome(x)))", "exists x.(Person(x) & (WorkInPerson(x) | WorkFromHome(x)))", "exists x.(Person(x) & (WorksInPerson(x) | WorksFromHome(x)))"]}
{"id": "folio_train_1484", "nl": "Everyone who works from home has a relaxed schedule.", "fol": "all x.(WorksFromHome(x) -> HasRelaxedSchedule(x))", "prediction": ["all x.(WorksFromHome(x) -> RelaxedSchedule(x))", "(WorksFromHome(x) -> RelaxedSchedule(x))", "all x.(WorksFromHome(x) -> RelaxedSchedule(x))", "all x y.((WorksFromHome(x) & WorkesFromHome(y)) -> RelaxedSchedule(x))", "all x.((WorksFromHome(x) & RelaxedSchedule(x)) -> WorksFromHome(x))", "all x.(WorksFromHome(x) -> RelaxedSchedule(x))", "all x y.((WorksFromHome(x) & WorkesFromHome(y)) -> RelaxedSchedule(x))", "all x y.((WorksFromHome(x) & WorksFromHome(y)) -> RelaxedSchedule(x))", "all x.((WorksFromHome(x) & RelaxedSchedule(x)) -> WorksFromHome(x))", "all x.(WorksFromHome(x) -> RelaxedSchedule(x))", "all x y.((WorksFromHome(x) & WorkesFromHome(y)) -> RelaxedSchedule(x))", "all x.(WorksFromHome(x) -> RelaxedSchedule(x))", "all x.(WorksFromHome(x) -> RelaxedSchedule(x))", "all x.(WorksFromHome(x) -> RelaxedSchedule(x))", "all x.(WorksFromHome(x) -> RelaxedSchedule(x))", "exists x.(WorksFromHome(x) & RelaxedSchedule(x))"]}
{"id": "folio_train_1485", "nl": "George is either a commuter or has a home office setup.", "fol": "((IsCommuter(George) & -HasHomeOfficeSetup(George)) | (-IsCommuter(George) & HasHomeOfficeSetup(George)))", "prediction": ["all x.(George(x) -> (Commuter(x) | HomeOfficeSetup(x)))", "(Commuter(George) | HomeOfficeSetup(George))", "all x.(George(x) -> (Commuter(x) | HomeOfficeSetup(x)))", "(Commuter(George) | HomeOfficeSetup(George))", "all x y.((George(x) & Commuter(x)) | HomeOfficeSetup(y)) -> (Commuter(x) | HomeOfficeSetup(x)))", "all x.(George(x) -> (Commuter(x) | HomeOfficeSetup(x)))", "all x.(George(x) -> (Commuter(x) | HomeOfficeSetup(x)))", "(Commuter(George) | HomeOfficeSetup(George))", "all x.(George(x) -> (Commuter(x) | HomeOfficeSetup(x)))", "all x.(Greg(x) -> (Commuter(x) | HomeOfficeSetup(x)))", "(Commuter(George) | HomeOfficeSetup(George))", "(Commuter(Greg) | HomeOfficeSetup(Greg)))", "exists x.(Commuter(x) | HomeOfficeSetup(x))", "all x.(George(x) -> (Commuter(x) | HomeOfficeSetup(x)))", "all x.(George(x) -> (Commuter(x) | HomeOfficeSetup(x)))", "all x.(George(x) -> (Communicator(x) | HomeOfficeSetup(x)))"]}
{"id": "folio_train_1486", "nl": "If George is either a person who works from home or has a home office setup, then George is not a person who works from home and a commuter.", "fol": "(((WorksFromHome(George) & -HasHomeOfficeSetup(George)) | (-WorksFromHome(George) & HasHomeOfficeSetup(George))) -> -(WorksFromHome(George) & IsCommuter(George)))", "prediction": ["all x.((Person(x) & WorksFromHome(x)) | HomeOfficeSetup(x)) -> -(WorksFromHome(x) & Commuter(x)))", "all x.((George(x) & (WorksFromHome(x) | HasHomeOfficeSetup(x))) -> -(WorksFromHome(x) & Commuter(x)))", "all x.((Person(x) & WorksFromHome(x)) | HomeOfficeSetup(x)) -> -WorksFromHome(x) & Commuter(x))", "all x.((Person(x) & (WorksFromHome(x) | HomeOfficeSetup(x))) -> -WorksFromHome(x) & Commuter(x))", "(WorksFromHomeOrHomeOfficeSetup(George) -> -WorksFromHome(George) & -Commuter(George))", "all x.((George(x) & WorksFromHome(x) | HomeOfficeSetup(x))) -> -(George(x) & WorksFromHome(x) & Commuter(x)))", "all x y.((Person(x) & George(y) & WorksFromHome(x,y)) | HomeOfficeSetup(x,y)) -> -WorksFromHome(y,x) & Commuter(y))", "all x.((Person(x) & WorksFromHome(x) | HomeOfficeSetup(x)) -> -WorksFromHome(x) & Commuter(x))", "all x y.((George(x) & Person(y) & WorksFromHome(x) & Person(y)) | HomeOfficeSetup(y)) -> -WorksFromHome(x,y) & Commuter(x,y))", "all x.((George(x) & (WorksFromHome(x) | HomeOfficeSetup(x))) -> -(WorksFromHome(x) & Commuter(x)))", "all x.((Person(x) & (WorksFromHome(x) | HasHomeOfficeSetup(x))) -> -(WorksFromHome(x) & Commuter(x)))", "all x.(WorksFromHome(x) | HomeOfficeSetup(x)) -> -WorksFromHome(x) & Commuter(x))", "(all x.((George(x) & WorksFromHome(x)) | HomeOfficeSetup(x))) -> -(George(x) & WorksFromHome(x) & Commuter(x)))", "all x.((George(x) & (WorksFromHome(x) | HasHomeOfficeSetup(x))) -> -(WorksFromHome(x) & Commuter(x)))", "all x.((Person(x) & WorksFromHome(x) | HomeOfficeSetup(x)) -> -WorksFromHome(x) & Commuter(x))", "(all x.((George(x) & WorksFromHome(x)) | HasHomeOfficeSetup(x))) -> -(George(x) & WorksFromHome(x) & Commuter(x)))"]}
{"id": "folio_train_1487", "nl": "George is a person who works from home.", "fol": "WorksFromHome(George)", "prediction": ["all x.(George(x) -> WorksFromHome(x))", "(WorksFromHome(George) & Person(George))", "George is a person who worksFromHome(George)", "all x.(George(x) -> WorksFromHome(x))", "(WorksFromHome(George) -> Person(George))", "George works from Home.", "all x.(George(x) -> WorksFromHome(x))", "all x.(George(x) -> WorksFromHome(x))", "George is a person who works fromHome.", "(WorksFromHome(George) & Person(George))", "all x.(George(x) -> WorksFromHome(x))", "George worksFromHome(George)", "(WorksFromHome(George) -> Person(George))", "(WorksFromHome(George) | WorksFromHome(George))", "all x.(George(x) -> WorksFromHome(x))", "all x.(George(x) -> WorksFromHome(x))"]}
{"id": "folio_train_1488", "nl": "If George is not a person who works from home and a person who works in person, then George is neither a commuter nor a person who has a relaxed schedule.", "fol": "(-(WorksFromHome(George) & WorksInPerson(George)) -> (-IsCommuter(George) & -HasRelaxedSchedule(George)))", "prediction": ["all x.((Person(x) & -WorksFromHome(x) & WorksInPerson(x)) -> (-Commuter(x) & -RelaxedSchedule(x)))", "all x.((Person(x) & -WorksFromHome(x) & Person(x) & WorksInPerson(x)) -> (-Commuter(x) & -RelaxedSchedule(x)))", "all x.((George(x) & -WorksFromHome(x) & WorksInPerson(x)) -> (-Commuter(x) & -RelaxedSchedule(x)))", "(-(WorksFromHome(George) & WorksInPerson(George)) -> (-Commuter(George) & -RelaxedSchedule(George)))", "(-WorksFromHome(George) & WorksInPerson(George)) -> (-Commuter(George) & -RelaxedSchedule(George)))", "all x y.((Person(x) & -WorksFromHome(x) & Person(y) & WorksInPerson(x)) -> (-Commuter(x) & -RelaxedSchedule(x)))", "all x.((Person(x) & -WorksFromHome(x) & WorksInPerson(x)) -> (-Commuter(x) & -RelaxedSchedule(x)))", "all x.((George(x) & -WorksFromHome(x) & WorksInPerson(x)) -> (-Commuter(x) & -RelaxedSchedule(x)))", "(all x.((George(x) & WorksFromHome(x) & WorksInPerson(x)) -> (-Commuter(x) & -RelaxedSchedule(x)))", "all x.((Person(x) & -WorksFromHome(x) & Person(x) & WorksInPerson(x)) -> (-Commuter(x) & -RelaxedSchedule(x)))", "all x y.((Person(x) & -WorksFromHome(x) & Person(y) & WorksInPerson(x)) -> (-Commuter(x) & -RelaxedSchedule(y)))", "all x.((George(x) & -WorksFromHome(x) & WorksInPerson(x)) -> (-Commuter(x) & -RelaxedSchedule(x)))", "all x.((Person(x) & -WorksFromHome(x) & WorksInPerson(x)) -> (-Commuter(x) & -RelaxedSchedule(x)))", "all x y.((Person(x) & -WorksFromHome(x) & Person(y) & WorksInPerson(y)) -> (-Commuter(x) & -RelaxedSchedule(x)))", "all x.((Person(x) & -WorksFromHome(x) & Person(x) & WorksInPerson(x)) -> (-Commuter(x) & -RelaxedSchedule(x)))", "all x.((George(x) & -WorksFromHome(x) & WorksInPerson(x)) -> -Commuter(x) & -RelaxedSchedule(x))"]}
{"id": "folio_train_1489", "nl": "If George is either a person who has a home office setup and a person who works in person, or neither a person who has a home office setup nor a person who works in person, then George is either a person who works from home or a person who has a relaxed schedule.", "fol": "(((HasHomeOfficeSetup(George) & WorksInPerson(George)) | (-HasHomeOfficeSetup(George) & -WorksInPerson(George))) -> (WorksFromHome(George) | HasRelaxedSchedule(George)))", "prediction": ["all x.((Person(x) & (HomeOfficeSetup(x) | PersonWorksInPerson(x))) | (-HomeOfficeSetup(x) & PersonWorksInPerson(x))))", "all x y.((Person(x) & Person(y) & HasHomeOfficeSetup(x) & Person(y) & WorksInPerson(x)) | (-HasHomeOfficeSetup(y) & Person(y) & WorksInPerson(y))))", "all x.((George(x) & (HomeOfficeSetup(x) | WorksInPerson(x))) | (-HomeOfficeSetup(x) & WorksInPerson(x))))", "all x.((Person(x) & (HasHomeOfficeSetup(x) | WorksInPerson(x))) | (-HasHomeOfficeSetup(x) & WorksInPerson(x))))", "all x.((Person(x) & (HomeOfficeSetup(x) | WorksInPerson(x))) | (-HomeOfficeSetup(x) & WorksInPerson(x))))", "all x.((Person(x) & (HomeOfficeSetup(x) | PersonWorksInPerson(x))) | (-HomeOfficeSetup(x) & PersonWorksInPerson(x))))", "(all x.((Person(x) & HomeOfficeSetup(x) & WorksInPerson(x)) | (-Person(x) & WorksFromHome(x)) | RelaxedSchedule(x))))", "((Person(George) & HomeOfficeSetup(George) & -HomeOfficeSetup(George)) | (-HomeOfficeSetup(George) & WorksInPerson(George))))", "all x y.((Person(x) & Person(y) & HomeOfficeSetup(x) & Person(y) & WorksInPerson(x)) | (-Person(x,y) & HomeOfficeSetup(y) & WorksInPerson(y))))", "(all x.((Person(x) & HomeOfficeSetup(x)) & -(Person(x) & HomeOfficeSetup(x)) & -(Person(x) & WorksInPerson(x))) -> (WorksFromHome(x) | RelaxedSchedule(x))))", "all x.((George(x) & (HomeOfficeSetup(x) | WorksInPerson(x))) | (-HomeOfficeSetup(x) & WorksInPerson(x))))", "(all x.((Person(x) & HomeOfficeSetup(x) & WorksInPerson(x)) | (-Person(x) & WorksFromHome(x)) | RelaxedSchedule(x))))", "all x.((Person(x) & (HomeOfficeSetup(x) | PersonWorkingInPerson(x))) -> (WorksFromHome(x) | RelaxedSchedule(x)))", "all x.((Person(x) & (HasHomeOfficeSetup(x) | WorksInPerson(x))) | (-HasHomeOfficeSetup(x) & WorksInPerson(x))))", "all x.((George(x) & (HasHomeOfficeSetup(x) | WorksInPerson(x))) | (-HasHomeOfficeSetup(x) & WorksInPerson(x))))", "all x.((Person(x) & HomeOfficeSetup(x) & WorksInPerson(x)) | (-Person(x) & WorksFromHome(x))))"]}
{"id": "folio_train_1490", "nl": "Jason Kramer is an American music supervisor.", "fol": "(IsMusicSupervisor(JasonKramer) & IsAmerican(JasonKramer))", "prediction": ["Jason Kramer (AmericanMusicSupervisor(x))", "(AmericanMusicSupervisor(JasonKraker) & FoundedIn(JasonKraker,Jason))", "JasonKremer (AmericanMusicSupervisor(Kramer))", "all x.((SasksKremer(x) & AmericanMusicSupervisor(x)) -> JasonKramer(x))", "(AmericanMusicSupervisor(JasonKramer) & FoundedIn(JasonKramer,Jason))", "JasonKramer (AmericanMusicSupervisor(Kramer))", "(Assistant(JasonKramer) & AmericanMusicSupervisor(JasonKramer))", "JasonKraker(x) & AmericanMusicSupervisor(x))", "All x.((Sassy(x) & AmericanMusicSupervisor(x)) -> JasonKraker(x))", "Jason Kramer is an AmericanMusicSupervisor(x)", "all x.((JacksonKremer(x) & AmericanMusicSupervisor(x)) -> Has(x,y))", "all x.(SaskScramer(x) -> (AmericanMusicSupervisor(x) & Supervises(x,y)))", "Jason Kramer (AmericanMusicSupervisor)", "(AmericanMusicSupervisor(JacksonKraker) & BornIn(JacksonKraker))", "Jason Kramer is a MusicSupervisor(Jason)", "JasonKremer (AmericanMusicSupervisor)"]}
{"id": "folio_train_1491", "nl": "Some American radio personalities are also music supervisors. ", "fol": "exists x.(IsAmerican(x) & IsMusicSupervisor(x) & IsRadioPersonality(x))", "prediction": ["exists x.(AmericanRadioPerson(x) & MusicSupervisor(x))", "exists x.(AmericanRadioPerson(x) & MusicSupervisor(x))", "exists x.(RadioPerson(x) & MusicSupervisor(x))", "exists x.(AmericanRadioPerson(x) & MusicSupervisor(x))", "(exists x.(AmericanRadioPerson(x) & MusicSupervisor(x)))", "exists x y.(AmericanRadioPerson(x) & MusicSupervisor(y))", "exists x.(AmericanRadioPerson(x) & MusicSupervisor(x))", "exists x y.((AmericanRadioPerson(x) & MusicSupervisor(y)) -> MusicPerson(x))", "exists x.(AmericanRadioPerson(x) & MusicSupervisor(x))", "exists x.(RadioPerson(x) & MusicSupervisor(x))", "exists x.(AmericanRadioPerson(x) & MusicSupervisor(x))", "exists x.(AmericanRadioPerformance(x) & MusicSupervisor(x))", "exists x.(AmericanRadioPerson(x) & MusicSupervisor(x))", "exists x.(RadioPerson(x) & MusicSupervisor(x))", "exists x.(AmericanRadioPerson(x) & MusicSupervisor(x))", "exists x.(RadioPerson(x) & MusicSupervisor(x))"]}
{"id": "folio_train_1492", "nl": "Anyone who hosts a show on a public radio station is a radio personality.", "fol": "all x.(HostsShowOnPublicRadio(x) -> IsRadioPersonality(x))", "prediction": ["all x.((HostsShow(x) & PublicRadioStation(x)) -> RadioPerson(x))", "all x.((HostsShowOnPublicRadio(x) & PublicRadioStation(x)) -> RadioPerson(x))", "all x y.((HostsShow(x) & PublicRadioStation(y) & On(x,y)) -> RadioPerson(x))", "all x.(HostsShowOnPublicRadioStation(x) -> RadioPerson(x))", "all x.((HostsShowOnPublicRadioStation(x) & PublicRadioStation(x)) -> RadioPerson(x))", "all x.((HostsShowOnPublicRadioStation(x) & PublicRadioStation(x)) -> RadioPerson(x))", "all x.((HostsShow(x) & PublicRadioStation(x)) -> RadioPerson(x))", "all x y.((HostsShow(x,y) & PublicRadioStation(y)) -> RadioPerson(x))", "all x y.((HostsShow(x) & PublicRadioStation(y) & PublicRadioStation(x,y)) -> RadioPerson(x))", "all x.(HostsShowOnPublicRadioStation(x) -> RadioPerson(x))", "all x y.((HostsShow(x,y) & PublicRadioStation(y)) -> RadioPerson(x))", "all x.((HostsShow(x) & OnPublicRadioStation(x)) -> RadioPerson(x))", "all x.(HostsOnPublicRadioStation(x) -> RadioPerson(x))", "all x.((HostsShow(x) & PublicRadioStation(x)) -> RadioPerson(x))", "all x y.((HostsShowOnPublicRadio(x) & PublicRadioStation(y)) -> RadioPerson(x))", "all x.(HostsShowOnPublicRadioStation(x) -> RadioPerson(x))"]}
{"id": "folio_train_1493", "nl": "Joe Rogan is a radio personality.", "fol": "IsRadioPersonality(JoeRogan)", "prediction": ["all x.(Rogan(x) -> RadioPerson(x))", "(RadioPerson(JoeRogan) & RadioPerson(JoeRogan))", "all x.(RadioPerson(x) -> JoeRogan(x))", "(RadioPersonal(JoeRogan) & RadioPerson(JoeRogan))", "Joe Rogan is a radio personality.", "(RadioPerson(JoeRogan) & RadioPerson(JoeRogan))", "Joe Rogan (RadioPerson(x) & RadioPerson(x))", "Joe Rogan is a RadioPerson(x)", "(RadioPersonalist(JoeRogan))", "all x.(Rogan(x) -> RadioPerson(x))", "(RadioPopularity(JoeRogan)", "all x.(RadioPerson(x) -> JoeRogan(x))", "(RadioPerson(Joe Rogan)", "all x.(RadioPerson(x) -> JoeRogan(x))", "all x.(Rogan(x) -> RadioPerson(x))", "all x.(Rogan(x) -> RadioPerson(x))"]}
{"id": "folio_train_1494", "nl": "Jason Kramer hosted a show on a public radio station.", "fol": "HostsShowOnPublicRadio(JasonKramer)", "prediction": ["all x y.((JasonKarmer(x) & PublicRadioStation(y)) -> HostedShow(x,y))", "all x y.((Show(x) & PublicRadioStation(y)) -> HostedBy(x,y))", "all x y z.((Show(x) & JasonKarmer(y) & PublicRadioStation(z)) -> HostedOn(y,z))", "all x.((JasonKarmer(x) & PublicRadioStation(x)) -> HostedShow(x,y))", "Jason Kramer hosted a show on a publicradiostation.", "(HostsShowOnPublicRadioStation(JasonKarmer))", "all x y.((JasonKramer(x) & PublicRadioStation(y)) -> HostedShow(x,y))", "all x y z.((JasonKarmer(x) & Show(y) & PublicRadioStation(z)) -> HostedOn(x,y,z))", "all x.((Show(x) & JasonKarmer(x)) -> HostedOnPublicRadio(x))", "JasonKramer hostedShowOnPublicRadioStation(JasonKramer)", "Jason Kramer hosted a show on publicradio.com.", "(HostsShowOnPublicRadio(JasonKarmer) -> HostsShow(JasonKarmer,PublicRadioStation))", "all x.(HostsShowOnPublicRadio(x) -> JasonKarmer(x))", "(HostsShowOnPublicRadioStation(JasonKarmer))", "all x y.((JasonKarmer(x) & PublicRadioStation(y)) -> HostedShow(x,y))", "all x.((JasonKarmer(x) & PublicRadioStation(x)) -> HostedShowOn(x,y))"]}
{"id": "folio_train_1495", "nl": "Joe Rogan is American.", "fol": "IsAmerican(JoeRogan)", "prediction": ["(American(JoeRogan) & American(JoeRogan))", "all x.(JoeRogan(x) -> American(x))", "(Asian(JoeRogan) & American(JoeRogan))", "(American(JoeRogan)", "(American(Joe Rogan) & American(Joe Rogan))", "all x.(Rogan(x) -> American(x))", "Joe Rogan is American.", "All x.(JoeRogan(x) -> American(x))", "(American(JoeRogan))", "-American(JoeRogan)", "all x.((JoeRogan(x) & American(x)) -> American(x))", "American(JoeRogan)", "Joe Rogan is American.", "(American(JoeRogan) & American(JoeRogan))", "All x.(JoeRogan(x) -> American(x))", "All x.(JoeRogan(x) -> American(x))"]}
{"id": "folio_train_1496", "nl": "Jason Kramer is a music supervisor.", "fol": "IsMusicSupervisor(JasonKramer)", "prediction": ["all x.(MusicSupervisor(x) -> JasonKarmer(x))", "all x.((JasonKarmer(x) & MusicSupervisor(x)) -> WorksOn(x,y))", "(MusicSupervisor(JasonKarmer) & -MusicSupervisor(JasonKarmer))", "Jason Kramer is MusicSupervisor(JasonKramer)", "JasonKramer is MusicSupervisor(JasonKramer)", "JasonKremer is MusicSupervisor(JasonKramer)", "(MusicSupervisor(JasonKramer) & -MusicSupervisor(JasonKramer))", "all x.((JasonKramer(x) & MusicSupervisor(x)) -> WorksOn(x,y))", "Jason Kramer is MusicSupervisor(Jackson)", "all x.(MusicSupervisor(x) -> JasonKraker(x))", "Jason Kramer is MusicSupervisor(x) & WorksOnMusic(x))", "(MusicSupervisor(JasonKarmer) & -MusicSupervisor(JasonKarmer))", "all x.((JasonKarmer(x) & MusicSupervisor(x)) -> Supervises(x))", "(MusicSupervisor(JacksonKraker) & WorksIn(JacksonKraker,Music))", "JasonKraker is MusicSupervisor(Jackson)", "all x.(MusicSupervisor(x) -> JasonKarmer(x))"]}
{"id": "folio_train_1497", "nl": "Jason Kramer is a radio personality.", "fol": "IsRadioPersonality(JasonKramer)", "prediction": ["all x.(RadioPerson(x) -> JasonKarmer(x))", "(RadioPerson(JasonKarmer) & RadioPerson(JasonKarmer))", "all x.((RadioPerson(x) & JasonKarmer(x)) -> RadioPerson(x))", "Jason Kramer is a radio personality.", "all x.(RadioPerson(x) -> JasonKramer(x))", "JasonKremer is a RadioPerson(x) & RadioPerson(x))", "all x.((JasonKarmer(x) & RadioPerson(x)) -> RadioPerson(x))", "(RadioPersonalist(JasonKarmer)", "JasonKramer (RadioPerson(x) & -RadioPerson(x))", "Jason Kramer is a radio personality.", "(RadioPersonalist(JasonKramer)", "all x.(JasonKramer(x) -> RadioPerson(x))", "all x.(RadioPerson(x) -> JasonKarmer(x))", "JasonKremer (RadioPerson(x) & LikesToTalk(x))", "(RadioPersonalist(JasonKarmer)", "all x.((RadioPerson(x) & JasonKarmer(x)) -> RadioPerson(x))"]}
{"id": "folio_train_1498", "nl": "No coffee sold in Walmart is produced in France. ", "fol": "all x.(SoldInWalmart(x) -> -ProducedInFrance(x))", "prediction": ["-exists x.(Coffee(x) & SoldInWalmart(x) & ProducedInFrance(x))", "all x.((Coffee(x) & SoldInWalmart(x)) -> -ProducedInFrance(x))", "-exists x.((Coffee(x) & SoldInWalmart(x)) -> ProducedInFrance(x))", "(exists x.(Coffee(x) & SoldInWalmart(x)) & -ProducedInFrance(x))", "-exists x.(Coffee(x) & SoldInWalmart(x))", "all x.((Coffee(x) & SoldInWalmart(x)) -> -ProducedInFrance(x))", "-exists x.(Wallmart(x) & Coffee(x) & SoldIn(x,Wallmart))", "-exists x.(FrenchCoffee(x) & SoldInWalmart(x))", "-exists x.(Coffee(x) & SoldInWallmart(x) & ProducedInFrance(x))", "(exists x.(Coffee(x) & SoldInWalmart(x)) & -ProducedInFrance(x))", "all x.((Coffee(x) & SoldInWalmart(x)) -> -ProducedInFrance(x))", "-all x.(Walmart(x) -> ProducedInFrance(x))", "-exists x.((Coffee(x) & SoldInWalmart(x)) & ProducedInFrance(x))", "all x.((Coffee(x) & SoldInWallmart(x)) -> -ProducedInFrance(x))", "(exists x.(Coffee(x) & SoldInWalmart(x)) & -ProducedInFrance(x))", "all x.((Coffee(x) & SoldInWalmart(x)) -> -ProducedInFrance(x))"]}
{"id": "folio_train_1499", "nl": "All coffee supplied by the company is sold in Walmart. ", "fol": "all x.(SuppliedByCompany(x) -> SoldInWalmart(x))", "prediction": ["all x.((Coffee(x) & SuppliedByCompany(x)) -> SoldInWalmart(x))", "all x y.((Coffee(x) & Company(y)) -> SoldInWalmart(x,y))", "(all x.(Caffeine(x) & SuppliedByCompany(x)) -> SoldInWalmart(x))", "all x.(Coffee(x) -> SoldInWalmart(x))", "all x y.((Coffee(x) & Company(y) & SupplyedBy(x,y)) -> SoldInWalmart(x))", "all x.((Coffee(x) & SupplyedByCompany(x)) -> SoldInWallmart(x))", "all x y z.((Coffee(x) & Company(y) & Walmart(z)) -> SoldIn(x,y,z))", "All coffee supplied by the company is soldInWalmart.", "all x.((Coffee(x) & SuppliedByCompany(x)) -> SoldInWalmart(x))", "all x y.((Coffee(x) & Company(y)) -> SoldInWallpaper(x,y))", "all x.(Coffee(x) -> SoldInWalmart(x))", "all x y.((Coffee(x) & Company(y) & SuppliedBy(x,y)) -> SoldInWallmart(x))", "all x.((Coffee(x) & SupplyedByCompany(x)) -> SoldInWallpaper(x))", "All x.(Coffee(x) -> SoldInWalmart(x))", "all x y.((Coffee(x) & Company(y)) -> SoldIn(x,y))", "all x.((Coffee(x) & SuppliedByCompany(x)) -> SoldInWalmart(x))"]}
{"id": "folio_train_1500", "nl": "All coffee produced in Columbia is produced in France. ", "fol": "all x.(ProducedInColumbia(x) -> ProducedInFrance(x))", "prediction": ["all x.(Coffee(x) -> ProducedInColumbia(x))", "all x.((Coffee(x) & ProducedInColumbia(x)) -> ProducedInFrance(x))", "all x y.((Coffee(x) & Columbia(y)) -> ProducedInFrance(x,y))", "(all x.(ColumbusCoffee(x) -> ProducedInFrance(x))", "all x.(Coffee(x) -> ProducedInColumbia(x))", "all x.(ColumbusCoffee(x) -> ProducedInFrance(x))", "all x.((Coffee(x) & ProducedInColumbia(x)) -> ProducedInFrance(x))", "all x y.((Coffee(x) & Columbia(y)) -> ProducedIn(x,y))", "all x y.((Caffeine(x) & Columbia(y)) -> ProducedInFrance(x,y))", "all x.(Coffee(x) -> ProducedInColumbia(x))", "all x.((Coffee(x) & ProducedInColumbia(x)) -> ProducedInFrance(x))", "all x y.((Coffee(x) & Columbia(y)) -> ProducedInFrance(x,y))", "(all x.(Coffee(x) & ProducedInColumbia(x)) -> ProducedInFrance(x))", "all x.(ColumbusCoffee(x) -> ProducedInFrance(x))", "all x.(Coffee(x) -> ProducedInColumbia(x))", "All x.(Caffeine(x) -> ProducedInColumbus(x))"]}
{"id": "folio_train_1501", "nl": "All coffee favored by local residents is coffee produced in Columbia. ", "fol": "all x.(FavoredByLocalResidents(x) -> ProducedInColumbia(x))", "prediction": ["all x.((Coffee(x) & FavoredByLocalResidents(x)) -> ProducedInColumbia(x))", "all x y.((Coffee(x) & FavoredByLocalResidents(x) & Columbia(y)) -> ProducedIn(x,y))", "all x.((Coffee(x) & FavoredByLocalResidents(x)) -> ProducedInColumbia(x))", "(all x.(FavouredByLocalResidents(x) -> CoffeeProducedInColumbia(x))", "all x.((Caffeine(x) & FavoredByLocalResidents(x)) -> ProducedInColumbia(x))", "all x y.((Coffee(x) & LocalResident(y) & FavoredBy(x,y)) -> ProducedInColumbia(x))", "all x y z.((Coffee(x) & LocalResident(y) & LocalResident(z) & FavoredBy(x,y,z)) -> ProducedInColumbia(x))", "all x y.((Coffee(x) & FavoredByLocalResidents(x)) -> ProducedInColumbia(y))", "all x.(FavoriteCoffee(x) -> ProducedInColumbia(x))", "all x y.((Caffeine(x) & FavoredByLocalResidents(x)) -> ProducedInColumbia(y))", "all x.((Coffee(x) & FavoredByLocalResidents(x)) -> ProducedInColumbia(x))", "all x.((Coffee(x) & FavoredByLocalResidents(x)) -> CoffeeProducedInColumbia(x))", "all x y.((Coffee(x) & FavoredByLocalResidents(x)) -> ProducedInColumbia(x,y))", "all x.((Caffeine(x) & FavoredByLocalResidents(x)) -> ProducedInColumbia(x))", "all x.(FavoriteCoffee(x) -> ProducedInColumbia(x))", "all x.((Coffee(x) & FavoredByLocalResidents(x)) -> ProducedInColumbia(x))"]}
{"id": "folio_train_1502", "nl": "All coffee with high prices is favored by local residents. ", "fol": "all x.(HighPriceCoffee(x) -> FavoredByLocalResidents(x))", "prediction": ["all x.((Coffee(x) & HighPrices(x)) -> FavoredByLocalResidents(x))", "all x.((Coffee(x) & HighPrices(x)) -> FavoredByLocalResidents(x))", "all x y.((Coffee(x) & HighPrices(x)) -> FavoredByLocalResidents(y))", "(all x.(HighPriceCoffee(x) -> FavoredByLocalResidents(x))", "all x.(HighPriceCoffee(x) -> FavoredByLocalResidents(x))", "all x.((Coffee(x) & HighPrices(x)) -> FavoredByLocalResidents(x))", "all x y.((Coffee(x) & HighPrices(x)) -> FavoredByLocalResidents(y))", "all x.((Coffee(x) & HighPrices(x)) -> FavoredByLocalResidents(x))", "all x.(HighPrice(x) -> FavoredByLocalResidents(x))", "all x.((Caffeine(x) & HighPrices(x)) -> FavoredByLocalResidents(x))", "all x y.((Coffee(x) & HighPrices(x)) -> FavoredByLocalResidents(y))", "all x.((Coffee(x) & HighPrices(x)) -> FavoredByLocalResidents(x))", "all x y.((Coffee(x) & HighPrices(x)) -> FavoredByLocalResidents(y))", "all x y.((Caffeine(x) & HighPrices(x)) -> FavoredByLocalResidents(y))", "all x.((Caffeine(x) & HighPrices(x)) -> FavoredByLocalResidents(x))", "all x.((Coffee(x) & HighPrices(x)) -> FavoredByLocalResidents(x))"]}
{"id": "folio_train_1503", "nl": "Civet Coffee is not produced in Columbia and is cheap.", "fol": "-(ProducedInColumbia(Civetcoffee) & HighPriceCoffee(Civetcoffee))", "prediction": ["all x.(CivetCoffee(x) -> (-ProducedInColumbia(x) & Cheap(x)))", "(-ProducedInColumbia(CivetCoffee) & Cheap(CivetCoffee))", "CivetCoffee(c) & -ProducedInColumbia(c) & Cheap(c))", "all x y.((CivetCoffee(x) & Columbia(y)) -> (-ProducedIn(x,y) & Cheap(x)))", "all x.(CivetCoffee(x) -> (-ProducedInColumbia(x) & Cheap(x)))", "(-ProducedInColumbia(CivetCoffee) & Cheap(CivetCoffee))", "exists x.(Coffee(x) & -ProducedInColumbia(x) & Cheap(x))", "CivetCoffee(C) & -ProducedInColumbia(C) & Cheap(C))", "all x.(CivetCoffee(x) -> (-ProducedInColumbia(x) & Cheap(x)))", "(-ProducedInColumbia(CivetCoffee) & Cheap(CivetCoffee))", "all x.(CivetCoffee(x) -> (-ProducedInColumbia(x) & Cheap(x)))", "(-ProducedInColumbia(CivetCoffee) & Cheap(CivetCoffee))", "all x.(CivetCoffee(x) -> (-ProducedInColumbia(x) & Cheap(x)))", "(-ProducedInColumbia(CivetCoffee) & Cheap(CivetCoffee))", "All x.(CivetCoffee(x) -> (-ProducedInColumbus(x) & Cheap(x)))", "all x.(CivetCoffee(x) -> (-ProducedInColumbia(x) & Cheap(x)))"]}
{"id": "folio_train_1504", "nl": "Jamaica Blue is sold in Walmart or favored by local residents.", "fol": "(SoldInWalmart(Jamaicablue) | FavoredByLocalResidents(Jamaicablue))", "prediction": ["all x.(JamaicaBlue(x) -> (SoldInWalmart(x) | FavoredByLocalResidents(x)))", "(SoldInWalmart(JamaicaBlue) | FavoredByLocalResidents(JamaicaBlue))", "all x y.((JamaicaBlue(x) & Walmart(y)) -> (SoldIn(x,y) | FavoredByLocalResidents(x)))", "all x.(JamaicaBlue(x) -> (SoldInWalmart(x) | FavoredByLocalResidents(x)))", "(SoldInWalmart(JamaicaBlue) | FavoredByLocalResidents(JamaicaBlue))", "all x y.((JamaicaBlue(x) & Walmart(y)) -> (SoldIn(x,y) | FavoredByLocalResidents(x,y)))", "all x.(JamaicaBlue(x) -> (SoldIn(x,Walmart) | FavoredByLocalResidents(x,LocalResidents)))", "all x.(JamaicaBlue(x) -> (SoldInWalmart(x) | FavoredByLocalResidents(x)))", "(SoldInWalmart(JamaicaBlue) | FavoredByLocalResidents(JamaicaBlue))", "all x y.((JamaicaBlue(x) & Walmart(y)) -> (SoldIn(x,y) | FavoredByLocalResidents(x)))", "all x.(JamaicaBlue(x) -> (SoldInWallpaper(x) | FavoredByLocalResidents(x)))", "All x.(JamaicaBlue(x) -> (SoldInWalmart(x) | FavoredByLocalResidents(x)))", "all x.(JamaicaBlue(x) -> (SoldInWalmart(x) | FavoredByLocalResidents(x)))", "all x y.((JamaicaBlue(x) & Walmart(y)) -> (SoldIn(x,y) | FavoredBy(x,y)))", "All x.(JamaicaBlue(x) -> (SoldInWalmart(x) | FavoredByLocalResidents(x)))", "All x.(JamaicaBlue(x) -> (SoldInWalmart(x) | FavoredByLocalResidents(x)))"]}
{"id": "folio_train_1505", "nl": "Civet Coffee is produced in France.", "fol": "ProducedInFrance(Civetcoffee)", "prediction": ["all x.(CivetCoffee(x) -> ProducedInFrance(x))", "CivetCoffee(c) & ProducedInFrance(c))", "all x y.((CivetCoffee(x) & France(y)) -> ProducedIn(x,y))", "CivetCoffeeProducedInFrance.", "(ProducedInFrance(CivetCoffee)", "all x.(CivetCoffee(x) -> ProducedInFrance(x))", "all x y.((CivetCoffee(x) & France(y)) -> ProducedIn(x,y))", "CivetCoffeeProducedInFrance.", "CivetCoffeeProducedInFrance(CivetCoffee)", "all x.(CivetCoffee(x) -> ProducedInFrance(x))", "(ProducedInFrance(CivetCoffee)", "all x.(CivetCoffee(x) -> ProducedInFrance(x))", "all x y.((CivetCoffee(x) & France(y)) -> ProducedIn(x,y))", "All x.(CivetCoffee(x) -> ProducedIn(x,France))", "All x.(CivetCoffee(x) -> ProducedInFrance(x))", "All x.(CivetCoffee(x) -> ProducedInFrance(x))"]}
{"id": "folio_train_1506", "nl": "Civet Coffee is not produced in France.", "fol": "-ProducedInFrance(Civetcoffee)", "prediction": ["all x.(CivetCoffee(x) -> -ProducedInFrance(x))", "(-ProducedInFrance(CivetCoffee))", "CivetCoffee(c) & -ProducedInFrance(c))", "(ProducedInFrance(CivetCoffee) & -ProducedInFrance(CivetCoffee))", "-FranceProducedCivetCoffee(CivetCoffee)", "CivetCoffee(C) & -ProducedInFrance(CivetCoffee))", "all x.(CivetCoffee(x) -> -ProducedInFrance(x))", "(-ProducedInFrance(CivetCoffee))", "CivetCoffee.com -ProducedInFrance(CivetCoffee)", "CivetCoffee(c) -> -ProducedInFrance(c))", "CivetCoffee(c) -ProducedInFrance(c))", "-ProducedInFrance(CivetCoffee)", "all x.(CivetCoffee(x) -> -ProducedInFrance(x))", "(-ProducedInFrance(CivetCoffee))", "all x.(CivetCoffee(x) -> -ProducedInFrance(x))", "All x.(CivetCoffee(x) -> -ProducedIn(x,France))"]}
{"id": "folio_train_1507", "nl": "Jamaica Blue is expensive and supplied by the company.", "fol": "(HighPriceCoffee(Jamaicablue) & SuppliedByCompany(Jamaicablue))", "prediction": ["all x.(JamaicaBlue(x) -> (Expensive(x) & SupplyedByCompany(x)))", "all x y.((JamaicaBlue(x) & Company(y)) -> (Expensive(x) & SupplyedBy(x,y)))", "all x.(JamaicaBlue(x) -> (Expensive(x) & SuppliedByCompany(x)))", "(ExpensiveJamaicaBlue(Jamaica) & SupplyedByCompany(JamaicaBlue))", "(Expensive(jamablue) & SupplyedByCompany(jamablue))", "all x.(JamaicaBlue(x) -> (Expensive(x) & SupplyedBy(x,JamaicaBlue)))", "all x y.((JamaicaBlue(x) & Company(y)) -> (Expensive(x) & SupplyedBy(x,y)))", "all x y z.((JamaicaBlue(x) & Company(y) & Expensive(z)) -> SupplyedBy(x,y,z))", "all x y.((JamaicaBlue(x) & Company(y)) -> (Expensive(x) & SuppliedBy(x,y)))", "All x.(JamaicaBlue(x) -> (Expectious(x) & SupplyedByCompany(x)))", "all x.(JamaicaBlue(x) -> (Expensive(x) & SuppliedByCompany(x)))", "all x y.((JamaicaBlue(x) & Company(y)) -> (Expectious(x) & SupplyedBy(x,y)))", "all x y.((JamaicaBlue(x) & Company(y)) -> (Expensive(x) & SupplyedBy(x,y)))", "All x.(JamaicaBlue(x) -> (Expensive(x) & SupplyedByCompany(x)))", "All x.(JamaicaBlue(x) -> (Expensive(x) & SupplyedByCompany(x)))", "All x.(JamaicaBlue(x) -> (Expensive(x) & SuppliedByCompany(x)))"]}
{"id": "folio_train_1508", "nl": "Jamaica Blue is not expensive and is not supplied by the company.", "fol": "(-HighPriceCoffee(Jamaicablue) & -SuppliedByCompany(Jamaicablue))", "prediction": ["all x.(JamaicaBlue(x) -> (-Expensive(x) & -SuppliedByCompany(x)))", "(-Expensive(JamaicaBlue) & -SuppliedByCompany(JamaicaBlue))", "all x y.((JamaicaBlue(x) & Company(y)) -> (-Expensive(x) & -SuppliedBy(x,y)))", "-(JamaicaBlue(Jamaica) & -SuppliedByCompany(JamaicaBlue))", "all x.(JamaicaBlue(x) -> (-Expensive(x) & -SuppliedByCompany(x)))", "(JamaicaBlue(Jamaica) -> (-Expensive(Jamaica) & -SuppliedByCompany(Jamaica)))", "(-Expensive(JamaicaBlue) & -SuppliedByCompany(JamaicaBlue))", "all x.(JamaicaBlue(x) -> (-Expectious(x) & -SuppliedByCompany(x)))", "all x y.((JamaicaBlue(x) & Company(y) & -Expensive(x) & -SuppliedBy(x,y)) -> -Supply(x,y))", "all x y.((JamaicaBlue(x) & Company(y)) -> (-Expensive(x) & -SuppliedBy(x,y)))", "all x.(JamaicaBlue(x) -> (-Expensive(x) & -SuppliedByCompany(x)))", "(JamaicaBlue(Jamaica) -> (-Expensive(Jamaica) & -SuppliedByCompany(Jamaica)))", "-Expensive(JamaicaBlue) & -SuppliedByCompany(JamaicaBlue)", "All x.(JamaicaBlue(x) -> (-Expensive(x) & -SuppliedByCompany(x)))", "all x.(JamaicaBlue(x) -> (-Expensive(x) & -SuppliedByCompany(x)))", "All x.(JamaicaBlue(x) -> (-Expensive(x) & -SupportedByCompany(x)))"]}
{"id": "folio_train_1509", "nl": "There are two places named Galicia: either in Spain or in Poland.", "fol": "all x.(((PlaceNamedGalicia(x) -> LocatedInSpain(x)) & -LocatedInPoland(x)) | (-(PlaceNamedGalicia(x) -> LocatedInSpain(x)) & LocatedInPoland(x)))", "prediction": ["exists x.(Place(x) & Galicia(x))", "(exists x.(Place(x) & Galicia(x)) & (InSpanish(x) | InPoland(x))))", "exists x.(Place(x) & Galicia(x))", "exists x.(Place(x) & Galicia(x) & (InSpanish(x) | InPoland(x)))", "(ThereAreTwoPlaces(x) & Galicia(x))", "all x.((Place(x) & Galicia(x)) -> (InSpanish(x) | InPoland(x)))", "(exists x.(Place(x) & Galicia(x)) & (InSpanish(x) | InPoland(x))))", "exist 2 places named Galicia (inSpanish(x) | inPoland(x)))", "exists x.(Galicia(x) & (InSpanish(x) | InPoland(x)))", "exists x.(Place(x) & Galicia(x))", "all x y.((Place(x) & Place(y) & Galicia(x)) -> (InSpanish(x,y) | InPoland(x,y)))", "exists x.(Place(x) & Galicia(x) & (InSpanish(x) | InPoland(x)))", "exists x.(Place(x) & Galicia(x))", "exists x.(Place(x,y) & Galicia(y) & (InSpanish(x) | InPoland(x)))", "(exists x.(Place(x) & Galicia(x)) & (InSpanish(x) | InPoland(x)))", "exists x.(Galicia(x) & (InSpanish(x) | InPoland(x)))"]}
{"id": "folio_train_1510", "nl": "Spain is in Europe.", "fol": "all x.(LocatedInSpain(x) -> LocatedInEurope(x))", "prediction": ["all x.(Spanish(x) -> InEurope(x))", "all x.(Spain(x) -> InEurope(x))", "(InEurope(Spania) & InEurope(Spania))", "all x.(Spanish(x) -> InEurope(x))", "all x y.((Spanish(x) & Europe(y)) -> In(x,y))", "(European(Spanish) & In(Spanish))", "all x y.((Spain(x) & Europe(y)) -> In(x,y))", "all x.(Spain(x) -> InEurope(x))", "(InEurope(Spania) & InEurope(Spania))", "(InEurope(Spania) -> InEurope(Spania,Spania))", "all x y.((Spanish(x) & Europe(y)) -> In(x,y))", "all x.(Spanish(x) -> InEurope(x))", "exists x.(Spain(x) & InEurope(x))", "all x.(Spanish(x) -> InEurope(x))", "exists x.(Spain(x) & InEurope(x))", "exists x.(Spanish(x) & InEurope(x))"]}
{"id": "folio_train_1511", "nl": "Poland is in Europe.", "fol": "all x.(LocatedInPoland(x) -> LocatedInEurope(x))", "prediction": ["all x.(Poland(x) -> InEurope(x))", "(InEurope(Poland))", "all x.(Poland(x) -> InEurope(x))", "(InEurope(Poland) & InEurope(Poland))", "all x y.((Poland(x) & Europe(y)) -> In(x,y))", "all x.(Poland(x) -> InEurope(x))", "(European(Poland) & In(Poland))", "All x y.((Poland(x) & Europe(y)) -> In(x,y))", "(InEurope(Poland))", "all x.(Poland(x) -> InEurope(x))", "all x y.((Poland(x) & Europe(y)) -> In(x,y))", "(InEurope(Poland,Poland))", "all x.(Poland(x) -> InEurope(x))", "exists x.(Poland(x) & In(x,Europe))", "all x.(Poland(x) -> InEurope(x))", "exists x.(Poland(x) & Europe(x))"]}
{"id": "folio_train_1512", "nl": "Rochelle lives in Europe.", "fol": "all x.(RochelleLives(x) -> LocatedInEurope(x))", "prediction": ["Rochelle lives in Europe.", "(LivingIn(Rochelle,Europe) -> LivesIn(Rochelle,Europe))", "all x.(Rochelle(x) -> LivesInEurope(x))", "(LivesInEurope( Rochelle) & -LivesInEurope( Rochelle))", "(LivesIn(Rochelle,Europe) & -LivesIn(Rochelle,Europe))", "Rochelle lives in Europe.", "(LivingInEurope(Rochelle) -> LivesIn(Rochelle,Europe))", "-LivingInEurope(Rochelle,Europe)", "Rochelle & LivesInEurope( Rochelle)", "Rochelle livesInEurope( Rochelle)", "RochelleLivingInEurope( Rochelle)", "Rochelle lives in Europe.", "Rochelle LivesInEurope( Rochelle)", "(LivingIn(Rochelle,Europe))", "Rochelle lebt in Europe.", "Rochelle lives in Europe."]}
{"id": "folio_train_1513", "nl": "Dominique does not live in Europe.", "fol": "all x.(DominiqueLives(x) -> -LocatedInEurope(x))", "prediction": ["-exists x.(Dominique(x) & LivesIn(x,Europe))", "Dominique neexists en Europe.", "(LivingIn(Dominique,Europe) -> -LivingIn(Dominique,Europe))", "(-LivesInEurope(Dominique))", "(Dolphin(Dominique) & -LivesInEurope(Dominique))", "(LivingInEurope(Dominique) | LivingInEurope(Dominique)))", "-exists x.(Dominique(x) & LivesIn(x,Europe))", "all x.(Dominique(x) -> -LivesInEurope(x))", "Dominique neexists en Europe.", "(LivingIn(Dominique) -> -LivingIn(Dominique,Europe))", "Dominique -LivesInEurope.", "-LivingInEurope(Dominion)", "-exists x.(Dominique(x) & LivesIn(x,Europe))", "Dominique neexists en Europe.", "Dominique -LivesInEurope.", "-LivesInEurope(Dominique)"]}
{"id": "folio_train_1514", "nl": "Alfonso lives in Galicia.", "fol": "all x.(AlfonsoLives(x) -> PlaceNamedGalicia(x))", "prediction": ["AlfonsoLisesInGalicia(alfonso,galicia)", "All x.(Alfonso(x) -> LivesInGalicia(x))", "Alfonso lives in Galicia.", "-LisesIn(Alfonso,Galicia)", "(LivingIn(Alfonso,Galicia))", "AlfonsoLisesInGalicia(Alfonso)", "all x.(Alfonso(x) -> LivesInGalicia(x))", "Alfonso & Galicia(alfonso)", "All x.(Alfonso(x) -> LivesIn(x,Galicia))", "AlfonsoLisesIn(Alfonso,Galicia)", "AlfonsoLimitsInGalicia(alfonso,galicia)", "Alfonso lives in Galicia.", "Alfonso & Galicia(Alfonso)", "all x.(Alfonso(x) -> LivesInGalicia(x))", "All x.(Alfonso(x) -> LivesIn(x,Galicia))", "Alfonso lives in Galicia."]}
{"id": "folio_train_1515", "nl": "Rochelle lives in Galicia.", "fol": "all x.(RochelleLives(x) -> PlaceNamedGalicia(x))", "prediction": ["Rochelle lives in Galicia.", "(LivingIn( Rochelle,Galicia) -> LivesIn( Rochelle,Galicia))", "(LivesIn( Rochelle,Galicia) & -LivesIn( Rochelle,Galicia))", "(LivesIn(Rochelle,Galicia) & -LivesIn(Rochelle,Galicia))", "Rochelle lives in Galicia.", "(LivingIn(Rochelle,Galicia) | LivingIn(Rochelle,Galicia)))", "RochelleLisesInGalicia( Rochelle)", "-LivingInGalicia(Rochelle)", "Rochelle & LivesInGalicia( Rochelle)", "Rochelle lives in Galicia.", "RochelleLivingInGalicia( Rochelle)", "Rochelle lives in Galicia.", "Rochelle LivesInGalicia( Rochelle)", "Rochelle lebt in Galicia.", "Rochelle lives in Galicia.", "Rochelle lives in Galicia."]}
{"id": "folio_train_1516", "nl": "Dominique does not live in Spain.", "fol": "all x.(DominiqueLives(x) -> -LocatedInSpain(x))", "prediction": ["-exists x.(Dominique(x) & LivesIn(x,Spanish))", "Dominique neexists en Espaa.", "(LivingIn(Dominique) -> -LivingIn(Dominique,Spania))", "(-LivesIn(Dominique,Spania))", "-LivingIn(Dominique,Spania)", "(Douard(Dominique) & -LivesIn(Dominique,Spania))", "(LivingIn(Dominique,Spania) -> -LivingIn(Dominique,Spania))", "-exists x.(Dominique(x) & LivesIn(x,Spania))", "Dominique -LivesInSpanish(Dominique)", "Dominique neexists en Espaa.", "-LivingInSpain(Dominique)", "Dominique nelivesInSpain(Dominique)", "(LivingIn(Dominique) & -LivingIn(Dominique))", "Dominique neexists en Espaa.", "-exists x.(Dominique(x) & LivesIn(x,Spanish))", "-exists x.(Dominion(x) & LivesIn(x,Spain))"]}
{"id": "folio_train_1517", "nl": "Alfonso lives in Europe.", "fol": "all x.(AlfonsoLives(x) -> LocatedInEurope(x))", "prediction": ["All x.(Alfonso(x) -> LivesInEurope(x))", "AlfonsoLisesInEurope(alfonso,europe)", "(LivingIn(Alfonso,Europe))", "Alfonso lives in Europe.", "AlfonsoLisesInEurope(Alfonso,Europe)", "all x y.((Alfonso(x) & Europe(y)) -> LivesIn(x,y))", "all x.(Alfonso(x) -> LivesInEurope(x))", "Alfonso livesInEurope(alfonso,europe)", "Alfonso & LivesInEurope(alfonso,europe)", "All x.(Alfonso(x) -> LivesInEurope(x))", "Alfonso LivesInEurope(alfonso,europe)", "AlfonsoLisesInEurope(alfonso,europe)", "all x.(Alfonso(x) -> LivesInEurope(x))", "Alfonso lives in Europe.", "All x.(Alfonso(x) -> LivesInEurope(x))", "Alfonso lebt in Europe."]}
{"id": "folio_train_1518", "nl": "Ralph Hammerthaler was born in Wasserburg am Inn.", "fol": "BornInLocation(RalphHammerthaler,WasserburgAmInn)", "prediction": ["Ralph Hammerthaler was born in Wasserburg am Inn.", "(Birth(RalphHammerthaler) & BornInWaterburgAmInn(RalphHammerthaler))", "RalphHammerthaler was born in Wasserburg am Inn.", "-(RalphHammerthaler(Ross) & BornInWaterburgAmInn(Ross))", "Ralph Hammerthaler was born in Wasserburg am Inn.", "(Birth(RoscarHammerthaler) & BornIn(RoscarHammerthaler,Waterburg))", "(Birth(RalphHammerthaler,Waterburg) & BornIn(RalphHammerthaler,Waterburg))", "RalphHammerthaler was born in Wasserburg am Inn.", "(BirthInWaterburg(RalphHammerthaler)", "Ralph Hammerthaler (bornInWaterburgAmInn)", "Ralph Hammerthaler was born in Wasserburg am Inn.", "RalphHammerthaler (bornInWaterburgAmInn)", "RalphHammerthaler was born in Wasserburg am Inn.", "Ralph Hammerthaler (bornInWaterburgAmInn)", "Ralph Hammerthaler was born in Wasserburg am Inn.", "Ralph Hammerthaler was born in Waterburg am Inn."]}
{"id": "folio_train_1519", "nl": "Wasserburg am Inn is in Germany.", "fol": "IsLocatedIn(WasserbAmInn,Germany)", "prediction": ["(InGermany(WaterburgAmInn) & InGermany(WaterburgAmInn))", "LocatedInGermany(WaterburgAmInn)", "(Germany(WaterburgAmInn) & In(Waterburg(inn)))", "Das Hotel Wasserburg am Inn befindet sich in Deutschland.", "Das Wasserburg am Inn ist in Deutschland.", "all x.(WaterburgAmInn(x) -> InGermany(x))", "Die Wasserburg am Inn befindet sich in Deutschland.", "all x.((WaterburgAmInn(x) & Germany(x)) -> In(x,Germany))", "(InGermany(WaterburgAmInn) & InGermany(WaterburgAmInn))", "(Germany(WaterburgAmInn) & In(WaterburgAmInn))", "Das Hotel Wasserburg am Inn befindet sich in Deutschland.", "all x.(WaterburgAmInn(x) -> InGermany(x))", "LocatedInGermany(WaterburgAmInn)", "(InGermany(WasserburgAmInn))", "All x.(WaterburgAmInn(x) -> InGermany(x))", "All x.(WaterburgAmInn(x) -> InGermany(x))"]}
{"id": "folio_train_1520", "nl": "Germany is in Europe.", "fol": "IsLocatedIn(Germany,Europe)", "prediction": ["all x.(Germany(x) -> InEurope(x))", "(InEurope(Germany) & InEurope(Germany))", "all x.(Germany(x) -> InEurope(x))", "all x y.((Germany(x) & Europe(y)) -> In(x,y))", "(InEurope(Germany) & InEurope(Germany))", "all x.(Germany(x) -> InEurope(x))", "all x.(Deutschland(x) -> InEurope(x))", "(InEurope(Deutschland) & InEurope(Deutschland))", "(European(Germany) & In(Germany,Europe))", "all x y.((Germany(x) & Europe(y)) -> In(x,y))", "all x.(Germany(x) -> InEurope(x))", "(European(Germany) -> In(Germany))", "All x.(Deutschland(x) -> InEurope(x))", "all x.(Germany(x) -> InEurope(x))", "all x.(Germany(x) -> InEurope(x))", "All x.(Germany(x) -> InEurope(x))"]}
{"id": "folio_train_1521", "nl": "Ralph Hammerthaler is a German writer.", "fol": "IsWriter(RalphHammerthaler)", "prediction": ["(GermanWriter(RalphHammerthaler)", "all x.((RalphHammerthaler(x) & GermanWriter(x)) -> Writer(x))", "RalphHammerthaler (GermanWriter)", "RalphHammerthaler is a GermanWriter.", "RalphHammerthaler(RossHammerthaler) & GermanWriter(RossHammerthaler)", "(GermanWriter(RalphHammerthaler)", "RalphHamptoner(RossHamptoner) ist ein GermanWriter(RossHamptoner)", "all x.((RalphHammerthaler(x) & GermanWriter(x)) -> Writer(x))", "Ralph Hammerthaler (GermanWriter)", "(GermanWriter(RalphHammerthaler)", "RalphHammerthaler (GermanWriter)", "all x.((RoscarHammerthaler(x) & GermanWriter(x)) -> Writer(x))", "RalphHammerthaler is a GermanWriter.", "(GermanWriter(RoscarHammerthaler)", "(GermanWriter(RalphHamptoner)", "(GermanWriter(RolfHammerthaler)"]}
{"id": "folio_train_1522", "nl": "Ralph Hammerthaler was born in 1965. ", "fol": "BornInYear1965(RalphHammerthaler)", "prediction": ["Ralph Hammerthaler was born in 1965.", "(Birth(RalphHammerthaler) & BornIn(RalphHammerthaler,65))", "RalphHammerthaler was born in 1965.", "-(RalphHammerthaler(Ross) & BornIn(Ross,65))", "Ralph Hammerthaler was born in 1965.", "(Birth(RalphHammerthaler,65))", "RalphHammerthaler was born in 1965.", "(Birth(RoscarHammerthaler) & BornIn(RoscarHammerthaler))", "Ralph Hammerthaler (bornIn65))", "Ralph Hammerthaler was born in 1965.", "RalphHammerthaler (bornIn65))", "(Birth(RalphHamptoner,65))", "Ralph Hammerthaler (bornIn65))", "RalphHammerthaler was born in 1965.", "Ralph Hammerthaler was born in 1965.", "Ralph Hammerthaler was born in 1965."]}
{"id": "folio_train_1523", "nl": "Ralph Hammerthaler is a writer born in Asia.", "fol": "(IsWriter(RalphHammerthaler) & BornInLocation(RalphHammerthaler,Asia))", "prediction": ["(Writer(RalphHammerthaler) & BornInAsia(RalphHammerthaler))", "all x.((Writer(x) & BornInAsia(x)) -> RalphHammerthaler(x))", "RalphHammerthaler is a writer born in Asia.", "RalphHammerthaler(RossHammerthaler) & BornInAsia(RossHammerthaler)", "Ralph Hammerthaler (bornInAsia(Rhodak))", "RalphHammerthaler (bornInAsia(Rhodak))", "Ralph Hammerthaler is a writer born in Asia.", "all x.(RalphHammerthaler(x) -> BornInAsia(x))", "(Writer(RalphHammerthaler) & BornInAsia(RalphHammerthaler))", "all x.((Writer(x) & BornInAsia(x)) -> RalphHammerthaler(x))", "RalphHammerthaler (bornInAsia(RolandHammerthaler))", "(Writer(RalphHammerthaler) & BornInAsia(RalphHammerthaler))", "RalphHammerthaler is a writer born in Asia.", "all x.((Writer(x) & BornInAsia(x)) -> RalphHammerthaler(x))", "(Writer(RolfHammerthaler) & BornInAsia(RolfHammerthaler))", "(Writer(RalphHammerthaler) & BornInAsia(RalphHammerthaler))"]}
{"id": "folio_train_1524", "nl": "Ralph Hammerthaler lives in Germany.", "fol": "LivesIn(RalphHammerthaler,Germany)", "prediction": ["(LivesIn(RalphHammerthaler,Germany))", "-exists x.(Hammerthaler(x) & LivesIn(x,Germany))", "RalphHammerthalerLisesInGermany(RossHammerthaler)", "RalphHammerthaler(RossHammerthaler) livesInGermany(RossHammerthaler)", "all x.((RalphHammerthaler(x) & LivesIn(x,Germany)) -> LivesIn(x,Germany))", "(LivingIn(RalphHammerthaler,Germany))", "all x.(Hammerthaler(x) -> LivesIn(x,Germany))", "RalphHammerthalerLisesIn(RossHammerthaler,Germany)", "Ralph Hammerthaler lives in Germany.", "-LisesIn(RalphHammerthaler,Germany)", "(LivesIn(RalphHammerthaler,Germany))", "RalphHamptonerLisesInGermany(RoscarHamptoner)", "RalphHammerthaler(RossHammerthaler) livesInGermany(RossHammerthaler)", "(LisesIn(RalphHammerthaler,Germany))", "RalphHammerthalerLisesInGermany(RoscarHammerthaler)", "Ralph Hammerthaler lives in Germany."]}
{"id": "folio_train_1525", "nl": "All books written by Tomas have sold more than 1 million copies. ", "fol": "all x.(WrittenByTomas(x) -> SoldMoreThanOneMillionCopies(x))", "prediction": ["all x.((Book(x) & WrittenByTomas(x)) -> SoldMoreThan(x,million))", "all x.((Book(x) & WrittenByTomas(x)) -> SoldMoreThanOneMillionCopies(x))", "all x y.((Book(x) & WrittenByTomas(x)) -> SoldMoreThan(x,y))", "(all x.(BookWrittenByTomas(x) -> SoldMoreThan(x,y)))", "(all x.(TomasBook(x) -> SoldMoreThan(x,y)))", "all x.((Book(x) & WrittenByTomas(x)) -> SoldMoreThan(x,y))", "all x y.((Book(x) & WrittenByTomas(x)) -> SoldMoreThan(x,y))", "all x y.((Book(x) & WrittenByTomas(x,y)) -> SoldMoreThan(x,y))", "all x y.((Book(x) & WrittenByTomas(x) & SoldMoreThan(x,y)) -> MoreThan(y,x))", "all x.((Book(x) & WrittenByTomas(x)) -> SoldMoreThanOneMillionCopies(x))", "all x.(Book(x) -> WrittenByTomas(x))", "all x.((Book(x) & WrittenByTomas(x)) -> SoldMoreThan(x,1000000))", "all x.(Book(x) -> (WrittenByTomas(x) & SellsMoreThan(x,1000)))", "all x.((Book(x) & WrittenByTomas(x)) -> SoldMoreThan1MCopies(x))", "All x.(Book(x) -> WrittenByTomas(x))", "all x.((Book(x) & WrittenByTomas(x)) -> SoldMoreThanOneMillionCopies(x))"]}
{"id": "folio_train_1526", "nl": "Some books that have won Hugo Awards are written by Tomas.", "fol": "exists x.(HasWonHugoAward(x) & WrittenByTomas(x))", "prediction": ["exists x.(Book(x) & WonHugoAward(x) & WrittenByTomas(x))", "exists x.(Book(x) & WonHugoAward(x) & WrittenByTomas(x))", "exists x.((Book(x) & WonHugoAwards(x)) -> WrittenByTomas(x))", "all x y.((Book(x) & HugoAward(y)) -> WrittenByTomas(x,y))", "(exists x.(Book(x) & WonHugoAwards(x)) & WrittenByTomas(x))", "exists x.(Book(x) & WonHugoAwards(x) & WrittenByTomas(x))", "all x y.((Book(x) & WonHugoAward(x)) -> WrittenByTomas(x))", "exists x.(Book(x) & WonHugoAward(x) & WrittenByTomas(x))", "exists x.((Book(x) & WonHugoAwards(x)) -> WrittenByTomas(x))", "all x y.((Book(x) & WonHugoAward(x,y)) -> WrittenByTomas(x))", "exists x.(Book(x) & WonHugeOAward(x) & WrittenByTomas(x))", "exists x.(Book(x) & WonHugoAward(x) & WrittenByTomas(x))", "all x y.((Book(x) & HugoAward(y)) -> WrittenByTomas(x,y))", "exists x.(Book(x) & WonHugoAward(x) & WrittenByTomas(x))", "exists x.((Book(x) & WonHugoAwards(x)) -> WrittenByTomas(x))", "exists x.(Book(x) & WonHugeOawards(x) & WrittenByTomas(x))"]}
{"id": "folio_train_1527", "nl": "All books about the future are inspired by Shakespeare. ", "fol": "all x.(IsAboutFuture(x) -> InspiredByShakespeare(x))", "prediction": ["all x.(Book(x) -> InspiredBySaxon(x))", "all x.(Book(x) -> InspiredByShakespeare(x))", "all x.((Book(x) & InspiredByShakespeare(x)) -> Future(x))", "all x y.((Book(x) & Future(y)) -> InspiredBySaultan(x,y))", "all x.(Book(x) -> InspiredByScottish(x))", "all x.((Book(x) & InspiredByShakespeare(x)) -> Future(x))", "all x.(Book(x) -> InspiredBySacrament(x))", "(all x.(Book(x) -> InspiredByScottish(x))", "all x y.((Book(x) & Future(y)) -> InspiredByShakespeare(x,y))", "(all x.(Book(x) -> InspiredBySaxon(x)))", "all x y.((Book(x) & Future(y)) -> InspiredByScottish(x,y))", "all x.(Book(x) -> InspiredByShakespeare(x))", "all x y.((Book(x) & Future(y)) -> InspiredBySaultan(x,y))", "all x.(Book(x) -> InspiredByShakespeare(x))", "(all x.(Book(x) -> InspiredByShakespeare(x))", "all x.(Book(x) -> InspiredByScottish(x))"]}
{"id": "folio_train_1528", "nl": "2001 is a book either inspired from Shakespeare or it has sold more than 1 million copies.", "fol": "((InspiredByShakespeare(Y2001) & -SoldMoreThanOneMillionCopies(Y2001)) | (-InspiredByShakespeare(Y2001) & SoldMoreThanOneMillionCopies(Y2001)))", "prediction": ["all x.((Book(x) & (InspiredFromSaxon(x,Saxon) | SoldMoreThan(x,MillionCopies))) -> 2001(x))", "(InspiredFromSaul Shakespeare(2001) | SoldMoreThanOneMillionCopies(2001))", "((Book(2001) & (InspiredFromSaul Shakespeare(2001) | SoldMoreThanOneMillionCopies(2001))) -> InspiredFrom(2001,Saul Shakespeare))", "(InspiredFromShakespeare(2001) | SoldMoreThanOneMillionCopies(2001))", "all x.((Book(x) & (InspiredFromSassamer(x) | SoldMoreThan(x,1000000))) -> 2001(x))", "all x.(2001(x) -> (InspiredFromSaxon(x) | SoldMoreThanOneMillionCopies(x)))", "all x.((Book(x) & (InspiredFromShakespeare(x) | SoldMoreThan(x,1000000))) -> 2001(x))", "all x y.((Book(x) & 2001(y)) -> (InspiredFromSaul Shakespeare(x) | SoldMoreThan(x,y)))", "all x y.((Book(x) & 2001) & (InspiredFromSaul Shakespeare(x) | SoldMoreThan(x,y))) -> (InspiredFrom(x,y) | SoldMoreThan(x,y)))", "((Book(2001) & InspiredFromSaul Shakespeare(2001)) | SoldMoreThan1MCopies(2001)))", "all x.((Book(x) & InspiredFromSaul Shakespeare(x)) | SoldMoreThanOneMillionCopies(x))", "(InspiredFromSaul Shakespeare(2001) | SoldMoreThan1MCopies(2001))", "all x.(2001(x) -> (InspiredFromSaul Shakespeare(x) | SoldMoreThan1MCopies(x)))", "(InspiredFromShakespeare(2001) | SoldMoreThanOneMillionCopies(2001))", "all x.((Book(x) & (InspiredFromSaul Shakespeare(x) | SoldMoreThanOneMillionCopies(x))) -> 2001(x))", "all x.(2001(x) -> (InspiredFromShakespeare(x) | SoldMoreThanOneMillionCopies(x)))"]}
{"id": "folio_train_1529", "nl": "2001 is a book that has either sold more than 1 million copies or it was written by Tomas.", "fol": "((SoldMoreThanOneMillionCopies(Y2001) & -WrittenByTomas(Y2001)) | (-SoldMoreThanOneMillionCopies(Y2001) & WrittenByTomas(Y2001)))", "prediction": ["all x.((Book(x) & SoldMoreThan(x,1)) | WrittenByTomas(x))", "all x.((Book(x) & (SoldMoreThan(x,1000000) | WrittenByTomas(x))) -> 2001(x))", "(SoldMoreThan(2001) | WrittenByTomas(2001)))", "2001 is a book that either sold more than 1 million copies or was written by Tomas.", "(SoldMoreThanOneMillionCopies(2001) | WrittenByTomas(2001)))", "(Book(2001) & (SoldMoreThan1MCopies(2001) | WrittenByTomas(2001)))", "all x y.((Book(x) & 2001(y)) -> (SoldMoreThan(x,y) | WrittenByTomas(y)))", "((Book(2001) & SoldMoreThanOneMillionCopies(2001)) | WrittenByTomas(2001)))", "all x y.((Book(x) & 2001(x) & (SoldMoreThan(x,y) | WrittenBy(x,y))) -> SoldMoreThan(x,y))", "(SoldMoreThan1MCopies(2001) | WrittenByTomas(2001))", "all x.((Book(x) & SoldMoreThan(x,1000000)) | WrittenByTomas(x))", "all x.((Book(x) & (SoldMoreThan(x,1) | WrittenByTomas(x))) -> 2001(x))", "all x.((Book(x) & SoldMoreThanOneMillionCopies(x)) | WrittenByTomas(x))", "all x.(2001(x) -> (SoldMoreThan1MCopies(x) | WrittenByTomas(x)))", "all x y.((Book(x) & 2001(y)) -> (SoldMoreThan(x,y) | WrittenByTomas(x,y)))", "all x.((Book(x) & (SoldMoreThanOneMillionCopies(x) | WrittenByTomas(x))) -> 2001(x))"]}
{"id": "folio_train_1530", "nl": "2001 is a book that has won a Hugo Award.", "fol": "HasWonHugoAward(Y2001)", "prediction": ["all x.((Book(x) & WonHugoAward(x)) -> 2001(x))", "2001 is a book that won HugoAward(2001)", "(Book(2001) & WonHugoAward(2001))", "all x y.((Book(x) & 2001(y)) -> WonHugoAward(x,y))", "all x.((Book(x) & WonHugoAward(x)) -> 2001(x))", "(WonHugoAward(2001))", "2001 is a book that wonHugoAward(2001)", "2001 is a book that has won HugoAward(2001)", "all x.((Book(x) & 2001(x)) -> WonHugoAward(x))", "all x.((Book(x) & WonHugoAward(x)) -> 2001(x))", "2001 is a Book ThatWonHugoAward(2001)", "(WonHugoAward(2001))", "2001 is a book that won HugoAward(2001)", "(WonHugoAward(2001,2001))", "all x.((Book(x) & WonHugoAward(x)) -> 2001(x))", "all x.((Book(x) & 2001(x)) -> WonHugoAward(x))"]}
{"id": "folio_train_1531", "nl": "2001 is a book that has won a Hugo Award and is about the future.", "fol": "(HasWonHugoAward(Y2001) & IsAboutFuture(Y2001))", "prediction": ["all x.((Book(x) & WonHugoAward(x) & AboutFuture(x)) -> 2001(x))", "(Book(2001) & WonHugoAward(2001) & AboutFuture(2001))", "2001 is a book that won HugoAwards and AboutFuture(2001)", "((Book(2001) & WonHugoAward(2001)) -> AboutFuture(2001))", "(WonHugoAward(2001) & AboutFuture(2001))", "all x y.((Book(x) & 2001(y) & WonHugoAward(x,y)) -> AboutFuture(x))", "all x.((Book(x) & WonHugoAward(x) & AboutFuture(x)) -> 2001(x))", "2001 (Book(x) & WonHugoAward(x) & AboutFuture(x))", "2001 is a book that won HugoAward(2001) & AboutFuture(2001))", "2001 is a book that won HugoAwards and AboutFuture(2001)", "(WonHugoAward(2001) & AboutFuture(2001))", "2001 is a book that has won HugoAwards and AboutFuture(2001)", "all x.((Book(x) & WonHugoAward(x) & AboutFuture(x)) -> 2001(x))", "(WonHugoAward(2001) & AboutFuture(2001))", "all x.((Book(x) & WonHugoAward(x) & AboutFuture(x)) -> 2001(x))", "all x.((Book(x) & WonHugoAward(x) & AboutFuture(x)) -> 2001(x))"]}
{"id": "folio_train_1532", "nl": "If 2001 either has won a Hugo Award and is about the future, or neither has won a Hugo Award nor is about the future, then 2001 has neither won a Hugo Award nor is written by Tomas.", "fol": "(((HasWonHugoAward(Y2001) & IsAboutFuture(Y2001)) | (-HasWonHugoAward(Y2001) & -IsAboutFuture(Y2001))) -> (-HasWonHugoAward(Y2001) & -WrittenByTomas(Y2001)))", "prediction": ["all x.((2001(x) & (WonHugoAward(x) & AboutFuture(x) | -WonHugoAward(x) & -WrittenByTomas(x))) -> (-WonHugoAward(x) & -WrittenByTomas(x)))", "((2001) & WonHugoAward(2001) & AboutFuture(2001)) | (-WonHugoAward(2001) & AboutFuture(2001))))", "(all x.((2001(x) & WonHugoAward(x) & AboutFuture(x)) | (-WonHugoAward(x) & -WrittenByTomas(x))))", "((2001(2001) & WonHugoAward(2001) & AboutFuture(2001)) | (-WonHugoAward(2001) & AboutFuture(2001))))", "all x.((2001(x) & (WonHugoAward(x) & AboutFuture(x) | -WonHugoAward(x) & AboutFuture(x))) -> (-WonHugoAward(x) & -WrittenByTomas(x)))", "all x y.((2001(x) & HugoAward(y) & AboutFuture(x) & ((Won(x,y) & -Won(x,y)) | (-Won(x,y) & AboutFuture(y))))) -> (-Won(x,y) & -WrittenByTomas(x,y)))", "all x.((2001(x) & (WinnedHugoAward(x) & AboutFuture(x) | -WinnedHugoAward(x) & -WrittenByTomas(x))) -> (-WinnedHugoAward(x) & -WrittenByTomas(x)))", "(all x.((2001) & WonHugoAward(x) & AboutFuture(x)) | (-WonHugoAward(x) & -WrittenByTomas(x))))", "all x.((2001(x) & (WonHugoAward(x) & AboutFuture(x)) | (-WonHugoAward(x) & AboutFuture(x)))) -> (-WonHugoAward(x) & -WrittenByTomas(x)))", "all x y.((2001(x) & (WonHugoAward(x,y) & AboutFuture(x)) | (-WonHugoAward(x,y) & AboutFuture(y)))) -> (-WonHugoAward(x,y) | WrittenByTomas(x,y)))", "all x.((2001(x) & (WonHugeOfAward(x) & AboutFuture(x)) | (-WonHugeOfAward(x) & AboutFuture(x)))) -> (-WonHugeOfAward(x) & -WrittenByTomas(x)))", "((2001) & WonHugoAward(2001) & AboutFuture(2001)) | (-WonHugoAward(2001) & AboutFuture(2001))))", "all x.((2001(x) & ((WonHugoAward(x) & AboutFuture(x)) | (-WonHugoAward(x) & AboutFuture(x)))) -> (-WonHugoAward(x) & -WrittenByTomas(x))))", "all x.((2001(x) & (WonHugeOward(x) & AboutFuture(x) | -WonHugeOward(x) & -WrittenByTomas(x))) -> (-WonHugeOward(x) & -WrittenByTomas(x)))", "(all x.((2001(x) & WonHugoAward(x) & AboutFuture(x)) | (-WonHugoAward(x) & -WrittenByTomas(x))))", "(all x.((2001(x) & WonHugoAward(x) & AboutFuture(x)) | (-WonHugoAward(x) & -WrittenByTomas(x))))"]}
{"id": "folio_train_1533", "nl": "No grass is food. ", "fol": "all x.(IsGrass(x) -> -IsFood(x))", "prediction": ["-exists x.(Grass(x) & Food(x))", "all x.(Grass(x) -> -Food(x))", "-exists x.(Grass(x) & Food(x))", "all x.(Grass(x) -> -Food(x))", "-exists x.(Grass(x) & Food(x))", "all x.(Grass(x) -> -Food(x))", "-exists x.(Grass(x) & Food(x))", "(exists x.(Grass(x) & Food(x))", "all x.(Grass(x) -> -Food(x))", "-exists x.(Grass(x) & Food(x))", "all x.(Grass(x) -> -Food(x))", "-exists x.(Grass(x) & Food(x))", "-exists x.(Grass(x) & -Food(x))", "-exists x.(Grass(x) & Food(x))", "-exists x.(Grass(x) & Food(x))", "-exists x.(Grass(x) & Food(x))"]}
{"id": "folio_train_1534", "nl": "All meadows are grass.", "fol": "all x.(IsMeadow(x) -> IsGrass(x))", "prediction": ["all x.(Meadow(x) -> Grass(x))", "all x.(Meadow(x) -> Grass(x))", "all x.exists y.(Meadow(x) & Grass(y) & Grass(z) & Grass(z) & Grass(z))", "(all x.(Meadow(x) -> Grass(x))", "all x.(Meadow(x) -> Grass(x))", "all x.exists y.(Meadow(x) & Meadow(y) & Grass(x))", "all x y.((Meadow(x) & Ground(y)) -> Grass(x))", "all x.(Meadow(x) -> (Grass(x) | Grass(x)))", "(all x.(Meadow(x) -> Grass(x))", "all x.(Meadow(x) -> Grass(x))", "all x.(Meadow(x) -> IsGrass(x))", "all x.(Meadow(x) -> (Grass(x) & Grass(x)))", "all x.(Meadow(x) -> Grass(x))", "all x.(Meadow(x) -> Green(x))", "all x.(Meadow(x) -> Grass(x))", "exists x.(Meadow(x) & Ground(x))"]}
{"id": "folio_train_1535", "nl": "All edible things are food. ", "fol": "all x.(IsEdible(x) -> IsFood(x))", "prediction": ["all x.(EdibleThing(x) -> Food(x))", "all x.(Edible(x) -> Food(x))", "all x.(EdibleThing(x) -> Food(x))", "(all x.(EdibleThing(x) -> Food(x))", "all x y.((EdibleThing(x) & Food(y)) -> Food(x))", "all x.(Edible(x) -> Food(x))", "(all x.(EdibleThing(x) -> Food(x))", "all x.(EdibleThing(x) -> Food(x))", "all x.(Edible(x) -> Food(x))", "all x.(EdibleTree(x) -> Food(x))", "all x.(EdibleThing(x) -> Food(x))", "all x.(Edible(x) -> Food(x))", "all x.(EdibleThing(x) -> Food(x))", "all x.(Edible(x) -> Food(x))", "all x.(EdibleThing(x) -> Food(x))", "exists x.(Edible(x) & Food(x))"]}
{"id": "folio_train_1536", "nl": "All fruits are edible.", "fol": "all x.(IsFruit(x) -> IsEdible(x))", "prediction": ["all x.(Fruit(x) -> Edible(x))", "all x.(Fruit(x) -> Edible(x))", "(EdibleFruit(fruit)", "all x.(Fruit(x) -> Edible(x))", "(EdibleFruit(Fruit)", "all x.(Fruit(x) -> Edible(x))", "(EdibleFruit(fruit)", "all x.((Fruit(x) & Edible(x)) -> Fruit(x))", "all x.(Fruit(x) -> Edible(x))", "all x.(Fruit(x) -> Edible(x))", "all x.(Fruit(x) -> Edible(x))", "all x.(Fruit(x) -> Edible(x))", "all x.(Fruit(x) -> Edible(x))", "all x.(Fruit(x) -> Edible(x))", "exists x.(Fruit(x) & Edible(x))", "all x.(Fruit(x) -> Edible(x))"]}
{"id": "folio_train_1537", "nl": "All lemons are fruit.", "fol": "all x.(IsLemon(x) -> IsFruit(x))", "prediction": ["all x.(Lemon(x) -> Fruit(x))", "all x.(Lemon(x) -> Fruit(x))", "all x.(Limon(x) -> Fruit(x))", "(Fruit(lemon) & Fruit(lemon,lemon,lemon))", "all x.(Lemon(x) -> Fruit(x))", "all x y.((Lemon(x) & Fruit(y)) -> Fruit(x))", "(all x.(Lemon(x) -> Fruit(x))", "all x.(Limon(x) -> Fruit(x))", "all x.(Lemon(x) -> Fruit(x))", "(all x.(Lemon(x) -> Fruit(x))", "all x.(Lime(x) -> Fruit(x))", "all x.(Lemon(x) -> Fruit(x))", "all x.(Limon(x) -> Fruit(x))", "all x.(Lemon(x) -> Fruit(x))", "all x.(Lime(x) -> Fruit(x))", "all x.(Lemon(x) -> Fruit(x))"]}
{"id": "folio_train_1538", "nl": "Grapes are not edible and lemons.", "fol": "-(IsEdible(IsGrape) & IsLemon(IsGrape))", "prediction": ["all x.((Grape(x) & -Edible(x)) -> Lemon(x))", "all x.(Grape(x) -> (-Edible(x) & -Limon(x)))", "(-Edible(grape) & -Edible(grape) & -Edible(grape) & -Edible(grape) & -Edible(grape) & -Edible(grape) & -Edible(grape) & -Edible(grape) & -Edible(grape) & -Edible(grape) & -Edible(gray) & -Edible(gray))", "all x y.((Grape(x) & Lemon(y)) -> (-Edible(x) & -Edible(y)))", "(all x.(Grape(x) -> -Edible(x)) & all y.(Lemon(y) -> -Edible(y))))", "all x.((Grape(x) & -Edible(x)) -> Lemon(x))", "all x.(Grape(x) -> -Edible(x) & Lemon(x))", "(all x.(Grape(x) -> -Edible(x)) & all y.(Lemon(y) -> -Edible(y)))", "all x y.((Grape(x) & Lemon(y)) -> (-Edible(x) & -Edible(y)))", "(-Edible(grape) & -Edible(grape,lemon))", "(all x.(Grape(x) -> -Edible(x)) & all y.(Limon(y) -> -Edible(y)))", "all x.(Grape(x) -> (-Edible(x) & Lemon(x)))", "all x y.((Grape(x) & Lemon(y)) -> (-Edible(x) & -Edible(y)))", "all x.(Greek(x) -> (-Edible(x) & -Limon(x)))", "(all x.(Grape(x) -> -Edible(x)) & all y.(Lemon(y) -> -Edible(y)))", "exists x.(Grape(x) & -(Edible(x) & Lemon(x)))"]}
{"id": "folio_train_1539", "nl": "Bananas are grass or fruit.", "fol": "(IsGrass(IsBanana) | IsFruit(IsBanana))", "prediction": ["all x.(Banana(x) -> (Grass(x) | Fruit(x)))", "all x.(Banana(x) -> (Grass(x) | Fruit(x)))", "all x y.((Banana(x) & (Grass(y) | Fruit(y))) -> (Grass(x) | Fruit(y)))", "all x.(Banana(x) -> (Grass(x) | Fruit(x)))", "all x y.((Banana(x) & (Grass(y) | Fruit(y))) -> Fruit(x))", "all x.(Banana(x) -> (Grass(x) | Fruit(x)))", "(all x.(Banana(x) -> (Grass(x) | Fruit(x))))", "all x.(Banana(x) -> (Grass(x) | Fruit(x)))", "(all x.(Banana(x) -> (Grass(x) | Fruit(x))))", "all x.(Banana(x) -> (Grass(x) | Fruit(x)))", "all x.(Banana(x) -> (Grass(x) | Fruit(x)))", "all x.(Banana(x) -> (Groove(x) | Fruit(x)))", "all x.(Banana(x) -> (Grass(x) | Fruit(x)))", "all x.(Banana(x) -> (Grass(x) | Fruit(x)))", "all x.(Banana(x) -> (Grass(x) | Fruit(x)))", "exists x.(Banana(x) & (Grass(x) | Fruit(x)))"]}
{"id": "folio_train_1540", "nl": "Grapes are a food.", "fol": "IsFood(IsGrape)", "prediction": ["all x.(Grape(x) -> Food(x))", "all x.(Grape(x) -> Food(x))", "(Food(grape) & Food(grape))", "(Food(grapes) & Food(grapes))", "all x y.((Grape(x) & Food(y)) -> Food(x))", "all x.(Grape(x) -> Food(x))", "all x y.((Grape(x) & Food(y)) -> Food(x,y))", "all x.(Grape(x) -> Food(x))", "all x.(Greek(x) -> Food(x))", "all x.(Grape(x) -> Food(x))", "all x.(Grape(x) -> Food(x))", "all x.(Greek(x) -> Food(x))", "all x.(Grape(x) -> Food(x))", "all x.(Grape(x) -> Food(x))", "all x.(Grape(x) -> Food(x))", "exists x.(Grape(x) & Food(x))"]}
{"id": "folio_train_1541", "nl": "Grapes are not a food.", "fol": "-IsFood(IsGrape)", "prediction": ["all x.(Grape(x) -> -Food(x))", "all x.(Grape(x) -> -Food(x))", "(all x.(Grape(x) -> -Food(x)))", "(-Food(grape))", "all x.(Grape(x) -> -Food(x))", "(all x.(Grape(x) -> -Food(x)))", "all x y.((Grape(x) & Food(y)) -> -Food(x))", "all x.(Grape(x) -> -Food(x))", "all x.(Greek(x) -> -Food(x))", "(all x.(Grape(x) -> -Food(x)))", "all x.(Grape(x) -> -Food(x))", "all x.(Grape(x) -> -Food(x))", "all x.(Grape(x) -> -Food(x))", "all x.(Greek(x) -> -Food(x))", "all x.(Grape(x) -> -Food(x))", "all x.(Grape(x) -> -Food(x))"]}
{"id": "folio_train_1542", "nl": "Bananas are a lemon and meadow.", "fol": "(IsLemon(IsBanana) & IsMeadow(IsBanana))", "prediction": ["all x.(Banana(x) -> (Lemon(x) & Meadow(x)))", "all x.(Banana(x) -> (Limon(x) & Meadow(x)))", "(Lime(banana) & Meadow(banana))", "(all x.(Banana(x) -> Lemon(x)) & all y.(Banana(y) -> Meadow(y)))", "all x y.((Banana(x) & Lemon(y)) -> Meadow(x,y))", "all x.(Banana(x) -> (Lemon(x) & Meadow(x)))", "(all x.(Banana(x) -> Lemon(x)) & all y.(Banana(y) -> Meadow(y)))", "all x.(Banana(x) -> (Limon(x) & Meadow(x)))", "all x y.((Banana(x) & Lemon(y)) -> Meadow(x,y))", "all x.(Banana(x) -> (Lemon(x) & Meadow(x)))", "all x.(Banana(x) -> (Limon(x) & Meadow(x)))", "all x.(Banana(x) -> (Lemon(x) & Meadow(x)))", "all x.(Banana(x) -> (Lemon(x) & Meadow(x)))", "all x.(Banana(x) -> (Limon(x) & Meadow(x)))", "exists x.(Banana(x) & Lemon(x) & Meadow(x))", "all x.(Banana(x) -> (Lime(x) & Meadow(x)))"]}
{"id": "folio_train_1543", "nl": "Bananas are not both a lemon and a meadow.", "fol": "-(IsLemon(IsBanana) & IsMeadow(IsBanana))", "prediction": ["all x.(Banana(x) -> -(Lemon(x) & Meadow(x)))", "(-(Limon(banana) & Meadow(banana)))", "all x.(Banana(x) -> -(Lemon(x) & Meadow(x)))", "(-(Limon(banana) & Meadow(banana)))", "-(Banana(b) & Lemon(c) & Meadow(d))", "all x y.((Banana(x) & Lemon(y)) -> -(Lemon(x) & Meadow(x)))", "all x.(Banana(x) -> -(Limon(x) & Meadow(x)))", "all x.(Banana(x) -> (-Limon(x) & Meadow(x)))", "(-(Lemon(banana) & Meadow(banana)))", "all x.((Banana(x) & -(Lemon(x) | Meadow(x))) -> -(Lemon(x) & Meadow(x)))", "all x.(Banana(x) -> (-Lemon(x) & Meadow(x)))", "all x.(Banana(x) -> (-Lion(x) & -Meadow(x)))", "all x.(Banana(x) -> -(Lemon(x) & Meadow(x)))", "all x.(Banana(x) -> -(Lemon(x) & Meadow(x)))", "exists x.(Banana(x) & -(Lemon(x) & Meadow(x)) & -(Lemon(x) & Meadow(x))))", "all x.(Banana(x) -> -(Limon(x) & Meadow(x)))"]}
{"id": "folio_train_1544", "nl": "The Golden State Warriors are a team from San Francisco.", "fol": "(IsTeam(Goldenstatewarriors) & BasedIn(Goldenstatewarriors,Sanfrancisco))", "prediction": ["all x.(GoldenStateWarriors(x) -> TeamFromSanFrancisco(x))", "(GoldenStateWarriors(GoldenStateWarriors) & TeamFromSanFrancisco(GoldenStateWarriors))", "(GoldenStateWarriors(GSM) & SanFrancisco(Warriors))", "The GoldenStateWarriors(GSM) -> (TeamFromSanFrancisco(GSM) & SanFrancisco(GSM)))", "all x y.((GoldenStateWarrior(x) & SanFrancisco(y)) -> Team(x,y))", "All x.(GoldenStateWarrior(x) -> TeamFromSanFrancisco(x))", "all x.(GoldenStateWarriors(x) -> TeamFromSanFrankfort(x))", "(SanFrancisco-based team, GoldenStateWarriors)", "all x y.((GoldenStateWarrior(x) & SanFrancisco(y)) -> Team(x,y))", "(GoldenStateWarriors(GSM) -> TeamFromSanFrankfort(GSM))", "All x.(GalenStateWarriors(x) -> TeamFromSanFrankfort.", "all x.(GoldenStateWarriors(x) -> TeamFromSanFernando(x))", "all x y.((GoldenStateWarriors(x) & SanFrancisco(y)) -> Team(x,y))", "All x.(GoldenStateWarrior(x) -> (Team(x) & FromSanFernando(x)))", "All x.(GoldenStateWarrior(x) -> TeamFromSanFrankfort(x))", "All x.(GoldenStateWarriors(x) -> (TeamFromSanFrancisco(x) & SanFrancisco(x)))"]}
{"id": "folio_train_1545", "nl": "The Golden State Warriors won the NBA finals.", "fol": "WonNBAFinals(Goldenstatewarriors,Nbafinals)", "prediction": ["all x.(GoldenStateWarriors(x) -> WonNBAFinals(x))", "(WinsNBAFinals(GoldenStateWarriors))", "(Warriors(GoldenState) & WonNBAFinals(GoldenState))", "all x y.((GoldenStateWarrior(x) & NBAFinal(y)) -> Won(x,y))", "(Winner(GoldenStateWarriors) & NBAFinals(GoldenStateWarriors))", "(GoldenStateWarriors(GoldenStateWarriors) & WonNBAFinals(GoldenStateWarriors))", "The GoldenStateWarriors won NBA Finals.", "All x.(GoldenStateWarrior(x) -> WonNBAFinals(x))", "all x y.((GoldenStateWarriors(x) & NBAFinals(y)) -> Won(x,y))", "The GoldenStateWarriors won the NBA Finals.", "all x y.((GoldenStateWarrior(x) & NBA(y)) -> WonFinals(x,y))", "All x.(GoldenStateWarrior(x) -> WonNBAFinals(x))", "Die GoldenStateWarriors(GSM) won NBA Finals(GSM)", "The GoldenStateWarriorsWonNBAFinals(Words,NBA)", "the GoldenStateWarriors won NBA Finals.", "All x.(GoldenStateWarrior(x) -> WinsNBAFinals(x))"]}
{"id": "folio_train_1546", "nl": "All teams attending the NBA finals have more than thirty years of history.", "fol": "all x.((IsTeam(x) & IsAttendingNBAFinals(x,Nbafinals)) -> HasMoreThanYears(x,Thirtyyearsofhistory))", "prediction": ["all x.((Team(x) & AttendsNBAFinals(x)) -> MoreThanThreeYearsOfHistory(x))", "all x y.((Team(x) & NBAFinals(y) & Attends(x,y)) -> MoreThanThreeYearsOfHistory(x))", "(all x.(AttendsNBAFinals(x) -> MoreThanThreeYearsOfHistory(x)))", "all x.(AttendsNBAFinals(x) -> MoreThanThreeYearsOfHistory(x))", "all x.((Team(x) & AttendsNBAFinals(x)) -> MoreThanThreeYearsOfHistory(x))", "all x y.((Team(x) & NBAFinal(y) & Attends(x,y)) -> MoreThanThreeYearsOfHistory(x))", "all x y.((Team(x) & NBAFinals(y) & Attends(x,y)) -> MoreThanThreeYearsOfHistory(x))", "all x y.((Team(x) & Team(y) & AttendsNBAFinals(x,y)) -> MoreThanThreeYearsOfHistory(x))", "all x.((Team(x) & AttendsNBAFinals(x,3)) -> MoreThanThreeYearsOfHistory(x))", "all x.((Team(x) & AttendsNBAFinals(x)) -> HasHistory(x,y))", "all x.(AttendsNBAFinals(x) -> MoreThanThreeYearsOfHistory(x))", "all x y.((Team(x) & NBAFinals(y) & Attends(x,y)) -> HasMoreThanThreeYearsOfHistory(x))", "all x.((Team(x) & AttendedBalladPlayoffs(x)) -> MoreThanThreeYearsOfHistory(x))", "all x.((Team(x) & AttendsNBAFinals(x)) -> MoreThanThreeYearsOfHistory(x))", "all x.(AttendsNBAFinals(x) -> HasHistory(x,30))", "all x.((Team(x) & AttendsNBAFinals(x,30)) -> HasHistory(x))"]}
{"id": "folio_train_1547", "nl": "Boston Celtics are a team that lost the NBA finals.", "fol": "(IsTeam(Bostonceltics) & LostNBAFinals(Bostonceltics,Nbafinals))", "prediction": ["all x.(BostonCelebrities(x) -> (LoseNBAFinals(x)))", "(LoseNBAFinals(BostonCelebrities))", "all x.((BostonCelebrities(x) & LosesNBAFinals(x)) -> Celtics(x))", "all x y.((BostonCelebrities(x) & NBAFinals(y)) -> Loses(x,y))", "all x.(BostonCelebrities(x) -> (LostNBAFinals(x) & Celtics(x)))", "all x.(BostonCeltics(x) -> (LoseNBAFinals(x) | LoseNBAFinals(x)))", "the BostonCelebrities(Boston) & LosesNBAFinals(Boston)", "(LostNBAFinals(BostonCelebrities))", "all x y.((BostonCeltics(x) & NBAFinals(y)) -> Loses(x,y))", "(LoseNBAFinals(BostonCeltics))", "the Boston Celtics (BostonCelebrity) & LosesNBAFinals(Celebrity,NBA))", "all x.((BostonCeltics(x) & LosesNBAFinals(x)) -> Team(x))", "all x.((BostonCelebrities(x) & LosesNBAFinals(x)) -> CelticsTeam(x))", "All x y.((BostonCelebrity(x) & NBAFinals(y)) -> Lost(x,y))", "(LoseNBAFinals(BostonCelebrities))", "all x.(BostonCeltics(x) -> (LostNBAFinals(x) & Celtics(x)))"]}
{"id": "folio_train_1548", "nl": "If a team wins the NBA finals, then they will have more income.", "fol": "all x.((IsTeam(x) & WonNBAFinals(x,Nbafinals)) -> WillHaveMoreIncome(x))", "prediction": ["all x.((Team(x) & WinsNBAFinals(x)) -> MoreIncome(x))", "all x.(WinsNBAFinals(x) -> MoreIncome(x))", "all x y.((Team(x) & WinsNBAFinals(x,y)) -> MoreIncome(x))", "(WinsNBAFinals(team) -> MoreIncome(team))", "all x.((Team(x) & WinsNBAFinals(x)) -> MoreIncome(x))", "all x y.((Team(x) & WinsNBAFinals(x) & Income(y)) -> MoreIncome(x,y))", "all x.(WonsNBAFinals(x) -> MoreIncome(x))", "all x.(WinsNBAFinals(x) -> MoreIncome(x))", "all x.((Team(x) & WinsNBAFinals(x)) -> MoreIncome(x))", "all x y.((Team(x) & WinsNBAFinals(x,y)) -> MoreIncome(x,y))", "all x.(WonsNBAFinals(x) -> MoreIncome(x))", "all x.((Team(x) & WinsNBAFinals(x)) -> MoreIncome(x))", "all x.(WinsNBAFinals(x) -> MoreIncome(x))", "all x y.((Team(x) & WinsNBAFinals(x,y)) -> MoreIncome(x))", "all x y.((Team(x) & WinsNBAFinals(x) & Income(y)) -> MoreIncome(x,y))", "all x.((Team(x) & WinsNBAFinals(x)) -> MoreIncome(x))"]}
{"id": "folio_train_1549", "nl": "If a team wins or loses at the NBA finals, then they are attending the finals.", "fol": "all x.((WonNBAFinals(x,Nbafinals) | LostNBAFinals(x,Nbafinals)) -> IsAttendingNBAFinals(x,Nbafinals))", "prediction": ["all x.((Team(x) & WinsOrLosesAtNBAFinals(x)) -> AttendingFinals(x))", "all x.((Team(x) & (Wins(x) | Loses(x))) -> AttendingFinals(x))", "all x y.((Team(x) & WinsOrLosesAtNBAFinals(x)) -> AttendingFinals(x,y))", "(all x.(WinsOrLosesAtNBAFinals(x) -> AttendingFinals(x)))", "all x.((Team(x) & (WinsAtNBAFinals(x) | LosesAtNBAFinals(x))) -> AttendingFinals(x))", "all x.((Team(x) & WinsOrLosesAtNBAFinals(x)) -> AttendingFinals(x))", "all x y.((Team(x) & WinsOrLosesAtNBAFinals(x) & Finals(y)) -> Attending(x,y))", "all x.(WinsOrLosesAtNBAFinals(x) -> AttendingFinals(x))", "all x y.((Team(x) & (Wins(x) | Loses(x)) & NBAFinals(y)) -> AttendingFinals(x,y))", "all x y z.((Team(x) & Finals(y) & Finals(z) & WinsOrLosesAt(x,y)) -> Attending(x,z))", "all x.((Team(x) & WinsOrLosesAtFinals(x)) -> AttendingFinals(x))", "all x y.((Team(x) & (Wins(x,y) | Loses(x,y))) -> AttendingFinals(x,y))", "all x y.((Team(x) & WinsOrLosesAtNBAFinals(x) & Final(y)) -> Attending(x,y))", "all x.(WinsOrLosesAtNBAFinals(x) -> AttendingFinals(x))", "all x.((Team(x) & (Wins(x) | Loses(x))) -> AttendingFinals(x))", "all x.((Team(x) & WinsOrLosesAtNBAFinals(x)) -> AttendingFinals(x))"]}
{"id": "folio_train_1550", "nl": "The Boston Celtics is from San Francisco.", "fol": "BasedIn(Bostonceltics,Sanfrancisco)", "prediction": ["All x.(BostonCrickets(x) -> SanFrancisco(x))", "The BostonCrickets(Boston) & SanFrancisco(Boston))", "(BostonCrickets(Boston) & SanFrancisco(Boston))", "(SanFrancisco(BostonCrickets) & SanFrancois(BostonCrickets))", "The BostonCelebs(Boston) & SanFrancisco(Boston)", "All x.(BostonCrickets(x) -> SanFrancisco(x))", "(BostonCrickets(Boston) & SanFernando(Boston))", "The BostonCrickets(Boston) & SanFrancisco(Boston))", "all x y.((BostonCrickets(x) & SanFrancisco(y)) -> From(x,y))", "All x.((BostonCrickets(x) & SanFrancisco(x)) -> From(x,y))", "The BostonCrickets(boston) -> SanFrancisco(boston))", "All x.(BostonCrickets(x) -> SanFernando(x))", "(SanFrancisco(BostonCrickets) & LocatedIn(Boston,France))", "All x.(BostonCelebrities(x) -> SanFrancisco(x))", "all x.(BostonCrickets(x) -> FromSanFrancisco(x))", "The BostonCrickets(Boston) & SanFernando(Boston)"]}
{"id": "folio_train_1551", "nl": "The Boston Celtics has more than 30 years of history.", "fol": "HasMoreThanYears(Bostonceltics,Thirtyyearsofhistory)", "prediction": ["all x.(BostonCrickets(x) -> HasMoreThan30YearsOfHistory(x))", "all x.((BostonCrickets(x) & MoreThan30YearsOfHistory(x)) -> Celtics(x))", "(MoreThan30YearsOfHistory(BostonCrickets))", "all x y.((BostonCrickets(x) & Celtics(y)) -> HasHistory(x,y))", "The BostonCricketsHasMoreThan30YearsOfHistory(BostonCrickets)", "(HasHistory(BostonCrickets,30))", "all x.(BostonCrickets(x) -> HasHistory(x,30))", "the BostonCricketsHasHistory(Boston,30)", "all x.((BostonCrickets(x) & HasHistory(x,30)) -> HasHistory(x))", "All x.(BostonCelebrities(x) -> HasMoreThan30YearsOfHistory(x))", "all x y.((BostonCrickets(x) & Celtics(y)) -> HasMoreThan30YearsOfHistory(x,y))", "All x.(BostonCrickets(x) -> MoreThan30YearsOfHistory(x))", "(HasHistory(BostonCrickets,35))", "all x y.((BostonCrickets(x) & Celtics(y)) -> MoreThan30YearsOfHistory(x,y))", "All x.((BostonCrickets(x) & MoreThan30YearsOfHistory(x)) -> HasHistory(x))", "All x.(BostonCrickets(x) -> HasMoreThan30YearsOfHistory(x))"]}
{"id": "folio_train_1552", "nl": "The Golden State Warriors will have more income for gate receipts.", "fol": "WillHaveMoreIncome(Goldenstatewarriors)", "prediction": ["all x.(GoldenStateWarrior(x) -> MoreIncomeForGateReceipts(x))", "all x y.((GoldenStateWarrior(x) & GateReceipt(y)) -> MoreIncome(x,y))", "(GalileoReceipts(GoldenStateWarriors) -> MoreIncomeForGateReceipts(GoldenStateWarriors))", "all x.(GoldenStateWarrior(x) -> MoreIncomeForGateReceives(x))", "all x y.((GoldenStateWarrior(x) & GateReceipt(y)) -> MoreIncomeFor(x,y))", "All x.(GalileoReceipt(x) -> MoreIncome(x))", "all x.(GoldenStateWarrior(x) -> HasMoreIncomeForGateReceipts(x))", "All x.(GalleyStateWarrior(x) -> MoreIncomeForGateReceipts(x))", "all x.(GoldenStateWarrior(x) -> MoreIncomeForGateReceipts(x))", "all x y.((GoldenStateWarrior(x) & GateReceipt(y)) -> MoreIncome(x,y))", "all x y.((GoldenStateWarrior(x) & GateGateReceipt(y)) -> MoreIncome(x,y))", "all x y.((GoldenStateWarrior(x) & GateReceipt(y)) -> MoreIncomeFor(x,y))", "all x.(GoldenStateWarrior(x) -> MoreIncomeForGateReceives(x))", "All x.(GoldenStateWarrior(x) -> HasMoreIncomeForGateReceives(x))", "All x.(GalileoReceipts(x) -> MoreIncome(x))", "All x.(GoldenStateWarrior(x) -> MoreIncome(x,GateReceipts))"]}
{"id": "folio_train_1553", "nl": "Maya will play violin if and only if she never injures her fingers.", "fol": "(CanInjureFingers(Maya) -> -WillPlayViolin(Maya))", "prediction": ["all x.((Maya(x) & -InjuresFingers(x)) -> WillPlayViolin(x))", "all x y.((Maya(x) & Fingers(y) & -Injures(x,y)) -> WillPlayViolin(x))", "all x.((Maya(x) & -InjuresFingers(x)) -> PlaysViolin(x))", "(all x.((Maya(x) & -InjuresFingers(x)) -> PlaysViolin(x)))", "all x y.((Maya(x) & Fingers(y) & -Injures(x,y)) -> WillPlayViolin(x,y))", "all x.((Maya(x) & -InjuresFingers(x)) -> WillPlayViolin(x))", "(all x.((Maya(x) & -InjuresFingers(x)) -> PlaysViolin(x)))", "all x y.((Maya(x) & Finger(y) & -Injures(x,y)) -> WillPlayViolin(x,y))", "all x y.((Maya(x) & Fingers(y) & -Injures(x,y)) -> PlaysViolin(x))", "all x.((Maya(x) & NeverInjuresFingers(x)) -> WillPlayViolin(x))", "all x.((Maya(x) & -InjuresFingers(x)) -> PlaysViolin(x))", "(all x.((Maya(x) & -InjuresFingers(x)) -> WillPlayViolin(x)))", "all x.((Maya(x) & NeverInjuresFingers(x)) -> WillPlayViolin(x))", "all x.((Maya(x) & -InjuresFingers(x)) -> WillPlayViolin(x))", "all x.((Maya(x) & PlaysViolin(x)) -> -InjuresFingers(x))", "all x.((Maya(x) & -InjuresFingers(x)) -> PlaysViolin(x))"]}
{"id": "folio_train_1554", "nl": "Volleyball players can injure their ankle, fingers, or shoulder.", "fol": "all x.(IsVolleyballPlayer(x) -> CanInjureFingers(x))", "prediction": ["all x.(VolleyballPlayer(x) -> (InjuresAnkle(x) | InjuresFingers(x) | InjuresShoulder(x)))", "all x y.((VolleyballPlayer(x) & (Ankle(y) | Fingers(y) | Shoulder(y))) -> Injure(x,y))", "all x.(VolleyballPlayer(x) -> (Injure(x,ankle) | Injure(x,fingers) | Injure(x,shoulder)))", "all x.(VolleyballPlayer(x) -> (InjuresAnkle(x) | InjuresFingers(x) | InjuresShoulder(x)))", "all x y z.((VolleyballPlayer(x) & (Ankle(y) | Fingers(y) | Shoulder(z))) -> Injure(x,y,z))", "(InjuresAnkle(VolleyballPlayer) | InjuresFingers(VolleyballPlayer) | InjuresShoulder(VolleyballPlayer))", "(InjuresAnkle(VolleyballPlayer) | InjuriesFingers(VolleyballPlayer) | InjuriesShoulder(VolleyballPlayer))", "all x y.((VolleyballPlayer(x) & (Ankle(y) | Finger(y) | Shoulder(y))) -> Injure(x,y))", "all x.(VolleyballPlayer(x) -> (InjureAnkle(x) | InjureFingers(x) | InjureShoulder(x)))", "all x y.((VolleyballPlayer(x) & (Angle(y) | Fingers(y) | Shoulder(y))) -> Injures(x,y))", "all x.(VolleyballPlayer(x) -> (InjuresAnkle(x) | InjuresFingers(x) | InjuresShoulder(x)))", "all x.(VolleyballPlayer(x) -> (Injure(x,ankle) | Injure(x,fingers) | Injure(x,shoulder)))", "all x y.((VolleyballPlayer(x) & (Ankle(y) | Fingers(y) | Shoulder(y))) -> Injures(x,y))", "all x.(VolleyballPlayer(x) -> (Injure(x,ankle,fingers) | Injure(x,shoulder)))", "all x.(VolleyballPlayer(x) -> (InjuresAnkle(x) | InjuresFingers(x) | InjuresShoulder(x)))", "all x.(VolleyballPerson(x) -> (InjuresAngle(x) | InjuresFingers(x) | InjuresShoulder(x)))"]}
{"id": "folio_train_1555", "nl": "Maya is a volleyball player.", "fol": "IsVolleyballPlayer(Maya)", "prediction": ["all x.(Maya(x) -> VolleyballPlayer(x))", "Maya is volleyball player.", "(VolleyballPlayer(Maya)", "all x.(Maya(x) -> VolleyballPlayer(x))", "maya.(VolleyballPlayer(maya) & PlaysIn(maya,v))", "all x.((Maya(x) & VolleyballPlayer(x)) -> Plays(x,y))", "Maya is volleyball player.", "(VolleyballPlayer(Maya)", "all x.(VolleyballPlayer(x) -> Maya(x))", "maya.(VolleyballPlayer(Maya))", "Maya is a volleyball player.", "(VolleyballPlayer(Maya,Vowel))", "all x.(Maya(x) -> VolleyballPlayer(x))", "Maya is volleyball player.", "(VolleyballPlayer(Maya,Voice))", "all x.(Maya(x) -> VolleyballPlayer(x))"]}
{"id": "folio_train_1556", "nl": "Maya will not play violin.", "fol": "-WillPlayViolin(Maya)", "prediction": ["all x.(Maya(x) -> -PlaysViolin(x))", "(-PlaysViolin(Maya))", "all x.(Maya(x) -> -PlayViolin(x))", "-(Maya(Maya) & Violin(Maya))", "Maya will notPlayViolin(Maya,x))", "(-PlayViolin(Maya,Maya))", "(-PlaysViolin(Maya))", "all x.(Maya(x) -> -PlaysViolin(x))", "maya.noViolin(n)", "all x.(Maya(x) -> -PlayViolin(x))", "-PlaysViolin(maya)", "all x.(Maya(x) -> -PlaysViolin(x))", "(-playsViolin(Maya))", "all x.(Maya(x) -> -PlayViolin(x))", "All x.(Maya(x) -> -PlayViolin(x))", "all x.(Maya(x) -> -PlaysViolin(x))"]}
{"id": "folio_train_1557", "nl": "All devices with the company logo belong to the company. ", "fol": "all x.(HasCompanyLogo(x) -> BelongsToCompany(x))", "prediction": ["all x.((Device(x) & CompanyLogo(x)) -> BelongsTo(x,Company))", "all x y.((Device(x) & CompanyLogo(y)) -> BelongsTo(x,y))", "all x.((Device(x) & HasCompanyLogo(x)) -> BelongsToCompany(x))", "all x.((Device(x) & CompanyLogo(x)) -> BelongsTo(x,Company))", "all x y z.((Device(x) & CompanyLogo(y) & Device(z) & HasLogo(x,y)) -> BelongsTo(z,y))", "all x y.((Device(x) & CompanyLogo(y) & Has(x,y)) -> BelongsTo(x,y))", "all x y.((Device(x) & CompanyLogo(y)) -> BelongsTo(x,y))", "(all x.((Device(x) & CompanyLogo(x)) -> BelongsToCompany(x))", "all x.((Device(x) & CompanyLogo(x)) -> CompanyBelongsTo(x,y))", "all x y.((Device(x) & CompanyLogo(y) & Has(x,y)) -> BelongsTo(x,y))", "all x.((Device(x) & HasCompanyLogo(x)) -> BelongsToCompany(x))", "all x y.((Device(x) & CompanyLogo(x) & Company(y)) -> BelongsTo(x,y))", "all x.((Device(x) & HasCompanyLogo(x)) -> CompanyBelongsTo(x,Company))", "all x.((Device(x) & CompanyLogo(x)) -> BelongsTo(x,company))", "all x.((Device(x) & CompanyLogo(x)) -> CompanyBelongsTo(x,y))", "all x.((Device(x) & HasCompanyLogo(x)) -> BelongsToCompany(x))"]}
{"id": "folio_train_1558", "nl": "A device is either with the company logo or belongs to employees. ", "fol": "all x.(HasCompanyLogo(x) | BelongsToEmployee(x))", "prediction": ["all x.(Device(x) -> ((CompanyLogo(x) | Employees(x))))", "all x.(Device(x) -> (WithCompanyLogo(x) | BelongsToEmployees(x)))", "all x.(Device(x) -> (CompanyLogo(x) | Employees(x)))", "all x.(Device(x) -> ((WithCompanyLogo(x) | BelongsToEmployees(x))))", "all x y.((Device(x) & CompanyLogo(y)) | Employee(y))", "all x.(Device(x) -> (HasCompanyLogo(x) | BelongsToEmployees(x)))", "all x y.((Device(x) & CompanyLogo(y)) -> (BelongsToEmployees(x,y)))", "all x.(Device(x) -> (WithCompanyLogo(x) | BelongsToEmployees(x)))", "all x y.((Device(x) & CompanyLogo(y) & Employee(z)) -> (WithLogo(x,y) | BelongsToLogo(x,z)))", "all x.(Device(x) -> (CompanyLogo(x) | Employees(x)))", "all x y.((Device(x) & CompanyLogo(y)) | Employee(y))", "all x y.((Device(x) & CompanyLogo(y)) -> (BelongsToEmployees(x,y)))", "exists x.(Device(x) & (CompanyLogo(x) | Employee(x)))", "exists x.(Device(x) & (Logo(x) | Employee(x)))", "exists x.(Device(x) & CompanyLogo(x) & Employees(x))", "exists x.(Device(x) & (CompanyLogo(x) | Employees(x)))"]}
{"id": "folio_train_1559", "nl": "All devices belonging to employees are available to connect to the company's wifi. ", "fol": "all x.(BelongsToEmployee(x) -> AvailableToConnectToWifi(x))", "prediction": ["all x.((Device(x) & Employee(x)) -> AvailableToConnectToWifi(x))", "all x y.((Device(x) & Employee(y)) -> ConnectsToWifi(x,y))", "all x.(EmployeeDevice(x) -> ConnectsToWiFi(x))", "all x.((Device(x) & Employee(x)) -> ConnectsToWifi(x))", "all x y.((Device(x) & Employee(y)) -> AvailableToConnectToWifi(x,y))", "all x y z.((Device(x) & Employee(y) & Company(z) & ConnectsToWifi(x,y,z)) -> AvailableToConnectTo(x,y,z))", "all x.((Device(x) & Employee(x)) -> AvailableToConnectToWifi(x,Company,Employee))", "all x.(EmployeeDevice(x) -> AvailableToConnectToWiFi(x))", "(all x.(EmployeeDevice(x) -> ConnectsToWifi(x)))", "all x y.((Device(x) & Employee(y)) -> ConnectsToWifi(x,y))", "all x.((Device(x) & Employee(x)) -> ConnectsToWiFi(x,Company,Employee))", "all x y.((Device(x) & Employee(y) & ConnectsToWiFi(x,y)) -> AvailableToConnectTo(x,y))", "all x y.((Device(x) & Employee(y)) -> AvailableToConnectToWifi(x,y))", "all x.(EmployeeDevice(x) -> ConnectsToWifi(x))", "all x.((Device(x) & Employee(x)) -> AvailableToConnectToWifi(x))", "all x y.((Device(x) & Employee(y)) -> ConnectsToWifi(x,y))"]}
{"id": "folio_train_1560", "nl": "All devices connected to Google Home are controlled by managers. ", "fol": "all x.(ConnectedToGoogleHome(x) -> ManagedControl(x))", "prediction": ["all x.((Device(x) & ConnectedToGoogleHome(x)) -> ControlledByManager(x))", "all x y.((Device(x) & GoogleHome(y)) -> ControlledByManager(x,y))", "all x.((Device(x) & ConnectedToGoogleHome(x)) -> ControlledByManagers(x))", "(all x.(GoogleHome(x) -> ControlledByManagers(x))", "all x.(GoogleHome(x) -> ControlledByManagers(x))", "all x y.((Device(x) & GoogleHome(y) & ConnectedTo(x,y)) -> ControlledByManager(x))", "all x.((Device(x) & ConnectedToGoogleHome(x)) -> ControlledByManager(x))", "all x y.((Device(x) & GoogleHome(y)) -> ControlledByManager(x,y))", "(all x.(GoogleHome(x) -> ControlledByManagers(x))", "all x y.((Device(x) & ConnectedToGoogleHome(x)) -> ControlledByManager(y))", "all x.((Device(x) & ConnectedToGoogleHome(x)) -> ControlledByManagers(x))", "all x.(GoogleHome(x) -> ControlledByManager(x))", "all x y.((Device(x) & GoogleHome(y) & ConnectedTo(x,y)) -> ControlledByManager(x))", "all x.((Device(x) & ConnectedToGoogleHome(x)) -> ManagedByManager(x))", "all x.(GoogleHome(x) -> ControlledByManagers(x))", "all x.((Device(x) & ConnectedToGoogleHome(x)) -> ControlledByManagers(x))"]}
{"id": "folio_train_1561", "nl": "All devices that are easy to operate are produced after 2020. ", "fol": "all x.(UserFriendly(x) -> ProducedAfter2020(x))", "prediction": ["all x.((Device(x) & EasyToOperate(x)) -> ProducedAfter2020(x))", "all x.((Device(x) & EasyToOperate(x)) -> ProducedAfter2020(x))", "all x y.((Device(x) & EasyToOperate(x)) -> ProducedAfter2020(x))", "all x.(EasyToOperate(x) -> ProducedAfter2020(x))", "(all x.((Device(x) & EasyToOperate(x)) -> ProducedAfter2020(x)))", "all x.((Device(x) & EasyToOperate(x)) -> ProducedAfter2020(x))", "all x y.((Device(x) & EasyToOperate(x)) -> ProducedAfter2020(y))", "all x.(EasyToOperate(x) -> ProducedAfter2020(x))", "all x.((Device(x) & EasyToOperate(x)) -> ProducedAfter2020(x))", "all x.(EasyToOperate(x) -> ProducedAfter2020(x))", "all x.((Device(x) & EasyToOperate(x)) -> ProducedAfter2020(x))", "all x.((Device(x) & EasyToOperate(x)) -> ProducedAfter2020(x))", "all x.(EasyToOperate(x) -> ProducedAfter2020(x))", "all x.((Device(x) & EasyToOperate(x)) -> ProducedAfter2020(x))", "all x.((Device(x) & EasyToOperate(x)) -> ProducedAfter2020(x))", "all x.((Device(x) & EasyToOperate(x)) -> ProducedAfter2020(x))"]}
{"id": "folio_train_1562", "nl": "IPod1 is produced before 2020. ", "fol": "-ProducedAfter2020(IPod1)", "prediction": ["all x.(IPod1(x) -> ProducedBefore2020(x))", "IPod1 is producedbefore2020.", "(ProducedBefore2020(iPod1))", "all x.(IPod(x) -> ProducedBefore2020(x))", "all x.(IPod1(x) -> ProducedBefore2020(x))", "IPod1 exists x.(ProducedBefore2020(x))", "all x y.((Pod(x) & 2020(y)) -> ProducedBefore(x,y))", "IPod1 is produced before 2020.", "all x.(Pod(x) -> ProducedBefore2020(x))", "(ProducedBefore2020)", "all x.(Pod1(x) -> ProducedBefore2020(x))", "IPod1 is producedbefore2020.", "All x.(IPod1(x) -> ProducedBefore2020(x))", "IPod1 is produced before 2020.", "All x.(IPod1(x) -> ProducedBefore2020(x))", "All x.(IPod1(x) -> ProducedBefore2020(x))"]}
{"id": "folio_train_1563", "nl": "IPod1 is controlled by managers.", "fol": "ManagedControl(IPod1)", "prediction": ["all x.(IPod1(x) -> ControlledByManagers(x))", "IPod1 is controlled by Managers.", "(ControlledByManagers(iPod1))", "all x.(IPod(x) -> ControlledByManagers(x))", "all x y.((Pod(x) & Manager(y)) -> ControlledBy(x,y))", "all x.(IPod1(x) -> ControlledByManagers(x))", "IPod1 is controlled by Managers.", "all x.(IPod1(x) -> ControledByManagers(x))", "all x.(Pod1(x) -> ControlledByManagers(x))", "(ControlledByManagers(iPod1))", "IPod1 is controlled by Managers.", "all x y.((Pod(x) & Manager(y)) -> ControlledBy(x,y))", "IPod1 is controlled by Managers.", "All x.(IPod1(x) -> ManagedByManagers(x))", "IPod1 is controlled by managers.", "IPod1 is controlled byManagers."]}
{"id": "folio_train_1564", "nl": "IPod1 is either produced after 2020 or controlled by managers.", "fol": "(ProducedAfter2020(IPod1) | ManagedControl(IPod1))", "prediction": ["all x.(IPod1(x) -> (ProducedAfter2020(x) | ControlledByManagers(x)))", "IPod1 (ProducedAfter2020) | ControlledByManagers(IPod1))", "all x.(IPod(x) -> (ProducedAfter2020(x) | ControlledByManagers(x)))", "IPod1 (exists x.(ProducedAfter2020(x) | ControlledByManagers(x)))", "(ProducedAfter2020(iPod1) | ControlledByManagers(iPod1))", "all x.(IPod1(x) -> (ProducedAfter2020(x) | ControlledByManagers(x)))", "IPod1 (ProducedAfter2020(iPod) | ControlledByManagers(iPod))", "all x.(Pod1(x) -> (ProducedAfter2020(x) | ControlledByManagers(x)))", "IPod1 (ProducedAfter2020) | ControlledByManagers(IPod1 & Managers(IPod2)))", "all x.(IPod1(x) -> (ProducedAfter2020(x) | ControlledByManagers(x)))", "(ProducedAfter2020(iPod1) | ControlledByManagers(iPod1))", "all x.(Pod1(x) -> (ProducedAfter2020(x) | ControlledByManagers(x)))", "(ProducedAfter2020(iPod1) | ControlledByManagers(iPod1))", "all x.(IPod1(x) -> (ProducedAfter2020(x) | ControlledByManagers(x)))", "All x.(Pod1(x) -> (ProducedAfter2020(x) | ControlledByManagers(x)))", "all x.(IPod1(x) -> (ProducedAfter2020(x) | ControlledByManagers(x)))"]}
{"id": "folio_train_1565", "nl": "IPod1 is not with the company logo, and managers do not control it.", "fol": "(-HasCompanyLogo(IPod1) & -ManagedControl(IPod1))", "prediction": ["all x.(IPod1(x) -> (-WithCompanyLogo(x) & ManagersDoNotControlIPod1(x)))", "(all x.(IPod1(x) -> -WithLogo(x)) & all y.(Manager(y) -> -ControlsLogo(y)))", "(-exists x.(IPod1 & CompanyLogo(x)) & exists y.(Manager(y) & -ControlsIPod1(y))))", "(-(IPod1 & CompanyLogo(i)) & ManagersDoNotControlIPod1))", "(-WithCompanyLogo(iPod1) & ManagersDoNotControlIPod1(iPod1))", "all x.(IPod1(x) -> (-CompanyLogo(x) & ManagersDoNotControlIPod1(x)))", "IPod1 - (exists x.(CompanyLogo(x) & -Controls(x)))", "all x.(IPod1(x) -> (-exists y.(CompanyLogo(y) & HasLogo(x,y)) & ManagersDoNotControl(x,y))))", "(-WithLogo(iPod1) & ManagersDoNotControl(iPod1))", "(all x.(IPod1(x) -> -WithLogo(x)) & all y.(Manager(y) -> -ControlsIPod1(y)))", "all x y.((Pod(x) & CompanyLogo(y)) -> (-WithLogo(x,y) & -Controls(x,y)))", "(-(IPod1 & CompanyLogo(i)) & ManagersDoNotControlIPod1(i))", "all x.(IPod1(x) -> (-WithLogo(x) & ManagersDoNotControl(x)))", "IPod1 - (CompanyLogo(iPod1) & ManagersDoNotControl(iPod1)))", "IPod1 is notWithLogo(iPod1) & ManagersDoNotControlIPod1(iPod2))", "all x.(IPod1(x) -> (-CompanyLogo(x) & ManagersDoNotControl(x)))"]}
{"id": "folio_train_1566", "nl": "IPod1 is either with the company logo or controlled by managers.", "fol": "(HasCompanyLogo(IPod1) | ManagedControl(IPod1))", "prediction": ["all x.(IPod1(x) -> (WithCompanyLogo(x) | ControlledByManagers(x)))", "(exists x.(IPod1 & CompanyLogo(x)) | ControlledByManagers(x)))", "all x.(IPod1(x) -> ((WithCompanyLogo(x) | ControlledByManagers(x))))", "all x.(IPod(x) -> (WithCompanyLogo(x) | ControlledByManagers(x)))", "IPod1 (exists x.(CompanyLogo(x) & ControlledByManagers(x)))", "(ControlledByManagers(iPod1) | WithCompanyLogo(iPod1)))", "IPod1 (withCompanyLogo(i) | ControlledByManagers(i)))", "(exists x.(IPod1(x) & CompanyLogo(x)) | ControlledByManagers(x)))", "all x.(IPod1(x) -> (exists y.(CompanyLogo(y) & HasLogo(x,y)) | ControlledByManagers(x,y))))", "all x.(Pod1(x) -> (WithCompanyLogo(x) | ControlledByManagers(x)))", "all x.(IPod1(x) -> (WithCompanyLogo(x) | ControlledByManagers(x)))", "all x.(IPod1(x) -> (HasCompanyLogo(x) | ControlledByManagers(x)))", "IPod1 (exists x.(CompanyLogo(x) & ControlledByManagers(x)))", "all x.(Pod1(x) -> ((WithLogo(x) | ControlledByManagers(x))))", "(exists x.(IPod1(x) & CompanyLogo(x)) | ControlledByManagers(x)))", "all x.(Pod1(x) -> (HasCompanyLogo(x) | ControlledByManagers(x)))"]}
{"id": "folio_train_1567", "nl": "All CD players are delicate mechanisms.", "fol": "all x.(IsCDPlayer(x) -> IsDelicateMechanism(x))", "prediction": ["all x.(CDPlayer(x) -> DelicateMechanism(x))", "all x.(CDPlayer(x) -> DelicateMechanism(x))", "(DiligentMechanisms(CDPlayer)", "all x y.((CDPlayer(x) & CDPlayer(y)) -> DelicateMechanism(x))", "(DelicateMechanism(CDPlayer,Cd))", "all x.(CDPlayer(x) -> DelicateMechanism(x))", "(DiligentMechanisms(CDPlayer)", "all x.(CdPlayer(x) -> DelicateMechanism(x))", "all x.(CDPlayer(x) -> DelicateMechanism(x))", "all x.(CDPlayer(x) -> DifficultMechanism(x))", "all x.(CDPlayer(x) -> DelicateMechanism(x))", "all x.(CDPlayer(x) -> DairyMechanism(x))", "all x.(CdPlayer(x) -> DelicateMechanism(x))", "all x.(DiscPlayer(x) -> DifficultMechanism(x))", "all x.(CDPlayer(x) -> DelicateMechanism(x))", "all x.(CDPlayer(x) -> DelicateMechanisms(x))"]}
{"id": "folio_train_1568", "nl": "No delicate mechanisms are suitable toys for children.", "fol": "all x.(IsDelicateMechanism(x) -> -IsSuitableToyForChildren(x))", "prediction": ["-exists x.(DelicateMechanism(x) & SuitableToy(x))", "all x.((DelicateMechanism(x) & -SuitableToy(x,Children)) -> -SuitableToy(x,Children))", "all x.(DelicateMechanism(x) -> -SuitableToy(x))", "-exists x.(DelicateMechanism(x) & SuitableToy(x,child))", "-(DelicateMechanism(x) & SuitableToy(x,Children)))", "-exists x.(DiligentMechanism(x) & SuitableToy(x,child))", "all x.((DelicateMechanism(x) & -SuitableToy(x,Children)) -> -SuitableToy(x,Children))", "(exists x.(DelicateMechanism(x) & SuitableForChildren(x)) & -SuitableForChildren(x))", "(exists x.(DelicateMechanism(x) & -SuitableForChildren(x)))", "-(DelicateMechanism(x) & SuitableToy(x)))", "all x.(DelicateMechanism(x) -> -SuitableToy(x,child))", "-exists x.(DelicateMechanism(x) & SuitableToy(x))", "all x.((DelicateMechanism(x) & -SuitableToy(x)) -> SuitableToy(x))", "-exists x.(DiligentMechanism(x) & -SuitableToy(x))", "-exists x.(DelicateMechanism(x) & SuitableToy(x,Children))", "-exists x.(DelicateMechanism(x) & SuitableForChildren(x))"]}
{"id": "folio_train_1569", "nl": "Some CD players are suitable toys for children.", "fol": "exists x.(IsCDPlayer(x) & IsSuitableToyForChildren(x))", "prediction": ["exists x.(CDPlayer(x) & SuitableToy(x))", "exists x.(CDPlayer(x) & SuitableToy(x))", "exists x y.(CDPlayer(x) & Child(y) & SuitableToy(x,y))", "exists x.(CDPlayer(x) & SuitableToy(x,child))", "exists x.(CDPlayer(x) & SuitableToy(x,Children))", "exists x.(CDPlayer(x) & SuitableToyForChildren(x))", "exists x.(CDPlayer(x) & SuitableToy(x))", "exists x y.(CDPlayer(x) & Child(y) & SuitableToy(x,y))", "exists x.(CDPlayer(x) & SuitableForChildren(x))", "exists x.(CdPlayer(x) & SuitableToy(x,Children))", "exists x y.(CDPlayer(x) & Child(y) & SuitableToy(x,y))", "exists x.(CDPlayer(x) & SuitableForChildren(x))", "exists x.(CDPlayer(x) & SuitableToy(x))", "exists x.(CDPlayer(x) & Children(x))", "exists x.(CDPlayer(x) & SuitableToyForChildren(x))", "exists x.(DiscPlayer(x) & Children(x))"]}
{"id": "folio_train_1570", "nl": "All mammals are living beings.", "fol": "all x.(IsMammal(x) -> IsLivingBeing(x))", "prediction": ["all x.(Mammal(x) -> LivingBeing(x))", "all x.(Mammal(x) -> LivingBeing(x))", "(LivingBeing(mammal,mammal))", "all x y.((Mammal(x) & LivingBeing(y)) -> LivingBeing(x))", "all x.(Mammal(x) -> LivingBeing(x))", "all x y.((Mammal(x) & LivingBeing(y)) -> LivingBeing(x,y))", "all x.(Mammal(x) -> LivingBeing(x))", "all x.(Mammal(x) -> LivingBeing(x))", "all x.(Mammal(x) -> LivesInBeing(x))", "all x.(Mammal(x) -> LivingBeing(x))", "all x.(Mammal(x) -> LivingBeing(x))", "all x.(Mammal(x) -> LivingBeing(x))", "all x.(Mammal(x) -> Living(x))", "all x.(Mammal(x) -> LivesInBeing(x))", "all x.(Mammal(x) -> LivingBeing(x))", "exists x.(Mammal(x) & Living(x))"]}
{"id": "folio_train_1571", "nl": "All elephants are mammals.", "fol": "all x.(IsElephant(x) -> IsMammal(x))", "prediction": ["all x.(Elephant(x) -> Mammal(x))", "all x.(Elephant(x) -> Mammal(x))", "(all x.(Elephant(x) -> Mammal(x))", "all x y.((Elephant(x) & Mammal(y)) -> Mammal(x))", "all x.(Elephant(x) -> Mammal(x))", "(all x.(Elephant(x) -> Mammal(x))", "all x.(Elephant(x) -> Mammal(x))", "all x.(Elf(x) -> Mammal(x))", "(all x.(Elephant(x) -> Mammal(x))", "all x.(Elephant(x) -> Mammal(x))", "all x.(Elephant(x) -> Mammal(x))", "all x.(Elephant(x) -> Mammal(x))", "all x.(Elephant(x) -> Mammal(x))", "all x.(Elephant(x) -> Mammal(x))", "all x.(Elephant(x) -> Mammal(x))", "all x.(Elephant(x) -> Mammal(x))"]}
{"id": "folio_train_1572", "nl": "All baby elephants are elephants.", "fol": "all x.(IsBabyElephant(x) -> IsElephant(x))", "prediction": ["all x.(BabyElephant(x) -> Elephant(x))", "all x.(BabyElephant(x) -> Elephant(x))", "all x y.((BabyElephant(x) & Elephant(y)) -> Elephant(x))", "all x.(BabyElephant(x) -> Elephant(x))", "(all x.(BabyElephant(x) -> Elephant(x))", "all x.((BabyElephant(x) & Elephant(x)) -> Elephant(x))", "all x.(BabyElephant(x) -> Elephant(x))", "(all x.(BabyElephant(x) -> Elephant(x))", "all x.(BabyElephant(x) -> Elephant(x))", "all x.(BabyElephant(x) -> Elephant(x))", "all x.(Baby(x) -> Elephant(x))", "all x.(BabyElephant(x) -> Elephant(x))", "all x.(BabyElephant(x) -> Elephant(x))", "all x.(BabyElephant(x) -> Elephant(x))", "all x.(BabyElephant(x) -> Elephant(x))", "all x.(BabyElephant(x) -> Elephant(x))"]}
{"id": "folio_train_1573", "nl": "Some baby elephants are sleepy.", "fol": "exists x.(IsBabyElephant(x) & IsSleepy(x))", "prediction": ["exists x.(BabyElephant(x) & Sleepy(x))", "exists x.(BabyElephant(x) & Sleepy(x))", "exists x.(BabyElephant(x) & Sleepy(x))", "exists x.(BabyElephant(x) & Sleepy(x))", "exists x.(BabyElephant(x) & Sleepy(x))", "exists x y.(BabyElephant(x) & Sleepy(y))", "exists x.(BabyElephant(x) & Sleepy(x))", "exists x.(Baby(x) & Elephant(x) & Sleepy(x))", "exists x.(babyElephant(x) & Sleepy(x))", "exists x.(BabyElephant(x) & Sleepy(x))", "exists x.(babyElephant(x) & Sleepy(x))", "exists x.(Baby(x) & Elephant(x) & Sleepy(x))", "exists x.(BabyElephant(x) & Sleepy(x))", "exists x.(BabyElephant(x) & Sleepy(x))", "exists x.(BabyElephant(x) & Sleepy(x))", "exists x.(BabyElephant(x) & Sleepy(x))"]}
{"id": "folio_train_1574", "nl": "If Jumbo is a living being, then Jumbo is not an elephant or a mammal.", "fol": "(IsLivingBeing(Jumbo) -> -(IsElephant(Jumbo) | IsMammal(Jumbo)))", "prediction": ["all x.((LivingBeing(x) & Jumbo(x)) -> (-Elephant(x) | -Mammal(x)))", "all x.((Jumbo(x) & LivingBeing(x)) -> (-Elephant(x) | -Mammal(x)))", "all x.(LivingBeing(x) -> (-Elephant(x) | -Mammal(x)))", "all x.((LivingBeing(x) & -Elephant(x) & -Mammal(x)) -> Jumbo(x))", "(LivingBeing(Jumbo) -> (-Elephant(Jumbo) | Mammal(Jumbo)))", "all x.(LivingBeing(x) -> (-Elephant(x) | -Mammal(x)))", "all x.((Jumbo(x) & LivingBeing(x)) -> (-Elephant(x) | -Mammal(x)))", "all x y.((LivingBeing(x) & Jumbo(y) & -Elephant(y) & -Mammal(y)) -> -Elephant(y) & -Mammal(y))", "all x y.((LivingBeing(x) & Jumbo(y)) -> (-Elephant(y) | Mammal(y)))", "exists x.(Living(x) & Jumbo(x) & -(Elephant(x) | Mammal(x))))", "all x.((LivingBeing(x) & Jumbo(x)) -> (-Elephant(x) | -Mammal(x)))", "all x.(LivingBeing(x) -> (-Elephant(x) | -Mammal(x)))", "all x.((Jumbo(x) & LivingBeing(x)) -> (-Elephant(x) | -Mammal(x)))", "all x.(LivingBeing(x) -> (-Elephant(x) | -Mammal(x)))", "exists x.(LivingBeing(x) & -(Elephant(x) | Mammal(x)))", "all x.(LivingBeing(x) -> (-Elephant(x) & -Mammal(x)))"]}
{"id": "folio_train_1575", "nl": "If Jumbo is sleepy, then Jumbo is a baby elephant or an elephant.", "fol": "((IsSleepy(Jumbo) -> IsBabyElephant(Jumbo)) | IsMammal(Jumbo))", "prediction": ["all x.((Jumbo(x) & Sleepy(x)) -> (BabyElephant(x) | Elephant(x)))", "all x.(Sleepy(x) -> (BabyElephant(x) | Elephant(x)))", "all x.((Jumbo(x) & Sleepy(x)) -> (BabyElephant(x) | Elephant(x)))", "(Sleepy(Jumbo) -> (BabyElephant(Jumbo) | Elephant(Jumbo)))", "all x y.((Jumbo(x) & Sleepy(x)) -> (BabyElephant(y) | Elephant(y)))", "all x.(Sleepy(x) -> (BabyElephant(x) | Elephant(x)))", "all x.(SleepyJumbo(x) -> (BabyElephant(x) | Elephant(x)))", "(Sleepy(Jumbo) -> (BabyElephant(Jumbo) | Elephant(Jumbo)))", "all x.((Jumbo(x) & Sleepy(x)) -> (BabyElephant(x) | Elephant(x)))", "(Sleepy(Jumbo) | Elephant(Jumbo))", "all x.(Sleepy(x) -> (BabyElephant(x) | Elephant(x)))", "exists x.(SleepyJumbo(x) & (BabyElephant(x) | Elephant(x)))", "all x.((Jumbo(x) & Sleepy(x)) -> (BabyElephant(x) | Elephant(x)))", "all x.((Jumbo(x) & Sleepy(x)) -> (BabyElephant(x) | Elephant(x)))", "all x.(Sleepy(x) -> (BabyElephant(x) | Elephant(x)))", "all x.((Jumbo(x) & Sleepy(x)) -> (BabyElephant(x) | Elephant(x)))"]}
{"id": "folio_train_1576", "nl": "Jumbo is sleepy.", "fol": "IsSleepy(Jumbo)", "prediction": ["all x.(Jumbo(x) -> Sleepy(x))", "-Sleepy(Jumbo)", "(Sleepy(Jumbo))", "all x.(Jumbo(x) -> Sleepy(x))", "all x.(Jubimo(x) -> Sleepy(x))", "(Sleepy(Jumbo))", "All x.(JumpOf(x) -> Sleepy(x))", "all x.(Jumbo(x) -> Sleepy(x))", "-Sleepy(jumbo)", "all x.(Jumbo(x) -> Sleepy(x))", "(Sleepy(Jumbo)", "(Sleepy(jumbo) -> Sleepy(jumbo))", "All x.(Jubimo(x) -> Sleepy(x))", "all x.(JumpOf(x) -> Sleepy(x))", "exists x.(Jubimo(x) & Sleepy(x))", "all x.(Jumbo(x) -> Sleepy(x))"]}
{"id": "folio_train_1577", "nl": "Jumbo is not sleepy.", "fol": "-IsSleepy(Jumbo)", "prediction": ["all x.(Jumbo(x) -> -Sleepy(x))", "-Sleepy(Jumbo)", "Jumbo is notSleepy(jumbo)", "-Sleepy(jumbo)", "all x.(Jumbo(x) -> -Sleepy(x))", "all x.(Jubimo(x) -> -Sleepy(x))", "Jumbo is notSleepy(jumbo)", "-Sleepy(Jumbo)", "(Sleepy(Jumbo) & -Sleepy(Jumbo))", "all x.(Jumbo(x) -> -Sleepy(x))", "-SleepyJumbo(jumbo)", "(-Sleepy(jumbo))", "(Sleepy(jumbo) -> -Sleepy(jumbo))", "All x.(Jumpo(x) -> -Sleepy(x))", "all x.(Jumbo(x) -> -Sleepy(x))", "-Sleepy(Jumbo)"]}
{"id": "folio_train_1578", "nl": "Jumbo is a living being.", "fol": "IsLivingBeing(Jumbo)", "prediction": ["all x.(Jumbo(x) -> LivingBeing(x))", "all x.(Jumbo(x) -> LivingBeing(x))", "all x.(Jubimo(x) -> LivingBeing(x))", "all x y.((Jumbo(x) & LivingBeing(y)) -> LivesIn(x,y))", "(LivingBeing(jumbo) -> Lives(jumbo))", "all x.(Jumbo(x) -> LivingBeing(x))", "Jumbo is LivingBeing(jumbo)", "(LivingBeing(Jumbo)", "all x.(Jubimo(x) -> LivingBeing(x))", "all x.(Jumbo(x) -> LivingBeing(x))", "all x.(Jumbo(x) -> LivesInBeing(x))", "all x.(Jumpback(x) -> LivingBeing(x))", "All x.(Jubimo(x) -> LivingBeing(x))", "All x.(Jumbo(x) -> LivesBeing(x))", "exists x.(Jubimo(x) & LivingBeing(x))", "exists x.(Jubimo(x) & LivingBeing(x))"]}
{"id": "folio_train_1579", "nl": "Jumbo is neither sleepy nor a baby elephant.", "fol": "(-IsSleepy(Jumbo) & -IsBabyElephant(Jumbo))", "prediction": ["all x.(Jumbo(x) -> (-Sleepy(x) & -BabyElephant(x)))", "(-Sleepy(Jumbo) & -BabyElephant(Jumbo))", "-(Jumbo(jumbo) & Sleepy(jumbo) & -BabyElephant(jumbo))", "-(Sleepy(jumbo) | BabyElephant(jumbo))", "all x.(Jubimo(x) -> (-Sleepy(x) & -BabyElephant(x)))", "all x.(Jumbo(x) -> (-Sleepy(x) & -BabyElephant(x)))", "(Sleepy(Jumbo) | BabyElephant(Jumbo))", "-(Jubimo(jumbo) & Sleepy(jumbo) & -BabyElephant(jumbo))", "-(Sleepy(Jumbo) | BabyElephant(Jumbo))", "all x.(Jumbo(x) -> (-Sleepy(x) | BabyElephant(x)))", "(-Sleepy(Jumbo) & -BabyElephant(Jumbo))", "all x.(Jubimo(x) -> (-Sleepy(x) & -BabyElephant(x)))", "(Sleepy(Jumbo) | BabyElephant(Jumbo))", "all x.(Jumbo(x) -> (-Sleepy(x) & -BabyElephant(x)))", "all x.(Jubimo(x) -> (-Sleepy(x) & -BabyElephant(x)))", "all x.(Jumbo(x) -> (-Sleepy(x) | BabyElephant(x)))"]}
{"id": "folio_train_1580", "nl": "Jumbo is not sleepy or an elephant.", "fol": "(-IsSleepy(Jumbo) & -IsElephant(Jumbo))", "prediction": ["all x.(Jumbo(x) -> (-Sleepy(x) | Elephant(x)))", "-(Jumbo(jumbo) & Sleepy(jumbo) & -Elephant(jumbo))", "all x.(Jumbo(x) -> (-Sleepy(x) & -Elephant(x)))", "-(Jubimo(Jumbo) & Sleepy(Jumbo) & -Elephant(Jumbo))", "(-Sleepy(jumbo) | Elephant(jumbo))", "-(Jumbo(jumbo) & Sleepy(jumbo) & -Elephant(jumbo))", "(-Sleepy(Jumbo) & -Elephant(Jumbo))", "all x.(Jubimo(x) -> (-Sleepy(x) | Elephant(x)))", "all x.(Jumbo(x) -> (-Sleepy(x) | Elephant(x)))", "-(Sleepy(jumbo) | Elephant(jumbo))", "(-Sleepy(jumbo) | Elephant(jumbo))", "exists x.(Jubimo(x) & -(Sleepy(x) | Elephant(x)))", "all x.(Jumbo(x) -> (-Sleepy(x) & -Elephant(x)))", "-(Jumbo(jumbo) & Sleepy(jumbo) & -Elephant(jumbo))", "all x.(Jumbo(x) -> (-Sleepy(x) | Elephant(x)))", "all x.(Jumbo(x) -> -(Sleepy(x) | Elephant(x)))"]}
{"id": "folio_train_1581", "nl": "No faculty does homework.", "fol": "all x.(IsFaculty(x) -> -CompletesHomework(x))", "prediction": ["-exists x.(Faculty(x) & DoesHomework(x))", "all x.(Faculty(x) -> -DoesHomework(x))", "-exists x.(Faculty(x) & DoesHomework(x))", "(exists x.(Faculty(x) & DoesHomework(x)))", "all x.(Faculty(x) -> -DoesHomework(x))", "(exists x.(Faculty(x) & DoesHomework(x)) & -DoesHomework(x))", "-exists x.(Faculty(x) & DoesHomework(x))", "all x.(Faculty(x) -> -DoesHomework(x))", "-exists x.(Faculty(x) & DoesHomework(x))", "-exists x.(Faculty(x) & DoesHomework(x))", "all x.(Faculty(x) -> -DoesHomework(x))", "-exists x.(Faculty(x) & DoesHomework(x))", "-exists x.(Faculty(x) & DoesHomework(x))", "-exists x.(Faculty(x) & DoesHomework(x))", "-exists x.(Faculty(x) & DoesHomework(x))", "-exists x.(Faculty(x) & DoesHomework(x))"]}
{"id": "folio_train_1582", "nl": "All students do homework.", "fol": "all x.(IsStudent(x) -> CompletesHomework(x))", "prediction": ["all x.(Student(x) -> DoHomework(x))", "all x.(Student(x) -> DoHomework(x))", "(All x.(Student(x) -> DoHomework(x)))", "all x y.((Student(x) & Homework(y)) -> Do(x,y))", "all x.(Student(x) -> DoesHomework(x))", "(all x.(Student(x) -> DoHomework(x)))", "all x y.((Student(x) & Homework(y)) -> Do(x,y))", "all x.(Student(x) -> DoHomework(x))", "(All x.(Student(x) -> DoesHomework(x)))", "all x.(Student(x) -> DoesHomework(x))", "all x.(Student(x) -> DoHomework(x))", "all x.(Student(x) -> DoesHomework(x))", "all x.(Student(x) -> DoHasHomework(x))", "all x.(Student(x) -> DoHomework(x))", "all x.(Student(x) -> DoesHomework(x))", "all x.(Student(x) -> DoesHomework(x))"]}
{"id": "folio_train_1583", "nl": "All kids are students.", "fol": "all x.(IsKid(x) -> IsStudent(x))", "prediction": ["all x.(Kid(x) -> Student(x))", "all x.(Kid(x) -> Student(x))", "(all x.(Kid(x) -> Student(x))", "all x y.((Kid(x) & Student(y)) -> Is(x,y))", "all x.(Kid(x) -> Student(x))", "(all x.(Kid(x) -> Student(x))", "all x.(Kid(x) -> Student(x))", "all x.(Kid(x) -> Student(x))", "all x.(Kid(x) -> Student(x))", "all x.(Kid(x) -> Student(x))", "all x.(Kid(x) -> Student(x))", "all x.(Child(x) -> Students(x))", "all x.(Kid(x) -> Student(x))", "all x.(Kid(x) -> Student(x))", "all x.(Child(x) -> Students(x))", "exists x.(Child(x) & Students(x))"]}
{"id": "folio_train_1584", "nl": "If someone works at a school, then they are faculty.", "fol": "all x.(WorksAtSchool(x) -> IsFaculty(x))", "prediction": ["all x.(WorksAtSchool(x) -> Faculty(x))", "all x y.((WorksAt(x,y) & School(y)) -> Faculty(x))", "all x.(WorksAtSchool(x) -> Faculty(x))", "all x y.((WorksAtSchool(x) & School(y)) -> Faculty(x))", "all x.((WorksAtSchool(x) & Faculty(x)) -> Faculty(x))", "all x.(WorksAtSchool(x) -> Faculty(x))", "all x y.((WorksAt(x,y) & School(y)) -> Faculty(x))", "all x.((WorksAtSchool(x) & Faculty(x)) -> Faculty(x))", "all x y.((WorksAtSchool(x) & School(y)) -> Faculty(x))", "all x.(WorksAtSchool(x) -> Faculty(x))", "exists x.(WorksAt(x,y) & School(y) & Faculty(x))", "all x y.((WorksAt(x,y) & School(y)) -> Faculty(x))", "all x.(WorksAtSchool(x) -> Faculty(x))", "all x y.((WorksAt(x,y) & School(y)) -> Faculty(x))", "exists x.(WorksAt(x,School) & Faculty(x))", "exists x.(WorksAtSchool(x) & Faculty(x))"]}
{"id": "folio_train_1585", "nl": "If Jill works at a school or is a teacher, then Jill works at a school.", "fol": "((WorksAtSchool(Jill) | CompletesHomework(Jill)) -> WorksAtSchool(Jill))", "prediction": ["all x.((Jill(x) & (WorksAtSchool(x) | Teacher(x))) -> WorksAtSchool(x))", "all x y.((Jill(x) & School(y)) -> (WorksAt(x,y) | Teacher(x)))", "(WorksAtSchool(Jill) | Teacher(Jill)))", "all x.((Jill(x) & (WorksAtSchool(x) | Teacher(x))) -> WorksAtSchool(x))", "all x.(WorksAtSchool(x) | Teacher(x)) -> WorksAtSchool(x))", "all x y.((Jill(x) & School(y)) -> (WorksAt(x,y) | Teacher(x,y)))", "all x.((Jill(x) | Teacher(x)) -> WorksAtSchool(x))", "all x.((Jill(x) & (WorksAtSchool(x) | Teacher(x))) -> WorksAtSchool(x))", "all x y.((Jill(x) & School(y) & WorksAt(x,y)) | Teacher(x,y)) -> WorksAtSchool(x))", "(WorksAtSchool(Jill) | Teacher(Jill)))", "all x y.((Jill(x) & (WorksAtSchool(x) | Teacher(x))) -> WorksAtSchool(x,y))", "all x.((Jill(x) & WorksAtSchool(x)) | Teacher(x)) -> WorksAtSchool(x))", "exists x.(Jill(x) & (WorksAtSchool(x) | Teacher(x)))", "all x.(WorksAtSchoolOrTeacher(x) -> WorksAtSchool(x))", "all x.((Jill(x) & (WorksAtSchool(x) | Teacher(x))) -> WorksAtSchool(x))", "exists x.(Jill(x) & (WorksAtSchool(x) | Teacher(x)) & School(x))"]}
{"id": "folio_train_1586", "nl": "Jill works at a school.", "fol": "WorksAtSchool(Jill)", "prediction": ["all x y.((Jill(x) & School(y)) -> WorksAt(x,y))", "all x.(Jill(x) -> WorksAtSchool(x))", "(WorksAtSchool(Jill) & -WorksAtSchool(Jill))", "all x y z.((Jill(x) & School(y) & School(z)) -> WorksAt(x,y,z))", "all x y.((Jill(x) & School(y)) -> WorksAt(x,y))", "Jill works at a school.", "Jill worksAtSchool(Jill,Structure)", "all x.(Jill(x) -> WorksAtSchool(x))", "Jill works at a school.", "exists x.(Jill(x) & WorksAt(x,School))", "exists x.(Jill(x) & WorkesAt(x,School))", "(WorksAtSchool(Jill))", "all x y.((Jill(x) & School(y)) -> WorksAt(x,y))", "(WorksAtSchool(Jill))", "all x y.((Jill(x) & School(y)) -> WorksAt(x,y))", "exists x.(Jill(x) & WorksAt(x,School))"]}
{"id": "folio_train_1587", "nl": "Jill is a kid.", "fol": "IsKid(Jill)", "prediction": ["(Kid(Jill) & Kid(Jill))", "all x.(Jill(x) -> Kid(x))", "Jill is a kid.", "Jill is a kid.", "(Kid(Jill) & Kid(Jill))", "all x.(Jill(x) -> Kid(x))", "all x.(Kid(x) -> Jill(x))", "All x.((Jill(x) & Kid(x)) -> Kid(x))", "Jill is kid.", "Jill is a Kid(Jill)", "(Kid(Jill) & BornIn(Jill,Jill))", "(Kid(Jill) & Kid(Jill))", "all x.(Jill(x) -> Kid(x))", "Jill is Kid.", "Jill is kid.", "(Kid(Jill) & Kid(Jill))"]}
{"id": "folio_train_1588", "nl": "Jill is not a kid.", "fol": "-IsKid(Jill)", "prediction": ["(-Kid(Jill))", "Jill is notKid(Jill)", "all x.(Jill(x) -> -Kid(x))", "(Kid(Jill) & -Kid(Jill))", "Jill & -Kid(Jill)", "-Kid(Jill)", "Jill is notKid(Jill)", "all x.(Jill(x) -> -Kid(x))", "(Kid(Jill) & -Kid(Jill))", "(-Kid(Jill))", "Jill is notKid.", "-Kid(Jill)", "all x.(Jill(x) -> -Kid(x))", "Jill is notKid.", "-Kid(Jill)", "-Kid(Jill)"]}
{"id": "folio_train_1589", "nl": "Either Max listens to classical music or Max listens to rap. ", "fol": "all x.(MaxListensToClassicalMusic(x) | MaxListensToRap(x))", "prediction": ["(exists x.(Max(x) & ListensToClassicalMusic(x)) | exists y.(Max(y) & ListensToRap(y))))", "all x.((Max(x) & ListensToClassicalMusic(x)) | ListensToRap(x))", "exists x.(MaxListensToClassicalMusic(x) | ListensToRap(x))", "all x.((Max(x) & ClassicalMusic(x)) | Rap(x))", "(exists x.(Max(x) & ListensToClassicalMusic(x)) | exists y.(Max(y) & ListensToRap(y))))", "((MaxListensToClassicalMusic(Max) | ListensToRap(Max)))", "(exists x.(Matt(x) & ListensToClassicalMusic(x)) | exists y.(Matt(y) & ListensToRap(y))))", "(all x.(Max(x) -> ListensToClassicalMusic(x)) | (Max(x) -> ListensToRap(x))))", "exists x.(MaxListensToClassicalMusic(x) | ListensToRap(x))", "all x.(Mat Max(x) -> (ListensToClassicalMusic(x) | ListensToRap(x)))", "(exists x.(Max(x) & ListensToClassicalMusic(x)) | exists y.(Max(y) & ListensToRap(y))))", "exists x.(Max(x) & ((ClassicalMusic(x) & ListensTo(x)) | Rap(x))))", "all x.((Max(x) & ListensToClassicalMusic(x)) | ListensToRap(x))", "exists x.(MaxListensToClassicalMusic(x) | ListensToRap(x))", "(exists x.(Max(x) & ListensToClassicalMusic(x)) | exists y.(Max(y) & ListensToRap(y))))", "(exists x.(Max(x) & ListensToClassicalMusic(x)) | exists y.(Max(y) & ListensToRrap(y))))"]}
{"id": "folio_train_1590", "nl": "All the songs that Max listens to that are classical music are from the 12th century.", "fol": "all x.(MaxListensToClassicalMusic(x) -> SongsFrom12thCentury(x))", "prediction": ["all x.((Song(x) & ListensTo(x) & ClassicalMusic(x)) -> From12thCentury(x))", "all x.((Song(x) & ListensTo(x,y) & ClassicalMusic(y)) -> From12thCentury(x))", "all x.((Songs(x) & ListensTo(x) & ClassicalMusic(x)) -> From12thCentury(x))", "all x y.((Song(x) & MaxListensTo(x,y) & ClassicalMusic(y)) -> From12thCentury(x))", "all x y.((Song(x) & Max(y) & ListensTo(x,y)) -> ClassicalMusic(x))", "all x.((Song(x) & ListensTo(x) & ClassicalMusic(x)) -> From12thCentury(x))", "all x y.((Song(x) & ListensTo(x,y) & ClassicalMusic(y)) -> From12thCentury(x))", "all x y.((Song(x) & MaxHears(x,y) & ClassicalMusic(y)) -> From12thCentury(x))", "all x.((Songs(x) & ListensTo(x) & ClassicalMusic(x)) -> From12thCentury(x))", "all x.((Song(x) & ListensTo(x,Max) & ClassicalMusic(x)) -> From12thCentury(x))", "all x.((Songs(x) & ListensTo(x,Max) & ClassicalMusic(x)) -> From12thCentury(x))", "all x.((Song(x) & ListensTo(x,Matthew) & ClassicalMusic(x)) -> From12thCentury(x))", "(all x.(ClassicalMusic(x) -> ListensTo(x)))", "all x y.((Song(x) & MaxListensTo(x,y) & ClassicalMusic(y)) -> From12thCentury(x))", "(all x.(ClassicalMusic(x) -> ListensTo(x,Max)))", "All x.(ListensTo(x,Max) -> ClassicalMusic(x))"]}
{"id": "folio_train_1591", "nl": "If the song Max listens to is rap, then the song is from Kanye West. ", "fol": "all x.(MaxListensToRap(x) -> SongsByKanyeWest(x))", "prediction": ["all x.((Song(x) & ListensTo(x,Rap)) -> KanyeWest(x))", "(all x.((Song(x) & ListensTo(x) & Rap(x)) -> KanyeWest(x)))", "-((SongMaxListensTo(Max,Rap) & KanyeWest(Max)) -> Song(Max,Rap))", "all x.((Song(x) & ListensTo(x,Rap)) -> KanyeWest(x))", "all x y.((Song(x) & MaxListensTo(x,y) & Rap(y)) -> KanyeWest(x))", "(all x.((Song(x) & ListensTo(x,Rap)) -> KanyeWest(x))", "all x.((SongMaxListensTo(x) & Rap(x)) -> KanyeWest(x))", "all x.((Song(x) & ListensToRap(x)) -> KanyeWest(x))", "all x.((M MaxListensTo(x) & Rap(x)) -> KanyeWest(x))", "all x.((Song(x) & ListensTo(x,Rap)) -> KanyeWest(x))", "all x.((Song(x) & ListensTo(x) & Rap(x)) -> KanyeWest(x))", "all x y.((Song(x) & MaxListensTo(x,y)) -> KanyeWest(y))", "(all x.((Song(x) & ListensTo(x,Rap)) -> KanyeWest(x))", "all x.((SongMaxListensTo(x) & Rap(x)) -> KanyeWest(x))", "All x.(ListensTo(x,Max) -> KanyeWest(x))", "all x.(Rap(x) -> KanyeWest(x))"]}
{"id": "folio_train_1592", "nl": "If a songs is from Kanye West, then the song is full of lyrics. ", "fol": "all x.(SongsByKanyeWest(x) -> SongsWithLyrics(x))", "prediction": ["all x.((Song(x) & KanyeWest(x)) -> FullOfLyrics(x))", "all x.((Song(x) & FromKanyeWest(x)) -> FullOfLyrics(x))", "all x y.((Song(x) & KanyeWest(y)) -> FullOfLyrics(x,y))", "all x.((Song(x) & KanyeWest(x)) -> FullOfLyrics(x))", "exists x.(Song(x) & KanyeWest(x) & FullOfLyrics(x))", "all x.((Song(x) & FromKanyeWest(x)) -> FullOfLyrics(x))", "all x y.((Song(x) & KanyeWest(y)) -> FullOfLyrics(x,y))", "all x.((Song(x) & KanyeWest(x)) -> FullOfLyrics(x))", "exists x.(Song(x) & FromKanyeWest(x) & FullOfLyrics(x))", "all x y.((Song(x) & KanyeWest(y)) -> FullOfLyrics(x,y))", "exists x.(Song(x) & KanyeWest(x) & FullOfLyrics(x))", "all x.((Song(x) & FromKanyeWest(x)) -> FullOfLyrics(x))", "all x y.((Song(x) & KanyeWest(x)) -> FullOfLyrics(y))", "all x.((Song(x) & KanyeWest(x)) -> FullOfLyrics(x))", "all x.((Song(x) & FromKanyeWest(x)) -> FullOfLyrics(x))", "all x.((Song(x) & KanyeWest(x)) -> FullOfLyrics(x))"]}
{"id": "folio_train_1593", "nl": "All songs that are full of lyrics need to be written with words", "fol": "all x.(SongsWithLyrics(x) -> MustBeWrittenWithWords(x))", "prediction": ["all x.((Song(x) & FullOfLyrics(x)) -> NeedsWrittenWithWords(x))", "all x y.((Song(x) & FullOfLyrics(x)) -> NeedsWrittenWithWords(x))", "all x.((Song(x) & FullOfLyrics(x)) -> NeedsWrittenWithWords(x))", "all x.((Song(x) & FullOfLyrics(x)) -> WrittenWithWords(x))", "all x y.((Song(x) & FullOfLyrics(x)) -> NeedsWrittenWithWords(x))", "all x.((Song(x) & FullOfLyrics(x)) -> NeedsWrittenWithWords(x))", "all x y.((Song(x) & FullOfLyrics(x)) -> WrittenWithWords(x))", "all x.((Song(x) & FullOfLyrics(x)) -> WrittenWithWords(x))", "ALL X Y.((Song(x) & FullOfLyrics(x)) -> NeedsWrittenWithWords(x))", "all x.((Song(x) & FullOfLyrics(x)) -> NeedsWrittenWithWords(x))", "all x.((Song(x) & FullOfLyrics(x)) -> WrittenWithWords(x))", "all x.((Song(x) & FullOfLyrics(x)) -> NeedsWrittenWithWords(x))", "all x.((Song(x) & FullOfLyrics(x)) -> WrittenWithWords(x))", "all x.((Song(x) & FullOfLyrics(x)) -> WritenWithWords(x))", "all x.((Song(x) & FullOfLyrics(x)) -> NeedsWrittenWithWords(x))", "all x.((Song(x) & FullOfLyrics(x)) -> WrittenWithWords(x))"]}
{"id": "folio_train_1594", "nl": "If \u201cAs it was\u201d by Harry Styles is classical music that Max listens to or  from the 12th century, then \u201cAs it was\u201d by Harry Styles is either classical music that Max listens to, or the songs are from 12th century.", "fol": "((((MaxListensToClassicalMusic(AsItWasByHarryStyles) | SongsFrom12thCentury(AsItWasByHarryStyles)) -> MaxListensToClassicalMusic(AsItWasByHarryStyles)) & -SongsFrom12thCentury(AsItWasByHarryStyles)) | (-((MaxListensToClassicalMusic(AsItWasByHarryStyles) | SongsFrom12thCentury(AsItWasByHarryStyles)) -> MaxListensToClassicalMusic(AsItWasByHarryStyles)) & SongsFrom12thCentury(AsItWasByHarryStyles)))", "prediction": ["all x.((AsItWorth(x) & HarryStyles(x)) -> (ClassicalMusic(x) & (MaxListensTo(x) | 12thCentury(x))) | (ClassicalMusic(x) & MaxListensTo(x))))", "all x.((AsItWorn(x) & (ClassicalMusic(x) | From12thCentury(x))) -> (ClassicalMusic(x) & MaxListensTo(x) | SongsFrom12thCentury(x)))", "all x y.((AsItWorth(x) & HarryStyles(y)) -> ((ClassicalMusic(x,y) & MaxListensTo(x,y) | From12thCentury(x,y))))", "((AsItWorth(A) & HarryStyles(A)) -> (ClassicalMusic(A) & MaxListensTo(A)) | From12thCentury(A)))", "(all x.((AsItWorth(x) & HarryStyles(x)) -> (ClassicalMusic(x) & MaxAudiencesTo(x) | From12thCentury(x))))", "all x.((AsItWorth(x) & HarryStyles(x)) -> ((ClassicalMusic(x) & MaxListensTo(x) | From12thCentury(x))) | (ClassicalMusic(x) & MaxListensTo(x))))", "(all x.((AsItWorn(x) & HarryStyles(x)) -> (ClassicalMusic(x) & ListensTo(x) | From12thCentury(x))) & all y.((AsItWorn(y) & HarryStyles(y)) -> (ClassicalMusic(y) & ListensTo(y))))", "(all x y.((AsItWorth(x) & HarryStyles(y)) -> (ClassicalMusic(x,y) | From12thCentury(x))))", "all x.(AsItWorth(x) -> ((ClassicalMusic(x,Max) & ListensTo(x,Max) | From12thCentury(x))) | (ClassicalMusic(x,Max) & ListensTo(x,Max)) | (ClassicalMusic(x,Max) & ListensTo(x,Max)))))", "all x y.((AsItWorn(x) & HarryStyles(y)) -> ((ClassicalMusic(x,y) & MaxAudiences(x,y)) | (12thCentury(x) & MaxAudiences(y))))", "all x.((AsItBecame(x) & (ClassicalMusic(x) | From12thCentury(x))) -> (ClassicalMusic(x) & MaxListensTo(x) | SongsFrom12thCentury(x)))", "(all x.((AsItBegan(x) & HarryStyles(x)) -> (ClassicalMusic(x) & MaxListensTo(x) | From12thCentury(x))))", "all x.((AsItAre(x) & HarryStyles(x)) -> (ClassicalMusic(x) & (MaxAudiencesTo(x) | 12thCentury(x)) | (ClassicalMusic(x) & MaxAudiencesTo(x)))))", "all x.((AsItWas(x) & (ClassicalMusic(x,Max) | 12thCentury(x))) -> (ClassicalMusic(x,Max) | SongsFrom12thCentury(x)))", "all x y.((AsItWorth(x) & HarryStyles(x) & (ClassicalMusic(y) | From12thCentury(y))) -> (ClassicalMusic(y,x) | SongsFrom12thCentury(y)))", "(all x.((AsItBecame(x) & HarryStyles(x)) -> (ClassicalMusic(x) & (MaxListensTo(x) | 12thCentury(x)))))"]}
{"id": "folio_train_1595", "nl": "\u201cAs it was\u201d by Harry Styles needs to be written with words.", "fol": "MustBeWrittenWithWords(AsItWasByHarryStyles)", "prediction": ["all x.((HarryStyles(x) & \u201cAsItWas(x)) -> NeedsWrittenWithWords(x))", "all x.((AsItWas(x) & HarryStyles(x)) -> NeedsWrittenWithWords(x))", "all x y.((HarryStyles(x) & \u201cAsItWas(x,y)) -> NeedsWrittenWithWords(x))", "\u201cAsItWas\u201d by HarryStylesNeedsWords(HarryStyles)", "all x.((HarryStyles(x) & \u201cAsItBecame(x)) -> NeedsWords(x))", "\u201cAsItWas(HarryStyles)\u201d needs to be writtenWithWords(HarryStyles)", "All x y.((HarryStyles(x) & \u201cAsItBecame(x)) -> NeedsWrittenWithWords(x))", "\u201cAsItBecame\u201d by HarryStyles needs to be writtenWithWords.", "(WrittenWithWords(HarryStyles) & \u201cAsItWas(HarryStyles))", "\u201cAsIs(HarrisStyles)\u201d needs to be writtenWithWords(HarrisStyles)", "all x.((HarryStyles(x) & AsItWas(x)) -> NeedsWrittenWithWords(x))", "all x.((AsItBecame(x) & HarryStyles(x)) -> NeedsWords(x))", "(WrittenWithWords(HarryStyles,AsItBecame))", "All x y.((AsItWas(x) & HarryStyles(y)) -> NeedsWrittenWithWords(x,y))", "all x.((HarryStyles(x) & \u201cAsItBecame(x)) -> NeedsWrittenWithWords(x))", "all x.((AsItWas(x) & HarryStyles(x)) -> NeedsWrittenWithWords(x))"]}
{"id": "folio_train_1596", "nl": "\"As it was\u201d by Harry Styles is a song from the 12th century.", "fol": "SongsFrom12thCentury(AsItWasByHarryStyles)", "prediction": ["all x.((Song(x) & HarryStyles(x)) -> From12thCentury(x))", "\"AsItWas\" by HarryStyles is a song from the 12thCentury.", "(Song(HarryStyles) & From12thCentury(HarryStyles))", "\"AsIs(HarryStyles) -> SongFrom12thCentury(HarryStyles))", "All x y.((Song(x) & HarryStyles(y)) -> (AsItWas(x,y) & From12thCentury(x)))", "(SongFrom12thCentury(HarryStyles) & \"AsItWas(HarryStyles)\"", "\"AsIs(byHarryStyles) -> SongFrom12thCentury(x))", "all x.((Song(x) & HarryStyles(x)) -> From12thCentury(x))", "\"AsItBecame\" by HarryStyles is a song from the 12thCentury.", "(Song(HarryStyles) & From12thCentury(HarryStyles))", "all x.((Song(x) & HarryStyles(x)) -> FromThe12thCentury(x))", "\"AsItBecame\" (HarryStyles) -> SongFrom12thCentury(x))", "\"AsIs(HarrisStyles) -> SongFrom12thCentury(HarrisStyles))", "all x.(AsItWas(x) -> SongFrom12thCentury(x))", "\"AsItWas\" by HarryStyles is a song from the 12thCentury.", "all x.((Song(x) & HarryStyles(x)) -> From12thCentury(x))"]}
{"id": "folio_train_1597", "nl": "\"As it was\u201d by Harry Styles is not a song from Kanye West and needs to be written with words.", "fol": "(-SongsByKanyeWest(AsItWasByHarryStyles) & MustBeWrittenWithWords(AsItWasByHarryStyles))", "prediction": ["all x.((Song(x) & HarryStyles(x)) -> (-SongFromKanyeWest(x) & NeedsWrittenWithWords(x)))", "\"AsItWas\" by HarryStyles is not KanyeWestSong(x) & NeedsWrittenWithWords(x))", "(Song(HarryStyles) & -SongFromKanyeWest(HarryStyles) & NeedsWrittenWithWords(HarryStyles))", "(-SongFromKanyeWest(HarryStyles) & NeedsWrittenWithWords(HarryStyles))", "\"AsIs(HarryStyles)\" -SongFromKanyeWest(HarryStyles) & NeedsWrittenWithWords(HarryStyles))", "all x y.((Song(x) & HarryStyles(y)) -> (-SongFromKanyeWest(x,y) & NeedsWrittenWithWords(x)))", "(Song(AsItWorship(HarryStyles) & -SongFromKanyeWest(HarryStyles) & NeedsWords(HarryStyles))", "((AsItWas(HarryStyles) & -KanyeWestSong(HarryStyles)) -> NeedsWords(HarryStyles))", "all x.((Song(x) & HarryStyles(x)) -> (-SongFromKanyeWest(x) & NeedsWrittenWithWords(x)))", "\"AsIs(HarryStyles(HarryStyles) -SongFromKanyeWest(HarryStyles) & NeedsWrittenWithWords(HarryStyles,HarryStyles))", "\"AsItWorship(HarryStyles)\"", "\"AsItBecame\" by HarryStyles is not KanyeWestSong(x) & NeedsWords(x))", "all x.((Song(x) & \"AsItWorn(x)\" & -SongFromKanyeWest(x)) -> NeedsWrittenWithWords(x))", "\"AsItWas\" by HarryStyles(x) -(SongFromKanyeWest(x) & NeedsWrittenWithWords(x)))", "all x.((Song(x) & HarryStyles(x)) -> -(SongFromKanyeWest(x) & NeedsWrittenWithWords(x)))", "all x.((Song(x) & HarryStyles(x)) -> (-SongFromKanyeWest(x) & NeedsWrittenWithWords(x)))"]}
{"id": "folio_train_1598", "nl": "\"Your Woman\" is a song by British one-man band White Town.", "fol": "ProducedBy(WhiteTown,YourWoman)", "prediction": ["\"Your Woman\" is a song by BritishOneManBandWhiteTown.", "all x.((Song(x) & OneManBandWhiteTown(x)) -> \"YourWoman(x)\")", "(Song(YourWoman) & OneManBandWhiteTown(British))", "all x y.((Song(x) & BritishOneManBandWhiteTown(y)) -> \"YourWoman(x,y)\")", "\"YourWoman\" is a song by BritishOneManBandWhiteTown.", "\"Your Woman\" is a song by British OneManBandWhiteTown.", "(Song(YourWoman) & WrittenByOneManBandWhiteTown(Women))", "all x.((Song(x) & BritishOneManBandWhiteTown(x)) -> \"YourWoman(x)\")", "(Song(YourWoman) & ByWhiteTown(BritishOneManBand(WhiteTown))", "all x.((Song(x) & OneManBandWhiteTown(x)) -> \"YourWoman(x)\")", "\"Your Woman\" (Song) & WrittenByOneManBandWhiteTown(x))", "\"YoungWoman\" is a song by BritishOneManBandWhiteTown.", "\"YourWoman\" is a song by BritishOneManBandWhiteTown.", "\"Your Woman\" is a song by BritishOneManBandWhiteTown.", "\"Your Woman\" is a song by British OneManBandWhiteTown.", "All x.((Song(x) & OneManBandWhiteTown(x)) -> \"YourWoman(x)\")"]}
{"id": "folio_train_1599", "nl": "\"Your Woman\" song peaked at No. 1 on the UK Singles Chart.", "fol": "PeakedAt(YourWoman,UKSinglesChart)", "prediction": ["\"Your Woman\" song peaked at No.1 on UKSinglesChart(x))", "\"YourWoman\" song peakedAtNo.1OnUKSinglesChart(x))", "All x.((Song(x) & \"YourWoman(x\")) -> PeakedAtNo.1(x))", "\"YoungWoman\" song peakedAtNo.1OnUKSinglesChart(x))", "\"Your Woman\" song peakedAtNo.1OnUKSinglesChart(x))", "((YourWife(y) & SinglesChart(y)) -> PeakedAtNo.1(y))", "The song \"Your Woman\" peakedAtNo.1OnUKSinglesChart(x))", "All x.((Song(x) & \"YourWoman(x)\") -> PeakedAtNo.1OnUKSinglesChart(x))", "(PaakedAtNo.1OnUKSinglesChart(YourWoman))", "-(YourWife(x) & No.1OnUKSinglesChart(x))", "(No.1OnSinglesChart(\"YourWoman\"))", "\"YoungWoman\" SongPeakedAtNo.1OnUKSinglesChart(x))", "\"YourWife\" song peakedAtNo.1OnUKSinglesChart(x))", "-((Song(Song) & No.1(SingleSingleStatus)))", "\"Your Woman\" song peaked at No.1 on UKSinglesChart.", "\"YourWoman\" SongPeakedAtNo.1OnUKSinglesChart(x))"]}
{"id": "folio_train_1600", "nl": "If a song peaked at No.1 at a cetain place, then it was extremely popular.", "fol": "all x y.(PeakedAt(x,y) -> ExtremelyPopular(x))", "prediction": ["all x.((Song(x) & PeakedAtNo.1AtCentainPlace(x)) -> ExtremelyPopular(x))", "all x y.((Song(x) & CestainPlace(y) & PeakedAtNo.1(x,y)) -> ExtremelyPopular(x))", "all x.((Song(x) & PeakedAtNo.1AtCentainPlace(x)) -> ExtremelyPopular(x))", "all x.((Song(x) & PeakedAtNo1AtCentainPlace(x)) -> ExtremelyPopular(x))", "all x y z.((Song(x) & CetainPlace(y) & PeakedAtNo.1(x,y)) -> ExtremelyPopular(x))", "all x y.((Song(x) & CetainPlace(y) & PeakedAtNo.1(x,y)) -> ExtremelyPopular(x))", "all x y z.((Song(x) & PeakedAtNo.1AtCentainPlace(x) & CetainPlace(y) & CetainPlace(z)) -> ExtremelyPopular(x))", "all x.((Song(x) & PeakedAtNo.1AtCetainPlace(x)) -> ExtremelyPopular(x))", "all x y.((Song(x) & PeakedAtNo.1AtCentainPlace(x)) -> ExtremelyPopular(x))", "all x y.((Song(x) & CestainPlace(y) & PeakedAtNo.1(x,y)) -> ExtremelyPopular(x))", "all x y.((Song(x) & CetainPlace(y) & PeakedAtNo1(x,y)) -> ExtremelyPopular(x))", "all x.((Song(x) & PeakedAtNo1AtCentainPlace(x)) -> ExtremelyPopular(x))", "all x.(PakedAtNo.1AtCentainPlace(x) -> ExtremelyPopular(x))", "all x.((Song(x) & PeakedAtNo.1AtCentainPlace(x)) -> ExtremelyPopular(x))", "all x.((Song(x) & PeakedAt(x,No.1)) -> ExtremelyPopular(x))", "all x.((Song(x) & PeakedAtNo1AtCetainPlace(x)) -> ExtremelyPopular(x))"]}
{"id": "folio_train_1601", "nl": "\"Your Woman\" also peaked No. 1 in Iceland, Israel and Spain.", "fol": "(PeakedAt(YourWoman,Iceland) & PeakedAt(YourWoman,Isarel) & PeakedAt(YourWoman,Spain))", "prediction": ["(PeakedNo.1InIsland(YourWoman) & PeakedNo.1InIsrael(YourWoman) & PeakedNo.1InSpain(YourWoman))", "(PakedNo.1InIsland(YourWoman) & PeakedNo.1InIsrael(YourWoman) & PeakedNo.1InSpain(YourWoman))", "((YourWoman(Woman) & PeakedNo.1InIsland(Woman)) | PeakedNo.1InIsrael(Woman) | PeakedNo.1InSpain(Woman)))", "(Island,Israel,Spania) & PeakedNo.1(YourWoman,Island) & PeakedNo.1(YourWoman,Island) & PeakedNo.1(YourWoman,Island)))", "((Woman(x) & PeakedNo1InIsland(x) & PeakedNo1InIsrael(x) & PeakedNo1InSpain(x))", "\"Your Woman\" peaked No.1 in Iceland, Israel, Spain, etc.", "((YourWife(x) & Iceland(x)) | Israel(x) | Spain(x)))", "-(YourWife(x) & PeakedNo.1InIsland(x) & PeakedNo.1InIsrael(x) & PeakedNo.1InSpain(x))", "\"YourWoman\" peakedNo.1 in Iceland,Israel and Spain.", "(PeakedNo.1InIsland(YourWoman) & PeakedNo.1InIsrael(YourWoman) & PeakedNo.1InSpain(YourWoman))", "\"Young(x) & PeakedNo.1InIsland(x) & PeakedNo.1InIsrael(x) & PeakedNo.1InSpain(x))", "\"Your Woman\" peaked No.1 in Iceland,Israel and Spain.", "\"YourWife\" peakedNo.1 in Iceland,Israel,Spania,etc.", "(PeakedNo.1InIsland(YourWife) & PeakedNo.1InIsrael(YourWife) & PeakedNo.1InSpanish(YourWife))", "\"Your Woman\" peaked No.1 in Iceland, Israel and Spain.", "\"YourWoman\" peakedNo.1 in Iceland,Israel and Spain."]}
{"id": "folio_train_1602", "nl": "\"Your Woman\" was extremely popular.", "fol": "ExtremelyPopular(YourWoman)", "prediction": ["\"Your Woman\" - ExtremelyPopular(x))", "\"YourWife\" - ExtremelyPopular(x))", "\"YoungWoman\" - ExtremelyPopular(x))", "((YourWife(x) & Popular(x)) -> Very(x)))", "\"Your Woman\" was extremely popular.", "-(YourWife(x) & ExtremelyPopular(x))", "-(YourWife(x) & Popular(x))", "(ExtremelyPopular(YourWoman) -> Your(Woman))", "((Your Woman(x) & Popular(x)) -> VeryPopular(x))", "\"Your Woman\" - ExtremelyPopular(x))", "\"Young(x)\" -> ExtremelyPopular(x))", "\"YourWoman\" - ExtremelyPopular(x))", "((YourFemale(x) & Popular(x)) -> Very(x)))", "& \"Your Woman\" was ExtremelyPopular(x)", "\"YoungWoman\" - ExtremelyPopular(x)", "\"Your Woman\" was extremely popular."]}
{"id": "folio_train_1603", "nl": "White Town did not produce any popular song.", "fol": "-exists x.(ProducedBy(WhiteTown,x) & ExtremelyPopular(x))", "prediction": ["-exists x.(WhiteTown(x) & PopularSong(x))", "(WhiteTown(WhiteTown) & -ProducedPopularSong(WhiteTown))", "WhiteTown.com -exists x.(PopularSong(x) & Produces(x,y)))", "(exists x.(WhiteTown(x) & -ProducesPopularSong(x)))", "WhiteTown -ProducedPopularSong(WhiteTown)", "WhiteTown did not produce any popularSong(WhiteTown)", "all x.(WhiteTown(x) -> -ProducesPopularSong(x))", "WhiteTower(WhiteTown) -exists x.(PopularSong(x) & Produces(x,y)))", "WhiteTown.com -ProducedPopularSong(WhiteTown)", "-exists x.(WhiteTown(x) & PopularSong(x))", "(WhiteTown,0) & -ProducedPopularSong(WhiteTown,0))", "(WhiteTown(WhiteTown) & -ProducedPopularSong(WhiteTown))", "all x.(WhiteTown(x) -> -exists y.(PopularSong(y) & ProducedBy(x,y)))", "-exists x.(WhiteTown(x) & -ProducesPopularSong(x))", "all x.(WhiteTown(x) -> -ProducedPopularSong(x))", "WhiteTown did not produce any popularSong(WhiteTown)"]}
{"id": "folio_train_1604", "nl": "White Town was a successful band.", "fol": "Successful(WhiteTown)", "prediction": ["all x.(WhiteTown(x) -> SuccessfulBand(x))", "(SuccessfulBand(WhiteTown))", "WhiteTown(WhiteTown) -> SuccessfulBand(WhiteTown))", "all x.(WhiteTown(x) -> SuccessfulBand(x))", "WhiteTown(WhiteTown) -SuccessfulBand(WhiteTown))", "WhiteTown was a successful band.", "(SuccessfulBand(WhiteTown)", "WhiteTown(WhiteTown) -> SuccessfulBand(WhiteTown))", "All x y.((WhiteTown(x) & Band(y)) -> Successful(x))", "all x.(WhiteTown(x) -> SuccessfulBand(x))", "(SuccessfulBand(WhiteTown)", "all x.(WhiteTown(x) -> SuccessfulBand(x))", "All x.(WhiteTown(x) -> SuccessfulBand(x))", "All x.(WhiteTown(x) -> SuccessfulBand(x))", "all x.(WhiteTown(x) -> SuccessfulBand(x))", "all x.(WhiteTower(x) -> SuccessfulBand(x))"]}
{"id": "folio_train_1605", "nl": "All people who limp often and regularly have long-term medical issues with underlying causes.", "fol": "all x.(LimpOften(x) -> LongTermMedicalIssues(x))", "prediction": ["all x.((Person(x) & LempsOfOften(x) & LempsRegularly(x)) -> LongTermMedicalIssues(x))", "all x.((Person(x) & LipsOnce(x) & LipsRegularly(x)) -> LongTermMedicalIssues(x))", "all x.((Person(x) & Loud(x) & RegularlyLip(x)) -> LongTermMedicalIssues(x))", "all x.(LimbOftenAndRegularly(x) -> LongTermMedicalIssues(x))", "(all x.(Limb(x) & Often(x) & Regularly(x)) -> LongTermMedicalIssues(x))", "all x.((Person(x) & LeapsOfOften(x) & LeapsRegularly(x)) -> LongTermMedicalIssues(x))", "all x y.((Person(x) & Loud(x) & Often(x) & Regularly(x)) -> LongTermMedicalIssues(y))", "all x.(LegsOf(x) -> (LongTermMedicalIssues(x) & UnderlyingCauses(x)))", "all x y.((Person(x) & LempsOf(x,y) & Often(y) & Regularly(x)) -> LongTermMedicalIssues(x))", "all x.(LimbOftenAndRegularly(x) -> HasLongTermMedicalIssues(x))", "all x.((Person(x) & LimbOften(x) & LimbRegularly(x)) -> LongTermMedicalIssues(x))", "all x y.((Person(x) & LipsOnce(x) & LipsRegularly(x)) -> LongTermMedicalIssues(y))", "all x.(LegsOfFrequentAndRegularPeople(x) -> LongTermMedicalIssues(x))", "all x y.((Person(x) & Loud(x) & RegularlyLip(x)) -> LongTermMedicalIssues(y))", "all x.((Person(x) & LipsOfOften(x) & LipsRegularly(x)) -> LongTermMedicalIssues(x))", "all x.(LimbOftenAndRegularly(x) -> LongTermMedicalIssues(x))"]}
{"id": "folio_train_1606", "nl": "If people have long-term medical issues with underlying causes, then they are not often spry and energetic.", "fol": "all x.(LongTermMedicalIssues(x) -> -SpryAndEnergetic(x))", "prediction": ["all x.((Person(x) & LongTermMedicalIssues(x) & HasUnderlyingCauses(x)) -> -Spry(x) & Energetic(x))", "all x.((Person(x) & HasLongTermMedicalIssues(x) & HasUnderlyingCauses(x)) -> -Spry(x) & -Energetic(x))", "all x.((People(x) & LongTermMedicalIssues(x) & HasUnderlyingCauses(x)) -> -Spry(x) & Energetic(x))", "all x.((Person(x) & LongTermMedicalIssues(x) & HasUnderlyingCauses(x)) -> -Spry(x) & Energetic(x))", "all x.(LongTermMedicalIssues(x) -> -Spry(x) & Energetic(x))", "all x.((Person(x) & LongTermMedicalIssues(x) & UnderlyingCauses(x)) -> -Spry(x) & Energetic(x))", "all x.((People(x) & LongTermMedicalIssues(x) & UnderlyingCauses(x)) -> -Spry(x) & Energetic(x))", "(all x.((Person(x) & LongTermMedicalIssues(x) & UnderlyingCauses(x)) -> -Spry(x) & Energetic(x)))", "all x.((Person(x) & HasLongTermMedicalIssues(x) & HasUnderlyingCauses(x)) -> -Spry(x) & Energetic(x))", "all x y.((Person(x) & LongTermMedicalIssue(x) & HasUnderlyingCauses(x,y)) -> -Spry(x) & Energetic(x))", "all x y.((Person(x) & LongTermMedicalIssues(x) & HasUnderlyingCauses(x,y)) -> -(Spry(x) & Energetic(x)))", "all x y.((Person(x) & LongTermMedicalIssues(x) & UnderlyingCauses(y)) -> (-Spry(x) & -Energetic(x)))", "exists x.(LongTermMedicalIssues(x) & HasUnderlyingCauses(x) & -Spry(x) & -Energetic(x))", "all x.(LongTermMedicalIssues(x) -> (-Spry(x) & -Energetic(x)))", "all x y.((Person(x) & LongTermMedicalIssues(x,y) & HasUnderlyingCauses(x,y)) -> -Spry(x) & Energetic(x))", "all x.((Person(x) & LongTermMedicalIssues(x) & HasUnderlyingCauses(x)) -> -(Spry(x) & Energetic(x)))"]}
{"id": "folio_train_1607", "nl": "People either stay indoors and rest a lot at home or people are often tired and disinterested in their activities.", "fol": "(all x.((SpryAndEnergetic(x) & -OftenTired(x)) | (-SpryAndEnergetic(x) & OftenTired(x))) & all x.(OftenTired(x) -> StayIndoors(x)))", "prediction": ["all x.((Person(x) & (StaysIndoors(x) | RestsAtHome(x))) -> (Tense(x) & DisinterestedInActivities(x)))", "all x y.((Person(x) & (StaysIndoors(x) & RestsAtHome(x)) | (Tense(y) & DisinterestedInActivities(y))))", "all x.(Person(x) -> ((StaysIndoors(x) & RestsAtHome(x)) | (Tense(x) & DisinterestedInActivities(x))))", "all x.(People(x) -> ((StaysIndoors(x) & RestsAtHome(x)) | (Tense(x) & DisinterestedInActivities(x))))", "all x y.((Person(x) & (StaysIndoors(x) | RestsAtHome(x))) -> (Tense(x) & DisinterestedInActivities(x)))", "all x y.((Person(x) & StaysIndoors(x) & RestsAtHome(x)) | (Tense(y) & DisinterestedInActivities(y))))", "(all x.(People(x) -> (StaysIndoors(x) & RestsAtHome(x)) | (People(x) & Tired(x) & DisinterestedInActivities(x))))", "exists x.(Person(x) & ((StaysIndoors(x) & RestsAtHome(x)) | (Tense(x) & DisinterestedInActivities(x)))))", "(exists x.(Person(x) & ((StaysIndoors(x) & RestsAtHome(x)) | (Tense(x) & DisinterestedInActivities(x)))))", "all x y.((People(x) & (StaysIndoors(x) & RestsAtHome(x)) | (Tense(y) & DisinterestedInActivities(y))))", "all x y z.((Person(x) & StaysIndoors(x,y) & RestsAtHome(y)) | (Treated(x,z) & DisinterestedInActivities(z))))", "exists x.(Person(x) & ((StaysIndoors(x) & RestsAtHome(x)) | (Treated(x) & DisinterestedInActivities(x)))))", "(all x.(Person(x) -> (StaysIndoors(x) & RestsAtHome(x))) | (People(x) -> (Tense(x) & DisinterestedInActivities(x)))))", "exists x.(People(x) & ((StaysIndoors(x) & RestsAtHome(x)) | (Tense(x) & DisinterestedInActivities(x))))", "exists x.(Person(x) & ((StaysIndoors(x) & RestsAtHome(x)) | (Tense(x) & DisinterestedInActivities(x))))", "exists x.(People(x) & ((StaysIndoors(x) & RestsAtHome(x)) | (Treated(x) & DisinterestedInActivities(x))))"]}
{"id": "folio_train_1608", "nl": "If people stay indoors and rest a lot at home, then they do not visit the gym at least once a day.", "fol": "all x.(StayIndoors(x) -> -VisitGymDaily(x))", "prediction": ["all x.((StaysIndoors(x) & RestsAtHome(x)) -> -VisitsGym(x))", "all x.((People(x) & StaysIndoors(x) & RestsAtHome(x)) -> -VisitsGym(x))", "all x.((Person(x) & StaysIndoors(x) & RestsAtHome(x)) -> -VisitsGym(x))", "all x y.((Person(x) & StaysIndoors(x) & RestsAtHome(x)) -> -VisitsGym(y))", "(all x.((StaysIndoors(x) & RestsAtHome(x)) -> -VisitsGym(x)))", "all x.((StaysIndoors(x) & RestsAtHome(x)) -> -VisitsGym(x))", "all x y.((StaysIndoors(x) & RestsAtHome(x)) -> -VisitsGym(y))", "all x y.((People(x) & StaysIndoors(x) & RestsAtHome(x)) -> -VisitsGym(y,x))", "all x.(StaysIndoors(x) & RestsAtHome(x) -> -VisitsGym(x))", "all x.((People(x) & StaysIndoors(x) & RestsAtHome(x)) -> -VisitGym(x))", "all x y.((Person(x) & StaysIndoors(x) & RestsAtHome(x)) -> -VisitsGym(x,y))", "all x.((Person(x) & StaysIndoors(x) & RestsAtHome(x)) -> -VisitsGym(x))", "(all x.((StaysIndoors(x) & RestsAtHome(x)) -> -VisitGym(x)))", "all x.((StaysIndoors(x) & RestsAtHome(x)) -> -VisitGym(x))", "exists x.(StaysIndoors(x) & RestsAtHome(x) & -VisitsGym(x))", "all x.((StaysIndoors(x) & RestsAtHome(x)) -> -VisitsGym(x))"]}
{"id": "folio_train_1609", "nl": "If Mark either limps often and regularly or is often spry and energetic, then Mark limps often and regularly or is often tired and disinterested in his activities.", "fol": "((((LimpOften(Mark) & -SpryAndEnergetic(Mark)) | (-LimpOften(Mark) & SpryAndEnergetic(Mark))) -> LimpOften(Mark)) | OftenTired(Mark))", "prediction": ["all x.((Mark(x) & (LimbsOther(x) | Spry(x) | Energetic(x))) -> (LimbsOther(x) | Tired(x) & DisinterestedInActivities(x)))", "all x.((Mark(x) & (LimbsOften(x) | Spry(x) | Energetic(x))) -> (LimbsOften(x) | Tired(x) & DisinterestedInActivities(x)))", "all x.((Mark(x) & (LipOften(x) | Spry(x) | Energetic(x))) -> (LipOften(x) | Tired(x) & DisinterestedInActivities(x)))", "(all x.((Mark(x) & (LimbsOften(x) | Spry(x) | Energetic(x))) -> (LimbsOften(x)) | Tired(x) & DisinterestedInActivities(x))))", "all x.((Mark(x) & (LimbsOtherwise(x) | Spry(x) | Energetic(x))) -> (LimbsOtherwise(x) | Tired(x) & DisinterestedInActivities(x)))", "all x.((Marc(x) & (LimbsOtherwise(x) | Spry(x) | Energetic(x))) -> (LimbsOtherwise(x) | Tired(x) & DisinterestedInActivities(x)))", "all x y.((Mark(x) & (LimbsOtherwise(x,y) | Spry(x,y) | Energetic(x))) -> (LimbsOtherwise(x,y) | Tired(x,y) & DisinterestedInActivities(x,y)))", "(all x.(LimbsOftenAndRegularly(x) | SpryAndEnergetic(x))) -> (LimbsOftenAndRegularly(x) | TiredAndDisinterestedInActivities(x)))", "all x.(LimbsOftenAndRegularly(x) | (SpryAndEnergetic(x) & (LimbsOftenAndRegularly(x) | TiredAndDisinterestedInActivities(x))))", "all x.((Mark(x) & (LampsOftenAndRegularly(x) | SpryAndEnergetic(x))) -> (LampsOftenAndRegularly(x) | TiredAndDisinterestedInActivities(x)))", "all x.((Mark(x) & (Lip(x) | Spry(x) | Energetic(x))) -> (Lip(x) & (Tense(x) | Disinterested(x))))", "(all x.((Mark(x) & (LipOften(x) | Spry(x) | Energetic(x))) -> (LipOften(x) | Tired(x) | Disinterested(x))))", "all x y.((Mark(x) & (LimbsOften(x) | Spry(x) | Energetic(x))) -> (LimbsOften(x) | Tired(x) | DisinterestedInActivities(x)))", "all x.(LimbsOftenAndRegularly(x) | (SpryAndEnergetic(x) & (LimbsFrequentlyAndRegularly(x) | TiredAndDisinterested(x))))", "(all x.((Mark(x) & (LampsOften(x) | Spry(x) | Energetic(x))) -> (LampsOften(x)) | Tired(x) & DisinterestedInActivities(x))))", "all x.((Mark(x) & (LegsOften(x) | Spry(x) | Energetic(x))) -> (LegsOften(x) | Tired(x) & DisinterestedInActivities(x)))"]}
{"id": "folio_train_1610", "nl": "Mark limps often and regularly.", "fol": "LimpOften(Mark)", "prediction": ["all x.(Mark(x) -> (LimbsOften(x) & LimbsRegularly(x)))", "Mark limps often and regularly.", "(MeltsOfficially(Mark) & LimpsRegularly(Mark))", "(LimbsOfTime(Mark) & -LimbsOfTime(Mark))", "Mark limpsfrequentlyandRegularly.", "all x.(Mark(x) -> (Lip(x) & Often(x) & Regular(x)))", "all x.(Mark(x) -> (LimbsOften(x) & LimbsRegularly(x)))", "all x.(Marc(x) -> (LimbsOften(x) & LimbsRegularly(x)))", "all x y.((Mark(x) & (Frequent(y) | Regular(y))) -> Lepts(x,y))", "(LimbsOfTime(Mark) & LimbsRegularly(Mark))", "Mark limpsOftenAndRegularly.", "Mark limps often and regularly.", "Mark limpsfrequentlyandRegularly.", "all x.(Mark(x) -> (Lip(x) & Often(x) & Regularly(x)))", "all x.(Mark(x) -> (LimbsOften(x) & LimbsRegularly(x)))", "all x.(Mark(x) -> (LegsOften(x) & LegsRegularly(x)))"]}
{"id": "folio_train_1611", "nl": "Mark visits the gym at least once a day.", "fol": "VisitGymDaily(Mark)", "prediction": ["all x.((Mark(x) & VisitsGym(x)) -> AtLeastOneDay(x))", "all x y.((Mark(x) & Gym(y)) -> VisitsAtLeastOneDay(x,y))", "Mark visits gym at least once a day.", "all x.(Mark(x) -> VisitsGym(x))", "Mark visits gyms at least once a day.", "(VisitsGym(Mark,Seconds) & AtLeastOneDay(Mark,Seconds))", "all x.((Mark(x) & VisitsGym(x)) -> AtLeastOneDay(x))", "(SeesGym(Mark) & AtLeastOneDay(Mark))", "(SeesGym(Mark,x) & AtLeastOneDay(Mark,x))", "all x y.((Mark(x) & Gym(y) & Visits(x,y)) -> AtLeastOneDay(x))", "(VisitsGym(Mark,Sam) & AtLeastOneDay(Mark,Sam))", "Mark visits the gym at least once a day.", "all x.((Mark(x) & VisitsGym(x,y)) -> AtLeastOneDay(x))", "(SeesGym(Mark,Sam,Day) & AtLeastOneTime(Mark,Day))", "all x.(Mark(x) -> VisitsGym(x,y))", "all x y.((Mark(x) & Gym(y)) -> Visits(x,y))"]}
{"id": "folio_train_1612", "nl": "Mark stays indoors and rests regularly at his home or visits the gym at least once a day.", "fol": "(StayIndoors(Mark) | VisitGymDaily(Mark))", "prediction": ["all x.(Mark(x) -> (StaysIndoors(x) & (RetainsAtHome(x) | VisitsGym(x))))", "all x y.((Mark(x) & Indoors(y)) -> (StaysIndoors(x,y) & (RetainsAtHome(x,y) | VisitsGym(x,y))))", "(StaysIndoors(Mark) & (RetreatsAtHome(Mark) | VisitsGym(Mark)))", "all x.(Mark(x) -> (StaysIndoors(x) & (RetreatsAtHome(x) | VisitsGym(x))))", "Mark stays indoors and (exists x.(Home(x) & RestsAt(x,x)) | exists y.(Gym(y) & Visits(y,x))))", "all x.((Mark(x) & StaysIndoors(x) & (RetreatsAtHome(x) | VisitsGym(x))) -> -StaysIndoors(x))", "(StaysIndoors(Mark) | RestsRegularlyAtHome(Mark) | VisitsGym(Mark)))", "all x y.((Mark(x) & Home(y)) -> (StaysIndoors(x,y) & (RetainsRegularly(x,y) | VisitsGym(x,y))))", "all x.(Mark(x) -> (StaysIndoors(x) & (RetainsRegularlyAtHome(x) | VisitsGym(x))))", "all x.((Mark(x) & StaysIndoors(x) & (ReachesAtHome(x) | VisitsGym(x))) -> -StaysIndoors(x))", "Mark stays indoors and (exists x.(Home(x) & RestsAt(x)) | exists y.(Gym(y) & Visits(y,x))))", "(StaysIndoors(Mark) & (RetainsRegularlyAtHome(Mark) | VisitsGym(Mark)))", "(StaysIndoors(Mark) | RestsRegularlyAtHome(Mark)))", "all x y.((Mark(x) & Indoors(x) & (Home(y) | Gym(y))) -> Stays(x,y))", "(StaysIndoors(Mark) | RestsRegularly(Mark,Home) | VisitsGym(Mark,Gym)))", "all x.(Mark(x) -> (StaysIndoors(x) & (ReachesAtHome(x) | VisitsGym(x))))"]}
{"id": "folio_train_1613", "nl": "If two soccer teams score the same number of goals in one UCL final during the regular time, they need to play for the extra time.", "fol": "all x y.((IsSoccerTeam(x) & IsSoccerTeam(y) & HasSameScore(x,y) & InTimePeriod(RegularTime)) -> NeedsExtraTime(x,y))", "prediction": ["all x y.((SoccerTeam(x) & SoccerTeam(y) & ScoresSameGoals(x,y) & RegularTime(x)) -> NeedsPlayForExtraTime(x))", "all x.((SoccerTeam(x) & SameGoalScore(x,y) & RegularTime(y)) -> NeedsExtraTime(x))", "all x y.((SoccerTeam(x) & SoccerTeam(y) & ScoresSameNumberOfGoals(x,y) & RegularTime(x)) -> NeedsPlayForExtraTime(x))", "all x y z.((SoccerTeam(x) & SoccerTeam(y) & UCLFinal(z) & ScoresSameGoals(x,y,z)) -> NeedsPlayForExtraTime(x,y,z))", "all x.((SoccerTeam(x) & ScoresSameNumberOfGoals(x,RegularTime) & UCLFinal(x)) -> NeedsPlayForExtraTime(x))", "(ScoresSameNumberOfGoalsInUCLFinal(x,RegularTime) & InUCLFinal(x,RegularTime))", "all x.((SoccerTeam(x) & SameNumberOfGoals(x,UCLFinal) & RegularTime(x)) -> NeedsExtraTime(x))", "all x y z.((SoccerTeam(x) & SoccerTeam(y) & UCLFinal(z) & ScoresSameNumberOfGoals(x,y,z) & RegularTime(y,z)) -> NeedsPlayForExtraTime(x))", "all x y.((SoccerTeam(x) & SoccerTeam(y) & ScoresSameGoal(x,y) & RegularTime(y) & UCLFinal(x,y)) -> NeedsPlayForExtraTime(x))", "all x.((SoccerTeam(x) & ScoresSameGoalsInUCLFinal(x) & RegularTime(x)) -> NeedsPlayForExtraTime(x))", "(ScoresSameGoalsInUCLFinal(x) & RegularTime(x))", "all x y.((SoccerTeam(x) & SoccerTeam(y) & SameNumberOfGoals(x,y) & RegularTime(y)) -> NeedsExtraTime(x,y))", "all x.(ScoresEqualGoalsInUCLFinal(x) -> PlaysForExtraTime(x))", "all x.((SoccerTeam(x) & SameGoalScore(x,y) & UCLFinal(y)) -> NeedsExtraTime(x))", "all x.((SoccerTeam(x) & UCLFinal(x) & SameGoalScore(x) & RegularTime(x)) -> NeedsExtraTime(x))", "all x y.((SoccerTeam(x) & UCLFinal(y) & SameGoalScore(x,y)) -> NeedsExtraTime(x))"]}
{"id": "folio_train_1614", "nl": "If two soccer teams score the same number of goals in one UCL final during both the regular time and extra time, they need to play the penalty shoot-out.", "fol": "all x y.((IsSoccerTeam(x) & IsSoccerTeam(y) & HasSameScore(x,y) & InTimePeriod(RegularTime) & InTimePeriod(ExtraTime)) -> NeedsPenaltyShootout(x,y))", "prediction": ["all x y.((SoccerTeam(x) & SoccerTeam(y) & ScoresSameNumberOfGoals(x,y) & UCLFinal(y) & RegularTime(y) & ExtraTime(y)) -> NeedsPenaltyShootOut(x))", "all x.((SoccerTeam(x) & SameGoalScore(x,RegularTime) & SameGoalScore(x,ExtraTime)) -> NeedsPenaltyShootOut(x))", "all x y z.((SoccerTeam(x) & SoccerTeam(y) & UCLFinal(z) & RegularTime(z) & ExtraTime(z)) -> NeedsPenaltyShootOut(x,y,z))", "all x.((SoccerTeam(x) & SameNumberOfGoals(x) & UCLFinal(x) & RegularTime(x) & ExtraTime(x)) -> NeedsPenaltyShootOut(x))", "all x y.((SoccerTeam(x) & SoccerTeam(y) & ScoresSameGoals(x,y) & RegularTime(y) & ExtraTime(y)) -> NeedsPenaltyShootOut(x))", "all x.((SoccerTeam(x) & ScoresSameNumberOfGoals(x,RegularTime) & ScoresSameNumberOfGoals(x,ExtraTime)) -> NeedsPenaltyShootOut(x))", "(ScoresSameNumberOfGoalsInOneUCLFinal(x) & RegularTime(x) & ExtraTime(x)) -> PlayPenaltyShootOut(x))", "all x y z.((SoccerTeam(x) & SoccerTeam(y) & UCLFinal(z) & RegularTime(z) & ExtraTime(z) & ScoresSameGoals(x,y,z)) -> NeedsPenaltyShootOut(x))", "(ScoresSameGoalsInUCLFinal(x,RegularTime) & ScoresSameGoalsInExtraTime(x,ExtraTime)) -> PlaysPenaltyShootOut(x))", "all x.((SoccerTeam(x) & SameGoalScore(x) & UCLFinal(x) & RegularTime(x) & ExtraTime(x)) -> NeedsPenaltyShootOut(x))", "all x y.((SoccerTeam(x) & SoccerTeam(y) & ScoresSameNumberOfGoals(x,y) & RegularTime(y) & ExtraTime(y)) -> NeedsPenaltyShootOut(x))", "all x y.((SoccerTeam(x) & SoccerTeam(y) & SameNumberOfGoals(x,y) & RegularTime(y) & ExtraTime(y)) -> NeedsPenaltyShootOut(x,y))", "all x.((SoccerTeam(x) & UCLFinal(x) & RegularTime(x) & ExtraTime(x)) -> NeedsPenaltyShootOut(x))", "all x.(ScoresSameNumberOfGoals(x,y) & InUCLFinal(y,x) & RegularTime(y) & ExtraTime(y)) -> PlayPenaltyShootOut(x))", "all x y z.((SoccerTeam(x) & UCLFinal(y) & Goals(z) & RegularTime(y) & ExtraTime(z)) -> NeedsPenaltyShootOut(x,y,z))", "all x.((SoccerTeam(x) & ScoresSameGoals(x,RegularTime,ExtraTime)) -> NeedsPenaltyShootOut(x))"]}
{"id": "folio_train_1615", "nl": "Real Madrid and Atl\u00e9tico Madrid both scored one goal in 2016 UCL final during the regular time.", "fol": "(IsSoccerTeam(RealMadrid) & IsSoccerTeam(AtleticoMadrid) & HasSameScore(RealMadrid,AtleticoMadrid) & InTimePeriod(RegularTime))", "prediction": ["((RealMadrid(RealMadrid) & Atl\u00e9ticoMadrid(Atl\u00e9ticoMadrid)) -> ScoredOneGoal(RealMadrid,2016))", "(ScoredOneGoal(RealMadrid) & ScoredOneGoal(Atl\u00e9ticoMadrid))", "all x y.((RealMadrid(x) & Atl\u00e9ticoMadrid(y)) -> (ScoredOneGoal(x,y) & RegularTime(y)))", "all x.((RealMadrid(x) & Atl\u00e9ticoMadrid(x)) -> (ScoredOneGoal(x,2016) & RegularTime(x)))", "both Real Madrid and Atl\u00e9tico Madrid scored one goal in 2016 UCL Final during regular time.", "((RealMadrid(Real) & Atl\u00e9ticoMadrid(ATL)) -> ScoredOneGoal(RealMadrid,2016))", "(Scores(RealMadrid,2016) & Scores(Atl\u00e9ticoMadrid,2016))", "((RealMadrid(real) & Atl\u00e9ticoMadrid(at)) -> ScoredOneGoal(real,2016) & RegularTime(atl\u00e9tico,2016)))", "(ScoredOneGoalIn2016UCLFinal(RealMadrid) & ScoredOneGoalIn2016Atl\u00e9ticoMadrid(Atl\u00e9ticoMadrid))", "(ScoredOneGoal(RealMadrid) & ScoredOneGoal(Atl\u00e9ticoMadrid) & In2016UCLFinal(Atl\u00e9ticoMadrid))", "all x y.((Real(x) & Atl\u00e9tico(y)) -> (ScoredOneGoal(x,y) & In2016UCLFinal(x) & RegularTime(y)))", "all x y.((RealMadrid(x) & Atl\u00e9ticoMadrid(y)) -> (ScoredOneGoal(x,y) & In2016UCLFinal(y,x)))", "both Real Madrid and Atl\u00e9tico Madrid both scored one goal in 2016 UCL Final during regular time.", "((RealMadrid(RealMadrid) & Atl\u00e9ticoMadrid(Atl\u00e9ticoMadrid)) -> ScoredOneGoalIn2016UCL Final(RealMadrid,RegularTime))", "all x.((RealMadrid(x) & Atl\u00e9ticoMadrid(x)) -> (ScoredOneGoal(x) & RegularTime(x)))", "both Real Madrid and Atl\u00e9tico Madrid scored one goal in 2016 UCL Final during regular time."]}
{"id": "folio_train_1616", "nl": "Real Madrid and Atl\u00e9tico Madrid both scored zero goals in 2016 UCL final during the extra time.", "fol": "(IsSoccerTeam(RealMadrid) & IsSoccerTeam(AtleticoMadrid) & HasSameScore(RealMadrid,AtleticoMadrid) & InTimePeriod(ExtraTime))", "prediction": ["(ZeroGoals(RealMadrid) & ZeroGoals(Atl\u00e9ticoMadrid))", "all x.((RealMadrid(x) & Atl\u00e9ticoMadrid(x)) -> (ScoresZeroGoals(x) & ExtraTime(x)))", "((RealMadrid(Real) & Atl\u00e9ticoMadrid(Atl\u00e9tico)) -> ScoredZeroGoals(RealMadrid,2016))", "all x y.((RealMadrid(x) & Atl\u00e9ticoMadrid(y)) -> (ScoresZeroGoals(x,y) & ExtraTime(x,y)))", "((RealMadrid(RealMadrid) & Atl\u00e9ticoMadrid(Atl\u00e9ticoMadrid)) -> ScoredZeroGoalsIn2016UCLFinal(RealMadrid,ExtraTime))", "both Real Madrid and Atl\u00e9tico Madrid scored zero goals in 2016 UCL Final during ExtraTime.", "(ScoresZeroGoals(RealMadrid) & ScoresZeroGoals(Atl\u00e9ticoMadrid))", "((RealMadrid(Real) & Atl\u00e9ticoMadrid(Atl\u00e9ticoMadrid)) -> ScoredZeroGoals(RealMadrid,2016))", "(ZeroGoals(RealMadrid) & ZeroGoals(Atl\u00e9ticoMadrid))", "(ZeroGoals(real,malaysia) & ZeroGoals(atl\u00e9tico,malaysia))", "all x y.((RealMadrid(x) & Atl\u00e9ticoMadrid(y)) -> (ScoredZeroGoals(x,y) & In2016UCL Final(x,y)))", "all x.((RealMadrid(x) & Atl\u00e9ticoMadrid(x)) -> (ScoresZeroGoals(x) & ExtraTime(x)))", "both Real Madrid and Atl\u00e9tico Madrid both scored zero goals in 2016 UCL Final during ExtraTime.", "both Real Madrid and Atl\u00e9tico Madrid scored zero goals in 2016 UCL Final during extra time.", "(ScoresZeroGoals(RealMadrid) & ScoresZeroGoals(Atl\u00e9ticoMadrid))", "all x y.((RealMadrid(x) & Atl\u00e9ticoMadrid(y)) -> (ScoresZeroGoals(x,y) & ExtraTime(y)))"]}
{"id": "folio_train_1617", "nl": "Real Madrid and Atl\u00e9tico Madrid needed to play a penalty shoot-out in 2016 UCL final.", "fol": "NeedsPenaltyShootout(RealMadrid,AtleticoMadrid)", "prediction": ["all x y.((RealMadrid(x) & Atl\u00e9ticoMadrid(y)) -> NeededPenaltyShootOut(x,y))", "all x.((RealMadrid(x) & Atl\u00e9ticoMadrid(x)) -> NeededPenaltyShootOut(x,2016))", "(PlayPenaltyShootOut(RealMadrid) & PlayAtl\u00e9ticoMadrid(Atl\u00e9ticoMadrid))", "((RealMadrid(RealMadrid) & Atl\u00e9ticoMadrid(Atl\u00e9ticoMadrid)) -> NeededPenaltyShootOut(RealMadrid,2016)))", "(PlayPunchShootOut(RealMadrid) & PlayPunchShootOut(Atl\u00e9ticoMadrid))", "both Real Madrid and Atl\u00e9tico Madrid needed to play penaltyshoot in 2016 UCL Final.", "(PenaltyShootOut(RealMadrid) & PenaltyShootOut(Atl\u00e9ticoMadrid))", "all x y.((RealMadrid(x) & Atl\u00e9ticoMadrid(y)) -> NeedsPenaltyShootOut(x,y))", "(PlayPenaltyShootOut(RealMadrid) & PlayAtl\u00e9ticoMadrid(Atl\u00e9ticoMadrid))", "both Real Madrid and Atl\u00e9tico Madrid needed to play penaltyshoots in 2016 UCL Final.", "all x.((RealMadrid(x) & Atl\u00e9ticoMadrid(x)) -> NeededPenaltyShootOut(x,2016))", "all x y.((RealMadrid(x) & Atl\u00e9ticoMadrid(y)) -> (NeedsPenaltyShootOut(x,y) & UCLFinal(y)))", "all x.((RealMadrid(x) & Atl\u00e9ticoMadrid(x)) -> NeedsPenaltyShootOut(x,2016))", "(PlayPenaltyShootOut(RealMadrid) & PlayPenaltyShootOut(Atl\u00e9ticoMadrid))", "all x.((RealMadrid(x) & Atl\u00e9ticoMadrid(x)) -> PlayPenaltyShootOut(x,2016))", "all x y.((RealMadrid(x) & Atl\u00e9ticoMadrid(y)) -> NeededPenaltyShootOut(x,y))"]}
{"id": "folio_train_1618", "nl": "Real Madrid and Atl\u00e9tico Madrid did not need to play a penalty shoot-out in 2016 UCL final.", "fol": "-NeedsPenaltyShootout(RealMadrid,AtleticoMadrid)", "prediction": ["all x.((RealMadrid(x) & Atl\u00e9ticoMadrid(x)) -> -PlayPenaltyShootOut(x,2016))", "(-(RealMadrid(RealMadrid) & Atl\u00e9ticoMadrid(Atl\u00e9ticoMadrid)) -> PlayPenaltyShootOut(RealMadrid,2016)))", "(-PlayPenaltyShootOut(RealMadrid) & PlayPenaltyShootOut(Atl\u00e9ticoMadrid))", "((RealMadrid(RealMadrid) & Atl\u00e9ticoMadrid(Atl\u00e9ticoMadrid)) -> -PlayPenaltyShootOut(RealMadrid,2016))", "all x y.((RealMadrid(x) & Atl\u00e9ticoMadrid(y)) -> -PlayPenaltyShootOut(x,y))", "both Real Madrid and Atl\u00e9tico Madrid did not need to play penaltyshoots in 2016 UCL Final.", "(all x.((RealMadrid(x) & -Atl\u00e9ticoMadrid(x)) -> PlayPenaltyShootOut(x)))", "(all x.(RealMadrid(x) -> PlayPenaltyShootOut(x))) & (Atl\u00e9ticoMadrid(x) -> -PlayPenaltyShootOut(x)))", "(-(RealMadrid(RealMadrid) | Atl\u00e9ticoMadrid(Atl\u00e9ticoMadrid)) & PlayPenaltyShootOut(RealMadrid,2016)) -> -PlayPenaltyShootOut(Atl\u00e9ticoMadrid,2016))", "all x.((RealMadrid(x) & Atl\u00e9ticoMadrid(x)) -> -PlayPenaltyShootOut(x))", "all x y.((RealMadrid(x) & Atl\u00e9ticoMadrid(y)) -> -PlaysPenaltyShootOut(x,y))", "both Real Madrid and Atl\u00e9tico Madrid did not need to play penaltyshoots in 2016 UCL final.", "all x.((RealMadrid(x) & Atl\u00e9ticoMadrid(x)) -> -PlayPenaltyShootOut(x,2016))", "(all x.((RealMadrid(x) & -Atl\u00e9ticoMadrid(x)) -> PlayPenaltyShootOut(x,2016)))", "all x y.((RealMadrid(x) & Atl\u00e9ticoMadrid(y)) -> -PlayPenaltyShootOut(x,y))", "all x.((RealMadrid(x) & Atl\u00e9ticoMadrid(x)) -> -NeedsPenaltyShootOutIn2016UCL Final(x))"]}
{"id": "folio_train_1619", "nl": "System 7 is a UK-based electronic dance music band.", "fol": "(IsBasedIn(System7,Uk) & IsElectronicDanceMusicBand(System7))", "prediction": ["System7 is a UK-based electronic dance music band.", "all x.(System7(x) -> (UKBasedElectronicDanceMusicBand(x) & BasedIn(x,UK)))", "(UKBasedElectronicDanceMusicBand(System7))", "System7 is a UKbased electronic dance music band.", "System7 (UKBasedElectronicDanceMusicBand)", "Syst\u00e8me7 (UKBasedElectronicDanceMusicBand)", "all x.(System7(x) -> (ElectronicDanceMusicBand(x) & BasedInUK(x)))", "all x.(System7(x) -> (UKBasedElectronicDanceMusicBand(x) & BasedInUK(x)))", "(UKBasedElectronicDanceMusicBand(System7))", "System7 is a UK-based electronic dance music band.", "System7 is a UKBased ElectronicDanceMusicBand(System7))", "System7 (UKBasedElectronicDanceMusicBand)", "(UKBasedElectronicDanceMusicBand(System7))", "System7 is a UKbased electronic dance music band.", "System 7 (UKBasedElectronicDanceMusicBand)", "System7 is a UK-based electronic dance music band."]}
{"id": "folio_train_1620", "nl": "Steve Hillage and Miquette Giraudy formed System 7.", "fol": "(FormedBand(Stevehillage,System7) & FormedBand(Miquettegiraudy,System7))", "prediction": ["(FormedBySteveHillageAndMiquetteGiraudy(SteveHillage) & FormedSystem7(SteveHillage))", "All x y z.((SteveHillage(x) & MiquetteGiraudy(y) & System7(z)) -> (SteveHillage(x) & MiquetteGiraudy(y) & FormedSystem7(x,z)))", "(FormedBySteveHillage(SteveHillage) & FormedByMiquetteGiraudy(SteveHillage))", "Steve Hillage and Miquette Giraudy formedSystem7(SteveHillage,System7))", "(FormedBySystem7(SteveHillage) & FormedBySystem7(SteveHillage) & FormedBySystem7(SteveGiraudy))", "All x y z.((SteveHillage(x) & MiquetteGeraudy(y) & System7(z)) -> (SteveHillage(x) & MiquetteGeraudy(y) & FormedSystem7(x,z)))", "all x.((SteveHillage(x) & MiquetteGiraudy(x)) -> FormedSystem7(x))", "(FormedBySteveHillageAndMiquetteGiraudy(SteveHillage) & FormedBySystem7(SteveHillage) & FormedBySystem7(MiquetteGiraudy))", "(Formation(SteveHillage) & MiquetteGiraudy(MiquetteGiraudy))", "Steve Hillage and Miquette Giraudy formedSystem7(SteveHillage) & MiquetteGiraudyFormation(MiquetteGiraudy))", "(Formation(SteveHillage,System7)) & FormedBySteveHillageAndMiquetteGiraudy(SteveHillage,System7))", "(FormedBySecretary7(SteveHillage) & FormedByMiquetteGeraudy(SteveHillage))", "All x y z.((SteveHillage(x) & MiquetteGiraudy(y) & System7(z)) -> (SteveHillage(x) & MiquetteGiraudy(y) & FormedSystem7(y,z)))", "all x.((SteveHillage(x) & MiquetteGeraudy(x)) -> System7Formation(x))", "All x y z.((SteveHillage(x) & MiquetteGeraudy(y) & System7(z)) -> (SteveHillage(x) & MiquetteGeraudy(y) & FormedSystem7(y,z)))", "(Formation(SteveHillage) & FormedBy(MiquetteGiraudy))"]}
{"id": "folio_train_1621", "nl": "Steve Hillage and Miquette Giraudy are former members of the band Gong.", "fol": "(IsFormerMemberOf(Stevehillage,Gong) & IsFormerMemberOf(Miquettegiraudy,Gong))", "prediction": ["(Ex-Member(SteveHillage) & FormerMember(MiquetteGiraudy))", "((SteveHillage(Steve) & MiquetteGiraudy(Steve)) -> FormerBandGong(Steve)) & (MiquetteGiraudy(Miquette) -> FormerBandGong(Steve)))", "(FreshMember(SteveHillage) & FormerMember(MiquetteGiraudy))", "both Steve Hillage and Miquette Giraudy are former members of the band Gong.", "(FormerGongMembers(SteveHillage) & FormerGongMember(MiquetteGiraudy))", "all x.((SteveHillage(x) & MiquetteGiraudy(x)) -> FormerBandGong(x))", "(Ex-Member(SteveHillage) & Ex-Member(MiquetteGiraudy))", "all x y.((SteveHillage(x) & MiquetteGeraudy(y)) -> FormerBandGong(x,y))", "all x.((SteveHillage(x) | MiquetteGiraudy(x)) -> FormerBandGong(x))", "((SteveHillage(Steve) | MiquetteGiraudy(Steve))) & FormerGongMember(Steve,Hillage,Gong))", "all x y.((StaceHillage(x) & MiquetteGiraudy(y)) -> FormerBandGong(x))", "(Ex-Members(SteveHillage) & FormerMember(MiquetteGiraudy))", "all x.((SteveHillage(x) | MiquetteGeraudy(x)) -> FormerGongMember(x))", "(FreshMember(SteveHillage) & FormerMember(MiquetteGeraudy))", "(FormerGongmembers(SteveHillage,Gong) & FormerGongmember(SteveHillage,Gong))", "All x.((SteveHillage(x) & MiquetteGeraudy(x)) -> FormerBandGong(x))"]}
{"id": "folio_train_1622", "nl": "Electric dance music bands are bands.", "fol": "all x.(IsElectronicDanceMusicBand(x) -> IsBand(x))", "prediction": ["all x.(ElectricDanceMusicBand(x) -> Band(x))", "all x y.((ElectricDanceMusicBand(x) & Band(y)) -> Band(x))", "all x.(ElectricDanceMusicBand(x) -> Band(x))", "(all x.(ElectricDanceMusicBand(x) -> Band(x)))", "all x y.((ElectricDanceMusicBand(x) & Band(y)) -> Band(x))", "all x.(ElectricDanceMusicBand(x) -> Band(x))", "(all x.(ElectricDanceMusicBand(x) -> Band(x)))", "all x y.((ElectricDanceMusicBand(x) & ElectricDanceMusic(y)) -> Band(x))", "all x.(ElectricDanceMusicBand(x) -> Band(x))", "all x y.((ElectricDanceMusicBand(x) & Band(y)) -> Band(x))", "all x.(ElectricDanceMusicBand(x) -> Band(x))", "exists x.(ElectricDanceMusicBand(x) & Band(x))", "all x.(ElectricDanceMusicBand(x) -> Band(x))", "all x.(ElectricDanceMusicBand(x) -> Band(x))", "all x.(ElectricDanceMusicBand(x) -> Band(x))", "all x.(ElectricDanceMusicBand(x) -> Band(x))"]}
{"id": "folio_train_1623", "nl": "System 7 has released several club singles.", "fol": "exists x.(IsClubSingle(x) & HasReleased(System7,x))", "prediction": ["all x.(System7(x) -> ReleasedClubSingles(x))", "(ReleasedClubSingles(System7) & ReleasedClubSingles(System7))", "System7 has released several club singles.", "(System7(System7) & ReleasedClubSingles(System7))", "System7 & ReleasedClubSingles(System7))", "(ReleasedSingles(System7) & System7(System7))", "all x.(System7(x) -> (ReleasedClubSingles(x) & ReleasedClubSingles(x)))", "all x.(System7(x) -> ReleasedClubSingles(x))", "(Syst\u00e8me7.com & ReleasedClubSingles(System7))", "exists x.(ClubSingle(x) & ReleasedBySystem7(x))", "All x y.((System7(x) & ClubSingle(y)) -> Released(x,y))", "System7 has released several club singles.", "Several ClubSinglesReleased(System7) & System7(System)", "System7 - ReleasedClubSingles(System7))", "System 7 has released several club singles.", "all x.(System7(x) -> ReleasedClubSingles(x))"]}
{"id": "folio_train_1624", "nl": "Club singles are not singles.", "fol": "all x.(IsClubSingle(x) -> -IsSingle(x))", "prediction": ["all x.(ClubSingle(x) -> -Single(x))", "(all x.(ClubSingle(x) -> -Single(x)))", "all x.(ClubSingle(x) -> -Single(x))", "all x y.((ClubSingle(x) & ClubSingle(y)) -> -Single(x))", "(-Single(club))", "all x y.((ClubSingle(x) & Single(y)) -> -Single(x))", "-(ClubSingle(club) & Single(club))", "all x.(ClubSingle(x) -> -Single(x))", "(all x.(ClubSingle(x) -> -Single(x)))", "-Single(club)", "all x.(Single(x) -> Club(x))", "all x.(ClubSingle(x) -> -Single(x))", "all x.(Single(x) -> Club(x))", "all x.(ClubSingle(x) -> -Single(x))", "all x.(ClubSingle(x) -> -Single(x))", "all x.(ClubSingle(x) -> -Single(x))"]}
{"id": "folio_train_1625", "nl": "System 7 was formed by former members of Gong.", "fol": "exists x.(IsFormerMemberOf(x,Gong) & FormedBand(x,System7))", "prediction": ["All x.(System7(x) -> FormerGongMember(x))", "System7 (FormedByGong(x) & FormerMembersOfGong(x))", "(FormedByGong(System7))", "System7 was formed by formerGongMembers(System7))", "(FormedBy(System7) & FormerGongMembers(System7))", "All x y.((System7(x) & FormerGongMember(y)) -> FormedBy(x,y))", "all x.(System7(x) -> FormedByGong(x))", "System7 was formedByEx-GongMembers(System7))", "System 7 (FormedByEx-GongMembers(System7))", "System7(x) & FormerGongMembers(x))", "System 7 - FormerGongMembersFormedBy(x,y)", "(FormedByEx-Gong(System7))", "System7 was formed by formerGongMembers(System7))", "all x.(System7(x) -> FormedByEx-GongMembers(x))", "All x.(System7(x) -> FormerGongMember(x))", "all x.(System7(x) -> FormerGongMembers(x))"]}
{"id": "folio_train_1626", "nl": "System 7 has released several singles.", "fol": "exists x.(IsSingle(x) & HasReleased(System7,x))", "prediction": ["all x.(System7(x) -> (ReleasedSingles(x) & ReleasedSingles(x)))", "System7 has released several singles.", "(Syst\u00e8me7(System7) & ReleasedSingles(System7))", "(System7(System7) & ReleasedSingles(System7))", "System7 - ReleasedSingles(System7))", "Several Singles have been released by System7.", "all x y.((System7(x) & Single(y)) -> Released(x,y))", "(ReleasedSingles(System7) & System7(System7))", "all x.(System7(x) -> ReleasedSingles(x))", "(System7(System) & ReleasedSingles(System))", "System7 has released several singles.", "all x.(System7(x) -> (ReleasedSingles(x) & ReleasedSingles(x)))", "exists x.(System(x) & Single(x))", "System7 & ReleasedSingles(System7))", "(Syst\u00e8me7(System7)) -> ReleasedSingles(System7))", "System 7 has released several singles."]}
{"id": "folio_train_1627", "nl": "System 7 is not a band.", "fol": "-IsBand(System7)", "prediction": ["(-Band(System7))", "System7 is notBand(System7))", "all x.(System7(x) -> -Band(x))", "System7 is not a band.", "System7 - Band(System7))", "-Band(System7))", "all x.(Syst\u00e8me7(x) -> -Band(x))", "System7.(-Band(System7))", "all x.(System7(x) -> -Band(x))", "(-Band(System7))", "System7 is notBand(System7)).", "All x.(System7(x) -> -Band(x))", "-Band(System7)", "(-Band(System7))", "-Band(System7))", "(-Band(System7))"]}
{"id": "folio_train_1628", "nl": "A summarization model is always faithful if it uses content from the input documents.", "fol": "all x.((SummarizationModel(x) & IsSummarizationModel(x) & UsesOnlyInputDocuments(x)) -> IsFaithful(x))", "prediction": ["all x.((SummarizationModel(x) & UsesInputContent(x)) -> Faithful(x))", "all x.((SummarizationModel(x) & UsesContentFromInputDocuments(x)) -> Faithful(x))", "all x y.((SummarizationModel(x) & InputDocuments(y) & UsesContent(x,y)) -> Faithful(x))", "all x y.((SummarizationModel(x) & Content(y) & UsesFromInputDocuments(x,y)) -> Faithful(x))", "all x.((SummarizationModel(x) & UsesInputContent(x)) -> AlwaysTrue(x))", "all x.((SummarizationModel(x) & UsesContentFromInputDocuments(x)) -> Faithful(x))", "all x.(SummarizationModel(x) -> (UsesContent(x) & UsesInputDocuments(x)))", "all x y.((SummarizationModel(x) & InputDocuments(y) & UsesContentFrom(x,y)) -> Faithful(x))", "all x y.((SummarizationModel(x) & Content(y) & InputDocuments(x,y)) -> AlwaysTrue(x))", "all x.((SummarizationModel(x) & UsesInputDocuments(x)) -> Faithful(x))", "all x.(SummarizationModel(x) -> (UsesContentFromInputDocuments(x) & AlwaysTrue(x)))", "all x.((SummarizationModel(x) & UsesContentFromInputDocuments(x)) -> AlwaysTrue(x))", "all x y.((SummarizationModel(x) & UsesInputContent(x,y)) -> True(x))", "all x.((SummarizationModel(x) & UsesInputContent(x)) -> Faithful(x))", "all x y.((SummarizationModel(x) & InputDocuments(y) & UsesContentFrom(x,y)) -> Faithful(x))", "all x.((SummarizationModel(x) & UsesInputContent(x)) -> True(x))"]}
{"id": "folio_train_1629", "nl": "Extractive models are a kind of summarization models.", "fol": "all x.((SummarizationModel(x) & IsExtractiveModel(x)) -> IsSummarizationModel(x))", "prediction": ["all x.(ExtractiveModel(x) -> SummarizationModel(x))", "all x y.((ExtractiveModel(x) & SummarizationModel(y)) -> SummarizationModel(x,y))", "all x.(ExtractiveModel(x) -> SummarizationModel(x))", "all x y.((ExtractiveModel(x) & SummarizationModel(y)) -> SummarizationModel(x,y))", "all x.((ExtractiveModel(x) & SummarizationModel(x)) -> ExtractiveModel(x))", "all x.(ExtractiveModel(x) -> (SummarizationModel(x) & SummarizationModel(x)))", "all x.(ExtractiveModel(x) -> SummarizationModel(x))", "all x.(ExtractionModel(x) -> SummarizationModel(x))", "all x y.((ExtractiveModel(x) & SummarizationModel(y)) -> SortOf(x,y))", "all x.(ExtractiveModel(x) -> SummarizationModel(x))", "all x.((ExtractiveModel(x) & SummarizationModel(x)) -> ExtractiveModel(x))", "all x y.((ExtractiveModel(x) & SummarizationModel(y)) -> SummarizationModel(x,y))", "all x.(ExtractiveModel(x) -> SummarizationModel(x))", "exists x.(ExtractionModel(x) & SummarizationModel(x))", "all x y.((ExtractiveModel(x) & SummarizationModel(y)) -> SortOf(x,y))", "all x.(ExtractiveModel(x) -> SummarizationModel(x))"]}
{"id": "folio_train_1630", "nl": "Extractive model can only use content from the input documents.", "fol": "all x.((SummarizationModel(x) & IsExtractiveModel(x)) -> UsesOnlyInputDocuments(x))", "prediction": ["all x.(ExtractiveModel(x) -> CanUseContentFromInputDocuments(x))", "all x y.((ExtractiveModel(x) & Content(y)) -> CanUseFromInputDocuments(x,y))", "all x.(ExtractiveModel(x) -> (UsesInputDocuments(x) & OnlyUsesInputDocuments(x)))", "all x.(ExtractiveModel(x) -> CanUseContentFromInputDocuments(x))", "(ExtractiveModel(x) -> CanUseContentFromInputDocuments(x))", "(ExtractiveModel(x) -> UsesInputDocuments(x))", "all x y z.((ExtractiveModel(x) & Content(y) & Document(z) & Input(z)) -> CanUse(x,y,z))", "all x.((ExtractiveModel(x) & InputDocuments(x)) -> CanUseContent(x))", "all x y.((ExtractiveModel(x) & Content(y)) -> CanUseFromInputDocuments(x,y))", "all x.(ExtractiveModel(x) -> UsesInputDocuments(x))", "all x.(ExtractionModel(x) -> CanUseContentFromInputDocuments(x))", "all x y.((ExtractiveModel(x) & InputDocuments(y)) -> CanUseContent(x,y))", "all x y.((ExtractiveModel(x) & Content(y)) -> OnlyUsesFromInputDocuments(x,y))", "all x.(ExtractiveModel(x) -> (CanUseContentFromInputDocuments(x)))", "all x.(ExtractiveModel(x) -> CanUseContentFromInputDocuments(x))", "all x.(ExtractiveModel(x) -> UsesContentFromInputDocuments(x))"]}
{"id": "folio_train_1631", "nl": "Extractive models are always faithful.", "fol": "all x.((SummarizationModel(x) & IsExtractiveModel(x)) -> IsFaithful(x))", "prediction": ["all x.(ExtractiveModel(x) -> AlwaysTrue(x))", "all x.(ExtractiveModel(x) -> AlwaysTrue(x))", "all x y.((ExtractiveModel(x) & ExtractionModel(y)) -> AlwaysTrue(x,y))", "all x.((ExtractiveModel(x) & True(x)) -> Always(x))", "all x y.((ExtractiveModel(x) & Extraction(y)) -> AlwaysTrue(x,y))", "all x.(ExtractiveModel(x) -> AlwaysTrue(x))", "all x.(ExtractiveModel(x) -> True(x))", "all x y.((ExtractiveModel(x) & Model(y)) -> AlwaysTrue(x,y))", "all x.((ExtractiveModel(x) & True(x)) -> Always(x))", "all x y.((ExtractiveModel(x) & ExtractiveModel(y)) -> AlwaysTrue(x,y))", "all x.(ExtractionModel(x) -> AlwaysTrue(x))", "all x.((ExtractiveModel(x) & True(x)) -> Extensive(x))", "all x.(ExtractiveModel(x) -> AlwaysTrue(x))", "all x.(ExtractiveModel(x) -> True(x))", "exists x.(ExtractionModel(x) & True(x))", "all x.(ExtractiveModel(x) -> Faithful(x))"]}
{"id": "folio_train_1632", "nl": "Extractive models are not always faithful.", "fol": "-all x.((SummarizationModel(x) & IsExtractiveModel(x)) -> IsFaithful(x))", "prediction": ["all x.(ExtractiveModel(x) -> -Firthy(x))", "-(ExtractiveModel(x) & True(x))", "all x.((ExtractiveModel(x) & -Firthy(x)) -> -Firthy(x))", "all x.(ExtractiveModel(x) -> -Firthy(x))", "(-Firthy(extractiveModel))", "all x.(ExtractiveModel(x) -> -True(x))", "(all x.(ExtractiveModel(x) -> -True(x)))", "all x y.((ExtractiveModel(x) & ExtractionModel(y)) -> -Firthy(x,y))", "all x.((ExtractiveModel(x) & -Firthy(x)) -> -Firmish(x))", "exists x.(ExtractionModel(x) & -Firthy(x))", "all x.(ExtractiveModel(x) -> -Firthy(x))", "all x.(ExtractiveModel(x) -> -True(x))", "(all x.(ExtractiveModel(x) -> -True(x)))", "all x.(ExtractiveModel(x) -> -Fibrant(x))", "exists x.(ExtractionModel(x) & -Firthy(x))", "exists x.(ExtractiveModel(x) & -Firmly(x))"]}
{"id": "folio_train_1633", "nl": "If people practice coding questions, then they are not studying to go to medical school to become a doctor.", "fol": "all x.(PracticeCodingQuestions(x) -> -StudyingForMedicalSchool(x))", "prediction": ["all x.(PracticesCodingQuestions(x) -> -StudyingToMedicalSchoolToBecomeDoctor(x))", "all x y.((Person(x) & CodesQuestions(x) & Practices(x,y)) -> -StudyingToMedicalSchool(x))", "all x.((Person(x) & PracticesCodingQuestions(x)) -> -StudyingToMedicalSchool(x))", "all x.(PracticesCodecingQuestions(x) -> -StudyingToMedicalSchoolToBecomeDoctor(x))", "all x.(PracticesCodingQuestions(x) -> -StudiesToMedicalSchoolToBecomeDoctor(x))", "all x.(PracticeCodedQuestions(x) -> -StudyingToMedicalSchoolToBecomeDoctor(x))", "all x.((Person(x) & PracticesCodedQuestions(x)) -> -StudyingToMedicalSchool(x))", "all x y.((Person(x) & CodesQuestions(x) & Practices(x,y)) -> -StudyingToMedicalSchoolToBecomeDoctor(x))", "all x y.((Person(x) & PracticesCodingQuestions(x)) -> -StudyingToMedicalSchool(x))", "all x.(PracticeCodingQuestions(x) -> -StudyingToMedicalSchool(x))", "all x.(PracticesCodecingQuestions(x) -> -StudyingToMedicalSchool(x))", "all x.((Person(x) & PracticesCodingQuestions(x)) -> -StudyingToMedicalSchoolToBecomeDoctor(x))", "all x.(PracticesCodingQuestions(x) -> -StudiesToMedicalSchoolToBecomeDoctor(x))", "all x y.((Person(x) & CodesQuestions(x) & Practices(x,y)) -> -StudyingToMedicalSchool(x))", "all x.(PracticeCodedQuestions(x) -> -StudyingToMedicalSchool(x))", "all x.(PracticesCodecingQuestions(x) -> -GoesToMedicalSchoolToBecomeDoctor(x))"]}
{"id": "folio_train_1634", "nl": "If people want to work in the software engineering industry, then they practice coding questions.", "fol": "all x.(WantsToWorkInSoftwareEngineering(x) -> PracticeCodingQuestions(x))", "prediction": ["all x.((Person(x) & WantsSoftwareEngineering(x)) -> PracticesCodecingQuestions(x))", "all x y.((Person(x) & SoftwareEngineeringIndustry(y) & WantsToWork(x,y)) -> PracticesCodingQuestions(x))", "all x.(WantsToWorkInSoftwareEngineering(x) -> PracticesCodingQuestions(x))", "all x.((Person(x) & WantsSoftwareEngineering(x)) -> PracticesCodingQuestions(x))", "all x y z.((Person(x) & SoftwareEngineeringIndustry(y) & SoftwareEngineeringIndustry(z) & WantsToWork(x,y,z)) -> PracticesCodingQuestions(x))", "all x.((Person(x) & WantsToWorkInSoftwareEngineering(x)) -> PracticesCodingQuestions(x))", "all x.((People(x) & WantsSoftwareEngineering(x)) -> PracticesCodingQuestions(x))", "all x y.((Person(x) & SoftwareEngineeringIndustry(y) & WantsToWork(x,y)) -> PracticesCodingQuestions(x))", "all x.(WantToWorkInSoftwareEngineering(x) -> PracticeCodeChallenges(x))", "all x.((Person(x) & WantsSoftwareEngineering(x)) -> PracticesCodecingQuestions(x))", "all x y.((Person(x) & SoftwareEngineeringIndustry(y)) -> PracticesCodingQuestions(x,y))", "exists x.(ProductsInSoftwareEngineering(x) & WantsToWorkIn(x,SoftwareEngineering))", "all x y.((Person(x) & SoftwareEngineeringIndustry(y) & WantsToWorkIn(x,y)) -> PracticesCodingQuestions(x))", "all x.(WantsToWorkInSoftwareEngineering(x) -> PracticesCodecingQuestions(x))", "all x.((Person(x) & WantsSoftwareEngineeringWork(x)) -> PracticesCodecingQuestions(x))", "all x y.((Person(x) & SoftwareEngineeringIndustry(y)) -> PracticesCodecingQuestions(x,y))"]}
{"id": "folio_train_1635", "nl": "If people enjoy healthcare fields and want to help people with medical issues, then they are studying to go to medical school to become a doctor.", "fol": "all x.(EnjoysHealthcareFields(x) -> StudyingForMedicalSchool(x))", "prediction": ["all x.((EnjoysHealthcareFields(x) & WantsToHelpWithMedicalIssues(x)) -> StudiesToBecomeDoctor(x))", "all x.((PeopleEnjoysHealthcareFields(x) & WantsToHelpWithMedicalIssues(x)) -> StudiesToBecomeDoctor(x))", "all x.((Person(x) & EnjoysHealthcareFields(x) & WantsToHelpWithMedicalIssues(x)) -> StudiesToBecomeMedicalSchool(x))", "all x y.((Person(x) & EnjoysHealthcareFields(x) & WantsToHelpWithMedicalIssues(x)) -> StudiesToBecomeMedicalSchool(y))", "all x.(EnjoysHealthcareFieldsAndWantsToHelpWithMedicalIssues(x) -> StudiesToBecomeDoctor(x))", "all x y.((People(x) & EnjoysHealthcareFields(x) & WantsToHelpWithMedicalIssues(x)) -> StudiesToBecomeDoctor(y))", "all x.(EnjoysHealthcareFieldsAndWantsToHelpPeopleWithMedicalIssues(x) -> StudiesToBecomeDoctor(x))", "all x.((EnjoysHealthcareFields(x) & WantsToHelpPeopleWithMedicalIssues(x)) -> StudyingToBecomeMedicalSchool(x))", "all x y.((Person(x) & EnjoysHealthcareFields(x) & WantsToHelpPeopleWithMedicalIssues(x)) -> StudiesToBecomeMedicalSchool(x))", "all x y.((EnjoysHealthcareFields(x) & WantsToHelpPeopleWithMedicalIssues(x)) -> StudiesToBecomeDoctor(y))", "all x.((PeopleEnjoysHealthcareFields(x) & WantsToHelpPeopleWithMedicalIssues(x)) -> StudiesToBecomeDoctor(x))", "all x y z.((Person(x) & HealthcareField(y) & MedicalIssue(z) & Enjoys(x,y) & WantsToHelp(x,z)) -> StudyingToBecomeDoctor(x))", "all x y.((People(x) & EnjoysHealthcareFields(x) & WantsToHelpPeopleWithMedicalIssues(x,y)) -> StudiesToBecomeMedicalSchool(x,y))", "all x.((Person(x) & EnjoysHealthcareFields(x) & WantsToHelpPeopleWithMedicalIssues(x)) -> StudyingToBecomeMedicalSchool(x))", "all x.(EnjoysHealthcareFieldsAndWantsToHelpWithMedicalIssues(x) -> StudyingToBecomeMedicalSchool(x))", "all x.(EnjoysHealthcareFieldsAndWantToHelpPeopleWithMedicalIssues(x) -> StudyingToBecomeMedicalSchool(x))"]}
{"id": "folio_train_1636", "nl": "If people grew up with parents who worked as doctors, then they enjoy healthcare fields and want to help people with medical issues.", "fol": "all x.(GrewUpWithDoctorParents(x) -> EnjoysHealthcareFields(x))", "prediction": ["all x.((Person(x) & GrownUpWithParents(x) & WorkedAsDoctors(x)) -> (EnjoysHealthcareFields(x) & WantsToHelpWithMedicalIssues(x)))", "all x.((GrowthWithParents(x) & WorkedAsDoctors(x)) -> (EnjoysHealthcareFields(x) & WantsToHelpWithMedicalIssues(x)))", "all x y.((Person(x) & GrowingUpWithParents(x,y) & WorkedAsDoctors(x)) -> (EnjoysHealthcareFields(x) & WantsToHelpWithMedicalIssues(x)))", "all x y.((Person(x) & GrownUpWithParents(x,y) & WorkedAsDoctors(x)) -> (EnjoysHealthcareFields(x) & WantsToHelpWithMedicalIssues(x)))", "all x.((People(x) & GrownUpWithParents(x) & WorkedAsDoctors(x)) -> (EnjoysHealthcareFields(x) & WantsToHelpWithMedicalIssues(x)))", "all x y.((Growth(x) & Parent(y) & WorkedAsDoctors(y)) -> (EnjoysHealthcareFields(x) & WantsToHelpWithMedicalIssues(x)))", "all x y z.((Person(x) & Parent(y) & Doctor(z) & GrownUpWith(x,y)) -> (EnjoysHealthcareFields(x) & WantsToHelpWithMedicalIssues(x)))", "all x.((Person(x) & GrownUpWithParents(x) & WorkedAsDoctors(x)) -> (EnjoysHealthcareFields(x) & WantsToHelpWithMedicalIssues(x)))", "all x y.((Person(x) & Parent(y) & WorkedAsDoctors(x)) -> (EnjoysHealthcareFields(x) & WantsToHelpWithMedicalIssues(x)))", "all x.((Parents(x) & GrownUpWith(x,y) & Doctors(y)) -> (EnjoysHealthcareFields(x) & WantsToHelpWithMedicalIssues(x)))", "all x.((GrowthWithParents(x) & WorkedAsDoctors(x)) -> (EnjoysHealthcareFields(x) & WantsToHelpWithMedicalIssues(x)))", "all x y z.((Person(x) & Parent(y) & Doctor(z) & GrownUpWith(x,y,z)) -> (EnjoysHealthcareFields(x) & WantsToHelpWithMedicalIssues(x)))", "all x.(GrowthWithParentsWorkingAsDoctors(x) -> (EnjoyHealthcareFields(x) & WantToHelpWithMedicalIssues(x)))", "all x.((People(x) & GrownUpWithParents(x) & WorkedAsDoctors(x)) -> (EnjoysHealthcareFields(x) & WantsToHelpWithMedicalIssues(x)))", "all x y.((People(x) & GrowingUpWithParents(x,y) & WorkedAsDoctors(x)) -> (EnjoysHealthcareFields(x) & WantsToHelpWithMedicalIssues(x)))", "all x.((Person(x) & GrownUpWithParents(x) & WorkedAsDoctors(x)) -> (EnjoysHealthcareFields(x) & WantsToHelpWithMedicalIssues(x)))"]}
{"id": "folio_train_1637", "nl": "If people study hard, then they grew up with parents who worked as doctors.", "fol": "all x.(StudiesHard(x) -> ParentDoctor(x))", "prediction": ["all x.(StudiesHard(x) -> (GrowsUpWithParents(x) & WorkedAsDoctors(x)))", "all x y.((Person(x) & StudyHard(x)) -> (GrowsUpWithParents(x,y) & WorkedAsDoctors(y)))", "all x.(StudiesHard(x) -> GrowsUpWithDoctors(x))", "all x y.((StudyHard(x) & Person(y)) -> (GrowsUpWithParents(y,x) & WorkedAsDoctors(y)))", "all x y z.((Person(x) & StudyHard(x) & Parent(y) & Doctor(z)) -> GrownUpWith(x,y,z))", "all x y.((Person(x) & StudyHard(x)) -> (GrowsUpWithParents(x,y) & WorkedAsDoctors(y)))", "all x.(StudiesHard(x) -> (GrowsUpWithDoctors(x)))", "all x y.((People(x) & StudyHard(x)) -> (GrowsUpWithParents(x,y) & WorkedAsDoctors(y)))", "all x y z.(StudyHard(x) -> (GrowUpWithParents(y) & WorkedAsDoctors(z)))", "all x.(StudyHard(x) -> (GrowsUpWithDoctors(x) & ParentsWorkAsDoctors(x)))", "all x.(StudiesHard(x) -> GrowsUpWithDoctors(x))", "all x.(StudiesHard(x) -> (GrowsUpWithParents(x) & WorkedAsDoctors(x)))", "all x.((StudiesHard(x) & ParentsWorkAsDoctors(x)) -> GrownUpWith(x))", "all x y.((Person(x) & StudyHard(x)) -> (GrowthWithParents(y) & WorkedAsDoctors(y)))", "all x.(StudiesHard(x) -> (GrowthWithParents(x) & WorkedAsDoctors(x)))", "all x.(StudiesHard(x) -> GrownUpWithDoctors(x))"]}
{"id": "folio_train_1638", "nl": "If Robin neither enjoys healthcare fields and wants to help people with medical issues nor grew up with parents who worked as doctors, then Robin is either a person who studies hard or grew up with parents who worked as doctors.", "fol": "(-(EnjoysHealthcareFields(Robin) | GrewUpWithDoctorParents(Robin)) -> (StudiesHard(Robin) | GrewUpWithDoctorParents(Robin)))", "prediction": ["all x.((Robin(x) & -(EnjoysHealthcareFields(x) & WantsToHelpPeopleWithMedicalIssues(x) | GrownUpWithDoctors(x))) -> (StudiesHard(x) | GrownUpWithDoctors(x)))", "(-(EnjoysHealthcareFields(Robin) & WantsToHelpPeopleWithMedicalIssues(Robin) & -GrowsUpWithDoctors(Robin))) -> (StudiesHard(Robin) | GrowsUpWithDoctors(Robin)))", "all x.((Robin(x) & -(EnjoysHealthcareFields(x) & WantsToHelpPeopleWithMedicalIssues(x) & GrownUpWithDoctors(x))) -> (StudiesHard(x) | GrownUpWithDoctors(x)))", "(-(EnjoysHealthcareFields(Robin) & WantsToHelpMedicalIssues(Robin) & -GrowthWithDoctors(Robin)) -> (StudiesHard(Robin) | GrownUpWithDoctors(Robin)))", "all x y.((Robin(x) & EnjoysHealthcareFields(x) & WantsToHelpPeopleWithMedicalIssues(x) & ParentsWorkedAsDoctors(y) & -GrowsUpWithDoctors(x)) -> (StudiesHard(x) | GrowsUpWithDoctors(x)))", "all x.((Robin(x) & -(EnjoysHealthcareFields(x) & WantsToHelpMedicalIssues(x) | GrownUpWithDoctors(x))) -> (StudiesHard(x) | GrownUpWithDoctors(x)))", "all x.((Person(x) & (-EnjoysHealthcareFields(x) & WantsToHelpPeopleWithMedicalIssues(x) | GrownUpWithDoctors(x))) -> (StudiesHard(x) | GrownUpWithDoctors(x)))", "(all x.((Robin(x) & EnjoysHealthcareFields(x) & WantsToHelpPeopleWithMedicalIssues(x)) | (GrowsUpWithPatientsWorkingAsDoctors(x))))", "(-(EnjoysHealthcareFields(Robin) & WantsToHelpPeopleWithMedicalIssues(Robin)) & -(GrowsUpWithDoctors(Robin) | StudiesHard(Robin))))", "all x.((Person(x) & ((EnjoysHealthcareFields(x) & WantsToHelpPeopleWithMedicalIssues(x) & -GrowsUpWithDoctors(x)) | (-GrowsUpWithDoctors(x) & StudiesHard(x))))", "all x.((Robin(x) & -(EnjoysHealthcareFields(x) & WantsToHelpPeopleWithMedicalIssues(x) | GrownUpWithDoctors(x))) -> (StudiesHard(x) | GrownUpWithDoctors(x)))", "all x y.((Robin(x) & EnjoysHealthcareFields(x) & WantsToHelpPeopleWithMedicalIssues(x) & ParentsWorkedAsDoctors(x,y)) -> (StudiesHard(x) | GrowsUpWithDoctors(x,y)))", "all x.((Robin(x) & -(EnjoysHealthcareFields(x) & WantsToHelpMedicalIssues(x) & GrownUpWithDoctors(x))) -> (StudiesHard(x) | GrownUpWithDoctors(x)))", "all x.((Robin(x) & (NegativeHealthcareFields(x) & WantsToHelpPeopleWithMedicalIssues(x) | GrownUpWithDoctors(x))) -> (StudiesHard(x) | GrownUpWithDoctors(x)))", "all x.((Person(x) & ((EnjoysHealthcareFields(x) & WantsToHelpPeopleWithMedicalIssues(x) | GrownUpWithDoctors(x))) -> (StudiesHard(x) | GrownUpWithDoctors(x))))", "all x.((Robin(x) & -(EnjoysHealthcareFields(x) & WantsToHelpPeopleWithMedicalIssues(x) & GrownUpWithDoctors(x))) -> (StudiesHard(x) | GrownUpWithDoctors(x)))"]}
{"id": "folio_train_1639", "nl": "Robin is a person who studies hard.", "fol": "StudiesHard(Robin)", "prediction": ["all x.(Robin(x) -> StudiesHard(x))", "(StudiesHard(Robin) & Robin(Robin))", "all x.(Robin(x) -> StudiesHard(x))", "(StudiesHard(Robin) & Person(Robin))", "all x.(Robin(x) -> StudiesHard(x))", "(StudiesHard(Robin) & Robin(Robin))", "Robin StudiesHard(Robin)", "all x.(Robin(x) -> StudiesHard(x))", "(StudiesHard(Robin) -> Person(Robin))", "Robin studiesHard.", "Robin StudiesHard(Robin)", "all x.(Robin(x) -> StudiesHard(x))", "(StudiesHard(Robin) & Robin(Robin))", "all x.(Robin(x) -> StudiesHard(x))", "all x.(Robin(x) -> StudiesHard(x))", "all x.(Robin(x) -> StudiesHard(x))"]}
{"id": "folio_train_1640", "nl": "Robin practices coding questions and wants to work in the software engineering industry.", "fol": "(PracticeCodingQuestions(Robin) & WantsToWorkInSoftwareEngineering(Robin))", "prediction": ["all x.(Robin(x) -> (PracticesCodingQuestions(x) & WantsToWorkInSoftwareEngineering(x)))", "(PracticesCodingQuestions(Robin) & WantsToWorkInSoftwareEngineering(Robin))", "all x y.((Robin(x) & CodeCast(y)) -> (Practices(x,y) & WantsToWorkInSoftwareEngineering(x)))", "Robin practicesCodingQuestionsAndWantsToWorkInSoftwareEngineering(Robin)", "all x y.((Robin(x) & CodingQuest(y)) -> (Practices(x,y) & WantsToWorkInSoftwareEngineering(x)))", "all x.(Robin(x) -> (PracticesCodingQuestions(x) & WantsToWorkInSoftwareEngineering(x)))", "(PracticesCodingQuestions(Robin) & WantsToWorkInSoftwareEngineering(Robin))", "all x y.((Robin(x) & SoftwareEngineeringIndustry(y)) -> (PracticesCodingQuestions(x,y) & WantsToWorkIn(x,y)))", "(PracticesCodeCautions(Robin) & WantsToWorkInSoftwareEngineering(Robin))", "all x.(Robin(x) -> (PracticesCodingQuestions(x) & WantsToWorkInSoftwareEngineering(x)))", "(PracticesCodingQuestions(Robin) & WantsToWorkInSoftwareEngineering(Robin))", "all x.(Robin(x) -> (PracticesCodingQuestions(x) & WantsToWorkInSoftwareEngineering(x)))", "(PracticesCodingQuestions(Robin) & WantsToWorkInSoftwareEngineering(Robin))", "all x.(Robin(x) -> (PracticesCodecingQuestions(x) & WantsToWorkInSoftwareEngineering(x)))", "(PracticesCodingQuestions(Robin) & WantsToWorkInSoftwareEngineering(Robin))", "all x.(Robin(x) -> (PracticesCodingQuestions(x) & WantsToWorkInSoftwareEngineeringIndustry(x)))"]}
{"id": "folio_train_1641", "nl": "Robin neither practices coding questions nor works to work in the software engineering industry.", "fol": "(-PracticeCodingQuestions(Robin) & -WantsToWorkInSoftwareEngineering(Robin))", "prediction": ["all x.(Robin(x) -> (-PracticesCodingQuestions(x) & -WorksInSoftwareEngineering(x)))", "(-PracticesCodingQuestions(Robin) & -WorksInSoftwareEngineering(Robin))", "-(PracticesCodingQuestions(Robin) | WorksInSoftwareEngineeringIndustry(Robin)))", "((Robin) & -PracticesCodingQuestions(Robin)) | WorksToSoftwareEngineering(Robin)))", "all x y.((Robin(x) & SoftwareEngineeringIndustry(y)) -> (-PracticesCodingQuestions(x,y) & -WorksToWorkIn(x,y)))", "all x.(Robin(x) -> (-PracticesCodingQuestions(x) & -WorksInSoftwareEngineeringIndustry(x)))", "Robin ne practicescodingquestions ni workstoWorkInSoftwareEngineering(Robin).", "(-PracticesCodingQuestions(Robin) & -WorksInSoftwareEngineeringIndustry(Robin))", "((Robin(Robin) & -PracticesCodingQuestions(Robin)) | WorksToWorkInSoftwareEngineering(Robin)))", "-(PracticesCodingQuestions(Robin) | WorksToSoftwareEngineeringIndustry(Robin))", "-(PracticesCodingQuestions(Robin) & -WorksInSoftwareEngineering(Robin))", "Robin nepracticescodingquestions,norworksInSoftwareEngineering(Robin)", "all x.(Robin(x) -> (-PracticesCodingQuestions(x) & -WorksInSoftwareEngineering(x)))", "(-PracticesCodingQuestions(Robin) & -WorksInSoftwareEngineeringIndustry(Robin))", "all x.(Robin(x) -> (-PracticesCodingQuestions(x) | WorksToSoftwareEngineering(x)))", "-(PracticesCodingQuestions(Robin) | WorksInSoftwareEngineeringIndustry(Robin))"]}
{"id": "folio_train_1642", "nl": "If people go to the spa at least once a week, then they are not people who are miserly and need to save a large portion of their income.", "fol": "all x.(GoesToSpaWeekly(x) -> -IsMiserly(x))", "prediction": ["all x.((Person(x) & GoesToSpa(x) & AtLeastOnceAWeek(x)) -> -Miserly(x) & NeedsToSaveLargeParticipation(x))", "all x.((People(x) & GoesToSpa(x) & AtLeastOnceAWeek(x)) -> -Miserly(x) & NeedsToSaveLargeParticipation(x))", "all x.((Person(x) & GoesToSpa(x) & AtLeastOneWeek(x)) -> -Miserly(x) & NeedsToSaveLargeParticipation(x))", "all x.((Person(x) & GoesToSpaAtLeastOnceWeek(x)) -> -Miserly(x) & NeedsToSaveLargeParticipation(x))", "all x.(GoesToSpa(x) -> (-Miserly(x) & NeedsSavingLargeParticipationOfIncome(x)))", "all x y.((Person(x) & Spa(y) & GoesTo(x,y)) -> -(Miserly(x) & NeedsSavingLargeParticipation(x)))", "all x.((People(x) & GoesToSpa(x) & AtLeastOneWeek(x)) -> -Miserly(x) & NeedsToSaveLargeParticipation(x))", "all x.(GoesToSpa(x) -> (-Miserly(x) & NeedsSavingLargeParticipationOfIncome(x)))", "all x.((Person(x) & GoesToSpa(x) & AtLeastOnceAWeek(x)) -> -Miserly(x) & NeedsSavingLargeParticipationOfIncome(x))", "all x.(SpaAtLeastOnceWeekly(x) -> -Miserly(x) & NeedsSavingLargeParticipationOfIncome(x))", "all x.((Person(x) & GoesToSpaAtLeastOnceAWeek(x)) -> -Miserly(x) & NeedsToSaveLargeParticipationOfIncome(x))", "all x.((People(x) & GoToSpa(x) & AtLeastOnceAWeek(x)) -> -(Miserly(x) & NeedsSavingLargeParticipation(x)))", "all x y.((Person(x) & Spa(y) & VisitsAtLeastOnceWeek(x,y)) -> -Miserly(x) & NeedsSavingLargeParticipation(x))", "all x y.((Person(x) & Spa(y) & AtLeastOneWeek(x,y)) -> -(Miserly(x) & NeedsSavingLargeParticipation(x)))", "exists x.(Spa(x) & AtLeastOnceAWeek(x) & -Miserly(x) & NeedsSavingLargeParticipation(x))", "all x y.((Person(x) & Spa(y) & GoesTo(x,y)) -> -Miserly(x) & NeedsToSaveLargeParticipation(x))"]}
{"id": "folio_train_1643", "nl": "People are either miserly and need to save a large portion of their income, or people that frivolously spend a lot of money every time they go out.", "fol": "all x.(IsMiserly(x) | SpendsFrivolously(x))", "prediction": ["all x.((Person(x) & (Miserly(x) & NeedsSavingLargeParticipation(x)) | Frivolous(x))) -> SpendsLotOfMoney(x))", "all x y.((Person(x) & Miserly(x) & NeedsSavingLargePartOfIncome(x)) | (Frivolous(y) & SpendsLotOfMoney(y))))", "all x.(Person(x) -> ((Miserly(x) & NeedsToSaveLargeParticipation(x)) | (Frivolous(x) & SpendsLotsOfMoney(x))))", "(all x.(Miserly(x) -> NeedsSavingLargePartOfIncome(x)) | (Frivolous(x) -> SpendsLotOfMoney(x))))", "(all x.((Person(x) & Miserly(x) & NeedsLargePurchase(x)) | ((Person(x) & Frivolous(x)) & SpendsLotsOfMoney(x))))", "(exists x.(Person(x) & ((Miserly(x) & NeedsToSaveLargePurposeOfIncome(x)) | (Frivolous(x) & SpendsLotOfMoneyEveryTime(x)))))", "all x.((Person(x) & (Miserly(x) & NeedsSavingLargePartOfIncome(x)) | Frivolous(x))) -> SpendsLotOfMoney(x))", "exists x.(People(x) & ((Miserly(x) & NeedsSavingLargeParticipation(x)) | (Frivolous(x) & SpendsLargeParticipation(x)))))", "all x.(Person(x) -> ((Miserly(x) & NeedsToSaveLargePartOfIncome(x)) | (Frivolous(x) & SpendsLotOfMoney(x))))", "exists x.(People(x) & ((Miserly(x) & NeedsToSaveLargeParticipation(x)) | (Frivolous(x) & SpendsLotOfMoney(x))))", "all x y.((Person(x) & Miserly(x) & NeedsToSaveLargePurpose(x)) | (Frivolous(y) & SpendsLotOfMoney(y)))", "(all x.(Person(x) -> ((Miserly(x) & NeedsToSaveLargePurchase(x)) | (Frivolous(x) & SpendsLotsOfMoney(x)))))", "all x y.((Person(x) & Miserly(x) & NeedsSavingLargeParticipation(x)) | (FruitlySpoilsLotOfMoney(x) & EveryTimeOut(y))))", "exists x.(Person(x) & ((Miserly(x) & NeedsSavingLargeParticipation(x)) | (Frivolous(x) & SpendsLotsOfMoneyEveryTime(x)))))", "all x y.((Person(x) & Miserly(x) & NeedsSavingLargePartOfIncome(x)) | (Frivolous(y) & SpendsLotOfMoneyEveryTime(y))))", "exists x.(Person(x) & ((Miserly(x) & NeedsToSaveLargePurpose(x)) | (Frivolous(x) & SpendsLotOfMoney(x))))"]}
{"id": "folio_train_1644", "nl": "If people frivolously spend a lot of money every time they go out, then they value quality manufacturing and luxury items.", "fol": "all x.(SpendsFrivolously(x) -> ValuesLuxury(x))", "prediction": ["all x.((FruitlySpreadsLossOfMoney(x) & GoesOut(x)) -> ValuesQualityManufacturingAndLuxuryItems(x))", "all x.((FruivolousSpending(x) & EveryTimeOut(x)) -> (ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)))", "all x y.((FruitlySpreadsLossOfMoney(x) & GoesOut(x)) -> (ValuesQualityManufacturing(y) & ValuesLuxuryItems(y)))", "all x.((People(x) & SpendsLotOfMoney(x) & GoesOut(x)) -> ValuesQualityManufacturingAndLuxuryItems(x))", "all x.((FrivolousSpending(x) & EveryTimeOut(x)) -> (ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)))", "all x.(FruitlySpreadsLotsOfMoney(x) -> ValuesQualityManufacturingAndLuxuryItems(x))", "all x y.((FrivolousFraud(x) & GoOut(y) & SpendsLotOfMoney(x,y)) -> (ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)))", "all x.((People(x) & FrivolouslySpreadsLootOfMoney(x)) -> (ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)))", "all x y.((FruivolousFraud(x) & GoOut(y)) -> (ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)))", "all x.(FrivolousSpending(x) -> (ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)))", "all x y.((Person(x) & FrivolouslySpreadsLootOfMoney(x) & GoesOut(x)) -> (ValuesQualityManufacturing(y) & ValuesLuxuryItems(y)))", "all x y.((People(x) & FrivolouslySpreadsLotsOfMoney(x) & GoOut(x)) -> (ValuesQualityManufacturing(x) & ValuesLuxuryItems(y)))", "all x y z.((FruitlySpending(x) & GoOut(y) & QualityManufacturing(z) & LuxuriousItems(z)) -> Values(x,y,z))", "all x.(FruitlySpreadsMoneyEveryTimeOut(x) -> (ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)))", "all x.((FruitlySpreadsLootOfMoney(x) & EveryTimeOut(x)) -> ValuesQualityManufacturingAndLuxuryItems(x))", "all x.((Person(x) & SpendsLotOfMoney(x) & GoesOut(x)) -> ValuesQualityManufacturingAndLuxuryItems(x))"]}
{"id": "folio_train_1645", "nl": "If people value quality manufacturing and luxury items, then they enjoy shopping for materialistic items in their free time.", "fol": "all x.(ValuesLuxury(x) -> EnjoysShopping(x))", "prediction": ["all x.(ValuesQualityManufacturingAndLuxuryItems(x) -> EnjoysShoppingForMaterialisticItems(x))", "all x.((Person(x) & ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)) -> EnjoysShoppingForMaterialisticItems(x))", "all x y.((Person(x) & ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)) -> EnjoysShoppingForMaterialisticItems(x))", "all x y.((Person(x) & ValuesQualityManufacturingAndLuxuryItems(x)) -> EnjoysShoppingForMaterialisticItems(x))", "all x.((People(x) & ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)) -> EnjoysShoppingForMaterialisticItems(x))", "all x.(ValuesQualityManufacturingAndLuxuryItems(x) -> EnjoysShoppingForMaterialisticItems(x))", "all x.(ValueQualityManufacturingAndLuxuryItems(x) -> EnjoyShoppingForMaterialisticItems(x))", "all x y.((People(x) & ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)) -> EnjoysShoppingForMaterialisticItems(y))", "all x.((Person(x) & ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)) -> EnjoysShoppingForMaterialisticItems(x))", "all x y z.((Person(x) & QualityManufacturing(y) & LuxuriousItems(z) & Values(x,y)) -> EnjoysShoppingForMaterialisticItems(x))", "all x.(ValuesQualityManufacturingAndLuxuryItems(x) -> EnjoysShoppingForMaterialisticItemsInFreeTime(x))", "all x y.((Person(x) & ValuesQualityManufacturingAndLuxuryItems(x) & ValuesQualityManufacturingAndItems(x)) -> EnjoysShoppingForMaterialisticItems(x))", "exists x.(Person(x) & ValuesQualityManufacturing(x) & ValuesLuxuryItems(x) & EnjoysShoppingForMaterialisticItems(x))", "all x y.((Person(x) & ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)) -> EnjoysShoppingForMaterialisticItems(y))", "all x.((Person(x) & ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)) -> EnjoysShoppingForMaterialisticItemsInFreeTime(x))", "all x.(ValuesQualityManufacturingAndLuxuryItems(x) -> EnjoysShoppingInFreeTime(x))"]}
{"id": "folio_train_1646", "nl": "If Jess is not miserly and needs to save a large portion of their income, then Jess does not value quality manufacturing and luxury items.", "fol": "(-IsMiserly(Jess) -> -ValuesLuxury(Jess))", "prediction": ["all x.((Jess(x) & -Miserly(x) & NeedsToSaveLargePartOfIncome(x)) -> -ValuesQualityManufacturingAndLuxuryItems(x))", "(-MiserlyAndNeedsToSaveLargePartOfIncome(Jess)) -> -ValuesQualityManufacturingAndLuxuryItems(Jess))", "all x y.((Jess(x) & -Miserly(x) & NeedsToSaveLargePartOfIncome(x)) -> -ValuesQualityManufacturingAndLuxuryItems(y))", "all x.((Jess(x) & -Miserly(x) & NeedsToSaveLargePartOfIncome(x)) -> -ValuesQualityManufacturing(x) & -ValuesLuxuryItems(x))", "(all x.((Jess(x) & -Miserly(x) & NeedsToSaveLargePartOfIncome(x)) -> -ValuesQualityManufacturingAndLuxuryItems(x)))", "(-MiserlyAndNeedsToSaveLargeParticipationOfIncome(Jess)) -> -ValuesQualityManufacturingAndLuxuryItems(Jess))", "all x.((Jess(x) & -Miserly(x) & NeedsToSaveLargePurchase(x)) -> -ValuesQualityManufacturingAndLuxuryItems(x))", "all x.((Jess(x) & -Miserly(x) & NeedsLargePartOfIncome(x)) -> -ValuesQualityManufacturingAndLuxuryItems(x))", "all x.((Jesse(x) & -Miserly(x) & NeedsToSaveLargePartOfIncome(x)) -> -ValuesQualityManufacturingAndLuxuryItems(x))", "all x.((Jess(x) & -Miserly(x) & NeedsSavingLargeParticipation(x)) -> -ValuesQualityManufacturing(x) & -ValuesLuxuryItems(x))", "all x y.((Jess(x) & -Miserly(x) & NeedsSavingLargeParticipation(x)) -> (-ValuesQualityManufacturing(x) & -ValuesLuxuryItems(y)))", "all x y.((Jess(x) & -Miserly(x) & NeedsToSaveLargePartOfIncome(x)) -> -ValuesQualityManufacturingAndLuxuryItems(y))", "all x.((Jess(x) & -Miserly(x) & NeedsToSaveLargeParticipationOfIncome(x)) -> -ValuesQualityManufacturingAndLuxuryItems(x))", "all x.((Jesse(x) & -Miserly(x) & NeedsToSaveLargePartOfIncome(x)) -> (-ValuesQualityManufacturing(x) & -ValuesLuxuryItems(x)))", "all x.((Jess(x) & -Miserly(x) & SaveLargePartOfIncome(x)) -> -ValuesQualityManufacturingAndLuxuryItems(x))", "all x.((Jess(x) & -Miserly(x) & NeedsLargePurchaseOfIncome(x)) -> -ValuesQualityManufacturing(x) & -ValuesLuxuryItems(x))"]}
{"id": "folio_train_1647", "nl": "If Jess either values quality manufacturing and luxury items or, if he does not, then he is miserly and needs to save a large portion of his income, then Jess frivolously spends a lot of money every time he goes out.", "fol": "(((ValuesLuxury(Jess) & -IsMiserly(Jess)) | (-ValuesLuxury(Jess) & IsMiserly(Jess))) -> ValuesLuxury(Jess))", "prediction": ["all x.((Jess(x) & ValuesQualityManufacturingAndLuxuryItems(x)) | (-ValuesQualityManufacturingAndLuxuryItems(x)))) -> (Miserly(x) & NeedsToSaveLargePartOfIncome(x)))", "all x.((Jess(x) & ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)) | (-ValuesQualityManufacturing(x) & ValuesLuxuryItems(x))))", "(all x.((Jess(x) & ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)) | (-ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)))) -> (Miserly(x) & NeedsToSaveLargePartOfIncome(x)))", "(all x.(ValuesQualityManufacturingAndLuxuryItems(x) | (-ValuesQualityManufacturingAndLuxuryItems(x)))) -> MiserlyAndNeedsToSaveLargePartOfIncome(x)) & all y.(FrivolousSpending(y) -> SpendsLotOfMoney(y)))", "all x.((Jess(x) & (ValuesQualityManufacturing(x) | ValuesLuxuryItems(x))) | (-ValuesQualityManufacturing(x) & NeedsLargeParticipation(x))))", "all x.(ValuesQualityManufacturingAndLuxuryItems(x) | (-ValuesQualityManufacturingAndLuxuryItems(x)))) -> (Miserly(x) & NeedsToSaveLargePartOfIncome(x)))", "((Jess) & ValuesQualityManufacturing(Jess) & ValuesLuxuryItems(Jess)) | (-ValuesQualityManufacturing(Jess) & ValuesLuxuryItems(Jess))) | (-ValuesQualityManufacturing(Jess) & NeedsLargeParticipation(Jess))))", "all x y.((Jess(x) & ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)) | (-ValuesQualityManufacturing(x) & ValuesLuxuryItems(x))))", "((Jess) | ValuesQualityManufacturing(Jess) & ValuesLuxuryItems(Jess)) | (-ValuesQualityManufacturing(Jess) & ValuesLuxuryItems(Jess))) | (-ValuesQualityManufacturing(Jess) & NeedsSavingLargeParticipation(Jess))))", "all x y.((Jess(x) & QualityManufacturing(x) & LuxuriousItems(x)) | (-Values(x,y) & Miserly(x) & NeedsToSaveLargePartOfIncome(x))))", "all x y.((Jess(x) & ValuesQualityManufacturingAndLuxuryItems(x)) | (-ValuesQualityManufacturingAndLuxuryItems(x) & Miserly(x) & NeedsToSaveLargePartOfIncome(x))) -> FrivolousSpending(x))", "all x.((Jess(x) & ValuesQualityManufacturingAndLuxuryItems(x)) | (-ValuesQualityManufacturingAndLuxuryItems(x)))) -> (Miserly(x) & NeedsToSaveLargePartOfIncome(x)))", "all x.((Jess(x) & ValuesQualityMaking(x) & ValuesLuxuryItems(x)) | (-ValuesQualityMaking(x) & NeedsSavingLargePartOfIncome(x))))", "all x.((Jess(x) & (ValuesQualityManufacturing(x) | ValuesLuxuryItems(x))) | (-ValuesQualityManufacturing(x) & ValuesLuxuryItems(x))))", "all x.(ValuesQualityManufacturingAndLuxuryItems(x) | (-ValuesQualityManufacturingAndLuxuryItems(x) & Miserly(x) & NeedsToSaveLargePartOfIncome(x))) -> FrivolousSpending(x))", "all x.((Jess(x) & ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)) | (-ValuesQualityManufacturing(x) & ValuesLuxuryItems(x))))"]}
{"id": "folio_train_1648", "nl": "Jess frivolously spends a lot of money every time they go out.", "fol": "SpendsFrivolously(Jess)", "prediction": ["all x.((Jess(x) & GoOut(x)) -> SpendsLotOfMoney(x))", "all x.((Jess(x) & GoesOut(x)) -> SpendsLotOfMoney(x))", "all x.(Jess(x) -> SpendsLotOfMoney(x))", "all x y.((Jess(x) & GoOut(y)) -> SpendsLittleMoney(x,y))", "all x y.((Jess(x) & Out(y)) -> SpendsLotOfMoney(x,y))", "(FruivolouslySpoilsMore(Jess,Out) & -FruitlyGoesOut(Jess,Out))", "(FruitlySpoils(Jess,Money) & EveryTimeOut(Jess,Money))", "(FruivolousFraudySpoises(Jess,Fruit) & EveryTimeOut(Jess,Fruit))", "all x.((Jess(x) & SpendsMore(x,y)) -> Frivolous(x))", "all x y z.((Jess(x) & Money(y) & Out(z)) -> SpendsFruitly(x,y,z))", "all x.(FruitlySpoils(x,y) -> Jess(x))", "all x.(Jess(x) -> SpendsMoreFruitously(x))", "all x y.((Jess(x) & GoOut(y)) -> SpendsMore(x,y))", "all x y.((Jess(x) & Out(y)) -> SpendsLotOfMoney(x,y))", "all x.((Jess(x) & GoOut(x)) -> SpendsLotOfMoney(x))", "all x.(Jess(x) -> SpendsLotOfMoney(x))"]}
{"id": "folio_train_1649", "nl": "Jess either enjoys shopping for materialistic items in his free time or, if he does not, then he goes to the spa at least once a week.", "fol": "(EnjoysShopping(Jess) | (-EnjoysShopping(Jess) -> GoesToSpaWeekly(Jess)))", "prediction": ["all x.((Jess(x) & (EnjoysShoppingInFreeTime(x) | -EnjoysShoppingInFreeTime(x))) -> GoesToSpa(x))", "(all x.((Jess(x) & MaterialisticItems(x)) -> EnjoysShoppingInFreeTime(x)) | (-EnjoysShoppingInFreeTime(x) & Spa(x))))", "all x.((Jess(x) & (EnjoysShoppingForMaterialisticItems(x) | (-EnjoysShopping(x) & Spa(x)))) -> GoesTo(x)))", "all x y.((Jess(x) & MaterialisticItems(y)) -> (EnjoysShoppingInFreeTime(x,y) | (-EnjoysShoppingInFreeTime(x,y)))))", "((EnjoysShoppingInFreeTime(Jess) & -EnjoysShoppingInFreeTime(Jess)) | (-EnjoysShoppingInFreeTime(Jess) & GoesToSpa(Jess))))", "all x.((Jess(x) & (EnjoysShoppingMaterialisticItems(x) | (-EnjoysShoppingMaterialisticItems(x) & Spa(x)))) -> GoesTo(x,y))", "all x.((Jesse(x) & (EnjoysShoppingInFreeTime(x) | -EnjoysShoppingInFreeTime(x))) -> GoesToSpa(x))", "((Jess) & EnjoysShoppingInFreeTime(Jess)) | (-EnjoysShoppingInFreeTime(Jess) & GoesToSpa(Jess))))", "(all x.((Jess(x) & MaterialisticItems(x)) -> EnjoysShoppingInFreeTime(x)) | (-EnjoysShoppingInFreeTime(x) & Spa(x))))", "(all x.((Jess(x) & EnjoysShoppingInFreeTime(x)) | (-EnjoysShoppingInFreeTime(x) & Spa(x))))", "((Jess) | (-EnjoysShoppingInFreeTime(Jess) & Spa(Jess))) | (-EnjoysShoppingInFreeTime(Jess) & Spa(Jess))))", "all x y.((Jess(x) & MaterialisticItems(y)) -> (EnjoysShoppingInFreeTime(x,y) | (-EnjoysShoppingInFreeTime(x,y) & Spa(x))))", "all x.((Jess(x) & (EnjoysShoppingInFreeTime(x) | (-EnjoysShoppingInFreeTime(x)))) -> GoesToSpa(x)))", "all x y.((Jess(x) & FreeTime(y)) -> (EnjoysShopping(x,y) | (-EnjoysShopping(x,y) & Spa(x,y))))", "all x.((Jess(x) & (EnjoysShoppingForMaterialisticItems(x) | -EnjoysShoppingInFreeTime(x))) -> GoesToSpa(x))", "(all x.((Jess(x) & MaterialisticItems(x)) -> Enjoys(x)) | (-Enjoys(x) & Spa(x))))"]}
{"id": "folio_train_1650", "nl": "If Jess either enjoys shopping for materialistic items in his free time or, if he does not, then he goes to the spa at least once a week, then Jess neither values quality manufacturing and luxury items nor goes to the spa at least once a week.", "fol": "((EnjoysShopping(Jess) | (-EnjoysShopping(Jess) -> GoesToSpaWeekly(Jess))) -> (-ValuesLuxury(Jess) & -GoesToSpaWeekly(Jess)))", "prediction": ["all x.((Jess(x) & (EnjoysShoppingMaterialisticItems(x) | -EnjoysShoppingMaterialisticItems(x))) -> (-ValuesQualityManufacturing(x) & -ValuesLuxuryItems(x)))", "all x y.((Jess(x) & Spa(y) & (EnjoysShoppingMaterialisticItemsInFreeTime(x) | -EnjoysShoppingMaterialisticItems(x))) -> (-ValuesQualityManufacturing(x) & -ValuesLuxuryItems(y) & -ValuesSpa(x)))", "all x.((Jess(x) & (EnjoysShoppingForMaterialisticItems(x) | -EnjoysShoppingInFreeTime(x))) -> (-ValuesQualityManufacturing(x) & -ValuesLuxuryItems(x)))", "(all x.((Jess(x) & EnjoysShoppingForMaterialisticItems(x)) | (-EnjoysShoppingInFreeTime(x) & GoesToSpa(x)))) -> (-ValuesQualityManufacturing(x) & -ValuesLuxuryItems(x) & -GoesToSpa(x))))", "all x.((Jess(x) & (EnjoysShoppingMaterialisticItemsInFreeTime(x) | -EnjoysShoppingMaterialisticItemsInFreeTime(x))) -> (-ValuesQualityManufacturing(x) & -ValuesLuxuryItems(x) & -ValuesSpa(x)))", "((JessEnjoysShoppingForMaterialisticItemsInFreeTime(Jess) | (-EnjoysShoppingForMaterialisticItemsInFreeTime(Jess))) & (-ValuesQualityManufacturing(Jess) & -ValuesLuxuryItems(Jess)) | (-ValuesQualityManufacturing(Jess) & -ValuesSpa(JessSpa(JessSpa(JessSpa))))", "all x y.((Jess(x) & Spa(y) & (EnjoysShoppingMaterialisticItems(x) | -EnjoysShoppingMaterialisticItems(x))) -> (-ValuesQualityManufacturing(x) & -ValuesLuxuryItems(y) & -ValuesSpa(x)))", "all x.((Jesse(x) & (EnjoysShoppingForMaterialisticItems(x) | -EnjoysShoppingInFreeTime(x))) -> (-ValuesQualityManufacturing(x) & -ValuesLuxuryItems(x) & -ValuesSpa(x)))", "((Jess) & (EnjoysShoppingMaterialisticItemsInFreeTime(Jess) | -EnjoysShoppingMaterialisticItemsInFreeTime(Jess))) -> (-ValuesQualityManufacturing(Jess) & -ValuesLuxuryItems(Jess)))", "(all x.((Jesse(x) & EnjoysShoppingForMaterialisticItems(x)) | (-Jesse(x) & GoesToSpa(x)))) -> (-ValuesQualityManufacturing(x) & -ValuesLuxuryItems(x)))", "(all x.((Jess(x) & EnjoysShopping(x)) | (-EnjoysShopping(x) & Spa(x)))) -> (-ValuesQualityManufacturing(x) & -ValuesLuxuryItems(x)))", "(all x.((Jess(x) & EnjoysShoppingForMaterialisticItems(x)) | (-EnjoysShoppingForMaterialisticItems(x) & GoesToSpa(x)))) -> (-ValuesQualityManufacturing(x) & -ValuesLuxuryItems(x)))", "all x.((Jess(x) & (EnjoysShoppingForMaterialisticItemsInFreeTime(x) | -EnjoysShoppingForMaterialisticItems(x))) -> (-ValuesQualityManufacturing(x) & -ValuesLuxuryItems(x) & -ValuesSpa(x)))", "all x.((Jess(x) & (EnjoysShoppingForMaterialisticItems(x) | -EnjoysShoppingInFreeTime(x))) -> (-ValuesQualityManufacturing(x) & -ValuesLuxuryItems(x) & -ValuesSpa(x)))", "all x y.((Jess(x) & Spa(y) & (EnjoysShoppingForMaterialisticItems(x) | -EnjoysShoppingInFreeTime(x))) -> (-ValuesQualityManufacturing(x) & -ValuesLuxuryItems(y) & -ValuesSpa(y)))", "all x.((Jesse(x) & (EnjoysShoppingForMaterialisticItems(x) | -EnjoysShopping(x))) -> (-ValuesQualityManufacturing(x) & -ValuesLuxuryItems(x)))"]}
{"id": "folio_train_1651", "nl": "The indie pop band Phoenix has released 6 albums. ", "fol": "ReleasedAlbums(Phoenix,L6)", "prediction": ["all x.(IndiePopBand(x) -> Phoenix(x))", "(IndiePopBand(Phoenix) & ReleasedSixAlbums(Phoenix))", "all x y.((IndiePopBand(x) & Phoenix(y)) -> ReleasedSixAlbums(x,y))", "the indiepopband Phoenix has released 6 albums.", "all x.(IndiePopBand(x) -> PhoenixReleasedSixAlbums(x))", "(IndiePopBandPhoenix(Phoenix) & ReleasedSixAlbums(Phoenix))", "IndiePopBandPhoenix.com has releasedSixAlbums(x)", "(IndiePopBand(Pheonix) & ReleasedSixAlbums(Pheonix))", "-IndiePopBand(Phoenix) & ReleasedSixAlbums(Phoenix))", "IndiePopBandPheonix(x) & ReleasedSixAlbums(x))", "(IndiePopBand(Phoenix) & ReleasedSixAlbums(Phoenix))", "all x y.((IndiePopBand(x) & Phoenix(y)) -> ReleasedSixAlbums(x,y))", "the indiepopband Phoenix has released 6 albums.", "all x.(IndiePopBand(x) -> Phoenix(x))", "the indiepopband Phoenix released 6 albums.", "all x.(IndiePopBand(x) -> PhoenixReleasedSixAlbums(x))"]}
{"id": "folio_train_1652", "nl": "Phoenix's album \"Wolfgang Amadeus Phoenix\" sold over 500,000 copies. ", "fol": "(IsAlbum(Wolfgangamadeusphoenix) & IsAlbumByBand(Wolfgangamadeusphoenix,Phoenix) & SoldCopiesOver(Wolfgangamadeusphoenix,L500000))", "prediction": ["All x.((Phoenix(x) & Album(x,WolfgangAmadeusPhoenix)) -> SoldOver500,000Copies(x))", "\"WolfgangAmadeusPheonix\" album sold over 500,000 copies.", "(SoldOver500,000Copies(Phoenix,Phoenix) & Album(Phoenix,WolfgangAmadeus))", "All x.(Phoenix(x) -> (SoldOver500,000Copies(x) & WolfgangAmadeusPhoenix(x)))", "(SolvedOver500,000Copies(Phoenix,Phoenix) & Album(Phoenix,WolfgangAmadeus))", "\"WolfgangAmadeusPhoenix\" album sold over 500,000 copies.", "-SoldOver500,000Copies(PepsiahsAlbum(Pepsia) & \"WolfgangAmadeusPepsia\" & SoldOver500,000Copies(Pepsiahs)\"", "All x y.((Pheonix(x) & Album(y)) -> SoldOver500,000Copies(x,y))", "(SoldOver50000Copies(Phoenix,Phoenix) & Album(Phoenix,WolfgangAmadeus))", "all x.((Phoenix(x) & Album(x,WolfgangAmadeusPhoenix)) -> SoldOver500,000Copies(x))", "(SoldOver500,000Copies(Phoenix,Phoenix) & Album(Phoenix,Wolfgang))", "(SoldOver500,000Copies(Phoenix,WolfgangAmadeusPhoenix))", "\"WolfgangAmadeusPheonix\" album sold over 500,000 copies.", "\"WolfgangAmadeusPhoenix\" album sold over 500,000 copies.", "\"WolfgangAmadeusPheonix\" soldOver500,000Copies(Pheonix)", "\"WolfgangAmadeusPhenomenon\" album soldOver500,000Copies(Phenomenon)"]}
{"id": "folio_train_1653", "nl": "A certified gold album or single is one which sold over half a million copies. ", "fol": "all x.(((IsAlbum(x) | IsSingle(x)) & SoldCopiesOver(x,L500000)) -> IsCertifiedGold(x))", "prediction": ["all x.((GoldAlbum(x) | CertifiedGoldSingle(x)) -> SoldOverHalfMillionCopies(x))", "all x.((GoldAlbum(x) | CertifiedGoldSingle(x)) -> SoldOverHalfMillionCopies(x))", "all x y.((GoldAlbum(x) | Single(x)) -> SoldOverHalfMillionCopies(x))", "all x.((GoldAlbum(x) | GoldSingle(x)) -> SoldOverHalfMillionCopies(x))", "all x.((CertifiedGoldAlbum(x) | CertifiedGoldSingle(x)) -> SoldOverHalfMillionCopies(x))", "all x.((GoldAlbum(x) | Single(x)) -> SoldOverHalfMillionCopies(x))", "all x.((Album(x) | Single(x)) -> SoldOverHalfMillionCopies(x))", "all x.((GoldAlbumOrSingle(x) & SoldOverHalfMillionCopies(x)) -> Certified(x))", "all x.(CertifiedGoldAlbumOrSingle(x) -> SoldOverHalfMillionCopies(x))", "all x y.((GoldAlbum(x) & (GoldSingle(y) & SoldOverHalfMillionCopies(x,y))) -> Certified(x))", "all x.((GoldAlbum(x) | CertifiedGoldSingle(x)) -> SoldOverHalfMillionCopies(x))", "all x y.((GoldAlbum(x) | GoldSingle(x)) -> SoldOverHalfMillionCopies(x,y))", "all x.(GoldAlbumOrSingle(x) -> SoldOverHalfMillionCopies(x))", "all x y.((GoldAlbum(x) | Single(x)) -> SoldOverHalfMillionCopies(x))", "exists x.(GoldAlbum(x) | CertifiedGoldSingle(x)) & SoldOverHalfMillionCopies(x))", "all x.((GoldAlbum(x) | CertifiedGoldSingle(x)) -> SoldOverHalfMillionCopies(x))"]}
{"id": "folio_train_1654", "nl": "\"1901\" is a single from Phoenix's album \"Wolfgang Amadeus Phoenix.\"", "fol": "(IsSingle(L1901) & IsFromAlbum(L1901,Wolfgangamadeusphoenix) & IsByBand(L1901,Phoenix))", "prediction": ["\"1901\" is a single from Phoenix's album \"WolfgangAmadeusPhoenix\"\"", "all x.((Single(x) & FromPhoenixAlbum(x) & WolfgangAmadeusPhoenix(x)) -> \"1901\"\"", "all x y.((Single(x) & Album(y) & WolfgangAmadeusPhoenix(x)) -> \"1901\"\"", "all x.((Single(x) & FromPheonix(x) & \"WolfgangAmadeusPheonix\") -> \"1901\"\"", "(SingleFromPhoenix(1901) & FromPhoenixAlbum(1901))", "\"1901\" -> (SingleFromPhoenix(x) & FromPhoenixAlbum(x)))", "\"1901\" is a single from Phoenix's album \"WolfgangAmadeusPheonix\"\"", "(SingleFrom(1901 & FromPhoenixAlbum(1901))", "all x.((Single(x) & From(x,WolfgangAmadeusPhoenix)) -> \"1901\"\"", "\"1901\" - SingleFromPhoenix'salbum \"WolfgangAmadeusPhoenix\"\"", "\"1901\" (SingleFromPhoenix(x) & FromPhoenixAlbum(x))", "(SingleFromPhoenix(1901) & FromPhoenix(1901))", "\"1901\" is a single from Phoenix's album \"WolfgangAmadeusPhoenix\"\"", "\"1901\" is a single from \"WolfgangAmadeusPheonix\"\"", "(SingleFromPhoenix(1901) & FromPhoenixAlbum(1901))", "\"1901\" is a single from Phoenix's album \"WolfgangAmadeusPhenomenon\"\""]}
{"id": "folio_train_1655", "nl": "Over 400,000 copies of \"1901\" have been sold. ", "fol": "SoldCopiesOver(L1901,L400000)", "prediction": ["all x.((Copies(x,1901)) -> Sold(x))", "(SoldOver400,000Copies(1901))", "\"1901\" - sold for over 400000 copies.", "all x.((Book(x) & \"1901\") -> Sold(x))", "-Over400,000 copies of \"1901\" sold.", "\u00a34000(x) & \"1901\" (Sold(x) & Sold(x)))", "\"1901\" - Over 400000 copies sold.", "-(SoldOver400,000Copies(x,1901)))", "(Over400,000Copies(1901) sold.", "\"1901\" has sold over 400,000 copies.", "all x.((Copies(x,1901)) -> Sold(x,400000))", "Over 400000 copies of \"1901\" sold.", "(Over400,000 copies of \"1901\" sold)", "(SoldOver400,000Copies(1901))", "\"1901\" - sold for over 400000 copies.", "\"1901\" sold for over 400000 copies."]}
{"id": "folio_train_1656", "nl": "The album \"Wolfgang Amadeus Phoenix\" is a certified gold album.", "fol": "IsCertifiedGold(Wolfgangamadeusphoenix)", "prediction": ["all x.((Album(x) & WolfgangAmadeusPhoenix(x)) -> CertifiedGoldAlbum(x))", "\"WolfgangAmadeusPheonix\" album(x) & CertifiedGoldAlbum(x))", "all x.((Album(x) & WolfgangAmadeusPheonix(x)) -> CertifiedGoldAlbum(x))", "(Gold(album) & \"WolfgangAmadeusPhoenix\" & Certified(album,gold))", "\"WolfgangAmadeusPhoenix\" album(x) & CertifiedGoldAlbum(x))", "(GoldAlbum(album) & WolfgangAmadeusPhoenix(album))", "all x.((Album(x) & WolfgangAmadeusPhoenix(x)) -> CertifiedGoldAlbum(x))", "(GoldAlbum(album) & \"WolfgangAmadeusPheonix\"))", "all x.((Album(x) & WolfgangAmadeusPhoenix(x)) -> CertifiedGoldAlbum(x))", "All x.(WolfgangAmadeusPheonix(x) -> CertifiedGoldAlbum(x))", "all x y.((Album(x) & WolfgangAmadeusPheonix(y)) -> CertifiedGoldAlbum(x,y))", "All x.((Album(x) & WolfgangAmadeusPheonix(x)) -> CertifiedGoldAlbum(x))", "\"WolfgangAmadeusPheonix\" album(x) & CertifiedGoldAlbum(x))", "all x y.((Album(x) & WolfgangAmadeusPhoenix(y)) -> CertifiedGoldAlbum(x,y))", "All x.((Album(x) & WolfgangAmadeusPhoenix(x)) -> CertifiedGoldAlbum(x))", "all x.((Album(x) & WolfgangAmadeusPhoenix(x)) -> CertifiedGoldAlbum(x))"]}
{"id": "folio_train_1657", "nl": "The single \"1901\" is a certified gold single.", "fol": "IsCertifiedGold(L1901)", "prediction": ["all x.((Single(x) & \"1901\" & CertifiedGoldSingle(x)) -> Single(x))", "\"1901\" is a certifiedGoldSingle(x))", "all x.((Single(x) & -CertifiedGoldSingle(x)) -> \"1901\"\"", "(GoldSingle(s) & \"1901\" & Certified(s))", "all x.((Single(x) & \"1901\") -> CertifiedGoldSingle(x))", "all x y.((Single(x) & Single(y) & \"1901\" & CertifiedGold(x)) -> CertifiedGold(y))", "\"1901\" is certifiedGoldSingle(x)", "\"1901\" is a certifiedGoldSingle(x))", "all x.((Single(x) & -1901(x)) -> CertifiedGoldSingle(x))", "(CertifiedGoldSingle(single) & \"1901\" & CertifiedGoldSingle(s))", "(GoldSingle(s) & -CertifiedGoldSingle(s))", "all x.((Single(x) & \"1901\" & CertifiedGoldSingle(x)) -> CertifiedGoldSingle(x))", "(GoldSingle(s) & Certified(s))", "all x.((Single(x,1901) & CertifiedGoldSingle(x)) -> Single(x))", "all x.((Single(x) & \"1901\")) -> CertifiedGoldSingle(x))", "all x.((Single(x) & \"1901\" & CertifiedGoldSingle(x)) -> -GoldSingle(x))"]}
{"id": "folio_train_1658", "nl": "Peter Parker is a either a superhero or a civilian.", "fol": "((IsSuperhero(Peter) & -IsCivilian(Peter)) | (-IsSuperhero(Peter) & IsCivilian(Peter)))", "prediction": ["all x.(PeterParker(x) -> (Superhero(x) | Civilian(x)))", "all x.(PeterPotter(x) -> (Superhero(x) | Civilian(x)))", "all x.(Potter(x) -> (Superhero(x) | Civilian(x)))", "((Superhero(PeterPenny) | Civilian(Penny)))", "all x.(Parker(x) -> (Superhero(x) | Civilian(x)))", "(Superhero(PeterPenny) | Civilian(Penny))", "all x.((PeterParker(x) & (Superhero(x) | Civilian(x))) -> (Captain(x) | Civilian(x)))", "(Superhero(Pitt Parker) | Civilian(Pitt Parker))", "all x.(PeterParker(x) -> (Superhero(x) | Civilian(x)))", "all x y.((PeterParker(x) & Superhero(y)) | Civilian(y))", "(Captain(PeterPotter) | Civilian(Potter))", "all x.(Pittsburgh(x) -> (Superhero(x) | Civilian(x)))", "all x.(Parker(x) -> (Superhero(x) | Civilian(x)))", "(Superhero(PeterPenny) | Civilian(PeterPenny))", "exists x.(Parker(x) & (Superhero(x) | Civilian(x)))", "exists x.(Parker(x) & (Superhero(x) | Civilian(x)))"]}
{"id": "folio_train_1659", "nl": "The Hulk is a destroyer.", "fol": "IsDestroyer(Hulk)", "prediction": ["all x.(Hulk(x) -> Disposer(x))", "(Disrupter(Hulk) -> HasHulk(Hulk))", "all x.(Hulk(x) -> Disruptor(x))", "The Hulk is a Disruptor.", "all x y.((Hulk(x) & Disruptor(y)) -> Killer(x))", "(Disruptor(Hulk) & Killer(Hulk))", "all x.(Hulk(x) -> Disposer(x))", "(Disrupter(Hulk) -> HasHulk(Hulk))", "(Destroyer(hulk) & Killer(hulk))", "all x.(Hulk(x) -> Disruptor(x))", "All x.(Hull(x) -> Disposer(x))", "all x.(Hulk(x) -> Dissipator(x))", "All x.(Hulk(x) -> Disposer(x))", "All x.(Hulk(x) -> Destroyer(x))", "all x.(Hulk(x) -> Disruptor(x))", "exists x.(Hulk(x) & Destroyer(x))"]}
{"id": "folio_train_1660", "nl": "The Hulk wakes up when he is angry.", "fol": "(IsAngry(Hulk) -> WakesUp(Hulk))", "prediction": ["all x.((Hulk(x) & Anxious(x)) -> WakesUp(x))", "all x.((Hulk(x) & Anger(x)) -> WakesUp(x))", "all x y.((Hulk(x) & Anger(y)) -> WakesUp(x,y))", "((Hulk(h) & Anger(h)) -> WakesUp(h))", "All x.(Hulk(x) -> WakesUpWhenAngry(x))", "All x.((Hulk(x) & Anxious(x)) -> WakesUp(x))", "all x.((Hulk(x) & Agreed(x)) -> WakesUp(x))", "(Angerous(Hulk) -> WakesUp(Hulk))", "(all x.((Hulk(x) & Anxious(x)) -> WakesUp(x)))", "all x y.((Hulk(x) & Anger(y)) -> WakesUp(x,y))", "(All x.((Hulk(x) & Anger(x)) -> WakesUp(x)))", "All x.((Hulk(x) & Anger(x)) -> WakesUp(x))", "All x.(Hulk(x) -> WakesUpWhenAngry(x))", "all x y.((Hulk(x) & Anger(y)) -> WakesUp(x,y))", "All x.(Hulk(x) -> WakesUpWhenAngry(x))", "all x y.((Hulk(x) & Anger(y)) -> WakesUp(x,y))"]}
{"id": "folio_train_1661", "nl": "If the Hulk wakes up, then he will break a bridge.", "fol": "(WakesUp(Hulk) -> BreaksBridge(Hulk))", "prediction": ["all x.((Hulk(x) & WakesUp(x)) -> BreaksBridge(x))", "all x y.((Hulk(x) & WakesUp(x)) -> BreaksBridge(x,y))", "all x.((Hulk(x) & WakesUp(x)) -> BreaksBridge(x))", "((HulkWakeUp(Hulk) & BreakBridge(Hulk)) -> WakesUp(Hulk))", "(All x.((Hulk(x) & WakesUp(x)) -> BreaksBridge(x)))", "all x.((Hulk(x) & WakesUp(x)) -> BreakBridge(x))", "all x y.((Hulk(x) & WakesUp(x)) -> BreaksBridge(x))", "exists x.(Hulk(x) & WakesUp(x) & BreaksBridge(x))", "all x.(Hulk(x) -> WakesUp(x))", "all x y.((Hulk(x) & WakesUp(x)) -> BreakBridge(x,y))", "all x.((Hulk(x) & WakesUp(x)) -> BreaksBridge(x))", "all x.((Hulk(x) & WakesUp(x)) -> BreakBridge(x))", "all x y.((Hulk(x) & WakesUp(x)) -> BreaksBridge(x,y))", "all x.((Hulk(x) & WakesUp(x)) -> BreaksBridge(x))", "All x y.((Hulk(x) & WakesUp(x)) -> BreaksBridge(y))", "all x.((Hulk(x) & WakesUp(x)) -> BreakBridge(x))"]}
{"id": "folio_train_1662", "nl": "Thor is a god.", "fol": "IsGod(Thor)", "prediction": ["all x.(Thor(x) -> God(x))", "(God(Thor) & God(Thor))", "Thor is god(x)", "all x.(Thor(x) -> God(x))", "Thor is god(x)", "all x.(Tor(x) -> God(x))", "(God(Thor) & Thor(Thor))", "Thor (God)", "Thor is god(x)", "(God(Thor) & God(Thor))", "Thor is God(Thor)", "all x.(Thor(x) -> God(x))", "all x.(Tor(x) -> God(x))", "all x.(Thor(x) -> God(x))", "all x.(Tor(x) -> God(x))", "exists x.(Thor(x) & God(x))"]}
{"id": "folio_train_1663", "nl": "Thor will break a bridge when he is happy.", "fol": "(IsHappy(Thor) -> BreaksBridge(Thor))", "prediction": ["all x.((Thor(x) & Happy(x)) -> BreaksBridge(x))", "all x y.((Thor(x) & Bridge(y) & Happy(x)) -> Breaks(x,y))", "all x.((Thor(x) & Happy(x)) -> BreakBridge(x))", "all x y.((Tor(x) & Bridge(y) & Happy(x)) -> Breaks(x,y))", "((Thor(Thor) & Happy(Thor)) -> BreaksBridge(Thor))", "(Happy(Thor) & Bridge(Thor))", "all x y.((Torn(x) & Bridge(y) & Happy(x)) -> Breaks(x,y))", "all x.((Torn(x) & Happy(x)) -> BreaksBridge(x))", "all x y z.((Torn(x) & Bridge(y) & Happy(z)) -> Breaks(x,y,z))", "all x.((Thor(x) & Happy(x)) -> BreaksBridge(x))", "all x y.((Thor(x) & Bridge(y) & Happy(x)) -> Breaks(x,y))", "exists x.(Bridge(x) & Thor(x) & Happy(x))", "(all x.((Thor(x) & Happy(x)) -> BreakBridge(x)))", "all x.((Toro(x) & Happy(x)) -> BreaksBridge(x))", "all x.((Thor(x) & Happy(x)) -> BreakBridge(x))", "all x y.((Thor(x) & Bridge(y) & Happy(x)) -> Breaks(x,y))"]}
{"id": "folio_train_1664", "nl": "A god is not a destroyer and a destroyer is not a god.", "fol": "all x.(IsGod(x) <-> -IsDestroyer(x))", "prediction": ["all x y.((God(x) & Disruptor(y)) -> (-Destroyer(x) & -God(y)))", "(all x.(God(x) -> -Destroyer(x)) & all y.(Destroyer(y) -> -Destroyer(y)))", "all x.(God(x) -> (-Destroyer(x) & -Destroyer(x)))", "all x y.((God(x) & Disposer(y)) -> (-Disruptor(x) & -Disruptor(y)))", "(all x.(God(x) -> -Destroyer(x)) & all y.(Destroyer(y) -> -Destroyer(y)))", "(all x.(God(x) -> -Disruptor(x)) & all y.(Disruptor(y) -> -Disruptor(y)))", "all x.(God(x) -> (-Disrupter(x) & -Disrupter(x)))", "all x y.((God(x) & Disruptor(y)) -> (-Destroyer(x) & -Destroyer(y)))", "(all x y.(God(x) -> -Destroyer(x)) & (Destroyer(y) -> -Destroyer(y)))", "(all x.(God(x) -> -Destroyer(x)) & all y.(Destroyer(y) -> -Destroyer(y)))", "all x.(God(x) -> (-Destroyer(x) & -Destroyer(x)))", "exists x.(God(x) & -Destroyer(x) & exists y.(Destroyer(y) & -Destroyer(y)))", "all x y.(God(x) & Disruptor(y) & -Disruptor(x))", "all x y.((God(x) & Destroyer(y)) -> (-Destroyer(x) & -Destroyer(y)))", "exists x.(God(x) & -Disruptor(x) & -Disruptor(x))", "(all x.(God(x) -> -Destroyer(x)) & all y.(Destroyer(y) -> -Destroyer(y)))"]}
{"id": "folio_train_1665", "nl": "Peter Parker wears a uniform when he is a superhero.", "fol": "(IsSuperhero(Peter) -> WearsUniform(Peter))", "prediction": ["all x.((Superhero(x) & WearsUniform(x)) -> WearsUniform(x))", "all x y.((PeterParker(x) & Superhero(y)) -> WearsUniform(x,y))", "all x.((Captain(x) & WearsUniform(x)) -> Superhero(x))", "all x.((Superhero(x) & WearsUniform(x)) -> PeterParker(x))", "(WearsUniformWhenSuperhero(PeterParker))", "all x.((PeterParker(x) & Superhero(x)) -> WearsUniform(x))", "all x y.((PeterParker(x) & Superhero(y)) -> WearsUniform(x,y))", "all x y.((Captain(x) & Superhero(y)) -> WearsUniform(x,y))", "all x.(Superhero(x) -> WearsUniform(x))", "all x y.((PeterPotter(x) & Superhero(y)) -> WearsUniform(x,y))", "all x.((Captain(x) & WearsUniform(x)) -> Superhero(x))", "all x.((Superhero(x) & WearsUniform(x)) -> PeterPotter(x))", "all x y.((Superhero(x) & PeterPotter(y)) -> WearsUniform(y,x))", "all x.((PeterParker(x) & Superhero(x)) -> WearsUniform(x))", "all x.(Superhero(x) -> WearsUniform(x))", "(all x.(Superhero(x) -> WearsUniform(x)))"]}
{"id": "folio_train_1666", "nl": "Peter Parker is not a civilian if and only if a destroyer is breaking a bridge.", "fol": "all x.(-IsCivilian(Peter) <-> (IsDestroyer(x) & BreaksBridge(x)))", "prediction": ["all x.((PeterPotter(x) & BreakingBridge(x)) -> -Civil(x))", "all x.((PeterParker(x) & BreakingBridge(x)) -> -Civil(x))", "all x.((Destroyer(x) & BreakingBridge(x)) -> -Civil(x))", "all x y.((PeterPotter(x) & Disruptor(y) & BreakingBridge(x,y)) -> -Civil(x))", "(-Civilian(PeterParker) -> (BreaksBridge(Peter Parker) & -BreaksBridge(PeterParker)))", "all x y.((PeterParker(x) & Disruptor(y) & BreakingBridge(x,y)) -> -Civil(x))", "all x.((PeterPotter(x) & BreakingBridge(x)) -> -Civil(x))", "all x.((PeterParker(x) & BreakingBridge(x)) -> -Civil(x))", "(-Civilian(PeterPenny) -> BreakingBridge(Penny)))", "all x y.((PeterPotter(x) & Destroyer(y) & BreakingBridge(y)) -> -Civil(x))", "all x y.((Destroyer(x) & Bridge(y) & Breaking(x,y)) -> -Civil(x))", "all x.((Destroyer(x) & BreakingBridge(x)) -> -Civil(x))", "exists x.(Civil(x) & -Civil(x) & BreaksBridge(x))", "(-Civilian(PeterParker) -> BreakingBridge(PeterParker))", "all x.(Civil(x) -> (PeterPotter(x) & BreaksBridge(x)))", "all x.((PeterPotter(x) & BreaksBridge(x)) -> -Civil(x))"]}
{"id": "folio_train_1667", "nl": "If Thor is happy, the Hulk is angry.", "fol": "(IsHappy(Thor) -> IsAngry(Hulk))", "prediction": ["all x.((Thor(x) & Happy(x)) -> Angerous(x))", "((Thor(Thor) & Happy(Thor)) -> Angerous(Hulk))", "all x.((Thor(x) & Happy(x)) -> Anger(x))", "all x y.((Thor(x) & Hulk(y)) -> Happy(x,y))", "all x.((Throat(x) & Happy(x)) -> Angerous(x))", "(Hulk(Thor) & Happy(Thor))", "all x.((Thor(x) & Happy(x)) -> Angerous(x))", "(all x.((Thor(x) & Happy(x)) -> Angerous(x))", "all x y.((Thor(x) & Hulk(y)) -> Happy(x,y))", "((Thor(Thor) & Happy(Thor)) -> Anger(Hulk))", "(HulkAngry(Thor) & ThorHappy(Thor))", "all x.((Thor(x) & Happy(x)) -> Anxious(x))", "All x.(HappyThroat(x) -> AngerousHulk(x))", "All x.(Hulk(x) -> (Happy(x) & Angerous(x)))", "all x.((Thor(x) & Happy(x)) -> Agreed(x))", "all x.((Tor(x) & Happy(x)) -> Anger(x))"]}
{"id": "folio_train_1668", "nl": "If the Hulk does not wake up, then Thor is not happy.", "fol": "(-WakesUp(Hulk) -> -IsHappy(Thor))", "prediction": ["all x.((Hulk(x) & -WakeUp(x)) -> Thor -Happy(x))", "(-WakeUp(Hulk) -> Thor-NotHappy(Hulk))", "all x.((Hulk(x) & -WakeUp(x)) -> Thor-NotHappy(x))", "-(HulkWakeUp(Hulk) & -Happy(Hulk))", "(-WakeUp(Hulk) -> ThorNotHappy(Hulk))", "all x y.((Hulk(x) & Hulk(y) & WakesUp(x,y)) -> Thor(x))", "all x.((Hulk(x) & -WakeUp(x)) -> Thor -Happy(x))", "all x y.((Hulk(x) & -WakeUp(x)) -> Thor -Happy(y))", "(all x.((Hulk(x) & -WakeUp(x)) -> ThorNotHappy(x))", "(-WakeUp(Hulk) -> Thor(Hulk))", "all x.((Hulk(x) & -WakeUp(x)) -> -Happy(x))", "All x.(Hulk(x) -> -WakeUp(x))", "all x.((Hulk(x) & -WeepsUp(x)) -> Thor -Happy(x))", "all x.((Hulk(x) & -WearsUp(x)) -> Thor -Happy(x))", "all x.((Hulk(x) & -WakeUp(x)) -> -Happy(x))", "All x.((Hulk(x) & -WarmsUp(x)) -> ThorNotHappy(x))"]}
{"id": "folio_train_1669", "nl": "If Thor is happy, then Peter Parker wears a uniform.", "fol": "(IsHappy(Thor) -> WearsUniform(Peter))", "prediction": ["all x.((Thor(x) & Happy(x)) -> PeterParkerWearsUniform(x))", "all x.((Thor(x) & Happy(x)) -> WearsUniform(x))", "((Thor(Thor) & Happy(Thor)) -> WearsUniform(PeterParker))", "(HappilyThor(Tor) & PeterPenny(Penny))", "all x y.((Thor(x) & PeterPitterson(y)) -> Happy(x,y))", "all x.((Thor(x) & Happy(x)) -> PeterPennyWearsUniform(x))", "all x.((Throat(x) & Happy(x)) -> PeterParkerWearsUniform(x))", "((ThorHappy(Thor) & PeterPenny(Penny)) -> WearsUniform(Penny))", "(HappinessTor(Thor) -> WearsUniform(PeterParker))", "all x y.((Tor(x) & Thor(y)) -> Happy(x,y))", "all x.((Tor(x) & Happy(x)) -> WearsUniform(x))", "all x y.((Thor(x) & PeterPenny(y)) -> Happy(x,y))", "all x.((Thor(x) & Happy(x)) -> PeterParker(x))", "All x.(Happy(x) -> WearsUniform(x))", "all x.((Tor(x) & Happy(x)) -> WearsUniform(x))", "all x.((Tom(x) & Happy(x)) -> PeterPotterWearsUniform(x))"]}
{"id": "folio_train_1670", "nl": "If Thor is not happy, then no bridge will be broken.", "fol": "(-IsHappy(Thor) -> -exists x.BreaksBridge(x))", "prediction": ["all x.((Thor(x) & -Happy(x)) -> -BrokenBridge(x))", "-(Happy(Thor) & BridgeBreakable(Thor))", "all x.((Tor(x) & -Happy(x)) -> -BrokenBridge(x))", "(-HappyTo Thor(Tor(Tor)) -> -BrokenBridge(Tor))", "(-Happy(Thor) -> NoBridgeBroken(Thor))", "-(HappyBridge(Thor) & -HappyBridge(Thor))", "all x.((Thor(x) & -Happy(x)) -> -BridgeBroken(x))", "(-Happy(Thor) -> NoBridgeBroken(Thor))", "all x.((HasTor(x) & -Happy(x)) -> -BrokenBridge(x))", "all x.((Thor(x) & -Happy(x)) -> -BrokenBridge(x))", "All x.((Throat(x) & -Happy(x)) -> -BrokenBridge(x))", "-(Happy(Thor) & BridgeBroken(Thor))", "all x.((Tor(x) & -Happy(x)) -> -BrokenBridge(x))", "all x.((To Thor(x) & -Happy(x)) -> NoBridgeBroken(x))", "all x.((Tor(x) & -Happy(x)) -> -BrokenBridge(x))", "All x.((Tor(x) & -Happy(x)) -> NoBridgeBroken(x))"]}
{"id": "folio_train_1671", "nl": "Diethylcarbamazine is a medication discovered in the year 1947.", "fol": "all x.(DiethylcarbamazineMedication(x) & IsMedication(x) & DiscoveredInYear(x,Year1947))", "prediction": ["Diethylcarbamazine (Medication(x) & DiscoveredInYear(x,47))", "all x.(Diethylcarbamazine(x) -> DiscoveredInYear(x,47))", "(Medication(Diethylcarbamazine) & DiscoveredInYear(Diethylcarbamazine,47))", "Diethylcarbamazine (MentalMedication(x) & DiscoveredInYear(x,47))", "(Medication(diethylcarbamazine) & DiscoveredInYear(diethylcarbamazine,47))", "all x.(Diethylcarbamazine(x) -> DiscoveredInYear(x,47))", "Diethylcarbamazine (Medication(x) & DiscoveredInYear(x,47))", "Diethylcarbamazine(d) & DiscoveredInYear(d) & Year(d) & KnownIn(d,47))", "Diethylcarbamazine (MentalMedication) & DiscoveredInYear(x,47))", "(Medication(diethylcarbamazine) & DiscoveredInYear(diethylcarbamazine,47))", "all x.(Diethylcarbamazine(x) -> (DiscoveredInYear(x,47) & KnownInYear(x,47)))", "diethylcarbamazine(x) -> DiscoveredInYear(x,47))", "all x.(Diethylcarbamazine(x) -> DiscoveredInYear(x,1947))", "(Medication(Diethylcarbamazine) & DiscoveredInYear(Diethylcarbamazine,Year(y,47))", "Diethylcarbamazine (Medication) & DiscoveredInTheYear(y,47))", "diethylcarbamazine(x) -> DiscoveredInYear(x,47))"]}
{"id": "folio_train_1672", "nl": "Diethylcarbamazine can be used to treat river blindness.", "fol": "all x y.((DiethylcarbamazineMedication(x) & RiverBlindnessCondition(y)) -> TreatsCondition(x,y))", "prediction": ["all x.(Diethylcarbamazine(x) -> TreatsRiverBlindness(x))", "(TreatsRiverBlindness(Diethylcarbamazine))", "Diethylcarbamazine (Diethylcarbamazine) - TreatsRiverBlindness(Diethylcarbamazine))", "all x y.((Diethylcarbamazine(x) & RiverBlindness(y)) -> CanBeTreated(x,y))", "Diethylcarbamazine (Diethylcarbamazine) - TreatsRiverBlindness(x))", "all x.((Diethylcarbamazine(x) & RiverBlindness(x)) -> CanBeTreated(x))", "all x.(Diethylcarbamazine(x) -> TreatsRiverBlindness(x))", "diethylcarbamazine can be used to treat riverblindness.", "(TreatsRiverBlindness(Diethylcarbamazine)", "all x y.((Diethylcarbamazine(x) & RiverBlindness(y)) -> CanBeTreated(x,y))", "Diethylcarbamazine (Di\u00e9thylcarbamazine) - TreatsRiverBlindness(Di\u00e9thylcarbamazine))", "all x.(Diethylcarbamazine(x) -> TreatsRiverBlindness(x))", "all x y.((Diethylcarbamazine(x) & RiverBlindness(y)) -> Treats(x,y))", "diethylcarbamazine can be used to treat riverblindness.", "all x.(Diethylcarbamazine(x) -> TreatsRiverBlindness(x))", "all x.(Diethylcarbamazine(x) -> TreatsRiverBlindness(x))"]}
{"id": "folio_train_1673", "nl": "The only preferred treatment for river blindness is ivermectin.", "fol": "all x y.((RiverBlindnessCondition(y) & IsPreferredTreatment(x,y)) -> IvermectinMedication(x))", "prediction": ["all x.((PreferredTreatment(x) & RiverBlindness(x)) -> Ivermectin(x))", "all x.(PreferredTreatmentForRiverBlindness(x) -> Ivermectin(x))", "all x.((PreferredTreatment(x) & ForRiverBlindness(x)) -> Ivermectin(x))", "(PreferredTreatmentForRiverBlindness(ivermectin)", "all x y.((PreferredTreatment(x) & RiverBlindness(y) & Ivermectin(x)) -> PreferredTreatment(x,y))", "all x.(RiverBlindness(x) -> PreferredTreatment(x))", "only preferredtreatmentForRiverBlindness(ivermectin)", "all x.((RiverBlindness(x) & Ivermectin(x)) -> PreferredTreatment(x))", "all x.((PreferredTreatmentForRiverBlindness(x) & Ivermectin(x)) -> PreferredTreatmentForRiverBlindness(x))", "all x.(PreferredTreatmentForRiverBlindness(x) -> Ivermectin(x))", "all x y.((PreferredTreatment(x) & RiverBlindness(y)) -> Ivermectin(x,y))", "(PreferredTreatmentForRiverBlindness(ivermectin)", "all x.(RiverBlindness(x) -> PreferredTreatment(x))", "(PreferredTreatmentForRiverBlindness(ivermectin)", "all x y.((PreferredTreatment(x) & RiverBlindness(y)) -> Ivermectin(x,y))", "all x.(PreferredTreatmentForRiverBlindness(x) -> Ivermectin(x))"]}
{"id": "folio_train_1674", "nl": "Diethylcarbamazine is not ivermectin.", "fol": "all x.(DiethylcarbamazineMedication(x) -> -IvermectinMedication(x))", "prediction": ["all x.(Diethylcarbamazine(x) -> -Ivermectin(x))", "Diethylcarbamazine -Ivermectin(Diethylcarbamazine)", "(-Ivermectin(diethylcarbamazine))", "all x.(Diethylcarbamazine(x) -> -Ivermectin(x))", "Diethylcarbamazine -Ivermectin(Diethylcarbamazine)", "(-Ivermectin(Diethylcarbamazine))", "Diethylcarbamazine (Ivermectin(Diethyl) & -Ivermectin(Diethyl))", "Diethylcarbamazine -Ivermectin(dietarycarbamazine)", "all x.(Diethylcarbamazine(x) -> -Ivermectin(x))", "-Ivermectin(DiethylCarbamazine)", "Diethylcarbamazine is notIvermectin(x)", "(-Ivermectin(diethylcarbamazine)", "Diethylcarbamazine -Ivermectin(Diethylcarbamazine)", "-Ivermectin(DiethylCarbamazine)", "diethylcarbamazine is notivermectin.", "(-Ivermectin(diethylcarbamazine)"]}
{"id": "folio_train_1675", "nl": "Diethylcarbamazine is not preferred for the treatment of river blindness.", "fol": "all x y.((DiethylcarbamazineMedication(x) & RiverBlindnessCondition(y)) -> -IsPreferredTreatment(x,y))", "prediction": ["all x.(Diethylcarbamazine(x) -> -PreferredForRiverBlindness(x))", "Diethylcarbamazine -PreferredForRiverBlindness(x))", "all x.((Diethylcarbamazine(x) & RiverBlindness(x)) -> -PreferredFor(x,y))", "(-PreferredForRiverBlindness(Diethylcarbamazine))", "-(Diethylcarbamazine(x) & RiverBlindness(x))", "Diethylcarbamazine -PreferredForRiverBlindness(x))", "all x.(Diethylcarbamazine(x) -> -PreferredForRiverBlindness(x))", "Diethylcarbamazine is not preferred for treatment of riverblindness.", "(-PreferredForRiverBlindness(Diethylcarbamazine))", "all x.((Diethylcarbamazine(x) & RiverBlindness(x)) -> -PreferredFor(x,y))", "Diethylcarbamazine -PreferredForRiverBlindness(Diethylcarbamazine)", "-PreferredForRiverBlindness(diethylcarbamazine)", "diethylcarbamazine is not preferred for treatment of riverblindness.", "all x.(Diethylcarbamazine(x) -> -PreferredForRiverBlindness(x))", "diethylcarbamazine is not preferred for the treatment of riverblindness.", "(-PreferredForRiverBlindness(Diethylcarbamazine))"]}
{"id": "folio_train_1676", "nl": "Diethylcarbamazine was often used to treat river blindness.", "fol": "exists x.(DiethylcarbamazineMedication(x) & all y.(RiverBlindnessCondition(y) -> OftenUsedToTreat(x,y)))", "prediction": ["all x.(Diethylcarbamazine(x) -> TreatsRiverBlindness(x))", "Diethylcarbamazine (Diethylcarbamazine) - TreatsRiverBlindness(Diethylcarbamazine))", "(TreatsRiverBlindness(Diethylcarbamazine))", "all x.(Diethylcarbamazine(x) -> UsedToTreatRiverBlindness(x))", "all x.((Diethylcarbamazine(x) & RiverBlindness(x)) -> UsedToTreat(x,y))", "all x y.((Diethylcarbamazine(x) & RiverBlindness(y)) -> UsedToTreat(x,y))", "Diethylcarbamazine was often used to treat riverblindness.", "Diethylcarbamazine (Di\u00e9thylcarbamazine) was used to treat riverblindness(Di\u00e9thylcarbamazine))", "diethylcarbamazine was used to treat riverblindness.", "(TreatsRiverBlindness(Diethylcarbamazine))", "all x.(Diethylcarbamazine(x) -> TreatsRiverBlindness(x))", "all x.(Diethylcarbamazine(x) -> UsedToTreatRiverBlindness(x))", "Diethylcarbamazine (Dithylcarbamazine) & TreatsRiverBlindness(Dithylcarbamazine))", "diethylcarbamazine(d) & TreatsRiverBlindness(d))", "Diethylcarbamazine (Diethylcarbamazine) & TreatsRiverBlindness(x))", "diethylcarbamazine was oftenused to treat riverblindness."]}
{"id": "folio_train_1677", "nl": "Diethylcarbamazine is used in the treatment of filariasis.", "fol": "all x.(DiethylcarbamazineMedication(x) -> exists y.(Filariasis(y) & TreatsCondition(x,y)))", "prediction": ["all x.(Diethylcarbamazine(x) -> UsedInTreatmentOfFilariasis(x))", "all x y.((Diethylcarbamazine(x) & Filariasis(y)) -> UsedInTreatment(x,y))", "(UsedInTreatmentOfFilariasis(Diethylcarbamazine))", "Diethylcarbamazine (Di\u00e9thylcarbamazine) is used in treatment of filariasis.", "Diethylcarbamazine is used in treatment of filariasis.", "Diethylcarbamazine (Diethylcarbamazine) - UsedInTreatmentOfFilariasis(Diethylcarbamazine))", "(UsedInFilariasis(Diethylcarbamazine)", "all x.(Diethylcarbamazine(x) -> UsedInTreatmentOfFilariasis(x))", "Diethylcarbamazine (Diethylcarbamazine) - UsedInTreatmentOfFilariasis(x))", "all x y.((Diethylcarbamazine(x) & Filariasis(y)) -> UsedInTreatment(x,y))", "Diethylcarbamazine is used in the treatment of filariasis.", "all x.(Diethylcarbamazine(x) -> UsedInTreatmentOfFilariasis(x))", "Diethylcarbamazine (Dimethylcarbamazine) is used in treatment of filariasis.", "diethylcarbamazine is used in treatment of filariasis.", "all x.(Diethylcarbamazine(x) -> UsedInTreatmentOfFilariasis(x))", "diethylcarbamazine is used in the treatment of filariasis."]}
{"id": "folio_train_1678", "nl": "All univariate analyses use a generalized linear model. ", "fol": "all x.(IsUnivariateAnalysis(x) -> UsesGLM(x))", "prediction": ["all x.(UnivariateAnalysis(x) -> UsesGeneralizedLinearModel(x))", "all x y.((UnivariateAnalysis(x) & GeneralizedLinearModel(y)) -> Uses(x,y))", "all x.(UnivariateAnalysis(x) -> UsesGeneralizedLinearModel(x))", "(all x.(UnivariateAnalysis(x) -> GeneralizedLinearModel(x))", "all x.(UnivariateAnalysis(x) -> UsesGeneralizedLinearModel(x))", "(all x.(UnivariateAnalysis(x) -> GeneralizedLinearModel(x))", "all x y.((UnivariateAnalysis(x) & GeneralizedLinearModel(y)) -> Uses(x,y))", "all x.(UnivariateAnalysis(x) -> GeneralizedLinearModel(x))", "all x.(UnivariateAnalysis(x) -> UsesGeneralizedLinearModel(x))", "all x y.((UnivariateAnalysis(x) & GeneralizedLinearModel(y)) -> Uses(x,y))", "all x.(UnivariateAnalysis(x) -> UsesGeometricLiniformModel(x))", "all x y.((UnivariateAnalysis(x) & GeneralizedLinearModel(y,x)) -> Uses(x,y))", "all x.(Univariate(x) -> UsesGeneralizedLinearModel(x))", "all x.(UnivariateAnalysis(x) -> GeneralizedLinearModel(x))", "all x.(UnivariateAnalysis(x) -> UsesGeneralizedLinearModel(x))", "all x.(UnivariateAnalysis(x) -> UsesGeneralizedLinearModel(x))"]}
{"id": "folio_train_1679", "nl": "All multivoxel (pattern) analyses are implementing machine learning algorithms.", "fol": "all x.(IsMultivoxelPatternAnalysis(x) -> ImplementsMachineLearningAlgorithms(x))", "prediction": ["all x.(Multivoxel(x) -> ImplementsMachineLearningAlgorithms(x))", "all x y.((Multivoxel(x) & Pattern(y)) -> ImplementsMachineLearningAlgorithms(x,y))", "(all x.(Multivoxel(x) -> ImplementsMachineLearningAlgorithms(x))", "all x.((Multivoxel(x) & Pattern(x)) -> ImplementsMachineLearningAlgorithms(x))", "all x.(Multivoxel(x) -> ImplementsMachineLearningAlgorithms(x))", "all x.(Multivoxel(x) -> (ImplementsMachineLearningAlgorithms(x)))", "all x y.((Multivoxel(x) & Pattern(y)) -> ImplementsMachineLearningAlgorithms(x,y))", "all x.(Multivoxel(x) (pattern(x) & ImplementsMachineLearningAlgorithms(x)))", "(all x.(Multivoxel(x) -> Pattern(x)))", "all x.(Multivoxel(x) -> ImplementsMachineLearningAlgorithms(x))", "all x.(MultivoxelAnalysis(x) -> ImplementsMachineLearningAlgorithms(x))", "(all x.(Multivoxel(x) -> ImplementsMachineLearningAlgorithms(x))", "(all x.(Multivoxel(x) -> Pattern(x)) -> ImplementsMachineLearningAlgorithms(x))", "all x y.((Multivoxel(x) & Pattern(y)) -> ImplementingMachineLearningAlgorithms(x,y))", "all x.(Multivoxel(x) -> (implementingMachineLearningAlgorithms(x) & PatternAnalysis(x)))", "all x.(Multivoxel(x) -> ImplementsMachineLearningAlgorithms(x))"]}
{"id": "folio_train_1680", "nl": "All implementing machine learning algorithms are to learn and classify multivariate data.", "fol": "all x.(ImplementsMachineLearningAlgorithms(x) -> LearnsAndClassifiesMultivariateData(x))", "prediction": ["all x.((MachineLearningAlgorithm(x) & LearnsMultivariateData(x) & ClassifiesMultivariateData(x)) -> Implements(x))", "all x y.((MachineLearningAlgorithm(x) & MachineLearningAlgorithm(y)) -> (LearnsMultivariateData(x,y) & ClassifiesMultivariateData(x,y)))", "all x.((MethodLearningAlgorithm(x) & Implements(x,y)) -> (LearnsMultivariateData(x) & ClassifiesMultivariateData(x)))", "all x.((MachineLearningAlgorithm(x) & Implements(x)) -> (LearnsMultivariateData(x) & ClassifiesMultivariateData(x)))", "all x.(MachineLearningAlgorithm(x) -> (LearnMultivariateData(x) & ClassifyMultivariateData(x)))", "all x.((MachineLearningAlgorithm(x) & LearnMultivariateData(x) & ClassifyMultivariateData(x)) -> Implements(x))", "all x y.((MachineLearningAlgorithm(x) & MachineLearningAlgorithm(y)) -> (LearnMultivariateData(x,y) & ClassifyMultivariateData(x,y)))", "all x.((MethodLearningAlgorithm(x) & Implements(x,y)) -> (LearnMultivariateData(y) & ClassifyMultivariateData(y)))", "all x.((InitiatingMachineLearningAlgorithms(x) & LearnMultivariateData(x) & ClassifyMultivariateData(x)) -> ImplementsMachineLearningAlgorithms(x))", "all x.(MachineLearningAlgorithm(x) -> (LearnsMultivariateData(x) & ClassifiesMultivariateData(x)))", "all x y.((MachineLearningAlgorithm(x) & Implementing(x,y)) -> (LearnsMultivariateData(x) & ClassifiesMultivariateData(x)))", "all x.((MachineLearningAlgorithm(x) & Implements(x)) -> (LearnsMultivariateData(x) & ClassifiesMultivariateData(x)))", "(all x.((MachineLearningAlgorithm(x) & LearnMultivariateData(x)) -> ClassifyMultivariateData(x)))", "all x y.((MachineLearningAlgorithm(x) & MachineLearningAlgorithm(y)) -> (LearnsMultivariateData(x,y) & ClassifiesMultivariateData(x,y)))", "all x.(MachineLearningAlgorithm(x) -> (LearnMultivariateData(x) & ClassifyMultivariateData(x)))", "all x.((MachineLearningAlgorithm(x) & LearnMultivariateData(x) & ClassifyMultivariateData(x)) -> Implements(x))"]}
{"id": "folio_train_1681", "nl": "The Latent Dirichlet allocation model uses a generalized linear model or a univariate analysis. ", "fol": "(UsesGLM(LatentDirichletAllocationModel) | IsUnivariateAnalysis(LatentDirichletAllocationModel))", "prediction": ["all x.(LatentDirichletAllocationModel(x) -> (GeometricLiniformModel(x) | UnivariateAnalysis(x)))", "(LatentDirichletAllocationModel(LatentDirichletAllocationModel) -> (GeometricLiniformModel(LatentDirichletAllocationModel) | UnivariateAnalysis(LatentDirichletAllocationModel)))", "all x.((LatentDirichletAllocationModel(x) & (GeneralizedLinearModel(x) | UnivariateAnalysis(x))) -> AllocationModel(x))", "all x.(LatentDirichletAllocationModel(x) -> (UsesGeneralizedLinearModel(x) | UsesUnivariateAnalysis(x)))", "all x.(LatentDichletAllocationModel(x) -> (GeometricLiniformModel(x) | UnivariateAnalysis(x)))", "(LatentDirichletAllocationModel(LatentDirichlet) -> (GeometricLiniformModel(LatentDirichlet) | UnivariateAnalysis(LatentDirichlet)))", "all x y.((LatentDirichletAllocationModel(x) & GeneralizedLinearModel(y)) | UnivariateAnalysis(x,y)) -> AllocationModel(x,y))", "all x.((LatentDichletAllocationModel(x) & (GeneralizedLinearModel(x) | UnivariateAnalysis(x))) -> AllocationModel(x))", "all x.(LatentDrichletAllocationModel(x) -> (UsesGeneralizedLinearModel(x) | UsesUnivariateAnalysis(x)))", "all x.((LatentDirichletAllocationModel(x) & (GeneralizedLinearModel(x) | UnivariateAnalysis(x))) -> AllocationModel(x))", "(all x.(LatentDirichletAllocationModel(x) -> (GeometricLiniformModel(x) | UnivariateAnalysis(x))))", "all x y.((LatentDirichletAllocationModel(x) & GeneralizedLinearModel(y)) | UnivariateAnalysis(x)) -> AllocationModel(x,y))", "all x.(LatentDirichletAllocationModel(x) -> (GeometricLiniformModel(x) | UnivariateAnalysis(x)))", "(all x.(LatentDichletAllocationModel(x) -> (GeometricLiniformModel(x) | UnivariateAnalysis(x))))", "all x y.((LatentDirichletAllocationModel(x) & (GeneralizedLinearModel(y) | UnivariateAnalysis(y))) -> AllocationModel(x,y))", "all x.(LatentDichletAllocationModel(x) -> (GeometricLiniformModel(x) | UnivariateAnalysis(x)))"]}
{"id": "folio_train_1682", "nl": "If the Latent Dirichlet allocation model does not learn and classify multivariate data, then the Latent Dirichlet allocation model uses a generalized linear model and a multivoxel (pattern) analysis.", "fol": "(-LearnsAndClassifiesMultivariateData(LatentDirichletAllocationModel) -> (UsesGLM(LatentDirichletAllocationModel) & IsMultivoxelPatternAnalysis(LatentDirichletAllocationModel)))", "prediction": ["all x.((LatentDirichletAllocationModel(x) & -LearnsMultivariateData(x) & ClassifiesMultivariateData(x)) -> (UsesGeneralizedLinearModel(x) & UsesMultivoxel(x)))", "all x.((LatentDirechletAllocationModel(x) & -LearnsMultivariateData(x) & ClassifiesMultivariateData(x)) -> (UsesGeneralizedLinearModel(x) & UsesMultivoxel(x)))", "(-LearnsAndClassifiesMultivariateData(LatentDirechletAllocationModel)) -> (LatentDirechletAllocationModel(LatentDirechletAllocationModel) & UsesGeneralizedLinearModel(LatentDirechletAllocationModel) & UsesMultivoxel(PatternAnalysis)))", "all x y.((LatentDirichletAllocationModel(x) & -LearnsMultivariateData(x) & ClassifiesMultivariateData(x)) -> (UsesGeneralizedLinearModel(x) & UsesMultivoxel(y) & UsesPatter(y)))", "(-LearnsMultivariateData(LatentDirichletAllocationModel) & ClassifiesMultivariateData(LatentDirichletAllocationModel) & UsesGeneralizedLinearModel(LatentDirichletAllocationModel) & UsesMultivoxel(patternAnalysis))", "all x y.((LatentDirechletAllocationModel(x) & -LearnsMultivariateData(x) & ClassifiesMultivariateData(x)) -> (UsesGeneralizedLinearModel(x) & UsesMultivoxel(y) & UsesPatter(y)))", "all x.((LatentDirichletAllocationModel(x) & -LearnsMultivariateData(x) & ClassifiesMultivariateData(x)) -> (GeneralizedLinearModel(x) & Multivoxel(x)))", "(-LearningMultivariateData(LatentDrichletAllocationModel) & ClassifiesMultivariateData(LatentDrichletAllocationModel) -> (GeneralizedLinearModel(LatentDrichletAllocationModel) & Multivoxel(PatternAnalysis(LatentDrichletAllocationModel)))", "all x.((AllocationModel(x) & LatentDirechlet(x)) -> (-LearnsMultivariateData(x) & ClassifiesMultivariateData(x)))", "all x y.((LatentDirichletAllocationModel(x) & GeneralizedLinearModel(y) & Multivoxel(y)) -> -LearnsAndClassifiesMultivariateData(x,y))", "all x.((LateTrendsDirechletAllocationModel(x) & -LearnsMultivariateData(x) & ClassifiesMultivariateData(x)) -> (UsesGeneralizedLinearModel(x) & UsesMultivoxel(x)))", "all x.((LatentDirechletAllocationModel(x) & -LearnsMultivariateData(x) & ClassifiesMultivariateData(x)) -> (UsesGeneralizedLinearModel(x) & UsesMultivoxel(x)))", "all x y.((LatentDirectAllocationModel(x) & GeneralizedLinearModel(y) & Multivoxel(y)) -> -LearnsAndClassifiesMultivariateData(x,y))", "all x.((LatentDireichletAllocationModel(x) & -LearnsMultivariateData(x) & ClassifiesMultivariateData(x)) -> (GeneralizedLinearModel(x) & Multivoxel(x) & PatternAnalysis(x)))", "all x.((LatentDirichletAllocationModel(x) & -LearnsMultivariateData(x) & ClassifiesMultivariateData(x)) -> (UsesGeneralizedLinearModel(x) & UsesMultivoxel(x)))", "all x.((LateTirchletAllocationModel(x) & -LearnsMultivariateData(x) & ClassifiesMultivariateData(x)) -> (GeneralizedLinearModel(x) & Multivoxel(x) & PatternAnalysis(x)))"]}
{"id": "folio_train_1683", "nl": "Latent Dirichlet allocation model is implementing machine learning algorithms.", "fol": "ImplementsMachineLearningAlgorithms(LatentDirichletAllocationModel)", "prediction": ["all x.(LatentDirichletAllocationModel(x) -> ImplementsMachineLearningAlgorithms(x))", "all x.((LatentDirichletAllocationModel(x) & ImplementsMachineLearningAlgorithms(x)) -> Implements(x))", "LatentDirichletAllocationModel(x) -> ImplementsMachineLearningAlgorithms(x))", "all x y.((LatentDirichletAllocationModel(x) & MachineLearningAlgorithms(y)) -> Implements(x,y))", "all x.(LatentDichletAllocationModel(x) -> ImplementsMachineLearningAlgorithms(x))", "(implementingMachineLearningAlgorithms(LatentDirichletAllocationModel))", "(MachineLearningAlgorithms(LatentDirichletAllocationModel))", "(LatentDirichletAllocationModel(Latent) & ImplementsMachineLearningAlgorithms(Latent))", "all x.((LatentDirichletAllocationModel(x) & MachineLearningAlgorithms(x)) -> Implements(x))", "all x.(LatentDirichletAllocationModel(x) -> ImplementsMachineLearningAlgorithms(x))", "all x.(LatentDirectiichletAllocationModel(x) -> ImplementsMachineLearningAlgorithms(x))", "all x y.((LatentDirichletAllocationModel(x) & MachineLearningAlgorithm(y)) -> Implements(x,y))", "all x.((LatentDirechletAllocationModel(x) & MachineLearningAlgorithms(x)) -> Implements(x))", "all x y.((LatentDirechletAllocationModel(x) & MachineLearningAlgorithms(y)) -> Implements(x,y))", "All x.((LatentDirichletAllocationModel(x) & ImplementsMachineLearningAlgorithms(x)) -> ImplementsAlgorithms(x))", "All x.(LatentDirechletAllocationModel(x) -> ImplementsMachineLearningAlgorithms(x))"]}
{"id": "folio_train_1684", "nl": "Latent Dirichlet allocation model uses a generalized linear model and learns and classifies multivariate data.", "fol": "(UsesGLM(LatentDirichletAllocationModel) & LearnsAndClassifiesMultivariateData(LatentDirichletAllocationModel))", "prediction": ["all x.(LatentDirichletAllocationModel(x) -> (UsesGeneralizedLinearModel(x) & LearnsMultivariateData(x) & ClassifiesMultivariateData(x)))", "(LatentDirichletAllocationModel(LatentDirichletAllocationModel) & GeneralizedLinearModel(LatentDirichletAllocationModel) & LearnsAndClassifiesMultivariateData(LatentDirichletAllocationModel))", "all x y.((LatentDirichletAllocationModel(x) & GeneralizedLinearModel(y)) -> (LearnsMultivariateData(x,y) & ClassifiesMultivariateData(x,y)))", "all x.(LatentDichletAllocationModel(x) -> (UsesGeneralizedLinearModel(x) & LearnsMultivariateData(x) & ClassifiesMultivariateData(x)))", "all x.((LatentDirichletAllocationModel(x) & GeneralizedLinearModel(x) & LearnsAndClassifiesMultivariateData(x)) -> AllocationModel(x))", "all x y z.((LatentDirichletAllocationModel(x) & GeneralizedLinearModel(y) & MultivariateData(z)) -> (LearnsAndClassifies(x,z) | LearnsAndClassifies(x,z)))", "(all x.(LatentDichletAllocationModel(x) -> GeneralizedLinearModel(x)) & LearnsAndClassifiesMultivariateData(x))", "all x.(LatentDirichletAllocationModel(x) -> (UsesGeneralizedLinearModel(x) & LearnsMultivariateData(x) & ClassifiesMultivariateData(x)))", "all x.((LatentDirichletAllocationModel(x) & GeneralizedLinearModel(x)) -> (LearnsMultivariateData(x) & ClassifiesMultivariateData(x)))", "all x y.((LatentDirichletAllocationModel(x) & GeneralizedLinearModel(y)) -> (LearnsMultivariateData(x,y) & ClassifiesMultivariateData(x,y)))", "all x.(LatentDirectionModel(x) -> (UsesGeneralizedLinearModel(x) & LearnsMultivariateData(x) & ClassifiesMultivariateData(x)))", "all x y.((LatentDrichletAllocationModel(x) & GeneralizedLinearModel(y)) -> (LearnsMultivariateData(x,y) & ClassifiesMultivariateData(x,y)))", "all x.(LatentDirichletAllocationModel(x) -> (UsesGeneralizedLinearModel(x) & LearnsAndClassifiesMultivariateData(x)))", "all x.(LatentDrichletAllocationModel(x) -> (UsesGeneralizedLinearModel(x) & LearnsMultivariateData(x) & ClassifiesMultivariateData(x)))", "all x y.((LatentDirichletAllocationModel(x) & GeneralizedLinearModel(y)) -> (LearnsMultivariateData(x,y) & ClassifiesMultivariateData(x,y)))", "(all x.(LatentDirichletAllocationModel(x) -> GeneralizedLinearModel(x)) & LearnsAndClassifiesMultivariateData(x))"]}
{"id": "folio_train_1685", "nl": "Latent Dirichlet allocation model either uses a generalized linear model or learns and classifies multivariate data.", "fol": "(UsesGLM(LatentDirichletAllocationModel) | LearnsAndClassifiesMultivariateData(LatentDirichletAllocationModel))", "prediction": ["all x.(LatentDirichletAllocationModel(x) -> (UsesGeneralizedLinearModel(x) | LearnsMultivariateData(x)))", "all x.(LatentDirichletAllocationModel(x) -> ((UsesGeneralizedLinearModel(x) | LearnsMultivariateData(x)) & ClassifiesMultivariateData(x)))", "all x.(LatentDichletAllocationModel(x) -> (UsesGeneralizedLinearModel(x) | LearnsMultivariateData(x)))", "all x y.((LatentDirichletAllocationModel(x) & GeneralizedLinearModel(y)) -> (Uses(x,y) | Learns(x,y) & ClassifiesMultivariateData(x,y)))", "all x.(LatentDirechletAllocationModel(x) -> (UsesGeneralizedLinearModel(x) | LearnsMultivariateData(x)))", "(all x.(LatentDichletAllocationModel(x) -> (GeneralizedLinearModel(x) | LearnsMultivariateData(x))))", "all x.((LatentDirichletAllocationModel(x) & (UsesGeneralizedLinearModel(x) | LearnsMultivariateData(x))) -> AllocationModel(x))", "exists x.(LateTerrainModel(x) & ((UsesGeneralizedLinearModel(x) & LearnsMultivariateData(x) & ClassifiesMultivariateData(x)) | (-UsesGeneralizedLinearModel(x) & ClassifiesMultivariateData(x)))))", "all x.(LatentDirectionModel(x) -> (UsesGeneralizedLinearModel(x) | LearnsMultivariateData(x)))", "all x.((LatentDirichletAllocationModel(x) & (UsesGeometricLiniformModel(x) | LearnsMultivariateData(x))) -> AllocationModel(x))", "all x y.((LatentDirectAllocationModel(x) & GeneralizedLinearModel(y)) | LearnsAndClassifiesMultivariateData(x,y))", "(all x.(LatentDirichletAllocationModel(x) -> (GeometricLiniformModel(x) | LearnsMultivariateData(x))))", "all x y.((LatentDirichletAllocationModel(x) & GeneralizedLinearModel(y)) -> (Uses(x,y) | Learns(x,y) & ClassifiesMultivariateData(x,y)))", "all x.(LatentDichletAllocationModel(x) -> ((UsesGeneralizedLinearModel(x) | LearnsMultivariateData(x)) & ClassifiesMultivariateData(x)))", "(all x.(LatentDireckletAllocationModel(x) -> (UsesGeneralizedLinearModel(x) | LearnsMultivariateData(x) & ClassifiesMultivariateData(x))))", "all x y.((LatentDirichletAllocationModel(x) & GeneralizedLinearModel(y)) -> (Uses(x,y) | LearnsAndClassifiesMultivariateData(x,y)))"]}
{"id": "folio_train_1686", "nl": "If something requires a medical diagnosis, then lab tests or imaging is required. ", "fol": "all x.(RequiresMedicalDiagnosis(x) -> RequiresLabTestsOrImaging(x))", "prediction": ["all x.((RequiresMedicalDiagnosis(x) & (LabTests(x) | Imaging(x))) -> RequiresMedicalDiagnosis(x))", "all x.(RequiresMedicalDiagnosis(x) -> (LabTests(x) | Imaging(x)))", "all x y.((MedicalDiagnosis(x) & Requires(x,y)) -> (LabTests(x) | Imaging(x)))", "all x.((RequiresMedicalDiagnosis(x)) -> (LabTests(x) | Imaging(x)))", "all x.((MedicalDiagnosis(x) & RequiresLabTestsOrImaging(x)) -> Requires(x))", "all x y.((RequiresMedicalDiagnosis(x) & (LabTests(y) | Imaging(y))) -> Requires(x,y))", "(RequiresMedicalDiagnosis(x) -> (LabTests(x) | Imaging(x))))", "all x.(RequiresMedicalDiagnosis(x) -> (LabTests(x) | Imaging(x)))", "all x.((RequiresMedicalDiagnosis(x) & (LabTests(x) | Imaging(x))) -> RequiresMedicalDiagnosis(x))", "all x y.((MedicalDiagnosis(x) & Requires(x,y)) -> (LabTests(x) | Imaging(x)))", "(RequiresMedicalDiagnosis(x) -> (LabTests(x) | Imaging(x))))", "all x.(MedicalDiagnosis(x) -> (RequiresLabTests(x) | RequiresImaging(x)))", "all x.(RequiresMedicalDiagnosis(x) -> (LabTests(x) | Imaging(x)))", "all x.((MedicalDiagnosis(x) & RequiresLabTestsOrImaging(x)) -> Requires(x))", "exists x.(MedicalDiagnosis(x) & (RequiresLabTest(x) | RequiresImaging(x)))", "all x.(RequiresMedicalDiagnosis(x) -> (LabTests(x) | Imaging(x)))"]}
{"id": "folio_train_1687", "nl": "All rare diseases require a medical diagnosis.", "fol": "all x.(IsRareDisease(x) -> RequiresMedicalDiagnosis(x))", "prediction": ["all x.(RareDisease(x) -> RequiresMedicalDiagnosis(x))", "all x y.((RareDisease(x) & MedicalDiagnosis(y)) -> Requires(x,y))", "all x.(RareDisease(x) -> RequiresMedicalDiagnosis(x))", "(all x.(RareDisease(x) -> RequiresMedicalDiagnosis(x)))", "all x y.((RareDisease(x) & MedicalDiagnosis(y)) -> Requires(x,y))", "all x.((RareDisease(x) & RequiresMedicalDiagnosis(x)) -> RareDisease(x))", "all x.(RareDisease(x) -> RequiresMedicalDiagnosis(x))", "all x.(RareDisease(x) -> RequiresMedicalDiagnosis(x))", "all x y.((RareDisease(x) & MedicalDiagnosis(y)) -> Requires(x,y))", "(all x.(RareDisease(x) -> RequiresMedicalDiagnosis(x)))", "all x.(RareDisease(x) -> RequiresMedicalDiagnosis(x))", "all x.(RareDiagnosis(x) -> RequiresMedicalDiagnosis(x))", "all x.(RareDisease(x) -> RequiresMedicalDiagnosis(x))", "all x.(RareDisease(x) -> MedicalDiagnosis(x))", "all x.(RareDisease(x) -> RequiresMedicalDiagnosis(x))", "all x.(RareDisease(x) -> RequiresMedicalDiagnosis(x))"]}
{"id": "folio_train_1688", "nl": "If something is mild, then no lab tests or imaging is required. ", "fol": "all x.(IsMild(x) -> -RequiresLabTestsOrImaging(x))", "prediction": ["all x.((Mild(x) & -LabTests(x) & -Imagery(x)) -> -Required(x))", "all x.(Mild(x) -> (NoLabTests(x) | NoImaging(x)))", "-(Mild(Mild(Mild(Mild(Mild(Mild)) -> (NoLabTests(Mild) & -Required(Mild(Mild)))", "all x.((Mild(x) & -LabTests(x) & -Imaging(x)) -> -Required(x))", "all x.((Mild(x)) -> (NoLabTests(x) | NoImaging(x)))", "all x.(Mild(x) -> (-LaborTests(x) | Imaging(x)))", "(Mild(mild) -> (NoLabTests(mild) & -RequiredForImagery(mild)))", "(Mild(x) -> (-LabTests(x) | Imaging(x))))", "(Mildly(x) -> (-LabTests(x) | Imaging(x))))", "all x.(Mild(x) -> (NoLabTests(x) | NoImaging(x)))", "all x y.((Mild(x) & LabTest(y) & -Imagery(y)) -> -Required(x,y))", "all x.((Mild(x)) -> (-LaborTests(x) | Imaging(x)))", "all x.((Mild(x) & -LabTests(x) & -Imagery(x)) -> -Required(x))", "all x.((Mild(x) & NoLabTestsOrImaging(x)) -> -Required(x))", "all x.(Mild(x) -> (-LaborTests(x) | Imaging(x)))", "all x.(Mild(x) -> (NoLabTests(x) | NoImaging(x)))"]}
{"id": "folio_train_1689", "nl": "All blood cancers are rare diseases.", "fol": "all x.(IsBloodCancer(x) -> IsRareDisease(x))", "prediction": ["all x.(BloodCancer(x) -> RareDisease(x))", "all x.(BloodCancer(x) -> RareDisease(x))", "all x y.((BloodCancer(x) & RareDisease(y)) -> Rare(x))", "all x.(BloodCancer(x) -> RareDisease(x))", "all x y.((BloodCancer(x) & RareDisease(y)) -> RareDisease(x))", "all x.(BloodCancerous(x) -> RareDisease(x))", "all x.((BloodCancer(x) & RareDisease(x)) -> Rare(x))", "all x.(BloodCancer(x) -> RareDisease(x))", "all x.(BloodCancerous(x) -> RareDisease(x))", "all x.(BloodCancer(x) -> RareDisease(x))", "(all x.(BloodCancer(x) -> Rare(x))", "all x.((BloodCancer(x) & RareDisease(x)) -> RareDisease(x))", "(all x.(BloodCancer(x) -> RareDisease(x))", "all x.(BloodCancer(x) -> RareDisease(x))", "all x.(BloodCancerous(x) -> RareDisease(x))", "all x.(BloodCancer(x) -> RareDisease(x))"]}
{"id": "folio_train_1690", "nl": "All Leukemia is blood cancer. ", "fol": "all x.(IsLeukemia(x) -> IsBloodCancer(x))", "prediction": ["all x.(Leukemia(x) -> BloodCancer(x))", "all x.(Leukemia(x) -> BloodCancer(x))", "All x y.((Leukemia(x) & BloodCancer(y)) -> BloodCancer(x))", "all x.(Leukemia(x) -> BloodCancer(x))", "(all x.(Leukemia(x) -> BloodCancer(x))", "(all x.(Leukemia(x) -> BloodCancerous(x)))", "All X y.((Leukemia(x) & BloodCancer(y)) -> BloodCancer(x))", "all x.(Leukemia(x) -> BloodCancer(x))", "all x.(Leukemia(x) -> BloodCancerous(x))", "all x.(Lenucemia(x) -> BloodCancer(x))", "all x.(Leukemia(x) -> BloodCancer(x))", "all x.(Leukemia(x) -> BloodCancer(x))", "all x.(Leukemia(x) -> BloodCancerous(x))", "all x.(Leukemia(x) -> BloodCancer(x))", "all x.(Leukemia(x) -> BloodCancer(x))", "All x.(Leukemia(x) -> BloodCancer(x))"]}
{"id": "folio_train_1691", "nl": "If bladder cancer is either both blood cancer and Leukemia or neither blood cancer nor Leukemia, then bladder cancer is Leukemia.", "fol": "(-((IsBloodCancer(BladderCancer) & -IsLeukemia(BladderCancer)) | (-IsBloodCancer(BladderCancer) & IsLeukemia(BladderCancer))) -> IsLeukemia(BladderCancer))", "prediction": ["all x.((B bladderCancer(x) & (BloodCancer(x) | Leukemia(x))) -> Leukemia(x))", "all x.((BloodCancer(x) & (BloodCancer(x) | Leukemia(x))) -> Leukemia(x))", "all x.((B bladderCancer(x) & ((BloodCancer(x) & Leukemia(x)) | -BloodCancer(x) & Leukemia(x))) -> Leukemia(x))", "all x.((BloodCancer(x) & ((BloodCancer(x) & Leukemia(x)) | -BloodCancer(x) & Leukemia(x))) -> Leukemia(x))", "(all x.((BloodCancer(x) & (BloodCancer(x) | Leukemia(x))) -> Leukemia(x)))", "all x.((B bladderCancer(x) & (BloodCancer(x) | Leukemia(x)) | -BloodCancer(x) | Leukemia(x))) -> Leukemia(x))", "(all x.((BloodCancer(x) & BloodCancer(x) & Leukemia(x)) | (-BloodCancer(x) & Leukemia(x)))) -> Leukemia(x))", "all x y.((B bladderCancer(x) & (BloodCancer(y) | Leukemia(y) | -BloodCancer(x,y) | Leukemia(y))) -> Leukemia(x))", "all x.(BloodCancer(x) -> ((BloodCancer(x) & Leukemia(x)) | (-BloodCancer(x) & Leukemia(x))))", "all x.((B bladderCancer(x) & ((BloodCancer(x) & Leukemia(x)) | (-BloodCancer(x) & Leukemia(x)))) -> Leukemia(x))", "all x.((BloodCancer(x) & (BloodCancer(x) | Leukemia(x))) -> Leukemia(x))", "all x.((BodyCancer(x) & (BloodCancer(x) | Leukemia(x) | -BloodCancer(x) | Leukemia(x))) -> Leukemia(x))", "all x y.((B bladderCancer(x) & (BloodCancer(y) | Leukemia(y) | -BloodCancer(y) | Leukemia(y))) -> Leukemia(x))", "all x.(BloodCancer(x) -> (((BloodCancer(x) & Leukemia(x)) | (-BloodCancer(x) & Leukemia(x)))))", "(all x.((BloodCancer(x) & (BloodCancer(x) | Leukemia(x))) -> Leukemia(x)))", "(all x.((BloodCancer(x) & BloodCancer(x) & Leukemia(x)) | (-BloodCancer(x) & Leukemia(x)))) -> Leukemia(x))"]}
{"id": "folio_train_1692", "nl": "Bladder cancer is mild.", "fol": "IsMild(BladderCancer)", "prediction": ["all x.(BladderCancer(x) -> Mild(x))", "all x.(BloodderCancer(x) -> Mild(x))", "all x.(BladderCancer(x) -> Mild(x))", "(MildBladderCancer(bladder)", "all x y.((BladderCancer(x) & Mild(y)) -> Cancer(x,y))", "all x.(BloodderCancer(x) -> Mild(x))", "all x y.((BloodderCancer(x) & Mild(y)) -> Cancer(x,y))", "all x.(BladeCancerous(x) -> Mild(x))", "(MildBladderCancer)", "all x y.((BladderCancer(x) & Mild(y)) -> Mild(x))", "all x.(BladderCancer(x) -> Mild(x))", "All x.(BladderCancerous(x) -> Mild(x))", "all x.(BloodderCancer(x) -> Mild(x))", "all x.(BladderCancer(x) -> Mild(x))", "All x.(BladeCancerous(x) -> Mild(x))", "All x.(BloodderCancer(x) -> Mild(x))"]}
{"id": "folio_train_1693", "nl": "Bladder cancer is Leukemia.", "fol": "IsLeukemia(BladderCancer)", "prediction": ["all x.(BladderCancer(x) -> Leukemia(x))", "all x.(BloodderCancer(x) -> Leukemia(x))", "Leukemia (BladderCancer)", "all x.(BladderCancer(x) -> Leukemia(x))", "Leukemia (bladdercancer)", "all x y.((BladderCancer(x) & Leukemia(y)) -> Cancer(x,y))", "(all x.(BladderCancer(x) -> Leukemia(x))", "all x.(BloodderCancer(x) -> Leukemia(x))", "Leukemia(bladdercancer)", "all x.(BladeCancel(x) -> Leukemia(x))", "Leukemia (BloodderCancer)", "all x.(BladderCancer(x) -> Leukemia(x))", "All x.(BladderCancerous(x) -> Leukemia(x))", "All x.(BloodderCancer(x) -> Leukemia(x))", "(Leukemia)", "All x.(BloodderCancerous(x) -> Leukemia(x))"]}
{"id": "folio_train_1694", "nl": "Bladder cancer is either a rare disease or mild.", "fol": "(IsRareDisease(BladderCancer) | IsMild(BladderCancer))", "prediction": ["all x.(BladderCancer(x) -> (RareDisease(x) | MildDisease(x)))", "all x.(BloodderCancer(x) -> (RareDisease(x) | MildDisease(x)))", "all x.(BladderCancer(x) -> (Rare(x) | Mild(x)))", "(RareDisease(bladderCancer) | Mild(bladderCancer))", "(Rare(bladderCancer) | Mild(bladderCancer))", "all x y.((BladderCancer(x) & Rare(y)) | Mild(y))", "all x.(BloodderCancer(x) -> (RareDisease(x) | Mild(x)))", "all x.(BladderCancer(x) -> (RareDisease(x) | Mild(x)))", "all x y.((BladderCancer(x) & RareDisease(y)) | Mild(y))", "all x.(BladeCancer(x) -> (RareDisease(x) | Mild(x)))", "all x.(BloodderCancer(x) -> (Rare(x) | Mild(x)))", "all x.(BladderCancer(x) -> (Rare(x) | Mild(x)))", "all x y.((BladderCancer(x) & RareDisease(y)) | Mild(y))", "all x.(BladderCancer(x) -> (RareDisease(x) | MildDisease(x)))", "exists x.(BladderCancerous(x) & (Rare(x) | Mild(x)))", "all x.(BloodderCancer(x) -> (RareDisease(x) | MildDisease(x)))"]}
{"id": "folio_train_1695", "nl": "No precious metals aren't scarce.", "fol": "all x.(IsPreciousMetal(x) -> -IsScarce(x))", "prediction": ["-exists x.(PreciousMetal(x) & -Sharp(x))", "all x.(PreciousMetal(x) -> -Scarce(x))", "-exists x.(PreciousMetal(x) & -Scarce(x))", "all x.(PreciousMetal(x) -> -Sharp(x))", "(exists x.(PreciousMetal(x) & -Sharp(x)))", "-exists x.(PreciousMetal(x) & -Sharp(x))", "all x.(PreciousMetal(x) -> -Scarce(x))", "(exists x.(PreciousMetal(x) & -Scarce(x)))", "-exists x.(PreciousMetal(x) & Rare(x))", "all x.(PreciousMetal(x) -> -Sharp(x))", "-exists x.(PreciousMetal(x) & -Scarce(x))", "all x.(PreciousMetal(x) -> -Scarce(x))", "-exists x.(PreciousMetal(x) & Rare(x))", "all x.(PreciousMetal(x) -> -Sharp(x))", "-exists x.(PreciousMetal(x) & -Sharp(x))", "-exists x.(PreciousMetal(x) & Rare(x))"]}
{"id": "folio_train_1696", "nl": "All non-rare earth metals are not scarce.", "fol": "all x.(IsNonRareEarthMetal(x) -> IsScarce(x))", "prediction": ["all x.(NonRareEarthMetal(x) -> -Sharp(x))", "all x.((NonRareEarthMetal(x) & -Sharp(x)) -> -Sharp(x))", "all x.(NonRareEarthMetal(x) -> -Sharp(x))", "(all x.((NonRareEarthMetal(x)) -> -Sharp(x)))", "all x y.((NonRareEarthMetal(x) & Metal(y) & -Sharp(x)) -> -Sharp(x))", "all x.((NonRareEarthMetal(x) & -Sharp(x)) -> -Sharp(x))", "all x.(NonRareEarthMetal(x) -> -Sharp(x))", "all x.((NonRareEarthMetal(x) & -Scarce(x)) -> -Scarce(x))", "-Scarce(nonrare(earth)", "all x.(NonRareEarthMetal(x) -> -Scarce(x))", "(all x.(NonRareEarthMetal(x) -> -Sharp(x)))", "all x.((NonRareEarthMetal(x) & -Sharp(x)) -> -Sharp(x))", "all x.(NonRareEarthMetal(x) -> -Sharp(x))", "(all x.(NonRareEarthMetal(x) -> -Scarce(x)))", "all x.(NonRareEarthMetal(x) -> -Scarce(x))", "all x.(NonRareEarthMetal(x) -> -Sharp(x))"]}
{"id": "folio_train_1697", "nl": "Either non-rare earth metals or rare earth metals. ", "fol": "all x.(IsNonRareEarthMetal(x) | IsRareEarthMetal(x))", "prediction": ["all x.((NonRareEarthMetal(x) | RareEarthMetal(x)) -> (NonRareEarthMetal(x) | RareEarthMetal(x)))", "(NonRareEarthMetal(x) | RareEarthMetal(x))", "((NonRareEarthMetal(x) | RareEarthMetal(x)))", "all x y.((NonRareEarthMetal(x) | RareEarthMetal(y)) -> (NonRareEarthMetal(x) | RareEarthMetal(y)))", "exists x.(NonRareEarthMetal(x) | RareEarthMetal(x))", "(RareEarthMetal(x) | RareEarthMetal(x))", "all x.((NonRareEarthMetal(x) | RareEarthMetal(x)) -> (NonRareEarthMetal(x) | RareEarthMetal(x)))", "(NonRareEarthMetal(x) | RareEarthMetal(x))", "((NonRareEarthMetal(x) | RareEarthMetal(x)))", "all x.((NonRareEarthMetal(x) | RareEarthMetal(x)) -> (-RareEarthMetal(x) | RareEarthMetal(x)))", "all x y.((NonRareEarthMetal(x) | RareEarthMetal(y)) -> (NonRareEarthMetal(x) | RareEarthMetal(y)))", "exists x.(NonRareEarthMetal(x) | RareEarthMetal(x))", "(NonRareEarthMetal(x) | RareEarthMetal(x))", "((NonRareEarthMetal(x) | RareEarthMetal(x)))", "all x.((NonRareEarthMetal(x) | RareEarthMetal(x)) -> (NonRareEarthMetal(x) | RareEarthMetal(x)))", "exists x.(NonRareEarthMetal(x) | RareEarthMetal(x))"]}
{"id": "folio_train_1698", "nl": "All rare earth metals can be used for batteries.", "fol": "all x.(IsRareEarthMetal(x) -> CanBeUsedForBatteries(x))", "prediction": ["all x.(RareEarthMetal(x) -> CanBeUsedForBatteries(x))", "all x y.((RareEarthMetal(x) & Battery(y)) -> CanBeUsedFor(x,y))", "all x.(RareEarthMetal(x) -> CanBeUsedForBatteries(x))", "(all x.(RareEarthMetal(x) -> CanBeUsedForBatteries(x)))", "all x.((RareEarthMetal(x) & UsedForBatteries(x)) -> CanBeUsedForBatteries(x))", "all x y.((RareEarthMetal(x) & Battery(y)) -> CanBeUsedFor(x,y))", "all x.(RareEarthMetal(x) -> CanBeUsedForBatteries(x))", "(all x.(RareEarthMetal(x) -> CanBeUsedForBatteries(x)))", "all x.(RareEarthMetal(x) -> CanBeUsedForBatteries(x))", "all x y.((RareEarthMetal(x) & Battery(y)) -> CanBeUsedFor(x,y))", "all x y.((RareEarthMetal(x) & Batteries(y)) -> CanBeUsedFor(x,y))", "all x.(RareEarthMetal(x) -> UsedForBatteries(x))", "all x.(RareEarthMetal(x) -> CanBeUsedForBatteries(x))", "all x.(RareEarthMetal(x) -> UsedForBatteries(x))", "all x.(RareEarthMetal(x) -> CanBeUsedForBatteries(x))", "all x.(RareEarthMetal(x) -> CanBeUsedForBatteries(x))"]}
{"id": "folio_train_1699", "nl": "All rare earth metals are essential for electric vehicles.", "fol": "all x.(IsRareEarthMetal(x) -> IsEssentialForElectricVehicles(x))", "prediction": ["all x.(RareEarthMetal(x) -> EssentialForElectricVehicles(x))", "(EssentialForElectricVehicles(rareEarthMetal) & AllOther(rareEarthMetal))", "all x.(RareEarthMetal(x) -> EssentialForElectricVehicles(x))", "all x y.((RareEarthMetal(x) & ElectricVehicle(y)) -> EssentialFor(x,y))", "all x.(RareEarthMetal(x) -> EssentialForElectricVehicles(x))", "all x.((RareEarthMetal(x) & EssentialForElectricVehicles(x)) -> EssentialForElectricVehicles(x))", "all x.(RareEarthMetal(x) -> EssentialForElectricVehicles(x))", "all x y.((RareEarthMetal(x) & ElectricVehicle(y)) -> EssentialFor(x,y))", "all x.(RareEarthMetall(x) -> EssentialForElectricVehicles(x))", "all x y.((RareEarthMetal(x) & ElectricVehicle(y) & EssentialFor(x,y)) -> EssentialFor(x,y))", "all x.(RareEarthMetal(x) -> EssentialForElectricVehicles(x))", "all x y.((RareEarthMetal(x) & ElectricVehicle(y)) -> EssentialFor(x,y))", "all x.(RareEarthMetal(x) -> EssentialForElectricVehicles(x))", "all x.(RareEarthMetal(x) -> EssentialForElectricVehicles(x))", "all x.(RareEarthMetal(x) -> EssentialForElectricVehicles(x))", "all x.(RareEarthMetal(x) -> EssentialForElectricVehicles(x))"]}
{"id": "folio_train_1700", "nl": "Lithium is neither a non-rare earth metal nor essential for electric vehicles.", "fol": "(-IsNonRareEarthMetal(Lithium) & -IsEssentialForElectricVehicles(Lithium))", "prediction": ["all x.(Lithium(x) -> (-NonRareEarthMetal(x) & -EssentialForElectricVehicles(x)))", "(-(NonRareEarthMetal(Lithium) & -EssentialForElectricVehicles(Lithium)) -> -(NonRareEarthMetal(Lithium) & -(NonRareEarthMetal(Lithium) & -(ElectricVehicles(Lithium) & ElectricVehicles(Lithium)))))", "(-NonRareEarthMetal(lithium) & -EssentialForElectricVehicles(lithium))", "(NonRareEarthMetal(lithium) & -EssentialForElectricVehicles(lithium))", "all x.(Litium(x) -> (-NonRareEarthMetal(x) & -EssentialForElectricVehicles(x)))", "(-(NonRareEarthMetal(lithium) & -EssentialForElectricVehicles(lithium)) -> -(NonRareEarthMetal(lithium) | EssentialForElectricVehicles(lithium)))", "-(NonRareEarthMetal(lithium) & -EssentialForElectricVehicles(lithium))", "all x.(Lithium(x) -> (-NonRareEarthMetal(x) & -EssentialForElectricVehicles(x)))", "(NonRareEarthMetal(lithium) & -EssentialForElectricVehicles(lithium))", "all x.(Litium(x) -> (-NonRareEarthMetal(x) & -EssentialForElectricVehicles(x)))", "all x.(Lithium(x) -> (-NonRareEarthMetal(x) & -EssentialForElectricVehicles(x)))", "-(NonRareEarthMetal(lithium) & -EssentialForElectricVehicles(lithium))", "-(NonRareEarthMetal(lithium) | EssentialForElectricVehicles(lithium))", "all x.(Litium(x) -> (-NonRareEarthMetal(x) & -EssentialForElectricVehicles(x)))", "all x.(Lithium(x) -> (-NonRareEarthMetal(x) & -EssentialForElectricVehicles(x)))", "all x.(Lithium(x) -> (-NonRareEarthMetal(x) & -EssentialForElectricVehicles(x)))"]}
{"id": "folio_train_1701", "nl": "Lithium is a rare earth metal.", "fol": "IsRareEarthMetal(Lithium)", "prediction": ["all x.(Lithium(x) -> RareEarthMetal(x))", "(RareEarthMetal(Lithium) & RareEarthMetal(Lithium))", "all x.(Litium(x) -> RareEarthMetal(x))", "all x.(Lithium(x) -> RareEarthMetal(x))", "(RareEarthMetal(Lithium) & RareEarthMetal(Lithium))", "all x y.((Litium(x) & RareEarthMetal(y)) -> RareEarthMetal(x))", "all x.(Litium(x) -> RareEarthMetal(x))", "all x.(Lithium(x) -> RareEarthMetal(x))", "(RareEarthMetal(lithium) & RareEarthMetal(lithium))", "(RareEarthMetal(lithium) & RareEarthMetal(lithium))", "all x.(Litium(x) -> RareEarthMetal(x))", "all x.(Lithium(x) -> RareEarthMetal(x))", "(RareEarthMetal(Lithium))", "all x.(Lithium(x) -> RareEarthMetal(x))", "all x.(Litium(x) -> RareEarthMetal(x))", "exists x.(Lithium(x) & RareEarthMetal(x))"]}
{"id": "folio_train_1702", "nl": "Lithium is a precious metal and is used for batteries.", "fol": "(IsPreciousMetal(Lithium) & CanBeUsedForBatteries(Lithium))", "prediction": ["all x.(Lithium(x) -> (PreciousMetal(x) & UsedForBatteries(x)))", "all x y.((Lithium(x) & PreciousMetal(y)) -> UsedForBatteries(x,y))", "all x.(Lithium(x) -> (PreciousMetal(x) & UsedForBatteries(x)))", "(PreciousMetal(Lithium) & UsedForBatteries(Lithium))", "(PreciousMetal(lithium) & UsedForBatteries(lithium))", "all x.(Litium(x) -> (PreciousMetal(x) & UsedForBatteries(x)))", "all x y.((Lithium(x) & Battery(y)) -> (PreciousMetal(x,y) & UsedFor(x,y)))", "all x.(Lithium(x) -> (PreciousMetal(x) & UsedForBatteries(x)))", "(PreciousMetal(lithium) & UsedForBatteries(lithium))", "all x.(Lithium(x) -> (PreciousMetal(x) & UsedForBatteries(x)))", "all x.(Litium(x) -> (PreciousMetal(x) & UsedForBatteries(x)))", "all x.((Lithium(x) & PreciousMetal(x)) -> UsedForBatteries(x))", "all x.(Lithium(x) -> (PreciousMetal(x) & UsedForBatteries(x)))", "(PreciousMetal(Lithium) & UsedForBatteries(Lithium))", "all x.(Lithium(x) -> (PreciousMetal(x) & UsedForBatteries(x)))", "all x.((Lithium(x) & PreciousMetal(x) & UsedForBatteries(x)) -> UsedForBatteries(x))"]}
{"id": "folio_train_1703", "nl": "If Lithium is not essential for electric vehicles or a precious metal, then Lithium is not a non-rare earth metal or usable for batteries.", "fol": "(((-IsEssentialForElectricVehicles(Lithium) | IsPreciousMetal(Lithium)) -> -IsNonRareEarthMetal(Lithium)) | CanBeUsedForBatteries(Lithium))", "prediction": ["all x.((Lithium(x) & -EssentialForElectricVehicles(x) & -PreciousMetal(x)) -> (-NonRareEarthMetal(x) & -UsableForBatteries(x)))", "(-EssentialForElectricVehicles(Lithium) & -PreciousMetal(Lithium)) -> -NonRareEarthMetal(Lithium) & -UsableForBatteries(Lithium))", "all x.((Lithium(x) & -EssentialForElectricVehicles(x) & -PreciousMetal(x)) -> -NonRareEarthMetal(x) & -UsableForBatteries(x))", "all x.((Litium(x) & -EssentialForElectricVehicles(x) & -PreciousMetal(x)) -> (-NonRareEarthMetal(x) & -UsableForBatteries(x)))", "all x.((Lithium(x) & -(EssentialForElectricVehicles(x) | PreciousMetal(x))) -> -NonRareEarthMetal(x) & -UsableForBatteries(x)))", "(-EssentialForElectricVehicles(Lithium) & -PreciousMetal(Lithium)) -> (-NonRareEarthMetal(Lithium) & -UsableForBatteries(Lithium)))", "(-EssentialForElectricVehicles(Lithium) | PreciousMetal(Lithium)))", "all x.((Lithium(x) & -EssentialForElectricVehicles(x) & -PreciousMetal(x)) -> (-NonRareEarthMetal(x) & -UsableForBatteries(x)))", "all x.((Litium(x) & -EssentialForElectricVehicles(x) & -PreciousMetal(x)) -> (-NonRareEarthMetal(x) & -UsableForBatteries(x)))", "(-EssentialForElectricVehicles(Lithium) & -PreciousMetal(Lithium)) -> -NonRareEarthMetal(Lithium) & -UsableForBatteries(Lithium))", "all x.((Lithium(x) & (-EssentialForElectricVehicles(x) | PreciousMetal(x))) -> (-NonRareEarthMetal(x) & -UsableForBatteries(x)))", "all x.((Lithium(x) & -EssentialForElectricVehicles(x) & -PreciousMetal(x)) -> -NonRareEarthMetal(x) & -UsableForBatteries(x))", "all x.(((Lithium(x) & -EquippedForElectricVehicles(x)) | PreciousMetal(x)) -> (-NonRareEarthMetal(x) & -UsableForBatteries(x)))", "all x y.((Lithium(x) & -EssentialForElectricVehicles(x) | PreciousMetal(x)) -> (-NonRareEarthMetal(y) & -UsableForBatteries(y)))", "all x.((Litium(x) & -EssentialForElectricVehicles(x) & -PreciousMetal(x)) -> -NonRareEarthMetal(x) & -UsableForBatteries(x))", "all x.((Lithium(x) & -EssentialForElectricVehicles(x) & -PreciousMetal(x)) -> (-NonRareEarthMetal(x) & -UsableForBatteries(x)))"]}
{"id": "folio_train_1704", "nl": "If people own at least one pet, then they do not have tidy houses.", "fol": "all x.(OwnAtLeastOnePet(x) -> -HasTidyHouse(x))", "prediction": ["all x.(OwnsAtLeastOnePet(x) -> -TidyHouses(x))", "all x.((Person(x) & OwnsPet(x)) -> -TidyHouse(x))", "all x.((OwnsPet(x) & HasPet(x)) -> -TidyHouses(x))", "all x.(OwnsPet(x) -> -TidyHouses(x))", "all x y.((Person(x) & Pet(y) & Owns(x,y)) -> -TidyHouse(x))", "all x.(Owns(x,y) -> -TidyHouses(x))", "all x.((OwnsPet(x) & AtLeastOnePet(x)) -> -TidyHouses(x))", "all x.((Person(x) & OwnsPet(x)) -> -TidyHouses(x))", "all x.(OwnsAtLeastOnePet(x) -> -TidyHouses(x))", "all x y.((Person(x) & Pet(y) & Owns(x,y)) -> -TidyHouse(x))", "all x y.((Person(x) & OwnsPet(x,y)) -> -TidyHouse(x))", "all x.(OwnsPet(x) -> -TidyHouses(x))", "all x y.((Person(x) & Pet(y) & Owns(x,y)) -> -TidyHouse(x))", "exists x.(Pet(x) & Owns(x,y))", "exists x.(Pet(x) & Owns(x,y) & -HasTidyHouse(x))", "exists x.(Pet(x) & Owns(x,y))"]}
{"id": "folio_train_1705", "nl": "If people grew up with childhood pets, then they own at least one pet.", "fol": "all x.(GrewUpWithChildhoodPets(x) -> OwnAtLeastOnePet(x))", "prediction": ["all x.((Person(x) & GrownUpWithChildrenPets(x)) -> OwnsPet(x))", "all x.((People(x) & GrownUpWithChildrenPets(x)) -> OwnsAtLeastOnePet(x))", "all x.((Person(x) & GrownUpWithChildrenPets(x)) -> OwnsAtLeastOnePet(x))", "all x y.((Person(x) & GrowingUpWithChildren(x,y) & Pet(y)) -> Owns(x,y))", "all x.((People(x) & GrownUpWithChildrenPets(x)) -> OwnsPet(x))", "all x.(GrowsUpWithChildrenPets(x) -> OwnsAtLeastOnePet(x))", "all x y.((Person(x) & GrowingUpWithChildrenPets(x,y)) -> OwnsPet(x,y))", "all x.((Person(x) & grewUpWithChildren(x)) -> OwnsPet(x))", "all x.((People(x) & grewUpWithChildren(x)) -> OwnsAtLeastOnePet(x))", "all x y.((People(x) & ChildhoodPet(y) & GrownUpWith(x,y)) -> Owns(x,y))", "all x y.((Person(x) & ChildhoodPet(y) & GrownUpWith(x,y)) -> Owns(x,y))", "all x.(GrowthWithChildrenPets(x) -> OwnsAtLeastOnePet(x))", "all x.((Person(x) & GrownUpWithChildrenPets(x)) -> OwnsAtLeastOnePet(x))", "all x.((Popular(x) & GrowingUpWithChildrenPet(x)) -> OwnsAtLeastOnePet(x))", "all x y.((Person(x) & GrownUpWithChildrenPet(x,y)) -> OwnsPet(x,y))", "all x.((GrowthWithChildren(x) & Pet(x)) -> Owns(x,y))"]}
{"id": "folio_train_1706", "nl": "If people hire a maid or cleaning service, then they have tidy houses.", "fol": "all x.(HiredCleaningService(x) -> HasTidyHouse(x))", "prediction": ["all x.((HuntsMaid(x) | HiresCleaningService(x)) -> HasTidyHouses(x))", "all x.(HasMaidOrCleaningService(x) -> TidyHouses(x))", "all x y.((HuntsMaid(x) | HiresCleaningService(x)) -> HasTidyHouses(y))", "all x.(HuntsMaidOrCleaningService(x) -> TidyHouses(x))", "all x.((HuntsMaid(x) | HiresCleaningService(x)) -> TidyHouses(x))", "all x.((HoldsMaid(x) | HiresCleaningService(x)) -> HasTidyHouses(x))", "all x y.((HoldsMaid(x) | HiresCleaningService(x)) -> HasTidyHouses(y))", "all x y.((HuntsMaid(x) | HiresCleaningService(x)) -> CleanHouses(y))", "all x.(HasMaidOrCleaningService(x) -> CleanHouses(x))", "all x y.((HiresMaid(x) | HiresCleaningService(x)) -> CleanHouses(y))", "all x.((HiresMaid(x) | HiresCleaningService(x)) -> TidyHouses(x))", "all x.(HiresMaidOrCleaningService(x) -> TidyHouses(x))", "all x.(HuntsMaidOrCleaningService(x) -> TidyHouses(x))", "all x y.((HuntsMaid(x) | HiresCleaningService(x)) -> TidyHouses(y))", "exists x.(HuntsMaidOrCleaningService(x) & HasTidyHouses(x))", "all x y.((HiresMaid(x) | HiresCleaningService(x)) -> TidyHouses(y))"]}
{"id": "folio_train_1707", "nl": "If people live in the suburbs, then they have tidy houses.", "fol": "all x.(LivesInSuburbs(x) -> GrewUpWithChildhoodPets(x))", "prediction": ["all x.((Person(x) & LivesInSuburbs(x)) -> HasTidyHouses(x))", "all x.(LivesInSuburbs(x) -> HasTidyHouses(x))", "all x.((LivesInSuburbs(x) & HasTidyHouses(x)) -> HasTidyHouses(x))", "all x y.((Person(x) & Suburb(y)) -> HasTidyHouses(x,y))", "all x y.((Person(x) & LivesInSuburbs(x)) -> HasTidyHouses(x,y))", "all x.(LivesInSuburbs(x) -> HasTidyHouses(x))", "all x.((People(x) & LivesInSuburbs(x)) -> HasTidyHouses(x))", "all x.((Person(x) & LivesInSuburbs(x)) -> HasTidyHouses(x))", "all x y.((People(x) & LivesInSuburbs(x,y)) -> HasTidyHouses(x))", "all x y.((Person(x) & Suburb(y) & LivesIn(x,y)) -> HasTidyHouses(x))", "all x y.((Person(x) & LivesInSuburbs(x) & Suburbs(y)) -> HasTidyHouses(x,y))", "all x.(LivesInDepartments(x) -> HasTidyHouses(x))", "all x.((LivesInSuburbs(x) & HasTidyHouses(x)) -> HasTidyHouses(x))", "all x.(LivesInSuburbs(x) -> HasTidyHouses(x))", "exists x.(Department(x) & LivesIn(x,Department) & HasTidyHouses(x))", "exists x.(Department(x) & LivesIn(x,Department))"]}
{"id": "folio_train_1708", "nl": "Jack either does not hire a maid or cleaning service or, if he does, then he does not own at least one pet.", "fol": "-((HiredCleaningService(Jack) & -OwnAtLeastOnePet(Jack)) | (-HiredCleaningService(Jack) & OwnAtLeastOnePet(Jack)))", "prediction": ["all x.((Jack(x) & (-HasMaid(x) | HasCleaningService(x))) | (-HasPet(x) & OwnsPet(x))))", "((HuntsMaid(Jack) | HiresCleaningService(Jack))) | (-HuntsMaid(Jack) | OwnsPet(Jack))))", "(-HasMaidOrCleaningService(Jack) | (-HasPet(Jack) & OwnsPet(Jack))))", "all x.((Jack(x) & (-HuntsMaid(x) | -HuntsCleaningService(x))) -> -OwnsPet(x))", "(all x.((Jack(x) & -HasMaid(x)) | (-HasPet(x) & HasPet(x))))", "all x.((Jack(x) & -HasMaidOrCleaningService(x)) | (-HasPet(x) & OwnsPet(x))))", "all x y.((Jack(x) & Maid(y) & CleaningService(y)) -> (-Has(x,y) | Has(x,y)))", "((Jack) | (-HasMaid(Jack) | HasCleaningService(Jack)))) -> -HasPet(Jack))", "all x.((HuntsMaid(x) | HiresCleaningService(x)) | (-HuntsMaid(x) & OwnsPet(x))))", "all x.(HuntsMaidOrCleaningService(x) | (-HuntsMaidOrCleaningService(x) & -HuntsPet(x))))", "exists x.(Jack(x) & (-HasMaid(x) | -HasCleaningService(x)))", "(-HasMaidOrCleaningService(Jack) | (-HasPet(Jack) & Pet(Jack))))", "(all x.((Jack(x) & -HuntsMaid(x)) | (-HuntsCleaningService(x)))))", "((HuntsMaid(Jack) | HiresCleaningService(Jack))) | (-HuntsMaid(Jack) | OwnsPet(Jack))))", "all x.((Jack(x) & (-HuntsMaid(x) | -HuntsCleaningService(x))) -> -OwnsPet(x))", "all x y.((Jack(x) & Maid(y) & CleaningService(y)) -> (-Has(x,y) | -Has(x,y)))"]}
{"id": "folio_train_1709", "nl": "Jack lives in the suburbs.", "fol": "LivesInSuburbs(Jack)", "prediction": ["all x.(Jack(x) -> LivesInSuburbs(x))", "(LivesInSuburbs(Jack) & -LivesInSuburbs(Jack))", "(LivingInSuburbs(Jack) & LivesIn(Jack,Suburbs))", "-LivingInSuburbs(Jack)", "-exists x.(Jack(x) & LivesIn(x,Suburbs))", "Jack lives in the suburbs.", "all x.(Jack(x) -> LivesInSuburbs(x))", "(LivesInSuburbs(Jack) & LivesIn(Jack))", "all x y.((Jack(x) & Suburb(y)) -> LivesIn(x,y))", "(LivingInSuburbs(Jack) & LivesIn(Jack,Suburbs))", "all x.(Jack(x) -> LivesInSuburbs(x))", "(LivesInSuburbs(Jack) & -LivesInSuburbs(Jack))", "-LivesInSuburbs(Jack)", "all x.(Jack(x) -> LivesInDepartments(x))", "all x y.((Jack(x) & Suburb(y)) -> LivesIn(x,y))", "exists x.(Jack(x) & LivesIn(x,Suburbs))"]}
{"id": "folio_train_1710", "nl": "Jack does not live in the suburbs.", "fol": "-LivesInSuburbs(Jack)", "prediction": ["all x.(Jack(x) -> -LivesInSuburbs(x))", "(-LivesInSuburbs(Jack))", "-exists x.(Jack(x) & LivesIn(x,Suburbs))", "(LivesInSuburbs(Jack) & -LivesInSuburbs(Jack))", "Jack does not live in the suburbs.", "all x.(Jack(x) -> -LivesInSuburbs(x))", "-exists x.(Jack(x) & LivesIn(x,Suburbs))", "(-LivesInSuburbs(Jack))", "(LivesInSuburbs(Jack) | LivesInSuburbs(Jack)))", "-exists x.(Jack(x) & -LivesInSuburbs(x))", "-(LivesInSuburbs(Jack))", "all x.(Jack(x) -> -LivesInSuburbs(x))", "(-LivesInSuburbs(Jack))", "(LivingInSuburbs(Jack,y))", "-exists x.(Jack(x) & LivesIn(x,Suburbs))", "all x.(Jack(x) -> -LivesInSuburbs(x))"]}
{"id": "folio_train_1711", "nl": "Jack has a tidy house.", "fol": "HasTidyHouse(Jack)", "prediction": ["all x.(Jack(x) -> HasTidyHouse(x))", "(HasTidyHouse(Jack) & HasHouse(Jack))", "(TidyHouse(Jack) & House(Jack))", "Jack has tidyHouse(Jack)", "all x.(Jack(x) -> HasTidyHouse(x))", "(HasTidyHouse(Jack) & House(Jack))", "Jack has a tidyhouse.", "(HasHouse(Jack,y) & Trash(y))", "all x.((Jack(x) & House(y)) -> Tidy(x,y))", "(HasTidyHouse(Jack) & HasTidyHouse(Jack))", "all x.(HasTidyHouse(x) -> JackHas(x))", "all x.(Jack(x) -> HasTidyHouse(x))", "Jack has tidyHouse(Jack)", "all x.(Jack(x) -> HasTidyHouse(x))", "All x.(Jack(x) -> TidyHouse(x))", "all x.(Jack(x) -> HasTidyHouse(x))"]}
{"id": "folio_train_1712", "nl": "Jack neither lives in the suburbs nor owns at least one pet.", "fol": "(-LivesInSuburbs(Jack) & -OwnAtLeastOnePet(Jack))", "prediction": ["all x.((Jack(x) & -(LivesInSuburbs(x) | OwnsPet(x))) -> -(LivesInSuburbs(x) & OwnsPet(x))))", "-(LivesInSuburbs(Jack) | OwnsPet(Jack)))", "-exists x.(Jack(x) & -LivesInSuburbs(x) & -OwnsPet(x))", "all x.(Jack(x) -> (-LivesInSuburbs(x) & -OwnsPet(x)))", "(-exists x.(Jack(x) & LivesInSuburbs(x)) & exists y.(Jack(y) & Owns(x,y))))", "(LivingInSuburbs(Jack) | OwnsPet(Jack)))", "(exists x.(Jack(x) & -LivesInSuburbs(x)) & exists y.(Pet(y) & Owns(x,y))))", "-(LivesInSuburbs(Jack) & -OwnsPet(Jack))", "all x.((Jack(x) & -LivesInSuburbs(x) & -OwnsPet(x)) -> -LivesInSuburbs(x))", "(LivingInSuburbs(Jack) | OwnsAtLeastOnePet(Jack)))", "(exists x.(Jack(x) & LivesInSuburbs(x)) & exists y.(Jack(y) & Owns(x,y))))", "-exists x.(Jack(x) & -(LivesInSuburbs(x) | OwnsPet(x)))", "all x.(Jack(x) -> (-LivesInSuburbs(x) & -OwnsPet(x)))", "-(LivesInSuburbs(Jack) | OwnsPet(Jack)))", "-(LivesInSuburbs(Jack) | OwnsAtLeastOnePet(Jack)))", "-exists x.(Jack(x) & (LivesInSuburbs(x) | OwnsPet(x)))"]}
{"id": "folio_train_1713", "nl": "Jack grew up with childhood pets and lives in the suburbs.", "fol": "(GrewUpWithChildhoodPets(Jack) & LivesInSuburbs(Jack))", "prediction": ["all x.(Jack(x) -> (GrowsUpWithChildren(x) & LivesInSuburbs(x)))", "(GrowsUpWithChildren(Jack) & LivesInSuburbs(Jack))", "-(GrowsUpWithChildren(Jack) & LivesInSuburbs(Jack))", "(GrowsUpWithChildrenPets(Jack) & LivesInSuburbs(Jack))", "all x.((Jack(x) & ChildhoodPet(x)) -> (GrowsUpWith(x,y) & LivesInSuburbs(x)))", "all x y.((Jack(x) & ChildhoodPet(y)) -> (GrowsUpWith(x,y) & LivesInSuburbs(x)))", "(GrowthWithChildren(Jack) & LivesInSuburbs(Jack))", "Jack grewup with childhoodpets(Jack) & LivesInSuburbs(Jack))", "-(Jack(Jack) & ChildhoodPet(Jack)) & LivesInSuburbs(Jack))", "all x.(Jack(x) -> (GrowsUpWithChildren(x) & LivesInSuburbs(x)))", "all x.(Jack(x) -> (GrowsUpWithChildrenPets(x) & LivesInSuburbs(x)))", "Jack grewup with childhoodpets and lives in suburbs.", "(GrowsUpWithChildrenPets(Jack) & LivesInSuburbs(Jack))", "Jack grew up with childhood pets and lives in suburbs.", "(GrowthWithChildren(Jack) & LivesInSuburbs(Jack))", "all x.(Jack(x) -> (GrowsUpWithChildrenPets(x) & LivesInSuburbs(x)))"]}
{"id": "folio_train_1714", "nl": "A bottle is either standing upright or toppled over. ", "fol": "((IsUpright(Bottle) & -IsToppledOver(Bottle)) | (-IsUpright(Bottle) & IsToppledOver(Bottle)))", "prediction": ["all x.(Bottle(x) -> (StandsUpright(x) | ToppledOver(x)))", "all x.(Bloot(x) -> (StandsUpright(x) | ToppledOver(x)))", "all x.(Bottle(x) -> (StandsUpright(x) | ToppledOver(x)))", "all x y.((Bottle(x) & StandingUpright(x) & Bottle(y)) -> ToppledOver(y))", "all x y.((Bottle(x) & StandingUpright(y) & (ToppledOver(x,y) | StandingUpright(y))) -> Bottle(x))", "all x.(Beverage(x) -> (StandingUpright(x) | ToppledOver(x)))", "all x.(Bottle(x) -> (StandsUpright(x) | ToppledOver(x)))", "all x y.((Bottle(x) & StandingUpright(x) | ToppledOver(x)) -> Bottle(y))", "exists x.(Bottle(x) & StandingUpright(x) & ToppledOver(x))", "all x.(Bottle(x) -> (StandingUpright(x) | ToppledOver(x)))", "exists x.(Bottle(x) & StandingUpright(x) & ToppledOver(x))", "exists x.(Beverage(x) & StandsUpright(x) & ToppledOver(x))", "exists x.(Bottle(x) & (StandsUpright(x) | ToppledOver(x)))", "exists x.(Bottle(x) & StandingUpright(x) | ToppledOver(x))", "all x.(Beverage(x) -> (StandingUpright(x) | ToppledOver(x)))", "all x.(Boutique(x) -> (StandingUpright(x) | TorpledOver(x)))"]}
{"id": "folio_train_1715", "nl": "The bottle is not upright.", "fol": "-IsUpright(Bottle)", "prediction": ["all x.(Bottle(x) -> -Upright(x))", "-Upright(Boutique)", "the bottle is not upright.", "(-Upright(Boutique))", "all x.(Bottle(x) -> -Upright(x))", "the bottle is not upright.", "-UprightBoutique(b)", "All x.(Bloode(x) -> -Upright(x))", "(Boutique -Upright(Boutique))", "(-Upright(Blood))", "(NonUpright(Boutique))", "-UprightBoutique(Boutique)", "the bottle is not upright.", "all x.(Bottle(x) -> -Upright(x))", "The bottle is not upright.", "-UprightBoutique(b)"]}
{"id": "folio_train_1716", "nl": "The bottle is toppled over.", "fol": "IsToppledOver(Bottle)", "prediction": ["all x.(Boutique(x) -> ToppledOver(x))", "all x.(Bloode(x) -> ToppledOver(x))", "the bottle is toppledOver.", "(ToppledOver(Bloode) -> Bottle(Bloode))", "all x.(Bottle(x) -> ToppledOver(x))", "all x y.((Bottle(x) & Bottle(y)) -> ToppledOver(x,y))", "-ToppledOver(Boutique)", "the bottle is toppled over.", "(ToppledOver(Boutique)", "all x.(Bottle(x) -> ToppledOver(x))", "(ToppledOver(Bottle)", "All x.(Bloode(x) -> ToppledOver(x))", "all x.(Boutique(x) -> ToppledOver(x))", "All x.(Bloode(x) -> ToppledOver(x))", "all x.(Bottle(x) -> ToppledOver(x))", "exists x.(Bottle(x) & ToppledOver(x))"]}
{"id": "folio_train_1717", "nl": "If people eat cereal and milk every day for breakfast, then they have very busy morning schedules every day.", "fol": "all x.(EatsCerealAndMilk(x) -> HasBusyMorningSchedule(x))", "prediction": ["all x.((EatsCerealAndMilkEveryDay(x) & Breakfast(x)) -> BusyMorningSchedule(x))", "all x.((People(x) & EatsCerealAndMilkEveryDay(x) & Breakfast(x)) -> BusyMorningSchedule(x))", "all x y.((Person(x) & EatsCerealAndMilkEveryDay(x) & Breakfast(y)) -> BusyMorningSchedule(x,y))", "all x.(EatsCerealAndMilkEveryDayForBreakfast(x) -> BusyMorningSchedules(x))", "all x.((Person(x) & EatsCerealAndMilkEveryDay(x) & Breakfast(x)) -> BusyMorningSchedule(x))", "(EatsCerealAndMilkEveryDayForBreakfast(Person,Breakfast) & BusyMorningSchedule(Person,Breakfast))", "all x y.((People(x) & EatsCerealAndMilkEveryDay(x,y) & Breakfast(y)) -> BusyMorningSchedule(x))", "all x y z.((Person(x) & Cereal(y) & Milk(z) & EatsEveryDay(x,y) & Breakfast(x,z)) -> BusyMorningSchedule(x))", "(EatsCerealAndMilkEveryDayForBreakfast(Person,Breakfast) & BusyMorningSchedulesEveryDay(Person,Breakfast))", "all x y.((Person(x) & EatsCerealAndMilkEveryDay(x) & Breakfast(y)) -> BusyMorningSchedule(x,y))", "all x.((EatsCerealAndMilkEveryDay(x) & Breakfast(x)) -> BusyMorningSchedules(x))", "all x.(EatsCerealAndMilkEveryDayForBreakfast(x) -> BusyMorningSchedulesEveryDay(x))", "all x.((People(x) & EatsCerealAndMilkEveryDay(x) & Breakfast(x)) -> BusyMorningSchedules(x))", "all x.((Person(x) & EatsCerealAndMilkEveryDayForBreakfast(x)) -> VeryBusyMorningSchedulesEveryDay(x))", "all x y.((Person(x) & EatsCereal(x) & EatsMilk(x)) -> BusyMorningSchedule(y))", "all x.(EatsCerealAndMilkEveryDayForBreakfast(x) -> BusyMorningSchedules(x))"]}
{"id": "folio_train_1718", "nl": "All young children below the age of ten eat cereal and milk every day for breakfast.", "fol": "all x.(ChildrenUnderTen(x) -> HasBusyMorningSchedule(x))", "prediction": ["all x.((YoungChild(x) & UnderTen(x)) -> EatsCerealAndMilkEveryDay(x))", "all x y.((YoungChild(x) & UnderTen(x)) -> EatsCerealAndMilkEveryDay(x,y))", "all x.((Child(x) & UnderTen(x)) -> EatsCerealAndMilkEveryDayForBreakfast(x))", "all x.((YoungChild(x) & UnderTen(x)) -> EatsCerealAndMilk(x))", "(all x.((YoungChild(x) & UnderTen(x)) -> EatsCerealAndMilk(x)))", "all x.((Year(x) & UnderTen(x)) -> EatsCerealAndMilkEveryDay(x))", "all x y.((YoungChild(x) & UnderTen(x) & EatsCereal(x,y) & EatsMilk(x,y)) -> Breakfast(x))", "all x.((YoungChild(x) & BelowTen(x)) -> EatsCerealAndMilkEveryDayForBreakfast(x))", "all x.(YoungChild(x) -> (EatsCereal(x) & EatsMilk(x) & Breakfast(x)))", "all x.((YoungChild(x) & BelowAgeOf(x,10)) -> EatsCerealAndMilkEveryDay(x))", "all x y.((YoungChild(x) & UnderTen(x)) -> EatsCerealAndMilk(x,y))", "(all x.(BelowTen(x) -> EatsCerealAndMilk(x)))", "all x y.((YoungChild(x) & BelowAgeOf(x,y)) -> EatsCerealAndMilkEveryDay(x,y))", "all x.(YoungChild(x) -> EatsCerealAndMilkEveryDay(x))", "all x.((Kid(x) & UnderTen(x)) -> EatsCerealAndMilkEveryDayForBreakfast(x))", "all x.((YoungChild(x) & UnderTen(x)) -> EatsCerealAndMilk(x))"]}
{"id": "folio_train_1719", "nl": "People are either young children below the age of ten or have a lot of commitments they voluntarily signed up for.", "fol": "all x.((ChildrenUnderTen(x) & -Committments(x)) | (-ChildrenUnderTen(x) & Committments(x)))", "prediction": ["all x.((Person(x) & (BelowAge(x,10) | LotsOfCommitments(x))) -> YoungChild(x))", "all x.(Person(x) -> ((YoungChild(x) & BelowTen(x)) | LotsOfCommitments(x))))", "all x.(People(x) -> ((YoungChildrenBelowTen(x) | LotsOfCommitments(x))))", "(all x.(YoungChild(x) -> BelowTenAge(x)) | LotsOfCommitments(x)))", "all x.((People(x) & YoungChild(x) & UnderTen(x)) | LotsOfCommitments(x))", "all x y.((Person(x) & YoungChild(y)) -> (BelowAge(y,10) | LotsOfCommitments(x,y)))", "all x.((Person(x) & (BelowAge(x,10) | LotsOfCommitments(x))) -> YoungChild(x))", "all x.(Person(x) -> ((YoungChild(x) & UnderTen(x)) | LotsOfCommitments(x))))", "exists x.(People(x) & ((YoungChild(x) & BelowTen(x)) | LotsOfCommitments(x))))", "all x y.((Person(x) & YoungChild(y) & UnderTen(y)) | (VolunteerCommitments(x,y) & SignedUpFor(x,y))))", "all x y.((Person(x) & (YoungChild(x,y) | VoluntarilySignedUpFor(x,y))) -> (BelowAge(y,10) | LotsOfCommitments(x,y)))", "exists x.(Person(x) & ((YoungChild(x,10) & UnderTen(x)) | LotsOfCommitments(x))))", "exists x.(Popular(x) & ((YoungChildrenBelowTen(x) | VoluntarilySignedUpFor(x))) | ((YoungChildrenBelowTen(x) & VoluntarilySignedUpFor(x)))))", "exists x.(Person(x) & ((YoungChild(x,10) & BelowAge(x,10)) | LotsOfCommitments(x,10))))", "exists x.(People(x) & ((YoungChild(x) & UnderTen(x)) | LotsOfCommitments(x))))", "all x y.((Person(x) & YoungChild(y)) -> (BelowAge(y,10) | LotsOfCommitments(x,y)))"]}
{"id": "folio_train_1720", "nl": "If people have a lot of commitments they voluntarily signed up for, then they are hardworking individuals with high ambitions and goals for the future.", "fol": "all x.(Committments(x) -> IsHardworking(x))", "prediction": ["all x.((Person(x) & LotsOfCommitments(x) & VoluntarilySsignedUpFor(x)) -> HardworkingIndividual(x) & HighAmbitionsAndGoals(x))", "all x.((People(x) & LotsOfCommitments(x) & VoluntarilySsignedUpFor(x)) -> HardworkingIndividual(x) & HighAmbitionsAndGoals(x))", "all x y.((Person(x) & LotsOfCommitments(x) & VoluntarilySsignedUpFor(x)) -> HardworkingIndividual(x) & HighAmbitionsAndGoals(y))", "all x.((Person(x) & LotsOfCommitments(x) & VoluntarilySsignedUpFor(x)) -> HardworkingIndividual(x) & HighAmbitions(x) & HighGoalsForFuture(x))", "all x.((People(x) & LotsOfCommitments(x) & VoluntarilySsignedUpFor(x)) -> HardworkingIndividual(x) & HighAmbitionsAndGoalsForFuture(x))", "all x y.((Person(x) & VoluntarilySsignedUpFor(x) & LotsOfCommitments(x)) -> (HardworkingIndividual(x) & HighAmbitions(x) & HighGoalsForFuture(x)))", "all x.(VoluntarilySsignedUpFor(x) -> HardworkingIndividual(x))", "all x y.((People(x) & LotsOfCommitments(x) & VoluntarilySsignedUpFor(x)) -> HardworkingIndividual(x) & HighAmbitionsAndGoals(y))", "all x y.((Person(x) & LotsOfCommitments(x) & VoluntarilySsignedUpFor(x)) -> HardworkingIndividual(x) & HighAmbitionsAndGoals(x))", "all x.((People(x) & LotsOfCommitments(x) & VoluntarilySsignedUpFor(x)) -> HardworkingIndividual(x) & HighAmbitions(x) & HighGoalsForFuture(x))", "all x.((Person(x) & LotsOfCommitments(x) & VoluntarilySsignedUpFor(x)) -> HardworkingIndividual(x) & HighAmbitionsAndGoalsForFuture(x))", "all x.(VolunteerSignedUpFor(x) -> HardworkingIndividual(x))", "all x.((Person(x) & LotsOfCommitments(x)) -> (HardworkingIndividual(x) & HighAmbitions(x) & HighGoalsForFuture(x)))", "all x.((Person(x) & LotsOfCommitments(x) & VoluntarilySsignedUpFor(x)) -> HardworkingIndividual(x) & HighAmbitions(x) & HighGoalsForFuture(x))", "all x.(VoluntarilySignedUpFor(x) -> HardworkingIndividual(x))", "all x.((People(x) & LotsOfCommitments(x) & VoluntarilySsignedUpFor(x)) -> HardworkingIndividual(x) & HighAmbitionsAndGoals(x))"]}
{"id": "folio_train_1721", "nl": "If people are hardworking individuals with high ambitions and goals for the future, then they are not good at staying organized and motivated.", "fol": "all x.(IsHardworking(x) -> -IsOrganized(x))", "prediction": ["all x.((HardworkingIndividual(x) & HighAmbitions(x) & HighGoalsForFuture(x)) -> -GoodAtStayingOrganizedAndMotivated(x))", "all x.((People(x) & HardworkingIndividual(x) & HighAmbitions(x) & HighGoalsForFuture(x)) -> -GoodAtStayingOrganizedAndMotivated(x))", "all x.((HardworkingIndividual(x) & HighAmbitions(x) & HighGoals(x)) -> -GoodAtStayingOrganizedAndMotivated(x))", "(HardworkingIndividual(x) & HighAmbitionsAndGoals(x)) -> -GoodAtStayingOrganizedAndMotivated(x))", "all x.((Person(x) & HardworkingIndividual(x) & HighAmbitions(x) & HighGoalsForFuture(x)) -> -GoodAtStayingOrganizedAndMotivated(x))", "(all x.((HardworkingIndividual(x) & HighAmbitions(x) & HighGoals(x)) -> -GoodAtStayingOrganizedAndMotivated(x)))", "all x y.((Person(x) & HardworkingIndividual(x) & HighAmbitionsAndGoals(x) & HasForecast(x)) -> -GoodAtStayingOrganizedAndMotivated(x))", "all x.(HardworkingIndividual(x) & HighAmbitionsAndGoals(x)) -> -GoodAtStayingOrganizedAndMotivated(x))", "all x.((HardworkingIndividual(x) & HighAmbitionsAndGoals(x)) -> -GoodAtStayingOrganizedAndMotivated(x))", "all x y.((People(x) & HardworkingIndividual(x) & HighAmbitions(x) & HighGoals(x)) -> -GoodAtStayingOrganizedAndMotivated(x))", "all x.(HasHardworkingIndividuals(x) & HighAmbitionsAndGoalsForFuture(x)) -> -GoodAtStayingOrganizedAndMotivated(x))", "all x.((HardworkingIndividual(x) & HasHighAmbitions(x) & HasGoalsForFuture(x)) -> -GoodAtStayingOrganizedAndMotivated(x))", "all x.((HardworkingIndividual(x) & HighAmbitions(x) & HighGoalsForFuture(x)) -> -GoodAtStayingOrganizedAndMotivated(x))", "all x.(HardworkingIndividual(x) & HighAmbitionsAndGoals(x)) -> -GoodAtStayingOrganizedAndMotivated(x))", "all x.((People(x) & HardworkingIndividual(x) & HighAmbitionsAndGoals(x)) -> -GoodAtStayingOrganizedAndMotivated(x))", "all x.((HardworkingIndividual(x) & HighAmbitionsAndGoals(x)) -> -GoodAtStayingOrganizedAndMotivated(x))"]}
{"id": "folio_train_1722", "nl": "John either is both a hardworking individual with high ambitions and goals for the future and has busy morning schedules every day, or he is neither a hardworking individual with high ambitions and goals for the future nor does he have a busy morning schedule every day.", "fol": "((IsHardworking(John) & HasBusyMorningSchedule(John) & -(-IsHardworking(John) & -HasBusyMorningSchedule(John))) | (-(IsHardworking(John) & HasBusyMorningSchedule(John)) & -IsHardworking(John) & -HasBusyMorningSchedule(John)))", "prediction": ["((HardworkingIndividual(John) & HighAmbitionsAndGoals(John) & BusyMorningSchedules(John)) | (-HardworkingIndividual(John) & HighAmbitionsAndGoals(John) & BusyMorningSchedules(John))))", "all x.(John(x) -> ((HardworkingIndividual(x) & HighAmbitionsAndGoals(x) & BusyMorningSchedulesEveryDay(x)) | (-HardworkingIndividual(x) & HighAmbitionsAndGoals(x) & BusyMorningSchedulesEveryDay(x)))))", "(HardworkingIndividual(John) & HighAmbitionsAndGoalsForFuture(John) & BusyMorningSchedulesEveryDay(John)) | (-HardworkingIndividual(John) & HighAmbitionsAndGoalsForFuture(John) & BusyMorningSchedulesEveryDay(John))))", "(all x.(John(x) -> (HardworkingIndividual(x) & HighAmbitionsAndGoalsForFuture(x) & BusyMorningSchedulesEveryDay(x))) | (-HardworkingIndividual(x) & HighAmbitionsAndGoalsForFuture(x) & BusyMorningSchedulesEveryDay(x)))))", "either ((HardworkingIndividual(John) & HighAmbitionsAndGoals(John) & BusyMorningSchedulesEveryDay(John)) | (-HardworkingIndividual(John) & HighAmbitionsAndGoals(John) & BusyMorningSchedulesEveryDay(John))))", "all x.((John(x) & HardworkingIndividual(x) & HighAmbitionsAndGoals(x) & BusyMorningSchedules(x)) | (-HardworkingIndividual(x) & HighAmbitionsAndGoals(x) & BusyMorningSchedules(x))))", "all x y.((HardworkingIndividual(x) & HardworkingIndividual(y) & HighAmbitionsAndGoals(x) & BusyMorningSchedules(x)) | (-HardworkingIndividual(y) & HighAmbitionsAndGoals(y) & BusyMorningSchedules(y))))", "((HardworkingIndividual(John) & HighAmbitionsAndGoals(John)) | (-HardworkingIndividual(John) & HighAmbitionsAndGoals(John))))", "((HardworkingIndividual(John) & HighAmbitionsAndGoalsForFuture(John)) | (-HardworkingIndividual(John) & HighAmbitionsAndGoalsForFuture(John))))", "(all x.(John(x) -> (HardworkingIndividual(x) & HighAmbitions(x) & HighGoals(x) & BusyMorningSchedules(x))) | (-HardworkingIndividual(x) & HighAmbitions(x) & HighGoals(x) & BusyMorningSchedules(x)))))", "all x y.((HardworkingIndividual(x) & HardworkingIndividual(y) & HighAmbitionsAndGoals(x,y) & BusyMorningSchedulesEveryDay(x)) | (-HardworkingIndividual(y) & HighAmbitionsAndGoals(y) & BusyMorningSchedulesEveryDay(y))))", "all x.(John(x) -> ((HardworkingIndividual(x) & HighAmbitionsAndGoals(x) & BusyMorningSchedulesEveryDay(x)) | (-HardworkingIndividual(x) & HighAmbitionsAndGoals(x) & BusyMorningSchedulesEveryDay(x))))", "(HardworkingIndividual(John) & HighAmbitionsAndGoalsForFuture(John) & BusyMorningSchedulesEveryDay(John)) | (-HardworkingIndividual(John) & HighAmbitionsAndGoalsForFuture(John) & BusyMorningSchedulesEveryDay(John))))", "((HardworkingIndividual(John) & HighAmbitionsAndGoals(John) & BusyMorningSchedulesEveryDay)) | (-HardworkingIndividual(John) & HighAmbitionsAndGoals(John) & BusyMorningSchedulesEveryDay(John))))", "all x.(John(x) -> ((HardworkingIndividual(x) & HighAmbitionsAndGoalsForFuture(x) & BusyMorningSchedulesEveryDay(x)) | (-HardworkingIndividual(x) & HighAmbitionsAndGoalsForFuture(x) & BusyMorningSchedulesEveryDay(x))))", "exists x.(John(x) & ((HardworkingIndividual(x) & HighAmbitions(x) & HighGoals(x) & BusyMorningSchedules(x)) | (-HardworkingIndividual(x) & HighAmbitions(x) & HighGoals(x) & BusyMorningSchedules(x)))))"]}
{"id": "folio_train_1723", "nl": "John is good at staying organized and motivated.", "fol": "IsOrganized(John)", "prediction": ["all x.(John(x) -> (GoodAtStayingOrganized(x) & Motivated(x)))", "(GoodAtStayingOrganized(John) & Motivated(John))", "all x.((John(x) & Organized(x) & Motivated(x)) -> GoodAtStaying(x))", "John is good at stayingorganized and motivated.", "-(GoodAtStayingOrganized(John) & Motivated(John))", "(GoodOrganization(John) & Motivated(John))", "all x.(John(x) -> (GoodAtStayingOrganized(x) & Motivated(x)))", "all x.((John(x) & Organization(x) & Motivation(x)) -> GoodAtStaying(x))", "(GoodOrganized(John) & Motivated(John))", "(GoodAtStayingOrganized(John) & Motivated(John))", "John is good at stayingorganized and motivated.", "-(GoodAtStayingOrganized(John) & Motivated(John))", "(GoodAtOrganizing(John) & Motivated(John))", "John is good at staying organized and motivated.", "all x.(John(x) -> (GoodAtStayingOrganized(x) & Motivated(x)))", "John is good at stayingorganized and motivated."]}
{"id": "folio_train_1724", "nl": "John eats cereal and milk every day for breakfast.", "fol": "EatsCerealAndMilk(John)", "prediction": ["(EatsCereal(John) & EatsMilk(John))", "all x.((John(x) & EatsCereal(x) & EatsMilk(x)) -> Breakfast(x))", "all x.(John(x) -> (EatsCereal(x) & EatsMilk(x)))", "all x y.((John(x) & Breakfast(y)) -> (EatsCereal(x,y) & EatsMilk(x,y)))", "John EatsCerealAndMilkEveryDayForBreakfast.", "-EatsCerealAndMilk(John)", "John eats cereal and milk every day for breakfast.", "(EatsCereal(John) & EatsMilk(John))", "all x.((John(x) & Breakfast(x)) -> EatsCerealAndMilk(x))", "John EatsCerealAndMilkEveryDayForBreakfast(John,Breakfast)", "(EatsCerealAndMilk(John,Breakfast) & EveryDay(John,Breakfast))", "all x.(John(x) -> (EatsCereal(x) & EatsMilk(x) & Breakfast(x)))", "(EatsCerealAndMilk(John) & Breakfast(John))", "(EatsCereal(John) & EatsMilk(John))", "John EatsCerealAndMilk(John)", "(EatsCerealAndMilk(John) & Breakfast(John))"]}
{"id": "folio_train_1725", "nl": "John is either a hardworking individual with high ambitions and goals for the future or is good at staying organized and motivated.", "fol": "(IsHardworking(John) | IsOrganized(John))", "prediction": ["all x.(John(x) -> (HardworkingIndividual(x) & (HighAmbitions(x) & HighGoals(x)) | GoodAtStayingOrganized(x) & Motivated(x))))", "(HardworkingIndividual(John) & (HighAmbitions(John) | GoodAtStayingOrganized(John) & Motivated(John)))", "(HardworkingIndividual(John) & (HighAmbitions(John) & HighGoals(John)) | GoodAtStayingOrganized(John) & Motivated(John)))", "all x.(John(x) -> ((HardworkingIndividual(x) & HighAmbitions(x) & HighGoals(x)) | (GoodAtStayingOrganized(x) & Motivated(x))))", "all x.((John(x) & HardworkingIndividual(x) & HighAmbitionsAndGoals(x)) | (GoodAtStayingOrganized(x) & Motivated(x))))", "((HardworkingIndividual(John) & HighAmbitionsAndGoals(John)) | (GoodAtStayingOrganized(John) & Motivated(John))))", "all x.(John(x) -> ((HardworkingIndividual(x) & HighAmbitionsAndGoals(x)) | (GoodAtStayingOrganized(x) & Motivated(x))))", "(HardworkingIndividual(John) & HighAmbitionsAndGoals(John)) | (GoodAtStayingOrganized(John) & Motivated(John))))", "all x.(John(x) -> (HardworkingIndividual(x) & (HighAmbitions(x) | HighGoals(x))) | GoodAtStayingOrganized(x) & Motivated(x)))", "all x.((HardworkingIndividual(x) & HighAmbitionsAndGoals(x)) | (GoodAtStayingOrganized(x) & Motivated(x))))", "(HardworkingIndividual(John) & (HighAmbitions(John) | HighGoals(John))) | GoodAtStayingOrganized(John)))", "all x y.((John(x) & Hardworking(x) & HighAmbitionsAndGoals(x)) | (GoodAtStayingOrganized(x) & Motivated(x))))", "all x.(John(x) -> (HardworkingIndividual(x) & (HighAmbitions(x) & GoalsForFuture(x) | GoodAtStayingOrganized(x) & Motivated(x))))", "(HardworkingIndividual(John) & HighAmbitionsAndGoalsForFuture(John) | GoodAtStayingOrganizedAndMotivated(John)))", "(HardworkingIndividual(John) & (HighAmbitions(John) | GoodAtStayingOrganized(John) & Motivated(John)))", "exists x.(John(x) & ((HardworkingIndividual(x) & HighAmbitions(x) & HighGoals(x)) | (GoodAtStayingOrganized(x) & Motivated(x)))))"]}
{"id": "folio_train_1726", "nl": "Ableton has an office in Germany.", "fol": "HasOfficeIn(Ableton,Germany)", "prediction": ["Ableton exists x.(Office(x) & In(x,Germany))", "all x.(Ableton(x) -> HasOfficeInGermany(x))", "Ableton has an office in Germany.", "(Office(Ableton) & InGermany(Ableton))", "-exists x.(Ableton(x) & Office(x,Germany))", "(exists x.(Ableton(x) & Office(x,Germany)))", "(Office(Ableton) & In(Ableton,Germany))", "Ableton exists x.(Office(x) & InGermany(x))", "all x.(Ableton(x) -> exists y.(Office(y) & In(x,y))))", "all x.(Ableton(x) -> HasOfficeInGermany(x))", "Ableton has an office in Germany.", "(Altoon(Ableton) & OfficeInGermany(Ableton))", "Ableton has office in Germany.", "Ableton exists x.(Office(x) & In(x,Germany))", "All x.(Ableton(x) -> HasOfficeInGermany(x))", "Ableton has an office in Germany."]}
{"id": "folio_train_1727", "nl": "Ableton has an office in the USA.", "fol": "HasOfficeIn(Ableton,Usa)", "prediction": ["all x.(Ableton(x) -> HasOfficeInUSA(x))", "Ableton has an office in the USA.", "Ableton exists x.(Office(x) & InUSA(x))", "(Office(Ableton) & InUSA(Ableton))", "-exists x.(Ableton(x) & OfficeIn(x,USA))", "all x.(Ableton(x) -> exists y.(USAOffice(y) & HasOffice(x,y)))", "(Ableton(a) & OfficeInUSA(a))", "(AbletonOffice(Ableton) & InUSA(Ableton))", "all x.(Ableton(x) -> HasOfficeInUSA(x))", "Ableton has an office in the USA.", "(Office(Ableton) & InUSA(Ableton))", "Ableton exists x.(Office(x) & InUSA(x))", "Ableton has an office in USA.", "all x.(Ableton(x) -> exists y.(USAOffice(y) & HasOffice(x,y)))", "All x.(Ableton(x) -> HasOffice(x,USA))", "Ableton has OfficeInUSA."]}
{"id": "folio_train_1728", "nl": "USA and Germany are different countries.", "fol": "-DifferentCountries(Germany,Usa)", "prediction": ["all x.((USA(x) & Germany(x)) -> DifferentCountries(x))", "(DifferentCountries(USA,Germany))", "(DifferentCountries(USA) & DifferentCountries(Germany))", "(SameCountry(USA) & DifferentCountry(Germany))", "all x.((USA(x) | Germany(x)) -> DifferentCountries(x))", "(Land(USA) & Land(Germany))", "all x y.((USA(x) & Germany(y)) -> DifferentCountries(x,y))", "((USA(USA) | Germany(Germany)))", "all x.((USA(x) & Germany(x)) -> DifferentCountries(x))", "((USA(USA) | Germany(Germany)) & DifferentCountries(USA,Germany))", "-(Country(USA) | Country(Germany))", "(DifferentCountries(USA,Deutschland))", "all x y.((USA(x) & Germany(y)) -> DifferentCountries(x,y))", "all x.((USA(x) | Germany(x)) -> DifferentCountries(x))", "(Land(USA) & Land(Germany))", "(DifferentCountries(USA,Deutschland))"]}
{"id": "folio_train_1729", "nl": "Any company that has offices in different countries is a multinational company.", "fol": "all z.((HasOfficeIn(x,y) & HasOfficeIn(x,z) & -DifferentCountries(y,z)) -> IsMultinational(x))", "prediction": ["all x.((Company(x) & HasOfficesInDifferentCountries(x)) -> MultinationalCompany(x))", "all x y.((Company(x) & OfficesInDifferentCountries(x,y)) -> MultinationalCompany(x))", "all x.((Company(x) & HasOfficesInDifferentCountries(x)) -> MultinationalCompany(x))", "all x.((Company(x) & OfficesInDifferentCountries(x)) -> MultinationalCompany(x))", "all x y.((Company(x) & OfficesInDifferentCountries(x,y)) -> MultinationalCompany(x))", "all x.((Company(x) & HasOfficesInDifferentCountries(x)) -> MultinationalCompany(x))", "all x.((Company(x) & HasOfOfficesInDifferentCountries(x)) -> MultinationalCompany(x))", "all x y.((Company(x) & Office(y) & HasOfficesInDifferentCountries(x,y)) -> MultinationalCompany(x))", "all x.((Company(x) & OfficesInDifferentCountries(x)) -> MultinationalCompany(x))", "all x y.((Company(x) & OfficesInDifferentCountries(x,y)) -> MultinationalCompany(x))", "all x.((Company(x) & HasOfficesInDifferentCountries(x)) -> MultinationalCompany(x))", "all x y.((Company(x) & OfficesInDifferentCountries(x)) -> MultinationalCompany(x))", "all x.((Company(x) & OfficesInDifferentCountries(x)) -> MultinationalCompany(x))", "all x.((Company(x) & HasOfOfficesInDifferentCountries(x)) -> MultinationalCompany(x))", "all x.((Company(x) & HasOfficesInDifferentCountries(x)) -> MultinationalCompany(x))", "all x.((Company(x) & OfficesInDifferentCountries(x)) -> MultinationalCompany(x))"]}
{"id": "folio_train_1730", "nl": "Ableton makes music software.", "fol": "ProducesMusicSoftware(Ableton)", "prediction": ["all x.(Ableton(x) -> MakesMusicSoftware(x))", "(MadeInAbleton(Ableton) -> MakesMusicSoftware(Ableton))", "all x.(Ableton(x) -> MakesMusicSoftware(x))", "all x y.((Ableton(x) & MusicSoftware(y)) -> Makes(x,y))", "Ableton makes musicsoftware.", "AbletonMakesMusicSoftware(Ableton,MadeInSoftware(Ableton,MadeInSoftware(Ableton))", "(MakesMusicSoftware(Ableton) -> MakesMusicSoftware(Ableton))", "Ableton makes musicSoftware(Ableton)", "all x.(Ableton(x) -> MakesMusicSoftware(x))", "all x y.((Ableton(x) & MusicSoftware(y)) -> Makes(x,y))", "All x.(Altason(x) -> MakesMusicSoftware(x))", "Ableton makes musicsoftware.", "all x.(Ableton(x) -> MakesMusicSoftware(x))", "all x.(Ableton(x) -> MakesMusicSoftware(x))", "exists x.(Ableton(x) & MusicSoftware(x))", "all x.(Ableton(x) -> MakesMusicSoftware(x))"]}
{"id": "folio_train_1731", "nl": "Ableton is a multinational company.", "fol": "IsMultinational(Ableton)", "prediction": ["all x.(Ableton(x) -> MultinationalCompany(x))", "Ableton is a multinational company.", "(MultinationalCompany(Ableton))", "all x.(Ableton(x) -> MultinationalCompany(x))", "(MillionaireCompany(Ableton) & FoundedIn(Ableton,MillionaireCompany))", "Ableton is a multinational company.", "(MultinationalCompany(Ableton))", "all x.(Ableton(x) -> MultinationalCompany(x))", "Ableton is a multinational company.", "(MultinationalCompany(Ableton))", "all x.(Ableton(x) -> MultinationalCompany(x))", "Ableton is a multinational company.", "Ableton is a multinational company.", "all x.(Ableton(x) -> MultinationalCompany(x))", "all x.(Ableton(x) -> MultinationalCompany(x))", "All x.(Ableton(x) -> MultinationalCompany(x))"]}
{"id": "folio_train_1732", "nl": "Ableton makes AI software.", "fol": "MakesAIsoftware(Ableton)", "prediction": ["all x.(Ableton(x) -> MakesAISoftware(x))", "Ableton makes AISoftware.", "(MakesAISoftware(Ableton) -> MakesAISoftware(Ableton))", "all x.(Ableton(x) -> MakesAISoftware(x))", "all x y.((Ableton(x) & AISoftware(y)) -> Makes(x,y))", "AbletonMakesAISoftware(Ableton)", "Ableton makes AISoftware.", "all x.(Ableton(x) -> MakesAISoftware(x))", "(MakesAISoftware(Ableton) -> MakesAISoftware(Ableton))", "AbletonMakesAISoftware(Ableton,Aid))", "all x y.((Ableton(x) & AISoftware(y)) -> Makes(x,y))", "Ableton makes AISoftware.", "all x.(Ableton(x) -> MakesAISoftware(x))", "(MakesAISoftware(Ableton) -> MakesAISoftware(Ableton))", "all x.(Ableton(x) -> MakesAISoftware(x))", "All x.(Ableton(x) -> MakesAISoftware(x))"]}
{"id": "folio_train_1733", "nl": "Ableton does not have an office in Germany.", "fol": "-HasOfficeIn(Ableton,Germany)", "prediction": ["Ableton -exists x.(Office(x) & In(x,Germany))", "(-exists x.(Ableton(x) & Office(x,Germany)))", "Ableton -HasOfficeInGermany(Ableton)", "Ableton has no office in Germany.", "(-exists x.(Ableton(x) & OfficeInGermany(x)))", "Ableton does not have an office in Germany.", "Ableton -exists x.(Office(x) & In(x,Germany))", "(-HasOfficeInGermany(Ableton))", "(-exists x.(AbletonOffice(x) & LocatedIn(x,Germany)))", "-exists x.(Ableton(x) & Office(x) & In(x,Germany))", "(Ableton) - exists en Deutsch.", "Ableton -HasOfficeInGermany(Ableton)", "Ableton has no office in Germany.", "-HasOfficeInGermany(Ableton)", "Ableton does not have office in Germany.", "-exists x.(Ableton(x) & HasOffice(x,Germany))"]}
{"id": "folio_train_1734", "nl": "Every swimmer can go underwater.", "fol": "all x.(IsSwimmer(x) -> CanGoUnderwater(x))", "prediction": ["all x.(Swimmer(x) -> CanGoUnderwater(x))", "all x.(Swimmer(x) -> CanGoUnderwater(x))", "all x y.((Swimmer(x) & Ocean(y)) -> CanGoUnderwater(x,y))", "all x.(Swimmer(x) -> CanGoUnderwater(x))", "all x y.((Swimmer(x) & Swimmer(y)) -> CanGoUnderwater(x,y))", "all x.(Swimmer(x) -> CanGoUnderwater(x))", "all x.(Swimmer(x) -> GoUnderwater(x))", "all x y.((Swimmer(x) & Waterfall(y)) -> CanGoUnderwater(x,y))", "all x.(Swimmer(x) -> CanGoUnderwater(x))", "exists x.(Swimmer(x) & GoesUnderwater(x))", "all x.(Swimmer(x) -> CanGoUnderwater(x))", "exists x.(Swimmer(x) & GoesUnderwater(x))", "exists x.(Swimmer(x) & GoesUnderwater(x))", "all x.(Swimmer(x) -> CanGoUnderwater(x))", "exists x.(Swimmer(x) & Underwater(x))", "exists x.(Swimmer(x) & CanGoUnderwater(x))"]}
{"id": "folio_train_1735", "nl": "Everyone that eats fish they catch themselves is a swimmer.", "fol": "all x.(CatchesAndEatsFish(x) -> IsSwimmer(x))", "prediction": ["all x.((EatsFish(x) & CatchesFish(x)) -> Swimmer(x))", "all x.((EatsFish(x) & CatchesFish(x)) -> Swimmer(x))", "all x.((EatsFish(x) & CatchesFish(x)) -> Swimmer(x))", "all x y.((EatsFish(x) & CatchesFish(x)) -> Swimmer(y))", "all x y.((EatsFish(x) & CatchesFish(x) & EatsFish(x,y)) -> Swimmer(x))", "all x.((EatsFish(x) & CatchesFish(x)) -> Swimmer(x))", "all x.(EatsFish(x) -> Swimmer(x))", "all x.((EatsFish(x) & CatchesFish(x)) -> Swimmer(x))", "all x.((Eats(x,Fish) & Catches(x)) -> Swimmer(x))", "all x y.((EatsFish(x) & CatchesFish(x)) -> Swimmer(y))", "all x.((EatsFish(x) & Catches(x)) -> Swimmer(x))", "all x.((Eats(x,fish) & Catch(x)) -> Swimmer(x))", "all x.((EatsFish(x) & CatchesFish(x)) -> Swimmer(x))", "all x.(EatsFish(x) -> Swimmer(x))", "all x.((Eats(x,Fish) & Catches(x,Fish)) -> Swimmer(x))", "all x.((EatsFish(x) & CatchesFish(x)) -> Swimmer(x))"]}
{"id": "folio_train_1736", "nl": "Every penguin eats fish they catch themselves.", "fol": "all x.(IsPenguin(x) -> CatchesAndEatsFish(x))", "prediction": ["all x.(Penguin(x) -> (EatsFish(x) & Catches(x)))", "all x.(Penguin(x) -> EatsFish(x))", "all x y.((Penguin(x) & Fish(y) & Catches(x,y)) -> Eats(x,y))", "(all x.(Penguin(x) -> EatsFish(x)))", "all x.(Penguin(x) -> (EatsFish(x) & CatchesFish(x)))", "all x y.((Penguin(x) & Fish(y) & Catch(x,y)) -> Eats(x,y))", "all x.(Penguin(x) -> EatsFish(x))", "all x.(Penguin(x) -> (EatsFish(x) & Catches(x)))", "(all x.(Penguin(x) -> EatsFish(x)))", "all x.(Penguin(x) -> (EatsFish(x) & Catches(x)))", "all x y.((Penguin(x) & Fish(y) & Catches(x,y)) -> Eats(x,y))", "all x y.((Penguin(x) & Fish(y) & Catch(x,y)) -> Eats(x,y))", "all x.(Penguin(x) -> EatsFish(x))", "all x.(Penguin(x) -> EatsFish(x))", "all x.(Penguin(x) -> (EatsFish(x) & Catches(x)))", "exists x.(Penguin(x) & EatsFish(x,y) & Catch(y) & Catch(z))"]}
{"id": "folio_train_1737", "nl": "All nonflying birds in Antarctica are penguins.", "fol": "all x.(IsNonFlyingBirdInAntarctica(x) -> IsPenguin(x))", "prediction": ["all x.((NonFlyingBird(x) & InAntarctica(x)) -> Penguin(x))", "all x.((Bird(x) & NonFlying(x) & InAntarctica(x)) -> Penguin(x))", "all x.(NonFlyingBird(x) -> Penguin(x))", "all x y.((NonFlyingBird(x) & Antarctica(y) & InAntarctica(x,y)) -> Penguin(x))", "all x.((NonFlyingBird(x) & InAntarctica(x)) -> Penguin(x))", "all x.((Bird(x) & NonFlying(x) & Antarctica(x)) -> Penguin(x))", "all x.(NonFlyingBird(x) -> Penguin(x))", "all x y.((NonFlyingBird(x) & Antarctica(y)) -> Penguin(x))", "all x.((NonFlyingBird(x) & Antarctica(x)) -> Penguin(x))", "all x y.((Bird(x) & NonFlying(x,y) & Antarctica(y)) -> Penguin(x))", "all x.((Bird(x) & NonFlyingInAntarctica(x)) -> Penguin(x))", "(all x.(NonflyingBird(x) & InAntarcticAntarctica(x)) -> Penguin(x))", "(all x.(NonFlyingBird(x) -> Penguin(x))", "all x.(NonFlyingBird(x) -> Penguin(x))", "all x.(NonFlyingBird(x) -> Penguin(x))", "all x.(NonflyingBird(x) -> Penguin(x))"]}
{"id": "folio_train_1738", "nl": "Fido is a penguin or a swimmer.", "fol": "(IsPenguin(Fido) | IsSwimmer(Fido))", "prediction": ["all x.(Fido(x) -> (Penguin(x) | Swimmer(x)))", "(Penguin(Fido) | Swimmer(Fido))", "all x.(Fido(x) -> (Penguin(x) | Swimmer(x)))", "all x.(Fido(x) -> (Penguin(x) | Swimmer(x)))", "(Penguin(Fido) | Swimmer(Fido))", "all x.(Fido(x) -> (Penguin(x) | Swimmer(x)))", "all x.(Fido(x) -> (Penguin(x) | Swimmer(x)))", "(Penguin(Fido) | Swimmer(Fido))", "all x y.((Fido(x) & Penguin(y)) | Swimmer(y))", "all x.(Fido(x) -> (Penguin(x) | Swimmer(x)))", "exists x.(Penguin(x) | Swimmer(x))", "(Penguin(Fido) | Swimmer(Fido))", "all x.(Fido(x) -> (Penguin(x) | Swimmer(x)))", "exists x.(Penguin(x) | Swimmer(x))", "(Penguin(Fido) | Swimmer(Fido))", "(Penguin(Fido) | Swimmer(Fido))"]}
{"id": "folio_train_1739", "nl": "Fido eats fish they catch themselves.", "fol": "CatchesAndEatsFish(Fido)", "prediction": ["all x.(Fido(x) -> (EatsFish(x) & Catches(x)))", "all x y.((Fido(x) & Fish(y)) -> Eats(x,y))", "all x.(Fido(x) -> EatsFish(x))", "all x.((Fido(x) & Fish(x)) -> Eats(x,y))", "(EatsFish(Fido,Fish) & CatchesOf(Fido,Fish))", "(EatsFish(Fido,Fido) & CatchesFish(Fido,Fido))", "all x y.((Fido(x) & Fish(y)) -> Eats(x,y))", "all x y z.((Fido(x) & Fish(y) & Fish(z) & Catch(z)) -> Eats(x,y,z))", "all x.(Fido(x) -> (EatsFish(x) & Catches(x)))", "(EatsFish(Fido) & CatchesFish(Fido))", "all x y.((Fido(x) & Fish(y) & Catch(y)) -> Eats(x,y))", "all x.(Fido(x) -> (EatsFish(x) & CatchesFish(x)))", "(EatsFishes(Fido) & CatchesFish(Fido))", "all x.((Fido(x) & Fish(y)) -> Eats(x,y))", "(EatsFish(Fido,Fish) & CatchesOfself(Fido,Fish))", "all x y.((Fido(x) & Fish(y)) -> Eats(x,y))"]}
{"id": "folio_train_1740", "nl": "Fido is neither a non-flying bird nor can Fido go underwater.", "fol": "(-NonFlyingBird(Fido) & -CanGoUnderwater(Fido))", "prediction": ["all x.(Fido(x) -> (-NonFlyingBird(x) & -CanGoUnderwater(x)))", "(-FlyingBird(Fido) & -UnderwaterBird(Fido))", "Fido is -(NonFlyingBird(Fido) & -CanGoUnderwater(Fido))", "-(NonFlyingBird(Fido) & -CanGoUnderwater(Fido))", "(NeitherNonFlyingBird(Fido) & -CanGoUnderwater(Fido))", "(NonFlyingBird(Fido) & -CanGoUnderwater(Fido))", "(-FlyingBird(Fido) & -UnderwaterBird(Fido))", "-(NonFlyingBird(Fido) & -UnderwaterBird(Fido))", "all x.(Fido(x) -> (-NonFlyingBird(x) & -CanGoUnderwater(x)))", "Fido is neither a non-flyingBird(Fido) & -CanGoUnderwater(Fido))", "(-FlyingBird(Fido) | CanGoUnderwater(Fido)))", "all x.(Fido(x) -> (-FlyingBird(x) & -UnderwaterBird(x)))", "-(NonFlyingBird(Fido) | CanGoUnderwater(Fido))", "(-FlyingBird(Fido) & -UnderwaterBird(Fido))", "-(NonFlyingBird(Fido) | CanGoUnderwater(Fido))", "all x.(Fido(x) -> (-NonFlyingBird(x) & -CanGoUnderwater(x)))"]}
{"id": "folio_train_1741", "nl": "If Fido can either go underwater or is a swimmer, then Fido is a nonflying bird in Antartica.", "fol": "((CanGoUnderwater(Fido) | IsSwimmer(Fido)) -> NonFlyingBirdAntarctica(Fido))", "prediction": ["all x.((Bird(x) & (GoesUnderwater(x) | Swimmer(x))) -> NonFlyingInAntartica(x))", "all x.((Fido(x) & (GoesUnderwater(x) | Swimmer(x))) -> NonFlyingBirdInAntartica(x))", "((Fido) & (GoesUnderwater(Fido) | Swimmer(Fido))) -> NonFlyingBirdInAntartica(Fido))", "all x y.((Bird(x) & Fido(y) & (GoesUnderwater(y) | Swimmer(y))) -> NonFlying(x,y))", "all x.((Bird(x) & (GoesUnderwater(x) | Swimmer(x))) -> NonFlying(x))", "all x.((Fido(x) & (GoesUnderwater(x) | Swimmer(x))) -> NonFlyingBird(x))", "all x y.((Fido(x) & (GoesUnderwater(x) | Swimmer(x))) -> NonFlyingBirdInAntartica(x))", "(all x.((Fido(x) & GoUnderwater(x)) | Swimmer(x)) -> NonFlyingBird(x))", "all x.(NonFlyingBird(x) -> (GoesUnderwater(x) | Swimmer(x)))", "all x y.((Bird(x) & Fido(x) & (GoesUnderwater(x) | Swimmer(x))) -> NonFlyingInAntartica(x))", "(NonFlyingBirdInAntartica(Fido))", "all x.((Bird(x) & (GoesUnderwater(x) | Swimmer(x))) -> NonFlyingInAntartica(x))", "all x.((Fido(x) & (GoesUnderwater(x) | Swimmer(x))) -> NonflyingBirdInAntartica(x))", "all x.((Bird(x) & (GoesUnderwater(x) | Swimmer(x))) -> Nonflying(x))", "all x.((Fido(x) & (GoesUnderwater(x) | Swimmer(x))) -> NonFlyingBird(x))", "all x.((Bird(x) & (GoesUnderwater(x) | Swimmer(x))) -> NonFlyingInAntartica(x))"]}
{"id": "folio_train_1742", "nl": "All professors are teachers.", "fol": "all x.(IsProfessor(x) -> IsTeacher(x))", "prediction": ["all x.(Professor(x) -> Teacher(x))", "all x.(Professor(x) -> Teacher(x))", "all x.(Professor(x) -> Teacher(x))", "all x y.((Professor(x) & Teacher(y)) -> Teacher(x))", "(all x.(Professor(x) -> Teacher(x)))", "all x.exists y.(Professor(x) & Teacher(y))", "all x.(Professor(x) -> Teacher(x))", "all x.(Professor(x) -> Teacher(x))", "(all x.(Professor(x) -> Teacher(x))", "all x.(Professor(x) -> Teacher(x))", "all x.(Professor(x) -> Teacher(x))", "all x.(Professor(x) -> Teachers(x))", "all x.(Professor(x) -> Teacher(x))", "all x.(Professor(x) -> Teachers(x))", "all x.(Professor(x) -> Teacher(x))", "all x.(Professor(x) -> Teachers(x))"]}
{"id": "folio_train_1743", "nl": "All researchers are professors.", "fol": "all x.(IsResearcher(x) -> IsProfessor(x))", "prediction": ["all x.(Researcher(x) -> Professor(x))", "all x.(Researcher(x) -> Professor(x))", "(all x.(Researcher(x) -> Professor(x)))", "all x y.((Researcher(x) & Professor(y)) -> Professor(x))", "all x.(Researcher(x) -> Professor(x))", "(all x.(Researcher(x) -> Professor(x))", "all x.(Researcher(x) -> Professor(x))", "all x.(Researcher(x) -> Professor(x))", "(all x.(Researcher(x) -> Professor(x))", "all x.(Researcher(x) -> Professor(x))", "all x.(Researcher(x) -> Professor(x))", "all x.(Researcher(x) -> Professor(x))", "all x.(Researcher(x) -> Professor(x))", "all x.(Researcher(x) -> Professor(x))", "all x.(Researcher(x) -> Professor(x))", "all x.(Researcher(x) -> Professor(x))"]}
{"id": "folio_train_1744", "nl": "No teachers are students.", "fol": "all x.(IsTeacher(x) -> -IsStudent(x))", "prediction": ["-exists x.(Teacher(x) & Student(x))", "all x.(Teacher(x) -> -Student(x))", "-exists x.(Teacher(x) & Student(x))", "all x.(Teacher(x) -> -Student(x))", "(exists x.(Teacher(x) & Student(x))", "-exists x.(Teacher(x) & Student(x))", "all x.(Teacher(x) -> -Student(x))", "(exists x.(Teacher(x) & Student(x))", "-exists x.(Teacher(x) & Student(x))", "all x.(Teacher(x) -> -Student(x))", "-exists x.(Teacher(x) & Student(x))", "all x.(Teacher(x) -> -Student(x))", "-exists x.(Teacher(x) & Student(x))", "-exists x.(Teacher(x) & Student(x))", "-exists x.(Teacher(x) & Student(x))", "-exists x.(Teacher(x) & Students(x))"]}
{"id": "folio_train_1745", "nl": "All people who study are students.", "fol": "all x.(IsStudying(x) -> IsStudent(x))", "prediction": ["all x.(Student(x) -> Student(x))", "all x.(Studies(x) -> Student(x))", "all x.(Student(x) -> Student(x))", "(Studies(Person) & Student(Person))", "all x.(Studies(x) -> Student(x))", "all x.(Student(x) -> Student(x))", "all x y.(Student(x) -> Student(y))", "all x.(Studies(x) -> Student(x))", "all x.(Student(x) -> Student(x))", "all x y.(Student(x) -> Student(y))", "all x.(Studies(x) -> Student(x))", "all x.(Student(x) -> Student(x))", "all x.(StudyPerson(x) -> Student(x))", "all x.(Studies(x) -> Student(x))", "all x.(Student(x) -> Student(x))", "all x.(Students(x) -> Student(x))"]}
{"id": "folio_train_1746", "nl": "Leon is not studying or a researcher.", "fol": "((-IsStudying(Leon) & -IsResearcher(Leon)) | (IsStudying(Leon) & IsResearcher(Leon)))", "prediction": ["(-Studying(Leon) & -Researcher(Leon))", "all x.(Leon(x) -> (-Studying(x) | Researcher(x)))", "Leon is notStudyingOrResearcher(Leon)", "Leon -(Student(Leon) | Researcher(Leon))", "Leon is notStudyingOrResearcher(Leon)", "(-Student(Leon) & -Researcher(Leon))", "all x.(Leon(x) -> (-Studying(x) | Researcher(x)))", "(-Studying(Leon) | Researcher(Leon))", "Leon is -Student(Leon) & -Researcher(Leon))", "Leon is notStudyingOrResearcher(Leon)", "-(Student(Leon) | Researcher(Leon))", "Leon is notStudyingOrResearcher(Leon)", "all x.(Leon(x) -> (-Student(x) & -Researcher(x)))", "all x.(Leon(x) -> (-Studying(x) | Researcher(x)))", "Leon is notStudyingOrResearcher(Leon)", "(-Student(Leon) & -Researcher(Leon))"]}
{"id": "folio_train_1747", "nl": "If Leon is not studying, then Leon is a teacher.", "fol": "(-IsStudying(Leon) -> IsTeacher(Leon))", "prediction": ["all x.((Leon(x) & -Studying(x)) -> Teacher(x))", "all x.((Leon(x) & -Studying(x)) -> Teacher(x))", "(-StudyingLeon(Leon,Leon))", "all x.((Leon(x) & -Studying(x)) -> Teacher(x))", "all x.((Leno(x) & -Studying(x)) -> Teacher(x))", "all x y.((Leon(x) & Leon(y) & -Studying(x,y)) -> Teacher(y))", "(-StudyingLeon(Leon,Leon))", "exists x.(Leon(x) & -Studying(x) & Teacher(x))", "all x.((Leon(x) & -Studying(x)) -> Teacher(x))", "(-StudyingLeon(Leon,Leon))", "all x.((Leno(x) & -Studying(x)) -> Teacher(x))", "all x.((Leon(x) & -Studying(x)) -> Teacher(x))", "all x.((Leno(x) & -Studying(x)) -> Teacher(x))", "all x.((Leon(x) & -Studying(x)) -> Teacher(x))", "all x.((Leon(x) & -Studying(x)) -> Teacher(x))", "all x.((Leon(x) & -Studing(x)) -> Teacher(x))"]}
{"id": "folio_train_1748", "nl": "Leon is a professor.", "fol": "IsProfessor(Leon)", "prediction": ["(Professor(Leon)", "all x.(Professor(x) -> Leon(x))", "Leon is Professor.", "Leon is a professor.", "all x.(Leon(x) -> Professor(x))", "(Professor(Leon)", "Leo is a professor.", "Leon is Professor.", "Leon is Professor.", "(Professor(Leon)", "Leon is a professor.", "Leon is professor.", "(Professor(Leon)", "Leon is Professor.", "(Professor(Leon)", "Leon is professor."]}
{"id": "folio_train_1749", "nl": "Leon is neither a student nor a researcher.", "fol": "(-IsStudent(Leon) & -IsResearcher(Leon))", "prediction": ["(-Student(Leon) & -Researcher(Leon))", "all x.(Leon(x) -> (-Student(x) & -Researcher(x)))", "Leon is -Student(Leon) & -Researcher(Leon))", "Leon nees(Leon,Student) & -Researcher(Leon,Researcher))", "Leon is -Student(Leon) & -Researcher(Leon))", "-(Student(Leon) | Researcher(Leon))", "Leo n'est ni student,ni researcher.", "all x.(Leon(x) -> (-Student(x) | Researcher(x)))", "(-Student(Leon) & -Researcher(Leon))", "Leon is neither a student nor a researcher.", "Leon is neither student nor researcher.", "-(Student(Leon) | Researcher(Leon))", "all x.(Leon(x) -> (-Student(x) & -Researcher(x)))", "(-Student(Leon) & -Researcher(Leon))", "(-Student(Leon) | Researcher(Leon))", "(-Student(Leon) & -Researcher(Leon))"]}
{"id": "folio_train_1750", "nl": "If Leon is not a researcher, then Leon is a student.", "fol": "(-IsResearcher(Leon) -> IsStudent(Leon))", "prediction": ["all x.((Leon(x) & -Researcher(x)) -> Student(x))", "all x.((Leon(x) & -Researcher(x)) -> Student(x))", "all x.((Leno(x) & -Researcher(x)) -> Student(x))", "(-Researcher(Leon) -> Student(Leon))", "all x.((Leon(x) & -Researcher(x)) -> Student(x))", "all x.((Researcher(x) & -Researcher(x)) -> Student(x))", "(-Researcher(Leon) -> Student(Leon))", "all x.((Researcher(x) & Leon(x)) -> Student(x))", "all x.((Leno(x) & -Researcher(x)) -> Student(x))", "all x.((Leon(x) & -Researcher(x)) -> Student(x))", "(-Researcher(leon) -> Student(leon))", "(-Researcher(Leon) -> Student(Leon))", "all x.(-Researcher(x) -> Student(x))", "all x.((Leon(x) & -Researcher(x)) -> Student(x))", "all x.((Leno(x) & -Researcher(x)) -> Student(x))", "all x.(Researcher(x) -> Student(x))"]}
{"id": "folio_train_1751", "nl": "A cutman is responsible for preventing and treating physical damage to a fighter.", "fol": "all x.((IsCutman(x) -> PreventPhysicalDamage(x,PhysicalDamage)) & TreatPhysicalDamage(x,PhysicalDamage))", "prediction": ["all x y.((Cutman(x) & Fighter(y)) -> (PreventsAndTreatsPhysicalDamage(x,y) & To(x,y)))", "all x.(Cutman(x) -> (PreventsAndTreatsPhysicalDamage(x) & Fighter(x)))", "all x y.((Cutman(x) & Fighter(y)) -> (PreventsPhysicalDamage(x,y) & TreatsPhysicalDamage(x,y)))", "all x y z.((Cutman(x) & Fighter(y) & PhysicalDamage(z)) -> (PreventsAndTreats(x,y,z) & -PreventsAndTreats(x,y)))", "all x.(Cutman(x) -> (PreventsPhysicalDamage(x) & TreatsPhysicalDamage(x)))", "all x y.((Cutman(x) & Fighter(y)) -> (PreventsAndTreatsPhysicalDamage(x,y) & TreatsPhysicalDamage(x,y)))", "all x y z.((Cutman(x) & Fighter(y) & PhysicalDamage(z)) -> (PreventsAndTreats(x,y,z) & To(x,y)))", "all x y.((Cutman(x) & Fighter(y)) -> (PreventsPhysicalDamage(x,y) & TreatsPhysicalDamage(x,y)))", "all x.(Cutman(x) -> (PreventsAndTreatsPhysicalDamage(x) & Fighter(x)))", "all x.(Cutman(x) -> (PreventsPhysicalDamage(x) & TreatsPhysicalDamage(x) & Fighter(x)))", "all x.(Cutman(x) -> (PreventsAndTreatsPhysicalDamage(x) & Fighter(x)))", "all x y z.((Cutman(x) & Fighter(y) & PhysicalDamage(z)) -> (PreventsAndTreats(x,y,z) & -PreventsAndTreats(x,y,z)))", "all x y.((Cutman(x) & Fighter(y)) -> (PreventsAndTreatsPhysicalDamage(x,y) & To(x,y)))", "all x.(Cutman(x) -> (PreventsAndTreatsPhysicalDamage(x) & Fighter(x)))", "all x y.((Cutman(x) & Fighter(y)) -> (PreventsPhysicalDamage(x,y) & TreatsPhysicalDamage(x,y)))", "all x.(Cutman(x) -> (PreventsPhysicalDamage(x) & TreatsPhysicalDamage(x) & Fighter(x)))"]}
{"id": "folio_train_1752", "nl": "Cutmen appear in matches such as a boxing, kickboxing or a mixed martial arts bout. ", "fol": "all x.((IsCutman(x) -> AppearsInMatch(x,BoxingMatch)) | AppearsInMatch(x,KickboxingMatch) | AppearsInMatch(x,MixedMartialArtsBout))", "prediction": ["all x.(Cutmen(x) -> (AppearsInBoxing(x) | AppearsInKickboxing(x) | AppearsInMixedMartialArts(x)))", "all x y.((Cutmen(x) & Match(y)) -> (AppearsIn(x,y) & (Boxing(y) | Kickboxing(y) | MixedMartialArts(y))))", "all x.(Cutmen(x) -> (AppearInMatch(x,boxing) | AppearInMatch(x,kickboxing) | AppearInMatch(x,mixedMartialArts)))", "all x.(Cutmen(x) -> (AppearsInBoxing(x) | AppearsInKickboxing(x) | AppearsInMixedMartialArts(x)))", "(exists x.(Cutmen(x) & (Boxing(x) | Kickboxing(x) | MixedMartialArts(x))) -> AppearsInMatch(x))", "all x y z.((Cutmen(x) & Match(y) & (Boxing(z) | Kickboxing(z) | MixedMartialArts(z))) -> AppearsIn(x,y,z))", "all x.(Cutmen(x) -> (exists y.(Boxing(y) | Kickboxing(y) | MixedMartialArts(y)) & AppearsIn(x,y)))", "all x y.((Cutmen(x) & (Boxing(y) | Kickboxing(y) | MixedMartialArts(y))) -> AppearsInMatch(x,y))", "all x.(Cutmen(x) -> (AppearsInMatch(x,boxing) | AppearsInMatch(x,kickboxing) | AppearsInMatch(x,mixedMartialArts(x)))", "all x.(Cutmen(x) -> (AppearsInMatch(x,boxing) | AppearsInMatch(x,kickboxing) | AppearsInMatch(x,mixedMartialArts)))", "all x y.((Cutmen(x) & Match(y)) -> (AppearsIn(x,y) & (Boxing(y) | Kickboxing(y) | MixedMartialArts(y))))", "exists x.(Cutter(x) & (Boxing(x) | Kickboxing(x) | MixedMartialArts(x)))", "exists x.(Cutter(x) & ((Boxing(x) | Kickboxing(x) | MixedMartialArts(x))) -> AppearsInMatch(x)))", "all x y.((Cutmen(x) & Match(y)) -> (AppearIn(x,y) & (Boxing(y) | Kickboxing(y) | MixedMartialArts(y))))", "all x y z.((Cutmen(x) & Match(y) & (Boxing(z) | Kickboxing(z) | MixedMartialArts(y))) -> AppearsIn(x,y,z))", "all x.(Cutman(x) -> (AppearsInMatch(x,boxing) | AppearsInMatch(x,kickboxing) | AppearsInMatch(x,mixedMartialArts)))"]}
{"id": "folio_train_1753", "nl": "Cutmen typically handle swelling, nosebleeds and lacerations. ", "fol": "all x.((IsCutman(x) -> HandleInjuries(x,SwellingInjury)) & HandleInjuries(x,NosebleedInjury) & HandleInjuries(x,LacerationInjury))", "prediction": ["all x.(Cutman(x) -> (HandlesSwelling(x) & HandlesNasalbleeds(x) & HandlesLacerations(x)))", "all x y.((Cutman(x) & Swelling(y) & Nasalbleeds(y) & Lacerations(y)) -> Handles(x,y))", "(HandlesSwelling(cutmen,swelling) & HandlesNasalbleeds(cutmen,lacerations))", "all x.(Cutmen(x) -> (HandlesSwelling(x) & HandlesNasalbleeds(x) & HandlesLacerations(x)))", "all x y.((Cutmen(x) & Swelling(y) & Snoodbleeds(y) & Lacerations(y)) -> Handles(x,y))", "all x y z.((Cutman(x) & Swelling(y) & Nasalbleed(z)) -> (Handles(x,y) & Handles(x,z)))", "(HandlesSwelling(cutmen,swelling) & HandlesNasalbleeds(cutmen,lacerations))", "all x.(Cutman(x) -> (HandlesSwelling(x) & HandlesNasalbleeds(x) & HandlesLacerations(x)))", "all x y.((Cutman(x) & Swelling(y) & Nashbleeds(y) & Lacerations(y)) -> Handles(x,y))", "all x.(Cutter(x) -> (HandlesSwelling(x) & HandlesNasalbleeds(x) & HandlesLacerations(x)))", "all x.(Cutmen(x) -> (HandlesSwelling(x) & HandlesNasalbleeds(x) & HandlesLacerations(x)))", "all x.(Cutmen(x) -> (HandlesSwelling(x) | HandlesNasalbleeds(x) | HandlesLacerations(x)))", "all x.(Cutmen(x) -> (HandlesSwelling(x) & HandlesNasalbleeds(x) & HandlesLacerations(x)))", "all x y.((Cutmen(x) & Swelling(y) & Snoodbleeds(y) & Lacerations(y)) -> Handles(x,y))", "all x.(Cutman(x) -> (HandlesSwelling(x) & HandlesNasalbleeds(x) & HandlesLacerations(x)))", "all x.(Cutman(x) -> (HandlesSwelling(x) & HandlesNasebleeds(x) & HandlesLacerations(x)))"]}
{"id": "folio_train_1754", "nl": "Jack is a cutman.", "fol": "IsCutman(Jack)", "prediction": ["all x.((Jack(x) & Cutman(x)) -> Cutman(x))", "all x.(Jack(x) -> Cutman(x))", "(Cutter(Jack) & Cutman(Jack))", "(Cutman(Jack))", "(Cutman(Jack) & Cutman(Jack))", "all x.((Jack(x) & Cutman(x)) -> Cutman(x))", "Jack is Cutman(jack)", "all x.(Cutman(x) -> Jack(x))", "All x.(Cheapman(x) -> Jack(x))", "All x.(Jack(x) -> Cutman(x))", "Jack is Cutman.", "all x.((Jack(x) & Cutman(x)) -> Cutman(x))", "(Cutman(Jack))", "Jack is Cutman.", "all x.(Cutman(x) -> Jack(x))", "(CutMan(Jack)"]}
{"id": "folio_train_1755", "nl": "No cutmen appear in boxing matches.", "fol": "-exists x.(IsCutman(x) & AppearsInMatch(x,BoxingMatch))", "prediction": ["-exists x.(Cutmen(x) & BoxingMatch(x))", "all x.(Cutmen(x) -> -AppearsInBoxingMatch(x))", "all x.((Cutmen(x) & BoxingMatch(x)) -> -AppearsIn(x,boxingMatch))", "-exists x.(Cutmen(x) & BoxingMatch(x))", "no cutmen appear in boxing matches.", "all x.(Cutmen(x) -> -AppearsInBoxingMatch(x))", "all x.((Cutmen(x) & BoxingMatch(x)) -> -AppearsIn(x,boxing))", "-exists x y.(Cutmen(x) & BoxingMatch(y) & -AppearsIn(x,y))", "-exists x.(Cutmen(x) & BoxingMatch(x))", "-exists x.(Cutter(x) & BoxingMatch(x))", "all x.(Cutmen(x) -> -AppearsInBoxingMatch(x))", "all x y.((Cutman(x) & BoxingMatch(y)) -> -AppearsIn(x,y))", "-exists x.(Cutmen(x) & BoxingMatch(x))", "-exists x.(Cutter(x) & BoxingMatch(x))", "-exists x.(Cutmen(x) & BoxingMatch(x))", "(-exists x.(Cutman(x) & InBoxingMatch(x)))"]}
{"id": "folio_train_1756", "nl": "If someone is not a cutman, then they cannot handle nosebleeds.", "fol": "all x.(-IsCutman(x) -> -HandleInjuries(x,NosebleedInjury))", "prediction": ["all x.((Cutman(x) & -Cutman(x)) -> -HandlesNasalbleeds(x))", "all x.((Person(x) & -Cutman(x)) -> -HandlesNasalbleeds(x))", "all x.((Cutman(x) & -Cutman(x)) -> -HandlesNasebleeds(x))", "(-Cutman(x) -> -HandlesNasebleeds(x))", "all x.((Person(x) & -Cutman(x)) -> -HandlesNasebleeds(x))", "all x.((Cutman(x) & -Cutman(x)) -> -HandlesNasalbleeds(x))", "all x y.((Cutman(x) & -Cutman(y)) -> -HandlesNasalbleeds(x,y))", "all x.((Nastbleed(x) & -Cutman(x)) -> -Handles(x,nosebleeds))", "all x.(-Cutter(x) -> -HandlesNasebleeds(x))", "all x.((Cutter(x) & -Cutman(x)) -> -HandlesNasalbleeds(x))", "all x.((Cutman(x) & -Cutman(x)) -> -HandlesNasebleeds(x))", "all x.(-Cutman(x) -> CannotHandleNasalbleeds(x))", "all x.(Nastbleeds(x) -> -Cutman(x))", "all x.(-Cutter(x) -> -HandlesNasalbleeds(x))", "all x.((Person(x) & -Cutman(x)) -> -HandlesNasebleeds(x))", "all x.((Cutman(x) & -Cutman(x)) -> -HandlesNasalbleeds(x))"]}
{"id": "folio_train_1757", "nl": "Jack can treat physical damage.", "fol": "TreatPhysicalDamage(Jack,PhysicalDamage)", "prediction": ["all x.(Jack(x) -> TreatsPhysicalDamage(x))", "(TreatsPhysicalDamage(Jack))", "(TreatsPhysicalDamage(Jack) & TreatsPhysicalDamage(Jack))", "all x.(Jack(x) -> TreatsPhysicalDamage(x))", "all x.((Jack(x) & PhysicalDamage(x)) -> Treats(x,y))", "all x y.((Jack(x) & PhysicalDamage(y)) -> Treats(x,y))", "all x.(Jack(x) -> TreatsPhysicalDamage(x))", "all x y.((Jack(x) & PhysicalDamage(y)) -> Treats(x,y))", "(TreatsPhysicalDamage(Jack))", "(TreatsPhysicalDamage(Jack) & TreatsPhysicalDamage(Jack))", "all x.(Jack(x) -> CanTreatPhysicalDamage(x))", "all x.(Jack(x) -> TreatsPhysicalDamage(x))", "all x.(Jack(x) -> TreatsPhysicalDamage(x))", "All x.(Jack(x) -> CanTreatPhysicalDamage(x))", "exists x.(Jack(x) & TreatPhysicalDamage(x))", "All x.(Jack(x) -> TreatsPhysicalDamage(x))"]}
{"id": "folio_train_1758", "nl": "The Mona Lisa is one of the world's best-known artworks.", "fol": "(IsPainting(MonaLisa) & IsWorldsBestKnownArtwork(MonaLisa))", "prediction": ["all x.(MonaLisa(x) -> BestKnownArtwork(x))", "The Mona Lisa is one of the world's best-known artworks.", "(BestKnownArtwork(MonaLisa) & KnownFor(MonaLisa))", "(World's BestKnownArtwork(MonaLisa))", "-(MonaLisa(MonaLisa) & BestKnownArtwork(MonaLisa))", "the MonaLisa(MonaLisa,World(MonaLisa) & BestKnownArtwork(MonaLisa,World))", "The Mona Lisa is one of the best-known artworks in the world.", "All x.(MonaLisa(x) -> BestKnownArtwork(x))", "all x y.((MonaLisa(x) & Artwork(y)) -> BestKnown(x,y))", "(BestKnownArtwork(MonaLisa) & KnownFor(MonaLisa,World))", "The Mona Lisa is one of the world's best-knownArtworks(MonaLisa,Wall Street,Wall Street))", "(BestKnowledgedArtwork(MonaLisa) & KnownFor(MonaLisa))", "all x.(MonaLisa(x) -> BestKnownArtwork(x))", "All x.(MonaLisa(x) -> BestKnownArtwork(x))", "All x.(MonaLisa(x) -> BestKnowledgedArtwork(x))", "all x.(MonaLisa(x) -> BestKnownArtwork(x))"]}
{"id": "folio_train_1759", "nl": "The Mona Lisa is a portrait painted by Leonardo da Vinci.", "fol": "(IsPaintedBy(MonaLisa,LeonardodaVinci) & IsPortrait(MonaLisa))", "prediction": ["(Portrait(MonaLisa) & PaintedByLeonardoDaVinci(MonaLisa))", "MonaLisa(MonaLisa) -> (PortraitPaintedByLeonardoDaVinci(MonaLisa) & PaintedByDaVinci(MonaLisa)))", "all x.(MonaLisa(x) -> (Portrait(x) & PaintedByLeonardoDaVinci(x)))", "(PortraitPaintedByLeonardoDaVinci(MonaLisa))", "(PaintingMonaLisa(MonaLisa) & LeonardoDaVinci(MonaLisa))", "The Mona Lisa is a portrait painted by Leonardo da Vinci.", "all x.(MonaLisa(x) -> (Portrait(x) & PaintedByLeonardoDaVinci(x)))", "(Portrait(MonaLisa) & PaintedByLeonardoDaVinci(MonaLisa))", "MonaLisa (PortraitPaintedByLeonardoDaVinci)", "All x.(MonaLisa(x) -> PortraitPaintedByLeonardoDaVinci(x))", "MonaLisa(MonaLisa) -> (PortraitPaintedByLeonardoDaVinci(MonaLisa) & PaintedByDaVinci(MonaLisa)))", "The Mona Lisa is a portrait painted by Leonardo da Vinci.", "all x.(MonaLisa(x) -> (PortraitPaintedByLeonardoDaVinci(x)))", "(Portrait(MonaLisa) & PaintedByLeonardoDaVinci(MonaLisa))", "MonaLisa(MonaLisa) -> (PortraitPaintedByLeonardoDaVinci(MonaLisa) & PaintedByVinci(MonaLisa)))", "All x.(MonaLisa(x) -> (Portrait(x) & PaintedByLeonardoDaVinci(x)))"]}
{"id": "folio_train_1760", "nl": "Leonardo da Vinci was a scientist and painter.", "fol": "(IsScientist(LeonardodaVinci) & IsPainter(LeonardodaVinci))", "prediction": ["all x.(LeonardoDaVinci(x) -> (Scientist(x) & Painter(x)))", "Leonardo da Vinci ((Scientist(s) & Painter(s)))", "(Scientist(LeonardoDaVinci) & Painter(LeonardoDaVinci))", "Leonardo da Vinci (Scientist(d) & Painter(d))", "Leonardo da Vinci ((Scientist(Scientist) & Painter(Scientist)))", "all x.(LeonardoDaVinci(x) -> (Scientist(x) & Painter(x)))", "(Scientist(Leonardo da Vinci) & Painter(Leonardo da Vinci))", "(Scientist(LeonardoDaVinci) & Painter(LeonardoDaVinci))", "Leonardo da Vinci (scientist, painter)", "all x.(LeonardoDaVinci(x) -> (Scientist(x) & Painter(x)))", "Leonardo da Vinci was a scientist and painter.", "Leonardo da Vinci (Scientist(d) & Painter(d))", "Leonardo Da Vinci ((Scientist) & Painter(s)))", "all x.(LeonardoDaVinci(x) -> (Scientist(x) & Painter(x)))", "Leonardo da Vinci was a scientist and painter.", "all x.(LeonardoDaVinci(x) -> (Scientist(x) & Painter(x)))"]}
{"id": "folio_train_1761", "nl": "Painting genres are history, portrait, animal, landscape, and still life.", "fol": "all x.(IsPainting(x) -> (IsHistoryGenre(x) | IsPortrait(x) | IsAnimalGenre(x) | IsLandscapeGenre(x) | IsStillLifeGenre(x)))", "prediction": ["all x.(PaintingGenre(x) -> (History(x) | Portrait(x) | Animal(x) | Landscape(x) | StillLife(x)))", "(all x.(PaintingGenre(x) -> (History(x) | Portrait(x) | Animal(x) | Landscape(x) | StillLife(x)))", "(PaintingGenre(p) & (History(p) | Portrait(p) | Animal(p) | Landscape(p) | StillLife(p)))", "all x.(Painting(x) -> (History(x) | Portrait(x) | Animal(x) | Landscape(x) | StillLife(x)))", "all x.(PaintingGenre(x) -> (History(x) | Portrait(x) | Animal(x) | Landscape(x) | StillLife(x)))", "all x y.((PaintingGenre(x) & (History(y) | Portrait(y) | Animal(y) | Landscape(y) | StillLife(y))) -> PaintingGenre(x,y))", "(All x.(Painting(x) -> (History(x) | Portrait(x) | Animal(x) | Landscape(x) | StillLife(x)))", "(all x.(PaintingGenre(x) -> (History(x) | Portrait(x) | Animal(x) | Landscape(x) | StillLife(x)))", "(PaintingGenre(x) & (History(x) | Portrait(x) | Animal(x) | Landscape(x) | StillLife(x)))", "all x.(PaintingGenre(x) -> (History(x) | Portrait(x) | Animal(x) | Landscape(x) | StillLife(x)))", "all x.(Painting(x) -> (History(x) | Portrait(x) | Animal(x) | Landscape(x) | StillLife(x)))", "exists x.(PaintingGenre(x) & (HistoryGenre(x) | PortraitGenre(x) | AnimalGenre(x) | LandscapeGenre(x) | StillLifeGenre(x)))", "(all x.(PaintingGenre(x) -> (History(x) | Portrait(x) | Animal(x) | Landscape(x) | StillLife(x)))", "all x.(PaintingGenre(x) -> (History(x) | Portrait(x) | Animal(x) | Landscape(x) | StillLife(x)))", "all x.(Painting(x) -> (History(x) | Portrait(x) | Animal(x) | Landscape(x) | StillLife(x)))", "all x.(PaintingGenre(x) -> (History(x) | Portrait(x) | Animal(x) | Landscape(x) | StillLife(x)))"]}
{"id": "folio_train_1762", "nl": "One of the world's best-known artworks is painted by a scientist.", "fol": "exists x.(IsWorldsBestKnownArtwork(x) & exists y.(IsScientist(y) & IsPaintedBy(x,y)))", "prediction": ["all x y.((Artwork(x) & Scientist(y)) -> PaintedBy(x,y))", "all x.((Artwork(x) & BestKnown(x)) -> PaintedByScientist(x))", "all x y z.((Artwork(x) & Scientist(y) & BestKnown(x,y) & Painting(z)) -> PaintedBy(x,z))", "(PaintedByScientist(x) -> OneOfWorldsBestKnownArtwork(x))", "all x y.((Artwork(x) & Scientist(y)) -> PaintedBy(x,y))", "all x.((Artwork(x) & BestKnown(x)) -> PaintedByScientist(x))", "exists x.(Artwork(x) & BestKnown(x) & PaintedBy(x,scientist))", "all x y z.((Artwork(x) & Scientist(y) & BestKnown(x,y)) -> PaintedBy(x,y))", "all x y.((Artwork(x) & Scientist(y)) -> PaintedBy(x,y))", "exists x.(Artwork(x) & BestKnown(x) & PaintedByScientist(x))", "all x.((Artwork(x) & BestKnown(x)) -> PaintedByScientist(x))", "all x y z.((Artwork(x) & Scientist(y) & WorldBestKnown(x) & Painting(z)) -> PaintedBy(y,z))", "all x y.((Artwork(x) & BestKnown(x,y)) -> PaintedByScientist(x))", "all x.((Artwork(x) & WorldBestKnown(x)) -> PaintedByScientist(x))", "all x y.((Artwork(x) & Scientist(y)) -> Paints(x,y))", "exists x.(Artwork(x) & BestKnown(x) & PaintsBy(x,scientist))"]}
{"id": "folio_train_1763", "nl": "Leonardo da Vinci has artworks in the landscape genre.", "fol": "exists x.(Artwork(x) & IsLandscapeGenre(x) & CreatedBy(x,LeonardodaVinci))", "prediction": ["all x.(LeonardoDaVinci(x) -> exists y.(Landscape(y) & Artwork(z) & Landscape(z)))", "(Artwork(LeonardoDaVinci) & Landscape(LeonardoDaVinci))", "Leonardo da Vinci has artworks in the landscape genre.", "all x y.((LeonardoDaVinci(x) & Landscape(y)) -> HasArtwork(x,y))", "all x.(LeonardoDaVinci(x) -> (Artwork(x) & Landscape(x)))", "(Artwork(LeonardoDaVinci) & LandscapeGenre(LeonardoDaVinci))", "all x.((LeonardoDaVinci(x) & Landscape(x)) -> HasArtworks(x))", "all x y.((Leonardo(x) & LeonardoDaVinci(y)) -> (Artwork(x,y) & Landscape(y)))", "Leonardo da Vinci (Lilio) & Landscape(Lionardo))", "all x.(LeonardoDaVinci(x) -> exists y.(Landscape(y) & Artwork(x,y)))", "Leonardo da Vinci has artworks in the landscape genre.", "all x.(LeonardoDaVinci(x) -> (ArtworksInLandscape(x) & -ArtworksInLandscape(x)))", "(Artwork(LeonardoDaVinci) & Landscape(LeonardoDaVinci))", "all x y.((LeonardoDaVinci(x) & LandscapeArtwork(y)) -> Has(x,y))", "exists x.(LeonardoDaVinciArtwork(x) & LandscapeArtwork(x))", "exists x.(LeonardoDaVinci(x) & Landscape(x))"]}
{"id": "folio_train_1764", "nl": "No world's best-known artworks are portraits.", "fol": "-exists x.(IsWorldsBestKnownArtwork(x) & IsPortrait(x))", "prediction": ["-exists x.(WorldsBestKnownArtwork(x) & Portrait(x))", "all x.((Artwork(x) & BestKnown(x)) -> Portrait(x))", "(exists x.(Artwork(x) & Portrait(x)) & -exists y.(Artwork(y) & Portrait(y))))", "-exists x.(Artwork(x) & BestKnown(x))", "-exists x.(WorldsBestKnownArtwork(x) & Portrait(x))", "-exists x.(WorldBestKnownArtwork(x) & Portrait(x))", "all x.((Artwork(x) & BestKnown(x)) -> Portrait(x))", "(exists x.(Artwork(x) & Portrait(x) & -BestKnown(x)))", "-exists x.(Artwork(x) & Portrait(x))", "\u2013 -exists x.(WorldsBestKnownArtwork(x) & Portrait(x))", "all x.((Artwork(x) & BestKnown(x)) -> Portrait(x))", "-exists x.(BestKnownArtwork(x) & Portrait(x))", "-exists x.(WorldsBestKnownArtwork(x) & Portrait(x))", "-exists x.(Artwork(x) & BestKnown(x))", "-exists x.(WorldBestKnownArtwork(x) & Portrait(x))", "-exists x.(Artwork(x) & Portrait(x))"]}
{"id": "folio_train_1765", "nl": "No professional tennis umpires are professional tennis players.", "fol": "all x.(IsProfessionalTennisUmpire(x) -> -IsProfessionalTennisPlayer(x))", "prediction": ["-exists x.(ProfessionalTennisUmpire(x) & ProfessionalTennisPlayer(x))", "all x.(ProfessionalTennisUmpire(x) -> -ProfessionalTennisPlayer(x))", "(exists x.(ProfessionalTennisUmpire(x) & ProfessionalTennisPlayer(x)) & -ProfessionalTennisUmpire(x))", "-exists x.(ProfessionalTennisUmpire(x) & ProfessionalTennisPlayer(x))", "(exists x.(ProfessionalTennisUmpire(x) & -ProfessionalTennisPlayer(x)))", "all x.(ProfessionalTennisUmpire(x) -> -ProfessionalTennisPlayer(x))", "-exists x.(ProfessionalTennisUmpire(x) & ProfessionalTennisPlayer(x))", "all x.(ProfessionalTennisUmpire(x) -> ProfessionalTennisPlayer(x))", "all x.(ProfessionalTennisUmpire(x) -> -ProfessionalTennisPlayer(x))", "-exists x.(ProfessionalTennisUmpire(x) & ProfessionalTennisPlayer(x))", "all x.(ProfessionalTennisUmpire(x) -> ProfessionalTennisPlayer(x))", "-exists x.(ProfessionalTongivrist(x) & ProfessionalTongivrist(x))", "-exists x.(ProfessionalTennisUmpire(x) & ProfessionalTennisPlayer(x))", "-exists x.(ProfessionalTennisUmpire(x) & ProfessionalTennisPlayer(x))", "-exists x.(ProfessionalTennisUmpire(x) & ProfessionalTennisPlayer(x))", "-exists x.(ProfessionalTennisUmpire(x) & ProfessionalTennisPlayer(x))"]}
{"id": "folio_train_1766", "nl": "If you are a World Tour player, then you are a professional tennis player.", "fol": "all x.(IsWorldTourPlayer(x) -> IsProfessionalTennisPlayer(x))", "prediction": ["all x.((WorldTourPlayer(x) & ProfessionalTennisPlayer(x)) -> Professional(x))", "all x.((WorldTourPlayer(x) & ProfessionalTennisPlayer(x)) -> Plays(x))", "all x.((Player(x) & WorldTour(x)) -> ProfessionalTennisPlayer(x))", "all x.(WorldTourPlayer(x) -> ProfessionalTennisPlayer(x))", "all x y.((WorldTourPlayer(x) & ProfessionalTennisPlayer(y)) -> Plays(x,y))", "all x.((WorldTourPlayer(x) & ProfessionalTennisPlayer(x)) -> ProfessionalTennisPlayer(x))", "(all x.((WorldTourPlayer(x) & WorldTourPlayer(x)) -> ProfessionalTennisPlayer(x))", "all x.((WTOPlayer(x) & WorldTourPlayer(x)) -> ProfessionalTennisPlayer(x))", "all x.(WorldTourPlayer(x) -> ProfessionalTennisPlayer(x))", "all x.((WorldTourPlayer(x) & ProfessionalTennisPlayer(x)) -> PlaysOn(x,y))", "(all x.((WorldTourPlayer(x) & WorldTourPlayer(x)) -> ProfessionalTennisPlayer(x))", "all x.(WonderTourPlayer(x) -> ProfessionalTennisPlayer(x))", "all x.((WorldTourPlayer(x) & ProfessionalTennisPlayer(x)) -> Professional(x))", "all x.(WorldTourPlayer(x) -> ProfessionalTennisPlayer(x))", "all x.(WorldTourPlayer(x) -> ProfessionalTennisPlayer(x))", "all x.((WorldTourPlayer(x) & ProfessionalTennisPlayer(x)) -> TennisPlayer(x))"]}
{"id": "folio_train_1767", "nl": "All Grand Slam champions are World Tour players.", "fol": "all x.(IsGrandSlamChampion(x) -> IsWorldTourPlayer(x))", "prediction": ["all x.(GrandSlamChampion(x) -> WorldTourPlayer(x))", "all x.(GrandSlamChampion(x) -> WorldTourPlayer(x))", "all x y.((GrandSlamChampion(x) & WorldTourPlayer(y)) -> WorldTourPlayer(x))", "all x.((GrandSlamChampion(x) & WorldTourPlayer(x)) -> Champion(x))", "all x.(GrandSlamChampion(x) -> WorldTourPlayer(x))", "(all x.(GrandSlamChampion(x) -> WorldTourPlayer(x))", "all x.((GrandSlamChampion(x) & WorldTourPlayer(x)) -> Champion(x))", "all x.(GrandSlamChampion(x) -> WorldTourPlayer(x))", "(all x.(GrandSlamChampion(x) -> WorldTourPlayer(x))", "all x.(GrandSlamChampion(x) -> WorldTourPlayer(x))", "all x.(GrandSlamChampion(x) -> WorldTourPlayer(x))", "all x.(GrandSlamChampion(x) -> WorldTourPatron(x))", "(all x.(GrandSlamChampion(x) -> WorldTourPlayer(x))", "All x.(GropeSlamChampion(x) -> WorldTourPlayer(x))", "all x.(GrandSlamChampion(x) -> WorldTourPlayer(x))", "all x.(GrandSlamChampions(x) -> WorldTourPlayers(x))"]}
{"id": "folio_train_1768", "nl": "All Grand Slam umpires are professional tennis umpires.", "fol": "all x.(IsGrandSlamUmpire(x) -> IsProfessionalTennisUmpire(x))", "prediction": ["all x.(GrandSlamUmpire(x) -> ProfessionalTennisUmpire(x))", "(all x.(GrandSlamUmpire(x) -> ProfessionalTennisUmpire(x)))", "all x y.((GrandSlamUmpire(x) & ProfessionalTennisUmpire(y)) -> Umpire(x,y))", "all x.(GrandSlamUmpire(x) -> ProfessionalTennisUmpire(x))", "all x.((Umpire(x) & GrandSlam(x)) -> ProfessionalTennisUmpire(x))", "all x.(Gro\u00dfSlamUmpire(x) -> ProfessionalTennisUmpire(x))", "(all x.(GrandSlamUmpire(x) -> ProfessionalTennisUmpire(x))", "all x y.((GrandSlamUmpire(x) & TennisUmpire(y)) -> Professional(x,y))", "all x.(GrandSlamUmpire(x) -> ProfessionalTennisUmpire(x))", "(all x.(GrandSlamUmpire(x) -> ProfessionalTennisUmpire(x))", "all x.(GrandSlamUmpire(x) -> ProfessionalTennisUmpire(x))", "all x.(GrandSlamUmpire(x) -> ProfessionalTennisUmpire(x))", "all x.(GropeSlamUmpire(x) -> ProfessionalTennisUmpire(x))", "all x.(GrandSlamUmpire(x) -> ProfessionalTennisUmpire(x))", "all x.(GrandSlamUmpire(x) -> ProfessionalTongaist(x))", "all x.(GrandSlamUmpire(x) -> ProfessionalTennisUmpire(x))"]}
{"id": "folio_train_1769", "nl": "Nadal is a World Tour player or a Grand Slam champion", "fol": "(IsWorldTourPlayer(Nadal) | IsGrandSlamChampion(Nadal))", "prediction": ["all x.(Nadal(x) -> (WorldTourPlayer(x) | GrandSlamChampion(x)))", "((WorldTourPlayer(Nadal) | GrandSlamChampion(Nadal))) | (WorldTourPlayer(Nadal) & GrandSlamChampion(Nadal))))", "all x.(Nadal(x) -> ((WorldTourPlayer(x) | GrandSlamChampion(x))) | (GrandSlamChampion(x)))))", "all x y.((Nadal(x) & (WorldTourPlayer(x) | GrandSlamChampion(x))) -> (Nadal(x) & (WorldTourPlayer(x) | GrandSlamChampion(x))))", "(WorldTour Player(Nadal) | GrandSlamChampion(Nadal)))", "(WTourPlayer(Nadal) | GrandSlamChampion(Nadal)))", "(WTourPlayer(Nadal,WorldTour) | GrandSlamChampion(Nadal,GrandSlamChampion)))", "((WorldTourPlayer(Nadal) | GrandSlamChampion(Nadal))) | (GrandSlamChampion(Nadal))))", "all x y.((Nadal(x) & WorldTourPlayer(x) | GrandSlamChampion(x))) -> (WorldTourPlayer(x) | GrandSlamChampion(x)))", "all x.(Nadal(x) -> ((WorldTourPlayer(x) | GrandSlamChampion(x)) & (WorldTourPlayer(x) | GrandSlamChampion(x))))", "all x.(Nadal(x) -> (WorldTourPlayer(x) | GrandSlamChampion(x)))", "(WorldTour Player(Nadal) | GrandSlamChampion(Nadal))", "all x.(Nadal(x) -> (WorldTour Player(x) | GrandSlamChampion(x)))", "(all x.(Nadal(x) -> (WorldTourPlayer(x) | GrandSlamChampion(x))))", "all x.(Nadal(x) -> ((WorldTourPlayer(x) | GrandSlamChampion(x)) & Nadal(x)))", "all x.(Nadal(x) -> (WorldTourPlayer(x) | GrandSlamChampion(x)))"]}
{"id": "folio_train_1770", "nl": "Nadal is a Grand Slam umpire.", "fol": "IsGrandSlamUmpire(Nadal)", "prediction": ["Nadal is a GrandSlamUmpire(Nadal)", "all x.(Nadal(x) -> GrandSlamUmpire(x))", "(GrandSlamUmpire(Nadal)", "Nadal is a GrandSlamUmpire(n)", "all x.(Nadal(x) -> GrandSlamUmpire(x))", "Nadal is GrandSlamUmpire(Nadal)", "(GrandSlamUmpire(Nadal)", "Nadal (GrandSlamUmpire)", "Nadal is a GrandSlamUmpire(Nadal,Umpire)", "all x.(Nadal(x) -> GrandSlamUmpire(x))", "(GrandSlamUmpire(Nadal)", "Nadal is GrandSlamUmpire(n)", "Nadal is a GrandSlamUmpire(n)", "All x.(Nadal(x) -> GrandSlamUmpire(x))", "Nadal is a GrandSlamUmpire(Nadal)", "all x.(Nadal(x) -> GrandSlamUmpire(x))"]}
{"id": "folio_train_1771", "nl": "Nadal is not a Grand Slam umpire.", "fol": "-IsGrandSlamUmpire(Nadal)", "prediction": ["-GrandSlamUmpire(Nadal)", "all x.(Nadal(x) -> -GrandSlamUmpire(x))", "Nadal -GrandSlamUmpire(Nadal)", "Nadal is not a GrandSlamUmpire(Nadal)", "-GrandSlamUmpire(Nadal)", "-Grand SlamUmpire(Nadal)", "all x.(Nadal(x) -> -GrandSlamUmpire(x))", "-(GrandSlamUmpire(Nadal))", "Nadal -GrandSlamUmpire(Nadal)", "Nadal is not a GrandSlamUmpire(Nadal,Slam)", "-GrandSlamUmpire(Nadal)", "(-GrooveSlamUmpire(Nadal))", "-Grand SlamUmpire(Nadal)", "(-GrandSlamUmpire(Nadal))", "(-GrandSlamUmpire(Nadal))", "(-GrandSlamUmpire(Nadal))"]}
{"id": "folio_train_1772", "nl": "Nadal is a Grand Slam champion.", "fol": "IsGrandSlamChampion(Nadal)", "prediction": ["all x.(Nadal(x) -> GrandSlamChampion(x))", "Nadal is a GrandSlamChampion(n)", "(GrandSlamChampion(Nadal)", "Nadal is GrandSlamChampion(n)", "Nadal is a GrandSlamChampion(Nadal)", "all x.(Nadal(x) -> GrandSlamChampion(x))", "(GrandSlamChampion(Nadal)", "all x.(Nadal(x) -> GrandSlamChampion(x))", "Nadal is GrandSlamChampion(n)", "Nadal is a GrandSlamChampion(n)", "(GrandSlamChampion(Nadal)", "Nadal is GrandSlamChampion(Nadal)", "all x.(Nadal(x) -> GrandSlamChampion(x))", "Nadal is a GrandSlamChampion.", "All x.(Nadal(x) -> GrandSlamChampion(x))", "all x.(Nadal(x) -> GrandSlamChampion(x))"]}
{"id": "folio_train_1773", "nl": "Nadal is neither a Grand Slam umpire nor a professional tennis umpire.", "fol": "(-IsGrandSlamUmpire(Nadal) & -IsProfessionalTennisUmpire(Nadal))", "prediction": ["-(GrandSlamUmpire(Nadal) | ProfessionalTennisUmpire(Nadal))", "(-GrandSlamUmpire(Nadal) & -ProfessionalTennisUmpire(Nadal))", "all x.(Nadal(x) -> (-GrandSlamUmpire(x) & -ProfessionalTennisUmpire(x)))", "Nadal is -(GrandSlamUmpire(n) | ProfessionalTennisUmpire(n)))", "Nadal & -(GrandSlamUmpire(n) | ProfessionalTennisUmpire(n)))", "(Nadal(Nadal) & -(GrandSlamUmpire(Nadal) | ProfessionalTennisUmpire(Nadal))))", "-(GrandSlamUmpire(Nadal) & -ProfessionalTennisUmpire(Nadal))", "\u2013 (Grand SlamUmpire(Nadal) | ProfessionalTennisUmpire(Nadal)))", "(-GrandSlamUmpire(Nadal) & -ProfessionalTennisUmpire(Nadal))", "all x.(Nadal(x) -> (-GrandSlamUmpire(x) | ProfessionalTennisUmpire(x)))", "-(GrandSlamUmpire(n) | ProfessionalTennisUmpire(n)))", "-(GrandSlamUmpire(Nadal) | ProfessionalTennisUmpire(Nadal))", "(Nadal(Nadal) & -(GrandSlamUmpire(Nadal) | ProfessionalTennisUmpire(Nadal))))", "(-GrandSlamUmpire(Nadal) & -ProfessionalTennisUmpire(Nadal))", "all x.(Nadal(x) -> (-GrandSlamUmpire(x) & -ProfessionalTennisUmpire(x)))", "-(GrandSlamUmpire(Nadal) & -ProfessionalTennisUmpire(Nadal))"]}
{"id": "folio_train_1774", "nl": "If Nadal is a professional tennis umpire, then Nadal is a Grand Slam Umpire.", "fol": "(IsProfessionalTennisUmpire(Nadal) -> IsGrandSlamUmpire(Nadal))", "prediction": ["all x.((ProfessionalTennisUmpire(x) & Nadal(x)) -> GrandSlamUmpire(x))", "all x.((Nadal(x) & ProfessionalTennisUmpire(x)) -> GrandSlamUmpire(x))", "all x.(ProfessionalTennisUmpire(x) -> GrandSlamUmpire(x))", "(ProfessionalTennisUmpire(Nadal) -> GrandSlamUmpire(Nadal))", "all x y.((Nadal(x) & ProfessionalTennisUmpire(x) & Nadal(y)) -> GrandSlamUmpire(x))", "all x y.((ProfessionalTennisUmpire(x) & Nadal(y)) -> GrandSlamUmpire(y))", "all x.((ProfessionalTennisUmpire(x) & Nadal(x)) -> GrandSlamUmpire(x))", "(ProfessionalTennisUmpire(Nadal) -> GrandSlamUmpire(Nadal))", "all x.(ProfessionalTennisUmpire(x) -> GrandSlamUmpire(x))", "all x.((Nadal(x) & ProfessionalTennisUmpire(x)) -> GrandSlamUmpire(x))", "all x y.((Nadal(x) & ProfessionalTennisUmpire(x) & Nadal(y)) -> GrandSlamUmpire(y))", "all x.(ProfessionalTennisUmpire(x) -> GrandSlamUmpire(x))", "all x.((ProfessionalTennisUmpire(x) & Nadal(x)) -> GrandSlamUmpire(x))", "all x.((Nadal(x) & ProfessionalTennisUmpire(x)) -> GrandSlamUmpire(x))", "all x.(ProfessionalTennisUmpire(x) -> GrandSlamUmpire(x))", "all x.(ProfessionalTennisUmpire(x) -> GrandSlamUmpire(x))"]}
{"id": "folio_train_1775", "nl": "If Nadal is a Grand Slam umpire or a professional tennis player, then Nadal is a Grand Slam umpire.", "fol": "((IsGrandSlamUmpire(Nadal) | IsProfessionalTennisPlayer(Nadal)) -> IsGrandSlamUmpire(Nadal))", "prediction": ["all x.((Nadal(x) & (GrandSlamUmpire(x) | ProfessionalTennisPlayer(x))) -> GrandSlamUmpire(x))", "all x.((GrandSlamUmpire(x) | ProfessionalTennisPlayer(x)) -> GrandSlamUmpire(x))", "all x.((Nadal(x) & GrandSlamUmpire(x) | ProfessionalTennisPlayer(x)) -> GrandSlamUmpire(x))", "(all x.((Nadal(x) & GrandSlamUmpire(x)) | All y.(ProfessionalTennisPlayer(y)))) -> GrandSlamUmpire(x))", "all x.((Nadal(x) & (GrandSlamUmpire(x) | ProfessionalTennisPlayer(x))) -> GrandSlamUmpire(x))", "all x y.((Nadal(x) & (GrandSlamUmpire(x) | ProfessionalTennisPlayer(x))) -> GrandSlamUmpire(x))", "all x.(GrandSlamUmpire(x) | ProfessionalTennisPlayer(x)) -> GrandSlamUmpire(x))", "all x.((Nadal(x) & GrandSlamUmpire(x)) | ProfessionalTennisPlayer(x)) -> GrandSlamUmpire(x))", "(all x.((Nadal(x) & GrandSlamUmpire(x)) | All y.(ProfessionalTennisPlayer(y)))) -> GrandSlamUmpire(x))", "all x.((GrandSlamUmpire(x) | ProfessionalTennisPlayer(x)) -> GrandSlamUmpire(x))", "all x.((Nadal(x) & (GrandSlamUmpire(x) | ProfessionalTennisPlayer(x))) -> GrandSlamUmpire(x))", "all x y.((Nadal(x) & GrandSlamUmpire(x,y)) | ProfessionalTennisPlayer(x,y)) -> GrandSlamUmpire(x))", "all x y.((Nadal(x) & GrandSlamUmpire(x) & ProfessionalTennisPlayer(x)) -> GrandSlamUmpire(y))", "all x.(GrandSlamUmpire(x) | ProfessionalTennisPlayer(x)) -> GrandSlamUmpire(x))", "all x.((GrandSlamUmpire(x) | ProfessionalTennisPlayer(x)) -> GrandSlamUmpire(x))", "all x.((Nadal(x) & (GrandSlamUmpire(x) | ProfessionalTennisPlayer(x))) -> GrandSlamUmpire(x))"]}
{"id": "folio_train_1776", "nl": "Businesses are either sanctioned or unsanctioned.", "fol": "all x.(((IsBusiness(x) -> IsSanctioned(x)) & IsSanctioned(x)) | (-(IsBusiness(x) -> IsSanctioned(x)) & -IsSanctioned(x)))", "prediction": ["all x.(Business(x) -> (Sanctioned(x) | Unsanctioned(x)))", "all x.(Business(x) -> (Sanctioned(x) | Unsanctioned(x)))", "(SanctionedBusiness(Board) | UnsanctionedBusiness(Board))", "all x y.((Business(x) & (Sanctioned(x) | Unsanctioned(x))) -> (Sanctioned(x) | Unsanctioned(x)))", "all x.(Business(x) -> (Sanctioned(x) | Unsanctioned(x)))", "all x y.((Business(x) & Business(y)) -> (Sanctioned(x,y) | Unsanctioned(x,y)))", "exists x.(Board(x) & (Sanctioned(x) | Unsanctioned(x)))", "all x.(Business(x) -> (Sanctioned(x) | Unsanctioned(x)))", "all x y.((Business(x) & Business(y)) -> (Sanctioned(x,y) | Unsanctioned(x,y)))", "exists x.(Biz(x) & (Sanctioned(x) | Unsanctioned(x)))", "exists x.(Business(x) & Sanctioned(x) | Unsanctioned(x))", "all x.(Business(x) -> (Sanctioned(x) | Unsanctioned(x)))", "all x.(Business(x) -> (Sanctioned(x) | Unsanctioned(x)))", "all x.(Business(x) -> (Sanctioned(x) | -Sanctioned(x)))", "exists x.(Business(x) & (Sanctioned(x) | -Sanctioned(x)))", "all x.(Business(x) -> (Sanctioned(x) | Unsanctioned(x)))"]}
{"id": "folio_train_1777", "nl": "Sanctioned buisnesses are limited.", "fol": "all x.((IsBusiness(x) & IsSanctioned(x)) -> IsLimited(x))", "prediction": ["all x.(SanctionedBizness(x) -> Limited(x))", "all x.((Bizness(x) & Sanctioned(x)) -> Limited(x))", "all x.(SanctionedBaisness(x) -> Limited(x))", "all x.((Buisness(x) & Sanctioned(x)) -> Limited(x))", "all x y.((Bizness(x) & Sanctioned(x)) -> Limited(y))", "(all x.(SanctionedBizness(x) -> Limited(x)))", "all x y.((Biz.(Biz.(x) & Sanctioned(x)) -> Limited(y))", "(LimitedBizness(sanctioned) & Limited(s))", "all x.(SanctionedBirth(x) -> Limited(x))", "all x y.((Buisness(x) & Sanctioned(y)) -> Limited(x,y))", "exists x.(Bizness(x) & Sanctioned(x) & Limited(x))", "all x y.((Baisness(x) & Sanctioned(x,y)) -> Limited(y))", "all x.(SanctionedBuisness(x) -> Limited(x))", "all x.((Birth(x) & Sanctioned(x)) -> Limited(x))", "all x.(SanctionedBaisness(x) -> Limited(x))", "all x.(SanctionedBoisness(x) -> Limited(x))"]}
{"id": "folio_train_1778", "nl": "Unsanctioned buisnesses are free.", "fol": "all x.((IsBusiness(x) & -IsSanctioned(x)) -> IsFree(x))", "prediction": ["all x.((Bizness(x) & -Sanctioned(x)) -> Free(x))", "all x.((Buisness(x) & -Sanctioned(x)) -> Free(x))", "all x.(UnsanctionedBaisness(x) -> Free(x))", "all x y.((Biz.(x) & -Sanctioned(x)) -> Free(x))", "-SanctionedBaisnessesFree(b)", "(AllowsFreeBizness(unsanctionedBiz(x) -> Free(x))", "(all x.(UnsanctionedBizness(x) -> Free(x)))", "all x.((Baisness(x) & -Sanctioned(x)) -> Free(x))", "all x.(UnsanctionedBizness(x) -> Free(x))", "all x y.((Baisness(x) & -Sanctioned(x)) -> Free(x))", "all x.((Buisness(x) & -Sanctioned(x)) -> Free(x))", "all x y.((Buisness(x) & -Sanctioned(x)) -> Free(x))", "(all x.(UnsanctionedBaisness(x) -> Free(x)))", "all x.(UnsanctionedBuisness(x) -> Free(x))", "all x.(UnsanctionedBaisness(x) -> Free(x))", "all x.((Bosness(x) & -Sanctioned(x)) -> Free(x))"]}
{"id": "folio_train_1779", "nl": "The Crude Oil Data Exchange is a buisness that isn't free.", "fol": "(IsBusiness(CrudeOilDataExchange) & -IsFree(CrudeOilDataExchange))", "prediction": ["all x.(CrudeOilDataExchange(x) -> (Baisness(x) & -Free(x)))", "(Baisness(crudeOilDataExchange) & -Free(crudeOilDataExchange))", "all x.((CrudeOilDataExchange(x) & -Free(x)) -> CrudeOilDataExchange(x))", "the CrudeOilDataExchange(CrudeOil) -> (Baisness(CrudeOil) & -Free(CrudeOil)))", "(Bailey(CrudeOilDataExchange) & -Free(CrudeOilDataExchange))", "all x.(CrudeOilDataExchange(x) -> (Bizness(x) & -Free(x)))", "(-Free(CrudeOilDataExchange))", "all x.(CrudeOilDataExchange(x) -> (Buisness(x) & -Free(x)))", "all x y.((CrudeOilDataExchange(x) & Business(y)) -> -Free(y))", "(Bizness(crudeOilDataExchange) & -Free(crudeOilDataExchange))", "all x y.((CrudeOilDataExchange(x) & Business(y) & -Free(y)) -> -Free(x))", "all x.(CrudeOilDataExchange(x) -> -Free(x))", "All x.((CrudeOilDataExchange(x) & -Free(x)) -> CrudeOilDataExchange(x))", "all x.(CrudeOilDataExchange(x) -> (Baisness(x) & -Free(x)))", "All x.(CrudeOilDataExchange(x) -> -Free(x))", "All x.(CrudeOilDataExchange(x) -> -Free(x))"]}
{"id": "folio_train_1780", "nl": "Crude Oil Data Exchange is sanctioned.", "fol": "IsSanctioned(CrudeOilDataExchange)", "prediction": ["all x.(CrudeOilDataExchange(x) -> Sanctioned(x))", "all x y.((CrudeOilDataExchange(x) & CrudeOil(y)) -> Sanctioned(x))", "(Sanctioned(CrudeOilDataExchange))", "all x.((CrudeOilDataExchange(x) & Sanctioned(x)) -> Sanctioned(x))", "All x.(CrudeOilDataExchange(x) -> Sanctioned(x))", "(Sanctioned CrudeOilDataExchange(CRUDEOil))", "all x y.((CrudeOilDataExchange(x) & CrudeOil(y)) -> Sanctioned(x))", "(SanctionedCrudeOilDataExchange(CrudeOil))", "all x.(CrudeOilDataExchange(x) -> Sanctioned(x))", "All x.((CrudeOilDataExchange(x) & Sanctioned(x)) -> Sanctioned(x))", "all x y.((CrudeOilDataExchange(x) & CrudeOil(y)) -> Sanctioned(x,y))", "(Sanctioned(crudeOilDataExchange))", "All x.(CrudeOilDataExchange(x) -> Sanctioned(x))", "All x.(CrudeOilDataExchange(x) -> Sanctioned(x))", "All x.((CrudeOilDataExchange(x) & Sanctioned(x)) -> Sanctioned(x))", "All x.(CrudeOilDataExchange(x) -> Sanctioned(x))"]}
{"id": "folio_train_1781", "nl": "Crude Oil Data Exchange is unsanctioned.", "fol": "-IsSanctioned(CrudeOilDataExchange)", "prediction": ["all x.(CrudeOilDataExchange(x) -> Unsanctioned(x))", "(Unsanctioned(crudeOilDataExchange))", "CrudeOilDataExchange.com -Sanctioned(CrudeOilDataExchange)", "(Unsanctioned(CrudeOilDataExchange))", "All x.((CrudeOilDataExchange(x) & -Sanctioned(x)) -> -Sanctioned(x))", "All x.(CrudeOilDataExchange(x) -> Unsanctioned(x))", "(UnsanctionedCrudeOilDataExchange(CrudeOil))", "CrudeOilDataExchange (unsanctioned)", "CrudeOilDataExchange.com -Sanctioned(x)", "(Unsanctioned(crudeOilDataExchange)", "all x.(CrudeOilDataExchange(x) -> Unsanctioned(x))", "(Unsanctioned(CrudeOilDataExchange)", "All x.(CrudeOilDataExchange(x) -> Unsanctioned(x))", "-Sanctioned CrudeOilDataExchange.", "all x.(CrudeOilDataExchange(x) -> Unsanctioned(x))", "-Sanctioned CrudeOilDataExchange."]}
{"id": "folio_train_1782", "nl": "Crude Oil Data Exchange is limited.", "fol": "IsLimited(CrudeOilDataExchange)", "prediction": ["(Limited(CrudeOilDataExchange))", "(LimitedCrudeOilDataExchange(CrudeOil))", "all x y.((CrudeOilDataExchange(x) & CrudeOil(y)) -> Limited(x))", "CrudeOilDataExchange(x) & Limited(x))", "Limited CrudeOilDataExchange(x)", "All x.((CrudeOilDataExchange(x) & Limited(x)) -> Limited(x))", "-Limited CrudeOilDataExchange(x)", "all x.(CrudeOilDataExchange(x) -> Limited(x))", "(Limited(CrudeOilDataExchange))", "(LimitedCrudeOilDataExchange(CrudeOil))", "CrudeOilDataExchange(x) & Limited(x))", "All x.(CrudeOilDataExchange(x) -> Limited(x))", "All x.((CrudeOilDataExchange(x) & Limited(x)) -> Limited(x))", "(LimitedCrudeOilDataExchange(c) & Limited(c))", "all x.(CrudeOilDataExchange(x) -> Limited(x))", "all x.(CrudeOilDataExchange(x) -> Limited(x))"]}
{"id": "folio_train_1783", "nl": "When something is depressing, it is sad.", "fol": "all x.(IsDepressing(x) -> IsSad(x))", "prediction": ["all x.((Depressing(x) & Sad(x)) -> Depressing(x))", "all x.((Depressing(x) & Sad(x)) -> Depressing(x))", "all x y.((Depressing(x) & Sad(y)) -> Depressing(x))", "all x.(Depressing(x) -> Sad(x))", "all x.((PoorDepressing(x) & Sad(x)) -> Depressing(x))", "all x.((Depressing(x) & Sad(x)) -> Depressing(x))", "all x y.((Depressing(x) & Sad(y)) -> Depressing(x))", "all x y.((Depressing(x) & Depressing(y)) -> Sad(x,y))", "all x.((Depressing(x) & Sad(x)) -> Depressing(x))", "all x.(Depressing(x) -> Sad(x))", "all x.((Depressing(x) & Sad(x)) -> Depressing(x))", "all x.(Depressing(x) -> Sad(x))", "exists x.(Depressing(x) & Sad(x))", "all x.((Depressing(x) & Sad(x)) -> Depressing(x))", "exists x.(Depressing(x) & Sad(x))", "exists x.(Depressing(x) & Sad(x))"]}
{"id": "folio_train_1784", "nl": "V is depressing. ", "fol": "all x.(EntityV(x) -> IsDepressing(x))", "prediction": ["(Depressing(V) -> Depressing(V))", "all x.(V(x) -> Depressing(x))", "all x.((V(x) & Depressing(x)) -> Depressing(x))", "V is depressing.", "all x.(V.((V) & Depressing(x)) -> Depressing(x))", "(Depressing(V) & Depressing(V))", "Depressing(V)", "V is depressing.", "all x.((V) & Depressing(x)) -> Depressing(x))", "All x.(V isDepressing(x) -> Depressing(x))", "(Depressing(v) -> Depressing(v))", "-Depressing(V)", "All x.(V(x) -> Depressing(x))", "is depressing.", "(Depressing)", "(Depressing)"]}
{"id": "folio_train_1785", "nl": "V is invigorating", "fol": "all x.(EntityV(x) -> Invigorating(x))", "prediction": ["all x.(V isInvigorating(x) -> Invigorating(x))", "all x y.((Visitor(x) & Invigorating(y)) -> Invigorating(x,y))", "(InvigoratingV) -> InvigoratingV))", "(V isInvigorating(V) & Invigorating(V))", "V is invigorating.", "all x y z.((Visitor(x) & Invigorating(y) & Invigorating(z)) -> Invigorating(x,y,z))", "all x y.((V(x) & Invigorating(y)) -> Invigorating(x,y))", "(Invigorating(V) -> Invigorating(V))", "V is Invigorating(V)", "all x.(V isInvigorating(x) -> Invigorating(x))", "(InvigoratingV) -> InvigoratingV.", "All x.(Visiting(x) -> Invigorating(x))", "(V is Invigorating(V) & Invigorating(V))", "V is invigorating.", "V is Invigorating(V)", "V is invigorating."]}
{"id": "folio_train_1786", "nl": "Palstaves are a type of early bronze axe.", "fol": "all x.((IsPalstave(x) -> FromPeriod(x,Earlybronzeage)) & IsAxe(x))", "prediction": ["all x.(Palstaves(x) -> EarlyBronzeAxe(x))", "all x.(Palstaves(x) -> EarlyBronzeAxe(x))", "all x.(Palstaves(x) -> (EarlyBronzeAxe(x) & HasAxe(x)))", "all x.(Palstaves(x) -> (EarlyBronzeAxe(x) & HasAxe(x)))", "all x y.((Palstaves(x) & BronzeAxe(y)) -> Early(x,y))", "(EarlyBronzeAxe(palstaves) -> EarlyBronzeAxe(palstaves))", "all x y.((Palstaves(x) & BronzeAxe(y)) -> Early(x,y))", "all x.(Pallstaves(x) -> (EarlyBronzeAxe(x) & -EarlyBronzeAxe(x)))", "all x.((Palstave(x) & EarlyBronzeAxe(x)) -> Axe(x))", "all x.(Palstaves(x) -> (EarlyBronzeAxe(x) & -EarlyBronzeAxe(x)))", "all x.(Palstaves(x) -> EarlyBronzeAxe(x))", "all x.(Palstaves(x) -> EarlyBronzeAxe(x))", "all x y.((Palstaves(x) & EarlyBronzeAxe(y)) -> Axe(x,y))", "all x.((Palstaves(x) & EarlyBronzeAxe(x)) -> HasAxe(x,y))", "all x.(Palstaves(x) -> EarlyBronzeAxe(x))", "exists x.(Pallstaves(x) & BronzeAxe(x))"]}
{"id": "folio_train_1787", "nl": "Commonly found in northern, western and south-western Europe, palstaves are cast in moulds.", "fol": "all x y.((IsPalstave(x) & IsMould(y)) -> (FoundInRegion(x,Northerneurope) & FoundInRegion(x,Westerneurope) & FoundInRegion(x,SouthWesternEurope) & CastUsingMould(x,y)))", "prediction": ["all x.(Palstaves(x) -> (FoundIn(x,NorthernEurope) & FoundIn(x,WestEurope) & FoundIn(x,SouthWestEurope)))", "all x y.((Palstaves(x) & NorthernEurope(y) & WesternEurope(y) & SouthWestEurope(y)) -> CastInMolds(x))", "all x.(Pallstaves(x) -> (FindsInNorthern(x) & FoundInWestern(x) & FoundInSouthWest(x)))", "all x y z.((Palstaves(x) & NorthernEurope(y) & WesternEurope(z) & SouthWestEurope(z)) -> CastInMolds(x))", "(all x.(Palstaves(x) -> FoundIn(x,NorthernEurope)) & (WilderEurope) | SouthWestEurope)))", "(all x.(Palstaves(x) -> FoundInNorthern(x)) & (Wild(x) | SouthWide(x))) & CastInMolds(x))", "all x.(Pallstaves(x) -> (FindsInNorthernEurope(x) & FoundInWesternEurope(x) & FoundInSouthWestEurope(x)))", "all x.(Palstaves(x) -> (FoundIn(x,NorthernEurope) & FoundIn(x,WestEurope) & FoundIn(x,SouthWestEurope)))", "all x.(Pastave(x) -> (FoundIn(x,NorthernEurope) & FoundIn(x,WestEurope) & FoundIn(x,SouthWestEurope)))", "all x y.((Pallstaves(x) & NorthernEurope(y) & WesternEurope(y) & SouthWestEurope(y)) -> CastInMolds(x,y))", "all x.(Palstaves(x) -> (FoundInNorthern(x) & FoundInWestern(x) & FoundInSouthWest(x)))", "all x y z.((Pallstaves(x) & NorthernEurope(y) & WesternEurope(z) & SouthWestenserland(z)) -> CastInMolds(x))", "(all x.(Pallstaves(x) -> FoundIn(x,NorthernEurope)) & (WildestEurope(x) | SouthWestEurope(x))))", "all x.(Palstaves(x) -> (Northern(x) & Western(x) & SouthWest(x)))", "all x y.((Palstaves(x) & NorthernEurope(y) & WesternEurope(y) & SouthWestEurope(y)) -> CastInMolds(x))", "all x.(Pallstaves(x) -> CastInMolds(x))"]}
{"id": "folio_train_1788", "nl": "John Evans is an archeologist who popularized the term \"palstave\".", "fol": "(IsArcheologist(Johnevans) & PopularizedTerm(Johnevans,Termpalstave))", "prediction": ["(Archeologist(JohnEvans) & PopularizedPalstave(JohnEvans))", "John Evans (Archeologist) & PopularizedPalstave(JohnEvans))", "all x.((Archeologist(x) & PopularizedPalstave(x)) -> JohnEvans(x))", "John Evans, Archeologist, PopularizedPalstave(JohnEvans)", "(PopulatedTermPalstave(JohnEvans) & Archeologist(JohnEvans))", "(PopularizedTerm(JohnEvans) & Palstave(JohnEvans))", "John Evans is an archeologist who popularized the term \"palstave\"\"", "John Evans (Archeologist) & PopularizedPalstave(John,Evans))", "(Archeologist(JohnEvans) & PopularizedPalstave(JohnEvans))", "JohnEvans(JohnEvans) is an archeologist (archeologist) & PopularizedPalstave(JohnEvans))", "(Archeologist(JohnEvans) & PopularizedTermPalstave(JohnEvans))", "JohnEvans(John) is anarcheologist(John) & PopularizedPalstave(John,Evans))", "all x.((Archeologist(x) & PopularizedPalstave(x)) -> JohnEvans(x))", "John Evans, Archeologist, PopularizedPalstave(JohnEvans)", "John Evans (Archeologist) & PopularizedPalstave(JohnEvans))", "(Archeologist(JohnEvans) & PopularizedPalstave(JohnEvans))"]}
{"id": "folio_train_1789", "nl": "A paalstab is not an axe, but rather a digging shovel.", "fol": "all x.((IsPaalstab(x) -> -IsAxe(x)) & IsDiggingShovel(x))", "prediction": ["all x.(Paalstab(x) -> (-Axe(x) & DiggingPull(x)))", "(-Axe(palstab) & DiggingPull(palstab))", "all x.(Paalstab(x) -> (-Axe(x) & DiggingPull(x)))", "all x y.((Paalstab(x) & Axe(y)) -> (-Axe(x,y) & DiggingPull(x)))", "all x.(Palstab(x) -> (-Axe(x) & DiggingPull(x)))", "all x.((Paalstab(x) & -Axe(x)) -> DiggingPull(x))", "(-Axe(palstab) & DiggingPellet(palstab))", "all x.(Paalstab(x) -> (-Axe(x) & DiggingSparrow(x)))", "all x y.((Paalstab(x) & Axe(y)) -> (-Axe(x,y) & DiggingPull(x)))", "all x.(Paalstab(x) -> (-Axe(x) & DiggingPull(x)))", "all x.(Paalstab(x) -> (-Axe(x) & DiggingPellet(x)))", "all x y.((Paalstab(x) & Axe(y)) -> (-Axe(y) & DiggingPull(x)))", "exists x.(Palstab(x) & -Axe(x) & DiggingPull(x))", "all x.(Paalstab(x) -> (-Axe(x) & DiggingShelle(x)))", "exists x.(Paalstab(x) & -(Axe(x) & DiggingPull(x)))", "all x.(Paalstab(x) -> (-Axe(x) & DiggingSheel(x)))"]}
{"id": "folio_train_1790", "nl": "John Evans Popularized the term paalstab.", "fol": "PopularizedTerm(Johnevans,Termpaalstab)", "prediction": ["John Evans PopularizedTermPaalstab(JohnEvans)", "(PopularizedTerm(JohnEvans) & Paalstab(JohnEvans))", "all x.(PopularizedTermPaalstab(x) -> JohnEvans(x))", "John Evans PopularizedTheTermPaalstab(JohnEvans)", "PopularizedTermPaalstab(JohnEvans)", "JohnEvansPopularizedTermPaalstab(JohnEvans)", "-PopularizedTerm(JohnEvans,Paalstab)", "(Popularized(JohnEvans) & Paalstab(JohnEvans))", "(PopularizedTerm(JohnEvans,Paalstab))", "all x.(PopularizedTermPaalstab(x) -> JohnEvans(x))", "John Evans PopularizedTermPaalstab(JohnEvans)", "(PopulatedTerm(JohnEvans) & Paalstab(JohnEvans))", "John Evans PopularizedPaalstab(JohnEvans)", "John Evans PopularizedTheTermPaalstab(JohnEvans)", "(PopulatedByJohnEvans(JohnEvans) & Paalstab(JohnEvans))", "John Evans PopularizedtheTermPaalstab(JohnEvans)"]}
{"id": "folio_train_1791", "nl": "There is an axe that is commonly found in Western Europe.", "fol": "exists x.(IsAxe(x) & FoundInRegion(x,Westerneurope))", "prediction": ["exists x.(Axe(x) & CommonlyFoundIn(x,WestEurope))", "exists x y.(Axe(x) & WesternEurope(y) & CommonlyFoundIn(x,y))", "exists x.(Axe(x) & CommonlyFoundIn(x,WestEurope))", "exists x.(Axe(x) & CommonlyFoundIn(x,WestEurope))", "all x y.((Axe(x) & WesternEurope(y)) -> CommonlyFound(x,y))", "exists x.(Axe(x) & FoundIn(x,WestEurope))", "all x y z.((Axe(x) & WesternEurope(y) & WesternEurope(z)) -> CommonlyFound(x,y,z))", "all x y.((Axe(x) & WesternEurope(y)) -> CommonlyFindsIn(x,y))", "exists x.(Axe(x) & CommonlyFindsInWestEurope(x))", "exists x.(Axe(x) & FoundIn(x,WestEurope))", "all x y.((Axe(x) & WesternEurope(y)) -> CommonlyFound(x,y))", "exists x.(Axe(x) & CommonlyFoundInWESTEurope(x))", "exists x.(Axe(x) & FoundIn(x,WestEurope))", "exists x.(Axe(x) & OftenFindsInWideEurope(x))", "exists x.(Axe(x) & CommonlyFoundIn(x,WestEurope))", "exists x.(Axis(x) & FoundInWideEurope(x))"]}
{"id": "folio_train_1792", "nl": "Archeologists haven't popularized anything.", "fol": "-exists x.(IsArcheologist(x) & exists y.PopularizedTerm(x,y))", "prediction": ["all x.(Archeologist(x) -> -Popularized(x))", "(-Popularized(archeologist) -> -Popularized(archeologist))", "all x.(Archeologist(x) -> -Popularized(x))", "all x y.((Archeologist(x) & Popularized(y)) -> -Popularized(x,y))", "(exists x.(Archeologist(x) & Popularized(x)) & -Popularized(x)))", "(-Popularized(archeologist) -> -Popularized(archeologist,x))", "all x.(Archeologist(x) -> -Popularized(x))", "all x y.((Archeologist(x) & Popularized(y,x)) -> -Popularized(x,y))", "(exists x.(Archeologist(x) & Popularized(x)) & -Popularized(x))", "(-Popularized(archeologist) & -Popularized(archeologist,x))", "all x.(Archeologist(x) -> -Popularized(x))", "-Populated(archeologist)", "all x.(Archeologist(x) -> -Populated(x))", "-Popularized(archeologists)", "all x.(Archeologist(x) -> -Popularized(x))", "all x.(Archeologist(x) -> -PopulatedAnything(x))"]}
{"id": "folio_train_1793", "nl": "Koei Tecmo is a Japanese video game and anime holding company.", "fol": "(IsJapanese(Koeitecmo) & IsVideoGameHoldingCompany(Koeitecmo) & IsHoldingCompany(Koeitecmo))", "prediction": ["all x.(KoeiTecmo(x) -> (JapaneseVideoGame(x) & JapaneseAnimeHoldingCompany(x)))", "all x.((JapaneseVideoGame(x) & JapaneseAnimeHoldingCompany(x)) -> KoeiTecmo(x))", "KoeiTecmo (JapaneseVideoGameAndAnimeHoldingCompany)", "(JapaneseVideoGameAndAnimeHoldingCompany(KoeiTecmo) & HoldingCompany(KoeiTecmo))", "all x y.((KoeiTecmo(x) & JapaneseVideoGame(y) & JapaneseAnime(z)) -> HoldingCompany(x,y,z))", "all x.(KoeiTecmo(x) -> (JapaneseVideoGameAndAnimeHoldingCompany(x) & JapaneseHoldingCompany(x)))", "All x y.((JapaneseVideoGame(x) & JapaneseAnimeHoldingCompany(y)) -> KoeiTecmo(x))", "all x.((JapaneseVideoGame(x) & JapaneseAnimeHolding(x)) -> KoeiTecmo(x))", "(JapaneseVideoGameAndAnimeHolding(KoeiTecmo) & Holding(KoeiTecmo))", "all x.((JapaneseVideoGameAndAnimeHoldingCompany(x)) -> KoeiTecmo(x))", "KoeiTecmo (JapaneseVideoGameAndAnimeHoldingCompany)", "(JapaneseVideoGameAndAnimeHoldingCompany(KoeiTecmo) & Japanese(KoeiTecmo))", "all x.(KoeiTecmo(x) -> (JapaneseVideoGame(x) & JapaneseAnimeHoldingCompany(x)))", "KoeiTecmo (JapaneseVideoGameAndAnimeHoldingCompany)", "all x.(KoeiTecmo(x) -> (JapaneseVideoGameAndAnimeHoldingCompany(x) & JapaneseAnimeHoldingCompany(x)))", "(JapaneseVideoGameAndAnimeHoldingCompany(KoeiTecmo) & HoldingCompany(KoeiTecmo))"]}
{"id": "folio_train_1794", "nl": "Holding companies hold several companies.", "fol": "all x.exists y.(IsHoldingCompany(x) -> (IsCompany(y) & HoldsCompany(x,y)))", "prediction": ["all x.(HoldingCompany(x) -> HoldsCompanies(x))", "all x y.((HoldingCompany(x) & Company(y)) -> Holds(x,y))", "all x y z.((HoldingCompany(x) & Company(y) & Company(z)) -> Holds(x,y,z))", "exists x.(HoldingCompany(x) & HoldsCompany(x))", "all x y.((HoldingCompany(x) & Company(y)) -> Holds(x,y))", "exists x.(HostingCompany(x) & HoldsCompany(x))", "all x y.((HostingCompany(x) & Company(y)) -> Holds(x,y))", "exists x.(HoldingCompany(x) & HoldsCompany(x))", "all x y.((HoldingCompany(x) & Company(y)) -> Holds(x,y))", "all x y z.((HoldingCompany(x) & Company(y) & Company(z)) -> Holds(x,y,z))", "exists x.(HoldingCompany(x) & HoldsCompany(x,y))", "exists x.(HostingCompany(x) & HoldsCompany(x,y))", "all x y.((HoldingCompany(x) & Company(y)) -> Holds(x,y))", "exists x.(HoldingCompany(x) & Holds(x,Company))", "all x y.((HoldingCompany(x) & Company(y)) -> Holds(x,y))", "exists x.(HoldingCompany(x) & HoldsCompanies(x,y))"]}
{"id": "folio_train_1795", "nl": "Tecmo was disbanded in Japan, while Koei survived, but was renamed.", "fol": "(WasDisbanded(Tecmo) & HasSurvived(Koei_) & WasRenamed(Koei_))", "prediction": ["(all x.(Tecmo(x) -> DisbandedInJapan(x)) & (Koei(x) -> Survives(x)) & -Renamed(x)))", "(all x y.(Tecmo(x) -> DisbandedInJapan(x)) & (Koei(y) -> Survives(y)) & -Renamed(y)))", "(all x y.((Tecmo(x) & Japan(y)) -> Disbanded(x,y)) & ((Koei(x) & Japan(y)) -> Survives(x,y)))", "all x y.((Tecmo(x) & Koei(y)) -> (DisbandedInJapan(x) & Survives(y) & Renamed(y)))", "(all x.(Tecmo(x) -> DisbandedInJapan(x)) & all y.(Koei(y) -> Survives(y)))", "all x y z.((Tecmo(x) & Koei(y) & Japan(z)) -> (Disbanded(x,y) & Survives(y,z) & Renamed(y,z)))", "all x.(Tecmo(x) -> (DisbandedInJapan(x) | Survives(x) & Renamed(x)))", "(all x y.((Tecmo(x) & Japan(y)) -> Disbanded(x)) & ((Koei(x) & Japan(y)) -> Survives(x,y)))", "(exists x.(Tecmo(x) & DisbandedInJapan(x)) & exists y.(Koei(y) & Survives(y,x) & Renamed(y,x)))", "all x y.((Tecmo(x) & Koei(y)) -> (DisbandedInJapan(x) & Survived(y) & Renamed(y)))", "(all x.(Tecmo(x) -> DisbandedInJapan(x)) & (Koei(x) -> Survived(x)) & -Renamed(x)))", "all x y.((Tecmo(x) & Koei(y)) -> (Disbanded(x) & Survives(y) & Renamed(y)))", "(all x.(Tecmo(x) -> DisbandedInJapan(x)) & all y.(Koei(y) -> Survived(y)) & all z.(Koei(z) -> Renamed(z))))", "(all x y.((Tecmo(x) & Japan(y)) -> Disbanded(x,y)) & ((Koei(x) & Japan(y)) -> Survived(x,y)))", "all x y.((Tecmo(x) & Koei(y)) -> (DisbandedInJapan(x) & Survives(y) & Renamed(y)))", "(all x.(Tecmo(x) -> DisbandedInJapan(x)) & (Koei(x) -> Survives(x) & Renamed(x)))"]}
{"id": "folio_train_1796", "nl": "Video game holding companies are holding companies.", "fol": "all x.(IsVideoGameHoldingCompany(x) -> IsHoldingCompany(x))", "prediction": ["all x.(VideoGameHoldingCompany(x) -> HoldingCompany(x))", "all x y.((VideoGameHoldingCompany(x) & HoldingCompany(y)) -> HoldingCompany(x))", "(HoldingCompany(videogame) & HoldingCompany(videogame))", "all x.(VideoGameHoldingCompany(x) -> HoldingCompany(x))", "all x y.((VideoGameHoldingCompany(x) & HoldingCompany(y)) -> HoldingCompany(x))", "all x.(VideoGameHoldingCompany(x) -> HoldingCompany(x))", "all x y.((VideoGameHoldingCompany(x) & HoldingCompany(y)) -> HoldingCompany(x))", "all x.(VideoGameHoldingCompany(x) -> HoldingCompany(x))", "exists x.(VideoGameHostingCompany(x) & HoldingCompany(x))", "all x.(VideoGameHolding(x) -> HoldingCompany(x))", "all x y.((VideoGameHoldingCompany(x) & HoldingCompany(y)) -> HoldingCompany(x,y))", "all x.(VideoGameHoldingCompany(x) -> HoldingCompany(x))", "all x y.((VideoGameHoldingCompany(x) & HoldingCompany(y)) -> HoldingCompany(x))", "all x.(VideoGameHoldingCompany(x) -> HoldingCompany(x))", "all x.(VideoGameHoldingCompany(x) -> HoldingCompany(x))", "exists x.(VideoGameHoldingCompany(x) & HoldingCompany(x))"]}
{"id": "folio_train_1797", "nl": "Koei Tecmo holds another company.", "fol": "exists y.(IsCompany(y) & HoldsCompany(Koeitecmo,y))", "prediction": ["all x.(KoeiTecmo(x) -> HoldsAnotherCompany(x))", "all x y.((KoeiTecmo(x) & Company(y)) -> Holds(x,y))", "KoeiTecmo HoldsAnotherCompany(x)", "(HoldsCompany(KoeiTecmo) & HoldsCompany(KoeiTecmo))", "(HoldsAnotherCompany(KoeiTecmo)", "holds another company, KoeiTecmo.", "(HoldsCompany(KeiTecmo) & HoldsCompany(KeiTecmo))", "exists x.(KoeiTecmo(x) & Holds(x,y))", "all x y.((CoeiTecmo(x) & Company(y)) -> Holds(x,y))", "exists x.(KeiTecmo(x) & Holds(x,Company))", "KoeiTecmo HoldsAnotherCompany(k))", "all x y.((KoeiTecmo(x) & Company(y)) -> Holds(x,y))", "holds another company, KoeiTecmo.", "(HoldsCompany(k) & KoeiTecmo(k))", "exists x.(KoeiTecmo(x) & Holds(x,Company))", "all x y.((KoeiTecmo(x) & Company(y)) -> Holds(x,y))"]}
{"id": "folio_train_1798", "nl": "Tecmo holds another company.", "fol": "exists y.(IsCompany(y) & HoldsCompany(Tecmo,y))", "prediction": ["all x.(Tecmo(x) -> HoldsAnotherCompany(x))", "Tecmo HoldsAnotherCompany(Tecmo)", "all x y.((Tecmo(x) & Company(y)) -> Holds(x,y))", "(HoldsAnotherCompany(Tecmo))", "(HoldsCompany(Tecmo) & HoldsCompany(Tecmo))", "all x.(Tecmo(x) -> HoldsAnotherCompany(x))", "Tecmo HoldsAnotherCompany(Tecmo)", "all x y.((Tecmo(x) & Company(y)) -> Holds(x,y))", "exists x.(Tecmo(x) & Holds(x,y))", "Tecmo HoldsAnotherCompany(Tecmo)", "(HoldsCompany(Tecmo) | HoldsCompany(Tecmo))", "all x y.((Tecmo(x) & Company(y)) -> Holds(x,y))", "exists x.(Tecmo(x) & Holds(x,Company))", "all x y.((Tecmo(x) & Company(y)) -> Holds(x,y))", "exists x.(Tecmo(x) & Holds(x,Company))", "exists x.(Tecmo(x) & Holds(x,company))"]}
{"id": "folio_train_1799", "nl": "Koei Tecmo holds anime.", "fol": "HoldsCompany(Koeitecmo,Anime)", "prediction": ["all x.(KoeiTecmo(x) -> HoldsAnime(x))", "KoeiTecmo HoldsAnime(x)", "all x y.((KoeiTecmo(x) & Anime(y)) -> Holds(x,y))", "all x.((KoeiTecmo(x) & HoldsAnime(x)) -> HoldsAnime(x))", "(HoldsAnime(KoeiTecmo)", "(HoldsAnime(koei) & Tecmo(ko))", "all x.(KoeiTecmo(x) -> HoldsAnime(x))", "holdsAnime(KoeiTecmo)", "holdsAnime(k)", "KoeiTecmo HoldsAnime(x)", "all x y.((KoeiTecmo(x) & Anime(y)) -> Holds(x,y))", "KoeiTecmo holdsAnime(x)", "all x.(KoeiTecmo(x) -> HoldsAnime(x))", "(HoldsAnime(KoeiTecmo)", "exists x.(KoeiTecmo(x) & HoldsAnime(x))", "exists x.(KoeiTecmo(x) & HoldsAnime(x))"]}
{"id": "folio_train_1800", "nl": "The PlayStation EyeToy is a camera accessory for the Playstation 2. ", "fol": "CameraAccessoryForSystem(Pseyetoy,Ps2)", "prediction": ["all x.(Playstation2EyeToy(x) -> CameraAdjustment(x))", "all x y.((Playstation2EyeToy(x) & Playstation2(y)) -> CameraAdjustment(x,y))", "(CameraAdjustment(Playstation2) & ForPlaystation2(Playstation2))", "the PlayStationEyeToy(x) -> (CameraAdjustment(x) & ForPlaystation2(x)))", "all x.(Playstation2(x) -> EyeToy(x))", "all x.((Playstation2EyeToy(x) & CameraAdjustment(x)) -> Playstation2(x))", "(CameraAccessories(Playstation2) & EyeToy(Playstation2))", "all x y.((Playstation(x) & EyeToy(y)) -> CameraAdjustment(x,y))", "all x y z.((Playstation(x) & EyeToy(y) & Playstation2(z)) -> CameraAdjustment(y,z))", "the PlayStationEyeToy is a camera accessory for Playstation 2.", "(ApplianceForPlaystation2) & CameraAdjustment(Playstation2))", "all x.(Playstation2EyesToy(x) -> CameraAdjustment(x))", "(CameraAdjustment(Psystole2) & ForPlaystation2(Psystole2))", "All x.(PsystoleEyesToy(x) -> CameraAdjustment(x))", "All x.(PsystolSewToy(x) -> (CameraAdjustment(x) & Playstation2(x)))", "all x y.((Playstation2EyeToy(x) & Playstation2(y)) -> CameraAccessories(x,y))"]}
{"id": "folio_train_1801", "nl": "The PlayStation Eye is a camera accessory for the Playstation 3.", "fol": "CameraAccessoryForSystem(Pseye,Ps3)", "prediction": ["all x.(PlaystationEye(x) -> CameraAccessories(x))", "all x.(PsystoleEye(x) -> (CameraAdjustment(x) & Playstation3(x)))", "all x y.((PlaystationEye(x) & Playstation3(y)) -> CameraAccessories(x,y))", "(CameraAccessories(Playstation3) & CameraAccessories(Playstation3))", "all x.(PlaystationEye(x) -> (CameraAccessories(x) & Playstation3(x)))", "the PlayStationEye is a camera accessory for Playstation 3.", "all x y z.((PsysoseEye(x) & Playstation3(y) & CameraAdjustment(x,y)) -> (CameraAdjustment(x,z) & ForPlaystation3(z)))", "(CameraAdjustment(Playstation3) & ForPlaystation3.", "(CameraAccessories(PsystoleEye) & Playstation3(Playstation3))", "(ApplianceForPlaystation3)) - PlayStationEye(Psysos(Psysos))", "all x y.((Playstation(x) & PlayStationEye(y)) -> CameraAdjustment(x,y))", "all x.(PsystechEye(x) -> (CameraAccessories(x) & Playstation3(x)))", "all x.(Playstation3(x) -> CameraAccessories(x))", "All x.((PlaystationEye(x) & CameraAdjustment(x)) -> Playstation3(x))", "the PlayStationEye is a camera accessory for Playstation 3.", "All x.(PlaystationEye(x) -> CameraAdjustment(x))"]}
{"id": "folio_train_1802", "nl": "The Playstation Camera is a camera accessory for the Playstation 4 and the Playstation 5.", "fol": "(CameraAccessoryForSystem(Pscamera,Ps4) & CameraAccessoryForSystem(Pscamera,Ps5))", "prediction": ["all x.(PlaystationCamera(x) -> (CameraApplication(x) & CompatibleWithPlaystation4AndPlaystation5(x)))", "(CameraApplication(Playstation4) & CameraApplication(Playstation5))", "all x y.((PlaystationCamera(x) & Playstation4(y)) -> (CameraAdjustment(x,y) & CompatibleWith(x,y)))", "all x.(PlaystationCamera(x) -> (Adjustment(x,Playstation4) & Adjustment(x,Playstation5)))", "(Adjustment(PlaystationCamera) & CompatibleWithPlaystation4AndPlaystation5(Playstation4))", "(Appliance(Playstation4) & Appliance(Playstation5))", "the PlaystationCamera(x) -> (CameraAccessories(x) & CompatibleWithPlaystation4AndPlaystation5(x)))", "(CameraAccessories(Playstation4) & Accessories(Playstation5))", "all x.(PlaystationCamera(x) -> (CameraAccessories(x,Playstation4) & Accessories(x,Playstation5)))", "all x y.((PlaystationCamera(x) & Playstation4(y)) -> (Adjustment(x,y) & Attachment(x,y)))", "(ApplianceForPlaystation(Playstation4) & ApplianceForPlaystation5(Playstation4))", "all x.(PlaystationCamera(x) -> (AdjustableToPlaystation4(x) & AdjustableToPlaystation5(x)))", "all x.(PlaystationCamera(x) -> (Appliance(x,Playstation4) & Appliance(x,Playstation5)))", "all x.(PlaystationCamera(x) -> (CameraAppliance(x) & CompatibleWithPlaystation4AndPlaystation5(x)))", "(AccessoriesForPlaystation4AndPlaystation5(Playstation))", "All x.(PlaystationCamera(x) -> (CameraApplication(x) & CompatibleWithPlaystation4AndPlaystation5(x)))"]}
{"id": "folio_train_1803", "nl": "Camera accessory for the system is compatible with that system", "fol": "all x y.(CameraAccessoryForSystem(x,y) -> IsCompatibleWith(x,y))", "prediction": ["all x y.((CameraAdjustment(x) & System(y)) -> CompatibleWith(x,y))", "all x.((CameraAdjustment(x) & System(x)) -> CompatibleWithSystem(x))", "all x y z.((CameraAdjustment(x) & System(y) & System(z) & CompatibleWith(x,y,z)) -> CompatibleWith(x,y,z))", "all x.((CameraAccessories(x) & System(x)) -> CompatibleWithSystem(x))", "all x y.((CameraAdjustment(x) & System(y)) -> CompatibleWith(x,y))", "all x y.((CameraAccessories(x) & System(y)) -> CompatibleWith(x,y))", "all x y z.((CameraAdjustment(x) & System(y) & System(z) & Compatible(x,y,z)) -> Compatible(x,y,z))", "(CompatibleWithSystem(cameraAdjustment))", "all x.((CameraAdjustment(x) & System(x)) -> CompatibleWithSystem(x,y))", "all x.((CameraAccessories(x) & CompatibleWithSystem(x)) -> CompatibleWithSystem(x))", "(CompatibleWithSystem(CameraAdjustment))", "all x.(CameraAdjustment(x) -> CompatibleWithSystem(x))", "all x y.((CameraAdjustment(x) & System(y)) -> CompatibleWithSystem(x,y))", "all x y.((CameraAccessories(x) & System(y) & Compatible(x,y)) -> Compatible(x,y))", "all x.(CameraAccessories(x) -> CompatibleWithSystem(x))", "all x.((CameraAdjustment(x) & System(x)) -> Compatible(x,y))"]}
{"id": "folio_train_1804", "nl": "Only the Playstation Camera is compatible with more than one system.", "fol": "(-IsCompatibleWith(Pseye,Ps2) & -IsCompatibleWith(Pseye,Ps4) & -IsCompatibleWith(Pseye,Ps5) & -IsCompatibleWith(Pseyetoy,Ps3) & -IsCompatibleWith(Pseyetoy,Ps4) & -IsCompatibleWith(Pseyetoy,Ps5))", "prediction": ["all x.(PlaystationCamera(x) -> CompatibleWithMoreThanOneSystem(x))", "all x y.((PlaystationCamera(x) & System(y)) -> Compatible(x,y))", "all x.(PlaystationCamera(x) -> CompatibleWithMultipleSystems(x))", "all x y.((PlaystationCamera(x) & System(y)) -> CompatibleWith(x,y))", "all x y z.((PlaystationCamera(x) & System(y) & System(z)) -> Compatible(x,y,z))", "(CompatibleWithMultipleSystems(PlaystationCamera,x))", "all x.(PlaystationCamera(x) -> CompatibleWithMoreThanOneSystem(x))", "all x y.((PlaystationCamera(x) & System(y)) -> Compatible(x,y))", "All x.(PlaystationCamera(x) -> CompatibleWithMultipleSystems(x))", "all x y.((PlaystationCamera(x) & System(y)) -> CompatibleWith(x,y))", "All x.(PlaystationCamera(x) -> CompatibleWithMoreThanOneSystem(x))", "exists x.(PlaystationCamera(x) & PlaystationSystem(x) & CompatibleWith(x,y))", "All x.(PlaystationCamera(x) -> CompatibleWithMultipleSystems(x))", "all x y.((PlaystationCamera(x) & System(y)) -> Compatible(x,y))", "All x.(PlaystationCamera(x) -> Compatible(x,multipleSystems))", "exists x.(PlaystationCamera(x) & MoreThanOneSystem(x))"]}
{"id": "folio_train_1805", "nl": "The Playstation Eye can be used with the Playstation 2 and the Playstation 3.", "fol": "(IsCompatibleWith(Pseye,Ps2) & IsCompatibleWith(Pseye,Ps3))", "prediction": ["all x.(PlaystationEye(x) -> (UsedWithPlaystation2(x) | UsedWithPlaystation3)(x)))", "(PlaystationEye(Playstation2) & Playstation3(Playstation2))", "all x y.((PlaystationEye(x) & Playstation2(y) & Playstation3)) -> CanBeUsedWith(x,y))", "all x y z.((PlaystationEye(x) & Playstation2(y) & Playstation3(z)) -> (UsedWith(x,y,z) & UsedWith(x,y)))", "(UsedWithPlaystation2(Playstation2) & UsedWithPlaystation3(Playstation2))", "all x.(PlaystationEye(x) -> (UsedWithPlaystation2(x) & UsedWithPlaystation3(x)))", "(PlaystationEye(Playstation2) & Playstation3(Playstation2))", "all x y.((PlaystationEye(x) & Playstation2(y) & Playstation3(y)) -> CanBeUsedWith(x,y))", "All x.(PlaystationEye(x) -> (UsedWithPlaystation2(x) | UsedWithPlaystation3(x)))", "All x.(PlaystationEye(x) -> (Playstation2(x) | Playstation3)(x)))", "(UsedWithPlaystation2AndPlaystation3)) & UsedWithPlaystation3.", "(PlaystationEye(Playstation2) & Playstation3(Playstation2))", "All x.(PlaystationEye(x) -> (CanBeUsedWithPlaystation2(x) | CanBeUsedWithPlaystation3)(x)))", "all x y.((PlaystationEye(x) & Playstation2(y) & Playstation3)) -> CanBeUsedWith(x,y))", "(PlaystationEye(Playstation2) & Playstation3(Playstation2))", "All x.(PlaystationEye(x) -> (UsedWithPlaystation2(x) | UsedWithPlaystation3)(x)))"]}
{"id": "folio_train_1806", "nl": "The Playstation EyeToy is compatible with the Playstation 2.", "fol": "IsCompatibleWith(Pseyetoy,Ps2)", "prediction": ["All x.(PlaystationEyeToy(x) -> CompatibleWithPlaystation2(x))", "(CompatibleWithPlaystation2(Playstation) & CompatibleWithPlaystation2(Playstation))", "all x y.((PlaystationEyeToy(x) & Playstation2(y)) -> Compatible(x,y))", "all x y z.((PlaystationEyeToy(x) & Playstation2(y) & Playstation2(z)) -> Compatible(x,y,z))", "(compatibleWithPlaystation2(Playstation) & CompatibleWithPlaystation2(Playstation))", "all x y.((Playstation(x) & Playstation2(y)) -> Compatible(x,y))", "All x.(PlaystationEyeToy(x) -> CompatibleWithPlaystation2(x))", "The PlaystationEyestoy(x) & Playstation2(x))", "(CompatibleWithPlaystation2(Playstation) & CompatibleWithPlaystation2(Playstation))", "all x y.((PlaystationEyeToy(x) & Playstation2(y)) -> CompatibleWith(x,y))", "The PlaystationEyestoy(x) -> CompatibleWithPlaystation2(x))", "(CompatibleWithPlaystation2(EyeToy,Playstation2))", "(CompatibleWithPlaystation2(Playstation) & CompatibleWithPlaystation2(Playstation))", "All x.(PlaystationEyestoy(x) -> CompatibleWithPlaystation2(x))", "All x.(PlaystationEyeToy(x) -> CompatibleWithPlaystation2.", "All x.(PlaystationEyeToy(x) -> CompatibleWithPlaystation2(x))"]}
{"id": "folio_train_1807", "nl": "The Playstation Camera can be used for all Playstation consoles.", "fol": "all x.(PlayStationConsole(x) -> IsCompatibleWith(Pscamera,x))", "prediction": ["all x.(PlaystationCamera(x) -> CanBeUsedForPlaystationConsole(x))", "all x y.((PlaystationCamera(x) & PlaystationConsole(y)) -> CanBeUsedFor(x,y))", "(all x.(PlaystationCamera(x) -> CanBeUsedForPlaystationConsole(x)))", "(AllOfPlaystationConsoles(PlaystationCamera) -> CanBeUsedFor(PlaystationConsoles))", "all x.(PlaystationCamera(x) -> CanBeUsedForPlaystationConsoles(x))", "all x.(PlaystationCamera(x) -> CanBeUsedForAllPlaystationConsoles(x))", "all x y.((PlaystationCamera(x) & PlaystationConsole(y)) -> CanBeUsedFor(x,y))", "(all x.(PlaystationCamera(x) -> UsedForPlaystationConsoles(x)))", "all x.(PlaystationCamera(x) -> UsedForPlaystationConsole(x))", "all x y.((PlaystationCamera(x) & PlaystationConsole(y)) -> CanBeUsedFor(x,y))", "all x.(PlaystationCamera(x) -> CanBeUsedForPlaystationConsole(x))", "All x.(PlaystationCamera(x) -> UsedForPlaystationConsoles(x))", "all x y.((PlaystationCamera(x) & PlaystationConsole(y)) -> CanBeUsed(x,y))", "All x.(PlaystationCamera(x) -> CanBeUsedForPlaystationConsoles(x))", "All x.(PlaystationCamera(x) -> UsedForPlaystationConsole(x))", "All x.(PlaystationCamera(x) -> AvailableForAllPlaystationConsoles(x))"]}
{"id": "folio_train_1808", "nl": "Adam Buska is a European football player.", "fol": "(IsFootballPlayer(Adambuska) & IsEuropean(Adambuska))", "prediction": ["Adam Buska (EuropeanFootballPlayer)", "all x.((AdamBuska(x) & EuropeanFootballPlayer(x)) -> FootballPlayer(x))", "AdamBuska(a) is a EuropeanFootballPlayer(a))", "(EuropeanFootballPlayer(AdamBuska))", "Adam Buska is a European FootballPlayer(a)", "AdamBuska(europhoneFootballPlayer)", "AdamBuska (EuropeanFootballPlayer)", "all x.((AdamBuska(x) & EuropeanFootballPlayer(x)) -> FootballPlayer(x))", "(EuropeanFootballPlayer(AdamBuska)", "Adam Buska (EuropeanFootballPlayer)", "AdamBuska is a EuropeanFootballPlayer(a)", "all x.((AdamBuska(x) & EuropeanFootballPlayer(x)) -> PlaysIn(x,y))", "(EuropeanFootballPlayer(AdamBuska)", "Adam Buska is a European FootballPlayer.", "all x.((AdamBuska(x) & EuropeanFootballPlayer(x)) -> FootballPlayer(x))", "(EuropeanFootballPlayer(AdamBuska)"]}
{"id": "folio_train_1809", "nl": "If a European plays football, they play what Americans call soccer.", "fol": "all x.((IsFootballPlayer(x) & IsEuropean(x)) -> PlaysSoccer(x))", "prediction": ["all x.((European(x) & PlaysFootball(x)) -> PlaysWhatAmericansCalledSoccer(x))", "all x y.((European(x) & American(y)) -> PlaysFootball(x,y))", "all x.(PlaysFootball(x) -> PlaysWhatAmericansCalledSoccer(x))", "all x.((European(x) & PlaysFootball(x)) -> PlaysWhatAmericansCalledSoccer(x))", "(all x.(PlaysFootball(x) -> PlaysWhatAmericansCalledSoccer(x)))", "all x.((Europa(x) & PlaysFootball(x)) -> PlaysWhatAmericansCalledSoccer(x))", "all x y.((European(x) & American(y)) -> PlaysFootball(x,y))", "all x.(PlaysFootball(x) -> PlaysWhatAmericansCalledSoccer(x))", "(all x.(PlaysFootball(x) -> PlaysSoccer(x)))", "all x.((European(x) & PlaysFootball(x)) -> PlaysWhatAmericansCallsSoccer(x))", "all x y.((Europa(x) & American(y)) -> PlaysFootball(x,y))", "all x.(PlaysFootball(x) -> PlaysWhatAmericansCalledSoccer(x))", "all x y.((European(x) & American(y)) -> PlaysFootball(x,y))", "all x.((European(x) & PlaysFootball(x)) -> PlaysWhatAmericansCalledSoccer(x))", "all x y.((European(x) & American(y)) -> Plays(x,y))", "all x.(PlaysFootball(x) -> PlaysSoccer(x))"]}
{"id": "folio_train_1810", "nl": "Adam Buska plays what Americans call soccer.", "fol": "PlaysSoccer(Adambuska)", "prediction": ["all x.(AdamBuska(x) -> PlaysWhatAmericansCalledSoccer(x))", "all x.((AdamBuska(x) & AmericanSoccer(x)) -> Plays(x,y))", "all x y.((AdamBuska(x) & American(y)) -> PlaysSoccer(x,y))", "(Plays(AdamBuska,Americans) & Soccer(AdamBuska,Americans))", "AdamBuskaPlays(advanced(a) & AmericansCalledSoccer(a))", "all x.(AdamBuska(x) -> PlaysWhatAmericansCallsSoccer(x))", "AdamBuskaPlaysWhatAmericansCalledSoccer(AdamBuska)", "Adam Buska plays what Americans call soccer.", "(Plays(AdamBuska,Soccer) & AmericansCall(AdamBuska,Soccer))", "all x.((AdamBuska(x) & AmericansCallSoccer(x)) -> Plays(x,y))", "(Plays(AdamBuska) | AmericansCalledSoccer(AdamBuska))", "All x.(Buska(x) -> PlaysWhatAmericansCallsSoccer(x))", "all x.(AdamBuska(x) -> Plays(x,Soccer))", "all x y.((AdamBuska(x) & American(y)) -> PlaysSoccer(x,y))", "AdamBuska plays what Americans call soccer.", "All x.(AdamBuska(x) -> PlaysWhatAmericansCalledSoccer(x))"]}
{"id": "folio_train_1811", "nl": "If the game has sold more than 1 million copies, then it is on the Best Seller list. ", "fol": "all x.(SoldOver1MillionCopies(x) -> OnBestSellerList(x))", "prediction": ["all x.((Game(x) & SoldMoreThan(x,1000000)) -> BestSellerList(x))", "all x.((Game(x) & SoldMoreThan(x,y) & MoreThan(y,x)) -> BestSellerList(x))", "all x.((Game(x) & SoldMoreThanOneMillionCopies(x)) -> BestSellerList(x))", "(SoldMoreThan(MillionCopies(Game) & BestSellerList(Game))", "all x.(SoldMoreThan(x,y) -> BestSellerList(x))", "all x y.((Game(x) & SoldMoreThan(x,y) & MillionCopies(y)) -> BestSellerList(x))", "all x y.((Game(x) & SoldMoreThan(x,y) & MoreThan(y,x,y)) -> BestSellerList(x))", "all x.((Game(x) & SoldMoreThan(x,1)) -> BestSellerList(x))", "all x.((Game(x) & SoldMoreThan1MCopies(x)) -> BestSellerList(x))", "all x.(SoldMoreThan(x,1000000) -> BestSellerList(x))", "All x.(SoldMoreThanOneMillionCopies(x) -> BestSellerList(x))", "all x.((Game(x) & SoldMoreThanOneMillionCopies(x)) -> BestSellerList(x))", "all x y.((Game(x) & SoldMoreThan(x,y) & MillionCopies(y)) -> BestSellerList(x))", "all x.(SoldMoreThan(x,y) -> BestSellerList(x))", "all x.((Game(x) & SoldMoreThan(x,1000000)) -> BestSellerList(x))", "all x.((Game(x) & SoldMoreThan1MCopies(x)) -> BestSellerList(x))"]}
{"id": "folio_train_1812", "nl": "All Games developed by Paradox Development Studio sold more than 1 million copies. ", "fol": "all x.(DevelopedByParadoxDevelopmentStudio(x) -> SoldOver1MillionCopies(x))", "prediction": ["all x.((Game(x) & ParadoxDevelopmentStudio(x)) -> SoldMoreThan(x,million))", "all x y.((Game(x) & ParadoxDevelopmentStudio(y)) -> SoldMoreThan(x,y))", "all x y z.((Game(x) & ParadoxDevelopmentStudio(y) & ParadoxDevelopmentStudio(z)) -> SoldMoreThan(x,y,z))", "all x.((Game(x) & ParadoxDevelopmentStudio(x)) -> SoldMoreThan(x,1000))", "all x y.((Game(x) & ParadoxDevelopmentStudio(y)) -> SoldMoreThan(x,y))", "all x.((Game(x) & ParadoxDevelopmentStudio(x)) -> SoldMoreThanOneMillionCopies(x))", "All x.(ParadoxDevelopmentStudio(x) -> SoldMoreThan(x,million))", "All x.(DevelopedByParadoxDevelopmentStudio(x) -> SoldMoreThan(x,million))", "all x y.((Game(x) & ParadoxDevelopmentStudio(y) & DevelopedBy(x,y)) -> SoldMoreThan(x,y))", "all x y.((Game(x) & ParadoxDevelopmentStudio(y)) -> SoldMoreThan(x,y))", "all x.((Game(x) & ParadoxDevelopmentStudio(x)) -> SoldMoreThan(x,y))", "All x.((Game(x) & DevelopmentStudio(x)) -> SoldMoreThan(x,million))", "all x.((Game(x) & ParadoxDevelopmentStudio(x)) -> SoldMoreThanOneMillionCopies(x))", "all x.((Game(x) & ParadoxDestinationStudio(x)) -> SoldMoreThan(x,million))", "all x y.((Game(x) & ParadoxDevelopmentStudio(y)) -> SoldMoreThan(x,y))", "All x.((Game(x) & ParadoxDevelopmentStudio(x)) -> SoldMoreThan1MCopies(x))"]}
{"id": "folio_train_1813", "nl": "Some games published before 2010 support the Linux OS system. ", "fol": "exists x.(PublishedBefore2010(x) & SupportsLinuxOS(x))", "prediction": ["exists x.(Game(x) & PublishedBefore2010(x) & SupportsLinuxOS(x))", "exists x.(Game(x) & PublishedBefore2010(x) & SupportsLinuxOSSystem(x))", "exists x y.(Game(x) & PublishedBefore2010(x) & SupportsLinuxOSSystem(y))", "exists x.(Game(x) & PublishedBefore2010(x) & SupportsLinuxOS(x))", "exists x.(Game(x) & PublishedBefore2010(x) & SupportsLinuxOS(x))", "exists x.(Game(x) & PublishedBefore(x,2010) & SupportsLinuxOSSystem(x))", "exists x y.(Game(x) & PublishedBefore(x,y) & LinuxOSSystem(y) & Supports(x,y))", "exists x y.(Game(x) & PublishedBefore2010(x) & SupportsLinuxOS(y))", "exists x.(Game(x) & PublishedBefore2010(x) & SupportsLinuxOSSystem(x))", "exists x.(Game(x) & PublishedBefore2010(x) & SupportsLinuxOSSystem(x))", "exists x.(Game(x) & PublishedBefore(x,2010) & SupportsLinuxOSSystem(x))", "exists x.(Game(x) & Published(x,y) & Before2010(y) & SupportsLinuxOS(x))", "exists x y.(Game(x) & PublishedBefore2010(x) & SupportsLinuxOSSystem(y))", "exists x.(Game(x) & PublishedBefore2010(x) & SupportsLinuxOS(x))", "exists x.(Game(x) & PublishedBefore(x,2010) & SupportsLinuxOSSystem(x))", "exists x.(Game(x) & PublishedBefore2010(x) & SupportsLinuxOSSystem(x))"]}
{"id": "folio_train_1814", "nl": "All games on the Best Seller list are popular among young people. ", "fol": "all x.(OnBestSellerList(x) -> PopularAmongYoungPeople(x))", "prediction": ["all x.((Game(x) & BestSellerList(x)) -> PopularAmongYoungPeople(x))", "all x y.((Game(x) & BestSellerList(y)) -> PopularAmongYoungPeople(x,y))", "all x.((Game(x) & BestSellerList(x)) -> PopularAmongYoungPeople(x))", "(PopularAmongYoungPeople) & All x.(BestSellerList(x) -> PopularAmongYoungPeople(x)))", "all x.((Game(x) & BestSellerList(x)) -> PopularAmongYoungPeople(x))", "all x y.((Game(x) & BestSellerList(y)) -> PopularAmongYoungPeople(x,y))", "all x y.((Game(x) & BestSellerList(x) & YoungPerson(y)) -> Popular(x,y))", "all x.(BestSellerList(x) -> PopularAmongYoungPeople(x))", "all x.((Games(x) & BestSellerList(x)) -> PopularAmongYoungPeople(x))", "all x.((Game(x) & BestSellerList(x)) -> PopularAmongYoungPeople(x))", "(PopularAmongYoungPeople)", "all x.((Game(x) & BestSellerList(x)) -> PopularAmongYoungPeople(x))", "all x y.((Game(x) & BestSellerList(y)) -> PopularAmongYoungPeople(x,y))", "all x.(BestSellerList(x) -> PopularAmongYoungPeople(x))", "all x.((Game(x) & BestSellerList(x)) -> PopularAmongYoungPeople(x))", "all x.((Game(x) & BestSellerList(x)) -> PopularWithYears(x))"]}
{"id": "folio_train_1815", "nl": "FIFA22 neither supports the Linux OS system nor is it popular among young people.", "fol": "-(SupportsLinuxOS(Fifa21) | PopularAmongYoungPeople(Fifa21))", "prediction": ["(-SupportsLinuxOS(FavoriteFootball22) & -PopularAmongYoungPeople(Football22))", "all x.(Football22(x) -> (-SupportsLinuxOS(x) & -PopularAmongYoungPeople(x)))", "-(SupportsLinuxOS(fifa22) & -PopularAmongYoungPeople(fafa22))", "FIFA22 -(SupportsLinuxOS(x) | PopularAmongYoungPeople(x)))", "(-SupportsLinuxOS(Football22) & -PopularAmongYoungPeople(Football22))", "-(Football22(f) & -(SupportsLinuxOS(f) | PopularAmongYoungPeople(f))))", "(Football22(f) & -(SupportsLinuxOS(f) | PopularAmongYoungPeople(f))))", "-exists x.(Football22(x) & -SupportsLinuxOS(x) & -PopularAmongYoungPeople(x))", "-(SupportsLinuxOSSystem(Football22) & -PopularAmongYoungPeople(Football22))", "all x.(Football22(x) -> (-SupportsLinuxOSSystem(x) & -PopularAmongYoungPeople(x)))", "(Favorite22(Football) & -(SupportsLinuxOSSystem(Football) | PopularAmongYoungPeople(Football))))", "(SupportsLinuxOS(Football22) | PopularAmongYoungPeople(Football22))", "(-SupportsLinuxOS(FIFA22) & -PopularAmongYoungPeople(FIFA22))", "-(Football22(x) & -(SupportsLinuxOSSystem(x) | PopularAmongYoungPeople(x))))", "(-SupportsLinuxOSSystem(FavoriteForYoungPeople))", "all x.(Football22(x) -> (-SupportsLinuxOS(x) & -PopularAmongYoungPeople(x)))"]}
{"id": "folio_train_1816", "nl": "FIFA21 is published before 2010", "fol": "PublishedBefore2010(Fifa21)", "prediction": ["all x.(Favorite21(x) -> PublishedBefore2010(x))", "all x.((Football21(x) & PublishedBefore2010(x)) -> FIFA21PublishedBefore2010(x))", "all x y.((Football(x) & FIFA21(y) & PublishedBefore2010(x,y)) -> PublishedBefore2010(y))", "(Publication(Favorite21) & Before2010(Favorite21))", "all x.(Football21(x) -> PublishedBefore2010(x))", "all x y.((Favorite(x) & FIFA21(y) & PublishedBefore2010(x,y)) -> PublishedBefore2010(x,y))", "(PublishedBefore2010(Favorite21) -> FIFA21(Favorite21))", "(Publication(FIFA21) & Before2010(FIFA21))", "all x.((Favorite(x) & PublishedBefore2010(x)) -> FIFA21(x))", "all x y.((FamousFootball(x) & FIFA21(y)) -> PublishedBefore2010(x,y))", "All x.(Favorite(x) -> (PublishedBefore2010(x) & FIFA21(x)))", "all x y.((Football(x) & FIFA21(y) & PublishedBefore2010(x,y)) -> PublishedBefore2010(x,y))", "exists x,y,z.(Favorite21(x) & PublishedBefore2010(x))", "all x y z.((Football(x) & FIFA21(y) & PublishedBefore2010(z)) -> PublishedBefore2010(y,z))", "All x.(Football21(x) -> PublishedBefore2010(x))", "All x.(FifaWorld(x) -> PublishedBefore2010(x))"]}
{"id": "folio_train_1817", "nl": "FIFA21 is published before 2010 and developed by Paradox Development Studio", "fol": "(PublishedBefore2010(Fifa21) & DevelopedByParadoxDevelopmentStudio(Fifa21))", "prediction": ["all x.(Football21(x) -> (PublishedBefore2010(x) & DevelopedByParadoxDevelopmentStudio(x)))", "(Publication(FoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFox", "(Football21(f) & PublishedBefore2010(f) & ParadoxDevelopmentStudio(f))", "(PublishedBefore2010(Football21) & ParadoxDevelopmentStudio(Football21))", "all x y.((Football21(x) & PublishedBefore2010(x) & ParadoxDevelopmentStudio(y)) -> (DevelopedBy(x,y) & ParadoxDevelopmentStudio(x)))", "(PublishedBefore2010(Favorite(Favorite) & ParadoxDevelopmentStudio(Favorite21)) & ParadoxDevelopmentStudio(Favorite21))", "All x.(Football(x) -> (PublishedBefore2010(x) & DevelopedByParadoxDevelopmentStudio(x)))", "all x y.((Football(x) & PublishedBefore2010(x) & ParadoxDevelopmentStudio(y)) -> (DevelopedBy(x,y) & ParadoxDevelopmentStudio(y)))", "FIFA21 (PublicatedBefore2010) & DevelopedByParadoxDevelopmentStudio(Favorite))", "FIFA21 (PublishedBefore2010) & DevelopedByParadoxDevelopmentStudio(Favorite))", "FIFA21 is published before2010 and developed by ParadoxDevelopmentStudio(Football21)", "(Football21(f) & PublishedBefore2010(f) & DevelopedByParadoxDevelopmentStudio(f))", "all x y z.((Football(x) & FIFA21(y) & ParadoxDevelopmentStudio(z)) -> (PublishedBefore2010(x,y) & DevelopedBy(y,z)))", "all x.(Football21(x) -> (PublishedBefore2010(x) & DevelopedByParadoxDevelopmentStudio(x)))", "All x.(Favorite(x) -> (PublishedBefore2010(x) & ParadoxDevelopmentStudio(x)))", "All x.(Football(x) -> (PublishedBefore2010(x) & DevelopedByParadoxDevelopmentStudio(x)))"]}
{"id": "folio_train_1818", "nl": "if FIFA21 is either a game published before 2010 or developed by Paradox Development Studio, then it is either in the Best Seller list and sold more than 1 million copies; or not in the Best Seller list and hasn't sold more than 1 million copies.", "fol": "((FPublishedBefore2010(Fifa21) | DevelopedByParadoxDevelopmentStudio(Fifa21)) -> ((OnBestSellerList(Fifa21) & SoldOver1MillionCopies(Fifa21)) | (-OnBestSellerList(Fifa21) & -SoldOver1MillionCopies(Fifa21))))", "prediction": ["all x.((FoxFox21(x) & (PublishedBefore2010(x) | DevelopedByParadoxDevelopmentStudio(x))) -> (BestSellerList(x) & SoldMoreThan1MCopies(x)) | -BestSellerList(x) & -SoldMoreThan1MCopies(x)))", "all x.((Game(x) & (PublishedBefore2010(x) | DevelopedByParadoxDevelopmentStudio(x))) -> (BestSellerList(x) & SoldMoreThan1MCopies(x)) | -BestSellerList(x) & -SoldMoreThan1MCopies(x)))", "((Game(FoxFox21) & PublishedBefore2010(FoxFox21) | DevelopedByParadoxDevelopmentStudio(FoxFox21))) | (-BestSellerList(FoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxFoxF", "(all x.((Game(x) & PublishedBefore2010(x)) | DevelopedByParadoxDevelopmentStudio(x)) -> (BestSellerList(x) & SoldMoreThan1MCopies(x)) | -BestSellerList(x) & -SoldMoreThan1MCopies(x)))", "all x.((Game(x) & PublishedBefore2010(x) | DevelopedByParadoxDevelopmentStudio(x)) -> (BestSellerList(x) & SoldMoreThan1MCopies(x)) | -BestSellerList(x) & -SoldMoreThan1MCopies(x)))", "(all x.((Foxaball21(x) & PublishedBefore2010(x)) | DevelopedByParadoxDevelopmentStudio(x)) -> (BestSellerList(x) & SoldMoreThan1MCopies(x)) | -BestSellerList(x) & -SoldMoreThan1MCopies(x)))", "((Game(f) & PublishedBefore2010(f) | DevelopedByParadoxDevelopmentStudio(f))) | (-BestSellerList(f) & -SoldMoreThanMillionCopies(f))))", "all x y.((FoxFox21(x) & GamePublishedBefore2010(x) | DevelopedByParadoxDevelopmentStudio(x)) -> (BestSellerList(x) & SoldMoreThan1MCopies(x)) | (-BestSellerList(y) & SoldMoreThan1M copies(y))))", "all x.((FoxFox21(x) & (PublishedBefore2010(x) | DevelopedByParadoxDevelopmentStudio(x))) -> (BestSellerList(x) & SoldMoreThanOneMillionCopies(x)) | -BestSellerList(x) & -SoldMoreThanOneMillionCopies(x)))", "all x y.((FoxFox21(x) & Game(y) & PublishedBefore2010(y)) | DevelopedByParadoxDevelopmentStudio(y)) -> (BestSellerList(x) & SoldMoreThan1MCopies(x) | -BestSellerList(x) & -SoldMoreThan1MCopies(x)))", "all x.((Foxball21(x) & (PublishedBefore2010(x) | DevelopedByParadoxDevelopmentStudio(x))) -> (BestSellerList(x) & SoldMoreThan1MCopies(x)) | -BestSellerList(x) & -SoldMoreThan1MCopies(x)))", "all x.((Game(x) & (PublishedBefore2010(x) | DevelopedByParadoxDevelopmentStudio(x))) -> (BestSellerList(x) & SoldMoreThanOneMillionCopies(x)) | -BestSellerList(x) & -SoldMoreThanOneMillionCopies(x)))", "(all x.((Game(x) & PublishedBefore2010(x)) | DevelopedByParadoxDevelopmentStudio(x)) -> (BestSellerList(x) & SoldMoreThanOneMillionCopies(x)) | -BestSellerList(x) & -SoldMoreThanOneMillionCopies(x)))", "all x.(FastSellerList(x) -> ((GamePublishedBefore2010(x) | DevelopedByParadoxDevelopmentStudio(x)) & SoldMoreThan(x,1000)) | (-SoldMoreThan(x,1000)))))", "all x.((FastSellerList(x) & (PublishedBefore2010(x) | DevelopedByParadoxDevelopmentStudio(x))) | (-PublishedBefore2010(x) & SoldMoreThan1MCopies(x))))", "exists x.(Foxball21(x) & ((GamePublishedBefore2010(x) | DevelopedByParadoxDevelopmentStudio(x)) & BestSellerList(x) & SoldMoreThanOneMillionCopies(x)) | -BestSellerList(x) & -SoldMoreThanOneMillionCopies(x)))"]}
{"id": "folio_train_1819", "nl": "China is one of BRICS and its economy is emerging.", "fol": "all x.((IsChina(x) -> IsBRICSMember(x)) & HasEmergingEconomy(x))", "prediction": ["all x.(China(x) -> (BRICS(x) & EmergingEconomy(x)))", "(all x.(China(x) -> BRICS(x)) & its EconomyEmerging(x))", "(BRICS(China) & EmergingEconomy(China))", "(BRICS(China) & EconomicEmerging(China))", "all x.(China(x) -> (BRICS(x) & EmergingEconomy(x)))", "all x.((China(x) & BRICS(x)) -> EconomicEmerging(x))", "all x y.((China(x) & BRICS(y)) -> EconomicEmerging(x,y))", "(all x.(China(x) -> BRICS(x)) & economyEmerging(x))", "(BRICS) & EmergingEconomy(China))", "all x.(China(x) -> (BRICS(x) & EconomicEmerging(x)))", "(BRICS(China) & EmergingEconomy(China))", "all x.(Chinese(x) -> (BRICS(x) & EmergingEconomy(x)))", "(all x.(China(x) -> BRICS(x)) & the economy is Emerging(x))", "all x.(China(x) -> (BRICS(x) & EmergingEconomy(x)))", "all x.(China(x) -> (BRICS(x) & EmergingEconomy(x)))", "(all x.(China(x) -> BRICS(x)) & its EconomyEmerging(x))"]}
{"id": "folio_train_1820", "nl": "India is one of BRICS and its economy is emerging.", "fol": "all x.((IsIndia(x) -> IsBRICSMember(x)) & HasEmergingEconomy(x))", "prediction": ["all x.(India(x) -> (BRICS(x) & EmergingEconomy(x)))", "all x.(Individual(x) -> (BRICS(x) & EmergingEconomy(x)))", "(BRICS(India) & EmergingEconomy(India))", "all x.((India(x) & BRICS(x)) -> EmergingEconomy(x))", "(all x.(Indien(x) -> BRICS(x)) & economyEmerging(x))", "(BRICS(India) & EconomicEmerging(India))", "(all x.(India(x) -> BRICS(x)) & its EconomyEmerging(x))", "all x.(India(x) -> (BRICS(x) & EmergingEconomy(x)))", "(BRICS(Index) & EmergingEconomy(Index))", "all x.(Indien(x) -> (BRICS(x) & EmergingEconomy(x)))", "(BRICS(Index) & EmergingEconomy(Index))", "all x y.((India(x) & BRICS(y)) -> EconomicEmerging(x,y))", "(BRICS(India) & EmergingEconomy(India))", "all x.(Individual(x) -> (BRICS(x) & EmergingEconomy(x)))", "all x.(India(x) -> (BRICS(x) & EmergingEconomy(x)))", "all x.(India(x) -> (BRICS(x) & EconomicEmerging(x)))"]}
{"id": "folio_train_1821", "nl": "All people from China speak Chinese.", "fol": "all x y.((IsFrom(x,y) & IsChina(y)) -> SpeaksLanguage(x,Chinese))", "prediction": ["all x.((Person(x) & FromChina(x)) -> SpeaksChinese(x))", "all x.((Person(x) & FromChina(x)) -> SpeaksChinese(x))", "all x y.((Person(x) & Person(y) & FromChina(x)) -> SpeaksChinese(x))", "all x.(ChinaPerson(x) -> SpeaksChinese(x))", "(all x.(ChinaPerson(x) -> SpeaksChinese(x)))", "all x y.((Person(x) & Person(y) & FromChina(x,y)) -> SpeaksChinese(x))", "all x.((PeopleFromChina(x) & SpeakChinese(x)) -> SpeakChinese(x))", "all x.(China(x) -> SpeaksChinese(x))", "all x.(Person(x) -> SpeaksChinese(x))", "all x.((Person(x) & FromChina(x)) -> SpeakChinese(x))", "(all x.(ChinaPerson(x) -> SpeaksChinese(x)))", "all x.((Person(x) & China(x)) -> SpeaksChinese(x))", "all x y.((Person(x) & Chinese(y)) -> SpeaksChinese(x,y))", "all x.(ChinaPerson(x) -> SpeaksChinese(x))", "(SpeakChinese(Person,China))", "all x.(PeopleFromChina(x) -> SpeakChinese(x))"]}
{"id": "folio_train_1822", "nl": "All people from India speak Hindi or English.", "fol": "all x y.(((IsFrom(x,y) & IsIndia(y)) -> SpeaksLanguage(x,SpeaksHindi)) | SpeaksLanguage(x,SpeaksEnglish))", "prediction": ["all x.(IndianPerson(x) -> (SpeakHindi(x) | SpeakEnglish(x)))", "all x.(Individual(x) -> (SpeakHindi(x) | SpeakEnglish(x)))", "all x.(Indian(x) -> (SpeakHindi(x) | SpeakEnglish(x)))", "all x.(IndianPerson(x) -> (SpeaksHindi(x) | SpeaksEnglish(x)))", "all x.((Person(x) & India(x)) -> (SpeakHindi(x) | SpeakEnglish(x)))", "all x y.((Person(x) & India(y)) -> (SpeaksHindi(x,y) | SpeaksEnglish(x,y)))", "all x y.((Person(x) & Person(y) & India(x)) -> (SpeaksHindi(x,y) | SpeaksEnglish(x,y)))", "all x y.((IndianPerson(x) & Person(y)) -> (SpeakHindi(x,y) | SpeakEnglish(x,y)))", "all x.(Individual(x) -> (SpeaksHindi(x) | SpeaksEnglish(x)))", "(all x.(Indian(x) -> (SpeakHindi(x) | SpeakEnglish(x))))", "all x.(Indian(x) -> (SpeaksHindi(x) | SpeaksEnglish(x)))", "all x.(IndianPerson(x) -> (SpeakHindi(x) | SpeakEnglish(x)))", "(all x.(IndianPerson(x) -> (SpeaksHindi(x) | SpeaksEnglish(x))))", "(all x.(IndianPerson(x) -> (SpeakHindi(x) | SpeakEnglish(x))))", "all x.(IndianPerson(x) -> (SpeaksHindi(x) | SpeaksEnglish(x)))", "all x.(IndianPerson(x) -> (SpeakHindi(x) | SpeakEnglish(x)))"]}
{"id": "folio_train_1823", "nl": "There is an Indian.", "fol": "exists x y.(IsFrom(x,y) & IsIndia(y))", "prediction": ["exists x.(Indian(x) & LivesIn(x))", "ExistsIrish(i)", "exists x.(Indian(x) & LivesIn(x))", "exists x.(Indian(x) & Indian(x))", "ExistsAnIndian(a)", "exists x.(Indian(x) & LivesIn(x))", "ExistsIrish(i)", "exists x.(Individual(x) & LivesIn(x))", "exists x.(Indian(x) & -Indian(x))", "exists x.(Indian(x) & Indian(x))", "ExistsIrish(i)", "exists x.(Indian(x) & LivesIn(x))", "exists x.(Indian(x) & -Indian(x))", "exists x.(Indian(x) & Is(x))", "exists x.(Indian(x) & Indian(x))", "exists x.(Indian(x))"]}
{"id": "folio_train_1824", "nl": "All people from BRICS neither speak Hindi nor speak English.", "fol": "all x y.(((IsFrom(x,y) & IsBRICSMember(y)) -> -SpeaksLanguage(x,SpeaksHindi)) & -SpeaksLanguage(x,SpeaksEnglish))", "prediction": ["all x.((Person(x) & BRICS(x)) -> (-SpeaksHindi(x) | SpeaksEnglish(x)))", "(all x.(BritishPerson(x) -> -SpeaksHindi(x)) & -SpeaksEnglish(x))", "all x.(BRICSPerson(x) -> (-SpeaksHindi(x) | SpeaksEnglish(x)))", "all x y.((Person(x) & BRICS(y)) -> (-SpeaksHindi(x,y) | SpeaksEnglish(x,y)))", "all x.((Person(x) & BRICS(x)) -> (-SpeaksHindi(x) & -SpeaksEnglish(x)))", "all x.(BritishPerson(x) -> (-SpeaksHindi(x) | SpeaksEnglish(x)))", "ALL PEOPLE FROM BRICS -(SpeaksHindi(x) | SpeaksEnglish(x)))", "all x.((Person(x) & BRICS(x)) -> -(SpeaksHindi(x) | SpeaksEnglish(x)))", "(all x.(BriarsPerson(x) -> -SpeaksHindi(x)) & -SpeaksEnglish(x))", "all x y.((Person(x) & BRICS(y)) -> (-SpeakHindi(x,y) | SpeakEnglish(x,y)))", "all x.(BRICSPerson(x) -> (-SpeaksHindi(x) | SpeaksEnglish(x)))", "all x.(BritishPeople(x) -> (-SpeaksHindi(x) | SpeaksEnglish(x)))", "(all x.(BRICSPerson(x) -> (-SpeakHindi(x) | SpeakEnglish(x))))", "all x.((Person(x) & FromBRICS(x)) -> (-SpeakHindi(x) | SpeakEnglish(x)))", "all x y.((Person(x) & BRICS(y)) -> (-SpeaksHindi(x,y) | SpeaksEnglish(x,y)))", "all x.(BRICSPerson(x) -> (-SpeakHindi(x) | SpeakEnglish(x)))"]}
{"id": "folio_train_1825", "nl": "India's economy is not emerging.", "fol": "all x.(IsIndia(x) -> -HasEmergingEconomy(x))", "prediction": ["all x.(IndianEconomy(x) -> -Emerging(x))", "all x.(India'sEconomy(x) -> -Emerging(x))", "(-EmergingEconomy(India))", "(India'sEconomy(indian) & -Emerging(indian))", "(IndianEconomy(in) & -Emerging(in))", "India's Economy -Emerging(inda.)", "(-Emerging(India))", "all x.(IndianEconomy(x) -> -Emerging(x))", "-EmergingEconomy(India)", "(EmergingEconomy(India))", "-Emerging(IndividualEconomy)", "all x.(IndianEconomy(x) -> -Emerging(x))", "(EmergingEconomy(India))", "-Emerging(indianEconomy)", "-EmergingEconomy(India)", "all x.(IndianEconomy(x) -> -Emerging(x))"]}
{"id": "folio_train_1826", "nl": "There is a person from BRICS speaking Hindi.", "fol": "exists x y.(IsFrom(x,y) & IsBRICSMember(y) & SpeaksLanguage(x,SpeaksHindi))", "prediction": ["exists x.(Person(x) & BRICS(x) & SpeaksHindi(x))", "exists x.(PersonFromBRICS(x) & SpeaksHindi(x))", "exists x.(Person(x) & FromBRICS(x) & SpeakingHindi(x))", "exists x.(Person(x) & FromBRICS(x) & SpeakingHindi(x))", "exists x y.(BrICSPerson(x) & HindiPerson(y) & Speaks(x,y))", "exists x.(BRICSPerson(x) & SpeaksHindi(x))", "exists x y.(Person(x) & BRICS(y) & SpeaksHindi(x,y))", "exists x.(BrICSPerson(x) & SpeaksHindi(x))", "exists x.(Person(x) & FromBRICS(x) & SpeaksHindi(x))", "exists x y.(BritishPerson(x) & HindiPerson(y) & Speaks(x,y))", "exists x.(BritishPerson(x) & SpeaksHindi(x))", "all x y.((Person(x) & BRICS(y) & SpeakingHindi(x,y)) -> SpeakingHindi(x,y))", "exists x.(Person(x) & FromBRICS(x) & SpeaksHindi(x))", "all x y.((Person(x) & BRICS(y) & SpeakingHindi(x,y)) -> SpeaksHindi(x,y))", "exists x.(BRICSPerson(x) & SpeaksHindi(x))", "exists x.(PersonFromBRICS(x) & SpeakingHindi(x))"]}
{"id": "folio_train_1827", "nl": "Daveed Diggs is an actor and film producer.", "fol": "(IsActor(DaveedDiggs) & IsFilmProducer(DaveedDiggs))", "prediction": ["all x.(DaveedDiggs(x) -> (Actor(x) & FilmProducer(x)))", "(Actor(Daveed Diggs) & FilmProducer(DaveedDuggs))", "DaveedDiggs(DIGGS)", "DaveedDiggs(d) is actor and filmproducer(d))", "-(Actor(d) & FilmProducer(d)) & DaveedDiggs(d))", "Daveed Diggs is actor and filmproducer.", "All x.(DaveedDIGGS(x) -> (Actor(x) & FilmProducer(x)))", "(Actor(d) & FilmProducer(d))", "(Actor(Daveed Diggs) & FilmProducer(DaveedDiggs))", "all x.(DaveedDiggs(x) -> (Actor(x) & FilmProducer(x)))", "(Actor(DaveedDiggs) & FilmProducer(DaveedDuggs))", "Daveed Diggs (Actor(d) & FilmProducer(d))", "(Actor(d) & FilmProducer(d) & DaveedDiggs(d))", "DaveedDiggs(actor) & FilmProducer(a))", "DaveedDiggs(DIGGS)", "Daveed Diggs(DIGGS)"]}
{"id": "folio_train_1828", "nl": "Daveed Diggs played two roles in the musical Hamilton.", "fol": "(PlayedTwoRolesInHamilton(DaveedDiggs) & PerformedIn(DaveedDiggs,Hamilton) & IsMusical(Hamilton))", "prediction": ["all x.(DaveedDiggs(x) -> PlayedTwoRolesInMusicalHamilton(x))", "all x y.((DaveedDiggs(x) & Musical(y)) -> Played(x,y))", "DaveedDiggs played two roles in the musical Hamilton.", "(DaveedDiggs(Draggs) & Hamilton(Draggs))", "all x y.((DaveedDiggs(x) & MusicalHamilton(y)) -> PlayedRole(x,y))", "-DaveedDiggs(Draggs) & MusicalHamilton(Diggs,Diggs))", "(DaveedDiggs(Dave) & PlayedRole(Dave))", "DaveedDiggs played two roles in musical Hamilton.", "all x.(DaveedDiggs(x) -> PlayedTwoRoles(x))", "DaveedDiggs(d) & MusicalHamilton(h) & PlayedTwoRoles(d))", "-DaveedDiggs(Diggs,Davis) & MusicalHamilton(Davis))", "(DaveedDiggs(d) & Hamilton(h))", "All x.(DaveedDiggs(x) -> PlayedRoleInMusicalHamilton(x))", "(DaveedDiggs(Diggs) & MusicalHamilton(Diggs))", "DaveedDiggs played two roles in the musical Hamilton.", "(DaveedDdiggs(d) & MusicalHamilton(h))"]}
{"id": "folio_train_1829", "nl": "One of the actors from Hamilton won the best actor award.", "fol": "exists x.(IsActor(x) & PerformedIn(x,Hamilton) & ReceivedBestActorAward(x))", "prediction": ["all x.((Actor(x) & FromHamilton(x)) -> WinsBestActorAward(x))", "all x y.((Actor(x) & Actor(y) & Hamilton(x)) -> WinsBestActorAward(x,y))", "all x.((Actor(x) & Hamilton(x)) -> WinsBestActorAward(x))", "(Actor(a) & FromHamilton(a)) & WinsBestActorAward(a))", "one of the actors from Hamilton won the bestactoraward(x)", "all x y z.((Actor(x) & Actor(y) & Hamilton(z) & WonBestActorAward(x,y,z)) -> BestActorAward(x,y))", "all x y.((Actor(x) & Actor(y) & Hamilton(y)) -> WonBestActorAward(x,y))", "-(ActorFromHamilton(Actor,Hamilton) & WonBestActorAward(Actor,Hamilton))", "all x y.((Actor(x) & Actor(y) & FromHamilton(x)) -> WinsBestActorAward(x,y))", "(One of the actors from Hamilton won the bestactoraward(Actor)", "(Actor(a) & Actor(a) & Hamilton(a) & BestActorAward(a))", "all x.((Actor(x) & FromHamilton(x)) -> WinsBestActorAward(x))", "all x.((Actor(x) & Hamilton(x)) -> WinsBestActorAward(x))", "(All x.(Actor(x) -> BestActorAward(x)))", "all x y.((Actor(x) & Actor(y) & Hamilton(x)) -> WinsBestActorAward(x,y))", "all x.((Actor(x) & FromHamilton(x)) -> WonBestActorAward(x))"]}
{"id": "folio_train_1830", "nl": "The actor playing Thomas Jefferson won the best actor award.", "fol": "all x.((IsActor(x) & PortrayedCharacter(x,ThomasJefferson)) -> ReceivedBestActorAward(x))", "prediction": ["all x.((Actor(x) & PlayingTomJefferson(x)) -> WonBestActorAward(x))", "all x y.((Actor(x) & Actor(y) & PlaysTomJefferson(x,y)) -> WinsBestActorAward(x))", "(Winner(Actor) & PlayingTomJefferson(Actor))", "(PlayingTomJefferson(actor) & BestActorAward(actor))", "the actor playing ThomasJeffrey(actress,t) & wonBestActorAward(actress,t))", "all x y.((Actor(x) & PlayingTomJefferson(x,y)) -> WonBestActorAward(x))", "-(ActorPlayingTomJefferson(actor) & BestActorAward(a))", "all x.((ActorPlayingTomJefferson(x) & PlayingTomJefferson(x)) -> WinsBestActorAward(x))", "all x.((Actor(x) & PlaysTomJefferson(x)) -> WinsBestActorAward(x))", "all x.((Actor(x) & PlayingThomasJefferson(x)) -> WonBestActorAward(x))", "(PlayingThomasJefferson(actor) & BestActorAward(actor))", "the actor playing ThomasJefferson won the bestactoraward(x)", "(WinnerBestActor(actor) -> PlayingTomJeffrey(a))", "All x y.((Actor(x) & PlayingTomJeffrey(x,y)) -> WonBestActorAward(x,y))", "(WinsBestActorAward(ActorPlayingTomJefferson)", "all x.((ActorPlayingThomasJefferson(x) & BestActorAward(x)) -> Wins(x))"]}
{"id": "folio_train_1831", "nl": "Daveed Diggs played Thomas Jefferson.", "fol": "PortrayedCharacter(DaveedDiggs,ThomasJefferson)", "prediction": ["all x.(DaveedDiggs(x) -> PlayedTomJefferson(x))", "all x y.((DaveedDiggs(x) & ThomasJefferson(y)) -> Played(x,y))", "(DaveedDiggs(DIGGS) & ThomasJefferson(DIGGS))", "DaveedDiggsPlayedTomJefferson(d)", "(PlayedThomasJefferson(DaveedDiggs)", "all x.(DaveedDiggs(x) -> PlayedThomasJefferson(x))", "DaveedDiggs played Thomas Jefferson.", "all x y.((DaveedDiggs(x) & ThomasJeffrey(y)) -> Played(x,y))", "(DaveedDiggs(d) & ThomasJefferson(d))", "(DaveedDiggs(DIGGS) & ThomasJefferson(DIGGS))", "DaveedDiggsPlayedTomTomJefferson(d)", "(playedThomasJefferson(DaveedDiggs)", "all x.(DaveedDiggs(x) -> PlayedTomJefferson(x))", "DaveedDiggsPlaysTomTomJefferson(d)", "DaveedDiggs played Thomas Jefferson.", "All x.(DaveedDiggs(x) -> PlayedThomasJefferson(x))"]}
{"id": "folio_train_1832", "nl": "Musicals are not films.", "fol": "all x.(IsMusical(x) -> -Film(x))", "prediction": ["all x.(Musical(x) -> -Film(x))", "all x.(Musical(x) -> -Film(x))", "(all x.(Musical(x) -> -Film(x)))", "(-Film(musical) & Film(musical))", "all x y.((Musical(x) & Film(y)) -> -Film(x))", "all x.(Musical(x) -> -Film(x))", "all x.(Movie(x) -> -Film(x))", "all x.(Musical(x) -> -Film(x))", "all x y.((Musical(x) & Film(y)) -> -Film(x))", "(all x.(Musical(x) -> -Film(x)))", "all x.(Movie(x) -> -Film(x))", "all x.(Musical(x) -> -Film(x))", "(all x.(Musical(x) -> -Film(x)))", "all x.(Musical(x) -> -Film(x))", "all x.(Musical(x) -> -Film(x))", "all x.(Musical(x) -> -Film(x))"]}
{"id": "folio_train_1833", "nl": "Hamilton is a film.", "fol": "Film(Hamilton)", "prediction": ["all x.(Hamilton(x) -> Film(x))", "Hamilton is a film.", "(Film(Hamilton) & Film(Hamilton))", "all x.(Hamilton(x) -> Film(x))", "Hamilton is a film.", "All x.((Hamilton(x) & Film(x)) -> Film(x))", "(Film(Hamilton) & Film(Hamilton))", "Hamilton is a film.", "all x.(Hamilton(x) -> Film(x))", "all x.((Hamilton(x) & Film(x)) -> Film(x))", "Hamilton is a film.", "(Film(Hamilton) & Film(Hamilton))", "all x.(Hamilton(x) -> Film(x))", "(Film(Hamilton) & Film(Hamilton,Film))", "Hamilton is a film.", "all x.(Hamilton(x) -> Film(x))"]}
{"id": "folio_train_1834", "nl": "Daveed Diggs won the best actor award.", "fol": "ReceivedBestActorAward(DaveedDiggs)", "prediction": ["all x.(DaveedDiggs(x) -> WinsBestActorAward(x))", "DaveedDiggsWonBestActorAward(DaveedDuggs)", "all x.((DaveedDiggs(x) & BestActor(x)) -> Wins(x))", "(WonBestActor(DaveedDiggs)", "DaveedDiggs won BestActorAward(d)", "(BestActor(DaveedDiggs) -> Wins(DaveedDuggs,Actor))", "DaveedDiggs(Daveed) wonBestActorAward(Daveed))", "DaveedDiggsWonBestActorAward(d) & BestActor(d))", "-DaveedDiggs(Draggs,BestActor)", "all x.((DaveedDiggs(x) & BestActor(x)) -> WonAward(x))", "Daveed Diggs won BestActorAward(DaveedDiggs)", "(BestActorAward(DaveedDiggs)", "DaveedDiggs won BestActorAward(DaveedDuggs)", "DaveedDIGGSWonBestActorAward(DaveedDIGGS)", "all x.(DaveedDiggs(x) -> BestActorAward(x))", "(WonBestActor(DaveedDIGGS)"]}
{"id": "folio_train_1835", "nl": "Hamilton won two awards.", "fol": "WonTwoAwards(Hamilton)", "prediction": ["Hamilton won two awards.", "all x.(Hamilton(x) -> WonTwoAwards(x))", "(WonAward(Hamilton) & WonAward(Hamilton))", "(Won(Hamilton) & TwoAwards(Hamilton))", "-(Hamilton(x) & Hamilton(y))", "-HamiltonWonTwoAwards(Hamilton)", "Hamilton won two awards.", "all x.(Hamilton(x) -> WinsTwoAwards(x))", "Hamilton a won two awards.", "(WinsTwoAwards(Hamilton)", "Hamilton wonsTwoAwards(x)", "Hamilton won two awards.", "all x.(Hamilton(x) -> WonTwoAwards(x))", "Hamilton has won two awards.", "Hamilton won two awards.", "Hamilton won two awards."]}
{"id": "folio_train_1836", "nl": "Ernest Pohl was a Polish football player. ", "fol": "IsPolishFootballPlayer(Ernestpohl)", "prediction": ["(PolishFootballPlayer(ErnestPohl) & -PolishFootballPlayer(ErnestPohl))", "all x.((ErnestPohl(x) & PolishFootballPlayer(x)) -> PlayedIn(x,PolishFootball))", "Ernest Pohl (polnishFootballPlayer)", "Ernest Pohl (PolishFootballPlayer)", "-(ErnestPohl(er) & PolishFootballPlayer(er))", "(PolishFootballPlayer(ErnestPohl) & PlayedIn(ErnestPohl,PolishFootball))", "ErnestPohl(poland) & FootballPlayer(poland)", "Ernest Pohl (polnish(x) & FootballPlayer(x))", "all x.((ErnestPohl(x) & PolishFootballPlayer(x)) -> PlayedIn(x,PolishFootball))", "Ernest Pohl (PolishFootballPlayer)", "ErnestPohl (PolishFootballPlayer)", "all x.((ErnestPohl(x) & PolishFootballPlayer(x)) -> Plays(x,y))", "Ernest Pohl was a Polish FootballPlayer.", "(PolishFootballPlayer(ErnestPohl)", "Ernest Pohl (polnishfootballplayer)", "(PolishFootballPlayer(ErnestPohl)"]}
{"id": "folio_train_1837", "nl": "A football player in the Polish First Division has scored over 180 goals. ", "fol": "exists x.(PlaysInDivision(x,Polishfirstdivision) & HasScoredOver180Goals(x))", "prediction": ["all x.((FootballPlayer(x) & PolishFirstDivision(x)) -> ScoredOver180Goals(x))", "all x y.((FootballPlayer(x) & PolishFirstDivision(y)) -> ScoredOver180Goals(x,y))", "all x y z.((FootballPlayer(x) & PolishFirstDivision(y) & PolishFirstDivision(z)) -> ScoresOver180Goals(x,y,z))", "(ScoresOver180Goals(footballplayer,PolishFirstDivision))", "all x.((FootballPlayer(x) & PolishFirstDivision(x)) -> ScoresOver180Goals(x))", "all x y.((FootballPlayer(x) & PolishFirstDivision(y)) -> ScoresOver180Goals(x,y))", "(Positioner(football) & InPolishFirstDivision(football) & ScoredOver180Goals(football))", "(ScoredOver180Goals(footballplayer,PolishFirstDivision))", "all x.((FootballPlayer(x) & PolishFirstDivision(x)) -> ScoredOver180Goals(x))", "all x y.((FootballPlayer(x) & PolishFirstDivision(y)) -> ScoredOver180Goals(x,y))", "all x y.((FootballPlayer(x) & FirstDivision(y)) -> ScoredOver180Goals(x,y))", "all x.((FootballPlayer(x) & FirstDivision(x) & PolishFirstDivision(x)) -> ScoredOver180Goals(x))", "exists x.(FootballPlayer(x) & InPolishFirstDivision(x) & ScoredOver180Goals(x))", "all x.((FootballPlayer(x) & InPolishFirstDivision(x)) -> ScoredOver180Goals(x))", "(ScoresOver180Goals(footballplayer,PolishFirstDivision))", "all x.((FootballPlayer(x) & PolishFirstDivision(x)) -> ScoresOver180Goals(x))"]}
{"id": "folio_train_1838", "nl": "Ernest Pohl scored more than 180 goals in the Polish First Division. ", "fol": "(HasScoredOver180Goals(Ernestpohl) & PlaysInDivision(Ernestpohl,Polishfirstdivision))", "prediction": ["all x.((ErnestPohl(x) & PolishFirstDivision(x)) -> ScoredMoreThan180Goals(x))", "all x y.((ErnestPohl(x) & PolishFirstDivision(y)) -> ScoredMoreThan180Goals(x,y))", "(ScoredMoreThan180Goals(ErnestPohl) & InPolishFirstDivision(ErnestPohl))", "-(ErnestPohl(ErnestPohl) & ScoredMoreThan180Goals(ErnestPohl))", "Ernest Pohl scored more than 180 goals in the Polish First Division.", "(ScoresOver180Goals(ErnestPohl) & InPolishFirstDivision(ErnestPohl))", "All x.(ErnestPohl(x) -> ScoredMoreThan180Goals(x))", "(ScoredMoreThan180Goals(ErnestPohl,PolishFirstDivision))", "Ernest Pohl scored more than 180 goals in PolishFirstDivision.", "all x.((ErnestPohl(x) & PolishFirstDivision(x)) -> ScoredMoreThan180Goals(x))", "all x y.((ErnestPohl(x) & PolishFirstDivision(y)) -> ScoredMoreThan180Goals(x,y))", "-(ErnestPohl(ErnestPohl) & PolishFirstDivision(ErnestPohl))", "Ernest Pohl scored more than 180 goals in the Polish First Division.", "All x.((ErnestPohl(x) & PolishFirstDivision(x)) -> ScoresMoreThan180Goals(x))", "(Position: MoreThan180Goals(ErnestPohl))", "Ernest Pohl scored more than 180 goals in Polish First Division."]}
{"id": "folio_train_1839", "nl": "G\u00f3rnik Zabrze's stadium was named after a soccer player from Ruda \u015al\u0105ska. ", "fol": "exists x.(StadiumNamedAfter(Gornikzabrze,x) & IsFootballPlayer(x) & IsFrom(x,Rudaslaska))", "prediction": ["all x y.((Stadium(x) & G\u00f3rnikZarrze(y)) -> NamedAfterSoccerPlayer(x,y))", "all x.((Stadium(x) & G\u00f3rnikZarrze(x)) -> NamedAfterSoccerPlayer(x,Radalska))", "(Stadium(G\u00f3rnikZarrze) & SoccerPlayer(Rudalska))", "G\u00f3rnikZarrze's Stadium was named after soccer player Rudalska.", "all x.(Stadium(x) -> (G\u00f3rnikZabrze(x) & SoccerPlayer(x) & Rudalska(x)))", "-(Stadium(G\u00f3rnikZarrze) & SoccerPlayer(Rudalska))", "(Stadium(G\u00f3rnikZabrze) & SoccerPlayer(Rudalska))", "the stadium of G\u00f3rnikZarrze(Stadium) - named after soccerplayer from Rudalska(SoccerPlayer))", "all x y.((Stadium(x) & G\u00f3rnikZabrze(y)) -> NamedAfterSoccerPlayer(x,y))", "All x.(Stadium(x) -> (G\u00f3rnikZarrze(x) & SoccerPlayer(x) & Rudalska(x)))", "(Stadium(G\u00f3rnikZarrze) & SoccerPlayer(Rudalska) & NamedAfter(G\u00f3rnikZarrze,Stadium))", "all x y.((Stadium(x) & G\u00f3rnikZarrze(y) & SoccerPlayer(y) & Rudalska(y)) -> NamedAfter(x,y))", "G\u00f3rnikZarrze's Stadium was named after soccer player Rudalska.", "(Stadium(G\u00f3rnikZabrze) & SoccerPlayer(Rudalska))", "All x.(Stadium(x) -> NamedAfterSoccerPlayer(x))", "(Stadium(G\u00f3rnikZarrze) & SoccerPlayer(Rodalska) & NamedAfter(G\u00f3rnikZarrze,Stadium))"]}
{"id": "folio_train_1840", "nl": "Ernest Pohl is from Ruda \u015al\u0105ska. ", "fol": "IsFrom(Ernestpohl,Rudaslaska)", "prediction": ["-(ErnestPohl(Ernest) & Rudalska(Ernest))", "Ernest Pohl (EssentialRowalska(EssentialRowalska(EssentialRowalska))", "(Rodalska,ErnestPohl)", "Ernest Pohl (EssentialFromRudalska)", "Ernest Pohl is from Rudalska.", "-Rodalska(ErnestPohl)", "(EnergyPohl(Energy) & FromRudalska(Energy))", "ErnestPohl (Rodalska)", "(Radalska(ErnestPohl) & Rudalska(ErnestPohl))", "ErnestPohl (Rodalska).", "Ernest Pohl (Rodalska)", "(Rodalska,ErnestPohl)", "ErnestPohl(e) & Rudalska(e)", "-(ErnestPohl(Ernest) & Rudalska(Ernest))", "Ernest Pohl (Est.1989) & Rudalska(Roda))", "Ernest Pohl is from Rudalska."]}
{"id": "folio_train_1841", "nl": "Ernest Pohl has not scored more than 180 goals.", "fol": "-HasScoredOver180Goals(Ernestpohl)", "prediction": ["-(ErnestPohl(ErnestPohl) & ScoredMoreThan180Goals(ErnestPohl))", "all x.((ErnestPohl(x) & -ScoresMoreThan180Goals(x)) -> -ScoresMoreThan180Goals(x))", "(ErnestPohl(ErnestPohl) & -ScoredMoreThan180Goals(ErnestPohl))", "Ernest Pohl has not scoredmoreThan180Goals(ErnestPohl)", "ErnestPohl has notScoredMoreThan180Goals(Pohl)", "(ScoredMoreThan180Goals(ErnestPohl))", "(Scores(ErnestPohl,180))", "All x.(ErnestPohl(x) -> -ScoredMoreThan180Goals(x))", "-(ErnestPohl(er) & ScoredMoreThan180Goals(er))", "-(ErnestPohl(ErnestPohl) & ScoredMoreThan180Goals(ErnestPohl))", "all x.((ErnestPohl(x) & -ScoresMoreThan180Goals(x)) -> -ScoresMoreThan180Goals(x))", "Ernest Pohl has not scoredmoreThan180Goals(e)", "-(ErnestPohl(ErnestPohl) & ScoresMoreThan(ErnestPohl,180))", "(ScoresAbove180Goals(ErnestPohl))", "all x.((ErnestPohl(x) & -ScoredMoreThan180Goals(x)) -> -ScoredMoreThan180Goals(x))", "all x.(EnergyPohl(x) -> -ScoredMoreThan(x,180))"]}
{"id": "folio_train_1842", "nl": "G\u00f3rnik Zabrze's stadium was named after Ernest Pohl.", "fol": "StadiumNamedAfter(Gornikzabrze,Ernestpohl)", "prediction": ["(Stadium(G\u00f3rnikZabrze) & NamedAfter(G\u00f3rnikPohl))", "((Stadium(G\u00f3rnikZabrze) & ErnestPohl(Pohl)) -> NamedAfter(G\u00f3rnikZabrze))", "G\u00f3rnikZabrze's Stadium was named after ErnestPohl.", "all x y.((Stadium(x) & G\u00f3rnikZabrze(y)) -> NamedAfter(x,y))", "(Stadium(G\u00f3rnikZarrze) & NamedAfterErnestPohl(G\u00f3rnikZarrze))", "-(Stadium(G\u00f3rnikZabrze) & ErnestPohl(Pohl))", "all x.(Stadium(x) -> NamedAfter(x,EngsterPohl))", "(The stadium of G\u00f3rnikZabrze was named after ErnestPohl(G\u00f3rnikZabrze))", "Session(G\u00f3rnikZarrze) - NamedAfterErnestPohl(G\u00f3rnikZarrze))", "G\u00f3rnikZarrze's Stadium named after ErnestPohl(x))", "SessionNamedAfterEnergyPohl(Stadium)", "All x.(Stadium(x) -> NamedAfter(x,EssentialPohl))", "All x.(Stadium(x) -> (NamedAfter(x,EngsterPohl) | NamedAfter(x,EngsterPohl)))", "G\u00f3rnikZarze's Stadium named after ErnestPohl.", "-(Stadium(G\u00f3rnikZarrze) & ErnestPohl(Pohl))", "all x y.((Stadium(x) & G\u00f3rnikZabrze(y)) -> NamedAfter(x,y))"]}
{"id": "folio_train_1843", "nl": "Ann J. Land was a member of the Philadelphia City Council and was also a member of the Democratic Party.", "fol": "(exists y.MemberOfPhiladelphiaCityCouncil(AnnJLand,y) & MemberOfDemocraticParty(AnnJLand))", "prediction": ["all x.(AnnJ.Land(x) -> (MemberOfPennsylvaniaCityConsult(x) & MemberOfDemocraticParty(x)))", "(MemberOf(AnnJ.Land,Philadelphia) & MemberOfDemocraticParty(AnnJ.Land,Philadelphia))", "(MemberOfCityConsult(AnnJ.Land) & MemberOfDemocraticParty(AnnJ.Land))", "all x y.((AnnJ.Land(x) & PhiladelphiaCityConsult(y)) -> (MemberOf(x,y) & MemberOfDemocraticParty(x)))", "Ann J.Land (MemberOfPennsylvaniaCityConsult(AnnJ.Land) & MemberOfDemocraticParty(AnnJ.Land))", "(MemberOfPennsylvaniaCityConsult(AnnJ.Land) & MemberOfDemocraticParty(AnnJ.Land))", "all x.(AnnJ.Land(x) -> (MemberOfCityConsult(x) & MemberOfDemocraticParty(x)))", "(Member(AnnJ.Land,PhiladelphiaCityConsult) & MemberOfDemocraticParty(AnnJ.Land,Philadelphia))", "((AnnJ.Land(Ann)) & PhiladelphiaCityConsult(Ann)) & MemberOfDemocraticParty(Ann))", "Ann J.Land (MemberOfCityConsult(AnnJ.Land) & MemberOfDemocraticParty(AnnJ.Land))", "(MemberOf(AnnJ.Land,Philadelphia) & MemberOfDemocraticParty(AnnJ.Land,Philadelphia))", "all x.(AnnJ.Land(x) -> (MemberOfPennsylvaniaCityConsult(x) & MemberOfDemocraticParty(x)))", "all x y.((AnnJ.Land(x) & PhiladelphiaCityConsult(y)) -> (MemberOf(x,y) & MemberOfDemocraticParty(x)))", "all x.(AnnJ.Land(x) -> (MemberOfPennsylvaniaCityConsult(x) & MemberOfDemocraticParty(x)))", "(MemberOfCityConsult(AnnJ.Land) & MemberOfDemocraticParty(AnnJ.Land))", "all x.(AnnJ.Land(x) -> (MemberOf(x,Philadelphia) & MemberOfDemocraticParty(x)))"]}
{"id": "folio_train_1844", "nl": "Ann J. Land ran unopposed for the Philadephia City Council in 1980.", "fol": "(MemberOfPhiladelphiaCityCouncil(AnnJLand,Y1980) & RanForPosition(AnnJLand))", "prediction": ["Ann J.Land ran unopposed for PhiladephiaCityConsecutor(AnnJ.Land,80)", "all x y.((AnnJ.Land(x) & PhiladephiaCityConsecutor(y)) -> RanUnopposed(x,y))", "(RunsUnopposedForPhiladelphiaCityConsecutor(AnnJ.Land) & In(AnnJ.Land,80))", "(RunUnopposedForPhiladelphiaCityConsecutor(AnnJ.Land) & 1980(AnnJ.Land))", "AnnJ.LandRunsUnopposedForPhiladephiaCityConsecutive(AnnJ.Land,80)", "All x.(AnnJ.Land(x) -> RanUnopposedForPhiladephiaCityConsecutor(x,80))", "(RunsUnopposedForPhiladephiaCityConsecutive(AnnJ.Land) & 1980(AnnJ.Land))", "(RunUnopposed(AnnJ.Land) & ForPhiladelphiaCityConsecutor(AnnJ.Land,80))", "(RunsUnopposedForCityConsecutive(AnnJ.Land,80) & PhiladephiaCityConsecutor(AnnJ.Land,80))", "all x y.((AnnJ.Land(x) & PhiladephiaCityConsult(y) & RunsUnopposed(x,y)) -> RunsUnopposed(x,y))", "Ann J.Land ran unopposed for Philadephia City Council in 1980.", "Ann J.Land ran unopposed for PhiladephiaCityConsult(AnnJ.Land,80)", "Ann J.Land ran unopposed for the PhiladephiaCityConsecutor(AnnJ.Land,80)", "Ann J. Land ran unopposed for Philadephia City Council in 1980.", "AnnJ.LandRunsUnopposedForPhiladelphiaCityConsecutive(AnnJ.Land,80)", "AnnJ.Land ranUnopposedForPhiladelphiaCityConsecutive(AnnJ.Land,80)"]}
{"id": "folio_train_1845", "nl": "People who run unopposed for the Philadelphia City Council are elected to the positions they run for in the same year.", "fol": "all x y.((RanForPosition(x) & MemberOfPhiladelphiaCityCouncil(x,y)) -> ElectedToPosition(x,y))", "prediction": ["all x.((Person(x) & RunsUnopposedForCityCity(x)) -> Election(x))", "all x y.((Person(x) & RunsUnopposedFor(x,y) & PhiladelphiaCityCity(y)) -> Election(x,y))", "all x.((Person(x) & RunsUnopposedForPenn CityCity(x)) -> Election(x))", "all x y.((Person(x) & RunsUnopposedFor(x,y) & CityCity(y)) -> Election(x,y))", "all x y z.((Person(x) & RunsUnopposedFor(x,y) & PhiladelphiaCityCity(y) & Year(z)) -> Election(x,y,z))", "all x.((People(x) & RunsUnopposedForCityCity(x)) -> Election(x))", "all x y.((Person(x) & RunsUnopposed(x,y) & CityCity(y)) -> Election(x,y))", "(all x.(RunUnopposedForCityCity(x) -> Election(x)))", "all x.((Person(x) & RunsUnopposedForCityConsult(x)) -> Election(x))", "all x y z.((Person(x) & RunsUnopposedFor(x,y) & CityConsult(y) & Philadelphia(z) & RunsFor(x,z)) -> Election(x,y,z))", "all x y.((Person(x) & -OpposedForPenn CityCity(x,y)) -> Election(x,y))", "all x.(RunUnopposedFor(x,PennsylvaniaCityCity) -> Election(x,y))", "all x y.((People(x) & RunsUnopposedFor(x,y) & PhiladelphiaCityCity(y)) -> Election(x,y))", "all x.((Person(x) & RunsUnopposedFor(x,PhiladelphiaCityCity)) -> Election(x))", "all x.((People(x) & RunsUnopposedForPenn CityCity(x)) -> Election(x))", "all x.(RunsUnopposedForCityConsult(x) -> Election(x,y))"]}
{"id": "folio_train_1846", "nl": "Michael Nutter was a political challenger.", "fol": "PoliticalChallenger(Nutter)", "prediction": ["all x.((MichaelNutter(x) & PoliticalChallenge(x)) -> PoliticalChallenge(x))", "(PoliticalChallenge(MichaelNutter)", "Michael Nutter was a political challenger.", "MichaelNutter (politicalChallenge(Michael) & PoliticalChallenge(Michael))", "all x.((MichaelNutter(x) & PoliticalChallenge(x)) -> PoliticalChallenge(x))", "all x.(MichaelNutter(x) -> PoliticalChallenger(x))", "(PoliticalChamper(MichaelNutter)", "Michael Nutter was a political challenger.", "(PoliticalChallenge(MichaelNutter)", "(Challenge(MichaelNutter) & Political(MichaelNutter,Challenge))", "all x.((MichaelNutter(x) & PoliticalChallenge(x)) -> PoliticalChallenge(x))", "all x.((MichaelNutter(x) & PoliticalChampions(x)) -> PoliticalChampions(x))", "Michael Nutter was a political challenger.", "all x.(MichaelNutter(x) -> PoliticalChallenger(x))", "(PoliticalChallenge(MichaelNutter)", "Michael Nutter was a political challenger."]}
{"id": "folio_train_1847", "nl": "Ann J. Land defeated Michael Nutter and ran for the Philadelphia City Council in 1987.", "fol": "(MemberOfPhiladelphiaCityCouncil(AnnJLand,Y1987) & RanForPosition(AnnJLand) & DefeatedOpponent(AnnJLand,Nutter))", "prediction": ["(DefeatsMichaelNutter(AnnJ.Land) & RunsForPhiladelphiaCityConsult(AnnJ.Land,87))", "all x y.((AnnJ.Land(x) & MichaelNutter(y)) -> (Defeats(x,y) & RunsFor(x,y)))", "(FightedMichaelNutter(AnnJ.Land) & RunsForPhiladelphiaCityConsult(AnnJ.Land,87))", "Ann J.Land defeatedMichaelNutter and ranForPhiladelphiaCityConsult(AnnJ.Land,87))", "All x.(AnnJ.Land(x) -> (DefeatsMichaelNutter(x) & RunsForPhiladelphiaCityConsult(x,87)))", "all x y z.((AnnJ.Land(x) & MichaelNutter(y) & PhiladelphiaCityConsecutor(z)) -> (Defeats(x,y) & RunsFor(x,z)))", "Ann J.Land defeatedMichaelNutter(AnnJ.Land) & RanForPennsylvaniaCityConsult(AnnJ.Land,87))", "(Defeats(AnnJ.Land,MichaelNutter) & RunsFor(AnnJ.Land,PhiladelphiaCityConsult) & In(AnnJ.Land,87))", "(NeverWorn(AnnJ.Land,MichaelNutter) & RunsForCityConsult(AnnJ.Land,87))", "(DefeatsMichaelNutter(AnnJ.Land) & RunsForCityConsult(AnnJ.Land,87))", "(Focused(AnnJ.Land,MichaelNutter) & RunsForCityConsult(AnnJ.Land,87))", "all x y.((AnnJ.Land(x) & MichaelNutter(y)) -> (Defeats(x,y) & RunsFor(x,y)))", "(FightedMichaelNutter(AnnJ.Land) & RunsForPhiladelphiaCityConsult(AnnJ.Land,87))", "AnnJ.Land defeatedMichaelNutter(AnnJ.Land) & RunsForPhiladelphiaCityConsult(AnnJ.Land,87))", "Ann J.Land defeatedMichaelNutter and ran for Philadelphia CityConsult(x,87))", "Ann J.Land defeated MichaelNutter and ran for Philadelphia CityConsult in 1987."]}
{"id": "folio_train_1848", "nl": "Ann J. Land was elected to the Philadelphia City Council in 1980.", "fol": "MemberOfPhiladelphiaCityCouncil(AnnJLand,Y1980)", "prediction": ["Ann J.Land was elected to Philadelphia CityConsult(AnnJ.Land,80)", "(ElectedToCityConsult(AnnJ.Land,80))", "All x.(AnnJ.Land(x) -> (ElectedToCityConsult(x,80)))", "(Election(AnnJ.Land) & PhiladelphiaCityConsult(AnnJ.Land,80))", "(ElectedToCityConsult(AnnJ.Land) & Philadelphia(AnnJ.Land) & In(AnnJ.Land,80))", "AnnJ.Land(AnnJ.Land) was elected to Philadelphia CityConsult(AnnJ.Land,80))", "(ElectedToCityConsult(AnnJ.Land,80))", "Ann J.Land was elected to Philadelphia City Council in 1980.", "Ann J.Land (ElectedToCityConsult(AnnJ.Land,80))", "Ann J.Land was elected to the Philadelphia City Council in 1980.", "(ElectedToCityConsecutive(AnnJ.Land,80))", "AnnJ.Land(Ann) was elected to Philadelphia CityConsult(Ann) in 1980.", "Ann J. Land was elected to Philadelphia City Council in 1980.", "AnnJ.Land (ElectedToCityConsecutive(AnnJ.Land,80))", "Ann J.Land was elected to Philadelphia CityConsult(AnnJ.Land,80)", "Ann J. Land was elected to the Philadelphia City Council in 1980."]}
{"id": "folio_train_1849", "nl": "Ann J. Land was elected to the Philadelphia City Council in 1987.", "fol": "MemberOfPhiladelphiaCityCouncil(AnnJLand,Y1987)", "prediction": ["Ann J.Land was elected to Philadelphia CityConsult(AnnJ.Land,87)", "(ElectedToCityConsult(AnnJ.Land,87))", "All x.(AnnJ.Land(x) -> (ElectedToCityConsult(x, 1987) & Philadelphia(x)))", "(Election(AnnJ.Land,87) & PhiladelphiaCityConsecutor(AnnJ.Land,87))", "Ann J.Land was elected to Philadelphia City Council in 1987.", "AnnJ.Land(AnnJ.Land) was elected to Philadelphia CityConsult(AnnJ.Land,87))", "(ElectedToCityConsult(AnnJ.Land,87))", "Ann J.Land (ElectedToCityConsult(AnnJ.Land,87))", "(ElectedToPhiladelphiaCityConsult(AnnJ.Land,87))", "Ann J.Land was elected to the Philadelphia City Council in 1987.", "(ElectedToCityConsult(AnnJ.Land,87))", "Ann J. Land was elected to Philadelphia City Council in 1987.", "AnnJ.Land(Ann) was elected to Philadelphia CityConsult(Ann) in 1987.", "AnnJ.Land (ElectedToCityConsecutive(AnnJ.Land,87))", "Ann J.Land was elected to Philadelphia CityConsult(AnnJ.Land,87)", "Ann J. Land was elected to the Philadelphia City Council in 1987."]}
{"id": "folio_train_1850", "nl": "There was some member of the Democratic Party elected to the Philadelphia City Council in 1980.", "fol": "exists x.(MemberOfDemocraticParty(x) & ElectedToPosition(x,Y1980))", "prediction": ["exists x.(DemocraticParty(x) & ElectsToCityConsult(x,80))", "there was a member of the Democratic Party elected to the Philadelphia City Council in 1980.", "all x y.((DemocraticParty(x) & PhiladelphiaCityCity(y)) -> Election(x,y))", "exists x.(DemocraticParty(x) & ElectsToCityConsult(x,80))", "-exists x.(DemocraticParty(x) & ElectsToCityConsult(x,80))", "(exists x.(DemocraticParty(x) & ElectsToCityConsult(x,80)))", "all x y z.((DemocraticParty(x) & PhiladelphiaCityCity(y) & 1980(z)) -> Elect(x,y,z))", "exists x.(DemocraticParty(x) & Elect(x,y) & CityCity(y) & Philadelphia(y))", "(exists x.(DemocraticParty(x) & ElectsTo(x,PennsylvaniaCity(x)) & In(x,80))", "all x y.((DemocraticParty(x) & PhiladelphiaCityCouncil(y)) -> Election(x,y))", "(exists x.(DemocraticPartyMember(x) & ElectsToCityConsult(x,80)))", "exists x.(DemocraticPartyMember(x) & ElectsToCityConsult(x,80))", "exists x.(DemocraticParty(x) & EligibleToCity(x,80))", "exists x.(DemocraticParty(x) & ElectedToCityConsult(x,80))", "existed x.(DemocraticPartyMember(x) & ElectedToCityConsult(x,80))", "exists x.(DemocraticPartyMember(x) & EligibleToCityConsult(x,y) & PhiladelphiaCityConsult(y))"]}
{"id": "folio_train_1851", "nl": "Aberdeen won the cup in the 2013 final.", "fol": "TeamWonCup(Aberdeen,Twentythirteen)", "prediction": ["all x y.((Aberdeen(x) & Cup(y) & Final(y)) -> Won(x,y))", "all x.((Aberdeen(x) & Cup(x)) -> WonInFinal(x,2013))", "Aberdeen won the cup in the 2013 final.", "all x y.((Aberdeen(x) & Cup(y)) -> WonInFinal(x,y))", "Aberdeen won the cup in the 2013 final.", "all x.((Aberdeen(x) & Cup(y)) -> WonInFinal(x,y))", "the cup in 2013 & Aberdeen won it in the final.", "(WonCupIn2013(Aberdeen,Final) & Aberdeen(Aberdeen))", "(WonCup(Aberdeen,2013))", "Aberdeen (WonCupIn2013Final(Aberdeen))", "Aberdeen won cup in 2013 final & -SignedCup(Aberdeen)", "Aberdeen won the cup in 2013 final.", "all x.((Aberdeen(x) & 2013Final(x)) -> WonCup(x))", "Aberdeen won cup in 2013 final.", "Aberdeen won the cup in the 2013 final.", "Aberdeen won the cup in 2013 final."]}
{"id": "folio_train_1852", "nl": "Rangers won the cup in 2014 final.", "fol": "TeamWonCup(Rangers,Twentyfourteen)", "prediction": ["all x y.((Rangers(x) & Cup(y)) -> Won(x,y))", "all x.(Rangers(x) -> WonCup(x,2014))", "(WonCup(Rangers) & Final(Rangers))", "all x y z.((Rangers(x) & Cup(y) & Final(z)) -> Won(x,y,z))", "all x y.((Rangers(x) & Cup(y)) -> WonInFinal(x,y))", "-WonCupIn2014Final(Rangers)", "all x.(Rangers(x) -> WonCupIn2014Final(x))", "(WonCup(Rangers,2014))", "the 2014 Final (Rangers) & WonCup(Rangers))", "all x.(Rangers(x) -> (WonCup(x,2014) & Final(x,2014)))", "the 2014 final of the Rangers.", "(WonCup(Rangers) & 2014Final(Rangers))", "all x y.((Rangers(x) & Cup(y)) -> Won(x,y))", "(WinsCup(Rangers,2014))", "all x.(Rangers(x) -> WonCupIn2014Final(x))", "the 2014 final of the Rangers."]}
{"id": "folio_train_1853", "nl": "Aberdeen and Rangers are different teams.", "fol": "(TeamsAreDifferent(Aberdeen,Rangers) & TeamsAreDifferent(Rangers,Aberdeen))", "prediction": ["all x.((Aberdeen(x) & Rangers(x)) -> DifferentTeam(x))", "(DifferentTeam(Aberdeen,Aberdeen) & DifferentTeam(Rangers,Aberdeen))", "(DifferentTeam(Aberdeen) & DifferentTeam(Rangers))", "all x y.((Aberdeen(x) & Rangers(y)) -> DifferentTeam(x,y))", "((Aberdeen(a) | Rangers(a)))", "all x.((Aberdeen(x) & Rangers(x)) -> DifferentTeam(x))", "(DifferentTeams(Aberdeen,Aberdeen) & DifferentTeams(Rangers,Aberdeen))", "all x.((Aberdeen(x) | Rangers(x)) -> DifferentTeam(x))", "(DifferentTeam(Aberdeen,Aberdeen) & DifferentTeam(Rangers,Aberdeen))", "exists x.(Aberdeen(x) & Rangers(x))", "(DiscreteTeam(Aberdeen) & DistinctTeam(Rangers))", "all x y.((Team(x) & Aberdeen(y) & Rangers(y)) -> Different(x,y))", "(DifferentTeam(Aberdeen) & DifferentTeam(Rangers))", "all x y.((Aberdeen(x) & Rangers(y)) -> DifferentTeam(x,y))", "exists x.(Aberdeen(x) & Rangers(x) & DifferentTeam(x))", "((Aberdeen(a) | Rangers(a)))"]}
{"id": "folio_train_1854", "nl": "Different teams cannot win the same cup in a given year's final.", "fol": "all z.((TeamsAreDifferent(x,y) & TeamWonCup(x,z)) -> -TeamWonCup(y,z))", "prediction": ["all x y.((Team(x) & Year(y)) -> -WinsSameCup(x,y))", "all x.((Team(x) & Year(x)) -> -WinsSameCup(x))", "all x y z.((Team(x) & Cup(y) & Year(z)) -> -Wins(x,y,z))", "(DifferentTeamsCannotWinSameCupInFinal(d))", "all x y.((Team(x) & Year(y)) -> -WinsSameCup(x,y))", "all x.((Team(x) & Year(x)) -> -WinsSameCup(x,y))", "exists x.(Team(x) & -WinsSameCup(x))", "all x y.((Team(x) & Year(y) & WinsCup(x,y)) -> -WinsCup(x,y))", "all x y z.((Team(x) & Cup(y) & Year(z) & Wins(x,y,z)) -> -Wins(x,y,z))", "all x y.((Team(x) & Year(y)) -> -CanWinCup(x,y))", "(DifferentTeamsCannotWinSameCupInFinal(x))", "exists x.(Team(x) & -WinsSameCup(x) & Year(x))", "exists x.(Team(x) & -WinsCup(x,y) & Year(y) & InFinal(x,y))", "all x.((Team(x) & Year(x)) -> -WinsSameCup(x))", "all x y.((Team(x) & Cup(y) & Year(z)) -> -Wins(x,y,z))", "exists x.(Team(x) & -WinsSameCup(x,y))"]}
{"id": "folio_train_1855", "nl": "Rangers won the cup in 2015.", "fol": "TeamWonCup(Rangers,Twentyfifteen)", "prediction": ["all x y.((Rangers(x) & Cup(y)) -> Won(x,y))", "Rangers won the cup in 2015 & Rangers won it in 2015 & Rangers won it in 2015 & Rangers won it in 2015 & Rangers won it in 2015 & Rangers won it in 2015 & Rangers won it in 2015 & Rangers won it in 2015 & Rangers won it in 2015 & Rangers won it in 2015 & Rangers won it in 2015 & Rangers won it in 2015 & Rangers won it in 2015 & Rangers won it in 2015 &", "all x.(Rangers(x) -> WonCupIn2015(x))", "all x y z.((Rangers(x) & Cup(y) & Cup(z)) -> WonIn(x,y,z))", "(WonCup(Rangers) & Rangers(Rangers) & In2015(Rangers))", "all x y.((Rangers(x) & Cup(y)) -> WonIn(x,y))", "Rangers won the cup in 2015 & Rangers won it in 2015 & Rangers won it in 2015 & Rangers won it in 2015 & Rangers won it in 2015 & Rangers won it in 2015 & Rangers won it in 2015 & Rangers won it in 2015 & Rangers won it in 2015 & Rangers won it in 2015 & Rangers won it in 2015 & Rangers won it in 2015 & Rangers won it in 2015 & Rangers won it in 2015 &", "the cup in 2015 (WonRangers(Rangers) & Rangers(Rangers)))", "(WonCup(Rangers,2015) & Rangers(Rangers,2015))", "all x.(Rangers(x) -> WonCup(x,2015))", "Rangers won the cup in 2015 & won it in 2015.", "all x y.((Rangers(x) & Rangers(y)) -> WonCup(x,y))", "(WonCup(Rangers) & Rangers(Rangers))", "all x y z.((Rangers(x) & Cup(y) & Cup(z)) -> Won(x,y,z))", "all x.(Rangers(x) -> WonCupIn2015(x))", "Rangers won the cup in 2015 (Rangers won in 2015)."]}
{"id": "folio_train_1856", "nl": "Rangers won the cup in 2013.", "fol": "TeamWonCup(Rangers,Twentythirteen)", "prediction": ["all x y.((Rangers(x) & Cup(y)) -> Won(x,y))", "Rangers won the cup in 2013 & Rangers won it in 2013 & Rangers won it in 2013 & Rangers won it in 2013 & Rangers won it in 2013 & Rangers won it in 2013 & Rangers won it in 2013 & Rangers won it in 2013 & Rangers won it in 2013 & Rangers won it in 2013 & Rangers won it in 2013 & Rangers won it in 2013 & Rangers won it in 2013 & Rangers won it in 2013 &", "all x.(Rangers(x) -> WonCupIn2013(x))", "all x y z.((Rangers(x) & Cup(y) & Cup(z)) -> WonIn2013(x,y,z))", "(WonCup(Rangers) & InCup(Rangers) & InCup(Rangers))", "all x y.((Rangers(x) & Cup(y)) -> WonIn2013(x,y))", "Rangers won the cup in 2013 & won it in 2013.", "(WonCup(Rangers) & In2013(Rangers) & In2013(Rangers))", "(WonCup(Rangers,2013) & Rangers(Rangers,2013))", "the cup in 2013 & Rangers won it in 2013.", "all x.(Rangers(x) -> WonCup(x,2013))", "all x y z.((Rangers(x) & Cup(y) & Cup(z)) -> Won(x,y,z))", "all x y.((Rangers(x) & Cup(y)) -> WonIn2013(x,y))", "Rangers won the cup in 2013 & won the cup in 2013.", "the cup in 2013 & Rangers won it in 2013.", "all x.(Rangers(x) -> WonCupIn2013(x))"]}
{"id": "folio_train_1857", "nl": "Aberdeen has won a cup before.", "fol": "exists z.TeamWonCup(Aberdeen,z)", "prediction": ["all x.((Aberdeen(x) & WonCup(x)) -> WinsCup(x))", "all x.(Aberdeen(x) -> WonCup(x))", "all x y.((Aberdeen(x) & Cup(y)) -> Won(x,y))", "Aberdeen has won a cup before.", "all x.((Aberdeen(x) & WonCup(x)) -> HasWonCup(x))", "(WonCupBefore(Aberdeen))", "(WonCup(Aberdeen) & Before(Aberdeen))", "all x.(Aberdeen(x) -> WonCup(x))", "all x y.((Aberdeen(x) & Cup(y)) -> Won(x,y))", "Aberdeen has won a cup before.", "all x.(Aberdeen(x) -> WonCupBefore(x))", "all x.((Aberdeen(x) & WonCup(x)) -> WinsCup(x))", "Aberdeen has won cup before.", "all x.((Aberdeen(x) & WonCup(x)) -> HasWonCup(x))", "exists x.(Aberdeen(x) & WonCup(x))", "exists x.(Aberdeen(x) & WonCup(x) & Before(x))"]}
{"id": "folio_train_1858", "nl": "All young working professionals who have regular 9-5 jobs also have pets.", "fol": "all x.(YoungWorkingProfessional(x) -> OwnsPets(x))", "prediction": ["all x.((YoungWorkingProfessional(x) & RegularJob(x,9) & RegularJob(x,5)) -> HasPets(x))", "all x.((YoungWorkingProfessional(x) & Regular9-5Job(x)) -> HasPets(x))", "all x y.((YoungWorkingProfessional(x) & Regular(x,y) & 9-5(y)) -> HasPets(x))", "all x.((Job(x) & Regular(x,9) & Regular(x,5)) -> HasPets(x))", "all x.((YoungWorkingProfessional(x) & RegularJob(x,9) & RegularJob(x,5)) -> HasPets(x))", "all x.((JoyfulWorkingProfessional(x) & Regular9-5Job(x)) -> HasPets(x))", "(all x.((YoungWorkingProfessional(x) & RegularJob(x,9)) & 9-5Job(x)) -> HasPets(x))", "all x.((YoungWorkingProfessional(x) & Regular9-5Jobs(x)) -> HasPets(x))", "(all x.((YoungWorkingProfessional(x) & RegularJobs(x,9)) & RegularJobs(x,9)) -> HasPets(x))", "all x.((YoungWorkingProfessional(x) & RegularJobs(x,9) & RegularJobs(x,5)) -> HasPets(x))", "all x.((JugendWorkingProfessional(x) & RegularJob(x,9) & RegularJob(x,5)) -> HasPets(x))", "all x y.((YoungWorkingProfessional(x) & RegularJob(y) & 9-5(y)) -> HasPets(x))", "all x y.((YoungWorkingProfessional(x) & Regular(y) & 9-5(x)) -> HasPets(x))", "all x.((YoungWorkingProfessional(x) & HasRegular9-5Jobs(x)) -> HasPets(x))", "all x.((YoungWorkingProfessional(x) & Regular9-5Job(x)) -> HasPets(x))", "all x.((YearWorkingProfessional(x) & RegularJob(x,9) & RegularJob(x,9)) -> HasPets(x))"]}
{"id": "folio_train_1859", "nl": "Some people who live in Manhattan are young working professionals who have regular 9-5 jobs.", "fol": "exists x.(LivesInManhattan(x) & YoungWorkingProfessional(x))", "prediction": ["exists x.(Person(x) & LivesInMetropolitan(x) & YoungWorkingProfessional(x) & RegularJob(x,9))", "exists x.((Person(x) & LivesInMetropolitan(x)) -> (YoungWorkingProfessional(x) & RegularJobs(x,9)))", "exists x.(Person(x) & LivesIn(x,Metropolitan) & YoungWorkingProfessional(x) & RegularJob(x,9))", "exists x.(LivesInMetropolitan(x) & YoungWorkingProfessional(x) & RegularJob(x,9))", "exists x.(LivingInMidtown(x) & YoungWorkingProfessional(x) & RegularJob(x,9))", "exists x.(People(x) & LivesIn(x,Metropolitan) & YoungWorkingProfessional(x) & RegularJobs(x,9-5))", "all x y.((Person(x) & LivesIn(x,y)) -> (YoungWorkingProfessional(x) & RegularJob(y,9)))", "all x y.((Person(x) & LivesInMetropolitan(x) & YoungWorkingProfessional(y) & RegularJob(y,9)) -> Has(x,y))", "all x y.((Person(x) & LivesIn(x,y) & Manhattan(y)) -> (YoungWorkingProfessional(x) & RegularJob(x,y)))", "exists x.((Person(x) & LivesInMetropolitan(x)) -> YoungWorkingProfessional(x) & RegularJob(x,9)))", "exists x.(People(x) & LivesInMetropolitan(x) & YoungWorkingProfessional(x) & RegularJob(x,9))", "exists x.(Person(x) & LivesInMetropolitan(x) & YoungWorkingProfessional(x) & RegularJob(x,9))", "exists x.(LivesInMidtown(x) & YoungWorkingProfessional(x) & RegularJobs(x,9))", "all x y.((Person(x) & LivesInMidtown(x) & YoungWorkingProfessional(y) & RegularJob(y,9)) -> HasRegularJob(y,9))", "all x y.((Person(x) & LivesInMetropolitan(x,y)) -> (YoungWorkingProfessional(x) & RegularJob(y,9)))", "exists x.(Person(x) & LivesIn(x,Manhattan) & YoungWorkingProfessional(x) & RegularJobs(x,9-5))"]}
{"id": "folio_train_1860", "nl": "All people who have pets are people who have at least one child.", "fol": "all x.(OwnsPets(x) -> HasChild(x))", "prediction": ["all x.(HasPets(x) -> HasAtLeastOneChild(x))", "all x.(HasPet(x) -> HasChild(x))", "all x.(HasPets(x) -> exists y.(Child(y) & HasChild(x,y)))", "all x.((Person(x) & HasPet(x)) -> HasChild(x))", "(all x.(HasPets(x) -> HasChild(x)))", "all x.(HasPet(x) -> exists y.(Child(y) & HasChild(x,y)))", "all x y.((Person(x) & HasPet(x)) -> HasChild(x,y))", "all x.((Person(x) & HasPet(x)) -> exists y.(Child(y) & HasChild(x,y))))", "all x.((Person(x) & HasPet(x)) -> HasChild(x))", "all x.(Person(x) -> HasChild(x))", "all x y.((Person(x) & HasPet(x,y)) -> HasChild(x,y))", "all x.(HasPets(x) -> HasChild(x))", "all x.(HasPets(x) -> exists y.(Child(y) & HasChild(x,y)))", "all x.(Person(x) -> HasChild(x))", "all x.((Person(x) & HasPet(x)) -> HasAtLeastOneChild(x))", "all x.(HasPet(x) -> HasChild(x))"]}
{"id": "folio_train_1861", "nl": "People who do not have at least one child are people who own a sports car.", "fol": "all x.(HasChild(x) -> -OwnsSportsCar(x))", "prediction": ["all x.((Person(x) & -HasChild(x)) -> OwnsSportsCar(x))", "all x.((Person(x) & -HasChild(x)) -> OwnsSportsCar(x))", "all x y.((Person(x) & -HasChild(x,y)) -> OwnsSportsCar(x))", "all x.((People(x) & -HasChild(x)) -> OwnsSportsCar(x))", "all x.((Person(x) & -exists y.(Child(y) & Has(x,y))) -> OwnsSportsCar(x))", "all x.((Person(x) & -HasChild(x)) -> OwnsSportsCar(x))", "all x.((Person(x) & -exists y.(Child(y) & HasChild(x,y))) -> OwnsSportsCar(x))", "all x y.((Person(x) & -HasChild(x)) -> OwnsSportsCar(x,y))", "exists x.(Person(x) & -exists y.(Child(y) & HasChild(x,y))) -> OwnsSportsCar(x))", "all x.((People(x) & -HasChild(x)) -> OwnsSportsCar(x))", "all x.((Person(x) & -HasChild(x)) -> OwnsSportsCar(x))", "all x y.((Person(x) & -HasChild(x,y)) -> OwnsSportsCar(x))", "all x.((People(x) & -HasChild(x)) -> OwnsSportsCar(x))", "all x.((Person(x) & -HasChild(x)) -> OwnsSportsCar(x))", "exists x.(Person(x) & -HasChild(x) & OwnsSportsCar(x))", "all x.((Person(x) & -HasChild(x)) -> OwnsSportsCar(x))"]}
{"id": "folio_train_1862", "nl": "Mary either does not own a sports car or, if they do, then they do not have at least one child.", "fol": "-((OwnsSportsCar(Mary) & -HasChild(Mary)) | (-OwnsSportsCar(Mary) & HasChild(Mary)))", "prediction": ["all x.((Mary(x) & -OwnSportsCar(x)) | (-HasChild(x) & HasChild(x))))", "((Mary(Mary) & -OwnsSportsCar(Mary)) | (-OwnsSportsCar(Mary) & HasChild(Mary))))", "(-OwnsSportsCar(Mary) | (-OwnsSportsCar(Mary) & HasChild(Mary))))", "all x.((Mary(x) & -OwnsSportsCar(x)) | (-HasChild(x) | -HasChild(x))))", "(-OwnsSportsCar(Mary) | (-HasChild(Mary))))", "(exists x.(Mary(x) & -OwnSportsCar(x)) | exists y.(Child(y) & -OwnSportsCar(y))))", "all x y.((Mary(x) & -OwnSportsCar(x,y)) | (-HasChild(x,y))))", "all x.((Mary(x) & -OwnSportsCar(x)) | (-HasChild(x) | HasChild(x))))", "((Mary(Mary) & -OwnsSportsCar(Mary)) | (-OwnsSportsCar(Mary) & HasChild(Mary))))", "exists x.(Mary(x) & (-OwnsSportsCar(x) | -HasChild(x)))", "exists x.(Maria(x) & (-OwnSportsCar(x) | -HasChild(x)))", "all x.((Mary(x) & (-OwnsSportsCar(x) | -HasChild(x))) -> -HasChild(x))", "(all x.((Mary(x) & -OwnSportsCar(x)) | (-OwnSportsCar(x,y) & Child(y))))", "all x.((Mary(x) & -OwnSportsCar(x)) | (-OwnSportsCar(x) & Child(x))))", "exists x.(Mary(x) & (-OwnsSportsCar(x) | -HasChild(x)))", "all x.((Maria(x) & (-OwnsSportsCar(x) | -HasChild(x))) -> -HasChild(x))"]}
{"id": "folio_train_1863", "nl": "Mary is a person who lives in Manhattan.", "fol": "LivesInManhattan(Mary)", "prediction": ["all x.(Maria(x) -> LivesInMidtown(x))", "Mary is a person who lives in Manhattan.", "(LivingIn(Mary,Milton) -> Person(Mary))", "(Person(Mary) & LivesInMidtown(Mary))", "all x.(Mary(x) -> LivesIn(x,Mennoy))", "all x y.((Person(x) & Mary(y) & LivesIn(x,y)) -> LivesIn(y,Milton))", "(LivingIn(Mary,New York) & Person(Mary))", "Mary is a person who lives in Manhattan.", "Mary LivesInMidtown(Mary)", "(LivesInMiami(Mary) & LivesIn(Mary,Miami))", "all x.(Maria(x) -> LivesInMetropolitan(x))", "exists x.(Person(x) & Person(x) & LivesIn(x,Mennoy))", "(LivingIn(Mary,Metropolitan))", "Mary is a person who lives in Manhattan.", "all x.(Mary(x) -> LivesInMennoy(x))", "all x.(Maria(x) -> LivesIn(x,Milton))"]}
{"id": "folio_train_1864", "nl": "Mary is a person who lives in Manhattan and is a young working professional who has a regular 9-5 job.", "fol": "(Person(Mary) & LivesInManhattan(Mary) & YoungWorkingProfessional(Mary))", "prediction": ["all x.(Mary(x) -> (LivesInMiami(x) & YoungWorkingProfessional(x) & RegularJob(x,9)))", "(LisesIn(Mary,Miami) & YoungWorkingProfessional(Mary) & RegularJob(Mary,9-5))", "all x.(Maria(x) -> (LisesInMidtown(x) & YoungWorkingProfessional(x) & RegularJob(x,9)))", "(LivingInMiami(Mary) & YoungWorkingProfessional(Mary) & RegularJob(Mary,9))", "all x y.((Person(x) & LivesIn(x,y) & Manhattan(y)) -> (YoungWorkingProfessional(x) & RegularJob(x,9-5)))", "all x.(Mary(x) -> (LivesInMidtown(x) & YoungWorkingProfessional(x) & RegularJob(x,9)))", "(LivesInMiami(Maria) & YoungWorkingProfessional(Maria) & RegularJob(Maria,9))", "all x.((Person(x) & LivesInMiami(x) & YoungWorkingProfessional(x) & RegularJob(x,9)) -> Mary(x))", "all x y.((Person(x) & LivesInMidtown(x) & YoungWorkingProfessional(y) & RegularJob(y,9)) -> Mary(x))", "(LisesInMidtown(Mary) & YoungWorkingProfessional(Mary) & RegularJob(Mary,9))", "(LifesInMidtown(Mary) & YoungWorkingProfessional(Mary) & RegularJob(Mary,9-5))", "(LivingInNew York, Mary) & YoungWorkingProfessional(Mary,9) & RegularJob(Mary,5))", "all x.((Person(x) & LivesIn(x,Miami) & YoungWorkingProfessional(x) & Regular9-5Job(x)) -> Mary(x))", "all x.(Mary(x) -> (LisesInMiami(x) & YoungWorkingProfessional(x) & RegularJob(x,9)))", "(LivesInMiami(Mary) & YoungWorkingProfessional(Mary,9) & RegularJob(Mary,5))", "exists x.(Person(x) & LivesIn(x,Miami) & YoungWorkingProfessional(x) & RegularJob(x,9-5))"]}
{"id": "folio_train_1865", "nl": "If Mary is a young working professional who has a regular 9-5 job, then Mary does not live in Manhattan.", "fol": "(YoungWorkingProfessional(Mary) -> -LivesInManhattan(Mary))", "prediction": ["all x.((YoungWorkingProfessional(x) & RegularJob(x,9)) -> -LivesInMidtown(x))", "(YearWorkingProfessional(Mary) & RegularJob(Mary,9) & 9-5(Mary)) -> -LivesInMidtown(Mary,Midtown))", "all x.((YoungWorkingProfessional(x) & Regular9-5Job(x)) -> -LivesInMidtown(x))", "all x.((JungleWorkingProfessional(x) & RegularJob(x,9)) -> -LivesInMidtown(x))", "all x y.((YoungWorkingProfessional(x) & RegularJob(y,x) & 9-5(y)) -> -LivesInMidtown(x))", "all x.(YoungWorkingProfessional(x) & RegularJob(x,9) & Has(x,5)) -> -LivesInMidtown(x))", "all x.((YoungWorkingProfessional(x) & RegularJob(x,9)) -> -LivesInMidtown(x))", "all x.((YearWorkingProfessional(x) & RegularJob(x,9-5)) -> -LivesInMidtown(x))", "all x y.((YoungWorkingProfessional(x) & RegularJob(y,x,9)) -> -LivesInMidtown(x))", "all x.((JungleWorkingProfessional(x) & RegularJob(x,9)) -> -LivingInMidtown(x))", "all x.((YoungWorkingProfessional(x) & Regular9-5Job(x)) -> -MariaLivesInMidtown(x))", "exists x.(YoungWorkingProfessional(x) & Regular9-5Job(x) & Mary(x))", "(all x.((YoungWorkingProfessional(x) & RegularJob(x,9)) -> -LivesInMetropolitan(x)))", "all x.((JungleWorkingProfessional(x) & Regular9-5Job(x)) -> -LivesInMetropolitan(x))", "all x.((YoungWorkingProfessional(x) & HasRegular9-5Job(x)) -> -LivesInMidtown(x))", "all x.((YearWorkingProfessional(x) & RegularJob(x,9)) -> -LivesInMetropolitan(x))"]}
{"id": "folio_train_1866", "nl": "Either block design or event-related design. ", "fol": "all x.(BlockDesignType(x) | EventRelatedDesignType(x))", "prediction": ["((BlockDesign(x) | EventRelatedDesign(x)))", "all x.((BlockDesign(x) | EventRelatedDesign(x)) -> (BlockDesign(x) | EventRelatedDesign(x)))", "all x.(BlockDesign(x) | EventRelatedDesign(x))", "(BlockDesign(x) | EventRelatedDesign(x)))", "all x y.((BlockDesign(x) | EventRelatedDesign(y)) -> ((BlockDesign(x) | EventRelatedDesign(x))))", "all x.((BlockDesign(x) | EventRelatedDesign(x)) -> -(BlockDesign(x) | EventRelatedDesign(x))))", "((BlockDesign(x) | EventRelatedDesign(x)))", "all x.(BlockDesign(x) | EventRelatedDesign(x))", "all x y.((BlockDesign(x) | EventRelatedDesign(x)) -> (Equal(y) & BlockDesign(x)))", "(BlockDesign(x) | EventRelatedDesign(x))", "exists x.(BlockDesign(x) | EventRelatedDesign(x))", "((BlockDesign(x) | EventRelatedDesign(x)))", "(BlockDesign(block) | EventRelatedDesign(block))", "exists x.(BlockDesign(x) | EventRelationshipDesign(x))", "exists x.(BlockDesign(x) | EventRelatedDesign(x))", "exists x.(BlockDesign(x) | EventRelationshipDesign(x))"]}
{"id": "folio_train_1867", "nl": "All event-related designs are brain image acquisition.", "fol": "all x.(EventRelatedDesignType(x) -> BrainImageAcquisitionProcess(x))", "prediction": ["all x.(EventRelatedDesign(x) -> BrainImageAcquisition(x))", "all x.((EventRelatedDesign(x) & BrainImageAcquisition(x)) -> BrainImageAcquisition(x))", "all x y.((EventRelatedDesign(x) & BrainImageAcquisition(y)) -> BrainImageAcquisition(x,y))", "all x.(EventRelatedDesign(x) -> BrainImageAcquisition(x))", "ALLEventRelatedDesignsAcquireBrainImages(e)", "all x y.((Event(x) & Design(y)) -> BrainImageAcquisition(y))", "all x.((EventRelatedDesign(x) & BrainImageAcquisition(x)) -> BrainImageAcquisition(x))", "all x.(EventRelatedDesign(x) -> BrainImageAcquiring(x))", "all x.((Event(x) & BrainImageAcquisition(x)) -> BrainImageAcquisition(x))", "all x y.((EventRelatedDesign(x) & BrainImageAcquisition(y)) -> BrainImageAcquisition(x))", "all x.((EventRelatedDesign(x) & BrainImageAcquiring(x)) -> BrainImageAcquiring(x))", "all x.(EventRelationship(x) -> BrainImageAcquisition(x))", "(all x.(EventRelatedDesign(x) -> BrainImageAcquisition(x))", "all x.(EventRelatedDesign(x) -> BrainImageAcquisition(x))", "all x.(EventRelatedDesign(x) -> BrainImageAcquiring(x))", "all x.(EventRelatedDesign(x) -> BrainImageAcquisition(x))"]}
{"id": "folio_train_1868", "nl": "All brain image acquisition is preceded by data processing.", "fol": "all x.(BrainImageAcquisitionProcess(x) -> PrecededByDataProcessingStep(x))", "prediction": ["all x.(BrainImageAcquisition(x) -> PreceedsDataProcessing(x))", "(All x.(BrainImageAcquisition(x) -> PreceedsDataProcessing(x))", "all x y.((BrainImageAcquisition(x) & DataProcessing(y)) -> Preceeds(x,y))", "all x.(BrainImageAcquisition(x) -> PreceedsDataProcessing(x))", "all x.(BirdImageAcquisition(x) -> PreceedsDataProcessing(x))", "all x.(BrainImageAcquiring(x) -> PreceedsDataProcessing(x))", "all x.(BodyImageAcquisition(x) -> PrecededByDataProcessing(x))", "(all x.(BrainImageAcquisition(x) -> PreceedsDataProcessing(x))", "all x y.((BrainImageAcquisition(x) & DataProcessing(y)) -> Preceeds(x,y))", "all x.(BirdImageAcquisition(x) -> PreceedsDataProcessing(x))", "all x.(BildImageAcquisition(x) -> PrecededByDataProcessing(x))", "all x y.((BrainImageAcquisition(x) & DataProcessing(y)) -> Precedes(x,y))", "all x.(BrainImageAcquisition(x) -> PreceedsDataProcessing(x))", "all x.(BodyImageAcquisition(x) -> DataProcessing(x))", "all x.(BrainImageAppropriation(x) -> DataProcessing(x))", "all x.(BrainImageAcquiring(x) -> PreceedsDataProcessing(x))"]}
{"id": "folio_train_1869", "nl": "Nothing preceded by data processing acquires data.", "fol": "all x.(PrecededByDataProcessingStep(x) -> -DataAcquisition(x))", "prediction": ["all x.((DataProcessing(x) & -Preceeds(x,Data)) -> AcquiresData(x))", "all x.((PreceedsDataProcessing(x) & -AcquiresData(x)) -> Data(x))", "-exists x.(DataProcessing(x) & Precedes(x,Data))", "(PreceedsDataProcessing(x) -> AcquiresData(x))", "all x y.((DataProcessing(x) & Data(y)) -> Acquires(x,y))", "all x.((PreceedsDataProcessing(x)) -> AcquiresData(x))", "-(PreceedsDataProcessing(x) & AcquiresData(x))", "all x.((DataProcessing(x) & -Preceeds(x,Data)) -> AcquiresData(x))", "all x.((DataProcessing(x) & Precedes(x,Data)) -> AcquiresData(x))", "all x.((PrecededByDataProcessing(x)) -> AcquiresData(x))", "all x y.((PreceedingDataProcessing(x) & Data(y)) -> Acquires(x,y))", "(PreceedsDataProcessing(x) -> AcquiresData(x))", "all x.(PreceedsDataProcessing(x) -> AcquiresData(x))", "-exists x.(DataProcessing(x) & Precedes(x,Data))", "-exists x.(DataProcessing(x) & -Preceeds(x,DataProcessing))", "-exists x.(DataProcessing(x) & Preceeding(x,data))"]}
{"id": "folio_train_1870", "nl": "Picture memory is either an event-related design and acquiring data or neither an event-related design nor acquiring data.", "fol": "((EventRelatedDesignType(PictureMemory) & DataAcquisition(PictureMemory)) | (-EventRelatedDesignType(PictureMemory) & -DataAcquisition(PictureMemory)))", "prediction": ["all x.(PictureMemory(x) -> ((EventRelatedDesign(x) & AcquiringData(x)) | (-EventRelatedDesign(x) & AcquiringData(x))))", "all x.(PictureMemory(x) -> (EventRelatedDesign(x) & AcquiringData(x)) | (-EventRelatedDesign(x) & AcquiringData(x))))", "((EventRelatedDesign(PictureMemory) & AcquiringData(PictureMemory)) | (-EventRelatedDesign(PictureMemory) & AcquiringData(PictureMemory))))", "(all x.(PictureMemory(x) -> (EventRelatedDesign(x) & AcquiresData(x))) | (-EventRelatedDesign(x) & AcquiresData(x))))", "(EventRelatedDesign(pictureMemory,x) | -EventRelatedDesign(pictureMemory,x) & AcquiringData(pictureMemory,x)))", "all x.(PictureMemory(x) -> (EventRelatedDesign(x) & AcquiringData(x) | -EventRelatedDesign(x) & AcquiringData(x)))", "all x.(PictureMemory(x) -> ((EventRelatedDesign(x) & AcquiringData(x)) | -EventRelatedDesign(x) & AcquiringData(x)))", "all x.(PictureMemory(x) -> ((EventRelatedDesign(x) & AcquiringData(x)) | (-EventRelatedDesign(x) & AcquiringData(x))))", "all x y.((PictureMemory(x) & EventRelationalDesign(y)) -> (AcquiringData(x,y) | -AcquiringData(x,y)))", "all x y.((PictureMemory(x) & EventRelatedDesign(y) & AcquisitionData(y)) | (-EventRelatedDesign(x,y) & AcquisitionData(x,y)))", "(all x.(PictureMemory(x) -> (EventRelatedDesign(x) & AcquiringData(x))) | (-EventRelatedDesign(x) & AcquiringData(x))))", "all x.(PictureMemory(x) -> (EventRelatedDesign(x) & AcquiringData(x) | -EventRelatedDesign(x) & AcquiringData(x)))", "all x.(PictureMemory(x) -> ((EventRelatedDesign(x) & AcquiringData(x)) | (-EventRelatedDesign(x) & AcquiringData(x))))", "exists x.(PictureMemory(x) & ((EventRelatedDesign(x) & AcquiresData(x)) | -(EventRelatedDesign(x) & AcquiresData(x)))))", "all x.(PictureMemory(x) -> ((EventRelationalDesign(x) & AcquiringData(x)) | -(EventRelationalDesign(x) & AcquiringData(x))))", "exists x.(PictureMemory(x) & ((EventRelatedDesign(x) & AcquiringData(x)) | -(EventRelatedDesign(x) & AcquiringData(x)) | -(EventRelatedDesign(x) & AcquiringData(x)))))"]}
{"id": "folio_train_1871", "nl": "Picture memory is preceded by data processing.", "fol": "PrecededByDataProcessingStep(PictureMemory)", "prediction": ["all x.(PictureMemory(x) -> PreceedsDataProcessing(x))", "all x y.((PictureMemory(x) & DataProcessing(y)) -> Preceeds(x,y))", "all x.((PictureMemory(x) & DataProcessing(x)) -> Preceeds(x,y))", "(PreceedsDataProcessing(pictureMemory)", "all x.(PictureMemory(x) -> PreceedsDataProcessing(x))", "all x.(PictureMemory(x) -> PrecededByDataProcessing(x))", "all x y z.((PictureMemory(x) & DataProcessing(y) & PictureMemory(z)) -> Preceeds(x,y,z))", "all x y.((PictureMemory(x) & DataProcessing(y)) -> Preceeds(x,y))", "(PreceedsDataProcessing(pictureMemory)", "all x.((PictureMemory(x) & DataProcessing(x)) -> Preceeds(x,y))", "all x y.((PictureMemory(x) & DataProcessing(y)) -> Preceeds(x,y))", "(PreceedsDataProcessing(pictureMemory,picture)", "all x.(PictureMemory(x) -> PreceedsDataProcessing(x))", "all x y.((PictureMemory(x) & DataProcessing(y)) -> Precedes(x,y))", "all x.(PictureMemory(x) -> PrecededByDataProcessing(x))", "all x.(PictureMemory(x) -> DataProcessing(x))"]}
{"id": "folio_train_1872", "nl": "Picture memory is a block design.", "fol": "BlockDesignType(PictureMemory)", "prediction": ["all x.(PictureMemory(x) -> BlockDesign(x))", "all x.(PictureMemory(x) -> BlockDesign(x))", "all x y.((PictureMemory(x) & BlockDesign(y)) -> Contains(x,y))", "(BlockDesign(pictureMemory) & -BlockDesign(pictureMemory))", "all x.((PictureMemory(x) & BlockDesign(x)) -> -BlockDesign(x))", "all x.(PictureMemory(x) -> BlockDesign(x))", "all x y.((PictureMemory(x) & BlockDesign(y)) -> BlockDesign(x))", "all x.(PictureMemory(x) -> BlockDesign(x))", "all x.((PictureMemory(x) & BlockDesign(x)) -> Has(x,y))", "(BlockDesign)", "all x.(PictureMemory(x) -> BlockDesign(x))", "all x.(PictureMemory(x) -> BlockDesign(x))", "(BlockDesign)", "all x.(PictureMemory(x) -> BlockDesign(x))", "all x.(PictureMemory(x) -> BlockDesign(x))", "exists x.(PictureMemory(x) & BlockDesign(x))"]}
{"id": "folio_train_1873", "nl": "Picture memory is either a block design or acquiring data.", "fol": "(BlockDesignType(PictureMemory) | DataAcquisition(PictureMemory))", "prediction": ["all x.(PictureMemory(x) -> (BlockDesign(x) | AcquiringData(x)))", "all x y.((PictureMemory(x) & BlockDesign(y)) | AcquiringData(x,y)) -> Memory(x))", "all x.(PictureMemory(x) -> (BlockDesign(x) | AcquiringData(x)))", "(BlockDesign(picture) | AcquiringData(picture)))", "(BlockDesign(pictureMemory) | AcquiringData(pictureMemory))", "all x y.((PictureMemory(x) & BlockDesign(y)) | AcquiringData(x,y)) -> BlockDesign(x))", "all x.(PictureMemory(x) -> (BlockDesign(x) | AcquiringData(x)))", "all x.((PictureMemory(x) & BlockDesign(x) & AcquiresData(x)) -> Memory(x))", "all x y.((PictureMemory(x) & BlockDesign(y)) | AcquiringData(x,y)) -> PictureMemory(x))", "all x.(PictureMemory(x) -> (BlockDesign(x) | AcquiringData(x)))", "all x.(PictureMemory(x) -> (BlockDesign(x) | AcquisitionData(x)))", "exists x.(PictureMemory(x) & ((BlockDesign(x) & -AcquiringData(x)) | (-BlockDesign(x) & AcquiringData(x)))))", "all x.(PictureMemory(x) -> (BlockDesign(x) | AcquiringData(x)))", "all x.(PictureMemory(x) -> (BlockDesign(x) | AcquiringData(x)))", "exists x.(PictureMemory(x) & BlockDesign(x) & AcquiringData(x))", "all x.(PictureMemory(x) -> (BlockDesign(x) | AcquisitionData(x)))"]}
{"id": "folio_train_1874", "nl": "If picture memory is not acquiring data, then picture memory is a block design and acquiring data.", "fol": "(-DataAcquisition(PictureMemory) -> (BlockDesignType(PictureMemory) & DataAcquisition(PictureMemory)))", "prediction": ["all x.((PictureMemory(x) & -AcquiringData(x)) -> (BlockDesign(x) & AcquiringData(x)))", "all x.((PictureMemory(x) & -AcquiringData(x)) -> (BlockDesign(x) & AcquiringData(x)))", "all x y.((PictureMemory(x) & -AcquiringData(x)) -> (BlockDesign(x) & AcquiringData(y)))", "all x.((BlockDesign(x) & -AcquiringData(x)) -> PictureMemory(x))", "all x.((PictureMemory(x) & -AcquiringData(x)) -> (BlockDesign(x) & AcquiringData(x)))", "(-AcquiringData(pictureMemory) -> BlockDesignAndAcquiringData(pictureMemory))", "all x y.((PictureMemory(x) & -AcquiringData(x)) -> (BlockDesign(x) & AcquiringData(y)))", "all x.(AcquiringData(x) -> (BlockDesign(x) & AcquiringData(x)))", "all x.((BlockDesign(x) & -AcquiringData(x)) -> PictureMemory(x))", "all x.((PictureMemory(x) & -AcquiringData(x)) -> (BlockDesign(x) & AcquiringData(x)))", "(-AcquiringData(pictureMemory) -> BlockDesignAndAcquiringData(pictureMemory))", "all x.((PictureMemory(x) & -AcquiringData(x)) -> BlockDesignAndAcquiringData(x))", "all x.((PictureMemory(x) & -AcquiringData(x)) -> (BlockDesign(x) & AcquiringData(x)))", "all x.((PictureMemory(x) & -AcquiringData(x)) -> (BlockDesign(x) & AcquiringData(x)))", "all x.((PictureMemory(x) & -AcceptingData(x)) -> BlockDesignAndAcceptingData(x))", "all x.((PictureMemory(x) & -AcquiringData(x)) -> (BlockDesign(x) & AcquiringData(x)))"]}
{"id": "folio_train_1875", "nl": "The USS Lyon was a US Navy ship involved in WWII.", "fol": "(IsUSNavyShip(Usslyon) & InWorldWarII(Usslyon))", "prediction": ["all x.((USSLyon(x) & USNavyShip(x)) -> InvolvedInWWII(x))", "all x.((USS Lyon(x) & USNavyShip(x)) -> InvolvedInWWII(x))", "all x y.((USSLyon(x) & USNavyShip(y)) -> InvolvedInWWII(x,y))", "(USS Lyon) & US Navy Ship(USS) & InvolvedInWorldWar(USS))", "all x.(USSLyon(x) -> (USNavyShip(x) & InvolvedInWWII(x)))", "(USSLyon(USS) & USNavyShip(US) & InvolvedInWorldWar(US))", "(USS Lyon, US Navy Ship) & InvolvedInWWII.", "all x y.((USSLyon(x) & USNavyShip(y)) -> InvolvedInWorldWar(x,y))", "(USS Lyon) & US Navy Ship(USS) & InvolvedInWWII(USS))", "all x.((USSLyon(x) & USNavy(x)) -> InvolvedInWorldWar(x))", "(USSYlon(USS) & USNavy(US) & InvolvedInWWII(USS))", "the USSLyon(USS) was a US Navy Ship involved in WWII.", "all x.(USSLyon(x) -> (US NavyShip(x) & InvolvedInWWII(x)))", "the USSLyon (USNovaryShip) & InvolvedInWorldWarIII.", "(USS Lyon) -> US NavyShip(USS))", "all x y.((USS Lyon(x) & USNavy(y)) -> InvolvedInWWII(x,y))"]}
{"id": "folio_train_1876", "nl": "All ships involved in WWII are currently decommissioned or in a museum.", "fol": "all x.(InWorldWarII(x) -> (IsDecommissioned(x) | IsInMuseum(x)))", "prediction": ["all x.((Ship(x) & InvolvedInWWII(x)) -> (Decommissioned(x) | InMuseum(x)))", "all x.((Ship(x) & InvolvedInWWII(x)) -> (Decommissioned(x) | InMuseum(x)))", "all x y.((Ship(x) & InvolvedInWWII(x)) -> (Decommissioned(x) | InMuseum(x)))", "all x y.((Ship(x) & Ship(y) & InvolvedInWWII(x,y)) -> (Decommissioned(x,y) | InMuseum(x,y)))", "all x.((Ship(x) & InvolvedInWWII(x)) -> (Decommissioned(x) | Museum(x)))", "all x.((Ship(x) & ServedInWWII(x)) -> (Decommissioned(x) | InMuseum(x)))", "all x.((Ship(x) & InvolvedInWorldWar(x)) -> (Decommissioned(x) | InMuseum(x)))", "all x.(Ship(x) -> (InvolvesWar(x) & (Decommissioned(x) | Museum(x))))", "all x.((Ship(x) & InvolvedInWWII(x)) -> (CurrentlyDecommissioned(x) | InMuseum(x)))", "ALL X Y.((Ship(x) & InvolvedInWWII(x,y)) -> (Decommissioned(x) | InMuseum(x)))", "all x.((Shaped(x) & InvolvedInWWII(x)) -> (Decommissioned(x) | InMuseum(x)))", "all x y.((Ship(x) & InvolvedInWWII(x)) -> (Decommissioned(x) | Museum(y)))", "all x.(Ship(x) -> (InvolvesWWII(x) & (Decommissioned(x) | Museum(x))))", "all x.((Ship(x) & ServedInWWII(x)) -> (Decommissioned(x) | Museum(x)))", "(all x.(Warship(x) -> (Decommissioned(x) | Museum(x))))", "all x.((Ship(x) & InvolvedInWWII(x)) -> (Decommissioned(x) | InMuseum(x)))"]}
{"id": "folio_train_1877", "nl": "The USS Lyon is decommissioned.", "fol": "IsDecommissioned(Usslyon)", "prediction": ["all x.(USSLyon(x) -> Decommissioned(x))", "-Decommissioned(USSLyon)", "(Decommissioned(USS Lyon))", "The USS Lyon is decommissioned.", "all x.((USSLyon(x) & Decommissioned(x)) -> Ship(x))", "the USSLyonDecommissioned(USS)", "Decommissioned(USSLyon)", "All x.(USSLyon(x) -> Decommissioned(x))", "(Decommissioned(USS Lyon)", "(Decommissioned(USSLyon))", "Decommissioned USS Lyon.", "La USS Lyon est decommissioned.", "-Decommissioned(USS Lyon)", "the USSLyonDecommissioned(USS)", "The USS Lyon is decommissioned.", "(Decommissioned(USS Lyon)"]}
{"id": "folio_train_1878", "nl": "All disposable chopsticks are made from trees.", "fol": "all x.(IsDisposableChopsticks(x) -> IsMadeFromTrees(x))", "prediction": ["all x.(DiscoverableChopstick(x) -> MadeFromTrees(x))", "all x.(DiscoverableChipstick(x) -> MadeFromTrees(x))", "all x y.((DiscoverableChipshot(x) & Tree(y)) -> MadeFrom(x,y))", "all x.(DiscoverableChips(x) -> MadeFromTrees(x))", "all x.(DiscoverableChopstick(x) -> MadeFromTrees(x))", "(all x.(DiscoverableChopstick(x) -> MadeFromTrees(x)))", "all x.(DisposableChopstick(x) -> MadeFromTrees(x))", "all x y.((DiscoverableChopstick(x) & Tree(y)) -> MadeFrom(x,y))", "all x y.((DisposableChipshot(x) & Tree(y)) -> MadeFrom(x,y))", "all x.(DisposableChipshot(x) -> MadeFromTrees(x))", "all x.(DiscoverableChopstick(x) -> MadeFromTrees(x))", "all x y.((DiscoverableChipshot(x) & Tree(y)) -> MadeFrom(x,y))", "(all x.(DiscoverableChipshot(x) -> MadeFromTrees(x)))", "all x.(DisposableChopstick(x) -> MadeFromTrees(x))", "all x.(DiscoveryChopstick(x) -> MadeFromTrees(x))", "all x.(DisposableChopstick(x) -> MadeFromTrees(x))"]}
{"id": "folio_train_1879", "nl": "Some chopsticks are eco-friendly.", "fol": "exists x.IsEcoFriendly(x)", "prediction": ["exists x.(Chopstick(x) & EcoFriendly(x))", "exists x.(Chopstick(x) & EcoFriendly(x))", "exists x.(Chopstick(x) & EcoFriendly(x))", "exists x.(Chopstick(x) & EcoFriendly(x))", "exists x.(Chopstick(x) & EcoFriendly(x))", "exists x y.(Chopstick(x) & Chopper(y) & EcoFriendly(x))", "exists x.(Chopstick(x) & EcoFriendly(x))", "exists x.(Chopstick(x) & EcoFriendly(x))", "exists x.(Chopstick(x) & EcoFriendly(x))", "exists x.(Chopstick(x) & EcoFriendly(x))", "exists x.(Chopstick(x) & EcoFriendly(x))", "exists x.(Chipstick(x) & EcoFriendly(x))", "exists x.(Chopstick(x) & EcoFriendly(x))", "exists x.(Chopstick(x) & EcoFriendly(x))", "exists x.(Chopstick(x) & EcoFriendly(x))", "exists x.(Chopstick(x) & EcoFriendly(x))"]}
{"id": "folio_train_1880", "nl": "Either disposable chopsticks or reusable chopsticks. ", "fol": "all x.((IsDisposableChopsticks(x) & -IsReusableChopsticks(x)) | (-IsDisposableChopsticks(x) & IsReusableChopsticks(x)))", "prediction": ["all x.((DiscoverableChopstick(x) | ReusableChopstick(x)) -> (Disposable(x) | Reusable(x)))", "(DisposableChopsticks(x) | ReusableChopsticks(x))", "((DisposableChopsticks(x) | ReusableChopsticks(x)))", "((DisposableChips(x) | ReusableChips(x)))", "all x y.((DiscoverableChopstick(x) | ReusableChopstick(y)) -> (Disposable(x) | Reusable(y)))", "all x.(DiscoverableChopstick(x) | ReusableChopstick(x))", "all x.((DisposableChopstick(x) | ReusableChopstick(x)) -> (RemovableChopstick(x)))", "all x.((DiscoverableChopstick(x) | ReusableChopstick(x)) -> (RemovableChopstick(x)))", "(DisposableChips(c) | ReusableChips(c)))", "(Either DisposableChopsticks(c) | ReusableChopsticks(c))", "(DisposableChopsticks(c) | ReusableChopsticks(c))", "all x y.((DiscoverableChopstick(x) | ReusableChopstick(y)) -> (RemovableChopstick(x)))", "exists x.(DiscoverableChopstick(x) | ReusableChopstick(x))", "exists x.(DiscoyableChips(x) | ReusableChips(x))", "(Either DisposableChopsticks(e) | ReusableChopsticks(e))", "exists x.(DisposableChopstick(x) | ReusableChopstick(x))"]}
{"id": "folio_train_1881", "nl": "If chopsticks are made from metals, then they are not made from plastics. ", "fol": "all x.(IsMadeFromMetals(x) -> -IsMadeFromPlastics(x))", "prediction": ["all x.((Chopstick(x) & MadeFromMetals(x)) -> -MadeFromPlastics(x))", "all x y.((Chopstick(x) & Metal(y) & MadeFrom(x,y)) -> -MadeFrom(x,y))", "all x.((Chopstick(x) & MadeFromMetals(x)) -> -MadeFromPlastics(x))", "all x.((Chopstick(x) & MadeFromMetals(x)) -> -MadeFromPlastics(x))", "all x.(Chopstick(x) -> (MadeFromMetals(x) & -MadeFromPlastics(x)))", "all x.((Chopstick(x) & MadeFromMetal(x)) -> -MadeFromPlastics(x))", "all x y.((Chopstick(x) & Metal(y) & MadeFrom(x,y)) -> -MadeFrom(x,y))", "(all x.((Chopstick(x) & MadeFromMetals(x)) -> -MadeFromPlastics(x)))", "all x.((Chopstick(x) & MadeFromMetals(x)) -> -MadeFromPlastics(x))", "(all x.((Chopstick(x) & MadeFromMetal(x)) -> -MadeFromPlastics(x)))", "all x.((Chopstick(x) & MadeFromMetal(x)) -> -MadeFromPlastics(x))", "all x.((Cropstick(x) & Metal(x)) -> -Plastic(x))", "all x.(Chopstick(x) -> (MadeFromMetals(x) & -MadeFromPlastics(x)))", "(all x.((Chopstick(x) & MadeFromMetals(x)) -> -MadeFromPlastics(x)))", "all x.((Cropstick(x) & MadeFromMetals(x)) -> -MadeFromPlastics(x))", "all x.((Chopstick(x) & MadeFromMetal(x)) -> -MadeFromPolyester(x))"]}
{"id": "folio_train_1882", "nl": "All reusable chopsticks are made from metal.", "fol": "all x.(IsReusableChopsticks(x) -> IsMadeFromMetals(x))", "prediction": ["all x.(ReusableChopstick(x) -> MadeFromMetal(x))", "all x.((Chopstick(x) & Reusable(x)) -> MadeFromMetal(x))", "all x.(ReusableChopstick(x) -> MadeFromMetal(x))", "(MadeFromMetal(recyclableChopsticks) & MadeFromMetal(chopsticks))", "all x y.((ReusableChopstick(x) & Metal(y)) -> MadeFrom(x,y))", "(all x.(ReusableChopstick(x) -> MadeFromMetal(x)))", "all x.(Chopstick(x) -> MadeFromMetal(x))", "all x.(ReusableChopstick(x) -> MadeFromMetal(x))", "(all x.(ReusableChopstick(x) -> MadeFromMetal(x)))", "all x.((Chopstick(x) & Reusable(x)) -> MadeFromMetal(x))", "all x y.((ReusableChopstick(x) & Metal(y)) -> MadeFrom(x,y))", "all x.(ReusableChipstick(x) -> MadeFromMetal(x))", "all x.(ReusableChopstick(x) -> MadeFromMetal(x))", "all x y.((ReusableChopstick(x) & Metal(y)) -> MadeFrom(x,y))", "all x.(Chopstick(x) -> MadeFromMetal(x))", "all x.(RecyclableChopstick(x) -> MadeFromMetal(x))"]}
{"id": "folio_train_1883", "nl": "Chopsticks at restaurants are either made from metals and made from plastics, or neither made from metals nor made from plastics.", "fol": "-((IsMadeFromMetals(ChopsticksAtRestaurants) & -IsMadeFromPlastics(ChopsticksAtRestaurants)) | (-IsMadeFromMetals(ChopsticksAtRestaurants) & IsMadeFromPlastics(ChopsticksAtRestaurants)))", "prediction": ["all x.((Chopstick(x) & Restaurant(x)) -> (MadeFromMetals(x) & MadeFromPlastics(x)) | (-MadeFromMetals(x) & MadeFromPlastics(x))))", "all x.(Chopstick(x) -> ((MadeFromMetals(x) & MadeFromPlastics(x)) | (-MadeFromMetals(x) & MadeFromPlastics(x))))", "all x y.((Chopstick(x) & Restaurant(y)) -> (MadeFromMetals(x) & MadeFromPlastics(x)) | (-MadeFromMetals(y) & MadeFromPlastics(y))))", "(all x.(Chopstick(x) -> (MadeFromMetals(x) & MadeFromPlastics(x)) | (-MadeFromMetals(x) & MadeFromPlastics(x)) | (-MadeFromMetals(x) & MadeFromPlastics(x)))))", "all x y.((Chopstick(x) & Restaurant(y)) -> ((MadeFromMetals(x) & MadeFromPlastics(x)) | (-MadeFromMetals(y) & MadeFromPlastics(y))))", "all x y z.((Chopstick(x) & Restaurant(y) & Metal(z)) -> (MadeFrom(x,z) & MadeFrom(x,y) & -MadeFrom(x,z) & -MadeFrom(x,y)))", "(all x y.((Chopstick(x) & Restaurant(y)) -> (MadeFromMetals(x,y) & MadeFromPlastics(x,y)) | (-MadeFromMetals(x,y) & MadeFromPlastics(x,y))))", "exists x.(Chopstick(x) & Restaurant(x) & ((MadeFromMetals(x) & MadeFromPlastics(x)) | -MadeFromMetals(x) & MadeFromPlastics(x)) | -MadeFromMetals(x) & MadeFromPlastics(x)))", "all x.((Chopstick(x) & Restaurant(x)) -> (MadeFromMetals(x) & MadeFromPlastics(x)) | (-MadeFromMetals(x) & MadeFromPlastics(x))))", "(all x.(Chopstick(x) -> (MadeFromMetal(x) & MadeFromPlastics(x))) | (-MadeFromMetal(x) & MadeFromPlastics(x))))", "all x.(Chopstick(x) -> ((MadeFromMetals(x) & MadeFromPlastics(x)) | (-MadeFromMetals(x) & MadeFromPlastics(x))))", "(all x.(Chopstick(x) -> (MadeFromMetal(x) | MadeFromPlastics(x))) & -(MadeFromMetal(x) & MadeFromPlastics(x)) & -(MadeFromMetal(x) & MadeFromPlastics(x))))", "(all x.(Chopstick(x) -> MadeFromMetals(x) & MadeFromPlastics(x)) | (-MadeFromMetals(x) & MadeFromPlastics(x)) | (-MadeFromMetals(x) & MadeFromPlastics(x))))", "all x.(Chopstick(x) -> ((MadeFromMetals(x) & MadeFromPolyester(x)) | (-MadeFromMetals(x) & MadeFromPolyester(x)) | (-MadeFromMetals(x) & MadeFromPlastics(x))))", "all x y.((Chopstick(x) & Restaurant(y)) -> (MadeFromMetals(x) & MadeFromPlastics(x)) | (-MadeFromMetals(y) & MadeFromPlastics(y))))", "all x.(Chopstick(x) -> ((MadeFromMetals(x) & MadeFromPlastics(x)) | (-MadeFromMetals(x) & MadeFromPlastics(x)) | (-MadeFromMetals(x) & MadeFromPlastics(x))))"]}
{"id": "folio_train_1884", "nl": "Chopsticks at restaurants are eco-friendly.", "fol": "IsEcoFriendly(ChopsticksAtRestaurants)", "prediction": ["all x.((Chopstick(x) & Restaurant(x)) -> EcoFriendly(x))", "all x y.((Chopstick(x) & Restaurant(y)) -> EcoFriendly(x,y))", "all x.((Chopstick(x) & Restaurant(x)) -> EcoFriendly(x))", "(EcoFriendlyChopsticksAtRestaurants(chopsticks)", "all x.((Chopstick(x) & Restaurant(x)) -> EcoFriendly(x))", "all x y.((Chopstick(x) & Restaurant(y)) -> EcoFriendly(x,y))", "all x.((Chopstick(x) & Restaurant(x)) -> EcoFriendly(x))", "all x y.((Chopstick(x) & Restaurant(y)) -> EcoFriendly(x,y))", "(EcoFriendlyChopsticks(Restaurants)", "all x y.((Chopstick(x) & Restaurant(y)) -> EcoFriendly(x,y))", "all x.((Chopstick(x) & Restaurant(x)) -> EcoFriendly(x))", "all x.((Chopstick(x) & Restaurant(x)) -> EcoFriendly(x))", "all x y.((Chopstick(x) & Restaurant(y)) -> EcoFriendly(x,y))", "all x.((Chopstick(x) & Restaurant(x)) -> EcoFriendly(x))", "all x.((Potstick(x) & Restaurant(y)) -> EcoFriendly(x,y))", "all x.((Chopstick(x) & Restaurant(x)) -> EcoFriendly(x))"]}
{"id": "folio_train_1885", "nl": "Chopsticks at restaurants are eco-friendly or made from trees.", "fol": "(IsEcoFriendly(ChopsticksAtRestaurants) | IsMadeFromTrees(ChopsticksAtRestaurants))", "prediction": ["all x.((Chopstick(x) & Restaurant(x)) -> (EcoFriendly(x) | MadeFromTrees(x)))", "all x y.((Chopstick(x) & Restaurant(y)) -> (EcoFriendly(x) | MadeFromTrees(x)))", "all x.((Chopstick(x) & Restaurant(x)) -> (EcoFriendly(x) | MadeFromTrees(x)))", "all x.((Chopstick(x) & Restaurant(x)) -> (EcoFriendly(x) | MadeFromTrees(x)))", "(EcoFriendly(chopstick) | MadeFromTrees(chopstick,restaurant))", "all x y.((Chopstick(x) & Restaurant(y)) -> (EcoFriendly(x) | MadeFromTrees(x)))", "(all x.(Chopstick(x) -> (EcoFriendly(x) | MadeFromTrees(x))))", "all x y z.((Chopstick(x) & Restaurant(y) & Restaurant(z)) -> (EcoFriendly(x,y,z) | MadeFromTrees(x,y)))", "all x.(Chopstick(x) -> (EcoFriendly(x) | MadeFromTrees(x)))", "all x y.((Chopstick(x) & Restaurant(y)) -> (EcoFriendly(x) | MadeFromTrees(x)))", "all x.((Chopstick(x) & Restaurant(x)) -> (EcoFriendly(x) | MadeFromTrees(x)))", "all x.((Chopstick(x) & Restaurant(x)) -> (EcoFriendly(x) | MadeFromTrees(x)))", "all x y.((Chopstick(x) & Restaurant(y)) -> (EcoFriendly(x) | MadeFromTrees(x)))", "all x y.((Chopstick(x) & Restaurant(y)) -> (EcoFriendly(x,y) | MadeFromTrees(x,y)))", "exists x.(Chopstick(x) & (EcoFriendly(x) | MadeFromTrees(x)))", "all x.((Chopstick(x) & Restaurant(x)) -> (EcoFriendly(x) | MadeFromTrees(x)))"]}
{"id": "folio_train_1886", "nl": "If Chopsticks at restaurants are made from plastics or made from trees, then Chopsticks at restaurants are made from plastics and are eco-friendly.", "fol": "((IsMadeFromPlastics(ChopsticksAtRestaurants) | IsMadeFromTrees(ChopsticksAtRestaurants)) -> (IsMadeFromPlastics(ChopsticksAtRestaurants) & IsEcoFriendly(ChopsticksAtRestaurants)))", "prediction": ["all x.((Chopsticks(x) & (MadeFromPlastics(x) | MadeFromTrees(x))) -> (MadeFromPlastics(x) & EcoFriendly(x)))", "all x.((Chopsticks(x) & (MadeFromPlastics(x) | MadeFromTrees(x))) -> (MadeFromPlastics(x) & EcoFriendly(x)))", "all x.((ChopsticksAtRestaurants(x) & (MadeFromPlastics(x) | MadeFromTrees(x))) -> (MadeFromPlastics(x) & EcoFriendly(x)))", "all x y.((Chopstick(x) & Restaurant(y) & (MadeFromPlastics(x) | MadeFromTrees(x))) -> (MadeFromPlastics(x) & EcoFriendly(x)))", "all x y.((Chopstick(x) & Restaurant(y) & (MadeFromPlastics(x,y) | MadeFromTrees(x,y))) -> (MadeFromPlastics(x,y) & EcoFriendly(x,y)))", "all x.((Chopstick(x) & (MadeFromPlastics(x) | MadeFromTrees(x))) -> (MadeFromPlastics(x) & EcoFriendly(x)))", "(all x.((ChopsticksAtRestaurants(x) & (MadeFromPlastics(x) | MadeFromTrees(x))) -> EcoFriendly(x))", "all x y.((Chopstick(x) & Restaurant(y) & (MadeFromPlastics(x,y) | MadeFromTrees(x,y))) -> (MadeFromPlastics(x,y) & EcoFriendly(x,y)))", "all x.((Chopsticks(x) & (MadeFromPlastics(x) | MadeFromTrees(x))) -> (MadeFromPlastics(x) & EcoFriendly(x)))", "all x y.((Chopstick(x) & Restaurant(y) & (MadeFrom(x,plastics) | MadeFrom(x,trees))) -> (MadeFrom(x,plastics) & EcoFriendly(x)))", "all x.((Chopstick(x) & (MadeFromPlastics(x) | MadeFromTrees(x))) -> (MadeFromPlastics(x) & EcoFriendly(x)))", "all x.((ChopsticksAtRestaurants(x) & (MadeFromPlastics(x) | MadeFromTrees(x))) -> (MadeFromPlastics(x) & EcoFriendly(x)))", "(all x.((ChopsticksAtRestaurants(x) & (MadeFromPlastics(x) | MadeFromTrees(x))) -> EcoFriendly(x))", "all x.((ChopsticksAtRestaurants(x) & (MadeFromPlastics(x) | MadeFromTrees(x))) -> (MadeFromPlastics(x) & EcoFriendly(x)))", "(all x.((Chopstick(x) & (MadeFromPlastics(x) | MadeFromTrees(x))) -> EcoFriendly(x))", "all x y.((Chopstick(x) & Restaurant(y) & (MadeFrom(x,plastics) | MadeFrom(x,trees))) -> (MadeFrom(x,plastics) & EcoFriendly(x)))"]}
{"id": "folio_train_1887", "nl": "Anything that is lazy is unproductive.", "fol": "all x.(IsLazy(x) -> IsUnproductive(x))", "prediction": ["all x.((Lazy(x) & Unproductive(x)) -> Lazy(x))", "all x.(Lazy(x) -> Unproductive(x))", "all x.((Lazy(x) & Lazy(x)) -> Unproductive(x))", "all x.((Lazy(x) & -Productive(x)) -> Unproductive(x))", "all x.(Lazy(x) -> Unproductive(x))", "all x y.((Lazy(x) & Lazy(y)) -> Unproductive(x))", "all x.((Lazy(x)) -> Unproductive(x))", "all x.(Lazy(x) -> Unproductive(x))", "all x y.((Lazy(x) & Lazy(y)) -> Unproductive(x))", "all x.((Lazy(x) & Unproductive(x)) -> Lazy(x))", "all x.((Lazy(x)) -> Unproductive(x))", "all x.(Lazy(x) -> Unproductive(x))", "all x.((Lazy(x) & Lazy(x)) -> Unproductive(x))", "all x.(Lazy(x) -> Unproductive(x))", "ALL X.((Lazy(x)) -> Unproductive(x))", "all x.(Lappy(x) -> Unproductive(x))"]}
{"id": "folio_train_1888", "nl": "No one unproductive is an energetic person.", "fol": "all x.(IsUnproductive(x) -> -IsEnergetic(x))", "prediction": ["-exists x.(Unproductive(x) & EnergeticPerson(x))", "all x.(Unproductive(x) -> EnergeticPerson(x))", "all x.((Unproductive(x) & EnergeticPerson(x)) -> -(Unproductive(x) & EnergeticPerson(x)))", "all x.(UnproductivePerson(x) -> EnergeticPerson(x))", "-exists x.(Unproductive(x) & EnergeticPerson(x))", "-all x.(Unproductive(x) -> EnergeticPerson(x))", "-exists x.(UnproductivePerson(x) & EnergeticPerson(x))", "-exists x.(Unproductive(x) & EnergyfulPerson(x))", "-all x.(UnproductivePerson(x) -> EnergeticPerson(x))", "all x.((Unproductive(x) & EnergeticPerson(x)) -> -(Unproductive(x) & Energetic(x)))", "all x.(UnproductivePerson(x) -> EnergeticPerson(x))", "-all x.(Unproductive(x) -> EnergeticPerson(x))", "-exists x.(UnproductivePerson(x) & EnergeticPerson(x))", "all x.(UnproductivePerson(x) -> EnergisticPerson(x))", "-exists x.(Unproductive(x) & Energetic(x))", "all x.(UnproductivePerson(x) -> Energyful(x))"]}
{"id": "folio_train_1889", "nl": "If something is a sloth, then it is lazy.", "fol": "all x.(IsSloth(x) -> IsLazy(x))", "prediction": ["all x.(Sloth(x) -> Lazy(x))", "all x.((Sloth(x) & Lazy(x)) -> Sloth(x))", "all x.(Sloth(x) -> Lazy(x))", "all x.((Sloth(x) & Lazy(x)) -> Sloth(x))", "all x y.((Sloth(x) & Sloth(y)) -> Lazy(x))", "all x.(Sloth(x) -> Lazy(x))", "all x.((Sloth(x) & Lazy(x)) -> Lazy(x))", "all x.(Sloth(x) -> Lazy(x))", "all x.((Sloth(x) & Lazy(x)) -> Sloth(x))", "all x.((Sloth(x)) -> Lazy(x))", "all x.((Sloth(x) & Lazy(x)) -> Lazy(x))", "all x.(Sloth(x) -> Lazy(x))", "all x.(Sloth(x) -> Lazy(x))", "exists x.(Sloth(x) & Lazy(x))", "exists x.(Sloth(x) & Lazy(x))", "exists x.(Sloth(x) & Lazy(x))"]}
{"id": "folio_train_1890", "nl": "Some animals are sloths.", "fol": "exists x.(IsAnimal(x) & IsSloth(x))", "prediction": ["exists x.(Animal(x) & Sloth(x))", "exists x.(Animal(x) & Sloth(x))", "exists x.(Animal(x) & Sloth(x))", "exists x.(Animal(x) & Sloth(x))", "exists x.(Animal(x) & Sloth(x))", "exists x y.(Animal(x) & Sloth(y))", "exists x.(Animal(x) & Sloth(x))", "exists x.(Animal(x) & Sloth(x))", "exists x.(Animal(x) & Sloth(x))", "exists x.(Animal(x) & Sloth(x))", "exists x.(Animal(x) & Sloth(x))", "exists x.(Animal(x) & Sloth(x))", "exists x.(Animal(x) & Sloth(x))", "exists x.(Animal(x) & Sloth(x))", "exists x.(Animal(x) & Sloth(x))", "exists x.(Animal(x) & Sloth(x))"]}
{"id": "folio_train_1891", "nl": "Sid is not either an energetic person or a sloth.", "fol": "(-IsEnergetic(Sid) | IsSloth(Sid))", "prediction": ["(-(Sid(Sid) & EnergeticPerson(Sid)) | Sloth(Sid)))", "all x.(Sid(x) -> (-EnergeticPerson(x) | Sloth(x)))", "(-(EnergyPerson(Sid) | Sloth(Sid)))", "Sid -(EnergyPerson(Sid) | Sloth(Sid))", "(-EnergyPerson(Sid) & -Sloth(Sid))", "-(Sid(s) & EnergeticPerson(s) & Sloth(s))", "all x.(Sid(x) -> (-EnergyPerson(x) | Sloth(x)))", "Sid is not either an energeticperson or a sloth.", "Sid -(EnergeticPerson(Sid) | Sloth(Sid))", "(-(Sid(Sid) & EnergeticPerson(Sid)) | Sloth(Sid)))", "all x.(Sid(x) -> (-EnergeticPerson(x) | Sloth(x)))", "-(Sid(Sid) & -EnergeticPerson(Sid) & -Sloth(Sid))", "-(EnergisticPerson(Sid) | Sloth(Sid))", "(-EnergisticPerson(Sid) & -Sloth(Sid))", "all x.(Sid(x) -> (-EnergyPerson(x) & -Sloth(x)))", "all x.(Sid(x) -> (-EnergisticPerson(x) | Sloth(x)))"]}
{"id": "folio_train_1892", "nl": "Sid is an animal.", "fol": "IsAnimal(Sid)", "prediction": ["(Animal(Sid) & Animal(Sid))", "all x.(Sid(x) -> Animal(x))", "Sid is Animal(Sid)", "Sid is an animal.", "(Animal(Sid) & Animal(Sid))", "all x.(Sid(x) -> Animal(x))", "(Animal(Sid) & LivesIn(Sid,Sid))", "Sid is Animal(s)", "(Animal(Sid) & Animal(Sid))", "all x.(Sid(x) -> Animal(x))", "Sid is an animal.", "All x.(Sid(x) -> Animal(x))", "Sid is Animal(s)", "all x.(Sid(x) -> Animal(x))", "All x.(Sid(x) -> Animal(x))", "all x.(Sid(x) -> Animal(x))"]}
{"id": "folio_train_1893", "nl": "Sid is an energetic person and an animal.", "fol": "(IsEnergetic(Sid) & IsAnimal(Sid))", "prediction": ["(EnergeticPerson(Sid) & Animal(Sid))", "all x.(Sid(x) -> (EnergeticPerson(x) & Animal(x)))", "(EnergisticPerson(Sid) & Animal(Sid))", "Sid is an energeticPersonAndAnimal(Sid)", "Sid is a energeticPersonAndAnimal(Sid)", "Sid (EnergeticPerson(Sid) & Animal(Sid))", "Sid (EnergisticPerson(Sid) & Animal(Sid))", "Sid is energetic(x) & Animal(x))", "all x.(Sid(x) -> (EnergeticPerson(x) & Animal(x)))", "(EnergeticPerson(Sid) & Animal(Sid))", "all x.(Sid(x) -> (EnergisticPerson(x) & Animal(x)))", "(EnergisticPerson(Sid) & Animal(Sid))", "Sid is an energeticPersonAndAnimal(Sid)", "(EnergeticPerson(Sid) & Animal(Sid))", "all x.(Sid(x) -> (EnergeticPerson(x) & Animal(x)))", "All x.(Sid(x) -> (EnergyPerson(x) & Animal(x)))"]}
{"id": "folio_train_1894", "nl": "If Sid is either an animal or unproductive, then Sid is not an energetic person.", "fol": "((IsAnimal(Sid) | IsUnproductive(Sid)) -> -IsEnergetic(Sid))", "prediction": ["all x.((Animal(x) | Unproductive(x)) -> -EnergeticPerson(x))", "all x.((Sid(x) & (Animal(x) | Unproductive(x))) -> -EnergeticPerson(x))", "((Animal(Sid) | Unproductive(Sid))) -> -EnergeticPerson(Sid))", "all x.((Animal(x) | Unproductive(x)) -> -EnergisticPerson(x))", "all x.((Sid(x) & (Animal(x) | Unproductive(x))) -> -EnergeticPerson(x))", "-EnergisticPerson(-Sid))", "(all x.((Animal(x) | Unproductive(x))) -> -EnergeticPerson(x))", "((Animal(Sid) | Unproductive(Sid))) -> -EnergisticPerson(Sid))", "all x.((Sid(x) & (Animal(x) | Unproductive(x))) -> -EnergisticPerson(x))", "all x.((Animal(x) | Unproductive(x)) -> -EnergeticPerson(x))", "(all x.((Animal(x) | Unproductive(x))) -> -EnergisticPerson(x))", "all x.((Animal(x) | Unproductive(x)) -> -EnergisticPerson(x))", "all x.((Sid(x) & (Animal(x) | Unproductive(x))) -> -EnergisticPerson(x))", "all x.((Animal(x) | Unproductive(x)) -> -EnergisticPerson(x))", "all x.((Sid(x) & (Animal(x) | Unproductive(x))) -> -EnergeticPerson(x))", "all x.((Animal(x) | Unproductive(x)) -> -EnergeticPerson(x))"]}
{"id": "folio_train_1895", "nl": "European soccer clubs can attend UCL, UEL and UECL.", "fol": "all x.(((IsEuropean(x) & IsSoccerClub(x)) -> EligibleToAttend(x,UEFAChampionsLeague)) | EligibleToAttend(x,UEFALeague) | EligibleToAttend(x,UEFACup))", "prediction": ["all x.((EuropeanSoccerClub(x) & (UCL(x) | UEL(x) | UECL(x))) -> CanAttend(x,UCL))", "all x.(EuropeanSoccerClub(x) -> (AttendsUCL(x) | AttendsUEL(x) | AttendsUECL(x)))", "all x y.((EuropeanSoccerClub(x) & (UCL(y) | UEL(y) | UECL(y))) -> CanAttend(x,y))", "all x.((EuropeanSoccerClub(x) & Attends(x,UCL) & Attends(x,UEL) & Attends(x,UECL)) -> CanAttend(x,UCL))", "(EuropeanSoccerClub(s) & (AttendsUCL(s) | AttendsUEL(s) | AttendsUECL(s)))", "all x.((EuropaSoccerClub(x) & (UCL(x) | UEL(x) | UECL(x))) -> CanAttend(x,UCL,UEL))", "(EuropeanSoccerClub(s) & (Attends(s) | Attends(s)) | Attends(s) | Attends(s) | Attends(s)))", "all x y z.((EuropeanSoccerClub(x) & (UCL(y) | UEL(y) | UECL(y))) -> CanAttend(x,y,z))", "(all x.((EuropeanSoccerClub(x) & Attends(x,UCL) & Attends(x,UEL) & Attends(x,UECL)) -> CanAttend(x,UCL))", "(All x.(EuropeanSoccerClub(x) -> (Attends(x,UCL) | Attends(x,UEL) | Attends(x,UECL)))", "all x y.((EuropeanSoccerClub(x) & (UCL(y) | UEL(y) | UECL(y))) -> CanAttend(x,y))", "all x.(EuropeanSoccerClub(x) -> (AttendsUCL(x) | AttendsUEL(x) | AttendsUECL(x)))", "all x.((EuropeanSoccerClub(x) & (UCL(x) | UEL(x) | UECL(x))) -> CanAttend(x,UCL))", "all x y.((EuropeanSoccerClub(x) & (UCL(y) | UEL(y) | UECL(y))) -> CanAttend(x,y))", "(All x.(EuropeanSoccerClub(x) -> Attends(x,UCL,UEL,UECL))", "all x.(EuropeanSoccerClub(x) -> (AttendsUCL(x) | AttendsUECL(x)))"]}
{"id": "folio_train_1896", "nl": "A soccer club eligible to attend UCL has a higher ranking than a soccer club eligible to attend UEL.", "fol": "all x y.((IsSoccerClub(x) & IsSoccerClub(y) & EligibleToAttend(x,UEFAChampionsLeague) & EligibleToAttend(y,UEFALeague)) -> HasHigherRankingThan(x,y))", "prediction": ["all x y.((SoccerClub(x) & SoccerClub(y) & EligibleToAttendUCL(x) & EligibleToAttendUEL(y)) -> HigherRanking(x,y))", "all x.((SoccerClub(x) & EligibleToAttendUCL(x)) -> HigherRanking(x))", "(HigherRanking(soccerclub) & EligibleToAttendUCL(soccerclub) & EligibleToAttendUEL(soccerclub))", "all x y.((SoccerClub(x) & SoccerClub(y) & EligibleToAttendUCL(x)) -> HigherRanking(x,y))", "exists x.(SoccerClub(x) & EligibleToAttendUCL(x) & HigherRanking(x))", "all x y z.((SoccerClub(x) & SoccerClub(y) & UCL(z) & EligibleToAttend(x,z)) -> HigherRanking(x,y,z))", "(HigherRanking(SoccerClub,UCL) & HigherRanking(SoccerClub,UEL))", "all x.((SoccerClub(x) & EligibleToAttendUCL(x)) -> HigherRanking(x))", "all x y.((SoccerClub(x) & SoccerClub(y) & EligibleToAttendUCL(x) & EligibleToAttendUEL(y)) -> HigherRanking(x,y))", "exists x.(SoccerClub(x) & EligibleToAttendUCL(x) & HigherRanking(x))", "all x.((SoccerClub(x) & EligibleToAttendUCL(x)) -> HigherRankingThan(x,SoccerClub(x))", "all x y.((SoccerClub(x) & SoccerClub(y) & EligibleToAttendUCL(x)) -> HigherRanking(x,y))", "all x y.((SoccerClub(x) & SoccerClub(y) & EligibleForAttendsUCL(x)) -> HigherRanking(x,y))", "all x y.((SoccerClub(x) & SoccerClub(y) & EligibleForUCL(x) & EligibleForUEL(y)) -> HigherRanking(x,y))", "all x y.((SoccerClub(x) & SoccerClub(y) & EligibleToAttendUCL(x,UCL)) -> HigherRanking(x,y))", "all x y.((SoccerClub(x) & SoccerClub(y) & EligibleToAttend(x,UCL)) -> HigherRanking(x,UEL))"]}
{"id": "folio_train_1897", "nl": "A soccer club eligible to attend UEL has a higher ranking than a soccer club eligible to attend UECL.", "fol": "all x y.((IsSoccerClub(x) & IsSoccerClub(y) & EligibleToAttend(x,UEFALeague) & EligibleToAttend(y,UEFACup)) -> HasHigherRankingThan(x,y))", "prediction": ["all x y.((SoccerClub(x) & SoccerClub(y) & EligibleToAttendUEL(x) & EligibleToAttendUECL(y)) -> HigherRanking(x,y))", "all x.((SoccerClub(x) & EligibleToAttendUEL(x)) -> HigherRanking(x))", "(HigherRanking(soccerclub) & EligibleToAttendUEL(soccerclub) & EligibleToAttendUECL(soccerclub))", "all x y.((SoccerClub(x) & SoccerClub(y) & EligibleToAttendUEL(x)) -> HigherRanking(x,y))", "all x y z.((SoccerClub(x) & SoccerClub(y) & SoccerClub(z) & EligibleToAttendUEL(x) & EligibleToAttendUECL(y,z)) -> HigherRanking(x,y,z))", "exists x.(SoccerClub(x) & EligibleToAttendUEL(x) & HigherRanking(x))", "all x y.((SoccerClub(x) & SoccerClub(y) & EligibleForUEL(x) & EligibleForUECL(y)) -> HigherRanking(x,y))", "all x.((SoccerClub(x) & EligibleToAttendUEL(x)) -> HigherRanking(x))", "all x y.((SoccerClub(x) & SoccerClub(y) & EligibleToAttendUEL(x) & EligibleToAttendUECL(y)) -> HigherRanking(x,y))", "exists x.(SoccerClub(x) & EligibleToAttendUEL(x) & HigherRanking(x))", "all x.((SoccerClub(x) & EligibleToAttendUEL(x)) -> HigherRankingThan(x,UECL))", "exists x.(SoccerClub(x) & EligibleToAttendUEL(x) & HigherRanking(x))", "all x y.((SoccerClub(x) & EligibleToAttendUEL(x) & SoccerClub(y) & EligibleToAttendUECL(y)) -> HigherRanking(x,y))", "all x y.((SoccerClub(x) & SoccerClub(y) & EligibleToAttendUEL(x)) -> HigherRanking(x,y))", "all x y.((SoccerClub(x) & SoccerClub(y) & EligibleForUEL(x)) -> HigherRanking(x,y))", "all x y.((SoccerClub(x) & SoccerClub(y) & EligibleToAttendUEL(x,UEL)) -> HigherRanking(x,y))"]}
{"id": "folio_train_1898", "nl": "Manchester United and Machester City are both European soccer clubs.", "fol": "(IsEuropean(ManchesterUnited) & IsSoccerClub(ManchesterUnited) & IsEuropean(Manchestercity) & IsSoccerClub(Manchestercity))", "prediction": ["(EuropeanSoccerClub(ManchesterUnited) & EuropeanSoccerClub(MachesterCity))", "all x.((ManchesterUnited(x) & MachesterCity(x)) -> EuropeanSoccerClub(x))", "((ManchesterUnited(Manchester) & MachesterCity(Manchester)) -> EuropeanSoccerClub(ManchesterUnited,Machester))", "all x y.((ManchesterUnited(x) & MachesterCity(y)) -> (EuropeanSoccerClub(x) & EuropeanSoccerClub(y)))", "((ManchesterUnderwood(Manchester) & MachesterCity(Machester)) -> EuropeanSoccerClub(ManchesterUnderwood(Manchester) & MachesterUnderwood(Machester))", "(EuropeanSoccerClub(ManchesterUnderground) & EuropeanSoccerClub(MachesterCity))", "all x.((ManchesterUnited(x) & MachesterCity(x)) -> EuropeanSoccerClub(x))", "both EuropeanSoccerClubs (ManchesterUnited(Manchester) & MachesterCity(Manchester))", "(EuropeanSoccerClubs(ManchesterUnited) & EuropeanSoccerClub(MachesterCity))", "(EuropeanSoccerClub(ManchesterUnderground(Manchester) & EuropeanSoccerClub(MachesterCity))", "((ManchesterUnited(Manchester) & MachesterCity(Manchester)) -> EuropeanSoccerClub(ManchesterUnited,Machester))", "(EuropeanSoccerClub(ManchesterUnited) & EuropeanSoccerClub(MachesterCity))", "all x.((ManchesterUnited(x) | MachesterCity(x)) -> EuropeanSoccerClub(x))", "all x.((ManchesterUnderground(x) & MachesterCity(x)) -> EuropeanSoccerClub(x))", "both EuropeanSoccerClubs (ManchesterUnited(Manchester) & MachesterCity(Manchester))", "(EuropeanSoccerClub(ManchesterUnderwood) & EuropeanSoccerClub(MachesterCity))"]}
{"id": "folio_train_1899", "nl": "Manchester United is eligible to attend UEL next season.", "fol": "EligibleToAttend(ManchesterUnited,UEFALeague)", "prediction": ["all x.((ManchesterUnited(x) & EligibleForAttendance(x,UEL)) -> EligibleForAttendance(x,UEL))", "(EligibleToAttendUELNextSeason(ManchesterUnited))", "all x.(ManchesterUnderground(x) -> EligibleToAttendUELNextSeason(x))", "all x y.((ManchesterUnited(x) & UnitedEligible(y)) -> AttendsNextSeason(x,y))", "all x.((ManchesterUnited(x) & EligibleToAttendUELNextSeason(x)) -> EligibleToAttendUELNextSeason(x))", "all x.((Manchester United(x) & EligibleForAttendance(x,UEL)) -> EligibleForAttendance(x,UEL))", "all x.((ManchesterUnderwood(x) & EligibleForAttendance(x,UEL)) -> EligibleForAttendance(x,UEL))", "(EligibleToAttend(ManchesterUnderground,2019))", "all x y.((Manchester United(x) & UnitedEligible(y)) -> AttendsNextSeason(x,y))", "all x.(ManchesterUnited(x) -> EligibleToAttendUELNextSeason(x))", "ALL X Y.((Manchester United(x) & UEL(y)) -> EligibleToAttend(x,y))", "all x.((ManchesterUnderground(x) & EligibleForUELNextSeason(x)) -> Attends(x,y))", "All x.(MadridUnited(x) -> EligibleToAttendUELNextSeason(x))", "all x y.((ManchesterUnderground(x) & UEL(y)) -> EligibleToAttend(x,y))", "All x.(ManchesterUnderground(x) -> EligibleToAttendUELNextSeason(x))", "All x.(ManchesterUnited(x) -> EligibleForAttendance(x,UEL))"]}
{"id": "folio_train_1900", "nl": "Manchester City is eligible to attend UCL next season.", "fol": "EligibleToAttend(Manchestercity,UEFAChampionsLeague)", "prediction": ["all x.((ManchesterCity(x) & EligibleForAttendance(x,UCL)) -> EligibleForAttendance(x,UCL))", "all x y.((ManchesterCity(x) & UCL(y)) -> EligibleToAttend(x,y))", "all x.((ManchesterCity(x) & EligibleToAttend(x,UCL)) -> EligibleToAttend(x,UCL))", "(EligibleToAttend(ManchesterCity,2019))", "(EligibleToAttendUCLNextSeason(ManchesterCity))", "All x.(ManchesterCity(x) -> EligibleToAttendUCLNextSeason(x))", "all x.((ManchesterCity(x) & EligibleToAttendUCLNextSeason(x)) -> EligibleToAttendUCLNextSeason(x))", "all x.((ManchesterCity(x) & EligibleForUCLNextSeason(x)) -> Attends(x,y))", "all x y.((ManchesterCity(x) & UCL(y)) -> EligibleToAttend(x,y))", "(EligibleToAttendUCLNextSeason(ManchesterCity)", "all x.((ManchesterCity(x) & EligibleForUCLNextSeason(x)) -> EligibleForUCLNextSeason(x))", "all x.((ManchesterCity(x) & AttendsUCLNextSeason(x)) -> Eligible(x))", "All x.(ManchesterCity(x) -> EligibleToAttend(x,UCL))", "all x y.((ManchesterCity(x) & UCL(y)) -> EligibleForSeason(x,y))", "ALL X Y.((ManchesterCity(x) & UCL(y)) -> EligibleToAttendNextSeason(x,y))", "All x.(ManchesterCity(x) -> EligibleToAttendUCLNextSeason(x))"]}
{"id": "folio_train_1901", "nl": "Manchester City has a higher ranking than Manchester United.", "fol": "HasHigherRankingThan(Manchestercity,ManchesterUnited)", "prediction": ["all x y.((ManchesterCity(x) & ManchesterUnited(y)) -> HigherRanking(x,y))", "all x.((ManchesterCity(x) & ManchesterUnited(x)) -> HigherRanking(x,y))", "all x y.((ManchesterCity(x) & ManchesterUnited(y)) -> HigherRanking(x,y))", "(HigherRanking(ManchesterCity) & HigherRanking(ManchesterUndersigned))", "exists x.(ManchesterCity(x) & ManchesterUnited(x))", "all x.((ManchesterCity(x) & ManchesterUndersigned(x)) -> HigherRanking(x,y))", "(HigherRanking(ManchesterCity,ManchesterUndersigned))", "all x y.((ManchesterCity(x) & ManchesterUnited(y)) -> HigherRanking(x,y))", "(HigherRanking(ManchesterCity,ManchesterUnder) & HigherRanking(ManchesterUnder(ManchesterUnder))", "exists x.(ManchesterCity(x) & ManchesterUnited(x))", "(HigherRanking(ManchesterCity) & HigherRanking(ManchesterUndersigned))", "all x y.((ManchesterCity(x) & ManchesterUndersigned(y)) -> HigherRanking(x,y))", "exists x.(ManchesterCity(x) & ManchesterUndersigned(x))", "all x y.((ManchesterCity(x) & ManchesterUnited(y)) -> HigherRanking(x,y))", "all x y.((ManchesterCity(x) & ManchesterUndersigned(y)) -> HigherRanking(x,y))", "all x y.((ManchesterCity(x) & ManchesterUnited(y)) -> HigherRanking(x,y))"]}
{"id": "folio_train_1902", "nl": "If a person coach a football club, the person is a football coach.", "fol": "all x y.((Coaches(x,y) & IsFootballClub(y)) -> IsFootballCoach(x))", "prediction": ["all x y.((Person(x) & FootballClub(y) & Coaches(x,y)) -> FootballCoach(x))", "all x.((Person(x) & CoachesFootballClub(x)) -> FootballCoach(x))", "all x.(Coaches(x,y) -> FootballCoach(y))", "all x.(CoachesFootballClub(x) -> FootballCoach(x))", "all x y.((Person(x) & FootballClub(y) & Coaches(x,y)) -> FootballCoach(x))", "all x y z.((Person(x) & FootballClub(y) & Coaches(x,y)) -> FootballCoach(x,z))", "all x y z.((Person(x) & FootballClub(y) & Coaches(x,y) & FootballClub(z)) -> FootballCoach(x))", "all x y.((Person(x) & FootballClub(y) & Coaches(x,y)) -> FootballCoach(x))", "all x.((Person(x) & CoachesFootballClub(x)) -> FootballCoach(x))", "all x.(CoachesFootballClub(x) -> FootballCoach(x))", "exists x.(Person(x) & Coaches(x,footballClub) & FootballCoach(x))", "all x y.((Person(x) & FootballClub(y) & Coaches(x,y)) -> FootballCoach(x))", "all x.(CoachesFootballClub(x) -> FootballCoach(x))", "all x y.((Person(x) & FootballClub(y) & Coaches(x,y)) -> FootballCoach(x))", "all x y.((Person(x) & FootballClub(y) & Coaches(x,y)) -> FootballCoach(x))", "all x y.((Person(x) & FootballClub(y) & Coaches(x,y)) -> FootballCoach(x,y))"]}
{"id": "folio_train_1903", "nl": "If a person has a position in a club for a position in a year, and the club is in NFL in the same year, the person plays in NFL.", "fol": "all z.((PlaysFor(x,y) & NFLTeamInYear(y,z) & IsInTeam(x,z)) -> PlaysInNFL(x))", "prediction": ["all x y z.((Person(x) & Club(y) & Position(z) & InYear(y,z) & InYear(z,y)) -> PlaysInNFL(x))", "all x y.((Person(x) & Club(y) & PositionInYear(x,y) & PositionInYear(y,x)) -> PlaysInNFL(x))", "all x y z.((Person(x) & Club(y) & Position(z) & PositionInYear(z) & InYear(y,z) & InYear(z,y)) -> PlaysInNFL(x))", "all x.((Person(x) & PositionInClub(x) & PositionInYear(x) & NFL(y)) -> PlaysInNFL(x))", "all x y.((Person(x) & Club(y) & PositionInYear(x,y) & PositionInYear(y) & InNBA(y,x)) -> PlaysInNFL(x))", "(all x y.((Person(x) & PositionInClub(x,y) & PositionInYear(y)) -> PlaysInNFL(x,y)))", "all x y.((Person(x) & PositionInClub(x,y) & PositionInYear(y) & InNFC(x,y)) -> PlaysInNFL(x))", "all x y z.((Person(x) & Club(y) & PositionInYear(z) & HasPositionInYear(x,z) & PositionInYear(y,z) & InNBAY(y,z)) -> PlaysInNFL(x))", "all x.((Person(x) & PositionInClub(x) & PositionInYear(x) & NFLInYear(x)) -> PlaysInNFL(x))", "all x y.((Person(x) & Club(y) & HasPositionIn(x,y) & PositionInYear(y) & InNFCastYear(y)) -> PlaysInNFL(x))", "all x y z.((Person(x) & PositionInClub(x,y) & PositionInYear(z) & InNBA(x,z)) -> PlaysInNFL(x))", "all x.((Person(x) & HasPositionInClub(x) & PositionInYear(x) & NFLInYear(x)) -> PlaysInNFL(x))", "all x y z.((Person(x) & Club(y) & Position(z) & HasPositionIn(x,y,z) & PositionInYear(z) & InNBA(y,z)) -> PlaysInNFL(x))", "all x.((Person(x) & PositionInClub(x) & PositionInYear(x) & InNFC(x)) -> PlaysInNFL(x))", "all x y.((Person(x) & PositionInClub(x,y) & PositionInYear(y) & InNBA(x,y)) -> PlaysInNFL(x))", "exists x.(PositionInClub(x) & PositionInYear(x) & NFL(x) & SameYear(x))"]}
{"id": "folio_train_1904", "nl": "Minnesota Vikings is a football club.", "fol": "IsFootballClub(Minnesota_Vikings)", "prediction": ["all x.(Violins(x) -> FootballClub(x))", "(FootballClub(MinneapolisViolins) & FootballClub(MinneapolisViolins))", "all x.(Violin(x) -> FootballClub(x))", "all x.((Violins(x) & Minnesota(x)) -> FootballClub(x))", "MinnesotaViolins(MN) -> FootballClub(MN))", "(FootballClub(MNuckyViolins) & FootballClub(MNuckyViolins))", "the MinnesotaViolins(MN) -> FootballClub(MN))", "All x.(MinneapolisViolins(x) -> FootballClub(x))", "(FootballClub(MinnesotaViolins) & FootballClub(MinneapolisViolins))", "All x y.((MinneapolisViolins(x) & FootballClub(y)) -> FootballClub(x))", "all x.((Violins(x) & Minnesota) -> FootballClub(x))", "all x.(Vikings(x) -> FootballClub(x))", "all x.(MinnesotaViolins(x) -> FootballClub(x))", "(FootballClub(MinneapolisViolins) & FootballClub(MinneapolisViolins))", "(FootballClub(MNuckyVikings) & FootballClub(MNucky))", "all x.(Violins(x) -> FootballClub(x))"]}
{"id": "folio_train_1905", "nl": "Dennis Green coached Minnesota Vikings.", "fol": "Coaches(Dennis_Green,Minnesota_Vikings)", "prediction": ["Dennis Green coached Minnesota Vikings.", "all x.((DennisGreen(x) & MinnesotaViolins(x)) -> Coached(x,y))", "DennisGreencoachedMinneapolisViolins(x)", "-Coaches(DennisGreen,MinnesotaViolins)", "(Coaches(DennisGreen, MinnesotaViolins))", "(Coaches(DennisGreen,MinnesotaViolins))", "Dennis Green coached Minnesota Vikings.", "DennisGreencoached MinnesotaViolins(x)", "(Coach(DennisGreen) | Coach(DennisGreen)))", "(CoachesMinneapolisViolins(DennisGreen)", "DennisGreencoachedMinneapolisViolins(x)", "Dennis Green coached MinnesotaViolins.", "Dennis Green coached Minnesota Vikings.", "DennisGreencoached Minnesota Vikings.", "Dennis Green coached the Minnesota Vikings.", "Dennis Green coached Minnesota Vikings."]}
{"id": "folio_train_1906", "nl": "Cris Carter had 13 touchdown receptions.", "fol": "HadTouchDownReceptions(Cris_Carter,T13)", "prediction": ["CrisCarter had13 touchdownReceptions(cris)", "(Than(CrissCarter) -> Had13TailingReceptions(Criss))", "all x.(CrisCris Carter(x) -> HasTailingReceptions(x,13))", "(Taskback(CrissCarter) -> Had13(Criss))", "CristisCarterHasTentainmentReceptions(c) & HasTenThan(c,13))", "CrisCarterHasTentainmentReceptions(Criss)", "Cris Carter had 13 touchdownReceptions(cris)", "-(Cris Carter(c) & 13TailingReceptions(c)))", "all x.((Cris Carter(x) & HasTentacleReceptions(x,13)) -> HasTentacleReceptions(x,13))", "(CrissCarter(Criss) & HasTaskback(Criss))", "(Than(CrissCarter) -> Had13TailingReceptions(Criss))", "All x.(CrissCarter(x) -> HadTaskbackReceptions(x,13))", "(TentainmentReception(CrissCarter) & 13(CrissCarter))", "All x.(Cris(x) -> HasTailingReceptions(x,13))", "CrisCarter had13 touchdownReceptions(cris,x)", "Cris Carter had 13 touchdownReceptions."]}
{"id": "folio_train_1907", "nl": "Minnesota Vikings was in the National Football League in 1997.", "fol": "NFLTeamInYear(Minnesota_Vikings,Y1997)", "prediction": ["all x.(Violins(x) -> InNationalFootballLiga(x))", "All x y.((MinneapolisViolins(x) & NationalFootballLiga(y)) -> In(x,y))", "all x.((Violins(x) & Minnesota(x)) -> InNationalFootballLiga(x,1997))", "(InNationalFootballLion(MNVikings,1997))", "(NflLion(MNuckinsonViolins) & In(MNuckinsonViolins) & In(MNuckinsonFLiLion,1997))", "all x.(MinneapolisViolins(x) -> InNationalFootballLiga(x,1997))", "(InNFCLocation(MinneapolisViolins,1997))", "the Minnesota Vikings (MNFC) & InNationalFootballLion(MNFC) & InConvention(MNFC))", "all x.(Vikings(x) -> (InNationalFootballLiga(x,1997)))", "the Minnesota Vikings were in the National Football League in 1997.", "All x y.((MinnesotaViolins(x) & NationalFootballLion(y)) -> In(x,y))", "all x.((Violins(x) & NationalFootballLion(x)) -> InConstruction(x,1997))", "(NFCLocation(MinneapolisViolins,1997))", "(InNationalFootballLiga(MNVikings,1997))", "All x y.((MinnesotaViolins(x) & NationalFootballLiga(y)) -> In(x,y))", "(InNFCLowerLiga(MinneapolisViolins,1997))"]}
{"id": "folio_train_1908", "nl": "John Randle was Minnesota Vikings defensive tackle in 1997.", "fol": "(HasPosition(John_Randle,Defensive_tackle) & IsInTeam(John_Randle,Y1997) & PlaysFor(John_Randle,Minnesota_Vikings))", "prediction": ["(DefensiveDuck(JohnRandle,1997) & MinnesotaVikings(JohnRandle,1997))", "John Randle was defensive tackle for MinnesotaVikings(John,1997).", "John Randle was MinnesotaVikingsDefensiveDuck(John,1997).", "All x.((JohnRandle(x) & MinnesotaViolins(x)) -> DefensiveDuck(x,1997))", "(MNJRandle(JohnRandle) & MinnesotaViolinsDefensiveDach(John,1997))", "(MinneapolisVikings(JohnRandle,1997) & DefensiveDach(JohnRandle,1997))", "-(MinneapolisViolinsDefensiveDach(JohnRandle) & In97(JohnRandle))", "-(MNJRandle(JonRandle) & MinnesotaViolinsDefensiveDach(Randle,1997))", "John Randle (MNJVikings(Jon) & DefensiveDuck(Jon))", "(DefensiveDach(JohnRandle,MN) & MinnesotaVikings(John,1997))", "John Randle (MNJVikingsDefensiveDuck(Jan97) & MinnesotaVikings(Jan97))", "(DefensiveDefensiveDuck(JohnRandle,1997) & MinnesotaVikings(JohnRandle,1997))", "John Randle was defensive tackle for MinnesotaVikings(JohnRandle,1997).", "John Randle, MinnesotaViolinsDefensiveDach(Junior,1997), -(MNJViolins(Junior) | MinnesotaViolins(Junior)))", "John Randle, MinnesotaViolinsDefensiveDuck(Jan97)", "John Randle was defensive tackle in Minnesota Vikings(John,1997)."]}
{"id": "folio_train_1909", "nl": "Dennis Green is a football coach.", "fol": "IsFootballCoach(Dennis_Green)", "prediction": ["(FootballCoach(DennisGreen)", "all x.((FootballCoach(x) & DennisGreen(x)) -> FootballCoach(x))", "Dennis Green is a football coach.", "all x.((DennisGreen(x) & FootballCoach(x)) -> Coach(x))", "DennisGreen(Dennis) & FootballCoach(Dennis)", "Dennis Green (FootballCoach(DennisGreen))", "(FootballCoach(DennisGreen)", "DennisGreen is a football coach.", "Dennis Green is FootballCoach(x)", "all x.((FootballCoach(x) & DennisGreen(x)) -> Coach(x))", "all x.((DennisGreen(x) & FootballCoach(x)) -> Coach(x))", "DennisGreen(Dennis) & FootballCoach(Dennis)", "Dennis Green is a football coach.", "(FootballCoach(DennisGreen)", "(FootballCoach(DennisGreen)", "(FootballCoach(DennisGreen)"]}
{"id": "folio_train_1910", "nl": "John Randle didn't play in the National Football League.", "fol": "-PlaysInNFL(John_Randle)", "prediction": ["(-PlayedInNationalFootballLower(JohnRandle))", "-(PlayedInNationalFootballLower(JohnRandle) & -PlayedInNationalFootballLower(JohnRandle))", "John Randle -PlayedInNationalFootballLol(JohnRandle)", "((JohnRandle(John) & -NationalFootballLower(John)) -> -PlayedIn(John,FootballLower))", "(-PlayedInNFL(JohnRandle))", "John Randle didn't play in the National Football League.", "-(PlayedInNFL(JohnRandle) & -PlayedInNFL(JohnRandle))", "((JohnRandle(John) & -PlayedInNFL(John)) -> -PlayedInNFL(John))", "-(JohnRandle(John) & NationalFootballLower(John))", "(-PlaysInNFL(JohnRandle))", "John Randle -PlayedInNFL(John Randle,NationalFootballLower)", "John Randle -PlayedInNationalFootballLower(John Randle)", "-PlaysInNationalFootballLower(JohnRandle)", "John Randle didn't play in the National Football League.", "(-playedInNFL(JohnRandle))", "John Randle -PlayedInNationalFootballLimit(JohnRandle,NationalFootballLimit)"]}
{"id": "folio_train_1911", "nl": "Cris Carter played for Minnesota Vikings.", "fol": "PlaysFor(Cris_Carter,Minnesota_Vikings)", "prediction": ["(PlayedFor(CrissCarter,MinnesotaViolins))", "CrisCarter played for MinnesotaViolins(cris)", "all x y.((CrisCarter(x) & MinnesotaViolins(y)) -> PlayedFor(x,y))", "all x.(CrisCris Carter(x) -> PlayedForMinnesotaViolins(x))", "-(CrissCarter(c) & MinnesotaViolins(c))", "(PlayedForVikings(CrisCris Carter,Minnesota) & MinnesotaVikings(CrisCarter,Minnesota))", "(PlayedFor(CrissCarter,MinnesotaViolins) & MinnesotaViolins(CrissCarter))", "all x.(Cris(x) -> PlayedFor(x,MNuckyViolins))", "(PlayedFor(CrissCarter,MNJVikings) & MinnesotaVikings(CrissCarter,MNJ))", "All x.(Cris(x) -> PlayedForMinnesotaViolins(x))", "Cris Carter played for MinnesotaViolins(cris)", "CrisCarterPlayedForMinnesotaViolins(cris)", "CrisCarter played for MinnesotaViolins.", "(PlayedForMinneapolisViolins(CrisCrisCarter))", "CrisCarter played for MinnesotaViolins(cris)", "Cris Carter played for MinnesotaViolins."]}
{"id": "folio_train_1912", "nl": "All cats are cute.", "fol": "all x.(IsCat(x) -> IsCute(x))", "prediction": ["all x.(Cat(x) -> Cute(x))", "all x.(Cat(x) -> Cute(x))", "(Cute(cat) & All(cat) -> Cute(cat))", "(all x.(Cat(x) -> Cute(x)))", "all x.(Cat(x) -> Cute(x))", "all x y.((Cat(x) & Cat(y)) -> Cute(x))", "all x.(Cat(x) -> Cute(x))", "all x.(Kat(x) -> Cute(x))", "(all x.(Cat(x) -> Cute(x))", "all x.(Cat(x) -> Cute(x))", "all x.(Cat(x) -> Cute(x))", "all x.(Kat(x) -> Cute(x))", "all x.(Cat(x) -> Cute(x))", "all x.(Cat(x) -> Cute(x))", "all x.(Cat(x) -> Cute(x))", "exists x.(Cat(x) & Cute(x))"]}
{"id": "folio_train_1913", "nl": "Nothing that barks is lovely. ", "fol": "all x.(Barks(x) -> -IsLovely(x))", "prediction": ["all x.(Barks(x) -> Lovely(x))", "-exists x.(Barks(x) & Lovely(x))", "all x.((Barks(x) & -Barks(x)) -> Lovely(x))", "all x.(Barks(x) -> Lovely(x))", "(exists x.(Barks(x) & -Lovely(x)))", "-exists x.(Barks(x) & Lovely(x))", "-(Barks(x) & Lovely(x))", "all x.((Barks(x) & -Barks(x)) -> Lovely(x))", "-exists x.(Barks(x) & Lovely(x))", "all x.(Barks(x) -> Lovely(x))", "all x.((Barks(x) & Lovely(x)) -> -Barks(x))", "(Barks(n) & Lovely(n))", "-exists x.(Barks(x) & Lovely(x))", "all x.(Barks(x) -> Lovely(x))", "-exists x.(Barks(x) & Lovely(x))", "all x.(Barks(x) -> Lovely(x))"]}
{"id": "folio_train_1914", "nl": "If something is a dog, then it barks.", "fol": "all x.(IsDog(x) -> Barks(x))", "prediction": ["all x.(Dog(x) -> Barks(x))", "all x.((Dog(x) & Barks(x)) -> Dog(x))", "all x.(Dog(x) -> Barks(x))", "all x.(Dog(x) -> Barks(x))", "all x.((Dog(x) & Barks(x)) -> Dog(x))", "all x.(Dog(x) -> Barks(x))", "all x.((Dog(x) & Barks(x)) -> Dog(x))", "all x y.(Dog(x) -> Barks(x))", "all x.((Dog(x) & Barks(x)) -> Dog(x))", "all x.(Dog(x) -> Barks(x))", "all x.(Dog(x) -> Barks(x))", "all x.((Dog(x) & Barks(x)) -> Dog(x))", "all x.(Dog(x) -> Barks(x))", "exists x.(Dog(x) & Barks(x))", "exists x.(Dog(x) & Bark(x))", "exists x.(Dog(x) & Barks(x))"]}
{"id": "folio_train_1915", "nl": "Grace is either a cat and a dog, or neither a cat nor a dog.", "fol": "((IsCat(Grace) & IsDog(Grace) & -(-IsCat(Grace) & -IsDog(Grace))) | (-(IsCat(Grace) & IsDog(Grace)) & -IsCat(Grace) & -IsDog(Grace)))", "prediction": ["all x.(Grace(x) -> ((Cat(x) & Dog(x)) | (-Cat(x) & Dog(x)))))", "(all x.(Grace(x) -> (Cat(x) | Dog(x))))", "all x.(Grace(x) -> (Cat(x) | Dog(x)) | (-Cat(x) & Dog(x))))", "(Cat(Grace) | Dog(Grace)))", "all x.(Grace(x) -> ((Cat(x) & Dog(x)) | -Cat(x) & Dog(x))))", "all x y.(Grace(x) -> (Cat(y) & Dog(y) & -Cat(x,y) & Dog(x,y)))", "(all x.(Grace(x) -> (Cat(x) | Dog(x))))", "all x.(Grace(x) -> (Cat(x) & Dog(x) & -Cat(x) & Dog(x)))", "all x.(Grace(x) -> ((Cat(x) & Dog(x)) | (-Cat(x) & Dog(x)))))", "(Cat(Grace) | Dog(Grace))", "(all x.(Grace(x) -> Cat(x)) | (-Cat(x) & Dog(x))))", "all x.(Grace(x) -> ((Cat(x) & Dog(x)) | (-Cat(x) & Dog(x))))", "(all x.(Grace(x) -> (Cat(x) | Dog(x))))", "exists x.(Grace(x) & (Cat(x) | Dog(x)) | -Cat(x) & Dog(x)))", "all x.(Grace(x) -> ((Cat(x) & Dog(x)) | (-Cat(x) & Dog(x))))", "exists x.(Grace(x) & ((Cat(x) & Dog(x)) | (-Cat(x) & Dog(x)))))"]}
{"id": "folio_train_1916", "nl": "Grace is a ghost.", "fol": "ExistsGhost(Grace)", "prediction": ["all x.(Grace(x) -> Ghost(x))", "(Ghost(Grace) & Ghost(Grace))", "Grace is a Ghost(Grace)", "all x.(Grace(x) -> Ghost(x))", "(Ghost(Grace) & Ghost(Grace))", "Grace is a ghost.", "all x.(Grace(x) -> Ghost(x))", "all x.(Ghost(x) -> Grace(x))", "Grace is a Ghost(Grace)", "(Ghost(Grace)", "Grace is Ghost(Grace)", "(Ghost(Grace)", "all x.(Grace(x) -> Ghost(x))", "all x.(Ghost(x) -> Grace(x))", "All x.(Grace(x) -> Ghost(x))", "All x.(Grace(x) -> Ghost(x))"]}
{"id": "folio_train_1917", "nl": "If Grace is either both cute and lovely, or neither cute nor lovely, then Grace is either a dog or a ghost.", "fol": "(((IsCute(Grace) & IsLovely(Grace)) | (-IsCute(Grace) & -IsLovely(Grace))) -> (IsDog(Grace) | ExistsGhost(Grace)))", "prediction": ["all x.((Grace(x) & (Cute(x) | Lovely(x))) | -Cute(x) | Lovely(x))) -> (Dog(x) | Ghost(x)))", "all x.((Grace(x) & ((Cute(x) & Lovely(x)) | -Cute(x) & Lovely(x))) -> (Dog(x) | Ghost(x)))", "all x.((Grace(x) & (CUTE(x) | -CUTE(x) | -CUTE(x))) -> (Dog(x) | Ghost(x)))", "((CuteAndLovely(Grace) | -CuteAndLovely(Grace))) -> (Dog(Grace) | Ghost(Grace)))", "((CUTE(Grace) & Lovely(Grace)) | -CUTE(Grace) & Lovely(Grace)))", "(all x.((Grace(x) & (CUTE(x) | -CUTE(x))) | -CUTE(x)) | -CUTE(x)))", "all x.((Grace(x) & ((Cute(x) & Lovely(x)) | (-Cute(x) & Lovely(x))))) -> (Dog(x) | Ghost(x)))", "all x.((Grace(x) & (Cute(x) | Lovely(x)) | -Cute(x) | Lovely(x))) -> (Dog(x) | Ghost(x)))", "all x.((Grace(x) & ((CUTE(x) | -CUTE(x)) | -CUTE(x))) -> (Ghost(x))))", "(all x.((Grace(x) & (Cute(x) | Lovely(x))) & -(Cute(x) | Lovely(x)))) -> (Dog(x) | Ghost(x)))", "(all x.((Grace(x) & (CUTE(x) | -Cute(x))) | -Cute(x) | -Lovely(x))) -> (Dog(x) | Ghost(x)))", "all x.((Grace(x) & ((Cozy(x) | Lovely(x))) | (-Cozy(x) | Lovely(x))))) -> (Dog(x) | Ghost(x)))", "all x.((Grace(x) & (CUTE(x) | -CUTE(x) | -Lovely(x))) -> (Dog(x) | Ghost(x)))", "all x.(CuteAndLovely(x) | -CuteAndLovely(x))", "all x.((Grace(x) & (Cozy(x) | Lovely(x)) | -Cozy(x) | Lovely(x))) -> (Dog(x) | Ghost(x)))", "all x.((Grace(x) & ((Cozy(x) & Lovely(x)) | -Cozy(x) & Lovely(x))) -> (Dog(x) | Ghost(x)))"]}
{"id": "folio_train_1918", "nl": "If Grace is not a ghost and is not lovely, then Grace is either a cat or cute.", "fol": "((-ExistsGhost(Grace) & -IsLovely(Grace)) -> (IsCat(Grace) | IsCute(Grace)))", "prediction": ["all x.((Grace(x) & -Ghost(x) & -Lovely(x)) -> (Cat(x) | Cute(x)))", "(-Ghost(Grace) & -Lovely(Grace)) -> (Cat(Grace) | Cute(Grace)))", "(all x.((Grace(x) & -Ghost(x) & -Lovely(x)) -> (Cat(x) | Cute(x))))", "all x.((Ghost(x) & -Ghost(x) & -Lovely(x)) -> (Cat(x) | Cute(x)))", "all x.((Grace(x) & -Ghost(x) & -Lovely(x)) -> (Cat(x) | Cute(x)))", "(all x.((Ghost(x) & -Ghost(x) & -Lovely(x)) -> (Cat(x) | Cute(x))))", "all x.((Ghost(x) & -Ghost(x) & -Beautiful(x)) -> (Cat(x) | Cute(x)))", "all x.(Ghost(x) -> (-Ghost(x) & -Lovely(x)) & (Cat(x) | Cute(x)))", "all x.((Ghost(x) & -Ghost(x) & -Lovely(x)) -> (Cat(x) | Cute(x)))", "(all x.((Grace(x) & -Ghost(x) & -Lovely(x)) -> (Cat(x) | Cute(x))))", "all x.((Ghost(x) & -Ghost(x) & Lovely(x)) -> (Cat(x) | Cute(x)))", "all x.((Grace(x) & -Ghost(x) & -Lovely(x)) -> (Cat(x) | Cute(x)))", "all x.((Grace(x) & -Ghost(x) & -Beautiful(x)) -> (Cat(x) | Cute(x)))", "all x.((Grace(x) & -Ghost(x) & -Lovely(x)) -> (Cat(x) | CUTE(x)))", "all x.((Ghost(x) & -Ghost(x) & Lovely(x)) -> (Cat(x) | Cute(x)))", "all x.((Grace(x) & -Ghost(x) & -Lovely(x)) -> (Cat(x) | Cute(x)))"]}
{"id": "folio_train_1919", "nl": "Shafaq-Asiman is a large complex of offshore geological structures in the Caspian Sea.", "fol": "(IsLargeComplex(ShafaqAsiman) & IsLargeComplex(ShafaqAsiman) & IsOffshore(ShafaqAsiman) & HasGeologicalStructures(ShafaqAsiman) & LocatedIn(ShafaqAsiman,Caspiansea))", "prediction": ["all x.(ShafaqAsiman(x) -> (LargeComplexOfOffshoreGeologicalStructures(x) & InCaspianSea(x)))", "(LargeComplexOfOffshoreGeologicalStructures(ShafaqAsiman) & InCaspianSea(ShafaqAsiman))", "all x y.((ShafaqAsiman(x) & OffshoreGeologicalStructures(y)) -> InCaspianSea(x,y))", "ShafaqAsiman is a large complex of offshoregeologicalStructures in the Caspian Sea.", "all x.(ShafaqAsiman(x) -> (OffshoreGeologicalStructures(x) & InCaspianSea(x)))", "Shafaq-Asiman is a large complex of offshore geological structures in the Caspian Sea.", "all x y.((ShafaqAsiman(x) & CaspianSea(y)) -> LargeComplexOfOffshoreGeologicalStructures(x,y))", "(LargeComplexOfOffshoreGeologicalStructuresInCaspianSea(ShafaqAsiman)", "ShafaqAsiman is a large complex of offshore geological structures in the Caspian Sea.", "all x.(ShafaqAsiman(x) -> (LargeComplexOfOffshoreGeologicalStructures(x) & InCaspianSea(x)))", "all x.(ShafaqAsiman(x) -> (LargeComplexOfOffshoreGeologicalStructures(x) & InCaspianSea(x)))", "(LargeComplexOfOffshoreGeologicalStructures(ShafaqAsiman) & InCaspianSea(ShafaqAsiman)", "all x y.((ShafaqAsiman(x) & OffshoreGeologicalStructures(y)) -> LargeComplex(x,y))", "(LargeComplexOfOffshoreGeologicalStructuresInCascadianSea(ShafaqAsiman)", "all x.(ShafaqAsiman(x) -> (LargeComplexOfOffshoreGeologicalStructures(x) & InCaspianSea(x)))", "all x.(ShafaqAsiman(x) -> OffshoreGeologicalStructures(x))"]}
{"id": "folio_train_1920", "nl": "Baku is northwest of Shafaq-Asiman.", "fol": "IsNorthwestOf(Baku,ShafaqAsiman)", "prediction": ["all x.(Baku(x) -> NorthwestOfShafaqAsiman(x))", "(NorthwestOfShafaqAsiman(Baku))", "(NorthwestOfShafaqAsiman(Baku))", "all x y.((Baku(x) & ShafaqAsiman(y)) -> NorthwestOf(x,y))", "-NorthwestOfShafaqAsiman(Baku)", "all x.((Baku(x) & NorthwestOfShafaqAsiman(x)) -> NorthwestOf(x,y))", "is northwest of Shafaq-Asiman.", "all x.(Baku(x) -> (NorthwestOfShafaqAsiman(x)))", "ShafaqAsiman (NorthwestOfBaku(baku,shfaq))", "all x.(Baku(x) -> NorthwestOfShafaqAsiman(x))", "(NorthwestOfShafaqAsiman(Baku))", "(NorthwestOfShafaqAsiman(Baku))", "(NorthwestOfShafaqAsiman(Baku))", "all x.(Baku(x) -> NorthwestOfShafaqAsiman(x))", "(NorthwestOfShafaqAsiman(Baku))", "exists x.(Baku(x) & NorthwestOfShafaqAsiman(x))"]}
{"id": "folio_train_1921", "nl": "If place A is northwest of place B, then place B is southeast of place A.", "fol": "all x y.(IsNorthwestOf(x,y) -> IsSoutheastOf(y,x))", "prediction": ["all x.((PlaceA(x) & NorthwestOfPlaceB(x)) -> SoutheastOfPlaceA(x))", "all x y.((Place(x) & Place(y) & NorthwestOf(x,y)) -> SoutheastOf(y,x))", "(NorthwestOfPlaceB) -> SoutheastOfPlaceA(PlaceB))", "(NorthwestOfPlaceB,PlaceA,PlaceB,PlaceA,PlaceB,PlaceA,PlaceB,PlaceB,PlaceA,PlaceB,PlaceB,PlaceB,PlaceB,PlaceB,PlaceB,PlaceB,PlaceB,PlaceB,PlaceB,PlaceB,PlaceB,PlaceB,PlaceB,PlaceB,PlaceB,PlaceB,PlaceB,PlaceB", "(NorthwestOfPlaceB) -> SoutheastOfPlaceA(PlaceB))", "all x.((PlaceA(x) & NorthwestOfPlaceB(x)) -> SoutheastOfPlaceA(x))", "all x y.((Place(x) & Place(y) & NorthwestOf(x,y)) -> SoutheastOf(y,x))", "all x y.((Place(x) & Place(y)) -> (NorthwestOf(x,y) & SoutheastOf(y,x)))", "all x.((Place(x) & NorthwestOfPlace(x,B)) -> SoutheastOfPlace(x,A))", "all x y.((Place(x) & PlaceB(y) & NorthwestOf(x,y)) -> SoutheastOf(y,x))", "(NorthwestOfPlaceB,SoutheastOfPlaceA) -> PlaceB.", "all x.(NorthwestOfPlaceB(x) -> SoutheastOfPlaceA(x))", "all x.((Place(x) & NorthwestOfPlace(x)) -> SoutheastOfPlace(x))", "(NorthwestOfPlaceB) -> SoutheastOfPlaceA(PlaceB))", "all x.((PlaceA(x) & NorthwestOfPlaceB(x)) -> SoutheastOfPlaceA(x))", "all x y.((Place(x) & Place(y) & NorthwestOf(x,y)) -> SoutheastOf(y,z))"]}
{"id": "folio_train_1922", "nl": "Baku is southeast of Shafaq-Asiman.", "fol": "IsSoutheastOf(Baku,ShafaqAsiman)", "prediction": ["all x.(Baku(x) -> (ShadaqAsiman(x) & SoutheastOf(x,ShadaqAsiman)))", "Baku is southeast of Shafaq-Asiman.", "(ShadaqAsiman(Baku) & SoutheastOf(Baku,Safaq))", "(ShafaqAsiman(Baku) & SoutheastOf(Baku,Safaq))", "(Est.ShafaqAsiman(Baku))", "all x y.((Baku(x) & ShafaqAsiman(y)) -> SoutheastOf(x,y))", "(SoutheastOfShafaqAsiman(Baku))", "all x.(Baku(x) -> (ShafaqAsiman(x) & SoutheastOf(x,ShafaqAsiman)))", "Located in the southeast of Shafaq-Asiman.", "Baku (Shabaq-Asiman) & SoutheastOf(Baku))", "all x.(Baku(x) -> (ShadaqAsiman(x) & SoutheastOf(x,ShadaqAsiman)))", "(ShadaqAsiman(Baku) & SoutheastOf(Baku,Safaq))", "all x.(Baku(x) -> SoutheastOfShafaqAsiman(x))", "(ShakaqAsiman(Baku) & SoutheastOfAsiman(Baku))", "all x.(Baku(x) -> (SoutheastOfShafaqAsiman(x)))", "exists x.(Baku(x) & ShafaqAsiman(x))"]}
{"id": "folio_train_1923", "nl": "A large complex is southeast of Baku.", "fol": "exists z.(IsLargeComplex(z) & IsSoutheastOf(z,Baku))", "prediction": ["all x.(LargeComplex(x) -> SoutheastOfBaku(x))", "(LargeComplex(x) & SoutheastOfBaku(x))", "all x y.((LargeComplex(x) & Baku(y)) -> SoutheastOf(x,y))", "exists x.(LargeComplex(x) & SoutheastOfBaku(x))", "(LargeComplex(x) & SoutheastOfBaku(x))", "all x y.((LargeComplex(x) & Baku(y)) -> SoutheastOf(x,y))", "all x y z.((LargeComplex(x) & Baku(y) & SoutheastOf(x,y)) -> Located(x,z))", "all x.(LargeComplex(x) -> SoutheastOfBaku(x))", "exists x.(LargeComplex(x) & SoutheastOf(x,Baku))", "(LargeComplex(x) & SoutheastOfBaku(x))", "all x y.((LargeComplex(x) & Baku(y)) -> SoutheastOf(x,y))", "exists x.(LargeComplex(x) & SoutheastOfBabaku(x))", "all x y.((LargeComplex(x) & Baku(y)) -> SoutheastOf(x,y))", "exists x.(LargeComplex(x) & SoutheastOf(x,Babaku))", "exists x.(LargeComplex(x) & SoutheastOfBaku(x))", "exists x.(LargeComplex(x) & SoutheastOfBaku(x))"]}
{"id": "folio_train_1924", "nl": "Baku is not northwest of an offshore geological structures.", "fol": "-exists x.(IsOffshore(x) & HasGeologicalStructures(x) & IsNorthwestOf(Baku,x))", "prediction": ["all x.(Baku(x) -> -WesterlyOfOffshoreGeologicalStructures(x))", "(-WesterlyOfOffshoreGeologicalStructures(Baku))", "(-NorthwestOfOffshoreGeologicalStructures(Baku))", "all x.((Baku(x) & -WesterlyOfOffshoreGeologicalStructures(x)) -> -OffshoreGeologicalStructures(x))", "all x.(Baku(x) -> -NorthwestOfOffshoreGeologicalStructures(x))", "(NorthwestOfOffshoreGeologicalStructures(Baku) -> -WesterlyOfOffshoreGeologicalStructures(Baku))", "(-NorthwestOfOffshoreGeologicalStructures(Baku))", "all x y.((Baku(x) & OffshoreGeologicalStructure(y)) -> -NorthwestOf(x,y))", "-West ofOffshoreGeologicalStructures(Baku)", "-NorthwestOfOffshoreGeologicalStructures(Baku)", "all x.((Baku(x) & -WesterlyOfOffshoreGeologicalStructures(x)) -> -NorthwestOfOffshoreGeologicalStructures(x))", "all x.(Baku(x) -> -WesterlyOfOffshoreGeologicalStructures(x))", "all x.(Baku(x) -> -NorthwestOfOffshoreGeologicalStructures(x))", "all x.(Baku(x) -> -NorthwestOfOffshoreGeologicalStructures(x))", "exists x.(Baku(x) & -WesterlyOfOffshoreGeologicalStructures(x))", "exists x.(Baku(x) & -NorthwestOfOffshoreGeologicalStructures(x))"]}
{"id": "folio_train_1925", "nl": "Herodicus was a Greek physician, dietician, sophist, and gymnastic-master.", "fol": "(IsGreek(Herodicus) & IsPhysician(Herodicus) & IsDietician(Herodicus) & IsSophist(Herodicus) & IsGymnasticMaster(Herodicus))", "prediction": ["all x.(Herodicus(x) -> (GreekPhDentist(x) & GreekSophist(x) & GreekGymnasticMaster(x)))", "(GreekPharmacist(Herodicus) & Dietician(Herodicus) & Sophot(Herodicus) & GymnasticMaster(Herodicus))", "(Helodicus) -> (GreekPhDentist(heroicus) & GreekDietician(heroicus) & GreekSophist(heroicus) & GreekGymnasticMaster(heroicus)))", "all x.(Herodicus(x) -> (GreekPharmacist(x) & Dietician(x) & Sophot(x) & GymnasticMaster(x)))", "(GreekPhD,PhD,Sophist,GymnasticMaster)", "(Herodicus) -> (GreekPhDentist(herodicus) & Dietician(heroicus) & Sophist(heroicus) & GymnasticMaster(heroicus)))", "Herodicus (GreekPhDentist(heroicus) & Dietician(heroicus) & Sophot(heroicus) & GymnasticMaster(heroicus))", "(GreekMedicine(Herodicus) & Dietician(Herodicus) & Sophot(Herodicus) & GymnasticMaster(Herodicus))", "(GreekPhD,Physician(herodicus) & Dietician(heroicus) & Sophist(heroicus) & GymnasticMaster(heroicus))", "(GreekPhDi\u00e9t\u00e9ticianSophistGymnast(Herodicus))", "-(Herodicus(x) & GreekPharmacist(x) & Dietician(x) & Sophot(x) & GymnasticMaster(x))", "all x.(Herodicus(x) -> (GreekPhDentist(x) & GreekSophist(x) & GreekGymnasticMaster(x)))", "all x y.((Herodicus(x) & GreekPhysician(y)) -> (Dietician(y) & Sophist(x) & GymnasticMaster(x)))", "Herodicus (GreekPhDi\u00e9t\u00e9tistSophistGymnast)", "all x.(Herodicus(x) -> (GreekPhDentist(x) & Sophist(x) & GymnasticMaster(x)))", "all x.(Herodicus(x) -> (GriechischePharmacist(x) & Dietician(x) & Sophist(x) & GymnasticMaster(x)))"]}
{"id": "folio_train_1926", "nl": "Herodicus was born in the city of Selymbria.", "fol": "(BornIn(Herodicus,Selymbria) & IsCity(Selymbria))", "prediction": ["Herodicus was born in the city of Selymbria.", "all x.(Herodicus(x) -> BornInSelymbria(x))", "(Birth(Herodicus) & City(Selymbria))", "Herodicus was born in the city of Selymbria.", "-(Herodicus(x) & BornInSelymbria(x))", "(Herodicus was bornInSelymbria(hero) & BornInSelymbria(hero))", "Herodicus was born in Selymbria.", "Herodicus was born in Selymbria.", "-BirthCity(Herodicus)", "(Herodicus) s s (Birth(heroicus) & City(heroicus)))", "Hector was born in Selymbria.", "(Birth(Herodicus) & City(Herodicus))", "Selymbria (heroicus)", "Herodicus was born in the city of Selymbria.", "Herodicus was born in Selymbria, a city in the Roman Empire.", "Herodicus s BornInSelymbria(x)"]}
{"id": "folio_train_1927", "nl": "Selymbria is a colony of the city-state Megara.", "fol": "(IsColonyOf(Selymbria,Megara) & IsCityState(Megara))", "prediction": ["all x.(Selymbria(x) -> (ColonyOfCityStateMegara(x)))", "Selymbria is a colony of the city-state Megara.", "Selymbria (ColonyOfMegara(x))", "(Colony(Selymbria) & CityState(Selymbria))", "(ColonyOfMelbourne(Selymbria) & CityStateMelbourne(Selymbria))", "all x y.((Colony(x) & CityState(y) & Megara(x)) -> Selymbria(x))", "(ColonyOfCityStateMegara(Selymbria))", "Selymbria (Colony(Selma) & CityStateMegara(Selma))", "all x.(Selymbria(x) -> (ColonyOfCityStateMegara(x)))", "all x.(Selymbria(x) -> ColonyOfCityStateMegara(x))", "Selymbria is a colony of the city-state Megara.", "(ColonyOfMegara(Selymbria))", "all x y.((Colony(x) & CityState(y) & Megara(x)) -> Selymbria(x))", "(ColonyOfCityStateMegara(Selymbria))", "all x.(Selymbria(x) -> (Colony(x) & CityStateMegara(x)))", "Selymbria (ColonyOfMegara(x))"]}
{"id": "folio_train_1928", "nl": "One of the tutors of Hippocrates was Herodicus.", "fol": "TutoredBy(Herodicus,Hippocrates)", "prediction": ["all x.((Tutor(x) & Hippocrates(x)) -> Herodicus(x))", "(HippocratesTutor(Hippocrates) & Herodicus(Hippocrates))", "one of the tutors of Hippocrates was Herodicus.", "All x y.((Tutor(x) & Hippocrates(y)) -> Herodicus(x))", "-HippocratesTutor(x) & Herodicus(x))", "all x.((Tutor(x) & Hippocrates(x)) -> Herodicus(x))", "all x.((Tutor(x) & Hippocrates(x)) -> Herodicus(x))", "(HippocratesTutor(Hippocrates) & HerodicusTutor(Hippocrates))", "(HippocratesTutor(x) & Herodicus(x))", "-(Tutor(x) & Hippocrates(x)))", "all x.(HippocratesTutor(x) -> Herodicus(x))", "one of the tutors of Hippocrates was Herodicus.", "-HippocratesTutor(x)", "(HippocratesTutor(h) & Herodicus(h))", "all x.((Tutor(x) & Hippocrates(x)) -> Herodicus(x))", "(HippocratesTutor(Hippocrates) & HerodicusTutor(Hippocrates))"]}
{"id": "folio_train_1929", "nl": "Massages were recommended by Herodicus.", "fol": "RecommendedBy(Herodicus,Massages)", "prediction": ["all x.(Massage(x) -> RecommendedByHerodicus(x))", "all x y.((Massage(x) & Herodicus(y)) -> RecommendedBy(x,y))", "(all x.(Massage(x) -> RecommendedByHerodicus(x)))", "all x y z.((Massage(x) & Herodicus(y) & Massage(z)) -> RecommendedBy(x,y,z))", "all x.(Massage(x) -> RecommendedByHerodicus(x))", "(Recommendations(Massage,Herodicus))", "all x y.((Massage(x) & Herodicus(y)) -> RecommendedBy(x,y))", "all x.(Massage(x) -> Recommendation(x,Herodicus))", "(RecommendedByHerodicus(Massage)", "all x y.((Massage(x) & Herodicus(y)) -> RecommendedBy(x,y))", "All x.(Massage(x) -> RecommendatedByHerodicus(x))", "all x y.((Massage(x) & Herodicus(y)) -> Recommendation(x,y))", "all x.(Massage(x) -> RecommendedByHerodicus(x))", "All x.(Massage(x) -> Recommendation(x,Herodicus))", "All x.(Massage(x) -> RecommendedByHerodicus(x))", "all x y.((Massage(x) & Herodicus(y)) -> RecommendedBy(x,y))"]}
{"id": "folio_train_1930", "nl": "Some of theories of Herodicus are considered to be the foundation of sports medicine.", "fol": "exists x.(TheoryOf(x) & OriginatesFrom(x,Herodicus) & IsFoundationOf(x,SportsMedicine))", "prediction": ["exists x.(TheoriesOfHerodicus(x) & FoundationOfSportsMedicine(x))", "exists x.(Theories(x) & Herodicus(x) & FoundationOfSportsMedicine(x))", "all x y.((Theories(x) & Herodicus(y)) -> FoundationOfSportsMedicine(x))", "-exists x.(TheoryOfHerodicus(x) & FoundationOfSportsMedicine(x))", "exists x.(Theory(x) & Herodicus(x) & FoundationOfSportsMedicine(x))", "exists x.(TheoriesOfHerodicus(x) & FoundationOfSportsMedicine(x))", "all x y.((Theories(x) & Herodicus(y)) -> FoundationOfSportsMedicine(x,y))", "exists x.(HerodicusTheory(x) & FoundationOfSportsMedicine(x))", "exists x.(Theory(x) & Herodicus(x) & SportsMedicine(x))", "(exists x.(TheoriesOfHerodicus(x) & FoundationOfSportsMedicine(x)))", "all x y.((Theory(x) & Herodicus(y)) -> FoundationOfSportsMedicine(x))", "exists x.(TheoriesOfHerodicus(x) & FoundationOfSportsMedicine(x))", "exists x.(HerodicusTheory(x) & FoundationOfSportsMedicine(x))", "all x y.((Theories(x) & Herodicus(y)) -> SportsMedicalFoundation(x,y))", "exists x.(Theory(x) & Herodicus(x) & FoundationOfSportsMedicine(x))", "exists x.(Theory(x) & HerodicusTheory(x) & SportsMedicine(x))"]}
{"id": "folio_train_1931", "nl": "Herodicus tutored Hippocrates.", "fol": "TutoredBy(Herodicus,Hippocrates)", "prediction": ["all x.(Herodicus(x) -> TutoredHippocrates(x))", "all x y.((Herodicus(x) & Hippocrate(y)) -> Tutored(x,y))", "Herodicus tutoredHippocrates.", "(TutoredHippocrates(Herodicus)", "(TutornedHippocrates(Herodicus)", "(TutorsHippocrates(Herodicus)", "Herodicus tutoredHippocrates.", "all x y.((Herodicus(x) & Hippocrate(y)) -> Tutored(x,y))", "all x.(Herodicus(x) -> TutoredHippocrates(x))", "(TutoredHippocrates(Herodicus)", "TutoredHippocrates.", "TutoredHippocrates(heroicus)", "Herodicus tutoredHippocrates.", "all x y.((Herodicus(x) & Hippocrate(y)) -> Tutored(x,y))", "All x.(Herodicus(x) -> TutoredHippocrates(x))", "TutoredHippocrates."]}
{"id": "folio_train_1932", "nl": "Herodicus was tutored by Hippocrates.", "fol": "TutoredBy(Hippocrates,Herodicus)", "prediction": ["all x.(Herodicus(x) -> TutoredByHippocrates(x))", "all x y.((Herodicus(x) & Hippocrates(y)) -> TutoredBy(x,y))", "(TutoredByHippocrates(Herodicus)", "(TutoredByHippocrates(Herodicus)", "Herodicus was tutored by Hippocrates.", "Hippocrates tutored Herodicus.", "(TutornedByHippocrates(Herodicus)", "all x.(Herodicus(x) -> TutoredByHipocrates(x))", "Hectorus was tutoredByHippocrates.", "TutoredByHipocrates(herodicus)", "(TutoredByHippocrates(Herodicus)", "(Student(herodicus) & Hippocrates(heroicus))", "(HippocratesTutor(Herodicus)", "All x.(Herodicus(x) -> TutoredByHippocrates(x))", "TutoredByHippocrates.", "TutoredByHipocrates(Herodicus)"]}
{"id": "folio_train_1933", "nl": "Herodicus was born in a city-state.", "fol": "exists y.(IsCityState(y) & BornIn(Herodicus,y))", "prediction": ["all x.(Herodicus(x) -> BornInCityState(x))", "(Birth(Herodicus) & CityState(Herodicus))", "Herodicus was born in a CityState(heroicus)", "(Birth(Herodicus,CityState) -> BornIn(Herodicus,CityState))", "all x y.((Herodicus(x) & CityState(y)) -> BornIn(x,y))", "-(Herodicus(x) & BornInCityState(x))", "all x.(Herodicus(x) -> BornInCityState(x))", "(bornInCityState(herodicus) & BornIn(heroicus,city))", "all x.(Herodicus(x) -> BornInCityState(x))", "Herodicus was born in a CityState(heroicus)", "(Birth(Herodicus,City) & BornIn(Herodicus,City))", "(Birth(herodicus) & CityState(heroicus))", "Herodicus was born in CityState(heroicus)", "all x y.((Herodicus(x) & CityState(y)) -> BornIn(x,y))", "Herodicus was born in a CityState(heroicus)", "all x.(Herodicus(x) -> BornInCityState(x))"]}
{"id": "folio_train_1934", "nl": "Herodicus did not recommend massages.", "fol": "-RecommendedBy(Herodicus,Massages)", "prediction": ["(-RecommendsMassages(Herodicus))", "all x.(Herodicus(x) -> -RecommendsMassages(x))", "Herodicus -RecommendsMassages(heroicus)", "(Herodicus) -RecommendsMassages(Herodicus))", "(Herodicus() & -RecommendsMassages())", "(-RecommendedMassages(Herodicus))", "(-RecommendsMassages(Herodicus))", "all x.(Herodicus(x) -> -RecommendsMassages(x))", "Herodicus neassistedMassage(n)", "-RecommendsMassages(herodicus)", "(-recommendedMassages(Herodicus))", "all x.(Herodicus(x) -> -RecommendsMassages(x))", "-RecommendsMassage(herodicus)", "(-recommendedMassages(Herodicus))", "-RecommendsMassages(Herodicus)", "-RecommendsMassage(heroicus,x))"]}
{"id": "folio_train_1935", "nl": "Herodicus was born in a colony of a city-state.", "fol": "exists x.(BornIn(Herodicus,x) & exists y.(IsCityState(y) & IsColonyOf(x,y)))", "prediction": ["all x y.((Herodicus(x) & CityState(y)) -> BornIn(x,y))", "all x.(Herodicus(x) -> BornInColonyOfCityState(x))", "all x y z.((Herodicus(x) & Colony(y) & CityState(z)) -> BornIn(x,y,z))", "(bornInColonyOfCityState(herodicus) -> BornInColony(heroicus))", "(Birth(Herodicus) -> BornInColony(Herodicus))", "(Birth(Herodicus) & BornInColony(Herodicus) & CityState(Herodicus))", "Herodicus was born in a colony of city-state.", "all x.(Herodicus(x) -> BornInColonyOfCityState(x))", "(Herodicus) s BornInColonyOfCityState(herodicus))", "(bornInColony(Herodicus,CityState) -> BornIn(Herodicus,CityState))", "all x y.((Herodicus(x) & CityState(y)) -> BornInColony(x,y))", "all x.(Herodicus(x) -> (Birth(x) & InColony(x) & CityState(x)))", "Herodicus was born in a colony of a city-state.", "all x y z.((Herodicus(x) & Colony(y) & CityState(z)) -> BornIn(x,y,z))", "(Birth(herodicus) -> BornInColony(heroicus,cityState))", "all x.(Herodicus(x) -> BornInColonyOfCityState(x))"]}
{"id": "folio_train_1936", "nl": "No kid loves the Opera.", "fol": "all x.(IsKid(x) -> -LovesOpera(x))", "prediction": ["-exists x.(Kid(x) & LovesOpera(x))", "all x.(Kid(x) -> LovesOpera(x))", "KeenKidLovesOpera(x)", "-(Kid(x) & LovesOpera(x))", "(Kid(k) & LovesOpera(k))", "-exists x.(Kid(x) & LovesOpera(x))", "-LikesOpera(kid)", "KeenKidLovesOpera(x)", "-exists x.(Kid(x) & LovesOpera(x))", "-(Kid(k) & Opera(k))", "(NoKidLikesOpera(Kid))", "KeenKidLovesOpera(x)", "-LikesOpera(kid)", "-exists x.(Kid(x) & LovesOpera(x))", "-exists x.(Kid(x) & LovesOpera(x))", "-exists x.(Kid(x) & LovesOpera(x))"]}
{"id": "folio_train_1937", "nl": "All adults love the Opera.", "fol": "all x.(IsAdult(x) -> LovesOpera(x))", "prediction": ["all x.(Adult(x) -> LovesOpera(x))", "all x.(Adult(x) -> LovesOpera(x))", "all x.((Adult(x) & LovesOpera(x)) -> LovesOpera(x))", "(all x.(Adult(x) -> LovesOpera(x)))", "all x y.((Adult(x) & Opera(y)) -> Loves(x,y))", "all x.(Adult(x) -> LovesOpera(x))", "(all x.(Adult(x) -> LovesOpera(x)))", "all x y.((Adult(x) & Opera(y)) -> Love(x,y))", "all x.(Adult(x) -> LovesOpera(x))", "exists x.(adult(x) & LovesOpera(x))", "(All x.(Adult(x) -> LovesOpera(x))", "all x.(Adult(x) -> LoveOpera(x))", "all x.(Adult(x) -> LovesOpera(x))", "all x.(Adult(x) -> LovesOpera(x))", "all x.(Adult(x) -> LoveOpera(x))", "all x.(Adult(x) -> LovesOpera(x))"]}
{"id": "folio_train_1938", "nl": "If someone is a scientist, then they are an adult.", "fol": "all x.(IsScientist(x) -> IsAdult(x))", "prediction": ["all x.(Scientist(x) -> Adult(x))", "all x.((Scientist(x) & Adult(x)) -> Scientist(x))", "all x.(Scientist(x) -> Adult(x))", "all x.(Scientist(x) -> Adult(x))", "all x.((Scientist(x) & Adult(x)) -> Scientist(x))", "exists x y.(Scientist(x) & Adult(y))", "all x.(Scientist(x) -> Adult(x))", "all x.((Scientist(x) & Adult(x)) -> Scientist(x))", "all x.(Scientist(x) -> Adult(x))", "all x.((Scientist(x) & Adult(x)) -> Scientist(x))", "all x.((Scientist(x) & Adult(x)) -> Scientist(x))", "all x.(Scientist(x) -> Adult(x))", "all x.((Scientist(x) & Adult(x)) -> Scientist(x))", "all x.(Scientist(x) -> Adult(x))", "exists x.(Scientist(x) & Adult(x))", "all x.(Scientist(x) -> Adult(x))"]}
{"id": "folio_train_1939", "nl": "Some students are kids.", "fol": "exists x.(IsStudent(x) & IsKid(x))", "prediction": ["exists x.(Student(x) & Kid(x))", "exists x.(Student(x) & Kid(x))", "exists x.(Student(x) & Kid(x))", "exists x.(Student(x) & Kid(x))", "exists x y.(Student(x) & Student(y) & Kid(x))", "exists x.(Student(x) & Kid(x))", "exists x.(Student(x) & Kid(x))", "exists x.(Student(x) & Kid(x))", "exists x.(Student(x) & Kid(x))", "exists x.(Student(x) & Kids(x))", "exists x.(Student(x) & Kid(x))", "exists x.(Student(x) & Kids(x))", "exists x.(Student(x) & Kid(x))", "exists x.(Student(x) & Kids(x))", "exists x.(Student(x) & Kid(x))", "exists x.(Student(x) & Kids(x))"]}
{"id": "folio_train_1940", "nl": "Billy is a kid.", "fol": "IsKid(Billy)", "prediction": ["all x.(Billy(x) -> Kid(x))", "(Kid(Billiam) & Kid(Billiam))", "Billy is a Kid.", "Billy is Kid(Billy)", "all x.(Billy(x) -> Kid(x))", "all x.((Billy(x) & Kid(x)) -> Kid(x))", "(Kid(Billiam) & Kid(Billiam))", "Billy is a kid.", "Billy isKid(Billiam)", "all x.(Billy(x) -> Kid(x))", "all x.((Billy(x) & Kid(x)) -> Kid(x))", "(Kid(Billiam)", "Billy is kid.", "(Kid(Billy)", "all x.(Billy(x) -> Kid(x))", "(Kid(Billiam)"]}
{"id": "folio_train_1941", "nl": "Billy is a student.", "fol": "IsStudent(Billy)", "prediction": ["all x.(Billy(x) -> Student(x))", "(Student(Billiam) & Student(Billiam))", "Billy is Student(Billy)", "all x.((Billy(x) & Student(x)) -> Student(x))", "(Student(Billiam) & -Student(Billiam))", "Billy is Student(Billiam)", "all x.((Billiam(x) & Student(x)) -> Student(x))", "all x.((Billy(x) & Student(x)) -> -Student(x))", "(Student(Billy)", "Billy is Student(Billy)", "all x.(Student(x) -> Billy(x))", "Billy is student.", "Billy is student(Billiam)", "(Student(Billiam)", "(Student(Billy)", "(Student(Billiam)"]}
{"id": "folio_train_1942", "nl": "Billy is a student and a scientist.", "fol": "(IsStudent(Billy) & IsScientist(Billy))", "prediction": ["(Student(Billy) & Scientist(Billy))", "all x.(Billy(x) -> (Student(x) & Scientist(x)))", "(Student(Billiam) & Scientist(Billiam))", "all x.((Billy(x) & Student(x) & Scientist(x)) -> Student(x))", "Billy is a student and a scientist.", "all x.((Billiam(x) & Student(x) & Scientist(x)) -> Student(x))", "(Student(Billiam) & Scientist(Billiam))", "all x.((Billy(x) & Student(x) & Scientist(x)) -> Scientist(x))", "Billy is a student and a scientist.", "(Student(Billy) & Scientist(Billy))", "all x.(Bully(x) -> (Student(x) & Scientist(x)))", "(Student(Billiam) & Scientist(Billiam))", "all x.((Billy(x) & Student(x) & Scientist(x)) -> Student(x))", "(Student(Billy) & Scientist(Billy))", "(Student(Billiam) & Scientist(Billiam))", "(Student(Billy) & Scientist(Billy))"]}
{"id": "folio_train_1943", "nl": "If Billy is a student or a scientist, then Billy is a student and a kid.", "fol": "((IsStudent(Billy) | IsScientist(Billy)) -> (IsStudent(Billy) & IsKid(Billy)))", "prediction": ["all x.((Student(x) | Scientist(x)) -> (Student(x) & Kid(x)))", "all x.((Billy(x) & (Student(x) | Scientist(x))) -> (Student(x) & Kid(x)))", "all x.((Student(x) | Scientist(x)) -> (Student(x) & Kid(x)))", "((Student(Billiam) | Scientist(Billiam))) -> (Student(Billiam) & Kid(Billiam)))", "((Student(Billy) | Scientist(Billy))) -> (Student(Billy) & Kid(Billy)))", "all x.(Student(x) | Scientist(x)) -> (Student(x) & Kid(x)))", "(StudentOrScientist(Billy) -> (Student(Billy) & Kid(Billy)))", "all x y.((Student(x) | Scientist(x)) -> (Student(x) & Kid(y)))", "all x.((Student(x) | Scientist(x)) -> (Student(x) & Kid(x)))", "all x.((Billy(x) & (Student(x) | Scientist(x))) -> (Student(x) & Kid(x)))", "all x.(Student(x) | Scientist(x)) -> (Student(x) & Kid(x)))", "all x.((Student(x) | Scientist(x)) -> (Student(x) & Kid(x)))", "exists x.(Student(x) & (Scientist(x) | Student(x)))", "all x.(Student(x) | Scientist(x)) -> (Student(x) & Kid(x)))", "all x.((Student(x) | Scientist(x)) -> (Student(x) & Kid(x)))", "all x.((Student(x) | Scientist(x)) -> (Student(x) & Kid(x)))"]}
{"id": "folio_train_1944", "nl": "Brian Winter is a Scottish football referee.", "fol": "(IsScottish(Brianwinter) & IsFootballReferee(Brianwinter))", "prediction": ["all x.((BrianWinter(x) & ScottishFootballReferee(x)) -> Referee(x))", "Brian Winter is a ScottishFootballReferee(BrianWinter)", "(ScottishFootballReferee(BrianWinter)", "BrianWinter(b) & ScottishFootballReferee(c))", "BrianWinter(BrianWinter) & ScottishFootballReferee(BrianWinter)", "all x.((BrianWinter(x) & ScottishFootballReferee(x)) -> Referee(x))", "(Referee(BrianWinter) & ScottishFootball(BrianWinter))", "Brian Winter is a ScottishFootballReferee(BrianWinter)", "(ScottishFootballReferee(BrianWinter)", "all x.(ScottishFootballReferee(x) -> BrianWinter(x))", "BrianWinter(b) & ScottishFootballReferee(c))", "Brian Winter is ScottishFootballReferee(b) & -ScottishFootballReferee(c))", "all x.((BrianWinter(x) & ScottishFootballReferee(x)) -> Referee(x))", "Brian Winter is a ScottishFootballReferee(BrianWinter)", "(ScottishFootballReferee(BrianWinter)", "Brian Winter (ScottishFootballReferee)"]}
{"id": "folio_train_1945", "nl": "After being injured, Brian Winter retired in 2012.", "fol": "(IsInjured(Brianwinter) & IsRetired(Brianwinter))", "prediction": ["(Injured(BrianWinter) & BrianWinter(BrianWinter))", "all x.((Injured(x) & BrianWinter(x)) -> Retired(x))", "Brian Winter, who was injured, retired in 2012.", "After being injured, Brian Winter retired in 2012.", "Having been injured, Brian Winter retired in 2012.", "(Injured(BrianWinter) & RetiredIn2012(BrianWinter))", "Brian Winter, injured and injured, retired in 2012.", "Brian Winter, who was injured, retired in 2012.", "(Injured(BrianWinter) & BrianWinter(BrianWinn))", "Brian Winter (injured) & BrianWinterRetired(BrianWinter,2012))", "Brian Winter retired in 2012 after being injured and Brian Winter retired in 2012.", "Having been injured, Brian Winter retired in 2012.", "(Injured(BrianWinnison) & BrianWinter(BrianWinnison))", "(Injured(BrianWinter) & BrianRetired(BrianWinter))", "Brian Winter, who was injured, retired from the Army in 2012.", "Having been injured, Brian Winter retired in 2012."]}
{"id": "folio_train_1946", "nl": "Brian Winter was appointed as a referee observer after his retirement.", "fol": "IsRefereeObserver(Brianwinter)", "prediction": ["all x.((BrianWinter(x) & Retirement(x)) -> RefereeObserver(x))", "Brian Winter was appointed as RefereeObserver after retirement.", "(AppointedRefereeObserver(BrianWinter) & Retirement(BrianWinter))", "(Retirement(BrianWinter) & AppointedRefereeObserver(BrianWinter))", "all x y.((BrianWinter(x) & Retirement(y)) -> RefereeObserver(x,y))", "Brian Winter (retirement) & appointed RefereeObserver(BrianWinter))", "(AppointedAsRefereeObserver(BrianWinter)", "all x.((BrianWinter(x) & Retirement(x)) -> RefereeObserver(x))", "Brian Winter was appointed as RefereeObserver after his retirement.", "BrianWinter(BrianWinter) & AppointedRefereeObserver(BrianWinter)", "(Retirement(BrianWinter) -> RefereeObserver(BrianWinter))", "all x.(Retirement(x) -> RefereeObserver(x))", "Brian Winter was appointed as refereeObserver after retirement.", "all x.((BrianWinter(x) & Retirement(x)) -> RefereeObserver(x))", "Brian Winter was appointed as RefereeObserver (after retirement)", "Brian Winter was appointed as refereeobserver after his retirement."]}
{"id": "folio_train_1947", "nl": "Some football referees become referee observers.", "fol": "exists x.(IsFootballReferee(x) & IsRefereeObserver(x))", "prediction": ["exists x.(FootballReferee(x) & RefereeObserver(x))", "exists x y.(FootballReferee(x) & RefereeObserver(y))", "exists x.(FootballReferee(x) & RefereeObserver(x))", "exists x.(FootballReferee(x) & BecomesRefereeObserver(x))", "exists x y.(FootballReferee(x) & RefereeObserver(y))", "exists x.(FootballReferee(x) & RefereeObserver(x))", "exists x.(FootballReferee(x) & RefereeObserver(x))", "exists x.(FootballReferee(x) & BecomesRefereeObserver(x))", "exists x.(FootballReferee(x) & BecomesRefereeObserver(x))", "exists x y.(FootballReferee(x) & FootballRefereeObserver(y) & BelongsTo(x,y))", "exists x y.(FootballReferee(x) & RefereeObserver(y))", "exists x.(FootballReferee(x) & RefereeObserver(x))", "exists x.(FootballReferee(x) & BelongsToRefereeObserver(x))", "exists x.(FootballReferee(x) & RefereeObserver(x))", "exists x.(FootballReferee(x) & RefereeObserver(x))", "exists x.(FootballReferee(x) & RefereeObserver(x))"]}
{"id": "folio_train_1948", "nl": "The son of Brian Winter, Andy Winter, is a football player who plays for Hamilton Academical.", "fol": "(HasSon(Andywinter,Brianwinter) & IsFootballPlayer(Andywinter) & PlaysForTeam(Andywinter,Hamiltonacademical))", "prediction": ["all x.((SonOfBrianWinter(x) & AndyWinter(x)) -> (FootballPlayer(x) & PlaysForHamiltonAcademical(x)))", "(SonOfBrianWinter(SonOfAndyWinter) & FootballPlayer(Anderson) & PlaysForHamiltonAcademical(Anderson))", "Andy Winter, sonOfBrianWinter, playsForHamiltonAcademical.com.", "Andy Winter, sonOfBrianWinter(x) & FootballPlayer(x) & PlaysForHamiltonAcademical(x))", "((SonOf(SonOfBrianWinter(SonOf(SonOf(SonOf(SonOf(SonOf(SonOf(SonOf(SonOf(SonOf(SonOf(SonOf(SonOf(SonOf(SonOf(SonOf(SonOf(SonOf(SonOf(SonOf(SonOf(SonOf(SonOf(SonOf(SonOf(SonOf(SonOf(SonOf(SonOf(SonOf(SonOf(SonOf(SonOf(SonOf(SonOf(SonOf(SonOf(SonOf(SonOf(SonOf(SonOf))))))", "Andy Winter, sonOfBrianWinter, is FootballPlayer(x) & PlaysForHamiltonAcademical(x))", "(SonOfBrianWinter(s) & AndyWinter(s) & PlaysForHamiltonAcademical(s))", "all x.((SonOfBrianWinter(x) & AndyWinter(x)) -> (FootballPlayer(x) & PlaysForHamiltonAcademical(x)))", "(SonOfBrianWinter(SonOfAndyWinter) & FootballPlayer(Anderson) & PlaysForHamiltonAcademical(Anderson))", "Andy Winter, son of Brian Winter, is a football player who plays for Hamilton Academical.", "(SolonOfBrianWarren(SonOfAndyWarren) & FootballPlayer(Anderson) & PlaysForHamiltonAcademical(Anderson))", "(SonOfBrianWinter(SonOfAndyWinter) & FootballPlayer(AndersonWinter) & PlaysForHamiltonAcademical(Anderson))", "(SonOfBrianWinterAndy(Andy)) - FootballPlayer(AndPlaysForHamiltonAcademical(Anderson,Brian))", "All x.((SonOfBrianWinter(x) & AndyWinter(x)) -> FootballPlayer(x))", "Andy Winter (sonOfBrianWinter(x) & FootballPlayer(x) & PlaysForHamiltonAcademical(x))", "(SonOfBrianWarren(son) & AndyWarren(son) & FootballPlayer(son, HamiltonAcademic))"]}
{"id": "folio_train_1949", "nl": "There is a son of a referee observer that plays football.", "fol": "exists x y.(IsRefereeObserver(y) & HasSon(x,y) & IsFootballPlayer(x))", "prediction": ["exists x.(SonOfRefereeObserver(x) & PlaysFootball(x))", "exists x y.(Son(x) & RefereeObserver(y) & RefereeObserver(x,y) & PlaysFootball(x))", "exists x y.((Son(x) & RefereeObserver(y) & Referee(y)) -> PlaysFootball(x))", "exists x.(RefereeObserverSon(x) & PlaysFootball(x))", "all x y z.((Son(x) & RefereeObserver(y) & Referee(z) & Referee(z)) -> PlaysFootball(x))", "exists x y.(Son(x) & RefereeObserver(y) & PlaysFootball(x))", "exists x.(SonOfRefereeObserver(x) & PlaysFootball(x))", "exists x.(SonOfRefereeObserver(x) & PlaysFootball(x))", "exists x y.(Son(x,y) & RefereeObserver(y) & RefereeObserver(z) & PlaysFootball(x))", "all x y z.((Son(x) & RefereeObserver(y) & Referee(z) & Referee(y) & Observer(z)) -> PlaysFootball(x))", "exists x y.(Son(x,y) & RefereeObserver(y) & RefereeObserver(y) & PlaysFootball(x))", "exists x y.((Son(x) & RefereeObserver(y) & Referee(y)) -> PlaysFootball(x))", "exists x.(SonOfRefereeObserver(x) & PlaysFootball(x))", "exists x.(RefereeObserverSon(x) & PlaysFootball(x))", "exists x.(SonOfRefereeObserver(x) & PlaysFootball(x))", "exists x.(SonOfRefereeObserver(x) & PlaysFootball(x))"]}
{"id": "folio_train_1950", "nl": "Brian Winter is not a referee observer.", "fol": "-IsRefereeObserver(Brianwinter)", "prediction": ["all x.((BrianWinter(x) & -RefereeObserver(x)) -> -RefereeObserver(x))", "Brian Winter is not a refereeObserver.", "(-RefereeObserver(BrianWinter))", "BrianWinter(b) & -RefereeObserver(b))", "BrianWinter(BrianWinter) & -RefereeObserver(BrianWinter))", "Brian Winter is not refereeObserver(BrianWinter)", "all x.((BrianWinter(x) & -RefereeObserver(x)) -> -RefereeObserver(x))", "(-RefereeObserver(BrianWinter))", "Brian Winter is not a refereeObserver.", "-RefereeObserver(BrianWinter)", "all x.((BrianWinter(x) & -RefereeObserver(x)) -> -RefereeObserver(x))", "Brian Winter is not refereeObserver.", "(-RefereeObserver(BrianWinter))", "-RefereeObserver(BrianWinnison)", "-RefereeObserver(BronwynWinter)", "(-RefereeObserver(BrianWinter)"]}
{"id": "folio_train_1951", "nl": "Brian Winter is retired.", "fol": "IsRetired(Brianwinter)", "prediction": ["Brian Winter is retired.", "(Retired(BrianWinter)", "BrianWinter(b) & Retired(b))", "All x.((BrianWinter(x) & Retired(x)) -> Retirement(x))", "Brian Winter is retired.", "-Retired(BrianWinter)", "BrianWinter(Brian) & Retired(Brian)", "(Retired(BrianWinter)", "BrianWinter isRetired(BrianWinter)", "all x.((BrianWinter(x) & Retired(x)) -> Retired(x))", "Brian Winter is retired.", "(Retired(BrianWinter)", "Brian Winter is retired.", "(Retired(BrianWinter)", "Brian Winter is retired.", "Brian Winter is retired."]}
{"id": "folio_train_1952", "nl": "Andy Winter is a referee.", "fol": "Referee(Andywinter)", "prediction": ["(Referee(AndyWinter)", "Andy Winter is a Referee(Andy)", "all x.(Referee(x) -> AndyWinter(x))", "(Referee(AndyWinter)", "Andy Winter is a Referee(Andy)", "all x.(Referee(x) -> AndyWinter(x))", "Andy Winter is Referee(Andy)", "(Referee(AndyWinter)", "Andy Winter is a Referee(AndyWinter)", "Andy Winter (Referee)", "all x.(Referee(x) -> AndyWinter(x))", "(Referee(AndyWinter)", "all x.(Referee(x) -> AndyWinter(x))", "Andy Winter is a referee.", "(Referee(AndyWinter)", "all x.(Referee(x) -> AndyWinter(x))"]}
{"id": "folio_train_1953", "nl": "People are either interested in puzzles or bad at chess.", "fol": "all x.(InterestedInPuzzles(x) | BadAtChess(x))", "prediction": ["all x.(Puzzle(x) | BadChess(x))", "all x.(Person(x) -> (InterestsInPuzzles(x) | BadAtChess(x)))", "all x y.((Person(x) & Puzzle(y)) -> (Interesting(x,y) | BadAtChess(x,y)))", "all x.((Person(x) & (InterestsInPuzzles(x) | BadAtChess(x))) -> (InterestsInPuzzles(x) | BadAtChess(x)))", "exists x.(Person(x) & (InterestingInPuzzles(x) | BadAtChess(x)))", "(interestedInPuzzles(Person) | BadAtChess(Person))", "all x y.((Person(x) & Puzzle(y)) -> (InterestingIn(x,y) | BadAt(x,Chess)))", "all x.(Puzzle(x) | BadChess(x))", "all x y.((Person(x) & Puzzle(y) & (InterestingIn(x,y) | BadAt(x,Chess))) -> (InterestingIn(x,y) | BadAt(x,Chess)))", "exists x.(Person(x) & (InterestInPuzzles(x) | BadAtChess(x)))", "exists x.(People(x) & (InterestsInPuzzles(x) | BadAtChess(x)))", "exists x.(Person(x) & (InterestingInPuzzles(x) | BadAtChess(x)))", "all x y.((Person(x) & Puzzle(y)) -> (Interesting(x,y) | BadAtChess(x)))", "exists x.(People(x) & (InterestingPuzzles(x) | BadAtChess(x)))", "exists x.(People(x) & (InterestsInPuzzles(x) | BadAtChess(x)))", "exists x.(Puzzle(x) | BadChess(x))"]}
{"id": "folio_train_1954", "nl": "If a person is bad at chess, then they don't play a lot of chess.", "fol": "all x.(BadAtChess(x) -> -PlaysALotOfChess(x))", "prediction": ["all x.(BadAtChess(x) -> -PlaysLotOfChess(x))", "all x.((Person(x) & BadAtChess(x)) -> -PlaysLotOfChess(x))", "all x.(BadAtChess(x) -> -PlaysLotOfChess(x))", "all x y.((Person(x) & BadAtChess(x)) -> -PlaysLotOfChess(x,y))", "all x.((Person(x) & BadAtChess(x)) -> -PlaysLotOfChess(x))", "all x.(BadAtChess(x) -> -PlaysLotOfChess(x))", "all x y.((Person(x) & BadAtChess(x)) -> -PlaysLotOfChess(x,y))", "all x.((Person(x) & BadAtChess(x)) -> -PlaysLotOfChess(x))", "exists x.(Person(x) & BadAtChess(x) & -PlaysLotOfChess(x))", "all x.(BadAtChess(x) -> -PlaysLotOfChess(x))", "all x.(BadAtChest(x) -> -PlaysLotOfChest(x))", "all x.((Person(x) & BadAtChest(x)) -> -PlaysLotOfChest(x))", "all x.((Person(x) & BadAtChess(x)) -> -PlaysLotOfChess(x))", "all x.(BadAtChess(x) -> -PlaysLittleChess(x))", "all x.(BadAtChess(x) -> -PlaysLotOfChess(x))", "all x.((Person(x) & BadAtChess(x)) -> -PlaysLotOfChess(x))"]}
{"id": "folio_train_1955", "nl": "A person is either a planner or a creative person.", "fol": "all x.(IsAPlanner(x) | IsCreative(x))", "prediction": ["all x.(Person(x) -> (Planner(x) | CreativePerson(x)))", "all x.(Person(x) -> (Planner(x) | CreativePerson(x)))", "all x.(Person(x) -> (Planner(x) | CreativePerson(x)))", "exists x.(Person(x) & Planner(x) & CreativePerson(x))", "all x.(Person(x) -> (Planner(x) | Creative(x)))", "all x y.(Person(x) -> (Planner(x) | CreativePerson(x)))", "all x.(Planner(x) | CreativePerson(x))", "all x y.(Person(x) & Planner(y) & CreativePerson(x))", "all x.(Person(x) -> (Planner(x) | CreativePerson(x)))", "exists x.(Person(x) & Planner(x) & CreativePerson(x))", "all x.(Planner(x) | CreativePerson(x))", "exists x.(Person(x) & Planner(x) & CreativePerson(x))", "all x.(Planner(x) | CreativePerson(x))", "exists x.(Person(x) & (Planner(x) | Creative(x)))", "exists x.(Person(x) & Planner(x) & CreativePerson(x))", "exists x.(Person(x) & (Planner(x) | Creative(x)))"]}
{"id": "folio_train_1956", "nl": "Erica is someone who plays a lot of chess.", "fol": "PlaysALotOfChess(Erica)", "prediction": ["all x.(Erica(x) -> PlaysChess(x))", "all x.((Erica(x) & PlaysChess(x)) -> PlaysChess(x))", "(Plays(Erica,Chess) & LotsOf(Erica,Chess))", "(PlaysChess(Erica) | PlaysChess(Erica)))", "Erica is a chess player.", "all x.(Erica(x) -> PlaysChess(x))", "(PlaysChess(Erica) & LotsOfChess(Erica))", "Erica is a person who plays a lot of chess.", "all x.(Erica(x) -> PlaysLotsOfChess(x))", "all x.((Erica(x) & PlaysChess(x)) -> Plays(x,Chess))", "(PlaysChess(Erica,Chess) & LotsOf(Erica,Chess))", "(PlaysChess(Erica) | PlaysChess(Erica)))", "Erica playschess(erica)", "all x.(Erica(x) -> PlaysLotOfChess(x))", "all x.((Erica(x) & PlaysChess(x)) -> PlaysChess(x))", "exists x.(Erica(x) & Plays(x,Chess))"]}
{"id": "folio_train_1957", "nl": "If Erica is neither bad at chess nor creative, then Erica is either someone who plans and is creative, or someone who neither plans nor is creative.", "fol": "(-(BadAtChess(Erica) | IsCreative(Erica)) -> -((IsAPlanner(Erica) & -IsCreative(Erica)) | (-IsAPlanner(Erica) & IsCreative(Erica))))", "prediction": ["all x.((Erica(x) & -BadAtChess(x) & -Creative(x)) -> (Plans(x) | -Plans(x) | -Creative(x)))", "all x.((Erica(x) & -(BadAtChess(x) | Creative(x))) -> (Plans(x) | -Plans(x) | -Creative(x)))", "(BadAtChess(Erica) | Creative(Erica)) | (-BadAtChess(Erica) & Creative(Erica))))", "all x.((Erica(x) & -BadAtChess(x) & -Creative(x)) -> (Plans(x) | -Plans(x) & -Creative(x)))", "(-BadAtChess(Erica) & -Creative(Erica)) -> (Plans(Erica) | -Plans(Erica)))", "(BadAtChess(Erica) | Creative(Erica)) -> (Plans(Erica) | -Plans(Erica)))", "all x.(BadAtChess(x) -> (-BadAtChess(x) & -Creative(x)))", "all x.((ChessBad(x) | Creative(x)) -> (Plans(x) | -Plans(x) | -Creative(x)))", "(-BadAtChess(Erica) & -Creative(Erica)) -> (Plans(Erica) | -Plans(Erica) & -Creative(Erica)))", "all x.((Erica(x) & -(BadAtChess(x) | Creative(x))) -> (Plans(x) | -Plans(x) & Creative(x)))", "all x.((Erica(x) & (BadAtChess(x) | Creative(x))) | (-Plans(x) & Creative(x))))", "all x.((BadAtChess(x) | Creative(x)) -> (PlansAndCreative(x) | -PlansAndCreative(x)))", "all x.((Erica(x) & -BadAtChess(x) & -Creative(x)) -> (Plans(x) | -Plans(x) | -Creative(x)))", "all x y.((Erica(x) & (BadAtChess(x) | Creative(x))) -> (Plans(x,y) | -Plans(x,y) | -Creative(y)))", "all x.((Erica(x) & -BadAtChess(x) & -Creative(x)) -> (PlansAndCreative(x) | -PlansAndCreative(x)))", "all x.((Erica(x) & -(BadAtChess(x) | Creative(x))) -> (Plans(x) | -Plans(x) | -Creative(x)))"]}
{"id": "folio_train_1958", "nl": "Erica plans.", "fol": "IsAPlanner(Erica)", "prediction": ["all x.(Erica(x) -> Plans(x))", "(Plans(Erica) & -Plans(Erica))", "all x.(Erica(x) -> Plans(x))", "(Plans(Erica,Erica))", "all x.(EricaPlans(x) -> Planes(x))", "all x y.((Erica(x) & Plan(y)) -> Plans(x,y))", "all x.((Erica(x) & Plans(x)) -> Planes(x))", "-(EricaPlans(erica))", "EricaPlans.", "all x.(Erica(x) -> Plans(x))", "(Plans(Erica) & -Plans(Erica))", "Erica Plans(erica)", "(Plans(Erica,Erica))", "exists x.(Erica(x) & Planes(x))", "all x.(Erica(x) -> Plans(x))", "exists x.(Erica(x) & Plans(x))"]}
{"id": "folio_train_1959", "nl": "Erica is interested in puzzles and is creative.", "fol": "(InterestedInPuzzles(Erica) & IsCreative(Erica))", "prediction": ["all x.(Erica(x) -> (InterestsInPuzzles(x) & Creative(x)))", "(InterestingInPuzzles(Erica) & Creative(Erica))", "all x.((Erica(x) & InterestsInPuzzles(x) & Creative(x)) -> InterestedInPuzzles(x))", "Erica is interested in puzzles and creative.", "(InterestsInPuzzles(Erica) & Creative(Erica))", "(InterestingPuzzles(Erica) & Creative(Erica))", "all x.(Erica(x) -> (InterestsInPuzzles(x) & Creative(x)))", "all x y.((Erica(x) & Puzzle(y)) -> (InterestsIn(x,y) & Creative(x)))", "all x.((Erica(x) & InterestsInPuzzles(x) & Creative(x)) -> InterestsInPuzzles(x))", "Erica is interested in puzzles and creative.", "exists x.(Erica(x) & InterestsInPuzzles(x) & Creative(x))", "(InterestingInPuzzles(Erica) & Creative(Erica))", "(InterestingPuzzles(Erica) & Creative(Erica))", "all x.(Erica(x) -> (InterestsInPuzzles(x) & Creative(x)))", "(InterestsInPuzzles(Erica) & Creative(Erica))", "(InterestsInPuzzles(Erica) & Creative(Erica))"]}
{"id": "folio_train_1960", "nl": "Erica is either interested in puzzles or is creative.", "fol": "(InterestedInPuzzles(Erica) | IsCreative(Erica))", "prediction": ["all x.(Erica(x) -> (InterestsInPuzzles(x) | Creative(x)))", "(InterestingInPuzzles(Erica) | Creative(Erica))", "all x.((Erica(x) & (InterestsInPuzzles(x) | Creative(x))) -> (InterestsInPuzzles(x)))", "all x.(Erica(x) -> (InterestsInPuzzles(x) | Creative(x)))", "(InterestingInPuzzles(Erica) | Creative(Erica))", "all x y.((Erica(x) & Puzzle(y)) -> (InterestingIn(x,y) | Creative(x)))", "(InterestingPuzzles(Erica) | Creative(Erica))", "exists x.(Elica(x) & (InterestsInPuzzles(x) | Creative(x)))", "all x.((Erica(x) & (InterestsInPuzzles(x) | Creative(x))) -> (InterestsInPuzzles(x)))", "(InterestingInPuzzles(Erica) | Creative(Erica))", "all x.(Erica(x) -> (InterestingInPuzzles(x) | Creative(x)))", "all x.((Erica(x) & (InterestingInPuzzles(x) | Creative(x))) -> InterestedIn(x))", "exists x.(Erica(x) & (InterestsInPuzzles(x) | Creative(x)))", "(InterestingInPuzzles(Erica) | Creative(Erica))", "(interestedInPuzzles(Erica) | Creative(Erica))", "exists x.(Erica(x) & (InterestingInPuzzles(x) | Creative(x)))"]}
{"id": "folio_train_1961", "nl": "If Erica plans ahead or plays a lot of chess matches, then Erica is not interested in puzzles and creative.", "fol": "((IsAPlanner(Erica) | PlaysALotOfChess(Erica)) -> -(InterestedInPuzzles(Erica) & IsCreative(Erica)))", "prediction": ["all x.((Erica(x) & (PlansAhead(x) | PlaysLotsOfChessMatches(x))) -> -InterestsInPuzzles(x) & -InterestsInCreative(x))", "all x.((Erica(x) & PlansAhead(x) | PlaysLotsOfChessMatches(x)) -> -InterestsInPuzzlesAndCreative(x))", "all x y.((Erica(x) & PlanesAhead(x) & PlaysLotsOfChessMatches(x)) -> -InterestsInPuzzlesAndCreative(y))", "all x.((EricaPlansAhead(x) | PlaysLotsOfChessMatches(x)) -> -InterestsInPuzzlesAndCreative(x))", "all x.((Erica(x) & PlansAheadOrPlaysLotsOfChessMatches(x)) -> -InterestsInPuzzlesAndCreative(x))", "all x.((Erica(x) & (PlansAhead(x) | PlaysLotsOfChessMatches(x))) -> -InterestingInPuzzles(x) & -Creative(x))", "all x y.((Erica(x) & (PlansAhead(x) | PlaysLotsOfChessMatches(x))) -> -InterestingInPuzzles(x) & -Creative(y))", "all x.((PlansAhead(x) | PlaysLotsOfChessMatches(x)) -> -InterestsInPuzzlesAndCreative(x))", "all x.(PlansAheadOrPlaysLotsOfChessMatches(x) -> -InterestsInPuzzlesAndCreative(x))", "(all x.((Erica(x) & PlansAhead(x)) | PlaysLotsOfChessMatch(x)) -> -InterestsInPuzzlesAndCreative(x)))", "(all x.((Erica(x) & PlansAhead(x) | PlaysLotsOfChessMatches(x))) -> -InterestingInPuzzlesAndCreative(x))", "all x.((Erica(x) & PlansAhead(x) & PlaysLotsOfChessMatches(x)) -> (-InterestsInPuzzles(x) & -InterestsInCreative(x)))", "all x y.((Erica(x) & PlanesAheadOrPlaysLotsOfChessMatches(x)) -> (-InterestsInPuzzles(y) & -Creative(y)))", "all x.((EricaPlansAhead(x) | PlaysLotsOfChessMatches(x)) -> -InterestsInPuzzlesAndCreative(x))", "all x y.((Erica(x) & (PlansAhead(x) | PlaysLotsOfChessMatches(x))) -> -InterestingInPuzzles(x) & -InterestingInCreative(y))", "all x.((Erica(x) & (PlansAhead(x) | PlaysLotsOfChessMatches(x))) -> -InterestsInPuzzles(x) & -InterestsInCreative(x))"]}
{"id": "folio_train_1962", "nl": "If Erica is creative, then Erica is not interested in puzzles and creative.", "fol": "(IsCreative(Erica) -> (-InterestedInPuzzles(Erica) & IsCreative(Erica)))", "prediction": ["all x.((Erica(x) & Creative(x)) -> -InterestsInPuzzles(x) & -InterestsInCreative(x))", "all x.(Creative(x) -> (-InterestsInPuzzles(x) & -InterestsInCreative(x)))", "(-InterestsInPuzzles(Erica) & -InterestsInCreative(Erica))", "(Creative(Erica) -> -InterestsInPuzzles(Erica))", "all x.((Erica(x) & Creative(x)) -> -InterestsInPuzzles(x) & -InterestsInCreative(x))", "all x.(Creative(x) -> -InterestsInPuzzlesAndCreative(x))", "-(Creative(Erica) & -Puzzles(Erica) & Creative(Erica))", "(CreativeErica(erica,puzzles) & CreativeErica(erica,puzzles))", "all x.((Creative(x) & -InterestsInPuzzles(x) & -InterestsInCreative(x)) -> -InterestsInCreative(x))", "all x.((Erica(x) & Creative(x)) -> -(InterestsInPuzzles(x) & -InterestsInCreative(x)))", "all x.(Creative(x) -> (-InterestsInPuzzles(x) & -InterestsInCreative(x)))", "all x.((Erica(x) & Creative(x)) -> (-InterestsInPuzzles(x) & -InterestsInCreative(x)))", "(all x.(Creative(x) -> -InterestsInPuzzles(x)))", "all x.(Creative(x) -> -InterestingInPuzzlesAndCreative(x))", "all x.((Erica(x) & Creative(x)) -> (-InterestsInPuzzles(x) & -InterestsInCreative(x)))", "all x.(Creative(x) -> (-InterestsInPuzzles(x) & -InterestsInCreative(x)))"]}
{"id": "folio_train_1963", "nl": "If Erica is interested in puzzles and is creative, then Erica is not creative.", "fol": "((InterestedInPuzzles(Erica) & IsCreative(Erica)) -> -IsCreative(Erica))", "prediction": ["all x.((Erica(x) & InterestInPuzzles(x) & Creative(x)) -> -Creative(x))", "all x.((Erica(x) & InterestsInPuzzles(x) & Creative(x)) -> -Creative(x))", "all x.((Elica(x) & InterestInPuzzles(x) & Creative(x)) -> -Creative(x))", "all x.((Erica(x) & InterestInPuzzles(x) & Creative(x)) -> -Creative(x))", "all x y.((Erica(x) & Puzzle(y) & InterestingIn(x,y) & Creative(x)) -> -Creative(x))", "all x.((Erica(x) & InterestsInPuzzles(x) & Creative(x)) -> -Creative(x))", "all x.((InterestsInPuzzles(x) & Creative(x)) -> -Creative(x))", "all x.((Erica(x) & InterestsInPuzzles(x) & Creative(x)) -> -Creative(x))", "all x.((Elizabeth(x) & InterestsInPuzzles(x) & Creative(x)) -> -Creative(x))", "(all x.((Erica(x) & InterestInPuzzles(x) & Creative(x)) -> -Creative(x))", "all x.((Elica(x) & InterestsInPuzzles(x) & Creative(x)) -> -Creative(x))", "all x y.((Erica(x) & InterestInPuzzles(x) & Creative(x)) -> -Creative(y))", "(all x.((Erica(x) & InterestInPuzzles(x) & Creative(x)) -> -Creative(x))", "all x.((Erica(x) & InterestingInPuzzles(x) & Creative(x)) -> -Creative(x))", "exists x.(Puzzle(x) & Interest(x) & Creative(x))", "(all x.((Erica(x) & InterestInPuzzles(x) & Creative(x)) -> -Creative(x))"]}
{"id": "folio_train_1964", "nl": "If Erica either plays a lot of chess matches or is creative, then Erica is neither interested in puzzles nor a person who plays a lot of chess matches.", "fol": "((PlaysALotOfChess(Erica) | IsCreative(Erica)) -> (-InterestedInPuzzles(Erica) & -PlaysALotOfChess(Erica)))", "prediction": ["all x.((Erica(x) & (PlaysLotOfChessMatches(x) | Creative(x))) -> (-InterestingInPuzzles(x) & -PlaysLotOfChessMatches(x)))", "all x.((Puzzles(x) | Creative(x)) -> (-InterestingIn(x,Puzzles) & -PlaysLotsOfChessMatches(x)))", "((PlaysLotOfChessMatches(Erica) | Creative(Erica)) -> -(InterestedInPuzzles(Erica) | PlaysLotOfChessMatches(Erica))))", "all x.((PlaysLotOfChessMatches(x) | Creative(x)) -> (-InterestingInPuzzles(x) & -PlaysLotOfChessMatches(x)))", "all x.((Erica(x) & (PlaysLotsOfChessMatches(x) | Creative(x))) -> (-InterestingInPuzzles(x) & -PlaysLotsOfChessMatches(x)))", "all x y.((Erica(x) & (PlaysLotOfChessMatches(x) | Creative(x))) -> (-InterestingInPuzzles(x) & -PlaysLotOfChessMatches(x)))", "all x y.((Puzzle(x) & Person(y) & (PlaysLotOfChessMatches(x,y) | Creative(x,y))) -> -(InterestingInPuzzles(y) | PlaysLotOfChessMatches(y))))", "((PlaysLotsOfChessMatches(Erica) | Creative(Erica)) -> -(InterestedInPuzzles(Erica) | PlaysLotsOfChessMatches(Erica))))", "all x.((Erica(x) & (PlaysLotOfChessMatches(x) | Creative(x))) -> (-InterestingInPuzzles(x) & -PlaysLotOfChessMatches(x)))", "all x.((PlaysLotsOfChessMatches(x) | Creative(x)) -> (-InterestingInPuzzles(x) & -PlaysLotsOfChessMatches(x)))", "all x.(PlaysLotOfChessMatchesOrCreative(x) -> (-InterestingInPuzzles(x) | PlaysLotOfChessMatches(x)))", "all x.((Puzzles(x) | Creative(x)) -> -(InterestedIn(x,Puzzles) | PlaysLotsOfChessMatches(x))))", "(all x.((Erica(x) & (PlaysLotOfChessMatches(x) | Creative(x))) -> -(InterestedInPuzzles(x) | PlaysLotOfChessMatches(x))))", "all x.((Erica(x) & (PlaysLittleChessMatches(x) | Creative(x))) -> (-InterestingInPuzzles(x) & -PlaysLittleChessMatches(x)))", "all x.((Erica(x) & (PlaysLotOfChessMatches(x) | Creative(x))) -> -(InterestedInPuzzles(x) | PlaysLotOfChessMatches(x))))", "all x.((Puzzles(x) & -(Puzzles(x) | Creative(x))) -> -Puzzles(x) & -Puzzles(x) & -Puzzles(x)))"]}
{"id": "folio_train_1965", "nl": "If Erica is interested in puzzles and plays a lot of chess matches, then Erica is either a person who plays a lot of chess matches or a person that is creative.", "fol": "((InterestedInPuzzles(Erica) & PlaysALotOfChess(Erica)) -> (PlaysALotOfChess(Erica) | IsCreative(Erica)))", "prediction": ["all x.((Puzzles(x) & PlaysLotsOfChessMatches(x)) -> (PlaysLotsOfChessMatches(x) | Creative(x)))", "all x.((Erica(x) & InterestsInPuzzles(x) & PlaysLotsOfChessMatches(x)) -> (PlaysLotsOfChessMatches(x) | Creative(x)))", "all x.((Erica(x) & InterestingInPuzzles(x) & PlaysLotsOfChessMatches(x)) -> (PlaysLotsOfChessMatches(x) | Creative(x)))", "all x y.((Puzzles(x) & ChessMatch(y) & Interest(x,y) & Plays(x,y)) -> (Plays(x,y) | Creative(x,y)))", "all x.((InquiredInPuzzles(x) & PlaysLotsOfChessMatches(x)) -> (PlaysLotsOfChessMatches(x) | Creative(x)))", "all x.((Puzzles(x) & PlaysLotsOfChessMatches(x)) -> (PlaysLotsOfChessMatches(x) | Creative(x)))", "all x.((Puzzles(x) & PlaysLotsOfChessMatches(x)) -> (Person(x) & PlaysLotsOfChessMatches(x) | Creative(x)))", "(InterestingInPuzzles(Erica) & PlaysLotsOfChessMatches(Erica) -> (PlaysLotsOfChessMatches(Erica) | Creative(Erica)))", "all x.((PuzzleInterest(x) & PlaysLotsOfChessMatches(x)) -> (PlaysLotsOfChessMatches(x) | Creative(x)))", "all x.((Erica(x) & InterestInPuzzles(x) & PlaysLotOfChessMatches(x)) -> (PlaysLotOfChessMatches(x) | Creative(x)))", "all x y.((Puzzle(x) & ChessMatch(y) & Interest(x,y) & PlaysLots(x,y)) -> (PlaysLots(x,y) | Creative(x,y)))", "all x.(InterestingInPuzzlesAndPlaysLotsOfChessMatches(x) -> (Person(x) & PlaysLotsOfChessMatches(x) | Creative(x)))", "all x y.((Erica(x) & InterestInPuzzles(x) & PlaysLotsOfChessMatches(x)) -> (PlaysLotsOfChessMatches(x,y) | Creative(x,y)))", "all x.((InterestingInPuzzles(x) & PlaysLotsOfChessMatches(x)) -> (PlaysLotsOfChessMatches(x) | Creative(x)))", "exists x.(Puzzles(x) & PlaysLotsOfChessMatches(x) & (PlaysLotsOfChessMatches(x) | Creative(x)))", "all x.((Puzzles(x) & PlaysLotsOfChessMatches(x)) -> (PlaysLotsOfChessMatches(x) | Creative(x)))"]}
{"id": "folio_train_1966", "nl": "If Erica plans ahead or is interested in puzzles, then Erica is creative.", "fol": "((IsAPlanner(Erica) | InterestedInPuzzles(Erica)) -> IsCreative(Erica))", "prediction": ["all x.((Erica(x) & (PlansAhead(x) | InterestsInPuzzles(x))) -> Creative(x))", "all x.((Erica(x) & (PlansAhead(x) | InterestsInPuzzles(x))) -> Creative(x))", "all x y.((Erica(x) & (PlansAhead(x) | InterestsInPuzzles(x))) -> Creative(x))", "all x.((Erica(x) & (PlansAhead(x) | InterestsInPuzzles(x))) -> Creative(x))", "all x y.((Erica(x) & PlanesAhead(x) & (InterestsInPuzzles(x) | PlansAhead(x))) -> Creative(x))", "all x.(((Erica(x) & (PlansAhead(x) | InterestsInPuzzles(x))) -> Creative(x))", "all x.((Erica(x) & PlansAhead(x) | InterestsInPuzzles(x)) -> Creative(x))", "((PlansAhead(Erica) | InterestsInPuzzles(Erica))) -> Creative(Erica))", "all x.((PlansAhead(x) | InterestsInPuzzles(x)) -> Creative(x))", "(Creative(Erica) -> (PlansAhead(Erica) | InterestsInPuzzles(Erica)))", "all x.((EricaPlansAhead(x) | InterestsInPuzzles(x)) -> Creative(x))", "exists x.(PlansAheadOrInterestsInPuzzles(x) & Creative(x))", "all x.((Erica(x) & (PlansAhead(x) | InterestsInPuzzles(x))) -> Creative(x))", "all x y.((Erica(x) & (PlansAhead(x) | InterestsInPuzzles(x))) -> Creative(x))", "all x.((Elica(x) & (PlansAhead(x) | InterestsInPuzzles(x))) -> Creative(x))", "all x.((Erica(x) & (PlansAhead(x) | InterestsInPuzzles(x))) -> Creative(x))"]}
{"id": "folio_train_1967", "nl": "If Erica is either bad at chess or interested in puzzles, then Erica is not a person who plays a lot of chess matches and creative.", "fol": "((BadAtChess(Erica) | InterestedInPuzzles(Erica)) -> -(PlaysALotOfChess(Erica) & IsCreative(Erica)))", "prediction": ["all x.((Erica(x) & (BadAtChess(x) | InterestInPuzzles(x))) -> -(PlaysLotsOfChessMatches(x) & Creative(x)))", "all x.((BadAtChess(x) | InterestInPuzzles(x)) -> -(PlaysLotsOfChessMatches(x) & Creative(x)))", "all x.((Person(x) & (BadAtChess(x) | InterestInPuzzles(x))) -> -PlaysLotsOfChessMatches(x) & Creative(x))", "all x.(BadAtChessOrInterestingInPuzzles(x) -> -(PlaysLotsOfChessMatches(x) & Creative(x)))", "all x.((Erica(x) & (BadAtChess(x) | InterestInPuzzles(x))) -> -PlaysLotsOfChessMatches(x) & Creative(x))", "(BadAtChess(Erica) | InterestInPuzzles(Erica)) -> -PlaysLotsOfChessMatchesAndCreative(Erica))", "all x y.((Erica(x) & (BadAtChess(x) | InterestInPuzzles(x))) -> -(PlaysLotsOfChessMatches(x) & Creative(x)))", "all x.((BadAtChess(x) | InterestInPuzzles(x)) -> -PlaysLotsOfChessMatches(x) & Creative(x))", "all x.((Erica(x) & (BadChess(x) | InterestInPuzzles(x))) -> -(PlaysLotsOfChessMatches(x) & Creative(x)))", "(BadAtChess(Erica) | InterestInPuzzles(Erica)) -> -PlaysLotsOfChessMatches(Erica) & -Creative(Erica))", "all x.(BadAtChess(x) | InterestInPuzzles(x)) -> -(PlaysLotsOfChessMatches(x) & Creative(x)))", "all x.(BadAtChessOrInterestingInPuzzles(x) -> -(PlaysLotsOfChessMatches(x) & Creative(x)))", "all x.((Person(x) & (BadAtChess(x) | InterestInPuzzles(x))) -> -PlaysLotsOfChessMatches(x) & Creative(x))", "all x.((Erica(x) & (BadAtChess(x) | InterestInPuzzles(x))) -> -(PlaysLotsOfChessMatches(x) & Creative(x)))", "(BadAtChess(Erica) | InterestInPuzzles(Erica))", "all x.(BadChess(x) | InterestsInPuzzles(x)) -> -(PlaysLotsOfChessMatches(x) & Creative(x)))"]}
{"id": "folio_train_1968", "nl": "Soccer players have a right foot and a left foot.", "fol": "all x.((IsSoccerPlayer(x) -> HasLeftFoot(x)) & HasRightFoot(x))", "prediction": ["all x.(SoccerPlayer(x) -> (HasRightFoot(x) & HasLeftFoot(x)))", "(all x.(SoccerPlayer(x) -> RightFoot(x)) & all y.(SoccerPlayer(y) -> LeftFoot(y)))", "all x y.((SoccerPlayer(x) & RightFoot(y)) -> (Has(x,y) & Has(x,y)))", "all x.(SoccerPlayer(x) -> (HasRightFoot(x) & HasLeftFoot(x)))", "(all x.(SoccerPlayer(x) -> HasRightFoot(x)) & all y.(SoccerPlayer(y) -> HasLeftFoot(y)))", "all x y.((SoccerPlayer(x) & Player(y)) -> (HasRightFoot(x,y) & HasLeftFoot(x,y)))", "(all x.(SoccerPlayer(x) -> RightFoot(x)) & all y.(SoccerPlayer(y) -> LeftFoot(y)))", "all x y.((SoccerPlayer(x) & RightFoot(y)) -> Has(x,y))", "exists x.(Player(x) & (RightFoot(x) | LeftFoot(x)))", "all x.(SoccerPlayer(x) -> (HasRightFoot(x) & HasLeftFoot(x)))", "(all x.(SoccerPlayer(x) -> RightFoot(x)) & (SoccerPlayer(x) -> LeftFoot(x)))", "all x.(SoccerPlayer(x) -> (RightFoot(x) & LeftFoot(x)))", "all x y.((SoccerPlayer(x) & RightFoot(y) & LeftFoot(z)) -> Has(x,y))", "all x.(SoccerPlayer(x) -> (HasRightFoot(x) & HasLeftFoot(x)))", "all x.(SoccerPlayer(x) -> (HasRightFoot(x) & HasLeftFoot(x)))", "all x.(SoccerPlayer(x) -> (HasRightFoot(x) & HasLeftFoot(x)))"]}
{"id": "folio_train_1969", "nl": "Top soccer players are soccer players who can use their both feet very efficiently.", "fol": "all x.((IsSoccerPlayer(x) & CanUseFootEfficiently(x,Left) & CanUseFootEfficiently(x,Right)) -> IsTopSoccerPlayer(x))", "prediction": ["all x.((SoccerPlayer(x) & SoccerPlayer(x) & UsesBothFeetEfficiently(x)) -> Top(x))", "all x.((TopSoccerPlayer(x) & SoccerPlayer(x) & UsesBothFeetEfficiently(x)) -> TopSoccerPlayer(x))", "all x y.((TopSoccerPlayer(x) & SoccerPlayer(y)) -> (UsesBothFeetEfficiently(y,x)))", "(TopSoccerPlayer(x) -> (SoccerPlayer(x) & UsesBothFeetEfficiently(x)))", "all x.((SoccerPlayer(x) & SoccerPlayer(x) & UsesBothFeetEfficiently(x)) -> Top(x))", "all x.((SoccerPlayer(x) & SoccerPlayer(x) & CanUseBothFeetEfficiently(x)) -> Top(x))", "all x.((Player(x) & SoccerPlayer(x) & UsesBothFeetEfficiently(x)) -> Top(x))", "all x y.((TopSoccerPlayer(x) & SoccerPlayer(y)) -> (UsesEfficiently(y,x) & UsesEfficiently(y,x)))", "all x.((SoccerPlayer(x) & SoccerPlayer(x)) -> CanUseBothFeetEfficiently(x))", "all x.(TopSoccerPlayer(x) -> (SoccerPlayer(x) & UsesBothFeetEfficiently(x)))", "all x y.((SoccerPlayer(x) & SoccerPlayer(y) & CanUseBothFeetEfficiently(y,x)) -> Top(x))", "all x y.((TopSoccerPlayer(x) & SoccerPlayer(y)) -> (CanUseBothFeetEfficiently(y,x)))", "all x.(TopSoccerPlayer(x) -> (SoccerPlayer(x) & CanUseBothFeetEfficiently(x)))", "all x.((TopSoccerPlayer(x) & SoccerPlayer(x) & UsesBothFeetEfficiently(x)) -> TopSoccerPlayer(x))", "all x y.((TopSoccerPlayer(x) & SoccerPlayer(y)) -> (UsesBothFeetEfficiently(y,x)))", "all x.(TopSoccerPlayer(x) -> (SoccerPlayer(x) & UsesBothFeetEfficiently(x)))"]}
{"id": "folio_train_1970", "nl": "If a soccer player can score many goals using left foot, then they can use that foot very efficiently.", "fol": "all x.((IsSoccerPlayer(x) & HasScoredManyGoals(x,Left)) -> CanUseFootEfficiently(x,Left))", "prediction": ["all x.((SoccerPlayer(x) & CanScoreManyGoalsUsingLeftFoot(x)) -> CanUseFootEfficiently(x))", "all x y.((SoccerPlayer(x) & CanScoreManyGoalsUsingLeftFoot(x)) -> CanUseFootEfficiently(x,y))", "all x.((SoccerPlayer(x) & ScoresManyGoalsUsingLeftFoot(x)) -> UsesFootEfficiently(x))", "all x y.((SoccerPlayer(x) & CanScoreManyGoals(x,y) & LeftFoot(y)) -> CanUseFootEfficiently(x,y))", "all x y z.((SoccerPlayer(x) & LeftFoot(y) & CanScoreManyGoals(x,y) & LeftFoot(z) & UsesEfficiently(x,z)) -> CanScoreManyGoals(x,y,z))", "all x.((SoccerPlayer(x) & CanScoreManyGoalsUsingLeftFoot(x)) -> CanUseFootEfficiently(x))", "all x.((SoccerPlayer(x) & ScoresManyGoalsUsingLeftFoot(x)) -> UsesFootEfficiently(x))", "all x y.((SoccerPlayer(x) & CanScoreManyGoalsUsingLeftFoot(x)) -> CanUseFootEfficiently(y))", "all x y.((SoccerPlayer(x) & CanScoreManyGoalsWithLeftFoot(x,y)) -> CanUseFootEfficiently(x,y))", "exists x.(SoccerPlayer(x) & CanScoreManyGoals(x) & UsesLeftFoot(x) & UsesFootEfficiently(x))", "all x.((SoccerPlayer(x) & CanScoreManyGoalsWithLeftFoot(x)) -> CanUseLeftFootEfficiently(x))", "all x.((SoccerPlayer(x) & ScoresManyGoalsWithLeftFoot(x)) -> CanUseFootEfficiently(x))", "all x.(SoccerPlayer(x) -> (ScoresManyGoalsWithLeftFoot(x) & UsesFootEfficiently(x)))", "all x y.((SoccerPlayer(x) & CanScoreManyGoalsUsingLeftFoot(x)) -> CanUseLeftFootEfficiently(x))", "all x.((SoccerPlayer(x) & CanScoreManyGoalsUsingLeftFoot(x)) -> CanUseFootEfficiently(x))", "all x.((SoccerPlayer(x) & ScoresManyGoalsUsingLeftFoot(x)) -> CanUseFootEfficiently(x))"]}
{"id": "folio_train_1971", "nl": "If a soccer player can score many goals using right foot, then they can use that foot very efficiently.", "fol": "all x.((IsSoccerPlayer(x) & HasScoredManyGoals(x,Right)) -> CanUseFootEfficiently(x,Right))", "prediction": ["all x.((SoccerPlayer(x) & ScoresManyGoalsUsingRightFoot(x)) -> UsesFootEfficiently(x))", "all x y.((SoccerPlayer(x) & CanScoreManyGoals(x,y) & RightFoot(y)) -> CanUseFoot(x,y))", "all x.((SoccerPlayer(x) & CanScoreManyGoalsUsingRightFoot(x)) -> CanUseFootEfficiently(x))", "all x y.((SoccerPlayer(x) & CanScoreManyGoalsUsingRightFoot(x)) -> CanUseFootEfficiently(x))", "all x.((SoccerPlayer(x) & CanScoreManyGoals(x) & UsesRightFoot(x)) -> CanUseFootEfficiently(x))", "all x y z.((SoccerPlayer(x) & Goal(y) & RightFoot(z) & Scores(x,y,z)) -> UsesEfficientFoot(x))", "all x.((SoccerPlayer(x) & ScoresManyGoalsWithRightFoot(x)) -> UsesFootEfficiently(x))", "all x y.((SoccerPlayer(x) & CanScoreManyGoals(x,y) & UsesRightFoot(x)) -> CanUseFootEfficiently(x))", "all x.((SoccerPlayer(x) & ScoresManyGoals(x) & UsesRightFoot(x)) -> UsesFootEfficiently(x))", "all x y.((SoccerPlayer(x) & ScoresManyGoals(x,y) & RightFoot(y)) -> UsesFootEfficiently(x,y))", "all x.(SoccerPlayer(x) -> (ScoresManyGoalsUsingRightFoot(x) & UsesFootEfficiently(x)))", "exists x.(SoccerPlayer(x) & CanScoreManyGoals(x) & UsesRightFoot(x) & UsesFootEfficiently(x))", "all x.((SoccerPlayer(x) & CanScoreManyGoalsWithRightFoot(x)) -> CanUseFootEfficiently(x))", "all x y.((SoccerPlayer(x) & CanScoreManyGoalsWithRightFoot(x,y)) -> CanUseFootEfficiently(x,y))", "all x.(SoccerPlayer(x) -> (ScoresManyGoalsUsingRightFoot(x) & UsesRightFootEfficiently(x)))", "all x.((SoccerPlayer(x) & ScoresManyGoalsUsingRightFoot(x)) -> CanUseFootEfficiently(x))"]}
{"id": "folio_train_1972", "nl": "Cristiano Ronaldo is a soccer player.", "fol": "IsSoccerPlayer(Ronaldo)", "prediction": ["Cristiano Ronaldo (SoccerPlayer)", "all x.((Cronocr Ronaldo(x) & SoccerPlayer(x)) -> CristianoRosario(x))", "(SoccerPlayer(CristianoRonaldo))", "Cristiano Ronaldo is a soccer player.", "all x.((CroitoRoseno(x) & SoccerPlayer(x)) -> SoccerPlayer(x))", "(SoccerPlayer(Cronocr Ronaldo) & Cristiano(Ronaldo))", "all x.((CristianoRonaldo(x) & SoccerPlayer(x)) -> Plays(x,y))", "all x.(Cronocr Ronaldo(x) -> SoccerPlayer(x))", "(SoccerPlayer(CristinoRonaldo) & FootballPlayer(CristinoRonaldo))", "Cristiano Ronaldo (SoccerPlayer)", "(SoccerPlayer(ChristinoRonaldo) & Plays(CrotronoRonaldo))", "Cristiano Ronaldo is a soccer player.", "all x.((Cronocr Ronaldo(x) & SoccerPlayer(x)) -> CristianoRonaldo(x))", "Cristiano Ronaldo (SoccerPlayer)", "Cristiano Ronaldo is soccer player.", "Cristiano Ronaldo (SoccerPlayer)"]}
{"id": "folio_train_1973", "nl": "Cristiano Ronaldo can use his right foot very efficiently.", "fol": "CanUseFootEfficiently(Ronaldo,Right)", "prediction": ["all x.(CroitoRonaldo(x) -> CanUseRightFootEfficiently(x))", "all x.((CroitoRonaldo(x) & RightFoot(x)) -> UsesEfficiently(x))", "all x.(Cronocr Ronaldo(x) -> CanUseRightFootEfficiently(x))", "all x y.((CroitoRonaldo(x) & RightFoot(y)) -> CanUseEfficiently(x,y))", "(EfficientlyUses(Cristiano Ronaldo,Foot))", "all x.((CristianoRonaldo(x) & RightFoot(x)) -> UsesEfficiently(x))", "all x.(CristianoRonaldo(x) -> CanUseRightFootEfficiently(x))", "Cristiano Ronaldo can use his right foot very efficiently.", "(EfficientlyUsesRightFoot(Cristino Ronaldo))", "(UsesRightFoot(CristinoRonaldo) & VeryEfficiently(CristinoRonaldo))", "all x y.((Cronocr Ronaldo(x) & RightFoot(y)) -> CanUseEfficiently(x,y))", "all x.((Cronocr Ronaldo(x) & RightFoot(x)) -> UsesEfficiently(x))", "All x y.((CristianoRonaldo(x) & RightFoot(y)) -> CanUseEfficiently(x,y))", "(Cronocr Ronaldo(Cronocr Ronaldo) & UsesRightFootEfficiently(Cronocr Ronaldo))", "(EfficientlyUsesFoot(Cristiano Ronaldo)", "all x.(CristianoRonaldo(x) -> CanUseRightFootEfficiently(x))"]}
{"id": "folio_train_1974", "nl": "Cristiano Ronaldo have scored more than one hundred goals using his left foot.", "fol": "HasScoredManyGoals(Ronaldo,Left)", "prediction": ["all x.((CroitoRonaldo(x) & LeftFoot(x)) -> ScoresMoreThanOneSixtyGoals(x))", "all x.((CristianoRonaldo(x) & LeftFoot(x)) -> ScoredMoreThanOneSixtyGoals(x))", "all x y.((CroitoRonaldo(x) & LeftFoot(y)) -> ScoredMoreThan(x,y))", "(ScoredMoreThanOneSixtyGoals(Cronocr Ronaldo) & LeftFoot(Cronocr Ronaldo))", "all x.(CroitoRonaldo(x) -> ScoredMoreThanOneSixtyGoals(x))", "(ScoresMoreThanOneTenGoalsWithLeftFoot(CristianoRonaldo))", "all x.((Cronocr Ronaldo(x) & MoreThanOneSixtyGoals(x)) -> CristianoRonaldo(x))", "(ScoredMoreThan(CristianoRonaldo,100) UsingLeftFoot(CristianoRonaldo))", "all x y.((Cronocr Ronaldo(x) & LeftFoot(y)) -> ScoredMoreThan(x,y))", "all x y.((CroitoRonaldo(x) & LeftFoot(y)) -> ScoresMoreThanOneSixtyGoals(x,y))", "All x.(CristianoRonaldo(x) -> ScoredMoreThanOneSixtyGoals(x))", "all x y.((CristianoRonaldo(x) & LeftFoot(y)) -> ScoresMoreThan(x,y))", "(ScoredMoreThan(CristianoRonaldo,100) & LeftFoot(CristianoRonaldo,100))", "(ScoresMoreThanOneSixThanOneSixThanOneSixFoot(CristianoRonaldo))", "all x.(CroitoRealdo(x) -> ScoresMoreThan(x,100))", "all x.((CristianoRonaldo(x) & LeftFoot(x)) -> ScoresMoreThan(x,100))"]}
{"id": "folio_train_1975", "nl": "Cristiano Ronaldo is a top soccer player.", "fol": "IsTopSoccerPlayer(Ronaldo)", "prediction": ["all x.((Cronocr Ronaldo(x) & TopSoccerPlayer(x)) -> TopSoccerPlayer(x))", "all x.((CristianoRonaldo(x) & TopSoccerPlayer(x)) -> TopSoccerPlayer(x))", "Cristiano Ronaldo is a top soccer player.", "(TopSoccerPlayer(CristinoRonaldo))", "all x.((CroitoRonaldo(x) & TopSoccerPlayer(x)) -> TopSoccerPlayer(x))", "all x.((Cronocr Ronaldo(x) & TopSoccerPlayer(x)) -> TopSoccerPlayer(x))", "all x.(Cronocr Ronaldo(x) -> TopSoccerPlayer(x))", "Cristiano Ronaldo is a top soccer player.", "(TopSoccerPlayer(CristianoRonaldo))", "all x.((CristianoRonaldo(x) & TopSoccerPlayer(x)) -> TopSoccerPlayer(x))", "All x y.((CroitoRonaldo(x) & SoccerPlayer(y)) -> Top(x,y))", "(TopSoccerPlayer(Cronocr Ronaldo)", "Cristiano Ronaldo is a top soccer player.", "(TopSoccerPlayer(ChristinoRonaldo)", "all x.((Cronocr Ronaldo(x) & TopSoccerPlayer(x)) -> CristianoRonaldo(x))", "all x.(CroitoRealdo(x) -> TopSoccerPlayer(x))"]}
{"id": "folio_train_1976", "nl": "Cristiano Ronaldo is not a top soccer player.", "fol": "-IsTopSoccerPlayer(Ronaldo)", "prediction": ["all x.((Cronocr Ronaldo(x) & -TopSoccerPlayer(x)) -> -TopSoccerPlayer(x))", "(-TopSoccerPlayer(CristinoRonaldo))", "all x.((CristianoRonaldo(x) & -TopSoccerPlayer(x)) -> -TopSoccerPlayer(x))", "Cristiano Ronaldo - TopSoccerPlayer(Cruz).", "all x.((CroitoRonaldo(x) & -TopSoccerPlayer(x)) -> -TopSoccerPlayer(x))", "((CristianoRonaldo(Cristino) & -TopSoccerPlayer(Cristino)))", "-(TopSoccerPlayer(CristinoRonaldo))", "-TopSoccerPlayer(CristianoRonaldo)", "all x.(CroitoRonaldo(x) -> -TopSoccerPlayer(x))", "-(TopSoccerPlayer(CruzianoRonaldo))", "-TopSoccerPlayer(ChristinoRonaldo)", "(-TopSoccerPlayer(CristinoRonaldo))", "all x.((CristianoRonaldo(x) & -TopSoccerPlayer(x)) -> -TopSoccerPlayer(x))", "(-TopSoccerPlayer(CristianoRonaldo))", "(-TopSoccerPlayer(ChristinoRonaldo))", "-TopSoccerPlayer(ChristianoRealdo)"]}
{"id": "folio_train_1977", "nl": "The National Lobster Hatchery is a hatchery located in Padstow England.", "fol": "(IsHatchery(Nationallobsterhatchery) & LocatedInLocation(Nationallobsterhatchery,Padstowengland))", "prediction": ["all x.(NationalLobsterHatchery(x) -> (Hackery(x) & LocatedInPadstow(x)))", "(NationalLobsterHatchery(NationalHatchery) & LocatedInPadstowEngland(NationalHatchery))", "all x y.((NationalLobsterHatchery(x) & Padstow(y)) -> Hatchery(x,y))", "(Hatchery(NationalLobsterHatchery) & LocatedInPadstow(NationalHatchery))", "all x.(NationalLobsterHatchery(x) -> (Hatchery(x) & LocatedInPadstow(x) & LocatedInEngland(x)))", "(NationalLobsterHatchery(NHH) & LocatedInPadstow(NHH))", "All x y z.((NationalLobsterHatchery(x) & Padstow(y) & England(z)) -> Hatchery(x,y,z))", "(NationalLobsterHatchery(NationalLobsterHatchery) & LocatedInPadstowEngland(NationalHatchery))", "All x y.((NationalLobsterHatchery(x) & PadstowEngland(y)) -> Hatchery(x,y))", "all x.(NationalLobsterHatchery(x) -> (HasHatery(x) & LocatedInPadstow(x)))", "(Hatchery(NationalLobsterHatchery) & LocatedInPadstowEngland(NationalHatchery))", "all x.(NationalLobsterHatchery(x) -> (Hackery(x) & LocatedInPadstow(x) & LocatedInEngland(x)))", "All x y.((NationalLobsterHatchery(x) & Padstow(y)) -> Hatchery(x,y))", "all x.(NationalLobsterHatchery(x) -> (Hatchery(x) & LocatedInPadstowEngland(x)))", "all x.(NationalLobsterHatchery(x) -> (Hackery(x) & LocatedInPadstowEngland(x)))", "all x.(NationalLobsterHatchery(x) -> (Hackery(x) & LocatedInPadstow(x) & LocatedInEngland(x)))"]}
{"id": "folio_train_1978", "nl": "The National Lobster Hatchery is open to visitors.", "fol": "IsOpenToVisitors(Nationallobsterhatchery)", "prediction": ["all x.(NationalLobsterHatchery(x) -> OpenToVisitors(x))", "(OpenToVisitors(NationalLobsterHatchery) & OpenToVisitors(NationalLobsterHatchery))", "-OpenToVisitors(NationalLobsterHatchery)", "The NationalLobsterHatchery is OpenToVisitors(NationalLobsterHatchery)", "all x.(NationalLobsterHatchery(x) -> OpenToVisitors(x))", "(OpenToVisitors(NationalLobsterHatchery))", "all x y.((NationalLobsterHatchery(x) & Visitor(y)) -> OpenTo(x,y))", "All x.((NationalLobsterHatchery(x) & OpenToVisitors(x)) -> OpenToVisitors(x))", "all x y.((NationalLobsterHatchery(x) & Visitor(y)) -> OpenTo(x,y))", "All x.(NationalLobsterHatchery(x) -> OpenToVisitors(x))", "(OpenToVisitors(NationalLobsterHatchery) & OpenToVisitors(NationalLobsterHatchery))", "All x.(NationalLobsterHatchery(x) -> OpenToVisitors(x))", "all x y.((NationalLobsterHatchery(x) & Visitor(y)) -> Open(x,y))", "all x.(NationalLobsterHatchery(x) -> OpenToVisitors(x))", "All x.(NationalLobsterHatchery(x) -> OpenToVisitors(x))", "(OpenToVisitors(NationalLobsterHatchery))"]}
{"id": "folio_train_1979", "nl": "A hatchery is either for profit, or for conservation.", "fol": "all x.((IsHatchery(x) -> IsForConservation(x)) | IsForProfit(x))", "prediction": ["all x.(Habitery(x) -> (ForProfit(x) | ForConservation(x)))", "all x.(Harkery(x) -> (ForProfit(x) | ForConservation(x)))", "all x.(Habitery(x) -> (ForProfit(x) | ForConservation(x)))", "all x.(Hackery(x) -> (Financial(x) | Conservation(x)))", "all x.(Habitery(x) -> (ForProfit(x) | ForConservation(x)))", "all x y.((Habitery(x) & Profit(y)) | Conservation(y))", "all x.(Harkery(x) -> (ForProfit(x) | ForConservation(x)))", "all x y.((Habitery(x) & Profit(y)) | Conservation(y))", "exists x.(Hazardery(x) & (ForProfit(x) | ForConservation(x)))", "all x.(Harkery(x) -> (ForProfit(x) | ForConservation(x)))", "exists x.(Husky(x) & (ForProfit(x) | ForConservation(x)))", "exists x.(Harkery(x) & (Financial(x) | Conservation(x)))", "exists x.(Habitery(x) & (ForProfit(x) | ForConservation(x)))", "exists x.(Habitery(x) & (Financial(x) | Conservation(x)))", "all x y.((Habitery(x) & Profit(y)) | Conservation(y))", "all x y.((Habitery(x) & Profit(y)) | Conservation(y))"]}
{"id": "folio_train_1980", "nl": "If a hatchery is for conservation, it might release animals into the wild.", "fol": "exists x.(IsHatchery(x) & IsForConservation(x) & ReleasesAnimalsIntoWild(x))", "prediction": ["all x.((Habitery(x) & ForConservation(x)) -> MightReleaseAnimalsIntoWild(x))", "all x.((Habitery(x) & ForConservation(x)) -> MightReleaseAnimalsIntoWild(x))", "all x.((Harkery(x) & ForConservation(x)) -> MightReleaseAnimalsIntoWild(x))", "all x y.((Habitery(x) & Conservation(y) & For(x,y)) -> MightReleaseAnimalsIntoWild(x))", "all x.((Hackery(x) & Conservation(x)) -> MightReleaseAnimalsIntoWild(x))", "all x.(Conservation(x) -> MightReleaseAnimalsIntoWild(x))", "all x.((Habitery(x) & ForConservation(x)) -> MightReleaseAnimalsIntoWild(x))", "all x y.((Habitery(x) & Conservation(y) & For(x,y)) -> MightReleaseAnimalsIntoWild(x))", "all x.((Harkery(x) & ForConservation(x)) -> MightReleaseAnimalsIntoWild(x))", "all x y.((Harkery(x) & Conservation(y) & For(x,y)) -> MightReleaseAnimalsIntoWild(x))", "exists x.(Harkery(x) & ForConservation(x) & ReleasesAnimalsIntoWild(x))", "exists x.(Habitery(x) & Conservation(x) & ReleasesAnimalsIntoWild(x))", "all x y.((Habitery(x) & Conservation(y) & For(x,y)) -> ReleasesAnimalsIntoWild(x))", "all x.(ForConservation(x) -> MightReleaseAnimalsIntoWild(x))", "all x.((Hatchery(x) & ForConservation(x)) -> MightReleaseAnimalsIntoWild(x))", "all x.((Hatchery(x) & ForConservation(x)) -> MightReleaseAnimalsIntoWild(x))"]}
{"id": "folio_train_1981", "nl": "The National Lobster Hatchery is not for profit.", "fol": "-IsForProfit(Nationallobsterhatchery)", "prediction": ["All x.(NationalLobsterHatchery(x) -> -ForProfit(x))", "(NationalLobsterHatchery(NHH) & -ForProfit(NHH))", "(NationalLobsterHatchery(NationalLobsterHatchery) & -ForProfit(NationalLobsterHatchery))", "-ProfitHotchery(NationalLobsterHatchery)", "-ForProfit(NationalLobsterHatchery)", "all x.(NationalLobsterHatchery(x) -> -ForProfit(x))", "The NationalLobsterHatchery -ForProfit(NHH)", "-ProfitHotchery(NationalLobsterHatchery)", "All x.(NationalLobsterHatchery(x) -> -Profit(x))", "(NationalLobsterHatchery(NHH) & -Profit(NHH))", "The NationalLobsterHatchery is -ForProfit(NHHatchery)", "all x.(LobsterHatchery(x) -> -Profit(x))", "all x.(NationalLobsterHatchery(x) -> -ForProfit(x))", "all x.(NationalLobsterHatchery(x) -> -ForProfit(x))", "All x.(NationalLobsterHatchery(x) -> -Profit(x))", "All x.(NationalLobsterHatchery(x) -> -Financial(x))"]}
{"id": "folio_train_1982", "nl": "The National Lobster Hatchery is for conservation.", "fol": "IsForConservation(Nationallobsterhatchery)", "prediction": ["all x.(NationalLobsterHatchery(x) -> ForConservation(x))", "(NationalLobsterHatchery(NationalLobsterHatchery) & ForConservation(NationalLobsterHatchery))", "(ForConservation(NationalLobsterHatchery) & -ForConservation(NationalLobsterHatchery))", "All x.(NationalLobsterHatchery(x) -> ForConservation(x))", "all x y.((NationalLobsterHatchery(x) & Conservation(y)) -> For(x,y))", "The NationalLobsterHatcheryForConservation(NHH)", "(ForConservation(NationalLobsterHatchery) & -ForConservation(NationalLobsterHatchery))", "all x.(NationalLobsterHatchery(x) -> ForConservation(x))", "all x.(NationalLobsterHatchery(x) -> ForConservation(x))", "all x y.((NationalLobsterHatchery(x) & Conservation(y)) -> For(x,y))", "All x.(NationalLlobsterHatchery(x) -> ForConservation(x))", "All x.(NationalLobsterHatchery(x) -> ForConservation(x))", "all x y.((NationalLobsterHatchery(x) & Conservation(y)) -> For(x,y))", "All x.(LobsterHatchery(x) -> ForConservation(x))", "All x.(NationalLobsterHatchery(x) -> ForConservation(x))", "All x.(NationalLobsterHatchery(x) -> ForConservation(x))"]}
{"id": "folio_train_1983", "nl": "All hatcheries are open to visitors.", "fol": "all x.(IsHatchery(x) -> IsOpenToVisitors(x))", "prediction": ["all x.(Habitat(x) -> OpenToVisitors(x))", "all x.(Harkerie(x) -> OpenToVisitors(x))", "all x.(Habitat(x) -> OpenToVisitors(x))", "(OpenToVisitors(horseeries) & OpenToVisitors(horseeries))", "all x y.((Habitat(x) & Visitor(y)) -> Open(x,y))", "ALL TESTS.(Habitat(x) -> OpenToVisitors(x))", "all x.(Habiterie(x) -> OpenToVisitors(x))", "all x y.((Habiterie(x) & Visitor(y)) -> OpenTo(x,y))", "all x.(Harkerie(x) -> OpenToVisitors(x))", "all x.(Horse(x) -> OpenToVisitors(x))", "all x.(Husky(x) -> OpenToVisitors(x))", "all x y.((Habitat(x) & Visitor(y)) -> Open(x,y))", "all x.(Habitat(x) -> OpenToVisitors(x))", "all x.(Harkerie(x) -> OpenToVisitors(x))", "all x.(Horse(x) -> OpenToVisitors(x))", "all x.(Habiterie(x) -> OpenToVisitors(x))"]}
{"id": "folio_train_1984", "nl": "The National Lobster Hatchery releases animals into the wild.", "fol": "ReleasesAnimalsIntoWild(Nationallobsterhatchery)", "prediction": ["all x y.((NationalLobsterHatchery(x) & Animal(y)) -> ReleasesIntoWild(x,y))", "all x.(NationalLobsterHatchery(x) -> ReleasesAnimalsIntoWild(x))", "(NationalLobsterHatchery(NationalLobsterHatchery) & ReleasesAnimalsIntoWild(NationalLobsterHatchery))", "all x y z.((NationalLobsterHatchery(x) & Animal(y) & Wild(z)) -> ReleasesInto(x,y,z))", "(NationalLobsterHatchery(NHH) & ReleasesAnimalsIntoWild(NHH))", "all x y.((NationalLobsterHatchery(x) & Animal(y)) -> ReleasesIntoWild(x,y))", "all x.(NationalLobsterHatchery(x) -> ReleasesAnimalsIntoWild(x))", "all x y z.((NationalLobsterHatchery(x) & Animal(y) & Wild(z)) -> ReleasesInto(x,y,z))", "all x y.((NationalLobsterHatchery(x) & Animal(y)) -> ReleasesIntoWild(x,y))", "all x.(NationalLobsterHatchery(x) -> ReleasesAnimalsIntoWild(x))", "all x y.((NationalLobsterHatchery(x) & Animal(y)) -> ReleasesIntoWild(x,y))", "All x.(NationalLobsterHatchery(x) -> ReleasesAnimalsIntoWild(x))", "All x.(NationalLobsterHatchery(x) -> ReleasesAnimalsIntoWild(x))", "All x.(NationalLobsterHatchery(x) -> ReleasesIntoWild(x))", "all x y.((NationalLobsterHatchery(x) & Animal(y)) -> ReleasesIntoWild(x,y))", "All x.(NationalLobsterHatchery(x) -> ReleasesAnimalsIntoWild(x))"]}
{"id": "folio_train_1985", "nl": "Rhos Aelwyd F.C. is a Welsh football club.", "fol": "all x.(RhosAelwydFC(x) -> (IsFootballClub(x) & LocatedInPonciau(x) & IsWelshClub(x)))", "prediction": ["all x.((RhosAelwydF.C.(x) & WelshFootballClub(x)) -> FootballClub(x))", "(WalesFootballClub(RhosAelwyd) & WelshFootballClub(RhosAelwyd))", "RhosAelwydF.C. (WalesFootballClub)", "(FootballClub(RhosAelwyd) & Welsh(RhosAelwyd))", "all x.((RhosAelwydF.C.) -> WelshFootballClub(x))", "all x.(RhosAelwydF.C.(WalesFootballClub(x) & WelshFootballClub(x))", "all x y.((RhosAelwydF.C.(x) & WelshFootballClub(y)) -> FootballClub(x,y))", "RhosAelwyd F.C. is a Welsh FootballClub.", "(WalesFootballClub(RhosAelwyd) & WelshFootballClub(RhosAelwyd))", "all x.((RhosAelwydF.C.(x) & WelshFootballClub(x)) -> FootballClub(x))", "RhosAelwydF.C. (WalesFootballClub)", "All x.(RhosAelwydF.C.(WalesFootballClub(x) -> WelshFootballClub(x))", "all x.((RhosAelwydF.C. & WelshFootballClub(x)) -> FootballClub(x))", "All x.(RhosAelwydF.C.(WalesFootballClub) -> FootballClub(x))", "(WalesFootballClub(RhosAelwyd) & WelshFootballClub(RhosAelwyd))", "Rhos Aelwyd F.C. is a Welsh FootballClub."]}
{"id": "folio_train_1986", "nl": "Rhos Aelwyd F.C. is the only club based in Ponciau. ", "fol": "all x.(LocatedInPonciau(x) <-> RhosAelwydFC(x))", "prediction": ["all x.(RhosAelwydF.C.(Club(x) & BasedInPonciau(x))", "all x.((Club(x) & BasedInPonciau(x)) -> RhosAelwydF.C.", "RhosAelwyd F.C. is the only club based in Ponciau.", "all x y.((Club(x) & Club(y) & BasedInPonciau(x)) -> RhosAelwydF.C.", "(Location(RhosAelwyd) & BasedInPonciau(RhosAelwyd))", "(LimitedInPonciau(RhosAelwydF.C.)", "all x y.((RhosAelwydF.C. & Club(x) & Ponciau(y)) -> BasedIn(x,y))", "Rhos Aelwyd F.C. (Club(RosAelwyd) & BasedInPonciau(RosAelwyd))", "Rhos Aelwyd F.C. is the only club based in Ponciau.", "All x.(RhosAelwydF.C.(Club(x) & BasedInPonciau(x))", "all x y.((Club(x) & Club(y) & BasedInPonciau(x,y)) -> RhosAelwydF.C.", "All x.(RhosAelwydF.C.(RosAelwydF.C.) -> BasedInPonciau(x))", "RhosAelwydF.C. is the only club basedInPonciau.", "All x.((Club(x) & BasedInPonciau(x)) -> RhosAelwydF.C.", "all x y.((RhosAelwydF.C.(x) & Club(y)) -> BasedInPonciau(x,y))", "All x.(RhosAelwydF.C.(Club(x) & BasedInPonciau(x))"]}
{"id": "folio_train_1987", "nl": "The Premier Division was won in 2005\u201306 by a team from Ponciau. ", "fol": "all x.(WonPremierDivisionInSeason(x,Y2005) <-> LocatedInPonciau(x))", "prediction": ["all x y.((Team(x) & Ponciau(y)) -> WonPrimaryDividend(x,y))", "(WinnedIn2005\u201306(PrimaryDividend) -> PonciauTeam(Ponciau))", "all x y z.((PremierDivision(x) & Team(y) & Ponciau(z)) -> WonIn2005-06(x,y,z))", "all x.((Team(x) & Ponciau(x)) -> WonPrimaryDividend(x,2005-06))", "(WinsPremierDividend(2005,06) -> PonciauTeam(Ponciau))", "all x.((TeamFromPonciau(x) & WonPrimaryDividend(x,2005-06)) -> PremierDividend(x))", "all x y.((Team(x) & Ponciau(y)) -> WonPrimaryDividend(x,y))", "(WonIn2005\u201306 by PonciauTeam(Ponciau))", "the PremierDivision (WonByPonciau(2005-06))", "(Ponciau,05) & WonPrimaryDividend(Ponciau,2005))", "All x.(PremierDivision(x) -> (WonByPonciau(x) & In2005-06(x)))", "all x y.((Team(x) & Team(y) & Ponciau(x)) -> WonPrimaryDividend(x,y))", "(WinnedIn2005\u201306 by Ponciau(Ponciau))", "all x.((Team(x) & Ponciau(x)) -> WonPrimaryDividend(x,2005-06))", "(WonIn2005\u201306ByPonciau(Team))", "(LionDivisionWonByPonciau(2005-06)"]}
{"id": "folio_train_1988", "nl": "The winner of the Premier Division in 2009\u201310 was promoted back to the Cymru Alliance.", "fol": "all x.(WonPremierDivisionInSeason(x,Y2009) -> PromotedToCymruAlliance(x))", "prediction": ["all x.((Winner(x) & PremierDividence(x) & 2009-2010) -> PromotedToCymruAlliance(x))", "all x y.((Winner(x) & PremierDividence(y) & 2009\u201310) & CymruAlliance(y)) -> PromotedTo(x,y))", "(Winner(x) & PremierDividence(x) & 2009\u201310(x)) & PromotedToCymruAlliance(x))", "(Winner(Winner,PremierDividence) & 2009\u201310) -> PromotedToCymruAlliance(Winner,PremierDividence))", "the winner of PremierDividence(2009-10) was promoted to CymruAlliance(2010)", "all x y.((Winner(x) & PremierDividence(y) & 2009-2010) -> PromotedToCymruAlliance(x,y))", "all x.((WinnerOfPremierDividence(x) & 2009-2010) -> PromotedToCymruAlliance(x))", "all x.((Winner(x) & PremierDividence(x) & 2009\u201310) -> PromotedToCymruAlliance(x))", "all x.(WinnerOfPremierDividence(x) -> PromotedToCymruAlliance(x))", "all x.((Winner(x) & PremierDividence(x)) -> PromotedToCymruAlliance(x))", "the winner of PremierDividenceIn2009\u201310 was promoted back to CymruAlliance(x)", "(Winner(Winner, PremierDividence) & 2009\u201310) & PromotedToCymruAlliance(Winner,Dividence))", "(Winner(x) & PremierDividence(x) & 2009-2010(x)) & PromotedToCymruAlliance(x))", "all x y.((Winner(x) & PremierDivision(y) & 2009\u201310) & CymruAlliance(y)) -> PromotedBack(x,y))", "all x y.((Winner(x,y) & PremierDividence(y)) -> PromotedToCymruAlliance(x,y))", "All x.((Winner(x) & PremierDivision(x,2009)) -> PromotedToCymruAlliance(x))"]}
{"id": "folio_train_1989", "nl": "The Premier Division in 2009\u201310 was won by the same team that won in 2005-06. ", "fol": "all x.(WonPremierDivisionInSeason(x,Y2009) <-> WonPremierDivisionInSeason(x,Y2005))", "prediction": ["all x y.((Team(x) & PremierDividend(y) & WonIn200506(x,y)) -> WonIn200910(x,y))", "(WonPrimaryDividend(2009,10) & WonPrimaryDividend(2005,6))", "(WonPrimaryDividend(09,2009) & PremierDividend(09,2005)) & WonPrimaryDividend(09,2005) & WonPrimaryDividend(09,2005))", "(WinnedByTeam(PrimaryDividend(PrimaryDividend,2009) & WonByTeam(PrimaryDividend,200506))", "all x y z.((PremierDivision(x) & Team(y) & Team(z) & WonIn200506(y,z)) -> WonIn200910(x,y,z))", "all x.((Team(x) & PremierDividend(x) & WonIn200506(x)) -> WonIn200910(x))", "all x y.((PremierDivision(x) & Team(y) & WonIn200506(y,x)) -> WonIn200910(x,y))", "(WinnedByTeam(PrimaryDividend,2009) & WonByTeam(PrimaryDividend,200506))", "all x y.((Team(x) & PremierDivision(y) & In2009\u201310(x,y)) -> WonBy(x,y))", "(WonPrimaryDivisionIn2009\u201310(team) & WonPrimaryDivisionIn200506(team))", "(LittleBigGirls(PrimaryDividend(PrimaryDividend,2009) & Wins(PrimaryDividend,2005-06))", "the PremierDivisionWonIn2009\u201310(x) & wonByTeam(x,2005-06)", "(WonPrimaryDividend(2009,10) & WonPrimaryDividend(2009,05)) & WonPrimaryDividend(2009,06))", "All x.((Team(x) & PremierDividend(x,2009)) -> WonBy(x,200506))", "All x.((Team(x) & PremierDividend(x)) -> WonIn2009\u201310 (WonIn200506(x) & WonIn200506(x)))", "all x y z.((PremierDivision(x) & Team(y) & Team(z) & WonIn200506(y,z)) -> WonIn200910(x,y,z))"]}
{"id": "folio_train_1990", "nl": "Rhos Aelwyd F.C. won the 2005-06 Premier Division.", "fol": "all x.(RhosAelwydFC(x) -> WonPremierDivisionInSeason(x,Y2005))", "prediction": ["(WonPremierDivision(RhosAelwyd) & PremierDivision(RhosAelwyd))", "all x.((RhosAelwydF.C.(x) & PremierDivision(x,2005)) -> Won(x,2006))", "RhosAelwyd F.C. won Premier Division 2005-06.", "All x.(RhosAelwydF.C.((RosAelwyd(x) & PremierDivision(x,2005)) -> Won(x,2005))", "all x.((RhosAelwydF.C. & PremierDivision(x,2005)) -> Won(x,2005))", "all x y.((RhosAelwydF.C.(x) & PremierDivision(y)) -> Won(x,y))", "RhosAelwyd F.C. won PremierDivision(RosAelwyd) & PremierDivision(RosAelwyd))", "(WinsPremierDividence(RhosAelwyd) & PremierDividence(RhosAelwyd))", "All x.(RhosAelwydF.C.((RosAelwydF.C.) & PremierDivision(Proadier,2005-06)) -> Won(x,Proadier,2005-06))", "Rhos Aelwyd F.C. won Premier Division 2005-06.", "Rhos Aelwyd F.C. won Premier Division(RosAelwyd) & PremierDivision(RosAelwyd))", "(WonPrimaryDividend(RhosAelwyd) & PremierDividend(RhosAelwyd))", "all x y.((RhosAelwydF.C.(x) & PremierDividence(y)) -> Won(x,y))", "(WinsPremierDivision(RhosAelwyd) & 2005-06)", "RhosAelwydF.C. won PremierDividence(Rhos,2005,06)", "Rhos Aelwyd F.C. won Premier Division (2005-06))"]}
{"id": "folio_train_1991", "nl": "Rhos Aelwyd F.C. was promoted to the Cymru Alliance.", "fol": "all x.(RhosAelwydFC(x) -> PromotedToCymruAlliance(x))", "prediction": ["all x.((RhosAelwydF.C. & CymruAlliance(x)) -> PromotedTo(x,y))", "(PromotedToCymruAlliance(RhosAelwyd) & CymruAlliance(RhosAelwyd))", "all x y.((RhosAelwydF.C.(x) & CymruAlliance(y)) -> PromotedTo(x,y))", "Rhos Aelwyd F.C. was promoted to CymruAlliance(Rhos,F.C.)", "All x.(PromotedToCymruAlliance(x) -> RhosAelwydF.C.", "all x.((RhosAelwydF.C.) -> PromotedToCymruAlliance(x))", "All x.(RhosAelwydF.C.(RosAelwydF.C.) -> PromotedToCymruAlliance(x))", "(PromotedToCymruAlliance(RhosAelwydF.C.)", "Rhos Aelwyd F.C. was promoted to CymruAlliance.", "all x y.((RhosAelwydF.C.(x) & CymruAlliance(y)) -> PromotedTo(x,y))", "RhosAelwydF.C. was promoted to CymruAlliance(RosAelwydF.C.)", "(PromotedToCymruAlliance(RhosAelwyd))", "Rhos Aelwyd F.C. was promoted to the CymruAlliance.", "all x y.((RhosAelwydF.C.(x) & CymruAlliance(y)) -> PromotedTo(x,y))", "(PromotedToCymruAlliance(RhosAelwydF.C.)", "All x.((RhosAelwydF.C.) -> PromotedToCymruAlliance(x))"]}
{"id": "folio_train_1992", "nl": "All OS are software.", "fol": "all x.(OperatingSystem(x) -> SoftwareType(x))", "prediction": ["all x.(OS(x) -> Software(x))", "all x.(OS(x) -> Software(x))", "all x.(OS(x) -> Software(x))", "all x.(Os(x) -> Software(x))", "(all x.(OS(x) -> Software(x))", "all x.(Operation(x) -> Software(x))", "all x y.((OS(x) & Software(y)) -> Software(x))", "all x.(OS(x) -> Software(x))", "(all x.(OS(x) -> Software(x))", "all x.(OS(x) -> Software(x))", "All os.(OS(o) -> Software(o,o))", "all x.(Os(x) -> Software(x))", "all x.(OS(x) -> Software(x))", "all x.(OS(x) -> Software(x))", "all x.(OS(x) -> Software(x))", "exists x.(OS(x) & Software(x))"]}
{"id": "folio_train_1993", "nl": "All Mac are OS.", "fol": "all x.(MacOS(x) -> OperatingSystem(x))", "prediction": ["all x.(Mac(x) -> OS(x))", "all x.(Mac(x) -> OS(x))", "(all x.(Mac(x) -> OS(x)))", "All Macs(Mac) -> OS(Mac))", "all x.(Mac(x) -> OS(x))", "(all x.(Mac(x) -> OS(x))", "All Macs(Mac) -> OS(Mac))", "all x.(Mac(x) -> OS(x))", "(all x.(Mac(x) -> OS(x))", "all x.(Mac(x) -> OS(x))", "all x.(Mac(x) -> OS(x))", "all x.(Mac(x) -> OS(x))", "all x.(Mac(x) -> OS(x))", "all x.(Mac(x) -> OperatingSystem(x))", "All x.(Mac(x) -> OS(x))", "all x.(Mac(x) -> OS(x))"]}
{"id": "folio_train_1994", "nl": "An OS is either Mac or Windows.", "fol": "all x.(MacOS(x) | WindowsOS(x))", "prediction": ["all x.(OS(x) -> (Mac(x) | Windows(x)))", "all x.(OS(x) -> (Mac(x) | Windows(x)))", "all x y.((OS(x) & Mac(y)) | Windows(y)) -> (Mac(x) | Windows(x)))", "all x.(OS(x) -> (Mac(x) | Windows(x)))", "all x.(Os(x) -> (Mac(x) | Windows(x)))", "all x.(OS(x) -> (Mac(x) | Windows(x)))", "all x y.((OS(x) & Mac(y)) | Windows(y)) -> (Mac(x) | Windows(x)))", "all x.(OS(x) -> (Mac(x) | Windows(x)))", "all x.(Os(x) -> (Mac(x) | Windows(x)))", "all x.(OS(x) -> (Mac(x) | Windows(x)))", "all x.(OS(x) -> (Mac(x) | Windows(x)))", "exists x.(Os(x) & (Mac(x) | Windows(x)))", "exists x.(OS(x) & (Mac(x) | Windows(x)))", "exists x.(OS(x) & (Mac(x) | Windows(x)))", "exists x.(OS(x) & (Mac(x) | Windows(x)))", "exists x.(OS(x) & (Mac(x) | Windows(x)))"]}
{"id": "folio_train_1995", "nl": "All Windows are convenient.", "fol": "all x.(WindowsOS(x) -> IsConvenient(x))", "prediction": ["all x.(Windows(x) -> Convenient(x))", "all x.(Windows(x) -> Convenient(x))", "all x.(Windows(x) -> Convenient(x))", "(all x.(Windows(x) -> Convenient(x)))", "all x y.((Windows(x) & Windows(y)) -> Convenient(x))", "all x.(Windows(x) -> Convenient(x))", "all x.(Window(x) -> Convenient(x))", "(all x.(Windows(x) -> Convenient(x)))", "all x.(Windows(x) -> Convenient(x))", "all x.(Window(x) -> Convenient(x))", "all x.(Windows(x) -> Convenient(x))", "all x.(Windows(x) -> Convenient(x))", "all x.(Windows(x) -> Convenient(x))", "All x.(Window(x) -> Convenient(x))", "All x.(Windows(x) -> Comfortable(x))", "All x.(Windows(x) -> Convenient(x))"]}
{"id": "folio_train_1996", "nl": "All software has code.", "fol": "all x.(SoftwareType(x) -> IsCode(x))", "prediction": ["all x.(Software(x) -> HasCode(x))", "all x.(Software(x) -> HasCode(x))", "all x.exists y.(Software(x) & Code(y) & Has(x,y))", "(all x.(Software(x) -> HasCode(x)))", "all x.(Software(x) -> HasCode(x))", "all x.exists y.(Software(x) & Code(y) & Has(x,y))", "all x y.((Software(x) & Code(y)) -> Has(x,y))", "(all x.(Software(x) -> HasCode(x)))", "all x.(Software(x) -> HasCode(x))", "all x.(Software(x) -> HasCode(x))", "all x.(Software(x) -> HasCode(x))", "all x.(Software(x) -> HasCode(x))", "exists x.(Software(x) & Code(x))", "all x.(Software(x) -> HasCode(x))", "exists x.(Software(x) & Code(x))", "all x.(Software(x) -> HasCode(x))"]}
{"id": "folio_train_1997", "nl": "If something is convenient, then it is popular.", "fol": "all x.(IsConvenient(x) -> IsPopular(x))", "prediction": ["all x.((Convenient(x) & Popular(x)) -> Convenient(x))", "all x.((Convenient(x) & Popular(x)) -> Popular(x))", "all x.((Comfortable(x) & Popular(x)) -> Convenient(x))", "all x y.((Convenient(x) & Popular(y)) -> Convenient(x,y))", "all x.(Convenient(x) -> Popular(x))", "all x.((Convenient(x) & Popular(x)) -> Popular(x))", "all x.((Comfortable(x) & Popular(x)) -> Convenient(x))", "All x y.((Convenient(x) & Product(y)) -> Popular(y))", "all x.(Convenient(x) -> Popular(x))", "all x.((Convenient(x) & Popular(x)) -> Popular(x))", "all x.(Convenient(x) -> Popular(x))", "all x.((Comfortable(x) & Popular(x)) -> Convenient(x))", "all x.((Comfortable(x)) -> Popular(x))", "exists x.(Convenient(x) & Popular(x))", "exists x.(Comfortable(x) & Popular(x))", "all x.((Convenient(x) & Popular(x)) -> Popular(x))"]}
{"id": "folio_train_1998", "nl": "Burger is a piece of code and a Mac.", "fol": "(IsCode(Burger) & MacOS(Burger))", "prediction": ["all x.(Burger(x) -> (Code(x) & Mac(x)))", "(Code(Burger) & Mac(Burger))", "((Burger(b) & Code(c)) & Mac(b))", "all x.(Burger(x) -> (Code(x) & Mac(x)))", "all x y.((Burger(x) & Code(y)) -> Mac(x))", "(Code(Burger) & Mac(Burger))", "all x y.((Burger(x) & Mac(y)) -> (Code(x) & Mac(x)))", "(Bakery(b) & Code(b) & Mac(c))", "all x.(Burger(x) -> (Code(x) & Mac(x)))", "all x.(Bakery(x) -> (Code(x) & Mac(x)))", "(Code(Burger) & Mac(Burger))", "all x.(Bakery(x) -> (Code(x) & Mac(x)))", "exists x.(Bakery(x) & Code(x) & Mac(x))", "all x.(Berger(x) -> (Code(x) & Mac(x)))", "exists x.(Berger(x) & Code(x) & Mac(x))", "all x.(Burger(x) -> (Code(x) & Mac(x)))"]}
{"id": "folio_train_1999", "nl": "PyTorch is either Windows and software, or neither Windows nor software.", "fol": "((WindowsOS(Pytorch) & SoftwareType(Pytorch) & -(-WindowsOS(Pytorch) & -SoftwareType(Pytorch))) | (-(WindowsOS(Pytorch) & SoftwareType(Pytorch)) & -WindowsOS(Pytorch) & -SoftwareType(Pytorch)))", "prediction": ["all x.(PyTorch(x) -> (Windows(x) & Software(x)) | (-Windows(x) & Software(x))))", "(exists x.(PyTorch(x) & Windows(x)) | exists y.(Windows(y) & Software(y))))", "all x.(PyTorch(x) -> ((Windows(x) & Software(x)) | (-Windows(x) & Software(x)))))", "(all x.(PyTorch(x) -> (Windows(x) | Software(x))))", "(all x.(PyTorch(x) -> (WindowsAndSoftware(x) | -WindowsAndSoftware(x))))", "all x.(PyTorch(x) -> (Windows(x) | Software(x)) | (-Windows(x) & Software(x))))", "(exists x.(PyTorch(x) & Windows(x)) & exists y.(Software(y) & -Windows(y))))", "((Windows(PyTorch) | Software(PyTorch))) | (-Windows(PyTorch) | Software(PyTorch))))", "(exists x.(PyTorch(x) & Windows(x)) | -exists y.(PyTorch(y) & Software(y))))", "all x.(PyTorch(x) -> ((Windows(x) & Software(x)) | (-Windows(x) & Software(x))))", "exists x.(PyTorch(x) & (Windows(x) | Software(x)) | -Windows(x) & Software(x)))", "all x.(PyTorch(x) -> (Window(x) & Software(x)) | (-Window(x) & Software(x))))", "all x.(PyTorch(x) -> ((Windows(x) & Software(x)) | -Windows(x) & Software(x)))", "exists x.(PyTorch(x) & (Windows(x) | Software(x)) | -Windows(x) & Software(x)))", "all x.(PyTorch(x) -> ((WindowsAndSoftware(x) | -WindowsAndSoftware(x))))", "exists x.(PyTorch(x) & (Window(x) | Software(x)) | -Window(x) | Software(x)))"]}
{"id": "folio_train_2000", "nl": "Burger is popular.", "fol": "IsPopular(Burger)", "prediction": ["all x.(Bakery(x) -> Popular(x))", "(Popular(Burger))", "(Popular(Berger) & Popular(Berger))", "all x.(Berger(x) -> Popular(x))", "-PopularBakery(Burger)", "(PopularBakery(Burger))", "Popular(Bakery)", "(Popular(Bakery)", "All x.(Burger(x) -> Popular(x))", "-PopularBakery(Burger)", "(Popular(burger) & Popular(burger))", "all x.(Bakery(x) -> Popular(x))", "(Popular(Burger))", "exists x.(Berger(x) & Popular(x))", "All x.(Burger(x) -> Popular(x))", "all x.(Bakery(x) -> Popular(x))"]}
{"id": "folio_train_2001", "nl": "Burger is not popular.", "fol": "-IsPopular(Burger)", "prediction": ["(-Popular(Burger))", "-PopularBakery(Burger)", "all x.(Bakery(x) -> -Popular(x))", "(Popular(Burger) & -Popular(Burger))", "(Popular(burger) & -Popular(burger))", "(-Popular(Bakery))", "all x.(Berger(x) -> -Popular(x))", "-PopularBakery(Burger)", "(Popular(burger) -> -Popular(burger))", "(-Popular(Burger))", "all x.(Burger(x) -> -Popular(x))", "-PopularBakery(burger)", "exists x.(Bakery(x) & -Popular(x))", "-PopularBakery(Burger)", "-PopularBerger(b)", "-PopularBakery(burger)"]}
{"id": "folio_train_2002", "nl": "PyTorch is popular and has code.", "fol": "(IsPopular(Pytorch) & IsCode(Pytorch))", "prediction": ["(Popular(PyTorch) & HasCode(PyTorch))", "all x.(PyTorch(x) -> (Popular(x) & HasCode(x)))", "PyTorch ispopular(x) & HasCode(x))", "(Popular(PyTorch) & HasCode(PyTorch))", "all x.(PyTorch(x) -> (Popular(x) & HasCode(x)))", "All x y.((PyTorch(x) & Popular(x) & HasCode(x)) -> HasCode(x))", "exists x.(PyTorch(x) & Popular(x) & HasCode(x))", "(Popular(PyTorch) & HasCode(PyTorch))", "all x.(PyTorch(x) -> (Popular(x) & HasCode(x)))", "exists x.(PyTorch(x) & Popular(x) & HasCode(x))", "(Popular(PyTorch) & HasCode(PyTorch))", "all x.(PyTorch(x) -> (Popular(x) & HasCode(x)))", "(Popular(PyTorch) & HasCode(PyTorch))", "(Popular(PyTorch) & HasCode(PyTorch,Py))", "exists x.(PyTorch(x) & Popular(x) & HasCode(x))", "all x.(PyTorch(x) -> (Popular(x) & HasCode(x)))"]}
{"id": "folio_train_2003", "nl": "PyTorch is not popular and has code.", "fol": "(-IsPopular(Pytorch) & IsCode(Pytorch))", "prediction": ["(-Popular(PyTorch) & HasCode(PyTorch))", "all x.(PyTorch(x) -> (-Popular(x) & HasCode(x)))", "-PopularPyTorch(PyTorch) & HasCode(PyTorch))", "(-Popular(PyTorch) & HasCode(PyTorch))", "all x.((PyTorch(x) & -Popular(x) & HasCode(x)) -> -Popular(x))", "(PyTorch(PyTorch) & -Popular(PyTorch) & HasCode(PyTorch))", "all x.(PyTorch(x) -> (-Popular(x) & HasCode(x)))", "(-Popular(PyTorch) & HasCode(PyTorch))", "-PopularPyTorch(PyTorch) & HasCode(PyTorch))", "all x.((PyTorch(x) & -Popular(x) & HasCode(x)) -> -Popular(x))", "-PopularPyTorch(p) & HasCode(p))", "exists x.(PyTorch(x) & -Popular(x) & HasCode(x))", "(-Popular(PyTorch) & HasCode(PyTorch))", "exists x.(PyTorch(x) & -Popular(x) & HasCode(x))", "(-Popular(PyTorch) & HasCode(PyTorch))", "exists x.(PyTorch(x) & -Popular(x) & HasCode(x))"]}
{"id": "folio_train_2004", "nl": "Roads are made of either concrete or asphalt.", "fol": "all x.(IsRoad(x) -> (IsMadeOfConcrete(x) | IsMadeOfAsphalt(x)))", "prediction": ["all x.(Road(x) -> (MadeOfConcrete(x) | MadeOfAsphalt(x)))", "all x.(Road(x) -> (MadeOf(x,Concrete) | MadeOf(x,Asphalt)))", "all x y.((Road(x) & (Concrete(y) | Asphalt(y))) -> MadeOf(x,y))", "(MadeOfConcreteOrAsphalt(Road))", "all x.(Road(x) -> (MadeOfConcrete(x) | MadeOfAsphalt(x)))", "all x y.((Road(x) & Concrete(y)) | Asphalt(y)) -> MadeOf(x,y))", "all x.(Road(x) -> (MadeOf(x,Concrete) | MadeOf(x,Asphalt)))", "all x y.((Road(x) & (Concrete(y) | Asphalt(y))) -> MadeOf(x,y))", "all x.(Road(x) -> (MadeOfConcrete(x) | MadeOfAsphalt(x)))", "all x y.((Road(x) & Concrete(y)) | Asphalt(y)) -> MadeOf(x,y))", "all x.(Road(x) -> (MadeOf(x,Cement) | MadeOf(x,Asphalt)))", "exists x.(Road(x) & MadeOf(x,Cement) & MadeOf(x,Asphalt))", "all x.(Road(x) -> (MadeOfConcrete(x) | MadeOfAsphalt(x)))", "exists x.(Road(x) & MadeOf(x,Cement) | MadeOf(x,Asphalt))", "all x.(Road(x) -> (MadeOf(x,Concrete) | MadeOf(x,Asphalt)))", "all x.(Road(x) -> (Concrete(x) | Asphalt(x)))"]}
{"id": "folio_train_2005", "nl": "Roads made of concrete last longer than roads made with asphalt.", "fol": "all x y.((IsRoad(x) & IsMadeOfConcrete(x) & IsRoad(y) & IsMadeOfAsphalt(y)) -> LastsLongerThan(x,y))", "prediction": ["all x y.((Road(x) & Road(y) & MadeOfConcrete(x) & MadeOfAsphalt(y)) -> LastsLonger(x,y))", "all x.((Road(x) & MadeOfConcrete(x) & MadeOfAsphalt(x)) -> LastsLonger(x))", "(LongerLastingRoad(Road) & MadeOfConcrete(Road) & LongerLastingRoad(Road) & MadeOfAsphalt(Road))", "(all x.((Road(x) & MadeOfConcrete(x)) -> LastsLonger(x,Asphalt)))", "all x y.((Road(x) & Road(y) & MadeOfConcrete(x) & MadeOfAsphalt(y)) -> LastsLonger(x,y))", "(LongerLastingThan(roads) & MadeOfConcrete(roads) & LongerLastingThan(roads) & MadeOfAsphalt(roads))", "all x.((Road(x) & MadeOfConcrete(x) & MadeOfAsphalt(x)) -> LastsLonger(x))", "all x.((Road(x) & MadeOfConcrete(x)) -> LastsLonger(x,Asphalt(x))", "all x y.((Road(x) & Road(y) & MadeOf(x,Concrete) & MadeOf(y,Asphalt)) -> LastsLonger(x,y))", "all x y.((Road(x) & Road(y) & MadeOfConcrete(x) & MadeOfAsphalt(y)) -> LastsLonger(x,y))", "all x y.((Road(x) & Road(y) & Asphalt(y)) -> LastsLonger(x,y))", "all x.((Road(x) & MadeOfConcrete(x) & MadeOfAsphalt(x)) -> LastsLonger(x))", "all x y.((Road(x) & Road(y) & Concrete(x) & Asphalt(y)) -> LastsLonger(x,y))", "all x.((Road(x) & MadeOfConcrete(x)) -> LastsLonger(x))", "all x y.((Road(x) & Road(y) & MadeOfConcrete(x) & MadeOfAsphalt(y)) -> LastsLonger(x,y))", "all x.((Road(x) & MadeOfConcrete(x) & MadeOfAsphalt(x)) -> LastsLonger(x,y))"]}
{"id": "folio_train_2006", "nl": "Roads made of asphalt are smoother than roads made of concrete.", "fol": "all x y.((IsRoad(x) & IsMadeOfAsphalt(x) & IsRoad(y) & IsMadeOfConcrete(y)) -> IsSmootherThan(x,y))", "prediction": ["all x y.((Road(x) & Road(y) & MadeOfAsphalt(x)) -> SmootherThan(x,y))", "all x.((Road(x) & MadeOfAsphalt(x)) -> SmootherThanConcrete(x))", "all x y.((Road(x) & Road(y) & MadeOfAsphalt(x) & MadeOfConcrete(y)) -> Smoother(x,y))", "(SmootherRoad(x) & SmootherRoad(x))", "all x.((Road(x) & MadeOfAsphalt(x)) -> SmootherThan(x,Concrete(x))", "all x y.((Road(x) & Road(y) & Asphalt(x)) -> SmootherThan(x,y))", "all x.((Road(x) & Asphalt(x)) -> SmootherThan(x,Concrete(x))", "(SmootherRoad(Road,Asphalt) & SmootherRoad(Road,Concrete))", "(SmootherRoad(x) & SmootherRoad(x))", "all x y.((Road(x) & Road(y) & MadeOfAsphalt(x)) -> SmootherThan(x,y))", "all x.((Road(x) & MadeOfAsphalt(x)) -> SmootherThanConcrete(x))", "all x y.((Road(x) & Road(y) & Asphalt(x) & Concrete(y)) -> Smoother(x,y))", "all x.((Road(x) & Asphalt(x)) -> SmootherThanConcrete(x))", "all x y.((Road(x) & Asphalt(x)) -> SmootherThan(x,Concrete(y))", "all x y.((Road(x) & Road(y) & MadeOfAsphalt(x) & MadeOfConcrete(y)) -> Smoother(x,y))", "all x.((Road(x) & MadeOfAsphalt(x)) -> SmootherThanConcrete(x))"]}
{"id": "folio_train_2007", "nl": "Everyone prefers the smoother of two roads. ", "fol": "all z.((IsRoad(x) & IsRoad(y) & IsSmootherThan(x,y)) -> PrefersRoad(z,x))", "prediction": ["all x.(PrefersSmootherRoad(x,2))", "all x.(PrefersSmootherOfTwoRoads(x) -> SmootherOfTwoRoads(x))", "all x y.((Road(x) & Road(y)) -> Smoother(x,y))", "all x.(PrefersSmootherTwoRoads(x) -> SmootherTwoRoads(x))", "(PrefersSmootherRoads(everyone) -> SmootherRoads(e))", "all x y.((Road(x) & Road(y) & Smoother(x,y)) -> Prefers(x,y))", "(PrefersSmootherTwoRoads(e) & PrefersSmootherTwoRoads(e))", "all x y z.((Road(x) & Road(y) & Road(z) & Smoother(y,z)) -> Prefers(x,y,z))", "all x.(PrefersSmootherRoad(x) -> SmootherRoad(x))", "exists x.(Road(x) & Smoother(x,2))", "exists x.(Road(x) & Road(x) & Smoother(x,2))", "all x y.((Road(x) & Road(y)) -> Smoother(x,y))", "all x y.((Road(x) & Road(y)) -> PrefersSmoother(x,y))", "all x y.((Road(x) & Road(y) & Smoother(y,x)) -> Prefers(x,y))", "all x.(PrefersSmoother(x,2))", "exists x.(Road(x) & Smoother(x,2))"]}
{"id": "folio_train_2008", "nl": "Road one is made of concrete and Road two is made of asphalt.", "fol": "(IsRoad(One) & IsMadeOfConcrete(One) & IsRoad(Two) & IsMadeOfAsphalt(Two))", "prediction": ["(MadeOfConcrete(Road1) & MadeOfAsphalt(Road2))", "(all x.(RoadOne(x) -> MadeOfConcrete(x)) & all y.(Road2(y) -> MadeOfAsphalt(y)))", "all x y.((Road(x) & Road(y)) -> (MadeOfConcrete(x) & MadeOfAsphalt(y)))", "(all x.(Road(x) -> MadeOfConcrete(x)) & all y.(Road(y) -> MadeOfAsphalt(y)))", "(all x y.((Road(x) & Road(y)) -> MadeOfConcrete(x)) & ((Road(y) & Road(y)) -> MadeOfAsphalt(y)))", "all x.(RoadOne(x) -> (MadeOfConcrete(x) & Road2(x) -> MadeOfAsphalt(x)))", "(MadeOfConcrete(Road1) & MadeOfAsphalt(Road2))", "all x y.((Road(x) & Road(y)) -> (MadeOfConcrete(x) & MadeOfAsphalt(y)))", "all x.(RoadOne(x) -> MadeOfConcrete(x) & Road2(x) -> MadeOfAsphalt(x))", "(all x.(RoadOne(x) -> MadeOfConcrete(x)) & all y.(Road2(y) -> MadeOfAsphalt(y)))", "(MadeOfConcrete(Road1) & MadeOfAsphalt(Road2))", "all x y.((Road(x) & Road(y)) -> (MadeOfConcrete(x) & MadeOfAsphalt(y)))", "(MadeOfConcrete(Road1), Road2MadeOfAsphalt(Road1))", "(all x.(RoadOne(x) -> MadeOfConcrete(x)) & all y.(Road2(y) -> MadeOfAsphalt(y)))", "(MadeOfConcrete(Road1) & MadeOfAsphalt(Road2))", "all x y.((Road(x) & Road(y)) -> (MadeOfConcrete(x) & MadeOfAsphalt(y)))"]}
{"id": "folio_train_2009", "nl": "Road one will last longer than Road two", "fol": "LastsLongerThan(One,Two)", "prediction": ["all x y.((RoadOne(x) & Road2(y)) -> LastsLonger(x,y))", "(LongerRoadOne(Road1) & LongerRoad2(Road1))", "all x y z.((RoadOne(x) & Road(y) & Road(z)) -> LastsLonger(x,y,z))", "all x y.((RoadOne(x) & Road(y)) -> LastsLonger(x,y))", "All x.(RoadOne(x) -> LastsLongerThanRoad2(x))", "Road one (Road1) & Road Two (Road1)))", "Road one (Road1) & Road Two (Road1) & Road One (Road2)) & Road One (Road2) & Road Two (Road3) & Road One (Road2))) -> LastsLonger(Road2))", "(LastsLongerRoadOneThanRoadTwo(Road1))", "Road One (LongerRoad1) vs. Road Two (LongerRoad2)))", "(LastsLonger(Road1) & LastsLonger(Road2))", "(LongerRoadOne(Road1) vs LongerRoad2(Road1))", "all x y z.((Road(x) & RoadOne(y) & Road2(z)) -> LastsLonger(x,y,z))", "(LongerRoadOne(Road1) vs.LongerRoad2(Road1)) -> LastsLonger(Road2))", "All x.(RoadOne(x) -> LastsLongerThanRoad2(x))", "all x y.((RoadOne(x) & Road2(y)) -> LastsLonger(x,y))", "all x y.((Road(x) & Road(y)) -> LastsLongerThan(x,y))"]}
{"id": "folio_train_2010", "nl": "Road two is not smoother than Road one.", "fol": "-IsSmootherThan(Two,One)", "prediction": ["all x.(Road(x) -> -SmootherThanRoad(x))", "Road Two & Road One -SmootherThan(Road2))", "(Smoother(Road2) & -Smoother(Road1))", "(-Smoother(Road2) & Smoother(Road1))", "-(RoadTwo(Road1) & RoadOne(Road2))", "all x.(RoadTwo(x) -> -SmootherThanRoadOne(x))", "Road two is notSmootherThanRoadOne(Road2)", "(SmootherThanRoad(Road2) & -SmootherThanRoadOne(Road2))", "all x y.((Road(x) & Road(y)) -> -SmootherThan(x,y))", "-SmootherThanRoad(Road2)", "Road Two & Road One - SmootherThan(Road2))", "Road Two & Road One -SmootherThan(Road2))", "(Smoother(Road2) & -Smoother(Road1))", "Road Two -SmootherThanRoadOne(Road1)", "Road two is not SmootherThanRoadOne(Road2)", "-SmootherThanRoadTwo(Road1)"]}
{"id": "folio_train_2011", "nl": "John prefers Road two.", "fol": "PrefersRoad(John,Two)", "prediction": ["all x.(John(x) -> PrefersRoadTwo(x))", "John prefers Road Two.", "John prefersRoadTwo(John)", "-PrefersRoadTwo(John)", "(PrefersRoad2(John))", "-(PrefersRoad2(John) & Road2(John))", "-PrefersRoadTwo(John)", "(PrefersRoad2(John))", "John prefers Road Two.", "(PrefersRoadTwo(John))", "(PrefersRoad(John) & Road(John))", "John prefers Road Two.", "(PrefersRoad2(John))", "John prefers Road Two.", "John prefers Road Two.", "John prefers Road Two."]}
{"id": "folio_train_2012", "nl": "Camp Davern is a traditional summer camp for boys and girls.", "fol": "(IsTraditionalSummerCamp(Campdavern) & IsForBoysAndGirls(Campdavern))", "prediction": ["all x.(CampDavern(x) -> (TraditionalSummerCamp(x) & ForBoys(x) & ForGirls(x)))", "all x.((Camp(x) & TraditionalSummerCamp(x)) -> (ForBoys(x) | ForGirls(x)))", "all x.(CampDavern(x) -> (TraditionalSummerCamp(x) & ForBoys(x) & ForGirls(x)))", "(TraditionalSummerCamp(CampDavern) & ForBoysAndGirls(CampDavern))", "all x y.((Camp(x) & Camp(y)) -> (ForBoys(x,y) | ForGirls(x,y)))", "(TraditionalSummerCamp(Camp Davern) & ForBoys(Camp) & ForGirls(Camp))", "all x.((Camp(x) & Camp(x)) -> (ForBoys(x) | ForGirls(x)))", "all x y.((Camp(x) & Camp(y)) -> (TraditionalSummerCamp(x,y) & ForBoys(x,y) & ForGirls(x,y)))", "All x.(Camp(x) -> (TraditionalSummerCamp(x) & ForBirds(x) & ForGirls(x)))", "all x.(CampDarn(x) -> (TraditionalSummerCamp(x) & ForBoys(x) & ForGirls(x)))", "all x.(CampDavern(x) -> (TraditionalSummerCamp(x) & ForBoys(x) & ForGirls(x)))", "(TraditionalSummerCamp(Camp,Boys,Girls) & Camp,Davern))", "(TraditionalSummerCamp(CampDavern) & ForBoys(CampDavern) & ForGirls(CampDavern))", "all x y.((Camp(x) & Camp(y) & ForBirds(x,y) & ForGirls(x,y)) -> TraditionalSummerCamp(x,y))", "all x y z.((Camp(x) & Camp(y) & Boy(z) & Girl(z)) -> TraditionalSummerCamp(x,y,z))", "all x.((Camp(x) & TraditionalSummerCamp(x)) -> (ForBoys(x) | ForGirls(x)))"]}
{"id": "folio_train_2013", "nl": "Camp Davern was established in the year 1946.", "fol": "EstablishedInYear(Campdavern,Year1946)", "prediction": ["(EstablishedIn(CampDavern,SufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSufficientSuf", "Camp Davern was established in the year 1946.", "all x.(CampDavern(x) -> EstablishedInYear(x,Sue 1946))", "-(CampDavern(Camp) & EstablishedInSummer46(Camp))", "(Camp Davern) & EstablishedInSummer(Camp Davern))", "all x y.((CampDavern(x) & Year(y)) -> EstablishedIn(x,y))", "(EstablishedInSummer(CampDavern) & Year(CampDavern))", "Camp Davern was established in the year 1946.", "(CampDavern(Camp) & EstablishedInSummer(Camp,Sue 1946))", "all x.(CampDavern(x) -> EstablishedInSummer(x,Sue 1946))", "Camp Davern (CastDavern) & EstablishedInYear(CastDavern,Sufficient1946))", "All x.(CampDarn(x) -> EstablishedInYear(x,Sue 1946))", "FoundedInSummer46(CampDavern)", "Camp Davern was established in the year 1946.", "all x.(CampDavern(x) -> EstablishedIn(x,Suedawn))", "Camp Davern was established in the year 1946."]}
{"id": "folio_train_2014", "nl": "Camp Davern was operated by the YMCA until the year 2015.", "fol": "OperatedByYMCAUntilYear(Campdavern,Year2015)", "prediction": ["all x y.((CampDavern(x) & YMCA(y)) -> OperatedUntil(x,y))", "(OperatedByYMCA(Camp Davern) & YMCA(Camp Davern) & -OperatedByYMCA(Camp Davern) & -OperatedByYMCA(Camp Davern) & -OperatedByYMCA(Camp Davern) & -OperatedByYMCA(Camp Davern) & -OperatedByYMCA(Camp_YMCA(Camp_YMCA) & -OperatedByYMCA)", "all x y z.((CampDavern(x) & YMCA(y) & Year(z)) -> OperatedBy(x,y,z))", "all x.(CampDavern(x) -> OperatedByYMCA(x))", "YMCA operated Camp Davern until the year 2015 (OperatedBy(Camp Davern,YMCA) & -OperatedBy(Camp Davern,YMCA)))", "all x y.((CampDavern(x) & YMCA(y)) -> OperatedUntilYear(x,y))", "Camp Davern operated by YMCA until the year 2015 (y.c.(Camp Davern(c) & OperatedByYMCA(c))))", "Camp Davern was operated by YMCA until the year 2015 (y.z.(CampDavern(z) & OperatedByYMCA(z))))", "(OperatedByYMCAUntilYear2015(CampDavern) & YMCAOperatedUntilYear2015(CampDavern))", "All x.(CampDavern(x) -> OperatedByYMCAUntilYear2015(x))", "(OperatedByYMCA(CampDavern,2015) & OperatedByYMCA(CampDarner,2015))", "all x y z.((Camp(x) & CampDavern(y) & YMCA(z)) -> OperatedBy(x,y,z))", "(OperatedByYMCA(Camp Davern) & YMCA(Camp Davern))", "all x y.((CampDavern(x) & YMCA(y)) -> OperatedUntil(x,y))", "All x.(CampDavern(x) -> OperatedByYMCAUntilYear2015(x))", "All x.(CampDavern(x) -> OperatedByYMCAUntilYear2015(x))"]}
{"id": "folio_train_2015", "nl": "Camp Davern is one of Ontario's oldest summer camps.", "fol": "IsOneOfOldestSummerCamps(Campdavern,Ontariosoldestsummercamps)", "prediction": ["all x.(CampDavern(x) -> OntariosOldestSummerCamp(x))", "Camp Davern is one of Ontario's oldest summer camps.", "all x.((Camp(x) & CampDavern(x)) -> OntariosOldestSummerCamp(x))", "(OldestSummerCamp(CampDavern) & Ontario(CampDarn))", "All x.(Camp(x) -> (OntariosOldestSummerCamp(x) & CampDavern(x)))", "Located in the heart of Toronto, Camp Davern is one of Ontario's oldest summer camps.", "all x y.((Camp(x) & Camp(y)) -> (OntariosOldest(x,y) & Camp(y)))", "(OldestSummerCamp(Camp Davern) & Ontario(Camp))", "all x.((Camp(x) & CampDavern(x)) -> OntariosOldestSummerCamp(x))", "Camp Davern is one of Ontario's oldest summer camps.", "all x.(CampDavern(x) -> OntariosOldestSummerCamp(x))", "All x.(Camp(x) -> (OldestSummerCamp(x) & Ontario(x)))", "All x.(CampDavern(x) -> OntariosOldestSummerCamp(x))", "Camp Davern is one of Ontario's oldest summercamps.", "Camp Davern (Ontario) & FoundedIn1990.", "Camp Davern is one of Ontario's oldest SummerCamps."]}
{"id": "folio_train_2016", "nl": "One of Ontario's oldest summer camps is a traditional summer camp for boys and girls.", "fol": "exists x.(IsOneOfOldestSummerCamps(x,Ontariosoldestsummercamps) & IsTraditionalSummerCamp(x) & IsForBoysAndGirls(x))", "prediction": ["all x.((SummerCamp(x) & OntariosOldest(x)) -> (Traditional(x) & ForBoys(x) & ForGirls(x)))", "all x.((OntarioSummerCamp(x) & TraditionalSummerCamp(x)) -> (ForBoys(x) | ForGirls(x)))", "all x.((SummerCamp(x) & OldestOntarioSummerCamp(x)) -> (TraditionalSummerCamp(x) & ForBoys(x) & ForGirls(x)))", "all x y.((OldestSummerCamp(x) & Ontario(y)) -> (TraditionalSummerCamp(x,y) & ForBoysAndGirls(x)))", "all x.((OntariosOldestSummerCamp(x) & TraditionalSummerCamp(x)) -> (ForBoys(x) | ForGirls(x)))", "(OldestSummerCamp(x) & TraditionalSummerCamp(x))", "all x y.((SummerCamp(x) & OntariosOldest(x) & SummerCamp(y)) -> (Traditional(x,y) & ForBoys(x) & ForGirls(x)))", "all x.((OldestSummerCamp(x) & TraditionalSummerCamp(x)) -> (ForBoys(x) | ForGirls(x)))", "all x y.((OntarioSummerCamp(x) & OntarioSummerCamp(y)) -> (TraditionalSummerCamp(x,y) & ForBoys(x,y) & ForGirls(x,y)))", "(OldestSummerCamp(x) & TraditionalSummerCamp(x) & ForBoysAndGirls(x))", "all x y z.((OldestSummerCamp(x) & Ontario(y) & Boy(z) & Girl(z)) -> TraditionalSummerCamp(x,y,z))", "(OldestSummerCamp(OfOntario(OfSummerCamps) & TraditionalSummerCamp(OfBoys(OfGirls))", "all x y.((OldestSummerCamp(x) & Ontario(y)) -> (TraditionalSummerCamp(x,y) & ForBoys(x,y) & ForGirls(x,y)))", "all x.((SummerCamp(x) & OntariosOldest(x)) -> (TraditionalCamp(x) & ForBoys(x) & ForGirls(x)))", "all x.((OntarioSummerCamp(x) & TraditionalSummerCamp(x)) -> (ForBoys(x) | ForGirls(x)))", "exists x.(OldestSummerCamp(x) & TraditionalSummerCamp(x,Boys,Girls))"]}
{"id": "folio_train_2017", "nl": "A traditional summer camp for boys and girls was operated by the YMCA until the year 2015.", "fol": "exists x.(IsTraditionalSummerCamp(x) & IsForBoysAndGirls(x) & OperatedByYMCAUntilYear(x,Year2015))", "prediction": ["all x y z.((SummerCamp(x) & (Boys(y) | Girls(y)) & YMCA(z)) -> OperatedBy(x,y,z))", "all x y.((Camp(x) & TraditionalSummerCamp(x) & OperatedByYMCA(x,y)) -> (BoysAndGirls(y) & Year2015(y)))", "all x.((Camp(x) & TraditionalSummerCamp(x) & ForBoys(x) & ForGirls(x)) -> OperatedByYMCA(x))", "all x y z.((Camp(x) & SummerCamp(y) & Year(z) & OperatedByYMCA(x,y,z)) -> (ForBoysAndGirls(y,z) & OperatedByYMCA(x,y,z)))", "all x y.((SummerCamp(x) & Traditional(x,y)) -> OperatedByYMCA(x,y))", "(OperatedByYMCAUntilYear2015(YMCA) -> TraditionalSummerCamp(y))", "(exists x,y) & TraditionalSummerCamp(x) & ForBoysAndGirls(y) & OperatedByYMCA(x)) & YMCA(x) & -OperatedUntilYear2015(x))", "(OperatedByYMCAUntilYear2015(YMCA) & TraditionalSummerCamp(y) & ForBirdsAndGirls(y))", "all x.((SummerCamp(x) & OperatedByYMCA(x)) -> (BoysAndGirls(x) & Year2015(x)))", "all x y z.((SummerCamp(x) & YMCA(y) & (Boys(z) | Girls(z))) -> OperatedBy(y,z))", "all x.((Camp(x) & TraditionalSummerCamp(x)) -> OperatedByYMCA(x))", "all x.((Camp(x) & OperatedByYMCA(x)) -> (SummerCamp(x) & ForBirds(x) & ForGirls(x)))", "all x y.((Camp(x) & Traditional(x,y) & ForBirds(y) & ForGirls(y)) -> OperatedByYMCA(x,y))", "all x y z.((TraditionalSummerCamp(x) & BoysAndGirls(y) & YMCA(z) & OperatedBy(x,z)) -> OperatedUntilYear(z,y))", "all x.((SummerCamp(x) & OperatedByYMCA(x) & Year2015(x)) -> (ForBoysAndGirls(x) & OperatedByYMCA(x)))", "all x y.((SummerCamp(x) & Traditional(x,y)) -> OperatedByYMCA(x,y))"]}
{"id": "folio_train_2018", "nl": "Camp Davern was established in 1989.", "fol": "EstablishedInYear(Campdavern,Year1989)", "prediction": ["Camp Davern was established in 1989.", "all x.(CampDavern(x) -> EstablishedIn(x,89))", "(EstablishedIn(CampDavern,89))", "-(CampDavern(Camp) & EstablishedIn(Camp,89))", "Der Camp Davern wurde 1989 errichtet.", "FoundedIn(CampDavern,89)", "Camp Davern was established in 1989.", "all x.(CampDavern(x) -> EstablishedIn(x,89))", "All x.(CampDavern(x) -> EstablishedIn(x,89))", "(EstablishedIn(CampDavern,89))", "(EstablishedIn(CampDavern,89))", "Camp Davern was established in 1989.", "Camp Davern wurde 1989 errichtet.", "all x.(CampDavern(x) -> EstablishedIn(x,89))", "Camp Davern & EstablishedIn(Camp,89)", "Camp Davern was established in 1989."]}
{"id": "folio_train_2019", "nl": "If people publish journals, then they do not work in the entertainment industry.", "fol": "all x.(PublishesJournals(x) -> -WorksInEntertainmentIndustry(x))", "prediction": ["all x.(PublishesJournals(x) -> -WorksInEntertainmentIndustry(x))", "all x.(PublishesJournals(x) -> -EntertainmentIndustry(x))", "all x y.((PublishesJournals(x) & EntertainmentIndustry(y)) -> -WorksIn(x,y))", "all x.(PublishJournals(x) -> -EntertainmentIndustry(x))", "all x.((PublishesJournals(x) & EntertainmentIndustry(x)) -> -WorksIn(x,y))", "all x.(PublishesJournals(x) -> -WorksInEntertainmentIndustry(x))", "all x y.((PublishesJournals(x) & EntertainmentIndustry(y)) -> -WorksIn(x,y))", "all x.(PublishesJournals(x) -> -EntertainmentIndustry(x))", "all x.((PublishesJournals(x) & EntertainmentIndustry(x)) -> -WorksIn(x,EntertainmentIndustry))", "all x y.(PublishesJournals(x) -> -WorksInEntertainmentIndustry(y))", "all x.(PublishesJournals(x) -> -WorkInEntertainmentIndustry(x))", "exists x.(PublicationsJournals(x) & -WorksInEntertainmentIndustry(x))", "all x.(PublishJournals(x) -> -WorkInEntertainment(x))", "all x y.((PublishesJournals(x) & EntertainmentIndustry(y)) -> -WorksIn(x,y))", "all x.(PublishesJournals(x) -> -EntertainmentIndustry(x))", "all x.(PublishesJournals(x) -> -WorksInEntertainmentIndustry(x))"]}
{"id": "folio_train_2020", "nl": "All people who are award-winning novelists publish journals.", "fol": "all x.(IsAwardWinningNovelist(x) -> PublishesJournals(x))", "prediction": ["all x.((Person(x) & AwardWinningNovelist(x)) -> PublicsJournals(x))", "all x.(AwardWinningNovelist(x) -> PublicsJournals(x))", "all x.((Person(x) & AwardWinningNovelist(x)) -> PublicsJournals(x))", "all x y.((Person(x) & AwardWinningNovelist(x)) -> PublicsJournals(x,y))", "all x.(AwardWinningNovelist(x) -> PublicsJournals(x))", "all x.((Person(x) & AwardWinningNovelist(x)) -> PublicsJournals(x))", "all x.((AwardWinningNovelist(x) & AwardWinningNovelist(x)) -> PublicsJournals(x))", "all x y.((Person(x) & AwardWinningNovelist(x)) -> PublicsJournals(x,y))", "all x.(AwardWinningNovelist(x) -> PublicsJournals(x))", "all x.((Person(x) & AwardWinningNovelist(x)) -> PublicsJournals(x))", "all x y.((Person(x) & AwardWinningNovelist(x)) -> PublicsJournals(x,y))", "all x.(AwardWinningNovelist(x) -> (PublishesJournals(x)))", "all x.((Person(x) & AwardWinningNovelist(x)) -> PublishesJournals(x))", "all x.(AwardWinningNovelist(x) -> PublicsJournals(x))", "all x.((Person(x) & AwardWinningNovelist(x)) -> PublicsJournals(x))", "all x.((Person(x) & AwardWinningNovelist(x)) -> PublicatesJournals(x))"]}
{"id": "folio_train_2021", "nl": "People either work in the entertainment industry or are highly acclaimed in their profession.", "fol": "all x.(WorksInEntertainmentIndustry(x) | IsHighlyAcclaimed(x))", "prediction": ["all x.((Person(x) & (WorksInEntertainment(x) | HighlyAcclaimedInProfession(x))) -> HighlyAcclaimedInProfession(x))", "all x.(Person(x) -> (WorksInEntertainment(x) | HighlyAcclaimedInProfession(x)))", "(WorksInEntertainmentIndustry(Person) | HighlyAcclaimedInProfession(Person))", "all x y.((Person(x) & EntertainmentIndustry(y)) -> (WorksIn(x,y) | HighlyAcclaimedInProfession(x,y)))", "all x.((Person(x) & (WorksInEntertainment(x) | HighlyAcclaimed(x))) -> HighlyAcclaimed(x))", "all x.(Person(x) -> (WorksInEntertainment(x) | HighlyAcclaimedInProfession(x)))", "all x y.((Person(x) & Entertainment(y)) -> (WorksIn(x,y) | HighlyAcclaimedInProfession(x,y)))", "all x y.((Person(x) & EntertainmentIndustry(y)) -> (WorksIn(x,y) | HighlyAcclaimedInProfession(x,y)))", "all x.((Person(x) & (WorksInEntertainment(x) | HighlyAcclaimedInProfession(x))) -> HighlyAcclaimedInProfession(x))", "exists x.(Person(x) & (WorksInEntertainmentIndustry(x) | HighlyAcclaimedInProfession(x)))", "exists x.(Person(x) & (WorksInEntertainment(x) | HighlyAcclaimed(x)))", "all x y.(WorksInEntertainment(x) | HighlyAcclaimedInProfession(y))", "exists x.(Person(x) & ((WorksInEntertainmentIndustry(x) | HighlyAcclaimedInProfession(x))) -> HighlyAcclaimedInProfession(x)))", "exists x.(Person(x) & (WorkInEntertainment(x) | HighlyAcclaimedInProfession(x)))", "all x y.((Person(x) & EntertainmentIndustry(y)) -> (WorksIn(x,y) | HighlyAcclaimedInProfession(x,y)))", "exists x.(Person(x) & (WorksInEntertainment(x) | HighlyAcclaimedInProfession(x)))"]}
{"id": "folio_train_2022", "nl": "If people are highly acclaimed in their profession, then they often hold tenured and high-ranking positions at their workplace.", "fol": "all x.(IsHighlyAcclaimed(x) -> HoldsTenuredPosition(x))", "prediction": ["all x.((HighlyAcclaimedInProfession(x)) -> (HoldsTenuredAndHighRankingPositions(x)))", "all x.(HighlyAcclaimedInProfession(x) -> (HoldsTenuredAndHighRankingPositions(x)))", "all x.((Person(x) & HighlyAcclaimedInProfession(x)) -> (HoldsTenured(x) & HighRanking(x)))", "all x y.((Person(x) & HighlyAcclaimedInProfession(x)) -> (HoldsTenured(x) & HighRanking(x)))", "all x.((HighlyAcclaimedInProfession(x) & Workplace(x)) -> (HoldsTenuredAndHighRankingPositions(x)))", "all x y.((HighlyAcclaimedInProfession(x) & Person(y)) -> (HoldsTenuredAndHighRankingPositions(y,x)))", "all x.(HighlyAcclaimedInProfession(x) -> (HoldsTenuredAndHighRankingPositions(x)))", "all x.((People(x) & HighlyAcclaimedInProfession(x)) -> (HoldsTenuredAndHighRankingPositions(x)))", "all x.((Person(x) & HighlyAcclaimedInProfession(x)) -> (HoldsTenuredAndHighRankingPositions(x)))", "all x y.((Person(x) & HighlyAcclaimedInProfession(x)) -> (HoldsTenured(x,y) & HighRanking(x,y)))", "all x.(HighlyAcclaimedInProfession(x) -> (HoldsTenured(x) & HighRanking(x)))", "all x y.((Person(x) & HighlyAcclaimedInProfession(x) & Workplace(y)) -> (HoldsTenured(x,y) & HighRanking(x,y)))", "all x.(HighlyAcceptedInProfession(x) -> (HoldsTenuredAndHighRankingPositions(x)))", "all x y.((HighlyAcclaimedInProfession(x) & Person(y)) -> (HoldsTenuredAndHighRankingPositions(y,x)))", "exists x.(HighlyAcclaimed(x) -> (HoldsTenured(x) & HighRanking(x)))", "all x.(HighlyAcclaimedInProfession(x) -> (HoldsTenuredOrHighRankingPostures(x)))"]}
{"id": "folio_train_2023", "nl": "If people are highly acclaimed in their profession, then they often receive glowing feedback and recommendations from their colleagues.", "fol": "all x.(IsHighlyAcclaimed(x) -> ReceivesGlowingFeedback(x))", "prediction": ["all x.((Person(x) & HighlyAcclaimedInProfession(x)) -> (GlowingFeedback(x) & Recommendations(x)))", "all x.(HighlyAcclaimedInProfession(x) -> (GlowingFeedback(x) & Recommendations(x)))", "all x y.((Person(x) & HighlyAcclaimedInProfession(x)) -> (GlowingFeedback(y) & Recommendations(y)))", "all x.((Person(x) & HighlyAcclaimedInProfession(x)) -> (GlowingFeedback(x) & RecommendationsFromColleagues(x)))", "all x.((People(x) & HighlyAcclaimedInProfession(x)) -> (GlowingFeedback(x) & Recommendations(x)))", "all x y.((Person(x) & HighlyAcclaimedInProfession(x)) -> (ReceivesGlowingFeedback(x) & ReceivesRecommendations(x)))", "all x y z.((Person(x) & HighlyAcclaimedInProfession(x) & Colleague(y) & ReceivesGlowingFeedbackAndRecommendations(x,y)) -> HighlyAcclaimedInProfession(x,y))", "all x.((Person(x) & HighlyAcclaimedInProfession(x)) -> (ReceivesGlowingFeedback(x) & ReceivesRecommendations(x)))", "all x.(HighlyAcclaimedInProfession(x) -> (GlowingFeedback(x) & RecommendationsFromColleagues(x)))", "all x.((HighlyAcclaimedInProfession(x)) -> (GlowingFeedback(x) & Recommendations(x)))", "all x y.((HighlyAcclaimedInProfession(x) & Person(y)) -> (GlowingFeedback(y) & RecommendationsFromColleagues(y)))", "all x.(HighlyAcclaimedInProfession(x) -> (ReceivesGlowingFeedback(x) & ReceivesRecommendations(x)))", "all x y.((Person(x) & HighlyAcclaimedInProfession(x) & Colleague(y)) -> ReceivesGlowingFeedbackAndRecommendations(x,y))", "all x.((Person(x) & HighlyAcclaimed(x)) -> (GlowingFeedback(x) & RecommendationsFromColleagues(x)))", "all x y.((HighlyAcclaimedInProfession(x) & Person(y)) -> ReceivesGlowingFeedbackAndRecommendations(y,x))", "all x.(HighlyAcclaimedInProfession(x) -> (GlowingFeedback(x) & RecommendationsFromColleagues(x)))"]}
{"id": "folio_train_2024", "nl": "If Emily is either both highly acclaimed in her profession and often holds tenured and high-ranking positions at her workplace, or she is neither highly acclaimed in her profession nor often holds tenured and high-ranking positions at her workplace, then Emily is not highly acclaimed in her profession. ", "fol": "(((IsHighlyAcclaimed(Emily) & HoldsTenuredPosition(Emily)) | (-IsHighlyAcclaimed(Emily) & -HoldsTenuredPosition(Emily))) -> -IsHighlyAcclaimed(Emily))", "prediction": ["all x.((Emily(x) & (HighlyAcclaimed(x) | (HoldsTenured(x) & HighRanking(x)))) | (-HighlyAcclaimed(x) & HoldsTenured(x) & HighRanking(x)))))", "((HighlyAcclaimedInProfession(Emily) & OftenHoldsTenuredAndHighRankingPositions(Emily)) | (-HighlyAcclaimedInProfession(Emily) & OftenHoldsTenuredAndHighRankingPositions(Emily))))", "all x.((Emily(x) & (HighlyAcclaimedInProfession(x) & OftenHoldsTenuredAndHighRankingPositions(x)) | (-HighlyAcclaimedInProfession(x) & OftenHoldsTenuredAndHighRankingPositions(x)))) -> -HighlyAcclaimedInProfession(x))", "(all x.((Emily(x) & HighlyAcclaimedInProfession(x) & HasTenuredAndHighRankingPositions(x)) | (-HighlyAcclaimedInProfession(x) & HasTenuredAndHighRankingPositions(x)))) -> -HighlyAcclaimedInProfession(x))", "all x.((Emily(x) & (HighlyAcceptedInProfession(x) & OftenHoldsTenuredAndHighRankingPositions(x)) | (-HighlyAcceptedInProfession(x) & OftenHoldsTenuredAndHighRankingPositions(x)))))", "((HighlyAcclaimedInProfessional(Emily) & OftenHoldsTenuredAndHighRankingPositions(Emily)) | (-HighlyAcclaimedInProfessional(Emily) & OftenHoldsTenuredAndHighRankingPositions(Emily))))", "all x y.((Emily(x) & (HighlyAcclaimed(x) & Workplace(y) & OftenHoldsTenuredAndHighRankingPositions(x)) | (-HighlyAcclaimed(x) & Workplace(y))))", "((HighlyAcclaimedInProfession(e) & OftenHoldsTenuredAndHighRankingPositions(e)) | (-HighlyAcclaimedInProfession(e) & OftenHoldsTenuredAndHighRankingPositions(e))))", "all x.((Emily(x) & ((HighlyAcclaimed(x) & Workplace(x) & -HighlyAcclaimed(x)) | -HighlyAcclaimed(x) & Workplace(x))) -> -HighlyAcclaimed(x))", "(all x.((Emily(x) & HighlyAcclaimed(x) & Workplace(x)) | (-HighlyAcclaimed(x) & Workplace(x)) | (-HighlyAcclaimed(x) & Workplace(x)))))", "all x.((Emily(x) & HighlyAcclaimedInProfession(x) & (HoldsTenured(x) | HoldsHighRanking(x))) | (-HoldsTenured(x) & HoldsHighRanking(x)))))", "all x.((Emily(x) & ((HighlyAcclaimedInProfessional(x) & OftenHoldsTenuredAndHighRankingPositions(x)) | (-HighlyAcclaimedInProfessional(x) & OftenHoldsTenuredAndHighRankingPositions(x))))) -> -HighlyAcclaimedInProfessional(x))", "all x y.((Emily(x) & (HighlyAcclaimedInProfession(x) & Employer(y) & HoldsTenuredAndHighRankingPositions(x)) | (-HighlyAcclaimedInProfession(x) & HoldsTenuredAndHighRankingPositions(x)))) -> -HighlyAcclaimedInProfession(x))", "all x y.((Emily(x) & (HighlyAcceptedInProfession(x) & HighRankingPositions(x) & Workplace(y)) | (-HighlyAcceptedInProfession(x) & Workplace(x) & Workplace(y))))", "all x.((Emily(x) & (HighlyAcclaimed(x) & TenuredAndHighRanking(x)) | -(HighlyAcclaimed(x) & TenuredAndHighRanking(x)))))", "all x.((Emily(x) & HighlyAcclaimed(x) & TenuredAndHighRanking(x)) | (-HighlyAcclaimed(x) & TenuredAndHighRanking(x))))"]}
{"id": "folio_train_2025", "nl": "Emily often holds tenured and high-ranking positions at her workplace.", "fol": "HoldsTenuredPosition(Emily)", "prediction": ["all x.((Emily(x) & Tenured(x) & HighRanking(x)) -> HoldsAtWorkplace(x))", "all x y.((Emily(x) & Workplace(y)) -> (HoldsTenured(x,y) & HoldsHighRanking(x,y)))", "(HoldsTenuredAndHighRankingPositions(Emily))", "(HoldsTenured(Emily) & HoldsHighRanking(Emily))", "all x.((Emily(x) & TenuredPositions(x) & HighRankingPositions(x)) -> HoldsAtWorkplace(x))", "(HoldsFermentedAndHighRankingPositions(Emily,Workplace) & Often(Emily,Workplace))", "all x y.((Emily(x) & Workplace(y)) -> (HoldsTenured(x,y) & HighRanking(x,y)))", "all x y z.((Emily(x) & Workplace(y) & Tenured(z) & HighRanking(z)) -> HoldsAt(x,y,z))", "all x.((Emily(x) & Tenured(x) & HighRanking(x)) -> HoldsAtWorkplace(x))", "exists x.(Emily(x) & Tenured(x) & HighRanking(x))", "(HoldsTenuredAndHighRankingPositions(Emily,Workplace))", "all x.((Emily(x) & TenuredPositions(x) & HighRankingPositions(x)) -> HoldsAtWorkplace(x))", "all x y.((Emily(x) & Workplace(y)) -> (HoldsTenured(x,y) & HoldsHighRanking(x,y)))", "all x y.((Emily(x) & Workplace(y)) -> (Tenured(x) & HighRanking(x)))", "exists x.(Emily(x) & Tenured(x) & HighRanking(x))", "(HoldsTenuredOrHighRankingPositions(Emily,Workplace))"]}
{"id": "folio_train_2026", "nl": "Emily often receives glowing feedback and recommendations from their colleagues and is an award-winning novelist.", "fol": "(ReceivesGlowingFeedback(Emily) & IsAwardWinningNovelist(Emily))", "prediction": ["all x.((Emily(x) & ReceivesGlowingFeedback(x) & ReceivesRecommendations(x)) -> AwardWinningNovelist(x))", "(GlowingFeedbackAndRecommendations(Emily) & AwardWinningNovelist(Emily))", "(all x.((Emily(x) & GlowingFeedback(x) & Recommendations(x)) -> AwardWinningNovelist(x)))", "all x y.((Emily(x) & Colleague(y)) -> (GlowingFeedback(x,y) & Recommendations(x,y) & AwardWinningNovelist(x)))", "(AwardWinningNovelist(Emily) & ReceivesGlowingFeedbackAndRecommendations(Emily))", "all x.(Emily(x) -> (GlowingFeedback(x) & Recommendations(x) & AwardWinningNovelist(x)))", "all x y.((Emily(x) & Coworker(y)) -> (GlowingFeedback(x,y) & Recommendations(x,y) & AwardWinningNovelist(x)))", "all x y z.((Emily(x) & Colleague(y) & Colleague(z)) -> (GlowingFeedback(x,y) & Recommendations(x,z) & AwardWinningNovelist(x)))", "Emily receives glowingFeedbackAndRecommendationsFromColleagues(Emily,Emily) & AwardWinningNovelist(Emily,Emily))", "((Emily(e) & ReceivesGlowingFeedback(e) & ReceivesRecommendations(e)) -> AwardWinningNovelist(e))", "Emily ((GlowingFeedback(emily) & ReceivingRecommendations(emily)) -> AwardWinningNovelist(emily))", "all x.((Emily(x) & ReceivesGlowingFeedback(x) & ReceivesRecommendations(x)) -> AwardWinningNovelist(x))", "(AwardWinningNovelist(Emily) & ReceivesGlowingFeedbackAndRecommendations(Emily,Coworkers))", "(all x.(Emily(x) -> (GlowingFeedback(x) & Recommendations(x))) & AwardWinningNovelist(x))", "(GlowingFeedbackAndRecommendations(Emily) & AwardWinningNovelist(Emily))", "all x.((Emily(x) & ReceivesGlowingFeedbackAndRecommendations(x)) -> AwardWinningNovelist(x))"]}
{"id": "folio_train_2027", "nl": "If Emily either often receives glowing feedback and recommendations from her colleagues or is an award-winning novelist, then Emily does not both publish journals and is an award-winning novelist.", "fol": "((ReceivesGlowingFeedback(Emily) | IsAwardWinningNovelist(Emily)) -> -(PublishesJournals(Emily) & IsAwardWinningNovelist(Emily)))", "prediction": ["all x.((Emily(x) & (GlowingFeedback(x) | AwardWinningNovelist(x))) -> -(PublishesJournals(x) & AwardWinningNovelist(x))))", "((FollowingGlowingFeedbackAndRecommendations(Emily) & -(FollowingFeedbackAndRecommendations(Emily) | AwardWinningNovelist(Emily))) | (FollowingFeedbackAndRecommendations(Emily) & AwardWinningNovelist(Emily))))", "all x y.((Emily(x) & (GlowingFeedback(x) | AwardWinningNovelist(x))) -> -(PublishesJournals(x) & AwardWinningNovelist(x))))", "(all x.((Emily(x) & (GlowingFeedback(x) | AwardWinningNovelist(x))) -> -(PublishesJournals(x) & AwardWinningNovelist(x))))", "all x.((Emily(x) & (GlowingFeedback(x) | AwardWinningNovelist(x))) -> -(PublishesJournals(x) & AwardWinningNovelist(x))))", "all x.((Emily(x) & (GlowingFeedback(x) & Recommendations(x) | AwardWinningNovelist(x))) -> -(PublishesJournals(x) & AwardWinningNovelist(x))))", "all x.((Emily(x) & ((GlowingFeedback(x) & Recommendations(x)) | AwardWinningNovelist(x))) -> -(PublishesJournals(x) & AwardWinningNovelist(x))))", "all x.((Emily(x) & (FlaggingFeedbackAndRecommendations(x) | AwardWinningNovelist(x))) -> -(PublishesJournals(x) & AwardWinningNovelist(x))))", "(all x.((Emily(x) & (GlowingFeedback(x) | AwardWinningNovelist(x))) -> -(PublishesJournals(x) & AwardWinningNovelist(x))))", "all x y.((Emily(x) & (GlowingFeedback(x) | AwardWinningNovelist(x))) -> -(PublishesJournals(x) & AwardWinningNovelist(x))))", "all x.((Emily(x) & (GlowingFeedback(x) | AwardWinningNovelist(x))) -> -(PublishesJournals(x) & AwardWinningNovelist(x))))", "all x.((Emily(x) & (LightlyReceivesGlowingFeedback(x) | AwardWinningNovelist(x))) -> -(PublishesJournals(x) & AwardWinningNovelist(x))))", "all x.((Emily(x) & (GlowingFeedback(x) | AwardWinningNovelist(x))) -> -PublishesJournals(x) & AwardWinningNovelist(x))", "(all x.((Emily(x) & (GlowingFeedback(x) | AwardWinningNovelist(x))) -> -(PublishesJournals(x) & AwardWinningNovelist(x))))", "all x y.((Emily(x) & (GlowingFeedback(x) | AwardWinningNovelist(x))) -> -(PublishesJournals(x) & AwardWinningNovelist(y)))", "(all x.((Emily(x) & (GlowingFeedback(x) | AwardWinningNovelist(x))) -> -PublishesJournals(x) & AwardWinningNovelist(x)))"]}
{"id": "folio_train_2028", "nl": "Thick as Thieves is a young adult fantasy novel, written by Megan Whalen Turner.", "fol": "(IsYoungAdultFantasyNovel(Thickastheives) & AuthoredBy(Thickastheives,Megan))", "prediction": ["ThickAsThieves(x) -> (YAFantasyNovel(x) & WrittenByMeganWhalenTurner(x)))", "(YANovel(ThickAsThieves) & WrittenByMeganWhalenTurner(ThickAsThieves))", "ThickAsThieves is a youngadultFantasyNovel(x) & WrittenByMeganWhalenTurner(x))", "(YoungAdultFantasyNovel(ThickAsThieves) & WrittenByMeganWhalenTurner(ThickAsThieves))", "(YAFantasyNovel(ThickAsThieves) & WrittenByMeganWhalenTurner(ThickAsThieves))", "all x.(ThickAsThieves(x) -> (YAFantasyNovel(x) & WrittenByMeganWhalenTurner(x)))", "ThickAsThieves(x) -> (YoungAdultFantasyNovel(x) & WrittenByMeganWhalenTurner(x)))", "ThickAsTwelves(x) -> (YAFantasyNovel(x) & WrittenByMeganWhalenTurner(x)))", "(YANovel(ThickAsThies) & WrittenByMeganWhalenTurner(ThickAsThies))", "all x.(ThickAsThies(x) -> (YAFantasyNovel(x) & WrittenByMeganWhalenTurner(x)))", "ThickAsThieves (YANovel(x) & WrittenByMeganWhalenTurner(x))", "(YAFantasyNovel(ThickAsThies) & WrittenByMeganWhalenTurner(ThickAsThies))", "(YANovel(ThickAsTwelves) & WrittenByMeganWhalenTurner(ThickAsThieves))", "all x.(ThickAsTieves(x) -> (YoungAdultFantasyNovel(x) & WrittenByMeganWhalenTurner(x)))", "ThickAsThies(x) -> (YAFantasyNovel(x) & WrittenByMeganWhalenTurner(x)))", "ThickAsTwelves(x) -> (YoungAdultFantasyNovel(x) & WrittenByMeganWhalenTurner(x)))"]}
{"id": "folio_train_2029", "nl": "Thick as Thieves was published by Greenwillow Books.", "fol": "PublishedByCompany(Thickastheives,Greenwillowbooks)", "prediction": ["ThickAsThieves(x) & PublishedByGreenwillowBooks(x))", "(PublishedByGreenwillowBooks(ThickAsThies))", "ThickAsThieves(x) -> PublishedByGreenwillowBooks(x))", "All x.(ThickAsThies(x) -> PublishedByGreenwillowBooks(x))", "ThickAsTwelves(x) -> PublishedByGreenwillowBooks(x))", "The ThickAsThieves(x) was published by GreenwillowBooks(x))", "ThickAsThies(x) -> PublishedByGreenwillowBooks(x))", "ThickAsTwelves(x) & PublishedByGreenwillowBooks(x))", "ThickaStickAsThieves(x) & PublishedByGreenwillowBooks(x))", "(PublishedByGreenwillowBooks(ThickAsThieves))", "ThickaSweetAsThieves(x) & PublishedByGreenwillowBooks(x))", "ThickAsThies(x) & PublishedByGreenwillowBooks(x))", "ThickAsThieves(x) & PublishedByGreenwillowBooks(x))", "ThickAsTieves was published by GreenwillowBooks.", "ThickAsThieves(x) -> PublishedByGreenwillowBooks(x))", "ThickAsTwelves(x) -> PublishedByGreenwillowBooks(x))"]}
{"id": "folio_train_2030", "nl": "If a book was published by a company, than the author of that book worked with the company that published the book.", "fol": "all z.((AuthoredBy(x,y) & PublishedByCompany(x,z)) -> CollaboratedWith(y,z))", "prediction": ["all x y.((Book(x) & Company(y) & PublishedBy(x,y)) -> AuthorWorkedWith(x,y))", "all x y z.((Book(x) & Company(y) & PublishedBy(x,y)) -> AuthorWorkedWith(x,z))", "all x.((Book(x) & PublishedByCompany(x)) -> AuthorWorkedWithCompany(x))", "all x y.((Book(x) & Company(y) & PublishedBy(x,y)) -> AuthorWorkedWith(x,y))", "all x.(PublishedByCompany(x) -> AuthorWorkedWithCompany(x))", "all x y z.((Book(x) & Company(y) & Company(z) & PublishedBy(x,y,z)) -> AuthorWorkedWith(x,y,z))", "all x y z.((Book(x) & Company(y) & PublishedBy(x,y)) -> AuthorWorkedWith(x,z))", "all x y.((Book(x) & PublishedByCompany(x)) -> AuthorWorkedWithCompany(y,x))", "all x y.((Book(x) & Company(y) & PublishedBy(x,y)) -> WorkedWith(x,y))", "all x.((Book(x) & PublishedByCompany(x)) -> AuthorWorkedWithCompany(x))", "all x.((BookPublishedByCompany(x)) -> AuthorWorkedWithCompany(x))", "all x.(PublishedByCompany(x) -> AuthorWorkedWithPublishedBook(x))", "all x y z.((Book(x) & Company(y) & Company(z) & PublishedBy(x,y,z)) -> AuthorWorkedWith(x,y,z))", "all x y z.((Book(x) & Company(y) & PublishedBy(x,y)) -> AuthorWorkedWith(x,z))", "all x y.((Book(x) & PublishedByCompany(x)) -> AuthorWorkedWithCompany(x,y))", "all x y.((Book(x) & Company(y) & PublishedBy(x,y)) -> AuthorWorkedWith(x,y))"]}
{"id": "folio_train_2031", "nl": "The fictional Mede Empire is where Thick as Thieves is set.", "fol": "(IsFictional(Medeempire) & IsSetIn(Thickastheives,Medeempire))", "prediction": ["(FictionalMedeEmpire(MedeEmpire) & ThickAsThieves(MedeEmpire))", "all x.((FictionalMedeEmpire(x) & ThickAsThieves(x)) -> SetIn(x))", "(FictionalMedeEmpire(MedeEmpire) & ThickAsThieves(MedeEmpire))", "(FilmficficMedeEmpire(MedeEmpire) & ThickAsThieves(MedeEmpire))", "(FictionalMedeEmpire(MedeEmpire) & ThickAsThieves(MedeEmpire))", "all x y.((FictionalMedeEmpire(x) & ThickAsThieves(y)) -> SetIn(x,y))", "The fictional MedeEmpire(MelteEmpire,ThickAsThieves)", "all x.((FictionalMedeEmpire(x) & ThickAsThirsty(x)) -> SetIn(x,ThickAsThirsty(x))", "In the fictional MedeEmpire(MelteEmpire) is set ThickAsThireves(MelteEmpire)", "all x y.((FilmishMedeEmpire(x) & ThickAsThieves(y)) -> SetIn(x,y))", "All x.(FilmishMedeEmpire(x) -> SetIn(x,ThickAsThieves))", "(FilmishMedeEmpire(MedeEmpire) & ThickAsTieves(MedeEmpire))", "exists x.(FictionalMedeEmpire(x) & ThickAsThirves(x))", "(FictionalMedeEmpire(MedeEmpire) & ThickAsThieves(MedeEmpire))", "The fictional MedeEmpire(MeltedEmpire)", "All x.(FilmishMedeEmpire(x) -> SetIn(x,ThickAsTieves))"]}
{"id": "folio_train_2032", "nl": "The Mede Empire plots to swallow up some nearby countries.", "fol": "exists x.(IsCountry(x) & IsNearby(Medeempire,x) & PlansToConquer(Medeempire,x))", "prediction": ["all x y.((MedeEmpire(x) & Country(y)) -> PlotsToSnake(x,y))", "all x.(MedeEmpire(x) -> PlotsToSnakeUpNearbyCountries(x))", "(MedeEmpirePlotsToSnakeUpNearbyCountries(MedeEmpire))", "all x y z.((MedeEmpire(x) & Country(y) & Country(z)) -> PlotsToSnake(x,y,z))", "all x.(MedeEmpire(x) -> (PlotsToSnakeUpNearbyCountries(x)))", "all x y.((MedeEmpire(x) & Country(y)) -> PlotsToSnap(x,y))", "(MedeEmpirePlotsToSnapNearbyCountries(MedeEmpire)", "exists x y.(MedeEmpire(x) & Country(y) & PlotsToSnake(x,y))", "all x y.((MedeEmpire(x) & Country(y)) -> PlannedToSnake(x,y))", "exists x.(MedeEmpire(x) & PlanesToSnap(x))", "(MedeEmpirePlotsToSnakeUpNearbyCountries(MedeEmpire,NearbyCountries))", "all x y z.((MedeEmpire(x) & Country(y) & Country(z)) -> PlotsToSnap(x,y,z))", "exists x.(MedeEmpire(x) & PlanesToSnakeUp(x))", "exists x.(MedeEmpire(x) & PlansToSnakeUp(x))", "all x y.((MedeEmpire(x) & Country(y)) -> PlotsToSnake(x,y))", "All x.(MedeEmpire(x) -> PlotsToSnapNearbyCountries(x))"]}
{"id": "folio_train_2033", "nl": "Attolia and Sounis are countries near the Mede Empire.", "fol": "(IsCountry(Attolia) & IsNearby(Medeempire,Attolia) & IsCountry(Sounis) & IsNearby(Medeempire,Sounis))", "prediction": ["(NearMedeEmpire(Attolia) & NearSounis(Sounis))", "all x.((Country(x) & Attolia(x) & Country(x) & Sounis(x)) -> NearMedeEmpire(x))", "(Country(Attolia) & Country(Sounis))", "All x y.((Country(x) & Attolia(x) & Country(y) & Sounis(y)) -> NearMedeEmpire(x))", "Attolia and Sounis are countries near MedeEmpire.", "all x.((Country(x) & NearMedeEmpire(x)) -> (Attolia(x) | Sounis(x)))", "(NearMedeEmpire(Attolia) & NearSounis(Sounis))", "(Land(Attolia) | Land(Sounis))", "all x.((Country(x) & Attolia(x) & Country(x) & Sounis(x)) -> NearMedeEmpire(x))", "All x y.((Attolia(x) & Sounis(y)) -> NearMedeEmpire(x))", "Attolia and Sounis are countries near MedeEmpire.", "all x.((Country(x) & Attolia(x) & Country(x,Sounis)) -> NearMedeEmpire(x))", "(Country(Attolia) & Country(Sounis))", "(NearMedeEmpire(Attolia,MedeEmpire) & NearSounis(Attolia,MedeEmpire))", "(NearMedeEmpire(Attolia) & NearSounis(Sounis))", "(NearMedeEmpire(Attolia) & NearMedeEmpire(Sounis))"]}
{"id": "folio_train_2034", "nl": "Thick as Thieves was sold both as a hardcover and an e-book.", "fol": "(AvailableAs(Thickastheives,Hardcover) & AvailableAs(Thickastheives,Softcover))", "prediction": ["all x.(ThickAsThieves(x) -> (SoldAsHardcover(x) & SoldAsEbook(x)))", "(SoldAsHardcover(ThickAsThies) & SoldAsEBook(ThickAsThies))", "ThickAsThieves(x) & SoldAsHardcover(x) & SoldAsEbook(x))", "all x.(ThickAsThies(x) -> (SoldAsHardcover(x) & SoldAsEBook(x)))", "(SoldAsHardcover(ThickAsThieves) & SoldAsEbook(ThickAsThieves))", "all x y.((ThickAsThieves(x) & Hardcover(y) & EBook(y)) -> SoldAs(x,y))", "all x.(ThickAsTieves(x) -> (SoldAsHardcover(x) & SoldAsEBook(x)))", "all x.(ThickAsTwelves(x) -> (SoldAsHardcover(x) & SoldAsEBook(x)))", "ThickAsTieves(x) & Hardcover(x) & EBook(x))", "(SoldAsHardcover(ThickAsTieves) & SoldAsEBook(ThickAsTieves))", "all x y.((ThickAsTieves(x) & Hardcover(y)) -> SoldAs(x,y))", "(SoldAsHardcover(ThickAsThies(ThickAsThies) & SoldAsEbook(ThickAsThies))", "ThickAsThieves(x) & SoldAsHardcover(x) & SoldAsEBook(x))", "all x.(ThickAsThirsty(x) -> (SoldAsHardcover(x) & SoldAsEBook(x)))", "All x.(ThickAsTwelves(x) -> (SoldAsHardcover(x) & SoldAsEbook(x)))", "all x.(ThickAsTieves(x) -> (SoldAsHardcover(x) & SoldAsEbook(x)))"]}
{"id": "folio_train_2035", "nl": "Megan Whalen Turner worked with Greenwillow Books.", "fol": "CollaboratedWith(Megan,Greenwillowbooks)", "prediction": ["Megan Whalen Turner worked with GreenwillowBooks.", "(WorkedWithGreenwillowBooks(MeganWhalenTurner))", "all x y.((MeganWhalenTurner(x) & GreenwillowBooks(y)) -> WorkedWith(x,y))", "all x.(MeganWhalenTurner(x) -> WorkedWithGreenwillowBooks(x))", "Megan WhalenTurner worked with GreenwillowBooks.", "Megan Whalen Turner worked with GreenwillowBooks.", "MeganWhalenTurner worked with GreenwillowBooks.", "(WorkedWithGreenwillowBooks(MeganWhalenTurner))", "All x.(MeganWhalenTurner(x) -> WorkedWithGreenwillowBooks(x))", "all x y.((MeganWhalenTurner(x) & GreenwillowBooks(y)) -> WorkedWith(x,y))", "Megan WhalenTurner worked with GreenwillowBooks.", "MeganWhalenTurner worked with GreenwillowBooks.", "(WorkedWithGreenwillowBooks(MeganWhalenTurner)", "Megan Whalen Turner worked with GreenwillowBooks.", "(WorkedWithGreenwillowBooks(MeganWhalenTurner)", "Megan Whalen Turner worked with GreenwillowBooks."]}
{"id": "folio_train_2036", "nl": "The Mede Empire plans to swallow up Attolia.", "fol": "PlansToSwallowUp(Medeempire,Attolia)", "prediction": ["All x.(MedeEmpire(x) -> PlansToSnapAttolia(x))", "all x y.((MedeEmpire(x) & Attolia(y)) -> PlansToSnake(x,y))", "PlansToSnakeAttolia(MedeEmpire)", "The MedeEmpirePlansToSnakeUpAttolia(MedeEmpire)", "(PlansToSnakeAttolia(MedeEmpire)", "PlannedToSnakeAttolia(MedeEmpire)", "The MedeEmpirePlansToSnapAttolia(MedeEmpire)", "all x.(MedeEmpire(x) -> PlansToSnakeAttolia(x))", "all x y.((MedeEmpire(x) & Attolia(y)) -> PlansToSnap(x,y))", "(PlansToSnakeAttolia(MedeEmpire)", "All x.(MedeEmpire(x) -> PlansToSnapUpAttolia(x))", "All x.(MedeEmpire(x) -> PlannedToSnakeAttolia(x))", "all x y.((MedeEmpire(x) & Attolia(y)) -> PlansToSnakeUp(x,y))", "All x.(MedeEmpire(x) -> PlannedToSnapUpAttolia(x))", "all x y.((MedeEmpire(x) & Attolia(y)) -> PlansToSnap(x,y))", "All x.(MedeEmpire(x) -> PlansToSnakeAttolia(x))"]}
{"id": "folio_train_2037", "nl": "Thick as Thieves is not set in the mede empire.", "fol": "-IsSetIn(Thickastheives,Medeempire)", "prediction": ["all x.(ThickAsThieves(x) -> -SetInMedeEmpire(x))", "(-SetInMedeEmpire(ThickAsThieves))", "ThickAsThieves -SetInMedeEmpire(ThickAsThieves)", "(SetInMedeEmpire(ThickAsThieves) -> -SetInMedeEmpire(ThickAsThieves))", "((ThickAsTieves(th) & -SetInMedeEmpire(th)) | (-SetInMedeEmpire(th) & SetInMedeEmpire(th))))", "-MedeEmpire(ThickAsThieves)", "all x.(ThickAsThires(x) -> -SetInMedeEmpire(x))", "-SetInMedeEmpire(ThickAsTwelves)", "all x.(ThickAsTieves(x) -> -SetInMedeEmpire(x))", "all x.(ThickAsThies(x) -> -SetInMedeEmpire(x))", "ThickAsTieves -SetInMedeEmpire(ThickAsTieves)", "-MedeEmpireSetInThickAsThieves(x)", "(-SetInMedeEmpire(ThickAsThieves))", "All x.(ThickAsTwelves(x) -> -SetInMedeEmpire(x))", "-SetInDeepEmpire(ThickAsThireves)", "all x.(TickAsThieves(x) -> -SetInMedeEmpire(x))"]}
{"id": "folio_train_2038", "nl": "Megan Whalen Turner did not work with Greenwillow Books.", "fol": "-CollaboratedWith(Megan,Greenwillowbooks)", "prediction": ["(-WorksWithGreenwillowBooks(MeganWhalenTurner))", "all x.(MeganWhalenTurner(x) -> -WorksWithGreenwillowBooks(x))", "Megan Whalen Turner -WorkedWithGreenwillowBooks(MeganWhalen(MeganWhalen))", "MeganWhalenTurner -WorkedWithGreenwillowBooks(MeganWhalenTurner)", "(-WorkedWithGreenwillowBooks(MeganWhalenTurner))", "-exists x.(MeganWhalenTurner(x) & GreenwillowBooks(x))", "(WorksWithGreenwillowBooks(MeganWhalenTurner))", "(-WorksWithGreenwillowBooks(MeganWhalenTurner))", "Megan Whalen Turner (noGreenwillowBooks(n) & WorksWith(n)))", "All x.(MeganWhalenTurner(x) -> -WorksWithGreenwillowBooks(x))", "Megan Whalen Turner -WorkedWithGreenwillowBooks(MeganWilson)", "-(WorksWithGreenwillowBooks(MeganWhalenTurner))", "(WorksWithGreenwillowBooks(MeganWhalenTurner))", "MeganWhalenTurner -WorkedWithGreenwillowBooks(MeganWhalenTurner)", "(-WorksWithGreenwillowBooks(MeganWhalenTurner))", "Megan Whalen Turner -WorkedWithGreenwillowBooks."]}
{"id": "folio_train_2039", "nl": "WeTab is a MeeGo-based tablet computer.", "fol": "all x.((IsWeTabProduct(x) -> IsMeeGoBased(x)) & IsTabletComputer(x))", "prediction": ["all x.(WeTab(x) -> MeeGoBasedTabletComputer(x))", "WeTab (MeeGoBasedTabletComputer)", "WeTab is a MeeGoBasedTabletComputer(x)", "all x.(WeTab(x) -> (MeeGoBased(x) & TabletComputer(x)))", "(MeeGoBased(WeTab))", "All x.(WeTab(x) -> MeeGoBasedTabletComputer(x))", "(MeeGoBasedTabletComputer(WeTab))", "All x y.((WeTab(x) & MeeGo(y)) -> TabletComputer(x))", "WeTab (MeeGoBasedComputer(x))", "all x.((WeTab(x) & MeeGoBasedComputer(x)) -> TabletComputer(x))", "all x.(WeTab(x) -> (MeeGoBasedTabletComputer(x) & -MeeGoBasedComputer(x)))", "All x.(WeTab(x) -> (MeeGoBasedTabletComputer(x) & -MeeGoBasedComputer(x)))", "All x.(WeTab(x) -> MeeGoBasedComputer(x))", "(MeeGoBased(WeTab))", "All x y.((WeTab(x) & MeeGo(y)) -> TabletComputer(x,y))", "all x.(WeTab(x) -> (MeeGoBased(x) & TabletComputer(x)))"]}
{"id": "folio_train_2040", "nl": "There is a WeTab product.", "fol": "exists x.IsWeTabProduct(x)", "prediction": ["exists x.(WeTabProduct(x))", "Exists x.(WeTabProduct(x))", "exists x.(WeTabProduct(x) & -WeTabProduct(x))", "exist's x.(WeTabProduct(x))", "Exists A WeTabProduct(a)", "Exists x.(WeTabProduct(x))", "(exists x.(WeTabProduct(x)) & Product(x))", "exists x.(WeTabProduct(x))", "exists x.(WeTabProduct(x) & -WeTabProduct(x))", "exists x.(WeTab(x) & Product(x))", "Exists x.(WeTabProduct(x))", "exists x.(WeTabProduct(x))", "exists x.(WeTabProduct(x) & UsedBy(x))", "exists x.(WeTab(x) & Product(x))", "exists x.(WeTabProduct(x) & Product(x))", "exists x.(WeTabProduct(x) & AvailableIn(x,y))"]}
{"id": "folio_train_2041", "nl": "WeTab was announced by Neofonie.", "fol": "all x.(IsWeTabProduct(x) -> WasAnnouncedBy(Neofonie,x))", "prediction": ["WeTab was announced by Neofonie.", "Neofonie AnnouncedWeTab(x)", "All x.(WeTab(x) -> AnnouncedByNeofonie(x))", "(Neofonie(WeTab) & AnnouncedBy(WeTab))", "WeTab(x) -> AnnouncedByNeofonie(x))", "(AnnouncedByNeofonie(WeTab))", "-Neofonie AnnouncedWeTab(x))", "(Neofonie(WeTab) & AnnouncedBy(WeTab))", "WeTab was announced by Neofonie.", "(AnnouncedByNeofonie(WeTab))", "WeTab(x) -> AnnouncedByNeofonie(x))", "Neofonie AnnouncedWeTab(x)", "-Neofonie(WeTab)", "WeTab was announced by Neofonie.", "Neofonie announcing WeTab.", "WeTab was announced by Neofonie."]}
{"id": "folio_train_2042", "nl": "Neofonie is a German producer.", "fol": "(IsGerman(Neofonie) & IsProducer(Neofonie))", "prediction": ["Neofonie is a GermanProducer.", "all x.(Neofonie(x) -> GermanProducer(x))", "(GermanProducer(Neofonie)", "Neofonie is GermanProducer.", "(GermanProducer(Neofonie)", "Neofonie is a GermanProducer.", "(GermanProducer(Neofonie)", "Neofonie (GermanProducer)", "Neofonie ist ein GermanProducer.", "Neofonie is GermanProducer.", "(GermanProducer(Neofonie)", "(GermanProducer(nofonie)", "Neofonie (GermanProducer)", "Neofonie is a GermanProducer.", "Neofonie ist ein GermanProducer.", "Neofonie (GermanProducer)"]}
{"id": "folio_train_2043", "nl": "Germans speak English or German.", "fol": "all x.(IsGerman(x) -> (CanSpeakEnglish(x) | CanSpeakGerman(x)))", "prediction": ["all x.(German(x) -> (SpeakEnglish(x) | SpeakDeutsch(x)))", "all x.(German(x) -> (SpeakEnglish(x) | SpeakDeutsch(x)))", "all x.(Deutscher(x) -> (SpeakEnglish(x) | SpeakDeutsch(x)))", "all x y.((German(x) & (English(y) | German(y))) -> Speaks(x,y))", "(SpeakEnglish(German) | SpeakDeutsch(German)))", "(all x.(German(x) -> (SpeaksEnglisch(x) | SpeaksDeutsch(x))))", "all x.(Deutsch(x) -> (SpeaksEnglish(x) | SpeaksDeutsch(x)))", "all x.(German(x) -> (SpeaksEnglisch(x) | SpeaksDeutsch(x)))", "all x.(Deutscher(x) -> (SpeakEnglish(x) | SpeakDeutsch(x)))", "all x y.((German(x) & (English(y) | German(y))) -> Speak(x,y))", "all x y.((Deutsche(x) & (English(y) | German(y))) -> Speaks(x,y))", "(SpeakEnglish(German) | SpeakDeutsch(German)))", "all x.(German(x) -> (SpeakEnglish(x) | SpeakGerman(x)))", "(all x.(German(x) -> (SpeaksEnglisch(x) | SpeaksDeutsch(x))))", "all x.(Deutsche(x) -> (SpeakEnglish(x) | SpeakDeutsch(x)))", "all x.(German(x) -> (SpeakEnglish(x) | SpeakDeutsch(x)))"]}
{"id": "folio_train_2044", "nl": "There is a tablet computer that was announced by a German.", "fol": "exists x.(IsTabletComputer(x) & exists y.(IsGerman(y) & WasAnnouncedBy(y,x)))", "prediction": ["exists x.(TabletComputer(x) & AnnouncedByGerman(x))", "exists x y.((TabletComputer(x) & German(y)) -> AnnouncedBy(x,y))", "exists x.(TabletComputer(x) & AnnouncedByGerman(x))", "exists x.(TabletComputer(x) & AnnouncedByGerman(x))", "exists x y.((TabletComputer(x) & German(y) & AnnouncedBy(x,y)))", "exists x y.(TabletComputer(x) & German(y) & AnnouncedBy(x,y))", "all x y z.((TabletComputer(x) & German(y) & AnnouncedBy(x,y)) -> Computer(x))", "exists x.(TabletComputer(x) & AnnouncedBy(x,German))", "exists x.(TabletComputer(x) & AnnouncedByGerman(x))", "exists x y.((TabletComputer(x) & German(y)) -> AnnouncedBy(x,y))", "exists x.(TabletComputer(x) & AnnouncedByGerman(x))", "all x y.((TabletComputer(x) & German(y)) -> AnnouncedBy(x,y))", "exists x.(TabletComputer(x) & AnnouncedBy(x,German))", "exists x.(TabletComputer(x) & AnnouncedByGerman(x))", "exists x.(TabletComputer(x) & AnnouncedBy(x,German))", "exists x.(TabletComputer(x) & AnnouncedByGerman(x))"]}
{"id": "folio_train_2045", "nl": "Neofonie doesn't speak English or German.", "fol": "(-CanSpeakEnglish(Neofonie) & -CanSpeakGerman(Neofonie))", "prediction": ["(-SpeaksEnglish(Neofonie) & -SpeaksDeutsch(Neofonie))", "Neofonie -(SpeaksEnglish(nofonie) | SpeaksDeutsch(nofonie)))", "(-SpeaksEnglish(Neofonie) & -SpeaksDeutsch(Neofonie))", "-(Neofonie(n) & (SpeakEnglish(n) | SpeakGerman(n))))", "Neofonie -SpeaksEnglish(nodefonie) & -SpeaksDeutsch(nodefonie))", "-(Neofonie(n) & (SpeakEnglish(n) | SpeakGerman(n))))", "(-SpeakEnglish(Neofonie) | SpeakGerman(Neofonie))", "(Neofonie(n) & -SpeaksEnglish(n) & -SpeaksDeutsch(n)))", "(-SpeaksEnglish(Neofonie) | SpeaksDeutsch(Neofonie)))", "-(SpeaksEnglish(Neofonie) | SpeaksDeutsch(Neofonie))", "(Neofonie(n) & -SpeaksEnglish(n) & -SpeaksDeutsch(n))", "Neofonie -(SpeaksEnglish(nofonie) | SpeaksGerman(nofonie)))", "Neofonie (no English or German spoken)", "-(Neofonie(n) & (SpeaksEnglish(n) | SpeaksGerman(n))))", "-(Neofonie(n) & (SpeakEnglish(n) | SpeakGerman(n))))", "Neofonie (no English(n) | German(n)))"]}
{"id": "folio_train_2046", "nl": "Some employees working in business analysis are good at math. ", "fol": "exists x.(WorksInBusinessAnalysis(x) & IsGoodAtMath(x))", "prediction": ["exists x.(Employee(x) & WorksInBusinessAnalysis(x) & GoodAtMath(x))", "exists x y.(Employee(x) & WorkedInBusinessAnalysis(x) & GoodAtMath(y))", "exists x.(Employee(x) & WorksInBusinessAnalysis(x) & GoodAtMath(x))", "exists x.(Employee(x) & WorksInBusinessAnalysis(x) & GoodAtMath(x))", "exists x.(Employee(x) & WorkedInBusinessAnalysis(x) & GoodAtMath(x))", "all x y.((Employee(x) & BusinessAnalysis(y)) -> GoodAtMath(x,y))", "exists x y.(Employee(x) & WorkedInBusinessAnalysis(x) & GoodAtMath(x))", "exists x.(Employee(x) & WorksInBusinessAnalysis(x) & GoodAtMath(x))", "all x y.((Employee(x) & WorkInBusinessAnalysis(x)) -> GoodAtMath(x,y))", "exists x.(Employee(x) & WorkingInBusinessAnalysis(x) & GoodAtMath(x))", "exists x.(Employee(x) & WorkedInBusinessAnalysis(x) & GoodAtMath(x))", "exists x.(Employee(x) & WorksInBusinessAnalysis(x) & GoodAtMath(x))", "exists x.(Employee(x) & WorkingInBusinessAnalysis(x))", "exists x.(Employee(x) & WorkedInBusinessAnalysis(x) & GoodAtMath(x))", "exists x.(Employee(x) & WorksInBusinessAnalysis(x) & GoodAtMath(x))", "exists x.(Employee(x) & WorkingInBusinessAnalysis(x))"]}
{"id": "folio_train_2047", "nl": "All employees working in business analysis are working in this company. ", "fol": "all x.(WorksInBusinessAnalysis(x) -> WorksInThisCompany(x))", "prediction": ["all x.(WorksInBusinessAnalysis(x) -> WorkingInCompany(x))", "all x.((Employee(x) & WorksInBusinessAnalysis(x)) -> WorksInCompany(x))", "all x y.((Employee(x) & BusinessAnalysis(y) & WorksIn(x,y)) -> WorkingIn(x,y))", "all x.(WorkingInBusinessAnalysis(x) -> WorkingInCompany(x))", "all x y.((Employee(x) & WorkInBusinessAnalysis(x)) -> WorkingInCompany(y))", "all x.((Employee(x) & WorksInBusinessAnalysis(x)) -> WorksInCompany(x))", "all x y.((Employee(x) & WorkingInBusinessAnalysis(x)) -> WorkingInCompany(y))", "all x.(WorksInBusinessAnalysis(x) -> WorksInCompany(x))", "(all x.(WorkingInBusinessAnalysis(x) -> WorkingInCompany(x))", "all x y.((Employee(x) & WorkingInBusinessAnalysis(x)) -> WorkingInCompany(y))", "all x.((Employee(x) & WorkingInBusinessAnalysis(x)) -> WorkingInCompany(x))", "all x y.((Employee(x) & BusinessAnalysis(y) & WorksIn(x,y)) -> WorksIn(x,y))", "all x.(WorkingInBusinessAnalysis(x) -> WorkingInCompany(x))", "all x.(WorksInBusinessAnalysis(x) -> WorkingInCompany(x))", "all x.((Employee(x) & WorksInBusinessAnalysis(x)) -> WorksInCompany(x))", "all x.(WorkingInBusinessAnalysis(x) -> WorkingInCompany(x))"]}
{"id": "folio_train_2048", "nl": "No employees working in this company are from China. ", "fol": "all x.(WorksInThisCompany(x) -> -IsFromChina(x))", "prediction": ["-exists x.(Employee(x) & WorkingInCompany(x) & -FromChina(x))", "all x.((Employee(x) & WorksInCompany(x)) -> -ChinaEmployee(x))", "all x.(WorkingInCompany(x) -> -ChinaEmployee(x))", "no employees working in this company are from China.", "-exists x.(Employee(x) & WorksInCompany(x) & China(x))", "(-(Employee(x) & WorksInCompany(x)) -> China(x))", "all x.((Employee(x) & WorkingInCompany(x)) -> -ChinaEmployee(x))", "all x.(Employee(x) -> -FromChina(x))", "(exists x.(Employee(x) & WorkingInCompany(x) & -FromChina(x)))", "(-exists x.(Employee(x) & WorksIn(x,y)) & -exists z.(Employee(z) & WorksIn(x,z))) & -exists w.(Employee(w) & WorksIn(x,w))))", "Currently, there are no employees working in this company.", "-exists x.(Employee(x) & WorkingInCompany(x) & -FromChina(x))", "all x y.((Employee(x) & Company(y) & WorksIn(x,y)) -> -ChinaEmployee(x))", "-exists x.(Employee(x) & WorksInCompany(x) & FromChina(x))", "-exists x.(Employee(x) & WorkedInCompany(x) & -FromChina(x))", "-exists x.(Employee(x) & WorkingInCompany(x) & China(x))"]}
{"id": "folio_train_2049", "nl": "All employees working in software engineering are from China. ", "fol": "all x.(WorksInSoftwareEngineering(x) -> IsFromChina(x))", "prediction": ["all x.(WorksInSoftwareEngineering(x) -> China(x))", "all x.((Employee(x) & WorksInSoftwareEngineering(x)) -> China(x))", "all x.(Employee(x) -> China(x))", "all x y.((Employee(x) & SoftwareEngineering(y) & WorksIn(x,y)) -> China(x))", "(all x.(WorkingInSoftwareEngineering(x) -> China(x)))", "all x.(Employee(x) -> (WorksInSoftwareEngineering(x) & FromChina(x)))", "all x.((Employee(x) & WorksInSoftwareEngineering(x)) -> China(x))", "all x.(WorkingInSoftwareEngineering(x) -> China(x))", "all x y.((Employee(x) & SoftwareEngineering(y) & WorksIn(x,y)) -> China(x))", "all x.(WorksInSoftwareEngineering(x) -> ChineseEmployee(x))", "all x.(Employee(x) -> WorksInSoftwareEngineering(x))", "all x.((Employee(x) & WorksInSoftwareEngineering(x)) -> China(x))", "all x.(Employee(x) & WorksInSoftwareEngineering(x) -> China(x))", "all x y.((Employee(x) & SoftwareEngineering(y) & WorkingIn(x,y)) -> FromChina(x))", "(all x.(Employee(x) & WorksInSoftwareEngineering(x)) -> FromChina(x))", "all x.(WorkingInSoftwareEngineering(x) -> FromChina(x))"]}
{"id": "folio_train_2050", "nl": "James is working in software engineering. ", "fol": "WorksInSoftwareEngineering(James)", "prediction": ["all x.(James(x) -> WorksInSoftwareEngineering(x))", "James is working in SoftwareEngineering(James)", "James works in SoftwareEngineering(James)", "-WorkingInSoftwareEngineering(James)", "(WorkingInSoftwareEngineering(James)", "all x.(James(x) -> WorksInSoftwareEngineering(x))", "(WorksInSoftwareEngineering(James) & -WorksInSoftwareEngineering(James))", "(WorkingInSoftwareEngineering(Jim) & James(Jim))", "James works in SoftwareEngineering.", "James is working in SoftwareEngineering.", "James works in SoftwareEngineering(James)", "all x.(James(x) -> WorkingInSoftwareEngineering(x))", "(WorksInSoftwareEngineering(Jim) & -WorksInSoftwareEngineering(Jim))", "all x.(James(x) -> WorksInSoftwareEngineering(x))", "James is working in SoftwareEngineering.", "(WorkingInSoftwareEngineering)"]}
{"id": "folio_train_2051", "nl": "James is good at math.", "fol": "IsGoodAtMath(James)", "prediction": ["all x.(James(x) -> GoodAtMath(x))", "all x.((James(x) & Math(x)) -> GoodAt(x,y))", "(GoodAtMath(James) -> GoodAtMath(James))", "James is goodAtMath(James)", "(GoodAtMath(Jimmy) & GoodAtMath(Jimmy))", "all x.(James(x) -> GoodAtMath(x))", "James is goodAtMath(James)", "all x.((James(x) & Math(x)) -> GoodAt(x,y))", "James is goodAtMathematics(James)", "(GoodAtMath(James)", "(GoodAtMathematics(James)", "(GoodAtMath(Jimmy,Math))", "all x.(James(x) -> GoodAtMath(x))", "James is goodAtMath(James)", "all x.((James(x) & Math(x)) -> GoodAt(x,y))", "-GoodAtMath(Jimmy)"]}
{"id": "folio_train_2052", "nl": "James is not good at math and he is working in business analysis.", "fol": "(-IsGoodAtMath(James) & WorksInBusinessAnalysis(James))", "prediction": ["(-GoodAtMath(James) & WorkingInBusinessAnalysis(James))", "all x.((James(x) & -GoodAtMath(x)) -> WorkingInBusinessAnalysis(x))", "(all x.((James(x) & Math(x)) -> -GoodAt(x,Math)) & all y.((James(y) & BusinessAnalysis(y))) -> WorkingIn(x,Y)))", "(-GoodAtMath(Jim) & WorkingInBusinessAnalysis(Jim))", "all x.(Jim(x) -> (-GoodAtMath(x) & WorkingInBusinessAnalysis(x)))", "((James) & -GoodAtMath(James)) & WorkedInBusinessAnalysis(James))", "(-GoodAtMath(James) & WorkingInBusinessAnalysis(James))", "(all x.((James(x) & Math(x)) -> -GoodAt(x,Mat)) & all y.((James(y) & BusinessAnalysis(y)) -> WorkingIn(x,Y)))", "all x.((James(x) & -GoodAtMath(x)) -> BusinessAnalysis(x))", "all x.(Jim(x) -> (-GoodAtMath(x) & WorkingInBusinessAnalysis(x)))", "-(GoodAtMath(James) & WorkingInBusinessAnalysis(James))", "(-GoodAtMath(Jim) & WorkingInBusinessAnalysis(Jim))", "all x.((James(x) & -GoodAtMath(x)) -> WorkingInBusinessAnalysis(x))", "(-GoodAtMath(James) & WorkingInBusinessAnalysis(James))", "-(GoodAtMath(Jim) & WorksInBusinessAnalysis(Jim))", "(-GoodAtMath(Jim) & WorkingInBusinessAnalysis(Jim))"]}
{"id": "folio_train_2053", "nl": "If James is not good at math and he is in business analysis, then he is neither working in this company nor working in software engineering.", "fol": "((-IsGoodAtMath(James) & WorksInBusinessAnalysis(James)) -> (-WorksInThisCompany(James) & -WorksInSoftwareEngineering(James)))", "prediction": ["all x.((James(x) & -GoodAtMath(x) & BusinessAnalysis(x)) -> (-WorkingInCompany(x) & -WorkingInSoftwareEngineering(x)))", "all x.(((James(x) & -GoodAtMath(x) & BusinessAnalysis(x)) -> (-WorkingInCompany(x) & -WorkingInSoftwareEngineering(x)))", "(-GoodAtMath(James) & BusinessAnalysis(James)) -> -(WorkingInCompany(James) | WorkingInSoftwareEngineering(James)))", "all x.((GoodAtMath(x) & BusinessAnalysis(x)) -> (-WorkingInCompany(x) & -WorkingInSoftwareEngineering(x)))", "all x.((James(x) & -GoodAtMath(x) & BusinessAnalysis(x)) -> -(WorkingInCompany(x) | WorkingInSoftwareEngineering(x)))", "all x y.((James(x) & -GoodAtMath(x) & BusinessAnalysis(x) & BusinessAnalysis(y)) -> (-WorkingInCompany(x) & -WorkingInSoftwareEngineering(x)))", "(-GoodAtMath(Jim) & BusinessAnalysis(Jim)) -> (-WorkingInCompany(Jim) & -WorkingInSoftwareEngineering(Jim)))", "(all x.((James(x) & GoodAtMath(x) & BusinessAnalysis(x)) -> (-WorkingInCompany(x) & -WorkingInSoftwareEngineering(x)))", "all x.(((James(x) & -GoodAtMath(x) & BusinessAnalysis(x)) -> (-WorkingInCompany(x) & -WorkingInSoftwareEngineering(x)))", "(all x.((James(x) & GoodAtMath(x) & BusinessAnalysis(x)) -> (-WorkingInCompany(x) | WorkingInSoftwareEngineering(x))))", "all x.((James(x) & -GoodAtMath(x) & BusinessAnalysis(x)) -> (-WorkingInCompany(x) & -WorkingInSoftwareEngineering(x)))", "all x.((GoodAtMath(x) & BusinessAnalysis(x)) -> (-WorkingInCompany(x) & -WorkingInSoftwareEngineering(x)))", "(-GoodAtMath(Jimmy) & BusinessAnalysis(Jimmy)) -> -(WorkingInCompany(Jimmy) | WorkingInSoftwareEngineering(Jimmy)))", "all x.((James(x) & -GoodAtMath(x) & BusinessAnalysis(x)) -> (-WorkingInCompany(x) & -WorkingInSoftwareEngineering(x)))", "all x.((GoodAtMath(x) & BusinessAnalysis(x)) -> (-WorkingInCompany(x) & -WorkingInSoftwareEngineering(x)))", "all x.((Company(x) & -GoodAtMath(x) & BusinessAnalysis(x)) -> -(WorkingInCompany(x) | WorkingInSoftwareEngineering(x)))"]}
{"id": "folio_train_2054", "nl": "The party provides five kinds of fruits: strawberry, orange, blueberry, grape, and cherry.", "fol": "(ProvidesFruit(Strawberry) | ProvidesFruit(Orange) | ProvidesFruit(Blueberry) | ProvidesFruit(Grape) | ProvidesFruit(Cherry))", "prediction": ["all x.(Party(x) -> (ProvidesFruits(x,Strawberry) & ProvidesFruits(x,Orange) & ProvidesFruits(x,Blueberry) & ProvidesFruits(x,Grape) & ProvidesFruits(x,Cherry)))", "all x y z.((Party(x) & Strawberry(y) & Orange(z) & Blueberry(z) & Grape(z) & Cherry(z)) -> ProvidesFruits(x,y,z))", "(Party(Party) & Strawberry(Party) & Orange(Party) & Blueberry(Party) & Grape(Party) & Cherry(Party))", "all x y.((Party(x) & Fruit(y)) -> ((Strawberry(x) | Orange(x) | Blueberry(x) | Grape(x) | Cherry(x))))", "all x.(Party(x) -> (PurposesFruits(x,Strawberry) & ProvidesFruits(x,Orange) & ProvidesFruits(x,Blueberry) & ProvidesFruits(x,Grape) & ProvidesFruits(x,Cherry)))", "all x y z.((Party(x) & Fruit(y) & Fruit(z)) -> (Strawberry(x) | Orange(x) | Blueberry(x) | Grape(x) | Cherry(x)))", "(Party(Party) & ProvidesFruits(Party,Fruit) & (Strawberry(Party) | Orange(Party) | Blueberry(Party) | Grape(Party) | Cherry(Party)))", "all x.(Party(x) -> (ProvidesFruits(x,Strawberry) & ProvidesFruits(x,Orange) & ProvidesFruits(x,Blueberry) & ProvidesFruits(x,Grape) & ProvidesFruits(x,Cherry)))", "All x y.((Party(x) & Strawberry(y) & Orange(y) & Blueberry(y) & Grape(y) & Cherry(y)) -> ProvidesFruits(x,y))", "(PartyProvidesFruits(Party,Fruit) & (Strawberry(Party) | Orange(Party) | Blueberry(Party) | Grape(Party) | Cherry(Party)))", "all x.(Party(x) -> (ProvidesFruits(x,Strawberry,Orange,Blueberry,Grape,Cherry)))", "(Party(Party) & Strawberry(Party) & Orange(Party) & Blueberry(Party) & Grape(Party) & Cherry(Party))", "all x y z.((Party(x) & Strawberry(y) & Orange(z) & Blueberry(y) & Grape(z) & Cherry(z)) -> ProvidesFruits(x,y,z))", "all x.(Party(x) -> (ProvidesFruits(x) & (Strawberry(x) | Orange(x) | Blueberry(x) | Grape(x) | Cherry(x))))", "all x.(Party(x) -> (PurchaseFruit(x,y) & (Strawberry(y) | Orange(y) | Blueberry(y) | Grape(y) | Cherry(y))))", "All x y z.((Party(x) & Fruit(y) & Fruit(z)) -> (Strawberry(y) | Orange(y) | Blueberry(y) | Grape(y) | Cherry(y)))"]}
{"id": "folio_train_2055", "nl": "All fruits are provided in the same weight at the beginning of the party.", "fol": "all x.(ProvidesFruit(x) -> AllFruitsSameWeight(x))", "prediction": ["all x.(Fruit(x) -> SameWeightAtParty(x))", "all x y.((Fruit(x) & Party(y)) -> SameWeightAtEndOfParty(x,y))", "(AllFruitsAtParty(fruit) -> SameWeightAtParty(fruit))", "all x.(Fruit(x) -> SameWeightAtParty(x))", "all x.((Fruit(x) & SameWeightAtParty(x)) -> ProvidedInParty(x))", "all x y.((Fruit(x) & Party(y)) -> SameWeightAtEntry(x,y))", "(AllFruitsAtParty(Fruit(Fruit) -> SameWeightAtParty(Fruit,Party))", "all x.(Fruit(x) -> ProvidedInSameWeightAtParty(x))", "all x y.((Fruit(x) & Party(y)) -> ProvidedInSameWeightAtEndOfParty(x,y))", "all x.(Fruit(x) -> SameWeightAtParty(x))", "all x.((Fruit(x) & SameWeightAtParty(x)) -> ProvidedInParty(x))", "all x y.((Fruit(x) & Party(y) & SameWeightAtEnd(x,y)) -> ProvidedIn(x,y))", "all x y.((Fruit(x) & Party(y)) -> SameWeightAtBegin(x,y))", "all x.(Fruit(x) -> ProvidedInSameWeightAtParty(x))", "all x.(Fruit(x) -> SameWeightAtParty(x))", "All x.(Fruit(x) -> SameWeightAtBeginOfParty(x))"]}
{"id": "folio_train_2056", "nl": "If the fruit had the lowest remaining weight at the end of the party, then it means it was the most popular fruit.", "fol": "all x.(HasLowestRemainingWeight(x) -> IsMostPopularFruit(x))", "prediction": ["all x.((Fruit(x) & LowestRemainingWeightAtEndOfParty(x)) -> MostPopularFruit(x))", "all x.((Fruit(x) & LowestRemainingWeight(x)) -> MostPopularFruit(x))", "(LowerRemainingWeightAtEndOfParty(Fruit) -> MostPopularFruit(Fruit))", "all x y.((Fruit(x) & LowestRemainingWeight(x,y) & EndOfParty(x)) -> MostPopularFruit(x))", "all x y.((Fruit(x) & Fruit(y) & LowestRemainingWeightAtEndOfParty(x,y)) -> MostPopularFruit(x))", "all x.((Fruit(x) & LowestRemainingWeightAtEndOfParty(x)) -> MostPopularFruit(x))", "all x.(LowerRemainingWeightAtEndOfParty(x) -> MostPopularFruit(x))", "all x.((Fruit(x) & LowestRemainingWeight(x) & EndOfParty(x)) -> MostPopularFruit(x))", "(LowerRemainingWeightAtEndOfParty(fruit) -> MostPopularFruit(f))", "all x y.((Fruit(x) & LowestRemainingWeightAtEndOfParty(x) & MostPopularFruit(y)) -> MostPopularFruit(x))", "all x y.((Fruit(x) & Party(y) & LowestRemainingWeightAtEnd(x,y)) -> MostPopularFruit(x))", "all x.((Fruit(x) & LowestWeightAtEndOfParty(x)) -> MostPopularFruit(x))", "all x.((Fruit(x) & LowestRemainingWeightAtEndOfParty(x)) -> MostPopularFruit(x))", "all x.((Fruit(x) & LowerRemainingWeightAtEndOfParty(x)) -> MostPopularFruit(x))", "all x.((Fruit(x) & LowestRemainingWeight(x)) -> MostPopularFruit(x))", "all x.((Fruit(x) & LowestRemainingWeightAtEndOfParty(x)) -> MostPopularFruit(x))"]}
{"id": "folio_train_2057", "nl": "At the end of the party, strawberries had the lowest remaining weight.", "fol": "HasLowestRemainingWeight(Strawberries)", "prediction": ["all x.((Strawberry(x) & PartyEnd(x)) -> LowestRemainingWeight(x))", "all x.((Shake(x) & PartyEnd(x)) -> LowestRemainingWeight(x))", "at the end of the party, strawberries had the lowest remainingweight.", "all x y.((Party(x) & Strawberry(y)) -> LowestRemainingWeight(y,x))", "all x.((Strawberry(x) & PartyEnd(x)) -> LowestRemainingWeight(x))", "-LowerWeightAtEndOfParty(Strawberries,Party)", "(LowerWeightAtEndOfParty(Strawberries))", "all x y.((Shake(x) & Party(y) & EndOfParty(x,y)) -> LowestRemainingWeight(x,y))", "all x y.((Pace(x) & Strawberry(y) & PartyEnd(x)) -> LowestRemainingWeight(y))", "all x.((Scrape(x) & PartyEnd(x)) -> LowestRemainingWeight(x))", "(LowerWeightAtEndOfParty(Strawberries))", "all x.(Strawberry(x) -> LowestRemainingWeight(x))", "all x y.((Party(x) & Strawberry(y)) -> LowestRemainingWeight(y,x))", "all x.((Strawberry(x) & PartyEnd(x)) -> LowestRemainingWeight(x))", "the lowest remainingweight.", "all x.((Strawberries(x) & PartyEnd(x)) -> LowestRemainingWeight(x))"]}
{"id": "folio_train_2058", "nl": "At the end of the party, the amount of leftover blueberries was lower than that of cherries.", "fol": "AmountLowerThan(Blueberry,Cherry)", "prediction": ["all x y.((Party(x) & Party(y)) -> (LessBlueberries(x,y) & LowerCr\u00e8mes(x,y)))", "all x.((Party(x) & LeftoverBlueberries(x)) -> LowerAmountThanCherries(x))", "all x y.((Party(x) & LeftoverBlueberries(y)) -> LowerAmountThanCherries(y))", "-(LowerAmountOfBlueberries(EndOfParty(EndOfParty) & LowerAmountOfCherries(EndOfParty))", "all x y z.((Party(x) & Blueberry(y) & Cherry(z)) -> (LowerAmount(y,z) & LeftoverAmount(y,z)))", "(EndOfParty(blueberries) & LessThanCherries(blueberries))", "all x y.((Party(x) & Party(y)) -> (LowerBlueberryAmount(x,y) & LowerCherriesAmount(x,y)))", "the amount of leftoversblueberries(EndOfParty) was lowerThanCrispies(EndOfParty))", "(LowerAmountOfBlueberriesThanCherries(endOfParty))", "-(EndOfParty(blueberries) & LeftoverBlueberries(cherries))", "all x y.((Party(x) & Blueberry(y)) -> (LowerAmount(x,y) & LessAmount(x,y)))", "all x.((Party(x) & LeftoverBlueberries(x)) -> LowerAmountThanCrispies(x))", "(EndOfParty(blueberries) & LessThanCrispies(blueberries))", "all x.((RemainingBlueberry(x) & Cherry(x)) -> LowerAmount(x,y))", "all x.((Blueberry(x) & Cherry(x)) -> Leftovers(x,y))", "all x y.((Party(x) & LeftoverBlueberries(x,y)) -> LowerAmountThanCherries(x,y))"]}
{"id": "folio_train_2059", "nl": "Benjamin only ate oranges and grapes at the party.", "fol": "(EatsFruit(Orange,Benjamin) & EatsFruit(Grape,Benjamin) & -EatsFruit(Blueberry,Benjamin) & -EatsFruit(Cherry,Benjamin) & -EatsFruit(Strawberry,Benjamin))", "prediction": ["all x.((Benjamin(x) & Party(x)) -> (At(x,Oranges) | At(x,Grapes))))", "all x y.((Benjamin(x) & Party(y)) -> (Eats(x,y) & (Oranges(y) | Grapes(y))))", "(AtParty(Benjamin) -> (EatsOranges(Benjamin) | EatsGrapes(Benjamin)))", "(EatsOranges(Benjamin) | EatsGrapes(Benjamin))", "all x.((Benjamin(x) & Party(y)) -> (EatsOranges(x,y) | EatsGrapes(x,y)))", "all x.(Benjamin(x) -> (EatsOranges(x) & EatsGrapes(x)))", "-(Benjamin(b) & Party(b)) -> (EatsOranges(b) & EatsGrapes(b)))", "Benjamin ate only oranges and grapes at the party.", "((Benjamin(Benjamin) | Grapes(Benjamin)))", "all x y.((Benjamin(x) & Party(y)) -> (At(x,y) & (At(x,y) & Oranges(y) | Grapes(y))))", "(AtParty(Benjamin) -> (ateOranges(Benjamin) & ateGrapes(Benjamin)))", "all x.(Benjamin(x) -> (AtParty(x,y) & (AtParty(y,x) | AtParty(y,x))))", "(EatsOranges(Benjamin) & EatsGrapes(Benjamin))", "Benjamin only ate Oranges and Grapes at the Party.", "all x y.((Benjamin(x) & Party(y)) -> (EatsOranges(x,y) & EatsGrapes(x,y)))", "Benjamin only ate Oranges and Grapes at the party."]}
{"id": "folio_train_2060", "nl": "Blueberries were the most popular fruit at the party.", "fol": "IsMostPopularFruit(Blueberry)", "prediction": ["all x.(Blueberry(x) -> MostPopularFruitAtParty(x))", "all x y.((Blueberry(x) & Party(y)) -> MostPopularFruit(x,y))", "all x.(Blueberry(x) -> PopularFruitAtParty(x))", "(PopularFruitAtParty(blueberries)", "(PopularFruitAtParty(Blueberry) & PopularFruitAtParty(Blueberry))", "-(Blueberry(x) & PopularFruit(x))", "the mostpopularfruitAtParty(blueberries)", "all x y.((Blueberry(x) & Party(y)) -> MostPopularFruit(x,y))", "all x.(Blueberry(x) -> MostPopularFruitAtParty(x))", "all x y.((Blueberry(x) & Party(y)) -> PopularFruit(x,y))", "-(Blueberry(x) & PopularFruit(x) & Party(x))", "the mostpopularfruitAtParty(blueberry,party)", "all x.(Blueberry(x) -> PopularFruitAtParty(x))", "(PopularFruitAtParty(blueberry)", "all x.(Blueberry(x) -> MostPopularFruitAtParty(x))", "all x y.((Blueberry(x) & Party(y)) -> MostPopularFruit(x,y))"]}
{"id": "folio_train_2061", "nl": "Cherries were the most popular fruit at the party.", "fol": "IsMostPopularFruit(Cherry)", "prediction": ["all x.(Cherry(x) -> MostPopularFruitAtParty(x))", "all x y.((Cherry(x) & Party(y)) -> MostPopularFruit(x,y))", "all x.(Cerry(x) -> MostPopularFruitAtParty(x))", "all x.(Cherries(x) -> PopularFruitAtParty(x))", "all x y.((Cerry(x) & Party(y)) -> MostPopularFruit(x,y))", "all x y z.((Cherry(x) & Party(y) & Fruit(z)) -> MostPopular(x,z))", "-(Cerry(c) & PopularFruit(c) & Party(c))", "all x.((Cerry(x) & Party(x)) -> MostPopularFruit(x))", "all x y.((Cherry(x) & Party(y)) -> PopularFruit(x,y))", "(PopularFruit(cherries,Party))", "the mostpopularfruitAtParty(Cerries)", "(PopularFruitAtParty(cherries)", "all x.(Cerry(x) -> MostPopularFruitAtParty(x))", "all x.(Cherries(x) -> PopularFruitAtParty(x))", "all x y.((Cerry(x) & Party(y)) -> MostPopularFruit(x,y))", "(PopularFruit(cherries)"]}
{"id": "folio_train_2062", "nl": "Benjamin ate blueberries at the party.", "fol": "EatsFruit(Blueberry,Benjamin)", "prediction": ["(AtParty(Benjamin) & EatsBlueberries(Benjamin))", "all x y.((Benjamin(x) & Blueberry(y)) -> EatsAtParty(x,y))", "Benjamin ate blueberries at the party.", "all x.(Benjamin(x) -> EatsBlueberriesAtParty(x))", "-(BenjaminAtParty(Benjamin) & EatsBlueberries(Benjamin))", "-(Benjamin(Benjamin) & Party(Benjamin))", "(AtParty(Benjamin,Blueberries))", "Benjamin ate blueberries at the party.", "all x y.((Benjamin(x) & Party(y)) -> EatsBlueberries(x,y))", "(AtParty(Benjamin,Blueberry) & AtParty(Benjamin,Blueberry))", "(AtParty(Benjamin) & EatsBlueberries(Benjamin))", "all x.(Benjamin(x) -> EatsBlueberriesAtParty(x))", "Benjamin ate blueberries at the party.", "Benjamin ateBlueberry(b) at the party.", "(AtParty(Benjamin) & EatsBlueberries(Benjamin))", "Benjamin ate blueberries at the party."]}
{"id": "folio_train_2063", "nl": "All students who attend in person have registered for the conference. ", "fol": "all x.(AttendConference(x) -> RegisteredForConference(x))", "prediction": ["all x.((Student(x) & AttendsInPerson(x)) -> RegisteredForConference(x))", "all x y.((Student(x) & AttendsInPerson(x)) -> RegisteredForConference(y))", "all x.((Student(x) & AttendsInPerson(x)) -> RegisteredForConference(x))", "(all x.(AttendsInPerson(x) -> RegisteredForConference(x)))", "all x.(AttendsInPerson(x) -> RegisteredForConference(x))", "all x y.((Student(x) & AttendsInPerson(x)) -> RegisteredForConference(x,y))", "all x.((Student(x) & AttendsInPerson(x)) -> RegisteredForConference(x))", "all x y.((Student(x) & AttendsInPerson(x) & AttendsInPerson(x)) -> RegisteredForConference(y))", "all x.(AttendsInPerson(x) -> RegisteredForConference(x))", "all x.((Student(x) & AttendsInPerson(x)) -> RegisteredForConference(x))", "all x.(AttendInPerson(x) -> RegisteredForConference(x))", "all x y.((Student(x) & AttendsInPerson(x)) -> RegisteredForConference(y))", "all x.((Student(x) & AttendsInPerson(x)) -> RegisteredForConference(x))", "all x.((Student(x) & AttendsInPersonal(x)) -> RegisteredForConference(x))", "all x.((Student(x) & AttendsInPerson(x)) -> RegisteredForConference(x))", "all x.((Student(x) & AttendsInPerson(x)) -> RegisteredForConference(x))"]}
{"id": "folio_train_2064", "nl": "Students either attend the conference in person or remotely. ", "fol": "all x.(((AttendConference(x) -> AttendInPerson(x)) & -AttendRemotely(x)) | (-(AttendConference(x) -> AttendInPerson(x)) & AttendRemotely(x)))", "prediction": ["all x.(Student(x) -> (AttendsConferenceInPerson(x) | AttendsConferenceRemotely(x)))", "all x y.((Student(x) & Conference(y)) -> (AttendsInPerson(x,y) | AttendsRemotely(x,y)))", "all x.(Student(x) -> (AttendsInPerson(x) | AttendsRemotely(x)))", "all x y z.((Student(x) & Conference(y) & Person(z)) | RemoteAttendance(x,y,z)) -> AttendsIn(x,y,z))", "(AttendsInPerson(Student,Camera) | AttendsRemotely(Student,Camera))", "all x y.((Student(x) & Conference(y)) -> (AttendsInPerson(x,y) | AttendsRemotely(x,y)))", "(AttendsConferenceInPerson(Student) | AttendsConferenceRemotely(Student))", "all x.(Student(x) -> (AttendsConferenceInPerson(x) | AttendsConferenceRemotely(x)))", "all x y.((Student(x) & Conference(y)) -> (AttendsInPerson(x,y) | AttendsRemotely(x,y)))", "all x y z.((Student(x) & Conference(y) & Person(z)) | RemoteAttendance(x,y,z)) -> Attends(x,y))", "all x.(Student(x) -> (AttendsInPerson(x) | AttendsRemotely(x)))", "all x y.((Student(x) & Conference(y)) -> (AttendInPerson(x,y) | AttendRemotely(x,y)))", "exists x.(Student(x) & AttendsConferenceInPerson(x) & AttendsConferenceRemotely(x))", "all x.(Student(x) -> (AttendsConferenceInPerson(x) | AttendsConferenceRemotely(x)))", "all x y.((Student(x) & Conference(y)) -> (AttendsInPerson(x,y) | AttendsRemotely(x,y)))", "exists x.(Student(x) & (AttendsInPerson(x) | AttendsRemotely(x)))"]}
{"id": "folio_train_2065", "nl": "No students from China attend the conference remotely. ", "fol": "all x.((AttendConference(x) & IsFromChina(x)) -> -AttendRemotely(x))", "prediction": ["-exists x.(Student(x) & China(x) & AttendsConferenceRemotely(x))", "all x.((Student(x) & China(x)) -> -AttendsConferenceRemotely(x))", "-(ChinaStudent(x) & AttendsConferenceRemotely(x))", "-(Student(x) & China(x))", "(-all x.(Student(x) -> ChinaAttendsConferenceRemotely(x)))", "-exists x.(Student(x) & China(x) & AttendsConferenceRemotely(x))", "all x.((Student(x) & China(x)) -> -AttendsConferenceRemotely(x))", "(-all x.(ChinaStudent(x) -> AttendsConferenceRemotely(x)))", "-exists x.(Student(x) & FromChina(x) & AttendsConferenceRemotely(x))", "\u2013(China Student(x) & AttendsConferenceRemotely(x))", "-(Student(x) & -China(x))", "all x.((Student(x) & China(x)) -> -AttendsConferenceRemotely(x))", "all x.((Student(x) & China(x)) -> NoAttendsConferenceRemotely(x))", "(-all x.(ChinaStudent(x) -> AttendsConferenceRemotely(x)))", "-exists x.(Student(x) & China(x) & AttendsConferenceRemotely(x))", "all x.((Student(x) & Chinese(x)) -> -AttendsConferenceRemotely(x))"]}
{"id": "folio_train_2066", "nl": "James attends the conference but he does not attend the conference remotely.", "fol": "(AttendConference(James) & -AttendRemotely(James))", "prediction": ["all x y.((James(x) & Conference(y)) -> (Attends(x,y) & -AttendsRemotely(x,y)))", "(all x.(James(x) -> AttendsConference(x)) & -AttendsConference(x)))", "(all x y.((James(x) & Conference(y)) -> Attends(x,y)) & ((James(x) & Conference(y)) -> -AttendsRemotely(x,y))))", "(all x.(AttendsConference(x) -> Attends(x)) & -AttendsConference(x)))", "all x y.((AttendsConference(x) & Conference(y)) -> -AttendsRemotely(x,y))", "(AttendsConference(James) & -AttendsConferenceRemotely(James))", "(all x y.((AttendsConference(x) & Conference(y)) -> Attends(x,y)) & ((AttendsConference(x) & Conference(y)) -> -AttendsRemotely(x,y))))", "((AttendsConference(James) & -AttendsConference(James)) | AttendsConference(James)))", "-(AttendsConference(James) & AttendsConference(James))", "all x.(AttendsConference(x) & -AttendsConferenceRemotely(x))", "all x.((AttendsConference(x) & -AttendsConference(x)) -> (-AttendsConference(x)))", "(all x.(James(x) -> AttendsConference(x)) & -AttendsConferenceRemotely(x)))", "(all x.(JamesAttendsConference(x) -> Attends(x)) & -AttendsConferenceRemotely(x)))", "exists x.(James(x) & AttendsConference(x) & -AttendsConference(x))", "(AttendsConference(James) & -AttendsConference(James))", "all x y.((James(x) & Conference(y)) -> (Attends(x,y) & -AttendsRemotely(x,y)))"]}
{"id": "folio_train_2067", "nl": "Jack attends the conference and he is a student from China.", "fol": "(IsFromChina(Jack) & AttendConference(Jack))", "prediction": ["(AttendsConference(Jack) & StudentFromChina(Jack))", "all x.((Jack(x) & AttendsConference(x) & StudentFromChina(x)) -> AttendsConference(x))", "all x.(Jack(x) -> (AttendsConference(x) & StudentFromChina(x)))", "all x y.((Jack(x) & Conference(y)) -> (Attends(x,y) & StudentFromChina(x)))", "((AttendsConference(Jack) & AttendsConference(Jack)) & StudentFromChina(Jack))", "(AttendsConference(Jack) & StudentFromChina(Jack))", "(all x.(JackAttendsConference(x) -> Attends(x)) & StudentFromChina(x))", "(AttendsConference(Jack) & Student(Jack) & FromChina(Jack))", "all x y.((Jack(x) & Conference(y)) -> (Attends(x,y) & Student(x,y)))", "all x.((Jack(x) & AttendsConference(x) & StudentFromChina(x)) -> AttendsConference(x))", "all x.(Jack(x) -> (AttendsConference(x) & StudentFromChina(x)))", "all x y.((Jack(x) & Conference(y)) -> (Attends(x,y) & StudentFromChina(x)))", "(AttendsConference(Jack) & StudentFromChina(Jack))", "(AttendsConference(Jack) & Student(Jack) & FromChina(Jack))", "(AttendsConference(Jack) & StudentFromChina(Jack))", "(AttendsConference(Jack) & StudentInChina(Jack))"]}
{"id": "folio_train_2068", "nl": "James attends the conference but not in person.", "fol": "(AttendConference(James) & -AttendInPerson(James))", "prediction": ["all x.(James(x) -> (AttendsConference(x) & -InPerson(x)))", "(AttendsConference(James) & -InPerson(James))", "all x y.((James(x) & Conference(y)) -> (Attends(x,y) & -InPerson(x)))", "all x.((James(x) & AttendsConference(x)) -> -AttendsInPerson(x))", "-(AttendsConference(James) & -AttendsInPerson(James))", "((JamesAttendsConference(James) & -AttendsInPerson(James)) -> -AttendsInPerson(James))", "(all x.(James(x) -> AttendsConference(x)) & -(James(x) -> AttendsConference(x))))", "(AttendsConference(James,James) & -InPerson(James))", "all x.(James(x) -> (AttendsConference(x) & -AttendsInPerson(x)))", "James attendsConference(James) & -InPerson(James))", "-(JamesAttendsConference(James) & AttendsConference(James))", "all x.(JamesAttendsConference(x) & -AttendsInPerson(x))", "(AttendsConference(James) & -AttendsInPerson(James))", "all x y.((James(x) & Conference(y)) -> (Attends(x,y) & -AttendsInPerson(x,y)))", "exists x.(James(x) & AttendsConference(x) & -AttendsInPerson(x))", "(AttendsConference(James,Chair) & -InPerson(James))"]}
{"id": "folio_train_2069", "nl": "Jack attends the conference in person.", "fol": "(AttendConference(Jack) & AttendInPerson(Jack))", "prediction": ["all x.(Jack(x) -> AttendsConferenceInPerson(x))", "all x y.((Jack(x) & Conference(y)) -> AttendsInPerson(x,y))", "(AttendsConferenceInPerson(Jack))", "all x.((Jack(x) & AttendsConferenceInPerson(x)) -> AttendsConferenceInPerson(x))", "-AttendsConferenceInPerson(Jack)", "Jack attends the conference in person.", "Jack attendsConferenceInPerson(Jack)", "(AttendsConferenceInPerson(Jack))", "all x y.((Jack(x) & Conference(y)) -> AttendsInPerson(x,y))", "-AttendsConferenceInPerson(Jack)", "all x.(Jack(x) -> AttendsConferenceInPerson(x))", "(AttendsInPerson(Jack))", "(AttendsConferenceInPerson(Jack))", "all x y.((Jack(x) & Conference(y)) -> AttendsInPerson(x,y))", "All x.(Jack(x) -> AttendsConferenceInPerson(x))", "(AttendsConferenceInPerson(Jack)"]}
{"id": "folio_train_2070", "nl": "Jack has registered for the conference.", "fol": "RegisteredForConference(Jack)", "prediction": ["all x.(Jack(x) -> RegisteredForConference(x))", "(Registers(Jack,Conference) & -Registers(Jack,Conference))", "Jack has registered for the conference.", "(Jack has RegisteredForConference(Jack))", "-Jack has registered for the conference.", "(RegistersForConference(Jack))", "all x.(Jack(x) -> RegisteredForConference(x))", "all x y.((Jack(x) & Conference(y)) -> RegisteredFor(x,y))", "(RegistratedForConference(Jack))", "Jack has registered for the conference.", "-Registers(Jack,Conference)", "-Jack has registered for the conference.", "all x.(Jack(x) -> RegisteredForConference(x))", "Jack has registered for the conference.", "(registeredForConference(Jack))", "All x.(Jack(x) -> RegisteredForConference(x))"]}
{"id": "folio_train_2071", "nl": "David Ha'ivri is a political strategist. ", "fol": "IsPoliticalStrategist(Davidhaivri)", "prediction": ["David Ha'ivri is a political strategist.", "(PoliticalStrategist(DavidHaivri)", "all x.((DavidHaivri(x) & PoliticalStrategist(x)) -> -(HasIvri(x) & HasIvri(x)))", "all x.((DavidHa'ivri(x) & PoliticalStrategist(x)) -> -(HasIvri(x) & HasIvri(x)))", "all x.((DavidHaivri(x) & PoliticalStrategist(x)) -> PoliticalStrategist(x))", "(PoliticalStrategist(DavidHa'ivri)", "David Ha'ivri is a political strategist.", "all x.((HasIvri(x) & PoliticalStrategist(x)) -> David(x))", "(PoliticalStrategist(DavidHa'ivri)", "David Ha'ivri is a PoliticalStrategist(d)", "David Ha'ivri is a political strategist.", "(PoliticsStrategist(DavidHa'ivri)", "all x.((DavidHaivri(x) & PoliticalStrategist(x)) -> -Strategy(x))", "David Ha'ivri (PoliticalStrategist)", "David Ha'ivri (PoliticalStrategist)", "David Ha'ivri is a political strategist."]}
{"id": "folio_train_2072", "nl": "If you are born in Israel to at least one Israeli parent, then you receive citizenship at birth. ", "fol": "all x.(exists y.(BornInIsrael(x) & HasParent(x,y) & IsIsraeliParent(y)) -> IsIsraeliCitizen(x))", "prediction": ["all x.((BirthInIsrael(x) & HasIsraeliParent(x)) -> ReceivesCitizenshipAtBirth(x))", "(BirthInIsraelToAtLeastOneIranianParent(x) -> ReceiveCitizenshipAtBirth(x))", "all x y.((BirthInIsrael(x) & IsraeliParent(y) & BornInIsrael(x,y)) -> ReceivesCitizenshipAtBirth(x))", "(BirthInIsraelTo(x,y) & IsraeliParent(y)) -> ReceivesCitizenshipAtBirth(x))", "all x.((BirthInIsrael(x) & HasIsraeliParent(x)) -> ReceivesCitizenshipAtBirth(x))", "all x.((BornInIsrael(x) & HasIsraeliParent(x)) -> ReceivesCitizenshipAtBirth(x))", "all x.(BirthInIsrael(x) -> ReceiveCitizenshipAtBirth(x))", "all x.((BirthInIsrael(x) & HasIsraeliParent(x)) -> ReceiveCitizenshipAtBirth(x))", "all x y.((BirthInIsrael(x) & HasIsraeliParent(x,y)) -> ReceivesCitizenshipAtBirth(x))", "all x y.((BirthInIsrael(x) & IsraeliParent(y) & BornInIsrael(x,y)) -> ReceivesCitizenshipAtBirth(x))", "all x.(BirthInIsraelToIsrael(x) -> ReceiveCitizenshipAtBirth(x))", "all x.((BirthInIsrael(x) & HasIranianParent(x)) -> ReceivesCitizenshipAtBirth(x))", "all x y.((BirthInIsrael(x,y) & HasIsraeliParent(x,y)) -> ReceivesCitizenshipAtBirth(x))", "all x y.((BirthInIsrael(x) & IsraeliParent(y) & BornIn(x,y)) -> ReceivesCitizenshipAtBirth(x))", "all x.((BirthInIsrael(x) & HasIsraeliParent(x)) -> ReceivesCitizenshipAtBirth(x))", "all x.((BornInIsrael(x) & HasIsraeliParent(x)) -> ReceivesCitizenshipAtBirth(x))"]}
{"id": "folio_train_2073", "nl": "David Ha'ivri emigrated to the United States from Israel, where he was born to Israeli parents. ", "fol": "exists x.(EmigratedToCountry(Davidhaivri,America) & BornInIsrael(Davidhaivri) & HasParent(Davidhaivri,x) & IsIsraeliParent(x))", "prediction": ["all x y.((DavidHaivri(x) & Israel(y)) -> EmigratedToUnitedStates(x,y))", "David Ha'ivri emigrated to the United States from Israel, where he was born to IsraeliParents.", "(EmigratedFromIsraelToUnitedStates(DavidHaivri) & BornToIsraeliParents(DavidHaivri))", "all x.((DavidHaivri(x) & EmigratedToUnitedStates(x)) -> BornToIsraeliParents(x))", "all x y z.((DavidHaivri(x) & UnitedStates(y) & Israel(z)) -> EmigratedFrom(x,y,z))", "(EmigratesFromIsraelToUnitedStates(DavidHaivri) & BornToIsraeliParents(DavidHaivri,Israel))", "(EmigratedFromIsraelToUSA(DavidHa'ivri) & BornToIsraeliParents(DavidHa'ivri))", "David Ha'ivri emigrated to UnitedStatesFromIsrael, where he was born to IsraeliParents.", "-(EmigratedFromIsraelToUnitedStates(DavidHaivri) & BornToIsraeliParents(DavidHaivri))", "(EmigratedFromIsraelToUnitedStates(DavidHa'ivri) & BornToIsraeliParents(DavidHa'ivri,Israel))", "all x y.((DavidHaivri(x) & Israel(y)) -> EmigratedTo(x,y))", "all x y.((Haivri(x) & Israel(y)) -> EmigratedToUnitedStates(x,y))", "all x.((DavidHaivri(x) & BornToIsraeliParents(x)) -> EmigratedToUnitedStates(x))", "all x.(Ha'ivri(x) -> (EmigratedFromIsrael(x) & BornToIranianParents(x)))", "(EmigratedFromIsraelToUSA(DavidHa'ivri) & BornToIsraeliParents(DavidHa'ivri))", "David Ha'ivri emigrated from Israel to the United States, where he was born to IsraeliParents."]}
{"id": "folio_train_2074", "nl": "Several Zionist leaders have been elected to the Shomron Regional Municipal council. ", "fol": "exists x.(IsZionistLeader(x) & ElectedToCouncil(x,ShomronMunicipalCouncil))", "prediction": ["exists x.(ZionistLeader(x) & ElectedToShomronRegionalMountain(x))", "(ElectedToShomronRegionalMountain(z) & SeveralZionistLeaders(z))", "all x y.((ZionistLeader(x) & ShomronRegionalMunicipalChair(y)) -> ElectedTo(x,y))", "Several Zionist LeadersElectredToShomronRegionalMountain(z)", "Several Zionist Leaders Have BeenElectedToShomronRegionalMountain(z)", "(ElectionsToShomronRegionalMountain(z) & SeveralZionistLeaders(z))", "exists x.(ZionistLeader(x) & ElectedToShomronRegionalMountain(x))", "Several Zionist Leaders EligibleToShomronRegionalMountain(z)", "(exists x.(ZionistLeader(x) & ElectedToShomronRegionalMountain(x)))", "several Zionist LeadersElectedToShomronRegionalMountain(z)", "(ElectedToShomronRegionalMountain(z) & SeveralZionistLeaders(z))", "Several Zionist LeadersElectedToShomronRegionalMountain(z)", "exists x.(ZionistLeader(x) & ElectedToShomronRegionalMountain(x))", "all x y.((ZionistLeader(x) & ShomronRegionalMunicipalChair(y)) -> ElectedTo(x,y))", "all x y.((ZionistLeader(x) & ShomronRegionalMountain(y)) -> ElectedTo(x,y))", "exists x.(ZionistLeader(x) & ElectedToShomronRegionalMountain(x))"]}
{"id": "folio_train_2075", "nl": "David Ha'ivri is a Zionist leader. ", "fol": "ZionstLeader(Davidhaivri)", "prediction": ["all x.(ZionistLeader(x) -> DavidHa'ivri(x))", "David Ha'ivri is Zionist Leader.", "(ZionistLeader(DavidHa'ivri)", "all x.(ZionistLeader(x) -> DavidHaivri(x))", "(Zionist(DavidHa'ivri) & Zionist(DavidHaivri))", "David Ha'ivri is Zionist leader.", "(ZionistLeader(DavidHaivri)", "(ZionistLeader(Z) & DavidHaivri(Z))", "all x.((ZionistLeader(x) & DavidHa'ivri(x)) -> Leads(x,y))", "David Ha'ivri is a Zionist leader.", "all x.(ZionistLeader(x) -> DavidHa'ivri(x))", "David Ha'ivri (ZionistLeader)", "all x.(ZionistLeader(x) -> DavidHaivri(x))", "David Ha'ivri is Zionist Leader(x)", "all x.(ZionistLeader(x) -> DavidHa'ivri(x))", "David Ha'ivri (ZionistLeader)"]}
{"id": "folio_train_2076", "nl": "David Ha'ivri is an Israeli citizen.", "fol": "IsIsraeliCitizen(Davidhaivri)", "prediction": ["David Ha'ivri is IsraeliCitizen(d)", "(IsraeliCitizen(DavidHa'ivri)", "all x.((DavidHa'ivri(x) & IsraeliCitizen(x)) -> Citizen(x))", "all x.(IsraeliCitizen(x) -> DavidHaivri(x))", "David Ha'ivri is an IsraeliCitizen(d)", "(IsraeliCitizen(DavidHaivri)", "all x.((DavidHa'ivri(x) & IsraeliCitizen(x)) -> -IsraeliCitizen(x))", "(IsraeliCitizen(d) & DavidHa'ivri(d))", "David Ha'ivri is IsraeliCitizen(x)", "IsraelCitizen(d) & DavidHaivri(d))", "David Ha'ivri (IsraeliCitizen)", "(IsraeliCitizen(DavidHa'ivri)", "David Ha'ivri is an IsraeliCitizen(x)", "David Ha'ivri (IsraeliCitizen)", "David Ha'ivri is IsraeliCitizen(d)", "David Ha\u2019ivri (IsraeliCitizen)"]}
{"id": "folio_train_2077", "nl": "David Ha'ivri is a United States citizen.", "fol": "UnitedStatesCitizen(Davidhaivri)", "prediction": ["all x.((DavidHaivri(x) & UnitedStatesCitizen(x)) -> Citizen(x))", "(UnitedStatesCitizen(DavidHaivri)", "David Ha'ivri is a United States Citizen(x)", "all x.((DavidHa'ivri(x) & UnitedStatesCitizen(x)) -> Citizen(x))", "all x.(HasIvri(x) -> UnitedStatesCitizen(x))", "David Ha'ivri is a United StatesCitizen(x)", "(UnitedStatesCitizen(DavidHa'ivri)", "David Ha'ivri (UnitedStatesCitizen(d))", "(Citizen(david) & UnitedStatesCitizen(d))", "all x.((DavidHaivri(x) & UnitedStatesCitizen(x)) -> -Citizen(x))", "all x.(HasIvri(x) -> UnitedStatesCitizen(x))", "David Ha'ivri is a United States Citizen(x)", "(UnitedStatesCitizen(DavidHaivri)", "David Ha'ivri is UnitedStatesCitizen(d)", "David Ha'ivri (UnitedStatesCitizen(d))", "David Ha'ivri is a United States citizen."]}
{"id": "folio_train_2078", "nl": "David Ha'ivri has been elected to the Shomron Regional Municipal council.", "fol": "ElectedToCouncil(Davidhaivri,ShomronMunicipalCouncil)", "prediction": ["David Ha'ivri has been elected to Shomron RegionalMunicipalChair(d))", "all x.((DavidHaivri(x) & ShomronRegionalMunicipalChair(x)) -> ElectedTo(x,y))", "(ElectedToShomronRegionalMountain(DavidHaivri)", "all x y.((DavidHaivri(x) & ShomronRegionalMunicipalChair(y)) -> ElectedTo(x,y))", "(Election(DavidHa'ivri) & ShomronRegionalMunicipalChair(DavidHa'ivri))", "all x.((DavidHa'ivri(x) & ShomronRegionalMunicipalChair(x)) -> ElectedTo(x,y))", "(ElectedToShomronRegionalMountain(DavidHaivri)", "(ElectedToShomronRegionalMunicipalChair(DavidHaivri))", "all x y.((DavidHa'ivri(x) & ShomronRegionalMunicipalChair(y)) -> ElectedTo(x,y))", "David Ha'ivri has been elected to Shomron RegionalMunicipal Council.", "David Ha'ivri has been elected to the Shomron RegionalMunicipalChair(David,RotaryMunicipal)", "David Ha'ivri was elected to Shomron RegionalMunicipalChair(d))", "(ElectedToShomronRegionalMountain(DavidHa'ivri)", "David Ha'ivri has been elected to Shomron RegionalMunicipalChair(David)", "David Ha'ivri has been elected to Shomron Regional Municipal Council.", "David Ha'ivri was elected to the Shomron Regional Municipal Council."]}
{"id": "folio_train_2079", "nl": "Mary has the flu.", "fol": "HasDisease(Mary,FluDisease)", "prediction": ["(HasFlu(Mary))", "all x.(Mary(x) -> HasFlu(x))", "all x.(MariaHasFlu(x) -> HasFlu(x))", "-HasFlu(Mary)", "Mary has the flu.", "(HasFlu(Mary))", "(HasFlu(Mary) & HasFlu(Mary))", "all x.(Mary(x) -> HasFlu(x))", "Mary has Flu(Mary)", "-HasFlu(Mary)", "all x.(MariaHasFlu(x) -> HasFlu(x))", "Mary has the flu.", "(HasFib(Mary,Maria))", "(HasFlu(Mary,Flu))", "(HasFlu(Mary) & HasFlu(Mary))", "Mary has flu."]}
{"id": "folio_train_2080", "nl": "Flu and influenza are the same disease.", "fol": "all x.(HasDisease(x,FluDisease) <-> HasDisease(x,InfluenzaDisease))", "prediction": ["all x.((Flu(x) & Influenza(x)) -> SameDisease(x))", "(SameDisease(flu,influenza) & SameDisease(flu,influenza))", "all x y.((Flu(x) & Influenza(y)) -> SameDisease(x,y))", "((Flu(f) & Influenza(f)) -> SameDisease(f))", "all x.(Flu(x) -> Influenza(x))", "all x.((Flu(x) & Influenza(x)) -> SameDisease(x))", "(SameDisease(flu,influenza))", "all x y.((Flu(x) & Influenza(y)) -> SameDisease(x,y))", "((Flu(flu) & Influenza(flu)) -> SameDisease(flu,influenza,flu))", "(SameDisease(flu,influenza) & SameDisease(flu,influenza))", "all x.(Flu(x) -> Influenza(x))", "exists x.(Flu(x) & Influenza(x) & Disease(x))", "(SameDisease(flu,i) & SameDisease(i,influenza))", "all x y.((Flu(x) & Influenza(y)) -> SameDisease(x,y))", "(SameDisease(flu,influenza) & SameDisease(flu,influenza))", "all x y.((Flu(x) & Influenza(y)) -> SameDisease(x,y))"]}
{"id": "folio_train_2081", "nl": "Susan doesn't have influenza.", "fol": "-HasDisease(Susan,InfluenzaDisease)", "prediction": ["(-HasInfluenza(Susan))", "all x.((Susan(x) & -HasInfluenza(x)) -> -HasInfluenza(x))", "Susan -HasInfluenza(s)", "all x.(Susan(x) -> -HasInfluenza(x))", "Susan hasn'tHasInfluenza(susan)", "-(Susan(Susan) & HasInfluenza(Susan))", "(-HasInfluenza(Susan))", "Susan -HasInfluenza(Susan)", "Susan doesn't have influenza.", "all x.((Susan(x) & -HasInfluenza(x)) -> -HasInfluenza(x))", "-HasInfluenza(Susan)", "Susan -HasInfluenza(s)", "(-HasIllness(Susan))", "(-HasInfluenza(Susan))", "-HasInfluenza(susan)", "(-HasInfluenza(Susan))"]}
{"id": "folio_train_2082", "nl": "Either Mary or Susan has influenza.", "fol": "(HasDisease(Mary,InfluenzaDisease) | HasDisease(Susan,InfluenzaDisease))", "prediction": ["(HasInfluenza(Mary) | HasInfluenza(Susan))", "((Mary(Mary) | Susan(Mary))) -> HasInfluenza(Mary,Susan))", "all x.((Mary(x) | Susan(x)) -> HasInfluenza(x))", "(exists x.(Mary(x) | Susan(x)) & HasInfluenza(x))", "(HasInfluenza(Mary) | HasInfluenza(Susan))", "exists x.(Maria(x) | Susan(x))", "(HasInfluenza(Mary,Maria) | HasInfluenza(Susan))", "either Mary or Susan has Influenza(Maria)", "(HasIllness(Mary,Maria) | HasIllness(Susan,Maria))", "all x.((Mary(x) | Susan(x)) -> HasInfluenza(x))", "Either Mary or Susan has Influenza.", "exists x.(Maria(x) | Susan(x))", "either Mary or Susan has Influenza(Maria,Susan)", "(HasInfluenza(Mary) | HasInfluenza(Susan))", "all x.((Mary(x) | Susan(x)) -> HasInfluenza(x))", "(HasInfluenza(Maria) | HasInfluenza(Susan))"]}
{"id": "folio_train_2083", "nl": "James Cocks was a British lawyer.", "fol": "(IsBritish(James) & IsLawyer(James))", "prediction": ["all x.((JamesCocks(x) & BritishLawyer(x)) -> BritishLawyer(x))", "James Cocks (BritishLawyer)", "(BritishLawyer(JimmyCocks) & British(JimmyCocks))", "James Cocks (b.1912) -> BritishLawyer(x))", "all x.(JimmyCocks(x) -> BritishLawyer(x))", "all x.((JamesCocks(x) & BritishLawyer(x)) -> JamesCocks(x))", "(BritishLawyer(JamesCocks) & BornIn(JamesCocks))", "James Cocks was a British Lawyer.", "(BritishLawyer(JimmyCocks) & JamesCocks(Jimmy))", "James Cocks (BritishLawyer)", "all x.((JimmyCocks(x) & BritishLawyer(x)) -> JamesCocks(x))", "James Cocks (b.1914) & BritishLawyer(b))", "(BritishLawyer(JamesCocks) & BornIn(JamesCocks,James))", "James Cocks was a British lawyer.", "all x.((JamesCocks(x) & BritishLawyer(x)) -> British(x))", "James Cocks was a British Lawyer."]}
{"id": "folio_train_2084", "nl": "James Cocks was a Whig politician who sat in the House of Commons.", "fol": "(IsWhig(James) & IsPolitician(James) & SitsInHouseOfCommons(James))", "prediction": ["all x.((WhigPolitician(x) & SitsInHouseOfCommons(x)) -> JamesCocks(x))", "James Cocks (WhigPolitician(Whig) & SitsInHouseOfCommons(Whig))", "James Cocks (WhiskyPolitician(x) & SitsInHouseOfCommons(x))", "all x.((WhiskyPolitician(x) & Whig(x)) -> SitsInHouseOfCommons(x))", "(WhiskyPolitician(JimmyCocks) & SitsInHouseOfCommons(JimmyCocks))", "all x y.((WhgPolitician(x) & Whig(y)) -> SitsInHouseOfCommons(x,y))", "(WhigPolitician(JimmyCocks) & SitsInHouseOfCommons(JimmyCocks))", "all x.((WhigPolitician(x) & Whig(x)) -> SitsInHouseOfCommons(x))", "James Cocks was a WhigPolitician and SitsInHouseOfCommons(Cocks,Cocks)", "all x y.((WhiskeyPolitician(x) & Whig(y)) -> SitsInHouseOfCommons(x,y))", "(WhiskeyPolitician(JamesCocks) & SitsInHouseOfCommons(JamesCocks))", "James Cocks (WhiskeyPolitician(x) & SitsInHouseOfCommons(x))", "(WhigPolitician(JimmyCocks) & SitsInHouseOfCommons(JimmyCocks))", "James Cocks, aka WhigPolitician, satInHouseOfCommons(JamesCocks)", "James Cocks (WhigPolitician(Whig))", "all x.((WhiskeyPolitician(x) & Whig(x)) -> SitsInHouseOfCommons(x))"]}
{"id": "folio_train_2085", "nl": "A British is a European.", "fol": "all x.(IsBritish(x) -> IsEuropean(x))", "prediction": ["all x.(British(x) -> European(x))", "all x.(British(x) -> European(x))", "all x y.((British(x) & European(y)) -> British(x))", "all x.(British(x) -> European(x))", "all x.((British(x) & European(x)) -> British(x))", "(all x.(British(x) -> European(x)))", "all x y.((British(x) & European(y)) -> British(x))", "all x.(British(x) -> European(x))", "all x.(British(x) -> European(x))", "all x.(British(x) -> European(x))", "exists x.(Britain(x) & European(x))", "all x.(British(x) -> European(x))", "all x.(British(x) -> European(x))", "all x.(British(x) -> European(x))", "exists x.(British(x) & Europ\u00e4er(x))", "exists x.(British(x) & European(x))"]}
{"id": "folio_train_2086", "nl": "Any lawyer is familiar with laws.", "fol": "all x.(IsLawyer(x) -> IsFamiliarWithLaws(x))", "prediction": ["all x.(Lawyer(x) -> FamiliarWithLaws(x))", "all x.(Lawyer(x) -> FamiliarWithLaws(x))", "all x y.((Lawyer(x) & Law(y)) -> FamiliarWith(x,y))", "all x.(Legal(x) -> FamiliarWithLaws(x))", "all x.(Lawyer(x) -> FamiliarWithLaws(x))", "all x y.((Lawyer(x) & Law(y)) -> FamiliarWith(x,y))", "all x.(Litigator(x) -> FamiliarWithLaws(x))", "all x.(Lawyer(x) -> FamousWithLaws(x))", "all x y.((Lawyer(x) & Law(y)) -> FamiliarWith(x,y))", "exists x.(LegalAdvice(x) & FamiliarWithLaws(x))", "all x.(Lawyer(x) -> FamiliarWithLaws(x))", "all x y.((Lawyer(x) & Law(y)) -> Familiar(x,y))", "all x.(Lawyer(x) -> FamilyWithLaws(x))", "exists x.(Legalist(x) & Knowledgeable(x))", "all x.(Lawyer(x) -> FamiliarWithLaws(x))", "exists x.(Lawyer(x) & FamiliarWithLaws(x))"]}
{"id": "folio_train_2087", "nl": "Some Whigs speak French.", "fol": "exists x.(IsWhig(x) & CanSpeakFrench(x))", "prediction": ["exists x.(Whist(x) & SpeaksFrench(x))", "exists x.(Whig(x) & SpeakFrench(x))", "(exists x.(Whig(x) & SpeakFrench(x)))", "exists x.(Whisg(x) & SpeakFrench(x))", "exists x.(Whig(x) & SpeakFrench(x))", "(exists x.(Whisg(x) & Whig(x) & SpeakFrench(x)))", "exists x.(Whisg(x) & Whig(x) & SpeakFrench(x))", "exists x y.(Whist(x) & French(y))", "exists x.(Whisg(x) & SpeakFrench(x))", "exists x.(Whig(x) & SpeaksFrench(x))", "exists x.(Whist(x) & SpeaksFrench(x))", "exists x.(Whiskey(x) & Speak(x,French))", "exists x.(Wig(x) & SpeaksFrench(x))", "exists x.(Whaga(x) & Whig(x))", "exists x.(Wig(x) & SpysFrench(x))", "exists x.(Whisky(x) & SpeaksFrench(x))"]}
{"id": "folio_train_2088", "nl": "No lawyer ever sat in the House of Commons.", "fol": "-exists x.(IsLawyer(x) & SitsInHouseOfCommons(x))", "prediction": ["-exists x.(Lawyer(x) & SitsInHouseOfCommons(x))", "all x.(Lawyer(x) -> -SatInHouseOfCommons(x))", "KeenLawyerSatInHouseOfCommons(ke)", "-exists x.(Lawyer(x) & SitsInHouseOfCommons(x))", "(exists x.(Lawyer(x) & SitsIn(x,Commons)))", "-exists x.(Lawyer(x) & SatInHouseOfCommons(x))", "-exists x y.(Lawyer(x) & HouseOfCommons(y) & SitsIn(x,y))", "\u2013 -LawyerSatInHouseOfCommons(x)", "all x.(Lawyer(x) -> -SatInHouseOfCommons(x))", "KeenLawyerSatInHouseOfCommons(ke)", "all x.(Lawyer(x) -> -SatInHouseOfCommons(x))", "-exists x.(Lawyer(x) & SitsInHouseOfCommons(x))", "-exists x.(Lawyer(x) & SatInHouseOfCommons(x))", "-exists x.(Legalist(x) & SitsInHouseOfCommons(x))", "-exists x.(Lawyer(x) & SatInHouseOfCommons(x))", "-exists x.(Legalist(x) & SitsInCommons(x))"]}
{"id": "folio_train_2089", "nl": "Some European is familiar with laws.", "fol": "exists x.(IsEuropean(x) & IsFamiliarWithLaws(x))", "prediction": ["exists x.(European(x) & FamiliarWithLaws(x))", "exists x.(European(x) & FamilyWithLaws(x))", "exists x y.(European(x) & Law(y) & Familiar(x,y))", "exists x.(European(x) & FamiliarWithLaws(x))", "all x y.((European(x) & Law(y)) -> Familiar(x,y))", "exists x y.(European(x) & Law(y) & FamiliarWith(x,y))", "exists x.(European(x) & FamiliarWithLaws(x))", "exists x.(European(x) & FamilyWithLaws(x))", "exists x.(Eastern(x) & FamiliarWithLaws(x))", "exists x.(European(x) & FamiliarWithLaws(x))", "exists x.(Eastern(x) & FamilyWithLaws(x))", "exists x.(European(x) & FamiliarWithLaws(x))", "exists x.(European(x) & FamousWithLaws(x))", "exists x.(European(x) & FamiliarWithLaws(x))", "exists x.(European(x) & FamiliarWithLaws(x))", "exists x.(European(x) & Family(x))"]}
{"id": "folio_train_2090", "nl": "James Cocks speaks French.", "fol": "CanSpeakFrench(James)", "prediction": ["all x.((JamesCocks(x) & French(x)) -> Speaks(x,y))", "(SpeaksFrench(JamesCocks) & -SpeaksFrench(JamesCocks))", "James Cocks speaks French.", "all x.(JamesCocks(x) -> SpeaksFrench(x))", "-SpeaksFrench(JamesCocks)", "James Cocks speaksFrench(James)", "JamesCocksSpeaksFrench(JamesCocks)", "all x.((JamesCocks(x) & French(x)) -> Speaks(x,y))", "(SpeaksFrench(JamesCocks)", "(SpeaksFrench(JimmyCocks,French))", "All x.(JamesCocks(x) -> SpeaksFrench(x))", "James Cocks speaks French.", "all x.((JamesCocks(x) & French(x)) -> Speaks(x,y))", "James Cocks speaksFrench.", "(SpeaksFrench(JamesCocks)", "James Cocks speaks French."]}
{"id": "folio_train_2091", "nl": "Beasts of Prey is either a fantasy novel or a science fiction novel.", "fol": "((IsNovel(Beastsofprey) & IsFantasyNovel(Beastsofprey)) | IsScienceFictionNovel(Beastsofprey))", "prediction": ["all x.(BeastsOfPrey(x) -> (FantasyNovel(x) | ScienceFictionNovel(x)))", "(FantasyNovel(BeastsOfPrey) | ScienceFictionNovel(BeastsOfPrey))", "all x.(BeastsOfPrey(x) -> (FantasyNovel(x) | ScienceFictionNovel(x)))", "(FantasyNovel(BeastsOfPrey) | ScienceFictionNovel(BeastsOfPrey))", "all x y.((BeastsOfPrey(x) & FantasyNovel(y)) | ScienceFictionNovel(y))", "all x.(BeastsOfPrey(x) -> (FantasyNovel(x) | ScienceFictionNovel(x)))", "all x.(BeastsOfPrey(x) -> (FictionNovel(x) | ScienceFictionNovel(x)))", "(FantasyNovel(BeastsOfPrey) | ScienceFictionNovel(BeastsOfPrey))", "all x y.((BeastsOfPrey(x) & FantasyNovel(y)) | ScienceFictionNovel(x))", "all x.(BeastsOfPrey(x) -> (FantasyNovel(x) | ScienceFictionNovel(x)))", "(FantasyNovel(BeastsOfPrey) | ScienceFictionNovel(BeastsOfPrey))", "exists x.(BeastsOfPrey(x) & FantasyNovel(x) & ScienceFictionNovel(x))", "all x.(BeastsOfPrey(x) -> (FictionNovel(x) | ScienceFictionNovel(x)))", "(FantasyNovel(BeastsOfPrey) | ScienceFictionNovel(BeastsOfPrey))", "exists x.(BeatsOfPrey(x) & FantasyNovel(x) & ScienceFictionNovel(x))", "all x.(BeastsOfPrey(x) -> (FantasyNovel(x) | ScienceFictionNovel(x)))"]}
{"id": "folio_train_2092", "nl": "Science fiction novels are not about mythological creatures", "fol": "all x y.((IsScienceFictionNovel(x) & IsMythological(y) & IsCreature(y)) -> -IsAbout(x,y))", "prediction": ["all x.(ScienceFictionNovel(x) -> -MythologicalCreatures(x))", "all x y.((ScienceFictionNovel(x) & MythologicalCreature(y)) -> -(MythologicalCreature(x) & -MythologicalCreature(x)))", "all x y z.((ScienceFictionNovel(x) & MythologicalCreature(y) & MythologicalCreature(z)) -> -(MythologicalCreature(x,y) & -MythologicalCreature(x,z)))", "-(ScienceFictionNovel(x) & -MythologicalCreatures(x)))", "(all x.(ScientificFictionNovel(x) -> -MythologicalCreatures(x)))", "all x.(ScienceFictionNovel(x) -> -MeanologicalCreatures(x))", "all x.((ScienceFictionNovel(x) & -MythologicalCreatures(x)) -> -MythologicalCreatures(x))", "all x y.((ScienceFictionNovel(x) & MythologicalCreature(y)) -> -(MythologicalCreature(x,y) & -MythologicalCreature(x,y)))", "(all x.(ScienceFictionNovel(x) -> -MythologicalCreatures(x)))", "all x.(ScientificFictionNovel(x) -> -MythologicalCreatures(x))", "all x.(ScienceFictionNovel(x) -> -MythologicalCreatures(x))", "all x.(ScienceFictionNovel(x) -> (-MythologicalCreatures(x) & AboutMythologicalCreatures(x)))", "all x y.((ScienceFictionNovel(x) & MythologicalCreature(y)) -> -MormonologicalCreatures(x,y))", "(all x.(ScienceFictionNovel(x) -> -MythologicalCreatures(x)))", "all x y.((ScienceFictionNovel(x) & MythologicalCreature(y)) -> -(MythologicalCreature(x) & MythologicalCreature(x)))", "all x.(ScientificFictionNovel(x) -> -MythologicalCreatures(x))"]}
{"id": "folio_train_2093", "nl": "Beasts of Prey Is about a creature known as the Shetani.", "fol": "(IsAbout(Beastsofprey,Shetani) & IsCreature(Shetani))", "prediction": ["all x.(BeastsOfPrey(x) -> (Creature(x) & Shetani(x)))", "all x y.((BeastsOfPrey(x) & Creature(y)) -> Shetani(y))", "(BeastsOfPrey(x) -> AboutCreature(x))", "all x.(BeastsOfPrey(x) -> (Cream(x) & Shetani(x)))", "(BeastsOfPrey(x) -> AboutCreature(x))", "all x y z.((BeastsOfPrey(x) & Creature(y) & Shetani(z)) -> About(x,y,z))", "all x.(BeastsOfPrey(x) -> (CreatureKnownAsShetani(x)))", "All x y.((BeastsOfPrey(x) & Creature(y)) -> Shetani(x))", "All x y.((BeastsOfPrey(x) & Creature(y) & Shetani(y)) -> About(x,y))", "all x.((BeastsOfPrey(x) & Creature(x)) -> Shetani(x))", "(BeastsOfPrey(x) -> AboutCreature(x))", "all x.(BeastsOfPrey(x) -> AboutCreature(x))", "exists x.(BeastsOfPrey(x) & Creature(x) & Shetani(x))", "All x y.((BeastsOfPrey(x) & Creature(y)) -> Shetani(y))", "all x.(BeastsOfPrey(x) -> (Cream(x) & Shetani(x)))", "All x.(BeastsOfPrey(x) -> AboutShetaniCreature(x))"]}
{"id": "folio_train_2094", "nl": "Shetanis are mythological.", "fol": "IsMythological(Shetani)", "prediction": ["all x.(Shetani(x) -> Mythological(x))", "(Mythologically(Shetani) & -Mythological(Shetani))", "all x.(Shetani(x) -> Mythological(x))", "all x y.((Shetani(x) & Mythological(y)) -> Mythological(x))", "(Mythological) & Shetani(shetani)", "(Mythologically(Shetani) -> -Mythological(Shetani))", "all x.(Shetani(x) -> Mythological(x))", "(Mythologically(Shetanis) | Mythologically(Shetanis))", "all x.(Shetani(x) -> Mythological(x))", "all x.(Shetani(x) -> Mythological(x))", "All x.(Shettin(x) -> Mythological(x))", "all x.(Shetani(x) -> Mythological(x))", "All x.(Shettin(x) -> Mythological(x))", "all x.(Shetani(x) -> Mythological(x))", "all x.(Shetani(x) -> Mythological(x))", "All x.(Shetani(x) -> Mythological(x))"]}
{"id": "folio_train_2095", "nl": "Beasts of prey is a fantasy novel.", "fol": "IsFantasyNovel(Beastsofprey)", "prediction": ["all x.(BeastsOfPrey(x) -> FantasyNovel(x))", "(FantasyNovel(BeastsOfPrey) & FantasyNovel(BeastsOfPrey))", "all x y.((BeastsOfPrey(x) & FantasyNovel(y)) -> FantasyNovel(x))", "all x.(BeastsOfPrey(x) -> FantasyNovel(x))", "all x.((BeastsOfPrey(x) & FantasyNovel(x)) -> FantasyNovel(x))", "(FantasyNovel(BeastsOfPrey) & FantasyNovel(BeastsOfPrey))", "all x y.((Beast(x) & Prey(y)) -> FantasyNovel(x))", "all x y.((BeastsOfPrey(x) & FantasyNovel(y)) -> FantasyNovel(x))", "all x.(BeastsOfPrey(x) -> FantasyNovel(x))", "(FantasyNovel(BeastsOfPrey) & FantasyNovel(BeastsOfPrey))", "All x.(BetweenPrey(x) -> FantasyNovel(x))", "all x.(BeastsOfPrey(x) -> FantasyNovel(x))", "(FantasyNovel(BeastsOfPrey) -> FantasyNovel(BeastsOfPrey))", "all x.(BeastsOfPrey(x) -> FantasyNovel(x))", "exists x.(BeastsOfPrey(x) & FantasyNovel(x))", "exists x.(BeastsOfPrey(x) & FantasyNovel(x))"]}
{"id": "folio_train_2096", "nl": "Beasts of prey isn't a science fiction novel.", "fol": "-IsScienceFictionNovel(Beastsofprey)", "prediction": ["all x.(BeastsOfPrey(x) -> -ScienceFictionNovel(x))", "(-ScientificFictionNovel(BeastsOfPrey))", "(BeastsOfPrey(x) & -ScienceFictionNovel(x))", "((BeastsOfPrey(x) & -ScienceFictionNovel(x)) | -ScienceFictionNovel(x)))", "-(BeastsOfPrey(x) & ScienceFictionNovel(x))", "(exists x.(BeastsOfPrey(x) & -ScienceFictionNovel(x)))", "all x.((BeastsOfPrey(x) & -ScienceFictionNovel(x)) -> -ScienceFictionNovel(x))", "all x.(BeastsOfPrey(x) -> -ScienceFictionNovel(x))", "all x.(BeastsOfPrey(x) -> -ScientificFictionNovel(x))", "(BeastsOfPrey(x) & -ScienceFictionNovel(x))", "-(BeastsOfPrey(x) & ScienceFictionNovel(x))", "exists x.(Beat(x) & -ScienceFictionNovel(x))", "all x.(BeastsOfPrey(x) -> -ScienceFictionNovel(x))", "all x.(BeastsOfPrey(x) -> -ScientificFictionNovel(x))", "-(BeastsOfPrey(x) & ScienceFictionNovel(x))", "all x.(BeastsOfPrey(x) -> -ScienceFictionNovel(x))"]}
{"id": "folio_train_2097", "nl": "A shetani is either mythological or a creature, but not both.", "fol": "((IsMythological(Shetani) & -IsCreature(Shetani)) | (-IsMythological(Shetani) & IsCreature(Shetani)))", "prediction": ["all x.(Shetani(x) -> ((Mythological(x) | Creature(x)) & -(Mythological(x) & Creature(x)))))", "all x.(Shetani(x) -> ((Mythological(x) | Creature(x)) & -(Mythological(x) & Creature(x)))))", "all x y.((Shetani(x) & Mythological(y)) | Creature(y))", "all x y.(Shetani(x) -> ((Mythological(x) | Creature(x)) & -(Mythological(x) & Creature(y)))))", "all x.(Shetani(x) -> ((Mythological(x) & -Cream(x)) | (Cream(x) & -Mythological(x) & Creature(x))))", "all x.(Shetani(x) -> ((Mythological(x) | Creature(x)) & -(Mythological(x) & Creature(x)))))", "exists x.(Shetani(x) & -(Mythological(x) | Creature(x))))", "(all x.(Shetani(x) -> (Mythological(x) | Creature(x))))", "all x.(Shetani(x) -> ((Mythological(x) | Creature(x)) & -(Mythological(x) & Creature(x))))", "exists x.(Shettini(x) & ((Mythological(x) & -Cream(x)) | (-Mythological(x) & Creature(x)))))", "all x.(Shetani(x) -> ((Mythological(x) | Creature(x)) & -(Mythological(x) & Creature(x)))))", "all x.(Shetani(x) -> ((Mythological(x) | Creature(x))) & -(Mythological(x) & Creature(x))))", "all x y.((Shetani(x) & Mythological(y)) | Creature(y))", "(all x.(Shetani(x) -> (Mythological(x) | Creature(x))))", "exists x.(Shetani(x) & -(Mythological(x) | Creature(x)))", "exists x.(Shetani(x) & -(Mythological(x) | Creature(x)))"]}
{"id": "folio_train_2098", "nl": "Odell is an English surname originating in Odell, Bedfordshire.", "fol": "all x.(HasSurnameOdell(x) -> IsSurname(x))", "prediction": ["all x.(Odell(x) -> (EnglishSurname(x) & OriginatedIn(x,Odell,Belfastshire)))", "Odell (EnglandSurname(en) & OriginatedIn(en) & Odell(en) & Bedfordshire(en))", "(EnglishSurname(Odell) & OriginatedIn(Odell,Belfastshire))", "Odell is an English surname originating in Odell,Belfastshire.", "Odell (EnglandSurname(England) & OriginatedInOdell(England) & Bedfordshire(England))", "Odell (EnglishSurname(x) & OriginatedInOdell(x))", "(EnglandSurname(Odell) & OriginatedIn(Odell,Belfastshire))", "Odell, Bedfordshire (Essex(Odell) & OriginatedIn(Odell,Belfastshire))", "all x.(Odell(x) -> (EnglishSurname(x) & OriginatedIn(x,Odell,Belfastshire)))", "Odell (EnglandSurname(en) & OriginatedInOdell(en) & Bedfordshire(en))", "Odell is Englishsurname(x) & OriginatedInOdell(x) & Bedfordshire(x))", "(EnglishSurname(Odell) & OriginatedIn(Odell,Belfastshire))", "Odell is an English surname originating in Odell, Bedfordshire.", "all x.(Odell(x) -> (EnglishSurname(x) & OriginatedInOdell(x) & Bedfordshire(x)))", "(EnglandSurname(Odell) & OriginatedIn(Odell,Belfastshire))", "(EnglishSurname(Odell) & OriginatedIn(Odell,Belfastshire))"]}
{"id": "folio_train_2099", "nl": "In some families Odell is spelled O'Dell, in a mistaken Irish adaptation.", "fol": "exists x.(HasSurnameOdell(x) & IsSpelledODell(x))", "prediction": ["all x.((Family(x) & Odell(x)) -> SpelledO'Dell(x))", "exists x.(Family(x) & SpelledO'Dell(x) & MistakenIrishAdaptation(x))", "(exists x.(Family(x) & SpelledO'Dell(x)) & MistakenIrishAdaptation(x))", "all x y.((Family(x) & Odell(y)) -> SpelledO'Dell(x,y))", "all x y.((Family(x) & Odell(y)) -> (SpelledO'Dell(y) & MistakenIrishAdaptation(x,y)))", "all x y z.((Family(x) & Odell(y) & IrishAdaptation(z)) -> SpelledO'Dell(y,z))", "exists x.(Family(x) & SpelledO'Dell(x) & MistakenIrishAdaptation(x))", "(exists x.(Family(x) & Odell(x)) & SpelledO'Dell(x) & MistakenIrishAdaptation(x))", "(exists x.(Family(x) & SpelledO'Dell(x)) & MistakenIrishAdaptation(x))", "exists x.(Family(x) & Odell(x) & SpelledO'Dell(x) & MistakenIrishAdaptation(x))", "all x y z.((Family(x) & Odell(y) & IrishAdaptation(z)) -> (SpelledO'Dell(y,z) & Mistaken(z,y)))", "all x.((Family(x) & Odell(x)) -> SpelledO'Dell(x))", "all x y.((Family(x) & Odell(y)) -> SpelledO'Dell(y))", "exists x.(Family(x) & SpelledO'Dell(x))", "exists x.(Family(x) & SpokenOdell(x) & MistakenIrishAdaptation(x))", "exists x.(Family(x) & SpelledO'Dell(x))"]}
{"id": "folio_train_2100", "nl": "Notable people with the surname include Amy Odell, Jack Odell, and Mats Odell.", "fol": "(HasSurnameOdell(AmyOdell) & IsNotablePerson(AmyOdell) & HasSurnameOdell(JackOdell) & IsNotablePerson(JackOdell) & HasSurnameOdell(MatsOdell) & IsNotablePerson(MatsOdell))", "prediction": ["(NotablePeopleWithSurname(amyodell) & NotablePeopleWithSurname(ayodell(a) & NotablePeopleWithSurname(ayodell(a)) & NotablePeopleWithSurname(ayodell(a) & NotablePeopleWithSurname(ayodell(a)))", "(NotablePeopleWithSurname(amber(amber) | NotablePeopleWithSurname(amber(amber) | NotablePeopleWithSurname(amber(amber)))", "all x.((Person(x) & AmyOdell(x) & JackOdell(x) & MatsOdell(x)) -> Notable(x))", "(NotablePerson(amber) & HasSurname(amber)) & (JackOdell(amber) | MatsOdell(amber)))", "KnownPeopleWithSurname(x) -> (AmyOdell(x) | JackOdell(x) | MatsOdell(x)))", "exists x.(Person(x) & Surname(x) & (AmyOdell(x) | JackOdell(x) | MatsOdell(x)))", "Amongst the notable people with the surname are Amy Odell, Jack Odell, Mats Odell.", "(AmyOdell(a) | JackOdell(b) | MatsOdell(c)))", "all x.((Person(x) & AmyOdell(x)) -> (JackOdell(x) & MatsOdell(x)))", "(NotablePerson(amber) & HasSurname(amber,amber) & NotablePerson(amber,jack) & NotablePerson(amber,mats))", "(Named(Person(Person) & AmyOdell(P) | Named(P) & JackOdell(P) | Named(P) & MatsOdell(P)))", "(NotablePeopleWithSurname(amyOdell) | NotablePeopleWithSurname(amyOdell)) & NotablePeopleWithSurname(amyOdell))", "(NotablePersonWithSurname(amber(amber) | NotablePersonWithSurname(amber(amber) | NotablePersonWithSurname(amber(amber) | NotablePersonWithSurname(amber)))", "all x.((Person(x) & HasSurname(x)) -> (AmyOdell(x) | JackOdell(x) | MatsOdell(x)))", "(NotablePeopleWithSurname(AmyOdell) & NotablePeopleWithSurname(JackOdell) & NotablePeopleWithSurname(MatsOdell))", "all x.((Person(x) & Surname(x)) -> (AmyOdell(x) | JackOdell(x) | MatsOdell(x)))"]}
{"id": "folio_train_2101", "nl": "Amy Odell is a British singer-songwriter.", "fol": "(IsBritish(AmyOdell) & IsSinger(AmyOdell) & IsSongWriter(AmyOdell))", "prediction": ["all x.((Singer(x) & Songwriter(x)) -> AmyOdell(x))", "(SingerSongwriter(AmyOdell) & British(AmyOdell))", "(BritishSingerSongwriter(AmyOdell)", "all x.((AmyOdell(x) & BritishSinger(x)) -> Songwriter(x))", "Amy Odell (born in London, England) & SingerSongwriter(s) & Writer(s) & Writer(s) & Writer(s) & Writer(s) & Writer(s) & Writer(s) & Writer(s) & Writer(s) & Writer(s))", "Amy Odell (BritishSingerSongwriter(am) & BornIn(am))", "Amy Odell is a British SingerSongwriter.", "(SingerSongwriter(AmyOdell) & British(Odell))", "all x.((AmyOdell(x) & BritishSingerSongwriter(x)) -> SingerSongwriter(x))", "all x.((Singer(x) & Songwriter(x)) -> AmyOdell(x))", "(BritishSingerSongwriter(AmyOdell)", "Amy Odell (BritishSingerSongwriter(Amy))", "all x.((AmyOdell(x) & BritishSinger(x) & Songwriter(x)) -> Singer(x))", "(SingerSongwriter(AmyOdell) & British(AmyOdell))", "Amy Odell is a British SingerSongwriter.", "all x.((Singer(x) & Songwriter(x)) -> AmyOdell(x))"]}
{"id": "folio_train_2102", "nl": "Jack Odell is an English toy inventor.", "fol": "(IsEnglish(JackOdell) & IsToyInventor(JackOdell))", "prediction": ["(Inventor(JackOdell) & ToyInventor(Jack))", "All x.((ToyInventor(x) & JackOdell(x)) -> Invents(x,y))", "(ToyInventor(JackOdell) & InventsToys(JackOdell))", "All x.((ToyInventor(x) & JackOdell(x)) -> Invents(x,y))", "Jack Odell (ToyInventor) & Invents(Jack,Odell))", "(Inventor(JackOdell) & Toy(Jack))", "-ToyInventor(JackOdell)", "Jack Odell is an inventor of Toys.", "Jack Odell (ToyInventor)", "(Inventor(JackOdell) & ToyInventor(Jack))", "all x.(ToyInventor(x) -> JackOdell(x))", "(Inventor(JackOdell) & ToyInventor(Jack))", "All x.((ToyInventor(x) & JackOdell(x)) -> Invents(x,y))", "Jack Odell ist ein ToyInventor.", "Jack Odell (ToyInventor)", "Jack Odell,ToyInventor(x)"]}
{"id": "folio_train_2103", "nl": "Jack Odell is a notable people.", "fol": "IsNotablePerson(JackOdell)", "prediction": ["all x.((JackOdell(x) & FamousPeople(x)) -> NotablePeople(x))", "(NotablePeople(JackOdell)", "Jack Odell is a notable person.", "all x.((JackOdell(x) & NotablePeople(x)) -> Famous(x))", "(RemarkablePeople(JackOdell)", "Jack Odell is a notable person.", "(NotablePeople(JackOdell)", "exists x.(Odell(x) & NotablePeople(x))", "all x.((JackOdell(x) & FamousPeople(x)) -> NotablePeople(x))", "all x.((Person(x) & JackOdell(x)) -> Notable(x))", "all x.(JackOdell(x) -> NotablePeople(x))", "all x.((JackOdell(x) & NotablePeople(x)) -> NotablePeople(x))", "Jack Odell is notable.", "(RemarkablePeople(JackOdell)", "(NotablePeople(JackOdell)", "(RemarkablePeople(JackOdell)"]}
{"id": "folio_train_2104", "nl": "Odell is Amy Odell's surname.", "fol": "HasSurnameOdell(AmyOdell)", "prediction": ["Odell (AmyOdell(a) & Surname(b))", "Odell is AmyOdellsSurname(x)", "(AmyOdell(Odell) & Surname(Odell))", "(AmyOdell(AmyOdell) & Surname(AmyOdell))", "(Surname(AmyOdell) & Surname(AmyOdell))", "AmyOdell(x) -> Surname(x))", "All x.(Odell(x) -> AmyOdellSurname(x))", "Odell (AmyOdell(Amy))", "(Surname(AmyOdell) & AmyOdell(AmyOdell))", "Odell is AmyOdellsSurname(x)", "Odell is AmyOdellssurname(x)", "Odell (AmyOdellSurname))", "AmyOdell(Odell)", "AmyOdell(x) -> Surname(x))", "(AmyOdell(Odell) -> Surname(Odell))", "Odell (Surname(AmyOdell))"]}
{"id": "folio_train_2105", "nl": "Amy Odell is an English toy inventor.", "fol": "(IsEnglish(AmyOdell) & ToyInventor(AmyOdell))", "prediction": ["all x.((ToyInventor(x) & AmyOdell(x)) -> Invents(x,y))", "(Inventor(AmyOdell) & Toy(AmyOdell))", "Amy Odell (ToyInventor)", "(Inventor(AmyOdell) & ToyInventor(AmyOdell))", "All x.((ToyInventor(x) & AmyOdell(x)) -> Invents(x,y))", "(ToyInventor(AmyOdell) & InventsToys(AmyOdell))", "Amy Odell is an inventor of toys.", "Amy Odell (ToyInventor) & Invents(Amy,Amy))", "All x.(ToyInventor(x) -> AmyOdell(x))", "all x.((ToyInventor(x) & AmyOdell(x)) -> Invents(x,y))", "Amy Odell is an inventor of Toys.", "(Inventor(AmyOdell) & Toy(AmyOdell))", "all x.((ToyInventor(x) & AmyOdell(x)) -> Invents(x,y))", "Amy Odell ist ein ToyInventor.", "Amy Odell (ToyInventor)", "Amy Odell, toy inventor, is a."]}
{"id": "folio_train_2106", "nl": "Amy Odell is also Amy O'dell.", "fol": "(HasSurnameOdell(AmyOdell) & IsSpelledODell(Amyodel))", "prediction": ["(AmyOdell(Amy) & AmyOdell(Amy))", "all x.(AmyOdell(x) -> AmyOdell(x))", "all x.((AmyOdell(x) & AmyOdell(x)) -> AmyOdell(x))", "Amy Odell (AmyOdell(Amy))", "(AmyOdell(Amy) & AmyOdell(Amy))", "Amy Odell is AmyO'dell.", "all x.(AmyOdell(x) -> AmyOdell(x))", "all x.((AmyOdell(x) & AmyOdell(x)) -> AmyOdell(x))", "((AmyOdell(a) & AmyOdell(a)) -> AmyOdell(a))", "(AmyOdell(a) & AmyOdell(a))", "Amy Odell (AmyOdell(a) & AmyOdell(b))", "(AmyOdell(Amy) & AmyOdell(Amy))", "all x.((AmyOdell(x) & AmyOdell(x)) -> AmyO'dell(x))", "All x.(AmyOdell(x) -> AmyO'dell(x))", "(AmyOdell(Amy) & AmyOdell(Amy))", "All x.(AmyOdell(x) -> AmyOdell(x))"]}
{"id": "folio_train_2107", "nl": "If you go somewhere by train, you will not lose time.", "fol": "all x.(TravelByTrain(x) -> -TimeLost(x))", "prediction": ["all x.((Train(x) & GoesAround(x)) -> -LosesTime(x))", "all x.((Train(x) & Goes(x)) -> -LosesTime(x))", "all x.(Train(x) -> -LosesTime(x))", "all x.((GoesByTrain(x) & -LosesTime(x)) -> -LosesTime(x))", "-LoseTimeIfYouGoByTrain(x))", "all x.((Train(x) & GoesTo(x)) -> -LosesTime(x))", "all x y.((Train(x) & Place(y)) -> -LosesTime(x,y))", "all x.(Train(x) -> -LoseTime(x))", "all x.(GoesByTrain(x) -> -LosesTime(x))", "all x y.((Train(x) & Place(y) & GoesBy(x,y)) -> -LosesTime(x))", "(all x.((Train(x) & Goes(x)) -> -LosesTime(x))", "all x y.((Train(x) & Train(y)) -> -LoseTime(x,y))", "all x.((Train(x) & GoesBy(x,y)) -> -LosesTime(x))", "all x.(Train(x) -> -LosesTime(x))", "all x y.((Train(x) & Train(y)) -> -LosesTime(x,y))", "all x.(Train(x) -> -LoseTime(x))"]}
{"id": "folio_train_2108", "nl": "If you go somewhere by car and meet traffic jam, you will lose time.", "fol": "all x.((TravelByCar(x) & EncounterTrafficJam(x)) -> TimeLost(x))", "prediction": ["all x.((GoesByCar(x) & MeetsTrafficJam(x)) -> LosesTime(x))", "all x.((Car(x) & GoesAround(x) & MeetsTrafficJam(x)) -> LosesTime(x))", "all x y.((Car(x) & Car(y) & Goes(x,y) & MeetsTrafficJam(x)) -> LosesTime(x))", "all x y.((Goes(x,y) & Car(y) & MeetsTrafficJam(x)) -> LosesTime(x))", "all x.((GoesByCar(x) & MeetsTrafficJam(x)) -> LosesTime(x))", "all x.((Car(x) & GoesSomewhere(x) & MeetsTrafficJam(x)) -> LosesTime(x))", "(all x.((GoesByCar(x) & MeetsTrafficJam(x)) -> LosesTime(x)))", "all x.((Car(x) & GoesTo(x) & MeetsTrafficJam(x)) -> LosesTime(x))", "all x y.((GoesByCar(x) & TrafficJam(y) & Meets(x,y)) -> LosesTime(x))", "all x y.((Car(x) & Place(y) & MeetsTrafficJam(x,y)) -> LosesTime(x))", "all x.((CarGoes(x) & MeetsTrafficJam(x)) -> LosesTime(x))", "all x.((GoesByCar(x) & MeetsTrafficJam(x)) -> LosesTime(x))", "all x y z.((Car(x) & Car(y) & TrafficJam(z)) -> LosesTime(x,y,z))", "all x.((GoesAround(x) & MeetsTrafficJam(x)) -> LosesTime(x))", "all x.(GoesByCar(x) -> (LosesTime(x) & MeetsTrafficJam(x)))", "all x.((GoesByCar(x) & MeetsTrafficJam(x)) -> LosesTime(x))"]}
{"id": "folio_train_2109", "nl": "If you lose time, you will be late for work.", "fol": "all x.(TimeLost(x) <-> IsLateForWork(x))", "prediction": ["all x.(LosesTime(x) -> LateForWork(x))", "all x.(LoseTime(x) -> LateForWork(x))", "(LoseTime(x) -> LateForWork(x))", "all x.((LosesTime(x) & LateForWork(x)) -> LateForWork(x))", "all x.((LoseTime(x) & LateForWork(x)) -> LateForWork(x))", "(LosesTime(x) -> LateForWork(x))", "all x.(LosesTime(x) -> LateForWork(x))", "all x y.((LoseTime(x) & Work(y)) -> Late(x,y))", "-LosesTime(-)", "all x.((LoseTime(x) & LateForWork(x)) -> LateForWork(x))", "all x.(LoseTime(x) -> LateForWork(x))", "all x.((LosesTime(x) & LateForWork(x)) -> LateForWork(x))", "all x y.((LoseTime(x) & Work(y)) -> LateFor(x,y))", "all x.(LosesTime(x) -> LateForWork(x))", "all x.((LosesTime(x) & LateForWork(x)) -> LateForWork(x))", "all x.(LoseTime(x) -> LateForWork(x))"]}
{"id": "folio_train_2110", "nl": "Mary can get from New Haven to New York City either by train or car.", "fol": "((TravelByTrain(Mary) & -TravelByCar(Mary)) | (-TravelByTrain(Mary) & TravelByCar(Mary)))", "prediction": ["all x.((Maria(x) & NewHunt(x)) -> (Train(x) | Car(x)))", "all x.(Maria(x) -> (GetsFromNew HavenToNewYork(x) & (Train(x) | Car(x))))", "all x y.((Mother(x) & NewHunt(y)) -> (Train(x,y) | Car(x,y)))", "(GetsFromNew HavenToNewYorkCity(Mary,Train) | GetsFromNewYorkCity(Mary,Car))", "Mary can get from New Haven to New York City either by train or car.", "(Train(Mary) | Car(Mary))", "all x y.((Mama(x) & NewHunt(y)) -> (Train(x,y) | Car(x,y)))", "all x y z.((Maria(x) & NewHunt(y) & NewYorkCity(z)) -> (Train(x,y) | Car(x,z)))", "(GetsFromNew HavenToNewYorkCity(Mary) & (Train(Mary) | Car(Mary)))", "(Maria(Maria) & NewHunt(Maria) & NewYorkCity(Maria))", "(all x.(Maria(x) -> (NewHaven(x) | NewYorkCity(y))))", "all x.(Maria(x) -> (CanGetFromNewHavenToNewYork(x) & (Train(x) | Car(x))))", "all x y.((Maria(x) & NewHaven(y) & NewYorkCity(y)) -> (Train(x,y) | Car(x,y)))", "all x.((Mary(x) & NewHaven(x)) -> (Train(x) | Car(x)))", "All x.(MariaCanGetFromNewHavenToNewYorkCity(x) -> (Train(x) | Car(x)))", "All x.(Mary(x) -> (Train(x) | Car(x)))"]}
{"id": "folio_train_2111", "nl": "Mary is late for work.", "fol": "IsLateForWork(Mary)", "prediction": ["all x.(Mary(x) -> LateForWork(x))", "(LastForWork(Mary))", "Mary is late for work.", "Mary is lateForWork(Mary)", "(Late(Mary) & Work(Mary))", "all x.(Mary(x) -> LateForWork(x))", "(LastForWork(Mary))", "-LastForWork(Mary,Maria)", "Mary is LateForWork(Mary)", "(LastForWork(Mary,Mary))", "(LateForWork(Mary))", "all x.(Mary(x) -> LateForWork(x))", "Mary is late for work.", "exists x.(Maria(x) & LateForWork(x))", "Mary is LateForWork(Mary)", "all x.(Mary(x) -> LateForWork(x))"]}
{"id": "folio_train_2112", "nl": "Mary gets from New Haven to New York City by train.", "fol": "TravelByTrain(Mary)", "prediction": ["all x y.((Mother(x) & NewHunt(y) & NewYorkCity(y)) -> GetsByTrain(x,y))", "Mary gets from New Haven to New York City by train.", "all x.((Maria(x) & NewHunt(x) & NewYorkCity(y)) -> Train(x))", "(GetsFromNew HavenToNewYorkCity(Mary,Train))", "(Train(Mary) & NewHunt(Mary))", "all x y.((Mama(x) & NewHunt(y) & NewYorkCity(y)) -> GetsByTrain(x,y))", "(Train(Mary,NewHaven) & NewYorkCity(Mary,NewHaven))", "all x y z.((Mother(x) & NewHunt(y) & NewYorkCity(z)) -> GetsByTrain(x,y,z))", "(GivesFromNewHavenToNewYorkCity(Mary,Train))", "All x.(Maria(x) -> (GetsFromNew HavenToNewYork(x) & Train(x)))", "all x.((Mary(x) & NewHaven(x) & NewYorkCity(y)) -> GetsByTrain(x,y))", "(Train(Maria,New Haven) & NewYorkCity(Maria,NewYork))", "Mary gets from New Haven to New York City by train.", "(GetsFromNew HavenToNewYorkCity(Mary,Train))", "Mary gets from New Haven to New York City by train.", "Mary gets from New Haven to New York City by Train."]}
{"id": "folio_train_2113", "nl": "Mary gets from New Haven to New York City by car.", "fol": "TravelByCar(Mary)", "prediction": ["all x y.((Mother(x) & NewHunt(y) & NewYorkCity(y)) -> GetsByCar(x,y))", "(GetsFromNew HavenToNewYorkCity(Mary,Car))", "Mary gets from New Haven to New York City by Car.", "all x.((Mary(x) & NewHunt(x)) -> NewYorkCity(x))", "(GivesFromNewHavenToNewYorkCity(Mary,Car))", "(Gives(Mary,NewHaven,NewYork) & Car(Mary,NewYork))", "all x.((Maria(x) & NewHaven(x) & NewYorkCity(y)) -> GetsByCar(x,y))", "all x y.((Mary(x) & NewHaven(y)) -> GetsByCar(x,y))", "All x.(Maria(x) -> (GetsFromNew HavenToNewYorkCity(x) & Car(x)))", "-(MariaGivesFromNewHavenToNewYorkCity(Maria))", "Mary gets from New Haven to New York City by car.", "(GetsFromNew HavenToNewYorkCity(Mary))", "Mary GetsFromNewHavenToNewYorkCityByCar(Mary,NewHaven)", "Mary gets from New Haven to New York City by Car(Mary)", "(GetsFromNew HavenToNewYorkCity(Mary,Car))", "Mary gets from New Haven to New York City by car."]}
{"id": "folio_train_2114", "nl": "Mary meets traffic jam.", "fol": "EncounterTrafficJam(Mary)", "prediction": ["all x.(Mary(x) -> MeetsTrafficJam(x))", "(MariaMeetsTrafficJam(Mary))", "Mary meetsTrafficJam(Mary)", "(MatchesTrafficJam(Maria) & Meets(Maria,TrafficJam))", "(MeetsTrafficJam(Maria))", "-MeetsTrafficJam(Mary)", "(MovesTrafficJam(Maria) & Meets(Maria,TrafficJam))", "Mary MeetsTrafficJam(Mary)", "all x y.((Mary(x) & TrafficJam(y)) -> Meets(x,y))", "exists x.(Mary(x) & MeetsTrafficJam(x))", "Mary meets TrafficJam(Mary)", "Mary meetsTrafficJam(Mary)", "(MameToTrafficJam(Mary))", "exists x.(Mary(x) & TrafficJam(x))", "all x.(Mother(x) -> MeetsTrafficJam(x))", "exists x.(Mary(x) & MeetsTrafficJam(x))"]}
{"id": "folio_train_2115", "nl": "If a person is hungry, the person is uncomfortable.", "fol": "all x.(IsHungry(x) -> IsUncomfortable(x))", "prediction": ["all x.(Hungry(x) -> Uncomfortable(x))", "all x.((Person(x) & Hungry(x)) -> Uncomfortable(x))", "all x.(Hungry(x) -> Uncomfortable(x))", "all x y.((Person(x) & Hungry(x)) -> Uncomfortable(x))", "all x.((Person(x) & Hungry(x)) -> Uncomfortable(x))", "all x.(Hungry(x) -> Uncomfortable(x))", "all x y.((Person(x) & Hungry(x)) -> Uncomfortable(x))", "all x.(Hunger(x) -> Uncomfortable(x))", "all x.((Person(x) & Hungry(x)) -> Uncomfortable(x))", "all x y.((Person(x) & Hungry(x)) -> Uncomfortable(y))", "all x.(Hungry(x) -> Uncomfortable(x))", "all x y.((Person(x) & Hungry(x)) -> Uncomfortable(x,y))", "exists x.(Hungry(x) & Person(x) & Uncomfortable(x))", "all x.((Person(x) & Hungry(x)) -> Uncomfortable(x))", "all x.(Hungry(x) -> Uncomfortable(x))", "all x.(Hungry(x) -> Uncomfortable(x))"]}
{"id": "folio_train_2116", "nl": "If a person is uncomfortable, the person is unhappy.", "fol": "all x.(IsUncomfortable(x) -> -IsHappy(x))", "prediction": ["all x.(Uncomfortable(x) -> Unhappy(x))", "all x.((Person(x) & Uncomfortable(x)) -> Unhappy(x))", "all x.(Uncomfortable(x) -> Unhappy(x))", "all x y.((Person(x) & Uncomfortable(x)) -> Unhappy(x))", "all x.((Person(x) & Uncomfortable(x)) -> Unhappy(x))", "all x.(Uncomfortable(x) -> Unhappy(x))", "all x y.((Person(x) & Uncomfortable(x)) -> Unhappy(y))", "exists x.(Person(x) & Uncomfortable(x) & Unhappy(x))", "all x.((Person(x) & Uncomfortable(x)) -> Unhappy(x))", "all x y.((Person(x) & Uncomfortable(x)) -> Unhappy(y))", "all x.(Uncomfortable(x) -> Unhappy(x))", "all x.((Person(x) & Uncomfortable(x)) -> Unhappy(x))", "all x.(Uncomfortable(x) -> Unsatisfied(x))", "all x.(Uncomfortable(x) -> Unhappy(x))", "all x.((Person(x) & Uncomfortable(x)) -> Unsatisfied(x))", "all x.(Uncomfortable(x) -> Unhappy(x))"]}
{"id": "folio_train_2117", "nl": "If a person is not hungry, the person is unhappy.", "fol": "all x.(-IsHungry(x) -> -IsHappy(x))", "prediction": ["all x.((Person(x) & -Hungry(x)) -> Unhappy(x))", "all x.((Person(x) & -Hungry(x)) -> Unhappy(x))", "(-Hungry(person) -> Unhappy(person))", "all x y.((Person(x) & -Hungry(x)) -> Unhappy(y))", "all x.((Person(x) & -Hungry(x)) -> Unhappy(x))", "all x y.((Person(x) & -Hungry(x)) -> Unhappy(x,y))", "all x.((Person(x) & -Hungry(x)) -> Unhappy(x))", "all x.(Hungry(x) -> Unhappy(x))", "all x.(-Hungry(x) -> Unhappy(x))", "all x y.((Person(x) & -Hungry(x)) -> Unhappy(y))", "all x.((Person(x) & -Hungry(x)) -> Unhappy(x))", "all x.((Person(x) & -Hungry(x)) -> Unsatisfied(x))", "all x.(Hungry(x) -> Unhappy(x))", "all x.((Person(x) & -Hungry(x)) -> Unhappy(x))", "all x.((Person(x) & -Hungry(x)) -> Unsatisfied(x))", "all x.(Hungry(x) -> Unhappy(x))"]}
{"id": "folio_train_2118", "nl": "Tipped employees do not get a guaranteed minimum wage.", "fol": "all x.(IsTippedEmployee(x) -> -ReceivesMinWage(x))", "prediction": ["all x.(TippedEmployee(x) -> -GanitedMinimumWage(x))", "all x y.((TippedEmployee(x) & Employee(y)) -> -GatheredMinimumWage(x,y))", "(-GatheredMinimumWage(tippedEmployee))", "all x.(Tipped(x) -> -GatheredMinimumWage(x))", "all x.(TippedEmployee(x) -> -GatheredMinimumWage(x))", "all x.(TippedEmployee(x) -> -GetsGaranteedMinimumWage(x))", "all x.((Employee(x) & Tipped(x)) -> -GanitedMinimumWage(x))", "(all x.(TippedEmployee(x) -> -GatheredMinimumWage(x)))", "all x y.((TippedEmployee(x) & Employee(y)) -> -GanitedMinimumWage(x,y))", "all x.(Tipped(x) -> -GanitedMinimumWage(x))", "all x.(TippedEmployee(x) -> -GaranteedMinimumWage(x))", "all x y.((TippedEmployee(x) & Employee(y)) -> -GetsGaranteedMinimumWage(x,y))", "all x y.((TippedEmployee(x) & Employee(y)) -> -GaranteedMinimumWage(x,y))", "all x.(TippedEmployee(x) -> -GuaranteedMinimumWage(x))", "all x.(TippedEmployee(x) -> -GrantedMinimumWage(x))", "all x.(TippedEmployee(x) -> -GetsGaranteedMinimumWage(x))"]}
{"id": "folio_train_2119", "nl": "If a person is a white-collar worker, they will get a guaranteed minimum wage (All white-collar workers get a guaranteed minimum wage).", "fol": "all x.(IsWhiteCollarWorker(x) -> ReceivesMinWage(x))", "prediction": ["all x.(WhiteCollarWorker(x) -> GuaranteedMinimumWage(x))", "(all x.(WhiteCollarWorker(x) -> GuaranteedMinimumWage(x)))", "all x.(WhiteCollarWorker(x) -> GuaranteedMinimumWage(x))", "all x y.((Person(x) & WhiteCollarWorker(x)) -> GuaranteedMinimumWage(x,y))", "(all x.(WhiteCollarWorker(x) -> GuaranteedMinimumWage(x)))", "all x.(WhiteCollarWorker(x) -> (GetsGaranteedMinimumWage(x) & AllWhiteCollarWorkersGetGaranteedMinimumWage(x)))", "all x.(WhiteCollarWorker(x) -> GuaranteedMinimumWage(x))", "(All x.(WhiteCollarWorker(x) -> GuaranteedMinimumWage(x)))", "all x.(WhiteCollarWorker(x) -> GuaranteedMinimumWage(x))", "all x.(WhiteCollarWorker(x) -> (GuaranteedMinimumWage(x) & AllWhiteCollarWorkersGetGuaranteedMinimumWage(x)))", "all x.(WhiteCollarWorker(x) -> GetsGaranteedMinimumWage(x))", "(all x.(WhiteCollarWorker(x) -> GuaranteedMinimumWage(x)))", "all x.(WhiteCollarWorker(x) -> GuaranteedMinimumWage(x))", "all x.(WhiteCollarWorker(x) -> GetsGarantiedMinimumWage(x))", "all x.(WhiteCollarWorker(x) -> GuaranteedMinimumWage(x))", "all x.(WhiteCollarWage(x) -> GuaranteedMinimumWage(x))"]}
{"id": "folio_train_2120", "nl": "All lawyers are white-collar workers.", "fol": "all x.(IsLawyer(x) -> IsWhiteCollarWorker(x))", "prediction": ["all x.(Lawyer(x) -> WhiteCollarWorker(x))", "all x.(Lawyer(x) -> WhiteCollarWorker(x))", "(all x.(Lawyer(x) -> WhiteCollarWorker(x)))", "all x y.((Lawyer(x) & WhiteCollarWorker(y)) -> Worker(x,y))", "all x.(Legal(x) -> WhiteCollarWorker(x))", "all x.(Lawyer(x) -> WhiteCollarWorker(x))", "(all x.(Lawyer(x) -> WhiteCollarWorker(x))", "all x.(Lawyer(x) -> WhiteCollarWorker(x))", "all x.(Legal(x) -> WhiteCollarWorker(x))", "all x.(Lawyer(x) -> WhiteCollarWorker(x))", "all x.(Legal(x) -> WhiteCollarWorker(x))", "all x.(Lawyer(x) -> WhiteCollarWorker(x))", "all x.(Lawyer(x) -> WhiteCollarWorker(x))", "all x.(Litigation(x) -> WhiteCollarWorker(x))", "all x.(Lawyer(x) -> WhiteCollarWorker(x))", "all x.(Lawyer(x) -> WhiteCollarWorker(x))"]}
{"id": "folio_train_2121", "nl": "Every advocate is a lawyer.", "fol": "all x.(IsAdvocate(x) -> IsLawyer(x))", "prediction": ["all x.(Advocate(x) -> Lawyer(x))", "all x.(Advocate(x) -> Lawyer(x))", "all x.(Advocate(x) -> Lawyer(x))", "all x.(Advocate(x) -> Lawyer(x))", "all x.(Advocate(x) -> Lawyer(x))", "exists x y.(Advocate(x) & Lawyer(y))", "exists x y.(Advocate(x) & Lawyer(y) & Advocate(x))", "all x.(Advocate(x) -> Lawyer(x))", "all x.exists y.(Advocate(x) & Lawyer(y))", "all x.(Advocate(x) -> Lawyer(x))", "all x.(Avocate(x) -> Lawyer(x))", "all x.(Advocate(x) -> Lawyer(x))", "all x.(Advocate(x) -> Lawyer(x))", "exists x.(Advocate(x) & Lawyer(x))", "all x.(Avocate(x) -> Lawyer(x))", "all x.(Advocate(x) -> Lawyer(x))"]}
{"id": "folio_train_2122", "nl": "Mary is not a lawyer or a tipped employee.", "fol": "((-IsLawyer(Mary) & -IsTippedEmployee(Mary)) | (IsLawyer(Mary) & IsTippedEmployee(Mary)))", "prediction": ["(-Lawyer(Mary) & -TippedEmployee(Mary))", "all x.(Mary(x) -> (-Lawyer(x) | TippedEmployee(x)))", "-(Lawyer(Mary) | TippedEmployee(Mary)))", "Mary is not a lawyer or tippedEmployee(Mary)", "(-Lawyer(Mary) & -TippedEmployee(Mary))", "all x.(Mary(x) -> (-Lawyer(x) | TippedEmployee(x)))", "all x.(Mary(x) -> (-Lawyer(x) & -TippedEmployee(x)))", "-(Lawyer(Mary) | TippedEmployee(Mary)))", "Mary is not a lawyer or tippedEmployee(Mary)", "exists x.(Maria(x) & -(Lawyer(x) | TippedEmployee(x))))", "(-Lawyer(Mary) & -TippedEmployee(Mary))", "-(Lawyer(Mary) | TippedEmployee(Mary))", "all x.(Mary(x) -> (-Lawyer(x) | TippedEmployee(x)))", "(-Lawyer(Mary) & -TippedEmployee(Mary))", "-(Lawyer(Mary) | TippedEmployee(Mary))", "(-Lawyer(Mary) & -TippedEmployee(Mary))"]}
{"id": "folio_train_2123", "nl": "Mary is a white-collar worker.", "fol": "IsWhiteCollarWorker(Mary)", "prediction": ["all x.(WhiteCollarWorker(x) -> Mary(x))", "(WhiteCollarWorker(Mary) & WorksIn(Mary,WhiteCollar))", "Mary is WhiteCollarWorker(Mary)", "all x.(WhiteCollarWorker(x) -> Mary(x))", "Mary is whitecollarWorker(Mary)", "(WhiteCollarWorker(Mary) & Worker(Mary))", "Mary is a WhiteCollarWorker(Mary)", "(WhiteCollarWorker(Mary) & WorksIn(Mary,WhiteCollar))", "all x.(Mary(x) -> WhiteCollarWorker(x))", "all x.(WhiteCollarWorker(x) -> Mary(x))", "Mary is WhiteCollarWorker(Mary)", "Mary is whitecollarWorker(Mary)", "all x.(WhiteCollarWorker(x) -> Mary(x))", "(WhiteCollarWorker(Mary)", "all x.(WhiteCollarWorker(x) -> Mary(x))", "(WhiteCollarWorker(Mary)"]}
{"id": "folio_train_2124", "nl": "Mary is an advocate.", "fol": "IsAdvocate(Mary)", "prediction": ["Mary is advocate.", "all x.(Advocate(x) -> Mary(x))", "(Avocate(Mary)", "(Advocate(Mary)", "-Advocate(Mary)", "All x.(Avocate(x) -> Mary(x))", "Mary is advocate.", "Mary is an advocate.", "(Avocate(Mary)", "(Advocate(Mary)", "Mary is Advocate(Mary)", "all x.(Advocate(x) -> Mary(x))", "Mary is advocate.", "Mary is an advocate.", "(Avocate(Mary)", "Mary is advocate."]}
{"id": "folio_train_2125", "nl": "Mary is not an advocate.", "fol": "-IsAdvocate(Mary)", "prediction": ["-Advocate(Mary)", "Mary is notAdvocate(Mary)", "(-Advocate(Mary))", "(Advocate(Mary) & -Advocate(Mary))", "Mary n'est pas advocate.", "Mary is notAdvocate(Mary)", "-Advocate(Maria)", "-(Advocate(Maria) & -Advocate(Maria))", "Mary is notAdvocate(Mary)", "(-Advocate(Mary))", "\u2013 Advocate(Mary)", "(-Avocate(Mary))", "-Advocate(Maria)", "Mary is notAdvocate(Mary)", "(-Advocate(Mary))", "-Advocate(Maria)"]}
{"id": "folio_train_2126", "nl": "Mary is either an advocate or a tipped employee.", "fol": "(IsAdvocate(Mary) | IsTippedEmployee(Mary))", "prediction": ["all x.(Mary(x) -> (Advocate(x) | TippedEmployee(x)))", "(Advocate(Mary) | TippedEmployee(Mary))", "all x.(Advocate(x) | TippedEmployee(x))", "all x.(Mary(x) -> (Advocate(x) | TippedEmployee(x)))", "(Advocate(Mary) | TippedEmployee(Mary))", "exists x.(Advocate(x) | TippedEmployee(x))", "all x y.((Mary(x) & Advocate(y)) | TippedEmployee(y)) -> (TippedEmployee(x,y) & TippedEmployee(x,y)))", "all x.(Mary(x) -> (Advocate(x) | TippedEmployee(x)))", "(Avocate(Mary) | TippedEmployee(Mary))", "(Advocate(Mary) | TippedEmployee(Mary))", "all x.(Mary(x) -> (Avocate(x) | TippedEmployee(x)))", "exists x.(Advocate(x) | TippedEmployee(x))", "(Advocate(Mary) | TippedEmployee(Mary))", "all x.(Maria(x) -> (Advocate(x) | TippedEmployee(x)))", "exists x.(Advocate(x) | TippedEmployee(x))", "exists x.(Advocate(x) | TippedEmployee(x))"]}
{"id": "folio_train_2127", "nl": "If Mary is not an advocate and gets a guaranteed minimum wage, she is not a tipped employee.", "fol": "((-IsAdvocate(Mary) & ReceivesMinWage(Mary)) -> -IsTippedEmployee(Mary))", "prediction": ["all x.((Advocate(x) & -Advocate(x) & GuaranteedMinimumWage(x)) -> -TippedEmployee(x))", "all x.((Mary(x) & -Advocate(x) & GuaranteedMinimumWage(x)) -> -TippedEmployee(x))", "all x.((Advocate(x) & GuaranteedMinimumWage(x)) -> -TippedEmployee(x))", "(-Advocate(Mary) & GuaranteedMinimumWage(Mary)) -> -TippedEmployee(Mary))", "all x y.((Advocate(x) & -Advocate(x) & GuaranteedMinimumWage(x)) -> -TippedEmployee(y))", "all x.((Mary(x) & -Advocate(x) & GuaranteedMinimumWage(x)) -> -TippedEmployee(x))", "all x.((Advocate(x) & -Advocate(x) & GuaranteedMinimumWage(x)) -> -TippedEmployee(x))", "(-Advocate(Mary) & GuaranteedMinimumWage(Mary)) -> -TippedEmployee(Mary))", "all x.((Maria(x) & -Advocate(x) & GuaranteedMinimumWage(x)) -> -TippedEmployee(x))", "all x.((Advocate(x) & GuaranteedMinimumWage(x)) -> -TippedEmployee(x))", "all x.((Avocate(x) & -Advocate(x) & GuaranteedMinimumWage(x)) -> -TippedEmployee(x))", "all x.((Mary(x) & -Advocate(x) & GuaranteedMinimumWage(x)) -> -TippedEmployee(x))", "(-Advocate(Mary) & GuaranteedMinimumWage(Mary)) -> -TippedEmployee(Mary))", "all x.((Mary(x) & -Advocate(x) & GuaranteedMinimumWage(x)) -> -TippedEmployee(x))", "all x.((Advocate(x) & -Advocate(x) & GuaranteedMinimumWage(x)) -> -TippedEmployee(x))", "all x.((Mary(x) & -Advocate(x) & GuaranteedMinimumWage(x)) -> -TippedEmployee(x))"]}
{"id": "folio_train_2128", "nl": "If Mary is either an advocate or a tipped employee, she is an advocate.", "fol": "((IsAdvocate(Mary) | IsTippedEmployee(Mary)) -> IsAdvocate(Mary))", "prediction": ["all x.((Advocate(x) | TippedEmployee(x)) -> Advocate(x))", "all x.((Mary(x) & Advocate(x)) | TippedEmployee(x)) -> Advocate(x))", "all x.((Advocate(x) | TippedEmployee(x)) -> Advocate(x))", "(Advocate(Mary) | TippedEmployee(Mary)))", "all x y.((Advocate(x) | TippedEmployee(x)) -> Advocate(x))", "all x.((Mary(x) & (Advocate(x) | TippedEmployee(x))) -> Advocate(x))", "all x.(Advocate(x) | TippedEmployee(x))", "(all x.((Advocate(x) | TippedEmployee(x))) -> Advocate(x))", "all x.((Advocate(x) | TippedEmployee(x)) -> Advocate(x))", "all x.((Advocate(x) | TippedEmployee(x)) -> Advocate(x))", "all x.(Advocate(x) | TippedEmployee(x))", "all x.((Advocate(x) | TippedEmployee(x)) -> Advocate(x))", "all x.(Advocate(x) | TippedEmployee(x))", "all x.((Advocate(x) | TippedEmployee(x)) -> Advocate(x))", "exists x.(Advocate(x) | TippedEmployee(x))", "all x.((Advocate(x) | TapedEmployee(x)) -> Advocate(x))"]}
{"id": "folio_train_2129", "nl": "Asa Hoffmann was born in New York City.", "fol": "BornInLocation(AsaHoffmann,Newyorkcity)", "prediction": ["Asa Hoffmann was born in New York City.", "All x.(Hoffman(x) -> BornInNewYork(x))", "(Birth(Asa Hoffmann,NewYork))", "All x.(AsaHoffman(x) -> BornInNewYork(x))", "-Birth(Asa Hoffmann,NewYorkCity)", "Asa Hoffmann was born in New York City.", "(Birth(Asa Hoffmann) & BornInNewYork(Asa Hoffmann))", "Asa Hoffmann (bornInNewYork(a) & NewYork(b))", "All x.(Hoffman(x) -> BornInNewYork(x))", "Asa Hoffmann was born in New York City.", "Asa Hoffmann (bornInNewYork(a) & NewYork(b))", "Asa Hoffmann (bornInNewYorkCity(a) & BornInNewYork(a))", "Asa Hoffmann was born in New York City.", "Asa Hoffmann was born in New York City.", "Asa Hoffmann was born in New York City.", "Asa Hoffmann was born in New York City."]}
{"id": "folio_train_2130", "nl": "Asa Hoffman lives in Manhattan.", "fol": "LivesInLocation(AsaHoffmann,Manhattan)", "prediction": ["Asa Hoffman lives in Manhattan.", "All x.(AsaHoffman(x) -> LivesIn(x,Miami))", "All x.(Hoffman(x) -> LivesIn(x,Miami))", "(LivingIn(Asa Hoffman,New York))", "-LivingIn(Asa Hoffman,New York)", "Asa Hoffman lives in Manhattan.", "Asa Hoffman & LivesIn(Asa,Miami)", "All x.(AsaHollow(x) -> LivesIn(x,Metropolitan))", "AsaHollowLisesIn(Asa,New York)", "Asa Hoffman lives in Manhattan.", "AsaHoffmanLisesIn(AsaHoffman,New York)", "(LivingIn(Asa Hoffman,New York))", "Asa HoffmanLisesIn(AsaHoffman,New York)", "Asa Hoffman lebt in Manhattan.", "Asa Hoffman lives in Manhattan.", "Asa Hoffman lives in Manhattan."]}
{"id": "folio_train_2131", "nl": "Asa Hoffman is a chess player.", "fol": "IsChessPlayer(AsaHoffmann)", "prediction": ["Asa Hoffman is a chess player.", "All x.(Hoffman(x) -> ChessPlayer(x))", "(ChessPlayer(Asa Hoffman)", "(ChessPlayer(AsaHoffman) & PlaysChess(AsaHoffman))", "Asa Hoffman is a chessplayer.", "all x.(ChestPlayer(x) -> AsaHollow(x))", "All x.(Hoffman(x) -> ChessPlayer(x))", "asaholm.(ChessPlayer(a))", "Asa Hoffman is a chess player.", "Asa Hoffman is a ChessPlayer.", "(ChessPlayer(Asa Hoffman)", "Asa Hoffman (ChessPlayer)", "Asa Hoffman is chessplayer.", "(ChessPlayer(AsaHollow)", "Asa Hoffman is a chessplayer.", "Asa Hoffman is chess player."]}
{"id": "folio_train_2132", "nl": "Some chess players are grandmasters.", "fol": "exists x.(IsChestPlayer(x) & IsGrandmaster(x))", "prediction": ["exists x.(ChessPlayer(x) & Grandmaster(x))", "exists x.(ChessPlayer(x) & GrandMaster(x))", "exists x y.(ChessPlayer(x) & Grandmaster(y))", "exists x.(ChessPlayer(x) & Grandmaster(x))", "exists x.(ChestsPlayer(x) & Grandmaster(x))", "exists x.(ChessPlayer(x) & Grandmaster(x))", "exists x.(ChessPlayer(x) & GrandMaster(x))", "exists x y.(ChessPlayer(x) & Grandmaster(y))", "exists x.(ChestyPlayer(x) & GrandMaster(x))", "exists x.(ChessPlayer(x) & GrandMaster(x))", "exists x y.(ChessPlayer(x) & GrandMaster(y))", "exists x.(ChestyPlayer(x) & Grandmaster(x))", "exists x.(ChessPlayer(x) & Grandmaster(x))", "exists x.(ChessPlayer(x) & GrandMaster(x))", "exists x.(ChestnutPlayer(x) & GrandMaster(x))", "exists x.(ChessPlayer(x) & Grandmaster(x))"]}
{"id": "folio_train_2133", "nl": "People born and living in New York City are New Yorkers.", "fol": "all x.((BornInLocation(x,Newyorkcity) & LivesInLocation(x,Newyorkcity)) -> IsNewYorker(x))", "prediction": ["all x.((Birth(x) & LivesInNewYork(x)) -> NewYorker(x))", "all x.((Person(x) & BornInNewYork(x) & LivesInNewYork(x)) -> NewYorker(x))", "all x.(NewYorkCity(x) -> NewYorker(x))", "all x.((PeopleBornInNewYork(x) & LivesInNewYork(x)) -> NewYorker(x))", "all x.(NewYork(x) -> (Birth(x,NewYork) & LivesIn(x,NewYork)))", "all x y.((Person(x) & BornInNewYork(x) & LivesInNewYork(x)) -> NewYorker(y))", "all x.((Birth(x) & LivesInNewYork(x)) -> NewYorker(x))", "all x.((Person(x) & BornInNewYork(x) & LivesInNewYork(x)) -> NewYorker(x))", "all x y.((Person(x) & BornInNewYork(x,y) & LivesInNewYork(x,y)) -> NewYorker(x))", "all x y.((Birth(x) & NewYorkCity(y) & BornIn(x,y) & LivingIn(x,y)) -> NewYorker(x))", "all x y.((Person(x) & BornIn(x,y) & NewYork(y)) -> NewYorker(x))", "All x.((Person(x) & BornInNewYork(x) & LivingInNewYork(x)) -> NewYorker(x))", "all x.(NewYorkCity(x) -> NewYorker(x))", "all x y.((People(x) & BornInNewYork(x) & LivingInNewYork(x)) -> NewYorker(y))", "All x.(NewYork(x) -> BornAndLivesIn(x,NewYork))", "all x.((Birth(x) & LivingInNewYork(x)) -> NewYorker(x))"]}
{"id": "folio_train_2134", "nl": "People liviing in Manhattan live in New York City.", "fol": "all x.(LivesInLocation(x,Manhattan) -> LivesInLocation(x,Newyorkcity))", "prediction": ["all x.((Person(x) & LivesInNewYork(x)) -> LivesIn(x,NewYork))", "all x y.((Person(x) & LivesIn(x,y) & Manhattan(y)) -> LivesIn(x,y))", "all x.(LivingInMetropolitan(x) -> LivesInNewYorkCity(x))", "all x.((PeopleLivingInMetropolitan(x) & LivesInNewYorkCity(x)) -> LivesIn(x,NewYorkCity))", "all x.((Person(x) & LivesInNewYork(x)) -> LivesIn(x,NewYork))", "all x y.((Person(x) & LivesIn(x,y) & Manhattan(y)) -> LivesIn(x,y))", "all x y.((People(x) & LivesIn(x,y) & Manhattan(y)) -> LivesIn(x,y))", "all x.(LivesInNewYork(x) -> LivesInMetropolitan(x))", "all x y.((Person(x) & LivesInNewYork(x)) -> LivesIn(x,y))", "all x.(LivingInMennis(x) -> LivesInNewYork(x))", "all x y z.((Person(x) & Manhattan(y) & NewYork(z) & LivesIn(x,y,z)) -> LivesIn(x,y,z))", "exists x.(PeopleLivingInMetropolitan(x) & LivesInNewYorkCity(x))", "all x y.((LivingIn(x,y) & Manhattan(y)) -> LivesInNewYork(x,y))", "All x.((Person(x) & LivesInNewYorkCity(x)) -> LivesIn(x,NewYorkCity))", "all x.(LiviingInMetropolitan(x) -> LivesInNewYorkCity(x))", "all x y.((Person(x) & LivesIn(x,y)) -> LivesIn(x,y))"]}
{"id": "folio_train_2135", "nl": "Asa Hoffmann is a New Yorkers.", "fol": "IsNewYorker(AsaHoffmann)", "prediction": ["Asa Hoffmann is NewYorkers(AsaHoffman)", "All x.(Hoffman(x) -> NewYorkers(x))", "Asa Hoffmann is a NewYorker(AsaHoffman)", "All x.((AsaHoffman(x) & NewYorkers(x)) -> NewYorkers(x))", "(NewYorker(AsaHoffman) & NewYorker(AsaHoffman))", "(NewYorkers(Asa Hoffmann))", "All x.(Hollown(x) -> NewYorkers(x))", "Asa Hoffmann is NewYorker(a)", "All x.(Hoffman(x) -> NewYorkers(x))", "asahollown.com is NewYorkers(a)", "Asa Hoffmann (Nyc) & NewYorkers(Asa))", "Asa Hoffmann is a NewYorkers(AsaHoffman)", "Asa Hoffmann is NewYorkers(AsaHoffman)", "Asa Hoffmann is a NewYorker(a)", "Asa Hoffmann (Nyc) & NewYorker(Asa))", "Asa Hoffmann is NewYorker(a)"]}
{"id": "folio_train_2136", "nl": "Asa Hoffmann is a grandmaster.", "fol": "IsGrandmaster(AsaHoffmann)", "prediction": ["Asa Hoffmann is a grandmaster.", "All x.((AsaHoffman(x) & Grandmaster(x)) -> Grandmaster(x))", "(Grandmaster(Asa Hoffmann))", "all x.(Grandmaster(x) -> AsaHoffman(x))", "All x.((AsaHollown(x) & Grandmaster(x)) -> Grandmaster(x))", "Asa Hoffmann is a grandmaster.", "Asa Hoffmann is grandmaster.", "(Grandmaster(AsaHoffman))", "asahollown.com is a Grandmaster.", "all x.(Grandmaster(x) -> AsaHollown(x))", "All x.(Hoffman(x) -> Grandmaster(x))", "Asa Hoffmann is a grandmaster.", "Asa Hoffmann is grandmaster.", "(Grandmaster(Asa Hoffmann)", "Asa Hoffmann is a Grandmaster.", "Asa Hoffmann is grandmaster."]}
{"id": "folio_train_2137", "nl": "Asa Hoffmann does not live in New York.", "fol": "-LivesInLocation(AsaHoffmann,Newyorkcity)", "prediction": ["All x.(Hoffman(x) -> -LivesInNewYork(x))", "Asa Hoffmann -LivesInNewYork(Asa))", "Asa Hoffmann does not live in New York.", "(-LivesInNewYork(AsaHoffman))", "-LivingInNewYork(AsaHoffman)", "A.Hoffman(a) & -LivesInNewYork(a))", "All x.(Hollown(x) -> -LivesInNewYork(x))", "All x.(Hoffman(x) -> -LivesInNewYork(x))", "Asa Hoffmann -LivesInNewYork(AsaHoffman)", "Asa Hoffmann -LivingInNewYork(AsaHoffman))", "(-LivesInNewYork(Asa Hoffmann))", "-LivingInNewYork(Asa Hoffmann)", "Asa Hoffmann does not live in New York.", "Asa Hoffmann does not LiveInNewYork.", "Asa Hoffmann does not live in New York.", "Asa Hoffmann -LivesInNewYork."]}
{"id": "folio_train_2138", "nl": "Some of those who apply for a Schengen Visa get it.", "fol": "exists x.(ApplyForSchengenVisa(x) -> ReceiveSchengenVisa(x))", "prediction": ["exists x.(AppliesForSchengenVisa(x) & GetsVisa(x))", "exists x.(ApplicationForSchengenVisa(x) & Gets(x,y))", "all x y.((AppliesForSchengenVisa(x) & Visa(y)) -> Gets(x,y))", "exists x.(AppliesForSchengenVisa(x) & Gets(x))", "all x y.((ApplyForSpengenVisa(x) & AppliesForSpengenVisa(x)) -> GetsSpengenVisa(x))", "exists x.(ApplyForSpengenVisa(x) & GetsSpengenVisa(x))", "exists x.(ApplicationForSchengenVisa(x) & GetsVisa(x))", "exists x.(SpengenVisa(x) & AppliesFor(x,y))", "all x y.((ApplicationForSchengenVisa(x) & Applicant(y)) -> Gets(y,x))", "all x y.((AppliesForSchengenVisa(x) & Applicants(y)) -> GetsVisa(x,y))", "exists x.(AppliesForSchengenVisa(x) & GetsSchengenVisa(x))", "exists x.(ApplicationForSchengenVisa(x) & Gets(x))", "exists x.(Application(x) & SchengenVisa(x))", "exists x.(ApplysForSpengenVisa(x) & GetsSpengenVisa(x))", "exists x.(SpengenVisa(x) & AppliesFor(x,y))", "exists x.((AppliesForSchengenVisa(x) & GetsSchengenVisa(x))"]}
{"id": "folio_train_2139", "nl": "To apply for a Schengen Visa, you need to provide financial guarantees.", "fol": "all x.(ApplyForSchengenVisa(x) -> ProvideFinancialGuarantees(x))", "prediction": ["all x.((ApplyForSchengenVisa(x) & ProvideFinancialGaranties(x)) -> ProvidesFinancialGaranties(x))", "all x.((ApplicationForSchengenVisa(x) & FinancialGaranties(x)) -> Provides(x,y))", "(ApplyForSchengenVisa(x) & ProvideFinancialGaranties(x))", "all x.((ApplySpengenVisa(x) & ProvideFinancialGaranties(x)) -> NeedsFinancialGaranties(x))", "all x y.((ApplyForSchengenVisa(x) & FinancialGaranties(y)) -> Provides(x,y))", "all x.((ApplyForSchengenVisa(x) & ProvideFinancialGaranties(x)) -> NeedsFinancialGaranties(x))", "all x y.((Application(x) & SchengenVisa(y)) -> ProvidesFinancialGaranties(x,y))", "all x y.((ApplyForSchengenVisa(x) & FinancialGaranties(y)) -> Provides(x,y))", "all x.(ApplyForSchengenVisa(x) -> ProvidesFinancialGaranties(x))", "all x.(SpengenVisa(x) -> ProvidesFinancialGaranties(x))", "all x.((ApplyForSchengenVisa(x) & ProvideFinancialGaranties(x)) -> -ProvidesFinancialGaranties(x))", "all x y.((ApplySpengenVisa(x) & FinancialGaranties(y)) -> Provides(x,y))", "all x y.((ApplyForSpengenVisa(x) & FinancialGaranties(y)) -> Provides(x,y))", "all x.(ApplySpengenVisa(x) -> ProvidesFinancialGaranties(x))", "all x.(ApplyForSchengenVisa(x) -> ProvidesFinancialGaranties(x))", "all x.((ApplicationForSchengenVisa(x) & FinancialGaranties(x)) -> Provides(x,y))"]}
{"id": "folio_train_2140", "nl": "If you need to provide financial guarantees, you must request documents from the bank.", "fol": "all x.(ProvideFinancialGuarantees(x) -> RequestBankDocuments(x))", "prediction": ["all x.((Bank(x) & NeedsFinancialGaranties(x)) -> RequiresDocuments(x))", "all x y.((Bank(x) & Bank(y) & NeedsFinancialGaranties(x,y)) -> RequestsDocuments(x,y))", "all x.((Bank(x) & RequiresFinancialGaranties(x)) -> RequiresDocuments(x))", "all x y.((Bank(x) & Bank(y)) -> RequiresFinancialGaranties(x,y))", "all x.(FinancialGaranties(x) -> RequiresBankDocuments(x))", "all x.((Bank(x) & NeedsFinancialGaranties(x)) -> RequestsDocuments(x))", "all x y z.((Bank(x) & FinancialGarantie(y) & Document(z) & Requires(x,y,z)) -> Provides(x,y))", "(all x.(FinancialGaranties(x) -> RequestsFromBank(x)))", "(all x.(FinancialGarantie(x) -> RequestsFromBank(x)))", "all x y.((Bank(x) & FinancialGaranties(y)) -> RequiresDocuments(x,y))", "all x y.((Bank(x) & RequiresFinancialGaranties(x,y)) -> RequiresDocuments(x,y))", "all x.((Bank(x) & RequiresFinancialGaranties(x)) -> RequiresDocuments(x))", "all x.(ProvidesFinancialGaranties(x) -> RequestsBankDocuments(x))", "all x y.((Bank(x) & NeedsFinancialGaranties(x)) -> RequestsDocuments(y,x))", "all x.(FinancialGaranties(x) -> RequiresDocumentsFromBank(x))", "all x.((Bank(x) & NeedsFinancialGaranties(x)) -> RequiresDocuments(x))"]}
{"id": "folio_train_2141", "nl": "Do not close your bank account if you request documents from the bank.", "fol": "all x.(RequestBankDocuments(x) -> -CloseAccount(x))", "prediction": ["all x y.((BankAccount(x) & Bank(y) & RequestsDocuments(x,y)) -> -Close(x,y))", "all x.((BankAccount(x) & RequestsDocuments(x)) -> -Close(x))", "-CloseBankAccountIfRequestsDocuments(-CloseBankAccount(-CloseBankAccount(-CloseBankAccount(-CloseBankAccount(-CloseBankAccount(-CloseBankAccount(-CloseBankAccount(-CloseBankAccount(-CloseBankAccount(-CloseBankAccount(-CloseBankAccount(-CloseBankAccount(-CloseBankAccount(-CloseBankAccount(-CloseBankAccount(-CloseBankAccount(-CloseBankDocuments(-CloseBankDocuments(-CloseBank(-CloseBank(-CloseBank(-CloseBank(-CloseBank(-CloseBank(-CloseBank(-CloseBank(-CloseBank(-Close(Close(Close(Close(Close(Close(Close(Close(Close(Close(Close(Close(Close(Close(Close(Close(Close(Close)Close(Close)Close)Close)Close)Close)Close(Close)Close(Close)Close(CloseClose(CloseClose(CloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseC(CloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseC(CloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseCloseClose", "-CloseBankAccountIfRequestsDocuments(x))", "all x y z.((BankAccount(x) & BankRequest(y) & Documents(z) & -Close(x,y)) -> -Close(x,z))", "all x y.((BankAccount(x) & Bank(y) & RequestsDocuments(x,y)) -> -Close(x,y))", "all x y.((BankAccount(x) & RequestsDocuments(y)) -> -Close(x,y))", "all x.((BankAccount(x) & RequestsDocuments(x)) -> -Close(x))", "(-CloseBankAccount(x) & RequestsDocumentsFromBank(x))", "all x y.((BankAccount(x) & BankRequestsDocuments(y)) -> -Close(x,y))", "all x.((BankAccount(x) & RequiresDocuments(x)) -> -Close(x))", "(-CloseBankAccount(x) & RequestDocuments(x))", "all x.((BankAccount(x) & RequestsDocuments(x)) -> -Close(x))", "all x y.((BankAccount(x) & RequestsDocuments(y,x)) -> -Close(x,y))", "all x.((BankAccount(x) & RequestsDocumentsFromBank(x)) -> -Close(x))", "all x.((BankAccount(x) & RequiresDocumentsFromBank(x)) -> -Close(x))"]}
{"id": "folio_train_2142", "nl": "Philip closed his bank account.", "fol": "CloseAccount(Philip)", "prediction": ["Philip closed his bank account.", "all x.((Phillips(x) & BankAccount(x)) -> Closed(x))", "all x y z.((Pilot(x) & BankAccount(y) & BankAccount(z)) -> Closed(x,y,z))", "(ClosedBankAccount(Phillip)", "-ClosedBankAccount(Phillip)", "Philip closed his bank account.", "all x y z.((Phillips(x) & BankAccount(y) & BankAccount(z)) -> Closed(x,y,z))", "all x.((Phillips(x) & BankAccount(x)) -> Closed(x))", "(ClosedBankAccount(Phillip)", "-ClosedBankAccount(Phillip)", "Philip closed his bank account.", "all x.((Philip(x) & BankAccount(y)) -> Closed(x,y))", "Philip closed bank account.", "Philip closed his bank account.", "Philip closed his bank account.", "Philip closed his bank account."]}
{"id": "folio_train_2143", "nl": "Philip got a Schengen Visa.", "fol": "ReceiveSchengenVisa(Philip)", "prediction": ["all x.(Phillips(x) -> SchengenVisa(x))", "Philip got SchengenVisa.", "Philip hat SchengenVisa(Phillip)", "all x.(Phillip(x) -> SchengenVisa(x))", "(GasSchengenVisa(Phillip))", "all x.(Philip(x) -> GotSchengenVisa(x))", "Philip got a SchengenVisa.", "Philip got SchengenVisa.", "(HasSchengenVisa(Phillip))", "all x.(Phillips(x) -> SchengenVisa(x))", "Philip got SchengenVisa.", "(GaveSpengenVisa(Phillip))", "all x.(Pilot(x) -> GotSchengenVisa(x))", "Philip got a SchengenVisa.", "(HasSchengenVisa(Philip))", "Philip got SchengenVisa."]}
{"id": "folio_train_2144", "nl": "Philip applied for a Schengen Visa and got it.", "fol": "(ApplyForSchengenVisa(Philip) & ReceiveSchengenVisa(Philip))", "prediction": ["all x.(Pianist(x) -> (AppliedForSchengenVisa(x) & GotVisa(x)))", "all x y.((Phillips(x) & SchengenVisa(y)) -> (AppliedFor(x,y) & Got(x,y)))", "all x.((Phillips(x) & SchengenVisa(x)) -> Got(x))", "(AppliedForSchengenVisa(Phillip) & GotVisa(Phillip))", "Philip applied for SchengenVisa(Phillip) & GotVisa(Phillip))", "all x.(Phillips(x) -> (AppliedForSchengenVisa(x) & GotVisa(x)))", "all x y.((Pianist(x) & SchengenVisa(y)) -> (AppliedFor(x,y) & Got(x,y)))", "(AppliedForSpengenVisa(Phillip) & GotSpengenVisa(Phillip))", "(AppliedForSchengenVisa(Philip) & GotVisa(Philip))", "Philip (AppliedForSchengenVisa(Phillip) & GotVisa(Phillip))", "all x y.((Phillips(x) & SchengenVisa(y)) -> (AppliedFor(x,y) & Got(x,y)))", "Philip applied for SchengenVisa(Philippe)", "all x.(Pilot(x) -> (AppliedForSchengenVisa(x) & GotVisa(x)))", "Philip applied for SchengenVisa and got it.", "(AppliedForSpengenVisa(Phillip) & GotSpengenVisa(Phillip))", "(AppliedForSchengenVisa(Philippe) & GotVisa(Philippe))"]}
{"id": "folio_train_2145", "nl": "If Philip did not request documents from the bank or get a Schengen Visa, he didn\u2019t apply for a Schengen Visa.", "fol": "((-RequestBankDocuments(Philip) | ReceiveSchengenVisa(Philip)) -> -ApplyForSchengenVisa(Philip))", "prediction": ["all x.((Pilot(x) & -RequiresDocumentsFromBank(x) & -GetsSchengenVisa(x)) -> -AppliesForSchengenVisa(x))", "all x.((Pianist(x) & -RequiresDocumentsFromBank(x) & -GetsSchengenVisa(x)) -> -AppliesForSchengenVisa(x))", "all x.((Phillips(x) & -RequiresDocuments(x) & -GetsSchengenVisa(x)) -> -AppliesForSchengenVisa(x))", "all x y.((Pilot(x) & Bank(y) & -RequiresDocuments(x,y) & -GetsSchengenVisa(x)) -> -AppliesForSchengenVisa(x))", "all x.((Phillip(x) & -RequiresDocumentsFromBank(x) & -GetsSchengenVisa(x)) -> -AppliesForSchengenVisa(x))", "(-RequiresDocumentsFromBank(Phillip) | GetsSchengenVisa(Phillip)))", "(-RequestsDocumentsFromBank(Phillip) | GetsSchengenVisa(Phillip)))", "all x.((Pilot(x) & -RequestsDocuments(x) & -GetsSchengenVisa(x)) -> -AppliesForSchengenVisa(x))", "(-(RequestsDocumentsFromBank(Phillip) | GetsSchengenVisa(Phillip))) -> -AppliesForSchengenVisa(Phillip))", "all x.((Pianist(x) & -RequiresDocumentsFromBank(x) & -GetsSchengenVisa(x)) -> -AppliesForSchengenVisa(x))", "all x y.((Pilot(x) & Bank(y) & -RequiresDocuments(x,y) & -GetsSchengenVisa(x)) -> -AppliesForSchengenVisa(x))", "(-RequiresDocumentsFromBank(Phillip) | GetsSchengenVisa(Phillip)))", "all x.((Phillips(x) & -RequiresDocumentsFromBank(x) & -GetsSchengenVisa(x)) -> -AppliesForSchengenVisa(x))", "all x.((Phillip(x) & -RequiresDocumentsFromBank(x) & -GetsSchengenVisa(x)) -> -AppliesForSchengenVisa(x))", "all x y.((Phillips(x) & -RequestsDocuments(x,y) | GetsSchengenVisa(x,y)) -> -AppliesForSchengenVisa(x,y))", "all x.((Pilot(x) & (-RequestsDocumentsFromBank(x) | GetsSchengenVisa(x))) -> -AppliesForSchengenVisa(x))"]}
{"id": "folio_train_2146", "nl": "Some fears lead to anxiety.", "fol": "exists x.(LeadsToFear(x) & LeadsToAnxiety(x))", "prediction": ["exists x.(Fear(x) & LeadsToAngry(x))", "exists x.(Fear(x) & LeadsToAnxiety(x))", "exists x y.(Fear(x) & Fear(y) & LeadsTo(x,y))", "exists x.(Fear(x) & LeadsToAnxiety(x))", "exists x.(Fear(x) & LeadsToAngry(x))", "exists x y.(Fear(x) & Fear(y) & LeadsToAnxiety(x,y))", "exists x.(Fear(x) & LeadsToAnxiety(x))", "exists x.(Fear(x) & LeadsToAngry(x))", "exists x y.(Fear(x) & Fear(y) & LeadsTo(x,y))", "exists x.(Fear(x) & LeadsToAngry(x))", "exists x.(Fear(x) & LeadToAngry(x))", "exists x.(Favor(x) & LeadsToAngry(x))", "exists x.(Fear(x) & LeadsToAnxiety(x))", "exists x.(Fear(x) & LeadToAnxiety(x))", "exists x.(Fear(x) & LeadsToAngry(x))", "exists x.(Fear(x) & Anxiety(x))"]}
{"id": "folio_train_2147", "nl": "Some anxiety leads to terror.", "fol": "exists x.(LeadsToAnxiety(x) & LeadsToTerror(x))", "prediction": ["exists x.(Anxiety(x) & LeadsToTerror(x))", "exists x.(Angry(x) & LeadsToTerror(x))", "exists x.(Anxiety(x) & LeadsToTerror(x))", "exists x.(Anxiety(x) & LeadsToTerror(x))", "exists x.(Angry(x) & LeadsToTerror(x))", "exists x.(Angry(x) & LeadsToTerror(x))", "exists x y.(Anxiety(x) & Terror(y))", "exists x.(Anxiety(x) & LeadsToTerror(x))", "exists x y.(Angry(x) & Anxiety(y) & LeadsToTerror(x,y))", "exists x.(Angry(x) & LeadsToTerror(x))", "exists x y.(Anxiety(x) & Terror(y))", "exists x.(Anxiety(x) & LeadsToTerror(x))", "exists x.(Angry(x) & LeadsTo(x,Terror))", "exists x.(Anxiety(x) & LeadsToTerror(x))", "exists x.(Angry(x) & LeadsToTerror(x))", "exists x.(Anxiety(x) & LeadsToTerror(x))"]}
{"id": "folio_train_2148", "nl": "No fears lead to terror.", "fol": "-exists x.(LeadsToFear(x) & LeadsToTerror(x))", "prediction": ["-exists x.(Fear(x) & LeadsToTerror(x))", "all x.(Fear(x) -> -LeadsToTerror(x))", "all x.((Fear(x) & -LeadsToTerror(x)) -> -LeadsToTerror(x))", "-exists x.(Fear(x) & LeadsToTerror(x))", "all x.((Fear(x) & NoTerror(x)) -> -LeadsTo(x,Terror))", "(NoFearsLeadToTerror(x))", "all x.(FearsLeadToTerror(x) -> -LeadsToTerror(x))", "all x.(Fears(x) -> NoLeadsToTerror(x))", "-exists x.(Bereavement(x) & LeadsToTerror(x))", "-exists x.(Fear(x) & LeadsToTerror(x))", "all x.((Fear(x) & NoTerror(x)) -> -LeadsTo(x,terror))", "-exists x.(Fear(x) & LeadsTo(x,Terror))", "all x.(Fears(x) -> -LeadsToTerror(x))", "-exists x.(Fear(x) & LeadToTerror(x))", "-exists x.(Bereavement(x) & LeadsToTerror(x))", "-exists x.(Fear(x) & LeadsToTerror(x))"]}
{"id": "folio_train_2149", "nl": "The Great Lakes are Lake Superior, Lake Michigan, Lake Huron, Lake Erie, and Lake Ontario.", "fol": "all x.(IsGreatLake(x) -> (LakeSuperior(x) | LakeMichigan(x) | LakeHuron(x) | LakeErie(x) | LakeOntario(x)))", "prediction": ["(GreatLake(GreatLake) -> (LakeSuperior(GreatLake) | LakeMichigan(GreatLake) | LakeHuron(GreatLake) | LakeErie(GreatLake) | LakeOntario(GreatLake)))", "(GreatLake(GreatLake) -> (LakeSurvival(GreatLake) | LakeMichigan(GreatLake) | LakeHuron(GreatLake) | LakeErie(GreatLake) | LakeOntario(GreatLake)))", "all x.(GreatLake(x) -> (LakeSuperior(x) | LakeMichigan(x) | LakeHuron(x) | LakeErie(x) | LakeOntario(x)))", "(GreatLake(GreatLake) & (LakeSuperior(GreatLake) | Lake Michigan(GreatLake) | Lake Huron(GreatLake) | LakeErie(GreatLake) | LakeOntario(GreatLake)))", "(GreatLake(GreatLake,LakeSurvival) & GreatLake(GreatLake,LakeMichigan) & GreatLake(GreatLake,LakeHuron) & GreatLake(GreatLake,LakeErie) & GreatLake(LakeOntario))", "(GreatLake(x) & (LakeSuperior(x) | LakeMichigan(x) | LakeHuron(x) | LakeErie(x) | LakeOntario(x)))", "all x y.((GreatLake(x) & Lake(y)) -> (LakeSuperior(y) | LakeMichigan(y) | LakeHuron(y) | LakeErie(y) | LakeOntario(y)))", "all x.(GreatLake(x) -> (LakeSurvival(x) | LakeMichigan(x) | LakeHuron(x) | LakeErie(x) | LakeOntario(x)))", "all x y z.((GreatLake(x) & Lake(y) & Lake(z)) -> (LakeSuperior(x) | LakeMichigan(x) | LakeHuron(y) | LakeErie(z) | LakeOntario(z)))", "(GreatLake(x) -> (LakeSurvival(x) | LakeMichigan(x) | LakeHuron(x) | LakeErie(x) | LakeOntario(x)))", "(GreatLake(Lake) & (LakeSuperior(Lake) | LakeMichigan(Lake) | LakeHuron(Lake) | LakeErie(Lake) | LakeOntario(Lake)))", "all x.(GreatLake(x) -> (LakeSuperior(x) | Lake Michigan(x) | Lake Huron(x) | LakeErie(x) | LakeOntario(x)))", "(GreatLake(s) & LakeSurrounding(s) & LakeMichigan(s) & LakeHuron(s) & LakeErie(s) & LakeOntario(s))", "all x.(GreatLake(x) -> (LakeSuperior(x) | LakeMichigan(x) | LakeHuron(x) | LakeErie(x) | LakeOntario(x)))", "All x.(GreatLake(x) -> (LakeSurrounding(x) & LakeMichigan(x) & LakeHuron(x) & LakeErie(x) & LakeOntario(x)))", "All x.(GreatLake(x) -> (Land(x,Survival) | Land(x,Michigan) | Land(x,Huron) | Land(x,Erie) | Land(x,Ontario)))"]}
{"id": "folio_train_2150", "nl": "Some major settlements of Lake Erie are in NY, PA, OH, and MI.", "fol": "exists x y.(LakeErie(y) & MajorSettlementOfLake(x,y) & (LocatedIn(x,Ny) | LocatedIn(x,Pa) | LocatedIn(x,Oh) | LocatedIn(x,Mi)))", "prediction": ["exists x.(Standard(x) & LakeErie(x) & (NewYork(y) | PA(y) | Ohio(y) | MI(y)))", "(MajorStandardsOfLakeErie(NY) & MajorStandardsOfLakeErie(PA) & MajorStandardsOfLakeErie(OH) & MajorStandardsOfLakeErie(MI))", "(exists x.(Standard(x) & LakeErie(x)) & (NewYork(y) | PA(y) | Ohio(y) | MI(y)))", "exists x.(Standard(x) & (NewYork(x) | Pennsylvania(x) | Ohio(x) | MI(x)))", "exists x.(MajorStandard(x) & LakeErie(x) & In(x,NY) & In(x,PA) & In(x,OH) & In(x,MI))", "(exists x.(Standard(x) & LakeErie(x)) & (InNewYork(x) | InPast(x) | InOH(x) | InMiami(x)))", "all x y z.((Standard(x) & LakeErie(y) & (NY(z) | PA(z) | OH(z) | MI(z))) -> MajorStandard(x,y,z))", "exists x.((Standard(x) & LakeErie(x) & In(x,NY) & In(x,PA) & In(x,OH) & In(x,MI))", "exists x.(Standard(x) & (NewYork(x) | Pennsylvania(x) | Ohio(x) | MI(x)))", "exists x.(Standard(x) & LakeErie(x) & (NewYork(x) | Pennsylvania(x) | Ohio(x) | MI(x)))", "exists x.(Standard(x) & (In(x,NY) | In(x,PA) | In(x,OH) | In(x,Miami)))", "(exists x.(Standard(x) & LakeErie(y) & In(x,y)) & exists z.(Standard(z) & In(z,y)) & In(z,y)))", "exists x.(Standard(x) & MajorStandard(x) & LakeErie(x) & (NewYork(y) | PA(y) | Ohio(y) | MI(y)))", "all x y z.((Standard(x) & LakeErie(y) & (NewYork(z) | Pennsylvania(z) | Ohio(z) | MI(z))) -> MajorStandard(x,y,z))", "exists x.(Situation(x,y) & Settlement(y) & LakeErie(y) & In(x,y))", "exists x.(MajorSettlement(x) & LakeErie(x) & (NewYork(y) | Pennsylvania(y) | Ohio(y) | MI(y)))"]}
{"id": "folio_train_2151", "nl": "NY, PA, OH, MI are states in the US.", "fol": "(IsStateOf(Ny,Us) & IsStateOf(Pa,Us) & IsStateOf(Oh,Us) & IsStateOf(Mi,Us))", "prediction": ["(State(NY) | State(PA) | State(OH) | State(MI)))", "all x.((State(x) & (NY(x) | PA(x) | OH(x) | MI(x))) -> USState(x))", "(State(NY) & State(PA) & State(OH) & State(MI))", "((NewYork(NY) | Pennsylvania(NY) | Ohio(OH) | MI(MI)) -> StatesInUS(NY,PA,OH))", "all x.((State(x) & (NewYork(y) | PA(y) | Ohio(y) | MI(y))) -> USState(x))", "all x y.((State(x) & State(y)) -> (NewYork(x) | PA(x) | Ohio(x) | MI(x)))", "(State(NY,USA) | State(PA,USA) | State(OH,USA) | State(MI,USA))", "all x.((NewYork(x) | Pennsylvania(x) | Ohio(x) | MI(x)) -> StatesInUS(x))", "((State(NY) | State(PA) | State(OH) | State(MI)))", "all x.((State(x) & (NY) | PA(x) | OH(x) | MI(x))) -> USState(x))", "all x y.((State(x) & State(y)) -> (NewYork(x) | Pennsylvania(x) | Ohio(x) | Michigan(x)))", "(State(NY,USA) & State(PA,USA) & State(OH,USA))", "(State(NY) | State(PA) | State(OH) | State(MI)))", "((NewYork(NY) | PA(Y) | Ohio(Y) | MI(Y)))", "all x.((NewYork(x) | PA(x) | OH(x) | MI(x)) -> StatesInUS(x))", "(USA) & (NewYork(y) | PA(y) | Ohio(y) | MI(y)))"]}
{"id": "folio_train_2152", "nl": "ON is a state of Canada.", "fol": "IsStateOf(On,Canada)", "prediction": ["all x.(Ontario(x) -> StateOfCanada(x))", "(Ontario) & StateOfCanada(Ontario))", "all x.(Ontario(x) -> StateOfCanada(x))", "ALL X Y.((Ontario(x) & StateOfCanada(y)) -> LocatedIn(x,y))", "(Ontario) -> StateOfCanada(Ontario))", "(Ontario) & StateOfCanada(Ontario))", "(StateOfCanada(ON))", "all x.(Ont.((State(x) & Canada(x)) -> State(x))", "all x.(Ontario(x) -> StateOfCanada(x))", "all x.(ON(x) -> StateOfCanada(x))", "(Ontario) & StateOfCanada(ON))", "all x.(Ont.((State(x) & Canada(x)) -> StateOf(x))", "(Ontario) -> StateOfCanada(ON))", "all x.(Ontario(x) -> StateOfCanada(x))", "(Ontario,Canada)", "all x.(Ontario(x) -> StateOfCanada(x))"]}
{"id": "folio_train_2153", "nl": "There is a major settlement of Lake Huron in ON. ", "fol": "exists x.all y.(LakeHuron(y) & MajorSettlementOfLake(x,y) & LocatedIn(x,On))", "prediction": ["exists x.(Standard(x) & LakeHuron(x) & InOntario(x))", "exists x.(StandardStation(x) & LakeHuron(x) & InOntario(x))", "all x y.((Standard(x) & LakeHuron(y)) -> InOntario(x,y))", "(MajorStandardOfLakeHuron(Ontario)", "(MajorStandard(LakeHuron) & InOntario(LakeHuron))", "(MainStandardStationOfLakeHuron(Ontario)", "Exists x.(Standard(x) & LakeHuron(x) & InOntario(x))", "exists x.(MajorStandardOfLakeHuron(x) & InOntario(x))", "all x y.((Stadion(x) & LakeHuron(y)) -> MajorInOntarian(x,y))", "exists x.(Landing(x) & LakeHuron(x) & InOntario(x))", "exists x.(Standard(x) & LakeHuron(x) & InOntario(x))", "exists x.(Stadion(x) & LakeHuron(x) & InOntario(x))", "exists x.(StandardStation(x) & LakeHuron(x) & InOntario(x))", "all x y.((Standard(x) & LakeHuron(y)) -> InOnt.(x,y))", "(MajorStandardOfLakeHuron(Ontario)", "exists x.(Sediment(x) & LakeHuron(x) & InOntario(x))"]}
{"id": "folio_train_2154", "nl": "All states are in their country.", "fol": "all x y.(IsStateOf(x,y) -> LocatedIn(x,y))", "prediction": ["all x.(State(x) -> InCountry(x))", "all x.(State(x) -> InCountry(x))", "(all x.(State(x) -> InCountry(x)))", "all x y.((State(x) & Country(y)) -> In(x,y))", "all x.(State(x) -> InCountry(x))", "all x y.(State(x) -> InCountry(x,y))", "all x.(State(x) -> InCountry(x))", "all x y.(State(x) -> InCountry(x,y))", "all x.(State(x) -> InCountry(x))", "all x y.(State(x) -> InCountry(x,y))", "all x.(State(x) -> InCountry(x))", "all x.(State(x) -> InCountry(x))", "exists x.(State(x) & Country(x))", "all x.(State(x) -> InCountry(x))", "exists x.(State(x) & Country(x))", "all x.(State(x) -> InCity(x))"]}
{"id": "folio_train_2155", "nl": "The US is in North America.", "fol": "LocatedIn(Us,Northamerica)", "prediction": ["all x.(US(x) -> NorthAmerica(x))", "(NorthAmerica(US) & In(US,NorthAmerica))", "all x.(US(x) -> NorthAmerica(x))", "all x y.((US(x) & NorthAmerica(y)) -> In(x,y))", "All x.(U.S.A.(x) -> NorthAmerica(x))", "(NorthAmerica(US) -> In(US))", "all x.((US(x) & NorthAmerica(x)) -> In(x,y))", "All x.(U.S.A.((US) & NorthAmerica(x)) -> In(x,y))", "all x.(US(x) -> NorthAmerica(x))", "all x y.((US(x) & NorthAmerica(y)) -> In(x,y))", "all x.(US(x) -> InNorthAmerica(x))", "(NorthAmerica) -> US(USA))", "(NorthAmerica(US) & In(US,NorthAmerica))", "(NorthAmerica(US))", "All x.(US(x) -> NorthAmerica(x))", "All x.(US(x) -> InNorthAmerica(x))"]}
{"id": "folio_train_2156", "nl": "The Great Lakes began to form at the end of the Last Glacial Period.", "fol": "all x.(IsGreatLake(x) -> FormedAtEndOf(x,Lastglacialperiod))", "prediction": ["all x.(GreatLake(x) -> (EndOfLastGlacialPeriod(x) & FormsAt(x,y)))", "all x y.((GreatLake(x) & LastGlacialPeriod(y)) -> FormsAtEnd(x,y))", "all x.(GreatLake(x) -> FormsAtEndOfLastGlacialPeriod(x))", "the GreatLakesFoundAtEndOfLastGlacialPeriod(GreatLakes,EndOfLastGlacialPeriod(GreatLakes))", "(GreatLakeFormation(GreatLake) & EndOfLastGlacialPeriod(GreatLake))", "all x y z.((GreatLake(x) & LastGlacialPeriod(y) & EndOf(z,y)) -> Forms(x,y))", "all x y.((GreatLake(x) & LastGlacialPeriod(y)) -> FormsAtEndOf(x,y))", "All x.(GreatLake(x) -> (EndOfLastGlacialPeriod(x) & Form(x)))", "(GreatLakeFormation(GreatLake) & EndOfLastGlacialPeriod(GreatLake))", "All x.((GreatLake(x) & LastGlacialPeriod(x)) -> FormsAtEndOf(x,y))", "The GreatLakesFoundationAtEndOfLastGlacialPeriod(GreatLakes)", "All x.(GreatLake(x) -> DevelopedAtEndOfLastGlacialPeriod(x))", "All x.(GreatLake(x) -> (EndOfLastGlacialPeriod(x) & FormsAt(x,y)))", "all x y.((GreatLake(x) & LastGlacialPeriod(y)) -> FormsAtEnd(x,y))", "All x.(GreatLake(x) -> FormsAtEndOfLeastGlacialPeriod(x))", "all x y.((GreatLake(x) & EndOfLastGlacialPeriod(y)) -> Forms(x,y))"]}
{"id": "folio_train_2157", "nl": "Lake Erie has a major settlement.", "fol": "exists x y.(LakeErie(x) & MajorSettlementOfLake(y,x))", "prediction": ["all x.(LakeErie(x) -> MajorStandard(x))", "LakeErieHasMajorStandard(LakeErie)", "(MainStandardStandard(LakeErie) -> HasStandard(LakeErie))", "(MajorStandard(LakeErie) & LocatedIn(LakeErie))", "(MajorStandardStandard(LakeErie) & LocatedIn(LakeErie))", "all x.(LakeErie(x) -> MajorStandard(x))", "all x y.((LakeErie(x) & MajorStandard(y)) -> Has(x,y))", "LakeErieHasMajorStandard(LakeErie)", "LakeErie has majorStandard(LakeErie)", "exists x.(Land(x) & MajorStandard(x))", "all x.(LakeErie(x) -> MajorStanding(x))", "all x y.((LakeErie(x) & Settlement(y)) -> Major(x,y))", "all x.(LakeErie(x) -> HasMajorStandard(x))", "all x.(LakeErie(x) -> MajorSettlement(x))", "all x.(LandErie(x) -> MajorSituation(x))", "exists x.(LakeErie(x) & MajorSettlement(x))"]}
{"id": "folio_train_2158", "nl": "There is a great lake that did not form at the end of the Last Glacial Period.", "fol": "exists x.(IsGreatLake(x) & -FormedAtEndOf(x,Lastglacialperiod))", "prediction": ["exists x.(GreatLake(x) & -FormedAtEndOfLastGlacialPeriod(x))", "all x y.((GreatLake(x) & LastGlacialPeriod(y)) -> -FormedAtEnd(x,y))", "(exists x.(GreatLake(x) & -FormedAtEndOfLastGlacialPeriod(x)))", "exists x.(GreatLake(x) & -FormedAtEndOfLastGlacialPeriod(x))", "all x y.((GreatLake(x) & LastGlacialPeriod(y) & -FormedAtEnd(x,y)) -> -FormedAtEnd(x,y))", "exists x.(GreatLake(x) & -FormedAtEndOfLeastGlacialPeriod(x))", "exists x.(GreatLake(x) & -FormedAtEndOfLeastGlacialPeriod(x))", "exists x.(GreatLake(x) & -LastGlacialPeriod(x))", "exists x.(GreatLake(x) & -FoundAtEndOfLastGlacialPeriod(x))", "exists x.(GreatLake(x) & -FormedAtEndOfLastGlacialPeriod(x))", "all x y.((GreatLake(x) & LastGlacialPeriod(y)) -> -FormedAtEnd(x,y))", "exists x.(GreatLake(x) & -FormedAtEndOfLastGlacialPeriod(x))", "exists x.(GreatLake(x) & -FormedLastGlacialPeriod(x))", "exists x.(GreatLake(x) & -FoundAtEndOfLastGlacialPeriod(x))", "exists x.(GreatLake(x) & -LastGlacialPeriod(x))", "exists x.(GreatLake(x) & -FormedAtEndOfLeastGlacialPeriod(x))"]}
{"id": "folio_train_2159", "nl": "If Stephen Curry is not an NBA player, then Stephen Curry is not an NBA player or a soccer player.", "fol": "(-IsNBAPlayer(Stephencurry) -> -((IsNBAPlayer(Stephencurry) & -IsSoccerPlayer(Stephencurry)) | (-IsNBAPlayer(Stephencurry) & IsSoccerPlayer(Stephencurry))))", "prediction": ["all x.((StephenCurry(x) & -NBAPlayer(x)) -> (-NBAPlayer(x) | SoccerPlayer(x)))", "(-NBAPlayer(StephenCurry) -> (-NBAPlayer(StephenCurry) | SoccerPlayer(StephenCurry)))", "all x.((StephenCurry(x) & -NBAPlayer(x)) -> (-NBAPlayer(x) | SoccerPlayer(x)))", "all x.((StanleyCurry(x) & -NBAPlayer(x)) -> (-NBAPlayer(x) | SoccerPlayer(x)))", "(-NBAPlayer(StephenCurry) -> (-NBAPlayer(StephenCurry) | SoccerPlayer(StephenCurry)))", "(-NBAPlayer(StephenCruise) -> (-NBAPlayer(StephenCruise) | SoccerPlayer(StephenCruise)))", "all x.((StephenCurry(x) & -NBAPlayer(x)) -> (-NBAPlayer(x) | SoccerPlayer(x)))", "-(NBAPlayer(StephenCurry) -> (-NBAPlayer(StephenCurry) | SoccerPlayer(StephenCurry)))", "all x.((StephenCurry(x) & -NBAPlayer(x)) -> (-NBAPlayer(x) & -SoccerPlayer(x)))", "all x.((StanleyCurry(x) & -NBAPlayer(x)) -> (-NBAPlayer(x) | SoccerPlayer(x)))", "(-NBAPlayer(StephenCurry) -> (-NBAPlayer(StephenCurry) | SoccerPlayer(StephenCurry)))", "(-NBAPlayer(StephenCurry) -> (-NBAPlayer(StephenCurry) | SoccerPlayer(StephenCurry)))", "all x.((StephenCruise(x) & -NBAPlayer(x)) -> (-NBAPlayer(x) | SoccerPlayer(x)))", "all x.((StephenCurry(x) & -NBAPlayer(x)) -> (-NBAPlayer(x) | SoccerPlayer(x)))", "all x.((StephenCurry(x) & -NBAPlayer(x)) -> (-NBAPlayer(x) & -SoccerPlayer(x)))", "all x.((StanleyCurry(x) & -NBAPlayer(x)) -> (-NBAPlayer(x) | SoccerPlayer(x)))"]}
{"id": "folio_train_2160", "nl": "Stephen Curry is a professional basketball player.", "fol": "IsProfessionalBasketballPlayer(Stephencurry)", "prediction": ["all x.((StephenCurry(x) & ProfessionalBasketballPlayer(x)) -> Professional(x))", "(ProfessionalBasketballPlayer(StephenCurry))", "StephenCurry(StephenCurry) is professionalBasketballPlayer(StephenCurry)", "Stephen Curry (StephenCurry) is professionalBasketballPlayer(StephenCurry))", "(ProfessionalBasketballPlayer(StephenCurry))", "all x.((StephenCurry(x) & ProfessionalBasketballPlayer(x)) -> Professional(x))", "StephenCurry(StephenCurry) is a professional basketball player.", "Stephen Curry is professional basketball player.", "(ProfessionalBasketballPlayer(StephenCurry) & -ProfessionalBasketballPlayer(StephenCurry))", "StephenCurry is professionalBasketballPlayer.", "(ProfessionalBasketballPlayer(StephenCurry))", "all x.((StephenCurry(x) & ProfessionalBasketballPlayer(x)) -> Professional(x))", "all x.((StephenCurry(x) & ProfessionalBasketballPlayer(x)) -> Professional(x))", "(ProfessionalBasketballPlayer(StephenCurry))", "all x.((StephenCurry(x) & ProfessionalBasketballPlayer(x)) -> Professional(x))", "all x.((StephenCurry(x) & ProfessionalBasketballPlayer(x)) -> Professional(x))"]}
{"id": "folio_train_2161", "nl": "Stephen Curry is not a centerback.", "fol": "-IsCenterBack(Stephencurry)", "prediction": ["all x.((StephenCurry(x) & -Centerback(x)) -> -Centerback(x))", "(-Centerback(StephenCurry))", "StephenCurry is notCenterback(StephenCurry)", "StephenCurry(StephenCurry) & -Centerback(StephenCurry))", "all x.((StephenCurry(x) & -Centerback(x)) -> -Centerback(x))", "StephenCurry isn'tCenterback(StephenCurry)", "(-Centerback(StephenCurry))", "Stephen Curry is not a centerback.", "all x.(Curry(x) -> -Centerback(x))", "all x.((StephenCurry(x) & -Centerback(x)) -> -Centerback(x))", "(-Centerback(StephenCurry))", "all x.((StephenCurry(x) & -Centerback(x)) -> -Centerback(x))", "(-Centerback(StephenCurry))", "-Centerback(StephenCurry)", "(-centerback(StephenCurry))", "-Centerback(StephenCurry)"]}
{"id": "folio_train_2162", "nl": "Naive cynicism was proposed by Justin Kruger and a colleague.", "fol": "(ProposedNaiveCynicism(JustinKruger,NaiveCynicism) & ProposedNaiveCynicism(ColleagueOfJustinKruger,NaiveCynicism))", "prediction": ["all x y.((NaiveCynicism(x) & JustinKruger(y)) -> ProposedBy(y,x))", "all x.(NaiveCynicism(x) -> (ProposedByJustinKruger(x) & ProposedByColleague(x)))", "all x y z.((NaiveCynicism(x) & JustinKruger(y) & Colleague(z)) -> ProposedBy(y,x,z))", "(NaiveCynicism(n) & ProposedByJustinKruger(n) & Coworker(n))", "(ProposedBy(NaiveCynicism) & JustinKruger(Kruger) & Colleague(Kruger))", "all x y.((NaiveCynicism(x) & JustinKruger(y)) -> ProposedBy(y,x))", "all x.(NaiveCynicism(x) -> (ProposedBy(x,JustinKruger) & ProposedBy(x,Colleague)))", "(ProposedByJustinKruger(naiveCynicism) & ProposedByColleague(naiveCynicism))", "-NaiveCynicismProposedByJustinKrugerAndColleague(n) & JustinKruger(n) & Colleague(n) & -ProposedBy(n,n))", "(NaiveCynicismProposedByJustinKruger(JulianKruger) & Coworker(JulianKruger))", "all x y z.((NaiveCynicism(x) & JustinKruger(y) & Colleague(z)) -> ProposedBy(y,x,z))", "all x.(NaiveCynicism(x) -> (ProposedByJustinKruger(x) & ProposedByColleague(x)))", "(ProposedBy(NaiveCynicism) & JustinKruger(NaiveCynicism) & Colleague(NaiveCynicism))", "all x y.((NaiveCynicism(x) & JustinKruger(y)) -> ProposedBy(x,y))", "all x.(NaiveCynicism(x) -> (ProposedByJustinKruger(x) & ProposedByColleague(x)))", "all x y.((NaiveCynicism(x) & JustinKruger(y)) -> ProposedBy(x,y))"]}
{"id": "folio_train_2163", "nl": "Thomas Gilovich is a colleague of Justin Kruger. ", "fol": "IsColleagueOf(ThomasGilovich,JustinKruger)", "prediction": ["(Colleague(ThomasGilovich) & JustinKruger(Thomas))", "all x.((TomTomGilovich(x) & JustinKruger(x)) -> Colleague(x))", "Thomas Gilovich is a colleague of JustinKruger.", "all x y.((ThomasGilovich(x) & JustinKruger(y)) -> Colleague(x,y))", "Thomas Gilovich (ColleagueOfJustinKruger)", "(ColleagueOfJustinKruger(ThomasGilovich))", "(Colleague(ThomasGilovich) & JustinKruger(ThomasGilovich))", "all x.((ThomasGilovich(x) & JustinKruger(x)) -> Colleague(x))", "all x.((TomTomGilovich(x) & JustinKruger(x)) -> Colleague(x))", "Thomas Gilovich is a colleague of JustinKruger.", "(Colleague(ThomasGilovich) & JustinKruger(Thomas))", "(Colleague(ThomasGilovich,JustinKruger))", "Thomas Gilovich, co-workerOfJustinKruger,", "(Colleague(ThomasGlovich) & JustinKruger(ThomasGlovich))", "Thomas Gilovich (ColleagueOfJustinKruger)", "Thomas Gilovich is a colleague of Justin Kruger."]}
{"id": "folio_train_2164", "nl": "Naive cynicism is a philosophy of mind.", "fol": "IsPhilosophyOfMind(NaiveCynicism)", "prediction": ["all x.(NaiveCynicism(x) -> PhilosophyOfMind(x))", "(NaiveCynicism(n) & PhilosophyOfMind(n))", "all x y.((NaiveCynicism(x) & Mind(y)) -> PhilosophyOf(x,y))", "all x.(NaiveCynicism(x) -> PhilosophyOfMind(x))", "all x.(NaiveCynicism(x) -> PhilosophyOfMind(x))", "all x y.((NaiveCynicism(x) & Mind(y)) -> PhilosophyOf(x,y))", "all x.((NaiveCynicism(x) & PhilosophyOfMind(x)) -> Is(x,y))", "all x.(NaiveCynicism(x) -> PhilosophyOfMind(x))", "all x y.((NaiveCynicism(x) & Mind(y)) -> PhilosophyOf(x,y))", "all x.(NaiveCynicism(x) -> PhilosophyOfMind(x))", "all x y.((NaiveCynicism(x) & Mind(y)) -> PhilosophyOf(x,y))", "all x.(NaiveCynicism(x) -> PhilosophyOfMind(x))", "all x.((NaiveCynicism(x) & PhilosophyOfMind(x)) -> Is(x,y))", "all x.(NaiveCynicism(x) -> PhilosophyOfMind(x))", "all x.(NaiveCynicism(x) -> PhilosophyOfMent(x))", "all x.(NaiveCynicism(x) -> PhilosophyOfMind(x))"]}
{"id": "folio_train_2165", "nl": "Thomas Gilovich proposed naive cynicism.", "fol": "ProposedNaiveCynicism(ThomasGilovich,NaiveCynicism)", "prediction": ["all x.((ThomasGilovich(x) & NaiveCynicism(x)) -> Proposed(x))", "(ProposedNaiveCynicism(ThomasGilovich)", "Thomas Gilovich proposedNaiveCynicism(Thomas)", "all x y.((ThomasGilovich(x) & NaiveCynicism(y)) -> Proposed(x,y))", "Thomas Gilovich hat naiveCynicism(Thomas)  proposing(Thomas,Gilovich))", "(PositionedByThomasGilovich(ThomasGilovich,NaiveCynicism))", "(ProposesNaiveCynicism(ThomasGilovich)", "-(ThomasGilovich(x) & NaiveCynicism(x))", "all x.((ThomasGilovich(x) & NaiveCynicism(x)) -> Proposed(x))", "Thomas Gilovich (ThomsonGilovich) & NaiveCynicism(Gilovich))", "Thomas Gilovich, naiveCynicism(Thomas)", "Thomas Gilovich suggestedNaiveCynicism(ThomasGilovich)", "(ProposedNaiveCynicism(ThomasGilovich)", "all x.((ThomasGilovich(x) & NaiveCynicism(x)) -> Proposes(x,y))", "Thomas Gilovich proposedNaiveCynicism(Thomas)", "all x.((ThomasGilovich(x) & NaiveCynicism(x)) -> Proposed(x))"]}
{"id": "folio_train_2166", "nl": "Justin Kruger propose a philosophy of mind.", "fol": "exists x.(ProposedNaiveCynicism(JustinKruger,x) & IsPhilosophyOfMind(x))", "prediction": ["all x.((JustinKruger(x) & PhilosophyOfMind(x)) -> Proposes(x,y))", "JustinKruger proposesPhilosophyOfMind(x)", "all x.(ProposesPhilosophyOfMind(x) -> JustinKruger(x))", "(ProposesPhilosophyOfMind(JulianKruger))", "all x y.((JustinKruger(x) & PhilosophyOfMind(y)) -> Proposes(x,y))", "all x.((JulianKruger(x) & PhilosophyOfMind(x)) -> Proposes(x,y))", "Justin Kruger proposes philosophyOfMind(x)", "all x y.((JulianKruger(x) & PhilosophyOfMind(y)) -> Proposes(x,y))", "all x.((JustinKruger(x) & PhilosophyOfMind(x)) -> Proposes(x,y))", "JustinKruger proposesPhilosophyOfMind(Kruger,Julian)", "(ProposesPhilosophyOfMind(JulianKruger)", "all x.(ProposesPhilosophyOfMind(x) -> JustinKruger(x))", "JustinKruger proposesPhilosophyOfMind(JulianKruger)", "Justin Kruger proposes PhilosophyOfMind(x)", "(ProposesPhilosophyOfMind(JulianKruger)", "all x.((JustinKruger(x) & PhilosophyOfMind(x)) -> Propose(x,y))"]}
{"id": "folio_train_2167", "nl": "Thomas Gilovich worked on philiophies of mind.", "fol": "WorkedOn(ThomasGilovich,PhilosophiesOfMind)", "prediction": ["all x.((ThomasGilovich(x) & PhiliophiesOfMind(x)) -> WorkedOn(x,PhiliophiesOfMind))", "(WorkedOnPhiliophiesOfMind(ThomasGilovich))", "Thomas Gilovich worked on philiophiesOfMind(Thomas)", "all x.(ThomasGilovich(x) -> WorkedOnPhiliophiesOfMind(x))", "all x y.((ThomasGilovich(x) & PhiliophiesOfMind(y)) -> WorkedOn(x,y))", "all x.((ThomasGilovich(x) & PhiliophiesOfMind(x)) -> WorkedOn(x,y))", "(WorkedOnPhiliophiesOfMind(ThomasGilovich))", "Thomas Gilovich worked on philiophiesOfMind.", "all x y.((ThomasGilovich(x) & PhiliophiesOfMind(y)) -> WorkedOn(x,y))", "all x.(ThomasGilovich(x) -> WorkedOnPhiliophiesOfMind(x))", "all x.((ThomasGilovich(x) & PhiliophiesOfMind(x)) -> WorksOn(x,y))", "Thomas Gilovich worked on philiophiesOfMind(Thomas)", "(WorkedOnPhiliophiesOfMind(ThomasGilovich)", "Thomas Gilovich worked on philiophies of mind.", "(WorkedOnPhiliophiesOfMind(ThomasGilovich)", "(WorkedOnPhiliophiesOfMind(ThomasGilovich)"]}
{"id": "folio_train_2168", "nl": "The Turing Award has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming and John McCarthy. ", "fol": "(AwardedTuringAward(DonaldKnuth) & AwardedTuringAward(MarvinMinsky) & AwardedTuringAward(RichardHamming) & AwardedTuringAward(JohnMccarthy))", "prediction": ["(AwardedToDuncanKnuth(Turing) & AwardedToMarvinMinsky(Turing) & AwardedToRichardHamming(Turing) & AwardedToJohnMcCarthy(Turing))", "(Award(Turing) -> (AwardedTo(Turning) & DonaldKnuth(Turning) & MarvinMinsky(Turning) & RichardHamming(Turning) & JohnMcCarthy(Turning)))", "All x.(TuringAward(x) -> (AwardedTo(x,DuncanKnuth) | AwardedTo(x,MarvinMinsky) | AwardedTo(x,RichardHamming) | AwardedTo(x,JohnMcCarthy)))", "(AwardedTo(TuringAward) & DonaldKnuth(Knuth) & MarvinMinsky(Knuth) & RichardHamming(Hamming) & JohnMcCarthy(McCarthy))", "all x.((Award(x) & DonaldKnuth(x) & MarvinMinsky(x) & RichardHamming(x) & JohnMcCarthy(x)) -> TuringAward(x))", "The TuringAward has been awarded to DonaldKnuth,MarvinMinsky,RichardHamming,JohnMcCarthy,AndMcClarke.", "The Turing Award has been awarded to DonaldKnuth,MarvinMinsky,RichardHamming,JohnMcCarthy,AndMcCarthy.", "all x y.((TuringAward(x) & DonaldKnuth(y) & MarvinMinsky(y) & RichardHamming(y) & JohnMcCarthy(y)) -> AwardedTo(x,y))", "(AllowedToDonaldKnuth(TuringAward) & AllocatedToMarvinMinsky(TuringAward) & AllocatedToRichardHamming(TuringAward) & AllocatedToJohnMcCarthy(TuringAward))", "the TuringAward(Turing) -> (AwardedToDuncanKnuth(Turning) | AwardedToMarvinMinsky(Turning) | AwardedToRichardHamming(Turning) | AwardedToJohnMcCarthy(Turning)))", "(AwardsToDuncanKnuth(Turing) & AwardsToMarvinMinsky(Turing) & AwardsToRichardHamming(Turing) & AwardsToJohnMcCarthy(Turing))", "(AwardedToDuncanKnuth(Award) & AwardedToMarvinMinsky(Award) & AwardedToRichardHamming(Award) & AwardedToJohnMcCarthy(Award))", "All x.(TuringAward(x) -> (AwardedToDuncanKnuth(x) | AwardedToMarvinMinsky(x) | AwardedToRichardHamming(x) | AwardedToJohnMcCarthy(x)))", "(AllowedToDonaldKnuth(Turing) & AllocatedToMarvinMinsky(Turing) & AllocatedToRichardHamming(Turing) & AllocatedToJohnMcCarthy(Turing))", "The TuringAward has been awarded to DonaldKnuth, MarvinMinsky,RichardHamming,JohnMcCarthy,AndJohnMcCarthy.", "The Turing Award has been awarded to DonaldKnuth,MarvinMinsky,RichardHamming,JohnMcCarthy,AndJohnMcCarthy."]}
{"id": "folio_train_2169", "nl": "Donald Knuth made major contributions to the analysis of algorithms.", "fol": "MadeContributionsTo(DonaldKnuth,Algorithms)", "prediction": ["all x.(DonaldKnuth(x) -> MajorContributionsToAlgorithms(x))", "Donald Knuth made major contributions to the analysis of algorithms.", "all x.((DonaldKnuth(x) & MajorContributions(x)) -> AnalyzesAlgorithms(x))", "(MajorContributions(DonaldKnuth,Algorithms))", "all x y.((DonaldKnuth(x) & Algorithm(y)) -> MajorContributionToAnalysis(x,y))", "Donald Knuth made major contributions to analysis of algorithms.", "(MostMajorContributions(DonaldKnuth,Algorithms))", "(MajorContribution(DuncanKnuth) & AnalysisOfAlgorithms(DuncanKnuth))", "Donald Knuth made major contributions to the analysis of Algorithms.", "(MajorContributions(DonaldKnuth,Algorithms))", "DonaldKnuth made majorContributionsToAlgorithms(DuncanKnuth,Algorithms)", "all x.(DonaldKnuth(x) -> MajorContributionsToAlgorithms(x))", "Donald Knuth made major contributions to analysis of algorithms.", "DonaldKnuth has made major contributions to the analysis of algorithms.", "Donald Knuth made major contributions to algorithm analysis.", "Donald Knuth made major contributions to the analysis of algorithms."]}
{"id": "folio_train_2170", "nl": "Marvin Minsky is recognized by his contributions to the field of artificial intelligence.", "fol": "MadeContributionsTo(MarvinMinsky,Ai)", "prediction": ["all x.((MarvinMinsky(x) & ContributionsToArtificialIntelligence(x)) -> Recognized(x))", "all x.(MarvinMinsky(x) -> RecognizedByContributionsToArtificialIntelligence(x))", "all x y.((MarvinMinsky(x) & ArtificialIntelligence(y)) -> RecognizedByContributions(x,y))", "Marvin Minsky is recognized by his contributions to the field of ArtificialIntelligence.", "(RecognizedByContributions(MarvinMinsky,ArtificialIntelligence))", "-(MarvinMinsky(Marvin) & ContributionsToArtificialIntelligence(Marvin)))", "(RecognizedByArtificialIntelligence(MarvinMinsky)", "Marvin Minsky is recognized by contributions to ArtificialIntelligence (Microsoft) & ContributionsToArtificialIntelligence(MarvinMinsky,Microsoft))", "all x.((MarvinMinsky(x) & ContributionsToArtificialIntelligence(x)) -> Recognized(x))", "(RecognizedByContributionsToArtificialIntelligence(MarvinMinsky))", "Marvin Minsky is recognized by his contributions to artificialintelligence.", "all x y.((MarvinMinsky(x) & ArtificialIntelligence(y)) -> RecognizedBy(x,y))", "all x.(MarvinMinsky(x) -> RecognizedByContributionsToArtificialIntelligence(x))", "Marvin Minsky is recognized by his contributions to the field of ArtificialIntelligence.", "Marvin Minsky is recognized by his ContributionsToArtificialIntelligence(MarvinMinsky)", "all x.((MarvinMinsky(x) & Contributions(x,artificialIntelligence)) -> Recognized(x))"]}
{"id": "folio_train_2171", "nl": "Richard Hamming did research on numerical methods.", "fol": "MadeContributionsTo(RichardHamming,NumericalMethods)", "prediction": ["all x.((RichardHamming(x) & NumericalMethods(x)) -> DidResearch(x))", "(DoesResearchOnNumericalMethods(RichardHamming))", "Richard Hamming did research on numerical methods.", "(ResearchOnNumericalMethods(RichardHamming))", "all x y.((RichardHamming(x) & NumericalMethod(y)) -> DidResearch(x,y))", "all x.(RichardHamming(x) -> DidResearchOnNumericalMethods(x))", "Richard Hamming & NumericalMethods(RichardHamming)", "all x.((RichardHamming(x) & NumericalMethods(x)) -> DidResearch(x))", "(DoesResearchOnNumericalMethods(RichardHamming))", "Richard Hamming did research on numericalmethods.", "all x.((RichardHamming(x) & ResearchOnNumericalMethods(x)) -> Did(x,numbericalMethods))", "all x.((RichardHamming(x) & NumericalMethods(x)) -> DidResearch(x))", "(DoesResearchOnNumericalMethods(RichardHamming)", "Richard Hamming did research on numerical methods.", "Richard Hamming did research on numericalmethods.", "(DoesResearchOnNumericalMethods(RichardHamming)"]}
{"id": "folio_train_2172", "nl": "John McCarthy had a central role in creating and shaping the field of artificial inteligence. ", "fol": "MadeContributionsTo(JohnMccarthy,Ai)", "prediction": ["all x.((JohnMcCarthy(x) & ArtificialIntelligence(x)) -> CentralRole(x))", "all x y.((JohnMcCarthy(x) & ArtificialIntelligence(y)) -> (Created(x,y) & Shaped(x,y)))", "(CreatedArtificialIntelligence(JohnMcCarthy) & ShapedArtificialIntelligence(JohnMcCarthy))", "John McCarthy & ArtificialIntelligence(John,McCarthy) & CentralRoleInCreatingAndShaping(John,McCarthy))", "(CreatedArtificialIntelligence(JohnMcCarthy,CreatedArtificialIntelligence(JohnMcCarthy) & ShapedArtificialIntelligence(JohnMcCarthy,CreatedArtificialIntelligence))", "(CentralRoleInCreatingAndShapingArtificialIntelligence(JohnMcCarthy))", "John McCarthy had central role in creating and shaping artificial Intelligence (CreateIntelligence(John McCarthy,ArtificialIntelligence) & ShapeIntelligence(John McCarthy,ArtificialIntelligence))", "all x.((JohnCarthy(x) & ArtificialIntelligence(x)) -> CentralRole(x))", "John McCarthy & CreatedAndShapedArtificialIntelligence(John McCarthy)", "all x y.((JohnMcCarthy(x) & ArtificialIntelligence(y)) -> CentralRoleInCreatingAndShaping(x,y))", "all x.((JohnMcCarthy(x) & ArtificialIntelligence(x)) -> CentralRole(x))", "John McCarthy a central role in creating and shaping artificial Intelligence.", "all x.((JohnMcCarthy(x) & ArtificialIntelligence(x)) -> CentralRoleInCreatingAndShaping(x))", "all x y.((JohnMcCarthy(x) & ArtificialIntelligence(y)) -> (CreatedAndShaped(x,y) & ArtificialIntelligence(y)))", "all x.((JohnCarthy(x) & ArtificialIntelligence(x)) -> CentralRoleInCreatingAndShaping(x,Intelligence))", "all x.((JohnMcCarthy(x) & ArtificialIntelligence(x)) -> CentralRoleInCreatingAndShaping(x,Intelligence))"]}
{"id": "folio_train_2173", "nl": "No Turing Award winners contributed to the field of numerical methods.", "fol": "-exists x.(AwardedTuringAward(x) & MadeContributionsTo(x,NumericalMethods))", "prediction": ["-exists x.(Winner(x) & TuringAward(x) & ContributesToNumericalMethods(x))", "all x.((Winner(x) & TuringAward(x)) -> -ContributedToNumericalMethods(x))", "-exists x.(TuringAwardWinner(x) & ContributesToNumericalMethods(x))", "no TuringAwardWinnersContributedToNumericalMethods(n)", "(-all x.(TuringAwardWinner(x) -> ContributedToNumericalMethods(x)))", "(NoTuringAwardWinner(x) & ContributedToNumericalMethods(x))", "(NoTuringAwardWinner(x) & ContributedToNumericalMethods(x))", "-exists x.(Winner(x) & TuringAward(x) & ContributesToNumericalMethods(x))", "No TuringAwardWinnersContributedToNumericalMethods(n)", "(-all x.(TuringAwardWinner(x) -> ContributedToNumericalMethods(x)))", "-exists x.(TuringAwardWinner(x) & ContributesToNumericalMethods(x))", "all x.(TuringAwardWinner(x) -> -ContributedToNumericalMethods(x))", "\u2013(TuringAwardWinner(s) & -ContributedToNumericalMethods(s))", "-exists x.(Winner(x) & TuringAward(x) & ContributedToNumericalMethods(x))", "-exists x.(TuringAwardWinner(x) & ContributesToNumericalMethods(x))", "-exists x.(Winner(x) & TuringAward(x) & ContributesToNumericalMethods(x))"]}
{"id": "folio_train_2174", "nl": "No easy Leetcode problems have an AC rate lower than 20 percent. ", "fol": "all x.(IsEasyProblem(x) -> -HasLowACRate(x))", "prediction": ["-exists x.(EasyLeetcodeProblem(x) & LowACRate(x,20))", "all x.(EasyLeetcodeProblem(x) -> -HasACRateLowerThan(x,20))", "all x.((EasyLeetcodeProblem(x) & LowACRate(x,20)) -> -Has(x,20))", "-all x.(EasyLeetcodeProblem(x) -> HasACRateLowerThan(x,20))", "-exists x.(EasyLeetcodeProblem(x) & HasACRateLowerThan(x,20))", "all x.(EasyLeetcodeProblem(x) -> -HasACRateLowerThan20Percent(x))", "all x.((EasyLeetcodeProblem(x) & LowACRate(x,20)) -> -(HasACRate(x,20) & HasACRate(x,20)))", "(exists x.(EasyLeetcodeProblem(x) & LowerThan(x,20)))", "(exists x.(EasyLeetcodeProblem(x) & -HasACRateLowerThan(x,20)))", "-exists x.(EasyLeetcodeProblem(x) & LowerThan(x,20))", "all x.(EasyLeetcodeProblem(x) -> -HasACRateLowerThan(x,20))", "-exists x.(EasyLeetcodeProblem(x) & LowerThan(x,20))", "-exists x.(EasyLeetcodeProblem(x) & HasACRateLowerThan(x,20))", "-exists x.(EasyLeetcodeProblem(x) & -HasACRateLowerThan(x,20))", "-exists x.(EasyLeetcodeProblem(x) & LowACRate(x,20))", "-exists x.(EasyLeetcodeProblem(x) & ACRateLowerThan(x,20))"]}
{"id": "folio_train_2175", "nl": "All Leetcode problems recommended to novices are easy.                                                                                                       ", "fol": "all x.(IsRecommendedToNovices(x) -> IsEasyProblem(x))", "prediction": ["all x.(LeetcodeProblem(x) -> Easy(x))", "all x.((LeetcodeProblem(x) & RecommendedToNovees(x)) -> Easy(x))", "all x y.((LeetcodeProblem(x) & Newbie(y)) -> Easy(x))", "all x.(LeetcodeProblem(x) -> Easy(x))", "all x.((LeetcodeProblem(x) & RecommendedToNoveals(x)) -> Easy(x))", "All leetcodeProblemsRecommendedToNoveals(x) -> Easy(x))", "all x.(LeetcodeProblem(x) -> Easy(x))", "all x y.((LeetcodeProblem(x) & Newbie(y)) -> Easy(x))", "(all x.(LeetcodeProblem(x) & RecommendationToNoveals(x)) -> Easy(x))", "all x y.((LeetcodeProblem(x) & Nomad(y) & RecommendedTo(x,y)) -> Easy(x))", "(all x.(LeetcodeProblem(x) -> Easy(x)))", "all x.(LeetcodeProblem(x) -> Easy(x))", "all x.((LeetcodeProblem(x) & RecommendedToNovees(x)) -> Easy(x))", "all x.(LeetcodeProblem(x) -> EasyToRecommendedToNoveals(x))", "all x.(LeetcodeProblem(x) -> Easy(x))", "all x.(LeetcodeProblem(x) -> Easy(x))"]}
{"id": "folio_train_2176", "nl": "Leetcode problems either have an AC rate lower than 20 percent or are starred by more than 1 thousand users. ", "fol": "all x.((HasLowACRate(x) & -IsStarredByUsers(x)) | (-HasLowACRate(x) & IsStarredByUsers(x)))", "prediction": ["all x.(LeetcodeProblem(x) -> ((HasACRateLowerThan(x,20) | StartedByMoreThan(x,1000))))", "all x.(LeetcodeProblem(x) -> (HasACRateLowerThan(x,20) | StartedByMoreThan(x,1000)))", "(exists x.(LeetcodeProblem(x) & (ACRateLowerThan(x,20) | StartedBy(x,1000))))", "all x y.((LeetcodeProblem(x) & ACRate(y) & LowerThan(y,x,y)) | StartedByMoreThan(y,x,y))", "all x.((LeetcodeProblem(x) & (ACRateLowerThan(x,20) | StartedBy(x,1000))) -> (Has(x,20) | StartedBy(x,1000)))", "all x y.((LeetcodeProblem(x) & User(y)) -> (HasACRateLowerThan(x,20) | StartedBy(x,y)))", "(all x.(LeetcodeProblem(x) -> (LowerThan(x,20) | StartedBy(x,1000))))", "all x.(LeetcodeProblem(x) -> ((HasACRateLowerThan(x,20) | StartedByMoreThan(x,1000))))", "all x.(LeetcodeProblem(x) -> ((ACRateLowerThan(x,20) | StartedByMoreThan(x,1000))))", "all x.((LeetcodeProblem(x) & (ACRateLessThan20Percent(x) | StartedByMoreThan1000Users(x))) -> (Has(x,20) | StartedBy(x,1000Users)))", "all x.(LeetcodeProblem(x) -> (HasACRateLowerThan(x,20) | StartedByMoreThan(x,1000)))", "(exists x.(LeetcodeProblem(x) & (ACRateLowerThan(x,20) | StartedBy(x,1000))))", "all x.(LeetcodeProblem(x) -> (HasACRateLowerThan20Percent(x) | StartedByMoreThan1000Users(x)))", "exists x.(LeafcodeProblem(x) & ((ACRateLowerThan(x,20) | StartedBy(x,1000))) | (ACRateLowerThan(x,20)))))", "all x.(LeetcodeProblem(x) -> ((HasACRateLowerThan(x,20) | StartedBy(x,1000))))", "exists x.(LeetcodeProblem(x) & ((ACRateLowerThan(x,20)) | StartedBy(x,1000))))"]}
{"id": "folio_train_2177", "nl": "All hard Leetcode problems are starred by more than 1 thousand users. ", "fol": "all x.(IsHardProblem(x) -> IsStarredByUsers(x))", "prediction": ["all x.(HardLeetcodeProblem(x) -> StartedByMoreThan1000Users(x))", "all x y.((HardLeetcodeProblem(x) & User(y)) -> StartedBy(x,y))", "all x.((HardLeetcodeProblem(x) & StartedByMoreThan(x,1000)) -> StartedBy(x,1000))", "all x.(HardLeetcodeProblem(x) -> StartedByMoreThan(x,1000))", "all x.(LeetcodeProblem(x) -> StartedByMoreThan(x,1000))", "all x y.((HardLeetcodeProblem(x) & User(y)) -> StartedBy(x,y))", "all x.(HardLeetcodeProblem(x) -> StartedByMoreThan1000Users(x))", "ALL TEETHECODS -> StartedByMoreThan1000Users(x))", "all x.((HardLeetcodeProblem(x) & StartedByMoreThan(x,1000)) -> StartedBy(x,1))", "(All x.(HardLeetcodeProblem(x) -> StartedByMoreThan(x,1000)))", "All x.(LeetcodeProblem(x) -> StartedByMoreThan1000Users(x))", "all x y.((HardLeetcodeProblem(x) & User(y) & StartedBy(x,y)) -> MoreThan(y,x))", "all x y.((HardLeetcodeProblem(x) & User(y)) -> StartedBy(x,y))", "all x.(HardLeetcodeProblem(x) -> StartedByMoreThan(x,1000))", "all x.(HardLeetcodeProblem(x) -> StartedByMoreThan1000Users(x))", "all x y.((HardLeetcodeProblem(x) & User(y)) -> StartedBy(x,y))"]}
{"id": "folio_train_2178", "nl": "No Leetcode problems published after 2022 are starred by more than 1 thousand users. ", "fol": "all x.(IsPublishedAfter2022(x) -> -IsStarredByUsers(x))", "prediction": ["all x.((LeetcodeProblem(x) & PublishedAfter2022(x)) -> StartedByMoreThan1000Users(x))", "all x y.((LeetcodeProblem(x) & PublishedAfter2022(x) & MoreThan(y,1000)) -> StartedBy(x,y))", "-exists x.(LeetcodeProblem(x) & PublishedAfter2022(x) & StartedByMoreThan(x,1000))", "all x.((LeetcodeProblem(x) & PublishedAfter2022(x)) -> StartedByMoreThan(x,1000))", "all x.((LeetcodeProblem(x) & PublishedAfter2022(x) & StartedByMoreThan1000Users(x)) -> -StartedByMoreThan1000Users(x))", "all x y.((LeetcodeProblem(x) & PublishedAfter2022(x,y)) -> StartedByMoreThan(y,x))", "(-all x.(LeetcodeProblem(x) & PublishedAfter2022(x)) -> StartedByMoreThan1000Users(x))", "all x.((LeetcodeProblem(x) & PublishedAfter2022(x)) -> StartedByMoreThan1000Users(x))", "-exists x.(LeetcodeProblem(x) & PublishedAfter2022(x) & StartedByMoreThan(x,1000))", "All x.(LeetcodeProblem(x) -> (PublishedAfter2022(x) & StartedByMoreThan1000Users(x)))", "all x.((LeetcodeProblem(x) & PublishedAfter2020(x) & StartedByMoreThan(x,1000)) -> -StartedBy(x,2000))", "all x y.((LeetcodeProblem(x) & ReleasedAfter2022(x,y)) -> StartedByMoreThan(x,y))", "(-exists x.(LeetcodeProblem(x) & PublishedAfter2022(x)) & StartedBy(x,y))", "all x.((LeetcodeProblem(x) & PublishedAfter2022(x)) -> StartedByMoreThan(x,1000))", "-exists x.(LeetcodeProblem(x) & PublishedAfter2020(x) & StartedByMoreThan(x,1000))", "-exists x.(LeetcodeProblem(x) & PublishedAfter(x,2022) & StartedBy(x,1000))"]}
{"id": "folio_train_2179", "nl": "2Sum is not recommended to novices and hard. ", "fol": "-(IsRecommendedToNovices(Twosum) & IsHardProblem(Twosum))", "prediction": ["all x.(2Sum(x) -> -RecommendedToNovees(x) & -RecommendedToHard(x))", "-(RecommendedToNovees(2Sum) & -RecommendedToHard(2Sum))", "2Sum is not recommended to novices and hard.", "(-RecommendedToNovees(2Sum) & -RecommendedToHard(2Sum))", "all x.(Sum(x) -> -RecommendedToNovees(x) & -RecommendedToHard(x))", "2Sum -(RecommendedToNovees(2Sum) & -RecommendedToHard(2Sum)))", "(-RecommendedToNoveles(2Sum) & -RecommendedToHard(2Sum))", "2Sum -(RecommendedToNoveles(2Sum) & -RecommendedToHard(2Sum))", "all x.(Sum(x) -> -RecommendedToNoveles(x) & -RecommendedToHard(x))", "-(RecommendedToNoveles(2Sum) & -RecommendedToHard(2Sum))", "all x.(2Sum(x) -> (-RecommendedToNovees(x) & -RecommendedToHard(x)))", "2Sum -RecommendedToNoveesAndHard(2Sum))", "2Sum is not recommended to novices and hard.", "-(RecommendedToNovees(2Sum) & -RecommendedToHard(2Sum))", "(-RecommendedToNovees(2Sum) & -RecommendedToHard(2Sum))", "2Sum is not recommended to novices and hard."]}
{"id": "folio_train_2180", "nl": "4Sum is either starred by more than 1 thousand users and published after 2022, or neither starred by more than 1 thousand users nor published after 2022. ", "fol": "-((IsStarredByUsers(Foursum) & -IsPublishedAfter2022(Foursum)) | (-IsStarredByUsers(Foursum) & IsPublishedAfter2022(Foursum)))", "prediction": ["all x.((Sum(x) & StartedByMoreThan(x,y) & PublishedAfter(y,z)) | (-StartedByMoreThan(x,z) & -PublishedAfter(x,z))))", "all x.(4Sum(x) -> ((StartedByMoreThan(x,1000) & PublishedAfter(x,2022)) | (-StartedByMoreThan(x,1000) & -PublishedAfter(x,2022))))", "all x.(Sum(x) -> ((StartedByMoreThan(x,1000) & PublishedAfter(x,2022)) | (-StartedByMoreThan(x,1000) & -PublishedAfter(x,2022))))", "(exists x.(StartedBy(x,y) & MoreThan(y,z)) & exists w.(StartedBy(w,z) & MoreThan(w,z))) & exists w.(StartedBy(w,w,z) & MoreThan(w,w))))", "(all x.((Sum(x) & StartedByMoreThan(x,2000)) | (-StartedByMoreThan(x,2000) & PublishedAfter(x,2022))))", "all x.((Sum(x) & StartedByMoreThan(x,2000)) | (-StartedByMoreThan(x,2000) & PublishedAfter(x,2022))))", "all x y.((Sum(x) & StartedBy(x,y) & MoreThan(y,x)) | (-StartedBy(x,y) & -PublishedAfter(x,y))))", "all x.(4Sum(x) -> ((StartedByMoreThan1000Users(x) & PublishedAfter2022(x)) | (-StartedByMoreThan1000Users(x) & PublishedAfter2022(x))))", "(all x.((Sum(x) & StartedByMoreThan1000Users(x) & PublishedAfter2022(x)) | (-StartedByMoreThan1000Users(x) & -PublishedAfter2022(x))))", "(exists x.(StartedBy(x,y) & MoreThan(y,z) & MoreThan(z,x)) | (-StartedBy(x,y,z) & MoreThan(y,z) & PublishedAfter(x,z) & -PublishedAfter(x,y,z))))", "all x.(Sum(x) -> ((StartedBy(x,y) & MoreThan(y,x) & PublishedAfter(y,x)) | (-StartedBy(x,y) & MoreThan(y,x) & PublishedAfter(y,x))))", "all x.(Sum(x) -> ((StartedByMoreThan1000Users(x) & PublishedAfter2022(x)) | (-StartedByMoreThan1000Users(x) & PublishedAfter2022(x))))", "(all x.(4Sum(x) -> (starredByMoreThan(x,1000) & PublishedAfter(x,2022)) | (-starredByMoreThan(x,1000) & -PublishedAfter(x,2022))))", "(all x.(4Sum(x) -> (starredbymorethan1Kwy(x,y) & PublishedAfter2022(x)) | (-starredbymorethan1Kwy(y,x) & PublishedAfter2022(y))))", "all x.(4Sum(x) -> ((StartedByMoreThan(x,2000) & PublishedAfter(x,2022)) | (-StartedByMoreThan(x,2000) & PublishedAfter(x,2022))))", "all x.(4Sum(x) -> ((StartedByMoreThan1000Users(x) & PublishedAfter2022(x)) | (-StartedByMoreThan1000Users(x) & PublishedAfter2022(x))))"]}
{"id": "folio_train_2181", "nl": "2Sum is an easy Leetcode problem.", "fol": "IsEasyProblem(Twosum)", "prediction": ["2Sum is anEasyLeetcodeProblem(x)", "all x.(Sum(x) -> EasyLeetcodeProblem(x))", "all x.((Sum(x) & EasyLeetcodeProblem(x)) -> Easy(x))", "(EasyLeetcodeProblem(2Sum) & EasyLeetcodeProblem(2Sum))", "2Sum is an EasyLeetcodeProblem(x)", "all x.(2Sum(x) -> EasyLeetcodeProblem(x))", "2Sum is anEasyLeetcodeProblem(x)", "2Sum is a EasyLeetcodeProblem(x)", "-EasyLeetcodeProblem(2Sum)", "All x.(Sum(x) -> EasyLeetcodeProblem(x))", "2Sum is an EasyLeetcodeProblem(x)", "2Sum(x) -> EasyLeetcodeProblem(x))", "all x.((Sum(x) & EasyLeetcodeProblem(x)) -> Easy(x))", "2Sum(x) -> EasyLeetcodeProblem(x))", "All x.(2Sum(x) -> EasyLeetcodeProblem(x))", "2Sum is anEasyLeetcodeProblem(x)"]}
{"id": "folio_train_2182", "nl": "2Sum is not an easy Leetcode problem.", "fol": "-IsEasyProblem(Twosum)", "prediction": ["all x.(2Sum(x) -> -EasyLeetcodeProblem(x))", "2Sum is notEasyLeetcodeProblem(x)", "2Sum - EasyLeetcodeProblem(x))", "-EasyLeetcodeProblem(2Sum)", "2Sum is not an EasyLeetcodeProblem(x)", "NoLeetcodeProblem(2Sum)", "-(EasyLeetcodeProblem(2Sum) & -EasyLeetcodeProblem(2Sum))", "2Sum is -EasyLeetcodeProblem(x))", "2Sum is notEasyLeetcodeProblem(2))", "-EasyLeetcodeProblem(2Sum)", "2Sum - EasyLeetcodeProblem(x))", "(-EasyLeetcodeProblem(2Sum))", "-EasyLeetcodeProblem(2Sum)", "2Sum is not an EasyLeetcodeProblem.", "-EasyLeetcodeProblem(2Sum)", "2Sum - EasyLeetcodeProblem(x))"]}
{"id": "folio_train_2183", "nl": "4Sum is a Leetcode problem recommended to the novice or is hard.", "fol": "(IsRecommendedToNovices(Foursum) | IsHardProblem(Foursum))", "prediction": ["all x.((LeetcodeProblem(x) & (Novell(x) | Hard(x))) -> 4Sum(x))", "all x.(4Sum(x) -> (LeetcodeProblem(x) & (Novell(x) | Hard(x))))", "all x.((LeetcodeProblem(x) & (Novel(x) | Hard(x))) -> 4Sum(x))", "(LeetcodeProblem(4Sum) & (RecommendedToNeptune(4Sum) | Hard(4Sum)))", "All x y.((LeetcodeProblem(x) & Novice(y)) -> (RecommendedTo(x,y) | Hard(x,y)))", "(RecommendedToNoveese(4Sum) | Hard(4Sum))", "all x.(4Sum(x) -> (LeetcodeProblem(x) & (RecommendedToNovee(x) | Hard(x))))", "all x.(Sum(x) -> (LeetcodeProblem(x) & (Novell(x) | Hard(x))))", "(LeetcodeProblem(4Sum) & (RecommendedToNeptune(4Sum) | Hard(4Sum)))", "all x.((LeetcodeProblem(x) & (NeophytcodeProblem(x) | HardProblem(x))) -> 4Sum(x))", "all x.((LeetcodeProblem(x) & (Novell(x) | Hard(x))) -> 4Sum(x))", "all x.(Sum(x) -> (LeetcodeProblem(x) & (NeptuneProblem(x) | HardProblem(x))))", "All x y.((LeetcodeProblem(x) & Nomad(y)) -> (RecommendedTo(x,y) | Hard(y)))", "all x.(4Sum(x) -> (LeetcodeProblem(x) & (Neptune(x) | Hard(x))))", "all x.((LeetcodeProblem(x) & (Novice(x) | Hard(x))) -> 4Sum(x))", "all x.(4Sum(x) -> (LeetcodeProblem(x) & (Novel(x) | Hard(x))))"]}
{"id": "folio_train_2184", "nl": "4Sum is neither a 2Sum Leetcode problem recommended to the novice nor a Leetcode problem that's hard.", "fol": "(-(IsRecommendedToNovices(Twosum) & IsEasyProblem(Foursum)) & -IsHardProblem(Foursum))", "prediction": ["all x.((LeetcodeProblem(x) & -(LeetcodeProblem(x) & RecommendedToNovee(x)) | LeetcodeProblem(x) & Hard(x))) -> 4Sum(x))", "(-(LeetcodeProblem(x) & RecommendedToNovee(x)) | LeetcodeProblem(x) & Hard(x)))", "all x.((LeetcodeProblem(x) & -RecommendedToNovee(x) & -HardLeetcodeProblem(x)) -> 4Sum(x))", "all x.(4Sum(x) -> (-(LeetcodeProblem(x,2) & RecommendedToNovee(x)) | LeetcodeProblem(x,2) & Hard(x)))", "-((LeetcodeProblem(x) & 2Sum(x) & -LeetcodeProblem(x) & Hard(x)))", "(-(LeetcodeProblem(x) & 2Sum(x) & NoNovell(x)) | LeetcodeProblem(x) & Hard(x)))", "(-(RecommendedToNovee(x) | Hard(x))) -> 4Sum(x))", "(-(LeetcodeProblem(x) & RecommendedToNovel(x)) | LeetcodeProblem(x) & Hard(x)))", "all x.((LeetcodeProblem(x) & -RecommendedToNovel(x) & -HardLeetcodeProblem(x)) -> 4Sum(x))", "((LeetcodeProblem(x) & 2Sum(x)) | LeetcodeProblem(x) & Hard(x)))", "all x.(4Sum(x) -> ((NovelLeetcodeProblem(x) & -Recommended(x) & -HardLeetcodeProblem(x))))", "all x.((LeafcodeProblem(x) & -(LeafcodeProblem(x) & RecommendedToNovee(x)) | LeetcodeProblem(x) & Hard(x))) -> 4Sum(x))", "all x y.((LeafcodeProblem(x) & LeetcodeProblem(y) & NoNovell(x) & -RecommendedTo(x,y)) -> Hard(y))", "all x.(4Sum(x) -> (-(LeetcodeProblem(x) & RecommendedToNovee(x)) | LeetcodeProblem(x) & Hard(x)))", "-((LeetcodeProblem(x) & 2Sum(x) & -LeetcodeProblem(x) & Hard(x)))", "all x.((LeafcodeProblem(x) & -RecommendedToNeptune(x) & -HardLeafcodeProblem(x)) -> 4Sum(x))"]}
{"id": "folio_train_2185", "nl": "Show Your Love is a song recorded by the South Korean boy band BtoB 4u.", "fol": "(IsSong(Showyourlove) & IsRecordedBy(Showyourlove,Btob4u) & IsSouthKorean(Btob4u) & IsBoyBand(Btob4u))", "prediction": ["ShowYourLove(Song) -> RecordedBySouth KoreanBandBtoB4u(Song))", "All x.(ShowYourLove(x) -> RecordedBySouth KoreanBandBtoB4u(x))", "ShowYourLove(Song) -> (RecordedBySouth KoreanBand(BtoB4u) & South KoreanBand(BtoB4u)))", "ShowYourLove (Song(SaysBand(SaysBand(SaysBand(SaysBand(SaysBand(SaysBand(SaysBand(SaysBand(SaysBand(SaysBand(SaysBand(SaysBand(SaysBand(SaysBand(SaysBand(SaysBand(Say))))", "ShowYourLove(x) -> (South KoreanBandBtoB4u(x) & RecordedBy(x,y)))", "(ShowYourLove(Song) & RecordedBySouth KoreanBandBtoB4u(Song))", "All x y.((ShowYourLove(x) & South KoreanBand(y)) -> RecordedBy(x,y))", "ShowYourLove(Song) & RecordedBySouth KoreanBandBtoB4u(Song)", "All x.(ShowYourLove(x) -> (RecordedBySouth KoreanBand(x) & BtoB4u(x)))", "all x.(ShowYourLove(x) -> (Song(x) & RecordedBySouthKoreanBandBtoB4u(x)))", "ShowYourLove(song,s) -> RecordedBySouthKoreanBandBtoB4u(s))", "(ShowYourLove(Song) & RecordedBySouthKoreanBand(SBtoB4u))", "(ShowYourLove(ShowYourLove) -> RecordedBySouth KoreanBand(SkodaBand4u))", "ShowYourLove(Song) - RecordedBySouthKoreanBandBtoB4u(Song))", "Show YourLove (song) & South KoreanBandBtoB4u(s) & RecordedBy(s) & South KoreanBand(s) & RecordedBy(s))", "ShowYourLove is a song recorded by South KoreanBandBtoB4u."]}
{"id": "folio_train_2186", "nl": "The lead single of the extended play Inside is Show Your Love.", "fol": "(IsExtendedPlay(Inside) & IsLeadSingleOf(Showyourlove,Inside))", "prediction": ["All x.((LeadSingle(x) & ExtendedPlayInside(x)) -> ShowYourLove(x))", "(LeadSingle(x) & ExtendedPlayInside(x))", "all x y.((ExtendedPlay(x) & LeadSingle(y)) -> ShowYourLove(y))", "all x y.((LeadSingle(x) & ExtendedPlayInside(y)) -> ShowYourLove(x,y))", "LedSingleOfExtendedPlayInside(x) -> ShowYourLove(x))", "The lead single of ExtendedPlayInside(x) -> ShowYourLove(x))", "All x.(ExtendedPlayInside(x) -> ShowYourLove(x))", "(LeadSingleOfExtendedPlayInside(LeadSingle,Inside) & ShowYourLove(LeadSingle,Inside))", "all x.((LeadSingle(x) & ExtendedPlayInside(x)) -> ShowYourLove(x))", "LeadSingleOfExtendedPlayInside(x) -> ShowYourLove(x))", "(LeadSingle(x) & ExtendedPlayInside(x))", "All x.((LeadSingle(x) & ExtendedPlay(x)) -> ShowYourLove(x))", "The LeadSingleOfExtendedPlayInside(ShowYourLove)", "all x y.((ExtendedPlayInside(x) & LeadSingle(y)) -> ShowYourLove(y))", "All x.(LeadSingle(x) -> ShowYourLove(x))", "LedSingleOfExtendedPlayInside(x) -> ShowYourLove(x))"]}
{"id": "folio_train_2187", "nl": "Show Your Love contains a hopeful message.", "fol": "ContainsMessage(Showyourlove,Hopefulmessage)", "prediction": ["all x.(ShowYourLove(x) -> ContainsHopefulMessage(x))", "ShowYourLove(x) ContainsHopefulMessage(x))", "all x.((ShowYourLove(x) & HopefulMessage(x)) -> ShowYourLove(x))", "ShowYourLove(x) -> ContainsHopefulMessage(x))", "(ContainsHopefulMessage(ShowYourLove))", "ShowYourLove(ShowYourLove) ContainsHopefulMessage(ShowYourLove)", "All x y.((ShowYourLove(x) & HopefulMessage(y)) -> ShowYourLove(x,y))", "All x.(ShowYourLove(x) -> HopefulMessage(x))", "ShowYourLoveContainsHopefulMessage(x)", "all x.((ShowYourLove(x) & HopefulMessage(x)) -> ShowYourLove(x))", "ShowYourLove(x) ContainsHopefulMessage(x))", "(ContainsHopefulMessage(ShowYourLove))", "All x y.((ShowYourLove(x) & HopefulMessage(y)) -> Contains(x,y))", "All x.(ShowYourLove(x) -> HopefulMessage(x))", "all x.((ShowYourLove(x) & HopefulMessage(x)) -> Contains(x,y))", "all x.(ShowYourLove(x) -> ContainsHopefulMessage(x))"]}
{"id": "folio_train_2188", "nl": "BtoB 4u member Hyunsik wrote Show Your Love.", "fol": "(IsMemberOf(Hyunsik,Btob4u) & WroteSong(Hyunsik,Showyourlove))", "prediction": ["(BtoB4uMember(Hyunsik) & WritesShowYourLove(Hyunsik))", "Hyunsik, BtoB4u member, wrote ShowYourLove.", "all x.(BtoB4uMember(x) -> HyunsikWrittenShowYourLove(x))", "BtoB4u member Hyunsik wrote ShowYourLove(x)", "all x.((BtoB4uMember(x) & Hyunsik(x)) -> WritesShowYourLove(x))", "All x.(BtoB4u(x) -> HyunsikWrittenShowYourLove(x))", "(BtoB4uMemberHyunsik wrote ShowYourLove(Hyunsik)", "Hyunsik, a member of BtoB4u, wrote ShowYourLove.", "Hyunsik, BtoB4u member, wrote ShowYourLove.", "(BtoB4uMember(Hyunsik) & WritesShowYourLove(Hyunsik))", "BtoB4uMemberHyunsik wrote ShowYourLove(h)", "BtoB4u member Hyunsik wrote ShowYourLove.", "all x.((BtoB4uMember(x) & Hyunsik(x)) -> WritesShowYourLove(x))", "(BtoB4u(MemberHyunsik) & ShowYourLove(MemberHyunsik))", "All x.(BtoB4uMember(x) -> HyunsikWrittenShowYourLove(x))", "Hyunsik, BtoB4u member, wrote ShowYourLove(x)"]}
{"id": "folio_train_2189", "nl": "There is a music video for Show Your Love.", "fol": "HasMusicVideoFor(Showyourlove)", "prediction": ["exists x.(MusicVideo(x) & ShowYourLove(x))", "Exists x.(MusicVideo(x) & ShowYourLove(x))", "exists x.(MusicVideo(x) & ShowYourLove(x))", "Exists MusicVideoForShowYourLove(x)", "Exists x.(MusicVideo(x) & ShowYourLove(x))", "all x y.((MusicVideo(x) & ShowYourLove(y)) -> AvailableFor(x,y))", "exists x.(MusicVideo(x) & ForShowYourLove(x))", "exists x.(MusicVideo(x) & ShowYourLove(x))", "(exists x.(MusicVideo(x) & ShowYourLove(x)))", "Exists x.(MusicVideo(x) & ForShowYourLove(x))", "exists x y.(MusicVideo(x) & ShowYourLove(y))", "exists x.(MusicViolence(x) & ShowYourLove(x))", "exists x.(MusicVideoForShowYourLove(x))", "exists x.(MusicVideo(x) & ForShowYourLove(x))", "exists x.(MusicVideo(x) & ShowYourLove(x))", "exists x.(MusicVideo(x) & ShowYourLove(x))"]}
{"id": "folio_train_2190", "nl": "Show your love wasn't written by a member of a boy band.", "fol": "-exists x.(IsMemberOf(x,Btob4u) & WroteSong(x,Showyourlove))", "prediction": ["all x y.((Love(x) & MemberOfBirdBand(y)) -> -WrittenBy(x,y))", "all x.((Love(x) & -BirdBand(x)) -> ShowsLove(x))", "all x y.((MemberOfBirdBand(x) & MemberOfBabyBand(y)) -> ShowsLove(x,y))", "all x y.((Living(x) & MemberOfBirdBand(y)) -> -WrittenBy(x,y))", "all x.((Love(x) & -BabyBand(x)) -> ShowsLove(x))", "(-WrittenByBoyBand(Love))", "all x.((MemberOfBirdBand(x) & -WrittenBy(x,BabyBand)) -> ShowLove(x))", "all x y z.((Love(x) & MemberOfBirdBand(y) & MemberOf(z,y)) -> -WrittenBy(x,y))", "all x.((Living(x) & -BirdBand(x)) -> ShowsLove(x))", "all x y.((Love(x) & BoyBand(y)) -> -WrittenBy(x,y))", "(-writtenByBoyBand(Love) & -WrittenByBand(Love,Band))", "(-WrittenByBird(Love))", "all x.((Love(x) & -BoyBand(x)) -> ShowsLove(x))", "(-writtenByBird(Love))", "all x.(Love(x) -> -WrittenByBird(x))", "exists x.(Love(x) & -WrittenBy(x,BoyBand))"]}
{"id": "folio_train_2191", "nl": "A lead single of inside contains a a hopeful message.", "fol": "exists x.(IsLeadSingleOf(x,Inside) & ContainsMessage(x,Hopefulmessage))", "prediction": ["all x.(LeadSingle(x) -> InsideContainsHopefulMessage(x))", "all x y.((LeadSingle(x) & Inside(x)) -> ContainsHopefulMessage(x,y))", "all x.((LeadSingle(x) & Inside(x)) -> ContainsHopefulMessage(x))", "all x.(LeadSingleOfInside(x) -> ContainsHopefulMessage(x))", "all x.(LeadSingle(x) -> ContainsHopefulMessage(x))", "all x y.((LeadSingle(x) & Inside(x)) -> ContainsHopefulMessage(x,y))", "all x y z.((LeadSingle(x) & Inside(y) & HopefulMessage(z)) -> Contains(x,y,z))", "all x.((LeadSingle(x) & Inside(x)) -> ContainsHopefulMessage(x))", "exists an inside leadsingle(x) & containsHopefulMessage(x))", "all x y.((LeadSingle(x) & Inside(x)) -> ContainsHopefulMessage(y))", "all x.(LeadSingleOfInside(x) -> ContainsHopefulMessage(x))", "all x.(LeadSingle(x) -> InsideContainsHopefulMessage(x))", "exists x.(LeadSingle(x) & Inside(x) & ContainsHopefulMessage(x))", "all x y.((LeadSingle(x) & Inside(x) & HopefulMessage(y)) -> Contains(x,y))", "all x y.((LeadSingle(x) & Inside(y)) -> ContainsHopefulMessage(x,y))", "exists x.(LeadSingle(x) & Inside(x) & HopefulMessage(x))"]}
{"id": "folio_train_2192", "nl": "Hyunsik is Korean.", "fol": "Korean(Hyunsik)", "prediction": ["Hyunsik is Korean.", "all x.(Hyunsik(x) -> Korean(x))", "(Korean(Hyunsik)", "Hyunsik (Korean)", "-Korean(Hyunsik)", "all x.(Hyunsik(x) -> Korean(x))", "- Korean(Hyunsik)", "(Korean(Hyunsik)", "Hyunsik is Korean.", "- Korean.", "Hyunsik (Korean)", "(Korean(Hyunsik)", "Hyunsik is Korean.", "Hyunsik (Korean)", "Hyunsik ist Korean.", "Hyunsik is Korean."]}
{"id": "folio_train_2193", "nl": "All tables are round.", "fol": "all x.(IsTable(x) -> IsRound(x))", "prediction": ["all x.(Table(x) -> Round(x))", "all x.(Table(x) -> Round(x))", "(all x.(Table(x) -> Round(x)))", "all x.(Table(x) -> Round(x))", "(all x.(Table(x) -> Round(x))", "All x y.((Table(x) & Table(y)) -> Round(x))", "all x.(Table(x) -> Round(x))", "(all x.(Table(x) -> Round(x))", "all x.(Table(x) -> Round(x))", "all x.(Table(x) -> Round(x))", "all x.(Table(x) -> Round(x))", "all x.(Table(x) -> Round(x))", "all x.(Table(x) -> Round(x))", "all x.(Table(x) -> Round(x))", "All x.(Table(x) -> Round(x))", "all x.(Table(x) -> Round(x))"]}
{"id": "folio_train_2194", "nl": "Some furniture are tables.", "fol": "exists x.(IsFurniture(x) & IsTable(x))", "prediction": ["exists x.(Furniture(x) & Table(x))", "exists x.(Furniture(x) & Table(x))", "exists x.(Furniture(x) & Table(x))", "exists x.(Furniture(x) & Table(x))", "exists x.(Furniture(x) & Table(x))", "exists x y.(Furniture(x) & Table(y))", "exists x.(Furniture(x) & Table(x))", "exists x.(Firma(x) & Table(x))", "exists x.(Furniture(x) & Table(x))", "exists x.(Furniture(x) & Table(x))", "exists x.(Firma(x) & Table(x))", "exists x.(Furniture(x) & Table(x))", "exists x.(Furniture(x) & Table(x))", "exists x.(Furniture(x) & Table(x))", "exists x.(Furniture(x) & Table(x))", "exists x.(Furniture(x) & Table(x))"]}
{"id": "folio_train_2195", "nl": "Some furniture are round.", "fol": "exists x.(IsFurniture(x) & IsRound(x))", "prediction": ["exists x.(Furniture(x) & Round(x))", "exists x.(Furniture(x) & Round(x))", "exists x.(Furniture(x) & Round(x))", "exists x.(Furniture(x) & Round(x))", "exists x.(Furniture(x) & Round(x))", "exists x.(Furniture(x) & Round(x))", "exists x.(Furniture(x) & Round(x))", "exists x.(Firma(x) & Round(x))", "exists x.(Firewall(x) & Round(x))", "exists x.(Furniture(x) & Round(x))", "exists x.(Furniture(x) & Round(x))", "exists x.(Furniture(x) & Round(x))", "exists x.(Furniture(x) & Round(x))", "exists x.(Furniture(x) & Round(x))", "exists x.(Furniture(x) & Round(x))", "exists x.(Furniture(x) & Round(x))"]}
{"id": "folio_train_2196", "nl": "All juvenile delinquents are maladjusted individuals.", "fol": "all x.(IsJuvenileDelinquent(x) -> IsMaladjustedIndividual(x))", "prediction": ["all x.(JuvenileDelinquent(x) -> MaladjustedIndividual(x))", "all x.(JuvenileDelinquent(x) -> MaladjustedIndividual(x))", "(MaladjustedIndividual(juvenileDelinquent)", "all x.(JewelryDelinquent(x) -> MaladjustedIndividual(x))", "all x y.((JuvenileDelinquent(x) & Individual(y)) -> Maladjusted(x,y))", "all x y.((JuvenileDelinquent(x) & MaladjustedIndividual(y)) -> MaladjustedIndividual(x))", "all x.((JuvenileDelinquent(x) & MaladjustedIndividual(x)) -> MaladjustedIndividual(x))", "all x.(JuvenileDelinquent(x) -> MaladjustedIndividual(x))", "all x.(JugendDeflict(x) -> MaladjustedIndividual(x))", "all x.(JuvenileDeflict(x) -> MaladjustedIndividual(x))", "all x.(JewelryDelinquent(x) -> MaladjustedIndividual(x))", "all x.(JuvenileDelinquent(x) -> MaladjustedIndividual(x))", "all x.(JuvenileDelinquent(x) -> MaladjustedIndividual(x))", "all x.(JewelryDelinquent(x) -> MaladjustedIndividual(x))", "all x.(JewelerDelinquent(x) -> MaladjustedIndividual(x))", "all x.(JuvenileDelinquent(x) -> MaladjustedIndividual(x))"]}
{"id": "folio_train_2197", "nl": "Some juvenile delinquents are products of broken homes.", "fol": "exists x.(IsJuvenileDelinquent(x) & IsProductOfBrokenHome(x))", "prediction": ["exists x.(JuvenileDelinquent(x) & BrokenHome(x))", "exists x.(JuvenileDelinquent(x) & BrokenHome(x))", "exists x.(JuvenileDelinquent(x) & BrokenHome(x))", "exists x.(JuvenileDefiant(x) & BrokenHome(x))", "all x y.((JuvenileDelinquent(x) & BrokenHome(y)) -> ProductOf(x,y))", "exists x y.(JuvenileDelinquent(x) & BrokenHome(y))", "exists x.(JugendDelinquent(x) & BrokenHome(x))", "exists x.(Jeweler(x) & Delinquent(x) & BrokenHome(x))", "exists x.(JuvenileDelinquent(x) & BrokenHome(x))", "all x y.((JuvenileDelinquent(x) & BrokenHome(y)) -> ProductOf(x,y))", "exists x.(JewelryDelinquent(x) & BrokenHome(x))", "exists x.(JugendDefiant(x) & BrokenHome(x))", "exists x.(JuvenileDeflict(x) & BrokenHome(x))", "exists x.(JewelryDelinquent(x) & BrokenHomes(x))", "exists x.(JewelryDelinquent(x) & BreakedHome(x))", "exists x.(JuvenileDelinquent(x) & BrokenHome(x))"]}
{"id": "folio_train_2198", "nl": "Some maladjusted individuals are products of broken homes.", "fol": "exists x.(IsMaladjustedIndividual(x) & IsProductOfBrokenHome(x))", "prediction": ["exists x.(MaladjustedIndividual(x) & BrokenHome(x))", "exists x.(MaladjustedIndividual(x) & ProductOfBrokenHomes(x))", "exists x.(MaladjustedIndividual(x) & BrokenHome(x))", "exists x.(MaladjustedIndividual(x) & ProductOfBrokenHomes(x))", "all x y.((MaladjustedIndividual(x) & BrokenHome(y)) -> ProductOf(x,y))", "exists x y.(MaladjustedIndividual(x) & BrokenHome(y))", "all x y.((Individual(x) & Maladjusted(x) & BrokenHome(y)) -> ProductOf(x,y))", "exists x.((Individual(x) & Maladjusted(x)) -> BrokenHome(x))", "exists x.(Maladjusted(x) & ProductOfBrokenHomes(x))", "exists x.(MaladjustedIndividual(x) & BrokenHome(x))", "exists x.(Maladjusted(x) & Individual(x) & BrokenHome(x))", "exists x.(MaladjustedIndividual(x) & ProductOfBrokenHomes(x))", "exists x.(Maladjusted(x) & ProductOfBrokenHomes(x))", "exists x.(MaladjustedIndividual(x) & BrokenHome(x))", "exists x.(Maladjusted(x) & Individual(x) & BrokenHome(x))", "exists x.(MaladjustedIndividual(x) & BrokenHomes(x))"]}
{"id": "folio_train_2199", "nl": "Either brain reading or brain decoding. ", "fol": "all x.(EngagesInBrainReading(x) | EngagesInBrainDecoding(x))", "prediction": ["all x.(BrainReading(x) | BrainDecoding(x))", "(BirdReading(b) | BrainDecoding(c))", "all x.((BrainReading(x) | BrainDecoding(x)) -> (BodyReading(x) | BrainDecoding(x)))", "(BirdReading(Bird) | BrainDecoding(Bird))", "all x.(BirdReading(x) | BrainDecoding(x))", "((BrainReading(Bird) | BrainDecoding(Bird)))", "(BodyReading(Bird) | BrainDecoding(Bird))", "(BrainReading(b) | BrainDecoding(c))", "((BrainReading(Berry) | BrainDecoding(Berry)))", "exists x.(BrainReading(x) | BrainDecoding(x))", "(BirdReading(b) | BrainDecoding(b))", "all x.(BirdReading(x) | BrainDecoding(x))", "all x.((BrainReading(x) | BrainDecoding(x)) -> (BodyReading(x) | BrainDecoding(x)))", "exists x y.(BrainReading(x) | BrainDecoding(y))", "exists x.(BrainReading(x) | BrainDecoding(x))", "all x.(BodyReading(x) | BrainDecoding(x))"]}
{"id": "folio_train_2200", "nl": "All brain decoding is extracting information from BOLD signals.", "fol": "all x.(EngagesInBrainDecoding(x) -> ExtractsInfoFromBOLDSignals(x))", "prediction": ["all x.(BrainDecoding(x) -> ExtractsInformationFromBOLDSignals(x))", "all x y.((BrainDecoding(x) & BOLDSignals(y)) -> ExtractsInformationFrom(x,y))", "all x.(BrainDecoding(x) -> ExtractsInformationFromBOLDSignals(x))", "ALL TEXT(BUDGETDecoding(x) -> ExtractsInformationFromBOLDSignals(x))", "all x y.((BrainDecoding(x) & BOLDSignals(y)) -> ExtractsInformation(x,y))", "ALLBODYDECORRECTION(BOLDSignals) -> ExtractsInformation(BOLDSignals,BOLDSignals))", "all x.(BodyDecoder(x) -> ExtractsInformationFromBOLDSignals(x))", "all x.(BrainDecoding(x) -> ExtractsInformationFromBOLDSignals(x))", "(all x.(BrainDecoding(x) -> ExtractsInformationFromBOLDSignals(x)))", "all x y.((BrainDecoding(x) & BOLDSignals(y)) -> ExtractsInformationFrom(x,y))", "all x.(BodyDecoding(x) -> ExtractsInformationFromBOLDSignals(x))", "all x.(BodyDecodes(x) -> ExtractsInformationFromBOLDSignals(x))", "all x.(BrainDecoding(x) -> ExtractsInformationFromBOLDSignals(x))", "all x y.((BrainDecoding(x) & BOLDSignals(y)) -> ExtractsInformation(x,y))", "all x.(BrainDecoding(x) -> ExtractsInformationFromBOLDSignals(x))", "all x.(BrainDecoding(x) -> ExtractingInformationFromBOLDSignals(x))"]}
{"id": "folio_train_2201", "nl": "No extracting information from BOLD signals is without statistical pattern analysis. ", "fol": "all x.(ExtractsInfoFromBOLDSignals(x) -> -LacksStatisticalPatternAnalysis(x))", "prediction": ["all x.((ExtractingInformationFromBOLDSignals(x) & -StatisticalPatternAnalysis(x)) -> -ExtractsInformationFromBOLDSignals(x))", "all x.((ExtractingInformation(x) & BOLDSignals(x)) -> -StatisticalPatternAnalysis(x))", "-exists x.(BOLDSignals(x) & ExtractsInformation(x))", "-exists x.(ExtractingInformationFromBOLDSignals(x) & -StatisticalPatternAnalysis(x))", "all x.(ExtractingInformationFromBOLDSignals(x) -> -StatisticalPatternAnalysis(x))", "-(ExtractingInformationFromBOLDSignals(x) & -StatisticalPatternAnalysis(x))", "(exists x.(BOLDSignal(x) & ExtractsInformation(x)) & -StatisticPatternAnalysis(x))", "all x y.((ExtractingInformation(x) & BOLDSignals(y)) -> -StatisticalPatternAnalysis(x,y))", "all x.((ExtractingInformationFromBOLDSignals(x) & -StatisticalPatternAnalysis(x)) -> -StatisticPatternAnalysis(x))", "all x y.((ExtractingInformationFromBOLDSignals(x) & StatisticPatternAnalysis(y)) -> -(ExtractsInformationFromBOLDSignals(x,y) & -StatisticalPatternAnalysis(x,y)))", "(-exists x.(BOLDSignal(x) & ExtractsInformation(x,y)) & -exists z.(StatisticalPatternAnalysis(z) & ExtractsInformation(x,z))))", "-exists x.(BOLDSignal(x) & ExtractsInformation(x) & -StatisticalPatternAnalysis(x))", "all x.((ExtractingInformation(x) & BOLDSignals(x)) -> -StatisticalPatternAnalysis(x))", "all x.(ExtractingInformationFromBOLDSignals(x) -> -StatisticalPatternAnalysis(x))", "-exists x.(BOLDSignals(x) & ExtractsInformation(x))", "-exists x.(ExtractingInformationFromBOLDSignals(x) & -StatisticalPatternAnalysis(x))"]}
{"id": "folio_train_2202", "nl": "Writing a novel is without statistical pattern analysis.", "fol": "all x.(EngagesInNovelWriting(x) -> LacksStatisticalPatternAnalysis(x))", "prediction": ["all x.(Novel(x) -> -StatisticalPatternAnalysis(x))", "all x y.((Novel(x) & Novel(y)) -> -StatisticalPatternAnalysis(x,y))", "all x.(Novel(x) -> -StatisticalPatternAnalysis(x))", "(WritingNovel(x) -> WithoutStatisticalPatternAnalysis(x))", "(-StatisticalPatternAnalysis(Novel) & Writes(Novel))", "all x y.(Novel(x) & Novel(y) & -StatisticalPatternAnalysis(x,y)) -> -StatisticalPatternAnalysis(x,y))", "all x.((Novel(x) & -StatisticalPatternAnalysis(x)) -> -StatisticalPatternAnalysis(x))", "all x y.((Novel(x) & Novel(y)) -> -StatisticalPatternAnalysis(x,y))", "all x.(Novel(x) -> -StatisticalPatternAnalysis(x))", "all x.(Novel(x) -> (-StatisticPatternAnalysis(x) & -StatisticalPatternAnalysis(x)))", "all x y.((Novel(x) & Novel(y)) -> -StatisticalPatternAnalysis(x,y))", "all x.(Novel(x) -> -StatisticalPatternAnalysis(x))", "all x y.(Novel(x) -> -StatisticalPatternAnalysis(y))", "all x.(WritingNovel(x) -> -StatisticalPatternAnalysis(x))", "all x.(Novel(x) -> -StatisticalPatternAnalysis(x))", "all x.(Novel(x) -> -StatisticalPatternAnalysis(x))"]}
{"id": "folio_train_2203", "nl": "If multivoxel (pattern) analysis is without statistical pattern analysis and a brain reading, then multivoxel (pattern) analysis is without statistical pattern analysis and brain decoding.", "fol": "((LacksStatisticalPatternAnalysis(ConductsMultivoxelPatternAnalysis) & EngagesInBrainReading(ConductsMultivoxelPatternAnalysis)) -> (LacksStatisticalPatternAnalysis(ConductsMultivoxelPatternAnalysis) & EngagesInBrainDecoding(ConductsMultivoxelPatternAnalysis)))", "prediction": ["all x.((Multivoxel(x) & -StatisticalPatternAnalysis(x) & BrainReading(x)) -> -StatisticalPatternAnalysis(x) & BrainDecoding(x))", "all x y.((Multivoxel(x) & Pattern(y) & -StatisticalPatternAnalysis(x,y) & BrainReading(x)) -> (-StatisticalPatternAnalysis(x,y) & -BrainDecoding(x,y)))", "all x.((Multivoxel(x) & -StatisticalPatternAnalysis(x) & BrainReading(x)) -> (-StatisticalPatternAnalysis(x) & BrainDecoding(x)))", "(all x.((Multivoxel(x) & -StatisticalPatternAnalysis(x) & BrainReading(x)) -> -StatisticalPatternAnalysis(x) & BrainDecoding(x)))", "all x.((Multivoxel(x) & WithoutStatisticalPatternAnalysis(x) & WithoutBrainReading(x)) -> -WithStatisticalPatternAnalysis(x) & WithoutBrainDecoding(x))", "all x y.((Multivoxel(x) & Pattern(y) & -StatisticalPatternAnalysis(y,x) & BrainReading(y)) -> -StatisticalPatternAnalysis(x,y) & BrainDecoding(x,y))", "all x.((Multivoxel(x) & -StatisticalPatternAnalysis(x) & BrainReading(x)) -> -StatisticalPatternAnalysis(x) & BrainDecoding(x))", "all x y.((Multivoxel(x) & PatternAnalysis(x) & BrainReading(y)) -> (-StatisticalPatternAnalysis(x) & -BrainDecoding(x)))", "(all x.((Multivoxel(x) & -StatisticalPatternAnalysis(x) & BrainReading(x)) -> -StatisticalPatternAnalysis(x) & BrainDecoding(x)))", "all x.((Multivoxel(x) & WithoutStatisticalPatternAnalysis(x) & WithoutBrainReading(x)) -> (-StatisticalPatternAnalysis(x) & -BrainDecoding(x)))", "all x.((Multivoxel(x) & -StatisticalPatternAnalysis(x) & BrainReading(x)) -> (-StatisticalPatternAnalysis(x) & -BrainDecoding(x)))", "all x.((Multivoxel(x) & StatisticPatternAnalysis(x) & BrainReading(x)) -> (-StatisticalPatternAnalysis(x) & BrainDecoding(x)))", "all x.(Multivoxel(x) -> (-StatisticalPatternAnalysis(x) & -BrainReading(x)))", "(all x.((Multivoxel(x) & StatisticPatternAnalysis(x) & WithoutBrainReading(x)) -> -StatisticalPatternAnalysis(x) & WithoutBrainDecoding(x)))", "(all x.((Multivoxel(x) & -StatisticalPatternAnalysis(x) & BrainReading(x)) -> -StatisticalPatternAnalysis(x) & BrainDecoding(x)))", "all x.((Multivoxel(x) & -StatisticalPatternAnalysis(x) & BrainReading(x)) -> -StatisticalPatternAnalysis(x) & BrainDecoding(x))"]}
{"id": "folio_train_2204", "nl": "Multivoxel (pattern) analysis is a brain decoding.", "fol": "EngagesInBrainDecoding(ConductsMultivoxelPatternAnalysis)", "prediction": ["all x.(Multivoxel(x) -> (BirdDecoding(x) & BrainDecoding(x)))", "(Multivoxel(pattern) Analysis(multivoxel) -> BrainDecoding(multivoxel))", "all x.(Multivoxel(x) -> (BrainDecoding(x) & Pattern(x)))", "all x y.((Multivoxel(x) & Pattern(y)) -> BrainDecoding(x,y))", "(Multivoxel(pattern)Analysis) -> BrainDecoding(multivoxel))", "all x.(Multivoxel(x) -> BrainDecoding(x))", "(Multivoxel(pattern) -> BrainDecoding(multivoxel(pattern))", "(MultivoxelAnalysis(Multivoxel) & BrainDecoding(Multivoxel))", "(Multivoxel(pattern) Analysis) -> BrainDecoding(multivoxel(pattern))", "all x.(Multivoxel(x) -> (BodyDecoding(x) & BrainDecoding(x)))", "all x y.((Multivoxel(x) & Pattern(y)) -> BrainDecoding(x,y))", "all x y.((Multivoxel(x) & Pattern(y)) -> DecodingBrain(x,y))", "all x.(Multivoxel(x) -> BrainDecoding(x))", "all x.(Multivoxel(x) -> (BirdDecoding(x) & BrainDecoding(x)))", "all x.(Multivoxel(x) -> (BrainDecoding(x) | BrainDecoding(x)))", "all x.(Multivoxel(x) -> (BirdDecoding(x) & BrainDecoding(x)))"]}
{"id": "folio_train_2205", "nl": "Multivoxel (pattern) analysis is the writing of a novel.", "fol": "EngagesInNovelWriting(ConductsMultivoxelPatternAnalysis)", "prediction": ["all x.(Multivoxel(x) -> (WritingNovel(x) & Pattern(x)))", "all x y.((Multivoxel(x) & Novel(y)) -> Writes(x,y))", "(Multivoxel(pattern) Analysis(multiple) -> WritesNovel(multiple))", "all x.(Multivoxel(x) -> (WritingNovel(x) & Pattern(x)))", "all x y.((Multivoxel(x) & Novel(y)) -> (Writing(x,y) & Pattern(x)))", "(MultivoxelAnalysis(Multivoxel) & (WritingNovel(multiple) | WritingNovel(multiple))))", "(Multivoxel(pattern)Analysis) -> WritesNovel(multivoxel(pattern))", "all x y z.((Multivoxel(x) & Pattern(y) & Novel(z)) -> Writes(x,y,z))", "all x.(Multivoxel(x) -> (WritingOfNovel(x) & Pattern(x)))", "(Multivoxel(pattern) Analysis(multiple) -> WritingOfNovel(multiple))", "(MultivoxelAnalysis(pattern) -> WritesNovel(x))", "all x y.((Multivoxel(x) & Pattern(y) & Novel(z)) -> Writes(x,y,z))", "all x y.((Multivoxel(x) & Novel(y)) -> Writes(x,y))", "all x.(Multivoxel(x) -> (WritingNovel(x) | WritingNovel(x)))", "all x.(Multivoxel(x) -> (Writing(x) & Novel(x)))", "all x.(Multivoxel(x) -> WritesNovel(x))"]}
{"id": "folio_train_2206", "nl": "Multivoxel (pattern) analysis is without statistical pattern analysis and writing a novel.", "fol": "(LacksStatisticalPatternAnalysis(ConductsMultivoxelPatternAnalysis) & EngagesInNovelWriting(ConductsMultivoxelPatternAnalysis))", "prediction": ["all x.(Multivoxel(x) -> (-StatisticalPatternAnalysis(x) & -WritingNovel(x)))", "(Multivoxel(pattern)Analysis) -> (-StatisticalPatternAnalysis(pattern) & -WritingNovel(pattern)))", "all x y.((Multivoxel(x) & Pattern(y)) -> (-StatisticalPatternAnalysis(x,y) & -WritingNovel(x,y)))", "(Multivoxel(pattern) Analysis(multiple) -> (-StatisticalPatternAnalysis(multiple) & -WritingNovel(multiple)))", "(-StatisticalPatternAnalysis(Multivoxel) & -WritingNovel(Multivoxel))", "(Multivoxel(pattern)Analysis(multiple) -> (-StatisticalPatternAnalysis(multiple) & -WritingNovel(multiple)))", "all x.(Multivoxel(x) -> (-StatisticalPatternAnalysis(x) & -WritingNovel(x)))", "(all x.(Multivoxel(x) -> (Pattern(x) & -StatisticalPatternAnalysis(x) & Novel(x)))", "all x.(Multivoxel(x) -> (PatternAnalysis(x) & -StatisticalPatternAnalysis(x) & -WritingNovel(x)))", "all x y.((Multivoxel(x) & Pattern(y)) -> (-StatisticalPatternAnalysis(x,y) & WritesNovel(x,y)))", "all x.(Multivoxel(x) -> (-StatisticalPatternAnalysis(x) & -WritingNovel(x)))", "all x.(Multivoxel(x) -> (-StatisticalPatternAnalysis(x) & WritesNovel(x)))", "all x y.((Multivoxel(x) & Pattern(y)) -> (-StatisticalPatternAnalysis(x,y) & WritingNovel(x,y)))", "all x.(Multivoxel(x) -> (-StatisticalPatternAnalysis(x) & -WritingNovel(x)))", "all x.(Multivoxel(x) -> (-StatisticalPatternAnalysis(x) & -WritingNovel(x)))", "all x.(Multivoxel(x) -> (WithoutStatisticalPatternAnalysis(x) & WithoutWritingNovel(x)))"]}
{"id": "folio_train_2207", "nl": "Multivoxel (pattern) analysis is without statistical pattern analysis or writing a novel.", "fol": "(LacksStatisticalPatternAnalysis(ConductsMultivoxelPatternAnalysis) | EngagesInNovelWriting(ConductsMultivoxelPatternAnalysis))", "prediction": ["all x.(Multivoxel(x) -> (-StatisticalPatternAnalysis(x) | WritingNovel(x)))", "(Multivoxel(pattern)Analysis) -> (-StatisticalPatternAnalysis(pattern) & -WritingNovel(pattern)))", "all x y.((Multivoxel(x) & Pattern(y)) -> (-StatisticalPatternAnalysis(x,y) | WritingNovel(x,y)))", "all x.(Multivoxel(x) -> (PatternAnalysis(x) & -StatisticalPatternAnalysis(x) & -WritingNovel(x)))", "all x.(Multivoxel(x) -> (-StatisticalPatternAnalysis(x) | WritingNovel(x)))", "(Multivoxel(pattern) Analysis) - (StatisticalPatternAnalysis(pattern) & -WritingNovel(pattern)))", "all x.(Multivoxel(x) -> (Pattern(x) & -StatisticalPatternAnalysis(x) & -WritingNovel(x)))", "(Multivoxel(pattern)Analysis) -> (-StatisticalPatternAnalysis(pattern) & -WritingNovel(pattern)))", "all x.((Multivoxel(x) & Pattern(x)) -> (-StatisticalPatternAnalysis(x) | WritingNovel(x)))", "all x y.((Multivoxel(x) & Pattern(y)) -> (-StatisticalPatternAnalysis(x,y) | WritingNovel(x,y)))", "(MultivoxelAnalysis(pattern) -> (-StatisticalPatternAnalysis(pattern) | WritingNovel(pattern))))", "all x.(Multivoxel(x) -> (-StatisticalPatternAnalysis(x) | WritingNovel(x)))", "(Multivoxel(pattern) Analysis) -> (-StatisticalPatternAnalysis(pattern) & -WritingNovel(pattern)))", "all x y.((Multivoxel(x) & Pattern(y)) -> (-StatisticalPatternAnalysis(x,y) | NovelWriting(x,y)))", "all x.(Multivoxel(x) -> (-StatisticalPatternAnalysis(x) | WritingNovel(x)))", "all x.(Multivoxel(x) -> (-StatisticalPatternAnalysis(x) | WritesNovel(x)))"]}
{"id": "folio_train_2208", "nl": "Multivoxel (pattern) analysis is either without statistical pattern analysis or writing a novel.", "fol": "(LacksStatisticalPatternAnalysis(ConductsMultivoxelPatternAnalysis) | EngagesInNovelWriting(ConductsMultivoxelPatternAnalysis))", "prediction": ["all x.(Multivoxel(x) -> ((WithoutStatisticalPatternAnalysis(x) | WritingNovel(x))))", "all x.(Multivoxel(x) -> ((-StatisticalPatternAnalysis(x) | WritingNovel(x))))", "all x y.((Multivoxel(x) & Pattern(y)) -> (-StatisticalPatternAnalysis(x,y) | NovelWriting(x,y)))", "all x.(Multivoxel(x) -> ((StatisticPatternAnalysis(x) & -StatisticalPatternAnalysis(x)) | NovelWriting(x))))", "(Multivoxel(pattern) Analysis) -> (-StatisticalPatternAnalysis(pattern) | WritingNovel(pattern)))", "all x.(Multivoxel(x) -> (PatternAnalysis(x) & (-StatisticalPatternAnalysis(x) | WritingNovel(x))))", "(Multivoxel(pattern)Analysis) -> (-StatisticalPatternAnalysis(pattern) | WritingNovel(pattern))))", "(Multivoxel(pattern)Analysis) -> (-StatisticalPatternAnalysis(pattern) | NovelWriting(pattern))))", "all x y.((Multivoxel(x) & Pattern(y)) -> (-StatisticalPatternAnalysis(x,y) | WritingNovel(x,y)))", "all x.(Multivoxel(x) -> ((StatisticPatternAnalysis(x) & -StatisticalPatternAnalysis(x)) | NovelWriting(x))))", "all x.(Multivoxel(x) -> (WithoutStatisticalPatternAnalysis(x) | WritingNovel(x)))", "(MultivoxelAnalysis(pattern) -> (-StatisticalPatternAnalysis(pattern) | NovelWriting(pattern)))", "(Multivoxel(pattern) Analysis(multiple) -> (-StatisticalPatternAnalysis(multiple) | WritingNovel(multiple))))", "all x y.((Multivoxel(x) & Pattern(y)) -> (-StatisticalPatternAnalysis(x,y) | Novel(x,y)))", "all x.(Multivoxel(x) -> ((WithoutStatisticalPatternAnalysis(x) | WritingNovel(x))))", "all x.(Multivoxel(x) -> (PatternAnalysis(x) & (-StatisticalPatternAnalysis(x) | NovelWriting(x))))"]}
{"id": "folio_train_2209", "nl": "If multivoxel (pattern) analysis is writing a novel, then multivoxel (pattern) analysis is neither without statistical pattern analysis nor writing a novel.", "fol": "(EngagesInNovelWriting(ConductsMultivoxelPatternAnalysis) -> (-LacksStatisticalPatternAnalysis(ConductsMultivoxelPatternAnalysis) & -EngagesInNovelWriting(ConductsMultivoxelPatternAnalysis)))", "prediction": ["all x.((Multivoxel(x) & PatternAnalysis(x) & Novel(x)) -> -(-StatisticalPatternAnalysis(x) | NovelWriting(x))))", "all x y.((Multivoxel(x) & PatternAnalysis(y) & Novel(z)) -> (Writing(x,y) & -StatisticalPatternAnalysis(x,z) & -Writing(x,z)))", "(WordingNovel(multivoxel(pattern) & -StatisticalPatternAnalysis(multivoxel) & -WritingNovel(multivoxel(pattern)))", "all x.((Multivoxel(x) & WritingNovel(x)) -> (-StatisticalPatternAnalysis(x) & -WritingNovel(x)))", "all x.((Multivoxel(x) & PatternAnalysis(x) & Novel(x)) -> (-StatisticalPatternAnalysis(x) & -WritingNovel(x)))", "((Multivoxel(pattern) Analysis(multiple) & WritingNovel(multiple)) -> -(StatisticalPatternAnalysis(multiple) | WritingNovel(multiple))))", "(WritingNovel(multivoxel) & PatternAnalysis(multivoxel)) -> -(WithoutStatisticalPatternAnalysis(multivoxel) & -WritingNovel(multivoxel))))", "all x y.((Multivoxel(x) & PatternAnalysis(x) & Novel(y)) -> -(-StatisticalPatternAnalysis(x,y) | NovelWriting(x,y)))", "all x.((Multivoxel(x) & Pattern(x)) -> (WritingNovel(x) & -StatisticalPatternAnalysis(x) & -WritingNovel(x)))", "all x.(WritingNovel(x) -> (Multivoxel(x) & -StatisticalPatternAnalysis(x) & -WritingNovel(x)))", "all x.((Multivoxel(x) & WritingNovel(x)) -> -(StatisticalPatternAnalysis(x) | WritingNovel(x)))", "all x y.((Multivoxel(x) & PatternAnalysis(y) & Novel(z) & Writing(x,z)) -> (-StatisticalPatternAnalysis(x,y) & -Writing(x,z)))", "all x.((Multivoxel(x) & WritesNovel(x)) -> (-StatisticalPatternAnalysis(x) & -WritingNovel(x)))", "all x.((Multivoxel(x) & PatternAnalysis(x) & Novel(x)) -> (-StatisticalPatternAnalysis(x) | NovelWriting(x)))", "all x.(WritingNovel(x) -> (Multivoxel(x) & -StatisticalPatternAnalysis(x) & -WritingNovel(x)))", "(WroteNovel(multivoxel) | WritingNovel(multivoxel)))"]}
{"id": "folio_train_2210", "nl": "If you have room for dessert, you have room for broccoli.", "fol": "all x.(HasRoomFor(x,Dessert) -> HasRoomFor(x,Broccoli))", "prediction": ["all x.((RoomForDessert(x) & RoomForBroccoli(x)) -> HasRoomForDessert(x))", "all x.((HasRoomForDessert(x) & HasRoomForBroccoli(x)) -> HasRoomForDessert(x))", "all x.((RoomForDessert(x) & RoomForBroccoli(x)) -> HasDessert(x))", "all x.((Dessert(x) & Broccoli(x)) -> HasDessert(x))", "(HasRoomForDessert(x) -> HasRoomForButterfly(x))", "all x y.((Dessert(x) & Broccoli(y)) -> HasRoom(x,y))", "all x.(HasRoomForDessert(x) -> HasRoomForBroccoli(x))", "all x y.((RoomForDessert(x) & RoomForBroccoli(y)) -> HasRoomForDessert(x,y))", "all x.((RoomForDessert(x) & RoomForBroccoli(x)) -> RoomForDessert(x))", "all x.((RoomForDessert(x) & RoomForButterfly(x)) -> RoomForButterfly(x))", "all x.((Spoken(x) & HasDessert(x)) -> HasBroccoli(x))", "(HasRoomForDessert(x) -> HasRoomForBroccoli(x))", "exists x.(RoomForDessert(x) & RoomForBroccoli(x))", "(HasRoomForDessert(x) -> HasRoomForButterfly(x))", "all x.((RoomForDessert(x) & RoomForBroccoli(x)) -> HasRoomForDessert(x))", "exists x.(RoomForDessert(x) & RoomForBroccoli(x))"]}
{"id": "folio_train_2211", "nl": "Everyone at Luis's dinner party has room for dessert, including Luis.", "fol": "all x.(IsAtLuisDinnerParty(x) -> HasRoomFor(x,Dessert))", "prediction": ["all x.((Luis(x) & DinnerParty(x)) -> HasRoomForDessert(x))", "all x y.((Luis(x) & DinnerParty(y)) -> HasRoomForDessert(x,y))", "all x.((LuisDinnerParty(x) & LuisDinnerParty(x)) -> HasRoomForDessert(x))", "all x y.((DinnerParty(x) & Luis(y)) -> HasRoomForDessert(x,y))", "all x y.((LuisDinnerParty(x) & Luis(y)) -> HasRoomForDessert(x,y))", "(all x.((Luis(x) & DinnerParty(x)) -> HasDessert(x)) -> HasDessert(x))", "(all x.(LuisDinnerParty(x) -> HasRoomForDessert(x)) & includesLuis(x))", "(all x.(Luis(x) -> HasDessert(x)))", "(All x.(AtLuisDinnerParty(x) -> HasRoomForDessert(x)) & includesLuis(x))", "all x y z.((Luis'sDinnerParty(x) & Luis(y) & Dessert(z)) -> HasRoom(x,y,z))", "all x.((Luis(x) & DinnerParty(x)) -> HasRoomForDessert(x))", "all x.(Luis(x) -> HasDessert(x))", "(all x y.((Luis(x) & DinnerParty(y)) -> HasDessert(x,y)))", "all x.(Luis(x) -> HasRoomForDessert(x))", "all x y.((DinnerParty(x) & Luis(y)) -> HasRoomForDessert(x,y))", "(All x.(LuisDinnerParty(x) -> HasDessert(x)) -> HasDessert(x))"]}
{"id": "folio_train_2212", "nl": "Mauricia does not have room for broccoli.", "fol": "-HasRoomFor(Mauricia,Broccoli)", "prediction": ["all x.(Mauricia(x) -> -HasRoomForBroccoli(x))", "Mauricia - HasRoomForBroccoli(Mauricia))", "(-HasRoomForBroccoli(Mauricia))", "Mauricia - HasRoomForButterfly(Mauricia,Butterfly)", "all x.(Mauricia(x) -> -HasRoomForButterfly(x))", "(-HasRoomForButterfly(Mauricia))", "Mauricia -HasRoomForBroccoli(Mauricia))", "Mauricia n'exists x.(Broccoli(x) & -HasRoom(x,Broccoli))", "Mauricia - HasRoomForBroccoli(Mauricia))", "all x.(Mauricia(x) -> -HasRoomForBroccoli(x))", "(-HasRoomForBroccoli(Mauricia))", "Mauricia - HasRoomForButterfly(Mauricia,Broccoli))", "Mauricia does not have room for broccoli.", "(-HasRoomForButterfly(Mauricia))", "all x.(Mauricia(x) -> -HasRoomForButterfly(x))", "all x.(Mauricia(x) -> -HasRoomForBroccoli(x))"]}
{"id": "folio_train_2213", "nl": "Luis's dinner party is the first ever dinner party that Allison has attended.", "fol": "(FirstDinnerPartyAttended(Allison,Luisparty) & IsAtLuisDinnerParty(Allison))", "prediction": ["all x.((DinnerParty(x) & AllisonAttended(x)) -> LuisDinnerParty(x))", "Allison's DinnerParty(Luis) -> FirstEverDinnerParty(Luis))", "all x y.((DinnerParty(x) & DinnerParty(y) & Allison(y)) -> FirstEverAttended(y,x))", "(AttendedDinnerParty(Luis,Luis) & FirstEver(Luis,Luis))", "all x.((DinnerParty(x) & Allison(x)) -> FirstEverDinnerParty(x))", "Allison's DinnerParty(Luis,DinnerParty) -> FirstEverDinnerParty(Luis,DinnerParty))", "-Allison'sDinnerParty(Luis,DinnerParty)", "Luis's DinnerParty(Luis) & Allison(Luis) & DinnerParty(Luis))", "(LastDinnerPartyAttendedByAllison(Luis,DinnerParty))", "(AttendedDinnerParty(Luis,Luis) & FirstEverDinnerParty(Luis,Luis))", "Luis's DinnerParty(Luis,Luis) & Allison's DinnerParty(Luis,Luis))", "all x.((DinnerParty(x) & Luis(x)) -> FirstEverDinnerParty(x))", "all x y.((DinnerParty(x) & Allison(y)) -> FirstEver(y,x))", "Allison's DinnerParty(Luis) -> FirstEverDinnerParty(Luis,Attended))", "AllisonAttended(LuisDinnerParty)", "all x.((DinnerParty(x) & AllisonAttended(x)) -> LuisDinnerParty(x))"]}
{"id": "folio_train_2214", "nl": "Gustave has room for both broccoli and asparagus.", "fol": "(HasRoomFor(Gustave,Broccoli) & HasRoomFor(Gustave,Asparagus))", "prediction": ["all x.(Guillain(x) -> (HasRoom(x,Broccoli) & HasRoom(x,Asparagus)))", "(HasRoom(Gustave,Broccoli) & HasRoom(Gustave,Asparagus))", "Gustave (HasRoom(Guilda) & (Butterfly(Guilda) | Asparagus(Guilda)))", "Gustave has room for both broccoli and asparagus.", "(HasRoom(Guillain(Guillain) & (Butterfly(Guillain) | Asparagus(Guillain)))", "all x.(Guilda(x) -> (HasRoomForButterfly(x) & HasRoomForAsparagus(x)))", "(Room(Guillain) & (Butterfly(Guillain) | Asparagus(Guillain)))", "(HasRoom(Guilda) & (Butterfly(Guilda) | Asparagus(Guilda)))", "(HasRoomForButterfly(Guilda) & HasRoomForAsparagus(Guilda))", "Gustave (HasRoomForButterfly(Guilte) & HasRoomForAsparagus(Guilte))", "Gustave has room for broccoli and room for asparagus.", "all x.(Guildauge(x) -> (HasRoomForButterfly(x) & HasRoomForAsparagus(x)))", "-(HasRoom(Gustave,Broccoli) & HasRoom(Gustave,Asparagus))", "(LandingForButterfly(Guilda) & RoomForAsparagus(Guilda))", "all x.(Guillain(x) -> (HasRoom(x,Broccoli) & HasRoom(x,Asparagus)))", "Gustave has room for both broccoli and asparagus."]}
{"id": "folio_train_2215", "nl": "Broccoli and asparagus are both vegetables.", "fol": "(IsVegetable(Broccoli) & IsVegetable(Asparagus))", "prediction": ["all x.((Broccoli(x) | Asparagus(x)) -> Vegetable(x))", "(Vegetable(broccoli) & Vegetable(asparagus))", "all x y.((Broccoli(x) & Asparagus(y)) -> Vegetable(x))", "all x.((Broccoli(x) & Asparagus(x)) -> Vegetable(x))", "(Vegetable(broccoli) & Vegetable(aspberry))", "all x.(Vegetable(x) -> (Broccoli(x) | Asparagus(x)))", "(Vitamins(broccoli) & Vegetable(asparagus))", "all x.((Broccoli(x) | Asparagus(x)) -> Vegetable(x))", "all x y.((Broccoli(x) & Asparagus(y)) -> Vegetable(x))", "(Vegetables(broccoli) & Vegetable(asparagus))", "(Vegetable(broccoli) & Vegetable(aspergillus))", "all x.((Broccoli(x) & Asparagus(x)) -> Vegetable(x))", "all x.(Vegetable(x) -> (Broccoli(x) & Asparagus(x)))", "(Vegetables(broccoli) & Vegetable(asparagus))", "(Vegetable(broccoli) & Vegetable(aspergillus))", "(Vegetable(broccoli) & Vegetable(aspberry))"]}
{"id": "folio_train_2216", "nl": "Allison has room for broccoli.", "fol": "HasRoomFor(Allison,Broccoli)", "prediction": ["all x.(Allison(x) -> HasRoomForButterfly(x))", "all x.(Alison(x) -> HasRoomForButterfly(x))", "(HasRoomForButterfly(Allison))", "(AllisonHasRoomForButterfly(Allison))", "Allison has room for broccoli.", "all x y.((Atlas(x) & Broccoli(y)) -> HasRoom(x,y))", "AllisonHasRoomForButterfly(x)", "(HasRoom(Allison,Butterfly))", "all x y.((Allison(x) & Broccoli(y)) -> HasRoom(x,y))", "all x.(Allison(x) -> HasRoomForButterfly(x))", "all x.((Allison(x) & Broccoli(x)) -> HasRoom(x))", "all x.(Alignment(x) -> HasRoomForButterfly(x))", "all x.(Allison(x) -> HasRoomForBroccoli(x))", "(HasRoomForButterfly(Allison))", "Allison has room for broccoli.", "all x.(Atlantic(x) -> HasRoomForBroccoli(x))"]}
{"id": "folio_train_2217", "nl": "Mauricia is at Luis's dinner party.", "fol": "IsAtLuisDinnerParty(Mauricia)", "prediction": ["Mauricia is at Luis's DinnerParty(Mauricia)", "(AtLuisDinnerParty(Mauricia) & LuisDinnerParty(Mauricia))", "all x.(Mauricia(x) -> LuisDinnerParty(x))", "all x y.((Mauricia(x) & Luis(y)) -> DinnerParty(x,y))", "(AtLuis(Mauricia) & DinnerParty(Mauricia))", "Luis's DinnerParty(Mauricia)", "(At(Mauricia,Luis) & DinnerParty(Mauricia,Luis))", "(AtDinnerParty(Mauricia) & Luis(Mauricia))", "Mauricia at Luis's DinnerParty(Mauricia)", "(AtLuisDinnerParty(Mauricia) & AtLuisDinnerParty(Mauricia))", "Mauricia is at Luis's DinnerParty(Mauricia)", "all x.(Mauricia(x) -> LuisDinnerParty(x))", "Luis's DinnerParty(Mauricia)", "Mauricia is at Luis's DinnerParty(Mauricia,Luis)", "Mauricia at Luis's DinnerParty(Mauricia)", "Mauricia is at Luis's DinnerParty."]}
{"id": "folio_train_2218", "nl": "Gustav has room for dessert.", "fol": "HasRoomFor(Gustav,Dessert)", "prediction": ["all x.(Gustavs(x) -> HasRoomForDessert(x))", "(HasRoom(Gustav) & Dessert(Gustav))", "all x.((Gustavs(x) & Dessert(x)) -> HasRoom(x,y))", "Gustav has room for dessert.", "-HasRoomForDessert(Gustav)", "all x.(Guilt(x) -> HasRoomForDessert(x))", "(HasRoomForDessert(Gustav))", "all x.((Guilt(x) & Dessert(x)) -> HasRoom(x,y))", "Gustav has room for dessert.", "all x.(Gustavs(x) -> HasDessert(x))", "(HasRoom(Gustav) & Dessert(Gustav))", "All x.(Guilt(x) -> HasDessert(x))", "all x.((Gustavus(x) & Dessert(y)) -> HasRoom(x,y))", "(HasRoomForDessert(Gustav))", "Gustav has room for dessert.", "Gustav has room for dessert."]}
{"id": "folio_train_2219", "nl": "Imagine Dragons is an American pop rock band.", "fol": "(IsAmerican(ImagineDragon) & IsRockBand(ImagineDragon))", "prediction": ["ImagineDragons(x) -> (PopRockBand(x) & AmericanPopRockBand(x)))", "Imagine Dragons (PopRockBand(x) & AmericanPopRockBand(x))", "(ImagineDragons(ImagineDragons) & AmericanPopRockBand(ImagineDragons))", "ImagineDragons (PopRockBand(x) & AmericanPopRock(x))", "ImagineDragons(x) -> AmericanPopRockBand(x))", "ImagineDragons(x) & PopRockBand(x) & AmericanPopRock(x))", "Imagine Dragons (PopRockBand(x) & AmericanPopRockBand(x))", "Imagine Dragons is a pop rock band.", "ImagineDragons (PopRockBand(x) & AmericanPopRockBand(x))", "Imagine Dragons is an AmericanPopRockBand(x) & FoundedIn1990(x) & FoundedIn1990(x))", "ImagineDragons(x) -> AmericanPopRockBand(x))", "Imagine Dragons (PopRockBand(x) & AmericanPopRock(x))", "Imagine Dragons (AsianPopRockBand(AKA: ImagineDragons))", "ImagineDragons is a pop rock band.", "ImagineDragons(x) -> (PopRockBand(x) & AmericanPopRock(x)))", "ImagineDragons (AsianPopRockBand(A))"]}
{"id": "folio_train_2220", "nl": "The lead singer of Imagine Dragons is Dan.", "fol": "HasLeadSinger(ImagineDragon,Dan)", "prediction": ["LedSingerOfImagineDragons(x) -> Dan.", "(LeadSinger(IceDragons) -> Dan(Dan))", "All x.(ImagineDragons(x) -> LeadSinger(x))", "all x.((LeadSinger(x) & ImagineDragons(x)) -> Dan(x))", "(LeadSinger(IceDragons) & Dan(Dan))", "(LeadSinger(imaginedDragons) & Dan(Dan))", "LedSingerOfImagineDragons(x) -> Dan.", "Dan is the lead singer of ImagineDragons.", "all x.(LeadSinger(x) -> Dan(x))", "(LeadSinger(IceDragons) -> Dan(LeadSinger(IceDragons))", "All x.(ImagineDragons(x) -> LeadSinger(x))", "LeadSingerOfImagineDragons(x) -> Dan.", "(LeadSingerOfImagineDragons(x) -> Dan(x))", "LeadSinger(x) & ImagineDragons(x) & Dan(x))", "All x.(ImagineDragon(x) -> LeadSinger(x))", "LedSingerOfImagineDragons(x) -> Dan."]}
{"id": "folio_train_2221", "nl": "Dan is also a songwriter.", "fol": "IsSongWriter(Dan)", "prediction": ["(Songwriter(Dan) & Writer(Dan))", "all x.(Songwriter(x) -> Dan(x))", "Dan is also a Songwriter.", "Dan is also a songwriter.", "(Songwriter(Dan)", "Dan is a songwriter.", "all x.(Songwriter(x) -> Dan(x))", "songwriter(dan)", "Dan is also a Songwriter(dan)", "(Songwriter(Dan)", "all x.(Songwriter(x) -> Dan(x))", "songwriter.", "Dan is also a Songwriter(dan)", "(Songwriter(Dan)", "(Songwriter(Dan)", "(Songwriter(Dan)"]}
{"id": "folio_train_2222", "nl": "All lead singers are singers.", "fol": "all x y.(HasLeadSinger(x,y) -> IsSinger(y))", "prediction": ["all x.(LeadSinger(x) -> Singer(x))", "all x.(LeadSinger(x) -> Singer(x))", "all x y.((LeadSinger(x) & Singer(y)) -> Singer(x))", "all x.(LeadSinger(x) -> Singer(x))", "(all x.(LeadSinger(x) -> Singer(x))", "all x y.((LeadSinger(x) & Singer(y)) -> Singer(x))", "all x.(LeadSinger(x) -> Singer(x))", "all x.(LeadSinger(x) -> Singer(x))", "(all x.(LeadSinger(x) -> Singer(x))", "all x.(LeadSinger(x) -> Singer(x))", "all x.(LedSinger(x) -> Singer(x))", "all x.(LeadSinger(x) -> Singer(x))", "all x.(LeadSinger(x) -> Singer(x))", "all x.(LeadSonger(x) -> Singer(x))", "all x.(LeadSinger(x) -> Singer(x))", "all x.(LeadSinger(x) -> Singer(x))"]}
{"id": "folio_train_2223", "nl": "All singers are musicians.", "fol": "all x.(IsSinger(x) -> IsMusician(x))", "prediction": ["all x.(Singer(x) -> Musician(x))", "all x.(Singer(x) -> Musician(x))", "(all x.(Singer(x) -> Musician(x))", "all x.(Singer(x) -> Musician(x))", "(all x.(Singer(x) -> Musician(x))", "all x y.(Singer(x) -> Musician(x))", "all x.(Singer(x) -> Musician(x))", "all x.(Singer(x) -> Musician(x))", "all x.(Songer(x) -> Musician(x))", "all x.(Singer(x) -> Musician(x))", "all x.(Singer(x) -> Musician(x))", "exists x.(Singer(x) & Musician(x))", "all x.(Singer(x) -> Musician(x))", "all x.(Singer(x) -> Musical(x))", "all x.(Singer(x) -> Musician(x))", "all x.(Singer(x) -> Musician(x))"]}
{"id": "folio_train_2224", "nl": "Demons is one of the most popular singles of Imagine Dragons.", "fol": "HasPopularSingle(ImagineDragon,Demons)", "prediction": ["(PopularSingle(Demons) & ImagineDragons(ImagineDragons))", "all x.(Demons(x) -> (PopularSingle(x) & ImagineDragons(x)))", "all x.(Damns(x) -> (PopularSingle(x) & ImagineDragons(x)))", "-(Demons(x) & ImagineDragons(x))", "(MostPopularSingle(Demons) & ImagineDragons(ImagineDragons))", "all x y.((Damns(x) & ImagineDragons(y)) -> PopularSingle(x,y))", "All x.(Demons(x) -> ImagineDragons(x))", "Demons is one of the mostpopularSinglesOfImagineDragons(x)", "all x y.((Single(x) & ImagineDragons(y)) -> Demons(x,y))", "-(Damns(x) & ImagineDragons(x))", "(PopularSingle(Dooms,ImagineDragons) & Featuring(Dooms,ImagineDragons))", "(PopularSingle(Demons) & ImagineDragons(Dragons))", "All x.(Demons(x) -> (IceDragons(x) & PopularSingle(x)))", "All x.(Damns(x) -> ImagineDragons(x))", "All x.((Dmons(x) & ImagineDragons(x)) -> PopularSingle(x))", "(PopularSingle(Demons) | ImagineDragons(Dragons))"]}
{"id": "folio_train_2225", "nl": "Some singles of Imagine Dragons have been on Billboard Hot 100.", "fol": "exists x.(HasPopularSingle(ImagineDragon,x) & IsOnBillboardHot100(x))", "prediction": ["exists x.(ImagineDragonsSingle(x) & BillboardHot100(x))", "exists x.(Single(x) & ImagineDragon(x) & BillboardHot100(x))", "exists x y.(Single(x) & ImagineDragon(y) & BillboardHot100(x))", "(exists x.(ImagineDragonSingle(x) & BillboardHot100(x)))", "exists x.(ImagineDragonsSingle(x) & BillboardHot100(x))", "exists x.(ImagineDragonSingle(x) & BillboardHot100(x))", "exists x.(Single(x) & ImagineDragons(x) & BillboardHot100(x))", "exists x.(ImagineDragonsSingle(x) & BillboardHot100(x))", "(exists x.(ImagineDragonsSingle(x) & BillboardHot100(x)))", "exists x y.(Single(x) & ImagineDragon(y) & BillboardHot100(x,y))", "exists x.(Single(x) & ImagineDragon(x) & BillboardHot100(x))", "exists x.(ImagineDragonsSingle(x) & BillboardHot100(x))", "exists x.(ImagineDragonSingle(x) & BillboardHot100(x))", "exists x y.(Single(x) & ImagineDragon(x) & BillboardHot100(y))", "exists x.(Single(x) & ImagineDragons(x) & BillboardHot100(x))", "exists x.(ImagineDragonsSingle(x) & OnBillboardHot100(x))"]}
{"id": "folio_train_2226", "nl": "Some rock band's lead singer is a songwriter.", "fol": "exists x.(IsRockBand(x) & exists y.(HasLeadSinger(x,y) & IsSongWriter(y)))", "prediction": ["exists x.(RockBandLeadSinger(x) & Songwriter(x))", "exists x y.(RockBand(x) & LeadSinger(x,y) & Songwriter(y))", "exists x.(RockBand(x) & LeadSinger(x) & Songwriter(x))", "exists x.(RockBandLeadSinger(x) & Songwriter(x))", "all x y.((RockBand(x) & LeadSinger(y) & LeadSinger(y)) -> Songwriter(y))", "exists x y.(RockBand(x) & LeadSinger(x) & Songwriter(y))", "all x y.((RockBand(x) & LeadSinger(x) & Songwriter(y)) -> LeadSinger(x,y))", "all x y z.((RockBandLeadSinger(x) & LeadSinger(y) & Songwriter(z)) -> Songwriter(x))", "exists x.(RockBandLeadSinger(x) & Songwriter(x))", "exists x.(RockBand(x) & LeadSinger(x) & Songwriter(x))", "all x y.((RockBand(x) & LeadSinger(y) & LeadSinger(y)) -> Songwriter(y))", "exists x.(RockBandLeadSinger(x) & Songwriter(x))", "exists x.(RockBand(x) & LeadSinger(x) & Songwriter(x))", "exists x.(RockBandLeaderSongwriter(x) & LeadSinger(x))", "exists x.(RockBandLeadSinger(x) & Songwriter(x))", "exists x.(RockBandLeadSinger(x) & Songwriter(x))"]}
{"id": "folio_train_2227", "nl": "Dan is not a musician.", "fol": "-IsMusician(Dan)", "prediction": ["(-Musician(Dan))", "all x.(Dan(x) -> -Musician(x))", "Dan is notMusician(Dan)", "-Musician(Dan)", "all x.(Dan(x) -> -Musician(x))", "Dan is notMusician(Dan,x)", "(-Musician(Dan))", "Dan is notMusician(dan).", "-Musician(Dan)", "Dan is notMusician(Dan,y)", "(-Musician(Dan))", "-Musician(dan)", "(-Musician(Dan))", "-Musician(dan)", "\u2013 Musician(danger)", "(-musician(Dan)"]}
{"id": "folio_train_2228", "nl": "Demons has been on Billboard Hot 100.", "fol": "IsOnBillboardHot100(Demons)", "prediction": ["all x.(Demons(x) -> BillboardHot100(x))", "(BetweenBillboardHot100(Demons) & BillboardHot100(Demons))", "(BillboardHot100) & Demons(Demons))", "(OnBillboardHot100) & Demons(Demons))", "-DemonsOnBillboardHot100(x)", "Billboard Hot100 (Significant(Demons) & On(Demons,Billboard))", "(BillboardHot100(Demons) & On(Demons))", "Billboard Hot100(Demons)", "All x.(Demons(x) -> BillboardHot100(x))", "-Demons(x) & BillboardHot100(x))", "(OnBillboardHot100) & Demons(Demons))", "all x.(Dennis(x) -> BillboardHot100(x))", "all x.(Demons(x) -> BillboardHot100(x))", "Billboard Hot100.", "All x.(Demons(x) -> BillboardHot100(x))", "All x.(Demons(x) -> BillboardHot100(x))"]}
{"id": "folio_train_2229", "nl": "All bread is food.", "fol": "all x.(IsBread(x) -> IsFood(x))", "prediction": ["all x.(Bread(x) -> Food(x))", "all x.(Bread(x) -> Food(x))", "(all x.(Bread(x) -> Food(x))", "all x.(Bread(x) -> Food(x))", "All x.exists y.(Bread(x) & Food(y))", "all x.(Bread(x) -> Food(x))", "all x y.(Bread(x) -> Food(x))", "all x.(Bread(x) -> Food(x))", "all x.(Bread(x) -> Food(x))", "all x.(Bread(x) -> Food(x))", "all x.(Bread(x) -> Food(x))", "All x.(Broth(x) -> Food(x))", "all x.(Bread(x) -> Food(x))", "all x.(Bread(x) -> Food(x))", "all x.(Bread(x) -> Food(x))", "exists x.(Bread(x) & Food(x))"]}
{"id": "folio_train_2230", "nl": "Some sandwiches are bread.", "fol": "exists x.(IsSandwich(x) & IsBread(x))", "prediction": ["exists x.(Sandwich(x) & Bread(x))", "exists x.(Sandwich(x) & Bread(x))", "exists x.(Sandwich(x) & Bread(x))", "exists x.(Sandwich(x) & Bread(x))", "exists x.(Bread(x) & Sandwich(x))", "exists x y.(Sandwich(x) & Bread(y))", "exists x.(Sandwich(x) & Bread(x))", "exists x.(Bread(x) & Sandwich(x))", "exists x.(Sandwich(x) & Bread(x))", "exists x.(Bread(x) & Sandwich(x))", "exists x.(Sandwich(x) & Bread(x))", "exists x.(Sandwich(x) & Bread(x))", "exists x.(Bread(x) & Sandwich(x))", "exists x.(Sandwich(x) & Bread(x))", "exists x.(Sandwich(x) & Bread(x))", "exists x.(Sandwich(x) & Bread(x))"]}
{"id": "folio_train_2231", "nl": "All food is edible. ", "fol": "all x.(IsFood(x) -> IsEdible(x))", "prediction": ["all x.(Food(x) -> Edible(x))", "all x.(Food(x) -> Edible(x))", "(EdibleFood(Food) & AllOtherFood(Food))", "all x.(Food(x) -> Edible(x))", "all x y.((Food(x) & Food(y)) -> Edible(x))", "all x.(Food(x) -> Edible(x))", "All x.exists y.(Food(x) & Edible(y))", "all x.(Food(x) -> Edible(x))", "all x.(Food(x) -> Edible(x))", "all x.(Food(x) -> Edible(x))", "all x.(Food(x) -> Edible(x))", "all x.(Food(x) -> Edible(x))", "all x.(Food(x) -> Edible(x))", "exists x.(Food(x) & Edible(x))", "all x.(Food(x) -> Edible(x))", "exists x.(Food(x) & Edible(x))"]}
{"id": "folio_train_2232", "nl": "No edible things are poisonous.", "fol": "all x.(IsEdible(x) -> -IsPoisonous(x))", "prediction": ["-exists x.(Edible(x) & Poisonous(x))", "-exists x.(EdibleThing(x) & Poisonous(x))", "all x.(Edible(x) -> -Poisonous(x))", "-(EdibleThing(x) & Poisonous(x))", "(exists x.(EdibleThing(x) & Poisonous(x)))", "all x.(EdibleThing(x) -> -Poisonous(x))", "-exists x.(Edible(x) & Poisonous(x))", "-exists x.(EdibleThing(x) & Poisonous(x))", "-(EdibleThing(x) & Poisonous(x))", "all x.(Edible(x) -> -Poisonous(x))", "all x.(EdibleThing(x) -> -Poisonous(x))", "-exists x.(Edible(x) & Poisonous(x))", "-exists x.(EdibleThing(x) & Poisonous(x))", "all x.(EdibleThing(x) -> -Poisonous(x))", "-exists x.(Edible(x) & Poisonous(x))", "-exists x.(EdibleThing(x) & Poisonous(x))"]}
{"id": "folio_train_2233", "nl": "Deodorant is poisonous.", "fol": "IsPoisonous(Deodorant)", "prediction": ["all x.(Deodorant(x) -> Poisonous(x))", "all x.(Deodorant(x) -> Poisonous(x))", "all x y.((Deodorant(x) & Poisonous(y)) -> CanBeTreated(x,y))", "(Poisonous(Deodorant))", "all x.(Deodorant(x) -> Poisonous(x))", "all x y.((Deodorant(x) & Poisonous(y)) -> Poisonous(x))", "All x.((Deodorant(x) & Poisonous(x)) -> CanBeFilled(x))", "(Poisonous(Deodorant))", "all x.(Deodorant(x) -> Poisonous(x))", "all x.(Deodorant(x) -> Poisonous(x))", "All x.(Destinant(x) -> Poisonous(x))", "all x.(Deodorant(x) -> Poisonous(x))", "all x.(Deodorant(x) -> Poisonous(x))", "All x.(Deodorant(x) -> Poisonous(x))", "all x.(Deodorant(x) -> Poisonous(x))", "All x.(Deodorant(x) -> Poisonous(x))"]}
{"id": "folio_train_2234", "nl": "Deodorant is a sandwich.", "fol": "IsSandwich(Deodorant)", "prediction": ["all x.(Deodorant(x) -> Sandwich(x))", "all x.(Deodorant(x) -> Sandwich(x))", "all x y.((Deodorant(x) & Sandwich(y)) -> Is(x,y))", "(Sandwich(Deodorant) & Sandwich(Deodorant))", "(Sandwich(Deodorant) & Sandwich(Deodorant,Sandwich))", "all x.(Deodorant(x) -> Sandwich(x))", "all x y.((Deodorant(x) & Sandwich(y)) -> Is(x,y))", "(Sandwich(Deodorant) & Sandwich(Deodorant,Sandwich))", "all x.(Deodorant(x) -> Sandwich(x))", "all x y.((Deodorant(x) & Sandwich(y)) -> Has(x,y))", "all x.(Deodorant(x) -> Sandwich(x))", "All x.(Destinant(x) -> Sandwich(x))", "all x.(Deodorant(x) -> Sandwich(x))", "All x.(Deodorant(x) -> Sandwich(x))", "all x.(Deodorant(x) -> Sandwich(x))", "All x.(Deodorant(x) -> Sandwich(x))"]}
{"id": "folio_train_2235", "nl": "Deodorant is a sandwich and bread.", "fol": "(IsSandwich(Deodorant) & IsBread(Deodorant))", "prediction": ["all x.(Deodorant(x) -> (Sandwich(x) & Bread(x)))", "(Sandwich(Deodorant) & Bread(Deodorant))", "all x.(Deodorant(x) -> (Sandwich(x) & Bread(x)))", "all x y.((Deodorant(x) & Sandwich(y) & Bread(y)) -> SandwichAndBread(x,y))", "(Sandwich(Deodorant) & Bread(Deodorant))", "all x.(Deodorant(x) -> (Sandwich(x) & Bread(x)))", "all x y.((Deodorant(x) & Sandwich(y) & Bread(y)) -> Deodorant(x))", "(Sandwich(Deodorant) & Bread(Deodorant))", "exists x.(Defoodorant(x) & Sandwich(x) & Bread(x))", "all x.(Deodorant(x) -> (Sandwich(x) & Bread(x)))", "all x y.((Deodorant(x) & Sandwich(y) & Bread(y)) -> CanBeFilled(x,y))", "all x.(Deodorant(x) -> (Sandwich(x) & Bread(x)))", "all x.(Deodorant(x) -> (Sandwich(x) & Bread(x)))", "All x.(Deodorant(x) -> (Bread(x) & Sandwich(x)))", "All x.(Deodorant(x) -> (Sandwich(x) & Bread(x)))", "all x.(Deodorant(x) -> (Sandwich(x) & Bread(x)))"]}
{"id": "folio_train_2236", "nl": "If deodorant is a loaf of bread, then deodorant is not a sandwich.", "fol": "(IsBread(Deodorant) -> -IsSandwich(Deodorant))", "prediction": ["all x.((Deodorant(x) & LoafOfBread(x)) -> -Sandwich(x))", "all x.((Deodorant(x) & LoafOfBread(x)) -> -Sandwich(x))", "all x.((Deodorant(x) & Bread(x)) -> -Sandwich(x))", "(all x.((Deodorant(x) & LoafOfBread(x)) -> -Sandwich(x)))", "all x y.((Deodorant(x) & Bread(y)) -> -Sandwich(x))", "(all x.((Deodorant(x) & Bread(x)) -> -Sandwich(x)))", "all x.((Deodorant(x) & BreadLoaf(x)) -> -Sandwich(x))", "all x.(LoafOfBread(x) -> -Sandwich(x))", "all x.((Defoidant(x) & LoafOfBread(x)) -> -Sandwich(x))", "all x.((Deodorant(x) & LoafOfBread(x)) -> -Sandwich(x))", "all x.((Bread(x) & LoafOf(x,y)) -> -Sandwich(x))", "all x y.((Deodorant(x) & Bread(y)) -> -Sandwich(x))", "exists x.(Deodorant(x) & LoafOfBread(x) & -Sandwich(x))", "all x.((Deodorant(x) & Bread(x)) -> -Sandwich(x))", "all x.((Deodorant(x) & LoafOfBread(x)) -> -Sandwich(x))", "all x.((Deodorant(x) & LoafOfBread(x)) -> -Sandwich(x))"]}
{"id": "folio_train_2237", "nl": "Common utilities include water, electricity, gas, heating, sewer, trash, and recycling.", "fol": "(IsCommonUtility(Water) & IsCommonUtility(Electricity) & IsCommonUtility(Gas) & IsCommonUtility(Heating))", "prediction": ["all x.(CommonUtility(x) -> (Water(x) | Electricity(x) | Gas(x) | Heating(x) | Sewer(x) | Trash(x) | Recycling(x)))", "all x.(Utilities(x) -> (Water(x) | Electricity(x) | Gas(x) | Heating(x) | Sewer(x) | Trash(x) | Recycling(x)))", "all x y.((Utilities(x) & Water(y) & Electricity(y) & Gas(y) & Heating(y) & Sewer(y) & Trash(y) & Recycling(y)) -> Common(x,y))", "all x y z.((Utilities(x) & Water(y) & Electricity(z) & Gas(y) & Heating(z)) -> (Water(y) & Electricity(z) & Gas(y) & Heating(z) & Sewer(z) & Trash(z) & Recycling(z)))", "(CommonUtility(water) & Water(electricity) & Gas(gas) & Heating(heating) & Sewer(sewer) & Trash(trash) & Recycling(t))", "(CommonUtilities(water) & Electricity(gas) & Heating(heating) & Sewer(sewer) & Trash(trash) & Recycling(t))", "all x.((Utilities(x) & Water(x) & Electricity(x) & Gas(x) & Heating(x) & Sewer(x) & Trash(x) & Recycling(x)) -> Common(x))", "all x.(CommonUtility(x) -> (Water(x) | Electricity(x) | Gas(x) | Heating(x) | Sewer(x) | Trash(x) | Recycling(x)))", "(CommonUtilities(Water,Electricity,Gas) & Heating(Heating,Sewer,Trash,Recycling))", "all x.(CommonUtilities(x) -> (Water(x) | Electricity(x) | Gas(x) | Heating(x) | Sewer(x) | Trash(x) | Recycling(x)))", "all x y.((Utility(x) & Water(y) & Electricity(y) & Gas(y) & Heating(y) & Sewer(y) & Trash(y) & Recycling(y)) -> Common(x,y))", "(all x.(Water(x) -> Electricity(x)) & (Gas(x) -> Heating(x)) & (Sewer(x) | Trash(x) | Recycling(x))))", "(CommonUtility(water) & Water(electricity) & Gas(gas) & Heating(heating) & Sewer(sewer) & Trash(trash) & Recycling(t))", "all x.(CommonUtility(x) -> (Water(x) | Electricity(x) | Gas(x) | Heating(x) | Sewer(x) | Trash(x) | Recycling(x)))", "all x y z.((Water(x) & Electricity(y) & Gas(z)) -> (Heating(x,y) | Sewer(x,z) | Trash(x,z) | Recycling(x)))", "all x.(Utilities(x) -> (Water(x) | Electricity(x) | Gas(x) | Heating(x) | Sewer(x) | Trash(x) | Recycling(x)))"]}
{"id": "folio_train_2238", "nl": "Many apartment rents cover the cost of water and electricity.", "fol": "exists x.(CoversUtility(x,Water) & CoversUtility(x,Electricity))", "prediction": ["all x.(ApartmentRent(x) -> (CoversWater(x) & CoversElectricity(x)))", "exists x.(ApartmentRent(x) & CoversWaterAndElectricity(x))", "all x y.((ApartmentRent(x) & Water(y)) -> CoversCost(x,y))", "all x.(ApartmentRent(x) -> (CostOfWater(x) & CostOfElectricity(x)))", "all x.(ApartmentRent(x) -> (CoversWater(x) & CoversElectricity(x)))", "exists x.(ApartmentRent(x) & CoversWater(x) & CoversElectricity(x))", "many apartment rents coverwaterandElectricityCosts.", "all x y z.((ApartmentRent(x) & Water(y) & Electricity(z)) -> CoversCost(x,y,z))", "all x y.((ApartmentRent(x) & Water(y)) -> CoversCost(x,y))", "all x y.((ApartmentRent(x) & WaterCost(y) & ElectricityCost(y)) -> Covers(x,y))", "exists x.(ApartmentRent(x) & CoversWater(x) & CoversElectricity(x))", "all x y.((ApartmentRent(x) & Water(y)) -> CoversCost(x,y))", "exists x.(AppartementRent(x) & CoversWater(x) & CoversElectricity(x))", "exists x.(ApartmentRent(x) & CoversWaterAndElectricity(x))", "exists x.(AppartementRent(x) & CoversWater(x) & CoversElectricity(x))", "exists x.(ApartmentRent(x) & CoversWaterAndElectricity(x))"]}
{"id": "folio_train_2239", "nl": "Susan lives in an apartment where the rent covers all utilities.", "fol": "all x.CoversUtility(Susan,x)", "prediction": ["all x y.((Apartment(x) & Apartment(y) & RentCoversUtility(x,y)) -> SusanLiving(x,y))", "all x y z.((Apartment(x) & Rent(y) & Utility(z)) -> LivesIn(x,y,z))", "(LivingInApartment(Susan) & RentCoversUtility(Susan))", "all x.((Apartment(x) & RentCoversUtility(x)) -> SusanLiving(x))", "all x y.((Apartment(x) & Rent(y)) -> CoversUtility(x,y))", "Susan lives in an apartment where rent covers utilities.", "all x.((Apartment(x) & RentCoversAllUtility(x)) -> SusanLisesIn(x,y))", "(LivingInApartment(Susan) & RentCoversAllUtility(Susan))", "all x y.((Apartment(x) & Apartment(y) & RentCovers(x,y)) -> SusanLisesIn(x,y))", "all x.((Susan(x) & Apartment(x)) -> RentCoversUtility(x))", "all x y z.((Apartment(x) & Rent(y) & Utility(z)) -> Covers(x,y,z))", "(LivingInApartment(Susan) & RentCoversAllUtility(Susan))", "exists x.(Apartment(x) & RentCovers(x,utilities))", "all x y.((Susan(x) & Apartment(y)) -> RentCovers(x,y))", "All x.((Susan(x) & Apartment(y)) -> RentCoversUtility(x,y))", "exists x.(SusanApartment(x) & RentCoversAllUtility(x))"]}
{"id": "folio_train_2240", "nl": "The rent of the apartment where Ava lives does not cover any utility expenses.", "fol": "all x.-CoversUtility(Ava,x)", "prediction": ["all x.((Apartment(x) & AvaLivesIn(x)) -> -CoversUtilityExpenses(x))", "all x.((Apartment(x) & AvaLives(x)) -> -CoversUtilityExpenses(x))", "the rent of the apartment where Ava lives does not cover utilityExpenses.", "all x y.((Apartment(x) & Ava(y)) -> -CoversUtilityExpenses(x,y))", "all x y.((Apartment(x) & Ava(y) & LivesIn(x,y)) -> -CoversUtilityExpenses(x))", "all x y.((Apartment(x) & Apartment(y) & Ava(x)) -> -CoversUtilityExpenses(x,y))", "(all x.(AvaApartment(x) -> -CoversUtilityExpenses(x)))", "(Location(a) & Apartment(a)) -> -CoversUtilityExpenses(a))", "All x.(Apartment(x) -> -CoversUtilityExpenses(x))", "all x.((Apartment(x) & AvaLivesIn(x)) -> -CoversUtilityExpenses(x))", "all x y.((Apartment(x) & AvaApartment(y)) -> -CoversUtilityExpenses(x,y))", "all x.((Apartment(x) & Ava(x)) -> -CoversUtilityExpenses(x))", "all x.((Apartment(x) & LivesAva(x)) -> -CoversUtilityExpenses(x))", "All x.(Apartment(x) -> -CoversUtilityExpenses(x))", "all x y.((Apartment(x) & Apartment(y) & Ava(z)) -> -CoversUtilityExpenses(x,y,z))", "All x.(Apartment(x) -> -CoversUtilityExpenses(x))"]}
{"id": "folio_train_2241", "nl": "Noah lives in an apartment where the rent does not cover heating.", "fol": "-CoversUtility(Noah,Heating)", "prediction": ["all x y.((Apartment(x) & Apartment(y) & -CoversHeating(y)) -> LivesIn(x,y))", "all x.((Apartment(x) & RentDoesNotCoverHeating(x)) -> NoahLisesIn(x,y))", "(LivingInApartment(Noah) & RentDoesNotCoverHeating(Noah))", "Noah lives in an apartment where rent does notCoverHeating(Noah)", "all x y z.((Apartment(x) & Apartment(y) & Rent(z) & -CoversHeating(z)) -> LivesIn(x,y,z))", "all x.((Apartment(x) & Rent-CoversHeating(x)) -> NoahLisesIn(x,y))", "all x y.((Apartment(x) & Apartment(y) & -CoversHeating(y)) -> LivesIn(x,y))", "all x y.((Apartment(x) & Apartment(y) & RentDoesNotCoverHeating(x,y)) -> LivesIn(x,y))", "all x.((Apartment(x) & RentDoesNotCovetailHeating(x)) -> NoahLisesIn(x,y))", "exists x.(Apartment(x) & RentDoesNotCoverHeating(x))", "Noah lives in an apartment where rent does notCoverHeating(Noah)", "exists x.(NaomApartment(x) & RentDoesNotCoverHeating(x))", "(LivingInApartment(Noah) & RentDoesNotCoverHeating(Noah))", "all x y z.((Apartment(x) & Apartment(y) & Rent(z) & -CoversHeating(z)) -> LivesIn(x,y,z))", "all x y.((Apartment(x) & Apartment(y) & RentCoversHeating(x,y)) -> LivesIn(x,y))", "Noah lives in an apartment where rent does notCoverHeating(Noah)"]}
{"id": "folio_train_2242", "nl": "A common utility being covered is that it doesn't need to be paid.", "fol": "all x y.((CoversUtility(x,y) & IsCommonUtility(y)) <-> -RequiresPayment(x,y))", "prediction": ["all x.((Utility(x) & Covered(x)) -> -NeedsPayment(x))", "all x.((Utility(x) & Covered(x)) -> -Payable(x))", "all x.((Utility(x) & Covered(x)) -> -NeedsPayment(x))", "all x y.((Utility(x) & Covered(x)) -> -Payable(y))", "exists x.(Utility(x) & Covered(x) & -Payable(x))", "all x.((Utility(x) & Covered(x)) -> -NeedsPayment(x))", "all x.(CoveredUtility(x) -> -Payable(x))", "all x y.((Utility(x) & Covered(x)) -> -NeedsPayment(x,y))", "all x.((Utility(x) & Covered(x)) -> -Payable(x))", "all x.((Utility(x) & Covered(x)) -> -Payable(x))", "exists x.(Utility(x) & Covered(x) & -Payable(x))", "all x.((Utility(x) & -Payable(x)) -> Covered(x))", "all x y.((Utility(x) & Covered(x)) -> -Payable(y))", "all x y.((Utility(x) & Covered(x)) -> -NeedsPayment(y))", "exists x.(CommonUtility(x) & Covered(x) & -Payable(x))", "exists x.(Utility(x) & -Payable(x))"]}
{"id": "folio_train_2243", "nl": "Noah needs to pay the water bill.", "fol": "RequiresPayment(Noah,Water)", "prediction": ["all x.(Noah(x) -> NeedsToPayWaterBill(x))", "all x.(NeedsToPayWaterBill(x) -> Noah(x))", "-NeedsToPayWaterBill(Noah)", "(NeedsToPayWaterBill(Noah))", "Noah needs to pay waterbill.", "all x y.((Nasafon(x) & WaterBill(y)) -> NeedsToPay(x,y))", "Noah needs to payWaterBill(Noah)", "Noah NeedsToPayWaterBill(Noah)", "-NeedsToPayWaterBill(Noah,WaterBill)", "all x.(Noah(x) -> NeedsToPayWaterBill(x))", "(NeedsToPayWaterBill(Noah))", "all x.(NeedsToPayWaterBill(x) -> Noah(x))", "Noah needs to paywaterBill(Noah)", "Noah has to pay waterbill.", "all x.(Noah(x) -> NeedsToPayWaterBill(x))", "Noah needs to payWaterBill(Noah)"]}
{"id": "folio_train_2244", "nl": "Noah and Ava both need to pay the heating bill.", "fol": "(RequiresPayment(Noah,Heating) & RequiresPayment(Ava,Heating))", "prediction": ["all x.((Noah(x) & Ava(x)) -> NeedsToPayHeatingBill(x))", "(PayHeatingBill(Noah) & PayHeatingBill(Ava))", "all x y.((Noah(x) & Ava(y)) -> NeedsToPayHeatingBill(x,y))", "all x.((Noah(x) | Ava(x)) -> NeedsToPayHeatingBill(x))", "((Noah(Noah) & Ava(Ava)) -> NeedsHeatingBill(Noah) & NeedsHeatingBill(Ava))", "(PaysHeatingBill(Noah,Ava) & PaysHeatingBill(Noah,Ava))", "both Noah and Ava need to pay heatingbill.", "(PayHeatingBill(Noah) & PayHeatingBill(Ava))", "((Noah) & Ava(Ava)) -> NeedsToPayHeatingBill(Ava))", "all x y.((HotterBill(x) & Noah(y) & Ava(z)) -> NeedsPayment(y,x))", "all x.((Noah(x) & Ava(x)) -> NeedsToPayHeatingBill(x))", "all x y.((Noah(x) & Ava(y)) -> NeedsToPayHeatingBill(x,y))", "(PayHeatingBill(Noah) & PayHeatingBill(Ava))", "all x.((Noah(x) | Ava(x)) -> PaysHeatingBill(x))", "(PayHeatingBill(Noah) & PayHeatingBill(Ava))", "All x.((Noah(x) | Ava(x)) -> NeedsToPayHeatingBill(x))"]}
{"id": "folio_train_2245", "nl": "Susan does not need to pay the water bill.", "fol": "-RequiresPayment(Susan,Water)", "prediction": ["all x.((Susan(x) & WaterBill(y)) -> -Pays(x,y))", "(-PaysWaterBill(Susan))", "all x.(Susan(x) -> -PaysWaterBill(x))", "Susan does not need to pay waterbill.", "-NeedsToPayWaterBill(Susan)", "all x.((Susan(x) & WaterBill(y)) -> -Pays(x,y))", "(-PayWaterBill(Susan))", "-(PaysWaterBill(Susan))", "-PaysWaterBill(Susan)", "(NeedsToPayWaterBill(Susan))", "Susan does not need to pay the water bill.", "all x.((Susan(x) & WaterBill(y)) -> -NeedsPayment(x,y))", "all x.(Susan(x) -> -PaysWaterBill(x))", "Susan does not need to pay waterbill.", "-(PaysWaterBill(Susan))", "(-PaysWaterBill(Susan))"]}
{"id": "folio_train_2246", "nl": "All clothes are products. ", "fol": "all x.(IsClothing(x) -> IsProduct(x))", "prediction": ["all x.(Clothing(x) -> Product(x))", "all x.(Clothing(x) -> Product(x))", "(all x.(Clothing(x) -> Product(x)))", "all x y.((Clothing(x) & Product(y)) -> Product(x))", "all x.(Clothing(x) -> Product(x))", "(all x.(Clothing(x) -> Product(x))", "all x.(Clothing(x) -> Product(x))", "all x.(Clothes(x) -> Products(x))", "All x.(Choice(x) -> Product(x))", "all x.(Clothing(x) -> Product(x))", "all x.(Clothes(x) -> Products(x))", "all x.(Clothing(x) -> Product(x))", "all x.(Clothes(x) -> Products(x))", "all x.(Clothing(x) -> Product(x))", "all x.(Clothes(x) -> Products(x))", "exists x.(Clothes(x) & Product(x))"]}
{"id": "folio_train_2247", "nl": "No products are perfect. ", "fol": "all x.(IsProduct(x) -> -IsPerfect(x))", "prediction": ["-exists x.(Product(x) & Perfect(x))", "-exists x.(Product(x) & Perfect(x))", "(exists x.(Product(x) & Perfect(x)) & -Perfect(x))", "-exists x.(Product(x) & Perfect(x))", "all x.(Product(x) -> -Perfect(x))", "-exists x.(Product(x) & Perfect(x))", "exists x.(Product(x) & Perfect(x))", "all x.(Product(x) -> -Perfect(x))", "-exists x.(Product(x) & Perfect(x))", "all x.(Product(x) -> -Perfect(x))", "-exists x.(Product(x) & Perfect(x))", "-exists x.(Product(x) & Perfect(x))", "-exists x.(Product(x) & Perfection(x))", "-exists x.(Product(x) & Perfect(x))", "-exists x.(Product(x) & Perfect(x))", "-exists x.(Product(x) & Perfect(x))"]}
{"id": "folio_train_2248", "nl": "All dresses are clothes.", "fol": "all x.(IsDress(x) -> IsClothing(x))", "prediction": ["all x.(Rose(x) -> Clothing(x))", "all x.(Rose(x) -> Clothes(x))", "all x.(Dress(x) -> Clothing(x))", "(all x.(Rose(x) -> Clothing(x))", "all x.(Rose(x) -> Clothing(x))", "all x.((Rose(x) & Clothes(x)) -> Clothes(x))", "all x y.((Rose(x) & Dress(y)) -> Clothing(x))", "(all x.(Dress(x) -> Clothes(x))", "all x.(Rose(x) -> Clothes(x))", "all x.(Dress(x) -> Clothes(x))", "all x.(Dresses(x) -> Clothing(x))", "all x.(Clothing(x) -> Dress(x))", "all x.(Rose(x) -> Clothing(x))", "all x.(Dress(x) -> Clothing(x))", "All x.(Layout(x) -> Clothes(x))", "all x.(Royal(x) -> Clothes(x))"]}
{"id": "folio_train_2249", "nl": "All skirts are dresses. ", "fol": "all x.(IsSkirt(x) -> IsDress(x))", "prediction": ["all x.(Skirt(x) -> Dress(x))", "all x.(Skirt(x) -> Dress(x))", "(all x.(Skirt(x) -> Dress(x)))", "all x y.((Skirt(x) & Dress(y)) -> Dress(x))", "all x.(Skirt(x) -> Dress(x))", "(all x.(Skirt(x) -> Dress(x))", "all x.(Skirt(x) -> Dress(x))", "(all x.(Skirt(x) -> Dress(x))", "all x.(Skirt(x) -> Dress(x))", "all x.(Skirt(x) -> Dress(x))", "all x.(Skirt(x) -> Dress(x))", "all x.(Shadow(x) -> Dresses(x))", "all x.(Skirt(x) -> Dress(x))", "all x.(Skirt(x) -> Dress(x))", "all x.(Skirt(x) -> Dress(x))", "all x.(Shadow(x) -> Dress(x))"]}
{"id": "folio_train_2250", "nl": "If Nike is clothes, then Nike is perfect and a dress.", "fol": "(IsClothing(Nike) -> (IsPerfect(Nike) & IsDress(Nike)))", "prediction": ["all x.((Nike(x) & Clothing(x)) -> (Perfect(x) & Dress(x)))", "all x.((Nike(x) & Clothes(x)) -> (Perfect(x) & Dress(x)))", "(all x.((Nike(x) & Clothes(x)) -> Perfect(x)) & all y.((Nike(y) & Dress(y)) -> Perfect(y)))", "all x.((Nike(x) & Clothing(x)) -> (Perfect(x) & Dress(x)))", "all x y.((Nike(x) & Clothing(y)) -> (Perfect(x,y) & Dress(x,y)))", "all x.((Nike(x) & Clothes(x)) -> (Perfect(x) & Dress(x)))", "all x y.((Nike(x) & Clothes(x)) -> (Perfect(x,y) & Dress(y)))", "all x.(Clothing(x) -> (Perfect(x) & Dress(x)))", "(Clothes(n) -> Perfect(n) & Dress(n)))", "(all x.(Clothing(x) -> Perfect(x) & Dress(x)))", "all x.((Nike(x) & Clothing(x)) -> (Perfect(x) & Dress(x)))", "all x.(Clothing(x) -> (Perfect(x) & Dress(x)))", "all x.((Nike(x) & Clothes(x)) -> (Perfect(x) & Dress(x)))", "exists x.(Clothes(x) & Perfect(x) & Dress(x))", "all x.((Nike(x) & Clothing(x)) -> (Perfect(x) & Dress(x)))", "all x.(Clothing(x) -> (Perfect(x) & Dress(x)))"]}
{"id": "folio_train_2251", "nl": "Nike is perfect.", "fol": "IsPerfect(Nike)", "prediction": ["all x.(Nike(x) -> Perfect(x))", "(Perfect(Nike) & Perfect(Nike))", "Nike is perfect.", "all x.(Nike(x) -> Perfect(x))", "all x y.((Nike(x) & Brand(y)) -> Perfect(x))", "-Perfect(Nike)", "-PerfectNike(n)", "Nike is perfect.", "(Perfect(Nike) & Perfect(Nike))", "Nike is Perfect(x)", "all x.(Nike(x) -> Perfect(x))", "-PerfectNike(n)", "Nike is perfect.", "all x.(Nike(x) -> Perfect(x))", "Nike ist perfekt!", "All x.(Nike(x) -> Perfect(x))"]}
{"id": "folio_train_2252", "nl": "Nike is a skirt.", "fol": "IsSkirt(Nike)", "prediction": ["all x.(Nike(x) -> Skirt(x))", "Nike is a skirt.", "all x.(Nike(x) -> Skirt(x))", "(Skirt(n) & Nike(n))", "all x y.((Nike(x) & Skirt(y)) -> Skirt(x))", "Nike is a skirt.", "all x.(Nike(x) -> Skirt(x))", "(Skirt(n) & Nike(n))", "Nike is a skirt.", "all x.(Nike(x) -> Skirt(x))", "(Skirt(n) & Nike(n))", "Nike is a skirt.", "all x.(Nike(x) -> Skirt(x))", "all x.(Nike(x) -> Skirt(x))", "all x.(Nike(x) -> Skirt(x))", "exists x.(Nike(x) & Skirt(x))"]}
{"id": "folio_train_2253", "nl": "Nike is not a skirt.", "fol": "-IsSkirt(Nike)", "prediction": ["all x.(Nike(x) -> -Skirt(x))", "-Skirt(Nike)", "Nike is not a skirt.", "(Nike(Nike) & -Skirt(Nike))", "all x.(Nike(x) -> -Skirt(x))", "(Skirt(Nike) & -Skirt(Nike))", "(-Skirt(Nike))", "Nike is not a skirt.", "-Skirt(Nike)", "all x.(Nike(x) -> -Skirt(x))", "Nike is not a skirt.", "(-Skirt(Nike))", "-Skirt(n)", "Nike is not a skirt.", "all x.(Nike(x) -> -Skirt(x))", "-Skirt(n)"]}
{"id": "folio_train_2254", "nl": "All pets are animals.", "fol": "all x.(IsPet(x) -> IsAnimal(x))", "prediction": ["all x.(Pet(x) -> Animal(x))", "all x.(Pet(x) -> Animal(x))", "(all x.(Pet(x) -> Animal(x))", "all x.(Pet(x) -> Animal(x))", "(all x.(Pet(x) -> Animal(x))", "all x.(Pet(x) -> Animal(x))", "all x.(Pet(x) -> Animal(x))", "all x.(Pet(x) -> Animal(x))", "all x.(Pet(x) -> Animal(x))", "all x.(Pet(x) -> Animal(x))", "all x.(Pet(x) -> Animal(x))", "all x.(Pet(x) -> Animal(x))", "all x.(Pet(x) -> Animal(x))", "all x.(Pet(x) -> Animal(x))", "all x.(Pet(x) -> Animal(x))", "exists x.(Pet(x) & Animal(x))"]}
{"id": "folio_train_2255", "nl": "Pets can be either a dog or a cat.", "fol": "all x.(((IsPet(x) -> IsDog(x)) & -IsCat(x)) | (-(IsPet(x) -> IsDog(x)) & IsCat(x)))", "prediction": ["all x.(Pet(x) -> (Dog(x) | Cat(x)))", "all x.(Pet(x) -> (Dog(x) | Cat(x)))", "all x y.((Pet(x) & Dog(y)) | Cat(y))", "all x.(Pet(x) -> (Dog(x) | Cat(x)))", "all x.(Pet(x) -> (Dog(x) | Cat(x)))", "all x y.((Pet(x) & Dog(y)) | Cat(y))", "exists x.(Pet(x) & Dog(x) & Cat(x))", "all x.(Pet(x) -> (Dog(x) | Cat(x)))", "all x y.((Pet(x) & Dog(y)) | Cat(y))", "all x.(Pet(x) -> (Dog(x) | Cat(x)))", "exists x.(Pet(x) & Dog(x) & Cat(x))", "exists x.(Pet(x) & CanBeDog(x) & CanBeCat(x))", "all x.(Pet(x) -> (Dog(x) | Cat(x)))", "exists x.(Pet(x) & Dog(x) & Cat(x))", "exists x.(Pet(x) & Dog(x) | Cat(x))", "all x.(Pet(x) -> (Dog(x) | Cat(x)))"]}
{"id": "folio_train_2256", "nl": "If a person has a pet, they care for that pet. ", "fol": "all x y.(OwnsPet(x) -> CaresFor(x,y))", "prediction": ["all x.(HasPet(x) -> CaresForPet(x))", "all x.((Person(x) & HasPet(x)) -> CaresForPet(x))", "all x y.((Person(x) & Pet(y)) -> CaresFor(x,y))", "all x.(HasPet(x) -> CaresForPet(x))", "all x.(Pet(x) -> CaresFor(x,pet))", "all x.(HasPet(x) -> CareForPet(x))", "all x y.((Person(x) & Pet(y)) -> CaresFor(x,y))", "all x y.((Person(x) & Pet(y) & Has(x,y)) -> CaresFor(x,y))", "all x.((Person(x) & HasPet(x)) -> CaresForPet(x))", "all x.(HasPet(x) -> CarriesFor(x,pet))", "all x.(Pet(x) -> CaresFor(x,pet,pet))", "all x y.((Person(x) & Pet(y)) -> CaresFor(x,y))", "all x y.((Person(x) & Pet(y) & Has(x,y)) -> CaresFor(x,y))", "exists x.(Pet(x) & Has(x,y))", "all x.(HasPet(x) -> CaresForPet(x))", "exists x.(Pet(x) & Has(x,Pet))"]}
{"id": "folio_train_2257", "nl": "Dogs and Cats can be naughty. ", "fol": "exists x.((IsCat(x) & IsNaughty(x)) | (IsDog(x) & IsNaughty(x)))", "prediction": ["all x.((Dog(x) | Cat(x)) -> Naughty(x))", "all x y.((Dog(x) | Cat(y)) -> Naughty(x))", "all x.((Dog(x) | Cat(x)) -> Naughty(x))", "(Naughty(Dog) | Naughty(Cat))", "all x.((Dog(x) | Cat(x)) -> Naive(x))", "all x y.((Dog(x) | Cat(y)) -> Naughty(x))", "exists x.(Dog(x) | Cat(x) & Naughty(x))", "all x y.((Dog(x) | Cat(y)) -> (Naughty(x) | Naughty(y)))", "(Naughty(Dog) | Naughty(Cat))", "(Naughty(Dog) | Naive(Cat))", "all x.((Dog(x) | Cat(x)) -> Naughty(x))", "exists x.(Dog(x) | Cat(x) & Naughty(x))", "all x.((Dog(x) | Cat(x)) -> Naive(x))", "(all x.(Dog(x) | Cat(x))) -> Naughty(x))", "exists x.(Dog(x) & Cat(x) & Naughty(x))", "all x.((Dog(x) | Cat(x)) -> Naughty(x))"]}
{"id": "folio_train_2258", "nl": "Pets who are naughty are not liked as much. ", "fol": "all x y.((IsPet(x) & IsNaughty(x)) -> -IsLiked(x,y))", "prediction": ["all x.((Pet(x) & Naughty(x)) -> -Likely(x))", "all x.((Pet(x) & Naughty(x)) -> -Likely(x))", "(all x.(NaughtyPet(x) -> -Likely(x)))", "all x.(NaughtyPet(x) -> -Likely(x))", "all x.((Pet(x) & Naughty(x)) -> -LovedAsMuch(x))", "(NaughtyPet(p) & NotLikely(p))", "all x y.((Pet(x) & Naughty(x)) -> -Likely(y))", "all x.((Pet(x) & Naive(x)) -> -Likely(x))", "all x.(Naughty(x) -> -Likely(x))", "all x.((Pet(x) & Naughty(x)) -> -Likely(x))", "all x.(NaughtyPet(x) -> -Likely(x))", "all x y.((Pet(x) & Naughty(x)) -> -Likely(y))", "all x.((Pet(x) & Naughty(x)) -> -LovedAsMuch(x))", "all x.((Pet(x) & Naive(x)) -> -Likely(x))", "all x.(Naughty(x) -> -Likely(x))", "all x.((Pet(x) & Naughty(x)) -> NotLikedAsMuch(x))"]}
{"id": "folio_train_2259", "nl": "Charlie has a naughty pet dog named Leo. ", "fol": "(OwnsPet(Charlie) & IsPet(Leo) & IsDog(Leo) & IsNaughty(Leo))", "prediction": ["all x.(Charlie(x) -> HasNaughtyPetDog(x,Leo))", "(NaughtyPetDog(Charlie) & Leo(Charlie))", "Charlie has a naughty pet dog named Leo.", "all x.((Charlie(x) & NaughtyPetDog(x)) -> Leo(x))", "all x y.((Charlie(x) & PetDog(y)) -> Naughty(x,y))", "all x.(Charlie(x) -> HasNaughtyPetDog(x,Leo))", "(NaughtyPetDog(Charlie) & Leo(Charlie))", "all x.(Charlie(x) -> NaughtyPetDog(x,Leo))", "Charlie has a naughty pet dog named Leo.", "(NaughtyPetDog(Charlie) & NamedLeo(Charlie))", "exists x.(PetDog(x,Charlie) & Naughty(x,Leo))", "all x y.((Charlie(x) & PetDog(y) & Naughty(y)) -> Leo(x))", "all x y.((Charlie(x) & Dog(y)) -> Naughty(x,y))", "exists x.(Charlie(x) & NaughtyPetDog(x,Leo))", "(NaughtyPetDog(Charlie) & NaughtyPetDog(Charlie))", "(NaughtyPetDog(Charlie) & Leo(Charlie))"]}
{"id": "folio_train_2260", "nl": "Leo is an animal.", "fol": "IsAnimal(Leo)", "prediction": ["all x.(Leo(x) -> Animal(x))", "(Animal(Leo) & Animal(Leo))", "Leo is Animal(leo)", "Leo is an animal.", "all x.(Leo(x) -> Animal(x))", "(Animal(Leo) & Animal(Leo))", "Leo isAnimal(leo)", "Leo is Animal(leo)", "Leo ist ein Animal(leo)", "All x.(Leo(x) -> Animal(x))", "Leo (Animal(Leo))", "All x.(L\u00e9o(x) -> Animal(x))", "all x.(Leo(x) -> Animal(x))", "Leo is an animal.", "All x.(Leo(x) -> Animal(x))", "all x.(Leo(x) -> Animal(x))"]}
{"id": "folio_train_2261", "nl": "Charlie does not like Leo and does not care for Leo.", "fol": "(-IsLiked(Charlie,Leo) & -CaresFor(Charlie,Leo))", "prediction": ["(-Likes(Charlie,Leo) & -CaresFor(Charlie,Leo))", "all x.(Charlie(x) -> (-LikesLeo(x) & -CaresForLeo(x)))", "(-Likes(Charlie) & -CaresFor(Charlie))", "(-LikesLeo(Charlie) & -CaresForLeo(Charlie))", "((Charlie(Charlie) & Leo(Charlie)) -> (-Likes(Charlie) & -CaresFor(Charlie)))", "(all x.(Charlie(x) -> -LikesLeo(x)) & -CaresForLeo(x))", "Charlie (-Likes(Charlie,Leo) & -CaresFor(Charlie,Leo))", "all x.(Charlie(x) -> (-LikesLeo(x) & -CaresForLeo(x)))", "(-(Charlie(Charlie) & Leo(Charlie)) | Leo(Charlie)))", "all x.(Charlie(x) -> (-Likes(x,Leo) & -CaresFor(x,Leo)))", "(-likesLeo(Charlie) & -CaresForLeo(Charlie))", "-(Likes(Charlie,Leo) | CaresFor(Charlie,Leo))", "Charlie does not likeLeo(Charlie) & does notCareForLeo(Charlie))", "(all x.(Charlie(x) -> (-Likes(x,Leo) & -CaresFor(x,Leo)))", "all x.(Charlie(x) -> (-likesLeo(x) & -CaresForLeo(x)))", "all x.(Charlie(x) -> (-LikesLeo(x) & -CaresForLeo(x)))"]}
{"id": "folio_train_2262", "nl": "Dogs are always not naughty.", "fol": "all x.(IsDog(x) -> -IsNaughty(x))", "prediction": ["all x.(Dog(x) -> -Naughty(x))", "all x.(Dog(x) -> -Naughty(x))", "(all x.(Dog(x) -> -Naughty(x)))", "all x y.((Dog(x) & Naughty(y)) -> -Naughty(x))", "all x.(Dog(x) -> -Naughty(x))", "all x y.((Dog(x) & Dog(y) & -Naughty(y)) -> -Naughty(x,y))", "(all x.(Dog(x) -> -Naughty(x)))", "all x.(Dog(x) -> -Naughty(x))", "all x y.(Dog(x) -> -Naughty(x,y))", "all x.(Dog(x) -> -Naughty(x))", "all x.(Dog(x) -> -Naughty(x))", "all x.(Dog(x) -> -Naughty(x))", "all x.(Dog(x) -> -Naughty(x))", "all x.(Dog(x) -> -Naughty(x))", "all x.(Dog(x) -> -Naughty(x))", "exists x.(Dog(x) & -Naughty(x))"]}
{"id": "folio_train_2263", "nl": "Surprises are either fun or dreadful.", "fol": "all x.(SurpriseEvent(x) -> ((IsFun(x) & -IsDreadful(x)) | (-IsFun(x) & IsDreadful(x))))", "prediction": ["all x.(Surprise(x) -> (Fun(x) | Dreadful(x)))", "(Fun(surprise) | Dreadful(surprise)))", "all x.(Surprise(x) -> (Fun(x) | Dreadful(x)))", "all x.(Surprise(x) -> (Fun(x) | Dreadful(x)))", "(all x.(Surprise(x) -> Fun(x)) & all y.(Surprise(y) -> Dreadful(y)))", "all x y.((Surprise(x) & Fun(y)) | Dreadful(y)) -> Surprise(x))", "(all x.(Surprise(x) -> (Fun(x) | Dreadful(x))))", "all x.(Surprise(x) -> (Fun(x) | Dreadful(x)))", "all x.(Surprises(x) -> (Fun(x) | Dreadful(x)))", "all x y.((Surprise(x) & Fun(y)) | Dreadful(y)) -> Surprise(x))", "all x.(Surprise(x) -> (Fun(x) | Dreadful(x)))", "all x.((Surprise(x) & Fun(x)) | Dreadful(x))", "all x.(Surprise(x) -> (Fun(x) | Dreadful(x)))", "all x.(Surprise(x) -> (Fun(x) | Dreadful(x)))", "all x.(Surprises(x) -> (Fun(x) | Dreadful(x)))", "all x.(Surprise(x) -> ((Fun(x) | Dreadful(x))))"]}
{"id": "folio_train_2264", "nl": "All scares are surprises.", "fol": "all x.(IsScare(x) -> SurpriseEvent(x))", "prediction": ["all x.(Scare(x) -> Surprise(x))", "all x.(Scare(x) -> Surprise(x))", "(all x.(Scare(x) -> Surprise(x)))", "all x.(Scare(x) -> Surprise(x))", "all x y.(Scare(x) -> Surprise(x))", "all x.(Scare(x) -> Surprise(x))", "(all x.(Scare(x) -> Surprise(x))", "all x.(Scare(x) -> Surprise(x))", "all x.(Scare(x) -> Surprise(x))", "all x y.(Scare(x) -> Surprise(y))", "all x.(Scare(x) -> Surprise(x))", "all x.(Scare(x) -> Surprising(x))", "all x.(Scare(x) -> Surprise(x))", "all x.(Scare(x) -> Surprise(x))", "all x.(Scare(x) -> Surprise(x))", "All x.(Scare(x) -> Surprise(x))"]}
{"id": "folio_train_2265", "nl": "All scares are fun.", "fol": "all x.(IsScare(x) -> IsFun(x))", "prediction": ["all x.(Scare(x) -> Fun(x))", "all x.(Scare(x) -> Fun(x))", "all x.(Scare(x) -> Fun(x))", "(all x.(Scare(x) -> Fun(x)))", "all x.(Scare(x) -> Fun(x))", "all x.(Scare(x) -> Fun(x))", "all x y.(Scare(x) -> Fun(x))", "(all x.(Scare(x) -> Fun(x)))", "all x.(Scare(x) -> Fun(x))", "all x.(Scary(x) -> Fun(x))", "all x.(Scare(x) -> Fun(x))", "(all x.(Scare(x) -> Fun(x))", "all x.(Scare(x) -> Fun(x))", "all x.(Scare(x) -> Fun(x))", "all x.(Scare(x) -> Fun(x))", "All x.(Scare(x) -> Fun(x))"]}
{"id": "folio_train_2266", "nl": "All books written by Cixin Liu have sold more than 1 million copies. ", "fol": "all x.((IsBook(x) & AuthoredBy(x,Cixinliu)) -> HasSoldMoreThan(x,Onemillion))", "prediction": ["all x.((Book(x) & WrittenByCixinLiu(x)) -> SoldMoreThan(x,million))", "all x y.((Book(x) & WrittenByCixinLiu(x)) -> SoldMoreThan(x,y))", "all x.((Book(x) & WrittenByCixinLiu(x)) -> SoldMoreThanOneMillionCopies(x))", "(all x.(BookWrittenByCixinLiu(x) -> SoldMoreThan(x,1000)))", "all x y.((Book(x) & WrittenByCixinLiu(x) & SoldMoreThan(x,y)) -> MoreThan(y,x))", "all x.((Book(x) & WrittenByCixinLiu(x)) -> SoldMoreThan(x,1000))", "All x.(BookWrittenByCixinLiu(x) -> SoldMoreThan(x,1000))", "all x.(Book(x) -> WrittenByCixinLiu(x))", "all x.((Book(x) & WrittenByCixinLiu(x)) -> SoldMoreThanOneMillionCopies(x))", "all x y.((Book(x) & WrittenByCixinLiu(x)) -> SoldMoreThan(x,y))", "all x y.((Book(x) & WrittenByCixinLiu(x,y)) -> SoldMoreThan(x,y))", "All x.(Book(x) -> WrittenByCixinLiu(x))", "all x y.((Book(x) & WrittenByCixinLiu(x) & SoldMoreThan(x,y)) -> MoreThan(y,x))", "all x.((Book(x) & WrittenByCixinLiu(x)) -> SoldMoreThan(x,1 MillionCopies))", "all x.((Book(x) & WrittenByCixinLiu(x)) -> SoldMoreThanMillionCopies(x))", "all x.((Book(x) & WrittenByCixinLiu(x)) -> SoldMoreThanOneMillionCopies(x))"]}
{"id": "folio_train_2267", "nl": "Some books that have won the Hugo Award were written by Cixin Liu.", "fol": "exists x.(HasWonAward(x,Hugoaward) & IsBook(x) & AuthoredBy(x,Cixinliu))", "prediction": ["exists x.(Book(x) & WonHugoAward(x) & WrittenByCixinLiu(x))", "(WonHugoAward(Book) & WrittenByCixinLiu(Book))", "(exists x.(Book(x) & WonHugoAward(x)) & WrittenBy(x,CixinLiu))", "all x y.((Book(x) & HugoAward(y)) -> WrittenByCixinLiu(x,y))", "exists x.(Book(x) & WonHugoAward(x) & WrittenByCixinLiu(x))", "(WonHugoAward(book) & WrittenByCixinLiu(book))", "all x y.((Book(x) & WonHugoAward(x)) -> WrittenByCixinLiu(x))", "exists x.(Book(x) & WonHugoAward(x)) -> WrittenByCixinLiu(x))", "exists x.(Book(x) & WonHugoAward(x) & WrittenByCixinLiu(x))", "all x y.((Book(x) & HugoAward(y)) -> WrittenByCixinLiu(x))", "exists x.(Book(x) & WonHumoAward(x) & WrittenByCixinLiu(x))", "exists x.(Book(x) & WonHugo(x) & WrittenByCixinLiu(x))", "exists x.(Book(x) & WonHugoAward(x) & WrittenByCixinLiu(x))", "all x y.((Book(x) & HugoAward(y)) -> WrittenByCixinLiu(x,y))", "exists x.(Book(x) & HugoAwardWon(x) & WrittenBy(x,CixinLiu))", "exists x.(Book(x) & WonHungoAward(x) & WrittenByCixinLiu(x))"]}
{"id": "folio_train_2268", "nl": "All books about the future are influenced by Isaac Asimov.", "fol": "all x.((IsBook(x) & IsAboutFuture(x)) -> IsInfluencedBy(x,Isaacasimov))", "prediction": ["all x.(Book(x) -> InfluencedByIsaacAsimov(x))", "all x.((Book(x) & Influential(x)) -> IsaacAsimov(x))", "all x y.((Book(x) & Future(y)) -> InfluencedByIsaacAsimov(x,y))", "(InfluencedByIsaacAsimov(Books) & AboutFuture(Books))", "all x.((Book(x) & InfluencedByIsaacAsimov(x)) -> Future(x))", "all x.(Book(x) -> InfluencedByIsaacAsimov(x))", "(InfluencedByIsaacAsimov(Book,Future))", "all x.((Book(x) & IsaacAsimov(x)) -> InfluencedBy(x,y))", "all x y.((Book(x) & Future(y)) -> InfluencedByIsaacAsimov(x,y))", "all x.(Book(x) -> InfluencedByIsaacAsimov(x))", "all x.(Book(x) -> InfluencedByIsaakAsimov(x))", "all x y.((Book(x) & Future(y)) -> InfluencedByIsaacAsimov(x,y))", "all x y.((Book(x) & Future(y) & InfluencedBy(x,y)) -> IsaacAsimov(x))", "all x y.((Book(x) & Future(y)) -> InfluencedBy(x,y))", "all x.(Book(x) -> InfluencedByIsaacAsimov(x))", "All x.(Book(x) -> InfluencedByIsaakAsimov(x))"]}
{"id": "folio_train_2269", "nl": "The book the Three Body Problem has sold more than 1 million copies.", "fol": "(IsBook(Threebodyproblem) & HasSoldMoreThan(Threebodyproblem,Onemillion))", "prediction": ["The ThreeBodyProblem(x) & SoldMoreThanOneMillionCopies(x))", "(SoldMoreThanOneMillionCopies(Book) & TheThreeBodyProblem(Book))", "All x.((Book(x) & ThreeBodyProblem(x)) -> SoldMoreThanOneMillionCopies(x))", "the book The ThreeBodyProblemSoldMoreThanOneMillionCopies(x))", "the book, The ThreeBodyProblem(x) & SoldMoreThanOneMillionCopies(x))", "all x y.((Book(x) & ThreeBodyProblem(y)) -> SoldMoreThan(x,y))", "The ThreeBodyProblemSoldMoreThanOneMillionCopies(Book)", "The ThreeBodyProblem(x) & SoldMoreThan(x,1000))", "all x.((Book(x) & ThreeBodyProblem(x)) -> SoldMoreThan(x,y))", "(SoldMoreThanOneMillionCopies(Book) & TheThreeBodyProblem(Book))", "(SoldMoreThan(Book,3) & BodyProblem(Book,1))", "The Book The ThreeBodyProblemSoldMoreThan(x,1000000)", "All x.((Book(x) & ThreeBodyProblem(x)) -> SoldMoreThanOneMillionCopies(x))", "The ThreeBodyProblemSoldMoreThan(x,1000)", "all x.((Book(x) & ThreeBodyProblem(x)) -> SoldMoreThan(x,million))", "All x.((Book(x) & ThreeBodyProblem(x)) -> SoldMoreThan1MCopies(x))"]}
{"id": "folio_train_2270", "nl": "The Three Body Problem is about the future.", "fol": "IsAboutFuture(Threebodyproblem)", "prediction": ["All x.(ThreeBodyProblem(x) -> AboutFuture(x))", "(ThreeBodyProblem(x) -> AboutFuture(x))", "The ThreeBodyProblem is aboutFuture(x)", "The ThreeBodyProblem(x) -> AboutFuture(x))", "All x.(ThreeBodyProblem(x) -> AboutFuture(x))", "all x y.((ThreeBodyProblem(x) & Future(y)) -> About(x,y))", "(FuturePositive(ThreeBodyProblem)", "(ThreeBodyProblem(x) & AboutFuture(x))", "The ThreeBodyProblemIsAboutFuture(x)", "The ThreeBodyProblem is aboutFuture(x)", "all x.(ThreeBodyProblem(x) -> AboutFuture(x))", "all x y.((ThreeBodyProblem(x) & Future(y)) -> About(x,y))", "All x.(ThreeBodyProblem(x) -> AboutFuture(x))", "all x.(TwoBodyProblem(x) -> AboutFuture(x))", "All x.(ThreeBodyProblem(x) -> Future(x))", "All x.(TwoBodyProblem(x) -> Future(x))"]}
{"id": "folio_train_2271", "nl": "The Three Body Problem won the Hugo Award.", "fol": "HasWonAward(Threebodyproblem,Hugoaward)", "prediction": ["All x.((ThreeBodyProblem(x) & HugoAward(x)) -> Won(x))", "The ThreeBodyProblemWonHugoAward(x)", "(WonHugoAward(ThreeBodyProblem))", "(Winner(ThreeBodyProblem) & HugoAward(ThreeBodyProblem))", "(WonHabitoAward(ThreeBodyProblem))", "-WonHugoAward(3BodyProblem,ThreeBody(x))", "The ThreeBodyProblemWonHugoAward(x)", "All x.(ThreeBodyProblem(x) -> WonHugoAward(x))", "All x.((ThreeBodyProblem(x) & HugoAward(x)) -> Won(x))", "(WonHugoAward(ThreeBodyProblem))", "The ThreeBodyProblemWonHugoAward(x)", "The ThreeBodyProblemWonHumoAward(x)", "all x.((ThreeBodyProblem(x) & HugoAward(x)) -> Won(x,y))", "All x.(ThreeBodyProblem(x) -> WonHugoAward(x))", "The ThreeBodyProblemWinsHungoAward(3D)", "The ThreeBodyProblemWonHugoAward(2013)"]}
{"id": "folio_train_2272", "nl": "The Three Body Problem was influenced by Isaac Asimov.", "fol": "IsInfluencedBy(Threebodyproblem,Isaacasimov)", "prediction": ["All x.(ThreeBodyProblem(x) -> InfluencedByIsaacAsimov(x))", "The ThreeBodyProblem(x) influencedByIsaacAsimov(x))", "(InfluencedByIsaacAsimov(3BodyProblem)", "All x.((ThreeBodyProblem(x) & IsaacAsimov(x)) -> InfluencedBy(x,y))", "All x y.((ThreeBodyProblem(x) & IsaacAsimov(y)) -> InfluencedBy(x,y))", "(InfluentialBodyProblem(ThreeBodyProblem) -> IsaacAsimov(ThreeBodyProblem))", "All x.(ThreeBodyProblem(x) -> InfluencedByIsaacAsimov(x))", "The ThreeBodyProblem(x) influencedByIsaacAsimov(x))", "(InfluencedByIsaacAsimov(ThreeBodyProblem)", "All x.((ThreeBodyProblem(x) & Influential(x)) -> IsaacAsimov(x))", "The ThreeBodyProblem(x) & InfluencedByIsaacAsimov(x))", "(Influential(ThreeBodyProblem) -> IsaacAsimov(Asimov))", "The ThreeBodyProblemInfluencedByIsaakAsimov(x)", "all x y.((ThreeBodyProblem(x) & IsaacAsimov(y)) -> InfluencedBy(x,y))", "The ThreeBodyProblem(x) influencedByIsaacAsimov(x)", "The ThreeBodyProblemInfluencedByIsaacAsimov."]}
{"id": "folio_train_2273", "nl": "The Three Body Problem was written by Cixin Liu.", "fol": "AuthoredBy(Threebodyproblem,Cixinliu)", "prediction": ["The ThreeBodyProblem(x) -> WrittenByCixinLiu(x))", "All x.(ThreeBodyProblem(x) -> WrittenByCixinLiu(x))", "(TheThreeBodyProblem(x) & WrittenByCixinLiu(x))", "(WrittenByCixinLiu(CixinLiu) & ThreeBodyProblem(CixinLiu))", "CixinLiu (WrittenBodyProblem(c) & CixinLiu(c))", "The ThreeBodyProblem(x) & WrittenByCixinLiu(x))", "All x.((ThreeBodyProblem(x) & WrittenByCixinLiu(x)) -> WrittenBy(x,CixinLiu))", "(CixinLiu,CixinBodyProblem)", "CixinLiu & WrittenThreeBodyProblem(x)", "(WrittenByCixinLiu(x) & ThreeBodyProblem(x))", "CixinLiu (Author(CixinLiu) & WrittenBy(CixinLiu))", "All x.(ThreeBodyProblem(x) -> WrittenByCixinLiu(x))", "The ThreeBodyProblem(x) -> WrittenByCixinLiu(x))", "The ThreeBodyProblem(x) - WrittenByCixinLiu(x))", "The ThreeBodyProblem was written by CixinLiu.", "The ThreeBodyProblem(x) & WrittenByCixinLiu(x))"]}
{"id": "folio_train_2274", "nl": "Some students who major in computer science get up early. ", "fol": "exists x.(MajoringInComputerScience(x) & WakesUpEarly(x))", "prediction": ["exists x.(Student(x) & MajorsInComputerScience(x) & GetsUpEarly(x))", "exists x.(Student(x) & MajorInComputerScience(x) & GetsUpEarly(x))", "exists x.(Student(x) & MajorsInComputerScience(x) & GetsUpEarly(x))", "all x y.((Student(x) & MajorInComputerScience(x)) -> GetsUpEarly(x))", "exists x y.(Student(x) & MajorInComputerScience(x) & GetsUpEarly(x))", "all x y.((Student(x) & MajorsInComputerScience(x)) -> GetsUpEarly(x))", "exists x.(Student(x) & MajorInComputerScience(x) & GetsUpEarly(x))", "exists x.(Student(x) & MajorsInComputerScience(x) & GetsUpEarly(x))", "all x y.((Student(x) & MajorInComputerScience(x)) -> GetsUpEarly(x))", "exists x.(Student(x) & MajorInComputerScience(x) & GetsUpEarly(x))", "exists x.(Student(x) & MajorsInComputerScience(x))", "exists x.(Student(x) & MajorsInComputerScience(x) & GetsUpEarly(x))", "exists x.(Student(x) & MajorInComputerScience(x) & GetsUpEarly(x))", "exists x.(Student(x) & MajorInComputerScience(x) & GetsUpEarly(x))", "exists x.(Student(x) & MajorsInComputerScience(x))", "exists x.(Student(x) & MajorsInComputerScience(x) & GetsUpEarly(x))"]}
{"id": "folio_train_2275", "nl": "If a student gets up early, then he/she will study in the morning. ", "fol": "all x.(WakesUpEarly(x) -> StudiesInTheMorning(x))", "prediction": ["all x.((Student(x) & GetsUpEarly(x)) -> StudiesInMorning(x))", "all x y.((Student(x) & GetsUpEarly(x)) -> StudiesInMorning(x,y))", "all x.(EarlyStudent(x) -> StudyInMorning(x))", "all x.((Student(x) & GetsUpEarly(x)) -> StudyInMorning(x))", "(EarlyStudent(Student,Early) -> StudyInMorning(Student,Early))", "all x.((Student(x) & GetsUpEarly(x)) -> StudiesInTheMorning(x))", "all x y.((Student(x) & GetsUpEarly(x)) -> StudyInMorning(x,y))", "all x.(EarlyStudent(x) -> StudiesInMorning(x))", "all x y.((Student(x) & GetsUpEarly(x) & Morning(y)) -> StudiesIn(x,y))", "all x.((Student(x) & GetsUpEarly(x)) -> StudyInMorning(x))", "all x y.((Student(x) & Early(x)) -> StudiesInMorning(x,y))", "all x.(Early(x) -> StudyInMorning(x))", "all x.(GetsUpEarly(x) -> StudiesInMorning(x))", "all x.((Student(x) & GetsUpEarly(x)) -> StudiesInTheMorning(x))", "all x y.((Student(x) & GetsUpEarly(x,y)) -> StudiesInMorning(x,y))", "all x.((Student(x) & GetsUpEarly(x)) -> StudyInMorning(x))"]}
{"id": "folio_train_2276", "nl": "All students studying in the morning are good at time management. ", "fol": "all x.(StudiesInTheMorning(x) -> HasGoodTimeManagementSkills(x))", "prediction": ["all x.((Student(x) & StudyingInMorning(x)) -> GoodAtTimeManagement(x))", "all x.(Student(x) -> GoodAtTimeManagement(x))", "all x y.((Student(x) & StudyingInMorning(x,y)) -> GoodAtTimeManagement(x))", "all x.((Student(x) & StudyingInMorning(x)) -> GoodAtTimeManagement(x))", "all x.(Student(x) -> GoodTimeManagement(x))", "all x.((Student(x) & StudyingInTheMorning(x)) -> GoodAtTimeManagement(x))", "(all x.(StudentStudyingInMorning(x) -> GoodTimeManagement(x))", "all x.((Student(x) & StudiesInMorning(x)) -> GoodAtTimeManagement(x))", "all x y.((Student(x) & StudyingInMorning(x,y)) -> GoodAtTimeManagement(x))", "all x y.((Student(x) & StudyingInTheMorning(x,y)) -> GoodAtTimeManagement(x))", "all x.(Student(x) & StudyingInMorning(x) -> GoodAtTimeManagement(x))", "all x.(Student(x) -> GoodAtTimeManagement(x))", "(all x.(Student(x) -> StudiesInMorning(x)) & GoodAtTimeManagement(x))", "all x.(Student(x) & StudiesInMorning(x) -> GoodAtTimeManagement(x))", "all x.((Student(x) & StudyingInMorning(x)) -> GoodAtTimeManagement(x))", "all x.(Student(x) -> GoodTimeManagement(x))"]}
{"id": "folio_train_2277", "nl": "All students good at time management are popular among students. ", "fol": "all x.(HasGoodTimeManagementSkills(x) -> IsPopularAmongStudents(x))", "prediction": ["all x.((Student(x) & GoodAtTimeManagement(x)) -> PopularAmongStudents(x))", "all x.(GoodAtTimeManagement(x) -> PopularAmongStudents(x))", "all x.((Student(x) & GoodAtTimeManagement(x)) -> PopularAmongStudents(x))", "all x.(GoodTimeManagementStudent(x) -> PopularAmongStudents(x))", "all x y.((Student(x) & Student(y) & GoodAtTimeManagement(x,y)) -> PopularAmongStudents(x,y))", "all x.((Student(x) & GoodTimeManagement(x)) -> PopularAmongStudents(x))", "all x y.((Student(x) & GoodAtTimeManagement(x)) -> PopularAmongStudents(y))", "all x.((Student(x) & GoodAtTimeManagement(x)) -> PopularAmongStudents(x))", "all x.(GoodTimeManagement(x) -> PopularAmongStudents(x))", "(all x.(GoodAtTimeManagement(x) -> PopularAmongStudents(x))", "all x.(GoodAtTimeManagement(x) -> PopularAmongStudents(x))", "all x y.((Student(x) & Student(y) & GoodAtTimeManagement(x,y)) -> PopularAmongStudents(x))", "all x.((Student(x) & GoodTimeManagement(x)) -> PopularAmongStudents(x))", "all x.((Student(x) & GoodAtTimeManagement(x)) -> PopularAmongStudents(x))", "all x.(GoodAtTimeManagement(x) -> PopularAmongStudents(x))", "all x.((Student(x) & GoodAtTimeManagement(x)) -> PopularAmongStudents(x))"]}
{"id": "folio_train_2278", "nl": "James is not popular among students. ", "fol": "-IsPopularAmongStudents(James)", "prediction": ["all x.(James(x) -> -PopularAmongStudents(x))", "(-PopularAmongStudents(James)", "(PopularAmongStudents(James,James) & -PopularAmongStudents(James,James))", "all x.((James(x) & Student(x)) -> -Popular(x))", "all x.(James(x) -> -PopularAmongStudents(x))", "-PopularAmongStudents(James)", "James is notpopularAmongStudents(James)", "(-PopularAmongStudents(James,James))", "all x.(James(x) -> -PopularAmongStudents(x))", "James is notpopularwithstudents.", "James is notpopular amongst students.", "-PopularAmongStudents(James,James)", "James is notpopularAmongStudents.", "-Popular(James)", "-PopularWithStudents(Jimmy,Jimmy)", "(-PopularAmongStudents(James)"]}
{"id": "folio_train_2279", "nl": "James majors in computer science.", "fol": "MajorsInComputerScience(James)", "prediction": ["all x.(James(x) -> MajorsInComputerScience(x))", "(MajorsInComputerScience(James) & MajorsInComputerScience(James))", "-MajorsInComputerScience(James)", "all x y.((James(x) & ComputerScience(y)) -> MajorsIn(x,y))", "(MajorsInComputerScience(James) -> JamesMajorsInComputerScience(James))", "all x.(James(x) -> MajorsInComputerScience(x))", "James majorsInComputerScience(James)", "all x.((James(x) & ComputerScience(x)) -> MajorsIn(x,y))", "James majors in ComputerScience.", "(MajorsInComputerScience(James) & MajorsInComputerScience(James))", "all x y.((James(x) & ComputerScience(y)) -> MajorsIn(x,y))", "all x.(James(x) -> MajorsInComputerScience(x))", "(MajorsInComputerScience(James) -> JamesMajorsInComputerScience(James))", "all x.(James(x) -> MajorsInComputerScience(x))", "all x.(James(x) -> MajorInComputerScience(x))", "all x.(James(x) -> MajorsInComputerScience(x))"]}
{"id": "folio_train_2280", "nl": "James majors in computer science and gets up early.", "fol": "(MajorsInComputerScience(James) & WakesUpEarly(James))", "prediction": ["all x.(James(x) -> (MajorsInComputerScience(x) & GetsUpEarly(x)))", "(MajorsInComputerScience(James) & GetsUpEarly(James))", "all x y.((James(x) & ComputerScience(y)) -> (MajorsIn(x,y) & GetsUpEarly(x)))", "James MajorsInComputerScienceAndGetsUpEarly(James)", "all x.((James(x) & MajorsInComputerScience(x)) -> GetsUpEarly(x))", "James majors in ComputerScience and GetsUpEarly(James)", "all x.(James(x) -> (MajorsInComputerScience(x) & GetsUpEarly(x)))", "(MajorsInComputerScience(James) & GetsUpEarly(James))", "all x y.((James(x) & ComputerScience(y)) -> (MajorsIn(x,y) & GetsUpEarly(x)))", "all x.((James(x) & MajorsInComputerScience(x)) -> GetsUpEarly(x))", "(MajorInComputerScience(James) & GetsUpEarly(James))", "all x.(James(x) -> (MajorsInComputerScience(x) & GetsUpEarly(x)))", "(MajorsInComputerScience(James) & GetsUpEarly(James))", "(MajorsInComputerScience(Jim) & GetsUpEarly(Jim))", "(MajorsInComputerScience(James) & GetsUpEarly(James))", "all x.(James(x) -> (MajorsInComputerScience(x) & GetsUpEarly(x)))"]}
{"id": "folio_train_2281", "nl": "If James gets up early, then he majors in computer science.", "fol": "(WakesUpEarly(James) -> MajoringInComputerScience(James))", "prediction": ["all x.((James(x) & GetsUpEarly(x)) -> MajorsInComputerScience(x))", "(MajorsInComputerScience(James) -> GetsUpEarly(James))", "all x y.((James(x) & GetsUpEarly(x)) -> MajorsInComputerScience(x,y))", "all x.((James(x) & GetsUpEarly(x)) -> MajorsInComputerScience(x))", "all x.((JimmyGirlsUpEarly(x) & MajorsInComputerScience(x)) -> MajorsInComputerScience(x))", "all x.((MajorInComputerScience(x) & JamesGivesUpEarly(x)) -> MajorsInComputerScience(x))", "all x.((James(x) & GetsUpEarly(x)) -> MajorsInComputerScience(x))", "(MajorsInComputerScience(James,EarlyUpset))", "all x y.((James(x) & GetsUpEarly(x)) -> MajorsInComputerScience(x))", "(MajorInComputerScience) -> JamesGivesUpEarly(James,James))", "all x.((James(x) & GetsUpEarly(x)) -> MajorInComputerScience(x))", "all x.(EarlyUpdate(x) -> MajorInComputerScience(x))", "all x.((MajorInComputerScience(x) & JamesGetsUpEarly(x)) -> MajorInComputerScience(x))", "all x.((Jimmy(x) & UpEarly(x)) -> MajorsInComputerScience(x))", "All x.(EarlyUpdate(x) -> MajorsInComputerScience(x))", "all x.((James(x) & GetsUpEarly(x)) -> MajorsInComputerScience(x))"]}
{"id": "folio_train_2282", "nl": "There is no dog on the roof.", "fol": "-exists x.(IsDog(x) & IsOnRoof(x))", "prediction": ["-DogOnRoof(x)", "there is no dog on roof.", "exists x.(DogOnRoof(x) & -OnRoof(x))", "-DogOnRoof(x)", "exists x.(Dog(x) & -OnRoof(x))", "is no dog on roof.", "(-Dog(x) & Roof(x))", "all x.(DogOnRoof(x) -> -exists y.(Roof(y) & On(x,y)))", "exists x.(DogOnRoof(x) & -DogOnRoof(x))", "(NoDog(x) & OnRoof(x))", "-exists x.(Dog(x) & Roof(x))", "-DogOnRoof(x)", "-DogOnRoof(x)", "(NoDog(x) & OnRoof(x))", "-DogOnRoof(x)", "-DogOnRoof(x)"]}
{"id": "folio_train_2283", "nl": "If there is a dog on the roof something went wrong.", "fol": "all x.exists y.((IsDog(x) & IsOnRoof(x)) -> SomethingWentWrong(y))", "prediction": ["all x.((Dog(x) & OnRoof(x)) -> GoesSince(x))", "all x.(Dog(x) -> GoesSinceRoof(x))", "all x.(DogOnRoof(x) -> GoesSince(x))", "all x.(Dog(x) -> GoesSincer(x))", "all x.((Dog(x) & OnRoof(x)) -> GoesSince(x))", "all x y.((Dog(x) & Roof(y)) -> GoesSorry(x,y))", "all x.((Dog(x) & Roof(x)) -> GoesSince(x))", "all x y z.((Dog(x) & Roof(y) & Roof(z)) -> GoesSince(x,y,z))", "exists x.(Dog(x) & OnRoof(x) & SomethingGoesSincer(x))", "all x y.((Dog(x) & Roof(y)) -> GoesStorm(x,y))", "all x y.((Dog(x) & RoofTop(y)) -> GoesSince(x,y))", "all x y.((Dog(x) & Roof(y) & On(x,y)) -> GoesSince(x))", "exists x.(DogOnRoof(x) & OnRoof(x))", "all x y.((Dog(x) & Rooftop(y)) -> GoesSince(x,y))", "exists x.(DogOnRoof(x) & GoesSince(x))", "exists x.(DogOnRoof(x) & OnRoof(x))"]}
{"id": "folio_train_2284", "nl": "Something went wrong.", "fol": "exists x.SomethingWentWrong(x)", "prediction": ["all x.(GoesSince(x) -> SomethingGoesStorm(x))", "(GoesSince(something) -> GoesStorm(something))", "EtwasGoesSince(x)", "all x.((GoesSince(x) & SomethingGoesStorm(x)) -> SomethingGoesStorm(x))", "All x.(GoesSick(x) -> SomethingGoesSince(x))", "-GoesSince(-)", "A lot of things went wrong.", "All x.((GoesSick(x) & SomethingGoesSince(x)) -> SomethingGoesStorm(x))", "-GoesSince(x)", "(GoesSince(something) & WasSince(something))", "EtwasGoesSince(x)", "exists x.(GoesStorm(x) & WasSince(x))", "-GoesSick(x)", "all x.(GoesSince(x) -> SomethingGoesStorm(x))", "Aww, i'm sorry.", "exists x.(GoedSorry(x) & -GoedSince(x))"]}
{"id": "folio_train_2285", "nl": "Elephantopus is a genus of perennial plants in the daisy family.", "fol": "all x.((GenusElephantopus(x) -> IsGenusOf(x,Perennialplants)) & BelongsToFamily(x,Daisyfamily))", "prediction": ["all x.(Elephantopus(x) -> (GenusOfPerennialPlants(x) & InDaisyFamily(x)))", "all x y.((Elephantopus(x) & DaisyFamily(y)) -> PerennialPlant(x,y))", "(GenusOfPerennialPlantsInDaisyFamily(Elephantopus))", "(Genus(Elephantopus) & PerennialPlant(Elephant) & DaisyFamily(Elephant))", "all x.(Elephantopus(x) -> (PerennialPlant(x) & DaisyFamily(x)))", "all x.(Elephantopus(x) -> (GenusOfPerennialPlants(x) & InDaisyFamily(x)))", "all x y z.((Elephantopus(x) & PerennialPlant(y) & DaisyFamily(z)) -> (Genus(x,y) & InFamily(x,z)))", "all x.(Elephantopus(x) -> (GenusOfPerennialPlants(x) & InDaisyFamily(x)))", "all x y.((Elephantopus(x) & PerennialPlant(y)) -> InDaisyFamily(x,y))", "(GenusOfPerennialPlantsInDaisyFamily(Elephantopus))", "all x.((Elephantopus(x) & PerennialPlant(x) & DaisyFamily(x)) -> Gene(x))", "all x y.((Elephantopus(x) & DaisyFamily(y)) -> PerennialPlant(x,y))", "all x.(Elephantopus(x) -> (GenusOfPerennialPlants(x) & DaisyFamily(x)))", "all x.(Elephantopus(x) -> (PerennialPlant(x) & DaisyFamily(x)))", "(GenusOfPerennialPlantsInDaisyFamily(Elephantopus))", "all x.(Elephantopus(x) -> (PerennialPlant(x) & InDaisyFamily(x)))"]}
{"id": "folio_train_2286", "nl": "Elephantopus is widespread over much of Africa, southern Asia, Australia, and the Americas.", "fol": "all x.((GenusElephantopus(x) -> WidespreadInRegion(x,Africa)) & WidespreadInRegion(x,Southernasia) & WidespreadInRegion(x,Australia) & WidespreadInRegion(x,Americas))", "prediction": ["all x.(Elephantopus(x) -> (WidespreadOverAfrica(x) & WidespreadOverSouthAsia(x) & WidespreadOverAustralia(x) & WidespreadOverAmericas(x)))", "(WidespreadOverAfrica(Elephantopus) & WidespreadOverSouthAsia(Elephantopus) & WidespreadOverAmericas(Elephantopus))", "all x.(Elephantopus(x) -> (WidespreadOver(x,Africa) & SouthernAsia(x) & Australia(x) & Americas(x)))", "all x.(Elephantopus(x) -> (WidespreadOverAfrica(x) & WidespreadOverSouthAsia(x) & WidespreadOverAustralia(x) & WidespreadOverAmericas(x)))", "all x y.((Elephantopus(x) & Africa(y) & SouthernAsia(y) & Australia(y) & Americas(y)) -> Widespread(x,y))", "(WidespreadOverAfrica(Elephantopus) & SpreadsOverSouthAsia(Elephantopus) & SpreadsOverAustralia(Elephantopus) & SpreadsOverAmericas(Elephantopus))", "(Widespread(Elephantopus) -> (Africa(E) & SouthernAsia(E) & Australia(E) & Americas(A)))", "all x y z.((Elephantopus(x) & Africa(y) & SouthernAsia(z) & Australia(z)) -> WidespreadOver(x,y,z))", "All x.(Elliptopus(x) -> (WidespreadOverAfrica(x) & SpreadsOverSouthAsia(x) & SpreadsOverAustralia(x) & SpreadsOverAmericas(x)))", "all x.(Elephantopus(x) -> (WidespreadOverAfrica(x) & WidespreadOverSouthAsia(x) & WidespreadOverAustralia(x) & WidespreadOverAmericas(x)))", "(WidespreadOverAfrica(Elephantopus) & AcrossSouthernAsia(Elephantopus) & OverAmericas(Elephantopus))", "all x.(Elephantopus(x) -> (WidespreadOverAfrica(x) & SpreadsOverSouthAsia(x) & SpreadsOverAustralia(x) & SpreadsOverAmericas(x)))", "(Widespread(Elephantopus) -> (Africa,SouthernAsia,Australia,Americas)))", "All x.(Elephantopus(x) -> (WidespreadOverAfrica(x) & SouthernAsia(x) & Australia(x) & Americas(x)))", "all x y.((Elephantopus(x) & Africa(y) & SouthernAsia(y) & Australia(y)) -> WidespreadOver(x,y))", "All x.(Elephantopus(x) -> (WidespreadOverMostOfAfrica(x) & SouthernAsia(x) & Australia(x) & Americas(x)))"]}
{"id": "folio_train_2287", "nl": "Several species of Elephantopus are native to the southeastern United States.", "fol": "exists x.(GenusElephantopus(x) & IsNativeToRegion(x,Southeasternunitedstates))", "prediction": ["exists x.(Elephantopus(x) & NativeToSoutheasternUnitedStates(x))", "SeveralSpeciesOfElephantopus(x) -> NativeToSoutheasternUnitedStates(x))", "Several species of Elephantopus are NativeToSoutheasternUnitedStates(Elephantopus)", "(exists x.(Elephantopus(x) & NativeToSoutheastern(x)))", "all x y.((Elephantopus(x) & Southeast(y)) -> NativeTo(x,y))", "SeveralSpeciesOfElephantopusNativeToSoutheasternUnitedStates(e) -> NativeToSoutheasternUnitedStates(e))", "exists x.(Elephantopus(x) & NativeToSoutheasternUnitedStates(x))", "all x y.((Elephantopus(x) & SoutheastU.S.S.A.S.(x)) -> NativeTo(x,y))", "all x y.((Elephantopus(x) & SoutheasternUnitedStates(y)) -> NativeTo(x,y))", "exists x.(Elephantopus(x) & NativeToSoutheasternUnitedStates(x))", "(exists x.(Elephantopus(x) & NativeToSoutheastern(x)))", "exists x.(Elephantopus(x) & NativeToSoutheastern(x))", "exists x.(ElephantopusSpecies(x) & NativeToSoutheasternUnitedStates(x))", "exists x.(Elephantopus(x) & NativeTo(x,southeasternUnitedStates))", "exists x.(Elephantopus(x) & NativeToSoutheasternUnitedStates(x))", "exists x.(Elephantopus(x) & NativeToSoutheast(x))"]}
{"id": "folio_train_2288", "nl": "Elephantopus scaber is a traditional medicine.", "fol": "all x.(GenusElephantopusScaber(x) -> UsedAsTraditionalMedicine(x))", "prediction": ["all x.(ElephantopusScaber(x) -> TraditionalMedicine(x))", "(TraditionalMedicine(ElephantopusScaber)", "all x.((ElephantopusScaber(x) & TraditionalMedicine(x)) -> TraditionalMedicine(x))", "the traditional medicine of elephantopus scaber.", "all x y.((ElephantopusScaber(x) & TraditionalMedicine(y)) -> TraditionalMedicine(x,y))", "all x.(ElephantopusScaber(x) -> TraditionalMedicine(x))", "(TraditionalMedicine(ElephantopusScaber)", "all x.((ElephantopusScaber(x) & TraditionalMedicine(x)) -> Scaber(x))", "all x.(ElephantopusScaber(x) -> TraditionalMedicine(x))", "(TraditionalMedicine(ElephantopusScaber)", "(TraditionalMedicine(ElephantopusScaber)", "all x.(ElephantopusScaber(x) -> TraditionalMedicine(x))", "(TraditionalMedicine(ElephantopusScaber,Camera))", "(TraditionalMedicine(ElephantopusScaber,Scaber))", "All x.(ElephantopusScaber(x) -> TraditionalMedicine(x))", "All x.(ElephantopusScaber(x) -> TraditionalMedicine(x))"]}
{"id": "folio_train_2289", "nl": "Elephantopus is widespread over much of Australia and Southern Asia.", "fol": "all x.((GenusElephantopus(x) -> WidespreadInRegion(x,Australia)) & WidespreadInRegion(x,Southernasia))", "prediction": ["all x.(Elephantopus(x) -> (WidespreadOver(x,Australia) & WidespreadOver(x,SouthernAsia)))", "(WidespreadOver(Elephantopus,Australia) & WidespreadOver(Elephantopus,SouthAsia))", "all x y.((Elephantopus(x) & Australia(y) & SouthernAsia(z)) -> WidespreadOver(x,y,z))", "(Widespread(Elephantopus) & AcrossAustralia(Elephantopus) & AcrossSouthAsia(Elephantopus))", "(Widespread(Elephantopus) -> (Expat(Elephant) & MuchOfAustralia(Elephant) & MuchOfSouthernAsia(Elephant)))", "all x.(Elephantopus(x) -> (WidespreadOver(x,Australia) & WidespreadOver(x,SouthernAsia)))", "all x.(Elephantopus(x) -> (WidespreadOverAustralia(x) & WidespreadOverSouthernAsia(x)))", "All x.(Elliptopus(x) -> (WidespreadOver(x,Australia) & WidespreadOver(x,SouthernAsia)))", "all x y.((Elephantopus(x) & Australia(y)) -> WidespreadOver(x,y))", "(WidespreadOverAustraliaAndSouthAsia(Elephantopus)", "all x.(Elephantopus(x) -> (WidespreadOver(x,Australia) & WidespreadOver(x,SouthernAsia)))", "All x.(Elephantopus(x) -> (WidespreadOverMostOfAustralia(x) & WidespreadOverMostOfSouthernAsia(x)))", "All x.(Elliptopus(x) -> (WidespreadOverAustralia(x) & WidespreadOverSouthernAsia(x)))", "all x y.((Elephantopus(x) & Australia(y) & SouthernAsia(y)) -> Widespread(x,y))", "all x.(Elephantopus(x) -> (WidespreadOver(x,Australia) & WidespreadOver(x,SouthAsia)))", "All x.(Elephantopus(x) -> WidespreadOver(x,Australia,SouthernAsia))"]}
{"id": "folio_train_2290", "nl": "No Elephantopus is native to the southeastern United States.", "fol": "-exists x.(GenusElephantopus(x) & IsNativeToRegion(x,Southeasternunitedstates))", "prediction": ["-exists x.(Elephantopus(x) & NativeToSoutheasternUnitedStates(x))", "all x.(Elephantopus(x) -> NativeToSoutheasternUnitedStates(x))", "NoElephantopusNativeToSoutheasternUnitedStates(Elephant)", "(exists x.(Elephantopus(x) & NativeToSoutheasternUnitedStates(x)) & -NativeToSoutheasternUnitedStates(x))", "KeenElephantopus(x) -> NativeToSoutheasternUnitedStates(x))", "(-NativeToSoutheasternUnitedStates(Elephantopus))", "(None(Elephantopus) & NativeToSoutheasternUnitedStates(Elephantopus))", "-exists x.(Elephantopus(x) & NativeToSoutheasternUnitedStates(x))", "all x.(Elephantopus(x) -> NativeToSoutheasternUnitedStates(x))", "all x.(Elephantopus(x) -> -NativeToSoutheastU.S.S.A.(Elephantopus(x)))", "-exists x.(Elephantopus(x) & NativeToSoutheasternUnitedStates(x))", "-exists x.(Elephantopus(x) & NativeToSoutheastern(x))", "-exists x.(Elephantopus(x) & NativeTo(x,SoutheasternUnitedStates))", "-exists x.(Elephantopus(x) & NativeToSoutheasternUnitedStates(x))", "-exists x.(Elephantopus(x) & NativeTo(x,southeasternUnitedStates))", "-exists x.(Elephantopus(x) & NativeToSoutheast(x))"]}
{"id": "folio_train_2291", "nl": "Elephantopus is a traditional medicine.", "fol": "all x.(GenusElephantopus(x) -> UsedAsTraditionalMedicine(x))", "prediction": ["all x.(Elephantopus(x) -> TraditionalMedicine(x))", "(TraditionalMedicine(Elephantopus)", "all x.(Elephantopus(x) -> TraditionalMedicine(x))", "Elephantopus (TraditionalMedicine(Elephant))", "All x y.((Elephantopus(x) & TraditionalMedicine(y)) -> TraditionalMedicine(x))", "Elephantopus is traditionalmedicine.", "(TraditionalMedicine(Elephantopus)", "all x.(Elephantopus(x) -> TraditionalMedicine(x))", "all x.((Elephantopus(x) & TraditionalMedicine(x)) -> TraditionalMedicine(x))", "(TraditionalMedicine(Elephantopus)", "all x.(Elephantopus(x) -> TraditionalMedicine(x))", "(TraditionalMedicine(Elephantopus,Crop))", "all x.(Elephantopus(x) -> TraditionalMedicine(x))", "all x.(Elephantopus(x) -> TraditionalMedicine(x))", "All x.(Elephantopus(x) -> TraditionalMedicine(x))", "all x.(Elephantopus(x) -> TraditionalMedicine(x))"]}
{"id": "folio_train_2292", "nl": "All Yale dormitories are located on York Street. ", "fol": "all x.(IsYaleDormitory(x) -> LocatedOnYorkStreet(x))", "prediction": ["all x.(YaleDomestic(x) -> LocatedOnYorkStreet(x))", "all x.(Domestic(x) -> LocatedOnYorkStreet(x))", "(all x.(YaleDomestic(x) -> YorkStreet(x)))", "all x.(YaleDomhouse(x) -> LocatedOnYorkStreet(x))", "all x.(Domestic(x) -> (LocatedOnYorkStreet(x) & YaleDomestic(x)))", "all x y.((Domhouse(x) & Yale(y)) -> LocatedOnYorkStreet(x,y))", "all x y.((YaleDomhouse(x) & YorkStreet(y)) -> LocatedOn(x,y))", "(all x.(YaleDomhouse(x) -> YorkStreet(x)))", "all x.(YaleDomestic(x) -> (LocatedOnYorkStreet(x) | LocatedOnYorkStreet(x)))", "all x.(YaleDomestic(x) -> LocatedOnYorkStreet(x))", "all x y.((YaleDomhouse(x) & YorkStreet(y)) -> LocatedOn(x,y))", "all x.(Domhouse(x) -> YorkStreet(x))", "all x.(YaleDomhouse(x) -> LocatedOnYorkStreet(x))", "all x y.((Domhouse(x) & Yale(y)) -> LocatedOnYorkStreet(x,y))", "All x.(Domhouse(x) -> LocatedOnYorkStreet(x))", "All x.(YaleDomestic(x) -> YorkStreet(x))"]}
{"id": "folio_train_2293", "nl": "All buildings managed by Yale Housing are dormitories. ", "fol": "all x.(IsManagedByYaleHousing(x) -> IsYaleDormitory(x))", "prediction": ["all x.((Building(x) & ManagedByYaleHousing(x)) -> Dormitory(x))", "all x y.((Building(x) & YaleHousing(y)) -> Dormitory(x))", "all x.((Building(x) & ManagedByYaleHousing(x)) -> Dormitory(x))", "(All x.((Building(x) & ManagedByYaleHousing(x)) -> Dormitory(x))", "ALL TEXAS & ManagedByYaleHousing(x) -> Dormitory(x))", "all x.(Building(x) & ManagedByYaleHousing(x) -> Dormitory(x))", "all x y.((Building(x) & ManagedByYaleHousing(x)) -> Dormitory(y))", "all x.((Building(x) & ManagedByYaleHousing(x)) -> Dormitory(x))", "all x y.((Building(x) & YaleHousing(y)) -> Dormitory(x))", "all x.((Building(x) & ManagedByYaleHousing(x)) -> Dormitory(x))", "All x.(Building(x) & ManagedByYaleHousing(x) -> Dormitory(x))", "all x.((Building(x) & ManagedByYaleHousing(x)) -> Dorma(x))", "all x.((Building(x) & ManagedByY YaleHousing(x)) -> Dormitory(x))", "all x.(Building(x) -> YaleHousing(x))", "all x.((Building(x) & ManagedByYaleHousing(x)) -> Dorms(x))", "all x.((Building(x) & ManagedByYaleHousing(x)) -> Dormitory(x))"]}
{"id": "folio_train_2294", "nl": "All buildings operated by Yale Housing staff are managed by Yale Housing. ", "fol": "all x.(IsOperatedByYaleHousingStaff(x) -> IsManagedByYaleHousing(x))", "prediction": ["all x.((Building(x) & OperatedByYaleHousingStaff(x)) -> ManagedByYaleHousing(x))", "all x y.((Building(x) & YaleHousingStaff(y)) -> ManagedBy(x,y))", "all x y.((Building(x) & YaleHousing(y)) -> ManagedBy(x,y))", "all x.((Building(x) & OperatedByYaleHousingStaff(x)) -> ManagedByYaleHousing(x))", "all x y z.((Building(x) & YaleHousingStaff(y) & YaleHousing(z)) -> ManagedBy(x,y,z))", "ALLOWEDBYY YaleHousingStaff(x) -> ManagedByY YaleHousing(x))", "all x y.((Building(x) & YaleHousing(y) & OperatedBy(x,y)) -> ManagedBy(x,y))", "all x y.((Building(x) & YaleHousingStaff(y)) -> ManagedBy(x,y))", "all x.((Building(x) & OperatedByYaleHousingStaff(x)) -> ManagedByYaleHousing(x))", "all x.((Building(x) & OperatedByY YaleHousingStaff(x)) -> ManagedByY YaleHousing(x))", "(all x.(HousingBuilding(x) -> OperatedByYaleHousingStaff(x)))", "all x.((Building(x) & OperatedByYaleHousingStaff(x)) -> ManagedByYaleHousing(x))", "all x.((Building(x) & YaleHousingStaff(x)) -> ManagedBy(x,y))", "all x.((Building(x) & OperatedByY YaleHousingStaff(x)) -> ManagedByY YaleHousing(x))", "all x y.((Building(x) & YaleHousingStaff(y)) -> ManagedBy(x,y))", "all x.((Building(x) & OperatedByYaleHousingStaff(x)) -> ManagedByYaleHousing(x))"]}
{"id": "folio_train_2295", "nl": "No buildings open to students are established after 1800. ", "fol": "all x.(IsOpenToStudents(x) -> -EstablishedPost1800(x))", "prediction": ["all x.((Building(x) & OpenToStudents(x)) -> -EstablishedAfter1800(x))", "-exists x.(Building(x) & OpenToStudents(x))", "-exists x.(Building(x) & OpenToStudents(x) & EstablishedAfter(x,180))", "all x.((Building(x) & OpenToStudents(x)) -> -EstablishedAfter1800(x))", "no buildings opentostudentsafter1800.", "(exists x.(Building(x) & OpenToStudents(x)) & -EstablishedAfter(x,1801))", "all x.((Building(x) & OpenToStudents(x)) -> -EstablishedAfter(x,1801))", "-exists x.(Building(x) & OpenToStudents(x))", "-exists x.(Building(x) & OpenToStudents(x) & After(x,180))", "all x y.((Building(x) & OpenToStudents(y) & EstablishedAfter(x,y)) -> -(OpenToStudents(x,y) & EstablishedAfter(x,y)))", "all x.((Building(x) & OpenToStudents(x)) -> -EstablishedAfter1800(x))", "all x.((Building(x) & OpenToStudents(x)) -> -EstablishedAfter(x,1801))", "-exists x.(Building(x) & OpenToStudents(x))", "-exists x.(Building(x) & OpenToStudents(x) & EstablishedAfter(x,1801))", "all x.((Building(x) & OpenToStudents(x)) -> -EstablishedAfter1800(x))", "-exists x.(Building(x) & OpenToStudentsAfter(x,180))"]}
{"id": "folio_train_2296", "nl": "All buildings located on York Street are open to students. ", "fol": "all x.(LocatedOnYorkStreet(x) -> IsOpenToStudents(x))", "prediction": ["all x.((Building(x) & LocatedOnYorkStreet(x)) -> OpenToStudents(x))", "all x y.((Building(x) & YorkStreet(y)) -> OpenToStudents(x,y))", "all x.((Building(x) & LocatedOnYorkStreet(x)) -> OpenToStudents(x))", "(all x.(Household(x) & LocatedOnYorkStreet(x)) -> OpenToStudents(x))", "all x y.((Building(x) & LocatedOnYorkStreet(x)) -> OpenToStudents(x))", "all x.((Building(x) & YorkStreet(x)) -> OpenToStudents(x))", "all x y.((Building(x) & YorkStreet(y)) -> OpenToStudents(x,y))", "all x.((Building(x) & LocatedOnYorkStreet(x)) -> OpenToStudents(x))", "all x.((Building(x) & OnYorkStreet(x)) -> OpenToStudents(x))", "(All x.(Household(x) & LocatedOnYorkStreet(x)) -> OpenToStudents(x))", "all x y.((Building(x) & YorkStreet(y) & LocatedOn(x,y)) -> OpenToStudents(x))", "all x y.((Building(x) & LocatedOnYorkStreet(x,y)) -> OpenToStudents(x))", "all x.((Building(x) & LocatedOnYorkStreet(x)) -> OpenToStudents(x))", "All x.(Building(x) -> OpenToStudents(x))", "all x.((Building(x) & YorkStreet(x)) -> OpenToStudents(x))", "all x.((Building(x) & OnYorkStreet(x)) -> OpenToStudents(x))"]}
{"id": "folio_train_2297", "nl": "Harkness is either a building operated by Yale Housing staff or located on York Street. ", "fol": "((IsOperatedByYaleHousingStaff(Harkness) & -LocatedOnYorkStreet(Harkness)) | (-IsOperatedByYaleHousingStaff(Harkness) & LocatedOnYorkStreet(Harkness)))", "prediction": ["all x.(Harkness(x) -> (OperatedByYaleHousingStaff(x) | LocatedOnYorkStreet(x)))", "(OperatedByYaleHousingStaff(Harkness) | LocatedOnYorkStreet(Harkness)))", "all x y.((Harkness(x) & YaleHousingStaff(y)) -> (OperatedBy(x,y) | LocatedOnYorkStreet(x)))", "all x.(Harkness(x) -> (OperatedByYaleHousingStaff(x) | LocatedOnYorkStreet(x)))", "(exists x.(Harkness(x) & OperatedByYaleHousingStaff(x)) | exists y.(YorkStreet(y) & LocatedOn(x,y))))", "all x.(Harkness(x) -> (BuildingOperatedByYaleHousingStaff(x) | LocatedOnYorkStreet(x)))", "(OperatedByYaleHousingStaff(Harkness) | LocatedOnYorkStreet(Harkness)))", "all x.(Harkness(x) -> (exists y.(Building(y) & OperatedByYaleHousingStaff(x,y)) | exists z.(Building(z) & LocatedOnYorkStreet(z)))))", "all x.(Harkness(x) -> (OperatedByYaleHousingStaff(x) | LocatedOnYorkStreet(x)))", "exists x.(Building(x) & (OperatedByYaleHousingStaff(x) | LocatedOnYorkStreet(x)))", "all x y.((Harkness(x) & YaleHousingStaff(y)) -> (OperatedBy(x,y) | LocatedOnYorkStreet(x,y)))", "all x.(Harkness(x) -> (OperatedByYaleHousingStaff(x) | LocatedOnYorkStreet(x)))", "all x.(Harkness(x) -> (BuildingOperatedByYaleHousingStaff(x) | LocatedOnYorkStreet(x)))", "(exists x.(Harkness(x) & OperatedByYaleHousingStaff(x)) | exists y.(YorkStreet(y) & LocatedOn(x,y))))", "all x.(Harkness(x) -> (OperatedByYaleHousingStaff(x) | LocatedOnYorkStreet(x)))", "exists x.(Harkness(x) & (OperatedByYaleHousing(x) | LocatedOnYorkStreet(x)))"]}
{"id": "folio_train_2298", "nl": "Harkness is a Yale dormitory.", "fol": "IsYaleDormitory(Harkness)", "prediction": ["all x.(Harkness(x) -> YaleDomby(x))", "(YaleDomby(Harkness) & YaleDomby(Harkness))", "Harkness is YaleDomby(x)", "Harkness is a YaleDomby(x)", "Harkness (YaleDorm(Harkness) & YaleDorm(Harkness))", "(All x.(Harkness(x) -> YaleDormary(x)))", "all x.(Harkness(x) -> YaleDormary(x))", "Harkness is YaleDormancy(Harkness)", "(YaleDorm(Harkness) & YaleDorm(Harkness))", "Harkness(Harkness) -> YaleDomby(Harkness))", "all x.(Harkness(x) -> YaleDormium(x))", "Harkness (YaleDorm(Harkness) & YaleDorm(Harkness))", "Harkness is a YaleDomby(x)", "all x.(Harkness(x) -> YaleDomby(x))", "all x.(Harkness(x) -> YaleDormium(x))", "All x.(Harkness(x) -> YaleDormancy(x))"]}
{"id": "folio_train_2299", "nl": "Harkness is not a Yale dormitory.", "fol": "-IsYaleDormitory(Harkness)", "prediction": ["all x.(Harkness(x) -> -YaleDomby(x))", "Harkness is not YaleDorm(Harkness)", "(-YaleDomby(Harkness))", "Harkness is not YaleDomby(Harkness)", "-YaleDomhouse(Harkness)", "all x.(Harkness(x) -> -YaleDomby(x))", "Harkness - YaleDormary(Harkness)", "-YeahooDomby(Harkness)", "(-YaleDorm(Harkness))", "all x.(Harkness(x) -> -YaleDorm(x))", "-YeahooDorm(Harkness)", "Harkness is not YaleDorm.", "-YaleDomby(Harkness)", "Harkness - YaleDormary(Harkness)", "(-YaleDormancy(Harkness))", "(-YaleDomhouse(Harkness))"]}
{"id": "folio_train_2300", "nl": "Harkness is established after 1800.", "fol": "EstablishedPost1800(Harkness)", "prediction": ["all x.(Harkness(x) -> EstablishedAfter(x,1801))", "(EstablishedAfter(Harkness,1800))", "Harkness establishedafter1800.", "Harkness established after 1800.", "all x.(Harkness(x) -> EstablishedAfter(x,1801))", "(EstablishedAfter(Harkness,1700))", "Harkness exists x.(After(x,1801))", "Harkness is establishedafter1800.", "all x.(Harkness(x) -> EstablishedAfter1800(x))", "(EstablishedAfter(Harkness,1800))", "Harkness establishedafter1800.", "all x.(Harkness(x) -> EstablishedAfter(x,1700))", "all x.(Harkness(x) -> EstablishedAfter(x,1801))", "Harkness exists after 1800.", "All x.(Harkness(x) -> EstablishedAfter1800(x))", "All x.(Harkness(x) -> EstablishedAfter(x,1801))"]}
{"id": "folio_train_2301", "nl": "Harkness is established before 1800.", "fol": "-EstablishedPost1800(Harkness)", "prediction": ["all x.(Harkness(x) -> EstablishedBefore1700(x))", "Harkness exists before 1800.", "(EstablishedBefore(Harkness,1800))", "all x.(Harkness(x) -> EstablishedBefore1800(x))", "all x y.((Harkness(x) & 1800(y)) -> EstablishedBefore(x,y))", "Harkness(Harkness) -> EstablishedBefore1700(Harkness))", "Harkness exists before 1800.", "(EstablishedBefore(Harkness,1700))", "(EstablishedBefore1800(Harkness))", "all x.(Harkness(x) -> EstablishedBefore1700(x))", "Harkness establishedbefore1800.", "Harkness is establishedbefore1800.", "Harkness exists before 1800.", "all x.(Harkness(x) -> EstablishedBefore1700(x))", "all x.(Harkness(x) -> EstablishedBefore(x,1801))", "All x.(Harkness(x) -> EstablishedBefore1800(x))"]}
{"id": "folio_train_2302", "nl": "There are no mansion houses in an urban area.", "fol": "all x.(IsUrbanArea(x) -> -IsMansionHouse(x))", "prediction": ["-exists x.(MansionHouse(x) & UrbanArea(x))", "exists x.(MansionHouse(x) & UrbanArea(x) & -MansionHouse(x))", "(exists x.(MansionHouse(x) & UrbanArea(x)) & -exists y.(MansionHouse(y) & UrbanArea(y))))", "all x.((MansionHouse(x) & UrbanArea(x)) -> -exists y.(MansionHouse(y) & InArea(x,y))))", "there are no mansionHousesInUrbanArea(x)", "all x y.((UrbanArea(x) & MansionHouse(y)) -> -exists z.(MansionHouse(z) & InUrbanArea(z))))", "-exists x.(MansionHouse(x) & UrbanArea(x))", "exists x.(MansionHouse(x) & UrbanArea(x))", "all x y.((UrbanArea(x) & MansionHouse(y)) -> -exists z.(MansionHouse(z) & InUrbanArea(z) & InUrbanArea(z))))", "(exists x.(MansionHouse(x) & UrbanArea(x)) & -exists y.(MansionHouse(y) & UrbanArea(y))))", "exists x.(MansionHouse(x) & UrbanArea(x) & -exists y.(MansionHouse(y) & UrbanArea(y))))", "exists x.(MansionHouse(x) & UrbanArea(x) & -MansionHouse(x))", "-exists x.(MansionHouse(x) & InUrbanArea(x))", "-exists x.(MansionHouse(x) & UrbanArea(x))", "-exists x.(MansionHouse(x) & InUrbanArea(x))", "-exists x.(MansionHouse(x) & UrbanArea(x))"]}
{"id": "folio_train_2303", "nl": "All skyscrapers reside in urban areas.", "fol": "all x.(IsSkyscraper(x) -> IsUrbanArea(x))", "prediction": ["all x.(Skyscraper(x) -> ResidesInUrbanArea(x))", "all x y.((Skyscraper(x) & UrbanArea(y)) -> ResidesIn(x,y))", "all x.(Skyscraper(x) -> ResidesInUrbanAreas(x))", "(all x.(Skyscraper(x) -> ResidesInUrbanAreas(x)))", "(all x.(Skyscraper(x) -> UrbanArea(x)))", "all x y.((Skyscraper(x) & UrbanArea(y)) -> ResidesIn(x,y))", "all x.(Skyscraper(x) -> ResidesInUrbanArea(x))", "all x.(Skyscraper(x) -> ResidesInUrbanAreas(x))", "all x y.((Skyscraper(x) & UrbanArea(y)) -> ResidesIn(x,y))", "all x.(Skyscraper(x) -> ResidesInUrbanArea(x))", "all x.(Skyscraper(x) -> LocatedInUrbanArea(x))", "all x y.((Skyscraper(x) & UrbanArea(y)) -> ResidesIn(x,y))", "all x.(Skyscraper(x) -> exists y.(UrbanArea(y) & ResidesIn(x,y)))", "all x.(Skyscraper(x) -> ResidesInUrbanAreas(x))", "all x.(Skyscraper(x) -> ResidesInUrbanAreas(x))", "all x.(Skyscraper(x) -> ResidesInUrbanArea(x))"]}
{"id": "folio_train_2304", "nl": "Every creepy haunted house is in a mansion house.", "fol": "all x.(IsCreepyHauntedHouse(x) -> IsMansionHouse(x))", "prediction": ["all x.(CrookyHauntedHouse(x) -> InMansionHouse(x))", "all x.(CruellyHuntedHouse(x) -> InMansionHouse(x))", "all x y.((CrookyHuntedHouse(x) & MansionHouse(y)) -> In(x,y))", "all x.(HauntedHouse(x) -> InMansionHouse(x))", "all x y.((CruellyHauntedHouse(x) & MansionHouse(y)) -> In(x,y))", "all x.(CroikyHauntedHouse(x) -> InMansionHouse(x))", "all x.(CreekHauntedHouse(x) -> InMansionHouse(x))", "all x.(CruellyHuntedHouse(x) -> InMansionHouse(x))", "all x y.((CreekHauntedHouse(x) & MansionHouse(y)) -> In(x,y))", "all x.(HauntedHouse(x) -> InMansionHouse(x))", "all x y.((CrookyHauntedHouse(x) & MansionHouse(y)) -> In(x,y))", "exists x.(CrimeyHauntedHouse(x) & MansionHouse(x))", "exists x.(HuntedHouse(x) & MansionHouse(x))", "all x y.((CruellyHuntedHouse(x) & MansionHouse(y)) -> In(x,y))", "all x y.((CrimeyHauntedHouse(x) & MansionHouse(y)) -> In(x,y))", "exists x.(CrookyHauntedHouse(x) & MansionHouse(x))"]}
{"id": "folio_train_2305", "nl": "Every terrifying Halloween scare comes from a creepy haunted house.", "fol": "all x.(IsTerrifyingHalloweenScare(x) -> IsCreepyHauntedHouse(x))", "prediction": ["all x.(ThreateningHalloweenScare(x) -> ComesFromCrookyHauntedHouse(x))", "all x y.((HalloweenScare(x) & Horror(y)) -> ComesFromCrookyHauntedHouse(x,y))", "all x.(ThryingHalloweenScare(x) -> ComesFromCrookyHauntedHouse(x))", "all x.((HalloweenScare(x) & CryptyHauntedHouse(x)) -> ScaresFrom(x))", "all x y.((HalloweenScare(x) & HauntedHouse(y)) -> ComesFrom(x,y))", "every terrifying Halloween scare comes from a creepy hauntedhouse.", "all x.(HalloweenScare(x) -> ComesFromCrookyHauntedHouse(x))", "all x y.((HollydayScare(x) & Horror(y)) -> ComesFromCrookyHauntedHouse(x,y))", "all x y.((ThryingHalloweenScare(x) & HauntedHouse(y)) -> ComesFrom(x,y))", "all x y z.((HalloweenScare(x) & Horror(y) & House(z) & ComesFrom(x,z)) -> CryingHunted(x))", "all x y z.((ThreateningHalloweenScare(x) & HauntedHouse(y) & House(z) & ComesFrom(x,y,z)) -> ComesFrom(x,y,z))", "exists x.(HalloweenScare(x) & Scare(x) & ComesFromCrookyHauntedHouse(x))", "(all x.(HalloweenScare(x) -> Scare(x)))", "all x.(ThrickeningHalloweenScare(x) -> ComesFromCreekHauntedHouse(x))", "all x y.((HalloweenScare(x) & Horror(y)) -> ComesFromCrueltyHauntedHouse(x,y))", "all x.((HalloweenScare(x) & CryptyHauntedHouse(x)) -> Scares(x))"]}
{"id": "folio_train_2306", "nl": "The Scream is a creepy haunted house or a terrifying Halloween scare.", "fol": "(IsCreepyHauntedHouse(TheScream) | IsTerrifyingHalloweenScare(TheScream))", "prediction": ["all x.(Scream(x) -> (CruellyHuntedHouse(x) | ScaryHalloweenScare(x)))", "(CrookyHuntedHouse(Scream) | ScaryHalloweenScare(Scream))", "(CrueltyHuntedHouse(Scream) | TerrifyingHalloweenScare(Scream))", "(CroikyHauntedHouse(Scream) | TerrifyingHalloweenScare(Scream))", "all x.(Scream(x) -> (CroikyHuntedHouse(x) | TerrifyingHalloweenScare(x)))", "all x.(Scream(x) -> (CrueltyHuntedHouse(x) | ScaryHalloweenScare(x)))", "(CreekHauntedHouse(Scream) | ScaryHalloweenScare(Scream))", "all x.((Scream(x) & (HauntedHouse(x) | ScaryHalloweenScare(x))) -> Crying(x))", "all x.(Scream(x) -> ((CroikyHuntedHouse(x) | ScaryHalloweenScare(x))))", "All x y.(Scream(x) -> (CruellyHauntedHouse(x) | ScaryHalloweenScare(x)))", "(CrimeyHauntedHouse(Scream) | ScaryHalloweenScare(Scream))", "exists x.(Scream(x) & ((CruellyHauntedHouse(x) | TerrifyingHalloweenScare(x))) -> Cryptic(x)))", "exists x.(Scream(x) & ((CreekHuntedHouse(x) | ScaryHalloweenScare(x))) | ((CreekHuntingHouse(x) & ScaryHalloweenScare(x)))))", "all x.(Scream(x) -> (CrimeyHauntedHouse(x) | ScaryHalloweenScare(x)))", "all x.(Scream(x) -> (CreekHauntedHouse(x) | ScaryHalloweenScare(x)))", "exists x.(Scream(x) & ((CroikyHuntedHouse(x) | TerrifyingHalloweenScare(x))) -> Crypty(x)))"]}
{"id": "folio_train_2307", "nl": "The Scream is a skyscraper.", "fol": "IsSkyscraper(TheScream)", "prediction": ["All x.(Scream(x) -> Skyscraper(x))", "The Scream is a Skyscraper.", "TheScream isSkyscraper(Skyscraper)", "All x.(Scream(x) -> Skyscraper(x))", "(Scraper(Scream) & Skyscraper(Scream))", "Scream is a Skyscraper.", "(Scream(Skyscraper)", "The Scream is a Skyscraper.", "(Skyscraper(Scream))", "all x.(Scream(x) -> Skyscraper(x))", "The Scream is a skyscraper.", "All x.(Scream(x) -> Skyscraper(x))", "The Scream is a Skyscraper.", "all x.(Scream(x) -> Skyscraper(x))", "All x.(Scream(x) -> Skyscraper(x))", "all x.(Scream(x) -> Skyscraper(x))"]}
{"id": "folio_train_2308", "nl": "The Scream is not a skyscraper.", "fol": "-IsSkyscraper(TheScream)", "prediction": ["All x.(Scream(x) -> -Skyscraper(x))", "(-Skyscraper(Scream))", "The Scream is not a Skyscraper.", "TheScream is notSkyscraper(Scream)", "(Scream(Scream) & -Skyscraper(Scream))", "-Skyscraper(Scream)", "All x.(Scream(x) -> -Skyscraper(x))", "The Scream is not a Skyscraper.", "TheScream is notSkyscraper(Scream)", "(-Skyscraper(Scream))", "all x.(Scream(x) -> -Skyscraper(x))", "The Scream -Skyscraper(s)", "-Skyscraper(Scream)", "All x.(Scream(x) -> -Skyscraper(x))", "(-Skyscraper(Scream))", "-Skyscraper(Scream)"]}
{"id": "folio_train_2309", "nl": "The Scream is a terrifying Halloween scare.", "fol": "IsTerrifyingHalloweenScare(TheScream)", "prediction": ["all x.(Scream(x) -> Scare(x))", "The Scream is a terrifying Halloween scare.", "(ThreesomeHalloweenScare(Scream) & HalloweenScare(Scream))", "All x.(Scream(x) -> ScaryHalloweenScare(x))", "all x.((Scream(x) & Scare(x)) -> ScaryHalloween(x))", "(ThreesomeHalloweenScare(Scream) & Scare(Scream))", "HalloweenScare(Scream)", "The Scream (HalloweenScare(Scream) & Scary(Scream))", "The Scream is a terrifying Halloween scare.", "all x.(Scream(x) -> ScarefulHalloweenScare(x))", "(TornantHalloweenScare(Scream) & Scare(Scream))", "(ThreateningHalloweenScare(Scream) -> Scare(Scream,Halloween))", "The Scream is a terrifying Halloween scare.", "All x.(Scream(x) -> ScaryHalloweenScare(x))", "(TerrifyingHalloweenScare(scream) & HalloweenScare(s) & Scare(s))", "All x.(Scream(x) -> Scare(x))"]}
{"id": "folio_train_2310", "nl": "The Scream is either a skyscraper or a mansion house.", "fol": "(IsSkyscraper(TheScream) | IsMansionHouse(TheScream))", "prediction": ["all x.(Scream(x) -> (Skyscraper(x) | MansionHouse(x)))", "(Skyscraper(Scream) | MansionHouse(Scream))", "all x.(Scream(x) -> (Skyscraper(x) | MansionHouse(x)))", "(Skyscraper(Scream) | MansionHouse(Scream))", "all x.(Scream(x) -> (Skyscraper(x) | MansionHouse(x)))", "all x y.(Scream(x) -> (Skyscraper(y) | MansionHouse(y)))", "(Skyscraper(scream,s) | MansionHouse(scream,s))", "(Skyscraper(scream) | MansionHouse(scream))", "all x.(Scream(x) -> (Skyscraper(x) | MansionHouse(x)))", "exists x.(Scream(x) & Skyscraper(x) & MansionHouse(x))", "all x.(Scream(x) -> (Skyscraper(x) | MansionHouse(x)))", "all x.(Scream(x) -> (Skyscraper(x) | MansionHouse(x)))", "exists x.(Scream(x) & Skyscraper(x) & MansionHouse(x))", "exists x.(Scream(x) & (Skyscraper(x) | MansionHouse(x)))", "all x.(Scream(x) -> (Skyscraper(x) | MansionHouse(x)))", "All x.(Scream(x) -> (Skyscraper(x) | MansionHouse(x)))"]}
{"id": "folio_train_2311", "nl": "The Scream is either a skyscraper or an urban area.", "fol": "(IsSkyscraper(TheScream) | IsUrbanArea(TheScream))", "prediction": ["all x.(Scream(x) -> (Skyscraper(x) | UrbanArea(x)))", "(Skyscraper(Scream) | UrbanArea(Scream))", "all x.(Scream(x) -> (Skyscraper(x) | UrbanArea(x)))", "(Skyscraper(Scream) | UrbanArea(Scream))", "(Skyscraper(scream,s) | UrbanArea(scream,s))", "all x.(Scream(x) -> (Skyscraper(x) | UrbanArea(x)))", "all x y.(Scream(x) -> (Skyscraper(y) | UrbanArea(y)))", "(Skyscraper(scream,s) | UrbanArea(scream,s))", "all x.(Scream(x) -> (Skyscraper(x) | UrbanArea(x)))", "all x.(Scream(x) -> (Skyscraper(x) | UrbanArea(x)))", "exists x.(Scream(x) & Skyscraper(x) & UrbanArea(x))", "All x.(Scream(x) -> (Skyscraper(x) | UrbanArea(x)))", "all x.(Scream(x) -> (Skyscraper(x) | UrbanArea(x)))", "exists x.(Scream(x) & (Skyscraper(x) | UrbanArea(x)))", "all x.(Scream(x) -> (Skyscraper(x) | UrbanArea(x)))", "All x.(Scream(x) -> (Skyscraper(x) | UrbanArea(x)))"]}
{"id": "folio_train_2312", "nl": "The Scream is either a skyscraper or a creepy haunted house.", "fol": "(IsSkyscraper(TheScream) | IsCreepyHauntedHouse(TheScream))", "prediction": ["all x.(Scream(x) -> (Skyscraper(x) | CryptyHuntedHouse(x)))", "(Skyscraper(Scream) | CryptyHuntedHouse(Scream))", "all x.(Scream(x) -> (Skyscraper(x) | CreepyHuntedHouse(x)))", "(Scream(Skyscraper,Skyscraper) | CryptyHauntedHouse(Scream,HuntedHouse)))", "(Skyscraper(Scream) | CreepyHuntedHouse(Scream))", "all x.(Scream(x) -> (Skyscraper(x) | CryptyHauntedHouse(x)))", "all x y.(Scream(x) -> (Skyscraper(x) | CryptyHuntedHouse(x)))", "exists x.(Scream(x) & ((Skyscraper(x) & -HauntedHouse(x)) | (-Skyscraper(x) & HauntedHouse(x)))))", "(Skyscraper(Scream) | CryptyHuntedHouse(Scream))", "all x.(Scream(x) -> (Skyscraper(x) | CreepyHauntedHouse(x)))", "All x y.(Scream(x) -> (Skyscraper(x) | HauntedHouse(y)))", "exists x.(Scream(x) & (Skyscraper(x) | HauntedHouse(x)))", "exists x.(Scream(x) & ((Skyscraper(x) & -HauntedHouse(x)) | (-Skyscraper(x) & HauntedHouse(x)))))", "exists x.(Scream(x) & Skyscraper(x) & HauntedHouse(x))", "all x.(Scream(x) -> (Skyscraper(x) | CryptyHauntedHouse(x)))", "all x.(Scream(x) -> (Skyscraper(x) | HorrorHauntedHouse(x)))"]}
{"id": "folio_train_2313", "nl": "If The Scream is not a mansion in an urban area, then it is either a skyscraper or an urban area.", "fol": "(-(IsMansionHouse(TheScream) & IsUrbanArea(TheScream)) -> (IsSkyscraper(TheScream) | IsUrbanArea(TheScream)))", "prediction": ["all x.((Scream(x) & -MansionInUrbanArea(x)) -> (Skyscraper(x) | UrbanArea(x)))", "(-MansionInUrbanArea(Scream) -> (Skyscraper(Scream) | UrbanArea(Scream)))", "all x.((MansionInUrbanArea(x) & -MansionInUrbanArea(x)) -> (Skyscraper(x) | UrbanArea(x)))", "all x.((Scream(x) & -MansionInUrbanArea(x)) -> (Skyscraper(x) | UrbanArea(x)))", "all x y.((Scream(x) & -MansionInUrbanArea(x)) -> (Skyscraper(x) | UrbanArea(x)))", "all x.(Scream(x) -> (-MansionInUrbanArea(x) & (Skyscraper(x) | UrbanArea(x))))", "all x.((MansionInUrbanArea(x) & -MansionInUrbanArea(x)) -> (Skyscraper(x) | UrbanArea(x)))", "(-MansionInUrbanArea(Scream))", "(-MansionInUrbanArea(Scream) -> (Skyscraper(Scream) | UrbanArea(Scream)))", "all x.((Scream(x) & -MansionInUrbanArea(x)) -> (Skyscraper(x) | UrbanArea(x)))", "all x y.((Scream(x) & UrbanArea(y) & -Mansion(x,y)) -> (Skyscraper(x) | UrbanArea(x)))", "exists x.(Scream(x) & -MansionInUrbanArea(x) & (Skyscraper(x) | UrbanArea(x)))", "all x.((MansionInUrbanArea(x) & -Skyscraper(x)) | UrbanArea(x)) -> Scream(x))", "all x.((Scream(x) & -MansionInUrbanArea(x)) -> (Skyscraper(x) | UrbanArea(x)))", "all x.((Scream(x) & -MansionInUrbanArea(x)) -> (Skyscraper(x) | UrbanArea(x)))", "all x.((Scream(x) & -MansionInUrbanArea(x)) -> (Skyscraper(x) | UrbanArea(x)))"]}
{"id": "folio_train_2314", "nl": "If The Scream is either a skyscraper or a mansion house, then it is in an urban area.", "fol": "((IsSkyscraper(TheScream) | IsMansionHouse(TheScream)) -> IsUrbanArea(TheScream))", "prediction": ["all x.((Skyscraper(x) | MansionHouse(x)) -> UrbanArea(x))", "(Skyscraper(Scream) | MansionHouse(Scream)) -> UrbanArea(Scream))", "all x.((Skyscraper(x) | MansionHouse(x)) -> UrbanArea(x))", "((Skyscraper(Scream) | MansionHouse(Scream)) & UrbanArea(Scream))", "all x y.((Scream(x) & (Skyscraper(x) | MansionHouse(x))) -> UrbanArea(x))", "all x.(Skyscraper(x) | MansionHouse(x)) -> UrbanArea(x))", "exists x.(Scream(x) & (Skyscraper(x) | MansionHouse(x)) & UrbanArea(x))", "all x.((Skyscraper(x) | MansionHouse(x)) -> UrbanArea(x))", "all x y.((Scream(x) & (Skyscraper(y) | MansionHouse(y))) -> UrbanArea(x))", "all x.(Skyscraper(x) | MansionHouse(x)) -> UrbanArea(x))", "all x.((Skyscraper(x) | MansionHouse(x)) -> UrbanArea(x))", "all x.((Skyscraper(x) | MansionHouse(x)) -> UrbanArea(x))", "exists x.(Skyscraper(x) | MansionHouse(x)) -> UrbanArea(x))", "all x.((Skyscraper(x) | MansionHouse(x)) -> UrbanArea(x))", "all x.((Skyscraper(x) | MansionHouse(x)) -> UrbanArea(x))", "all x.((Skyscraper(x) | MansionHouse(x)) -> UrbanArea(x))"]}
{"id": "folio_train_2315", "nl": "If The Scream is either a skyscraper or a mansion house, then it is neither a creepy haunted house nor a terrifying Halloween scare.", "fol": "((IsSkyscraper(TheScream) | IsMansionHouse(TheScream)) -> (-IsCreepyHauntedHouse(TheScream) & -IsTerrifyingHalloweenScare(TheScream)))", "prediction": ["all x.((Skyscraper(x) | MansionHouse(x)) -> (-CreekHuntedHouse(x) & -ThrillingHalloweenScare(x)))", "(all x.((Skyscraper(x) | MansionHouse(x))) -> (-CreekHuntedHouse(x) & -ThrillingHalloweenScare(x)))", "all x.((Skyscraper(x) | MansionHouse(x)) -> (-CreekHuntedHouse(x) & -ThreesomeHalloweenScare(x)))", "all x.(Skyscraper(x) | MansionHouse(x)) -> (-CreekHuntedHouse(x) & -ThrillingHalloweenScare(x)))", "((Skyscraper(Scream) | MansionHouse(Scream)) & -CreekHuntedHouse(Scream) & -ThrillingHalloweenScare(Scream))", "(Skyscraper(Scream) | MansionHouse(Scream)) & -(CreekHuntedHouse(Scream) | TerrifyingHalloweenScare(Scream)))", "all x.((Skyscraper(x) | MansionHouse(x)) -> -(CreekHuntedHouse(x) | ScaryHalloweenScare(x)))", "exists x.(Scream(x) & (Skyscraper(x) | MansionHouse(x)) & -CreekHuntedHouse(x) & -ThrillingHalloweenScare(x)))", "all x.((Scream(x) & (Skyscraper(x) | MansionHouse(x))) -> (-CreekHuntedHouse(x) & -ThrillingHalloweenScare(x)))", "all x y.((Scream(x) & Skyscraper(y) | MansionHouse(y)) -> (-CreekHuntedHouse(x) & -ThrillingHalloweenScare(x)))", "all x.(Skyscraper(x) | MansionHouse(x)) -> ((CreekHuntedHouse(x) | ScaryHalloweenScare(x))))", "all x.((Skyscraper(x) | MansionHouse(x)) -> (-CreekHauntedHouse(x) & -ThrillingHalloweenScare(x)))", "all x.((Skyscraper(x) | MansionHouse(x)) -> -(CreekHauntedHouse(x) | ScaryHalloweenScare(x)))", "((Skyscraper(Scream) | MansionHouse(Scream)) & (-CreekHauntedHouse(Scream) | TerrifyingHalloweenScare(Scream)))", "all x.(Skyscraper(x) | MansionHouse(x)) -> -(CruellyHuntedHouse(x) | TerrifyingHalloweenScare(x)))", "all x.((Skyscraper(x) | MansionHouse(x)) -> (NegativeHuntingHouse(x) | TerrifyingHalloweenScare(x)))"]}
{"id": "folio_train_2316", "nl": "If The Scream is either a skyscraper or a creepy haunted house, then it is not a mansion house.", "fol": "((IsSkyscraper(TheScream) | IsCreepyHauntedHouse(TheScream)) -> -IsMansionHouse(TheScream))", "prediction": ["all x.((Scream(x) & (Skyscraper(x) | CryptyHuntedHouse(x))) -> -MansionHouse(x))", "all x.((Scream(x) & (Skyscraper(x) | CreepyHuntedHouse(x))) -> -MansionHouse(x))", "(all x.((Skyscraper(x) | CryptyHuntedHouse(x))) -> -MansionHouse(x))", "all x.((Scream(x) & (Skyscraper(x) | CryptyHauntedHouse(x))) -> -MansionHouse(x))", "all x y.((Scream(x) & (Skyscraper(x) | CryptyHuntedHouse(x))) -> -MansionHouse(y))", "(all x.((Scream(x) & Skyscraper(x) | CryptyHauntedHouse(x))) -> -MansionHouse(x))", "all x.((Scream(x) & (Skyscraper(x) | CreepyHauntedHouse(x))) -> -MansionHouse(x))", "exists x.(Scream(x) & (Skyscraper(x) | CreepyHauntedHouse(x)) & -MansionHouse(x))", "all x.(Scream(x) -> ((Skyscraper(x) | HorrorHuntedHouse(x)) & -MansionHouse(x)))", "all x.((Scream(x) & (Skyscraper(x) | CryptyHauntedHouse(x))) -> -MansionHouse(x))", "exists x.(Scream(x) & (Skyscraper(x) | CreepyHuntedHouse(x)) & -MansionHouse(x))", "all x.(Scream(x) -> ((Skyscraper(x) | HauntedHouse(x)) & -MansionHouse(x)))", "(all x.((Scream(x) & Skyscraper(x) | CryptyHuntedHouse(x))) -> -MansionHouse(x))", "all x.((Scream(x) & (Skyscraper(x) | CrawlyHuntedHouse(x))) -> -MansionHouse(x))", "all x.((Scream(x) & (Skyscraper(x) | CreepyHuntedHouse(x))) -> -MansionHouse(x))", "all x.((Scream(x) & (Skyscraper(x) | CreepyHauntedHouse(x))) -> -MansionHouse(x))"]}
{"id": "folio_train_2317", "nl": "Phuoc Binh national park is a national park in Vietnam. ", "fol": "(IsNationalPark(PhuocBinh) & IsLocatedIn(PhuocBinh,Vietnam))", "prediction": ["all x.(PhuocBinhNationalPark(x) -> NationalParkInVietnam(x))", "(NationalPark(PhuocBinh) & NationalPark(PhuocBinh))", "PhuocBinh NationalPark(PhuocBinh) -> NationalParkInVietnam(PhuocBinh))", "(NationalPark(PhuocBinh) & NationalPark(PhuocBinh) & InVietnam(PhuocBinh))", "all x.(NationalPark(x) -> PhuocBinh(x))", "all x y.((PhuocBinhNationalPark(x) & Vietnam(y)) -> NationalPark(x,y))", "PhuocBinhNationalPark(x) -> (NationalPark(x) & InVietnam(x)))", "all x.(PhuocBinhNationalPark(x) -> NationalParkInVietnam(x))", "all x.((NationalPark(x) & PhuocBinh(x)) -> Vietnam(x))", "Phuoc Binh NationalPark (NationalPark) & LocatedInVietnam(x))", "all x.(PhuocBinh(x) -> NationalPark(x))", "all x y.((NationalPark(x) & PhuocBinh(y)) -> Vietnam(x,y))", "(NationalPark(PhuocBinh) & NationalPark(Vietnam))", "(NationalPark(PhuocBinh) & Vietnam(PhuocBinh))", "PhuocBinh NationalPark (NationalPark(x) & Vietnam(x))", "all x.(PhuocBinhNationalPark(x) -> NationalParkInVietnam(x))"]}
{"id": "folio_train_2318", "nl": "Any national park in Vietnam is classified as a nature reserve. ", "fol": "all x.((IsNationalPark(x) & IsLocatedIn(x,Vietnam)) -> ClassifiedAsNatureReserve(x))", "prediction": ["all x.((NationalPark(x) & Vietnam(x)) -> NatureReserve(x))", "all x.((NationalPark(x) & InVietnam(x)) -> NatureReserve(x))", "all x y.((NationalPark(x) & Vietnam(y)) -> NatureReserve(x,y))", "all x y.((NationalPark(x) & Vietnam(y) & InVietnam(x,y)) -> NatureReserve(x))", "all x.((NationalPark(x) & Vietnam(x)) -> NatureReserve(x))", "all x.((NationalPark(x) & InVietnam(x)) -> NatureReserve(x))", "all x y.((NationalPark(x) & NationalPark(y) & Vietnam(x) & InVietnam(x)) -> NatureReserve(x))", "all x.(NaturePark(x) -> NatureReserve(x))", "all x y.((NationalPark(x) & Vietnam(y)) -> NatureReserve(x,y))", "all x.((NationalPark(x) & Vietnam(x)) -> NatureReserve(x))", "all x.((NationalParkInVietnam(x) & InVietnam(x)) -> NatureReserve(x))", "all x y.((NationalPark(x) & Vietnam(y) & InVietnam(x,y)) -> NatureReserve(x))", "all x.((NationalPark(x) & InVietnam(x)) -> NatureReserve(x))", "all x.(NationalPark(x) -> NatureReserve(x))", "all x.((NationalPark(x) & Vietnam(x)) -> NatureReserve(x))", "all x.((NationalPark(x) & InVietnam(x)) -> NatureReserve(x))"]}
{"id": "folio_train_2319", "nl": "There is a national park in Vietnam classified as a UNESCO World Heritage Site.", "fol": "exists x.(IsNationalPark(x) & IsLocatedIn(x,Vietnam) & IsUNESCOWorldHeritageSite(x))", "prediction": ["exists x.(NationalPark(x) & InVietnam(x) & WorldHeritageSite(x))", "exists x.(NationalPark(x) & InVietnam(x) & WorldHeritageSite(x))", "exists x.(NationalPark(x) & InVietnam(x) & UNESCOWorldHeritageSite(x))", "exists x y.(NationalPark(x) & Vietnam(y) & ClassifiedAsUNESCOWorldHeritageSite(x,y))", "all x y.((NationalPark(x) & Vietnam(y)) -> WorldHeritageSite(x,y))", "exists x.(NationalPark(x) & Vietnam(x) & UNESCOWorldHeritageSite(x))", "all x y z.((NationalPark(x) & Vietnam(y) & WorldHeritageSite(z) & ClassifiedAs(x,y,z)) -> WorldHeritageSite(y,z))", "all x y.((NationalPark(x) & Vietnam(y) & ClassifiedAsUNESCOWorldHeritageSite(x,y)) -> WorldHeritageSite(x,y))", "exists x.(NationalPark(x) & InVietnam(x) & WorldHeritageSite(x))", "(exists x.(NationalPark(x) & InVietnam(x)) & WorldHeritageSite(x))", "all x y.((NationalPark(x) & Vietnam(y)) -> WorldHeritageSite(x,y))", "exists x.(NationalPark(x) & InVietnam(x) & WorldHeritageSite(x))", "all x y z.((NationalPark(x) & Vietnam(y) & WorldHeritageSite(z) & ClassifiedAs(x,y,z)) -> WorldHeritageSite(x,y,z))", "exists x.(NationalPark(x) & Vietnam(x) & WorldHeritageSite(x))", "exists x.(NationalParkInVietnam(x) & WorldHeritageSite(x))", "exists x.(NationalParkInVietnam(x) & WorldHeritageSite(x))"]}
{"id": "folio_train_2320", "nl": "All national parks in Vietnam are either managed by the Ministry of Agriculture or by the People's Committee. ", "fol": "all x.(((IsNationalPark(x) & IsLocatedIn(x,Vietnam)) -> ManagedBy(x,MinistryofAgriculture)) | ManagedBy(x,PeoplesCommittee))", "prediction": ["all x.(NationalPark(x) -> (ManagedBy(x,MinisterOfAgriculture) | ManagedBy(x,PeoplesCommittee)))", "all x.((NationalPark(x) & Vietnam(x)) -> (ManagedBy(x,MinisterOfAgriculture) | ManagedBy(x,PeoplesCommittee)))", "all x.(NationalPark(x) -> (ManagedByMinisterOfAgriculture(x) | ManagedByPeoplesCommittee(x)))", "all x y.((NationalPark(x) & Vietnam(y)) -> (ManagedBy(x,y) | ManagedBy(x,y)))", "all x y z.((NationalPark(x) & Vietnam(y) & MinistryOfAgriculture(z) & (MountainOfAgriculture(z) | PeoplesCommittee(z))) -> ManagedBy(x,y,z))", "all x.((NationalPark(x) & Vietnam(x)) -> (ManagedByMinisterOfAgriculture(x) | ManagedByPeoplesCommittee(x)))", "all x.(NationalPark(x) -> (MadeBy(x,MinisterOfAgriculture) | ManagedBy(x,PeoplesCommittee)))", "(all x.(NationalPark(x) -> (ManagedByMinisterOfAgriculture(x) | ManagedByPeoplesCommittee(x))))", "all x.(NationalPark(x) -> (ManagedBy(x,MinisterOfAgriculture) | ManagedBy(x,PeoplesCommittee)))", "all x y.((NationalPark(x) & Vietnam(y)) -> (MadeBy(x,y) | ManagedByPeoplesCommittee(x,y)))", "all x y.((NationalPark(x) & Vietnam(y)) -> (ManagedBy(x,y) | ManagedBy(x,y)))", "(all x.(NationalPark(x) -> ManagedBy(x,MinisterOfAgriculture)) | ManagedByPeoplesCommittee(x,PeoplesCommittee)))", "(all x.(NationalPark(x) -> ManagedBy(x,MinistryOfAgriculture)) | ManagedByPeoplesCommittee(x,PeoplesCommittee)))", "all x.(NationalPark(x) -> (ManagedByMinisterOfAgriculture(x) | ManagedByPeoplesCommittee(x)))", "all x.(NationPark(x) -> (ManagedBy(x,MinisterOfAgriculture) | ManagedBy(x,PeoplesCommittee)))", "all x y.((NationalPark(x) & Vietnam(y)) -> (ManagedBy(x,y) | ManagedBy(x,y)))"]}
{"id": "folio_train_2321", "nl": "Phuoc Binh is not managed by the Ministry of Agriculture.", "fol": "-ManagedBy(PhuocBinh,MinistryofAgriculture)", "prediction": ["Phuoc Binh - ManagedByMinisterOfAgriculture(PhuocBinh)", "-ManagedByMinisterOfAgriculture(PhuocBinh)", "PhuocBinh -ManagedByMinisterOfAgriculture(PhuocBinh)", "Phuoc Binh -ManagedByAgriculture(PhuocBinh)", "(-ManagedBy(PhuocBinh) & MinistryOfAgriculture(PhuocBinh))", "-MountainOfAgriculture(PhuocBinh)", "-(MountainOfAgriculture(PhuocBinh))", "(-ManagedByMinisterOfAgriculture(PhuocBinh))", "-ManagedByMountainOfAgriculture(PhuocBinh)", "(MadeBy(PhuocBinh) & -ManagedBy(PhuocBinh))", "Phuoc Binh is not managed by MinistryOfAgriculture(PhuocBinh)", "Phuoc Binh -ManagedByMountainOfAgriculture(PhuocBinh)", "Phuoc Binh - ManagedByMinisterOfAgriculture(PhuocBinh)", "-ManagedByAgriculture(PhuocBinh)", "(MadeBy(PhuocBinh) & -ManagedBy(PhuocBinh))", "Phuoc Binh - ManagedByMinisterOfAgriculture(PhuocBinh)"]}
{"id": "folio_train_2322", "nl": "There is a nature reserve in Vietnam.", "fol": "exists x.(ClassifiedAsNatureReserve(x) & IsLocatedIn(x,Vietnam))", "prediction": ["exists x.(NatureReserve(x) & InVietnam(x))", "exists x.(NatureReserve(x) & InVietnam(x))", "exists x.(NatureReserve(x) & InVietnam(x))", "all x y.((NatureReserve(x) & Vietnam(y)) -> exists z.(Vietnam(z) & NatureReserve(z))))", "exists x y.(NatureReserve(x) & Vietnam(y))", "exists x.(NatureReserve(x) & InVietnam(x))", "exists x.(NatureReserve(x) & InVietnam(x))", "exists x y.(NatureReserve(x) & Vietnam(y))", "Exists x.(NatureReserve(x) & InVietnam(x))", "exists x.(NatureReserve(x) & Vietnam(x))", "exists x.(NatureReserve(x) & Vietnam(x))", "exists x.(NatureReserve(x) & InVietnam(x))", "Exists x.(NatureReserve(x) & InVietnam(x))", "exists x.(NatureReserve(x) & Vietnam(x))", "exists x.(NatureReserve(x) & Vietnam(x))", "exists x.(NatureReserve(x) & InVietnam(x))"]}
{"id": "folio_train_2323", "nl": "Phuoc Binh is a UNESCO Heritage Site.", "fol": "IsUNESCOWorldHeritageSite(PhuocBinh)", "prediction": ["PhuocBinh (UNESCO HeritageSite)", "all x.(PhuocBinh(x) -> UNESCOHeritageSite(x))", "(UNESCO HeritageSite(PhuocBinh))", "PhuocBinh is a UNESCOHeritageSite(PhuocBinh)", "Phuoc Binh is a UNESCOHeritageSite(PhuocBinh)", "Phuoc Binh (UNESCO HeritageSite)", "PhuocBinh (UNESCO HeritageSite)", "all x.(PhuocBinh(x) -> HeritageSite(x))", "(UNESCO HeritageSite(PhuocBinh)", "all x.(PhuocBinh(x) -> UNESCOHeritageSite(x))", "PhuocBinh(x) -> HeritageSite(x))", "PhuocBinh (UNESCOHeritageSite)", "(UNESCO HeritageSite(PhuocBinh)", "Phuoc Binh (UNESCO HeritageSite)", "UNESCO HeritageSite(PhuocBinh)", "Phuoc Binh is a UNESCO HeritageSite."]}
{"id": "folio_train_2324", "nl": "Phuoc Binh is managed by the People's Committee.", "fol": "ManagedBy(PhuocBinh,PeoplesCommittee)", "prediction": ["Phuoc Binh is managed by PeoplesCommittee(PhuocBinh)", "(ManagedByPeoplesCommittee(PhuocBinh)", "all x.(PhuocBinh(x) -> ManagedByPeoplesCommittee(x))", "Phuoc Binh (PhuocBinh) & PeoplesCommittee(PhuocBinh))", "PhuocBinh is managed by PeoplesCommittee(PhuocBinh)", "all x y.((PhuocBinh(x) & PeoplesCommittee(y)) -> ManagedBy(x,y))", "-ManagedByPeoplesCommittee(PhuocBinh)", "PhuocBinh (ManagedByPeoplesCommittee(PhuocBinh))", "(ManagedByPeoplesCommittee(PhuocBinh)", "all x.(PhuocBinh(x) -> ManagedByPeoplesCommittee(x))", "Phuoc Binh (ManagedByPeoplesCommittee(PhuocBinh))", "Phuoc Binh is managed by PeoplesCommittee(PhuocBinh)", "All x.(PhuocBinh(x) -> ManagedByPeoplesComittee(x))", "(ManagedByPeoplesComittee(PhuocBinh)", "PhuocBinh is managed by PeoplesComittee(PhuocBinh)", "(ManagedByPeoplesCommittee(PhuocBinh)"]}
{"id": "folio_train_2325", "nl": "Greyhound racing is a competitive sport where spectators bet on greyhounds.", "fol": "all x.(IsGreyhoundRacing(x) -> exists y.(IsCompetitiveSport(x) & IsGreyhound(y) & SpectatorsBetOnEvent(x,y)))", "prediction": ["all x.(GreyhoundRacing(x) -> (CompetitiveSport(x) & spectatorsBetOnGreyhounds(x)))", "all x y.((GreyhoundRacing(x) & Spectator(y)) -> BetOn(y,x))", "all x.((GreyhoundRacing(x) & CompetitiveSport(x)) -> (BetOnGreyhounds(x) & SpectatorsBetOnGreyhounds(x)))", "all x.(GreyhoundRacing(x) -> (CompetitiveSport(x) & whereScientistsBetOnGreyhounds(x)))", "all x y.((GreyhoundRacing(x) & Spectator(y)) -> BetOn(y,x))", "all x y z.((GreyhoundRacing(x) & Spectator(y) & Greyhound(z)) -> BetOn(y,z))", "(CompetitiveSport(greyhound) & spectatorsBetOn(greyhounds))", "(CompetitiveSport(greyhoundracing) & spectatorsBetOnGreyhounds(greyhounds))", "all x.((GreyhoundRacing(x) & CompetitiveSport(x) & WatchersBetOnGreyhounds(x)) -> BetOnGreyhounds(x))", "all x.(GreyhoundRacing(x) -> (CompetitiveSport(x) & WhereScenariansBetOnGreyhounds(x)))", "all x y.((GreyhoundRacing(x) & Observer(y)) -> (BetOnGreyhounds(y,x) & BetOnGreyhounds(y,x)))", "all x.(GreyhoundRacing(x) -> (CompetitiveSport(x) & whereScientistsBetOnGreyhounds(x)))", "all x y.((GreyhoundRacing(x) & Spectator(y)) -> BetsOn(x,y))", "all x.(GreyhoundRacing(x) -> (CompetitiveSport(x) & spectatorsBetOnGreyhounds(x)))", "all x y.((Greyhound(x) & Spectator(y)) -> BetOn(y,x))", "all x.(GreyhoundRacing(x) -> (CompetitiveSport(x) & whereObserversBetOnGreyhounds(x)))"]}
{"id": "folio_train_2326", "nl": "Coursing is a part of Greyhound racing.", "fol": "all x.(IsCoursing(x) -> IsGreyhoundRacing(x))", "prediction": ["all x.(Courses(x) -> GreyhoundRacing(x))", "all x y.((Courses(x) & GreyhoundRacing(y)) -> PartOf(x,y))", "all x.(Coursing(x) -> GreyhoundRacing(x))", "(PartOfGreyhoundRacing(cursing) & Greyhound(r) & Race(r))", "all x y.((Coursing(x) & GreyhoundRacing(y)) -> PartOf(x,y))", "(All x.(Coursesing(x) -> GreyhoundRacing(x)))", "all x.(Courses(x) -> GreyhoundRacing(x))", "(PartOfGreyhoundRacing(courses) & GreyhoundRacing(c))", "all x y.((Courses(x) & Greyhound(y)) -> PartOfRacing(x,y))", "(all x.(Coursing(x) -> GreyhoundRacing(x)))", "(PartOfGreyhoundRacing(cursing) & Greyhound(r) & -Courses(c))", "all x.(Courses(x) -> GreyhoundRacing(x))", "all x.(Coursing(x) -> GreyhoundRacing(x))", "all x.(Coursing(x) -> GreyhoundRacing(x))", "All x.(Coursing(x) -> GreyhoundRacing(x))", "all x.(Coursing(x) -> GreyhoundRacing(x))"]}
{"id": "folio_train_2327", "nl": "Some competitive sports where spectators bet on things are banned.", "fol": "exists x y.(IsCompetitiveSport(x) & SpectatorsBetOnEvent(x,y) & IsBanned(x))", "prediction": ["exists x.(CompetitiveSport(x) & WhereScientistsBetOnThings(x))", "exists x y.((CompetitiveSport(x) & Participant(y) & BetOn(y,x)) -> Bans(x))", "exists x.(CompetitiveSport(x) & SpectatorBet(x) & -Banned(x))", "exists x.(CompetitiveSport(x) & WhereScientistsBetOnThings(x))", "exists x y.(CompetitiveSport(x) & Participant(y) & BetOn(y,x))", "exists x y.((CompetitiveSport(x) & Spectator(y) & BetOn(y,x)) -> Bans(x))", "exists x.((CompetitiveSport(x) & WhereScientistsBetOnThings(x)) -> Bans(x))", "exists x.(CompetitiveSport(x) & WhereScientistsBetOnThings(x))", "all x y z.((CompetitiveSport(x) & Observer(y) & BetOn(y,z)) -> Bans(x))", "exists x.(CompetitiveSport(x) & WhereScenariansBetOn(x))", "all x y.((CompetitiveSport(x) & Participant(y) & BetOnThings(y)) -> Bans(x,y))", "exists x y.(CompetitiveSport(x) & Participant(y) & BetOn(y,x))", "exists x.(CompetitiveSport(x) & InvolvesSpectatorsBetOnThings(x))", "exists x.(CompetitiveSport(x) & WatchersBetOnThings(x))", "exists x.(CompetitionSport(x) & (PositionersBetOn(x) | BetOn(x)))", "exists x.(CompetitiveSport(x) & WhereSpectatorsBetOnThings(x))"]}
{"id": "folio_train_2328", "nl": "Coursing involves spectators betting on a hare being pursued by greyhounds.", "fol": "exists x y z.(IsCoursing(x) & IsHare(y) & SpectatorsBetOnEvent(x,y) & IsGreyhound(z) & Pursues(z,y))", "prediction": ["all x y.((Courses(x) & Watcher(y)) -> BetsOnHare(y,x))", "all x y z.((Coursing(x) & Observer(y) & Hare(z) & BetsOn(y,z)) -> PursuedBy(y,x))", "all x y.((Coursing(x) & Watcher(y)) -> BetsOnHare(y,x))", "all x.(Courses(x) -> (InvolvesViewersBetweenHare(x) & PursuedByGrayhounds(x)))", "all x y z.((Courses(x) & Observer(y) & Hare(z) & BetsOn(y,z)) -> PursuedBy(y,x))", "all x.(Coursing(x) -> (InvolvesViewersBetweenHare(x) & PursuedByGrayhounds(x)))", "all x.(Courses(x) -> (InvolvesSuspectorsBetweenHares(x) & PursuedByGrayhounds(x)))", "(all x.(Coursesing(x) -> BetOnHare(x)))", "all x.((Pursing(x) & WatchersBetOnHare(x) & PursuedByGrayhounds(x)) -> Involves(x,y))", "all x y.((Courses(x) & Observer(y)) -> BetsOnHare(y,x))", "all x y.((Coursing(x) & Watcher(y) & BetsOnHare(y,x)) -> PursuedByGrayhounds(y,x))", "all x y z.((Coursing(x) & Watcher(y) & Hare(z) & BetsOn(y,z)) -> PursuedByGrayhounds(y,z))", "all x y.((Pursing(x) & Watcher(y) & BetsOnHare(y,x)) -> PursuedByGrayhounds(y,x))", "all x y z.((Courses(x) & Watcher(y) & Hare(z) & BetsOn(y,z)) -> PursuedBy(y,x))", "all x.(Courses(x) -> (BetsOnHare(x) & PursuedByGrayhounds(x)))", "all x y.((Football(x) & Hare(y) & Greyhound(y)) -> BetsOn(x,y))"]}
{"id": "folio_train_2329", "nl": "Hares are small game.", "fol": "all x.(IsHare(x) -> IsSmallGame(x))", "prediction": ["all x.(Hare(x) -> SmallGame(x))", "all x.(Hare(x) -> SmallGame(x))", "(SmallGame(hare) & SmallGame(hare,y))", "all x y.((Hare(x) & SmallGame(y)) -> SmallGame(x))", "all x.(Hare(x) -> SmallGame(x))", "(SmallGame(hare) & SmallGame(hare))", "all x.(Hare(x) -> SmallGame(x))", "(SmallGame(hare) & SmallGame(hare,y))", "all x y.(Hare(x) -> SmallGame(x,y))", "all x.(Hare(x) -> SmallGame(x))", "all x.(Hare(x) -> SmallGame(x))", "all x.(Hare(x) -> SmallGame(x))", "all x.(Hare(x) -> SmallGame(x))", "all x.(Hare(x) -> SmallGame(x))", "all x.(Hare(x) -> SmallGame(x))", "All x.(Hare(x) -> SmallGame(x))"]}
{"id": "folio_train_2330", "nl": "If a competitive sport involves spectators betting on small game, then it is banned.", "fol": "all x.(exists y.(IsCompetitiveSport(x) & IsSmallGame(y) & SpectatorsBetOnEvent(x,y)) -> IsBanned(x))", "prediction": ["all x.((CompetitiveSport(x) & InvolvesStakeholdersBetweenSmallGame(x)) -> Ban(x))", "all x y.((CompetitiveSport(x) & Participant(y) & BetsOnSmallGame(y,x)) -> Ban(x))", "all x.((CompetitiveSport(x) & InvolvesStakeholdersBetweenSmallGame(x)) -> Ban(x))", "all x.((CompetitiveSport(x) & InvolvesSpectatorsBetweenSmallGame(x)) -> Ban(x))", "all x y.((CompetitiveSport(x) & ObserversBetweenSmallGame(y) & Involves(x,y)) -> Ban(x))", "all x.((CompetitiveSport(x) & InvolvesStakeholdersBetweenSmallGame(x)) -> Banned(x))", "all x y.((CompetitiveSport(x) & Participant(y) & BetOnSmallGame(y,x)) -> Ban(x,y))", "all x y z.((CompetitiveSport(x) & Participant(y) & SmallGame(z) & BetsOn(y,z)) -> Ban(x))", "all x y.((CompetitiveSport(x) & InvolvesStakeholdersBetweenSmallGame(x)) -> Ban(y))", "all x y.((CompetitiveSport(x) & ParticipantBetweenSmallGame(y) & Involves(x,y)) -> Ban(x))", "all x.(CompetitiveSport(x) -> (InvolvesSpectatorsBetweenSmallGame(x) & BansSmallGame(x)))", "all x.((CompetitiveSport(x) & InvolvesSupportersBetweenSmallGames(x)) -> Ban(x))", "all x.((CompetitiveSport(x) & InvolvesSpectatorsBetweenSmallGame(x)) -> Ban(x))", "all x.(CompetitiveSport(x) -> (InvolvesObserversBetweenSmallGame(x) & BansSecondaryGame(x)))", "all x.((CompetitiveSport(x) & InvolvesScientistsBetweenSmallGames(x)) -> Banned(x))", "all x.((CompetitiveSport(x) & InvolvesStakeholdersBetweenSmallGames(x)) -> Ban(x))"]}
{"id": "folio_train_2331", "nl": "No coursing is banned.", "fol": "all x.(IsCoursing(x) -> -IsBanned(x))", "prediction": ["all x.(Courses(x) -> -Banned(x))", "-BanishesCoursing(x)", "-exists x.(Coursing(x) & Banned(x))", "all x.(Coursing(x) -> -Ban(x))", "-BanishesCoursing(x)", "-BanCourses(x)", "(NoCoursingBan(x) & -Banned(x))", "-exists x.(Coursing(x) & Banned(x))", "all x.(Courses(x) -> -Banned(x))", "-BannedCoursing(x)", "-AllCoursesBannt(courses)", "all x.(Courses(x) -> -Ban(x))", "-BanishesCoursing(x)", "all x.(Coursing(x) -> -Banned(x))", "All x.(Courses(x) -> Ban(x))", "all x.(Coursing(x) -> -Ban(x))"]}
{"id": "folio_train_2332", "nl": "Greyhound racing is a competitive sport.", "fol": "all x.(IsGreyhoundRacing(x) -> IsCompetitiveSport(x))", "prediction": ["all x.(GreyhoundRacing(x) -> CompetitiveSport(x))", "all x.(Greyhound(x) -> CompetitiveSport(x))", "all x.(GreyhoundRacing(x) -> CompetitiveSport(x))", "all x y.((GreyhoundRacing(x) & CompetitiveSport(y)) -> Races(x,y))", "all x y.((Greyhound(x) & Sport(y)) -> Competitive(x,y))", "all x.(GrayhoundRacing(x) -> CompetitiveSport(x))", "(CompetitiveSport(greyhound) & Races(greyhound))", "all x.(GreyhoundRacing(x) -> CompetitiveSport(x))", "all x.(Greyhound(x) -> CompetitiveSport(x))", "all x y.((GreyhoundRacing(x) & CompetitiveSport(y)) -> Race(x,y))", "(CompetitiveSport(greyhound) & Races(greyhound))", "(CompetitiveSport(greefhoundRacing)", "all x.(Grayhound(x) -> CompetitiveSport(x))", "all x.(GreyhoundRacing(x) -> CompetitiveSport(x))", "(CompetitiveSport(greyhoundRacing)", "all x.(Greyhound(x) -> CompetitiveSport(x))"]}
{"id": "folio_train_2333", "nl": "If a soccer player receives two yellow cards in one game, this player will be ejected from the rest of the game.", "fol": "all x.((IsSoccerPlayer(x) & ReceivedTwoYellowCards(x)) -> EjectFromGame(x))", "prediction": ["all x.((SoccerPlayer(x) & ReceivesTwoYellowCards(x)) -> EjectedFromGame(x))", "all x y.((SoccerPlayer(x) & YellowCard(y) & ReceivesInOneGame(x,y)) -> EjectedFromGame(x))", "all x y z.((SoccerPlayer(x) & YellowCard(y) & Game(z) & ReceivesInOneGame(x,y,z)) -> EjectedFromGame(x,z))", "all x y.((SoccerPlayer(x) & ReceivesTwoYellowCards(x) & Game(y)) -> EjectedFrom(x,y))", "(ReceivesTwoYellowCardsInOneGame(x) & EjectedFromRestOfGame(x))", "all x.((SoccerPlayer(x) & ReceivesTwoYellowCards(x) & InOneGame(x)) -> EjectedFromRestOfGame(x))", "all x y.((SoccerPlayer(x) & SoccerPlayer(y) & ReceivesTwoYellowCards(x,y)) -> EjectedFromGame(y))", "all x y z.((SoccerPlayer(x) & YellowCard(y) & Game(z) & Receives(x,y,z)) -> EjectedFromGame(x,z))", "all x y z.((SoccerPlayer(x) & YellowCards(y) & Game(z) & ReceivesInOneGame(x,y,z)) -> EjectedFromGame(x,z))", "all x.((SoccerPlayer(x) & ReceivesTwoYellowCards(x)) -> EjectedFromGame(x))", "all x y.((SoccerPlayer(x) & YellowCards(y) & ReceivesInOneGame(x,y)) -> EjectedFromGame(x))", "all x.((SoccerPlayer(x) & ReceivesTwoYellowCardsInOneGame(x)) -> EjectedFromGame(x))", "all x.((Player(x) & ReceivesTwoYellowCards(x)) -> EjectedFromGame(x))", "all x y.((SoccerPlayer(x) & ReceivesTwoYellowCards(x,y) & Game(y)) -> EjectedFrom(x,y))", "all x.((SoccerPlayer(x) & TwoYellowCards(x)) -> EjectedFromGame(x))", "all x.((SoccerPlayer(x) & ReceivesTwoYellowCards(x) & Game(x)) -> Ejected(x))"]}
{"id": "folio_train_2334", "nl": "If a soccer player receives one red card in one game, this player will be ejected from the rest of the game.", "fol": "all x.((IsSoccerPlayer(x) & ReceivedOneRedCard(x)) -> EjectFromGame(x))", "prediction": ["all x y.((SoccerPlayer(x) & RedCard(y) & ReceivesInOneGame(x,y)) -> EjectedFromRestOfGame(x))", "all x.((SoccerPlayer(x) & ReceivesOneRedCard(x) & Game(x)) -> EjectedFromGame(x))", "all x y.((SoccerPlayer(x) & RedCard(y) & Receives(x,y)) -> EjectedFromGame(x))", "all x y z.((SoccerPlayer(x) & RedCard(y) & Game(z) & Receives(x,y) & InGame(x,z)) -> EjectedFromGame(x,z))", "(all x.((SoccerPlayer(x) & ReceivesOneRedCard(x)) -> EjectedFromGame(x)))", "all x y.((SoccerPlayer(x) & RedCard(y) & Game(y)) -> EjectedFrom(x,y))", "all x.((SoccerPlayer(x) & ReceivesOneRedCard(x) & Game(x)) -> EjectedFrom(x,Game))", "all x y z.((SoccerPlayer(x) & RedCard(y) & Game(z) & ReceivesInOneGame(x,y,z)) -> EjectedFromGame(x,z))", "all x.((SoccerPlayer(x) & ReceivesOneRedCard(x)) -> EjectedFromGame(x))", "all x.((SoccerPlayer(x) & ReceivesRedCard(x) & Game(x)) -> EjectedFromGame(x))", "all x y.((SoccerPlayer(x) & RedCard(y) & ReceivesInGame(x,y)) -> EjectedFromGame(x,y))", "all x.((Player(x) & ReceivesOneRedCard(x) & Game(x)) -> EjectedFromGame(x))", "all x y.((SoccerPlayer(x) & ReceivesOneRedCard(x,y) & Game(y)) -> Ejected(x,y))", "all x y z.((SoccerPlayer(x) & RedCard(y) & Game(z) & Receives(x,y,z)) -> EjectedFrom(x,z))", "all x.((SoccerPlayer(x) & ReceivesOneRedCardInOneGame(x)) -> EjectedFromRestOfGame(x))", "all x.((SoccerPlayer(x) & RedCard(x) & Game(x)) -> EjectedFrom(x,y))"]}
{"id": "folio_train_2335", "nl": "Henry is a soccer player.", "fol": "IsSoccerPlayer(Henry)", "prediction": ["(SoccerPlayer(Henry)", "all x.((Henry(x) & SoccerPlayer(x)) -> Plays(x,y))", "Henry is soccer player.", "Henry is a soccer player.", "all x.(Henry(x) -> SoccerPlayer(x))", "(SoccerPlayer(Henry)", "all x.((Henry(x) & SoccerPlayer(x)) -> Plays(x,y))", "Henry is a soccer player.", "Henry is soccerplayer.", "(SoccerPlayer(Henry)", "Henry is soccer player.", "Henry is a soccer player.", "(SoccerPlayer(Henry,Henry))", "(SoccerPlayer(Henry)", "Henry is soccerplayer.", "(SoccerPlayer(Henry)"]}
{"id": "folio_train_2336", "nl": "In one game, Henry first receives one yellow card, then he receives one red card.", "fol": "(-ReceivedTwoYellowCards(Henry) & ReceivedOneRedCard(Henry))", "prediction": ["all x y.((Game(x) & Henry(y)) -> (ReceivesYellowCard(y,x) & ReceivesRedCard(y,x)))", "all x y z.((Game(x) & YellowCard(y) & RedCard(z)) -> (Receives(x,y) & Receives(x,z)))", "(all x.(Game(x) -> ReceivesYellowCard(x)) & (Game(x) -> ReceivesRedCard(x)))", "(all x.((Game(x) & YellowCard(x)) -> Receives(x,y)) & ((Game(x) & RedCard(y)) -> Receives(x,y)))", "all x.((Game(x) & Henry(x)) -> (ReceivesYellowCard(x) & ReceivesRedCard(x)))", "(all x y.((Game(x) & YellowCard(y)) -> Receives(x,y)) & ((Game(x) & RedCard(y)) -> Receives(x,y)))", "(all x.(Henry(x) -> ReceivesYellowCard(x)) & (Henry(x) -> ReceivesRedCard(x)))", "all x y.((Game(x) & Henry(y)) -> (ReceivesYellowCard(y,x) & ReceivesRedCard(y,x)))", "all x.(Game(x) -> (ReceivesYellowCard(x) & ReceivesRedCard(x)))", "(exists x.(Game(x) & HenryReceivesYellowCard(x)) & exists y.(Game(y) & HenryReceivesRedCard(y))))", "all x y z.((Game(x) & YellowCard(y) & RedCard(z)) -> (Receives(x,y) & Receives(x,z)))", "all x y z.((Game(x) & Henry(y) & Card(z)) -> (ReceivesYellow(y,z) & ReceivesRed(y,z)))", "(all x.(Game(x) -> ReceivesYellowCard(x,y)) & (Game(y) -> ReceivesRedCard(y,x)))", "(All x y.((Game(x) & YellowCard(y)) -> Receives(x,y)) & ((Game(x) & RedCard(y)) -> Receives(x,y)))", "all x.(Game(x) -> (ReceivesYellowCard(x) & ReceivesRedCard(x)))", "all x y.((Game(x) & Henry(y)) -> (ReceivesYellowCard(y,x) & ReceivesReceivesRedCard(y,x)))"]}
{"id": "folio_train_2337", "nl": "Henry will be ejected from the rest of the game.", "fol": "EjectFromGame(Henry)", "prediction": ["all x.(Henry(x) -> EjectedFromGame(x))", "Henry will be ejected from the rest of the game.", "all x.((Henry(x) & RestOfGame(x)) -> EjectedFrom(x,y))", "all x y.((Henry(x) & Game(y)) -> EjectedFrom(x,y))", "(EjectsHenry(Henry)", "Henry will be ejected from the rest of the game.", "all x.(Henry(x) -> EjectedFromGame(x))", "all x.((Henry(x) & RestOfGame(x)) -> Ejected(x))", "(EjectsFromGame(Henry)", "(EjectsFromGame(Henry,RestOfGame))", "all x.(Henry(x) -> EjectedFromRestOfGame(x))", "Henry will be ejected from the rest of the game.", "(EjectsHenry(Henry)", "all x.((Henry(x) & RestOfGame(x)) -> EjectedFrom(x,y))", "All x.(Henry(x) -> EjectedFromRestOfGame(x))", "all x.((Henry(x) & RestOfGame(x)) -> EjectedFrom(x,Henry))"]}
{"id": "folio_train_2338", "nl": "Henry will not be ejected from the rest of the game.", "fol": "-EjectFromGame(Henry)", "prediction": ["all x.(Henry(x) -> -EjectedFromGame(x))", "Henry will not be ejected from the rest of the game.", "(-EjectedFromGame(Henry))", "all x.((Henry(x) & RestOfGame(x)) -> -Ejected(x))", "(-EjectedFromRestOfGame(Henry))", "all x y.((Henry(x) & Game(y)) -> -Ejected(x,y))", "all x.(Henry(x) -> -EjectedFromGame(x))", "(-Ejects(Henry) from RestOfGame(Henry))", "Henry will not be ejected from the rest of the game.", "-(Ejects(Henry,RestOfGame))", "(-ejected(Henry) & RestOfGame(Henry))", "all x.(Henry(x) -> -EjectedFromGame(x))", "-(EjectedFromGame(Henry))", "Henry will not be ejected from the rest of the game.", "all x.(Henry(x) -> -EjectedFromRestOfGame(x))", "(-Ejects(Henry)"]}
{"id": "folio_train_2339", "nl": "All trees are plants. ", "fol": "all x.(IsTree(x) -> IsPlant(x))", "prediction": ["all x.(Tree(x) -> Plant(x))", "all x.(Tree(x) -> Plant(x))", "(all x.(Tree(x) -> Plant(x))", "all x y.((Tree(x) & Plant(y)) -> Plant(x))", "all x.(Tree(x) -> Plant(x))", "all x.(Tree(x) -> Plant(x))", "all x.(Tree(x) -> Plant(x))", "all x.(Tree(x) -> Plant(x))", "all x.(Tree(x) -> Plant(x))", "all x.(Tree(x) -> Plant(x))", "all x.(Tree(x) -> Plant(x))", "all x.(Tree(x) -> Plant(x))", "all x.(Tree(x) -> Plant(x))", "all x.(Tree(x) -> Plant(x))", "exists x.(Tree(x) & Plant(x))", "exists x.(Tree(x) & Plant(x))"]}
{"id": "folio_train_2340", "nl": "Some living things are trees.", "fol": "exists x.(IsLivingThing(x) & IsTree(x))", "prediction": ["exists x.(LivingThing(x) & Tree(x))", "exists x.(LivingThing(x) & Tree(x))", "exists x.(LivingThing(x) & Tree(x))", "exists x.(LivingThing(x) & Tree(x))", "exists x.(LivingThing(x) & Tree(x))", "exists x y.(LivingThing(x) & Tree(y))", "exists x.(Living(x) & Tree(x))", "exists x.(LivingThing(x) & Tree(x))", "exists x.(LivingThing(x) & Tree(x))", "exists x.(Living(x) & Tree(x))", "exists x.(Life(x) & Tree(x))", "exists x.(LivingThing(x) & Tree(x))", "exists x.(LivingTree(x) & Tree(x))", "exists x.(Living(x) & Tree(x))", "exists x.(LivingThing(x) & Tree(x))", "exists x.(LivingThing(x) & Tree(x))"]}
{"id": "folio_train_2341", "nl": "Some living things are plants.", "fol": "exists x.(IsLivingThing(x) & IsPlant(x))", "prediction": ["exists x.(LivingThing(x) & Plant(x))", "exists x.(LivingThing(x) & Plant(x))", "exists x.(LivingThing(x) & Plant(x))", "exists x.(LivingThing(x) & Plant(x))", "exists x.(LivingThing(x) & Plant(x))", "exists x y.(LivingThing(x) & Plant(y))", "exists x.(Living(x) & Plant(x))", "exists x.(LivingThing(x) & Plant(x))", "exists x.(LivingThing(x) & Plant(x))", "exists x.(Living(x) & Plant(x))", "exists x.(Life(x) & Plant(x))", "exists x.(LivingThing(x) & Plant(x))", "exists x.(Living(x) & Plant(x))", "exists x.(LivingThing(x) & Plant(x))", "exists x.(LivingThing(x) & Plant(x))", "exists x.(LivingThing(x) & Plant(x))"]}
{"id": "folio_train_2342", "nl": "Dagfinn is a given name.", "fol": "all x.(IsGivenNameDagfinn(x) -> IsGivenName(x))", "prediction": ["all x.(Dagfinn(x) -> GivenName(x))", "Dagfinn is a givenName(x)", "all x.(Dagfinn(x) -> GivenName(x))", "Dagfinn is a GivenName(Dagfinn)", "(GayName(Dagfinn)", "(GaggedName(Dagfinn) & GivenName(Dagfinn))", "(GewenName(Dagfinn)", "all x.(Gifnn(x) -> GivenName(x))", "Dagfinn (givenName)", "all x.(Dagfinn(x) -> GivenName(x))", "Dagfinn is givenName(d)", "all x.(Gifnn(x) -> GivenName(x))", "all x.(Dagfinn(x) -> GivenName(x))", "exists x.(Dagfinn(x) & GivenName(x))", "exists x.(Dagfinn(x) & GivenName(x))", "exists x.(Dagfinn(x) & GivenName(x))"]}
{"id": "folio_train_2343", "nl": "Notable people with the given name include Dagfinn Aarskog, Dagfinn Bakke and Dagfinn Dahl. ", "fol": "(IsGivenNameDagfinn(DagfinnAarskog) & IsNotablePerson(DagfinnAarskog) & IsGivenNameDagfinn(DagfinnBakke) & IsNotablePerson(DagfinnBakke) & IsGivenNameDagfinn(DagfinnDahl) & IsNotablePerson(DagfinnDahl))", "prediction": ["(NotablePeopleWithGivenName(DagfinnAarskog) & NotablePeopleWithGivenName(DagfinnBakke) & NotablePeopleWithGivenName(DagfinnDalm))", "(NotablePerson(x) & GivenName(x)) -> (DagfinnAarskog(x) | DagfinnBakke(x) | DagfinnDalm(x)))", "all x.((Person(x) & GivenName(x)) -> (DagfinnAarskog(x) | DagfinnBakke(x) | DagfinnDalm(x)))", "KnownPeopleWithGivenName(x) -> (DagfinnAarskog(x) | DagfinnBakke(x) | DagfinnDalm(x)))", "(Named(Person(Person) & DagfinnAarskog(Person) & DagfinnBakke(Person) & DagfinnDallas(Person))", "(NotablePeopleWithName(DagfinnAarskog) & NotablePeopleWithNameDagfinnBakke(DagfinnDalm))", "(notablepeoplewithgivenName(Person(Person(Person(Person)) -> (DagfinnAarskog(Person) & DagfinnBakke(Person) & DagfinnDalm(Person)))", "KnownPeopleWithNameDagfinnAarskogDagfinnBakkeDagfinnDal.", "(NumberOfName(n) -> (DagfinnAarskog(n) | DagfinnBakke(n) | DagfinnDalm(n))))", "(NotablePeopleWithGedName(DagfinnAarskog) & NotablePeopleWithGedName(DagfinnBakke) & NotablePeopleWithGedName(DagfinnDalm))", "(NotablePerson(x) & GivenName(x)) -> (DagfinnAarskog(x) | DagfinnBakke(x) | DagfinnDalm(x)))", "all x.((Person(x) & GivenName(x)) -> (DagfinnAarskog(x) | DagfinnBakke(x) | DagfinnDalm(x)))", "all x.((Person(x) & GivenName(x)) -> (DagfinnAarskog(x) | DagfinnBakke(x) | DagfinnDal.(dal.(dal.(dal.))))", "(NotablePerson(x) & GivenName(x)) -> (DagfinnAarskog(x) | DagfinnBakke(x) | DagfinnDal.))", "-(NotablePerson(x) & GivenName(x)) -> (DagfinnAarskog(x) | DagfinnBakke(x) | DagfinnDalm(x)))", "all x.((Person(x) & GivenName(x)) -> (DagfinnAarskog(x) | DagfinnBakke(x) | DagfinnDallas(x)))"]}
{"id": "folio_train_2344", "nl": "Dagfinn Aarskog is a Norwegian physician.", "fol": "(IsNorwegian(DagfinnAarskog) & IsPhysician(DagfinnAarskog))", "prediction": ["Dagfinn Aarskog (NorwegianPharmacist)", "(NorwegianPhDagfinnAarskog(Dagfinn) & Physician(Dagfinn))", "all x.(DagfinnAarskog(x) -> NorwegianPharmacist(x))", "(NorwegianPharmacist(DagfinnAarskog) & -NorwegianPharmacist(DagfinnAarskog))", "all x.((Doctor(x) & DagfinnAarskog(x)) -> Norwegian(x))", "all x.((DagfinnAarskog(x) & NorwegianPharmacist(x)) -> Doctor(x))", "DagfinnAarskog (NorwegianPharmacist)", "DagfinnAarskog is a NorwegianPharmacist(DagfinnAarskog)", "Dagfinn Aarskog (NorwegianPhDagfinn))", "all x.(DagfinnAarskog(x) -> NorwegianPharmacist(x))", "(NorwegianPhDagfinnAarskog)", "(NorwegianPhysician(DagfinnAarskog)", "DagfinnAarskog is a NorwegianPharmacist(d)", "Dagfinn Aarskog (NorwegianPharmacist)", "Dagfinn Aarskog (NorwegianPhDagfinn))", "DagfinnAarskog is a NorwegianPharmacist."]}
{"id": "folio_train_2345", "nl": "Dagfinn Dahl is a Norwegian barrister.", "fol": "(IsNorwegian(DagfinnDahl) & IsBarrister(DagfinnDahl))", "prediction": ["Dagfinn Dahl (NorwegianBarrister)", "(NorwegianBarrister(Dagfinn Dahl))", "all x.(DagfinnDalf(x) -> NorwegianBarrister(x))", "all x.((DagfinnDalf(x) & NorwegianBarrister(x)) -> Barrister(x))", "(NorwegianBarrister(Dagfinn Dahl) & FoundedIn(Dagfinn,Dagfinn))", "(NovellBarrister(Dagfinn Dahl) & NorwegianBarrister(Dagfinn Dahl))", "Dagfinn Dahl (NorwegianBarrister)", "Dagfinn Dahl is NorwegianBarrister.", "all x.(DagfinnDalm(x) -> NorwegianBarrister(x))", "Dagfinn Dahl is NorwegianBarrister(Dagfinn(Dag))", "(NorwegianBarrister(DagfinnDalf) & -Barrister(Dalfinn))", "(NorwegianBarrister(Dagfinn Dahl))", "Dagfinn Dahl (NorwegianBarrister)", "Dagfinn Dahl (Barrier(d) & Norwegian(d))", "Dagfinn Dahl is a Norwegian Barrister.", "Dagfinn Dahl (norwegianBarrister)"]}
{"id": "folio_train_2346", "nl": "Dagfinn Aarskog is a notable person.", "fol": "IsNotablePerson(DagfinnAarskog)", "prediction": ["DagfinnAarskog is a notablePerson(x)", "(Notable(DagfinnAarskog) -> Notable(DagfinnAarskog))", "all x.(DagfinnAarskog(x) -> NotablePerson(x))", "(NotablePerson(DagfinnAarskog)", "(Notable(DagfinnAarskog) -> Notable(DagfinnAarskog))", "DagfinnAarskog (Person(Dagfinn) & Notable(Dagfinn))", "-DagfinnAarskog(Dagfinn)", "DagfinnAarskog is a notablePerson(x)", "all x.(DagfinnAarskog(x) -> NotablePerson(x))", "Dagfinn Aarskog is notable.", "(NotablePerson(DagfinnAarskog)", "all x.(DagfinnAarskog(x) -> NotablePerson(x))", "Dagfinn Aarskog (Person(d) & Notable(d))", "Dagfinn Aarskog is a notable person.", "all x.(DagfinnAarskog(x) -> NotablePerson(x))", "DagfinnAarskog ist eine notable Person."]}
{"id": "folio_train_2347", "nl": "Dagfinn is Dagfinn Aarskog's given name.", "fol": "IsGivenNameDagfinn(DagfinnAarskog)", "prediction": ["Dagfinn is DagfinnAarskog's GivenName(Dagfinn)", "(Dagfinn(Dagfinn) & DagfinnAarskog(Dagfinn))", "all x.(Dagfinn(x) -> DagfinnAarskog(x))", "Dagfinn Aarskog(Dagfinn)", "Dagfinn (Dagfinn) & DagfinnAarskog(Dagfinn))", "(GayName(Dagfinn) & DagfinnAarskog(Dagfinn))", "(Dagfinn(Dagfinn) & DagfinnAarskog(Dagfinn))", "Dagfinn is DagfinnAarskogsgivenName(d)", "all x.(Dagfinn(x) -> DagfinnAarskog(x))", "All x.(Dagfinn(x) -> GivenName(x,DagfinnAarskog))", "Dagfinn Aarskog's GivenName(Dagfinn)", "(GiftName(Dagfinn) & DagfinnAarskog(Dagfinn))", "DagfinnAarskog(d) -> GivenName(d))", "Dagfinn is Dagfinn Aarskog's GivenName.", "all x.(Dagfinn(x) -> DagfinnAarskog(x))", "Dagfinn (DagfinnAarskog)"]}
{"id": "folio_train_2348", "nl": "Dagfinn Dahl is a Norwegian physician.", "fol": "(IsNorwegian(DagfinnDahl) & IsPhysician(DagfinnDahl))", "prediction": ["Dagfinn Dahl (NorwegianPharmacist)", "all x.(DagfinnDalm(x) -> NorwegianPharmacist(x))", "(NorwegianPharmacist(Dagfinn Dahl)", "(NorwegianPhDagfinn(Dagfinn) & Physician(Dagfinn))", "-(Dagfinn Dahl(d) & NorwegianPharmacist(d))", "Dagfinn Dahl is a NorwegianPharmacist(Dagfinn(Dag) & -Dagfinn(Dag))", "Dagfinn Dahl (NorwegianPharmacist)", "all x.(DagfinnDalm(x) -> NorwegianPharmacist(x))", "(NorwegianPharmacist(Dagfinn Dahl)", "Dagfinn Dahl is NorwegianPharmacist(dagfinn.dallas.no)", "(NorwegianPhysician(DagfinnDalm)", "Dagfinn Dahl (NorwegianPharmacist)", "all x.(DagfinnDalm(x) -> NorwegianPharmacist(x))", "Dagfinn Dahl is a Norwegian Physician.", "Dagfinn Dahl (NorwegianPhDavid)", "Dagfinn Dahl (norwegianPharmacist)"]}
{"id": "folio_train_2349", "nl": "If entertainment is interesting, it will be popular.", "fol": "all x.((IsEntertainment(x) & IsInteresting(x)) -> IsPopular(x))", "prediction": ["all x.((Entertainment(x) & Interesting(x)) -> Popular(x))", "all x.((InterestingEntertainment(x) & Popular(x)) -> Interesting(x))", "(InterestingEntertainment(x) -> Popular(x))", "all x.(InterestingEntertainment(x) -> Popular(x))", "all x.((Entertainment(x) & Interesting(x)) -> Popular(x))", "all x y.((InterestingEntertainment(x) & Popular(y)) -> Interesting(x))", "all x.((InterestingEntertainment(x) & Popular(x)) -> Interesting(x))", "all x.((Entertainment(x) & Interesting(x)) -> Popular(x))", "all x.(InterestingEntertainment(x) -> Popular(x))", "all x y.((Entertainment(x) & Interesting(x) & Popular(y)) -> Interesting(x))", "all x.(InterestingEntertainment(x) -> Popular(x))", "all x.((InterestingEntertainment(x) & Popular(x)) -> Interesting(x))", "all x.((Entertainment(x) & Interesting(x)) -> Popular(x))", "all x.(InterestingEntertainment(x) -> Popular(x))", "all x.((Entertainment(x) & Interesting(x)) -> Popular(x))", "all x.(InterestingEntertainment(x) -> Popular(x))"]}
{"id": "folio_train_2350", "nl": "All popular things are well-known.", "fol": "all x.(IsPopular(x) -> IsWellKnown(x))", "prediction": ["all x.(PopularThing(x) -> WellKnown(x))", "all x.(PopularThing(x) -> WellKnown(x))", "all x y.((PopularThing(x) & Popular(y)) -> WellKnown(x))", "all x.(PopularThing(x) -> WellKnown(x))", "all x.(PopularTend(x) -> WellKnown(x))", "all x y.((PopularThing(x) & PopularThing(y)) -> WellKnown(x))", "all x y.((PopularThing(x) & Popular(y)) -> WellKnown(x))", "(all x.(PopularThing(x) -> WellKnown(x))", "all x.(PopularThing(x) -> WellKnown(x))", "all x.(Popular(x) -> WellKnown(x))", "all x.(PopularThing(x) -> WellKnown(x))", "all x.(PopularTend(x) -> WellKnown(x))", "all x.(PopularThing(x) -> WellKnown(x))", "exists x.(PopularTend(x) & WellKnown(x))", "exists x.(PopularThing(x) & WellKnown(x))", "all x.(PopularThing(x) -> WellKnown(x))"]}
{"id": "folio_train_2351", "nl": "If entertainment is interesting, it will be well-known.", "fol": "all x.((IsEntertainment(x) & IsInteresting(x)) -> IsWellKnown(x))", "prediction": ["all x.((Entertainment(x) & Interesting(x)) -> WellKnown(x))", "all x.(InterestingEntertainment(x) -> WellKnown(x))", "all x.((Entertainment(x) & Interesting(x)) -> WellKnown(x))", "(InterestingEntertainment(x) -> WellKnown(x))", "all x.(InterestingEntertainment(x) -> WellKnown(x))", "all x y.((InterestingEntertainment(x) & WellKnown(y)) -> Interesting(x))", "all x.((Entertainment(x) & Interesting(x)) -> WellKnown(x))", "all x y.((InterestingEntertainment(x) & Interesting(y)) -> WellKnown(x))", "all x.(InterestingEntertainment(x) -> WellKnown(x))", "all x.((Entertainment(x) & Interesting(x)) -> WellKnown(x))", "all x.(InterestingEntertainment(x) -> WellKnown(x))", "all x.(Interesting(x) -> WellKnown(x))", "all x.((Entertainment(x) & Interesting(x)) -> WellKnown(x))", "exists x.(Interesting(x) & WellKnown(x))", "all x.(InterestingEntertainment(x) -> WellKnown(x))", "all x.((Entertainment(x) & Interesting(x)) -> WellKnown(x))"]}
{"id": "folio_train_2352", "nl": "It is not true that some giant language models do not have good performance. ", "fol": "-exists x.(IsLanguageModel(x) & IsGiantLanguageModel(x) & -HasGoodPerformance(x))", "prediction": ["exists x.(LanguageModel(x) & -GoodPerformance(x))", "(-exists x.(GiantLanguageModel(x) & -GoodPerformance(x)))", "all x.((GiantLanguageModel(x) & -GoodPerformance(x)) -> -GiantLanguageModel(x))", "exists x.(GiantLanguageModel(x) & -GoodPerformance(x))", "-(GiantLanguageModel(x) & -GoodPerformance(x)))", "(-all x.(GiantLanguageModel(x) -> -GoodPerformance(x)))", "(all x.((LanguageModel(x) & Giant(x)) -> -GoodPerformance(x)))", "-exists x.(GiantLanguageModel(x) & -GoodPerformance(x))", "all x.((GiantLanguageModel(x) & -GoodPerformance(x)) -> -GiantLanguageModel(x))", "exists x.(LanguageModel(x) & -GoodPerformance(x))", "-(GiantLanguageModel(x) & -GoodPerformance(x))", "all x y.((GiantLanguageModel(x) & LanguageModel(y)) -> -GoodPerformance(x,y))", "exists x.(GiantLanguageModel(x) & -GoodPerformance(x))", "(-exists x.(GiantLanguageModel(x) & -GoodPerformance(x)))", "all x.((GiantLanguageModel(x) & -GoodPerformance(x)) -> -GiantLanguageModel(x))", "exists x.(LanguageModel(x) & -GoodPerformance(x))"]}
{"id": "folio_train_2353", "nl": "All language models with good performance are used by some researchers.", "fol": "all x.((IsLanguageModel(x) & HasGoodPerformance(x)) -> IsUsedByResearchers(x))", "prediction": ["all x.((LanguageModel(x) & GoodPerformance(x)) -> UsedByResearchers(x))", "exists x.(LanguageModel(x) & GoodPerformance(x) & UsedByResearchers(x))", "all x y.((LanguageModel(x) & GoodPerformance(x)) -> UsedByResearchers(y))", "(all x.((LanguageModel(x) & GoodPerformance(x)) -> UsedByResearchers(x))", "all x.((LanguageModel(x) & GoodPerformance(x)) -> UsedByResearchers(x))", "all x y.((LanguageModel(x) & Researcher(y) & GoodPerformance(x)) -> UsedBy(y,x))", "exists x.(LanguageModel(x) & GoodPerformance(x) & UsedByResearchers(x))", "all x.((LanguageModel(x) & GoodPerformance(x)) -> UsedByResearchers(x))", "all x y.((LanguageModel(x) & GoodPerformance(x)) -> UsedByResearchers(y))", "exists x.(LanguageModel(x) & GoodPerformance(x) & UsedByResearchers(x))", "all x y.((LanguageModel(x) & LanguageModel(y) & GoodPerformance(x)) -> UsedByResearchers(x))", "all x.((LanguageModel(x) & GoodPerformance(x)) -> UsedByResearchers(x))", "exists x.(LanguageModel(x) & GoodPerformance(x) & UsedByResearchers(x))", "all x y.((LanguageModel(x) & Researcher(y) & GoodPerformance(x)) -> UsedBy(y,x))", "exists x.(LanguageModel(x) & GoodPerformance(x) & UsedByResearchers(x))", "exists x.(LanguageModel(x) & GoodPerformance(x) & UsedByResearchers(x))"]}
{"id": "folio_train_2354", "nl": "If a language model is used by some researchers, it is popular. ", "fol": "all x.(IsUsedByResearchers(x) -> IsPopular(x))", "prediction": ["all x.((LanguageModel(x) & UsedByResearchers(x)) -> Popular(x))", "all x y.((LanguageModel(x) & Researcher(y) & UsedBy(x,y)) -> Popular(x))", "all x.((LanguageModel(x) & UsedByResearchers(x)) -> Popular(x))", "all x y.((LanguageModel(x) & Researcher(y) & UsedBy(x,y)) -> Popular(x))", "exists x.(LanguageModel(x) & UsedByResearchers(x) & Popular(x))", "all x y z.((LanguageModel(x) & Researcher(y) & UsedBy(x,y) & Researcher(z)) -> Popular(x))", "all x.((LanguageModel(x) & UsedByResearchers(x)) -> Popular(x))", "all x y.((LanguageModel(x) & UsedByResearchers(x)) -> Popular(x))", "all x y.((LanguageModel(x) & Researcher(y) & UsedBy(x,y)) -> Popular(x))", "exists x.(LanguageModel(x) & UsedByResearchers(x))", "all x.((LanguageModel(x) & UsedByResearchers(x)) -> Popular(x))", "exists x.(LanguageModel(x) & UsedByResearchers(x) & Popular(x))", "all x y.((LanguageModel(x) & Researcher(y) & UsedBy(x,y)) -> Popular(x))", "all x y.((LanguageModel(x) & UsedByResearchers(x)) -> Popular(y))", "all x.((LanguageModel(x) & UsedByResearchers(x)) -> Popular(x))", "all x.((LanguageModel(x) & UsedByResearchers(x)) -> Popular(x))"]}
{"id": "folio_train_2355", "nl": "If BERT is a giant language model, then GPT-3 is also a giant language model. ", "fol": "((IsLanguageModel(Bert) & IsGiantLanguageModel(Bert)) -> (IsLanguageModel(Gpt3) & IsGiantLanguageModel(Gpt3)))", "prediction": ["all x.((BERT(x) & GiantLanguageModel(x)) -> GiantLanguageModel(x))", "(GiantLanguageModel(BERT) & GPT-3GiantLanguageModel(GPT3))", "(GiantLanguageModel(BERT) & GiantLanguageModel(GPT3))", "all x.((BERT(x) & GiantLanguageModel(x)) -> GiantLanguageModel(x))", "all x.(GiantLanguageModel(x) -> (BERT(x) | GPT3(x)))", "(all x.((BERT(x) & GiantLanguageModel(x)) -> GiantLanguageModel(x)))", "all x y.((BERT(x) & GPT3(y)) -> GiantLanguageModel(x,y))", "all x.((BERT(x) & GiantLanguageModel(x)) -> GiantLanguageModel(x))", "(GiantLanguageModel(BERT) & GiantLanguageModel(GPT3))", "all x y.((BERT(x) & GPT3(y)) -> GiantLanguageModel(x))", "all x.(GiantLanguageModel(x) -> (BERT(x) | GPT3(x)))", "(GiantLanguageModel(BERT,GPT3))", "all x.((BERT(x) & GiantLanguageModel(x)) -> GiantLanguageModel(x))", "all x.((BERT(x) & GiantLanguageModel(x)) -> GiantLanguageModel(x))", "all x.((BERT(x) & GiantLanguageModel(x)) -> GiantLanguageModel(x))", "all x.((BERT(x) & GiantLanguageModel(x)) -> GiantLanguageModel(x))"]}
{"id": "folio_train_2356", "nl": "BERT is a giant language model. ", "fol": "(IsLanguageModel(Bert) & IsGiantLanguageModel(Bert))", "prediction": ["all x.(BERT(x) -> GiantLanguageModel(x))", "BERT is a giantLanguageModel(BERT)", "(GiantLanguageModel(BERT) & -GiantLanguageModel(BERT))", "all x.(BERT(x) -> GiantLanguageModel(x))", "all x.((BERT(x) & GiantLanguageModel(x)) -> LanguageModel(x))", "(GiantLanguageModel(BERT))", "(LanguageModel(BERT) & Giant(BERT))", "(GiantLanguageModel(BERT) & GiantLanguageModel(BERT))", "BERT is a giantLanguageModel(BERT)", "all x.(BERT(x) -> GiantLanguageModel(x))", "ALL X.((BERT(x) & GiantLanguageModel(x)) -> LanguageModel(x))", "BERT is giantLanguageModel(BERT)", "all x.(BERT(x) -> GiantLanguageModel(x))", "(GiantLanguageModel(BERT))", "all x.(BERT(x) -> GiantLanguageModel(x))", "all x.(BERT(x) -> GiantLanguageModel(x))"]}
{"id": "folio_train_2357", "nl": "GPT-3 is popular.", "fol": "IsPopular(Gpt3)", "prediction": ["all x.(GPT-3(x) -> Popular(x))", "(Popular(GPT3))", "GPT-3 is popular.", "all x.(GPT-3(x) -> Popular(x))", "(Popular(GPT3))", "GPT-3 is popular.", "(Popular(GPT3))", "all x.(GPT-3(x) -> Popular(x))", "(Popular(GPT3))", "GPT-3 is popular.", "All x.(GPT3) -> Popular(x))", "all x.(GPT3(x) -> Popular(x))", "(Popular(GPT3))", "All x.(GPT3(x) -> Popular(x))", "(Popular(GPT3))", "all x.(GPT-3(x) -> Popular(x))"]}
{"id": "folio_train_2358", "nl": "St Johnstone is a Scottish team.", "fol": "IsScottishTeam(Johnstone)", "prediction": ["all x.(StJohnstone(x) -> ScottishTeam(x))", "StJohnstone is ScottishTeam(Scotland)", "(ScottishTeam(StJohnstone) & ScottishTeam(StJohnstone))", "all x.((StJohnstone(x) & ScottishTeam(x)) -> ScottishTeam(x))", "StJohnstone is a ScottishTeam(ScottishTeam)", "all x.(StJohnstone(x) -> ScottishTeam(x))", "(ScottishTeam(StJohnstone) & ScottishTeam(StJohnstone))", "StJohnstone is ScottishTeam(Scottish)", "StJohnstone(ScottishTeam)", "all x.(StJohnstone(x) -> ScottishTeam(x))", "StJohnstone is a ScottishTeam(Scotland)", "StJohnstone(Scotland)", "all x.(StJohnstone(x) -> ScottishTeam(x))", "All x.(StJohnstone(x) -> ScottishTeam(x))", "all x.(StJohnstone(x) -> ScottishTeam(x))", "All x.(StJohnstone(x) -> ScottishTeam(x))"]}
{"id": "folio_train_2359", "nl": "St Johnstone is part of the Scottish Premiership.", "fol": "IsPartOfLeague(Johnstone,Scottishpremiership)", "prediction": ["all x.(StJohnstone(x) -> ScottishPrimaryship(x))", "StJohnstone is part of ScottishPremiership(StJohnstone)", "all x.((StJohnstone(x) & ScottishPrimaryship(x)) -> PartOf(x,y))", "all x y.((StJohnstone(x) & ScottishPremiership(y)) -> PartOf(x,y))", "StJohnstonePartOfScottishPremiership(StJohnstone)", "StJohnstone is part of the ScottishPremiership(Scotland)", "all x.(StJohnstone(x) -> ScottishPremiership(x))", "StJohnstone is part of ScottishPremiership(StJohnstone)", "all x.((StJohnstone(x) & ScottishPremiership(x)) -> PartOf(x,y))", "StJohnstone(Scotland)", "All x.(StJohnstone(x) -> PartOfScottishPremiership(x))", "All x.(StJohnstone(x) -> ScottishPrimaryship(x))", "(PartOfScottishPremiership(StJohnstone))", "StJohnstone(ScottishPrime Ministerial)", "StJohnstone is part of ScottishPrimaryship(StJohnstone)", "All x.(StJohnstone(x) -> ScottishPremiership(x))"]}
{"id": "folio_train_2360", "nl": "If a team is part of the league, it has joined the league.", "fol": "all x y.(IsPartOfLeague(x,y) -> HasJoinedLeague(x,y))", "prediction": ["all x.((Team(x) & PartOfLiga(x)) -> JoinedLiga(x))", "all x.(PartOfLiga(x) -> JoinedLiga(x))", "all x y.((Team(x) & PartOfLiga(x,y)) -> JoinedLiga(x,y))", "all x.((Team(x) & PartOfLiga(x)) -> JoinedLiga(x))", "all x y.((Team(x) & PartOfLiga(x) & League(y)) -> Joined(x,y))", "all x.(PartOfLiga(x) -> JoinedLiga(x))", "all x.((Team(x) & PartOfLiga(x)) -> JoinedLiga(x))", "all x y.((Team(x) & PartOfLiga(x,y)) -> JoinedLiga(x,y))", "exists x.(Team(x) & PartOfLiga(x) & JoinedLiga(x))", "all x y.((Team(x) & League(y)) -> Joined(x,y))", "all x.(PartOfLiga(x) -> JoinedLiga(x))", "all x.((Team(x) & PartOfLiga(x)) -> JoinedLiga(x))", "all x y.((Team(x) & PartOfLiga(x) & League(y)) -> Joined(x,y))", "all x y.((Team(x) & League(y) & PartOf(x,y)) -> Joined(x,y))", "all x.(PartOfLiga(x) -> JoinedLiga(x))", "all x.((Team(x) & PartOfLiga(x)) -> JoinedLiga(x))"]}
{"id": "folio_train_2361", "nl": "St Johnstone and Minsk are different teams.", "fol": "(AreDifferentTeams(Misnk,Johnstone) & AreDifferentTeams(Johnstone,Minsk))", "prediction": ["(DifferentTeam(StJohnstone,StJohnstone) & DifferentTeam(Minsk,StJohnstone))", "all x.((StJohnstone(x) & Minsk(x)) -> DifferentTeam(x))", "(DifferentTeam(StJohnstone) & DifferentTeam(Minsk))", "StJohnstone and Minsk are different teams.", "(DifferentTeams(StJohnstone,StJohnstone) & DifferentTeams(Minsk,StJohnstone))", "all x.((Team(x) & StJohnstone(x) & Minsk(x)) -> Different(x))", "((StJohnstone(s) & Minsk(s)) | (StJohnstone(s) & Minsk(s))))", "all x y.((StJohnstone(x) & Minsk(y)) -> DifferentTeam(x,y))", "(DifferentTask(StJohnstone,StJohnstone) & DifferentTask(Minsk,StJohnstone))", "both teams exist x.(Team(x) & StJohnstone(x) & Minsk(x))", "all x.((StJohnstone(x) & Minsk(x)) -> DifferentTeam(x))", "(DifferentTeam(StJohnstone,StJohnstone) & DifferentTeam(Minsk,StJohnstone))", "all x.((Team(x) & StJohnstone(x) & Team(x) & Minsk(x)) -> Different(x))", "StJohnstone and Minsk are different teams.", "(StJohnstone(StJohnstone) & Minsk(Minsk))", "(DifferentTeam(StJohnstone) & DifferentTeam(Minsk))"]}
{"id": "folio_train_2362", "nl": "For two different teams, either one team wins or the other team wins.", "fol": "all x y.(((AreDifferentTeams(x,y) -> TeamWonGame(x,y)) & -TeamWonGame(y,x)) | (-(AreDifferentTeams(x,y) -> TeamWonGame(x,y)) & TeamWonGame(y,x)))", "prediction": ["all x y.((Team(x) & Team(y)) -> (Wins(x,y) | Wins(y,x)))", "all x.((Team(x) & Team(x) & Wins(x)) -> (Wins(x) | Wins(x)))", "all x y z.((Team(x) & Team(y) & Team(z) & Wins(x,y)) -> (Wins(y,z) | Wins(z,y)))", "all x.((Team(x) & Team(x)) -> (Wins(x) | Wins(x)))", "(Wins(team,2) | Wins(team,2)))", "all x y.((Team(x) & Team(y) & Wins(x,y)) -> (Wins(x,y) | Wins(x,y)))", "all x y.((Team(x) & Team(y)) -> (Wins(x,y) | Wins(y,y)))", "(Wins(team,team) | Wins(team,team,team,team)))", "exists x.(Team(x) & Wins(x,2))", "all x y z.((Team(x) & Team(y) & Team(z)) -> (Wins(x,y,z) | Wins(y,z)))", "(Wins(Team) | Wins(Team))", "exists x.(Team(x) & (Wins(x,1) | Wins(x,2)))", "exists x.(Team(x) & Wins(x,2))", "all x y.((Team(x) & Team(y)) -> (Wins(x,y) | Wins(x,y)))", "exists x.(Team(x) & Wins(x,2))", "all x y.((Team(x) & Team(y)) -> (Wins(x,y) | Wins(y,z)))"]}
{"id": "folio_train_2363", "nl": "Minsk won against St Johnstone.", "fol": "TeamWonGame(Minsk,Johnstone)", "prediction": ["all x y.((Minsk(x) & StJohnstone(y)) -> Wins(x,y))", "all x.(Minsk(x) -> WinsAgainst(x,StJohnstone))", "Minsk won against StJohnstone.", "(WinsMission(Minsk,StJohnstone))", "all x.((Minsk(x) & StJohnstone(x)) -> Wins(x))", "(Wins(Minsk,StJohnstone))", "-WinsAgainstStJohnstone(Minsk,StJohnstone)", "(WinsMuslimvs(Minsk,StJohnstone))", "(Wins(Minsk) & StJohnstone(Minsk))", "all x y.((Minsk(x) & StJohnstone(y)) -> Wins(x,y))", "-(Minsk(Minsk) & StJohnstone(Minsk))", "StJohnstone (Minsk) & Wins(Minsk,StJohnstone))", "Minsk won against StJohnstone.", "All x.(Minsk(x) -> WinsAgainst(x,StJohnstone))", "all x y.((Minsk(x) & StJohnstone(y)) -> WonAgainst(x,y))", "(WonMission(Minsk,StJohnstone))"]}
{"id": "folio_train_2364", "nl": "At least one Scottish team has joined the Scottish Premiership.", "fol": "exists x.(IsScottishTeam(x) & HasJoinedLeague(x,Scottishpremiership))", "prediction": ["all x.(ScottishTeam(x) -> JoinedScottishPrimaryship(x))", "all x y.((ScottishTeam(x) & ScottishPrimary(y)) -> Joined(x,y))", "at least one ScottishTeam(x) has joined ScottishPremiership(x))", "at least one ScottishTeamJoinedScottishPremiership(x)", "all x y.((ScottishTeam(x) & ScottishPrime Ministership(y)) -> Joined(x,y))", "(exists x.(ScottishTeam(x) & JoinedScottishPrimaryship(x)))", "all x.(ScottishTeam(x) -> JoinedScottishPremiership(x))", "all x y.((ScotlandTeam(x) & ScottishPrimaryship(y)) -> Joined(x,y))", "-exists x.(ScottishTeam(x) & JoinedScottishPrimaryship(x))", "exists x.(ScotlandTeam(x) & JoinedScottishPrimaryship(x))", "at least one ScottishTeam(s) has joined ScottishPrimaryship(s)", "exists x.(ScottishTeam(x) & JoinedScottishPrimaryship(x))", "all x y.((ScottishTeam(x) & ScottishPremiership(y)) -> Joined(x,y))", "all x y.((ScotlandTeam(x) & ScottishPrimaryship(y)) -> Joined(x,y))", "exists x.(ScottishTeam(x) & JoinedScottishPremiership(x))", "exists x.(ScottishTeam(x) & JoinedScotlandPremiership(x))"]}
{"id": "folio_train_2365", "nl": "St Johnstone won against Minsk.", "fol": "TeamWonGame(Johnstone,Minsk)", "prediction": ["StJohnstoneWonAgainstMinsk(StJohnstone)", "all x y.((StJohnstone(x) & Minsk(y)) -> WonAgainst(x,y))", "all x.((StJohnstone(x) & Minsk(x)) -> Wins(x))", "(WinsAgainstMinsk(StJohnstone,Minsk))", "StJohnstoneWonAgainstMinsk(StJohnstone)", "-(StJohnstone(s) & Minsk(m))", "all x y.((StJohnstone(x) & Minsk(y)) -> Wins(x,y))", "StJohnstone(StJohnstone) & Minsk(Minsk))", "All x.((StJohnstone(x) & Minsk(x)) -> Wins(x))", "StJohnstoneWonAgainstMinsk.", "StJohnstoneWonAgainstMinsk(StJohnstone,Minsk)", "(WinsAgainstMinsk(StJohnstone))", "StJohnstoneWonVictor(StJohnstone,Minsk)", "StJohnstone won against Minsk.", "all x y.((StJohnstone(x) & Minsk(y)) -> WonAgainst(x,y))", "StJohnstoneWonAgainstMinsk."]}
{"id": "folio_train_2366", "nl": "Minsk joined the Scottish Premiership.", "fol": "HasJoinedLeague(Minsk,Scottishpremiership)", "prediction": ["all x.(Minsk(x) -> JoinedScottishPremiership(x))", "Minsk joined ScottishPremiership(Minsk)", "All x y.((Minsk(x) & ScottishPremiership(y)) -> Joined(x,y))", "(JoinsScottishPremiership(Minsk) & ScottishPremiership(Minsk))", "Minsk joined ScottishPremiership(Minsk,Scotland)", "all x.(Minsk(x) -> JoinedScottishPremiership(x))", "Minsk joined ScottishPrimetime(Minsk,Scotland)", "-Mission(Minsk)", "(JoinsScottishPremiership(Minsk))", "Minsk joined the ScottishPremiership.", "Minsk & ScottishPremiership(Minsk)", "Minsk joined ScottishPremiership(Minsk)", "all x.(Minsk(x) -> JoinedScottishPrimaryship(x))", "Minsk joins ScottishPrime Ministership(Minsk,Scotland)", "minsk joined the ScottishPremiership.", "minsk joined ScottishPremiership."]}
{"id": "folio_train_2367", "nl": "No Boeing-737 plane is equipped with more than 300 seats. ", "fol": "all x.(IsBoeing737(x) -> -HasMoreThan300Seats(x))", "prediction": ["-exists x.(Boeing737(x) & Seats(x,300))", "-exists x.(Boeing737Plane(x) & EquippedWithMoreThan300Seats(x))", "all x.(Boeing737(x) -> -EquipmentWithMoreThan300Seats(x))", "(exists x.(Boeing737Plane(x) & Seats(x,300)))", "Keine Boeing737 plane is equippedWithMoreThan300Seats(x))", "all x.(Boeing737(x) -> -HasMoreThan300Seats(x))", "-exists x.(Boeing737(x) & Seats(x,300))", "Keine Boeing737Plane(x) & EquippedWithMoreThan300Seats(x))", "-exists x.(Boeing737(x) & EquippedWithMoreThan300Seats(x))", "(exists x.(Boeing737(x) & Seats(x,300)))", "Keine Boeing737 plane is equippedWithMoreThan300Seats(ke))", "-exists x.(Birthday737Plane(x) & EquippedWithMoreThan300Seats(x))", "-exists x.(Boeing737Plane(x) & Seats(x,300))", "-exists x.(Boeing737Plane(x) & EquippedWithMoreThan300Seats(x))", "-exists x.(Boeing737(x) & Seat(x,300))", "-exists x.(Boeing737(x) & EquippedWithMoreThan(x,300))"]}
{"id": "folio_train_2368", "nl": "All planes in Delta are of type Boeing-737. ", "fol": "all x.(IsInDelta(x) -> IsBoeing737(x))", "prediction": ["all x.(Delta(x) -> Boeing737(x))", "(all x.(DeltaPilot(x) -> Boeing737(x))", "all x.((Plane(x) & Delta(x)) -> Boeing737(x))", "all x.(DeltaPilot(x) -> Boeing737(x))", "all x.(Delta(x) -> Boeing737(x))", "all x y.((Plane(x) & Delta(y)) -> Boeing737(x))", "(all x.(DeltaPlanet(x) -> Boeing737(x))", "all x y.((Plane(x) & Delta(y) & TypeBoeing737(x)) -> TypeBoeing737(x))", "all x.((Plane(x) & Delta(x)) -> Boeing737(x))", "all x.(Delta(x) -> Boeing737(x))", "all x.(DeltaPilot(x) -> Boeing737(x))", "all x y.((Plane(x) & Delta(y)) -> Boeing737(x))", "(all x.(DeltaPilot(x) -> Boeing737(x))", "all x.(DeltaPlane(x) -> Boeing737(x))", "(all x.(DeltaPlanet(x) -> Boeing737))", "all x.(Plane(x) -> Boeing737(x))"]}
{"id": "folio_train_2369", "nl": "Planes are either equipped with more than 300 seats or have a capacity of 100 passengers. ", "fol": "all x.(HasMoreThan300Seats(x) | HasCapacity100Passengers(x))", "prediction": ["all x.(Plane(x) -> (EquivalentToMoreThan300Seats(x) | CapacityTo100Passengers(x)))", "all x.(Plane(x) -> ((EquivalentToMoreThan300Seats(x) | CapacityTo100Passengers(x))))", "all x y.((Plane(x) & Seats(y) & Seats(y)) -> (EquivalentTo(x,y) & (MoreThan(x,y) | CapacityTo(x,y))))", "(all x.(Plane(x) -> (HasSeats(x,300) | Capacity(x,100))))", "all x.(Plane(x) -> (Equipment(x,300) | Capacity(x,100)))", "all x y.(Plane(x) -> ((EquivalentToMoreThan300Seats(x,y) | CapacityToMoreThan100Passengers(x,y))))", "all x.(Plane(x) -> ((EquipmentMoreThan300Seats(x) | CapacityMoreThan100Passengers(x))))", "(all x.(Plane(x) -> (HasSeats(x,300) | HasCapacity(x,100))))", "all x y.(Plane(x) -> (Equipment(x,y) & (MoreThan(y,300) | Capacity(x,y,100))))", "all x.(Plane(x) -> (EquivalentToMoreThan(x,300) | CapacityToMoreThan(x,100)))", "all x.(Plane(x) -> ((EquivalentToMoreThan300Seats(x) | CapacityToMoreThan100Passengers(x))))", "all x.(Plane(x) -> ((EquivalentToMoreThan300Seats(x) | CapacityTo100Passengers(x))))", "all x.(Plane(x) -> (HasMoreThan300Seats(x) | CapacityAt100Passengers(x)))", "all x.(Plane(x) -> (Equipment(x,300) | Capacity(x,100)))", "all x.(Plane(x) -> ((EquivalentToMoreThan300Seats(x) | CapacityToMoreThan100Passengers(x))))", "all x.(Plane(x) -> ((Equipment(x,300) | Capacity(x,100))))"]}
{"id": "folio_train_2370", "nl": "All planes with a capacity of 100 passengers are scheduled for a short-distance flight. ", "fol": "all x.(HasCapacity100Passengers(x) -> ScheduledForShortDistanceFlight(x))", "prediction": ["all x.((Plane(x) & CapacityOf100Passengers(x)) -> ScheduledForShortDistanceFlight(x))", "all x.((Plane(x) & Capacity(x,100)) -> ScheduledForShortDistanceFlight(x))", "all x.((Pavion(x) & Capacity(x,100)) -> ScheduledForShortDistanceFlight(x))", "all x y.((Plane(x) & Capacity(x,100)) -> ScheduledForShortDistanceFlight(x))", "all x y.((Plane(x) & Capacity(x,y) & Capacity(y,100)) -> ScheduledForShortDistanceFlight(x))", "all x.((Airplane(x) & CapacityOf100Passengers(x)) -> ScheduledForShortDistanceFlight(x))", "all x.((Plane(x) & CapacityOf100Passengers(x)) -> ScheduledForShortDistanceFlight(x))", "all x.((Plane(x) & Capacity(x,100)) -> ScheduledForShortDistanceFlight(x))", "all x.((Pavion(x) & Capacity(x,100)) -> ScheduledForShortDistanceFlight(x))", "all x y.((Plane(x) & Capacity(x,100)) -> ScheduledForShortDistanceFlight(x))", "all x y.((Plane(x) & CapacityOf100Passengers(x) & ShortDistanceFlight(y)) -> ScheduledFor(x,y))", "all x.((Plane(x) & CapacityOf100Passengers(x)) -> ScheduledForShortDistanceFlight(x))", "all x.((Airplane(x) & CapacityOf100Passengers(x)) -> ScheduledForShortDistanceFlight(x))", "(all x.((Plane(x) & Capacity(x,100)) -> ScheduledForShortDistance(x))", "all x.((Plane(x) & Capacity(x,100)) -> ScheduledForShortDistanceFlight(x))", "all x.((Pace(x) & Capacity(x,100)) -> ScheduledForShortDistance(x))"]}
{"id": "folio_train_2371", "nl": "All planes with a capacity of 100 passengers are produced before 2010. ", "fol": "all x.(HasCapacity100Passengers(x) -> ProducedBefore2010(x))", "prediction": ["all x.((Plane(x) & Capacity(x,100)) -> ProducedBefore2010(x))", "all x.((Plane(x) & CapacityOf100Passengers(x)) -> ProducedBefore2010(x))", "all x y.((Plane(x) & Capacity(x,100)) -> ProducedBefore2010(x))", "all x.((Pavion(x) & Capacity(x,100)) -> ProducedBefore2010(x))", "all x.((Plane(x) & Capacity(x,100)) -> ProducedBefore2010(x))", "all x.((Airplane(x) & CapacityOf100Passengers(x)) -> ProducedBefore2010(x))", "all x.((Plane(x) & CapacityOf100Passengers(x)) -> ProducedBefore2010(x))", "all x y.((Plane(x) & Capacity(y,100)) -> ProducedBefore2010(x))", "all x y.((Plane(x) & Capacity(x,y) & Capacity(y,100)) -> ProducedBefore2010(x))", "(all x.((Plane(x) & Capacity(x,100)) -> ProducedBefore2010(x))", "all x.((Panel(x) & CapacityOf100Passengers(x)) -> ProducedBefore2010(x))", "all x y.((Plane(x) & Capacity(y,100Passengers) & CanFacility(y,100Passengers)) -> ProducedBefore2010(x))", "all x.((Plane(x) & Capacity(x,100)) -> ProducedBefore2010(x))", "(all x.((Plane(x) & Capacity(x,100)) -> ProducedBefore2010(x))", "all x.((Plane(x) & CapacityOf100Passengers(x)) -> ProducedBefore2010(x))", "all x.((Plane(x) & Capacity(x,100)) -> ProducedBefore2010(x))"]}
{"id": "folio_train_2372", "nl": "Jake32 is either a Boeing-737 plane or a plane in Delta. ", "fol": "((IsBoeing737(Jake32) & -IsInDelta(Jake32)) | (-IsBoeing737(Jake32) & IsInDelta(Jake32)))", "prediction": ["all x.(Jake32(x) -> (Boeing737Plane(x) | DeltaPlane(x)))", "(Boeing737Plane(Jake32) | DeltaPlane(Jake32))", "(Boeing737(jake32) | DeltaPlane(jake32))", "all x.(Jake32(x) -> (Boeing737Plane(x) | DeltaPlane(x)))", "(Boeing737Plane(jake32) | DeltaPlane(jake32))", "all x.(Jake32(x) -> (Boeing737(x) | DeltaPlane(x)))", "all x.((Jake32(x) & Boeing737(x)) | DeltaPlane(x))", "all x y.((Jake32(x) & Boeing737(y)) | DeltaPlane(x)) -> Airplane(x))", "(Boeing737(Jake32) | DeltaPlane(Jake32))", "all x.(Jake32(x) -> (Boeing737Plane(x) | DeltaPlane(x)))", "(Boeing737Plane(Jake32) | DeltaPlane(Jake32))", "(Boeing737(jake32) | DeltaPlane(jake32))", "all x.(Jake32(x) -> (Boeing737Plane(x) | DeltaPlane(x)))", "all x.(Jake32(x) -> (Boeing737(x) | DeltaPlane(x)))", "all x.(Jake32(x) -> (Boeing737Plane(x) | DeltaPlane(x)))", "exists x.(Jake32(x) & (Boeing737(x) | Delta(x)))"]}
{"id": "folio_train_2373", "nl": "T10 is either a Boeing-737 plane and in Delta, or neither a Boeing-737 plane nor in Delta. ", "fol": "((IsBoeing737(T10) & -IsInDelta(T10)) | (-IsBoeing737(T10) & IsInDelta(T10)))", "prediction": ["all x.(T10(x) -> ((Boeing737Plane(x) & Delta(x)) | (-Boeing737Plane(x) & Delta(x)))))", "(Boeing737Plane(T10) | DeltaPlane(T10)))", "(all x.(T10(x) -> (Boeing737Plane(x) & DeltaPlane(x)) | (-Boeing737Plane(x) & DeltaPlane(x)))))", "all x.(T10(x) -> (Boeing737Plane(x) & DeltaPlane(x)) | (-Boeing737Plane(x) & DeltaPlane(x))))", "(Boeing737Plane(T10) | Boeing737Plane(T10) | DeltaPlane(T10)))", "all x y.(T10(x) -> (Boeing737Plane(x) & DeltaPlane(y) & -Boeing737Plane(x) & DeltaPlane(x)))", "((Boeing737Plane(T10) & Delta(T10)) | (-Boeing737Plane(T10) & Delta(T10))))", "all x.(T10(x) -> (Boeing737Plane(x) | DeltaPlane(x) | -Boeing737Plane(x) & DeltaPlane(x)))", "(all x.(T10(x) -> (Boeing737(x) & Delta(x)) | (-Boeing737(x) & Delta(x))))", "all x.(T10(x) -> ((Boeing737Plane(x) & Delta(x)) | (-Boeing737Plane(x) & Delta(x))))", "all x y.(T10(x) -> (Boeing737Plane(x) & DeltaPlane(y) & -Boeing737Plane(x) & DeltaPlane(x) & DeltaPlane(y)))", "(all x.(T10(x) -> (Boeing737Plane(x) & DeltaPlane(x)) | (-Boeing737Plane(x) & DeltaPlane(x))))", "(Boeing737Plane(T10) | DeltaPlane(T10)))", "all x.(T10(x) -> ((Boeing737Plane(x) & Delta(x)) | -Boeing737Plane(x) & Delta(x)))", "exists x.(T10(x) & ((Boeing(x) & Boeing(x) & Delta(x)) | (-Boeing(x) & Delta(x))))", "exists x.(T10(x) & ((Boeing737Plane(x) & Delta(x)) | -Boeing737Plane(x) & Delta(x))))"]}
{"id": "folio_train_2374", "nl": "Jake32 was produced before 2010 and is scheduled for a short-distance flight.", "fol": "(ProducedBefore2010(Jake32) & ScheduledForShortDistanceFlight(Jake32))", "prediction": ["all x.(Jake32(x) -> (ProducedBefore2010(x) & ScheduledForShortDistanceFlight(x)))", "(ProducedBefore2010(Jake32) & ScheduledForShortDistanceFlight(Jake32))", "all x y.((Jake32(x) & ProducedBefore2010(x) & ShortDistanceFlight(y)) -> ScheduledFor(x,y))", "all x.((Jake32(x) & ProducedBefore2010(x)) -> ScheduledForShortDistanceFlight(x))", "all x y.((Jake32(x) & Production(y)) -> (ProducedBefore2010(x,y) & ScheduledForShortDistanceFlight(x,y)))", "all x.(Jake32(x) -> (ProducedBefore2010(x) & ScheduledForShortDistanceFlight(x)))", "(ProducedBefore2010(Jake32) & ScheduledForShortDistanceFlight(Jake32))", "(ProducedBefore2010(jake32) & ScheduledForShortDistanceFlight(jake32))", "all x.((Jake32(x) & ProducedBefore2010(x)) -> ScheduledForShortDistanceFlight(x))", "(ProducedBefore2010(Jake32) & ScheduledForShortDistanceFlight(Jake32))", "all x.(Jake32(x) -> (ProducedBefore2010(x) & ScheduledForShortDistanceFlight(x)))", "(ProducedBefore2010(jake32) & ScheduledForShortDistanceFlight(jake32))", "all x.(Jake32(x) -> (ProducedBefore2010(x) & ScheduledForShortDistance(x)))", "all x.(Jake32(x) -> (ProducedBefore(x,2010) & ScheduledForShortDistanceFlight(x)))", "all x.((Jake32(x) & ProducedBefore2010(x) & ScheduledForShortDistanceFlight(x)) -> ProducedBefore2010(x))", "(ProducedBefore2010(Jake32) & ScheduledForShortDistanceFlight(Jake32))"]}
{"id": "folio_train_2375", "nl": "Jake32 is not produced before 2010 and is not scheduled for a short-distance flight.", "fol": "(-ProducedBefore2010(Jake32) & -ScheduledForShortDistanceFlight(Jake32))", "prediction": ["all x.(Jake32(x) -> (-ProducedBefore2010(x) & -ScheduledForShortDistanceFlight(x)))", "all x.((Jake32(x) & -ProducedBefore2010(x) & -ScheduledForShortDistanceFlight(x)) -> -ProducedBefore2010(x))", "(-ProducedBefore2010(Jake32) & -ScheduledForShortDistanceFlight(Jake32))", "-(ProducedBefore2010(Jake32) & -ScheduledForShortDistanceFlight(Jake32))", "all x.((Jake32(x) & -ProducedBefore2010(x)) -> -ScheduledForShortDistanceFlight(x))", "all x y.((Jake32(x) & Production(y)) -> (-ProducedBefore2010(x,y) & -ScheduledForShortDistanceFlight(x)))", "all x.(Jake32(x) -> (-ProducedBefore2010(x) & -ScheduledForShortDistanceFlight(x)))", "(-ProducedBefore2010(Jake32) & -ScheduledForShortDistanceFlight(Jake32))", "(-ProducedBefore2010(jake32) & -ScheduledForShortDistanceFlight(jake32))", "all x.((Jake32(x) & -ProducedBefore2010(x) & -ScheduledForShortDistance(x)) -> -ProducedBefore2010(x))", "(-ProducedBefore2010(Jake32) & -ScheduledForShortDistance(Jake32))", "all x.(Jake32(x) -> (-ProducedBefore2010(x) & -ScheduledForShortDistance(x)))", "(-ProducedBefore2010(jake32) & -ScheduledForShortDistanceFlight(jake32))", "all x.((Jake32(x) & -ProducedBefore2010(x)) -> -ScheduledForShortDistanceFlight(x))", "(-ProducedBefore2010(Jake32) & -ScheduledForShortDistanceFlight(Jake32))", "all x.(Jake32(x) -> (-ProducedBefore2010(x) & -ScheduledForShortDistanceFlight(x)))"]}
{"id": "folio_train_2376", "nl": "Jake32 is produced before 2010 or scheduled for a short-distance flight.", "fol": "(ProducedBefore2010(Jake32) | ScheduledForShortDistanceFlight(Jake32))", "prediction": ["all x.(Jake32(x) -> (ProducedBefore2010(x) | ScheduledForShortDistanceFlight(x)))", "all x.((Jake32(x) & (ProducedBefore2010(x) | ScheduledForShortDistanceFlight(x))) -> ProducedBefore2010(x))", "(ProducedBefore2010(Jake32) | ScheduledForShortDistanceFlight(Jake32))", "all x y.((Jake32(x) & (ProducedBefore(x,y) | ScheduledForShortDistanceFlight(x,y))) -> ProducedBefore(x,y))", "all x.(Jake32(x) -> (ProducedBefore2010(x) | ScheduledForShortDistanceFlight(x)))", "(ProducedBefore2010(Jake32) | ScheduledForShortDistanceFlight(Jake32))", "all x y.((Jake32(x) & (ProducedBefore(x,y) | ScheduledForShortDistance(x,y))) -> ProducedBefore(x,y))", "all x.((Jake32(x) & (ProducedBefore2010(x) | ScheduledForShortDistanceFlight(x))) -> ProducedBefore2010(x))", "(ProducedBefore2010(jake32) | ScheduledForShortDistanceFlight(jake32))", "all x.(Jake32(x) -> (ProducedBefore(x,2010) | ScheduledForShortDistanceFlight(x,2010)))", "all x.((Jake32(x) & (ProducedBefore2010(x) | ScheduledForShortDistance(x))) -> ProducedBefore2010(x))", "all x y.((Jake32(x) & (ProducedBefore(x,y) | ScheduledForShortDistanceFlight(x,y))) -> ProducedBefore(x,y))", "all x.(Jake32(x) -> (ProducedBefore2010(x) | ScheduledForShortDistanceFlight(x)))", "all x.((Jake32(x) & (ProducedBefore2010(x) | ScheduledForShortDistanceFlight(x))) -> ProducedBefore2010(x))", "exists x.(Jake32(x) & (ProducedBefore(x,2010) | ScheduledForShortDistance(x,2010)))", "exists x.(Jake32(x) & (ProducedBefore(x,2010) | ScheduledForShortDistance(x)))"]}
{"id": "folio_train_2377", "nl": "Jake32 is neither produced before 2010 nor scheduled for a short-distance flight.", "fol": "(-ProducedBefore2010(Jake32) & -ScheduledForShortDistanceFlight(Jake32))", "prediction": ["all x.(Jake32(x) -> (-ProducedBefore2010(x) & -ScheduledForShortDistanceFlight(x)))", "(-(ProducedBefore2010(Jake32) & -ScheduledForShortDistanceFlight(Jake32)) -> -ProducedBefore2010(Jake32))", "all x.((Jake32(x) & -ProducedBefore2010(x) & -ScheduledForShortDistanceFlight(x)) -> -ProducedBefore2010(x))", "(-ProducedBefore2010(Jake32) & -ScheduledForShortDistanceFlight(Jake32))", "((ProducedBefore2010) & -ScheduledForShortDistanceFlight(Jake32)) -> -ProducedBefore2010(Jake32))", "all x.(Jake32(x) -> (-ProducedBefore2010(x) & -ScheduledForShortDistanceFlight(x)))", "(-(ProducedBefore2010(Jake32) & -ScheduledForShortDistanceFlight(Jake32)) -> -ProducedBefore2010(Jake32))", "all x.((Jake32(x) & -ProducedBefore2010(x) & -ScheduledForShortDistanceFlight(x)) -> -ProducedBefore2010(x))", "(-ProducedBefore2010(Jake32) & -ScheduledForShortDistanceFlight(Jake32))", "all x.(Jake32(x) -> (-ProducedBefore2010(x) & -ScheduledForShortDistanceFlight(x)))", "-(ProducedBefore2010(jake32) | ScheduledForShortDistanceFlight(jake32))", "-(ProducedBefore2010(Jake32) & -ScheduledForShortDistance(Jake32))", "all x.((Jake32(x) & -ProducedBefore2010(x) & -ScheduledForShortDistance(x)) -> -ProducedBefore2010(x))", "-(ProducedBefore2010(Jake32) & -ScheduledForShortDistance(Jake32))", "all x.(Jake32(x) -> (-ProducedBefore2010(x) & -ScheduledForShortDistance(x)))", "all x.(Jake32(x) -> (-ProducedBefore2010(x) & -ScheduledForShortDistanceFlight(x)))"]}
{"id": "folio_train_2378", "nl": "The SAT test is wholly owned and developed by the College Board.", "fol": "all x.(-IsCollegeBoard(x) -> -IsOwnedBy(Sat,x))", "prediction": ["all x.(SATTest(x) -> (OwnedByCollegeBoard(x) & DevelopedByCollegeBoard(x)))", "all x y.((SATTest(x) & CollegeBoard(y)) -> OwnedAndDevelopedBy(x,y))", "(All x.(SATTest(x) -> OwnedByCollegeBoard(x)) & DevelopedByCollegeBoard(x))", "all x y z.((SATTest(x) & CollegeBoard(y) & CollegeBoard(z)) -> (OwnedBy(x,y) & DevelopedBy(x,z)))", "all x.(SATTest(x) -> (OwnedByCollegeBoard(x) & DevelopedByCollegeBoard(x)))", "all x y.((SATTest(x) & CollegeBoard(y)) -> OwnedAndDevelopedBy(x,y))", "all x y.((SATTest(x) & CollegeBoard(y)) -> (OwnedBy(x,y) & DevelopedBy(x,y)))", "(All x.(SATTest(x) -> Owned(x) & DevelopedByCollegeBoard(x)))", "all x y z.((SATTest(x) & CollegeBoard(y) & CollegeBoard(z)) -> (OwnedBy(x,y) & DevelopedBy(x,z)))", "all x.(SATTest(x) -> (OwnedByCollegeBoard(x) & DevelopedByCollegeBoard(x)))", "(All x.(SATTest(x) -> OwnedAndDevelopedByCollegeBoard(x))", "All x.(SATTest(x) -> OwnedAndDevelopedByCollegeBoard(x))", "all x.(SATTest(x) -> (OwnedByCollegeBoard(x) & DevelopedByBoard(x)))", "all x y.((SATTest(x) & CollegeBoard(y)) -> OwnedAndDevelopedBy(x,y))", "All x.(SATTest(x) -> OwnedAndDevelopedByCollegeBoard(x))", "All x.(SATTest(x) -> (Owned(x) & DevelopedByCollegeBoard(x)))"]}
{"id": "folio_train_2379", "nl": "The SAT test is intended to assess student's readiness for college.", "fol": "IntendedToAssess(Sat,StudentReadiness)", "prediction": ["all x.(SATTest(x) -> AssessesStudentRequirementForCollege(x))", "all x y.((SATTest(x) & Student(y)) -> AssessesReadinessForCollege(x,y))", "(IntendedToAssessesStudentRequirementForCollege(SATTest)", "(AssesStudentRequirementForCollege(SATTest) -> IntendedToAssesse(SATTest))", "(All x.(SATTest(x) -> AssessesStudentRequirementForCollege(x)))", "all x.(SATTest(x) -> AssessesStudentReadinessForCollege(x))", "theSATTestIntendedToAssessesStudentRequirementForCollege(SAT)", "(IntendedToAssessesStudentReadinessForCollege(SATTest)", "all x y.((SATTest(x) & Student(y)) -> AssessesReadinessForCollege(x,y))", "SAT Test IntendedToAssesStudentRequirementForCollege(SAT)", "all x.(SATTest(x) -> AssessesStudentRequirementForCollege(x))", "all x y.((SATTest(x) & Student(y)) -> AssessesRequirementForCollege(x,y))", "all x.(SATTest(x) -> AssessesStudentReadinessForCollege(x))", "all x y.((SATTest(x) & Student(y)) -> AssessesReadinessForCollege(x,y))", "All x.(SATTest(x) -> AssessmentStudentRequirementForCollege(x))", "all x.(SATTest(x) -> AssessesStudentRequirementForCollege(x))"]}
{"id": "folio_train_2380", "nl": "The SAT was originally designed not to be aligned with high school curricula. ", "fol": "all x.((IsYear(x) & IsBefore2016(x)) -> -IsAlignedWithHighSchool(x))", "prediction": ["all x.(SAT(x) -> -AlignedWithHighSchoolCurricula(x))", "(OriginallyDesigned(SAT) & -AlignedWithHighSchoolCurricula(SAT))", "all x.((SAT(x) & OriginallyDesigned(x)) -> -AlignedWithHighSchoolCurricula(x))", "Originally DesignedNotToBeAlignedWithHighSchoolCurricula(SAT)", "(OriginallyDesignedToBeAlignedWithHighSchoolCurricula(SAT))", "(-AlignedWithHighSchoolCurricula(SAT))", "all x y.((SAT(x) & HighSchoolCurricula(y)) -> -Aligned(x,y))", "all x.(SAT(x) -> (OriginallyDesigned(x) & -AlignedWithHighSchoolCurricula(x)))", "all x.(SAT(x) -> -AlignedWithHighSchoolCurricula(x))", "(originally designed to be -alignedWithHighSchoolCurricula(SAT))", "all x.((SAT(x) & -AlignedWithHighSchoolCurricula(x)) -> OriginallyDesigned(x))", "the original design of the SAT was not aligned with highschoolcurricula.", "Originally DesignedNotToBeAlignedWithHighSchoolCurricula(SAT)", "all x.(Sat(x) -> (OriginallyDesignedNotToBeAlignedWithHighSchoolCurricula(x)))", "All x y.((SAT(x) & HighSchoolCurriculum(y)) -> -AlignedWith(x,y))", "all x.(SAT(x) -> -AlignedWithHighSchoolCurricula(x))"]}
{"id": "folio_train_2381", "nl": "Several adjustments were made for the version of the SAT introduced in 2016 to reflect more closely on what students learn in high school. ", "fol": "all x.((IsYear(x) & IsSince2016(x)) -> IsAlignedWithHighSchool(x))", "prediction": ["all x y.((SAT(x) & Version(y) & IntroducedIn2016(y)) -> ReflectsFacilyOnWhatStudentsLearnInHighSchool(x,y))", "Several adjustments were made for the SAT version introduced in 2016 to reflect more closely on what students learn in high school.", "all x.((SATVersion(x) & IntroducedIn2016(x)) -> ReflectsFacilyOnWhatStudentsLearnInHighSchool(x))", "all x y z.((SAT(x) & Version(y) & IntroducedIn2016(y,2016) & ReflectsFacilyOnWhatStudentsLearnInHighSchool(z)) -> AdjustmentsMadeFor(x,y,z))", "all x y.((SAT(x) & Version(y) & IntroducedIn2016(y,2016)) -> ReflectsFacilyOnWhatStudentsLearnInHighSchool(x,y))", "(AdjustmentsMadeForSAT(A) & IntroducedIn2016(A))", "all x.((SATViolet(x) & IntroducedIn2016(x)) -> ReflectsFacilyOnWhatStudentsLearnInHighSchool(x))", "(AdjustmentsAdjustedForSAT(AdjustedFor2016) & ReflectsFacilyOnWhatStudentsLearnInHighSchool(AdjustedFor2016))", "all x y.((SATViolet(x) & IntroducedIn2016(x) & ReflectsFacilyOnWhatStudentsLearnInHighSchool(y)) -> AdjustmentsMadeFor(x,y))", "((AdjustmentsMadeForSAT(Adjustment) & IntroducedIn2016)) -> ReflectsFacilyOnWhatStudentsLearnInHighSchool(Adjustment))", "Several adjustments were made for the SAT version introduced in 2016 to reflect more closely on what students learn in high school.", "all x y z.((SAT(x) & Version(y) & HighSchool(z)) -> (Adjustments(x,y) & ReflectsFacilyOnWhatStudentsLearn(x,z)))", "(exists x.(SAT(x) & IntroducedIn2016(x)) & ReflectsFacilyOnWhatStudentsLearnInHighSchool(x))", "(AdjustmentsMadeForSAT(a) & IntroducedIn2016(a) & ReflectsFacilyOnWhatStudentsLearnInHighSchool(a))", "all x.((SATVersion(x) & IntroducedIn2016(x)) -> ReflectsFacilyOnWhatStudentsInHighSchool(x))", "exists x.(Adjustment(x) & UpdatedForSAT(x) & IntroducedIn2016(x) & ReflectsFacilyOnWhatStudentsLearnInHighSchool(x))"]}
{"id": "folio_train_2382", "nl": "Since 2016 the SAT has been better aligned with high school curricula.", "fol": "all x.((IsYear(x) & IsSince2016(x)) -> IsAlignedWithHighSchool(x))", "prediction": ["all x.((SAT(x) & AlignedWithHighSchoolCurricula(x)) -> BetterAligned(x))", "all x y.((SAT(x) & HighSchoolCurricula(y)) -> BetterAligned(x,y))", "(BetterAlignedWithHighSchoolCurricula(SAT,2016))", "all x.((SAT(x) & HighSchoolCurricula(x)) -> BetterAligned(x,y))", "since 2016 the SAT has been better aligned with highschoolcurricula.", "the highschoolcurricula.(Sat(Sat) & AlignedWithCurricula(Sat))", "all x y z.((SAT(x) & HighSchoolCurriculum(y) & 2016(z)) -> BetterAligned(x,y,z))", "all x y.((SAT(x) & HighSchoolCurriculum(y)) -> BetterAligned(x,y))", "(BetterAlignedWithHighSchoolCurricula(SAT,2016))", "all x.((SAT(x) & AlignedWithHighSchoolCurricula(x)) -> BetterAligned(x))", "SAT(Sat) & AlignedWithHighSchoolCurricula(Sat,2016))", "all x.((SAT(x) & HigherSchoolCurriculum(x)) -> BetterAligned(x))", "all x y.((SAT(x) & HighSchoolCurricula(y)) -> BetterAligned(x,y))", "(BetterAlignedWithHighSchoolCurricula(SAT,2016))", "all x y.((SAT(x) & HighSchoolCurriculum(y)) -> BetterAlignedWith(x,y))", "all x.((SAT(x) & HighSchoolCurricula(x)) -> BetterAligned(x,2016))"]}
{"id": "folio_train_2383", "nl": "The SAT test is owned by the College Board and multiple other third parties.", "fol": "exists x.(-IsCollegeBoard(y) & IsOwnedBy(Sat,y))", "prediction": ["all x.(SATTest(x) -> (OwnedByCollegeBoard(x) & OwnedByMultipleThirdParties(x)))", "all x y.((SATTest(x) & CollegeBoard(y)) -> OwnedBy(x,y))", "(OwnedByCollegeBoard(SATTest) & OwnedByMultipleThirdParties(SATTest))", "(All x.(SATTest(x) -> OwnedByCollegeBoard(x)) & exists y.(CollegeBoard(y) & OwnedBy(x,y))))", "all x y z.((SATTest(x) & CollegeBoard(y) & MultipleThirdParties(z)) -> OwnedBy(x,y,z))", "all x.(SATTest(x) -> (OwnedByCollegeBoard(x) & OwnedByMultipleThirdParties(x)))", "all x y.((SATTest(x) & CollegeBoard(y)) -> OwnedBy(x,y))", "(OwnedByCollegeBoard(SATTest) & OwnedByMultipleThirdParties(SATTest))", "All x y z.((SATTest(x) & CollegeBoard(y) & ThirdParty(z)) -> OwnedBy(x,y,z))", "exists x.(SATTest(x) & OwnedBy(x,CompanyBoard) & OwnedBy(x,MultipleThirdParties))", "(OwnedByCollegeBoardAndMultipleThirdParties(SATTest))", "all x.(SATTest(x) -> (OwnedByCollegeBoard(x) & OwnedByMultipleOtherParties(x)))", "(OwnedByCollegeBoard(SATTest) & OwnedByMultipleOtherParties(SATTest))", "all x y.((SATTest(x) & CollegeBoard(y)) -> OwnedBy(x,y))", "all x.(SATTest(x) -> (OwnedByCollegeBoard(x) & OwnedByMultipleThirdParties(x)))", "all x.(SATTest(x) -> (OwnedByCollegeBoard(x) & OwnedByMultipleOtherParties(x)))"]}
{"id": "folio_train_2384", "nl": "The SAT test assesses student's math skills.", "fol": "Assesses(Sat,MathSkills)", "prediction": ["all x.(SATTest(x) -> AssessesMathSkills(x))", "all x y.((SATTest(x) & Student(y)) -> AssessesMathSkills(x,y))", "(AssesMathSkills(SATTest)", "(AssessesMathSkills(SATTest))", "all x.(SATTest(x) -> AssessesMathSkills(x))", "all x.(SATTest(x) -> AssessesStudentMathSkills(x))", "all x y.((SATTest(x) & Student(y)) -> AssessesMathSkills(x,y))", "theSATTestAssessesMathSkills(SATTest)", "(AssessesMathSkills(SATTest))", "(AssesMathSkills(SATTest)", "all x y.((SATTest(x) & Student(y)) -> AssessesMathSkills(x,y))", "all x.(SATTest(x) -> AssessesMathSkills(x))", "all x.(SATTest(x) -> AssessesStudentMathSkills(x))", "all x y.((SATTest(x) & Student(y)) -> AssessesMathSkills(x,y))", "all x.(SATTest(x) -> AssessesMathematicsSkills(x))", "all x.(SATTest(x) -> AssessesStudentMathSkills(x))"]}
{"id": "folio_train_2385", "nl": "Rafa Nadal was born in Mallorca.", "fol": "BornInLocation(RafaNadal,Mallorca)", "prediction": ["Rafa Nadal was born in Mallorca.", "(Birth(RafaNadal,Mallorca))", "Rafa Nadal was born in Mallorca.", "(Birth(Rafa Nadal,Mallorca))", "Rafa Nadal was born in Mallorca.", "RafaNadal was bornInMallorca.", "Rafa Nadal (bornInMallorca)", "Rafa Nadal was born in Mallorca.", "RafaNadal was born in Mallorca.", "Rafa Nadal (bornInMallorca)", "RafaNadal was bornInMallorca.", "Rafa Nadal was born in Mallorca.", "Rafa Nadal (bornInMallorca)", "RafaNadal was born in Mallorca.", "Rafa Nadal was born in Mallorca.", "Rafa Nadal was born in Mallorca."]}
{"id": "folio_train_2386", "nl": "Rafa Nadal is a professional tennis player.", "fol": "IsProfessionalTennisPlayer(RafaNadal)", "prediction": ["(ProfessionalTennisPlayer(RafaNadal))", "Rafa Nadal is a professional tennis player.", "all x.(RafaNadal(x) -> ProfessionalTennisPlayer(x))", "all x.((RafaNadal(x) & ProfessionalTennisPlayer(x)) -> Professional(x))", "Rafa Nadal (ProfessionalTennisPlayer)", "(ProfessionalTennisPlayer(RafaNadal))", "Rafa Nadal is a professional tennis player.", "Rafa Nadal (Rafa) & ProfessionalTennisPlayer(Rafa))", "all x.(RafaNadal(x) -> ProfessionalTennisPlayer(x))", "all x.((RafaNadal(x) & ProfessionalTennisPlayer(x)) -> Professional(x))", "RafaNadal is a professional tennis player.", "(ProfessionalTennisPlayer(RafaNadal)", "Rafa Nadal is a professional tennis player.", "(ProfessionalTennisPlayer(RafaNadal)", "(ProfessionalTennisPlayer(Rafa Nadal)", "(ProfessionalTennisPlayer(RafaNadal)"]}
{"id": "folio_train_2387", "nl": "Nadal's win ratio is higher than 80%.", "fol": "HasHighWinRatio(RafaNadal)", "prediction": ["all x.(Nadal(x) -> WinRatioHigherThan80%(x))", "Nadal's WinRatioHigherThan80%(Nadal)", "(WinRatio(Nadal) -HigherThan80%(Nadal))", "-80%WinRatio(Nadal)", "-WinRatio(Nadal,80%)", "all x y.((Nadal(x) & WinRatio(y,x)) -> HigherThan80%(x,y))", "Nadal's WinRatioHigherThan80%(n))", "all x.(Nadal(x) -> WinRatioHigherThan80%(x))", "(WinRatio(Nadal,80%))", "Nadal's WinRatio(Nadal) -HigherThan80%(Nadal))", "-80%WinRatio(Nadal)", "Nadal's win ratio is higher than 80%.", "Nadal's WinRatioHigherThan80%.", "All x.(Nadal(x) -> WinRatioHigherThan80%(x))", "(WinRatio(Nadal,80%))", "(WinRatio(Nadal,80%))"]}
{"id": "folio_train_2388", "nl": "All players in the Big 3 are professionals who have a high win ratio.", "fol": "all x.((IsProfessionalTennisPlayer(x) & HasHighWinRatio(x)) -> IsInBig3(x))", "prediction": ["all x.(Big3(x) -> (Professional(x) & HighWinRatio(x)))", "all x.(Big3Player(x) -> (Professional(x) & HighWinRatio(x)))", "all x.((Player(x) & Big3(x)) -> Professional(x) & HighWinRatio(x))", "all x.((Player(x) & Big3(x)) -> (Professional(x) & HighWinRatio(x)))", "all x y.((Player(x) & Big3(y)) -> (Professional(x,y) & HighWinRatio(x,y)))", "all x.(Big3(x) -> (Professional(x) & HighWinRatio(x)))", "(all x.(Big3Player(x) -> Professional(x)) & HighWinRatio(x))", "all x.(Big3Player(x) -> (Professional(x) & HighWinRatio(x)))", "all x y.((Player(x) & Big3(y)) -> (Professional(x,y) & HighWinRatio(x,y)))", "all x.((Player(x) & Big3(x)) -> Professional(x))", "(all x.(Big3Person(x) -> Professional(x)) & HighWinRatio(x))", "all x.((Player(x) & Big3(x)) -> (Professional(x) & HighWinRatio(x)))", "all x.(Big3(x) -> (Professional(x) & HighWinRatio(x)))", "all x.(Battle3(x) -> (Professional(x) & HighWinRatio(x)))", "all x y.((Player(x) & Big3(y)) -> (Professional(x,y) & HighWinRatio(x,y)))", "all x.(Big3Player(x) -> (Professional(x) & HighWinRatio(x)))"]}
{"id": "folio_train_2389", "nl": "Nadal was not born in Mallorca.", "fol": "-BornInLocation(RafaNadal,Mallorca)", "prediction": ["-BirthInMallorca(Nadal)", "Nadal -BirthInMallorca(Nadal))", "Nadal n'est pas born in Mallorca.", "(Birth(Nadal) & -Birth(Nadal))", "-(BirthInMallorca(Nadal))", "-(Nadal(n) & BornInMallorca(n)))", "Nadal was born in Mallorca.", "-BirthInMallorca(Nadal)", "Neal was born in Mallorca.", "(Nadal(Nadal) & BornInMallorca(Nadal))", "-BirthInMallorca(Nadal)", "Nadal -BirthInMallorca(n)", "Nadal was born in Mallorca.", "-BirthInMallorca(Nadal,Mallorca)", "Nadal nas a lias.", "Nadal was notbornInMallorca."]}
{"id": "folio_train_2390", "nl": "Nadal is in the Big 3.", "fol": "IsInBig3(RafaNadal)", "prediction": ["Nadal is in Big3.", "All x.(Nadal(x) -> Big3.", "(Baby3) & Nadal(Nadal))", "Nadal is in the Big3.", "(InBig3) & Nadal(Nadal))", "Nadal (Nadal) & Big3(Nadal))", "(Big3) & Nadal(Nadal))", "All x.(Nadal(x) -> Big3.", "Nadal is in Big3.", "Nadal is in Big3(Nadal)", "Nadal is in the Big3(Nadal,Big3))", "Nadal is in the Big3.", "all x.(Nadal(x) -> Big3.", "Nadal (Nadal) & Big3.", "Nadal in Big3.", "Nadal is in Big3."]}
{"id": "folio_train_2391", "nl": "Nadal is the greatest player of all time.", "fol": "GreatestPlayerOfAllTime(RafaNadal)", "prediction": ["All x.(Nadal(x) -> GreatestPlayerOfAllTime(x))", "-GreatestPlayerOfAllTime(Nadal)", "-(Nadal(n) & GreatestPlayer(n)))", "(GreatestPlayer(Nadal) & -GreatestPlayer(Nadal))", "Nadal is the greatestPlayerOfAllTime(Nadal,SixThan(Nadal))", "Nadal is the greatest player of all time.", "Nadal is greatestPlayerOfAllTime(Nadal)", "all x.(Nadal(x) -> GreatestPlayerOfAllTime(x))", "Nadal (GreatestPlayer(n) & AllTime(n))", "(GreatestPlayer(Nadal) & AllTime(Nadal))", "Nadal is the greatestPlayerOfAllTime(n)", "All x.(Nadal(x) -> GreatestPlayer(x))", "all x.(Nadal(x) -> GreatestPlayerOfTime(x))", "Nadal ist der gr\u00f6\u00dfte PlayerOfAllTime.", "Nadal is the greatestplayerofalltime.", "All x.(Nadal(x) -> GreatestPlayer(x))"]}
{"id": "folio_train_2392", "nl": "No cookie is healthy.", "fol": "all x.(IsCookie(x) -> -IsHealthy(x))", "prediction": ["-exists x.(Cookie(x) & Healthy(x))", "(exists x.(Cookie(x) & Healthy(x)) & -exists y.(Cookie(y) & Healthy(y))))", "-exists x.(Cookie(x) & Healthy(x))", "-(Cookie(x) & Healthy(x))", "-exists x.(Cookie(x) & Healthy(x))", "all x.(Cookie(x) -> -Healthy(x))", "KeenCookie(ke) & Healthy(ke))", "-(Cookie(x) & Healthy(x))", "-exists x.(Cookie(x) & Healthy(x))", "all x.(Cookie(x) -> -Healthy(x))", "-exists x.(Cookie(x) & Healthy(x))", "all x.(Cookie(x) -> -Healthy(x))", "-exists x.(Cookie(x) & Healthy(x))", "-exists x.(Cookie(x) & Healthy(x))", "-exists x.(Cookie(x) & Healthy(x))", "-exists x.(Cookie(x) & Healthy(x))"]}
{"id": "folio_train_2393", "nl": "All oreos are cookies.", "fol": "all x.(IsOreo(x) -> IsCookie(x))", "prediction": ["all x.(Oreo(x) -> Cookies(x))", "all x.(Oreo(x) -> Cookie(x))", "(all x.(Oreo(x) -> Cookies(x))", "all x y.((Oreo(x) & Cookie(y)) -> Cookie(x))", "all x.(Oreo(x) -> Cookies(x))", "(all x.(Oreo(x) -> Cookies(x))", "all x.(Oreo(x) -> Cookie(x))", "all x.(Oreo(x) -> Cookies(x))", "all x.(Oreo(x) -> Cookie(x))", "all x.(Oreo(x) -> Cookies(x))", "all x.(Oreo(x) -> Cookie(x))", "all x.(Oreo(x) -> Cookie(x))", "all x.(Oreo(x) -> Cookies(x))", "all x.(Oreo(x) -> Cookie(x))", "all x.(Oreo(x) -> Cookie(x))", "all x.(Oreo(x) -> Cookies(x))"]}
{"id": "folio_train_2394", "nl": "All cookies are delicious.", "fol": "all x.(IsCookie(x) -> Delicious(x))", "prediction": ["all x.(Cookie(x) -> Delicious(x))", "all x.(Cookie(x) -> Delicious(x))", "(all x.(Cookie(x) -> Delicious(x)))", "all x.(Cookie(x) -> Delicious(x))", "all x y.((Cookie(x) & Cookie(y)) -> Delicious(x))", "(DeliciousCookie(cookies)", "all x.((Cookie(x) & Delicious(x)) -> Cookie(x))", "all x.(Cookie(x) -> Delicious(x))", "(all x.(Cookie(x) -> Delicious(x)))", "all x.(Cookie(x) -> Delicious(x))", "all x.(Cookie(x) -> Delicious(x))", "all x.(Cookie(x) -> Delicious(x))", "all x.(Cookie(x) -> Delicious(x))", "all x.(Cookie(x) -> Delicious(x))", "all x.(Cookie(x) -> Delicious(x))", "All x.(Cookie(x) -> Delicious(x))"]}
{"id": "folio_train_2395", "nl": "No animals are plants. ", "fol": "all x.(IsAnimal(x) -> -IsPlant(x))", "prediction": ["-exists x.(Animal(x) & Plant(x))", "all x.(Animal(x) -> -Plant(x))", "(exists x.(Animal(x) & Plant(x)) & -exists y.(Animal(y) & Plant(y))))", "-exists x.(Animal(x) & Plant(x))", "all x.(Animal(x) -> Plant(x))", "-exists x.(Animal(x) & Plant(x))", "all x.(Animal(x) -> -Plant(x))", "all x.(Animal(x) -> Plant(x))", "-exists x.(Animal(x) & Plant(x))", "-exists x.(Animal(x) & Plant(x))", "all x.(Animal(x) -> Plant(x))", "all x.(Animal(x) -> -Plant(x))", "-exists x.(Animal(x) & Plant(x))", "all x.(Animal(x) -> Plant(x))", "-exists x.(Animal(x) & Plant(x))", "-exists x.(Animal(x) & Plant(x))"]}
{"id": "folio_train_2396", "nl": "All humans are animals.", "fol": "all x.(IsHuman(x) -> IsAnimal(x))", "prediction": ["all x.(Human(x) -> Animal(x))", "all x.(Human(x) -> Animal(x))", "(all x.(Human(x) -> Animal(x)))", "all x.(Human(x) -> Animal(x))", "(all x.(Human(x) -> Animal(x)))", "all x.exists y.(Human(x) & Animal(y))", "all x.(Human(x) -> Animal(x))", "all x.(Habitat(x) -> Animal(x))", "all x.(Human(x) -> Animal(x))", "all x.(Human(x) -> Animal(x))", "exists x.(Habitat(x) & Animal(x))", "all x.(Human(x) -> Animal(x))", "all x.(Human(x) -> Animal(x))", "all x.(Human(x) -> Animal(x))", "all x.(Human(x) -> Animal(x))", "all x.(Human(x) -> Animal(x))"]}
{"id": "folio_train_2397", "nl": "All pupils are human.", "fol": "all x.(IsPupil(x) -> IsHuman(x))", "prediction": ["all x.(Pupil(x) -> Human(x))", "all x.(Pupil(x) -> Human(x))", "(all x.(Pupil(x) -> Human(x))", "all x y.((Pupil(x) & Human(y)) -> Pupil(x))", "all x.(Pupil(x) -> Human(x))", "(all x.(Pupil(x) -> Human(x))", "all x.exists y.(Pupil(x) & Human(y))", "all x.(Pupil(x) -> Human(x))", "all x.(Pupil(x) -> Human(x))", "all x.(Pupil(x) -> Human(x))", "all x.(Pupil(x) -> Human(x))", "all x.(Pupil(x) -> Human(x))", "all x.(Pupil(x) -> Human(x))", "all x.(Pupil(x) -> Human(x))", "all x.(Pupil(x) -> Human(x))", "exists x.(Pillow(x) & Human(x))"]}
{"id": "folio_train_2398", "nl": "If Jack is a human or a flower, then Jack is a human and a flower.", "fol": "((IsHuman(Jack) | IsFlower(Jack)) -> (IsHuman(Jack) & IsFlower(Jack)))", "prediction": ["all x.((Human(x) | Flower(x)) -> (Human(x) & Flower(x)))", "all x.((Human(x) | Flower(x)) -> (Human(x) & Flower(x)))", "all x.(Human(x) | Flower(x)) -> (Human(x) & Flower(x)))", "(all x.((Human(x) | Flower(x))) -> (Human(x) & Flower(x)))", "((Human(Jack) | Flower(Jack)) & Human(Jack)) & Flower(Jack))", "all x.((Human(x) | Flower(x)) -> (Human(x) & Flower(x)))", "all x y.((Human(x) | Flower(x)) -> (Human(y) & Flower(y)))", "all x.(Human(x) | Flower(x)) -> (Human(x) & Flower(x)))", "all x.((Human(x) | Flower(x)) -> (Human(x) & Flower(x)))", "all x y.((Human(x) | Flower(x)) -> (Human(x) & Flower(y)))", "(all x.((Human(x) | Flower(x))) -> (Human(x) & Flower(x)))", "all x.(Human(x) | Flower(x)) -> (Human(x) & Flower(x)))", "all x.((Human(x) | Flower(x)) -> (Human(x) & Flower(x)))", "all x.((Human(x) | Flower(x)) -> (Human(x) & Flower(x)))", "exists x.(Human(x) | Flower(x))", "all x.((Human(x) | Flower(x)) -> (Human(x) & Flower(x)))"]}
{"id": "folio_train_2399", "nl": "Jack is a pupil.", "fol": "IsPupil(Jack)", "prediction": ["(Pupil(Jack))", "all x.(Pupil(x) -> Jack(x))", "Jack is a pupil.", "(Pupil(Jack) & Pupil(Jack))", "Jack is a Pupil(Jack)", "(Pupil(Jack))", "all x.(Pupil(x) -> Jack(x))", "all x.((Jack(x) & Pupil(x)) -> Pupil(x))", "-Pupil(Jack)", "All x.((Jack(x) & Pupil(x)) -> Pupil(x))", "Jack is a pupil.", "all x.(Pupil(x) -> Jack(x))", "Jack is pupil.", "(Pupil(Jack)", "(Pupil(Jack)", "(Pupil(Jack)"]}
{"id": "folio_train_2400", "nl": "Jack is not a pupil.", "fol": "-IsPupil(Jack)", "prediction": ["(-Pupil(Jack))", "all x.(Jack(x) -> -Pupil(x))", "Jack is not a pupil.", "(Pupil(Jack) & -Pupil(Jack))", "-Pupil(Jack)", "Jack is notPupil(Jack)", "(-Pupil(Jack))", "all x.(Jack(x) -> -Pupil(x))", "(Pupil(Jack) & -Pupil(Jack))", "Jack is not a pupil.", "-Pupil(Jack)", "-(Pupil(Jack))", "(-Pupil(Jack))", "-Pupil(Jack)", "(-Pupil(Jack))", "-Pupil(Jack)"]}
{"id": "folio_train_2401", "nl": "Jack is a plant.", "fol": "IsPlant(Jack)", "prediction": ["all x.(Jack(x) -> Plant(x))", "(Plant(Jack) & Plant(Jack))", "all x.(Jack(x) -> Plant(x))", "(Plant(Jack) & Plant(Jack))", "all x.(Jack(x) -> Plant(x))", "Jack is Plant(jack)", "(Plant(Jack))", "all x.((Jack(x) & Plant(x)) -> Plant(x))", "-Plant(jack,y)", "(Plant(Jack) & Plant(Jack))", "All x.(Jack(x) -> Plant(x))", "all x.(Jack(x) -> Plant(x))", "(Plant(Jack))", "All x.(Jack(x) -> Plant(x))", "All x.(Jack(x) -> Plant(x))", "all x.(Jack(x) -> Plant(x))"]}
{"id": "folio_train_2402", "nl": "If Jack is a human, then Jack is not a pupil.", "fol": "(IsHuman(Jack) -> -IsPupil(Jack))", "prediction": ["all x.(Human(x) -> -Pupil(x))", "(Human(Jack) -> -Pupil(Jack))", "all x.(Human(x) -> -Pupil(x))", "all x.((Human(x) & -Pupil(x)) -> -Human(x))", "all x.((Human(x) & Jack(x)) -> -Pupil(x))", "(HasHuman(Jack,Jack) & -Pupil(Jack))", "(all x.(Human(x) -> -Pupil(x)))", "all x.(Human(x) -> -Pupil(x))", "all x.(HasHuman(x) -> -Pupil(x))", "(all x.(Human(x) -> -Pupil(x)))", "all x.(Human(x) -> -Pupil(x))", "all x.((Human(x) & Jack(x)) -> -Pupil(x))", "all x.(Human(x) -> -Pupil(x))", "all x.(Human(x) -> -Pupil(x))", "all x.(Human(x) -> -Pupil(x))", "all x.(Human(x) -> -Pupil(x))"]}
{"id": "folio_train_2403", "nl": "No shoes are food. ", "fol": "all x.(IsShoe(x) -> -IsFood(x))", "prediction": ["-exists x.(Shoe(x) & Food(x))", "all x.(Shoe(x) -> -Food(x))", "-exists x.(Shoe(x) & Food(x))", "all x.(Shoe(x) -> -Food(x))", "-exists x.(Shoe(x) & Food(x))", "(exists x.(Shoe(x) & Food(x))", "all x.(Shoe(x) -> -Food(x))", "-exists x.(Shoe(x) & Food(x))", "(exists x.(Shoe(x) & Food(x))", "all x.(Shoe(x) -> -Food(x))", "-exists x.(Shoe(x) & Food(x))", "-exists x.(Shoe(x) & Food(x))", "-exists x.(Shoe(x) & Food(x))", "-exists x.(Shoe(x) & -Food(x))", "-exists x.(Shoe(x) & Food(x))", "-exists x.(Shoe(x) & Food(x))"]}
{"id": "folio_train_2404", "nl": "All slippers are shoes.", "fol": "all x.(IsSlipper(x) -> IsShoe(x))", "prediction": ["all x.(Slipper(x) -> Shoes(x))", "all x.(Slipper(x) -> Shoes(x))", "all x y.((Slipper(x) & Shoe(y)) -> Shoes(x))", "(all x.(Slipper(x) -> Shoes(x))", "all x.(Slipper(x) -> Shoes(x))", "ALL SKIPPER(x) -> Shoes(x))", "(all x.(Slipper(x) -> Shoes(x))", "all x.(Slipper(x) -> Shoes(x))", "all x.(Slipper(x) -> Shoes(x))", "all x.(Slipper(x) -> Shoes(x))", "all x.(Slipper(x) -> Shoes(x))", "all x.(Slipper(x) -> Shoe(x))", "all x.(Shaped(x) -> Shoes(x))", "all x.(Slipper(x) -> Shoes(x))", "all x.(Slipper(x) -> Shoes(x))", "all x.(Slipper(x) -> Shoe(x))"]}
{"id": "folio_train_2405", "nl": "A thing is either food or clothes.", "fol": "all x.((IsFood(x) & -IsClothing(x)) | (-IsFood(x) & IsClothing(x)))", "prediction": ["all x.(Thing(x) -> (Food(x) | Clothing(x)))", "all x.(Thing(x) -> (Food(x) | Clothing(x)))", "all x.(Thing(x) -> (Food(x) | Clothes(x)))", "all x.(Thing(x) -> (Food(x) | Clothing(x)))", "all x y.(Thing(x) -> (Food(y) | Clothing(y)))", "exists x.(Thing(x) & (Food(x) | Clothes(x)))", "all x y.(Thing(x) -> (Food(y) | Clothing(y)))", "all x.(Ding(x) -> (Food(x) | Clothing(x)))", "all x y.(Thing(x) & Food(y) | Clothing(y))", "exists x.(Thing(x) & (Food(x) | Clothes(x)))", "exists x.(Thing(x) & Food(x) & Clothes(x))", "all x.(Ding(x) -> (Food(x) | Clothing(x)))", "exists x.(Thing(x) & Food(x) & Clothes(x))", "exists x.(Dog(x) & (Feed(x) | Clothing(x)))", "all x.(Ding(x) -> (Food(x) | Clothing(x)))", "exists x.(Ding(x) & (Food(x) | Clothing(x)))"]}
{"id": "folio_train_2406", "nl": "No wearable things are airtight.", "fol": "all x.(IsWearable(x) -> -IsAirtight(x))", "prediction": ["-exists x.(WearableThing(x) & Airtight(x))", "-exists x.(Wearable(x) & Airtight(x))", "all x.(WearableThing(x) -> -Airtight(x))", "all x.(Wearable(x) -> -Airtight(x))", "-exists x.(WearableThing(x) & Airtight(x))", "all x.(WearableThing(x) -> -Airtight(x))", "-exists x.(Wearable(x) & Airtight(x))", "-exists x.(Wornable(x) & Airtight(x))", "-all x.(WearableThing(x) -> Airtight(x))", "all x.(Wearable(x) -> -Airtight(x))", "-exists x.(WornableThing(x) & Airtight(x))", "-exists x.(WearableThing(x) & Airtight(x))", "(exists x.(WearableThing(x) & Airtight(x)))", "all x.(WearableThing(x) -> -Airtight(x))", "-exists x.(Wearable(x) & Airtight(x))", "-exists x.(WearableThing(x) & Airtight(x))"]}
{"id": "folio_train_2407", "nl": "All clothes are wearable. ", "fol": "all x.(IsClothing(x) -> IsWearable(x))", "prediction": ["all x.(Clothing(x) -> Wearable(x))", "all x.(Clothing(x) -> Wearable(x))", "(all x.(Clothing(x) -> Wearable(x)))", "all x y.((Clothing(x) & Clothes(y)) -> Wearable(x))", "(WearableClothing(Clothing)", "all x.(Clothing(x) -> Wearable(x))", "all x.(Clothing(x) -> Wearable(x))", "all x.(Choice(x) -> Wearable(x))", "all x.(Clothing(x) -> Wearable(x))", "all x.(Clothes(x) -> Wearable(x))", "all x.(Clothing(x) -> Wearable(x))", "all x.(Clothes(x) -> Wearable(x))", "exists x.(Clothes(x) & WornBy(x))", "all x.(Clothing(x) -> Wearable(x))", "all x.(Clothes(x) -> Wearable(x))", "all x.(Clothing(x) -> Wearable(x))"]}
{"id": "folio_train_2408", "nl": "If a watch is not airtight and clothes, then a watch is either both airtight and clothes, or neither airtight nor clothes.", "fol": "(((-(IsAirtight(Watch) & IsClothing(Watch)) -> (IsAirtight(Watch) & IsClothing(Watch))) & -(-IsAirtight(Watch) & -IsClothing(Watch))) | (-(-(IsAirtight(Watch) & IsClothing(Watch)) -> (IsAirtight(Watch) & IsClothing(Watch))) & -IsAirtight(Watch) & -IsClothing(Watch)))", "prediction": ["all x.((Watch(x) & -Airtight(x) & -Clothes(x)) -> (Airtight(x) & -Clothes(x)))", "all x.((Watch(x) & -Airtight(x) & -Clothes(x)) -> (Airtight(x) & -Clothes(x)) | (-Airtight(x) & -Clothes(x))))", "(all x.((Watch(x) & -Airtight(x) & -Clothes(x)) -> (Airtight(x) & -Clothes(x)) | (-Airtight(x) & -Clothes(x))))", "all x.((Watch(x) & -Airtight(x) & -Clothes(x)) -> ((Airtight(x) & Clothing(x)) | (-Airtight(x) & Clothing(x)))))", "all x y.((Watch(x) & -Airtight(x) & -Clothes(x)) -> (Airtight(x) & -Clothes(y)))", "all x.((Watch(x) & Airtight(x) & -Airtight(x) & -Clothes(x)) | (-Airtight(x) & Clothing(x))))", "exists x.(Watch(x) & ((Airtight(x) & -Airtight(x) & -Clothes(x)) | (-Airtight(x) & Clothing(x)))))", "(all x.((Watch(x) & -Airtight(x) & -Clothes(x)) -> (Airtight(x) & -Clothes(x)) | (-Airtight(x) & -Clothes(x))))", "all x.((Watch(x) & Airtight(x) & -Clothes(x)) -> (Airtight(x) & -Clothes(x)) | -Airtight(x) & -Clothes(x)))", "all x.((Watch(x) & -Airtight(x) & -Clothes(x)) -> ((Airtight(x) & Clothes(x)) | (-Airtight(x) & Clothes(x)))))", "all x y.((Watch(x) & Airtight(y) & Clothes(y)) -> ((Airtight(x) & Clothes(x)) | (-Airtight(x) & Clothes(x))))", "all x y.((Watch(x) & -Airtight(x) & -Clothes(x)) -> (Airtight(x) | -Airtight(x) | -Clothes(x)))", "all x.((Watch(x) & -Airtight(x) & -Clothes(x)) -> (Airtight(x) & -Clothes(x)))", "all x.((Watch(x) & Airtight(x) & Clothing(x)) | (-Airtight(x) & Clothing(x))))", "all x.((Watch(x) & -Airtight(x) & -Clothes(x)) -> (Airtight(x) | -Clothes(x)))", "all x.((Watch(x) & -Airtight(x) & -Clothes(x)) | (-Airtight(x) & Clothing(x))))"]}
{"id": "folio_train_2409", "nl": "Watch is a wearable.", "fol": "IsWearable(Watch)", "prediction": ["all x.(Watch(x) -> Wearable(x))", "all x.(Watch(x) -> Wearable(x))", "all x y.((Watch(x) & Wearable(y)) -> Wearable(x))", "all x.(Watch(x) -> Wearable(x))", "(WearableWatch(Watch) & Wearable(Watch))", "all x.(Watch(x) -> Wearable(x))", "all x y.((Watch(x) & Wearable(y)) -> Wearable(x))", "all x.(Watch(x) -> Wearable(x))", "all x.(Watch(x) -> Wearable(x))", "all x.(Watch(x) -> Wearable(x))", "all x.(Watch(x) -> Wearable(x))", "all x.(Watch(x) -> Wearable(x))", "All x.(Watch(x) -> Weaveable(x))", "All x.(Watch(x) -> Wearable(x))", "All x.(Watch(x) -> Wearable(x))", "exists x.(Watch(x) & Wearable(x))"]}
{"id": "folio_train_2410", "nl": "Watch is a slipper.", "fol": "IsSlipper(Watch)", "prediction": ["all x.(Watch(x) -> Slipper(x))", "all x.(Watch(x) -> Slipper(x))", "(Slipper(watch) & Slipper(watch))", "all x y.((Watch(x) & Slipper(y)) -> Slipper(x))", "all x.(Watch(x) -> Slipper(x))", "Watch is Slipper.", "(Slipper(watch) & Slipper(watch))", "all x y.((Watch(x) & Slipper(y)) -> Slipper(x))", "all x.(Watch(x) -> Slipper(x))", "all x.(Watch(x) -> Slipper(x))", "All x.(Watch(x) -> Slipper(x))", "all x.(Watch(x) -> Slipper(x))", "All x.(Watch(x) -> Slipper(x))", "All x.(Watch(x) -> Slipper(x))", "all x.(Watch(x) -> Slipper(x))", "All x.(Watch(x) -> Slipper(x))"]}
{"id": "folio_train_2411", "nl": "Watch is neither airtight nor a slipper.", "fol": "(-IsAirtight(Watch) & -IsSlipper(Watch))", "prediction": ["all x.(Watch(x) -> (-Airtight(x) | Slipper(x)))", "(-Airtight(Watch) & -Slipper(Watch))", "all x.(Watch(x) -> (-Airtight(x) & -Slipper(x)))", "-(Airtight(Watch) | Slipper(Watch))", "(-Airtight(Watch) & -Slipper(Watch))", "all x.(Watch(x) -> (-Airtight(x) | Slipper(x)))", "-(Airtight(Watch) | Slipper(Watch))", "all x.(Watch(x) -> (-Airtight(x) & -Slipper(x)))", "(-Airtight(Watch) & -Slipper(Watch))", "-(Airtight(Watch) | Slipper(Watch))", "all x.(Watch(x) -> (-Airtight(x) | Slipper(x)))", "all x.(Watch(x) -> (-Airtight(x) & -Slipper(x)))", "All x.(Watch(x) -> -(Airtight(x) | Slipper(x)))", "all x.(Watch(x) -> (-Airtight(x) | Slipper(x)))", "-(Airtight(Watch) | Slipper(Watch))", "all x.(Watch(x) -> (-Airtight(x) | Slipper(x)))"]}
{"id": "folio_train_2412", "nl": "An Olympian is a person who trains for an Olympic sport and goes to the Olympics.", "fol": "all x.((TrainsForOlympicSport(x) & AttendsOlympicGames(x)) -> IsOlympian(x))", "prediction": ["all x.(Olympian(x) -> (TrainsForOlympicSport(x) & GoesToOlympics(x)))", "all x.(Olympian(x) -> (TrainsForOlympicSport(x) & GoesToOlympics(x)))", "all x y.((Olympian(x) & Person(y)) -> (TrainsForOlympicSport(y,x) & GoesToOlympics(y,x)))", "all x y.((Person(x) & Olympian(y)) -> (TrainsForOlympicSport(x,y) & GoesToOlympics(x,y)))", "all x.(OlympicPerson(x) -> (TrainsForOlympicSport(x) & GoesToOlympics(x)))", "all x y.((Olympian(x) & Person(y)) -> (TrainsForOlympicSport(y) & GoesToOlympics(y)))", "all x.(Olympian(x) -> (TrainsForOlympicSport(x) & GoesToOlympics(x)))", "all x y z.(Olympian(x) -> (TrainsForOlympicSport(x) & GoesToOlympics(y)))", "all x.(OlympicPerson(x) -> (TrainsForOlympicSport(x) & GoesToOlympics(x)))", "all x.(Olympian(x) -> (TrainsForOlympicSport(x) & GoesToOlympics(x)))", "all x y.((Olympian(x) & Person(y)) -> (TrainsForOlympicSport(x,y) & GoesToOlympics(y)))", "all x.(Olympian(x) -> (TrainsForOlympicSport(x) & GoesToOlympics(x)))", "all x.(OlympicPerson(x) -> (TrainsForOlympicSport(x) & GoesToOlympics(x)))", "all x.(Olympian(x) -> (TrainsForOlympicSport(x) & GoesToOlympics(x)))", "exists x.(OlympicPerson(x) & TrainsForOlympicSport(x) & GoesToOlympics(x))", "all x.(Olympian(x) -> (TrainsForOlympicSport(x) & GoesToOlympics(x)))"]}
{"id": "folio_train_2413", "nl": "Carlos Reyes trains for an Olympic sport.", "fol": "TrainsForOlympicSport(CarlosReyes)", "prediction": ["all x.((CarlosReyes(x) & OlympicSport(y)) -> TrainsFor(x,y))", "all x y.((CarlosReyes(x) & OlympicSport(y)) -> TrainsFor(x,y))", "(TrainsForOlympicSport(CarlosReyes))", "all x.(CarlosReyes(x) -> TrainsForOlympicSport(x))", "all x y z.((CarlosReyes(x) & OlympicSport(y) & OlympicSport(z)) -> TrainsFor(x,y,z))", "all x.((CarlosReyes(x) & OlympicSport(x)) -> TrainsFor(x))", "all x y.((CarlosReyes(x) & OlympicSport(y)) -> TrainsFor(x,y))", "(TrainsForOlympicSport(CarlosReyes,OlympicSport))", "(TrainsForOlympicSport(CarlosReyes) & ForOlympicSport(CarlosReyes))", "All x.(CarlosReyes(x) -> TrainsForOlympicSport(x))", "all x y.((CarlosReyes(x) & OlympicSport(y)) -> TrainsFor(x,y))", "all x.((CarlosReyes(x) & OlympicSport(y)) -> TrainsFor(x,y))", "(TrainsForOlympicSport(CarlosReyes,OlympicSport))", "All x.(CarlosReyes(x) -> TrainsForOlympicSport(x))", "(TrainsForOlympicSport(CameraReyes))", "all x y.((CarlosReyes(x) & OlympicSport(y)) -> TrainsFor(x,y))"]}
{"id": "folio_train_2414", "nl": "Carlos Reyes went to the Olympics.", "fol": "AttendsOlympicGames(CarlosReyes)", "prediction": ["all x.((CarlosReyes(x) & GoesToOlympics(x)) -> GoesToOlympics(x))", "all x.(CarlosReyes(x) -> GoesToOlympics(x))", "-GoedToOlympics(CarlosReyes)", "(GoedToOlympics(CarlosReyes))", "all x y.((CarlosReyes(x) & Olympics(y)) -> GoesTo(x,y))", "CarlosReyesGoesToOlympics(Carlos)", "Carlos Reyes aesthetically went to the Olympics.", "all x.((CarlosReyes(x) & GoesToOlympics(x)) -> GoesTo(x,y))", "(GoedToOlympics(CarlosReyes,Olympics))", "-GoesToOlympics(CarlosReyes,Olympics)", "Carlos Reyes adobesOlympics(carlosreyes)", "all x.(CarlosReyes(x) -> GoesToOlympics(x))", "CarlosReyesGoesToOlympics(CarlosReyes)", "Carlos Reyes aete a olympics.", "all x.((CarlosReyes(x) & GoesToOlympics(x)) -> GoesToOlympics(x))", "All x.(CarlosReyes(x) -> GoesToOlympics(x))"]}
{"id": "folio_train_2415", "nl": "Carlos Reyes is a welterweight.", "fol": "IsWelterweight(CarlosReyes)", "prediction": ["all x.((CarlosReyes(x) & Welterweight(x)) -> Is(x,y))", "Carlos Reyes is a Welterweight.", "all x.(CarlosReyes(x) -> Westerweight(x))", "all x.((CarlosReyes(x) & Westerweight(x)) -> Warrior(x))", "CarlosReyes(x) & Westerweight(x))", "(Westernweight(CarlosReyes))", "Carlos Reyes is a Welterweight.", "Carlos Reyes (Winterweight)", "(Welderweight(CameraReyes,Camera))", "all x.((CarlosReyes(x) & Welterweight(x)) -> -Welderweight(x))", "(Westernweight(Carlo) & Reyes(Carlo))", "all x.((CarlosReyes(x) & Welderweight(x)) -> Is(x,y))", "(Westernweight(CarlosReyes))", "all x.(Winterweight(x) -> CarlosReyes(x))", "All x.(CarlosReyes(x) -> Westerweight(x))", "all x.((CarlosReyes(x) & Welterweight(x)) -> Has(x,y))"]}
{"id": "folio_train_2416", "nl": "Heavy weights are not welterweights.", "fol": "all x.(IsWelterweight(x) -> -IsHeavyweight(x))", "prediction": ["all x.(HeavyWeight(x) -> -Welderweight(x))", "all x.(HeavyWeight(x) -> -WesternWeight(x))", "all x.((HeavyWeight(x) & -Weighterweight(x)) -> -Weighterweight(x))", "all x y.((HeavyWeight(x) & Weight(y)) -> -WesternWeight(x))", "(-Welderweight(heavyweight) & Weight(heavyweight))", "all x.(HeavyWeight(x) -> -Weighterweight(x))", "(all x.(HeavyWeight(x) -> -Weighterweight(x)))", "all x.((HeavyWeight(x) & -WesternWeight(x)) -> -Weight(x))", "all x.(HeavyWeight(x) -> -Welderweight(x))", "all x y.((HeavyWeight(x) & Wetterweight(y)) -> -Wetterweight(x))", "(all x.(HeavyWeight(x) -> -Weighterweight(x)))", "all x.(HeavyWeight(x) -> -WesternWeight(x))", "(all x.(HeavyWeight(x) -> -Welderweight(x)))", "all x.(HeavyWeight(x) -> -Weighterweight(x))", "all x.(HeavyWeight(x) -> -Welterweight(x))", "all x.(HeavyWeight(x) -> -WesternWeight(x))"]}
{"id": "folio_train_2417", "nl": "Carlos Reyes is an Olympian.", "fol": "IsOlympian(CarlosReyes)", "prediction": ["Carlos Reyes is Olympian(x)", "(Olympic(CarlosReyes) & Olympian(Carlos))", "all x.((CarlosReyes(x) & Olympian(x)) -> Is(x,y))", "Olympian(CarlosReyes)", "CarlosReyes(x) & Olympian(x))", "-Olympics(CarlosReyes)", "Carlos Reyes (Olympian)", "(Olympian(CarlosReyes))", "All x.(Olympics(x) -> CarlosReyes(x))", "Carlos Reyes is Olympian.", "CarlosReyes(x) -> Olympian(x))", "(Olympics(CarlosReyes)", "all x.((CarlosReyes(x) & Olympian(x)) -> Has(x,y))", "Carlos Reyes (Olympics(Carlos))", "Carlos Reyes is Olympian(x)", "(Olympian(CarlosReyes))"]}
{"id": "folio_train_2418", "nl": "Carlos Reyes is a heavy weight.", "fol": "IsHeavyweight(CarlosReyes)", "prediction": ["all x.(CarlosReyes(x) -> HeavyWeight(x))", "Carlos Reyes is a heavyweight.", "CarlosReyes(Carlos) sHeavyWeight(Carlos)", "all x.(CarlosReyes(x) -> HeavyWeight(x))", "all x.((CarlosReyes(x) & HeavyWeight(x)) -> HeavyWeight(x))", "(HeavyWeight(CarlosReyes)", "All x y.((CarlosReyes(x) & Weight(y)) -> Heavy(x,y))", "Carlos Reyes is a heavyweight.", "all x.(CarlosReyes(x) -> HeavyWeight(x))", "(HeavyWeight(CarlosReyes)", "all x.(CarlosReyes(x) -> HeavyWeight(x))", "all x.(Carlo(x) -> HeavyWeight(x))", "(HeavyWeight(CarlosReyes)", "all x.(CarlosReyes(x) -> HeavyWeight(x))", "All x.(CarlosReyes(x) -> HeavyWeight(x))", "all x.(CarlosReyes(x) -> HeavyWeight(x))"]}
{"id": "folio_train_2419", "nl": "Carlos Reyes won an Olympic medal.", "fol": "WonOlympicMedal(CarlosReyes)", "prediction": ["all x.((CarlosReyes(x) & OlympicMedal(x)) -> Won(x,y))", "Carlos Reyes wonsOlympicMedal(x)", "(WonOlympicMedal(CarlosReyes))", "all x y.((CarlosReyes(x) & OlympicMedal(y)) -> Won(x,y))", "-WonOlympicMedal(CarlosReyes)", "-(CarlosReyes(Carlos) & OlympicMedal(Carlos))", "all x.((CarlosReyes(x) & OlympicMedal(x)) -> Won(x,y))", "Carlos Reyes wonsOlympicMedal(x)", "(WonOlympicMedal(CarlosReyes,Olympic))", "all x.((CarlosReyes(x) & WonOlympicMedal(x)) -> Won(x))", "Carlos Reyes wonsOlympicMedal(Carlos)", "all x.((CarlosReyes(x) & OlympicMedal(y)) -> Won(x,y))", "(WonOlympicMedal(CarlosReyes,Olympic))", "CarlosReyesWonOlympicMedal(x)", "Carlos Reyes wonsOlympicMedal(CarlosReyes)", "CarlosReyesWonOlympicMedal(x)"]}
{"id": "folio_train_2420", "nl": "If people have a lot of decorations in their room, they cannot pack and move out of their rooms very easily.", "fol": "all x.(HasDecorations(x) -> -CanMoveOutEasily(x))", "prediction": ["all x.((Person(x) & LotsOfDecorationsInRoom(x)) -> -(PackInRoom(x) & MoveOutRoom(x)))", "all x y.((Person(x) & Room(y) & LotsOfDecorations(x,y)) -> -(PackInRoom(x,y) & MoveOutRoom(x,y)))", "all x.((Person(x) & LotsOfDecorationsInRoom(x)) -> -CanPackAndMoveOutOfRooms(x))", "all x y.((Person(x) & Room(y) & LotsOfDecorationsInRoom(x,y)) -> -(PackInRoom(x,y) & MoveOutRoom(x,y)))", "all x.((People(x) & LotsOfDecorationsInRoom(x)) -> -(PackInRoom(x) & MoveOutRoom(x)))", "all x.((Person(x) & LotsOfDecorations(x)) -> -(PackInRoom(x) & MoveOutRoom(x)))", "all x y.((Person(x) & LotsOfDecorationsInRoom(x)) -> -PackAndMoveOutOfRooms(x,y))", "all x y z.((Person(x) & Room(y) & Decorations(z) & LotsIn(x,y)) -> -PackAndMoveOut(x,z))", "exists x.(Decorations(x) & LotsInRoom(x) & -PackAndMoveOutOfRooms(x))", "all x.((People(x) & LotsOfDecorationsInRoom(x)) -> -CanPackAndMoveOutOfRooms(x))", "all x y.((Person(x) & Room(y) & LotsOfDecorations(x,y)) -> -PackAndMoveOutOfRooms(x,y))", "all x.((Person(x) & LotsOfDecorationsInRoom(x)) -> -(PackInRoom(x) & MoveOutRoom(x)))", "exists x.(DecorationsInRoom(x) & LotsInRoom(x) & -PackAndMoveOutOfRooms(x))", "all x y.((Person(x) & LotsOfDecorationsInRoom(x,y)) -> -PackAndMoveOutOfRooms(x,y))", "all x.((Person(x) & LotsOfDecorations(x)) -> -CanPackAndMoveOutOfRooms(x))", "all x.((Person(x) & LotsOfDecorationsInRoom(x)) -> -CanPackAndMoveOutOfRooms(x))"]}
{"id": "folio_train_2421", "nl": "If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.", "fol": "all x.(HasHighAmbitions(x) -> CanMoveOutEasily(x))", "prediction": ["all x.((HighAmbitions(x) & FutureCareerGoals(x)) -> PackAndMoveOut(x))", "all x.((Person(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> CanPackAndMoveOut(x))", "all x y.((Person(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> (Pack(x,y) & MoveOut(x,y)))", "all x.(HighAmbitionsAndCareerGoals(x) -> (Pack(x) & MoveOut(x)))", "all x.((HighAmbitions(x) & FutureCareerGoals(x)) -> (Pack(x) & MoveOut(x)))", "all x y z.((Person(x) & HighAmbitions(x) & FutureCareerGoals(y) & Room(z) & Has(x,y) & Has(x,z)) -> CanPackAndMoveOut(x,z))", "all x.((Person(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> PackAndMoveOutOfRooms(x))", "all x.((Hungers(x) & FutureCareerGoals(x)) -> PackAndMoveOut(x))", "all x.(HighAmbitionsAndCareerGoals(x) -> (PackAndMoveOut(x) & VeryEasily(x)))", "all x y.((Person(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> CanPackAndMoveOut(x,y))", "all x.(HighAmbitionsAndFutureCareerGoals(x) -> (PackInRooms(x) & MoveOutRooms(x)))", "all x y.((HighAmbitions(x) & FutureCareerGoals(x) & Person(y)) -> (Pack(y,x) & MoveOut(y,x)))", "all x y.((Person(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> (Pack(x,y) & MoveOut(x,y)))", "all x y.((Person(x) & HighAmbitions(x) & FutureCareerGoals(x) & Room(y)) -> CanPackAndMoveOut(x,y))", "all x.(HighAmbitionsAndCareerGoals(x) -> PackAndMoveOutOfRooms(x))", "all x.((HighAmbitions(x) & FutureCareerGoals(x)) -> CanPackAndMoveOut(x))"]}
{"id": "folio_train_2422", "nl": "If people are big fans of pop bands and singers, then they have a lot of decorations in their room.", "fol": "all x.(IsBigFanOfPopBands(x) -> HasDecorations(x))", "prediction": ["all x.((PopBand(x) & Singer(x)) -> LotsOfDecorationsInRoom(x))", "all x.((Person(x) & BigFanOfPopBands(x) & BigFanOfSingers(x)) -> LotsOfDecorationsInRoom(x))", "all x.((PopPopBand(x) & Singer(x)) -> LotsOfDecorationsInRoom(x))", "all x.((PopBand(x) & Singer(x) & BigFan(x)) -> LotsOfDecorationsInRoom(x))", "all x y.((PopBand(x) & Singer(y) & BigFan(x)) -> LotsOfDecorationsInRoom(x,y))", "all x.((People(x) & BigFanOfPopBands(x) & BigFanOfSingers(x)) -> LotsOfDecorationsInRoom(x))", "all x.((PopPopFan(x) & BigFanOfPopBands(x) & BigFanOfSingers(x)) -> LotsOfDecorationsInRoom(x))", "all x.(BigFanOfPopBandsAndSingers(x) -> LotsOfDecorationsInRoom(x))", "all x y.((PopPopBand(x) & Singer(y) & BigFan(x,y)) -> LotsOfDecorationsInRoom(x,y))", "all x.((Fan(x) & BigFanOfPopBands(x) & BigFanOfSingers(x)) -> LotsOfDecorationsInRoom(x))", "all x y.((Person(x) & PopBand(y) & Singer(y)) -> HasMoreDecorations(x,y))", "all x y.((PopBand(x) & Singer(y) & BigFan(x,y)) -> LotsOfDecorationsInRoom(x,y))", "all x.(PopBandFan(x) -> (HasDecorationsInRoom(x) & HasDecorationsInRoom(x)))", "exists x.(PopBandsAndSingers(x) & BigFan(x) & HasDecorationsInRoom(x))", "all x y.((Person(x) & PopBand(y) & Singer(y) & BigFan(x,y)) -> LotsOfDecorationsInRoom(x))", "all x.((Person(x) & BigFanOfPopBands(x) & BigFanOfSingers(x)) -> LotsOfDecorationsInRoom(x))"]}
{"id": "folio_train_2423", "nl": "All young teenage girls who attend college are big fans of pop bands and singers.", "fol": "all x.(AttendsCollege(x) -> HasHighAmbitions(x))", "prediction": ["all x.((YoungTenureGirl(x) & AttendsCollege(x)) -> (BigFanOfPopBands(x) & BigFanOfSingers(x)))", "all x.((YoungTeenager(x) & AttendsCollege(x)) -> (BigFanOfPopBands(x) & BigFanOfSingers(x)))", "all x.((YoungTenureGirl(x) & AttendsCollege(x)) -> (PopBand(x) | Singer(x)))", "all x.((YoungAdolescentGirl(x) & AttendsCollege(x)) -> (BigFanOfPopBands(x) & BigFanOfSingers(x)))", "all x y.((YoungTenureGirl(x) & College(y) & Attends(x,y)) -> (PopBand(x) | Singer(x)))", "all x.((YoungAdolescent(x) & AttendsCollege(x)) -> (PopBands(x) & Singers(x)))", "(all x.((YoungTenureGirl(x) & AttendsCollege(x)) -> BigFanOfPopBandsAndSingers(x)))", "all x.((YearLittle(x) & AttendsCollege(x)) -> (PopBands(x) & Singers(x)))", "all x.(AttendsCollege(x) -> (YoungTenureGirls(x) & BigFanOfPopBands(x) & BigFanOfSingers(x)))", "all x y.((YoungTenureGirl(x) & AttendsCollege(x) & PopBand(y) & Singer(y)) -> BigFan(x,y))", "all x.((YoungTenureGirl(x) & AttendsCollege(x)) -> (BigFanOfPopBands(x) & BigFanOfSingers(x)))", "all x y.((YoungTenureGirl(x) & College(y) & Attends(x,y)) -> (BigFanOfPopBands(x) & BigFanOfSingers(x)))", "all x y.((YoungAdolescentGirl(x) & College(y) & Attends(x,y)) -> (PopBand(x) | Singer(x)))", "all x.((TenyTen(x) & AttendsCollege(x)) -> (BigFanOfPopBands(x) & BigFanOfSingers(x)))", "all x y.((YoungTeenager(x) & CollegeAttendance(x)) -> (BigFanOfPopBands(y) & BigFanOfSingers(y)))", "all x.(AttendsCollege(x) -> (BigFanOfPopBands(x) & BigFanOfSingers(x)))"]}
{"id": "folio_train_2424", "nl": "If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers.", "fol": "(HasHighAmbitions(Sam) -> IsBigFanOfPopBands(Sam))", "prediction": ["all x.((HighAmbitions(x) & FutureCareerGoals(x)) -> BigFanOfPopBandsAndSingers(x))", "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> (PopBand(x) & Singer(x)))", "all x.((HighAmbitions(x) & FutureCareerGoals(x)) -> (BigFanOfPopBands(x) & BigFanOfSingers(x)))", "((HighAmbitions(Sam) & FutureCareerGoals(Sam)) -> BigFanOfPopBandsAndSingers(Sam))", "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> BigFanOfPopBandsAndSingers(x))", "all x y.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x) & Has(x,y)) -> (PopBand(y) | Singer(y)))", "all x.(HighAmbitionsAndFutureCareerGoals(x) -> (BigFanOfPopBandsAndSingers(x)))", "all x.((PopBand(x) & BigFanOfSingers(x)) -> (HighAmbitions(x) & FutureCareerGoals(x)))", "all x y.((PopBand(x) & Singer(y) & HighAmbitions(x) & FutureCareerGoals(x)) -> BigFan(x,y))", "all x.(HighAmbitionsAndCareerGoals(x) -> (BigFanOfPopBandsAndSingers(x)))", "all x.((HasHighAmbitions(x) & FutureCareerGoals(x)) -> BigFanOfPopBandsAndSingers(x))", "all x.((HighAmbitions(x) & FutureCareerGoals(x)) -> BigFanOfPopBandsAndSingers(x))", "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> (PopBandFan(x) & SingerFan(x)))", "all x y.((PopBand(x) & Singer(y) & HasHighAmbitions(x) & HasFutureCareerGoals(x)) -> BigFan(x,y))", "all x y.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> (PopBandFan(x) & SingerFan(y)))", "all x.((HighAmbitions(x) & FutureCareerGoals(x)) -> (PopBand(x) & Singer(x)))"]}
{"id": "folio_train_2425", "nl": "Sam is a young teenage girl who attends college.", "fol": "AttendsCollege(Sam)", "prediction": ["all x.((Sam(x) & Teenager(x)) -> AttendsCollege(x))", "(Young(Sam) & Teenager(Sam) & AttendsCollege(Sam))", "(YoungTeenager(Sam) & AttendsCollege(Sam))", "Sam is a youngteengirl(sam) who attendsCollege(sam)", "all x.((Sam(x) & YoungAdolescent(x)) -> AttendsCollege(x))", "Sam is a young teenage girl who attendsCollege(Sam)", "(YearlyTeenager(Sam) & AttendsCollege(Sam))", "all x.((Teenager(x) & AttendsCollege(x)) -> Sam(x))", "all x.(Sam(x) -> (YoungTeenager(x) & AttendsCollege(x)))", "(James(Sam) & Teenager(Sam) & AttendsCollege(Sam))", "all x y.((Sam(x) & Teenager(y) & AttendsCollege(y)) -> Young(x,y))", "(Young(Sam) & Teenager(Sam) & AttendsCollege(Sam))", "all x.((Sam(x) & Teenager(x) & AttendsCollege(x)) -> Young(x))", "(YoungTeenager(Sam) & AttendsCollege(Sam))", "Sam is a young teenage girl who attendsCollege(Sam,Cell)", "Sam is a youngteengirl(sam,college)"]}
{"id": "folio_train_2426", "nl": "Sam is not a young teenage girl who attends college.", "fol": "-AttendsCollege(Sam)", "prediction": ["all x.((Sam(x) & -YoungTeenager(x) & AttendsCollege(x)) -> -Sam(x))", "-(YoungTeenager(Sam) & AttendsCollege(Sam))", "(-YoungTeenager(Sam) & AttendsCollege(Sam))", "Sam is not a youngteengirl(sam) who attendsCollege(sam)", "all x.((Sam(x) & Teenager(x)) -> -AttendsCollege(x))", "((Sam(sam) & Teenager(s)) & -AttendsCollege(sam))", "-(YoungAdolescent(Sam) & AttendsCollege(Sam))", "(-YoungAdolescent(Sam) & -AttendsCollege(Sam))", "all x.((Sam(x) & Teenager(x) & -AttendsCollege(x)) -> -AttendsCollege(x))", "Sam is not a young teenage girl who attendsCollege(Sam)", "all x.(Sam(x) -> -(YoungTeenager(x) & AttendsCollege(x)))", "-(YoungTeenager(Sam) & AttendsCollege(Sam))", "Sam is not a youngteengirl(sam) who attendsCollege(sam)", "(-youngTeenager(Sam) & AttendsCollege(Sam))", "all x.(Sam(x) -> -(YoungTeenager(x) & AttendsCollege(x)))", "-(YoungTeenager(Sam) & AttendsCollege(Sam))"]}
{"id": "folio_train_2427", "nl": "Sam is a big fan of pop bands and singers.", "fol": "IsBigFanOfPopBands(Sam)", "prediction": ["all x.((Sam(x) & PopBand(x) & Singer(x)) -> BigFan(x))", "(FanOfPopBands(Sam) & FanOfSingers(Sam))", "Sam is a big fan of popbands and singers.", "(BigFanOfPopBands(Sam) & BigFanOfSingers(Sam))", "all x.((Sam(x) & PopBands(x) & Singers(x)) -> BigFan(x))", "Sam is a big fan of pop bands and singers.", "all x.((Sam(x) & PopBand(x) & Singer(x)) -> BigFan(x))", "all x y.((Sam(x) & PopBand(y) & Singer(y)) -> BigFan(x,y))", "(FanOfPopBands(Sam) & FanOfSingers(Sam))", "all x.(Sam(x) -> (PopBand(x) | Singer(x)))", "(Fan(Sam) & PopBands(Sam) & Singers(Sam))", "Sam is a big fan of popbands and singers.", "all x.((Sam(x) & PopBands(x) & Singers(x)) -> BigFan(x))", "(FanOfPopBands(Sam) & FanOfSingers(Sam))", "Sam is a big fan of pop bands and singers.", "all x.(Sam(x) -> (PopBand(x) & Singer(x)))"]}
{"id": "folio_train_2428", "nl": "Sam neither has high ambitions and future career goals nor is she a young teenage girl who attends college.", "fol": "(-HasHighAmbitions(Sam) & -AttendsCollege(Sam))", "prediction": ["(-(HighAmbitions(Sam) & FutureCareerGoals(Sam)) | (YoungTenure(Sam) & AttendsCollege(Sam))))", "all x.((Sam(x) & -(HighAmbitions(x) & FutureCareerGoals(x)) | YoungAdolescent(x) & AttendsCollege(x))) -> -(HighAmbitions(x) & FutureCareerGoals(x)))", "(-HighAmbitionsAndCareerGoals(Sam) & -YoungTenure(Sam) & AttendsCollege(Sam))", "((Sam) & -HighAmbitions(Sam) & FutureCareerGoals(Sam)) | (YoungAdolescent(Sam) & CollegeAttendance(Sam))))", "-((Sam(s) & HighAmbitions(s) & FutureCareerGoals(s)) | (YoungTenure(s) & AttendsCollege(s))))", "all x.(Sam(x) -> (-HighAmbitions(x) & FutureCareerGoals(x) & -YoungAdolescent(x) & AttendsCollege(x)))", "(-(HighAmbitions(Sam) & FutureCareerGoals(Sam)) | YoungAdolescent(Sam)) & -AttendsCollege(Sam))", "-(YoungTeenager(Sam) & -HighAmbitions(Sam) & FutureCareerGoals(Sam))", "\u2013 ((HighAmbitions(Sam) & FutureCareerGoals(Sam)) | (YoungTenure(Sam) & AttendsCollege(Sam))))", ".(Sam(x) & (-HighAmbitions(x) & FutureCareerGoals(x)) | (YoungTenure(x) & AttendsCollege(x))))", "all x.((Sam(x) & -(HighAmbitions(x) & FutureCareerGoals(x)) | YoungAdolescent(x) & AttendsCollege(x))) -> -HighAmbitions(x) & FutureCareerGoals(x))", "-(HighAmbitions(Sam) & FutureCareerGoals(Sam) & -(YoungTenure(Sam) & AttendsCollege(Sam)))", "(Sam) & -(HighAmbitions(Sam) & FutureCareerGoals(Sam)) | YoungAdolescent(Sam) & AttendsCollege(Sam)))", "((Sam) & -(HighAmbitions(Sam) & FutureCareerGoals(Sam)) | YoungAdolescent(Sam) & CollegeAttendance(Sam)))", "all x.((Sam(x) & -HighAmbitions(x) & FutureCareerGoals(x)) | (YoungTenure(x) & AttendsCollege(x))))", "(-(HighAmbitions(sam) & FutureCareerGoals(sam)) | (YoungAdolescent(sam) & CollegeAttendance(sam))))"]}
{"id": "folio_train_2429", "nl": "Sam has high ambitions and future career goals and is a young teenage girl who attends college.", "fol": "(HasHighAmbitions(Sam) & AttendsCollege(Sam))", "prediction": ["all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> Teenager(x))", "(HighAmbitionsAndCareerGoals(Sam) & YoungAdolescent(Sam) & AttendsCollege(Sam))", "(HasHighAmbitionsAndFutureCareerGoals(Sam) & YoungAdolescent(Sam) & AttendsCollege(Sam))", "(HighAmbitionsAndCareerGoals(Sam) & Teenager(Sam) & AttendsCollege(Sam))", "all x y.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> (YoungTeenager(x) & AttendsCollege(x)))", "(HighAmbitionsAndFutureCareerGoals(Sam) & YoungAdolescent(Sam) & AttendsCollege(Sam))", "all x.(Sam(x) -> (HighAmbitionsAndCareerGoals(x) & YoungAdolescent(x) & AttendsCollege(x)))", "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> Teenager(x))", "all x y.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x) & Teenager(y) & AttendsCollege(y)) -> Teenager(x))", "(HasHighAmbitionsAndCareerGoals(Sam) & YoungAdolescent(Sam) & AttendsCollege(Sam))", "(HighAmbitionsAndCareerGoals(Sam) & YoungAdolescent(Sam) & AttendsCollege(Sam))", "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> YoungAdolescent(x))", "all x.(Sam(x) -> (HighAmbitionsAndCareerGoals(x) & YoungAdolescent(x) & AttendsCollege(x)))", "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x) & YoungAdolescent(x) & AttendsCollege(x)) -> Teenager(x))", "(HighAmbitionsAndCareerGoals(Sam) & Teenager(Sam) & AttendsCollege(Sam))", "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> Teenager(x))"]}
{"id": "folio_train_2430", "nl": "If Sam is a young teenage girl who attends college, then Sam either does not have high ambitions and future career goals or is a big fan of pop bands and singers.", "fol": "(AttendsCollege(Sam) -> (-HasHighAmbitions(Sam) | IsBigFanOfPopBands(Sam)))", "prediction": ["all x.((YoungTeenager(x) & AttendsCollege(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x)) | BigFanOfPopBandsAndSingers(x)))", "all x.((YoungAdolescent(x) & AttendsCollege(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x)) | BigFanOfPopBandsAndSingers(x)))", "all x.((YoungTenure(x) & AttendsCollege(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x)) | BigFanOfPopBandsAndSingers(x)))", "all x.((Tenant(x) & AttendsCollege(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x)) | BigFanOfPopBandsAndSingers(x)))", "all x y.((YoungTeenager(x) & AttendsCollege(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x)) | BigFanOfPopBandsAndSingers(y)))", "all x.((Jason(x) & YoungAdolescent(x) & AttendsCollege(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x)) | BigFanOfPopBandsAndSingers(x)))", "all x y.((YoungAdolescent(x) & AttendsCollege(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x)) | BigFanOfPopBandsAndSingers(y)))", "all x.((TeenAdult(x) & AttendsCollege(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x)) | BigFanOfPopBandsAndSingers(x)))", "all x y.((YoungTenure(x) & AttendsCollege(x) & Sam(y)) -> (-HighAmbitions(y) & FutureCareerGoals(y)) | BigFanOfPopBandsAndSingers(y)))", "all x.(AttendsCollege(x) -> ((YoungTeenager(x) & AttendsCollege(x)) & -HighAmbitions(x) & FutureCareerGoals(x)) | BigFanOfPopBandsAndSingers(x)))", "all x.((YearlyTenure(x) & AttendsCollege(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x)) | BigFanOfPopBandsAndSingers(x)))", "exists x.(YoungAdolescent(x) & AttendsCollege(x) & (-HighAmbitions(x) & FutureCareerGoals(x) | BigFanOfPopBandsAndSingers(x)))", "(all x.((YoungTeenager(x) & AttendsCollege(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x)) | (BigFanOfPopBands(x) & BigFanOfSingers(x))))", "all x.((YoungAdolescent(x) & AttendsCollege(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x)) | BigFanOfPopBandsAndSingers(x)))", "(all x.((YoungTeenager(x) & AttendsCollege(x)) -> (-HighAmbitionsAndCareerGoals(x) | BigFanOfPopBandsAndSingers(x))))", "all x.((YoungTeenager(x) & AttendsCollege(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x)) | BigFanOfPopBandsAndSingers(x)))"]}
{"id": "folio_train_2431", "nl": "If Sam has high ambitions and future career goals and is a young teenage girl who attends college, then Sam either does not have high ambitions and future career goals or is not a young teenage girl who attends college.", "fol": "((HasHighAmbitions(Sam) & AttendsCollege(Sam)) -> (-HasHighAmbitions(Sam) | -AttendsCollege(Sam)))", "prediction": ["all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x) & YoungDaughter(x) & AttendsCollege(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x)) | -AttendsCollege(x)))", "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x) & YoungDearlyAttendsCollege(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x)) | -AttendsCollege(x)))", "all x.(((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x) & YoungDaughter(x) & AttendsCollege(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x)) | -AttendsCollege(x)))", "all x.((Sam(x) & HighAmbitionsAndFutureCareerGoals(x) & YoungDaughter(x) & AttendsCollege(x)) -> (-HighAmbitionsAndFutureCareerGoals(x) | -AttendsCollege(x)))", "all x y.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x) & YoungDaughter(y) & AttendsCollege(x)) -> (-HighAmbitions(y) & FutureCareerGoals(y)) | -AttendsCollege(y)))", "all x y.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x) & YoungDearlyGirl(y) & AttendsCollege(x)) -> (-HighAmbitions(x) & FutureCareerGoals(y)) | -AttendsCollege(y)))", "(all x.((Same(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x)) | -AttendsCollege(x)))", "all x.((Sam(x) & HighAmbitionsAndFutureCareerGoals(x) & YoungDearlyTeacher(x) & AttendsCollege(x)) -> (-HighAmbitionsAndFutureCareerGoals(x) | -AttendsCollege(x)))", "all x.((Jason(x) & HighAmbitions(x) & FutureCareerGoals(x) & YoungDearlyAttendsCollege(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x) & -JasonAttendsCollege(x)))", "(all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x)) | -AttendsCollege(x)))", "all x.((HighAmbitionsAndFutureCareerGoals(x) & YoungDearlyAttendsCollege(x)) -> (-HighAmbitionsAndFutureCareerGoals(x) | -AttendsCollege(x)))", "(all x.(HighAmbitionsAndFutureCareerGoals(x) -> ((Same(x) & AttendsCollege(x)) & -HighAmbitionsAndFutureCareerGoals(x)) | -AttendsCollege(x))))", "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x) & YoungDaughter(x) & AttendsCollege(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x)) | -AttendsCollege(x)))", "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x) & YoungAdult(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x)) | -AdultsCollege(x)))", "all x.(HighAmbitionsAndFutureCareerGoals(x) -> ((SameDay(x) & YoungAdult(x) & AttendsCollege(x)) | (-SameDay(x) & HighAmbitionsAndFutureCareerGoals(x)))))", "all x y.((Sam(x) & HighAmbitionsAndFutureCareerGoals(x) & YoungDadge(y) & AttendsCollege(x)) -> (-HighAmbitionsAndFutureCareerGoals(x,y) | -AttendsCollege(y,x)))"]}
{"id": "folio_train_2432", "nl": "If Sam has high ambitions and future career goals, then Sam is a young teenage girl who attends college.", "fol": "(HasHighAmbitions(Sam) -> AttendsCollege(Sam))", "prediction": ["all x.((HighAmbitions(x) & FutureCareerGoals(x)) -> Teenager(x))", "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> Teenager(x))", "all x.((HighAmbitions(x) & FutureCareerGoals(x)) -> YoungAdolescent(x))", "(HighAmbitionsAndFutureCareerGoals(Sam) -> YoungAdolescent(Sam))", "(HighAmbitionsAndCareerGoals(Sam) -> YoungAdolescent(Sam))", "all x y.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> Teenager(y) & AttendsCollege(y))", "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> YoungAdolescent(x))", "all x.(HighAmbitionsAndFutureCareerGoals(x) -> YoungAdolescent(x))", "all x y.((HighAmbitions(x) & FutureCareerGoals(x) & Sam(y) & AttendsCollege(y)) -> YoungAdolescent(y))", "all x.(HighAmbitionsAndCareerGoals(x) -> (YoungAdolescent(x) & AttendsCollege(x)))", "all x.((Jason(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> YoungAdolescent(x))", "all x.((HighAmbitions(x) & FutureCareerGoals(x)) -> Teenager(x))", "all x y.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> YoungAdolescent(x))", "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> Teenager(x))", "all x.((HighAmbitions(x) & FutureCareerGoals(x)) -> YoungAdolescent(x))", "all x.(HighAmbitionsAndFutureCareerGoals(x) -> Teenager(x))"]}
{"id": "folio_train_2433", "nl": "A student who loves shrieking will be punished.", "fol": "all x.((IsStudent(x) & LovesShrieking(x)) -> WillBePunished(x))", "prediction": ["all x.((Student(x) & LovesShredding(x)) -> Punished(x))", "all x.((Student(x) & LovesShredding(x)) -> Punished(x))", "all x.((Student(x) & LovesSshrieking(x)) -> Punished(x))", "all x.(LovesShredding(x) -> Punished(x))", "all x y.((Student(x) & LovesShredding(x)) -> Punished(x))", "all x.((Student(x) & LovesShredding(x)) -> Punished(x))", "all x.(LovesShredding(x) -> Punished(x))", "all x y.((Student(x) & LovesShredding(x)) -> Punished(x))", "all x y.((Student(x) & LovesSshrieking(x)) -> Punished(x))", "all x.((Student(x) & LovesSshrieking(x)) -> Punished(x))", "(all x.(LovesShredding(x) -> Punished(x))", "all x.(LovesSshrieking(x) -> Punished(x))", "all x.((Student(x) & LovesShredding(x)) -> Punished(x))", "all x.((Student(x) & LovesSshrieking(x)) -> Punished(x))", "all x.(LovesShredding(x) -> Punished(x))", "all x.((Student(x) & LovesShreking(x)) -> Punished(x))"]}
{"id": "folio_train_2434", "nl": "If a person swears, then he is a student.", "fol": "all x.(Swears(x) -> IsStudent(x))", "prediction": ["all x.(Swears(x) -> Student(x))", "all x.(Swore(x) -> Student(x))", "all x.((Person(x) & Swears(x)) -> Student(x))", "all x.(Swears(x) -> Student(x))", "all x.(Swore(x) -> Student(x))", "all x y.((Person(x) & Swears(x)) -> Student(x))", "all x.((Person(x) & Swears(x)) -> Student(x))", "(Swears) -> Student(Person))", "all x.Swore(x) -> Student(x))", "all x.(Swears(x) -> Student(x))", "exists x.(Person(x) & Swears(x) & Student(x))", "all x.((Person(x) & Swears(x)) -> Student(x))", "all x.(Swore(x) -> Student(x))", "all x.(S swears(x) -> Student(x))", "all x.swears(x) -> Student(x))", "all x.((Person(x) & Sweats(x)) -> Student(x))"]}
{"id": "folio_train_2435", "nl": "If someone is a teacher, then Bob will talk to him.", "fol": "all x.(IsTeacher(x) -> TalksTo(Bob,x))", "prediction": ["all x.(Teacher(x) -> BobTalksTo(x,y))", "all x.((Teacher(x) & Bob(x)) -> TalksTo(x,y))", "all x.(Teacher(x) -> TalkToBob(x))", "(Teacher(Bob) -> TalksTo(Bob))", "all x y.((Teacher(x) & Teacher(y)) -> TalkTo(x,y))", "all x.((Teacher(x)) -> BobTalksTo(x,y))", "all x.(Teacher(x) -> BobTalksTo(x,y))", "all x.(Teacher(x) -> TalksTo(x,Bob))", "(Teacher(Bob) -> TalksTo(Bob))", "all x.((Teacher(x) & Bob(x)) -> TalksTo(x,Bob))", "all x y.((Teacher(x) & Teacher(y)) -> BobTalksTo(x,y))", "all x.((Teacher(x)) -> BobTalksTo(x,y))", "all x.(Teacher(x) -> BobTalksTo(x,y))", "all x.(Teacher(x) -> TalkToBob(x))", "exists x.(Teacher(x) & BobWillTalkTo(x,y))", "all x.(Teacher(x) -> BobTalksTo(x,y))"]}
{"id": "folio_train_2436", "nl": "All gentlemen are in a suit.", "fol": "all x.(IsGentleman(x) -> WearsSuit(x))", "prediction": ["all x.(Gentlemen(x) -> InSuite(x))", "all x.(Gentleman(x) -> InSuit(x))", "all x y.((Gentleman(x) & Gentleman(y)) -> InSuite(x,y))", "(all x.(Gentleman(x) -> InSuit(x)))", "(all x.(Gentleman(x) -> InSuite(x))", "all x.(Gentlemen(x) -> InSuite(x))", "all x.(Groomer(x) -> InSuite(x))", "all x y.((Gentleman(x) & Gentleman(y)) -> InSuit(x,y))", "all x.(Gentleman(x) -> InSuit(x))", "all x.(Gentlemen(x) -> InSuite(x))", "(all x.(Gentleman(x) -> InSuite(x))", "all x.(Groomer(x) -> InSuit(x))", "all x.(Gentleman(x) -> InSuit(x))", "all x.(Groomer(x) -> InSuite(x))", "all x.(Gentlemen(x) -> InSuite(x))", "all x.(Gentleman(x) -> InSuit(x))"]}
{"id": "folio_train_2437", "nl": "All teachers are men.", "fol": "all x.(IsTeacher(x) -> IsMan(x))", "prediction": ["all x.(Teacher(x) -> Men(x))", "all x.(Teacher(x) -> Men(x))", "(all x.(Teacher(x) -> Men(x))", "all x.(Teacher(x) -> Men(x))", "(all x.(Teacher(x) -> Men(x))", "all x.(Teacher(x) -> Men(x))", "(all x.(Teacher(x) -> Men(x))", "all x.(Teacher(x) -> Men(x))", "(All x.(Teacher(x) -> Men(x))", "all x.(Teacher(x) -> Men(x))", "all x.(Teacher(x) -> Men(x))", "all x.(Teacher(x) -> Man(x))", "all x.(Teacher(x) -> Male(x))", "all x.(Teacher(x) -> Men(x))", "all x.(Teacher(x) -> Men(x))", "all x.(Teacher(x) -> Man(x))"]}
{"id": "folio_train_2438", "nl": "There is a teacher.", "fol": "exists x.IsTeacher(x)", "prediction": ["exists x.(Teacher(x) & Teacher(x))", "Exists x.(Teacher(x) & Teacher(x))", "all x y.((Teacher(x) & Teacher(y)) -> exists z.((Teacher(z) & Teacher(z))))", "exists x.(Teacher(x) & Teacher(x))", "exists x.exists y.(Teacher(x) & Teacher(y))", "exists x.(Teacher(x) & Teacher(x))", "exists x.(Teacher(x) & Teacher(x))", "Exists x.(Teacher(x) & Teacher(x))", "exists x.exists y.(Teacher(x) & Teacher(y))", "exists x.(Teacher(x) & Teachers(y))", "exists x.(Teacher(x) & Teacher(x))", "exists x.(Teacher(x) & Teacher(y))", "exists x.(Teacher(x) & Teachers(y))", "exists x.(Teacher(x) & Teachers(y) & Teachers(z))", "exists x.(Teacher(x) & Teacher(x))", "exists."]}
{"id": "folio_train_2439", "nl": "If someone is not a gentlemen, then he is not nice.", "fol": "all x.(-IsGentleman(x) -> -IsNice(x))", "prediction": ["all x.((Person(x) & -Gentlemen(x)) -> -Nice(x))", "all x.((Person(x) & Gentlemen(x)) -> -Nice(x))", "all x.((Person(x) & -Gentlemen(x)) -> -Nice(x))", "all x.((Menu(x) & Gentlemen(x)) -> -Nice(x))", "(-Gentlemen(x) -> -Nice(x))", "all x.((Gentlemen(x) & -Gentlemen(x)) -> -Nice(x))", "(-Gentlemen(x) -> -Nice(x))", "all x.((Person(x) & -Gentlemen(x)) -> -Nice(x))", "all x.((Father(x) & Gentleman(x)) -> -Nice(x))", "all x.((Groomer(x) & -Gentlemen(x)) -> -Nice(x))", "all x y.((Person(x) & Gentlemen(y)) -> -Nice(x,y))", "all x.(-Gentlemen(x) -> -Nice(x))", "-Gentlemen(x) -> -Nice(x))", "all x.((Friendly(x) & -Gentlemen(x)) -> -Nice(x))", "all x.(-Gentlemen(x) -> -Nice(x))", "all x.(NotGentlemen(x) -> -Nice(x))"]}
{"id": "folio_train_2440", "nl": "Willy is nice.", "fol": "IsNice(Willy)", "prediction": ["Willy is nice.", "All x.(Willy(x) -> Nice(x))", "(Nice(Willy) & Nice(Willy))", "(Nice(Willy) -> Nice(Willy))", "Willy is nice.", "All x.(Willy(x) -> Nice(x))", "-Nice(Willy)", "Willy is nice.", "(Nice(Willy) & Nice(Willy))", "all x.(Willy(x) -> Nice(x))", "Willy is nice.", "-Nice(willy)", "All x.(Willy(x) -> Nice(x))", "Willy is nice.", "willy.", "Willy is nice."]}
{"id": "folio_train_2441", "nl": "Bob loves shrieking and swearing.", "fol": "(LovesShrieking(Bob) & Swears(Bob))", "prediction": ["all x.((Bob(x) & Shredding(x) & Swearing(x)) -> Loves(x))", "(LikesSshrieking(Bob) & LovesSwearing(Bob))", "(LovesShredding(Bob) & LovesSwearing(Bob))", "(LovesSshrieking(Bob) & LovesSwearing(Bob))", "all x.((Rob(x) & Shredding(x) & Swearing(x)) -> Loves(x))", "-(LovesSshrieking(Bob) & LovesSwearing(Bob))", "Bob lovesSshriekingAndSwearing.", "all x.(Bob(x) -> (LovesShredding(x) & LovesSwearing(x)))", "all x.((Bob(x) & Shrieking(x) & Swearing(x)) -> Loves(x))", "(LivingSshrieking(Bob) & LovesSwearing(Bob))", "Bob lovesSshriekingAndSwearing.", "all x.((Bob(x) & Shredding(x) & Swearing(x)) -> Loves(x,y))", "(LikesShredding(Bob) & LovesSwearing(Bob))", "all x y.((Rob(x) & Shredding(y)) -> Swearing(x,y))", "(LovesSshrieking(Bob) & LovesSwearing(Bob))", "all x.((Bob(x) & Shrieking(x) & Swearing(x)) -> Loves(x))"]}
{"id": "folio_train_2442", "nl": "Willy is in a suit.", "fol": "WearsSuit(Willy)", "prediction": ["Willy is in a suit.", "All x.(Willy(x) -> InSuit(x))", "(InSuit(Willy))", "(Suite(Willy) & In(Willy,Suite))", "Willy is in a suit.", "(InSuite(Willy) & InSuite(Willy))", "Willy inseams(Willy,Suite)", "(InSuit(Willy))", "All x.(Willy(x) -> InSuit(x))", "Willy is in a suit.", "willy inseam(willy,suit)", "all x.(Willy(x) -> InSuite(x))", "Willy is inSuit(Willy)", "Willy is in a suit.", "all x.(Suit(x) -> Willy(x))", "All x.(Willy(x) -> InSuit(x))"]}
{"id": "folio_train_2443", "nl": "Bob will be not punished.", "fol": "-WillBePunished(Bob)", "prediction": ["all x.(Bob(x) -> -Punished(x))", "Bob will not be punished.", "(Bob will be -Punished(Bob))", "all x.((Bob(x) & -Punished(x)) -> -Punished(x))", "-Punished(Bob)", "all x.(Bob(x) -> -Punished(x))", "(Bob) -> -Punished(Bob))", "(Bob will not bePunished(Bob))", "Bob will not be punished.", "all x.(Bob(x) -> -Penalized(x))", "Bob will be notpunished.", "-Penalized(Bob)", "-Punished(Bob)", "all x.(Bob(x) -> -Punished(x))", "All x.(Bob(x) -> -Penalized(x))", "all x.(Bob(x) -> -Peaced(x))"]}
{"id": "folio_train_2444", "nl": "There is a man that Bob will talk to.", "fol": "exists x.(IsMan(x) & TalksTo(Bob,x))", "prediction": ["exists x.(Man(x) & BobTalksTo(x))", "exists x y.(Man(x) & Bob(y) & TalksTo(y,x))", "exists x.(Man(x) & BobTalksTo(x))", "exists x.(Man(x) & BobTalksTo(x))", "exists x y.(Man(x) & Bob(y) & TalkTo(y,x))", "exists x.(Man(x) & BobTalksTo(x))", "all x y.((Man(x) & Bob(y)) -> TalksTo(y,x))", "exists x.(Men(x) & BobTalksTo(x))", "all x y.((Man(x) & Bob(y) & TalksTo(y,x)) -> TalksTo(y,x))", "exists x.(Man(x) & BobTalksTo(x))", "(exists x.(Man(x) & BobTalksTo(x)))", "exists x.(Menu(x) & BobTalksTo(x))", "all x y.((Man(x) & Bob(y) & TalksTo(y,x)) -> TalksTo(y,x))", "exists x.(Bob(x) & TalksTo(x,Bob))", "exists x.(Man(x) & BobTalksTo(x))", "exists x.(Man(x) & BobTalksTo(x))"]}
{"id": "folio_train_2445", "nl": "Quincy McDuffie is an American professional wide receiver in Canadian Football.", "fol": "(IsAmerican(Quincymcduffie) & IsProfessional(Quincymcduffie) & IsWideReceiver(Quincymcduffie) & PlaysInLeague(Quincymcduffie,Canadianfootball))", "prediction": ["Quincy McDuffie (AmericanProfessionalWideReceiver(Quincy) & InCanadianFootball(Quincy))", "(ProfessionalWideReceiver(QuincyMcDuffie) & American(QuincyMcDuffie) & CanCanFootball(QuincyMcDuffie))", "-(WideReceiver(QuincyMcDuffie) & American(QuincyMcDuffie) & Professional(QuincyMcDuffie))", "All x.((WideReceiver(x) & AmericanProfessional(x) & CanadianFootball(x)) -> QuincyMcDuffie(x))", "(WideReceiver(QuincyMcDuffie) & American(QuincyMcDuffie) & Professional(QuincyMcDuffie) & CanCanFootball(QuincyMcDuffie))", "Quincy McDuffie (AmericanProfessionalWideReceiver(x) & InCanadianFootball(x))", "Quincy McDuffie (AmericanWideReceiver(x) & Professional(x) & InCanadianFootball(x))", "(ProfessionalWideReceiver(QuincyMcDuffie) & American(QuincyMcDuffie) & InCanadianFootball(QuincyMcDuffie))", "QuincyMcDuffie(McDuffie) (AmericanProfessionalWideReceiver(McDuffie) & CanadianFootball(McDuffie))", "Quincy McDuffie is a professional wide receiver in Canadian Football.", "(ProfessionalWideReceiver(QuickyMcDuffie,CanadianFootball) & American(QuickyMcDuffie))", "(ProfessionalWideReceiver(QuincyMcDuffie) & American(QuincyMcDuffie) & PlaysCanadianFootball(QuincyMcDuffie))", "Quincy McDuffie(QuincyMcDuffie) is a professional wide receiver in Canadian Football.", "Quincy McDuffie,WideReceiver(x) & Professional(x) & Professional(x) & CanadianFootball(x))", "Quincy McDuffie (AmericanProfessionalWideReceiver(Quickly) & InCanadianFootball(Quickly))", "Quincy McDuffie is a professional wide receiver in Canadian Football."]}
{"id": "folio_train_2446", "nl": "People who can catch balls are good wide receivers. ", "fol": "all x.(exists y.(CanCatch(x,y) & IsBall(y)) -> IsGoodWideReceiver(x))", "prediction": ["all x.((Person(x) & CanCatchBalls(x)) -> GoodWideReceiver(x))", "all x.((CanCatchBalls(x) & CanFocus(x)) -> GoodWideReceiver(x))", "all x.((Person(x) & CanCatchBalls(x)) -> GoodWideReceiver(x))", "all x.(CanCatchBalls(x) -> GoodWideReceiver(x))", "all x y.((Person(x) & CanCatchBalls(x)) -> GoodWideReceiver(y))", "all x.((Person(x) & CanCatchesBalls(x)) -> GoodWideReceiver(x))", "all x.((CanCatchBalls(x) & CanFishBalls(x)) -> GoodWideReceiver(x))", "all x.(CanCatchBalls(x) -> GoodWideReceiver(x))", "all x y.((Person(x) & CanCatchBalls(x)) -> GoodWideReceiver(y))", "all x.((Person(x) & CatchBalls(x)) -> GoodWideReceiver(x))", "all x.((Person(x) & CanCatchBalls(x)) -> GoodWideReceiver(x))", "all x y.((Person(x) & CanCatchesBalls(x)) -> GoodWideReceiver(x))", "all x.((CanCatchesBalls(x)) -> GoodWideReceiver(x))", "all x.(CanCatchesBalls(x) -> GoodWideReceiver(x))", "all x.((Person(x) & CanCatchesBalls(x)) -> GoodWideReceiver(x))", "all x.(CanCatchBalls(x) -> GoodWideReceiver(x))"]}
{"id": "folio_train_2447", "nl": "Quincy McDuffie can catch many footballs easily.", "fol": "exists x.(IsFootball(x) & CanCatch(Quincymcduffie,x))", "prediction": ["all x.(QuincyMcDuffie(x) -> CanCatchManyFootballsEasily(x))", "Quincy McDuffie can catch many footballs easily.", "all x.((QuincyMcDuffie(x) & Football(y)) -> CanCatchEasily(x,y))", "QuincyMcDuffie(Quincy) & CanCatchFootballsEasily(Quincy))", "EasilyCatchesFootballs(QuincyMcDuffie)", "(CatchFootballs(QuincyMcDuffie) -> CanEasily(QuincyMcDuffie))", "Quincy McDuffie (QuincyMcDuffie(x) & CanCatchManyFootballsEasily(x))", "QuincyMcDuffie(QuincyMcDuffie) & CanCatchManyFootballsEasily(QuincyMcDuffie)", "(CatchMcDuffieFootballsEasily(Quincy))", "all x y.((QuincyMcDuffie(x) & Football(y)) -> CanCatchEasily(x,y))", "Quincy McDuffie(Quincy) & CanCatchManyFootballsEasily(Quincy))", "Quincy McDuffie can catch many footballs easily.", "all x.(QuincyMcDuffie(x) -> CanCatchesManyFootballsEasily(x))", "All x.(QuickChaduffie(x) -> CanCatchFootballsEasily(x))", "all x.((QuincyMcDuffie(x) & Football(y)) -> CanCatchEasily(x,y))", "All x.(QuincyMcDuffie(x) -> CanCatchFootballsEasily(x))"]}
{"id": "folio_train_2448", "nl": "Good wide receivers play professionally.", "fol": "all x.(IsGoodWideReceiver(x) -> IsProfessional(x))", "prediction": ["all x.(GoodWideReceiver(x) -> PlaysProfessionally(x))", "all x.(GoodWideReceiver(x) -> PlayProfessionally(x))", "all x y.((WideReceiver(x) & Wide Receiver(y) & PlaysProfessionally(x)) -> Good(x))", "all x.((WideReceiver(x) & Good(x)) -> PlaysProfessionally(x))", "all x.(GoodWideReceiver(x) -> PlaysProfessionally(x))", "all x y.((WideReceiver(x) & Wide Receiver(y) & Professional(y)) -> Plays(x,y))", "all x.((WideReader(x) & Good(x)) -> PlaysProfessionally(x))", "all x.((GivewideReceiver(x) & Good(x)) -> PlaysProfessionally(x))", "all x y.((WideReceiver(x) & Wide Receiver(y) & PlaysProfessionally(x,y)) -> Good(x))", "all x.(GoodWidesendReceiver(x) -> PlaysProfessionally(x))", "all x.((WideReceiver(x) & Good(x)) -> PlaysProfessionally(x))", "all x.(GoodWideReceiver(x) -> PlayProfessionally(x))", "all x.(GoodWearer(x) -> PlaysProfessionally(x))", "exists x.(WideReceiver(x) & PlaysProfessionally(x))", "all x y.((WideReceiver(x) & Wide Receiver(y) & Professional(y)) -> Plays(x,y))", "all x.(GoodWideReceiver(x) -> PlaysProfessionally(x))"]}
{"id": "folio_train_2449", "nl": "Good wide receivers can catch with both their left and right hand.", "fol": "all x.(IsGoodWideReceiver(x) -> (CatchesWith(x,Lefthand) & CatchesWith(x,Righthand)))", "prediction": ["all x.((WideReceiver(x) & LeftHand(x) & RightHand(x)) -> CanCatch(x))", "all x y.((WideReceiver(x) & Wide Receiver(y)) -> (CanCatchWith(x,y) & CanCatchWith(x,y)))", "(GoodWideReceiver(x) -> (CatchWithLeftHand(x) & CatchWithRightHand(x)))", "all x.(GoodWideReceiver(x) -> (CatchWithLeftHand(x) & CatchWithRightHand(x)))", "all x.((WideReceiver(x) & LeftHand(x) & RightHand(x)) -> CanCatch(x))", "all x y.((GivenWideReceiver(x) & Wide Receiver(y)) -> (CanCatchWithLeftHand(x,y) & CanCatchWithRightHand(x,y)))", "all x.((GivenWideReceiver(x) & LeftHand(x) & RightHand(x)) -> CanCatch(x))", "all x y.((WideReceiver(x) & Wide Receiver(y)) -> (CatchWithLeftHand(y,x) & CatchWithRightHand(y,x)))", "all x.(GoodWideReceiver(x) -> (CanCatchWithLeftHand(x) & CanCatchWithRightHand(x)))", "all x.(GoodWeaveReceiver(x) -> (CanCatchWithLeftHand(x) & CanCatchWithRightHand(x)))", "all x y.((WideReceiver(x) & LeftHand(y) & RightHand(y)) -> CanCatch(x,y))", "all x.((WideReceiver(x) & LeftHand(x) & RightHand(x)) -> CanCatchWith(x,y))", "all x.((GivenWideReceiver(x) & LeftHand(x) & RightHand(x)) -> CanCatch(x))", "all x.(GoodWideReceiver(x) -> (CatchWithLeftHand(x) & CatchWithRightHand(x)))", "all x.((WideReceiver(x) & LeftHand(x) & RightHand(x)) -> CanCatch(x))", "all x.(GoodWideReceiver(x) -> (CanCatchWithLeftHand(x) & CanCatchWithRightHand(x)))"]}
{"id": "folio_train_2450", "nl": "All footballs are balls.", "fol": "all x.(IsFootball(x) -> IsBall(x))", "prediction": ["all x.(Football(x) -> Ball(x))", "all x.(Football(x) -> Ball(x))", "all x.exists y.(Football(x) & Ball(y) & DesignedFor(x,y))", "all x y.((Football(x) & Ball(y)) -> Ball(x))", "all x.(Football(x) -> Ball(x))", "(all x.(Football(x) -> Ball(x))", "all x.(Football(x) -> Ball(x))", "(all x.(Football(x) -> Ball(x))", "all x.(Football(x) -> Ball(x))", "all x.(Football(x) -> Ball(x))", "all x.(Football(x) -> Ball(x))", "all x.(Football(x) -> Ball(x))", "exists x.(Football(x) & Ball(y) & -Ball(z))", "all x.(Football(x) -> Ball(x))", "all x.(Football(x) -> Ball(x))", "all x.(Football(x) -> Ball(x))"]}
{"id": "folio_train_2451", "nl": "Quincy McDuffie is a good wide receiver.", "fol": "IsGoodWideReceiver(Quincymcduffie)", "prediction": ["all x.((QuincyMcDuffie(x) & GoodWideReceiver(x)) -> Good(x))", "Quincy McDuffie is a good wide receiver.", "(GoodWideReceiver(QuincyMcDuffie)", "all x.(QuincyMcDuffie(x) -> GoodWideReceiver(x))", "all x.((QuincyMcDuffie(x) & GoodWideReceiver(x)) -> GoodWideReceiver(x))", "Quincy McDuffie is a good wide receiver.", "(GoodWideReceiver(QuincyMcDuffie)", "All x.(QuickChaduffie(x) -> GoodWideReceiver(x))", "all x.(QuincyMcDuffie(x) -> GoodWideReceiver(x))", "QuincyMcDuffie is a good wide receiver.", "Quincy McDuffie is a good wide receiver.", "(GoodWideReceiver(QuincyMcDuffie)", "all x.((QuincyMcDuffie(x) & GoodWideReceiver(x)) -> Good(x))", "Quincy McDuffie is a good wide receiver.", "(GoodWideReceiver(QuickyMcDuffie)", "Quincy McDuffie is a good wide receiver."]}
{"id": "folio_train_2452", "nl": "Quincy McDuffie can catch every ball.", "fol": "all y.(IsBall(y) -> CanCatch(Quincymcduffie,y))", "prediction": ["all x.(QuincyMcDuffie(x) -> CanCatchBall(x))", "Quincy McDuffie canCatchEveryBall(QuincyMcDuffie)", "all x.((QuincyMcDuffie(x) & Ball(y)) -> CanCatch(x,y))", "(CatchBall(QuincyMcDuffie) -> CanCatchBall(QuincyMcDuffie))", "Quincy McDuffie CanCatchBall(QuincyMcDuffie)", "-CanCatchAllBalls(QuincyMcDuffie)", "(CanCatchBall(QuincyMcDuffie)", "Quincy McDuffie (QuincyMcDuffie) - CanCatchAllBalls(QuincyMcDuffie))", "Quincy McDuffie(Quincy) & CanCatchBall(Quincy))", "all x.(QuincyMcDuffie(x) -> CanCatchesBall(x))", "-CanCatchBall(QuincyMcDuffie)", "all x.(QuickChaduffie(x) -> CanCatchBall(x))", "QuincyMcDuffie(Quincy)", "All x.(QuincyMcDuffie(x) -> CanCatchEveryBall(x))", "All x.(QuincyMcDuffie(x) -> CanCatchAllBalls(x))", "Quincy McDuffie can catch every ball."]}
{"id": "folio_train_2453", "nl": "Professional wide receivers are good at catching balls.", "fol": "all x.((IsProfessional(x) & IsWideReceiver(x)) -> (GoodAtCatching(x,y) & IsBall(y)))", "prediction": ["all x.(ProfessionalWideReceiver(x) -> GoodAtCatchingBalls(x))", "all x y.((ProfessionalWideReceiver(x) & Ball(y)) -> GoodAtCatching(x,y))", "(GoodAtCatchingBalls(ProfessionalWideReceiver(Professional))", "all x.((ProfessionalWideReceiver(x) & GoodAtCatchingBalls(x)) -> GoodAtCatchingBalls(x))", "all x.(ProfessionalWideReceiver(x) -> GoodAtCatchingBalls(x))", "all x.(WideReceiver(x) -> GoodAtCatchingBalls(x))", "all x y.((ProfessionalWideReceiver(x) & Ball(y)) -> GoodAtCatching(x,y))", "all x.((ProfessionalWideReceiver(x) & CatchBalls(x)) -> GoodAt(x))", "all x.(ProfessionalWideReceiver(x) -> GoodAtCatchingBalls(x))", "all x.(ProfessionalWideReceiver(x) -> GoodAtCatchingBalls(x))", "all x y.((ProfessionalWideReceiver(x) & Ball(y)) -> GoodAtCatching(x,y))", "all x.(WideReceiver(x) -> GoodAtCatchingBalls(x))", "all x y.((ProfessionalWideReceiver(x) & Ball(y)) -> GoodAt(x,y))", "all x.(ProfessionalWideReceiver(x) -> GoodAtCatchingBalls(x))", "all x y.((ProfessionalWideReceiver(x) & Ball(y)) -> GoodAtCatching(x,y))", "all x.(ProfessionalWideReceiver(x) -> GoodAtCatchingBalls(x))"]}
{"id": "folio_train_2454", "nl": "Boves is a railway station located in France. ", "fol": "(IsRailwayStation(Boves) & IsLocatedIn(Boves,France))", "prediction": ["all x.(Boves(x) -> RailwayStation(x))", "(RailwayStation(Boves) & LocatedInFrance(Boves))", "Boves (RailwayStation(Boves) & LocatedInFrance(Boves))", "LocatedInFrance(Boves)", "Boves is a railway station located in France.", "Boves Station (RailwayStation(Boves) & LocatedInFrance(Boves))", "all x.(Boves(x) -> RailwayStation(x))", "(RailwayStation(Boves) & LocatedInFrance(Boves))", "all x.(Boves(x) -> (RailwayStation(x) & LocatedInFrance(x)))", "all x y.((Boves(x) & RailwayStation(y)) -> LocatedIn(x,y))", "Boves (RailwayStation(Boves) & LocatedInFrance(Boves))", "(RailwayStation(Boves) & LocatedIn(Boves,France))", "Boves is a railway station located in France.", "all x.(Boves(x) -> RailwayStation(x))", "(RailwayStation(Boves) & LocatedInFrance(Boves))", "all x.(Boves(x) -> RailwayStation(x))"]}
{"id": "folio_train_2455", "nl": "The preceding station of Boves is Longueau.", "fol": "IsPrecededBy(Boves,Longueau)", "prediction": ["all x.(Boves(x) -> Longueau(x))", "(PassendingStation(Boves) -> Longueau(Boves))", "(PreceedingStation(Boves) -> Longueau(Boves))", "(PastStationOfBoves(Boves) -> Longueau(Boves))", "La station pr\u00e9c\u00e9dente de Boves est Longueau.", "La station pr\u00e9c\u00e9ding Boves (Boves) -> Longueau(b))", "(PassendingStationOfBoves(Boves) -> Longueau(Boves))", "the precedingStationOfBoves(x) -> Longueau(x))", "all x.(Boves(x) -> Longueau(x))", "-Boves(BovesStation)", "all x.((BovesStation(x) & LongueauStation(x)) -> PreviousStation(x))", "(PreceedingStation(Boves) -> Longueau(Boves))", "All x.(BovesStation(x) -> Longueau(x))", "-Boves(b) & Station(c) & Longueau(c))", "all x.(Boves(x) -> Longueau(x))", "All x.(Boves(x) -> Longueau(x))"]}
{"id": "folio_train_2456", "nl": "The preceding station of Dommartin is Boves.", "fol": "IsPrecededBy(Dommartin,Boves)", "prediction": ["(PassendingStationOfDommartin(Dommartin) -> Boves(Dommartin))", "all x.(Dommartin(x) -> Boves(x))", "(PastStationOfDommartin(Dommartin) -> Boves(Dommartin))", "(PreceedingStation(Dommartin) -> Boves(Dommartin))", "all x.((Station(x) & Dommartin(x)) -> Boves(x))", "the precedingStationOfDommartin(x) -> Boves(x))", "-exists x.(Dommartin(x) & Boves(x))", "Boves (PassingStationOfDommartin)", "(PeteringStationOfDommartin(dommartin) -> Boves(dommartin))", "-Boves(dommartin)", "-PreceedingStationOfDommartin(x) -> Boves(x))", "all x.(Dommartin(x) -> Boves(x))", "Die vorangegangeneStationOfDommartin(x) -> Boves(x))", "(PreceedingStationOfDommartin(dommartin) -> Boves(dommartin))", "(PassendingStation(dommartin) -> Boves(dommartin))", "All x.(Dommartin(x) -> Boves(x))"]}
{"id": "folio_train_2457", "nl": "France is a European country.", "fol": "IsLocatedIn(France,Europe)", "prediction": ["all x.(France(x) -> EuropeanCountry(x))", "(EuropeanCountry(France) & EuropeanCountry(France))", "all x.(France(x) -> EuropeanCountry(x))", "(EuropeanCountry(France) & LocatedIn(France,EuropeanCountry))", "all x.(France(x) -> EuropeanCountry(x))", "(EuropeanCountry(France) & LocatedIn(France,France))", "(EuropeanCountry(France) & EuropeanCountry(France))", "all x.(France(x) -> EuropeanCountry(x))", "all x.(France(x) -> EuropeanCountry(x))", "(EuropeanCountry(France)", "all x.(France(x) -> EuropeanCountry(x))", "all x.(France(x) -> EuropeanCountry(x))", "(EuropeanCountry(France)", "all x.(France(x) -> EuropeanCountry(x))", "all x.(France(x) -> EuropeanCountry(x))", "(EuropeanCountry(France)"]}
{"id": "folio_train_2458", "nl": "Dommartin is situated on the Paris\u2013Lille railway. ", "fol": "IsSituatedOn(Dommartin,PairsLille)", "prediction": ["(SituatedOnRailway(Dommartin) & ParisLille(Dommartin))", "all x.(Dommartin(x) -> SituatedOnRailway(x,Paris,Lille))", "LocatedOnRailway(Dommartin)", "Dommartin is situated on the ParisLilleRailway(Dommartin)", "(SituatedOnRailway(Dommartin,Paris) & SituatedOnLille(Dommartin,Lille))", "(SurroundedOnRailway(Dommartin,Paris) & SurroundedOnLille(Dommartin,Lille))", "Dommartin is situated on the Paris\u2013Lille Railway.", "all x.(Dommartin(x) -> SituatedOnRailway(x,Paris,Lille))", "all x y.((Dommartin(x) & Railway(y)) -> SituatedOn(x,y))", "all x.(Dommartin(x) -> SitsOnRailway(x,Paris,Lille))", "LocatedOnRailway(Dommartin,Paris) & Lille(Dommartin))", "LocatedOnRailway(Dommartin)", "(SituatedOnRailway(Dommartin) & ParisLille(Dommartin))", "LocatedOnRailway(dommartin,Paris) & Lille(dommartin))", "All x.(Dommartin(x) -> (SituatedOnRailway(x,Paris) & SituatedOnLille(x)))", "(SituatedOnRailway(Dommartin,Paris) & LocatedOnLille(Dommartin,Lille))"]}
{"id": "folio_train_2459", "nl": "Any two contiguous stations are on the same railway.", "fol": "all z.((IsSituatedOn(x,z) & (IsPrecededBy(x,y) | IsPrecededBy(y,x))) -> IsSituatedOn(y,z))", "prediction": ["all x.((ContiguousStation(x) & ContiguousStation(x)) -> OnSameRailway(x))", "all x.(ContiguousStation(x) -> OnSameRailway(x))", "all x y.((ContiguousStation(x) & ContiguousStation(y)) -> OnSameRailway(x,y))", "all x.((ContiguousStation(x) & ContiguousStation(x)) -> OnSameRailway(x))", "all x.((Station(x) & Contiguous(x)) -> OnSameRailway(x))", "all x.(ContiguousStation(x) -> OnSameRailway(x))", "all x y.((ContiguousStation(x) & ContiguousStation(y)) -> OnSameRailway(x,y))", "exists x.(Station(x) & Contiguous(x) & OnSameRailway(x))", "all x.((ContiguousStation(x) & ContiguousStation(x)) -> OnSameRailway(x))", "exists x.(ContiguousStation(x) & ContiguousStation(x) & OnSameRailway(x))", "all x.(ContiguousStation(x) -> OnSameRailway(x))", "all x y.((ContiguousStation(x) & ContiguousStation(y)) -> OnSameRailway(x,y))", "exists x.(ContiguousStation(x) & SameRailway(x))", "all x y.((ContiguousStation(x) & ContiguousStation(y)) -> OnSameRailway(x,y))", "all x y.((ContiguousStation(x) & ContiguousStation(y)) -> SameRailway(x,y))", "exists x.(ContiguousStation(x) & OnSameRailway(x))"]}
{"id": "folio_train_2460", "nl": "Boves is served by regional TER Hauts-de-France trains.", "fol": "IsServedBy(HautsDeFrance,Boves)", "prediction": ["all x.(Boves(x) -> ServedByRegionalTERTrains(x,HautsDeFrance))", "all x y.((Boves(x) & RegionalTrain(y)) -> Serves(x,y))", "all x.(Boves(x) -> (ServedByRoads(x) & HautsDeFranceTrains(x)))", "(ServicedBy(Boves) & RegionalTrain(Boves))", "(ServicedByRegionalTrains(Boves) & TER HautsDeFrance(Boves))", "(ServicedByTrains(Boves) & RegionalTrains(Boves))", "ServedByRegionalTrain(Boves,TER,HautsDeFrance)", "all x y.((Boves(x) & RegionalTrain(y)) -> ServicedBy(x,y))", "all x y z.((Boves(x) & RegionalTrain(y) & HautsDeFrance(z)) -> Serves(x,y,z))", "all x.(Boves(x) -> ServedByRegionalTrains(x,HautsDeFrance))", "all x.(Boves(x) -> (ServedByRoad(x) & RegionalTrain(x,HautsDeFrance)))", "(ServicedByRuralTrains(Boves) & HautsDeFranceTrain(Boves))", "ServedByRoadLines(Boves,TER)", "all x y.((Boves(x) & RegionalTrain(y)) -> Serves(x,y))", "all x.(Boves(x) -> ServedByRegionalTERTrains(x))", "All x.(Boves(x) -> ServicedBy(x,Roads,HighsDeFrance))"]}
{"id": "folio_train_2461", "nl": "If A is located in B and B is located in C, then A is located in C.", "fol": "all z.((IsLocatedIn(x,y) & IsLocatedIn(y,z)) -> IsLocatedIn(x,z))", "prediction": ["all x.((LocatedIn(x,B) & LocatedIn(x,C)) -> LocatedIn(x,C))", "all x y.((LocatedIn(x,y) & B(y) & LocatedIn(x,y)) -> LocatedIn(x,y))", "all x.((LocatedIn(x,B) & LocatedIn(x,C)) -> LocatedIn(x,C))", "all x y.((LocatedIn(x,y) & BLocatedIn(x,y)) -> LocatedIn(x,y))", "all x.((LocatedInB(x) & LocatedInC(x)) -> LocatedInC(x))", "(all x y.((LocatedIn(x,B) & LocatedIn(x,C)) -> LocatedIn(x,C)))", "all x y z.((A(x) & B(y) & C(z) & LocatedIn(x,y,z)) -> LocatedIn(x,y,z))", "(all x.((LocatedInB(x) & LocatedInC(x)) -> LocatedInC(x)))", "all x y.((A(x) & B(y) & LocatedIn(x,y)) -> LocatedIn(x,y))", "(all x.((LocatedIn(x,B) & LocatedIn(x,C)) -> LocatedIn(x,C))", "(all x.(LocatedInB(x) -> LocatedInC(x)))", "all x.((LocatedIn(x,B) & LocatedIn(x,C)) -> LocatedIn(x,C))", "(all x.((LocatedInB(x) & locatedInC(x)) -> LocatedInC(x)))", "all x.((AreLocatedIn(x,B) & ARelocatedIn(x,C)) -> RelocatedIn(x,C))", "exists x.(LocatedIn(x,B) & LocatedIn(x,C))", "all x y.((LocatedIn(x,B) & LocatedIn(x,C)) -> LocatedIn(x,C))"]}
{"id": "folio_train_2462", "nl": "If A precedes B and B preceds C, than A preceds C.", "fol": "all z.((IsPrecededBy(x,y) & IsPrecededBy(y,z)) -> IsPrecededBy(x,z))", "prediction": ["all x.((Preceeds(x,B) & Preceeds(x,C)) -> Preceeds(x,C))", "all x y.((Preceeds(x,y) & B(y) & Preceeds(x,y)) -> Preceeds(x,y))", "(PreceedsB(A) & PreceedsB(B)) -> PreceedsC(A))", "((PreceedsB(A) & PreceedsB(B)) -> PreceedsC(A))", "all x.((PreceedsB(x) & PreceedsB(x)) -> PreceedsC(x))", "all x.((Preceeds(x,B) & Preceeds(x,C)) -> Preceeds(x,C))", "all x.((Paves(x,B) & Preceeds(x,C)) -> Preceeds(x,C))", "all x y.((Preceeds(x,y) & B(y) & Preceeds(x,y)) -> Preceeds(x,y))", "(all x.((PreceedsB(x) & PreceedsC(x)) -> PreceedsC(x)))", "all x y.((Pauses(x,y) & Preceeds(x,y)) -> Preceeds(x,y))", "all x y.((PreceedsB(x) & PreceedsB(x,y)) -> PreceedsC(x,y))", "all x.(Preceeds(x,B) & Preceeds(x,C)) -> Preceeds(x,C))", "all x y z.((Preceeds(x,y) & B(z) & Priorities(x,z)) -> Preceeds(x,z))", "(all x.(PreceedsB(x) -> PreceedsC(x)))", "exists x.(Peers(x,A) & Preceeds(x,B) & Preceeds(x,C))", "All x.(PreceedsB(x) -> PreceedsC(x))"]}
{"id": "folio_train_2463", "nl": "Boves is not in Europe.", "fol": "-IsLocatedIn(Boves,Europe)", "prediction": ["all x.(Boves(x) -> -InEurope(x))", "(Boves(Boves) & -InEurope(Boves))", "-(BovesInEurope(Boves))", "Boves is not inEurope.", "Boves is notInEurope(Boves)", "(Boves(b) & -InEurope(b))", "-InEurope(Boves)", "all x.(Boves(x) -> -InEurope(x))", "Boves -InEurope(Boves)", "(Boves(Boves) & -InEurope(Boves))", "-Europe.", "-(BovesInEurope(b) & -InEurope(b))", "(Boves(b) & -InEurope(b))", "Boves is not in Europe.", "Boves -InEurope(Boves)", "Boves is not in Europe."]}
{"id": "folio_train_2464", "nl": "Longueau is served by regional TER Hauts-de-France trains.", "fol": "IsServedBy(HautsDeFrance,Longueau)", "prediction": ["all x.(Longueau(x) -> ServedByRegionalTERTrains(x,HautsDeFrance))", "Longueau is served by regional TER HautsDeFrance trains.", "(ServedByRegionalTERTrains(Longueau) & HautsDeFranceTrains(Longueau))", "all x y.((Longueau(x) & RegionalTrain(y)) -> Serves(x,y))", "(ServicedByRegionalTER(Longueau) & HautsDeFranceTrain(Longueau))", "(ServicedBy(Longueau,TER) & RegionalTrain(HautsDeFrance))", "(ServicedByRegionalTERTrains(Longueau) & HautsDeFranceTrains(Longueau))", "all x.(Longueau(x) -> ServedByRegionalTERTrains(x,HautsDeFrance))", "-exists x.(Longueau(x) & RegionalTERTrain(x) & HautsDeFrance(x))", "Longueau is served by regional TER HautsDeFrance trains.", "all x.(Longueau(x) -> ServedByRoads(x,HautsDeFrance))", "all x y.((Longueau(x) & RegionalTrain(y) & TER(y)) -> Serves(x,y))", "ServedByRegionalTERTrains(Longueau)", "All x.(Longueau(x) -> ServicedByRegionalTER(x,HautsDeFrance))", "all x y.((Longueau(x) & RegionalTERTrain(y)) -> Serves(x,y))", "All x.(Longueau(x) -> ServesByRoad(x,HautsDeFrance))"]}
{"id": "folio_train_2465", "nl": "Edwin Smith was a New Zealand Rower from Auckland.", "fol": "(OriginatesFrom(Edwinsmith,Newzealand) & IsRower(Edwinsmith) & OriginatesFrom(Edwinsmith,Auckland))", "prediction": ["Edwin Smith (NZRower(n) & FromAuckland(n))", "EdwinSmith(Edwin) & NewZealandRower(Edwin,Auckland))", "all x.((EdwinSmith(x) & NewZealandRower(x) & FromAuckland(x)) -> EdwinSmith(x))", "Edwin Smith (NewZealandRower(Edwin) & FromAuckland(Edwin))", "EdwinSmith(e) & NewZealandRower(e) & FromAuckland(e))", "(NewZealandRower(EdwinSmith) & FromAuckland(EdwinSmith))", "(NewZealander(EdwinSmith) & NewZealander(EdwinSmith) & FromAuckland(EdwinSmith))", "(NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & FromAuckland(EdwinSmith))", "Edwin Smith (NZRower(NZ) & FromAuckland(EdwinSmith))", "EdwinSmith(Edwin) & New ZealandRower(Edwin) & FromAuckland(Edwin))", "(NZRower(EdwinSmith) & NewZealandRower(EdwinSmith,Auckland))", "Edwin Smith was a NewZealandRower(e) & FromAuckland(e))", "EdwinSmith(Edwin) & NewZealandRower(Edwin) & FromAuckland(Edwin))", "(NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & FromAuckland(EdwinSmith))", "Edwin Smith (NewZealandRower(e) & FromAuckland(e))", "EdwinSmith(e) & NewZealandRower(e) & FromAuckland(e))"]}
{"id": "folio_train_2466", "nl": "Edwin Smith was also known as Ted Smith.", "fol": "Alias(Edwinsmith,Tedsmith)", "prediction": ["(EdwinSmith(EdwinSmith) & TedSmith(EdwinSmith))", "EdwinSmith(e) & TedSmith(e))", "(TedwinSmith(EdwinSmith) & TedSmith(EdwinSmith))", "EdwinSmith (EdwinSmith) & TedSmith(EdwinSmith))", "(EdwinSmith(e) & TedSmith(e))", "Edwin Smith (exists x.(EdwinSmith(x) & TedSmith(x)))", "(exists x.(EdwinSmith(x) & TedSmith(x)))", "EdwinSmith(e) & TedSmith(e))", "EdwinStick (exists x.(EdwinSmith(x) & TedSmith(x)))", "(TedwinSmith(edwinsmith) & TedSmith(edwinsmith))", "KnownAs(EdwinSmith,TedSmith)", "EdwinSmith (EdwinSmith) & TedSmith(EdwinSmith))", "(EdwinSmith(EdwinSmith) & TedSmith(EdwinSmith))", "EdwinSmith(e) & TedSmith(e))", "(exists x.(EdwinSmith(x) & TedSmith(x)))", "EdwinSmith(e) & TedSmith(e))"]}
{"id": "folio_train_2467", "nl": "Edwin Smith went to Rose Road Primary School, located in Grey Lynn.", "fol": "(Attended(Edwinsmith,Roseroadprimaryschool) & IsLocatedIn(Roseroadprimaryschool,Greylynn))", "prediction": ["all x.(EdwinSmith(x) -> (GoesToRoseRoadPrimarySchool(x) & LocatedInGreyLynn(x)))", "EdwinSmith went to RoseRoadPrimarySchool(e) & LocatedInGreyLynn(e))", "(GoesToRoseRoadPrimarySchool(EdwinSmith) & LocatedInGreyLynn(EdwinSmith))", "all x y.((EdwinSmith(x) & RoseRoadPrimarySchool(y) & GreyLynn(y)) -> GoesTo(x,y))", "Edwin Smith attended RoseRoadPrimarySchool(e) & LocatedInGreyLynn(e))", "(EdwinSmith(Edwin) & RoseRoadPrimarySchool(Edwin))", "EdwinSmith(EdwinSmith) went to RoseRoadPrimarySchool(EdwinSmith) & LocatedInGreyLynn(EdwinSmith,EdwinLynn))", "all x y.((EdwinSmith(x) & RoseRoadPrimarySchool(y)) -> LocatedInGreyLynn(x,y))", "EdwinSmith went to RoseRoadPrimarySchool(EdwinSmith)", "Edwin Smith attended Rose Road Primary School, located in GreyLynn.", "all x.(EdwinSmith(x) -> (GoesToRoseRoadPrimarySchool(x) & LocatedInGreyLynn(x)))", "(GoesToRoseRoadPrimarySchool(EdwinSmith) & LocatedInGreyLynn(EdwinSmith))", "(EdwinSmith(Edwin) & RoseRoadPrimarySchool(Edwin))", "EdwinSmith went to RoseRoadPrimarySchool(e) & LocatedInGreyLynn(e))", "Edwin Smith attended Rose Road Primary School (GreyLynn) & LocatedIn(e) & EdwinSmith(e))", "all x.(EdwinSmith(x) -> (GoesToRoseRoadPrimarySchool(x) & LocatedInGreyLynn(x)))"]}
{"id": "folio_train_2468", "nl": "Edwin Smith was a sergeant who served with the New Zealand 24th battalion in Italy and Egypt.", "fol": "(IsSergeant(Edwinsmith) & ServedWithUnit(Edwinsmith,Newzealand24thbattalion) & ServedInCountry(Edwinsmith,Italy) & ServedInCountry(Edwinsmith,Egypt))", "prediction": ["all x.((Sgt.EdwinSmith(x) & New Zealand24thBattalion(x)) -> (ServedIn(x,Italie,Egypt) & ServedWith(x,Egypt)))", "(SgtEdwinSmith(Edwin) & New Zealand24thBattalion(Edwin))", "Edwin Smith (Sgtalion(s) & New Zealand24thBattalion(s) & In(s,italy,egypt))", "EdwinSmith(sergeant) & served with New Zealand's 24th Battalion(s) & In(s) & In(s) & In(s) & In(s) & In(s) & In(s) & In(s) & In(s) & In(s) & In(s))", "all x.(SgtEdwinSmith(x) -> (SgtEdwinSmith(x) & New Zealand24thBattalion(x) & In(x,Italie,Egypt)))", "EdwinSmith(sergeant) & served with New Zealand 24th Battalion(s) & InItalyAndEgypt(s))", "Edwin Smith (Sgt.(Sgt.(NewZealand24thBattalion) & ServedIn(Egypt,Italie) & ServedIn(Egypt,Egypt)))", "all x y.((Sgt.EdwinSmith(x) & New Zealand24thBattalion(y)) -> (ServedIn(x,y) & In(x,y)))", "(ServicesWithNewZealand24thBattalion(EdwinSmith) & In(Edinburgh,Italie,Egypt))", "(Sgt.EdwinSmith(Edwin) & New Zealand24thBattalion(Edwin))", "(Sergeant(EdwinSmith) & New Zealand24thBattalion(EdwinSmith))", "all x.(SgtEdwinSmith(x) -> (ServedWithNewZealand24thBattalion(x) & In(x,Italie,Egypt)))", "EdwinSmith(edwinsmith) -> (Sgtalion(e) & New Zealand24thBattalion(e) & ServedIn(e,italy,egypte)))", "Edwin Smith was a sergeant who served with the New Zealand 24th Battalion in Italy and Egypt.", "(SgtEdwinSmith(Edwin) & New Zealand24thBattalion(Edinburgh,Italy,Egypt))", "Edwin Smith (Sgtalion(s) & New Zealand24thBattalion(s))"]}
{"id": "folio_train_2469", "nl": "Broadway Sheetmetals was a buisness that was ran and owned by Edwin Smith, who was a sheetmetal worker.", "fol": "(IsBusiness(Broadwaysheetmetals) & Managed(Edwinsmith,Broadwaysheetmetals) & Possesses(Edwinsmith,Broadwaysheetmetals) & IsSheetmetalWorker(Edwinsmith))", "prediction": ["all x.((BroadwaySheets(x) & RunByEdwinSmith(x) & SheetmetalWorker(x)) -> SheetmetalBailey(x))", "all x y.((BroadwaySheets(x) & EdwinSmith(y)) -> (Runs(x,y) & OwnedBy(x,y)))", "(BroadwaySheets(Boston) & RunAndOwnedByEdwinSmith(BroadwaySheetworker(BroadwaySheetworker))", "all x.((BroadwaySheets(x) & RunAndOwnedByEdwinSmith(x) & SheetmetalWorker(x)) -> BroadwaySheetmetals(x))", "all x y.((BroadwayShapemetals(x) & EdwinSmith(y)) -> (Runs(x,y) & OwnedBy(x,y) & SheetmetalWorker(y)))", "All x y z.((BroadwayShapemetal(x) & EdwinSmith(y) & SheetmetalWorker(z)) -> (RunsAndOwnedBy(x,y) & OwnedBy(y,z)))", "(BroadwaySheetmetals(Boston) & RunAndOwnedByEdwinSmith(BroadwaySheetmetalWorker))", "all x.(BroadwaySheets(x) -> (Bailey(x) & RunByEdwinSmith(x) & SheetmetalWorker(x)))", "all x.((BroadwayShapemetals(x) & RunByEdwinSmith(x) & SheetmetalWorker(x)) -> SheetmetalBailey(x))", "all x.((Buisness(x) & RunByEdwinSmith(x) & SheetmetalWorker(x)) -> BroadwaySheetmetals(x))", "all x.((BroadwaySheets(x) & RunByEdwinSmith(x) & SheetmetalWorker(x)) -> Sheetmetal(x))", "all x.(BroadwaySheetmetals(x) -> (Buisness(x) & RunAndOwnedByEdwinSmith(x) & SheetmetalWorker(x)))", "All x y z.((BroadwaySheets(x) & EdwinSmith(y) & SheetmetalWorker(z)) -> (RunsAndOwnedBy(y,x) & OwnedBy(y,x)))", "All x y.((BroadwaySheets(x) & EdwinSmith(y)) -> (Runs(x,y) & OwnedBy(x,y) & SheetmetalWorker(y)))", "All x y.((BroadwayShapemetal(x) & EdwinSmith(y)) -> (RunsAndOwnedBy(x,y) & SheetmetalWorker(y)))", "all x.((BroadwaySheets(x) & RanAndOwnedByEdwinSmith(x) & SheetmetalWorker(x)) -> BroadwaySheets(x))"]}
{"id": "folio_train_2470", "nl": "Ted Smith was a sergeant.", "fol": "IsSergeant(Tedsmith)", "prediction": ["all x.(Sgt.(TedSmith(x) -> Sergeant(x))", "(Sergeant(TedSmith)", "(Sgt.TedSmith(Ted) & Sergeant(Ted))", "all x.(Sergeant(x) -> TedSmith(x))", "Ted Smith was sergeant.", "all x.(Sgt.TedSmith(x) -> Sergeant(x))", "-Sergeant(TedSmith)", "(Sgt. TedSmith(TedSmith) & Sergeant(TedSmith))", "(Sgt.TedSmith(t) & Sergeant(t))", "(Sergeant(TedSmith)", "Ted Smith (Sergeant)", "Ted Smith was sergeant.", "all x.(Sgt.TedSmith(x) -> Sergeant(x))", "all x.(Sergeant(x) -> TedSmith(x))", "-Sergeant(TedSmith)", "(Sergeant(TedSmith)"]}
{"id": "folio_train_2471", "nl": "There are no rowers that own a buisness.", "fol": "-exists x y.(IsRower(x) & IsBusiness(y) & Possesses(x,y))", "prediction": ["-exists x.(Rower(x) & OwnsBaisness(x))", "all x.((Rower(x) & NoBuisness(x)) -> -Owns(x,y))", "exists x.(Rower(x) & -OwnsBaisness(x))", "there are no rowers that ownsBaisness(x)", "-exists x.(Rower(x) & OwnsBaisness(x))", "all x.((Rower(x) & NoBuisness(x)) -> -Owns(x,y))", "-exists x.(Rower(x) & OwnsBuisness(x))", "all x.((Rower(x) & OwnsBaisness(x)) -> -exists y.(Rower(y) & OwnsBaisness(y)))", "(exists x.(Rower(x) & OwnsBaisness(x)))", "exists x.(Rower(x) & -OwnsBuisness(x))", "all x.((Rower(x) & NoBuisness(x)) -> -OwnsBaisness(x))", "exists x.(Rower(x) & -OwnsBaisness(x))", "-exists x.(Rower(x) & OwnsBaisness(x))", "-exists x.(Rower(x) & OwnsBuisness(x))", "-exists x.(Rower(x) & -OwnsBaisness(x))", "-exists x.(Rower(x) & OwnBaisness(x))"]}
{"id": "folio_train_2472", "nl": "No sergeants are from Auckland.", "fol": "-exists x.(IsSergeant(x) & OriginatesFrom(x,Auckland))", "prediction": ["-exists x.(Sergeant(x) & FromAuckland(x))", "all x.(Sergeant(x) -> -FromAuckland(x))", "-exists x.(Sergeant(x) & FromAuckland(x))", "(NoSergeantFromAuckland(sergeant))", "all x.(Sergeant(x) -> -Auckland(x))", "(NoSergeant(s) & -Auckland(s))", "-exists x.(Sergeant(x) & From(x,Auckland))", "KeenSergeant(x) & -FromAuckland(x))", "(NoSergeantFromAuckland(sergeant))", "-exists x.(Sergeant(x) & -FromAuckland(x))", "-exists x.(Sergeant(x) & FromAuckland(x))", "-exists x.(Sgt.(Sergeant(x) & FromAuckland(x))", "-exists x.(Sergeant(x) & From(x,Auckland))", "-exists x.(S sergeant(x) & -FromAuckland(x))", "-exists x.(Sergeant(x) & FromAuckland(x))", "-exists x.(S sergeant(x) & -Auckland(x))"]}
{"id": "folio_train_2473", "nl": "No buisness owner has served in Egypt.", "fol": "all x.(exists y.(IsBusiness(y) & Possesses(x,y)) -> -ServedInCountry(x,Egypt))", "prediction": ["-exists x.(BaisnessOwner(x) & ServesInEgypt(x))", "-exists x.(BuisnessOwner(x) & ServesInEgypt(x))", "(exists x.(BuisnessOwner(x) & ServesInEgypt(x)))", "KeenBaisnessOwnerServedInEgypte(x)", "no buisnessowner has servedInEgypte.", "-exists x.(BaisnessOwner(x) & ServesInEgypt(x))", "KeenBaisnessOwnerServedInEgypt(x)", "(NoBuisnessOwnerServedInEgypte(Baisness))", "no buisnessownersServedInEgypt.", "-exists x.(BuisnessOwner(x) & ServesInEgypt(x))", "(exists x.(BaisnessOwner(x) & ServedIn(x,Egypt)))", "-exists x y.(BaisnessOwner(x) & ServingInEgypt(x,y))", "-exists x.(BaisnessOwner(x) & ServedInEgypte(x))", "-exists x.(BuisnessOwner(x) & ServedInEgypte(x))", "-exists x.(BubaisnessOwner(x) & ServedIn(x,Egypt))", "-exists x.(BuisnessOwner(x) & ServicedIn(x,Egypt))"]}
{"id": "folio_train_2474", "nl": "A werewolf is a human that can turn into a wolf.", "fol": "all x.((IsHuman(x) & CanTransformToWolf(x)) -> IsWerewolf(x))", "prediction": ["all x.(Worshipwolf(x) -> (Human(x) & CanTurnIntoWolf(x)))", "all x y.((Worshipwolf(x) & Human(y)) -> CanTurnIntoWolf(x,y))", "all x.(Werewolf(x) -> (Human(x) & CanTurnIntoWolf(x)))", "all x.(Worshipwolf(x) -> (Human(x) & CanTurnIntoWolf(x)))", "all x.(Worshipwolf(x) -> (Human(x) & CanTurnIntoWolf(x)))", "(Human(werwolf) & CanTurnIntoWolf(werwolf))", "all x.(Worshipwolf(x) -> (Human(x) & TurnsIntoWolf(x)))", "all x.(Worsewolf(x) -> (Human(x) & CanTurnIntoWolf(x)))", "all x y.((Worshipwolf(x) & Human(y)) -> CanTurnIntoWolf(x,y))", "all x.(Werewolf(x) -> (Human(x) & CanTurnIntoWolf(x)))", "all x y.((Werewolf(x) & Human(y)) -> (CanTurnInto(x,y) & Wolf(x)))", "all x y.((Worshipwolf(x) & Human(y)) -> CanTurnIntoWolf(x,y))", "all x y.((Wordwolf(x) & Human(y)) -> (CanTurnIntoWolf(x,y)))", "all x.(Werf(x) -> (Human(x) & CanTurnIntoWolf(x)))", "all x.(Werewolf(x) -> (Human(x) & CanTurnIntoWolf(x)))", "all x.(Worshipwolf(x) -> (Human(x) & TurnsIntoWolf(x)))"]}
{"id": "folio_train_2475", "nl": "A werewolf has been scratched or bitten by another werewolf.", "fol": "all x.exists y.(IsWerewolf(x) -> ((IsBittenBy(x,y) | IsScratchedBy(x,y)) & IsWerewolf(y)))", "prediction": ["all x.(Worshipwolf(x) -> (Scratched(x) | Bited(x)))", "all x y.((Wormwolf(x) & (Scratched(x) | Bited(x))) -> Waswolf(y))", "all x.(Worshipwolf(x) -> (Scraped(x) | Bited(x)))", "all x y.((Wrecking(x) & (Wrecking(y) | Biting(y))) -> Waswolf(x))", "all x.(Werewolf(x) -> (Scraped(x) | Bited(x)))", "all x y.((Worshipwolf(x) & (Scratched(x,y) | Bited(x,y))) -> Waswolf(x))", "all x y z.((Wrecking(x) & (Wrecking(y) | Biting(y))) -> (Scraped(x,y) | Bited(x,y)))", "all x y.((Werewolf(x) & (Scratched(x) | BitedBy(x))) -> Waswolf(y))", "(ScrapedOrBitchedByWorshipwolf(w))", "all x y.((Wrecking(x) & Waswolf(y)) -> (Scraped(x,y) | Bited(x,y)))", "(exists x.(Worshipwolf(x) & ScrubbedBy(x)) | BitedBy(x)))", "all x.(Wormwolf(x) -> (Scratched(x) | BitedBy(x)))", "all x.((Worshipwolf(x) & (Scratched(x) | Bited(x))) -> Waswolf(x))", "all x.(Werewolf(x) -> (Scratched(x) | BitedBy(x)))", "all x.(Worshipwolf(x) -> (Cracked(x) | Bited(x)))", "exists x.(Wormwolf(x) & (Scraped(x) | Bited(x)))"]}
{"id": "folio_train_2476", "nl": "If someone has been scratched or bitten, they have been attacked.", "fol": "all x.exists y.((IsBittenBy(x,y) | IsScratchedBy(x,y)) -> IsAttackedBy(x,y))", "prediction": ["all x.((Scraped(x) | Bited(x)) -> Attacked(x))", "all x.((Person(x) & (Scraped(x) | Bited(x))) -> Attacked(x))", "all x.((Scraped(x) | Bited(x)) -> Attacked(x))", "all x y.((Person(x) & (Scraped(x) | Bited(x))) -> Attacked(x))", "all x.(ScrapedOrBitched(x) -> Attacked(x))", "all x y.((Scraped(x) | Bited(x)) -> Attacked(y))", "all x.((Person(x) & (Scraped(x) | Bited(x))) -> Attacked(x))", "all x.((Scraped(x) | Bited(x)) -> Attacked(x))", "all x y.((Person(x) & (Scraped(x) | Bited(x))) -> Attacked(x))", "all x.(ScrapedOrBitched(x) -> Attacked(x))", "all x.((Cracked(x) | Bited(x)) -> Attacked(x))", "(Attacked(x) -> (Scraped(x) | Bited(x)))", "exists x.(ScrapedOrBbitten(x) & Attacked(x))", "all x.((Person(x) & (Scraped(x) | Bited(x))) -> Attacked(x))", "all x.((Scraped(x) | Bited(x)) -> Attacked(x))", "all x.((Cracked(x) | Bited(x)) -> Attacked(x))"]}
{"id": "folio_train_2477", "nl": "All humans are werewolves.", "fol": "all x.(IsHuman(x) -> IsWerewolf(x))", "prediction": ["all x.(Human(x) -> Werewolf(x))", "all x.(Human(x) -> Waswolf(x))", "all x.(Human(x) -> Werewolf(x))", "(all x.(Human(x) -> Waswolf(x))", "all x.(Human(x) -> Waswolf(x))", "all x.(Habitat(x) -> Werewolf(x))", "all x.(Human(x) -> Werewolf(x))", "(all x.(Human(x) -> Waswolf(x))", "all x.(Human(x) -> Waswolf(x))", "all x y.(Human(x) -> Waswolf(y))", "exists x.(Habitat(x) & Waswolf(x))", "all x.(Human(x) -> Werewolf(x))", "all x.(Human(x) -> Waswolf(x))", "all x.(Human(x) -> Werewolf(x))", "all x.(Human(x) -> Werewolf(x))", "all x.(Human(x) -> Waswolf(x))"]}
{"id": "folio_train_2478", "nl": "A werewolf is a wolf.", "fol": "all x.(IsWerewolf(x) -> Wolf(x))", "prediction": ["all x.(Worshipwolf(x) -> Wolf(x))", "all x.(Worshipwolf(x) -> Wolf(x))", "(Worshipwolf(Wolf) & -Wolf(Wolf))", "all x y.((Worshipwolf(x) & Wolf(y)) -> Waswolf(x))", "all x.(Werewolf(x) -> Wolf(x))", "all x.(Worshipwolf(x) -> Wolf(x))", "all x y.((Worshipwolf(x) & Wolf(y)) -> Waswolf(x))", "all x.(Worshipwolf(x) -> Wolf(x))", "all x.(Werewolf(x) -> Wolf(x))", "all x y.((Wordwolf(x) & Wolf(y)) -> Waswolf(x))", "all x.(Wormwolf(x) -> Wolf(x))", "all x.(Werewolf(x) -> Wolf(x))", "all x.(Wolf(x) -> Wolf(x))", "all x.(Worshipper(x) -> Wolf(x))", "all x.(Wolf(x) -> Wolf(x))", "exists x.(Wordwolf(x) & Wolf(x))"]}
{"id": "folio_train_2479", "nl": "A werewolf has scratched someone before.", "fol": "exists x y.(IsWerewolf(x) & IsScratchedBy(x,y))", "prediction": ["all x y.((Worshipwolf(x) & Person(y)) -> Scratched(x,y))", "all x.(Worshipwolf(x) -> Scrubbed(x))", "all x y.((Worshipwolf(x) & Person(y)) -> ScrubbedBefore(x,y))", "all x.(Werf(x) -> Scrubbed(x))", "all x.(Worshipwolf(x) -> HasScrapedPerson(x))", "all x y.((Werewolf(x) & Person(y)) -> Scratched(x,y))", "all x y z.((Worshipwolf(x) & Person(y) & Scrubbed(x,y)) -> Has(x,y))", "all x y.((Wrecking(x) & Person(y)) -> Scratched(x,y))", "all x y.((Werf(x) & Person(y) & Scrubbed(x,y)) -> Scrubbed(x,y))", "(Scrabbled(Worshipwolf) | Person(Worshipwolf))", "(exists x.(Worshipwolf(x) & Scrubbed(x,y)))", "all x y.((Wormwolf(x) & Person(y)) -> ScrubbedBefore(x,y))", "exists x.(Wormwolf(x) & Person(x) & Scrubbed(x))", "all x.(Werewolf(x) -> HasScrapedPerson(x))", "all x.(Werf(x) -> ScrubbedPerson(x))", "all x.(Werewolf(x) -> ScratchedPerson(x))"]}
{"id": "folio_train_2480", "nl": "UFC Fight Night was a mixed martial arts event and was held in Sweden.", "fol": "(UFCFightNightEvent(UFCFightNight) & IsMixedMartialEvent(UFCFightNight) & HeldInSweden(UFCFightNight))", "prediction": ["all x.((UFCFightNight(x) & MixedMartialArtsEvent(x) & HeldInSweden(x)) -> HeldIn(x,Sweden))", "all x.(FightNight(x) -> (MixedMartialArtsEvent(x) & HeldInSweden(x)))", "all x y.((UFCFightNight(x) & MixedMartialArtsEvent(y)) -> HeldInSweden(x))", "(MixedMartialArtsEvent(UFC) & HeldInSweden(UFC))", "all x.(UFCFightNight(x) -> (MixedMartialArtsEvent(x) & HeldInSweden(x)))", "all x.((FightNight(x) & MixedMartialArtsEvent(x) & HeldInSweden(x)) -> UFCFightNight(x))", "all x.((UFCFightNight(x) & MixedMartialArtsEvent(x) & HeldInSweden(x)) -> HeldInSweden(x))", "all x y.((UFCFightNight(x) & MixedMartialArtsEvent(y) & HeldIn(x,y)) -> HeldIn(x,y))", "(MixedMartialArtsEvent(UFC) & HeldInSweden(UFC))", "(MixedMartialArtsEvent(UFCFightNight) & HeldInSweden(UFCFightNight))", "all x.(FightNight(x) -> (MixedMartialArtsEvent(x) & HeldInSweden(x)))", "all x y.((UFCFightNight(x) & MixedMartialArtsEvent(y) & HeldInSweden(x)) -> HeldIn(x,y))", "(MixedMartialArts(UFC) & HeldInSweden(UFC))", "(MixedMartialArtsEvent(UFC) & HeldInSweden(UFC))", "all x y.((FightNight(x) & MixedMartialArtsEvent(y)) -> HeldInSweden(x,y))", "(MixedMartialArtsEvent(UFC) & HeldInSweden(UFC))"]}
{"id": "folio_train_2481", "nl": "At UFC Fight Night, Sadollah was scheduled to fight Musoke.", "fol": "(UFCFightNightEvent(UFCFightNight) -> IsScheduledToFight(Sadollah,Musoke))", "prediction": ["all x.((Sadollah(x) & UFCFightNight(x)) -> ScheduledToFightMusoke(x))", "(Sadollah(Sadollah) & UFCFightNight(Sadollah))", "all x y.((FightNight(x) & Sadollah(y)) -> ScheduledToFight(y,Musoke))", "-(Sadollah(Sadollah) & UFCFightNight(Sadollah))", "all x.((Sadollah(x) & UFCFightNight(x)) -> ScheduledToFight(x,Musoke))", "-Sadollah(Sadollah) & UFCFightNight(Sadollah,Musoke)", "(Sadollah,FightNight(Sadollah) & Musoke(Sadollah))", "(Sadollah(Sadollah) & UFCFightNight(Sadollah))", "(Sadollah(Sadollah) & UFCFightNight(Sadollah) & ScheduledToFightMusoke(Sadollah))", "All x.(Sadollah(x) -> ScheduledToFightMusoke(x))", "all x.((Sadollah(x) & UFCFightNight(x)) -> ScheduledToFightMusoke(x))", "(FightNight(Sadollah) & Musoke(Sadollah))", "all x y.((FightNight(x) & UFC(y)) -> (Sadollah(x) & Musoke(y)))", "all x y.((UFCFightNight(x) & Sadollah(y)) -> ScheduledToFight(y,Musoke))", "All x.((Sadollah(x) & UFCFightNight(x)) -> ScheduledToFight(x,Musoke))", "(Sadollah(Sadollah) & UFCFightNight(Sadollah))"]}
{"id": "folio_train_2482", "nl": "Sadollah fought Akiyama at UFC Fight Night.", "fol": "(UFCFightNightEvent(UFCFightNight) -> CompeteInFight(Sadollah,Akiyama))", "prediction": ["Sadollah fought Akiyama at UFCFightNight(Sadollah,FightNight)", "(FightNight(Sadollah) & Akiyama(Akiyama))", "(Sadollah foughtAkiyama(Sadollah) & UFCFightNight(Sadollah))", "all x.(Sadollah(x) -> foughtAkiyama(x))", "all x y.((Sadollah(x) & Akiyama(y)) -> FightingAtUFightNight(x,y))", "(FightNight(Sadollah,Akiyama) & UFC(Sadollah,Akiyama))", "(Sadollah(Sadollah) & Akiyama(Akiyama) & UFCFightNight(Akiyama))", "Sadollah fought Akiyama at UFCFightNight(Sadollah)", "All x.(Sadollah(x) -> FightingAkiyama(x))", "Sadollah fought Akiyama at UFC FightNight(Sadollah,UFC)", "All x.(Sadollah(x) -> FightingAkiyama(x))", "Sadollah fought at UFCFightNight(Sadollah,Akiyama)", "Sadollah fought Akiyama at UFCFightNight(Sadollah)", "Sadollah fought Akiyama at UFC FightNight.", "Sadollah fought Akiyama at UFCFightNight(Sadollah,Akiyama)", "Sadollah fought Akiyama at UFC FightNight."]}
{"id": "folio_train_2483", "nl": "Musoke fought Yakovlev at UFC Fight Night.", "fol": "(UFCFightNightEvent(UFCFightNight) -> CompeteInFight(Musoke,Yakovlev))", "prediction": ["(FightNight(Musoke,Yakovlev) & UFC(Musoke,Yakovlev))", "Musoke fought Yakovlev at UFCFightNight(Musoke,UFC)", "(fightsYakovlev(Musoke) & UFCFightNight(Musoke))", "all x.(Musoke(x) -> foughtYakovlev(x))", "(FightNight(Musoke) & Yakovlev(Musoke))", "-MusokeFightsYakovlev(Musoke,UFC)", "-FightNight(Musoke,Yakovlev)", "Musoke fought Yakovlev at UFCFightNight(Musoke)", "all x.(Musoke(x) -> FeatsYakovlev(x))", "-MusokeFightsYakolove(Musoke,UFC,FightNight)", "(FightNight(Musoke,Yakovlev) & UFC(Musoke,Yakovlev))", "All x.(Musoke(x) -> foughtYakovlevAtUFightNight(x))", "all x.(Musoke(x) -> FightsYakolov(x,UFC))", "Musoke fought Yakovlev at UFC FightNight.", "(FightNight(Musoke) & Yakovlev(Musoke))", "Musoke fought Yakovlev at UFCFightNight(Musoke,FightNight)"]}
{"id": "folio_train_2484", "nl": "Jung was injured at UFC Fight Night.", "fol": "(UFCFightNightEvent(UFCFightNight) -> IsInjured(Jung))", "prediction": ["Jung was injured at UFCFightNight(Jung)", "-(Jung(Jung) & UFCFightNight(Jung))", "Jung was injured at UFCFightNight(Jun)", "Jung injured at UFCFightNight(Jun)", "(InjuredAtUFChampionNight(Jung))", "Jing was injured at UFCFightNight(Jun,UFC)", "-InjuredAtUFChampion(Jung)", "Jung was InjuredAtUFFCFightNight(Jung)", "Jung was injured at UFCFightNight(Jung)", "Jung & UFCFightNight(Jun,UFC)", "-InjuredAtUFKitchen(Jung)", "Jung injured at UFCFightNight(Jung)", "Jung was injured at UFCFightNight(Jun)", "Jung was injured at UFCFightNight(Jung,UFC)", "Jung was injured at UFC FightNight.", "Jung was injured at UFCFightNight(Jun)"]}
{"id": "folio_train_2485", "nl": "Injured people did not fight at UFC Fight Night.", "fol": "all x.(IsInjured(x) -> -FightInUFC(x))", "prediction": ["all x.(Injured(x) -> -FightsAtUFFC(x))", "all x.(InjuredPeople(x) -> -FightsAtUFFC(x))", "all x y.((Injured(x) & UFCFightNight(y)) -> -FightsAt(x,y))", "(InjuredPeople(in) & -FightsAtUFFC(in))", "all x.((Injured(x) & -Fight(x)) -> -Fight(x))", "all x.(InjuredPerson(x) -> -FightsAtUFFC(x))", "all x.(Injured(x) -> -FightsAtUFFC(x))", "all x y.((Injured(x) & UFCFightNight(y)) -> -Fight(x,y))", "all x.((Injured(x) & UFCFightNight(x)) -> -FightsAt(x,UFC))", "all x y.((Injured(x) & UFCFightNight(y) & -Fight(x,y)) -> -Fight(x,y))", "(InjuredPeople(injured) & -FightAtUFFC(injured))", "all x y.((InjuredPerson(x) & UFCFightNight(y)) -> -FightsAt(x,y))", "(InjuredPeople(in) & -FightAtUFChamber(in))", "all x.(InjuredPeople(x) -> -FightsAtUFFC(x))", "All x.(Injured(x) -> -FightAtUFFC(x))", "All x.(InjuredPerson(x) -> -FightsAtUFFC(x))"]}
{"id": "folio_train_2486", "nl": "Jung fought Sadollah.", "fol": "CompeteInFight(Jung,Sadollah)", "prediction": ["all x.(Jung(x) -> Sadollah(x))", "(FightedSadollah(Jung) & Sadollah(Jung))", "(FightsSadollah(Jung) & Sadollah(Jung))", "-foughtSadollah.", "Sadollah.", "all x y.((Jung(x) & Sadollah(y)) -> Fights(x,y))", "Sadollah fought by Jung.", "all x.(Jung(x) -> Sadollah(x))", "Jung fought Sadollah.", "(Jung,Sadollah)", "-foughtSadollah.", "(fightedSadollah(Jung) & Sadollah(Jung))", "all x.(Jung(x) -> BattledSadollah(x))", "All x.(Jung(x) -> Sadollah(x))", "All x.(Jung(x) -> FightingSadollah(x))", "Sadollah."]}
{"id": "folio_train_2487", "nl": "Jung did not fight at UFC Fight Night.", "fol": "-FightInUFC(Jung)", "prediction": ["Jung -FightsAtUFFC(Jung))", "-(JungFightNight(Jung) & -FightsAtUFFC(Jung))", "-(Jung(Jung) & UFCFightNight(Jung))", "(Jung,FightNight(Jung) & -Fight(Jung,FightNight))", "-FightsAtUFChampion(Jung)", "Jung & -FightsAtUFFC(Jung))", "Jung hat e.(FightNight(e) & -Fight(e))", "(FightNight(Jung) & -Fight(Jung))", "Jung did not fight at UFCFightNight(Jung)", "Jung -FightsAtUFFC(Jung)", "(-FightAtUFChampion(Jung))", "(-FightAtUFChampionNight(Jung))", "-FightsAtUFChampionNight(Jung)", "Jung -FightsAtUFightNight(Jung,FightNight)", "Die Jungs & -FCFightNight(Jun)", "Jung did not fight at UFCFightNight(Jung)"]}
{"id": "folio_train_2488", "nl": "Sadollah fought Musoke.", "fol": "CompeteInFight(Sadollah,Musoke)", "prediction": ["Sadollah fought Musoke.", "all x.(Sadollah(x) -> foughtMusoke(x))", "(FightedMusoke(Sadollah)", "(Fighted(Sadollah,Musoke))", "Sadollah fought Musoke.", "all x y.((Sadollah(x) & Musoke(y)) -> Fights(x,y))", "all x.(Sadollah(x) -> foughtMusoke(x))", "(all x.(Sadollah(x) -> FightingMusoke(x)))", "(fought Musoke(Sadollah) & foughtMusoke(Sadollah))", "all x.(Sadollah(x) -> FightingMusoke(x))", "Sadollah fought Musoke.", "All x.(Sadollah(x) -> FightingMusoke(x))", "Sadollah fought Musoke.", "Sadollah fought Musoke.", "Sadollah fought Musoke.", "Sadollah fought Musoke."]}
{"id": "folio_train_2489", "nl": "Nelson fought Story at UFC Fight Night.", "fol": "(UFCFightNightEvent(UFCFightNight) -> CompeteInFight(Nelson,Story))", "prediction": ["Nelson fought Story at UFCFightNight(Nelson,FightNight)", "(FightNight(Nelson,Story) & foughtAt(Nelson,FightNight))", "-(Nelson(n) & Story(n)) & UFCFightNight(n))", "-FightNight(Nelson,Story)", "Nelson foughtStoryAtUFightNight(Nelson)", "Nelson fought StoryAtUFChampionship(Night(Nelson)", "Nelson foughtStoryAtUFFCFightNight(Nelson)", "(FightNight(Nelson) & Story(Nelson))", "Nelson fightsStory(n) & UFCFightNight(n))", "(FightNight(Nelson,Story) & foughtAt(Nelson,FightNight))", "-FightNight(Nelson,FightNight)", "Nelson foughtStoryAtUFCightNight(Nelson)", "Nelson fought Story at UFCFightNight(n)", "-(Nelson(n) & Story(n)))", "Nelson fought StoryAtUFCupNight(Nelson,FightNight)", "Nelson foughtStoryAtUFFCFightNight(Nelson,FightNight)"]}
{"id": "folio_train_2490", "nl": "All drinks are edible. ", "fol": "all x.(IsDrink(x) -> IsEdible(x))", "prediction": ["all x.(Drink(x) -> Edible(x))", "all x.(Drink(x) -> Edible(x))", "(EdibleDrink(drink,drink)", "all x.(Drink(x) -> Edible(x))", "(EdibleDrink(d) & All(d) -> Edible(d))", "(EdibleDrink(d) & AllDrinks(d))", "all x.(Drink(x) -> Edible(x))", "all x y.(Drink(x) -> Edible(x))", "all x.(Drink(x) -> Edible(x))", "exists x.(Beverage(x) & Edible(x))", "all x.(Drink(x) -> Edible(x))", "all x.(Drink(x) -> Edible(x))", "all x.(Drink(x) -> Edible(x))", "all x.(Drink(x) -> Edible(x))", "all x.(Drink(x) -> Edible(x))", "all x.(Drink(x) -> Edible(x))"]}
{"id": "folio_train_2491", "nl": "All juices are drinks. ", "fol": "all x.(IsJuice(x) -> IsDrink(x))", "prediction": ["all x.(Juice(x) -> Drink(x))", "all x.(Juice(x) -> Drink(x))", "(all x.(Juice(x) -> Drink(x)))", "all x y.((Juice(x) & Drink(y)) -> Drink(x))", "all x.(Juice(x) -> Drink(x))", "(all x.(Juice(x) -> Drink(x)))", "all x.(Juice(x) -> Drink(x))", "(all x.(Juice(x) -> Drink(x)))", "all x.(Juice(x) -> Drink(x))", "all x.(Jewel(x) -> Drink(x))", "all x.(Juice(x) -> Drink(x))", "all x.(Juice(x) -> Drink(x))", "all x.(Juice(x) -> Drinkable(x))", "all x.(Juice(x) -> Drinkable(x))", "all x.(Juice(x) -> Drink(x))", "all x.(Juice(x) -> Drinks(x))"]}
{"id": "folio_train_2492", "nl": "All orange juice is a juice. ", "fol": "all x.(IsOrangeJuice(x) -> IsJuice(x))", "prediction": ["all x.(OrangeJuice(x) -> Juice(x))", "all x.(OrangeJuice(x) -> Juice(x))", "all x y.((OrangeJuice(x) & Juice(y)) -> Juice(x))", "(all x.(OrangeJuice(x) -> Juice(x))", "all x.(OrangeJuice(x) -> Juice(x))", "(all x.(OrangeJuice(x) -> Juice(x))", "all x.(OrangeJuice(x) -> Juice(x))", "all x.(OrangeJuice(x) -> Juice(x))", "all x.(OrangeJuice(x) -> Juice(x))", "all x.(OrangeJuice(x) -> Juice(x))", "all x.(OrangeJuice(x) -> Juice(x))", "all x.(OrangeJuice(x) -> Juice(x))", "all x.(OrangeJuice(x) -> Juice(x))", "all x.(OrangeJuice(x) -> Juice(x))", "All x.(OrangeJuice(x) -> Juice(x))", "all x.(OrangeJuice(x) -> Juice(x))"]}
{"id": "folio_train_2493", "nl": "A juice is either an orange juice or an apple juice.", "fol": "all x.(IsOrangeJuice(x) | IsAppleJuice(x))", "prediction": ["all x.(Juice(x) -> (OrangeJuice(x) | AppleJuice(x)))", "all x.(Juice(x) -> (OrangeJuice(x) | AppleJuice(x)))", "all x y.((Juice(x) & OrangeJuice(y)) | AppleJuice(y))", "all x.(Juice(x) -> (OrangeJuice(x) | AppleJuice(x)))", "all x y.((Juice(x) & OrangeJuice(y)) | AppleJuice(y))", "all x.(Juice(x) -> (OrangeJuice(x) | AppleJuice(x)))", "exists x.(Juice(x) & OrangeJuice(x) | AppleJuice(x))", "all x y.((Juice(x) & OrangeJuice(y)) | AppleJuice(y))", "all x.(Juice(x) -> (OrangeJuice(x) | AppleJuice(x)))", "exists x.(Juice(x) & OrangeJuice(x) & AppleJuice(x))", "all x.(Juice(x) -> (Orange(x) | Apple(x)))", "all x.(Juice(x) -> (OrangeJuice(x) | AppleJuice(x)))", "exists x.(Juice(x) & OrangeJuice(x) | AppleJuice(x))", "all x.(Juice(x) -> (OrangeJuice(x) | AppleJuice(x)))", "exists x.(Juice(x) & (Orange(x) | Apple(x)))", "exists x.(Juice(x) & (OrangeJuice(x) | AppleJuice(x)))"]}
{"id": "folio_train_2494", "nl": "All apple juice is sweet.", "fol": "all x.(IsAppleJuice(x) -> IsSweet(x))", "prediction": ["all x.(AppleJuice(x) -> Sweet(x))", "all x.(AppleJuice(x) -> Sweet(x))", "(AllAliceJuice(a) -> Sweet(a))", "all x y.((AppleJuice(x) & Sweet(y)) -> Sweet(x))", "all x.(AppleJuice(x) -> Sweet(x))", "(all x.(AppleJuice(x) -> Sweet(x)))", "all x.(AppleJuice(x) -> Sweet(x))", "all x.(AidJuice(x) -> Sweet(x))", "all x.(AppleJuice(x) -> Sweet(x))", "All x.(AidJuice(x) -> Sweet(x))", "all x.(AppleJuice(x) -> Sweet(x))", "all x.(AppleJuice(x) -> Sweet(x))", "all x.(AppleJuice(x) -> Sweet(x))", "all x.(AppleJuice(x) -> Sweet(x))", "all x.(AppleJuice(x) -> Sweet(x))", "All x.(AppleJuice(x) -> Sweet(x))"]}
{"id": "folio_train_2495", "nl": "If coke is apple juice, then coke is a drink.", "fol": "(IsAppleJuice(Coke) -> IsDrink(Coke))", "prediction": ["all x.((Coke(x) & AppleJuice(x)) -> Drink(x))", "(AppleJuice(coke) -> Drink(coke))", "all x.((Coke(x) & AppleJuice(x)) -> Drink(x))", "all x.(AppleJuice(x) -> Drink(x))", "all x y.((Coke(x) & AppleJuice(x)) -> Drink(x,y))", "all x.((Coke(x) & AppleJuice(x)) -> Drink(x))", "(all x.(AppleJuice(x) -> Drink(x)))", "all x.(AppleJuice(x) -> Drink(x))", "exists x.(Coke(x) & AppleJuice(x) & Drink(x))", "all x y.((Coke(x) & AppleJuice(y)) -> Drink(x,y))", "(all x.(AppleJuice(x) -> Drink(x)))", "all x.((Coke(x) & AppleJuice(x)) -> Drink(x))", "all x.(AppleJuice(x) -> Drink(x))", "all x.((Coke(x) & AppleJuice(x)) -> Drink(x))", "all x.(AppleJuice(x) -> Drink(x))", "all x.((Coke(x) & AppleJuice(x)) -> Drink(x))"]}
{"id": "folio_train_2496", "nl": "If coke is not apple juice, then coke is not edible.", "fol": "(-IsAppleJuice(Coke) -> -IsEdible(Coke))", "prediction": ["all x.((Coke(x) & -AppleJuice(x)) -> -Edible(x))", "all x.((Coke(x) & -AppleJuice(x)) -> -Edible(x))", "(-AppleJuice(coke,coke))", "-AppleJuice(x) -> -Edible(x))", "all x y.((Coke(x) & AppleJuice(y) & -AppleJuice(z) & -Edible(x)) -> -Edible(x))", "all x.((Coke(x) & -AppleJuice(x)) -> -Edible(x))", "(-AppleJuice(coke,coke))", "all x.((Coke(x) & -AppleJuice(x)) -> -Edible(x))", "(-AppleJuice(coke,coke))", "all x.((Coke(x) & -AppleJuice(x)) -> -Edible(x))", "all x.((Coke(x) & -AppleJuice(x)) -> -Edible(x))", "all x.((Coke(x) & -AppleJuice(x)) -> -Edible(x))", "all x.((Coke(x) & -AppleJuice(x)) -> -Edible(x))", "all x.((Coke(x) & -AppleJuice(x)) -> -Edible(x))", "all x.((Coke(x) & -AppleJuice(x)) -> -EdibleCoke(x))", "all x.((Coke(x) & -AppleJuice(x)) -> -Edible(x))"]}
{"id": "folio_train_2497", "nl": "Coke is orange juice.", "fol": "IsOrangeJuice(Coke)", "prediction": ["all x.(Coke(x) -> OrangeJuice(x))", "all x.(Coke(x) -> OrangeJuice(x))", "(OrangeJuice(coke))", "(OrangeJuice(Coke,Coke))", "all x.(Coke(x) -> OrangeJuice(x))", "(OrangeJuice(coke,y))", "all x y.(Coke(x) -> OrangeJuice(y))", "all x.(Coke(x) -> OrangeJuice(x))", "(OrangeJuice(coke,coke))", "all x.(Coke(x) -> OrangeJuice(x))", "all x.(Coke(x) -> OrangeJuice(x))", "all x.(Coke(x) -> OrangeJuice(x))", "all x.(Coke(x) -> OrangeJuice(x))", "All x.(Coke(x) -> OrangeJuice(x))", "All x.(Coke(x) -> OrangeJuice(x))", "exists x.(Coke(x) & OrangeJuice(x))"]}
{"id": "folio_train_2498", "nl": "Coke is edible and sweet.", "fol": "(IsEdible(Coke) & IsSweet(Coke))", "prediction": ["all x.(Coke(x) -> (Edible(x) & Sweet(x)))", "all x.(Coke(x) -> (Edible(x) & Sweet(x)))", "(Edible(coke) & Sweet(coke))", "(EdibleCoke(Coke,Coke) & SweetCoke(Coke,Coke,Coke))", "all x.(Coke(x) -> (Edible(x) & Sweet(x)))", "(EdibleCoke(coke) & Sweet(coke))", "all x y.(Coke(x) -> (Edible(x) & Sweet(x)))", "exists x.(Coke(x) & Edible(x) & Sweet(x))", "all x.(Coke(x) -> (Edible(x) & Sweet(x)))", "all x.(Coke(x) -> (Edible(x) & Sweet(x)))", "exists x.(Coke(x) & Edible(x) & Sweet(x))", "all x.(Coke(x) -> (Edible(x) & Sweet(x)))", "exists x.(Coke(x) & Edible(x) & Sweet(x))", "all x.(Coke(x) -> (Edible(x) & Sweet(x)))", "exists x.(Coke(x) & Edible(x) & Sweet(x))", "all x.(Coke(x) -> (Edible(x) & Sweet(x)))"]}
{"id": "folio_train_2499", "nl": "Coke is not edible and sweet.", "fol": "(-IsEdible(Coke) & -IsSweet(Coke))", "prediction": ["all x.(Coke(x) -> (-Edible(x) & Sweet(x)))", "(-Edible(coke) & -Sweet(coke))", "all x.(Coke(x) -> (-Edible(x) & -Sweet(x)))", "-(Edible(coke) & Sweet(coke))", "(-Edible(Coke) & -Sweet(Coke))", "(-Edible(coke) & Sweet(coke))", "all x.(Coke(x) -> -Edible(x) & Sweet(x))", "(all x.(Coke(x) -> -Edible(x) & Sweet(x)))", "all x.(Coke(x) -> -(Edible(x) & Sweet(x)))", "all x.(Coke(x) -> (-Edible(x) & -Sweet(x)))", "-(Edible(coke) & Sweet(coke))", "exists x.(Coke(x) & -Edible(x) & Sweet(x))", "exists x.(Coke(x) & -(Edible(x) & Sweet(x)))", "all x.(Coke(x) -> (-Edible(x) & -Sweet(x)))", "exists x.(Coke(x) & -(Edible(x) & Sweet(x)))", "all x.(Coke(x) -> (-Edible(x) & Sweet(x)))"]}
{"id": "folio_train_2500", "nl": "Federico Garcia Lorca was a talented Spanish poet and he supported the Popular Front.", "fol": "(IsTalentedPoet(Lorca) & SupportsPopularFront(Lorca))", "prediction": ["all x.((FedericoGarciaLorca(x) & TalentedSpanishPoet(x) & SupportedPopularFront(x)) -> Talented(x))", "(TalentedSpanishPoet(FernandoGarcia) & SupportedPopularFront(Fernando))", "all x.(FedericoGarciaLorca(x) -> (TalentedSpanishPoet(x) & SupportedPopularFront(x)))", "Federico Garcia Lorca (SpanishPoet(f) & Talented(f) & SupportedPopularFront(f))", "all x y.((FedericoGarciaLorca(x) & TalentedSpanishPoet(x) & PopularFront(y)) -> Supported(x,y))", "(TalentedSpanishPoet(FedericoGarcia) & SupportedPopularFront(FedericoGarcia))", "(FedericoGarciaLorca,SpanishPoet(Federico) & Talented(Fernando) & SupportedPopularFront(Fernando))", "Federico Garcia Lorca was a talented Spanish Poet and SupportedPopularFront(Fernand)", "all x y.((FernitoGarciaLorca(x) & TalentedSpanishPoet(x) & PopularFront(y)) -> Supported(x,y))", "all x.((FedericoGarciaLorca(x) & TalentedSpanishPoet(x) & SupportedPopularFront(x)) -> TalentedAndSupported(x))", "all x.((FernitoGarciaLorca(x) & TalentedSpanishPoet(x) & SupportedPopularFront(x)) -> Talented(x))", "(TalentedSpanishPoet(FedericoGarciaLorca) & SupportedPopularFront(FedericoGarcia))", "(TalentedSpanishPoet(FernitoGarcia) & SupportedPopularFront(FernitoGarcia))", "Federico Garcia Lorca (SpanishPoet(Federico) & Talented(Federico))", "all x.((FedericoGarciaLorca(x) & TalentedSpanishPoet(x) & SupportedPopularFront(x)) -> Talented(x))", "all x.(FedericoGarciaLorca(x) -> (TalentedSpanishPoet(x) & SupportedPopularFront(x)))"]}
{"id": "folio_train_2501", "nl": "The Spanish Nationalists opposed anyone who supported the Popular Front", "fol": "all x.(SupportsPopularFront(x) -> Opposes(Nationalists,x))", "prediction": ["all x y.((SpanishNationalist(x) & SupportsPopularFront(y)) -> Opposed(x,y))", "all x y z.((SpanishNationalist(x) & SupportsPopularFront(y) & SupportsPopularFront(z)) -> Opposed(x,y,z))", "all x y.((SpanishNationalists(x) & SupportsPopularFront(y)) -> Opposed(x,y))", "all x.((SpanishNationalists(x) & SupportedPopularFront(x)) -> Opposed(x))", "All x.(SpanishNationalists(x) -> OpposedAnyone(x))", "(all x.(SpanishNationalist(x) -> Opposed(x)))", "all x y z.((SpanishNationalist(x) & SupportedPopularFront(y) & PopularFront(z)) -> Opposed(x,y))", "All x.(SpanishNationalists(x) -> (Opposes(x,SupportsPopularFront) & SupportsPopularFront(x)))", "all x y.((SpanishNationalists(x) & SupportsPopularFront(y)) -> Opposed(x,y))", "all x y z.((SpanishNationalist(x) & Supporter(y) & PopularFront(z)) -> Opposed(x,y,z))", "all x y.((SpanishNationalist(x) & SupportsPopularFront(y)) -> Opposed(x,y))", "All x.(SpanishNationalists(x) -> OpposedAnyone(x))", "(all x y.((SpanishNationalist(x) & SupportsPopularFront(y)) -> Opposed(x,y)))", "all x y.((SpanishNationalists(x) & SupportsPopularFront(y)) -> Opposed(x,y))", "All x.((SpanishNationalists(x) & SupportedPopularFront(x)) -> Opposed(x))", "All x.(SpanishNationalists(x) -> OpposedAnyOne(x))"]}
{"id": "folio_train_2502", "nl": "Talented poets are popular.", "fol": "all x.(IsTalentedPoet(x) -> IsPopular(x))", "prediction": ["all x.(TalentedPoet(x) -> Popular(x))", "all x.(TalentedPoet(x) -> Popular(x))", "all x.(TalentedPoet(x) -> Popular(x))", "all x y.((Poet(x) & Talented(y)) -> Popular(x))", "all x.((Poet(x) & Talented(x)) -> Popular(x))", "all x y.((TalentedPoet(x) & Poet(y)) -> Popular(x))", "all x.(TalentedPoet(x) -> Popular(x))", "all x.(Poet(x) -> Talented(x))", "all x y.((Poet(x) & Talented(y) & Poet(x)) -> Popular(x))", "all x.(TalentedPoet(x) -> Popular(x))", "all x y.((Poet(x) & Talented(x,y)) -> Popular(y))", "all x.(TalentedPoet(x) -> Popular(x))", "exists x.(Poet(x) & Talented(x))", "all x.(TalentedPoet(x) -> Popular(x))", "exists x.(Poet(x) & Talented(x) & Popular(x))", "all x.(TalentedPoet(x) -> Popular(x))"]}
{"id": "folio_train_2503", "nl": "Spanish Nationalists killed anyone who they opposed and were popular.", "fol": "all x.((Opposes(Nationalists,x) & IsPopular(x)) -> CommitsMurder(Nationalists,x))", "prediction": ["all x.((SpanishNationalist(x) & Opposed(x) & Popular(x)) -> Killed(x))", "all x y.((SpanishNationalist(x) & Opponent(y) & Popular(y)) -> Kills(x,y))", "all x y z.((SpanishNationalist(x) & Opponent(y) & Popular(z)) -> Kills(x,y,z))", "all x.(SpanishNationalist(x) -> (KillsOpponents(x) & Popular(x)))", "all x.((SpanishNationalist(x) & Opposed(x) & Popular(x)) -> Killed(x,y))", "all x y.((SpanishNationalist(x) & Opponent(y) & Popular(y)) -> Kills(x,y))", "all x y.((SpanishNationalist(x) & Opponent(y) & Popular(y)) -> Kills(x,y))", "(all x.((SpanishNationalist(x) & Opposed(x) & Popular(x)) -> Kills(x)))", "all x.((SpanishNationalist(x) & Opposed(x) & Popular(x)) -> Killed(x))", "all x.((SpanishNationalist(x) & Opposed(x) & Popular(x)) -> Killed(x))", "all x.(SpanishNationalist(x) -> (KillsAnyone(x) & Opposed(x) & Popular(x)))", "all x y.((SpanishNationalist(x) & Opponent(y) & Popular(y)) -> Kills(x,y))", "all x.((SpanishNationalist(x) & Opposes(x,y) & Popular(y)) -> Kills(x,y))", "all x y z.((SpanishNationalist(x) & Opponent(y) & Popular(z)) -> Kills(x,y,z))", "all x.(SpanishNationalist(x) -> (KillsOpponents(x) & Popular(x)))", "all x y.((SpanishNationalist(x) & Opponent(y) & Popular(y)) -> Killed(x,y))"]}
{"id": "folio_train_2504", "nl": "Daniel supported the Popular Front but was not popular.", "fol": "(SupportsPopularFront(Daniel) & -IsPopular(Daniel))", "prediction": ["(SupportsPopularFront(Daniel) & -Popular(Daniel))", "Daniel supported PopularFront(Daniel) & -Popular(Daniel)", "all x.((Daniel(x) & PopularFront(x)) -> (Supported(x,popular) & -popular(x)))", "Daniel supportedPopularFront(Daniel) & -Popular(Daniel)", "all x.(Daniel(x) -> (SupportedPopularFront(x) & -Popular(x)))", "(SupportedPopularFront(Daniel) & -Popular(Daniel))", "((Daniel(Daniel) | PopularFront(Daniel)))", "Daniel supported PopularFront(Dan) & -Popular(Dan))", "(SupportsPopularFront(Daniel) & -Popular(Daniel))", "-popular(Daniel)", "Daniel supports PopularFront(d) & -Popular(d))", "-PopularFront(Dan)", "Daniel supportedPopularFront(d) & -Popular(d))", "(SupportsPopularFront(Daniel) & -Popular(Daniel))", "((Daniel(Daniel) | PopularFront(Daniel)))", "(SupportsPopularFront(Daniel) & -Popular(Daniel))"]}
{"id": "folio_train_2505", "nl": "Daniel was not killed by the Spanish Nationalists.", "fol": "-CommitsMurder(Nationalists,Daniel)", "prediction": ["(-KilledBySpanishNationalists(Daniel))", "all x.((Daniel(x) & -SpanishNationalists(x)) -> -KilledBy(x,Daniel))", "-(SpanishNationalists(Daniel) & -KilledBy(Daniel))", "Daniel ne sabotaged(n) bySpanishNationalists(n))", "-(KilledBySpanishNationalists(Daniel))", "((Daniel(Daniel) & -SpanishNationalists(Daniel)) -> -KilledBy(Daniel))", "-T\u00f6tedBySpanishNationalists(Daniel)", "(-KilledBySpanishNationalists(Daniel))", "Daniel n'a \u00e9t\u00e9 tainted by the SpanishNationalists.", "Daniel ne savaged bySpanishNationalists.", "Daniel ne suffocated bySpanishNationalists.", "Daniel ne sabotaged(n).(SpanishNationalists(n) & -Killed(n)))", "Daniel ne-KilledBySpanishNationalists(n)", "-(KilledBySpanishNationalists(Daniel))", "(-KilledBySpanishNationalists(Daniel))", "(-KilledBySpanishNationalists(Daniel))"]}
{"id": "folio_train_2506", "nl": "Lorca was killed by the Spanish Nationalists.", "fol": "CommitsMurder(Nationalists,Lorca)", "prediction": ["all x y.((Lorca(x) & SpanishNationalists(y)) -> KilledBy(x,y))", "Lorca was killed bySpanishNationalists.", "all x.(Lorca(x) -> KilledBySpanishNationalists(x))", "(KilledBySpanishNationalists(Lorca))", "all x y.((Lorca(x) & Nationalist(y)) -> KilledBy(x,y))", "Lorca & SpanishNationalists(Lorca) & KilledBy(Lorca,Lorca))", "Lorca was killed by the SpanishNationalists.", "(KilledBySpanishNationalists(Lorca,Lorca))", "(Killing(Lorca,SpanishNationalists))", "All x.(Lorca(x) -> KilledBySpanishNationalists(x))", "Lorca was killedBySpanishNationalists.", "Lorca was killed bySpanishNationalists.", "(KilledBySpanishNationalists(Lorca))", "-(Lorca,SpanishNationalists))", "Lorca was killed by the SpanishNationalists.", "Lorca was killed by SpanishNationalists."]}
{"id": "folio_train_2507", "nl": "People either drink kombucha every day or drink Coca-Cola or Pepsi products every day.", "fol": "all x.(DrinkKombuchaEveryDay(x) | DrinkCocaColaOrPepsiEveryDay(x))", "prediction": ["all x.((Person(x) & (DrinksKombucha(x) | DrinksCokeCola(x) | DrinksPepsi(x))) -> DrinksKombuchaEveryDay(x))", "all x.(Person(x) -> (DrinksKombuchaEveryDay(x) | DrinksCokeColaOrPepsiEveryDay(x)))", "all x y.((Person(x) & (DrinksKombuchaEveryDay(x) | DrinksCokeColaOrPepsiEveryDay(x))) -> DrinksKombuchaOrPepsiEveryDay(x))", "(DrinksKombuchaEveryDay(Person) | DrinksCokeColaOrPepsiEveryDay(Person)))", "all x.((Person(x) & (DrinksKombuchaEveryDay(x) | DrinksCokeColaOrPepsiEveryDay(x))) -> DrinksKombuchaOrPepsiEveryDay(x))", "(DrinkKombuchaEveryDay(Person) | DrinkCokeColaOrPepsiEveryDay(Person)))", "all x.(Person(x) -> (DrinksKombucha(x) | DrinksCokeCola(x) | DrinksPepsi(x)))", "all x y.((Person(x) & (DrinksKombucha(x) | DrinksCokeCola(x) | DrinksPepsi(x))) -> DrinksKombuchaEveryDay(x))", "exists x.(People(x) & (DrinksKombucha(x) | DrinksCokeCola(x) | DrinksPepsi(x)))", "(DrinksKombuchaEveryDay(Person,Day) | DrinksCokeColaOrPepsiEveryDay(Person,Day)))", "exists x.(Person(x) & ((DrinksKombucha(x) & DrinksCokeCola(x)) | DrinksPepsi(x))))", "all x y.((Person(x) & (DrinksKombuchaEveryDay(x) | DrinksCokeCola(x) | DrinksPepsi(x))) -> DrinksKombuchaEveryDay(x))", "(DrinksKombuchaEveryDay(Person) | DrinksCokeColaOrPepsiEveryDay(Person)))", "all x y.((Person(x) & DrinksKombuchaEveryDay(x)) | (DrinksCokeCola(x) | DrinksPepsi(x))))", "exists x.(Person(x) & ((DrinksKombucha(x) & DrinksCokeCola(x) | DrinksPepsi(x))) -> DrinksKombucha(x)))", "exists x.(Person(x) & ((DrinkKombucha(x) & DrinkCokeCola(x) & DrinkPepsi(x)) | DrinkCokeCola(x))))"]}
{"id": "folio_train_2508", "nl": "If people drink Coca-Cola or Pepsi products every day, then they grew up with extremely busy parents who did not have time to pack them lunch.", "fol": "all x.(DrinkCocaColaOrPepsiEveryDay(x) -> GrewUpWithBusyParents(x))", "prediction": ["all x.((Person(x) & DrinksCokeColaOrPepsiProductsEveryDay(x)) -> (ExtremelyBusyParents(x) & -HasTimeToPackLunch(x)))", "all x.((People(x) & DrinksCokeColaOrPepsiProductsEveryDay(x)) -> (ExtremelyBusyParents(x) & -HasTimeToPackLunch(x)))", "all x y.((Person(x) & DrinksCokeColaOrPepsiProductsEveryDay(x)) -> (ExtremelyBusyParents(x) & -HasTimeToPackLunch(x)))", "all x y.((Person(x) & (DrinksCokeCola(x) | DrinksPepsi(x))) -> GrownUpWithExtremelyBusyParents(x))", "all x y.((People(x) & (DrinksCokeCola(x) | DrinksPepsi(x))) -> GrownUpWithExtremelyBusyParents(x))", "all x.((Person(x) & (DrinksCokeCola(x) | DrinksPepsi(x))) -> GrownUpWithExtremelyBusyParents(x))", "(all x.(DrinksCokeColaOrPepsiProductsEveryDay(x) -> BusyParents(x)))", "all x.((People(x) & DrinkCokeColaOrPepsiProductsEveryDay(x)) -> (ExtremelyBusyParents(x) & -HasTimeToPackLunch(x)))", "all x y z.((Person(x) & (CokeCola(y) | Pepsi(y)) & DailyDrink(x,y)) -> (ExtremelyBusyParents(x) & -HasTimeToPackLunch(x)))", "all x.((Person(x) & DrinksCokeColaOrPepsiProductsEveryDay(x)) -> (ExtremelyBusyParents(x) & -HasTimeToPackLunch(x)))", "all x.(DrinksCokeColaOrPepsiProductsEveryDay(x) -> (ExtremelyBusyParents(x) & -HasTimeToPackLunch(x)))", "all x.((People(x) & DrinksCokeColaOrPepsiProductsEveryDay(x)) -> (ExtremelyBusyParents(x) & -HasTimeToPackLunch(x)))", "all x y.((Person(x) & DrinksCokeColaOrPepsiProductsEveryDay(x) & BusyParents(y) & -HasTimeToPackLunch(y)) -> GrownUpWith(x,y))", "all x y.((People(x) & DrinksCokeColaOrPepsiProductsEveryDay(x,y)) -> (ExtremelyBusyParents(x) & -HasTimeToPackLunch(x,y)))", "all x.((People(x) & (DrinksCokeCola(x) | DrinksPepsi(x))) -> GrownUpWithExtremelyBusyParents(x))", "all x.((Person(x) & DrinksCokeColaOrPepsiProductsEveryDay(x)) -> (ExtremelyBusyParents(x) & -HasTimeToPackLunch(x)))"]}
{"id": "folio_train_2509", "nl": "If people drink Coca-Cola or Pepsi products every day, then they have to visit the dentist frequently.", "fol": "all x.(DrinkCocaColaOrPepsiEveryDay(x) -> VisitDentistFrequently(x))", "prediction": ["all x.((DrinksCokeColaOrPepsiProductsEveryDay(x)) -> VisitsDentistFrequently(x))", "all x.((Person(x) & DrinksCokeColaOrPepsiProductsEveryDay(x)) -> VisitsDentistFrequently(x))", "all x y.((Person(x) & DrinksCokeColaOrPepsiProductsEveryDay(x)) -> VisitsDentistFrequently(x))", "all x.((People(x) & DrinksCokeColaOrPepsiProductsEveryDay(x)) -> VisitsDentistFrequently(x))", "(DrinksCokeColaOrPepsiProductsEveryDay(Person) -> VisitsDentistFrequently(Person))", "all x y.((Person(x) & (DrinksCokeCola(x) | DrinksPepsi(x)) & EveryDay(x)) -> VisitsDentist(x))", "all x.((DrinksCokeCola(x) | DrinksPepsi(x)) -> VisitsDentistFrequently(x))", "all x y.((DrinksCokeColaOrPepsiProductsEveryDay(x) & DrinksEveryDay(x,y)) -> VisitsDentistFrequently(x))", "all x.(DrinksCokeColaOrPepsiProductsEveryDay(x) -> VisitsDentistFrequently(x))", "all x.((Person(x) & DrinksCokeColaOrPepsiProductsEveryDay(x)) -> VisitsDentistFrequently(x))", "all x.((DrinksCokeColaOrPepsiProductsEveryDay(x) & VisitsDentistFrequently(x)) -> MustDentist(x))", "all x.((People(x) & (DrinksCokeCola(x) | DrinksPepsi(x))) -> VisitsDentistFrequently(x))", "(DrinksCokeColaOrPepsiProductsEveryDay(Person) -> VisitsDentistFrequently(Person))", "all x y.((Person(x) & DrinksCokeColaOrPepsiProductsEveryDay(x) & VisitsDentistFrequently(x,y)) -> DrinksEveryDay(x,y))", "all x y.((DrinksCokeColaOrPepsiProductsEveryDay(x) & DrinksEveryDay(x,y)) -> VisitsDentistFrequently(x))", "all x.(DrinksCokeColaOrPepsiProductsEveryDay(x) -> VisitsDentistFrequently(x))"]}
{"id": "folio_train_2510", "nl": "If people grew up with extremely busy parents who did not have time to pack them lunch, then they have erratic and diverse eating habits.", "fol": "all x.(GrewUpWithBusyParents(x) -> HaveErraticEatingHabits(x))", "prediction": ["all x.((Person(x) & GrownUpWithExtremelyBusyParents(x) & -HasTimeToPackLunch(x)) -> EraticAndDiverseEatingHabits(x))", "all x.((People(x) & GrownUpWithExtremelyBusyParents(x) & -HasTimeToPackLunch(x)) -> EraticAndDiverseEatingHabits(x))", "all x y.((Person(x) & GrownUpWithExtremelyBusyParents(x) & -HasTimeToPackLunch(x)) -> (EraticEatingHabits(y) & DiverseEatingHabits(y)))", "all x y.((People(x) & GrownUpWithExtremelyBusyParents(x) & -HasTimeToPackLunch(x)) -> (ErraticEatingHabits(x) & DiverseEatingHabits(x)))", "all x y z.((Person(x) & BusyParent(y) & -HasTimeToPackLunch(z) & GrowsUpWith(x,y) & -HasTimeToPackLunch(x,z)) -> (ErraticEatingHabits(x) & DiverseEatingHabits(x)))", "all x.((Person(x) & GrownUpWithExtremelyBusyParents(x) & -HasTimeToPackLunch(x)) -> (EraticEatingHabits(x) & DiverseEatingHabits(x)))", "all x.((People(x) & GrownUpWithExtremelyBusyParents(x) & -HasTimeToPackLunch(x)) -> (ErraticEatingHabits(x) & DiverseEatingHabits(x)))", "all x y.((Person(x) & GrowingUpWithExtremelyBusyParents(x) & -HasTimeToPackLunch(x,y)) -> (EraticEatingHabits(x) & DiverseEatingHabits(x)))", "all x y z.((Person(x) & BusyParent(y) & -HasTimeToPackLunch(z) & GrowsUpWith(x,y) & -HasTimeToPackLunch(x,z)) -> ErraticAndDiverseEatingHabits(x))", "all x y.((Person(x) & GrownUpWithExtremelyBusyParents(x) & -HasTimeToPackLunch(x,y)) -> (ErraticEatingHabits(x) & DiverseEatingHabits(x)))", "all x.((Person(x) & GrownUpWithExtremelyBusyParents(x) & -HasTimeToPackLunch(x)) -> EraticAndDiverseEatingHabits(x))", "all x.((PopularEatingHabits(x) & ExtremelyBusyParents(x) & -HasTimeToPackLunch(x)) -> EraticAndDiverseEatingHabits(x))", "all x.((Popular(x) & GrowingUpWithExtremelyBusyParents(x) & -HasTimeToPackLunch(x)) -> EraticAndDiverseEatingHabits(x))", "all x y.((People(x) & GrowingUpWithExtremelyBusyParents(x) & -HasTimeToPackLunch(x,y)) -> EraticAndDiverseEatingHabits(x))", "all x.((People(x) & GrownUpWithExtremelyBusyParents(x) & -HasTimeToPackLunch(x)) -> (ErraticEatingHabits(x) & DiverseEatingHabits(x)))", "all x.((Person(x) & GrownUpWithExtremelyBusyParents(x) & -HasTimeToPackLunch(x)) -> (ErraticEatingHabits(x) & DiverseEatingHabits(x)))"]}
{"id": "folio_train_2511", "nl": "If people have erratic and diverse eating habits, then they do not have consistent everyday routines and like sticking to a solid schedule.", "fol": "all x.(HaveErraticEatingHabits(x) -> -HaveConsistentRoutines(x))", "prediction": ["all x.((People(x) & EratricEatingHabits(x) & DiverseEatingHabits(x)) -> (-ConsistentEverydayRoutines(x) & StickToSolidSchedule(x)))", "all x.((Personal(x) & EratricEatingHabits(x) & DiverseEatingHabits(x)) -> (-ConsistentEverydayRoutines(x) & StickToSolidSchedule(x)))", "all x.((Person(x) & EratricEatingHabits(x) & DiverseEatingHabits(x)) -> (-ConsistentEverydayRoutines(x) & StickToSolidSchedule(x)))", "all x.((People(x) & EratricAndDiverseEatingHabits(x)) -> (-ConsistentEverydayRoutines(x) & StickToSolidSchedule(x)))", "(ErraticAndDiverseEatingHabits(Person) -> (-ConsistentEverydayRoutines(Person) & StickToSolidSchedule(Person)))", "all x.(EratricAndDiverseEatingHabits(x) -> (-ConsistentEverydayRoutines(x) & StickToSolidSchedule(x)))", "all x y.((Person(x) & EratricEatingHabits(x) & DiverseEatingHabits(x)) -> (-ConsistentEverydayRoutines(y) & StickToSolidSchedule(x,y)))", "all x.((Personal(x) & EratricAndDiverseEatingHabits(x)) -> (-ConsistentEverydayRoutines(x) & StickToSolidSchedule(x)))", "all x.(RainfoicAndDiverseEatingHabits(x) -> (-ConsistentEverydayRoutines(x) & StickToSolidSchedule(x)))", "all x y.((Personal(x) & EratricAndDiverseEatingHabits(x) & ConsistentEverydayRoutines(y) & StickToSolidSchedule(x)) -> -ConsistentSchedule(x,y))", "all x.((Person(x) & EratricEatingHabits(x) & DiverseEatingHabits(x)) -> (-ConsistentEverydayRoutines(x) & StickToSolidSchedule(x)))", "all x.(ErraticAndDiverseEatingHabits(x) -> (-ConsistentEverydayRoutines(x) & StickToSolidSchedule(x)))", "all x y.((Person(x) & EratricEatingHabits(x) & DiverseEatingHabits(x)) -> (-ConsistentEverydayRoutines(y) & StickToSolidSchedule(x,y)))", "all x.((People(x) & ErraticEatingHabits(x) & DiverseEatingHabits(x)) -> (-ConsistentEverydayRoutines(x) & StickToSolidSchedule(x)))", "all x.(RaroticAndDiverseEatingHabits(x) -> (-ConsistentEverydayRoutines(x) & SticksToSolidSchedule(x)))", "all x.(ErraticAndDiverseEatingHabits(x) -> (-ConsistentOccasions(x) & StickToSolidSchedule(x)))"]}
{"id": "folio_train_2512", "nl": "Franny either both grew up with extremely busy parents who did not have time to pack her lunch and has consistent everyday routines and like sticking to a solid schedule, or she neither grew up with extremely busy parents who did not have time to pack her lunch nor has consistent everyday routines and likes sticking to a schedule.  ", "fol": "((GrewUpWithBusyParents(Franny) & HaveConsistentRoutines(Franny) & -(-GrewUpWithBusyParents(Franny) & -HaveConsistentRoutines(Franny))) | (-(GrewUpWithBusyParents(Franny) & HaveConsistentRoutines(Franny)) & -GrewUpWithBusyParents(Franny) & -HaveConsistentRoutines(Franny)))", "prediction": ["(all x.(Franny(x) -> ((ExtremelyBusyParents(x) & -HasTimeToPackLunch(x) & ConsistentEverydayRules(x) & SticksToSchedule(x)) | (-BusyParents(x) & -HasTimeToPackLunch(x) & ConsistentEverydayRules(x) & SticksToSchedule(x))))", "all x.(Franny(x) -> ((GrowsUpWithExtremelyBusyParents(x) & -HasTimeToPackLunch(x) & ConsistentEverydayRules(x) & LikesStickingToSchedule(x)) | (-GrowsUpWithExtremelyBusyParents(x) & -HasTimeToPackLunch(x) & ConsistentEverydayRules(x) & LikesStickingToSchedule(x))))", "(exists x.(Franny(x) & ((ExtremelyBusyParents(x) & -HasTimeToPackLunch(x) & ConsistentEverydayRules(x) & SticksToSchedule(x)) | (-HasTimeToPackLunch(x) & ConsistentEverydayRules(x) & SticksToSchedule(x)))))", "((Franny(franny) & -(BusyParents(f) & PackLunch(f) & ConsistentEverydayRules(f)) & SolidSchedule(f)) | (-BusyParents(f) & -(BusyParents(f) & PackLunch(f) & ConsistentEverydayRules(f) & SticksToSchedule(f)))))", "((Franny) & -(BusyParents(f) & -PackLunch(f) & ConsistentEverydayRules(f) & StickToSchedule(f))) | (-BusyParents(f) & -PackLunch(f) & ConsistentEverydayRules(f) & StickToSchedule(f))))", "(all x.(Franny(x) -> ((ExtremelyBusyParents(x) & -HasTimeToPackLunch(x) & ConsistentEverydayRoutines(x) & SticksToSchedule(x)) | (-BusyParents(x) & -HasTimeToPackLunch(x) & ConsistentEverydayRoutines(x) & SticksToSchedule(x))))", "(exists x.(Franny(x) & ((BushParent(x) & -HasTimeToPackLunch(x) & ConsistentEverydayRules(x) & SticksToSchedule(x)) | (-BushParent(x) & ConsistentEverydayRules(x) & SticksToSchedule(x)))))", "(all x.(Franny(x) -> ((BushParent(x) & -HasTimeToPackLunch(x) & ConsistentEverydayRules(x) & SticksToSchedule(x)) | (-BushParent(x) & -HasTimeToPackLunch(x) & ConsistentEverydayRules(x) & SticksToSchedule(x))))", "all x y.((Franny(x) & ExtremelyBusyParents(x) & -(TimeToPackLunch(x) & ConsistentEverydayRules(x) & SticksToSchedule(x))) | (-(BusyParents(y) & PackLunch(y) & ConsistentEverydayRules(y) & SticksToSchedule(y))))", "all x.(Franny(x) -> ((GrowsUpWithExtremelyBusyParents(x) & -HasTimeToPackLunch(x) & ConsistentEverydayRules(x) & SticksToSchedule(x)) | (-GrowsUpWithExtremelyBusyParents(x) & -HasTimeToPackLunch(x) & ConsistentEverydayRules(x) & SticksToSchedule(x))))", "((Franny) & -BusyParents(f) & -BusyParents(f) & -BusyParents(f) & -BusyParents(f) & -BusyParents(f) & -BusyParents(f) & -BusyParents(f) & SticksToSchedule(f)))", "all x.(Franny(x) -> ((ExtremelyBusyParents(x) & -HasTimeToPackLunch(x) & ConsistentEverydayRules(x) & SticksToSchedule(x)) | (-BusyParents(x) & ConsistentEverydayRules(x) & SticksToSchedule(x))))", "all x.(Franny(x) -> ((BushParent(x) & -HasTimeToPackLunch(x) & ConsistentEverydayRules(x) & SticksToSchedule(x)) | (-BushParent(x) & ConsistentEverydayRules(x) & SticksToSchedule(x))))", "(all x y.((Franny(x) & -BusyParent(y) & -BusyParent(y)) -> (GrowsUpWith(x,y) & -BusyParent(x) & ConsistentEverydayRules(x) & SticksToSchedule(x)))", "all x y z.((Franny(x) & BusyParent(y) & -(TimeToPackLunch(z) | ConsistentEverydayRoutines(z) & SticksToSchedule(x,y,z))) -> ((Growth(x,y) | Growth(x,z)) & -(Growth(x,y,z) & ConsistentEverydayRoutines(x,y,z) & SticksToSchedule(x))))", "all x.(Franny(x) -> ((Growth(x) & -BusyParents(x) & PackLunch(x) & ConsistentEverydayRules(x) & StickToSchedule(x)) | (-BusyParents(x) & PackLunch(x) & ConsistentEverydayRules(x) & StickToSchedule(x))))"]}
{"id": "folio_train_2513", "nl": "Franny has to visit the dentist frequently.", "fol": "VisitDentistFrequently(Franny)", "prediction": ["all x.(Franny(x) -> VisitsDentistFrequently(x))", "all x y.((Franny(x) & Dentist(y)) -> VisitsFrequently(x,y))", "(HasToVisitDentist(Franny) & Frequent(Franny,Dentist))", "(FrannyVisitsDentist(Franny) & Frequent(Franny))", "(Franny,Dentist(Franny) & VisitsFrequently(Franny,Dentist))", "Franny has to visitthedentistfrequently.", "-FrannyHasToVisitDentistFrequently(Franny,Dentist)", "(HasToVisitDentist(Franny,Dentist) & Frequent(Franny,Dentist))", "all x.(Franny(x) -> VisitsDentistFrequently(x))", "-Franny(franny) & VisitsDentist(franny,fruit))", "all x y.((Franny(x) & Dentist(y)) -> VisitsFrequently(x,y))", "(FrannyVisitDentist(Franny) & Frequently(Franny))", "all x.(Franny(x) -> VisitsDentist(x))", "all x.(Franny(x) -> HasToVisitDentistFrequently(x))", "Franny has to visitthedentistFrequently(Franny,Dentist)", "all x.(Franny(x) -> VisitsDentistFrequently(x))"]}
{"id": "folio_train_2514", "nl": "If Franny either both grew up with extremely busy parents who did not have time to pack her lunch and drink kombucha every day or neither grew up with extremely busy parents who did not have time to pack her lunch nor drink kombucha every day, then Franny neither visits the dentist frequently nor drinks Coca Cola or Pepsi products every day.", "fol": "(((GrewUpWithBusyParents(Franny) & DrinkKombuchaEveryDay(Franny)) | (-GrewUpWithBusyParents(Franny) & -DrinkKombuchaEveryDay(Franny))) -> (-VisitDentistFrequently(Franny) & -DrinkCocaColaOrPepsiEveryDay(Franny)))", "prediction": ["all x.((Franny(x) & ((ExtremelyBusyParents(x) & -PackLunch(x) & DrinkKombucha(x)) | (-PackLunch(x) & DrinkKombucha(x))))) -> (-VisitsDentistFrequently(x) & -DrinksCocaCola(x) & -DrinksPepsiProducts(x))))", "((Franny(f) & -(Franny(f) & ExtremelyBusyParents(f) & -(Franny(f) & PackLunch(f) & DrinkKombucha(f))) | (-Franny(f) & -FruitlyVisitsDentist(f) & DrinksCokeCola(f) & DrinksPepsiProducts(f))))", "((Franny(f) & (ExtremelyBusyParents(f) | -BusyParents(f))) & (-BusyParents(f) & -BusyParents(f) & -BusyParents(f) & -BusyParents(f))) -> (-FrequentVisitor(f) & -DrinksPepsiProducts(f)))", "all x.((Franny(x) & ((ExtremelyBusyParents(x) & -PackLunch(x) & DrinkKombucha(x)) | (-BusyParents(x) & -PackLunch(x) & DrinkKombucha(x)))) -> (-VisitsDentistFrequently(x) & -DrinksCokeCola(x) & -DrinksPepsiProducts(x)))", "all x y.((Franny(x) & ((ExtremelyBusyParents(x) & -PackLunch(x) & DrinkKombucha(x)) | (-PackLunch(y) & DrinkKombucha(y)))) -> (-VisitsDentistFrequently(x) | DrinksCokeCola(x) | DrinksPepsiProducts(x)))", "(all x.((Franny(x) & ((Franny's Dentist(x) & -BusyParents(x) & -BusyParents(x)) & -BusyParents(x) & -BusyParents(x)) & -BusyParents(x) & -BusyParents(x)) -> (-Fruit(x) & -Freucet(x)))", "all x.((Franny(x) & ((ExtremelyBusyParents(x) & -HasTimeToPackLunch(x) & DrinkKombucha(x)) | (-HasTimeToPackLunch(x) & DrinkKombucha(x)))) -> (-VisitsDentistFrequently(x) | DrinksCokeCola(x) | DrinksPepsiProductsFrequently(x))))", "-((Franny(f) & (ExtremelyBusyParents(f) | -ExtremelyBusyParents(f)) & -(ExtremelyBusyParents(f) & -PackLunch(f) & DrinkKombucha(f))))", "(all x.((Franny(x) & -(BusyParent(x) & PackLunch(x) & DrinkKombucha(x))) | (-BusyParent(x) & -(BusyParent(x) & PackLunch(x) & DrinkKombucha(x)))))", "((Franny,Dentist) | (Franny,Dentist) | Franny,Pepsi)))) -> (-VisitsDentistFrequently(Franny,Dentist) | DrinksCocaCola(Franny,Fruit))))", "all x.((Franny(x) & ((Franny(x) & -BusyParents(x) & -PackLunch(x) & DrinkKombucha(x)) | (-Franny(x) & -PackLunch(x) & DrinkKombucha(x)))) -> (-FrequentVisitor(x) & -FrequentDrinking(x) & -FrequentVisitor(x) & -FrequentDrinksPepsiProducts(x)))", "(exists x.(Dentist(x) & Franny(x)) | (-(Dentist(x) | Dentist(x)) & -(Dentist(x) & VisitsFrequently(x) | DrinksCocaCola(x) | DrinksPepsiProducts(x)))))", "all x.((Franny(x) | (-Franny(x) & ExtremelyBusyParents(x) & -FruitlyGrowsUpWith(x,y) & -FruitlyGrowsUpWith(x,y))))", "all x.((Dentist(x) | (Dentist(x) & -(ExtremelyBusyParents(x) & PackLunch(x) & DrinkKombucha(x)))) -> (-VisitsDentistFrequently(x) | DrinksCokeCola(x) | DrinksPepsiProducts(x))))", "all x y.((Franny(x) & ((ExtremelyBusyParents(x) & -PackLunch(x) & DrinkKombucha(x)) | (-PackLunch(y) & DrinkKombucha(y)))) -> (-VisitsDentistFrequently(x) | DrinksCocaCola(x) | DrinksPepsiProducts(x)))", "all x.((Franny(x) & ((ExtremelyBusyParents(x) & -PackLunch(x) & DrinkKombucha(x)) | (-PackLunch(x) & DrinkKombucha(x)))) -> (-VisitsDentistFrequently(x) | -DrinksCocaCola(x) | DrinksPepsiProducts(x))))"]}
{"id": "folio_train_2515", "nl": "If Franny either visits the dentist frequently or drinks kombucha every day, then Franny both visits the dentist frequently and drinks Coca-Cola or Pepsi products every day.", "fol": "((VisitDentistFrequently(Franny) | DrinkKombuchaEveryDay(Franny)) -> (VisitDentistFrequently(Franny) & DrinkCocaColaOrPepsiEveryDay(Franny)))", "prediction": ["all x.((Franny(x) & (VisitsDentistFrequently(x) | DrinksKombuchaEveryDay(x))) -> (VisitsDentistFrequently(x) & DrinksCokeColaOrPepsiProductsEveryDay(x)))", "all x.((Franny(x) & (VisitsDentistFrequently(x) | DrinksKombuchaEveryDay(x))) -> (VisitsDentistFrequently(x) & DrinksCokeColaOrPepsiProductsEveryDay(x)))", "all x y.((Franny(x) & (VisitsDentistFrequently(x) | DrinksKombuchaEveryDay(x))) -> (VisitsDentistFrequently(x) & DrinksCokeColaOrPepsiProductsEveryDay(x)))", "((FrannyVisitsDentistFrequently(Franny) | DrinksKombuchaEveryDay(Franny))) -> (FrannyVisitsDentistFrequently(Franny) & (DrinksCokeCola(Franny) | DrinksPepsiProductsEveryDay(Franny))))", "((Franny(f) & VisitsDentistFrequently(f)) | DrinksKombuchaEveryDay(f)))", "all x.((Franny(x) & (VacatesDentistFrequently(x) | DrinksKombuchaEveryDay(x))) -> (VisitsDentistFrequently(x) & DrinksCokeColaOrPepsiProductsEveryDay(x)))", "((Franny(f) & (VisitsDentistFrequently(f) | DrinksKombuchaEveryDay(f))) | (VisitsDentistFrequently(f) & DrinksCokeColaOrPepsiProductsEveryDay(f))))", "all x.((Franny(x) & (VisitsDentistFrequently(x) | DrinksKombuchaEveryDay(x))) -> (VisitsDentistFrequently(x) & (DrinksCokeCola(x) | DrinksPepsiProductsEveryDay(x))))", "all x y.((Franny(x) & VisitsDentistFrequently(x) & (DrinksKombuchaEveryDay(x) | VisitsDentistFrequently(x))) -> (DrinksCokeCola(x) | DrinksPepsiProductsEveryDay(x)))", "((Franny,Dentist) & (FrequentVisit(Franny,Dentist) | DrinksKombucha(Franny,Dentist))) -> (FrequentVisit(Franny,Dentist) & (DrinksCokeCola(Fruit) | DrinksPepsi(Fruit))))", "(all x.((Franny(x) & VisitsDentist(x) & -DrinksKombucha(x)) -> (Franny(x) & VisitsDentist(x) & DrinksCokeColaOrPepsiProducts(x)))", "all x y.((Franny(x) & Dentist(y) & VisitsFrequently(x,y)) | (DrinksKombuchaEveryDay(x,y))))", "all x y.((Franny(x) & Dental(y) & (VisitsFrequently(x,y) | DrinksKombuchaEveryDay(x,y))) -> (VisitsFrequently(x,y) & DrinksCokeColaOrPepsiProductsEveryDay(x,y)))", "all x.((Franny(x) & (VacatesDentistFrequently(x) | DrinksKombuchaEveryDay(x))) -> (VisitsDentistFrequently(x) & (DrinksCokeCola(x) | DrinksPepsiProductsEveryDay(x))))", "all x.(Franny(x) -> ((FrequentVisitor(x) | DrinksKombuchaEveryDay(x)) & (FrequentVisitor(x) & DrinksCokeCola(x) | DrinksPepsiProductsEveryDay(x))))", "all x.((Franny(x) & (VisitsDentistFrequently(x) | DrinksKombuchaEveryDay(x))) -> (VisitsDentistFrequently(x) & DrinksCokeColaOrPepsiProductsEveryDay(x)))"]}
{"id": "folio_train_2516", "nl": "If a customer subscribes to AMC A List, then he/she can watch 3 movies every week without any additional fees. ", "fol": "all x.((SubscribedToAMCList(x,Amcalist) -> AvailableToWatch3Movies(x)) & NoAdditionalFees(x))", "prediction": ["all x.(SubscribesToAMCAList(x) -> CanWatchMoviesEveryWeek(x))", "all x y.((Customer(x) & SubscribesToAMCAList(x,y)) -> CanWatchMovies(x,y))", "(SubscribesToAMCAList(Customer,Movies) & Watches3Movies(Customer,Movies) & -AdditionalFees(Customer,Movies))", "all x.(SubscribesToAMCAList(x) -> WatchesMoviesEveryWeek(x,3))", "all x.((Customer(x) & SubscribesToAMCAList(x)) -> CanWatchMoviesEveryWeek(x,3))", "all x.(Subscribes(x) -> WatchesMovies(x,3))", "all x y.((Customer(x) & SubscribesToAMCAList(x)) -> CanWatchMovies(x,y))", "all x.(SubscribesToAMCAList(x) -> CanWatchMovies(x,3))", "all x y.((Customer(x) & SubscribesToAMCAList(x,y)) -> WatchesMoviesEveryWeek(x,y))", "all x y.((Customer(x) & SubscribesToAMCAList(x,y)) -> CanWatch3Movies(x,y))", "all x.((Customer(x) & SubscribesToAMCAList(x)) -> CanWatch3Movies(x))", "all x.((Customer(x) & SubscribesToAMCAList(x)) -> CanWatch3MoviesEveryWeek(x))", "all x.(SubscribesToAMCAList(x) -> WatchesMoviesEveryWeek(x,3))", "all x y.((Customer(x) & SubscribesToAMCAList(x,y)) -> CanWatchMoviesEveryWeek(x,y))", "All x.(SubscribesToAMCAList(x) -> (CanWatch3Movies(x) & -AdditionalFees(x)))", "all x.(SubscribesToAMCAList(x) -> CanWatch3Movies(x))"]}
{"id": "folio_train_2517", "nl": "Some customers go to cinemas every week. ", "fol": "exists x.GoToCinemaEveryWeek(x)", "prediction": ["exists x.(Customer(x) & GoesToCinema(x))", "exists x y.(Customer(x) & Cinema(y) & GoesTo(x,y))", "exists x.(Customer(x) & GoesToCinema(x))", "exists x.(Customer(x) & GoesToCinema(x))", "exists x.(Customer(x) & GoesToCinema(x,Week))", "exists x y.(Customer(x) & Cinema(y) & GoesTo(x,y))", "exists x.(Customer(x) & GoesToCinema(x))", "exists x y.(Customer(x) & Cinema(y) & GoesTo(x,y))", "exists x.(Customer(x) & GoesToCinema(x))", "exists x.(Customer(x) & Cinema(x) & GoesTo(x,Week))", "exists x.(Customer(x) & GoesToCinemasEveryWeek(x))", "exists x.(Customer(x) & GoesToCinema(x))", "exists x.(Customer(x) & GoToCinema(x))", "exists x y.(Customer(x) & Cinema(y) & GoesTo(x,y))", "exists x y.(Customer(x) & Cinema(y) & GoesTo(x,y))", "exists x.(Customer(x) & GoesToCinema(x) & EveryWeek(x))"]}
{"id": "folio_train_2518", "nl": "Customers who prefer TV series will not watch TV series in cinemas.", "fol": "all x.(PrefersTVSeries(x,Tvseries) -> -WatchesInCinemas(x,Cinemas))", "prediction": ["all x.((Customer(x) & PrefersTVSeries(x)) -> -WatchesTVSeriesInCinemas(x))", "all x y.((Customer(x) & TVSeries(y) & Prefers(x,y)) -> -WatchInCinemas(x,y))", "all x.(PrefersTVSeries(x) -> -WatchTVSeriesInCinemas(x))", "(all x.(PrefersTVSeries(x) -> -WatchTVSeriesInCinemas(x)))", "all x.((Customer(x) & PrefersTVSeries(x)) -> -WatchesTVSeriesInCinemas(x))", "all x y.((Customer(x) & PrefersTVSeries(x)) -> -WatchesTVSeriesInCinemas(x,y))", "all x.((Customer(x) & PrefersTVSeries(x)) -> -WatchTVSeriesInCinemas(x))", "all x y.((Customer(x) & TVSeries(y) & Prefers(x,y)) -> -WatchesInCinemas(x,y))", "all x.((Customer(x) & PrefersTVSeries(x)) -> -WatchesTVSeriesInCinemas(x))", "all x.(PrefersTVSeries(x) -> -WatchInCinemas(x))", "all x y.((Customer(x) & PrefersTVSeries(x,y)) -> -WatchesTVSeriesInCinemas(x,y))", "all x.((Customer(x) & PrefersTVSeries(x)) -> -WorthsInCinemas(x))", "all x y.((Customer(x) & PrefersTVSeries(x)) -> -WatchesTVSeriesInCinemas(x,y))", "all x.((Customer(x) & PrefersTVSeries(x)) -> -WatchesTVSeriesInCinemas(x))", "all x.(PrefersTVSeries(x) -> -WorthWatchingTVSeriesInCinemas(x))", "all x.(PrefersTVSeries(x) -> -WatchesTVSeriesInCinemas(x))"]}
{"id": "folio_train_2519", "nl": "James subscribes to AMC A List.", "fol": "SubscribedToAMCList(James,Amcalist)", "prediction": ["all x.(SubscribesToAMCAList(x) -> James(x))", "(SubscribesToAMCAList(James))", "James subscribes to AMCAList.", "all x y.((James(x) & AMCAList(y)) -> SubscribesTo(x,y))", "James SubscribesToAMCAList(James)", "All x.(James(x) -> SubscribesToAMCAList(x))", "All x.(JamesSubscribesToAMCAList(x) -> SubscribesToAMCAList(x))", "All x.((James(x) & AMCAList(x)) -> SubscribesTo(x,y))", "all x.(SubscribesToAMCAList(x) -> James(x))", "James SubscribesToAMCAList(James)", "James subscribes to AMC A List.", "all x y.((James(x) & AMCAList(y)) -> SubscribesTo(x,y))", "James SubscribesToAMCAList(James)", "(SubscribesToAMCAList(Jimmy,AMC))", "all x y.((James(x) & AMCList(y)) -> SubscribesTo(x,y))", "James subscribes to AMC A List."]}
{"id": "folio_train_2520", "nl": "Peter prefers TV series.", "fol": "PrefersTVSeries(Peter,Tvseries)", "prediction": ["Peter prefersTVSeries(Peter)", "all x.(PrefersTVSeries(x) -> Peter(x))", "-PrefersTVSeries(Peter)", "(PrefersTVSeries(Peter))", "all x.(PrefersTVSeries(x) -> PeterPrefersTVSeries(x))", "Peter prefersTelevisionSeries(Peter)", "Peter prefersTVSeries(Peter)", "all x.(PrefersTelevisionSeries(x) -> Peter(x))", "Peter prefersTelevisionSeries(Peter,TV)", "all x.(PrefersTVSeries(x) -> Peter(x))", "(PrefersTVSeries(Peter))", "all x.(PrefersTVSeries(x) -> PeterPrefersTVSeries(x))", "Peter prefers TVSeries.", "(PrefersTVSeries(Peter)", "(PrefersTVSeries(Peter,TV))", "(PrefersTVSeries(Peter)"]}
{"id": "folio_train_2521", "nl": "James is not able to watch 3 movies every week without any additional fees.", "fol": "-AvailableToWatch3Movies(James)", "prediction": ["all x.((James(x) & WatchesMovies(x,3)) -> -CanWatchMoviesWithoutAdditionalFees(x))", "-(WatchesMoviesEveryWeek(James,3) & -CanWatchMoviesWithoutAdditionalFees(James,3)))", "James is not able to watch 3 movies every week without any additional fees.", "-(James(James) & WatchesMovies(James,3) & -(James(James) & WatchesMovies(James,3) & -(James(James) & WatchesMovies(James,3))))", "all x.((James(x) & -(WatchesMoviesEveryWeek(x,3) & -(WatchesMoviesEveryWeek(x,3)))) -> -(WatchesMoviesEveryWeek(x,3) & -(WatchesMoviesEveryWeek(x,3)) & -(WatchesMoviesEveryWeek(x,3) & -(WatchesMovies(x,3) & Watches(x,3) & -((x,3))))))", "-(CanWatchMoviesEveryWeek(James,3) & -CanWatchMoviesEveryWeek(James,3)))", "all x.((James(x) & WatchesMovies(x,3) & -CanWatchMovies(x,3)) -> -CanWatchMoviesWithNoFees(x))", "(-CanWatchMoviesEveryWeek(James,3))", "James is unable to watch 3 movies every week without any additional fees.", "(James is unableToWatchMoviesWithoutAdditionalFees(James))", "all x.((James(x) & WatchesMoviesEveryWeek(x,3)) -> -CanWatchMoviesWithoutAdditionalFees(x))", "(-CanWatchMovies(James,3) & -CanWatchMovies(James,3))", "all x.(James(x) -> -CanWatch3MoviesEveryWeek(x))", "James is not able to watch 3 movies every week without any additional fees.", "all x.((James(x) & WatchesMovies(x,3)) -> -CanWatchMovies(x,3))", "all x.((James(x) & Movie(y)) -> -CanWatch(x,y))"]}
{"id": "folio_train_2522", "nl": "Peter will not watch TV series in cinemas.", "fol": "-WatchesInCinemas(Peter,Cinemas)", "prediction": ["all x.((Peter(x) & -WatchesTVSeriesInCinemas(x)) -> -WatchesTVSeriesInCinemas(x))", "(-WatchesTVSeriesInCinemas(Peter))", "all x y.((Peter(x) & TVSeries(y)) -> -WatchInCinemas(x,y))", "-(WatchesTVSeriesInCinemas(Peter))", "(-SwimmingInCinemas(Peter))", "all x.((Peter(x) & -WatchesTVSeriesInCinemas(x)) -> -WatchesTVSeriesInCinemas(x))", "all x.((Peter(x) & -(TVSeries(x) | Cinema(x)))) -> -WatchesIn(x,Cinema))", "Peter will not watch TVSeriesInCinemas(Peter)", "(-watchesTelevisionSeriesInCinemas(Peter))", "-(WatchesTVSeriesInCinemas(Peter) & -WatchesTVSeriesInCinemas(Peter))", "(-WatchesTVSeriesInCinemas(Peter))", "all x y.((Peter(x) & TVSeries(y)) -> -SelectsInCinemas(x,y))", "(-WatchTVSeriesInCinemas(Peter))", "all x.((Peter(x) & -SelectsTVSeries(x)) -> -SelectsCinemas(x))", "-(WatchTVSeriesInCinemas(Peter) | WatchTVSeriesInCinemas(Peter)))", "all x.((Peter(x) & TVSeries(y)) -> -WatchInCinemas(x,y))"]}
{"id": "folio_train_2523", "nl": "Bulbophyllum attenuatum is in the genus bulbophyllum.", "fol": "IsInGenus(Bulbophyllumattenuatum,Bulbophyllum)", "prediction": ["all x.(BulbophyllumAttenuatum(x) -> InGenusBulbophyllum(x))", "(GenusBulbophyllumAttenuatum)", "(Genomenon(Bulbophyllum) & Attenuatum(Bulbophyllum))", "all x y.((BulbophyllumAttenuatum(x) & Bulbophyllum(y)) -> InGenusBulbophyllum(x))", "all x.((BulbophyllumAttenuatum(x) & Bulbophyllum(x)) -> InGenusBulbophyllum(x))", "-BulbophyllumAttenuatum(Bulbophyllum)", "all x y.((Bulbophyllum(x) & Attenuatum(y)) -> InGenusBulbophyllum(x,y))", "all x.(BulbophyllumAttenuatum(x) -> InGenusBulbophyllum(x))", "all x.(BulbsophyllumAttenuatum(x) -> InGenusBulbophyllum(x))", "(Genome(Bulbophyllum) & Attenuatum(Bulbophyllum))", "(GenusBulbophyllumAttenuatum)", "all x.(BulbophyllumAttenuatum(x) -> InGenusBulbophyllum(x))", "all x y.((BulbophyllumAttenuatum(x) & Bulbophyllum(y)) -> InGenusBulbophyllum(x,y))", "all x.(BulbophyllumAttenuatum(x) -> InGenusBulocyllum(x))", "all x.(BulbophyllumAttenuatum(x) -> InGenusBulbophyllum(x))", "all x.(BulbophyllumAttenuatum(x) -> InGem(x,Bulbophyllum))"]}
{"id": "folio_train_2524", "nl": "All bulbophyllum are orchids.", "fol": "all x.(IsInGenus(x,Bulbophyllum) -> IsOrchid(x))", "prediction": ["all x.(Bulbophyllum(x) -> Orchid(x))", "all x.(Bulbsophyllum(x) -> Orchid(x))", "(all x.(Bulbophyllum(x) -> Orchid(x))", "all x.(Bulbophyllum(x) -> Orchid(x))", "all x y.((Bulbophyllum(x) & Orchid(y)) -> Orchid(x))", "all x.(Bulocyllum(x) -> Orchid(x))", "all x.(Bulbsophyllum(x) -> Orchid(x))", "all x.(Bulbophyllum(x) -> Orchid(x))", "all x y.((Bulbophyllum(x) & Orchid(y)) -> Orchid(x))", "all x.(Bulbophyllum(x) -> Orchid(x))", "all x.(Bumbiophyllum(x) -> Orchid(x))", "all x.(Bumbophyllum(x) -> Orchid(x))", "all x.(Bulbophyllum(x) -> Orchid(x))", "all x.(Bulbsophyllum(x) -> Orchid(x))", "all x.(Bulbophyllum(x) -> Orchid(x))", "all x.(Blumophyllum(x) -> Orchid(x))"]}
{"id": "folio_train_2525", "nl": "Bulbophyllum attenuatum is not an orchid.", "fol": "-IsOrchid(Bulbophyllumattenuatum)", "prediction": ["all x.(BulbophyllumAttenuatum(x) -> -Orchid(x))", "(-Orchid(BulbophyllumAttenuatum))", "all x.(BulbophyllumAttenuatum(x) -> -Orchid(x))", "(-Orchid(BulbophyllumAttenuatum))", "all x.(BulbsophyllumAttenuatum(x) -> -Orchid(x))", "-Orchid(bulbophyllum)", "all x.(BulbophyllumAttenuatum(x) -> -Orchid(x))", "(-Orchid(BulbophyllumAttenuatum))", "all x.(BulbophyllumAttenuatum(x) -> -Orchid(x))", "-Orchid(bulbophyllum)", "(-Orchid(BulbophyllumAttenuatum))", "all x.(BulbophyllumAttenuatum(x) -> -Orchid(x))", "-Orchidee(bulbophyllum(bulbophyllum)", "(-Orchid(BulbophyllumAttenuatum))", "-Orchid(bulbophyllum)", "All x.(BulbophyllumAttenuatum(x) -> -Orchid(x))"]}
{"id": "folio_train_2526", "nl": "There are eight federal districts of Russia: Central, Northwestern, Southern, North Caucasian, Volga, Ural, Siberian and Far Eastern.", "fol": "(IsFederalDistrictOfRussia(Central) | IsFederalDistrictOfRussia(Northwestern) | IsFederalDistrictOfRussia(Southern) | IsFederalDistrictOfRussia(Northcaucasian) | IsFederalDistrictOfRussia(Volga) | IsFederalDistrictOfRussia(Ural) | IsFederalDistrictOfRussia(Siberian) | IsFederalDistrictOfRussia(Fareastern))", "prediction": ["all x.((Region(x) & Central(x) & Northwestern(x) & Southern(x) & NorthCaucassian(x) & Volga(x) & Ural(x) & Siberian(x) & FarEastern(x)) -> Federal(x))", "(FederalDistrict(Russia) & Central(Russia) & Northwestern(Russia) & Southern(Russia) & NorthCaucassian(Russia) & Volga(Russia) & Ural(Russia) & Siberian(Russia) & FarEastern(Russia))", "all x.((Russland(x) & Central(x) & Northwestern(x) & Southern(x) & NorthCaucassian(x) & Volga(x) & Ural(x) & Siberian(x) & FarEastern(x)) -> FederalDistrict(x))", "there are eight federal districts of Russia: Central, Northwestern, Southern, NorthCaucassian, Volga, Ural, Siberian, FarEast.", "(FederalDistrict(Russland) & (Central(Russland) | Northwestern(Russland) | Southern(Russland))) & (NorthCaucassian(Russland) | Volga(Russland) | Ural(Russland) | Siberian(Russland) | FarEastern(Russland)))", "(FederalDistrict(Russia) -> (Central(Russia) & Northwestern(Russia) & Southern(Russia) & NorthCaucassian(Russia) & Volga(Russia) & Ural(Russia) & Siberian(Russia) & FarEastern(Russia)))", "(FederalDistrict(Russia) & (Central(Russia) | Northwestern(Russia) | Southern(Russia) | NorthCaucasian(Russia))) & (Volga(Russia) | Ural(Russia) | Siberian(Russia) | FarEastern(Russia)))", "(Central(Russia) & Northwestern(Russia) & Southern(Russia) & NorthCaucassian(Russia) & Volga(Russia) & Ural(Russia) & Siberian(Russia) & FarEastern(Russia))", "all x.(Russland(x) -> (Central(x) | Northwestern(x) | Southern(x) | NorthCaucasian(x) | Volga(x) | Ural(x) | Siberian(x) | FarEastern(x)))", "all x y.((FederalDistrict(x) & Central(y) & Northwestern(y) & Southern(y) & NorthCaucassian(y)) -> (Volga(x) & Ural(x) & Siberian(x) & FarEastern(y)))", "exists x y z.(FederalDistrict(x,y) & Central(y) & Northwestern(z) & Southern(x) & NorthCaucassian(y) & Volga(z) & Ural(z) & Siberian(z) & FarEastern(z))", "all x.((Region(x) & Central(x) & Northwestern(x) & Southern(x) & NorthCaucasian(x) & Volga(x) & Ural(x) & Siberian(x) & FarEast(x)) -> Federal(x))", "There are eight federal districts of Russia: Central, Northwestern, Southern, NorthCaucasian, Volga, Ural, Siberian, FarEastern.", "All x.(Russland(x) -> (Central(x) | Northwestern(x) | Southern(x) | NorthCucasian(x) | Volga(x) | Ural(x) | Siberian(x) | FarEastern(x)))", "all x y.((FederalDistrict(x) & Russia(y)) -> (Central(x) | Northwestern(x) | Southern(x) | NorthCaucassian(x) | Volga(y) | Ural(y) | Siberian(y) | FarEastern(y)))", "there are 8 federal districts of Russia: Central, Northwestern, Southern, NorthCaucasian, Volga, Ural, Siberian, FarEast."]}
{"id": "folio_train_2527", "nl": "The Central federal district has the largest population among all federal districts in Russia.", "fol": "(IsFederalDistrictOfRussia(Central) & HasLargestPopulationIn(Central))", "prediction": ["all x.(CentralFederalDistrict(x) -> LargestPopulation(x))", "all x y.((CentralFederalDistrict(x) & FederalDistrict(y)) -> LargestPopulation(x,y))", "(LargestPopulationInRegion(CentralFederalDistrict) & AmongRegion(CentralFederalDistricts))", "(LargestPopulationInRegion(CentralFederalDistrict) & AmongFederalDistricts(CentralFederalDistricts) & InRussland(CentralFederalDistricts))", "(LargestPopulationInFederalDistrict(CentralFederalDistrict) & AmongFederalDistrictsInRussia(CentralFederalDistrict))", "all x y z.((CentralFederalDistrict(x) & FederalDistrict(y) & FederalDistrict(z)) -> LargestPopulation(x,y,z))", "all x y.((CentralFederalDistrict(x) & FederalDistrict(y) & Russia(y)) -> LargestPopulation(x,y))", "all x.(CentralFederalDistrict(x) -> LargestPopulation(x))", "all x.((CentralFederalDistrict(x) & LargestPopulation(x) & FederalDistrict(x)) -> InRussia(x))", "the largestpopulationInRussianFederalDistricts(CentralFederalDistrict)", "all x.(CentralFederalDistrict(x) -> LargestPopulationInRussia(x))", "all x y.((CentralFederalDistrict(x) & FederalDistrict(y)) -> LargestPopulation(x,y))", "all x y.((CentralFederalDistrict(x) & FederalDistrict(y) & Russia(y)) -> LargestPopulation(x,y))", "all x.(CentralFederalDistrict(x) -> LargestPopulation(x))", "All x.(CentralFederalDistrict(x) -> LargestPopulationInRussland(x))", "All x.(CentralFederalDistrict(x) -> LargestPopulation(x))"]}
{"id": "folio_train_2528", "nl": "Moscow is the administrative center of the Central federal district.", "fol": "IsAdministrativeCenterOf(Moscow,Central)", "prediction": ["(AdministrativeCenter(Moscow) & CentralFederalDistrict(Moscow))", "all x.(Moscow(x) -> AdministrativeCenter(x))", "all x.((Moscow(x) & CentralFederalDistrict(x)) -> AdministrativeCenter(x))", "CentralFederalDistrict(Moscow)", "all x y.((Moscow(x) & CentralFederalDistrict(y)) -> AdministrativeCenter(x,y))", "Moscow is administrativecenter of CentralFederalDistrict(Moscow)", "Located in the CentralFederalDistrict(Moscow)", "all x.((Moscow(x) & AdministrativeCenter(x)) -> CentralFederalDistrict(x))", "(AdministrativeCenter(Moscow) & CentralFederalDistrict(Moscow))", "the administrative center of CentralFederalDistrict(Moscow)", "(AdministrativeCenter(Moscow,CentralFederalDistrict))", "CentralFederalDistrict(Moscow)", "all x.(Moscow(x) -> AdministrativeCenter(x))", "all x y.((Moscow(x) & CentralFederalDistrict(y)) -> AdministrativeCenter(x,y))", "All x.(Moscow(x) -> AdministrativeCenter(x,CentralFederalDistrict))", "(AdministrativeCenter(Moscow) & CentralFederalDistrict(Moscow))"]}
{"id": "folio_train_2529", "nl": "Yekaterinburg is the administrative center of the Ural federal district.", "fol": "IsAdministrativeCenterOf(Yekaterinburg,Ural)", "prediction": ["(AdministrativeCenter(Yekaterinburg) & UralFederalDistrict(Yekaterinburg))", "all x.((Yekaterinburg(x) & UralFederalDistrict(x)) -> AdministrativeCenter(x))", "all x.(Yekaterinburg(x) -> AdministrativeCenterOfUralFederalDistrict(x))", "Yekaterinburg is administrativecenter of UralFederalDistrict(y))", "(AdministrativeCenter(y) & UralFederalDistrict(z))", "All x.(Ekaterinburg(x) -> AdministrativeCenterOfUralFederalDistrict(x))", "all x y.((Yekaterinburg(x) & UralFederalDistrict(y)) -> AdministrativeCenter(x,y))", "(AdministrativeCenter(Yekaterinburg) & UralFederalDistrict(Yekaterinburg))", "Yekaterinburg is administrativecenter of Ural FederalDistrict.", "all x.(Yekaterinburg(x) -> AdministrativeCenterOfUralFederalDistrict(x))", "(AdministrativeCenter(y) & UralFederalDistrict(z) & LocatedIn(y,z))", "Yekaterinburg (AdministrativeCenter(y) & UralFederalDistrict))", "(AdministrativeCenterOfUralFederalDistrict(Yekaterinburg))", "all x y.((Yekaterinburg(x) & UralFederalDistrict(y)) -> AdministrativeCenter(x,y))", "Yekaterinburg (AdministrativeCenter(y) & UralFederalDistrict(z))", "All x.(Yekaterinburg(x) -> AdministrativeCenter(x))"]}
{"id": "folio_train_2530", "nl": "Vladivostok is the administrative center of the Far Eastern federal district.", "fol": "IsAdministrativeCenterOf(Vladivostok,Fareastern)", "prediction": ["(AdministrativeCenter(Vladivostok) & FarEasternFederalDistrict(Vladivostok))", "Vladivostok (AdministrativeCenter(Vladivostok) & FarEasternFederalDistrict(Vladivostok))", "all x.((Vladivostok(x) & FarEasternFederalDistrict(x)) -> AdministrativeCenter(x))", "Located in the Far EasternFederalDistrict(Vladivostok)", "Vladivostok is administrativecenter of Far EasternFederalDistrict(Vladivostok)", "Vladivostok (AdministrativeCenter(Vladivostok) & FarEastFederalDistrict(Vladivostok))", "all x.(Vladivostok(x) -> AdministrativeCenterOfFarEasternFederalDistrict(x))", "all x y.((Vladivostok(x) & FarEasternFederalDistrict(y)) -> AdministrativeCenter(x,y))", "all x.((Vladivostok(x) & FarEastFederalDistrict(x)) -> AdministrativeCenter(x))", "Vladivostok is administrativecenter of FarEasternFederalDistrict(Vladivostok)", "(AdministrativeCenter(Vladivostok) & FarEasternFederalDistrict(Vladivostok))", "(AdministrativeCenter(Vladivostok,FarEasternDistrict))", "All x.(Vladivostok(x) -> AdministrativeCenter(x))", "Vladivostok (AdministrativeCenter(Vladivostok) & FarEastFederalDistrict(Vladivostok))", "(AdministrativeCenter(Vladivostok,FarEastFederalDistrict))", "Vladivostok (AdministrativeCenterFarEasternDistrict)"]}
{"id": "folio_train_2531", "nl": "The Far Eastern federal district has the largest area among all federal districts in Russia.", "fol": "(IsFederalDistrictOfRussia(Fareastern) & HasLargestAreaIn(Fareastern))", "prediction": ["all x.(FarEastFederalDistrict(x) -> LargestArea(x))", "all x.(FarEasternFederalDistrict(x) -> LargestArea(x))", "all x y.((FarEastFederalDistrict(x) & FederalDistrict(y) & Russia(y)) -> LargestArea(x,y))", "(LargestAreaInFederalDistrict(FarEastern) & InFederalDistrict(FederalDistrict(FederalDistrict) & InFederalDistrict(FederalDistrict) & InFederalDistrict(FederalDistrict))", "all x y.((FarEasternFederalDistrict(x) & FederalDistrict(y) & Russia(y)) -> LargestArea(x,y))", "(LargestAreaAmongFederalDistrictsInRussia(FarEast))", "the largestarea(FarEasternFederalDistrict)", "all x.(FarEastFederalDistrict(x) -> LargestAreaInRussia(x))", "all x y.((FarEastFederalDistrict(x) & FederalDistrict(y) & InRussia(x,y)) -> LargestArea(x,y))", "all x.(FarEasternFederalDistrict(x) -> LargestAreaInRussia(x))", "all x y z.((FarEastFederalDistrict(x) & FederalDistrict(y) & FederalDistrict(z)) -> LargestArea(x,y,z))", "all x y.((FarEasternFederalDistrict(x) & FederalDistrict(y)) -> LargestArea(x,y))", "All x.(FarEast(x) -> LargestAreaInFederalDistrict(x))", "all x.(FarEasternFederalDistrict(x) -> LargestAreaInRussland(x))", "all x.(FarEastFederalDistrict(x) -> LargestArea(x))", "All x.(FarEasternFederalDistrict(x) -> LargestAreaInRussia(x))"]}
{"id": "folio_train_2532", "nl": "Some federal districts of Russia were established in 2000.", "fol": "exists x.(IsFederalDistrictOfRussia(x) -> WasEstablishedIn(x,2000))", "prediction": ["exists x.(FederalDistrict(x) & EstablishedIn(x,2000))", "exists x.(FederalDistrict(x) & EstablishedIn2000(x))", "exists x.(FederalDistrict(x) & EstablishedIn(x,2000))", "existed x y.((FederalDistrict(x) & FederalDistrict(y) & EstablishedIn(x,y)) -> EstablishedIn(x,y))", "exists x.(Region(x) & Federal(x) & EstablishedIn(x,2000))", "exists x y.(FederalDistrict(x) & FederalDistrict(y) & EstablishedIn(x,y))", "exists x.(RossovskiyFederalDistrict(x) & EstablishedIn2000(x))", "exists x.(FederalDistrict(x) & EstablishedIn2000(x))", "exists x.(FederalDistrict(x) & EstablishedIn2000(x))", "(exists x.(FederalDistrict(x) & EstablishedIn2000(x)))", "exists x.(FederalDistrict(x) & EstablishedIn(x,2000))", "exists x.(Region(x) & Federal(x) & EstablishedIn2000(x))", "exists x.(FederalDistrict(x) & EstablishedIn2000(x))", "exists x.(FederalDistrict(x) & EstablishedIn(x,2000))", "existed x.(RussianFederalDistrict(x) & EstablishedIn2000(x))", "exists x.(FederalDistrict(x) & EstablishedIn(x,2000))"]}
{"id": "folio_train_2533", "nl": "Vladivostok is the administrative center of the federal district with the largest area.", "fol": "exists x.(IsAdministrativeCenterOf(Vladivostok,x) & HasLargestAreaIn(x) & IsFederalDistrictOfRussia(x))", "prediction": ["all x.((AdministrativeCenter(x) & FederalDistrict(x) & LargestArea(x)) -> Vladivostok(x))", "(AdministrativeCenter(Vladivostok) & LargestArea(Vladivostok))", "all x.(Vladivostok(x) -> (AdministrativeCenter(x) & FederalDistrict(x) & LargestArea(x)))", "the administrativecenter(Vladivostok) & FederalDistrict(Vladivostok) & LargestArea(Vladivostok))", "all x y.((AdministrativeCenter(x) & FederalDistrict(y) & LargestArea(x,y)) -> Vladivostok(x))", "Vladivostok (AdministrativeCenter(Vladivostok) & LargestArea(Vladivostok))", "(AdministrativeCenter(Vladivostok) & FederalDistrict(Vladivostok) & LargestArea(Vladivostok))", "Vladivostok is administrativecenter(Vladivostok) & FederalDistrict(Vladivostok) & LargestArea(Vladivostok))", "Located in the administrative center of the federal district with the largestarea(Vladivostok,FederalDistrict))", "Located in the FederalDistrict(Vladivostok) & AdministrativeCenter(Vladivostok) & LargestArea(Vladivostok))", "all x y.((Vladivostok(x) & FederalDistrict(y)) -> AdministrativeCenter(x,y))", "all x.((AdministrativeCenter(x) & FederalDistrict(x) & LargestArea(x)) -> Vladivostok(x))", "(AdministrativeCenter(Vladivostok,FederalDistrict) & LargestArea(Vladivostok))", "Vladivostok (AdministrativeCenter(Vladivostok) & LargestArea(Vladivostok))", "all x.(Vladivostok(x) -> (AdministrativeCenter(x) & FederalDistrict(x) & LargestArea(x)))", "(AdministrativeCenter(Vladivostok,FederalDistrict) & LargestArea(Vladivostok))"]}
{"id": "folio_train_2534", "nl": "Moscow is the administrative center of the federal district with the largest population.", "fol": "exists x.(IsAdministrativeCenterOf(Moscow,x) & HasLargestPopulationIn(x) & IsFederalDistrictOfRussia(x))", "prediction": ["all x.(Moscow(x) -> (AdministrativeCenter(x) & FederalDistrict(x) & LargestPopulation(x)))", "(AdministrativeCenter(Moscow) & FederalDistrict(Moscow) & LargestPopulation(Moscow))", "all x.((Moscow(x) & FederalDistrict(x) & LargestPopulation(x)) -> AdministrativeCenter(x))", "Moscow is administrativecenterofFederalDistrict(Moscow) & LargestPopulation(Moscow))", "-(AdministrativeCenter(Moscow) & FederalDistrict(Moscow) & LargestPopulation(Moscow))", "all x y.((Moscow(x) & FederalDistrict(y)) -> AdministrativeCenter(x,y))", "(AdministrativeCenter(Moscow) & FederalDistrict(Moscow) & LargestPopulation(Moscow))", "all x.(Moscow(x) -> (AdministrativeCenter(x) & FederalDistrict(x) & LargestPopulation(x)))", "all x.((Moscow(x) & FederalDistrict(x) & LargestPopulation(x)) -> AdministrativeCenter(x))", "(AdministrativeCenter(Moscow,FederalDistrict) & LargestPopulation(Moscow))", "all x y.((Moscow(x) & FederalDistrict(y)) -> AdministrationCenterWithLargestPopulation(x,y))", "Located in the FederalDistrict(Moscow) & AdministrativeCenter(Moscow) & LargestPopulation(Moscow))", "(AdministrativeCenter(Moscow) & FederalDistrict(Moscow) & LargestPopulation(Moscow))", "the largestpopulation(Moscow)", "(AdministrativeCenter(Moscow,FederalDistrict) & LargestPopulation(Moscow))", "all x.(Moscow(x) -> (AdministrativeCenter(x) & FederalDistrict(x) & LargestPopulation(x)))"]}
{"id": "folio_train_2535", "nl": "The Northwestern federal district was established in 2000.", "fol": "WasEstablishedIn(Northwestern,2000)", "prediction": ["all x.(NordwesternFederalDistrict(x) -> EstablishedIn2000(x))", "(NordwesternFederalDistrict(n) & EstablishedIn2000(n))", "all x.(NorthwesternFederalDistrict(x) -> EstablishedIn2000(x))", "The NorthwesternFederalDistrict(n) & EstablishedIn2000(n))", "NorthwesternFederalDistrict(n) & EstablishedIn2000(n) & LocatedIn(n) & LocatedIn(n) & LocatedIn(n) & LocatedIn(n) & LocatedIn(n) & LocatedIn(n) & LocatedIn(n) & LocatedIn(n) & LocatedIn(n) & LocatedIn(n) & LocatedIn(n) & LocatedIn(n))", "NorthwesternFederalDistrict(n) & EstablishedIn2000(n))", "(NorthwesternFederalDistrict(n) & EstablishedIn2000(n))", "FoundedIn2000, NorthwesternFederalDistrict(northwest)", "(EstablishedIn2000(NorthwesternFederalDistrict) & NorthwesternFederalDistrict(Norfolk))", "The Northwestern FederalDistrict was established in 2000.", "all x.(NorwestFederalDistrict(x) -> EstablishedIn2000(x))", "Das NorthwesternFederalDistrict(n) & EstablishedIn2000(n))", "Der NorthwesternFederalDistrict(NWFd) & EstablishedIn2000(NWFd))", "Das NorthwesternFederalDistrict (Norfolk) & EstablishedIn2000(norfolk))", "the NorthwesternFederalDistrict(NWDistrict) was established in 2000.", "The Northwestern FederalDistrict was established in 2000."]}
{"id": "folio_train_2536", "nl": "All cancers are malignant tumors.", "fol": "all x.(IsCancer(x) -> IsMalignantTumor(x))", "prediction": ["all x.(Cancer(x) -> MalignantTumor(x))", "all x.(Cancer(x) -> MalignantTumor(x))", "all x.(Cancer(x) -> MalignantTumor(x))", "all x y.((Cancer(x) & Tumor(y) & Malignant(x,y)) -> Malignant(x))", "(all x.(Cancer(x) -> MalignantTumor(x)))", "all x.(Cancerous(x) -> MalignantTumor(x))", "all x y.((Cancer(x) & Cancer(y) & MalignantTumor(x)) -> Malignant(y))", "all x.(Cancer(x) -> MalignantTumor(x))", "(all x.(Cancer(x) -> MalignantTumor(x)))", "all x.(Cancerous(x) -> MalignantTumor(x))", "all x.(Cancer(x) -> MalignantTumor(x))", "(all x.(Cancer(x) -> MalignantTumor(x))", "all x.(Cancer(x) -> MalignantTumor(x))", "all x.(Cancer(x) -> MalignantToxicTumor(x))", "all x.(Cancer(x) -> MalignantTumor(x))", "all x.(Cancer(x) -> MalignantTumour(x))"]}
{"id": "folio_train_2537", "nl": "No malignant tumor can be treated at home.", "fol": "all x.(IsMalignantTumor(x) -> -CanTreatAtHome(x))", "prediction": ["-exists x.(MalignantTumor(x) & TreatableAtHome(x))", "all x.((MalignantTumor(x) & -CanBeTreatedAtHome(x)) -> -CanBeTreatedAtHome(x))", "all x.(MalignantTumor(x) -> -CanBeTreatedAtHome(x))", "all x.((MalignantTumor(x) & HomeTreatment(x)) -> -CanBeTreated(x))", "-exists x.(MalignantTumor(x) & TreatableAtHome(x))", "(exists x.(MalignantTumor(x) & -CanBeTreatedAtHome(x)))", "-exists x.(MalignantTumor(x) & CanBeTreatedAtHome(x))", "all x.(MalignantTumor(x) -> -CanBeTreatedAtHome(x))", "all x.((MalignantTumor(x) & Home(x)) -> -CanBeTreated(x))", "-exists x.(MalignantTumor(x) & -CanBeTreatedAtHome(x))", "(exists x.(MalignantTumor(x) & -CanBeTreatedAtHome(x)))", "all x.(MalignantTumor(x) -> -CanBeTreatedAtHome(x))", "-exists x.(malignantTumor(x) & TreatableAtHome(x))", "-exists x.(MalignantTumor(x) & CannotBeTreatedAtHome(x))", "-exists x.(MalignantTumor(x) & TreatableAtHome(x))", "-exists x.(MalignantTumor(x) & -CanBeTreatedAtHome(x))"]}
{"id": "folio_train_2538", "nl": "All colorectal cancer is cancer.", "fol": "all x.(IsColorectalCancer(x) -> IsCancer(x))", "prediction": ["all x.(ColoredCancer(x) -> Cancer(x))", "all x.(ColorectalCancer(x) -> Cancer(x))", "all x.(ColoredCancer(x) -> Cancer(x))", "all x.(ColoredCancel(x) -> Cancer(x))", "all x.(ColorectalCancer(x) -> Cancer(x))", "all x y.((ColoredCancer(x) & Cancer(y)) -> Cancer(x))", "(all x.(ColorectalCancer(x) -> Cancer(x))", "(all x.(ColoredCancer(x) -> Cancer(x))", "all x.(ColoredCancer(x) -> Cancer(x))", "all x.(ColorectalCancer(x) -> Cancer(x))", "all x.(ColoredCancerous(x) -> Cancer(x))", "(all x.(ColoredCancel(x) -> Cancer(x))", "all x.(ColorectalCancer(x) -> Cancer(x))", "all x.(ColoquectalCancer(x) -> Cancer(x))", "all x.(ColonialCancer(x) -> Cancer(x))", "all x.(ColorectalCancer(x) -> Cancer(x))"]}
{"id": "folio_train_2539", "nl": "Having a cold can be treated at home.", "fol": "all x.(HasCold(x) -> CanTreatAtHome(x))", "prediction": ["all x.(Cold(x) -> TreatableAtHome(x))", "all x.((Cold(x) & TreatableAtHome(x)) -> CanBeTreatedAtHome(x))", "all x.(Cold(x) -> TreatableAtHome(x))", "all x y.((Cold(x) & Home(y)) -> TreatableAt(x,y))", "all x.(Cold(x) -> CanBeTreatedAtHome(x))", "all x.((Cold(x) & TreatableAtHome(x)) -> CanBeTreatedAtHome(x))", "all x y.((Cold(x) & Home(y)) -> TreatableAtHome(x,y))", "all x.((Cold(x) & TreatableAtHome(x)) -> CanBeTreated(x))", "all x y.((Cold(x) & Home(y) & Has(x,y)) -> TreatableAtHome(x))", "all x.(Cold(x) -> TreatableAtHome(x))", "all x y.((Cold(x) & Home(y)) -> TreatableAt(x,y))", "all x.(Cold(x) -> CanBeTreatedAtHome(x))", "exists x.(Cold(x) & TreatableAtHome(x))", "exists x.(Cold(x) & TreatableAtHome(x))", "exists x.(Cold(x) & TreatedAtHome(x))", "exists x.(Cold(x) & TreatableAtHome(x))"]}
{"id": "folio_train_2540", "nl": "Breast cancer is neither having a cold nor a malignant tumor (exclusive).", "fol": "-((HasCold(BreastCancer) & -IsMalignantTumor(BreastCancer)) | (-HasCold(BreastCancer) & IsMalignantTumor(BreastCancer)))", "prediction": ["all x.(BreastCancer(x) -> ((NegativeCold(x) | MalignantTumor(x)) & -(Cold(x) & Malignant(x)))))", "all x.(BertilizedCancer(x) -> ((NegativeCold(x) | MalignantTumor(x)) & -(Cold(x) & Malignant(x)))))", "all x y.((BreastCancer(x) & Cold(y) & MalignantTumor(x)) -> -(Cold(y) | Malignant(y))))", "((BreastCancer(x) & -Cold(x) & MalignantTumor(x)) -> -Cold(x)))", "all x.(BreakCancerous(x) -> ((NegativeCold(x) | MalignantTumor(x)) & -(Cold(x) & Malignant(x)))))", "all x.(BreastCancer(x) -> (-Cold(x) | MalignantTumor(x)))", "all x.((BreastCancer(x) & -Cold(x) & -MalignantTumor(x)) -> -(Cold(x) & MalignantTumor(x)))", "all x.(BertilizedCancer(x) -> (-Cold(x) | MalignantTumor(x)))", "(all x.(BreastCancer(x) -> (-Cold(x) | MalignantTumor(x))))", "all x y.((BreastCancer(x) & Cold(y) & MalignantTumor(z)) -> (-HasCold(x,y) & -HasMalignant(x,z)))", "all x.(BreastCancer(x) -> ((NegativeCold(x) | MalignantTumor(x)) & -(Cold(x) & MalignantTumor(x)) & -(Cold(x) & MalignantTumor(x)))))", "(all x.(BreastCancer(x) -> (-HasCold(x) | HasMalignantTumor(x))))", "all x y.((BreakCancerous(x) & Cold(y) & MalignantTumor(z)) -> (-Has(x,y) & -Has(x,z)))", "all x.(BreakCancerous(x) -> ((NegativeCold(x) | MalignantTumor(x)) & -(HasCold(x) & HasMalignantTumor(x)))))", "(all x.(BertilCancer(x) -> (-Cold(x) | MalignantTumor(x))))", "exists x.(BreastCancer(x) & -(Cold(x) | MalignantTumor(x)))"]}
{"id": "folio_train_2541", "nl": "Breast cancer can be treated at home.", "fol": "CanTreatAtHome(BreastCancer)", "prediction": ["all x.(BreastCancer(x) -> CanBeTreatedAtHome(x))", "all x y.((BreastCancer(x) & Home(y)) -> CanBeTreated(x,y))", "all x.(BreakCancerous(x) -> CanBeTreatedAtHome(x))", "all x.(BreastCancer(x) -> CanBeTreatedAtHome(x))", "(TreatmentAtHome(BreastCancer) -> TreatableByHome(BreastCancer))", "all x y.((BreastCancer(x) & Home(y)) -> Treatable(x,y))", "all x.(BreastCancer(x) -> TreatableAtHome(x))", "all x.(BreakCancerous(x) -> CanBeTreatedAtHome(x))", "all x y.((BreakCancerous(x) & Home(y)) -> CanBeTreated(x,y))", "all x.(BertilCancer(x) -> TreatableAtHome(x))", "all x.((BreastCancer(x) & Home(x)) -> Treatable(x))", "all x y.((BreastCancer(x) & Home(y)) -> CanBeTreated(x,y))", "all x.((BreastCancer(x) & Home(x)) -> CanBeTreated(x))", "all x.(BreastCancer(x) -> CanBeTreatedAtHome(x))", "all x y.((BreastCancer(x) & Home(y)) -> Treatable(x,y))", "exists x.(BreakCancerous(x) & TreatableAtHome(x))"]}
{"id": "folio_train_2542", "nl": "Breast cancer is colorectal cancer.", "fol": "IsColorectalCancer(BreastCancer)", "prediction": ["all x.(BreastCancer(x) -> ColorectalCancer(x))", "all x.(BreakCancel(x) -> ColorectalCancer(x))", "all x y.((BreastCancer(x) & ColorectalCancer(y)) -> Cancer(x,y))", "all x.(BreastCancer(x) -> ColorectalCancer(x))", "all x.(BertilizedCancer(x) -> ColorectalCancer(x))", "(ColoredCancer(BreastCancerous)", "all x y.((BreastCancer(x) & ColorectalCancer(y)) -> BreastCancer(x,y))", "all x.(BreakCancel(x) -> ColorectalCancer(x))", "all x.(BreastCancer(x) -> ColorectalCancer(x))", "all x.((BreastCancer(x) & ColorectalCancer(x)) -> Cancer(x))", "(all x.(BreastCancer(x) -> ColorectalCancer(x))", "all x y.((BreastCancer(x) & ColorectalCancer(y)) -> Cancer(x,y))", "all x.(BertilizedCancer(x) -> ColorectalCancer(x))", "all x.(BreastCancer(x) -> ColorectalCancer(x))", "(all x.(BreastCancer(x) -> ColorectalCancer(x))", "exists x.(BreastCancer(x) & ColorectalCancer(x))"]}
{"id": "folio_train_2543", "nl": "Breast cancer is not colorectal cancer.", "fol": "-IsColorectalCancer(BreastCancer)", "prediction": ["all x.(BreastCancer(x) -> -ColorectalCancer(x))", "(-ColorectalCancer(BreastCancer))", "all x.(BreakCancel(x) -> -ColorectalCancer(x))", "all x.(BreastCancer(x) -> -ColorectalCancer(x))", "(-ColorectalCancer(BreastCancer))", "all x.((BreastCancer(x) & -ColoredCancel(x)) -> -ColorectalCancer(x))", "all x.(BreakCancel(x) -> -ColorectalCancer(x))", "all x y.((BreastCancer(x) & ColorectalCancer(y)) -> -ColorectalCancer(x,y))", "all x.(BreastCancer(x) -> -ColorectalCancer(x))", "-ColorectalCancer(b)", "all x.(BertilCancer(x) -> -ColorectalCancer(x))", "(all x.(BreastCancer(x) -> -ColorectalCancer(x)))", "(all x.(BreastCancer(x) -> -ColonialCancer(x))", "exists x.(BreastCancer(x) & -ColoredCancer(x))", "exists x.(BreakCancerous(x) & -ColorectalCancerous(x))", "all x.(BreastCancer(x) -> -ColorectalCancer(x))"]}
{"id": "folio_train_2544", "nl": "Breast cancer is colorectal cancer or a malignant tumor.", "fol": "(IsColorectalCancer(BreastCancer) | IsMalignantTumor(BreastCancer))", "prediction": ["all x.(BreastCancer(x) -> (ColorectalCancer(x) | MalignantTumor(x)))", "all x.(BertilizedCancer(x) -> (ColorectalCancer(x) | MalignantTumor(x)))", "all x.(BreakCancerous(x) -> (ColorectalCancer(x) | MalignantTumor(x)))", "all x y.((BreastCancer(x) & (ColorectalCancer(y) | MalignantTumor(y))) -> BreastCancer(x))", "all x.(BreastCancer(x) -> (ColorectalCancer(x) | MalignantTumor(x)))", "all x.(BreastCancer(x) -> (ColoredCancerous(x) | MalignantTumor(x)))", "all x.(BertilizedCancer(x) -> (ColorectalCancer(x) | MalignantTumor(x)))", "all x y.((BreastCancer(x) & (ColorectalCancer(y) | MalignantTumor(y))) -> Cancer(x,y))", "all x.(BreakCancerous(x) -> (ColorectalCancer(x) | MalignantTumor(x)))", "all x y.((BreakCancerous(x) & ColorectalCancer(y)) | MalignantTumor(y)) -> BreastCancer(x))", "all x.((BreastCancer(x) & (ColoredCancerous(x) | MalignantTumor(x))) -> BreastCancer(x))", "all x.(Bern cancer(x) -> (ColorectalCancer(x) | MalignantTumor(x)))", "(all x.(BreastCancer(x) -> (ColorectalCancer(x) | MalignantTumor(x))))", "exists x.(BrainCancer(x) & (ColorectalCancer(x) | MalignantTumor(x)))", "all x.(BreastCancer(x) -> (ColorectalCancer(x) | MalignantTumor(x)))", "(all x.(BreastCancer(x) -> ColorectalCancer(x)) | MalignantTumor(x)))"]}
{"id": "folio_train_2545", "nl": "Breast cancer is colorectal cancer and a cancer.", "fol": "(IsColorectalCancer(BreastCancer) & IsCancer(BreastCancer))", "prediction": ["all x.(BreastCancer(x) -> (ColorectalCancer(x) & Cancer(x)))", "all x.(BreakCancel(x) -> (ColorectalCancer(x) & Cancer(x)))", "all x.(BreastCancer(x) -> (ColoredCancer(x) & Cancer(x)))", "all x.(BertilizedCancer(x) -> (ColorectalCancer(x) & Cancer(x)))", "all x y.((BreastCancer(x) & ColorectalCancer(y)) -> Cancer(x,y))", "(all x.(BreastCancer(x) -> ColorectalCancer(x)) & Cancer(x))", "all x.(BreakCancerous(x) -> (ColoredCancer(x) & Cancer(x)))", "all x y.((BreakCancel(x) & ColorectalCancer(y)) -> Cancer(x,y))", "all x.(BreastCancer(x) -> (ColorectalCancer(x) & Cancer(x)))", "all x.(BertilizedCancer(x) -> (ColoredCancerous(x) & Cancer(x)))", "all x y.((BreastCancer(x) & ColorectalCancer(y)) -> Cancer(x,y))", "(all x.(BreastCancer(x) -> ColorectalCancer(x)) & Cancer(x))", "all x.(BreastCancer(x) -> (ColoredCancer(x) & Cancer(x)))", "(all x.(BreastCancer(x) -> ColorectalCancer(x)) & Cancer(x))", "exists x.(BreastCancer(x) & ColorectalCancer(x) & Cancer(x))", "all x.(BreakCancel(x) -> (ColorectalCancer(x) & Cancer(x)))"]}
{"id": "folio_train_2546", "nl": "If breast cancer is not colorectal cancer, then breast cancer is a malignant tumor.", "fol": "(-IsColorectalCancer(BreastCancer) -> IsMalignantTumor(BreastCancer))", "prediction": ["all x.((BreastCancer(x) & -ColorectalCancer(x)) -> MalignantTumor(x))", "all x.((BreakCancerous(x) & -ColorectalCancer(x)) -> MalignantTumor(x))", "(-ColorectalCancer(BreastCancer)) -> MalignantTumor(BreastCancer))", "all x.((BreastCancer(x) & -ColorectalCancer(x)) -> MalignantTumor(x))", "all x.((BreastCancer(x) & -ColoredCancer(x)) -> MalignantTumor(x))", "all x y.((BreastCancer(x) & -ColorectalCancer(x)) -> MalignantTumor(x))", "all x.((BreakCancerous(x) & -ColorectalCancer(x)) -> MalignantTumor(x))", "exists x.(BreastCancer(x) & -ColorectalCancer(x) & BreastCancer(x) & MalignantTumor(x))", "all x y.((BreastCancer(x) & -ColorectalCancer(x)) -> MalignantTumor(x,y))", "all x.((MalignantTumor(x) & BreastCancer(x)) -> -ColorectalCancer(x))", "all x.((BreakCancerous(x) & -ColoredCancer(x)) -> MalignantTumor(x))", "all x.((BreastCancer(x) & -ColorectalCancer(x)) -> MalignantTumor(x))", "all x.((BreakCancerous(x) & -ColorectalCancer(x)) -> MalignantTumor(x))", "all x.((BreastCancer(x) & -ColoredCancer(x)) -> MalignantTumor(x))", "(all x.((BreastCancer(x) & -ColorectalCancer(x)) -> MalignantTumor(x))", "all x.((BreastCancer(x) & -ColorectalCancer(x)) -> MalignantTumor(x))"]}
{"id": "folio_train_2547", "nl": "I should not worry about things outside of my control.", "fol": "all x.(IsOutsideOfControl(x) -> -ShouldNotWorry(x))", "prediction": ["all x.((IsOutsideControl(x) & -IsOutsideControl(x)) -> -IsControl(x))", "all x.((Mom(x) & OutsideControl(x)) -> -Football(x))", "I should not worry about things outside of my control.", "all x.((Movement(x) & -OutsideControl(x)) -> -Fears(x))", "(-WorryAboutOutsideControl(x) -> -WorryAboutOutsideControl(x))", "-I shouldBeWarnedAboutOutsideControl(i))", "all x.((IsOutsideControl(x) & -IsOutsideControl(x)) -> -IsControl(x))", "all x y.((Mom(x) & OutsideControl(y)) -> -Footnote(x,y))", "-(IsOutsideControl(x) & -Footwork(x))", "all x.((IsOutsideControl(x) & -WorryAbout(x)) -> -WorryAbout(x,y))", "all x y.((IsOutsideControl(x) & IAvoid(y)) -> -Worry(x,y))", "all x.((Person(x) & OutsideControl(x)) -> -Footnote(x))", "all x.((Mom(x) & OutsideControl(x)) -> -Worry(x))", "all x y.((Mom(x) & OutsideControl(y)) -> -Worry(x,y))", "all x y.((Person(x) & OutsideControl(y)) -> -Fears(x,y))", "all x.((IsOutsideControl(x) & -Fears(x)) -> -Fears(x))"]}
{"id": "folio_train_2548", "nl": "Traffic is outside of my control.", "fol": "all x.(IsTraffic(x) -> IsOutsideOfControl(x))", "prediction": ["all x.(Traffic(x) -> OutsideOfControl(x))", "all x.(Traffic(x) -> OutsideOfControl(x))", "all x y.((Traffic(x) & Control(y)) -> OutsideOfControl(x,y))", "(OutsideControl(traffic) -> Traffic(Traffic))", "(OutsideOfControl(Traffic))", "all x.(Traffic(x) -> OutsideOfControl(x))", "(OutsideOfControl(Traffic(Traffic))", "all x y.((Traffic(x) & Control(y)) -> OutsideOf(x,y))", "all x.(Traffic(x) -> OutsideOfControl(x))", "all x.(Traffic(x) -> -Control(x))", "all x y.((Traffic(x) & Control(y)) -> OutsideOfControl(x,y))", "(OutsideControl(traffic))", "all x.(Traffic(x) -> OutsideOfControl(x))", "all x.(Traffic(x) -> -Control(x))", "all x.(Traffic(x) -> OutsideOfControl(x))", "All x.(Traffic(x) -> OutsideOfControl(x))"]}
{"id": "folio_train_2549", "nl": "I should not worry about traffic.", "fol": "all x.(IsTraffic(x) -> -ShouldNotWorry(x))", "prediction": ["all x.(Traffic(x) -> -Worry(x))", "all x.((Traffic(x) & -Traffic(x)) -> -Problem(x))", "-(I shouldBeWarnedAboutTraffic(i))", "I should not worry about traffic.", "-I shouldBeWarnedAboutTraffic(i))", "(-WorryAboutTraffic(x))", "-(Traffic(x) & IAvoidTraffic(x))", "all x.(Traffic(x) -> -MoreThan(x))", "all x.((Traffic(x) & -Traffic(x)) -> -Traffic(x))", "I should not worry about traffic.", "all x.((Traffic(x) & -Traffic(x)) -> -(Traffic(x) & -Traffic(x)))", "-I shouldBeWarnedAboutTraffic(i))", "all x.((Traffic(x) & -MoreThan(x)) -> -(MoreThan(x) & MoreThan(x))))", "(-WorryAboutTraffic(x))", "all x.(Traffic(x) -> -Breaking(x))", "all x.(Traffic(x) -> -IsAngry(x))"]}
{"id": "folio_train_2550", "nl": "Roversi is an Italian surname.", "fol": "all x.(UsesSurname(x,Roversi) -> IsItalianSurname(x))", "prediction": ["(ItalianSurname(Rossi) & ItalianSurname(Rossi))", "all x.(Rossi(x) -> ItalianSurname(x))", "Roversi (ItalianSurname)", "(ItalianSurname(Roversi) & ItalianSurname(Roversi))", "all x.(Roversi(x) -> ItalianSurname(x))", "Roversi is an Italian surname.", "-ItalianSurname(Roversi)", "-ItalianSurname(Rogersi)", "(ItalianSurname(Rogersi) & ItalianSurname(Rogersi))", "all x.(Rotorsi(x) -> ItalianSurname(x))", "Roversi (ItalianSurname)", "(ItalianSurname(roversi) & ItalianSurname(roversi))", "Roversi is an Italian surname.", "Roversi (ItalianSurname)", "(ItalianSurname(Rogersi) & ItalianSurname(Rogersi))", "(ItalianSurname(roversi) & ItalianSurname(roversi))"]}
{"id": "folio_train_2551", "nl": "Alba Roversi uses Roversi as a surname.", "fol": "UsesSurname(Alba,Roversi)", "prediction": ["all x.(AlbaRoversi(x) -> UsesRoversiAsSurname(x))", "all x y.((AlbaRoversi(x) & Roversi(y)) -> UsesAsSurname(x,y))", "all x.(AlbaRotorsi(x) -> UsesRotorsiAsSurname(x))", "(UsesRoversi(Alba) & UsesRoversi(Alba))", "(Uses(AlbaRoversi) & Roversi(Alba))", "all x.(AlbaRoversi(x) -> UsesRoversiAsSurname(x))", "(UsesRosersi(Alba) & UsesRosersi(Alba))", "Alba Roversi uses RoversiAsSurname(Alba,Rotorsi)", "all x y.((AlbaRoversi(x) & Roversi(y)) -> UsesAsSurname(x,y))", "AlbaRoversiUsesRoversiAsSurname(Alberta)", "all x.(AlbaRotorsi(x) -> UsesRotorsiAsSurname(x))", "(Uses(AlbaRoversi) & Roversi(Alba))", "all x.(Roser(x) -> UsesRoser(x))", "all x.(AlbaRoversi(x) -> UsesRoversiAsSurname(x))", "Alba Roversi uses RoversiAsSurname(Alba,Rogersi)", "exists x.(AlbaRoversi(x) & UsesRoversi(x))"]}
{"id": "folio_train_2552", "nl": "Paolo Roversi uses Roversi as a surname.", "fol": "UsesSurname(Paolo,Roversi)", "prediction": ["all x.(Rossi(x) -> UsesRossiAsSurname(x))", "all x.((PaoloRoversi(x) & Roversi(x)) -> Surname(x))", "Paolo Roversi uses RoversiAsSurname(Posado)", "all x y.((PaoloRoversi(x) & Roversi(y)) -> UsesAsSurname(x,y))", "(UsesRossi(Paolo) & Roversi(Paolo))", "(Uses(PaoloRoversi) & Roversi(Paolo))", "(UsesSurname(PaoloRoversi) & Roversi(PaoloRoversi))", "(UsesRossi(PaoloRossi) & Surname(PaoloRossi))", "all x y.((Rodrigurossi(x) & Roversi(y)) -> UsesAsSurname(x,y))", "all x.(Rossi(x) -> UsesRossiAsSurname(x))", "Paolo Roversi uses RoversiAsSurname(PaoloRoseni)", "all x.((Rossi(x) & UsesRossi(x)) -> Surname(x))", "Paolo Roversi uses RoversiAsSurname(p) & -UsesSurname(p) & -UsesSurname(p))", "(Uses(PaoloRoversi) & Roversi(PaoloRoversi))", "Paolo Roversi uses RoversiAsSurname(Rogersi)", "Paolo Roversi uses RoversiAsSurname."]}
{"id": "folio_train_2553", "nl": "Roberto Roversi uses Roversi as a surname.", "fol": "UsesSurname(Roberto,Roversi)", "prediction": ["all x.(Rogersi(x) -> UsesRogersiAsSurname(x))", "Roberto Roversi uses RoversiAsSurname(Roberto)", "(UsesRogersi(Roberto) & Surname(Roberto))", "all x.(RobertoRossi(x) -> UsesRossiAsSurname(x))", "all x y.((RobertoRossi(x) & Roversi(y)) -> UsesAsSurname(x,y))", "all x y.((RobertoRoversi(x) & Roversi(y)) -> UsesAsSurname(x,y))", "(Uses(RobertoRosensi) & Roversi(Roberto))", "(UsesRossi(Roberto) & Surname(Roberto))", "all x.(RobertoRossi(x) -> UsesRossiAsSurname(x))", "Roberto Roversi uses RoversiAsSurname(ro)", "(Uses(RobertoRogersi,Rogersi) & Surname(RobertoRogersi))", "all x.(Rogersi(x) -> UsesRogersiAsSurname(x))", "(UsesRogersi(Roberto) & Surname(Roberto))", "Roberto Roversi uses RoversiAsSurname(Roberto)", "Roberto Roversi uses RoversiAsSurname(Rogersi)", "Roberto Roversi uses RoversiAsSurname."]}
{"id": "folio_train_2554", "nl": "Paolo Roversi is a photographer.", "fol": "IsPhotographer(Paolo)", "prediction": ["Paolo Roversi is a photographer.", "all x.(Photographer(x) -> PaoloRoversi(x))", "(Photographer(PopoloRossi) & Photographer(PopoloRossi))", "(Photographer(PaoloRogersi)", "Paolo Roversi (Photographer)", "Paolo Roversi is a photographer.", "all x.(Photographer(x) -> PaoloRogersi(x))", "(Photographer(PaoloRotorsi)", "all x.(Photographer(x) -> PaoloRoversi(x))", "Paolo Roversi is photographer.", "Paolo Roversi (Photographer)", "(Photographer(PopoloRogersi)", "Paolo Roversi is a Photographer.", "(Photographer(PaoloRoversi)", "Paolo Roversi (Photographer)", "Paolo Roversi is photographer."]}
{"id": "folio_train_2555", "nl": "A photographer is a professional or an amateur.", "fol": "all x.((IsPhotographer(x) -> IsProfessional(x)) | IsAmateur(x))", "prediction": ["all x.(Photographer(x) -> (Professional(x) | Amateur(x)))", "all x.(Photographer(x) -> (Professional(x) | Amateur(x)))", "all x.(Photographer(x) -> (Professional(x) | Amateur(x)))", "all x.(Photographer(x) -> (Professional(x) | Amateur(x)))", "all x y.((Photographer(x) & Professional(y)) | Amateur(y))", "all x.(Photographer(x) -> (Professional(x) | Amateur(x)))", "all x y.((Photographer(x) & Professional(y)) | Amateur(y))", "all x.(Photographer(x) -> (Professional(x) | Amateur(x)))", "all x.(Photographer(x) -> ((Professional(x) | Amateur(x))))", "all x y.((Photographer(x) & Professional(y)) | Amateur(y))", "exists x.(Photographer(x) & (Professional(x) | Amateur(x)))", "exists x.(Photographer(x) & (Professor(x) | Amateur(x)))", "exists x.(Photographer(x) & Professional(x) | Amateur(x))", "all x.(Photographer(x) -> (Professional(x) | Amateur(x)))", "exists x.(Photographer(x) & (Professional(x) | Amateur(x)))", "exists x.(Photographer(x) & (Professional(x) | Amateur(x)))"]}
{"id": "folio_train_2556", "nl": "Alba Roversi uses an Italian surname.", "fol": "IsItalianSurname(Alba)", "prediction": ["all x.(AlbaRoversi(x) -> UsesItalianSurname(x))", "(UsesItalianSurname(AlbaRoversi))", "all x y.((AlbaRoversi(x) & ItalianSurname(y)) -> Uses(x,y))", "Alba Roversi uses ItalianSurname(Alberta)", "(Uses(AlbaRoversi) & ItalianSurname(Alba))", "AlbaRossiUsesItalianSurname(Alba,Rossi)", "all x.(AlbaRossi(x) -> UsesItalianSurname(x))", "all x.(AlbaRoversi(x) -> UsesItalianSurname(x))", "Alba Roversi usesItalianSurname(Alba,Rotorsi)", "(UsesSurname(AlbaRoversi,Italian))", "all x.(AlbaRotorsi(x) -> UsesItalianSurname(x))", "(UsesItalianSurname(AlbaRoversi))", "all x y.((AlbaRoversi(x) & ItalianSurname(y)) -> Uses(x,y))", "all x.(AlbaRoversi(x) -> UsesItalianSurname(x))", "All x.(AlbaRogersi(x) -> UsesItalianSurname(x))", "all x.(AlbaRoversi(x) -> UsesItalianSurname(x))"]}
{"id": "folio_train_2557", "nl": "There are no photographers using an Italian surname.", "fol": "-exists x.(IsPhotographer(x) & IsItalianSurname(x))", "prediction": ["-exists x.(Photographer(x) & UsesItalianSurname(x))", "exists x.(Photographer(x) & UsesItalianSurname(x))", "Es gibt keine Fotografen(x) & UsesItalianSurname(x))", "exists x.(Photographer(x) & -UsesItalianSurname(x))", "-exists x.(Photographer(x) & UsesItalianSurname(x))", "(exists x.(Photographer(x) & UsesItalianSurname(x)) & -exists y.(Photographer(y) & UsesItalianSurname(y))))", "(exists x.(Photographer(x) & UsesItalianSurname(x)))", "exists x.(Photographer(x) & UsesItalianSurname(x))", "there are no photographers using Italiansurname(x)", "-exists x.(Photographer(x) & UsesItalianSurname(x))", "exists x.(Photographer(x) & UsesItalianSurname(x))", "-exists x.(Photographer(x) & UsesItalianSurname(x))", "(-exists x.(Photographer(x) & ItalianSurname(x)))", "-exists x.(Photographer(x) & UsesItalianSurname(x))", "-exists x.(Photographer(x) & UsesItalianSurname(x))", "-exists x.(Photographer(x) & UsesItalianSurname(x))"]}
{"id": "folio_train_2558", "nl": "Paolo is an amateur photographer.", "fol": "(IsAmateur(Paolo) & IsPhotographer(Paolo))", "prediction": ["Paolo is amateurPhotographer.", "Paolo ist AmateurPhotographer(Paolo)", "(AmateurPhotographer(Paolo)", "Paolo is amateurPhotographer(Paolo)", "Paolo ist ein AmateurPhotographer(Paolo)", "(AmateurPhotographer(Paolo)", "Paolo ist AmateurPhotographer.", "Paolo is amateurphotographer.", "(AmateurPhotographer(Paolo)", "Paolo ist AmateurPhotographer(Paolo)", "-AmateurPhotographer(Paolo)", "Paolo is amateurPhotographer(Paolo)", "(AmateurPhotographer(Popolo)", "Paolo (AmateurPhotographer)", "(AmateurPhotographer(Paolo)", "Paolo is amateurphotographer."]}
{"id": "folio_train_2559", "nl": "Zaha Hadid is a British-Iraqi architect, artist and designer.", "fol": "(IsBritish(ZahaHadid) & IsIraqi(Zahahadid) & IsArchitect(ZahaHadid))", "prediction": ["(BritishIraqiArchitect(ZahaHadid) & BritishIraqiArtist(ZahaHadid) & Designer(ZahaHadid))", "all x.(ZahaHadid(x) -> (Architect(x) & BritishIraqi(x) & Artist(x) & Designer(x)))", "all x.((BritishIraqiArchitect(x) & BritishIraqiArtist(x) & Designer(x)) -> ZahaHadid(x))", "all x.((Architect(x) & BritishIraqi(x)) -> (Architect(x) & Artist(x) & Designer(x)))", "all x.(ZahaHadid(x) -> (BritishIraqiArchitect(x) & BritishIraqiArtist(x) & BritishIraqiDesigner(x)))", "(BritishIraqiArchitect(ZahaHadid) & BritishIraqiArtist(ZahaHadid) & Designer(ZahaHadid))", "Zaha Hadid (BritishIraqiArchitect(z) & BritishIraqiArtist(z) & Designer(z))", "ZahaHadid (BritishIraqiArchitect(Zaha) & Artist(Zaha) & Designer(Zaha))", "all x.((Architect(x) & BritishIraqi(x) & Artist(x) & Designer(x)) -> ZahaHadid(x))", "ZahaHadid (BritishIraqiArchitect(z) & BritishIraqiArtist(z) & Designer(z))", "ZahaHadid is BritishIraqiArchitect(ZahaHadid)", "(Architect(ZahaHadid) & BritishIraqi(ZahaHadid) & Artist(ZahaHadid) & Designer(ZahaHadid))", "ZahaHadid (BritishIraqiArchitect(z) & IraqiArtist(z) & Designer(z))", "(BritishIraqiArchitect(ZahaHadid) & BritishIraqiArtistAndDesigner(ZahaHadid)", "(BritishIraqiArchitect(ZahaHadid) & BritishIraqiArtistAndDesigner(ZahaHadid)", "(BritishIraqiArchitect(ZahaHadid) & BritishIraqiArtist(ZahaHadid) & Designer(ZahaHadid))"]}
{"id": "folio_train_2560", "nl": "Zaha Hadid was born on 31 October 1950 in Baghdad, Iraq.", "fol": "BornInLocation(ZahaHadid,Iraq,Y1950)", "prediction": ["(Birth(ZahaHadid,31Oct1950) & BornInBaghdad(ZahaHadid,31Oct1950))", "Zaha Hadid was born on 31October50(ZahaHadid) & BornInBaghdad(ZahaHadid)", "ZahaHadid was born on 31October50(ZahaHadid) & BornInBaghdad(ZahaHadid)", "(Birth(ZahaHadid) & BornOn31Oct1950(ZahaHadid) & BornInBaghdad(ZahaHadid))", "-Birth(ZahaHadid,31Oct1950) -> BornInBaghdad(ZahaHadid,Iraq))", "Hadid was born on 31October50(ZahaHadid) & BornInBaghdad(ZahaHadid)", "Zaha Hadid was born on 31October1950 in Baghdad,Iraq.", "ZahaHadid was born on 31October1950 in Baghdad,Iraq.", "(Birth(ZahaHadid,31) & BornInBaghdad(ZahaHadid,31))", "-BirthOfZahaHadid(ZahaHadid,31October1950)", "-Birth(ZahaHadid,31October1950) -BadhdadIraq(ZahaHadid)", "Zaha Hadid was born on 31Oct1950 in Baghdad,Iraq.", "ZahaHadid (bornOn31Oct1950,Baghdad,Iraq))", "Zaha Hadid was born on 31 October 1950 in Baghdad,Iraq.", "(Birth(ZahaHadid) & BornOn31October50(ZahaHadid,Iraq))", "(Birth(ZahaHadid,31October 1950) & BornInBaghdad(ZahaHadid,Iraq))"]}
{"id": "folio_train_2561", "nl": "Hadid was a visiting professor of Architectural Design at the Yale School of Architecture.", "fol": "IsVisitingProfessorAt(ZahaHadid,YaleSchoolofArchitecture)", "prediction": ["Hadid was visitingProfessorOfArchitecturalDesign(Hadid,YaleSchoolOfArchitecture)", "(VisitingProfessorOfArchitecturalDesign(Hadid) & YaleSchoolOfArchitecture(Hadid))", "(VisitingProfessor(Hadid,ArchitecturalDesign) & YaleSchoolOfArchitecture(Hadid,ArchitecturalDesign))", "(VisitingProfessor(Hadid,ArchitecturalDesign) & YaleSchoolOfArchitecture(Hadid,ArchitecturalDesign))", "all x.(Hadid(x) -> VisitorProfessorOfArchitecturalDesign(x))", "Hadid & VisitedProfessorOfArchitecturalDesign(Hadid,YaleSchoolOfArchitecture)", "Hadid was visitingProfessorOfArchitecturalDesign(Hadid,YaleSchoolOfArchitecture)", "(VisitingProfessor(Hadid) & ArchitecturalDesign(Hadid) & YaleSchoolOfArchitecture(Hadid))", "Hadid was visitingProfessor(Hadid,ArchitecturalDesign) & YaleSchoolOfArchitecture(Hadid)", "Hadid was visitingProfessorOfArchitecturalDesign(Hadid,YaleSchoolOfArchitecture)", "Hadid was visitingProfessorOfArchitecturalDesignAtYaleSchoolOfArchitecture(Hadid)", "VisitingProfessorOfArchitecturalDesign(Hadid,YaleSchoolOfArchitecture)", "Professor of ArchitecturalDesign at Yale SchoolOfArchitecture (Hadid)", "all x.(Hadid(x) -> VisitorProfessorOfArchitecturalDesign(x))", "Hadid was visitingProfessorOfArchitecturalDesign(Hadid,YaleSchoolOfArchitecture)", "VisitingProfessorOfArchitecturalDesign(Hadid,YaleSchoolOfArchitecture)"]}
{"id": "folio_train_2562", "nl": "Max is an aspiring architecture student, and he plans to apply to Yale School of Architecture. ", "fol": "(IsAspiringArchitectureStudent(Max) & PlansToApplyToSchool(Max,YaleSchoolofArchitecture))", "prediction": ["(AspiringArchitectureStudent(Max) & PlansToApplyToYaleSchoolOfArchitecture(Max))", "all x.(AspiringArchitectureStudent(x) & PlansToApplyToYaleSchoolOfArchitecture(x))", "all x.((Max(x) & AspiringArchitectureStudent(x)) -> PlansToApplyToYaleSchoolOfArchitecture(x))", "Architect(Max) & AspiringArchitectureStudent(Max) & PlansToApplyToYaleSchoolOfArchitecture(Max))", "all x.(AspiringArchitectureStudent(x) -> (PlansToApplyToYaleSchoolOfArchitecture(x)))", "(AssistantArchitectureStudent(Max) & PlansToApplyToYaleSchoolOfArchitecture(Max))", "(AspiredArchitectureStudent(Max) & PlansToApplyToYaleSchoolOfArchitecture(Max))", "(AspiringArchitectureStudent(Max) & PlansToApplyToYaleSchoolOfArchitecture(Max))", "all x.((Max(x) & AspiringArchitectureStudent(x)) -> PlansToApplyToYaleSchoolOfArchitecture(x))", "Architect(Max) & AspiringArchitectureStudent(Max) & PlansToApplyToYaleSchoolOfArchitecture(Max))", "-AspiringArchitectureStudent(Max) & PlansToApplyToYaleSchoolOfArchitecture(Max))", "(AspiringArchitectureStudent(Max) & PlannedApplicationToYaleSchoolOfArchitecture(Max))", "(AspiringArchitectureStudent(Max) & PlansToApplyToYaleSchoolOfArchitecture(Max))", "(AspiringArchitecturalStudent(Max) & PlansToApplyToYaleSchoolOfArchitecture(Max))", "(AspiringArchitecturalStudent(Max) & PlansToAppointToYaleSchoolOfArchitecture(Max))", "(AspiringArchitectureStudent(Max) & PlannedApplication(Max,YaleSchoolOfArchitecture))"]}
{"id": "folio_train_2563", "nl": "Hadid was born in Iraq, and became a UK citizen later in her life.", "fol": "exists x.(BornInLocation(ZahaHadid,Iraq,x) & IsBritish(ZahaHadid))", "prediction": ["(BirthInIraq(Hadid) & UKCitizen(Hadid))", "all x.(Hadid(x) -> (BirthInIraq(x) & UKCitizen(x)))", "(bornInIraq(Hadid) & UKCitizen(Hadid))", "Hadid was born in Iraq, and became UKCitizen(Hadid) later in her life.", "(bornInIraq) & UKCitizen(Hadid))", "Hadid was born in Iraq, and became a UK citizen later in her life.", "(BirthInIraq(Hadid) & UKCitizen(Hadid))", "all x.(Hadid(x) -> (BirthInIraq(x) & UKCitizen(x)))", "-(Hadid(Hadid) & BornInIraq(Hadid) & UKCitizen(Hadid))", "(Birth(Hadid,Iraq) & UKCitizen(Hadid,UK))", "Hadid was born in Iraq (Iraq) & became UKCitizen(Hadid,UK))", "(bornInIraq(Hadid) & UKCitizen(Hadid))", "all x.(Hadid(x) -> (BirthInIraq(x) & UKCitizen(x)))", "all x.(Hadid(x) -> (BirthInIraq(x) & UKCitizen(x)))", "all x.(Hadid(x) -> (BirthInIraq(x) & BecameUKCitizen(x)))", "(BirthInIraq(Hadid) & UKCitizen(Hadid))"]}
{"id": "folio_train_2564", "nl": "Hadid did some work in interior design.", "fol": "DidWorkIn(ZahaHadid,InteriorDesign)", "prediction": ["all x.(Hadid(x) -> DidInteriorDesign(x))", "Hadid did some work in interior design.", "(exists x.(Hadid(x) & InteriorDesign(x)) & Did(x,InteriorDesign))", "(Hadid did InteriorDesign(Hadid) & -(Hadid(Hadid) & InteriorDesign(Hadid)))", "Hadid did some work in interiordesign.", "(WorkInInteriorDesign(Hadid) -> Did(Hadid,InteriorDesign))", "all x.(Hadid(x) -> DidInteriorDesign(x))", "-Hadid(Hadid) s InteriorDesign(Hadid)", "(exists x.(Hadid(x) & InteriorDesign(x)) & WorksIn(x,y))", "-Hadiddiddid(Hadid)", "Hadid did some work in interior design.", "all x.(Hadid(x) -> DidInteriorDesign(x))", "Hadid & InteriorDesign(Hadid)", "Hadid did some work in interiordesign.", "Hadid did some work in InteriorDesign.", "Hadid did some work in interior design."]}
{"id": "folio_train_2565", "nl": "Hadid was born in 1982.", "fol": "exists x.BornInLocation(Hadid,x,1982)", "prediction": ["Hadid was born in 1982.", "(Birth(Hadid,82))", "(Birth(Hadid) & BornIn(Hadid,82))", "Hadid was born in 1982.", "-Birth(Hadid, 1982)", "Hadid was born in 1982.", "-Birth(Hadid,82)", "(Birth(Hadid) & BornIn(Hadid,82))", "(Birth(Hadid, 1982))", "(Birth(Hadid,82) & BornIn(Hadid,82))", "Hadid was born in 1982.", "Hadid & BornIn(Hadid,82)", "Hadid (bornIn82)", "Hadid was born in 1982.", "Hadid was born in 1982.", "Hadid was born in 1982."]}
{"id": "folio_train_2566", "nl": "Max admires Zaha Hadid.", "fol": "Admires(Max,ZahaHadid)", "prediction": ["Max admiresZahaHadid.", "(Awesome(Max,ZahaHadid))", "all x.(Awesome(x) -> ZahaHadid(x))", "-Awesome(Max,ZahaHadid)", "All x.(Awesome(x,ZahaHadid) -> Admires(x,Max))", "(Awesome(Max) -> AdmiresZahaHadid(Max))", "all x.(Amen(x) -> AdmiresZahaHadid(x))", "Max admiresZahaHadid.", "(Awesome(Max,ZahaHadid))", "(ApplaudsZahaHadid(Max))", "(AmenitiesZahaHadid(Max) & Admires(Max,ZahaHadid))", "-AwesomeToMatthew(Max)", "(Appreciates(Max,ZahaHadid))", "-Amenities(Max,ZahaHadid)", "Max admiresZahaHadid.", "Max admiresZahaHadid."]}
{"id": "folio_train_2567", "nl": "Something is either an invasive neuroimaging technique or a noninvasive neuroimaging technique. ", "fol": "all x.((InvasiveNeuroimaging(x) & -NoninvasiveNeuroimaging(x)) | (-InvasiveNeuroimaging(x) & NoninvasiveNeuroimaging(x)))", "prediction": ["all x.((InvasiveNeuroimagingTechnique(x) | NoninvasiveNeuroimagingTechnique(x)) -> (InvasiveNeuroimagingTechnique(x) | NoninvasiveNeuroimagingTechnique(x)))", "all x.((NeuroimagingTechnique(x) | NoninvasiveNeuroimagingTechnique(x)) -> (Invasive(x) | Noninvasive(x)))", "all x.(NeuroimagingTechnique(x) | NoninvasiveNeuroimagingTechnique(x))", "(InvasiveNeuroimagingTechnique(x) | NoninvasiveNeuroimagingTechnique(x))", "all x.(InvasiveNeuroimagingTechnique(x) | NoninvasiveNeuroimagingTechnique(x))", "all x y.((InvasiveNeuroimagingTechnique(x) & NoninvasiveNeuroimagingTechnique(y)) -> (InvasiveNeuroimagingTechnique(x) | NoninvasiveNeuroimagingTechnique(y)))", "all x y.((InvasiveNeuroimagingTechnique(x) | NoninvasiveNeuroimagingTechnique(y)) -> (InvasiveNeuroimagingTechnique(x) | NoninvasiveNeuroimagingTechnique(y)))", "all x.((InvasiveNeuroimagingTechnique(x) | NoninvasiveNeuroimagingTechnique(x)) -> (InvasiveNeuroimagingTechnique(x) | NoninvasiveNeuroimagingTechnique(x)))", "all x.((NeuroimagingTechnique(x) | NoninvasiveTechnique(x)) -> (Invasive(x) | Noninvasive(x)))", "exists x.(NeuroimagingTechnique(x) | NoninvasiveNeuroimagingTechnique(x))", "all x.(InvasiveNeuroimagingTechnique(x) | NoninvasiveNeuroimagingTechnique(x))", "exists x.(NeuroimagingTechnique(x) | NoninvasiveNeuroimagingTechnique(x))", "exists x.(NeuroimagingTechnique(x) & (Invasive(x) | Noninvasive(x)))", "exists x.(NeuroimagingTechnique(x) | NoninvasiveTechnique(x))", "exists x.(InvasiveNeuroimagingTechnique(x) | NoninvasiveNeuroimagingTechnique(x))", "exists x.(Neuroimaging(x) | NoninvasiveNeuroimaging(x))"]}
{"id": "folio_train_2568", "nl": "All noninvasive neuroimaging techniques provide a spatial resolution of brains.", "fol": "all x.(NoninvasiveNeuroimaging(x) -> ProvidesSpatialResolution(x))", "prediction": ["all x.(NoninvasiveNeuroimagingTechnique(x) -> ProvidesSpatialResolutionOfBrains(x))", "all x y.((NoninvasiveNeuroimagingTechnique(x) & Brain(y)) -> ProvidesSpatialResolution(x,y))", "all x.(NonInvasiveNeuroimagingTechnique(x) -> ProvidesSpatialResolutionOfBrains(x))", "all x.((NoninvasiveNeuroimagingTechnique(x) & ProvidesSpatialResolution(x)) -> Brains(x))", "all x.(NoninvasiveNeuroimagingTechnique(x) -> ProvidesSpatialResolution(x))", "all x y.((NonInvasiveNeuroimagingTechnique(x) & Brain(y)) -> ProvidesSpatialResolution(x,y))", "all x.((NoninvasiveNeuroimagingTechnique(x) & ProvidesSpatialResolution(x,Brains)) -> ProvidesSpatialResolution(x,Brains))", "all x.(NoninvasiveNeuroimaging(x) -> ProvidesSpatialResolutionOfBrains(x))", "all x y.((NoninvasiveNeuroimagingTechnique(x) & Brain(y)) -> ProvidesSpatialResolution(x,y))", "all x.(NoninvasiveNeuroimagingTechnique(x) -> ProvidesSpatialResolutionOfBrains(x))", "all x.((NonInvasiveNeuroimagingTechnique(x) & ProvidesSpatialResolution(x,Brains)) -> ProvidesSpatialResolution(x,Brains))", "(all x.(NoninvasiveNeuroimagingTechnique(x) -> ProvidesSpatialResolution(x)))", "all x.(NonInvasiveNeuroimagingTechnique(x) -> ProvidesSpatialResolution(x))", "all x y.((NonInvasiveNeuroimagingTechnique(x) & Brain(y)) -> ProvidesSpatialResolution(x,y))", "all x y.((NoninvasiveNeuroimagingTechnique(x) & Brain(y)) -> ProvidesSpatialResolution(x,y))", "all x.(NoninvasiveNeuroimagingTechnique(x) -> ProvidesSpatialResolution(x))"]}
{"id": "folio_train_2569", "nl": "If a technique provides a spatial resolution of brains, then it is a measurement of brain activity. ", "fol": "all x.(ProvidesSpatialResolution(x) -> BrainActivityMeasurement(x))", "prediction": ["all x.((Technique(x) & ProvidesSpatialResolutionOfBrains(x)) -> MeasurementOfBrainActivity(x))", "all x y.((Technique(x) & ProvidesSpatialResolution(x,y) & Brain(y)) -> MeasurementOfBrainActivity(x))", "all x.(ProvidesSpatialResolutionOfBrains(x) -> MeasurementOfBrainActivity(x))", "all x.((Technique(x) & ProvidesSpatialResolutionOfBrains(x)) -> MeasurementOfBrainActivity(x))", "all x.((Technique(x) & ProvidesSpatialResolution(x) & Brains(x)) -> MeasurementOfBrainActivity(x))", "all x y.((Technique(x) & ProvidesSpatialResolutionOfBrains(x) & BrainActivity(y)) -> Measurement(x,y))", "all x.(ProvidesSpatialResolutionOfBrains(x) -> MeasurementOfBrainActivity(x))", "all x y.((Technique(x) & ProvidesSpatialResolution(x,y) & Brains(y)) -> MeasurementOfBrainActivity(x))", "exists x.(Technique(x) & ProvidesSpatialResolution(x) & Brains(x) & MeasuresBrainActivity(x))", "all x.((Technique(x) & ProvidesSpatialResolution(x)) -> MeasurementOfBrainActivity(x))", "all x.((Technique(x) & ProvidesSpatialResolutionOfBrains(x)) -> MeasurementOfBrainActivity(x))", "all x.((Technique(x) & ProvidesSpaceRadiationOfBrains(x)) -> MeasurementOfBrainActivity(x))", "all x y.((Technique(x) & ProvidesSpatialResolutionOfBrains(x,y)) -> MeasurementOfBrainActivity(x))", "all x y.((Technique(x) & ProvidesSpaceRadiationOfBrains(x,y)) -> MeasurementOfBrainActivity(x))", "all x.(ProvidesSpatialResolution(x) -> MeasurementOfBrainActivity(x))", "all x.((Technique(x) & ProvidesSpatialResolution(x) & Brains(x)) -> MeasurementOfBrainActivity(x))"]}
{"id": "folio_train_2570", "nl": "All measurements of brain activity are used by neuroscience researchers.", "fol": "all x.(BrainActivityMeasurement(x) -> UsedByResearchers(x))", "prediction": ["all x.(MeasurementsOfBrainActivity(x) -> UsedByNeurologyResearchers(x))", "all x y.((Measurement(x) & BrainActivity(y)) -> UsedByNeurologyResearchers(x,y))", "all x.((MeasurementOfBrainActivity(x) & UsedByNeurologyResearchers(x)) -> Uses(x,y))", "all x y z.((Measurement(x) & BrainActivity(y) & NeuroscienceResearcher(z)) -> UsedBy(x,y,z))", "all x.(MeasurementOfBrainActivity(x) -> UsedByNeurologyResearchers(x))", "(all x.(BrainActivityMeasurement(x) -> UsedByNeurologyResearchers(x))", "(all x.(BrainActivity(x) -> UsedByNeurologyResearchers(x))", "all x y.((Measurement(x) & BrainActivity(y)) -> UsedByNeurologyResearchers(x,y))", "all x.((MeasurementsOfBrainActivity(x) & UsedByNeurologyResearchers(x)) -> Uses(x,y))", "all x y.((Measurement(x) & BrainActivity(y)) -> UsedByNeuroscienceResearchers(x,y))", "all x y.((MeasurementOfBrainActivity(x) & NeuroscienceResearcher(y)) -> UsedBy(x,y))", "all x.((MeasurementOfBrainActivity(x) & NeuroscienceResearcher(x)) -> UsedBy(x,y))", "all x.(MeasurementsOfBrainActivity(x) -> UsedByNeurologyResearchers(x))", "all x y.((Measurement(x) & BrainActivity(y)) -> UsedBy(x,y))", "all x.(MeasurementOfBrainActivity(x) -> UsedByNeuroscienceResearchers(x))", "all x.(MeasurementsOfBrainActivity(x) -> UsedByNeurologyResearchers(x))"]}
{"id": "folio_train_2571", "nl": "FMRI is either a measurement of brain activity or a noninvasive neuroimaging technique.", "fol": "((BrainActivityMeasurement(FMRI) & -NoninvasiveNeuroimaging(FMRI)) | (-BrainActivityMeasurement(FMRI) & NoninvasiveNeuroimaging(FMRI)))", "prediction": ["all x.(FMRI(x) -> (MeasuresBrainActivity(x) | NoninvasiveNeuroimagingTechnique(x)))", "(MeasurementOfBrainActivity(FMRI) | NoninvasiveNeuroimagingTechnique(FMRI))", "(MeasuresBrainActivity(FMRI) | NoninvasiveNeuroimagingTechnique(FMRI))", "all x y.((FMRI(x) & BrainActivity(y)) | NoninvasiveNeuroimagingTechnique(x)) -> Measures(x,y))", "all x.(FMRI(x) -> (MeasurementOfBrainActivity(x) | NoninvasiveNeuroimagingTechnique(x)))", "all x.(FMRI(x) -> (MeasuresBrainActivity(x) | NoninvasiveNeuroimagingTechnique(x)))", "all x y.(FMRI(x) -> (MeasuresBrainActivity(x,y) | NoninvasiveNeuroimagingTechnique(x,y)))", "(MeasurementOfBrainActivity(FMRI) | NoninvasiveNeuroimagingTechnique(FMRI))", "all x.(FMRI(x) -> (MeasuresBrainActivity(x) | NoninvasiveNeuroimagingTechnique(x)))", "all x.(FMRI(x) -> (MeasurementOfBrainActivity(x) | NoninvasiveNeuroimagingTechnique(x)))", "all x.(FMRI(x) -> (MeasuresBrainActivity(x) | NoninvasiveNeuroimagingTechnique(x)))", "all x.(FMRI(x) -> (MeasuresBrainActivity(x) | NonInvasiveNeuroimagingTechnique(x)))", "all x.(FMRI(x) -> (MeasuresBrainActivity(x) | NoninvasiveNeuroimagingTechnique(x)))", "all x y.(FMRI(x) -> (MeasuresBrainActivity(x) | NoninvasiveNeuroimagingTechnique(y)))", "all x.(FMRI(x) -> (MetaphorOfBrainActivity(x) | NonInvasiveNeuroimagingTechnique(x)))", "all x.(FMRI(x) -> (MeasurementOfBrainActivity(x) | NonInvasiveNeuroimagingTechnique(x)))"]}
{"id": "folio_train_2572", "nl": "FMRI provides a spatial resolution of brains.", "fol": "ProvidesSpatialResolution(FMRI)", "prediction": ["all x.(FMRI(x) -> ProvidesSpatialResolutionOfBrains(x))", "all x y.((FMRI(x) & Brain(y)) -> ProvidesSpatialResolution(x,y))", "all x.(FMRI(x) -> ProvidesSpatialResolution(x))", "(ProvidesSpatialResolution(FMRI,Brains))", "all x y z.((FMRI(x) & Brain(y) & Space(z)) -> ProvidesSpatialResolution(x,y,z))", "all x y.((FMRI(x) & Brain(y)) -> ProvidesSpatialResolution(x,y))", "all x.(FMRI(x) -> ProvidesSpatialResolutionOfBrains(x))", "(ProvidesSpatialResolution(FMRI,Brains))", "all x y.((FMRI(x) & Brain(y)) -> ProvidesSpatialResolution(x,y))", "all x.(FMRI(x) -> ProvidesSpatialResolution(x))", "all x y.((FMRI(x) & Brain(y)) -> ProvidesSpatialResolution(x,y))", "all x.(FMRI(x) -> ProvidesSpatialResolutionOfBrains(x))", "all x.(FMRI(x) -> ProvidesSpaceRadiationOfBrains(x))", "all x y.((FMRI(x) & Brain(y)) -> ProvidesSpatialResolution(x,y))", "all x.(FMRI(x) -> ProvidesSpatialResolution(x))", "all x.(FMRI(x) -> ProvidesSpatialResolutionOfBrains(x))"]}
{"id": "folio_train_2573", "nl": "FMRI is an invasive neuroimaging technique and is used by neuroscience researchers.", "fol": "(InvasiveNeuroimaging(FMRI) & UsedByResearchers(FMRI))", "prediction": ["all x.(FMRI(x) -> (InvasiveNeuroimagingTechnique(x) & UsedByNeurologyResearchers(x)))", "(InvasiveNeuroimagingTechnique(FMRI) & UsedByNeurologyResearchers(FMRI))", "all x y.((FMRI(x) & NeuroimagingTechnique(y)) -> (Invasive(x,y) & UsedBy(x,y)))", "all x y z.((FMRI(x) & NeuroimagingTechnique(y) & NeuroscienceResearcher(z)) -> (Invasive(x,y) & UsedBy(x,z)))", "all x.(FMRI(x) -> (InvasiveNeuroimagingTechnique(x) & UsedByNeurologyResearchers(x)))", "(InvasiveNeuroimagingTechnique(FMRI) & UsedByNeurologyResearchers(FMRI))", "all x y.((FMRI(x) & NeuroimagingTechnique(y)) -> (Invasive(x,y) & UsedBy(x,y)))", "all x.(FMRI(x) -> (InvasiveNeuroimagingTechnique(x) & UsedByNeurologyResearchers(x)))", "all x y.((FMRI(x) & NeuroimagingTechnique(y)) -> (Invasive(x,y) & UsedBy(x,neurologyResearchers)))", "(InvasiveNeuroimagingTechnique(FMRI) & UsedByNeurologyResearchers(FMRI))", "all x.(FMRI(x) -> (InvasiveNeuroimaging(x) & UsedByNeurologyResearchers(x)))", "all x y.((FMRI(x) & NeuroimagingTechnique(y) & NeuroscienceResearcher(z)) -> Invasive(x,y))", "all x.(FMRI(x) -> (InvasiveNeuroimagingTechnique(x) & UsedByNeurologyResearchers(x)))", "(InvasiveNeuroimagingTechnique(FMRI) & UsedByNeurologyResearchers(FMRI))", "all x.(FMRI(x) -> (InvasiveNeuroimagingTechnique(x) & UsedByNeurologist(x)))", "all x.(FMRI(x) -> (InvasiveNeuroimaging(x) & UsedByNeurologyResearchers(x)))"]}
{"id": "folio_train_2574", "nl": "FMRI is either an invasive neuroimaging technique or is used by neuroscience researchers.", "fol": "(InvasiveNeuroimaging(FMRI) | UsedByResearchers(FMRI))", "prediction": ["all x.(FMRI(x) -> (InvasiveNeuroimagingTechnique(x) | UsedByNeurologyResearchers(x)))", "(InvasiveNeuroimagingTechnique(FMRI) | UsedByNeurologyResearchers(FMRI))", "all x y.((FMRI(x) & NeuroimagingTechnique(y)) -> (Invasive(x,y) | UsedBy(x,y)))", "all x.(FMRI(x) -> (InvasiveNeuroimagingTechnique(x) | UsedByNeurologyResearchers(x)))", "all x y.(FMRI(x) -> (InvasiveNeuroimagingTechnique(x) | UsedByNeurologyResearchers(x)))", "(InvasiveNeuroimagingTechnique(FMRI) | UsedByNeurologyResearchers(FMRI))", "all x.(FMRI(x) -> (InvasiveNeuroimaging(x) | UsedByNeurologyResearchers(x)))", "all x.(FMRI(x) -> (InvasiveNeuroimagingTechnique(x) | UsedByNeurologyResearchers(x)))", "all x y.(FMRI(x) -> (InvasiveNeuroimagingTechnique(x) | UsedByNeurologyResearchers(x,y)))", "(InvasiveNeuroimagingTechnique(FMRI) | UsedByNeurologyResearchers(FMRI))", "all x.(FMRI(x) -> (InvasiveNeuroimagingTechnique(x) | UsedByNeurologyResearchers(x)))", "all x.(FMRI(x) -> (InvasiveNeuroimaging(x) | UsedByNeurologyResearchers(x)))", "(InvasiveNeuroimagingTechnique(FMRI) | UsedByNeurologyResearchers(FMRI))", "all x.(FMRI(x) -> (InvasiveNeuroimagingTechnique(x) | UsedByNeurologyResearchers(x)))", "all x.(FMRI(x) -> (InvasiveNeuronimagingTechnique(x) | UsedByNeuroscienceResearchers(x)))", "all x.(FMRI(x) -> (InvasiveNeuroimaging(x) | UsedByNeurologyResearchers(x)))"]}
{"id": "folio_train_2575", "nl": "If fMRI is not an invasive neuroimaging technique and used by neuroscience researchers, then fMRI is neither a noninvasive neuroimaging technique nor provides a spatial resolution of brains.", "fol": "((NoninvasiveNeuroimaging(FMRI) & UsedByResearchers(FMRI)) -> (-InvasiveNeuroimaging(FMRI) & -ProvidesSpatialResolution(FMRI)))", "prediction": ["all x.((FMRI(x) & -InvasiveNeuroimagingTechnique(x) & UsedByNeurologyResearchers(x)) -> (-NoninvasiveNeuroimagingTechnique(x) & -SpatialResolutionOfBrains(x)))", "(-InvasiveNeuroimagingTechnique(fMRI) & UsedByNeurologyResearchers(fMRI) & -NonInvasiveNeuroimagingTechnique(fMRI) & -SpatialResolutionOfBrains(fMRI))", "all x.((InvasiveNeuroimagingTechnique(x) & UsedByNeurologyResearchers(x)) -> (-NoninvasiveNeuroimagingTechnique(x) & -ProvidesSpatialResolutionOfBrains(x)))", "all x.((FMRI(x) & -InvasiveNeuroimagingTechnique(x) & UsedByNeurologyResearchers(x)) -> (-NoninvasiveNeuroimagingTechnique(x) & -ProvidesSpatialResolutionOfBrains(x)))", "(-InvasiveNeuroimagingTechnique(fMRI) & UsedByNeurologyResearchers(fMRI) -> (-NoninvasiveNeuroimagingTechnique(fMRI) & -SpatialResolutionOfBrains(fMRI)))", "all x y.((FMRI(x) & -InvasiveNeuroimagingTechnique(x) & UsedByNeurologyResearchers(x)) -> (-NoninvasiveNeuroimagingTechnique(y) & -SpatialResolutionOfBrains(y)))", "all x.((FMRI(x) & -InvasiveNeuroimaging(x) & UsedByNeurologyResearchers(x)) -> (-NoninvasiveNeuroimaging(x) & -ProvidesSpatialResolutionOfBrains(x)))", "all x.((FMRI(x) & -InvasiveNeuroimagingTechnique(x) & UsedByNeurologyResearchers(x)) -> -NonInvasiveNeuroimagingTechnique(x) & -SpatialResolutionOfBrains(x))", "all x y.((FMRI(x) & -InvasiveNeuroimagingTechnique(x) & UsedByNeurologyResearchers(x)) -> (-NoninvasiveNeuroimagingTechnique(y) & -ProvidesSpatialResolutionOfBrains(y)))", "all x.((InvasiveNeuroimagingTechnique(x) & UsedByNeurologyResearchers(x)) -> (-NonInvasiveNeuroimagingTechnique(x) & -SpatialResolutionOfBrains(x)))", "all x y.((FMRI(x) & -InvasiveNeuroimagingTechnique(x) & UsedByNeurologyResearchers(x)) -> (-NonInvasiveNeuroimagingTechnique(y) & -SpatialResolutionOfBrains(y)))", "(-InvasiveNeuroimagingTechnique(fMRI) & UsedByNeurologyResearchers(fMRI) & -NonInvasiveNeuroimagingTechnique(fMRI) & -SpatialResolutionOfBrains(fMRI))", "all x.((FMRI(x) & -InvasiveNeuroimaging(x) & UsedByNeurologyResearchers(x)) -> (-NoninvasiveNeuroimaging(x) & -SpatialResolutionOfBrains(x)))", "all x.((FMRI(x) & -InvasiveNeuroimagingTechnique(x) & UsedByNeurologyResearchers(x)) -> (NoninvasiveNeuroimagingTechnique(x) & -SpatialResolutionOfBrains(x)))", "all x.((FMRI(x) & -InvasiveNeuroscopicTechnique(x) & UsedByNurses(x)) -> (-NoninvasiveNeuroscopicTechnique(x) & -ProvidesSpatialResolutionOfBrains(x)))", "all x.((FMRI(x) & -InvasiveNeuroimagingTechnique(x) & UsedByNeurologyResearchers(x)) -> -(NoninvasiveNeuroimagingTechnique(x) & -SpatialResolutionOfBrains(x)))"]}
{"id": "folio_train_2576", "nl": "Either present their work at the conference or provide a tutorial session at the conference. ", "fol": "all x.(PresentAtConference(x) | ProvideTutorialSession(x))", "prediction": ["all x y.((Conference(x) & PresentWork(x,y)) | ProvideTutorial(x,y))", "all x y.((Conference(x) & Conference(y)) -> (PresentWork(x,y) | ProvideTutorial(x,y)))", "all x.((Work(x) & Conference(x)) -> (Presents(x,x) | ProvidesTutorial(x,x)))", "((PresentWork(x) | ProvideTutorial(x)))", "all x y z.((Conference(x) & Work(y) & Tutorial(z)) -> (Presents(x,y) | Provides(x,z)))", "exists x.(Conference(x) & (PresentWork(x) | ProvideTutorial(x)))", "(PursueWorkAtConference(x) | ProvideTutorialAtConference(x)))", "all x y z.((Conference(x) & (PresentWork(x,y) | ProvideTutorial(x,z))) -> (ProvidesWork(x,y) | ProvidesTutorial(x,z))))", "all x y.((Conference(x) & (PresentWork(x,y) | ProvideTutorial(x,y))) -> ProvidesWork(x,y))", "all x y.((Conference(x) & PresentWork(x,y)) | ProvideTutorial(x,y))", "exists x.(Conference(x) & ((PresentWork(x) & Conference(x)) | ProvideTutorial(x))))", "(exists x.(Conference(x) & PresentWork(x)) | ProvideTutorial(x)))", "((PresentWork(x) | ProvideTutorialSession(x)))", "exists x.(Conference(x) & (PursueWork(x) | ProvideTutorial(x)))", "exists x.(Conference(x) & (PresentWorkAt(x,Conference) | ProvideTutorialSession(x,Conference)))", "all x y.((Conference(x) & Conference(y)) -> (PresentWork(x,y) | ProvideTutorial(x,y)))"]}
{"id": "folio_train_2577", "nl": "All who present their work at the conference will attend in person. ", "fol": "all x.(PresentAtConference(x) -> AttendInPerson(x))", "prediction": ["all x.((PresentsWork(x) & AtConference(x)) -> AttendsInPerson(x))", "all x y.((PresentsWork(x) & Conference(y) & PresentsWork(x,y)) -> AttendsInPerson(x))", "all x.((PresentWork(x) & AtConference(x)) -> AttendInPerson(x))", "all x.((PresentsWork(x) & AtConference(x)) -> AttendsInPerson(x))", "all x.((PresentsWorkAtConference(x) & AttendsInPerson(x)) -> PresentsWorkAtConference(x))", "all x.(PresentsWorkAtConference(x) -> AttendsInPerson(x))", "all x.((Person(x) & PresentsWorkAtConference(x)) -> AttendsInPerson(x))", "(all x.((PresentsWork(x) & AtConference(x)) -> AttendsInPerson(x)))", "all x.((PresentsWork(x) & AtConference(x)) -> AttendsInPerson(x))", "all x y.((Conference(x) & PresentsWork(x,y)) -> AttendsInPerson(x,y))", "all x y.((PresentsWork(x) & Conference(y)) -> AttendsInPerson(x,y))", "all x y.((PresentsWork(x) & Conference(y) & At(x,y)) -> AttendsInPerson(x))", "all x.((PresentsWorkAtConference(x) & PersonAtConference(x)) -> AttendsInPerson(x))", "all x.(PresentsWork(x) -> AttendsInPerson(x))", "all x y.((Person(x) & PresentsWorkAtConference(x,y)) -> AttendsInPerson(x,y))", "all x.(PresentWorkAtConference(x) -> AttendInPerson(x))"]}
{"id": "folio_train_2578", "nl": "All those providing a tutorial session at the conference are invited to join the club. ", "fol": "all x.(ProvideTutorialSession(x) -> InvitedToClub(x))", "prediction": ["all x.((ProvidesTutorial(x) & Conference(x)) -> InvitedToJoinClub(x))", "all x.((ProvidesTutorial(x) & AtConference(x)) -> InvitedToJoinClub(x))", "all x.((ProvidesTutorialSession(x) & Conference(x)) -> InvitedToJoinClub(x))", "all x y.((ProvidesTutorial(x) & Conference(y) & JoinsClub(x,y)) -> Invited(x))", "all x.(ProvidesTutorial(x) -> JoinClub(x))", "all x.(ProvidesTutorialSession(x) -> InvitedToJoinClub(x))", "all x y.((ProvidesTutorial(x) & Conference(y) & JoinsClub(x,y)) -> InvitedToJoin(x,y))", "all x y.((Tutor(x) & Conference(y) & ProvidesTutorial(x,y)) -> InvitedToJoinClub(x))", "all x y.((ProvidesTutorial(x) & Conference(y) & At(x,y)) -> InvitedToJoinClub(x))", "all x.((ProvidingTutorial(x) & Conference(x)) -> InvitedToJoinClub(x))", "all x.((ProvidingTutorial(x) & Conference(x)) -> InvitedToJoinClub(x))", "all x y.((ProvidesTutorialSession(x) & Conference(y) & JoinsClub(x,y)) -> InvitedToJoin(x,y))", "all x.((ProvidesTutorialSession(x) & Conference(x)) -> InvitedToJoinClub(x))", "all x.(ProvidesTutorial(x) -> InvitedToJoinClub(x))", "all x y.((ProvidingTutorial(x) & Conference(y)) -> InvitedToJoinClub(x,y))", "all x.(ProvidesTutorialSessionAtConference(x) -> InvitedToJoinClub(x))"]}
{"id": "folio_train_2579", "nl": "All who attend the conference in person are provided with souvenirs. ", "fol": "all x.(AttendInPerson(x) -> ReceiveSouvenirs(x))", "prediction": ["all x.((AttendsConferenceInPerson(x) & ProvidesSouvenirs(x)) -> Provided(x))", "all x.(AttendsConferenceInPerson(x) -> ProvidedWithSouvenirs(x))", "all x y.((AttendsConferenceInPerson(x) & AttendsInPerson(x,y)) -> ProvidedWithSouvenirs(x))", "all x.((AttendsConferenceInPerson(x) & ProvidedWithSouvenirs(x)) -> ProvidedWith(x))", "all x.(AttendsInPerson(x) -> ProvidedWithSouvenirs(x))", "all x.((AttendsInPerson(x) & AttendsConference(x)) -> ProvidedWithSouvenirs(x))", "all x.(AttendsConferenceInPerson(x) -> ProvidedWithSouvenirs(x))", "all x y.((AttendsConferenceInPerson(x) & AttendsInPerson(x,y)) -> ProvidedWithSouvenirs(x))", "all x.((AttendsConferenceInPerson(x) & ProvidesSouvenirs(x)) -> Provided(x))", "all x y.((AttendsConferenceInPerson(x) & AttendsInPerson(y)) -> ProvidedWithSouvenirs(x))", "(all x.(AttendInPerson(x) -> ProvidedWithSouvenirs(x)))", "all x y.((AttendsConferenceInPerson(x) & AttendsConferenceInPerson(x)) -> ProvidedWithSouvenirs(y))", "all x.((AttendsConferenceInPerson(x) & ProvidedWithSouvenirs(x)) -> AttendsInPerson(x))", "all x.(AttendsInPerson(x) -> ProvidedWithSouvenirs(x))", "all x.(AttendsConferenceInPerson(x) -> ProvidedWithSouvenirs(x))", "all x y.((AttendsConferenceInPerson(x) & AttendsInPerson(y)) -> ProvidedWithSouvenirs(x,y))"]}
{"id": "folio_train_2580", "nl": "All invited to join the club are provided with delicious meals. ", "fol": "all x.(InvitedToClub(x) -> ProvidedDeliciousMeals(x))", "prediction": ["all x.((InvitedToJoinClub(x) & ProvidedWithDeliciousMeals(x)) -> JoinClub(x))", "all x y.((InvitedToJoinClub(x) & InClub(y)) -> ProvidedWithDeliciousMeals(x,y))", "all x.((InvitedToJoinClub(x) & ProvidedWithDeliciousMeals(x)) -> JoinsClub(x))", "all x.(InvitedToJoinClub(x) -> ProvidedWithDeliciousMeals(x))", "(all x.(JoinClub(x) -> DeliciousMeals(x)))", "all x.((InvitedToJoinClub(x) & ProvidesDeliciousMeals(x)) -> JoinsClub(x))", "all x y.((InvitedToJoinClub(x) & ServedWith(x,y)) -> DeliciousMeals(y))", "all x y.((Invited(x) & Club(y)) -> ProvidedWithDeliciousMeals(x,y))", "ALLOWEDTOJOINClub(x) -> DeliciousMeals(x))", "all x.(InvitedToJoinClub(x) -> ProvidedWithDeliciousMeals(x))", "all x y.((InvitedToJoinClub(x) & Club(y)) -> ProvidedWithDeliciousMeals(x,y))", "all x.((InvitedToJoinClub(x) & ProvidedWithDeliciousMeals(x)) -> JoinsClub(x))", "all x y.((Invited(x) & Club(y)) -> ProvidedWithDeliciousMeals(x,y))", "all x.((Invited(x) & JoinClub(x)) -> DeliciousMeals(x))", "all x.((InvitedToJoinClub(x) & ProvidesDeliciousMeals(x)) -> JoinsClub(x))", "all x.(InvitedToJoinClub(x) -> ProvidedWithDeliciousMeals(x))"]}
{"id": "folio_train_2581", "nl": "All provided with delicious meals are happy to communicate with each other during the dinner. ", "fol": "all x.(ProvidedDeliciousMeals(x) -> HappyToCommunicate(x))", "prediction": ["all x.((ProvenedWithDeliciousMeals(x) & HappyToCommunicate(x)) -> Dinner(x))", "all x.((Person(x) & ProvidedWithDeliciousMeals(x)) -> HappyToCommunicate(x))", "all x y.((Person(x) & DeliciousMeal(y) & ProvidedWith(x,y)) -> HappyToCommunicate(x,y))", "all x y.((DeliciousMeal(x) & ProvidedWith(x,y)) -> HappyToCommunicate(x,y))", "all x.((ProvenedWithDeliciousMeals(x) & HappyToCommunicate(x)) -> DeliciousMeals(x))", "all x.((PurchasedWithDeliciousMeals(x) & HappyToCommunicate(x)) -> Dinner(x))", "all x.((DeliciousMeal(x) & ProvidedWith(x,y)) -> HappyToCommunicate(y,x))", "(all x.(DeliciousMeal(x) -> HappyToCommunicateDuringDinner(x)))", "all x y.((Person(x) & DeliciousMeal(y)) -> HappyToCommunicate(x,y))", "all x y.((ProvenedWithDeliciousMeals(x) & ProvidedWith(y,x)) -> HappyToCommunicate(x,y))", "all x y z.((Person(x) & DeliciousMeal(y) & Dinner(z) & ProvidedWith(x,y,z)) -> HappyToCommunicate(x,y,z))", "all x.(DeliciousMeals(x) -> HappyToCommunicate(x))", "all x.((ProvidingDeliciousMeals(x) & HappyToCommunicate(x)) -> HappyToCommunicate(x))", "all x y.((DeliciousMeal(x) & ProvidedWith(x,y)) -> HappyToCommunicate(y,x))", "(all x.(DeliciousMeal(x) -> HappyToCommunicate(x)))", "all x.((ProvenedWithDeliciousMeals(x) & HappyToCommunicate(x)) -> Dinner(x))"]}
{"id": "folio_train_2582", "nl": "All provided with delicious meals are invited to take a photo with the audience. ", "fol": "all x.(ProvidedDeliciousMeals(x) -> InvitedToTakePhoto(x))", "prediction": ["all x.((ProvenedWithDeliciousMeals(x) & InvitedToTakePhotoWithAudience(x)) -> TakesPhotoWithAudience(x))", "all x.((Person(x) & ProvidedWithDeliciousMeals(x)) -> InvitedToTakePhotoWithAudience(x))", "all x y.((ProvenedWithDeliciousMeals(x) & ProvidedWith(x,y)) -> InvitedToTakePhoto(x,y))", "all x y.((Person(x) & ProvidedWithDeliciousMeals(x)) -> InvitedToTakePhoto(x,y))", "all x.((ProvenedWithDeliciousMeals(x) & InvitedToTakePhotoWithAudience(x)) -> TakesPhotoWithAudience(x))", "all x.((ProvenedWithDeliciousMeals(x)) -> InvitedToTakePhotoWithAudience(x))", "all x.(DeliciousMeals(x) -> InvitedToTakePhotoWithAudience(x))", "all x y z.((ProvenedWithDeliciousMeals(x) & Audience(y) & ProvidedWith(x,y)) -> InvitedToTakePhoto(x,y))", "all x y.((ProvenedWithDeliciousMeals(x) & Audience(y)) -> InvitedToTakePhoto(x,y))", "all x y.((Person(x) & ProvidedWithDeliciousMeals(x) & Audience(y)) -> InvitedToTakePhoto(x,y))", "all x.((ProvidingDeliciousMeals(x) & InvitedToTakePhotoWithAudience(x)) -> TakesPhotoWithAudience(x))", "all x.((ProvenedWithDeliciousMeals(x) & ProvidedWith(x)) -> InvitedToTakePhotoWithAudience(x))", "all x.((Person(x) & ProvidedWithDeliciousMeals(x)) -> InvitedToTakePhotoWithAudience(x))", "all x y.((ProvenedWithDeliciousMeals(x) & ProvidedWith(x,y)) -> InvitedToTakePhotoWith(x,y))", "all x.(DeliciousMeals(x) -> InvitedToTakePhotoWithAudience(x))", "all x.(DeliciousMeals(x) -> InvitedToTakePhoto(x))"]}
{"id": "folio_train_2583", "nl": "James does not attend the conference in person and is not provided with souvenirs.", "fol": "(-AttendInPerson(James) & -ReceiveSouvenirs(James))", "prediction": ["all x.((James(x) & -AttendsConferenceInPerson(x) & -ProvidesSouvenirs(x)) -> -AttendsConferenceInPerson(x))", "(-AttendsInPerson(James) & -ProvidesSouvenirs(James))", "all x y.((James(x) & Conference(y)) -> (-AttendsInPerson(x,y) & -ProvidesSouvenirs(x,y)))", "all x.(James(x) -> (-AttendsConferenceInPerson(x) & -ProvidesSouvenirs(x)))", "(-AttendsConferenceInPerson(James) & -ProvidesSouvenirs(James))", "-(AttendsInPerson(James) & -ProvidesSouvenirs(James))", "all x.((James(x) & -AttendsInPerson(x) & -ProvidesSouvenirs(x)) -> -AttendsInPerson(x))", "-(AttendsConferenceInPerson(James) & -ProvidesSouvenirs(James))", "((James(James) & -AttendsConferenceInPerson(James)) & -ProvidesSouvenirs(James))", "(-AttendsInPerson(James) & -ProvidesSouvenirs(James))", "all x.((James(x) & -AttendsConferenceInPerson(x)) -> -ProvidesSouvenirs(x))", "(-AttendsConferenceInPerson(James) & -ProvidesSouvenirs(James))", "James does not attendsConferenceInPerson(James) & -ProvidesSouvenirs(James))", "-(AttendsInPerson(James) & -ProvidesSouvenirs(James))", "James does not attendsConferenceInPerson(James) & -providedSouvenirs(James))", "James does not attendsConferenceInPerson(James) & -ProvidesSouvenirs(James))"]}
{"id": "folio_train_2584", "nl": "James is provided with souvenirs.", "fol": "ReceiveSouvenirs(James)", "prediction": ["all x.(James(x) -> ProvidedWithSouvenirs(x))", "all x.((James(x) & Souvenirs(x)) -> Provided(x))", "(ProvidesSouvenirs(James)", "All x y.((James(x) & Souvenir(y)) -> ProvidedWith(x,y))", "all x.((James(x) & Souvenir(x)) -> Provided(x))", "all x.(James(x) -> ProvidedWithSouvenirs(x))", "James is provided with Souvenirs.", "(ProvidesSouvenirs(James)", "All x y.((James(x) & Souvenir(y)) -> Provided(x,y))", "all x.((James(x) & Souvenirs(x)) -> Provided(x))", "All x.(James(x) -> ProvidedWithSouvenirs(x))", "James is provided with Souvenirs.", "(ProvidesSouvenirs(James)", "All x y.((James(x) & Souvenir(y)) -> ProvidedWith(x,y))", "all x.((James(x) & Souvenir(x)) -> Provided(x))", "all x.(James(x) -> ProvidedWithSouvenirs(x))"]}
{"id": "folio_train_2585", "nl": "James is not provided with souvenirs.", "fol": "-ReceiveSouvenirs(James)", "prediction": ["all x.(James(x) -> -ProvidesSouvenirs(x))", "James is not provided with Souvenirs.", "(ProvidesSouvenirs(James) & James -ProvidesSouvenirs(James))", "((James(James) & -ProvidesSouvenirs(James)) | (-ProvidesSouvenirs(James) & ProvidesSouvenirs(James))))", "-(ProvidesSouvenirs(James) & James -ProvidesSouvenirs(James))", "all x.((James(x) & -ProvidesSouvenirs(x)) -> -ProvidesSouvenirs(x))", "-ProvidesSouvenirs(James)", "all x.(James(x) -> -ProvidesSouvenirs(x))", "(-ProvidesSouvenirs(James))", "James is not provided with souvenirs.", "-providedWithSouvenirs(James)", "James is not provided with Souvenirs.", "all x.(James(x) -> -ProvidesSouvenirs(x))", "(-ProvidesSouvenirs(James)", "-providedWithSouvenirs(Jimmy)", "James is not provided with Souvenirs."]}
{"id": "folio_train_2586", "nl": "James is invited to take a photo with the audience and is happy to communicate with each other at the dinner.", "fol": "(InvitedToTakePhoto(James) & HappyToCommunicate(James))", "prediction": ["all x y.((James(x) & Audience(y)) -> (InvitedToTakePhoto(x,y) & HappyToCommunicate(x,y)))", "all x y z.((James(x) & Audience(y) & Dinner(z)) -> (InvitedToTakePhoto(x,y) & HappyToCommunicate(x,z)))", "(InvitedToTakePhotoWithAudience(James) & HappyToCommunicate(James,Dinner))", "all x.((James(x) & TakesPhoto(x) & HappyToCommunicate(x)) -> Dinner(x))", "all x y.((James(x) & Audience(y)) -> (InvitedToTakePhoto(x,y) & HappyToCommunicate(x,y)))", "all x.(James(x) -> (InvitedToTakePhotoWithAudience(x) & HappyToCommunicate(x)))", "(InvitedToTakePhotoWithAudience(James) & HappyToCommunicateAtDinner(James))", "(all x y.((James) & Audience(y)) -> TakesPhotoWith(x,y)) & HappyToCommunicate(x,y))", "all x y z.((James(x) & Audience(y) & Dinner(z)) -> (InvitedToTakePhoto(x,y) & HappyToCommunicate(x,z)))", "(all x.(James(x) -> TakesPhotoWithAudience(x)) & happy to communicate(x))", "all x.((James(x) & InvitedToTakePhoto(x,y)) -> HappyToCommunicate(x,z))", "all x y z.((James(x) & Photo(y) & Audience(z) & InvitedToTake(x,y,z)) -> HappyToCommunicate(x,y,z))", "all x y.((James(x) & Audience(y)) -> (InvitedToTakePhotoWith(x,y) & HappyToCommunicate(x,y)))", "(InvitedToTakePhotoWithAudience(James) & HappyToCommunicateAtDinner(James))", "all x.((James(x) & InvitedToTakePhotoWithAudience(x)) -> HappyToCommunicateAtDinner(x))", "all x y.((James(x) & Audience(y)) -> (InvitedToTakePhoto(x,y) & HappyToCommunicate(x,y)))"]}
{"id": "folio_train_2587", "nl": "James is invited to take a photo with the audience or is happy to communicate with each other during the dinner.", "fol": "(InvitedToTakePhoto(James) | HappyToCommunicate(James))", "prediction": ["all x y.((James(x) & Audience(y)) -> (InvitedToTakePhoto(x,y) | HappyToCommunicate(x,y)))", "all x.((James(x) & (TakesPhotoWithAudience(x) | HappyToCommunicate(x))) -> Invited(x))", "(InvitedToTakePhotoWithAudience(James) | HappyToCommunicateWithAudience(James)))", "all x y z.((James(x) & Photo(y) & Audience(z)) -> (InvitedToTake(x,y,z) | HappyToCommunicate(x,y)))", "all x y.((James(x) & Audience(y)) -> (InvitedToTakePhotoWith(x,y) | HappyToCommunicate(x,y)))", "all x.(James(x) -> (InvitedToTakePhotoWithAudience(x) | HappyToCommunicate(x)))", "(InvitedToTakePhotoWithAudience(James) | HappyToCommunicateWithAudience(James)))", "all x.((James(x) & (TakesPhotoWithAudience(x) | HappyToCommunicate(x))) -> Invited(x))", "(all x.(James(x) -> (InvitedToTakePhotoWithAudience(x) | HappyToCommunicateWithAudience(x))))", "all x.((James(x) & (TakesPhotoWithAudience(x) | HappyToCommunicate(x))) -> InvitedToTake(x,Audience,Audience))", "exists x.(James(x) & ((InvitedToTakePhoto(x,audience) & (HappyToCommunicate(x,audience) | HappyToCommunicate(x,audience)))))", "all x y.((James(x) & Audience(y)) -> (InvitedToTakePhotoWith(x,y) | HappyToCommunicate(x,y)))", "all x.(James(x) -> (InvitedToTakePhoto(x) | HappyToCommunicate(x)))", "(InvitedToTakePhotoWithAudience(James) | HappyToCommunicateDuringDinner(James))", "(all x.(James(x) -> (InvitedToTakePhotoWithAudience(x) | HappyToCommunicateWithAudience(x))))", "all x y.((James(x) & Audience(y)) -> (InvitedToTakePhotoWith(x,y) | HappyToCommunicate(x,y)))"]}
{"id": "folio_train_2588", "nl": "James is either invited to take a photo with the audience or happy to communicate with each other during the dinner.", "fol": "(InvitedToTakePhoto(James) | HappyToCommunicate(James))", "prediction": ["all x y.((James(x) & Audience(y)) -> (InvitedToTakePhoto(x,y) | HappyToCommunicate(x,y)))", "all x.((James(x) & Photo(x)) -> (InvitedToTake(x,Audience) | HappyToCommunicate(x,Audience)))", "(InvitedToTakePhotoWithAudience(James) | HappyToCommunicateDuringDinner(James))", "all x.(James(x) -> (InvitedToTakePhotoWithAudience(x) | HappyToCommunicate(x)))", "all x y z.((James(x) & Photo(y) & Audience(z)) -> (InvitedToTake(x,y) | HappyToCommunicate(x,z)))", "all x.((James(x) & TakesPhotoWithAudience(x)) | HappyToCommunicate(x))", "((InvitedToTakePhotoWithAudience(James) | HappyToCommunicateDuringDinner(James)))", "all x y.((James(x) & Audience(y)) -> (InvitedToTakePhoto(x,y) | HappyToCommunicate(x,y)))", "(InvitedToTakePhotoWithAudience(James) | HappyToCommunicateWithAudience(James))", "exists x.(James(x) & ((InvitedToTakePhoto(x,Audience) & HappyToCommunicate(x,Audience)) | (InvitedToTakePhoto(x,Audience) & HappyToCommunicate(x,Audience)))))", "all x y.((James(x) & Audience(y)) -> (InvitedToTakePhotoWith(x,y) | HappyToCommunicate(x,y)))", "(all x.(James(x) -> (InvitedToTakePhoto(x) | HappyToCommunicate(x))))", "all x.((James(x) & Photo(x)) -> (InvitedToTake(x,audience) | HappyToCommunicate(x,audience)))", "(InvitedToTakePhotoWithAudience(James) | HappyToCommunicate(James)))", "all x.(James(x) -> (InvitedToTakePhoto(x) | HappyToCommunicate(x)))", "all x y.((James(x) & Audience(y)) -> (InvitedToTakePhoto(x,y) | HappyToCommunicate(x,y)))"]}
{"id": "folio_train_2589", "nl": "The USS Salem is a heavy cruiser built for the United States navy.", "fol": "(IsHeavyCruiser(Usssalem) & ConstructedFor(Usssalem,Unitedstatesnavy))", "prediction": ["all x.((USS Salem(x) & HeavyCruiser(x) & BuiltForNatal(x)) -> BuiltForNatal(x))", "all x.(USSSalem(x) -> (HeavyCruiser(x) & BuiltForNatal(x)))", "all x y.((USS Salem(x) & HeavyCruiser(y)) -> BuiltFor(x,y))", "the USSSalem is a heavy cruiser built for the United States Navy.", "all x.((USS Salem(x) & HeavyCruiser(x)) -> BuiltForNatal(x))", "(HeavyCruiser(USS Salem) & BuiltForNature(USS))", "(HeavyCruiser(USSSalem) & BuiltForNature(USSalem))", "all x.(Salem(x) -> (HeavyCruiser(x) & BuiltForNasa(x)))", "the USSSalem (USSalem) -> BuiltForNasa(x))", "all x y.((USS Salem(x) & HeavyCruiser(x) & BuiltFor(x,y)) -> BuiltFor(x,y))", "all x.((USS Salem(x) & HeavyCruiser(x) & BuiltForNasa(x)) -> BuiltForNasa(x))", "the USS Salem (USSalem) & HeavyCruiser(USNaw) & BuiltFor(USNaw))", "(HeavyCruiser(USSSalem) & BuiltForNaval(USSalem))", "All x.(USS Salem(x) -> BuiltForNature(x))", "all x y.((USS Salem(x) & HeavyCruiser(y)) -> BuiltForNasa(x,y))", "(HeavyCruiser(ussSalem) & BuiltForNaval(ussnail))"]}
{"id": "folio_train_2590", "nl": "The last heavy cruiser to enter service was the USS Salem.", "fol": "LastHeavyCruiserInService(Usssalem)", "prediction": ["all x.((HeavyCruiser(x) & EntersService(x)) -> USSSalem(x))", "the last heavy cruiser to enter service was the USS Salem.", "(Late HeavyCruiserToEnterService(USSSalem))", "(LastHeavyCruiserToEnterService(USSSalem))", "all x y.((LightCruiser(x) & HeavyCruiser(y) & EntersService(x,y)) -> USSSalem(x))", "the USS Salem.", "-Late HeavyCruiserToEnterService(-USSSalem)", "(LastHeavyCruiserToEnterService(heavycruiser,USS Salem))", "all x.((HeavyCruiser(x) & EntersService(x)) -> USSSalem(x))", "the last heavy cruiser to enter service was the USS Salem.", "(Late HeavyCruiserToEnterService(USSSalem))", "-Late HeavyCruiserToEnterService(HasSalem)", "the USS Salem.", "all x.((LightCruiser(x) & EntersService(x)) -> USSSalem(x))", "(LongestHeavyCruiserToEnterService(USS Salem))", "all x.((HeavyCruiser(x) & EntersService(x)) -> USSSalem(x))"]}
{"id": "folio_train_2591", "nl": "The USS Salem is a museum ship.", "fol": "IsMuseumShip(Usssalem)", "prediction": ["all x.((USS Salem(x) & MuseumShip(x)) -> Ship(x))", "all x.(USSSalem(x) -> MuseumShip(x))", "(MuseumShip(USSSalem) & MuseumShip(USSSalem))", "the USSSalem is a museumship.", "all x.(Salem(x) -> MuseumShip(x))", "-MuseumShip(USSSalem)", "(MuseumShip(USS Salem) & MuseumShip(USS Salem))", "(MuseumShip(USSSalem) & MuseumShip(USSSalem))", "all x.((USS Salem(x) & MuseumShip(x)) -> Ship(x))", "the USSSalem (USSalem) is a museumship.", "all x.(Salem(x) -> MuseumShip(x))", "all x.(USSSalem(x) -> MuseumShip(x))", "(MuseumShip(USSSalem) & MuseumShip(USSSalem))", "all x.((USS Salem(x) & MuseumShip(x)) -> Ship(x))", "All x.(USSSalem(x) -> MuseumShip(x))", "(MuseumShip(USS Salem)"]}
{"id": "folio_train_2592", "nl": "Museum ships are open to the public.", "fol": "all x.(IsMuseumShip(x) -> AccessibleToPublic(x))", "prediction": ["all x.(MuseumShip(x) -> OpenToPublic(x))", "all x y.((MuseumShip(x) & Public(y)) -> Open(x,y))", "all x.(MuseumShip(x) -> OpenToPublic(x))", "all x y.((MuseumShip(x) & Public(y)) -> Open(x,y))", "all x.(MuseumShip(x) -> OpenToPublic(x))", "(OpenToPublic(museum) -> Ships(museum))", "all x y.((MuseumShip(x) & Public(y)) -> OpenTo(x,y))", "all x.(MuseumShip(x) -> OpenToPublic(x))", "all x.((MuseumShip(x) & OpenToPublic(x)) -> ShipOpenToPublic(x))", "(OpenToPublic(museum) & Ship(museum))", "all x y.((MuseumShip(x) & Public(y)) -> Open(x,y))", "all x.(MuseumShaped(x) -> OpenToPublic(x))", "all x.(MuseumShip(x) -> OpenToPublic(x))", "all x y.((MuseumShip(x) & Public(y)) -> OpenTo(x,y))", "all x.(MuseumShip(x) -> OpenToPublic(x))", "exists x.(MuseumShip(x) & OpenToPublic(x))"]}
{"id": "folio_train_2593", "nl": "The USS Salem served in the Atlantic and Mediterranean.", "fol": "(ServedInRegion(Usssalem,Atlantic) & ServedInRegion(Usssalem,Mediterranean))", "prediction": ["all x.(USSSalem(x) -> (ServedInAtlantic(x) & ServedInMediterranean(x)))", "(ServedInAtlantic(USS Salem) & ServedInMediterranean(USS Salem))", "the USSSalem served in the Atlantic and Mediterranean.", "all x.(USSSalem(x) -> (ServedAtlantic(x) & ServedMediterranean(x)))", "all x.(Salem(x) -> (ServedInAtlantic(x) & ServingInMediterranean(x)))", "(ServedInAtlantic(USS Salem) & ServicedInMediterranean(USS Salem))", "(ServicesAtlantic(USS Salem) & ServesMediterranean(USS Salem))", "all x y.((USSSalem(x) & Atlantic(y)) -> (ServedIn(x,y) & ServedIn(x,y)))", "ServedIn(USS Salem,Atlantic,Mediterranean)", "(ServicesInAtlantic(USS Salem) & ServesInMediterranean(USS Salem))", "(ServicesAtlanticAndMediterranean(USS Salem))", "all x.(USSSalem(x) -> (ServedInAtlantic(x) & ServingInMediterranean(x)))", "(ServedInAtlantic(USS Salem) & ServedInMediterranean(USS Salem))", "ServedInAtlanticAndMediterranean(USS Salem)", "All x.(USSSalem(x) -> (ServedAtlantic(x) & ServedMediterranean(x)))", "All x.(USSSalem(x) -> (ServedAtlantic(x) | ServedMediterranean(x)))"]}
{"id": "folio_train_2594", "nl": "The USS Salem is open to the public.", "fol": "AccessibleToPublic(Usssalem)", "prediction": ["all x.(USSSalem(x) -> OpenToPublic(x))", "the USSSalem is open to the public.", "The USS Salem is open to the public.", "all x.((USS Salem(x) & OpenToPublic(x)) -> OpenToPublic(x))", "all x.(USSSalem(x) -> OpenToPublic(x))", "All x.(Salem(x) -> OpenToPublic(x))", "all x.((USSSalem(x) & OpenToPublic(x)) -> OpenToPublic(x))", "all x y.((USS Salem(x) & Public(y)) -> Open(x,y))", "the USSSalem is open to the public.", "-OpenToPublic(USSSalem)", "(OpenToPublic(USS Salem)", "All x.(USSSalem(x) -> OpenToPublic(x))", "All x.(Salem(x) -> OpenToPublic(x))", "(OpenToPublic(USS Salem)", "All x.(Salem(x) -> OpenToPublic(x))", "(OpenToPublic(USS Salem)"]}
{"id": "folio_train_2595", "nl": "There is a museum ship open to the public that served in the Mediterranean.", "fol": "exists x.(IsMuseumShip(x) & AccessibleToPublic(x) & ServedInRegion(x,Mediterranean))", "prediction": ["exists x.(MuseumShip(x) & OpenToPublic(x) & ServesInMediterranean(x))", "exists x y.((MuseumShip(x) & OpenToPublic(x) & ServesInMediterranean(y)) -> OpenToPublic(x))", "exists x.(MuseumShip(x) & OpenToPublic(x) & ServesInMediterranean(x))", "exists x y.(MuseumShip(x) & OpenToPublic(x) & ServesInMediterranean(y))", "all x y z.((MuseumShip(x) & OpenToPublic(x) & Mediterranean(y) & OpenToPublic(z)) -> ServesIn(x,y,z))", "exists x.(MuseumShip(x) & OpenToPublic(x) & ServesInMediterranean(x))", "exists x y.((MuseumShip(x) & OpenToPublic(x) & OpenToPublic(y)) -> ServesInMediterranean(x,y))", "exists x.(MuseumShip(x) & OpenToPublic(x) & ServesInMediterranean(x))", "all x y z.((MuseumShip(x) & OpenToPublic(x) & Mediterranean(y) & OpenToPublic(x,y)) -> ServesIn(x,z))", "exists x.(MuseumShip(x) & OpenToPublic(x) & ServedInMediterranean(x))", "all x y.((MuseumShip(x) & OpenToPublic(x)) -> ServesInMediterranean(y))", "exists x.(MuseumShip(x) & OpenToPublic(x) & ServedInMediterranean(x))", "exists x.(MuseumShip(x) & OpenToPublic(x) & servedInMediterranean(x))", "exists x.(MuseumShore(x) & OpenToPublic(x) & ServedInMediterranean(x))", "exists x.(MuseumShip(x) & OpenToPublic(x) & ServicedInMediterranean(x))", "exists x.(MuseumShip(x) & OpenToPublic(x) & ServesInMediterranean(x))"]}
{"id": "folio_train_2596", "nl": "The USS Salem was not the last heavy cruiser to enter service.", "fol": "-LastHeavyCruiserInService(Usssalem)", "prediction": ["-LongestHorseCruiserToEnterService(USSSalem)", "-LastHeavyCruiserToEnterService(USSSalem)", "-(LargeCruiser(USSSalem) & LastToEnterService(USSSalem))", "-LargeCruiser(USSSalem)", "-last HeavyCruiserToEnterService(USSSalem)", "the USSSalem -Late HeavyCruiserToEnterService(USSSalem)", "(LastHeavyCruiserToEnterService(USSSalem) & -LastToEnterService(USSSalem))", "The USS Salem was not the last heavy cruiser to enter service.", "(LargeCruiser(USS Salem) & -LastToEnterService(USS Salem))", "the USSSalem was not the last heavy cruiser to enter service.", "-(LightweightCruiser(USS Salem) & LastToEnterService(USS Salem))", "(-last HeavyCruiserToEnterService(USSSalem))", "-LastHeavyCruiserToEnterService(USSSalem)", "(LongestToEnterService(USSSalem))", "-LongestHorseCruiserToEnterService(USSSalem)", "-LatelyEnteredService(USSSalem)"]}
{"id": "folio_train_2597", "nl": "TS Leda was a good passenger and cargo vessel.", "fol": "exists x.(TSLedaVessel(x) & IsPassengerVessel(x) & IsCargoVessel(x))", "prediction": ["all x.(TSLeda(x) -> (GoodPassengerVessel(x) & GoodCargoVessel(x)))", "all x.((TSLeda(x) & GoodPassenger(x) & GoodCargoVessel(x)) -> GoodVessel(x))", "TS Leda was a good passenger and cargo vessel.", "(GoodPassengerVessel(TSLeda) & GoodCargoVessel(TSLeda))", "all x.(TSLeda(x) -> (GoodPassengerVessel(x) & GoodCargoVessel(x)))", "all x.(TsLeda(x) -> (GoodPassengerVessel(x) & GoodCargoVessel(x)))", "all x.((TSLeda(x) & GoodPassenger(x) & GoodCargoVessel(x)) -> GoodVessel(x))", "TS Leda was a good passenger and cargo vessel.", "all x y.((TSLeda(x) & Passenger(y) & CargoVessel(y)) -> Good(x,y))", "(GoodPassengerVessel(TSLeda) & GoodCargoVessel(TSLeda))", "TS Leda was a good passenger and cargo vessel.", "all x.(TSLeda(x) -> (GoodPassengerVessel(x) & GoodCargoVessel(x)))", "all x y.((TSLeda(x) & Passenger(y) & CargoVessel(y)) -> Good(x,y))", "all x.((TSLeda(x) & GoodPassenger(x) & GoodCargoVessel(x)) -> GoodVessel(x))", "All x.(TsLeda(x) -> (GoodPassengerVessel(x) & GoodCargoVessel(x)))", "all x.(TSLeda(x) -> (GoodPassengerVessel(x) & GoodCargoVessel(x)))"]}
{"id": "folio_train_2598", "nl": "TS Leda was the first Norweigian vessel that was built with stabilizers.", "fol": "all x.(TSLedaVessel(x) -> (IsNorwegianVessel(x) & HasStabilizers(x)))", "prediction": ["all x.((NorweigianVessel(x) & BuiltWithStablers(x)) -> TSLeda(x))", "TS Leda was the first Norweigian vessel that was builtWithStabilizers.", "(NorweigianVessel(TSLeda) & BuiltWithStabilizers(TSLeda))", "all x.(TSLeda(x) -> (NorweigianVessel(x) & BuiltWithStabilizers(x)))", "all x y.((NorweigianVessel(x) & NorweigianVessel(y) & BuiltWithStabilizers(x,y)) -> Leda(x))", "TSLeda was the first NorweigianVesselToBeBuiltWithStabilizers(TSLeda)", "TS Leda (TS) -> NorweigianVessel(x))", "all x.((NorweigianVessel(x) & BuiltWithStabilizers(x)) -> TSLeda(x))", "(NorweigianVessel(TSLeda) & BuiltWithStablers(TS Leda))", "TS Leda (TSVessel(TS) & NorweigianVessel(TS) & BuiltWithStabilizers(TS))", "TSLeda is NorweigianVessel(TS) & BuiltWithStabilizers(TS)", "TS Leda is the first Norweigian vessel to be built with Stabilizers.", "TSLeda (TS) - BuiltWithStabilizers(TS))", "All x.(TSLeda(x) -> BuiltWithStabilizers(x))", "all x.((NorweigianVessel(x) & BuiltWithStablers(x)) -> TSLeda(x))", "TS Leda was the first Norweigian vessel that was builtWithStablers(TS)"]}
{"id": "folio_train_2599", "nl": "Stabilizers are mechanical devices that are only on ships that have powerful steam turbine engines.", "fol": "all x.((HasStabilizers(x) -> OnlyOnShipsWithStabilizers(x)) & HasSteamTurbineEngine(x))", "prediction": ["all x.(Stabilizer(x) -> (MechanicalDevice(x) & OnlyOnShipsWithPowerfulSteamTurbineEngines(x)))", "all x.(Stabilizer(x) -> (MechanicalDevice(x) & LocatedOnShip(x) & PowerfulSteamTurbineEngine(x)))", "all x y.((Stabilizer(x) & Ship(y) & PowerfulSteamTurbineEngine(y)) -> MechanicalDevice(x,y))", "all x y z.((Stabilizer(x) & Ship(y) & SteamTurbineEngine(z) & Powerful(y)) -> (MechanicalDevice(x) & On(x,y) & Powerful(z)))", "(all x.(Stabilizer(x) -> MechanicalDevice(x)) & exists y.(Ship(y) & PowerfulSteamTurbineEngine(y) & On(x,y))))", "all x.(Stabler(x) -> (MechanicalDevice(x) & OnlyOnShipsWithPowerfulSteamTurbineEngines(x)))", "all x.((Stabilizer(x) & Ship(y) & PowerfulSteamTurbineEngine(y)) -> MechanicalDevice(x))", "all x.(Stabilizer(x) -> (MechanicalDevice(x) & OnlyOnShipsWithPowerfulSteamTurbineEngines(x)))", "all x.(Stabilizer(x) -> (MechanicalDevice(x) & OnlyOnShipsWithPowerfulSteamTurbineEngines(x)))", "all x y.((Stabilizer(x) & Ship(y)) -> (MechanicalDevice(x,y) & PowerfulSteamTurbineEngine(y)))", "all x y.((Stabilizer(x) & Ship(y) & PowerfulSteamTurbineEngine(y)) -> MechanicalDevice(x,y))", "all x.(Stabilizer(x) -> (MechanicalDevice(x) & LocatedOnShip(x) & PowerfulSteamTurbineEngine(x)))", "all x.(Stabilizer(x) -> (MechanicalDevice(x) & LocatedOnShip(x) & PowerfulSteamTurbineEngine(x)))", "all x.(Stabler(x) -> (MechanicalDevice(x) & OnlyOnShipsWithPowerfulSteamTurbineEngines(x)))", "all x.(Stabilizer(x) -> (MechanicalDevice(x) & OnlyOnShipsWithPowerfulSteamTurbineEngines(x)))", "all x y.((Stabilizer(x) & Ship(y) & PowerfulSteamTurbineEngine(y)) -> MechanicalDevice(x,y))"]}
{"id": "folio_train_2600", "nl": " To be a good passenger and cargo vessel, ships must be quiet and good at sea.", "fol": "all x.(((IsPassengerVessel(x) & IsCargoVessel(x)) -> IsQuiet(x)) & IsGoodAtSea(x))", "prediction": ["all x.((Ship(x) & Quiet(x) & GoodAtSea(x)) -> GoodPassengerAndCargoVessel(x))", "all x.(GoodPassengerAndCargoVessel(x) -> (Quiet(x) & GoodAtSea(x)))", "all x.((Ship(x) & GoodPassenger(x) & GoodCargoVessel(x)) -> (Quiet(x) & GoodAtSea(x)))", "all x.((Ship(x) & Quiet(x) & GoodAtSea(x)) -> GoodPassengerAndCargoVessel(x))", "all x.((Ship(x) & Passenger(x) & CargoVessel(x)) -> (Quiet(x) & GoodAtSea(x)))", "all x.((Shaped(x) & GoodPassenger(x) & GoodCargoVessel(x)) -> (Quiet(x) & GoodAtSea(x)))", "all x y.((Ship(x) & Passenger(y) & CargoVessel(y)) -> (Quiet(x,y) & GoodAtSea(x,y)))", "(GoodPassengerVessel(x) & GoodCargoVessel(x)) -> (Quiet(x) & GoodAtSea(x)))", "all x.(GoodPassengerAndCargoVessel(x) -> (Quiet(x) & GoodAtSea(x)))", "all x.((Ship(x) & GoodPassengerVessel(x) & GoodCargoVessel(x)) -> (Quiet(x) & GoodAtSea(x)))", "all x.((Shore(x) & Quiet(x) & GoodAtSea(x)) -> GoodPassengerAndCargoVessel(x))", "all x y.((Ship(x) & Passenger(y) & CargoVessel(z) & Quiet(x,y) & GoodAtSea(x,z)) -> Good(x,y))", "all x y.((Ship(x) & Passenger(y) & CargoVessel(y)) -> (Quiet(x,y) & GoodAtSea(x,y)))", "all x.(GoodPassengerAndCargoVessel(x) -> (Quiet(x) & GoodAtSea(x)))", "all x.((Ship(x) & Quiet(x) & GoodAtSea(x)) -> GoodPassengerAndCargoVessel(x))", "all x.(GoodPassengerAndCargoVessel(x) -> (Quiet(x) & GoodAtSea(x)))"]}
{"id": "folio_train_2601", "nl": "Some ships that are quiet and good at sea have powerful steam turbine engines.", "fol": "exists x.(IsQuiet(x) & IsGoodAtSea(x) & HasSteamTurbineEngine(x))", "prediction": ["exists x.(Ship(x) & Quiet(x) & GoodAtSea(x) & HasPowerfulSteamTurbineEngines(x))", "exists x.((Ship(x) & Quiet(x) & GoodAtSea(x)) -> PowerfulSteamTurbineEngines(x))", "exists x.(Ship(x) & Quiet(x) & GoodAtSea(x) & PowerfulSteamTurbineEngine(x))", "all x y.((Ship(x) & Quiet(x) & GoodAtSea(x)) -> PowerfulSteamTurbineEngines(y))", "exists x.(Ship(x) & Quiet(x) & GoodAtSea(x) & HasPowerfulSteamTurbineEngines(x))", "exists x.((Ship(x) & Quiet(x) & GoodAtSea(x)) -> PowerfulSteamTurbineEngines(x))", "all x y.((Ship(x) & Quiet(x) & GoodAtSea(x)) -> PowerfulSteamTurbineEngines(y))", "exists x.((Ship(x) & Quiet(x) & GoodAtSea(x)) -> HasPowerfulSteamTurbineEngines(x))", "all x y.((Ship(x) & Quiet(x) & GoodAtSea(x)) -> HasPowerfulSteamTurbineEngines(y))", "exists x.(Ship(x) & Quiet(x) & GoodAtSea(x) & PowerfulSteamTurbineEngines(x))", "exists x.(Ship(x) & QuietAndGoodAtSea(x) & HasPowerfulSteamTurbineEngines(x))", "exists x.(Shaped(x) & Quiet(x) & GoodAtSea(x) & HasPowerfulSteamTurbineEngines(x))", "exists x.(Ship(x) & Quiet(x) & GoodAtSea(x) & HasPowerfulSteamTurbineEngines(x))", "all x y.((Ship(x) & Quiet(x) & GoodAtSea(x)) -> PowerfulSteamTurbineEngine(y))", "exists x.(Ship(x) & Quiet(x) & GoodAtSea(x) & PowerfulSteamTurbineEngine(x))", "exists x.((Ship(x) & Quiet(x) & GoodAtSea(x)) -> PowerfulSteamTurbineEngines(x))"]}
{"id": "folio_train_2602", "nl": "TS Leda was quiet and good at sea.", "fol": "exists x.(TSLedaVessel(x) & IsQuiet(x) & IsGoodAtSea(x))", "prediction": ["all x.(TSLeda(x) -> (Quiet(x) & GoodAtSea(x)))", "all x.((TSLeda(x) & Quiet(x) & GoodAtSea(x)) -> GoodAtSea(x))", "TS Leda wasQuietAndGoodAtSea(TS Leda)", "all x.(TsLeda(x) -> (Quiet(x) & GoodAtSea(x)))", "(Quiet(TS Leda) & GoodAtSea(TS Leda))", "all x.(TSLeda(x) -> (Quiet(x) & GoodAtSea(x)))", "all x y.((TSLeda(x) & Sea(y)) -> (Quiet(x) & GoodAt(x,y)))", "TS Leda was quiet and goodAtSea(TS Leda)", "TS Leda wasQuietAndGoodAtSea(TS)", "all x.((TSLeda(x) & Quiet(x) & GoodAtSea(x)) -> GoodAtSea(x))", "(Quiet(TS Leda) & GoodAtSea(TS Leda))", "all x y.((TSLeda(x) & Sea(y)) -> (Quiet(x,y) & GoodAt(x,y)))", "All x.(TSLeda(x) -> (Quiet(x) & GoodAtSea(x)))", "All x.(TsLeda(x) -> (Quiet(x) & GoodAtSea(x)))", "TS Leda wasQuietAndGoodAtSea(TSLeda)", "All x.(TSLeda(x) -> (Quiet(x) & GoodAtSea(x)))"]}
{"id": "folio_train_2603", "nl": "Some ships that arFe quiet and good at sea have powerful steam turbine engines.", "fol": "exists x.(IsQuiet(x) & IsGoodAtSea(x) & HasSteamTurbineEngine(x))", "prediction": ["exists x.(Ship(x) & ArFeQuiet(x) & GoodAtSea(x) & HasPowerfulSteamTurbineEngines(x))", "exists x.((Ship(x) & ArFeQuiet(x) & GoodAtSea(x)) -> PowerfulSteamTurbineEngines(x))", "exists x.(Ship(x) & ArFeQuiet(x) & GoodAtSea(x) & PowerfulSteamTurbineEngine(x))", "all x y.((Ship(x) & ArFeQuiet(x) & GoodAtSea(x)) -> PowerfulSteamTurbineEngines(y))", "exists x.(Ship(x) & ArFe(x) & Quiet(x) & GoodAtSea(x) & HasPowerfulSteamTurbineEngines(x))", "exists x.(Ship(x) & ArFeSilent(x) & GoodAtSea(x) & HasPowerfulSteamTurbineEngines(x))", "all x.((Ship(x) & ArFeQuiet(x) & GoodAtSea(x)) -> PowerfulSteamTurbineEngines(x))", "exists x.(Ship(x) & ArFeQuiet(x) & GoodAtSea(x) & HasPowerfulSteamTurbineEngines(x))", "all x y.((Ship(x) & ArFeQuiet(x) & GoodAtSea(x)) -> PowerfulSteamTurbineEngine(y))", "all x y.((Ship(x) & ArFeSilent(x) & GoodAtSea(x)) -> PowerfulSteamTurbineEngines(y))", "exists x.(Shaped(x) & ArFeQuiet(x) & GoodAtSea(x) & HasPowerfulSteamTurbineEngines(x))", "all x y.((Ship(x) & ArFeQuiet(x) & GoodAtSea(x)) -> HasPowerfulSteamTurbineEngines(y))", "exists x.(Ship(x) & ArFeSilent(x) & GoodAtSea(x) & HasPowerfulSteamTurbineEngines(x))", "exists x.(Ship(x) & ArFeQuiet(x) & GoodAtSea(x) & PowerfulSteamTurbineEngine(x))", "exists x.((Ship(x) & ArFeQuiet(x) & GoodAtSea(x)) -> HasPowerfulSteamTurbineEngines(x))", "exists x.(Shaped(x) & ArFeSilent(x) & GoodAtSea(x) & HasPowerfulSteamTurbineEngines(x))"]}
{"id": "folio_train_2604", "nl": "TS Leda had powerful steam turbine engines.", "fol": "all x.(TSLedaVessel(x) -> HasSteamTurbineEngine(x))", "prediction": ["all x.(TSLeda(x) -> PowerfulSteamTurbineEngines(x))", "(PowerfulSteamTurbineEngines(TSLeda))", "TS Leda had powerful steam turbine engines.", "all x.(TSLeda(x) -> PowerfulSteamTurbineEngines(x))", "all x.(TsLeda(x) -> PowerfulSteamTurbineEngines(x))", "all x y.((TSLeda(x) & SteamTurbine(y)) -> Powerful(x,y))", "all x.((TSLeda(x) & PowerfulSteamTurbineEngines(x)) -> Powerful(x))", "TS Leda had powerful steam turbine engines.", "all x.(TSLeda(x) -> PowerfulSteamTurbineEngines(x))", "TS Leda had powerful steamturbineEngines.", "All x y.((TSLeda(x) & SteamTurbine(y)) -> Powerful(x,y))", "all x.(TSLeda(x) -> PowerfulSteamTurbineEngines(x))", "All x y.((TSLeda(x) & SteamTurbine(y)) -> Powerful(x,y))", "all x.(TsLeda(x) -> PowerfulSteamTurbineEngines(x))", "all x.(TSLeda(x) -> PowerfulSteamTurbineEngines(x))", "all x.(TSLeda(x) -> PowerfulSteamTurbineEngines(x))"]}
{"id": "folio_train_2605", "nl": "TS Leda was not a Norweigian vessel.", "fol": "all x.(TSLedaVessel(x) -> -IsNorwegianVessel(x))", "prediction": ["TS Leda - NorweigianVessel(TSLeda))", "all x.(TSLeda(x) -> -NorweigianVessel(x))", "-NorweigianVessel(TSLeda)", "TSLeda was notNorweigianVessel(TSLeda)", "TS Leda - NorweigianVessel(TSLeda)", "all x.(TSLeda(x) -> -NorweigianVessel(x))", "(-NorweigianVessel(TSLeda))", "TSLeda was -NorweigianVessel(TSLeda)", "(-NorwegianVessel(TSLeda))", "TS Leda n'\u00e9tait pas NorweigianVessel(TSLeda)", "all x.(TSLeda(x) -> -NorweigianVessel(x))", "(-NorweigianVessel(TSLeda))", "TS Leda - NorweigianVessel(TSLeda)", "TSLeda was not a NorweigianVessel(TSLeda)", "TS Leda - NorweigianVessel(TSLeda)", "(-NorweigianVessel(TSLeda))"]}
{"id": "folio_train_2606", "nl": "Rosa was born in Santiago. ", "fol": "BornIn(Rosa,Santiago)", "prediction": ["(Birth(Rosa) & BornInSantiago(Rosa))", "Rosa was born in Santiago.", "-Birth(Rosa,Santiago)", "Rosa a.(BirthInSantiago(Rosa))", "(Birth(Rosa,Santiago))", "Rosa was born in Santiago.", "-BirthInSantiago(Rosa,Santiago)", "(Birth(Rosa) & BornInSantiago(Rosa))", "-Birth(Rosa,Santiago)", "Rosa was born in Santiago.", "Rosa wurde in Santiago geboren.", "Rosa a \u00e9t\u00e9 born in Santiago.", "(Birth(Rosa) & BornIn(Rosa,Santiago))", "(Birth(Rosa,Santiago))", "Rosa was born in Santiago de Compostela.", "Rosa was born in Santiago."]}
{"id": "folio_train_2607", "nl": "Santiago is the capital and largest city of Chile.", "fol": "(IsCapitalOf(Santiago,Chile) & IsLargestCityOf(Santiago,Chile))", "prediction": ["Santiago (Capital(x) & LargestCity(x))", "(Capital(Santiago) & LargestCity(Santiago))", "Santiago (capital(Chile) & LargestCity(Chile))", "all x.(Santiago(x) -> (Capital(x) & LargestCity(x)))", "Santiago is capital and largestcity(x) & LocatedInChile.", "Santiago (City) & Capital(City) & Largest(City) & LocatedInChile(City))", "Santiago, Chile's CapitalAndLargestCity(x)", "-(Capital(x) & LargestCity(x)) -> Santiago(x))", "Santiago is capital and largestCityOfChile.", "Santiago - CapitalAndLargestCityOfChile.", "(Capital(Santiago) & LargestCity(Santiago))", "Santiago,,LargestCity(,Chile))", "Santiago (Capital(x) & LargestCity(x))", "Santiago is capital and largestcity(x) & LocatedInChile.", "(Capital(Santiago) & LargestCity(Santiago))", "(Capital(Santiago) & LargestCity(Santiago))"]}
{"id": "folio_train_2608", "nl": "Rosa is the daughter of a Catalan building contractor, Jose.", "fol": "(IsDaughterOf(Rosa,Jose) & IsBuildingContractor(Jose) & -IsChilean(Jose))", "prediction": ["(DaughterOfCatalanBuildingContractor(Rosa) & DaughterOfJose(Rosa))", "all x.(Rosa(x) -> (DaughterOfCatalanBuildingContractor(x) & DaughterOfJose(x)))", "all x y.((Rosa(x) & CatalanBuildingContractor(y)) -> DaughterOf(x,y))", "all x.((Rosa(x) & CatalanBuildingContractor(x)) -> DaughterOf(x,Jose))", "(CatalanBuildingContractor(Rosa) & DaughterOf(Rosa,Jose))", "(Daughter(Rosa,CatalanBuildingContractor) & DaughterOf(Rosa,CatalanBuildingContractor))", "Rosa is the daughter of CatalanBuildingContractor, Jose.", "(DaughterOfCatalanBuildingContractor(Rosa) & DaughterOfJose(Rosa))", "Rosa, daughterOfCatalanBuildingContractorJosef(Rosa))", "(DaughterOfCatalanBuildingContractor(Rosa) & DaughterOfJose(Rosa))", "Rosa is the daughter of a CatalanBuildingContractor, Jose.", "all x y.((Rosa(x) & CatalanBuildingContractor(y)) -> DaughterOf(x,y))", "all x.((Rosa(x) & CatalanBuildingContractor(x)) -> DaughterOf(x,Jose))", "all x y.((Rosa(x) & CatalanBuildingConstruction(y)) -> DaughterOf(x,y))", "(DaughterOfCatalanBuildingContractor(Rosa) & DaughterOfJose(Rosa))", "(DaughterOfCatalanBuildingConstruction(Rosa,Jose))"]}
{"id": "folio_train_2609", "nl": "Jose has a Chilean wife, Carmen.", "fol": "(IsWifeOf(Jose,Carmen) & IsChilean(Carmen))", "prediction": ["all x.(Jose(x) -> ChileanWife(x,Carmen))", "(HasChileanWife(Jose) & HasChileanWife(Jose))", "(ChileanWife(Jose) & ChileanWife(Jose))", "(HasChilianWife(Jose) & HasChilianWife(Jose))", "(ChilianWife(Jose) & ChileanWife(Jose))", "all x y.((Jose(x) & ChileanWife(y)) -> HasCarmen(x,y))", "all x.((Jose(x) & ChileanWife(x,Carmen)) -> Has(x,Jose))", "(Helena(Jose) & ChileanWife(Jose) & Carmen(Jose))", "all x.(Jose(x) -> ChileanWife(x,Carmen))", "all x y.((Jose(x) & ChileanWife(y) & Carmen(y)) -> Has(x,y))", "(Shelter(Jose) & ChileanWife(Jose))", "-(Jose(Jose) & ChileanWife(Jose,Carmen))", "all x y.((Jose(x) & ChileanWife(y,x)) -> HasCarmen(x,y))", "all x.(Jose(x) -> ChileanWife(x,Carmen))", "exists x.(Jose(x) & Chilean(x) & Has(x,Carmen))", "exists x.(Jose(x) & ChileanWife(x,Carmen))"]}
{"id": "folio_train_2610", "nl": "If someone is another person's daughter, she is also the daughter of the another person's wife.", "fol": "all z.((IsDaughterOf(x,y) & IsWifeOf(y,z)) -> IsDaughterOf(x,z))", "prediction": ["all x y.((Daughter(x) & Person(y)) -> DaughterOf(x,y))", "all x y.((Person(x) & Person(y) & Daughter(x,y)) -> DaughterOfWife(x,y))", "all x.((Daughter(x) & Person(x)) -> DaughterOfWife(x))", "all x y.((Daughter(x,y) & Person(y)) -> DaughterOfWife(x,y))", "all x.((Person(x) & DaughterOf(x,y)) -> DaughterOfWife(x,y))", "all x y z.((Daughter(x) & Person(y) & Person(z)) -> DaughterOf(x,y,z))", "all x y.((Person(x) & Person(y)) -> DaughterOf(x,y))", "all x.((Daughter(x) & Person(x)) -> DaughterOfWife(x,x))", "all x y.((Daughter(x) & Person(y)) -> DaughterOfWife(x,y))", "all x.(Daughter(x) -> DaughterOfWife(x,y))", "all x y.((Person(x) & Person(y) & Daughter(x,y)) -> DaughterOf(x,y))", "all x y z.((Daughter(x) & Person(y) & Person(z)) -> DaughterOf(x,y,z))", "(all x.(Daughter(x,y) -> Person(y)))", "all x.((Daughter(x) & Person(x)) -> DaughterOf(x,Wife,Alternate(x)))", "exists x.(Daughter(x,y) & Person(y) & DaughterOf(x,y))", "all x y.((Daughter(x,y) & Person(y)) -> DaughterOf(x,y))"]}
{"id": "folio_train_2611", "nl": "A building contractor is responsible for the day-to-day oversight of a construction site. ", "fol": "all x.exists y.((IsBuildingContractor(x) & IsConstructionSite(y)) -> Oversees(x,y))", "prediction": ["all x y.((BuildingConstructionConsultant(x) & ConstructionSite(y)) -> OverseesDayToDay(x,y))", "all x y z.((BuildingConstructionConsultant(x) & ConstructionSite(y) & ConstructionSite(z)) -> OverseesDayToDay(x,y,z))", "all x y.((BuildingConsultant(x) & ConstructionSite(y)) -> OverseesDayToDay(x,y))", "all x y.((BuildingConstructionConsultant(x) & ConstructionSite(y)) -> ResponsibleForDayToDayOversight(x,y))", "all x.(BuildingConstruction(x) -> OverseesConstructionSite(x))", "all x y.((BuildingContractors(x) & ConstructionSite(y)) -> OverseesDayToDay(x,y))", "all x.(BuildingConsultant(x) -> OverseesConstructionSite(x))", "all x y z.((BuildingConstructionConstructionSite(x) & ConstructionSite(y) & Oversees(x,y)) -> ResponsibleFor(x,y))", "all x y z.((BuildingConsultant(x) & ConstructionSite(y) & ConstructionSite(z)) -> OverseesDayToDay(x,y,z))", "all x y.((BuildingContractor(x) & ConstructionSite(y)) -> ResponsibleForDayToDayOversight(x,y))", "all x.(BuildingConsultant(x) -> ResponsibleForDayToDayOversightOfConstructionSite(x))", "all x.(BuildingConstruction(x) -> OverseesConstructionSite(x))", "all x y z.((BuildingConstructionConsultant(x) & ConstructionSite(y) & ConstructionSite(z)) -> OverseesDayToDay(x,y,z))", "all x.(BuildingContractor(x) -> OverseesConstructionSite(x))", "all x y.((BuildingConstructionContractors(x) & ConstructionSite(y)) -> OverseesDayToDay(x,y))", "exists x.(BuildingContractors(x) & OverseesConstructionSite(x))"]}
{"id": "folio_train_2612", "nl": "Rosa was born in the largest city of Chile.", "fol": "exists x.(BornIn(Rosa,x) & IsLargestCityOf(x,Chile))", "prediction": ["Rosa was born in the largest city of Chile.", "(Birth(Rosa) & LargestCity(Rosa))", "-(Birth(Rosa) & LargestCity(Rosa,Chile))", "Rosa a.(Birth(Rosa,Chile) & LargestCity(Rosa,Chile))", "all x.(Rosa(x) -> BornInLargestCityOfChile(x))", "(Birth(Rosa,Chile) & LargestCity(Rosa,Chile))", "Originally from Chile, Rosa was born in the largest city of Chile.", "-Birth(Rosa,Chile)", "Rosa was born in the largest city of Chile.", "(Birth(Rosa) & LargestCity(Rosa,Chile))", "Rosa was born in largestCityOfChile(Rosa)", "Rosa wurde in der gr\u00f6\u00dften Stadt Chiles geboren.", "Rosa was born in the largest city of Chile.", "Rosa was born in the largestcity(Rosa,Chile)", "(Birth(Rosa) & LargestCity(Rosa))", "Rosa was born in the largest city of Chile."]}
{"id": "folio_train_2613", "nl": "Neither of Rosa's parents is Chilean.", "fol": "-exists x.(IsDaughterOf(Rosa,x) & IsChilean(x))", "prediction": ["-(RosasParent(Rosa) & Chilean(Rosa))", "((Rosa(Rosa) & -Chilean(Rosa)) | (-Chilean(Rosa) & Chilean(Rosa))))", "-(Rose(Rosa) & Chilean(Rosa))", "(-(Rosa'sParent(Rosa) & Chilean(Rosa)))", "all x.((Parent(x) & Rosa(x)) -> -Chilean(x))", "all x.((Rosa(x) & -Chilean(x)) -> -Chilean(x))", "Neither of Rosa's parents is Chilean.", "(exists x.(Parent(x) & Rosa(x)) & -Chilean(x))", "((Rosa(Rosa) & -Chilean(Rosa)) -> -Chilean(Rosa))", "-(Rose(Rosa) & Chilean(Rosa))", "(-(RosasParent(Rosa) & Chilean(Rosa)))", "(-Chilian(Rosa) & -Chilian(Rosa))", "Neither of Rosa's parents is Chilean.", "-(RoseParent(Rosa) & Chilean(Rosa))", "Neither of Rosa's parents is Chilean.", "Neither of Rosa's parents is Chilean."]}
{"id": "folio_train_2614", "nl": "Rosa is the daughter of someone who is responsible for the oversight of a construction site.", "fol": "exists x y.(IsDaughterOf(Rosa,x) & IsConstructionSite(y) & Oversees(x,y))", "prediction": ["all x.(Rosa(x) -> (DaughterOf(x,y) & ResponsibleForConstructionSite(y)))", "all x y.((Rosa(x) & Person(y)) -> OverseesConstructionSite(x,y))", "(DaughterOf(Rosa,ConstructionSite) & ResponsibleForOversight(Rosa,ConstructionSite))", "all x.((Rosa(x) & Person(y) & OverseesConstructionSite(x,y)) -> Daughter(x))", "Rosa is the daughter of someone responsible for oversight of constructionsites.", "all x y z.((Rosa(x) & Person(y) & ConstructionSite(z)) -> Oversees(x,y,z))", "all x y.((Daughter(x) & ConstructionSite(y)) -> ResponsibleForOversight(x,y))", "all x y.((Rosa(x) & Person(y)) -> OverseesConstructionSite(x,y))", "all x.((Daughter(x) & ResponsibleForConstructionSite(x)) -> Rosa(x))", "(DaughterOf(Rosa,ConstructionSite) & ResponsibleForOversight(Rosa,ConstructionSite))", "(DaughterOf(Rosa,ConstructionSite) & ResponsibleForOversight(Rosa,ConstructionSite))", "all x.(Rosa(x) -> (DaughterOf(x,y) & ResponsibleForConstructionSite(x,y)))", "all x.(Rosa(x) -> (DaughterOfResponsibleForConstructionSite(x) & OverseesConstructionSite(x)))", "(DaughterOfResponsibleForConstructionSite(Rosa,ConstructionSite))", "exists x y.(Daughter(x) & Person(y) & ResponsibleForOversight(x,y))", "(DaughterOf(Rosa,ConstructionSite) & ResponsibleForOverview(Rosa,ConstructionSite))"]}
{"id": "folio_train_2615", "nl": "Tyga is a rapper.", "fol": "IsRapper(Tyga)", "prediction": ["Tyga is rapper.", "(Rapper(Tyga) & Rapper(Tyga))", "Tyga is rapper.", "Tyga is rapper(ty) & Rapper(ty))", "-Rapper(Tyga)", "(Rabbit(Tyga) & Rapper(Tyga))", "all x.(Tyga(x) -> Rapper(x))", "Tyga is a rapper.", "(Rabbi(Tyga) & Rapper(Tyga))", "Tyga (Rapper(ty) & Rapper(ty))", "Tyga is rapper.", "(Rabbit(Tyga) & Rapper(Tyga))", "Tyga (Rapper)", "(Rabbi(Tyga) | Rapper(Tyga))", "Tyga is rapper(x)", "Tyga is a rapper."]}
{"id": "folio_train_2616", "nl": "Rappers release rap albums.", "fol": "ReleasesAlbum(Tyga,WellDone3)", "prediction": ["all x.(Rapper(x) -> ReleasesRapAlbums(x))", "all x y.((Rapper(x) & RapAlbum(y)) -> Releases(x,y))", "all x.(Rapper(x) -> ReleasesRapAlbums(x))", "all x.(Rapper(x) -> ReleasesRapAlbums(x))", "all x y.((Rapper(x) & RapAlbum(y)) -> Releases(x,y))", "all x y z.((Rapper(x) & RapAlbum(y) & Album(z)) -> Releases(x,y,z))", "(all x.(Rapper(x) -> ReleasesRapAlbums(x)))", "all x y.((Rrapper(x) & RapAlbum(y)) -> Releases(x,y))", "all x.(Rapper(x) -> ReleasesRapAlbum(x))", "all x y z.((Rapper(x) & RapAlbum(y) & Album(z)) -> Release(x,y,z))", "all x.(Rapper(x) -> ReleasesRapAlbums(x))", "all x y.((Rapper(x) & RapAlbum(y)) -> Release(x,y))", "exists x.(Rrapper(x) & RapAlbum(y) & Releases(x,y))", "all x.(Rrapper(x) -> ReleasesRapAlbums(x))", "exists x.(Rrapper(x) & RapAlbum(x))", "all x y.((Rrapper(x) & RapAlbum(y)) -> Releases(x,y))"]}
{"id": "folio_train_2617", "nl": "Tyga released the Well Done 3 album.", "fol": "all x y.((IsRapper(x) & ReleasesAlbum(x,y)) -> IsRapAlbum(y))", "prediction": ["Tyga released WellDone3(x)", "(WellDone(Tyga) & WellDone(Tyga))", "Tyga released WellDone3 album.", "(WellDone3(Tyga) & Released(Tyga,3))", "-WellDone3(Tyga)", "(WellDone(Tyga) & Released(Tyga,WellDone3))", "all x.(Tyga(x) -> WellDone3(x))", "Tyga released the WellDone3Album(ty) & -WellDone3(ty))", "-Tyga released WellDone3 album.", "Tyga released WellDone3(ty) & Album(ty))", "Tyga released WellDone3 Album(ty) & WellDone3(ty))", "All x.(Tyga(x) -> WellDone(x))", "(WellDone3(Tyga) & Released(Tyga,3))", "Tyga released the WellDone3Album(Tyga)", "Tyga released WellDone3 album.", "Tyga ReleasedWellDone3(x)"]}
{"id": "folio_train_2618", "nl": "Rappers are not opera singers.", "fol": "all x.(IsRapper(x) -> -IsNotOperaSinger(x))", "prediction": ["all x.(Rapper(x) -> -OperaSinger(x))", "all x.(Rapper(x) -> -OperaSinger(x))", "all x y.((Rapper(x) & OperaSinger(y)) -> -(Rapper(x) & OperaSinger(x)))", "(all x.(Rapper(x) -> OperaSinger(x)))", "(all x.(Rapper(x) -> -OperaSinger(x)))", "all x.(Rapper(x) -> -OperaSinger(x))", "(-OperaSinger(rapper))", "all x.(Rapper(x) -> -OperaSinger(x))", "all x y.((Rapper(x) & OperaSinger(y)) -> -(Rapper(x) & OperaSinger(x)))", "-OperaSinger(rapper,y)", "all x.(Rapper(x) -> -OperaSinger(x))", "all x.(Rapper(x) -> -OperaSinger(x))", "all x.(Rapper(x) -> -OperaSinger(x))", "all x.(Rrapper(x) -> -OperaSinger(x))", "all x.(Rapper(x) -> -OperaSinger(x))", "exists x.(Rrapper(x) & -OperaSinger(x))"]}
{"id": "folio_train_2619", "nl": "Well Done 3 is a rap album.", "fol": "IsRapAlbum(WellDone3)", "prediction": ["All x.(WellDone(x) -> RapAlbum(x))", "WellDone3 is a RapAlbum(x)", "(RapAlbum(WellDone3) & -RapAlbum(WellDone3))", "All x.(WellDone(x) -> RapAlbum(x))", "All x.(WellDone3(x) -> RapAlbum(x))", "WellDone3 is a RapAlbum.", "all x.((WellDone3 & RapAlbum(x)) -> WellDone3.", "(RapAlbum(WellDone3) & Released(WellDone3))", "WellDone3 is rapalbum.", "all x.((WellDone(x) & WellDone(x)) -> RapAlbum(x))", "(RapAlbum(WellDone3) & -RapAlbum(WellDone3))", "WellDone3 is a RapAlbum(x)", "WellDone3 (RapAlbum))", "All x.(WellDone(x) -> RapAlbum(x))", "WellDone3 is rapalbum.", "WellDone3 (RapAlbum)"]}
{"id": "folio_train_2620", "nl": "Tyga is an opera singer.", "fol": "IsNotOperaSinger(Tyga)", "prediction": ["(OperaSinger(Tyga) & OperaSinger(Tyga))", "Tyga is an opera singer.", "-OperaSinger(Tyga)", "Tyga is opera singer.", "(OperaSinger(Tyga))", "Tyga is an opera singer.", "(OperaSinger(Tyga) & OperaSinger(Tyga))", "Tyga ist OpernSinger(ty) & OperaSinger(ty))", "-OperaSinger(Tyga)", "(OperaSinger(Tyga) | OperaSinger(Tyga))", "Tyga is a opera singer.", "Tyga (OperaSinger)", "Tyga is OperaSinger(ty) & OperaSinger(ty))", "Tyga is opera singer.", "(OperaSinger(Tyga) & OperaSinger(Tyga))", "Tyga is an opera singer."]}
{"id": "folio_train_2621", "nl": "Well Done 3 is worth listening.", "fol": "WorthListening(WellDone3)", "prediction": ["All x.(WellDone(x) -> WorthListening(x))", "WellDone3 is WorthListening(x)", "(WorthListening(WellDone3))", "WellDone3 isWorthListening(WellDone3) -> WorthListening(WellDone3))", "All x.(WellDone3(x) -> WorthListening(x))", "-WorthListening(WellDone3 & WorthListening(WellDone3))", "WellDone3 - WorthListening(x))", "(WorthListening(WellDone3) & WellDone3(WellDone3))", "all x.((WellDone3 & WorthListening(x)) -> WorthListening(x))", "All x.(WellDone(x) -> WorthListening(x))", "all x.(WellDone3(x) -> WorthListening(x))", "WellDone3 & WorthListening(x)", "(WorthAudience(WellDone3))", "WellDone3 - WorthAuditing(WellDone3))", "All x.(WellDone(x) -> WorthAuditing(x))", "WellDone3 is WorthListening."]}
{"id": "folio_train_2622", "nl": "Deborah Wallace is a Scottish born actress, playwright and producer.", "fol": "(BornInLocation(Deborahwallace,Scotland) & IsActress(Deborahwallace) & IsPlaywright(Deborahwallace) & IsProducer(Deborahwallace))", "prediction": ["(ScottishBirth(DeborahWallace) & ScottishBirth(DeborahWallace) & ScottishBirth(DeborahWallace))", "DeborahWallace (ScottishBirthActress(Scottish) & Playwright(Scottish) & Producer(Scottish))", "all x.(DeborahWallace(x) -> (ScottishBornActor(x) & Playwright(x) & Producer(x)))", "all x.((DeborahWallace(x) & ScottishBornActor(x) & Playwright(x) & Producer(x)) -> ScottishBornActor(x))", "DeborahWallis (ScottishBirth(Deborah) & ScottishBirth(Deborah) & ScottishBirth(Deborah) & Playwright(Deborah) & Producer(Deborah))", "Deborah Wallace (ScottishBirthActress,Playwright,Producer)", "(ScottishBirth(DeborahWallis) & ScottishBornActor(DeborahWallis) & Playwright(DeborahWallis) & Producer(DeborahWallis))", "all x.((DeborahWallace(x) & ScottishBirthActress(x) & Playwright(x) & Producer(x)) -> ScottishBirthActressPlaywrightProducer(x))", "DeborahWallace (ScottishBornActor(s) & Playwright(s) & Producer(s))", "(ScottishBirth(DebbieWallis) & ScottishBirth(DebbieWallis) & ScottishBirth(DebbieWallis) & ScottishBirth(DebbieWallis) & ScottishBirth(DebbieWallis))", "(ScottishBornActor(DeborahWallace) & ScottishBirth(DeborahWallace) & Playwright(DeborahWallace) & Producer(DeborahWallace))", "all x.(DeborahWallace(x) -> (ScottishBornActor(x) & Playwright(x) & Producer(x)))", "Deborah Wallace (ScottishBirthActress,Playwright,Producer)", "(ScottishBirth(DeborahWallace) & ScottishBirth(DeborahWallace) & ScottishBirth(DeborahWallace))", "DeborahWallis (ScottishBirthActress,Playwright,Producer)", "all x.(DeborahWallis(x) -> (ScottishBornActress(x) & Playwright(x) & Producer(x)))"]}
{"id": "folio_train_2623", "nl": "Psyche is a play based on the life of James Miranda Barry.", "fol": "(IsPlay(Psyche) & IsBasedOn(Psyche,Lifeofjamesmirandabarry))", "prediction": ["Psyche is based on the life of James Miranda Barry.", "all x.(Psyche(x) -> PlayBasedOnLifeOfJamesMariaBarry(x))", "Psyche (play) & BasedOnLifeOfJamesMariaBarry(play))", "all x y.((Play(x) & JamesMariaBarry(y)) -> BasedOnLife(x,y))", "(BasedOnLifeOfJamesMariaBarry(Psyche))", "all x.(Psyche(x) -> PlayBasedOnLifeOf(x,JimmyMariaBarry))", "(Play(Psyche) & BasedOnLifeOfJamesMariaBarry(Psyche))", "Psyche is a play based on the life of James Miranda Barry.", "all x.(Psyche(x) -> (PlayBasedOnLifeOfJamesMariaBarry(x)))", "Psyche (Play(Psyche) & BasedOnLifeOfJamesMariaBarry(Psyche))", "Psyche is based on the life of James Miranda Barry.", "(Play(Psyche) & BasedOnJamesMariaBarry(Psyche))", "All x.(Psyche(x) -> BasedOnLifeOfJamesMariaBarry(x))", "Psyche (play) & BasedOnLifeOf(play,JimmyMariaBarry))", "(Play(Psyche) & BasedOnLifeOfJimmyMarriageBarry(Psyche))", "All x.(Psyche(x) -> BasedOnLifeOfJamesMariaBarry(x))"]}
{"id": "folio_train_2624", "nl": "Homesick, Psyche and The Void are plays from Deborah Wallace.", "fol": "(IsPlay(Homesick) & CreatedBy(Homesick,Deborahwallace) & IsPlay(Psyche) & CreatedBy(Psyche,Deborahwallace) & IsPlay(Thevoid) & CreatedBy(Thevoid,Deborahwallace))", "prediction": ["all x.((Play(x) & Homestead(x) & Psyche(x) & TheVoice(x)) -> DeborahWallace(x))", "(Play(Homesick) | Play(Psyche) | Play(TheVoice)) & DeborahWallace(DeborahWallace))", "(Play(Homesick) & Play(Psyche) & Play(TheVoice))", "all x y.((Play(x) & Homestead(y) & Psyche(y) & TheVoice(y)) -> DeborahWallace(x))", "all x.((Play(x) & Homestead(x) | Psyche(x) | TheVoice(x)) -> DeborahWallace(x))", "all x y z.((Play(x) & Homework(y) & Psyche(z) & TheVoice(x)) -> DeborahWallace(x))", "(Play(Homesick,DavidWallace) | Play(Psyche,DavidWallace)))", "(Plays(Homesick,DavidWallace) | Plays(Psyche,DavidWallace)))", "(Play(Homesick,) & Play(Psyche,) & Play(TheVoice,) & DeborahWallace(DeborahWallace))", "All x.(Play(x) -> (Homesick(x) | Psyche(x) | TheVoice(x)))", "(plays from DeborahWallace(Homesick,Psyche,TheVoice))", "all x y z.((Homesick(x) | Psyche(y) | TheVoice(z)) -> Play(x,y))", "all x.((Play(x) & Homestead(x) & Psyche(x) & Void(x)) -> DeborahWallace(x))", "(Play(homesick) | Play(psyche) | Play(thevod)))", "all x y.((Play(x) & Homework(y) & Psyche(y) & TheVoice(y)) -> DeborahWallace(x))", "All x.((Play(x) & Homework(x) | Psyche(x) | Void(x)) -> DeborahWallace(x))"]}
{"id": "folio_train_2625", "nl": "Deborah Wallace Coproduced Gasland.", "fol": "CoProduced(Deborahwallace,Gasland)", "prediction": ["DeborahWallaceCoproducedGasland.", "(CoproducedBy(DeborahWallace) & Gasland(DeborahWallace))", "(CoproducedByDeborahWallace(DeborahWallace))", "all x y.((DeborahWallace(x) & Gasland(y)) -> Coproduced(x,y))", "all x.(DeborahWallace(x) -> CoproducedGasland(x))", "All x.(DebbieWallace(x) -> CoproducedGasland(x))", "Deborah Wallace CoproducedGasland.", "DebraWallace CoproducedGasland.", "(CoproducedGasland(DebbieWallace))", "DeborahWallace CoproducedGasland.", "DeborahWallis CoproducedGasland(Debbie)", "(CoproducedBy(DeborahWallace,Gasland))", "DeborahWallaceCoproducedGasland(DeborahWallace)", "Deborah Wallace CoproducedGasland.", "DeborahWallis CoproducedGasland.", "DeborahWallaceCoproducedGasland(x)"]}
{"id": "folio_train_2626", "nl": "Gasland was coproduced by the same person Homesick is from.", "fol": "exists x.(CoProduced(x,Gasland) & CreatedBy(Homesick,x))", "prediction": ["all x y.((Gasland(x) & Homesick(y)) -> CoproducedBy(x,y))", "all x.(Gasland(x) -> CoproducedByHomesick(x))", "all x.((Gasland(x) & Homesick(x)) -> CoproducedBy(x,y))", "(CoproducedByHomesick(Gasland) & SamePerson(Housesick))", "Gasland was coproduced by the same person Homesick is from.", "all x y z.((Gasland(x) & Homesick(y) & Person(z)) -> CoproducedBy(x,y,z))", "(CoproducedByHomesick(Gasland) & SamePerson(Homesick))", "all x y.((Gasland(x) & Homesick(y)) -> CoproducedBy(x,y))", "(CoproducedBy(Gasland) & Homesick(Housesick))", "All x.(Gasland(x) -> CoproducedByHomesick(x))", "all x y.((Gasland(x) & Homesick(y)) -> CoProducedBy(x,y))", "(CoproducedByHomesick(Gasland) & SamePerson(Housesick))", "(CoproducedByHomesick(Gasland) & CoproducedByHomesick(Gasland))", "All x.(Gasland(x) -> CoproducedByHomesick(x))", "All x.(Gasland(x) -> CoProducedByHomesick(x))", "all x y.((Gasland(x) & Homestead(y)) -> CoproducedBy(x,y))"]}
{"id": "folio_train_2627", "nl": "There isn't a play from Deborah Wallace that is based on the life of James Miranda Barry.", "fol": "-exists x.(IsPlay(x) & IsBasedOn(x,Lifeofjamesmirandabarry) & CreatedBy(x,Deborahwallace))", "prediction": ["-exists x.(Play(x) & DeborahWallace(x) & BasedOnLifeOfJamesMariaBarry(x))", "exists x.(Play(x) & -BasedOnLifeOf(x,JimmyMariaBarry))", "(exists x.(Play(x) & DeborahWallace(x) & BasedOnJamesMariaBarry(x)))", "exists x.(Play(x) & -BasedOnLifeOfJamesMariaBarry(x))", "-exists x.(Play(x) & DeborahWallace(x) & BasedOnJamesMariaBarry(x))", "(exists x.(Play(x) & DeborahWallace(x) & BasedOnLifeOfJamesMariaBarry(x)))", "-exists x.(Play(x) & FromDeborahWallace(x) & BasedOnLifeOfJamesMariaBarry(x))", "exists x.(Play(x) & -BasedOnLife(x,JimmyMariaBarry))", "all x y.((Play(x) & DeborahWallis(y)) -> -BasedOnLifeOfJamesMariaBarry(y))", "-exists x.(Play(x) & DeborahWallace(x) & BasedOnLifeOfJamesMariaBarry(x))", "exists x.(Play(x) & -BasedOnJamesMariaBarry(x))", "exists x.(Play(x) & DeborahWallace(x) & BasedOnLifeOfJamesMariaBarry(x))", "all x y.((Play(x) & DeborahWilliams(y)) -> -BasedOnLifeOfJamesMariaBarry(y))", "(exists x.(Play(x) & DeborahWallace(x) & BasedOn(x,JimmyMariaBarry)))", "exists x.(Play(x) & DeborahWallace(x) & BasedOnJamesMariaBarry(x))", "-exists x.(Play(x) & FromDeborahWallace(x) & BasedOnLifeOfJamesMariaBarry(x))"]}
{"id": "folio_train_2628", "nl": "Gasland is a play.", "fol": "IsPlay(Gasland)", "prediction": ["all x.(Gasland(x) -> Play(x))", "(Play(Gasland) & Play(Gasland))", "Gasland is a play.", "(Play(Gasland) | Play(Gasland)))", "all x.(Gasland(x) -> Play(x))", "Gasland is Play(Gasland)", "Gasland is play.", "(Play(Galasland) & Play(Galasland))", "(Play(Gasland) & Play(Gasland))", "all x.(Gasland(x) -> Play(x))", "(Play(Galaxy) & Play(Galaxy))", "(play(Gasland) | Play(Gasland))", "All x.(Gasland(x) -> Play(x))", "all x.(Gasland(x) -> Play(x))", "All x.(Gasland(x) -> Play(x))", "all x.(Galaxy(x) -> Play(x))"]}
{"id": "folio_train_2629", "nl": "If an animal needs a large territory, then it travels far.", "fol": "all x.(RequiresLargeTerritory(x) -> TravelsLongDistance(x))", "prediction": ["all x.((Animal(x) & NeedsLargeTerritory(x)) -> TravelsFar(x))", "all x.((Animal(x) & NeedsLargeTerritory(x)) -> TravelsFar(x))", "all x y.((Animal(x) & LargeTerritory(y)) -> TravelsFar(x,y))", "all x y.((Animal(x) & LargeTerritory(x) & Needs(x,y)) -> TravelsFar(x))", "all x.(LargeTerritory(x) -> TravelsFar(x))", "all x.((Animal(x) & LargeTerritory(x)) -> TravelsFar(x))", "all x.((Animal(x) & NeedsLargeTerritory(x)) -> TravelsFar(x))", "all x y.((Animal(x) & NeedsLargeTerritory(x)) -> TravelsFar(x))", "exists x.(Animal(x) & NeedsLargeTerritory(x) & TravelsFar(x))", "all x.((Animal(x) & NeedsLargeTerritory(x)) -> TravelsFar(x))", "all x.(LargeTerritory(x) -> TravelsFar(x))", "all x y.((Animal(x) & LargeTerritory(y) & Needs(x,y)) -> TravelsFar(x))", "all x.((Animal(x) & LargeTerritory(x)) -> TravelsFar(x))", "exists x.(Animal(x) & NeedsLargeTerritory(x) & TravelsFar(x))", "all x.((Animal(x) & NeedsLargeTerritory(x)) -> TravelsFar(x))", "all x.((Animal(x) & NeedsLargeTerritory(x)) -> TravelsFar(x))"]}
{"id": "folio_train_2630", "nl": "Everything that eats a lot needs a large territory.", "fol": "all x.(ConsumesLargeAmount(x) -> RequiresLargeTerritory(x))", "prediction": ["all x.((EatsLot(x) & LargeTerritory(x)) -> Needs(x))", "all x.((EatsLot(x) & HasLargeTerritory(x)) -> NeedsLargeTerritory(x))", "all x y.((EatsLot(x) & LargeTerritory(y)) -> Needs(x,y))", "all x.((EatsLot(x) & LargeTerritory(x)) -> NeedsLargeTerritory(x))", "all x y.((EatsLot(x) & Land(y)) -> NeedsLargeTerritory(x,y))", "all x.((EatsLot(x) & NeedsLargeTerritory(x)) -> LargeTerritory(x))", "all x.(EatsLot(x) -> NeedsLargeTerritory(x))", "all x.((EatsLots(x) & LargeTerritory(x)) -> Needs(x))", "all x.((EatsLittle(x) & HasLargeTerritory(x)) -> NeedsLargeTerritory(x))", "all x y.((EatsLot(x) & LargeTerritory(y)) -> Needs(x,y))", "all x.((Eats(x) & Lots(x)) -> NeedsLargeTerritory(x))", "all x.((EatsLittle(x) & NeedsLargeTerritory(x)) -> NeedsLargeTerritory(x))", "all x y.((EatsLittle(x) & Landlord(y)) -> NeedsLargeTerritory(x,y))", "all x.(EatsLot(x) -> NeedsLargeTerritory(x))", "exists x.(EatsLot(x) & LargeTerritory(x))", "all x.(EatsLot(x) -> NeedsLargeTerritory(x))"]}
{"id": "folio_train_2631", "nl": "If something is a big animal, then it will eat a lot.", "fol": "all x.(LargeAnimal(x) -> ConsumesLargeAmount(x))", "prediction": ["all x.((BigAnimal(x) & EatsLot(x)) -> EatsLot(x))", "all x.(BigAnimal(x) -> EatsLot(x))", "all x.((BigAnimal(x) & EatsLot(x)) -> EatsLot(x))", "all x.(BigAnimal(x) -> EatsLot(x))", "all x y.((BigAnimal(x) & Animal(y)) -> EatsLot(x,y))", "all x.((BigAnimal(x) & EatsLot(x)) -> EatsLot(x))", "all x.(BigAnimal(x) -> EatsLot(x))", "all x.((BigAnimal(x)) -> EatsLot(x))", "all x.((BigAnimal(x) & EatsLot(x)) -> EatsLot(x))", "all x.((BigAnimal(x) & EatsLots(x)) -> EatsLots(x))", "all x.(BigAnimal(x) -> EatsLot(x))", "all x.(BigAnimal(x) -> EatsLot(x))", "all x.((BigAnimal(x)) -> EatsLot(x))", "all x.(BigAnimal(x) -> EatsLot(x))", "exists x.(BigAnimal(x) & EatsLoad(x))", "exists x.(BigAnimal(x) & EatsLittle(x))"]}
{"id": "folio_train_2632", "nl": "All bears are big animals.", "fol": "all x.(IsBear(x) -> LargeAnimal(x))", "prediction": ["all x.(Bear(x) -> BigAnimal(x))", "all x.(Bear(x) -> BigAnimal(x))", "(all x.(Bear(x) -> BigAnimal(x)))", "all x.(Bear(x) -> BigAnimal(x))", "(all x.(Bear(x) -> BigAnimal(x)))", "all x.(Bear(x) -> BigAnimal(x))", "all x y.(Bear(x) -> BigAnimal(x))", "(all x.(Bear(x) -> BigAnimal(x)))", "all x.(Bear(x) -> BigAnimal(x))", "all x.(Bear(x) -> BigAnimal(x))", "all x.(Bear(x) -> BigAnimal(x))", "all x.(Beard(x) -> BigAnimal(x))", "all x.(Bear(x) -> BigAnimal(x))", "all x.(Beard(x) -> BigAnimal(x))", "all x.(Bear(x) -> BigAnimal(x))", "all x.(Bear(x) -> BigAnimal(x))"]}
{"id": "folio_train_2633", "nl": "Larry is a big animal.", "fol": "LargeAnimal(Larry)", "prediction": ["all x.(Larry(x) -> BigAnimal(x))", "Larry is bigAnimal(Larry)", "Larry is a bigAnimal(Larry)", "all x.(Larry(x) -> BigAnimal(x))", "(BigAnimal(Larry) & BigAnimal(Larry))", "Larry is bigAnimal(Larry)", "Larry is a bigAnimal(Larry)", "all x.(Larry(x) -> BigAnimal(x))", "(BigAnimal(Larry) & BigAnimal(Larry))", "(BigAnimal(Larry) & Has(Larry,Larry))", "Larry is biganimal(Larry)", "Larry is a bigAnimal(Larry)", "all x.(Larry(x) -> BigAnimal(x))", "(BigAnimal(Larry) & BigAnimal(Larry,Larry))", "all x.(Larry(x) -> BigAnimal(x))", "all x.(Larry(x) -> BigAnimal(x))"]}
{"id": "folio_train_2634", "nl": "Larry is a bear.", "fol": "IsBear(Larry)", "prediction": ["all x.(Bear(x) -> Larry(x))", "Larry is Bear(Larry)", "(Bear(Larry) & Bear(Larry))", "all x.((Larry(x) & Bear(x)) -> Bear(x))", "Larry is a Bear(Larry)", "all x.(Bear(x) -> Larry(x))", "Larry is Bear(Larry)", "all x.((Larry(x) & Bear(x)) -> Has(x,y))", "all x.(Bear(x) -> Larry(x))", "(Bear(Larry)", "Larry is bear.", "(Bear(Larry)", "exists x.(Bear(x) & Larry(x))", "(Bear(Larry)", "Larry is Bear(larry)", "(Bear(Larry)"]}
{"id": "folio_train_2635", "nl": "Larry is neither a bear nor travels far.", "fol": "(-IsBear(Larry) & -TravelsLongDistance(Larry))", "prediction": ["Larry & -(Bear(Larry) | TravelsFar(Larry)))", "all x.(Larry(x) -> (-Bear(x) & -TravelsFar(x)))", "(-Bear(Larry) & -TravelsFar(Larry))", "Larry is -(Bear(Larry) | TravelsFar(Larry)))", "all x.((Larry(x) & -Bear(x) & -TravelsFar(x)) -> -Bear(x))", "-(Bear(Larry) | TravelsFar(Larry))", "Larry is -Bear(Larry) & -TravelsFar(Larry))", "(Bear(Larry) & -TravelsFar(Larry))", "Larry is neither bear nor travelsfar.", "((Larry(Larry) & -Bear(Larry)) | TravelsFar(Larry)))", "all x.(Larry(x) -> (-Bear(x) & -TravelsFar(x)))", "(-Bear(Larry) & -TravelsFar(Larry))", "-(Bear(Larry) | TravelsFar(Larry))", "Larry is -Bear(Larry) & -TravelsFar(Larry))", "(-Bear(Larry) & -TravelsFar(Larry))", "all x.(Larry(x) -> (-Bear(x) & -TravelsFar(x)))"]}
{"id": "folio_train_2636", "nl": "If Larry either travels far or needs a large territory, then Larry is a bear.", "fol": "((TravelsLongDistance(Larry) | RequiresLargeTerritory(Larry)) -> IsBear(Larry))", "prediction": ["all x.((Larry(x) & (TravelsFar(x) | NeedsLargeTerritory(x))) -> Bear(x))", "all x.((TravelsFar(x) | NeedsLargeTerritory(x)) -> Bear(x))", "all x.((Larry(x) & (TravelsFar(x) | NeedsLargeTerritory(x))) -> Bear(x))", "((TravelsFar(Larry) | NeedsLargeTerritory(Larry))) -> Bear(Larry))", "all x y.((Larry(x) & (TravelsFar(x) | NeedsLargeTerritory(x))) -> Bear(x))", "all x.((TravelsFar(x) | NeedsLargeTerritory(x)) -> Bear(x))", "all x.((Larry(x) & (TravelsFar(x) | NeedsLargeTerritory(x))) -> Bear(x))", "exists x.(Bear(x) -> (TravelsFar(x) | NeedsLargeTerritory(x)))", "all x.((Larry(x) & TravelsFar(x)) | NeedsLargeTerritory(x)) -> Bear(x))", "all x y.((Larry(x) & (TravelsFar(x) | NeedsLargeTerritory(x))) -> Bear(x))", "all x.((TravelsFar(x) | NeedsLargeTerritory(x)) -> Bear(x))", "all x.((Larry(x) & (TravelsFar(x) | NeedsLargeTerritory(x))) -> Bear(x))", "exists x.(Bear(x) -> (TravelsFar(x) | NeedsLargeTerritory(x)))", "exists x.(Bear(x) & ((TravelsFar(x) | NeedsLargeTerritory(x))) -> Bear(x))", "all x.((Larry(x) & (TravelsFar(x) | NeedsLargeTerritory(x))) -> Bear(x))", "all x.((Larry(x) & (TravelsFar(x) | NeedsLargeTerritory(x))) -> Bear(x))"]}
{"id": "folio_train_2637", "nl": "No criminal is kind. ", "fol": "all x.(IsCriminal(x) -> -IsKind(x))", "prediction": ["-exists x.(Criminal(x) & Kind(x))", "all x.(Criminal(x) -> -Tirn(x))", "-exists x.(Criminal(x) & Kind(x))", "-(Criminal(x) & Kind(x))", "all x.(Criminal(x) -> -Kind(x))", "-kind(criminal)", "-exists x.(Criminal(x) & Kind(x))", "all x.(Criminal(x) -> -Tirn(x))", "(None(criminal) & Kind(c))", "-exists x.(Criminal(x) & Kind(x))", "-kind(criminal)", "all x.(Criminal(x) -> -Kind(x))", "all x.(Criminal(x) -> -kind(x))", "-exists x.(Criminal(x) & Kind(x))", "-exists x.(Criminal(x) & Kind(x))", "-exists x.(Criminal(x) & Kind(x))"]}
{"id": "folio_train_2638", "nl": "All person who breaks the law is a criminals.", "fol": "all x.(BreaksTheLaw(x) -> IsCriminal(x))", "prediction": ["all x.(BreaksLaw(x) -> Criminal(x))", "all x.((Person(x) & BreaksLaw(x)) -> Criminal(x))", "all x.(BreaksLaw(x) -> Criminal(x))", "all x.((Person(x) & BreaksLaw(x)) -> Criminal(x))", "all x y.((Person(x) & BreaksLaw(x)) -> Criminal(y))", "all.(BreaksLaw(Person) -> Criminal(Person).", "all x.(BreaksLaw(x) -> Criminal(x))", "all x y.((Person(x) & BreaksLaw(x)) -> Criminal(y))", "all x.((Person(x) & BreaksLaw(x)) -> Criminal(x))", "all x.(BrokenLaw(x) -> Criminal(x))", "all x.(BreaksLaw(x) -> Criminal(x))", "all x.((Person(x) & BreaksLaw(x)) -> Criminal(x))", "all x.((Person(x) & BreaksLaw(x)) -> Criminal(x))", "all x.(BreaksLaw(x) -> Criminal(x))", "all x.(BreaksLaw(x) -> Criminals(x))", "all x.((Person(x) & BreaksLaw(x)) -> Criminal(x))"]}
{"id": "folio_train_2639", "nl": "People are either kind or evil.", "fol": "all x.((IsKind(x) & -IsEvil(x)) | (-IsKind(x) & IsEvil(x)))", "prediction": ["all x.(Person(x) -> (Kind(x) | Evil(x)))", "all x.(Person(x) -> (Tirn(x) | Evil(x)))", "all x.(People(x) -> (Kind(x) | Evil(x)))", "all x.(Person(x) -> (Kind(x) | Evil(x)))", "exists x.(Populist(x) & ((Kind(x) | Evil(x))))", "all x.(Person(x) -> ((Kind(x) | Evil(x))))", "exists x.(Person(x) & ((Kind(x) | Evil(x))))", "all x.(People(x) -> (Tirn(x) | Evil(x)))", "exists x.(Person(x) & ((Kind(x) & Evil(x)) | (-Kind(x) & Evil(x)))))", "all x y.((Person(x) & Kind(y)) | Evil(y))", "all x.(People(x) -> (Kind(x) | Evil(x)))", "exists x.(Populist(x) & ((Kind(x) | Evil(x))))", "all x y.((Person(x) & Kind(y)) | Evil(y))", "exists x.(Person(x) & (Kind(x) | Evil(x)))", "all x y.((Person(x) & Kind(y)) | Evil(y))", "exists x.(Popular(x) & (Kind(x) | Evil(x)))"]}
{"id": "folio_train_2640", "nl": "If someone is evil, then they are ugly.", "fol": "all x.(IsEvil(x) -> IsUgly(x))", "prediction": ["all x.(Evil(x) -> Ugly(x))", "all x.((Evil(x) & Ugly(x)) -> Evil(x))", "(Evil(e) -> Ugly(e))", "all x.(Evil(x) -> Ugly(x))", "all x.((Evil(x) & Ugly(x)) -> Evil(x))", "all x.(Evil(x) -> Ugly(x))", "all x.((Person(x) & Evil(x)) -> Ugly(x))", "all x y.(Evil(x) -> Ugly(y))", "all x.((Evil(x) & Ugly(x)) -> Evil(x))", "all x.(Evil(x) -> Ugly(x))", "all x.(Evil(x) -> Ugly(x))", "all x.((Evil(x) -> Ugly(x))", "all x.(Evil(x) -> Ugly(x))", "exists x.(Evil(x) & Uglier(x))", "exists x.(Evil(x) & Ugly(x))", "exists x.(Evil(x) & Uglier(x))"]}
{"id": "folio_train_2641", "nl": "If someone is evil, then they are cold-blood.", "fol": "all x.(IsEvil(x) -> IsColdBlooded(x))", "prediction": ["all x.((Evil(x) & ColdBloode(x)) -> ColdBloode(x))", "all x.(Evil(x) -> ColdBloode(x))", "(Evil(e) -> ColdBlooded(e))", "all x.((Evil(x) & ColdBloode(x)) -> ColdBloode(x))", "all x.(Evil(x) -> ColdBloode(x))", "all x.((Person(x) & Evil(x)) -> ColdBloode(x))", "All x y.((Evil(x) & Person(y)) -> ColdBloode(x))", "all x.((Evil(x) & ColdBlood(x)) -> ColdBlood(x))", "all x.(Evil(x) -> ColdBloode(x))", "all x.((Person(x) & Evil(x)) -> ColdBloode(x))", "all x.((Evil(x) -> ColdBlooded(x))", "all x.(Evil(x) -> ColdBlood(x))", "all x.((Evil(x)) -> ColdBloode(x))", "all x.(Evil(x) -> ColdBlooded(x))", "exists x.(Evil(x) & ColdBlood(x))", "exists x.(Odd(x) & ColdBloode(x))"]}
{"id": "folio_train_2642", "nl": "If Garry is either evil and ugly or neither evil nor ugly, then Garry is not evil.", "fol": "(((IsEvil(Garry) & IsUgly(Garry) & -(-IsEvil(Garry) & -IsUgly(Garry))) | (-(IsEvil(Garry) & IsUgly(Garry)) & -IsEvil(Garry) & -IsUgly(Garry))) -> -IsEvil(Garry))", "prediction": ["all x.((Garry(x) & (Evil(x) | Ugly(x))) | -Evil(x) | -Ugly(x)))", "all x.((Garry(x) & (Evil(x) | Ugly(x))) | -Evil(x) & Ugly(x)))", "((Garry(Garry) & (Evil(Garry) | -Evil(Garry))) & -Ugly(Garry))", "((EvilAndUgly(Garry) | -Evil(Garry))) -> -Evil(Garry))", "all x.((Garry(x) & (Evil(x) | Ugly(x)) | -Evil(x) | -Ugly(x))) -> -Evil(x))", "(EvilAndUgly(Garry,Garry) | -EvilAndUgly(Garry,Garry)))", "all x y.((Garry(x) & (Evil(x) | Ugly(x))) | -Evil(y) | -Ugly(y)))", "all x.((Garry(x) & (Evil(x) | Ugly(x) | -Evil(x) | Ugly(x))) -> -Evil(x))", "exists x.(Garry(x) & ((EvilAndUgly(x) | -Evil(x)) | -Ugly(x))))", "all x.((Garry(x) & EitherEvilAndUgly(x) | -EvilAndUgly(x))) -> -Evil(x))", "all x.((Garry(x) & (Evil(x) | Ugly(x))) | (-Evil(x) | Ugly(x)))))", "all x.((Garry(x) & Evil(x) & Ugly(x)) | (-Evil(x) & Ugly(x))))", "all x.((Garry(x) & Evil(x) & Ugly(x) & -Evil(x) & -Ugly(x)) -> -Evil(x))", "(all x.((Garry(x) & Evil(x) & Ugly(x)) | (-Evil(x) & Ugly(x))))", "all x.((Garry(x) & (Evil(x) | Ugly(x) | -Evil(x) | Ugly(x))) -> -Evil(x))", "all x.((Garry(x) & (Evil(x) & Ugly(x) | -Evil(x) & -Ugly(x))) -> -Evil(x))"]}
{"id": "folio_train_2643", "nl": "Garry is ugly.", "fol": "IsUgly(Garry)", "prediction": ["Garry isUgly(Garry)", "(Ugly(Garry))", "all x.(Garry(x) -> Ugly(x))", "-Ugly(Garry)", "Garry isUgly(Garry)", "(Ugly(Garry))", "-Ugly(Garry)", "all x.(Garry(x) -> Ugly(x))", "Garry isUgly(Garry)", "(Ugly(Garry)", "Garry is Ugly(Garry)", "all x.(Garry(x) -> Ugly(x))", "Garry isUgly(Garry)", "(Ugly(Garry)", "(UglyGarry(Garry)", "Garry is Ugly."]}
{"id": "folio_train_2644", "nl": "Garry is cold-blooded and breaks the law.", "fol": "(IsColdBlooded(Garry) & BreaksTheLaw(Garry))", "prediction": ["all x.(Garry(x) -> (ColdBlooded(x) & BreaksLaw(x)))", "(ColdBlooded(Garry) & BreaksLaw(Garry))", "Garry is ColdBlooded(Garry) & BreaksLaw(Garry))", "Garry is coldBloodedAndBreaksLaw(Garry)", "all x.(Garry(x) -> (ColdBlooded(x) & BreaksLaw(x)))", "(ColdBlooded(Garry) & BreaksLaw(Garry))", "Garry is ColdBlooded(Garry) & BreaksLaw(Garry,Limit))", "all x.(Garry(x) -> (ColdBlooded(x) & BreaksLaw(x)))", "Garry is coldBloodedAndBreaksLaw(Garry)", "(ColdBlooded(Garry) & BreaksLaw(Garry))", "-ColdBlooded(Garry) & BreaksLaw(Garry,Garry)", "all x.(Garry(x) -> (ColdBlooded(x) & BreaksLaw(x)))", "(ColdBlooded(Garry) & BreaksLaw(Garry))", "all x.(Garry(x) -> (ColdBlooded(x) & BreaksLaw(x)))", "(ColdBlooded(Garry) & BreaksLaw(Garry))", "all x.(Garry(x) -> (ColdBlooded(x) & BreaksLaw(x)))"]}
{"id": "folio_train_2645", "nl": "If Garry is evil or breaks the law, then Garry is not both a criminal and breaking the law.", "fol": "((IsEvil(Garry) | BreaksTheLaw(Garry)) -> -(IsCriminal(Garry) & BreaksTheLaw(Garry)))", "prediction": ["all x.((Garry(x) & (Evil(x) | BreaksLaw(x))) -> -(Criminal(x) & BreakingLaw(x))))", "((GarryIsEvil(Garry) | BreaksLaw(Garry))) -> -(Criminal(Garry) & BreakingLaw(Garry)))", "(all x.((Garry(x) & Evil(x) & -BreaksLaw(x)) -> -(Criminal(x) & BreakingLaw(x))))", "all x.((Garry(x) & (Evil(x) | BreaksLaw(x))) -> -(Criminal(x) & BreakingLaw(x)))", "all x.((Garry(x) & Evil(x) & -BreaksLaw(x)) -> -(Criminal(x) & BreakingLaw(x)))", "exists x.(Garry(x) & ((IsEvil(x) | BreaksLaw(x))) | (-IsCriminal(x) & BreaksLaw(x)))))", "all x.((Garry(x) & (Evil(x) | BreaksLaw(x))) -> -(Criminal(x) & BreakingLaw(x)))", "all x y.((Garry(x) & Evil(x) & BreaksLaw(x) & -(Criminal(y) & BreakingLaw(y))) -> -(Criminal(x) & BreakingLaw(x)))", "all x y.((Garry(x) & Evil(x) & BreaksLaw(x)) -> (-Criminal(x) & BreakingLaw(x)))", "exists x.(Garry(x) & ((IsEvil(x) | BreaksLaw(x))) | (IsCriminal(x) & BreakingLaw(x))))", "all x.((Garry(x) & Evil(x) & -(BreaksLaw(x) | Criminal(x))))", "all x.((Garry(x) & (Evil(x) | BreaksLaw(x))) -> -(Criminal(x) & BreakingLaw(x)))", "all x y.((Garry(x) & (Evil(x) | BreaksLaw(x))) -> -(Criminal(x) & BreakingLaw(x)))", "all x.((Garry(x) & (Evil(x) | BreaksLaw(x))) -> -(Criminal(x) & BreakingLaw(x)))", "all x.((Garry(x) & (Evil(x) | BreaksLaw(x))) -> -Criminal(x) & BreakingLaw(x))", "all x.((Garry(x) & (Evil(x) | BreaksLaw(x))) -> -(Criminal(x) & BreakingLaw(x)))"]}
{"id": "folio_train_2646", "nl": "Phoneix's music is classified under the indie pop genre.", "fol": "ClassifiedAsIndiePop(Phoenix)", "prediction": ["all x.(PhoneixMusic(x) -> IndiePop(x))", "all x.(Phoneix(x) -> IndiePop(x))", "all x.((PhoneixMusic(x) & IndiePop(x)) -> Classified(x))", "all x y.((Phoneix(x) & Music(y)) -> IndiePop(x,y))", "(IndiePopGenre(Phoneix) & Music(Phoneix))", "all x.(PhoneixMusic(x) -> IndiePop(x))", "all x.(Phoneix(x) -> (IndiePop(x) | IndiePop(x)))", "all x y.((Phoneix(x) & Music(y)) -> IndiePop(x))", "All x.((PhoneixMusic(x) & IndiePopGenre(x)) -> Classified(x))", "all x y.((PhoneixMusic(x) & IndiePop(y)) -> Classified(x,y))", "(IndiePopGenre(Phoneix) & Music(Phoneix))", "all x.(PhoneixMusic(x) -> IndiePopGenre(x))", "all x y.((Phoneix(x) & Music(y)) -> IndiePop(x,y))", "all x y.((Phoneix(x) & Music(y) & IndiePop(y)) -> Classified(x,y))", "All x.(PhoneixMusic(x) -> IndiePopGenre(x))", "All x.(PhoneixMusic(x) -> IndiePopGenre(x))"]}
{"id": "folio_train_2647", "nl": "Phoenix is a band from France.", "fol": "(IsABand(Phoenix) & FromFrance(Phoenix))", "prediction": ["all x.(Pheonix(x) -> (BandFromFrance(x) & FromFrance(x)))", "(FrenchBand(Pheonix) & From(Pheonix(Pheonix))", "(Band(Phoenix) & FromFrance(Phoenix))", "(Band(Pheonix) & FromFrance(Pheonix))", "Phoenix is a band from France.", "all x.(Phoenix(x) -> (BandFromFrance(x) & FromFrance(x)))", "(FrenchBand(Phoenix) & From(Phoenix,France))", "all x.(Pheonix(x) -> (BandFromFrance(x) & FoundedIn(x,France)))", "all x y.((Band(x) & Phoenix(y) & FromFrance(x)) -> Band(x,y))", "(France(Phoenix) & Band(Phoenix))", "Phoenix is a band from France.", "All x.(Phoenix(x) -> (BandFromFrance(x) & FoundedIn(x,France)))", "all x.(Pheonix(x) -> (Band(x) & FromFrance(x)))", "all x y.((Band(x) & Phoenix(y)) -> (France(x) & From(y,x)))", "(BandFromFrance(Pheonix)", "All x.(Pheonix(x) -> BandFromFrance(x))"]}
{"id": "folio_train_2648", "nl": "French bands write songs in French or in English.", "fol": "all x y.((((IsABand(x) & FromFrance(x) & WritesSong(x,y)) -> IsFrenchSong(y)) & -IsEnglishSong(y)) | (-((IsABand(x) & FromFrance(x) & WritesSong(x,y)) -> IsFrenchSong(y)) & IsEnglishSong(y)))", "prediction": ["all x.(FrenchBand(x) -> (WritesSongsInFrench(x) | WritesSongsInEnglish(x)))", "all x y.((FrenchBand(x) & Song(y)) -> (WritesInFrench(x,y) | WritesInEnglish(x,y)))", "(FrenchBand(f) & (WritesSongsInFrench(f) | WritesSongsInEnglish(f)))", "all x y.((FrenchBand(x) & (FrenchSong(y) | EnglishSong(y))) -> Writes(x,y))", "all x.(FrenchBand(x) -> (WritesSongsInFrench(x) | WritesSongsInEnglish(x)))", "all x.((FrenchBand(x) & (WritesSongsInFrench(x) | WritesSongsInEnglish(x))) -> WritesSongsInFrench(x))", "all x y.((FrenchBand(x) & Song(y)) -> (WritesIn(x,y) & (In(x,y) | In(x,y))))", "(WritesSongsIn(French,English) | WritesSongsIn(French,English)))", "(FrenchBand(f) & (WritesSongsInFrench(f) | WritesSongsInEnglish(f)))", "all x.(FrenchBand(x) -> (WritesSongsInFrench(x) | WritesSongsInEnglish(x)))", "all x.(FrenchBand(x) -> (WriteSongsInFrench(x) | WriteSongsInEnglish(x)))", "all x.(FrenchBand(x) -> (WritesSongs(x,French) | WritesSongs(x,English)))", "all x y.((FrenchBand(x) & (FrenchSong(y) | EnglishSong(y))) -> Writes(x,y))", "exists x.(FrenchBand(x) & (Song(x) -> (WritesInFrench(x) | WritesInEnglish(x))))", "all x.(FrenchBand(x) -> (WritesSongsIn(x,French) | WritesSongsIn(x,English)))", "all x.(FrenchBand(x) -> (WritesSongsInFrench(x) | WritesSongsInEnglish(x)))"]}
{"id": "folio_train_2649", "nl": "Aside from indie pop, pop rock and synth-pop are two other genres of music.", "fol": "all x.((ClassifiedAsIndiePop(x) -> -ClassifiedAsPopRock(x)) & -ClassifiedAsSynthPop(x))", "prediction": ["(exists x.(IndiePop(x) & PopRock(x) & SynthPop(x)))", "all x.((PopRock(x) | SynthPop(x)) -> MusicGenre(x))", "(IndiePop(in) & PopRock(in) & SynthPop(in))", "(exists x.(IndiePop(x) & PopRock(x)) & exists y.(SynthPop(y) & SynthPop(y))))", "(ApartFromIndiePop(a) & PopRock(b) & SynthPop(c))", "all x.((IndiePop(x) & PopRock(x) & SynthPop(x)) -> MusicGenre(x))", "all x.((PopRock(x) & SynthPop(x)) -> MusicGenre(x))", "exists x y z.((IndiePop(x) & PopRock(y) & SynthPop(z)) -> MusicGenre(x))", "(IndiePop(in) & PopRock(in) & SynthPop(in))", "(exists x.(IndiePop(x) & PopRock(x) & SynthPop(x)))", "(OtherMusicGenres(indiePop) & PopRock(pop) & SynthesizerPop(synthesizerPop))", "(exists x.(IndiePop(x) & PopRock(x)) & exists y.(SynthPop(y) & SynthPop(y))))", "all x.(IndiePop(x) -> (PopRock(x) | SynthPop(x)))", "all x.((PopRock(x) | SynthPop(x)) -> MusicGenre(x))", "exists x.(PopRock(x) & SynthesizerPop(x))", "all x.((IndiePop(x) & PopRock(x) & SynthPop(x)) -> Music(x))"]}
{"id": "folio_train_2650", "nl": "Phoneix has no songs in French.", "fol": "all x.(WritesSong(Phoenix,x) -> -IsFrenchSong(x))", "prediction": ["Phoneix - exists x.(Song(x) & -French(x))", "Phoneix - HasSongsInFrench(Phoneix)", "All x.(Phoneix(x) -> -exists y.(Song(y) & InFrench(x)))", "(-exists x.(Phoneix(x) & Song(x)))", "Phoneix -exists x.(Song(x) & InFrench(x))", "Phoneix n'exists x.(Song(x) & -French(x))", "(-exists x.(Phoneix(x) & Song(x)) & -exists y.(Phoneix(y) & Song(x))))", "NoSongsInFrench(Phoneix)", "(NoSongsInFrench(Phoneix))", "Phoneix - exists x.(Song(x) & -InFrench(x))", "-exists x.(Phoneix(x) & -exists y.(Song(y) & InFrench(x,y)))", "Phoneix n'exists x.(Song(x) & -French(x))", "Phoneix - HasSongsInFrench(Phoneix)", "-exists x.(Phoneix(x) & -exists y.(FrenchSong(y) & InPhoneix(x,y)))", "(-exists x.(Phoneix(x) & SongsInFrench(x)))", "Phoneix has no songs in French."]}
{"id": "folio_train_2651", "nl": "Phoenix makes pop rock music.", "fol": "all x.(WritesSong(Phoenix,x) & ClassifiedAsPopRock(x))", "prediction": ["all x.(Phoenix(x) -> MakesPopRockMusic(x))", "all x.(Pheonix(x) -> MakesPopRockMusic(x))", "all x y.((Phoenix(x) & PopRockMusic(y)) -> Makes(x,y))", "(MakesPopRockMusic(Phoenix)", "(MadePopRockMusic(Phoenix) & MakesPopRockMusic(Phoenix))", "all x.(Phoenix(x) -> MakesPopRockMusic(x))", "all x.(Pheonix(x) -> MakesPopRockMusic(x))", "(MakesPopRockMusic(Phoenix,Phoenix))", "all x y.((Phoenix(x) & PopRockMusic(y)) -> Makes(x,y))", "all x y.((Pheonix(x) & PopRock(y)) -> Makes(x,y))", "-makesPopRockMusic(Phoenix)", "all x.(Phoenix(x) -> MakesPopRockMusic(x))", "exists x.(Pheonix(x) & PopRockMusic(x))", "exists x.(Phoenix(x) & PopRockMusic(x))", "all x y.((Pheonix(x) & PopRockMusic(y)) -> Makes(x,y))", "exists x.(Phoenix(x) & PopRockMusic(x))"]}
{"id": "folio_train_2652", "nl": "Phoenix has songs in French.", "fol": "exists x.(WritesSong(Phoenix,x) & IsFrenchSong(x))", "prediction": ["all x.(Phoenix(x) -> HasSongsInFrench(x))", "all x.(Pheonix(x) -> HasSongsInFrench(x))", "(HasSongsInFrench(Phoenix)", "(SongsInFrench(Phoenix) & AvailableInFrench(Phoenix))", "(exists x.(Phoenix(x) & Song(x)) & InFrench(x))", "all x.(Phoenix(x) -> exists y.(Song(y) & InFrench(x)))", "all x y.((Phoenix(x) & Song(y)) -> HasInFrench(x,y))", "all x.(Pheonix(x) -> exists y.(Song(y) & InFrench(x,y)))", "(HasSongsInFrench(Phoenix)", "-exists x.(Pheonix(x) & Song(x,French))", "exists x.(Phoenix(x) & Song(x,French))", "(SongsInFrench(Phoenix)", "All x y.((Phoenix(x) & Song(y)) -> HasInFrench(x,y))", "exists x.(Phone(x) & HasSongsInFrench(x))", "exists x.(Phoenix(x) & HasSongsInFrench(x))", "all x.(Pheonix(x) -> HasSongsInFrench(x))"]}
